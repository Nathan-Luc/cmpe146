
build/application/firmware.elf:     file format elf32-littlearm
build/application/firmware.elf
architecture: arm, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000127e1

Program Header:
0x70000001 off    0x00019660 vaddr 0x00019660 paddr 0x00019660 align 2**2
         filesz 0x00000008 memsz 0x00000008 flags r--
    LOAD off    0x00010000 vaddr 0x00010000 paddr 0x00010000 align 2**16
         filesz 0x00009668 memsz 0x00009668 flags r-x
    LOAD off    0x00020000 vaddr 0x10000000 paddr 0x00019668 align 2**16
         filesz 0x0000023c memsz 0x0000023c flags rw-
    LOAD off    0x00020240 vaddr 0x10000240 paddr 0x10000240 align 2**16
         filesz 0x00000000 memsz 0x0000038c flags rw-
private flags = 5000400: [Version5 EABI] [hard-float ABI]

Sections:
Idx Name             Size      VMA       LMA       File off  Algn  Flags
  0 .text            00009660  00010000  00010000  00010000  2**4  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data            0000023c  10000000  00019668  00020000  2**2  CONTENTS, ALLOC, LOAD, DATA
  2 .data_RAM2       00000000  20000000  20000000  0002023c  2**2  CONTENTS
  3 .bss             0000038c  10000240  10000240  00020240  2**3  ALLOC
  4 .ARM.exidx       00000008  00019660  00019660  00019660  2**2  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .uninit_RESERVED 00000000  10000000  10000000  0002023c  2**2  CONTENTS
  6 .noinit_RAM2     00000000  20000000  20000000  0002023c  2**2  CONTENTS
  7 .noinit          00000000  100005cc  100005cc  0002023c  2**2  CONTENTS
  8 .ARM.attributes  00000030  00000000  00000000  0002023c  2**0  CONTENTS, READONLY
  9 .comment         0000007e  00000000  00000000  0002026c  2**0  CONTENTS, READONLY
 10 .debug_info      0003c58e  00000000  00000000  000202ea  2**0  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev    0000429e  00000000  00000000  0005c878  2**0  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges   00000cc0  00000000  00000000  00060b16  2**0  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges    00000c30  00000000  00000000  000617d6  2**0  CONTENTS, READONLY, DEBUGGING
 14 .debug_line      00006694  00000000  00000000  00062406  2**0  CONTENTS, READONLY, DEBUGGING
 15 .debug_str       0001950b  00000000  00000000  00068a9a  2**0  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame     000031fc  00000000  00000000  00081fa8  2**2  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
00010000 l    d  .text	00000000 .text
10000000 l    d  .data	00000000 .data
20000000 l    d  .data_RAM2	00000000 .data_RAM2
10000240 l    d  .bss	00000000 .bss
00019660 l    d  .ARM.exidx	00000000 .ARM.exidx
10000000 l    d  .uninit_RESERVED	00000000 .uninit_RESERVED
20000000 l    d  .noinit_RAM2	00000000 .noinit_RAM2
100005cc l    d  .noinit	00000000 .noinit
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 interrupt.cpp
00012dbc l     F .text	0000002c NVIC_EnableIRQ
00012de8 l     F .text	00000054 NVIC_SetPriority
00010000 l     O .text	000000e4 kInterruptVectorTable
00018208 l     O .text	0000000e InterruptLookupHandler::file
00018218 l     O .text	0000001e InterruptLookupHandler::__PRETTY_FUNCTION__
0001022c l       .text	00000000 handler2_address_const
00000000 l    df *ABS*	00000000 startup.cpp
00017e1c l     O .text	00000049 Lpc40xxSystemController::SetPeripheralClockDivider(unsigned char)::__PRETTY_FUNCTION__
00017ec4 l     O .text	0000005c Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)::__PRETTY_FUNCTION__
00017e68 l     O .text	0000005a Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)::__PRETTY_FUNCTION__
00017f20 l     O .text	0000003a Lpc40xxSystemController::SetCpuClockDivider(unsigned char)::__PRETTY_FUNCTION__
00017f5c l     O .text	0000003e Timer::Initialize(unsigned long, void (*)(), long)::__PRETTY_FUNCTION__
10000088 l     O .data	00000008 (anonymous namespace)::system_timer
10000090 l     O .data	00000004 (anonymous namespace)::system_controller
10000094 l     O .data	0000000c (anonymous namespace)::timer0
00012688 l     F .text	00000040 (anonymous namespace)::Lpc40xxUptime()
00017d04 l     O .text	0000000c LowLevelInit()::file
00017f9c l     O .text	00000014 LowLevelInit()::__PRETTY_FUNCTION__
000102fc l     O .text	00000004 kCrpWord
00012cd0 l     F .text	000000dc __static_initialization_and_destruction_0(int, int)
00012dac l     F .text	0000000e _GLOBAL__sub_I_UptimeRTOS
00000000 l    df *ABS*	00000000 /mnt/c/SJSU_Dev2/SJSU-Dev2/tools/gcc-arm-none-eabi-7-2017-q4-major/bin/../lib/gcc/arm-none-eabi/7.2.1/thumb/v7e-m/fpv4-sp/hard/crti.o
00000000 l    df *ABS*	00000000 /mnt/c/SJSU_Dev2/SJSU-Dev2/tools/gcc-arm-none-eabi-7-2017-q4-major/bin/../lib/gcc/arm-none-eabi/7.2.1/thumb/v7e-m/fpv4-sp/hard/crtn.o
00000000 l    df *ABS*	00000000 crtstuff.c
00010328 l     F .text	00000000 __do_global_dtors_aux
10000240 l       .bss	00000001 completed.9929
0001034c l     F .text	00000000 frame_dummy
10000244 l       .bss	00000018 object.9934
0001030c l     O .text	00000000 __frame_dummy_init_array_entry
00000000 l    df *ABS*	00000000 main.cpp
10000260 l     O .bss	00000008 (anonymous namespace)::uptime
00010858 l     F .text	00000030 (anonymous namespace)::DefaultUptime()
000175a4 l     O .text	00000009 main::file
00017688 l     O .text	0000000b main::__PRETTY_FUNCTION__
00010bdc l     F .text	000000a8 __static_initialization_and_destruction_0(int, int)
00010c84 l     F .text	00000028 _GLOBAL__sub_I_button3
00000000 l    df *ABS*	00000000 diskio.cpp
00019498 l     O .text	0000001c Gpio::ValidPortCheck()::__PRETTY_FUNCTION__
000194b4 l     O .text	00000039 Gpio::SetInterruptEdge(GpioInterface::Edge)::__PRETTY_FUNCTION__
0001945c l     O .text	0000003b Gpio::ClearInterruptEdge(GpioInterface::Edge)::__PRETTY_FUNCTION__
000194f0 l     O .text	00000031 Sd::Mount(SdInterface::CardInfo_t*)::__PRETTY_FUNCTION__
00019524 l     O .text	0000003c Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::__PRETTY_FUNCTION__
00019560 l     O .text	00000034 Sd::DeleteBlock(unsigned long, unsigned long)::__PRETTY_FUNCTION__
00019594 l     O .text	00000069 Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)::__PRETTY_FUNCTION__
10000560 l     O .bss	00000068 (anonymous namespace)::sd_card
00017010 l     F .text	00000050 __static_initialization_and_destruction_0(int, int)
00017060 l     F .text	00000028 _GLOBAL__sub_I_disk_status
00000000 l    df *ABS*	00000000 LabGPIO.cpp
00000000 l    df *ABS*	00000000 newlib.cpp
00000000 l    df *ABS*	00000000 tasks.c
100003e8 l     O .bss	00000064 pxReadyTasksLists
1000044c l     O .bss	00000004 uxTopReadyPriority
10000450 l     O .bss	00000004 xYieldPending
10000454 l     O .bss	00000004 uxSchedulerSuspended
10000458 l     O .bss	00000004 ulTaskSwitchedInTime
1000045c l     O .bss	00000004 ulTotalRunTime
00000000 l    df *ABS*	00000000 port.c
00013280 l       .text	00000000 pxCurrentTCBConst2
000132f0 l       .text	00000000 pxCurrentTCBConst
00000000 l    df *ABS*	00000000 printf.cpp
000132f8 l     F .text	00000030 _out_null(char, void*, unsigned int, unsigned int)
00013328 l     F .text	00000044 _out_char(char, void*, unsigned int, unsigned int)
0001336c l     F .text	00000044 _strlen(char const*)
000133b0 l     F .text	00000044 _is_digit(char)
000133f4 l     F .text	00000060 _atoi(char const**)
00013454 l     F .text	0000025c _ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)
000136b0 l     F .text	000000e4 _ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)
00013794 l     F .text	000000f4 _ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)
00018238 l     O .text	00000028 _ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)::pow10
00013888 l     F .text	00000438 _ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)
00013cc0 l     F .text	000008f4 _vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)
00000000 l    df *ABS*	00000000 pure.cc
00000000 l    df *ABS*	00000000 eh_terminate.cc
00000000 l    df *ABS*	00000000 sf_round.c
00000000 l    df *ABS*	00000000 _arm_truncdfsf2.o
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 abort.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 signal.c
00000000 l    df *ABS*	00000000 signalr.c
00000000 l    df *ABS*	00000000 findfp.c
00000000 l    df *ABS*	00000000 eh_term_handler.cc
00000000 l    df *ABS*	00000000 impure.c
100001dc l     O .data	00000060 impure_data
00000000 l    df *ABS*	00000000 reent.c
00010ef0  w    F .text	0000003e Lpc40xxSystemController::GetPeripheralFrequency() const
00013060 g     F .text	00000038 putchar
00012e3c  w    F .text	0000006c Pwm0IrqHandler
00018e98  w    O .text	00000009 Gpio::SetInterruptEdge(GpioInterface::Edge)::file
00010218 g     F .text	0000001c HardFaultHandler
00012fd0 g     F .text	00000024 _getpid
00013024 g     F .text	0000003c _putchar
00012e3c  w    F .text	0000006c EepromIrqHandler
00012e3c  w    F .text	0000006c Timer2IrqHandler
10000074  w    O .data	00000014 uart0
00013164 g     F .text	0000002c GetStackDepth()
00019208  w    O .text	00000007 Sd::Mount(SdInterface::CardInfo_t*)::file
00015000  w    F .text	00000024 Lpc40xxSystemController::Lpc40xxSystemController()
00017ccc  w    O .text	00000004 Timer::kTimerIrq
00019240  w    O .text	00000007 Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file
0001757c g     F .text	00000024 _kill_r
0001010c g       .text	00000000 bss_section_table_end
000145b4 g     F .text	0000004c printf
1000000c  w    O .data	00000004 SystemTimer::sys_tick
00012e3c  w    F .text	0000006c I2c1IrqHandler
00012888  w    F .text	0000003c void Timer::TimerHandler<(TimerInterface::TimerPort)2>()
10000024  w    O .data	00000010 Uart::uart
00019270  w    O .text	00000007 Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file
00010000 g       *ABS*	00000000 __vectors_start__
00010888  w    F .text	00000044 Milliseconds()
00011054  w    F .text	00000110 Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)
00015050  w    F .text	00000034 SspInterface::SspInterface()
00012e3c  w    F .text	0000006c BusFaultHandler
100002e0 g     O .bss	00000100 stack_trace
10000010  w    O .data	00000004 Pin::pin_map
00011ed4  w    F .text	000000e4 Uart::Initialize(unsigned long)
20000000 g       *ABS*	00000000 __base_RAM2
00019668 g       .ARM.exidx	00000000 __exidx_end
00014ef0  w    F .text	0000007c Gpio::ClearEdgeRising()
0001133c  w    F .text	00000030 Lpc40xxSystemController::SetEmcClockDivider(Lpc40xxSystemController::EmcDivider)
00018e8c  w    O .text	00000009 Gpio::ValidPortCheck()::file
100003e4 g     O .bss	00000004 pxCurrentTCB
00014600  w    F .text	00000034 PinInterface::PinInterface()
00013120 g     F .text	0000001c __cyg_profile_func_exit
00016ca0  w    F .text	00000048 Sd::Crc7Add(unsigned char, unsigned char)
00015bb8  w    F .text	000000a0 Sd::Sd(Sd::DebugSdCard_t, unsigned char, unsigned char, unsigned char, unsigned char)
00012af0  w    F .text	000000a0 void Timer::ClearInterrupts<(TimerInterface::TimerPort)1>()
100005c8 g     O .bss	00000004 errno
00019668 g       .ARM.exidx	00000000 _etext
10000004  w    O .data	00000004 Lpc40xxSystemController::system_controller
00010ddc  w    F .text	00000090 Lpc40xxSystemController::SetClockFrequency(unsigned char)
00011ca4  w    F .text	00000030 unsigned char util::Value<TimerInterface::MatchControlRegister, unsigned char>(TimerInterface::MatchControlRegister)
00010edc  w    F .text	00000014 Lpc40xxSystemController::GetSystemFrequency() const
00012498  w    F .text	000001f0 Uart::GenerateUartCalibration(float)
10000188  w    O .data	00000018 Gpio::gpio_port
00011cd4  w    F .text	000000f8 Timer::SetTimer(unsigned long, TimerInterface::TimerIsrCondition, TimerInterface::MatchControlRegister)
00012708  w    F .text	000000bc LowLevelInit()
00012e3c  w    F .text	0000006c LcdIrqHandler
00019298  w    O .text	00000007 Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)::file
00080000 g       *ABS*	00000000 __top_MFlash512
00015350  w    F .text	0000006c Ssp::Transfer(unsigned short)
00012138  w    F .text	000000f8 Uart::Receive(unsigned long)
00010ff4  w    F .text	00000030 Lpc40xxSystemController::SelectUsbClockSource(Lpc40xxSystemController::UsbSource)
000109e8  w    F .text	00000030 Delay(unsigned long long)
00017cf4  w    O .text	00000010 Uart::kPowerbit
00012e3c  w    F .text	0000006c I2c2IrqHandler
10000288  w    O .bss	00000004 SystemTimer::system_timer_isr
00014db8  w    F .text	00000040 Gpio::DetachInterrupt()
00012e3c  w    F .text	0000006c CanIrqHandler
000119f0  w    F .text	00000074 Pin::EnableDac(bool)
00010550 g     F .text	00000124 LabGPIO::ReadBool()
00011720  w    F .text	0000007c Pin::SetAsAnalogMode(bool)
000112d4  w    F .text	00000068 Lpc40xxSystemController::SetCpuClockDivider(unsigned char)
00016d58  w    F .text	000000fc Sd::GetCrc16(unsigned char*, unsigned short)
000171b4 g     F .text	00000000 .hidden __aeabi_uldivmod
100005cc g       .noinit	00000000 _noinit
00013098 g     F .text	00000060 puts
100000a0 g     O .data	000000e4 dynamic_isr_vector_table
00014ad8  w    F .text	0000002c Gpio::GetPin()
00014b80  w    F .text	0000005c Gpio::SetInterruptRoutine(void (*)())
0001468c  w    F .text	00000034 GpioInterface::GpioInterface()
00015050  w    F .text	00000034 SspInterface::SspInterface()
00012e3c  w    F .text	0000006c RitIrqHandler
00012e3c  w    F .text	0000006c Uart2IrqHandler
00011a64  w    F .text	00000064 Pin::BitPlace(unsigned long, unsigned long, unsigned long, unsigned long)
00017ca4  w    O .text	00000016 Lpc40xxSystemController::SetCpuClockDivider(unsigned char)::file
00019228  w    O .text	00000007 Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file
000156b4  w    F .text	00000160 Ssp::GetPeripheralMode()
00012b90  w    F .text	000000a0 void Timer::ClearInterrupts<(TimerInterface::TimerPort)2>()
000170b4 g     F .text	00000060 roundf
0001751c g     F .text	00000050 _raise_r
000108f8  w    F .text	0000002c Wait(unsigned long long)::{lambda()#1}::_FUN()
00015024  w    F .text	0000002c int util::Value<Ssp::Peripheral, int>(Ssp::Peripheral)
00015084  w    F .text	00000038 PinInterface::PinInterface(PinInterface const&)
10010000 g       *ABS*	00000000 __top_RAM
00017cf0  w    O .text	00000004 Uart::kRxUartPortFunction
00013290 g     F .text	00000066 xPortPendSVHandler
00010924  w    F .text	000000c4 Wait(unsigned long long)
00015b84  w    F .text	00000034 SdInterface::SdInterface()
00011dcc  w    F .text	0000003c Timer::GetTimer()
10000000 g       *ABS*	00000000 __base_RamLoc64
0001313c g     F .text	00000028 GetStackTrace()
10000184 g     O .data	00000004 out
10000008  w    O .data	00000004 Lpc40xxSystemController::speed_in_hertz
00019278  w    O .text	00000007 Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file
00019260  w    O .text	00000007 Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file
000175a0 g     F .text	00000004 _getpid_r
00000000 g       *ABS*	00000000 __base_MFlash512
000192f8  w    O .text	0000004c vtable for Ssp
10010000 g       *ABS*	00000000 StackTop
00016068  w    F .text	00000064 Sd::WaitToReadBlock()
00018eb0  w    O .text	00000003 Ssp::kPinSelect
000171e4 g     F .text	000002cc .hidden __udivmoddi4
00012e3c  w    F .text	0000006c I2sIrqHandler
000100fc g       .text	00000000 bss_section_table
00010300 g       .text	00000000 __CRP_WORD_END__
20008000 g       *ABS*	00000000 __top_RAM2
000127e0 g     F .text	00000030 ResetIsr
00016024  w    F .text	00000044 Sd::ToBool(bool)
00019344  w    O .text	00000028 vtable for SspInterface
00012e3c  w    F .text	0000006c PendSVHandler
00015418  w    F .text	00000030 unsigned char util::Value<SspInterface::DataSize, unsigned char>(SspInterface::DataSize)
000113dc  w    F .text	00000034 SystemTimer::SetIsrFunction(void (*)())
00016e90  w    F .text	00000044 bool bit::Read<unsigned long>(unsigned long, unsigned long)
000152d8  w    F .text	00000078 Ssp::IsTransferRegBusy()
00012e3c  w    F .text	0000006c UsageFaultHandler
20000000 g       *ABS*	00000000 __user_heap_base
1000027c g     O .bss	00000002 led1
00019660 g       .text	00000000 __exidx_start
00011908  w    F .text	00000074 Pin::EnableI2cHighCurrentDrive(bool)
00012e3c  w    F .text	0000006c Uart4IrqHandler
00014bdc  w    F .text	00000054 Gpio::ClearInterruptRoutine()
0001188c  w    F .text	0000007c Pin::EnableI2cHighSpeedMode(bool)
000101fc g     F .text	00000018 InitFpu()
0001179c  w    F .text	0000007c Pin::EnableDigitalFilter(bool)
000174c4 g     F .text	00000048 __libc_init_array
00012e3c g     F .text	0000006c InterruptLookupHandler
00011024  w    F .text	00000030 Lpc40xxSystemController::SelectSpifiClockSource(Lpc40xxSystemController::SpifiSource)
00010ec4  w    F .text	00000018 Lpc40xxSystemController::GetPeripheralClockDivider() const
10000000  w    O .data	00000004 Uptime
000193d8  w    O .text	00000048 vtable for GpioInterface
00012004  w    F .text	000000e8 Uart::Send(unsigned char)
000174b4 g     F .text	0000000e abort
00012e3c  w    F .text	0000006c BodIrqHandler
00015a00  w    F .text	00000184 Ssp::GetClock()
00010300 g     F .text	00000000 _init
0001010c g       .text	00000000 section_table_end
00012c30  w    F .text	000000a0 void Timer::ClearInterrupts<(TimerInterface::TimerPort)3>()
000170a8 g     F .text	0000000a std::terminate()
00017114 g     F .text	0000009e .hidden __aeabi_d2f
00014f6c  w    F .text	0000007c Gpio::ClearEdgeFalling()
00012e3c  w    F .text	0000006c SysTickHandler
000100e4 g       .text	00000000 section_table_start
100005cc g       .bss	00000000 _ebss
00014e74  w    F .text	0000007c Gpio::SetEdgeFalling()
00019238  w    O .text	00000007 Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file
00012e3c  w    F .text	0000006c RtcIrqHandler
00014a68  w    F .text	00000070 Gpio::Read()
00012900  w    F .text	000000a8 Status Wait<Uart::Send(unsigned char)::{lambda()#1}>(unsigned long long, Uart::Send(unsigned char)::{lambda()#1})
eff81d12 g       *ABS*	00000000 ValidUserCodeChecksum
00012e3c  w    F .text	0000006c Uart0IrqHandler
00012f04 g     F .text	00000078 GetRegistersFromStack
0001078c g     F .text	000000cc LabGPIO::setPulldown()
00016e54  w    F .text	0000003c unsigned long bit::Set<unsigned long>(unsigned long, unsigned long)
00019420  w    O .text	0000003c vtable for PinInterface
00012e3c  w    F .text	0000006c UsbIrqHandler
00012e3c  w    F .text	0000006c AdcIrqHandler
000120ec  w    F .text	0000004c Uart::Receive(unsigned long)::{lambda()#1}::operator()() const
00010dac  w    F .text	00000030 SetUptimeFunction(unsigned long long (*)())
00010368 g     F .text	00000048 LabGPIO::LabGPIO(unsigned char, unsigned char)
00019600 g     O .text	00000020 __sf_fake_stderr
00018f08  w    O .text	00000100 Sd::kCrcTable8
00017098 g     F .text	00000010 std::get_terminate()
000123a0  w    F .text	00000074 Uart::FractionalEstimate(float, float)
00014c60  w    F .text	00000088 Gpio::SetInterruptEdge(GpioInterface::Edge)
00012e3c  w    F .text	0000006c EnetIrqHandler
00012e3c  w    F .text	0000006c DmaIrqHandler
0001010c g     F .text	00000090 InitDataSection()
00012ea8 g     F .text	0000005c RegisterIsr(IRQn, void (*)(), bool, long)
00000000 g       *ABS*	00000000 __base_Flash
00012e3c  w    F .text	0000006c Eint1IrqHandler
100001c8  w    O .data	0000000c Ssp::ssp_registers
00012e3c  w    F .text	0000006c SvcHandler
00012e3c  w    F .text	0000006c GpioIrqHandler
00019288  w    O .text	00000007 Sd::DeleteBlock(unsigned long, unsigned long)::file
00012e3c  w    F .text	0000006c SdioIrqHandler
10010000 g       *ABS*	00000000 __top_RamLoc64
10000240 g       .bss	00000000 _bss
00019220  w    O .text	00000007 Sd::Mount(SdInterface::CardInfo_t*)::file
00012e3c  w    F .text	0000006c Pll1IrqHandler
00012e3c  w    F .text	0000006c MemManageHandler
00017088 g     F .text	00000006 __cxa_pure_virtual
00012e3c  w    F .text	0000006c Pwm1IrqHandler
00014c30  w    F .text	00000030 unsigned char util::Value<GpioInterface::Edge, unsigned char>(GpioInterface::Edge)
00012e3c  w    F .text	0000006c Timer0IrqHandler
000129a8  w    F .text	000000a8 Status Wait<Uart::Receive(unsigned long)::{lambda()#1}>(unsigned long long, Uart::Receive(unsigned long)::{lambda()#1})
00080000 g       *ABS*	00000000 __top_Flash
00012414  w    F .text	00000084 Uart::IsDecmial(float)
00015814  w    F .text	000001ec Ssp::SetClock(bool, bool, unsigned char, unsigned char)
100005cc g       .noinit	00000000 _end_noinit
0001136c  w    F .text	0000003c SystemTimer::DisableTimer()
000166e0  w    F .text	00000120 Sd::DeleteBlock(unsigned long, unsigned long)
00013190 g     F .text	000000c8 vTaskSwitchContext
00016f48  w    F .text	00000054 unsigned long bit::Extract<unsigned long>(unsigned long, unsigned long, unsigned long)
00014634  w    F .text	00000058 Pin::Pin(unsigned char, unsigned char)
00015478  w    F .text	00000030 unsigned char util::Value<SspInterface::MasterSlaveMode, unsigned char>(SspInterface::MasterSlaveMode)
00019248  w    O .text	00000007 Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file
00017cec  w    O .text	00000004 Uart::kTxUartPortFunction
00012e3c  w    F .text	0000006c Uart3IrqHandler
00014fe8  w    F .text	00000018 SystemControllerInterface::SystemControllerInterface()
00019280  w    O .text	00000007 Sd::DeleteBlock(unsigned long, unsigned long)::file
20000000 g       *ABS*	00000000 __base_RamPeriph32
00018ea4  w    O .text	00000009 Gpio::ClearInterruptEdge(GpioInterface::Edge)::file
100003e0 g     O .bss	00000004 stack_depth
00014984  w    F .text	0000006c Gpio::Toggle()
00019258  w    O .text	00000007 Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file
00019008  w    O .text	00000200 Sd::kCrcTable16
10000460  w    O .bss	00000100 Gpio::interrupthandlers
000174b0  w    F .text	00000002 .hidden __aeabi_ldiv0
00012e3c  w    F .text	0000006c Timer1IrqHandler
0001232c  w    F .text	00000074 Uart::DividerEstimate(float, float)
00014878  w    F .text	00000064 Gpio::SetHigh()
10000270 g     O .bss	00000002 button2
00012230  w    F .text	000000fc Uart::FindClosestFractional(float)
00015110  w    F .text	000000e4 Ssp::Ssp(Ssp::Peripheral)
000100e4 g       .text	00000000 data_section_table
000115b8  w    F .text	00000080 Pin::SetMode(PinInterface::Mode)
00017c5c  w    O .text	00000016 Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)::file
000160cc  w    F .text	00000050 Sd::WaitWhileBusy()
000114ac  w    F .text	00000094 SystemTimer::SetTickFrequency(unsigned long)
00019620 g     O .text	00000020 __sf_fake_stdin
00016f9c  w    F .text	00000074 unsigned long bit::Insert<unsigned long, bool>(unsigned long, bool, unsigned long, unsigned long)
000102fc g       .text	00000000 __CRP_WORD_START__
00017cd0  w    O .text	00000010 Timer::kTimerIsr
00014d70  w    F .text	00000048 Gpio::AttachInterrupt(void (*)(), GpioInterface::Edge)
00012e3c  w    F .text	0000006c Uart1IrqHandler
0001473c  w    F .text	0000007c Gpio::SetAsInput()
000130f8 g     F .text	00000028 __cyg_profile_func_enter
0001750c g     F .text	00000010 memset
00010a18 g     F .text	00000118 main
00015bb8  w    F .text	000000a0 Sd::Sd(Sd::DebugSdCard_t, unsigned char, unsigned char, unsigned char, unsigned char)
1000026c g     O .bss	00000002 led3
100001a0  w    O .data	00000028 Gpio::interrupt
10000284 g     O .bss	00000002 led0
00011b50  w    F .text	00000020 Timer::DoNothingIsr()
00012e3c  w    F .text	0000006c QeiIrqHandler
20000000 g       *ABS*	00000000 heap
00012e3c  w    F .text	0000006c Ssp2IrqHandler
00011ac8  w    F .text	0000002c Pin::GetPort() const
00016534  w    F .text	000001ac Sd::WriteBlock(unsigned long, unsigned char const*, unsigned long)
00014634  w    F .text	00000058 Pin::Pin(unsigned char, unsigned char)
00017114 g     F .text	0000009e .hidden __truncdfsf2
0001031c g       .text	00000000 __init_array_end
00013260 g     F .text	00000026 vPortSVCHandler
00012f7c g     F .text	0000003c FirmwareStdOut(int)
000192a0  w    O .text	0000002c vtable for Sd
00014ce8  w    F .text	00000088 Gpio::ClearInterruptEdge(GpioInterface::Edge)
00012e3c  w    F .text	0000006c Ssp1IrqHandler
00012810  w    F .text	0000003c void Timer::TimerHandler<(TimerInterface::TimerPort)0>()
00018efc  w    O .text	0000000c Ssp::kPowerBit
10000268 g     O .bss	00000002 button3
00011af4  w    F .text	0000002c Pin::GetPin() const
00011e08  w    F .text	000000cc Uart::SetBaudRate(unsigned long)
00014834  w    F .text	00000044 Gpio::SetDirection(GpioInterface::Direction)
00017d10  w    O .text	0000003c vtable for Uart
000147b8  w    F .text	0000007c Gpio::SetAsOutput()
00019268  w    O .text	00000007 Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file
00011164  w    F .text	00000170 Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)
000148dc  w    F .text	00000064 Gpio::SetLow()
00017df8  w    O .text	00000024 vtable for Lpc40xxSystemController
0001611c  w    F .text	00000418 Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)
00019290  w    O .text	00000007 Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)::file
00017c44  w    O .text	00000016 Lpc40xxSystemController::SetPeripheralClockDivider(unsigned char)::file
000127c4 g     F .text	0000001a SystemInit
00011b70  w    F .text	00000134 Timer::Initialize(unsigned long, void (*)(), long)
00010f30  w    F .text	00000030 Lpc40xxSystemController::PowerUpPeripheral(SystemControllerInterface::PeripheralID const&)
20008000 g       *ABS*	00000000 heap_end
000151f4  w    F .text	000000e4 Ssp::Initialize()
00017d4c  w    O .text	00000038 vtable for Timer
00015084  w    F .text	00000038 PinInterface::PinInterface(PinInterface const&)
10000014  w    O .data	00000010 Timer::tim_register
00012e3c  w    F .text	0000006c Ssp0IrqHandler
00010368 g     F .text	00000048 LabGPIO::LabGPIO(unsigned char, unsigned char)
0001031c g     F .text	00000000 _fini
00012e3c  w    F .text	0000006c UsbactivityIrqHandler
00014940  w    F .text	00000044 Gpio::Set(GpioInterface::State)
00012e3c  w    F .text	0000006c Pll0IrqHandler
000150bc  w    F .text	00000054 Pin::Pin(Pin const&)
000100fc g       .text	00000000 data_section_table_end
00012e3c  w    F .text	0000006c CanactivityIrqHandler
00012e3c  w    F .text	0000006c NmiHandler
00018eb4  w    O .text	00000048 Ssp::kSspPinMatrix
000149f0  w    F .text	00000078 Gpio::ReadState()
00019230  w    O .text	00000007 Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file
100001d8 g     O .data	00000004 _impure_ptr
00010b30  w    F .text	000000ac Status Wait<Wait(unsigned long long)::{lambda()#1}>(unsigned long long, Wait(unsigned long long)::{lambda()#1})
10000000 g       .uninit_RESERVED	00000000 _end_uninit_RESERVED
00016ce8  w    F .text	00000070 Sd::GetCrc7(unsigned char*, unsigned char)
00012e3c  w    F .text	0000006c McpwmIrqHandler
0001030c g       .text	00000000 __preinit_array_end
00012e3c  w    F .text	0000006c WdtIrqHandler
000108cc  w    F .text	0000002c Wait(unsigned long long)::{lambda()#1}::operator()() const
00016800  w    F .text	000004a0 Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)
00015000  w    F .text	00000024 Lpc40xxSystemController::Lpc40xxSystemController()
00017d84  w    O .text	0000003c vtable for Pin
10000000 g       .data	00000000 _data
000116ac  w    F .text	00000074 Pin::SetAsActiveLow(bool)
00010fc4  w    F .text	00000030 Lpc40xxSystemController::SelectMainClockSource(Lpc40xxSystemController::MainClockSource)
00014df8  w    F .text	0000007c Gpio::SetEdgeRising()
00019210  w    O .text	00000007 Sd::Mount(SdInterface::CardInfo_t*)::file
00011b20  w    F .text	00000030 unsigned char util::Value<TimerInterface::TimerPort, unsigned char>(TimerInterface::TimerPort)
100002cc  w    O .bss	00000010 Timer::user_timer_isr
00017c74  w    O .text	00000016 Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)::file
1000028c  w    O .bss	00000040 Timer::match
00010480 g     F .text	000000d0 LabGPIO::SetLow()
00011fb8  w    F .text	0000004c Uart::Send(unsigned char)::{lambda()#1}::operator()() const
00015d08  w    F .text	0000031c Sd::Mount(SdInterface::CardInfo_t*)
100001d4 g     O .data	00000004 __cxxabiv1::__terminate_handler
10000278 g     O .bss	00000002 button1
0001936c  w    O .text	00000024 vtable for SystemControllerInterface
00019390  w    O .text	00000048 vtable for Gpio
1000023c g       .data	00000000 _edata
00017cbc  w    O .text	00000010 Timer::kPowerbit
0001284c  w    F .text	0000003c void Timer::TimerHandler<(TimerInterface::TimerPort)1>()
00011638  w    F .text	00000074 Pin::EnableHysteresis(bool)
0001468c  w    F .text	00000034 GpioInterface::GpioInterface()
00010674 g     F .text	00000118 LabGPIO::toggle()
00012e3c  w    F .text	0000006c DebugMonHandler
00014b04  w    F .text	0000007c Gpio::ValidPortCheck()
00012e3c  w    F .text	0000006c Eint2IrqHandler
20008000 g       *ABS*	00000000 __top_RamPeriph32
00015110  w    F .text	000000e4 Ssp::Ssp(Ssp::Peripheral)
00012e3c  w    F .text	0000006c Timer3IrqHandler
000103b0 g     F .text	000000d0 LabGPIO::SetHigh()
10000000 g       *ABS*	00000000 __base_RAM
00012e3c  w    F .text	0000006c Eint3IrqHandler
0001708e g     F .text	00000008 __cxxabiv1::__terminate(void (*)())
00012ff4 g     F .text	00000030 _kill
00012e3c  w    F .text	0000006c I2c0IrqHandler
000150bc  w    F .text	00000054 Pin::Pin(Pin const&)
00017ce0  w    O .text	0000000a Timer::Initialize(unsigned long, void (*)(), long)::file
000113a8  w    F .text	00000034 SystemTimer::SystemTimerHandler()
00019218  w    O .text	00000007 Sd::Mount(SdInterface::CardInfo_t*)::file
00019640 g     O .text	00000020 __sf_fake_stdout
00010cac  w    F .text	00000100 debug::PrintBacktrace(bool, void*)
0001030c g       .text	00000000 __init_array_start
000174b0  w    F .text	00000002 .hidden __aeabi_idiv0
000192cc  w    O .text	0000002c vtable for SdInterface
00015c58  w    F .text	000000b0 Sd::Initialize()
00012fb8 g     F .text	00000018 _exit
00011818  w    F .text	00000074 Pin::EnableFastMode(bool)
00012a50  w    F .text	000000a0 void Timer::ClearInterrupts<(TimerInterface::TimerPort)0>()
00012e3c  w    F .text	0000006c Eint0IrqHandler
00011410  w    F .text	0000009c SystemTimer::StartTimer()
00015448  w    F .text	00000030 unsigned char util::Value<SspInterface::FrameMode, unsigned char>(SspInterface::FrameMode)
0001019c g     F .text	00000060 InitBssSection()
000146c0  w    F .text	0000007c Gpio::Gpio(unsigned char, unsigned char)
000126c8 g     F .text	00000040 UptimeRTOS
0001197c  w    F .text	00000074 Pin::SetAsOpenDrain(bool)
00017dc0  w    O .text	00000038 vtable for SystemTimer
00012e3c  w    F .text	0000006c SpiIrqHandler
00019250  w    O .text	00000007 Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file
000153bc  w    F .text	0000005c Ssp::SetSpiMasterDefault()
10000034  w    O .data	00000040 Uart::pairs
00014fe8  w    F .text	00000018 SystemControllerInterface::SystemControllerInterface()
00010f60  w    F .text	00000030 Lpc40xxSystemController::PowerDownPeripheral(SystemControllerInterface::PeripheralID const&)
00015b84  w    F .text	00000034 SdInterface::SdInterface()
0001030c g       .text	00000000 __preinit_array_start
00017c8c  w    O .text	00000016 Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)::file
00010f90  w    F .text	00000034 Lpc40xxSystemController::SelectOscillatorSource(Lpc40xxSystemController::OscillatorSource)
100002dc  w    O .bss	00000004 guard variable for Timer::match
000154a8  w    F .text	0000020c Ssp::SetPeripheralMode(SspInterface::MasterSlaveMode, SspInterface::FrameMode, SspInterface::DataSize)
00011540  w    F .text	00000078 Pin::SetPinFunction(unsigned char)
10000274 g     O .bss	00000002 led2
00016ed4  w    F .text	00000074 unsigned long bit::Insert<unsigned long, unsigned char>(unsigned long, unsigned char, unsigned long, unsigned long)
00014600  w    F .text	00000034 PinInterface::PinInterface()
10000280 g     O .bss	00000002 button0
00010e6c  w    F .text	00000058 Lpc40xxSystemController::SetPeripheralClockDivider(unsigned char)
000146c0  w    F .text	0000007c Gpio::Gpio(unsigned char, unsigned char)
000128c4  w    F .text	0000003c void Timer::TimerHandler<(TimerInterface::TimerPort)3>()
0001756c g     F .text	00000010 raise



Disassembly of section .text:

00010000 <kInterruptVectorTable>:
   10000:	00 00 01 10 e1 27 01 00 3d 2e 01 00 19 02 01 00     .....'..=.......
   10010:	3d 2e 01 00 3d 2e 01 00 3d 2e 01 00 12 1d f8 ef     =...=...=.......
	...
   1002c:	61 32 01 00 3d 2e 01 00 00 00 00 00 91 32 01 00     a2..=........2..
   1003c:	3d 2e 01 00 3d 2e 01 00 3d 2e 01 00 3d 2e 01 00     =...=...=...=...
   1004c:	3d 2e 01 00 3d 2e 01 00 3d 2e 01 00 3d 2e 01 00     =...=...=...=...
   1005c:	3d 2e 01 00 3d 2e 01 00 3d 2e 01 00 3d 2e 01 00     =...=...=...=...
   1006c:	3d 2e 01 00 3d 2e 01 00 00 00 00 00 3d 2e 01 00     =...=.......=...
   1007c:	3d 2e 01 00 3d 2e 01 00 3d 2e 01 00 3d 2e 01 00     =...=...=...=...
   1008c:	3d 2e 01 00 3d 2e 01 00 3d 2e 01 00 3d 2e 01 00     =...=...=...=...
   1009c:	3d 2e 01 00 3d 2e 01 00 3d 2e 01 00 3d 2e 01 00     =...=...=...=...
   100ac:	3d 2e 01 00 3d 2e 01 00 3d 2e 01 00 3d 2e 01 00     =...=...=...=...
   100bc:	3d 2e 01 00 3d 2e 01 00 3d 2e 01 00 3d 2e 01 00     =...=...=...=...
   100cc:	3d 2e 01 00 3d 2e 01 00 3d 2e 01 00 3d 2e 01 00     =...=...=...=...
   100dc:	3d 2e 01 00 3d 2e 01 00                             =...=...

000100e4 <data_section_table>:
   100e4:	00019668 	.word	0x00019668
   100e8:	10000000 	.word	0x10000000
   100ec:	0000023c 	.word	0x0000023c
   100f0:	00019668 	.word	0x00019668
   100f4:	20000000 	.word	0x20000000
   100f8:	00000000 	.word	0x00000000

000100fc <bss_section_table>:
   100fc:	10000240 	.word	0x10000240
   10100:	0000038c 	.word	0x0000038c
   10104:	20000000 	.word	0x20000000
   10108:	00000000 	.word	0x00000000

0001010c <InitDataSection()>:
SJ2_IGNORE_STACK_TRACE(void SystemInit());

// Functions to carry out the initialization of RW and BSS data sections.
SJ2_SECTION(".after_vectors")
void InitDataSection()
{
   1010c:	b086      	sub	sp, #24
  for (int i = 0; &data_section_table[i] < &data_section_table_end; i++)
   1010e:	2300      	movs	r3, #0
   10110:	9305      	str	r3, [sp, #20]
   10112:	9a05      	ldr	r2, [sp, #20]
   10114:	4613      	mov	r3, r2
   10116:	005b      	lsls	r3, r3, #1
   10118:	4413      	add	r3, r2
   1011a:	009b      	lsls	r3, r3, #2
   1011c:	4a1d      	ldr	r2, [pc, #116]	; (10194 <InitDataSection()+0x88>)
   1011e:	4413      	add	r3, r2
   10120:	4a1d      	ldr	r2, [pc, #116]	; (10198 <InitDataSection()+0x8c>)
   10122:	4293      	cmp	r3, r2
   10124:	d233      	bcs.n	1018e <InitDataSection()+0x82>
  {
    uint32_t * rom_location = data_section_table[i].rom_location;
   10126:	491b      	ldr	r1, [pc, #108]	; (10194 <InitDataSection()+0x88>)
   10128:	9a05      	ldr	r2, [sp, #20]
   1012a:	4613      	mov	r3, r2
   1012c:	005b      	lsls	r3, r3, #1
   1012e:	4413      	add	r3, r2
   10130:	009b      	lsls	r3, r3, #2
   10132:	440b      	add	r3, r1
   10134:	681b      	ldr	r3, [r3, #0]
   10136:	9303      	str	r3, [sp, #12]
    uint32_t * ram_location = data_section_table[i].ram_location;
   10138:	4916      	ldr	r1, [pc, #88]	; (10194 <InitDataSection()+0x88>)
   1013a:	9a05      	ldr	r2, [sp, #20]
   1013c:	4613      	mov	r3, r2
   1013e:	005b      	lsls	r3, r3, #1
   10140:	4413      	add	r3, r2
   10142:	009b      	lsls	r3, r3, #2
   10144:	440b      	add	r3, r1
   10146:	685b      	ldr	r3, [r3, #4]
   10148:	9302      	str	r3, [sp, #8]
    uint32_t length         = data_section_table[i].length;
   1014a:	4912      	ldr	r1, [pc, #72]	; (10194 <InitDataSection()+0x88>)
   1014c:	9a05      	ldr	r2, [sp, #20]
   1014e:	4613      	mov	r3, r2
   10150:	005b      	lsls	r3, r3, #1
   10152:	4413      	add	r3, r2
   10154:	009b      	lsls	r3, r3, #2
   10156:	440b      	add	r3, r1
   10158:	3308      	adds	r3, #8
   1015a:	681b      	ldr	r3, [r3, #0]
   1015c:	9301      	str	r3, [sp, #4]
    for (size_t j = 0; j < length; j++)
   1015e:	2300      	movs	r3, #0
   10160:	9304      	str	r3, [sp, #16]
   10162:	9a04      	ldr	r2, [sp, #16]
   10164:	9b01      	ldr	r3, [sp, #4]
   10166:	429a      	cmp	r2, r3
   10168:	d20d      	bcs.n	10186 <InitDataSection()+0x7a>
    {
      ram_location[j] = rom_location[j];
   1016a:	9b04      	ldr	r3, [sp, #16]
   1016c:	009b      	lsls	r3, r3, #2
   1016e:	9a03      	ldr	r2, [sp, #12]
   10170:	441a      	add	r2, r3
   10172:	9b04      	ldr	r3, [sp, #16]
   10174:	009b      	lsls	r3, r3, #2
   10176:	9902      	ldr	r1, [sp, #8]
   10178:	440b      	add	r3, r1
   1017a:	6812      	ldr	r2, [r2, #0]
   1017c:	601a      	str	r2, [r3, #0]
    for (size_t j = 0; j < length; j++)
   1017e:	9b04      	ldr	r3, [sp, #16]
   10180:	3301      	adds	r3, #1
   10182:	9304      	str	r3, [sp, #16]
   10184:	e7ed      	b.n	10162 <InitDataSection()+0x56>
  for (int i = 0; &data_section_table[i] < &data_section_table_end; i++)
   10186:	9b05      	ldr	r3, [sp, #20]
   10188:	3301      	adds	r3, #1
   1018a:	9305      	str	r3, [sp, #20]
   1018c:	e7c1      	b.n	10112 <InitDataSection()+0x6>
    }
  }
}
   1018e:	bf00      	nop
   10190:	b006      	add	sp, #24
   10192:	4770      	bx	lr
   10194:	000100e4 	.word	0x000100e4
   10198:	000100fc 	.word	0x000100fc

0001019c <InitBssSection()>:

// Functions to initialization BSS data sections. This is important because
// the std c libs assume that BSS is set to zero.
SJ2_SECTION(".after_vectors")
void InitBssSection()
{
   1019c:	b084      	sub	sp, #16
  for (int i = 0; &bss_section_table[i] < &bss_section_table_end; i++)
   1019e:	2300      	movs	r3, #0
   101a0:	9303      	str	r3, [sp, #12]
   101a2:	9b03      	ldr	r3, [sp, #12]
   101a4:	00db      	lsls	r3, r3, #3
   101a6:	4a13      	ldr	r2, [pc, #76]	; (101f4 <InitBssSection()+0x58>)
   101a8:	4413      	add	r3, r2
   101aa:	4a13      	ldr	r2, [pc, #76]	; (101f8 <InitBssSection()+0x5c>)
   101ac:	4293      	cmp	r3, r2
   101ae:	d21e      	bcs.n	101ee <InitBssSection()+0x52>
  {
    uint32_t * ram_location = bss_section_table[i].ram_location;
   101b0:	4a10      	ldr	r2, [pc, #64]	; (101f4 <InitBssSection()+0x58>)
   101b2:	9b03      	ldr	r3, [sp, #12]
   101b4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
   101b8:	9301      	str	r3, [sp, #4]
    uint32_t length         = bss_section_table[i].length;
   101ba:	4a0e      	ldr	r2, [pc, #56]	; (101f4 <InitBssSection()+0x58>)
   101bc:	9b03      	ldr	r3, [sp, #12]
   101be:	00db      	lsls	r3, r3, #3
   101c0:	4413      	add	r3, r2
   101c2:	685b      	ldr	r3, [r3, #4]
   101c4:	9300      	str	r3, [sp, #0]
    for (size_t j = 0; j < length; j++)
   101c6:	2300      	movs	r3, #0
   101c8:	9302      	str	r3, [sp, #8]
   101ca:	9a02      	ldr	r2, [sp, #8]
   101cc:	9b00      	ldr	r3, [sp, #0]
   101ce:	429a      	cmp	r2, r3
   101d0:	d209      	bcs.n	101e6 <InitBssSection()+0x4a>
    {
      ram_location[j] = 0;
   101d2:	9b02      	ldr	r3, [sp, #8]
   101d4:	009b      	lsls	r3, r3, #2
   101d6:	9a01      	ldr	r2, [sp, #4]
   101d8:	4413      	add	r3, r2
   101da:	2200      	movs	r2, #0
   101dc:	601a      	str	r2, [r3, #0]
    for (size_t j = 0; j < length; j++)
   101de:	9b02      	ldr	r3, [sp, #8]
   101e0:	3301      	adds	r3, #1
   101e2:	9302      	str	r3, [sp, #8]
   101e4:	e7f1      	b.n	101ca <InitBssSection()+0x2e>
  for (int i = 0; &bss_section_table[i] < &bss_section_table_end; i++)
   101e6:	9b03      	ldr	r3, [sp, #12]
   101e8:	3301      	adds	r3, #1
   101ea:	9303      	str	r3, [sp, #12]
   101ec:	e7d9      	b.n	101a2 <InitBssSection()+0x6>
    }
  }
}
   101ee:	bf00      	nop
   101f0:	b004      	add	sp, #16
   101f2:	4770      	bx	lr
   101f4:	000100fc 	.word	0x000100fc
   101f8:	0001010c 	.word	0x0001010c

000101fc <InitFpu()>:
      // Write back the modified value to the CPACR
      "STR     R1, [R0]\n"
      // Wait for store to complete
      "DSB\n"
      // reset pipeline now the FPU is enabled
      "ISB\n");
   101fc:	f8df 0014 	ldr.w	r0, [pc, #20]	; 10214 <InitFpu()+0x18>
   10200:	6801      	ldr	r1, [r0, #0]
   10202:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   10206:	6001      	str	r1, [r0, #0]
   10208:	f3bf 8f4f 	dsb	sy
   1020c:	f3bf 8f6f 	isb	sy
}
   10210:	bf00      	nop
   10212:	4770      	bx	lr
   10214:	e000ed88 	.word	0xe000ed88

00010218 <HardFaultHandler>:
      " mrseq r0, msp                                       \n"
      " mrsne r0, psp                                       \n"
      " ldr r1, [r0, #24]                                   \n"
      " ldr r2, handler2_address_const                      \n"
      " bx r2                                               \n"
      " handler2_address_const: .word GetRegistersFromStack \n");
   10218:	f01e 0f04 	tst.w	lr, #4
   1021c:	bf0c      	ite	eq
   1021e:	f3ef 8008 	mrseq	r0, MSP
   10222:	f3ef 8009 	mrsne	r0, PSP
   10226:	6981      	ldr	r1, [r0, #24]
   10228:	4a00      	ldr	r2, [pc, #0]	; (1022c <handler2_address_const>)
   1022a:	4710      	bx	r2

0001022c <handler2_address_const>:
   1022c:	00012f05 	.word	0x00012f05
#endif
}
   10230:	bf00      	nop
   10232:	4770      	bx	lr
   10234:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   10238:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   1023c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   10240:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   10244:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   10248:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   1024c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   10250:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   10254:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   10258:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   1025c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   10260:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   10264:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   10268:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   1026c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   10270:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   10274:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   10278:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   1027c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   10280:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   10284:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   10288:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   1028c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   10290:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   10294:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   10298:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   1029c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102a0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102a4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102a8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102ac:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102b0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102b4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102b8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102bc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102c0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102c4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102c8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102cc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102d0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102d4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102d8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102dc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102e0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102e4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102e8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102ec:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102f0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102f4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102f8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

000102fc <__CRP_WORD_START__>:
   102fc:	ffffffff 	.word	0xffffffff

00010300 <_init>:
   10300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10302:	bf00      	nop
   10304:	bcf8      	pop	{r3, r4, r5, r6, r7}
   10306:	bc08      	pop	{r3}
   10308:	469e      	mov	lr, r3
   1030a:	4770      	bx	lr

0001030c <__init_array_start>:
   1030c:	0001034d 	.word	0x0001034d
   10310:	00010c85 	.word	0x00010c85
   10314:	00012dad 	.word	0x00012dad
   10318:	00017061 	.word	0x00017061

0001031c <_fini>:
   1031c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1031e:	bf00      	nop
   10320:	bcf8      	pop	{r3, r4, r5, r6, r7}
   10322:	bc08      	pop	{r3}
   10324:	469e      	mov	lr, r3
   10326:	4770      	bx	lr

00010328 <__do_global_dtors_aux>:
   10328:	b510      	push	{r4, lr}
   1032a:	4c05      	ldr	r4, [pc, #20]	; (10340 <__do_global_dtors_aux+0x18>)
   1032c:	7823      	ldrb	r3, [r4, #0]
   1032e:	b933      	cbnz	r3, 1033e <__do_global_dtors_aux+0x16>
   10330:	4b04      	ldr	r3, [pc, #16]	; (10344 <__do_global_dtors_aux+0x1c>)
   10332:	b113      	cbz	r3, 1033a <__do_global_dtors_aux+0x12>
   10334:	4804      	ldr	r0, [pc, #16]	; (10348 <__do_global_dtors_aux+0x20>)
   10336:	f3af 8000 	nop.w
   1033a:	2301      	movs	r3, #1
   1033c:	7023      	strb	r3, [r4, #0]
   1033e:	bd10      	pop	{r4, pc}
   10340:	10000240 	.word	0x10000240
   10344:	00000000 	.word	0x00000000
   10348:	00019668 	.word	0x00019668

0001034c <frame_dummy>:
   1034c:	b508      	push	{r3, lr}
   1034e:	4b03      	ldr	r3, [pc, #12]	; (1035c <frame_dummy+0x10>)
   10350:	b11b      	cbz	r3, 1035a <frame_dummy+0xe>
   10352:	4903      	ldr	r1, [pc, #12]	; (10360 <frame_dummy+0x14>)
   10354:	4803      	ldr	r0, [pc, #12]	; (10364 <frame_dummy+0x18>)
   10356:	f3af 8000 	nop.w
   1035a:	bd08      	pop	{r3, pc}
   1035c:	00000000 	.word	0x00000000
   10360:	10000244 	.word	0x10000244
   10364:	00019668 	.word	0x00019668

00010368 <LabGPIO::LabGPIO(unsigned char, unsigned char)>:
#include "LabGPIO.hpp"
 
  LabGPIO::LabGPIO(uint8_t port, uint8_t pin){
   10368:	b530      	push	{r4, r5, lr}
   1036a:	b083      	sub	sp, #12
   1036c:	4675      	mov	r5, lr
   1036e:	9001      	str	r0, [sp, #4]
   10370:	460b      	mov	r3, r1
   10372:	f88d 3003 	strb.w	r3, [sp, #3]
   10376:	4613      	mov	r3, r2
   10378:	f88d 3002 	strb.w	r3, [sp, #2]
   1037c:	462b      	mov	r3, r5
   1037e:	4619      	mov	r1, r3
   10380:	480a      	ldr	r0, [pc, #40]	; (103ac <LabGPIO::LabGPIO(unsigned char, unsigned char)+0x44>)
   10382:	f002 feb9 	bl	130f8 <__cyg_profile_func_enter>
    SelPort = port;
   10386:	9b01      	ldr	r3, [sp, #4]
   10388:	f89d 2003 	ldrb.w	r2, [sp, #3]
   1038c:	701a      	strb	r2, [r3, #0]
    SelPin = pin;
   1038e:	9b01      	ldr	r3, [sp, #4]
   10390:	f89d 2002 	ldrb.w	r2, [sp, #2]
   10394:	705a      	strb	r2, [r3, #1]
 
  }
   10396:	9c01      	ldr	r4, [sp, #4]
   10398:	462b      	mov	r3, r5
   1039a:	4619      	mov	r1, r3
   1039c:	4803      	ldr	r0, [pc, #12]	; (103ac <LabGPIO::LabGPIO(unsigned char, unsigned char)+0x44>)
   1039e:	f002 febf 	bl	13120 <__cyg_profile_func_exit>
   103a2:	4623      	mov	r3, r4
   103a4:	4618      	mov	r0, r3
   103a6:	b003      	add	sp, #12
   103a8:	bd30      	pop	{r4, r5, pc}
   103aa:	bf00      	nop
   103ac:	00010369 	.word	0x00010369

000103b0 <LabGPIO::SetHigh()>:
    break;
  }
 
  }

  void LabGPIO::SetHigh(){
   103b0:	b510      	push	{r4, lr}
   103b2:	b082      	sub	sp, #8
   103b4:	4674      	mov	r4, lr
   103b6:	9001      	str	r0, [sp, #4]
   103b8:	4623      	mov	r3, r4
   103ba:	4619      	mov	r1, r3
   103bc:	4829      	ldr	r0, [pc, #164]	; (10464 <LabGPIO::SetHigh()+0xb4>)
   103be:	f002 fe9b 	bl	130f8 <__cyg_profile_func_enter>
       /// Set voltage of pin to HIGH
     switch(SelPort){
   103c2:	9b01      	ldr	r3, [sp, #4]
   103c4:	781b      	ldrb	r3, [r3, #0]
   103c6:	2b05      	cmp	r3, #5
   103c8:	d844      	bhi.n	10454 <LabGPIO::SetHigh()+0xa4>
   103ca:	a201      	add	r2, pc, #4	; (adr r2, 103d0 <LabGPIO::SetHigh()+0x20>)
   103cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   103d0:	000103e9 	.word	0x000103e9
   103d4:	000103fb 	.word	0x000103fb
   103d8:	0001040d 	.word	0x0001040d
   103dc:	0001041f 	.word	0x0001041f
   103e0:	00010431 	.word	0x00010431
   103e4:	00010443 	.word	0x00010443
    case 0:
       LPC_GPIO0-> SET = (1<<SelPin);
   103e8:	9b01      	ldr	r3, [sp, #4]
   103ea:	785b      	ldrb	r3, [r3, #1]
   103ec:	461a      	mov	r2, r3
   103ee:	2301      	movs	r3, #1
   103f0:	fa03 f202 	lsl.w	r2, r3, r2
   103f4:	4b1c      	ldr	r3, [pc, #112]	; (10468 <LabGPIO::SetHigh()+0xb8>)
   103f6:	619a      	str	r2, [r3, #24]
       break;
   103f8:	e02c      	b.n	10454 <LabGPIO::SetHigh()+0xa4>
    case 1:
       LPC_GPIO1-> SET = (1<<SelPin);
   103fa:	9b01      	ldr	r3, [sp, #4]
   103fc:	785b      	ldrb	r3, [r3, #1]
   103fe:	461a      	mov	r2, r3
   10400:	2301      	movs	r3, #1
   10402:	fa03 f202 	lsl.w	r2, r3, r2
   10406:	4b19      	ldr	r3, [pc, #100]	; (1046c <LabGPIO::SetHigh()+0xbc>)
   10408:	619a      	str	r2, [r3, #24]
       break;
   1040a:	e023      	b.n	10454 <LabGPIO::SetHigh()+0xa4>
    case 2:
       LPC_GPIO2-> SET = (1<<SelPin);
   1040c:	9b01      	ldr	r3, [sp, #4]
   1040e:	785b      	ldrb	r3, [r3, #1]
   10410:	461a      	mov	r2, r3
   10412:	2301      	movs	r3, #1
   10414:	fa03 f202 	lsl.w	r2, r3, r2
   10418:	4b15      	ldr	r3, [pc, #84]	; (10470 <LabGPIO::SetHigh()+0xc0>)
   1041a:	619a      	str	r2, [r3, #24]
       break;
   1041c:	e01a      	b.n	10454 <LabGPIO::SetHigh()+0xa4>
    case 3:
       LPC_GPIO3-> SET = (1<<SelPin);
   1041e:	9b01      	ldr	r3, [sp, #4]
   10420:	785b      	ldrb	r3, [r3, #1]
   10422:	461a      	mov	r2, r3
   10424:	2301      	movs	r3, #1
   10426:	fa03 f202 	lsl.w	r2, r3, r2
   1042a:	4b12      	ldr	r3, [pc, #72]	; (10474 <LabGPIO::SetHigh()+0xc4>)
   1042c:	619a      	str	r2, [r3, #24]
       break;   
   1042e:	e011      	b.n	10454 <LabGPIO::SetHigh()+0xa4>
    case 4:
       LPC_GPIO4-> SET = (1<<SelPin);
   10430:	9b01      	ldr	r3, [sp, #4]
   10432:	785b      	ldrb	r3, [r3, #1]
   10434:	461a      	mov	r2, r3
   10436:	2301      	movs	r3, #1
   10438:	fa03 f202 	lsl.w	r2, r3, r2
   1043c:	4b0e      	ldr	r3, [pc, #56]	; (10478 <LabGPIO::SetHigh()+0xc8>)
   1043e:	619a      	str	r2, [r3, #24]
        break;
   10440:	e008      	b.n	10454 <LabGPIO::SetHigh()+0xa4>
    case 5:
       LPC_GPIO5-> SET = (1<<SelPin);
   10442:	9b01      	ldr	r3, [sp, #4]
   10444:	785b      	ldrb	r3, [r3, #1]
   10446:	461a      	mov	r2, r3
   10448:	2301      	movs	r3, #1
   1044a:	fa03 f202 	lsl.w	r2, r3, r2
   1044e:	4b0b      	ldr	r3, [pc, #44]	; (1047c <LabGPIO::SetHigh()+0xcc>)
   10450:	619a      	str	r2, [r3, #24]
       break;
   10452:	bf00      	nop
   10454:	4623      	mov	r3, r4
   10456:	4619      	mov	r1, r3
   10458:	4802      	ldr	r0, [pc, #8]	; (10464 <LabGPIO::SetHigh()+0xb4>)
   1045a:	f002 fe61 	bl	13120 <__cyg_profile_func_exit>
  }
  }
   1045e:	bf00      	nop
   10460:	b002      	add	sp, #8
   10462:	bd10      	pop	{r4, pc}
   10464:	000103b1 	.word	0x000103b1
   10468:	20098000 	.word	0x20098000
   1046c:	20098020 	.word	0x20098020
   10470:	20098040 	.word	0x20098040
   10474:	20098060 	.word	0x20098060
   10478:	20098080 	.word	0x20098080
   1047c:	200980a0 	.word	0x200980a0

00010480 <LabGPIO::SetLow()>:
  void LabGPIO::SetLow(){
   10480:	b510      	push	{r4, lr}
   10482:	b082      	sub	sp, #8
   10484:	4674      	mov	r4, lr
   10486:	9001      	str	r0, [sp, #4]
   10488:	4623      	mov	r3, r4
   1048a:	4619      	mov	r1, r3
   1048c:	4829      	ldr	r0, [pc, #164]	; (10534 <LabGPIO::SetLow()+0xb4>)
   1048e:	f002 fe33 	bl	130f8 <__cyg_profile_func_enter>
        /// Set voltage of pin to LOW 
    switch(SelPort){
   10492:	9b01      	ldr	r3, [sp, #4]
   10494:	781b      	ldrb	r3, [r3, #0]
   10496:	2b05      	cmp	r3, #5
   10498:	d844      	bhi.n	10524 <LabGPIO::SetLow()+0xa4>
   1049a:	a201      	add	r2, pc, #4	; (adr r2, 104a0 <LabGPIO::SetLow()+0x20>)
   1049c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   104a0:	000104b9 	.word	0x000104b9
   104a4:	000104cb 	.word	0x000104cb
   104a8:	000104dd 	.word	0x000104dd
   104ac:	000104ef 	.word	0x000104ef
   104b0:	00010501 	.word	0x00010501
   104b4:	00010513 	.word	0x00010513
    case 0:
       LPC_GPIO0-> CLR = (1<<SelPin);
   104b8:	9b01      	ldr	r3, [sp, #4]
   104ba:	785b      	ldrb	r3, [r3, #1]
   104bc:	461a      	mov	r2, r3
   104be:	2301      	movs	r3, #1
   104c0:	fa03 f202 	lsl.w	r2, r3, r2
   104c4:	4b1c      	ldr	r3, [pc, #112]	; (10538 <LabGPIO::SetLow()+0xb8>)
   104c6:	61da      	str	r2, [r3, #28]
       break;
   104c8:	e02c      	b.n	10524 <LabGPIO::SetLow()+0xa4>
    case 1:
       LPC_GPIO1-> CLR = (1<<SelPin);
   104ca:	9b01      	ldr	r3, [sp, #4]
   104cc:	785b      	ldrb	r3, [r3, #1]
   104ce:	461a      	mov	r2, r3
   104d0:	2301      	movs	r3, #1
   104d2:	fa03 f202 	lsl.w	r2, r3, r2
   104d6:	4b19      	ldr	r3, [pc, #100]	; (1053c <LabGPIO::SetLow()+0xbc>)
   104d8:	61da      	str	r2, [r3, #28]
       break;
   104da:	e023      	b.n	10524 <LabGPIO::SetLow()+0xa4>
    case 2:
       LPC_GPIO2-> CLR = (1<<SelPin);
   104dc:	9b01      	ldr	r3, [sp, #4]
   104de:	785b      	ldrb	r3, [r3, #1]
   104e0:	461a      	mov	r2, r3
   104e2:	2301      	movs	r3, #1
   104e4:	fa03 f202 	lsl.w	r2, r3, r2
   104e8:	4b15      	ldr	r3, [pc, #84]	; (10540 <LabGPIO::SetLow()+0xc0>)
   104ea:	61da      	str	r2, [r3, #28]
       break;
   104ec:	e01a      	b.n	10524 <LabGPIO::SetLow()+0xa4>
    case 3:
       LPC_GPIO3-> CLR = (1<<SelPin);
   104ee:	9b01      	ldr	r3, [sp, #4]
   104f0:	785b      	ldrb	r3, [r3, #1]
   104f2:	461a      	mov	r2, r3
   104f4:	2301      	movs	r3, #1
   104f6:	fa03 f202 	lsl.w	r2, r3, r2
   104fa:	4b12      	ldr	r3, [pc, #72]	; (10544 <LabGPIO::SetLow()+0xc4>)
   104fc:	61da      	str	r2, [r3, #28]
       break;
   104fe:	e011      	b.n	10524 <LabGPIO::SetLow()+0xa4>
    case 4:
       LPC_GPIO4-> CLR = (1<<SelPin);
   10500:	9b01      	ldr	r3, [sp, #4]
   10502:	785b      	ldrb	r3, [r3, #1]
   10504:	461a      	mov	r2, r3
   10506:	2301      	movs	r3, #1
   10508:	fa03 f202 	lsl.w	r2, r3, r2
   1050c:	4b0e      	ldr	r3, [pc, #56]	; (10548 <LabGPIO::SetLow()+0xc8>)
   1050e:	61da      	str	r2, [r3, #28]
        break;
   10510:	e008      	b.n	10524 <LabGPIO::SetLow()+0xa4>
    case 5:
       LPC_GPIO5-> CLR = (1<<SelPin);
   10512:	9b01      	ldr	r3, [sp, #4]
   10514:	785b      	ldrb	r3, [r3, #1]
   10516:	461a      	mov	r2, r3
   10518:	2301      	movs	r3, #1
   1051a:	fa03 f202 	lsl.w	r2, r3, r2
   1051e:	4b0b      	ldr	r3, [pc, #44]	; (1054c <LabGPIO::SetLow()+0xcc>)
   10520:	61da      	str	r2, [r3, #28]
       break;
   10522:	bf00      	nop
   10524:	4623      	mov	r3, r4
   10526:	4619      	mov	r1, r3
   10528:	4802      	ldr	r0, [pc, #8]	; (10534 <LabGPIO::SetLow()+0xb4>)
   1052a:	f002 fdf9 	bl	13120 <__cyg_profile_func_exit>
  }
  
  }
   1052e:	bf00      	nop
   10530:	b002      	add	sp, #8
   10532:	bd10      	pop	{r4, pc}
   10534:	00010481 	.word	0x00010481
   10538:	20098000 	.word	0x20098000
   1053c:	20098020 	.word	0x20098020
   10540:	20098040 	.word	0x20098040
   10544:	20098060 	.word	0x20098060
   10548:	20098080 	.word	0x20098080
   1054c:	200980a0 	.word	0x200980a0

00010550 <LabGPIO::ReadBool()>:
    case 5:
        if(LPC_GPIO5->PIN & (1<<SelPin)) return State::kHigh;
        else return State::kLow;
    }
  }
 bool LabGPIO::ReadBool(){
   10550:	b570      	push	{r4, r5, r6, lr}
   10552:	b082      	sub	sp, #8
   10554:	4676      	mov	r6, lr
   10556:	9001      	str	r0, [sp, #4]
   10558:	4633      	mov	r3, r6
   1055a:	4619      	mov	r1, r3
   1055c:	483e      	ldr	r0, [pc, #248]	; (10658 <LabGPIO::ReadBool()+0x108>)
   1055e:	f002 fdcb 	bl	130f8 <__cyg_profile_func_enter>
  /// Should return the state of the pin (input or output, doesn't matter)
  ///
  /// @return level of pin high => true, low => false
  switch(SelPort){
   10562:	9b01      	ldr	r3, [sp, #4]
   10564:	781b      	ldrb	r3, [r3, #0]
   10566:	2b05      	cmp	r3, #5
   10568:	d868      	bhi.n	1063c <LabGPIO::ReadBool()+0xec>
   1056a:	a201      	add	r2, pc, #4	; (adr r2, 10570 <LabGPIO::ReadBool()+0x20>)
   1056c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   10570:	00010589 	.word	0x00010589
   10574:	000105a7 	.word	0x000105a7
   10578:	000105c5 	.word	0x000105c5
   1057c:	000105e3 	.word	0x000105e3
   10580:	00010601 	.word	0x00010601
   10584:	0001061f 	.word	0x0001061f
    case 0:
        return(LPC_GPIO0->PIN & (1<<SelPin));
   10588:	4b34      	ldr	r3, [pc, #208]	; (1065c <LabGPIO::ReadBool()+0x10c>)
   1058a:	695b      	ldr	r3, [r3, #20]
   1058c:	9a01      	ldr	r2, [sp, #4]
   1058e:	7852      	ldrb	r2, [r2, #1]
   10590:	4611      	mov	r1, r2
   10592:	2201      	movs	r2, #1
   10594:	408a      	lsls	r2, r1
   10596:	4013      	ands	r3, r2
   10598:	2b00      	cmp	r3, #0
   1059a:	bf14      	ite	ne
   1059c:	2301      	movne	r3, #1
   1059e:	2300      	moveq	r3, #0
   105a0:	b2dc      	uxtb	r4, r3
   105a2:	2500      	movs	r5, #0
   105a4:	e04b      	b.n	1063e <LabGPIO::ReadBool()+0xee>
    case 1:
        return(LPC_GPIO1->PIN & (1<<SelPin));
   105a6:	4b2e      	ldr	r3, [pc, #184]	; (10660 <LabGPIO::ReadBool()+0x110>)
   105a8:	695b      	ldr	r3, [r3, #20]
   105aa:	9a01      	ldr	r2, [sp, #4]
   105ac:	7852      	ldrb	r2, [r2, #1]
   105ae:	4611      	mov	r1, r2
   105b0:	2201      	movs	r2, #1
   105b2:	408a      	lsls	r2, r1
   105b4:	4013      	ands	r3, r2
   105b6:	2b00      	cmp	r3, #0
   105b8:	bf14      	ite	ne
   105ba:	2301      	movne	r3, #1
   105bc:	2300      	moveq	r3, #0
   105be:	b2dc      	uxtb	r4, r3
   105c0:	2500      	movs	r5, #0
   105c2:	e03c      	b.n	1063e <LabGPIO::ReadBool()+0xee>
    case 2:
        return(LPC_GPIO2->PIN & (1<<SelPin));
   105c4:	4b27      	ldr	r3, [pc, #156]	; (10664 <LabGPIO::ReadBool()+0x114>)
   105c6:	695b      	ldr	r3, [r3, #20]
   105c8:	9a01      	ldr	r2, [sp, #4]
   105ca:	7852      	ldrb	r2, [r2, #1]
   105cc:	4611      	mov	r1, r2
   105ce:	2201      	movs	r2, #1
   105d0:	408a      	lsls	r2, r1
   105d2:	4013      	ands	r3, r2
   105d4:	2b00      	cmp	r3, #0
   105d6:	bf14      	ite	ne
   105d8:	2301      	movne	r3, #1
   105da:	2300      	moveq	r3, #0
   105dc:	b2dc      	uxtb	r4, r3
   105de:	2500      	movs	r5, #0
   105e0:	e02d      	b.n	1063e <LabGPIO::ReadBool()+0xee>
    case 3:
        return(LPC_GPIO3->PIN & (1<<SelPin));
   105e2:	4b21      	ldr	r3, [pc, #132]	; (10668 <LabGPIO::ReadBool()+0x118>)
   105e4:	695b      	ldr	r3, [r3, #20]
   105e6:	9a01      	ldr	r2, [sp, #4]
   105e8:	7852      	ldrb	r2, [r2, #1]
   105ea:	4611      	mov	r1, r2
   105ec:	2201      	movs	r2, #1
   105ee:	408a      	lsls	r2, r1
   105f0:	4013      	ands	r3, r2
   105f2:	2b00      	cmp	r3, #0
   105f4:	bf14      	ite	ne
   105f6:	2301      	movne	r3, #1
   105f8:	2300      	moveq	r3, #0
   105fa:	b2dc      	uxtb	r4, r3
   105fc:	2500      	movs	r5, #0
   105fe:	e01e      	b.n	1063e <LabGPIO::ReadBool()+0xee>
    case 4:
        return(LPC_GPIO4->PIN & (1<<SelPin));
   10600:	4b1a      	ldr	r3, [pc, #104]	; (1066c <LabGPIO::ReadBool()+0x11c>)
   10602:	695b      	ldr	r3, [r3, #20]
   10604:	9a01      	ldr	r2, [sp, #4]
   10606:	7852      	ldrb	r2, [r2, #1]
   10608:	4611      	mov	r1, r2
   1060a:	2201      	movs	r2, #1
   1060c:	408a      	lsls	r2, r1
   1060e:	4013      	ands	r3, r2
   10610:	2b00      	cmp	r3, #0
   10612:	bf14      	ite	ne
   10614:	2301      	movne	r3, #1
   10616:	2300      	moveq	r3, #0
   10618:	b2dc      	uxtb	r4, r3
   1061a:	2500      	movs	r5, #0
   1061c:	e00f      	b.n	1063e <LabGPIO::ReadBool()+0xee>
    case 5:
        return(LPC_GPIO5->PIN & (1<<SelPin));  
   1061e:	4b14      	ldr	r3, [pc, #80]	; (10670 <LabGPIO::ReadBool()+0x120>)
   10620:	695b      	ldr	r3, [r3, #20]
   10622:	9a01      	ldr	r2, [sp, #4]
   10624:	7852      	ldrb	r2, [r2, #1]
   10626:	4611      	mov	r1, r2
   10628:	2201      	movs	r2, #1
   1062a:	408a      	lsls	r2, r1
   1062c:	4013      	ands	r3, r2
   1062e:	2b00      	cmp	r3, #0
   10630:	bf14      	ite	ne
   10632:	2301      	movne	r3, #1
   10634:	2300      	moveq	r3, #0
   10636:	b2dc      	uxtb	r4, r3
   10638:	2500      	movs	r5, #0
   1063a:	e000      	b.n	1063e <LabGPIO::ReadBool()+0xee>
   1063c:	2501      	movs	r5, #1
   1063e:	4633      	mov	r3, r6
   10640:	4619      	mov	r1, r3
   10642:	4805      	ldr	r0, [pc, #20]	; (10658 <LabGPIO::ReadBool()+0x108>)
   10644:	f002 fd6c 	bl	13120 <__cyg_profile_func_exit>
   10648:	2d01      	cmp	r5, #1
   1064a:	d100      	bne.n	1064e <LabGPIO::ReadBool()+0xfe>
  }
  }
   1064c:	e000      	b.n	10650 <LabGPIO::ReadBool()+0x100>
   1064e:	4623      	mov	r3, r4
   10650:	4618      	mov	r0, r3
   10652:	b002      	add	sp, #8
   10654:	bd70      	pop	{r4, r5, r6, pc}
   10656:	bf00      	nop
   10658:	00010551 	.word	0x00010551
   1065c:	20098000 	.word	0x20098000
   10660:	20098020 	.word	0x20098020
   10664:	20098040 	.word	0x20098040
   10668:	20098060 	.word	0x20098060
   1066c:	20098080 	.word	0x20098080
   10670:	200980a0 	.word	0x200980a0

00010674 <LabGPIO::toggle()>:
 void LabGPIO::toggle(){
   10674:	b510      	push	{r4, lr}
   10676:	b082      	sub	sp, #8
   10678:	4674      	mov	r4, lr
   1067a:	9001      	str	r0, [sp, #4]
   1067c:	4623      	mov	r3, r4
   1067e:	4619      	mov	r1, r3
   10680:	4841      	ldr	r0, [pc, #260]	; (10788 <LabGPIO::toggle()+0x114>)
   10682:	f002 fd39 	bl	130f8 <__cyg_profile_func_enter>

    switch(SelPort){
   10686:	9b01      	ldr	r3, [sp, #4]
   10688:	781b      	ldrb	r3, [r3, #0]
   1068a:	2b05      	cmp	r3, #5
   1068c:	d874      	bhi.n	10778 <LabGPIO::toggle()+0x104>
   1068e:	a201      	add	r2, pc, #4	; (adr r2, 10694 <LabGPIO::toggle()+0x20>)
   10690:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   10694:	000106ad 	.word	0x000106ad
   10698:	000106cf 	.word	0x000106cf
   1069c:	000106f1 	.word	0x000106f1
   106a0:	00010713 	.word	0x00010713
   106a4:	00010735 	.word	0x00010735
   106a8:	00010757 	.word	0x00010757
    case 0:
        if(!ReadBool()) //reads the current state and if it is not true which means it is SetLow then SetHigh 
   106ac:	9801      	ldr	r0, [sp, #4]
   106ae:	f7ff ff4f 	bl	10550 <LabGPIO::ReadBool()>
   106b2:	4603      	mov	r3, r0
   106b4:	f083 0301 	eor.w	r3, r3, #1
   106b8:	b2db      	uxtb	r3, r3
   106ba:	2b00      	cmp	r3, #0
   106bc:	d003      	beq.n	106c6 <LabGPIO::toggle()+0x52>
            SetHigh(); 
   106be:	9801      	ldr	r0, [sp, #4]
   106c0:	f7ff fe76 	bl	103b0 <LabGPIO::SetHigh()>
        else SetLow();
        break;
   106c4:	e058      	b.n	10778 <LabGPIO::toggle()+0x104>
        else SetLow();
   106c6:	9801      	ldr	r0, [sp, #4]
   106c8:	f7ff feda 	bl	10480 <LabGPIO::SetLow()>
        break;
   106cc:	e054      	b.n	10778 <LabGPIO::toggle()+0x104>
    case 1:
        if(!ReadBool()) //reads the current state and if it is not true which means it is SetLow then SetHigh 
   106ce:	9801      	ldr	r0, [sp, #4]
   106d0:	f7ff ff3e 	bl	10550 <LabGPIO::ReadBool()>
   106d4:	4603      	mov	r3, r0
   106d6:	f083 0301 	eor.w	r3, r3, #1
   106da:	b2db      	uxtb	r3, r3
   106dc:	2b00      	cmp	r3, #0
   106de:	d003      	beq.n	106e8 <LabGPIO::toggle()+0x74>
            SetHigh(); 
   106e0:	9801      	ldr	r0, [sp, #4]
   106e2:	f7ff fe65 	bl	103b0 <LabGPIO::SetHigh()>
        else SetLow();
        break;
   106e6:	e047      	b.n	10778 <LabGPIO::toggle()+0x104>
        else SetLow();
   106e8:	9801      	ldr	r0, [sp, #4]
   106ea:	f7ff fec9 	bl	10480 <LabGPIO::SetLow()>
        break;
   106ee:	e043      	b.n	10778 <LabGPIO::toggle()+0x104>
    case 2:
        if(!ReadBool()) //reads the current state and if it is not true which means it is SetLow then SetHigh 
   106f0:	9801      	ldr	r0, [sp, #4]
   106f2:	f7ff ff2d 	bl	10550 <LabGPIO::ReadBool()>
   106f6:	4603      	mov	r3, r0
   106f8:	f083 0301 	eor.w	r3, r3, #1
   106fc:	b2db      	uxtb	r3, r3
   106fe:	2b00      	cmp	r3, #0
   10700:	d003      	beq.n	1070a <LabGPIO::toggle()+0x96>
            SetHigh(); 
   10702:	9801      	ldr	r0, [sp, #4]
   10704:	f7ff fe54 	bl	103b0 <LabGPIO::SetHigh()>
        else SetLow();
        break;
   10708:	e036      	b.n	10778 <LabGPIO::toggle()+0x104>
        else SetLow();
   1070a:	9801      	ldr	r0, [sp, #4]
   1070c:	f7ff feb8 	bl	10480 <LabGPIO::SetLow()>
        break;
   10710:	e032      	b.n	10778 <LabGPIO::toggle()+0x104>
    case 3:
        if(!ReadBool()) //reads the current state and if it is not true which means it is SetLow then SetHigh 
   10712:	9801      	ldr	r0, [sp, #4]
   10714:	f7ff ff1c 	bl	10550 <LabGPIO::ReadBool()>
   10718:	4603      	mov	r3, r0
   1071a:	f083 0301 	eor.w	r3, r3, #1
   1071e:	b2db      	uxtb	r3, r3
   10720:	2b00      	cmp	r3, #0
   10722:	d003      	beq.n	1072c <LabGPIO::toggle()+0xb8>
            SetHigh(); 
   10724:	9801      	ldr	r0, [sp, #4]
   10726:	f7ff fe43 	bl	103b0 <LabGPIO::SetHigh()>
        else SetLow();
        break;
   1072a:	e025      	b.n	10778 <LabGPIO::toggle()+0x104>
        else SetLow();
   1072c:	9801      	ldr	r0, [sp, #4]
   1072e:	f7ff fea7 	bl	10480 <LabGPIO::SetLow()>
        break;
   10732:	e021      	b.n	10778 <LabGPIO::toggle()+0x104>
    case 4:
        if(!ReadBool()) //reads the current state and if it is not true which means it is SetLow then SetHigh 
   10734:	9801      	ldr	r0, [sp, #4]
   10736:	f7ff ff0b 	bl	10550 <LabGPIO::ReadBool()>
   1073a:	4603      	mov	r3, r0
   1073c:	f083 0301 	eor.w	r3, r3, #1
   10740:	b2db      	uxtb	r3, r3
   10742:	2b00      	cmp	r3, #0
   10744:	d003      	beq.n	1074e <LabGPIO::toggle()+0xda>
            SetHigh(); 
   10746:	9801      	ldr	r0, [sp, #4]
   10748:	f7ff fe32 	bl	103b0 <LabGPIO::SetHigh()>
        else SetLow();
        break;
   1074c:	e014      	b.n	10778 <LabGPIO::toggle()+0x104>
        else SetLow();
   1074e:	9801      	ldr	r0, [sp, #4]
   10750:	f7ff fe96 	bl	10480 <LabGPIO::SetLow()>
        break;
   10754:	e010      	b.n	10778 <LabGPIO::toggle()+0x104>
    case 5:
        if(!ReadBool()) //reads the current state and if it is not true which means it is SetLow then SetHigh 
   10756:	9801      	ldr	r0, [sp, #4]
   10758:	f7ff fefa 	bl	10550 <LabGPIO::ReadBool()>
   1075c:	4603      	mov	r3, r0
   1075e:	f083 0301 	eor.w	r3, r3, #1
   10762:	b2db      	uxtb	r3, r3
   10764:	2b00      	cmp	r3, #0
   10766:	d003      	beq.n	10770 <LabGPIO::toggle()+0xfc>
            SetHigh(); 
   10768:	9801      	ldr	r0, [sp, #4]
   1076a:	f7ff fe21 	bl	103b0 <LabGPIO::SetHigh()>
        else SetLow();
        break;
   1076e:	e002      	b.n	10776 <LabGPIO::toggle()+0x102>
        else SetLow();
   10770:	9801      	ldr	r0, [sp, #4]
   10772:	f7ff fe85 	bl	10480 <LabGPIO::SetLow()>
        break;
   10776:	bf00      	nop
   10778:	4623      	mov	r3, r4
   1077a:	4619      	mov	r1, r3
   1077c:	4802      	ldr	r0, [pc, #8]	; (10788 <LabGPIO::toggle()+0x114>)
   1077e:	f002 fccf 	bl	13120 <__cyg_profile_func_exit>
    }
  }
   10782:	bf00      	nop
   10784:	b002      	add	sp, #8
   10786:	bd10      	pop	{r4, pc}
   10788:	00010675 	.word	0x00010675

0001078c <LabGPIO::setPulldown()>:
  void LabGPIO::setPulldown(){
   1078c:	b510      	push	{r4, lr}
   1078e:	b082      	sub	sp, #8
   10790:	4674      	mov	r4, lr
   10792:	9001      	str	r0, [sp, #4]
   10794:	4623      	mov	r3, r4
   10796:	4619      	mov	r1, r3
   10798:	482d      	ldr	r0, [pc, #180]	; (10850 <LabGPIO::setPulldown()+0xc4>)
   1079a:	f002 fcad 	bl	130f8 <__cyg_profile_func_enter>
   switch(SelPort){
   1079e:	9b01      	ldr	r3, [sp, #4]
   107a0:	781b      	ldrb	r3, [r3, #0]
   107a2:	2b00      	cmp	r3, #0
   107a4:	d002      	beq.n	107ac <LabGPIO::setPulldown()+0x20>
   107a6:	2b01      	cmp	r3, #1
   107a8:	d021      	beq.n	107ee <LabGPIO::setPulldown()+0x62>
   107aa:	e049      	b.n	10840 <LabGPIO::setPulldown()+0xb4>
   case 0:
    if(SelPin == 29)
   107ac:	9b01      	ldr	r3, [sp, #4]
   107ae:	785b      	ldrb	r3, [r3, #1]
   107b0:	2b1d      	cmp	r3, #29
   107b2:	d10c      	bne.n	107ce <LabGPIO::setPulldown()+0x42>
   {   
       LPC_IOCON->P0_29 &= ~(0b11<<3);
   107b4:	4b27      	ldr	r3, [pc, #156]	; (10854 <LabGPIO::setPulldown()+0xc8>)
   107b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
   107b8:	4a26      	ldr	r2, [pc, #152]	; (10854 <LabGPIO::setPulldown()+0xc8>)
   107ba:	f023 0318 	bic.w	r3, r3, #24
   107be:	6753      	str	r3, [r2, #116]	; 0x74
       LPC_IOCON->P0_29 |= (0b1<<3);
   107c0:	4b24      	ldr	r3, [pc, #144]	; (10854 <LabGPIO::setPulldown()+0xc8>)
   107c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
   107c4:	4a23      	ldr	r2, [pc, #140]	; (10854 <LabGPIO::setPulldown()+0xc8>)
   107c6:	f043 0308 	orr.w	r3, r3, #8
   107ca:	6753      	str	r3, [r2, #116]	; 0x74
   107cc:	e00f      	b.n	107ee <LabGPIO::setPulldown()+0x62>
   }
   else if ( SelPin == 30)
   107ce:	9b01      	ldr	r3, [sp, #4]
   107d0:	785b      	ldrb	r3, [r3, #1]
   107d2:	2b1e      	cmp	r3, #30
   107d4:	d10b      	bne.n	107ee <LabGPIO::setPulldown()+0x62>
   {
       LPC_IOCON->P0_30 &= ~(0b11<<3);
   107d6:	4b1f      	ldr	r3, [pc, #124]	; (10854 <LabGPIO::setPulldown()+0xc8>)
   107d8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   107da:	4a1e      	ldr	r2, [pc, #120]	; (10854 <LabGPIO::setPulldown()+0xc8>)
   107dc:	f023 0318 	bic.w	r3, r3, #24
   107e0:	6793      	str	r3, [r2, #120]	; 0x78
       LPC_IOCON->P0_30 |= (0b1<<3);
   107e2:	4b1c      	ldr	r3, [pc, #112]	; (10854 <LabGPIO::setPulldown()+0xc8>)
   107e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   107e6:	4a1b      	ldr	r2, [pc, #108]	; (10854 <LabGPIO::setPulldown()+0xc8>)
   107e8:	f043 0308 	orr.w	r3, r3, #8
   107ec:	6793      	str	r3, [r2, #120]	; 0x78
   }
     //fall through
   case 1:   
   if(SelPin == 19)
   107ee:	9b01      	ldr	r3, [sp, #4]
   107f0:	785b      	ldrb	r3, [r3, #1]
   107f2:	2b13      	cmp	r3, #19
   107f4:	d110      	bne.n	10818 <LabGPIO::setPulldown()+0x8c>
   {   
       LPC_IOCON->P1_19 &= ~(0b11<<3);
   107f6:	4b17      	ldr	r3, [pc, #92]	; (10854 <LabGPIO::setPulldown()+0xc8>)
   107f8:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
   107fc:	4a15      	ldr	r2, [pc, #84]	; (10854 <LabGPIO::setPulldown()+0xc8>)
   107fe:	f023 0318 	bic.w	r3, r3, #24
   10802:	f8c2 30cc 	str.w	r3, [r2, #204]	; 0xcc
       LPC_IOCON->P1_19 |= (0b1<<3);
   10806:	4b13      	ldr	r3, [pc, #76]	; (10854 <LabGPIO::setPulldown()+0xc8>)
   10808:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
   1080c:	4a11      	ldr	r2, [pc, #68]	; (10854 <LabGPIO::setPulldown()+0xc8>)
   1080e:	f043 0308 	orr.w	r3, r3, #8
   10812:	f8c2 30cc 	str.w	r3, [r2, #204]	; 0xcc
   10816:	e013      	b.n	10840 <LabGPIO::setPulldown()+0xb4>
   }
   else if ( SelPin == 15)
   10818:	9b01      	ldr	r3, [sp, #4]
   1081a:	785b      	ldrb	r3, [r3, #1]
   1081c:	2b0f      	cmp	r3, #15
   1081e:	d10f      	bne.n	10840 <LabGPIO::setPulldown()+0xb4>
   {
       LPC_IOCON->P1_15 &= ~(0b11<<3);
   10820:	4b0c      	ldr	r3, [pc, #48]	; (10854 <LabGPIO::setPulldown()+0xc8>)
   10822:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
   10826:	4a0b      	ldr	r2, [pc, #44]	; (10854 <LabGPIO::setPulldown()+0xc8>)
   10828:	f023 0318 	bic.w	r3, r3, #24
   1082c:	f8c2 30bc 	str.w	r3, [r2, #188]	; 0xbc
       LPC_IOCON->P1_15 |= (0b1<<3);
   10830:	4b08      	ldr	r3, [pc, #32]	; (10854 <LabGPIO::setPulldown()+0xc8>)
   10832:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
   10836:	4a07      	ldr	r2, [pc, #28]	; (10854 <LabGPIO::setPulldown()+0xc8>)
   10838:	f043 0308 	orr.w	r3, r3, #8
   1083c:	f8c2 30bc 	str.w	r3, [r2, #188]	; 0xbc
   10840:	4623      	mov	r3, r4
   10842:	4619      	mov	r1, r3
   10844:	4802      	ldr	r0, [pc, #8]	; (10850 <LabGPIO::setPulldown()+0xc4>)
   10846:	f002 fc6b 	bl	13120 <__cyg_profile_func_exit>
   }
  
   }
  }
   1084a:	bf00      	nop
   1084c:	b002      	add	sp, #8
   1084e:	bd10      	pop	{r4, pc}
   10850:	0001078d 	.word	0x0001078d
   10854:	4002c000 	.word	0x4002c000

00010858 <(anonymous namespace)::DefaultUptime()>:
{
// uptime in nanoseconds
inline uint64_t uptime = 0;
// Returns the system uptime in nanoseconds, do not use this function directly
[[gnu::always_inline]] inline uint64_t DefaultUptime()
{
   10858:	b570      	push	{r4, r5, r6, lr}
   1085a:	4676      	mov	r6, lr
   1085c:	4633      	mov	r3, r6
   1085e:	4619      	mov	r1, r3
   10860:	4807      	ldr	r0, [pc, #28]	; (10880 <(anonymous namespace)::DefaultUptime()+0x28>)
   10862:	f002 fc49 	bl	130f8 <__cyg_profile_func_enter>
  return uptime;
   10866:	4b07      	ldr	r3, [pc, #28]	; (10884 <(anonymous namespace)::DefaultUptime()+0x2c>)
   10868:	e9d3 4500 	ldrd	r4, r5, [r3]
   1086c:	4633      	mov	r3, r6
   1086e:	4619      	mov	r1, r3
   10870:	4803      	ldr	r0, [pc, #12]	; (10880 <(anonymous namespace)::DefaultUptime()+0x28>)
   10872:	f002 fc55 	bl	13120 <__cyg_profile_func_exit>
   10876:	4623      	mov	r3, r4
   10878:	462c      	mov	r4, r5
}
   1087a:	4618      	mov	r0, r3
   1087c:	4621      	mov	r1, r4
   1087e:	bd70      	pop	{r4, r5, r6, pc}
   10880:	00010859 	.word	0x00010859
   10884:	10000260 	.word	0x10000260

00010888 <Milliseconds()>:
{
  Uptime = uptime_function;
}
// Get system uptime in milliseconds as a 64-bit integer
inline uint64_t Milliseconds()
{
   10888:	b570      	push	{r4, r5, r6, lr}
   1088a:	4674      	mov	r4, lr
   1088c:	4623      	mov	r3, r4
   1088e:	4619      	mov	r1, r3
   10890:	480c      	ldr	r0, [pc, #48]	; (108c4 <Milliseconds()+0x3c>)
   10892:	f002 fc31 	bl	130f8 <__cyg_profile_func_enter>
  return Uptime() / 1'000;
   10896:	4b0c      	ldr	r3, [pc, #48]	; (108c8 <Milliseconds()+0x40>)
   10898:	681b      	ldr	r3, [r3, #0]
   1089a:	4798      	blx	r3
   1089c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   108a0:	f04f 0300 	mov.w	r3, #0
   108a4:	f006 fc86 	bl	171b4 <__aeabi_uldivmod>
   108a8:	4602      	mov	r2, r0
   108aa:	460b      	mov	r3, r1
   108ac:	4615      	mov	r5, r2
   108ae:	461e      	mov	r6, r3
   108b0:	4623      	mov	r3, r4
   108b2:	4619      	mov	r1, r3
   108b4:	4803      	ldr	r0, [pc, #12]	; (108c4 <Milliseconds()+0x3c>)
   108b6:	f002 fc33 	bl	13120 <__cyg_profile_func_exit>
   108ba:	462b      	mov	r3, r5
   108bc:	4634      	mov	r4, r6
}
   108be:	4618      	mov	r0, r3
   108c0:	4621      	mov	r1, r4
   108c2:	bd70      	pop	{r4, r5, r6, pc}
   108c4:	00010889 	.word	0x00010889
   108c8:	10000000 	.word	0x10000000

000108cc <Wait(unsigned long long)::{lambda()#1}::operator()() const>:
  return status;
}

inline Status Wait(uint64_t timeout)
{
  return Wait(timeout, []() -> bool { return false; });
   108cc:	b530      	push	{r4, r5, lr}
   108ce:	b083      	sub	sp, #12
   108d0:	4675      	mov	r5, lr
   108d2:	9001      	str	r0, [sp, #4]
   108d4:	462b      	mov	r3, r5
   108d6:	4619      	mov	r1, r3
   108d8:	4806      	ldr	r0, [pc, #24]	; (108f4 <Wait(unsigned long long)::{lambda()#1}::operator()() const+0x28>)
   108da:	f002 fc0d 	bl	130f8 <__cyg_profile_func_enter>
   108de:	2400      	movs	r4, #0
   108e0:	462b      	mov	r3, r5
   108e2:	4619      	mov	r1, r3
   108e4:	4803      	ldr	r0, [pc, #12]	; (108f4 <Wait(unsigned long long)::{lambda()#1}::operator()() const+0x28>)
   108e6:	f002 fc1b 	bl	13120 <__cyg_profile_func_exit>
   108ea:	4623      	mov	r3, r4
   108ec:	4618      	mov	r0, r3
   108ee:	b003      	add	sp, #12
   108f0:	bd30      	pop	{r4, r5, pc}
   108f2:	bf00      	nop
   108f4:	000108cd 	.word	0x000108cd

000108f8 <Wait(unsigned long long)::{lambda()#1}::_FUN()>:
   108f8:	b538      	push	{r3, r4, r5, lr}
   108fa:	4674      	mov	r4, lr
   108fc:	4623      	mov	r3, r4
   108fe:	4619      	mov	r1, r3
   10900:	4807      	ldr	r0, [pc, #28]	; (10920 <Wait(unsigned long long)::{lambda()#1}::_FUN()+0x28>)
   10902:	f002 fbf9 	bl	130f8 <__cyg_profile_func_enter>
   10906:	2000      	movs	r0, #0
   10908:	f7ff ffe0 	bl	108cc <Wait(unsigned long long)::{lambda()#1}::operator()() const>
   1090c:	4603      	mov	r3, r0
   1090e:	461d      	mov	r5, r3
   10910:	4623      	mov	r3, r4
   10912:	4619      	mov	r1, r3
   10914:	4802      	ldr	r0, [pc, #8]	; (10920 <Wait(unsigned long long)::{lambda()#1}::_FUN()+0x28>)
   10916:	f002 fc03 	bl	13120 <__cyg_profile_func_exit>
   1091a:	462b      	mov	r3, r5
   1091c:	4618      	mov	r0, r3
   1091e:	bd38      	pop	{r3, r4, r5, pc}
   10920:	000108f9 	.word	0x000108f9

00010924 <Wait(unsigned long long)>:
{
   10924:	b5f0      	push	{r4, r5, r6, r7, lr}
   10926:	b089      	sub	sp, #36	; 0x24
   10928:	4675      	mov	r5, lr
   1092a:	e9cd 0100 	strd	r0, r1, [sp]
   1092e:	462b      	mov	r3, r5
   10930:	4619      	mov	r1, r3
   10932:	482b      	ldr	r0, [pc, #172]	; (109e0 <Wait(unsigned long long)+0xbc>)
   10934:	f002 fbe0 	bl	130f8 <__cyg_profile_func_enter>
   10938:	e9dd 3400 	ldrd	r3, r4, [sp]
   1093c:	e9cd 3406 	strd	r3, r4, [sp, #24]
   10940:	f88d 6008 	strb.w	r6, [sp, #8]
   10944:	462b      	mov	r3, r5
   10946:	4619      	mov	r1, r3
   10948:	4826      	ldr	r0, [pc, #152]	; (109e4 <Wait(unsigned long long)+0xc0>)
   1094a:	f002 fbd5 	bl	130f8 <__cyg_profile_func_enter>
  uint64_t timeout_time = 0;
   1094e:	f04f 0300 	mov.w	r3, #0
   10952:	f04f 0400 	mov.w	r4, #0
   10956:	e9cd 3404 	strd	r3, r4, [sp, #16]
  if (timeout == kMaxWait)
   1095a:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
   1095e:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
   10962:	bf08      	it	eq
   10964:	f1b3 3fff 	cmpeq.w	r3, #4294967295	; 0xffffffff
   10968:	d106      	bne.n	10978 <Wait(unsigned long long)+0x54>
    timeout_time = kMaxWait;
   1096a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1096e:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   10972:	e9cd 3404 	strd	r3, r4, [sp, #16]
   10976:	e00a      	b.n	1098e <Wait(unsigned long long)+0x6a>
    timeout_time = Milliseconds() + timeout;
   10978:	f7ff ff86 	bl	10888 <Milliseconds()>
   1097c:	460a      	mov	r2, r1
   1097e:	4601      	mov	r1, r0
   10980:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
   10984:	185e      	adds	r6, r3, r1
   10986:	eb44 0702 	adc.w	r7, r4, r2
   1098a:	e9cd 6704 	strd	r6, r7, [sp, #16]
  Status status = Status::kTimedOut;
   1098e:	2301      	movs	r3, #1
   10990:	9303      	str	r3, [sp, #12]
  while (Milliseconds() < timeout_time)
   10992:	f7ff ff79 	bl	10888 <Milliseconds()>
   10996:	460a      	mov	r2, r1
   10998:	4601      	mov	r1, r0
   1099a:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
   1099e:	42a2      	cmp	r2, r4
   109a0:	bf08      	it	eq
   109a2:	4299      	cmpeq	r1, r3
   109a4:	bf34      	ite	cc
   109a6:	2301      	movcc	r3, #1
   109a8:	2300      	movcs	r3, #0
   109aa:	b2db      	uxtb	r3, r3
   109ac:	2b00      	cmp	r3, #0
   109ae:	d008      	beq.n	109c2 <Wait(unsigned long long)+0x9e>
    if (is_done())
   109b0:	ab02      	add	r3, sp, #8
   109b2:	4618      	mov	r0, r3
   109b4:	f7ff ff8a 	bl	108cc <Wait(unsigned long long)::{lambda()#1}::operator()() const>
   109b8:	4603      	mov	r3, r0
   109ba:	2b00      	cmp	r3, #0
   109bc:	d0e9      	beq.n	10992 <Wait(unsigned long long)+0x6e>
      status = Status::kSuccess;
   109be:	2300      	movs	r3, #0
   109c0:	9303      	str	r3, [sp, #12]
  return status;
   109c2:	9c03      	ldr	r4, [sp, #12]
   109c4:	462b      	mov	r3, r5
   109c6:	4619      	mov	r1, r3
   109c8:	4806      	ldr	r0, [pc, #24]	; (109e4 <Wait(unsigned long long)+0xc0>)
   109ca:	f002 fba9 	bl	13120 <__cyg_profile_func_exit>
   109ce:	462b      	mov	r3, r5
   109d0:	4619      	mov	r1, r3
   109d2:	4803      	ldr	r0, [pc, #12]	; (109e0 <Wait(unsigned long long)+0xbc>)
   109d4:	f002 fba4 	bl	13120 <__cyg_profile_func_exit>
  return Wait(timeout, []() -> bool { return false; });
   109d8:	4623      	mov	r3, r4
}
   109da:	4618      	mov	r0, r3
   109dc:	b009      	add	sp, #36	; 0x24
   109de:	bdf0      	pop	{r4, r5, r6, r7, pc}
   109e0:	00010925 	.word	0x00010925
   109e4:	00010b31 	.word	0x00010b31

000109e8 <Delay(unsigned long long)>:

// Delay the system for a duration of time
inline void Delay([[maybe_unused]] uint64_t delay_time_ms)
{
   109e8:	b510      	push	{r4, lr}
   109ea:	b082      	sub	sp, #8
   109ec:	4674      	mov	r4, lr
   109ee:	e9cd 0100 	strd	r0, r1, [sp]
   109f2:	4623      	mov	r3, r4
   109f4:	4619      	mov	r1, r3
   109f6:	4807      	ldr	r0, [pc, #28]	; (10a14 <Delay(unsigned long long)+0x2c>)
   109f8:	f002 fb7e 	bl	130f8 <__cyg_profile_func_enter>
#if defined(HOST_TEST)
  return;
#else
  Wait(delay_time_ms);
   109fc:	e9dd 0100 	ldrd	r0, r1, [sp]
   10a00:	f7ff ff90 	bl	10924 <Wait(unsigned long long)>
   10a04:	4623      	mov	r3, r4
   10a06:	4619      	mov	r1, r3
   10a08:	4802      	ldr	r0, [pc, #8]	; (10a14 <Delay(unsigned long long)+0x2c>)
   10a0a:	f002 fb89 	bl	13120 <__cyg_profile_func_exit>
#endif  // HOST_TEST
}
   10a0e:	bf00      	nop
   10a10:	b002      	add	sp, #8
   10a12:	bd10      	pop	{r4, pc}
   10a14:	000109e9 	.word	0x000109e9

00010a18 <main>:
void DB1();
void DB2();
void DB3();

int main() 
{
   10a18:	b508      	push	{r3, lr}
   10a1a:	4673      	mov	r3, lr
   10a1c:	4619      	mov	r1, r3
   10a1e:	4838      	ldr	r0, [pc, #224]	; (10b00 <main+0xe8>)
   10a20:	f002 fb6a 	bl	130f8 <__cyg_profile_func_enter>
  LOG_INFO("Start");
   10a24:	231f      	movs	r3, #31
   10a26:	4a37      	ldr	r2, [pc, #220]	; (10b04 <main+0xec>)
   10a28:	4937      	ldr	r1, [pc, #220]	; (10b08 <main+0xf0>)
   10a2a:	4838      	ldr	r0, [pc, #224]	; (10b0c <main+0xf4>)
   10a2c:	f003 fdc2 	bl	145b4 <printf>
  /*Lab3*/
 
 
        button0.setPulldown();
   10a30:	4837      	ldr	r0, [pc, #220]	; (10b10 <main+0xf8>)
   10a32:	f7ff feab 	bl	1078c <LabGPIO::setPulldown()>
        button1.setPulldown();
   10a36:	4837      	ldr	r0, [pc, #220]	; (10b14 <main+0xfc>)
   10a38:	f7ff fea8 	bl	1078c <LabGPIO::setPulldown()>
  // Initialize button and led here

  while(true)
  {    
     if(button0.ReadBool()){
   10a3c:	4834      	ldr	r0, [pc, #208]	; (10b10 <main+0xf8>)
   10a3e:	f7ff fd87 	bl	10550 <LabGPIO::ReadBool()>
   10a42:	4603      	mov	r3, r0
   10a44:	2b00      	cmp	r3, #0
   10a46:	d011      	beq.n	10a6c <main+0x54>
         //LOG_INFO("Button 0 pressed!");
         Delay(10);
   10a48:	f04f 000a 	mov.w	r0, #10
   10a4c:	f04f 0100 	mov.w	r1, #0
   10a50:	f7ff ffca 	bl	109e8 <Delay(unsigned long long)>
         if(button0.ReadBool() != true)
   10a54:	482e      	ldr	r0, [pc, #184]	; (10b10 <main+0xf8>)
   10a56:	f7ff fd7b 	bl	10550 <LabGPIO::ReadBool()>
   10a5a:	4603      	mov	r3, r0
   10a5c:	f083 0301 	eor.w	r3, r3, #1
   10a60:	b2db      	uxtb	r3, r3
   10a62:	2b00      	cmp	r3, #0
   10a64:	d002      	beq.n	10a6c <main+0x54>
       {
          
         led0.toggle();
   10a66:	482c      	ldr	r0, [pc, #176]	; (10b18 <main+0x100>)
   10a68:	f7ff fe04 	bl	10674 <LabGPIO::toggle()>
       }           
       }
          
       
       if(button1.ReadBool()){
   10a6c:	4829      	ldr	r0, [pc, #164]	; (10b14 <main+0xfc>)
   10a6e:	f7ff fd6f 	bl	10550 <LabGPIO::ReadBool()>
   10a72:	4603      	mov	r3, r0
   10a74:	2b00      	cmp	r3, #0
   10a76:	d011      	beq.n	10a9c <main+0x84>
          // LOG_INFO("Button 1 pressed!");      
          Delay(10);
   10a78:	f04f 000a 	mov.w	r0, #10
   10a7c:	f04f 0100 	mov.w	r1, #0
   10a80:	f7ff ffb2 	bl	109e8 <Delay(unsigned long long)>
         if(button1.ReadBool() != true)
   10a84:	4823      	ldr	r0, [pc, #140]	; (10b14 <main+0xfc>)
   10a86:	f7ff fd63 	bl	10550 <LabGPIO::ReadBool()>
   10a8a:	4603      	mov	r3, r0
   10a8c:	f083 0301 	eor.w	r3, r3, #1
   10a90:	b2db      	uxtb	r3, r3
   10a92:	2b00      	cmp	r3, #0
   10a94:	d002      	beq.n	10a9c <main+0x84>
       {
          
            led1.toggle();
   10a96:	4821      	ldr	r0, [pc, #132]	; (10b1c <main+0x104>)
   10a98:	f7ff fdec 	bl	10674 <LabGPIO::toggle()>
       }           
       }
       if(button2.ReadBool()){
   10a9c:	4820      	ldr	r0, [pc, #128]	; (10b20 <main+0x108>)
   10a9e:	f7ff fd57 	bl	10550 <LabGPIO::ReadBool()>
   10aa2:	4603      	mov	r3, r0
   10aa4:	2b00      	cmp	r3, #0
   10aa6:	d011      	beq.n	10acc <main+0xb4>
               // LOG_INFO("Button 2 pressed!");
               Delay(10);
   10aa8:	f04f 000a 	mov.w	r0, #10
   10aac:	f04f 0100 	mov.w	r1, #0
   10ab0:	f7ff ff9a 	bl	109e8 <Delay(unsigned long long)>
         if(button2.ReadBool() != true)
   10ab4:	481a      	ldr	r0, [pc, #104]	; (10b20 <main+0x108>)
   10ab6:	f7ff fd4b 	bl	10550 <LabGPIO::ReadBool()>
   10aba:	4603      	mov	r3, r0
   10abc:	f083 0301 	eor.w	r3, r3, #1
   10ac0:	b2db      	uxtb	r3, r3
   10ac2:	2b00      	cmp	r3, #0
   10ac4:	d002      	beq.n	10acc <main+0xb4>
       {
           
            led2.toggle();
   10ac6:	4817      	ldr	r0, [pc, #92]	; (10b24 <main+0x10c>)
   10ac8:	f7ff fdd4 	bl	10674 <LabGPIO::toggle()>
       }           
       }
       if(button3.ReadBool()){
   10acc:	4816      	ldr	r0, [pc, #88]	; (10b28 <main+0x110>)
   10ace:	f7ff fd3f 	bl	10550 <LabGPIO::ReadBool()>
   10ad2:	4603      	mov	r3, r0
   10ad4:	2b00      	cmp	r3, #0
   10ad6:	d0b1      	beq.n	10a3c <main+0x24>
          //LOG_INFO("Button 3 pressed!");
          Delay(10);
   10ad8:	f04f 000a 	mov.w	r0, #10
   10adc:	f04f 0100 	mov.w	r1, #0
   10ae0:	f7ff ff82 	bl	109e8 <Delay(unsigned long long)>
         if(button3.ReadBool() != true)
   10ae4:	4810      	ldr	r0, [pc, #64]	; (10b28 <main+0x110>)
   10ae6:	f7ff fd33 	bl	10550 <LabGPIO::ReadBool()>
   10aea:	4603      	mov	r3, r0
   10aec:	f083 0301 	eor.w	r3, r3, #1
   10af0:	b2db      	uxtb	r3, r3
   10af2:	2b00      	cmp	r3, #0
   10af4:	d0a2      	beq.n	10a3c <main+0x24>
       {
           
            led3.toggle();
   10af6:	480d      	ldr	r0, [pc, #52]	; (10b2c <main+0x114>)
   10af8:	f7ff fdbc 	bl	10674 <LabGPIO::toggle()>
     if(button0.ReadBool()){
   10afc:	e79e      	b.n	10a3c <main+0x24>
   10afe:	bf00      	nop
   10b00:	00010a19 	.word	0x00010a19
   10b04:	00017688 	.word	0x00017688
   10b08:	000175a4 	.word	0x000175a4
   10b0c:	000175b0 	.word	0x000175b0
   10b10:	10000280 	.word	0x10000280
   10b14:	10000278 	.word	0x10000278
   10b18:	10000284 	.word	0x10000284
   10b1c:	1000027c 	.word	0x1000027c
   10b20:	10000270 	.word	0x10000270
   10b24:	10000274 	.word	0x10000274
   10b28:	10000268 	.word	0x10000268
   10b2c:	1000026c 	.word	0x1000026c

00010b30 <Status Wait<Wait(unsigned long long)::{lambda()#1}>(unsigned long long, Wait(unsigned long long)::{lambda()#1})>:
inline Status Wait(uint64_t timeout, F is_done)
   10b30:	e92d 4830 	stmdb	sp!, {r4, r5, fp, lr}
   10b34:	b088      	sub	sp, #32
   10b36:	4675      	mov	r5, lr
   10b38:	e9cd 0102 	strd	r0, r1, [sp, #8]
   10b3c:	f88d 2004 	strb.w	r2, [sp, #4]
   10b40:	462b      	mov	r3, r5
   10b42:	4619      	mov	r1, r3
   10b44:	4824      	ldr	r0, [pc, #144]	; (10bd8 <Status Wait<Wait(unsigned long long)::{lambda()#1}>(unsigned long long, Wait(unsigned long long)::{lambda()#1})+0xa8>)
   10b46:	f002 fad7 	bl	130f8 <__cyg_profile_func_enter>
  uint64_t timeout_time = 0;
   10b4a:	f04f 0300 	mov.w	r3, #0
   10b4e:	f04f 0400 	mov.w	r4, #0
   10b52:	e9cd 3406 	strd	r3, r4, [sp, #24]
  if (timeout == kMaxWait)
   10b56:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
   10b5a:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
   10b5e:	bf08      	it	eq
   10b60:	f1b3 3fff 	cmpeq.w	r3, #4294967295	; 0xffffffff
   10b64:	d106      	bne.n	10b74 <Status Wait<Wait(unsigned long long)::{lambda()#1}>(unsigned long long, Wait(unsigned long long)::{lambda()#1})+0x44>
    timeout_time = kMaxWait;
   10b66:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   10b6a:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   10b6e:	e9cd 3406 	strd	r3, r4, [sp, #24]
   10b72:	e00b      	b.n	10b8c <Status Wait<Wait(unsigned long long)::{lambda()#1}>(unsigned long long, Wait(unsigned long long)::{lambda()#1})+0x5c>
    timeout_time = Milliseconds() + timeout;
   10b74:	f7ff fe88 	bl	10888 <Milliseconds()>
   10b78:	460a      	mov	r2, r1
   10b7a:	4601      	mov	r1, r0
   10b7c:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
   10b80:	eb13 0b01 	adds.w	fp, r3, r1
   10b84:	eb44 0c02 	adc.w	ip, r4, r2
   10b88:	e9cd bc06 	strd	fp, ip, [sp, #24]
  Status status = Status::kTimedOut;
   10b8c:	2301      	movs	r3, #1
   10b8e:	9305      	str	r3, [sp, #20]
  while (Milliseconds() < timeout_time)
   10b90:	f7ff fe7a 	bl	10888 <Milliseconds()>
   10b94:	460a      	mov	r2, r1
   10b96:	4601      	mov	r1, r0
   10b98:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
   10b9c:	42a2      	cmp	r2, r4
   10b9e:	bf08      	it	eq
   10ba0:	4299      	cmpeq	r1, r3
   10ba2:	bf34      	ite	cc
   10ba4:	2301      	movcc	r3, #1
   10ba6:	2300      	movcs	r3, #0
   10ba8:	b2db      	uxtb	r3, r3
   10baa:	2b00      	cmp	r3, #0
   10bac:	d008      	beq.n	10bc0 <Status Wait<Wait(unsigned long long)::{lambda()#1}>(unsigned long long, Wait(unsigned long long)::{lambda()#1})+0x90>
    if (is_done())
   10bae:	ab01      	add	r3, sp, #4
   10bb0:	4618      	mov	r0, r3
   10bb2:	f7ff fe8b 	bl	108cc <Wait(unsigned long long)::{lambda()#1}::operator()() const>
   10bb6:	4603      	mov	r3, r0
   10bb8:	2b00      	cmp	r3, #0
   10bba:	d0e9      	beq.n	10b90 <Status Wait<Wait(unsigned long long)::{lambda()#1}>(unsigned long long, Wait(unsigned long long)::{lambda()#1})+0x60>
      status = Status::kSuccess;
   10bbc:	2300      	movs	r3, #0
   10bbe:	9305      	str	r3, [sp, #20]
  return status;
   10bc0:	9c05      	ldr	r4, [sp, #20]
   10bc2:	462b      	mov	r3, r5
   10bc4:	4619      	mov	r1, r3
   10bc6:	4804      	ldr	r0, [pc, #16]	; (10bd8 <Status Wait<Wait(unsigned long long)::{lambda()#1}>(unsigned long long, Wait(unsigned long long)::{lambda()#1})+0xa8>)
   10bc8:	f002 faaa 	bl	13120 <__cyg_profile_func_exit>
   10bcc:	4623      	mov	r3, r4
}
   10bce:	4618      	mov	r0, r3
   10bd0:	b008      	add	sp, #32
   10bd2:	e8bd 8830 	ldmia.w	sp!, {r4, r5, fp, pc}
   10bd6:	bf00      	nop
   10bd8:	00010b31 	.word	0x00010b31

00010bdc <__static_initialization_and_destruction_0(int, int)>:
  
 }
 void DB3(){
   
      
   10bdc:	b510      	push	{r4, lr}
   10bde:	b082      	sub	sp, #8
   10be0:	4674      	mov	r4, lr
   10be2:	9001      	str	r0, [sp, #4]
   10be4:	9100      	str	r1, [sp, #0]
   10be6:	4623      	mov	r3, r4
   10be8:	4619      	mov	r1, r3
   10bea:	481d      	ldr	r0, [pc, #116]	; (10c60 <__static_initialization_and_destruction_0(int, int)+0x84>)
   10bec:	f002 fa84 	bl	130f8 <__cyg_profile_func_enter>
   10bf0:	9b01      	ldr	r3, [sp, #4]
   10bf2:	2b01      	cmp	r3, #1
   10bf4:	d12c      	bne.n	10c50 <__static_initialization_and_destruction_0(int, int)+0x74>
   10bf6:	9b00      	ldr	r3, [sp, #0]
   10bf8:	f64f 72ff 	movw	r2, #65535	; 0xffff
   10bfc:	4293      	cmp	r3, r2
   10bfe:	d127      	bne.n	10c50 <__static_initialization_and_destruction_0(int, int)+0x74>
  LabGPIO button3(0, 29);
   10c00:	221d      	movs	r2, #29
   10c02:	2100      	movs	r1, #0
   10c04:	4817      	ldr	r0, [pc, #92]	; (10c64 <__static_initialization_and_destruction_0(int, int)+0x88>)
   10c06:	f7ff fbaf 	bl	10368 <LabGPIO::LabGPIO(unsigned char, unsigned char)>
  LabGPIO led3(1, 18);
   10c0a:	2212      	movs	r2, #18
   10c0c:	2101      	movs	r1, #1
   10c0e:	4816      	ldr	r0, [pc, #88]	; (10c68 <__static_initialization_and_destruction_0(int, int)+0x8c>)
   10c10:	f7ff fbaa 	bl	10368 <LabGPIO::LabGPIO(unsigned char, unsigned char)>
  LabGPIO button2(0, 30);
   10c14:	221e      	movs	r2, #30
   10c16:	2100      	movs	r1, #0
   10c18:	4814      	ldr	r0, [pc, #80]	; (10c6c <__static_initialization_and_destruction_0(int, int)+0x90>)
   10c1a:	f7ff fba5 	bl	10368 <LabGPIO::LabGPIO(unsigned char, unsigned char)>
  LabGPIO led2(1, 24);
   10c1e:	2218      	movs	r2, #24
   10c20:	2101      	movs	r1, #1
   10c22:	4813      	ldr	r0, [pc, #76]	; (10c70 <__static_initialization_and_destruction_0(int, int)+0x94>)
   10c24:	f7ff fba0 	bl	10368 <LabGPIO::LabGPIO(unsigned char, unsigned char)>
  LabGPIO button1(1, 15);
   10c28:	220f      	movs	r2, #15
   10c2a:	2101      	movs	r1, #1
   10c2c:	4811      	ldr	r0, [pc, #68]	; (10c74 <__static_initialization_and_destruction_0(int, int)+0x98>)
   10c2e:	f7ff fb9b 	bl	10368 <LabGPIO::LabGPIO(unsigned char, unsigned char)>
  LabGPIO led1(1, 26);
   10c32:	221a      	movs	r2, #26
   10c34:	2101      	movs	r1, #1
   10c36:	4810      	ldr	r0, [pc, #64]	; (10c78 <__static_initialization_and_destruction_0(int, int)+0x9c>)
   10c38:	f7ff fb96 	bl	10368 <LabGPIO::LabGPIO(unsigned char, unsigned char)>
  LabGPIO button0(1, 19);
   10c3c:	2213      	movs	r2, #19
   10c3e:	2101      	movs	r1, #1
   10c40:	480e      	ldr	r0, [pc, #56]	; (10c7c <__static_initialization_and_destruction_0(int, int)+0xa0>)
   10c42:	f7ff fb91 	bl	10368 <LabGPIO::LabGPIO(unsigned char, unsigned char)>
  LabGPIO led0(2, 3);
   10c46:	2203      	movs	r2, #3
   10c48:	2102      	movs	r1, #2
   10c4a:	480d      	ldr	r0, [pc, #52]	; (10c80 <__static_initialization_and_destruction_0(int, int)+0xa4>)
   10c4c:	f7ff fb8c 	bl	10368 <LabGPIO::LabGPIO(unsigned char, unsigned char)>
   10c50:	4623      	mov	r3, r4
   10c52:	4619      	mov	r1, r3
   10c54:	4802      	ldr	r0, [pc, #8]	; (10c60 <__static_initialization_and_destruction_0(int, int)+0x84>)
   10c56:	f002 fa63 	bl	13120 <__cyg_profile_func_exit>
   10c5a:	bf00      	nop
   10c5c:	b002      	add	sp, #8
   10c5e:	bd10      	pop	{r4, pc}
   10c60:	00010bdd 	.word	0x00010bdd
   10c64:	10000268 	.word	0x10000268
   10c68:	1000026c 	.word	0x1000026c
   10c6c:	10000270 	.word	0x10000270
   10c70:	10000274 	.word	0x10000274
   10c74:	10000278 	.word	0x10000278
   10c78:	1000027c 	.word	0x1000027c
   10c7c:	10000280 	.word	0x10000280
   10c80:	10000284 	.word	0x10000284

00010c84 <_GLOBAL__sub_I_button3>:
   10c84:	b510      	push	{r4, lr}
   10c86:	4674      	mov	r4, lr
   10c88:	4623      	mov	r3, r4
   10c8a:	4619      	mov	r1, r3
   10c8c:	4806      	ldr	r0, [pc, #24]	; (10ca8 <_GLOBAL__sub_I_button3+0x24>)
   10c8e:	f002 fa33 	bl	130f8 <__cyg_profile_func_enter>
   10c92:	f64f 71ff 	movw	r1, #65535	; 0xffff
   10c96:	2001      	movs	r0, #1
   10c98:	f7ff ffa0 	bl	10bdc <__static_initialization_and_destruction_0(int, int)>
   10c9c:	4623      	mov	r3, r4
   10c9e:	4619      	mov	r1, r3
   10ca0:	4801      	ldr	r0, [pc, #4]	; (10ca8 <_GLOBAL__sub_I_button3+0x24>)
   10ca2:	f002 fa3d 	bl	13120 <__cyg_profile_func_exit>
   10ca6:	bd10      	pop	{r4, pc}
   10ca8:	00010c85 	.word	0x00010c85

00010cac <debug::PrintBacktrace(bool, void*)>:
}

[[gnu::no_instrument_function]]
inline void PrintBacktrace(bool show_make_command = false,
                           void * final_address   = nullptr)
{
   10cac:	b500      	push	{lr}
   10cae:	b08b      	sub	sp, #44	; 0x2c
   10cb0:	4603      	mov	r3, r0
   10cb2:	9100      	str	r1, [sp, #0]
   10cb4:	f88d 3007 	strb.w	r3, [sp, #7]
  printf("Stack Depth = %zd\n", GetStackDepth());
   10cb8:	f002 fa54 	bl	13164 <GetStackDepth()>
   10cbc:	4603      	mov	r3, r0
   10cbe:	4619      	mov	r1, r3
   10cc0:	4831      	ldr	r0, [pc, #196]	; (10d88 <debug::PrintBacktrace(bool, void*)+0xdc>)
   10cc2:	f003 fc77 	bl	145b4 <printf>
  // stack_depth-1 to ignore PrintBacktrace()
  // PrintBacktrace shouldn't be ignored in profiling because it causes
  // the exit to still fire, which can result in a negative stack_depth
  void ** list_of_called_functions = GetStackTrace();
   10cc6:	f002 fa39 	bl	1313c <GetStackTrace()>
   10cca:	9007      	str	r0, [sp, #28]
  size_t stack_depth               = GetStackDepth();
   10ccc:	f002 fa4a 	bl	13164 <GetStackDepth()>
   10cd0:	9006      	str	r0, [sp, #24]
  // Ignore the last function as it is the Backtrace function
  for (size_t pos = 0; pos < stack_depth - 1; pos++)
   10cd2:	2300      	movs	r3, #0
   10cd4:	9309      	str	r3, [sp, #36]	; 0x24
   10cd6:	9b06      	ldr	r3, [sp, #24]
   10cd8:	3b01      	subs	r3, #1
   10cda:	9a09      	ldr	r2, [sp, #36]	; 0x24
   10cdc:	429a      	cmp	r2, r3
   10cde:	d20d      	bcs.n	10cfc <debug::PrintBacktrace(bool, void*)+0x50>
  {
    printf("  #%zu: 0x%p\n", pos, list_of_called_functions[pos]);
   10ce0:	9b09      	ldr	r3, [sp, #36]	; 0x24
   10ce2:	009b      	lsls	r3, r3, #2
   10ce4:	9a07      	ldr	r2, [sp, #28]
   10ce6:	4413      	add	r3, r2
   10ce8:	681b      	ldr	r3, [r3, #0]
   10cea:	461a      	mov	r2, r3
   10cec:	9909      	ldr	r1, [sp, #36]	; 0x24
   10cee:	4827      	ldr	r0, [pc, #156]	; (10d8c <debug::PrintBacktrace(bool, void*)+0xe0>)
   10cf0:	f003 fc60 	bl	145b4 <printf>
  for (size_t pos = 0; pos < stack_depth - 1; pos++)
   10cf4:	9b09      	ldr	r3, [sp, #36]	; 0x24
   10cf6:	3301      	adds	r3, #1
   10cf8:	9309      	str	r3, [sp, #36]	; 0x24
   10cfa:	e7ec      	b.n	10cd6 <debug::PrintBacktrace(bool, void*)+0x2a>
  }
  if (final_address != nullptr)
   10cfc:	9b00      	ldr	r3, [sp, #0]
   10cfe:	2b00      	cmp	r3, #0
   10d00:	d006      	beq.n	10d10 <debug::PrintBacktrace(bool, void*)+0x64>
  {
    printf("  #%zu: 0x%p\n", stack_depth - 1, final_address);
   10d02:	9b06      	ldr	r3, [sp, #24]
   10d04:	3b01      	subs	r3, #1
   10d06:	9a00      	ldr	r2, [sp, #0]
   10d08:	4619      	mov	r1, r3
   10d0a:	4820      	ldr	r0, [pc, #128]	; (10d8c <debug::PrintBacktrace(bool, void*)+0xe0>)
   10d0c:	f003 fc52 	bl	145b4 <printf>
  }
  if (show_make_command)
   10d10:	f89d 3007 	ldrb.w	r3, [sp, #7]
   10d14:	2b00      	cmp	r3, #0
   10d16:	d033      	beq.n	10d80 <debug::PrintBacktrace(bool, void*)+0xd4>
  {
    constexpr const char kBuildType[] =
   10d18:	4a1d      	ldr	r2, [pc, #116]	; (10d90 <debug::PrintBacktrace(bool, void*)+0xe4>)
   10d1a:	ab03      	add	r3, sp, #12
   10d1c:	ca07      	ldmia	r2, {r0, r1, r2}
   10d1e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#if defined(APPLICATION)
        "application";
#else
        "bootloader";
#endif
    puts("\nRun: the following command in your project directory");
   10d22:	481c      	ldr	r0, [pc, #112]	; (10d94 <debug::PrintBacktrace(bool, void*)+0xe8>)
   10d24:	f002 f9b8 	bl	13098 <puts>
    printf("\n  " SJ2_BOLD_WHITE "make stacktrace-%s TRACES=\"", kBuildType);
   10d28:	ab03      	add	r3, sp, #12
   10d2a:	4619      	mov	r1, r3
   10d2c:	481a      	ldr	r0, [pc, #104]	; (10d98 <debug::PrintBacktrace(bool, void*)+0xec>)
   10d2e:	f003 fc41 	bl	145b4 <printf>
    for (size_t pos = 0; pos < stack_depth - 1; pos++)
   10d32:	2300      	movs	r3, #0
   10d34:	9308      	str	r3, [sp, #32]
   10d36:	9b06      	ldr	r3, [sp, #24]
   10d38:	3b01      	subs	r3, #1
   10d3a:	9a08      	ldr	r2, [sp, #32]
   10d3c:	429a      	cmp	r2, r3
   10d3e:	d212      	bcs.n	10d66 <debug::PrintBacktrace(bool, void*)+0xba>
    {
      if (pos != 0)
   10d40:	9b08      	ldr	r3, [sp, #32]
   10d42:	2b00      	cmp	r3, #0
   10d44:	d002      	beq.n	10d4c <debug::PrintBacktrace(bool, void*)+0xa0>
      {
        putchar(' ');
   10d46:	2020      	movs	r0, #32
   10d48:	f002 f98a 	bl	13060 <putchar>
      }
      printf("0x%p", list_of_called_functions[pos]);
   10d4c:	9b08      	ldr	r3, [sp, #32]
   10d4e:	009b      	lsls	r3, r3, #2
   10d50:	9a07      	ldr	r2, [sp, #28]
   10d52:	4413      	add	r3, r2
   10d54:	681b      	ldr	r3, [r3, #0]
   10d56:	4619      	mov	r1, r3
   10d58:	4810      	ldr	r0, [pc, #64]	; (10d9c <debug::PrintBacktrace(bool, void*)+0xf0>)
   10d5a:	f003 fc2b 	bl	145b4 <printf>
    for (size_t pos = 0; pos < stack_depth - 1; pos++)
   10d5e:	9b08      	ldr	r3, [sp, #32]
   10d60:	3301      	adds	r3, #1
   10d62:	9308      	str	r3, [sp, #32]
   10d64:	e7e7      	b.n	10d36 <debug::PrintBacktrace(bool, void*)+0x8a>
    }
    if (final_address != nullptr)
   10d66:	9b00      	ldr	r3, [sp, #0]
   10d68:	2b00      	cmp	r3, #0
   10d6a:	d003      	beq.n	10d74 <debug::PrintBacktrace(bool, void*)+0xc8>
    {
      printf(" 0x%p", final_address);
   10d6c:	9900      	ldr	r1, [sp, #0]
   10d6e:	480c      	ldr	r0, [pc, #48]	; (10da0 <debug::PrintBacktrace(bool, void*)+0xf4>)
   10d70:	f003 fc20 	bl	145b4 <printf>
    }
    puts("\"\n" SJ2_COLOR_RESET);
   10d74:	480b      	ldr	r0, [pc, #44]	; (10da4 <debug::PrintBacktrace(bool, void*)+0xf8>)
   10d76:	f002 f98f 	bl	13098 <puts>
    puts(
   10d7a:	480b      	ldr	r0, [pc, #44]	; (10da8 <debug::PrintBacktrace(bool, void*)+0xfc>)
   10d7c:	f002 f98c 	bl	13098 <puts>
        "This will report the file and line number that led to this function "
        "being called.");
  }
}
   10d80:	bf00      	nop
   10d82:	b00b      	add	sp, #44	; 0x2c
   10d84:	f85d fb04 	ldr.w	pc, [sp], #4
   10d88:	00017694 	.word	0x00017694
   10d8c:	000176a8 	.word	0x000176a8
   10d90:	00017784 	.word	0x00017784
   10d94:	000176b8 	.word	0x000176b8
   10d98:	000176f0 	.word	0x000176f0
   10d9c:	00017718 	.word	0x00017718
   10da0:	00017720 	.word	0x00017720
   10da4:	00017728 	.word	0x00017728
   10da8:	00017730 	.word	0x00017730

00010dac <SetUptimeFunction(unsigned long long (*)())>:
{
   10dac:	b510      	push	{r4, lr}
   10dae:	b082      	sub	sp, #8
   10db0:	4674      	mov	r4, lr
   10db2:	9001      	str	r0, [sp, #4]
   10db4:	4623      	mov	r3, r4
   10db6:	4619      	mov	r1, r3
   10db8:	4806      	ldr	r0, [pc, #24]	; (10dd4 <SetUptimeFunction(unsigned long long (*)())+0x28>)
   10dba:	f002 f99d 	bl	130f8 <__cyg_profile_func_enter>
  Uptime = uptime_function;
   10dbe:	4a06      	ldr	r2, [pc, #24]	; (10dd8 <SetUptimeFunction(unsigned long long (*)())+0x2c>)
   10dc0:	9b01      	ldr	r3, [sp, #4]
   10dc2:	6013      	str	r3, [r2, #0]
   10dc4:	4623      	mov	r3, r4
   10dc6:	4619      	mov	r1, r3
   10dc8:	4802      	ldr	r0, [pc, #8]	; (10dd4 <SetUptimeFunction(unsigned long long (*)())+0x28>)
   10dca:	f002 f9a9 	bl	13120 <__cyg_profile_func_exit>
}
   10dce:	bf00      	nop
   10dd0:	b002      	add	sp, #8
   10dd2:	bd10      	pop	{r4, pc}
   10dd4:	00010dad 	.word	0x00010dad
   10dd8:	10000000 	.word	0x10000000

00010ddc <Lpc40xxSystemController::SetClockFrequency(unsigned char)>:

  inline static LPC_SC_TypeDef * system_controller = LPC_SC;

  constexpr Lpc40xxSystemController() {}

  uint32_t SetClockFrequency(uint8_t frequency_in_mhz) override
   10ddc:	b500      	push	{lr}
   10dde:	b085      	sub	sp, #20
   10de0:	9001      	str	r0, [sp, #4]
   10de2:	460b      	mov	r3, r1
   10de4:	f88d 3003 	strb.w	r3, [sp, #3]
  {
    uint32_t offset = 0;
   10de8:	2300      	movs	r3, #0
   10dea:	9303      	str	r3, [sp, #12]
    SelectOscillatorSource(OscillatorSource::kIrc);
   10dec:	2100      	movs	r1, #0
   10dee:	9801      	ldr	r0, [sp, #4]
   10df0:	f000 f8ce 	bl	10f90 <Lpc40xxSystemController::SelectOscillatorSource(Lpc40xxSystemController::OscillatorSource)>
    if (frequency_in_mhz > 12)
   10df4:	f89d 3003 	ldrb.w	r3, [sp, #3]
   10df8:	2b0c      	cmp	r3, #12
   10dfa:	d916      	bls.n	10e2a <Lpc40xxSystemController::SetClockFrequency(unsigned char)+0x4e>
    {
      offset = SetMainPll(PllInput::kIrc, frequency_in_mhz);
   10dfc:	f89d 3003 	ldrb.w	r3, [sp, #3]
   10e00:	b29b      	uxth	r3, r3
   10e02:	461a      	mov	r2, r3
   10e04:	210c      	movs	r1, #12
   10e06:	9801      	ldr	r0, [sp, #4]
   10e08:	f000 f9ac 	bl	11164 <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)>
   10e0c:	9003      	str	r0, [sp, #12]
      SelectMainClockSource(MainClockSource::kPllClock);
   10e0e:	f44f 7180 	mov.w	r1, #256	; 0x100
   10e12:	9801      	ldr	r0, [sp, #4]
   10e14:	f000 f8d6 	bl	10fc4 <Lpc40xxSystemController::SelectMainClockSource(Lpc40xxSystemController::MainClockSource)>
      speed_in_hertz = frequency_in_mhz * 1'000'000;
   10e18:	f89d 3003 	ldrb.w	r3, [sp, #3]
   10e1c:	4a10      	ldr	r2, [pc, #64]	; (10e60 <Lpc40xxSystemController::SetClockFrequency(unsigned char)+0x84>)
   10e1e:	fb02 f303 	mul.w	r3, r2, r3
   10e22:	461a      	mov	r2, r3
   10e24:	4b0f      	ldr	r3, [pc, #60]	; (10e64 <Lpc40xxSystemController::SetClockFrequency(unsigned char)+0x88>)
   10e26:	601a      	str	r2, [r3, #0]
   10e28:	e006      	b.n	10e38 <Lpc40xxSystemController::SetClockFrequency(unsigned char)+0x5c>
    }
    else
    {
      SelectMainClockSource(MainClockSource::kBaseClock);
   10e2a:	2100      	movs	r1, #0
   10e2c:	9801      	ldr	r0, [sp, #4]
   10e2e:	f000 f8c9 	bl	10fc4 <Lpc40xxSystemController::SelectMainClockSource(Lpc40xxSystemController::MainClockSource)>
      speed_in_hertz = kDefaultIRCFrequency;
   10e32:	4b0c      	ldr	r3, [pc, #48]	; (10e64 <Lpc40xxSystemController::SetClockFrequency(unsigned char)+0x88>)
   10e34:	4a0c      	ldr	r2, [pc, #48]	; (10e68 <Lpc40xxSystemController::SetClockFrequency(unsigned char)+0x8c>)
   10e36:	601a      	str	r2, [r3, #0]
    }
    SetCpuClockDivider(kDivideInputBy1);
   10e38:	2101      	movs	r1, #1
   10e3a:	9801      	ldr	r0, [sp, #4]
   10e3c:	f000 fa4a 	bl	112d4 <Lpc40xxSystemController::SetCpuClockDivider(unsigned char)>
    SetPeripheralClockDivider(kDivideInputBy1);
   10e40:	9b01      	ldr	r3, [sp, #4]
   10e42:	681b      	ldr	r3, [r3, #0]
   10e44:	3304      	adds	r3, #4
   10e46:	681b      	ldr	r3, [r3, #0]
   10e48:	2101      	movs	r1, #1
   10e4a:	9801      	ldr	r0, [sp, #4]
   10e4c:	4798      	blx	r3
    SetEmcClockDivider(EmcDivider::kSameSpeedAsCpu);
   10e4e:	2100      	movs	r1, #0
   10e50:	9801      	ldr	r0, [sp, #4]
   10e52:	f000 fa73 	bl	1133c <Lpc40xxSystemController::SetEmcClockDivider(Lpc40xxSystemController::EmcDivider)>
    return offset;
   10e56:	9b03      	ldr	r3, [sp, #12]
  }
   10e58:	4618      	mov	r0, r3
   10e5a:	b005      	add	sp, #20
   10e5c:	f85d fb04 	ldr.w	pc, [sp], #4
   10e60:	000f4240 	.word	0x000f4240
   10e64:	10000008 	.word	0x10000008
   10e68:	00b71b00 	.word	0x00b71b00

00010e6c <Lpc40xxSystemController::SetPeripheralClockDivider(unsigned char)>:

  void SetPeripheralClockDivider(uint8_t peripheral_divider) override
   10e6c:	b500      	push	{lr}
   10e6e:	b083      	sub	sp, #12
   10e70:	9001      	str	r0, [sp, #4]
   10e72:	460b      	mov	r3, r1
   10e74:	f88d 3003 	strb.w	r3, [sp, #3]
  {
    SJ2_ASSERT_FATAL(peripheral_divider <= 4, "Divider mustn't exceed 32");
   10e78:	f89d 3003 	ldrb.w	r3, [sp, #3]
   10e7c:	2b04      	cmp	r3, #4
   10e7e:	d90d      	bls.n	10e9c <Lpc40xxSystemController::SetPeripheralClockDivider(unsigned char)+0x30>
   10e80:	23ae      	movs	r3, #174	; 0xae
   10e82:	4a0b      	ldr	r2, [pc, #44]	; (10eb0 <Lpc40xxSystemController::SetPeripheralClockDivider(unsigned char)+0x44>)
   10e84:	490b      	ldr	r1, [pc, #44]	; (10eb4 <Lpc40xxSystemController::SetPeripheralClockDivider(unsigned char)+0x48>)
   10e86:	480c      	ldr	r0, [pc, #48]	; (10eb8 <Lpc40xxSystemController::SetPeripheralClockDivider(unsigned char)+0x4c>)
   10e88:	f003 fb94 	bl	145b4 <printf>
   10e8c:	480b      	ldr	r0, [pc, #44]	; (10ebc <Lpc40xxSystemController::SetPeripheralClockDivider(unsigned char)+0x50>)
   10e8e:	f002 f903 	bl	13098 <puts>
   10e92:	2100      	movs	r1, #0
   10e94:	2001      	movs	r0, #1
   10e96:	f7ff ff09 	bl	10cac <debug::PrintBacktrace(bool, void*)>
   10e9a:	e7fe      	b.n	10e9a <Lpc40xxSystemController::SetPeripheralClockDivider(unsigned char)+0x2e>
    system_controller->PCLKSEL = peripheral_divider;
   10e9c:	4b08      	ldr	r3, [pc, #32]	; (10ec0 <Lpc40xxSystemController::SetPeripheralClockDivider(unsigned char)+0x54>)
   10e9e:	681b      	ldr	r3, [r3, #0]
   10ea0:	f89d 2003 	ldrb.w	r2, [sp, #3]
   10ea4:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
  }
   10ea8:	bf00      	nop
   10eaa:	b003      	add	sp, #12
   10eac:	f85d fb04 	ldr.w	pc, [sp], #4
   10eb0:	00017e1c 	.word	0x00017e1c
   10eb4:	00017c44 	.word	0x00017c44
   10eb8:	00017790 	.word	0x00017790
   10ebc:	00017830 	.word	0x00017830
   10ec0:	10000004 	.word	0x10000004

00010ec4 <Lpc40xxSystemController::GetPeripheralClockDivider() const>:

  uint32_t GetPeripheralClockDivider() const override
   10ec4:	b082      	sub	sp, #8
   10ec6:	9001      	str	r0, [sp, #4]
  {
#if defined(HOST_TEST)
    return 1;
#else
    return system_controller->PCLKSEL;
   10ec8:	4b03      	ldr	r3, [pc, #12]	; (10ed8 <Lpc40xxSystemController::GetPeripheralClockDivider() const+0x14>)
   10eca:	681b      	ldr	r3, [r3, #0]
   10ecc:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
#endif
  }
   10ed0:	4618      	mov	r0, r3
   10ed2:	b002      	add	sp, #8
   10ed4:	4770      	bx	lr
   10ed6:	bf00      	nop
   10ed8:	10000004 	.word	0x10000004

00010edc <Lpc40xxSystemController::GetSystemFrequency() const>:

  uint32_t GetSystemFrequency() const override
   10edc:	b082      	sub	sp, #8
   10ede:	9001      	str	r0, [sp, #4]
  {
#if defined(HOST_TEST)
    return config::kSystemClockRate;
#else
    return speed_in_hertz;
   10ee0:	4b02      	ldr	r3, [pc, #8]	; (10eec <Lpc40xxSystemController::GetSystemFrequency() const+0x10>)
   10ee2:	681b      	ldr	r3, [r3, #0]
#endif
  }
   10ee4:	4618      	mov	r0, r3
   10ee6:	b002      	add	sp, #8
   10ee8:	4770      	bx	lr
   10eea:	bf00      	nop
   10eec:	10000008 	.word	0x10000008

00010ef0 <Lpc40xxSystemController::GetPeripheralFrequency() const>:

  uint32_t GetPeripheralFrequency() const override
   10ef0:	b500      	push	{lr}
   10ef2:	b085      	sub	sp, #20
   10ef4:	9001      	str	r0, [sp, #4]
  {
    uint32_t peripheral_clock_divider = GetPeripheralClockDivider();
   10ef6:	9b01      	ldr	r3, [sp, #4]
   10ef8:	681b      	ldr	r3, [r3, #0]
   10efa:	3308      	adds	r3, #8
   10efc:	681b      	ldr	r3, [r3, #0]
   10efe:	9801      	ldr	r0, [sp, #4]
   10f00:	4798      	blx	r3
   10f02:	9002      	str	r0, [sp, #8]
    uint32_t result = 0;  // return 0 if peripheral_clock_divider == 0
   10f04:	2300      	movs	r3, #0
   10f06:	9303      	str	r3, [sp, #12]
    if (peripheral_clock_divider != 0)
   10f08:	9b02      	ldr	r3, [sp, #8]
   10f0a:	2b00      	cmp	r3, #0
   10f0c:	d00a      	beq.n	10f24 <Lpc40xxSystemController::GetPeripheralFrequency() const+0x34>
    {
      result = GetSystemFrequency() / peripheral_clock_divider;
   10f0e:	9b01      	ldr	r3, [sp, #4]
   10f10:	681b      	ldr	r3, [r3, #0]
   10f12:	330c      	adds	r3, #12
   10f14:	681b      	ldr	r3, [r3, #0]
   10f16:	9801      	ldr	r0, [sp, #4]
   10f18:	4798      	blx	r3
   10f1a:	4602      	mov	r2, r0
   10f1c:	9b02      	ldr	r3, [sp, #8]
   10f1e:	fbb2 f3f3 	udiv	r3, r2, r3
   10f22:	9303      	str	r3, [sp, #12]
    }
    return result;
   10f24:	9b03      	ldr	r3, [sp, #12]
  }
   10f26:	4618      	mov	r0, r3
   10f28:	b005      	add	sp, #20
   10f2a:	f85d fb04 	ldr.w	pc, [sp], #4
   10f2e:	Address 0x0000000000010f2e is out of bounds.


00010f30 <Lpc40xxSystemController::PowerUpPeripheral(SystemControllerInterface::PeripheralID const&)>:

  void PowerUpPeripheral(const PeripheralID & peripheral_select) override
   10f30:	b084      	sub	sp, #16
   10f32:	9001      	str	r0, [sp, #4]
   10f34:	9100      	str	r1, [sp, #0]
  {
    auto power_connection_with_enabled_peripheral =
        system_controller->PCONP | (1 << peripheral_select.device_id);
   10f36:	4b09      	ldr	r3, [pc, #36]	; (10f5c <Lpc40xxSystemController::PowerUpPeripheral(SystemControllerInterface::PeripheralID const&)+0x2c>)
   10f38:	681b      	ldr	r3, [r3, #0]
   10f3a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
   10f3e:	9a00      	ldr	r2, [sp, #0]
   10f40:	6812      	ldr	r2, [r2, #0]
   10f42:	2101      	movs	r1, #1
   10f44:	fa01 f202 	lsl.w	r2, r1, r2
   10f48:	4313      	orrs	r3, r2
   10f4a:	9303      	str	r3, [sp, #12]

    system_controller->PCONP = power_connection_with_enabled_peripheral;
   10f4c:	4b03      	ldr	r3, [pc, #12]	; (10f5c <Lpc40xxSystemController::PowerUpPeripheral(SystemControllerInterface::PeripheralID const&)+0x2c>)
   10f4e:	681b      	ldr	r3, [r3, #0]
   10f50:	9a03      	ldr	r2, [sp, #12]
   10f52:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  }
   10f56:	bf00      	nop
   10f58:	b004      	add	sp, #16
   10f5a:	4770      	bx	lr
   10f5c:	10000004 	.word	0x10000004

00010f60 <Lpc40xxSystemController::PowerDownPeripheral(SystemControllerInterface::PeripheralID const&)>:
  void PowerDownPeripheral(const PeripheralID & peripheral_select) override
   10f60:	b084      	sub	sp, #16
   10f62:	9001      	str	r0, [sp, #4]
   10f64:	9100      	str	r1, [sp, #0]
  {
    auto power_connection_without_enabled_peripheral =
        system_controller->PCONP & (1 << peripheral_select.device_id);
   10f66:	4b09      	ldr	r3, [pc, #36]	; (10f8c <Lpc40xxSystemController::PowerDownPeripheral(SystemControllerInterface::PeripheralID const&)+0x2c>)
   10f68:	681b      	ldr	r3, [r3, #0]
   10f6a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
   10f6e:	9a00      	ldr	r2, [sp, #0]
   10f70:	6812      	ldr	r2, [r2, #0]
   10f72:	2101      	movs	r1, #1
   10f74:	fa01 f202 	lsl.w	r2, r1, r2
   10f78:	4013      	ands	r3, r2
   10f7a:	9303      	str	r3, [sp, #12]

    system_controller->PCONP = power_connection_without_enabled_peripheral;
   10f7c:	4b03      	ldr	r3, [pc, #12]	; (10f8c <Lpc40xxSystemController::PowerDownPeripheral(SystemControllerInterface::PeripheralID const&)+0x2c>)
   10f7e:	681b      	ldr	r3, [r3, #0]
   10f80:	9a03      	ldr	r2, [sp, #12]
   10f82:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  }
   10f86:	bf00      	nop
   10f88:	b004      	add	sp, #16
   10f8a:	4770      	bx	lr
   10f8c:	10000004 	.word	0x10000004

00010f90 <Lpc40xxSystemController::SelectOscillatorSource(Lpc40xxSystemController::OscillatorSource)>:

 private:
  void SelectOscillatorSource(OscillatorSource source)
   10f90:	b084      	sub	sp, #16
   10f92:	9001      	str	r0, [sp, #4]
   10f94:	460b      	mov	r3, r1
   10f96:	f8ad 3002 	strh.w	r3, [sp, #2]
  {
    uint32_t source_bit = static_cast<uint32_t>(source);
   10f9a:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   10f9e:	9303      	str	r3, [sp, #12]
    system_controller->CLKSRCSEL =
        (system_controller->CLKSRCSEL & ~(kOscillatorSelect)) | source_bit;
   10fa0:	4b07      	ldr	r3, [pc, #28]	; (10fc0 <Lpc40xxSystemController::SelectOscillatorSource(Lpc40xxSystemController::OscillatorSource)+0x30>)
   10fa2:	681b      	ldr	r3, [r3, #0]
   10fa4:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
   10fa8:	f023 0101 	bic.w	r1, r3, #1
    system_controller->CLKSRCSEL =
   10fac:	4b04      	ldr	r3, [pc, #16]	; (10fc0 <Lpc40xxSystemController::SelectOscillatorSource(Lpc40xxSystemController::OscillatorSource)+0x30>)
   10fae:	681b      	ldr	r3, [r3, #0]
        (system_controller->CLKSRCSEL & ~(kOscillatorSelect)) | source_bit;
   10fb0:	9a03      	ldr	r2, [sp, #12]
   10fb2:	430a      	orrs	r2, r1
    system_controller->CLKSRCSEL =
   10fb4:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
  }
   10fb8:	bf00      	nop
   10fba:	b004      	add	sp, #16
   10fbc:	4770      	bx	lr
   10fbe:	bf00      	nop
   10fc0:	10000004 	.word	0x10000004

00010fc4 <Lpc40xxSystemController::SelectMainClockSource(Lpc40xxSystemController::MainClockSource)>:

  void SelectMainClockSource(MainClockSource source)
   10fc4:	b082      	sub	sp, #8
   10fc6:	9001      	str	r0, [sp, #4]
   10fc8:	460b      	mov	r3, r1
   10fca:	f8ad 3002 	strh.w	r3, [sp, #2]
  {
    system_controller->CCLKSEL =
        (system_controller->CCLKSEL & ~(kBaseClockSelect)) |
   10fce:	4b08      	ldr	r3, [pc, #32]	; (10ff0 <Lpc40xxSystemController::SelectMainClockSource(Lpc40xxSystemController::MainClockSource)+0x2c>)
   10fd0:	681b      	ldr	r3, [r3, #0]
   10fd2:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   10fd6:	f423 7180 	bic.w	r1, r3, #256	; 0x100
        static_cast<uint32_t>(source);
   10fda:	f8bd 2002 	ldrh.w	r2, [sp, #2]
    system_controller->CCLKSEL =
   10fde:	4b04      	ldr	r3, [pc, #16]	; (10ff0 <Lpc40xxSystemController::SelectMainClockSource(Lpc40xxSystemController::MainClockSource)+0x2c>)
   10fe0:	681b      	ldr	r3, [r3, #0]
        (system_controller->CCLKSEL & ~(kBaseClockSelect)) |
   10fe2:	430a      	orrs	r2, r1
    system_controller->CCLKSEL =
   10fe4:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
  }
   10fe8:	bf00      	nop
   10fea:	b002      	add	sp, #8
   10fec:	4770      	bx	lr
   10fee:	bf00      	nop
   10ff0:	10000004 	.word	0x10000004

00010ff4 <Lpc40xxSystemController::SelectUsbClockSource(Lpc40xxSystemController::UsbSource)>:

  void SelectUsbClockSource(UsbSource usb_clock)
   10ff4:	b082      	sub	sp, #8
   10ff6:	9001      	str	r0, [sp, #4]
   10ff8:	460b      	mov	r3, r1
   10ffa:	f8ad 3002 	strh.w	r3, [sp, #2]
  {
    system_controller->USBCLKSEL =
        (system_controller->USBCLKSEL & ~(kUsbClockSource)) |
   10ffe:	4b08      	ldr	r3, [pc, #32]	; (11020 <Lpc40xxSystemController::SelectUsbClockSource(Lpc40xxSystemController::UsbSource)+0x2c>)
   11000:	681b      	ldr	r3, [r3, #0]
   11002:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
   11006:	f423 7140 	bic.w	r1, r3, #768	; 0x300
        static_cast<uint32_t>(usb_clock);
   1100a:	f8bd 2002 	ldrh.w	r2, [sp, #2]
    system_controller->USBCLKSEL =
   1100e:	4b04      	ldr	r3, [pc, #16]	; (11020 <Lpc40xxSystemController::SelectUsbClockSource(Lpc40xxSystemController::UsbSource)+0x2c>)
   11010:	681b      	ldr	r3, [r3, #0]
        (system_controller->USBCLKSEL & ~(kUsbClockSource)) |
   11012:	430a      	orrs	r2, r1
    system_controller->USBCLKSEL =
   11014:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
  }
   11018:	bf00      	nop
   1101a:	b002      	add	sp, #8
   1101c:	4770      	bx	lr
   1101e:	bf00      	nop
   11020:	10000004 	.word	0x10000004

00011024 <Lpc40xxSystemController::SelectSpifiClockSource(Lpc40xxSystemController::SpifiSource)>:

  void SelectSpifiClockSource(SpifiSource spifi_clock)
   11024:	b082      	sub	sp, #8
   11026:	9001      	str	r0, [sp, #4]
   11028:	460b      	mov	r3, r1
   1102a:	f8ad 3002 	strh.w	r3, [sp, #2]
  {
    system_controller->SPIFISEL =
        (system_controller->SPIFISEL & ~(kSpifiClockSource)) |
   1102e:	4b08      	ldr	r3, [pc, #32]	; (11050 <Lpc40xxSystemController::SelectSpifiClockSource(Lpc40xxSystemController::SpifiSource)+0x2c>)
   11030:	681b      	ldr	r3, [r3, #0]
   11032:	f8d3 31b4 	ldr.w	r3, [r3, #436]	; 0x1b4
   11036:	f423 7140 	bic.w	r1, r3, #768	; 0x300
        static_cast<uint32_t>(spifi_clock);
   1103a:	f8bd 2002 	ldrh.w	r2, [sp, #2]
    system_controller->SPIFISEL =
   1103e:	4b04      	ldr	r3, [pc, #16]	; (11050 <Lpc40xxSystemController::SelectSpifiClockSource(Lpc40xxSystemController::SpifiSource)+0x2c>)
   11040:	681b      	ldr	r3, [r3, #0]
        (system_controller->SPIFISEL & ~(kSpifiClockSource)) |
   11042:	430a      	orrs	r2, r1
    system_controller->SPIFISEL =
   11044:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
  }
   11048:	bf00      	nop
   1104a:	b002      	add	sp, #8
   1104c:	4770      	bx	lr
   1104e:	bf00      	nop
   11050:	10000004 	.word	0x10000004

00011054 <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)>:

  uint32_t CalculatePll(PllInput input_frequency, uint16_t desired_speed_in_mhz)
   11054:	b500      	push	{lr}
   11056:	b087      	sub	sp, #28
   11058:	9001      	str	r0, [sp, #4]
   1105a:	460b      	mov	r3, r1
   1105c:	f8ad 3002 	strh.w	r3, [sp, #2]
   11060:	4613      	mov	r3, r2
   11062:	f8ad 3000 	strh.w	r3, [sp]
  {
    SJ2_ASSERT_FATAL(desired_speed_in_mhz < 384 && desired_speed_in_mhz > 12,
   11066:	f8bd 3000 	ldrh.w	r3, [sp]
   1106a:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
   1106e:	d203      	bcs.n	11078 <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)+0x24>
   11070:	f8bd 3000 	ldrh.w	r3, [sp]
   11074:	2b0c      	cmp	r3, #12
   11076:	d80d      	bhi.n	11094 <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)+0x40>
   11078:	23ff      	movs	r3, #255	; 0xff
   1107a:	4a34      	ldr	r2, [pc, #208]	; (1114c <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)+0xf8>)
   1107c:	4934      	ldr	r1, [pc, #208]	; (11150 <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)+0xfc>)
   1107e:	4835      	ldr	r0, [pc, #212]	; (11154 <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)+0x100>)
   11080:	f003 fa98 	bl	145b4 <printf>
   11084:	4834      	ldr	r0, [pc, #208]	; (11158 <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)+0x104>)
   11086:	f002 f807 	bl	13098 <puts>
   1108a:	2100      	movs	r1, #0
   1108c:	2001      	movs	r0, #1
   1108e:	f7ff fe0d 	bl	10cac <debug::PrintBacktrace(bool, void*)>
   11092:	e7fe      	b.n	11092 <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)+0x3e>
                     "Frequency must be lower than 384 MHz"
                     "and greater than or equal to 12 MHz");
    bool calculating = true;
   11094:	2301      	movs	r3, #1
   11096:	f88d 3017 	strb.w	r3, [sp, #23]
    uint32_t multiplier_value;
    if ((desired_speed_in_mhz % static_cast<uint16_t>(input_frequency)) >= 1)
   1109a:	f8bd 3000 	ldrh.w	r3, [sp]
   1109e:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   110a2:	fbb3 f1f2 	udiv	r1, r3, r2
   110a6:	fb02 f201 	mul.w	r2, r2, r1
   110aa:	1a9b      	subs	r3, r3, r2
   110ac:	b29b      	uxth	r3, r3
   110ae:	2b00      	cmp	r3, #0
   110b0:	d009      	beq.n	110c6 <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)+0x72>
    {
      multiplier_value = static_cast<uint32_t>(
          (desired_speed_in_mhz / static_cast<uint16_t>(input_frequency)) + 1);
   110b2:	f8bd 2000 	ldrh.w	r2, [sp]
   110b6:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   110ba:	fbb2 f3f3 	udiv	r3, r2, r3
   110be:	b29b      	uxth	r3, r3
   110c0:	3301      	adds	r3, #1
      multiplier_value = static_cast<uint32_t>(
   110c2:	9304      	str	r3, [sp, #16]
   110c4:	e007      	b.n	110d6 <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)+0x82>
    }
    else
    {
      multiplier_value = static_cast<uint32_t>(
          desired_speed_in_mhz / static_cast<uint16_t>(input_frequency));
   110c6:	f8bd 2000 	ldrh.w	r2, [sp]
   110ca:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   110ce:	fbb2 f3f3 	udiv	r3, r2, r3
   110d2:	b29b      	uxth	r3, r3
      multiplier_value = static_cast<uint32_t>(
   110d4:	9304      	str	r3, [sp, #16]
    }
    uint16_t divider_value = 1;
   110d6:	2301      	movs	r3, #1
   110d8:	f8ad 300e 	strh.w	r3, [sp, #14]
    while (calculating)
   110dc:	f89d 3017 	ldrb.w	r3, [sp, #23]
   110e0:	2b00      	cmp	r3, #0
   110e2:	d02e      	beq.n	11142 <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)+0xee>
    {
      uint16_t current_controlled_oscillator_frequency;
      current_controlled_oscillator_frequency = static_cast<uint16_t>(
   110e4:	9b04      	ldr	r3, [sp, #16]
   110e6:	b29b      	uxth	r3, r3
   110e8:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   110ec:	fb12 f303 	smulbb	r3, r2, r3
   110f0:	b29b      	uxth	r3, r3
   110f2:	f8bd 200e 	ldrh.w	r2, [sp, #14]
   110f6:	fb12 f303 	smulbb	r3, r2, r3
   110fa:	b29b      	uxth	r3, r3
   110fc:	005b      	lsls	r3, r3, #1
   110fe:	f8ad 300c 	strh.w	r3, [sp, #12]
          (static_cast<uint16_t>(input_frequency) * multiplier_value * 2) *
          divider_value);
      if (current_controlled_oscillator_frequency >= 156)
   11102:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   11106:	2b9b      	cmp	r3, #155	; 0x9b
   11108:	d903      	bls.n	11112 <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)+0xbe>
      {
        calculating = false;
   1110a:	2300      	movs	r3, #0
   1110c:	f88d 3017 	strb.w	r3, [sp, #23]
   11110:	e7e4      	b.n	110dc <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)+0x88>
      }
      else
      {
        divider_value = static_cast<uint16_t>(divider_value * 2);
   11112:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   11116:	005b      	lsls	r3, r3, #1
   11118:	f8ad 300e 	strh.w	r3, [sp, #14]
        SJ2_ASSERT_FATAL(divider_value < 8,
   1111c:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   11120:	2b07      	cmp	r3, #7
   11122:	d9db      	bls.n	110dc <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)+0x88>
   11124:	f240 131b 	movw	r3, #283	; 0x11b
   11128:	4a08      	ldr	r2, [pc, #32]	; (1114c <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)+0xf8>)
   1112a:	490c      	ldr	r1, [pc, #48]	; (1115c <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)+0x108>)
   1112c:	480c      	ldr	r0, [pc, #48]	; (11160 <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)+0x10c>)
   1112e:	f003 fa41 	bl	145b4 <printf>
   11132:	4809      	ldr	r0, [pc, #36]	; (11158 <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)+0x104>)
   11134:	f001 ffb0 	bl	13098 <puts>
   11138:	2100      	movs	r1, #0
   1113a:	2001      	movs	r0, #1
   1113c:	f7ff fdb6 	bl	10cac <debug::PrintBacktrace(bool, void*)>
   11140:	e7fe      	b.n	11140 <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)+0xec>
                         "PLL divider value went out of bounds");
      }
    }

    return multiplier_value;
   11142:	9b04      	ldr	r3, [sp, #16]
  }
   11144:	4618      	mov	r0, r3
   11146:	b007      	add	sp, #28
   11148:	f85d fb04 	ldr.w	pc, [sp], #4
   1114c:	00017ec4 	.word	0x00017ec4
   11150:	00017c5c 	.word	0x00017c5c
   11154:	00017848 	.word	0x00017848
   11158:	00017830 	.word	0x00017830
   1115c:	00017c74 	.word	0x00017c74
   11160:	00017938 	.word	0x00017938

00011164 <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)>:

  uint32_t SetMainPll(PllInput input_frequency, uint16_t desired_speed_in_mhz)
   11164:	b510      	push	{r4, lr}
   11166:	b08a      	sub	sp, #40	; 0x28
   11168:	9001      	str	r0, [sp, #4]
   1116a:	460b      	mov	r3, r1
   1116c:	f8ad 3002 	strh.w	r3, [sp, #2]
   11170:	4613      	mov	r3, r2
   11172:	f8ad 3000 	strh.w	r3, [sp]
  {
    uint16_t divider_value = 1;
   11176:	2301      	movs	r3, #1
   11178:	f8ad 301a 	strh.w	r3, [sp, #26]
    uint64_t timeout_time  = Milliseconds() + kDefaultTimeout;
   1117c:	f7ff fb84 	bl	10888 <Milliseconds()>
   11180:	460a      	mov	r2, r1
   11182:	4601      	mov	r1, r0
   11184:	f511 737a 	adds.w	r3, r1, #1000	; 0x3e8
   11188:	f142 0400 	adc.w	r4, r2, #0
   1118c:	e9cd 3404 	strd	r3, r4, [sp, #16]
    uint64_t current_time  = Milliseconds();
   11190:	f7ff fb7a 	bl	10888 <Milliseconds()>
   11194:	e9cd 0108 	strd	r0, r1, [sp, #32]
    uint32_t multiplier_value =
        CalculatePll(input_frequency, desired_speed_in_mhz);
   11198:	f8bd 2000 	ldrh.w	r2, [sp]
   1119c:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   111a0:	4619      	mov	r1, r3
   111a2:	9801      	ldr	r0, [sp, #4]
   111a4:	f7ff ff56 	bl	11054 <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)>
   111a8:	9003      	str	r0, [sp, #12]
    uint32_t actual_speed =
        static_cast<uint32_t>(input_frequency) * multiplier_value;
   111aa:	f8bd 2002 	ldrh.w	r2, [sp, #2]
    uint32_t actual_speed =
   111ae:	9b03      	ldr	r3, [sp, #12]
   111b0:	fb02 f303 	mul.w	r3, r2, r3
   111b4:	9307      	str	r3, [sp, #28]
    // TO DO: use registers to retreive values
    SelectOscillatorSource(OscillatorSource::kIrc);
   111b6:	2100      	movs	r1, #0
   111b8:	9801      	ldr	r0, [sp, #4]
   111ba:	f7ff fee9 	bl	10f90 <Lpc40xxSystemController::SelectOscillatorSource(Lpc40xxSystemController::OscillatorSource)>
    SelectMainClockSource(MainClockSource::kBaseClock);
   111be:	2100      	movs	r1, #0
   111c0:	9801      	ldr	r0, [sp, #4]
   111c2:	f7ff feff 	bl	10fc4 <Lpc40xxSystemController::SelectMainClockSource(Lpc40xxSystemController::MainClockSource)>
    SelectUsbClockSource(UsbSource::kBaseClock);
   111c6:	2100      	movs	r1, #0
   111c8:	9801      	ldr	r0, [sp, #4]
   111ca:	f7ff ff13 	bl	10ff4 <Lpc40xxSystemController::SelectUsbClockSource(Lpc40xxSystemController::UsbSource)>
    SelectSpifiClockSource(SpifiSource::kBaseClock);
   111ce:	2100      	movs	r1, #0
   111d0:	9801      	ldr	r0, [sp, #4]
   111d2:	f7ff ff27 	bl	11024 <Lpc40xxSystemController::SelectSpifiClockSource(Lpc40xxSystemController::SpifiSource)>
    // must subtract 1 from multiplier value as specified in datasheet
    system_controller->PLL0CFG =
        (system_controller->PLL0CFG & ~kClearPllMultiplier) |
   111d6:	4b3a      	ldr	r3, [pc, #232]	; (112c0 <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0x15c>)
   111d8:	681b      	ldr	r3, [r3, #0]
   111da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   111de:	f023 011f 	bic.w	r1, r3, #31
        (multiplier_value - 1);
   111e2:	9b03      	ldr	r3, [sp, #12]
   111e4:	1e5a      	subs	r2, r3, #1
    system_controller->PLL0CFG =
   111e6:	4b36      	ldr	r3, [pc, #216]	; (112c0 <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0x15c>)
   111e8:	681b      	ldr	r3, [r3, #0]
        (system_controller->PLL0CFG & ~kClearPllMultiplier) |
   111ea:	430a      	orrs	r2, r1
    system_controller->PLL0CFG =
   111ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    system_controller->PLL0CFG =
        (system_controller->PLL0CFG & ~kClearPllDivider) | (divider_value << 5);
   111f0:	4b33      	ldr	r3, [pc, #204]	; (112c0 <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0x15c>)
   111f2:	681b      	ldr	r3, [r3, #0]
   111f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   111f8:	f023 0260 	bic.w	r2, r3, #96	; 0x60
   111fc:	f8bd 301a 	ldrh.w	r3, [sp, #26]
   11200:	015b      	lsls	r3, r3, #5
   11202:	4619      	mov	r1, r3
    system_controller->PLL0CFG =
   11204:	4b2e      	ldr	r3, [pc, #184]	; (112c0 <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0x15c>)
   11206:	681b      	ldr	r3, [r3, #0]
        (system_controller->PLL0CFG & ~kClearPllDivider) | (divider_value << 5);
   11208:	430a      	orrs	r2, r1
    system_controller->PLL0CFG =
   1120a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    system_controller->PLL0CON |= kEnablePll;
   1120e:	4b2c      	ldr	r3, [pc, #176]	; (112c0 <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0x15c>)
   11210:	681b      	ldr	r3, [r3, #0]
   11212:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
   11216:	4b2a      	ldr	r3, [pc, #168]	; (112c0 <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0x15c>)
   11218:	681b      	ldr	r3, [r3, #0]
   1121a:	f042 0201 	orr.w	r2, r2, #1
   1121e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    // nessecary feed sequence to ensure the changes are intentional
    system_controller->PLL0FEED = 0xAA;
   11222:	4b27      	ldr	r3, [pc, #156]	; (112c0 <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0x15c>)
   11224:	681b      	ldr	r3, [r3, #0]
   11226:	22aa      	movs	r2, #170	; 0xaa
   11228:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    system_controller->PLL0FEED = 0x55;
   1122c:	4b24      	ldr	r3, [pc, #144]	; (112c0 <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0x15c>)
   1122e:	681b      	ldr	r3, [r3, #0]
   11230:	2255      	movs	r2, #85	; 0x55
   11232:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    while (!(system_controller->PLL0STAT >> kPlock & 1) &&
   11236:	4b22      	ldr	r3, [pc, #136]	; (112c0 <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0x15c>)
   11238:	681b      	ldr	r3, [r3, #0]
   1123a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   1123e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
   11242:	2b00      	cmp	r3, #0
   11244:	d109      	bne.n	1125a <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0xf6>
   11246:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
   1124a:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
   1124e:	42a2      	cmp	r2, r4
   11250:	bf08      	it	eq
   11252:	4299      	cmpeq	r1, r3
   11254:	d201      	bcs.n	1125a <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0xf6>
   11256:	2301      	movs	r3, #1
   11258:	e000      	b.n	1125c <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0xf8>
   1125a:	2300      	movs	r3, #0
   1125c:	2b00      	cmp	r3, #0
   1125e:	d004      	beq.n	1126a <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0x106>
           (current_time < timeout_time))
    {
      current_time = Milliseconds();
   11260:	f7ff fb12 	bl	10888 <Milliseconds()>
   11264:	e9cd 0108 	strd	r0, r1, [sp, #32]
    while (!(system_controller->PLL0STAT >> kPlock & 1) &&
   11268:	e7e5      	b.n	11236 <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0xd2>
    }
    if (!(system_controller->PLL0STAT >> kPlock & 1) &&
   1126a:	4b15      	ldr	r3, [pc, #84]	; (112c0 <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0x15c>)
   1126c:	681b      	ldr	r3, [r3, #0]
   1126e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   11272:	f403 6380 	and.w	r3, r3, #1024	; 0x400
   11276:	2b00      	cmp	r3, #0
   11278:	d109      	bne.n	1128e <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0x12a>
   1127a:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
   1127e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
   11282:	42a2      	cmp	r2, r4
   11284:	bf08      	it	eq
   11286:	4299      	cmpeq	r1, r3
   11288:	d301      	bcc.n	1128e <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0x12a>
   1128a:	2301      	movs	r3, #1
   1128c:	e000      	b.n	11290 <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0x12c>
   1128e:	2300      	movs	r3, #0
   11290:	2b00      	cmp	r3, #0
   11292:	d00e      	beq.n	112b2 <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0x14e>
        (current_time >= timeout_time))
    {
      SJ2_ASSERT_FATAL(false,
   11294:	f240 1343 	movw	r3, #323	; 0x143
   11298:	4a0a      	ldr	r2, [pc, #40]	; (112c4 <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0x160>)
   1129a:	490b      	ldr	r1, [pc, #44]	; (112c8 <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0x164>)
   1129c:	480b      	ldr	r0, [pc, #44]	; (112cc <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0x168>)
   1129e:	f003 f989 	bl	145b4 <printf>
   112a2:	480b      	ldr	r0, [pc, #44]	; (112d0 <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0x16c>)
   112a4:	f001 fef8 	bl	13098 <puts>
   112a8:	2100      	movs	r1, #0
   112aa:	2001      	movs	r0, #1
   112ac:	f7ff fcfe 	bl	10cac <debug::PrintBacktrace(bool, void*)>
   112b0:	e7fe      	b.n	112b0 <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0x14c>
                       "PLL lock could not be established before timeout");
      actual_speed = kDefaultIRCFrequency;
    }
    return (actual_speed - desired_speed_in_mhz);
   112b2:	f8bd 3000 	ldrh.w	r3, [sp]
   112b6:	9a07      	ldr	r2, [sp, #28]
   112b8:	1ad3      	subs	r3, r2, r3
  }
   112ba:	4618      	mov	r0, r3
   112bc:	b00a      	add	sp, #40	; 0x28
   112be:	bd10      	pop	{r4, pc}
   112c0:	10000004 	.word	0x10000004
   112c4:	00017e68 	.word	0x00017e68
   112c8:	00017c8c 	.word	0x00017c8c
   112cc:	000179e0 	.word	0x000179e0
   112d0:	00017830 	.word	0x00017830

000112d4 <Lpc40xxSystemController::SetCpuClockDivider(unsigned char)>:
                       "PLL lock could not be established before timeout");
    }
    return (actual_speed - desired_speed_in_mhz);
  }

  void SetCpuClockDivider(uint8_t cpu_divider)
   112d4:	b500      	push	{lr}
   112d6:	b083      	sub	sp, #12
   112d8:	9001      	str	r0, [sp, #4]
   112da:	460b      	mov	r3, r1
   112dc:	f88d 3003 	strb.w	r3, [sp, #3]
  {
    SJ2_ASSERT_FATAL(cpu_divider < 32, "Divider mustn't exceed 32");
   112e0:	f89d 3003 	ldrb.w	r3, [sp, #3]
   112e4:	2b1f      	cmp	r3, #31
   112e6:	d90e      	bls.n	11306 <Lpc40xxSystemController::SetCpuClockDivider(unsigned char)+0x32>
   112e8:	f240 136f 	movw	r3, #367	; 0x16f
   112ec:	4a0e      	ldr	r2, [pc, #56]	; (11328 <Lpc40xxSystemController::SetCpuClockDivider(unsigned char)+0x54>)
   112ee:	490f      	ldr	r1, [pc, #60]	; (1132c <Lpc40xxSystemController::SetCpuClockDivider(unsigned char)+0x58>)
   112f0:	480f      	ldr	r0, [pc, #60]	; (11330 <Lpc40xxSystemController::SetCpuClockDivider(unsigned char)+0x5c>)
   112f2:	f003 f95f 	bl	145b4 <printf>
   112f6:	480f      	ldr	r0, [pc, #60]	; (11334 <Lpc40xxSystemController::SetCpuClockDivider(unsigned char)+0x60>)
   112f8:	f001 fece 	bl	13098 <puts>
   112fc:	2100      	movs	r1, #0
   112fe:	2001      	movs	r0, #1
   11300:	f7ff fcd4 	bl	10cac <debug::PrintBacktrace(bool, void*)>
   11304:	e7fe      	b.n	11304 <Lpc40xxSystemController::SetCpuClockDivider(unsigned char)+0x30>
    system_controller->CCLKSEL =
        (system_controller->CCLKSEL & ~kClearCpuDivider) | cpu_divider;
   11306:	4b0c      	ldr	r3, [pc, #48]	; (11338 <Lpc40xxSystemController::SetCpuClockDivider(unsigned char)+0x64>)
   11308:	681b      	ldr	r3, [r3, #0]
   1130a:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   1130e:	f023 011f 	bic.w	r1, r3, #31
   11312:	f89d 2003 	ldrb.w	r2, [sp, #3]
    system_controller->CCLKSEL =
   11316:	4b08      	ldr	r3, [pc, #32]	; (11338 <Lpc40xxSystemController::SetCpuClockDivider(unsigned char)+0x64>)
   11318:	681b      	ldr	r3, [r3, #0]
        (system_controller->CCLKSEL & ~kClearCpuDivider) | cpu_divider;
   1131a:	430a      	orrs	r2, r1
    system_controller->CCLKSEL =
   1131c:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
  }
   11320:	bf00      	nop
   11322:	b003      	add	sp, #12
   11324:	f85d fb04 	ldr.w	pc, [sp], #4
   11328:	00017f20 	.word	0x00017f20
   1132c:	00017ca4 	.word	0x00017ca4
   11330:	00017a88 	.word	0x00017a88
   11334:	00017830 	.word	0x00017830
   11338:	10000004 	.word	0x10000004

0001133c <Lpc40xxSystemController::SetEmcClockDivider(Lpc40xxSystemController::EmcDivider)>:

  void SetEmcClockDivider(EmcDivider emc_divider)
   1133c:	b082      	sub	sp, #8
   1133e:	9001      	str	r0, [sp, #4]
   11340:	460b      	mov	r3, r1
   11342:	f88d 3003 	strb.w	r3, [sp, #3]
  {
    system_controller->EMCCLKSEL =
        (system_controller->EMCCLKSEL & ~kClearEmcDivider) |
   11346:	4b08      	ldr	r3, [pc, #32]	; (11368 <Lpc40xxSystemController::SetEmcClockDivider(Lpc40xxSystemController::EmcDivider)+0x2c>)
   11348:	681b      	ldr	r3, [r3, #0]
   1134a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   1134e:	f023 0101 	bic.w	r1, r3, #1
        static_cast<uint8_t>(emc_divider);
   11352:	f89d 2003 	ldrb.w	r2, [sp, #3]
    system_controller->EMCCLKSEL =
   11356:	4b04      	ldr	r3, [pc, #16]	; (11368 <Lpc40xxSystemController::SetEmcClockDivider(Lpc40xxSystemController::EmcDivider)+0x2c>)
   11358:	681b      	ldr	r3, [r3, #0]
        (system_controller->EMCCLKSEL & ~kClearEmcDivider) |
   1135a:	430a      	orrs	r2, r1
    system_controller->EMCCLKSEL =
   1135c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }
   11360:	bf00      	nop
   11362:	b002      	add	sp, #8
   11364:	4770      	bx	lr
   11366:	bf00      	nop
   11368:	10000004 	.word	0x10000004

0001136c <SystemTimer::DisableTimer()>:
  /// system_timer_isr defaults to nullptr. The actual SystemTickHandler should
  /// check if the isr is set to nullptr, and if it is, turn off the timer, if
  /// set a proper function then execute it.
  inline static IsrPointer system_timer_isr = nullptr;
  /// WARNING: Doing so will most likely disable FreeRTOS
  static void DisableTimer()
   1136c:	b510      	push	{r4, lr}
   1136e:	4674      	mov	r4, lr
   11370:	4623      	mov	r3, r4
   11372:	4619      	mov	r1, r3
   11374:	480a      	ldr	r0, [pc, #40]	; (113a0 <SystemTimer::DisableTimer()+0x34>)
   11376:	f001 febf 	bl	130f8 <__cyg_profile_func_enter>
  {
    sys_tick->LOAD = 0;
   1137a:	4b0a      	ldr	r3, [pc, #40]	; (113a4 <SystemTimer::DisableTimer()+0x38>)
   1137c:	681b      	ldr	r3, [r3, #0]
   1137e:	2200      	movs	r2, #0
   11380:	605a      	str	r2, [r3, #4]
    sys_tick->VAL  = 0;
   11382:	4b08      	ldr	r3, [pc, #32]	; (113a4 <SystemTimer::DisableTimer()+0x38>)
   11384:	681b      	ldr	r3, [r3, #0]
   11386:	2200      	movs	r2, #0
   11388:	609a      	str	r2, [r3, #8]
    sys_tick->CTRL = 0;
   1138a:	4b06      	ldr	r3, [pc, #24]	; (113a4 <SystemTimer::DisableTimer()+0x38>)
   1138c:	681b      	ldr	r3, [r3, #0]
   1138e:	2200      	movs	r2, #0
   11390:	601a      	str	r2, [r3, #0]
   11392:	4623      	mov	r3, r4
   11394:	4619      	mov	r1, r3
   11396:	4802      	ldr	r0, [pc, #8]	; (113a0 <SystemTimer::DisableTimer()+0x34>)
   11398:	f001 fec2 	bl	13120 <__cyg_profile_func_exit>
  }
   1139c:	bf00      	nop
   1139e:	bd10      	pop	{r4, pc}
   113a0:	0001136d 	.word	0x0001136d
   113a4:	1000000c 	.word	0x1000000c

000113a8 <SystemTimer::SystemTimerHandler()>:
  static void SystemTimerHandler()
   113a8:	b510      	push	{r4, lr}
   113aa:	4674      	mov	r4, lr
   113ac:	4623      	mov	r3, r4
   113ae:	4619      	mov	r1, r3
   113b0:	4808      	ldr	r0, [pc, #32]	; (113d4 <SystemTimer::SystemTimerHandler()+0x2c>)
   113b2:	f001 fea1 	bl	130f8 <__cyg_profile_func_enter>
  {
    // This assumes that SysTickHandler is called every millisecond.
    // Changing that frequency will distort the milliseconds time.
    if (system_timer_isr != nullptr)
   113b6:	4b08      	ldr	r3, [pc, #32]	; (113d8 <SystemTimer::SystemTimerHandler()+0x30>)
   113b8:	681b      	ldr	r3, [r3, #0]
   113ba:	2b00      	cmp	r3, #0
   113bc:	d002      	beq.n	113c4 <SystemTimer::SystemTimerHandler()+0x1c>
    {
      system_timer_isr();
   113be:	4b06      	ldr	r3, [pc, #24]	; (113d8 <SystemTimer::SystemTimerHandler()+0x30>)
   113c0:	681b      	ldr	r3, [r3, #0]
   113c2:	4798      	blx	r3
   113c4:	4623      	mov	r3, r4
   113c6:	4619      	mov	r1, r3
   113c8:	4802      	ldr	r0, [pc, #8]	; (113d4 <SystemTimer::SystemTimerHandler()+0x2c>)
   113ca:	f001 fea9 	bl	13120 <__cyg_profile_func_exit>
    }
  }
   113ce:	bf00      	nop
   113d0:	bd10      	pop	{r4, pc}
   113d2:	bf00      	nop
   113d4:	000113a9 	.word	0x000113a9
   113d8:	10000288 	.word	0x10000288

000113dc <SystemTimer::SetIsrFunction(void (*)())>:
  constexpr SystemTimer() {}
  void SetIsrFunction(IsrPointer isr) override
   113dc:	b510      	push	{r4, lr}
   113de:	b082      	sub	sp, #8
   113e0:	4674      	mov	r4, lr
   113e2:	9001      	str	r0, [sp, #4]
   113e4:	9100      	str	r1, [sp, #0]
   113e6:	4623      	mov	r3, r4
   113e8:	4619      	mov	r1, r3
   113ea:	4807      	ldr	r0, [pc, #28]	; (11408 <SystemTimer::SetIsrFunction(void (*)())+0x2c>)
   113ec:	f001 fe84 	bl	130f8 <__cyg_profile_func_enter>
  {
    system_timer_isr = isr;
   113f0:	4a06      	ldr	r2, [pc, #24]	; (1140c <SystemTimer::SetIsrFunction(void (*)())+0x30>)
   113f2:	9b00      	ldr	r3, [sp, #0]
   113f4:	6013      	str	r3, [r2, #0]
   113f6:	4623      	mov	r3, r4
   113f8:	4619      	mov	r1, r3
   113fa:	4803      	ldr	r0, [pc, #12]	; (11408 <SystemTimer::SetIsrFunction(void (*)())+0x2c>)
   113fc:	f001 fe90 	bl	13120 <__cyg_profile_func_exit>
  }
   11400:	bf00      	nop
   11402:	b002      	add	sp, #8
   11404:	bd10      	pop	{r4, pc}
   11406:	bf00      	nop
   11408:	000113dd 	.word	0x000113dd
   1140c:	10000288 	.word	0x10000288

00011410 <SystemTimer::StartTimer()>:
  bool StartTimer() override
   11410:	b530      	push	{r4, r5, lr}
   11412:	b085      	sub	sp, #20
   11414:	4675      	mov	r5, lr
   11416:	9001      	str	r0, [sp, #4]
   11418:	462b      	mov	r3, r5
   1141a:	4619      	mov	r1, r3
   1141c:	4820      	ldr	r0, [pc, #128]	; (114a0 <SystemTimer::StartTimer()+0x90>)
   1141e:	f001 fe6b 	bl	130f8 <__cyg_profile_func_enter>
  {
    bool successful = false;
   11422:	2300      	movs	r3, #0
   11424:	f88d 300f 	strb.w	r3, [sp, #15]
    if (sys_tick->LOAD != 0)
   11428:	4b1e      	ldr	r3, [pc, #120]	; (114a4 <SystemTimer::StartTimer()+0x94>)
   1142a:	681b      	ldr	r3, [r3, #0]
   1142c:	685b      	ldr	r3, [r3, #4]
   1142e:	2b00      	cmp	r3, #0
   11430:	bf14      	ite	ne
   11432:	2301      	movne	r3, #1
   11434:	2300      	moveq	r3, #0
   11436:	b2db      	uxtb	r3, r3
   11438:	2b00      	cmp	r3, #0
   1143a:	d01e      	beq.n	1147a <SystemTimer::StartTimer()+0x6a>
    {
      sys_tick->VAL = 0;
   1143c:	4b19      	ldr	r3, [pc, #100]	; (114a4 <SystemTimer::StartTimer()+0x94>)
   1143e:	681b      	ldr	r3, [r3, #0]
   11440:	2200      	movs	r2, #0
   11442:	609a      	str	r2, [r3, #8]
      sys_tick->CTRL |= (1 << ControlBitMap::kTickInterupt);
   11444:	4b17      	ldr	r3, [pc, #92]	; (114a4 <SystemTimer::StartTimer()+0x94>)
   11446:	681b      	ldr	r3, [r3, #0]
   11448:	681a      	ldr	r2, [r3, #0]
   1144a:	4b16      	ldr	r3, [pc, #88]	; (114a4 <SystemTimer::StartTimer()+0x94>)
   1144c:	681b      	ldr	r3, [r3, #0]
   1144e:	f042 0202 	orr.w	r2, r2, #2
   11452:	601a      	str	r2, [r3, #0]
      sys_tick->CTRL |= (1 << ControlBitMap::kEnableCounter);
   11454:	4b13      	ldr	r3, [pc, #76]	; (114a4 <SystemTimer::StartTimer()+0x94>)
   11456:	681b      	ldr	r3, [r3, #0]
   11458:	681a      	ldr	r2, [r3, #0]
   1145a:	4b12      	ldr	r3, [pc, #72]	; (114a4 <SystemTimer::StartTimer()+0x94>)
   1145c:	681b      	ldr	r3, [r3, #0]
   1145e:	f042 0201 	orr.w	r2, r2, #1
   11462:	601a      	str	r2, [r3, #0]
      sys_tick->CTRL |= (1 << ControlBitMap::kClkSource);
   11464:	4b0f      	ldr	r3, [pc, #60]	; (114a4 <SystemTimer::StartTimer()+0x94>)
   11466:	681b      	ldr	r3, [r3, #0]
   11468:	681a      	ldr	r2, [r3, #0]
   1146a:	4b0e      	ldr	r3, [pc, #56]	; (114a4 <SystemTimer::StartTimer()+0x94>)
   1146c:	681b      	ldr	r3, [r3, #0]
   1146e:	f042 0204 	orr.w	r2, r2, #4
   11472:	601a      	str	r2, [r3, #0]
      successful = true;
   11474:	2301      	movs	r3, #1
   11476:	f88d 300f 	strb.w	r3, [sp, #15]
    }
    RegisterIsr(SysTick_IRQn, SystemTimerHandler);
   1147a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1147e:	2201      	movs	r2, #1
   11480:	4909      	ldr	r1, [pc, #36]	; (114a8 <SystemTimer::StartTimer()+0x98>)
   11482:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   11486:	f001 fd0f 	bl	12ea8 <RegisterIsr(IRQn, void (*)(), bool, long)>
    return successful;
   1148a:	f89d 400f 	ldrb.w	r4, [sp, #15]
   1148e:	462b      	mov	r3, r5
   11490:	4619      	mov	r1, r3
   11492:	4803      	ldr	r0, [pc, #12]	; (114a0 <SystemTimer::StartTimer()+0x90>)
   11494:	f001 fe44 	bl	13120 <__cyg_profile_func_exit>
   11498:	4623      	mov	r3, r4
  }
   1149a:	4618      	mov	r0, r3
   1149c:	b005      	add	sp, #20
   1149e:	bd30      	pop	{r4, r5, pc}
   114a0:	00011411 	.word	0x00011411
   114a4:	1000000c 	.word	0x1000000c
   114a8:	000113a9 	.word	0x000113a9

000114ac <SystemTimer::SetTickFrequency(unsigned long)>:
  ///          remainder will be returned.
  ///          If the freqency supplied is less then 2Hz, the function will
  ///          return without changing any hardware.
  ///          If the reload value exceeds the SysTick_LOAD_RELOAD_Msk, the
  ///          returned value is the SysTick_LOAD_RELOAD_Msk.
  uint32_t SetTickFrequency(uint32_t frequency) override
   114ac:	b530      	push	{r4, r5, lr}
   114ae:	b085      	sub	sp, #20
   114b0:	4675      	mov	r5, lr
   114b2:	9001      	str	r0, [sp, #4]
   114b4:	9100      	str	r1, [sp, #0]
   114b6:	462b      	mov	r3, r5
   114b8:	4619      	mov	r1, r3
   114ba:	481f      	ldr	r0, [pc, #124]	; (11538 <SystemTimer::SetTickFrequency(unsigned long)+0x8c>)
   114bc:	f001 fe1c 	bl	130f8 <__cyg_profile_func_enter>
  {
    if (frequency <= 1)
   114c0:	9b00      	ldr	r3, [sp, #0]
   114c2:	2b01      	cmp	r3, #1
   114c4:	d801      	bhi.n	114ca <SystemTimer::SetTickFrequency(unsigned long)+0x1e>
    {
      return 0;
   114c6:	2400      	movs	r4, #0
   114c8:	e02d      	b.n	11526 <SystemTimer::SetTickFrequency(unsigned long)+0x7a>
    }
    uint32_t reload_value = (GetSystemFrequency() / frequency) - 1;
   114ca:	9b01      	ldr	r3, [sp, #4]
   114cc:	1d1a      	adds	r2, r3, #4
   114ce:	9b01      	ldr	r3, [sp, #4]
   114d0:	685b      	ldr	r3, [r3, #4]
   114d2:	330c      	adds	r3, #12
   114d4:	681b      	ldr	r3, [r3, #0]
   114d6:	4610      	mov	r0, r2
   114d8:	4798      	blx	r3
   114da:	4602      	mov	r2, r0
   114dc:	9b00      	ldr	r3, [sp, #0]
   114de:	fbb2 f3f3 	udiv	r3, r2, r3
   114e2:	3b01      	subs	r3, #1
   114e4:	9303      	str	r3, [sp, #12]
    int remainder         = (GetSystemFrequency() % frequency);
   114e6:	9b01      	ldr	r3, [sp, #4]
   114e8:	1d1a      	adds	r2, r3, #4
   114ea:	9b01      	ldr	r3, [sp, #4]
   114ec:	685b      	ldr	r3, [r3, #4]
   114ee:	330c      	adds	r3, #12
   114f0:	681b      	ldr	r3, [r3, #0]
   114f2:	4610      	mov	r0, r2
   114f4:	4798      	blx	r3
   114f6:	4603      	mov	r3, r0
   114f8:	9a00      	ldr	r2, [sp, #0]
   114fa:	fbb3 f2f2 	udiv	r2, r3, r2
   114fe:	9900      	ldr	r1, [sp, #0]
   11500:	fb01 f202 	mul.w	r2, r1, r2
   11504:	1a9b      	subs	r3, r3, r2
   11506:	9302      	str	r3, [sp, #8]
    if (reload_value > SysTick_LOAD_RELOAD_Msk)
   11508:	9b03      	ldr	r3, [sp, #12]
   1150a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
   1150e:	d305      	bcc.n	1151c <SystemTimer::SetTickFrequency(unsigned long)+0x70>
    {
      reload_value = SysTick_LOAD_RELOAD_Msk;
   11510:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
   11514:	9303      	str	r3, [sp, #12]
      remainder    = SysTick_LOAD_RELOAD_Msk;
   11516:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
   1151a:	9302      	str	r3, [sp, #8]
    }
    sys_tick->LOAD = reload_value;
   1151c:	4b07      	ldr	r3, [pc, #28]	; (1153c <SystemTimer::SetTickFrequency(unsigned long)+0x90>)
   1151e:	681b      	ldr	r3, [r3, #0]
   11520:	9a03      	ldr	r2, [sp, #12]
   11522:	605a      	str	r2, [r3, #4]
    return remainder;
   11524:	9c02      	ldr	r4, [sp, #8]
   11526:	462b      	mov	r3, r5
   11528:	4619      	mov	r1, r3
   1152a:	4803      	ldr	r0, [pc, #12]	; (11538 <SystemTimer::SetTickFrequency(unsigned long)+0x8c>)
   1152c:	f001 fdf8 	bl	13120 <__cyg_profile_func_exit>
   11530:	4623      	mov	r3, r4
  }
   11532:	4618      	mov	r0, r3
   11534:	b005      	add	sp, #20
   11536:	bd30      	pop	{r4, r5, pc}
   11538:	000114ad 	.word	0x000114ad
   1153c:	1000000c 	.word	0x1000000c

00011540 <Pin::SetPinFunction(unsigned char)>:
  }
  constexpr Pin(uint8_t port_number, uint8_t pin_number)
      : port_(port_number), pin_(pin_number)
  {
  }
  void SetPinFunction(uint8_t function) override
   11540:	b5f0      	push	{r4, r5, r6, r7, lr}
   11542:	b085      	sub	sp, #20
   11544:	4677      	mov	r7, lr
   11546:	9003      	str	r0, [sp, #12]
   11548:	460b      	mov	r3, r1
   1154a:	f88d 300b 	strb.w	r3, [sp, #11]
   1154e:	463b      	mov	r3, r7
   11550:	4619      	mov	r1, r3
   11552:	4817      	ldr	r0, [pc, #92]	; (115b0 <Pin::SetPinFunction(unsigned char)+0x70>)
   11554:	f001 fdd0 	bl	130f8 <__cyg_profile_func_enter>
  {
    pin_map->_register[port_][pin_] =
        BitPlace(pin_map->_register[port_][pin_], PinBitMap::kFunction,
   11558:	4b16      	ldr	r3, [pc, #88]	; (115b4 <Pin::SetPinFunction(unsigned char)+0x74>)
   1155a:	681b      	ldr	r3, [r3, #0]
   1155c:	9a03      	ldr	r2, [sp, #12]
   1155e:	7912      	ldrb	r2, [r2, #4]
   11560:	4610      	mov	r0, r2
   11562:	9a03      	ldr	r2, [sp, #12]
   11564:	7952      	ldrb	r2, [r2, #5]
   11566:	4611      	mov	r1, r2
   11568:	0142      	lsls	r2, r0, #5
   1156a:	440a      	add	r2, r1
   1156c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
                 function & 0b111, 3);
   11570:	f89d 300b 	ldrb.w	r3, [sp, #11]
        BitPlace(pin_map->_register[port_][pin_], PinBitMap::kFunction,
   11574:	f003 0207 	and.w	r2, r3, #7
    pin_map->_register[port_][pin_] =
   11578:	4b0e      	ldr	r3, [pc, #56]	; (115b4 <Pin::SetPinFunction(unsigned char)+0x74>)
   1157a:	681c      	ldr	r4, [r3, #0]
   1157c:	9b03      	ldr	r3, [sp, #12]
   1157e:	791b      	ldrb	r3, [r3, #4]
   11580:	461e      	mov	r6, r3
   11582:	9b03      	ldr	r3, [sp, #12]
   11584:	795b      	ldrb	r3, [r3, #5]
   11586:	461d      	mov	r5, r3
        BitPlace(pin_map->_register[port_][pin_], PinBitMap::kFunction,
   11588:	2303      	movs	r3, #3
   1158a:	9300      	str	r3, [sp, #0]
   1158c:	4613      	mov	r3, r2
   1158e:	2200      	movs	r2, #0
   11590:	9803      	ldr	r0, [sp, #12]
   11592:	f000 fa67 	bl	11a64 <Pin::BitPlace(unsigned long, unsigned long, unsigned long, unsigned long)>
   11596:	4602      	mov	r2, r0
    pin_map->_register[port_][pin_] =
   11598:	0173      	lsls	r3, r6, #5
   1159a:	442b      	add	r3, r5
   1159c:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
   115a0:	463b      	mov	r3, r7
   115a2:	4619      	mov	r1, r3
   115a4:	4802      	ldr	r0, [pc, #8]	; (115b0 <Pin::SetPinFunction(unsigned char)+0x70>)
   115a6:	f001 fdbb 	bl	13120 <__cyg_profile_func_exit>
  }
   115aa:	bf00      	nop
   115ac:	b005      	add	sp, #20
   115ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
   115b0:	00011541 	.word	0x00011541
   115b4:	10000010 	.word	0x10000010

000115b8 <Pin::SetMode(PinInterface::Mode)>:
  void SetMode(PinInterface::Mode mode) override
   115b8:	b5f0      	push	{r4, r5, r6, r7, lr}
   115ba:	b087      	sub	sp, #28
   115bc:	4677      	mov	r7, lr
   115be:	9003      	str	r0, [sp, #12]
   115c0:	460b      	mov	r3, r1
   115c2:	f88d 300b 	strb.w	r3, [sp, #11]
   115c6:	463b      	mov	r3, r7
   115c8:	4619      	mov	r1, r3
   115ca:	4819      	ldr	r0, [pc, #100]	; (11630 <Pin::SetMode(PinInterface::Mode)+0x78>)
   115cc:	f001 fd94 	bl	130f8 <__cyg_profile_func_enter>
  {
    uint8_t ui_mode                 = static_cast<uint8_t>(mode);
   115d0:	f89d 300b 	ldrb.w	r3, [sp, #11]
   115d4:	f88d 3017 	strb.w	r3, [sp, #23]
    pin_map->_register[port_][pin_] = BitPlace(
   115d8:	4b16      	ldr	r3, [pc, #88]	; (11634 <Pin::SetMode(PinInterface::Mode)+0x7c>)
   115da:	681b      	ldr	r3, [r3, #0]
        pin_map->_register[port_][pin_], PinBitMap::kMode, ui_mode & 0b11, 2);
   115dc:	9a03      	ldr	r2, [sp, #12]
   115de:	7912      	ldrb	r2, [r2, #4]
   115e0:	4610      	mov	r0, r2
   115e2:	9a03      	ldr	r2, [sp, #12]
   115e4:	7952      	ldrb	r2, [r2, #5]
   115e6:	4611      	mov	r1, r2
    pin_map->_register[port_][pin_] = BitPlace(
   115e8:	0142      	lsls	r2, r0, #5
   115ea:	440a      	add	r2, r1
   115ec:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
        pin_map->_register[port_][pin_], PinBitMap::kMode, ui_mode & 0b11, 2);
   115f0:	f89d 3017 	ldrb.w	r3, [sp, #23]
    pin_map->_register[port_][pin_] = BitPlace(
   115f4:	f003 0203 	and.w	r2, r3, #3
   115f8:	4b0e      	ldr	r3, [pc, #56]	; (11634 <Pin::SetMode(PinInterface::Mode)+0x7c>)
   115fa:	681c      	ldr	r4, [r3, #0]
   115fc:	9b03      	ldr	r3, [sp, #12]
   115fe:	791b      	ldrb	r3, [r3, #4]
   11600:	461e      	mov	r6, r3
   11602:	9b03      	ldr	r3, [sp, #12]
   11604:	795b      	ldrb	r3, [r3, #5]
   11606:	461d      	mov	r5, r3
   11608:	2302      	movs	r3, #2
   1160a:	9300      	str	r3, [sp, #0]
   1160c:	4613      	mov	r3, r2
   1160e:	2203      	movs	r2, #3
   11610:	9803      	ldr	r0, [sp, #12]
   11612:	f000 fa27 	bl	11a64 <Pin::BitPlace(unsigned long, unsigned long, unsigned long, unsigned long)>
   11616:	4602      	mov	r2, r0
   11618:	0173      	lsls	r3, r6, #5
   1161a:	442b      	add	r3, r5
   1161c:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
   11620:	463b      	mov	r3, r7
   11622:	4619      	mov	r1, r3
   11624:	4802      	ldr	r0, [pc, #8]	; (11630 <Pin::SetMode(PinInterface::Mode)+0x78>)
   11626:	f001 fd7b 	bl	13120 <__cyg_profile_func_exit>
  }
   1162a:	bf00      	nop
   1162c:	b007      	add	sp, #28
   1162e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11630:	000115b9 	.word	0x000115b9
   11634:	10000010 	.word	0x10000010

00011638 <Pin::EnableHysteresis(bool)>:
  void EnableHysteresis(bool enable_hysteresis = true) override
   11638:	b5f0      	push	{r4, r5, r6, r7, lr}
   1163a:	b085      	sub	sp, #20
   1163c:	4677      	mov	r7, lr
   1163e:	9003      	str	r0, [sp, #12]
   11640:	460b      	mov	r3, r1
   11642:	f88d 300b 	strb.w	r3, [sp, #11]
   11646:	463b      	mov	r3, r7
   11648:	4619      	mov	r1, r3
   1164a:	4816      	ldr	r0, [pc, #88]	; (116a4 <Pin::EnableHysteresis(bool)+0x6c>)
   1164c:	f001 fd54 	bl	130f8 <__cyg_profile_func_enter>
  {
    pin_map->_register[port_][pin_] =
        BitPlace(pin_map->_register[port_][pin_], PinBitMap::kHysteresis,
   11650:	4b15      	ldr	r3, [pc, #84]	; (116a8 <Pin::EnableHysteresis(bool)+0x70>)
   11652:	681b      	ldr	r3, [r3, #0]
   11654:	9a03      	ldr	r2, [sp, #12]
   11656:	7912      	ldrb	r2, [r2, #4]
   11658:	4610      	mov	r0, r2
   1165a:	9a03      	ldr	r2, [sp, #12]
   1165c:	7952      	ldrb	r2, [r2, #5]
   1165e:	4611      	mov	r1, r2
   11660:	0142      	lsls	r2, r0, #5
   11662:	440a      	add	r2, r1
   11664:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   11668:	f89d 200b 	ldrb.w	r2, [sp, #11]
    pin_map->_register[port_][pin_] =
   1166c:	4b0e      	ldr	r3, [pc, #56]	; (116a8 <Pin::EnableHysteresis(bool)+0x70>)
   1166e:	681c      	ldr	r4, [r3, #0]
   11670:	9b03      	ldr	r3, [sp, #12]
   11672:	791b      	ldrb	r3, [r3, #4]
   11674:	461e      	mov	r6, r3
   11676:	9b03      	ldr	r3, [sp, #12]
   11678:	795b      	ldrb	r3, [r3, #5]
   1167a:	461d      	mov	r5, r3
        BitPlace(pin_map->_register[port_][pin_], PinBitMap::kHysteresis,
   1167c:	2301      	movs	r3, #1
   1167e:	9300      	str	r3, [sp, #0]
   11680:	4613      	mov	r3, r2
   11682:	2205      	movs	r2, #5
   11684:	9803      	ldr	r0, [sp, #12]
   11686:	f000 f9ed 	bl	11a64 <Pin::BitPlace(unsigned long, unsigned long, unsigned long, unsigned long)>
   1168a:	4602      	mov	r2, r0
    pin_map->_register[port_][pin_] =
   1168c:	0173      	lsls	r3, r6, #5
   1168e:	442b      	add	r3, r5
   11690:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
   11694:	463b      	mov	r3, r7
   11696:	4619      	mov	r1, r3
   11698:	4802      	ldr	r0, [pc, #8]	; (116a4 <Pin::EnableHysteresis(bool)+0x6c>)
   1169a:	f001 fd41 	bl	13120 <__cyg_profile_func_exit>
                 enable_hysteresis, 1);
  }
   1169e:	bf00      	nop
   116a0:	b005      	add	sp, #20
   116a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   116a4:	00011639 	.word	0x00011639
   116a8:	10000010 	.word	0x10000010

000116ac <Pin::SetAsActiveLow(bool)>:
  void SetAsActiveLow(bool set_as_active_low = true) override
   116ac:	b5f0      	push	{r4, r5, r6, r7, lr}
   116ae:	b085      	sub	sp, #20
   116b0:	4677      	mov	r7, lr
   116b2:	9003      	str	r0, [sp, #12]
   116b4:	460b      	mov	r3, r1
   116b6:	f88d 300b 	strb.w	r3, [sp, #11]
   116ba:	463b      	mov	r3, r7
   116bc:	4619      	mov	r1, r3
   116be:	4816      	ldr	r0, [pc, #88]	; (11718 <Pin::SetAsActiveLow(bool)+0x6c>)
   116c0:	f001 fd1a 	bl	130f8 <__cyg_profile_func_enter>
  {
    pin_map->_register[port_][pin_] =
        BitPlace(pin_map->_register[port_][pin_], PinBitMap::kInputInvert,
   116c4:	4b15      	ldr	r3, [pc, #84]	; (1171c <Pin::SetAsActiveLow(bool)+0x70>)
   116c6:	681b      	ldr	r3, [r3, #0]
   116c8:	9a03      	ldr	r2, [sp, #12]
   116ca:	7912      	ldrb	r2, [r2, #4]
   116cc:	4610      	mov	r0, r2
   116ce:	9a03      	ldr	r2, [sp, #12]
   116d0:	7952      	ldrb	r2, [r2, #5]
   116d2:	4611      	mov	r1, r2
   116d4:	0142      	lsls	r2, r0, #5
   116d6:	440a      	add	r2, r1
   116d8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   116dc:	f89d 200b 	ldrb.w	r2, [sp, #11]
    pin_map->_register[port_][pin_] =
   116e0:	4b0e      	ldr	r3, [pc, #56]	; (1171c <Pin::SetAsActiveLow(bool)+0x70>)
   116e2:	681c      	ldr	r4, [r3, #0]
   116e4:	9b03      	ldr	r3, [sp, #12]
   116e6:	791b      	ldrb	r3, [r3, #4]
   116e8:	461e      	mov	r6, r3
   116ea:	9b03      	ldr	r3, [sp, #12]
   116ec:	795b      	ldrb	r3, [r3, #5]
   116ee:	461d      	mov	r5, r3
        BitPlace(pin_map->_register[port_][pin_], PinBitMap::kInputInvert,
   116f0:	2301      	movs	r3, #1
   116f2:	9300      	str	r3, [sp, #0]
   116f4:	4613      	mov	r3, r2
   116f6:	2206      	movs	r2, #6
   116f8:	9803      	ldr	r0, [sp, #12]
   116fa:	f000 f9b3 	bl	11a64 <Pin::BitPlace(unsigned long, unsigned long, unsigned long, unsigned long)>
   116fe:	4602      	mov	r2, r0
    pin_map->_register[port_][pin_] =
   11700:	0173      	lsls	r3, r6, #5
   11702:	442b      	add	r3, r5
   11704:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
   11708:	463b      	mov	r3, r7
   1170a:	4619      	mov	r1, r3
   1170c:	4802      	ldr	r0, [pc, #8]	; (11718 <Pin::SetAsActiveLow(bool)+0x6c>)
   1170e:	f001 fd07 	bl	13120 <__cyg_profile_func_exit>
                 set_as_active_low, 1);
  }
   11712:	bf00      	nop
   11714:	b005      	add	sp, #20
   11716:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11718:	000116ad 	.word	0x000116ad
   1171c:	10000010 	.word	0x10000010

00011720 <Pin::SetAsAnalogMode(bool)>:
  // Set bit to 0 to enable analog mode
  void SetAsAnalogMode(bool set_as_analog = true) override
   11720:	b5f0      	push	{r4, r5, r6, r7, lr}
   11722:	b085      	sub	sp, #20
   11724:	4677      	mov	r7, lr
   11726:	9003      	str	r0, [sp, #12]
   11728:	460b      	mov	r3, r1
   1172a:	f88d 300b 	strb.w	r3, [sp, #11]
   1172e:	463b      	mov	r3, r7
   11730:	4619      	mov	r1, r3
   11732:	4818      	ldr	r0, [pc, #96]	; (11794 <Pin::SetAsAnalogMode(bool)+0x74>)
   11734:	f001 fce0 	bl	130f8 <__cyg_profile_func_enter>
  {
    pin_map->_register[port_][pin_] =
        BitPlace(pin_map->_register[port_][pin_], PinBitMap::kAnalogDigitalMode,
   11738:	4b17      	ldr	r3, [pc, #92]	; (11798 <Pin::SetAsAnalogMode(bool)+0x78>)
   1173a:	681b      	ldr	r3, [r3, #0]
   1173c:	9a03      	ldr	r2, [sp, #12]
   1173e:	7912      	ldrb	r2, [r2, #4]
   11740:	4610      	mov	r0, r2
   11742:	9a03      	ldr	r2, [sp, #12]
   11744:	7952      	ldrb	r2, [r2, #5]
   11746:	4611      	mov	r1, r2
   11748:	0142      	lsls	r2, r0, #5
   1174a:	440a      	add	r2, r1
   1174c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
                 !set_as_analog, 1);
   11750:	f89d 300b 	ldrb.w	r3, [sp, #11]
   11754:	f083 0301 	eor.w	r3, r3, #1
   11758:	b2db      	uxtb	r3, r3
        BitPlace(pin_map->_register[port_][pin_], PinBitMap::kAnalogDigitalMode,
   1175a:	461a      	mov	r2, r3
    pin_map->_register[port_][pin_] =
   1175c:	4b0e      	ldr	r3, [pc, #56]	; (11798 <Pin::SetAsAnalogMode(bool)+0x78>)
   1175e:	681c      	ldr	r4, [r3, #0]
   11760:	9b03      	ldr	r3, [sp, #12]
   11762:	791b      	ldrb	r3, [r3, #4]
   11764:	461e      	mov	r6, r3
   11766:	9b03      	ldr	r3, [sp, #12]
   11768:	795b      	ldrb	r3, [r3, #5]
   1176a:	461d      	mov	r5, r3
        BitPlace(pin_map->_register[port_][pin_], PinBitMap::kAnalogDigitalMode,
   1176c:	2301      	movs	r3, #1
   1176e:	9300      	str	r3, [sp, #0]
   11770:	4613      	mov	r3, r2
   11772:	2207      	movs	r2, #7
   11774:	9803      	ldr	r0, [sp, #12]
   11776:	f000 f975 	bl	11a64 <Pin::BitPlace(unsigned long, unsigned long, unsigned long, unsigned long)>
   1177a:	4602      	mov	r2, r0
    pin_map->_register[port_][pin_] =
   1177c:	0173      	lsls	r3, r6, #5
   1177e:	442b      	add	r3, r5
   11780:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
   11784:	463b      	mov	r3, r7
   11786:	4619      	mov	r1, r3
   11788:	4802      	ldr	r0, [pc, #8]	; (11794 <Pin::SetAsAnalogMode(bool)+0x74>)
   1178a:	f001 fcc9 	bl	13120 <__cyg_profile_func_exit>
  }
   1178e:	bf00      	nop
   11790:	b005      	add	sp, #20
   11792:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11794:	00011721 	.word	0x00011721
   11798:	10000010 	.word	0x10000010

0001179c <Pin::EnableDigitalFilter(bool)>:
  // Enable by setting bit to 0 to enable digital filter.
  void EnableDigitalFilter(bool enable_digital_filter = true) override
   1179c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1179e:	b085      	sub	sp, #20
   117a0:	4677      	mov	r7, lr
   117a2:	9003      	str	r0, [sp, #12]
   117a4:	460b      	mov	r3, r1
   117a6:	f88d 300b 	strb.w	r3, [sp, #11]
   117aa:	463b      	mov	r3, r7
   117ac:	4619      	mov	r1, r3
   117ae:	4818      	ldr	r0, [pc, #96]	; (11810 <Pin::EnableDigitalFilter(bool)+0x74>)
   117b0:	f001 fca2 	bl	130f8 <__cyg_profile_func_enter>
  {
    pin_map->_register[port_][pin_] =
        BitPlace(pin_map->_register[port_][pin_], PinBitMap::kDigitalFilter,
   117b4:	4b17      	ldr	r3, [pc, #92]	; (11814 <Pin::EnableDigitalFilter(bool)+0x78>)
   117b6:	681b      	ldr	r3, [r3, #0]
   117b8:	9a03      	ldr	r2, [sp, #12]
   117ba:	7912      	ldrb	r2, [r2, #4]
   117bc:	4610      	mov	r0, r2
   117be:	9a03      	ldr	r2, [sp, #12]
   117c0:	7952      	ldrb	r2, [r2, #5]
   117c2:	4611      	mov	r1, r2
   117c4:	0142      	lsls	r2, r0, #5
   117c6:	440a      	add	r2, r1
   117c8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
                 !enable_digital_filter, 1);
   117cc:	f89d 300b 	ldrb.w	r3, [sp, #11]
   117d0:	f083 0301 	eor.w	r3, r3, #1
   117d4:	b2db      	uxtb	r3, r3
        BitPlace(pin_map->_register[port_][pin_], PinBitMap::kDigitalFilter,
   117d6:	461a      	mov	r2, r3
    pin_map->_register[port_][pin_] =
   117d8:	4b0e      	ldr	r3, [pc, #56]	; (11814 <Pin::EnableDigitalFilter(bool)+0x78>)
   117da:	681c      	ldr	r4, [r3, #0]
   117dc:	9b03      	ldr	r3, [sp, #12]
   117de:	791b      	ldrb	r3, [r3, #4]
   117e0:	461e      	mov	r6, r3
   117e2:	9b03      	ldr	r3, [sp, #12]
   117e4:	795b      	ldrb	r3, [r3, #5]
   117e6:	461d      	mov	r5, r3
        BitPlace(pin_map->_register[port_][pin_], PinBitMap::kDigitalFilter,
   117e8:	2301      	movs	r3, #1
   117ea:	9300      	str	r3, [sp, #0]
   117ec:	4613      	mov	r3, r2
   117ee:	2208      	movs	r2, #8
   117f0:	9803      	ldr	r0, [sp, #12]
   117f2:	f000 f937 	bl	11a64 <Pin::BitPlace(unsigned long, unsigned long, unsigned long, unsigned long)>
   117f6:	4602      	mov	r2, r0
    pin_map->_register[port_][pin_] =
   117f8:	0173      	lsls	r3, r6, #5
   117fa:	442b      	add	r3, r5
   117fc:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
   11800:	463b      	mov	r3, r7
   11802:	4619      	mov	r1, r3
   11804:	4802      	ldr	r0, [pc, #8]	; (11810 <Pin::EnableDigitalFilter(bool)+0x74>)
   11806:	f001 fc8b 	bl	13120 <__cyg_profile_func_exit>
  }
   1180a:	bf00      	nop
   1180c:	b005      	add	sp, #20
   1180e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11810:	0001179d 	.word	0x0001179d
   11814:	10000010 	.word	0x10000010

00011818 <Pin::EnableFastMode(bool)>:
  void EnableFastMode(bool enable_fast_mode = true) override
   11818:	b5f0      	push	{r4, r5, r6, r7, lr}
   1181a:	b085      	sub	sp, #20
   1181c:	4677      	mov	r7, lr
   1181e:	9003      	str	r0, [sp, #12]
   11820:	460b      	mov	r3, r1
   11822:	f88d 300b 	strb.w	r3, [sp, #11]
   11826:	463b      	mov	r3, r7
   11828:	4619      	mov	r1, r3
   1182a:	4816      	ldr	r0, [pc, #88]	; (11884 <Pin::EnableFastMode(bool)+0x6c>)
   1182c:	f001 fc64 	bl	130f8 <__cyg_profile_func_enter>
  {
    pin_map->_register[port_][pin_] = BitPlace(
   11830:	4b15      	ldr	r3, [pc, #84]	; (11888 <Pin::EnableFastMode(bool)+0x70>)
   11832:	681b      	ldr	r3, [r3, #0]
        pin_map->_register[port_][pin_], PinBitMap::kSlew, enable_fast_mode, 1);
   11834:	9a03      	ldr	r2, [sp, #12]
   11836:	7912      	ldrb	r2, [r2, #4]
   11838:	4610      	mov	r0, r2
   1183a:	9a03      	ldr	r2, [sp, #12]
   1183c:	7952      	ldrb	r2, [r2, #5]
   1183e:	4611      	mov	r1, r2
    pin_map->_register[port_][pin_] = BitPlace(
   11840:	0142      	lsls	r2, r0, #5
   11842:	440a      	add	r2, r1
   11844:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   11848:	f89d 200b 	ldrb.w	r2, [sp, #11]
   1184c:	4b0e      	ldr	r3, [pc, #56]	; (11888 <Pin::EnableFastMode(bool)+0x70>)
   1184e:	681c      	ldr	r4, [r3, #0]
   11850:	9b03      	ldr	r3, [sp, #12]
   11852:	791b      	ldrb	r3, [r3, #4]
   11854:	461e      	mov	r6, r3
   11856:	9b03      	ldr	r3, [sp, #12]
   11858:	795b      	ldrb	r3, [r3, #5]
   1185a:	461d      	mov	r5, r3
   1185c:	2301      	movs	r3, #1
   1185e:	9300      	str	r3, [sp, #0]
   11860:	4613      	mov	r3, r2
   11862:	2209      	movs	r2, #9
   11864:	9803      	ldr	r0, [sp, #12]
   11866:	f000 f8fd 	bl	11a64 <Pin::BitPlace(unsigned long, unsigned long, unsigned long, unsigned long)>
   1186a:	4602      	mov	r2, r0
   1186c:	0173      	lsls	r3, r6, #5
   1186e:	442b      	add	r3, r5
   11870:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
   11874:	463b      	mov	r3, r7
   11876:	4619      	mov	r1, r3
   11878:	4802      	ldr	r0, [pc, #8]	; (11884 <Pin::EnableFastMode(bool)+0x6c>)
   1187a:	f001 fc51 	bl	13120 <__cyg_profile_func_exit>
  }
   1187e:	bf00      	nop
   11880:	b005      	add	sp, #20
   11882:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11884:	00011819 	.word	0x00011819
   11888:	10000010 	.word	0x10000010

0001188c <Pin::EnableI2cHighSpeedMode(bool)>:
  // Enable by setting bit to 0 for i2c high speed mode
  void EnableI2cHighSpeedMode(bool enable_high_speed = true) override
   1188c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1188e:	b085      	sub	sp, #20
   11890:	4677      	mov	r7, lr
   11892:	9003      	str	r0, [sp, #12]
   11894:	460b      	mov	r3, r1
   11896:	f88d 300b 	strb.w	r3, [sp, #11]
   1189a:	463b      	mov	r3, r7
   1189c:	4619      	mov	r1, r3
   1189e:	4818      	ldr	r0, [pc, #96]	; (11900 <Pin::EnableI2cHighSpeedMode(bool)+0x74>)
   118a0:	f001 fc2a 	bl	130f8 <__cyg_profile_func_enter>
  {
    pin_map->_register[port_][pin_] =
        BitPlace(pin_map->_register[port_][pin_], PinBitMap::kI2cHighSpeed,
   118a4:	4b17      	ldr	r3, [pc, #92]	; (11904 <Pin::EnableI2cHighSpeedMode(bool)+0x78>)
   118a6:	681b      	ldr	r3, [r3, #0]
   118a8:	9a03      	ldr	r2, [sp, #12]
   118aa:	7912      	ldrb	r2, [r2, #4]
   118ac:	4610      	mov	r0, r2
   118ae:	9a03      	ldr	r2, [sp, #12]
   118b0:	7952      	ldrb	r2, [r2, #5]
   118b2:	4611      	mov	r1, r2
   118b4:	0142      	lsls	r2, r0, #5
   118b6:	440a      	add	r2, r1
   118b8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
                 !enable_high_speed, 1);
   118bc:	f89d 300b 	ldrb.w	r3, [sp, #11]
   118c0:	f083 0301 	eor.w	r3, r3, #1
   118c4:	b2db      	uxtb	r3, r3
        BitPlace(pin_map->_register[port_][pin_], PinBitMap::kI2cHighSpeed,
   118c6:	461a      	mov	r2, r3
    pin_map->_register[port_][pin_] =
   118c8:	4b0e      	ldr	r3, [pc, #56]	; (11904 <Pin::EnableI2cHighSpeedMode(bool)+0x78>)
   118ca:	681c      	ldr	r4, [r3, #0]
   118cc:	9b03      	ldr	r3, [sp, #12]
   118ce:	791b      	ldrb	r3, [r3, #4]
   118d0:	461e      	mov	r6, r3
   118d2:	9b03      	ldr	r3, [sp, #12]
   118d4:	795b      	ldrb	r3, [r3, #5]
   118d6:	461d      	mov	r5, r3
        BitPlace(pin_map->_register[port_][pin_], PinBitMap::kI2cHighSpeed,
   118d8:	2301      	movs	r3, #1
   118da:	9300      	str	r3, [sp, #0]
   118dc:	4613      	mov	r3, r2
   118de:	2208      	movs	r2, #8
   118e0:	9803      	ldr	r0, [sp, #12]
   118e2:	f000 f8bf 	bl	11a64 <Pin::BitPlace(unsigned long, unsigned long, unsigned long, unsigned long)>
   118e6:	4602      	mov	r2, r0
    pin_map->_register[port_][pin_] =
   118e8:	0173      	lsls	r3, r6, #5
   118ea:	442b      	add	r3, r5
   118ec:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
   118f0:	463b      	mov	r3, r7
   118f2:	4619      	mov	r1, r3
   118f4:	4802      	ldr	r0, [pc, #8]	; (11900 <Pin::EnableI2cHighSpeedMode(bool)+0x74>)
   118f6:	f001 fc13 	bl	13120 <__cyg_profile_func_exit>
  }
   118fa:	bf00      	nop
   118fc:	b005      	add	sp, #20
   118fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11900:	0001188d 	.word	0x0001188d
   11904:	10000010 	.word	0x10000010

00011908 <Pin::EnableI2cHighCurrentDrive(bool)>:
  void EnableI2cHighCurrentDrive(bool enable_high_current = true) override
   11908:	b5f0      	push	{r4, r5, r6, r7, lr}
   1190a:	b085      	sub	sp, #20
   1190c:	4677      	mov	r7, lr
   1190e:	9003      	str	r0, [sp, #12]
   11910:	460b      	mov	r3, r1
   11912:	f88d 300b 	strb.w	r3, [sp, #11]
   11916:	463b      	mov	r3, r7
   11918:	4619      	mov	r1, r3
   1191a:	4816      	ldr	r0, [pc, #88]	; (11974 <Pin::EnableI2cHighCurrentDrive(bool)+0x6c>)
   1191c:	f001 fbec 	bl	130f8 <__cyg_profile_func_enter>
  {
    pin_map->_register[port_][pin_] =
        BitPlace(pin_map->_register[port_][pin_],
   11920:	4b15      	ldr	r3, [pc, #84]	; (11978 <Pin::EnableI2cHighCurrentDrive(bool)+0x70>)
   11922:	681b      	ldr	r3, [r3, #0]
   11924:	9a03      	ldr	r2, [sp, #12]
   11926:	7912      	ldrb	r2, [r2, #4]
   11928:	4610      	mov	r0, r2
   1192a:	9a03      	ldr	r2, [sp, #12]
   1192c:	7952      	ldrb	r2, [r2, #5]
   1192e:	4611      	mov	r1, r2
   11930:	0142      	lsls	r2, r0, #5
   11932:	440a      	add	r2, r1
   11934:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   11938:	f89d 200b 	ldrb.w	r2, [sp, #11]
    pin_map->_register[port_][pin_] =
   1193c:	4b0e      	ldr	r3, [pc, #56]	; (11978 <Pin::EnableI2cHighCurrentDrive(bool)+0x70>)
   1193e:	681c      	ldr	r4, [r3, #0]
   11940:	9b03      	ldr	r3, [sp, #12]
   11942:	791b      	ldrb	r3, [r3, #4]
   11944:	461e      	mov	r6, r3
   11946:	9b03      	ldr	r3, [sp, #12]
   11948:	795b      	ldrb	r3, [r3, #5]
   1194a:	461d      	mov	r5, r3
        BitPlace(pin_map->_register[port_][pin_],
   1194c:	2301      	movs	r3, #1
   1194e:	9300      	str	r3, [sp, #0]
   11950:	4613      	mov	r3, r2
   11952:	2209      	movs	r2, #9
   11954:	9803      	ldr	r0, [sp, #12]
   11956:	f000 f885 	bl	11a64 <Pin::BitPlace(unsigned long, unsigned long, unsigned long, unsigned long)>
   1195a:	4602      	mov	r2, r0
    pin_map->_register[port_][pin_] =
   1195c:	0173      	lsls	r3, r6, #5
   1195e:	442b      	add	r3, r5
   11960:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
   11964:	463b      	mov	r3, r7
   11966:	4619      	mov	r1, r3
   11968:	4802      	ldr	r0, [pc, #8]	; (11974 <Pin::EnableI2cHighCurrentDrive(bool)+0x6c>)
   1196a:	f001 fbd9 	bl	13120 <__cyg_profile_func_exit>
                 PinBitMap::kI2cHighCurrentDrive, enable_high_current, 1);
  }
   1196e:	bf00      	nop
   11970:	b005      	add	sp, #20
   11972:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11974:	00011909 	.word	0x00011909
   11978:	10000010 	.word	0x10000010

0001197c <Pin::SetAsOpenDrain(bool)>:
  void SetAsOpenDrain(bool set_as_open_drain = true) override
   1197c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1197e:	b085      	sub	sp, #20
   11980:	4677      	mov	r7, lr
   11982:	9003      	str	r0, [sp, #12]
   11984:	460b      	mov	r3, r1
   11986:	f88d 300b 	strb.w	r3, [sp, #11]
   1198a:	463b      	mov	r3, r7
   1198c:	4619      	mov	r1, r3
   1198e:	4816      	ldr	r0, [pc, #88]	; (119e8 <Pin::SetAsOpenDrain(bool)+0x6c>)
   11990:	f001 fbb2 	bl	130f8 <__cyg_profile_func_enter>
  {
    pin_map->_register[port_][pin_] =
        BitPlace(pin_map->_register[port_][pin_], PinBitMap::kOpenDrain,
   11994:	4b15      	ldr	r3, [pc, #84]	; (119ec <Pin::SetAsOpenDrain(bool)+0x70>)
   11996:	681b      	ldr	r3, [r3, #0]
   11998:	9a03      	ldr	r2, [sp, #12]
   1199a:	7912      	ldrb	r2, [r2, #4]
   1199c:	4610      	mov	r0, r2
   1199e:	9a03      	ldr	r2, [sp, #12]
   119a0:	7952      	ldrb	r2, [r2, #5]
   119a2:	4611      	mov	r1, r2
   119a4:	0142      	lsls	r2, r0, #5
   119a6:	440a      	add	r2, r1
   119a8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   119ac:	f89d 200b 	ldrb.w	r2, [sp, #11]
    pin_map->_register[port_][pin_] =
   119b0:	4b0e      	ldr	r3, [pc, #56]	; (119ec <Pin::SetAsOpenDrain(bool)+0x70>)
   119b2:	681c      	ldr	r4, [r3, #0]
   119b4:	9b03      	ldr	r3, [sp, #12]
   119b6:	791b      	ldrb	r3, [r3, #4]
   119b8:	461e      	mov	r6, r3
   119ba:	9b03      	ldr	r3, [sp, #12]
   119bc:	795b      	ldrb	r3, [r3, #5]
   119be:	461d      	mov	r5, r3
        BitPlace(pin_map->_register[port_][pin_], PinBitMap::kOpenDrain,
   119c0:	2301      	movs	r3, #1
   119c2:	9300      	str	r3, [sp, #0]
   119c4:	4613      	mov	r3, r2
   119c6:	220a      	movs	r2, #10
   119c8:	9803      	ldr	r0, [sp, #12]
   119ca:	f000 f84b 	bl	11a64 <Pin::BitPlace(unsigned long, unsigned long, unsigned long, unsigned long)>
   119ce:	4602      	mov	r2, r0
    pin_map->_register[port_][pin_] =
   119d0:	0173      	lsls	r3, r6, #5
   119d2:	442b      	add	r3, r5
   119d4:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
   119d8:	463b      	mov	r3, r7
   119da:	4619      	mov	r1, r3
   119dc:	4802      	ldr	r0, [pc, #8]	; (119e8 <Pin::SetAsOpenDrain(bool)+0x6c>)
   119de:	f001 fb9f 	bl	13120 <__cyg_profile_func_exit>
                 set_as_open_drain, 1);
  }
   119e2:	bf00      	nop
   119e4:	b005      	add	sp, #20
   119e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   119e8:	0001197d 	.word	0x0001197d
   119ec:	10000010 	.word	0x10000010

000119f0 <Pin::EnableDac(bool)>:
  void EnableDac(bool enable_dac = true) override
   119f0:	b5f0      	push	{r4, r5, r6, r7, lr}
   119f2:	b085      	sub	sp, #20
   119f4:	4677      	mov	r7, lr
   119f6:	9003      	str	r0, [sp, #12]
   119f8:	460b      	mov	r3, r1
   119fa:	f88d 300b 	strb.w	r3, [sp, #11]
   119fe:	463b      	mov	r3, r7
   11a00:	4619      	mov	r1, r3
   11a02:	4816      	ldr	r0, [pc, #88]	; (11a5c <Pin::EnableDac(bool)+0x6c>)
   11a04:	f001 fb78 	bl	130f8 <__cyg_profile_func_enter>
  {
    pin_map->_register[port_][pin_] = BitPlace(
   11a08:	4b15      	ldr	r3, [pc, #84]	; (11a60 <Pin::EnableDac(bool)+0x70>)
   11a0a:	681b      	ldr	r3, [r3, #0]
        pin_map->_register[port_][pin_], PinBitMap::kDacEnable, enable_dac, 1);
   11a0c:	9a03      	ldr	r2, [sp, #12]
   11a0e:	7912      	ldrb	r2, [r2, #4]
   11a10:	4610      	mov	r0, r2
   11a12:	9a03      	ldr	r2, [sp, #12]
   11a14:	7952      	ldrb	r2, [r2, #5]
   11a16:	4611      	mov	r1, r2
    pin_map->_register[port_][pin_] = BitPlace(
   11a18:	0142      	lsls	r2, r0, #5
   11a1a:	440a      	add	r2, r1
   11a1c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   11a20:	f89d 200b 	ldrb.w	r2, [sp, #11]
   11a24:	4b0e      	ldr	r3, [pc, #56]	; (11a60 <Pin::EnableDac(bool)+0x70>)
   11a26:	681c      	ldr	r4, [r3, #0]
   11a28:	9b03      	ldr	r3, [sp, #12]
   11a2a:	791b      	ldrb	r3, [r3, #4]
   11a2c:	461e      	mov	r6, r3
   11a2e:	9b03      	ldr	r3, [sp, #12]
   11a30:	795b      	ldrb	r3, [r3, #5]
   11a32:	461d      	mov	r5, r3
   11a34:	2301      	movs	r3, #1
   11a36:	9300      	str	r3, [sp, #0]
   11a38:	4613      	mov	r3, r2
   11a3a:	2210      	movs	r2, #16
   11a3c:	9803      	ldr	r0, [sp, #12]
   11a3e:	f000 f811 	bl	11a64 <Pin::BitPlace(unsigned long, unsigned long, unsigned long, unsigned long)>
   11a42:	4602      	mov	r2, r0
   11a44:	0173      	lsls	r3, r6, #5
   11a46:	442b      	add	r3, r5
   11a48:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
   11a4c:	463b      	mov	r3, r7
   11a4e:	4619      	mov	r1, r3
   11a50:	4802      	ldr	r0, [pc, #8]	; (11a5c <Pin::EnableDac(bool)+0x6c>)
   11a52:	f001 fb65 	bl	13120 <__cyg_profile_func_exit>
  }
   11a56:	bf00      	nop
   11a58:	b005      	add	sp, #20
   11a5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11a5c:	000119f1 	.word	0x000119f1
   11a60:	10000010 	.word	0x10000010

00011a64 <Pin::BitPlace(unsigned long, unsigned long, unsigned long, unsigned long)>:
  inline uint32_t BitPlace(uint32_t target, uint32_t position, uint32_t value,
   11a64:	b530      	push	{r4, r5, lr}
   11a66:	b087      	sub	sp, #28
   11a68:	4675      	mov	r5, lr
   11a6a:	9003      	str	r0, [sp, #12]
   11a6c:	9102      	str	r1, [sp, #8]
   11a6e:	9201      	str	r2, [sp, #4]
   11a70:	9300      	str	r3, [sp, #0]
   11a72:	462b      	mov	r3, r5
   11a74:	4619      	mov	r1, r3
   11a76:	4813      	ldr	r0, [pc, #76]	; (11ac4 <Pin::BitPlace(unsigned long, unsigned long, unsigned long, unsigned long)+0x60>)
   11a78:	f001 fb3e 	bl	130f8 <__cyg_profile_func_enter>
                           uint32_t value_width)
  {
    // Generate mask with all 1s
    uint32_t mask = 0xFFFFFFFF >> (32 - value_width);
   11a7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   11a7e:	f1c3 0320 	rsb	r3, r3, #32
   11a82:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   11a86:	fa22 f303 	lsr.w	r3, r2, r3
   11a8a:	9305      	str	r3, [sp, #20]
    target &= ~(mask << position);
   11a8c:	9a05      	ldr	r2, [sp, #20]
   11a8e:	9b01      	ldr	r3, [sp, #4]
   11a90:	fa02 f303 	lsl.w	r3, r2, r3
   11a94:	43db      	mvns	r3, r3
   11a96:	9a02      	ldr	r2, [sp, #8]
   11a98:	4013      	ands	r3, r2
   11a9a:	9302      	str	r3, [sp, #8]
    target |= (value & mask) << position;
   11a9c:	9a00      	ldr	r2, [sp, #0]
   11a9e:	9b05      	ldr	r3, [sp, #20]
   11aa0:	401a      	ands	r2, r3
   11aa2:	9b01      	ldr	r3, [sp, #4]
   11aa4:	fa02 f303 	lsl.w	r3, r2, r3
   11aa8:	9a02      	ldr	r2, [sp, #8]
   11aaa:	4313      	orrs	r3, r2
   11aac:	9302      	str	r3, [sp, #8]
    return target;
   11aae:	9c02      	ldr	r4, [sp, #8]
   11ab0:	462b      	mov	r3, r5
   11ab2:	4619      	mov	r1, r3
   11ab4:	4803      	ldr	r0, [pc, #12]	; (11ac4 <Pin::BitPlace(unsigned long, unsigned long, unsigned long, unsigned long)+0x60>)
   11ab6:	f001 fb33 	bl	13120 <__cyg_profile_func_exit>
   11aba:	4623      	mov	r3, r4
  }
   11abc:	4618      	mov	r0, r3
   11abe:	b007      	add	sp, #28
   11ac0:	bd30      	pop	{r4, r5, pc}
   11ac2:	bf00      	nop
   11ac4:	00011a65 	.word	0x00011a65

00011ac8 <Pin::GetPort() const>:
  uint8_t GetPort() const override
   11ac8:	b530      	push	{r4, r5, lr}
   11aca:	b083      	sub	sp, #12
   11acc:	4675      	mov	r5, lr
   11ace:	9001      	str	r0, [sp, #4]
   11ad0:	462b      	mov	r3, r5
   11ad2:	4619      	mov	r1, r3
   11ad4:	4806      	ldr	r0, [pc, #24]	; (11af0 <Pin::GetPort() const+0x28>)
   11ad6:	f001 fb0f 	bl	130f8 <__cyg_profile_func_enter>
  {
    return port_;
   11ada:	9b01      	ldr	r3, [sp, #4]
   11adc:	791c      	ldrb	r4, [r3, #4]
   11ade:	462b      	mov	r3, r5
   11ae0:	4619      	mov	r1, r3
   11ae2:	4803      	ldr	r0, [pc, #12]	; (11af0 <Pin::GetPort() const+0x28>)
   11ae4:	f001 fb1c 	bl	13120 <__cyg_profile_func_exit>
   11ae8:	4623      	mov	r3, r4
  }
   11aea:	4618      	mov	r0, r3
   11aec:	b003      	add	sp, #12
   11aee:	bd30      	pop	{r4, r5, pc}
   11af0:	00011ac9 	.word	0x00011ac9

00011af4 <Pin::GetPin() const>:
  uint8_t GetPin() const override
   11af4:	b530      	push	{r4, r5, lr}
   11af6:	b083      	sub	sp, #12
   11af8:	4675      	mov	r5, lr
   11afa:	9001      	str	r0, [sp, #4]
   11afc:	462b      	mov	r3, r5
   11afe:	4619      	mov	r1, r3
   11b00:	4806      	ldr	r0, [pc, #24]	; (11b1c <Pin::GetPin() const+0x28>)
   11b02:	f001 faf9 	bl	130f8 <__cyg_profile_func_enter>
  {
    return pin_;
   11b06:	9b01      	ldr	r3, [sp, #4]
   11b08:	795c      	ldrb	r4, [r3, #5]
   11b0a:	462b      	mov	r3, r5
   11b0c:	4619      	mov	r1, r3
   11b0e:	4803      	ldr	r0, [pc, #12]	; (11b1c <Pin::GetPin() const+0x28>)
   11b10:	f001 fb06 	bl	13120 <__cyg_profile_func_exit>
   11b14:	4623      	mov	r3, r4
  }
   11b16:	4618      	mov	r0, r3
   11b18:	b003      	add	sp, #12
   11b1a:	bd30      	pop	{r4, r5, pc}
   11b1c:	00011af5 	.word	0x00011af5

00011b20 <unsigned char util::Value<TimerInterface::TimerPort, unsigned char>(TimerInterface::TimerPort)>:
//
// @param enum_type_value variable you would like to get the value of.
// @return the value of the enum class type variable of with the underlying
//         type of the enum class.
template <typename Enum, typename Type = typename std::underlying_type_t<Enum>>
constexpr Type Value(Enum enum_type_value)
   11b20:	b530      	push	{r4, r5, lr}
   11b22:	b083      	sub	sp, #12
   11b24:	4675      	mov	r5, lr
   11b26:	4603      	mov	r3, r0
   11b28:	f88d 3007 	strb.w	r3, [sp, #7]
   11b2c:	462b      	mov	r3, r5
   11b2e:	4619      	mov	r1, r3
   11b30:	4806      	ldr	r0, [pc, #24]	; (11b4c <unsigned char util::Value<TimerInterface::TimerPort, unsigned char>(TimerInterface::TimerPort)+0x2c>)
   11b32:	f001 fae1 	bl	130f8 <__cyg_profile_func_enter>
{
  return static_cast<Type>(enum_type_value);
   11b36:	f89d 4007 	ldrb.w	r4, [sp, #7]
   11b3a:	462b      	mov	r3, r5
   11b3c:	4619      	mov	r1, r3
   11b3e:	4803      	ldr	r0, [pc, #12]	; (11b4c <unsigned char util::Value<TimerInterface::TimerPort, unsigned char>(TimerInterface::TimerPort)+0x2c>)
   11b40:	f001 faee 	bl	13120 <__cyg_profile_func_exit>
   11b44:	4623      	mov	r3, r4
}
   11b46:	4618      	mov	r0, r3
   11b48:	b003      	add	sp, #12
   11b4a:	bd30      	pop	{r4, r5, pc}
   11b4c:	00011b21 	.word	0x00011b21

00011b50 <Timer::DoNothingIsr()>:
    Lpc40xxSystemController::Peripherals::kTimer3
  };

  static constexpr IRQn kTimerIrq[] = { IRQn::TIMER0_IRQn, IRQn::TIMER1_IRQn,
                                        IRQn::TIMER2_IRQn, IRQn::TIMER3_IRQn };
  static void DoNothingIsr() {}
   11b50:	b510      	push	{r4, lr}
   11b52:	4674      	mov	r4, lr
   11b54:	4623      	mov	r3, r4
   11b56:	4619      	mov	r1, r3
   11b58:	4804      	ldr	r0, [pc, #16]	; (11b6c <Timer::DoNothingIsr()+0x1c>)
   11b5a:	f001 facd 	bl	130f8 <__cyg_profile_func_enter>
   11b5e:	4623      	mov	r3, r4
   11b60:	4619      	mov	r1, r3
   11b62:	4802      	ldr	r0, [pc, #8]	; (11b6c <Timer::DoNothingIsr()+0x1c>)
   11b64:	f001 fadc 	bl	13120 <__cyg_profile_func_exit>
   11b68:	bf00      	nop
   11b6a:	bd10      	pop	{r4, pc}
   11b6c:	00011b51 	.word	0x00011b51

00011b70 <Timer::Initialize(unsigned long, void (*)(), long)>:
  ///                  register will be 10 ms.
  /// @param isr an ISR that will fire when the condition set by SetTimer
  ///            method is achieved.
  /// @param priority sets the Timer interrupt's priority level, defaults to -1
  ///                 which uses the platforms default priority.
  void Initialize(uint32_t frequency, IsrPointer isr = DoNothingIsr,
   11b70:	b510      	push	{r4, lr}
   11b72:	b086      	sub	sp, #24
   11b74:	4674      	mov	r4, lr
   11b76:	9003      	str	r0, [sp, #12]
   11b78:	9102      	str	r1, [sp, #8]
   11b7a:	9201      	str	r2, [sp, #4]
   11b7c:	9300      	str	r3, [sp, #0]
   11b7e:	4623      	mov	r3, r4
   11b80:	4619      	mov	r1, r3
   11b82:	483e      	ldr	r0, [pc, #248]	; (11c7c <Timer::Initialize(unsigned long, void (*)(), long)+0x10c>)
   11b84:	f001 fab8 	bl	130f8 <__cyg_profile_func_enter>
                  int32_t priority = -1) override final
  {
    PowerUpPeripheral(kPowerbit[channel_]);
   11b88:	9b03      	ldr	r3, [sp, #12]
   11b8a:	1d18      	adds	r0, r3, #4
   11b8c:	9b03      	ldr	r3, [sp, #12]
   11b8e:	685b      	ldr	r3, [r3, #4]
   11b90:	3314      	adds	r3, #20
   11b92:	681b      	ldr	r3, [r3, #0]
   11b94:	9a03      	ldr	r2, [sp, #12]
   11b96:	7a12      	ldrb	r2, [r2, #8]
   11b98:	0092      	lsls	r2, r2, #2
   11b9a:	4939      	ldr	r1, [pc, #228]	; (11c80 <Timer::Initialize(unsigned long, void (*)(), long)+0x110>)
   11b9c:	440a      	add	r2, r1
   11b9e:	4611      	mov	r1, r2
   11ba0:	4798      	blx	r3
    SJ2_ASSERT_FATAL(
   11ba2:	9b02      	ldr	r3, [sp, #8]
   11ba4:	2b00      	cmp	r3, #0
   11ba6:	d10d      	bne.n	11bc4 <Timer::Initialize(unsigned long, void (*)(), long)+0x54>
   11ba8:	2384      	movs	r3, #132	; 0x84
   11baa:	4a36      	ldr	r2, [pc, #216]	; (11c84 <Timer::Initialize(unsigned long, void (*)(), long)+0x114>)
   11bac:	4936      	ldr	r1, [pc, #216]	; (11c88 <Timer::Initialize(unsigned long, void (*)(), long)+0x118>)
   11bae:	4837      	ldr	r0, [pc, #220]	; (11c8c <Timer::Initialize(unsigned long, void (*)(), long)+0x11c>)
   11bb0:	f002 fd00 	bl	145b4 <printf>
   11bb4:	4836      	ldr	r0, [pc, #216]	; (11c90 <Timer::Initialize(unsigned long, void (*)(), long)+0x120>)
   11bb6:	f001 fa6f 	bl	13098 <puts>
   11bba:	2100      	movs	r1, #0
   11bbc:	2001      	movs	r0, #1
   11bbe:	f7ff f875 	bl	10cac <debug::PrintBacktrace(bool, void*)>
   11bc2:	e7fe      	b.n	11bc2 <Timer::Initialize(unsigned long, void (*)(), long)+0x52>
        frequency != 0,
        "Cannot have zero ticks per microsecond, please choose 1 or more.");
    // Set Prescale register for Prescale Counter to milliseconds
    uint32_t prescaler = GetPeripheralFrequency() / frequency;
   11bc4:	9b03      	ldr	r3, [sp, #12]
   11bc6:	1d1a      	adds	r2, r3, #4
   11bc8:	9b03      	ldr	r3, [sp, #12]
   11bca:	685b      	ldr	r3, [r3, #4]
   11bcc:	3310      	adds	r3, #16
   11bce:	681b      	ldr	r3, [r3, #0]
   11bd0:	4610      	mov	r0, r2
   11bd2:	4798      	blx	r3
   11bd4:	4602      	mov	r2, r0
   11bd6:	9b02      	ldr	r3, [sp, #8]
   11bd8:	fbb2 f3f3 	udiv	r3, r2, r3
   11bdc:	9305      	str	r3, [sp, #20]
    tim_register[channel_]->PR &= ~(kClear << 1);
   11bde:	9b03      	ldr	r3, [sp, #12]
   11be0:	7a1b      	ldrb	r3, [r3, #8]
   11be2:	461a      	mov	r2, r3
   11be4:	4b2b      	ldr	r3, [pc, #172]	; (11c94 <Timer::Initialize(unsigned long, void (*)(), long)+0x124>)
   11be6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   11bea:	68da      	ldr	r2, [r3, #12]
   11bec:	9b03      	ldr	r3, [sp, #12]
   11bee:	7a1b      	ldrb	r3, [r3, #8]
   11bf0:	4619      	mov	r1, r3
   11bf2:	4b28      	ldr	r3, [pc, #160]	; (11c94 <Timer::Initialize(unsigned long, void (*)(), long)+0x124>)
   11bf4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   11bf8:	f002 0201 	and.w	r2, r2, #1
   11bfc:	60da      	str	r2, [r3, #12]
    tim_register[channel_]->PR |= (prescaler << 1);
   11bfe:	9b03      	ldr	r3, [sp, #12]
   11c00:	7a1b      	ldrb	r3, [r3, #8]
   11c02:	461a      	mov	r2, r3
   11c04:	4b23      	ldr	r3, [pc, #140]	; (11c94 <Timer::Initialize(unsigned long, void (*)(), long)+0x124>)
   11c06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   11c0a:	68d9      	ldr	r1, [r3, #12]
   11c0c:	9b05      	ldr	r3, [sp, #20]
   11c0e:	005a      	lsls	r2, r3, #1
   11c10:	9b03      	ldr	r3, [sp, #12]
   11c12:	7a1b      	ldrb	r3, [r3, #8]
   11c14:	4618      	mov	r0, r3
   11c16:	4b1f      	ldr	r3, [pc, #124]	; (11c94 <Timer::Initialize(unsigned long, void (*)(), long)+0x124>)
   11c18:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   11c1c:	430a      	orrs	r2, r1
   11c1e:	60da      	str	r2, [r3, #12]
    tim_register[channel_]->TCR |= (1 << 0);
   11c20:	9b03      	ldr	r3, [sp, #12]
   11c22:	7a1b      	ldrb	r3, [r3, #8]
   11c24:	461a      	mov	r2, r3
   11c26:	4b1b      	ldr	r3, [pc, #108]	; (11c94 <Timer::Initialize(unsigned long, void (*)(), long)+0x124>)
   11c28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   11c2c:	685a      	ldr	r2, [r3, #4]
   11c2e:	9b03      	ldr	r3, [sp, #12]
   11c30:	7a1b      	ldrb	r3, [r3, #8]
   11c32:	4619      	mov	r1, r3
   11c34:	4b17      	ldr	r3, [pc, #92]	; (11c94 <Timer::Initialize(unsigned long, void (*)(), long)+0x124>)
   11c36:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   11c3a:	f042 0201 	orr.w	r2, r2, #1
   11c3e:	605a      	str	r2, [r3, #4]
    user_timer_isr[channel_] = isr;
   11c40:	9b03      	ldr	r3, [sp, #12]
   11c42:	7a1b      	ldrb	r3, [r3, #8]
   11c44:	4619      	mov	r1, r3
   11c46:	4a14      	ldr	r2, [pc, #80]	; (11c98 <Timer::Initialize(unsigned long, void (*)(), long)+0x128>)
   11c48:	9b01      	ldr	r3, [sp, #4]
   11c4a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
    RegisterIsr(kTimerIrq[channel_], kTimerIsr[channel_], true, priority);
   11c4e:	9b03      	ldr	r3, [sp, #12]
   11c50:	7a1b      	ldrb	r3, [r3, #8]
   11c52:	461a      	mov	r2, r3
   11c54:	4b11      	ldr	r3, [pc, #68]	; (11c9c <Timer::Initialize(unsigned long, void (*)(), long)+0x12c>)
   11c56:	5698      	ldrsb	r0, [r3, r2]
   11c58:	9b03      	ldr	r3, [sp, #12]
   11c5a:	7a1b      	ldrb	r3, [r3, #8]
   11c5c:	461a      	mov	r2, r3
   11c5e:	4b10      	ldr	r3, [pc, #64]	; (11ca0 <Timer::Initialize(unsigned long, void (*)(), long)+0x130>)
   11c60:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   11c64:	9b00      	ldr	r3, [sp, #0]
   11c66:	2201      	movs	r2, #1
   11c68:	f001 f91e 	bl	12ea8 <RegisterIsr(IRQn, void (*)(), bool, long)>
   11c6c:	4623      	mov	r3, r4
   11c6e:	4619      	mov	r1, r3
   11c70:	4802      	ldr	r0, [pc, #8]	; (11c7c <Timer::Initialize(unsigned long, void (*)(), long)+0x10c>)
   11c72:	f001 fa55 	bl	13120 <__cyg_profile_func_exit>
  }
   11c76:	bf00      	nop
   11c78:	b006      	add	sp, #24
   11c7a:	bd10      	pop	{r4, pc}
   11c7c:	00011b71 	.word	0x00011b71
   11c80:	00017cbc 	.word	0x00017cbc
   11c84:	00017f5c 	.word	0x00017f5c
   11c88:	00017ce0 	.word	0x00017ce0
   11c8c:	00017b24 	.word	0x00017b24
   11c90:	00017830 	.word	0x00017830
   11c94:	10000014 	.word	0x10000014
   11c98:	100002cc 	.word	0x100002cc
   11c9c:	00017ccc 	.word	0x00017ccc
   11ca0:	00017cd0 	.word	0x00017cd0

00011ca4 <unsigned char util::Value<TimerInterface::MatchControlRegister, unsigned char>(TimerInterface::MatchControlRegister)>:
constexpr Type Value(Enum enum_type_value)
   11ca4:	b530      	push	{r4, r5, lr}
   11ca6:	b083      	sub	sp, #12
   11ca8:	4675      	mov	r5, lr
   11caa:	4603      	mov	r3, r0
   11cac:	f88d 3007 	strb.w	r3, [sp, #7]
   11cb0:	462b      	mov	r3, r5
   11cb2:	4619      	mov	r1, r3
   11cb4:	4806      	ldr	r0, [pc, #24]	; (11cd0 <unsigned char util::Value<TimerInterface::MatchControlRegister, unsigned char>(TimerInterface::MatchControlRegister)+0x2c>)
   11cb6:	f001 fa1f 	bl	130f8 <__cyg_profile_func_enter>
  return static_cast<Type>(enum_type_value);
   11cba:	f89d 4007 	ldrb.w	r4, [sp, #7]
   11cbe:	462b      	mov	r3, r5
   11cc0:	4619      	mov	r1, r3
   11cc2:	4803      	ldr	r0, [pc, #12]	; (11cd0 <unsigned char util::Value<TimerInterface::MatchControlRegister, unsigned char>(TimerInterface::MatchControlRegister)+0x2c>)
   11cc4:	f001 fa2c 	bl	13120 <__cyg_profile_func_exit>
   11cc8:	4623      	mov	r3, r4
}
   11cca:	4618      	mov	r0, r3
   11ccc:	b003      	add	sp, #12
   11cce:	bd30      	pop	{r4, r5, pc}
   11cd0:	00011ca5 	.word	0x00011ca5

00011cd4 <Timer::SetTimer(unsigned long, TimerInterface::TimerIsrCondition, TimerInterface::MatchControlRegister)>:
  ///
  /// @param ticks the count of the timer register (TC) to have an ISR fire
  /// @param condition the condition for which a timer interrupt will occur
  /// @param match_register which match register (from 0 to 3) should be used
  ///                       for holding the ticks for the condition.
  void SetTimer(uint32_t ticks, TimerIsrCondition condition,
   11cd4:	b570      	push	{r4, r5, r6, lr}
   11cd6:	b086      	sub	sp, #24
   11cd8:	4676      	mov	r6, lr
   11cda:	9003      	str	r0, [sp, #12]
   11cdc:	9102      	str	r1, [sp, #8]
   11cde:	4611      	mov	r1, r2
   11ce0:	461a      	mov	r2, r3
   11ce2:	460b      	mov	r3, r1
   11ce4:	f88d 3007 	strb.w	r3, [sp, #7]
   11ce8:	4613      	mov	r3, r2
   11cea:	f88d 3006 	strb.w	r3, [sp, #6]
   11cee:	4633      	mov	r3, r6
   11cf0:	4619      	mov	r1, r3
   11cf2:	4832      	ldr	r0, [pc, #200]	; (11dbc <Timer::SetTimer(unsigned long, TimerInterface::TimerIsrCondition, TimerInterface::MatchControlRegister)+0xe8>)
   11cf4:	f001 fa00 	bl	130f8 <__cyg_profile_func_enter>
                MatchControlRegister match_register = kMat0) override final
  {
    static constexpr uint8_t kClearMode = 0b0111;

    uint8_t match_value = util::Value(match_register);
   11cf8:	f89d 3006 	ldrb.w	r3, [sp, #6]
   11cfc:	4618      	mov	r0, r3
   11cfe:	f7ff ffd1 	bl	11ca4 <unsigned char util::Value<TimerInterface::MatchControlRegister, unsigned char>(TimerInterface::MatchControlRegister)>
   11d02:	4603      	mov	r3, r0
   11d04:	f88d 3017 	strb.w	r3, [sp, #23]
    tim_register[channel_]->MCR &= ~(kClearMode << match_value);
   11d08:	9b03      	ldr	r3, [sp, #12]
   11d0a:	7a1b      	ldrb	r3, [r3, #8]
   11d0c:	461a      	mov	r2, r3
   11d0e:	4b2c      	ldr	r3, [pc, #176]	; (11dc0 <Timer::SetTimer(unsigned long, TimerInterface::TimerIsrCondition, TimerInterface::MatchControlRegister)+0xec>)
   11d10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   11d14:	695a      	ldr	r2, [r3, #20]
   11d16:	f89d 3017 	ldrb.w	r3, [sp, #23]
   11d1a:	2107      	movs	r1, #7
   11d1c:	fa01 f303 	lsl.w	r3, r1, r3
   11d20:	43db      	mvns	r3, r3
   11d22:	4619      	mov	r1, r3
   11d24:	9b03      	ldr	r3, [sp, #12]
   11d26:	7a1b      	ldrb	r3, [r3, #8]
   11d28:	4618      	mov	r0, r3
   11d2a:	4b25      	ldr	r3, [pc, #148]	; (11dc0 <Timer::SetTimer(unsigned long, TimerInterface::TimerIsrCondition, TimerInterface::MatchControlRegister)+0xec>)
   11d2c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   11d30:	400a      	ands	r2, r1
   11d32:	615a      	str	r2, [r3, #20]
    tim_register[channel_]->MCR |= condition << match_value;
   11d34:	9b03      	ldr	r3, [sp, #12]
   11d36:	7a1b      	ldrb	r3, [r3, #8]
   11d38:	461a      	mov	r2, r3
   11d3a:	4b21      	ldr	r3, [pc, #132]	; (11dc0 <Timer::SetTimer(unsigned long, TimerInterface::TimerIsrCondition, TimerInterface::MatchControlRegister)+0xec>)
   11d3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   11d40:	695a      	ldr	r2, [r3, #20]
   11d42:	f89d 1007 	ldrb.w	r1, [sp, #7]
   11d46:	f89d 3017 	ldrb.w	r3, [sp, #23]
   11d4a:	fa01 f303 	lsl.w	r3, r1, r3
   11d4e:	4619      	mov	r1, r3
   11d50:	9b03      	ldr	r3, [sp, #12]
   11d52:	7a1b      	ldrb	r3, [r3, #8]
   11d54:	4618      	mov	r0, r3
   11d56:	4b1a      	ldr	r3, [pc, #104]	; (11dc0 <Timer::SetTimer(unsigned long, TimerInterface::TimerIsrCondition, TimerInterface::MatchControlRegister)+0xec>)
   11d58:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   11d5c:	430a      	orrs	r2, r1
   11d5e:	615a      	str	r2, [r3, #20]
    *match[channel_][match_value / 3] |= (((ticks / 2)) << 0);
   11d60:	9b03      	ldr	r3, [sp, #12]
   11d62:	7a1b      	ldrb	r3, [r3, #8]
   11d64:	4618      	mov	r0, r3
   11d66:	f89d 3017 	ldrb.w	r3, [sp, #23]
   11d6a:	4a16      	ldr	r2, [pc, #88]	; (11dc4 <Timer::SetTimer(unsigned long, TimerInterface::TimerIsrCondition, TimerInterface::MatchControlRegister)+0xf0>)
   11d6c:	fba2 2303 	umull	r2, r3, r2, r3
   11d70:	085b      	lsrs	r3, r3, #1
   11d72:	b2db      	uxtb	r3, r3
   11d74:	4619      	mov	r1, r3
   11d76:	4a14      	ldr	r2, [pc, #80]	; (11dc8 <Timer::SetTimer(unsigned long, TimerInterface::TimerIsrCondition, TimerInterface::MatchControlRegister)+0xf4>)
   11d78:	0083      	lsls	r3, r0, #2
   11d7a:	440b      	add	r3, r1
   11d7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11d80:	6819      	ldr	r1, [r3, #0]
   11d82:	9b02      	ldr	r3, [sp, #8]
   11d84:	085a      	lsrs	r2, r3, #1
   11d86:	9b03      	ldr	r3, [sp, #12]
   11d88:	7a1b      	ldrb	r3, [r3, #8]
   11d8a:	461d      	mov	r5, r3
   11d8c:	f89d 3017 	ldrb.w	r3, [sp, #23]
   11d90:	480c      	ldr	r0, [pc, #48]	; (11dc4 <Timer::SetTimer(unsigned long, TimerInterface::TimerIsrCondition, TimerInterface::MatchControlRegister)+0xf0>)
   11d92:	fba0 0303 	umull	r0, r3, r0, r3
   11d96:	085b      	lsrs	r3, r3, #1
   11d98:	b2db      	uxtb	r3, r3
   11d9a:	461c      	mov	r4, r3
   11d9c:	480a      	ldr	r0, [pc, #40]	; (11dc8 <Timer::SetTimer(unsigned long, TimerInterface::TimerIsrCondition, TimerInterface::MatchControlRegister)+0xf4>)
   11d9e:	00ab      	lsls	r3, r5, #2
   11da0:	4423      	add	r3, r4
   11da2:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
   11da6:	430a      	orrs	r2, r1
   11da8:	601a      	str	r2, [r3, #0]
   11daa:	4633      	mov	r3, r6
   11dac:	4619      	mov	r1, r3
   11dae:	4803      	ldr	r0, [pc, #12]	; (11dbc <Timer::SetTimer(unsigned long, TimerInterface::TimerIsrCondition, TimerInterface::MatchControlRegister)+0xe8>)
   11db0:	f001 f9b6 	bl	13120 <__cyg_profile_func_exit>
  }
   11db4:	bf00      	nop
   11db6:	b006      	add	sp, #24
   11db8:	bd70      	pop	{r4, r5, r6, pc}
   11dba:	bf00      	nop
   11dbc:	00011cd5 	.word	0x00011cd5
   11dc0:	10000014 	.word	0x10000014
   11dc4:	aaaaaaab 	.word	0xaaaaaaab
   11dc8:	1000028c 	.word	0x1000028c

00011dcc <Timer::GetTimer()>:

  [[gnu::always_inline]] uint32_t GetTimer() override final {
   11dcc:	b530      	push	{r4, r5, lr}
   11dce:	b083      	sub	sp, #12
   11dd0:	4675      	mov	r5, lr
   11dd2:	9001      	str	r0, [sp, #4]
   11dd4:	462b      	mov	r3, r5
   11dd6:	4619      	mov	r1, r3
   11dd8:	4809      	ldr	r0, [pc, #36]	; (11e00 <Timer::GetTimer()+0x34>)
   11dda:	f001 f98d 	bl	130f8 <__cyg_profile_func_enter>
    return tim_register[channel_]->TC;
   11dde:	9b01      	ldr	r3, [sp, #4]
   11de0:	7a1b      	ldrb	r3, [r3, #8]
   11de2:	461a      	mov	r2, r3
   11de4:	4b07      	ldr	r3, [pc, #28]	; (11e04 <Timer::GetTimer()+0x38>)
   11de6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   11dea:	689c      	ldr	r4, [r3, #8]
   11dec:	462b      	mov	r3, r5
   11dee:	4619      	mov	r1, r3
   11df0:	4803      	ldr	r0, [pc, #12]	; (11e00 <Timer::GetTimer()+0x34>)
   11df2:	f001 f995 	bl	13120 <__cyg_profile_func_exit>
   11df6:	4623      	mov	r3, r4
  }
   11df8:	4618      	mov	r0, r3
   11dfa:	b003      	add	sp, #12
   11dfc:	bd30      	pop	{r4, r5, pc}
   11dfe:	bf00      	nop
   11e00:	00011dcd 	.word	0x00011dcd
   11e04:	10000014 	.word	0x10000014

00011e08 <Uart::SetBaudRate(unsigned long)>:
  constexpr Uart(Channels mode, PinInterface * tx_pin, PinInterface * rx_pin)
      : channel_(static_cast<uint8_t>(mode)), tx_(tx_pin), rx_(rx_pin)
  {
  }

  void SetBaudRate(uint32_t baud_rate) override
   11e08:	b510      	push	{r4, lr}
   11e0a:	b088      	sub	sp, #32
   11e0c:	4674      	mov	r4, lr
   11e0e:	9001      	str	r0, [sp, #4]
   11e10:	9100      	str	r1, [sp, #0]
   11e12:	4623      	mov	r3, r4
   11e14:	4619      	mov	r1, r3
   11e16:	482d      	ldr	r0, [pc, #180]	; (11ecc <Uart::SetBaudRate(unsigned long)+0xc4>)
   11e18:	f001 f96e 	bl	130f8 <__cyg_profile_func_enter>
  {
    constexpr uint8_t kDlabBit = (1 << 7);
   11e1c:	2380      	movs	r3, #128	; 0x80
   11e1e:	f88d 301f 	strb.w	r3, [sp, #31]
    float baudrate             = static_cast<float>(baud_rate);
   11e22:	9b00      	ldr	r3, [sp, #0]
   11e24:	ee07 3a90 	vmov	s15, r3
   11e28:	eef8 7a67 	vcvt.f32.u32	s15, s15
   11e2c:	edcd 7a06 	vstr	s15, [sp, #24]
    UartCalibration_t dividers = GenerateUartCalibration(baudrate);
   11e30:	ab02      	add	r3, sp, #8
   11e32:	ed9d 0a06 	vldr	s0, [sp, #24]
   11e36:	9901      	ldr	r1, [sp, #4]
   11e38:	4618      	mov	r0, r3
   11e3a:	f000 fb2d 	bl	12498 <Uart::GenerateUartCalibration(float)>

    uint8_t dlm = static_cast<uint8_t>((dividers.divide_latch >> 8) & 0xFF);
   11e3e:	9b02      	ldr	r3, [sp, #8]
   11e40:	0a1b      	lsrs	r3, r3, #8
   11e42:	f88d 3017 	strb.w	r3, [sp, #23]
    uint8_t dll = static_cast<uint8_t>(dividers.divide_latch & 0xFF);
   11e46:	9b02      	ldr	r3, [sp, #8]
   11e48:	f88d 3016 	strb.w	r3, [sp, #22]
    uint8_t fdr = static_cast<uint8_t>((dividers.multiply & 0xF) << 4 |
   11e4c:	9b04      	ldr	r3, [sp, #16]
   11e4e:	b2db      	uxtb	r3, r3
   11e50:	011b      	lsls	r3, r3, #4
   11e52:	b2da      	uxtb	r2, r3
                                       (dividers.divide_add & 0xF));
   11e54:	9b03      	ldr	r3, [sp, #12]
   11e56:	b2db      	uxtb	r3, r3
   11e58:	f003 030f 	and.w	r3, r3, #15
   11e5c:	b2db      	uxtb	r3, r3
    uint8_t fdr = static_cast<uint8_t>((dividers.multiply & 0xF) << 4 |
   11e5e:	4313      	orrs	r3, r2
   11e60:	f88d 3015 	strb.w	r3, [sp, #21]

    // Set baud rate
    uart[channel_]->LCR = kDlabBit;
   11e64:	9b01      	ldr	r3, [sp, #4]
   11e66:	7a1b      	ldrb	r3, [r3, #8]
   11e68:	461a      	mov	r2, r3
   11e6a:	4b19      	ldr	r3, [pc, #100]	; (11ed0 <Uart::SetBaudRate(unsigned long)+0xc8>)
   11e6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   11e70:	2280      	movs	r2, #128	; 0x80
   11e72:	731a      	strb	r2, [r3, #12]
    uart[channel_]->DLM = dlm;
   11e74:	9b01      	ldr	r3, [sp, #4]
   11e76:	7a1b      	ldrb	r3, [r3, #8]
   11e78:	461a      	mov	r2, r3
   11e7a:	4b15      	ldr	r3, [pc, #84]	; (11ed0 <Uart::SetBaudRate(unsigned long)+0xc8>)
   11e7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   11e80:	f89d 2017 	ldrb.w	r2, [sp, #23]
   11e84:	711a      	strb	r2, [r3, #4]
    uart[channel_]->DLL = dll;
   11e86:	9b01      	ldr	r3, [sp, #4]
   11e88:	7a1b      	ldrb	r3, [r3, #8]
   11e8a:	461a      	mov	r2, r3
   11e8c:	4b10      	ldr	r3, [pc, #64]	; (11ed0 <Uart::SetBaudRate(unsigned long)+0xc8>)
   11e8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   11e92:	f89d 2016 	ldrb.w	r2, [sp, #22]
   11e96:	701a      	strb	r2, [r3, #0]
    uart[channel_]->FDR = fdr;
   11e98:	9b01      	ldr	r3, [sp, #4]
   11e9a:	7a1b      	ldrb	r3, [r3, #8]
   11e9c:	461a      	mov	r2, r3
   11e9e:	4b0c      	ldr	r3, [pc, #48]	; (11ed0 <Uart::SetBaudRate(unsigned long)+0xc8>)
   11ea0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   11ea4:	f89d 2015 	ldrb.w	r2, [sp, #21]
   11ea8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    uart[channel_]->LCR = kStandardUart;
   11eac:	9b01      	ldr	r3, [sp, #4]
   11eae:	7a1b      	ldrb	r3, [r3, #8]
   11eb0:	461a      	mov	r2, r3
   11eb2:	4b07      	ldr	r3, [pc, #28]	; (11ed0 <Uart::SetBaudRate(unsigned long)+0xc8>)
   11eb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   11eb8:	2203      	movs	r2, #3
   11eba:	731a      	strb	r2, [r3, #12]
   11ebc:	4623      	mov	r3, r4
   11ebe:	4619      	mov	r1, r3
   11ec0:	4802      	ldr	r0, [pc, #8]	; (11ecc <Uart::SetBaudRate(unsigned long)+0xc4>)
   11ec2:	f001 f92d 	bl	13120 <__cyg_profile_func_exit>
  }
   11ec6:	bf00      	nop
   11ec8:	b008      	add	sp, #32
   11eca:	bd10      	pop	{r4, pc}
   11ecc:	00011e09 	.word	0x00011e09
   11ed0:	10000024 	.word	0x10000024

00011ed4 <Uart::Initialize(unsigned long)>:

  bool Initialize(uint32_t baud_rate) override
   11ed4:	b530      	push	{r4, r5, lr}
   11ed6:	b085      	sub	sp, #20
   11ed8:	4675      	mov	r5, lr
   11eda:	9001      	str	r0, [sp, #4]
   11edc:	9100      	str	r1, [sp, #0]
   11ede:	462b      	mov	r3, r5
   11ee0:	4619      	mov	r1, r3
   11ee2:	4830      	ldr	r0, [pc, #192]	; (11fa4 <Uart::Initialize(unsigned long)+0xd0>)
   11ee4:	f001 f908 	bl	130f8 <__cyg_profile_func_enter>
  {
    constexpr uint8_t kFIFOEnableAndReset = 0b111;
   11ee8:	2307      	movs	r3, #7
   11eea:	f88d 300f 	strb.w	r3, [sp, #15]
    // Powering the port
    PowerUpPeripheral(kPowerbit[channel_]);
   11eee:	9b01      	ldr	r3, [sp, #4]
   11ef0:	1d18      	adds	r0, r3, #4
   11ef2:	9b01      	ldr	r3, [sp, #4]
   11ef4:	685b      	ldr	r3, [r3, #4]
   11ef6:	3314      	adds	r3, #20
   11ef8:	681b      	ldr	r3, [r3, #0]
   11efa:	9a01      	ldr	r2, [sp, #4]
   11efc:	7a12      	ldrb	r2, [r2, #8]
   11efe:	0092      	lsls	r2, r2, #2
   11f00:	4929      	ldr	r1, [pc, #164]	; (11fa8 <Uart::Initialize(unsigned long)+0xd4>)
   11f02:	440a      	add	r2, r1
   11f04:	4611      	mov	r1, r2
   11f06:	4798      	blx	r3
    // Setting the pin functions and modes
    rx_->SetPinFunction(kRxUartPortFunction[channel_]);
   11f08:	9b01      	ldr	r3, [sp, #4]
   11f0a:	6918      	ldr	r0, [r3, #16]
   11f0c:	9b01      	ldr	r3, [sp, #4]
   11f0e:	691b      	ldr	r3, [r3, #16]
   11f10:	681b      	ldr	r3, [r3, #0]
   11f12:	681b      	ldr	r3, [r3, #0]
   11f14:	9a01      	ldr	r2, [sp, #4]
   11f16:	7a12      	ldrb	r2, [r2, #8]
   11f18:	4611      	mov	r1, r2
   11f1a:	4a24      	ldr	r2, [pc, #144]	; (11fac <Uart::Initialize(unsigned long)+0xd8>)
   11f1c:	5c52      	ldrb	r2, [r2, r1]
   11f1e:	4611      	mov	r1, r2
   11f20:	4798      	blx	r3
    tx_->SetPinFunction(kTxUartPortFunction[channel_]);
   11f22:	9b01      	ldr	r3, [sp, #4]
   11f24:	68d8      	ldr	r0, [r3, #12]
   11f26:	9b01      	ldr	r3, [sp, #4]
   11f28:	68db      	ldr	r3, [r3, #12]
   11f2a:	681b      	ldr	r3, [r3, #0]
   11f2c:	681b      	ldr	r3, [r3, #0]
   11f2e:	9a01      	ldr	r2, [sp, #4]
   11f30:	7a12      	ldrb	r2, [r2, #8]
   11f32:	4611      	mov	r1, r2
   11f34:	4a1e      	ldr	r2, [pc, #120]	; (11fb0 <Uart::Initialize(unsigned long)+0xdc>)
   11f36:	5c52      	ldrb	r2, [r2, r1]
   11f38:	4611      	mov	r1, r2
   11f3a:	4798      	blx	r3
    rx_->SetMode(PinInterface::Mode::kPullUp);
   11f3c:	9b01      	ldr	r3, [sp, #4]
   11f3e:	691a      	ldr	r2, [r3, #16]
   11f40:	9b01      	ldr	r3, [sp, #4]
   11f42:	691b      	ldr	r3, [r3, #16]
   11f44:	681b      	ldr	r3, [r3, #0]
   11f46:	3304      	adds	r3, #4
   11f48:	681b      	ldr	r3, [r3, #0]
   11f4a:	2102      	movs	r1, #2
   11f4c:	4610      	mov	r0, r2
   11f4e:	4798      	blx	r3
    tx_->SetMode(PinInterface::Mode::kPullUp);
   11f50:	9b01      	ldr	r3, [sp, #4]
   11f52:	68da      	ldr	r2, [r3, #12]
   11f54:	9b01      	ldr	r3, [sp, #4]
   11f56:	68db      	ldr	r3, [r3, #12]
   11f58:	681b      	ldr	r3, [r3, #0]
   11f5a:	3304      	adds	r3, #4
   11f5c:	681b      	ldr	r3, [r3, #0]
   11f5e:	2102      	movs	r1, #2
   11f60:	4610      	mov	r0, r2
   11f62:	4798      	blx	r3
    // Baud rate setting
    SetBaudRate(baud_rate);
   11f64:	9900      	ldr	r1, [sp, #0]
   11f66:	9801      	ldr	r0, [sp, #4]
   11f68:	f7ff ff4e 	bl	11e08 <Uart::SetBaudRate(unsigned long)>
    uart[channel_]->FCR |= kFIFOEnableAndReset;
   11f6c:	9b01      	ldr	r3, [sp, #4]
   11f6e:	7a1b      	ldrb	r3, [r3, #8]
   11f70:	461a      	mov	r2, r3
   11f72:	4b10      	ldr	r3, [pc, #64]	; (11fb4 <Uart::Initialize(unsigned long)+0xe0>)
   11f74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   11f78:	7a1b      	ldrb	r3, [r3, #8]
   11f7a:	b2da      	uxtb	r2, r3
   11f7c:	9b01      	ldr	r3, [sp, #4]
   11f7e:	7a1b      	ldrb	r3, [r3, #8]
   11f80:	4619      	mov	r1, r3
   11f82:	4b0c      	ldr	r3, [pc, #48]	; (11fb4 <Uart::Initialize(unsigned long)+0xe0>)
   11f84:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   11f88:	f042 0207 	orr.w	r2, r2, #7
   11f8c:	b2d2      	uxtb	r2, r2
   11f8e:	721a      	strb	r2, [r3, #8]
    return true;
   11f90:	2401      	movs	r4, #1
   11f92:	462b      	mov	r3, r5
   11f94:	4619      	mov	r1, r3
   11f96:	4803      	ldr	r0, [pc, #12]	; (11fa4 <Uart::Initialize(unsigned long)+0xd0>)
   11f98:	f001 f8c2 	bl	13120 <__cyg_profile_func_exit>
   11f9c:	4623      	mov	r3, r4
  }
   11f9e:	4618      	mov	r0, r3
   11fa0:	b005      	add	sp, #20
   11fa2:	bd30      	pop	{r4, r5, pc}
   11fa4:	00011ed5 	.word	0x00011ed5
   11fa8:	00017cf4 	.word	0x00017cf4
   11fac:	00017cf0 	.word	0x00017cf0
   11fb0:	00017cec 	.word	0x00017cec
   11fb4:	10000024 	.word	0x10000024

00011fb8 <Uart::Send(unsigned char)::{lambda()#1}::operator()() const>:

  void Send(uint8_t data) override
  {
    uart[channel_]->THR              = data;
    auto wait_for_transfer_to_finish = [this]() -> bool {
   11fb8:	b530      	push	{r4, r5, lr}
   11fba:	b083      	sub	sp, #12
   11fbc:	4675      	mov	r5, lr
   11fbe:	9001      	str	r0, [sp, #4]
   11fc0:	462b      	mov	r3, r5
   11fc2:	4619      	mov	r1, r3
   11fc4:	480d      	ldr	r0, [pc, #52]	; (11ffc <Uart::Send(unsigned char)::{lambda()#1}::operator()() const+0x44>)
   11fc6:	f001 f897 	bl	130f8 <__cyg_profile_func_enter>
   11fca:	9b01      	ldr	r3, [sp, #4]
   11fcc:	681b      	ldr	r3, [r3, #0]
      return (uart[channel_]->LSR & (1 << 5));
   11fce:	7a1b      	ldrb	r3, [r3, #8]
   11fd0:	461a      	mov	r2, r3
   11fd2:	4b0b      	ldr	r3, [pc, #44]	; (12000 <Uart::Send(unsigned char)::{lambda()#1}::operator()() const+0x48>)
   11fd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   11fd8:	7d1b      	ldrb	r3, [r3, #20]
   11fda:	b2db      	uxtb	r3, r3
   11fdc:	f003 0320 	and.w	r3, r3, #32
   11fe0:	2b00      	cmp	r3, #0
   11fe2:	bf14      	ite	ne
   11fe4:	2301      	movne	r3, #1
   11fe6:	2300      	moveq	r3, #0
   11fe8:	b2dc      	uxtb	r4, r3
   11fea:	462b      	mov	r3, r5
   11fec:	4619      	mov	r1, r3
   11fee:	4803      	ldr	r0, [pc, #12]	; (11ffc <Uart::Send(unsigned char)::{lambda()#1}::operator()() const+0x44>)
   11ff0:	f001 f896 	bl	13120 <__cyg_profile_func_exit>
   11ff4:	4623      	mov	r3, r4
    };
   11ff6:	4618      	mov	r0, r3
   11ff8:	b003      	add	sp, #12
   11ffa:	bd30      	pop	{r4, r5, pc}
   11ffc:	00011fb9 	.word	0x00011fb9
   12000:	10000024 	.word	0x10000024

00012004 <Uart::Send(unsigned char)>:
  void Send(uint8_t data) override
   12004:	e92d 4830 	stmdb	sp!, {r4, r5, fp, lr}
   12008:	b08a      	sub	sp, #40	; 0x28
   1200a:	4675      	mov	r5, lr
   1200c:	9001      	str	r0, [sp, #4]
   1200e:	460b      	mov	r3, r1
   12010:	f88d 3003 	strb.w	r3, [sp, #3]
   12014:	462b      	mov	r3, r5
   12016:	4619      	mov	r1, r3
   12018:	4831      	ldr	r0, [pc, #196]	; (120e0 <Uart::Send(unsigned char)+0xdc>)
   1201a:	f001 f86d 	bl	130f8 <__cyg_profile_func_enter>
    uart[channel_]->THR              = data;
   1201e:	9b01      	ldr	r3, [sp, #4]
   12020:	7a1b      	ldrb	r3, [r3, #8]
   12022:	461a      	mov	r2, r3
   12024:	4b2f      	ldr	r3, [pc, #188]	; (120e4 <Uart::Send(unsigned char)+0xe0>)
   12026:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   1202a:	f89d 2003 	ldrb.w	r2, [sp, #3]
   1202e:	701a      	strb	r2, [r3, #0]
    };
   12030:	9b01      	ldr	r3, [sp, #4]
   12032:	9304      	str	r3, [sp, #16]
   12034:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   12038:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   1203c:	e9cd 3408 	strd	r3, r4, [sp, #32]
   12040:	9b04      	ldr	r3, [sp, #16]
   12042:	9303      	str	r3, [sp, #12]
   12044:	462b      	mov	r3, r5
   12046:	4619      	mov	r1, r3
   12048:	4827      	ldr	r0, [pc, #156]	; (120e8 <Uart::Send(unsigned char)+0xe4>)
   1204a:	f001 f855 	bl	130f8 <__cyg_profile_func_enter>
  uint64_t timeout_time = 0;
   1204e:	f04f 0300 	mov.w	r3, #0
   12052:	f04f 0400 	mov.w	r4, #0
   12056:	e9cd 3406 	strd	r3, r4, [sp, #24]
  if (timeout == kMaxWait)
   1205a:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   1205e:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
   12062:	bf08      	it	eq
   12064:	f1b3 3fff 	cmpeq.w	r3, #4294967295	; 0xffffffff
   12068:	d106      	bne.n	12078 <Uart::Send(unsigned char)+0x74>
    timeout_time = kMaxWait;
   1206a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1206e:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   12072:	e9cd 3406 	strd	r3, r4, [sp, #24]
   12076:	e00b      	b.n	12090 <Uart::Send(unsigned char)+0x8c>
    timeout_time = Milliseconds() + timeout;
   12078:	f7fe fc06 	bl	10888 <Milliseconds()>
   1207c:	460a      	mov	r2, r1
   1207e:	4601      	mov	r1, r0
   12080:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   12084:	eb13 0b01 	adds.w	fp, r3, r1
   12088:	eb44 0c02 	adc.w	ip, r4, r2
   1208c:	e9cd bc06 	strd	fp, ip, [sp, #24]
  Status status = Status::kTimedOut;
   12090:	2301      	movs	r3, #1
   12092:	9305      	str	r3, [sp, #20]
  while (Milliseconds() < timeout_time)
   12094:	f7fe fbf8 	bl	10888 <Milliseconds()>
   12098:	460a      	mov	r2, r1
   1209a:	4601      	mov	r1, r0
   1209c:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
   120a0:	42a2      	cmp	r2, r4
   120a2:	bf08      	it	eq
   120a4:	4299      	cmpeq	r1, r3
   120a6:	bf34      	ite	cc
   120a8:	2301      	movcc	r3, #1
   120aa:	2300      	movcs	r3, #0
   120ac:	b2db      	uxtb	r3, r3
   120ae:	2b00      	cmp	r3, #0
   120b0:	d008      	beq.n	120c4 <Uart::Send(unsigned char)+0xc0>
    if (is_done())
   120b2:	ab03      	add	r3, sp, #12
   120b4:	4618      	mov	r0, r3
   120b6:	f7ff ff7f 	bl	11fb8 <Uart::Send(unsigned char)::{lambda()#1}::operator()() const>
   120ba:	4603      	mov	r3, r0
   120bc:	2b00      	cmp	r3, #0
   120be:	d0e9      	beq.n	12094 <Uart::Send(unsigned char)+0x90>
      status = Status::kSuccess;
   120c0:	2300      	movs	r3, #0
   120c2:	9305      	str	r3, [sp, #20]
   120c4:	462b      	mov	r3, r5
   120c6:	4619      	mov	r1, r3
   120c8:	4807      	ldr	r0, [pc, #28]	; (120e8 <Uart::Send(unsigned char)+0xe4>)
   120ca:	f001 f829 	bl	13120 <__cyg_profile_func_exit>
   120ce:	462b      	mov	r3, r5
   120d0:	4619      	mov	r1, r3
   120d2:	4803      	ldr	r0, [pc, #12]	; (120e0 <Uart::Send(unsigned char)+0xdc>)
   120d4:	f001 f824 	bl	13120 <__cyg_profile_func_exit>
    Wait(kMaxWait, wait_for_transfer_to_finish);
  }
   120d8:	bf00      	nop
   120da:	b00a      	add	sp, #40	; 0x28
   120dc:	e8bd 8830 	ldmia.w	sp!, {r4, r5, fp, pc}
   120e0:	00012005 	.word	0x00012005
   120e4:	10000024 	.word	0x10000024
   120e8:	00012901 	.word	0x00012901

000120ec <Uart::Receive(unsigned long)::{lambda()#1}::operator()() const>:

  uint8_t Receive([[maybe_unused]] uint32_t timeout = 0x7FFFFFFF) override
  {
    uint8_t receiver   = '\xFF';
    auto byte_recieved = [this]() -> bool {
   120ec:	b530      	push	{r4, r5, lr}
   120ee:	b083      	sub	sp, #12
   120f0:	4675      	mov	r5, lr
   120f2:	9001      	str	r0, [sp, #4]
   120f4:	462b      	mov	r3, r5
   120f6:	4619      	mov	r1, r3
   120f8:	480d      	ldr	r0, [pc, #52]	; (12130 <Uart::Receive(unsigned long)::{lambda()#1}::operator()() const+0x44>)
   120fa:	f000 fffd 	bl	130f8 <__cyg_profile_func_enter>
   120fe:	9b01      	ldr	r3, [sp, #4]
   12100:	681b      	ldr	r3, [r3, #0]
      return (uart[channel_]->LSR & (1 << 0));
   12102:	7a1b      	ldrb	r3, [r3, #8]
   12104:	461a      	mov	r2, r3
   12106:	4b0b      	ldr	r3, [pc, #44]	; (12134 <Uart::Receive(unsigned long)::{lambda()#1}::operator()() const+0x48>)
   12108:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   1210c:	7d1b      	ldrb	r3, [r3, #20]
   1210e:	b2db      	uxtb	r3, r3
   12110:	f003 0301 	and.w	r3, r3, #1
   12114:	2b00      	cmp	r3, #0
   12116:	bf14      	ite	ne
   12118:	2301      	movne	r3, #1
   1211a:	2300      	moveq	r3, #0
   1211c:	b2dc      	uxtb	r4, r3
   1211e:	462b      	mov	r3, r5
   12120:	4619      	mov	r1, r3
   12122:	4803      	ldr	r0, [pc, #12]	; (12130 <Uart::Receive(unsigned long)::{lambda()#1}::operator()() const+0x44>)
   12124:	f000 fffc 	bl	13120 <__cyg_profile_func_exit>
   12128:	4623      	mov	r3, r4
    };
   1212a:	4618      	mov	r0, r3
   1212c:	b003      	add	sp, #12
   1212e:	bd30      	pop	{r4, r5, pc}
   12130:	000120ed 	.word	0x000120ed
   12134:	10000024 	.word	0x10000024

00012138 <Uart::Receive(unsigned long)>:
  uint8_t Receive([[maybe_unused]] uint32_t timeout = 0x7FFFFFFF) override
   12138:	e92d 4830 	stmdb	sp!, {r4, r5, fp, lr}
   1213c:	b08c      	sub	sp, #48	; 0x30
   1213e:	4675      	mov	r5, lr
   12140:	9001      	str	r0, [sp, #4]
   12142:	9100      	str	r1, [sp, #0]
   12144:	462b      	mov	r3, r5
   12146:	4619      	mov	r1, r3
   12148:	4836      	ldr	r0, [pc, #216]	; (12224 <Uart::Receive(unsigned long)+0xec>)
   1214a:	f000 ffd5 	bl	130f8 <__cyg_profile_func_enter>
    uint8_t receiver   = '\xFF';
   1214e:	23ff      	movs	r3, #255	; 0xff
   12150:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
    };
   12154:	9b01      	ldr	r3, [sp, #4]
   12156:	9304      	str	r3, [sp, #16]

    Status status = Wait(timeout, byte_recieved);
   12158:	9b00      	ldr	r3, [sp, #0]
   1215a:	f04f 0400 	mov.w	r4, #0
   1215e:	e9cd 3408 	strd	r3, r4, [sp, #32]
   12162:	9b04      	ldr	r3, [sp, #16]
   12164:	9303      	str	r3, [sp, #12]
   12166:	462b      	mov	r3, r5
   12168:	4619      	mov	r1, r3
   1216a:	482f      	ldr	r0, [pc, #188]	; (12228 <Uart::Receive(unsigned long)+0xf0>)
   1216c:	f000 ffc4 	bl	130f8 <__cyg_profile_func_enter>
  uint64_t timeout_time = 0;
   12170:	f04f 0300 	mov.w	r3, #0
   12174:	f04f 0400 	mov.w	r4, #0
   12178:	e9cd 3406 	strd	r3, r4, [sp, #24]
  if (timeout == kMaxWait)
   1217c:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   12180:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
   12184:	bf08      	it	eq
   12186:	f1b3 3fff 	cmpeq.w	r3, #4294967295	; 0xffffffff
   1218a:	d106      	bne.n	1219a <Uart::Receive(unsigned long)+0x62>
    timeout_time = kMaxWait;
   1218c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   12190:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   12194:	e9cd 3406 	strd	r3, r4, [sp, #24]
   12198:	e00b      	b.n	121b2 <Uart::Receive(unsigned long)+0x7a>
    timeout_time = Milliseconds() + timeout;
   1219a:	f7fe fb75 	bl	10888 <Milliseconds()>
   1219e:	460a      	mov	r2, r1
   121a0:	4601      	mov	r1, r0
   121a2:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   121a6:	eb13 0b01 	adds.w	fp, r3, r1
   121aa:	eb44 0c02 	adc.w	ip, r4, r2
   121ae:	e9cd bc06 	strd	fp, ip, [sp, #24]
  Status status = Status::kTimedOut;
   121b2:	2301      	movs	r3, #1
   121b4:	9305      	str	r3, [sp, #20]
  while (Milliseconds() < timeout_time)
   121b6:	f7fe fb67 	bl	10888 <Milliseconds()>
   121ba:	460a      	mov	r2, r1
   121bc:	4601      	mov	r1, r0
   121be:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
   121c2:	42a2      	cmp	r2, r4
   121c4:	bf08      	it	eq
   121c6:	4299      	cmpeq	r1, r3
   121c8:	bf34      	ite	cc
   121ca:	2301      	movcc	r3, #1
   121cc:	2300      	movcs	r3, #0
   121ce:	b2db      	uxtb	r3, r3
   121d0:	2b00      	cmp	r3, #0
   121d2:	d008      	beq.n	121e6 <Uart::Receive(unsigned long)+0xae>
    if (is_done())
   121d4:	ab03      	add	r3, sp, #12
   121d6:	4618      	mov	r0, r3
   121d8:	f7ff ff88 	bl	120ec <Uart::Receive(unsigned long)::{lambda()#1}::operator()() const>
   121dc:	4603      	mov	r3, r0
   121de:	2b00      	cmp	r3, #0
   121e0:	d0e9      	beq.n	121b6 <Uart::Receive(unsigned long)+0x7e>
      status = Status::kSuccess;
   121e2:	2300      	movs	r3, #0
   121e4:	9305      	str	r3, [sp, #20]
  return status;
   121e6:	9c05      	ldr	r4, [sp, #20]
   121e8:	462b      	mov	r3, r5
   121ea:	4619      	mov	r1, r3
   121ec:	480e      	ldr	r0, [pc, #56]	; (12228 <Uart::Receive(unsigned long)+0xf0>)
   121ee:	f000 ff97 	bl	13120 <__cyg_profile_func_exit>
   121f2:	940a      	str	r4, [sp, #40]	; 0x28

    if (status == Status::kSuccess)
   121f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   121f6:	2b00      	cmp	r3, #0
   121f8:	d108      	bne.n	1220c <Uart::Receive(unsigned long)+0xd4>
    {
      receiver = static_cast<uint8_t>(uart[channel_]->RBR);
   121fa:	9b01      	ldr	r3, [sp, #4]
   121fc:	7a1b      	ldrb	r3, [r3, #8]
   121fe:	461a      	mov	r2, r3
   12200:	4b0a      	ldr	r3, [pc, #40]	; (1222c <Uart::Receive(unsigned long)+0xf4>)
   12202:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   12206:	781b      	ldrb	r3, [r3, #0]
   12208:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
    }
    return receiver;
   1220c:	f89d 402f 	ldrb.w	r4, [sp, #47]	; 0x2f
   12210:	462b      	mov	r3, r5
   12212:	4619      	mov	r1, r3
   12214:	4803      	ldr	r0, [pc, #12]	; (12224 <Uart::Receive(unsigned long)+0xec>)
   12216:	f000 ff83 	bl	13120 <__cyg_profile_func_exit>
   1221a:	4623      	mov	r3, r4
  }
   1221c:	4618      	mov	r0, r3
   1221e:	b00c      	add	sp, #48	; 0x30
   12220:	e8bd 8830 	ldmia.w	sp!, {r4, r5, fp, pc}
   12224:	00012139 	.word	0x00012139
   12228:	000129a9 	.word	0x000129a9
   1222c:	10000024 	.word	0x10000024

00012230 <Uart::FindClosestFractional(float)>:

 private:
  UartCalibration_t FindClosestFractional(float decimal)
   12230:	b510      	push	{r4, lr}
   12232:	b08a      	sub	sp, #40	; 0x28
   12234:	4674      	mov	r4, lr
   12236:	9003      	str	r0, [sp, #12]
   12238:	9102      	str	r1, [sp, #8]
   1223a:	ed8d 0a01 	vstr	s0, [sp, #4]
   1223e:	4623      	mov	r3, r4
   12240:	4619      	mov	r1, r3
   12242:	4838      	ldr	r0, [pc, #224]	; (12324 <Uart::FindClosestFractional(float)+0xf4>)
   12244:	f000 ff58 	bl	130f8 <__cyg_profile_func_enter>
  {
    UartCalibration_t result;
   12248:	9b03      	ldr	r3, [sp, #12]
   1224a:	2200      	movs	r2, #0
   1224c:	601a      	str	r2, [r3, #0]
   1224e:	9b03      	ldr	r3, [sp, #12]
   12250:	2200      	movs	r2, #0
   12252:	605a      	str	r2, [r3, #4]
   12254:	9b03      	ldr	r3, [sp, #12]
   12256:	2201      	movs	r2, #1
   12258:	609a      	str	r2, [r3, #8]
    bool finished = false;
   1225a:	2300      	movs	r3, #0
   1225c:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    for (int div = 0; div < 15 && !finished; div++)
   12260:	2300      	movs	r3, #0
   12262:	9308      	str	r3, [sp, #32]
   12264:	9b08      	ldr	r3, [sp, #32]
   12266:	2b0e      	cmp	r3, #14
   12268:	dc52      	bgt.n	12310 <Uart::FindClosestFractional(float)+0xe0>
   1226a:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   1226e:	2b00      	cmp	r3, #0
   12270:	d14e      	bne.n	12310 <Uart::FindClosestFractional(float)+0xe0>
    {
      for (int mul = div + 1; mul < 15 && !finished; mul++)
   12272:	9b08      	ldr	r3, [sp, #32]
   12274:	3301      	adds	r3, #1
   12276:	9307      	str	r3, [sp, #28]
   12278:	9b07      	ldr	r3, [sp, #28]
   1227a:	2b0e      	cmp	r3, #14
   1227c:	dc44      	bgt.n	12308 <Uart::FindClosestFractional(float)+0xd8>
   1227e:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   12282:	2b00      	cmp	r3, #0
   12284:	d140      	bne.n	12308 <Uart::FindClosestFractional(float)+0xd8>
      {
        float divf         = static_cast<float>(div);
   12286:	9b08      	ldr	r3, [sp, #32]
   12288:	ee07 3a90 	vmov	s15, r3
   1228c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   12290:	edcd 7a06 	vstr	s15, [sp, #24]
        float mulf         = static_cast<float>(mul);
   12294:	9b07      	ldr	r3, [sp, #28]
   12296:	ee07 3a90 	vmov	s15, r3
   1229a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   1229e:	edcd 7a05 	vstr	s15, [sp, #20]
        float test_decimal = 1.0f + divf / mulf;
   122a2:	eddd 6a06 	vldr	s13, [sp, #24]
   122a6:	ed9d 7a05 	vldr	s14, [sp, #20]
   122aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
   122ae:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
   122b2:	ee77 7a87 	vadd.f32	s15, s15, s14
   122b6:	edcd 7a04 	vstr	s15, [sp, #16]
        if (decimal <= test_decimal + kThreshold &&
   122ba:	eddd 7a04 	vldr	s15, [sp, #16]
   122be:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 12328 <Uart::FindClosestFractional(float)+0xf8>
   122c2:	ee77 7a87 	vadd.f32	s15, s15, s14
   122c6:	ed9d 7a01 	vldr	s14, [sp, #4]
   122ca:	eeb4 7ae7 	vcmpe.f32	s14, s15
   122ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   122d2:	d815      	bhi.n	12300 <Uart::FindClosestFractional(float)+0xd0>
            decimal >= test_decimal - kThreshold)
   122d4:	eddd 7a04 	vldr	s15, [sp, #16]
   122d8:	ed9f 7a13 	vldr	s14, [pc, #76]	; 12328 <Uart::FindClosestFractional(float)+0xf8>
   122dc:	ee77 7ac7 	vsub.f32	s15, s15, s14
        if (decimal <= test_decimal + kThreshold &&
   122e0:	ed9d 7a01 	vldr	s14, [sp, #4]
   122e4:	eeb4 7ae7 	vcmpe.f32	s14, s15
   122e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   122ec:	db08      	blt.n	12300 <Uart::FindClosestFractional(float)+0xd0>
        {
          result.divide_add = div;
   122ee:	9a08      	ldr	r2, [sp, #32]
   122f0:	9b03      	ldr	r3, [sp, #12]
   122f2:	605a      	str	r2, [r3, #4]
          result.multiply   = mul;
   122f4:	9a07      	ldr	r2, [sp, #28]
   122f6:	9b03      	ldr	r3, [sp, #12]
   122f8:	609a      	str	r2, [r3, #8]
          finished          = true;
   122fa:	2301      	movs	r3, #1
   122fc:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
      for (int mul = div + 1; mul < 15 && !finished; mul++)
   12300:	9b07      	ldr	r3, [sp, #28]
   12302:	3301      	adds	r3, #1
   12304:	9307      	str	r3, [sp, #28]
   12306:	e7b7      	b.n	12278 <Uart::FindClosestFractional(float)+0x48>
    for (int div = 0; div < 15 && !finished; div++)
   12308:	9b08      	ldr	r3, [sp, #32]
   1230a:	3301      	adds	r3, #1
   1230c:	9308      	str	r3, [sp, #32]
   1230e:	e7a9      	b.n	12264 <Uart::FindClosestFractional(float)+0x34>
        }
      }
    }
    return result;
   12310:	bf00      	nop
   12312:	4623      	mov	r3, r4
   12314:	4619      	mov	r1, r3
   12316:	4803      	ldr	r0, [pc, #12]	; (12324 <Uart::FindClosestFractional(float)+0xf4>)
   12318:	f000 ff02 	bl	13120 <__cyg_profile_func_exit>
   1231c:	bf00      	nop
  }
   1231e:	9803      	ldr	r0, [sp, #12]
   12320:	b00a      	add	sp, #40	; 0x28
   12322:	bd10      	pop	{r4, pc}
   12324:	00012231 	.word	0x00012231
   12328:	3d4ccccd 	.word	0x3d4ccccd

0001232c <Uart::DividerEstimate(float, float)>:

  float DividerEstimate(float baud_rate, float fraction_estimate = 1)
   1232c:	b510      	push	{r4, lr}
   1232e:	ed2d 8b02 	vpush	{d8}
   12332:	b086      	sub	sp, #24
   12334:	4674      	mov	r4, lr
   12336:	9003      	str	r0, [sp, #12]
   12338:	ed8d 0a02 	vstr	s0, [sp, #8]
   1233c:	edcd 0a01 	vstr	s1, [sp, #4]
   12340:	4623      	mov	r3, r4
   12342:	4619      	mov	r1, r3
   12344:	4815      	ldr	r0, [pc, #84]	; (1239c <Uart::DividerEstimate(float, float)+0x70>)
   12346:	f000 fed7 	bl	130f8 <__cyg_profile_func_enter>
  {
    float clock_frequency = static_cast<float>(GetPeripheralFrequency());
   1234a:	9b03      	ldr	r3, [sp, #12]
   1234c:	1d1a      	adds	r2, r3, #4
   1234e:	9b03      	ldr	r3, [sp, #12]
   12350:	685b      	ldr	r3, [r3, #4]
   12352:	3310      	adds	r3, #16
   12354:	681b      	ldr	r3, [r3, #0]
   12356:	4610      	mov	r0, r2
   12358:	4798      	blx	r3
   1235a:	ee07 0a90 	vmov	s15, r0
   1235e:	eef8 7a67 	vcvt.f32.u32	s15, s15
   12362:	edcd 7a05 	vstr	s15, [sp, #20]
    return clock_frequency / (16.0f * baud_rate * fraction_estimate);
   12366:	eddd 7a02 	vldr	s15, [sp, #8]
   1236a:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
   1236e:	ee27 7a87 	vmul.f32	s14, s15, s14
   12372:	eddd 7a01 	vldr	s15, [sp, #4]
   12376:	ee67 7a27 	vmul.f32	s15, s14, s15
   1237a:	ed9d 7a05 	vldr	s14, [sp, #20]
   1237e:	ee87 8a27 	vdiv.f32	s16, s14, s15
   12382:	4623      	mov	r3, r4
   12384:	4619      	mov	r1, r3
   12386:	4805      	ldr	r0, [pc, #20]	; (1239c <Uart::DividerEstimate(float, float)+0x70>)
   12388:	f000 feca 	bl	13120 <__cyg_profile_func_exit>
   1238c:	eef0 7a48 	vmov.f32	s15, s16
  }
   12390:	eeb0 0a67 	vmov.f32	s0, s15
   12394:	b006      	add	sp, #24
   12396:	ecbd 8b02 	vpop	{d8}
   1239a:	bd10      	pop	{r4, pc}
   1239c:	0001232d 	.word	0x0001232d

000123a0 <Uart::FractionalEstimate(float, float)>:

  float FractionalEstimate(float baud_rate, float divider)
   123a0:	b510      	push	{r4, lr}
   123a2:	ed2d 8b02 	vpush	{d8}
   123a6:	b086      	sub	sp, #24
   123a8:	4674      	mov	r4, lr
   123aa:	9003      	str	r0, [sp, #12]
   123ac:	ed8d 0a02 	vstr	s0, [sp, #8]
   123b0:	edcd 0a01 	vstr	s1, [sp, #4]
   123b4:	4623      	mov	r3, r4
   123b6:	4619      	mov	r1, r3
   123b8:	4815      	ldr	r0, [pc, #84]	; (12410 <Uart::FractionalEstimate(float, float)+0x70>)
   123ba:	f000 fe9d 	bl	130f8 <__cyg_profile_func_enter>
  {
    float clock_frequency = static_cast<float>(GetPeripheralFrequency());
   123be:	9b03      	ldr	r3, [sp, #12]
   123c0:	1d1a      	adds	r2, r3, #4
   123c2:	9b03      	ldr	r3, [sp, #12]
   123c4:	685b      	ldr	r3, [r3, #4]
   123c6:	3310      	adds	r3, #16
   123c8:	681b      	ldr	r3, [r3, #0]
   123ca:	4610      	mov	r0, r2
   123cc:	4798      	blx	r3
   123ce:	ee07 0a90 	vmov	s15, r0
   123d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
   123d6:	edcd 7a05 	vstr	s15, [sp, #20]
    return clock_frequency / (16.0f * baud_rate * divider);
   123da:	eddd 7a02 	vldr	s15, [sp, #8]
   123de:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
   123e2:	ee27 7a87 	vmul.f32	s14, s15, s14
   123e6:	eddd 7a01 	vldr	s15, [sp, #4]
   123ea:	ee67 7a27 	vmul.f32	s15, s14, s15
   123ee:	ed9d 7a05 	vldr	s14, [sp, #20]
   123f2:	ee87 8a27 	vdiv.f32	s16, s14, s15
   123f6:	4623      	mov	r3, r4
   123f8:	4619      	mov	r1, r3
   123fa:	4805      	ldr	r0, [pc, #20]	; (12410 <Uart::FractionalEstimate(float, float)+0x70>)
   123fc:	f000 fe90 	bl	13120 <__cyg_profile_func_exit>
   12400:	eef0 7a48 	vmov.f32	s15, s16
  }
   12404:	eeb0 0a67 	vmov.f32	s0, s15
   12408:	b006      	add	sp, #24
   1240a:	ecbd 8b02 	vpop	{d8}
   1240e:	bd10      	pop	{r4, pc}
   12410:	000123a1 	.word	0x000123a1

00012414 <Uart::IsDecmial(float)>:

  bool IsDecmial(float value)
   12414:	b530      	push	{r4, r5, lr}
   12416:	b087      	sub	sp, #28
   12418:	4675      	mov	r5, lr
   1241a:	9001      	str	r0, [sp, #4]
   1241c:	ed8d 0a00 	vstr	s0, [sp]
   12420:	462b      	mov	r3, r5
   12422:	4619      	mov	r1, r3
   12424:	4819      	ldr	r0, [pc, #100]	; (1248c <Uart::IsDecmial(float)+0x78>)
   12426:	f000 fe67 	bl	130f8 <__cyg_profile_func_enter>
  {
    bool result         = false;
   1242a:	2300      	movs	r3, #0
   1242c:	f88d 3017 	strb.w	r3, [sp, #23]
    float rounded_value = roundf(value);
   12430:	ed9d 0a00 	vldr	s0, [sp]
   12434:	f004 fe3e 	bl	170b4 <roundf>
   12438:	ed8d 0a04 	vstr	s0, [sp, #16]
    float error         = value - rounded_value;
   1243c:	ed9d 7a00 	vldr	s14, [sp]
   12440:	eddd 7a04 	vldr	s15, [sp, #16]
   12444:	ee77 7a67 	vsub.f32	s15, s14, s15
   12448:	edcd 7a03 	vstr	s15, [sp, #12]
    if (-kThreshold <= error && error <= kThreshold)
   1244c:	eddd 7a03 	vldr	s15, [sp, #12]
   12450:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 12490 <Uart::IsDecmial(float)+0x7c>
   12454:	eef4 7ac7 	vcmpe.f32	s15, s14
   12458:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1245c:	db0b      	blt.n	12476 <Uart::IsDecmial(float)+0x62>
   1245e:	eddd 7a03 	vldr	s15, [sp, #12]
   12462:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 12494 <Uart::IsDecmial(float)+0x80>
   12466:	eef4 7ac7 	vcmpe.f32	s15, s14
   1246a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1246e:	d802      	bhi.n	12476 <Uart::IsDecmial(float)+0x62>
    {
      result = true;
   12470:	2301      	movs	r3, #1
   12472:	f88d 3017 	strb.w	r3, [sp, #23]
    }
    return result;
   12476:	f89d 4017 	ldrb.w	r4, [sp, #23]
   1247a:	462b      	mov	r3, r5
   1247c:	4619      	mov	r1, r3
   1247e:	4803      	ldr	r0, [pc, #12]	; (1248c <Uart::IsDecmial(float)+0x78>)
   12480:	f000 fe4e 	bl	13120 <__cyg_profile_func_exit>
   12484:	4623      	mov	r3, r4
  }
   12486:	4618      	mov	r0, r3
   12488:	b007      	add	sp, #28
   1248a:	bd30      	pop	{r4, r5, pc}
   1248c:	00012415 	.word	0x00012415
   12490:	bd4ccccd 	.word	0xbd4ccccd
   12494:	3d4ccccd 	.word	0x3d4ccccd

00012498 <Uart::GenerateUartCalibration(float)>:

  UartCalibration_t GenerateUartCalibration(float baud_rate)
   12498:	b530      	push	{r4, r5, lr}
   1249a:	b08f      	sub	sp, #60	; 0x3c
   1249c:	4675      	mov	r5, lr
   1249e:	9007      	str	r0, [sp, #28]
   124a0:	9106      	str	r1, [sp, #24]
   124a2:	ed8d 0a05 	vstr	s0, [sp, #20]
   124a6:	462b      	mov	r3, r5
   124a8:	4619      	mov	r1, r3
   124aa:	4874      	ldr	r0, [pc, #464]	; (1267c <Uart::GenerateUartCalibration(float)+0x1e4>)
   124ac:	f000 fe24 	bl	130f8 <__cyg_profile_func_enter>
  {
    States state = States::kCalculateIntegerDivideLatch;
   124b0:	2300      	movs	r3, #0
   124b2:	930d      	str	r3, [sp, #52]	; 0x34
    UartCalibration_t uart_calibration;
   124b4:	9b07      	ldr	r3, [sp, #28]
   124b6:	2200      	movs	r2, #0
   124b8:	601a      	str	r2, [r3, #0]
   124ba:	9b07      	ldr	r3, [sp, #28]
   124bc:	2200      	movs	r2, #0
   124be:	605a      	str	r2, [r3, #4]
   124c0:	9b07      	ldr	r3, [sp, #28]
   124c2:	2201      	movs	r2, #1
   124c4:	609a      	str	r2, [r3, #8]
    float divide_estimate = 0;
   124c6:	f04f 0300 	mov.w	r3, #0
   124ca:	930c      	str	r3, [sp, #48]	; 0x30
    float decimal         = 1.5;
   124cc:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
   124d0:	930b      	str	r3, [sp, #44]	; 0x2c
    float div             = 1;
   124d2:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
   124d6:	930a      	str	r3, [sp, #40]	; 0x28
    float mul             = 2;
   124d8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   124dc:	9309      	str	r3, [sp, #36]	; 0x24
    while (state != States::kDone)
   124de:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   124e0:	2b04      	cmp	r3, #4
   124e2:	f000 80c1 	beq.w	12668 <Uart::GenerateUartCalibration(float)+0x1d0>
    {
      switch (state)
   124e6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   124e8:	2b04      	cmp	r3, #4
   124ea:	f200 80bb 	bhi.w	12664 <Uart::GenerateUartCalibration(float)+0x1cc>
   124ee:	a201      	add	r2, pc, #4	; (adr r2, 124f4 <Uart::GenerateUartCalibration(float)+0x5c>)
   124f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   124f4:	00012509 	.word	0x00012509
   124f8:	00012565 	.word	0x00012565
   124fc:	000125c5 	.word	0x000125c5
   12500:	00012635 	.word	0x00012635
   12504:	00012665 	.word	0x00012665
      {
        case States::kCalculateIntegerDivideLatch:
        {
          divide_estimate = DividerEstimate(baud_rate);
   12508:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
   1250c:	ed9d 0a05 	vldr	s0, [sp, #20]
   12510:	9806      	ldr	r0, [sp, #24]
   12512:	f7ff ff0b 	bl	1232c <Uart::DividerEstimate(float, float)>
   12516:	ed8d 0a0c 	vstr	s0, [sp, #48]	; 0x30
          if (divide_estimate < 1.0f)
   1251a:	eddd 7a0c 	vldr	s15, [sp, #48]	; 0x30
   1251e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
   12522:	eef4 7ac7 	vcmpe.f32	s15, s14
   12526:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1252a:	d505      	bpl.n	12538 <Uart::GenerateUartCalibration(float)+0xa0>
          {
            uart_calibration.divide_latch = 0;
   1252c:	9b07      	ldr	r3, [sp, #28]
   1252e:	2200      	movs	r2, #0
   12530:	601a      	str	r2, [r3, #0]
            state                         = States::kDone;
   12532:	2304      	movs	r3, #4
   12534:	930d      	str	r3, [sp, #52]	; 0x34
          }
          else
          {
            state = States::kCalculateDivideLatchWithDecimal;
          }
          break;
   12536:	e096      	b.n	12666 <Uart::GenerateUartCalibration(float)+0x1ce>
          else if (IsDecmial(divide_estimate))
   12538:	ed9d 0a0c 	vldr	s0, [sp, #48]	; 0x30
   1253c:	9806      	ldr	r0, [sp, #24]
   1253e:	f7ff ff69 	bl	12414 <Uart::IsDecmial(float)>
   12542:	4603      	mov	r3, r0
   12544:	2b00      	cmp	r3, #0
   12546:	d00a      	beq.n	1255e <Uart::GenerateUartCalibration(float)+0xc6>
                static_cast<uint32_t>(divide_estimate);
   12548:	eddd 7a0c 	vldr	s15, [sp, #48]	; 0x30
   1254c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
   12550:	ee17 2a90 	vmov	r2, s15
            uart_calibration.divide_latch =
   12554:	9b07      	ldr	r3, [sp, #28]
   12556:	601a      	str	r2, [r3, #0]
            state = States::kDone;
   12558:	2304      	movs	r3, #4
   1255a:	930d      	str	r3, [sp, #52]	; 0x34
          break;
   1255c:	e083      	b.n	12666 <Uart::GenerateUartCalibration(float)+0x1ce>
            state = States::kCalculateDivideLatchWithDecimal;
   1255e:	2301      	movs	r3, #1
   12560:	930d      	str	r3, [sp, #52]	; 0x34
          break;
   12562:	e080      	b.n	12666 <Uart::GenerateUartCalibration(float)+0x1ce>
        }
        case States::kCalculateDivideLatchWithDecimal:
        {
          divide_estimate = roundf(DividerEstimate(baud_rate, decimal));
   12564:	eddd 0a0b 	vldr	s1, [sp, #44]	; 0x2c
   12568:	ed9d 0a05 	vldr	s0, [sp, #20]
   1256c:	9806      	ldr	r0, [sp, #24]
   1256e:	f7ff fedd 	bl	1232c <Uart::DividerEstimate(float, float)>
   12572:	eef0 7a40 	vmov.f32	s15, s0
   12576:	eeb0 0a67 	vmov.f32	s0, s15
   1257a:	f004 fd9b 	bl	170b4 <roundf>
   1257e:	ed8d 0a0c 	vstr	s0, [sp, #48]	; 0x30
          decimal         = FractionalEstimate(baud_rate, divide_estimate);
   12582:	eddd 0a0c 	vldr	s1, [sp, #48]	; 0x30
   12586:	ed9d 0a05 	vldr	s0, [sp, #20]
   1258a:	9806      	ldr	r0, [sp, #24]
   1258c:	f7ff ff08 	bl	123a0 <Uart::FractionalEstimate(float, float)>
   12590:	ed8d 0a0b 	vstr	s0, [sp, #44]	; 0x2c
          if (1.1f <= decimal && decimal <= 1.9f)
   12594:	eddd 7a0b 	vldr	s15, [sp, #44]	; 0x2c
   12598:	ed9f 7a39 	vldr	s14, [pc, #228]	; 12680 <Uart::GenerateUartCalibration(float)+0x1e8>
   1259c:	eef4 7ac7 	vcmpe.f32	s15, s14
   125a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   125a4:	db0b      	blt.n	125be <Uart::GenerateUartCalibration(float)+0x126>
   125a6:	eddd 7a0b 	vldr	s15, [sp, #44]	; 0x2c
   125aa:	ed9f 7a36 	vldr	s14, [pc, #216]	; 12684 <Uart::GenerateUartCalibration(float)+0x1ec>
   125ae:	eef4 7ac7 	vcmpe.f32	s15, s14
   125b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   125b6:	d802      	bhi.n	125be <Uart::GenerateUartCalibration(float)+0x126>
          {
            state = States::kGenerateFractionFromDecimal;
   125b8:	2303      	movs	r3, #3
   125ba:	930d      	str	r3, [sp, #52]	; 0x34
          }
          else
          {
            state = States::kDecimalFailedGenerateNewDecimal;
          }
          break;
   125bc:	e053      	b.n	12666 <Uart::GenerateUartCalibration(float)+0x1ce>
            state = States::kDecimalFailedGenerateNewDecimal;
   125be:	2302      	movs	r3, #2
   125c0:	930d      	str	r3, [sp, #52]	; 0x34
          break;
   125c2:	e050      	b.n	12666 <Uart::GenerateUartCalibration(float)+0x1ce>
        }
        case States::kDecimalFailedGenerateNewDecimal:
        {
          mul += 1;
   125c4:	eddd 7a09 	vldr	s15, [sp, #36]	; 0x24
   125c8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
   125cc:	ee77 7a87 	vadd.f32	s15, s15, s14
   125d0:	edcd 7a09 	vstr	s15, [sp, #36]	; 0x24

          if (div > 15)
   125d4:	eddd 7a0a 	vldr	s15, [sp, #40]	; 0x28
   125d8:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
   125dc:	eef4 7ac7 	vcmpe.f32	s15, s14
   125e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   125e4:	dd02      	ble.n	125ec <Uart::GenerateUartCalibration(float)+0x154>
          {
            state = States::kDone;
   125e6:	2304      	movs	r3, #4
   125e8:	930d      	str	r3, [sp, #52]	; 0x34
            break;
   125ea:	e03c      	b.n	12666 <Uart::GenerateUartCalibration(float)+0x1ce>
          }
          else if (mul > 15)
   125ec:	eddd 7a09 	vldr	s15, [sp, #36]	; 0x24
   125f0:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
   125f4:	eef4 7ac7 	vcmpe.f32	s15, s14
   125f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   125fc:	dd0f      	ble.n	1261e <Uart::GenerateUartCalibration(float)+0x186>
          {
            div += 1;
   125fe:	eddd 7a0a 	vldr	s15, [sp, #40]	; 0x28
   12602:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
   12606:	ee77 7a87 	vadd.f32	s15, s15, s14
   1260a:	edcd 7a0a 	vstr	s15, [sp, #40]	; 0x28
            mul = div + 1;
   1260e:	eddd 7a0a 	vldr	s15, [sp, #40]	; 0x28
   12612:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
   12616:	ee77 7a87 	vadd.f32	s15, s15, s14
   1261a:	edcd 7a09 	vstr	s15, [sp, #36]	; 0x24
          }
          decimal = div / mul;
   1261e:	eddd 6a0a 	vldr	s13, [sp, #40]	; 0x28
   12622:	ed9d 7a09 	vldr	s14, [sp, #36]	; 0x24
   12626:	eec6 7a87 	vdiv.f32	s15, s13, s14
   1262a:	edcd 7a0b 	vstr	s15, [sp, #44]	; 0x2c
          state   = States::kCalculateDivideLatchWithDecimal;
   1262e:	2301      	movs	r3, #1
   12630:	930d      	str	r3, [sp, #52]	; 0x34
          break;
   12632:	e018      	b.n	12666 <Uart::GenerateUartCalibration(float)+0x1ce>
        }
        case States::kGenerateFractionFromDecimal:
        {
          uart_calibration = FindClosestFractional(decimal);
   12634:	9c07      	ldr	r4, [sp, #28]
   12636:	466b      	mov	r3, sp
   12638:	ed9d 0a0b 	vldr	s0, [sp, #44]	; 0x2c
   1263c:	9906      	ldr	r1, [sp, #24]
   1263e:	4618      	mov	r0, r3
   12640:	f7ff fdf6 	bl	12230 <Uart::FindClosestFractional(float)>
   12644:	466b      	mov	r3, sp
   12646:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   1264a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
          uart_calibration.divide_latch =
              static_cast<uint32_t>(divide_estimate);
   1264e:	eddd 7a0c 	vldr	s15, [sp, #48]	; 0x30
   12652:	eefc 7ae7 	vcvt.u32.f32	s15, s15
   12656:	ee17 2a90 	vmov	r2, s15
          uart_calibration.divide_latch =
   1265a:	9b07      	ldr	r3, [sp, #28]
   1265c:	601a      	str	r2, [r3, #0]
          state = States::kDone;
   1265e:	2304      	movs	r3, #4
   12660:	930d      	str	r3, [sp, #52]	; 0x34
          break;
   12662:	e000      	b.n	12666 <Uart::GenerateUartCalibration(float)+0x1ce>
        }
        case States::kDone: { break;
        }
        default: { break;
   12664:	bf00      	nop
    while (state != States::kDone)
   12666:	e73a      	b.n	124de <Uart::GenerateUartCalibration(float)+0x46>
        }
      }
    }
    return uart_calibration;
   12668:	bf00      	nop
   1266a:	462b      	mov	r3, r5
   1266c:	4619      	mov	r1, r3
   1266e:	4803      	ldr	r0, [pc, #12]	; (1267c <Uart::GenerateUartCalibration(float)+0x1e4>)
   12670:	f000 fd56 	bl	13120 <__cyg_profile_func_exit>
   12674:	bf00      	nop
  }
   12676:	9807      	ldr	r0, [sp, #28]
   12678:	b00f      	add	sp, #60	; 0x3c
   1267a:	bd30      	pop	{r4, r5, pc}
   1267c:	00012499 	.word	0x00012499
   12680:	3f8ccccd 	.word	0x3f8ccccd
   12684:	3ff33333 	.word	0x3ff33333

00012688 <(anonymous namespace)::Lpc40xxUptime()>:
{
   12688:	b538      	push	{r3, r4, r5, lr}
   1268a:	4675      	mov	r5, lr
   1268c:	462b      	mov	r3, r5
   1268e:	4619      	mov	r1, r3
   12690:	480a      	ldr	r0, [pc, #40]	; (126bc <(anonymous namespace)::Lpc40xxUptime()+0x34>)
   12692:	f000 fd31 	bl	130f8 <__cyg_profile_func_enter>
    return tim_register[channel_]->TC;
   12696:	4b0a      	ldr	r3, [pc, #40]	; (126c0 <(anonymous namespace)::Lpc40xxUptime()+0x38>)
   12698:	7a1b      	ldrb	r3, [r3, #8]
   1269a:	461a      	mov	r2, r3
   1269c:	4b09      	ldr	r3, [pc, #36]	; (126c4 <(anonymous namespace)::Lpc40xxUptime()+0x3c>)
   1269e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   126a2:	689c      	ldr	r4, [r3, #8]
   126a4:	462b      	mov	r3, r5
   126a6:	4619      	mov	r1, r3
   126a8:	4804      	ldr	r0, [pc, #16]	; (126bc <(anonymous namespace)::Lpc40xxUptime()+0x34>)
   126aa:	f000 fd39 	bl	13120 <__cyg_profile_func_exit>
  return timer0.GetTimer();
   126ae:	4623      	mov	r3, r4
   126b0:	f04f 0400 	mov.w	r4, #0
}
   126b4:	4618      	mov	r0, r3
   126b6:	4621      	mov	r1, r4
   126b8:	bd38      	pop	{r3, r4, r5, pc}
   126ba:	bf00      	nop
   126bc:	00011dcd 	.word	0x00011dcd
   126c0:	10000094 	.word	0x10000094
   126c4:	10000014 	.word	0x10000014

000126c8 <UptimeRTOS>:
{
   126c8:	b538      	push	{r3, r4, r5, lr}
   126ca:	4675      	mov	r5, lr
   126cc:	462b      	mov	r3, r5
   126ce:	4619      	mov	r1, r3
   126d0:	480a      	ldr	r0, [pc, #40]	; (126fc <UptimeRTOS+0x34>)
   126d2:	f000 fd11 	bl	130f8 <__cyg_profile_func_enter>
   126d6:	4b0a      	ldr	r3, [pc, #40]	; (12700 <UptimeRTOS+0x38>)
   126d8:	7a1b      	ldrb	r3, [r3, #8]
   126da:	461a      	mov	r2, r3
   126dc:	4b09      	ldr	r3, [pc, #36]	; (12704 <UptimeRTOS+0x3c>)
   126de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   126e2:	689c      	ldr	r4, [r3, #8]
   126e4:	462b      	mov	r3, r5
   126e6:	4619      	mov	r1, r3
   126e8:	4804      	ldr	r0, [pc, #16]	; (126fc <UptimeRTOS+0x34>)
   126ea:	f000 fd19 	bl	13120 <__cyg_profile_func_exit>
  return timer0.GetTimer();
   126ee:	4623      	mov	r3, r4
   126f0:	f04f 0400 	mov.w	r4, #0
}
   126f4:	4618      	mov	r0, r3
   126f6:	4621      	mov	r1, r4
   126f8:	bd38      	pop	{r3, r4, r5, pc}
   126fa:	bf00      	nop
   126fc:	00011dcd 	.word	0x00011dcd
   12700:	10000094 	.word	0x10000094
   12704:	10000014 	.word	0x10000014

00012708 <LowLevelInit()>:

void LowLevelInit()
{
   12708:	b500      	push	{lr}
   1270a:	b083      	sub	sp, #12
  // Set the SystemTick frequency to the RTOS tick frequency
  // It is critical that this happens before you set the system_clock, since
  // The system_timer keeps the time that the system_clock uses to delay itself.
  system_timer.SetTickFrequency(config::kRtosFrequency);
   1270c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   12710:	4822      	ldr	r0, [pc, #136]	; (1279c <LowLevelInit()+0x94>)
   12712:	f7fe fecb 	bl	114ac <SystemTimer::SetTickFrequency(unsigned long)>
  bool timer_started_successfully = system_timer.StartTimer();
   12716:	4821      	ldr	r0, [pc, #132]	; (1279c <LowLevelInit()+0x94>)
   12718:	f7fe fe7a 	bl	11410 <SystemTimer::StartTimer()>
   1271c:	4603      	mov	r3, r0
   1271e:	f88d 3007 	strb.w	r3, [sp, #7]
  SJ2_ASSERT_WARNING(timer_started_successfully,
   12722:	f89d 3007 	ldrb.w	r3, [sp, #7]
   12726:	f083 0301 	eor.w	r3, r3, #1
   1272a:	b2db      	uxtb	r3, r3
   1272c:	2b00      	cmp	r3, #0
   1272e:	d005      	beq.n	1273c <LowLevelInit()+0x34>
   12730:	23ad      	movs	r3, #173	; 0xad
   12732:	4a1b      	ldr	r2, [pc, #108]	; (127a0 <LowLevelInit()+0x98>)
   12734:	491b      	ldr	r1, [pc, #108]	; (127a4 <LowLevelInit()+0x9c>)
   12736:	481c      	ldr	r0, [pc, #112]	; (127a8 <LowLevelInit()+0xa0>)
   12738:	f001 ff3c 	bl	145b4 <printf>
                     "System Timer has FAILED to start!");
  // Set Clock Speed
  // SetClockFrequency will timeout return the offset between desire clockspeed
  // and actual clockspeed if the PLL doesn't get a frequency fix within a
  // defined timeout (see L1/system_clock.hpp:kDefaultTimeout)
  while (system_controller.SetClockFrequency(config::kSystemClockRateMhz) != 0)
   1273c:	2130      	movs	r1, #48	; 0x30
   1273e:	481b      	ldr	r0, [pc, #108]	; (127ac <LowLevelInit()+0xa4>)
   12740:	f7fe fb4c 	bl	10ddc <Lpc40xxSystemController::SetClockFrequency(unsigned char)>
   12744:	4603      	mov	r3, r0
   12746:	2b00      	cmp	r3, #0
   12748:	bf14      	ite	ne
   1274a:	2301      	movne	r3, #1
   1274c:	2300      	moveq	r3, #0
   1274e:	b2db      	uxtb	r3, r3
   12750:	2b00      	cmp	r3, #0
   12752:	d001      	beq.n	12758 <LowLevelInit()+0x50>
  {
    // Continually attempt to set the clock frequency to the desired until the
    // delta between desired and actual are 0.
    continue;
   12754:	bf00      	nop
  while (system_controller.SetClockFrequency(config::kSystemClockRateMhz) != 0)
   12756:	e7f1      	b.n	1273c <LowLevelInit()+0x34>
  }
  // Enable Peripheral Clock and set its divider to 1 meaning the clock speed
  // fed to all peripherals will be 48Mhz.
  system_controller.SetPeripheralClockDivider(1);
   12758:	2101      	movs	r1, #1
   1275a:	4814      	ldr	r0, [pc, #80]	; (127ac <LowLevelInit()+0xa4>)
   1275c:	f7fe fb86 	bl	10e6c <Lpc40xxSystemController::SetPeripheralClockDivider(unsigned char)>
  // Set System Timer frequency again, since the clock speed has changed since
  // the last time we ran this.
  system_timer.DisableTimer();
   12760:	f7fe fe04 	bl	1136c <SystemTimer::DisableTimer()>
  system_timer.SetTickFrequency(config::kRtosFrequency);
   12764:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   12768:	480c      	ldr	r0, [pc, #48]	; (1279c <LowLevelInit()+0x94>)
   1276a:	f7fe fe9f 	bl	114ac <SystemTimer::SetTickFrequency(unsigned long)>
  system_timer.StartTimer();
   1276e:	480b      	ldr	r0, [pc, #44]	; (1279c <LowLevelInit()+0x94>)
   12770:	f7fe fe4e 	bl	11410 <SystemTimer::StartTimer()>
  // Set timer0 to 1 MHz (1,000,000 Hz) so that the timer increments every 1
  // micro second.
  timer0.Initialize(1'000'000);
   12774:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   12778:	4a0d      	ldr	r2, [pc, #52]	; (127b0 <LowLevelInit()+0xa8>)
   1277a:	490e      	ldr	r1, [pc, #56]	; (127b4 <LowLevelInit()+0xac>)
   1277c:	480e      	ldr	r0, [pc, #56]	; (127b8 <LowLevelInit()+0xb0>)
   1277e:	f7ff f9f7 	bl	11b70 <Timer::Initialize(unsigned long, void (*)(), long)>
  SetUptimeFunction(Lpc40xxUptime);
   12782:	480e      	ldr	r0, [pc, #56]	; (127bc <LowLevelInit()+0xb4>)
   12784:	f7fe fb12 	bl	10dac <SetUptimeFunction(unsigned long long (*)())>
  // Set UART0 baudrate, which is required for printf and scanf to work properly
  uart0.Initialize(config::kBaudRate);
   12788:	f44f 4116 	mov.w	r1, #38400	; 0x9600
   1278c:	480c      	ldr	r0, [pc, #48]	; (127c0 <LowLevelInit()+0xb8>)
   1278e:	f7ff fba1 	bl	11ed4 <Uart::Initialize(unsigned long)>
}
   12792:	bf00      	nop
   12794:	b003      	add	sp, #12
   12796:	f85d fb04 	ldr.w	pc, [sp], #4
   1279a:	bf00      	nop
   1279c:	10000088 	.word	0x10000088
   127a0:	00017f9c 	.word	0x00017f9c
   127a4:	00017d04 	.word	0x00017d04
   127a8:	00017be4 	.word	0x00017be4
   127ac:	10000090 	.word	0x10000090
   127b0:	00011b51 	.word	0x00011b51
   127b4:	000f4240 	.word	0x000f4240
   127b8:	10000094 	.word	0x10000094
   127bc:	00012689 	.word	0x00012689
   127c0:	10000074 	.word	0x10000074

000127c4 <SystemInit>:

void SystemInit()
{
   127c4:	b508      	push	{r3, lr}
  // Transfer data section values from flash to RAM
  InitDataSection();
   127c6:	f7fd fca1 	bl	1010c <InitDataSection()>
  // Clear BSS section of RAM
  // This is required because the nano implementation of the standard C/C++
  // libraries assumes that the BSS section is initialized to 0.
  InitBssSection();
   127ca:	f7fd fce7 	bl	1019c <InitBssSection()>
  // Enable FPU (F.loating P.oint U.nit)
  // System will crash if floating point operations occur without
  // Initializing the FPU.
  InitFpu();
   127ce:	f7fd fd15 	bl	101fc <InitFpu()>
  // Initialisation C++ libraries
  __libc_init_array();
   127d2:	f004 fe77 	bl	174c4 <__libc_init_array>
  // Run LowLevel System Initialization
  LowLevelInit();
   127d6:	f7ff ff97 	bl	12708 <LowLevelInit()>
}
   127da:	bf00      	nop
   127dc:	bd08      	pop	{r3, pc}
   127de:	Address 0x00000000000127de is out of bounds.


000127e0 <ResetIsr>:
// Sets up a simple runtime environment and initializes the C/C++ library.

extern "C"
{
  void ResetIsr(void)
  {
   127e0:	b580      	push	{r7, lr}
   127e2:	b084      	sub	sp, #16
   127e4:	af00      	add	r7, sp, #0
    // The Hyperload bootloader takes up stack space to execute. The Hyperload
    // bootloader function launches this ISR manually, but it never returns thus
    // it never cleans up the memory it uses. To get that memory back, we have
    // to manually move the stack pointers back to the top of stack.
    const uint32_t kTopOfStack = reinterpret_cast<intptr_t>(&StackTop);
   127e6:	4b09      	ldr	r3, [pc, #36]	; (1280c <ResetIsr+0x2c>)
   127e8:	60fb      	str	r3, [r7, #12]
   127ea:	68fb      	ldr	r3, [r7, #12]
   127ec:	603b      	str	r3, [r7, #0]
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
   127ee:	683b      	ldr	r3, [r7, #0]
   127f0:	f383 8809 	msr	PSP, r3
   127f4:	68fb      	ldr	r3, [r7, #12]
   127f6:	607b      	str	r3, [r7, #4]

    \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0\n" : : "r" (topOfMainStack) : "sp");
   127f8:	687b      	ldr	r3, [r7, #4]
   127fa:	f383 8808 	msr	MSP, r3
    __set_PSP(kTopOfStack);
    __set_MSP(kTopOfStack);

    SystemInit();
   127fe:	f7ff ffe1 	bl	127c4 <SystemInit>
// #pragma ignored "-Wpedantic" to suppress main function call warning
#pragma GCC diagnostic push ignored "-Wpedantic"
    [[maybe_unused]] int32_t result = main();
   12802:	f7fe f909 	bl	10a18 <main>
   12806:	60b8      	str	r0, [r7, #8]
   12808:	e7fe      	b.n	12808 <ResetIsr+0x28>
   1280a:	bf00      	nop
   1280c:	10010000 	.word	0x10010000

00012810 <void Timer::TimerHandler<(TimerInterface::TimerPort)0>()>:
  static void TimerHandler()
   12810:	b510      	push	{r4, lr}
   12812:	4674      	mov	r4, lr
   12814:	4623      	mov	r3, r4
   12816:	4619      	mov	r1, r3
   12818:	480a      	ldr	r0, [pc, #40]	; (12844 <void Timer::TimerHandler<(TimerInterface::TimerPort)0>()+0x34>)
   1281a:	f000 fc6d 	bl	130f8 <__cyg_profile_func_enter>
      user_timer_isr[util::Value(port)]();
   1281e:	2000      	movs	r0, #0
   12820:	f7ff f97e 	bl	11b20 <unsigned char util::Value<TimerInterface::TimerPort, unsigned char>(TimerInterface::TimerPort)>
   12824:	4603      	mov	r3, r0
   12826:	461a      	mov	r2, r3
   12828:	4b07      	ldr	r3, [pc, #28]	; (12848 <void Timer::TimerHandler<(TimerInterface::TimerPort)0>()+0x38>)
   1282a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   1282e:	4798      	blx	r3
    ClearInterrupts<port>();
   12830:	f000 f90e 	bl	12a50 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)0>()>
   12834:	4623      	mov	r3, r4
   12836:	4619      	mov	r1, r3
   12838:	4802      	ldr	r0, [pc, #8]	; (12844 <void Timer::TimerHandler<(TimerInterface::TimerPort)0>()+0x34>)
   1283a:	f000 fc71 	bl	13120 <__cyg_profile_func_exit>
  }
   1283e:	bf00      	nop
   12840:	bd10      	pop	{r4, pc}
   12842:	bf00      	nop
   12844:	00012811 	.word	0x00012811
   12848:	100002cc 	.word	0x100002cc

0001284c <void Timer::TimerHandler<(TimerInterface::TimerPort)1>()>:
  static void TimerHandler()
   1284c:	b510      	push	{r4, lr}
   1284e:	4674      	mov	r4, lr
   12850:	4623      	mov	r3, r4
   12852:	4619      	mov	r1, r3
   12854:	480a      	ldr	r0, [pc, #40]	; (12880 <void Timer::TimerHandler<(TimerInterface::TimerPort)1>()+0x34>)
   12856:	f000 fc4f 	bl	130f8 <__cyg_profile_func_enter>
      user_timer_isr[util::Value(port)]();
   1285a:	2001      	movs	r0, #1
   1285c:	f7ff f960 	bl	11b20 <unsigned char util::Value<TimerInterface::TimerPort, unsigned char>(TimerInterface::TimerPort)>
   12860:	4603      	mov	r3, r0
   12862:	461a      	mov	r2, r3
   12864:	4b07      	ldr	r3, [pc, #28]	; (12884 <void Timer::TimerHandler<(TimerInterface::TimerPort)1>()+0x38>)
   12866:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   1286a:	4798      	blx	r3
    ClearInterrupts<port>();
   1286c:	f000 f940 	bl	12af0 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)1>()>
   12870:	4623      	mov	r3, r4
   12872:	4619      	mov	r1, r3
   12874:	4802      	ldr	r0, [pc, #8]	; (12880 <void Timer::TimerHandler<(TimerInterface::TimerPort)1>()+0x34>)
   12876:	f000 fc53 	bl	13120 <__cyg_profile_func_exit>
  }
   1287a:	bf00      	nop
   1287c:	bd10      	pop	{r4, pc}
   1287e:	bf00      	nop
   12880:	0001284d 	.word	0x0001284d
   12884:	100002cc 	.word	0x100002cc

00012888 <void Timer::TimerHandler<(TimerInterface::TimerPort)2>()>:
  static void TimerHandler()
   12888:	b510      	push	{r4, lr}
   1288a:	4674      	mov	r4, lr
   1288c:	4623      	mov	r3, r4
   1288e:	4619      	mov	r1, r3
   12890:	480a      	ldr	r0, [pc, #40]	; (128bc <void Timer::TimerHandler<(TimerInterface::TimerPort)2>()+0x34>)
   12892:	f000 fc31 	bl	130f8 <__cyg_profile_func_enter>
      user_timer_isr[util::Value(port)]();
   12896:	2002      	movs	r0, #2
   12898:	f7ff f942 	bl	11b20 <unsigned char util::Value<TimerInterface::TimerPort, unsigned char>(TimerInterface::TimerPort)>
   1289c:	4603      	mov	r3, r0
   1289e:	461a      	mov	r2, r3
   128a0:	4b07      	ldr	r3, [pc, #28]	; (128c0 <void Timer::TimerHandler<(TimerInterface::TimerPort)2>()+0x38>)
   128a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   128a6:	4798      	blx	r3
    ClearInterrupts<port>();
   128a8:	f000 f972 	bl	12b90 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)2>()>
   128ac:	4623      	mov	r3, r4
   128ae:	4619      	mov	r1, r3
   128b0:	4802      	ldr	r0, [pc, #8]	; (128bc <void Timer::TimerHandler<(TimerInterface::TimerPort)2>()+0x34>)
   128b2:	f000 fc35 	bl	13120 <__cyg_profile_func_exit>
  }
   128b6:	bf00      	nop
   128b8:	bd10      	pop	{r4, pc}
   128ba:	bf00      	nop
   128bc:	00012889 	.word	0x00012889
   128c0:	100002cc 	.word	0x100002cc

000128c4 <void Timer::TimerHandler<(TimerInterface::TimerPort)3>()>:
  static void TimerHandler()
   128c4:	b510      	push	{r4, lr}
   128c6:	4674      	mov	r4, lr
   128c8:	4623      	mov	r3, r4
   128ca:	4619      	mov	r1, r3
   128cc:	480a      	ldr	r0, [pc, #40]	; (128f8 <void Timer::TimerHandler<(TimerInterface::TimerPort)3>()+0x34>)
   128ce:	f000 fc13 	bl	130f8 <__cyg_profile_func_enter>
      user_timer_isr[util::Value(port)]();
   128d2:	2003      	movs	r0, #3
   128d4:	f7ff f924 	bl	11b20 <unsigned char util::Value<TimerInterface::TimerPort, unsigned char>(TimerInterface::TimerPort)>
   128d8:	4603      	mov	r3, r0
   128da:	461a      	mov	r2, r3
   128dc:	4b07      	ldr	r3, [pc, #28]	; (128fc <void Timer::TimerHandler<(TimerInterface::TimerPort)3>()+0x38>)
   128de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   128e2:	4798      	blx	r3
    ClearInterrupts<port>();
   128e4:	f000 f9a4 	bl	12c30 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)3>()>
   128e8:	4623      	mov	r3, r4
   128ea:	4619      	mov	r1, r3
   128ec:	4802      	ldr	r0, [pc, #8]	; (128f8 <void Timer::TimerHandler<(TimerInterface::TimerPort)3>()+0x34>)
   128ee:	f000 fc17 	bl	13120 <__cyg_profile_func_exit>
  }
   128f2:	bf00      	nop
   128f4:	bd10      	pop	{r4, pc}
   128f6:	bf00      	nop
   128f8:	000128c5 	.word	0x000128c5
   128fc:	100002cc 	.word	0x100002cc

00012900 <Status Wait<Uart::Send(unsigned char)::{lambda()#1}>(unsigned long long, Uart::Send(unsigned char)::{lambda()#1})>:
inline Status Wait(uint64_t timeout, F is_done)
   12900:	e92d 4830 	stmdb	sp!, {r4, r5, fp, lr}
   12904:	b088      	sub	sp, #32
   12906:	4675      	mov	r5, lr
   12908:	e9cd 0102 	strd	r0, r1, [sp, #8]
   1290c:	9201      	str	r2, [sp, #4]
   1290e:	462b      	mov	r3, r5
   12910:	4619      	mov	r1, r3
   12912:	4824      	ldr	r0, [pc, #144]	; (129a4 <Status Wait<Uart::Send(unsigned char)::{lambda()#1}>(unsigned long long, Uart::Send(unsigned char)::{lambda()#1})+0xa4>)
   12914:	f000 fbf0 	bl	130f8 <__cyg_profile_func_enter>
  uint64_t timeout_time = 0;
   12918:	f04f 0300 	mov.w	r3, #0
   1291c:	f04f 0400 	mov.w	r4, #0
   12920:	e9cd 3406 	strd	r3, r4, [sp, #24]
  if (timeout == kMaxWait)
   12924:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
   12928:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
   1292c:	bf08      	it	eq
   1292e:	f1b3 3fff 	cmpeq.w	r3, #4294967295	; 0xffffffff
   12932:	d106      	bne.n	12942 <Status Wait<Uart::Send(unsigned char)::{lambda()#1}>(unsigned long long, Uart::Send(unsigned char)::{lambda()#1})+0x42>
    timeout_time = kMaxWait;
   12934:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   12938:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   1293c:	e9cd 3406 	strd	r3, r4, [sp, #24]
   12940:	e00b      	b.n	1295a <Status Wait<Uart::Send(unsigned char)::{lambda()#1}>(unsigned long long, Uart::Send(unsigned char)::{lambda()#1})+0x5a>
    timeout_time = Milliseconds() + timeout;
   12942:	f7fd ffa1 	bl	10888 <Milliseconds()>
   12946:	460a      	mov	r2, r1
   12948:	4601      	mov	r1, r0
   1294a:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
   1294e:	eb13 0b01 	adds.w	fp, r3, r1
   12952:	eb44 0c02 	adc.w	ip, r4, r2
   12956:	e9cd bc06 	strd	fp, ip, [sp, #24]
  Status status = Status::kTimedOut;
   1295a:	2301      	movs	r3, #1
   1295c:	9305      	str	r3, [sp, #20]
  while (Milliseconds() < timeout_time)
   1295e:	f7fd ff93 	bl	10888 <Milliseconds()>
   12962:	460a      	mov	r2, r1
   12964:	4601      	mov	r1, r0
   12966:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
   1296a:	42a2      	cmp	r2, r4
   1296c:	bf08      	it	eq
   1296e:	4299      	cmpeq	r1, r3
   12970:	bf34      	ite	cc
   12972:	2301      	movcc	r3, #1
   12974:	2300      	movcs	r3, #0
   12976:	b2db      	uxtb	r3, r3
   12978:	2b00      	cmp	r3, #0
   1297a:	d008      	beq.n	1298e <Status Wait<Uart::Send(unsigned char)::{lambda()#1}>(unsigned long long, Uart::Send(unsigned char)::{lambda()#1})+0x8e>
    if (is_done())
   1297c:	ab01      	add	r3, sp, #4
   1297e:	4618      	mov	r0, r3
   12980:	f7ff fb1a 	bl	11fb8 <Uart::Send(unsigned char)::{lambda()#1}::operator()() const>
   12984:	4603      	mov	r3, r0
   12986:	2b00      	cmp	r3, #0
   12988:	d0e9      	beq.n	1295e <Status Wait<Uart::Send(unsigned char)::{lambda()#1}>(unsigned long long, Uart::Send(unsigned char)::{lambda()#1})+0x5e>
      status = Status::kSuccess;
   1298a:	2300      	movs	r3, #0
   1298c:	9305      	str	r3, [sp, #20]
  return status;
   1298e:	9c05      	ldr	r4, [sp, #20]
   12990:	462b      	mov	r3, r5
   12992:	4619      	mov	r1, r3
   12994:	4803      	ldr	r0, [pc, #12]	; (129a4 <Status Wait<Uart::Send(unsigned char)::{lambda()#1}>(unsigned long long, Uart::Send(unsigned char)::{lambda()#1})+0xa4>)
   12996:	f000 fbc3 	bl	13120 <__cyg_profile_func_exit>
   1299a:	4623      	mov	r3, r4
}
   1299c:	4618      	mov	r0, r3
   1299e:	b008      	add	sp, #32
   129a0:	e8bd 8830 	ldmia.w	sp!, {r4, r5, fp, pc}
   129a4:	00012901 	.word	0x00012901

000129a8 <Status Wait<Uart::Receive(unsigned long)::{lambda()#1}>(unsigned long long, Uart::Receive(unsigned long)::{lambda()#1})>:
inline Status Wait(uint64_t timeout, F is_done)
   129a8:	e92d 4830 	stmdb	sp!, {r4, r5, fp, lr}
   129ac:	b088      	sub	sp, #32
   129ae:	4675      	mov	r5, lr
   129b0:	e9cd 0102 	strd	r0, r1, [sp, #8]
   129b4:	9201      	str	r2, [sp, #4]
   129b6:	462b      	mov	r3, r5
   129b8:	4619      	mov	r1, r3
   129ba:	4824      	ldr	r0, [pc, #144]	; (12a4c <Status Wait<Uart::Receive(unsigned long)::{lambda()#1}>(unsigned long long, Uart::Receive(unsigned long)::{lambda()#1})+0xa4>)
   129bc:	f000 fb9c 	bl	130f8 <__cyg_profile_func_enter>
  uint64_t timeout_time = 0;
   129c0:	f04f 0300 	mov.w	r3, #0
   129c4:	f04f 0400 	mov.w	r4, #0
   129c8:	e9cd 3406 	strd	r3, r4, [sp, #24]
  if (timeout == kMaxWait)
   129cc:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
   129d0:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
   129d4:	bf08      	it	eq
   129d6:	f1b3 3fff 	cmpeq.w	r3, #4294967295	; 0xffffffff
   129da:	d106      	bne.n	129ea <Status Wait<Uart::Receive(unsigned long)::{lambda()#1}>(unsigned long long, Uart::Receive(unsigned long)::{lambda()#1})+0x42>
    timeout_time = kMaxWait;
   129dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   129e0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   129e4:	e9cd 3406 	strd	r3, r4, [sp, #24]
   129e8:	e00b      	b.n	12a02 <Status Wait<Uart::Receive(unsigned long)::{lambda()#1}>(unsigned long long, Uart::Receive(unsigned long)::{lambda()#1})+0x5a>
    timeout_time = Milliseconds() + timeout;
   129ea:	f7fd ff4d 	bl	10888 <Milliseconds()>
   129ee:	460a      	mov	r2, r1
   129f0:	4601      	mov	r1, r0
   129f2:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
   129f6:	eb13 0b01 	adds.w	fp, r3, r1
   129fa:	eb44 0c02 	adc.w	ip, r4, r2
   129fe:	e9cd bc06 	strd	fp, ip, [sp, #24]
  Status status = Status::kTimedOut;
   12a02:	2301      	movs	r3, #1
   12a04:	9305      	str	r3, [sp, #20]
  while (Milliseconds() < timeout_time)
   12a06:	f7fd ff3f 	bl	10888 <Milliseconds()>
   12a0a:	460a      	mov	r2, r1
   12a0c:	4601      	mov	r1, r0
   12a0e:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
   12a12:	42a2      	cmp	r2, r4
   12a14:	bf08      	it	eq
   12a16:	4299      	cmpeq	r1, r3
   12a18:	bf34      	ite	cc
   12a1a:	2301      	movcc	r3, #1
   12a1c:	2300      	movcs	r3, #0
   12a1e:	b2db      	uxtb	r3, r3
   12a20:	2b00      	cmp	r3, #0
   12a22:	d008      	beq.n	12a36 <Status Wait<Uart::Receive(unsigned long)::{lambda()#1}>(unsigned long long, Uart::Receive(unsigned long)::{lambda()#1})+0x8e>
    if (is_done())
   12a24:	ab01      	add	r3, sp, #4
   12a26:	4618      	mov	r0, r3
   12a28:	f7ff fb60 	bl	120ec <Uart::Receive(unsigned long)::{lambda()#1}::operator()() const>
   12a2c:	4603      	mov	r3, r0
   12a2e:	2b00      	cmp	r3, #0
   12a30:	d0e9      	beq.n	12a06 <Status Wait<Uart::Receive(unsigned long)::{lambda()#1}>(unsigned long long, Uart::Receive(unsigned long)::{lambda()#1})+0x5e>
      status = Status::kSuccess;
   12a32:	2300      	movs	r3, #0
   12a34:	9305      	str	r3, [sp, #20]
  return status;
   12a36:	9c05      	ldr	r4, [sp, #20]
   12a38:	462b      	mov	r3, r5
   12a3a:	4619      	mov	r1, r3
   12a3c:	4803      	ldr	r0, [pc, #12]	; (12a4c <Status Wait<Uart::Receive(unsigned long)::{lambda()#1}>(unsigned long long, Uart::Receive(unsigned long)::{lambda()#1})+0xa4>)
   12a3e:	f000 fb6f 	bl	13120 <__cyg_profile_func_exit>
   12a42:	4623      	mov	r3, r4
}
   12a44:	4618      	mov	r0, r3
   12a46:	b008      	add	sp, #32
   12a48:	e8bd 8830 	ldmia.w	sp!, {r4, r5, fp, pc}
   12a4c:	000129a9 	.word	0x000129a9

00012a50 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)0>()>:
  static void ClearInterrupts()
   12a50:	b510      	push	{r4, lr}
   12a52:	b082      	sub	sp, #8
   12a54:	4674      	mov	r4, lr
   12a56:	4623      	mov	r3, r4
   12a58:	4619      	mov	r1, r3
   12a5a:	4823      	ldr	r0, [pc, #140]	; (12ae8 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)0>()+0x98>)
   12a5c:	f000 fb4c 	bl	130f8 <__cyg_profile_func_enter>
    uint8_t channel = util::Value(port);
   12a60:	2300      	movs	r3, #0
   12a62:	f88d 3007 	strb.w	r3, [sp, #7]
    tim_register[channel]->IR |= (1 << kRegMR0);
   12a66:	f89d 3007 	ldrb.w	r3, [sp, #7]
   12a6a:	4a20      	ldr	r2, [pc, #128]	; (12aec <void Timer::ClearInterrupts<(TimerInterface::TimerPort)0>()+0x9c>)
   12a6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12a70:	681a      	ldr	r2, [r3, #0]
   12a72:	f89d 3007 	ldrb.w	r3, [sp, #7]
   12a76:	491d      	ldr	r1, [pc, #116]	; (12aec <void Timer::ClearInterrupts<(TimerInterface::TimerPort)0>()+0x9c>)
   12a78:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   12a7c:	f042 0201 	orr.w	r2, r2, #1
   12a80:	601a      	str	r2, [r3, #0]
    tim_register[channel]->IR |= (1 << kRegMR1);
   12a82:	f89d 3007 	ldrb.w	r3, [sp, #7]
   12a86:	4a19      	ldr	r2, [pc, #100]	; (12aec <void Timer::ClearInterrupts<(TimerInterface::TimerPort)0>()+0x9c>)
   12a88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12a8c:	681a      	ldr	r2, [r3, #0]
   12a8e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   12a92:	4916      	ldr	r1, [pc, #88]	; (12aec <void Timer::ClearInterrupts<(TimerInterface::TimerPort)0>()+0x9c>)
   12a94:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   12a98:	f042 0202 	orr.w	r2, r2, #2
   12a9c:	601a      	str	r2, [r3, #0]
    tim_register[channel]->IR |= (1 << kRegMR2);
   12a9e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   12aa2:	4a12      	ldr	r2, [pc, #72]	; (12aec <void Timer::ClearInterrupts<(TimerInterface::TimerPort)0>()+0x9c>)
   12aa4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12aa8:	681a      	ldr	r2, [r3, #0]
   12aaa:	f89d 3007 	ldrb.w	r3, [sp, #7]
   12aae:	490f      	ldr	r1, [pc, #60]	; (12aec <void Timer::ClearInterrupts<(TimerInterface::TimerPort)0>()+0x9c>)
   12ab0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   12ab4:	f042 0204 	orr.w	r2, r2, #4
   12ab8:	601a      	str	r2, [r3, #0]
    tim_register[channel]->IR |= (1 << kRegMR3);
   12aba:	f89d 3007 	ldrb.w	r3, [sp, #7]
   12abe:	4a0b      	ldr	r2, [pc, #44]	; (12aec <void Timer::ClearInterrupts<(TimerInterface::TimerPort)0>()+0x9c>)
   12ac0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12ac4:	681a      	ldr	r2, [r3, #0]
   12ac6:	f89d 3007 	ldrb.w	r3, [sp, #7]
   12aca:	4908      	ldr	r1, [pc, #32]	; (12aec <void Timer::ClearInterrupts<(TimerInterface::TimerPort)0>()+0x9c>)
   12acc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   12ad0:	f042 0208 	orr.w	r2, r2, #8
   12ad4:	601a      	str	r2, [r3, #0]
   12ad6:	4623      	mov	r3, r4
   12ad8:	4619      	mov	r1, r3
   12ada:	4803      	ldr	r0, [pc, #12]	; (12ae8 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)0>()+0x98>)
   12adc:	f000 fb20 	bl	13120 <__cyg_profile_func_exit>
  }
   12ae0:	bf00      	nop
   12ae2:	b002      	add	sp, #8
   12ae4:	bd10      	pop	{r4, pc}
   12ae6:	bf00      	nop
   12ae8:	00012a51 	.word	0x00012a51
   12aec:	10000014 	.word	0x10000014

00012af0 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)1>()>:
  static void ClearInterrupts()
   12af0:	b510      	push	{r4, lr}
   12af2:	b082      	sub	sp, #8
   12af4:	4674      	mov	r4, lr
   12af6:	4623      	mov	r3, r4
   12af8:	4619      	mov	r1, r3
   12afa:	4823      	ldr	r0, [pc, #140]	; (12b88 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)1>()+0x98>)
   12afc:	f000 fafc 	bl	130f8 <__cyg_profile_func_enter>
    uint8_t channel = util::Value(port);
   12b00:	2301      	movs	r3, #1
   12b02:	f88d 3007 	strb.w	r3, [sp, #7]
    tim_register[channel]->IR |= (1 << kRegMR0);
   12b06:	f89d 3007 	ldrb.w	r3, [sp, #7]
   12b0a:	4a20      	ldr	r2, [pc, #128]	; (12b8c <void Timer::ClearInterrupts<(TimerInterface::TimerPort)1>()+0x9c>)
   12b0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12b10:	681a      	ldr	r2, [r3, #0]
   12b12:	f89d 3007 	ldrb.w	r3, [sp, #7]
   12b16:	491d      	ldr	r1, [pc, #116]	; (12b8c <void Timer::ClearInterrupts<(TimerInterface::TimerPort)1>()+0x9c>)
   12b18:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   12b1c:	f042 0201 	orr.w	r2, r2, #1
   12b20:	601a      	str	r2, [r3, #0]
    tim_register[channel]->IR |= (1 << kRegMR1);
   12b22:	f89d 3007 	ldrb.w	r3, [sp, #7]
   12b26:	4a19      	ldr	r2, [pc, #100]	; (12b8c <void Timer::ClearInterrupts<(TimerInterface::TimerPort)1>()+0x9c>)
   12b28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12b2c:	681a      	ldr	r2, [r3, #0]
   12b2e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   12b32:	4916      	ldr	r1, [pc, #88]	; (12b8c <void Timer::ClearInterrupts<(TimerInterface::TimerPort)1>()+0x9c>)
   12b34:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   12b38:	f042 0202 	orr.w	r2, r2, #2
   12b3c:	601a      	str	r2, [r3, #0]
    tim_register[channel]->IR |= (1 << kRegMR2);
   12b3e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   12b42:	4a12      	ldr	r2, [pc, #72]	; (12b8c <void Timer::ClearInterrupts<(TimerInterface::TimerPort)1>()+0x9c>)
   12b44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12b48:	681a      	ldr	r2, [r3, #0]
   12b4a:	f89d 3007 	ldrb.w	r3, [sp, #7]
   12b4e:	490f      	ldr	r1, [pc, #60]	; (12b8c <void Timer::ClearInterrupts<(TimerInterface::TimerPort)1>()+0x9c>)
   12b50:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   12b54:	f042 0204 	orr.w	r2, r2, #4
   12b58:	601a      	str	r2, [r3, #0]
    tim_register[channel]->IR |= (1 << kRegMR3);
   12b5a:	f89d 3007 	ldrb.w	r3, [sp, #7]
   12b5e:	4a0b      	ldr	r2, [pc, #44]	; (12b8c <void Timer::ClearInterrupts<(TimerInterface::TimerPort)1>()+0x9c>)
   12b60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12b64:	681a      	ldr	r2, [r3, #0]
   12b66:	f89d 3007 	ldrb.w	r3, [sp, #7]
   12b6a:	4908      	ldr	r1, [pc, #32]	; (12b8c <void Timer::ClearInterrupts<(TimerInterface::TimerPort)1>()+0x9c>)
   12b6c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   12b70:	f042 0208 	orr.w	r2, r2, #8
   12b74:	601a      	str	r2, [r3, #0]
   12b76:	4623      	mov	r3, r4
   12b78:	4619      	mov	r1, r3
   12b7a:	4803      	ldr	r0, [pc, #12]	; (12b88 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)1>()+0x98>)
   12b7c:	f000 fad0 	bl	13120 <__cyg_profile_func_exit>
  }
   12b80:	bf00      	nop
   12b82:	b002      	add	sp, #8
   12b84:	bd10      	pop	{r4, pc}
   12b86:	bf00      	nop
   12b88:	00012af1 	.word	0x00012af1
   12b8c:	10000014 	.word	0x10000014

00012b90 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)2>()>:
  static void ClearInterrupts()
   12b90:	b510      	push	{r4, lr}
   12b92:	b082      	sub	sp, #8
   12b94:	4674      	mov	r4, lr
   12b96:	4623      	mov	r3, r4
   12b98:	4619      	mov	r1, r3
   12b9a:	4823      	ldr	r0, [pc, #140]	; (12c28 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)2>()+0x98>)
   12b9c:	f000 faac 	bl	130f8 <__cyg_profile_func_enter>
    uint8_t channel = util::Value(port);
   12ba0:	2302      	movs	r3, #2
   12ba2:	f88d 3007 	strb.w	r3, [sp, #7]
    tim_register[channel]->IR |= (1 << kRegMR0);
   12ba6:	f89d 3007 	ldrb.w	r3, [sp, #7]
   12baa:	4a20      	ldr	r2, [pc, #128]	; (12c2c <void Timer::ClearInterrupts<(TimerInterface::TimerPort)2>()+0x9c>)
   12bac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12bb0:	681a      	ldr	r2, [r3, #0]
   12bb2:	f89d 3007 	ldrb.w	r3, [sp, #7]
   12bb6:	491d      	ldr	r1, [pc, #116]	; (12c2c <void Timer::ClearInterrupts<(TimerInterface::TimerPort)2>()+0x9c>)
   12bb8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   12bbc:	f042 0201 	orr.w	r2, r2, #1
   12bc0:	601a      	str	r2, [r3, #0]
    tim_register[channel]->IR |= (1 << kRegMR1);
   12bc2:	f89d 3007 	ldrb.w	r3, [sp, #7]
   12bc6:	4a19      	ldr	r2, [pc, #100]	; (12c2c <void Timer::ClearInterrupts<(TimerInterface::TimerPort)2>()+0x9c>)
   12bc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12bcc:	681a      	ldr	r2, [r3, #0]
   12bce:	f89d 3007 	ldrb.w	r3, [sp, #7]
   12bd2:	4916      	ldr	r1, [pc, #88]	; (12c2c <void Timer::ClearInterrupts<(TimerInterface::TimerPort)2>()+0x9c>)
   12bd4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   12bd8:	f042 0202 	orr.w	r2, r2, #2
   12bdc:	601a      	str	r2, [r3, #0]
    tim_register[channel]->IR |= (1 << kRegMR2);
   12bde:	f89d 3007 	ldrb.w	r3, [sp, #7]
   12be2:	4a12      	ldr	r2, [pc, #72]	; (12c2c <void Timer::ClearInterrupts<(TimerInterface::TimerPort)2>()+0x9c>)
   12be4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12be8:	681a      	ldr	r2, [r3, #0]
   12bea:	f89d 3007 	ldrb.w	r3, [sp, #7]
   12bee:	490f      	ldr	r1, [pc, #60]	; (12c2c <void Timer::ClearInterrupts<(TimerInterface::TimerPort)2>()+0x9c>)
   12bf0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   12bf4:	f042 0204 	orr.w	r2, r2, #4
   12bf8:	601a      	str	r2, [r3, #0]
    tim_register[channel]->IR |= (1 << kRegMR3);
   12bfa:	f89d 3007 	ldrb.w	r3, [sp, #7]
   12bfe:	4a0b      	ldr	r2, [pc, #44]	; (12c2c <void Timer::ClearInterrupts<(TimerInterface::TimerPort)2>()+0x9c>)
   12c00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12c04:	681a      	ldr	r2, [r3, #0]
   12c06:	f89d 3007 	ldrb.w	r3, [sp, #7]
   12c0a:	4908      	ldr	r1, [pc, #32]	; (12c2c <void Timer::ClearInterrupts<(TimerInterface::TimerPort)2>()+0x9c>)
   12c0c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   12c10:	f042 0208 	orr.w	r2, r2, #8
   12c14:	601a      	str	r2, [r3, #0]
   12c16:	4623      	mov	r3, r4
   12c18:	4619      	mov	r1, r3
   12c1a:	4803      	ldr	r0, [pc, #12]	; (12c28 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)2>()+0x98>)
   12c1c:	f000 fa80 	bl	13120 <__cyg_profile_func_exit>
  }
   12c20:	bf00      	nop
   12c22:	b002      	add	sp, #8
   12c24:	bd10      	pop	{r4, pc}
   12c26:	bf00      	nop
   12c28:	00012b91 	.word	0x00012b91
   12c2c:	10000014 	.word	0x10000014

00012c30 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)3>()>:
  static void ClearInterrupts()
   12c30:	b510      	push	{r4, lr}
   12c32:	b082      	sub	sp, #8
   12c34:	4674      	mov	r4, lr
   12c36:	4623      	mov	r3, r4
   12c38:	4619      	mov	r1, r3
   12c3a:	4823      	ldr	r0, [pc, #140]	; (12cc8 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)3>()+0x98>)
   12c3c:	f000 fa5c 	bl	130f8 <__cyg_profile_func_enter>
    uint8_t channel = util::Value(port);
   12c40:	2303      	movs	r3, #3
   12c42:	f88d 3007 	strb.w	r3, [sp, #7]
    tim_register[channel]->IR |= (1 << kRegMR0);
   12c46:	f89d 3007 	ldrb.w	r3, [sp, #7]
   12c4a:	4a20      	ldr	r2, [pc, #128]	; (12ccc <void Timer::ClearInterrupts<(TimerInterface::TimerPort)3>()+0x9c>)
   12c4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12c50:	681a      	ldr	r2, [r3, #0]
   12c52:	f89d 3007 	ldrb.w	r3, [sp, #7]
   12c56:	491d      	ldr	r1, [pc, #116]	; (12ccc <void Timer::ClearInterrupts<(TimerInterface::TimerPort)3>()+0x9c>)
   12c58:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   12c5c:	f042 0201 	orr.w	r2, r2, #1
   12c60:	601a      	str	r2, [r3, #0]
    tim_register[channel]->IR |= (1 << kRegMR1);
   12c62:	f89d 3007 	ldrb.w	r3, [sp, #7]
   12c66:	4a19      	ldr	r2, [pc, #100]	; (12ccc <void Timer::ClearInterrupts<(TimerInterface::TimerPort)3>()+0x9c>)
   12c68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12c6c:	681a      	ldr	r2, [r3, #0]
   12c6e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   12c72:	4916      	ldr	r1, [pc, #88]	; (12ccc <void Timer::ClearInterrupts<(TimerInterface::TimerPort)3>()+0x9c>)
   12c74:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   12c78:	f042 0202 	orr.w	r2, r2, #2
   12c7c:	601a      	str	r2, [r3, #0]
    tim_register[channel]->IR |= (1 << kRegMR2);
   12c7e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   12c82:	4a12      	ldr	r2, [pc, #72]	; (12ccc <void Timer::ClearInterrupts<(TimerInterface::TimerPort)3>()+0x9c>)
   12c84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12c88:	681a      	ldr	r2, [r3, #0]
   12c8a:	f89d 3007 	ldrb.w	r3, [sp, #7]
   12c8e:	490f      	ldr	r1, [pc, #60]	; (12ccc <void Timer::ClearInterrupts<(TimerInterface::TimerPort)3>()+0x9c>)
   12c90:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   12c94:	f042 0204 	orr.w	r2, r2, #4
   12c98:	601a      	str	r2, [r3, #0]
    tim_register[channel]->IR |= (1 << kRegMR3);
   12c9a:	f89d 3007 	ldrb.w	r3, [sp, #7]
   12c9e:	4a0b      	ldr	r2, [pc, #44]	; (12ccc <void Timer::ClearInterrupts<(TimerInterface::TimerPort)3>()+0x9c>)
   12ca0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12ca4:	681a      	ldr	r2, [r3, #0]
   12ca6:	f89d 3007 	ldrb.w	r3, [sp, #7]
   12caa:	4908      	ldr	r1, [pc, #32]	; (12ccc <void Timer::ClearInterrupts<(TimerInterface::TimerPort)3>()+0x9c>)
   12cac:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   12cb0:	f042 0208 	orr.w	r2, r2, #8
   12cb4:	601a      	str	r2, [r3, #0]
   12cb6:	4623      	mov	r3, r4
   12cb8:	4619      	mov	r1, r3
   12cba:	4803      	ldr	r0, [pc, #12]	; (12cc8 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)3>()+0x98>)
   12cbc:	f000 fa30 	bl	13120 <__cyg_profile_func_exit>
  }
   12cc0:	bf00      	nop
   12cc2:	b002      	add	sp, #8
   12cc4:	bd10      	pop	{r4, pc}
   12cc6:	bf00      	nop
   12cc8:	00012c31 	.word	0x00012c31
   12ccc:	10000014 	.word	0x10000014

00012cd0 <__static_initialization_and_destruction_0(int, int)>:
#pragma GCC diagnostic pop
    // main() shouldn't return, but if it does, we'll just enter an infinite
    // loop
    Halt();
  }
}
   12cd0:	b082      	sub	sp, #8
   12cd2:	9001      	str	r0, [sp, #4]
   12cd4:	9100      	str	r1, [sp, #0]
   12cd6:	9b01      	ldr	r3, [sp, #4]
   12cd8:	2b01      	cmp	r3, #1
   12cda:	d15d      	bne.n	12d98 <__static_initialization_and_destruction_0(int, int)+0xc8>
   12cdc:	9b00      	ldr	r3, [sp, #0]
   12cde:	f64f 72ff 	movw	r2, #65535	; 0xffff
   12ce2:	4293      	cmp	r3, r2
   12ce4:	d158      	bne.n	12d98 <__static_initialization_and_destruction_0(int, int)+0xc8>
  inline static volatile uint32_t * match[4][4] = {
   12ce6:	4b2e      	ldr	r3, [pc, #184]	; (12da0 <__static_initialization_and_destruction_0(int, int)+0xd0>)
   12ce8:	681b      	ldr	r3, [r3, #0]
   12cea:	f003 0301 	and.w	r3, r3, #1
   12cee:	2b00      	cmp	r3, #0
   12cf0:	d152      	bne.n	12d98 <__static_initialization_and_destruction_0(int, int)+0xc8>
   12cf2:	4b2b      	ldr	r3, [pc, #172]	; (12da0 <__static_initialization_and_destruction_0(int, int)+0xd0>)
   12cf4:	2201      	movs	r2, #1
   12cf6:	601a      	str	r2, [r3, #0]
    [kTimer0] = { &tim_register[0]->MR0, &tim_register[0]->MR1,
   12cf8:	4b2a      	ldr	r3, [pc, #168]	; (12da4 <__static_initialization_and_destruction_0(int, int)+0xd4>)
   12cfa:	681b      	ldr	r3, [r3, #0]
   12cfc:	3318      	adds	r3, #24
  };
   12cfe:	4a2a      	ldr	r2, [pc, #168]	; (12da8 <__static_initialization_and_destruction_0(int, int)+0xd8>)
   12d00:	6013      	str	r3, [r2, #0]
    [kTimer0] = { &tim_register[0]->MR0, &tim_register[0]->MR1,
   12d02:	4b28      	ldr	r3, [pc, #160]	; (12da4 <__static_initialization_and_destruction_0(int, int)+0xd4>)
   12d04:	681b      	ldr	r3, [r3, #0]
   12d06:	331c      	adds	r3, #28
  };
   12d08:	4a27      	ldr	r2, [pc, #156]	; (12da8 <__static_initialization_and_destruction_0(int, int)+0xd8>)
   12d0a:	6053      	str	r3, [r2, #4]
                  &tim_register[0]->MR2, &tim_register[0]->MR3 },
   12d0c:	4b25      	ldr	r3, [pc, #148]	; (12da4 <__static_initialization_and_destruction_0(int, int)+0xd4>)
   12d0e:	681b      	ldr	r3, [r3, #0]
   12d10:	3320      	adds	r3, #32
  };
   12d12:	4a25      	ldr	r2, [pc, #148]	; (12da8 <__static_initialization_and_destruction_0(int, int)+0xd8>)
   12d14:	6093      	str	r3, [r2, #8]
                  &tim_register[0]->MR2, &tim_register[0]->MR3 },
   12d16:	4b23      	ldr	r3, [pc, #140]	; (12da4 <__static_initialization_and_destruction_0(int, int)+0xd4>)
   12d18:	681b      	ldr	r3, [r3, #0]
   12d1a:	3324      	adds	r3, #36	; 0x24
  };
   12d1c:	4a22      	ldr	r2, [pc, #136]	; (12da8 <__static_initialization_and_destruction_0(int, int)+0xd8>)
   12d1e:	60d3      	str	r3, [r2, #12]
    [kTimer1] = { &tim_register[1]->MR0, &tim_register[1]->MR1,
   12d20:	4b20      	ldr	r3, [pc, #128]	; (12da4 <__static_initialization_and_destruction_0(int, int)+0xd4>)
   12d22:	685b      	ldr	r3, [r3, #4]
   12d24:	3318      	adds	r3, #24
  };
   12d26:	4a20      	ldr	r2, [pc, #128]	; (12da8 <__static_initialization_and_destruction_0(int, int)+0xd8>)
   12d28:	6113      	str	r3, [r2, #16]
    [kTimer1] = { &tim_register[1]->MR0, &tim_register[1]->MR1,
   12d2a:	4b1e      	ldr	r3, [pc, #120]	; (12da4 <__static_initialization_and_destruction_0(int, int)+0xd4>)
   12d2c:	685b      	ldr	r3, [r3, #4]
   12d2e:	331c      	adds	r3, #28
  };
   12d30:	4a1d      	ldr	r2, [pc, #116]	; (12da8 <__static_initialization_and_destruction_0(int, int)+0xd8>)
   12d32:	6153      	str	r3, [r2, #20]
                  &tim_register[1]->MR2, &tim_register[1]->MR3 },
   12d34:	4b1b      	ldr	r3, [pc, #108]	; (12da4 <__static_initialization_and_destruction_0(int, int)+0xd4>)
   12d36:	685b      	ldr	r3, [r3, #4]
   12d38:	3320      	adds	r3, #32
  };
   12d3a:	4a1b      	ldr	r2, [pc, #108]	; (12da8 <__static_initialization_and_destruction_0(int, int)+0xd8>)
   12d3c:	6193      	str	r3, [r2, #24]
                  &tim_register[1]->MR2, &tim_register[1]->MR3 },
   12d3e:	4b19      	ldr	r3, [pc, #100]	; (12da4 <__static_initialization_and_destruction_0(int, int)+0xd4>)
   12d40:	685b      	ldr	r3, [r3, #4]
   12d42:	3324      	adds	r3, #36	; 0x24
  };
   12d44:	4a18      	ldr	r2, [pc, #96]	; (12da8 <__static_initialization_and_destruction_0(int, int)+0xd8>)
   12d46:	61d3      	str	r3, [r2, #28]
    [kTimer2] = { &tim_register[2]->MR0, &tim_register[2]->MR1,
   12d48:	4b16      	ldr	r3, [pc, #88]	; (12da4 <__static_initialization_and_destruction_0(int, int)+0xd4>)
   12d4a:	689b      	ldr	r3, [r3, #8]
   12d4c:	3318      	adds	r3, #24
  };
   12d4e:	4a16      	ldr	r2, [pc, #88]	; (12da8 <__static_initialization_and_destruction_0(int, int)+0xd8>)
   12d50:	6213      	str	r3, [r2, #32]
    [kTimer2] = { &tim_register[2]->MR0, &tim_register[2]->MR1,
   12d52:	4b14      	ldr	r3, [pc, #80]	; (12da4 <__static_initialization_and_destruction_0(int, int)+0xd4>)
   12d54:	689b      	ldr	r3, [r3, #8]
   12d56:	331c      	adds	r3, #28
  };
   12d58:	4a13      	ldr	r2, [pc, #76]	; (12da8 <__static_initialization_and_destruction_0(int, int)+0xd8>)
   12d5a:	6253      	str	r3, [r2, #36]	; 0x24
                  &tim_register[2]->MR2, &tim_register[2]->MR3 },
   12d5c:	4b11      	ldr	r3, [pc, #68]	; (12da4 <__static_initialization_and_destruction_0(int, int)+0xd4>)
   12d5e:	689b      	ldr	r3, [r3, #8]
   12d60:	3320      	adds	r3, #32
  };
   12d62:	4a11      	ldr	r2, [pc, #68]	; (12da8 <__static_initialization_and_destruction_0(int, int)+0xd8>)
   12d64:	6293      	str	r3, [r2, #40]	; 0x28
                  &tim_register[2]->MR2, &tim_register[2]->MR3 },
   12d66:	4b0f      	ldr	r3, [pc, #60]	; (12da4 <__static_initialization_and_destruction_0(int, int)+0xd4>)
   12d68:	689b      	ldr	r3, [r3, #8]
   12d6a:	3324      	adds	r3, #36	; 0x24
  };
   12d6c:	4a0e      	ldr	r2, [pc, #56]	; (12da8 <__static_initialization_and_destruction_0(int, int)+0xd8>)
   12d6e:	62d3      	str	r3, [r2, #44]	; 0x2c
    [kTimer3] = { &tim_register[3]->MR0, &tim_register[3]->MR1,
   12d70:	4b0c      	ldr	r3, [pc, #48]	; (12da4 <__static_initialization_and_destruction_0(int, int)+0xd4>)
   12d72:	68db      	ldr	r3, [r3, #12]
   12d74:	3318      	adds	r3, #24
  };
   12d76:	4a0c      	ldr	r2, [pc, #48]	; (12da8 <__static_initialization_and_destruction_0(int, int)+0xd8>)
   12d78:	6313      	str	r3, [r2, #48]	; 0x30
    [kTimer3] = { &tim_register[3]->MR0, &tim_register[3]->MR1,
   12d7a:	4b0a      	ldr	r3, [pc, #40]	; (12da4 <__static_initialization_and_destruction_0(int, int)+0xd4>)
   12d7c:	68db      	ldr	r3, [r3, #12]
   12d7e:	331c      	adds	r3, #28
  };
   12d80:	4a09      	ldr	r2, [pc, #36]	; (12da8 <__static_initialization_and_destruction_0(int, int)+0xd8>)
   12d82:	6353      	str	r3, [r2, #52]	; 0x34
                  &tim_register[3]->MR2, &tim_register[3]->MR3 }
   12d84:	4b07      	ldr	r3, [pc, #28]	; (12da4 <__static_initialization_and_destruction_0(int, int)+0xd4>)
   12d86:	68db      	ldr	r3, [r3, #12]
   12d88:	3320      	adds	r3, #32
  };
   12d8a:	4a07      	ldr	r2, [pc, #28]	; (12da8 <__static_initialization_and_destruction_0(int, int)+0xd8>)
   12d8c:	6393      	str	r3, [r2, #56]	; 0x38
                  &tim_register[3]->MR2, &tim_register[3]->MR3 }
   12d8e:	4b05      	ldr	r3, [pc, #20]	; (12da4 <__static_initialization_and_destruction_0(int, int)+0xd4>)
   12d90:	68db      	ldr	r3, [r3, #12]
   12d92:	3324      	adds	r3, #36	; 0x24
  };
   12d94:	4a04      	ldr	r2, [pc, #16]	; (12da8 <__static_initialization_and_destruction_0(int, int)+0xd8>)
   12d96:	63d3      	str	r3, [r2, #60]	; 0x3c
   12d98:	bf00      	nop
   12d9a:	b002      	add	sp, #8
   12d9c:	4770      	bx	lr
   12d9e:	bf00      	nop
   12da0:	100002dc 	.word	0x100002dc
   12da4:	10000014 	.word	0x10000014
   12da8:	1000028c 	.word	0x1000028c

00012dac <_GLOBAL__sub_I_UptimeRTOS>:
   12dac:	b508      	push	{r3, lr}
   12dae:	f64f 71ff 	movw	r1, #65535	; 0xffff
   12db2:	2001      	movs	r0, #1
   12db4:	f7ff ff8c 	bl	12cd0 <__static_initialization_and_destruction_0(int, int)>
   12db8:	bd08      	pop	{r3, pc}
   12dba:	Address 0x0000000000012dba is out of bounds.


00012dbc <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
   12dbc:	b082      	sub	sp, #8
   12dbe:	4603      	mov	r3, r0
   12dc0:	f88d 3007 	strb.w	r3, [sp, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
   12dc4:	f99d 3007 	ldrsb.w	r3, [sp, #7]
   12dc8:	f003 021f 	and.w	r2, r3, #31
   12dcc:	4905      	ldr	r1, [pc, #20]	; (12de4 <NVIC_EnableIRQ+0x28>)
   12dce:	f99d 3007 	ldrsb.w	r3, [sp, #7]
   12dd2:	095b      	lsrs	r3, r3, #5
   12dd4:	2001      	movs	r0, #1
   12dd6:	fa00 f202 	lsl.w	r2, r0, r2
   12dda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   12dde:	bf00      	nop
   12de0:	b002      	add	sp, #8
   12de2:	4770      	bx	lr
   12de4:	e000e100 	.word	0xe000e100

00012de8 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
   12de8:	b082      	sub	sp, #8
   12dea:	4603      	mov	r3, r0
   12dec:	9100      	str	r1, [sp, #0]
   12dee:	f88d 3007 	strb.w	r3, [sp, #7]
  if ((int32_t)(IRQn) < 0)
   12df2:	f99d 3007 	ldrsb.w	r3, [sp, #7]
   12df6:	2b00      	cmp	r3, #0
   12df8:	da0c      	bge.n	12e14 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   12dfa:	9b00      	ldr	r3, [sp, #0]
   12dfc:	b2da      	uxtb	r2, r3
   12dfe:	490d      	ldr	r1, [pc, #52]	; (12e34 <NVIC_SetPriority+0x4c>)
   12e00:	f99d 3007 	ldrsb.w	r3, [sp, #7]
   12e04:	f003 030f 	and.w	r3, r3, #15
   12e08:	3b04      	subs	r3, #4
   12e0a:	0152      	lsls	r2, r2, #5
   12e0c:	b2d2      	uxtb	r2, r2
   12e0e:	440b      	add	r3, r1
   12e10:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
   12e12:	e00b      	b.n	12e2c <NVIC_SetPriority+0x44>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   12e14:	9b00      	ldr	r3, [sp, #0]
   12e16:	b2db      	uxtb	r3, r3
   12e18:	4a07      	ldr	r2, [pc, #28]	; (12e38 <NVIC_SetPriority+0x50>)
   12e1a:	f99d 1007 	ldrsb.w	r1, [sp, #7]
   12e1e:	4608      	mov	r0, r1
   12e20:	015b      	lsls	r3, r3, #5
   12e22:	b2d9      	uxtb	r1, r3
   12e24:	1813      	adds	r3, r2, r0
   12e26:	460a      	mov	r2, r1
   12e28:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
   12e2c:	bf00      	nop
   12e2e:	b002      	add	sp, #8
   12e30:	4770      	bx	lr
   12e32:	bf00      	nop
   12e34:	e000ed00 	.word	0xe000ed00
   12e38:	e000e100 	.word	0xe000e100

00012e3c <InterruptLookupHandler>:
{
   12e3c:	b500      	push	{lr}
   12e3e:	b085      	sub	sp, #20
  uint8_t active_isr = (SCB->ICSR & 0xFF);
   12e40:	4b12      	ldr	r3, [pc, #72]	; (12e8c <InterruptLookupHandler+0x50>)
   12e42:	685b      	ldr	r3, [r3, #4]
   12e44:	f88d 300f 	strb.w	r3, [sp, #15]
  IsrPointer isr     = dynamic_isr_vector_table[active_isr];
   12e48:	f89d 300f 	ldrb.w	r3, [sp, #15]
   12e4c:	4a10      	ldr	r2, [pc, #64]	; (12e90 <InterruptLookupHandler+0x54>)
   12e4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12e52:	9302      	str	r3, [sp, #8]
  SJ2_ASSERT_FATAL(isr != InterruptLookupHandler,
   12e54:	9b02      	ldr	r3, [sp, #8]
   12e56:	4a0f      	ldr	r2, [pc, #60]	; (12e94 <InterruptLookupHandler+0x58>)
   12e58:	4293      	cmp	r3, r2
   12e5a:	d110      	bne.n	12e7e <InterruptLookupHandler+0x42>
   12e5c:	f89d 300f 	ldrb.w	r3, [sp, #15]
   12e60:	9300      	str	r3, [sp, #0]
   12e62:	23dd      	movs	r3, #221	; 0xdd
   12e64:	4a0c      	ldr	r2, [pc, #48]	; (12e98 <InterruptLookupHandler+0x5c>)
   12e66:	490d      	ldr	r1, [pc, #52]	; (12e9c <InterruptLookupHandler+0x60>)
   12e68:	480d      	ldr	r0, [pc, #52]	; (12ea0 <InterruptLookupHandler+0x64>)
   12e6a:	f001 fba3 	bl	145b4 <printf>
   12e6e:	480d      	ldr	r0, [pc, #52]	; (12ea4 <InterruptLookupHandler+0x68>)
   12e70:	f000 f912 	bl	13098 <puts>
   12e74:	2100      	movs	r1, #0
   12e76:	2001      	movs	r0, #1
   12e78:	f7fd ff18 	bl	10cac <debug::PrintBacktrace(bool, void*)>
   12e7c:	e7fe      	b.n	12e7c <InterruptLookupHandler+0x40>
  isr();
   12e7e:	9b02      	ldr	r3, [sp, #8]
   12e80:	4798      	blx	r3
}
   12e82:	bf00      	nop
   12e84:	b005      	add	sp, #20
   12e86:	f85d fb04 	ldr.w	pc, [sp], #4
   12e8a:	bf00      	nop
   12e8c:	e000ed00 	.word	0xe000ed00
   12e90:	100000a0 	.word	0x100000a0
   12e94:	00012e3d 	.word	0x00012e3d
   12e98:	00018218 	.word	0x00018218
   12e9c:	00018208 	.word	0x00018208
   12ea0:	000180ac 	.word	0x000180ac
   12ea4:	00018158 	.word	0x00018158

00012ea8 <RegisterIsr(IRQn, void (*)(), bool, long)>:
{
   12ea8:	b500      	push	{lr}
   12eaa:	b085      	sub	sp, #20
   12eac:	9102      	str	r1, [sp, #8]
   12eae:	9301      	str	r3, [sp, #4]
   12eb0:	4603      	mov	r3, r0
   12eb2:	f88d 300f 	strb.w	r3, [sp, #15]
   12eb6:	4613      	mov	r3, r2
   12eb8:	f88d 300e 	strb.w	r3, [sp, #14]
  dynamic_isr_vector_table[irq + kIrqOffset] = isr;
   12ebc:	f99d 300f 	ldrsb.w	r3, [sp, #15]
   12ec0:	3310      	adds	r3, #16
   12ec2:	490f      	ldr	r1, [pc, #60]	; (12f00 <RegisterIsr(IRQn, void (*)(), bool, long)+0x58>)
   12ec4:	9a02      	ldr	r2, [sp, #8]
   12ec6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  if (enable_interrupt && irq >= 0)
   12eca:	f89d 300e 	ldrb.w	r3, [sp, #14]
   12ece:	2b00      	cmp	r3, #0
   12ed0:	d008      	beq.n	12ee4 <RegisterIsr(IRQn, void (*)(), bool, long)+0x3c>
   12ed2:	f99d 300f 	ldrsb.w	r3, [sp, #15]
   12ed6:	2b00      	cmp	r3, #0
   12ed8:	db04      	blt.n	12ee4 <RegisterIsr(IRQn, void (*)(), bool, long)+0x3c>
    NVIC_EnableIRQ(irq);
   12eda:	f99d 300f 	ldrsb.w	r3, [sp, #15]
   12ede:	4618      	mov	r0, r3
   12ee0:	f7ff ff6c 	bl	12dbc <NVIC_EnableIRQ>
  if (priority > -1)
   12ee4:	9b01      	ldr	r3, [sp, #4]
   12ee6:	2b00      	cmp	r3, #0
   12ee8:	db06      	blt.n	12ef8 <RegisterIsr(IRQn, void (*)(), bool, long)+0x50>
    NVIC_SetPriority(irq, priority);
   12eea:	9a01      	ldr	r2, [sp, #4]
   12eec:	f99d 300f 	ldrsb.w	r3, [sp, #15]
   12ef0:	4611      	mov	r1, r2
   12ef2:	4618      	mov	r0, r3
   12ef4:	f7ff ff78 	bl	12de8 <NVIC_SetPriority>
}
   12ef8:	bf00      	nop
   12efa:	b005      	add	sp, #20
   12efc:	f85d fb04 	ldr.w	pc, [sp], #4
   12f00:	100000a0 	.word	0x100000a0

00012f04 <GetRegistersFromStack>:
{
   12f04:	b500      	push	{lr}
   12f06:	b08d      	sub	sp, #52	; 0x34
   12f08:	9003      	str	r0, [sp, #12]
  volatile uint32_t r0  = fault_stack_address[0];
   12f0a:	9b03      	ldr	r3, [sp, #12]
   12f0c:	681b      	ldr	r3, [r3, #0]
   12f0e:	930b      	str	r3, [sp, #44]	; 0x2c
  volatile uint32_t r1  = fault_stack_address[1];
   12f10:	9b03      	ldr	r3, [sp, #12]
   12f12:	685b      	ldr	r3, [r3, #4]
   12f14:	930a      	str	r3, [sp, #40]	; 0x28
  volatile uint32_t r2  = fault_stack_address[2];
   12f16:	9b03      	ldr	r3, [sp, #12]
   12f18:	689b      	ldr	r3, [r3, #8]
   12f1a:	9309      	str	r3, [sp, #36]	; 0x24
  volatile uint32_t r3  = fault_stack_address[3];
   12f1c:	9b03      	ldr	r3, [sp, #12]
   12f1e:	68db      	ldr	r3, [r3, #12]
   12f20:	9308      	str	r3, [sp, #32]
  volatile uint32_t r12 = fault_stack_address[4];
   12f22:	9b03      	ldr	r3, [sp, #12]
   12f24:	691b      	ldr	r3, [r3, #16]
   12f26:	9307      	str	r3, [sp, #28]
  volatile uint32_t lr = fault_stack_address[5];
   12f28:	9b03      	ldr	r3, [sp, #12]
   12f2a:	695b      	ldr	r3, [r3, #20]
   12f2c:	9306      	str	r3, [sp, #24]
  volatile uint32_t pc = fault_stack_address[6];
   12f2e:	9b03      	ldr	r3, [sp, #12]
   12f30:	699b      	ldr	r3, [r3, #24]
   12f32:	9305      	str	r3, [sp, #20]
  volatile uint32_t psr = fault_stack_address[7];
   12f34:	9b03      	ldr	r3, [sp, #12]
   12f36:	69db      	ldr	r3, [r3, #28]
   12f38:	9304      	str	r3, [sp, #16]
  printf(SJ2_BACKGROUND_RED "Hard Fault Exception Occurred!\n" SJ2_COLOR_RESET);
   12f3a:	480d      	ldr	r0, [pc, #52]	; (12f70 <GetRegistersFromStack+0x6c>)
   12f3c:	f001 fb3a 	bl	145b4 <printf>
  printf("r0: 0x%08" PRIX32 ", r1: 0x%08" PRIX32
   12f40:	990b      	ldr	r1, [sp, #44]	; 0x2c
   12f42:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   12f44:	9809      	ldr	r0, [sp, #36]	; 0x24
   12f46:	9b08      	ldr	r3, [sp, #32]
   12f48:	9300      	str	r3, [sp, #0]
   12f4a:	4603      	mov	r3, r0
   12f4c:	4809      	ldr	r0, [pc, #36]	; (12f74 <GetRegistersFromStack+0x70>)
   12f4e:	f001 fb31 	bl	145b4 <printf>
  printf("r12: 0x%08" PRIX32 ", lr: 0x%08" PRIX32
   12f52:	9907      	ldr	r1, [sp, #28]
   12f54:	9a06      	ldr	r2, [sp, #24]
   12f56:	9805      	ldr	r0, [sp, #20]
   12f58:	9b04      	ldr	r3, [sp, #16]
   12f5a:	9300      	str	r3, [sp, #0]
   12f5c:	4603      	mov	r3, r0
   12f5e:	4806      	ldr	r0, [pc, #24]	; (12f78 <GetRegistersFromStack+0x74>)
   12f60:	f001 fb28 	bl	145b4 <printf>
  debug::PrintBacktrace(true, reinterpret_cast<void *>(pc));
   12f64:	9b05      	ldr	r3, [sp, #20]
   12f66:	4619      	mov	r1, r3
   12f68:	2001      	movs	r0, #1
   12f6a:	f7fd fe9f 	bl	10cac <debug::PrintBacktrace(bool, void*)>
   12f6e:	e7fe      	b.n	12f6e <GetRegistersFromStack+0x6a>
   12f70:	00018170 	.word	0x00018170
   12f74:	0001819c 	.word	0x0001819c
   12f78:	000181d0 	.word	0x000181d0

00012f7c <FirmwareStdOut(int)>:
}
Stdout out = HostWrite;
Stdin in   = HostRead;
#else
int FirmwareStdOut(int data)
{
   12f7c:	b530      	push	{r4, r5, lr}
   12f7e:	b083      	sub	sp, #12
   12f80:	4675      	mov	r5, lr
   12f82:	9001      	str	r0, [sp, #4]
   12f84:	462b      	mov	r3, r5
   12f86:	4619      	mov	r1, r3
   12f88:	4809      	ldr	r0, [pc, #36]	; (12fb0 <FirmwareStdOut(int)+0x34>)
   12f8a:	f000 f8b5 	bl	130f8 <__cyg_profile_func_enter>
  uart0.Send(static_cast<uint8_t>(data));
   12f8e:	9b01      	ldr	r3, [sp, #4]
   12f90:	b2db      	uxtb	r3, r3
   12f92:	4619      	mov	r1, r3
   12f94:	4807      	ldr	r0, [pc, #28]	; (12fb4 <FirmwareStdOut(int)+0x38>)
   12f96:	f7ff f835 	bl	12004 <Uart::Send(unsigned char)>
  return 1;
   12f9a:	2401      	movs	r4, #1
   12f9c:	462b      	mov	r3, r5
   12f9e:	4619      	mov	r1, r3
   12fa0:	4803      	ldr	r0, [pc, #12]	; (12fb0 <FirmwareStdOut(int)+0x34>)
   12fa2:	f000 f8bd 	bl	13120 <__cyg_profile_func_exit>
   12fa6:	4623      	mov	r3, r4
}
   12fa8:	4618      	mov	r0, r3
   12faa:	b003      	add	sp, #12
   12fac:	bd30      	pop	{r4, r5, pc}
   12fae:	bf00      	nop
   12fb0:	00012f7d 	.word	0x00012f7d
   12fb4:	10000074 	.word	0x10000074

00012fb8 <_exit>:
  }
  // Dummy implementation of exit with return code placed into
  // Arm register r3
  // NOLINTNEXTLINE(readability-identifier-naming)
  void _exit([[maybe_unused]] int rc)
  {
   12fb8:	b500      	push	{lr}
   12fba:	b083      	sub	sp, #12
   12fbc:	4673      	mov	r3, lr
   12fbe:	9001      	str	r0, [sp, #4]
   12fc0:	4619      	mov	r1, r3
   12fc2:	4802      	ldr	r0, [pc, #8]	; (12fcc <_exit+0x14>)
   12fc4:	f000 f898 	bl	130f8 <__cyg_profile_func_enter>
    while (1)
    {
      continue;
   12fc8:	bf00      	nop
    while (1)
   12fca:	e7fd      	b.n	12fc8 <_exit+0x10>
   12fcc:	00012fb9 	.word	0x00012fb9

00012fd0 <_getpid>:
    }
  }
  // Dummy implementation of getpid
  // NOLINTNEXTLINE(readability-identifier-naming)
  int _getpid()
  {
   12fd0:	b538      	push	{r3, r4, r5, lr}
   12fd2:	4675      	mov	r5, lr
   12fd4:	462b      	mov	r3, r5
   12fd6:	4619      	mov	r1, r3
   12fd8:	4805      	ldr	r0, [pc, #20]	; (12ff0 <_getpid+0x20>)
   12fda:	f000 f88d 	bl	130f8 <__cyg_profile_func_enter>
    return 1;
   12fde:	2401      	movs	r4, #1
   12fe0:	462b      	mov	r3, r5
   12fe2:	4619      	mov	r1, r3
   12fe4:	4802      	ldr	r0, [pc, #8]	; (12ff0 <_getpid+0x20>)
   12fe6:	f000 f89b 	bl	13120 <__cyg_profile_func_exit>
   12fea:	4623      	mov	r3, r4
  }
   12fec:	4618      	mov	r0, r3
   12fee:	bd38      	pop	{r3, r4, r5, pc}
   12ff0:	00012fd1 	.word	0x00012fd1

00012ff4 <_kill>:
  // Dummy implementation of kill
  // NOLINTNEXTLINE(readability-identifier-naming)
  int _kill(int, int)
  {
   12ff4:	b530      	push	{r4, r5, lr}
   12ff6:	b083      	sub	sp, #12
   12ff8:	4675      	mov	r5, lr
   12ffa:	9001      	str	r0, [sp, #4]
   12ffc:	9100      	str	r1, [sp, #0]
   12ffe:	462b      	mov	r3, r5
   13000:	4619      	mov	r1, r3
   13002:	4807      	ldr	r0, [pc, #28]	; (13020 <_kill+0x2c>)
   13004:	f000 f878 	bl	130f8 <__cyg_profile_func_enter>
    return -1;
   13008:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   1300c:	462b      	mov	r3, r5
   1300e:	4619      	mov	r1, r3
   13010:	4803      	ldr	r0, [pc, #12]	; (13020 <_kill+0x2c>)
   13012:	f000 f885 	bl	13120 <__cyg_profile_func_exit>
   13016:	4623      	mov	r3, r4
  }
   13018:	4618      	mov	r0, r3
   1301a:	b003      	add	sp, #12
   1301c:	bd30      	pop	{r4, r5, pc}
   1301e:	bf00      	nop
   13020:	00012ff5 	.word	0x00012ff5

00013024 <_putchar>:
    }
    return length;
  }
  // Needed by third party printf library
  void _putchar(char character)  // NOLINT
  {
   13024:	b510      	push	{r4, lr}
   13026:	b082      	sub	sp, #8
   13028:	4674      	mov	r4, lr
   1302a:	4603      	mov	r3, r0
   1302c:	f88d 3007 	strb.w	r3, [sp, #7]
   13030:	4623      	mov	r3, r4
   13032:	4619      	mov	r1, r3
   13034:	4808      	ldr	r0, [pc, #32]	; (13058 <_putchar+0x34>)
   13036:	f000 f85f 	bl	130f8 <__cyg_profile_func_enter>
    out(character);
   1303a:	4b08      	ldr	r3, [pc, #32]	; (1305c <_putchar+0x38>)
   1303c:	681b      	ldr	r3, [r3, #0]
   1303e:	f89d 2007 	ldrb.w	r2, [sp, #7]
   13042:	4610      	mov	r0, r2
   13044:	4798      	blx	r3
   13046:	4623      	mov	r3, r4
   13048:	4619      	mov	r1, r3
   1304a:	4803      	ldr	r0, [pc, #12]	; (13058 <_putchar+0x34>)
   1304c:	f000 f868 	bl	13120 <__cyg_profile_func_exit>
  }
   13050:	bf00      	nop
   13052:	b002      	add	sp, #8
   13054:	bd10      	pop	{r4, pc}
   13056:	bf00      	nop
   13058:	00013025 	.word	0x00013025
   1305c:	10000184 	.word	0x10000184

00013060 <putchar>:

  // Overload default libnano putchar() with a more optimal version that does
  // not use dynamic memory
  int putchar(int character)  // NOLINT
  {
   13060:	b530      	push	{r4, r5, lr}
   13062:	b083      	sub	sp, #12
   13064:	4674      	mov	r4, lr
   13066:	9001      	str	r0, [sp, #4]
   13068:	4623      	mov	r3, r4
   1306a:	4619      	mov	r1, r3
   1306c:	4808      	ldr	r0, [pc, #32]	; (13090 <putchar+0x30>)
   1306e:	f000 f843 	bl	130f8 <__cyg_profile_func_enter>
    return out(character);
   13072:	4b08      	ldr	r3, [pc, #32]	; (13094 <putchar+0x34>)
   13074:	681b      	ldr	r3, [r3, #0]
   13076:	9801      	ldr	r0, [sp, #4]
   13078:	4798      	blx	r3
   1307a:	4605      	mov	r5, r0
   1307c:	4623      	mov	r3, r4
   1307e:	4619      	mov	r1, r3
   13080:	4803      	ldr	r0, [pc, #12]	; (13090 <putchar+0x30>)
   13082:	f000 f84d 	bl	13120 <__cyg_profile_func_exit>
   13086:	462b      	mov	r3, r5
  }
   13088:	4618      	mov	r0, r3
   1308a:	b003      	add	sp, #12
   1308c:	bd30      	pop	{r4, r5, pc}
   1308e:	bf00      	nop
   13090:	00013061 	.word	0x00013061
   13094:	10000184 	.word	0x10000184

00013098 <puts>:

  // Overload default libnano puts() with a more optimal version that does
  // not use dynamic memory
  int puts(const char * str)  // NOLINT
  {
   13098:	b530      	push	{r4, r5, lr}
   1309a:	b085      	sub	sp, #20
   1309c:	4675      	mov	r5, lr
   1309e:	9001      	str	r0, [sp, #4]
   130a0:	462b      	mov	r3, r5
   130a2:	4619      	mov	r1, r3
   130a4:	4812      	ldr	r0, [pc, #72]	; (130f0 <puts+0x58>)
   130a6:	f000 f827 	bl	130f8 <__cyg_profile_func_enter>
    int i;
    for (i = 0; str[i] != '\0'; i++)
   130aa:	2300      	movs	r3, #0
   130ac:	9303      	str	r3, [sp, #12]
   130ae:	9b03      	ldr	r3, [sp, #12]
   130b0:	9a01      	ldr	r2, [sp, #4]
   130b2:	4413      	add	r3, r2
   130b4:	781b      	ldrb	r3, [r3, #0]
   130b6:	2b00      	cmp	r3, #0
   130b8:	d00b      	beq.n	130d2 <puts+0x3a>
    {
      out(str[i]);
   130ba:	4b0e      	ldr	r3, [pc, #56]	; (130f4 <puts+0x5c>)
   130bc:	681b      	ldr	r3, [r3, #0]
   130be:	9a03      	ldr	r2, [sp, #12]
   130c0:	9901      	ldr	r1, [sp, #4]
   130c2:	440a      	add	r2, r1
   130c4:	7812      	ldrb	r2, [r2, #0]
   130c6:	4610      	mov	r0, r2
   130c8:	4798      	blx	r3
    for (i = 0; str[i] != '\0'; i++)
   130ca:	9b03      	ldr	r3, [sp, #12]
   130cc:	3301      	adds	r3, #1
   130ce:	9303      	str	r3, [sp, #12]
   130d0:	e7ed      	b.n	130ae <puts+0x16>
    }
    out('\n');
   130d2:	4b08      	ldr	r3, [pc, #32]	; (130f4 <puts+0x5c>)
   130d4:	681b      	ldr	r3, [r3, #0]
   130d6:	200a      	movs	r0, #10
   130d8:	4798      	blx	r3
    return i;
   130da:	9c03      	ldr	r4, [sp, #12]
   130dc:	462b      	mov	r3, r5
   130de:	4619      	mov	r1, r3
   130e0:	4803      	ldr	r0, [pc, #12]	; (130f0 <puts+0x58>)
   130e2:	f000 f81d 	bl	13120 <__cyg_profile_func_exit>
   130e6:	4623      	mov	r3, r4
  }
   130e8:	4618      	mov	r0, r3
   130ea:	b005      	add	sp, #20
   130ec:	bd30      	pop	{r4, r5, pc}
   130ee:	bf00      	nop
   130f0:	00013099 	.word	0x00013099
   130f4:	10000184 	.word	0x10000184

000130f8 <__cyg_profile_func_enter>:
  // =============================
  void * stack_trace[config::kBacktraceDepth] = { nullptr };
  size_t stack_depth = 0;

  void __cyg_profile_func_enter(void *, void * call_site)  // NOLINT
  {
   130f8:	b082      	sub	sp, #8
   130fa:	9001      	str	r0, [sp, #4]
   130fc:	9100      	str	r1, [sp, #0]
    stack_trace[stack_depth++] = call_site;
   130fe:	9a00      	ldr	r2, [sp, #0]
   13100:	4b05      	ldr	r3, [pc, #20]	; (13118 <__cyg_profile_func_enter+0x20>)
   13102:	681b      	ldr	r3, [r3, #0]
   13104:	1c59      	adds	r1, r3, #1
   13106:	4804      	ldr	r0, [pc, #16]	; (13118 <__cyg_profile_func_enter+0x20>)
   13108:	6001      	str	r1, [r0, #0]
   1310a:	4904      	ldr	r1, [pc, #16]	; (1311c <__cyg_profile_func_enter+0x24>)
   1310c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
   13110:	bf00      	nop
   13112:	b002      	add	sp, #8
   13114:	4770      	bx	lr
   13116:	bf00      	nop
   13118:	100003e0 	.word	0x100003e0
   1311c:	100002e0 	.word	0x100002e0

00013120 <__cyg_profile_func_exit>:

  void __cyg_profile_func_exit(void *, void *)  // NOLINT
  {
   13120:	b082      	sub	sp, #8
   13122:	9001      	str	r0, [sp, #4]
   13124:	9100      	str	r1, [sp, #0]
    stack_depth--;
   13126:	4b04      	ldr	r3, [pc, #16]	; (13138 <__cyg_profile_func_exit+0x18>)
   13128:	681b      	ldr	r3, [r3, #0]
   1312a:	3b01      	subs	r3, #1
   1312c:	4a02      	ldr	r2, [pc, #8]	; (13138 <__cyg_profile_func_exit+0x18>)
   1312e:	6013      	str	r3, [r2, #0]
  }
   13130:	bf00      	nop
   13132:	b002      	add	sp, #8
   13134:	4770      	bx	lr
   13136:	bf00      	nop
   13138:	100003e0 	.word	0x100003e0

0001313c <GetStackTrace()>:
}

void ** GetStackTrace()
{
   1313c:	b538      	push	{r3, r4, r5, lr}
   1313e:	4675      	mov	r5, lr
   13140:	462b      	mov	r3, r5
   13142:	4619      	mov	r1, r3
   13144:	4805      	ldr	r0, [pc, #20]	; (1315c <GetStackTrace()+0x20>)
   13146:	f7ff ffd7 	bl	130f8 <__cyg_profile_func_enter>
  return stack_trace;
   1314a:	4c05      	ldr	r4, [pc, #20]	; (13160 <GetStackTrace()+0x24>)
   1314c:	462b      	mov	r3, r5
   1314e:	4619      	mov	r1, r3
   13150:	4802      	ldr	r0, [pc, #8]	; (1315c <GetStackTrace()+0x20>)
   13152:	f7ff ffe5 	bl	13120 <__cyg_profile_func_exit>
   13156:	4623      	mov	r3, r4
}
   13158:	4618      	mov	r0, r3
   1315a:	bd38      	pop	{r3, r4, r5, pc}
   1315c:	0001313d 	.word	0x0001313d
   13160:	100002e0 	.word	0x100002e0

00013164 <GetStackDepth()>:

size_t GetStackDepth()
{
   13164:	b538      	push	{r3, r4, r5, lr}
   13166:	4675      	mov	r5, lr
   13168:	462b      	mov	r3, r5
   1316a:	4619      	mov	r1, r3
   1316c:	4806      	ldr	r0, [pc, #24]	; (13188 <GetStackDepth()+0x24>)
   1316e:	f7ff ffc3 	bl	130f8 <__cyg_profile_func_enter>
  return stack_depth;
   13172:	4b06      	ldr	r3, [pc, #24]	; (1318c <GetStackDepth()+0x28>)
   13174:	681c      	ldr	r4, [r3, #0]
   13176:	462b      	mov	r3, r5
   13178:	4619      	mov	r1, r3
   1317a:	4803      	ldr	r0, [pc, #12]	; (13188 <GetStackDepth()+0x24>)
   1317c:	f7ff ffd0 	bl	13120 <__cyg_profile_func_exit>
   13180:	4623      	mov	r3, r4
}
   13182:	4618      	mov	r0, r3
   13184:	bd38      	pop	{r3, r4, r5, pc}
   13186:	bf00      	nop
   13188:	00013165 	.word	0x00013165
   1318c:	100003e0 	.word	0x100003e0

00013190 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
   13190:	b510      	push	{r4, lr}
   13192:	b084      	sub	sp, #16
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
   13194:	4b29      	ldr	r3, [pc, #164]	; (1323c <vTaskSwitchContext+0xac>)
   13196:	681b      	ldr	r3, [r3, #0]
   13198:	2b00      	cmp	r3, #0
   1319a:	d003      	beq.n	131a4 <vTaskSwitchContext+0x14>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
   1319c:	4b28      	ldr	r3, [pc, #160]	; (13240 <vTaskSwitchContext+0xb0>)
   1319e:	2201      	movs	r2, #1
   131a0:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
   131a2:	e047      	b.n	13234 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
   131a4:	4b26      	ldr	r3, [pc, #152]	; (13240 <vTaskSwitchContext+0xb0>)
   131a6:	2200      	movs	r2, #0
   131a8:	601a      	str	r2, [r3, #0]
					ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
   131aa:	f7ff fa8d 	bl	126c8 <UptimeRTOS>
   131ae:	4603      	mov	r3, r0
   131b0:	460c      	mov	r4, r1
   131b2:	461a      	mov	r2, r3
   131b4:	4b23      	ldr	r3, [pc, #140]	; (13244 <vTaskSwitchContext+0xb4>)
   131b6:	601a      	str	r2, [r3, #0]
				if( ulTotalRunTime > ulTaskSwitchedInTime )
   131b8:	4b22      	ldr	r3, [pc, #136]	; (13244 <vTaskSwitchContext+0xb4>)
   131ba:	681a      	ldr	r2, [r3, #0]
   131bc:	4b22      	ldr	r3, [pc, #136]	; (13248 <vTaskSwitchContext+0xb8>)
   131be:	681b      	ldr	r3, [r3, #0]
   131c0:	429a      	cmp	r2, r3
   131c2:	d909      	bls.n	131d8 <vTaskSwitchContext+0x48>
					pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
   131c4:	4b21      	ldr	r3, [pc, #132]	; (1324c <vTaskSwitchContext+0xbc>)
   131c6:	681b      	ldr	r3, [r3, #0]
   131c8:	6d59      	ldr	r1, [r3, #84]	; 0x54
   131ca:	4a1e      	ldr	r2, [pc, #120]	; (13244 <vTaskSwitchContext+0xb4>)
   131cc:	6810      	ldr	r0, [r2, #0]
   131ce:	4a1e      	ldr	r2, [pc, #120]	; (13248 <vTaskSwitchContext+0xb8>)
   131d0:	6812      	ldr	r2, [r2, #0]
   131d2:	1a82      	subs	r2, r0, r2
   131d4:	440a      	add	r2, r1
   131d6:	655a      	str	r2, [r3, #84]	; 0x54
				ulTaskSwitchedInTime = ulTotalRunTime;
   131d8:	4b1a      	ldr	r3, [pc, #104]	; (13244 <vTaskSwitchContext+0xb4>)
   131da:	681b      	ldr	r3, [r3, #0]
   131dc:	4a1a      	ldr	r2, [pc, #104]	; (13248 <vTaskSwitchContext+0xb8>)
   131de:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
   131e0:	4b1b      	ldr	r3, [pc, #108]	; (13250 <vTaskSwitchContext+0xc0>)
   131e2:	681b      	ldr	r3, [r3, #0]
   131e4:	9301      	str	r3, [sp, #4]
	/* Generic helper function. */
	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitmap )
	{
	uint8_t ucReturn;

		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
   131e6:	9b01      	ldr	r3, [sp, #4]
   131e8:	fab3 f383 	clz	r3, r3
   131ec:	f88d 3003 	strb.w	r3, [sp, #3]
		return ucReturn;
   131f0:	f89d 3003 	ldrb.w	r3, [sp, #3]
   131f4:	f1c3 031f 	rsb	r3, r3, #31
   131f8:	9303      	str	r3, [sp, #12]
   131fa:	9a03      	ldr	r2, [sp, #12]
   131fc:	4613      	mov	r3, r2
   131fe:	009b      	lsls	r3, r3, #2
   13200:	4413      	add	r3, r2
   13202:	009b      	lsls	r3, r3, #2
   13204:	4a13      	ldr	r2, [pc, #76]	; (13254 <vTaskSwitchContext+0xc4>)
   13206:	4413      	add	r3, r2
   13208:	9302      	str	r3, [sp, #8]
   1320a:	9b02      	ldr	r3, [sp, #8]
   1320c:	685b      	ldr	r3, [r3, #4]
   1320e:	685a      	ldr	r2, [r3, #4]
   13210:	9b02      	ldr	r3, [sp, #8]
   13212:	605a      	str	r2, [r3, #4]
   13214:	9b02      	ldr	r3, [sp, #8]
   13216:	685a      	ldr	r2, [r3, #4]
   13218:	9b02      	ldr	r3, [sp, #8]
   1321a:	3308      	adds	r3, #8
   1321c:	429a      	cmp	r2, r3
   1321e:	d104      	bne.n	1322a <vTaskSwitchContext+0x9a>
   13220:	9b02      	ldr	r3, [sp, #8]
   13222:	685b      	ldr	r3, [r3, #4]
   13224:	685a      	ldr	r2, [r3, #4]
   13226:	9b02      	ldr	r3, [sp, #8]
   13228:	605a      	str	r2, [r3, #4]
   1322a:	9b02      	ldr	r3, [sp, #8]
   1322c:	685b      	ldr	r3, [r3, #4]
   1322e:	68db      	ldr	r3, [r3, #12]
   13230:	4a06      	ldr	r2, [pc, #24]	; (1324c <vTaskSwitchContext+0xbc>)
   13232:	6013      	str	r3, [r2, #0]
}
   13234:	bf00      	nop
   13236:	b004      	add	sp, #16
   13238:	bd10      	pop	{r4, pc}
   1323a:	bf00      	nop
   1323c:	10000454 	.word	0x10000454
   13240:	10000450 	.word	0x10000450
   13244:	1000045c 	.word	0x1000045c
   13248:	10000458 	.word	0x10000458
   1324c:	100003e4 	.word	0x100003e4
   13250:	1000044c 	.word	0x1000044c
   13254:	100003e8 	.word	0x100003e8
   13258:	ffffffff 	.word	0xffffffff
   1325c:	ffffffff 	.word	0xffffffff

00013260 <vPortSVCHandler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
   13260:	4b07      	ldr	r3, [pc, #28]	; (13280 <pxCurrentTCBConst2>)
   13262:	6819      	ldr	r1, [r3, #0]
   13264:	6808      	ldr	r0, [r1, #0]
   13266:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1326a:	f380 8809 	msr	PSP, r0
   1326e:	f3bf 8f6f 	isb	sy
   13272:	f04f 0000 	mov.w	r0, #0
   13276:	f380 8811 	msr	BASEPRI, r0
   1327a:	4770      	bx	lr
   1327c:	f3af 8000 	nop.w

00013280 <pxCurrentTCBConst2>:
   13280:	100003e4 	.word	0x100003e4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
   13284:	bf00      	nop
   13286:	bf00      	nop
   13288:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   1328c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

00013290 <xPortPendSVHandler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
   13290:	f3ef 8009 	mrs	r0, PSP
   13294:	f3bf 8f6f 	isb	sy
   13298:	4b15      	ldr	r3, [pc, #84]	; (132f0 <pxCurrentTCBConst>)
   1329a:	681a      	ldr	r2, [r3, #0]
   1329c:	f01e 0f10 	tst.w	lr, #16
   132a0:	bf08      	it	eq
   132a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
   132a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   132aa:	6010      	str	r0, [r2, #0]
   132ac:	e92d 0009 	stmdb	sp!, {r0, r3}
   132b0:	f04f 0028 	mov.w	r0, #40	; 0x28
   132b4:	f380 8811 	msr	BASEPRI, r0
   132b8:	f3bf 8f4f 	dsb	sy
   132bc:	f3bf 8f6f 	isb	sy
   132c0:	f7ff ff66 	bl	13190 <vTaskSwitchContext>
   132c4:	f04f 0000 	mov.w	r0, #0
   132c8:	f380 8811 	msr	BASEPRI, r0
   132cc:	bc09      	pop	{r0, r3}
   132ce:	6819      	ldr	r1, [r3, #0]
   132d0:	6808      	ldr	r0, [r1, #0]
   132d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   132d6:	f01e 0f10 	tst.w	lr, #16
   132da:	bf08      	it	eq
   132dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
   132e0:	f380 8809 	msr	PSP, r0
   132e4:	f3bf 8f6f 	isb	sy
   132e8:	4770      	bx	lr
   132ea:	bf00      	nop
   132ec:	f3af 8000 	nop.w

000132f0 <pxCurrentTCBConst>:
   132f0:	100003e4 	.word	0x100003e4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
   132f4:	bf00      	nop
   132f6:	bf00      	nop

000132f8 <_out_null(char, void*, unsigned int, unsigned int)>:
}


// internal null output
static inline void _out_null(char character, void* buffer, size_t idx, size_t maxlen)
{
   132f8:	b510      	push	{r4, lr}
   132fa:	b084      	sub	sp, #16
   132fc:	4674      	mov	r4, lr
   132fe:	9102      	str	r1, [sp, #8]
   13300:	9201      	str	r2, [sp, #4]
   13302:	9300      	str	r3, [sp, #0]
   13304:	4603      	mov	r3, r0
   13306:	f88d 300f 	strb.w	r3, [sp, #15]
   1330a:	4623      	mov	r3, r4
   1330c:	4619      	mov	r1, r3
   1330e:	4805      	ldr	r0, [pc, #20]	; (13324 <_out_null(char, void*, unsigned int, unsigned int)+0x2c>)
   13310:	f7ff fef2 	bl	130f8 <__cyg_profile_func_enter>
   13314:	4623      	mov	r3, r4
   13316:	4619      	mov	r1, r3
   13318:	4802      	ldr	r0, [pc, #8]	; (13324 <_out_null(char, void*, unsigned int, unsigned int)+0x2c>)
   1331a:	f7ff ff01 	bl	13120 <__cyg_profile_func_exit>
  (void)character; (void)buffer; (void)idx; (void)maxlen;
}
   1331e:	bf00      	nop
   13320:	b004      	add	sp, #16
   13322:	bd10      	pop	{r4, pc}
   13324:	000132f9 	.word	0x000132f9

00013328 <_out_char(char, void*, unsigned int, unsigned int)>:


// internal _putchar wrapper
static inline void _out_char(char character, void* buffer, size_t idx, size_t maxlen)
{
   13328:	b510      	push	{r4, lr}
   1332a:	b084      	sub	sp, #16
   1332c:	4674      	mov	r4, lr
   1332e:	9102      	str	r1, [sp, #8]
   13330:	9201      	str	r2, [sp, #4]
   13332:	9300      	str	r3, [sp, #0]
   13334:	4603      	mov	r3, r0
   13336:	f88d 300f 	strb.w	r3, [sp, #15]
   1333a:	4623      	mov	r3, r4
   1333c:	4619      	mov	r1, r3
   1333e:	480a      	ldr	r0, [pc, #40]	; (13368 <_out_char(char, void*, unsigned int, unsigned int)+0x40>)
   13340:	f7ff feda 	bl	130f8 <__cyg_profile_func_enter>
  (void)buffer; (void)idx; (void)maxlen;
  if (character) {
   13344:	f89d 300f 	ldrb.w	r3, [sp, #15]
   13348:	2b00      	cmp	r3, #0
   1334a:	d004      	beq.n	13356 <_out_char(char, void*, unsigned int, unsigned int)+0x2e>
    _putchar(character);
   1334c:	f89d 300f 	ldrb.w	r3, [sp, #15]
   13350:	4618      	mov	r0, r3
   13352:	f7ff fe67 	bl	13024 <_putchar>
   13356:	4623      	mov	r3, r4
   13358:	4619      	mov	r1, r3
   1335a:	4803      	ldr	r0, [pc, #12]	; (13368 <_out_char(char, void*, unsigned int, unsigned int)+0x40>)
   1335c:	f7ff fee0 	bl	13120 <__cyg_profile_func_exit>
  }
}
   13360:	bf00      	nop
   13362:	b004      	add	sp, #16
   13364:	bd10      	pop	{r4, pc}
   13366:	bf00      	nop
   13368:	00013329 	.word	0x00013329

0001336c <_strlen(char const*)>:


// internal strlen
// \return The length of the string (excluding the terminating 0)
static inline unsigned int _strlen(const char* str)
{
   1336c:	b530      	push	{r4, r5, lr}
   1336e:	b085      	sub	sp, #20
   13370:	4674      	mov	r4, lr
   13372:	9001      	str	r0, [sp, #4]
   13374:	4623      	mov	r3, r4
   13376:	4619      	mov	r1, r3
   13378:	480c      	ldr	r0, [pc, #48]	; (133ac <_strlen(char const*)+0x40>)
   1337a:	f7ff febd 	bl	130f8 <__cyg_profile_func_enter>
  const char* s;
  for (s = str; *s; ++s);
   1337e:	9b01      	ldr	r3, [sp, #4]
   13380:	9303      	str	r3, [sp, #12]
   13382:	9b03      	ldr	r3, [sp, #12]
   13384:	781b      	ldrb	r3, [r3, #0]
   13386:	2b00      	cmp	r3, #0
   13388:	d003      	beq.n	13392 <_strlen(char const*)+0x26>
   1338a:	9b03      	ldr	r3, [sp, #12]
   1338c:	3301      	adds	r3, #1
   1338e:	9303      	str	r3, [sp, #12]
   13390:	e7f7      	b.n	13382 <_strlen(char const*)+0x16>
  return (unsigned int)(s - str);
   13392:	9a03      	ldr	r2, [sp, #12]
   13394:	9b01      	ldr	r3, [sp, #4]
   13396:	1ad3      	subs	r3, r2, r3
   13398:	461d      	mov	r5, r3
   1339a:	4623      	mov	r3, r4
   1339c:	4619      	mov	r1, r3
   1339e:	4803      	ldr	r0, [pc, #12]	; (133ac <_strlen(char const*)+0x40>)
   133a0:	f7ff febe 	bl	13120 <__cyg_profile_func_exit>
   133a4:	462b      	mov	r3, r5
}
   133a6:	4618      	mov	r0, r3
   133a8:	b005      	add	sp, #20
   133aa:	bd30      	pop	{r4, r5, pc}
   133ac:	0001336d 	.word	0x0001336d

000133b0 <_is_digit(char)>:


// internal test if char is a digit (0-9)
// \return true if char is a digit
static inline bool _is_digit(char ch)
{
   133b0:	b530      	push	{r4, r5, lr}
   133b2:	b083      	sub	sp, #12
   133b4:	4675      	mov	r5, lr
   133b6:	4603      	mov	r3, r0
   133b8:	f88d 3007 	strb.w	r3, [sp, #7]
   133bc:	462b      	mov	r3, r5
   133be:	4619      	mov	r1, r3
   133c0:	480b      	ldr	r0, [pc, #44]	; (133f0 <_is_digit(char)+0x40>)
   133c2:	f7ff fe99 	bl	130f8 <__cyg_profile_func_enter>
  return (ch >= '0') && (ch <= '9');
   133c6:	f89d 3007 	ldrb.w	r3, [sp, #7]
   133ca:	2b2f      	cmp	r3, #47	; 0x2f
   133cc:	d905      	bls.n	133da <_is_digit(char)+0x2a>
   133ce:	f89d 3007 	ldrb.w	r3, [sp, #7]
   133d2:	2b39      	cmp	r3, #57	; 0x39
   133d4:	d801      	bhi.n	133da <_is_digit(char)+0x2a>
   133d6:	2401      	movs	r4, #1
   133d8:	e000      	b.n	133dc <_is_digit(char)+0x2c>
   133da:	2400      	movs	r4, #0
   133dc:	462b      	mov	r3, r5
   133de:	4619      	mov	r1, r3
   133e0:	4803      	ldr	r0, [pc, #12]	; (133f0 <_is_digit(char)+0x40>)
   133e2:	f7ff fe9d 	bl	13120 <__cyg_profile_func_exit>
   133e6:	4623      	mov	r3, r4
}
   133e8:	4618      	mov	r0, r3
   133ea:	b003      	add	sp, #12
   133ec:	bd30      	pop	{r4, r5, pc}
   133ee:	bf00      	nop
   133f0:	000133b1 	.word	0x000133b1

000133f4 <_atoi(char const**)>:


// internal ASCII string to unsigned int conversion
static unsigned int _atoi(const char** str)
{
   133f4:	b530      	push	{r4, r5, lr}
   133f6:	b085      	sub	sp, #20
   133f8:	4675      	mov	r5, lr
   133fa:	9001      	str	r0, [sp, #4]
   133fc:	462b      	mov	r3, r5
   133fe:	4619      	mov	r1, r3
   13400:	4813      	ldr	r0, [pc, #76]	; (13450 <_atoi(char const**)+0x5c>)
   13402:	f7ff fe79 	bl	130f8 <__cyg_profile_func_enter>
  unsigned int i = 0U;
   13406:	2300      	movs	r3, #0
   13408:	9303      	str	r3, [sp, #12]
  while (_is_digit(**str)) {
   1340a:	9b01      	ldr	r3, [sp, #4]
   1340c:	681b      	ldr	r3, [r3, #0]
   1340e:	781b      	ldrb	r3, [r3, #0]
   13410:	4618      	mov	r0, r3
   13412:	f7ff ffcd 	bl	133b0 <_is_digit(char)>
   13416:	4603      	mov	r3, r0
   13418:	2b00      	cmp	r3, #0
   1341a:	d00f      	beq.n	1343c <_atoi(char const**)+0x48>
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
   1341c:	9a03      	ldr	r2, [sp, #12]
   1341e:	4613      	mov	r3, r2
   13420:	009b      	lsls	r3, r3, #2
   13422:	4413      	add	r3, r2
   13424:	005b      	lsls	r3, r3, #1
   13426:	4618      	mov	r0, r3
   13428:	9b01      	ldr	r3, [sp, #4]
   1342a:	681b      	ldr	r3, [r3, #0]
   1342c:	1c59      	adds	r1, r3, #1
   1342e:	9a01      	ldr	r2, [sp, #4]
   13430:	6011      	str	r1, [r2, #0]
   13432:	781b      	ldrb	r3, [r3, #0]
   13434:	4403      	add	r3, r0
   13436:	3b30      	subs	r3, #48	; 0x30
   13438:	9303      	str	r3, [sp, #12]
  while (_is_digit(**str)) {
   1343a:	e7e6      	b.n	1340a <_atoi(char const**)+0x16>
  }
  return i;
   1343c:	9c03      	ldr	r4, [sp, #12]
   1343e:	462b      	mov	r3, r5
   13440:	4619      	mov	r1, r3
   13442:	4803      	ldr	r0, [pc, #12]	; (13450 <_atoi(char const**)+0x5c>)
   13444:	f7ff fe6c 	bl	13120 <__cyg_profile_func_exit>
   13448:	4623      	mov	r3, r4
}
   1344a:	4618      	mov	r0, r3
   1344c:	b005      	add	sp, #20
   1344e:	bd30      	pop	{r4, r5, pc}
   13450:	000133f5 	.word	0x000133f5

00013454 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)>:


// internal itoa format
static size_t _ntoa_format(out_fct_type out, char* buffer, size_t idx, size_t maxlen, char* buf, size_t len, bool negative, unsigned int base, unsigned int prec, unsigned int width, unsigned int flags)
{
   13454:	b530      	push	{r4, r5, lr}
   13456:	b089      	sub	sp, #36	; 0x24
   13458:	4675      	mov	r5, lr
   1345a:	9003      	str	r0, [sp, #12]
   1345c:	9102      	str	r1, [sp, #8]
   1345e:	9201      	str	r2, [sp, #4]
   13460:	9300      	str	r3, [sp, #0]
   13462:	462b      	mov	r3, r5
   13464:	4619      	mov	r1, r3
   13466:	4891      	ldr	r0, [pc, #580]	; (136ac <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x258>)
   13468:	f7ff fe46 	bl	130f8 <__cyg_profile_func_enter>
  const size_t start_idx = idx;
   1346c:	9b01      	ldr	r3, [sp, #4]
   1346e:	9305      	str	r3, [sp, #20]

  // pad leading zeros
  while (!(flags & FLAGS_LEFT) && (len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
   13470:	9b12      	ldr	r3, [sp, #72]	; 0x48
   13472:	f003 0302 	and.w	r3, r3, #2
   13476:	2b00      	cmp	r3, #0
   13478:	d10e      	bne.n	13498 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x44>
   1347a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   1347c:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1347e:	429a      	cmp	r2, r3
   13480:	d20a      	bcs.n	13498 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x44>
   13482:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   13484:	2b1f      	cmp	r3, #31
   13486:	d807      	bhi.n	13498 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x44>
    buf[len++] = '0';
   13488:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1348a:	1c5a      	adds	r2, r3, #1
   1348c:	920d      	str	r2, [sp, #52]	; 0x34
   1348e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   13490:	4413      	add	r3, r2
   13492:	2230      	movs	r2, #48	; 0x30
   13494:	701a      	strb	r2, [r3, #0]
  while (!(flags & FLAGS_LEFT) && (len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
   13496:	e7eb      	b.n	13470 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1c>
  }
  while (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
   13498:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1349a:	f003 0302 	and.w	r3, r3, #2
   1349e:	2b00      	cmp	r3, #0
   134a0:	d113      	bne.n	134ca <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x76>
   134a2:	9b12      	ldr	r3, [sp, #72]	; 0x48
   134a4:	f003 0301 	and.w	r3, r3, #1
   134a8:	2b00      	cmp	r3, #0
   134aa:	d00e      	beq.n	134ca <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x76>
   134ac:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   134ae:	9b11      	ldr	r3, [sp, #68]	; 0x44
   134b0:	429a      	cmp	r2, r3
   134b2:	d20a      	bcs.n	134ca <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x76>
   134b4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   134b6:	2b1f      	cmp	r3, #31
   134b8:	d807      	bhi.n	134ca <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x76>
    buf[len++] = '0';
   134ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   134bc:	1c5a      	adds	r2, r3, #1
   134be:	920d      	str	r2, [sp, #52]	; 0x34
   134c0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   134c2:	4413      	add	r3, r2
   134c4:	2230      	movs	r2, #48	; 0x30
   134c6:	701a      	strb	r2, [r3, #0]
  while (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
   134c8:	e7e6      	b.n	13498 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x44>
  }

  // handle hash
  if (flags & FLAGS_HASH) {
   134ca:	9b12      	ldr	r3, [sp, #72]	; 0x48
   134cc:	f003 0310 	and.w	r3, r3, #16
   134d0:	2b00      	cmp	r3, #0
   134d2:	d058      	beq.n	13586 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x132>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
   134d4:	9b12      	ldr	r3, [sp, #72]	; 0x48
   134d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
   134da:	2b00      	cmp	r3, #0
   134dc:	d116      	bne.n	1350c <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xb8>
   134de:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   134e0:	2b00      	cmp	r3, #0
   134e2:	d013      	beq.n	1350c <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xb8>
   134e4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   134e6:	9b10      	ldr	r3, [sp, #64]	; 0x40
   134e8:	429a      	cmp	r2, r3
   134ea:	d003      	beq.n	134f4 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xa0>
   134ec:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   134ee:	9b11      	ldr	r3, [sp, #68]	; 0x44
   134f0:	429a      	cmp	r2, r3
   134f2:	d10b      	bne.n	1350c <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xb8>
      len--;
   134f4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   134f6:	3b01      	subs	r3, #1
   134f8:	930d      	str	r3, [sp, #52]	; 0x34
      if (len && (base == 16U)) {
   134fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   134fc:	2b00      	cmp	r3, #0
   134fe:	d005      	beq.n	1350c <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xb8>
   13500:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   13502:	2b10      	cmp	r3, #16
   13504:	d102      	bne.n	1350c <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xb8>
        len--;
   13506:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   13508:	3b01      	subs	r3, #1
   1350a:	930d      	str	r3, [sp, #52]	; 0x34
      }
    }
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
   1350c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1350e:	2b10      	cmp	r3, #16
   13510:	d10f      	bne.n	13532 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xde>
   13512:	9b12      	ldr	r3, [sp, #72]	; 0x48
   13514:	f003 0320 	and.w	r3, r3, #32
   13518:	2b00      	cmp	r3, #0
   1351a:	d10a      	bne.n	13532 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xde>
   1351c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1351e:	2b1f      	cmp	r3, #31
   13520:	d807      	bhi.n	13532 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xde>
      buf[len++] = 'x';
   13522:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   13524:	1c5a      	adds	r2, r3, #1
   13526:	920d      	str	r2, [sp, #52]	; 0x34
   13528:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1352a:	4413      	add	r3, r2
   1352c:	2278      	movs	r2, #120	; 0x78
   1352e:	701a      	strb	r2, [r3, #0]
   13530:	e01f      	b.n	13572 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x11e>
    }
    else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
   13532:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   13534:	2b10      	cmp	r3, #16
   13536:	d10f      	bne.n	13558 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x104>
   13538:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1353a:	f003 0320 	and.w	r3, r3, #32
   1353e:	2b00      	cmp	r3, #0
   13540:	d00a      	beq.n	13558 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x104>
   13542:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   13544:	2b1f      	cmp	r3, #31
   13546:	d807      	bhi.n	13558 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x104>
      buf[len++] = 'X';
   13548:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1354a:	1c5a      	adds	r2, r3, #1
   1354c:	920d      	str	r2, [sp, #52]	; 0x34
   1354e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   13550:	4413      	add	r3, r2
   13552:	2258      	movs	r2, #88	; 0x58
   13554:	701a      	strb	r2, [r3, #0]
   13556:	e00c      	b.n	13572 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x11e>
    }
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
   13558:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1355a:	2b02      	cmp	r3, #2
   1355c:	d109      	bne.n	13572 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x11e>
   1355e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   13560:	2b1f      	cmp	r3, #31
   13562:	d806      	bhi.n	13572 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x11e>
      buf[len++] = 'b';
   13564:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   13566:	1c5a      	adds	r2, r3, #1
   13568:	920d      	str	r2, [sp, #52]	; 0x34
   1356a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1356c:	4413      	add	r3, r2
   1356e:	2262      	movs	r2, #98	; 0x62
   13570:	701a      	strb	r2, [r3, #0]
    }
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
   13572:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   13574:	2b1f      	cmp	r3, #31
   13576:	d806      	bhi.n	13586 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x132>
      buf[len++] = '0';
   13578:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1357a:	1c5a      	adds	r2, r3, #1
   1357c:	920d      	str	r2, [sp, #52]	; 0x34
   1357e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   13580:	4413      	add	r3, r2
   13582:	2230      	movs	r2, #48	; 0x30
   13584:	701a      	strb	r2, [r3, #0]
    }
  }

  // handle sign
  if (len && (len == width) && (negative || (flags & FLAGS_PLUS) || (flags & FLAGS_SPACE))) {
   13586:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   13588:	2b00      	cmp	r3, #0
   1358a:	d014      	beq.n	135b6 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x162>
   1358c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   1358e:	9b11      	ldr	r3, [sp, #68]	; 0x44
   13590:	429a      	cmp	r2, r3
   13592:	d110      	bne.n	135b6 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x162>
   13594:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
   13598:	2b00      	cmp	r3, #0
   1359a:	d109      	bne.n	135b0 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x15c>
   1359c:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1359e:	f003 0304 	and.w	r3, r3, #4
   135a2:	2b00      	cmp	r3, #0
   135a4:	d104      	bne.n	135b0 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x15c>
   135a6:	9b12      	ldr	r3, [sp, #72]	; 0x48
   135a8:	f003 0308 	and.w	r3, r3, #8
   135ac:	2b00      	cmp	r3, #0
   135ae:	d002      	beq.n	135b6 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x162>
    len--;
   135b0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   135b2:	3b01      	subs	r3, #1
   135b4:	930d      	str	r3, [sp, #52]	; 0x34
  }
  if (len < PRINTF_NTOA_BUFFER_SIZE) {
   135b6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   135b8:	2b1f      	cmp	r3, #31
   135ba:	d824      	bhi.n	13606 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1b2>
    if (negative) {
   135bc:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
   135c0:	2b00      	cmp	r3, #0
   135c2:	d007      	beq.n	135d4 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x180>
      buf[len++] = '-';
   135c4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   135c6:	1c5a      	adds	r2, r3, #1
   135c8:	920d      	str	r2, [sp, #52]	; 0x34
   135ca:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   135cc:	4413      	add	r3, r2
   135ce:	222d      	movs	r2, #45	; 0x2d
   135d0:	701a      	strb	r2, [r3, #0]
   135d2:	e018      	b.n	13606 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1b2>
    }
    else if (flags & FLAGS_PLUS) {
   135d4:	9b12      	ldr	r3, [sp, #72]	; 0x48
   135d6:	f003 0304 	and.w	r3, r3, #4
   135da:	2b00      	cmp	r3, #0
   135dc:	d007      	beq.n	135ee <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x19a>
      buf[len++] = '+';  // ignore the space if the '+' exists
   135de:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   135e0:	1c5a      	adds	r2, r3, #1
   135e2:	920d      	str	r2, [sp, #52]	; 0x34
   135e4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   135e6:	4413      	add	r3, r2
   135e8:	222b      	movs	r2, #43	; 0x2b
   135ea:	701a      	strb	r2, [r3, #0]
   135ec:	e00b      	b.n	13606 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1b2>
    }
    else if (flags & FLAGS_SPACE) {
   135ee:	9b12      	ldr	r3, [sp, #72]	; 0x48
   135f0:	f003 0308 	and.w	r3, r3, #8
   135f4:	2b00      	cmp	r3, #0
   135f6:	d006      	beq.n	13606 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1b2>
      buf[len++] = ' ';
   135f8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   135fa:	1c5a      	adds	r2, r3, #1
   135fc:	920d      	str	r2, [sp, #52]	; 0x34
   135fe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   13600:	4413      	add	r3, r2
   13602:	2220      	movs	r2, #32
   13604:	701a      	strb	r2, [r3, #0]
    }
  }

  // pad spaces up to given width
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
   13606:	9b12      	ldr	r3, [sp, #72]	; 0x48
   13608:	f003 0302 	and.w	r3, r3, #2
   1360c:	2b00      	cmp	r3, #0
   1360e:	d116      	bne.n	1363e <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1ea>
   13610:	9b12      	ldr	r3, [sp, #72]	; 0x48
   13612:	f003 0301 	and.w	r3, r3, #1
   13616:	2b00      	cmp	r3, #0
   13618:	d111      	bne.n	1363e <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1ea>
    for (size_t i = len; i < width; i++) {
   1361a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1361c:	9307      	str	r3, [sp, #28]
   1361e:	9a07      	ldr	r2, [sp, #28]
   13620:	9b11      	ldr	r3, [sp, #68]	; 0x44
   13622:	429a      	cmp	r2, r3
   13624:	d20b      	bcs.n	1363e <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1ea>
      out(' ', buffer, idx++, maxlen);
   13626:	9a01      	ldr	r2, [sp, #4]
   13628:	1c53      	adds	r3, r2, #1
   1362a:	9301      	str	r3, [sp, #4]
   1362c:	9c03      	ldr	r4, [sp, #12]
   1362e:	9b00      	ldr	r3, [sp, #0]
   13630:	9902      	ldr	r1, [sp, #8]
   13632:	2020      	movs	r0, #32
   13634:	47a0      	blx	r4
    for (size_t i = len; i < width; i++) {
   13636:	9b07      	ldr	r3, [sp, #28]
   13638:	3301      	adds	r3, #1
   1363a:	9307      	str	r3, [sp, #28]
   1363c:	e7ef      	b.n	1361e <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1ca>
    }
  }

  // reverse string
  for (size_t i = 0U; i < len; i++) {
   1363e:	2300      	movs	r3, #0
   13640:	9306      	str	r3, [sp, #24]
   13642:	9a06      	ldr	r2, [sp, #24]
   13644:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   13646:	429a      	cmp	r2, r3
   13648:	d211      	bcs.n	1366e <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x21a>
    out(buf[len - i - 1U], buffer, idx++, maxlen);
   1364a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   1364c:	9b06      	ldr	r3, [sp, #24]
   1364e:	1ad3      	subs	r3, r2, r3
   13650:	3b01      	subs	r3, #1
   13652:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   13654:	4413      	add	r3, r2
   13656:	7818      	ldrb	r0, [r3, #0]
   13658:	9a01      	ldr	r2, [sp, #4]
   1365a:	1c53      	adds	r3, r2, #1
   1365c:	9301      	str	r3, [sp, #4]
   1365e:	9c03      	ldr	r4, [sp, #12]
   13660:	9b00      	ldr	r3, [sp, #0]
   13662:	9902      	ldr	r1, [sp, #8]
   13664:	47a0      	blx	r4
  for (size_t i = 0U; i < len; i++) {
   13666:	9b06      	ldr	r3, [sp, #24]
   13668:	3301      	adds	r3, #1
   1366a:	9306      	str	r3, [sp, #24]
   1366c:	e7e9      	b.n	13642 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1ee>
  }

  // append pad spaces up to given width
  if (flags & FLAGS_LEFT) {
   1366e:	9b12      	ldr	r3, [sp, #72]	; 0x48
   13670:	f003 0302 	and.w	r3, r3, #2
   13674:	2b00      	cmp	r3, #0
   13676:	d00e      	beq.n	13696 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x242>
    while (idx - start_idx < width) {
   13678:	9a01      	ldr	r2, [sp, #4]
   1367a:	9b05      	ldr	r3, [sp, #20]
   1367c:	1ad3      	subs	r3, r2, r3
   1367e:	9a11      	ldr	r2, [sp, #68]	; 0x44
   13680:	429a      	cmp	r2, r3
   13682:	d908      	bls.n	13696 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x242>
      out(' ', buffer, idx++, maxlen);
   13684:	9a01      	ldr	r2, [sp, #4]
   13686:	1c53      	adds	r3, r2, #1
   13688:	9301      	str	r3, [sp, #4]
   1368a:	9c03      	ldr	r4, [sp, #12]
   1368c:	9b00      	ldr	r3, [sp, #0]
   1368e:	9902      	ldr	r1, [sp, #8]
   13690:	2020      	movs	r0, #32
   13692:	47a0      	blx	r4
    while (idx - start_idx < width) {
   13694:	e7f0      	b.n	13678 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x224>
    }
  }

  return idx;
   13696:	9c01      	ldr	r4, [sp, #4]
   13698:	462b      	mov	r3, r5
   1369a:	4619      	mov	r1, r3
   1369c:	4803      	ldr	r0, [pc, #12]	; (136ac <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x258>)
   1369e:	f7ff fd3f 	bl	13120 <__cyg_profile_func_exit>
   136a2:	4623      	mov	r3, r4
}
   136a4:	4618      	mov	r0, r3
   136a6:	b009      	add	sp, #36	; 0x24
   136a8:	bd30      	pop	{r4, r5, pc}
   136aa:	bf00      	nop
   136ac:	00013455 	.word	0x00013455

000136b0 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)>:


// internal itoa for 'long' type
static size_t _ntoa_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long value, bool negative, unsigned long base, unsigned int prec, unsigned int width, unsigned int flags)
{
   136b0:	b530      	push	{r4, r5, lr}
   136b2:	b097      	sub	sp, #92	; 0x5c
   136b4:	4674      	mov	r4, lr
   136b6:	900b      	str	r0, [sp, #44]	; 0x2c
   136b8:	910a      	str	r1, [sp, #40]	; 0x28
   136ba:	9209      	str	r2, [sp, #36]	; 0x24
   136bc:	9308      	str	r3, [sp, #32]
   136be:	4623      	mov	r3, r4
   136c0:	4619      	mov	r1, r3
   136c2:	4833      	ldr	r0, [pc, #204]	; (13790 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0xe0>)
   136c4:	f7ff fd18 	bl	130f8 <__cyg_profile_func_enter>
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
   136c8:	2300      	movs	r3, #0
   136ca:	9315      	str	r3, [sp, #84]	; 0x54

  // no hash for 0 values
  if (!value) {
   136cc:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   136ce:	2b00      	cmp	r3, #0
   136d0:	d103      	bne.n	136da <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x2a>
    flags &= ~FLAGS_HASH;
   136d2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   136d4:	f023 0310 	bic.w	r3, r3, #16
   136d8:	931f      	str	r3, [sp, #124]	; 0x7c
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
   136da:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   136dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
   136e0:	2b00      	cmp	r3, #0
   136e2:	d002      	beq.n	136ea <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x3a>
   136e4:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   136e6:	2b00      	cmp	r3, #0
   136e8:	d033      	beq.n	13752 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0xa2>
    do {
      const char digit = (char)(value % base);
   136ea:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   136ec:	9a1c      	ldr	r2, [sp, #112]	; 0x70
   136ee:	fbb3 f2f2 	udiv	r2, r3, r2
   136f2:	991c      	ldr	r1, [sp, #112]	; 0x70
   136f4:	fb01 f202 	mul.w	r2, r1, r2
   136f8:	1a9b      	subs	r3, r3, r2
   136fa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
   136fe:	f89d 3053 	ldrb.w	r3, [sp, #83]	; 0x53
   13702:	2b09      	cmp	r3, #9
   13704:	d804      	bhi.n	13710 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x60>
   13706:	f89d 3053 	ldrb.w	r3, [sp, #83]	; 0x53
   1370a:	3330      	adds	r3, #48	; 0x30
   1370c:	b2da      	uxtb	r2, r3
   1370e:	e00d      	b.n	1372c <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x7c>
   13710:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   13712:	f003 0320 	and.w	r3, r3, #32
   13716:	2b00      	cmp	r3, #0
   13718:	d001      	beq.n	1371e <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x6e>
   1371a:	2241      	movs	r2, #65	; 0x41
   1371c:	e000      	b.n	13720 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x70>
   1371e:	2261      	movs	r2, #97	; 0x61
   13720:	f89d 3053 	ldrb.w	r3, [sp, #83]	; 0x53
   13724:	4413      	add	r3, r2
   13726:	b2db      	uxtb	r3, r3
   13728:	3b0a      	subs	r3, #10
   1372a:	b2da      	uxtb	r2, r3
   1372c:	9b15      	ldr	r3, [sp, #84]	; 0x54
   1372e:	1c59      	adds	r1, r3, #1
   13730:	9115      	str	r1, [sp, #84]	; 0x54
   13732:	a916      	add	r1, sp, #88	; 0x58
   13734:	440b      	add	r3, r1
   13736:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
   1373a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   1373c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
   1373e:	fbb2 f3f3 	udiv	r3, r2, r3
   13742:	931a      	str	r3, [sp, #104]	; 0x68
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
   13744:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   13746:	2b00      	cmp	r3, #0
   13748:	d003      	beq.n	13752 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0xa2>
   1374a:	9b15      	ldr	r3, [sp, #84]	; 0x54
   1374c:	2b1f      	cmp	r3, #31
   1374e:	d800      	bhi.n	13752 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0xa2>
    do {
   13750:	e7cb      	b.n	136ea <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x3a>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
   13752:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   13754:	9306      	str	r3, [sp, #24]
   13756:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   13758:	9305      	str	r3, [sp, #20]
   1375a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   1375c:	9304      	str	r3, [sp, #16]
   1375e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
   13760:	9303      	str	r3, [sp, #12]
   13762:	f89d 306c 	ldrb.w	r3, [sp, #108]	; 0x6c
   13766:	9302      	str	r3, [sp, #8]
   13768:	9b15      	ldr	r3, [sp, #84]	; 0x54
   1376a:	9301      	str	r3, [sp, #4]
   1376c:	ab0c      	add	r3, sp, #48	; 0x30
   1376e:	9300      	str	r3, [sp, #0]
   13770:	9b08      	ldr	r3, [sp, #32]
   13772:	9a09      	ldr	r2, [sp, #36]	; 0x24
   13774:	990a      	ldr	r1, [sp, #40]	; 0x28
   13776:	980b      	ldr	r0, [sp, #44]	; 0x2c
   13778:	f7ff fe6c 	bl	13454 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)>
   1377c:	4605      	mov	r5, r0
   1377e:	4623      	mov	r3, r4
   13780:	4619      	mov	r1, r3
   13782:	4803      	ldr	r0, [pc, #12]	; (13790 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0xe0>)
   13784:	f7ff fccc 	bl	13120 <__cyg_profile_func_exit>
   13788:	462b      	mov	r3, r5
}
   1378a:	4618      	mov	r0, r3
   1378c:	b017      	add	sp, #92	; 0x5c
   1378e:	bd30      	pop	{r4, r5, pc}
   13790:	000136b1 	.word	0x000136b1

00013794 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)>:


// internal itoa for 'long long' type
#if defined(PRINTF_SUPPORT_LONG_LONG)
static size_t _ntoa_long_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long long value, bool negative, unsigned long long base, unsigned int prec, unsigned int width, unsigned int flags)
{
   13794:	b530      	push	{r4, r5, lr}
   13796:	b097      	sub	sp, #92	; 0x5c
   13798:	4675      	mov	r5, lr
   1379a:	900b      	str	r0, [sp, #44]	; 0x2c
   1379c:	910a      	str	r1, [sp, #40]	; 0x28
   1379e:	9209      	str	r2, [sp, #36]	; 0x24
   137a0:	9308      	str	r3, [sp, #32]
   137a2:	462b      	mov	r3, r5
   137a4:	4619      	mov	r1, r3
   137a6:	4837      	ldr	r0, [pc, #220]	; (13884 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0xf0>)
   137a8:	f7ff fca6 	bl	130f8 <__cyg_profile_func_enter>
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
   137ac:	2300      	movs	r3, #0
   137ae:	9315      	str	r3, [sp, #84]	; 0x54

  // no hash for 0 values
  if (!value) {
   137b0:	e9dd 341a 	ldrd	r3, r4, [sp, #104]	; 0x68
   137b4:	4323      	orrs	r3, r4
   137b6:	d103      	bne.n	137c0 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0x2c>
    flags &= ~FLAGS_HASH;
   137b8:	9b22      	ldr	r3, [sp, #136]	; 0x88
   137ba:	f023 0310 	bic.w	r3, r3, #16
   137be:	9322      	str	r3, [sp, #136]	; 0x88
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
   137c0:	9b22      	ldr	r3, [sp, #136]	; 0x88
   137c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
   137c6:	2b00      	cmp	r3, #0
   137c8:	d003      	beq.n	137d2 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0x3e>
   137ca:	e9dd 341a 	ldrd	r3, r4, [sp, #104]	; 0x68
   137ce:	4323      	orrs	r3, r4
   137d0:	d039      	beq.n	13846 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0xb2>
    do {
      const char digit = (char)(value % base);
   137d2:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
   137d6:	e9dd 231e 	ldrd	r2, r3, [sp, #120]	; 0x78
   137da:	f003 fceb 	bl	171b4 <__aeabi_uldivmod>
   137de:	461c      	mov	r4, r3
   137e0:	4613      	mov	r3, r2
   137e2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
   137e6:	f89d 3053 	ldrb.w	r3, [sp, #83]	; 0x53
   137ea:	2b09      	cmp	r3, #9
   137ec:	d804      	bhi.n	137f8 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0x64>
   137ee:	f89d 3053 	ldrb.w	r3, [sp, #83]	; 0x53
   137f2:	3330      	adds	r3, #48	; 0x30
   137f4:	b2da      	uxtb	r2, r3
   137f6:	e00d      	b.n	13814 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0x80>
   137f8:	9b22      	ldr	r3, [sp, #136]	; 0x88
   137fa:	f003 0320 	and.w	r3, r3, #32
   137fe:	2b00      	cmp	r3, #0
   13800:	d001      	beq.n	13806 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0x72>
   13802:	2241      	movs	r2, #65	; 0x41
   13804:	e000      	b.n	13808 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0x74>
   13806:	2261      	movs	r2, #97	; 0x61
   13808:	f89d 3053 	ldrb.w	r3, [sp, #83]	; 0x53
   1380c:	4413      	add	r3, r2
   1380e:	b2db      	uxtb	r3, r3
   13810:	3b0a      	subs	r3, #10
   13812:	b2da      	uxtb	r2, r3
   13814:	9b15      	ldr	r3, [sp, #84]	; 0x54
   13816:	1c59      	adds	r1, r3, #1
   13818:	9115      	str	r1, [sp, #84]	; 0x54
   1381a:	a916      	add	r1, sp, #88	; 0x58
   1381c:	440b      	add	r3, r1
   1381e:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
   13822:	e9dd 231e 	ldrd	r2, r3, [sp, #120]	; 0x78
   13826:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
   1382a:	f003 fcc3 	bl	171b4 <__aeabi_uldivmod>
   1382e:	4603      	mov	r3, r0
   13830:	460c      	mov	r4, r1
   13832:	e9cd 341a 	strd	r3, r4, [sp, #104]	; 0x68
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
   13836:	e9dd 341a 	ldrd	r3, r4, [sp, #104]	; 0x68
   1383a:	4323      	orrs	r3, r4
   1383c:	d003      	beq.n	13846 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0xb2>
   1383e:	9b15      	ldr	r3, [sp, #84]	; 0x54
   13840:	2b1f      	cmp	r3, #31
   13842:	d800      	bhi.n	13846 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0xb2>
    do {
   13844:	e7c5      	b.n	137d2 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0x3e>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
   13846:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   13848:	9a22      	ldr	r2, [sp, #136]	; 0x88
   1384a:	9206      	str	r2, [sp, #24]
   1384c:	9a21      	ldr	r2, [sp, #132]	; 0x84
   1384e:	9205      	str	r2, [sp, #20]
   13850:	9a20      	ldr	r2, [sp, #128]	; 0x80
   13852:	9204      	str	r2, [sp, #16]
   13854:	9303      	str	r3, [sp, #12]
   13856:	f89d 3070 	ldrb.w	r3, [sp, #112]	; 0x70
   1385a:	9302      	str	r3, [sp, #8]
   1385c:	9b15      	ldr	r3, [sp, #84]	; 0x54
   1385e:	9301      	str	r3, [sp, #4]
   13860:	ab0c      	add	r3, sp, #48	; 0x30
   13862:	9300      	str	r3, [sp, #0]
   13864:	9b08      	ldr	r3, [sp, #32]
   13866:	9a09      	ldr	r2, [sp, #36]	; 0x24
   13868:	990a      	ldr	r1, [sp, #40]	; 0x28
   1386a:	980b      	ldr	r0, [sp, #44]	; 0x2c
   1386c:	f7ff fdf2 	bl	13454 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)>
   13870:	4604      	mov	r4, r0
   13872:	462b      	mov	r3, r5
   13874:	4619      	mov	r1, r3
   13876:	4803      	ldr	r0, [pc, #12]	; (13884 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0xf0>)
   13878:	f7ff fc52 	bl	13120 <__cyg_profile_func_exit>
   1387c:	4623      	mov	r3, r4
}
   1387e:	4618      	mov	r0, r3
   13880:	b017      	add	sp, #92	; 0x5c
   13882:	bd30      	pop	{r4, r5, pc}
   13884:	00013795 	.word	0x00013795

00013888 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)>:
#endif  // PRINTF_SUPPORT_LONG_LONG


#if defined(PRINTF_SUPPORT_FLOAT)
static size_t _ftoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value_param, unsigned int prec, unsigned int width, unsigned int flags)
{
   13888:	b530      	push	{r4, r5, lr}
   1388a:	b09b      	sub	sp, #108	; 0x6c
   1388c:	4675      	mov	r5, lr
   1388e:	9005      	str	r0, [sp, #20]
   13890:	9104      	str	r1, [sp, #16]
   13892:	9203      	str	r2, [sp, #12]
   13894:	9302      	str	r3, [sp, #8]
   13896:	ed8d 0b00 	vstr	d0, [sp]
   1389a:	462b      	mov	r3, r5
   1389c:	4619      	mov	r1, r3
   1389e:	48b7      	ldr	r0, [pc, #732]	; (13b7c <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x2f4>)
   138a0:	f7ff fc2a 	bl	130f8 <__cyg_profile_func_enter>
  const size_t start_idx = idx;
   138a4:	9b03      	ldr	r3, [sp, #12]
   138a6:	9311      	str	r3, [sp, #68]	; 0x44

  float value = static_cast<float>(value_param);
   138a8:	e9dd 0100 	ldrd	r0, r1, [sp]
   138ac:	f003 fc32 	bl	17114 <__aeabi_d2f>
   138b0:	4603      	mov	r3, r0
   138b2:	9319      	str	r3, [sp, #100]	; 0x64

  char buf[PRINTF_FTOA_BUFFER_SIZE];
  size_t len  = 0U;
   138b4:	2300      	movs	r3, #0
   138b6:	9318      	str	r3, [sp, #96]	; 0x60
  float diff = 0.0;
   138b8:	f04f 0300 	mov.w	r3, #0
   138bc:	9310      	str	r3, [sp, #64]	; 0x40

  // if input is larger than thres_max, revert to exponential
  const float thres_max = (float)0x7FFFFFFF;
   138be:	f04f 439e 	mov.w	r3, #1325400064	; 0x4f000000
   138c2:	930f      	str	r3, [sp, #60]	; 0x3c

  // powers of 10
  static const float pow10[] = { 1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000 };

  // test for negative
  bool negative = false;
   138c4:	2300      	movs	r3, #0
   138c6:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
  if (value < 0) {
   138ca:	eddd 7a19 	vldr	s15, [sp, #100]	; 0x64
   138ce:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   138d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   138d6:	d50a      	bpl.n	138ee <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x66>
    negative = true;
   138d8:	2301      	movs	r3, #1
   138da:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
    value = 0 - value;
   138de:	ed9f 7aa8 	vldr	s14, [pc, #672]	; 13b80 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x2f8>
   138e2:	eddd 7a19 	vldr	s15, [sp, #100]	; 0x64
   138e6:	ee77 7a67 	vsub.f32	s15, s14, s15
   138ea:	edcd 7a19 	vstr	s15, [sp, #100]	; 0x64
  }

  // set default precision to 6, if not set explicitly
  if (!(flags & FLAGS_PRECISION)) {
   138ee:	9b20      	ldr	r3, [sp, #128]	; 0x80
   138f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
   138f4:	2b00      	cmp	r3, #0
   138f6:	d101      	bne.n	138fc <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x74>
    prec = 6U;
   138f8:	2306      	movs	r3, #6
   138fa:	931e      	str	r3, [sp, #120]	; 0x78
  }
  // limit precision to 9, cause a prec >= 10 can lead to overflow errors
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
   138fc:	9b18      	ldr	r3, [sp, #96]	; 0x60
   138fe:	2b1f      	cmp	r3, #31
   13900:	d80e      	bhi.n	13920 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x98>
   13902:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   13904:	2b09      	cmp	r3, #9
   13906:	d90b      	bls.n	13920 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x98>
    buf[len++] = '0';
   13908:	9b18      	ldr	r3, [sp, #96]	; 0x60
   1390a:	1c5a      	adds	r2, r3, #1
   1390c:	9218      	str	r2, [sp, #96]	; 0x60
   1390e:	aa1a      	add	r2, sp, #104	; 0x68
   13910:	4413      	add	r3, r2
   13912:	2230      	movs	r2, #48	; 0x30
   13914:	f803 2c50 	strb.w	r2, [r3, #-80]
    prec--;
   13918:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   1391a:	3b01      	subs	r3, #1
   1391c:	931e      	str	r3, [sp, #120]	; 0x78
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
   1391e:	e7ed      	b.n	138fc <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x74>
  }

  int whole = (int)value;
   13920:	eddd 7a19 	vldr	s15, [sp, #100]	; 0x64
   13924:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   13928:	ee17 3a90 	vmov	r3, s15
   1392c:	9316      	str	r3, [sp, #88]	; 0x58
  float tmp = (value - whole) * pow10[prec];
   1392e:	9b16      	ldr	r3, [sp, #88]	; 0x58
   13930:	ee07 3a90 	vmov	s15, r3
   13934:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   13938:	ed9d 7a19 	vldr	s14, [sp, #100]	; 0x64
   1393c:	ee37 7a67 	vsub.f32	s14, s14, s15
   13940:	4a90      	ldr	r2, [pc, #576]	; (13b84 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x2fc>)
   13942:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   13944:	009b      	lsls	r3, r3, #2
   13946:	4413      	add	r3, r2
   13948:	edd3 7a00 	vldr	s15, [r3]
   1394c:	ee67 7a27 	vmul.f32	s15, s14, s15
   13950:	edcd 7a0e 	vstr	s15, [sp, #56]	; 0x38
  unsigned long frac = (unsigned long)tmp;
   13954:	eddd 7a0e 	vldr	s15, [sp, #56]	; 0x38
   13958:	eefc 7ae7 	vcvt.u32.f32	s15, s15
   1395c:	ee17 3a90 	vmov	r3, s15
   13960:	9315      	str	r3, [sp, #84]	; 0x54
  diff = tmp - frac;
   13962:	9b15      	ldr	r3, [sp, #84]	; 0x54
   13964:	ee07 3a90 	vmov	s15, r3
   13968:	eef8 7a67 	vcvt.f32.u32	s15, s15
   1396c:	ed9d 7a0e 	vldr	s14, [sp, #56]	; 0x38
   13970:	ee77 7a67 	vsub.f32	s15, s14, s15
   13974:	edcd 7a10 	vstr	s15, [sp, #64]	; 0x40

  if (diff > 0.5) {
   13978:	eddd 7a10 	vldr	s15, [sp, #64]	; 0x40
   1397c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
   13980:	eef4 7ac7 	vcmpe.f32	s15, s14
   13984:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   13988:	dd18      	ble.n	139bc <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x134>
    ++frac;
   1398a:	9b15      	ldr	r3, [sp, #84]	; 0x54
   1398c:	3301      	adds	r3, #1
   1398e:	9315      	str	r3, [sp, #84]	; 0x54
    // handle rollover, e.g. case 0.99 with prec 1 is 1.0
    if (frac >= pow10[prec]) {
   13990:	9b15      	ldr	r3, [sp, #84]	; 0x54
   13992:	ee07 3a90 	vmov	s15, r3
   13996:	eeb8 7a67 	vcvt.f32.u32	s14, s15
   1399a:	4a7a      	ldr	r2, [pc, #488]	; (13b84 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x2fc>)
   1399c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   1399e:	009b      	lsls	r3, r3, #2
   139a0:	4413      	add	r3, r2
   139a2:	edd3 7a00 	vldr	s15, [r3]
   139a6:	eeb4 7ae7 	vcmpe.f32	s14, s15
   139aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   139ae:	db19      	blt.n	139e4 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x15c>
      frac = 0;
   139b0:	2300      	movs	r3, #0
   139b2:	9315      	str	r3, [sp, #84]	; 0x54
      ++whole;
   139b4:	9b16      	ldr	r3, [sp, #88]	; 0x58
   139b6:	3301      	adds	r3, #1
   139b8:	9316      	str	r3, [sp, #88]	; 0x58
   139ba:	e013      	b.n	139e4 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x15c>
    }
  }
  else if ((diff == 0.5) && ((frac == 0U) || (frac & 1U))) {
   139bc:	eddd 7a10 	vldr	s15, [sp, #64]	; 0x40
   139c0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
   139c4:	eef4 7a47 	vcmp.f32	s15, s14
   139c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   139cc:	d10a      	bne.n	139e4 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x15c>
   139ce:	9b15      	ldr	r3, [sp, #84]	; 0x54
   139d0:	2b00      	cmp	r3, #0
   139d2:	d004      	beq.n	139de <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x156>
   139d4:	9b15      	ldr	r3, [sp, #84]	; 0x54
   139d6:	f003 0301 	and.w	r3, r3, #1
   139da:	2b00      	cmp	r3, #0
   139dc:	d002      	beq.n	139e4 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x15c>
    // if halfway, round up if odd, OR if last digit is 0
    ++frac;
   139de:	9b15      	ldr	r3, [sp, #84]	; 0x54
   139e0:	3301      	adds	r3, #1
   139e2:	9315      	str	r3, [sp, #84]	; 0x54
  }

  // TBD: for very large numbers switch back to native sprintf for exponentials. Anyone want to write code to replace this?
  // Normal printf behavior is to print EVERY whole number digit which can be 100s of characters overflowing your buffers == bad
  if (value > thres_max) {
   139e4:	eddd 7a19 	vldr	s15, [sp, #100]	; 0x64
   139e8:	ed9f 7a67 	vldr	s14, [pc, #412]	; 13b88 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x300>
   139ec:	eef4 7ac7 	vcmpe.f32	s15, s14
   139f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   139f4:	dd01      	ble.n	139fa <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x172>
    return 0U;
   139f6:	2400      	movs	r4, #0
   139f8:	e156      	b.n	13ca8 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x420>
  }

  if (prec == 0U) {
   139fa:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   139fc:	2b00      	cmp	r3, #0
   139fe:	d129      	bne.n	13a54 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x1cc>
    diff = value - (float)whole;
   13a00:	9b16      	ldr	r3, [sp, #88]	; 0x58
   13a02:	ee07 3a90 	vmov	s15, r3
   13a06:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   13a0a:	ed9d 7a19 	vldr	s14, [sp, #100]	; 0x64
   13a0e:	ee77 7a67 	vsub.f32	s15, s14, s15
   13a12:	edcd 7a10 	vstr	s15, [sp, #64]	; 0x40
    if (diff > 0.5) {
   13a16:	eddd 7a10 	vldr	s15, [sp, #64]	; 0x40
   13a1a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
   13a1e:	eef4 7ac7 	vcmpe.f32	s15, s14
   13a22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   13a26:	dd03      	ble.n	13a30 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x1a8>
      // greater than 0.5, round up, e.g. 1.6 -> 2
      ++whole;
   13a28:	9b16      	ldr	r3, [sp, #88]	; 0x58
   13a2a:	3301      	adds	r3, #1
   13a2c:	9316      	str	r3, [sp, #88]	; 0x58
   13a2e:	e05f      	b.n	13af0 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x268>
    }
    else if ((diff == 0.5) && (whole & 1)) {
   13a30:	eddd 7a10 	vldr	s15, [sp, #64]	; 0x40
   13a34:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
   13a38:	eef4 7a47 	vcmp.f32	s15, s14
   13a3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   13a40:	d156      	bne.n	13af0 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x268>
   13a42:	9b16      	ldr	r3, [sp, #88]	; 0x58
   13a44:	f003 0301 	and.w	r3, r3, #1
   13a48:	2b00      	cmp	r3, #0
   13a4a:	d051      	beq.n	13af0 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x268>
      // exactly 0.5 and ODD, then round up
      // 1.5 -> 2, but 2.5 -> 2
      ++whole;
   13a4c:	9b16      	ldr	r3, [sp, #88]	; 0x58
   13a4e:	3301      	adds	r3, #1
   13a50:	9316      	str	r3, [sp, #88]	; 0x58
   13a52:	e04d      	b.n	13af0 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x268>
    }
  }
  else {
    unsigned int count = prec;
   13a54:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   13a56:	9314      	str	r3, [sp, #80]	; 0x50
    // now do fractional part, as an unsigned number
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
   13a58:	9b18      	ldr	r3, [sp, #96]	; 0x60
   13a5a:	2b1f      	cmp	r3, #31
   13a5c:	d827      	bhi.n	13aae <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x226>
      --count;
   13a5e:	9b14      	ldr	r3, [sp, #80]	; 0x50
   13a60:	3b01      	subs	r3, #1
   13a62:	9314      	str	r3, [sp, #80]	; 0x50
      buf[len++] = (char)(48U + (frac % 10U));
   13a64:	9915      	ldr	r1, [sp, #84]	; 0x54
   13a66:	4b49      	ldr	r3, [pc, #292]	; (13b8c <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x304>)
   13a68:	fba3 2301 	umull	r2, r3, r3, r1
   13a6c:	08da      	lsrs	r2, r3, #3
   13a6e:	4613      	mov	r3, r2
   13a70:	009b      	lsls	r3, r3, #2
   13a72:	4413      	add	r3, r2
   13a74:	005b      	lsls	r3, r3, #1
   13a76:	1aca      	subs	r2, r1, r3
   13a78:	b2d3      	uxtb	r3, r2
   13a7a:	3330      	adds	r3, #48	; 0x30
   13a7c:	b2d9      	uxtb	r1, r3
   13a7e:	9b18      	ldr	r3, [sp, #96]	; 0x60
   13a80:	1c5a      	adds	r2, r3, #1
   13a82:	9218      	str	r2, [sp, #96]	; 0x60
   13a84:	aa1a      	add	r2, sp, #104	; 0x68
   13a86:	4413      	add	r3, r2
   13a88:	460a      	mov	r2, r1
   13a8a:	f803 2c50 	strb.w	r2, [r3, #-80]
      if (!(frac /= 10U)) {
   13a8e:	9b15      	ldr	r3, [sp, #84]	; 0x54
   13a90:	4a3e      	ldr	r2, [pc, #248]	; (13b8c <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x304>)
   13a92:	fba2 2303 	umull	r2, r3, r2, r3
   13a96:	08db      	lsrs	r3, r3, #3
   13a98:	9315      	str	r3, [sp, #84]	; 0x54
   13a9a:	9b15      	ldr	r3, [sp, #84]	; 0x54
   13a9c:	2b00      	cmp	r3, #0
   13a9e:	bf0c      	ite	eq
   13aa0:	2301      	moveq	r3, #1
   13aa2:	2300      	movne	r3, #0
   13aa4:	b2db      	uxtb	r3, r3
   13aa6:	2b00      	cmp	r3, #0
   13aa8:	d100      	bne.n	13aac <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x224>
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
   13aaa:	e7d5      	b.n	13a58 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x1d0>
        break;
   13aac:	bf00      	nop
      }
    }
    // add extra 0s
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
   13aae:	9b18      	ldr	r3, [sp, #96]	; 0x60
   13ab0:	2b1f      	cmp	r3, #31
   13ab2:	d806      	bhi.n	13ac2 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x23a>
   13ab4:	9b14      	ldr	r3, [sp, #80]	; 0x50
   13ab6:	1e5a      	subs	r2, r3, #1
   13ab8:	9214      	str	r2, [sp, #80]	; 0x50
   13aba:	2b00      	cmp	r3, #0
   13abc:	d001      	beq.n	13ac2 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x23a>
   13abe:	2301      	movs	r3, #1
   13ac0:	e000      	b.n	13ac4 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x23c>
   13ac2:	2300      	movs	r3, #0
   13ac4:	2b00      	cmp	r3, #0
   13ac6:	d008      	beq.n	13ada <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x252>
      buf[len++] = '0';
   13ac8:	9b18      	ldr	r3, [sp, #96]	; 0x60
   13aca:	1c5a      	adds	r2, r3, #1
   13acc:	9218      	str	r2, [sp, #96]	; 0x60
   13ace:	aa1a      	add	r2, sp, #104	; 0x68
   13ad0:	4413      	add	r3, r2
   13ad2:	2230      	movs	r2, #48	; 0x30
   13ad4:	f803 2c50 	strb.w	r2, [r3, #-80]
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
   13ad8:	e7e9      	b.n	13aae <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x226>
    }
    if (len < PRINTF_FTOA_BUFFER_SIZE) {
   13ada:	9b18      	ldr	r3, [sp, #96]	; 0x60
   13adc:	2b1f      	cmp	r3, #31
   13ade:	d807      	bhi.n	13af0 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x268>
      // add decimal
      buf[len++] = '.';
   13ae0:	9b18      	ldr	r3, [sp, #96]	; 0x60
   13ae2:	1c5a      	adds	r2, r3, #1
   13ae4:	9218      	str	r2, [sp, #96]	; 0x60
   13ae6:	aa1a      	add	r2, sp, #104	; 0x68
   13ae8:	4413      	add	r3, r2
   13aea:	222e      	movs	r2, #46	; 0x2e
   13aec:	f803 2c50 	strb.w	r2, [r3, #-80]
    }
  }

  // do whole part, number is reversed
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
   13af0:	9b18      	ldr	r3, [sp, #96]	; 0x60
   13af2:	2b1f      	cmp	r3, #31
   13af4:	d828      	bhi.n	13b48 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x2c0>
    buf[len++] = (char)(48 + (whole % 10));
   13af6:	9a16      	ldr	r2, [sp, #88]	; 0x58
   13af8:	4b25      	ldr	r3, [pc, #148]	; (13b90 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x308>)
   13afa:	fb83 1302 	smull	r1, r3, r3, r2
   13afe:	1099      	asrs	r1, r3, #2
   13b00:	17d3      	asrs	r3, r2, #31
   13b02:	1ac9      	subs	r1, r1, r3
   13b04:	460b      	mov	r3, r1
   13b06:	009b      	lsls	r3, r3, #2
   13b08:	440b      	add	r3, r1
   13b0a:	005b      	lsls	r3, r3, #1
   13b0c:	1ad1      	subs	r1, r2, r3
   13b0e:	b2cb      	uxtb	r3, r1
   13b10:	3330      	adds	r3, #48	; 0x30
   13b12:	b2d9      	uxtb	r1, r3
   13b14:	9b18      	ldr	r3, [sp, #96]	; 0x60
   13b16:	1c5a      	adds	r2, r3, #1
   13b18:	9218      	str	r2, [sp, #96]	; 0x60
   13b1a:	aa1a      	add	r2, sp, #104	; 0x68
   13b1c:	4413      	add	r3, r2
   13b1e:	460a      	mov	r2, r1
   13b20:	f803 2c50 	strb.w	r2, [r3, #-80]
    if (!(whole /= 10)) {
   13b24:	9b16      	ldr	r3, [sp, #88]	; 0x58
   13b26:	4a1a      	ldr	r2, [pc, #104]	; (13b90 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x308>)
   13b28:	fb82 1203 	smull	r1, r2, r2, r3
   13b2c:	1092      	asrs	r2, r2, #2
   13b2e:	17db      	asrs	r3, r3, #31
   13b30:	1ad3      	subs	r3, r2, r3
   13b32:	9316      	str	r3, [sp, #88]	; 0x58
   13b34:	9b16      	ldr	r3, [sp, #88]	; 0x58
   13b36:	2b00      	cmp	r3, #0
   13b38:	bf0c      	ite	eq
   13b3a:	2301      	moveq	r3, #1
   13b3c:	2300      	movne	r3, #0
   13b3e:	b2db      	uxtb	r3, r3
   13b40:	2b00      	cmp	r3, #0
   13b42:	d100      	bne.n	13b46 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x2be>
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
   13b44:	e7d4      	b.n	13af0 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x268>
      break;
   13b46:	bf00      	nop
    }
  }

  // pad leading zeros
  while (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
   13b48:	9b20      	ldr	r3, [sp, #128]	; 0x80
   13b4a:	f003 0302 	and.w	r3, r3, #2
   13b4e:	2b00      	cmp	r3, #0
   13b50:	d120      	bne.n	13b94 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x30c>
   13b52:	9b20      	ldr	r3, [sp, #128]	; 0x80
   13b54:	f003 0301 	and.w	r3, r3, #1
   13b58:	2b00      	cmp	r3, #0
   13b5a:	d01b      	beq.n	13b94 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x30c>
   13b5c:	9a18      	ldr	r2, [sp, #96]	; 0x60
   13b5e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   13b60:	429a      	cmp	r2, r3
   13b62:	d217      	bcs.n	13b94 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x30c>
   13b64:	9b18      	ldr	r3, [sp, #96]	; 0x60
   13b66:	2b1f      	cmp	r3, #31
   13b68:	d814      	bhi.n	13b94 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x30c>
    buf[len++] = '0';
   13b6a:	9b18      	ldr	r3, [sp, #96]	; 0x60
   13b6c:	1c5a      	adds	r2, r3, #1
   13b6e:	9218      	str	r2, [sp, #96]	; 0x60
   13b70:	aa1a      	add	r2, sp, #104	; 0x68
   13b72:	4413      	add	r3, r2
   13b74:	2230      	movs	r2, #48	; 0x30
   13b76:	f803 2c50 	strb.w	r2, [r3, #-80]
  while (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
   13b7a:	e7e5      	b.n	13b48 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x2c0>
   13b7c:	00013889 	.word	0x00013889
   13b80:	00000000 	.word	0x00000000
   13b84:	00018238 	.word	0x00018238
   13b88:	4f000000 	.word	0x4f000000
   13b8c:	cccccccd 	.word	0xcccccccd
   13b90:	66666667 	.word	0x66666667
  }

  // handle sign
  if ((len == width) && (negative || (flags & FLAGS_PLUS) || (flags & FLAGS_SPACE))) {
   13b94:	9a18      	ldr	r2, [sp, #96]	; 0x60
   13b96:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   13b98:	429a      	cmp	r2, r3
   13b9a:	d110      	bne.n	13bbe <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x336>
   13b9c:	f89d 305f 	ldrb.w	r3, [sp, #95]	; 0x5f
   13ba0:	2b00      	cmp	r3, #0
   13ba2:	d109      	bne.n	13bb8 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x330>
   13ba4:	9b20      	ldr	r3, [sp, #128]	; 0x80
   13ba6:	f003 0304 	and.w	r3, r3, #4
   13baa:	2b00      	cmp	r3, #0
   13bac:	d104      	bne.n	13bb8 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x330>
   13bae:	9b20      	ldr	r3, [sp, #128]	; 0x80
   13bb0:	f003 0308 	and.w	r3, r3, #8
   13bb4:	2b00      	cmp	r3, #0
   13bb6:	d002      	beq.n	13bbe <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x336>
    len--;
   13bb8:	9b18      	ldr	r3, [sp, #96]	; 0x60
   13bba:	3b01      	subs	r3, #1
   13bbc:	9318      	str	r3, [sp, #96]	; 0x60
  }
  if (len < PRINTF_FTOA_BUFFER_SIZE) {
   13bbe:	9b18      	ldr	r3, [sp, #96]	; 0x60
   13bc0:	2b1f      	cmp	r3, #31
   13bc2:	d827      	bhi.n	13c14 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x38c>
    if (negative) {
   13bc4:	f89d 305f 	ldrb.w	r3, [sp, #95]	; 0x5f
   13bc8:	2b00      	cmp	r3, #0
   13bca:	d008      	beq.n	13bde <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x356>
      buf[len++] = '-';
   13bcc:	9b18      	ldr	r3, [sp, #96]	; 0x60
   13bce:	1c5a      	adds	r2, r3, #1
   13bd0:	9218      	str	r2, [sp, #96]	; 0x60
   13bd2:	aa1a      	add	r2, sp, #104	; 0x68
   13bd4:	4413      	add	r3, r2
   13bd6:	222d      	movs	r2, #45	; 0x2d
   13bd8:	f803 2c50 	strb.w	r2, [r3, #-80]
   13bdc:	e01a      	b.n	13c14 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x38c>
    }
    else if (flags & FLAGS_PLUS) {
   13bde:	9b20      	ldr	r3, [sp, #128]	; 0x80
   13be0:	f003 0304 	and.w	r3, r3, #4
   13be4:	2b00      	cmp	r3, #0
   13be6:	d008      	beq.n	13bfa <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x372>
      buf[len++] = '+';  // ignore the space if the '+' exists
   13be8:	9b18      	ldr	r3, [sp, #96]	; 0x60
   13bea:	1c5a      	adds	r2, r3, #1
   13bec:	9218      	str	r2, [sp, #96]	; 0x60
   13bee:	aa1a      	add	r2, sp, #104	; 0x68
   13bf0:	4413      	add	r3, r2
   13bf2:	222b      	movs	r2, #43	; 0x2b
   13bf4:	f803 2c50 	strb.w	r2, [r3, #-80]
   13bf8:	e00c      	b.n	13c14 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x38c>
    }
    else if (flags & FLAGS_SPACE) {
   13bfa:	9b20      	ldr	r3, [sp, #128]	; 0x80
   13bfc:	f003 0308 	and.w	r3, r3, #8
   13c00:	2b00      	cmp	r3, #0
   13c02:	d007      	beq.n	13c14 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x38c>
      buf[len++] = ' ';
   13c04:	9b18      	ldr	r3, [sp, #96]	; 0x60
   13c06:	1c5a      	adds	r2, r3, #1
   13c08:	9218      	str	r2, [sp, #96]	; 0x60
   13c0a:	aa1a      	add	r2, sp, #104	; 0x68
   13c0c:	4413      	add	r3, r2
   13c0e:	2220      	movs	r2, #32
   13c10:	f803 2c50 	strb.w	r2, [r3, #-80]
    }
  }

  // pad spaces up to given width
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
   13c14:	9b20      	ldr	r3, [sp, #128]	; 0x80
   13c16:	f003 0302 	and.w	r3, r3, #2
   13c1a:	2b00      	cmp	r3, #0
   13c1c:	d116      	bne.n	13c4c <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x3c4>
   13c1e:	9b20      	ldr	r3, [sp, #128]	; 0x80
   13c20:	f003 0301 	and.w	r3, r3, #1
   13c24:	2b00      	cmp	r3, #0
   13c26:	d111      	bne.n	13c4c <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x3c4>
    for (size_t i = len; i < width; i++) {
   13c28:	9b18      	ldr	r3, [sp, #96]	; 0x60
   13c2a:	9313      	str	r3, [sp, #76]	; 0x4c
   13c2c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   13c2e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   13c30:	429a      	cmp	r2, r3
   13c32:	d20b      	bcs.n	13c4c <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x3c4>
      out(' ', buffer, idx++, maxlen);
   13c34:	9a03      	ldr	r2, [sp, #12]
   13c36:	1c53      	adds	r3, r2, #1
   13c38:	9303      	str	r3, [sp, #12]
   13c3a:	9c05      	ldr	r4, [sp, #20]
   13c3c:	9b02      	ldr	r3, [sp, #8]
   13c3e:	9904      	ldr	r1, [sp, #16]
   13c40:	2020      	movs	r0, #32
   13c42:	47a0      	blx	r4
    for (size_t i = len; i < width; i++) {
   13c44:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   13c46:	3301      	adds	r3, #1
   13c48:	9313      	str	r3, [sp, #76]	; 0x4c
   13c4a:	e7ef      	b.n	13c2c <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x3a4>
    }
  }

  // reverse string
  for (size_t i = 0U; i < len; i++) {
   13c4c:	2300      	movs	r3, #0
   13c4e:	9312      	str	r3, [sp, #72]	; 0x48
   13c50:	9a12      	ldr	r2, [sp, #72]	; 0x48
   13c52:	9b18      	ldr	r3, [sp, #96]	; 0x60
   13c54:	429a      	cmp	r2, r3
   13c56:	d212      	bcs.n	13c7e <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x3f6>
    out(buf[len - i - 1U], buffer, idx++, maxlen);
   13c58:	9a18      	ldr	r2, [sp, #96]	; 0x60
   13c5a:	9b12      	ldr	r3, [sp, #72]	; 0x48
   13c5c:	1ad3      	subs	r3, r2, r3
   13c5e:	3b01      	subs	r3, #1
   13c60:	aa1a      	add	r2, sp, #104	; 0x68
   13c62:	4413      	add	r3, r2
   13c64:	f813 0c50 	ldrb.w	r0, [r3, #-80]
   13c68:	9a03      	ldr	r2, [sp, #12]
   13c6a:	1c53      	adds	r3, r2, #1
   13c6c:	9303      	str	r3, [sp, #12]
   13c6e:	9c05      	ldr	r4, [sp, #20]
   13c70:	9b02      	ldr	r3, [sp, #8]
   13c72:	9904      	ldr	r1, [sp, #16]
   13c74:	47a0      	blx	r4
  for (size_t i = 0U; i < len; i++) {
   13c76:	9b12      	ldr	r3, [sp, #72]	; 0x48
   13c78:	3301      	adds	r3, #1
   13c7a:	9312      	str	r3, [sp, #72]	; 0x48
   13c7c:	e7e8      	b.n	13c50 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x3c8>
  }

  // append pad spaces up to given width
  if (flags & FLAGS_LEFT) {
   13c7e:	9b20      	ldr	r3, [sp, #128]	; 0x80
   13c80:	f003 0302 	and.w	r3, r3, #2
   13c84:	2b00      	cmp	r3, #0
   13c86:	d00e      	beq.n	13ca6 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x41e>
    while (idx - start_idx < width) {
   13c88:	9a03      	ldr	r2, [sp, #12]
   13c8a:	9b11      	ldr	r3, [sp, #68]	; 0x44
   13c8c:	1ad3      	subs	r3, r2, r3
   13c8e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   13c90:	429a      	cmp	r2, r3
   13c92:	d908      	bls.n	13ca6 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x41e>
      out(' ', buffer, idx++, maxlen);
   13c94:	9a03      	ldr	r2, [sp, #12]
   13c96:	1c53      	adds	r3, r2, #1
   13c98:	9303      	str	r3, [sp, #12]
   13c9a:	9c05      	ldr	r4, [sp, #20]
   13c9c:	9b02      	ldr	r3, [sp, #8]
   13c9e:	9904      	ldr	r1, [sp, #16]
   13ca0:	2020      	movs	r0, #32
   13ca2:	47a0      	blx	r4
    while (idx - start_idx < width) {
   13ca4:	e7f0      	b.n	13c88 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x400>
    }
  }

  return idx;
   13ca6:	9c03      	ldr	r4, [sp, #12]
   13ca8:	462b      	mov	r3, r5
   13caa:	4619      	mov	r1, r3
   13cac:	4803      	ldr	r0, [pc, #12]	; (13cbc <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x434>)
   13cae:	f7ff fa37 	bl	13120 <__cyg_profile_func_exit>
   13cb2:	4623      	mov	r3, r4
}
   13cb4:	4618      	mov	r0, r3
   13cb6:	b01b      	add	sp, #108	; 0x6c
   13cb8:	bd30      	pop	{r4, r5, pc}
   13cba:	bf00      	nop
   13cbc:	00013889 	.word	0x00013889

00013cc0 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)>:
#endif  // PRINTF_SUPPORT_FLOAT


// internal vsnprintf
static int _vsnprintf(out_fct_type out, char* buffer, const size_t maxlen, const char* format, va_list va)
{
   13cc0:	b570      	push	{r4, r5, r6, lr}
   13cc2:	b0a0      	sub	sp, #128	; 0x80
   13cc4:	4676      	mov	r6, lr
   13cc6:	900d      	str	r0, [sp, #52]	; 0x34
   13cc8:	910c      	str	r1, [sp, #48]	; 0x30
   13cca:	920b      	str	r2, [sp, #44]	; 0x2c
   13ccc:	930a      	str	r3, [sp, #40]	; 0x28
   13cce:	4633      	mov	r3, r6
   13cd0:	4619      	mov	r1, r3
   13cd2:	48a7      	ldr	r0, [pc, #668]	; (13f70 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2b0>)
   13cd4:	f7ff fa10 	bl	130f8 <__cyg_profile_func_enter>
  unsigned int flags, width, precision, n;
  size_t idx = 0U;
   13cd8:	2300      	movs	r3, #0
   13cda:	931b      	str	r3, [sp, #108]	; 0x6c

  if (!buffer) {
   13cdc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   13cde:	2b00      	cmp	r3, #0
   13ce0:	d101      	bne.n	13ce6 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x26>
    // use null output function
    out = _out_null;
   13ce2:	4ba4      	ldr	r3, [pc, #656]	; (13f74 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2b4>)
   13ce4:	930d      	str	r3, [sp, #52]	; 0x34
  }

  while (*format)
   13ce6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13ce8:	781b      	ldrb	r3, [r3, #0]
   13cea:	2b00      	cmp	r3, #0
   13cec:	f000 8448 	beq.w	14580 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8c0>
  {
    // format specifier?  %[flags][width][.precision][length]
    if (*format != '%') {
   13cf0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13cf2:	781b      	ldrb	r3, [r3, #0]
   13cf4:	2b25      	cmp	r3, #37	; 0x25
   13cf6:	d00d      	beq.n	13d14 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x54>
      // no
      out(*format, buffer, idx++, maxlen);
   13cf8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13cfa:	7818      	ldrb	r0, [r3, #0]
   13cfc:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   13cfe:	1c53      	adds	r3, r2, #1
   13d00:	931b      	str	r3, [sp, #108]	; 0x6c
   13d02:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   13d04:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   13d06:	990c      	ldr	r1, [sp, #48]	; 0x30
   13d08:	47a0      	blx	r4
      format++;
   13d0a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13d0c:	3301      	adds	r3, #1
   13d0e:	930a      	str	r3, [sp, #40]	; 0x28
      continue;
   13d10:	f000 bc34 	b.w	1457c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8bc>
    }
    else {
      // yes, evaluate it
      format++;
   13d14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13d16:	3301      	adds	r3, #1
   13d18:	930a      	str	r3, [sp, #40]	; 0x28
    }

    // evaluate flags
    flags = 0U;
   13d1a:	2300      	movs	r3, #0
   13d1c:	931f      	str	r3, [sp, #124]	; 0x7c
    do {
      switch (*format) {
   13d1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13d20:	781b      	ldrb	r3, [r3, #0]
   13d22:	3b20      	subs	r3, #32
   13d24:	2b10      	cmp	r3, #16
   13d26:	d857      	bhi.n	13dd8 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x118>
   13d28:	a201      	add	r2, pc, #4	; (adr r2, 13d30 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x70>)
   13d2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   13d2e:	bf00      	nop
   13d30:	00013db1 	.word	0x00013db1
   13d34:	00013dd9 	.word	0x00013dd9
   13d38:	00013dd9 	.word	0x00013dd9
   13d3c:	00013dc5 	.word	0x00013dc5
   13d40:	00013dd9 	.word	0x00013dd9
   13d44:	00013dd9 	.word	0x00013dd9
   13d48:	00013dd9 	.word	0x00013dd9
   13d4c:	00013dd9 	.word	0x00013dd9
   13d50:	00013dd9 	.word	0x00013dd9
   13d54:	00013dd9 	.word	0x00013dd9
   13d58:	00013dd9 	.word	0x00013dd9
   13d5c:	00013d9d 	.word	0x00013d9d
   13d60:	00013dd9 	.word	0x00013dd9
   13d64:	00013d89 	.word	0x00013d89
   13d68:	00013dd9 	.word	0x00013dd9
   13d6c:	00013dd9 	.word	0x00013dd9
   13d70:	00013d75 	.word	0x00013d75
        case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
   13d74:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   13d76:	f043 0301 	orr.w	r3, r3, #1
   13d7a:	931f      	str	r3, [sp, #124]	; 0x7c
   13d7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13d7e:	3301      	adds	r3, #1
   13d80:	930a      	str	r3, [sp, #40]	; 0x28
   13d82:	2301      	movs	r3, #1
   13d84:	931c      	str	r3, [sp, #112]	; 0x70
   13d86:	e02a      	b.n	13dde <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x11e>
        case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
   13d88:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   13d8a:	f043 0302 	orr.w	r3, r3, #2
   13d8e:	931f      	str	r3, [sp, #124]	; 0x7c
   13d90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13d92:	3301      	adds	r3, #1
   13d94:	930a      	str	r3, [sp, #40]	; 0x28
   13d96:	2301      	movs	r3, #1
   13d98:	931c      	str	r3, [sp, #112]	; 0x70
   13d9a:	e020      	b.n	13dde <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x11e>
        case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
   13d9c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   13d9e:	f043 0304 	orr.w	r3, r3, #4
   13da2:	931f      	str	r3, [sp, #124]	; 0x7c
   13da4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13da6:	3301      	adds	r3, #1
   13da8:	930a      	str	r3, [sp, #40]	; 0x28
   13daa:	2301      	movs	r3, #1
   13dac:	931c      	str	r3, [sp, #112]	; 0x70
   13dae:	e016      	b.n	13dde <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x11e>
        case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
   13db0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   13db2:	f043 0308 	orr.w	r3, r3, #8
   13db6:	931f      	str	r3, [sp, #124]	; 0x7c
   13db8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13dba:	3301      	adds	r3, #1
   13dbc:	930a      	str	r3, [sp, #40]	; 0x28
   13dbe:	2301      	movs	r3, #1
   13dc0:	931c      	str	r3, [sp, #112]	; 0x70
   13dc2:	e00c      	b.n	13dde <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x11e>
        case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;
   13dc4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   13dc6:	f043 0310 	orr.w	r3, r3, #16
   13dca:	931f      	str	r3, [sp, #124]	; 0x7c
   13dcc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13dce:	3301      	adds	r3, #1
   13dd0:	930a      	str	r3, [sp, #40]	; 0x28
   13dd2:	2301      	movs	r3, #1
   13dd4:	931c      	str	r3, [sp, #112]	; 0x70
   13dd6:	e002      	b.n	13dde <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x11e>
        default :                                   n = 0U; break;
   13dd8:	2300      	movs	r3, #0
   13dda:	931c      	str	r3, [sp, #112]	; 0x70
   13ddc:	bf00      	nop
      }
    } while (n);
   13dde:	9b1c      	ldr	r3, [sp, #112]	; 0x70
   13de0:	2b00      	cmp	r3, #0
   13de2:	d000      	beq.n	13de6 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x126>
    do {
   13de4:	e79b      	b.n	13d1e <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x5e>

    // evaluate width field
    width = 0U;
   13de6:	2300      	movs	r3, #0
   13de8:	931e      	str	r3, [sp, #120]	; 0x78
    if (_is_digit(*format)) {
   13dea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13dec:	781b      	ldrb	r3, [r3, #0]
   13dee:	4618      	mov	r0, r3
   13df0:	f7ff fade 	bl	133b0 <_is_digit(char)>
   13df4:	4603      	mov	r3, r0
   13df6:	2b00      	cmp	r3, #0
   13df8:	d005      	beq.n	13e06 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x146>
      width = _atoi(&format);
   13dfa:	ab0a      	add	r3, sp, #40	; 0x28
   13dfc:	4618      	mov	r0, r3
   13dfe:	f7ff faf9 	bl	133f4 <_atoi(char const**)>
   13e02:	901e      	str	r0, [sp, #120]	; 0x78
   13e04:	e018      	b.n	13e38 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x178>
    }
    else if (*format == '*') {
   13e06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13e08:	781b      	ldrb	r3, [r3, #0]
   13e0a:	2b2a      	cmp	r3, #42	; 0x2a
   13e0c:	d114      	bne.n	13e38 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x178>
      const int w = va_arg(va, int);
   13e0e:	9b24      	ldr	r3, [sp, #144]	; 0x90
   13e10:	1d1a      	adds	r2, r3, #4
   13e12:	9224      	str	r2, [sp, #144]	; 0x90
   13e14:	681b      	ldr	r3, [r3, #0]
   13e16:	9316      	str	r3, [sp, #88]	; 0x58
      if (w < 0) {
   13e18:	9b16      	ldr	r3, [sp, #88]	; 0x58
   13e1a:	2b00      	cmp	r3, #0
   13e1c:	da07      	bge.n	13e2e <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x16e>
        flags |= FLAGS_LEFT;    // reverse padding
   13e1e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   13e20:	f043 0302 	orr.w	r3, r3, #2
   13e24:	931f      	str	r3, [sp, #124]	; 0x7c
        width = (unsigned int)-w;
   13e26:	9b16      	ldr	r3, [sp, #88]	; 0x58
   13e28:	425b      	negs	r3, r3
   13e2a:	931e      	str	r3, [sp, #120]	; 0x78
   13e2c:	e001      	b.n	13e32 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x172>
      }
      else {
        width = (unsigned int)w;
   13e2e:	9b16      	ldr	r3, [sp, #88]	; 0x58
   13e30:	931e      	str	r3, [sp, #120]	; 0x78
      }
      format++;
   13e32:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13e34:	3301      	adds	r3, #1
   13e36:	930a      	str	r3, [sp, #40]	; 0x28
    }

    // evaluate precision field
    precision = 0U;
   13e38:	2300      	movs	r3, #0
   13e3a:	931d      	str	r3, [sp, #116]	; 0x74
    if (*format == '.') {
   13e3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13e3e:	781b      	ldrb	r3, [r3, #0]
   13e40:	2b2e      	cmp	r3, #46	; 0x2e
   13e42:	d124      	bne.n	13e8e <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x1ce>
      flags |= FLAGS_PRECISION;
   13e44:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   13e46:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
   13e4a:	931f      	str	r3, [sp, #124]	; 0x7c
      format++;
   13e4c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13e4e:	3301      	adds	r3, #1
   13e50:	930a      	str	r3, [sp, #40]	; 0x28
      if (_is_digit(*format)) {
   13e52:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13e54:	781b      	ldrb	r3, [r3, #0]
   13e56:	4618      	mov	r0, r3
   13e58:	f7ff faaa 	bl	133b0 <_is_digit(char)>
   13e5c:	4603      	mov	r3, r0
   13e5e:	2b00      	cmp	r3, #0
   13e60:	d005      	beq.n	13e6e <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x1ae>
        precision = _atoi(&format);
   13e62:	ab0a      	add	r3, sp, #40	; 0x28
   13e64:	4618      	mov	r0, r3
   13e66:	f7ff fac5 	bl	133f4 <_atoi(char const**)>
   13e6a:	901d      	str	r0, [sp, #116]	; 0x74
   13e6c:	e00f      	b.n	13e8e <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x1ce>
      }
      else if (*format == '*') {
   13e6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13e70:	781b      	ldrb	r3, [r3, #0]
   13e72:	2b2a      	cmp	r3, #42	; 0x2a
   13e74:	d10b      	bne.n	13e8e <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x1ce>
        const int prec = (int)va_arg(va, int);
   13e76:	9b24      	ldr	r3, [sp, #144]	; 0x90
   13e78:	1d1a      	adds	r2, r3, #4
   13e7a:	9224      	str	r2, [sp, #144]	; 0x90
   13e7c:	681b      	ldr	r3, [r3, #0]
   13e7e:	9315      	str	r3, [sp, #84]	; 0x54
        precision = prec > 0 ? (unsigned int)prec : 0U;
   13e80:	9b15      	ldr	r3, [sp, #84]	; 0x54
   13e82:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   13e86:	931d      	str	r3, [sp, #116]	; 0x74
        format++;
   13e88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13e8a:	3301      	adds	r3, #1
   13e8c:	930a      	str	r3, [sp, #40]	; 0x28
      }
    }

    // evaluate length field
    switch (*format) {
   13e8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13e90:	781b      	ldrb	r3, [r3, #0]
   13e92:	3b68      	subs	r3, #104	; 0x68
   13e94:	2b12      	cmp	r3, #18
   13e96:	d867      	bhi.n	13f68 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2a8>
   13e98:	a201      	add	r2, pc, #4	; (adr r2, 13ea0 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x1e0>)
   13e9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   13e9e:	bf00      	nop
   13ea0:	00013f13 	.word	0x00013f13
   13ea4:	00013f69 	.word	0x00013f69
   13ea8:	00013f49 	.word	0x00013f49
   13eac:	00013f69 	.word	0x00013f69
   13eb0:	00013eed 	.word	0x00013eed
   13eb4:	00013f69 	.word	0x00013f69
   13eb8:	00013f69 	.word	0x00013f69
   13ebc:	00013f69 	.word	0x00013f69
   13ec0:	00013f69 	.word	0x00013f69
   13ec4:	00013f69 	.word	0x00013f69
   13ec8:	00013f69 	.word	0x00013f69
   13ecc:	00013f69 	.word	0x00013f69
   13ed0:	00013f39 	.word	0x00013f39
   13ed4:	00013f69 	.word	0x00013f69
   13ed8:	00013f69 	.word	0x00013f69
   13edc:	00013f69 	.word	0x00013f69
   13ee0:	00013f69 	.word	0x00013f69
   13ee4:	00013f69 	.word	0x00013f69
   13ee8:	00013f59 	.word	0x00013f59
      case 'l' :
        flags |= FLAGS_LONG;
   13eec:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   13eee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   13ef2:	931f      	str	r3, [sp, #124]	; 0x7c
        format++;
   13ef4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13ef6:	3301      	adds	r3, #1
   13ef8:	930a      	str	r3, [sp, #40]	; 0x28
        if (*format == 'l') {
   13efa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13efc:	781b      	ldrb	r3, [r3, #0]
   13efe:	2b6c      	cmp	r3, #108	; 0x6c
   13f00:	d134      	bne.n	13f6c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2ac>
          flags |= FLAGS_LONG_LONG;
   13f02:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   13f04:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   13f08:	931f      	str	r3, [sp, #124]	; 0x7c
          format++;
   13f0a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13f0c:	3301      	adds	r3, #1
   13f0e:	930a      	str	r3, [sp, #40]	; 0x28
        }
        break;
   13f10:	e02c      	b.n	13f6c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2ac>
      case 'h' :
        flags |= FLAGS_SHORT;
   13f12:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   13f14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   13f18:	931f      	str	r3, [sp, #124]	; 0x7c
        format++;
   13f1a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13f1c:	3301      	adds	r3, #1
   13f1e:	930a      	str	r3, [sp, #40]	; 0x28
        if (*format == 'h') {
   13f20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13f22:	781b      	ldrb	r3, [r3, #0]
   13f24:	2b68      	cmp	r3, #104	; 0x68
   13f26:	d127      	bne.n	13f78 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2b8>
          flags |= FLAGS_CHAR;
   13f28:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   13f2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   13f2e:	931f      	str	r3, [sp, #124]	; 0x7c
          format++;
   13f30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13f32:	3301      	adds	r3, #1
   13f34:	930a      	str	r3, [sp, #40]	; 0x28
        }
        break;
   13f36:	e01f      	b.n	13f78 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2b8>
#if defined(PRINTF_SUPPORT_PTRDIFF_T)
      case 't' :
        flags |= (sizeof(ptrdiff_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
   13f38:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   13f3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   13f3e:	931f      	str	r3, [sp, #124]	; 0x7c
        format++;
   13f40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13f42:	3301      	adds	r3, #1
   13f44:	930a      	str	r3, [sp, #40]	; 0x28
        break;
   13f46:	e018      	b.n	13f7a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2ba>
#endif
      case 'j' :
        flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
   13f48:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   13f4a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   13f4e:	931f      	str	r3, [sp, #124]	; 0x7c
        format++;
   13f50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13f52:	3301      	adds	r3, #1
   13f54:	930a      	str	r3, [sp, #40]	; 0x28
        break;
   13f56:	e010      	b.n	13f7a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2ba>
      case 'z' :
        flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
   13f58:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   13f5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   13f5e:	931f      	str	r3, [sp, #124]	; 0x7c
        format++;
   13f60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13f62:	3301      	adds	r3, #1
   13f64:	930a      	str	r3, [sp, #40]	; 0x28
        break;
   13f66:	e008      	b.n	13f7a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2ba>
      default :
        break;
   13f68:	bf00      	nop
   13f6a:	e006      	b.n	13f7a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2ba>
        break;
   13f6c:	bf00      	nop
   13f6e:	e004      	b.n	13f7a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2ba>
   13f70:	00013cc1 	.word	0x00013cc1
   13f74:	000132f9 	.word	0x000132f9
        break;
   13f78:	bf00      	nop
    }

    // evaluate specifier
    switch (*format) {
   13f7a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13f7c:	781b      	ldrb	r3, [r3, #0]
   13f7e:	3b25      	subs	r3, #37	; 0x25
   13f80:	2b53      	cmp	r3, #83	; 0x53
   13f82:	f200 82ee 	bhi.w	14562 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8a2>
   13f86:	a201      	add	r2, pc, #4	; (adr r2, 13f8c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2cc>)
   13f88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   13f8c:	0001454b 	.word	0x0001454b
   13f90:	00014563 	.word	0x00014563
   13f94:	00014563 	.word	0x00014563
   13f98:	00014563 	.word	0x00014563
   13f9c:	00014563 	.word	0x00014563
   13fa0:	00014563 	.word	0x00014563
   13fa4:	00014563 	.word	0x00014563
   13fa8:	00014563 	.word	0x00014563
   13fac:	00014563 	.word	0x00014563
   13fb0:	00014563 	.word	0x00014563
   13fb4:	00014563 	.word	0x00014563
   13fb8:	00014563 	.word	0x00014563
   13fbc:	00014563 	.word	0x00014563
   13fc0:	00014563 	.word	0x00014563
   13fc4:	00014563 	.word	0x00014563
   13fc8:	00014563 	.word	0x00014563
   13fcc:	00014563 	.word	0x00014563
   13fd0:	00014563 	.word	0x00014563
   13fd4:	00014563 	.word	0x00014563
   13fd8:	00014563 	.word	0x00014563
   13fdc:	00014563 	.word	0x00014563
   13fe0:	00014563 	.word	0x00014563
   13fe4:	00014563 	.word	0x00014563
   13fe8:	00014563 	.word	0x00014563
   13fec:	00014563 	.word	0x00014563
   13ff0:	00014563 	.word	0x00014563
   13ff4:	00014563 	.word	0x00014563
   13ff8:	00014563 	.word	0x00014563
   13ffc:	00014563 	.word	0x00014563
   14000:	00014563 	.word	0x00014563
   14004:	00014563 	.word	0x00014563
   14008:	00014563 	.word	0x00014563
   1400c:	00014563 	.word	0x00014563
   14010:	00014369 	.word	0x00014369
   14014:	00014563 	.word	0x00014563
   14018:	00014563 	.word	0x00014563
   1401c:	00014563 	.word	0x00014563
   14020:	00014563 	.word	0x00014563
   14024:	00014563 	.word	0x00014563
   14028:	00014563 	.word	0x00014563
   1402c:	00014563 	.word	0x00014563
   14030:	00014563 	.word	0x00014563
   14034:	00014563 	.word	0x00014563
   14038:	00014563 	.word	0x00014563
   1403c:	00014563 	.word	0x00014563
   14040:	00014563 	.word	0x00014563
   14044:	00014563 	.word	0x00014563
   14048:	00014563 	.word	0x00014563
   1404c:	00014563 	.word	0x00014563
   14050:	00014563 	.word	0x00014563
   14054:	00014563 	.word	0x00014563
   14058:	000140dd 	.word	0x000140dd
   1405c:	00014563 	.word	0x00014563
   14060:	00014563 	.word	0x00014563
   14064:	00014563 	.word	0x00014563
   14068:	00014563 	.word	0x00014563
   1406c:	00014563 	.word	0x00014563
   14070:	00014563 	.word	0x00014563
   14074:	00014563 	.word	0x00014563
   14078:	00014563 	.word	0x00014563
   1407c:	00014563 	.word	0x00014563
   14080:	000140dd 	.word	0x000140dd
   14084:	000143a5 	.word	0x000143a5
   14088:	000140dd 	.word	0x000140dd
   1408c:	00014563 	.word	0x00014563
   14090:	00014369 	.word	0x00014369
   14094:	00014563 	.word	0x00014563
   14098:	00014563 	.word	0x00014563
   1409c:	000140dd 	.word	0x000140dd
   140a0:	00014563 	.word	0x00014563
   140a4:	00014563 	.word	0x00014563
   140a8:	00014563 	.word	0x00014563
   140ac:	00014563 	.word	0x00014563
   140b0:	00014563 	.word	0x00014563
   140b4:	000140dd 	.word	0x000140dd
   140b8:	00014503 	.word	0x00014503
   140bc:	00014563 	.word	0x00014563
   140c0:	00014563 	.word	0x00014563
   140c4:	0001442d 	.word	0x0001442d
   140c8:	00014563 	.word	0x00014563
   140cc:	000140dd 	.word	0x000140dd
   140d0:	00014563 	.word	0x00014563
   140d4:	00014563 	.word	0x00014563
   140d8:	000140dd 	.word	0x000140dd
      case 'X' :
      case 'o' :
      case 'b' : {
        // set the base
        unsigned int base;
        if (*format == 'x' || *format == 'X') {
   140dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   140de:	781b      	ldrb	r3, [r3, #0]
   140e0:	2b78      	cmp	r3, #120	; 0x78
   140e2:	d003      	beq.n	140ec <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x42c>
   140e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   140e6:	781b      	ldrb	r3, [r3, #0]
   140e8:	2b58      	cmp	r3, #88	; 0x58
   140ea:	d102      	bne.n	140f2 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x432>
          base = 16U;
   140ec:	2310      	movs	r3, #16
   140ee:	931a      	str	r3, [sp, #104]	; 0x68
   140f0:	e013      	b.n	1411a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x45a>
        }
        else if (*format == 'o') {
   140f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   140f4:	781b      	ldrb	r3, [r3, #0]
   140f6:	2b6f      	cmp	r3, #111	; 0x6f
   140f8:	d102      	bne.n	14100 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x440>
          base =  8U;
   140fa:	2308      	movs	r3, #8
   140fc:	931a      	str	r3, [sp, #104]	; 0x68
   140fe:	e00c      	b.n	1411a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x45a>
        }
        else if (*format == 'b') {
   14100:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   14102:	781b      	ldrb	r3, [r3, #0]
   14104:	2b62      	cmp	r3, #98	; 0x62
   14106:	d102      	bne.n	1410e <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x44e>
          base =  2U;
   14108:	2302      	movs	r3, #2
   1410a:	931a      	str	r3, [sp, #104]	; 0x68
   1410c:	e005      	b.n	1411a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x45a>
        }
        else {
          base = 10U;
   1410e:	230a      	movs	r3, #10
   14110:	931a      	str	r3, [sp, #104]	; 0x68
          flags &= ~FLAGS_HASH;   // no hash for dec format
   14112:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   14114:	f023 0310 	bic.w	r3, r3, #16
   14118:	931f      	str	r3, [sp, #124]	; 0x7c
        }
        // uppercase
        if (*format == 'X') {
   1411a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1411c:	781b      	ldrb	r3, [r3, #0]
   1411e:	2b58      	cmp	r3, #88	; 0x58
   14120:	d103      	bne.n	1412a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x46a>
          flags |= FLAGS_UPPERCASE;
   14122:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   14124:	f043 0320 	orr.w	r3, r3, #32
   14128:	931f      	str	r3, [sp, #124]	; 0x7c
        }

        // no plus or space flag for u, x, X, o, b
        if ((*format != 'i') && (*format != 'd')) {
   1412a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1412c:	781b      	ldrb	r3, [r3, #0]
   1412e:	2b69      	cmp	r3, #105	; 0x69
   14130:	d007      	beq.n	14142 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x482>
   14132:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   14134:	781b      	ldrb	r3, [r3, #0]
   14136:	2b64      	cmp	r3, #100	; 0x64
   14138:	d003      	beq.n	14142 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x482>
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
   1413a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   1413c:	f023 030c 	bic.w	r3, r3, #12
   14140:	931f      	str	r3, [sp, #124]	; 0x7c
        }

        // ignore '0' flag when precision is given
        if (flags & FLAGS_PRECISION) {
   14142:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   14144:	f403 6380 	and.w	r3, r3, #1024	; 0x400
   14148:	2b00      	cmp	r3, #0
   1414a:	d003      	beq.n	14154 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x494>
          flags &= ~FLAGS_ZEROPAD;
   1414c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   1414e:	f023 0301 	bic.w	r3, r3, #1
   14152:	931f      	str	r3, [sp, #124]	; 0x7c
        }

        // convert the integer
        if ((*format == 'i') || (*format == 'd')) {
   14154:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   14156:	781b      	ldrb	r3, [r3, #0]
   14158:	2b69      	cmp	r3, #105	; 0x69
   1415a:	d004      	beq.n	14166 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x4a6>
   1415c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1415e:	781b      	ldrb	r3, [r3, #0]
   14160:	2b64      	cmp	r3, #100	; 0x64
   14162:	f040 808d 	bne.w	14280 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x5c0>
          // signed
          if (flags & FLAGS_LONG_LONG) {
   14166:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   14168:	f403 7300 	and.w	r3, r3, #512	; 0x200
   1416c:	2b00      	cmp	r3, #0
   1416e:	d02e      	beq.n	141ce <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x50e>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            const long long value = va_arg(va, long long);
   14170:	9b24      	ldr	r3, [sp, #144]	; 0x90
   14172:	3307      	adds	r3, #7
   14174:	f023 0307 	bic.w	r3, r3, #7
   14178:	f103 0208 	add.w	r2, r3, #8
   1417c:	9224      	str	r2, [sp, #144]	; 0x90
   1417e:	e9d3 3400 	ldrd	r3, r4, [r3]
   14182:	e9cd 340e 	strd	r3, r4, [sp, #56]	; 0x38
            idx = _ntoa_long_long(out, buffer, idx, maxlen, (unsigned long long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
   14186:	e9dd 340e 	ldrd	r3, r4, [sp, #56]	; 0x38
   1418a:	2b00      	cmp	r3, #0
   1418c:	f174 0200 	sbcs.w	r2, r4, #0
   14190:	da02      	bge.n	14198 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x4d8>
   14192:	425b      	negs	r3, r3
   14194:	eb64 0444 	sbc.w	r4, r4, r4, lsl #1
   14198:	4619      	mov	r1, r3
   1419a:	4622      	mov	r2, r4
   1419c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1419e:	0fdb      	lsrs	r3, r3, #31
   141a0:	b2d8      	uxtb	r0, r3
   141a2:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   141a4:	f04f 0400 	mov.w	r4, #0
   141a8:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
   141aa:	9508      	str	r5, [sp, #32]
   141ac:	9d1e      	ldr	r5, [sp, #120]	; 0x78
   141ae:	9507      	str	r5, [sp, #28]
   141b0:	9d1d      	ldr	r5, [sp, #116]	; 0x74
   141b2:	9506      	str	r5, [sp, #24]
   141b4:	e9cd 3404 	strd	r3, r4, [sp, #16]
   141b8:	9002      	str	r0, [sp, #8]
   141ba:	e9cd 1200 	strd	r1, r2, [sp]
   141be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   141c0:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   141c2:	990c      	ldr	r1, [sp, #48]	; 0x30
   141c4:	980d      	ldr	r0, [sp, #52]	; 0x34
   141c6:	f7ff fae5 	bl	13794 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)>
   141ca:	901b      	str	r0, [sp, #108]	; 0x6c
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
          }
          else {
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
          }
   141cc:	e0c8      	b.n	14360 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x6a0>
          else if (flags & FLAGS_LONG) {
   141ce:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   141d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
   141d4:	2b00      	cmp	r3, #0
   141d6:	d01e      	beq.n	14216 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x556>
            const long value = va_arg(va, long);
   141d8:	9b24      	ldr	r3, [sp, #144]	; 0x90
   141da:	1d1a      	adds	r2, r3, #4
   141dc:	9224      	str	r2, [sp, #144]	; 0x90
   141de:	681b      	ldr	r3, [r3, #0]
   141e0:	9311      	str	r3, [sp, #68]	; 0x44
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
   141e2:	9b11      	ldr	r3, [sp, #68]	; 0x44
   141e4:	2b00      	cmp	r3, #0
   141e6:	bfb8      	it	lt
   141e8:	425b      	neglt	r3, r3
   141ea:	4619      	mov	r1, r3
   141ec:	9b11      	ldr	r3, [sp, #68]	; 0x44
   141ee:	0fdb      	lsrs	r3, r3, #31
   141f0:	b2db      	uxtb	r3, r3
   141f2:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   141f4:	9205      	str	r2, [sp, #20]
   141f6:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   141f8:	9204      	str	r2, [sp, #16]
   141fa:	9a1d      	ldr	r2, [sp, #116]	; 0x74
   141fc:	9203      	str	r2, [sp, #12]
   141fe:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   14200:	9202      	str	r2, [sp, #8]
   14202:	9301      	str	r3, [sp, #4]
   14204:	9100      	str	r1, [sp, #0]
   14206:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   14208:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   1420a:	990c      	ldr	r1, [sp, #48]	; 0x30
   1420c:	980d      	ldr	r0, [sp, #52]	; 0x34
   1420e:	f7ff fa4f 	bl	136b0 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)>
   14212:	901b      	str	r0, [sp, #108]	; 0x6c
          }
   14214:	e0a4      	b.n	14360 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x6a0>
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
   14216:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   14218:	f003 0340 	and.w	r3, r3, #64	; 0x40
   1421c:	2b00      	cmp	r3, #0
   1421e:	d005      	beq.n	1422c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x56c>
   14220:	9b24      	ldr	r3, [sp, #144]	; 0x90
   14222:	1d1a      	adds	r2, r3, #4
   14224:	9224      	str	r2, [sp, #144]	; 0x90
   14226:	681b      	ldr	r3, [r3, #0]
   14228:	b2db      	uxtb	r3, r3
   1422a:	e00e      	b.n	1424a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x58a>
   1422c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   1422e:	f003 0380 	and.w	r3, r3, #128	; 0x80
   14232:	2b00      	cmp	r3, #0
   14234:	d005      	beq.n	14242 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x582>
   14236:	9b24      	ldr	r3, [sp, #144]	; 0x90
   14238:	1d1a      	adds	r2, r3, #4
   1423a:	9224      	str	r2, [sp, #144]	; 0x90
   1423c:	681b      	ldr	r3, [r3, #0]
   1423e:	b21b      	sxth	r3, r3
   14240:	e003      	b.n	1424a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x58a>
   14242:	9b24      	ldr	r3, [sp, #144]	; 0x90
   14244:	1d1a      	adds	r2, r3, #4
   14246:	9224      	str	r2, [sp, #144]	; 0x90
   14248:	681b      	ldr	r3, [r3, #0]
   1424a:	9312      	str	r3, [sp, #72]	; 0x48
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
   1424c:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1424e:	2b00      	cmp	r3, #0
   14250:	bfb8      	it	lt
   14252:	425b      	neglt	r3, r3
   14254:	4619      	mov	r1, r3
   14256:	9b12      	ldr	r3, [sp, #72]	; 0x48
   14258:	0fdb      	lsrs	r3, r3, #31
   1425a:	b2db      	uxtb	r3, r3
   1425c:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   1425e:	9205      	str	r2, [sp, #20]
   14260:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   14262:	9204      	str	r2, [sp, #16]
   14264:	9a1d      	ldr	r2, [sp, #116]	; 0x74
   14266:	9203      	str	r2, [sp, #12]
   14268:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   1426a:	9202      	str	r2, [sp, #8]
   1426c:	9301      	str	r3, [sp, #4]
   1426e:	9100      	str	r1, [sp, #0]
   14270:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   14272:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   14274:	990c      	ldr	r1, [sp, #48]	; 0x30
   14276:	980d      	ldr	r0, [sp, #52]	; 0x34
   14278:	f7ff fa1a 	bl	136b0 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)>
   1427c:	901b      	str	r0, [sp, #108]	; 0x6c
          }
   1427e:	e06f      	b.n	14360 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x6a0>
        }
        else {
          // unsigned
          if (flags & FLAGS_LONG_LONG) {
   14280:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   14282:	f403 7300 	and.w	r3, r3, #512	; 0x200
   14286:	2b00      	cmp	r3, #0
   14288:	d020      	beq.n	142cc <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x60c>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base, precision, width, flags);
   1428a:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1428c:	3307      	adds	r3, #7
   1428e:	f023 0307 	bic.w	r3, r3, #7
   14292:	f103 0208 	add.w	r2, r3, #8
   14296:	9224      	str	r2, [sp, #144]	; 0x90
   14298:	e9d3 3400 	ldrd	r3, r4, [r3]
   1429c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   1429e:	4611      	mov	r1, r2
   142a0:	f04f 0200 	mov.w	r2, #0
   142a4:	981f      	ldr	r0, [sp, #124]	; 0x7c
   142a6:	9008      	str	r0, [sp, #32]
   142a8:	981e      	ldr	r0, [sp, #120]	; 0x78
   142aa:	9007      	str	r0, [sp, #28]
   142ac:	981d      	ldr	r0, [sp, #116]	; 0x74
   142ae:	9006      	str	r0, [sp, #24]
   142b0:	e9cd 1204 	strd	r1, r2, [sp, #16]
   142b4:	2200      	movs	r2, #0
   142b6:	9202      	str	r2, [sp, #8]
   142b8:	e9cd 3400 	strd	r3, r4, [sp]
   142bc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   142be:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   142c0:	990c      	ldr	r1, [sp, #48]	; 0x30
   142c2:	980d      	ldr	r0, [sp, #52]	; 0x34
   142c4:	f7ff fa66 	bl	13794 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)>
   142c8:	901b      	str	r0, [sp, #108]	; 0x6c
   142ca:	e049      	b.n	14360 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x6a0>
#endif
          }
          else if (flags & FLAGS_LONG) {
   142cc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   142ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
   142d2:	2b00      	cmp	r3, #0
   142d4:	d016      	beq.n	14304 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x644>
            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
   142d6:	9b24      	ldr	r3, [sp, #144]	; 0x90
   142d8:	1d1a      	adds	r2, r3, #4
   142da:	9224      	str	r2, [sp, #144]	; 0x90
   142dc:	681b      	ldr	r3, [r3, #0]
   142de:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   142e0:	9205      	str	r2, [sp, #20]
   142e2:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   142e4:	9204      	str	r2, [sp, #16]
   142e6:	9a1d      	ldr	r2, [sp, #116]	; 0x74
   142e8:	9203      	str	r2, [sp, #12]
   142ea:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   142ec:	9202      	str	r2, [sp, #8]
   142ee:	2200      	movs	r2, #0
   142f0:	9201      	str	r2, [sp, #4]
   142f2:	9300      	str	r3, [sp, #0]
   142f4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   142f6:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   142f8:	990c      	ldr	r1, [sp, #48]	; 0x30
   142fa:	980d      	ldr	r0, [sp, #52]	; 0x34
   142fc:	f7ff f9d8 	bl	136b0 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)>
   14300:	901b      	str	r0, [sp, #108]	; 0x6c
   14302:	e02d      	b.n	14360 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x6a0>
          }
          else {
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
   14304:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   14306:	f003 0340 	and.w	r3, r3, #64	; 0x40
   1430a:	2b00      	cmp	r3, #0
   1430c:	d005      	beq.n	1431a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x65a>
   1430e:	9b24      	ldr	r3, [sp, #144]	; 0x90
   14310:	1d1a      	adds	r2, r3, #4
   14312:	9224      	str	r2, [sp, #144]	; 0x90
   14314:	681b      	ldr	r3, [r3, #0]
   14316:	b2db      	uxtb	r3, r3
   14318:	e00e      	b.n	14338 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x678>
   1431a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   1431c:	f003 0380 	and.w	r3, r3, #128	; 0x80
   14320:	2b00      	cmp	r3, #0
   14322:	d005      	beq.n	14330 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x670>
   14324:	9b24      	ldr	r3, [sp, #144]	; 0x90
   14326:	1d1a      	adds	r2, r3, #4
   14328:	9224      	str	r2, [sp, #144]	; 0x90
   1432a:	681b      	ldr	r3, [r3, #0]
   1432c:	b29b      	uxth	r3, r3
   1432e:	e003      	b.n	14338 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x678>
   14330:	9b24      	ldr	r3, [sp, #144]	; 0x90
   14332:	1d1a      	adds	r2, r3, #4
   14334:	9224      	str	r2, [sp, #144]	; 0x90
   14336:	681b      	ldr	r3, [r3, #0]
   14338:	9313      	str	r3, [sp, #76]	; 0x4c
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
   1433a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   1433c:	9305      	str	r3, [sp, #20]
   1433e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   14340:	9304      	str	r3, [sp, #16]
   14342:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   14344:	9303      	str	r3, [sp, #12]
   14346:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   14348:	9302      	str	r3, [sp, #8]
   1434a:	2300      	movs	r3, #0
   1434c:	9301      	str	r3, [sp, #4]
   1434e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   14350:	9300      	str	r3, [sp, #0]
   14352:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   14354:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   14356:	990c      	ldr	r1, [sp, #48]	; 0x30
   14358:	980d      	ldr	r0, [sp, #52]	; 0x34
   1435a:	f7ff f9a9 	bl	136b0 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)>
   1435e:	901b      	str	r0, [sp, #108]	; 0x6c
          }
        }
        format++;
   14360:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   14362:	3301      	adds	r3, #1
   14364:	930a      	str	r3, [sp, #40]	; 0x28
        break;
   14366:	e109      	b.n	1457c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8bc>
      }
#if defined(PRINTF_SUPPORT_FLOAT)
      case 'f' :
      case 'F' :
        idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
   14368:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1436a:	3307      	adds	r3, #7
   1436c:	f023 0307 	bic.w	r3, r3, #7
   14370:	f103 0208 	add.w	r2, r3, #8
   14374:	9224      	str	r2, [sp, #144]	; 0x90
   14376:	ed93 7b00 	vldr	d7, [r3]
   1437a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   1437c:	9302      	str	r3, [sp, #8]
   1437e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   14380:	9301      	str	r3, [sp, #4]
   14382:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   14384:	9300      	str	r3, [sp, #0]
   14386:	eeb0 0a47 	vmov.f32	s0, s14
   1438a:	eef0 0a67 	vmov.f32	s1, s15
   1438e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   14390:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   14392:	990c      	ldr	r1, [sp, #48]	; 0x30
   14394:	980d      	ldr	r0, [sp, #52]	; 0x34
   14396:	f7ff fa77 	bl	13888 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)>
   1439a:	901b      	str	r0, [sp, #108]	; 0x6c
        format++;
   1439c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1439e:	3301      	adds	r3, #1
   143a0:	930a      	str	r3, [sp, #40]	; 0x28
        break;
   143a2:	e0eb      	b.n	1457c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8bc>
#endif  // PRINTF_SUPPORT_FLOAT
      case 'c' : {
        unsigned int l = 1U;
   143a4:	2301      	movs	r3, #1
   143a6:	9319      	str	r3, [sp, #100]	; 0x64
        // pre padding
        if (!(flags & FLAGS_LEFT)) {
   143a8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   143aa:	f003 0302 	and.w	r3, r3, #2
   143ae:	2b00      	cmp	r3, #0
   143b0:	d113      	bne.n	143da <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x71a>
          while (l++ < width) {
   143b2:	9b19      	ldr	r3, [sp, #100]	; 0x64
   143b4:	1c5a      	adds	r2, r3, #1
   143b6:	9219      	str	r2, [sp, #100]	; 0x64
   143b8:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   143ba:	429a      	cmp	r2, r3
   143bc:	bf8c      	ite	hi
   143be:	2301      	movhi	r3, #1
   143c0:	2300      	movls	r3, #0
   143c2:	b2db      	uxtb	r3, r3
   143c4:	2b00      	cmp	r3, #0
   143c6:	d008      	beq.n	143da <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x71a>
            out(' ', buffer, idx++, maxlen);
   143c8:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   143ca:	1c53      	adds	r3, r2, #1
   143cc:	931b      	str	r3, [sp, #108]	; 0x6c
   143ce:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   143d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   143d2:	990c      	ldr	r1, [sp, #48]	; 0x30
   143d4:	2020      	movs	r0, #32
   143d6:	47a0      	blx	r4
          while (l++ < width) {
   143d8:	e7eb      	b.n	143b2 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x6f2>
          }
        }
        // char output
        out((char)va_arg(va, int), buffer, idx++, maxlen);
   143da:	9b24      	ldr	r3, [sp, #144]	; 0x90
   143dc:	1d1a      	adds	r2, r3, #4
   143de:	9224      	str	r2, [sp, #144]	; 0x90
   143e0:	681b      	ldr	r3, [r3, #0]
   143e2:	b2d8      	uxtb	r0, r3
   143e4:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   143e6:	1c53      	adds	r3, r2, #1
   143e8:	931b      	str	r3, [sp, #108]	; 0x6c
   143ea:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   143ec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   143ee:	990c      	ldr	r1, [sp, #48]	; 0x30
   143f0:	47a0      	blx	r4
        // post padding
        if (flags & FLAGS_LEFT) {
   143f2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   143f4:	f003 0302 	and.w	r3, r3, #2
   143f8:	2b00      	cmp	r3, #0
   143fa:	d013      	beq.n	14424 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x764>
          while (l++ < width) {
   143fc:	9b19      	ldr	r3, [sp, #100]	; 0x64
   143fe:	1c5a      	adds	r2, r3, #1
   14400:	9219      	str	r2, [sp, #100]	; 0x64
   14402:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   14404:	429a      	cmp	r2, r3
   14406:	bf8c      	ite	hi
   14408:	2301      	movhi	r3, #1
   1440a:	2300      	movls	r3, #0
   1440c:	b2db      	uxtb	r3, r3
   1440e:	2b00      	cmp	r3, #0
   14410:	d008      	beq.n	14424 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x764>
            out(' ', buffer, idx++, maxlen);
   14412:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   14414:	1c53      	adds	r3, r2, #1
   14416:	931b      	str	r3, [sp, #108]	; 0x6c
   14418:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   1441a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1441c:	990c      	ldr	r1, [sp, #48]	; 0x30
   1441e:	2020      	movs	r0, #32
   14420:	47a0      	blx	r4
          while (l++ < width) {
   14422:	e7eb      	b.n	143fc <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x73c>
          }
        }
        format++;
   14424:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   14426:	3301      	adds	r3, #1
   14428:	930a      	str	r3, [sp, #40]	; 0x28
        break;
   1442a:	e0a7      	b.n	1457c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8bc>
      }

      case 's' : {
        char* p = va_arg(va, char*);
   1442c:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1442e:	1d1a      	adds	r2, r3, #4
   14430:	9224      	str	r2, [sp, #144]	; 0x90
   14432:	681b      	ldr	r3, [r3, #0]
   14434:	9318      	str	r3, [sp, #96]	; 0x60
        unsigned int l = _strlen(p);
   14436:	9818      	ldr	r0, [sp, #96]	; 0x60
   14438:	f7fe ff98 	bl	1336c <_strlen(char const*)>
   1443c:	9017      	str	r0, [sp, #92]	; 0x5c
        // pre padding
        if (flags & FLAGS_PRECISION) {
   1443e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   14440:	f403 6380 	and.w	r3, r3, #1024	; 0x400
   14444:	2b00      	cmp	r3, #0
   14446:	d007      	beq.n	14458 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x798>
          l = (l < precision ? l : precision);
   14448:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   1444a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   1444c:	429a      	cmp	r2, r3
   1444e:	d201      	bcs.n	14454 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x794>
   14450:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   14452:	e000      	b.n	14456 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x796>
   14454:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   14456:	9317      	str	r3, [sp, #92]	; 0x5c
        }
        if (!(flags & FLAGS_LEFT)) {
   14458:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   1445a:	f003 0302 	and.w	r3, r3, #2
   1445e:	2b00      	cmp	r3, #0
   14460:	d113      	bne.n	1448a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7ca>
          while (l++ < width) {
   14462:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   14464:	1c5a      	adds	r2, r3, #1
   14466:	9217      	str	r2, [sp, #92]	; 0x5c
   14468:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   1446a:	429a      	cmp	r2, r3
   1446c:	bf8c      	ite	hi
   1446e:	2301      	movhi	r3, #1
   14470:	2300      	movls	r3, #0
   14472:	b2db      	uxtb	r3, r3
   14474:	2b00      	cmp	r3, #0
   14476:	d008      	beq.n	1448a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7ca>
            out(' ', buffer, idx++, maxlen);
   14478:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   1447a:	1c53      	adds	r3, r2, #1
   1447c:	931b      	str	r3, [sp, #108]	; 0x6c
   1447e:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   14480:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   14482:	990c      	ldr	r1, [sp, #48]	; 0x30
   14484:	2020      	movs	r0, #32
   14486:	47a0      	blx	r4
          while (l++ < width) {
   14488:	e7eb      	b.n	14462 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7a2>
          }
        }
        // string output
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
   1448a:	9b18      	ldr	r3, [sp, #96]	; 0x60
   1448c:	781b      	ldrb	r3, [r3, #0]
   1448e:	2b00      	cmp	r3, #0
   14490:	d00b      	beq.n	144aa <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7ea>
   14492:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   14494:	f403 6380 	and.w	r3, r3, #1024	; 0x400
   14498:	2b00      	cmp	r3, #0
   1449a:	d004      	beq.n	144a6 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7e6>
   1449c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   1449e:	1e5a      	subs	r2, r3, #1
   144a0:	921d      	str	r2, [sp, #116]	; 0x74
   144a2:	2b00      	cmp	r3, #0
   144a4:	d001      	beq.n	144aa <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7ea>
   144a6:	2301      	movs	r3, #1
   144a8:	e000      	b.n	144ac <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7ec>
   144aa:	2300      	movs	r3, #0
   144ac:	2b00      	cmp	r3, #0
   144ae:	d00b      	beq.n	144c8 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x808>
          out(*(p++), buffer, idx++, maxlen);
   144b0:	9b18      	ldr	r3, [sp, #96]	; 0x60
   144b2:	1c5a      	adds	r2, r3, #1
   144b4:	9218      	str	r2, [sp, #96]	; 0x60
   144b6:	7818      	ldrb	r0, [r3, #0]
   144b8:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   144ba:	1c53      	adds	r3, r2, #1
   144bc:	931b      	str	r3, [sp, #108]	; 0x6c
   144be:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   144c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   144c2:	990c      	ldr	r1, [sp, #48]	; 0x30
   144c4:	47a0      	blx	r4
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
   144c6:	e7e0      	b.n	1448a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7ca>
        }
        // post padding
        if (flags & FLAGS_LEFT) {
   144c8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   144ca:	f003 0302 	and.w	r3, r3, #2
   144ce:	2b00      	cmp	r3, #0
   144d0:	d013      	beq.n	144fa <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x83a>
          while (l++ < width) {
   144d2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   144d4:	1c5a      	adds	r2, r3, #1
   144d6:	9217      	str	r2, [sp, #92]	; 0x5c
   144d8:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   144da:	429a      	cmp	r2, r3
   144dc:	bf8c      	ite	hi
   144de:	2301      	movhi	r3, #1
   144e0:	2300      	movls	r3, #0
   144e2:	b2db      	uxtb	r3, r3
   144e4:	2b00      	cmp	r3, #0
   144e6:	d008      	beq.n	144fa <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x83a>
            out(' ', buffer, idx++, maxlen);
   144e8:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   144ea:	1c53      	adds	r3, r2, #1
   144ec:	931b      	str	r3, [sp, #108]	; 0x6c
   144ee:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   144f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   144f2:	990c      	ldr	r1, [sp, #48]	; 0x30
   144f4:	2020      	movs	r0, #32
   144f6:	47a0      	blx	r4
          while (l++ < width) {
   144f8:	e7eb      	b.n	144d2 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x812>
          }
        }
        format++;
   144fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   144fc:	3301      	adds	r3, #1
   144fe:	930a      	str	r3, [sp, #40]	; 0x28
        break;
   14500:	e03c      	b.n	1457c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8bc>
      }

      case 'p' : {
        width = sizeof(void*) * 2U;
   14502:	2308      	movs	r3, #8
   14504:	931e      	str	r3, [sp, #120]	; 0x78
        flags |= FLAGS_ZEROPAD | FLAGS_UPPERCASE;
   14506:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   14508:	f043 0321 	orr.w	r3, r3, #33	; 0x21
   1450c:	931f      	str	r3, [sp, #124]	; 0x7c
#if defined(PRINTF_SUPPORT_LONG_LONG)
        const bool is_ll = sizeof(uintptr_t) == sizeof(long long);
   1450e:	2300      	movs	r3, #0
   14510:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
        if (is_ll) {
          idx = _ntoa_long_long(out, buffer, idx, maxlen, (uintptr_t)va_arg(va, void*), false, 16U, precision, width, flags);
        }
        else {
#endif
          idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void*)), false, 16U, precision, width, flags);
   14514:	9b24      	ldr	r3, [sp, #144]	; 0x90
   14516:	1d1a      	adds	r2, r3, #4
   14518:	9224      	str	r2, [sp, #144]	; 0x90
   1451a:	681b      	ldr	r3, [r3, #0]
   1451c:	461a      	mov	r2, r3
   1451e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   14520:	9305      	str	r3, [sp, #20]
   14522:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   14524:	9304      	str	r3, [sp, #16]
   14526:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   14528:	9303      	str	r3, [sp, #12]
   1452a:	2310      	movs	r3, #16
   1452c:	9302      	str	r3, [sp, #8]
   1452e:	2300      	movs	r3, #0
   14530:	9301      	str	r3, [sp, #4]
   14532:	9200      	str	r2, [sp, #0]
   14534:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   14536:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   14538:	990c      	ldr	r1, [sp, #48]	; 0x30
   1453a:	980d      	ldr	r0, [sp, #52]	; 0x34
   1453c:	f7ff f8b8 	bl	136b0 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)>
   14540:	901b      	str	r0, [sp, #108]	; 0x6c
#if defined(PRINTF_SUPPORT_LONG_LONG)
        }
#endif
        format++;
   14542:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   14544:	3301      	adds	r3, #1
   14546:	930a      	str	r3, [sp, #40]	; 0x28
        break;
   14548:	e018      	b.n	1457c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8bc>
      }

      case '%' :
        out('%', buffer, idx++, maxlen);
   1454a:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   1454c:	1c53      	adds	r3, r2, #1
   1454e:	931b      	str	r3, [sp, #108]	; 0x6c
   14550:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   14552:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   14554:	990c      	ldr	r1, [sp, #48]	; 0x30
   14556:	2025      	movs	r0, #37	; 0x25
   14558:	47a0      	blx	r4
        format++;
   1455a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1455c:	3301      	adds	r3, #1
   1455e:	930a      	str	r3, [sp, #40]	; 0x28
        break;
   14560:	e00c      	b.n	1457c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8bc>

      default :
        out(*format, buffer, idx++, maxlen);
   14562:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   14564:	7818      	ldrb	r0, [r3, #0]
   14566:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   14568:	1c53      	adds	r3, r2, #1
   1456a:	931b      	str	r3, [sp, #108]	; 0x6c
   1456c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   1456e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   14570:	990c      	ldr	r1, [sp, #48]	; 0x30
   14572:	47a0      	blx	r4
        format++;
   14574:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   14576:	3301      	adds	r3, #1
   14578:	930a      	str	r3, [sp, #40]	; 0x28
        break;
   1457a:	bf00      	nop
  while (*format)
   1457c:	f7ff bbb3 	b.w	13ce6 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x26>
    }
  }

  // termination
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
   14580:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   14582:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   14584:	429a      	cmp	r2, r3
   14586:	d302      	bcc.n	1458e <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8ce>
   14588:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1458a:	1e5a      	subs	r2, r3, #1
   1458c:	e000      	b.n	14590 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8d0>
   1458e:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   14590:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   14592:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   14594:	990c      	ldr	r1, [sp, #48]	; 0x30
   14596:	2000      	movs	r0, #0
   14598:	47a0      	blx	r4

  // return written chars without terminating \0
  return (int)idx;
   1459a:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
   1459c:	4633      	mov	r3, r6
   1459e:	4619      	mov	r1, r3
   145a0:	4803      	ldr	r0, [pc, #12]	; (145b0 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8f0>)
   145a2:	f7fe fdbd 	bl	13120 <__cyg_profile_func_exit>
   145a6:	4623      	mov	r3, r4
}
   145a8:	4618      	mov	r0, r3
   145aa:	b020      	add	sp, #128	; 0x80
   145ac:	bd70      	pop	{r4, r5, r6, pc}
   145ae:	bf00      	nop
   145b0:	00013cc1 	.word	0x00013cc1

000145b4 <printf>:

///////////////////////////////////////////////////////////////////////////////


int printf(const char* format, ...)
{
   145b4:	b40f      	push	{r0, r1, r2, r3}
   145b6:	b530      	push	{r4, r5, lr}
   145b8:	b087      	sub	sp, #28
   145ba:	4675      	mov	r5, lr
   145bc:	462b      	mov	r3, r5
   145be:	4619      	mov	r1, r3
   145c0:	480d      	ldr	r0, [pc, #52]	; (145f8 <printf+0x44>)
   145c2:	f7fe fd99 	bl	130f8 <__cyg_profile_func_enter>
  va_list va;
  va_start(va, format);
   145c6:	ab0b      	add	r3, sp, #44	; 0x2c
   145c8:	9304      	str	r3, [sp, #16]
  char buffer[1];
  const int ret = _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
   145ca:	a903      	add	r1, sp, #12
   145cc:	9b04      	ldr	r3, [sp, #16]
   145ce:	9300      	str	r3, [sp, #0]
   145d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   145d2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   145d6:	4809      	ldr	r0, [pc, #36]	; (145fc <printf+0x48>)
   145d8:	f7ff fb72 	bl	13cc0 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)>
   145dc:	9005      	str	r0, [sp, #20]
  va_end(va);
  return ret;
   145de:	9c05      	ldr	r4, [sp, #20]
   145e0:	462b      	mov	r3, r5
   145e2:	4619      	mov	r1, r3
   145e4:	4804      	ldr	r0, [pc, #16]	; (145f8 <printf+0x44>)
   145e6:	f7fe fd9b 	bl	13120 <__cyg_profile_func_exit>
   145ea:	4623      	mov	r3, r4
}
   145ec:	4618      	mov	r0, r3
   145ee:	b007      	add	sp, #28
   145f0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   145f4:	b004      	add	sp, #16
   145f6:	4770      	bx	lr
   145f8:	000145b5 	.word	0x000145b5
   145fc:	00013329 	.word	0x00013329

00014600 <PinInterface::PinInterface()>:
class PinInterface
   14600:	b530      	push	{r4, r5, lr}
   14602:	b083      	sub	sp, #12
   14604:	4675      	mov	r5, lr
   14606:	9001      	str	r0, [sp, #4]
   14608:	462b      	mov	r3, r5
   1460a:	4619      	mov	r1, r3
   1460c:	4807      	ldr	r0, [pc, #28]	; (1462c <PinInterface::PinInterface()+0x2c>)
   1460e:	f7fe fd73 	bl	130f8 <__cyg_profile_func_enter>
   14612:	4a07      	ldr	r2, [pc, #28]	; (14630 <PinInterface::PinInterface()+0x30>)
   14614:	9b01      	ldr	r3, [sp, #4]
   14616:	601a      	str	r2, [r3, #0]
   14618:	9c01      	ldr	r4, [sp, #4]
   1461a:	462b      	mov	r3, r5
   1461c:	4619      	mov	r1, r3
   1461e:	4803      	ldr	r0, [pc, #12]	; (1462c <PinInterface::PinInterface()+0x2c>)
   14620:	f7fe fd7e 	bl	13120 <__cyg_profile_func_exit>
   14624:	4623      	mov	r3, r4
   14626:	4618      	mov	r0, r3
   14628:	b003      	add	sp, #12
   1462a:	bd30      	pop	{r4, r5, pc}
   1462c:	00014601 	.word	0x00014601
   14630:	00019428 	.word	0x00019428

00014634 <Pin::Pin(unsigned char, unsigned char)>:
  constexpr Pin(uint8_t port_number, uint8_t pin_number)
   14634:	b530      	push	{r4, r5, lr}
   14636:	b083      	sub	sp, #12
   14638:	4675      	mov	r5, lr
   1463a:	9001      	str	r0, [sp, #4]
   1463c:	460b      	mov	r3, r1
   1463e:	f88d 3003 	strb.w	r3, [sp, #3]
   14642:	4613      	mov	r3, r2
   14644:	f88d 3002 	strb.w	r3, [sp, #2]
   14648:	462b      	mov	r3, r5
   1464a:	4619      	mov	r1, r3
   1464c:	480d      	ldr	r0, [pc, #52]	; (14684 <Pin::Pin(unsigned char, unsigned char)+0x50>)
   1464e:	f7fe fd53 	bl	130f8 <__cyg_profile_func_enter>
      : port_(port_number), pin_(pin_number)
   14652:	9b01      	ldr	r3, [sp, #4]
   14654:	4618      	mov	r0, r3
   14656:	f7ff ffd3 	bl	14600 <PinInterface::PinInterface()>
   1465a:	4a0b      	ldr	r2, [pc, #44]	; (14688 <Pin::Pin(unsigned char, unsigned char)+0x54>)
   1465c:	9b01      	ldr	r3, [sp, #4]
   1465e:	601a      	str	r2, [r3, #0]
   14660:	9b01      	ldr	r3, [sp, #4]
   14662:	f89d 2003 	ldrb.w	r2, [sp, #3]
   14666:	711a      	strb	r2, [r3, #4]
   14668:	9b01      	ldr	r3, [sp, #4]
   1466a:	f89d 2002 	ldrb.w	r2, [sp, #2]
   1466e:	715a      	strb	r2, [r3, #5]
  }
   14670:	9c01      	ldr	r4, [sp, #4]
   14672:	462b      	mov	r3, r5
   14674:	4619      	mov	r1, r3
   14676:	4803      	ldr	r0, [pc, #12]	; (14684 <Pin::Pin(unsigned char, unsigned char)+0x50>)
   14678:	f7fe fd52 	bl	13120 <__cyg_profile_func_exit>
   1467c:	4623      	mov	r3, r4
   1467e:	4618      	mov	r0, r3
   14680:	b003      	add	sp, #12
   14682:	bd30      	pop	{r4, r5, pc}
   14684:	00014635 	.word	0x00014635
   14688:	00017d8c 	.word	0x00017d8c

0001468c <GpioInterface::GpioInterface()>:
#include "L0_LowLevel/LPC40xx.h"
#include "L1_Drivers/pin.hpp"
#include "utility/enum.hpp"
#include "utility/log.hpp"

class GpioInterface
   1468c:	b530      	push	{r4, r5, lr}
   1468e:	b083      	sub	sp, #12
   14690:	4675      	mov	r5, lr
   14692:	9001      	str	r0, [sp, #4]
   14694:	462b      	mov	r3, r5
   14696:	4619      	mov	r1, r3
   14698:	4807      	ldr	r0, [pc, #28]	; (146b8 <GpioInterface::GpioInterface()+0x2c>)
   1469a:	f7fe fd2d 	bl	130f8 <__cyg_profile_func_enter>
   1469e:	4a07      	ldr	r2, [pc, #28]	; (146bc <GpioInterface::GpioInterface()+0x30>)
   146a0:	9b01      	ldr	r3, [sp, #4]
   146a2:	601a      	str	r2, [r3, #0]
   146a4:	9c01      	ldr	r4, [sp, #4]
   146a6:	462b      	mov	r3, r5
   146a8:	4619      	mov	r1, r3
   146aa:	4803      	ldr	r0, [pc, #12]	; (146b8 <GpioInterface::GpioInterface()+0x2c>)
   146ac:	f7fe fd38 	bl	13120 <__cyg_profile_func_exit>
   146b0:	4623      	mov	r3, r4
   146b2:	4618      	mov	r0, r3
   146b4:	b003      	add	sp, #12
   146b6:	bd30      	pop	{r4, r5, pc}
   146b8:	0001468d 	.word	0x0001468d
   146bc:	000193e0 	.word	0x000193e0

000146c0 <Gpio::Gpio(unsigned char, unsigned char)>:
  };

  inline static volatile uint32_t * port_status = &(LPC_GPIOINT->IntStatus);

  // For port 0-4, pins 0-31 are available. Port 5 only has pins 0-4 available.
  constexpr Gpio(uint8_t port_number, uint8_t pin_number)
   146c0:	b530      	push	{r4, r5, lr}
   146c2:	b083      	sub	sp, #12
   146c4:	4675      	mov	r5, lr
   146c6:	9001      	str	r0, [sp, #4]
   146c8:	460b      	mov	r3, r1
   146ca:	f88d 3003 	strb.w	r3, [sp, #3]
   146ce:	4613      	mov	r3, r2
   146d0:	f88d 3002 	strb.w	r3, [sp, #2]
   146d4:	462b      	mov	r3, r5
   146d6:	4619      	mov	r1, r3
   146d8:	4816      	ldr	r0, [pc, #88]	; (14734 <Gpio::Gpio(unsigned char, unsigned char)+0x74>)
   146da:	f7fe fd0d 	bl	130f8 <__cyg_profile_func_enter>
      : interupt_port_(false),
        pin_(&lpc40xx_pin_),
        lpc40xx_pin_(port_number, pin_number)
   146de:	9b01      	ldr	r3, [sp, #4]
   146e0:	4618      	mov	r0, r3
   146e2:	f7ff ffd3 	bl	1468c <GpioInterface::GpioInterface()>
   146e6:	4a14      	ldr	r2, [pc, #80]	; (14738 <Gpio::Gpio(unsigned char, unsigned char)+0x78>)
   146e8:	9b01      	ldr	r3, [sp, #4]
   146ea:	601a      	str	r2, [r3, #0]
   146ec:	9b01      	ldr	r3, [sp, #4]
   146ee:	2200      	movs	r2, #0
   146f0:	711a      	strb	r2, [r3, #4]
   146f2:	9b01      	ldr	r3, [sp, #4]
   146f4:	f103 020c 	add.w	r2, r3, #12
   146f8:	9b01      	ldr	r3, [sp, #4]
   146fa:	609a      	str	r2, [r3, #8]
   146fc:	9b01      	ldr	r3, [sp, #4]
   146fe:	330c      	adds	r3, #12
   14700:	f89d 2002 	ldrb.w	r2, [sp, #2]
   14704:	f89d 1003 	ldrb.w	r1, [sp, #3]
   14708:	4618      	mov	r0, r3
   1470a:	f7ff ff93 	bl	14634 <Pin::Pin(unsigned char, unsigned char)>
  {
    interupt_port_ = (port_number == 2) ? 1 : 0;
   1470e:	f89d 3003 	ldrb.w	r3, [sp, #3]
   14712:	2b02      	cmp	r3, #2
   14714:	d101      	bne.n	1471a <Gpio::Gpio(unsigned char, unsigned char)+0x5a>
   14716:	2201      	movs	r2, #1
   14718:	e000      	b.n	1471c <Gpio::Gpio(unsigned char, unsigned char)+0x5c>
   1471a:	2200      	movs	r2, #0
   1471c:	9b01      	ldr	r3, [sp, #4]
   1471e:	711a      	strb	r2, [r3, #4]
  }
   14720:	9c01      	ldr	r4, [sp, #4]
   14722:	462b      	mov	r3, r5
   14724:	4619      	mov	r1, r3
   14726:	4803      	ldr	r0, [pc, #12]	; (14734 <Gpio::Gpio(unsigned char, unsigned char)+0x74>)
   14728:	f7fe fcfa 	bl	13120 <__cyg_profile_func_exit>
   1472c:	4623      	mov	r3, r4
   1472e:	4618      	mov	r0, r3
   14730:	b003      	add	sp, #12
   14732:	bd30      	pop	{r4, r5, pc}
   14734:	000146c1 	.word	0x000146c1
   14738:	00019398 	.word	0x00019398

0001473c <Gpio::SetAsInput()>:
      : interupt_port_(false), pin_(pin), lpc40xx_pin_(Pin::CreateInactivePin())
  {
    interupt_port_ = pin_->GetPort();
  }
  // Sets the GPIO pin direction as input
  void SetAsInput(void) override
   1473c:	b530      	push	{r4, r5, lr}
   1473e:	b083      	sub	sp, #12
   14740:	4675      	mov	r5, lr
   14742:	9001      	str	r0, [sp, #4]
   14744:	462b      	mov	r3, r5
   14746:	4619      	mov	r1, r3
   14748:	4819      	ldr	r0, [pc, #100]	; (147b0 <Gpio::SetAsInput()+0x74>)
   1474a:	f7fe fcd5 	bl	130f8 <__cyg_profile_func_enter>
  {
    pin_->SetPinFunction(kGpioFunction);
   1474e:	9b01      	ldr	r3, [sp, #4]
   14750:	689a      	ldr	r2, [r3, #8]
   14752:	9b01      	ldr	r3, [sp, #4]
   14754:	689b      	ldr	r3, [r3, #8]
   14756:	681b      	ldr	r3, [r3, #0]
   14758:	681b      	ldr	r3, [r3, #0]
   1475a:	2100      	movs	r1, #0
   1475c:	4610      	mov	r0, r2
   1475e:	4798      	blx	r3
    gpio_port[pin_->GetPort()]->DIR &= ~(1 << pin_->GetPin());
   14760:	9b01      	ldr	r3, [sp, #4]
   14762:	689a      	ldr	r2, [r3, #8]
   14764:	9b01      	ldr	r3, [sp, #4]
   14766:	689b      	ldr	r3, [r3, #8]
   14768:	681b      	ldr	r3, [r3, #0]
   1476a:	3330      	adds	r3, #48	; 0x30
   1476c:	681b      	ldr	r3, [r3, #0]
   1476e:	4610      	mov	r0, r2
   14770:	4798      	blx	r3
   14772:	4603      	mov	r3, r0
   14774:	461a      	mov	r2, r3
   14776:	2301      	movs	r3, #1
   14778:	4093      	lsls	r3, r2
   1477a:	43dc      	mvns	r4, r3
   1477c:	9b01      	ldr	r3, [sp, #4]
   1477e:	689a      	ldr	r2, [r3, #8]
   14780:	9b01      	ldr	r3, [sp, #4]
   14782:	689b      	ldr	r3, [r3, #8]
   14784:	681b      	ldr	r3, [r3, #0]
   14786:	332c      	adds	r3, #44	; 0x2c
   14788:	681b      	ldr	r3, [r3, #0]
   1478a:	4610      	mov	r0, r2
   1478c:	4798      	blx	r3
   1478e:	4603      	mov	r3, r0
   14790:	461a      	mov	r2, r3
   14792:	4b08      	ldr	r3, [pc, #32]	; (147b4 <Gpio::SetAsInput()+0x78>)
   14794:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   14798:	681a      	ldr	r2, [r3, #0]
   1479a:	4621      	mov	r1, r4
   1479c:	400a      	ands	r2, r1
   1479e:	601a      	str	r2, [r3, #0]
   147a0:	462b      	mov	r3, r5
   147a2:	4619      	mov	r1, r3
   147a4:	4802      	ldr	r0, [pc, #8]	; (147b0 <Gpio::SetAsInput()+0x74>)
   147a6:	f7fe fcbb 	bl	13120 <__cyg_profile_func_exit>
  }
   147aa:	bf00      	nop
   147ac:	b003      	add	sp, #12
   147ae:	bd30      	pop	{r4, r5, pc}
   147b0:	0001473d 	.word	0x0001473d
   147b4:	10000188 	.word	0x10000188

000147b8 <Gpio::SetAsOutput()>:
  // Sets the GPIO pin direction as output
  void SetAsOutput(void) override
   147b8:	b530      	push	{r4, r5, lr}
   147ba:	b083      	sub	sp, #12
   147bc:	4675      	mov	r5, lr
   147be:	9001      	str	r0, [sp, #4]
   147c0:	462b      	mov	r3, r5
   147c2:	4619      	mov	r1, r3
   147c4:	4819      	ldr	r0, [pc, #100]	; (1482c <Gpio::SetAsOutput()+0x74>)
   147c6:	f7fe fc97 	bl	130f8 <__cyg_profile_func_enter>
  {
    pin_->SetPinFunction(kGpioFunction);
   147ca:	9b01      	ldr	r3, [sp, #4]
   147cc:	689a      	ldr	r2, [r3, #8]
   147ce:	9b01      	ldr	r3, [sp, #4]
   147d0:	689b      	ldr	r3, [r3, #8]
   147d2:	681b      	ldr	r3, [r3, #0]
   147d4:	681b      	ldr	r3, [r3, #0]
   147d6:	2100      	movs	r1, #0
   147d8:	4610      	mov	r0, r2
   147da:	4798      	blx	r3
    gpio_port[pin_->GetPort()]->DIR |= (1 << pin_->GetPin());
   147dc:	9b01      	ldr	r3, [sp, #4]
   147de:	689a      	ldr	r2, [r3, #8]
   147e0:	9b01      	ldr	r3, [sp, #4]
   147e2:	689b      	ldr	r3, [r3, #8]
   147e4:	681b      	ldr	r3, [r3, #0]
   147e6:	3330      	adds	r3, #48	; 0x30
   147e8:	681b      	ldr	r3, [r3, #0]
   147ea:	4610      	mov	r0, r2
   147ec:	4798      	blx	r3
   147ee:	4603      	mov	r3, r0
   147f0:	461a      	mov	r2, r3
   147f2:	2301      	movs	r3, #1
   147f4:	fa03 f402 	lsl.w	r4, r3, r2
   147f8:	9b01      	ldr	r3, [sp, #4]
   147fa:	689a      	ldr	r2, [r3, #8]
   147fc:	9b01      	ldr	r3, [sp, #4]
   147fe:	689b      	ldr	r3, [r3, #8]
   14800:	681b      	ldr	r3, [r3, #0]
   14802:	332c      	adds	r3, #44	; 0x2c
   14804:	681b      	ldr	r3, [r3, #0]
   14806:	4610      	mov	r0, r2
   14808:	4798      	blx	r3
   1480a:	4603      	mov	r3, r0
   1480c:	461a      	mov	r2, r3
   1480e:	4b08      	ldr	r3, [pc, #32]	; (14830 <Gpio::SetAsOutput()+0x78>)
   14810:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   14814:	681a      	ldr	r2, [r3, #0]
   14816:	4621      	mov	r1, r4
   14818:	430a      	orrs	r2, r1
   1481a:	601a      	str	r2, [r3, #0]
   1481c:	462b      	mov	r3, r5
   1481e:	4619      	mov	r1, r3
   14820:	4802      	ldr	r0, [pc, #8]	; (1482c <Gpio::SetAsOutput()+0x74>)
   14822:	f7fe fc7d 	bl	13120 <__cyg_profile_func_exit>
  }
   14826:	bf00      	nop
   14828:	b003      	add	sp, #12
   1482a:	bd30      	pop	{r4, r5, pc}
   1482c:	000147b9 	.word	0x000147b9
   14830:	10000188 	.word	0x10000188

00014834 <Gpio::SetDirection(GpioInterface::Direction)>:
  // Sets the GPIO pin direction as output or input depending on the
  // Direction enum parameter
  inline void SetDirection(Direction direction) override
   14834:	b510      	push	{r4, lr}
   14836:	b082      	sub	sp, #8
   14838:	4674      	mov	r4, lr
   1483a:	9001      	str	r0, [sp, #4]
   1483c:	460b      	mov	r3, r1
   1483e:	f88d 3003 	strb.w	r3, [sp, #3]
   14842:	4623      	mov	r3, r4
   14844:	4619      	mov	r1, r3
   14846:	480b      	ldr	r0, [pc, #44]	; (14874 <Gpio::SetDirection(GpioInterface::Direction)+0x40>)
   14848:	f7fe fc56 	bl	130f8 <__cyg_profile_func_enter>
  {
    (direction) ? SetAsOutput() : SetAsInput();
   1484c:	f89d 3003 	ldrb.w	r3, [sp, #3]
   14850:	2b00      	cmp	r3, #0
   14852:	d003      	beq.n	1485c <Gpio::SetDirection(GpioInterface::Direction)+0x28>
   14854:	9801      	ldr	r0, [sp, #4]
   14856:	f7ff ffaf 	bl	147b8 <Gpio::SetAsOutput()>
   1485a:	e002      	b.n	14862 <Gpio::SetDirection(GpioInterface::Direction)+0x2e>
   1485c:	9801      	ldr	r0, [sp, #4]
   1485e:	f7ff ff6d 	bl	1473c <Gpio::SetAsInput()>
   14862:	4623      	mov	r3, r4
   14864:	4619      	mov	r1, r3
   14866:	4803      	ldr	r0, [pc, #12]	; (14874 <Gpio::SetDirection(GpioInterface::Direction)+0x40>)
   14868:	f7fe fc5a 	bl	13120 <__cyg_profile_func_exit>
  }
   1486c:	bf00      	nop
   1486e:	b002      	add	sp, #8
   14870:	bd10      	pop	{r4, pc}
   14872:	bf00      	nop
   14874:	00014835 	.word	0x00014835

00014878 <Gpio::SetHigh()>:
  // Sets the GPIO output pin to high
  void SetHigh(void) override
   14878:	b530      	push	{r4, r5, lr}
   1487a:	b083      	sub	sp, #12
   1487c:	4675      	mov	r5, lr
   1487e:	9001      	str	r0, [sp, #4]
   14880:	462b      	mov	r3, r5
   14882:	4619      	mov	r1, r3
   14884:	4813      	ldr	r0, [pc, #76]	; (148d4 <Gpio::SetHigh()+0x5c>)
   14886:	f7fe fc37 	bl	130f8 <__cyg_profile_func_enter>
  {
    gpio_port[pin_->GetPort()]->SET = (1 << pin_->GetPin());
   1488a:	9b01      	ldr	r3, [sp, #4]
   1488c:	689a      	ldr	r2, [r3, #8]
   1488e:	9b01      	ldr	r3, [sp, #4]
   14890:	689b      	ldr	r3, [r3, #8]
   14892:	681b      	ldr	r3, [r3, #0]
   14894:	3330      	adds	r3, #48	; 0x30
   14896:	681b      	ldr	r3, [r3, #0]
   14898:	4610      	mov	r0, r2
   1489a:	4798      	blx	r3
   1489c:	4603      	mov	r3, r0
   1489e:	461a      	mov	r2, r3
   148a0:	2301      	movs	r3, #1
   148a2:	4093      	lsls	r3, r2
   148a4:	461c      	mov	r4, r3
   148a6:	9b01      	ldr	r3, [sp, #4]
   148a8:	689a      	ldr	r2, [r3, #8]
   148aa:	9b01      	ldr	r3, [sp, #4]
   148ac:	689b      	ldr	r3, [r3, #8]
   148ae:	681b      	ldr	r3, [r3, #0]
   148b0:	332c      	adds	r3, #44	; 0x2c
   148b2:	681b      	ldr	r3, [r3, #0]
   148b4:	4610      	mov	r0, r2
   148b6:	4798      	blx	r3
   148b8:	4603      	mov	r3, r0
   148ba:	461a      	mov	r2, r3
   148bc:	4b06      	ldr	r3, [pc, #24]	; (148d8 <Gpio::SetHigh()+0x60>)
   148be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   148c2:	619c      	str	r4, [r3, #24]
   148c4:	462b      	mov	r3, r5
   148c6:	4619      	mov	r1, r3
   148c8:	4802      	ldr	r0, [pc, #8]	; (148d4 <Gpio::SetHigh()+0x5c>)
   148ca:	f7fe fc29 	bl	13120 <__cyg_profile_func_exit>
  }
   148ce:	bf00      	nop
   148d0:	b003      	add	sp, #12
   148d2:	bd30      	pop	{r4, r5, pc}
   148d4:	00014879 	.word	0x00014879
   148d8:	10000188 	.word	0x10000188

000148dc <Gpio::SetLow()>:
  // Sets the GPIO output pin to low
  void SetLow(void) override
   148dc:	b530      	push	{r4, r5, lr}
   148de:	b083      	sub	sp, #12
   148e0:	4675      	mov	r5, lr
   148e2:	9001      	str	r0, [sp, #4]
   148e4:	462b      	mov	r3, r5
   148e6:	4619      	mov	r1, r3
   148e8:	4813      	ldr	r0, [pc, #76]	; (14938 <Gpio::SetLow()+0x5c>)
   148ea:	f7fe fc05 	bl	130f8 <__cyg_profile_func_enter>
  {
    gpio_port[pin_->GetPort()]->CLR = (1 << pin_->GetPin());
   148ee:	9b01      	ldr	r3, [sp, #4]
   148f0:	689a      	ldr	r2, [r3, #8]
   148f2:	9b01      	ldr	r3, [sp, #4]
   148f4:	689b      	ldr	r3, [r3, #8]
   148f6:	681b      	ldr	r3, [r3, #0]
   148f8:	3330      	adds	r3, #48	; 0x30
   148fa:	681b      	ldr	r3, [r3, #0]
   148fc:	4610      	mov	r0, r2
   148fe:	4798      	blx	r3
   14900:	4603      	mov	r3, r0
   14902:	461a      	mov	r2, r3
   14904:	2301      	movs	r3, #1
   14906:	4093      	lsls	r3, r2
   14908:	461c      	mov	r4, r3
   1490a:	9b01      	ldr	r3, [sp, #4]
   1490c:	689a      	ldr	r2, [r3, #8]
   1490e:	9b01      	ldr	r3, [sp, #4]
   14910:	689b      	ldr	r3, [r3, #8]
   14912:	681b      	ldr	r3, [r3, #0]
   14914:	332c      	adds	r3, #44	; 0x2c
   14916:	681b      	ldr	r3, [r3, #0]
   14918:	4610      	mov	r0, r2
   1491a:	4798      	blx	r3
   1491c:	4603      	mov	r3, r0
   1491e:	461a      	mov	r2, r3
   14920:	4b06      	ldr	r3, [pc, #24]	; (1493c <Gpio::SetLow()+0x60>)
   14922:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   14926:	61dc      	str	r4, [r3, #28]
   14928:	462b      	mov	r3, r5
   1492a:	4619      	mov	r1, r3
   1492c:	4802      	ldr	r0, [pc, #8]	; (14938 <Gpio::SetLow()+0x5c>)
   1492e:	f7fe fbf7 	bl	13120 <__cyg_profile_func_exit>
  }
   14932:	bf00      	nop
   14934:	b003      	add	sp, #12
   14936:	bd30      	pop	{r4, r5, pc}
   14938:	000148dd 	.word	0x000148dd
   1493c:	10000188 	.word	0x10000188

00014940 <Gpio::Set(GpioInterface::State)>:
  // Sets the GPIO output pin to high or low depending on the State enum
  // parameter
  void Set(State output = kHigh) override
   14940:	b510      	push	{r4, lr}
   14942:	b082      	sub	sp, #8
   14944:	4674      	mov	r4, lr
   14946:	9001      	str	r0, [sp, #4]
   14948:	460b      	mov	r3, r1
   1494a:	f88d 3003 	strb.w	r3, [sp, #3]
   1494e:	4623      	mov	r3, r4
   14950:	4619      	mov	r1, r3
   14952:	480b      	ldr	r0, [pc, #44]	; (14980 <Gpio::Set(GpioInterface::State)+0x40>)
   14954:	f7fe fbd0 	bl	130f8 <__cyg_profile_func_enter>
  {
    (output) ? SetHigh() : SetLow();
   14958:	f89d 3003 	ldrb.w	r3, [sp, #3]
   1495c:	2b00      	cmp	r3, #0
   1495e:	d003      	beq.n	14968 <Gpio::Set(GpioInterface::State)+0x28>
   14960:	9801      	ldr	r0, [sp, #4]
   14962:	f7ff ff89 	bl	14878 <Gpio::SetHigh()>
   14966:	e002      	b.n	1496e <Gpio::Set(GpioInterface::State)+0x2e>
   14968:	9801      	ldr	r0, [sp, #4]
   1496a:	f7ff ffb7 	bl	148dc <Gpio::SetLow()>
   1496e:	4623      	mov	r3, r4
   14970:	4619      	mov	r1, r3
   14972:	4803      	ldr	r0, [pc, #12]	; (14980 <Gpio::Set(GpioInterface::State)+0x40>)
   14974:	f7fe fbd4 	bl	13120 <__cyg_profile_func_exit>
  }
   14978:	bf00      	nop
   1497a:	b002      	add	sp, #8
   1497c:	bd10      	pop	{r4, pc}
   1497e:	bf00      	nop
   14980:	00014941 	.word	0x00014941

00014984 <Gpio::Toggle()>:
  // Toggle the output of a GPIO output pin
  void Toggle() override
   14984:	b530      	push	{r4, r5, lr}
   14986:	b083      	sub	sp, #12
   14988:	4675      	mov	r5, lr
   1498a:	9001      	str	r0, [sp, #4]
   1498c:	462b      	mov	r3, r5
   1498e:	4619      	mov	r1, r3
   14990:	4815      	ldr	r0, [pc, #84]	; (149e8 <Gpio::Toggle()+0x64>)
   14992:	f7fe fbb1 	bl	130f8 <__cyg_profile_func_enter>
  {
    gpio_port[pin_->GetPort()]->PIN ^= (1 << pin_->GetPin());
   14996:	9b01      	ldr	r3, [sp, #4]
   14998:	689a      	ldr	r2, [r3, #8]
   1499a:	9b01      	ldr	r3, [sp, #4]
   1499c:	689b      	ldr	r3, [r3, #8]
   1499e:	681b      	ldr	r3, [r3, #0]
   149a0:	3330      	adds	r3, #48	; 0x30
   149a2:	681b      	ldr	r3, [r3, #0]
   149a4:	4610      	mov	r0, r2
   149a6:	4798      	blx	r3
   149a8:	4603      	mov	r3, r0
   149aa:	461a      	mov	r2, r3
   149ac:	2301      	movs	r3, #1
   149ae:	fa03 f402 	lsl.w	r4, r3, r2
   149b2:	9b01      	ldr	r3, [sp, #4]
   149b4:	689a      	ldr	r2, [r3, #8]
   149b6:	9b01      	ldr	r3, [sp, #4]
   149b8:	689b      	ldr	r3, [r3, #8]
   149ba:	681b      	ldr	r3, [r3, #0]
   149bc:	332c      	adds	r3, #44	; 0x2c
   149be:	681b      	ldr	r3, [r3, #0]
   149c0:	4610      	mov	r0, r2
   149c2:	4798      	blx	r3
   149c4:	4603      	mov	r3, r0
   149c6:	461a      	mov	r2, r3
   149c8:	4b08      	ldr	r3, [pc, #32]	; (149ec <Gpio::Toggle()+0x68>)
   149ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   149ce:	695a      	ldr	r2, [r3, #20]
   149d0:	4621      	mov	r1, r4
   149d2:	404a      	eors	r2, r1
   149d4:	615a      	str	r2, [r3, #20]
   149d6:	462b      	mov	r3, r5
   149d8:	4619      	mov	r1, r3
   149da:	4803      	ldr	r0, [pc, #12]	; (149e8 <Gpio::Toggle()+0x64>)
   149dc:	f7fe fba0 	bl	13120 <__cyg_profile_func_exit>
  }
   149e0:	bf00      	nop
   149e2:	b003      	add	sp, #12
   149e4:	bd30      	pop	{r4, r5, pc}
   149e6:	bf00      	nop
   149e8:	00014985 	.word	0x00014985
   149ec:	10000188 	.word	0x10000188

000149f0 <Gpio::ReadState()>:
  // Returns the current State state of the pin
  State ReadState(void) override
   149f0:	b530      	push	{r4, r5, lr}
   149f2:	b085      	sub	sp, #20
   149f4:	4675      	mov	r5, lr
   149f6:	9001      	str	r0, [sp, #4]
   149f8:	462b      	mov	r3, r5
   149fa:	4619      	mov	r1, r3
   149fc:	4818      	ldr	r0, [pc, #96]	; (14a60 <Gpio::ReadState()+0x70>)
   149fe:	f7fe fb7b 	bl	130f8 <__cyg_profile_func_enter>
  {
    bool state = (gpio_port[pin_->GetPort()]->PIN >> pin_->GetPin()) & 1;
   14a02:	9b01      	ldr	r3, [sp, #4]
   14a04:	689a      	ldr	r2, [r3, #8]
   14a06:	9b01      	ldr	r3, [sp, #4]
   14a08:	689b      	ldr	r3, [r3, #8]
   14a0a:	681b      	ldr	r3, [r3, #0]
   14a0c:	332c      	adds	r3, #44	; 0x2c
   14a0e:	681b      	ldr	r3, [r3, #0]
   14a10:	4610      	mov	r0, r2
   14a12:	4798      	blx	r3
   14a14:	4603      	mov	r3, r0
   14a16:	461a      	mov	r2, r3
   14a18:	4b12      	ldr	r3, [pc, #72]	; (14a64 <Gpio::ReadState()+0x74>)
   14a1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   14a1e:	695c      	ldr	r4, [r3, #20]
   14a20:	9b01      	ldr	r3, [sp, #4]
   14a22:	689a      	ldr	r2, [r3, #8]
   14a24:	9b01      	ldr	r3, [sp, #4]
   14a26:	689b      	ldr	r3, [r3, #8]
   14a28:	681b      	ldr	r3, [r3, #0]
   14a2a:	3330      	adds	r3, #48	; 0x30
   14a2c:	681b      	ldr	r3, [r3, #0]
   14a2e:	4610      	mov	r0, r2
   14a30:	4798      	blx	r3
   14a32:	4603      	mov	r3, r0
   14a34:	fa24 f303 	lsr.w	r3, r4, r3
   14a38:	f003 0301 	and.w	r3, r3, #1
   14a3c:	2b00      	cmp	r3, #0
   14a3e:	bf14      	ite	ne
   14a40:	2301      	movne	r3, #1
   14a42:	2300      	moveq	r3, #0
   14a44:	f88d 300f 	strb.w	r3, [sp, #15]
    return static_cast<State>(state);
   14a48:	f89d 400f 	ldrb.w	r4, [sp, #15]
   14a4c:	462b      	mov	r3, r5
   14a4e:	4619      	mov	r1, r3
   14a50:	4803      	ldr	r0, [pc, #12]	; (14a60 <Gpio::ReadState()+0x70>)
   14a52:	f7fe fb65 	bl	13120 <__cyg_profile_func_exit>
   14a56:	4623      	mov	r3, r4
  }
   14a58:	4618      	mov	r0, r3
   14a5a:	b005      	add	sp, #20
   14a5c:	bd30      	pop	{r4, r5, pc}
   14a5e:	bf00      	nop
   14a60:	000149f1 	.word	0x000149f1
   14a64:	10000188 	.word	0x10000188

00014a68 <Gpio::Read()>:
  // Returns true if input or output pin is high
  bool Read(void) override
   14a68:	b530      	push	{r4, r5, lr}
   14a6a:	b083      	sub	sp, #12
   14a6c:	4675      	mov	r5, lr
   14a6e:	9001      	str	r0, [sp, #4]
   14a70:	462b      	mov	r3, r5
   14a72:	4619      	mov	r1, r3
   14a74:	4816      	ldr	r0, [pc, #88]	; (14ad0 <Gpio::Read()+0x68>)
   14a76:	f7fe fb3f 	bl	130f8 <__cyg_profile_func_enter>
  {
    return (gpio_port[pin_->GetPort()]->PIN >> pin_->GetPin()) & 1;
   14a7a:	9b01      	ldr	r3, [sp, #4]
   14a7c:	689a      	ldr	r2, [r3, #8]
   14a7e:	9b01      	ldr	r3, [sp, #4]
   14a80:	689b      	ldr	r3, [r3, #8]
   14a82:	681b      	ldr	r3, [r3, #0]
   14a84:	332c      	adds	r3, #44	; 0x2c
   14a86:	681b      	ldr	r3, [r3, #0]
   14a88:	4610      	mov	r0, r2
   14a8a:	4798      	blx	r3
   14a8c:	4603      	mov	r3, r0
   14a8e:	461a      	mov	r2, r3
   14a90:	4b10      	ldr	r3, [pc, #64]	; (14ad4 <Gpio::Read()+0x6c>)
   14a92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   14a96:	695c      	ldr	r4, [r3, #20]
   14a98:	9b01      	ldr	r3, [sp, #4]
   14a9a:	689a      	ldr	r2, [r3, #8]
   14a9c:	9b01      	ldr	r3, [sp, #4]
   14a9e:	689b      	ldr	r3, [r3, #8]
   14aa0:	681b      	ldr	r3, [r3, #0]
   14aa2:	3330      	adds	r3, #48	; 0x30
   14aa4:	681b      	ldr	r3, [r3, #0]
   14aa6:	4610      	mov	r0, r2
   14aa8:	4798      	blx	r3
   14aaa:	4603      	mov	r3, r0
   14aac:	fa24 f303 	lsr.w	r3, r4, r3
   14ab0:	f003 0301 	and.w	r3, r3, #1
   14ab4:	2b00      	cmp	r3, #0
   14ab6:	bf14      	ite	ne
   14ab8:	2301      	movne	r3, #1
   14aba:	2300      	moveq	r3, #0
   14abc:	b2dc      	uxtb	r4, r3
   14abe:	462b      	mov	r3, r5
   14ac0:	4619      	mov	r1, r3
   14ac2:	4803      	ldr	r0, [pc, #12]	; (14ad0 <Gpio::Read()+0x68>)
   14ac4:	f7fe fb2c 	bl	13120 <__cyg_profile_func_exit>
   14ac8:	4623      	mov	r3, r4
  }
   14aca:	4618      	mov	r0, r3
   14acc:	b003      	add	sp, #12
   14ace:	bd30      	pop	{r4, r5, pc}
   14ad0:	00014a69 	.word	0x00014a69
   14ad4:	10000188 	.word	0x10000188

00014ad8 <Gpio::GetPin()>:
  PinInterface & GetPin() override
   14ad8:	b530      	push	{r4, r5, lr}
   14ada:	b083      	sub	sp, #12
   14adc:	4675      	mov	r5, lr
   14ade:	9001      	str	r0, [sp, #4]
   14ae0:	462b      	mov	r3, r5
   14ae2:	4619      	mov	r1, r3
   14ae4:	4806      	ldr	r0, [pc, #24]	; (14b00 <Gpio::GetPin()+0x28>)
   14ae6:	f7fe fb07 	bl	130f8 <__cyg_profile_func_enter>
  {
    return *pin_;
   14aea:	9b01      	ldr	r3, [sp, #4]
   14aec:	689c      	ldr	r4, [r3, #8]
   14aee:	462b      	mov	r3, r5
   14af0:	4619      	mov	r1, r3
   14af2:	4803      	ldr	r0, [pc, #12]	; (14b00 <Gpio::GetPin()+0x28>)
   14af4:	f7fe fb14 	bl	13120 <__cyg_profile_func_exit>
   14af8:	4623      	mov	r3, r4
  }
   14afa:	4618      	mov	r0, r3
   14afc:	b003      	add	sp, #12
   14afe:	bd30      	pop	{r4, r5, pc}
   14b00:	00014ad9 	.word	0x00014ad9

00014b04 <Gpio::ValidPortCheck()>:

  // Checks if the selected gpio port is valid for external interrupts.
  bool ValidPortCheck()
   14b04:	b530      	push	{r4, r5, lr}
   14b06:	b087      	sub	sp, #28
   14b08:	4675      	mov	r5, lr
   14b0a:	9003      	str	r0, [sp, #12]
   14b0c:	462b      	mov	r3, r5
   14b0e:	4619      	mov	r1, r3
   14b10:	4817      	ldr	r0, [pc, #92]	; (14b70 <Gpio::ValidPortCheck()+0x6c>)
   14b12:	f7fe faf1 	bl	130f8 <__cyg_profile_func_enter>
  {
    bool is_valid = (interupt_port_ <= 1);
   14b16:	9b03      	ldr	r3, [sp, #12]
   14b18:	791b      	ldrb	r3, [r3, #4]
   14b1a:	2b01      	cmp	r3, #1
   14b1c:	bf94      	ite	ls
   14b1e:	2301      	movls	r3, #1
   14b20:	2300      	movhi	r3, #0
   14b22:	b2db      	uxtb	r3, r3
   14b24:	f88d 3017 	strb.w	r3, [sp, #23]
    SJ2_ASSERT_WARNING(is_valid,
   14b28:	f89d 3017 	ldrb.w	r3, [sp, #23]
   14b2c:	f083 0301 	eor.w	r3, r3, #1
   14b30:	b2db      	uxtb	r3, r3
   14b32:	2b00      	cmp	r3, #0
   14b34:	d010      	beq.n	14b58 <Gpio::ValidPortCheck()+0x54>
   14b36:	9b03      	ldr	r3, [sp, #12]
   14b38:	689a      	ldr	r2, [r3, #8]
   14b3a:	9b03      	ldr	r3, [sp, #12]
   14b3c:	689b      	ldr	r3, [r3, #8]
   14b3e:	681b      	ldr	r3, [r3, #0]
   14b40:	332c      	adds	r3, #44	; 0x2c
   14b42:	681b      	ldr	r3, [r3, #0]
   14b44:	4610      	mov	r0, r2
   14b46:	4798      	blx	r3
   14b48:	4603      	mov	r3, r0
   14b4a:	9300      	str	r3, [sp, #0]
   14b4c:	23a6      	movs	r3, #166	; 0xa6
   14b4e:	4a09      	ldr	r2, [pc, #36]	; (14b74 <Gpio::ValidPortCheck()+0x70>)
   14b50:	4909      	ldr	r1, [pc, #36]	; (14b78 <Gpio::ValidPortCheck()+0x74>)
   14b52:	480a      	ldr	r0, [pc, #40]	; (14b7c <Gpio::ValidPortCheck()+0x78>)
   14b54:	f7ff fd2e 	bl	145b4 <printf>
                       "Port %d cannot be used for External Interrupts. Need "
                       "to use GPIO on Port 0 or 2.",
                       pin_->GetPort());
    return is_valid;
   14b58:	f89d 4017 	ldrb.w	r4, [sp, #23]
   14b5c:	462b      	mov	r3, r5
   14b5e:	4619      	mov	r1, r3
   14b60:	4803      	ldr	r0, [pc, #12]	; (14b70 <Gpio::ValidPortCheck()+0x6c>)
   14b62:	f7fe fadd 	bl	13120 <__cyg_profile_func_exit>
   14b66:	4623      	mov	r3, r4
  }
   14b68:	4618      	mov	r0, r3
   14b6a:	b007      	add	sp, #28
   14b6c:	bd30      	pop	{r4, r5, pc}
   14b6e:	bf00      	nop
   14b70:	00014b05 	.word	0x00014b05
   14b74:	00019498 	.word	0x00019498
   14b78:	00018e8c 	.word	0x00018e8c
   14b7c:	0001835c 	.word	0x0001835c

00014b80 <Gpio::SetInterruptRoutine(void (*)())>:

  // Assigns the developer's ISR function to the port/pin gpio instance.
  void SetInterruptRoutine(IsrPointer function) override
   14b80:	b570      	push	{r4, r5, r6, lr}
   14b82:	b082      	sub	sp, #8
   14b84:	4676      	mov	r6, lr
   14b86:	9001      	str	r0, [sp, #4]
   14b88:	9100      	str	r1, [sp, #0]
   14b8a:	4633      	mov	r3, r6
   14b8c:	4619      	mov	r1, r3
   14b8e:	4811      	ldr	r0, [pc, #68]	; (14bd4 <Gpio::SetInterruptRoutine(void (*)())+0x54>)
   14b90:	f7fe fab2 	bl	130f8 <__cyg_profile_func_enter>
  {
    ValidPortCheck();
   14b94:	9801      	ldr	r0, [sp, #4]
   14b96:	f7ff ffb5 	bl	14b04 <Gpio::ValidPortCheck()>
    interrupthandlers[interupt_port_][pin_->GetPin()] = function;
   14b9a:	9c00      	ldr	r4, [sp, #0]
   14b9c:	9b01      	ldr	r3, [sp, #4]
   14b9e:	791b      	ldrb	r3, [r3, #4]
   14ba0:	461d      	mov	r5, r3
   14ba2:	9b01      	ldr	r3, [sp, #4]
   14ba4:	689a      	ldr	r2, [r3, #8]
   14ba6:	9b01      	ldr	r3, [sp, #4]
   14ba8:	689b      	ldr	r3, [r3, #8]
   14baa:	681b      	ldr	r3, [r3, #0]
   14bac:	3330      	adds	r3, #48	; 0x30
   14bae:	681b      	ldr	r3, [r3, #0]
   14bb0:	4610      	mov	r0, r2
   14bb2:	4798      	blx	r3
   14bb4:	4603      	mov	r3, r0
   14bb6:	4619      	mov	r1, r3
   14bb8:	4a07      	ldr	r2, [pc, #28]	; (14bd8 <Gpio::SetInterruptRoutine(void (*)())+0x58>)
   14bba:	016b      	lsls	r3, r5, #5
   14bbc:	440b      	add	r3, r1
   14bbe:	f842 4023 	str.w	r4, [r2, r3, lsl #2]
   14bc2:	4633      	mov	r3, r6
   14bc4:	4619      	mov	r1, r3
   14bc6:	4803      	ldr	r0, [pc, #12]	; (14bd4 <Gpio::SetInterruptRoutine(void (*)())+0x54>)
   14bc8:	f7fe faaa 	bl	13120 <__cyg_profile_func_exit>
  }
   14bcc:	bf00      	nop
   14bce:	b002      	add	sp, #8
   14bd0:	bd70      	pop	{r4, r5, r6, pc}
   14bd2:	bf00      	nop
   14bd4:	00014b81 	.word	0x00014b81
   14bd8:	10000460 	.word	0x10000460

00014bdc <Gpio::ClearInterruptRoutine()>:

  // Clears the developers ISR function from the port/pin gio instance.
  void ClearInterruptRoutine() override
   14bdc:	b530      	push	{r4, r5, lr}
   14bde:	b083      	sub	sp, #12
   14be0:	4675      	mov	r5, lr
   14be2:	9001      	str	r0, [sp, #4]
   14be4:	462b      	mov	r3, r5
   14be6:	4619      	mov	r1, r3
   14be8:	480f      	ldr	r0, [pc, #60]	; (14c28 <Gpio::ClearInterruptRoutine()+0x4c>)
   14bea:	f7fe fa85 	bl	130f8 <__cyg_profile_func_enter>
  {
    interrupthandlers[interupt_port_][pin_->GetPin()] = nullptr;
   14bee:	9b01      	ldr	r3, [sp, #4]
   14bf0:	791b      	ldrb	r3, [r3, #4]
   14bf2:	461c      	mov	r4, r3
   14bf4:	9b01      	ldr	r3, [sp, #4]
   14bf6:	689a      	ldr	r2, [r3, #8]
   14bf8:	9b01      	ldr	r3, [sp, #4]
   14bfa:	689b      	ldr	r3, [r3, #8]
   14bfc:	681b      	ldr	r3, [r3, #0]
   14bfe:	3330      	adds	r3, #48	; 0x30
   14c00:	681b      	ldr	r3, [r3, #0]
   14c02:	4610      	mov	r0, r2
   14c04:	4798      	blx	r3
   14c06:	4603      	mov	r3, r0
   14c08:	4619      	mov	r1, r3
   14c0a:	4a08      	ldr	r2, [pc, #32]	; (14c2c <Gpio::ClearInterruptRoutine()+0x50>)
   14c0c:	0163      	lsls	r3, r4, #5
   14c0e:	440b      	add	r3, r1
   14c10:	2100      	movs	r1, #0
   14c12:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
   14c16:	462b      	mov	r3, r5
   14c18:	4619      	mov	r1, r3
   14c1a:	4803      	ldr	r0, [pc, #12]	; (14c28 <Gpio::ClearInterruptRoutine()+0x4c>)
   14c1c:	f7fe fa80 	bl	13120 <__cyg_profile_func_exit>
  }
   14c20:	bf00      	nop
   14c22:	b003      	add	sp, #12
   14c24:	bd30      	pop	{r4, r5, pc}
   14c26:	bf00      	nop
   14c28:	00014bdd 	.word	0x00014bdd
   14c2c:	10000460 	.word	0x10000460

00014c30 <unsigned char util::Value<GpioInterface::Edge, unsigned char>(GpioInterface::Edge)>:
constexpr Type Value(Enum enum_type_value)
   14c30:	b530      	push	{r4, r5, lr}
   14c32:	b083      	sub	sp, #12
   14c34:	4675      	mov	r5, lr
   14c36:	4603      	mov	r3, r0
   14c38:	f88d 3007 	strb.w	r3, [sp, #7]
   14c3c:	462b      	mov	r3, r5
   14c3e:	4619      	mov	r1, r3
   14c40:	4806      	ldr	r0, [pc, #24]	; (14c5c <unsigned char util::Value<GpioInterface::Edge, unsigned char>(GpioInterface::Edge)+0x2c>)
   14c42:	f7fe fa59 	bl	130f8 <__cyg_profile_func_enter>
  return static_cast<Type>(enum_type_value);
   14c46:	f89d 4007 	ldrb.w	r4, [sp, #7]
   14c4a:	462b      	mov	r3, r5
   14c4c:	4619      	mov	r1, r3
   14c4e:	4803      	ldr	r0, [pc, #12]	; (14c5c <unsigned char util::Value<GpioInterface::Edge, unsigned char>(GpioInterface::Edge)+0x2c>)
   14c50:	f7fe fa66 	bl	13120 <__cyg_profile_func_exit>
   14c54:	4623      	mov	r3, r4
}
   14c56:	4618      	mov	r0, r3
   14c58:	b003      	add	sp, #12
   14c5a:	bd30      	pop	{r4, r5, pc}
   14c5c:	00014c31 	.word	0x00014c31

00014c60 <Gpio::SetInterruptEdge(GpioInterface::Edge)>:

  // Sets the selected edge that the gpio interrupt will be triggered on.
  void SetInterruptEdge(Edge edge) override
   14c60:	b510      	push	{r4, lr}
   14c62:	b084      	sub	sp, #16
   14c64:	4674      	mov	r4, lr
   14c66:	9003      	str	r0, [sp, #12]
   14c68:	460b      	mov	r3, r1
   14c6a:	f88d 300b 	strb.w	r3, [sp, #11]
   14c6e:	4623      	mov	r3, r4
   14c70:	4619      	mov	r1, r3
   14c72:	4819      	ldr	r0, [pc, #100]	; (14cd8 <Gpio::SetInterruptEdge(GpioInterface::Edge)+0x78>)
   14c74:	f7fe fa40 	bl	130f8 <__cyg_profile_func_enter>
  {
    ValidPortCheck();
   14c78:	9803      	ldr	r0, [sp, #12]
   14c7a:	f7ff ff43 	bl	14b04 <Gpio::ValidPortCheck()>
    switch (edge)
   14c7e:	f89d 300b 	ldrb.w	r3, [sp, #11]
   14c82:	2b01      	cmp	r3, #1
   14c84:	d008      	beq.n	14c98 <Gpio::SetInterruptEdge(GpioInterface::Edge)+0x38>
   14c86:	2b01      	cmp	r3, #1
   14c88:	d302      	bcc.n	14c90 <Gpio::SetInterruptEdge(GpioInterface::Edge)+0x30>
   14c8a:	2b02      	cmp	r3, #2
   14c8c:	d008      	beq.n	14ca0 <Gpio::SetInterruptEdge(GpioInterface::Edge)+0x40>
   14c8e:	e00e      	b.n	14cae <Gpio::SetInterruptEdge(GpioInterface::Edge)+0x4e>
    {
      case Edge::kEdgeRising:
      {
        SetEdgeRising();
   14c90:	9803      	ldr	r0, [sp, #12]
   14c92:	f000 f8b1 	bl	14df8 <Gpio::SetEdgeRising()>
        break;
   14c96:	e017      	b.n	14cc8 <Gpio::SetInterruptEdge(GpioInterface::Edge)+0x68>
      }
      case Edge::kEdgeFalling:
      {
        SetEdgeFalling();
   14c98:	9803      	ldr	r0, [sp, #12]
   14c9a:	f000 f8eb 	bl	14e74 <Gpio::SetEdgeFalling()>
        break;
   14c9e:	e013      	b.n	14cc8 <Gpio::SetInterruptEdge(GpioInterface::Edge)+0x68>
      }
      case Edge::kEdgeBoth:
      {
        SetEdgeRising();
   14ca0:	9803      	ldr	r0, [sp, #12]
   14ca2:	f000 f8a9 	bl	14df8 <Gpio::SetEdgeRising()>
        SetEdgeFalling();
   14ca6:	9803      	ldr	r0, [sp, #12]
   14ca8:	f000 f8e4 	bl	14e74 <Gpio::SetEdgeFalling()>
        break;
   14cac:	e00c      	b.n	14cc8 <Gpio::SetInterruptEdge(GpioInterface::Edge)+0x68>
      }
      default:
      {
        LOG_WARNING(
   14cae:	f89d 300b 	ldrb.w	r3, [sp, #11]
   14cb2:	4618      	mov	r0, r3
   14cb4:	f7ff ffbc 	bl	14c30 <unsigned char util::Value<GpioInterface::Edge, unsigned char>(GpioInterface::Edge)>
   14cb8:	4603      	mov	r3, r0
   14cba:	9300      	str	r3, [sp, #0]
   14cbc:	23d2      	movs	r3, #210	; 0xd2
   14cbe:	4a07      	ldr	r2, [pc, #28]	; (14cdc <Gpio::SetInterruptEdge(GpioInterface::Edge)+0x7c>)
   14cc0:	4907      	ldr	r1, [pc, #28]	; (14ce0 <Gpio::SetInterruptEdge(GpioInterface::Edge)+0x80>)
   14cc2:	4808      	ldr	r0, [pc, #32]	; (14ce4 <Gpio::SetInterruptEdge(GpioInterface::Edge)+0x84>)
   14cc4:	f7ff fc76 	bl	145b4 <printf>
   14cc8:	4623      	mov	r3, r4
   14cca:	4619      	mov	r1, r3
   14ccc:	4802      	ldr	r0, [pc, #8]	; (14cd8 <Gpio::SetInterruptEdge(GpioInterface::Edge)+0x78>)
   14cce:	f7fe fa27 	bl	13120 <__cyg_profile_func_exit>
            "Edge %d cannot be used for External Interrupts."
            "Need to use a rising, falling, or both configuration.",
            util::Value(edge));
      }
    }
  }
   14cd2:	bf00      	nop
   14cd4:	b004      	add	sp, #16
   14cd6:	bd10      	pop	{r4, pc}
   14cd8:	00014c61 	.word	0x00014c61
   14cdc:	000194b4 	.word	0x000194b4
   14ce0:	00018e98 	.word	0x00018e98
   14ce4:	000183ec 	.word	0x000183ec

00014ce8 <Gpio::ClearInterruptEdge(GpioInterface::Edge)>:

  // Clears the seleted edge of the gpio interrupt from being triggered.
  void ClearInterruptEdge(Edge edge) override
   14ce8:	b510      	push	{r4, lr}
   14cea:	b084      	sub	sp, #16
   14cec:	4674      	mov	r4, lr
   14cee:	9003      	str	r0, [sp, #12]
   14cf0:	460b      	mov	r3, r1
   14cf2:	f88d 300b 	strb.w	r3, [sp, #11]
   14cf6:	4623      	mov	r3, r4
   14cf8:	4619      	mov	r1, r3
   14cfa:	4819      	ldr	r0, [pc, #100]	; (14d60 <Gpio::ClearInterruptEdge(GpioInterface::Edge)+0x78>)
   14cfc:	f7fe f9fc 	bl	130f8 <__cyg_profile_func_enter>
  {
    ValidPortCheck();
   14d00:	9803      	ldr	r0, [sp, #12]
   14d02:	f7ff feff 	bl	14b04 <Gpio::ValidPortCheck()>
    switch (edge)
   14d06:	f89d 300b 	ldrb.w	r3, [sp, #11]
   14d0a:	2b01      	cmp	r3, #1
   14d0c:	d008      	beq.n	14d20 <Gpio::ClearInterruptEdge(GpioInterface::Edge)+0x38>
   14d0e:	2b01      	cmp	r3, #1
   14d10:	d302      	bcc.n	14d18 <Gpio::ClearInterruptEdge(GpioInterface::Edge)+0x30>
   14d12:	2b02      	cmp	r3, #2
   14d14:	d008      	beq.n	14d28 <Gpio::ClearInterruptEdge(GpioInterface::Edge)+0x40>
   14d16:	e00e      	b.n	14d36 <Gpio::ClearInterruptEdge(GpioInterface::Edge)+0x4e>
    {
      case Edge::kEdgeRising:
      {
        ClearEdgeRising();
   14d18:	9803      	ldr	r0, [sp, #12]
   14d1a:	f000 f8e9 	bl	14ef0 <Gpio::ClearEdgeRising()>
        break;
   14d1e:	e017      	b.n	14d50 <Gpio::ClearInterruptEdge(GpioInterface::Edge)+0x68>
      }
      case Edge::kEdgeFalling:
      {
        ClearEdgeFalling();
   14d20:	9803      	ldr	r0, [sp, #12]
   14d22:	f000 f923 	bl	14f6c <Gpio::ClearEdgeFalling()>
        break;
   14d26:	e013      	b.n	14d50 <Gpio::ClearInterruptEdge(GpioInterface::Edge)+0x68>
      }
      case Edge::kEdgeBoth:
      {
        ClearEdgeRising();
   14d28:	9803      	ldr	r0, [sp, #12]
   14d2a:	f000 f8e1 	bl	14ef0 <Gpio::ClearEdgeRising()>
        ClearEdgeFalling();
   14d2e:	9803      	ldr	r0, [sp, #12]
   14d30:	f000 f91c 	bl	14f6c <Gpio::ClearEdgeFalling()>
        break;
   14d34:	e00c      	b.n	14d50 <Gpio::ClearInterruptEdge(GpioInterface::Edge)+0x68>
      }
      default:
      {
        LOG_WARNING(
   14d36:	f89d 300b 	ldrb.w	r3, [sp, #11]
   14d3a:	4618      	mov	r0, r3
   14d3c:	f7ff ff78 	bl	14c30 <unsigned char util::Value<GpioInterface::Edge, unsigned char>(GpioInterface::Edge)>
   14d40:	4603      	mov	r3, r0
   14d42:	9300      	str	r3, [sp, #0]
   14d44:	23f2      	movs	r3, #242	; 0xf2
   14d46:	4a07      	ldr	r2, [pc, #28]	; (14d64 <Gpio::ClearInterruptEdge(GpioInterface::Edge)+0x7c>)
   14d48:	4907      	ldr	r1, [pc, #28]	; (14d68 <Gpio::ClearInterruptEdge(GpioInterface::Edge)+0x80>)
   14d4a:	4808      	ldr	r0, [pc, #32]	; (14d6c <Gpio::ClearInterruptEdge(GpioInterface::Edge)+0x84>)
   14d4c:	f7ff fc32 	bl	145b4 <printf>
   14d50:	4623      	mov	r3, r4
   14d52:	4619      	mov	r1, r3
   14d54:	4802      	ldr	r0, [pc, #8]	; (14d60 <Gpio::ClearInterruptEdge(GpioInterface::Edge)+0x78>)
   14d56:	f7fe f9e3 	bl	13120 <__cyg_profile_func_exit>
            "Edge %d cannot be used for External Interrupts."
            "Need to use a rising, falling, or both configuration.",
           util::Value(edge));
      }
    }
  }
   14d5a:	bf00      	nop
   14d5c:	b004      	add	sp, #16
   14d5e:	bd10      	pop	{r4, pc}
   14d60:	00014ce9 	.word	0x00014ce9
   14d64:	0001945c 	.word	0x0001945c
   14d68:	00018ea4 	.word	0x00018ea4
   14d6c:	000183ec 	.word	0x000183ec

00014d70 <Gpio::AttachInterrupt(void (*)(), GpioInterface::Edge)>:

  // Assign the developer's ISR and sets the selected edge that the gpio
  // interrupt will be triggered on.
  void AttachInterrupt(IsrPointer function, Edge edge) override
   14d70:	b510      	push	{r4, lr}
   14d72:	b084      	sub	sp, #16
   14d74:	4674      	mov	r4, lr
   14d76:	9003      	str	r0, [sp, #12]
   14d78:	9102      	str	r1, [sp, #8]
   14d7a:	4613      	mov	r3, r2
   14d7c:	f88d 3007 	strb.w	r3, [sp, #7]
   14d80:	4623      	mov	r3, r4
   14d82:	4619      	mov	r1, r3
   14d84:	480b      	ldr	r0, [pc, #44]	; (14db4 <Gpio::AttachInterrupt(void (*)(), GpioInterface::Edge)+0x44>)
   14d86:	f7fe f9b7 	bl	130f8 <__cyg_profile_func_enter>
  {
    ValidPortCheck();
   14d8a:	9803      	ldr	r0, [sp, #12]
   14d8c:	f7ff feba 	bl	14b04 <Gpio::ValidPortCheck()>
    SetInterruptRoutine(function);
   14d90:	9902      	ldr	r1, [sp, #8]
   14d92:	9803      	ldr	r0, [sp, #12]
   14d94:	f7ff fef4 	bl	14b80 <Gpio::SetInterruptRoutine(void (*)())>
    SetInterruptEdge(edge);
   14d98:	f89d 3007 	ldrb.w	r3, [sp, #7]
   14d9c:	4619      	mov	r1, r3
   14d9e:	9803      	ldr	r0, [sp, #12]
   14da0:	f7ff ff5e 	bl	14c60 <Gpio::SetInterruptEdge(GpioInterface::Edge)>
   14da4:	4623      	mov	r3, r4
   14da6:	4619      	mov	r1, r3
   14da8:	4802      	ldr	r0, [pc, #8]	; (14db4 <Gpio::AttachInterrupt(void (*)(), GpioInterface::Edge)+0x44>)
   14daa:	f7fe f9b9 	bl	13120 <__cyg_profile_func_exit>
  }
   14dae:	bf00      	nop
   14db0:	b004      	add	sp, #16
   14db2:	bd10      	pop	{r4, pc}
   14db4:	00014d71 	.word	0x00014d71

00014db8 <Gpio::DetachInterrupt()>:

  // Removes the developer's ISR and clears the selected edge of the gpio
  // interrupt from being triggered.
  void DetachInterrupt() override
   14db8:	b510      	push	{r4, lr}
   14dba:	b082      	sub	sp, #8
   14dbc:	4674      	mov	r4, lr
   14dbe:	9001      	str	r0, [sp, #4]
   14dc0:	4623      	mov	r3, r4
   14dc2:	4619      	mov	r1, r3
   14dc4:	480b      	ldr	r0, [pc, #44]	; (14df4 <Gpio::DetachInterrupt()+0x3c>)
   14dc6:	f7fe f997 	bl	130f8 <__cyg_profile_func_enter>
  {
    ValidPortCheck();
   14dca:	9801      	ldr	r0, [sp, #4]
   14dcc:	f7ff fe9a 	bl	14b04 <Gpio::ValidPortCheck()>
    ClearInterruptRoutine();
   14dd0:	9801      	ldr	r0, [sp, #4]
   14dd2:	f7ff ff03 	bl	14bdc <Gpio::ClearInterruptRoutine()>
    ClearEdgeRising();
   14dd6:	9801      	ldr	r0, [sp, #4]
   14dd8:	f000 f88a 	bl	14ef0 <Gpio::ClearEdgeRising()>
    ClearEdgeFalling();
   14ddc:	9801      	ldr	r0, [sp, #4]
   14dde:	f000 f8c5 	bl	14f6c <Gpio::ClearEdgeFalling()>
   14de2:	4623      	mov	r3, r4
   14de4:	4619      	mov	r1, r3
   14de6:	4803      	ldr	r0, [pc, #12]	; (14df4 <Gpio::DetachInterrupt()+0x3c>)
   14de8:	f7fe f99a 	bl	13120 <__cyg_profile_func_exit>
  }
   14dec:	bf00      	nop
   14dee:	b002      	add	sp, #8
   14df0:	bd10      	pop	{r4, pc}
   14df2:	bf00      	nop
   14df4:	00014db9 	.word	0x00014db9

00014df8 <Gpio::SetEdgeRising()>:
    *interrupt[triggered_port].clear |= (1 << triggered_pin);
  }

 private:
  // Sets the gpio interrupt to trigger on a rising edge.
  void SetEdgeRising()
   14df8:	b530      	push	{r4, r5, lr}
   14dfa:	b083      	sub	sp, #12
   14dfc:	4675      	mov	r5, lr
   14dfe:	9001      	str	r0, [sp, #4]
   14e00:	462b      	mov	r3, r5
   14e02:	4619      	mov	r1, r3
   14e04:	4819      	ldr	r0, [pc, #100]	; (14e6c <Gpio::SetEdgeRising()+0x74>)
   14e06:	f7fe f977 	bl	130f8 <__cyg_profile_func_enter>
  {
    *interrupt[interupt_port_].enable_rising_edge |= (1 << pin_->GetPin());
   14e0a:	9b01      	ldr	r3, [sp, #4]
   14e0c:	689a      	ldr	r2, [r3, #8]
   14e0e:	9b01      	ldr	r3, [sp, #4]
   14e10:	689b      	ldr	r3, [r3, #8]
   14e12:	681b      	ldr	r3, [r3, #0]
   14e14:	3330      	adds	r3, #48	; 0x30
   14e16:	681b      	ldr	r3, [r3, #0]
   14e18:	4610      	mov	r0, r2
   14e1a:	4798      	blx	r3
   14e1c:	4603      	mov	r3, r0
   14e1e:	461a      	mov	r2, r3
   14e20:	2301      	movs	r3, #1
   14e22:	fa03 f002 	lsl.w	r0, r3, r2
   14e26:	9b01      	ldr	r3, [sp, #4]
   14e28:	791b      	ldrb	r3, [r3, #4]
   14e2a:	4619      	mov	r1, r3
   14e2c:	4a10      	ldr	r2, [pc, #64]	; (14e70 <Gpio::SetEdgeRising()+0x78>)
   14e2e:	460b      	mov	r3, r1
   14e30:	009b      	lsls	r3, r3, #2
   14e32:	440b      	add	r3, r1
   14e34:	009b      	lsls	r3, r3, #2
   14e36:	4413      	add	r3, r2
   14e38:	330c      	adds	r3, #12
   14e3a:	681b      	ldr	r3, [r3, #0]
   14e3c:	681a      	ldr	r2, [r3, #0]
   14e3e:	4604      	mov	r4, r0
   14e40:	9b01      	ldr	r3, [sp, #4]
   14e42:	791b      	ldrb	r3, [r3, #4]
   14e44:	4618      	mov	r0, r3
   14e46:	490a      	ldr	r1, [pc, #40]	; (14e70 <Gpio::SetEdgeRising()+0x78>)
   14e48:	4603      	mov	r3, r0
   14e4a:	009b      	lsls	r3, r3, #2
   14e4c:	4403      	add	r3, r0
   14e4e:	009b      	lsls	r3, r3, #2
   14e50:	440b      	add	r3, r1
   14e52:	330c      	adds	r3, #12
   14e54:	681b      	ldr	r3, [r3, #0]
   14e56:	4322      	orrs	r2, r4
   14e58:	601a      	str	r2, [r3, #0]
   14e5a:	462b      	mov	r3, r5
   14e5c:	4619      	mov	r1, r3
   14e5e:	4803      	ldr	r0, [pc, #12]	; (14e6c <Gpio::SetEdgeRising()+0x74>)
   14e60:	f7fe f95e 	bl	13120 <__cyg_profile_func_exit>
  }
   14e64:	bf00      	nop
   14e66:	b003      	add	sp, #12
   14e68:	bd30      	pop	{r4, r5, pc}
   14e6a:	bf00      	nop
   14e6c:	00014df9 	.word	0x00014df9
   14e70:	100001a0 	.word	0x100001a0

00014e74 <Gpio::SetEdgeFalling()>:

  // Sets the gpio interrupt to trigger on a falling edge.
  void SetEdgeFalling()
   14e74:	b530      	push	{r4, r5, lr}
   14e76:	b083      	sub	sp, #12
   14e78:	4675      	mov	r5, lr
   14e7a:	9001      	str	r0, [sp, #4]
   14e7c:	462b      	mov	r3, r5
   14e7e:	4619      	mov	r1, r3
   14e80:	4819      	ldr	r0, [pc, #100]	; (14ee8 <Gpio::SetEdgeFalling()+0x74>)
   14e82:	f7fe f939 	bl	130f8 <__cyg_profile_func_enter>
  {
    *interrupt[interupt_port_].enable_falling_edge |= (1 << pin_->GetPin());
   14e86:	9b01      	ldr	r3, [sp, #4]
   14e88:	689a      	ldr	r2, [r3, #8]
   14e8a:	9b01      	ldr	r3, [sp, #4]
   14e8c:	689b      	ldr	r3, [r3, #8]
   14e8e:	681b      	ldr	r3, [r3, #0]
   14e90:	3330      	adds	r3, #48	; 0x30
   14e92:	681b      	ldr	r3, [r3, #0]
   14e94:	4610      	mov	r0, r2
   14e96:	4798      	blx	r3
   14e98:	4603      	mov	r3, r0
   14e9a:	461a      	mov	r2, r3
   14e9c:	2301      	movs	r3, #1
   14e9e:	fa03 f002 	lsl.w	r0, r3, r2
   14ea2:	9b01      	ldr	r3, [sp, #4]
   14ea4:	791b      	ldrb	r3, [r3, #4]
   14ea6:	4619      	mov	r1, r3
   14ea8:	4a10      	ldr	r2, [pc, #64]	; (14eec <Gpio::SetEdgeFalling()+0x78>)
   14eaa:	460b      	mov	r3, r1
   14eac:	009b      	lsls	r3, r3, #2
   14eae:	440b      	add	r3, r1
   14eb0:	009b      	lsls	r3, r3, #2
   14eb2:	4413      	add	r3, r2
   14eb4:	3310      	adds	r3, #16
   14eb6:	681b      	ldr	r3, [r3, #0]
   14eb8:	681a      	ldr	r2, [r3, #0]
   14eba:	4604      	mov	r4, r0
   14ebc:	9b01      	ldr	r3, [sp, #4]
   14ebe:	791b      	ldrb	r3, [r3, #4]
   14ec0:	4618      	mov	r0, r3
   14ec2:	490a      	ldr	r1, [pc, #40]	; (14eec <Gpio::SetEdgeFalling()+0x78>)
   14ec4:	4603      	mov	r3, r0
   14ec6:	009b      	lsls	r3, r3, #2
   14ec8:	4403      	add	r3, r0
   14eca:	009b      	lsls	r3, r3, #2
   14ecc:	440b      	add	r3, r1
   14ece:	3310      	adds	r3, #16
   14ed0:	681b      	ldr	r3, [r3, #0]
   14ed2:	4322      	orrs	r2, r4
   14ed4:	601a      	str	r2, [r3, #0]
   14ed6:	462b      	mov	r3, r5
   14ed8:	4619      	mov	r1, r3
   14eda:	4803      	ldr	r0, [pc, #12]	; (14ee8 <Gpio::SetEdgeFalling()+0x74>)
   14edc:	f7fe f920 	bl	13120 <__cyg_profile_func_exit>
  }
   14ee0:	bf00      	nop
   14ee2:	b003      	add	sp, #12
   14ee4:	bd30      	pop	{r4, r5, pc}
   14ee6:	bf00      	nop
   14ee8:	00014e75 	.word	0x00014e75
   14eec:	100001a0 	.word	0x100001a0

00014ef0 <Gpio::ClearEdgeRising()>:

  // Clears the gpio interrupt to no longer trigger on a rising edge.
  void ClearEdgeRising()
   14ef0:	b530      	push	{r4, r5, lr}
   14ef2:	b083      	sub	sp, #12
   14ef4:	4675      	mov	r5, lr
   14ef6:	9001      	str	r0, [sp, #4]
   14ef8:	462b      	mov	r3, r5
   14efa:	4619      	mov	r1, r3
   14efc:	4819      	ldr	r0, [pc, #100]	; (14f64 <Gpio::ClearEdgeRising()+0x74>)
   14efe:	f7fe f8fb 	bl	130f8 <__cyg_profile_func_enter>
  {
    *interrupt[interupt_port_].enable_rising_edge &= ~(1 << pin_->GetPin());
   14f02:	9b01      	ldr	r3, [sp, #4]
   14f04:	689a      	ldr	r2, [r3, #8]
   14f06:	9b01      	ldr	r3, [sp, #4]
   14f08:	689b      	ldr	r3, [r3, #8]
   14f0a:	681b      	ldr	r3, [r3, #0]
   14f0c:	3330      	adds	r3, #48	; 0x30
   14f0e:	681b      	ldr	r3, [r3, #0]
   14f10:	4610      	mov	r0, r2
   14f12:	4798      	blx	r3
   14f14:	4603      	mov	r3, r0
   14f16:	461a      	mov	r2, r3
   14f18:	2301      	movs	r3, #1
   14f1a:	4093      	lsls	r3, r2
   14f1c:	43d8      	mvns	r0, r3
   14f1e:	9b01      	ldr	r3, [sp, #4]
   14f20:	791b      	ldrb	r3, [r3, #4]
   14f22:	4619      	mov	r1, r3
   14f24:	4a10      	ldr	r2, [pc, #64]	; (14f68 <Gpio::ClearEdgeRising()+0x78>)
   14f26:	460b      	mov	r3, r1
   14f28:	009b      	lsls	r3, r3, #2
   14f2a:	440b      	add	r3, r1
   14f2c:	009b      	lsls	r3, r3, #2
   14f2e:	4413      	add	r3, r2
   14f30:	330c      	adds	r3, #12
   14f32:	681b      	ldr	r3, [r3, #0]
   14f34:	681a      	ldr	r2, [r3, #0]
   14f36:	4604      	mov	r4, r0
   14f38:	9b01      	ldr	r3, [sp, #4]
   14f3a:	791b      	ldrb	r3, [r3, #4]
   14f3c:	4618      	mov	r0, r3
   14f3e:	490a      	ldr	r1, [pc, #40]	; (14f68 <Gpio::ClearEdgeRising()+0x78>)
   14f40:	4603      	mov	r3, r0
   14f42:	009b      	lsls	r3, r3, #2
   14f44:	4403      	add	r3, r0
   14f46:	009b      	lsls	r3, r3, #2
   14f48:	440b      	add	r3, r1
   14f4a:	330c      	adds	r3, #12
   14f4c:	681b      	ldr	r3, [r3, #0]
   14f4e:	4022      	ands	r2, r4
   14f50:	601a      	str	r2, [r3, #0]
   14f52:	462b      	mov	r3, r5
   14f54:	4619      	mov	r1, r3
   14f56:	4803      	ldr	r0, [pc, #12]	; (14f64 <Gpio::ClearEdgeRising()+0x74>)
   14f58:	f7fe f8e2 	bl	13120 <__cyg_profile_func_exit>
  }
   14f5c:	bf00      	nop
   14f5e:	b003      	add	sp, #12
   14f60:	bd30      	pop	{r4, r5, pc}
   14f62:	bf00      	nop
   14f64:	00014ef1 	.word	0x00014ef1
   14f68:	100001a0 	.word	0x100001a0

00014f6c <Gpio::ClearEdgeFalling()>:

  // Clears the gpio interrupt to no longer trigger on a falling edge.
  void ClearEdgeFalling()
   14f6c:	b530      	push	{r4, r5, lr}
   14f6e:	b083      	sub	sp, #12
   14f70:	4675      	mov	r5, lr
   14f72:	9001      	str	r0, [sp, #4]
   14f74:	462b      	mov	r3, r5
   14f76:	4619      	mov	r1, r3
   14f78:	4819      	ldr	r0, [pc, #100]	; (14fe0 <Gpio::ClearEdgeFalling()+0x74>)
   14f7a:	f7fe f8bd 	bl	130f8 <__cyg_profile_func_enter>
  {
    *interrupt[interupt_port_].enable_falling_edge &= ~(1 << pin_->GetPin());
   14f7e:	9b01      	ldr	r3, [sp, #4]
   14f80:	689a      	ldr	r2, [r3, #8]
   14f82:	9b01      	ldr	r3, [sp, #4]
   14f84:	689b      	ldr	r3, [r3, #8]
   14f86:	681b      	ldr	r3, [r3, #0]
   14f88:	3330      	adds	r3, #48	; 0x30
   14f8a:	681b      	ldr	r3, [r3, #0]
   14f8c:	4610      	mov	r0, r2
   14f8e:	4798      	blx	r3
   14f90:	4603      	mov	r3, r0
   14f92:	461a      	mov	r2, r3
   14f94:	2301      	movs	r3, #1
   14f96:	4093      	lsls	r3, r2
   14f98:	43d8      	mvns	r0, r3
   14f9a:	9b01      	ldr	r3, [sp, #4]
   14f9c:	791b      	ldrb	r3, [r3, #4]
   14f9e:	4619      	mov	r1, r3
   14fa0:	4a10      	ldr	r2, [pc, #64]	; (14fe4 <Gpio::ClearEdgeFalling()+0x78>)
   14fa2:	460b      	mov	r3, r1
   14fa4:	009b      	lsls	r3, r3, #2
   14fa6:	440b      	add	r3, r1
   14fa8:	009b      	lsls	r3, r3, #2
   14faa:	4413      	add	r3, r2
   14fac:	3310      	adds	r3, #16
   14fae:	681b      	ldr	r3, [r3, #0]
   14fb0:	681a      	ldr	r2, [r3, #0]
   14fb2:	4604      	mov	r4, r0
   14fb4:	9b01      	ldr	r3, [sp, #4]
   14fb6:	791b      	ldrb	r3, [r3, #4]
   14fb8:	4618      	mov	r0, r3
   14fba:	490a      	ldr	r1, [pc, #40]	; (14fe4 <Gpio::ClearEdgeFalling()+0x78>)
   14fbc:	4603      	mov	r3, r0
   14fbe:	009b      	lsls	r3, r3, #2
   14fc0:	4403      	add	r3, r0
   14fc2:	009b      	lsls	r3, r3, #2
   14fc4:	440b      	add	r3, r1
   14fc6:	3310      	adds	r3, #16
   14fc8:	681b      	ldr	r3, [r3, #0]
   14fca:	4022      	ands	r2, r4
   14fcc:	601a      	str	r2, [r3, #0]
   14fce:	462b      	mov	r3, r5
   14fd0:	4619      	mov	r1, r3
   14fd2:	4803      	ldr	r0, [pc, #12]	; (14fe0 <Gpio::ClearEdgeFalling()+0x74>)
   14fd4:	f7fe f8a4 	bl	13120 <__cyg_profile_func_exit>
  }
   14fd8:	bf00      	nop
   14fda:	b003      	add	sp, #12
   14fdc:	bd30      	pop	{r4, r5, pc}
   14fde:	bf00      	nop
   14fe0:	00014f6d 	.word	0x00014f6d
   14fe4:	100001a0 	.word	0x100001a0

00014fe8 <SystemControllerInterface::SystemControllerInterface()>:
class SystemControllerInterface
   14fe8:	b082      	sub	sp, #8
   14fea:	9001      	str	r0, [sp, #4]
   14fec:	4a03      	ldr	r2, [pc, #12]	; (14ffc <SystemControllerInterface::SystemControllerInterface()+0x14>)
   14fee:	9b01      	ldr	r3, [sp, #4]
   14ff0:	601a      	str	r2, [r3, #0]
   14ff2:	9b01      	ldr	r3, [sp, #4]
   14ff4:	4618      	mov	r0, r3
   14ff6:	b002      	add	sp, #8
   14ff8:	4770      	bx	lr
   14ffa:	bf00      	nop
   14ffc:	00019374 	.word	0x00019374

00015000 <Lpc40xxSystemController::Lpc40xxSystemController()>:
  constexpr Lpc40xxSystemController() {}
   15000:	b500      	push	{lr}
   15002:	b083      	sub	sp, #12
   15004:	9001      	str	r0, [sp, #4]
   15006:	9b01      	ldr	r3, [sp, #4]
   15008:	4618      	mov	r0, r3
   1500a:	f7ff ffed 	bl	14fe8 <SystemControllerInterface::SystemControllerInterface()>
   1500e:	4a04      	ldr	r2, [pc, #16]	; (15020 <Lpc40xxSystemController::Lpc40xxSystemController()+0x20>)
   15010:	9b01      	ldr	r3, [sp, #4]
   15012:	601a      	str	r2, [r3, #0]
   15014:	9b01      	ldr	r3, [sp, #4]
   15016:	4618      	mov	r0, r3
   15018:	b003      	add	sp, #12
   1501a:	f85d fb04 	ldr.w	pc, [sp], #4
   1501e:	bf00      	nop
   15020:	00017e00 	.word	0x00017e00

00015024 <int util::Value<Ssp::Peripheral, int>(Ssp::Peripheral)>:
constexpr Type Value(Enum enum_type_value)
   15024:	b530      	push	{r4, r5, lr}
   15026:	b083      	sub	sp, #12
   15028:	4675      	mov	r5, lr
   1502a:	9001      	str	r0, [sp, #4]
   1502c:	462b      	mov	r3, r5
   1502e:	4619      	mov	r1, r3
   15030:	4806      	ldr	r0, [pc, #24]	; (1504c <int util::Value<Ssp::Peripheral, int>(Ssp::Peripheral)+0x28>)
   15032:	f7fe f861 	bl	130f8 <__cyg_profile_func_enter>
  return static_cast<Type>(enum_type_value);
   15036:	9c01      	ldr	r4, [sp, #4]
   15038:	462b      	mov	r3, r5
   1503a:	4619      	mov	r1, r3
   1503c:	4803      	ldr	r0, [pc, #12]	; (1504c <int util::Value<Ssp::Peripheral, int>(Ssp::Peripheral)+0x28>)
   1503e:	f7fe f86f 	bl	13120 <__cyg_profile_func_exit>
   15042:	4623      	mov	r3, r4
}
   15044:	4618      	mov	r0, r3
   15046:	b003      	add	sp, #12
   15048:	bd30      	pop	{r4, r5, pc}
   1504a:	bf00      	nop
   1504c:	00015025 	.word	0x00015025

00015050 <SspInterface::SspInterface()>:
#include "L0_LowLevel/system_controller.hpp"
#include "L1_Drivers/pin.hpp"
#include "utility/bit.hpp"
#include "utility/enum.hpp"

class SspInterface
   15050:	b530      	push	{r4, r5, lr}
   15052:	b083      	sub	sp, #12
   15054:	4675      	mov	r5, lr
   15056:	9001      	str	r0, [sp, #4]
   15058:	462b      	mov	r3, r5
   1505a:	4619      	mov	r1, r3
   1505c:	4807      	ldr	r0, [pc, #28]	; (1507c <SspInterface::SspInterface()+0x2c>)
   1505e:	f7fe f84b 	bl	130f8 <__cyg_profile_func_enter>
   15062:	4a07      	ldr	r2, [pc, #28]	; (15080 <SspInterface::SspInterface()+0x30>)
   15064:	9b01      	ldr	r3, [sp, #4]
   15066:	601a      	str	r2, [r3, #0]
   15068:	9c01      	ldr	r4, [sp, #4]
   1506a:	462b      	mov	r3, r5
   1506c:	4619      	mov	r1, r3
   1506e:	4803      	ldr	r0, [pc, #12]	; (1507c <SspInterface::SspInterface()+0x2c>)
   15070:	f7fe f856 	bl	13120 <__cyg_profile_func_exit>
   15074:	4623      	mov	r3, r4
   15076:	4618      	mov	r0, r3
   15078:	b003      	add	sp, #12
   1507a:	bd30      	pop	{r4, r5, pc}
   1507c:	00015051 	.word	0x00015051
   15080:	0001934c 	.word	0x0001934c

00015084 <PinInterface::PinInterface(PinInterface const&)>:
class PinInterface
   15084:	b530      	push	{r4, r5, lr}
   15086:	b083      	sub	sp, #12
   15088:	4675      	mov	r5, lr
   1508a:	9001      	str	r0, [sp, #4]
   1508c:	9100      	str	r1, [sp, #0]
   1508e:	462b      	mov	r3, r5
   15090:	4619      	mov	r1, r3
   15092:	4808      	ldr	r0, [pc, #32]	; (150b4 <PinInterface::PinInterface(PinInterface const&)+0x30>)
   15094:	f7fe f830 	bl	130f8 <__cyg_profile_func_enter>
   15098:	4a07      	ldr	r2, [pc, #28]	; (150b8 <PinInterface::PinInterface(PinInterface const&)+0x34>)
   1509a:	9b01      	ldr	r3, [sp, #4]
   1509c:	601a      	str	r2, [r3, #0]
   1509e:	9c01      	ldr	r4, [sp, #4]
   150a0:	462b      	mov	r3, r5
   150a2:	4619      	mov	r1, r3
   150a4:	4803      	ldr	r0, [pc, #12]	; (150b4 <PinInterface::PinInterface(PinInterface const&)+0x30>)
   150a6:	f7fe f83b 	bl	13120 <__cyg_profile_func_exit>
   150aa:	4623      	mov	r3, r4
   150ac:	4618      	mov	r0, r3
   150ae:	b003      	add	sp, #12
   150b0:	bd30      	pop	{r4, r5, pc}
   150b2:	bf00      	nop
   150b4:	00015085 	.word	0x00015085
   150b8:	00019428 	.word	0x00019428

000150bc <Pin::Pin(Pin const&)>:
class Pin : public PinInterface
   150bc:	b530      	push	{r4, r5, lr}
   150be:	b083      	sub	sp, #12
   150c0:	4675      	mov	r5, lr
   150c2:	9001      	str	r0, [sp, #4]
   150c4:	9100      	str	r1, [sp, #0]
   150c6:	462b      	mov	r3, r5
   150c8:	4619      	mov	r1, r3
   150ca:	480f      	ldr	r0, [pc, #60]	; (15108 <Pin::Pin(Pin const&)+0x4c>)
   150cc:	f7fe f814 	bl	130f8 <__cyg_profile_func_enter>
   150d0:	9b01      	ldr	r3, [sp, #4]
   150d2:	9a00      	ldr	r2, [sp, #0]
   150d4:	4611      	mov	r1, r2
   150d6:	4618      	mov	r0, r3
   150d8:	f7ff ffd4 	bl	15084 <PinInterface::PinInterface(PinInterface const&)>
   150dc:	4a0b      	ldr	r2, [pc, #44]	; (1510c <Pin::Pin(Pin const&)+0x50>)
   150de:	9b01      	ldr	r3, [sp, #4]
   150e0:	601a      	str	r2, [r3, #0]
   150e2:	9b00      	ldr	r3, [sp, #0]
   150e4:	791a      	ldrb	r2, [r3, #4]
   150e6:	9b01      	ldr	r3, [sp, #4]
   150e8:	711a      	strb	r2, [r3, #4]
   150ea:	9b00      	ldr	r3, [sp, #0]
   150ec:	795a      	ldrb	r2, [r3, #5]
   150ee:	9b01      	ldr	r3, [sp, #4]
   150f0:	715a      	strb	r2, [r3, #5]
   150f2:	9c01      	ldr	r4, [sp, #4]
   150f4:	462b      	mov	r3, r5
   150f6:	4619      	mov	r1, r3
   150f8:	4803      	ldr	r0, [pc, #12]	; (15108 <Pin::Pin(Pin const&)+0x4c>)
   150fa:	f7fe f811 	bl	13120 <__cyg_profile_func_exit>
   150fe:	4623      	mov	r3, r4
   15100:	4618      	mov	r0, r3
   15102:	b003      	add	sp, #12
   15104:	bd30      	pop	{r4, r5, pc}
   15106:	bf00      	nop
   15108:	000150bd 	.word	0x000150bd
   1510c:	00017d8c 	.word	0x00017d8c

00015110 <Ssp::Ssp(Ssp::Peripheral)>:
        pssp_(Peripheral::kSsp0)
  {
  }

  /// User modified constructor. Must be followed by Set functions.
  explicit constexpr Ssp(Peripheral set_pssp)
   15110:	b530      	push	{r4, r5, lr}
   15112:	b083      	sub	sp, #12
   15114:	4675      	mov	r5, lr
   15116:	9001      	str	r0, [sp, #4]
   15118:	9100      	str	r1, [sp, #0]
   1511a:	462b      	mov	r3, r5
   1511c:	4619      	mov	r1, r3
   1511e:	4831      	ldr	r0, [pc, #196]	; (151e4 <Ssp::Ssp(Ssp::Peripheral)+0xd4>)
   15120:	f7fd ffea 	bl	130f8 <__cyg_profile_func_enter>
        miso_(&miso_pin_),
        sck_(&sck_pin_),
        mosi_pin_(kSspPinMatrix[util::Value(set_pssp)][MatrixLookup::kMosi]),
        miso_pin_(kSspPinMatrix[util::Value(set_pssp)][MatrixLookup::kMiso]),
        sck_pin_(kSspPinMatrix[util::Value(set_pssp)][MatrixLookup::kSck]),
        pssp_(set_pssp)
   15124:	9b01      	ldr	r3, [sp, #4]
   15126:	4618      	mov	r0, r3
   15128:	f7ff ff92 	bl	15050 <SspInterface::SspInterface()>
   1512c:	9b01      	ldr	r3, [sp, #4]
   1512e:	3304      	adds	r3, #4
   15130:	4618      	mov	r0, r3
   15132:	f7ff ff65 	bl	15000 <Lpc40xxSystemController::Lpc40xxSystemController()>
   15136:	4a2c      	ldr	r2, [pc, #176]	; (151e8 <Ssp::Ssp(Ssp::Peripheral)+0xd8>)
   15138:	9b01      	ldr	r3, [sp, #4]
   1513a:	601a      	str	r2, [r3, #0]
   1513c:	4a2b      	ldr	r2, [pc, #172]	; (151ec <Ssp::Ssp(Ssp::Peripheral)+0xdc>)
   1513e:	9b01      	ldr	r3, [sp, #4]
   15140:	605a      	str	r2, [r3, #4]
   15142:	9b01      	ldr	r3, [sp, #4]
   15144:	f103 0214 	add.w	r2, r3, #20
   15148:	9b01      	ldr	r3, [sp, #4]
   1514a:	609a      	str	r2, [r3, #8]
   1514c:	9b01      	ldr	r3, [sp, #4]
   1514e:	f103 021c 	add.w	r2, r3, #28
   15152:	9b01      	ldr	r3, [sp, #4]
   15154:	60da      	str	r2, [r3, #12]
   15156:	9b01      	ldr	r3, [sp, #4]
   15158:	f103 0224 	add.w	r2, r3, #36	; 0x24
   1515c:	9b01      	ldr	r3, [sp, #4]
   1515e:	611a      	str	r2, [r3, #16]
   15160:	9b01      	ldr	r3, [sp, #4]
   15162:	f103 0414 	add.w	r4, r3, #20
        mosi_pin_(kSspPinMatrix[util::Value(set_pssp)][MatrixLookup::kMosi]),
   15166:	9800      	ldr	r0, [sp, #0]
   15168:	f7ff ff5c 	bl	15024 <int util::Value<Ssp::Peripheral, int>(Ssp::Peripheral)>
   1516c:	4602      	mov	r2, r0
        pssp_(set_pssp)
   1516e:	4613      	mov	r3, r2
   15170:	005b      	lsls	r3, r3, #1
   15172:	4413      	add	r3, r2
   15174:	00db      	lsls	r3, r3, #3
   15176:	4a1e      	ldr	r2, [pc, #120]	; (151f0 <Ssp::Ssp(Ssp::Peripheral)+0xe0>)
   15178:	4413      	add	r3, r2
   1517a:	4619      	mov	r1, r3
   1517c:	4620      	mov	r0, r4
   1517e:	f7ff ff9d 	bl	150bc <Pin::Pin(Pin const&)>
   15182:	9b01      	ldr	r3, [sp, #4]
   15184:	f103 041c 	add.w	r4, r3, #28
        miso_pin_(kSspPinMatrix[util::Value(set_pssp)][MatrixLookup::kMiso]),
   15188:	9800      	ldr	r0, [sp, #0]
   1518a:	f7ff ff4b 	bl	15024 <int util::Value<Ssp::Peripheral, int>(Ssp::Peripheral)>
   1518e:	4602      	mov	r2, r0
        pssp_(set_pssp)
   15190:	4613      	mov	r3, r2
   15192:	005b      	lsls	r3, r3, #1
   15194:	4413      	add	r3, r2
   15196:	00db      	lsls	r3, r3, #3
   15198:	3308      	adds	r3, #8
   1519a:	4a15      	ldr	r2, [pc, #84]	; (151f0 <Ssp::Ssp(Ssp::Peripheral)+0xe0>)
   1519c:	4413      	add	r3, r2
   1519e:	4619      	mov	r1, r3
   151a0:	4620      	mov	r0, r4
   151a2:	f7ff ff8b 	bl	150bc <Pin::Pin(Pin const&)>
   151a6:	9b01      	ldr	r3, [sp, #4]
   151a8:	f103 0424 	add.w	r4, r3, #36	; 0x24
        sck_pin_(kSspPinMatrix[util::Value(set_pssp)][MatrixLookup::kSck]),
   151ac:	9800      	ldr	r0, [sp, #0]
   151ae:	f7ff ff39 	bl	15024 <int util::Value<Ssp::Peripheral, int>(Ssp::Peripheral)>
   151b2:	4602      	mov	r2, r0
        pssp_(set_pssp)
   151b4:	4613      	mov	r3, r2
   151b6:	005b      	lsls	r3, r3, #1
   151b8:	4413      	add	r3, r2
   151ba:	00db      	lsls	r3, r3, #3
   151bc:	3310      	adds	r3, #16
   151be:	4a0c      	ldr	r2, [pc, #48]	; (151f0 <Ssp::Ssp(Ssp::Peripheral)+0xe0>)
   151c0:	4413      	add	r3, r2
   151c2:	4619      	mov	r1, r3
   151c4:	4620      	mov	r0, r4
   151c6:	f7ff ff79 	bl	150bc <Pin::Pin(Pin const&)>
   151ca:	9b01      	ldr	r3, [sp, #4]
   151cc:	9a00      	ldr	r2, [sp, #0]
   151ce:	62da      	str	r2, [r3, #44]	; 0x2c
  {
  }
   151d0:	9c01      	ldr	r4, [sp, #4]
   151d2:	462b      	mov	r3, r5
   151d4:	4619      	mov	r1, r3
   151d6:	4803      	ldr	r0, [pc, #12]	; (151e4 <Ssp::Ssp(Ssp::Peripheral)+0xd4>)
   151d8:	f7fd ffa2 	bl	13120 <__cyg_profile_func_exit>
   151dc:	4623      	mov	r3, r4
   151de:	4618      	mov	r0, r3
   151e0:	b003      	add	sp, #12
   151e2:	bd30      	pop	{r4, r5, pc}
   151e4:	00015111 	.word	0x00015111
   151e8:	00019300 	.word	0x00019300
   151ec:	00019328 	.word	0x00019328
   151f0:	00018eb4 	.word	0x00018eb4

000151f4 <Ssp::Initialize()>:
  }

  /// Powers on the peripheral, sets the peripheral clock, format, and data
  /// size, and enables the SSP pins for communication see and more.
  /// See page 601 of user manual UM10562 LPC408x/407x for more details.
  void Initialize() override
   151f4:	b570      	push	{r4, r5, r6, lr}
   151f6:	b086      	sub	sp, #24
   151f8:	4676      	mov	r6, lr
   151fa:	9001      	str	r0, [sp, #4]
   151fc:	4633      	mov	r3, r6
   151fe:	4619      	mov	r1, r3
   15200:	4830      	ldr	r0, [pc, #192]	; (152c4 <Ssp::Initialize()+0xd0>)
   15202:	f7fd ff79 	bl	130f8 <__cyg_profile_func_enter>
  {
    uint32_t pssp = util::Value(pssp_);
   15206:	9b01      	ldr	r3, [sp, #4]
   15208:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1520a:	4618      	mov	r0, r3
   1520c:	f7ff ff0a 	bl	15024 <int util::Value<Ssp::Peripheral, int>(Ssp::Peripheral)>
   15210:	4603      	mov	r3, r0
   15212:	9305      	str	r3, [sp, #20]
    // Power up peripheral
    PowerUpPeripheral(kPowerBit[pssp]);
   15214:	9b01      	ldr	r3, [sp, #4]
   15216:	1d18      	adds	r0, r3, #4
   15218:	9b01      	ldr	r3, [sp, #4]
   1521a:	685b      	ldr	r3, [r3, #4]
   1521c:	3314      	adds	r3, #20
   1521e:	681b      	ldr	r3, [r3, #0]
   15220:	9a05      	ldr	r2, [sp, #20]
   15222:	0092      	lsls	r2, r2, #2
   15224:	4928      	ldr	r1, [pc, #160]	; (152c8 <Ssp::Initialize()+0xd4>)
   15226:	440a      	add	r2, r1
   15228:	4611      	mov	r1, r2
   1522a:	4798      	blx	r3
    // Enable SSP pins
    mosi_->SetPinFunction(kPinSelect[pssp]);
   1522c:	9b01      	ldr	r3, [sp, #4]
   1522e:	6898      	ldr	r0, [r3, #8]
   15230:	9b01      	ldr	r3, [sp, #4]
   15232:	689b      	ldr	r3, [r3, #8]
   15234:	681b      	ldr	r3, [r3, #0]
   15236:	681b      	ldr	r3, [r3, #0]
   15238:	4924      	ldr	r1, [pc, #144]	; (152cc <Ssp::Initialize()+0xd8>)
   1523a:	9a05      	ldr	r2, [sp, #20]
   1523c:	440a      	add	r2, r1
   1523e:	7812      	ldrb	r2, [r2, #0]
   15240:	4611      	mov	r1, r2
   15242:	4798      	blx	r3
    miso_->SetPinFunction(kPinSelect[pssp]);
   15244:	9b01      	ldr	r3, [sp, #4]
   15246:	68d8      	ldr	r0, [r3, #12]
   15248:	9b01      	ldr	r3, [sp, #4]
   1524a:	68db      	ldr	r3, [r3, #12]
   1524c:	681b      	ldr	r3, [r3, #0]
   1524e:	681b      	ldr	r3, [r3, #0]
   15250:	491e      	ldr	r1, [pc, #120]	; (152cc <Ssp::Initialize()+0xd8>)
   15252:	9a05      	ldr	r2, [sp, #20]
   15254:	440a      	add	r2, r1
   15256:	7812      	ldrb	r2, [r2, #0]
   15258:	4611      	mov	r1, r2
   1525a:	4798      	blx	r3
    sck_->SetPinFunction(kPinSelect[pssp]);
   1525c:	9b01      	ldr	r3, [sp, #4]
   1525e:	6918      	ldr	r0, [r3, #16]
   15260:	9b01      	ldr	r3, [sp, #4]
   15262:	691b      	ldr	r3, [r3, #16]
   15264:	681b      	ldr	r3, [r3, #0]
   15266:	681b      	ldr	r3, [r3, #0]
   15268:	4918      	ldr	r1, [pc, #96]	; (152cc <Ssp::Initialize()+0xd8>)
   1526a:	9a05      	ldr	r2, [sp, #20]
   1526c:	440a      	add	r2, r1
   1526e:	7812      	ldrb	r2, [r2, #0]
   15270:	4611      	mov	r1, r2
   15272:	4798      	blx	r3
    // Enable SSP
    ssp_registers[pssp]->CR1 = bit::Set(ssp_registers[pssp]->CR1, kSspEnable);
   15274:	4a16      	ldr	r2, [pc, #88]	; (152d0 <Ssp::Initialize()+0xdc>)
   15276:	9b05      	ldr	r3, [sp, #20]
   15278:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1527c:	685b      	ldr	r3, [r3, #4]
   1527e:	4914      	ldr	r1, [pc, #80]	; (152d0 <Ssp::Initialize()+0xdc>)
   15280:	9a05      	ldr	r2, [sp, #20]
   15282:	f851 4022 	ldr.w	r4, [r1, r2, lsl #2]
   15286:	9304      	str	r3, [sp, #16]
   15288:	2301      	movs	r3, #1
   1528a:	9303      	str	r3, [sp, #12]
   1528c:	4633      	mov	r3, r6
   1528e:	4619      	mov	r1, r3
   15290:	4810      	ldr	r0, [pc, #64]	; (152d4 <Ssp::Initialize()+0xe0>)
   15292:	f7fd ff31 	bl	130f8 <__cyg_profile_func_enter>
[[gnu::always_inline]] [[nodiscard]]
constexpr T Set(T target, uint32_t position)
{
  static_assert(std::numeric_limits<T>::is_integer,
                "Set only accepts intergers.");
  return target | (1 << position);
   15296:	2201      	movs	r2, #1
   15298:	9b03      	ldr	r3, [sp, #12]
   1529a:	fa02 f303 	lsl.w	r3, r2, r3
   1529e:	461a      	mov	r2, r3
   152a0:	9b04      	ldr	r3, [sp, #16]
   152a2:	ea42 0503 	orr.w	r5, r2, r3
   152a6:	4633      	mov	r3, r6
   152a8:	4619      	mov	r1, r3
   152aa:	480a      	ldr	r0, [pc, #40]	; (152d4 <Ssp::Initialize()+0xe0>)
   152ac:	f7fd ff38 	bl	13120 <__cyg_profile_func_exit>
   152b0:	6065      	str	r5, [r4, #4]
   152b2:	4633      	mov	r3, r6
   152b4:	4619      	mov	r1, r3
   152b6:	4803      	ldr	r0, [pc, #12]	; (152c4 <Ssp::Initialize()+0xd0>)
   152b8:	f7fd ff32 	bl	13120 <__cyg_profile_func_exit>
  }
   152bc:	bf00      	nop
   152be:	b006      	add	sp, #24
   152c0:	bd70      	pop	{r4, r5, r6, pc}
   152c2:	bf00      	nop
   152c4:	000151f5 	.word	0x000151f5
   152c8:	00018efc 	.word	0x00018efc
   152cc:	00018eb0 	.word	0x00018eb0
   152d0:	100001c8 	.word	0x100001c8
   152d4:	00016e55 	.word	0x00016e55

000152d8 <Ssp::IsTransferRegBusy()>:

  /// Checks if the SSP controller is idle.
  /// @returns true if the controller is sending or receiving a data frame and
  /// false if it is idle.
  bool IsTransferRegBusy() override
   152d8:	b530      	push	{r4, r5, lr}
   152da:	b085      	sub	sp, #20
   152dc:	4675      	mov	r5, lr
   152de:	9001      	str	r0, [sp, #4]
   152e0:	462b      	mov	r3, r5
   152e2:	4619      	mov	r1, r3
   152e4:	4817      	ldr	r0, [pc, #92]	; (15344 <Ssp::IsTransferRegBusy()+0x6c>)
   152e6:	f7fd ff07 	bl	130f8 <__cyg_profile_func_enter>
  {
    return (bit::Read(ssp_registers[util::Value(pssp_)]->SR, kDataLineIdleBit));
   152ea:	9b01      	ldr	r3, [sp, #4]
   152ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   152ee:	4618      	mov	r0, r3
   152f0:	f7ff fe98 	bl	15024 <int util::Value<Ssp::Peripheral, int>(Ssp::Peripheral)>
   152f4:	4602      	mov	r2, r0
   152f6:	4b14      	ldr	r3, [pc, #80]	; (15348 <Ssp::IsTransferRegBusy()+0x70>)
   152f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   152fc:	68db      	ldr	r3, [r3, #12]
   152fe:	9303      	str	r3, [sp, #12]
   15300:	2304      	movs	r3, #4
   15302:	9302      	str	r3, [sp, #8]
   15304:	462b      	mov	r3, r5
   15306:	4619      	mov	r1, r3
   15308:	4810      	ldr	r0, [pc, #64]	; (1534c <Ssp::IsTransferRegBusy()+0x74>)
   1530a:	f7fd fef5 	bl	130f8 <__cyg_profile_func_enter>
[[gnu::always_inline]][[nodiscard]] constexpr bool Read(T target,
                                                        uint32_t position)
{
  static_assert(std::numeric_limits<T>::is_integer,
                "Read only accepts intergers.");
  return static_cast<bool>(target & (1 << position));
   1530e:	2201      	movs	r2, #1
   15310:	9b02      	ldr	r3, [sp, #8]
   15312:	fa02 f303 	lsl.w	r3, r2, r3
   15316:	461a      	mov	r2, r3
   15318:	9b03      	ldr	r3, [sp, #12]
   1531a:	4013      	ands	r3, r2
   1531c:	2b00      	cmp	r3, #0
   1531e:	bf14      	ite	ne
   15320:	2301      	movne	r3, #1
   15322:	2300      	moveq	r3, #0
   15324:	b2dc      	uxtb	r4, r3
   15326:	462b      	mov	r3, r5
   15328:	4619      	mov	r1, r3
   1532a:	4808      	ldr	r0, [pc, #32]	; (1534c <Ssp::IsTransferRegBusy()+0x74>)
   1532c:	f7fd fef8 	bl	13120 <__cyg_profile_func_exit>
   15330:	462b      	mov	r3, r5
   15332:	4619      	mov	r1, r3
   15334:	4803      	ldr	r0, [pc, #12]	; (15344 <Ssp::IsTransferRegBusy()+0x6c>)
   15336:	f7fd fef3 	bl	13120 <__cyg_profile_func_exit>
   1533a:	4623      	mov	r3, r4
  }
   1533c:	4618      	mov	r0, r3
   1533e:	b005      	add	sp, #20
   15340:	bd30      	pop	{r4, r5, pc}
   15342:	bf00      	nop
   15344:	000152d9 	.word	0x000152d9
   15348:	100001c8 	.word	0x100001c8
   1534c:	00016e91 	.word	0x00016e91

00015350 <Ssp::Transfer(unsigned short)>:
  /// data register. This functions for both transmitting and
  /// receiving data. It is recommended this region be protected
  /// by a mutex.
  /// @param data - information to be placed in data register
  /// @return - received data from external device
  uint16_t Transfer(uint16_t data) override
   15350:	b530      	push	{r4, r5, lr}
   15352:	b085      	sub	sp, #20
   15354:	4675      	mov	r5, lr
   15356:	9001      	str	r0, [sp, #4]
   15358:	460b      	mov	r3, r1
   1535a:	f8ad 3002 	strh.w	r3, [sp, #2]
   1535e:	462b      	mov	r3, r5
   15360:	4619      	mov	r1, r3
   15362:	4814      	ldr	r0, [pc, #80]	; (153b4 <Ssp::Transfer(unsigned short)+0x64>)
   15364:	f7fd fec8 	bl	130f8 <__cyg_profile_func_enter>
  {
    uint32_t pssp = util::Value(pssp_);
   15368:	9b01      	ldr	r3, [sp, #4]
   1536a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1536c:	4618      	mov	r0, r3
   1536e:	f7ff fe59 	bl	15024 <int util::Value<Ssp::Peripheral, int>(Ssp::Peripheral)>
   15372:	4603      	mov	r3, r0
   15374:	9303      	str	r3, [sp, #12]

    ssp_registers[pssp]->DR = data;
   15376:	4a10      	ldr	r2, [pc, #64]	; (153b8 <Ssp::Transfer(unsigned short)+0x68>)
   15378:	9b03      	ldr	r3, [sp, #12]
   1537a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1537e:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   15382:	609a      	str	r2, [r3, #8]
    while (IsTransferRegBusy())
   15384:	9801      	ldr	r0, [sp, #4]
   15386:	f7ff ffa7 	bl	152d8 <Ssp::IsTransferRegBusy()>
   1538a:	4603      	mov	r3, r0
   1538c:	2b00      	cmp	r3, #0
   1538e:	d001      	beq.n	15394 <Ssp::Transfer(unsigned short)+0x44>
    {
      continue;
   15390:	bf00      	nop
    while (IsTransferRegBusy())
   15392:	e7f7      	b.n	15384 <Ssp::Transfer(unsigned short)+0x34>
    }
    return static_cast<uint16_t>(ssp_registers[pssp]->DR);
   15394:	4a08      	ldr	r2, [pc, #32]	; (153b8 <Ssp::Transfer(unsigned short)+0x68>)
   15396:	9b03      	ldr	r3, [sp, #12]
   15398:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1539c:	689b      	ldr	r3, [r3, #8]
   1539e:	b29c      	uxth	r4, r3
   153a0:	462b      	mov	r3, r5
   153a2:	4619      	mov	r1, r3
   153a4:	4803      	ldr	r0, [pc, #12]	; (153b4 <Ssp::Transfer(unsigned short)+0x64>)
   153a6:	f7fd febb 	bl	13120 <__cyg_profile_func_exit>
   153aa:	4623      	mov	r3, r4
  }
   153ac:	4618      	mov	r0, r3
   153ae:	b005      	add	sp, #20
   153b0:	bd30      	pop	{r4, r5, pc}
   153b2:	bf00      	nop
   153b4:	00015351 	.word	0x00015351
   153b8:	100001c8 	.word	0x100001c8

000153bc <Ssp::SetSpiMasterDefault()>:

  /// Sets up SSP peripheral as SPI master
  void SetSpiMasterDefault() override
   153bc:	b510      	push	{r4, lr}
   153be:	b086      	sub	sp, #24
   153c0:	4674      	mov	r4, lr
   153c2:	9003      	str	r0, [sp, #12]
   153c4:	4623      	mov	r3, r4
   153c6:	4619      	mov	r1, r3
   153c8:	4812      	ldr	r0, [pc, #72]	; (15414 <Ssp::SetSpiMasterDefault()+0x58>)
   153ca:	f7fd fe95 	bl	130f8 <__cyg_profile_func_enter>
  {
    constexpr bool kHighPolarity  = 1;
   153ce:	2301      	movs	r3, #1
   153d0:	f88d 3017 	strb.w	r3, [sp, #23]
    constexpr bool kPhase0        = 0;
   153d4:	2300      	movs	r3, #0
   153d6:	f88d 3016 	strb.w	r3, [sp, #22]
    constexpr uint8_t kScrDivider = 0;
   153da:	2300      	movs	r3, #0
   153dc:	f88d 3015 	strb.w	r3, [sp, #21]
    constexpr uint8_t kPrescaler  = SJ2_SYSTEM_CLOCK_RATE_MHZ;
   153e0:	2330      	movs	r3, #48	; 0x30
   153e2:	f88d 3014 	strb.w	r3, [sp, #20]

    SetPeripheralMode(kMaster, kSpi, kEight);
   153e6:	2307      	movs	r3, #7
   153e8:	2200      	movs	r2, #0
   153ea:	2100      	movs	r1, #0
   153ec:	9803      	ldr	r0, [sp, #12]
   153ee:	f000 f85b 	bl	154a8 <Ssp::SetPeripheralMode(SspInterface::MasterSlaveMode, SspInterface::FrameMode, SspInterface::DataSize)>
    SetClock(kHighPolarity, kPhase0, kScrDivider, kPrescaler);
   153f2:	2330      	movs	r3, #48	; 0x30
   153f4:	9300      	str	r3, [sp, #0]
   153f6:	2300      	movs	r3, #0
   153f8:	2200      	movs	r2, #0
   153fa:	2101      	movs	r1, #1
   153fc:	9803      	ldr	r0, [sp, #12]
   153fe:	f000 fa09 	bl	15814 <Ssp::SetClock(bool, bool, unsigned char, unsigned char)>
   15402:	4623      	mov	r3, r4
   15404:	4619      	mov	r1, r3
   15406:	4803      	ldr	r0, [pc, #12]	; (15414 <Ssp::SetSpiMasterDefault()+0x58>)
   15408:	f7fd fe8a 	bl	13120 <__cyg_profile_func_exit>
  }
   1540c:	bf00      	nop
   1540e:	b006      	add	sp, #24
   15410:	bd10      	pop	{r4, pc}
   15412:	bf00      	nop
   15414:	000153bd 	.word	0x000153bd

00015418 <unsigned char util::Value<SspInterface::DataSize, unsigned char>(SspInterface::DataSize)>:
constexpr Type Value(Enum enum_type_value)
   15418:	b530      	push	{r4, r5, lr}
   1541a:	b083      	sub	sp, #12
   1541c:	4675      	mov	r5, lr
   1541e:	4603      	mov	r3, r0
   15420:	f88d 3007 	strb.w	r3, [sp, #7]
   15424:	462b      	mov	r3, r5
   15426:	4619      	mov	r1, r3
   15428:	4806      	ldr	r0, [pc, #24]	; (15444 <unsigned char util::Value<SspInterface::DataSize, unsigned char>(SspInterface::DataSize)+0x2c>)
   1542a:	f7fd fe65 	bl	130f8 <__cyg_profile_func_enter>
  return static_cast<Type>(enum_type_value);
   1542e:	f89d 4007 	ldrb.w	r4, [sp, #7]
   15432:	462b      	mov	r3, r5
   15434:	4619      	mov	r1, r3
   15436:	4803      	ldr	r0, [pc, #12]	; (15444 <unsigned char util::Value<SspInterface::DataSize, unsigned char>(SspInterface::DataSize)+0x2c>)
   15438:	f7fd fe72 	bl	13120 <__cyg_profile_func_exit>
   1543c:	4623      	mov	r3, r4
}
   1543e:	4618      	mov	r0, r3
   15440:	b003      	add	sp, #12
   15442:	bd30      	pop	{r4, r5, pc}
   15444:	00015419 	.word	0x00015419

00015448 <unsigned char util::Value<SspInterface::FrameMode, unsigned char>(SspInterface::FrameMode)>:
constexpr Type Value(Enum enum_type_value)
   15448:	b530      	push	{r4, r5, lr}
   1544a:	b083      	sub	sp, #12
   1544c:	4675      	mov	r5, lr
   1544e:	4603      	mov	r3, r0
   15450:	f88d 3007 	strb.w	r3, [sp, #7]
   15454:	462b      	mov	r3, r5
   15456:	4619      	mov	r1, r3
   15458:	4806      	ldr	r0, [pc, #24]	; (15474 <unsigned char util::Value<SspInterface::FrameMode, unsigned char>(SspInterface::FrameMode)+0x2c>)
   1545a:	f7fd fe4d 	bl	130f8 <__cyg_profile_func_enter>
  return static_cast<Type>(enum_type_value);
   1545e:	f89d 4007 	ldrb.w	r4, [sp, #7]
   15462:	462b      	mov	r3, r5
   15464:	4619      	mov	r1, r3
   15466:	4803      	ldr	r0, [pc, #12]	; (15474 <unsigned char util::Value<SspInterface::FrameMode, unsigned char>(SspInterface::FrameMode)+0x2c>)
   15468:	f7fd fe5a 	bl	13120 <__cyg_profile_func_exit>
   1546c:	4623      	mov	r3, r4
}
   1546e:	4618      	mov	r0, r3
   15470:	b003      	add	sp, #12
   15472:	bd30      	pop	{r4, r5, pc}
   15474:	00015449 	.word	0x00015449

00015478 <unsigned char util::Value<SspInterface::MasterSlaveMode, unsigned char>(SspInterface::MasterSlaveMode)>:
constexpr Type Value(Enum enum_type_value)
   15478:	b530      	push	{r4, r5, lr}
   1547a:	b083      	sub	sp, #12
   1547c:	4675      	mov	r5, lr
   1547e:	4603      	mov	r3, r0
   15480:	f88d 3007 	strb.w	r3, [sp, #7]
   15484:	462b      	mov	r3, r5
   15486:	4619      	mov	r1, r3
   15488:	4806      	ldr	r0, [pc, #24]	; (154a4 <unsigned char util::Value<SspInterface::MasterSlaveMode, unsigned char>(SspInterface::MasterSlaveMode)+0x2c>)
   1548a:	f7fd fe35 	bl	130f8 <__cyg_profile_func_enter>
  return static_cast<Type>(enum_type_value);
   1548e:	f89d 4007 	ldrb.w	r4, [sp, #7]
   15492:	462b      	mov	r3, r5
   15494:	4619      	mov	r1, r3
   15496:	4803      	ldr	r0, [pc, #12]	; (154a4 <unsigned char util::Value<SspInterface::MasterSlaveMode, unsigned char>(SspInterface::MasterSlaveMode)+0x2c>)
   15498:	f7fd fe42 	bl	13120 <__cyg_profile_func_exit>
   1549c:	4623      	mov	r3, r4
}
   1549e:	4618      	mov	r0, r3
   154a0:	b003      	add	sp, #12
   154a2:	bd30      	pop	{r4, r5, pc}
   154a4:	00015479 	.word	0x00015479

000154a8 <Ssp::SetPeripheralMode(SspInterface::MasterSlaveMode, SspInterface::FrameMode, SspInterface::DataSize)>:

  /// Sets the various modes for the Peripheral
  /// @param mode - master or slave mode
  /// @param frame - format for Peripheral data to use
  /// @param size - number of bits per frame
  void SetPeripheralMode(MasterSlaveMode mode, FrameMode frame,
   154a8:	b570      	push	{r4, r5, r6, lr}
   154aa:	b098      	sub	sp, #96	; 0x60
   154ac:	4674      	mov	r4, lr
   154ae:	9001      	str	r0, [sp, #4]
   154b0:	4608      	mov	r0, r1
   154b2:	4611      	mov	r1, r2
   154b4:	461a      	mov	r2, r3
   154b6:	4603      	mov	r3, r0
   154b8:	f88d 3003 	strb.w	r3, [sp, #3]
   154bc:	460b      	mov	r3, r1
   154be:	f88d 3002 	strb.w	r3, [sp, #2]
   154c2:	4613      	mov	r3, r2
   154c4:	f88d 3001 	strb.w	r3, [sp, #1]
   154c8:	4623      	mov	r3, r4
   154ca:	4619      	mov	r1, r3
   154cc:	4875      	ldr	r0, [pc, #468]	; (156a4 <Ssp::SetPeripheralMode(SspInterface::MasterSlaveMode, SspInterface::FrameMode, SspInterface::DataSize)+0x1fc>)
   154ce:	f7fd fe13 	bl	130f8 <__cyg_profile_func_enter>
                         DataSize size) override
  {
    uint32_t pssp = util::Value(pssp_);
   154d2:	9b01      	ldr	r3, [sp, #4]
   154d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   154d6:	4618      	mov	r0, r3
   154d8:	f7ff fda4 	bl	15024 <int util::Value<Ssp::Peripheral, int>(Ssp::Peripheral)>
   154dc:	4603      	mov	r3, r0
   154de:	9317      	str	r3, [sp, #92]	; 0x5c
    // TODO(#371): Find a better alternative to powering up the peripheral for
    // every method.
    Ssp::PowerUpPeripheral(Ssp::kPowerBit[pssp]);
   154e0:	9b01      	ldr	r3, [sp, #4]
   154e2:	1d18      	adds	r0, r3, #4
   154e4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   154e6:	009b      	lsls	r3, r3, #2
   154e8:	4a6f      	ldr	r2, [pc, #444]	; (156a8 <Ssp::SetPeripheralMode(SspInterface::MasterSlaveMode, SspInterface::FrameMode, SspInterface::DataSize)+0x200>)
   154ea:	4413      	add	r3, r2
   154ec:	4619      	mov	r1, r3
   154ee:	f7fb fd1f 	bl	10f30 <Lpc40xxSystemController::PowerUpPeripheral(SystemControllerInterface::PeripheralID const&)>
    if (frame == kMicro)
   154f2:	f89d 3002 	ldrb.w	r3, [sp, #2]
   154f6:	2b02      	cmp	r3, #2
   154f8:	d102      	bne.n	15500 <Ssp::SetPeripheralMode(SspInterface::MasterSlaveMode, SspInterface::FrameMode, SspInterface::DataSize)+0x58>
    {
      size = kEight;
   154fa:	2307      	movs	r3, #7
   154fc:	f88d 3001 	strb.w	r3, [sp, #1]
    }
    ssp_registers[pssp]->CR0 =
        bit::Insert(ssp_registers[pssp]->CR0, util::Value(size), kDataBit, 4);
   15500:	4a6a      	ldr	r2, [pc, #424]	; (156ac <Ssp::SetPeripheralMode(SspInterface::MasterSlaveMode, SspInterface::FrameMode, SspInterface::DataSize)+0x204>)
   15502:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   15504:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15508:	681e      	ldr	r6, [r3, #0]
   1550a:	f89d 3001 	ldrb.w	r3, [sp, #1]
   1550e:	4618      	mov	r0, r3
   15510:	f7ff ff82 	bl	15418 <unsigned char util::Value<SspInterface::DataSize, unsigned char>(SspInterface::DataSize)>
   15514:	4603      	mov	r3, r0
   15516:	4619      	mov	r1, r3
    ssp_registers[pssp]->CR0 =
   15518:	4a64      	ldr	r2, [pc, #400]	; (156ac <Ssp::SetPeripheralMode(SspInterface::MasterSlaveMode, SspInterface::FrameMode, SspInterface::DataSize)+0x204>)
   1551a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   1551c:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
   15520:	9608      	str	r6, [sp, #32]
   15522:	460b      	mov	r3, r1
   15524:	f88d 301f 	strb.w	r3, [sp, #31]
   15528:	2300      	movs	r3, #0
   1552a:	9306      	str	r3, [sp, #24]
   1552c:	2304      	movs	r3, #4
   1552e:	9305      	str	r3, [sp, #20]
   15530:	4623      	mov	r3, r4
   15532:	4619      	mov	r1, r3
   15534:	485e      	ldr	r0, [pc, #376]	; (156b0 <Ssp::SetPeripheralMode(SspInterface::MasterSlaveMode, SspInterface::FrameMode, SspInterface::DataSize)+0x208>)
   15536:	f7fd fddf 	bl	130f8 <__cyg_profile_func_enter>
  constexpr UnsignedT kFieldOfOnes = GenerateFieldOfOnes<T>();
   1553a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1553e:	9304      	str	r3, [sp, #16]
  constexpr size_t kTargetWidth     = sizeof(T) * 8;
   15540:	2320      	movs	r3, #32
   15542:	9303      	str	r3, [sp, #12]
  UnsignedT mask   = kFieldOfOnes >> (kTargetWidth - width);
   15544:	9b05      	ldr	r3, [sp, #20]
   15546:	f1c3 0320 	rsb	r3, r3, #32
   1554a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1554e:	fa22 f303 	lsr.w	r3, r2, r3
   15552:	9302      	str	r3, [sp, #8]
  target &= ~(mask << position);
   15554:	9a02      	ldr	r2, [sp, #8]
   15556:	9b06      	ldr	r3, [sp, #24]
   15558:	fa02 f303 	lsl.w	r3, r2, r3
   1555c:	43db      	mvns	r3, r3
   1555e:	9a08      	ldr	r2, [sp, #32]
   15560:	4013      	ands	r3, r2
   15562:	9308      	str	r3, [sp, #32]
  target |= (value & mask) << position;
   15564:	f89d 201f 	ldrb.w	r2, [sp, #31]
   15568:	9b02      	ldr	r3, [sp, #8]
   1556a:	401a      	ands	r2, r3
   1556c:	9b06      	ldr	r3, [sp, #24]
   1556e:	fa02 f303 	lsl.w	r3, r2, r3
   15572:	9a08      	ldr	r2, [sp, #32]
   15574:	4313      	orrs	r3, r2
   15576:	9308      	str	r3, [sp, #32]
  return target;
   15578:	9e08      	ldr	r6, [sp, #32]
   1557a:	4623      	mov	r3, r4
   1557c:	4619      	mov	r1, r3
   1557e:	484c      	ldr	r0, [pc, #304]	; (156b0 <Ssp::SetPeripheralMode(SspInterface::MasterSlaveMode, SspInterface::FrameMode, SspInterface::DataSize)+0x208>)
   15580:	f7fd fdce 	bl	13120 <__cyg_profile_func_exit>
   15584:	602e      	str	r6, [r5, #0]
    ssp_registers[pssp]->CR0 =
        bit::Insert(ssp_registers[pssp]->CR0, util::Value(frame), kFrameBit, 2);
   15586:	4a49      	ldr	r2, [pc, #292]	; (156ac <Ssp::SetPeripheralMode(SspInterface::MasterSlaveMode, SspInterface::FrameMode, SspInterface::DataSize)+0x204>)
   15588:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   1558a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1558e:	681e      	ldr	r6, [r3, #0]
   15590:	f89d 3002 	ldrb.w	r3, [sp, #2]
   15594:	4618      	mov	r0, r3
   15596:	f7ff ff57 	bl	15448 <unsigned char util::Value<SspInterface::FrameMode, unsigned char>(SspInterface::FrameMode)>
   1559a:	4603      	mov	r3, r0
   1559c:	4619      	mov	r1, r3
    ssp_registers[pssp]->CR0 =
   1559e:	4a43      	ldr	r2, [pc, #268]	; (156ac <Ssp::SetPeripheralMode(SspInterface::MasterSlaveMode, SspInterface::FrameMode, SspInterface::DataSize)+0x204>)
   155a0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   155a2:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
   155a6:	960f      	str	r6, [sp, #60]	; 0x3c
   155a8:	460b      	mov	r3, r1
   155aa:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
   155ae:	2304      	movs	r3, #4
   155b0:	930d      	str	r3, [sp, #52]	; 0x34
   155b2:	2302      	movs	r3, #2
   155b4:	930c      	str	r3, [sp, #48]	; 0x30
   155b6:	4623      	mov	r3, r4
   155b8:	4619      	mov	r1, r3
   155ba:	483d      	ldr	r0, [pc, #244]	; (156b0 <Ssp::SetPeripheralMode(SspInterface::MasterSlaveMode, SspInterface::FrameMode, SspInterface::DataSize)+0x208>)
   155bc:	f7fd fd9c 	bl	130f8 <__cyg_profile_func_enter>
  constexpr UnsignedT kFieldOfOnes = GenerateFieldOfOnes<T>();
   155c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   155c4:	930b      	str	r3, [sp, #44]	; 0x2c
  constexpr size_t kTargetWidth     = sizeof(T) * 8;
   155c6:	2320      	movs	r3, #32
   155c8:	930a      	str	r3, [sp, #40]	; 0x28
  UnsignedT mask   = kFieldOfOnes >> (kTargetWidth - width);
   155ca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   155cc:	f1c3 0320 	rsb	r3, r3, #32
   155d0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   155d4:	fa22 f303 	lsr.w	r3, r2, r3
   155d8:	9309      	str	r3, [sp, #36]	; 0x24
  target &= ~(mask << position);
   155da:	9a09      	ldr	r2, [sp, #36]	; 0x24
   155dc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   155de:	fa02 f303 	lsl.w	r3, r2, r3
   155e2:	43db      	mvns	r3, r3
   155e4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   155e6:	4013      	ands	r3, r2
   155e8:	930f      	str	r3, [sp, #60]	; 0x3c
  target |= (value & mask) << position;
   155ea:	f89d 203b 	ldrb.w	r2, [sp, #59]	; 0x3b
   155ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
   155f0:	401a      	ands	r2, r3
   155f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   155f4:	fa02 f303 	lsl.w	r3, r2, r3
   155f8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   155fa:	4313      	orrs	r3, r2
   155fc:	930f      	str	r3, [sp, #60]	; 0x3c
  return target;
   155fe:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
   15600:	4623      	mov	r3, r4
   15602:	4619      	mov	r1, r3
   15604:	482a      	ldr	r0, [pc, #168]	; (156b0 <Ssp::SetPeripheralMode(SspInterface::MasterSlaveMode, SspInterface::FrameMode, SspInterface::DataSize)+0x208>)
   15606:	f7fd fd8b 	bl	13120 <__cyg_profile_func_exit>
   1560a:	602e      	str	r6, [r5, #0]
    ssp_registers[pssp]->CR1 = bit::Insert(
        ssp_registers[pssp]->CR1, util::Value(mode), kMasterModeBit, 1);
   1560c:	4a27      	ldr	r2, [pc, #156]	; (156ac <Ssp::SetPeripheralMode(SspInterface::MasterSlaveMode, SspInterface::FrameMode, SspInterface::DataSize)+0x204>)
   1560e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   15610:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15614:	685e      	ldr	r6, [r3, #4]
    ssp_registers[pssp]->CR1 = bit::Insert(
   15616:	f89d 3003 	ldrb.w	r3, [sp, #3]
   1561a:	4618      	mov	r0, r3
   1561c:	f7ff ff2c 	bl	15478 <unsigned char util::Value<SspInterface::MasterSlaveMode, unsigned char>(SspInterface::MasterSlaveMode)>
   15620:	4603      	mov	r3, r0
   15622:	4619      	mov	r1, r3
   15624:	4a21      	ldr	r2, [pc, #132]	; (156ac <Ssp::SetPeripheralMode(SspInterface::MasterSlaveMode, SspInterface::FrameMode, SspInterface::DataSize)+0x204>)
   15626:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   15628:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
   1562c:	9616      	str	r6, [sp, #88]	; 0x58
   1562e:	460b      	mov	r3, r1
   15630:	f88d 3057 	strb.w	r3, [sp, #87]	; 0x57
   15634:	2302      	movs	r3, #2
   15636:	9314      	str	r3, [sp, #80]	; 0x50
   15638:	2301      	movs	r3, #1
   1563a:	9313      	str	r3, [sp, #76]	; 0x4c
   1563c:	4623      	mov	r3, r4
   1563e:	4619      	mov	r1, r3
   15640:	481b      	ldr	r0, [pc, #108]	; (156b0 <Ssp::SetPeripheralMode(SspInterface::MasterSlaveMode, SspInterface::FrameMode, SspInterface::DataSize)+0x208>)
   15642:	f7fd fd59 	bl	130f8 <__cyg_profile_func_enter>
  constexpr UnsignedT kFieldOfOnes = GenerateFieldOfOnes<T>();
   15646:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1564a:	9312      	str	r3, [sp, #72]	; 0x48
  constexpr size_t kTargetWidth     = sizeof(T) * 8;
   1564c:	2320      	movs	r3, #32
   1564e:	9311      	str	r3, [sp, #68]	; 0x44
  UnsignedT mask   = kFieldOfOnes >> (kTargetWidth - width);
   15650:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   15652:	f1c3 0320 	rsb	r3, r3, #32
   15656:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1565a:	fa22 f303 	lsr.w	r3, r2, r3
   1565e:	9310      	str	r3, [sp, #64]	; 0x40
  target &= ~(mask << position);
   15660:	9a10      	ldr	r2, [sp, #64]	; 0x40
   15662:	9b14      	ldr	r3, [sp, #80]	; 0x50
   15664:	fa02 f303 	lsl.w	r3, r2, r3
   15668:	43db      	mvns	r3, r3
   1566a:	9a16      	ldr	r2, [sp, #88]	; 0x58
   1566c:	4013      	ands	r3, r2
   1566e:	9316      	str	r3, [sp, #88]	; 0x58
  target |= (value & mask) << position;
   15670:	f89d 2057 	ldrb.w	r2, [sp, #87]	; 0x57
   15674:	9b10      	ldr	r3, [sp, #64]	; 0x40
   15676:	401a      	ands	r2, r3
   15678:	9b14      	ldr	r3, [sp, #80]	; 0x50
   1567a:	fa02 f303 	lsl.w	r3, r2, r3
   1567e:	9a16      	ldr	r2, [sp, #88]	; 0x58
   15680:	4313      	orrs	r3, r2
   15682:	9316      	str	r3, [sp, #88]	; 0x58
  return target;
   15684:	9e16      	ldr	r6, [sp, #88]	; 0x58
   15686:	4623      	mov	r3, r4
   15688:	4619      	mov	r1, r3
   1568a:	4809      	ldr	r0, [pc, #36]	; (156b0 <Ssp::SetPeripheralMode(SspInterface::MasterSlaveMode, SspInterface::FrameMode, SspInterface::DataSize)+0x208>)
   1568c:	f7fd fd48 	bl	13120 <__cyg_profile_func_exit>
   15690:	606e      	str	r6, [r5, #4]
   15692:	4623      	mov	r3, r4
   15694:	4619      	mov	r1, r3
   15696:	4803      	ldr	r0, [pc, #12]	; (156a4 <Ssp::SetPeripheralMode(SspInterface::MasterSlaveMode, SspInterface::FrameMode, SspInterface::DataSize)+0x1fc>)
   15698:	f7fd fd42 	bl	13120 <__cyg_profile_func_exit>
  }
   1569c:	bf00      	nop
   1569e:	b018      	add	sp, #96	; 0x60
   156a0:	bd70      	pop	{r4, r5, r6, pc}
   156a2:	bf00      	nop
   156a4:	000154a9 	.word	0x000154a9
   156a8:	00018efc 	.word	0x00018efc
   156ac:	100001c8 	.word	0x100001c8
   156b0:	00016ed5 	.word	0x00016ed5

000156b4 <Ssp::GetPeripheralMode()>:
  /// Gets the Peripheral modes from registers
  /// @return - returns a 16-bit value as follows: 0000_000x 0xx0_xxxx
  ///       MasterSlaveMode = 1-bit @ bit 8
  ///       FrameMode       = 2-bit @ bit 5
  ///       DataSize        = 4-bit @ bit 0
  uint16_t GetPeripheralMode() override
   156b4:	b570      	push	{r4, r5, r6, lr}
   156b6:	b096      	sub	sp, #88	; 0x58
   156b8:	4674      	mov	r4, lr
   156ba:	9001      	str	r0, [sp, #4]
   156bc:	4623      	mov	r3, r4
   156be:	4619      	mov	r1, r3
   156c0:	4850      	ldr	r0, [pc, #320]	; (15804 <Ssp::GetPeripheralMode()+0x150>)
   156c2:	f7fd fd19 	bl	130f8 <__cyg_profile_func_enter>
  {
    uint16_t return_val = 0;
   156c6:	2300      	movs	r3, #0
   156c8:	f8ad 3056 	strh.w	r3, [sp, #86]	; 0x56
    uint32_t pssp       = util::Value(pssp_);
   156cc:	9b01      	ldr	r3, [sp, #4]
   156ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   156d0:	4618      	mov	r0, r3
   156d2:	f7ff fca7 	bl	15024 <int util::Value<Ssp::Peripheral, int>(Ssp::Peripheral)>
   156d6:	4603      	mov	r3, r0
   156d8:	9314      	str	r3, [sp, #80]	; 0x50
    // TODO(#371): Find a better alternative to powering up the peripheral for
    // every method.
    Ssp::PowerUpPeripheral(Ssp::kPowerBit[pssp]);
   156da:	9b01      	ldr	r3, [sp, #4]
   156dc:	1d18      	adds	r0, r3, #4
   156de:	9b14      	ldr	r3, [sp, #80]	; 0x50
   156e0:	009b      	lsls	r3, r3, #2
   156e2:	4a49      	ldr	r2, [pc, #292]	; (15808 <Ssp::GetPeripheralMode()+0x154>)
   156e4:	4413      	add	r3, r2
   156e6:	4619      	mov	r1, r3
   156e8:	f7fb fc22 	bl	10f30 <Lpc40xxSystemController::PowerUpPeripheral(SystemControllerInterface::PeripheralID const&)>

    return_val = static_cast<uint16_t>(
        (bit::Extract(ssp_registers[pssp]->CR0, kDataBit, 4)) +
   156ec:	4a47      	ldr	r2, [pc, #284]	; (1580c <Ssp::GetPeripheralMode()+0x158>)
   156ee:	9b14      	ldr	r3, [sp, #80]	; 0x50
   156f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   156f4:	681b      	ldr	r3, [r3, #0]
   156f6:	9307      	str	r3, [sp, #28]
   156f8:	2300      	movs	r3, #0
   156fa:	9306      	str	r3, [sp, #24]
   156fc:	2304      	movs	r3, #4
   156fe:	9305      	str	r3, [sp, #20]
   15700:	4623      	mov	r3, r4
   15702:	4619      	mov	r1, r3
   15704:	4842      	ldr	r0, [pc, #264]	; (15810 <Ssp::GetPeripheralMode()+0x15c>)
   15706:	f7fd fcf7 	bl	130f8 <__cyg_profile_func_enter>
  constexpr UnsignedT kFieldOfOnes = GenerateFieldOfOnes<T>();
   1570a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1570e:	9304      	str	r3, [sp, #16]
  constexpr size_t kTargetWidth     = sizeof(T) * 8;
   15710:	2320      	movs	r3, #32
   15712:	9303      	str	r3, [sp, #12]
  UnsignedT mask   = kFieldOfOnes >> (kTargetWidth - width);
   15714:	9b05      	ldr	r3, [sp, #20]
   15716:	f1c3 0320 	rsb	r3, r3, #32
   1571a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1571e:	fa22 f303 	lsr.w	r3, r2, r3
   15722:	9302      	str	r3, [sp, #8]
  return (target >> position) & mask;
   15724:	9a07      	ldr	r2, [sp, #28]
   15726:	9b06      	ldr	r3, [sp, #24]
   15728:	40da      	lsrs	r2, r3
   1572a:	9b02      	ldr	r3, [sp, #8]
   1572c:	ea02 0503 	and.w	r5, r2, r3
   15730:	4623      	mov	r3, r4
   15732:	4619      	mov	r1, r3
   15734:	4836      	ldr	r0, [pc, #216]	; (15810 <Ssp::GetPeripheralMode()+0x15c>)
   15736:	f7fd fcf3 	bl	13120 <__cyg_profile_func_exit>
   1573a:	b2ad      	uxth	r5, r5
        ((bit::Extract(ssp_registers[pssp]->CR0, kFrameBit, 2)) << 5) +
   1573c:	4a33      	ldr	r2, [pc, #204]	; (1580c <Ssp::GetPeripheralMode()+0x158>)
   1573e:	9b14      	ldr	r3, [sp, #80]	; 0x50
   15740:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15744:	681b      	ldr	r3, [r3, #0]
   15746:	930d      	str	r3, [sp, #52]	; 0x34
   15748:	2304      	movs	r3, #4
   1574a:	930c      	str	r3, [sp, #48]	; 0x30
   1574c:	2302      	movs	r3, #2
   1574e:	930b      	str	r3, [sp, #44]	; 0x2c
   15750:	4623      	mov	r3, r4
   15752:	4619      	mov	r1, r3
   15754:	482e      	ldr	r0, [pc, #184]	; (15810 <Ssp::GetPeripheralMode()+0x15c>)
   15756:	f7fd fccf 	bl	130f8 <__cyg_profile_func_enter>
  constexpr UnsignedT kFieldOfOnes = GenerateFieldOfOnes<T>();
   1575a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1575e:	930a      	str	r3, [sp, #40]	; 0x28
  constexpr size_t kTargetWidth     = sizeof(T) * 8;
   15760:	2320      	movs	r3, #32
   15762:	9309      	str	r3, [sp, #36]	; 0x24
  UnsignedT mask   = kFieldOfOnes >> (kTargetWidth - width);
   15764:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   15766:	f1c3 0320 	rsb	r3, r3, #32
   1576a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1576e:	fa22 f303 	lsr.w	r3, r2, r3
   15772:	9308      	str	r3, [sp, #32]
  return (target >> position) & mask;
   15774:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   15776:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   15778:	40da      	lsrs	r2, r3
   1577a:	9b08      	ldr	r3, [sp, #32]
   1577c:	ea02 0603 	and.w	r6, r2, r3
   15780:	4623      	mov	r3, r4
   15782:	4619      	mov	r1, r3
   15784:	4822      	ldr	r0, [pc, #136]	; (15810 <Ssp::GetPeripheralMode()+0x15c>)
   15786:	f7fd fccb 	bl	13120 <__cyg_profile_func_exit>
   1578a:	b2b3      	uxth	r3, r6
   1578c:	015b      	lsls	r3, r3, #5
   1578e:	b29b      	uxth	r3, r3
        (bit::Extract(ssp_registers[pssp]->CR0, kDataBit, 4)) +
   15790:	442b      	add	r3, r5
   15792:	b29d      	uxth	r5, r3
        ((bit::Extract(ssp_registers[pssp]->CR1, kMasterModeBit)) << 8));
   15794:	4a1d      	ldr	r2, [pc, #116]	; (1580c <Ssp::GetPeripheralMode()+0x158>)
   15796:	9b14      	ldr	r3, [sp, #80]	; 0x50
   15798:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1579c:	685b      	ldr	r3, [r3, #4]
   1579e:	9313      	str	r3, [sp, #76]	; 0x4c
   157a0:	2302      	movs	r3, #2
   157a2:	9312      	str	r3, [sp, #72]	; 0x48
   157a4:	2301      	movs	r3, #1
   157a6:	9311      	str	r3, [sp, #68]	; 0x44
   157a8:	4623      	mov	r3, r4
   157aa:	4619      	mov	r1, r3
   157ac:	4818      	ldr	r0, [pc, #96]	; (15810 <Ssp::GetPeripheralMode()+0x15c>)
   157ae:	f7fd fca3 	bl	130f8 <__cyg_profile_func_enter>
  constexpr UnsignedT kFieldOfOnes = GenerateFieldOfOnes<T>();
   157b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   157b6:	9310      	str	r3, [sp, #64]	; 0x40
  constexpr size_t kTargetWidth     = sizeof(T) * 8;
   157b8:	2320      	movs	r3, #32
   157ba:	930f      	str	r3, [sp, #60]	; 0x3c
  UnsignedT mask   = kFieldOfOnes >> (kTargetWidth - width);
   157bc:	9b11      	ldr	r3, [sp, #68]	; 0x44
   157be:	f1c3 0320 	rsb	r3, r3, #32
   157c2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   157c6:	fa22 f303 	lsr.w	r3, r2, r3
   157ca:	930e      	str	r3, [sp, #56]	; 0x38
  return (target >> position) & mask;
   157cc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   157ce:	9b12      	ldr	r3, [sp, #72]	; 0x48
   157d0:	40da      	lsrs	r2, r3
   157d2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   157d4:	ea02 0603 	and.w	r6, r2, r3
   157d8:	4623      	mov	r3, r4
   157da:	4619      	mov	r1, r3
   157dc:	480c      	ldr	r0, [pc, #48]	; (15810 <Ssp::GetPeripheralMode()+0x15c>)
   157de:	f7fd fc9f 	bl	13120 <__cyg_profile_func_exit>
   157e2:	b2b3      	uxth	r3, r6
   157e4:	021b      	lsls	r3, r3, #8
   157e6:	b29b      	uxth	r3, r3
    return_val = static_cast<uint16_t>(
   157e8:	442b      	add	r3, r5
   157ea:	f8ad 3056 	strh.w	r3, [sp, #86]	; 0x56
    return return_val;
   157ee:	f8bd 5056 	ldrh.w	r5, [sp, #86]	; 0x56
   157f2:	4623      	mov	r3, r4
   157f4:	4619      	mov	r1, r3
   157f6:	4803      	ldr	r0, [pc, #12]	; (15804 <Ssp::GetPeripheralMode()+0x150>)
   157f8:	f7fd fc92 	bl	13120 <__cyg_profile_func_exit>
   157fc:	462b      	mov	r3, r5
  }
   157fe:	4618      	mov	r0, r3
   15800:	b016      	add	sp, #88	; 0x58
   15802:	bd70      	pop	{r4, r5, r6, pc}
   15804:	000156b5 	.word	0x000156b5
   15808:	00018efc 	.word	0x00018efc
   1580c:	100001c8 	.word	0x100001c8
   15810:	00016f49 	.word	0x00016f49

00015814 <Ssp::SetClock(bool, bool, unsigned char, unsigned char)>:
  /// Sets the clock rate for the Peripheral
  /// @param polarity - maintain bus on clock 0=low or 1=high between frames
  /// @param phase - capture serial data on 0=first or 1=second clock cycle
  /// @param divider - see notes in SSP_Interface above
  /// @param prescaler - divides the PCLK, must be even value between 2-254
  void SetClock(bool polarity, bool phase, uint8_t divider,
   15814:	b570      	push	{r4, r5, r6, lr}
   15816:	b098      	sub	sp, #96	; 0x60
   15818:	4674      	mov	r4, lr
   1581a:	9001      	str	r0, [sp, #4]
   1581c:	4608      	mov	r0, r1
   1581e:	4611      	mov	r1, r2
   15820:	461a      	mov	r2, r3
   15822:	4603      	mov	r3, r0
   15824:	f88d 3003 	strb.w	r3, [sp, #3]
   15828:	460b      	mov	r3, r1
   1582a:	f88d 3002 	strb.w	r3, [sp, #2]
   1582e:	4613      	mov	r3, r2
   15830:	f88d 3001 	strb.w	r3, [sp, #1]
   15834:	4623      	mov	r3, r4
   15836:	4619      	mov	r1, r3
   15838:	486c      	ldr	r0, [pc, #432]	; (159ec <Ssp::SetClock(bool, bool, unsigned char, unsigned char)+0x1d8>)
   1583a:	f7fd fc5d 	bl	130f8 <__cyg_profile_func_enter>
                uint8_t prescaler) override
  {
    uint32_t pssp = util::Value(pssp_);
   1583e:	9b01      	ldr	r3, [sp, #4]
   15840:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   15842:	4618      	mov	r0, r3
   15844:	f7ff fbee 	bl	15024 <int util::Value<Ssp::Peripheral, int>(Ssp::Peripheral)>
   15848:	4603      	mov	r3, r0
   1584a:	9317      	str	r3, [sp, #92]	; 0x5c
    // TODO(#371): Find a better alternative to powering up the peripheral for
    // every method.
    Ssp::PowerUpPeripheral(Ssp::kPowerBit[pssp]);
   1584c:	9b01      	ldr	r3, [sp, #4]
   1584e:	1d18      	adds	r0, r3, #4
   15850:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   15852:	009b      	lsls	r3, r3, #2
   15854:	4a66      	ldr	r2, [pc, #408]	; (159f0 <Ssp::SetClock(bool, bool, unsigned char, unsigned char)+0x1dc>)
   15856:	4413      	add	r3, r2
   15858:	4619      	mov	r1, r3
   1585a:	f7fb fb69 	bl	10f30 <Lpc40xxSystemController::PowerUpPeripheral(SystemControllerInterface::PeripheralID const&)>
    // first clear the appropriate registers
    ssp_registers[pssp]->CR0 =
        bit::Insert(ssp_registers[pssp]->CR0, polarity, kPolarityBit, 1);
   1585e:	4a65      	ldr	r2, [pc, #404]	; (159f4 <Ssp::SetClock(bool, bool, unsigned char, unsigned char)+0x1e0>)
   15860:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   15862:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15866:	681b      	ldr	r3, [r3, #0]
    ssp_registers[pssp]->CR0 =
   15868:	4962      	ldr	r1, [pc, #392]	; (159f4 <Ssp::SetClock(bool, bool, unsigned char, unsigned char)+0x1e0>)
   1586a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   1586c:	f851 5022 	ldr.w	r5, [r1, r2, lsl #2]
   15870:	9308      	str	r3, [sp, #32]
   15872:	f89d 3003 	ldrb.w	r3, [sp, #3]
   15876:	f88d 301f 	strb.w	r3, [sp, #31]
   1587a:	2306      	movs	r3, #6
   1587c:	9306      	str	r3, [sp, #24]
   1587e:	2301      	movs	r3, #1
   15880:	9305      	str	r3, [sp, #20]
   15882:	4623      	mov	r3, r4
   15884:	4619      	mov	r1, r3
   15886:	485c      	ldr	r0, [pc, #368]	; (159f8 <Ssp::SetClock(bool, bool, unsigned char, unsigned char)+0x1e4>)
   15888:	f7fd fc36 	bl	130f8 <__cyg_profile_func_enter>
  constexpr UnsignedT kFieldOfOnes = GenerateFieldOfOnes<T>();
   1588c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   15890:	9304      	str	r3, [sp, #16]
  constexpr size_t kTargetWidth     = sizeof(T) * 8;
   15892:	2320      	movs	r3, #32
   15894:	9303      	str	r3, [sp, #12]
  UnsignedT mask   = kFieldOfOnes >> (kTargetWidth - width);
   15896:	9b05      	ldr	r3, [sp, #20]
   15898:	f1c3 0320 	rsb	r3, r3, #32
   1589c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   158a0:	fa22 f303 	lsr.w	r3, r2, r3
   158a4:	9302      	str	r3, [sp, #8]
  target &= ~(mask << position);
   158a6:	9a02      	ldr	r2, [sp, #8]
   158a8:	9b06      	ldr	r3, [sp, #24]
   158aa:	fa02 f303 	lsl.w	r3, r2, r3
   158ae:	43db      	mvns	r3, r3
   158b0:	9a08      	ldr	r2, [sp, #32]
   158b2:	4013      	ands	r3, r2
   158b4:	9308      	str	r3, [sp, #32]
  target |= (value & mask) << position;
   158b6:	f89d 201f 	ldrb.w	r2, [sp, #31]
   158ba:	9b02      	ldr	r3, [sp, #8]
   158bc:	401a      	ands	r2, r3
   158be:	9b06      	ldr	r3, [sp, #24]
   158c0:	fa02 f303 	lsl.w	r3, r2, r3
   158c4:	9a08      	ldr	r2, [sp, #32]
   158c6:	4313      	orrs	r3, r2
   158c8:	9308      	str	r3, [sp, #32]
  return target;
   158ca:	9e08      	ldr	r6, [sp, #32]
   158cc:	4623      	mov	r3, r4
   158ce:	4619      	mov	r1, r3
   158d0:	4849      	ldr	r0, [pc, #292]	; (159f8 <Ssp::SetClock(bool, bool, unsigned char, unsigned char)+0x1e4>)
   158d2:	f7fd fc25 	bl	13120 <__cyg_profile_func_exit>
   158d6:	602e      	str	r6, [r5, #0]
    ssp_registers[pssp]->CR0 =
        bit::Insert(ssp_registers[pssp]->CR0, phase, kPhaseBit, 1);
   158d8:	4a46      	ldr	r2, [pc, #280]	; (159f4 <Ssp::SetClock(bool, bool, unsigned char, unsigned char)+0x1e0>)
   158da:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   158dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   158e0:	681b      	ldr	r3, [r3, #0]
    ssp_registers[pssp]->CR0 =
   158e2:	4944      	ldr	r1, [pc, #272]	; (159f4 <Ssp::SetClock(bool, bool, unsigned char, unsigned char)+0x1e0>)
   158e4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   158e6:	f851 5022 	ldr.w	r5, [r1, r2, lsl #2]
   158ea:	930f      	str	r3, [sp, #60]	; 0x3c
   158ec:	f89d 3002 	ldrb.w	r3, [sp, #2]
   158f0:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
   158f4:	2307      	movs	r3, #7
   158f6:	930d      	str	r3, [sp, #52]	; 0x34
   158f8:	2301      	movs	r3, #1
   158fa:	930c      	str	r3, [sp, #48]	; 0x30
   158fc:	4623      	mov	r3, r4
   158fe:	4619      	mov	r1, r3
   15900:	483d      	ldr	r0, [pc, #244]	; (159f8 <Ssp::SetClock(bool, bool, unsigned char, unsigned char)+0x1e4>)
   15902:	f7fd fbf9 	bl	130f8 <__cyg_profile_func_enter>
  constexpr UnsignedT kFieldOfOnes = GenerateFieldOfOnes<T>();
   15906:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1590a:	930b      	str	r3, [sp, #44]	; 0x2c
  constexpr size_t kTargetWidth     = sizeof(T) * 8;
   1590c:	2320      	movs	r3, #32
   1590e:	930a      	str	r3, [sp, #40]	; 0x28
  UnsignedT mask   = kFieldOfOnes >> (kTargetWidth - width);
   15910:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   15912:	f1c3 0320 	rsb	r3, r3, #32
   15916:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1591a:	fa22 f303 	lsr.w	r3, r2, r3
   1591e:	9309      	str	r3, [sp, #36]	; 0x24
  target &= ~(mask << position);
   15920:	9a09      	ldr	r2, [sp, #36]	; 0x24
   15922:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   15924:	fa02 f303 	lsl.w	r3, r2, r3
   15928:	43db      	mvns	r3, r3
   1592a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   1592c:	4013      	ands	r3, r2
   1592e:	930f      	str	r3, [sp, #60]	; 0x3c
  target |= (value & mask) << position;
   15930:	f89d 203b 	ldrb.w	r2, [sp, #59]	; 0x3b
   15934:	9b09      	ldr	r3, [sp, #36]	; 0x24
   15936:	401a      	ands	r2, r3
   15938:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1593a:	fa02 f303 	lsl.w	r3, r2, r3
   1593e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   15940:	4313      	orrs	r3, r2
   15942:	930f      	str	r3, [sp, #60]	; 0x3c
  return target;
   15944:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
   15946:	4623      	mov	r3, r4
   15948:	4619      	mov	r1, r3
   1594a:	482b      	ldr	r0, [pc, #172]	; (159f8 <Ssp::SetClock(bool, bool, unsigned char, unsigned char)+0x1e4>)
   1594c:	f7fd fbe8 	bl	13120 <__cyg_profile_func_exit>
   15950:	602e      	str	r6, [r5, #0]
    ssp_registers[pssp]->CR0 =
        bit::Insert(ssp_registers[pssp]->CR0, divider, kDividerBit, 8);
   15952:	4a28      	ldr	r2, [pc, #160]	; (159f4 <Ssp::SetClock(bool, bool, unsigned char, unsigned char)+0x1e0>)
   15954:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   15956:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1595a:	681b      	ldr	r3, [r3, #0]
    ssp_registers[pssp]->CR0 =
   1595c:	4925      	ldr	r1, [pc, #148]	; (159f4 <Ssp::SetClock(bool, bool, unsigned char, unsigned char)+0x1e0>)
   1595e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   15960:	f851 5022 	ldr.w	r5, [r1, r2, lsl #2]
   15964:	9316      	str	r3, [sp, #88]	; 0x58
   15966:	f89d 3001 	ldrb.w	r3, [sp, #1]
   1596a:	f88d 3057 	strb.w	r3, [sp, #87]	; 0x57
   1596e:	2308      	movs	r3, #8
   15970:	9314      	str	r3, [sp, #80]	; 0x50
   15972:	2308      	movs	r3, #8
   15974:	9313      	str	r3, [sp, #76]	; 0x4c
   15976:	4623      	mov	r3, r4
   15978:	4619      	mov	r1, r3
   1597a:	4820      	ldr	r0, [pc, #128]	; (159fc <Ssp::SetClock(bool, bool, unsigned char, unsigned char)+0x1e8>)
   1597c:	f7fd fbbc 	bl	130f8 <__cyg_profile_func_enter>
  constexpr UnsignedT kFieldOfOnes = GenerateFieldOfOnes<T>();
   15980:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   15984:	9312      	str	r3, [sp, #72]	; 0x48
  constexpr size_t kTargetWidth     = sizeof(T) * 8;
   15986:	2320      	movs	r3, #32
   15988:	9311      	str	r3, [sp, #68]	; 0x44
  UnsignedT mask   = kFieldOfOnes >> (kTargetWidth - width);
   1598a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   1598c:	f1c3 0320 	rsb	r3, r3, #32
   15990:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   15994:	fa22 f303 	lsr.w	r3, r2, r3
   15998:	9310      	str	r3, [sp, #64]	; 0x40
  target &= ~(mask << position);
   1599a:	9a10      	ldr	r2, [sp, #64]	; 0x40
   1599c:	9b14      	ldr	r3, [sp, #80]	; 0x50
   1599e:	fa02 f303 	lsl.w	r3, r2, r3
   159a2:	43db      	mvns	r3, r3
   159a4:	9a16      	ldr	r2, [sp, #88]	; 0x58
   159a6:	4013      	ands	r3, r2
   159a8:	9316      	str	r3, [sp, #88]	; 0x58
  target |= (value & mask) << position;
   159aa:	f89d 2057 	ldrb.w	r2, [sp, #87]	; 0x57
   159ae:	9b10      	ldr	r3, [sp, #64]	; 0x40
   159b0:	401a      	ands	r2, r3
   159b2:	9b14      	ldr	r3, [sp, #80]	; 0x50
   159b4:	fa02 f303 	lsl.w	r3, r2, r3
   159b8:	9a16      	ldr	r2, [sp, #88]	; 0x58
   159ba:	4313      	orrs	r3, r2
   159bc:	9316      	str	r3, [sp, #88]	; 0x58
  return target;
   159be:	9e16      	ldr	r6, [sp, #88]	; 0x58
   159c0:	4623      	mov	r3, r4
   159c2:	4619      	mov	r1, r3
   159c4:	480d      	ldr	r0, [pc, #52]	; (159fc <Ssp::SetClock(bool, bool, unsigned char, unsigned char)+0x1e8>)
   159c6:	f7fd fbab 	bl	13120 <__cyg_profile_func_exit>
   159ca:	602e      	str	r6, [r5, #0]
    ssp_registers[pssp]->CPSR = prescaler;
   159cc:	4a09      	ldr	r2, [pc, #36]	; (159f4 <Ssp::SetClock(bool, bool, unsigned char, unsigned char)+0x1e0>)
   159ce:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   159d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   159d4:	f89d 2070 	ldrb.w	r2, [sp, #112]	; 0x70
   159d8:	611a      	str	r2, [r3, #16]
   159da:	4623      	mov	r3, r4
   159dc:	4619      	mov	r1, r3
   159de:	4803      	ldr	r0, [pc, #12]	; (159ec <Ssp::SetClock(bool, bool, unsigned char, unsigned char)+0x1d8>)
   159e0:	f7fd fb9e 	bl	13120 <__cyg_profile_func_exit>
  }
   159e4:	bf00      	nop
   159e6:	b018      	add	sp, #96	; 0x60
   159e8:	bd70      	pop	{r4, r5, r6, pc}
   159ea:	bf00      	nop
   159ec:	00015815 	.word	0x00015815
   159f0:	00018efc 	.word	0x00018efc
   159f4:	100001c8 	.word	0x100001c8
   159f8:	00016f9d 	.word	0x00016f9d
   159fc:	00016ed5 	.word	0x00016ed5

00015a00 <Ssp::GetClock()>:
  ///   0000_0000 0000_0x0x xxxx_xxxx xxxx_xxxx
  ///       polarity    = 1-bit @ bit 18
  ///       phase       = 1-bit @ bit 16
  ///       divider     = 8-bits @ bit 8
  ///       prescaler   = 8-bits @ bit 0
  uint32_t GetClock() override
   15a00:	b570      	push	{r4, r5, r6, lr}
   15a02:	b094      	sub	sp, #80	; 0x50
   15a04:	4674      	mov	r4, lr
   15a06:	9001      	str	r0, [sp, #4]
   15a08:	4623      	mov	r3, r4
   15a0a:	4619      	mov	r1, r3
   15a0c:	4858      	ldr	r0, [pc, #352]	; (15b70 <Ssp::GetClock()+0x170>)
   15a0e:	f7fd fb73 	bl	130f8 <__cyg_profile_func_enter>
  {
    uint32_t return_val = 0;
   15a12:	2300      	movs	r3, #0
   15a14:	9313      	str	r3, [sp, #76]	; 0x4c
    uint32_t pssp       = util::Value(pssp_);
   15a16:	9b01      	ldr	r3, [sp, #4]
   15a18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   15a1a:	4618      	mov	r0, r3
   15a1c:	f7ff fb02 	bl	15024 <int util::Value<Ssp::Peripheral, int>(Ssp::Peripheral)>
   15a20:	4603      	mov	r3, r0
   15a22:	9312      	str	r3, [sp, #72]	; 0x48
    // TODO(#371): Find a better alternative to powering up the peripheral for
    // every method.
    Ssp::PowerUpPeripheral(Ssp::kPowerBit[pssp]);
   15a24:	9b01      	ldr	r3, [sp, #4]
   15a26:	1d18      	adds	r0, r3, #4
   15a28:	9b12      	ldr	r3, [sp, #72]	; 0x48
   15a2a:	009b      	lsls	r3, r3, #2
   15a2c:	4a51      	ldr	r2, [pc, #324]	; (15b74 <Ssp::GetClock()+0x174>)
   15a2e:	4413      	add	r3, r2
   15a30:	4619      	mov	r1, r3
   15a32:	f7fb fa7d 	bl	10f30 <Lpc40xxSystemController::PowerUpPeripheral(SystemControllerInterface::PeripheralID const&)>

    return_val =
        (bit::Extract(ssp_registers[pssp]->CPSR, kPrescalerBit, 8)) +
   15a36:	4a50      	ldr	r2, [pc, #320]	; (15b78 <Ssp::GetClock()+0x178>)
   15a38:	9b12      	ldr	r3, [sp, #72]	; 0x48
   15a3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15a3e:	691b      	ldr	r3, [r3, #16]
   15a40:	9307      	str	r3, [sp, #28]
   15a42:	2300      	movs	r3, #0
   15a44:	9306      	str	r3, [sp, #24]
   15a46:	2308      	movs	r3, #8
   15a48:	9305      	str	r3, [sp, #20]
   15a4a:	4623      	mov	r3, r4
   15a4c:	4619      	mov	r1, r3
   15a4e:	484b      	ldr	r0, [pc, #300]	; (15b7c <Ssp::GetClock()+0x17c>)
   15a50:	f7fd fb52 	bl	130f8 <__cyg_profile_func_enter>
  constexpr UnsignedT kFieldOfOnes = GenerateFieldOfOnes<T>();
   15a54:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   15a58:	9304      	str	r3, [sp, #16]
  constexpr size_t kTargetWidth     = sizeof(T) * 8;
   15a5a:	2320      	movs	r3, #32
   15a5c:	9303      	str	r3, [sp, #12]
  UnsignedT mask   = kFieldOfOnes >> (kTargetWidth - width);
   15a5e:	9b05      	ldr	r3, [sp, #20]
   15a60:	f1c3 0320 	rsb	r3, r3, #32
   15a64:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   15a68:	fa22 f303 	lsr.w	r3, r2, r3
   15a6c:	9302      	str	r3, [sp, #8]
  return (target >> position) & mask;
   15a6e:	9a07      	ldr	r2, [sp, #28]
   15a70:	9b06      	ldr	r3, [sp, #24]
   15a72:	40da      	lsrs	r2, r3
   15a74:	9b02      	ldr	r3, [sp, #8]
   15a76:	ea02 0503 	and.w	r5, r2, r3
   15a7a:	4623      	mov	r3, r4
   15a7c:	4619      	mov	r1, r3
   15a7e:	483f      	ldr	r0, [pc, #252]	; (15b7c <Ssp::GetClock()+0x17c>)
   15a80:	f7fd fb4e 	bl	13120 <__cyg_profile_func_exit>
        ((bit::Extract(ssp_registers[pssp]->CR0, kDividerBit, 8)) << 8) +
   15a84:	4a3c      	ldr	r2, [pc, #240]	; (15b78 <Ssp::GetClock()+0x178>)
   15a86:	9b12      	ldr	r3, [sp, #72]	; 0x48
   15a88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15a8c:	681b      	ldr	r3, [r3, #0]
   15a8e:	930d      	str	r3, [sp, #52]	; 0x34
   15a90:	2308      	movs	r3, #8
   15a92:	930c      	str	r3, [sp, #48]	; 0x30
   15a94:	2308      	movs	r3, #8
   15a96:	930b      	str	r3, [sp, #44]	; 0x2c
   15a98:	4623      	mov	r3, r4
   15a9a:	4619      	mov	r1, r3
   15a9c:	4837      	ldr	r0, [pc, #220]	; (15b7c <Ssp::GetClock()+0x17c>)
   15a9e:	f7fd fb2b 	bl	130f8 <__cyg_profile_func_enter>
  constexpr UnsignedT kFieldOfOnes = GenerateFieldOfOnes<T>();
   15aa2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   15aa6:	930a      	str	r3, [sp, #40]	; 0x28
  constexpr size_t kTargetWidth     = sizeof(T) * 8;
   15aa8:	2320      	movs	r3, #32
   15aaa:	9309      	str	r3, [sp, #36]	; 0x24
  UnsignedT mask   = kFieldOfOnes >> (kTargetWidth - width);
   15aac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   15aae:	f1c3 0320 	rsb	r3, r3, #32
   15ab2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   15ab6:	fa22 f303 	lsr.w	r3, r2, r3
   15aba:	9308      	str	r3, [sp, #32]
  return (target >> position) & mask;
   15abc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   15abe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   15ac0:	40da      	lsrs	r2, r3
   15ac2:	9b08      	ldr	r3, [sp, #32]
   15ac4:	ea02 0603 	and.w	r6, r2, r3
   15ac8:	4623      	mov	r3, r4
   15aca:	4619      	mov	r1, r3
   15acc:	482b      	ldr	r0, [pc, #172]	; (15b7c <Ssp::GetClock()+0x17c>)
   15ace:	f7fd fb27 	bl	13120 <__cyg_profile_func_exit>
   15ad2:	0233      	lsls	r3, r6, #8
        (bit::Extract(ssp_registers[pssp]->CPSR, kPrescalerBit, 8)) +
   15ad4:	441d      	add	r5, r3
        ((bit::Read(ssp_registers[pssp]->CR0, kPhaseBit)) << 16) +
   15ad6:	4a28      	ldr	r2, [pc, #160]	; (15b78 <Ssp::GetClock()+0x178>)
   15ad8:	9b12      	ldr	r3, [sp, #72]	; 0x48
   15ada:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15ade:	681b      	ldr	r3, [r3, #0]
   15ae0:	930f      	str	r3, [sp, #60]	; 0x3c
   15ae2:	2307      	movs	r3, #7
   15ae4:	930e      	str	r3, [sp, #56]	; 0x38
   15ae6:	4623      	mov	r3, r4
   15ae8:	4619      	mov	r1, r3
   15aea:	4825      	ldr	r0, [pc, #148]	; (15b80 <Ssp::GetClock()+0x180>)
   15aec:	f7fd fb04 	bl	130f8 <__cyg_profile_func_enter>
  return static_cast<bool>(target & (1 << position));
   15af0:	2201      	movs	r2, #1
   15af2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   15af4:	fa02 f303 	lsl.w	r3, r2, r3
   15af8:	461a      	mov	r2, r3
   15afa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   15afc:	4013      	ands	r3, r2
   15afe:	2b00      	cmp	r3, #0
   15b00:	bf14      	ite	ne
   15b02:	2301      	movne	r3, #1
   15b04:	2300      	moveq	r3, #0
   15b06:	b2de      	uxtb	r6, r3
   15b08:	4623      	mov	r3, r4
   15b0a:	4619      	mov	r1, r3
   15b0c:	481c      	ldr	r0, [pc, #112]	; (15b80 <Ssp::GetClock()+0x180>)
   15b0e:	f7fd fb07 	bl	13120 <__cyg_profile_func_exit>
   15b12:	4633      	mov	r3, r6
   15b14:	041b      	lsls	r3, r3, #16
        ((bit::Extract(ssp_registers[pssp]->CR0, kDividerBit, 8)) << 8) +
   15b16:	441d      	add	r5, r3
        ((bit::Read(ssp_registers[pssp]->CR0, kPolarityBit)) << 18);
   15b18:	4a17      	ldr	r2, [pc, #92]	; (15b78 <Ssp::GetClock()+0x178>)
   15b1a:	9b12      	ldr	r3, [sp, #72]	; 0x48
   15b1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15b20:	681b      	ldr	r3, [r3, #0]
   15b22:	9311      	str	r3, [sp, #68]	; 0x44
   15b24:	2306      	movs	r3, #6
   15b26:	9310      	str	r3, [sp, #64]	; 0x40
   15b28:	4623      	mov	r3, r4
   15b2a:	4619      	mov	r1, r3
   15b2c:	4814      	ldr	r0, [pc, #80]	; (15b80 <Ssp::GetClock()+0x180>)
   15b2e:	f7fd fae3 	bl	130f8 <__cyg_profile_func_enter>
   15b32:	2201      	movs	r2, #1
   15b34:	9b10      	ldr	r3, [sp, #64]	; 0x40
   15b36:	fa02 f303 	lsl.w	r3, r2, r3
   15b3a:	461a      	mov	r2, r3
   15b3c:	9b11      	ldr	r3, [sp, #68]	; 0x44
   15b3e:	4013      	ands	r3, r2
   15b40:	2b00      	cmp	r3, #0
   15b42:	bf14      	ite	ne
   15b44:	2301      	movne	r3, #1
   15b46:	2300      	moveq	r3, #0
   15b48:	b2de      	uxtb	r6, r3
   15b4a:	4623      	mov	r3, r4
   15b4c:	4619      	mov	r1, r3
   15b4e:	480c      	ldr	r0, [pc, #48]	; (15b80 <Ssp::GetClock()+0x180>)
   15b50:	f7fd fae6 	bl	13120 <__cyg_profile_func_exit>
   15b54:	4633      	mov	r3, r6
   15b56:	049b      	lsls	r3, r3, #18
    return_val =
   15b58:	442b      	add	r3, r5
   15b5a:	9313      	str	r3, [sp, #76]	; 0x4c

    return return_val;
   15b5c:	9d13      	ldr	r5, [sp, #76]	; 0x4c
   15b5e:	4623      	mov	r3, r4
   15b60:	4619      	mov	r1, r3
   15b62:	4803      	ldr	r0, [pc, #12]	; (15b70 <Ssp::GetClock()+0x170>)
   15b64:	f7fd fadc 	bl	13120 <__cyg_profile_func_exit>
   15b68:	462b      	mov	r3, r5
  }
   15b6a:	4618      	mov	r0, r3
   15b6c:	b014      	add	sp, #80	; 0x50
   15b6e:	bd70      	pop	{r4, r5, r6, pc}
   15b70:	00015a01 	.word	0x00015a01
   15b74:	00018efc 	.word	0x00018efc
   15b78:	100001c8 	.word	0x100001c8
   15b7c:	00016f49 	.word	0x00016f49
   15b80:	00016e91 	.word	0x00016e91

00015b84 <SdInterface::SdInterface()>:
// NOLINTNEXTLINE(readability-identifier-naming)
// Relevant Datasheet:
// https://www.sdcard.org/downloads/pls/pdf/index.php?p=Part1_Physical_Layer_Simplified_Specification_Ver6.00.jpg&f=Part1_Physical_Layer_Simplified_Specification_Ver6.00.pdf&e=EN_SS1
// TODO(#348):  Write a class to represent a single Sd Card Block to make use
//              of block-related functions easier.
class SdInterface
   15b84:	b530      	push	{r4, r5, lr}
   15b86:	b083      	sub	sp, #12
   15b88:	4675      	mov	r5, lr
   15b8a:	9001      	str	r0, [sp, #4]
   15b8c:	462b      	mov	r3, r5
   15b8e:	4619      	mov	r1, r3
   15b90:	4807      	ldr	r0, [pc, #28]	; (15bb0 <SdInterface::SdInterface()+0x2c>)
   15b92:	f7fd fab1 	bl	130f8 <__cyg_profile_func_enter>
   15b96:	4a07      	ldr	r2, [pc, #28]	; (15bb4 <SdInterface::SdInterface()+0x30>)
   15b98:	9b01      	ldr	r3, [sp, #4]
   15b9a:	601a      	str	r2, [r3, #0]
   15b9c:	9c01      	ldr	r4, [sp, #4]
   15b9e:	462b      	mov	r3, r5
   15ba0:	4619      	mov	r1, r3
   15ba2:	4803      	ldr	r0, [pc, #12]	; (15bb0 <SdInterface::SdInterface()+0x2c>)
   15ba4:	f7fd fabc 	bl	13120 <__cyg_profile_func_exit>
   15ba8:	4623      	mov	r3, r4
   15baa:	4618      	mov	r0, r3
   15bac:	b003      	add	sp, #12
   15bae:	bd30      	pop	{r4, r5, pc}
   15bb0:	00015b85 	.word	0x00015b85
   15bb4:	000192d4 	.word	0x000192d4

00015bb8 <Sd::Sd(Sd::DebugSdCard_t, unsigned char, unsigned char, unsigned char, unsigned char)>:
  /// port that is broken out through the board's GPIO, allowing you to probe
  /// the chip select manually. To use this version instead of the main version,
  /// instantiate an Sd card instance like so:
  ///
  ///   Sd sdcard(Sd::DebugSdCard_t{});
  constexpr Sd(DebugSdCard_t, uint8_t port = 1, uint8_t pin = 8,
   15bb8:	b530      	push	{r4, r5, lr}
   15bba:	b083      	sub	sp, #12
   15bbc:	4675      	mov	r5, lr
   15bbe:	9001      	str	r0, [sp, #4]
   15bc0:	f88d 1000 	strb.w	r1, [sp]
   15bc4:	4611      	mov	r1, r2
   15bc6:	461a      	mov	r2, r3
   15bc8:	460b      	mov	r3, r1
   15bca:	f88d 3003 	strb.w	r3, [sp, #3]
   15bce:	4613      	mov	r3, r2
   15bd0:	f88d 3002 	strb.w	r3, [sp, #2]
   15bd4:	462b      	mov	r3, r5
   15bd6:	4619      	mov	r1, r3
   15bd8:	481d      	ldr	r0, [pc, #116]	; (15c50 <Sd::Sd(Sd::DebugSdCard_t, unsigned char, unsigned char, unsigned char, unsigned char)+0x98>)
   15bda:	f7fd fa8d 	bl	130f8 <__cyg_profile_func_enter>
      : ssp_interface_(&ssp_),
        ssp_(Ssp::Peripheral::kSsp2),
        chip_select_(&chip_select_pin_),
        chip_select_external_(&chip_select_external_pin_),
        chip_select_pin_(port, pin),
        chip_select_external_pin_(extport, extpin)
   15bde:	9b01      	ldr	r3, [sp, #4]
   15be0:	4618      	mov	r0, r3
   15be2:	f7ff ffcf 	bl	15b84 <SdInterface::SdInterface()>
   15be6:	4a1b      	ldr	r2, [pc, #108]	; (15c54 <Sd::Sd(Sd::DebugSdCard_t, unsigned char, unsigned char, unsigned char, unsigned char)+0x9c>)
   15be8:	9b01      	ldr	r3, [sp, #4]
   15bea:	601a      	str	r2, [r3, #0]
   15bec:	9b01      	ldr	r3, [sp, #4]
   15bee:	f103 0208 	add.w	r2, r3, #8
   15bf2:	9b01      	ldr	r3, [sp, #4]
   15bf4:	605a      	str	r2, [r3, #4]
   15bf6:	9b01      	ldr	r3, [sp, #4]
   15bf8:	3308      	adds	r3, #8
   15bfa:	2102      	movs	r1, #2
   15bfc:	4618      	mov	r0, r3
   15bfe:	f7ff fa87 	bl	15110 <Ssp::Ssp(Ssp::Peripheral)>
   15c02:	9b01      	ldr	r3, [sp, #4]
   15c04:	f103 0240 	add.w	r2, r3, #64	; 0x40
   15c08:	9b01      	ldr	r3, [sp, #4]
   15c0a:	639a      	str	r2, [r3, #56]	; 0x38
   15c0c:	9b01      	ldr	r3, [sp, #4]
   15c0e:	f103 0254 	add.w	r2, r3, #84	; 0x54
   15c12:	9b01      	ldr	r3, [sp, #4]
   15c14:	63da      	str	r2, [r3, #60]	; 0x3c
   15c16:	9b01      	ldr	r3, [sp, #4]
   15c18:	3340      	adds	r3, #64	; 0x40
   15c1a:	f89d 2002 	ldrb.w	r2, [sp, #2]
   15c1e:	f89d 1003 	ldrb.w	r1, [sp, #3]
   15c22:	4618      	mov	r0, r3
   15c24:	f7fe fd4c 	bl	146c0 <Gpio::Gpio(unsigned char, unsigned char)>
   15c28:	9b01      	ldr	r3, [sp, #4]
   15c2a:	3354      	adds	r3, #84	; 0x54
   15c2c:	f89d 201c 	ldrb.w	r2, [sp, #28]
   15c30:	f89d 1018 	ldrb.w	r1, [sp, #24]
   15c34:	4618      	mov	r0, r3
   15c36:	f7fe fd43 	bl	146c0 <Gpio::Gpio(unsigned char, unsigned char)>
  {
  }
   15c3a:	9c01      	ldr	r4, [sp, #4]
   15c3c:	462b      	mov	r3, r5
   15c3e:	4619      	mov	r1, r3
   15c40:	4803      	ldr	r0, [pc, #12]	; (15c50 <Sd::Sd(Sd::DebugSdCard_t, unsigned char, unsigned char, unsigned char, unsigned char)+0x98>)
   15c42:	f7fd fa6d 	bl	13120 <__cyg_profile_func_exit>
   15c46:	4623      	mov	r3, r4
   15c48:	4618      	mov	r0, r3
   15c4a:	b003      	add	sp, #12
   15c4c:	bd30      	pop	{r4, r5, pc}
   15c4e:	bf00      	nop
   15c50:	00015bb9 	.word	0x00015bb9
   15c54:	000192a8 	.word	0x000192a8

00015c58 <Sd::Initialize()>:

  void Initialize() override
   15c58:	b530      	push	{r4, r5, lr}
   15c5a:	b085      	sub	sp, #20
   15c5c:	4675      	mov	r5, lr
   15c5e:	9003      	str	r0, [sp, #12]
   15c60:	462b      	mov	r3, r5
   15c62:	4619      	mov	r1, r3
   15c64:	4827      	ldr	r0, [pc, #156]	; (15d04 <Sd::Initialize()+0xac>)
   15c66:	f7fd fa47 	bl	130f8 <__cyg_profile_func_enter>
  {
    LOG_DEBUG("Begin initialization:");
    LOG_DEBUG("Setting CS as output...");
    chip_select_->SetAsOutput();
   15c6a:	9b03      	ldr	r3, [sp, #12]
   15c6c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   15c6e:	9b03      	ldr	r3, [sp, #12]
   15c70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   15c72:	681b      	ldr	r3, [r3, #0]
   15c74:	3304      	adds	r3, #4
   15c76:	681b      	ldr	r3, [r3, #0]
   15c78:	4610      	mov	r0, r2
   15c7a:	4798      	blx	r3
    chip_select_->SetHigh();
   15c7c:	9b03      	ldr	r3, [sp, #12]
   15c7e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   15c80:	9b03      	ldr	r3, [sp, #12]
   15c82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   15c84:	681b      	ldr	r3, [r3, #0]
   15c86:	330c      	adds	r3, #12
   15c88:	681b      	ldr	r3, [r3, #0]
   15c8a:	4610      	mov	r0, r2
   15c8c:	4798      	blx	r3
    chip_select_external_->SetAsOutput();
   15c8e:	9b03      	ldr	r3, [sp, #12]
   15c90:	6bda      	ldr	r2, [r3, #60]	; 0x3c
   15c92:	9b03      	ldr	r3, [sp, #12]
   15c94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   15c96:	681b      	ldr	r3, [r3, #0]
   15c98:	3304      	adds	r3, #4
   15c9a:	681b      	ldr	r3, [r3, #0]
   15c9c:	4610      	mov	r0, r2
   15c9e:	4798      	blx	r3
    chip_select_external_->SetHigh();
   15ca0:	9b03      	ldr	r3, [sp, #12]
   15ca2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
   15ca4:	9b03      	ldr	r3, [sp, #12]
   15ca6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   15ca8:	681b      	ldr	r3, [r3, #0]
   15caa:	330c      	adds	r3, #12
   15cac:	681b      	ldr	r3, [r3, #0]
   15cae:	4610      	mov	r0, r2
   15cb0:	4798      	blx	r3

    LOG_DEBUG("Setting SSP Clock Speed...");
    ssp_interface_->SetClock(false, false, 14, 2);  // 400kHz
   15cb2:	9b03      	ldr	r3, [sp, #12]
   15cb4:	6858      	ldr	r0, [r3, #4]
   15cb6:	9b03      	ldr	r3, [sp, #12]
   15cb8:	685b      	ldr	r3, [r3, #4]
   15cba:	681b      	ldr	r3, [r3, #0]
   15cbc:	3318      	adds	r3, #24
   15cbe:	681c      	ldr	r4, [r3, #0]
   15cc0:	2302      	movs	r3, #2
   15cc2:	9300      	str	r3, [sp, #0]
   15cc4:	230e      	movs	r3, #14
   15cc6:	2200      	movs	r2, #0
   15cc8:	2100      	movs	r1, #0
   15cca:	47a0      	blx	r4

    LOG_DEBUG("Setting Peripheral Mode...");
    ssp_interface_->SetPeripheralMode(Ssp::MasterSlaveMode::kMaster,
   15ccc:	9b03      	ldr	r3, [sp, #12]
   15cce:	6858      	ldr	r0, [r3, #4]
   15cd0:	9b03      	ldr	r3, [sp, #12]
   15cd2:	685b      	ldr	r3, [r3, #4]
                                      Ssp::FrameMode::kSpi,
                                      Ssp::DataSize::kEight);
   15cd4:	681b      	ldr	r3, [r3, #0]
   15cd6:	3310      	adds	r3, #16
   15cd8:	681c      	ldr	r4, [r3, #0]
    ssp_interface_->SetPeripheralMode(Ssp::MasterSlaveMode::kMaster,
   15cda:	2307      	movs	r3, #7
   15cdc:	2200      	movs	r2, #0
   15cde:	2100      	movs	r1, #0
   15ce0:	47a0      	blx	r4

    LOG_DEBUG("Starting SSP Peripheral...");
    ssp_interface_->Initialize();
   15ce2:	9b03      	ldr	r3, [sp, #12]
   15ce4:	685a      	ldr	r2, [r3, #4]
   15ce6:	9b03      	ldr	r3, [sp, #12]
   15ce8:	685b      	ldr	r3, [r3, #4]
   15cea:	681b      	ldr	r3, [r3, #0]
   15cec:	681b      	ldr	r3, [r3, #0]
   15cee:	4610      	mov	r0, r2
   15cf0:	4798      	blx	r3
   15cf2:	462b      	mov	r3, r5
   15cf4:	4619      	mov	r1, r3
   15cf6:	4803      	ldr	r0, [pc, #12]	; (15d04 <Sd::Initialize()+0xac>)
   15cf8:	f7fd fa12 	bl	13120 <__cyg_profile_func_exit>
  }
   15cfc:	bf00      	nop
   15cfe:	b005      	add	sp, #20
   15d00:	bd30      	pop	{r4, r5, pc}
   15d02:	bf00      	nop
   15d04:	00015c59 	.word	0x00015c59

00015d08 <Sd::Mount(SdInterface::CardInfo_t*)>:

  // Initialize SD Card
  // TODO(#349): Split method into smaller piece with single jobs
  bool Mount(CardInfo_t * sd) override
   15d08:	b530      	push	{r4, r5, lr}
   15d0a:	b08b      	sub	sp, #44	; 0x2c
   15d0c:	4675      	mov	r5, lr
   15d0e:	9003      	str	r0, [sp, #12]
   15d10:	9102      	str	r1, [sp, #8]
   15d12:	462b      	mov	r3, r5
   15d14:	4619      	mov	r1, r3
   15d16:	48a7      	ldr	r0, [pc, #668]	; (15fb4 <Sd::Mount(SdInterface::CardInfo_t*)+0x2ac>)
   15d18:	f7fd f9ee 	bl	130f8 <__cyg_profile_func_enter>
  {
    uint8_t tries     = 0;
   15d1c:	2300      	movs	r3, #0
   15d1e:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    bool card_is_idle = false;
   15d22:	2300      	movs	r3, #0
   15d24:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26

    // Reset the card and force it to go to idle state at <400kHz with a
    // CMD0 + (active-low) CS
    LOG_DEBUG("Sending SD Card to Idle State...");
    sd->response.length = SendCmd(Command::kReset, 0x00000000,
                                  sd->response.data.byte, 100, KeepAlive::kYes);
   15d28:	9b03      	ldr	r3, [sp, #12]
   15d2a:	681b      	ldr	r3, [r3, #0]
   15d2c:	681c      	ldr	r4, [r3, #0]
    sd->response.length = SendCmd(Command::kReset, 0x00000000,
   15d2e:	9b02      	ldr	r3, [sp, #8]
   15d30:	f103 0208 	add.w	r2, r3, #8
   15d34:	2301      	movs	r3, #1
   15d36:	9301      	str	r3, [sp, #4]
   15d38:	2364      	movs	r3, #100	; 0x64
   15d3a:	9300      	str	r3, [sp, #0]
   15d3c:	4613      	mov	r3, r2
   15d3e:	2200      	movs	r2, #0
   15d40:	2140      	movs	r1, #64	; 0x40
   15d42:	9803      	ldr	r0, [sp, #12]
   15d44:	47a0      	blx	r4
   15d46:	4602      	mov	r2, r0
   15d48:	9b02      	ldr	r3, [sp, #8]
   15d4a:	611a      	str	r2, [r3, #16]

    // Reset the card again to trigger SPI mode
    LOG_DEBUG("Initializing SPI mode...");
    do
    {
      tries++;
   15d4c:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   15d50:	3301      	adds	r3, #1
   15d52:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
      sd->response.length = SendCmd(
          Command::kReset, 0x00, sd->response.data.byte, 100, KeepAlive::kYes);
   15d56:	9b03      	ldr	r3, [sp, #12]
   15d58:	681b      	ldr	r3, [r3, #0]
   15d5a:	681c      	ldr	r4, [r3, #0]
      sd->response.length = SendCmd(
   15d5c:	9b02      	ldr	r3, [sp, #8]
   15d5e:	f103 0208 	add.w	r2, r3, #8
   15d62:	2301      	movs	r3, #1
   15d64:	9301      	str	r3, [sp, #4]
   15d66:	2364      	movs	r3, #100	; 0x64
   15d68:	9300      	str	r3, [sp, #0]
   15d6a:	4613      	mov	r3, r2
   15d6c:	2200      	movs	r2, #0
   15d6e:	2140      	movs	r1, #64	; 0x40
   15d70:	9803      	ldr	r0, [sp, #12]
   15d72:	47a0      	blx	r4
   15d74:	4602      	mov	r2, r0
   15d76:	9b02      	ldr	r3, [sp, #8]
   15d78:	611a      	str	r2, [r3, #16]

      // Check if R1 response frame's bit 1 is set (to ensure that
      // card is in idle state)
      if (sd->response.data.byte[0] != 0xFF &&
   15d7a:	9b02      	ldr	r3, [sp, #8]
   15d7c:	7a1b      	ldrb	r3, [r3, #8]
   15d7e:	2bff      	cmp	r3, #255	; 0xff
   15d80:	d008      	beq.n	15d94 <Sd::Mount(SdInterface::CardInfo_t*)+0x8c>
          (sd->response.data.byte[0] & 0x01) == 0x01)
   15d82:	9b02      	ldr	r3, [sp, #8]
   15d84:	7a1b      	ldrb	r3, [r3, #8]
   15d86:	f003 0301 	and.w	r3, r3, #1
      if (sd->response.data.byte[0] != 0xFF &&
   15d8a:	2b00      	cmp	r3, #0
   15d8c:	d002      	beq.n	15d94 <Sd::Mount(SdInterface::CardInfo_t*)+0x8c>
      {
        // If it is, we can move on; otherwise, keep trying for a set
        // amount of tries
        card_is_idle = true;
   15d8e:	2301      	movs	r3, #1
   15d90:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
      }
      Delay(10);
   15d94:	f04f 000a 	mov.w	r0, #10
   15d98:	f04f 0100 	mov.w	r1, #0
   15d9c:	f7fa fe24 	bl	109e8 <Delay(unsigned long long)>
    } while (tries < kBusTimeout && !card_is_idle);
   15da0:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   15da4:	2bf9      	cmp	r3, #249	; 0xf9
   15da6:	d804      	bhi.n	15db2 <Sd::Mount(SdInterface::CardInfo_t*)+0xaa>
   15da8:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
   15dac:	2b00      	cmp	r3, #0
   15dae:	d100      	bne.n	15db2 <Sd::Mount(SdInterface::CardInfo_t*)+0xaa>
    do
   15db0:	e7cc      	b.n	15d4c <Sd::Mount(SdInterface::CardInfo_t*)+0x44>
    LOG_DEBUG("%d tries", tries);
    if (tries >= kBusTimeout)
   15db2:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   15db6:	2bf9      	cmp	r3, #249	; 0xf9
   15db8:	d91b      	bls.n	15df2 <Sd::Mount(SdInterface::CardInfo_t*)+0xea>
    {
      LOG_ERROR("Failed to initiate SPI mode within timeout. Aborting!");
   15dba:	f240 13ff 	movw	r3, #511	; 0x1ff
   15dbe:	4a7e      	ldr	r2, [pc, #504]	; (15fb8 <Sd::Mount(SdInterface::CardInfo_t*)+0x2b0>)
   15dc0:	497e      	ldr	r1, [pc, #504]	; (15fbc <Sd::Mount(SdInterface::CardInfo_t*)+0x2b4>)
   15dc2:	487f      	ldr	r0, [pc, #508]	; (15fc0 <Sd::Mount(SdInterface::CardInfo_t*)+0x2b8>)
   15dc4:	f7fe fbf6 	bl	145b4 <printf>
      sd->response.length = SendCmd(Command::kGarbage, 0xFFFFFFFF,
                                    sd->response.data.byte, 0, KeepAlive::kNo);
   15dc8:	9b03      	ldr	r3, [sp, #12]
   15dca:	681b      	ldr	r3, [r3, #0]
   15dcc:	681c      	ldr	r4, [r3, #0]
      sd->response.length = SendCmd(Command::kGarbage, 0xFFFFFFFF,
   15dce:	9b02      	ldr	r3, [sp, #8]
   15dd0:	f103 0208 	add.w	r2, r3, #8
   15dd4:	2300      	movs	r3, #0
   15dd6:	9301      	str	r3, [sp, #4]
   15dd8:	2300      	movs	r3, #0
   15dda:	9300      	str	r3, [sp, #0]
   15ddc:	4613      	mov	r3, r2
   15dde:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   15de2:	21ff      	movs	r1, #255	; 0xff
   15de4:	9803      	ldr	r0, [sp, #12]
   15de6:	47a0      	blx	r4
   15de8:	4602      	mov	r2, r0
   15dea:	9b02      	ldr	r3, [sp, #8]
   15dec:	611a      	str	r2, [r3, #16]
      return false;
   15dee:	2400      	movs	r4, #0
   15df0:	e10c      	b.n	1600c <Sd::Mount(SdInterface::CardInfo_t*)+0x304>
    }

    // Send the host's supported voltage (3.3V) and ask if the card
    // supports it
    LOG_DEBUG("Checking Current SD Card Voltage Level...");
    constexpr uint8_t kCheckPattern = 0xAB;
   15df2:	23ab      	movs	r3, #171	; 0xab
   15df4:	f88d 301f 	strb.w	r3, [sp, #31]
    uint64_t supported_voltage      = 0x00000001;
   15df8:	f04f 0301 	mov.w	r3, #1
   15dfc:	f04f 0400 	mov.w	r4, #0
   15e00:	e9cd 3404 	strd	r3, r4, [sp, #16]
    sd->response.length =
        SendCmd(Command::kGetOp,
                static_cast<uint32_t>((supported_voltage << 8) | kCheckPattern),
                sd->response.data.byte, 100, KeepAlive::kYes);
   15e04:	9b03      	ldr	r3, [sp, #12]
   15e06:	681b      	ldr	r3, [r3, #0]
   15e08:	681c      	ldr	r4, [r3, #0]
                static_cast<uint32_t>((supported_voltage << 8) | kCheckPattern),
   15e0a:	9b04      	ldr	r3, [sp, #16]
   15e0c:	021b      	lsls	r3, r3, #8
        SendCmd(Command::kGetOp,
   15e0e:	f043 02ab 	orr.w	r2, r3, #171	; 0xab
   15e12:	9b02      	ldr	r3, [sp, #8]
   15e14:	f103 0108 	add.w	r1, r3, #8
   15e18:	2301      	movs	r3, #1
   15e1a:	9301      	str	r3, [sp, #4]
   15e1c:	2364      	movs	r3, #100	; 0x64
   15e1e:	9300      	str	r3, [sp, #0]
   15e20:	460b      	mov	r3, r1
   15e22:	2148      	movs	r1, #72	; 0x48
   15e24:	9803      	ldr	r0, [sp, #12]
   15e26:	47a0      	blx	r4
   15e28:	4602      	mov	r2, r0
    sd->response.length =
   15e2a:	9b02      	ldr	r3, [sp, #8]
   15e2c:	611a      	str	r2, [r3, #16]
    if (sd->response.data.byte[4] != kCheckPattern)
   15e2e:	9b02      	ldr	r3, [sp, #8]
   15e30:	7b1b      	ldrb	r3, [r3, #12]
   15e32:	2bab      	cmp	r3, #171	; 0xab
   15e34:	d01b      	beq.n	15e6e <Sd::Mount(SdInterface::CardInfo_t*)+0x166>
    {
      // If the last byte is not an exact echo of the LSB of the kGetOp
      // command's argument, this response is invalid
      LOG_ERROR("Response integrity check failed. Aborting!");
   15e36:	f240 2312 	movw	r3, #530	; 0x212
   15e3a:	4a5f      	ldr	r2, [pc, #380]	; (15fb8 <Sd::Mount(SdInterface::CardInfo_t*)+0x2b0>)
   15e3c:	4961      	ldr	r1, [pc, #388]	; (15fc4 <Sd::Mount(SdInterface::CardInfo_t*)+0x2bc>)
   15e3e:	4862      	ldr	r0, [pc, #392]	; (15fc8 <Sd::Mount(SdInterface::CardInfo_t*)+0x2c0>)
   15e40:	f7fe fbb8 	bl	145b4 <printf>
      sd->response.length = SendCmd(Command::kGarbage, 0xFFFFFFFF,
                                    sd->response.data.byte, 0, KeepAlive::kNo);
   15e44:	9b03      	ldr	r3, [sp, #12]
   15e46:	681b      	ldr	r3, [r3, #0]
   15e48:	681c      	ldr	r4, [r3, #0]
      sd->response.length = SendCmd(Command::kGarbage, 0xFFFFFFFF,
   15e4a:	9b02      	ldr	r3, [sp, #8]
   15e4c:	f103 0208 	add.w	r2, r3, #8
   15e50:	2300      	movs	r3, #0
   15e52:	9301      	str	r3, [sp, #4]
   15e54:	2300      	movs	r3, #0
   15e56:	9300      	str	r3, [sp, #0]
   15e58:	4613      	mov	r3, r2
   15e5a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   15e5e:	21ff      	movs	r1, #255	; 0xff
   15e60:	9803      	ldr	r0, [sp, #12]
   15e62:	47a0      	blx	r4
   15e64:	4602      	mov	r2, r0
   15e66:	9b02      	ldr	r3, [sp, #8]
   15e68:	611a      	str	r2, [r3, #16]
      return false;
   15e6a:	2400      	movs	r4, #0
   15e6c:	e0ce      	b.n	1600c <Sd::Mount(SdInterface::CardInfo_t*)+0x304>
    }
    else if (sd->response.data.byte[3] &
   15e6e:	9b02      	ldr	r3, [sp, #8]
   15e70:	7adb      	ldrb	r3, [r3, #11]
   15e72:	4619      	mov	r1, r3
             (supported_voltage == static_cast<uint64_t>(0x00)))
   15e74:	9a04      	ldr	r2, [sp, #16]
   15e76:	9b05      	ldr	r3, [sp, #20]
   15e78:	4313      	orrs	r3, r2
   15e7a:	2b00      	cmp	r3, #0
   15e7c:	bf0c      	ite	eq
   15e7e:	2301      	moveq	r3, #1
   15e80:	2300      	movne	r3, #0
   15e82:	b2db      	uxtb	r3, r3
    else if (sd->response.data.byte[3] &
   15e84:	400b      	ands	r3, r1
   15e86:	2b00      	cmp	r3, #0
   15e88:	d01b      	beq.n	15ec2 <Sd::Mount(SdInterface::CardInfo_t*)+0x1ba>
    {
      // If the 2nd-to-last byte of the reponse AND'ed with our host
      // device's supported voltage range is 0x00, the SD card doesn't
      // support our device's operating voltage
      LOG_ERROR("Unsupported voltage in use. Aborting!");
   15e8a:	f240 231d 	movw	r3, #541	; 0x21d
   15e8e:	4a4a      	ldr	r2, [pc, #296]	; (15fb8 <Sd::Mount(SdInterface::CardInfo_t*)+0x2b0>)
   15e90:	494e      	ldr	r1, [pc, #312]	; (15fcc <Sd::Mount(SdInterface::CardInfo_t*)+0x2c4>)
   15e92:	484f      	ldr	r0, [pc, #316]	; (15fd0 <Sd::Mount(SdInterface::CardInfo_t*)+0x2c8>)
   15e94:	f7fe fb8e 	bl	145b4 <printf>
      sd->response.length = SendCmd(Command::kGarbage, 0xFFFFFFFF,
                                    sd->response.data.byte, 0, KeepAlive::kNo);
   15e98:	9b03      	ldr	r3, [sp, #12]
   15e9a:	681b      	ldr	r3, [r3, #0]
   15e9c:	681c      	ldr	r4, [r3, #0]
      sd->response.length = SendCmd(Command::kGarbage, 0xFFFFFFFF,
   15e9e:	9b02      	ldr	r3, [sp, #8]
   15ea0:	f103 0208 	add.w	r2, r3, #8
   15ea4:	2300      	movs	r3, #0
   15ea6:	9301      	str	r3, [sp, #4]
   15ea8:	2300      	movs	r3, #0
   15eaa:	9300      	str	r3, [sp, #0]
   15eac:	4613      	mov	r3, r2
   15eae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   15eb2:	21ff      	movs	r1, #255	; 0xff
   15eb4:	9803      	ldr	r0, [sp, #12]
   15eb6:	47a0      	blx	r4
   15eb8:	4602      	mov	r2, r0
   15eba:	9b02      	ldr	r3, [sp, #8]
   15ebc:	611a      	str	r2, [r3, #16]
      return false;
   15ebe:	2400      	movs	r4, #0
   15ec0:	e0a4      	b.n	1600c <Sd::Mount(SdInterface::CardInfo_t*)+0x304>
    }

    // Indicate that the host supports SDHC/SDXC and wait for card to
    // shift out of idle state
    LOG_DEBUG("Expressing High-Capacity SD Card Support...");
    tries = 0;
   15ec2:	2300      	movs	r3, #0
   15ec4:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    do
    {
      // Send host's operating conditions
      sd->response.length =
          SendCmd(Command::kInit, 0x40000000, sd->response.data.byte, 100,
                  KeepAlive::kYes);
   15ec8:	9b03      	ldr	r3, [sp, #12]
   15eca:	681b      	ldr	r3, [r3, #0]
   15ecc:	681c      	ldr	r4, [r3, #0]
          SendCmd(Command::kInit, 0x40000000, sd->response.data.byte, 100,
   15ece:	9b02      	ldr	r3, [sp, #8]
   15ed0:	f103 0208 	add.w	r2, r3, #8
   15ed4:	2301      	movs	r3, #1
   15ed6:	9301      	str	r3, [sp, #4]
   15ed8:	2364      	movs	r3, #100	; 0x64
   15eda:	9300      	str	r3, [sp, #0]
   15edc:	4613      	mov	r3, r2
   15ede:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   15ee2:	2141      	movs	r1, #65	; 0x41
   15ee4:	9803      	ldr	r0, [sp, #12]
   15ee6:	47a0      	blx	r4
   15ee8:	4602      	mov	r2, r0
      sd->response.length =
   15eea:	9b02      	ldr	r3, [sp, #8]
   15eec:	611a      	str	r2, [r3, #16]
      tries++;
   15eee:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   15ef2:	3301      	adds	r3, #1
   15ef4:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    } while (tries < kBusTimeout && sd->response.data.byte[0] & 0x01);
   15ef8:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   15efc:	2bf9      	cmp	r3, #249	; 0xf9
   15efe:	d806      	bhi.n	15f0e <Sd::Mount(SdInterface::CardInfo_t*)+0x206>
   15f00:	9b02      	ldr	r3, [sp, #8]
   15f02:	7a1b      	ldrb	r3, [r3, #8]
   15f04:	f003 0301 	and.w	r3, r3, #1
   15f08:	2b00      	cmp	r3, #0
   15f0a:	d000      	beq.n	15f0e <Sd::Mount(SdInterface::CardInfo_t*)+0x206>
    do
   15f0c:	e7dc      	b.n	15ec8 <Sd::Mount(SdInterface::CardInfo_t*)+0x1c0>
    if (tries == kBusTimeout)
   15f0e:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   15f12:	2bfa      	cmp	r3, #250	; 0xfa
   15f14:	d11b      	bne.n	15f4e <Sd::Mount(SdInterface::CardInfo_t*)+0x246>
    {
      LOG_ERROR("SD Card timed out. Aborting!");
   15f16:	f240 2331 	movw	r3, #561	; 0x231
   15f1a:	4a27      	ldr	r2, [pc, #156]	; (15fb8 <Sd::Mount(SdInterface::CardInfo_t*)+0x2b0>)
   15f1c:	492d      	ldr	r1, [pc, #180]	; (15fd4 <Sd::Mount(SdInterface::CardInfo_t*)+0x2cc>)
   15f1e:	482e      	ldr	r0, [pc, #184]	; (15fd8 <Sd::Mount(SdInterface::CardInfo_t*)+0x2d0>)
   15f20:	f7fe fb48 	bl	145b4 <printf>
      sd->response.length = SendCmd(Command::kGarbage, 0xFFFFFFFF,
                                    sd->response.data.byte, 0, KeepAlive::kNo);
   15f24:	9b03      	ldr	r3, [sp, #12]
   15f26:	681b      	ldr	r3, [r3, #0]
   15f28:	681c      	ldr	r4, [r3, #0]
      sd->response.length = SendCmd(Command::kGarbage, 0xFFFFFFFF,
   15f2a:	9b02      	ldr	r3, [sp, #8]
   15f2c:	f103 0208 	add.w	r2, r3, #8
   15f30:	2300      	movs	r3, #0
   15f32:	9301      	str	r3, [sp, #4]
   15f34:	2300      	movs	r3, #0
   15f36:	9300      	str	r3, [sp, #0]
   15f38:	4613      	mov	r3, r2
   15f3a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   15f3e:	21ff      	movs	r1, #255	; 0xff
   15f40:	9803      	ldr	r0, [sp, #12]
   15f42:	47a0      	blx	r4
   15f44:	4602      	mov	r2, r0
   15f46:	9b02      	ldr	r3, [sp, #8]
   15f48:	611a      	str	r2, [r3, #16]
      return false;
   15f4a:	2400      	movs	r4, #0
   15f4c:	e05e      	b.n	1600c <Sd::Mount(SdInterface::CardInfo_t*)+0x304>
    // After card is ready, acquire card capacity info using kGetOcr a
    // second time
    LOG_DEBUG("Reading Card Capacity Information...");
    // Read CCS
    sd->response.length = SendCmd(Command::kGetOcr, 0x00,
                                  sd->response.data.byte, 100, KeepAlive::kYes);
   15f4e:	9b03      	ldr	r3, [sp, #12]
   15f50:	681b      	ldr	r3, [r3, #0]
   15f52:	681c      	ldr	r4, [r3, #0]
    sd->response.length = SendCmd(Command::kGetOcr, 0x00,
   15f54:	9b02      	ldr	r3, [sp, #8]
   15f56:	f103 0208 	add.w	r2, r3, #8
   15f5a:	2301      	movs	r3, #1
   15f5c:	9301      	str	r3, [sp, #4]
   15f5e:	2364      	movs	r3, #100	; 0x64
   15f60:	9300      	str	r3, [sp, #0]
   15f62:	4613      	mov	r3, r2
   15f64:	2200      	movs	r2, #0
   15f66:	217a      	movs	r1, #122	; 0x7a
   15f68:	9803      	ldr	r0, [sp, #12]
   15f6a:	47a0      	blx	r4
   15f6c:	4602      	mov	r2, r0
   15f6e:	9b02      	ldr	r3, [sp, #8]
   15f70:	611a      	str	r2, [r3, #16]
    if (sd->response.data.byte[1] & 0x40)
   15f72:	9b02      	ldr	r3, [sp, #8]
   15f74:	7a5b      	ldrb	r3, [r3, #9]
   15f76:	f003 0340 	and.w	r3, r3, #64	; 0x40
   15f7a:	2b00      	cmp	r3, #0
   15f7c:	d003      	beq.n	15f86 <Sd::Mount(SdInterface::CardInfo_t*)+0x27e>
    {
      // The card is either high or extended capacity
      LOG_DEBUG("SD Card is HC/XC");
      sd->type = Type::kSDHC;
   15f7e:	9b02      	ldr	r3, [sp, #8]
   15f80:	2201      	movs	r2, #1
   15f82:	605a      	str	r2, [r3, #4]
   15f84:	e002      	b.n	15f8c <Sd::Mount(SdInterface::CardInfo_t*)+0x284>
    }
    else
    {
      // The card is standard capacity
      LOG_DEBUG("SD Card is SC");
      sd->type = Type::kSDSC;
   15f86:	9b02      	ldr	r3, [sp, #8]
   15f88:	2200      	movs	r2, #0
   15f8a:	605a      	str	r2, [r3, #4]
    }

    // Store OCR information
    for (int i = 0; i < 4; i++)
   15f8c:	2300      	movs	r3, #0
   15f8e:	9308      	str	r3, [sp, #32]
   15f90:	9b08      	ldr	r3, [sp, #32]
   15f92:	2b03      	cmp	r3, #3
   15f94:	dc22      	bgt.n	15fdc <Sd::Mount(SdInterface::CardInfo_t*)+0x2d4>
    {
      // ensure OCR doesn't capture the R1 section of the response
      sd->ocr.byte[i] = sd->response.data.byte[i + 1];
   15f96:	9b08      	ldr	r3, [sp, #32]
   15f98:	3301      	adds	r3, #1
   15f9a:	9a02      	ldr	r2, [sp, #8]
   15f9c:	4413      	add	r3, r2
   15f9e:	7a19      	ldrb	r1, [r3, #8]
   15fa0:	9a02      	ldr	r2, [sp, #8]
   15fa2:	9b08      	ldr	r3, [sp, #32]
   15fa4:	4413      	add	r3, r2
   15fa6:	460a      	mov	r2, r1
   15fa8:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < 4; i++)
   15faa:	9b08      	ldr	r3, [sp, #32]
   15fac:	3301      	adds	r3, #1
   15fae:	9308      	str	r3, [sp, #32]
   15fb0:	e7ee      	b.n	15f90 <Sd::Mount(SdInterface::CardInfo_t*)+0x288>
   15fb2:	bf00      	nop
   15fb4:	00015d09 	.word	0x00015d09
   15fb8:	000194f0 	.word	0x000194f0
   15fbc:	00019208 	.word	0x00019208
   15fc0:	00018820 	.word	0x00018820
   15fc4:	00019210 	.word	0x00019210
   15fc8:	00018890 	.word	0x00018890
   15fcc:	00019218 	.word	0x00019218
   15fd0:	000188f4 	.word	0x000188f4
   15fd4:	00019220 	.word	0x00019220
   15fd8:	00018954 	.word	0x00018954
    }

    // If card is SDSC, manually set its block size
    if (sd->type == Type::kSDSC)
   15fdc:	9b02      	ldr	r3, [sp, #8]
   15fde:	685b      	ldr	r3, [r3, #4]
   15fe0:	2b00      	cmp	r3, #0
   15fe2:	d112      	bne.n	1600a <Sd::Mount(SdInterface::CardInfo_t*)+0x302>
    {
      // Send requested byte size
      sd->response.length =
          SendCmd(Command::kChgBlkLen, static_cast<uint32_t>(kBlockSize),
                  sd->response.data.byte, 0, KeepAlive::kYes);
   15fe4:	9b03      	ldr	r3, [sp, #12]
   15fe6:	681b      	ldr	r3, [r3, #0]
   15fe8:	681c      	ldr	r4, [r3, #0]
          SendCmd(Command::kChgBlkLen, static_cast<uint32_t>(kBlockSize),
   15fea:	9b02      	ldr	r3, [sp, #8]
   15fec:	f103 0208 	add.w	r2, r3, #8
   15ff0:	2301      	movs	r3, #1
   15ff2:	9301      	str	r3, [sp, #4]
   15ff4:	2300      	movs	r3, #0
   15ff6:	9300      	str	r3, [sp, #0]
   15ff8:	4613      	mov	r3, r2
   15ffa:	f44f 7200 	mov.w	r2, #512	; 0x200
   15ffe:	2150      	movs	r1, #80	; 0x50
   16000:	9803      	ldr	r0, [sp, #12]
   16002:	47a0      	blx	r4
   16004:	4602      	mov	r2, r0
      sd->response.length =
   16006:	9b02      	ldr	r3, [sp, #8]
   16008:	611a      	str	r2, [r3, #16]
    }

    return true;
   1600a:	2401      	movs	r4, #1
   1600c:	462b      	mov	r3, r5
   1600e:	4619      	mov	r1, r3
   16010:	4803      	ldr	r0, [pc, #12]	; (16020 <Sd::Mount(SdInterface::CardInfo_t*)+0x318>)
   16012:	f7fd f885 	bl	13120 <__cyg_profile_func_exit>
   16016:	4623      	mov	r3, r4
  }
   16018:	4618      	mov	r0, r3
   1601a:	b00b      	add	sp, #44	; 0x2c
   1601c:	bd30      	pop	{r4, r5, pc}
   1601e:	bf00      	nop
   16020:	00015d09 	.word	0x00015d09

00016024 <Sd::ToBool(bool)>:

  // Returns string to represent a boolean value
  const char * ToBool(bool condition)
   16024:	b530      	push	{r4, r5, lr}
   16026:	b083      	sub	sp, #12
   16028:	4675      	mov	r5, lr
   1602a:	9001      	str	r0, [sp, #4]
   1602c:	460b      	mov	r3, r1
   1602e:	f88d 3003 	strb.w	r3, [sp, #3]
   16032:	462b      	mov	r3, r5
   16034:	4619      	mov	r1, r3
   16036:	4809      	ldr	r0, [pc, #36]	; (1605c <Sd::ToBool(bool)+0x38>)
   16038:	f7fd f85e 	bl	130f8 <__cyg_profile_func_enter>
  {
    return (condition) ? "true" : "false";
   1603c:	f89d 3003 	ldrb.w	r3, [sp, #3]
   16040:	2b00      	cmp	r3, #0
   16042:	d001      	beq.n	16048 <Sd::ToBool(bool)+0x24>
   16044:	4c06      	ldr	r4, [pc, #24]	; (16060 <Sd::ToBool(bool)+0x3c>)
   16046:	e000      	b.n	1604a <Sd::ToBool(bool)+0x26>
   16048:	4c06      	ldr	r4, [pc, #24]	; (16064 <Sd::ToBool(bool)+0x40>)
   1604a:	462b      	mov	r3, r5
   1604c:	4619      	mov	r1, r3
   1604e:	4803      	ldr	r0, [pc, #12]	; (1605c <Sd::ToBool(bool)+0x38>)
   16050:	f7fd f866 	bl	13120 <__cyg_profile_func_exit>
   16054:	4623      	mov	r3, r4
  }
   16056:	4618      	mov	r0, r3
   16058:	b003      	add	sp, #12
   1605a:	bd30      	pop	{r4, r5, pc}
   1605c:	00016025 	.word	0x00016025
   16060:	000189ac 	.word	0x000189ac
   16064:	000189b4 	.word	0x000189b4

00016068 <Sd::WaitToReadBlock()>:

  // Waits for the card to respond after a single or multi block read cmd is
  // sent.
  void WaitToReadBlock()
   16068:	b510      	push	{r4, lr}
   1606a:	b084      	sub	sp, #16
   1606c:	4674      	mov	r4, lr
   1606e:	9001      	str	r0, [sp, #4]
   16070:	4623      	mov	r3, r4
   16072:	4619      	mov	r1, r3
   16074:	4814      	ldr	r0, [pc, #80]	; (160c8 <Sd::WaitToReadBlock()+0x60>)
   16076:	f7fd f83f 	bl	130f8 <__cyg_profile_func_enter>
    // Bit 4 -->  If set, card is locked
    // Bit 3 -->  If set, address is out or range
    // Bit 2 -->  If set, card ECC failed
    // Bit 1 -->  If set, CC error occurred
    // Bit 0 -->  If set, a generic error occurred
    uint8_t wait_byte = 0x00;
   1607a:	2300      	movs	r3, #0
   1607c:	f88d 300f 	strb.w	r3, [sp, #15]
    do
    {
      wait_byte = static_cast<uint8_t>(ssp_interface_->Transfer(0xFF));
   16080:	9b01      	ldr	r3, [sp, #4]
   16082:	685a      	ldr	r2, [r3, #4]
   16084:	9b01      	ldr	r3, [sp, #4]
   16086:	685b      	ldr	r3, [r3, #4]
   16088:	681b      	ldr	r3, [r3, #0]
   1608a:	3308      	adds	r3, #8
   1608c:	681b      	ldr	r3, [r3, #0]
   1608e:	21ff      	movs	r1, #255	; 0xff
   16090:	4610      	mov	r0, r2
   16092:	4798      	blx	r3
   16094:	4603      	mov	r3, r0
   16096:	f88d 300f 	strb.w	r3, [sp, #15]
    } while (wait_byte != 0xFE && (wait_byte & 0xE0) != 0x00);
   1609a:	f89d 300f 	ldrb.w	r3, [sp, #15]
   1609e:	2bfe      	cmp	r3, #254	; 0xfe
   160a0:	d006      	beq.n	160b0 <Sd::WaitToReadBlock()+0x48>
   160a2:	f89d 300f 	ldrb.w	r3, [sp, #15]
   160a6:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
   160aa:	2b00      	cmp	r3, #0
   160ac:	d000      	beq.n	160b0 <Sd::WaitToReadBlock()+0x48>
    do
   160ae:	e7e7      	b.n	16080 <Sd::WaitToReadBlock()+0x18>

    // DEBUG: Check the value of the wait byte
    if (wait_byte == 0xFE)
   160b0:	f89d 300f 	ldrb.w	r3, [sp, #15]
   160b4:	2bfe      	cmp	r3, #254	; 0xfe
   160b6:	4623      	mov	r3, r4
   160b8:	4619      	mov	r1, r3
   160ba:	4803      	ldr	r0, [pc, #12]	; (160c8 <Sd::WaitToReadBlock()+0x60>)
   160bc:	f7fd f830 	bl	13120 <__cyg_profile_func_exit>
      LOG_DEBUG("Addr Out of Range?: %s", ToBool(wait_byte & 0x08));
      LOG_DEBUG("Card ECC Failed?: %s", ToBool(wait_byte & 0x04));
      LOG_DEBUG("CC Error?: %s", ToBool(wait_byte & 0x02));
      LOG_DEBUG("Error?: %s", ToBool(wait_byte & 0x01));
    }
  }
   160c0:	bf00      	nop
   160c2:	b004      	add	sp, #16
   160c4:	bd10      	pop	{r4, pc}
   160c6:	bf00      	nop
   160c8:	00016069 	.word	0x00016069

000160cc <Sd::WaitWhileBusy()>:

  // Waits for the card to be ready to receive a new block after one has
  // been written or erased
  void WaitWhileBusy()
   160cc:	b510      	push	{r4, lr}
   160ce:	b084      	sub	sp, #16
   160d0:	4674      	mov	r4, lr
   160d2:	9001      	str	r0, [sp, #4]
   160d4:	4623      	mov	r3, r4
   160d6:	4619      	mov	r1, r3
   160d8:	480f      	ldr	r0, [pc, #60]	; (16118 <Sd::WaitWhileBusy()+0x4c>)
   160da:	f7fd f80d 	bl	130f8 <__cyg_profile_func_enter>
  {
    // Wait for the card to finish programming (i.e. when the
    // bytes return to 0xFF)
    uint8_t busy_byte = 0x00;
   160de:	2300      	movs	r3, #0
   160e0:	f88d 300f 	strb.w	r3, [sp, #15]
    LOG_DEBUG("Card is busy. Waiting for it to finish...");
    do
    {
      busy_byte = static_cast<uint8_t>(ssp_interface_->Transfer(0xFF));
   160e4:	9b01      	ldr	r3, [sp, #4]
   160e6:	685a      	ldr	r2, [r3, #4]
   160e8:	9b01      	ldr	r3, [sp, #4]
   160ea:	685b      	ldr	r3, [r3, #4]
   160ec:	681b      	ldr	r3, [r3, #0]
   160ee:	3308      	adds	r3, #8
   160f0:	681b      	ldr	r3, [r3, #0]
   160f2:	21ff      	movs	r1, #255	; 0xff
   160f4:	4610      	mov	r0, r2
   160f6:	4798      	blx	r3
   160f8:	4603      	mov	r3, r0
   160fa:	f88d 300f 	strb.w	r3, [sp, #15]
    } while (busy_byte != 0xFF);
   160fe:	f89d 300f 	ldrb.w	r3, [sp, #15]
   16102:	2bff      	cmp	r3, #255	; 0xff
   16104:	d000      	beq.n	16108 <Sd::WaitWhileBusy()+0x3c>
    do
   16106:	e7ed      	b.n	160e4 <Sd::WaitWhileBusy()+0x18>
   16108:	4623      	mov	r3, r4
   1610a:	4619      	mov	r1, r3
   1610c:	4802      	ldr	r0, [pc, #8]	; (16118 <Sd::WaitWhileBusy()+0x4c>)
   1610e:	f7fd f807 	bl	13120 <__cyg_profile_func_exit>
    LOG_DEBUG("Card finished!");
  }
   16112:	bf00      	nop
   16114:	b004      	add	sp, #16
   16116:	bd10      	pop	{r4, pc}
   16118:	000160cd 	.word	0x000160cd

0001611c <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)>:

  // Read any number of blocks from the SD card
  uint8_t ReadBlock(uint32_t address, uint8_t * array,
   1611c:	b530      	push	{r4, r5, lr}
   1611e:	f5ad 7d13 	sub.w	sp, sp, #588	; 0x24c
   16122:	4675      	mov	r5, lr
   16124:	ac05      	add	r4, sp, #20
   16126:	6020      	str	r0, [r4, #0]
   16128:	a804      	add	r0, sp, #16
   1612a:	6001      	str	r1, [r0, #0]
   1612c:	a903      	add	r1, sp, #12
   1612e:	600a      	str	r2, [r1, #0]
   16130:	aa02      	add	r2, sp, #8
   16132:	6013      	str	r3, [r2, #0]
   16134:	462b      	mov	r3, r5
   16136:	4619      	mov	r1, r3
   16138:	487d      	ldr	r0, [pc, #500]	; (16330 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x214>)
   1613a:	f7fc ffdd 	bl	130f8 <__cyg_profile_func_enter>
                    uint32_t blocks = 1) override
  {
    LOG_DEBUG("Block %" PRId32 " :: 0x%" PRIX32 " for %" PRId32 " blocks",
              address, address, blocks);
    // Wait for a previous command to finish
    WaitWhileBusy();
   1613e:	ab05      	add	r3, sp, #20
   16140:	6818      	ldr	r0, [r3, #0]
   16142:	f7ff ffc3 	bl	160cc <Sd::WaitWhileBusy()>

    // Create a temporary storage location to store sd command responses
    Sd::CardInfo_t sd;
    bool payload_had_bad_crc = false;
   16146:	2300      	movs	r3, #0
   16148:	f88d 3247 	strb.w	r3, [sp, #583]	; 0x247

    // Create a temporary place to store blocks of 512 bytes (this is now
    // possible because the constructor enforces block size cross-
    // compatibility)
    uint8_t block_store[512] = { 0 };
   1614c:	ab06      	add	r3, sp, #24
   1614e:	4618      	mov	r0, r3
   16150:	f44f 7300 	mov.w	r3, #512	; 0x200
   16154:	461a      	mov	r2, r3
   16156:	2100      	movs	r1, #0
   16158:	f001 f9d8 	bl	1750c <memset>

    // Determine appropriate command to send
    Command read_cmd;
    if (blocks > 1)
   1615c:	ab02      	add	r3, sp, #8
   1615e:	681b      	ldr	r3, [r3, #0]
   16160:	2b01      	cmp	r3, #1
   16162:	d902      	bls.n	1616a <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x4e>
    {
      read_cmd = Command::kReadMulti;
   16164:	2352      	movs	r3, #82	; 0x52
   16166:	9390      	str	r3, [sp, #576]	; 0x240
   16168:	e001      	b.n	1616e <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x52>
    }
    else
    {
      read_cmd = Command::kReadSingle;
   1616a:	2351      	movs	r3, #81	; 0x51
   1616c:	9390      	str	r3, [sp, #576]	; 0x240
    }

    // Send initial read command
    sd.response.length =
        SendCmd(read_cmd, address, sd.response.data.byte, 100, KeepAlive::kYes);
   1616e:	ab05      	add	r3, sp, #20
   16170:	681b      	ldr	r3, [r3, #0]
   16172:	681b      	ldr	r3, [r3, #0]
   16174:	681c      	ldr	r4, [r3, #0]
   16176:	ab86      	add	r3, sp, #536	; 0x218
   16178:	f103 0108 	add.w	r1, r3, #8
   1617c:	aa04      	add	r2, sp, #16
   1617e:	a805      	add	r0, sp, #20
   16180:	2301      	movs	r3, #1
   16182:	9301      	str	r3, [sp, #4]
   16184:	2364      	movs	r3, #100	; 0x64
   16186:	9300      	str	r3, [sp, #0]
   16188:	460b      	mov	r3, r1
   1618a:	6812      	ldr	r2, [r2, #0]
   1618c:	9990      	ldr	r1, [sp, #576]	; 0x240
   1618e:	6800      	ldr	r0, [r0, #0]
   16190:	47a0      	blx	r4
   16192:	4603      	mov	r3, r0
    sd.response.length =
   16194:	938a      	str	r3, [sp, #552]	; 0x228
    LOG_DEBUG("Sent Read Cmd");
    LOG_DEBUG("[R1 Response:0x%02X]", sd.response.data.byte[0]);

    // Check if the command was acknowledged properly
    if (sd.response.data.byte[0] == 0x00)
   16196:	f89d 3220 	ldrb.w	r3, [sp, #544]	; 0x220
   1619a:	2b00      	cmp	r3, #0
   1619c:	f040 80d8 	bne.w	16350 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x234>
    {
      // For every block requested
      uint16_t block_count;
      for (block_count = 0; block_count < blocks; block_count++)
   161a0:	2300      	movs	r3, #0
   161a2:	f8ad 323e 	strh.w	r3, [sp, #574]	; 0x23e
   161a6:	f8bd 323e 	ldrh.w	r3, [sp, #574]	; 0x23e
   161aa:	aa02      	add	r2, sp, #8
   161ac:	6812      	ldr	r2, [r2, #0]
   161ae:	429a      	cmp	r2, r3
   161b0:	f240 8099 	bls.w	162e6 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x1ca>
      {
        // Wait for the card to respond with a ready signal
        WaitToReadBlock();
   161b4:	ab05      	add	r3, sp, #20
   161b6:	6818      	ldr	r0, [r3, #0]
   161b8:	f7ff ff56 	bl	16068 <Sd::WaitToReadBlock()>

        // Calculate the block address offset
        uint16_t block_addr_offset =
   161bc:	f8bd 323e 	ldrh.w	r3, [sp, #574]	; 0x23e
   161c0:	025b      	lsls	r3, r3, #9
   161c2:	f8ad 323a 	strh.w	r3, [sp, #570]	; 0x23a
            static_cast<uint16_t>(block_count * kBlockSize);

        // Read all the bytes of a single block
        for (uint16_t byte_count = 0; byte_count < kBlockSize; byte_count++)
   161c6:	2300      	movs	r3, #0
   161c8:	f8ad 323c 	strh.w	r3, [sp, #572]	; 0x23c
   161cc:	f8bd 323c 	ldrh.w	r3, [sp, #572]	; 0x23c
   161d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   161d4:	d22b      	bcs.n	1622e <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x112>
        {
          // Calculate the current storage index
          uint16_t storage_index =
   161d6:	f8bd 223a 	ldrh.w	r2, [sp, #570]	; 0x23a
   161da:	f8bd 323c 	ldrh.w	r3, [sp, #572]	; 0x23c
   161de:	4413      	add	r3, r2
   161e0:	f8ad 3238 	strh.w	r3, [sp, #568]	; 0x238
              static_cast<uint16_t>(block_addr_offset + byte_count);

          // Transfer a byte to read a block from the SD card
          array[storage_index] =
              static_cast<uint8_t>(ssp_interface_->Transfer(0xFF));
   161e4:	ab05      	add	r3, sp, #20
   161e6:	681b      	ldr	r3, [r3, #0]
   161e8:	685a      	ldr	r2, [r3, #4]
   161ea:	ab05      	add	r3, sp, #20
   161ec:	681b      	ldr	r3, [r3, #0]
   161ee:	685b      	ldr	r3, [r3, #4]
   161f0:	681b      	ldr	r3, [r3, #0]
   161f2:	3308      	adds	r3, #8
   161f4:	681b      	ldr	r3, [r3, #0]
   161f6:	21ff      	movs	r1, #255	; 0xff
   161f8:	4610      	mov	r0, r2
   161fa:	4798      	blx	r3
   161fc:	4603      	mov	r3, r0
   161fe:	4619      	mov	r1, r3
          array[storage_index] =
   16200:	f8bd 3238 	ldrh.w	r3, [sp, #568]	; 0x238
   16204:	aa03      	add	r2, sp, #12
   16206:	6812      	ldr	r2, [r2, #0]
   16208:	4413      	add	r3, r2
   1620a:	b2ca      	uxtb	r2, r1
   1620c:	701a      	strb	r2, [r3, #0]

          // Copy that byte into our temporary block store
          block_store[byte_count] = array[storage_index];
   1620e:	f8bd 3238 	ldrh.w	r3, [sp, #568]	; 0x238
   16212:	aa03      	add	r2, sp, #12
   16214:	6812      	ldr	r2, [r2, #0]
   16216:	441a      	add	r2, r3
   16218:	f8bd 323c 	ldrh.w	r3, [sp, #572]	; 0x23c
   1621c:	7811      	ldrb	r1, [r2, #0]
   1621e:	aa06      	add	r2, sp, #24
   16220:	54d1      	strb	r1, [r2, r3]
        for (uint16_t byte_count = 0; byte_count < kBlockSize; byte_count++)
   16222:	f8bd 323c 	ldrh.w	r3, [sp, #572]	; 0x23c
   16226:	3301      	adds	r3, #1
   16228:	f8ad 323c 	strh.w	r3, [sp, #572]	; 0x23c
   1622c:	e7ce      	b.n	161cc <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0xb0>
        }

        // Then read the block's 16-bit CRC (i.e. read two bytes)
        uint16_t block_crc =
            static_cast<uint16_t>((ssp_interface_->Transfer(0xFF) << 8) |
   1622e:	ab05      	add	r3, sp, #20
   16230:	681b      	ldr	r3, [r3, #0]
   16232:	685a      	ldr	r2, [r3, #4]
   16234:	ab05      	add	r3, sp, #20
   16236:	681b      	ldr	r3, [r3, #0]
   16238:	685b      	ldr	r3, [r3, #4]
   1623a:	681b      	ldr	r3, [r3, #0]
   1623c:	3308      	adds	r3, #8
   1623e:	681b      	ldr	r3, [r3, #0]
   16240:	21ff      	movs	r1, #255	; 0xff
   16242:	4610      	mov	r0, r2
   16244:	4798      	blx	r3
   16246:	4603      	mov	r3, r0
   16248:	021b      	lsls	r3, r3, #8
   1624a:	b21c      	sxth	r4, r3
                                  ssp_interface_->Transfer(0xFF));
   1624c:	ab05      	add	r3, sp, #20
   1624e:	681b      	ldr	r3, [r3, #0]
   16250:	685a      	ldr	r2, [r3, #4]
   16252:	ab05      	add	r3, sp, #20
   16254:	681b      	ldr	r3, [r3, #0]
   16256:	685b      	ldr	r3, [r3, #4]
   16258:	681b      	ldr	r3, [r3, #0]
   1625a:	3308      	adds	r3, #8
   1625c:	681b      	ldr	r3, [r3, #0]
   1625e:	21ff      	movs	r1, #255	; 0xff
   16260:	4610      	mov	r0, r2
   16262:	4798      	blx	r3
   16264:	4603      	mov	r3, r0
   16266:	b21b      	sxth	r3, r3
            static_cast<uint16_t>((ssp_interface_->Transfer(0xFF) << 8) |
   16268:	4323      	orrs	r3, r4
   1626a:	b21b      	sxth	r3, r3
                                  ssp_interface_->Transfer(0xFF));
   1626c:	f8ad 3236 	strh.w	r3, [sp, #566]	; 0x236

        // Run a CRC-16 calculation on the message to determine if the
        // received CRCs match (i.e. checks if the block data is
        // valid).
        uint16_t expected_block_crc = GetCrc16(block_store, 512);
   16270:	ab05      	add	r3, sp, #20
   16272:	681b      	ldr	r3, [r3, #0]
   16274:	681b      	ldr	r3, [r3, #0]
   16276:	3320      	adds	r3, #32
   16278:	681b      	ldr	r3, [r3, #0]
   1627a:	a906      	add	r1, sp, #24
   1627c:	a805      	add	r0, sp, #20
   1627e:	f44f 7200 	mov.w	r2, #512	; 0x200
   16282:	6800      	ldr	r0, [r0, #0]
   16284:	4798      	blx	r3
   16286:	4603      	mov	r3, r0
   16288:	f8ad 3234 	strh.w	r3, [sp, #564]	; 0x234

        LOG_DEBUG("Block #%d @ 0x%" PRIX32 " acquired", block_count, address);
        LOG_DEBUG("Expecting block crc16 '0x%04X'", expected_block_crc);
        LOG_DEBUG("Got '0x%04X'", block_crc);
        if (expected_block_crc != block_crc)
   1628c:	f8bd 2234 	ldrh.w	r2, [sp, #564]	; 0x234
   16290:	f8bd 3236 	ldrh.w	r3, [sp, #566]	; 0x236
   16294:	429a      	cmp	r2, r3
   16296:	d020      	beq.n	162da <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x1be>
        {
          // If they do not match, set the bad crc status
          payload_had_bad_crc = true;
   16298:	2301      	movs	r3, #1
   1629a:	f88d 3247 	strb.w	r3, [sp, #583]	; 0x247
          LOG_ERROR("While Reading Block #%d CRC16:", block_count);
   1629e:	f8bd 323e 	ldrh.w	r3, [sp, #574]	; 0x23e
   162a2:	9300      	str	r3, [sp, #0]
   162a4:	f240 23ed 	movw	r3, #749	; 0x2ed
   162a8:	4a22      	ldr	r2, [pc, #136]	; (16334 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x218>)
   162aa:	4923      	ldr	r1, [pc, #140]	; (16338 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x21c>)
   162ac:	4823      	ldr	r0, [pc, #140]	; (1633c <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x220>)
   162ae:	f7fe f981 	bl	145b4 <printf>
          LOG_ERROR("Expected '0x%04X'", expected_block_crc);
   162b2:	f8bd 3234 	ldrh.w	r3, [sp, #564]	; 0x234
   162b6:	9300      	str	r3, [sp, #0]
   162b8:	f240 23ee 	movw	r3, #750	; 0x2ee
   162bc:	4a1d      	ldr	r2, [pc, #116]	; (16334 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x218>)
   162be:	4920      	ldr	r1, [pc, #128]	; (16340 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x224>)
   162c0:	4820      	ldr	r0, [pc, #128]	; (16344 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x228>)
   162c2:	f7fe f977 	bl	145b4 <printf>
          LOG_ERROR("Got '0x%04X'", block_crc);
   162c6:	f8bd 3236 	ldrh.w	r3, [sp, #566]	; 0x236
   162ca:	9300      	str	r3, [sp, #0]
   162cc:	f240 23ef 	movw	r3, #751	; 0x2ef
   162d0:	4a18      	ldr	r2, [pc, #96]	; (16334 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x218>)
   162d2:	491d      	ldr	r1, [pc, #116]	; (16348 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x22c>)
   162d4:	481d      	ldr	r0, [pc, #116]	; (1634c <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x230>)
   162d6:	f7fe f96d 	bl	145b4 <printf>
      for (block_count = 0; block_count < blocks; block_count++)
   162da:	f8bd 323e 	ldrh.w	r3, [sp, #574]	; 0x23e
   162de:	3301      	adds	r3, #1
   162e0:	f8ad 323e 	strh.w	r3, [sp, #574]	; 0x23e
   162e4:	e75f      	b.n	161a6 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x8a>
        }
      }

      // After reading multiple blocks, send the stop command to terminate the
      // transaction (i.e. no keep-alive)
      if (blocks > 1)
   162e6:	ab02      	add	r3, sp, #8
   162e8:	681b      	ldr	r3, [r3, #0]
   162ea:	2b01      	cmp	r3, #1
   162ec:	d913      	bls.n	16316 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x1fa>
      {
        sd.response.length =
            SendCmd(Command::kStopTrans, 0xFFFFFFFF, sd.response.data.byte, 100,
                    KeepAlive::kNo);
   162ee:	ab05      	add	r3, sp, #20
   162f0:	681b      	ldr	r3, [r3, #0]
   162f2:	681b      	ldr	r3, [r3, #0]
   162f4:	681c      	ldr	r4, [r3, #0]
            SendCmd(Command::kStopTrans, 0xFFFFFFFF, sd.response.data.byte, 100,
   162f6:	ab86      	add	r3, sp, #536	; 0x218
   162f8:	f103 0208 	add.w	r2, r3, #8
   162fc:	a805      	add	r0, sp, #20
   162fe:	2300      	movs	r3, #0
   16300:	9301      	str	r3, [sp, #4]
   16302:	2364      	movs	r3, #100	; 0x64
   16304:	9300      	str	r3, [sp, #0]
   16306:	4613      	mov	r3, r2
   16308:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1630c:	214c      	movs	r1, #76	; 0x4c
   1630e:	6800      	ldr	r0, [r0, #0]
   16310:	47a0      	blx	r4
   16312:	4603      	mov	r3, r0
        sd.response.length =
   16314:	938a      	str	r3, [sp, #552]	; 0x228
      LOG_DEBUG("Response Byte");
      LOG_DEBUG("0x%02X", sd.response.data.byte[0]);

      // If there was a bad crc from the payload, manually set the
      // CRC error flag in the command response byte
      if (payload_had_bad_crc)
   16316:	f89d 3247 	ldrb.w	r3, [sp, #583]	; 0x247
   1631a:	2b00      	cmp	r3, #0
   1631c:	f000 80c0 	beq.w	164a0 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x384>
      {
        sd.response.data.byte[0] |= 0x08;
   16320:	f89d 3220 	ldrb.w	r3, [sp, #544]	; 0x220
   16324:	f043 0308 	orr.w	r3, r3, #8
   16328:	b2db      	uxtb	r3, r3
   1632a:	f88d 3220 	strb.w	r3, [sp, #544]	; 0x220
   1632e:	e0b7      	b.n	164a0 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x384>
   16330:	0001611d 	.word	0x0001611d
   16334:	00019524 	.word	0x00019524
   16338:	00019228 	.word	0x00019228
   1633c:	000189bc 	.word	0x000189bc
   16340:	00019230 	.word	0x00019230
   16344:	00018a14 	.word	0x00018a14
   16348:	00019238 	.word	0x00019238
   1634c:	00018a60 	.word	0x00018a60
      }
    }
    else
    {
      LOG_ERROR("Read Cmd was not acknowledged properly!");
   16350:	f240 3309 	movw	r3, #777	; 0x309
   16354:	4a65      	ldr	r2, [pc, #404]	; (164ec <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x3d0>)
   16356:	4966      	ldr	r1, [pc, #408]	; (164f0 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x3d4>)
   16358:	4866      	ldr	r0, [pc, #408]	; (164f4 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x3d8>)
   1635a:	f7fe f92b 	bl	145b4 <printf>
      LOG_ERROR("Parameter Err: %s", ToBool(sd.response.data.byte[0] & 0x40));
   1635e:	f89d 3220 	ldrb.w	r3, [sp, #544]	; 0x220
   16362:	f003 0340 	and.w	r3, r3, #64	; 0x40
   16366:	2b00      	cmp	r3, #0
   16368:	bf14      	ite	ne
   1636a:	2301      	movne	r3, #1
   1636c:	2300      	moveq	r3, #0
   1636e:	b2da      	uxtb	r2, r3
   16370:	ab05      	add	r3, sp, #20
   16372:	4611      	mov	r1, r2
   16374:	6818      	ldr	r0, [r3, #0]
   16376:	f7ff fe55 	bl	16024 <Sd::ToBool(bool)>
   1637a:	4603      	mov	r3, r0
   1637c:	9300      	str	r3, [sp, #0]
   1637e:	f240 330a 	movw	r3, #778	; 0x30a
   16382:	4a5a      	ldr	r2, [pc, #360]	; (164ec <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x3d0>)
   16384:	495c      	ldr	r1, [pc, #368]	; (164f8 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x3dc>)
   16386:	485d      	ldr	r0, [pc, #372]	; (164fc <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x3e0>)
   16388:	f7fe f914 	bl	145b4 <printf>
      LOG_ERROR("Addr Err: %s", ToBool(sd.response.data.byte[0] & 0x20));
   1638c:	f89d 3220 	ldrb.w	r3, [sp, #544]	; 0x220
   16390:	f003 0320 	and.w	r3, r3, #32
   16394:	2b00      	cmp	r3, #0
   16396:	bf14      	ite	ne
   16398:	2301      	movne	r3, #1
   1639a:	2300      	moveq	r3, #0
   1639c:	b2da      	uxtb	r2, r3
   1639e:	ab05      	add	r3, sp, #20
   163a0:	4611      	mov	r1, r2
   163a2:	6818      	ldr	r0, [r3, #0]
   163a4:	f7ff fe3e 	bl	16024 <Sd::ToBool(bool)>
   163a8:	4603      	mov	r3, r0
   163aa:	9300      	str	r3, [sp, #0]
   163ac:	f240 330b 	movw	r3, #779	; 0x30b
   163b0:	4a4e      	ldr	r2, [pc, #312]	; (164ec <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x3d0>)
   163b2:	4953      	ldr	r1, [pc, #332]	; (16500 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x3e4>)
   163b4:	4853      	ldr	r0, [pc, #332]	; (16504 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x3e8>)
   163b6:	f7fe f8fd 	bl	145b4 <printf>
      LOG_ERROR("Erase Seq Err: %s", ToBool(sd.response.data.byte[0] & 0x10));
   163ba:	f89d 3220 	ldrb.w	r3, [sp, #544]	; 0x220
   163be:	f003 0310 	and.w	r3, r3, #16
   163c2:	2b00      	cmp	r3, #0
   163c4:	bf14      	ite	ne
   163c6:	2301      	movne	r3, #1
   163c8:	2300      	moveq	r3, #0
   163ca:	b2da      	uxtb	r2, r3
   163cc:	ab05      	add	r3, sp, #20
   163ce:	4611      	mov	r1, r2
   163d0:	6818      	ldr	r0, [r3, #0]
   163d2:	f7ff fe27 	bl	16024 <Sd::ToBool(bool)>
   163d6:	4603      	mov	r3, r0
   163d8:	9300      	str	r3, [sp, #0]
   163da:	f44f 7343 	mov.w	r3, #780	; 0x30c
   163de:	4a43      	ldr	r2, [pc, #268]	; (164ec <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x3d0>)
   163e0:	4949      	ldr	r1, [pc, #292]	; (16508 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x3ec>)
   163e2:	484a      	ldr	r0, [pc, #296]	; (1650c <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x3f0>)
   163e4:	f7fe f8e6 	bl	145b4 <printf>
      LOG_ERROR("Com CRC Err: %s", ToBool(sd.response.data.byte[0] & 0x08));
   163e8:	f89d 3220 	ldrb.w	r3, [sp, #544]	; 0x220
   163ec:	f003 0308 	and.w	r3, r3, #8
   163f0:	2b00      	cmp	r3, #0
   163f2:	bf14      	ite	ne
   163f4:	2301      	movne	r3, #1
   163f6:	2300      	moveq	r3, #0
   163f8:	b2da      	uxtb	r2, r3
   163fa:	ab05      	add	r3, sp, #20
   163fc:	4611      	mov	r1, r2
   163fe:	6818      	ldr	r0, [r3, #0]
   16400:	f7ff fe10 	bl	16024 <Sd::ToBool(bool)>
   16404:	4603      	mov	r3, r0
   16406:	9300      	str	r3, [sp, #0]
   16408:	f240 330d 	movw	r3, #781	; 0x30d
   1640c:	4a37      	ldr	r2, [pc, #220]	; (164ec <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x3d0>)
   1640e:	4940      	ldr	r1, [pc, #256]	; (16510 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x3f4>)
   16410:	4840      	ldr	r0, [pc, #256]	; (16514 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x3f8>)
   16412:	f7fe f8cf 	bl	145b4 <printf>
      LOG_ERROR("Illegal Cmd Err: %s", ToBool(sd.response.data.byte[0] & 0x04));
   16416:	f89d 3220 	ldrb.w	r3, [sp, #544]	; 0x220
   1641a:	f003 0304 	and.w	r3, r3, #4
   1641e:	2b00      	cmp	r3, #0
   16420:	bf14      	ite	ne
   16422:	2301      	movne	r3, #1
   16424:	2300      	moveq	r3, #0
   16426:	b2da      	uxtb	r2, r3
   16428:	ab05      	add	r3, sp, #20
   1642a:	4611      	mov	r1, r2
   1642c:	6818      	ldr	r0, [r3, #0]
   1642e:	f7ff fdf9 	bl	16024 <Sd::ToBool(bool)>
   16432:	4603      	mov	r3, r0
   16434:	9300      	str	r3, [sp, #0]
   16436:	f240 330e 	movw	r3, #782	; 0x30e
   1643a:	4a2c      	ldr	r2, [pc, #176]	; (164ec <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x3d0>)
   1643c:	4936      	ldr	r1, [pc, #216]	; (16518 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x3fc>)
   1643e:	4837      	ldr	r0, [pc, #220]	; (1651c <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x400>)
   16440:	f7fe f8b8 	bl	145b4 <printf>
      LOG_ERROR("Erase Reset: %s", ToBool(sd.response.data.byte[0] & 0x02));
   16444:	f89d 3220 	ldrb.w	r3, [sp, #544]	; 0x220
   16448:	f003 0302 	and.w	r3, r3, #2
   1644c:	2b00      	cmp	r3, #0
   1644e:	bf14      	ite	ne
   16450:	2301      	movne	r3, #1
   16452:	2300      	moveq	r3, #0
   16454:	b2da      	uxtb	r2, r3
   16456:	ab05      	add	r3, sp, #20
   16458:	4611      	mov	r1, r2
   1645a:	6818      	ldr	r0, [r3, #0]
   1645c:	f7ff fde2 	bl	16024 <Sd::ToBool(bool)>
   16460:	4603      	mov	r3, r0
   16462:	9300      	str	r3, [sp, #0]
   16464:	f240 330f 	movw	r3, #783	; 0x30f
   16468:	4a20      	ldr	r2, [pc, #128]	; (164ec <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x3d0>)
   1646a:	492d      	ldr	r1, [pc, #180]	; (16520 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x404>)
   1646c:	482d      	ldr	r0, [pc, #180]	; (16524 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x408>)
   1646e:	f7fe f8a1 	bl	145b4 <printf>
      LOG_ERROR("In Idle: %s", ToBool(sd.response.data.byte[0] & 0x01));
   16472:	f89d 3220 	ldrb.w	r3, [sp, #544]	; 0x220
   16476:	f003 0301 	and.w	r3, r3, #1
   1647a:	2b00      	cmp	r3, #0
   1647c:	bf14      	ite	ne
   1647e:	2301      	movne	r3, #1
   16480:	2300      	moveq	r3, #0
   16482:	b2da      	uxtb	r2, r3
   16484:	ab05      	add	r3, sp, #20
   16486:	4611      	mov	r1, r2
   16488:	6818      	ldr	r0, [r3, #0]
   1648a:	f7ff fdcb 	bl	16024 <Sd::ToBool(bool)>
   1648e:	4603      	mov	r3, r0
   16490:	9300      	str	r3, [sp, #0]
   16492:	f44f 7344 	mov.w	r3, #784	; 0x310
   16496:	4a15      	ldr	r2, [pc, #84]	; (164ec <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x3d0>)
   16498:	4923      	ldr	r1, [pc, #140]	; (16528 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x40c>)
   1649a:	4824      	ldr	r0, [pc, #144]	; (1652c <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x410>)
   1649c:	f7fe f88a 	bl	145b4 <printf>
    LOG_DEBUG("Now waiting for SD Card to exit Idle Mode...");
    do
    {
      // Query the status register
      sd.response.length = SendCmd(Command::kGetStatus, 32,
                                   sd.response.data.byte, 0, KeepAlive::kNo);
   164a0:	ab05      	add	r3, sp, #20
   164a2:	681b      	ldr	r3, [r3, #0]
   164a4:	681b      	ldr	r3, [r3, #0]
   164a6:	681c      	ldr	r4, [r3, #0]
      sd.response.length = SendCmd(Command::kGetStatus, 32,
   164a8:	ab86      	add	r3, sp, #536	; 0x218
   164aa:	f103 0208 	add.w	r2, r3, #8
   164ae:	a805      	add	r0, sp, #20
   164b0:	2300      	movs	r3, #0
   164b2:	9301      	str	r3, [sp, #4]
   164b4:	2300      	movs	r3, #0
   164b6:	9300      	str	r3, [sp, #0]
   164b8:	4613      	mov	r3, r2
   164ba:	2220      	movs	r2, #32
   164bc:	210d      	movs	r1, #13
   164be:	6800      	ldr	r0, [r0, #0]
   164c0:	47a0      	blx	r4
   164c2:	4603      	mov	r3, r0
   164c4:	938a      	str	r3, [sp, #552]	; 0x228
    } while (sd.response.data.byte[0] & 0x01);
   164c6:	f89d 3220 	ldrb.w	r3, [sp, #544]	; 0x220
   164ca:	f003 0301 	and.w	r3, r3, #1
   164ce:	2b00      	cmp	r3, #0
   164d0:	d000      	beq.n	164d4 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x3b8>
    do
   164d2:	e7e5      	b.n	164a0 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x384>
    LOG_DEBUG("SD Card is out of Idle Mode!");

    // Return the status
    LOG_DEBUG("Read Complete! [R1 Response: 0x%02X]", sd.response.data.byte[0]);
    return sd.response.data.byte[0];
   164d4:	f89d 4220 	ldrb.w	r4, [sp, #544]	; 0x220
   164d8:	462b      	mov	r3, r5
   164da:	4619      	mov	r1, r3
   164dc:	4814      	ldr	r0, [pc, #80]	; (16530 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x414>)
   164de:	f7fc fe1f 	bl	13120 <__cyg_profile_func_exit>
   164e2:	4623      	mov	r3, r4
  }
   164e4:	4618      	mov	r0, r3
   164e6:	f50d 7d13 	add.w	sp, sp, #588	; 0x24c
   164ea:	bd30      	pop	{r4, r5, pc}
   164ec:	00019524 	.word	0x00019524
   164f0:	00019240 	.word	0x00019240
   164f4:	00018aa8 	.word	0x00018aa8
   164f8:	00019248 	.word	0x00019248
   164fc:	00018b0c 	.word	0x00018b0c
   16500:	00019250 	.word	0x00019250
   16504:	00018b58 	.word	0x00018b58
   16508:	00019258 	.word	0x00019258
   1650c:	00018ba0 	.word	0x00018ba0
   16510:	00019260 	.word	0x00019260
   16514:	00018bec 	.word	0x00018bec
   16518:	00019268 	.word	0x00019268
   1651c:	00018c38 	.word	0x00018c38
   16520:	00019270 	.word	0x00019270
   16524:	00018c88 	.word	0x00018c88
   16528:	00019278 	.word	0x00019278
   1652c:	00018cd4 	.word	0x00018cd4
   16530:	0001611d 	.word	0x0001611d

00016534 <Sd::WriteBlock(unsigned long, unsigned char const*, unsigned long)>:

  // Writes any number of 512-byte blocks to the SD Card
  uint8_t WriteBlock(uint32_t address, const uint8_t * array,
   16534:	b530      	push	{r4, r5, lr}
   16536:	b095      	sub	sp, #84	; 0x54
   16538:	4675      	mov	r5, lr
   1653a:	9005      	str	r0, [sp, #20]
   1653c:	9104      	str	r1, [sp, #16]
   1653e:	9203      	str	r2, [sp, #12]
   16540:	9302      	str	r3, [sp, #8]
   16542:	462b      	mov	r3, r5
   16544:	4619      	mov	r1, r3
   16546:	4865      	ldr	r0, [pc, #404]	; (166dc <Sd::WriteBlock(unsigned long, unsigned char const*, unsigned long)+0x1a8>)
   16548:	f7fc fdd6 	bl	130f8 <__cyg_profile_func_enter>
                     uint32_t blocks = 1) override
  {
    // Wait for a previous command to finish
    WaitWhileBusy();
   1654c:	9805      	ldr	r0, [sp, #20]
   1654e:	f7ff fdbd 	bl	160cc <Sd::WaitWhileBusy()>
    Sd::CardInfo_t sd;

    // Determine appropriate command and start token to send
    Command write_cmd;
    uint8_t write_start_tkn;
    if (blocks > 1)
   16552:	9b02      	ldr	r3, [sp, #8]
   16554:	2b01      	cmp	r3, #1
   16556:	d905      	bls.n	16564 <Sd::WriteBlock(unsigned long, unsigned char const*, unsigned long)+0x30>
    {
      write_cmd       = Command::kWriteMulti;
   16558:	2359      	movs	r3, #89	; 0x59
   1655a:	9313      	str	r3, [sp, #76]	; 0x4c
      write_start_tkn = 0xFC;
   1655c:	23fc      	movs	r3, #252	; 0xfc
   1655e:	f88d 304b 	strb.w	r3, [sp, #75]	; 0x4b
   16562:	e004      	b.n	1656e <Sd::WriteBlock(unsigned long, unsigned char const*, unsigned long)+0x3a>
    }
    else
    {
      write_cmd       = Command::kWriteSingle;
   16564:	2358      	movs	r3, #88	; 0x58
   16566:	9313      	str	r3, [sp, #76]	; 0x4c
      write_start_tkn = 0xFE;
   16568:	23fe      	movs	r3, #254	; 0xfe
   1656a:	f88d 304b 	strb.w	r3, [sp, #75]	; 0x4b
    }

    // Send initial write command
    sd.response.length = SendCmd(write_cmd, address, sd.response.data.byte, 100,
                                 KeepAlive::kYes);
   1656e:	9b05      	ldr	r3, [sp, #20]
   16570:	681b      	ldr	r3, [r3, #0]
   16572:	681c      	ldr	r4, [r3, #0]
    sd.response.length = SendCmd(write_cmd, address, sd.response.data.byte, 100,
   16574:	ab06      	add	r3, sp, #24
   16576:	f103 0208 	add.w	r2, r3, #8
   1657a:	2301      	movs	r3, #1
   1657c:	9301      	str	r3, [sp, #4]
   1657e:	2364      	movs	r3, #100	; 0x64
   16580:	9300      	str	r3, [sp, #0]
   16582:	4613      	mov	r3, r2
   16584:	9a04      	ldr	r2, [sp, #16]
   16586:	9913      	ldr	r1, [sp, #76]	; 0x4c
   16588:	9805      	ldr	r0, [sp, #20]
   1658a:	47a0      	blx	r4
   1658c:	4603      	mov	r3, r0
   1658e:	930a      	str	r3, [sp, #40]	; 0x28
    LOG_DEBUG("Sent Write Cmd");
    LOG_DEBUG("[R1 Response:0x%02X]", sd.response.data.byte[0]);

    // Check if the response was acknowledged properly
    if (sd.response.data.byte[0] == 0x00)
   16590:	f89d 3020 	ldrb.w	r3, [sp, #32]
   16594:	2b00      	cmp	r3, #0
   16596:	f040 8096 	bne.w	166c6 <Sd::WriteBlock(unsigned long, unsigned char const*, unsigned long)+0x192>
    {
      // If no errors, proceed write given block(s) to SD Card
      // For each given block
      for (uint16_t current_block_num = 0; current_block_num < blocks;
   1659a:	2300      	movs	r3, #0
   1659c:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
   165a0:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
   165a4:	9a02      	ldr	r2, [sp, #8]
   165a6:	429a      	cmp	r2, r3
   165a8:	d97a      	bls.n	166a0 <Sd::WriteBlock(unsigned long, unsigned char const*, unsigned long)+0x16c>
           current_block_num++)
      {
        // Calculate array offset
        uint64_t arr_offset = current_block_num * kBlockSize;
   165aa:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
   165ae:	025b      	lsls	r3, r3, #9
   165b0:	ea4f 74e3 	mov.w	r4, r3, asr #31
   165b4:	e9cd 340e 	strd	r3, r4, [sp, #56]	; 0x38

        // Send the start token for the current block
        ssp_interface_->Transfer(write_start_tkn);
   165b8:	9b05      	ldr	r3, [sp, #20]
   165ba:	685a      	ldr	r2, [r3, #4]
   165bc:	9b05      	ldr	r3, [sp, #20]
   165be:	685b      	ldr	r3, [r3, #4]
   165c0:	681b      	ldr	r3, [r3, #0]
   165c2:	3308      	adds	r3, #8
   165c4:	681b      	ldr	r3, [r3, #0]
   165c6:	f89d 104b 	ldrb.w	r1, [sp, #75]	; 0x4b
   165ca:	b289      	uxth	r1, r1
   165cc:	4610      	mov	r0, r2
   165ce:	4798      	blx	r3

        // Write all 512-bytes of the given block
        LOG_DEBUG("Writing block #%d", current_block_num);
        for (uint16_t current_byte = 0; current_byte < kBlockSize;
   165d0:	2300      	movs	r3, #0
   165d2:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
   165d6:	f8bd 3046 	ldrh.w	r3, [sp, #70]	; 0x46
   165da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   165de:	d216      	bcs.n	1660e <Sd::WriteBlock(unsigned long, unsigned char const*, unsigned long)+0xda>
             current_byte++)
        {
          ssp_interface_->Transfer(array[arr_offset + current_byte]);
   165e0:	9b05      	ldr	r3, [sp, #20]
   165e2:	6858      	ldr	r0, [r3, #4]
   165e4:	9b05      	ldr	r3, [sp, #20]
   165e6:	685b      	ldr	r3, [r3, #4]
   165e8:	681b      	ldr	r3, [r3, #0]
   165ea:	3308      	adds	r3, #8
   165ec:	681b      	ldr	r3, [r3, #0]
   165ee:	990e      	ldr	r1, [sp, #56]	; 0x38
   165f0:	f8bd 2046 	ldrh.w	r2, [sp, #70]	; 0x46
   165f4:	440a      	add	r2, r1
   165f6:	9903      	ldr	r1, [sp, #12]
   165f8:	440a      	add	r2, r1
   165fa:	7812      	ldrb	r2, [r2, #0]
   165fc:	b292      	uxth	r2, r2
   165fe:	4611      	mov	r1, r2
   16600:	4798      	blx	r3
        for (uint16_t current_byte = 0; current_byte < kBlockSize;
   16602:	f8bd 3046 	ldrh.w	r3, [sp, #70]	; 0x46
   16606:	3301      	adds	r3, #1
   16608:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
   1660c:	e7e3      	b.n	165d6 <Sd::WriteBlock(unsigned long, unsigned char const*, unsigned long)+0xa2>
        }

        // Read the data response token after writing the block
        uint8_t data_response_tkn =
            static_cast<uint8_t>(ssp_interface_->Transfer(0xFF));
   1660e:	9b05      	ldr	r3, [sp, #20]
   16610:	685a      	ldr	r2, [r3, #4]
   16612:	9b05      	ldr	r3, [sp, #20]
   16614:	685b      	ldr	r3, [r3, #4]
   16616:	681b      	ldr	r3, [r3, #0]
   16618:	3308      	adds	r3, #8
   1661a:	681b      	ldr	r3, [r3, #0]
   1661c:	21ff      	movs	r1, #255	; 0xff
   1661e:	4610      	mov	r0, r2
   16620:	4798      	blx	r3
   16622:	4603      	mov	r3, r0
   16624:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
                  ToBool(data_response_tkn & 0x0B));
        LOG_DEBUG("Data Rejected (write err)?: %s",
                  ToBool(data_response_tkn & 0x0D));

        // If writing multiple blocks and the previous block was rejected
        if (blocks > 1 && !(data_response_tkn & 0x05))
   16628:	9b02      	ldr	r3, [sp, #8]
   1662a:	2b01      	cmp	r3, #1
   1662c:	d92f      	bls.n	1668e <Sd::WriteBlock(unsigned long, unsigned char const*, unsigned long)+0x15a>
   1662e:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
   16632:	f003 0305 	and.w	r3, r3, #5
   16636:	2b00      	cmp	r3, #0
   16638:	d129      	bne.n	1668e <Sd::WriteBlock(unsigned long, unsigned char const*, unsigned long)+0x15a>
        {
          // Send an immediate stop (CMD12)
          sd.response.length =
              SendCmd(Command::kStopTrans, 0xFFFFFFFF, sd.response.data.byte,
                      100, KeepAlive::kYes);
   1663a:	9b05      	ldr	r3, [sp, #20]
   1663c:	681b      	ldr	r3, [r3, #0]
   1663e:	681c      	ldr	r4, [r3, #0]
              SendCmd(Command::kStopTrans, 0xFFFFFFFF, sd.response.data.byte,
   16640:	ab06      	add	r3, sp, #24
   16642:	f103 0208 	add.w	r2, r3, #8
   16646:	2301      	movs	r3, #1
   16648:	9301      	str	r3, [sp, #4]
   1664a:	2364      	movs	r3, #100	; 0x64
   1664c:	9300      	str	r3, [sp, #0]
   1664e:	4613      	mov	r3, r2
   16650:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   16654:	214c      	movs	r1, #76	; 0x4c
   16656:	9805      	ldr	r0, [sp, #20]
   16658:	47a0      	blx	r4
   1665a:	4603      	mov	r3, r0
          sd.response.length =
   1665c:	930a      	str	r3, [sp, #40]	; 0x28
          LOG_DEBUG("Stopped Transmission due to rejection...");
          LOG_DEBUG("[R1 Response: 0x%02X]", sd.response.data.byte[0]);

          // In the case of a write error, ask for the reason why
          if (data_response_tkn & 0x0D)
   1665e:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
   16662:	f003 030d 	and.w	r3, r3, #13
   16666:	2b00      	cmp	r3, #0
   16668:	d011      	beq.n	1668e <Sd::WriteBlock(unsigned long, unsigned char const*, unsigned long)+0x15a>
          {
            sd.response.length =
                SendCmd(Command::kGetStatus, 0xFFFFFFFF, sd.response.data.byte,
                        100, KeepAlive::kYes);
   1666a:	9b05      	ldr	r3, [sp, #20]
   1666c:	681b      	ldr	r3, [r3, #0]
   1666e:	681c      	ldr	r4, [r3, #0]
                SendCmd(Command::kGetStatus, 0xFFFFFFFF, sd.response.data.byte,
   16670:	ab06      	add	r3, sp, #24
   16672:	f103 0208 	add.w	r2, r3, #8
   16676:	2301      	movs	r3, #1
   16678:	9301      	str	r3, [sp, #4]
   1667a:	2364      	movs	r3, #100	; 0x64
   1667c:	9300      	str	r3, [sp, #0]
   1667e:	4613      	mov	r3, r2
   16680:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   16684:	210d      	movs	r1, #13
   16686:	9805      	ldr	r0, [sp, #20]
   16688:	47a0      	blx	r4
   1668a:	4603      	mov	r3, r0
            sd.response.length =
   1668c:	930a      	str	r3, [sp, #40]	; 0x28
                "Checking Status Register to see cause of Write Error...");
            LOG_DEBUG("[R2 Response: 0x%04" PRIX32 "]",
                      sd.response.data.dWord.lo);
          }
        }
        WaitWhileBusy();
   1668e:	9805      	ldr	r0, [sp, #20]
   16690:	f7ff fd1c 	bl	160cc <Sd::WaitWhileBusy()>
      for (uint16_t current_block_num = 0; current_block_num < blocks;
   16694:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
   16698:	3301      	adds	r3, #1
   1669a:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
   1669e:	e77f      	b.n	165a0 <Sd::WriteBlock(unsigned long, unsigned char const*, unsigned long)+0x6c>
      }

      if (blocks > 1)
   166a0:	9b02      	ldr	r3, [sp, #8]
   166a2:	2b01      	cmp	r3, #1
   166a4:	d90f      	bls.n	166c6 <Sd::WriteBlock(unsigned long, unsigned char const*, unsigned long)+0x192>
      {
        constexpr uint8_t kStopToken = 0xFD;
   166a6:	23fd      	movs	r3, #253	; 0xfd
   166a8:	f88d 3036 	strb.w	r3, [sp, #54]	; 0x36
        ssp_interface_->Transfer(kStopToken);
   166ac:	9b05      	ldr	r3, [sp, #20]
   166ae:	685a      	ldr	r2, [r3, #4]
   166b0:	9b05      	ldr	r3, [sp, #20]
   166b2:	685b      	ldr	r3, [r3, #4]
   166b4:	681b      	ldr	r3, [r3, #0]
   166b6:	3308      	adds	r3, #8
   166b8:	681b      	ldr	r3, [r3, #0]
   166ba:	21fd      	movs	r1, #253	; 0xfd
   166bc:	4610      	mov	r0, r2
   166be:	4798      	blx	r3

        // Wait for the card's programming to complete before
        // reselecting it (i.e. to prevent corruption)
        WaitWhileBusy();
   166c0:	9805      	ldr	r0, [sp, #20]
   166c2:	f7ff fd03 	bl	160cc <Sd::WaitWhileBusy()>
      LOG_DEBUG("Illegal Cmd Err: %s", ToBool(sd.response.data.byte[0] & 0x04));
      LOG_DEBUG("Erase Reset: %s", ToBool(sd.response.data.byte[0] & 0x02));
      LOG_DEBUG("In Idle: %s", ToBool(sd.response.data.byte[0] & 0x01));
    }

    return sd.response.data.byte[0];
   166c6:	f89d 4020 	ldrb.w	r4, [sp, #32]
   166ca:	462b      	mov	r3, r5
   166cc:	4619      	mov	r1, r3
   166ce:	4803      	ldr	r0, [pc, #12]	; (166dc <Sd::WriteBlock(unsigned long, unsigned char const*, unsigned long)+0x1a8>)
   166d0:	f7fc fd26 	bl	13120 <__cyg_profile_func_exit>
   166d4:	4623      	mov	r3, r4
  }
   166d6:	4618      	mov	r0, r3
   166d8:	b015      	add	sp, #84	; 0x54
   166da:	bd30      	pop	{r4, r5, pc}
   166dc:	00016535 	.word	0x00016535

000166e0 <Sd::DeleteBlock(unsigned long, unsigned long)>:

  // Deletes any number of blocks (inclusively) within a range of address.
  uint8_t DeleteBlock(uint32_t start, uint32_t end) override
   166e0:	b530      	push	{r4, r5, lr}
   166e2:	b08f      	sub	sp, #60	; 0x3c
   166e4:	4675      	mov	r5, lr
   166e6:	9005      	str	r0, [sp, #20]
   166e8:	9104      	str	r1, [sp, #16]
   166ea:	9203      	str	r2, [sp, #12]
   166ec:	462b      	mov	r3, r5
   166ee:	4619      	mov	r1, r3
   166f0:	483d      	ldr	r0, [pc, #244]	; (167e8 <Sd::DeleteBlock(unsigned long, unsigned long)+0x108>)
   166f2:	f7fc fd01 	bl	130f8 <__cyg_profile_func_enter>
  {
    // Wait for a previous command to finish
    WaitWhileBusy();
   166f6:	9805      	ldr	r0, [sp, #20]
   166f8:	f7ff fce8 	bl	160cc <Sd::WaitWhileBusy()>

    // Create a temporary storage location to store sd command responses
    Sd::CardInfo_t sd;
    bool delete_failed = false;
   166fc:	2300      	movs	r3, #0
   166fe:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37

    // Set the delete start address
    LOG_DEBUG("Setting Delete Start Address...");
    sd.response.length = SendCmd(Command::kDelFrom, start,
                                 sd.response.data.byte, 100, KeepAlive::kYes);
   16702:	9b05      	ldr	r3, [sp, #20]
   16704:	681b      	ldr	r3, [r3, #0]
   16706:	681c      	ldr	r4, [r3, #0]
    sd.response.length = SendCmd(Command::kDelFrom, start,
   16708:	ab06      	add	r3, sp, #24
   1670a:	f103 0208 	add.w	r2, r3, #8
   1670e:	2301      	movs	r3, #1
   16710:	9301      	str	r3, [sp, #4]
   16712:	2364      	movs	r3, #100	; 0x64
   16714:	9300      	str	r3, [sp, #0]
   16716:	4613      	mov	r3, r2
   16718:	9a04      	ldr	r2, [sp, #16]
   1671a:	2160      	movs	r1, #96	; 0x60
   1671c:	9805      	ldr	r0, [sp, #20]
   1671e:	47a0      	blx	r4
   16720:	4603      	mov	r3, r0
   16722:	930a      	str	r3, [sp, #40]	; 0x28

    // Wait while the writing the start address
    WaitWhileBusy();
   16724:	9805      	ldr	r0, [sp, #20]
   16726:	f7ff fcd1 	bl	160cc <Sd::WaitWhileBusy()>

    // Force return if an error occurred
    if (sd.response.data.byte[0] != 0x00)
   1672a:	f89d 3020 	ldrb.w	r3, [sp, #32]
   1672e:	2b00      	cmp	r3, #0
   16730:	d009      	beq.n	16746 <Sd::DeleteBlock(unsigned long, unsigned long)+0x66>
    {
      LOG_ERROR("Failed to set Start Address!");
   16732:	f44f 736a 	mov.w	r3, #936	; 0x3a8
   16736:	4a2d      	ldr	r2, [pc, #180]	; (167ec <Sd::DeleteBlock(unsigned long, unsigned long)+0x10c>)
   16738:	492d      	ldr	r1, [pc, #180]	; (167f0 <Sd::DeleteBlock(unsigned long, unsigned long)+0x110>)
   1673a:	482e      	ldr	r0, [pc, #184]	; (167f4 <Sd::DeleteBlock(unsigned long, unsigned long)+0x114>)
   1673c:	f7fd ff3a 	bl	145b4 <printf>
      delete_failed = true;
   16740:	2301      	movs	r3, #1
   16742:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
    }

    // Set the delete end address
    if (!delete_failed)
   16746:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
   1674a:	f083 0301 	eor.w	r3, r3, #1
   1674e:	b2db      	uxtb	r3, r3
   16750:	2b00      	cmp	r3, #0
   16752:	d010      	beq.n	16776 <Sd::DeleteBlock(unsigned long, unsigned long)+0x96>
    {
      LOG_DEBUG("Setting Delete End Address...");
      sd.response.length = SendCmd(Command::kDelTo, end, sd.response.data.byte,
                                   100, KeepAlive::kYes);
   16754:	9b05      	ldr	r3, [sp, #20]
   16756:	681b      	ldr	r3, [r3, #0]
   16758:	681c      	ldr	r4, [r3, #0]
      sd.response.length = SendCmd(Command::kDelTo, end, sd.response.data.byte,
   1675a:	ab06      	add	r3, sp, #24
   1675c:	f103 0208 	add.w	r2, r3, #8
   16760:	2301      	movs	r3, #1
   16762:	9301      	str	r3, [sp, #4]
   16764:	2364      	movs	r3, #100	; 0x64
   16766:	9300      	str	r3, [sp, #0]
   16768:	4613      	mov	r3, r2
   1676a:	9a03      	ldr	r2, [sp, #12]
   1676c:	2161      	movs	r1, #97	; 0x61
   1676e:	9805      	ldr	r0, [sp, #20]
   16770:	47a0      	blx	r4
   16772:	4603      	mov	r3, r0
   16774:	930a      	str	r3, [sp, #40]	; 0x28
    }

    // Wait while the writing the end address
    WaitWhileBusy();
   16776:	9805      	ldr	r0, [sp, #20]
   16778:	f7ff fca8 	bl	160cc <Sd::WaitWhileBusy()>

    // Force return if an error occurred
    if (sd.response.data.byte[0] != 0x00)
   1677c:	f89d 3020 	ldrb.w	r3, [sp, #32]
   16780:	2b00      	cmp	r3, #0
   16782:	d009      	beq.n	16798 <Sd::DeleteBlock(unsigned long, unsigned long)+0xb8>
    {
      LOG_ERROR("Failed to set End Address!");
   16784:	f240 33ba 	movw	r3, #954	; 0x3ba
   16788:	4a18      	ldr	r2, [pc, #96]	; (167ec <Sd::DeleteBlock(unsigned long, unsigned long)+0x10c>)
   1678a:	491b      	ldr	r1, [pc, #108]	; (167f8 <Sd::DeleteBlock(unsigned long, unsigned long)+0x118>)
   1678c:	481b      	ldr	r0, [pc, #108]	; (167fc <Sd::DeleteBlock(unsigned long, unsigned long)+0x11c>)
   1678e:	f7fd ff11 	bl	145b4 <printf>
      delete_failed = true;
   16792:	2301      	movs	r3, #1
   16794:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
    }

    // Finally, attempt a delete
    if (!delete_failed)
   16798:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
   1679c:	f083 0301 	eor.w	r3, r3, #1
   167a0:	b2db      	uxtb	r3, r3
   167a2:	2b00      	cmp	r3, #0
   167a4:	d014      	beq.n	167d0 <Sd::DeleteBlock(unsigned long, unsigned long)+0xf0>
    {
      // Issue the delete command to delete from our from:to range
      LOG_DEBUG("Issuing Delete Command...");
      sd.response.length = SendCmd(Command::kDel, 0xFFFFFFFF,
                                   sd.response.data.byte, 100, KeepAlive::kYes);
   167a6:	9b05      	ldr	r3, [sp, #20]
   167a8:	681b      	ldr	r3, [r3, #0]
   167aa:	681c      	ldr	r4, [r3, #0]
      sd.response.length = SendCmd(Command::kDel, 0xFFFFFFFF,
   167ac:	ab06      	add	r3, sp, #24
   167ae:	f103 0208 	add.w	r2, r3, #8
   167b2:	2301      	movs	r3, #1
   167b4:	9301      	str	r3, [sp, #4]
   167b6:	2364      	movs	r3, #100	; 0x64
   167b8:	9300      	str	r3, [sp, #0]
   167ba:	4613      	mov	r3, r2
   167bc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   167c0:	2166      	movs	r1, #102	; 0x66
   167c2:	9805      	ldr	r0, [sp, #20]
   167c4:	47a0      	blx	r4
   167c6:	4603      	mov	r3, r0
   167c8:	930a      	str	r3, [sp, #40]	; 0x28

      // Wait while the deletion occurs
      WaitWhileBusy();
   167ca:	9805      	ldr	r0, [sp, #20]
   167cc:	f7ff fc7e 	bl	160cc <Sd::WaitWhileBusy()>
      LOG_DEBUG("[R1 Response: 0x%02X]", sd.response.data.byte[0]);
      LOG_DEBUG("Deletion Complete...");
    }

    // Return status
    return sd.response.data.byte[0];
   167d0:	f89d 4020 	ldrb.w	r4, [sp, #32]
   167d4:	462b      	mov	r3, r5
   167d6:	4619      	mov	r1, r3
   167d8:	4803      	ldr	r0, [pc, #12]	; (167e8 <Sd::DeleteBlock(unsigned long, unsigned long)+0x108>)
   167da:	f7fc fca1 	bl	13120 <__cyg_profile_func_exit>
   167de:	4623      	mov	r3, r4
  }
   167e0:	4618      	mov	r0, r3
   167e2:	b00f      	add	sp, #60	; 0x3c
   167e4:	bd30      	pop	{r4, r5, pc}
   167e6:	bf00      	nop
   167e8:	000166e1 	.word	0x000166e1
   167ec:	00019560 	.word	0x00019560
   167f0:	00019280 	.word	0x00019280
   167f4:	00018d1c 	.word	0x00018d1c
   167f8:	00019288 	.word	0x00019288
   167fc:	00018d74 	.word	0x00018d74

00016800 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)>:

  // Send a command
  uint32_t SendCmd(Command sdc, uint32_t arg, uint8_t response_buffer[],
   16800:	e92d 49f0 	stmdb	sp!, {r4, r5, r6, r7, r8, fp, lr}
   16804:	b08f      	sub	sp, #60	; 0x3c
   16806:	46f0      	mov	r8, lr
   16808:	9003      	str	r0, [sp, #12]
   1680a:	9102      	str	r1, [sp, #8]
   1680c:	9201      	str	r2, [sp, #4]
   1680e:	9300      	str	r3, [sp, #0]
   16810:	4643      	mov	r3, r8
   16812:	4619      	mov	r1, r3
   16814:	4840      	ldr	r0, [pc, #256]	; (16918 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x118>)
   16816:	f7fc fc6f 	bl	130f8 <__cyg_profile_func_enter>
                   uint32_t delay, KeepAlive keep_alive) override
  {
    ResponseType res_type;
    uint8_t res_len    = 0;
   1681a:	2300      	movs	r3, #0
   1681c:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
    uint8_t crc        = 0;
   16820:	2300      	movs	r3, #0
   16822:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
    uint8_t tries      = 0;
   16826:	2300      	movs	r3, #0
   16828:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
    uint8_t bit_offset = 0;  // determines the distance of the response's
   1682c:	2300      	movs	r3, #0
   1682e:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
                             // 0 bit from the MSB place
    uint8_t temp_byte = 0;
   16832:	2300      	movs	r3, #0
   16834:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f

    // Determine the response type of the set command
    switch (sdc)
   16838:	9b02      	ldr	r3, [sp, #8]
   1683a:	2b58      	cmp	r3, #88	; 0x58
   1683c:	d052      	beq.n	168e4 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0xe4>
   1683e:	2b58      	cmp	r3, #88	; 0x58
   16840:	dc16      	bgt.n	16870 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x70>
   16842:	2b48      	cmp	r3, #72	; 0x48
   16844:	d033      	beq.n	168ae <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0xae>
   16846:	2b48      	cmp	r3, #72	; 0x48
   16848:	dc06      	bgt.n	16858 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x58>
   1684a:	2b40      	cmp	r3, #64	; 0x40
   1684c:	d029      	beq.n	168a2 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0xa2>
   1684e:	2b41      	cmp	r3, #65	; 0x41
   16850:	d02a      	beq.n	168a8 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0xa8>
   16852:	2b0d      	cmp	r3, #13
   16854:	d031      	beq.n	168ba <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0xba>
   16856:	e054      	b.n	16902 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x102>
   16858:	2b50      	cmp	r3, #80	; 0x50
   1685a:	d03a      	beq.n	168d2 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0xd2>
   1685c:	2b50      	cmp	r3, #80	; 0x50
   1685e:	dc02      	bgt.n	16866 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x66>
   16860:	2b4c      	cmp	r3, #76	; 0x4c
   16862:	d027      	beq.n	168b4 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0xb4>
   16864:	e04d      	b.n	16902 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x102>
   16866:	2b51      	cmp	r3, #81	; 0x51
   16868:	d036      	beq.n	168d8 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0xd8>
   1686a:	2b52      	cmp	r3, #82	; 0x52
   1686c:	d037      	beq.n	168de <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0xde>
   1686e:	e048      	b.n	16902 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x102>
   16870:	2b66      	cmp	r3, #102	; 0x66
   16872:	d043      	beq.n	168fc <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0xfc>
   16874:	2b66      	cmp	r3, #102	; 0x66
   16876:	dc06      	bgt.n	16886 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x86>
   16878:	2b60      	cmp	r3, #96	; 0x60
   1687a:	d039      	beq.n	168f0 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0xf0>
   1687c:	2b61      	cmp	r3, #97	; 0x61
   1687e:	d03a      	beq.n	168f6 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0xf6>
   16880:	2b59      	cmp	r3, #89	; 0x59
   16882:	d032      	beq.n	168ea <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0xea>
   16884:	e03d      	b.n	16902 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x102>
   16886:	2b77      	cmp	r3, #119	; 0x77
   16888:	d01a      	beq.n	168c0 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0xc0>
   1688a:	2b77      	cmp	r3, #119	; 0x77
   1688c:	dc02      	bgt.n	16894 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x94>
   1688e:	2b69      	cmp	r3, #105	; 0x69
   16890:	d019      	beq.n	168c6 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0xc6>
   16892:	e036      	b.n	16902 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x102>
   16894:	2b7a      	cmp	r3, #122	; 0x7a
   16896:	d019      	beq.n	168cc <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0xcc>
   16898:	2bff      	cmp	r3, #255	; 0xff
   1689a:	d132      	bne.n	16902 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x102>
    {
      case Command::kGarbage: res_type = ResponseType::kR1; break;
   1689c:	2300      	movs	r3, #0
   1689e:	930d      	str	r3, [sp, #52]	; 0x34
   168a0:	e042      	b.n	16928 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x128>
      case Command::kReset: res_type = ResponseType::kR1; break;
   168a2:	2300      	movs	r3, #0
   168a4:	930d      	str	r3, [sp, #52]	; 0x34
   168a6:	e03f      	b.n	16928 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x128>
      case Command::kInit: res_type = ResponseType::kR1; break;
   168a8:	2300      	movs	r3, #0
   168aa:	930d      	str	r3, [sp, #52]	; 0x34
   168ac:	e03c      	b.n	16928 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x128>
      case Command::kGetOp: res_type = ResponseType::kR7; break;
   168ae:	2307      	movs	r3, #7
   168b0:	930d      	str	r3, [sp, #52]	; 0x34
   168b2:	e039      	b.n	16928 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x128>
      case Command::kStopTrans: res_type = ResponseType::kR1; break;
   168b4:	2300      	movs	r3, #0
   168b6:	930d      	str	r3, [sp, #52]	; 0x34
   168b8:	e036      	b.n	16928 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x128>
      case Command::kGetStatus: res_type = ResponseType::kR2; break;
   168ba:	2302      	movs	r3, #2
   168bc:	930d      	str	r3, [sp, #52]	; 0x34
   168be:	e033      	b.n	16928 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x128>
      case Command::kAcBegin: res_type = ResponseType::kR1; break;
   168c0:	2300      	movs	r3, #0
   168c2:	930d      	str	r3, [sp, #52]	; 0x34
   168c4:	e030      	b.n	16928 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x128>
      case Command::kAcInit: res_type = ResponseType::kR1; break;
   168c6:	2300      	movs	r3, #0
   168c8:	930d      	str	r3, [sp, #52]	; 0x34
   168ca:	e02d      	b.n	16928 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x128>
      case Command::kGetOcr: res_type = ResponseType::kR3; break;
   168cc:	2303      	movs	r3, #3
   168ce:	930d      	str	r3, [sp, #52]	; 0x34
   168d0:	e02a      	b.n	16928 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x128>
      case Command::kChgBlkLen: res_type = ResponseType::kR1; break;
   168d2:	2300      	movs	r3, #0
   168d4:	930d      	str	r3, [sp, #52]	; 0x34
   168d6:	e027      	b.n	16928 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x128>
      case Command::kReadSingle: res_type = ResponseType::kR1; break;
   168d8:	2300      	movs	r3, #0
   168da:	930d      	str	r3, [sp, #52]	; 0x34
   168dc:	e024      	b.n	16928 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x128>
      case Command::kReadMulti: res_type = ResponseType::kR1; break;
   168de:	2300      	movs	r3, #0
   168e0:	930d      	str	r3, [sp, #52]	; 0x34
   168e2:	e021      	b.n	16928 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x128>
      case Command::kWriteSingle: res_type = ResponseType::kR1; break;
   168e4:	2300      	movs	r3, #0
   168e6:	930d      	str	r3, [sp, #52]	; 0x34
   168e8:	e01e      	b.n	16928 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x128>
      case Command::kWriteMulti: res_type = ResponseType::kR1; break;
   168ea:	2300      	movs	r3, #0
   168ec:	930d      	str	r3, [sp, #52]	; 0x34
   168ee:	e01b      	b.n	16928 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x128>
      case Command::kDelFrom: res_type = ResponseType::kR1; break;
   168f0:	2300      	movs	r3, #0
   168f2:	930d      	str	r3, [sp, #52]	; 0x34
   168f4:	e018      	b.n	16928 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x128>
      case Command::kDelTo: res_type = ResponseType::kR1; break;
   168f6:	2300      	movs	r3, #0
   168f8:	930d      	str	r3, [sp, #52]	; 0x34
   168fa:	e015      	b.n	16928 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x128>
      case Command::kDel: res_type = ResponseType::kR1b; break;
   168fc:	2301      	movs	r3, #1
   168fe:	930d      	str	r3, [sp, #52]	; 0x34
   16900:	e012      	b.n	16928 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x128>
      default:
        LOG_ERROR("Unknown response type. Aborting!");
   16902:	f240 33f3 	movw	r3, #1011	; 0x3f3
   16906:	4a05      	ldr	r2, [pc, #20]	; (1691c <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x11c>)
   16908:	4905      	ldr	r1, [pc, #20]	; (16920 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x120>)
   1690a:	4806      	ldr	r0, [pc, #24]	; (16924 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x124>)
   1690c:	f7fd fe52 	bl	145b4 <printf>
        return -1;
   16910:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   16914:	e1b1      	b.n	16c7a <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x47a>
   16916:	bf00      	nop
   16918:	00016801 	.word	0x00016801
   1691c:	00019594 	.word	0x00019594
   16920:	00019290 	.word	0x00019290
   16924:	00018dc8 	.word	0x00018dc8
    // algorithm
    uint8_t msg[5] = { static_cast<uint8_t>(sdc),
                       static_cast<uint8_t>(arg >> 24),
                       static_cast<uint8_t>(arg >> 16),
                       static_cast<uint8_t>(arg >> 8),
                       static_cast<uint8_t>(arg >> 0) };
   16928:	9b02      	ldr	r3, [sp, #8]
   1692a:	b2db      	uxtb	r3, r3
   1692c:	f88d 3010 	strb.w	r3, [sp, #16]
                       static_cast<uint8_t>(arg >> 24),
   16930:	9b01      	ldr	r3, [sp, #4]
   16932:	0e1b      	lsrs	r3, r3, #24
                       static_cast<uint8_t>(arg >> 0) };
   16934:	b2db      	uxtb	r3, r3
   16936:	f88d 3011 	strb.w	r3, [sp, #17]
                       static_cast<uint8_t>(arg >> 16),
   1693a:	9b01      	ldr	r3, [sp, #4]
   1693c:	0c1b      	lsrs	r3, r3, #16
                       static_cast<uint8_t>(arg >> 0) };
   1693e:	b2db      	uxtb	r3, r3
   16940:	f88d 3012 	strb.w	r3, [sp, #18]
                       static_cast<uint8_t>(arg >> 8),
   16944:	9b01      	ldr	r3, [sp, #4]
   16946:	0a1b      	lsrs	r3, r3, #8
                       static_cast<uint8_t>(arg >> 0) };
   16948:	b2db      	uxtb	r3, r3
   1694a:	f88d 3013 	strb.w	r3, [sp, #19]
   1694e:	9b01      	ldr	r3, [sp, #4]
   16950:	b2db      	uxtb	r3, r3
   16952:	f88d 3014 	strb.w	r3, [sp, #20]

    crc = GetCrc7(msg, sizeof(msg));
   16956:	9b03      	ldr	r3, [sp, #12]
   16958:	681b      	ldr	r3, [r3, #0]
   1695a:	331c      	adds	r3, #28
   1695c:	681b      	ldr	r3, [r3, #0]
   1695e:	a904      	add	r1, sp, #16
   16960:	2205      	movs	r2, #5
   16962:	9803      	ldr	r0, [sp, #12]
   16964:	4798      	blx	r3
   16966:	4603      	mov	r3, r0
   16968:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
    if (sdc == Command::kGarbage)
   1696c:	9b02      	ldr	r3, [sp, #8]
   1696e:	2bff      	cmp	r3, #255	; 0xff
   16970:	d102      	bne.n	16978 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x178>
    {
      crc = 0xFF;
   16972:	23ff      	movs	r3, #255	; 0xff
   16974:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
    }

    // Select the SD Card
    chip_select_->SetLow();
   16978:	9b03      	ldr	r3, [sp, #12]
   1697a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1697c:	9b03      	ldr	r3, [sp, #12]
   1697e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   16980:	681b      	ldr	r3, [r3, #0]
   16982:	3310      	adds	r3, #16
   16984:	681b      	ldr	r3, [r3, #0]
   16986:	4610      	mov	r0, r2
   16988:	4798      	blx	r3
    chip_select_external_->SetLow();
   1698a:	9b03      	ldr	r3, [sp, #12]
   1698c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
   1698e:	9b03      	ldr	r3, [sp, #12]
   16990:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   16992:	681b      	ldr	r3, [r3, #0]
   16994:	3310      	adds	r3, #16
   16996:	681b      	ldr	r3, [r3, #0]
   16998:	4610      	mov	r0, r2
   1699a:	4798      	blx	r3

    // If desired, wait a bit before talking
    if (delay > 0)
   1699c:	9b16      	ldr	r3, [sp, #88]	; 0x58
   1699e:	2b00      	cmp	r3, #0
   169a0:	d007      	beq.n	169b2 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x1b2>
    {
      Delay(delay);
   169a2:	9b16      	ldr	r3, [sp, #88]	; 0x58
   169a4:	461a      	mov	r2, r3
   169a6:	f04f 0300 	mov.w	r3, #0
   169aa:	4610      	mov	r0, r2
   169ac:	4619      	mov	r1, r3
   169ae:	f7fa f81b 	bl	109e8 <Delay(unsigned long long)>
    }

    // Send the desired command frame to the SD card board
    // Begin by transfering the command byte
    ssp_interface_->Transfer(static_cast<uint16_t>(sdc));
   169b2:	9b03      	ldr	r3, [sp, #12]
   169b4:	685a      	ldr	r2, [r3, #4]
   169b6:	9b03      	ldr	r3, [sp, #12]
   169b8:	685b      	ldr	r3, [r3, #4]
   169ba:	681b      	ldr	r3, [r3, #0]
   169bc:	3308      	adds	r3, #8
   169be:	681b      	ldr	r3, [r3, #0]
   169c0:	9902      	ldr	r1, [sp, #8]
   169c2:	b289      	uxth	r1, r1
   169c4:	4610      	mov	r0, r2
   169c6:	4798      	blx	r3
    // Send arg byte [31:24]
    ssp_interface_->Transfer(static_cast<uint16_t>(arg >> 24) & 0xFF);
   169c8:	9b03      	ldr	r3, [sp, #12]
   169ca:	6858      	ldr	r0, [r3, #4]
   169cc:	9b03      	ldr	r3, [sp, #12]
   169ce:	685b      	ldr	r3, [r3, #4]
   169d0:	681b      	ldr	r3, [r3, #0]
   169d2:	3308      	adds	r3, #8
   169d4:	681b      	ldr	r3, [r3, #0]
   169d6:	9a01      	ldr	r2, [sp, #4]
   169d8:	0e12      	lsrs	r2, r2, #24
   169da:	b292      	uxth	r2, r2
   169dc:	b2d2      	uxtb	r2, r2
   169de:	b292      	uxth	r2, r2
   169e0:	4611      	mov	r1, r2
   169e2:	4798      	blx	r3
    // Send arg byte [23:16]
    ssp_interface_->Transfer(static_cast<uint16_t>(arg >> 16) & 0xFF);
   169e4:	9b03      	ldr	r3, [sp, #12]
   169e6:	6858      	ldr	r0, [r3, #4]
   169e8:	9b03      	ldr	r3, [sp, #12]
   169ea:	685b      	ldr	r3, [r3, #4]
   169ec:	681b      	ldr	r3, [r3, #0]
   169ee:	3308      	adds	r3, #8
   169f0:	681b      	ldr	r3, [r3, #0]
   169f2:	9a01      	ldr	r2, [sp, #4]
   169f4:	0c12      	lsrs	r2, r2, #16
   169f6:	b292      	uxth	r2, r2
   169f8:	b2d2      	uxtb	r2, r2
   169fa:	b292      	uxth	r2, r2
   169fc:	4611      	mov	r1, r2
   169fe:	4798      	blx	r3
    // Send arg byte [15:8]
    ssp_interface_->Transfer(static_cast<uint16_t>(arg >> 8) & 0xFF);
   16a00:	9b03      	ldr	r3, [sp, #12]
   16a02:	6858      	ldr	r0, [r3, #4]
   16a04:	9b03      	ldr	r3, [sp, #12]
   16a06:	685b      	ldr	r3, [r3, #4]
   16a08:	681b      	ldr	r3, [r3, #0]
   16a0a:	3308      	adds	r3, #8
   16a0c:	681b      	ldr	r3, [r3, #0]
   16a0e:	9a01      	ldr	r2, [sp, #4]
   16a10:	0a12      	lsrs	r2, r2, #8
   16a12:	b292      	uxth	r2, r2
   16a14:	b2d2      	uxtb	r2, r2
   16a16:	b292      	uxth	r2, r2
   16a18:	4611      	mov	r1, r2
   16a1a:	4798      	blx	r3
    // Send arg byte [7:0]
    ssp_interface_->Transfer(static_cast<uint16_t>(arg >> 0) & 0xFF);
   16a1c:	9b03      	ldr	r3, [sp, #12]
   16a1e:	685a      	ldr	r2, [r3, #4]
   16a20:	9b03      	ldr	r3, [sp, #12]
   16a22:	685b      	ldr	r3, [r3, #4]
   16a24:	681b      	ldr	r3, [r3, #0]
   16a26:	3308      	adds	r3, #8
   16a28:	681b      	ldr	r3, [r3, #0]
   16a2a:	9901      	ldr	r1, [sp, #4]
   16a2c:	b289      	uxth	r1, r1
   16a2e:	b2c9      	uxtb	r1, r1
   16a30:	b289      	uxth	r1, r1
   16a32:	4610      	mov	r0, r2
   16a34:	4798      	blx	r3
    // Send 7-bit CRC and LSB stop addr (as b1)
    ssp_interface_->Transfer(static_cast<uint16_t>(crc << 1) | 0x01);
   16a36:	9b03      	ldr	r3, [sp, #12]
   16a38:	6858      	ldr	r0, [r3, #4]
   16a3a:	9b03      	ldr	r3, [sp, #12]
   16a3c:	685b      	ldr	r3, [r3, #4]
   16a3e:	681b      	ldr	r3, [r3, #0]
   16a40:	3308      	adds	r3, #8
   16a42:	681b      	ldr	r3, [r3, #0]
   16a44:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
   16a48:	b292      	uxth	r2, r2
   16a4a:	0052      	lsls	r2, r2, #1
   16a4c:	b292      	uxth	r2, r2
   16a4e:	f042 0201 	orr.w	r2, r2, #1
   16a52:	b292      	uxth	r2, r2
   16a54:	4611      	mov	r1, r2
   16a56:	4798      	blx	r3

    // Write garbage while waiting for a response
    // Send at least 1 byte of garbage before checking for a response
    temp_byte = static_cast<uint8_t>(ssp_interface_->Transfer(0xFF));
   16a58:	9b03      	ldr	r3, [sp, #12]
   16a5a:	685a      	ldr	r2, [r3, #4]
   16a5c:	9b03      	ldr	r3, [sp, #12]
   16a5e:	685b      	ldr	r3, [r3, #4]
   16a60:	681b      	ldr	r3, [r3, #0]
   16a62:	3308      	adds	r3, #8
   16a64:	681b      	ldr	r3, [r3, #0]
   16a66:	21ff      	movs	r1, #255	; 0xff
   16a68:	4610      	mov	r0, r2
   16a6a:	4798      	blx	r3
   16a6c:	4603      	mov	r3, r0
   16a6e:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
    while (tries++ < kBusTimeout)
   16a72:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   16a76:	1c5a      	adds	r2, r3, #1
   16a78:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
   16a7c:	2bf9      	cmp	r3, #249	; 0xf9
   16a7e:	bf94      	ite	ls
   16a80:	2301      	movls	r3, #1
   16a82:	2300      	movhi	r3, #0
   16a84:	b2db      	uxtb	r3, r3
   16a86:	2b00      	cmp	r3, #0
   16a88:	d027      	beq.n	16ada <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x2da>
    {
      temp_byte = static_cast<uint8_t>(ssp_interface_->Transfer(0xFF));
   16a8a:	9b03      	ldr	r3, [sp, #12]
   16a8c:	685a      	ldr	r2, [r3, #4]
   16a8e:	9b03      	ldr	r3, [sp, #12]
   16a90:	685b      	ldr	r3, [r3, #4]
   16a92:	681b      	ldr	r3, [r3, #0]
   16a94:	3308      	adds	r3, #8
   16a96:	681b      	ldr	r3, [r3, #0]
   16a98:	21ff      	movs	r1, #255	; 0xff
   16a9a:	4610      	mov	r0, r2
   16a9c:	4798      	blx	r3
   16a9e:	4603      	mov	r3, r0
   16aa0:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
      if (temp_byte != 0xFF)
   16aa4:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
   16aa8:	2bff      	cmp	r3, #255	; 0xff
   16aaa:	d00f      	beq.n	16acc <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x2cc>
      {
        // Determine the offset, since the first byte of a
        // response will always be 0.
        while (temp_byte & (0x80 >> bit_offset))
   16aac:	f89d 202f 	ldrb.w	r2, [sp, #47]	; 0x2f
   16ab0:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
   16ab4:	2180      	movs	r1, #128	; 0x80
   16ab6:	fa41 f303 	asr.w	r3, r1, r3
   16aba:	4013      	ands	r3, r2
   16abc:	2b00      	cmp	r3, #0
   16abe:	d00b      	beq.n	16ad8 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x2d8>
        {
          bit_offset++;
   16ac0:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
   16ac4:	3301      	adds	r3, #1
   16ac6:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
        while (temp_byte & (0x80 >> bit_offset))
   16aca:	e7ef      	b.n	16aac <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x2ac>
        }
        break;
      }
      tries++;
   16acc:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   16ad0:	3301      	adds	r3, #1
   16ad2:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
    while (tries++ < kBusTimeout)
   16ad6:	e7cc      	b.n	16a72 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x272>
        break;
   16ad8:	bf00      	nop
    }

    // Determine response length (in bytes) based on response type
    switch (res_type)
   16ada:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   16adc:	2b07      	cmp	r3, #7
   16ade:	d827      	bhi.n	16b30 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x330>
   16ae0:	a201      	add	r2, pc, #4	; (adr r2, 16ae8 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x2e8>)
   16ae2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   16ae6:	bf00      	nop
   16ae8:	00016b09 	.word	0x00016b09
   16aec:	00016b11 	.word	0x00016b11
   16af0:	00016b19 	.word	0x00016b19
   16af4:	00016b21 	.word	0x00016b21
   16af8:	00016b31 	.word	0x00016b31
   16afc:	00016b31 	.word	0x00016b31
   16b00:	00016b31 	.word	0x00016b31
   16b04:	00016b29 	.word	0x00016b29
    {
      case ResponseType::kR1: res_len = 1; break;
   16b08:	2301      	movs	r3, #1
   16b0a:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
   16b0e:	e019      	b.n	16b44 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x344>
      case ResponseType::kR1b: res_len = 1; break;
   16b10:	2301      	movs	r3, #1
   16b12:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
   16b16:	e015      	b.n	16b44 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x344>
      case ResponseType::kR2: res_len = 2; break;
   16b18:	2302      	movs	r3, #2
   16b1a:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
   16b1e:	e011      	b.n	16b44 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x344>
      case ResponseType::kR3: res_len = 5; break;
   16b20:	2305      	movs	r3, #5
   16b22:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
   16b26:	e00d      	b.n	16b44 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x344>
      case ResponseType::kR7: res_len = 5; break;
   16b28:	2305      	movs	r3, #5
   16b2a:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
   16b2e:	e009      	b.n	16b44 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x344>
      default:
        LOG_ERROR("Response unsupported in SPI mode. Aborting!");
   16b30:	f240 433a 	movw	r3, #1082	; 0x43a
   16b34:	4a56      	ldr	r2, [pc, #344]	; (16c90 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x490>)
   16b36:	4957      	ldr	r1, [pc, #348]	; (16c94 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x494>)
   16b38:	4857      	ldr	r0, [pc, #348]	; (16c98 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x498>)
   16b3a:	f7fd fd3b 	bl	145b4 <printf>
        return -1;
   16b3e:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   16b42:	e09a      	b.n	16c7a <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x47a>
        break;
    }

    // Acquire the response
    uint64_t temp_response = 0;
   16b44:	f04f 0200 	mov.w	r2, #0
   16b48:	f04f 0300 	mov.w	r3, #0
   16b4c:	e9cd 2308 	strd	r2, r3, [sp, #32]
    // Read an extra 8 bits since the response was offset
    uint8_t bytes_to_read =
   16b50:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
   16b54:	2b00      	cmp	r3, #0
   16b56:	d004      	beq.n	16b62 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x362>
   16b58:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
   16b5c:	3301      	adds	r3, #1
   16b5e:	b2db      	uxtb	r3, r3
   16b60:	e001      	b.n	16b66 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x366>
   16b62:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
   16b66:	f88d 301f 	strb.w	r3, [sp, #31]
        static_cast<uint8_t>((bit_offset > 0) ? res_len + 1 : res_len);
    while (bytes_to_read-- > 0)
   16b6a:	f89d 301f 	ldrb.w	r3, [sp, #31]
   16b6e:	1e5a      	subs	r2, r3, #1
   16b70:	f88d 201f 	strb.w	r2, [sp, #31]
   16b74:	2b00      	cmp	r3, #0
   16b76:	bf14      	ite	ne
   16b78:	2301      	movne	r3, #1
   16b7a:	2300      	moveq	r3, #0
   16b7c:	b2db      	uxtb	r3, r3
   16b7e:	2b00      	cmp	r3, #0
   16b80:	d025      	beq.n	16bce <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x3ce>
    {
      // Make space for the next byte
      temp_response = temp_response << 8;
   16b82:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   16b86:	f04f 0200 	mov.w	r2, #0
   16b8a:	f04f 0300 	mov.w	r3, #0
   16b8e:	020b      	lsls	r3, r1, #8
   16b90:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
   16b94:	0202      	lsls	r2, r0, #8
   16b96:	e9cd 2308 	strd	r2, r3, [sp, #32]
      temp_response |= temp_byte;
   16b9a:	f89d b02f 	ldrb.w	fp, [sp, #47]	; 0x2f
   16b9e:	f04f 0c00 	mov.w	ip, #0
   16ba2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   16ba6:	ea4b 0200 	orr.w	r2, fp, r0
   16baa:	ea4c 0301 	orr.w	r3, ip, r1
   16bae:	e9cd 2308 	strd	r2, r3, [sp, #32]
      temp_byte = static_cast<uint8_t>(ssp_interface_->Transfer(0xFF));
   16bb2:	9b03      	ldr	r3, [sp, #12]
   16bb4:	685a      	ldr	r2, [r3, #4]
   16bb6:	9b03      	ldr	r3, [sp, #12]
   16bb8:	685b      	ldr	r3, [r3, #4]
   16bba:	681b      	ldr	r3, [r3, #0]
   16bbc:	3308      	adds	r3, #8
   16bbe:	681b      	ldr	r3, [r3, #0]
   16bc0:	21ff      	movs	r1, #255	; 0xff
   16bc2:	4610      	mov	r0, r2
   16bc4:	4798      	blx	r3
   16bc6:	4603      	mov	r3, r0
   16bc8:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
    while (bytes_to_read-- > 0)
   16bcc:	e7cd      	b.n	16b6a <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x36a>
    }
    // Compensate for the bit offset
    temp_response = temp_response >> bit_offset;
   16bce:	f89d 1030 	ldrb.w	r1, [sp, #48]	; 0x30
   16bd2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   16bd6:	f1c1 0c20 	rsb	ip, r1, #32
   16bda:	f1a1 0020 	sub.w	r0, r1, #32
   16bde:	fa22 f401 	lsr.w	r4, r2, r1
   16be2:	fa03 fc0c 	lsl.w	ip, r3, ip
   16be6:	ea44 040c 	orr.w	r4, r4, ip
   16bea:	fa23 f000 	lsr.w	r0, r3, r0
   16bee:	4304      	orrs	r4, r0
   16bf0:	fa23 f501 	lsr.w	r5, r3, r1
   16bf4:	e9cd 4508 	strd	r4, r5, [sp, #32]

    // Only write to the response buffer if it is provided
    if (response_buffer != nullptr)
   16bf8:	9b00      	ldr	r3, [sp, #0]
   16bfa:	2b00      	cmp	r3, #0
   16bfc:	d025      	beq.n	16c4a <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x44a>
    {
      for (int i = 0; i < res_len; i++)
   16bfe:	2300      	movs	r3, #0
   16c00:	9306      	str	r3, [sp, #24]
   16c02:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
   16c06:	9a06      	ldr	r2, [sp, #24]
   16c08:	429a      	cmp	r2, r3
   16c0a:	da1e      	bge.n	16c4a <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x44a>
      {
        response_buffer[i] =
            static_cast<uint8_t>(temp_response >> 8 * (res_len - 1 - i));
   16c0c:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
   16c10:	1e5a      	subs	r2, r3, #1
   16c12:	9b06      	ldr	r3, [sp, #24]
   16c14:	1ad3      	subs	r3, r2, r3
   16c16:	00da      	lsls	r2, r3, #3
   16c18:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   16c1c:	f1c2 0020 	rsb	r0, r2, #32
   16c20:	f1a2 0120 	sub.w	r1, r2, #32
   16c24:	fa23 f602 	lsr.w	r6, r3, r2
   16c28:	fa04 f000 	lsl.w	r0, r4, r0
   16c2c:	4306      	orrs	r6, r0
   16c2e:	fa24 f101 	lsr.w	r1, r4, r1
   16c32:	430e      	orrs	r6, r1
   16c34:	fa24 f702 	lsr.w	r7, r4, r2
        response_buffer[i] =
   16c38:	9b06      	ldr	r3, [sp, #24]
   16c3a:	9a00      	ldr	r2, [sp, #0]
   16c3c:	4413      	add	r3, r2
   16c3e:	b2f2      	uxtb	r2, r6
   16c40:	701a      	strb	r2, [r3, #0]
      for (int i = 0; i < res_len; i++)
   16c42:	9b06      	ldr	r3, [sp, #24]
   16c44:	3301      	adds	r3, #1
   16c46:	9306      	str	r3, [sp, #24]
   16c48:	e7db      	b.n	16c02 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x402>
      }
    }

    // Only end the transaction if keep_alive isn't requested
    if (keep_alive == KeepAlive::kNo)
   16c4a:	f89d 305c 	ldrb.w	r3, [sp, #92]	; 0x5c
   16c4e:	2b00      	cmp	r3, #0
   16c50:	d111      	bne.n	16c76 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x476>
    {
      // Deselect the SPI comm board
      chip_select_->SetHigh();
   16c52:	9b03      	ldr	r3, [sp, #12]
   16c54:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   16c56:	9b03      	ldr	r3, [sp, #12]
   16c58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   16c5a:	681b      	ldr	r3, [r3, #0]
   16c5c:	330c      	adds	r3, #12
   16c5e:	681b      	ldr	r3, [r3, #0]
   16c60:	4610      	mov	r0, r2
   16c62:	4798      	blx	r3
      chip_select_external_->SetHigh();
   16c64:	9b03      	ldr	r3, [sp, #12]
   16c66:	6bda      	ldr	r2, [r3, #60]	; 0x3c
   16c68:	9b03      	ldr	r3, [sp, #12]
   16c6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   16c6c:	681b      	ldr	r3, [r3, #0]
   16c6e:	330c      	adds	r3, #12
   16c70:	681b      	ldr	r3, [r3, #0]
   16c72:	4610      	mov	r0, r2
   16c74:	4798      	blx	r3
    }
    return res_len;
   16c76:	f89d 4033 	ldrb.w	r4, [sp, #51]	; 0x33
   16c7a:	4643      	mov	r3, r8
   16c7c:	4619      	mov	r1, r3
   16c7e:	4807      	ldr	r0, [pc, #28]	; (16c9c <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x49c>)
   16c80:	f7fc fa4e 	bl	13120 <__cyg_profile_func_exit>
   16c84:	4623      	mov	r3, r4
  }
   16c86:	4618      	mov	r0, r3
   16c88:	b00f      	add	sp, #60	; 0x3c
   16c8a:	e8bd 89f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, fp, pc}
   16c8e:	bf00      	nop
   16c90:	00019594 	.word	0x00019594
   16c94:	00019298 	.word	0x00019298
   16c98:	00018e24 	.word	0x00018e24
   16c9c:	00016801 	.word	0x00016801

00016ca0 <Sd::Crc7Add(unsigned char, unsigned char)>:

  // Adds a message byte to the current CRC-7 to get a the new CRC-7
  uint8_t Crc7Add(uint8_t crc, uint8_t message_byte) override
   16ca0:	b530      	push	{r4, r5, lr}
   16ca2:	b083      	sub	sp, #12
   16ca4:	4675      	mov	r5, lr
   16ca6:	9001      	str	r0, [sp, #4]
   16ca8:	460b      	mov	r3, r1
   16caa:	f88d 3003 	strb.w	r3, [sp, #3]
   16cae:	4613      	mov	r3, r2
   16cb0:	f88d 3002 	strb.w	r3, [sp, #2]
   16cb4:	462b      	mov	r3, r5
   16cb6:	4619      	mov	r1, r3
   16cb8:	4809      	ldr	r0, [pc, #36]	; (16ce0 <Sd::Crc7Add(unsigned char, unsigned char)+0x40>)
   16cba:	f7fc fa1d 	bl	130f8 <__cyg_profile_func_enter>
  {
    return kCrcTable8.crc_table[(crc << 1) ^ message_byte];
   16cbe:	f89d 3003 	ldrb.w	r3, [sp, #3]
   16cc2:	005a      	lsls	r2, r3, #1
   16cc4:	f89d 3002 	ldrb.w	r3, [sp, #2]
   16cc8:	4053      	eors	r3, r2
   16cca:	4a06      	ldr	r2, [pc, #24]	; (16ce4 <Sd::Crc7Add(unsigned char, unsigned char)+0x44>)
   16ccc:	5cd4      	ldrb	r4, [r2, r3]
   16cce:	462b      	mov	r3, r5
   16cd0:	4619      	mov	r1, r3
   16cd2:	4803      	ldr	r0, [pc, #12]	; (16ce0 <Sd::Crc7Add(unsigned char, unsigned char)+0x40>)
   16cd4:	f7fc fa24 	bl	13120 <__cyg_profile_func_exit>
   16cd8:	4623      	mov	r3, r4
  }
   16cda:	4618      	mov	r0, r3
   16cdc:	b003      	add	sp, #12
   16cde:	bd30      	pop	{r4, r5, pc}
   16ce0:	00016ca1 	.word	0x00016ca1
   16ce4:	00018f08 	.word	0x00018f08

00016ce8 <Sd::GetCrc7(unsigned char*, unsigned char)>:

  // Returns the CRC-7 for a message of "length" bytes
  uint8_t GetCrc7(uint8_t * message, uint8_t length) override
   16ce8:	b530      	push	{r4, r5, lr}
   16cea:	b087      	sub	sp, #28
   16cec:	4675      	mov	r5, lr
   16cee:	9003      	str	r0, [sp, #12]
   16cf0:	9102      	str	r1, [sp, #8]
   16cf2:	4613      	mov	r3, r2
   16cf4:	f88d 3007 	strb.w	r3, [sp, #7]
   16cf8:	462b      	mov	r3, r5
   16cfa:	4619      	mov	r1, r3
   16cfc:	4815      	ldr	r0, [pc, #84]	; (16d54 <Sd::GetCrc7(unsigned char*, unsigned char)+0x6c>)
   16cfe:	f7fc f9fb 	bl	130f8 <__cyg_profile_func_enter>
  {
    uint8_t crc = 0;
   16d02:	2300      	movs	r3, #0
   16d04:	f88d 3017 	strb.w	r3, [sp, #23]
    for (int i = 0; i < length; i++)
   16d08:	2300      	movs	r3, #0
   16d0a:	9304      	str	r3, [sp, #16]
   16d0c:	f89d 3007 	ldrb.w	r3, [sp, #7]
   16d10:	9a04      	ldr	r2, [sp, #16]
   16d12:	429a      	cmp	r2, r3
   16d14:	da12      	bge.n	16d3c <Sd::GetCrc7(unsigned char*, unsigned char)+0x54>
    {
      crc = Crc7Add(crc, message[i]);
   16d16:	9b03      	ldr	r3, [sp, #12]
   16d18:	681b      	ldr	r3, [r3, #0]
   16d1a:	3318      	adds	r3, #24
   16d1c:	681b      	ldr	r3, [r3, #0]
   16d1e:	9a04      	ldr	r2, [sp, #16]
   16d20:	9902      	ldr	r1, [sp, #8]
   16d22:	440a      	add	r2, r1
   16d24:	7812      	ldrb	r2, [r2, #0]
   16d26:	f89d 1017 	ldrb.w	r1, [sp, #23]
   16d2a:	9803      	ldr	r0, [sp, #12]
   16d2c:	4798      	blx	r3
   16d2e:	4603      	mov	r3, r0
   16d30:	f88d 3017 	strb.w	r3, [sp, #23]
    for (int i = 0; i < length; i++)
   16d34:	9b04      	ldr	r3, [sp, #16]
   16d36:	3301      	adds	r3, #1
   16d38:	9304      	str	r3, [sp, #16]
   16d3a:	e7e7      	b.n	16d0c <Sd::GetCrc7(unsigned char*, unsigned char)+0x24>
    }
    return crc;
   16d3c:	f89d 4017 	ldrb.w	r4, [sp, #23]
   16d40:	462b      	mov	r3, r5
   16d42:	4619      	mov	r1, r3
   16d44:	4803      	ldr	r0, [pc, #12]	; (16d54 <Sd::GetCrc7(unsigned char*, unsigned char)+0x6c>)
   16d46:	f7fc f9eb 	bl	13120 <__cyg_profile_func_exit>
   16d4a:	4623      	mov	r3, r4
  }
   16d4c:	4618      	mov	r0, r3
   16d4e:	b007      	add	sp, #28
   16d50:	bd30      	pop	{r4, r5, pc}
   16d52:	bf00      	nop
   16d54:	00016ce9 	.word	0x00016ce9

00016d58 <Sd::GetCrc16(unsigned char*, unsigned short)>:

  // Returns CCITT CRC-16 for a message of "length" bytes
  uint16_t GetCrc16(uint8_t * message, uint16_t length) override
   16d58:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
   16d5c:	b08c      	sub	sp, #48	; 0x30
   16d5e:	4677      	mov	r7, lr
   16d60:	9003      	str	r0, [sp, #12]
   16d62:	9102      	str	r1, [sp, #8]
   16d64:	4613      	mov	r3, r2
   16d66:	f8ad 3006 	strh.w	r3, [sp, #6]
   16d6a:	463b      	mov	r3, r7
   16d6c:	4619      	mov	r1, r3
   16d6e:	4837      	ldr	r0, [pc, #220]	; (16e4c <Sd::GetCrc16(unsigned char*, unsigned short)+0xf4>)
   16d70:	f7fc f9c2 	bl	130f8 <__cyg_profile_func_enter>
  {
    uint64_t crc = 0x0000;
   16d74:	f04f 0300 	mov.w	r3, #0
   16d78:	f04f 0400 	mov.w	r4, #0
   16d7c:	e9cd 340a 	strd	r3, r4, [sp, #40]	; 0x28
    uint64_t temp;
    uint64_t final_value = 0;
   16d80:	f04f 0300 	mov.w	r3, #0
   16d84:	f04f 0400 	mov.w	r4, #0
   16d88:	e9cd 3406 	strd	r3, r4, [sp, #24]

    for (uint64_t count = 0; count < length; ++count)
   16d8c:	f04f 0300 	mov.w	r3, #0
   16d90:	f04f 0400 	mov.w	r4, #0
   16d94:	e9cd 3408 	strd	r3, r4, [sp, #32]
   16d98:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   16d9c:	f04f 0400 	mov.w	r4, #0
   16da0:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
   16da4:	42a2      	cmp	r2, r4
   16da6:	bf08      	it	eq
   16da8:	4299      	cmpeq	r1, r3
   16daa:	d23f      	bcs.n	16e2c <Sd::GetCrc16(unsigned char*, unsigned short)+0xd4>
    {
      temp = (*message++ ^ (crc >> 8)) & 0xff;
   16dac:	9b02      	ldr	r3, [sp, #8]
   16dae:	1c5a      	adds	r2, r3, #1
   16db0:	9202      	str	r2, [sp, #8]
   16db2:	781b      	ldrb	r3, [r3, #0]
   16db4:	b2dd      	uxtb	r5, r3
   16db6:	f04f 0600 	mov.w	r6, #0
   16dba:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
   16dbe:	f04f 0300 	mov.w	r3, #0
   16dc2:	f04f 0400 	mov.w	r4, #0
   16dc6:	0a0b      	lsrs	r3, r1, #8
   16dc8:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
   16dcc:	0a14      	lsrs	r4, r2, #8
   16dce:	ea83 0b05 	eor.w	fp, r3, r5
   16dd2:	ea84 0c06 	eor.w	ip, r4, r6
   16dd6:	f04f 01ff 	mov.w	r1, #255	; 0xff
   16dda:	f04f 0200 	mov.w	r2, #0
   16dde:	ea0b 0301 	and.w	r3, fp, r1
   16de2:	ea0c 0402 	and.w	r4, ip, r2
   16de6:	e9cd 3404 	strd	r3, r4, [sp, #16]
      crc  = kCrcTable16.crc_table[temp] ^ (crc << 8);
   16dea:	4a19      	ldr	r2, [pc, #100]	; (16e50 <Sd::GetCrc16(unsigned char*, unsigned short)+0xf8>)
   16dec:	9b04      	ldr	r3, [sp, #16]
   16dee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
   16df2:	b29d      	uxth	r5, r3
   16df4:	f04f 0600 	mov.w	r6, #0
   16df8:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
   16dfc:	f04f 0b00 	mov.w	fp, #0
   16e00:	f04f 0c00 	mov.w	ip, #0
   16e04:	ea4f 2c02 	mov.w	ip, r2, lsl #8
   16e08:	ea4c 6c11 	orr.w	ip, ip, r1, lsr #24
   16e0c:	ea4f 2b01 	mov.w	fp, r1, lsl #8
   16e10:	ea8b 0305 	eor.w	r3, fp, r5
   16e14:	ea8c 0406 	eor.w	r4, ip, r6
   16e18:	e9cd 340a 	strd	r3, r4, [sp, #40]	; 0x28
    for (uint64_t count = 0; count < length; ++count)
   16e1c:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   16e20:	1c59      	adds	r1, r3, #1
   16e22:	f144 0200 	adc.w	r2, r4, #0
   16e26:	e9cd 1208 	strd	r1, r2, [sp, #32]
   16e2a:	e7b5      	b.n	16d98 <Sd::GetCrc16(unsigned char*, unsigned short)+0x40>
    }

    return static_cast<uint16_t>(crc ^ final_value);
   16e2c:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
   16e30:	f8bd 3018 	ldrh.w	r3, [sp, #24]
   16e34:	4053      	eors	r3, r2
   16e36:	b29c      	uxth	r4, r3
   16e38:	463b      	mov	r3, r7
   16e3a:	4619      	mov	r1, r3
   16e3c:	4803      	ldr	r0, [pc, #12]	; (16e4c <Sd::GetCrc16(unsigned char*, unsigned short)+0xf4>)
   16e3e:	f7fc f96f 	bl	13120 <__cyg_profile_func_exit>
   16e42:	4623      	mov	r3, r4
  }
   16e44:	4618      	mov	r0, r3
   16e46:	b00c      	add	sp, #48	; 0x30
   16e48:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
   16e4c:	00016d59 	.word	0x00016d59
   16e50:	00019008 	.word	0x00019008

00016e54 <unsigned long bit::Set<unsigned long>(unsigned long, unsigned long)>:
constexpr T Set(T target, uint32_t position)
   16e54:	b530      	push	{r4, r5, lr}
   16e56:	b083      	sub	sp, #12
   16e58:	4675      	mov	r5, lr
   16e5a:	9001      	str	r0, [sp, #4]
   16e5c:	9100      	str	r1, [sp, #0]
   16e5e:	462b      	mov	r3, r5
   16e60:	4619      	mov	r1, r3
   16e62:	480a      	ldr	r0, [pc, #40]	; (16e8c <unsigned long bit::Set<unsigned long>(unsigned long, unsigned long)+0x38>)
   16e64:	f7fc f948 	bl	130f8 <__cyg_profile_func_enter>
  return target | (1 << position);
   16e68:	2201      	movs	r2, #1
   16e6a:	9b00      	ldr	r3, [sp, #0]
   16e6c:	fa02 f303 	lsl.w	r3, r2, r3
   16e70:	461a      	mov	r2, r3
   16e72:	9b01      	ldr	r3, [sp, #4]
   16e74:	ea42 0403 	orr.w	r4, r2, r3
   16e78:	462b      	mov	r3, r5
   16e7a:	4619      	mov	r1, r3
   16e7c:	4803      	ldr	r0, [pc, #12]	; (16e8c <unsigned long bit::Set<unsigned long>(unsigned long, unsigned long)+0x38>)
   16e7e:	f7fc f94f 	bl	13120 <__cyg_profile_func_exit>
   16e82:	4623      	mov	r3, r4
}
   16e84:	4618      	mov	r0, r3
   16e86:	b003      	add	sp, #12
   16e88:	bd30      	pop	{r4, r5, pc}
   16e8a:	bf00      	nop
   16e8c:	00016e55 	.word	0x00016e55

00016e90 <bool bit::Read<unsigned long>(unsigned long, unsigned long)>:
[[gnu::always_inline]][[nodiscard]] constexpr bool Read(T target,
   16e90:	b530      	push	{r4, r5, lr}
   16e92:	b083      	sub	sp, #12
   16e94:	4675      	mov	r5, lr
   16e96:	9001      	str	r0, [sp, #4]
   16e98:	9100      	str	r1, [sp, #0]
   16e9a:	462b      	mov	r3, r5
   16e9c:	4619      	mov	r1, r3
   16e9e:	480c      	ldr	r0, [pc, #48]	; (16ed0 <bool bit::Read<unsigned long>(unsigned long, unsigned long)+0x40>)
   16ea0:	f7fc f92a 	bl	130f8 <__cyg_profile_func_enter>
  return static_cast<bool>(target & (1 << position));
   16ea4:	2201      	movs	r2, #1
   16ea6:	9b00      	ldr	r3, [sp, #0]
   16ea8:	fa02 f303 	lsl.w	r3, r2, r3
   16eac:	461a      	mov	r2, r3
   16eae:	9b01      	ldr	r3, [sp, #4]
   16eb0:	4013      	ands	r3, r2
   16eb2:	2b00      	cmp	r3, #0
   16eb4:	bf14      	ite	ne
   16eb6:	2301      	movne	r3, #1
   16eb8:	2300      	moveq	r3, #0
   16eba:	b2dc      	uxtb	r4, r3
   16ebc:	462b      	mov	r3, r5
   16ebe:	4619      	mov	r1, r3
   16ec0:	4803      	ldr	r0, [pc, #12]	; (16ed0 <bool bit::Read<unsigned long>(unsigned long, unsigned long)+0x40>)
   16ec2:	f7fc f92d 	bl	13120 <__cyg_profile_func_exit>
   16ec6:	4623      	mov	r3, r4
}
   16ec8:	4618      	mov	r0, r3
   16eca:	b003      	add	sp, #12
   16ecc:	bd30      	pop	{r4, r5, pc}
   16ece:	bf00      	nop
   16ed0:	00016e91 	.word	0x00016e91

00016ed4 <unsigned long bit::Insert<unsigned long, unsigned char>(unsigned long, unsigned char, unsigned long, unsigned long)>:
constexpr T Insert(T target, U value, uint32_t position, uint32_t width = 1)
   16ed4:	b530      	push	{r4, r5, lr}
   16ed6:	b089      	sub	sp, #36	; 0x24
   16ed8:	4675      	mov	r5, lr
   16eda:	9003      	str	r0, [sp, #12]
   16edc:	9201      	str	r2, [sp, #4]
   16ede:	9300      	str	r3, [sp, #0]
   16ee0:	460b      	mov	r3, r1
   16ee2:	f88d 300b 	strb.w	r3, [sp, #11]
   16ee6:	462b      	mov	r3, r5
   16ee8:	4619      	mov	r1, r3
   16eea:	4816      	ldr	r0, [pc, #88]	; (16f44 <unsigned long bit::Insert<unsigned long, unsigned char>(unsigned long, unsigned char, unsigned long, unsigned long)+0x70>)
   16eec:	f7fc f904 	bl	130f8 <__cyg_profile_func_enter>
  constexpr UnsignedT kFieldOfOnes = GenerateFieldOfOnes<T>();
   16ef0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   16ef4:	9307      	str	r3, [sp, #28]
  constexpr size_t kTargetWidth     = sizeof(T) * 8;
   16ef6:	2320      	movs	r3, #32
   16ef8:	9306      	str	r3, [sp, #24]
  UnsignedT mask   = kFieldOfOnes >> (kTargetWidth - width);
   16efa:	9b00      	ldr	r3, [sp, #0]
   16efc:	f1c3 0320 	rsb	r3, r3, #32
   16f00:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   16f04:	fa22 f303 	lsr.w	r3, r2, r3
   16f08:	9305      	str	r3, [sp, #20]
  target &= ~(mask << position);
   16f0a:	9a05      	ldr	r2, [sp, #20]
   16f0c:	9b01      	ldr	r3, [sp, #4]
   16f0e:	fa02 f303 	lsl.w	r3, r2, r3
   16f12:	43db      	mvns	r3, r3
   16f14:	9a03      	ldr	r2, [sp, #12]
   16f16:	4013      	ands	r3, r2
   16f18:	9303      	str	r3, [sp, #12]
  target |= (value & mask) << position;
   16f1a:	f89d 200b 	ldrb.w	r2, [sp, #11]
   16f1e:	9b05      	ldr	r3, [sp, #20]
   16f20:	401a      	ands	r2, r3
   16f22:	9b01      	ldr	r3, [sp, #4]
   16f24:	fa02 f303 	lsl.w	r3, r2, r3
   16f28:	9a03      	ldr	r2, [sp, #12]
   16f2a:	4313      	orrs	r3, r2
   16f2c:	9303      	str	r3, [sp, #12]
  return target;
   16f2e:	9c03      	ldr	r4, [sp, #12]
   16f30:	462b      	mov	r3, r5
   16f32:	4619      	mov	r1, r3
   16f34:	4803      	ldr	r0, [pc, #12]	; (16f44 <unsigned long bit::Insert<unsigned long, unsigned char>(unsigned long, unsigned char, unsigned long, unsigned long)+0x70>)
   16f36:	f7fc f8f3 	bl	13120 <__cyg_profile_func_exit>
   16f3a:	4623      	mov	r3, r4
}
   16f3c:	4618      	mov	r0, r3
   16f3e:	b009      	add	sp, #36	; 0x24
   16f40:	bd30      	pop	{r4, r5, pc}
   16f42:	bf00      	nop
   16f44:	00016ed5 	.word	0x00016ed5

00016f48 <unsigned long bit::Extract<unsigned long>(unsigned long, unsigned long, unsigned long)>:
constexpr T Extract(T target, uint32_t position, uint32_t width = 1)
   16f48:	b530      	push	{r4, r5, lr}
   16f4a:	b089      	sub	sp, #36	; 0x24
   16f4c:	4675      	mov	r5, lr
   16f4e:	9003      	str	r0, [sp, #12]
   16f50:	9102      	str	r1, [sp, #8]
   16f52:	9201      	str	r2, [sp, #4]
   16f54:	462b      	mov	r3, r5
   16f56:	4619      	mov	r1, r3
   16f58:	480f      	ldr	r0, [pc, #60]	; (16f98 <unsigned long bit::Extract<unsigned long>(unsigned long, unsigned long, unsigned long)+0x50>)
   16f5a:	f7fc f8cd 	bl	130f8 <__cyg_profile_func_enter>
  constexpr UnsignedT kFieldOfOnes = GenerateFieldOfOnes<T>();
   16f5e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   16f62:	9307      	str	r3, [sp, #28]
  constexpr size_t kTargetWidth     = sizeof(T) * 8;
   16f64:	2320      	movs	r3, #32
   16f66:	9306      	str	r3, [sp, #24]
  UnsignedT mask   = kFieldOfOnes >> (kTargetWidth - width);
   16f68:	9b01      	ldr	r3, [sp, #4]
   16f6a:	f1c3 0320 	rsb	r3, r3, #32
   16f6e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   16f72:	fa22 f303 	lsr.w	r3, r2, r3
   16f76:	9305      	str	r3, [sp, #20]
  return (target >> position) & mask;
   16f78:	9a03      	ldr	r2, [sp, #12]
   16f7a:	9b02      	ldr	r3, [sp, #8]
   16f7c:	40da      	lsrs	r2, r3
   16f7e:	9b05      	ldr	r3, [sp, #20]
   16f80:	ea02 0403 	and.w	r4, r2, r3
   16f84:	462b      	mov	r3, r5
   16f86:	4619      	mov	r1, r3
   16f88:	4803      	ldr	r0, [pc, #12]	; (16f98 <unsigned long bit::Extract<unsigned long>(unsigned long, unsigned long, unsigned long)+0x50>)
   16f8a:	f7fc f8c9 	bl	13120 <__cyg_profile_func_exit>
   16f8e:	4623      	mov	r3, r4
}
   16f90:	4618      	mov	r0, r3
   16f92:	b009      	add	sp, #36	; 0x24
   16f94:	bd30      	pop	{r4, r5, pc}
   16f96:	bf00      	nop
   16f98:	00016f49 	.word	0x00016f49

00016f9c <unsigned long bit::Insert<unsigned long, bool>(unsigned long, bool, unsigned long, unsigned long)>:
constexpr T Insert(T target, U value, uint32_t position, uint32_t width = 1)
   16f9c:	b530      	push	{r4, r5, lr}
   16f9e:	b089      	sub	sp, #36	; 0x24
   16fa0:	4675      	mov	r5, lr
   16fa2:	9003      	str	r0, [sp, #12]
   16fa4:	9201      	str	r2, [sp, #4]
   16fa6:	9300      	str	r3, [sp, #0]
   16fa8:	460b      	mov	r3, r1
   16faa:	f88d 300b 	strb.w	r3, [sp, #11]
   16fae:	462b      	mov	r3, r5
   16fb0:	4619      	mov	r1, r3
   16fb2:	4816      	ldr	r0, [pc, #88]	; (1700c <unsigned long bit::Insert<unsigned long, bool>(unsigned long, bool, unsigned long, unsigned long)+0x70>)
   16fb4:	f7fc f8a0 	bl	130f8 <__cyg_profile_func_enter>
  constexpr UnsignedT kFieldOfOnes = GenerateFieldOfOnes<T>();
   16fb8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   16fbc:	9307      	str	r3, [sp, #28]
  constexpr size_t kTargetWidth     = sizeof(T) * 8;
   16fbe:	2320      	movs	r3, #32
   16fc0:	9306      	str	r3, [sp, #24]
  UnsignedT mask   = kFieldOfOnes >> (kTargetWidth - width);
   16fc2:	9b00      	ldr	r3, [sp, #0]
   16fc4:	f1c3 0320 	rsb	r3, r3, #32
   16fc8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   16fcc:	fa22 f303 	lsr.w	r3, r2, r3
   16fd0:	9305      	str	r3, [sp, #20]
  target &= ~(mask << position);
   16fd2:	9a05      	ldr	r2, [sp, #20]
   16fd4:	9b01      	ldr	r3, [sp, #4]
   16fd6:	fa02 f303 	lsl.w	r3, r2, r3
   16fda:	43db      	mvns	r3, r3
   16fdc:	9a03      	ldr	r2, [sp, #12]
   16fde:	4013      	ands	r3, r2
   16fe0:	9303      	str	r3, [sp, #12]
  target |= (value & mask) << position;
   16fe2:	f89d 200b 	ldrb.w	r2, [sp, #11]
   16fe6:	9b05      	ldr	r3, [sp, #20]
   16fe8:	401a      	ands	r2, r3
   16fea:	9b01      	ldr	r3, [sp, #4]
   16fec:	fa02 f303 	lsl.w	r3, r2, r3
   16ff0:	9a03      	ldr	r2, [sp, #12]
   16ff2:	4313      	orrs	r3, r2
   16ff4:	9303      	str	r3, [sp, #12]
  return target;
   16ff6:	9c03      	ldr	r4, [sp, #12]
   16ff8:	462b      	mov	r3, r5
   16ffa:	4619      	mov	r1, r3
   16ffc:	4803      	ldr	r0, [pc, #12]	; (1700c <unsigned long bit::Insert<unsigned long, bool>(unsigned long, bool, unsigned long, unsigned long)+0x70>)
   16ffe:	f7fc f88f 	bl	13120 <__cyg_profile_func_exit>
   17002:	4623      	mov	r3, r4
}
   17004:	4618      	mov	r0, r3
   17006:	b009      	add	sp, #36	; 0x24
   17008:	bd30      	pop	{r4, r5, pc}
   1700a:	bf00      	nop
   1700c:	00016f9d 	.word	0x00016f9d

00017010 <__static_initialization_and_destruction_0(int, int)>:
extern "C" DRESULT disk_ioctl([[maybe_unused]] BYTE drive_number,
                              [[maybe_unused]] BYTE command,
                              [[maybe_unused]] void * buffer)
{
  return RES_PARERR;
}
   17010:	b530      	push	{r4, r5, lr}
   17012:	b085      	sub	sp, #20
   17014:	4674      	mov	r4, lr
   17016:	9003      	str	r0, [sp, #12]
   17018:	9102      	str	r1, [sp, #8]
   1701a:	4623      	mov	r3, r4
   1701c:	4619      	mov	r1, r3
   1701e:	480e      	ldr	r0, [pc, #56]	; (17058 <__static_initialization_and_destruction_0(int, int)+0x48>)
   17020:	f7fc f86a 	bl	130f8 <__cyg_profile_func_enter>
   17024:	9b03      	ldr	r3, [sp, #12]
   17026:	2b01      	cmp	r3, #1
   17028:	d10e      	bne.n	17048 <__static_initialization_and_destruction_0(int, int)+0x38>
   1702a:	9b02      	ldr	r3, [sp, #8]
   1702c:	f64f 72ff 	movw	r2, #65535	; 0xffff
   17030:	4293      	cmp	r3, r2
   17032:	d109      	bne.n	17048 <__static_initialization_and_destruction_0(int, int)+0x38>
Sd sd_card(Sd::DebugSdCard_t{});
   17034:	2306      	movs	r3, #6
   17036:	9301      	str	r3, [sp, #4]
   17038:	2300      	movs	r3, #0
   1703a:	9300      	str	r3, [sp, #0]
   1703c:	2308      	movs	r3, #8
   1703e:	2201      	movs	r2, #1
   17040:	4629      	mov	r1, r5
   17042:	4806      	ldr	r0, [pc, #24]	; (1705c <__static_initialization_and_destruction_0(int, int)+0x4c>)
   17044:	f7fe fdb8 	bl	15bb8 <Sd::Sd(Sd::DebugSdCard_t, unsigned char, unsigned char, unsigned char, unsigned char)>
   17048:	4623      	mov	r3, r4
   1704a:	4619      	mov	r1, r3
   1704c:	4802      	ldr	r0, [pc, #8]	; (17058 <__static_initialization_and_destruction_0(int, int)+0x48>)
   1704e:	f7fc f867 	bl	13120 <__cyg_profile_func_exit>
}
   17052:	bf00      	nop
   17054:	b005      	add	sp, #20
   17056:	bd30      	pop	{r4, r5, pc}
   17058:	00017011 	.word	0x00017011
   1705c:	10000560 	.word	0x10000560

00017060 <_GLOBAL__sub_I_disk_status>:
   17060:	b510      	push	{r4, lr}
   17062:	4674      	mov	r4, lr
   17064:	4623      	mov	r3, r4
   17066:	4619      	mov	r1, r3
   17068:	4806      	ldr	r0, [pc, #24]	; (17084 <_GLOBAL__sub_I_disk_status+0x24>)
   1706a:	f7fc f845 	bl	130f8 <__cyg_profile_func_enter>
   1706e:	f64f 71ff 	movw	r1, #65535	; 0xffff
   17072:	2001      	movs	r0, #1
   17074:	f7ff ffcc 	bl	17010 <__static_initialization_and_destruction_0(int, int)>
   17078:	4623      	mov	r3, r4
   1707a:	4619      	mov	r1, r3
   1707c:	4801      	ldr	r0, [pc, #4]	; (17084 <_GLOBAL__sub_I_disk_status+0x24>)
   1707e:	f7fc f84f 	bl	13120 <__cyg_profile_func_exit>
   17082:	bd10      	pop	{r4, pc}
   17084:	00017061 	.word	0x00017061

00017088 <__cxa_pure_virtual>:
   17088:	b508      	push	{r3, lr}
   1708a:	f000 f80d 	bl	170a8 <std::terminate()>

0001708e <__cxxabiv1::__terminate(void (*)())>:
   1708e:	b508      	push	{r3, lr}
   17090:	4780      	blx	r0
   17092:	f000 fa0f 	bl	174b4 <abort>
   17096:	Address 0x0000000000017096 is out of bounds.


00017098 <std::get_terminate()>:
   17098:	4b02      	ldr	r3, [pc, #8]	; (170a4 <std::get_terminate()+0xc>)
   1709a:	6818      	ldr	r0, [r3, #0]
   1709c:	f3bf 8f5b 	dmb	ish
   170a0:	4770      	bx	lr
   170a2:	bf00      	nop
   170a4:	100001d4 	.word	0x100001d4

000170a8 <std::terminate()>:
   170a8:	b508      	push	{r3, lr}
   170aa:	f7ff fff5 	bl	17098 <std::get_terminate()>
   170ae:	f7ff ffee 	bl	1708e <__cxxabiv1::__terminate(void (*)())>
   170b2:	Address 0x00000000000170b2 is out of bounds.


000170b4 <roundf>:
   170b4:	b082      	sub	sp, #8
   170b6:	ed8d 0a01 	vstr	s0, [sp, #4]
   170ba:	9901      	ldr	r1, [sp, #4]
   170bc:	f3c1 53c7 	ubfx	r3, r1, #23, #8
   170c0:	f1a3 027f 	sub.w	r2, r3, #127	; 0x7f
   170c4:	2a16      	cmp	r2, #22
   170c6:	dc0c      	bgt.n	170e2 <roundf+0x2e>
   170c8:	2a00      	cmp	r2, #0
   170ca:	db10      	blt.n	170ee <roundf+0x3a>
   170cc:	4810      	ldr	r0, [pc, #64]	; (17110 <roundf+0x5c>)
   170ce:	4110      	asrs	r0, r2
   170d0:	4201      	tst	r1, r0
   170d2:	d008      	beq.n	170e6 <roundf+0x32>
   170d4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   170d8:	4113      	asrs	r3, r2
   170da:	440b      	add	r3, r1
   170dc:	ea23 0300 	bic.w	r3, r3, r0
   170e0:	e00b      	b.n	170fa <roundf+0x46>
   170e2:	2a80      	cmp	r2, #128	; 0x80
   170e4:	d00d      	beq.n	17102 <roundf+0x4e>
   170e6:	ed9d 0a01 	vldr	s0, [sp, #4]
   170ea:	b002      	add	sp, #8
   170ec:	4770      	bx	lr
   170ee:	3201      	adds	r2, #1
   170f0:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
   170f4:	d101      	bne.n	170fa <roundf+0x46>
   170f6:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
   170fa:	ee00 3a10 	vmov	s0, r3
   170fe:	b002      	add	sp, #8
   17100:	4770      	bx	lr
   17102:	eddd 7a01 	vldr	s15, [sp, #4]
   17106:	ee37 0aa7 	vadd.f32	s0, s15, s15
   1710a:	b002      	add	sp, #8
   1710c:	4770      	bx	lr
   1710e:	bf00      	nop
   17110:	007fffff 	.word	0x007fffff

00017114 <__aeabi_d2f>:
   17114:	ea4f 0241 	mov.w	r2, r1, lsl #1
   17118:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   1711c:	bf24      	itt	cs
   1711e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   17122:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   17126:	d90d      	bls.n	17144 <__aeabi_d2f+0x30>
   17128:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   1712c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   17130:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   17134:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   17138:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   1713c:	bf08      	it	eq
   1713e:	f020 0001 	biceq.w	r0, r0, #1
   17142:	4770      	bx	lr
   17144:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   17148:	d121      	bne.n	1718e <__aeabi_d2f+0x7a>
   1714a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   1714e:	bfbc      	itt	lt
   17150:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   17154:	4770      	bxlt	lr
   17156:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   1715a:	ea4f 5252 	mov.w	r2, r2, lsr #21
   1715e:	f1c2 0218 	rsb	r2, r2, #24
   17162:	f1c2 0c20 	rsb	ip, r2, #32
   17166:	fa10 f30c 	lsls.w	r3, r0, ip
   1716a:	fa20 f002 	lsr.w	r0, r0, r2
   1716e:	bf18      	it	ne
   17170:	f040 0001 	orrne.w	r0, r0, #1
   17174:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   17178:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   1717c:	fa03 fc0c 	lsl.w	ip, r3, ip
   17180:	ea40 000c 	orr.w	r0, r0, ip
   17184:	fa23 f302 	lsr.w	r3, r3, r2
   17188:	ea4f 0343 	mov.w	r3, r3, lsl #1
   1718c:	e7cc      	b.n	17128 <__aeabi_d2f+0x14>
   1718e:	ea7f 5362 	mvns.w	r3, r2, asr #21
   17192:	d107      	bne.n	171a4 <__aeabi_d2f+0x90>
   17194:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   17198:	bf1e      	ittt	ne
   1719a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   1719e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   171a2:	4770      	bxne	lr
   171a4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   171a8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   171ac:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   171b0:	4770      	bx	lr
   171b2:	bf00      	nop

000171b4 <__aeabi_uldivmod>:
   171b4:	b953      	cbnz	r3, 171cc <__aeabi_uldivmod+0x18>
   171b6:	b94a      	cbnz	r2, 171cc <__aeabi_uldivmod+0x18>
   171b8:	2900      	cmp	r1, #0
   171ba:	bf08      	it	eq
   171bc:	2800      	cmpeq	r0, #0
   171be:	bf1c      	itt	ne
   171c0:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
   171c4:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   171c8:	f000 b972 	b.w	174b0 <__aeabi_idiv0>
   171cc:	f1ad 0c08 	sub.w	ip, sp, #8
   171d0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   171d4:	f000 f806 	bl	171e4 <__udivmoddi4>
   171d8:	f8dd e004 	ldr.w	lr, [sp, #4]
   171dc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   171e0:	b004      	add	sp, #16
   171e2:	4770      	bx	lr

000171e4 <__udivmoddi4>:
   171e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   171e8:	9e08      	ldr	r6, [sp, #32]
   171ea:	4604      	mov	r4, r0
   171ec:	4688      	mov	r8, r1
   171ee:	2b00      	cmp	r3, #0
   171f0:	d14b      	bne.n	1728a <__udivmoddi4+0xa6>
   171f2:	428a      	cmp	r2, r1
   171f4:	4615      	mov	r5, r2
   171f6:	d967      	bls.n	172c8 <__udivmoddi4+0xe4>
   171f8:	fab2 f282 	clz	r2, r2
   171fc:	b14a      	cbz	r2, 17212 <__udivmoddi4+0x2e>
   171fe:	f1c2 0720 	rsb	r7, r2, #32
   17202:	fa01 f302 	lsl.w	r3, r1, r2
   17206:	fa20 f707 	lsr.w	r7, r0, r7
   1720a:	4095      	lsls	r5, r2
   1720c:	ea47 0803 	orr.w	r8, r7, r3
   17210:	4094      	lsls	r4, r2
   17212:	ea4f 4e15 	mov.w	lr, r5, lsr #16
   17216:	0c23      	lsrs	r3, r4, #16
   17218:	fbb8 f7fe 	udiv	r7, r8, lr
   1721c:	fa1f fc85 	uxth.w	ip, r5
   17220:	fb0e 8817 	mls	r8, lr, r7, r8
   17224:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
   17228:	fb07 f10c 	mul.w	r1, r7, ip
   1722c:	4299      	cmp	r1, r3
   1722e:	d909      	bls.n	17244 <__udivmoddi4+0x60>
   17230:	18eb      	adds	r3, r5, r3
   17232:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
   17236:	f080 811b 	bcs.w	17470 <__udivmoddi4+0x28c>
   1723a:	4299      	cmp	r1, r3
   1723c:	f240 8118 	bls.w	17470 <__udivmoddi4+0x28c>
   17240:	3f02      	subs	r7, #2
   17242:	442b      	add	r3, r5
   17244:	1a5b      	subs	r3, r3, r1
   17246:	b2a4      	uxth	r4, r4
   17248:	fbb3 f0fe 	udiv	r0, r3, lr
   1724c:	fb0e 3310 	mls	r3, lr, r0, r3
   17250:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
   17254:	fb00 fc0c 	mul.w	ip, r0, ip
   17258:	45a4      	cmp	ip, r4
   1725a:	d909      	bls.n	17270 <__udivmoddi4+0x8c>
   1725c:	192c      	adds	r4, r5, r4
   1725e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   17262:	f080 8107 	bcs.w	17474 <__udivmoddi4+0x290>
   17266:	45a4      	cmp	ip, r4
   17268:	f240 8104 	bls.w	17474 <__udivmoddi4+0x290>
   1726c:	3802      	subs	r0, #2
   1726e:	442c      	add	r4, r5
   17270:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
   17274:	eba4 040c 	sub.w	r4, r4, ip
   17278:	2700      	movs	r7, #0
   1727a:	b11e      	cbz	r6, 17284 <__udivmoddi4+0xa0>
   1727c:	40d4      	lsrs	r4, r2
   1727e:	2300      	movs	r3, #0
   17280:	e9c6 4300 	strd	r4, r3, [r6]
   17284:	4639      	mov	r1, r7
   17286:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1728a:	428b      	cmp	r3, r1
   1728c:	d909      	bls.n	172a2 <__udivmoddi4+0xbe>
   1728e:	2e00      	cmp	r6, #0
   17290:	f000 80eb 	beq.w	1746a <__udivmoddi4+0x286>
   17294:	2700      	movs	r7, #0
   17296:	e9c6 0100 	strd	r0, r1, [r6]
   1729a:	4638      	mov	r0, r7
   1729c:	4639      	mov	r1, r7
   1729e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   172a2:	fab3 f783 	clz	r7, r3
   172a6:	2f00      	cmp	r7, #0
   172a8:	d147      	bne.n	1733a <__udivmoddi4+0x156>
   172aa:	428b      	cmp	r3, r1
   172ac:	d302      	bcc.n	172b4 <__udivmoddi4+0xd0>
   172ae:	4282      	cmp	r2, r0
   172b0:	f200 80fa 	bhi.w	174a8 <__udivmoddi4+0x2c4>
   172b4:	1a84      	subs	r4, r0, r2
   172b6:	eb61 0303 	sbc.w	r3, r1, r3
   172ba:	2001      	movs	r0, #1
   172bc:	4698      	mov	r8, r3
   172be:	2e00      	cmp	r6, #0
   172c0:	d0e0      	beq.n	17284 <__udivmoddi4+0xa0>
   172c2:	e9c6 4800 	strd	r4, r8, [r6]
   172c6:	e7dd      	b.n	17284 <__udivmoddi4+0xa0>
   172c8:	b902      	cbnz	r2, 172cc <__udivmoddi4+0xe8>
   172ca:	deff      	udf	#255	; 0xff
   172cc:	fab2 f282 	clz	r2, r2
   172d0:	2a00      	cmp	r2, #0
   172d2:	f040 808f 	bne.w	173f4 <__udivmoddi4+0x210>
   172d6:	1b49      	subs	r1, r1, r5
   172d8:	ea4f 4e15 	mov.w	lr, r5, lsr #16
   172dc:	fa1f f885 	uxth.w	r8, r5
   172e0:	2701      	movs	r7, #1
   172e2:	fbb1 fcfe 	udiv	ip, r1, lr
   172e6:	0c23      	lsrs	r3, r4, #16
   172e8:	fb0e 111c 	mls	r1, lr, ip, r1
   172ec:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   172f0:	fb08 f10c 	mul.w	r1, r8, ip
   172f4:	4299      	cmp	r1, r3
   172f6:	d907      	bls.n	17308 <__udivmoddi4+0x124>
   172f8:	18eb      	adds	r3, r5, r3
   172fa:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
   172fe:	d202      	bcs.n	17306 <__udivmoddi4+0x122>
   17300:	4299      	cmp	r1, r3
   17302:	f200 80cd 	bhi.w	174a0 <__udivmoddi4+0x2bc>
   17306:	4684      	mov	ip, r0
   17308:	1a59      	subs	r1, r3, r1
   1730a:	b2a3      	uxth	r3, r4
   1730c:	fbb1 f0fe 	udiv	r0, r1, lr
   17310:	fb0e 1410 	mls	r4, lr, r0, r1
   17314:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
   17318:	fb08 f800 	mul.w	r8, r8, r0
   1731c:	45a0      	cmp	r8, r4
   1731e:	d907      	bls.n	17330 <__udivmoddi4+0x14c>
   17320:	192c      	adds	r4, r5, r4
   17322:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   17326:	d202      	bcs.n	1732e <__udivmoddi4+0x14a>
   17328:	45a0      	cmp	r8, r4
   1732a:	f200 80b6 	bhi.w	1749a <__udivmoddi4+0x2b6>
   1732e:	4618      	mov	r0, r3
   17330:	eba4 0408 	sub.w	r4, r4, r8
   17334:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
   17338:	e79f      	b.n	1727a <__udivmoddi4+0x96>
   1733a:	f1c7 0c20 	rsb	ip, r7, #32
   1733e:	40bb      	lsls	r3, r7
   17340:	fa22 fe0c 	lsr.w	lr, r2, ip
   17344:	ea4e 0e03 	orr.w	lr, lr, r3
   17348:	fa01 f407 	lsl.w	r4, r1, r7
   1734c:	fa20 f50c 	lsr.w	r5, r0, ip
   17350:	fa21 f30c 	lsr.w	r3, r1, ip
   17354:	ea4f 481e 	mov.w	r8, lr, lsr #16
   17358:	4325      	orrs	r5, r4
   1735a:	fbb3 f9f8 	udiv	r9, r3, r8
   1735e:	0c2c      	lsrs	r4, r5, #16
   17360:	fb08 3319 	mls	r3, r8, r9, r3
   17364:	fa1f fa8e 	uxth.w	sl, lr
   17368:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
   1736c:	fb09 f40a 	mul.w	r4, r9, sl
   17370:	429c      	cmp	r4, r3
   17372:	fa02 f207 	lsl.w	r2, r2, r7
   17376:	fa00 f107 	lsl.w	r1, r0, r7
   1737a:	d90b      	bls.n	17394 <__udivmoddi4+0x1b0>
   1737c:	eb1e 0303 	adds.w	r3, lr, r3
   17380:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
   17384:	f080 8087 	bcs.w	17496 <__udivmoddi4+0x2b2>
   17388:	429c      	cmp	r4, r3
   1738a:	f240 8084 	bls.w	17496 <__udivmoddi4+0x2b2>
   1738e:	f1a9 0902 	sub.w	r9, r9, #2
   17392:	4473      	add	r3, lr
   17394:	1b1b      	subs	r3, r3, r4
   17396:	b2ad      	uxth	r5, r5
   17398:	fbb3 f0f8 	udiv	r0, r3, r8
   1739c:	fb08 3310 	mls	r3, r8, r0, r3
   173a0:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
   173a4:	fb00 fa0a 	mul.w	sl, r0, sl
   173a8:	45a2      	cmp	sl, r4
   173aa:	d908      	bls.n	173be <__udivmoddi4+0x1da>
   173ac:	eb1e 0404 	adds.w	r4, lr, r4
   173b0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   173b4:	d26b      	bcs.n	1748e <__udivmoddi4+0x2aa>
   173b6:	45a2      	cmp	sl, r4
   173b8:	d969      	bls.n	1748e <__udivmoddi4+0x2aa>
   173ba:	3802      	subs	r0, #2
   173bc:	4474      	add	r4, lr
   173be:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   173c2:	fba0 8902 	umull	r8, r9, r0, r2
   173c6:	eba4 040a 	sub.w	r4, r4, sl
   173ca:	454c      	cmp	r4, r9
   173cc:	46c2      	mov	sl, r8
   173ce:	464b      	mov	r3, r9
   173d0:	d354      	bcc.n	1747c <__udivmoddi4+0x298>
   173d2:	d051      	beq.n	17478 <__udivmoddi4+0x294>
   173d4:	2e00      	cmp	r6, #0
   173d6:	d069      	beq.n	174ac <__udivmoddi4+0x2c8>
   173d8:	ebb1 050a 	subs.w	r5, r1, sl
   173dc:	eb64 0403 	sbc.w	r4, r4, r3
   173e0:	fa04 fc0c 	lsl.w	ip, r4, ip
   173e4:	40fd      	lsrs	r5, r7
   173e6:	40fc      	lsrs	r4, r7
   173e8:	ea4c 0505 	orr.w	r5, ip, r5
   173ec:	e9c6 5400 	strd	r5, r4, [r6]
   173f0:	2700      	movs	r7, #0
   173f2:	e747      	b.n	17284 <__udivmoddi4+0xa0>
   173f4:	f1c2 0320 	rsb	r3, r2, #32
   173f8:	fa20 f703 	lsr.w	r7, r0, r3
   173fc:	4095      	lsls	r5, r2
   173fe:	fa01 f002 	lsl.w	r0, r1, r2
   17402:	fa21 f303 	lsr.w	r3, r1, r3
   17406:	ea4f 4e15 	mov.w	lr, r5, lsr #16
   1740a:	4338      	orrs	r0, r7
   1740c:	0c01      	lsrs	r1, r0, #16
   1740e:	fbb3 f7fe 	udiv	r7, r3, lr
   17412:	fa1f f885 	uxth.w	r8, r5
   17416:	fb0e 3317 	mls	r3, lr, r7, r3
   1741a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   1741e:	fb07 f308 	mul.w	r3, r7, r8
   17422:	428b      	cmp	r3, r1
   17424:	fa04 f402 	lsl.w	r4, r4, r2
   17428:	d907      	bls.n	1743a <__udivmoddi4+0x256>
   1742a:	1869      	adds	r1, r5, r1
   1742c:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
   17430:	d22f      	bcs.n	17492 <__udivmoddi4+0x2ae>
   17432:	428b      	cmp	r3, r1
   17434:	d92d      	bls.n	17492 <__udivmoddi4+0x2ae>
   17436:	3f02      	subs	r7, #2
   17438:	4429      	add	r1, r5
   1743a:	1acb      	subs	r3, r1, r3
   1743c:	b281      	uxth	r1, r0
   1743e:	fbb3 f0fe 	udiv	r0, r3, lr
   17442:	fb0e 3310 	mls	r3, lr, r0, r3
   17446:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   1744a:	fb00 f308 	mul.w	r3, r0, r8
   1744e:	428b      	cmp	r3, r1
   17450:	d907      	bls.n	17462 <__udivmoddi4+0x27e>
   17452:	1869      	adds	r1, r5, r1
   17454:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
   17458:	d217      	bcs.n	1748a <__udivmoddi4+0x2a6>
   1745a:	428b      	cmp	r3, r1
   1745c:	d915      	bls.n	1748a <__udivmoddi4+0x2a6>
   1745e:	3802      	subs	r0, #2
   17460:	4429      	add	r1, r5
   17462:	1ac9      	subs	r1, r1, r3
   17464:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
   17468:	e73b      	b.n	172e2 <__udivmoddi4+0xfe>
   1746a:	4637      	mov	r7, r6
   1746c:	4630      	mov	r0, r6
   1746e:	e709      	b.n	17284 <__udivmoddi4+0xa0>
   17470:	4607      	mov	r7, r0
   17472:	e6e7      	b.n	17244 <__udivmoddi4+0x60>
   17474:	4618      	mov	r0, r3
   17476:	e6fb      	b.n	17270 <__udivmoddi4+0x8c>
   17478:	4541      	cmp	r1, r8
   1747a:	d2ab      	bcs.n	173d4 <__udivmoddi4+0x1f0>
   1747c:	ebb8 0a02 	subs.w	sl, r8, r2
   17480:	eb69 020e 	sbc.w	r2, r9, lr
   17484:	3801      	subs	r0, #1
   17486:	4613      	mov	r3, r2
   17488:	e7a4      	b.n	173d4 <__udivmoddi4+0x1f0>
   1748a:	4660      	mov	r0, ip
   1748c:	e7e9      	b.n	17462 <__udivmoddi4+0x27e>
   1748e:	4618      	mov	r0, r3
   17490:	e795      	b.n	173be <__udivmoddi4+0x1da>
   17492:	4667      	mov	r7, ip
   17494:	e7d1      	b.n	1743a <__udivmoddi4+0x256>
   17496:	4681      	mov	r9, r0
   17498:	e77c      	b.n	17394 <__udivmoddi4+0x1b0>
   1749a:	3802      	subs	r0, #2
   1749c:	442c      	add	r4, r5
   1749e:	e747      	b.n	17330 <__udivmoddi4+0x14c>
   174a0:	f1ac 0c02 	sub.w	ip, ip, #2
   174a4:	442b      	add	r3, r5
   174a6:	e72f      	b.n	17308 <__udivmoddi4+0x124>
   174a8:	4638      	mov	r0, r7
   174aa:	e708      	b.n	172be <__udivmoddi4+0xda>
   174ac:	4637      	mov	r7, r6
   174ae:	e6e9      	b.n	17284 <__udivmoddi4+0xa0>

000174b0 <__aeabi_idiv0>:
   174b0:	4770      	bx	lr
   174b2:	bf00      	nop

000174b4 <abort>:
   174b4:	b508      	push	{r3, lr}
   174b6:	2006      	movs	r0, #6
   174b8:	f000 f858 	bl	1756c <raise>
   174bc:	2001      	movs	r0, #1
   174be:	f7fb fd7b 	bl	12fb8 <_exit>
   174c2:	Address 0x00000000000174c2 is out of bounds.


000174c4 <__libc_init_array>:
   174c4:	b570      	push	{r4, r5, r6, lr}
   174c6:	4e0d      	ldr	r6, [pc, #52]	; (174fc <__libc_init_array+0x38>)
   174c8:	4c0d      	ldr	r4, [pc, #52]	; (17500 <__libc_init_array+0x3c>)
   174ca:	1ba4      	subs	r4, r4, r6
   174cc:	10a4      	asrs	r4, r4, #2
   174ce:	2500      	movs	r5, #0
   174d0:	42a5      	cmp	r5, r4
   174d2:	d109      	bne.n	174e8 <__libc_init_array+0x24>
   174d4:	4e0b      	ldr	r6, [pc, #44]	; (17504 <__libc_init_array+0x40>)
   174d6:	4c0c      	ldr	r4, [pc, #48]	; (17508 <__libc_init_array+0x44>)
   174d8:	f7f8 ff12 	bl	10300 <_init>
   174dc:	1ba4      	subs	r4, r4, r6
   174de:	10a4      	asrs	r4, r4, #2
   174e0:	2500      	movs	r5, #0
   174e2:	42a5      	cmp	r5, r4
   174e4:	d105      	bne.n	174f2 <__libc_init_array+0x2e>
   174e6:	bd70      	pop	{r4, r5, r6, pc}
   174e8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   174ec:	4798      	blx	r3
   174ee:	3501      	adds	r5, #1
   174f0:	e7ee      	b.n	174d0 <__libc_init_array+0xc>
   174f2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   174f6:	4798      	blx	r3
   174f8:	3501      	adds	r5, #1
   174fa:	e7f2      	b.n	174e2 <__libc_init_array+0x1e>
   174fc:	0001030c 	.word	0x0001030c
   17500:	0001030c 	.word	0x0001030c
   17504:	0001030c 	.word	0x0001030c
   17508:	0001031c 	.word	0x0001031c

0001750c <memset>:
   1750c:	4402      	add	r2, r0
   1750e:	4603      	mov	r3, r0
   17510:	4293      	cmp	r3, r2
   17512:	d100      	bne.n	17516 <memset+0xa>
   17514:	4770      	bx	lr
   17516:	f803 1b01 	strb.w	r1, [r3], #1
   1751a:	e7f9      	b.n	17510 <memset+0x4>

0001751c <_raise_r>:
   1751c:	291f      	cmp	r1, #31
   1751e:	b538      	push	{r3, r4, r5, lr}
   17520:	4604      	mov	r4, r0
   17522:	460d      	mov	r5, r1
   17524:	d904      	bls.n	17530 <_raise_r+0x14>
   17526:	2316      	movs	r3, #22
   17528:	6003      	str	r3, [r0, #0]
   1752a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1752e:	bd38      	pop	{r3, r4, r5, pc}
   17530:	6c42      	ldr	r2, [r0, #68]	; 0x44
   17532:	b112      	cbz	r2, 1753a <_raise_r+0x1e>
   17534:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
   17538:	b94b      	cbnz	r3, 1754e <_raise_r+0x32>
   1753a:	4620      	mov	r0, r4
   1753c:	f000 f830 	bl	175a0 <_getpid_r>
   17540:	462a      	mov	r2, r5
   17542:	4601      	mov	r1, r0
   17544:	4620      	mov	r0, r4
   17546:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1754a:	f000 b817 	b.w	1757c <_kill_r>
   1754e:	2b01      	cmp	r3, #1
   17550:	d00a      	beq.n	17568 <_raise_r+0x4c>
   17552:	1c59      	adds	r1, r3, #1
   17554:	d103      	bne.n	1755e <_raise_r+0x42>
   17556:	2316      	movs	r3, #22
   17558:	6003      	str	r3, [r0, #0]
   1755a:	2001      	movs	r0, #1
   1755c:	e7e7      	b.n	1752e <_raise_r+0x12>
   1755e:	2400      	movs	r4, #0
   17560:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
   17564:	4628      	mov	r0, r5
   17566:	4798      	blx	r3
   17568:	2000      	movs	r0, #0
   1756a:	e7e0      	b.n	1752e <_raise_r+0x12>

0001756c <raise>:
   1756c:	4b02      	ldr	r3, [pc, #8]	; (17578 <raise+0xc>)
   1756e:	4601      	mov	r1, r0
   17570:	6818      	ldr	r0, [r3, #0]
   17572:	f7ff bfd3 	b.w	1751c <_raise_r>
   17576:	bf00      	nop
   17578:	100001d8 	.word	0x100001d8

0001757c <_kill_r>:
   1757c:	b538      	push	{r3, r4, r5, lr}
   1757e:	4c07      	ldr	r4, [pc, #28]	; (1759c <_kill_r+0x20>)
   17580:	2300      	movs	r3, #0
   17582:	4605      	mov	r5, r0
   17584:	4608      	mov	r0, r1
   17586:	4611      	mov	r1, r2
   17588:	6023      	str	r3, [r4, #0]
   1758a:	f7fb fd33 	bl	12ff4 <_kill>
   1758e:	1c43      	adds	r3, r0, #1
   17590:	d102      	bne.n	17598 <_kill_r+0x1c>
   17592:	6823      	ldr	r3, [r4, #0]
   17594:	b103      	cbz	r3, 17598 <_kill_r+0x1c>
   17596:	602b      	str	r3, [r5, #0]
   17598:	bd38      	pop	{r3, r4, r5, pc}
   1759a:	bf00      	nop
   1759c:	100005c8 	.word	0x100005c8

000175a0 <_getpid_r>:
   175a0:	f7fb bd16 	b.w	12fd0 <_getpid>

000175a4 <main::file>:
   175a4:	616d 6e69 632e 7070 ff00 ffff 5b1b 3234     main.cpp.....[42
   175b4:	206d 2020 4920 464e 1b4f 305b 393b 6d34     m    INFO.[0;94m
   175c4:	253a 3a73 5b1b 3b30 3239 256d 3a73 5b1b     :%s:.[0;92m%s:.[
   175d4:	3b30 3339 256d 3e64 1b20 305b 333b 6d37     0;93m%d> .[0;37m
   175e4:	7453 7261 1b74 305b 0a6d 0000 5b1b 3234     Start.[0m....[42
   175f4:	206d 2020 4920 464e 1b4f 305b 393b 6d34     m    INFO.[0;94m
   17604:	253a 3a73 5b1b 3b30 3239 256d 3a73 5b1b     :%s:.[0;92m%s:.[
   17614:	3b30 3339 256d 3e64 1b20 305b 333b 6d37     0;93m%d> .[0;37m
   17624:	7554 6e72 6e69 2067 454c 2044 4e4f 1b21     Turning LED ON!.
   17634:	305b 0a6d 0000 0000 5b1b 3234 206d 2020     [0m......[42m   
   17644:	4920 464e 1b4f 305b 393b 6d34 253a 3a73      INFO.[0;94m:%s:
   17654:	5b1b 3b30 3239 256d 3a73 5b1b 3b30 3339     .[0;92m%s:.[0;93
   17664:	256d 3e64 1b20 305b 333b 6d37 7554 6e72     m%d> .[0;37mTurn
   17674:	6e69 2067 454c 2044 464f 2146 5b1b 6d30     ing LED OFF!.[0m
   17684:	000a ffff                                   ....

00017688 <main::__PRETTY_FUNCTION__>:
   17688:	6e69 2074 616d 6e69 2928 ff00 7453 6361     int main()..Stac
   17698:	206b 6544 7470 2068 203d 7a25 0a64 0000     k Depth = %zd...
   176a8:	2020 2523 757a 203a 7830 7025 000a 0000       #%zu: 0x%p....
   176b8:	520a 6e75 203a 6874 2065 6f66 6c6c 776f     .Run: the follow
   176c8:	6e69 2067 6f63 6d6d 6e61 2064 6e69 7920     ing command in y
   176d8:	756f 2072 7270 6a6f 6365 2074 6964 6572     our project dire
   176e8:	7463 726f 0079 0000 200a 1b20 315b 333b     ctory....  .[1;3
   176f8:	6d37 616d 656b 7320 6174 6b63 7274 6361     7mmake stacktrac
   17708:	2d65 7325 5420 4152 4543 3d53 0022 0000     e-%s TRACES="...
   17718:	7830 7025 0000 0000 3020 2578 0070 0000     0x%p.... 0x%p...
   17728:	0a22 5b1b 6d30 0000 6854 7369 7720 6c69     "..[0m..This wil
   17738:	206c 6572 6f70 7472 7420 6568 6620 6c69     l report the fil
   17748:	2065 6e61 2064 696c 656e 6e20 6d75 6562     e and line numbe
   17758:	2072 6874 7461 6c20 6465 7420 206f 6874     r that led to th
   17768:	7369 6620 6e75 7463 6f69 206e 6562 6e69     is function bein
   17778:	2067 6163 6c6c 6465 002e 0000 7061 6c70     g called....appl
   17788:	6369 7461 6f69 006e 5b1b 3134 436d 4952     ication..[41mCRI
   17798:	4954 4143 1b4c 305b 393b 6d34 253a 3a73     TICAL.[0;94m:%s:
   177a8:	5b1b 3b30 3239 256d 3a73 5b1b 3b30 3339     .[0;92m%s:.[0;93
   177b8:	256d 3e64 1b20 305b 333b 6d37 7341 6573     m%d> .[0;37mAsse
   177c8:	7472 6f69 206e 6146 6c69 7275 2c65 4320     rtion Failure, C
   177d8:	6e6f 6964 6974 6e6f 5420 7365 6574 3a64     ondition Tested:
   177e8:	2820 6570 6972 6870 7265 6c61 645f 7669      (peripheral_div
   177f8:	6469 7265 3c20 203d 2934 200a 2020 2020     ider <= 4).     
   17808:	2020 2020 4420 7669 6469 7265 6d20 7375          Divider mus
   17818:	6e74 7427 6520 6378 6565 2064 3233 5b1b     tn't exceed 32.[
   17828:	6d30 5b1b 6d30 000a 500a 6972 746e 6e69     0m.[0m...Printin
   17838:	2067 7453 6361 206b 7254 6361 3a65 000a     g Stack Trace:..
   17848:	5b1b 3134 436d 4952 4954 4143 1b4c 305b     .[41mCRITICAL.[0
   17858:	393b 6d34 253a 3a73 5b1b 3b30 3239 256d     ;94m:%s:.[0;92m%
   17868:	3a73 5b1b 3b30 3339 256d 3e64 1b20 305b     s:.[0;93m%d> .[0
   17878:	333b 6d37 7341 6573 7472 6f69 206e 6146     ;37mAssertion Fa
   17888:	6c69 7275 2c65 4320 6e6f 6964 6974 6e6f     ilure, Condition
   17898:	5420 7365 6574 3a64 2820 6564 6973 6572      Tested: (desire
   178a8:	5f64 7073 6565 5f64 6e69 6d5f 7a68 3c20     d_speed_in_mhz <
   178b8:	3320 3438 2620 2026 6564 6973 6572 5f64      384 && desired_
   178c8:	7073 6565 5f64 6e69 6d5f 7a68 3e20 3120     speed_in_mhz > 1
   178d8:	2932 200a 2020 2020 2020 2020 4620 6572     2).          Fre
   178e8:	7571 6e65 7963 6d20 7375 2074 6562 6c20     quency must be l
   178f8:	776f 7265 7420 6168 206e 3833 2034 484d     ower than 384 MH
   17908:	617a 646e 6720 6572 7461 7265 7420 6168     zand greater tha
   17918:	206e 726f 6520 7571 6c61 7420 206f 3231     n or equal to 12
   17928:	4d20 7a48 5b1b 6d30 5b1b 6d30 000a 0000      MHz.[0m.[0m....
   17938:	5b1b 3134 436d 4952 4954 4143 1b4c 305b     .[41mCRITICAL.[0
   17948:	393b 6d34 253a 3a73 5b1b 3b30 3239 256d     ;94m:%s:.[0;92m%
   17958:	3a73 5b1b 3b30 3339 256d 3e64 1b20 305b     s:.[0;93m%d> .[0
   17968:	333b 6d37 7341 6573 7472 6f69 206e 6146     ;37mAssertion Fa
   17978:	6c69 7275 2c65 4320 6e6f 6964 6974 6e6f     ilure, Condition
   17988:	5420 7365 6574 3a64 2820 6964 6976 6564      Tested: (divide
   17998:	5f72 6176 756c 2065 203c 2938 200a 2020     r_value < 8).   
   179a8:	2020 2020 2020 5020 4c4c 6420 7669 6469            PLL divid
   179b8:	7265 7620 6c61 6575 7720 6e65 2074 756f     er value went ou
   179c8:	2074 666f 6220 756f 646e 1b73 305b 1b6d     t of bounds.[0m.
   179d8:	305b 0a6d 0000 0000 5b1b 3134 436d 4952     [0m......[41mCRI
   179e8:	4954 4143 1b4c 305b 393b 6d34 253a 3a73     TICAL.[0;94m:%s:
   179f8:	5b1b 3b30 3239 256d 3a73 5b1b 3b30 3339     .[0;92m%s:.[0;93
   17a08:	256d 3e64 1b20 305b 333b 6d37 7341 6573     m%d> .[0;37mAsse
   17a18:	7472 6f69 206e 6146 6c69 7275 2c65 4320     rtion Failure, C
   17a28:	6e6f 6964 6974 6e6f 5420 7365 6574 3a64     ondition Tested:
   17a38:	2820 6166 736c 2965 200a 2020 2020 2020      (false).       
   17a48:	2020 5020 4c4c 6c20 636f 206b 6f63 6c75        PLL lock coul
   17a58:	2064 6f6e 2074 6562 6520 7473 6261 696c     d not be establi
   17a68:	6873 6465 6220 6665 726f 2065 6974 656d     shed before time
   17a78:	756f 1b74 305b 1b6d 305b 0a6d 0000 0000     out.[0m.[0m.....
   17a88:	5b1b 3134 436d 4952 4954 4143 1b4c 305b     .[41mCRITICAL.[0
   17a98:	393b 6d34 253a 3a73 5b1b 3b30 3239 256d     ;94m:%s:.[0;92m%
   17aa8:	3a73 5b1b 3b30 3339 256d 3e64 1b20 305b     s:.[0;93m%d> .[0
   17ab8:	333b 6d37 7341 6573 7472 6f69 206e 6146     ;37mAssertion Fa
   17ac8:	6c69 7275 2c65 4320 6e6f 6964 6974 6e6f     ilure, Condition
   17ad8:	5420 7365 6574 3a64 2820 7063 5f75 6964      Tested: (cpu_di
   17ae8:	6976 6564 2072 203c 3233 0a29 2020 2020     vider < 32).    
   17af8:	2020 2020 2020 6944 6976 6564 2072 756d           Divider mu
   17b08:	7473 276e 2074 7865 6563 6465 3320 1b32     stn't exceed 32.
   17b18:	305b 1b6d 305b 0a6d 0000 0000 5b1b 3134     [0m.[0m......[41
   17b28:	436d 4952 4954 4143 1b4c 305b 393b 6d34     mCRITICAL.[0;94m
   17b38:	253a 3a73 5b1b 3b30 3239 256d 3a73 5b1b     :%s:.[0;92m%s:.[
   17b48:	3b30 3339 256d 3e64 1b20 305b 333b 6d37     0;93m%d> .[0;37m
   17b58:	7341 6573 7472 6f69 206e 6146 6c69 7275     Assertion Failur
   17b68:	2c65 4320 6e6f 6964 6974 6e6f 5420 7365     e, Condition Tes
   17b78:	6574 3a64 2820 7266 7165 6575 636e 2079     ted: (frequency 
   17b88:	3d21 3020 0a29 2020 2020 2020 2020 2020     != 0).          
   17b98:	6143 6e6e 746f 6820 7661 2065 657a 6f72     Cannot have zero
   17ba8:	7420 6369 736b 7020 7265 6d20 6369 6f72      ticks per micro
   17bb8:	6573 6f63 646e 202c 6c70 6165 6573 6320     second, please c
   17bc8:	6f68 736f 2065 2031 726f 6d20 726f 2e65     hoose 1 or more.
   17bd8:	5b1b 6d30 5b1b 6d30 000a 0000 5b1b 3334     .[0m.[0m.....[43
   17be8:	206d 4157 4e52 4e49 1b47 305b 393b 6d34     m WARNING.[0;94m
   17bf8:	253a 3a73 5b1b 3b30 3239 256d 3a73 5b1b     :%s:.[0;92m%s:.[
   17c08:	3b30 3339 256d 3e64 1b20 305b 333b 6d37     0;93m%d> .[0;37m
   17c18:	7953 7473 6d65 5420 6d69 7265 6820 7361     System Timer has
   17c28:	4620 4941 454c 2044 6f74 7320 6174 7472      FAILED to start
   17c38:	1b21 305b 1b6d 305b 0a6d ff00               !.[0m.[0m...

00017c44 <Lpc40xxSystemController::SetPeripheralClockDivider(unsigned char)::file>:
   17c44:	7973 7473 6d65 635f 6e6f 7274 6c6f 656c     system_controlle
   17c54:	2e72 7068 0070 ffff                         r.hpp...

00017c5c <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)::file>:
   17c5c:	7973 7473 6d65 635f 6e6f 7274 6c6f 656c     system_controlle
   17c6c:	2e72 7068 0070 ffff                         r.hpp...

00017c74 <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)::file>:
   17c74:	7973 7473 6d65 635f 6e6f 7274 6c6f 656c     system_controlle
   17c84:	2e72 7068 0070 ffff                         r.hpp...

00017c8c <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)::file>:
   17c8c:	7973 7473 6d65 635f 6e6f 7274 6c6f 656c     system_controlle
   17c9c:	2e72 7068 0070 ffff                         r.hpp...

00017ca4 <Lpc40xxSystemController::SetCpuClockDivider(unsigned char)::file>:
   17ca4:	7973 7473 6d65 635f 6e6f 7274 6c6f 656c     system_controlle
   17cb4:	2e72 7068 0070 ffff                         r.hpp...

00017cbc <Timer::kPowerbit>:
   17cbc:	0001 0000 0002 0000 0016 0000 0017 0000     ................

00017ccc <Timer::kTimerIrq>:
   17ccc:	0201 0403                                   ....

00017cd0 <Timer::kTimerIsr>:
   17cd0:	2811 0001 284d 0001 2889 0001 28c5 0001     .(..M(...(...(..

00017ce0 <Timer::Initialize(unsigned long, void (*)(), long)::file>:
   17ce0:	6974 656d 2e72 7068 0070 ffff               timer.hpp...

00017cec <Uart::kTxUartPortFunction>:
   17cec:	0201 0502                                   ....

00017cf0 <Uart::kRxUartPortFunction>:
   17cf0:	0201 0302                                   ....

00017cf4 <Uart::kPowerbit>:
   17cf4:	0003 0000 0018 0000 0019 0000 0008 0000     ................

00017d04 <LowLevelInit()::file>:
   17d04:	7473 7261 7574 2e70 7063 0070               startup.cpp.

00017d10 <vtable for Uart>:
	...
   17d18:	1e09 0001 1ed5 0001 2005 0001 2139 0001     ......... ..9!..
   17d28:	fffc ffff 0000 0000 0ddd 0001 0e6d 0001     ............m...
   17d38:	0ec5 0001 0edd 0001 0ef1 0001 0f31 0001     ............1...
   17d48:	0f61 0001                                   a...

00017d4c <vtable for Timer>:
	...
   17d54:	1b71 0001 1cd5 0001 1dcd 0001 fffc ffff     q...............
   17d64:	0000 0000 0ddd 0001 0e6d 0001 0ec5 0001     ........m.......
   17d74:	0edd 0001 0ef1 0001 0f31 0001 0f61 0001     ........1...a...

00017d84 <vtable for Pin>:
	...
   17d8c:	1541 0001 15b9 0001 1639 0001 16ad 0001     A.......9.......
   17d9c:	1721 0001 179d 0001 1819 0001 188d 0001     !...............
   17dac:	1909 0001 197d 0001 19f1 0001 1ac9 0001     ....}...........
   17dbc:	1af5 0001                                   ....

00017dc0 <vtable for SystemTimer>:
	...
   17dc8:	13dd 0001 1411 0001 14ad 0001 fffc ffff     ................
   17dd8:	0000 0000 0ddd 0001 0e6d 0001 0ec5 0001     ........m.......
   17de8:	0edd 0001 0ef1 0001 0f31 0001 0f61 0001     ........1...a...

00017df8 <vtable for Lpc40xxSystemController>:
	...
   17e00:	0ddd 0001 0e6d 0001 0ec5 0001 0edd 0001     ....m...........
   17e10:	0ef1 0001 0f31 0001 0f61 0001               ....1...a...

00017e1c <Lpc40xxSystemController::SetPeripheralClockDivider(unsigned char)::__PRETTY_FUNCTION__>:
   17e1c:	6976 7472 6175 206c 6f76 6469 4c20 6370     virtual void Lpc
   17e2c:	3034 7878 7953 7473 6d65 6f43 746e 6f72     40xxSystemContro
   17e3c:	6c6c 7265 3a3a 6553 5074 7265 7069 6568     ller::SetPeriphe
   17e4c:	6172 436c 6f6c 6b63 6944 6976 6564 2872     ralClockDivider(
   17e5c:	6975 746e 5f38 2974 ff00 ffff               uint8_t)....

00017e68 <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)::__PRETTY_FUNCTION__>:
   17e68:	6975 746e 3233 745f 4c20 6370 3034 7878     uint32_t Lpc40xx
   17e78:	7953 7473 6d65 6f43 746e 6f72 6c6c 7265     SystemController
   17e88:	3a3a 6553 4d74 6961 506e 6c6c 4c28 6370     ::SetMainPll(Lpc
   17e98:	3034 7878 7953 7473 6d65 6f43 746e 6f72     40xxSystemContro
   17ea8:	6c6c 7265 3a3a 6c50 496c 706e 7475 202c     ller::PllInput, 
   17eb8:	6975 746e 3631 745f 0029 ffff               uint16_t)...

00017ec4 <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)::__PRETTY_FUNCTION__>:
   17ec4:	6975 746e 3233 745f 4c20 6370 3034 7878     uint32_t Lpc40xx
   17ed4:	7953 7473 6d65 6f43 746e 6f72 6c6c 7265     SystemController
   17ee4:	3a3a 6143 636c 6c75 7461 5065 6c6c 4c28     ::CalculatePll(L
   17ef4:	6370 3034 7878 7953 7473 6d65 6f43 746e     pc40xxSystemCont
   17f04:	6f72 6c6c 7265 3a3a 6c50 496c 706e 7475     roller::PllInput
   17f14:	202c 6975 746e 3631 745f 0029               , uint16_t).

00017f20 <Lpc40xxSystemController::SetCpuClockDivider(unsigned char)::__PRETTY_FUNCTION__>:
   17f20:	6f76 6469 4c20 6370 3034 7878 7953 7473     void Lpc40xxSyst
   17f30:	6d65 6f43 746e 6f72 6c6c 7265 3a3a 6553     emController::Se
   17f40:	4374 7570 6c43 636f 446b 7669 6469 7265     tCpuClockDivider
   17f50:	7528 6e69 3874 745f 0029 ffff               (uint8_t)...

00017f5c <Timer::Initialize(unsigned long, void (*)(), long)::__PRETTY_FUNCTION__>:
   17f5c:	6976 7472 6175 206c 6f76 6469 5420 6d69     virtual void Tim
   17f6c:	7265 3a3a 6e49 7469 6169 696c 657a 7528     er::Initialize(u
   17f7c:	6e69 3374 5f32 2c74 4920 7273 6f50 6e69     int32_t, IsrPoin
   17f8c:	6574 2c72 6920 746e 3233 745f 0029 ffff     ter, int32_t)...

00017f9c <LowLevelInit()::__PRETTY_FUNCTION__>:
   17f9c:	6f76 6469 4c20 776f 654c 6576 496c 696e     void LowLevelIni
   17fac:	2874 0029 7453 6361 206b 6544 7470 2068     t().Stack Depth 
   17fbc:	203d 7a25 0a64 0000 2020 2523 757a 203a     = %zd...  #%zu: 
   17fcc:	7830 7025 000a 0000 520a 6e75 203a 6874     0x%p.....Run: th
   17fdc:	2065 6f66 6c6c 776f 6e69 2067 6f63 6d6d     e following comm
   17fec:	6e61 2064 6e69 7920 756f 2072 7270 6a6f     and in your proj
   17ffc:	6365 2074 6964 6572 7463 726f 0079 0000     ect directory...
   1800c:	200a 1b20 315b 333b 6d37 616d 656b 7320     .  .[1;37mmake s
   1801c:	6174 6b63 7274 6361 2d65 7325 5420 4152     tacktrace-%s TRA
   1802c:	4543 3d53 0022 0000 7830 7025 0000 0000     CES="...0x%p....
   1803c:	3020 2578 0070 0000 0a22 5b1b 6d30 0000      0x%p..."..[0m..
   1804c:	6854 7369 7720 6c69 206c 6572 6f70 7472     This will report
   1805c:	7420 6568 6620 6c69 2065 6e61 2064 696c      the file and li
   1806c:	656e 6e20 6d75 6562 2072 6874 7461 6c20     ne number that l
   1807c:	6465 7420 206f 6874 7369 6620 6e75 7463     ed to this funct
   1808c:	6f69 206e 6562 6e69 2067 6163 6c6c 6465     ion being called
   1809c:	002e 0000 7061 6c70 6369 7461 6f69 006e     ....application.
   180ac:	5b1b 3134 436d 4952 4954 4143 1b4c 305b     .[41mCRITICAL.[0
   180bc:	393b 6d34 253a 3a73 5b1b 3b30 3239 256d     ;94m:%s:.[0;92m%
   180cc:	3a73 5b1b 3b30 3339 256d 3e64 1b20 305b     s:.[0;93m%d> .[0
   180dc:	333b 6d37 7341 6573 7472 6f69 206e 6146     ;37mAssertion Fa
   180ec:	6c69 7275 2c65 4320 6e6f 6964 6974 6e6f     ilure, Condition
   180fc:	5420 7365 6574 3a64 2820 7369 2072 3d21      Tested: (isr !=
   1810c:	4920 746e 7265 7572 7470 6f4c 6b6f 7075      InterruptLookup
   1811c:	6148 646e 656c 2972 200a 2020 2020 2020     Handler).       
   1812c:	2020 4e20 206f 5349 2052 6f66 6e75 2064        No ISR found 
   1813c:	6f66 2072 6874 2065 6576 7463 726f 2520     for the vector %
   1814c:	1b75 305b 1b6d 305b 0a6d 0000 500a 6972     u.[0m.[0m....Pri
   1815c:	746e 6e69 2067 7453 6361 206b 7254 6361     nting Stack Trac
   1816c:	3a65 000a 5b1b 3134 486d 7261 2064 6146     e:...[41mHard Fa
   1817c:	6c75 2074 7845 6563 7470 6f69 206e 634f     ult Exception Oc
   1818c:	7563 7272 6465 0a21 5b1b 6d30 0000 0000     curred!..[0m....
   1819c:	3072 203a 7830 3025 6c38 2c58 7220 3a31     r0: 0x%08lX, r1:
   181ac:	3020 2578 3830 586c 202c 3272 203a 7830      0x%08lX, r2: 0x
   181bc:	3025 6c38 2c58 7220 3a33 3020 2578 3830     %08lX, r3: 0x%08
   181cc:	586c 000a 3172 3a32 3020 2578 3830 586c     lX..r12: 0x%08lX
   181dc:	202c 726c 203a 7830 3025 6c38 2c58 7020     , lr: 0x%08lX, p
   181ec:	3a63 3020 2578 3830 586c 202c 7370 3a72     c: 0x%08lX, psr:
   181fc:	3020 2578 3830 586c 000a ffff                0x%08lX....

00018208 <InterruptLookupHandler::file>:
   18208:	6e69 6574 7272 7075 2e74 7063 0070 ffff     interrupt.cpp...

00018218 <InterruptLookupHandler::__PRETTY_FUNCTION__>:
   18218:	6f76 6469 4920 746e 7265 7572 7470 6f4c     void InterruptLo
   18228:	6b6f 7075 6148 646e 656c 2872 0029 ffff     okupHandler()...

00018238 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)::pow10>:
   18238:	0000 3f80 0000 4120 0000 42c8 0000 447a     ...?.. A...B..zD
   18248:	4000 461c 5000 47c3 2400 4974 9680 4b18     .@.F.P.G.$tI...K
   18258:	bc20 4cbe 6b28 4e6e 7453 6361 206b 6544      ..L(knNStack De
   18268:	7470 2068 203d 7a25 0a64 0000 2020 2523     pth = %zd...  #%
   18278:	757a 203a 7830 7025 000a 0000 520a 6e75     zu: 0x%p.....Run
   18288:	203a 6874 2065 6f66 6c6c 776f 6e69 2067     : the following 
   18298:	6f63 6d6d 6e61 2064 6e69 7920 756f 2072     command in your 
   182a8:	7270 6a6f 6365 2074 6964 6572 7463 726f     project director
   182b8:	0079 0000 200a 1b20 315b 333b 6d37 616d     y....  .[1;37mma
   182c8:	656b 7320 6174 6b63 7274 6361 2d65 7325     ke stacktrace-%s
   182d8:	5420 4152 4543 3d53 0022 0000 7830 7025      TRACES="...0x%p
   182e8:	0000 0000 3020 2578 0070 0000 0a22 5b1b     .... 0x%p..."..[
   182f8:	6d30 0000 6854 7369 7720 6c69 206c 6572     0m..This will re
   18308:	6f70 7472 7420 6568 6620 6c69 2065 6e61     port the file an
   18318:	2064 696c 656e 6e20 6d75 6562 2072 6874     d line number th
   18328:	7461 6c20 6465 7420 206f 6874 7369 6620     at led to this f
   18338:	6e75 7463 6f69 206e 6562 6e69 2067 6163     unction being ca
   18348:	6c6c 6465 002e 0000 7061 6c70 6369 7461     lled....applicat
   18358:	6f69 006e 5b1b 3334 206d 4157 4e52 4e49     ion..[43m WARNIN
   18368:	1b47 305b 393b 6d34 253a 3a73 5b1b 3b30     G.[0;94m:%s:.[0;
   18378:	3239 256d 3a73 5b1b 3b30 3339 256d 3e64     92m%s:.[0;93m%d>
   18388:	1b20 305b 333b 6d37 6f50 7472 2520 2064      .[0;37mPort %d 
   18398:	6163 6e6e 746f 6220 2065 7375 6465 6620     cannot be used f
   183a8:	726f 4520 7478 7265 616e 206c 6e49 6574     or External Inte
   183b8:	7272 7075 7374 202e 654e 6465 7420 206f     rrupts. Need to 
   183c8:	7375 2065 5047 4f49 6f20 206e 6f50 7472     use GPIO on Port
   183d8:	3020 6f20 2072 2e32 5b1b 6d30 5b1b 6d30      0 or 2..[0m.[0m
   183e8:	000a 0000 5b1b 3334 206d 4157 4e52 4e49     .....[43m WARNIN
   183f8:	1b47 305b 393b 6d34 253a 3a73 5b1b 3b30     G.[0;94m:%s:.[0;
   18408:	3239 256d 3a73 5b1b 3b30 3339 256d 3e64     92m%s:.[0;93m%d>
   18418:	1b20 305b 333b 6d37 6445 6567 2520 2064      .[0;37mEdge %d 
   18428:	6163 6e6e 746f 6220 2065 7375 6465 6620     cannot be used f
   18438:	726f 4520 7478 7265 616e 206c 6e49 6574     or External Inte
   18448:	7272 7075 7374 4e2e 6565 2064 6f74 7520     rrupts.Need to u
   18458:	6573 6120 7220 7369 6e69 2c67 6620 6c61     se a rising, fal
   18468:	696c 676e 202c 726f 6220 746f 2068 6f63     ling, or both co
   18478:	666e 6769 7275 7461 6f69 2e6e 5b1b 6d30     nfiguration..[0m
   18488:	000a 0000 5b1b 3134 436d 4952 4954 4143     .....[41mCRITICA
   18498:	1b4c 305b 393b 6d34 253a 3a73 5b1b 3b30     L.[0;94m:%s:.[0;
   184a8:	3239 256d 3a73 5b1b 3b30 3339 256d 3e64     92m%s:.[0;93m%d>
   184b8:	1b20 305b 333b 6d37 7341 6573 7472 6f69      .[0;37mAssertio
   184c8:	206e 6146 6c69 7275 2c65 4320 6e6f 6964     n Failure, Condi
   184d8:	6974 6e6f 5420 7365 6574 3a64 2820 6570     tion Tested: (pe
   184e8:	6972 6870 7265 6c61 645f 7669 6469 7265     ripheral_divider
   184f8:	3c20 203d 2934 200a 2020 2020 2020 2020      <= 4).         
   18508:	4420 7669 6469 7265 6d20 7375 6e74 7427      Divider mustn't
   18518:	6520 6378 6565 2064 3233 5b1b 6d30 5b1b      exceed 32.[0m.[
   18528:	6d30 000a 500a 6972 746e 6e69 2067 7453     0m...Printing St
   18538:	6361 206b 7254 6361 3a65 000a 5b1b 3134     ack Trace:...[41
   18548:	436d 4952 4954 4143 1b4c 305b 393b 6d34     mCRITICAL.[0;94m
   18558:	253a 3a73 5b1b 3b30 3239 256d 3a73 5b1b     :%s:.[0;92m%s:.[
   18568:	3b30 3339 256d 3e64 1b20 305b 333b 6d37     0;93m%d> .[0;37m
   18578:	7341 6573 7472 6f69 206e 6146 6c69 7275     Assertion Failur
   18588:	2c65 4320 6e6f 6964 6974 6e6f 5420 7365     e, Condition Tes
   18598:	6574 3a64 2820 6564 6973 6572 5f64 7073     ted: (desired_sp
   185a8:	6565 5f64 6e69 6d5f 7a68 3c20 3320 3438     eed_in_mhz < 384
   185b8:	2620 2026 6564 6973 6572 5f64 7073 6565      && desired_spee
   185c8:	5f64 6e69 6d5f 7a68 3e20 3120 2932 200a     d_in_mhz > 12). 
   185d8:	2020 2020 2020 2020 4620 6572 7571 6e65              Frequen
   185e8:	7963 6d20 7375 2074 6562 6c20 776f 7265     cy must be lower
   185f8:	7420 6168 206e 3833 2034 484d 617a 646e      than 384 MHzand
   18608:	6720 6572 7461 7265 7420 6168 206e 726f      greater than or
   18618:	6520 7571 6c61 7420 206f 3231 4d20 7a48      equal to 12 MHz
   18628:	5b1b 6d30 5b1b 6d30 000a 0000 5b1b 3134     .[0m.[0m.....[41
   18638:	436d 4952 4954 4143 1b4c 305b 393b 6d34     mCRITICAL.[0;94m
   18648:	253a 3a73 5b1b 3b30 3239 256d 3a73 5b1b     :%s:.[0;92m%s:.[
   18658:	3b30 3339 256d 3e64 1b20 305b 333b 6d37     0;93m%d> .[0;37m
   18668:	7341 6573 7472 6f69 206e 6146 6c69 7275     Assertion Failur
   18678:	2c65 4320 6e6f 6964 6974 6e6f 5420 7365     e, Condition Tes
   18688:	6574 3a64 2820 6964 6976 6564 5f72 6176     ted: (divider_va
   18698:	756c 2065 203c 2938 200a 2020 2020 2020     lue < 8).       
   186a8:	2020 5020 4c4c 6420 7669 6469 7265 7620        PLL divider v
   186b8:	6c61 6575 7720 6e65 2074 756f 2074 666f     alue went out of
   186c8:	6220 756f 646e 1b73 305b 1b6d 305b 0a6d      bounds.[0m.[0m.
   186d8:	0000 0000 5b1b 3134 436d 4952 4954 4143     .....[41mCRITICA
   186e8:	1b4c 305b 393b 6d34 253a 3a73 5b1b 3b30     L.[0;94m:%s:.[0;
   186f8:	3239 256d 3a73 5b1b 3b30 3339 256d 3e64     92m%s:.[0;93m%d>
   18708:	1b20 305b 333b 6d37 7341 6573 7472 6f69      .[0;37mAssertio
   18718:	206e 6146 6c69 7275 2c65 4320 6e6f 6964     n Failure, Condi
   18728:	6974 6e6f 5420 7365 6574 3a64 2820 6166     tion Tested: (fa
   18738:	736c 2965 200a 2020 2020 2020 2020 5020     lse).          P
   18748:	4c4c 6c20 636f 206b 6f63 6c75 2064 6f6e     LL lock could no
   18758:	2074 6562 6520 7473 6261 696c 6873 6465     t be established
   18768:	6220 6665 726f 2065 6974 656d 756f 1b74      before timeout.
   18778:	305b 1b6d 305b 0a6d 0000 0000 5b1b 3134     [0m.[0m......[41
   18788:	436d 4952 4954 4143 1b4c 305b 393b 6d34     mCRITICAL.[0;94m
   18798:	253a 3a73 5b1b 3b30 3239 256d 3a73 5b1b     :%s:.[0;92m%s:.[
   187a8:	3b30 3339 256d 3e64 1b20 305b 333b 6d37     0;93m%d> .[0;37m
   187b8:	7341 6573 7472 6f69 206e 6146 6c69 7275     Assertion Failur
   187c8:	2c65 4320 6e6f 6964 6974 6e6f 5420 7365     e, Condition Tes
   187d8:	6574 3a64 2820 7063 5f75 6964 6976 6564     ted: (cpu_divide
   187e8:	2072 203c 3233 0a29 2020 2020 2020 2020     r < 32).        
   187f8:	2020 6944 6976 6564 2072 756d 7473 276e       Divider mustn'
   18808:	2074 7865 6563 6465 3320 1b32 305b 1b6d     t exceed 32.[0m.
   18818:	305b 0a6d 0000 0000 5b1b 3534 206d 2020     [0m......[45m   
   18828:	5245 4f52 1b52 305b 393b 6d34 253a 3a73     ERROR.[0;94m:%s:
   18838:	5b1b 3b30 3239 256d 3a73 5b1b 3b30 3339     .[0;92m%s:.[0;93
   18848:	256d 3e64 1b20 305b 333b 6d37 6146 6c69     m%d> .[0;37mFail
   18858:	6465 7420 206f 6e69 7469 6169 6574 5320     ed to initiate S
   18868:	4950 6d20 646f 2065 6977 6874 6e69 7420     PI mode within t
   18878:	6d69 6f65 7475 202e 6241 726f 6974 676e     imeout. Aborting
   18888:	1b21 305b 0a6d 0000 5b1b 3534 206d 2020     !.[0m....[45m   
   18898:	5245 4f52 1b52 305b 393b 6d34 253a 3a73     ERROR.[0;94m:%s:
   188a8:	5b1b 3b30 3239 256d 3a73 5b1b 3b30 3339     .[0;92m%s:.[0;93
   188b8:	256d 3e64 1b20 305b 333b 6d37 6552 7073     m%d> .[0;37mResp
   188c8:	6e6f 6573 6920 746e 6765 6972 7974 6320     onse integrity c
   188d8:	6568 6b63 6620 6961 656c 2e64 4120 6f62     heck failed. Abo
   188e8:	7472 6e69 2167 5b1b 6d30 000a 5b1b 3534     rting!.[0m...[45
   188f8:	206d 2020 5245 4f52 1b52 305b 393b 6d34     m   ERROR.[0;94m
   18908:	253a 3a73 5b1b 3b30 3239 256d 3a73 5b1b     :%s:.[0;92m%s:.[
   18918:	3b30 3339 256d 3e64 1b20 305b 333b 6d37     0;93m%d> .[0;37m
   18928:	6e55 7573 7070 726f 6574 2064 6f76 746c     Unsupported volt
   18938:	6761 2065 6e69 7520 6573 202e 6241 726f     age in use. Abor
   18948:	6974 676e 1b21 305b 0a6d 0000 5b1b 3534     ting!.[0m....[45
   18958:	206d 2020 5245 4f52 1b52 305b 393b 6d34     m   ERROR.[0;94m
   18968:	253a 3a73 5b1b 3b30 3239 256d 3a73 5b1b     :%s:.[0;92m%s:.[
   18978:	3b30 3339 256d 3e64 1b20 305b 333b 6d37     0;93m%d> .[0;37m
   18988:	4453 4320 7261 2064 6974 656d 2064 756f     SD Card timed ou
   18998:	2e74 4120 6f62 7472 6e69 2167 5b1b 6d30     t. Aborting!.[0m
   189a8:	000a 0000 7274 6575 0000 0000 6166 736c     ....true....fals
   189b8:	0065 0000 5b1b 3534 206d 2020 5245 4f52     e....[45m   ERRO
   189c8:	1b52 305b 393b 6d34 253a 3a73 5b1b 3b30     R.[0;94m:%s:.[0;
   189d8:	3239 256d 3a73 5b1b 3b30 3339 256d 3e64     92m%s:.[0;93m%d>
   189e8:	1b20 305b 333b 6d37 6857 6c69 2065 6552      .[0;37mWhile Re
   189f8:	6461 6e69 2067 6c42 636f 206b 2523 2064     ading Block #%d 
   18a08:	5243 3143 3a36 5b1b 6d30 000a 5b1b 3534     CRC16:.[0m...[45
   18a18:	206d 2020 5245 4f52 1b52 305b 393b 6d34     m   ERROR.[0;94m
   18a28:	253a 3a73 5b1b 3b30 3239 256d 3a73 5b1b     :%s:.[0;92m%s:.[
   18a38:	3b30 3339 256d 3e64 1b20 305b 333b 6d37     0;93m%d> .[0;37m
   18a48:	7845 6570 7463 6465 2720 7830 3025 5834     Expected '0x%04X
   18a58:	1b27 305b 0a6d 0000 5b1b 3534 206d 2020     '.[0m....[45m   
   18a68:	5245 4f52 1b52 305b 393b 6d34 253a 3a73     ERROR.[0;94m:%s:
   18a78:	5b1b 3b30 3239 256d 3a73 5b1b 3b30 3339     .[0;92m%s:.[0;93
   18a88:	256d 3e64 1b20 305b 333b 6d37 6f47 2074     m%d> .[0;37mGot 
   18a98:	3027 2578 3430 2758 5b1b 6d30 000a 0000     '0x%04X'.[0m....
   18aa8:	5b1b 3534 206d 2020 5245 4f52 1b52 305b     .[45m   ERROR.[0
   18ab8:	393b 6d34 253a 3a73 5b1b 3b30 3239 256d     ;94m:%s:.[0;92m%
   18ac8:	3a73 5b1b 3b30 3339 256d 3e64 1b20 305b     s:.[0;93m%d> .[0
   18ad8:	333b 6d37 6552 6461 4320 646d 7720 7361     ;37mRead Cmd was
   18ae8:	6e20 746f 6120 6b63 6f6e 6c77 6465 6567      not acknowledge
   18af8:	2064 7270 706f 7265 796c 1b21 305b 0a6d     d properly!.[0m.
   18b08:	0000 0000 5b1b 3534 206d 2020 5245 4f52     .....[45m   ERRO
   18b18:	1b52 305b 393b 6d34 253a 3a73 5b1b 3b30     R.[0;94m:%s:.[0;
   18b28:	3239 256d 3a73 5b1b 3b30 3339 256d 3e64     92m%s:.[0;93m%d>
   18b38:	1b20 305b 333b 6d37 6150 6172 656d 6574      .[0;37mParamete
   18b48:	2072 7245 3a72 2520 1b73 305b 0a6d 0000     r Err: %s.[0m...
   18b58:	5b1b 3534 206d 2020 5245 4f52 1b52 305b     .[45m   ERROR.[0
   18b68:	393b 6d34 253a 3a73 5b1b 3b30 3239 256d     ;94m:%s:.[0;92m%
   18b78:	3a73 5b1b 3b30 3339 256d 3e64 1b20 305b     s:.[0;93m%d> .[0
   18b88:	333b 6d37 6441 7264 4520 7272 203a 7325     ;37mAddr Err: %s
   18b98:	5b1b 6d30 000a 0000 5b1b 3534 206d 2020     .[0m.....[45m   
   18ba8:	5245 4f52 1b52 305b 393b 6d34 253a 3a73     ERROR.[0;94m:%s:
   18bb8:	5b1b 3b30 3239 256d 3a73 5b1b 3b30 3339     .[0;92m%s:.[0;93
   18bc8:	256d 3e64 1b20 305b 333b 6d37 7245 7361     m%d> .[0;37mEras
   18bd8:	2065 6553 2071 7245 3a72 2520 1b73 305b     e Seq Err: %s.[0
   18be8:	0a6d 0000 5b1b 3534 206d 2020 5245 4f52     m....[45m   ERRO
   18bf8:	1b52 305b 393b 6d34 253a 3a73 5b1b 3b30     R.[0;94m:%s:.[0;
   18c08:	3239 256d 3a73 5b1b 3b30 3339 256d 3e64     92m%s:.[0;93m%d>
   18c18:	1b20 305b 333b 6d37 6f43 206d 5243 2043      .[0;37mCom CRC 
   18c28:	7245 3a72 2520 1b73 305b 0a6d 0000 0000     Err: %s.[0m.....
   18c38:	5b1b 3534 206d 2020 5245 4f52 1b52 305b     .[45m   ERROR.[0
   18c48:	393b 6d34 253a 3a73 5b1b 3b30 3239 256d     ;94m:%s:.[0;92m%
   18c58:	3a73 5b1b 3b30 3339 256d 3e64 1b20 305b     s:.[0;93m%d> .[0
   18c68:	333b 6d37 6c49 656c 6167 206c 6d43 2064     ;37mIllegal Cmd 
   18c78:	7245 3a72 2520 1b73 305b 0a6d 0000 0000     Err: %s.[0m.....
   18c88:	5b1b 3534 206d 2020 5245 4f52 1b52 305b     .[45m   ERROR.[0
   18c98:	393b 6d34 253a 3a73 5b1b 3b30 3239 256d     ;94m:%s:.[0;92m%
   18ca8:	3a73 5b1b 3b30 3339 256d 3e64 1b20 305b     s:.[0;93m%d> .[0
   18cb8:	333b 6d37 7245 7361 2065 6552 6573 3a74     ;37mErase Reset:
   18cc8:	2520 1b73 305b 0a6d 0000 0000 5b1b 3534      %s.[0m......[45
   18cd8:	206d 2020 5245 4f52 1b52 305b 393b 6d34     m   ERROR.[0;94m
   18ce8:	253a 3a73 5b1b 3b30 3239 256d 3a73 5b1b     :%s:.[0;92m%s:.[
   18cf8:	3b30 3339 256d 3e64 1b20 305b 333b 6d37     0;93m%d> .[0;37m
   18d08:	6e49 4920 6c64 3a65 2520 1b73 305b 0a6d     In Idle: %s.[0m.
   18d18:	0000 0000 5b1b 3534 206d 2020 5245 4f52     .....[45m   ERRO
   18d28:	1b52 305b 393b 6d34 253a 3a73 5b1b 3b30     R.[0;94m:%s:.[0;
   18d38:	3239 256d 3a73 5b1b 3b30 3339 256d 3e64     92m%s:.[0;93m%d>
   18d48:	1b20 305b 333b 6d37 6146 6c69 6465 7420      .[0;37mFailed t
   18d58:	206f 6573 2074 7453 7261 2074 6441 7264     o set Start Addr
   18d68:	7365 2173 5b1b 6d30 000a 0000 5b1b 3534     ess!.[0m.....[45
   18d78:	206d 2020 5245 4f52 1b52 305b 393b 6d34     m   ERROR.[0;94m
   18d88:	253a 3a73 5b1b 3b30 3239 256d 3a73 5b1b     :%s:.[0;92m%s:.[
   18d98:	3b30 3339 256d 3e64 1b20 305b 333b 6d37     0;93m%d> .[0;37m
   18da8:	6146 6c69 6465 7420 206f 6573 2074 6e45     Failed to set En
   18db8:	2064 6441 7264 7365 2173 5b1b 6d30 000a     d Address!.[0m..
   18dc8:	5b1b 3534 206d 2020 5245 4f52 1b52 305b     .[45m   ERROR.[0
   18dd8:	393b 6d34 253a 3a73 5b1b 3b30 3239 256d     ;94m:%s:.[0;92m%
   18de8:	3a73 5b1b 3b30 3339 256d 3e64 1b20 305b     s:.[0;93m%d> .[0
   18df8:	333b 6d37 6e55 6e6b 776f 206e 6572 7073     ;37mUnknown resp
   18e08:	6e6f 6573 7420 7079 2e65 4120 6f62 7472     onse type. Abort
   18e18:	6e69 2167 5b1b 6d30 000a 0000 5b1b 3534     ing!.[0m.....[45
   18e28:	206d 2020 5245 4f52 1b52 305b 393b 6d34     m   ERROR.[0;94m
   18e38:	253a 3a73 5b1b 3b30 3239 256d 3a73 5b1b     :%s:.[0;92m%s:.[
   18e48:	3b30 3339 256d 3e64 1b20 305b 333b 6d37     0;93m%d> .[0;37m
   18e58:	6552 7073 6e6f 6573 7520 736e 7075 6f70     Response unsuppo
   18e68:	7472 6465 6920 206e 5053 2049 6f6d 6564     rted in SPI mode
   18e78:	202e 6241 726f 6974 676e 1b21 305b 0a6d     . Aborting!.[0m.
   18e88:	ff00 ffff                                   ....

00018e8c <Gpio::ValidPortCheck()::file>:
   18e8c:	7067 6f69 682e 7070 ff00 ffff               gpio.hpp....

00018e98 <Gpio::SetInterruptEdge(GpioInterface::Edge)::file>:
   18e98:	7067 6f69 682e 7070 ff00 ffff               gpio.hpp....

00018ea4 <Gpio::ClearInterruptEdge(GpioInterface::Edge)::file>:
   18ea4:	7067 6f69 682e 7070 ff00 ffff               gpio.hpp....

00018eb0 <Ssp::kPinSelect>:
   18eb0:	0202 ff04                                   ....

00018eb4 <Ssp::kSspPinMatrix>:
   18eb4:	7d8c 0001 1200 0000 7d8c 0001 1100 0000     .}.......}......
   18ec4:	7d8c 0001 0f00 0000 7d8c 0001 0900 0000     .}.......}......
   18ed4:	7d8c 0001 0800 0000 7d8c 0001 0700 0000     .}.......}......
   18ee4:	7d8c 0001 0101 0000 7d8c 0001 0401 0000     .}.......}......
   18ef4:	7d8c 0001 0001 0000                         .}......

00018efc <Ssp::kPowerBit>:
   18efc:	0015 0000 000a 0000 0014 0000               ............

00018f08 <Sd::kCrcTable8>:
   18f08:	0900 1b12 2d24 3f36 4148 535a 656c 777e     ....$-6?HAZSle~w
   18f18:	1019 020b 343d 262f 5851 4a43 7c75 6e67     ....=4/&QXCJu|gn
   18f28:	3b32 2920 1f16 0d04 737a 6168 575e 454c     2; )....zsha^WLE
   18f38:	222b 3039 060f 141d 6a63 7871 4e47 5c55     +"90....cjqxGNU\
   18f48:	6d64 7f76 4940 5b52 252c 373e 0108 131a     dmv.@IR[,%>7....
   18f58:	747d 666f 5059 424b 3c35 2e27 1811 0a03     }tofYPKB5<'.....
   18f68:	5f56 4d44 7b72 6960 171e 050c 333a 2128     V_DMr{`i....:3(!
   18f78:	464f 545d 626b 7079 0e07 1c15 2a23 3831     OF]Tkbyp....#*18
   18f88:	4841 5a53 6c65 7e77 0009 121b 242d 363f     AHSZelw~....-$?6
   18f98:	5158 434a 757c 676e 1910 0b02 3d34 2f26     XQJC|ung....4=&/
   18fa8:	7a73 6861 5e57 4c45 323b 2029 161f 040d     szahW^EL;2) ....
   18fb8:	636a 7178 474e 555c 2b22 3930 0f06 1d14     jcxqNG\U"+09....
   18fc8:	2c25 3e37 0801 1a13 646d 767f 4049 525b     %,7>....md.vI@[R
   18fd8:	353c 272e 1118 030a 7d74 6f66 5950 4b42     <5.'....t}foPYBK
   18fe8:	1e17 0c05 3a33 2821 565f 444d 727b 6069     ....3:!(_VMD{ri`
   18ff8:	070e 151c 232a 3138 4f46 5d54 6b62 0070     ....*#81FOT]bkp.

00019008 <Sd::kCrcTable16>:
   19008:	0000 1021 2042 3063 4084 50a5 60c6 70e7     ..!.B c0.@.P.`.p
   19018:	8108 9129 a14a b16b c18c d1ad e1ce f1ef     ..).J.k.........
   19028:	1231 0210 3273 2252 52b5 4294 72f7 62d6     1...s2R".R.B.r.b
   19038:	9339 8318 b37b a35a d3bd c39c f3ff e3de     9...{.Z.........
   19048:	2462 3443 0420 1401 64e6 74c7 44a4 5485     b$C4 ....d.t.D.T
   19058:	a56a b54b 8528 9509 e5ee f5cf c5ac d58d     j.K.(...........
   19068:	3653 2672 1611 0630 76d7 66f6 5695 46b4     S6r&..0..v.f.V.F
   19078:	b75b a77a 9719 8738 f7df e7fe d79d c7bc     [.z...8.........
   19088:	48c4 58e5 6886 78a7 0840 1861 2802 3823     .H.X.h.x@.a..(#8
   19098:	c9cc d9ed e98e f9af 8948 9969 a90a b92b     ........H.i...+.
   190a8:	5af5 4ad4 7ab7 6a96 1a71 0a50 3a33 2a12     .Z.J.z.jq.P.3:.*
   190b8:	dbfd cbdc fbbf eb9e 9b79 8b58 bb3b ab1a     ........y.X.;...
   190c8:	6ca6 7c87 4ce4 5cc5 2c22 3c03 0c60 1c41     .l.|.L.\",.<`.A.
   190d8:	edae fd8f cdec ddcd ad2a bd0b 8d68 9d49     ........*...h.I.
   190e8:	7e97 6eb6 5ed5 4ef4 3e13 2e32 1e51 0e70     .~.n.^.N.>2.Q.p.
   190f8:	ff9f efbe dfdd cffc bf1b af3a 9f59 8f78     ..........:.Y.x.
   19108:	9188 81a9 b1ca a1eb d10c c12d f14e e16f     ..........-.N.o.
   19118:	1080 00a1 30c2 20e3 5004 4025 7046 6067     .....0. .P%@Fpg`
   19128:	83b9 9398 a3fb b3da c33d d31c e37f f35e     ........=.....^.
   19138:	02b1 1290 22f3 32d2 4235 5214 6277 7256     .....".25B.RwbVr
   19148:	b5ea a5cb 95a8 8589 f56e e54f d52c c50d     ........n.O.,...
   19158:	34e2 24c3 14a0 0481 7466 6447 5424 4405     .4.$....ftGd$T.D
   19168:	a7db b7fa 8799 97b8 e75f f77e c71d d73c     ........_.~...<.
   19178:	26d3 36f2 0691 16b0 6657 7676 4615 5634     .&.6....Wfvv.F4V
   19188:	d94c c96d f90e e92f 99c8 89e9 b98a a9ab     L.m.../.........
   19198:	5844 4865 7806 6827 18c0 08e1 3882 28a3     DXeH.x'h.....8.(
   191a8:	cb7d db5c eb3f fb1e 8bf9 9bd8 abbb bb9a     }.\.?...........
   191b8:	4a75 5a54 6a37 7a16 0af1 1ad0 2ab3 3a92     uJTZ7j.z.....*.:
   191c8:	fd2e ed0f dd6c cd4d bdaa ad8b 9de8 8dc9     ....l.M.........
   191d8:	7c26 6c07 5c64 4c45 3ca2 2c83 1ce0 0cc1     &|.ld\EL.<.,....
   191e8:	ef1f ff3e cf5d df7c af9b bfba 8fd9 9ff8     ..>.].|.........
   191f8:	6e17 7e36 4e55 5e74 2e93 3eb2 0ed1 1ef0     .n6~UNt^...>....

00019208 <Sd::Mount(SdInterface::CardInfo_t*)::file>:
   19208:	6473 682e 7070 ff00                         sd.hpp..

00019210 <Sd::Mount(SdInterface::CardInfo_t*)::file>:
   19210:	6473 682e 7070 ff00                         sd.hpp..

00019218 <Sd::Mount(SdInterface::CardInfo_t*)::file>:
   19218:	6473 682e 7070 ff00                         sd.hpp..

00019220 <Sd::Mount(SdInterface::CardInfo_t*)::file>:
   19220:	6473 682e 7070 ff00                         sd.hpp..

00019228 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file>:
   19228:	6473 682e 7070 ff00                         sd.hpp..

00019230 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file>:
   19230:	6473 682e 7070 ff00                         sd.hpp..

00019238 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file>:
   19238:	6473 682e 7070 ff00                         sd.hpp..

00019240 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file>:
   19240:	6473 682e 7070 ff00                         sd.hpp..

00019248 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file>:
   19248:	6473 682e 7070 ff00                         sd.hpp..

00019250 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file>:
   19250:	6473 682e 7070 ff00                         sd.hpp..

00019258 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file>:
   19258:	6473 682e 7070 ff00                         sd.hpp..

00019260 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file>:
   19260:	6473 682e 7070 ff00                         sd.hpp..

00019268 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file>:
   19268:	6473 682e 7070 ff00                         sd.hpp..

00019270 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file>:
   19270:	6473 682e 7070 ff00                         sd.hpp..

00019278 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file>:
   19278:	6473 682e 7070 ff00                         sd.hpp..

00019280 <Sd::DeleteBlock(unsigned long, unsigned long)::file>:
   19280:	6473 682e 7070 ff00                         sd.hpp..

00019288 <Sd::DeleteBlock(unsigned long, unsigned long)::file>:
   19288:	6473 682e 7070 ff00                         sd.hpp..

00019290 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)::file>:
   19290:	6473 682e 7070 ff00                         sd.hpp..

00019298 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)::file>:
   19298:	6473 682e 7070 ff00                         sd.hpp..

000192a0 <vtable for Sd>:
	...
   192a8:	6801 0001 5c59 0001 5d09 0001 611d 0001     .h..Y\...]...a..
   192b8:	6535 0001 66e1 0001 6ca1 0001 6ce9 0001     5e...f...l...l..
   192c8:	6d59 0001                                   Ym..

000192cc <vtable for SdInterface>:
	...
   192d4:	7089 0001 7089 0001 7089 0001 7089 0001     .p...p...p...p..
   192e4:	7089 0001 7089 0001 7089 0001 7089 0001     .p...p...p...p..
   192f4:	7089 0001                                   .p..

000192f8 <vtable for Ssp>:
	...
   19300:	51f5 0001 52d9 0001 5351 0001 53bd 0001     .Q...R..QS...S..
   19310:	54a9 0001 56b5 0001 5815 0001 5a01 0001     .T...V...X...Z..
   19320:	fffc ffff 0000 0000 0ddd 0001 0e6d 0001     ............m...
   19330:	0ec5 0001 0edd 0001 0ef1 0001 0f31 0001     ............1...
   19340:	0f61 0001                                   a...

00019344 <vtable for SspInterface>:
	...
   1934c:	7089 0001 7089 0001 7089 0001 7089 0001     .p...p...p...p..
   1935c:	7089 0001 7089 0001 7089 0001 7089 0001     .p...p...p...p..

0001936c <vtable for SystemControllerInterface>:
	...
   19374:	7089 0001 7089 0001 7089 0001 7089 0001     .p...p...p...p..
   19384:	7089 0001 7089 0001 7089 0001               .p...p...p..

00019390 <vtable for Gpio>:
	...
   19398:	473d 0001 47b9 0001 4835 0001 4879 0001     =G...G..5H..yH..
   193a8:	48dd 0001 4941 0001 4985 0001 49f1 0001     .H..AI...I...I..
   193b8:	4a69 0001 4ad9 0001 4d71 0001 4db9 0001     iJ...J..qM...M..
   193c8:	4b81 0001 4bdd 0001 4c61 0001 4ce9 0001     .K...K..aL...L..

000193d8 <vtable for GpioInterface>:
	...
   193e0:	7089 0001 7089 0001 7089 0001 7089 0001     .p...p...p...p..
   193f0:	7089 0001 7089 0001 7089 0001 7089 0001     .p...p...p...p..
   19400:	7089 0001 7089 0001 7089 0001 7089 0001     .p...p...p...p..
   19410:	7089 0001 7089 0001 7089 0001 7089 0001     .p...p...p...p..

00019420 <vtable for PinInterface>:
	...
   19428:	7089 0001 7089 0001 7089 0001 7089 0001     .p...p...p...p..
   19438:	7089 0001 7089 0001 7089 0001 7089 0001     .p...p...p...p..
   19448:	7089 0001 7089 0001 7089 0001 7089 0001     .p...p...p...p..
   19458:	7089 0001                                   .p..

0001945c <Gpio::ClearInterruptEdge(GpioInterface::Edge)::__PRETTY_FUNCTION__>:
   1945c:	6976 7472 6175 206c 6f76 6469 4720 6970     virtual void Gpi
   1946c:	3a6f 433a 656c 7261 6e49 6574 7272 7075     o::ClearInterrup
   1947c:	4574 6764 2865 7047 6f69 6e49 6574 6672     tEdge(GpioInterf
   1948c:	6361 3a65 453a 6764 2965 ff00               ace::Edge)..

00019498 <Gpio::ValidPortCheck()::__PRETTY_FUNCTION__>:
   19498:	6f62 6c6f 4720 6970 3a6f 563a 6c61 6469     bool Gpio::Valid
   194a8:	6f50 7472 6843 6365 286b 0029               PortCheck().

000194b4 <Gpio::SetInterruptEdge(GpioInterface::Edge)::__PRETTY_FUNCTION__>:
   194b4:	6976 7472 6175 206c 6f76 6469 4720 6970     virtual void Gpi
   194c4:	3a6f 533a 7465 6e49 6574 7272 7075 4574     o::SetInterruptE
   194d4:	6764 2865 7047 6f69 6e49 6574 6672 6361     dge(GpioInterfac
   194e4:	3a65 453a 6764 2965 ff00 ffff               e::Edge)....

000194f0 <Sd::Mount(SdInterface::CardInfo_t*)::__PRETTY_FUNCTION__>:
   194f0:	6976 7472 6175 206c 6f62 6c6f 5320 3a64     virtual bool Sd:
   19500:	4d3a 756f 746e 5328 4964 746e 7265 6166     :Mount(SdInterfa
   19510:	6563 3a3a 6143 6472 6e49 6f66 745f 292a     ce::CardInfo_t*)
   19520:	ff00 ffff                                   ....

00019524 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::__PRETTY_FUNCTION__>:
   19524:	6976 7472 6175 206c 6975 746e 5f38 2074     virtual uint8_t 
   19534:	6453 3a3a 6552 6461 6c42 636f 286b 6975     Sd::ReadBlock(ui
   19544:	746e 3233 745f 202c 6975 746e 5f38 2a74     nt32_t, uint8_t*
   19554:	202c 6975 746e 3233 745f 0029               , uint32_t).

00019560 <Sd::DeleteBlock(unsigned long, unsigned long)::__PRETTY_FUNCTION__>:
   19560:	6976 7472 6175 206c 6975 746e 5f38 2074     virtual uint8_t 
   19570:	6453 3a3a 6544 656c 6574 6c42 636f 286b     Sd::DeleteBlock(
   19580:	6975 746e 3233 745f 202c 6975 746e 3233     uint32_t, uint32
   19590:	745f 0029                                   _t).

00019594 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)::__PRETTY_FUNCTION__>:
   19594:	6976 7472 6175 206c 6975 746e 3233 745f     virtual uint32_t
   195a4:	5320 3a64 533a 6e65 4364 646d 5328 4964      Sd::SendCmd(SdI
   195b4:	746e 7265 6166 6563 3a3a 6f43 6d6d 6e61     nterface::Comman
   195c4:	2c64 7520 6e69 3374 5f32 2c74 7520 6e69     d, uint32_t, uin
   195d4:	3874 745f 2c2a 7520 6e69 3374 5f32 2c74     t8_t*, uint32_t,
   195e4:	5320 4964 746e 7265 6166 6563 3a3a 654b      SdInterface::Ke
   195f4:	7065 6c41 7669 2965 ff00 ffff               epAlive)....

00019600 <__sf_fake_stderr>:
	...

00019620 <__sf_fake_stdin>:
	...

00019640 <__sf_fake_stdout>:
	...
