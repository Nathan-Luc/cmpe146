
build/application/firmware.elf:     file format elf32-littlearm
build/application/firmware.elf
architecture: arm, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00015b69

Program Header:
0x70000001 off    0x0001bac4 vaddr 0x0001bac4 paddr 0x0001bac4 align 2**2
         filesz 0x00000008 memsz 0x00000008 flags r--
    LOAD off    0x00010000 vaddr 0x00010000 paddr 0x00010000 align 2**16
         filesz 0x0000bacc memsz 0x0000bacc flags r-x
    LOAD off    0x00020000 vaddr 0x10000000 paddr 0x0001bacc align 2**16
         filesz 0x00000644 memsz 0x00000644 flags rw-
    LOAD off    0x00020648 vaddr 0x10000648 paddr 0x10000648 align 2**16
         filesz 0x00000000 memsz 0x00000fb8 flags rw-
private flags = 5000400: [Version5 EABI] [hard-float ABI]

Sections:
Idx Name             Size      VMA       LMA       File off  Algn  Flags
  0 .text            0000bac4  00010000  00010000  00010000  2**4  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data            00000644  10000000  0001bacc  00020000  2**2  CONTENTS, ALLOC, LOAD, DATA
  2 .data_RAM2       00000000  20000000  20000000  00020644  2**2  CONTENTS
  3 .bss             00000fb8  10000648  10000648  00020648  2**3  ALLOC
  4 .ARM.exidx       00000008  0001bac4  0001bac4  0001bac4  2**2  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .uninit_RESERVED 00000000  10000000  10000000  00020644  2**2  CONTENTS
  6 .noinit_RAM2     00000000  20000000  20000000  00020644  2**2  CONTENTS
  7 .noinit          00000000  10001600  10001600  00020644  2**2  CONTENTS
  8 .ARM.attributes  00000030  00000000  00000000  00020644  2**0  CONTENTS, READONLY
  9 .comment         0000007e  00000000  00000000  00020674  2**0  CONTENTS, READONLY
 10 .debug_info      0004341b  00000000  00000000  000206f2  2**0  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev    0000485e  00000000  00000000  00063b0d  2**0  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges   00001030  00000000  00000000  0006836b  2**0  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges    00000fa0  00000000  00000000  0006939b  2**0  CONTENTS, READONLY, DEBUGGING
 14 .debug_line      000078f5  00000000  00000000  0006a33b  2**0  CONTENTS, READONLY, DEBUGGING
 15 .debug_str       0001a114  00000000  00000000  00071c30  2**0  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame     00003fb4  00000000  00000000  0008bd44  2**2  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
00010000 l    d  .text	00000000 .text
10000000 l    d  .data	00000000 .data
20000000 l    d  .data_RAM2	00000000 .data_RAM2
10000648 l    d  .bss	00000000 .bss
0001bac4 l    d  .ARM.exidx	00000000 .ARM.exidx
10000000 l    d  .uninit_RESERVED	00000000 .uninit_RESERVED
20000000 l    d  .noinit_RAM2	00000000 .noinit_RAM2
10001600 l    d  .noinit	00000000 .noinit
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 interrupt.cpp
00016144 l     F .text	0000002c NVIC_EnableIRQ
00016170 l     F .text	00000054 NVIC_SetPriority
00010000 l     O .text	000000e4 kInterruptVectorTable
0001a8e0 l     O .text	0000000e InterruptLookupHandler::file
0001a8f0 l     O .text	0000001e InterruptLookupHandler::__PRETTY_FUNCTION__
0001022c l       .text	00000000 handler2_address_const
00000000 l    df *ABS*	00000000 startup.cpp
0001a634 l     O .text	0000003e Timer::Initialize(unsigned long, void (*)(), long)::__PRETTY_FUNCTION__
100004dc l     O .data	00000008 (anonymous namespace)::system_timer
100004e4 l     O .data	00000004 (anonymous namespace)::system_controller
100004e8 l     O .data	0000000c (anonymous namespace)::timer0
00015a10 l     F .text	00000040 (anonymous namespace)::Lpc40xxUptime()
0001a57c l     O .text	0000000c LowLevelInit()::file
0001a674 l     O .text	00000014 LowLevelInit()::__PRETTY_FUNCTION__
000102fc l     O .text	00000004 kCrpWord
00016058 l     F .text	000000dc __static_initialization_and_destruction_0(int, int)
00016134 l     F .text	0000000e _GLOBAL__sub_I_UptimeRTOS
00000000 l    df *ABS*	00000000 /mnt/c/SJSU_Dev2/SJSU-Dev2/tools/gcc-arm-none-eabi-7-2017-q4-major/bin/../lib/gcc/arm-none-eabi/7.2.1/thumb/v7e-m/fpv4-sp/hard/crti.o
00000000 l    df *ABS*	00000000 /mnt/c/SJSU_Dev2/SJSU-Dev2/tools/gcc-arm-none-eabi-7-2017-q4-major/bin/../lib/gcc/arm-none-eabi/7.2.1/thumb/v7e-m/fpv4-sp/hard/crtn.o
00000000 l    df *ABS*	00000000 crtstuff.c
00010328 l     F .text	00000000 __do_global_dtors_aux
10000648 l       .bss	00000001 completed.9929
0001034c l     F .text	00000000 frame_dummy
1000064c l       .bss	00000018 object.9934
0001030c l     O .text	00000000 __frame_dummy_init_array_entry
00000000 l    df *ABS*	00000000 main.cpp
10000668 l     O .bss	00000008 (anonymous namespace)::uptime
00010fc4 l     F .text	00000030 (anonymous namespace)::DefaultUptime()
00019f2c l     O .text	0000001c Gpio::ValidPortCheck()::__PRETTY_FUNCTION__
00019f48 l     O .text	00000039 Gpio::SetInterruptEdge(GpioInterface::Edge)::__PRETTY_FUNCTION__
00019ef0 l     O .text	0000003b Gpio::ClearInterruptEdge(GpioInterface::Edge)::__PRETTY_FUNCTION__
00019db0 l     O .text	00000049 Lpc40xxSystemController::SetPeripheralClockDivider(unsigned char)::__PRETTY_FUNCTION__
00019e58 l     O .text	0000005c Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)::__PRETTY_FUNCTION__
00019dfc l     O .text	0000005a Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)::__PRETTY_FUNCTION__
00019eb4 l     O .text	0000003a Lpc40xxSystemController::SetCpuClockDivider(unsigned char)::__PRETTY_FUNCTION__
00019b38 l     O .text	00000009 main::file
00019d90 l     O .text	0000000b main::__PRETTY_FUNCTION__
00019b44 l     O .text	00000009 DemoButton()::file
00019b50 l     O .text	00000009 DemoButton()::file
00019b5c l     O .text	00000009 DemoButton()::file
00019b68 l     O .text	00000009 DemoButton()::file
00019d9c l     O .text	00000012 DemoButton()::__PRETTY_FUNCTION__
00014bc8 l     F .text	000000b4 __static_initialization_and_destruction_0(int, int)
00014c7c l     F .text	00000028 _GLOBAL__sub_I_button3
00000000 l    df *ABS*	00000000 diskio.cpp
0001b954 l     O .text	00000031 Sd::Mount(SdInterface::CardInfo_t*)::__PRETTY_FUNCTION__
0001b988 l     O .text	0000003c Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::__PRETTY_FUNCTION__
0001b9c4 l     O .text	00000034 Sd::DeleteBlock(unsigned long, unsigned long)::__PRETTY_FUNCTION__
0001b9f8 l     O .text	00000069 Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)::__PRETTY_FUNCTION__
10001594 l     O .bss	00000068 (anonymous namespace)::sd_card
00018cd8 l     F .text	00000050 __static_initialization_and_destruction_0(int, int)
00018d28 l     F .text	00000028 _GLOBAL__sub_I_disk_status
00000000 l    df *ABS*	00000000 LabGPIO.cpp
00000000 l    df *ABS*	00000000 newlib.cpp
00000000 l    df *ABS*	00000000 tasks.c
1000151c l     O .bss	00000064 pxReadyTasksLists
10001580 l     O .bss	00000004 uxTopReadyPriority
10001584 l     O .bss	00000004 xYieldPending
10001588 l     O .bss	00000004 uxSchedulerSuspended
1000158c l     O .bss	00000004 ulTaskSwitchedInTime
10001590 l     O .bss	00000004 ulTotalRunTime
00000000 l    df *ABS*	00000000 port.c
00016600 l       .text	00000000 pxCurrentTCBConst2
00016670 l       .text	00000000 pxCurrentTCBConst
00000000 l    df *ABS*	00000000 printf.cpp
00016678 l     F .text	00000044 _out_buffer(char, void*, unsigned int, unsigned int)
000166bc l     F .text	00000030 _out_null(char, void*, unsigned int, unsigned int)
000166ec l     F .text	00000044 _out_char(char, void*, unsigned int, unsigned int)
00016730 l     F .text	00000044 _strlen(char const*)
00016774 l     F .text	00000044 _is_digit(char)
000167b8 l     F .text	00000060 _atoi(char const**)
00016818 l     F .text	0000025c _ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)
00016a74 l     F .text	000000e4 _ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)
00016b58 l     F .text	000000f4 _ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)
0001a910 l     O .text	00000028 _ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)::pow10
00016c4c l     F .text	00000438 _ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)
00017084 l     F .text	000008f4 _vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)
00000000 l    df *ABS*	00000000 pure.cc
00000000 l    df *ABS*	00000000 eh_terminate.cc
00000000 l    df *ABS*	00000000 sf_round.c
00000000 l    df *ABS*	00000000 _arm_truncdfsf2.o
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 abort.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 signal.c
00000000 l    df *ABS*	00000000 signalr.c
00000000 l    df *ABS*	00000000 findfp.c
00000000 l    df *ABS*	00000000 eh_term_handler.cc
00000000 l    df *ABS*	00000000 impure.c
100005e4 l     O .data	00000060 impure_data
00000000 l    df *ABS*	00000000 reent.c
00011c30  w    F .text	0000003e Lpc40xxSystemController::GetPeripheralFrequency() const
000163e8 g     F .text	00000038 putchar
000161c4  w    F .text	0000006c Pwm0IrqHandler
00019a50  w    O .text	00000009 Gpio::SetInterruptEdge(GpioInterface::Edge)::file
00010218 g     F .text	0000001c HardFaultHandler
00016358 g     F .text	00000024 _getpid
000163ac g     F .text	0000003c _putchar
00013974 g     F .text	0000018c DemoButton()
000161c4  w    F .text	0000006c EepromIrqHandler
000161c4  w    F .text	0000006c Timer2IrqHandler
100004c8  w    O .data	00000014 uart0
000164ec g     F .text	0000002c GetStackDepth()
0001b864  w    O .text	00000007 Sd::Mount(SdInterface::CardInfo_t*)::file
00011af8  w    F .text	00000024 Lpc40xxSystemController::Lpc40xxSystemController()
0001a544  w    O .text	00000004 Timer::kTimerIrq
0001b89c  w    O .text	00000007 Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file
00019244 g     F .text	00000024 _kill_r
0001010c g       .text	00000000 bss_section_table_end
00017978 g     F .text	0000004c printf
10000464  w    O .data	00000004 SystemTimer::sys_tick
000161c4  w    F .text	0000006c I2c1IrqHandler
00015c10  w    F .text	0000003c void Timer::TimerHandler<(TimerInterface::TimerPort)2>()
10000478  w    O .data	00000010 Uart::uart
0001b8cc  w    O .text	00000007 Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file
00010000 g       *ABS*	00000000 __vectors_start__
00012f08  w    F .text	00000090 Ssd1306::Write(unsigned long, Ssd1306::Transaction, unsigned int)
00010ff4  w    F .text	00000044 Milliseconds()
00011d94  w    F .text	00000110 Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)
00012db4  w    F .text	00000094 Ssd1306::Ssd1306()
000120d8  w    F .text	00000034 SspInterface::SspInterface()
000161c4  w    F .text	0000006c BusFaultHandler
10001414 g     O .bss	00000100 stack_trace
10000000  w    O .data	00000004 Pin::pin_map
0001525c  w    F .text	000000e4 Uart::Initialize(unsigned long)
20000000 g       *ABS*	00000000 __base_RAM2
00012db4  w    F .text	00000094 Ssd1306::Ssd1306()
0001bacc g       .ARM.exidx	00000000 __exidx_end
000119e8  w    F .text	0000007c Gpio::ClearEdgeRising()
0001207c  w    F .text	00000030 Lpc40xxSystemController::SetEmcClockDivider(Lpc40xxSystemController::EmcDivider)
00019a44  w    O .text	00000009 Gpio::ValidPortCheck()::file
0001386c  w    F .text	0000006c OledTerminal::OledTerminal()
10001518 g     O .bss	00000004 pxCurrentTCB
00010858  w    F .text	00000034 PinInterface::PinInterface()
000164a8 g     F .text	0000001c __cyg_profile_func_exit
00018b24  w    F .text	00000048 Sd::Crc7Add(unsigned char, unsigned char)
00017a3c  w    F .text	000000a0 Sd::Sd(Sd::DebugSdCard_t, unsigned char, unsigned char, unsigned char, unsigned char)
00015e78  w    F .text	000000a0 void Timer::ClearInterrupts<(TimerInterface::TimerPort)1>()
100015fc g     O .bss	00000004 errno
0001bacc g       .ARM.exidx	00000000 _etext
10000048  w    O .data	00000004 Lpc40xxSystemController::system_controller
00011b1c  w    F .text	00000090 Lpc40xxSystemController::SetClockFrequency(unsigned char)
0001502c  w    F .text	00000030 unsigned char util::Value<TimerInterface::MatchControlRegister, unsigned char>(TimerInterface::MatchControlRegister)
00011c1c  w    F .text	00000014 Lpc40xxSystemController::GetSystemFrequency() const
00015820  w    F .text	000001f0 Uart::GenerateUartCalibration(float)
10000008  w    O .data	00000018 Gpio::gpio_port
0001505c  w    F .text	000000f8 Timer::SetTimer(unsigned long, TimerInterface::TimerIsrCondition, TimerInterface::MatchControlRegister)
00015a90  w    F .text	000000bc LowLevelInit()
000161c4  w    F .text	0000006c LcdIrqHandler
0001b8f4  w    O .text	00000007 Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)::file
00080000 g       *ABS*	00000000 __top_MFlash512
000123d8  w    F .text	0000006c Ssp::Transfer(unsigned short)
000154c0  w    F .text	000000f8 Uart::Receive(unsigned long)
00011d34  w    F .text	00000030 Lpc40xxSystemController::SelectUsbClockSource(Lpc40xxSystemController::UsbSource)
00013814  w    F .text	00000058 OledTerminal::Clear()
00011154  w    F .text	00000030 Delay(unsigned long long)
0001a56c  w    O .text	00000010 Uart::kPowerbit
000161c4  w    F .text	0000006c I2c2IrqHandler
100013bc  w    O .bss	00000004 SystemTimer::system_timer_isr
000118b0  w    F .text	00000040 Gpio::DetachInterrupt()
000161c4  w    F .text	0000006c CanIrqHandler
00010d94  w    F .text	00000074 Pin::EnableDac(bool)
00010550 g     F .text	00000124 LabGPIO::ReadBool()
000136e0  w    F .text	00000048 OledTerminal::SetCursor(unsigned int, unsigned int)
00010ac4  w    F .text	0000007c Pin::SetAsAnalogMode(bool)
00012014  w    F .text	00000068 Lpc40xxSystemController::SetCpuClockDivider(unsigned char)
00018bdc  w    F .text	000000fc Sd::GetCrc16(unsigned char*, unsigned short)
00018e7c g     F .text	00000000 .hidden __aeabi_uldivmod
10001600 g       .noinit	00000000 _noinit
00016420 g     F .text	00000060 puts
100004f4 g     O .data	000000e4 dynamic_isr_vector_table
000115d0  w    F .text	0000002c Gpio::GetPin()
00011678  w    F .text	0000005c Gpio::SetInterruptRoutine(void (*)())
00011184  w    F .text	00000034 GpioInterface::GpioInterface()
000120d8  w    F .text	00000034 SspInterface::SspInterface()
000161c4  w    F .text	0000006c RitIrqHandler
000161c4  w    F .text	0000006c Uart2IrqHandler
00010e08  w    F .text	00000064 Pin::BitPlace(unsigned long, unsigned long, unsigned long, unsigned long)
00019ac8  w    O .text	00000016 Lpc40xxSystemController::SetCpuClockDivider(unsigned char)::file
0001b884  w    O .text	00000007 Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file
0001273c  w    F .text	00000160 Ssp::GetPeripheralMode()
00015f18  w    F .text	000000a0 void Timer::ClearInterrupts<(TimerInterface::TimerPort)2>()
00018d7c g     F .text	00000060 roundf
000191e4 g     F .text	00000050 _raise_r
00011064  w    F .text	0000002c Wait(unsigned long long)::{lambda()#1}::_FUN()
000120ac  w    F .text	0000002c int util::Value<Ssp::Peripheral, int>(Ssp::Peripheral)
0001210c  w    F .text	00000038 PinInterface::PinInterface(PinInterface const&)
10010000 g       *ABS*	00000000 __top_RAM
0001a568  w    O .text	00000004 Uart::kRxUartPortFunction
00016610 g     F .text	00000066 xPortPendSVHandler
000179c4 g     F .text	00000044 vsnprintf
00011090  w    F .text	000000c4 Wait(unsigned long long)
00017a08  w    F .text	00000034 SdInterface::SdInterface()
00015154  w    F .text	0000003c Timer::GetTimer()
10000000 g       *ABS*	00000000 __base_RamLoc64
000164c4 g     F .text	00000028 GetStackTrace()
100005d8 g     O .data	00000004 out
1000004c  w    O .data	00000004 Lpc40xxSystemController::speed_in_hertz
0001b8d4  w    O .text	00000007 Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file
0001b8bc  w    O .text	00000007 Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file
00019268 g     F .text	00000004 _getpid_r
00000000 g       *ABS*	00000000 __base_MFlash512
00019bcc  w    O .text	0000004c vtable for Ssp
10010000 g       *ABS*	00000000 StackTop
00017eec  w    F .text	00000064 Sd::WaitToReadBlock()
00019ae0  w    O .text	00000003 Ssp::kPinSelect
00013504  w    F .text	00000038 Graphics::Clear()
00012ea0  w    F .text	00000068 Ssd1306::AvailableColors()
00018eac g     F .text	000002cc .hidden __udivmoddi4
000161c4  w    F .text	0000006c I2sIrqHandler
000100fc g       .text	00000000 bss_section_table
000137c4  w    F .text	00000050 OledTerminal::ClearRow(unsigned int)
00010300 g       .text	00000000 __CRP_WORD_END__
20008000 g       *ABS*	00000000 __top_RAM2
00015b68 g     F .text	00000030 ResetIsr
00019b74  w    O .text	0000002c vtable for Ssd1306
00017ea8  w    F .text	00000044 Sd::ToBool(bool)
00019c18  w    O .text	00000028 vtable for SspInterface
000161c4  w    F .text	0000006c PendSVHandler
1000005c  w    O .data	00000400 font8x8_basic
000124a0  w    F .text	00000030 unsigned char util::Value<SspInterface::DataSize, unsigned char>(SspInterface::DataSize)
10000794 g     O .bss	00000004 CB1
00014d44  w    F .text	00000034 SystemTimer::SetIsrFunction(void (*)())
00014a48  w    F .text	00000044 bool bit::Read<unsigned long>(unsigned long, unsigned long)
00012360  w    F .text	00000078 Ssp::IsTransferRegBusy()
000161c4  w    F .text	0000006c UsageFaultHandler
20000000 g       *ABS*	00000000 __user_heap_base
10000784 g     O .bss	00000002 led1
000132a0  w    F .text	0000008c Graphics::Graphics(PixelDisplayInterface*)
0001bac4 g       .text	00000000 __exidx_start
00010cac  w    F .text	00000074 Pin::EnableI2cHighCurrentDrive(bool)
000161c4  w    F .text	0000006c Uart4IrqHandler
000116d4  w    F .text	00000054 Gpio::ClearInterruptRoutine()
00010c30  w    F .text	0000007c Pin::EnableI2cHighSpeedMode(bool)
000101fc g     F .text	00000018 InitFpu()
00010b40  w    F .text	0000007c Pin::EnableDigitalFilter(bool)
00012e48  w    F .text	0000002c Ssd1306::GetWidth()
0001918c g     F .text	00000048 __libc_init_array
000161c4 g     F .text	0000006c InterruptLookupHandler
00011d64  w    F .text	00000030 Lpc40xxSystemController::SelectSpifiClockSource(Lpc40xxSystemController::SpifiSource)
00011c04  w    F .text	00000018 Lpc40xxSystemController::GetPeripheralClockDivider() const
10000004  w    O .data	00000004 Uptime
00019cd0  w    O .text	00000048 vtable for GpioInterface
0001538c  w    F .text	000000e8 Uart::Send(unsigned char)
0001917c g     F .text	0000000e abort
000161c4  w    F .text	0000006c BodIrqHandler
100007a0 g     O .bss	00000004 increment
00012a88  w    F .text	00000184 Ssp::GetClock()
00010300 g     F .text	00000000 _init
0001010c g       .text	00000000 section_table_end
00015fb8  w    F .text	000000a0 void Timer::ClearInterrupts<(TimerInterface::TimerPort)3>()
00018d70 g     F .text	0000000a std::terminate()
00018ddc g     F .text	0000009e .hidden __aeabi_d2f
00011a64  w    F .text	0000007c Gpio::ClearEdgeFalling()
000161c4  w    F .text	0000006c SysTickHandler
000100e4 g       .text	00000000 section_table_start
10001600 g       .bss	00000000 _ebss
0001322c  w    F .text	00000074 Ssd1306::Update()
0001196c  w    F .text	0000007c Gpio::SetEdgeFalling()
0001b894  w    O .text	00000007 Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file
000161c4  w    F .text	0000006c RtcIrqHandler
00011560  w    F .text	00000070 Gpio::Read()
000132a0  w    F .text	0000008c Graphics::Graphics(PixelDisplayInterface*)
00015c88  w    F .text	000000a8 Status Wait<Uart::Send(unsigned char)::{lambda()#1}>(unsigned long long, Uart::Send(unsigned char)::{lambda()#1})
eff71b6a g       *ABS*	00000000 ValidUserCodeChecksum
000161c4  w    F .text	0000006c Uart0IrqHandler
0001628c g     F .text	00000078 GetRegistersFromStack
0001078c g     F .text	000000cc LabGPIO::setPulldown()
00014a0c  w    F .text	0000003c unsigned long bit::Set<unsigned long>(unsigned long, unsigned long)
0001353c  w    F .text	0000004c OledTerminal::Initialize()
000134cc  w    F .text	00000038 Graphics::Update()
00019d54  w    O .text	0000003c vtable for PinInterface
000161c4  w    F .text	0000006c UsbIrqHandler
000161c4  w    F .text	0000006c AdcIrqHandler
00015474  w    F .text	0000004c Uart::Receive(unsigned long)::{lambda()#1}::operator()() const
00014ca4  w    F .text	00000030 SetUptimeFunction(unsigned long long (*)())
00010368 g     F .text	00000048 LabGPIO::LabGPIO(unsigned char, unsigned char)
0001ba64 g     O .text	00000020 __sf_fake_stderr
00012c0c  w    F .text	00000094 PixelDisplayInterface::Color_t::Color_t(bool, bool, bool, unsigned char, unsigned char, bool)
0001b564  w    O .text	00000100 Sd::kCrcTable8
00018d60 g     F .text	00000010 std::get_terminate()
00015728  w    F .text	00000074 Uart::FractionalEstimate(float, float)
00011758  w    F .text	00000088 Gpio::SetInterruptEdge(GpioInterface::Edge)
10000b90 g     O .bss	00000064 translated
000161c4  w    F .text	0000006c EnetIrqHandler
000161c4  w    F .text	0000006c DmaIrqHandler
0001010c g     F .text	00000090 InitDataSection()
00016230 g     F .text	0000005c RegisterIsr(IRQn, void (*)(), bool, long)
00000000 g       *ABS*	00000000 __base_Flash
000161c4  w    F .text	0000006c Eint1IrqHandler
10000050  w    O .data	0000000c Ssp::ssp_registers
000161c4  w    F .text	0000006c SvcHandler
00013588  w    F .text	00000158 OledTerminal::printf(char const*, ...)
000161c4  w    F .text	0000006c GpioIrqHandler
0001b8e4  w    O .text	00000007 Sd::DeleteBlock(unsigned long, unsigned long)::file
000161c4  w    F .text	0000006c SdioIrqHandler
10010000 g       *ABS*	00000000 __top_RamLoc64
10000648 g       .bss	00000000 _bss
0001b87c  w    O .text	00000007 Sd::Mount(SdInterface::CardInfo_t*)::file
000161c4  w    F .text	0000006c Pll1IrqHandler
000161c4  w    F .text	0000006c MemManageHandler
00012d30  w    F .text	00000028 PixelDisplayInterface::Disable()
00018d50 g     F .text	00000006 __cxa_pure_virtual
00013474  w    F .text	00000058 Graphics::DrawPixel(unsigned long, unsigned long)
000161c4  w    F .text	0000006c Pwm1IrqHandler
00011728  w    F .text	00000030 unsigned char util::Value<GpioInterface::Edge, unsigned char>(GpioInterface::Edge)
000161c4  w    F .text	0000006c Timer0IrqHandler
00015d30  w    F .text	000000a8 Status Wait<Uart::Receive(unsigned long)::{lambda()#1}>(unsigned long long, Uart::Receive(unsigned long)::{lambda()#1})
00012e74  w    F .text	0000002c Ssd1306::GetHeight()
00080000 g       *ABS*	00000000 __top_Flash
0001579c  w    F .text	00000084 Uart::IsDecmial(float)
0001289c  w    F .text	000001ec Ssp::SetClock(bool, bool, unsigned char, unsigned char)
00013728  w    F .text	0000009c OledTerminal::Update()
00013b00 g     F .text	00000224 EC()
10001600 g       .noinit	00000000 _end_noinit
1000079c g     O .bss	00000004 CB3
00014cd4  w    F .text	0000003c SystemTimer::DisableTimer()
00018564  w    F .text	00000120 Sd::DeleteBlock(unsigned long, unsigned long)
00016518 g     F .text	000000c8 vTaskSwitchContext
00014b00  w    F .text	00000054 unsigned long bit::Extract<unsigned long>(unsigned long, unsigned long, unsigned long)
0001088c  w    F .text	00000058 Pin::Pin(unsigned char, unsigned char)
00012500  w    F .text	00000030 unsigned char util::Value<SspInterface::MasterSlaveMode, unsigned char>(SspInterface::MasterSlaveMode)
0001b8a4  w    O .text	00000007 Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file
0001a564  w    O .text	00000004 Uart::kTxUartPortFunction
00013378  w    F .text	000000fc Graphics::DrawCharacter(long, long, char, bool)
000161c4  w    F .text	0000006c Uart3IrqHandler
00011ae0  w    F .text	00000018 SystemControllerInterface::SystemControllerInterface()
0001b8dc  w    O .text	00000007 Sd::DeleteBlock(unsigned long, unsigned long)::file
20000000 g       *ABS*	00000000 __base_RamPeriph32
00013198  w    F .text	00000094 Ssd1306::DrawPixel(long, long, PixelDisplayInterface::Color_t)
00019a5c  w    O .text	00000009 Gpio::ClearInterruptEdge(GpioInterface::Edge)::file
10001514 g     O .bss	00000004 stack_depth
0001147c  w    F .text	0000006c Gpio::Toggle()
0001b8b4  w    O .text	00000007 Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file
0001b664  w    O .text	00000200 Sd::kCrcTable16
10000670  w    O .bss	00000100 Gpio::interrupthandlers
00019178  w    F .text	00000002 .hidden __aeabi_ldiv0
000161c4  w    F .text	0000006c Timer1IrqHandler
00012ca0  w    F .text	00000068 PixelDisplayInterface::Color_t::Color_t()
000156b4  w    F .text	00000074 Uart::DividerEstimate(float, float)
00011370  w    F .text	00000064 Gpio::SetHigh()
10000778 g     O .bss	00000002 button2
000155b8  w    F .text	000000fc Uart::FindClosestFractional(float)
00012198  w    F .text	000000e4 Ssp::Ssp(Ssp::Peripheral)
000100e4 g       .text	00000000 data_section_table
00019a80  w    O .text	00000016 Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)::file
0001095c  w    F .text	00000080 Pin::SetMode(PinInterface::Mode)
00017f50  w    F .text	00000050 Sd::WaitWhileBusy()
00014e14  w    F .text	00000094 SystemTimer::SetTickFrequency(unsigned long)
0001ba84 g     O .text	00000020 __sf_fake_stdin
00014b54  w    F .text	00000074 unsigned long bit::Insert<unsigned long, bool>(unsigned long, bool, unsigned long, unsigned long)
000102fc g       .text	00000000 __CRP_WORD_START__
0001a548  w    O .text	00000010 Timer::kTimerIsr
00012f98  w    F .text	000000f0 Ssd1306::InitializationPanel()
00011868  w    F .text	00000048 Gpio::AttachInterrupt(void (*)(), GpioInterface::Edge)
000161c4  w    F .text	0000006c Uart1IrqHandler
00011234  w    F .text	0000007c Gpio::SetAsInput()
00016480 g     F .text	00000028 __cyg_profile_func_enter
000191d4 g     F .text	00000010 memset
000138d8 g     F .text	0000009c main
00017a3c  w    F .text	000000a0 Sd::Sd(Sd::DebugSdCard_t, unsigned char, unsigned char, unsigned char, unsigned char)
10000774 g     O .bss	00000002 led3
10000020  w    O .data	00000028 Gpio::interrupt
1000078c g     O .bss	00000002 led0
00014ed8  w    F .text	00000020 Timer::DoNothingIsr()
000161c4  w    F .text	0000006c QeiIrqHandler
20000000 g       *ABS*	00000000 heap
000161c4  w    F .text	0000006c Ssp2IrqHandler
00010e6c  w    F .text	0000002c Pin::GetPort() const
000183b8  w    F .text	000001ac Sd::WriteBlock(unsigned long, unsigned char const*, unsigned long)
0001088c  w    F .text	00000058 Pin::Pin(unsigned char, unsigned char)
00018ddc g     F .text	0000009e .hidden __truncdfsf2
0001031c g       .text	00000000 __init_array_end
000165e0 g     F .text	00000026 vPortSVCHandler
00016304 g     F .text	0000003c FirmwareStdOut(int)
0001b8fc  w    O .text	0000002c vtable for Sd
000117e0  w    F .text	00000088 Gpio::ClearInterruptEdge(GpioInterface::Edge)
000161c4  w    F .text	0000006c Ssp1IrqHandler
00015b98  w    F .text	0000003c void Timer::TimerHandler<(TimerInterface::TimerPort)0>()
10000460 g     O .data	00000004 translated_count
00019b2c  w    O .text	0000000c Ssp::kPowerBit
10000770 g     O .bss	00000002 button3
00010e98  w    F .text	0000002c Pin::GetPin() const
00015190  w    F .text	000000cc Uart::SetBaudRate(unsigned long)
00013d24 g     F .text	00000c3c morse_translate()
0001a588  w    O .text	0000003c vtable for Uart
0001132c  w    F .text	00000044 Gpio::SetDirection(GpioInterface::Direction)
000112b0  w    F .text	0000007c Gpio::SetAsOutput()
0001b8c4  w    O .text	00000007 Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file
00011ea4  w    F .text	00000170 Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)
0001386c  w    F .text	0000006c OledTerminal::OledTerminal()
000113d4  w    F .text	00000064 Gpio::SetLow()
00019c40  w    O .text	00000024 vtable for Lpc40xxSystemController
00017fa0  w    F .text	00000418 Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)
0001b8ec  w    O .text	00000007 Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)::file
00019a68  w    O .text	00000016 Lpc40xxSystemController::SetPeripheralClockDivider(unsigned char)::file
00015b4c g     F .text	0000001a SystemInit
00014ef8  w    F .text	00000134 Timer::Initialize(unsigned long, void (*)(), long)
10000bf4 g     O .bss	000007c8 oled_terminal
00011c70  w    F .text	00000030 Lpc40xxSystemController::PowerUpPeripheral(SystemControllerInterface::PeripheralID const&)
20008000 g       *ABS*	00000000 heap_end
0001227c  w    F .text	000000e4 Ssp::Initialize()
0001a5c4  w    O .text	00000038 vtable for Timer
100007a4 g     O .bss	00000004 count
0001210c  w    F .text	00000038 PinInterface::PinInterface(PinInterface const&)
10000468  w    O .data	00000010 Timer::tim_register
000161c4  w    F .text	0000006c Ssp0IrqHandler
00010368 g     F .text	00000048 LabGPIO::LabGPIO(unsigned char, unsigned char)
0001031c g     F .text	00000000 _fini
000161c4  w    F .text	0000006c UsbactivityIrqHandler
00011438  w    F .text	00000044 Gpio::Set(GpioInterface::State)
000161c4  w    F .text	0000006c Pll0IrqHandler
00012144  w    F .text	00000054 Pin::Pin(Pin const&)
000100fc g       .text	00000000 data_section_table_end
000161c4  w    F .text	0000006c CanactivityIrqHandler
000161c4  w    F .text	0000006c NmiHandler
00012ca0  w    F .text	00000068 PixelDisplayInterface::Color_t::Color_t()
00012d58  w    F .text	00000028 PixelDisplayInterface::Update()
00019ae4  w    O .text	00000048 Ssp::kSspPinMatrix
0001310c  w    F .text	00000054 Ssd1306::SetHorizontalAddressMode()
000114e8  w    F .text	00000078 Gpio::ReadState()
0001b88c  w    O .text	00000007 Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file
10000798 g     O .bss	00000004 CB2
100005e0 g     O .data	00000004 _impure_ptr
00014960  w    F .text	000000ac Status Wait<Wait(unsigned long long)::{lambda()#1}>(unsigned long long, Wait(unsigned long long)::{lambda()#1})
10000000 g       .uninit_RESERVED	00000000 _end_uninit_RESERVED
00018b6c  w    F .text	00000070 Sd::GetCrc7(unsigned char*, unsigned char)
00013088  w    F .text	00000084 Ssd1306::Initialize()
000161c4  w    F .text	0000006c McpwmIrqHandler
0001030c g       .text	00000000 __preinit_array_end
000161c4  w    F .text	0000006c WdtIrqHandler
00011038  w    F .text	0000002c Wait(unsigned long long)::{lambda()#1}::operator()() const
00018684  w    F .text	000004a0 Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)
00011af8  w    F .text	00000024 Lpc40xxSystemController::Lpc40xxSystemController()
00019d18  w    O .text	0000003c vtable for Pin
00013160  w    F .text	00000038 Ssd1306::Clear()
10000000 g       .data	00000000 _data
00010a50  w    F .text	00000074 Pin::SetAsActiveLow(bool)
00011d04  w    F .text	00000030 Lpc40xxSystemController::SelectMainClockSource(Lpc40xxSystemController::MainClockSource)
000118f0  w    F .text	0000007c Gpio::SetEdgeRising()
0001b86c  w    O .text	00000007 Sd::Mount(SdInterface::CardInfo_t*)::file
00014ea8  w    F .text	00000030 unsigned char util::Value<TimerInterface::TimerPort, unsigned char>(TimerInterface::TimerPort)
10001400  w    O .bss	00000010 Timer::user_timer_isr
00012d08  w    F .text	00000028 PixelDisplayInterface::Enable()
00019a98  w    O .text	00000016 Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)::file
100013c0  w    O .bss	00000040 Timer::match
00010480 g     F .text	000000d0 LabGPIO::SetLow()
00015340  w    F .text	0000004c Uart::Send(unsigned char)::{lambda()#1}::operator()() const
00019ba0  w    O .text	0000002c vtable for PixelDisplayInterface
00017b8c  w    F .text	0000031c Sd::Mount(SdInterface::CardInfo_t*)
100005dc g     O .data	00000004 __cxxabiv1::__terminate_handler
10000780 g     O .bss	00000002 button1
00019c64  w    O .text	00000024 vtable for SystemControllerInterface
00019c88  w    O .text	00000048 vtable for Gpio
10000644 g       .data	00000000 _edata
0001a534  w    O .text	00000010 Timer::kPowerbit
00015bd4  w    F .text	0000003c void Timer::TimerHandler<(TimerInterface::TimerPort)1>()
000109dc  w    F .text	00000074 Pin::EnableHysteresis(bool)
00011184  w    F .text	00000034 GpioInterface::GpioInterface()
00010674 g     F .text	00000118 LabGPIO::toggle()
00012c0c  w    F .text	00000094 PixelDisplayInterface::Color_t::Color_t(bool, bool, bool, unsigned char, unsigned char, bool)
000161c4  w    F .text	0000006c DebugMonHandler
000115fc  w    F .text	0000007c Gpio::ValidPortCheck()
000161c4  w    F .text	0000006c Eint2IrqHandler
20008000 g       *ABS*	00000000 __top_RamPeriph32
00012198  w    F .text	000000e4 Ssp::Ssp(Ssp::Peripheral)
10000790 g     O .bss	00000004 CB0
000161c4  w    F .text	0000006c Timer3IrqHandler
000103b0 g     F .text	000000d0 LabGPIO::SetHigh()
00012d80  w    F .text	00000034 PixelDisplayInterface::PixelDisplayInterface()
10000000 g       *ABS*	00000000 __base_RAM
000161c4  w    F .text	0000006c Eint3IrqHandler
00018d56 g     F .text	00000008 __cxxabiv1::__terminate(void (*)())
0001637c g     F .text	00000030 _kill
000161c4  w    F .text	0000006c I2c0IrqHandler
00012144  w    F .text	00000054 Pin::Pin(Pin const&)
0001a558  w    O .text	0000000a Timer::Initialize(unsigned long, void (*)(), long)::file
00014d10  w    F .text	00000034 SystemTimer::SystemTimerHandler()
0001b874  w    O .text	00000007 Sd::Mount(SdInterface::CardInfo_t*)::file
1000045c g     O .data	00000004 word_count
0001baa4 g     O .text	00000020 __sf_fake_stdout
00010ec4  w    F .text	00000100 debug::PrintBacktrace(bool, void*)
0001030c g       .text	00000000 __init_array_start
00019178  w    F .text	00000002 .hidden __aeabi_idiv0
0001b928  w    O .text	0000002c vtable for SdInterface
00017adc  w    F .text	000000b0 Sd::Initialize()
00016340 g     F .text	00000018 _exit
00010bbc  w    F .text	00000074 Pin::EnableFastMode(bool)
00015dd8  w    F .text	000000a0 void Timer::ClearInterrupts<(TimerInterface::TimerPort)0>()
000161c4  w    F .text	0000006c Eint0IrqHandler
00014d78  w    F .text	0000009c SystemTimer::StartTimer()
000124d0  w    F .text	00000030 unsigned char util::Value<SspInterface::FrameMode, unsigned char>(SspInterface::FrameMode)
0001019c g     F .text	00000060 InitBssSection()
000111b8  w    F .text	0000007c Gpio::Gpio(unsigned char, unsigned char)
00015a50 g     F .text	00000040 UptimeRTOS
00012d80  w    F .text	00000034 PixelDisplayInterface::PixelDisplayInterface()
0001332c  w    F .text	0000004c Graphics::Initialize()
00010d20  w    F .text	00000074 Pin::SetAsOpenDrain(bool)
100007a8 g     O .bss	000003e8 morse
0001a5fc  w    O .text	00000038 vtable for SystemTimer
000161c4  w    F .text	0000006c SpiIrqHandler
0001b8ac  w    O .text	00000007 Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file
00012444  w    F .text	0000005c Ssp::SetSpiMasterDefault()
10000488  w    O .data	00000040 Uart::pairs
00011ae0  w    F .text	00000018 SystemControllerInterface::SystemControllerInterface()
00011ca0  w    F .text	00000030 Lpc40xxSystemController::PowerDownPeripheral(SystemControllerInterface::PeripheralID const&)
00017a08  w    F .text	00000034 SdInterface::SdInterface()
0001030c g       .text	00000000 __preinit_array_start
00019ab0  w    O .text	00000016 Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)::file
00011cd0  w    F .text	00000034 Lpc40xxSystemController::SelectOscillatorSource(Lpc40xxSystemController::OscillatorSource)
10001410  w    O .bss	00000004 guard variable for Timer::match
00012530  w    F .text	0000020c Ssp::SetPeripheralMode(SspInterface::MasterSlaveMode, SspInterface::FrameMode, SspInterface::DataSize)
000108e4  w    F .text	00000078 Pin::SetPinFunction(unsigned char)
1000077c g     O .bss	00000002 led2
00014a8c  w    F .text	00000074 unsigned long bit::Insert<unsigned long, unsigned char>(unsigned long, unsigned char, unsigned long, unsigned long)
00010858  w    F .text	00000034 PinInterface::PinInterface()
10000788 g     O .bss	00000002 button0
00011bac  w    F .text	00000058 Lpc40xxSystemController::SetPeripheralClockDivider(unsigned char)
000111b8  w    F .text	0000007c Gpio::Gpio(unsigned char, unsigned char)
00015c4c  w    F .text	0000003c void Timer::TimerHandler<(TimerInterface::TimerPort)3>()
00019234 g     F .text	00000010 raise



Disassembly of section .text:

00010000 <kInterruptVectorTable>:
   10000:	00 00 01 10 69 5b 01 00 c5 61 01 00 19 02 01 00     ....i[...a......
   10010:	c5 61 01 00 c5 61 01 00 c5 61 01 00 6a 1b f7 ef     .a...a...a..j...
	...
   1002c:	e1 65 01 00 c5 61 01 00 00 00 00 00 11 66 01 00     .e...a.......f..
   1003c:	c5 61 01 00 c5 61 01 00 c5 61 01 00 c5 61 01 00     .a...a...a...a..
   1004c:	c5 61 01 00 c5 61 01 00 c5 61 01 00 c5 61 01 00     .a...a...a...a..
   1005c:	c5 61 01 00 c5 61 01 00 c5 61 01 00 c5 61 01 00     .a...a...a...a..
   1006c:	c5 61 01 00 c5 61 01 00 00 00 00 00 c5 61 01 00     .a...a.......a..
   1007c:	c5 61 01 00 c5 61 01 00 c5 61 01 00 c5 61 01 00     .a...a...a...a..
   1008c:	c5 61 01 00 c5 61 01 00 c5 61 01 00 c5 61 01 00     .a...a...a...a..
   1009c:	c5 61 01 00 c5 61 01 00 c5 61 01 00 c5 61 01 00     .a...a...a...a..
   100ac:	c5 61 01 00 c5 61 01 00 c5 61 01 00 c5 61 01 00     .a...a...a...a..
   100bc:	c5 61 01 00 c5 61 01 00 c5 61 01 00 c5 61 01 00     .a...a...a...a..
   100cc:	c5 61 01 00 c5 61 01 00 c5 61 01 00 c5 61 01 00     .a...a...a...a..
   100dc:	c5 61 01 00 c5 61 01 00                             .a...a..

000100e4 <data_section_table>:
   100e4:	0001bacc 	.word	0x0001bacc
   100e8:	10000000 	.word	0x10000000
   100ec:	00000644 	.word	0x00000644
   100f0:	0001bacc 	.word	0x0001bacc
   100f4:	20000000 	.word	0x20000000
   100f8:	00000000 	.word	0x00000000

000100fc <bss_section_table>:
   100fc:	10000648 	.word	0x10000648
   10100:	00000fb8 	.word	0x00000fb8
   10104:	20000000 	.word	0x20000000
   10108:	00000000 	.word	0x00000000

0001010c <InitDataSection()>:
SJ2_IGNORE_STACK_TRACE(void SystemInit());

// Functions to carry out the initialization of RW and BSS data sections.
SJ2_SECTION(".after_vectors")
void InitDataSection()
{
   1010c:	b086      	sub	sp, #24
  for (int i = 0; &data_section_table[i] < &data_section_table_end; i++)
   1010e:	2300      	movs	r3, #0
   10110:	9305      	str	r3, [sp, #20]
   10112:	9a05      	ldr	r2, [sp, #20]
   10114:	4613      	mov	r3, r2
   10116:	005b      	lsls	r3, r3, #1
   10118:	4413      	add	r3, r2
   1011a:	009b      	lsls	r3, r3, #2
   1011c:	4a1d      	ldr	r2, [pc, #116]	; (10194 <InitDataSection()+0x88>)
   1011e:	4413      	add	r3, r2
   10120:	4a1d      	ldr	r2, [pc, #116]	; (10198 <InitDataSection()+0x8c>)
   10122:	4293      	cmp	r3, r2
   10124:	d233      	bcs.n	1018e <InitDataSection()+0x82>
  {
    uint32_t * rom_location = data_section_table[i].rom_location;
   10126:	491b      	ldr	r1, [pc, #108]	; (10194 <InitDataSection()+0x88>)
   10128:	9a05      	ldr	r2, [sp, #20]
   1012a:	4613      	mov	r3, r2
   1012c:	005b      	lsls	r3, r3, #1
   1012e:	4413      	add	r3, r2
   10130:	009b      	lsls	r3, r3, #2
   10132:	440b      	add	r3, r1
   10134:	681b      	ldr	r3, [r3, #0]
   10136:	9303      	str	r3, [sp, #12]
    uint32_t * ram_location = data_section_table[i].ram_location;
   10138:	4916      	ldr	r1, [pc, #88]	; (10194 <InitDataSection()+0x88>)
   1013a:	9a05      	ldr	r2, [sp, #20]
   1013c:	4613      	mov	r3, r2
   1013e:	005b      	lsls	r3, r3, #1
   10140:	4413      	add	r3, r2
   10142:	009b      	lsls	r3, r3, #2
   10144:	440b      	add	r3, r1
   10146:	685b      	ldr	r3, [r3, #4]
   10148:	9302      	str	r3, [sp, #8]
    uint32_t length         = data_section_table[i].length;
   1014a:	4912      	ldr	r1, [pc, #72]	; (10194 <InitDataSection()+0x88>)
   1014c:	9a05      	ldr	r2, [sp, #20]
   1014e:	4613      	mov	r3, r2
   10150:	005b      	lsls	r3, r3, #1
   10152:	4413      	add	r3, r2
   10154:	009b      	lsls	r3, r3, #2
   10156:	440b      	add	r3, r1
   10158:	3308      	adds	r3, #8
   1015a:	681b      	ldr	r3, [r3, #0]
   1015c:	9301      	str	r3, [sp, #4]
    for (size_t j = 0; j < length; j++)
   1015e:	2300      	movs	r3, #0
   10160:	9304      	str	r3, [sp, #16]
   10162:	9a04      	ldr	r2, [sp, #16]
   10164:	9b01      	ldr	r3, [sp, #4]
   10166:	429a      	cmp	r2, r3
   10168:	d20d      	bcs.n	10186 <InitDataSection()+0x7a>
    {
      ram_location[j] = rom_location[j];
   1016a:	9b04      	ldr	r3, [sp, #16]
   1016c:	009b      	lsls	r3, r3, #2
   1016e:	9a03      	ldr	r2, [sp, #12]
   10170:	441a      	add	r2, r3
   10172:	9b04      	ldr	r3, [sp, #16]
   10174:	009b      	lsls	r3, r3, #2
   10176:	9902      	ldr	r1, [sp, #8]
   10178:	440b      	add	r3, r1
   1017a:	6812      	ldr	r2, [r2, #0]
   1017c:	601a      	str	r2, [r3, #0]
    for (size_t j = 0; j < length; j++)
   1017e:	9b04      	ldr	r3, [sp, #16]
   10180:	3301      	adds	r3, #1
   10182:	9304      	str	r3, [sp, #16]
   10184:	e7ed      	b.n	10162 <InitDataSection()+0x56>
  for (int i = 0; &data_section_table[i] < &data_section_table_end; i++)
   10186:	9b05      	ldr	r3, [sp, #20]
   10188:	3301      	adds	r3, #1
   1018a:	9305      	str	r3, [sp, #20]
   1018c:	e7c1      	b.n	10112 <InitDataSection()+0x6>
    }
  }
}
   1018e:	bf00      	nop
   10190:	b006      	add	sp, #24
   10192:	4770      	bx	lr
   10194:	000100e4 	.word	0x000100e4
   10198:	000100fc 	.word	0x000100fc

0001019c <InitBssSection()>:

// Functions to initialization BSS data sections. This is important because
// the std c libs assume that BSS is set to zero.
SJ2_SECTION(".after_vectors")
void InitBssSection()
{
   1019c:	b084      	sub	sp, #16
  for (int i = 0; &bss_section_table[i] < &bss_section_table_end; i++)
   1019e:	2300      	movs	r3, #0
   101a0:	9303      	str	r3, [sp, #12]
   101a2:	9b03      	ldr	r3, [sp, #12]
   101a4:	00db      	lsls	r3, r3, #3
   101a6:	4a13      	ldr	r2, [pc, #76]	; (101f4 <InitBssSection()+0x58>)
   101a8:	4413      	add	r3, r2
   101aa:	4a13      	ldr	r2, [pc, #76]	; (101f8 <InitBssSection()+0x5c>)
   101ac:	4293      	cmp	r3, r2
   101ae:	d21e      	bcs.n	101ee <InitBssSection()+0x52>
  {
    uint32_t * ram_location = bss_section_table[i].ram_location;
   101b0:	4a10      	ldr	r2, [pc, #64]	; (101f4 <InitBssSection()+0x58>)
   101b2:	9b03      	ldr	r3, [sp, #12]
   101b4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
   101b8:	9301      	str	r3, [sp, #4]
    uint32_t length         = bss_section_table[i].length;
   101ba:	4a0e      	ldr	r2, [pc, #56]	; (101f4 <InitBssSection()+0x58>)
   101bc:	9b03      	ldr	r3, [sp, #12]
   101be:	00db      	lsls	r3, r3, #3
   101c0:	4413      	add	r3, r2
   101c2:	685b      	ldr	r3, [r3, #4]
   101c4:	9300      	str	r3, [sp, #0]
    for (size_t j = 0; j < length; j++)
   101c6:	2300      	movs	r3, #0
   101c8:	9302      	str	r3, [sp, #8]
   101ca:	9a02      	ldr	r2, [sp, #8]
   101cc:	9b00      	ldr	r3, [sp, #0]
   101ce:	429a      	cmp	r2, r3
   101d0:	d209      	bcs.n	101e6 <InitBssSection()+0x4a>
    {
      ram_location[j] = 0;
   101d2:	9b02      	ldr	r3, [sp, #8]
   101d4:	009b      	lsls	r3, r3, #2
   101d6:	9a01      	ldr	r2, [sp, #4]
   101d8:	4413      	add	r3, r2
   101da:	2200      	movs	r2, #0
   101dc:	601a      	str	r2, [r3, #0]
    for (size_t j = 0; j < length; j++)
   101de:	9b02      	ldr	r3, [sp, #8]
   101e0:	3301      	adds	r3, #1
   101e2:	9302      	str	r3, [sp, #8]
   101e4:	e7f1      	b.n	101ca <InitBssSection()+0x2e>
  for (int i = 0; &bss_section_table[i] < &bss_section_table_end; i++)
   101e6:	9b03      	ldr	r3, [sp, #12]
   101e8:	3301      	adds	r3, #1
   101ea:	9303      	str	r3, [sp, #12]
   101ec:	e7d9      	b.n	101a2 <InitBssSection()+0x6>
    }
  }
}
   101ee:	bf00      	nop
   101f0:	b004      	add	sp, #16
   101f2:	4770      	bx	lr
   101f4:	000100fc 	.word	0x000100fc
   101f8:	0001010c 	.word	0x0001010c

000101fc <InitFpu()>:
      // Write back the modified value to the CPACR
      "STR     R1, [R0]\n"
      // Wait for store to complete
      "DSB\n"
      // reset pipeline now the FPU is enabled
      "ISB\n");
   101fc:	f8df 0014 	ldr.w	r0, [pc, #20]	; 10214 <InitFpu()+0x18>
   10200:	6801      	ldr	r1, [r0, #0]
   10202:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   10206:	6001      	str	r1, [r0, #0]
   10208:	f3bf 8f4f 	dsb	sy
   1020c:	f3bf 8f6f 	isb	sy
}
   10210:	bf00      	nop
   10212:	4770      	bx	lr
   10214:	e000ed88 	.word	0xe000ed88

00010218 <HardFaultHandler>:
      " mrseq r0, msp                                       \n"
      " mrsne r0, psp                                       \n"
      " ldr r1, [r0, #24]                                   \n"
      " ldr r2, handler2_address_const                      \n"
      " bx r2                                               \n"
      " handler2_address_const: .word GetRegistersFromStack \n");
   10218:	f01e 0f04 	tst.w	lr, #4
   1021c:	bf0c      	ite	eq
   1021e:	f3ef 8008 	mrseq	r0, MSP
   10222:	f3ef 8009 	mrsne	r0, PSP
   10226:	6981      	ldr	r1, [r0, #24]
   10228:	4a00      	ldr	r2, [pc, #0]	; (1022c <handler2_address_const>)
   1022a:	4710      	bx	r2

0001022c <handler2_address_const>:
   1022c:	0001628d 	.word	0x0001628d
#endif
}
   10230:	bf00      	nop
   10232:	4770      	bx	lr
   10234:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   10238:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   1023c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   10240:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   10244:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   10248:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   1024c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   10250:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   10254:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   10258:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   1025c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   10260:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   10264:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   10268:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   1026c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   10270:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   10274:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   10278:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   1027c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   10280:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   10284:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   10288:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   1028c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   10290:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   10294:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   10298:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   1029c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102a0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102a4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102a8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102ac:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102b0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102b4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102b8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102bc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102c0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102c4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102c8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102cc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102d0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102d4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102d8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102dc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102e0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102e4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102e8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102ec:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102f0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102f4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102f8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

000102fc <__CRP_WORD_START__>:
   102fc:	ffffffff 	.word	0xffffffff

00010300 <_init>:
   10300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10302:	bf00      	nop
   10304:	bcf8      	pop	{r3, r4, r5, r6, r7}
   10306:	bc08      	pop	{r3}
   10308:	469e      	mov	lr, r3
   1030a:	4770      	bx	lr

0001030c <__init_array_start>:
   1030c:	0001034d 	.word	0x0001034d
   10310:	00014c7d 	.word	0x00014c7d
   10314:	00016135 	.word	0x00016135
   10318:	00018d29 	.word	0x00018d29

0001031c <_fini>:
   1031c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1031e:	bf00      	nop
   10320:	bcf8      	pop	{r3, r4, r5, r6, r7}
   10322:	bc08      	pop	{r3}
   10324:	469e      	mov	lr, r3
   10326:	4770      	bx	lr

00010328 <__do_global_dtors_aux>:
   10328:	b510      	push	{r4, lr}
   1032a:	4c05      	ldr	r4, [pc, #20]	; (10340 <__do_global_dtors_aux+0x18>)
   1032c:	7823      	ldrb	r3, [r4, #0]
   1032e:	b933      	cbnz	r3, 1033e <__do_global_dtors_aux+0x16>
   10330:	4b04      	ldr	r3, [pc, #16]	; (10344 <__do_global_dtors_aux+0x1c>)
   10332:	b113      	cbz	r3, 1033a <__do_global_dtors_aux+0x12>
   10334:	4804      	ldr	r0, [pc, #16]	; (10348 <__do_global_dtors_aux+0x20>)
   10336:	f3af 8000 	nop.w
   1033a:	2301      	movs	r3, #1
   1033c:	7023      	strb	r3, [r4, #0]
   1033e:	bd10      	pop	{r4, pc}
   10340:	10000648 	.word	0x10000648
   10344:	00000000 	.word	0x00000000
   10348:	0001bacc 	.word	0x0001bacc

0001034c <frame_dummy>:
   1034c:	b508      	push	{r3, lr}
   1034e:	4b03      	ldr	r3, [pc, #12]	; (1035c <frame_dummy+0x10>)
   10350:	b11b      	cbz	r3, 1035a <frame_dummy+0xe>
   10352:	4903      	ldr	r1, [pc, #12]	; (10360 <frame_dummy+0x14>)
   10354:	4803      	ldr	r0, [pc, #12]	; (10364 <frame_dummy+0x18>)
   10356:	f3af 8000 	nop.w
   1035a:	bd08      	pop	{r3, pc}
   1035c:	00000000 	.word	0x00000000
   10360:	1000064c 	.word	0x1000064c
   10364:	0001bacc 	.word	0x0001bacc

00010368 <LabGPIO::LabGPIO(unsigned char, unsigned char)>:
#include "LabGPIO.hpp"
 
  LabGPIO::LabGPIO(uint8_t port, uint8_t pin){
   10368:	b530      	push	{r4, r5, lr}
   1036a:	b083      	sub	sp, #12
   1036c:	4675      	mov	r5, lr
   1036e:	9001      	str	r0, [sp, #4]
   10370:	460b      	mov	r3, r1
   10372:	f88d 3003 	strb.w	r3, [sp, #3]
   10376:	4613      	mov	r3, r2
   10378:	f88d 3002 	strb.w	r3, [sp, #2]
   1037c:	462b      	mov	r3, r5
   1037e:	4619      	mov	r1, r3
   10380:	480a      	ldr	r0, [pc, #40]	; (103ac <LabGPIO::LabGPIO(unsigned char, unsigned char)+0x44>)
   10382:	f006 f87d 	bl	16480 <__cyg_profile_func_enter>
    SelPort = port;
   10386:	9b01      	ldr	r3, [sp, #4]
   10388:	f89d 2003 	ldrb.w	r2, [sp, #3]
   1038c:	701a      	strb	r2, [r3, #0]
    SelPin = pin;
   1038e:	9b01      	ldr	r3, [sp, #4]
   10390:	f89d 2002 	ldrb.w	r2, [sp, #2]
   10394:	705a      	strb	r2, [r3, #1]
 
  }
   10396:	9c01      	ldr	r4, [sp, #4]
   10398:	462b      	mov	r3, r5
   1039a:	4619      	mov	r1, r3
   1039c:	4803      	ldr	r0, [pc, #12]	; (103ac <LabGPIO::LabGPIO(unsigned char, unsigned char)+0x44>)
   1039e:	f006 f883 	bl	164a8 <__cyg_profile_func_exit>
   103a2:	4623      	mov	r3, r4
   103a4:	4618      	mov	r0, r3
   103a6:	b003      	add	sp, #12
   103a8:	bd30      	pop	{r4, r5, pc}
   103aa:	bf00      	nop
   103ac:	00010369 	.word	0x00010369

000103b0 <LabGPIO::SetHigh()>:
    break;
  }
 
  }

  void LabGPIO::SetHigh(){
   103b0:	b510      	push	{r4, lr}
   103b2:	b082      	sub	sp, #8
   103b4:	4674      	mov	r4, lr
   103b6:	9001      	str	r0, [sp, #4]
   103b8:	4623      	mov	r3, r4
   103ba:	4619      	mov	r1, r3
   103bc:	4829      	ldr	r0, [pc, #164]	; (10464 <LabGPIO::SetHigh()+0xb4>)
   103be:	f006 f85f 	bl	16480 <__cyg_profile_func_enter>
       /// Set voltage of pin to HIGH
     switch(SelPort){
   103c2:	9b01      	ldr	r3, [sp, #4]
   103c4:	781b      	ldrb	r3, [r3, #0]
   103c6:	2b05      	cmp	r3, #5
   103c8:	d844      	bhi.n	10454 <LabGPIO::SetHigh()+0xa4>
   103ca:	a201      	add	r2, pc, #4	; (adr r2, 103d0 <LabGPIO::SetHigh()+0x20>)
   103cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   103d0:	000103e9 	.word	0x000103e9
   103d4:	000103fb 	.word	0x000103fb
   103d8:	0001040d 	.word	0x0001040d
   103dc:	0001041f 	.word	0x0001041f
   103e0:	00010431 	.word	0x00010431
   103e4:	00010443 	.word	0x00010443
    case 0:
       LPC_GPIO0-> SET = (1<<SelPin);
   103e8:	9b01      	ldr	r3, [sp, #4]
   103ea:	785b      	ldrb	r3, [r3, #1]
   103ec:	461a      	mov	r2, r3
   103ee:	2301      	movs	r3, #1
   103f0:	fa03 f202 	lsl.w	r2, r3, r2
   103f4:	4b1c      	ldr	r3, [pc, #112]	; (10468 <LabGPIO::SetHigh()+0xb8>)
   103f6:	619a      	str	r2, [r3, #24]
       break;
   103f8:	e02c      	b.n	10454 <LabGPIO::SetHigh()+0xa4>
    case 1:
       LPC_GPIO1-> SET = (1<<SelPin);
   103fa:	9b01      	ldr	r3, [sp, #4]
   103fc:	785b      	ldrb	r3, [r3, #1]
   103fe:	461a      	mov	r2, r3
   10400:	2301      	movs	r3, #1
   10402:	fa03 f202 	lsl.w	r2, r3, r2
   10406:	4b19      	ldr	r3, [pc, #100]	; (1046c <LabGPIO::SetHigh()+0xbc>)
   10408:	619a      	str	r2, [r3, #24]
       break;
   1040a:	e023      	b.n	10454 <LabGPIO::SetHigh()+0xa4>
    case 2:
       LPC_GPIO2-> SET = (1<<SelPin);
   1040c:	9b01      	ldr	r3, [sp, #4]
   1040e:	785b      	ldrb	r3, [r3, #1]
   10410:	461a      	mov	r2, r3
   10412:	2301      	movs	r3, #1
   10414:	fa03 f202 	lsl.w	r2, r3, r2
   10418:	4b15      	ldr	r3, [pc, #84]	; (10470 <LabGPIO::SetHigh()+0xc0>)
   1041a:	619a      	str	r2, [r3, #24]
       break;
   1041c:	e01a      	b.n	10454 <LabGPIO::SetHigh()+0xa4>
    case 3:
       LPC_GPIO3-> SET = (1<<SelPin);
   1041e:	9b01      	ldr	r3, [sp, #4]
   10420:	785b      	ldrb	r3, [r3, #1]
   10422:	461a      	mov	r2, r3
   10424:	2301      	movs	r3, #1
   10426:	fa03 f202 	lsl.w	r2, r3, r2
   1042a:	4b12      	ldr	r3, [pc, #72]	; (10474 <LabGPIO::SetHigh()+0xc4>)
   1042c:	619a      	str	r2, [r3, #24]
       break;   
   1042e:	e011      	b.n	10454 <LabGPIO::SetHigh()+0xa4>
    case 4:
       LPC_GPIO4-> SET = (1<<SelPin);
   10430:	9b01      	ldr	r3, [sp, #4]
   10432:	785b      	ldrb	r3, [r3, #1]
   10434:	461a      	mov	r2, r3
   10436:	2301      	movs	r3, #1
   10438:	fa03 f202 	lsl.w	r2, r3, r2
   1043c:	4b0e      	ldr	r3, [pc, #56]	; (10478 <LabGPIO::SetHigh()+0xc8>)
   1043e:	619a      	str	r2, [r3, #24]
        break;
   10440:	e008      	b.n	10454 <LabGPIO::SetHigh()+0xa4>
    case 5:
       LPC_GPIO5-> SET = (1<<SelPin);
   10442:	9b01      	ldr	r3, [sp, #4]
   10444:	785b      	ldrb	r3, [r3, #1]
   10446:	461a      	mov	r2, r3
   10448:	2301      	movs	r3, #1
   1044a:	fa03 f202 	lsl.w	r2, r3, r2
   1044e:	4b0b      	ldr	r3, [pc, #44]	; (1047c <LabGPIO::SetHigh()+0xcc>)
   10450:	619a      	str	r2, [r3, #24]
       break;
   10452:	bf00      	nop
   10454:	4623      	mov	r3, r4
   10456:	4619      	mov	r1, r3
   10458:	4802      	ldr	r0, [pc, #8]	; (10464 <LabGPIO::SetHigh()+0xb4>)
   1045a:	f006 f825 	bl	164a8 <__cyg_profile_func_exit>
  }
  }
   1045e:	bf00      	nop
   10460:	b002      	add	sp, #8
   10462:	bd10      	pop	{r4, pc}
   10464:	000103b1 	.word	0x000103b1
   10468:	20098000 	.word	0x20098000
   1046c:	20098020 	.word	0x20098020
   10470:	20098040 	.word	0x20098040
   10474:	20098060 	.word	0x20098060
   10478:	20098080 	.word	0x20098080
   1047c:	200980a0 	.word	0x200980a0

00010480 <LabGPIO::SetLow()>:
  void LabGPIO::SetLow(){
   10480:	b510      	push	{r4, lr}
   10482:	b082      	sub	sp, #8
   10484:	4674      	mov	r4, lr
   10486:	9001      	str	r0, [sp, #4]
   10488:	4623      	mov	r3, r4
   1048a:	4619      	mov	r1, r3
   1048c:	4829      	ldr	r0, [pc, #164]	; (10534 <LabGPIO::SetLow()+0xb4>)
   1048e:	f005 fff7 	bl	16480 <__cyg_profile_func_enter>
        /// Set voltage of pin to LOW 
    switch(SelPort){
   10492:	9b01      	ldr	r3, [sp, #4]
   10494:	781b      	ldrb	r3, [r3, #0]
   10496:	2b05      	cmp	r3, #5
   10498:	d844      	bhi.n	10524 <LabGPIO::SetLow()+0xa4>
   1049a:	a201      	add	r2, pc, #4	; (adr r2, 104a0 <LabGPIO::SetLow()+0x20>)
   1049c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   104a0:	000104b9 	.word	0x000104b9
   104a4:	000104cb 	.word	0x000104cb
   104a8:	000104dd 	.word	0x000104dd
   104ac:	000104ef 	.word	0x000104ef
   104b0:	00010501 	.word	0x00010501
   104b4:	00010513 	.word	0x00010513
    case 0:
       LPC_GPIO0-> CLR = (1<<SelPin);
   104b8:	9b01      	ldr	r3, [sp, #4]
   104ba:	785b      	ldrb	r3, [r3, #1]
   104bc:	461a      	mov	r2, r3
   104be:	2301      	movs	r3, #1
   104c0:	fa03 f202 	lsl.w	r2, r3, r2
   104c4:	4b1c      	ldr	r3, [pc, #112]	; (10538 <LabGPIO::SetLow()+0xb8>)
   104c6:	61da      	str	r2, [r3, #28]
       break;
   104c8:	e02c      	b.n	10524 <LabGPIO::SetLow()+0xa4>
    case 1:
       LPC_GPIO1-> CLR = (1<<SelPin);
   104ca:	9b01      	ldr	r3, [sp, #4]
   104cc:	785b      	ldrb	r3, [r3, #1]
   104ce:	461a      	mov	r2, r3
   104d0:	2301      	movs	r3, #1
   104d2:	fa03 f202 	lsl.w	r2, r3, r2
   104d6:	4b19      	ldr	r3, [pc, #100]	; (1053c <LabGPIO::SetLow()+0xbc>)
   104d8:	61da      	str	r2, [r3, #28]
       break;
   104da:	e023      	b.n	10524 <LabGPIO::SetLow()+0xa4>
    case 2:
       LPC_GPIO2-> CLR = (1<<SelPin);
   104dc:	9b01      	ldr	r3, [sp, #4]
   104de:	785b      	ldrb	r3, [r3, #1]
   104e0:	461a      	mov	r2, r3
   104e2:	2301      	movs	r3, #1
   104e4:	fa03 f202 	lsl.w	r2, r3, r2
   104e8:	4b15      	ldr	r3, [pc, #84]	; (10540 <LabGPIO::SetLow()+0xc0>)
   104ea:	61da      	str	r2, [r3, #28]
       break;
   104ec:	e01a      	b.n	10524 <LabGPIO::SetLow()+0xa4>
    case 3:
       LPC_GPIO3-> CLR = (1<<SelPin);
   104ee:	9b01      	ldr	r3, [sp, #4]
   104f0:	785b      	ldrb	r3, [r3, #1]
   104f2:	461a      	mov	r2, r3
   104f4:	2301      	movs	r3, #1
   104f6:	fa03 f202 	lsl.w	r2, r3, r2
   104fa:	4b12      	ldr	r3, [pc, #72]	; (10544 <LabGPIO::SetLow()+0xc4>)
   104fc:	61da      	str	r2, [r3, #28]
       break;
   104fe:	e011      	b.n	10524 <LabGPIO::SetLow()+0xa4>
    case 4:
       LPC_GPIO4-> CLR = (1<<SelPin);
   10500:	9b01      	ldr	r3, [sp, #4]
   10502:	785b      	ldrb	r3, [r3, #1]
   10504:	461a      	mov	r2, r3
   10506:	2301      	movs	r3, #1
   10508:	fa03 f202 	lsl.w	r2, r3, r2
   1050c:	4b0e      	ldr	r3, [pc, #56]	; (10548 <LabGPIO::SetLow()+0xc8>)
   1050e:	61da      	str	r2, [r3, #28]
        break;
   10510:	e008      	b.n	10524 <LabGPIO::SetLow()+0xa4>
    case 5:
       LPC_GPIO5-> CLR = (1<<SelPin);
   10512:	9b01      	ldr	r3, [sp, #4]
   10514:	785b      	ldrb	r3, [r3, #1]
   10516:	461a      	mov	r2, r3
   10518:	2301      	movs	r3, #1
   1051a:	fa03 f202 	lsl.w	r2, r3, r2
   1051e:	4b0b      	ldr	r3, [pc, #44]	; (1054c <LabGPIO::SetLow()+0xcc>)
   10520:	61da      	str	r2, [r3, #28]
       break;
   10522:	bf00      	nop
   10524:	4623      	mov	r3, r4
   10526:	4619      	mov	r1, r3
   10528:	4802      	ldr	r0, [pc, #8]	; (10534 <LabGPIO::SetLow()+0xb4>)
   1052a:	f005 ffbd 	bl	164a8 <__cyg_profile_func_exit>
  }
  
  }
   1052e:	bf00      	nop
   10530:	b002      	add	sp, #8
   10532:	bd10      	pop	{r4, pc}
   10534:	00010481 	.word	0x00010481
   10538:	20098000 	.word	0x20098000
   1053c:	20098020 	.word	0x20098020
   10540:	20098040 	.word	0x20098040
   10544:	20098060 	.word	0x20098060
   10548:	20098080 	.word	0x20098080
   1054c:	200980a0 	.word	0x200980a0

00010550 <LabGPIO::ReadBool()>:
    case 5:
        if(LPC_GPIO5->PIN & (1<<SelPin)) return State::kHigh;
        else return State::kLow;
    }
  }
 bool LabGPIO::ReadBool(){
   10550:	b570      	push	{r4, r5, r6, lr}
   10552:	b082      	sub	sp, #8
   10554:	4676      	mov	r6, lr
   10556:	9001      	str	r0, [sp, #4]
   10558:	4633      	mov	r3, r6
   1055a:	4619      	mov	r1, r3
   1055c:	483e      	ldr	r0, [pc, #248]	; (10658 <LabGPIO::ReadBool()+0x108>)
   1055e:	f005 ff8f 	bl	16480 <__cyg_profile_func_enter>
  /// Should return the state of the pin (input or output, doesn't matter)
  ///
  /// @return level of pin high => true, low => false
  switch(SelPort){
   10562:	9b01      	ldr	r3, [sp, #4]
   10564:	781b      	ldrb	r3, [r3, #0]
   10566:	2b05      	cmp	r3, #5
   10568:	d868      	bhi.n	1063c <LabGPIO::ReadBool()+0xec>
   1056a:	a201      	add	r2, pc, #4	; (adr r2, 10570 <LabGPIO::ReadBool()+0x20>)
   1056c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   10570:	00010589 	.word	0x00010589
   10574:	000105a7 	.word	0x000105a7
   10578:	000105c5 	.word	0x000105c5
   1057c:	000105e3 	.word	0x000105e3
   10580:	00010601 	.word	0x00010601
   10584:	0001061f 	.word	0x0001061f
    case 0:
        return(LPC_GPIO0->PIN & (1<<SelPin));
   10588:	4b34      	ldr	r3, [pc, #208]	; (1065c <LabGPIO::ReadBool()+0x10c>)
   1058a:	695b      	ldr	r3, [r3, #20]
   1058c:	9a01      	ldr	r2, [sp, #4]
   1058e:	7852      	ldrb	r2, [r2, #1]
   10590:	4611      	mov	r1, r2
   10592:	2201      	movs	r2, #1
   10594:	408a      	lsls	r2, r1
   10596:	4013      	ands	r3, r2
   10598:	2b00      	cmp	r3, #0
   1059a:	bf14      	ite	ne
   1059c:	2301      	movne	r3, #1
   1059e:	2300      	moveq	r3, #0
   105a0:	b2dc      	uxtb	r4, r3
   105a2:	2500      	movs	r5, #0
   105a4:	e04b      	b.n	1063e <LabGPIO::ReadBool()+0xee>
    case 1:
        return(LPC_GPIO1->PIN & (1<<SelPin));
   105a6:	4b2e      	ldr	r3, [pc, #184]	; (10660 <LabGPIO::ReadBool()+0x110>)
   105a8:	695b      	ldr	r3, [r3, #20]
   105aa:	9a01      	ldr	r2, [sp, #4]
   105ac:	7852      	ldrb	r2, [r2, #1]
   105ae:	4611      	mov	r1, r2
   105b0:	2201      	movs	r2, #1
   105b2:	408a      	lsls	r2, r1
   105b4:	4013      	ands	r3, r2
   105b6:	2b00      	cmp	r3, #0
   105b8:	bf14      	ite	ne
   105ba:	2301      	movne	r3, #1
   105bc:	2300      	moveq	r3, #0
   105be:	b2dc      	uxtb	r4, r3
   105c0:	2500      	movs	r5, #0
   105c2:	e03c      	b.n	1063e <LabGPIO::ReadBool()+0xee>
    case 2:
        return(LPC_GPIO2->PIN & (1<<SelPin));
   105c4:	4b27      	ldr	r3, [pc, #156]	; (10664 <LabGPIO::ReadBool()+0x114>)
   105c6:	695b      	ldr	r3, [r3, #20]
   105c8:	9a01      	ldr	r2, [sp, #4]
   105ca:	7852      	ldrb	r2, [r2, #1]
   105cc:	4611      	mov	r1, r2
   105ce:	2201      	movs	r2, #1
   105d0:	408a      	lsls	r2, r1
   105d2:	4013      	ands	r3, r2
   105d4:	2b00      	cmp	r3, #0
   105d6:	bf14      	ite	ne
   105d8:	2301      	movne	r3, #1
   105da:	2300      	moveq	r3, #0
   105dc:	b2dc      	uxtb	r4, r3
   105de:	2500      	movs	r5, #0
   105e0:	e02d      	b.n	1063e <LabGPIO::ReadBool()+0xee>
    case 3:
        return(LPC_GPIO3->PIN & (1<<SelPin));
   105e2:	4b21      	ldr	r3, [pc, #132]	; (10668 <LabGPIO::ReadBool()+0x118>)
   105e4:	695b      	ldr	r3, [r3, #20]
   105e6:	9a01      	ldr	r2, [sp, #4]
   105e8:	7852      	ldrb	r2, [r2, #1]
   105ea:	4611      	mov	r1, r2
   105ec:	2201      	movs	r2, #1
   105ee:	408a      	lsls	r2, r1
   105f0:	4013      	ands	r3, r2
   105f2:	2b00      	cmp	r3, #0
   105f4:	bf14      	ite	ne
   105f6:	2301      	movne	r3, #1
   105f8:	2300      	moveq	r3, #0
   105fa:	b2dc      	uxtb	r4, r3
   105fc:	2500      	movs	r5, #0
   105fe:	e01e      	b.n	1063e <LabGPIO::ReadBool()+0xee>
    case 4:
        return(LPC_GPIO4->PIN & (1<<SelPin));
   10600:	4b1a      	ldr	r3, [pc, #104]	; (1066c <LabGPIO::ReadBool()+0x11c>)
   10602:	695b      	ldr	r3, [r3, #20]
   10604:	9a01      	ldr	r2, [sp, #4]
   10606:	7852      	ldrb	r2, [r2, #1]
   10608:	4611      	mov	r1, r2
   1060a:	2201      	movs	r2, #1
   1060c:	408a      	lsls	r2, r1
   1060e:	4013      	ands	r3, r2
   10610:	2b00      	cmp	r3, #0
   10612:	bf14      	ite	ne
   10614:	2301      	movne	r3, #1
   10616:	2300      	moveq	r3, #0
   10618:	b2dc      	uxtb	r4, r3
   1061a:	2500      	movs	r5, #0
   1061c:	e00f      	b.n	1063e <LabGPIO::ReadBool()+0xee>
    case 5:
        return(LPC_GPIO5->PIN & (1<<SelPin));  
   1061e:	4b14      	ldr	r3, [pc, #80]	; (10670 <LabGPIO::ReadBool()+0x120>)
   10620:	695b      	ldr	r3, [r3, #20]
   10622:	9a01      	ldr	r2, [sp, #4]
   10624:	7852      	ldrb	r2, [r2, #1]
   10626:	4611      	mov	r1, r2
   10628:	2201      	movs	r2, #1
   1062a:	408a      	lsls	r2, r1
   1062c:	4013      	ands	r3, r2
   1062e:	2b00      	cmp	r3, #0
   10630:	bf14      	ite	ne
   10632:	2301      	movne	r3, #1
   10634:	2300      	moveq	r3, #0
   10636:	b2dc      	uxtb	r4, r3
   10638:	2500      	movs	r5, #0
   1063a:	e000      	b.n	1063e <LabGPIO::ReadBool()+0xee>
   1063c:	2501      	movs	r5, #1
   1063e:	4633      	mov	r3, r6
   10640:	4619      	mov	r1, r3
   10642:	4805      	ldr	r0, [pc, #20]	; (10658 <LabGPIO::ReadBool()+0x108>)
   10644:	f005 ff30 	bl	164a8 <__cyg_profile_func_exit>
   10648:	2d01      	cmp	r5, #1
   1064a:	d100      	bne.n	1064e <LabGPIO::ReadBool()+0xfe>
  }
  }
   1064c:	e000      	b.n	10650 <LabGPIO::ReadBool()+0x100>
   1064e:	4623      	mov	r3, r4
   10650:	4618      	mov	r0, r3
   10652:	b002      	add	sp, #8
   10654:	bd70      	pop	{r4, r5, r6, pc}
   10656:	bf00      	nop
   10658:	00010551 	.word	0x00010551
   1065c:	20098000 	.word	0x20098000
   10660:	20098020 	.word	0x20098020
   10664:	20098040 	.word	0x20098040
   10668:	20098060 	.word	0x20098060
   1066c:	20098080 	.word	0x20098080
   10670:	200980a0 	.word	0x200980a0

00010674 <LabGPIO::toggle()>:
 void LabGPIO::toggle(){
   10674:	b510      	push	{r4, lr}
   10676:	b082      	sub	sp, #8
   10678:	4674      	mov	r4, lr
   1067a:	9001      	str	r0, [sp, #4]
   1067c:	4623      	mov	r3, r4
   1067e:	4619      	mov	r1, r3
   10680:	4841      	ldr	r0, [pc, #260]	; (10788 <LabGPIO::toggle()+0x114>)
   10682:	f005 fefd 	bl	16480 <__cyg_profile_func_enter>

    switch(SelPort){
   10686:	9b01      	ldr	r3, [sp, #4]
   10688:	781b      	ldrb	r3, [r3, #0]
   1068a:	2b05      	cmp	r3, #5
   1068c:	d874      	bhi.n	10778 <LabGPIO::toggle()+0x104>
   1068e:	a201      	add	r2, pc, #4	; (adr r2, 10694 <LabGPIO::toggle()+0x20>)
   10690:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   10694:	000106ad 	.word	0x000106ad
   10698:	000106cf 	.word	0x000106cf
   1069c:	000106f1 	.word	0x000106f1
   106a0:	00010713 	.word	0x00010713
   106a4:	00010735 	.word	0x00010735
   106a8:	00010757 	.word	0x00010757
    case 0:
        if(!ReadBool()) //reads the current state and if it is not true which means it is SetLow then SetHigh 
   106ac:	9801      	ldr	r0, [sp, #4]
   106ae:	f7ff ff4f 	bl	10550 <LabGPIO::ReadBool()>
   106b2:	4603      	mov	r3, r0
   106b4:	f083 0301 	eor.w	r3, r3, #1
   106b8:	b2db      	uxtb	r3, r3
   106ba:	2b00      	cmp	r3, #0
   106bc:	d003      	beq.n	106c6 <LabGPIO::toggle()+0x52>
            SetHigh(); 
   106be:	9801      	ldr	r0, [sp, #4]
   106c0:	f7ff fe76 	bl	103b0 <LabGPIO::SetHigh()>
        else SetLow();
        break;
   106c4:	e058      	b.n	10778 <LabGPIO::toggle()+0x104>
        else SetLow();
   106c6:	9801      	ldr	r0, [sp, #4]
   106c8:	f7ff feda 	bl	10480 <LabGPIO::SetLow()>
        break;
   106cc:	e054      	b.n	10778 <LabGPIO::toggle()+0x104>
    case 1:
        if(!ReadBool()) //reads the current state and if it is not true which means it is SetLow then SetHigh 
   106ce:	9801      	ldr	r0, [sp, #4]
   106d0:	f7ff ff3e 	bl	10550 <LabGPIO::ReadBool()>
   106d4:	4603      	mov	r3, r0
   106d6:	f083 0301 	eor.w	r3, r3, #1
   106da:	b2db      	uxtb	r3, r3
   106dc:	2b00      	cmp	r3, #0
   106de:	d003      	beq.n	106e8 <LabGPIO::toggle()+0x74>
            SetHigh(); 
   106e0:	9801      	ldr	r0, [sp, #4]
   106e2:	f7ff fe65 	bl	103b0 <LabGPIO::SetHigh()>
        else SetLow();
        break;
   106e6:	e047      	b.n	10778 <LabGPIO::toggle()+0x104>
        else SetLow();
   106e8:	9801      	ldr	r0, [sp, #4]
   106ea:	f7ff fec9 	bl	10480 <LabGPIO::SetLow()>
        break;
   106ee:	e043      	b.n	10778 <LabGPIO::toggle()+0x104>
    case 2:
        if(!ReadBool()) //reads the current state and if it is not true which means it is SetLow then SetHigh 
   106f0:	9801      	ldr	r0, [sp, #4]
   106f2:	f7ff ff2d 	bl	10550 <LabGPIO::ReadBool()>
   106f6:	4603      	mov	r3, r0
   106f8:	f083 0301 	eor.w	r3, r3, #1
   106fc:	b2db      	uxtb	r3, r3
   106fe:	2b00      	cmp	r3, #0
   10700:	d003      	beq.n	1070a <LabGPIO::toggle()+0x96>
            SetHigh(); 
   10702:	9801      	ldr	r0, [sp, #4]
   10704:	f7ff fe54 	bl	103b0 <LabGPIO::SetHigh()>
        else SetLow();
        break;
   10708:	e036      	b.n	10778 <LabGPIO::toggle()+0x104>
        else SetLow();
   1070a:	9801      	ldr	r0, [sp, #4]
   1070c:	f7ff feb8 	bl	10480 <LabGPIO::SetLow()>
        break;
   10710:	e032      	b.n	10778 <LabGPIO::toggle()+0x104>
    case 3:
        if(!ReadBool()) //reads the current state and if it is not true which means it is SetLow then SetHigh 
   10712:	9801      	ldr	r0, [sp, #4]
   10714:	f7ff ff1c 	bl	10550 <LabGPIO::ReadBool()>
   10718:	4603      	mov	r3, r0
   1071a:	f083 0301 	eor.w	r3, r3, #1
   1071e:	b2db      	uxtb	r3, r3
   10720:	2b00      	cmp	r3, #0
   10722:	d003      	beq.n	1072c <LabGPIO::toggle()+0xb8>
            SetHigh(); 
   10724:	9801      	ldr	r0, [sp, #4]
   10726:	f7ff fe43 	bl	103b0 <LabGPIO::SetHigh()>
        else SetLow();
        break;
   1072a:	e025      	b.n	10778 <LabGPIO::toggle()+0x104>
        else SetLow();
   1072c:	9801      	ldr	r0, [sp, #4]
   1072e:	f7ff fea7 	bl	10480 <LabGPIO::SetLow()>
        break;
   10732:	e021      	b.n	10778 <LabGPIO::toggle()+0x104>
    case 4:
        if(!ReadBool()) //reads the current state and if it is not true which means it is SetLow then SetHigh 
   10734:	9801      	ldr	r0, [sp, #4]
   10736:	f7ff ff0b 	bl	10550 <LabGPIO::ReadBool()>
   1073a:	4603      	mov	r3, r0
   1073c:	f083 0301 	eor.w	r3, r3, #1
   10740:	b2db      	uxtb	r3, r3
   10742:	2b00      	cmp	r3, #0
   10744:	d003      	beq.n	1074e <LabGPIO::toggle()+0xda>
            SetHigh(); 
   10746:	9801      	ldr	r0, [sp, #4]
   10748:	f7ff fe32 	bl	103b0 <LabGPIO::SetHigh()>
        else SetLow();
        break;
   1074c:	e014      	b.n	10778 <LabGPIO::toggle()+0x104>
        else SetLow();
   1074e:	9801      	ldr	r0, [sp, #4]
   10750:	f7ff fe96 	bl	10480 <LabGPIO::SetLow()>
        break;
   10754:	e010      	b.n	10778 <LabGPIO::toggle()+0x104>
    case 5:
        if(!ReadBool()) //reads the current state and if it is not true which means it is SetLow then SetHigh 
   10756:	9801      	ldr	r0, [sp, #4]
   10758:	f7ff fefa 	bl	10550 <LabGPIO::ReadBool()>
   1075c:	4603      	mov	r3, r0
   1075e:	f083 0301 	eor.w	r3, r3, #1
   10762:	b2db      	uxtb	r3, r3
   10764:	2b00      	cmp	r3, #0
   10766:	d003      	beq.n	10770 <LabGPIO::toggle()+0xfc>
            SetHigh(); 
   10768:	9801      	ldr	r0, [sp, #4]
   1076a:	f7ff fe21 	bl	103b0 <LabGPIO::SetHigh()>
        else SetLow();
        break;
   1076e:	e002      	b.n	10776 <LabGPIO::toggle()+0x102>
        else SetLow();
   10770:	9801      	ldr	r0, [sp, #4]
   10772:	f7ff fe85 	bl	10480 <LabGPIO::SetLow()>
        break;
   10776:	bf00      	nop
   10778:	4623      	mov	r3, r4
   1077a:	4619      	mov	r1, r3
   1077c:	4802      	ldr	r0, [pc, #8]	; (10788 <LabGPIO::toggle()+0x114>)
   1077e:	f005 fe93 	bl	164a8 <__cyg_profile_func_exit>
    }
  }
   10782:	bf00      	nop
   10784:	b002      	add	sp, #8
   10786:	bd10      	pop	{r4, pc}
   10788:	00010675 	.word	0x00010675

0001078c <LabGPIO::setPulldown()>:
  void LabGPIO::setPulldown(){
   1078c:	b510      	push	{r4, lr}
   1078e:	b082      	sub	sp, #8
   10790:	4674      	mov	r4, lr
   10792:	9001      	str	r0, [sp, #4]
   10794:	4623      	mov	r3, r4
   10796:	4619      	mov	r1, r3
   10798:	482d      	ldr	r0, [pc, #180]	; (10850 <LabGPIO::setPulldown()+0xc4>)
   1079a:	f005 fe71 	bl	16480 <__cyg_profile_func_enter>
   switch(SelPort){
   1079e:	9b01      	ldr	r3, [sp, #4]
   107a0:	781b      	ldrb	r3, [r3, #0]
   107a2:	2b00      	cmp	r3, #0
   107a4:	d002      	beq.n	107ac <LabGPIO::setPulldown()+0x20>
   107a6:	2b01      	cmp	r3, #1
   107a8:	d021      	beq.n	107ee <LabGPIO::setPulldown()+0x62>
   107aa:	e049      	b.n	10840 <LabGPIO::setPulldown()+0xb4>
   case 0:
    if(SelPin == 29)
   107ac:	9b01      	ldr	r3, [sp, #4]
   107ae:	785b      	ldrb	r3, [r3, #1]
   107b0:	2b1d      	cmp	r3, #29
   107b2:	d10c      	bne.n	107ce <LabGPIO::setPulldown()+0x42>
   {   
       LPC_IOCON->P0_29 &= ~(0b11<<3);
   107b4:	4b27      	ldr	r3, [pc, #156]	; (10854 <LabGPIO::setPulldown()+0xc8>)
   107b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
   107b8:	4a26      	ldr	r2, [pc, #152]	; (10854 <LabGPIO::setPulldown()+0xc8>)
   107ba:	f023 0318 	bic.w	r3, r3, #24
   107be:	6753      	str	r3, [r2, #116]	; 0x74
       LPC_IOCON->P0_29 |= (0b1<<3);
   107c0:	4b24      	ldr	r3, [pc, #144]	; (10854 <LabGPIO::setPulldown()+0xc8>)
   107c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
   107c4:	4a23      	ldr	r2, [pc, #140]	; (10854 <LabGPIO::setPulldown()+0xc8>)
   107c6:	f043 0308 	orr.w	r3, r3, #8
   107ca:	6753      	str	r3, [r2, #116]	; 0x74
   107cc:	e00f      	b.n	107ee <LabGPIO::setPulldown()+0x62>
   }
   else if ( SelPin == 30)
   107ce:	9b01      	ldr	r3, [sp, #4]
   107d0:	785b      	ldrb	r3, [r3, #1]
   107d2:	2b1e      	cmp	r3, #30
   107d4:	d10b      	bne.n	107ee <LabGPIO::setPulldown()+0x62>
   {
       LPC_IOCON->P0_30 &= ~(0b11<<3);
   107d6:	4b1f      	ldr	r3, [pc, #124]	; (10854 <LabGPIO::setPulldown()+0xc8>)
   107d8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   107da:	4a1e      	ldr	r2, [pc, #120]	; (10854 <LabGPIO::setPulldown()+0xc8>)
   107dc:	f023 0318 	bic.w	r3, r3, #24
   107e0:	6793      	str	r3, [r2, #120]	; 0x78
       LPC_IOCON->P0_30 |= (0b1<<3);
   107e2:	4b1c      	ldr	r3, [pc, #112]	; (10854 <LabGPIO::setPulldown()+0xc8>)
   107e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   107e6:	4a1b      	ldr	r2, [pc, #108]	; (10854 <LabGPIO::setPulldown()+0xc8>)
   107e8:	f043 0308 	orr.w	r3, r3, #8
   107ec:	6793      	str	r3, [r2, #120]	; 0x78
   }
     //fall through
   case 1:   
   if(SelPin == 19)
   107ee:	9b01      	ldr	r3, [sp, #4]
   107f0:	785b      	ldrb	r3, [r3, #1]
   107f2:	2b13      	cmp	r3, #19
   107f4:	d110      	bne.n	10818 <LabGPIO::setPulldown()+0x8c>
   {   
       LPC_IOCON->P1_19 &= ~(0b11<<3);
   107f6:	4b17      	ldr	r3, [pc, #92]	; (10854 <LabGPIO::setPulldown()+0xc8>)
   107f8:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
   107fc:	4a15      	ldr	r2, [pc, #84]	; (10854 <LabGPIO::setPulldown()+0xc8>)
   107fe:	f023 0318 	bic.w	r3, r3, #24
   10802:	f8c2 30cc 	str.w	r3, [r2, #204]	; 0xcc
       LPC_IOCON->P1_19 |= (0b1<<3);
   10806:	4b13      	ldr	r3, [pc, #76]	; (10854 <LabGPIO::setPulldown()+0xc8>)
   10808:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
   1080c:	4a11      	ldr	r2, [pc, #68]	; (10854 <LabGPIO::setPulldown()+0xc8>)
   1080e:	f043 0308 	orr.w	r3, r3, #8
   10812:	f8c2 30cc 	str.w	r3, [r2, #204]	; 0xcc
   10816:	e013      	b.n	10840 <LabGPIO::setPulldown()+0xb4>
   }
   else if ( SelPin == 15)
   10818:	9b01      	ldr	r3, [sp, #4]
   1081a:	785b      	ldrb	r3, [r3, #1]
   1081c:	2b0f      	cmp	r3, #15
   1081e:	d10f      	bne.n	10840 <LabGPIO::setPulldown()+0xb4>
   {
       LPC_IOCON->P1_15 &= ~(0b11<<3);
   10820:	4b0c      	ldr	r3, [pc, #48]	; (10854 <LabGPIO::setPulldown()+0xc8>)
   10822:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
   10826:	4a0b      	ldr	r2, [pc, #44]	; (10854 <LabGPIO::setPulldown()+0xc8>)
   10828:	f023 0318 	bic.w	r3, r3, #24
   1082c:	f8c2 30bc 	str.w	r3, [r2, #188]	; 0xbc
       LPC_IOCON->P1_15 |= (0b1<<3);
   10830:	4b08      	ldr	r3, [pc, #32]	; (10854 <LabGPIO::setPulldown()+0xc8>)
   10832:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
   10836:	4a07      	ldr	r2, [pc, #28]	; (10854 <LabGPIO::setPulldown()+0xc8>)
   10838:	f043 0308 	orr.w	r3, r3, #8
   1083c:	f8c2 30bc 	str.w	r3, [r2, #188]	; 0xbc
   10840:	4623      	mov	r3, r4
   10842:	4619      	mov	r1, r3
   10844:	4802      	ldr	r0, [pc, #8]	; (10850 <LabGPIO::setPulldown()+0xc4>)
   10846:	f005 fe2f 	bl	164a8 <__cyg_profile_func_exit>
   }
  
   }
  }
   1084a:	bf00      	nop
   1084c:	b002      	add	sp, #8
   1084e:	bd10      	pop	{r4, pc}
   10850:	0001078d 	.word	0x0001078d
   10854:	4002c000 	.word	0x4002c000

00010858 <PinInterface::PinInterface()>:
#include <cstdio>

#include "L0_LowLevel/LPC40xx.h"
#include "utility/macros.hpp"

class PinInterface
   10858:	b530      	push	{r4, r5, lr}
   1085a:	b083      	sub	sp, #12
   1085c:	4675      	mov	r5, lr
   1085e:	9001      	str	r0, [sp, #4]
   10860:	462b      	mov	r3, r5
   10862:	4619      	mov	r1, r3
   10864:	4807      	ldr	r0, [pc, #28]	; (10884 <PinInterface::PinInterface()+0x2c>)
   10866:	f005 fe0b 	bl	16480 <__cyg_profile_func_enter>
   1086a:	4a07      	ldr	r2, [pc, #28]	; (10888 <PinInterface::PinInterface()+0x30>)
   1086c:	9b01      	ldr	r3, [sp, #4]
   1086e:	601a      	str	r2, [r3, #0]
   10870:	9c01      	ldr	r4, [sp, #4]
   10872:	462b      	mov	r3, r5
   10874:	4619      	mov	r1, r3
   10876:	4803      	ldr	r0, [pc, #12]	; (10884 <PinInterface::PinInterface()+0x2c>)
   10878:	f005 fe16 	bl	164a8 <__cyg_profile_func_exit>
   1087c:	4623      	mov	r3, r4
   1087e:	4618      	mov	r0, r3
   10880:	b003      	add	sp, #12
   10882:	bd30      	pop	{r4, r5, pc}
   10884:	00010859 	.word	0x00010859
   10888:	00019d5c 	.word	0x00019d5c

0001088c <Pin::Pin(unsigned char, unsigned char)>:
  // no effect.
  static constexpr Pin CreateInactivePin()
  {
    return Pin(5, 4);
  }
  constexpr Pin(uint8_t port_number, uint8_t pin_number)
   1088c:	b530      	push	{r4, r5, lr}
   1088e:	b083      	sub	sp, #12
   10890:	4675      	mov	r5, lr
   10892:	9001      	str	r0, [sp, #4]
   10894:	460b      	mov	r3, r1
   10896:	f88d 3003 	strb.w	r3, [sp, #3]
   1089a:	4613      	mov	r3, r2
   1089c:	f88d 3002 	strb.w	r3, [sp, #2]
   108a0:	462b      	mov	r3, r5
   108a2:	4619      	mov	r1, r3
   108a4:	480d      	ldr	r0, [pc, #52]	; (108dc <Pin::Pin(unsigned char, unsigned char)+0x50>)
   108a6:	f005 fdeb 	bl	16480 <__cyg_profile_func_enter>
      : port_(port_number), pin_(pin_number)
   108aa:	9b01      	ldr	r3, [sp, #4]
   108ac:	4618      	mov	r0, r3
   108ae:	f7ff ffd3 	bl	10858 <PinInterface::PinInterface()>
   108b2:	4a0b      	ldr	r2, [pc, #44]	; (108e0 <Pin::Pin(unsigned char, unsigned char)+0x54>)
   108b4:	9b01      	ldr	r3, [sp, #4]
   108b6:	601a      	str	r2, [r3, #0]
   108b8:	9b01      	ldr	r3, [sp, #4]
   108ba:	f89d 2003 	ldrb.w	r2, [sp, #3]
   108be:	711a      	strb	r2, [r3, #4]
   108c0:	9b01      	ldr	r3, [sp, #4]
   108c2:	f89d 2002 	ldrb.w	r2, [sp, #2]
   108c6:	715a      	strb	r2, [r3, #5]
  {
  }
   108c8:	9c01      	ldr	r4, [sp, #4]
   108ca:	462b      	mov	r3, r5
   108cc:	4619      	mov	r1, r3
   108ce:	4803      	ldr	r0, [pc, #12]	; (108dc <Pin::Pin(unsigned char, unsigned char)+0x50>)
   108d0:	f005 fdea 	bl	164a8 <__cyg_profile_func_exit>
   108d4:	4623      	mov	r3, r4
   108d6:	4618      	mov	r0, r3
   108d8:	b003      	add	sp, #12
   108da:	bd30      	pop	{r4, r5, pc}
   108dc:	0001088d 	.word	0x0001088d
   108e0:	00019d20 	.word	0x00019d20

000108e4 <Pin::SetPinFunction(unsigned char)>:
  void SetPinFunction(uint8_t function) override
   108e4:	b5f0      	push	{r4, r5, r6, r7, lr}
   108e6:	b085      	sub	sp, #20
   108e8:	4677      	mov	r7, lr
   108ea:	9003      	str	r0, [sp, #12]
   108ec:	460b      	mov	r3, r1
   108ee:	f88d 300b 	strb.w	r3, [sp, #11]
   108f2:	463b      	mov	r3, r7
   108f4:	4619      	mov	r1, r3
   108f6:	4817      	ldr	r0, [pc, #92]	; (10954 <Pin::SetPinFunction(unsigned char)+0x70>)
   108f8:	f005 fdc2 	bl	16480 <__cyg_profile_func_enter>
  {
    pin_map->_register[port_][pin_] =
        BitPlace(pin_map->_register[port_][pin_], PinBitMap::kFunction,
   108fc:	4b16      	ldr	r3, [pc, #88]	; (10958 <Pin::SetPinFunction(unsigned char)+0x74>)
   108fe:	681b      	ldr	r3, [r3, #0]
   10900:	9a03      	ldr	r2, [sp, #12]
   10902:	7912      	ldrb	r2, [r2, #4]
   10904:	4610      	mov	r0, r2
   10906:	9a03      	ldr	r2, [sp, #12]
   10908:	7952      	ldrb	r2, [r2, #5]
   1090a:	4611      	mov	r1, r2
   1090c:	0142      	lsls	r2, r0, #5
   1090e:	440a      	add	r2, r1
   10910:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
                 function & 0b111, 3);
   10914:	f89d 300b 	ldrb.w	r3, [sp, #11]
        BitPlace(pin_map->_register[port_][pin_], PinBitMap::kFunction,
   10918:	f003 0207 	and.w	r2, r3, #7
    pin_map->_register[port_][pin_] =
   1091c:	4b0e      	ldr	r3, [pc, #56]	; (10958 <Pin::SetPinFunction(unsigned char)+0x74>)
   1091e:	681c      	ldr	r4, [r3, #0]
   10920:	9b03      	ldr	r3, [sp, #12]
   10922:	791b      	ldrb	r3, [r3, #4]
   10924:	461e      	mov	r6, r3
   10926:	9b03      	ldr	r3, [sp, #12]
   10928:	795b      	ldrb	r3, [r3, #5]
   1092a:	461d      	mov	r5, r3
        BitPlace(pin_map->_register[port_][pin_], PinBitMap::kFunction,
   1092c:	2303      	movs	r3, #3
   1092e:	9300      	str	r3, [sp, #0]
   10930:	4613      	mov	r3, r2
   10932:	2200      	movs	r2, #0
   10934:	9803      	ldr	r0, [sp, #12]
   10936:	f000 fa67 	bl	10e08 <Pin::BitPlace(unsigned long, unsigned long, unsigned long, unsigned long)>
   1093a:	4602      	mov	r2, r0
    pin_map->_register[port_][pin_] =
   1093c:	0173      	lsls	r3, r6, #5
   1093e:	442b      	add	r3, r5
   10940:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
   10944:	463b      	mov	r3, r7
   10946:	4619      	mov	r1, r3
   10948:	4802      	ldr	r0, [pc, #8]	; (10954 <Pin::SetPinFunction(unsigned char)+0x70>)
   1094a:	f005 fdad 	bl	164a8 <__cyg_profile_func_exit>
  }
   1094e:	bf00      	nop
   10950:	b005      	add	sp, #20
   10952:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10954:	000108e5 	.word	0x000108e5
   10958:	10000000 	.word	0x10000000

0001095c <Pin::SetMode(PinInterface::Mode)>:
  void SetMode(PinInterface::Mode mode) override
   1095c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1095e:	b087      	sub	sp, #28
   10960:	4677      	mov	r7, lr
   10962:	9003      	str	r0, [sp, #12]
   10964:	460b      	mov	r3, r1
   10966:	f88d 300b 	strb.w	r3, [sp, #11]
   1096a:	463b      	mov	r3, r7
   1096c:	4619      	mov	r1, r3
   1096e:	4819      	ldr	r0, [pc, #100]	; (109d4 <Pin::SetMode(PinInterface::Mode)+0x78>)
   10970:	f005 fd86 	bl	16480 <__cyg_profile_func_enter>
  {
    uint8_t ui_mode                 = static_cast<uint8_t>(mode);
   10974:	f89d 300b 	ldrb.w	r3, [sp, #11]
   10978:	f88d 3017 	strb.w	r3, [sp, #23]
    pin_map->_register[port_][pin_] = BitPlace(
   1097c:	4b16      	ldr	r3, [pc, #88]	; (109d8 <Pin::SetMode(PinInterface::Mode)+0x7c>)
   1097e:	681b      	ldr	r3, [r3, #0]
        pin_map->_register[port_][pin_], PinBitMap::kMode, ui_mode & 0b11, 2);
   10980:	9a03      	ldr	r2, [sp, #12]
   10982:	7912      	ldrb	r2, [r2, #4]
   10984:	4610      	mov	r0, r2
   10986:	9a03      	ldr	r2, [sp, #12]
   10988:	7952      	ldrb	r2, [r2, #5]
   1098a:	4611      	mov	r1, r2
    pin_map->_register[port_][pin_] = BitPlace(
   1098c:	0142      	lsls	r2, r0, #5
   1098e:	440a      	add	r2, r1
   10990:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
        pin_map->_register[port_][pin_], PinBitMap::kMode, ui_mode & 0b11, 2);
   10994:	f89d 3017 	ldrb.w	r3, [sp, #23]
    pin_map->_register[port_][pin_] = BitPlace(
   10998:	f003 0203 	and.w	r2, r3, #3
   1099c:	4b0e      	ldr	r3, [pc, #56]	; (109d8 <Pin::SetMode(PinInterface::Mode)+0x7c>)
   1099e:	681c      	ldr	r4, [r3, #0]
   109a0:	9b03      	ldr	r3, [sp, #12]
   109a2:	791b      	ldrb	r3, [r3, #4]
   109a4:	461e      	mov	r6, r3
   109a6:	9b03      	ldr	r3, [sp, #12]
   109a8:	795b      	ldrb	r3, [r3, #5]
   109aa:	461d      	mov	r5, r3
   109ac:	2302      	movs	r3, #2
   109ae:	9300      	str	r3, [sp, #0]
   109b0:	4613      	mov	r3, r2
   109b2:	2203      	movs	r2, #3
   109b4:	9803      	ldr	r0, [sp, #12]
   109b6:	f000 fa27 	bl	10e08 <Pin::BitPlace(unsigned long, unsigned long, unsigned long, unsigned long)>
   109ba:	4602      	mov	r2, r0
   109bc:	0173      	lsls	r3, r6, #5
   109be:	442b      	add	r3, r5
   109c0:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
   109c4:	463b      	mov	r3, r7
   109c6:	4619      	mov	r1, r3
   109c8:	4802      	ldr	r0, [pc, #8]	; (109d4 <Pin::SetMode(PinInterface::Mode)+0x78>)
   109ca:	f005 fd6d 	bl	164a8 <__cyg_profile_func_exit>
  }
   109ce:	bf00      	nop
   109d0:	b007      	add	sp, #28
   109d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   109d4:	0001095d 	.word	0x0001095d
   109d8:	10000000 	.word	0x10000000

000109dc <Pin::EnableHysteresis(bool)>:
  void EnableHysteresis(bool enable_hysteresis = true) override
   109dc:	b5f0      	push	{r4, r5, r6, r7, lr}
   109de:	b085      	sub	sp, #20
   109e0:	4677      	mov	r7, lr
   109e2:	9003      	str	r0, [sp, #12]
   109e4:	460b      	mov	r3, r1
   109e6:	f88d 300b 	strb.w	r3, [sp, #11]
   109ea:	463b      	mov	r3, r7
   109ec:	4619      	mov	r1, r3
   109ee:	4816      	ldr	r0, [pc, #88]	; (10a48 <Pin::EnableHysteresis(bool)+0x6c>)
   109f0:	f005 fd46 	bl	16480 <__cyg_profile_func_enter>
  {
    pin_map->_register[port_][pin_] =
        BitPlace(pin_map->_register[port_][pin_], PinBitMap::kHysteresis,
   109f4:	4b15      	ldr	r3, [pc, #84]	; (10a4c <Pin::EnableHysteresis(bool)+0x70>)
   109f6:	681b      	ldr	r3, [r3, #0]
   109f8:	9a03      	ldr	r2, [sp, #12]
   109fa:	7912      	ldrb	r2, [r2, #4]
   109fc:	4610      	mov	r0, r2
   109fe:	9a03      	ldr	r2, [sp, #12]
   10a00:	7952      	ldrb	r2, [r2, #5]
   10a02:	4611      	mov	r1, r2
   10a04:	0142      	lsls	r2, r0, #5
   10a06:	440a      	add	r2, r1
   10a08:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   10a0c:	f89d 200b 	ldrb.w	r2, [sp, #11]
    pin_map->_register[port_][pin_] =
   10a10:	4b0e      	ldr	r3, [pc, #56]	; (10a4c <Pin::EnableHysteresis(bool)+0x70>)
   10a12:	681c      	ldr	r4, [r3, #0]
   10a14:	9b03      	ldr	r3, [sp, #12]
   10a16:	791b      	ldrb	r3, [r3, #4]
   10a18:	461e      	mov	r6, r3
   10a1a:	9b03      	ldr	r3, [sp, #12]
   10a1c:	795b      	ldrb	r3, [r3, #5]
   10a1e:	461d      	mov	r5, r3
        BitPlace(pin_map->_register[port_][pin_], PinBitMap::kHysteresis,
   10a20:	2301      	movs	r3, #1
   10a22:	9300      	str	r3, [sp, #0]
   10a24:	4613      	mov	r3, r2
   10a26:	2205      	movs	r2, #5
   10a28:	9803      	ldr	r0, [sp, #12]
   10a2a:	f000 f9ed 	bl	10e08 <Pin::BitPlace(unsigned long, unsigned long, unsigned long, unsigned long)>
   10a2e:	4602      	mov	r2, r0
    pin_map->_register[port_][pin_] =
   10a30:	0173      	lsls	r3, r6, #5
   10a32:	442b      	add	r3, r5
   10a34:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
   10a38:	463b      	mov	r3, r7
   10a3a:	4619      	mov	r1, r3
   10a3c:	4802      	ldr	r0, [pc, #8]	; (10a48 <Pin::EnableHysteresis(bool)+0x6c>)
   10a3e:	f005 fd33 	bl	164a8 <__cyg_profile_func_exit>
                 enable_hysteresis, 1);
  }
   10a42:	bf00      	nop
   10a44:	b005      	add	sp, #20
   10a46:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10a48:	000109dd 	.word	0x000109dd
   10a4c:	10000000 	.word	0x10000000

00010a50 <Pin::SetAsActiveLow(bool)>:
  void SetAsActiveLow(bool set_as_active_low = true) override
   10a50:	b5f0      	push	{r4, r5, r6, r7, lr}
   10a52:	b085      	sub	sp, #20
   10a54:	4677      	mov	r7, lr
   10a56:	9003      	str	r0, [sp, #12]
   10a58:	460b      	mov	r3, r1
   10a5a:	f88d 300b 	strb.w	r3, [sp, #11]
   10a5e:	463b      	mov	r3, r7
   10a60:	4619      	mov	r1, r3
   10a62:	4816      	ldr	r0, [pc, #88]	; (10abc <Pin::SetAsActiveLow(bool)+0x6c>)
   10a64:	f005 fd0c 	bl	16480 <__cyg_profile_func_enter>
  {
    pin_map->_register[port_][pin_] =
        BitPlace(pin_map->_register[port_][pin_], PinBitMap::kInputInvert,
   10a68:	4b15      	ldr	r3, [pc, #84]	; (10ac0 <Pin::SetAsActiveLow(bool)+0x70>)
   10a6a:	681b      	ldr	r3, [r3, #0]
   10a6c:	9a03      	ldr	r2, [sp, #12]
   10a6e:	7912      	ldrb	r2, [r2, #4]
   10a70:	4610      	mov	r0, r2
   10a72:	9a03      	ldr	r2, [sp, #12]
   10a74:	7952      	ldrb	r2, [r2, #5]
   10a76:	4611      	mov	r1, r2
   10a78:	0142      	lsls	r2, r0, #5
   10a7a:	440a      	add	r2, r1
   10a7c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   10a80:	f89d 200b 	ldrb.w	r2, [sp, #11]
    pin_map->_register[port_][pin_] =
   10a84:	4b0e      	ldr	r3, [pc, #56]	; (10ac0 <Pin::SetAsActiveLow(bool)+0x70>)
   10a86:	681c      	ldr	r4, [r3, #0]
   10a88:	9b03      	ldr	r3, [sp, #12]
   10a8a:	791b      	ldrb	r3, [r3, #4]
   10a8c:	461e      	mov	r6, r3
   10a8e:	9b03      	ldr	r3, [sp, #12]
   10a90:	795b      	ldrb	r3, [r3, #5]
   10a92:	461d      	mov	r5, r3
        BitPlace(pin_map->_register[port_][pin_], PinBitMap::kInputInvert,
   10a94:	2301      	movs	r3, #1
   10a96:	9300      	str	r3, [sp, #0]
   10a98:	4613      	mov	r3, r2
   10a9a:	2206      	movs	r2, #6
   10a9c:	9803      	ldr	r0, [sp, #12]
   10a9e:	f000 f9b3 	bl	10e08 <Pin::BitPlace(unsigned long, unsigned long, unsigned long, unsigned long)>
   10aa2:	4602      	mov	r2, r0
    pin_map->_register[port_][pin_] =
   10aa4:	0173      	lsls	r3, r6, #5
   10aa6:	442b      	add	r3, r5
   10aa8:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
   10aac:	463b      	mov	r3, r7
   10aae:	4619      	mov	r1, r3
   10ab0:	4802      	ldr	r0, [pc, #8]	; (10abc <Pin::SetAsActiveLow(bool)+0x6c>)
   10ab2:	f005 fcf9 	bl	164a8 <__cyg_profile_func_exit>
                 set_as_active_low, 1);
  }
   10ab6:	bf00      	nop
   10ab8:	b005      	add	sp, #20
   10aba:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10abc:	00010a51 	.word	0x00010a51
   10ac0:	10000000 	.word	0x10000000

00010ac4 <Pin::SetAsAnalogMode(bool)>:
  // Set bit to 0 to enable analog mode
  void SetAsAnalogMode(bool set_as_analog = true) override
   10ac4:	b5f0      	push	{r4, r5, r6, r7, lr}
   10ac6:	b085      	sub	sp, #20
   10ac8:	4677      	mov	r7, lr
   10aca:	9003      	str	r0, [sp, #12]
   10acc:	460b      	mov	r3, r1
   10ace:	f88d 300b 	strb.w	r3, [sp, #11]
   10ad2:	463b      	mov	r3, r7
   10ad4:	4619      	mov	r1, r3
   10ad6:	4818      	ldr	r0, [pc, #96]	; (10b38 <Pin::SetAsAnalogMode(bool)+0x74>)
   10ad8:	f005 fcd2 	bl	16480 <__cyg_profile_func_enter>
  {
    pin_map->_register[port_][pin_] =
        BitPlace(pin_map->_register[port_][pin_], PinBitMap::kAnalogDigitalMode,
   10adc:	4b17      	ldr	r3, [pc, #92]	; (10b3c <Pin::SetAsAnalogMode(bool)+0x78>)
   10ade:	681b      	ldr	r3, [r3, #0]
   10ae0:	9a03      	ldr	r2, [sp, #12]
   10ae2:	7912      	ldrb	r2, [r2, #4]
   10ae4:	4610      	mov	r0, r2
   10ae6:	9a03      	ldr	r2, [sp, #12]
   10ae8:	7952      	ldrb	r2, [r2, #5]
   10aea:	4611      	mov	r1, r2
   10aec:	0142      	lsls	r2, r0, #5
   10aee:	440a      	add	r2, r1
   10af0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
                 !set_as_analog, 1);
   10af4:	f89d 300b 	ldrb.w	r3, [sp, #11]
   10af8:	f083 0301 	eor.w	r3, r3, #1
   10afc:	b2db      	uxtb	r3, r3
        BitPlace(pin_map->_register[port_][pin_], PinBitMap::kAnalogDigitalMode,
   10afe:	461a      	mov	r2, r3
    pin_map->_register[port_][pin_] =
   10b00:	4b0e      	ldr	r3, [pc, #56]	; (10b3c <Pin::SetAsAnalogMode(bool)+0x78>)
   10b02:	681c      	ldr	r4, [r3, #0]
   10b04:	9b03      	ldr	r3, [sp, #12]
   10b06:	791b      	ldrb	r3, [r3, #4]
   10b08:	461e      	mov	r6, r3
   10b0a:	9b03      	ldr	r3, [sp, #12]
   10b0c:	795b      	ldrb	r3, [r3, #5]
   10b0e:	461d      	mov	r5, r3
        BitPlace(pin_map->_register[port_][pin_], PinBitMap::kAnalogDigitalMode,
   10b10:	2301      	movs	r3, #1
   10b12:	9300      	str	r3, [sp, #0]
   10b14:	4613      	mov	r3, r2
   10b16:	2207      	movs	r2, #7
   10b18:	9803      	ldr	r0, [sp, #12]
   10b1a:	f000 f975 	bl	10e08 <Pin::BitPlace(unsigned long, unsigned long, unsigned long, unsigned long)>
   10b1e:	4602      	mov	r2, r0
    pin_map->_register[port_][pin_] =
   10b20:	0173      	lsls	r3, r6, #5
   10b22:	442b      	add	r3, r5
   10b24:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
   10b28:	463b      	mov	r3, r7
   10b2a:	4619      	mov	r1, r3
   10b2c:	4802      	ldr	r0, [pc, #8]	; (10b38 <Pin::SetAsAnalogMode(bool)+0x74>)
   10b2e:	f005 fcbb 	bl	164a8 <__cyg_profile_func_exit>
  }
   10b32:	bf00      	nop
   10b34:	b005      	add	sp, #20
   10b36:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10b38:	00010ac5 	.word	0x00010ac5
   10b3c:	10000000 	.word	0x10000000

00010b40 <Pin::EnableDigitalFilter(bool)>:
  // Enable by setting bit to 0 to enable digital filter.
  void EnableDigitalFilter(bool enable_digital_filter = true) override
   10b40:	b5f0      	push	{r4, r5, r6, r7, lr}
   10b42:	b085      	sub	sp, #20
   10b44:	4677      	mov	r7, lr
   10b46:	9003      	str	r0, [sp, #12]
   10b48:	460b      	mov	r3, r1
   10b4a:	f88d 300b 	strb.w	r3, [sp, #11]
   10b4e:	463b      	mov	r3, r7
   10b50:	4619      	mov	r1, r3
   10b52:	4818      	ldr	r0, [pc, #96]	; (10bb4 <Pin::EnableDigitalFilter(bool)+0x74>)
   10b54:	f005 fc94 	bl	16480 <__cyg_profile_func_enter>
  {
    pin_map->_register[port_][pin_] =
        BitPlace(pin_map->_register[port_][pin_], PinBitMap::kDigitalFilter,
   10b58:	4b17      	ldr	r3, [pc, #92]	; (10bb8 <Pin::EnableDigitalFilter(bool)+0x78>)
   10b5a:	681b      	ldr	r3, [r3, #0]
   10b5c:	9a03      	ldr	r2, [sp, #12]
   10b5e:	7912      	ldrb	r2, [r2, #4]
   10b60:	4610      	mov	r0, r2
   10b62:	9a03      	ldr	r2, [sp, #12]
   10b64:	7952      	ldrb	r2, [r2, #5]
   10b66:	4611      	mov	r1, r2
   10b68:	0142      	lsls	r2, r0, #5
   10b6a:	440a      	add	r2, r1
   10b6c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
                 !enable_digital_filter, 1);
   10b70:	f89d 300b 	ldrb.w	r3, [sp, #11]
   10b74:	f083 0301 	eor.w	r3, r3, #1
   10b78:	b2db      	uxtb	r3, r3
        BitPlace(pin_map->_register[port_][pin_], PinBitMap::kDigitalFilter,
   10b7a:	461a      	mov	r2, r3
    pin_map->_register[port_][pin_] =
   10b7c:	4b0e      	ldr	r3, [pc, #56]	; (10bb8 <Pin::EnableDigitalFilter(bool)+0x78>)
   10b7e:	681c      	ldr	r4, [r3, #0]
   10b80:	9b03      	ldr	r3, [sp, #12]
   10b82:	791b      	ldrb	r3, [r3, #4]
   10b84:	461e      	mov	r6, r3
   10b86:	9b03      	ldr	r3, [sp, #12]
   10b88:	795b      	ldrb	r3, [r3, #5]
   10b8a:	461d      	mov	r5, r3
        BitPlace(pin_map->_register[port_][pin_], PinBitMap::kDigitalFilter,
   10b8c:	2301      	movs	r3, #1
   10b8e:	9300      	str	r3, [sp, #0]
   10b90:	4613      	mov	r3, r2
   10b92:	2208      	movs	r2, #8
   10b94:	9803      	ldr	r0, [sp, #12]
   10b96:	f000 f937 	bl	10e08 <Pin::BitPlace(unsigned long, unsigned long, unsigned long, unsigned long)>
   10b9a:	4602      	mov	r2, r0
    pin_map->_register[port_][pin_] =
   10b9c:	0173      	lsls	r3, r6, #5
   10b9e:	442b      	add	r3, r5
   10ba0:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
   10ba4:	463b      	mov	r3, r7
   10ba6:	4619      	mov	r1, r3
   10ba8:	4802      	ldr	r0, [pc, #8]	; (10bb4 <Pin::EnableDigitalFilter(bool)+0x74>)
   10baa:	f005 fc7d 	bl	164a8 <__cyg_profile_func_exit>
  }
   10bae:	bf00      	nop
   10bb0:	b005      	add	sp, #20
   10bb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10bb4:	00010b41 	.word	0x00010b41
   10bb8:	10000000 	.word	0x10000000

00010bbc <Pin::EnableFastMode(bool)>:
  void EnableFastMode(bool enable_fast_mode = true) override
   10bbc:	b5f0      	push	{r4, r5, r6, r7, lr}
   10bbe:	b085      	sub	sp, #20
   10bc0:	4677      	mov	r7, lr
   10bc2:	9003      	str	r0, [sp, #12]
   10bc4:	460b      	mov	r3, r1
   10bc6:	f88d 300b 	strb.w	r3, [sp, #11]
   10bca:	463b      	mov	r3, r7
   10bcc:	4619      	mov	r1, r3
   10bce:	4816      	ldr	r0, [pc, #88]	; (10c28 <Pin::EnableFastMode(bool)+0x6c>)
   10bd0:	f005 fc56 	bl	16480 <__cyg_profile_func_enter>
  {
    pin_map->_register[port_][pin_] = BitPlace(
   10bd4:	4b15      	ldr	r3, [pc, #84]	; (10c2c <Pin::EnableFastMode(bool)+0x70>)
   10bd6:	681b      	ldr	r3, [r3, #0]
        pin_map->_register[port_][pin_], PinBitMap::kSlew, enable_fast_mode, 1);
   10bd8:	9a03      	ldr	r2, [sp, #12]
   10bda:	7912      	ldrb	r2, [r2, #4]
   10bdc:	4610      	mov	r0, r2
   10bde:	9a03      	ldr	r2, [sp, #12]
   10be0:	7952      	ldrb	r2, [r2, #5]
   10be2:	4611      	mov	r1, r2
    pin_map->_register[port_][pin_] = BitPlace(
   10be4:	0142      	lsls	r2, r0, #5
   10be6:	440a      	add	r2, r1
   10be8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   10bec:	f89d 200b 	ldrb.w	r2, [sp, #11]
   10bf0:	4b0e      	ldr	r3, [pc, #56]	; (10c2c <Pin::EnableFastMode(bool)+0x70>)
   10bf2:	681c      	ldr	r4, [r3, #0]
   10bf4:	9b03      	ldr	r3, [sp, #12]
   10bf6:	791b      	ldrb	r3, [r3, #4]
   10bf8:	461e      	mov	r6, r3
   10bfa:	9b03      	ldr	r3, [sp, #12]
   10bfc:	795b      	ldrb	r3, [r3, #5]
   10bfe:	461d      	mov	r5, r3
   10c00:	2301      	movs	r3, #1
   10c02:	9300      	str	r3, [sp, #0]
   10c04:	4613      	mov	r3, r2
   10c06:	2209      	movs	r2, #9
   10c08:	9803      	ldr	r0, [sp, #12]
   10c0a:	f000 f8fd 	bl	10e08 <Pin::BitPlace(unsigned long, unsigned long, unsigned long, unsigned long)>
   10c0e:	4602      	mov	r2, r0
   10c10:	0173      	lsls	r3, r6, #5
   10c12:	442b      	add	r3, r5
   10c14:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
   10c18:	463b      	mov	r3, r7
   10c1a:	4619      	mov	r1, r3
   10c1c:	4802      	ldr	r0, [pc, #8]	; (10c28 <Pin::EnableFastMode(bool)+0x6c>)
   10c1e:	f005 fc43 	bl	164a8 <__cyg_profile_func_exit>
  }
   10c22:	bf00      	nop
   10c24:	b005      	add	sp, #20
   10c26:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10c28:	00010bbd 	.word	0x00010bbd
   10c2c:	10000000 	.word	0x10000000

00010c30 <Pin::EnableI2cHighSpeedMode(bool)>:
  // Enable by setting bit to 0 for i2c high speed mode
  void EnableI2cHighSpeedMode(bool enable_high_speed = true) override
   10c30:	b5f0      	push	{r4, r5, r6, r7, lr}
   10c32:	b085      	sub	sp, #20
   10c34:	4677      	mov	r7, lr
   10c36:	9003      	str	r0, [sp, #12]
   10c38:	460b      	mov	r3, r1
   10c3a:	f88d 300b 	strb.w	r3, [sp, #11]
   10c3e:	463b      	mov	r3, r7
   10c40:	4619      	mov	r1, r3
   10c42:	4818      	ldr	r0, [pc, #96]	; (10ca4 <Pin::EnableI2cHighSpeedMode(bool)+0x74>)
   10c44:	f005 fc1c 	bl	16480 <__cyg_profile_func_enter>
  {
    pin_map->_register[port_][pin_] =
        BitPlace(pin_map->_register[port_][pin_], PinBitMap::kI2cHighSpeed,
   10c48:	4b17      	ldr	r3, [pc, #92]	; (10ca8 <Pin::EnableI2cHighSpeedMode(bool)+0x78>)
   10c4a:	681b      	ldr	r3, [r3, #0]
   10c4c:	9a03      	ldr	r2, [sp, #12]
   10c4e:	7912      	ldrb	r2, [r2, #4]
   10c50:	4610      	mov	r0, r2
   10c52:	9a03      	ldr	r2, [sp, #12]
   10c54:	7952      	ldrb	r2, [r2, #5]
   10c56:	4611      	mov	r1, r2
   10c58:	0142      	lsls	r2, r0, #5
   10c5a:	440a      	add	r2, r1
   10c5c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
                 !enable_high_speed, 1);
   10c60:	f89d 300b 	ldrb.w	r3, [sp, #11]
   10c64:	f083 0301 	eor.w	r3, r3, #1
   10c68:	b2db      	uxtb	r3, r3
        BitPlace(pin_map->_register[port_][pin_], PinBitMap::kI2cHighSpeed,
   10c6a:	461a      	mov	r2, r3
    pin_map->_register[port_][pin_] =
   10c6c:	4b0e      	ldr	r3, [pc, #56]	; (10ca8 <Pin::EnableI2cHighSpeedMode(bool)+0x78>)
   10c6e:	681c      	ldr	r4, [r3, #0]
   10c70:	9b03      	ldr	r3, [sp, #12]
   10c72:	791b      	ldrb	r3, [r3, #4]
   10c74:	461e      	mov	r6, r3
   10c76:	9b03      	ldr	r3, [sp, #12]
   10c78:	795b      	ldrb	r3, [r3, #5]
   10c7a:	461d      	mov	r5, r3
        BitPlace(pin_map->_register[port_][pin_], PinBitMap::kI2cHighSpeed,
   10c7c:	2301      	movs	r3, #1
   10c7e:	9300      	str	r3, [sp, #0]
   10c80:	4613      	mov	r3, r2
   10c82:	2208      	movs	r2, #8
   10c84:	9803      	ldr	r0, [sp, #12]
   10c86:	f000 f8bf 	bl	10e08 <Pin::BitPlace(unsigned long, unsigned long, unsigned long, unsigned long)>
   10c8a:	4602      	mov	r2, r0
    pin_map->_register[port_][pin_] =
   10c8c:	0173      	lsls	r3, r6, #5
   10c8e:	442b      	add	r3, r5
   10c90:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
   10c94:	463b      	mov	r3, r7
   10c96:	4619      	mov	r1, r3
   10c98:	4802      	ldr	r0, [pc, #8]	; (10ca4 <Pin::EnableI2cHighSpeedMode(bool)+0x74>)
   10c9a:	f005 fc05 	bl	164a8 <__cyg_profile_func_exit>
  }
   10c9e:	bf00      	nop
   10ca0:	b005      	add	sp, #20
   10ca2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10ca4:	00010c31 	.word	0x00010c31
   10ca8:	10000000 	.word	0x10000000

00010cac <Pin::EnableI2cHighCurrentDrive(bool)>:
  void EnableI2cHighCurrentDrive(bool enable_high_current = true) override
   10cac:	b5f0      	push	{r4, r5, r6, r7, lr}
   10cae:	b085      	sub	sp, #20
   10cb0:	4677      	mov	r7, lr
   10cb2:	9003      	str	r0, [sp, #12]
   10cb4:	460b      	mov	r3, r1
   10cb6:	f88d 300b 	strb.w	r3, [sp, #11]
   10cba:	463b      	mov	r3, r7
   10cbc:	4619      	mov	r1, r3
   10cbe:	4816      	ldr	r0, [pc, #88]	; (10d18 <Pin::EnableI2cHighCurrentDrive(bool)+0x6c>)
   10cc0:	f005 fbde 	bl	16480 <__cyg_profile_func_enter>
  {
    pin_map->_register[port_][pin_] =
        BitPlace(pin_map->_register[port_][pin_],
   10cc4:	4b15      	ldr	r3, [pc, #84]	; (10d1c <Pin::EnableI2cHighCurrentDrive(bool)+0x70>)
   10cc6:	681b      	ldr	r3, [r3, #0]
   10cc8:	9a03      	ldr	r2, [sp, #12]
   10cca:	7912      	ldrb	r2, [r2, #4]
   10ccc:	4610      	mov	r0, r2
   10cce:	9a03      	ldr	r2, [sp, #12]
   10cd0:	7952      	ldrb	r2, [r2, #5]
   10cd2:	4611      	mov	r1, r2
   10cd4:	0142      	lsls	r2, r0, #5
   10cd6:	440a      	add	r2, r1
   10cd8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   10cdc:	f89d 200b 	ldrb.w	r2, [sp, #11]
    pin_map->_register[port_][pin_] =
   10ce0:	4b0e      	ldr	r3, [pc, #56]	; (10d1c <Pin::EnableI2cHighCurrentDrive(bool)+0x70>)
   10ce2:	681c      	ldr	r4, [r3, #0]
   10ce4:	9b03      	ldr	r3, [sp, #12]
   10ce6:	791b      	ldrb	r3, [r3, #4]
   10ce8:	461e      	mov	r6, r3
   10cea:	9b03      	ldr	r3, [sp, #12]
   10cec:	795b      	ldrb	r3, [r3, #5]
   10cee:	461d      	mov	r5, r3
        BitPlace(pin_map->_register[port_][pin_],
   10cf0:	2301      	movs	r3, #1
   10cf2:	9300      	str	r3, [sp, #0]
   10cf4:	4613      	mov	r3, r2
   10cf6:	2209      	movs	r2, #9
   10cf8:	9803      	ldr	r0, [sp, #12]
   10cfa:	f000 f885 	bl	10e08 <Pin::BitPlace(unsigned long, unsigned long, unsigned long, unsigned long)>
   10cfe:	4602      	mov	r2, r0
    pin_map->_register[port_][pin_] =
   10d00:	0173      	lsls	r3, r6, #5
   10d02:	442b      	add	r3, r5
   10d04:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
   10d08:	463b      	mov	r3, r7
   10d0a:	4619      	mov	r1, r3
   10d0c:	4802      	ldr	r0, [pc, #8]	; (10d18 <Pin::EnableI2cHighCurrentDrive(bool)+0x6c>)
   10d0e:	f005 fbcb 	bl	164a8 <__cyg_profile_func_exit>
                 PinBitMap::kI2cHighCurrentDrive, enable_high_current, 1);
  }
   10d12:	bf00      	nop
   10d14:	b005      	add	sp, #20
   10d16:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10d18:	00010cad 	.word	0x00010cad
   10d1c:	10000000 	.word	0x10000000

00010d20 <Pin::SetAsOpenDrain(bool)>:
  void SetAsOpenDrain(bool set_as_open_drain = true) override
   10d20:	b5f0      	push	{r4, r5, r6, r7, lr}
   10d22:	b085      	sub	sp, #20
   10d24:	4677      	mov	r7, lr
   10d26:	9003      	str	r0, [sp, #12]
   10d28:	460b      	mov	r3, r1
   10d2a:	f88d 300b 	strb.w	r3, [sp, #11]
   10d2e:	463b      	mov	r3, r7
   10d30:	4619      	mov	r1, r3
   10d32:	4816      	ldr	r0, [pc, #88]	; (10d8c <Pin::SetAsOpenDrain(bool)+0x6c>)
   10d34:	f005 fba4 	bl	16480 <__cyg_profile_func_enter>
  {
    pin_map->_register[port_][pin_] =
        BitPlace(pin_map->_register[port_][pin_], PinBitMap::kOpenDrain,
   10d38:	4b15      	ldr	r3, [pc, #84]	; (10d90 <Pin::SetAsOpenDrain(bool)+0x70>)
   10d3a:	681b      	ldr	r3, [r3, #0]
   10d3c:	9a03      	ldr	r2, [sp, #12]
   10d3e:	7912      	ldrb	r2, [r2, #4]
   10d40:	4610      	mov	r0, r2
   10d42:	9a03      	ldr	r2, [sp, #12]
   10d44:	7952      	ldrb	r2, [r2, #5]
   10d46:	4611      	mov	r1, r2
   10d48:	0142      	lsls	r2, r0, #5
   10d4a:	440a      	add	r2, r1
   10d4c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   10d50:	f89d 200b 	ldrb.w	r2, [sp, #11]
    pin_map->_register[port_][pin_] =
   10d54:	4b0e      	ldr	r3, [pc, #56]	; (10d90 <Pin::SetAsOpenDrain(bool)+0x70>)
   10d56:	681c      	ldr	r4, [r3, #0]
   10d58:	9b03      	ldr	r3, [sp, #12]
   10d5a:	791b      	ldrb	r3, [r3, #4]
   10d5c:	461e      	mov	r6, r3
   10d5e:	9b03      	ldr	r3, [sp, #12]
   10d60:	795b      	ldrb	r3, [r3, #5]
   10d62:	461d      	mov	r5, r3
        BitPlace(pin_map->_register[port_][pin_], PinBitMap::kOpenDrain,
   10d64:	2301      	movs	r3, #1
   10d66:	9300      	str	r3, [sp, #0]
   10d68:	4613      	mov	r3, r2
   10d6a:	220a      	movs	r2, #10
   10d6c:	9803      	ldr	r0, [sp, #12]
   10d6e:	f000 f84b 	bl	10e08 <Pin::BitPlace(unsigned long, unsigned long, unsigned long, unsigned long)>
   10d72:	4602      	mov	r2, r0
    pin_map->_register[port_][pin_] =
   10d74:	0173      	lsls	r3, r6, #5
   10d76:	442b      	add	r3, r5
   10d78:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
   10d7c:	463b      	mov	r3, r7
   10d7e:	4619      	mov	r1, r3
   10d80:	4802      	ldr	r0, [pc, #8]	; (10d8c <Pin::SetAsOpenDrain(bool)+0x6c>)
   10d82:	f005 fb91 	bl	164a8 <__cyg_profile_func_exit>
                 set_as_open_drain, 1);
  }
   10d86:	bf00      	nop
   10d88:	b005      	add	sp, #20
   10d8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10d8c:	00010d21 	.word	0x00010d21
   10d90:	10000000 	.word	0x10000000

00010d94 <Pin::EnableDac(bool)>:
  void EnableDac(bool enable_dac = true) override
   10d94:	b5f0      	push	{r4, r5, r6, r7, lr}
   10d96:	b085      	sub	sp, #20
   10d98:	4677      	mov	r7, lr
   10d9a:	9003      	str	r0, [sp, #12]
   10d9c:	460b      	mov	r3, r1
   10d9e:	f88d 300b 	strb.w	r3, [sp, #11]
   10da2:	463b      	mov	r3, r7
   10da4:	4619      	mov	r1, r3
   10da6:	4816      	ldr	r0, [pc, #88]	; (10e00 <Pin::EnableDac(bool)+0x6c>)
   10da8:	f005 fb6a 	bl	16480 <__cyg_profile_func_enter>
  {
    pin_map->_register[port_][pin_] = BitPlace(
   10dac:	4b15      	ldr	r3, [pc, #84]	; (10e04 <Pin::EnableDac(bool)+0x70>)
   10dae:	681b      	ldr	r3, [r3, #0]
        pin_map->_register[port_][pin_], PinBitMap::kDacEnable, enable_dac, 1);
   10db0:	9a03      	ldr	r2, [sp, #12]
   10db2:	7912      	ldrb	r2, [r2, #4]
   10db4:	4610      	mov	r0, r2
   10db6:	9a03      	ldr	r2, [sp, #12]
   10db8:	7952      	ldrb	r2, [r2, #5]
   10dba:	4611      	mov	r1, r2
    pin_map->_register[port_][pin_] = BitPlace(
   10dbc:	0142      	lsls	r2, r0, #5
   10dbe:	440a      	add	r2, r1
   10dc0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   10dc4:	f89d 200b 	ldrb.w	r2, [sp, #11]
   10dc8:	4b0e      	ldr	r3, [pc, #56]	; (10e04 <Pin::EnableDac(bool)+0x70>)
   10dca:	681c      	ldr	r4, [r3, #0]
   10dcc:	9b03      	ldr	r3, [sp, #12]
   10dce:	791b      	ldrb	r3, [r3, #4]
   10dd0:	461e      	mov	r6, r3
   10dd2:	9b03      	ldr	r3, [sp, #12]
   10dd4:	795b      	ldrb	r3, [r3, #5]
   10dd6:	461d      	mov	r5, r3
   10dd8:	2301      	movs	r3, #1
   10dda:	9300      	str	r3, [sp, #0]
   10ddc:	4613      	mov	r3, r2
   10dde:	2210      	movs	r2, #16
   10de0:	9803      	ldr	r0, [sp, #12]
   10de2:	f000 f811 	bl	10e08 <Pin::BitPlace(unsigned long, unsigned long, unsigned long, unsigned long)>
   10de6:	4602      	mov	r2, r0
   10de8:	0173      	lsls	r3, r6, #5
   10dea:	442b      	add	r3, r5
   10dec:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
   10df0:	463b      	mov	r3, r7
   10df2:	4619      	mov	r1, r3
   10df4:	4802      	ldr	r0, [pc, #8]	; (10e00 <Pin::EnableDac(bool)+0x6c>)
   10df6:	f005 fb57 	bl	164a8 <__cyg_profile_func_exit>
  }
   10dfa:	bf00      	nop
   10dfc:	b005      	add	sp, #20
   10dfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10e00:	00010d95 	.word	0x00010d95
   10e04:	10000000 	.word	0x10000000

00010e08 <Pin::BitPlace(unsigned long, unsigned long, unsigned long, unsigned long)>:
  inline uint32_t BitPlace(uint32_t target, uint32_t position, uint32_t value,
   10e08:	b530      	push	{r4, r5, lr}
   10e0a:	b087      	sub	sp, #28
   10e0c:	4675      	mov	r5, lr
   10e0e:	9003      	str	r0, [sp, #12]
   10e10:	9102      	str	r1, [sp, #8]
   10e12:	9201      	str	r2, [sp, #4]
   10e14:	9300      	str	r3, [sp, #0]
   10e16:	462b      	mov	r3, r5
   10e18:	4619      	mov	r1, r3
   10e1a:	4813      	ldr	r0, [pc, #76]	; (10e68 <Pin::BitPlace(unsigned long, unsigned long, unsigned long, unsigned long)+0x60>)
   10e1c:	f005 fb30 	bl	16480 <__cyg_profile_func_enter>
                           uint32_t value_width)
  {
    // Generate mask with all 1s
    uint32_t mask = 0xFFFFFFFF >> (32 - value_width);
   10e20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   10e22:	f1c3 0320 	rsb	r3, r3, #32
   10e26:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   10e2a:	fa22 f303 	lsr.w	r3, r2, r3
   10e2e:	9305      	str	r3, [sp, #20]
    target &= ~(mask << position);
   10e30:	9a05      	ldr	r2, [sp, #20]
   10e32:	9b01      	ldr	r3, [sp, #4]
   10e34:	fa02 f303 	lsl.w	r3, r2, r3
   10e38:	43db      	mvns	r3, r3
   10e3a:	9a02      	ldr	r2, [sp, #8]
   10e3c:	4013      	ands	r3, r2
   10e3e:	9302      	str	r3, [sp, #8]
    target |= (value & mask) << position;
   10e40:	9a00      	ldr	r2, [sp, #0]
   10e42:	9b05      	ldr	r3, [sp, #20]
   10e44:	401a      	ands	r2, r3
   10e46:	9b01      	ldr	r3, [sp, #4]
   10e48:	fa02 f303 	lsl.w	r3, r2, r3
   10e4c:	9a02      	ldr	r2, [sp, #8]
   10e4e:	4313      	orrs	r3, r2
   10e50:	9302      	str	r3, [sp, #8]
    return target;
   10e52:	9c02      	ldr	r4, [sp, #8]
   10e54:	462b      	mov	r3, r5
   10e56:	4619      	mov	r1, r3
   10e58:	4803      	ldr	r0, [pc, #12]	; (10e68 <Pin::BitPlace(unsigned long, unsigned long, unsigned long, unsigned long)+0x60>)
   10e5a:	f005 fb25 	bl	164a8 <__cyg_profile_func_exit>
   10e5e:	4623      	mov	r3, r4
  }
   10e60:	4618      	mov	r0, r3
   10e62:	b007      	add	sp, #28
   10e64:	bd30      	pop	{r4, r5, pc}
   10e66:	bf00      	nop
   10e68:	00010e09 	.word	0x00010e09

00010e6c <Pin::GetPort() const>:
  uint8_t GetPort() const override
   10e6c:	b530      	push	{r4, r5, lr}
   10e6e:	b083      	sub	sp, #12
   10e70:	4675      	mov	r5, lr
   10e72:	9001      	str	r0, [sp, #4]
   10e74:	462b      	mov	r3, r5
   10e76:	4619      	mov	r1, r3
   10e78:	4806      	ldr	r0, [pc, #24]	; (10e94 <Pin::GetPort() const+0x28>)
   10e7a:	f005 fb01 	bl	16480 <__cyg_profile_func_enter>
  {
    return port_;
   10e7e:	9b01      	ldr	r3, [sp, #4]
   10e80:	791c      	ldrb	r4, [r3, #4]
   10e82:	462b      	mov	r3, r5
   10e84:	4619      	mov	r1, r3
   10e86:	4803      	ldr	r0, [pc, #12]	; (10e94 <Pin::GetPort() const+0x28>)
   10e88:	f005 fb0e 	bl	164a8 <__cyg_profile_func_exit>
   10e8c:	4623      	mov	r3, r4
  }
   10e8e:	4618      	mov	r0, r3
   10e90:	b003      	add	sp, #12
   10e92:	bd30      	pop	{r4, r5, pc}
   10e94:	00010e6d 	.word	0x00010e6d

00010e98 <Pin::GetPin() const>:
  uint8_t GetPin() const override
   10e98:	b530      	push	{r4, r5, lr}
   10e9a:	b083      	sub	sp, #12
   10e9c:	4675      	mov	r5, lr
   10e9e:	9001      	str	r0, [sp, #4]
   10ea0:	462b      	mov	r3, r5
   10ea2:	4619      	mov	r1, r3
   10ea4:	4806      	ldr	r0, [pc, #24]	; (10ec0 <Pin::GetPin() const+0x28>)
   10ea6:	f005 faeb 	bl	16480 <__cyg_profile_func_enter>
  {
    return pin_;
   10eaa:	9b01      	ldr	r3, [sp, #4]
   10eac:	795c      	ldrb	r4, [r3, #5]
   10eae:	462b      	mov	r3, r5
   10eb0:	4619      	mov	r1, r3
   10eb2:	4803      	ldr	r0, [pc, #12]	; (10ec0 <Pin::GetPin() const+0x28>)
   10eb4:	f005 faf8 	bl	164a8 <__cyg_profile_func_exit>
   10eb8:	4623      	mov	r3, r4
  }
   10eba:	4618      	mov	r0, r3
   10ebc:	b003      	add	sp, #12
   10ebe:	bd30      	pop	{r4, r5, pc}
   10ec0:	00010e99 	.word	0x00010e99

00010ec4 <debug::PrintBacktrace(bool, void*)>:
}

[[gnu::no_instrument_function]]
inline void PrintBacktrace(bool show_make_command = false,
                           void * final_address   = nullptr)
{
   10ec4:	b500      	push	{lr}
   10ec6:	b08b      	sub	sp, #44	; 0x2c
   10ec8:	4603      	mov	r3, r0
   10eca:	9100      	str	r1, [sp, #0]
   10ecc:	f88d 3007 	strb.w	r3, [sp, #7]
  printf("Stack Depth = %zd\n", GetStackDepth());
   10ed0:	f005 fb0c 	bl	164ec <GetStackDepth()>
   10ed4:	4603      	mov	r3, r0
   10ed6:	4619      	mov	r1, r3
   10ed8:	4831      	ldr	r0, [pc, #196]	; (10fa0 <debug::PrintBacktrace(bool, void*)+0xdc>)
   10eda:	f006 fd4d 	bl	17978 <printf>
  // stack_depth-1 to ignore PrintBacktrace()
  // PrintBacktrace shouldn't be ignored in profiling because it causes
  // the exit to still fire, which can result in a negative stack_depth
  void ** list_of_called_functions = GetStackTrace();
   10ede:	f005 faf1 	bl	164c4 <GetStackTrace()>
   10ee2:	9007      	str	r0, [sp, #28]
  size_t stack_depth               = GetStackDepth();
   10ee4:	f005 fb02 	bl	164ec <GetStackDepth()>
   10ee8:	9006      	str	r0, [sp, #24]
  // Ignore the last function as it is the Backtrace function
  for (size_t pos = 0; pos < stack_depth - 1; pos++)
   10eea:	2300      	movs	r3, #0
   10eec:	9309      	str	r3, [sp, #36]	; 0x24
   10eee:	9b06      	ldr	r3, [sp, #24]
   10ef0:	3b01      	subs	r3, #1
   10ef2:	9a09      	ldr	r2, [sp, #36]	; 0x24
   10ef4:	429a      	cmp	r2, r3
   10ef6:	d20d      	bcs.n	10f14 <debug::PrintBacktrace(bool, void*)+0x50>
  {
    printf("  #%zu: 0x%p\n", pos, list_of_called_functions[pos]);
   10ef8:	9b09      	ldr	r3, [sp, #36]	; 0x24
   10efa:	009b      	lsls	r3, r3, #2
   10efc:	9a07      	ldr	r2, [sp, #28]
   10efe:	4413      	add	r3, r2
   10f00:	681b      	ldr	r3, [r3, #0]
   10f02:	461a      	mov	r2, r3
   10f04:	9909      	ldr	r1, [sp, #36]	; 0x24
   10f06:	4827      	ldr	r0, [pc, #156]	; (10fa4 <debug::PrintBacktrace(bool, void*)+0xe0>)
   10f08:	f006 fd36 	bl	17978 <printf>
  for (size_t pos = 0; pos < stack_depth - 1; pos++)
   10f0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   10f0e:	3301      	adds	r3, #1
   10f10:	9309      	str	r3, [sp, #36]	; 0x24
   10f12:	e7ec      	b.n	10eee <debug::PrintBacktrace(bool, void*)+0x2a>
  }
  if (final_address != nullptr)
   10f14:	9b00      	ldr	r3, [sp, #0]
   10f16:	2b00      	cmp	r3, #0
   10f18:	d006      	beq.n	10f28 <debug::PrintBacktrace(bool, void*)+0x64>
  {
    printf("  #%zu: 0x%p\n", stack_depth - 1, final_address);
   10f1a:	9b06      	ldr	r3, [sp, #24]
   10f1c:	3b01      	subs	r3, #1
   10f1e:	9a00      	ldr	r2, [sp, #0]
   10f20:	4619      	mov	r1, r3
   10f22:	4820      	ldr	r0, [pc, #128]	; (10fa4 <debug::PrintBacktrace(bool, void*)+0xe0>)
   10f24:	f006 fd28 	bl	17978 <printf>
  }
  if (show_make_command)
   10f28:	f89d 3007 	ldrb.w	r3, [sp, #7]
   10f2c:	2b00      	cmp	r3, #0
   10f2e:	d033      	beq.n	10f98 <debug::PrintBacktrace(bool, void*)+0xd4>
  {
    constexpr const char kBuildType[] =
   10f30:	4a1d      	ldr	r2, [pc, #116]	; (10fa8 <debug::PrintBacktrace(bool, void*)+0xe4>)
   10f32:	ab03      	add	r3, sp, #12
   10f34:	ca07      	ldmia	r2, {r0, r1, r2}
   10f36:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#if defined(APPLICATION)
        "application";
#else
        "bootloader";
#endif
    puts("\nRun: the following command in your project directory");
   10f3a:	481c      	ldr	r0, [pc, #112]	; (10fac <debug::PrintBacktrace(bool, void*)+0xe8>)
   10f3c:	f005 fa70 	bl	16420 <puts>
    printf("\n  " SJ2_BOLD_WHITE "make stacktrace-%s TRACES=\"", kBuildType);
   10f40:	ab03      	add	r3, sp, #12
   10f42:	4619      	mov	r1, r3
   10f44:	481a      	ldr	r0, [pc, #104]	; (10fb0 <debug::PrintBacktrace(bool, void*)+0xec>)
   10f46:	f006 fd17 	bl	17978 <printf>
    for (size_t pos = 0; pos < stack_depth - 1; pos++)
   10f4a:	2300      	movs	r3, #0
   10f4c:	9308      	str	r3, [sp, #32]
   10f4e:	9b06      	ldr	r3, [sp, #24]
   10f50:	3b01      	subs	r3, #1
   10f52:	9a08      	ldr	r2, [sp, #32]
   10f54:	429a      	cmp	r2, r3
   10f56:	d212      	bcs.n	10f7e <debug::PrintBacktrace(bool, void*)+0xba>
    {
      if (pos != 0)
   10f58:	9b08      	ldr	r3, [sp, #32]
   10f5a:	2b00      	cmp	r3, #0
   10f5c:	d002      	beq.n	10f64 <debug::PrintBacktrace(bool, void*)+0xa0>
      {
        putchar(' ');
   10f5e:	2020      	movs	r0, #32
   10f60:	f005 fa42 	bl	163e8 <putchar>
      }
      printf("0x%p", list_of_called_functions[pos]);
   10f64:	9b08      	ldr	r3, [sp, #32]
   10f66:	009b      	lsls	r3, r3, #2
   10f68:	9a07      	ldr	r2, [sp, #28]
   10f6a:	4413      	add	r3, r2
   10f6c:	681b      	ldr	r3, [r3, #0]
   10f6e:	4619      	mov	r1, r3
   10f70:	4810      	ldr	r0, [pc, #64]	; (10fb4 <debug::PrintBacktrace(bool, void*)+0xf0>)
   10f72:	f006 fd01 	bl	17978 <printf>
    for (size_t pos = 0; pos < stack_depth - 1; pos++)
   10f76:	9b08      	ldr	r3, [sp, #32]
   10f78:	3301      	adds	r3, #1
   10f7a:	9308      	str	r3, [sp, #32]
   10f7c:	e7e7      	b.n	10f4e <debug::PrintBacktrace(bool, void*)+0x8a>
    }
    if (final_address != nullptr)
   10f7e:	9b00      	ldr	r3, [sp, #0]
   10f80:	2b00      	cmp	r3, #0
   10f82:	d003      	beq.n	10f8c <debug::PrintBacktrace(bool, void*)+0xc8>
    {
      printf(" 0x%p", final_address);
   10f84:	9900      	ldr	r1, [sp, #0]
   10f86:	480c      	ldr	r0, [pc, #48]	; (10fb8 <debug::PrintBacktrace(bool, void*)+0xf4>)
   10f88:	f006 fcf6 	bl	17978 <printf>
    }
    puts("\"\n" SJ2_COLOR_RESET);
   10f8c:	480b      	ldr	r0, [pc, #44]	; (10fbc <debug::PrintBacktrace(bool, void*)+0xf8>)
   10f8e:	f005 fa47 	bl	16420 <puts>
    puts(
   10f92:	480b      	ldr	r0, [pc, #44]	; (10fc0 <debug::PrintBacktrace(bool, void*)+0xfc>)
   10f94:	f005 fa44 	bl	16420 <puts>
        "This will report the file and line number that led to this function "
        "being called.");
  }
}
   10f98:	bf00      	nop
   10f9a:	b00b      	add	sp, #44	; 0x2c
   10f9c:	f85d fb04 	ldr.w	pc, [sp], #4
   10fa0:	0001926c 	.word	0x0001926c
   10fa4:	00019280 	.word	0x00019280
   10fa8:	0001935c 	.word	0x0001935c
   10fac:	00019290 	.word	0x00019290
   10fb0:	000192c8 	.word	0x000192c8
   10fb4:	000192f0 	.word	0x000192f0
   10fb8:	000192f8 	.word	0x000192f8
   10fbc:	00019300 	.word	0x00019300
   10fc0:	00019308 	.word	0x00019308

00010fc4 <(anonymous namespace)::DefaultUptime()>:
{
// uptime in nanoseconds
inline uint64_t uptime = 0;
// Returns the system uptime in nanoseconds, do not use this function directly
[[gnu::always_inline]] inline uint64_t DefaultUptime()
{
   10fc4:	b570      	push	{r4, r5, r6, lr}
   10fc6:	4676      	mov	r6, lr
   10fc8:	4633      	mov	r3, r6
   10fca:	4619      	mov	r1, r3
   10fcc:	4807      	ldr	r0, [pc, #28]	; (10fec <(anonymous namespace)::DefaultUptime()+0x28>)
   10fce:	f005 fa57 	bl	16480 <__cyg_profile_func_enter>
  return uptime;
   10fd2:	4b07      	ldr	r3, [pc, #28]	; (10ff0 <(anonymous namespace)::DefaultUptime()+0x2c>)
   10fd4:	e9d3 4500 	ldrd	r4, r5, [r3]
   10fd8:	4633      	mov	r3, r6
   10fda:	4619      	mov	r1, r3
   10fdc:	4803      	ldr	r0, [pc, #12]	; (10fec <(anonymous namespace)::DefaultUptime()+0x28>)
   10fde:	f005 fa63 	bl	164a8 <__cyg_profile_func_exit>
   10fe2:	4623      	mov	r3, r4
   10fe4:	462c      	mov	r4, r5
}
   10fe6:	4618      	mov	r0, r3
   10fe8:	4621      	mov	r1, r4
   10fea:	bd70      	pop	{r4, r5, r6, pc}
   10fec:	00010fc5 	.word	0x00010fc5
   10ff0:	10000668 	.word	0x10000668

00010ff4 <Milliseconds()>:
{
  Uptime = uptime_function;
}
// Get system uptime in milliseconds as a 64-bit integer
inline uint64_t Milliseconds()
{
   10ff4:	b570      	push	{r4, r5, r6, lr}
   10ff6:	4674      	mov	r4, lr
   10ff8:	4623      	mov	r3, r4
   10ffa:	4619      	mov	r1, r3
   10ffc:	480c      	ldr	r0, [pc, #48]	; (11030 <Milliseconds()+0x3c>)
   10ffe:	f005 fa3f 	bl	16480 <__cyg_profile_func_enter>
  return Uptime() / 1'000;
   11002:	4b0c      	ldr	r3, [pc, #48]	; (11034 <Milliseconds()+0x40>)
   11004:	681b      	ldr	r3, [r3, #0]
   11006:	4798      	blx	r3
   11008:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1100c:	f04f 0300 	mov.w	r3, #0
   11010:	f007 ff34 	bl	18e7c <__aeabi_uldivmod>
   11014:	4602      	mov	r2, r0
   11016:	460b      	mov	r3, r1
   11018:	4615      	mov	r5, r2
   1101a:	461e      	mov	r6, r3
   1101c:	4623      	mov	r3, r4
   1101e:	4619      	mov	r1, r3
   11020:	4803      	ldr	r0, [pc, #12]	; (11030 <Milliseconds()+0x3c>)
   11022:	f005 fa41 	bl	164a8 <__cyg_profile_func_exit>
   11026:	462b      	mov	r3, r5
   11028:	4634      	mov	r4, r6
}
   1102a:	4618      	mov	r0, r3
   1102c:	4621      	mov	r1, r4
   1102e:	bd70      	pop	{r4, r5, r6, pc}
   11030:	00010ff5 	.word	0x00010ff5
   11034:	10000004 	.word	0x10000004

00011038 <Wait(unsigned long long)::{lambda()#1}::operator()() const>:
  return status;
}

inline Status Wait(uint64_t timeout)
{
  return Wait(timeout, []() -> bool { return false; });
   11038:	b530      	push	{r4, r5, lr}
   1103a:	b083      	sub	sp, #12
   1103c:	4675      	mov	r5, lr
   1103e:	9001      	str	r0, [sp, #4]
   11040:	462b      	mov	r3, r5
   11042:	4619      	mov	r1, r3
   11044:	4806      	ldr	r0, [pc, #24]	; (11060 <Wait(unsigned long long)::{lambda()#1}::operator()() const+0x28>)
   11046:	f005 fa1b 	bl	16480 <__cyg_profile_func_enter>
   1104a:	2400      	movs	r4, #0
   1104c:	462b      	mov	r3, r5
   1104e:	4619      	mov	r1, r3
   11050:	4803      	ldr	r0, [pc, #12]	; (11060 <Wait(unsigned long long)::{lambda()#1}::operator()() const+0x28>)
   11052:	f005 fa29 	bl	164a8 <__cyg_profile_func_exit>
   11056:	4623      	mov	r3, r4
   11058:	4618      	mov	r0, r3
   1105a:	b003      	add	sp, #12
   1105c:	bd30      	pop	{r4, r5, pc}
   1105e:	bf00      	nop
   11060:	00011039 	.word	0x00011039

00011064 <Wait(unsigned long long)::{lambda()#1}::_FUN()>:
   11064:	b538      	push	{r3, r4, r5, lr}
   11066:	4674      	mov	r4, lr
   11068:	4623      	mov	r3, r4
   1106a:	4619      	mov	r1, r3
   1106c:	4807      	ldr	r0, [pc, #28]	; (1108c <Wait(unsigned long long)::{lambda()#1}::_FUN()+0x28>)
   1106e:	f005 fa07 	bl	16480 <__cyg_profile_func_enter>
   11072:	2000      	movs	r0, #0
   11074:	f7ff ffe0 	bl	11038 <Wait(unsigned long long)::{lambda()#1}::operator()() const>
   11078:	4603      	mov	r3, r0
   1107a:	461d      	mov	r5, r3
   1107c:	4623      	mov	r3, r4
   1107e:	4619      	mov	r1, r3
   11080:	4802      	ldr	r0, [pc, #8]	; (1108c <Wait(unsigned long long)::{lambda()#1}::_FUN()+0x28>)
   11082:	f005 fa11 	bl	164a8 <__cyg_profile_func_exit>
   11086:	462b      	mov	r3, r5
   11088:	4618      	mov	r0, r3
   1108a:	bd38      	pop	{r3, r4, r5, pc}
   1108c:	00011065 	.word	0x00011065

00011090 <Wait(unsigned long long)>:
{
   11090:	b5f0      	push	{r4, r5, r6, r7, lr}
   11092:	b089      	sub	sp, #36	; 0x24
   11094:	4675      	mov	r5, lr
   11096:	e9cd 0100 	strd	r0, r1, [sp]
   1109a:	462b      	mov	r3, r5
   1109c:	4619      	mov	r1, r3
   1109e:	482b      	ldr	r0, [pc, #172]	; (1114c <Wait(unsigned long long)+0xbc>)
   110a0:	f005 f9ee 	bl	16480 <__cyg_profile_func_enter>
   110a4:	e9dd 3400 	ldrd	r3, r4, [sp]
   110a8:	e9cd 3406 	strd	r3, r4, [sp, #24]
   110ac:	f88d 6008 	strb.w	r6, [sp, #8]
   110b0:	462b      	mov	r3, r5
   110b2:	4619      	mov	r1, r3
   110b4:	4826      	ldr	r0, [pc, #152]	; (11150 <Wait(unsigned long long)+0xc0>)
   110b6:	f005 f9e3 	bl	16480 <__cyg_profile_func_enter>
  uint64_t timeout_time = 0;
   110ba:	f04f 0300 	mov.w	r3, #0
   110be:	f04f 0400 	mov.w	r4, #0
   110c2:	e9cd 3404 	strd	r3, r4, [sp, #16]
  if (timeout == kMaxWait)
   110c6:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
   110ca:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
   110ce:	bf08      	it	eq
   110d0:	f1b3 3fff 	cmpeq.w	r3, #4294967295	; 0xffffffff
   110d4:	d106      	bne.n	110e4 <Wait(unsigned long long)+0x54>
    timeout_time = kMaxWait;
   110d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   110da:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   110de:	e9cd 3404 	strd	r3, r4, [sp, #16]
   110e2:	e00a      	b.n	110fa <Wait(unsigned long long)+0x6a>
    timeout_time = Milliseconds() + timeout;
   110e4:	f7ff ff86 	bl	10ff4 <Milliseconds()>
   110e8:	460a      	mov	r2, r1
   110ea:	4601      	mov	r1, r0
   110ec:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
   110f0:	185e      	adds	r6, r3, r1
   110f2:	eb44 0702 	adc.w	r7, r4, r2
   110f6:	e9cd 6704 	strd	r6, r7, [sp, #16]
  Status status = Status::kTimedOut;
   110fa:	2301      	movs	r3, #1
   110fc:	9303      	str	r3, [sp, #12]
  while (Milliseconds() < timeout_time)
   110fe:	f7ff ff79 	bl	10ff4 <Milliseconds()>
   11102:	460a      	mov	r2, r1
   11104:	4601      	mov	r1, r0
   11106:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
   1110a:	42a2      	cmp	r2, r4
   1110c:	bf08      	it	eq
   1110e:	4299      	cmpeq	r1, r3
   11110:	bf34      	ite	cc
   11112:	2301      	movcc	r3, #1
   11114:	2300      	movcs	r3, #0
   11116:	b2db      	uxtb	r3, r3
   11118:	2b00      	cmp	r3, #0
   1111a:	d008      	beq.n	1112e <Wait(unsigned long long)+0x9e>
    if (is_done())
   1111c:	ab02      	add	r3, sp, #8
   1111e:	4618      	mov	r0, r3
   11120:	f7ff ff8a 	bl	11038 <Wait(unsigned long long)::{lambda()#1}::operator()() const>
   11124:	4603      	mov	r3, r0
   11126:	2b00      	cmp	r3, #0
   11128:	d0e9      	beq.n	110fe <Wait(unsigned long long)+0x6e>
      status = Status::kSuccess;
   1112a:	2300      	movs	r3, #0
   1112c:	9303      	str	r3, [sp, #12]
  return status;
   1112e:	9c03      	ldr	r4, [sp, #12]
   11130:	462b      	mov	r3, r5
   11132:	4619      	mov	r1, r3
   11134:	4806      	ldr	r0, [pc, #24]	; (11150 <Wait(unsigned long long)+0xc0>)
   11136:	f005 f9b7 	bl	164a8 <__cyg_profile_func_exit>
   1113a:	462b      	mov	r3, r5
   1113c:	4619      	mov	r1, r3
   1113e:	4803      	ldr	r0, [pc, #12]	; (1114c <Wait(unsigned long long)+0xbc>)
   11140:	f005 f9b2 	bl	164a8 <__cyg_profile_func_exit>
  return Wait(timeout, []() -> bool { return false; });
   11144:	4623      	mov	r3, r4
}
   11146:	4618      	mov	r0, r3
   11148:	b009      	add	sp, #36	; 0x24
   1114a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1114c:	00011091 	.word	0x00011091
   11150:	00014961 	.word	0x00014961

00011154 <Delay(unsigned long long)>:

// Delay the system for a duration of time
inline void Delay([[maybe_unused]] uint64_t delay_time_ms)
{
   11154:	b510      	push	{r4, lr}
   11156:	b082      	sub	sp, #8
   11158:	4674      	mov	r4, lr
   1115a:	e9cd 0100 	strd	r0, r1, [sp]
   1115e:	4623      	mov	r3, r4
   11160:	4619      	mov	r1, r3
   11162:	4807      	ldr	r0, [pc, #28]	; (11180 <Delay(unsigned long long)+0x2c>)
   11164:	f005 f98c 	bl	16480 <__cyg_profile_func_enter>
#if defined(HOST_TEST)
  return;
#else
  Wait(delay_time_ms);
   11168:	e9dd 0100 	ldrd	r0, r1, [sp]
   1116c:	f7ff ff90 	bl	11090 <Wait(unsigned long long)>
   11170:	4623      	mov	r3, r4
   11172:	4619      	mov	r1, r3
   11174:	4802      	ldr	r0, [pc, #8]	; (11180 <Delay(unsigned long long)+0x2c>)
   11176:	f005 f997 	bl	164a8 <__cyg_profile_func_exit>
#endif  // HOST_TEST
}
   1117a:	bf00      	nop
   1117c:	b002      	add	sp, #8
   1117e:	bd10      	pop	{r4, pc}
   11180:	00011155 	.word	0x00011155

00011184 <GpioInterface::GpioInterface()>:
#include "L0_LowLevel/LPC40xx.h"
#include "L1_Drivers/pin.hpp"
#include "utility/enum.hpp"
#include "utility/log.hpp"

class GpioInterface
   11184:	b530      	push	{r4, r5, lr}
   11186:	b083      	sub	sp, #12
   11188:	4675      	mov	r5, lr
   1118a:	9001      	str	r0, [sp, #4]
   1118c:	462b      	mov	r3, r5
   1118e:	4619      	mov	r1, r3
   11190:	4807      	ldr	r0, [pc, #28]	; (111b0 <GpioInterface::GpioInterface()+0x2c>)
   11192:	f005 f975 	bl	16480 <__cyg_profile_func_enter>
   11196:	4a07      	ldr	r2, [pc, #28]	; (111b4 <GpioInterface::GpioInterface()+0x30>)
   11198:	9b01      	ldr	r3, [sp, #4]
   1119a:	601a      	str	r2, [r3, #0]
   1119c:	9c01      	ldr	r4, [sp, #4]
   1119e:	462b      	mov	r3, r5
   111a0:	4619      	mov	r1, r3
   111a2:	4803      	ldr	r0, [pc, #12]	; (111b0 <GpioInterface::GpioInterface()+0x2c>)
   111a4:	f005 f980 	bl	164a8 <__cyg_profile_func_exit>
   111a8:	4623      	mov	r3, r4
   111aa:	4618      	mov	r0, r3
   111ac:	b003      	add	sp, #12
   111ae:	bd30      	pop	{r4, r5, pc}
   111b0:	00011185 	.word	0x00011185
   111b4:	00019cd8 	.word	0x00019cd8

000111b8 <Gpio::Gpio(unsigned char, unsigned char)>:
  };

  inline static volatile uint32_t * port_status = &(LPC_GPIOINT->IntStatus);

  // For port 0-4, pins 0-31 are available. Port 5 only has pins 0-4 available.
  constexpr Gpio(uint8_t port_number, uint8_t pin_number)
   111b8:	b530      	push	{r4, r5, lr}
   111ba:	b083      	sub	sp, #12
   111bc:	4675      	mov	r5, lr
   111be:	9001      	str	r0, [sp, #4]
   111c0:	460b      	mov	r3, r1
   111c2:	f88d 3003 	strb.w	r3, [sp, #3]
   111c6:	4613      	mov	r3, r2
   111c8:	f88d 3002 	strb.w	r3, [sp, #2]
   111cc:	462b      	mov	r3, r5
   111ce:	4619      	mov	r1, r3
   111d0:	4816      	ldr	r0, [pc, #88]	; (1122c <Gpio::Gpio(unsigned char, unsigned char)+0x74>)
   111d2:	f005 f955 	bl	16480 <__cyg_profile_func_enter>
      : interupt_port_(false),
        pin_(&lpc40xx_pin_),
        lpc40xx_pin_(port_number, pin_number)
   111d6:	9b01      	ldr	r3, [sp, #4]
   111d8:	4618      	mov	r0, r3
   111da:	f7ff ffd3 	bl	11184 <GpioInterface::GpioInterface()>
   111de:	4a14      	ldr	r2, [pc, #80]	; (11230 <Gpio::Gpio(unsigned char, unsigned char)+0x78>)
   111e0:	9b01      	ldr	r3, [sp, #4]
   111e2:	601a      	str	r2, [r3, #0]
   111e4:	9b01      	ldr	r3, [sp, #4]
   111e6:	2200      	movs	r2, #0
   111e8:	711a      	strb	r2, [r3, #4]
   111ea:	9b01      	ldr	r3, [sp, #4]
   111ec:	f103 020c 	add.w	r2, r3, #12
   111f0:	9b01      	ldr	r3, [sp, #4]
   111f2:	609a      	str	r2, [r3, #8]
   111f4:	9b01      	ldr	r3, [sp, #4]
   111f6:	330c      	adds	r3, #12
   111f8:	f89d 2002 	ldrb.w	r2, [sp, #2]
   111fc:	f89d 1003 	ldrb.w	r1, [sp, #3]
   11200:	4618      	mov	r0, r3
   11202:	f7ff fb43 	bl	1088c <Pin::Pin(unsigned char, unsigned char)>
  {
    interupt_port_ = (port_number == 2) ? 1 : 0;
   11206:	f89d 3003 	ldrb.w	r3, [sp, #3]
   1120a:	2b02      	cmp	r3, #2
   1120c:	d101      	bne.n	11212 <Gpio::Gpio(unsigned char, unsigned char)+0x5a>
   1120e:	2201      	movs	r2, #1
   11210:	e000      	b.n	11214 <Gpio::Gpio(unsigned char, unsigned char)+0x5c>
   11212:	2200      	movs	r2, #0
   11214:	9b01      	ldr	r3, [sp, #4]
   11216:	711a      	strb	r2, [r3, #4]
  }
   11218:	9c01      	ldr	r4, [sp, #4]
   1121a:	462b      	mov	r3, r5
   1121c:	4619      	mov	r1, r3
   1121e:	4803      	ldr	r0, [pc, #12]	; (1122c <Gpio::Gpio(unsigned char, unsigned char)+0x74>)
   11220:	f005 f942 	bl	164a8 <__cyg_profile_func_exit>
   11224:	4623      	mov	r3, r4
   11226:	4618      	mov	r0, r3
   11228:	b003      	add	sp, #12
   1122a:	bd30      	pop	{r4, r5, pc}
   1122c:	000111b9 	.word	0x000111b9
   11230:	00019c90 	.word	0x00019c90

00011234 <Gpio::SetAsInput()>:
      : interupt_port_(false), pin_(pin), lpc40xx_pin_(Pin::CreateInactivePin())
  {
    interupt_port_ = pin_->GetPort();
  }
  // Sets the GPIO pin direction as input
  void SetAsInput(void) override
   11234:	b530      	push	{r4, r5, lr}
   11236:	b083      	sub	sp, #12
   11238:	4675      	mov	r5, lr
   1123a:	9001      	str	r0, [sp, #4]
   1123c:	462b      	mov	r3, r5
   1123e:	4619      	mov	r1, r3
   11240:	4819      	ldr	r0, [pc, #100]	; (112a8 <Gpio::SetAsInput()+0x74>)
   11242:	f005 f91d 	bl	16480 <__cyg_profile_func_enter>
  {
    pin_->SetPinFunction(kGpioFunction);
   11246:	9b01      	ldr	r3, [sp, #4]
   11248:	689a      	ldr	r2, [r3, #8]
   1124a:	9b01      	ldr	r3, [sp, #4]
   1124c:	689b      	ldr	r3, [r3, #8]
   1124e:	681b      	ldr	r3, [r3, #0]
   11250:	681b      	ldr	r3, [r3, #0]
   11252:	2100      	movs	r1, #0
   11254:	4610      	mov	r0, r2
   11256:	4798      	blx	r3
    gpio_port[pin_->GetPort()]->DIR &= ~(1 << pin_->GetPin());
   11258:	9b01      	ldr	r3, [sp, #4]
   1125a:	689a      	ldr	r2, [r3, #8]
   1125c:	9b01      	ldr	r3, [sp, #4]
   1125e:	689b      	ldr	r3, [r3, #8]
   11260:	681b      	ldr	r3, [r3, #0]
   11262:	3330      	adds	r3, #48	; 0x30
   11264:	681b      	ldr	r3, [r3, #0]
   11266:	4610      	mov	r0, r2
   11268:	4798      	blx	r3
   1126a:	4603      	mov	r3, r0
   1126c:	461a      	mov	r2, r3
   1126e:	2301      	movs	r3, #1
   11270:	4093      	lsls	r3, r2
   11272:	43dc      	mvns	r4, r3
   11274:	9b01      	ldr	r3, [sp, #4]
   11276:	689a      	ldr	r2, [r3, #8]
   11278:	9b01      	ldr	r3, [sp, #4]
   1127a:	689b      	ldr	r3, [r3, #8]
   1127c:	681b      	ldr	r3, [r3, #0]
   1127e:	332c      	adds	r3, #44	; 0x2c
   11280:	681b      	ldr	r3, [r3, #0]
   11282:	4610      	mov	r0, r2
   11284:	4798      	blx	r3
   11286:	4603      	mov	r3, r0
   11288:	461a      	mov	r2, r3
   1128a:	4b08      	ldr	r3, [pc, #32]	; (112ac <Gpio::SetAsInput()+0x78>)
   1128c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   11290:	681a      	ldr	r2, [r3, #0]
   11292:	4621      	mov	r1, r4
   11294:	400a      	ands	r2, r1
   11296:	601a      	str	r2, [r3, #0]
   11298:	462b      	mov	r3, r5
   1129a:	4619      	mov	r1, r3
   1129c:	4802      	ldr	r0, [pc, #8]	; (112a8 <Gpio::SetAsInput()+0x74>)
   1129e:	f005 f903 	bl	164a8 <__cyg_profile_func_exit>
  }
   112a2:	bf00      	nop
   112a4:	b003      	add	sp, #12
   112a6:	bd30      	pop	{r4, r5, pc}
   112a8:	00011235 	.word	0x00011235
   112ac:	10000008 	.word	0x10000008

000112b0 <Gpio::SetAsOutput()>:
  // Sets the GPIO pin direction as output
  void SetAsOutput(void) override
   112b0:	b530      	push	{r4, r5, lr}
   112b2:	b083      	sub	sp, #12
   112b4:	4675      	mov	r5, lr
   112b6:	9001      	str	r0, [sp, #4]
   112b8:	462b      	mov	r3, r5
   112ba:	4619      	mov	r1, r3
   112bc:	4819      	ldr	r0, [pc, #100]	; (11324 <Gpio::SetAsOutput()+0x74>)
   112be:	f005 f8df 	bl	16480 <__cyg_profile_func_enter>
  {
    pin_->SetPinFunction(kGpioFunction);
   112c2:	9b01      	ldr	r3, [sp, #4]
   112c4:	689a      	ldr	r2, [r3, #8]
   112c6:	9b01      	ldr	r3, [sp, #4]
   112c8:	689b      	ldr	r3, [r3, #8]
   112ca:	681b      	ldr	r3, [r3, #0]
   112cc:	681b      	ldr	r3, [r3, #0]
   112ce:	2100      	movs	r1, #0
   112d0:	4610      	mov	r0, r2
   112d2:	4798      	blx	r3
    gpio_port[pin_->GetPort()]->DIR |= (1 << pin_->GetPin());
   112d4:	9b01      	ldr	r3, [sp, #4]
   112d6:	689a      	ldr	r2, [r3, #8]
   112d8:	9b01      	ldr	r3, [sp, #4]
   112da:	689b      	ldr	r3, [r3, #8]
   112dc:	681b      	ldr	r3, [r3, #0]
   112de:	3330      	adds	r3, #48	; 0x30
   112e0:	681b      	ldr	r3, [r3, #0]
   112e2:	4610      	mov	r0, r2
   112e4:	4798      	blx	r3
   112e6:	4603      	mov	r3, r0
   112e8:	461a      	mov	r2, r3
   112ea:	2301      	movs	r3, #1
   112ec:	fa03 f402 	lsl.w	r4, r3, r2
   112f0:	9b01      	ldr	r3, [sp, #4]
   112f2:	689a      	ldr	r2, [r3, #8]
   112f4:	9b01      	ldr	r3, [sp, #4]
   112f6:	689b      	ldr	r3, [r3, #8]
   112f8:	681b      	ldr	r3, [r3, #0]
   112fa:	332c      	adds	r3, #44	; 0x2c
   112fc:	681b      	ldr	r3, [r3, #0]
   112fe:	4610      	mov	r0, r2
   11300:	4798      	blx	r3
   11302:	4603      	mov	r3, r0
   11304:	461a      	mov	r2, r3
   11306:	4b08      	ldr	r3, [pc, #32]	; (11328 <Gpio::SetAsOutput()+0x78>)
   11308:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   1130c:	681a      	ldr	r2, [r3, #0]
   1130e:	4621      	mov	r1, r4
   11310:	430a      	orrs	r2, r1
   11312:	601a      	str	r2, [r3, #0]
   11314:	462b      	mov	r3, r5
   11316:	4619      	mov	r1, r3
   11318:	4802      	ldr	r0, [pc, #8]	; (11324 <Gpio::SetAsOutput()+0x74>)
   1131a:	f005 f8c5 	bl	164a8 <__cyg_profile_func_exit>
  }
   1131e:	bf00      	nop
   11320:	b003      	add	sp, #12
   11322:	bd30      	pop	{r4, r5, pc}
   11324:	000112b1 	.word	0x000112b1
   11328:	10000008 	.word	0x10000008

0001132c <Gpio::SetDirection(GpioInterface::Direction)>:
  // Sets the GPIO pin direction as output or input depending on the
  // Direction enum parameter
  inline void SetDirection(Direction direction) override
   1132c:	b510      	push	{r4, lr}
   1132e:	b082      	sub	sp, #8
   11330:	4674      	mov	r4, lr
   11332:	9001      	str	r0, [sp, #4]
   11334:	460b      	mov	r3, r1
   11336:	f88d 3003 	strb.w	r3, [sp, #3]
   1133a:	4623      	mov	r3, r4
   1133c:	4619      	mov	r1, r3
   1133e:	480b      	ldr	r0, [pc, #44]	; (1136c <Gpio::SetDirection(GpioInterface::Direction)+0x40>)
   11340:	f005 f89e 	bl	16480 <__cyg_profile_func_enter>
  {
    (direction) ? SetAsOutput() : SetAsInput();
   11344:	f89d 3003 	ldrb.w	r3, [sp, #3]
   11348:	2b00      	cmp	r3, #0
   1134a:	d003      	beq.n	11354 <Gpio::SetDirection(GpioInterface::Direction)+0x28>
   1134c:	9801      	ldr	r0, [sp, #4]
   1134e:	f7ff ffaf 	bl	112b0 <Gpio::SetAsOutput()>
   11352:	e002      	b.n	1135a <Gpio::SetDirection(GpioInterface::Direction)+0x2e>
   11354:	9801      	ldr	r0, [sp, #4]
   11356:	f7ff ff6d 	bl	11234 <Gpio::SetAsInput()>
   1135a:	4623      	mov	r3, r4
   1135c:	4619      	mov	r1, r3
   1135e:	4803      	ldr	r0, [pc, #12]	; (1136c <Gpio::SetDirection(GpioInterface::Direction)+0x40>)
   11360:	f005 f8a2 	bl	164a8 <__cyg_profile_func_exit>
  }
   11364:	bf00      	nop
   11366:	b002      	add	sp, #8
   11368:	bd10      	pop	{r4, pc}
   1136a:	bf00      	nop
   1136c:	0001132d 	.word	0x0001132d

00011370 <Gpio::SetHigh()>:
  // Sets the GPIO output pin to high
  void SetHigh(void) override
   11370:	b530      	push	{r4, r5, lr}
   11372:	b083      	sub	sp, #12
   11374:	4675      	mov	r5, lr
   11376:	9001      	str	r0, [sp, #4]
   11378:	462b      	mov	r3, r5
   1137a:	4619      	mov	r1, r3
   1137c:	4813      	ldr	r0, [pc, #76]	; (113cc <Gpio::SetHigh()+0x5c>)
   1137e:	f005 f87f 	bl	16480 <__cyg_profile_func_enter>
  {
    gpio_port[pin_->GetPort()]->SET = (1 << pin_->GetPin());
   11382:	9b01      	ldr	r3, [sp, #4]
   11384:	689a      	ldr	r2, [r3, #8]
   11386:	9b01      	ldr	r3, [sp, #4]
   11388:	689b      	ldr	r3, [r3, #8]
   1138a:	681b      	ldr	r3, [r3, #0]
   1138c:	3330      	adds	r3, #48	; 0x30
   1138e:	681b      	ldr	r3, [r3, #0]
   11390:	4610      	mov	r0, r2
   11392:	4798      	blx	r3
   11394:	4603      	mov	r3, r0
   11396:	461a      	mov	r2, r3
   11398:	2301      	movs	r3, #1
   1139a:	4093      	lsls	r3, r2
   1139c:	461c      	mov	r4, r3
   1139e:	9b01      	ldr	r3, [sp, #4]
   113a0:	689a      	ldr	r2, [r3, #8]
   113a2:	9b01      	ldr	r3, [sp, #4]
   113a4:	689b      	ldr	r3, [r3, #8]
   113a6:	681b      	ldr	r3, [r3, #0]
   113a8:	332c      	adds	r3, #44	; 0x2c
   113aa:	681b      	ldr	r3, [r3, #0]
   113ac:	4610      	mov	r0, r2
   113ae:	4798      	blx	r3
   113b0:	4603      	mov	r3, r0
   113b2:	461a      	mov	r2, r3
   113b4:	4b06      	ldr	r3, [pc, #24]	; (113d0 <Gpio::SetHigh()+0x60>)
   113b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   113ba:	619c      	str	r4, [r3, #24]
   113bc:	462b      	mov	r3, r5
   113be:	4619      	mov	r1, r3
   113c0:	4802      	ldr	r0, [pc, #8]	; (113cc <Gpio::SetHigh()+0x5c>)
   113c2:	f005 f871 	bl	164a8 <__cyg_profile_func_exit>
  }
   113c6:	bf00      	nop
   113c8:	b003      	add	sp, #12
   113ca:	bd30      	pop	{r4, r5, pc}
   113cc:	00011371 	.word	0x00011371
   113d0:	10000008 	.word	0x10000008

000113d4 <Gpio::SetLow()>:
  // Sets the GPIO output pin to low
  void SetLow(void) override
   113d4:	b530      	push	{r4, r5, lr}
   113d6:	b083      	sub	sp, #12
   113d8:	4675      	mov	r5, lr
   113da:	9001      	str	r0, [sp, #4]
   113dc:	462b      	mov	r3, r5
   113de:	4619      	mov	r1, r3
   113e0:	4813      	ldr	r0, [pc, #76]	; (11430 <Gpio::SetLow()+0x5c>)
   113e2:	f005 f84d 	bl	16480 <__cyg_profile_func_enter>
  {
    gpio_port[pin_->GetPort()]->CLR = (1 << pin_->GetPin());
   113e6:	9b01      	ldr	r3, [sp, #4]
   113e8:	689a      	ldr	r2, [r3, #8]
   113ea:	9b01      	ldr	r3, [sp, #4]
   113ec:	689b      	ldr	r3, [r3, #8]
   113ee:	681b      	ldr	r3, [r3, #0]
   113f0:	3330      	adds	r3, #48	; 0x30
   113f2:	681b      	ldr	r3, [r3, #0]
   113f4:	4610      	mov	r0, r2
   113f6:	4798      	blx	r3
   113f8:	4603      	mov	r3, r0
   113fa:	461a      	mov	r2, r3
   113fc:	2301      	movs	r3, #1
   113fe:	4093      	lsls	r3, r2
   11400:	461c      	mov	r4, r3
   11402:	9b01      	ldr	r3, [sp, #4]
   11404:	689a      	ldr	r2, [r3, #8]
   11406:	9b01      	ldr	r3, [sp, #4]
   11408:	689b      	ldr	r3, [r3, #8]
   1140a:	681b      	ldr	r3, [r3, #0]
   1140c:	332c      	adds	r3, #44	; 0x2c
   1140e:	681b      	ldr	r3, [r3, #0]
   11410:	4610      	mov	r0, r2
   11412:	4798      	blx	r3
   11414:	4603      	mov	r3, r0
   11416:	461a      	mov	r2, r3
   11418:	4b06      	ldr	r3, [pc, #24]	; (11434 <Gpio::SetLow()+0x60>)
   1141a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   1141e:	61dc      	str	r4, [r3, #28]
   11420:	462b      	mov	r3, r5
   11422:	4619      	mov	r1, r3
   11424:	4802      	ldr	r0, [pc, #8]	; (11430 <Gpio::SetLow()+0x5c>)
   11426:	f005 f83f 	bl	164a8 <__cyg_profile_func_exit>
  }
   1142a:	bf00      	nop
   1142c:	b003      	add	sp, #12
   1142e:	bd30      	pop	{r4, r5, pc}
   11430:	000113d5 	.word	0x000113d5
   11434:	10000008 	.word	0x10000008

00011438 <Gpio::Set(GpioInterface::State)>:
  // Sets the GPIO output pin to high or low depending on the State enum
  // parameter
  void Set(State output = kHigh) override
   11438:	b510      	push	{r4, lr}
   1143a:	b082      	sub	sp, #8
   1143c:	4674      	mov	r4, lr
   1143e:	9001      	str	r0, [sp, #4]
   11440:	460b      	mov	r3, r1
   11442:	f88d 3003 	strb.w	r3, [sp, #3]
   11446:	4623      	mov	r3, r4
   11448:	4619      	mov	r1, r3
   1144a:	480b      	ldr	r0, [pc, #44]	; (11478 <Gpio::Set(GpioInterface::State)+0x40>)
   1144c:	f005 f818 	bl	16480 <__cyg_profile_func_enter>
  {
    (output) ? SetHigh() : SetLow();
   11450:	f89d 3003 	ldrb.w	r3, [sp, #3]
   11454:	2b00      	cmp	r3, #0
   11456:	d003      	beq.n	11460 <Gpio::Set(GpioInterface::State)+0x28>
   11458:	9801      	ldr	r0, [sp, #4]
   1145a:	f7ff ff89 	bl	11370 <Gpio::SetHigh()>
   1145e:	e002      	b.n	11466 <Gpio::Set(GpioInterface::State)+0x2e>
   11460:	9801      	ldr	r0, [sp, #4]
   11462:	f7ff ffb7 	bl	113d4 <Gpio::SetLow()>
   11466:	4623      	mov	r3, r4
   11468:	4619      	mov	r1, r3
   1146a:	4803      	ldr	r0, [pc, #12]	; (11478 <Gpio::Set(GpioInterface::State)+0x40>)
   1146c:	f005 f81c 	bl	164a8 <__cyg_profile_func_exit>
  }
   11470:	bf00      	nop
   11472:	b002      	add	sp, #8
   11474:	bd10      	pop	{r4, pc}
   11476:	bf00      	nop
   11478:	00011439 	.word	0x00011439

0001147c <Gpio::Toggle()>:
  // Toggle the output of a GPIO output pin
  void Toggle() override
   1147c:	b530      	push	{r4, r5, lr}
   1147e:	b083      	sub	sp, #12
   11480:	4675      	mov	r5, lr
   11482:	9001      	str	r0, [sp, #4]
   11484:	462b      	mov	r3, r5
   11486:	4619      	mov	r1, r3
   11488:	4815      	ldr	r0, [pc, #84]	; (114e0 <Gpio::Toggle()+0x64>)
   1148a:	f004 fff9 	bl	16480 <__cyg_profile_func_enter>
  {
    gpio_port[pin_->GetPort()]->PIN ^= (1 << pin_->GetPin());
   1148e:	9b01      	ldr	r3, [sp, #4]
   11490:	689a      	ldr	r2, [r3, #8]
   11492:	9b01      	ldr	r3, [sp, #4]
   11494:	689b      	ldr	r3, [r3, #8]
   11496:	681b      	ldr	r3, [r3, #0]
   11498:	3330      	adds	r3, #48	; 0x30
   1149a:	681b      	ldr	r3, [r3, #0]
   1149c:	4610      	mov	r0, r2
   1149e:	4798      	blx	r3
   114a0:	4603      	mov	r3, r0
   114a2:	461a      	mov	r2, r3
   114a4:	2301      	movs	r3, #1
   114a6:	fa03 f402 	lsl.w	r4, r3, r2
   114aa:	9b01      	ldr	r3, [sp, #4]
   114ac:	689a      	ldr	r2, [r3, #8]
   114ae:	9b01      	ldr	r3, [sp, #4]
   114b0:	689b      	ldr	r3, [r3, #8]
   114b2:	681b      	ldr	r3, [r3, #0]
   114b4:	332c      	adds	r3, #44	; 0x2c
   114b6:	681b      	ldr	r3, [r3, #0]
   114b8:	4610      	mov	r0, r2
   114ba:	4798      	blx	r3
   114bc:	4603      	mov	r3, r0
   114be:	461a      	mov	r2, r3
   114c0:	4b08      	ldr	r3, [pc, #32]	; (114e4 <Gpio::Toggle()+0x68>)
   114c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   114c6:	695a      	ldr	r2, [r3, #20]
   114c8:	4621      	mov	r1, r4
   114ca:	404a      	eors	r2, r1
   114cc:	615a      	str	r2, [r3, #20]
   114ce:	462b      	mov	r3, r5
   114d0:	4619      	mov	r1, r3
   114d2:	4803      	ldr	r0, [pc, #12]	; (114e0 <Gpio::Toggle()+0x64>)
   114d4:	f004 ffe8 	bl	164a8 <__cyg_profile_func_exit>
  }
   114d8:	bf00      	nop
   114da:	b003      	add	sp, #12
   114dc:	bd30      	pop	{r4, r5, pc}
   114de:	bf00      	nop
   114e0:	0001147d 	.word	0x0001147d
   114e4:	10000008 	.word	0x10000008

000114e8 <Gpio::ReadState()>:
  // Returns the current State state of the pin
  State ReadState(void) override
   114e8:	b530      	push	{r4, r5, lr}
   114ea:	b085      	sub	sp, #20
   114ec:	4675      	mov	r5, lr
   114ee:	9001      	str	r0, [sp, #4]
   114f0:	462b      	mov	r3, r5
   114f2:	4619      	mov	r1, r3
   114f4:	4818      	ldr	r0, [pc, #96]	; (11558 <Gpio::ReadState()+0x70>)
   114f6:	f004 ffc3 	bl	16480 <__cyg_profile_func_enter>
  {
    bool state = (gpio_port[pin_->GetPort()]->PIN >> pin_->GetPin()) & 1;
   114fa:	9b01      	ldr	r3, [sp, #4]
   114fc:	689a      	ldr	r2, [r3, #8]
   114fe:	9b01      	ldr	r3, [sp, #4]
   11500:	689b      	ldr	r3, [r3, #8]
   11502:	681b      	ldr	r3, [r3, #0]
   11504:	332c      	adds	r3, #44	; 0x2c
   11506:	681b      	ldr	r3, [r3, #0]
   11508:	4610      	mov	r0, r2
   1150a:	4798      	blx	r3
   1150c:	4603      	mov	r3, r0
   1150e:	461a      	mov	r2, r3
   11510:	4b12      	ldr	r3, [pc, #72]	; (1155c <Gpio::ReadState()+0x74>)
   11512:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   11516:	695c      	ldr	r4, [r3, #20]
   11518:	9b01      	ldr	r3, [sp, #4]
   1151a:	689a      	ldr	r2, [r3, #8]
   1151c:	9b01      	ldr	r3, [sp, #4]
   1151e:	689b      	ldr	r3, [r3, #8]
   11520:	681b      	ldr	r3, [r3, #0]
   11522:	3330      	adds	r3, #48	; 0x30
   11524:	681b      	ldr	r3, [r3, #0]
   11526:	4610      	mov	r0, r2
   11528:	4798      	blx	r3
   1152a:	4603      	mov	r3, r0
   1152c:	fa24 f303 	lsr.w	r3, r4, r3
   11530:	f003 0301 	and.w	r3, r3, #1
   11534:	2b00      	cmp	r3, #0
   11536:	bf14      	ite	ne
   11538:	2301      	movne	r3, #1
   1153a:	2300      	moveq	r3, #0
   1153c:	f88d 300f 	strb.w	r3, [sp, #15]
    return static_cast<State>(state);
   11540:	f89d 400f 	ldrb.w	r4, [sp, #15]
   11544:	462b      	mov	r3, r5
   11546:	4619      	mov	r1, r3
   11548:	4803      	ldr	r0, [pc, #12]	; (11558 <Gpio::ReadState()+0x70>)
   1154a:	f004 ffad 	bl	164a8 <__cyg_profile_func_exit>
   1154e:	4623      	mov	r3, r4
  }
   11550:	4618      	mov	r0, r3
   11552:	b005      	add	sp, #20
   11554:	bd30      	pop	{r4, r5, pc}
   11556:	bf00      	nop
   11558:	000114e9 	.word	0x000114e9
   1155c:	10000008 	.word	0x10000008

00011560 <Gpio::Read()>:
  // Returns true if input or output pin is high
  bool Read(void) override
   11560:	b530      	push	{r4, r5, lr}
   11562:	b083      	sub	sp, #12
   11564:	4675      	mov	r5, lr
   11566:	9001      	str	r0, [sp, #4]
   11568:	462b      	mov	r3, r5
   1156a:	4619      	mov	r1, r3
   1156c:	4816      	ldr	r0, [pc, #88]	; (115c8 <Gpio::Read()+0x68>)
   1156e:	f004 ff87 	bl	16480 <__cyg_profile_func_enter>
  {
    return (gpio_port[pin_->GetPort()]->PIN >> pin_->GetPin()) & 1;
   11572:	9b01      	ldr	r3, [sp, #4]
   11574:	689a      	ldr	r2, [r3, #8]
   11576:	9b01      	ldr	r3, [sp, #4]
   11578:	689b      	ldr	r3, [r3, #8]
   1157a:	681b      	ldr	r3, [r3, #0]
   1157c:	332c      	adds	r3, #44	; 0x2c
   1157e:	681b      	ldr	r3, [r3, #0]
   11580:	4610      	mov	r0, r2
   11582:	4798      	blx	r3
   11584:	4603      	mov	r3, r0
   11586:	461a      	mov	r2, r3
   11588:	4b10      	ldr	r3, [pc, #64]	; (115cc <Gpio::Read()+0x6c>)
   1158a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   1158e:	695c      	ldr	r4, [r3, #20]
   11590:	9b01      	ldr	r3, [sp, #4]
   11592:	689a      	ldr	r2, [r3, #8]
   11594:	9b01      	ldr	r3, [sp, #4]
   11596:	689b      	ldr	r3, [r3, #8]
   11598:	681b      	ldr	r3, [r3, #0]
   1159a:	3330      	adds	r3, #48	; 0x30
   1159c:	681b      	ldr	r3, [r3, #0]
   1159e:	4610      	mov	r0, r2
   115a0:	4798      	blx	r3
   115a2:	4603      	mov	r3, r0
   115a4:	fa24 f303 	lsr.w	r3, r4, r3
   115a8:	f003 0301 	and.w	r3, r3, #1
   115ac:	2b00      	cmp	r3, #0
   115ae:	bf14      	ite	ne
   115b0:	2301      	movne	r3, #1
   115b2:	2300      	moveq	r3, #0
   115b4:	b2dc      	uxtb	r4, r3
   115b6:	462b      	mov	r3, r5
   115b8:	4619      	mov	r1, r3
   115ba:	4803      	ldr	r0, [pc, #12]	; (115c8 <Gpio::Read()+0x68>)
   115bc:	f004 ff74 	bl	164a8 <__cyg_profile_func_exit>
   115c0:	4623      	mov	r3, r4
  }
   115c2:	4618      	mov	r0, r3
   115c4:	b003      	add	sp, #12
   115c6:	bd30      	pop	{r4, r5, pc}
   115c8:	00011561 	.word	0x00011561
   115cc:	10000008 	.word	0x10000008

000115d0 <Gpio::GetPin()>:
  PinInterface & GetPin() override
   115d0:	b530      	push	{r4, r5, lr}
   115d2:	b083      	sub	sp, #12
   115d4:	4675      	mov	r5, lr
   115d6:	9001      	str	r0, [sp, #4]
   115d8:	462b      	mov	r3, r5
   115da:	4619      	mov	r1, r3
   115dc:	4806      	ldr	r0, [pc, #24]	; (115f8 <Gpio::GetPin()+0x28>)
   115de:	f004 ff4f 	bl	16480 <__cyg_profile_func_enter>
  {
    return *pin_;
   115e2:	9b01      	ldr	r3, [sp, #4]
   115e4:	689c      	ldr	r4, [r3, #8]
   115e6:	462b      	mov	r3, r5
   115e8:	4619      	mov	r1, r3
   115ea:	4803      	ldr	r0, [pc, #12]	; (115f8 <Gpio::GetPin()+0x28>)
   115ec:	f004 ff5c 	bl	164a8 <__cyg_profile_func_exit>
   115f0:	4623      	mov	r3, r4
  }
   115f2:	4618      	mov	r0, r3
   115f4:	b003      	add	sp, #12
   115f6:	bd30      	pop	{r4, r5, pc}
   115f8:	000115d1 	.word	0x000115d1

000115fc <Gpio::ValidPortCheck()>:

  // Checks if the selected gpio port is valid for external interrupts.
  bool ValidPortCheck()
   115fc:	b530      	push	{r4, r5, lr}
   115fe:	b087      	sub	sp, #28
   11600:	4675      	mov	r5, lr
   11602:	9003      	str	r0, [sp, #12]
   11604:	462b      	mov	r3, r5
   11606:	4619      	mov	r1, r3
   11608:	4817      	ldr	r0, [pc, #92]	; (11668 <Gpio::ValidPortCheck()+0x6c>)
   1160a:	f004 ff39 	bl	16480 <__cyg_profile_func_enter>
  {
    bool is_valid = (interupt_port_ <= 1);
   1160e:	9b03      	ldr	r3, [sp, #12]
   11610:	791b      	ldrb	r3, [r3, #4]
   11612:	2b01      	cmp	r3, #1
   11614:	bf94      	ite	ls
   11616:	2301      	movls	r3, #1
   11618:	2300      	movhi	r3, #0
   1161a:	b2db      	uxtb	r3, r3
   1161c:	f88d 3017 	strb.w	r3, [sp, #23]
    SJ2_ASSERT_WARNING(is_valid,
   11620:	f89d 3017 	ldrb.w	r3, [sp, #23]
   11624:	f083 0301 	eor.w	r3, r3, #1
   11628:	b2db      	uxtb	r3, r3
   1162a:	2b00      	cmp	r3, #0
   1162c:	d010      	beq.n	11650 <Gpio::ValidPortCheck()+0x54>
   1162e:	9b03      	ldr	r3, [sp, #12]
   11630:	689a      	ldr	r2, [r3, #8]
   11632:	9b03      	ldr	r3, [sp, #12]
   11634:	689b      	ldr	r3, [r3, #8]
   11636:	681b      	ldr	r3, [r3, #0]
   11638:	332c      	adds	r3, #44	; 0x2c
   1163a:	681b      	ldr	r3, [r3, #0]
   1163c:	4610      	mov	r0, r2
   1163e:	4798      	blx	r3
   11640:	4603      	mov	r3, r0
   11642:	9300      	str	r3, [sp, #0]
   11644:	23a6      	movs	r3, #166	; 0xa6
   11646:	4a09      	ldr	r2, [pc, #36]	; (1166c <Gpio::ValidPortCheck()+0x70>)
   11648:	4909      	ldr	r1, [pc, #36]	; (11670 <Gpio::ValidPortCheck()+0x74>)
   1164a:	480a      	ldr	r0, [pc, #40]	; (11674 <Gpio::ValidPortCheck()+0x78>)
   1164c:	f006 f994 	bl	17978 <printf>
                       "Port %d cannot be used for External Interrupts. Need "
                       "to use GPIO on Port 0 or 2.",
                       pin_->GetPort());
    return is_valid;
   11650:	f89d 4017 	ldrb.w	r4, [sp, #23]
   11654:	462b      	mov	r3, r5
   11656:	4619      	mov	r1, r3
   11658:	4803      	ldr	r0, [pc, #12]	; (11668 <Gpio::ValidPortCheck()+0x6c>)
   1165a:	f004 ff25 	bl	164a8 <__cyg_profile_func_exit>
   1165e:	4623      	mov	r3, r4
  }
   11660:	4618      	mov	r0, r3
   11662:	b007      	add	sp, #28
   11664:	bd30      	pop	{r4, r5, pc}
   11666:	bf00      	nop
   11668:	000115fd 	.word	0x000115fd
   1166c:	00019f2c 	.word	0x00019f2c
   11670:	00019a44 	.word	0x00019a44
   11674:	00019368 	.word	0x00019368

00011678 <Gpio::SetInterruptRoutine(void (*)())>:

  // Assigns the developer's ISR function to the port/pin gpio instance.
  void SetInterruptRoutine(IsrPointer function) override
   11678:	b570      	push	{r4, r5, r6, lr}
   1167a:	b082      	sub	sp, #8
   1167c:	4676      	mov	r6, lr
   1167e:	9001      	str	r0, [sp, #4]
   11680:	9100      	str	r1, [sp, #0]
   11682:	4633      	mov	r3, r6
   11684:	4619      	mov	r1, r3
   11686:	4811      	ldr	r0, [pc, #68]	; (116cc <Gpio::SetInterruptRoutine(void (*)())+0x54>)
   11688:	f004 fefa 	bl	16480 <__cyg_profile_func_enter>
  {
    ValidPortCheck();
   1168c:	9801      	ldr	r0, [sp, #4]
   1168e:	f7ff ffb5 	bl	115fc <Gpio::ValidPortCheck()>
    interrupthandlers[interupt_port_][pin_->GetPin()] = function;
   11692:	9c00      	ldr	r4, [sp, #0]
   11694:	9b01      	ldr	r3, [sp, #4]
   11696:	791b      	ldrb	r3, [r3, #4]
   11698:	461d      	mov	r5, r3
   1169a:	9b01      	ldr	r3, [sp, #4]
   1169c:	689a      	ldr	r2, [r3, #8]
   1169e:	9b01      	ldr	r3, [sp, #4]
   116a0:	689b      	ldr	r3, [r3, #8]
   116a2:	681b      	ldr	r3, [r3, #0]
   116a4:	3330      	adds	r3, #48	; 0x30
   116a6:	681b      	ldr	r3, [r3, #0]
   116a8:	4610      	mov	r0, r2
   116aa:	4798      	blx	r3
   116ac:	4603      	mov	r3, r0
   116ae:	4619      	mov	r1, r3
   116b0:	4a07      	ldr	r2, [pc, #28]	; (116d0 <Gpio::SetInterruptRoutine(void (*)())+0x58>)
   116b2:	016b      	lsls	r3, r5, #5
   116b4:	440b      	add	r3, r1
   116b6:	f842 4023 	str.w	r4, [r2, r3, lsl #2]
   116ba:	4633      	mov	r3, r6
   116bc:	4619      	mov	r1, r3
   116be:	4803      	ldr	r0, [pc, #12]	; (116cc <Gpio::SetInterruptRoutine(void (*)())+0x54>)
   116c0:	f004 fef2 	bl	164a8 <__cyg_profile_func_exit>
  }
   116c4:	bf00      	nop
   116c6:	b002      	add	sp, #8
   116c8:	bd70      	pop	{r4, r5, r6, pc}
   116ca:	bf00      	nop
   116cc:	00011679 	.word	0x00011679
   116d0:	10000670 	.word	0x10000670

000116d4 <Gpio::ClearInterruptRoutine()>:

  // Clears the developers ISR function from the port/pin gio instance.
  void ClearInterruptRoutine() override
   116d4:	b530      	push	{r4, r5, lr}
   116d6:	b083      	sub	sp, #12
   116d8:	4675      	mov	r5, lr
   116da:	9001      	str	r0, [sp, #4]
   116dc:	462b      	mov	r3, r5
   116de:	4619      	mov	r1, r3
   116e0:	480f      	ldr	r0, [pc, #60]	; (11720 <Gpio::ClearInterruptRoutine()+0x4c>)
   116e2:	f004 fecd 	bl	16480 <__cyg_profile_func_enter>
  {
    interrupthandlers[interupt_port_][pin_->GetPin()] = nullptr;
   116e6:	9b01      	ldr	r3, [sp, #4]
   116e8:	791b      	ldrb	r3, [r3, #4]
   116ea:	461c      	mov	r4, r3
   116ec:	9b01      	ldr	r3, [sp, #4]
   116ee:	689a      	ldr	r2, [r3, #8]
   116f0:	9b01      	ldr	r3, [sp, #4]
   116f2:	689b      	ldr	r3, [r3, #8]
   116f4:	681b      	ldr	r3, [r3, #0]
   116f6:	3330      	adds	r3, #48	; 0x30
   116f8:	681b      	ldr	r3, [r3, #0]
   116fa:	4610      	mov	r0, r2
   116fc:	4798      	blx	r3
   116fe:	4603      	mov	r3, r0
   11700:	4619      	mov	r1, r3
   11702:	4a08      	ldr	r2, [pc, #32]	; (11724 <Gpio::ClearInterruptRoutine()+0x50>)
   11704:	0163      	lsls	r3, r4, #5
   11706:	440b      	add	r3, r1
   11708:	2100      	movs	r1, #0
   1170a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
   1170e:	462b      	mov	r3, r5
   11710:	4619      	mov	r1, r3
   11712:	4803      	ldr	r0, [pc, #12]	; (11720 <Gpio::ClearInterruptRoutine()+0x4c>)
   11714:	f004 fec8 	bl	164a8 <__cyg_profile_func_exit>
  }
   11718:	bf00      	nop
   1171a:	b003      	add	sp, #12
   1171c:	bd30      	pop	{r4, r5, pc}
   1171e:	bf00      	nop
   11720:	000116d5 	.word	0x000116d5
   11724:	10000670 	.word	0x10000670

00011728 <unsigned char util::Value<GpioInterface::Edge, unsigned char>(GpioInterface::Edge)>:
//
// @param enum_type_value variable you would like to get the value of.
// @return the value of the enum class type variable of with the underlying
//         type of the enum class.
template <typename Enum, typename Type = typename std::underlying_type_t<Enum>>
constexpr Type Value(Enum enum_type_value)
   11728:	b530      	push	{r4, r5, lr}
   1172a:	b083      	sub	sp, #12
   1172c:	4675      	mov	r5, lr
   1172e:	4603      	mov	r3, r0
   11730:	f88d 3007 	strb.w	r3, [sp, #7]
   11734:	462b      	mov	r3, r5
   11736:	4619      	mov	r1, r3
   11738:	4806      	ldr	r0, [pc, #24]	; (11754 <unsigned char util::Value<GpioInterface::Edge, unsigned char>(GpioInterface::Edge)+0x2c>)
   1173a:	f004 fea1 	bl	16480 <__cyg_profile_func_enter>
{
  return static_cast<Type>(enum_type_value);
   1173e:	f89d 4007 	ldrb.w	r4, [sp, #7]
   11742:	462b      	mov	r3, r5
   11744:	4619      	mov	r1, r3
   11746:	4803      	ldr	r0, [pc, #12]	; (11754 <unsigned char util::Value<GpioInterface::Edge, unsigned char>(GpioInterface::Edge)+0x2c>)
   11748:	f004 feae 	bl	164a8 <__cyg_profile_func_exit>
   1174c:	4623      	mov	r3, r4
}
   1174e:	4618      	mov	r0, r3
   11750:	b003      	add	sp, #12
   11752:	bd30      	pop	{r4, r5, pc}
   11754:	00011729 	.word	0x00011729

00011758 <Gpio::SetInterruptEdge(GpioInterface::Edge)>:

  // Sets the selected edge that the gpio interrupt will be triggered on.
  void SetInterruptEdge(Edge edge) override
   11758:	b510      	push	{r4, lr}
   1175a:	b084      	sub	sp, #16
   1175c:	4674      	mov	r4, lr
   1175e:	9003      	str	r0, [sp, #12]
   11760:	460b      	mov	r3, r1
   11762:	f88d 300b 	strb.w	r3, [sp, #11]
   11766:	4623      	mov	r3, r4
   11768:	4619      	mov	r1, r3
   1176a:	4819      	ldr	r0, [pc, #100]	; (117d0 <Gpio::SetInterruptEdge(GpioInterface::Edge)+0x78>)
   1176c:	f004 fe88 	bl	16480 <__cyg_profile_func_enter>
  {
    ValidPortCheck();
   11770:	9803      	ldr	r0, [sp, #12]
   11772:	f7ff ff43 	bl	115fc <Gpio::ValidPortCheck()>
    switch (edge)
   11776:	f89d 300b 	ldrb.w	r3, [sp, #11]
   1177a:	2b01      	cmp	r3, #1
   1177c:	d008      	beq.n	11790 <Gpio::SetInterruptEdge(GpioInterface::Edge)+0x38>
   1177e:	2b01      	cmp	r3, #1
   11780:	d302      	bcc.n	11788 <Gpio::SetInterruptEdge(GpioInterface::Edge)+0x30>
   11782:	2b02      	cmp	r3, #2
   11784:	d008      	beq.n	11798 <Gpio::SetInterruptEdge(GpioInterface::Edge)+0x40>
   11786:	e00e      	b.n	117a6 <Gpio::SetInterruptEdge(GpioInterface::Edge)+0x4e>
    {
      case Edge::kEdgeRising:
      {
        SetEdgeRising();
   11788:	9803      	ldr	r0, [sp, #12]
   1178a:	f000 f8b1 	bl	118f0 <Gpio::SetEdgeRising()>
        break;
   1178e:	e017      	b.n	117c0 <Gpio::SetInterruptEdge(GpioInterface::Edge)+0x68>
      }
      case Edge::kEdgeFalling:
      {
        SetEdgeFalling();
   11790:	9803      	ldr	r0, [sp, #12]
   11792:	f000 f8eb 	bl	1196c <Gpio::SetEdgeFalling()>
        break;
   11796:	e013      	b.n	117c0 <Gpio::SetInterruptEdge(GpioInterface::Edge)+0x68>
      }
      case Edge::kEdgeBoth:
      {
        SetEdgeRising();
   11798:	9803      	ldr	r0, [sp, #12]
   1179a:	f000 f8a9 	bl	118f0 <Gpio::SetEdgeRising()>
        SetEdgeFalling();
   1179e:	9803      	ldr	r0, [sp, #12]
   117a0:	f000 f8e4 	bl	1196c <Gpio::SetEdgeFalling()>
        break;
   117a4:	e00c      	b.n	117c0 <Gpio::SetInterruptEdge(GpioInterface::Edge)+0x68>
      }
      default:
      {
        LOG_WARNING(
   117a6:	f89d 300b 	ldrb.w	r3, [sp, #11]
   117aa:	4618      	mov	r0, r3
   117ac:	f7ff ffbc 	bl	11728 <unsigned char util::Value<GpioInterface::Edge, unsigned char>(GpioInterface::Edge)>
   117b0:	4603      	mov	r3, r0
   117b2:	9300      	str	r3, [sp, #0]
   117b4:	23d2      	movs	r3, #210	; 0xd2
   117b6:	4a07      	ldr	r2, [pc, #28]	; (117d4 <Gpio::SetInterruptEdge(GpioInterface::Edge)+0x7c>)
   117b8:	4907      	ldr	r1, [pc, #28]	; (117d8 <Gpio::SetInterruptEdge(GpioInterface::Edge)+0x80>)
   117ba:	4808      	ldr	r0, [pc, #32]	; (117dc <Gpio::SetInterruptEdge(GpioInterface::Edge)+0x84>)
   117bc:	f006 f8dc 	bl	17978 <printf>
   117c0:	4623      	mov	r3, r4
   117c2:	4619      	mov	r1, r3
   117c4:	4802      	ldr	r0, [pc, #8]	; (117d0 <Gpio::SetInterruptEdge(GpioInterface::Edge)+0x78>)
   117c6:	f004 fe6f 	bl	164a8 <__cyg_profile_func_exit>
            "Edge %d cannot be used for External Interrupts."
            "Need to use a rising, falling, or both configuration.",
            util::Value(edge));
      }
    }
  }
   117ca:	bf00      	nop
   117cc:	b004      	add	sp, #16
   117ce:	bd10      	pop	{r4, pc}
   117d0:	00011759 	.word	0x00011759
   117d4:	00019f48 	.word	0x00019f48
   117d8:	00019a50 	.word	0x00019a50
   117dc:	000193f8 	.word	0x000193f8

000117e0 <Gpio::ClearInterruptEdge(GpioInterface::Edge)>:

  // Clears the seleted edge of the gpio interrupt from being triggered.
  void ClearInterruptEdge(Edge edge) override
   117e0:	b510      	push	{r4, lr}
   117e2:	b084      	sub	sp, #16
   117e4:	4674      	mov	r4, lr
   117e6:	9003      	str	r0, [sp, #12]
   117e8:	460b      	mov	r3, r1
   117ea:	f88d 300b 	strb.w	r3, [sp, #11]
   117ee:	4623      	mov	r3, r4
   117f0:	4619      	mov	r1, r3
   117f2:	4819      	ldr	r0, [pc, #100]	; (11858 <Gpio::ClearInterruptEdge(GpioInterface::Edge)+0x78>)
   117f4:	f004 fe44 	bl	16480 <__cyg_profile_func_enter>
  {
    ValidPortCheck();
   117f8:	9803      	ldr	r0, [sp, #12]
   117fa:	f7ff feff 	bl	115fc <Gpio::ValidPortCheck()>
    switch (edge)
   117fe:	f89d 300b 	ldrb.w	r3, [sp, #11]
   11802:	2b01      	cmp	r3, #1
   11804:	d008      	beq.n	11818 <Gpio::ClearInterruptEdge(GpioInterface::Edge)+0x38>
   11806:	2b01      	cmp	r3, #1
   11808:	d302      	bcc.n	11810 <Gpio::ClearInterruptEdge(GpioInterface::Edge)+0x30>
   1180a:	2b02      	cmp	r3, #2
   1180c:	d008      	beq.n	11820 <Gpio::ClearInterruptEdge(GpioInterface::Edge)+0x40>
   1180e:	e00e      	b.n	1182e <Gpio::ClearInterruptEdge(GpioInterface::Edge)+0x4e>
    {
      case Edge::kEdgeRising:
      {
        ClearEdgeRising();
   11810:	9803      	ldr	r0, [sp, #12]
   11812:	f000 f8e9 	bl	119e8 <Gpio::ClearEdgeRising()>
        break;
   11816:	e017      	b.n	11848 <Gpio::ClearInterruptEdge(GpioInterface::Edge)+0x68>
      }
      case Edge::kEdgeFalling:
      {
        ClearEdgeFalling();
   11818:	9803      	ldr	r0, [sp, #12]
   1181a:	f000 f923 	bl	11a64 <Gpio::ClearEdgeFalling()>
        break;
   1181e:	e013      	b.n	11848 <Gpio::ClearInterruptEdge(GpioInterface::Edge)+0x68>
      }
      case Edge::kEdgeBoth:
      {
        ClearEdgeRising();
   11820:	9803      	ldr	r0, [sp, #12]
   11822:	f000 f8e1 	bl	119e8 <Gpio::ClearEdgeRising()>
        ClearEdgeFalling();
   11826:	9803      	ldr	r0, [sp, #12]
   11828:	f000 f91c 	bl	11a64 <Gpio::ClearEdgeFalling()>
        break;
   1182c:	e00c      	b.n	11848 <Gpio::ClearInterruptEdge(GpioInterface::Edge)+0x68>
      }
      default:
      {
        LOG_WARNING(
   1182e:	f89d 300b 	ldrb.w	r3, [sp, #11]
   11832:	4618      	mov	r0, r3
   11834:	f7ff ff78 	bl	11728 <unsigned char util::Value<GpioInterface::Edge, unsigned char>(GpioInterface::Edge)>
   11838:	4603      	mov	r3, r0
   1183a:	9300      	str	r3, [sp, #0]
   1183c:	23f2      	movs	r3, #242	; 0xf2
   1183e:	4a07      	ldr	r2, [pc, #28]	; (1185c <Gpio::ClearInterruptEdge(GpioInterface::Edge)+0x7c>)
   11840:	4907      	ldr	r1, [pc, #28]	; (11860 <Gpio::ClearInterruptEdge(GpioInterface::Edge)+0x80>)
   11842:	4808      	ldr	r0, [pc, #32]	; (11864 <Gpio::ClearInterruptEdge(GpioInterface::Edge)+0x84>)
   11844:	f006 f898 	bl	17978 <printf>
   11848:	4623      	mov	r3, r4
   1184a:	4619      	mov	r1, r3
   1184c:	4802      	ldr	r0, [pc, #8]	; (11858 <Gpio::ClearInterruptEdge(GpioInterface::Edge)+0x78>)
   1184e:	f004 fe2b 	bl	164a8 <__cyg_profile_func_exit>
            "Edge %d cannot be used for External Interrupts."
            "Need to use a rising, falling, or both configuration.",
           util::Value(edge));
      }
    }
  }
   11852:	bf00      	nop
   11854:	b004      	add	sp, #16
   11856:	bd10      	pop	{r4, pc}
   11858:	000117e1 	.word	0x000117e1
   1185c:	00019ef0 	.word	0x00019ef0
   11860:	00019a5c 	.word	0x00019a5c
   11864:	000193f8 	.word	0x000193f8

00011868 <Gpio::AttachInterrupt(void (*)(), GpioInterface::Edge)>:

  // Assign the developer's ISR and sets the selected edge that the gpio
  // interrupt will be triggered on.
  void AttachInterrupt(IsrPointer function, Edge edge) override
   11868:	b510      	push	{r4, lr}
   1186a:	b084      	sub	sp, #16
   1186c:	4674      	mov	r4, lr
   1186e:	9003      	str	r0, [sp, #12]
   11870:	9102      	str	r1, [sp, #8]
   11872:	4613      	mov	r3, r2
   11874:	f88d 3007 	strb.w	r3, [sp, #7]
   11878:	4623      	mov	r3, r4
   1187a:	4619      	mov	r1, r3
   1187c:	480b      	ldr	r0, [pc, #44]	; (118ac <Gpio::AttachInterrupt(void (*)(), GpioInterface::Edge)+0x44>)
   1187e:	f004 fdff 	bl	16480 <__cyg_profile_func_enter>
  {
    ValidPortCheck();
   11882:	9803      	ldr	r0, [sp, #12]
   11884:	f7ff feba 	bl	115fc <Gpio::ValidPortCheck()>
    SetInterruptRoutine(function);
   11888:	9902      	ldr	r1, [sp, #8]
   1188a:	9803      	ldr	r0, [sp, #12]
   1188c:	f7ff fef4 	bl	11678 <Gpio::SetInterruptRoutine(void (*)())>
    SetInterruptEdge(edge);
   11890:	f89d 3007 	ldrb.w	r3, [sp, #7]
   11894:	4619      	mov	r1, r3
   11896:	9803      	ldr	r0, [sp, #12]
   11898:	f7ff ff5e 	bl	11758 <Gpio::SetInterruptEdge(GpioInterface::Edge)>
   1189c:	4623      	mov	r3, r4
   1189e:	4619      	mov	r1, r3
   118a0:	4802      	ldr	r0, [pc, #8]	; (118ac <Gpio::AttachInterrupt(void (*)(), GpioInterface::Edge)+0x44>)
   118a2:	f004 fe01 	bl	164a8 <__cyg_profile_func_exit>
  }
   118a6:	bf00      	nop
   118a8:	b004      	add	sp, #16
   118aa:	bd10      	pop	{r4, pc}
   118ac:	00011869 	.word	0x00011869

000118b0 <Gpio::DetachInterrupt()>:

  // Removes the developer's ISR and clears the selected edge of the gpio
  // interrupt from being triggered.
  void DetachInterrupt() override
   118b0:	b510      	push	{r4, lr}
   118b2:	b082      	sub	sp, #8
   118b4:	4674      	mov	r4, lr
   118b6:	9001      	str	r0, [sp, #4]
   118b8:	4623      	mov	r3, r4
   118ba:	4619      	mov	r1, r3
   118bc:	480b      	ldr	r0, [pc, #44]	; (118ec <Gpio::DetachInterrupt()+0x3c>)
   118be:	f004 fddf 	bl	16480 <__cyg_profile_func_enter>
  {
    ValidPortCheck();
   118c2:	9801      	ldr	r0, [sp, #4]
   118c4:	f7ff fe9a 	bl	115fc <Gpio::ValidPortCheck()>
    ClearInterruptRoutine();
   118c8:	9801      	ldr	r0, [sp, #4]
   118ca:	f7ff ff03 	bl	116d4 <Gpio::ClearInterruptRoutine()>
    ClearEdgeRising();
   118ce:	9801      	ldr	r0, [sp, #4]
   118d0:	f000 f88a 	bl	119e8 <Gpio::ClearEdgeRising()>
    ClearEdgeFalling();
   118d4:	9801      	ldr	r0, [sp, #4]
   118d6:	f000 f8c5 	bl	11a64 <Gpio::ClearEdgeFalling()>
   118da:	4623      	mov	r3, r4
   118dc:	4619      	mov	r1, r3
   118de:	4803      	ldr	r0, [pc, #12]	; (118ec <Gpio::DetachInterrupt()+0x3c>)
   118e0:	f004 fde2 	bl	164a8 <__cyg_profile_func_exit>
  }
   118e4:	bf00      	nop
   118e6:	b002      	add	sp, #8
   118e8:	bd10      	pop	{r4, pc}
   118ea:	bf00      	nop
   118ec:	000118b1 	.word	0x000118b1

000118f0 <Gpio::SetEdgeRising()>:
    *interrupt[triggered_port].clear |= (1 << triggered_pin);
  }

 private:
  // Sets the gpio interrupt to trigger on a rising edge.
  void SetEdgeRising()
   118f0:	b530      	push	{r4, r5, lr}
   118f2:	b083      	sub	sp, #12
   118f4:	4675      	mov	r5, lr
   118f6:	9001      	str	r0, [sp, #4]
   118f8:	462b      	mov	r3, r5
   118fa:	4619      	mov	r1, r3
   118fc:	4819      	ldr	r0, [pc, #100]	; (11964 <Gpio::SetEdgeRising()+0x74>)
   118fe:	f004 fdbf 	bl	16480 <__cyg_profile_func_enter>
  {
    *interrupt[interupt_port_].enable_rising_edge |= (1 << pin_->GetPin());
   11902:	9b01      	ldr	r3, [sp, #4]
   11904:	689a      	ldr	r2, [r3, #8]
   11906:	9b01      	ldr	r3, [sp, #4]
   11908:	689b      	ldr	r3, [r3, #8]
   1190a:	681b      	ldr	r3, [r3, #0]
   1190c:	3330      	adds	r3, #48	; 0x30
   1190e:	681b      	ldr	r3, [r3, #0]
   11910:	4610      	mov	r0, r2
   11912:	4798      	blx	r3
   11914:	4603      	mov	r3, r0
   11916:	461a      	mov	r2, r3
   11918:	2301      	movs	r3, #1
   1191a:	fa03 f002 	lsl.w	r0, r3, r2
   1191e:	9b01      	ldr	r3, [sp, #4]
   11920:	791b      	ldrb	r3, [r3, #4]
   11922:	4619      	mov	r1, r3
   11924:	4a10      	ldr	r2, [pc, #64]	; (11968 <Gpio::SetEdgeRising()+0x78>)
   11926:	460b      	mov	r3, r1
   11928:	009b      	lsls	r3, r3, #2
   1192a:	440b      	add	r3, r1
   1192c:	009b      	lsls	r3, r3, #2
   1192e:	4413      	add	r3, r2
   11930:	330c      	adds	r3, #12
   11932:	681b      	ldr	r3, [r3, #0]
   11934:	681a      	ldr	r2, [r3, #0]
   11936:	4604      	mov	r4, r0
   11938:	9b01      	ldr	r3, [sp, #4]
   1193a:	791b      	ldrb	r3, [r3, #4]
   1193c:	4618      	mov	r0, r3
   1193e:	490a      	ldr	r1, [pc, #40]	; (11968 <Gpio::SetEdgeRising()+0x78>)
   11940:	4603      	mov	r3, r0
   11942:	009b      	lsls	r3, r3, #2
   11944:	4403      	add	r3, r0
   11946:	009b      	lsls	r3, r3, #2
   11948:	440b      	add	r3, r1
   1194a:	330c      	adds	r3, #12
   1194c:	681b      	ldr	r3, [r3, #0]
   1194e:	4322      	orrs	r2, r4
   11950:	601a      	str	r2, [r3, #0]
   11952:	462b      	mov	r3, r5
   11954:	4619      	mov	r1, r3
   11956:	4803      	ldr	r0, [pc, #12]	; (11964 <Gpio::SetEdgeRising()+0x74>)
   11958:	f004 fda6 	bl	164a8 <__cyg_profile_func_exit>
  }
   1195c:	bf00      	nop
   1195e:	b003      	add	sp, #12
   11960:	bd30      	pop	{r4, r5, pc}
   11962:	bf00      	nop
   11964:	000118f1 	.word	0x000118f1
   11968:	10000020 	.word	0x10000020

0001196c <Gpio::SetEdgeFalling()>:

  // Sets the gpio interrupt to trigger on a falling edge.
  void SetEdgeFalling()
   1196c:	b530      	push	{r4, r5, lr}
   1196e:	b083      	sub	sp, #12
   11970:	4675      	mov	r5, lr
   11972:	9001      	str	r0, [sp, #4]
   11974:	462b      	mov	r3, r5
   11976:	4619      	mov	r1, r3
   11978:	4819      	ldr	r0, [pc, #100]	; (119e0 <Gpio::SetEdgeFalling()+0x74>)
   1197a:	f004 fd81 	bl	16480 <__cyg_profile_func_enter>
  {
    *interrupt[interupt_port_].enable_falling_edge |= (1 << pin_->GetPin());
   1197e:	9b01      	ldr	r3, [sp, #4]
   11980:	689a      	ldr	r2, [r3, #8]
   11982:	9b01      	ldr	r3, [sp, #4]
   11984:	689b      	ldr	r3, [r3, #8]
   11986:	681b      	ldr	r3, [r3, #0]
   11988:	3330      	adds	r3, #48	; 0x30
   1198a:	681b      	ldr	r3, [r3, #0]
   1198c:	4610      	mov	r0, r2
   1198e:	4798      	blx	r3
   11990:	4603      	mov	r3, r0
   11992:	461a      	mov	r2, r3
   11994:	2301      	movs	r3, #1
   11996:	fa03 f002 	lsl.w	r0, r3, r2
   1199a:	9b01      	ldr	r3, [sp, #4]
   1199c:	791b      	ldrb	r3, [r3, #4]
   1199e:	4619      	mov	r1, r3
   119a0:	4a10      	ldr	r2, [pc, #64]	; (119e4 <Gpio::SetEdgeFalling()+0x78>)
   119a2:	460b      	mov	r3, r1
   119a4:	009b      	lsls	r3, r3, #2
   119a6:	440b      	add	r3, r1
   119a8:	009b      	lsls	r3, r3, #2
   119aa:	4413      	add	r3, r2
   119ac:	3310      	adds	r3, #16
   119ae:	681b      	ldr	r3, [r3, #0]
   119b0:	681a      	ldr	r2, [r3, #0]
   119b2:	4604      	mov	r4, r0
   119b4:	9b01      	ldr	r3, [sp, #4]
   119b6:	791b      	ldrb	r3, [r3, #4]
   119b8:	4618      	mov	r0, r3
   119ba:	490a      	ldr	r1, [pc, #40]	; (119e4 <Gpio::SetEdgeFalling()+0x78>)
   119bc:	4603      	mov	r3, r0
   119be:	009b      	lsls	r3, r3, #2
   119c0:	4403      	add	r3, r0
   119c2:	009b      	lsls	r3, r3, #2
   119c4:	440b      	add	r3, r1
   119c6:	3310      	adds	r3, #16
   119c8:	681b      	ldr	r3, [r3, #0]
   119ca:	4322      	orrs	r2, r4
   119cc:	601a      	str	r2, [r3, #0]
   119ce:	462b      	mov	r3, r5
   119d0:	4619      	mov	r1, r3
   119d2:	4803      	ldr	r0, [pc, #12]	; (119e0 <Gpio::SetEdgeFalling()+0x74>)
   119d4:	f004 fd68 	bl	164a8 <__cyg_profile_func_exit>
  }
   119d8:	bf00      	nop
   119da:	b003      	add	sp, #12
   119dc:	bd30      	pop	{r4, r5, pc}
   119de:	bf00      	nop
   119e0:	0001196d 	.word	0x0001196d
   119e4:	10000020 	.word	0x10000020

000119e8 <Gpio::ClearEdgeRising()>:

  // Clears the gpio interrupt to no longer trigger on a rising edge.
  void ClearEdgeRising()
   119e8:	b530      	push	{r4, r5, lr}
   119ea:	b083      	sub	sp, #12
   119ec:	4675      	mov	r5, lr
   119ee:	9001      	str	r0, [sp, #4]
   119f0:	462b      	mov	r3, r5
   119f2:	4619      	mov	r1, r3
   119f4:	4819      	ldr	r0, [pc, #100]	; (11a5c <Gpio::ClearEdgeRising()+0x74>)
   119f6:	f004 fd43 	bl	16480 <__cyg_profile_func_enter>
  {
    *interrupt[interupt_port_].enable_rising_edge &= ~(1 << pin_->GetPin());
   119fa:	9b01      	ldr	r3, [sp, #4]
   119fc:	689a      	ldr	r2, [r3, #8]
   119fe:	9b01      	ldr	r3, [sp, #4]
   11a00:	689b      	ldr	r3, [r3, #8]
   11a02:	681b      	ldr	r3, [r3, #0]
   11a04:	3330      	adds	r3, #48	; 0x30
   11a06:	681b      	ldr	r3, [r3, #0]
   11a08:	4610      	mov	r0, r2
   11a0a:	4798      	blx	r3
   11a0c:	4603      	mov	r3, r0
   11a0e:	461a      	mov	r2, r3
   11a10:	2301      	movs	r3, #1
   11a12:	4093      	lsls	r3, r2
   11a14:	43d8      	mvns	r0, r3
   11a16:	9b01      	ldr	r3, [sp, #4]
   11a18:	791b      	ldrb	r3, [r3, #4]
   11a1a:	4619      	mov	r1, r3
   11a1c:	4a10      	ldr	r2, [pc, #64]	; (11a60 <Gpio::ClearEdgeRising()+0x78>)
   11a1e:	460b      	mov	r3, r1
   11a20:	009b      	lsls	r3, r3, #2
   11a22:	440b      	add	r3, r1
   11a24:	009b      	lsls	r3, r3, #2
   11a26:	4413      	add	r3, r2
   11a28:	330c      	adds	r3, #12
   11a2a:	681b      	ldr	r3, [r3, #0]
   11a2c:	681a      	ldr	r2, [r3, #0]
   11a2e:	4604      	mov	r4, r0
   11a30:	9b01      	ldr	r3, [sp, #4]
   11a32:	791b      	ldrb	r3, [r3, #4]
   11a34:	4618      	mov	r0, r3
   11a36:	490a      	ldr	r1, [pc, #40]	; (11a60 <Gpio::ClearEdgeRising()+0x78>)
   11a38:	4603      	mov	r3, r0
   11a3a:	009b      	lsls	r3, r3, #2
   11a3c:	4403      	add	r3, r0
   11a3e:	009b      	lsls	r3, r3, #2
   11a40:	440b      	add	r3, r1
   11a42:	330c      	adds	r3, #12
   11a44:	681b      	ldr	r3, [r3, #0]
   11a46:	4022      	ands	r2, r4
   11a48:	601a      	str	r2, [r3, #0]
   11a4a:	462b      	mov	r3, r5
   11a4c:	4619      	mov	r1, r3
   11a4e:	4803      	ldr	r0, [pc, #12]	; (11a5c <Gpio::ClearEdgeRising()+0x74>)
   11a50:	f004 fd2a 	bl	164a8 <__cyg_profile_func_exit>
  }
   11a54:	bf00      	nop
   11a56:	b003      	add	sp, #12
   11a58:	bd30      	pop	{r4, r5, pc}
   11a5a:	bf00      	nop
   11a5c:	000119e9 	.word	0x000119e9
   11a60:	10000020 	.word	0x10000020

00011a64 <Gpio::ClearEdgeFalling()>:

  // Clears the gpio interrupt to no longer trigger on a falling edge.
  void ClearEdgeFalling()
   11a64:	b530      	push	{r4, r5, lr}
   11a66:	b083      	sub	sp, #12
   11a68:	4675      	mov	r5, lr
   11a6a:	9001      	str	r0, [sp, #4]
   11a6c:	462b      	mov	r3, r5
   11a6e:	4619      	mov	r1, r3
   11a70:	4819      	ldr	r0, [pc, #100]	; (11ad8 <Gpio::ClearEdgeFalling()+0x74>)
   11a72:	f004 fd05 	bl	16480 <__cyg_profile_func_enter>
  {
    *interrupt[interupt_port_].enable_falling_edge &= ~(1 << pin_->GetPin());
   11a76:	9b01      	ldr	r3, [sp, #4]
   11a78:	689a      	ldr	r2, [r3, #8]
   11a7a:	9b01      	ldr	r3, [sp, #4]
   11a7c:	689b      	ldr	r3, [r3, #8]
   11a7e:	681b      	ldr	r3, [r3, #0]
   11a80:	3330      	adds	r3, #48	; 0x30
   11a82:	681b      	ldr	r3, [r3, #0]
   11a84:	4610      	mov	r0, r2
   11a86:	4798      	blx	r3
   11a88:	4603      	mov	r3, r0
   11a8a:	461a      	mov	r2, r3
   11a8c:	2301      	movs	r3, #1
   11a8e:	4093      	lsls	r3, r2
   11a90:	43d8      	mvns	r0, r3
   11a92:	9b01      	ldr	r3, [sp, #4]
   11a94:	791b      	ldrb	r3, [r3, #4]
   11a96:	4619      	mov	r1, r3
   11a98:	4a10      	ldr	r2, [pc, #64]	; (11adc <Gpio::ClearEdgeFalling()+0x78>)
   11a9a:	460b      	mov	r3, r1
   11a9c:	009b      	lsls	r3, r3, #2
   11a9e:	440b      	add	r3, r1
   11aa0:	009b      	lsls	r3, r3, #2
   11aa2:	4413      	add	r3, r2
   11aa4:	3310      	adds	r3, #16
   11aa6:	681b      	ldr	r3, [r3, #0]
   11aa8:	681a      	ldr	r2, [r3, #0]
   11aaa:	4604      	mov	r4, r0
   11aac:	9b01      	ldr	r3, [sp, #4]
   11aae:	791b      	ldrb	r3, [r3, #4]
   11ab0:	4618      	mov	r0, r3
   11ab2:	490a      	ldr	r1, [pc, #40]	; (11adc <Gpio::ClearEdgeFalling()+0x78>)
   11ab4:	4603      	mov	r3, r0
   11ab6:	009b      	lsls	r3, r3, #2
   11ab8:	4403      	add	r3, r0
   11aba:	009b      	lsls	r3, r3, #2
   11abc:	440b      	add	r3, r1
   11abe:	3310      	adds	r3, #16
   11ac0:	681b      	ldr	r3, [r3, #0]
   11ac2:	4022      	ands	r2, r4
   11ac4:	601a      	str	r2, [r3, #0]
   11ac6:	462b      	mov	r3, r5
   11ac8:	4619      	mov	r1, r3
   11aca:	4803      	ldr	r0, [pc, #12]	; (11ad8 <Gpio::ClearEdgeFalling()+0x74>)
   11acc:	f004 fcec 	bl	164a8 <__cyg_profile_func_exit>
  }
   11ad0:	bf00      	nop
   11ad2:	b003      	add	sp, #12
   11ad4:	bd30      	pop	{r4, r5, pc}
   11ad6:	bf00      	nop
   11ad8:	00011a65 	.word	0x00011a65
   11adc:	10000020 	.word	0x10000020

00011ae0 <SystemControllerInterface::SystemControllerInterface()>:
#include "L0_LowLevel/LPC40xx.h"
#include "utility/enum.hpp"
#include "utility/log.hpp"
#include "utility/macros.hpp"

class SystemControllerInterface
   11ae0:	b082      	sub	sp, #8
   11ae2:	9001      	str	r0, [sp, #4]
   11ae4:	4a03      	ldr	r2, [pc, #12]	; (11af4 <SystemControllerInterface::SystemControllerInterface()+0x14>)
   11ae6:	9b01      	ldr	r3, [sp, #4]
   11ae8:	601a      	str	r2, [r3, #0]
   11aea:	9b01      	ldr	r3, [sp, #4]
   11aec:	4618      	mov	r0, r3
   11aee:	b002      	add	sp, #8
   11af0:	4770      	bx	lr
   11af2:	bf00      	nop
   11af4:	00019c6c 	.word	0x00019c6c

00011af8 <Lpc40xxSystemController::Lpc40xxSystemController()>:
  static constexpr uint32_t kDefaultIRCFrequency    = 12'000'000;
  static constexpr uint32_t kDefaultTimeout         = 1'000;  // ms

  inline static LPC_SC_TypeDef * system_controller = LPC_SC;

  constexpr Lpc40xxSystemController() {}
   11af8:	b500      	push	{lr}
   11afa:	b083      	sub	sp, #12
   11afc:	9001      	str	r0, [sp, #4]
   11afe:	9b01      	ldr	r3, [sp, #4]
   11b00:	4618      	mov	r0, r3
   11b02:	f7ff ffed 	bl	11ae0 <SystemControllerInterface::SystemControllerInterface()>
   11b06:	4a04      	ldr	r2, [pc, #16]	; (11b18 <Lpc40xxSystemController::Lpc40xxSystemController()+0x20>)
   11b08:	9b01      	ldr	r3, [sp, #4]
   11b0a:	601a      	str	r2, [r3, #0]
   11b0c:	9b01      	ldr	r3, [sp, #4]
   11b0e:	4618      	mov	r0, r3
   11b10:	b003      	add	sp, #12
   11b12:	f85d fb04 	ldr.w	pc, [sp], #4
   11b16:	bf00      	nop
   11b18:	00019c48 	.word	0x00019c48

00011b1c <Lpc40xxSystemController::SetClockFrequency(unsigned char)>:

  uint32_t SetClockFrequency(uint8_t frequency_in_mhz) override
   11b1c:	b500      	push	{lr}
   11b1e:	b085      	sub	sp, #20
   11b20:	9001      	str	r0, [sp, #4]
   11b22:	460b      	mov	r3, r1
   11b24:	f88d 3003 	strb.w	r3, [sp, #3]
  {
    uint32_t offset = 0;
   11b28:	2300      	movs	r3, #0
   11b2a:	9303      	str	r3, [sp, #12]
    SelectOscillatorSource(OscillatorSource::kIrc);
   11b2c:	2100      	movs	r1, #0
   11b2e:	9801      	ldr	r0, [sp, #4]
   11b30:	f000 f8ce 	bl	11cd0 <Lpc40xxSystemController::SelectOscillatorSource(Lpc40xxSystemController::OscillatorSource)>
    if (frequency_in_mhz > 12)
   11b34:	f89d 3003 	ldrb.w	r3, [sp, #3]
   11b38:	2b0c      	cmp	r3, #12
   11b3a:	d916      	bls.n	11b6a <Lpc40xxSystemController::SetClockFrequency(unsigned char)+0x4e>
    {
      offset = SetMainPll(PllInput::kIrc, frequency_in_mhz);
   11b3c:	f89d 3003 	ldrb.w	r3, [sp, #3]
   11b40:	b29b      	uxth	r3, r3
   11b42:	461a      	mov	r2, r3
   11b44:	210c      	movs	r1, #12
   11b46:	9801      	ldr	r0, [sp, #4]
   11b48:	f000 f9ac 	bl	11ea4 <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)>
   11b4c:	9003      	str	r0, [sp, #12]
      SelectMainClockSource(MainClockSource::kPllClock);
   11b4e:	f44f 7180 	mov.w	r1, #256	; 0x100
   11b52:	9801      	ldr	r0, [sp, #4]
   11b54:	f000 f8d6 	bl	11d04 <Lpc40xxSystemController::SelectMainClockSource(Lpc40xxSystemController::MainClockSource)>
      speed_in_hertz = frequency_in_mhz * 1'000'000;
   11b58:	f89d 3003 	ldrb.w	r3, [sp, #3]
   11b5c:	4a10      	ldr	r2, [pc, #64]	; (11ba0 <Lpc40xxSystemController::SetClockFrequency(unsigned char)+0x84>)
   11b5e:	fb02 f303 	mul.w	r3, r2, r3
   11b62:	461a      	mov	r2, r3
   11b64:	4b0f      	ldr	r3, [pc, #60]	; (11ba4 <Lpc40xxSystemController::SetClockFrequency(unsigned char)+0x88>)
   11b66:	601a      	str	r2, [r3, #0]
   11b68:	e006      	b.n	11b78 <Lpc40xxSystemController::SetClockFrequency(unsigned char)+0x5c>
    }
    else
    {
      SelectMainClockSource(MainClockSource::kBaseClock);
   11b6a:	2100      	movs	r1, #0
   11b6c:	9801      	ldr	r0, [sp, #4]
   11b6e:	f000 f8c9 	bl	11d04 <Lpc40xxSystemController::SelectMainClockSource(Lpc40xxSystemController::MainClockSource)>
      speed_in_hertz = kDefaultIRCFrequency;
   11b72:	4b0c      	ldr	r3, [pc, #48]	; (11ba4 <Lpc40xxSystemController::SetClockFrequency(unsigned char)+0x88>)
   11b74:	4a0c      	ldr	r2, [pc, #48]	; (11ba8 <Lpc40xxSystemController::SetClockFrequency(unsigned char)+0x8c>)
   11b76:	601a      	str	r2, [r3, #0]
    }
    SetCpuClockDivider(kDivideInputBy1);
   11b78:	2101      	movs	r1, #1
   11b7a:	9801      	ldr	r0, [sp, #4]
   11b7c:	f000 fa4a 	bl	12014 <Lpc40xxSystemController::SetCpuClockDivider(unsigned char)>
    SetPeripheralClockDivider(kDivideInputBy1);
   11b80:	9b01      	ldr	r3, [sp, #4]
   11b82:	681b      	ldr	r3, [r3, #0]
   11b84:	3304      	adds	r3, #4
   11b86:	681b      	ldr	r3, [r3, #0]
   11b88:	2101      	movs	r1, #1
   11b8a:	9801      	ldr	r0, [sp, #4]
   11b8c:	4798      	blx	r3
    SetEmcClockDivider(EmcDivider::kSameSpeedAsCpu);
   11b8e:	2100      	movs	r1, #0
   11b90:	9801      	ldr	r0, [sp, #4]
   11b92:	f000 fa73 	bl	1207c <Lpc40xxSystemController::SetEmcClockDivider(Lpc40xxSystemController::EmcDivider)>
    return offset;
   11b96:	9b03      	ldr	r3, [sp, #12]
  }
   11b98:	4618      	mov	r0, r3
   11b9a:	b005      	add	sp, #20
   11b9c:	f85d fb04 	ldr.w	pc, [sp], #4
   11ba0:	000f4240 	.word	0x000f4240
   11ba4:	1000004c 	.word	0x1000004c
   11ba8:	00b71b00 	.word	0x00b71b00

00011bac <Lpc40xxSystemController::SetPeripheralClockDivider(unsigned char)>:

  void SetPeripheralClockDivider(uint8_t peripheral_divider) override
   11bac:	b500      	push	{lr}
   11bae:	b083      	sub	sp, #12
   11bb0:	9001      	str	r0, [sp, #4]
   11bb2:	460b      	mov	r3, r1
   11bb4:	f88d 3003 	strb.w	r3, [sp, #3]
  {
    SJ2_ASSERT_FATAL(peripheral_divider <= 4, "Divider mustn't exceed 32");
   11bb8:	f89d 3003 	ldrb.w	r3, [sp, #3]
   11bbc:	2b04      	cmp	r3, #4
   11bbe:	d90d      	bls.n	11bdc <Lpc40xxSystemController::SetPeripheralClockDivider(unsigned char)+0x30>
   11bc0:	23ae      	movs	r3, #174	; 0xae
   11bc2:	4a0b      	ldr	r2, [pc, #44]	; (11bf0 <Lpc40xxSystemController::SetPeripheralClockDivider(unsigned char)+0x44>)
   11bc4:	490b      	ldr	r1, [pc, #44]	; (11bf4 <Lpc40xxSystemController::SetPeripheralClockDivider(unsigned char)+0x48>)
   11bc6:	480c      	ldr	r0, [pc, #48]	; (11bf8 <Lpc40xxSystemController::SetPeripheralClockDivider(unsigned char)+0x4c>)
   11bc8:	f005 fed6 	bl	17978 <printf>
   11bcc:	480b      	ldr	r0, [pc, #44]	; (11bfc <Lpc40xxSystemController::SetPeripheralClockDivider(unsigned char)+0x50>)
   11bce:	f004 fc27 	bl	16420 <puts>
   11bd2:	2100      	movs	r1, #0
   11bd4:	2001      	movs	r0, #1
   11bd6:	f7ff f975 	bl	10ec4 <debug::PrintBacktrace(bool, void*)>
   11bda:	e7fe      	b.n	11bda <Lpc40xxSystemController::SetPeripheralClockDivider(unsigned char)+0x2e>
    system_controller->PCLKSEL = peripheral_divider;
   11bdc:	4b08      	ldr	r3, [pc, #32]	; (11c00 <Lpc40xxSystemController::SetPeripheralClockDivider(unsigned char)+0x54>)
   11bde:	681b      	ldr	r3, [r3, #0]
   11be0:	f89d 2003 	ldrb.w	r2, [sp, #3]
   11be4:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
  }
   11be8:	bf00      	nop
   11bea:	b003      	add	sp, #12
   11bec:	f85d fb04 	ldr.w	pc, [sp], #4
   11bf0:	00019db0 	.word	0x00019db0
   11bf4:	00019a68 	.word	0x00019a68
   11bf8:	00019498 	.word	0x00019498
   11bfc:	00019538 	.word	0x00019538
   11c00:	10000048 	.word	0x10000048

00011c04 <Lpc40xxSystemController::GetPeripheralClockDivider() const>:

  uint32_t GetPeripheralClockDivider() const override
   11c04:	b082      	sub	sp, #8
   11c06:	9001      	str	r0, [sp, #4]
  {
#if defined(HOST_TEST)
    return 1;
#else
    return system_controller->PCLKSEL;
   11c08:	4b03      	ldr	r3, [pc, #12]	; (11c18 <Lpc40xxSystemController::GetPeripheralClockDivider() const+0x14>)
   11c0a:	681b      	ldr	r3, [r3, #0]
   11c0c:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
#endif
  }
   11c10:	4618      	mov	r0, r3
   11c12:	b002      	add	sp, #8
   11c14:	4770      	bx	lr
   11c16:	bf00      	nop
   11c18:	10000048 	.word	0x10000048

00011c1c <Lpc40xxSystemController::GetSystemFrequency() const>:

  uint32_t GetSystemFrequency() const override
   11c1c:	b082      	sub	sp, #8
   11c1e:	9001      	str	r0, [sp, #4]
  {
#if defined(HOST_TEST)
    return config::kSystemClockRate;
#else
    return speed_in_hertz;
   11c20:	4b02      	ldr	r3, [pc, #8]	; (11c2c <Lpc40xxSystemController::GetSystemFrequency() const+0x10>)
   11c22:	681b      	ldr	r3, [r3, #0]
#endif
  }
   11c24:	4618      	mov	r0, r3
   11c26:	b002      	add	sp, #8
   11c28:	4770      	bx	lr
   11c2a:	bf00      	nop
   11c2c:	1000004c 	.word	0x1000004c

00011c30 <Lpc40xxSystemController::GetPeripheralFrequency() const>:

  uint32_t GetPeripheralFrequency() const override
   11c30:	b500      	push	{lr}
   11c32:	b085      	sub	sp, #20
   11c34:	9001      	str	r0, [sp, #4]
  {
    uint32_t peripheral_clock_divider = GetPeripheralClockDivider();
   11c36:	9b01      	ldr	r3, [sp, #4]
   11c38:	681b      	ldr	r3, [r3, #0]
   11c3a:	3308      	adds	r3, #8
   11c3c:	681b      	ldr	r3, [r3, #0]
   11c3e:	9801      	ldr	r0, [sp, #4]
   11c40:	4798      	blx	r3
   11c42:	9002      	str	r0, [sp, #8]
    uint32_t result = 0;  // return 0 if peripheral_clock_divider == 0
   11c44:	2300      	movs	r3, #0
   11c46:	9303      	str	r3, [sp, #12]
    if (peripheral_clock_divider != 0)
   11c48:	9b02      	ldr	r3, [sp, #8]
   11c4a:	2b00      	cmp	r3, #0
   11c4c:	d00a      	beq.n	11c64 <Lpc40xxSystemController::GetPeripheralFrequency() const+0x34>
    {
      result = GetSystemFrequency() / peripheral_clock_divider;
   11c4e:	9b01      	ldr	r3, [sp, #4]
   11c50:	681b      	ldr	r3, [r3, #0]
   11c52:	330c      	adds	r3, #12
   11c54:	681b      	ldr	r3, [r3, #0]
   11c56:	9801      	ldr	r0, [sp, #4]
   11c58:	4798      	blx	r3
   11c5a:	4602      	mov	r2, r0
   11c5c:	9b02      	ldr	r3, [sp, #8]
   11c5e:	fbb2 f3f3 	udiv	r3, r2, r3
   11c62:	9303      	str	r3, [sp, #12]
    }
    return result;
   11c64:	9b03      	ldr	r3, [sp, #12]
  }
   11c66:	4618      	mov	r0, r3
   11c68:	b005      	add	sp, #20
   11c6a:	f85d fb04 	ldr.w	pc, [sp], #4
   11c6e:	Address 0x0000000000011c6e is out of bounds.


00011c70 <Lpc40xxSystemController::PowerUpPeripheral(SystemControllerInterface::PeripheralID const&)>:

  void PowerUpPeripheral(const PeripheralID & peripheral_select) override
   11c70:	b084      	sub	sp, #16
   11c72:	9001      	str	r0, [sp, #4]
   11c74:	9100      	str	r1, [sp, #0]
  {
    auto power_connection_with_enabled_peripheral =
        system_controller->PCONP | (1 << peripheral_select.device_id);
   11c76:	4b09      	ldr	r3, [pc, #36]	; (11c9c <Lpc40xxSystemController::PowerUpPeripheral(SystemControllerInterface::PeripheralID const&)+0x2c>)
   11c78:	681b      	ldr	r3, [r3, #0]
   11c7a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
   11c7e:	9a00      	ldr	r2, [sp, #0]
   11c80:	6812      	ldr	r2, [r2, #0]
   11c82:	2101      	movs	r1, #1
   11c84:	fa01 f202 	lsl.w	r2, r1, r2
   11c88:	4313      	orrs	r3, r2
   11c8a:	9303      	str	r3, [sp, #12]

    system_controller->PCONP = power_connection_with_enabled_peripheral;
   11c8c:	4b03      	ldr	r3, [pc, #12]	; (11c9c <Lpc40xxSystemController::PowerUpPeripheral(SystemControllerInterface::PeripheralID const&)+0x2c>)
   11c8e:	681b      	ldr	r3, [r3, #0]
   11c90:	9a03      	ldr	r2, [sp, #12]
   11c92:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  }
   11c96:	bf00      	nop
   11c98:	b004      	add	sp, #16
   11c9a:	4770      	bx	lr
   11c9c:	10000048 	.word	0x10000048

00011ca0 <Lpc40xxSystemController::PowerDownPeripheral(SystemControllerInterface::PeripheralID const&)>:
  void PowerDownPeripheral(const PeripheralID & peripheral_select) override
   11ca0:	b084      	sub	sp, #16
   11ca2:	9001      	str	r0, [sp, #4]
   11ca4:	9100      	str	r1, [sp, #0]
  {
    auto power_connection_without_enabled_peripheral =
        system_controller->PCONP & (1 << peripheral_select.device_id);
   11ca6:	4b09      	ldr	r3, [pc, #36]	; (11ccc <Lpc40xxSystemController::PowerDownPeripheral(SystemControllerInterface::PeripheralID const&)+0x2c>)
   11ca8:	681b      	ldr	r3, [r3, #0]
   11caa:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
   11cae:	9a00      	ldr	r2, [sp, #0]
   11cb0:	6812      	ldr	r2, [r2, #0]
   11cb2:	2101      	movs	r1, #1
   11cb4:	fa01 f202 	lsl.w	r2, r1, r2
   11cb8:	4013      	ands	r3, r2
   11cba:	9303      	str	r3, [sp, #12]

    system_controller->PCONP = power_connection_without_enabled_peripheral;
   11cbc:	4b03      	ldr	r3, [pc, #12]	; (11ccc <Lpc40xxSystemController::PowerDownPeripheral(SystemControllerInterface::PeripheralID const&)+0x2c>)
   11cbe:	681b      	ldr	r3, [r3, #0]
   11cc0:	9a03      	ldr	r2, [sp, #12]
   11cc2:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  }
   11cc6:	bf00      	nop
   11cc8:	b004      	add	sp, #16
   11cca:	4770      	bx	lr
   11ccc:	10000048 	.word	0x10000048

00011cd0 <Lpc40xxSystemController::SelectOscillatorSource(Lpc40xxSystemController::OscillatorSource)>:

 private:
  void SelectOscillatorSource(OscillatorSource source)
   11cd0:	b084      	sub	sp, #16
   11cd2:	9001      	str	r0, [sp, #4]
   11cd4:	460b      	mov	r3, r1
   11cd6:	f8ad 3002 	strh.w	r3, [sp, #2]
  {
    uint32_t source_bit = static_cast<uint32_t>(source);
   11cda:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   11cde:	9303      	str	r3, [sp, #12]
    system_controller->CLKSRCSEL =
        (system_controller->CLKSRCSEL & ~(kOscillatorSelect)) | source_bit;
   11ce0:	4b07      	ldr	r3, [pc, #28]	; (11d00 <Lpc40xxSystemController::SelectOscillatorSource(Lpc40xxSystemController::OscillatorSource)+0x30>)
   11ce2:	681b      	ldr	r3, [r3, #0]
   11ce4:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
   11ce8:	f023 0101 	bic.w	r1, r3, #1
    system_controller->CLKSRCSEL =
   11cec:	4b04      	ldr	r3, [pc, #16]	; (11d00 <Lpc40xxSystemController::SelectOscillatorSource(Lpc40xxSystemController::OscillatorSource)+0x30>)
   11cee:	681b      	ldr	r3, [r3, #0]
        (system_controller->CLKSRCSEL & ~(kOscillatorSelect)) | source_bit;
   11cf0:	9a03      	ldr	r2, [sp, #12]
   11cf2:	430a      	orrs	r2, r1
    system_controller->CLKSRCSEL =
   11cf4:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
  }
   11cf8:	bf00      	nop
   11cfa:	b004      	add	sp, #16
   11cfc:	4770      	bx	lr
   11cfe:	bf00      	nop
   11d00:	10000048 	.word	0x10000048

00011d04 <Lpc40xxSystemController::SelectMainClockSource(Lpc40xxSystemController::MainClockSource)>:

  void SelectMainClockSource(MainClockSource source)
   11d04:	b082      	sub	sp, #8
   11d06:	9001      	str	r0, [sp, #4]
   11d08:	460b      	mov	r3, r1
   11d0a:	f8ad 3002 	strh.w	r3, [sp, #2]
  {
    system_controller->CCLKSEL =
        (system_controller->CCLKSEL & ~(kBaseClockSelect)) |
   11d0e:	4b08      	ldr	r3, [pc, #32]	; (11d30 <Lpc40xxSystemController::SelectMainClockSource(Lpc40xxSystemController::MainClockSource)+0x2c>)
   11d10:	681b      	ldr	r3, [r3, #0]
   11d12:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   11d16:	f423 7180 	bic.w	r1, r3, #256	; 0x100
        static_cast<uint32_t>(source);
   11d1a:	f8bd 2002 	ldrh.w	r2, [sp, #2]
    system_controller->CCLKSEL =
   11d1e:	4b04      	ldr	r3, [pc, #16]	; (11d30 <Lpc40xxSystemController::SelectMainClockSource(Lpc40xxSystemController::MainClockSource)+0x2c>)
   11d20:	681b      	ldr	r3, [r3, #0]
        (system_controller->CCLKSEL & ~(kBaseClockSelect)) |
   11d22:	430a      	orrs	r2, r1
    system_controller->CCLKSEL =
   11d24:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
  }
   11d28:	bf00      	nop
   11d2a:	b002      	add	sp, #8
   11d2c:	4770      	bx	lr
   11d2e:	bf00      	nop
   11d30:	10000048 	.word	0x10000048

00011d34 <Lpc40xxSystemController::SelectUsbClockSource(Lpc40xxSystemController::UsbSource)>:

  void SelectUsbClockSource(UsbSource usb_clock)
   11d34:	b082      	sub	sp, #8
   11d36:	9001      	str	r0, [sp, #4]
   11d38:	460b      	mov	r3, r1
   11d3a:	f8ad 3002 	strh.w	r3, [sp, #2]
  {
    system_controller->USBCLKSEL =
        (system_controller->USBCLKSEL & ~(kUsbClockSource)) |
   11d3e:	4b08      	ldr	r3, [pc, #32]	; (11d60 <Lpc40xxSystemController::SelectUsbClockSource(Lpc40xxSystemController::UsbSource)+0x2c>)
   11d40:	681b      	ldr	r3, [r3, #0]
   11d42:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
   11d46:	f423 7140 	bic.w	r1, r3, #768	; 0x300
        static_cast<uint32_t>(usb_clock);
   11d4a:	f8bd 2002 	ldrh.w	r2, [sp, #2]
    system_controller->USBCLKSEL =
   11d4e:	4b04      	ldr	r3, [pc, #16]	; (11d60 <Lpc40xxSystemController::SelectUsbClockSource(Lpc40xxSystemController::UsbSource)+0x2c>)
   11d50:	681b      	ldr	r3, [r3, #0]
        (system_controller->USBCLKSEL & ~(kUsbClockSource)) |
   11d52:	430a      	orrs	r2, r1
    system_controller->USBCLKSEL =
   11d54:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
  }
   11d58:	bf00      	nop
   11d5a:	b002      	add	sp, #8
   11d5c:	4770      	bx	lr
   11d5e:	bf00      	nop
   11d60:	10000048 	.word	0x10000048

00011d64 <Lpc40xxSystemController::SelectSpifiClockSource(Lpc40xxSystemController::SpifiSource)>:

  void SelectSpifiClockSource(SpifiSource spifi_clock)
   11d64:	b082      	sub	sp, #8
   11d66:	9001      	str	r0, [sp, #4]
   11d68:	460b      	mov	r3, r1
   11d6a:	f8ad 3002 	strh.w	r3, [sp, #2]
  {
    system_controller->SPIFISEL =
        (system_controller->SPIFISEL & ~(kSpifiClockSource)) |
   11d6e:	4b08      	ldr	r3, [pc, #32]	; (11d90 <Lpc40xxSystemController::SelectSpifiClockSource(Lpc40xxSystemController::SpifiSource)+0x2c>)
   11d70:	681b      	ldr	r3, [r3, #0]
   11d72:	f8d3 31b4 	ldr.w	r3, [r3, #436]	; 0x1b4
   11d76:	f423 7140 	bic.w	r1, r3, #768	; 0x300
        static_cast<uint32_t>(spifi_clock);
   11d7a:	f8bd 2002 	ldrh.w	r2, [sp, #2]
    system_controller->SPIFISEL =
   11d7e:	4b04      	ldr	r3, [pc, #16]	; (11d90 <Lpc40xxSystemController::SelectSpifiClockSource(Lpc40xxSystemController::SpifiSource)+0x2c>)
   11d80:	681b      	ldr	r3, [r3, #0]
        (system_controller->SPIFISEL & ~(kSpifiClockSource)) |
   11d82:	430a      	orrs	r2, r1
    system_controller->SPIFISEL =
   11d84:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
  }
   11d88:	bf00      	nop
   11d8a:	b002      	add	sp, #8
   11d8c:	4770      	bx	lr
   11d8e:	bf00      	nop
   11d90:	10000048 	.word	0x10000048

00011d94 <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)>:

  uint32_t CalculatePll(PllInput input_frequency, uint16_t desired_speed_in_mhz)
   11d94:	b500      	push	{lr}
   11d96:	b087      	sub	sp, #28
   11d98:	9001      	str	r0, [sp, #4]
   11d9a:	460b      	mov	r3, r1
   11d9c:	f8ad 3002 	strh.w	r3, [sp, #2]
   11da0:	4613      	mov	r3, r2
   11da2:	f8ad 3000 	strh.w	r3, [sp]
  {
    SJ2_ASSERT_FATAL(desired_speed_in_mhz < 384 && desired_speed_in_mhz > 12,
   11da6:	f8bd 3000 	ldrh.w	r3, [sp]
   11daa:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
   11dae:	d203      	bcs.n	11db8 <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)+0x24>
   11db0:	f8bd 3000 	ldrh.w	r3, [sp]
   11db4:	2b0c      	cmp	r3, #12
   11db6:	d80d      	bhi.n	11dd4 <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)+0x40>
   11db8:	23ff      	movs	r3, #255	; 0xff
   11dba:	4a34      	ldr	r2, [pc, #208]	; (11e8c <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)+0xf8>)
   11dbc:	4934      	ldr	r1, [pc, #208]	; (11e90 <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)+0xfc>)
   11dbe:	4835      	ldr	r0, [pc, #212]	; (11e94 <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)+0x100>)
   11dc0:	f005 fdda 	bl	17978 <printf>
   11dc4:	4834      	ldr	r0, [pc, #208]	; (11e98 <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)+0x104>)
   11dc6:	f004 fb2b 	bl	16420 <puts>
   11dca:	2100      	movs	r1, #0
   11dcc:	2001      	movs	r0, #1
   11dce:	f7ff f879 	bl	10ec4 <debug::PrintBacktrace(bool, void*)>
   11dd2:	e7fe      	b.n	11dd2 <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)+0x3e>
                     "Frequency must be lower than 384 MHz"
                     "and greater than or equal to 12 MHz");
    bool calculating = true;
   11dd4:	2301      	movs	r3, #1
   11dd6:	f88d 3017 	strb.w	r3, [sp, #23]
    uint32_t multiplier_value;
    if ((desired_speed_in_mhz % static_cast<uint16_t>(input_frequency)) >= 1)
   11dda:	f8bd 3000 	ldrh.w	r3, [sp]
   11dde:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   11de2:	fbb3 f1f2 	udiv	r1, r3, r2
   11de6:	fb02 f201 	mul.w	r2, r2, r1
   11dea:	1a9b      	subs	r3, r3, r2
   11dec:	b29b      	uxth	r3, r3
   11dee:	2b00      	cmp	r3, #0
   11df0:	d009      	beq.n	11e06 <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)+0x72>
    {
      multiplier_value = static_cast<uint32_t>(
          (desired_speed_in_mhz / static_cast<uint16_t>(input_frequency)) + 1);
   11df2:	f8bd 2000 	ldrh.w	r2, [sp]
   11df6:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   11dfa:	fbb2 f3f3 	udiv	r3, r2, r3
   11dfe:	b29b      	uxth	r3, r3
   11e00:	3301      	adds	r3, #1
      multiplier_value = static_cast<uint32_t>(
   11e02:	9304      	str	r3, [sp, #16]
   11e04:	e007      	b.n	11e16 <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)+0x82>
    }
    else
    {
      multiplier_value = static_cast<uint32_t>(
          desired_speed_in_mhz / static_cast<uint16_t>(input_frequency));
   11e06:	f8bd 2000 	ldrh.w	r2, [sp]
   11e0a:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   11e0e:	fbb2 f3f3 	udiv	r3, r2, r3
   11e12:	b29b      	uxth	r3, r3
      multiplier_value = static_cast<uint32_t>(
   11e14:	9304      	str	r3, [sp, #16]
    }
    uint16_t divider_value = 1;
   11e16:	2301      	movs	r3, #1
   11e18:	f8ad 300e 	strh.w	r3, [sp, #14]
    while (calculating)
   11e1c:	f89d 3017 	ldrb.w	r3, [sp, #23]
   11e20:	2b00      	cmp	r3, #0
   11e22:	d02e      	beq.n	11e82 <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)+0xee>
    {
      uint16_t current_controlled_oscillator_frequency;
      current_controlled_oscillator_frequency = static_cast<uint16_t>(
   11e24:	9b04      	ldr	r3, [sp, #16]
   11e26:	b29b      	uxth	r3, r3
   11e28:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   11e2c:	fb12 f303 	smulbb	r3, r2, r3
   11e30:	b29b      	uxth	r3, r3
   11e32:	f8bd 200e 	ldrh.w	r2, [sp, #14]
   11e36:	fb12 f303 	smulbb	r3, r2, r3
   11e3a:	b29b      	uxth	r3, r3
   11e3c:	005b      	lsls	r3, r3, #1
   11e3e:	f8ad 300c 	strh.w	r3, [sp, #12]
          (static_cast<uint16_t>(input_frequency) * multiplier_value * 2) *
          divider_value);
      if (current_controlled_oscillator_frequency >= 156)
   11e42:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   11e46:	2b9b      	cmp	r3, #155	; 0x9b
   11e48:	d903      	bls.n	11e52 <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)+0xbe>
      {
        calculating = false;
   11e4a:	2300      	movs	r3, #0
   11e4c:	f88d 3017 	strb.w	r3, [sp, #23]
   11e50:	e7e4      	b.n	11e1c <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)+0x88>
      }
      else
      {
        divider_value = static_cast<uint16_t>(divider_value * 2);
   11e52:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   11e56:	005b      	lsls	r3, r3, #1
   11e58:	f8ad 300e 	strh.w	r3, [sp, #14]
        SJ2_ASSERT_FATAL(divider_value < 8,
   11e5c:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   11e60:	2b07      	cmp	r3, #7
   11e62:	d9db      	bls.n	11e1c <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)+0x88>
   11e64:	f240 131b 	movw	r3, #283	; 0x11b
   11e68:	4a08      	ldr	r2, [pc, #32]	; (11e8c <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)+0xf8>)
   11e6a:	490c      	ldr	r1, [pc, #48]	; (11e9c <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)+0x108>)
   11e6c:	480c      	ldr	r0, [pc, #48]	; (11ea0 <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)+0x10c>)
   11e6e:	f005 fd83 	bl	17978 <printf>
   11e72:	4809      	ldr	r0, [pc, #36]	; (11e98 <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)+0x104>)
   11e74:	f004 fad4 	bl	16420 <puts>
   11e78:	2100      	movs	r1, #0
   11e7a:	2001      	movs	r0, #1
   11e7c:	f7ff f822 	bl	10ec4 <debug::PrintBacktrace(bool, void*)>
   11e80:	e7fe      	b.n	11e80 <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)+0xec>
                         "PLL divider value went out of bounds");
      }
    }

    return multiplier_value;
   11e82:	9b04      	ldr	r3, [sp, #16]
  }
   11e84:	4618      	mov	r0, r3
   11e86:	b007      	add	sp, #28
   11e88:	f85d fb04 	ldr.w	pc, [sp], #4
   11e8c:	00019e58 	.word	0x00019e58
   11e90:	00019a80 	.word	0x00019a80
   11e94:	00019550 	.word	0x00019550
   11e98:	00019538 	.word	0x00019538
   11e9c:	00019a98 	.word	0x00019a98
   11ea0:	00019640 	.word	0x00019640

00011ea4 <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)>:

  uint32_t SetMainPll(PllInput input_frequency, uint16_t desired_speed_in_mhz)
   11ea4:	b510      	push	{r4, lr}
   11ea6:	b08a      	sub	sp, #40	; 0x28
   11ea8:	9001      	str	r0, [sp, #4]
   11eaa:	460b      	mov	r3, r1
   11eac:	f8ad 3002 	strh.w	r3, [sp, #2]
   11eb0:	4613      	mov	r3, r2
   11eb2:	f8ad 3000 	strh.w	r3, [sp]
  {
    uint16_t divider_value = 1;
   11eb6:	2301      	movs	r3, #1
   11eb8:	f8ad 301a 	strh.w	r3, [sp, #26]
    uint64_t timeout_time  = Milliseconds() + kDefaultTimeout;
   11ebc:	f7ff f89a 	bl	10ff4 <Milliseconds()>
   11ec0:	460a      	mov	r2, r1
   11ec2:	4601      	mov	r1, r0
   11ec4:	f511 737a 	adds.w	r3, r1, #1000	; 0x3e8
   11ec8:	f142 0400 	adc.w	r4, r2, #0
   11ecc:	e9cd 3404 	strd	r3, r4, [sp, #16]
    uint64_t current_time  = Milliseconds();
   11ed0:	f7ff f890 	bl	10ff4 <Milliseconds()>
   11ed4:	e9cd 0108 	strd	r0, r1, [sp, #32]
    uint32_t multiplier_value =
        CalculatePll(input_frequency, desired_speed_in_mhz);
   11ed8:	f8bd 2000 	ldrh.w	r2, [sp]
   11edc:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   11ee0:	4619      	mov	r1, r3
   11ee2:	9801      	ldr	r0, [sp, #4]
   11ee4:	f7ff ff56 	bl	11d94 <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)>
   11ee8:	9003      	str	r0, [sp, #12]
    uint32_t actual_speed =
        static_cast<uint32_t>(input_frequency) * multiplier_value;
   11eea:	f8bd 2002 	ldrh.w	r2, [sp, #2]
    uint32_t actual_speed =
   11eee:	9b03      	ldr	r3, [sp, #12]
   11ef0:	fb02 f303 	mul.w	r3, r2, r3
   11ef4:	9307      	str	r3, [sp, #28]
    // TO DO: use registers to retreive values
    SelectOscillatorSource(OscillatorSource::kIrc);
   11ef6:	2100      	movs	r1, #0
   11ef8:	9801      	ldr	r0, [sp, #4]
   11efa:	f7ff fee9 	bl	11cd0 <Lpc40xxSystemController::SelectOscillatorSource(Lpc40xxSystemController::OscillatorSource)>
    SelectMainClockSource(MainClockSource::kBaseClock);
   11efe:	2100      	movs	r1, #0
   11f00:	9801      	ldr	r0, [sp, #4]
   11f02:	f7ff feff 	bl	11d04 <Lpc40xxSystemController::SelectMainClockSource(Lpc40xxSystemController::MainClockSource)>
    SelectUsbClockSource(UsbSource::kBaseClock);
   11f06:	2100      	movs	r1, #0
   11f08:	9801      	ldr	r0, [sp, #4]
   11f0a:	f7ff ff13 	bl	11d34 <Lpc40xxSystemController::SelectUsbClockSource(Lpc40xxSystemController::UsbSource)>
    SelectSpifiClockSource(SpifiSource::kBaseClock);
   11f0e:	2100      	movs	r1, #0
   11f10:	9801      	ldr	r0, [sp, #4]
   11f12:	f7ff ff27 	bl	11d64 <Lpc40xxSystemController::SelectSpifiClockSource(Lpc40xxSystemController::SpifiSource)>
    // must subtract 1 from multiplier value as specified in datasheet
    system_controller->PLL0CFG =
        (system_controller->PLL0CFG & ~kClearPllMultiplier) |
   11f16:	4b3a      	ldr	r3, [pc, #232]	; (12000 <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0x15c>)
   11f18:	681b      	ldr	r3, [r3, #0]
   11f1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   11f1e:	f023 011f 	bic.w	r1, r3, #31
        (multiplier_value - 1);
   11f22:	9b03      	ldr	r3, [sp, #12]
   11f24:	1e5a      	subs	r2, r3, #1
    system_controller->PLL0CFG =
   11f26:	4b36      	ldr	r3, [pc, #216]	; (12000 <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0x15c>)
   11f28:	681b      	ldr	r3, [r3, #0]
        (system_controller->PLL0CFG & ~kClearPllMultiplier) |
   11f2a:	430a      	orrs	r2, r1
    system_controller->PLL0CFG =
   11f2c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    system_controller->PLL0CFG =
        (system_controller->PLL0CFG & ~kClearPllDivider) | (divider_value << 5);
   11f30:	4b33      	ldr	r3, [pc, #204]	; (12000 <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0x15c>)
   11f32:	681b      	ldr	r3, [r3, #0]
   11f34:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   11f38:	f023 0260 	bic.w	r2, r3, #96	; 0x60
   11f3c:	f8bd 301a 	ldrh.w	r3, [sp, #26]
   11f40:	015b      	lsls	r3, r3, #5
   11f42:	4619      	mov	r1, r3
    system_controller->PLL0CFG =
   11f44:	4b2e      	ldr	r3, [pc, #184]	; (12000 <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0x15c>)
   11f46:	681b      	ldr	r3, [r3, #0]
        (system_controller->PLL0CFG & ~kClearPllDivider) | (divider_value << 5);
   11f48:	430a      	orrs	r2, r1
    system_controller->PLL0CFG =
   11f4a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    system_controller->PLL0CON |= kEnablePll;
   11f4e:	4b2c      	ldr	r3, [pc, #176]	; (12000 <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0x15c>)
   11f50:	681b      	ldr	r3, [r3, #0]
   11f52:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
   11f56:	4b2a      	ldr	r3, [pc, #168]	; (12000 <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0x15c>)
   11f58:	681b      	ldr	r3, [r3, #0]
   11f5a:	f042 0201 	orr.w	r2, r2, #1
   11f5e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    // nessecary feed sequence to ensure the changes are intentional
    system_controller->PLL0FEED = 0xAA;
   11f62:	4b27      	ldr	r3, [pc, #156]	; (12000 <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0x15c>)
   11f64:	681b      	ldr	r3, [r3, #0]
   11f66:	22aa      	movs	r2, #170	; 0xaa
   11f68:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    system_controller->PLL0FEED = 0x55;
   11f6c:	4b24      	ldr	r3, [pc, #144]	; (12000 <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0x15c>)
   11f6e:	681b      	ldr	r3, [r3, #0]
   11f70:	2255      	movs	r2, #85	; 0x55
   11f72:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    while (!(system_controller->PLL0STAT >> kPlock & 1) &&
   11f76:	4b22      	ldr	r3, [pc, #136]	; (12000 <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0x15c>)
   11f78:	681b      	ldr	r3, [r3, #0]
   11f7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   11f7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
   11f82:	2b00      	cmp	r3, #0
   11f84:	d109      	bne.n	11f9a <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0xf6>
   11f86:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
   11f8a:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
   11f8e:	42a2      	cmp	r2, r4
   11f90:	bf08      	it	eq
   11f92:	4299      	cmpeq	r1, r3
   11f94:	d201      	bcs.n	11f9a <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0xf6>
   11f96:	2301      	movs	r3, #1
   11f98:	e000      	b.n	11f9c <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0xf8>
   11f9a:	2300      	movs	r3, #0
   11f9c:	2b00      	cmp	r3, #0
   11f9e:	d004      	beq.n	11faa <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0x106>
           (current_time < timeout_time))
    {
      current_time = Milliseconds();
   11fa0:	f7ff f828 	bl	10ff4 <Milliseconds()>
   11fa4:	e9cd 0108 	strd	r0, r1, [sp, #32]
    while (!(system_controller->PLL0STAT >> kPlock & 1) &&
   11fa8:	e7e5      	b.n	11f76 <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0xd2>
    }
    if (!(system_controller->PLL0STAT >> kPlock & 1) &&
   11faa:	4b15      	ldr	r3, [pc, #84]	; (12000 <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0x15c>)
   11fac:	681b      	ldr	r3, [r3, #0]
   11fae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   11fb2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
   11fb6:	2b00      	cmp	r3, #0
   11fb8:	d109      	bne.n	11fce <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0x12a>
   11fba:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
   11fbe:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
   11fc2:	42a2      	cmp	r2, r4
   11fc4:	bf08      	it	eq
   11fc6:	4299      	cmpeq	r1, r3
   11fc8:	d301      	bcc.n	11fce <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0x12a>
   11fca:	2301      	movs	r3, #1
   11fcc:	e000      	b.n	11fd0 <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0x12c>
   11fce:	2300      	movs	r3, #0
   11fd0:	2b00      	cmp	r3, #0
   11fd2:	d00e      	beq.n	11ff2 <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0x14e>
        (current_time >= timeout_time))
    {
      SJ2_ASSERT_FATAL(false,
   11fd4:	f240 1343 	movw	r3, #323	; 0x143
   11fd8:	4a0a      	ldr	r2, [pc, #40]	; (12004 <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0x160>)
   11fda:	490b      	ldr	r1, [pc, #44]	; (12008 <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0x164>)
   11fdc:	480b      	ldr	r0, [pc, #44]	; (1200c <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0x168>)
   11fde:	f005 fccb 	bl	17978 <printf>
   11fe2:	480b      	ldr	r0, [pc, #44]	; (12010 <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0x16c>)
   11fe4:	f004 fa1c 	bl	16420 <puts>
   11fe8:	2100      	movs	r1, #0
   11fea:	2001      	movs	r0, #1
   11fec:	f7fe ff6a 	bl	10ec4 <debug::PrintBacktrace(bool, void*)>
   11ff0:	e7fe      	b.n	11ff0 <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0x14c>
                       "PLL lock could not be established before timeout");
      actual_speed = kDefaultIRCFrequency;
    }
    return (actual_speed - desired_speed_in_mhz);
   11ff2:	f8bd 3000 	ldrh.w	r3, [sp]
   11ff6:	9a07      	ldr	r2, [sp, #28]
   11ff8:	1ad3      	subs	r3, r2, r3
  }
   11ffa:	4618      	mov	r0, r3
   11ffc:	b00a      	add	sp, #40	; 0x28
   11ffe:	bd10      	pop	{r4, pc}
   12000:	10000048 	.word	0x10000048
   12004:	00019dfc 	.word	0x00019dfc
   12008:	00019ab0 	.word	0x00019ab0
   1200c:	000196e8 	.word	0x000196e8
   12010:	00019538 	.word	0x00019538

00012014 <Lpc40xxSystemController::SetCpuClockDivider(unsigned char)>:
                       "PLL lock could not be established before timeout");
    }
    return (actual_speed - desired_speed_in_mhz);
  }

  void SetCpuClockDivider(uint8_t cpu_divider)
   12014:	b500      	push	{lr}
   12016:	b083      	sub	sp, #12
   12018:	9001      	str	r0, [sp, #4]
   1201a:	460b      	mov	r3, r1
   1201c:	f88d 3003 	strb.w	r3, [sp, #3]
  {
    SJ2_ASSERT_FATAL(cpu_divider < 32, "Divider mustn't exceed 32");
   12020:	f89d 3003 	ldrb.w	r3, [sp, #3]
   12024:	2b1f      	cmp	r3, #31
   12026:	d90e      	bls.n	12046 <Lpc40xxSystemController::SetCpuClockDivider(unsigned char)+0x32>
   12028:	f240 136f 	movw	r3, #367	; 0x16f
   1202c:	4a0e      	ldr	r2, [pc, #56]	; (12068 <Lpc40xxSystemController::SetCpuClockDivider(unsigned char)+0x54>)
   1202e:	490f      	ldr	r1, [pc, #60]	; (1206c <Lpc40xxSystemController::SetCpuClockDivider(unsigned char)+0x58>)
   12030:	480f      	ldr	r0, [pc, #60]	; (12070 <Lpc40xxSystemController::SetCpuClockDivider(unsigned char)+0x5c>)
   12032:	f005 fca1 	bl	17978 <printf>
   12036:	480f      	ldr	r0, [pc, #60]	; (12074 <Lpc40xxSystemController::SetCpuClockDivider(unsigned char)+0x60>)
   12038:	f004 f9f2 	bl	16420 <puts>
   1203c:	2100      	movs	r1, #0
   1203e:	2001      	movs	r0, #1
   12040:	f7fe ff40 	bl	10ec4 <debug::PrintBacktrace(bool, void*)>
   12044:	e7fe      	b.n	12044 <Lpc40xxSystemController::SetCpuClockDivider(unsigned char)+0x30>
    system_controller->CCLKSEL =
        (system_controller->CCLKSEL & ~kClearCpuDivider) | cpu_divider;
   12046:	4b0c      	ldr	r3, [pc, #48]	; (12078 <Lpc40xxSystemController::SetCpuClockDivider(unsigned char)+0x64>)
   12048:	681b      	ldr	r3, [r3, #0]
   1204a:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   1204e:	f023 011f 	bic.w	r1, r3, #31
   12052:	f89d 2003 	ldrb.w	r2, [sp, #3]
    system_controller->CCLKSEL =
   12056:	4b08      	ldr	r3, [pc, #32]	; (12078 <Lpc40xxSystemController::SetCpuClockDivider(unsigned char)+0x64>)
   12058:	681b      	ldr	r3, [r3, #0]
        (system_controller->CCLKSEL & ~kClearCpuDivider) | cpu_divider;
   1205a:	430a      	orrs	r2, r1
    system_controller->CCLKSEL =
   1205c:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
  }
   12060:	bf00      	nop
   12062:	b003      	add	sp, #12
   12064:	f85d fb04 	ldr.w	pc, [sp], #4
   12068:	00019eb4 	.word	0x00019eb4
   1206c:	00019ac8 	.word	0x00019ac8
   12070:	00019790 	.word	0x00019790
   12074:	00019538 	.word	0x00019538
   12078:	10000048 	.word	0x10000048

0001207c <Lpc40xxSystemController::SetEmcClockDivider(Lpc40xxSystemController::EmcDivider)>:

  void SetEmcClockDivider(EmcDivider emc_divider)
   1207c:	b082      	sub	sp, #8
   1207e:	9001      	str	r0, [sp, #4]
   12080:	460b      	mov	r3, r1
   12082:	f88d 3003 	strb.w	r3, [sp, #3]
  {
    system_controller->EMCCLKSEL =
        (system_controller->EMCCLKSEL & ~kClearEmcDivider) |
   12086:	4b08      	ldr	r3, [pc, #32]	; (120a8 <Lpc40xxSystemController::SetEmcClockDivider(Lpc40xxSystemController::EmcDivider)+0x2c>)
   12088:	681b      	ldr	r3, [r3, #0]
   1208a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   1208e:	f023 0101 	bic.w	r1, r3, #1
        static_cast<uint8_t>(emc_divider);
   12092:	f89d 2003 	ldrb.w	r2, [sp, #3]
    system_controller->EMCCLKSEL =
   12096:	4b04      	ldr	r3, [pc, #16]	; (120a8 <Lpc40xxSystemController::SetEmcClockDivider(Lpc40xxSystemController::EmcDivider)+0x2c>)
   12098:	681b      	ldr	r3, [r3, #0]
        (system_controller->EMCCLKSEL & ~kClearEmcDivider) |
   1209a:	430a      	orrs	r2, r1
    system_controller->EMCCLKSEL =
   1209c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }
   120a0:	bf00      	nop
   120a2:	b002      	add	sp, #8
   120a4:	4770      	bx	lr
   120a6:	bf00      	nop
   120a8:	10000048 	.word	0x10000048

000120ac <int util::Value<Ssp::Peripheral, int>(Ssp::Peripheral)>:
constexpr Type Value(Enum enum_type_value)
   120ac:	b530      	push	{r4, r5, lr}
   120ae:	b083      	sub	sp, #12
   120b0:	4675      	mov	r5, lr
   120b2:	9001      	str	r0, [sp, #4]
   120b4:	462b      	mov	r3, r5
   120b6:	4619      	mov	r1, r3
   120b8:	4806      	ldr	r0, [pc, #24]	; (120d4 <int util::Value<Ssp::Peripheral, int>(Ssp::Peripheral)+0x28>)
   120ba:	f004 f9e1 	bl	16480 <__cyg_profile_func_enter>
  return static_cast<Type>(enum_type_value);
   120be:	9c01      	ldr	r4, [sp, #4]
   120c0:	462b      	mov	r3, r5
   120c2:	4619      	mov	r1, r3
   120c4:	4803      	ldr	r0, [pc, #12]	; (120d4 <int util::Value<Ssp::Peripheral, int>(Ssp::Peripheral)+0x28>)
   120c6:	f004 f9ef 	bl	164a8 <__cyg_profile_func_exit>
   120ca:	4623      	mov	r3, r4
}
   120cc:	4618      	mov	r0, r3
   120ce:	b003      	add	sp, #12
   120d0:	bd30      	pop	{r4, r5, pc}
   120d2:	bf00      	nop
   120d4:	000120ad 	.word	0x000120ad

000120d8 <SspInterface::SspInterface()>:
#include "L0_LowLevel/system_controller.hpp"
#include "L1_Drivers/pin.hpp"
#include "utility/bit.hpp"
#include "utility/enum.hpp"

class SspInterface
   120d8:	b530      	push	{r4, r5, lr}
   120da:	b083      	sub	sp, #12
   120dc:	4675      	mov	r5, lr
   120de:	9001      	str	r0, [sp, #4]
   120e0:	462b      	mov	r3, r5
   120e2:	4619      	mov	r1, r3
   120e4:	4807      	ldr	r0, [pc, #28]	; (12104 <SspInterface::SspInterface()+0x2c>)
   120e6:	f004 f9cb 	bl	16480 <__cyg_profile_func_enter>
   120ea:	4a07      	ldr	r2, [pc, #28]	; (12108 <SspInterface::SspInterface()+0x30>)
   120ec:	9b01      	ldr	r3, [sp, #4]
   120ee:	601a      	str	r2, [r3, #0]
   120f0:	9c01      	ldr	r4, [sp, #4]
   120f2:	462b      	mov	r3, r5
   120f4:	4619      	mov	r1, r3
   120f6:	4803      	ldr	r0, [pc, #12]	; (12104 <SspInterface::SspInterface()+0x2c>)
   120f8:	f004 f9d6 	bl	164a8 <__cyg_profile_func_exit>
   120fc:	4623      	mov	r3, r4
   120fe:	4618      	mov	r0, r3
   12100:	b003      	add	sp, #12
   12102:	bd30      	pop	{r4, r5, pc}
   12104:	000120d9 	.word	0x000120d9
   12108:	00019c20 	.word	0x00019c20

0001210c <PinInterface::PinInterface(PinInterface const&)>:
class PinInterface
   1210c:	b530      	push	{r4, r5, lr}
   1210e:	b083      	sub	sp, #12
   12110:	4675      	mov	r5, lr
   12112:	9001      	str	r0, [sp, #4]
   12114:	9100      	str	r1, [sp, #0]
   12116:	462b      	mov	r3, r5
   12118:	4619      	mov	r1, r3
   1211a:	4808      	ldr	r0, [pc, #32]	; (1213c <PinInterface::PinInterface(PinInterface const&)+0x30>)
   1211c:	f004 f9b0 	bl	16480 <__cyg_profile_func_enter>
   12120:	4a07      	ldr	r2, [pc, #28]	; (12140 <PinInterface::PinInterface(PinInterface const&)+0x34>)
   12122:	9b01      	ldr	r3, [sp, #4]
   12124:	601a      	str	r2, [r3, #0]
   12126:	9c01      	ldr	r4, [sp, #4]
   12128:	462b      	mov	r3, r5
   1212a:	4619      	mov	r1, r3
   1212c:	4803      	ldr	r0, [pc, #12]	; (1213c <PinInterface::PinInterface(PinInterface const&)+0x30>)
   1212e:	f004 f9bb 	bl	164a8 <__cyg_profile_func_exit>
   12132:	4623      	mov	r3, r4
   12134:	4618      	mov	r0, r3
   12136:	b003      	add	sp, #12
   12138:	bd30      	pop	{r4, r5, pc}
   1213a:	bf00      	nop
   1213c:	0001210d 	.word	0x0001210d
   12140:	00019d5c 	.word	0x00019d5c

00012144 <Pin::Pin(Pin const&)>:
class Pin : public PinInterface
   12144:	b530      	push	{r4, r5, lr}
   12146:	b083      	sub	sp, #12
   12148:	4675      	mov	r5, lr
   1214a:	9001      	str	r0, [sp, #4]
   1214c:	9100      	str	r1, [sp, #0]
   1214e:	462b      	mov	r3, r5
   12150:	4619      	mov	r1, r3
   12152:	480f      	ldr	r0, [pc, #60]	; (12190 <Pin::Pin(Pin const&)+0x4c>)
   12154:	f004 f994 	bl	16480 <__cyg_profile_func_enter>
   12158:	9b01      	ldr	r3, [sp, #4]
   1215a:	9a00      	ldr	r2, [sp, #0]
   1215c:	4611      	mov	r1, r2
   1215e:	4618      	mov	r0, r3
   12160:	f7ff ffd4 	bl	1210c <PinInterface::PinInterface(PinInterface const&)>
   12164:	4a0b      	ldr	r2, [pc, #44]	; (12194 <Pin::Pin(Pin const&)+0x50>)
   12166:	9b01      	ldr	r3, [sp, #4]
   12168:	601a      	str	r2, [r3, #0]
   1216a:	9b00      	ldr	r3, [sp, #0]
   1216c:	791a      	ldrb	r2, [r3, #4]
   1216e:	9b01      	ldr	r3, [sp, #4]
   12170:	711a      	strb	r2, [r3, #4]
   12172:	9b00      	ldr	r3, [sp, #0]
   12174:	795a      	ldrb	r2, [r3, #5]
   12176:	9b01      	ldr	r3, [sp, #4]
   12178:	715a      	strb	r2, [r3, #5]
   1217a:	9c01      	ldr	r4, [sp, #4]
   1217c:	462b      	mov	r3, r5
   1217e:	4619      	mov	r1, r3
   12180:	4803      	ldr	r0, [pc, #12]	; (12190 <Pin::Pin(Pin const&)+0x4c>)
   12182:	f004 f991 	bl	164a8 <__cyg_profile_func_exit>
   12186:	4623      	mov	r3, r4
   12188:	4618      	mov	r0, r3
   1218a:	b003      	add	sp, #12
   1218c:	bd30      	pop	{r4, r5, pc}
   1218e:	bf00      	nop
   12190:	00012145 	.word	0x00012145
   12194:	00019d20 	.word	0x00019d20

00012198 <Ssp::Ssp(Ssp::Peripheral)>:
        pssp_(Peripheral::kSsp0)
  {
  }

  /// User modified constructor. Must be followed by Set functions.
  explicit constexpr Ssp(Peripheral set_pssp)
   12198:	b530      	push	{r4, r5, lr}
   1219a:	b083      	sub	sp, #12
   1219c:	4675      	mov	r5, lr
   1219e:	9001      	str	r0, [sp, #4]
   121a0:	9100      	str	r1, [sp, #0]
   121a2:	462b      	mov	r3, r5
   121a4:	4619      	mov	r1, r3
   121a6:	4831      	ldr	r0, [pc, #196]	; (1226c <Ssp::Ssp(Ssp::Peripheral)+0xd4>)
   121a8:	f004 f96a 	bl	16480 <__cyg_profile_func_enter>
        miso_(&miso_pin_),
        sck_(&sck_pin_),
        mosi_pin_(kSspPinMatrix[util::Value(set_pssp)][MatrixLookup::kMosi]),
        miso_pin_(kSspPinMatrix[util::Value(set_pssp)][MatrixLookup::kMiso]),
        sck_pin_(kSspPinMatrix[util::Value(set_pssp)][MatrixLookup::kSck]),
        pssp_(set_pssp)
   121ac:	9b01      	ldr	r3, [sp, #4]
   121ae:	4618      	mov	r0, r3
   121b0:	f7ff ff92 	bl	120d8 <SspInterface::SspInterface()>
   121b4:	9b01      	ldr	r3, [sp, #4]
   121b6:	3304      	adds	r3, #4
   121b8:	4618      	mov	r0, r3
   121ba:	f7ff fc9d 	bl	11af8 <Lpc40xxSystemController::Lpc40xxSystemController()>
   121be:	4a2c      	ldr	r2, [pc, #176]	; (12270 <Ssp::Ssp(Ssp::Peripheral)+0xd8>)
   121c0:	9b01      	ldr	r3, [sp, #4]
   121c2:	601a      	str	r2, [r3, #0]
   121c4:	4a2b      	ldr	r2, [pc, #172]	; (12274 <Ssp::Ssp(Ssp::Peripheral)+0xdc>)
   121c6:	9b01      	ldr	r3, [sp, #4]
   121c8:	605a      	str	r2, [r3, #4]
   121ca:	9b01      	ldr	r3, [sp, #4]
   121cc:	f103 0214 	add.w	r2, r3, #20
   121d0:	9b01      	ldr	r3, [sp, #4]
   121d2:	609a      	str	r2, [r3, #8]
   121d4:	9b01      	ldr	r3, [sp, #4]
   121d6:	f103 021c 	add.w	r2, r3, #28
   121da:	9b01      	ldr	r3, [sp, #4]
   121dc:	60da      	str	r2, [r3, #12]
   121de:	9b01      	ldr	r3, [sp, #4]
   121e0:	f103 0224 	add.w	r2, r3, #36	; 0x24
   121e4:	9b01      	ldr	r3, [sp, #4]
   121e6:	611a      	str	r2, [r3, #16]
   121e8:	9b01      	ldr	r3, [sp, #4]
   121ea:	f103 0414 	add.w	r4, r3, #20
        mosi_pin_(kSspPinMatrix[util::Value(set_pssp)][MatrixLookup::kMosi]),
   121ee:	9800      	ldr	r0, [sp, #0]
   121f0:	f7ff ff5c 	bl	120ac <int util::Value<Ssp::Peripheral, int>(Ssp::Peripheral)>
   121f4:	4602      	mov	r2, r0
        pssp_(set_pssp)
   121f6:	4613      	mov	r3, r2
   121f8:	005b      	lsls	r3, r3, #1
   121fa:	4413      	add	r3, r2
   121fc:	00db      	lsls	r3, r3, #3
   121fe:	4a1e      	ldr	r2, [pc, #120]	; (12278 <Ssp::Ssp(Ssp::Peripheral)+0xe0>)
   12200:	4413      	add	r3, r2
   12202:	4619      	mov	r1, r3
   12204:	4620      	mov	r0, r4
   12206:	f7ff ff9d 	bl	12144 <Pin::Pin(Pin const&)>
   1220a:	9b01      	ldr	r3, [sp, #4]
   1220c:	f103 041c 	add.w	r4, r3, #28
        miso_pin_(kSspPinMatrix[util::Value(set_pssp)][MatrixLookup::kMiso]),
   12210:	9800      	ldr	r0, [sp, #0]
   12212:	f7ff ff4b 	bl	120ac <int util::Value<Ssp::Peripheral, int>(Ssp::Peripheral)>
   12216:	4602      	mov	r2, r0
        pssp_(set_pssp)
   12218:	4613      	mov	r3, r2
   1221a:	005b      	lsls	r3, r3, #1
   1221c:	4413      	add	r3, r2
   1221e:	00db      	lsls	r3, r3, #3
   12220:	3308      	adds	r3, #8
   12222:	4a15      	ldr	r2, [pc, #84]	; (12278 <Ssp::Ssp(Ssp::Peripheral)+0xe0>)
   12224:	4413      	add	r3, r2
   12226:	4619      	mov	r1, r3
   12228:	4620      	mov	r0, r4
   1222a:	f7ff ff8b 	bl	12144 <Pin::Pin(Pin const&)>
   1222e:	9b01      	ldr	r3, [sp, #4]
   12230:	f103 0424 	add.w	r4, r3, #36	; 0x24
        sck_pin_(kSspPinMatrix[util::Value(set_pssp)][MatrixLookup::kSck]),
   12234:	9800      	ldr	r0, [sp, #0]
   12236:	f7ff ff39 	bl	120ac <int util::Value<Ssp::Peripheral, int>(Ssp::Peripheral)>
   1223a:	4602      	mov	r2, r0
        pssp_(set_pssp)
   1223c:	4613      	mov	r3, r2
   1223e:	005b      	lsls	r3, r3, #1
   12240:	4413      	add	r3, r2
   12242:	00db      	lsls	r3, r3, #3
   12244:	3310      	adds	r3, #16
   12246:	4a0c      	ldr	r2, [pc, #48]	; (12278 <Ssp::Ssp(Ssp::Peripheral)+0xe0>)
   12248:	4413      	add	r3, r2
   1224a:	4619      	mov	r1, r3
   1224c:	4620      	mov	r0, r4
   1224e:	f7ff ff79 	bl	12144 <Pin::Pin(Pin const&)>
   12252:	9b01      	ldr	r3, [sp, #4]
   12254:	9a00      	ldr	r2, [sp, #0]
   12256:	62da      	str	r2, [r3, #44]	; 0x2c
  {
  }
   12258:	9c01      	ldr	r4, [sp, #4]
   1225a:	462b      	mov	r3, r5
   1225c:	4619      	mov	r1, r3
   1225e:	4803      	ldr	r0, [pc, #12]	; (1226c <Ssp::Ssp(Ssp::Peripheral)+0xd4>)
   12260:	f004 f922 	bl	164a8 <__cyg_profile_func_exit>
   12264:	4623      	mov	r3, r4
   12266:	4618      	mov	r0, r3
   12268:	b003      	add	sp, #12
   1226a:	bd30      	pop	{r4, r5, pc}
   1226c:	00012199 	.word	0x00012199
   12270:	00019bd4 	.word	0x00019bd4
   12274:	00019bfc 	.word	0x00019bfc
   12278:	00019ae4 	.word	0x00019ae4

0001227c <Ssp::Initialize()>:
  }

  /// Powers on the peripheral, sets the peripheral clock, format, and data
  /// size, and enables the SSP pins for communication see and more.
  /// See page 601 of user manual UM10562 LPC408x/407x for more details.
  void Initialize() override
   1227c:	b570      	push	{r4, r5, r6, lr}
   1227e:	b086      	sub	sp, #24
   12280:	4676      	mov	r6, lr
   12282:	9001      	str	r0, [sp, #4]
   12284:	4633      	mov	r3, r6
   12286:	4619      	mov	r1, r3
   12288:	4830      	ldr	r0, [pc, #192]	; (1234c <Ssp::Initialize()+0xd0>)
   1228a:	f004 f8f9 	bl	16480 <__cyg_profile_func_enter>
  {
    uint32_t pssp = util::Value(pssp_);
   1228e:	9b01      	ldr	r3, [sp, #4]
   12290:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   12292:	4618      	mov	r0, r3
   12294:	f7ff ff0a 	bl	120ac <int util::Value<Ssp::Peripheral, int>(Ssp::Peripheral)>
   12298:	4603      	mov	r3, r0
   1229a:	9305      	str	r3, [sp, #20]
    // Power up peripheral
    PowerUpPeripheral(kPowerBit[pssp]);
   1229c:	9b01      	ldr	r3, [sp, #4]
   1229e:	1d18      	adds	r0, r3, #4
   122a0:	9b01      	ldr	r3, [sp, #4]
   122a2:	685b      	ldr	r3, [r3, #4]
   122a4:	3314      	adds	r3, #20
   122a6:	681b      	ldr	r3, [r3, #0]
   122a8:	9a05      	ldr	r2, [sp, #20]
   122aa:	0092      	lsls	r2, r2, #2
   122ac:	4928      	ldr	r1, [pc, #160]	; (12350 <Ssp::Initialize()+0xd4>)
   122ae:	440a      	add	r2, r1
   122b0:	4611      	mov	r1, r2
   122b2:	4798      	blx	r3
    // Enable SSP pins
    mosi_->SetPinFunction(kPinSelect[pssp]);
   122b4:	9b01      	ldr	r3, [sp, #4]
   122b6:	6898      	ldr	r0, [r3, #8]
   122b8:	9b01      	ldr	r3, [sp, #4]
   122ba:	689b      	ldr	r3, [r3, #8]
   122bc:	681b      	ldr	r3, [r3, #0]
   122be:	681b      	ldr	r3, [r3, #0]
   122c0:	4924      	ldr	r1, [pc, #144]	; (12354 <Ssp::Initialize()+0xd8>)
   122c2:	9a05      	ldr	r2, [sp, #20]
   122c4:	440a      	add	r2, r1
   122c6:	7812      	ldrb	r2, [r2, #0]
   122c8:	4611      	mov	r1, r2
   122ca:	4798      	blx	r3
    miso_->SetPinFunction(kPinSelect[pssp]);
   122cc:	9b01      	ldr	r3, [sp, #4]
   122ce:	68d8      	ldr	r0, [r3, #12]
   122d0:	9b01      	ldr	r3, [sp, #4]
   122d2:	68db      	ldr	r3, [r3, #12]
   122d4:	681b      	ldr	r3, [r3, #0]
   122d6:	681b      	ldr	r3, [r3, #0]
   122d8:	491e      	ldr	r1, [pc, #120]	; (12354 <Ssp::Initialize()+0xd8>)
   122da:	9a05      	ldr	r2, [sp, #20]
   122dc:	440a      	add	r2, r1
   122de:	7812      	ldrb	r2, [r2, #0]
   122e0:	4611      	mov	r1, r2
   122e2:	4798      	blx	r3
    sck_->SetPinFunction(kPinSelect[pssp]);
   122e4:	9b01      	ldr	r3, [sp, #4]
   122e6:	6918      	ldr	r0, [r3, #16]
   122e8:	9b01      	ldr	r3, [sp, #4]
   122ea:	691b      	ldr	r3, [r3, #16]
   122ec:	681b      	ldr	r3, [r3, #0]
   122ee:	681b      	ldr	r3, [r3, #0]
   122f0:	4918      	ldr	r1, [pc, #96]	; (12354 <Ssp::Initialize()+0xd8>)
   122f2:	9a05      	ldr	r2, [sp, #20]
   122f4:	440a      	add	r2, r1
   122f6:	7812      	ldrb	r2, [r2, #0]
   122f8:	4611      	mov	r1, r2
   122fa:	4798      	blx	r3
    // Enable SSP
    ssp_registers[pssp]->CR1 = bit::Set(ssp_registers[pssp]->CR1, kSspEnable);
   122fc:	4a16      	ldr	r2, [pc, #88]	; (12358 <Ssp::Initialize()+0xdc>)
   122fe:	9b05      	ldr	r3, [sp, #20]
   12300:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12304:	685b      	ldr	r3, [r3, #4]
   12306:	4914      	ldr	r1, [pc, #80]	; (12358 <Ssp::Initialize()+0xdc>)
   12308:	9a05      	ldr	r2, [sp, #20]
   1230a:	f851 4022 	ldr.w	r4, [r1, r2, lsl #2]
   1230e:	9304      	str	r3, [sp, #16]
   12310:	2301      	movs	r3, #1
   12312:	9303      	str	r3, [sp, #12]
   12314:	4633      	mov	r3, r6
   12316:	4619      	mov	r1, r3
   12318:	4810      	ldr	r0, [pc, #64]	; (1235c <Ssp::Initialize()+0xe0>)
   1231a:	f004 f8b1 	bl	16480 <__cyg_profile_func_enter>
[[gnu::always_inline]] [[nodiscard]]
constexpr T Set(T target, uint32_t position)
{
  static_assert(std::numeric_limits<T>::is_integer,
                "Set only accepts intergers.");
  return target | (1 << position);
   1231e:	2201      	movs	r2, #1
   12320:	9b03      	ldr	r3, [sp, #12]
   12322:	fa02 f303 	lsl.w	r3, r2, r3
   12326:	461a      	mov	r2, r3
   12328:	9b04      	ldr	r3, [sp, #16]
   1232a:	ea42 0503 	orr.w	r5, r2, r3
   1232e:	4633      	mov	r3, r6
   12330:	4619      	mov	r1, r3
   12332:	480a      	ldr	r0, [pc, #40]	; (1235c <Ssp::Initialize()+0xe0>)
   12334:	f004 f8b8 	bl	164a8 <__cyg_profile_func_exit>
   12338:	6065      	str	r5, [r4, #4]
   1233a:	4633      	mov	r3, r6
   1233c:	4619      	mov	r1, r3
   1233e:	4803      	ldr	r0, [pc, #12]	; (1234c <Ssp::Initialize()+0xd0>)
   12340:	f004 f8b2 	bl	164a8 <__cyg_profile_func_exit>
  }
   12344:	bf00      	nop
   12346:	b006      	add	sp, #24
   12348:	bd70      	pop	{r4, r5, r6, pc}
   1234a:	bf00      	nop
   1234c:	0001227d 	.word	0x0001227d
   12350:	00019b2c 	.word	0x00019b2c
   12354:	00019ae0 	.word	0x00019ae0
   12358:	10000050 	.word	0x10000050
   1235c:	00014a0d 	.word	0x00014a0d

00012360 <Ssp::IsTransferRegBusy()>:

  /// Checks if the SSP controller is idle.
  /// @returns true if the controller is sending or receiving a data frame and
  /// false if it is idle.
  bool IsTransferRegBusy() override
   12360:	b530      	push	{r4, r5, lr}
   12362:	b085      	sub	sp, #20
   12364:	4675      	mov	r5, lr
   12366:	9001      	str	r0, [sp, #4]
   12368:	462b      	mov	r3, r5
   1236a:	4619      	mov	r1, r3
   1236c:	4817      	ldr	r0, [pc, #92]	; (123cc <Ssp::IsTransferRegBusy()+0x6c>)
   1236e:	f004 f887 	bl	16480 <__cyg_profile_func_enter>
  {
    return (bit::Read(ssp_registers[util::Value(pssp_)]->SR, kDataLineIdleBit));
   12372:	9b01      	ldr	r3, [sp, #4]
   12374:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   12376:	4618      	mov	r0, r3
   12378:	f7ff fe98 	bl	120ac <int util::Value<Ssp::Peripheral, int>(Ssp::Peripheral)>
   1237c:	4602      	mov	r2, r0
   1237e:	4b14      	ldr	r3, [pc, #80]	; (123d0 <Ssp::IsTransferRegBusy()+0x70>)
   12380:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   12384:	68db      	ldr	r3, [r3, #12]
   12386:	9303      	str	r3, [sp, #12]
   12388:	2304      	movs	r3, #4
   1238a:	9302      	str	r3, [sp, #8]
   1238c:	462b      	mov	r3, r5
   1238e:	4619      	mov	r1, r3
   12390:	4810      	ldr	r0, [pc, #64]	; (123d4 <Ssp::IsTransferRegBusy()+0x74>)
   12392:	f004 f875 	bl	16480 <__cyg_profile_func_enter>
[[gnu::always_inline]][[nodiscard]] constexpr bool Read(T target,
                                                        uint32_t position)
{
  static_assert(std::numeric_limits<T>::is_integer,
                "Read only accepts intergers.");
  return static_cast<bool>(target & (1 << position));
   12396:	2201      	movs	r2, #1
   12398:	9b02      	ldr	r3, [sp, #8]
   1239a:	fa02 f303 	lsl.w	r3, r2, r3
   1239e:	461a      	mov	r2, r3
   123a0:	9b03      	ldr	r3, [sp, #12]
   123a2:	4013      	ands	r3, r2
   123a4:	2b00      	cmp	r3, #0
   123a6:	bf14      	ite	ne
   123a8:	2301      	movne	r3, #1
   123aa:	2300      	moveq	r3, #0
   123ac:	b2dc      	uxtb	r4, r3
   123ae:	462b      	mov	r3, r5
   123b0:	4619      	mov	r1, r3
   123b2:	4808      	ldr	r0, [pc, #32]	; (123d4 <Ssp::IsTransferRegBusy()+0x74>)
   123b4:	f004 f878 	bl	164a8 <__cyg_profile_func_exit>
   123b8:	462b      	mov	r3, r5
   123ba:	4619      	mov	r1, r3
   123bc:	4803      	ldr	r0, [pc, #12]	; (123cc <Ssp::IsTransferRegBusy()+0x6c>)
   123be:	f004 f873 	bl	164a8 <__cyg_profile_func_exit>
   123c2:	4623      	mov	r3, r4
  }
   123c4:	4618      	mov	r0, r3
   123c6:	b005      	add	sp, #20
   123c8:	bd30      	pop	{r4, r5, pc}
   123ca:	bf00      	nop
   123cc:	00012361 	.word	0x00012361
   123d0:	10000050 	.word	0x10000050
   123d4:	00014a49 	.word	0x00014a49

000123d8 <Ssp::Transfer(unsigned short)>:
  /// data register. This functions for both transmitting and
  /// receiving data. It is recommended this region be protected
  /// by a mutex.
  /// @param data - information to be placed in data register
  /// @return - received data from external device
  uint16_t Transfer(uint16_t data) override
   123d8:	b530      	push	{r4, r5, lr}
   123da:	b085      	sub	sp, #20
   123dc:	4675      	mov	r5, lr
   123de:	9001      	str	r0, [sp, #4]
   123e0:	460b      	mov	r3, r1
   123e2:	f8ad 3002 	strh.w	r3, [sp, #2]
   123e6:	462b      	mov	r3, r5
   123e8:	4619      	mov	r1, r3
   123ea:	4814      	ldr	r0, [pc, #80]	; (1243c <Ssp::Transfer(unsigned short)+0x64>)
   123ec:	f004 f848 	bl	16480 <__cyg_profile_func_enter>
  {
    uint32_t pssp = util::Value(pssp_);
   123f0:	9b01      	ldr	r3, [sp, #4]
   123f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   123f4:	4618      	mov	r0, r3
   123f6:	f7ff fe59 	bl	120ac <int util::Value<Ssp::Peripheral, int>(Ssp::Peripheral)>
   123fa:	4603      	mov	r3, r0
   123fc:	9303      	str	r3, [sp, #12]

    ssp_registers[pssp]->DR = data;
   123fe:	4a10      	ldr	r2, [pc, #64]	; (12440 <Ssp::Transfer(unsigned short)+0x68>)
   12400:	9b03      	ldr	r3, [sp, #12]
   12402:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12406:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   1240a:	609a      	str	r2, [r3, #8]
    while (IsTransferRegBusy())
   1240c:	9801      	ldr	r0, [sp, #4]
   1240e:	f7ff ffa7 	bl	12360 <Ssp::IsTransferRegBusy()>
   12412:	4603      	mov	r3, r0
   12414:	2b00      	cmp	r3, #0
   12416:	d001      	beq.n	1241c <Ssp::Transfer(unsigned short)+0x44>
    {
      continue;
   12418:	bf00      	nop
    while (IsTransferRegBusy())
   1241a:	e7f7      	b.n	1240c <Ssp::Transfer(unsigned short)+0x34>
    }
    return static_cast<uint16_t>(ssp_registers[pssp]->DR);
   1241c:	4a08      	ldr	r2, [pc, #32]	; (12440 <Ssp::Transfer(unsigned short)+0x68>)
   1241e:	9b03      	ldr	r3, [sp, #12]
   12420:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12424:	689b      	ldr	r3, [r3, #8]
   12426:	b29c      	uxth	r4, r3
   12428:	462b      	mov	r3, r5
   1242a:	4619      	mov	r1, r3
   1242c:	4803      	ldr	r0, [pc, #12]	; (1243c <Ssp::Transfer(unsigned short)+0x64>)
   1242e:	f004 f83b 	bl	164a8 <__cyg_profile_func_exit>
   12432:	4623      	mov	r3, r4
  }
   12434:	4618      	mov	r0, r3
   12436:	b005      	add	sp, #20
   12438:	bd30      	pop	{r4, r5, pc}
   1243a:	bf00      	nop
   1243c:	000123d9 	.word	0x000123d9
   12440:	10000050 	.word	0x10000050

00012444 <Ssp::SetSpiMasterDefault()>:

  /// Sets up SSP peripheral as SPI master
  void SetSpiMasterDefault() override
   12444:	b510      	push	{r4, lr}
   12446:	b086      	sub	sp, #24
   12448:	4674      	mov	r4, lr
   1244a:	9003      	str	r0, [sp, #12]
   1244c:	4623      	mov	r3, r4
   1244e:	4619      	mov	r1, r3
   12450:	4812      	ldr	r0, [pc, #72]	; (1249c <Ssp::SetSpiMasterDefault()+0x58>)
   12452:	f004 f815 	bl	16480 <__cyg_profile_func_enter>
  {
    constexpr bool kHighPolarity  = 1;
   12456:	2301      	movs	r3, #1
   12458:	f88d 3017 	strb.w	r3, [sp, #23]
    constexpr bool kPhase0        = 0;
   1245c:	2300      	movs	r3, #0
   1245e:	f88d 3016 	strb.w	r3, [sp, #22]
    constexpr uint8_t kScrDivider = 0;
   12462:	2300      	movs	r3, #0
   12464:	f88d 3015 	strb.w	r3, [sp, #21]
    constexpr uint8_t kPrescaler  = SJ2_SYSTEM_CLOCK_RATE_MHZ;
   12468:	2330      	movs	r3, #48	; 0x30
   1246a:	f88d 3014 	strb.w	r3, [sp, #20]

    SetPeripheralMode(kMaster, kSpi, kEight);
   1246e:	2307      	movs	r3, #7
   12470:	2200      	movs	r2, #0
   12472:	2100      	movs	r1, #0
   12474:	9803      	ldr	r0, [sp, #12]
   12476:	f000 f85b 	bl	12530 <Ssp::SetPeripheralMode(SspInterface::MasterSlaveMode, SspInterface::FrameMode, SspInterface::DataSize)>
    SetClock(kHighPolarity, kPhase0, kScrDivider, kPrescaler);
   1247a:	2330      	movs	r3, #48	; 0x30
   1247c:	9300      	str	r3, [sp, #0]
   1247e:	2300      	movs	r3, #0
   12480:	2200      	movs	r2, #0
   12482:	2101      	movs	r1, #1
   12484:	9803      	ldr	r0, [sp, #12]
   12486:	f000 fa09 	bl	1289c <Ssp::SetClock(bool, bool, unsigned char, unsigned char)>
   1248a:	4623      	mov	r3, r4
   1248c:	4619      	mov	r1, r3
   1248e:	4803      	ldr	r0, [pc, #12]	; (1249c <Ssp::SetSpiMasterDefault()+0x58>)
   12490:	f004 f80a 	bl	164a8 <__cyg_profile_func_exit>
  }
   12494:	bf00      	nop
   12496:	b006      	add	sp, #24
   12498:	bd10      	pop	{r4, pc}
   1249a:	bf00      	nop
   1249c:	00012445 	.word	0x00012445

000124a0 <unsigned char util::Value<SspInterface::DataSize, unsigned char>(SspInterface::DataSize)>:
constexpr Type Value(Enum enum_type_value)
   124a0:	b530      	push	{r4, r5, lr}
   124a2:	b083      	sub	sp, #12
   124a4:	4675      	mov	r5, lr
   124a6:	4603      	mov	r3, r0
   124a8:	f88d 3007 	strb.w	r3, [sp, #7]
   124ac:	462b      	mov	r3, r5
   124ae:	4619      	mov	r1, r3
   124b0:	4806      	ldr	r0, [pc, #24]	; (124cc <unsigned char util::Value<SspInterface::DataSize, unsigned char>(SspInterface::DataSize)+0x2c>)
   124b2:	f003 ffe5 	bl	16480 <__cyg_profile_func_enter>
  return static_cast<Type>(enum_type_value);
   124b6:	f89d 4007 	ldrb.w	r4, [sp, #7]
   124ba:	462b      	mov	r3, r5
   124bc:	4619      	mov	r1, r3
   124be:	4803      	ldr	r0, [pc, #12]	; (124cc <unsigned char util::Value<SspInterface::DataSize, unsigned char>(SspInterface::DataSize)+0x2c>)
   124c0:	f003 fff2 	bl	164a8 <__cyg_profile_func_exit>
   124c4:	4623      	mov	r3, r4
}
   124c6:	4618      	mov	r0, r3
   124c8:	b003      	add	sp, #12
   124ca:	bd30      	pop	{r4, r5, pc}
   124cc:	000124a1 	.word	0x000124a1

000124d0 <unsigned char util::Value<SspInterface::FrameMode, unsigned char>(SspInterface::FrameMode)>:
constexpr Type Value(Enum enum_type_value)
   124d0:	b530      	push	{r4, r5, lr}
   124d2:	b083      	sub	sp, #12
   124d4:	4675      	mov	r5, lr
   124d6:	4603      	mov	r3, r0
   124d8:	f88d 3007 	strb.w	r3, [sp, #7]
   124dc:	462b      	mov	r3, r5
   124de:	4619      	mov	r1, r3
   124e0:	4806      	ldr	r0, [pc, #24]	; (124fc <unsigned char util::Value<SspInterface::FrameMode, unsigned char>(SspInterface::FrameMode)+0x2c>)
   124e2:	f003 ffcd 	bl	16480 <__cyg_profile_func_enter>
  return static_cast<Type>(enum_type_value);
   124e6:	f89d 4007 	ldrb.w	r4, [sp, #7]
   124ea:	462b      	mov	r3, r5
   124ec:	4619      	mov	r1, r3
   124ee:	4803      	ldr	r0, [pc, #12]	; (124fc <unsigned char util::Value<SspInterface::FrameMode, unsigned char>(SspInterface::FrameMode)+0x2c>)
   124f0:	f003 ffda 	bl	164a8 <__cyg_profile_func_exit>
   124f4:	4623      	mov	r3, r4
}
   124f6:	4618      	mov	r0, r3
   124f8:	b003      	add	sp, #12
   124fa:	bd30      	pop	{r4, r5, pc}
   124fc:	000124d1 	.word	0x000124d1

00012500 <unsigned char util::Value<SspInterface::MasterSlaveMode, unsigned char>(SspInterface::MasterSlaveMode)>:
constexpr Type Value(Enum enum_type_value)
   12500:	b530      	push	{r4, r5, lr}
   12502:	b083      	sub	sp, #12
   12504:	4675      	mov	r5, lr
   12506:	4603      	mov	r3, r0
   12508:	f88d 3007 	strb.w	r3, [sp, #7]
   1250c:	462b      	mov	r3, r5
   1250e:	4619      	mov	r1, r3
   12510:	4806      	ldr	r0, [pc, #24]	; (1252c <unsigned char util::Value<SspInterface::MasterSlaveMode, unsigned char>(SspInterface::MasterSlaveMode)+0x2c>)
   12512:	f003 ffb5 	bl	16480 <__cyg_profile_func_enter>
  return static_cast<Type>(enum_type_value);
   12516:	f89d 4007 	ldrb.w	r4, [sp, #7]
   1251a:	462b      	mov	r3, r5
   1251c:	4619      	mov	r1, r3
   1251e:	4803      	ldr	r0, [pc, #12]	; (1252c <unsigned char util::Value<SspInterface::MasterSlaveMode, unsigned char>(SspInterface::MasterSlaveMode)+0x2c>)
   12520:	f003 ffc2 	bl	164a8 <__cyg_profile_func_exit>
   12524:	4623      	mov	r3, r4
}
   12526:	4618      	mov	r0, r3
   12528:	b003      	add	sp, #12
   1252a:	bd30      	pop	{r4, r5, pc}
   1252c:	00012501 	.word	0x00012501

00012530 <Ssp::SetPeripheralMode(SspInterface::MasterSlaveMode, SspInterface::FrameMode, SspInterface::DataSize)>:

  /// Sets the various modes for the Peripheral
  /// @param mode - master or slave mode
  /// @param frame - format for Peripheral data to use
  /// @param size - number of bits per frame
  void SetPeripheralMode(MasterSlaveMode mode, FrameMode frame,
   12530:	b570      	push	{r4, r5, r6, lr}
   12532:	b098      	sub	sp, #96	; 0x60
   12534:	4674      	mov	r4, lr
   12536:	9001      	str	r0, [sp, #4]
   12538:	4608      	mov	r0, r1
   1253a:	4611      	mov	r1, r2
   1253c:	461a      	mov	r2, r3
   1253e:	4603      	mov	r3, r0
   12540:	f88d 3003 	strb.w	r3, [sp, #3]
   12544:	460b      	mov	r3, r1
   12546:	f88d 3002 	strb.w	r3, [sp, #2]
   1254a:	4613      	mov	r3, r2
   1254c:	f88d 3001 	strb.w	r3, [sp, #1]
   12550:	4623      	mov	r3, r4
   12552:	4619      	mov	r1, r3
   12554:	4875      	ldr	r0, [pc, #468]	; (1272c <Ssp::SetPeripheralMode(SspInterface::MasterSlaveMode, SspInterface::FrameMode, SspInterface::DataSize)+0x1fc>)
   12556:	f003 ff93 	bl	16480 <__cyg_profile_func_enter>
                         DataSize size) override
  {
    uint32_t pssp = util::Value(pssp_);
   1255a:	9b01      	ldr	r3, [sp, #4]
   1255c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1255e:	4618      	mov	r0, r3
   12560:	f7ff fda4 	bl	120ac <int util::Value<Ssp::Peripheral, int>(Ssp::Peripheral)>
   12564:	4603      	mov	r3, r0
   12566:	9317      	str	r3, [sp, #92]	; 0x5c
    // TODO(#371): Find a better alternative to powering up the peripheral for
    // every method.
    Ssp::PowerUpPeripheral(Ssp::kPowerBit[pssp]);
   12568:	9b01      	ldr	r3, [sp, #4]
   1256a:	1d18      	adds	r0, r3, #4
   1256c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   1256e:	009b      	lsls	r3, r3, #2
   12570:	4a6f      	ldr	r2, [pc, #444]	; (12730 <Ssp::SetPeripheralMode(SspInterface::MasterSlaveMode, SspInterface::FrameMode, SspInterface::DataSize)+0x200>)
   12572:	4413      	add	r3, r2
   12574:	4619      	mov	r1, r3
   12576:	f7ff fb7b 	bl	11c70 <Lpc40xxSystemController::PowerUpPeripheral(SystemControllerInterface::PeripheralID const&)>
    if (frame == kMicro)
   1257a:	f89d 3002 	ldrb.w	r3, [sp, #2]
   1257e:	2b02      	cmp	r3, #2
   12580:	d102      	bne.n	12588 <Ssp::SetPeripheralMode(SspInterface::MasterSlaveMode, SspInterface::FrameMode, SspInterface::DataSize)+0x58>
    {
      size = kEight;
   12582:	2307      	movs	r3, #7
   12584:	f88d 3001 	strb.w	r3, [sp, #1]
    }
    ssp_registers[pssp]->CR0 =
        bit::Insert(ssp_registers[pssp]->CR0, util::Value(size), kDataBit, 4);
   12588:	4a6a      	ldr	r2, [pc, #424]	; (12734 <Ssp::SetPeripheralMode(SspInterface::MasterSlaveMode, SspInterface::FrameMode, SspInterface::DataSize)+0x204>)
   1258a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   1258c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12590:	681e      	ldr	r6, [r3, #0]
   12592:	f89d 3001 	ldrb.w	r3, [sp, #1]
   12596:	4618      	mov	r0, r3
   12598:	f7ff ff82 	bl	124a0 <unsigned char util::Value<SspInterface::DataSize, unsigned char>(SspInterface::DataSize)>
   1259c:	4603      	mov	r3, r0
   1259e:	4619      	mov	r1, r3
    ssp_registers[pssp]->CR0 =
   125a0:	4a64      	ldr	r2, [pc, #400]	; (12734 <Ssp::SetPeripheralMode(SspInterface::MasterSlaveMode, SspInterface::FrameMode, SspInterface::DataSize)+0x204>)
   125a2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   125a4:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
   125a8:	9608      	str	r6, [sp, #32]
   125aa:	460b      	mov	r3, r1
   125ac:	f88d 301f 	strb.w	r3, [sp, #31]
   125b0:	2300      	movs	r3, #0
   125b2:	9306      	str	r3, [sp, #24]
   125b4:	2304      	movs	r3, #4
   125b6:	9305      	str	r3, [sp, #20]
   125b8:	4623      	mov	r3, r4
   125ba:	4619      	mov	r1, r3
   125bc:	485e      	ldr	r0, [pc, #376]	; (12738 <Ssp::SetPeripheralMode(SspInterface::MasterSlaveMode, SspInterface::FrameMode, SspInterface::DataSize)+0x208>)
   125be:	f003 ff5f 	bl	16480 <__cyg_profile_func_enter>
  constexpr UnsignedT kFieldOfOnes = GenerateFieldOfOnes<T>();
   125c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   125c6:	9304      	str	r3, [sp, #16]
  constexpr size_t kTargetWidth     = sizeof(T) * 8;
   125c8:	2320      	movs	r3, #32
   125ca:	9303      	str	r3, [sp, #12]
  UnsignedT mask   = kFieldOfOnes >> (kTargetWidth - width);
   125cc:	9b05      	ldr	r3, [sp, #20]
   125ce:	f1c3 0320 	rsb	r3, r3, #32
   125d2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   125d6:	fa22 f303 	lsr.w	r3, r2, r3
   125da:	9302      	str	r3, [sp, #8]
  target &= ~(mask << position);
   125dc:	9a02      	ldr	r2, [sp, #8]
   125de:	9b06      	ldr	r3, [sp, #24]
   125e0:	fa02 f303 	lsl.w	r3, r2, r3
   125e4:	43db      	mvns	r3, r3
   125e6:	9a08      	ldr	r2, [sp, #32]
   125e8:	4013      	ands	r3, r2
   125ea:	9308      	str	r3, [sp, #32]
  target |= (value & mask) << position;
   125ec:	f89d 201f 	ldrb.w	r2, [sp, #31]
   125f0:	9b02      	ldr	r3, [sp, #8]
   125f2:	401a      	ands	r2, r3
   125f4:	9b06      	ldr	r3, [sp, #24]
   125f6:	fa02 f303 	lsl.w	r3, r2, r3
   125fa:	9a08      	ldr	r2, [sp, #32]
   125fc:	4313      	orrs	r3, r2
   125fe:	9308      	str	r3, [sp, #32]
  return target;
   12600:	9e08      	ldr	r6, [sp, #32]
   12602:	4623      	mov	r3, r4
   12604:	4619      	mov	r1, r3
   12606:	484c      	ldr	r0, [pc, #304]	; (12738 <Ssp::SetPeripheralMode(SspInterface::MasterSlaveMode, SspInterface::FrameMode, SspInterface::DataSize)+0x208>)
   12608:	f003 ff4e 	bl	164a8 <__cyg_profile_func_exit>
   1260c:	602e      	str	r6, [r5, #0]
    ssp_registers[pssp]->CR0 =
        bit::Insert(ssp_registers[pssp]->CR0, util::Value(frame), kFrameBit, 2);
   1260e:	4a49      	ldr	r2, [pc, #292]	; (12734 <Ssp::SetPeripheralMode(SspInterface::MasterSlaveMode, SspInterface::FrameMode, SspInterface::DataSize)+0x204>)
   12610:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   12612:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12616:	681e      	ldr	r6, [r3, #0]
   12618:	f89d 3002 	ldrb.w	r3, [sp, #2]
   1261c:	4618      	mov	r0, r3
   1261e:	f7ff ff57 	bl	124d0 <unsigned char util::Value<SspInterface::FrameMode, unsigned char>(SspInterface::FrameMode)>
   12622:	4603      	mov	r3, r0
   12624:	4619      	mov	r1, r3
    ssp_registers[pssp]->CR0 =
   12626:	4a43      	ldr	r2, [pc, #268]	; (12734 <Ssp::SetPeripheralMode(SspInterface::MasterSlaveMode, SspInterface::FrameMode, SspInterface::DataSize)+0x204>)
   12628:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   1262a:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
   1262e:	960f      	str	r6, [sp, #60]	; 0x3c
   12630:	460b      	mov	r3, r1
   12632:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
   12636:	2304      	movs	r3, #4
   12638:	930d      	str	r3, [sp, #52]	; 0x34
   1263a:	2302      	movs	r3, #2
   1263c:	930c      	str	r3, [sp, #48]	; 0x30
   1263e:	4623      	mov	r3, r4
   12640:	4619      	mov	r1, r3
   12642:	483d      	ldr	r0, [pc, #244]	; (12738 <Ssp::SetPeripheralMode(SspInterface::MasterSlaveMode, SspInterface::FrameMode, SspInterface::DataSize)+0x208>)
   12644:	f003 ff1c 	bl	16480 <__cyg_profile_func_enter>
  constexpr UnsignedT kFieldOfOnes = GenerateFieldOfOnes<T>();
   12648:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1264c:	930b      	str	r3, [sp, #44]	; 0x2c
  constexpr size_t kTargetWidth     = sizeof(T) * 8;
   1264e:	2320      	movs	r3, #32
   12650:	930a      	str	r3, [sp, #40]	; 0x28
  UnsignedT mask   = kFieldOfOnes >> (kTargetWidth - width);
   12652:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   12654:	f1c3 0320 	rsb	r3, r3, #32
   12658:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1265c:	fa22 f303 	lsr.w	r3, r2, r3
   12660:	9309      	str	r3, [sp, #36]	; 0x24
  target &= ~(mask << position);
   12662:	9a09      	ldr	r2, [sp, #36]	; 0x24
   12664:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   12666:	fa02 f303 	lsl.w	r3, r2, r3
   1266a:	43db      	mvns	r3, r3
   1266c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   1266e:	4013      	ands	r3, r2
   12670:	930f      	str	r3, [sp, #60]	; 0x3c
  target |= (value & mask) << position;
   12672:	f89d 203b 	ldrb.w	r2, [sp, #59]	; 0x3b
   12676:	9b09      	ldr	r3, [sp, #36]	; 0x24
   12678:	401a      	ands	r2, r3
   1267a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1267c:	fa02 f303 	lsl.w	r3, r2, r3
   12680:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   12682:	4313      	orrs	r3, r2
   12684:	930f      	str	r3, [sp, #60]	; 0x3c
  return target;
   12686:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
   12688:	4623      	mov	r3, r4
   1268a:	4619      	mov	r1, r3
   1268c:	482a      	ldr	r0, [pc, #168]	; (12738 <Ssp::SetPeripheralMode(SspInterface::MasterSlaveMode, SspInterface::FrameMode, SspInterface::DataSize)+0x208>)
   1268e:	f003 ff0b 	bl	164a8 <__cyg_profile_func_exit>
   12692:	602e      	str	r6, [r5, #0]
    ssp_registers[pssp]->CR1 = bit::Insert(
        ssp_registers[pssp]->CR1, util::Value(mode), kMasterModeBit, 1);
   12694:	4a27      	ldr	r2, [pc, #156]	; (12734 <Ssp::SetPeripheralMode(SspInterface::MasterSlaveMode, SspInterface::FrameMode, SspInterface::DataSize)+0x204>)
   12696:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   12698:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1269c:	685e      	ldr	r6, [r3, #4]
    ssp_registers[pssp]->CR1 = bit::Insert(
   1269e:	f89d 3003 	ldrb.w	r3, [sp, #3]
   126a2:	4618      	mov	r0, r3
   126a4:	f7ff ff2c 	bl	12500 <unsigned char util::Value<SspInterface::MasterSlaveMode, unsigned char>(SspInterface::MasterSlaveMode)>
   126a8:	4603      	mov	r3, r0
   126aa:	4619      	mov	r1, r3
   126ac:	4a21      	ldr	r2, [pc, #132]	; (12734 <Ssp::SetPeripheralMode(SspInterface::MasterSlaveMode, SspInterface::FrameMode, SspInterface::DataSize)+0x204>)
   126ae:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   126b0:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
   126b4:	9616      	str	r6, [sp, #88]	; 0x58
   126b6:	460b      	mov	r3, r1
   126b8:	f88d 3057 	strb.w	r3, [sp, #87]	; 0x57
   126bc:	2302      	movs	r3, #2
   126be:	9314      	str	r3, [sp, #80]	; 0x50
   126c0:	2301      	movs	r3, #1
   126c2:	9313      	str	r3, [sp, #76]	; 0x4c
   126c4:	4623      	mov	r3, r4
   126c6:	4619      	mov	r1, r3
   126c8:	481b      	ldr	r0, [pc, #108]	; (12738 <Ssp::SetPeripheralMode(SspInterface::MasterSlaveMode, SspInterface::FrameMode, SspInterface::DataSize)+0x208>)
   126ca:	f003 fed9 	bl	16480 <__cyg_profile_func_enter>
  constexpr UnsignedT kFieldOfOnes = GenerateFieldOfOnes<T>();
   126ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   126d2:	9312      	str	r3, [sp, #72]	; 0x48
  constexpr size_t kTargetWidth     = sizeof(T) * 8;
   126d4:	2320      	movs	r3, #32
   126d6:	9311      	str	r3, [sp, #68]	; 0x44
  UnsignedT mask   = kFieldOfOnes >> (kTargetWidth - width);
   126d8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   126da:	f1c3 0320 	rsb	r3, r3, #32
   126de:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   126e2:	fa22 f303 	lsr.w	r3, r2, r3
   126e6:	9310      	str	r3, [sp, #64]	; 0x40
  target &= ~(mask << position);
   126e8:	9a10      	ldr	r2, [sp, #64]	; 0x40
   126ea:	9b14      	ldr	r3, [sp, #80]	; 0x50
   126ec:	fa02 f303 	lsl.w	r3, r2, r3
   126f0:	43db      	mvns	r3, r3
   126f2:	9a16      	ldr	r2, [sp, #88]	; 0x58
   126f4:	4013      	ands	r3, r2
   126f6:	9316      	str	r3, [sp, #88]	; 0x58
  target |= (value & mask) << position;
   126f8:	f89d 2057 	ldrb.w	r2, [sp, #87]	; 0x57
   126fc:	9b10      	ldr	r3, [sp, #64]	; 0x40
   126fe:	401a      	ands	r2, r3
   12700:	9b14      	ldr	r3, [sp, #80]	; 0x50
   12702:	fa02 f303 	lsl.w	r3, r2, r3
   12706:	9a16      	ldr	r2, [sp, #88]	; 0x58
   12708:	4313      	orrs	r3, r2
   1270a:	9316      	str	r3, [sp, #88]	; 0x58
  return target;
   1270c:	9e16      	ldr	r6, [sp, #88]	; 0x58
   1270e:	4623      	mov	r3, r4
   12710:	4619      	mov	r1, r3
   12712:	4809      	ldr	r0, [pc, #36]	; (12738 <Ssp::SetPeripheralMode(SspInterface::MasterSlaveMode, SspInterface::FrameMode, SspInterface::DataSize)+0x208>)
   12714:	f003 fec8 	bl	164a8 <__cyg_profile_func_exit>
   12718:	606e      	str	r6, [r5, #4]
   1271a:	4623      	mov	r3, r4
   1271c:	4619      	mov	r1, r3
   1271e:	4803      	ldr	r0, [pc, #12]	; (1272c <Ssp::SetPeripheralMode(SspInterface::MasterSlaveMode, SspInterface::FrameMode, SspInterface::DataSize)+0x1fc>)
   12720:	f003 fec2 	bl	164a8 <__cyg_profile_func_exit>
  }
   12724:	bf00      	nop
   12726:	b018      	add	sp, #96	; 0x60
   12728:	bd70      	pop	{r4, r5, r6, pc}
   1272a:	bf00      	nop
   1272c:	00012531 	.word	0x00012531
   12730:	00019b2c 	.word	0x00019b2c
   12734:	10000050 	.word	0x10000050
   12738:	00014a8d 	.word	0x00014a8d

0001273c <Ssp::GetPeripheralMode()>:
  /// Gets the Peripheral modes from registers
  /// @return - returns a 16-bit value as follows: 0000_000x 0xx0_xxxx
  ///       MasterSlaveMode = 1-bit @ bit 8
  ///       FrameMode       = 2-bit @ bit 5
  ///       DataSize        = 4-bit @ bit 0
  uint16_t GetPeripheralMode() override
   1273c:	b570      	push	{r4, r5, r6, lr}
   1273e:	b096      	sub	sp, #88	; 0x58
   12740:	4674      	mov	r4, lr
   12742:	9001      	str	r0, [sp, #4]
   12744:	4623      	mov	r3, r4
   12746:	4619      	mov	r1, r3
   12748:	4850      	ldr	r0, [pc, #320]	; (1288c <Ssp::GetPeripheralMode()+0x150>)
   1274a:	f003 fe99 	bl	16480 <__cyg_profile_func_enter>
  {
    uint16_t return_val = 0;
   1274e:	2300      	movs	r3, #0
   12750:	f8ad 3056 	strh.w	r3, [sp, #86]	; 0x56
    uint32_t pssp       = util::Value(pssp_);
   12754:	9b01      	ldr	r3, [sp, #4]
   12756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   12758:	4618      	mov	r0, r3
   1275a:	f7ff fca7 	bl	120ac <int util::Value<Ssp::Peripheral, int>(Ssp::Peripheral)>
   1275e:	4603      	mov	r3, r0
   12760:	9314      	str	r3, [sp, #80]	; 0x50
    // TODO(#371): Find a better alternative to powering up the peripheral for
    // every method.
    Ssp::PowerUpPeripheral(Ssp::kPowerBit[pssp]);
   12762:	9b01      	ldr	r3, [sp, #4]
   12764:	1d18      	adds	r0, r3, #4
   12766:	9b14      	ldr	r3, [sp, #80]	; 0x50
   12768:	009b      	lsls	r3, r3, #2
   1276a:	4a49      	ldr	r2, [pc, #292]	; (12890 <Ssp::GetPeripheralMode()+0x154>)
   1276c:	4413      	add	r3, r2
   1276e:	4619      	mov	r1, r3
   12770:	f7ff fa7e 	bl	11c70 <Lpc40xxSystemController::PowerUpPeripheral(SystemControllerInterface::PeripheralID const&)>

    return_val = static_cast<uint16_t>(
        (bit::Extract(ssp_registers[pssp]->CR0, kDataBit, 4)) +
   12774:	4a47      	ldr	r2, [pc, #284]	; (12894 <Ssp::GetPeripheralMode()+0x158>)
   12776:	9b14      	ldr	r3, [sp, #80]	; 0x50
   12778:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1277c:	681b      	ldr	r3, [r3, #0]
   1277e:	9307      	str	r3, [sp, #28]
   12780:	2300      	movs	r3, #0
   12782:	9306      	str	r3, [sp, #24]
   12784:	2304      	movs	r3, #4
   12786:	9305      	str	r3, [sp, #20]
   12788:	4623      	mov	r3, r4
   1278a:	4619      	mov	r1, r3
   1278c:	4842      	ldr	r0, [pc, #264]	; (12898 <Ssp::GetPeripheralMode()+0x15c>)
   1278e:	f003 fe77 	bl	16480 <__cyg_profile_func_enter>
  constexpr UnsignedT kFieldOfOnes = GenerateFieldOfOnes<T>();
   12792:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   12796:	9304      	str	r3, [sp, #16]
  constexpr size_t kTargetWidth     = sizeof(T) * 8;
   12798:	2320      	movs	r3, #32
   1279a:	9303      	str	r3, [sp, #12]
  UnsignedT mask   = kFieldOfOnes >> (kTargetWidth - width);
   1279c:	9b05      	ldr	r3, [sp, #20]
   1279e:	f1c3 0320 	rsb	r3, r3, #32
   127a2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   127a6:	fa22 f303 	lsr.w	r3, r2, r3
   127aa:	9302      	str	r3, [sp, #8]
  return (target >> position) & mask;
   127ac:	9a07      	ldr	r2, [sp, #28]
   127ae:	9b06      	ldr	r3, [sp, #24]
   127b0:	40da      	lsrs	r2, r3
   127b2:	9b02      	ldr	r3, [sp, #8]
   127b4:	ea02 0503 	and.w	r5, r2, r3
   127b8:	4623      	mov	r3, r4
   127ba:	4619      	mov	r1, r3
   127bc:	4836      	ldr	r0, [pc, #216]	; (12898 <Ssp::GetPeripheralMode()+0x15c>)
   127be:	f003 fe73 	bl	164a8 <__cyg_profile_func_exit>
   127c2:	b2ad      	uxth	r5, r5
        ((bit::Extract(ssp_registers[pssp]->CR0, kFrameBit, 2)) << 5) +
   127c4:	4a33      	ldr	r2, [pc, #204]	; (12894 <Ssp::GetPeripheralMode()+0x158>)
   127c6:	9b14      	ldr	r3, [sp, #80]	; 0x50
   127c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   127cc:	681b      	ldr	r3, [r3, #0]
   127ce:	930d      	str	r3, [sp, #52]	; 0x34
   127d0:	2304      	movs	r3, #4
   127d2:	930c      	str	r3, [sp, #48]	; 0x30
   127d4:	2302      	movs	r3, #2
   127d6:	930b      	str	r3, [sp, #44]	; 0x2c
   127d8:	4623      	mov	r3, r4
   127da:	4619      	mov	r1, r3
   127dc:	482e      	ldr	r0, [pc, #184]	; (12898 <Ssp::GetPeripheralMode()+0x15c>)
   127de:	f003 fe4f 	bl	16480 <__cyg_profile_func_enter>
  constexpr UnsignedT kFieldOfOnes = GenerateFieldOfOnes<T>();
   127e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   127e6:	930a      	str	r3, [sp, #40]	; 0x28
  constexpr size_t kTargetWidth     = sizeof(T) * 8;
   127e8:	2320      	movs	r3, #32
   127ea:	9309      	str	r3, [sp, #36]	; 0x24
  UnsignedT mask   = kFieldOfOnes >> (kTargetWidth - width);
   127ec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   127ee:	f1c3 0320 	rsb	r3, r3, #32
   127f2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   127f6:	fa22 f303 	lsr.w	r3, r2, r3
   127fa:	9308      	str	r3, [sp, #32]
  return (target >> position) & mask;
   127fc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   127fe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   12800:	40da      	lsrs	r2, r3
   12802:	9b08      	ldr	r3, [sp, #32]
   12804:	ea02 0603 	and.w	r6, r2, r3
   12808:	4623      	mov	r3, r4
   1280a:	4619      	mov	r1, r3
   1280c:	4822      	ldr	r0, [pc, #136]	; (12898 <Ssp::GetPeripheralMode()+0x15c>)
   1280e:	f003 fe4b 	bl	164a8 <__cyg_profile_func_exit>
   12812:	b2b3      	uxth	r3, r6
   12814:	015b      	lsls	r3, r3, #5
   12816:	b29b      	uxth	r3, r3
        (bit::Extract(ssp_registers[pssp]->CR0, kDataBit, 4)) +
   12818:	442b      	add	r3, r5
   1281a:	b29d      	uxth	r5, r3
        ((bit::Extract(ssp_registers[pssp]->CR1, kMasterModeBit)) << 8));
   1281c:	4a1d      	ldr	r2, [pc, #116]	; (12894 <Ssp::GetPeripheralMode()+0x158>)
   1281e:	9b14      	ldr	r3, [sp, #80]	; 0x50
   12820:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12824:	685b      	ldr	r3, [r3, #4]
   12826:	9313      	str	r3, [sp, #76]	; 0x4c
   12828:	2302      	movs	r3, #2
   1282a:	9312      	str	r3, [sp, #72]	; 0x48
   1282c:	2301      	movs	r3, #1
   1282e:	9311      	str	r3, [sp, #68]	; 0x44
   12830:	4623      	mov	r3, r4
   12832:	4619      	mov	r1, r3
   12834:	4818      	ldr	r0, [pc, #96]	; (12898 <Ssp::GetPeripheralMode()+0x15c>)
   12836:	f003 fe23 	bl	16480 <__cyg_profile_func_enter>
  constexpr UnsignedT kFieldOfOnes = GenerateFieldOfOnes<T>();
   1283a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1283e:	9310      	str	r3, [sp, #64]	; 0x40
  constexpr size_t kTargetWidth     = sizeof(T) * 8;
   12840:	2320      	movs	r3, #32
   12842:	930f      	str	r3, [sp, #60]	; 0x3c
  UnsignedT mask   = kFieldOfOnes >> (kTargetWidth - width);
   12844:	9b11      	ldr	r3, [sp, #68]	; 0x44
   12846:	f1c3 0320 	rsb	r3, r3, #32
   1284a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1284e:	fa22 f303 	lsr.w	r3, r2, r3
   12852:	930e      	str	r3, [sp, #56]	; 0x38
  return (target >> position) & mask;
   12854:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   12856:	9b12      	ldr	r3, [sp, #72]	; 0x48
   12858:	40da      	lsrs	r2, r3
   1285a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1285c:	ea02 0603 	and.w	r6, r2, r3
   12860:	4623      	mov	r3, r4
   12862:	4619      	mov	r1, r3
   12864:	480c      	ldr	r0, [pc, #48]	; (12898 <Ssp::GetPeripheralMode()+0x15c>)
   12866:	f003 fe1f 	bl	164a8 <__cyg_profile_func_exit>
   1286a:	b2b3      	uxth	r3, r6
   1286c:	021b      	lsls	r3, r3, #8
   1286e:	b29b      	uxth	r3, r3
    return_val = static_cast<uint16_t>(
   12870:	442b      	add	r3, r5
   12872:	f8ad 3056 	strh.w	r3, [sp, #86]	; 0x56
    return return_val;
   12876:	f8bd 5056 	ldrh.w	r5, [sp, #86]	; 0x56
   1287a:	4623      	mov	r3, r4
   1287c:	4619      	mov	r1, r3
   1287e:	4803      	ldr	r0, [pc, #12]	; (1288c <Ssp::GetPeripheralMode()+0x150>)
   12880:	f003 fe12 	bl	164a8 <__cyg_profile_func_exit>
   12884:	462b      	mov	r3, r5
  }
   12886:	4618      	mov	r0, r3
   12888:	b016      	add	sp, #88	; 0x58
   1288a:	bd70      	pop	{r4, r5, r6, pc}
   1288c:	0001273d 	.word	0x0001273d
   12890:	00019b2c 	.word	0x00019b2c
   12894:	10000050 	.word	0x10000050
   12898:	00014b01 	.word	0x00014b01

0001289c <Ssp::SetClock(bool, bool, unsigned char, unsigned char)>:
  /// Sets the clock rate for the Peripheral
  /// @param polarity - maintain bus on clock 0=low or 1=high between frames
  /// @param phase - capture serial data on 0=first or 1=second clock cycle
  /// @param divider - see notes in SSP_Interface above
  /// @param prescaler - divides the PCLK, must be even value between 2-254
  void SetClock(bool polarity, bool phase, uint8_t divider,
   1289c:	b570      	push	{r4, r5, r6, lr}
   1289e:	b098      	sub	sp, #96	; 0x60
   128a0:	4674      	mov	r4, lr
   128a2:	9001      	str	r0, [sp, #4]
   128a4:	4608      	mov	r0, r1
   128a6:	4611      	mov	r1, r2
   128a8:	461a      	mov	r2, r3
   128aa:	4603      	mov	r3, r0
   128ac:	f88d 3003 	strb.w	r3, [sp, #3]
   128b0:	460b      	mov	r3, r1
   128b2:	f88d 3002 	strb.w	r3, [sp, #2]
   128b6:	4613      	mov	r3, r2
   128b8:	f88d 3001 	strb.w	r3, [sp, #1]
   128bc:	4623      	mov	r3, r4
   128be:	4619      	mov	r1, r3
   128c0:	486c      	ldr	r0, [pc, #432]	; (12a74 <Ssp::SetClock(bool, bool, unsigned char, unsigned char)+0x1d8>)
   128c2:	f003 fddd 	bl	16480 <__cyg_profile_func_enter>
                uint8_t prescaler) override
  {
    uint32_t pssp = util::Value(pssp_);
   128c6:	9b01      	ldr	r3, [sp, #4]
   128c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   128ca:	4618      	mov	r0, r3
   128cc:	f7ff fbee 	bl	120ac <int util::Value<Ssp::Peripheral, int>(Ssp::Peripheral)>
   128d0:	4603      	mov	r3, r0
   128d2:	9317      	str	r3, [sp, #92]	; 0x5c
    // TODO(#371): Find a better alternative to powering up the peripheral for
    // every method.
    Ssp::PowerUpPeripheral(Ssp::kPowerBit[pssp]);
   128d4:	9b01      	ldr	r3, [sp, #4]
   128d6:	1d18      	adds	r0, r3, #4
   128d8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   128da:	009b      	lsls	r3, r3, #2
   128dc:	4a66      	ldr	r2, [pc, #408]	; (12a78 <Ssp::SetClock(bool, bool, unsigned char, unsigned char)+0x1dc>)
   128de:	4413      	add	r3, r2
   128e0:	4619      	mov	r1, r3
   128e2:	f7ff f9c5 	bl	11c70 <Lpc40xxSystemController::PowerUpPeripheral(SystemControllerInterface::PeripheralID const&)>
    // first clear the appropriate registers
    ssp_registers[pssp]->CR0 =
        bit::Insert(ssp_registers[pssp]->CR0, polarity, kPolarityBit, 1);
   128e6:	4a65      	ldr	r2, [pc, #404]	; (12a7c <Ssp::SetClock(bool, bool, unsigned char, unsigned char)+0x1e0>)
   128e8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   128ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   128ee:	681b      	ldr	r3, [r3, #0]
    ssp_registers[pssp]->CR0 =
   128f0:	4962      	ldr	r1, [pc, #392]	; (12a7c <Ssp::SetClock(bool, bool, unsigned char, unsigned char)+0x1e0>)
   128f2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   128f4:	f851 5022 	ldr.w	r5, [r1, r2, lsl #2]
   128f8:	9308      	str	r3, [sp, #32]
   128fa:	f89d 3003 	ldrb.w	r3, [sp, #3]
   128fe:	f88d 301f 	strb.w	r3, [sp, #31]
   12902:	2306      	movs	r3, #6
   12904:	9306      	str	r3, [sp, #24]
   12906:	2301      	movs	r3, #1
   12908:	9305      	str	r3, [sp, #20]
   1290a:	4623      	mov	r3, r4
   1290c:	4619      	mov	r1, r3
   1290e:	485c      	ldr	r0, [pc, #368]	; (12a80 <Ssp::SetClock(bool, bool, unsigned char, unsigned char)+0x1e4>)
   12910:	f003 fdb6 	bl	16480 <__cyg_profile_func_enter>
  constexpr UnsignedT kFieldOfOnes = GenerateFieldOfOnes<T>();
   12914:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   12918:	9304      	str	r3, [sp, #16]
  constexpr size_t kTargetWidth     = sizeof(T) * 8;
   1291a:	2320      	movs	r3, #32
   1291c:	9303      	str	r3, [sp, #12]
  UnsignedT mask   = kFieldOfOnes >> (kTargetWidth - width);
   1291e:	9b05      	ldr	r3, [sp, #20]
   12920:	f1c3 0320 	rsb	r3, r3, #32
   12924:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   12928:	fa22 f303 	lsr.w	r3, r2, r3
   1292c:	9302      	str	r3, [sp, #8]
  target &= ~(mask << position);
   1292e:	9a02      	ldr	r2, [sp, #8]
   12930:	9b06      	ldr	r3, [sp, #24]
   12932:	fa02 f303 	lsl.w	r3, r2, r3
   12936:	43db      	mvns	r3, r3
   12938:	9a08      	ldr	r2, [sp, #32]
   1293a:	4013      	ands	r3, r2
   1293c:	9308      	str	r3, [sp, #32]
  target |= (value & mask) << position;
   1293e:	f89d 201f 	ldrb.w	r2, [sp, #31]
   12942:	9b02      	ldr	r3, [sp, #8]
   12944:	401a      	ands	r2, r3
   12946:	9b06      	ldr	r3, [sp, #24]
   12948:	fa02 f303 	lsl.w	r3, r2, r3
   1294c:	9a08      	ldr	r2, [sp, #32]
   1294e:	4313      	orrs	r3, r2
   12950:	9308      	str	r3, [sp, #32]
  return target;
   12952:	9e08      	ldr	r6, [sp, #32]
   12954:	4623      	mov	r3, r4
   12956:	4619      	mov	r1, r3
   12958:	4849      	ldr	r0, [pc, #292]	; (12a80 <Ssp::SetClock(bool, bool, unsigned char, unsigned char)+0x1e4>)
   1295a:	f003 fda5 	bl	164a8 <__cyg_profile_func_exit>
   1295e:	602e      	str	r6, [r5, #0]
    ssp_registers[pssp]->CR0 =
        bit::Insert(ssp_registers[pssp]->CR0, phase, kPhaseBit, 1);
   12960:	4a46      	ldr	r2, [pc, #280]	; (12a7c <Ssp::SetClock(bool, bool, unsigned char, unsigned char)+0x1e0>)
   12962:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   12964:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12968:	681b      	ldr	r3, [r3, #0]
    ssp_registers[pssp]->CR0 =
   1296a:	4944      	ldr	r1, [pc, #272]	; (12a7c <Ssp::SetClock(bool, bool, unsigned char, unsigned char)+0x1e0>)
   1296c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   1296e:	f851 5022 	ldr.w	r5, [r1, r2, lsl #2]
   12972:	930f      	str	r3, [sp, #60]	; 0x3c
   12974:	f89d 3002 	ldrb.w	r3, [sp, #2]
   12978:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
   1297c:	2307      	movs	r3, #7
   1297e:	930d      	str	r3, [sp, #52]	; 0x34
   12980:	2301      	movs	r3, #1
   12982:	930c      	str	r3, [sp, #48]	; 0x30
   12984:	4623      	mov	r3, r4
   12986:	4619      	mov	r1, r3
   12988:	483d      	ldr	r0, [pc, #244]	; (12a80 <Ssp::SetClock(bool, bool, unsigned char, unsigned char)+0x1e4>)
   1298a:	f003 fd79 	bl	16480 <__cyg_profile_func_enter>
  constexpr UnsignedT kFieldOfOnes = GenerateFieldOfOnes<T>();
   1298e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   12992:	930b      	str	r3, [sp, #44]	; 0x2c
  constexpr size_t kTargetWidth     = sizeof(T) * 8;
   12994:	2320      	movs	r3, #32
   12996:	930a      	str	r3, [sp, #40]	; 0x28
  UnsignedT mask   = kFieldOfOnes >> (kTargetWidth - width);
   12998:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1299a:	f1c3 0320 	rsb	r3, r3, #32
   1299e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   129a2:	fa22 f303 	lsr.w	r3, r2, r3
   129a6:	9309      	str	r3, [sp, #36]	; 0x24
  target &= ~(mask << position);
   129a8:	9a09      	ldr	r2, [sp, #36]	; 0x24
   129aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   129ac:	fa02 f303 	lsl.w	r3, r2, r3
   129b0:	43db      	mvns	r3, r3
   129b2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   129b4:	4013      	ands	r3, r2
   129b6:	930f      	str	r3, [sp, #60]	; 0x3c
  target |= (value & mask) << position;
   129b8:	f89d 203b 	ldrb.w	r2, [sp, #59]	; 0x3b
   129bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
   129be:	401a      	ands	r2, r3
   129c0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   129c2:	fa02 f303 	lsl.w	r3, r2, r3
   129c6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   129c8:	4313      	orrs	r3, r2
   129ca:	930f      	str	r3, [sp, #60]	; 0x3c
  return target;
   129cc:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
   129ce:	4623      	mov	r3, r4
   129d0:	4619      	mov	r1, r3
   129d2:	482b      	ldr	r0, [pc, #172]	; (12a80 <Ssp::SetClock(bool, bool, unsigned char, unsigned char)+0x1e4>)
   129d4:	f003 fd68 	bl	164a8 <__cyg_profile_func_exit>
   129d8:	602e      	str	r6, [r5, #0]
    ssp_registers[pssp]->CR0 =
        bit::Insert(ssp_registers[pssp]->CR0, divider, kDividerBit, 8);
   129da:	4a28      	ldr	r2, [pc, #160]	; (12a7c <Ssp::SetClock(bool, bool, unsigned char, unsigned char)+0x1e0>)
   129dc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   129de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   129e2:	681b      	ldr	r3, [r3, #0]
    ssp_registers[pssp]->CR0 =
   129e4:	4925      	ldr	r1, [pc, #148]	; (12a7c <Ssp::SetClock(bool, bool, unsigned char, unsigned char)+0x1e0>)
   129e6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   129e8:	f851 5022 	ldr.w	r5, [r1, r2, lsl #2]
   129ec:	9316      	str	r3, [sp, #88]	; 0x58
   129ee:	f89d 3001 	ldrb.w	r3, [sp, #1]
   129f2:	f88d 3057 	strb.w	r3, [sp, #87]	; 0x57
   129f6:	2308      	movs	r3, #8
   129f8:	9314      	str	r3, [sp, #80]	; 0x50
   129fa:	2308      	movs	r3, #8
   129fc:	9313      	str	r3, [sp, #76]	; 0x4c
   129fe:	4623      	mov	r3, r4
   12a00:	4619      	mov	r1, r3
   12a02:	4820      	ldr	r0, [pc, #128]	; (12a84 <Ssp::SetClock(bool, bool, unsigned char, unsigned char)+0x1e8>)
   12a04:	f003 fd3c 	bl	16480 <__cyg_profile_func_enter>
  constexpr UnsignedT kFieldOfOnes = GenerateFieldOfOnes<T>();
   12a08:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   12a0c:	9312      	str	r3, [sp, #72]	; 0x48
  constexpr size_t kTargetWidth     = sizeof(T) * 8;
   12a0e:	2320      	movs	r3, #32
   12a10:	9311      	str	r3, [sp, #68]	; 0x44
  UnsignedT mask   = kFieldOfOnes >> (kTargetWidth - width);
   12a12:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   12a14:	f1c3 0320 	rsb	r3, r3, #32
   12a18:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   12a1c:	fa22 f303 	lsr.w	r3, r2, r3
   12a20:	9310      	str	r3, [sp, #64]	; 0x40
  target &= ~(mask << position);
   12a22:	9a10      	ldr	r2, [sp, #64]	; 0x40
   12a24:	9b14      	ldr	r3, [sp, #80]	; 0x50
   12a26:	fa02 f303 	lsl.w	r3, r2, r3
   12a2a:	43db      	mvns	r3, r3
   12a2c:	9a16      	ldr	r2, [sp, #88]	; 0x58
   12a2e:	4013      	ands	r3, r2
   12a30:	9316      	str	r3, [sp, #88]	; 0x58
  target |= (value & mask) << position;
   12a32:	f89d 2057 	ldrb.w	r2, [sp, #87]	; 0x57
   12a36:	9b10      	ldr	r3, [sp, #64]	; 0x40
   12a38:	401a      	ands	r2, r3
   12a3a:	9b14      	ldr	r3, [sp, #80]	; 0x50
   12a3c:	fa02 f303 	lsl.w	r3, r2, r3
   12a40:	9a16      	ldr	r2, [sp, #88]	; 0x58
   12a42:	4313      	orrs	r3, r2
   12a44:	9316      	str	r3, [sp, #88]	; 0x58
  return target;
   12a46:	9e16      	ldr	r6, [sp, #88]	; 0x58
   12a48:	4623      	mov	r3, r4
   12a4a:	4619      	mov	r1, r3
   12a4c:	480d      	ldr	r0, [pc, #52]	; (12a84 <Ssp::SetClock(bool, bool, unsigned char, unsigned char)+0x1e8>)
   12a4e:	f003 fd2b 	bl	164a8 <__cyg_profile_func_exit>
   12a52:	602e      	str	r6, [r5, #0]
    ssp_registers[pssp]->CPSR = prescaler;
   12a54:	4a09      	ldr	r2, [pc, #36]	; (12a7c <Ssp::SetClock(bool, bool, unsigned char, unsigned char)+0x1e0>)
   12a56:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   12a58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12a5c:	f89d 2070 	ldrb.w	r2, [sp, #112]	; 0x70
   12a60:	611a      	str	r2, [r3, #16]
   12a62:	4623      	mov	r3, r4
   12a64:	4619      	mov	r1, r3
   12a66:	4803      	ldr	r0, [pc, #12]	; (12a74 <Ssp::SetClock(bool, bool, unsigned char, unsigned char)+0x1d8>)
   12a68:	f003 fd1e 	bl	164a8 <__cyg_profile_func_exit>
  }
   12a6c:	bf00      	nop
   12a6e:	b018      	add	sp, #96	; 0x60
   12a70:	bd70      	pop	{r4, r5, r6, pc}
   12a72:	bf00      	nop
   12a74:	0001289d 	.word	0x0001289d
   12a78:	00019b2c 	.word	0x00019b2c
   12a7c:	10000050 	.word	0x10000050
   12a80:	00014b55 	.word	0x00014b55
   12a84:	00014a8d 	.word	0x00014a8d

00012a88 <Ssp::GetClock()>:
  ///   0000_0000 0000_0x0x xxxx_xxxx xxxx_xxxx
  ///       polarity    = 1-bit @ bit 18
  ///       phase       = 1-bit @ bit 16
  ///       divider     = 8-bits @ bit 8
  ///       prescaler   = 8-bits @ bit 0
  uint32_t GetClock() override
   12a88:	b570      	push	{r4, r5, r6, lr}
   12a8a:	b094      	sub	sp, #80	; 0x50
   12a8c:	4674      	mov	r4, lr
   12a8e:	9001      	str	r0, [sp, #4]
   12a90:	4623      	mov	r3, r4
   12a92:	4619      	mov	r1, r3
   12a94:	4858      	ldr	r0, [pc, #352]	; (12bf8 <Ssp::GetClock()+0x170>)
   12a96:	f003 fcf3 	bl	16480 <__cyg_profile_func_enter>
  {
    uint32_t return_val = 0;
   12a9a:	2300      	movs	r3, #0
   12a9c:	9313      	str	r3, [sp, #76]	; 0x4c
    uint32_t pssp       = util::Value(pssp_);
   12a9e:	9b01      	ldr	r3, [sp, #4]
   12aa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   12aa2:	4618      	mov	r0, r3
   12aa4:	f7ff fb02 	bl	120ac <int util::Value<Ssp::Peripheral, int>(Ssp::Peripheral)>
   12aa8:	4603      	mov	r3, r0
   12aaa:	9312      	str	r3, [sp, #72]	; 0x48
    // TODO(#371): Find a better alternative to powering up the peripheral for
    // every method.
    Ssp::PowerUpPeripheral(Ssp::kPowerBit[pssp]);
   12aac:	9b01      	ldr	r3, [sp, #4]
   12aae:	1d18      	adds	r0, r3, #4
   12ab0:	9b12      	ldr	r3, [sp, #72]	; 0x48
   12ab2:	009b      	lsls	r3, r3, #2
   12ab4:	4a51      	ldr	r2, [pc, #324]	; (12bfc <Ssp::GetClock()+0x174>)
   12ab6:	4413      	add	r3, r2
   12ab8:	4619      	mov	r1, r3
   12aba:	f7ff f8d9 	bl	11c70 <Lpc40xxSystemController::PowerUpPeripheral(SystemControllerInterface::PeripheralID const&)>

    return_val =
        (bit::Extract(ssp_registers[pssp]->CPSR, kPrescalerBit, 8)) +
   12abe:	4a50      	ldr	r2, [pc, #320]	; (12c00 <Ssp::GetClock()+0x178>)
   12ac0:	9b12      	ldr	r3, [sp, #72]	; 0x48
   12ac2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12ac6:	691b      	ldr	r3, [r3, #16]
   12ac8:	9307      	str	r3, [sp, #28]
   12aca:	2300      	movs	r3, #0
   12acc:	9306      	str	r3, [sp, #24]
   12ace:	2308      	movs	r3, #8
   12ad0:	9305      	str	r3, [sp, #20]
   12ad2:	4623      	mov	r3, r4
   12ad4:	4619      	mov	r1, r3
   12ad6:	484b      	ldr	r0, [pc, #300]	; (12c04 <Ssp::GetClock()+0x17c>)
   12ad8:	f003 fcd2 	bl	16480 <__cyg_profile_func_enter>
  constexpr UnsignedT kFieldOfOnes = GenerateFieldOfOnes<T>();
   12adc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   12ae0:	9304      	str	r3, [sp, #16]
  constexpr size_t kTargetWidth     = sizeof(T) * 8;
   12ae2:	2320      	movs	r3, #32
   12ae4:	9303      	str	r3, [sp, #12]
  UnsignedT mask   = kFieldOfOnes >> (kTargetWidth - width);
   12ae6:	9b05      	ldr	r3, [sp, #20]
   12ae8:	f1c3 0320 	rsb	r3, r3, #32
   12aec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   12af0:	fa22 f303 	lsr.w	r3, r2, r3
   12af4:	9302      	str	r3, [sp, #8]
  return (target >> position) & mask;
   12af6:	9a07      	ldr	r2, [sp, #28]
   12af8:	9b06      	ldr	r3, [sp, #24]
   12afa:	40da      	lsrs	r2, r3
   12afc:	9b02      	ldr	r3, [sp, #8]
   12afe:	ea02 0503 	and.w	r5, r2, r3
   12b02:	4623      	mov	r3, r4
   12b04:	4619      	mov	r1, r3
   12b06:	483f      	ldr	r0, [pc, #252]	; (12c04 <Ssp::GetClock()+0x17c>)
   12b08:	f003 fcce 	bl	164a8 <__cyg_profile_func_exit>
        ((bit::Extract(ssp_registers[pssp]->CR0, kDividerBit, 8)) << 8) +
   12b0c:	4a3c      	ldr	r2, [pc, #240]	; (12c00 <Ssp::GetClock()+0x178>)
   12b0e:	9b12      	ldr	r3, [sp, #72]	; 0x48
   12b10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12b14:	681b      	ldr	r3, [r3, #0]
   12b16:	930d      	str	r3, [sp, #52]	; 0x34
   12b18:	2308      	movs	r3, #8
   12b1a:	930c      	str	r3, [sp, #48]	; 0x30
   12b1c:	2308      	movs	r3, #8
   12b1e:	930b      	str	r3, [sp, #44]	; 0x2c
   12b20:	4623      	mov	r3, r4
   12b22:	4619      	mov	r1, r3
   12b24:	4837      	ldr	r0, [pc, #220]	; (12c04 <Ssp::GetClock()+0x17c>)
   12b26:	f003 fcab 	bl	16480 <__cyg_profile_func_enter>
  constexpr UnsignedT kFieldOfOnes = GenerateFieldOfOnes<T>();
   12b2a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   12b2e:	930a      	str	r3, [sp, #40]	; 0x28
  constexpr size_t kTargetWidth     = sizeof(T) * 8;
   12b30:	2320      	movs	r3, #32
   12b32:	9309      	str	r3, [sp, #36]	; 0x24
  UnsignedT mask   = kFieldOfOnes >> (kTargetWidth - width);
   12b34:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   12b36:	f1c3 0320 	rsb	r3, r3, #32
   12b3a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   12b3e:	fa22 f303 	lsr.w	r3, r2, r3
   12b42:	9308      	str	r3, [sp, #32]
  return (target >> position) & mask;
   12b44:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   12b46:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   12b48:	40da      	lsrs	r2, r3
   12b4a:	9b08      	ldr	r3, [sp, #32]
   12b4c:	ea02 0603 	and.w	r6, r2, r3
   12b50:	4623      	mov	r3, r4
   12b52:	4619      	mov	r1, r3
   12b54:	482b      	ldr	r0, [pc, #172]	; (12c04 <Ssp::GetClock()+0x17c>)
   12b56:	f003 fca7 	bl	164a8 <__cyg_profile_func_exit>
   12b5a:	0233      	lsls	r3, r6, #8
        (bit::Extract(ssp_registers[pssp]->CPSR, kPrescalerBit, 8)) +
   12b5c:	441d      	add	r5, r3
        ((bit::Read(ssp_registers[pssp]->CR0, kPhaseBit)) << 16) +
   12b5e:	4a28      	ldr	r2, [pc, #160]	; (12c00 <Ssp::GetClock()+0x178>)
   12b60:	9b12      	ldr	r3, [sp, #72]	; 0x48
   12b62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12b66:	681b      	ldr	r3, [r3, #0]
   12b68:	930f      	str	r3, [sp, #60]	; 0x3c
   12b6a:	2307      	movs	r3, #7
   12b6c:	930e      	str	r3, [sp, #56]	; 0x38
   12b6e:	4623      	mov	r3, r4
   12b70:	4619      	mov	r1, r3
   12b72:	4825      	ldr	r0, [pc, #148]	; (12c08 <Ssp::GetClock()+0x180>)
   12b74:	f003 fc84 	bl	16480 <__cyg_profile_func_enter>
  return static_cast<bool>(target & (1 << position));
   12b78:	2201      	movs	r2, #1
   12b7a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   12b7c:	fa02 f303 	lsl.w	r3, r2, r3
   12b80:	461a      	mov	r2, r3
   12b82:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   12b84:	4013      	ands	r3, r2
   12b86:	2b00      	cmp	r3, #0
   12b88:	bf14      	ite	ne
   12b8a:	2301      	movne	r3, #1
   12b8c:	2300      	moveq	r3, #0
   12b8e:	b2de      	uxtb	r6, r3
   12b90:	4623      	mov	r3, r4
   12b92:	4619      	mov	r1, r3
   12b94:	481c      	ldr	r0, [pc, #112]	; (12c08 <Ssp::GetClock()+0x180>)
   12b96:	f003 fc87 	bl	164a8 <__cyg_profile_func_exit>
   12b9a:	4633      	mov	r3, r6
   12b9c:	041b      	lsls	r3, r3, #16
        ((bit::Extract(ssp_registers[pssp]->CR0, kDividerBit, 8)) << 8) +
   12b9e:	441d      	add	r5, r3
        ((bit::Read(ssp_registers[pssp]->CR0, kPolarityBit)) << 18);
   12ba0:	4a17      	ldr	r2, [pc, #92]	; (12c00 <Ssp::GetClock()+0x178>)
   12ba2:	9b12      	ldr	r3, [sp, #72]	; 0x48
   12ba4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12ba8:	681b      	ldr	r3, [r3, #0]
   12baa:	9311      	str	r3, [sp, #68]	; 0x44
   12bac:	2306      	movs	r3, #6
   12bae:	9310      	str	r3, [sp, #64]	; 0x40
   12bb0:	4623      	mov	r3, r4
   12bb2:	4619      	mov	r1, r3
   12bb4:	4814      	ldr	r0, [pc, #80]	; (12c08 <Ssp::GetClock()+0x180>)
   12bb6:	f003 fc63 	bl	16480 <__cyg_profile_func_enter>
   12bba:	2201      	movs	r2, #1
   12bbc:	9b10      	ldr	r3, [sp, #64]	; 0x40
   12bbe:	fa02 f303 	lsl.w	r3, r2, r3
   12bc2:	461a      	mov	r2, r3
   12bc4:	9b11      	ldr	r3, [sp, #68]	; 0x44
   12bc6:	4013      	ands	r3, r2
   12bc8:	2b00      	cmp	r3, #0
   12bca:	bf14      	ite	ne
   12bcc:	2301      	movne	r3, #1
   12bce:	2300      	moveq	r3, #0
   12bd0:	b2de      	uxtb	r6, r3
   12bd2:	4623      	mov	r3, r4
   12bd4:	4619      	mov	r1, r3
   12bd6:	480c      	ldr	r0, [pc, #48]	; (12c08 <Ssp::GetClock()+0x180>)
   12bd8:	f003 fc66 	bl	164a8 <__cyg_profile_func_exit>
   12bdc:	4633      	mov	r3, r6
   12bde:	049b      	lsls	r3, r3, #18
    return_val =
   12be0:	442b      	add	r3, r5
   12be2:	9313      	str	r3, [sp, #76]	; 0x4c

    return return_val;
   12be4:	9d13      	ldr	r5, [sp, #76]	; 0x4c
   12be6:	4623      	mov	r3, r4
   12be8:	4619      	mov	r1, r3
   12bea:	4803      	ldr	r0, [pc, #12]	; (12bf8 <Ssp::GetClock()+0x170>)
   12bec:	f003 fc5c 	bl	164a8 <__cyg_profile_func_exit>
   12bf0:	462b      	mov	r3, r5
  }
   12bf2:	4618      	mov	r0, r3
   12bf4:	b014      	add	sp, #80	; 0x50
   12bf6:	bd70      	pop	{r4, r5, r6, pc}
   12bf8:	00012a89 	.word	0x00012a89
   12bfc:	00019b2c 	.word	0x00019b2c
   12c00:	10000050 	.word	0x10000050
   12c04:	00014b01 	.word	0x00014b01
   12c08:	00014a49 	.word	0x00014a49

00012c0c <PixelDisplayInterface::Color_t::Color_t(bool, bool, bool, unsigned char, unsigned char, bool)>:
class PixelDisplayInterface
{
 public:
  SJ2_PACKED(struct) Color_t
  {
    Color_t(bool r, bool g, bool b, uint8_t a, uint8_t bits,
   12c0c:	b530      	push	{r4, r5, lr}
   12c0e:	b083      	sub	sp, #12
   12c10:	4675      	mov	r5, lr
   12c12:	9001      	str	r0, [sp, #4]
   12c14:	4608      	mov	r0, r1
   12c16:	4611      	mov	r1, r2
   12c18:	461a      	mov	r2, r3
   12c1a:	4603      	mov	r3, r0
   12c1c:	f88d 3003 	strb.w	r3, [sp, #3]
   12c20:	460b      	mov	r3, r1
   12c22:	f88d 3002 	strb.w	r3, [sp, #2]
   12c26:	4613      	mov	r3, r2
   12c28:	f88d 3001 	strb.w	r3, [sp, #1]
   12c2c:	462b      	mov	r3, r5
   12c2e:	4619      	mov	r1, r3
   12c30:	481a      	ldr	r0, [pc, #104]	; (12c9c <PixelDisplayInterface::Color_t::Color_t(bool, bool, bool, unsigned char, unsigned char, bool)+0x90>)
   12c32:	f003 fc25 	bl	16480 <__cyg_profile_func_enter>
          red(r),
          green(g),
          blue(b),
          padding(0),
          color_bits(bits),
          alpha(a)
   12c36:	9a01      	ldr	r2, [sp, #4]
   12c38:	7813      	ldrb	r3, [r2, #0]
   12c3a:	f89d 1020 	ldrb.w	r1, [sp, #32]
   12c3e:	f361 0300 	bfi	r3, r1, #0, #1
   12c42:	7013      	strb	r3, [r2, #0]
   12c44:	9a01      	ldr	r2, [sp, #4]
   12c46:	7813      	ldrb	r3, [r2, #0]
   12c48:	f89d 1003 	ldrb.w	r1, [sp, #3]
   12c4c:	f361 0341 	bfi	r3, r1, #1, #1
   12c50:	7013      	strb	r3, [r2, #0]
   12c52:	9a01      	ldr	r2, [sp, #4]
   12c54:	7813      	ldrb	r3, [r2, #0]
   12c56:	f89d 1002 	ldrb.w	r1, [sp, #2]
   12c5a:	f361 0382 	bfi	r3, r1, #2, #1
   12c5e:	7013      	strb	r3, [r2, #0]
   12c60:	9a01      	ldr	r2, [sp, #4]
   12c62:	7813      	ldrb	r3, [r2, #0]
   12c64:	f89d 1001 	ldrb.w	r1, [sp, #1]
   12c68:	f361 03c3 	bfi	r3, r1, #3, #1
   12c6c:	7013      	strb	r3, [r2, #0]
   12c6e:	9a01      	ldr	r2, [sp, #4]
   12c70:	7813      	ldrb	r3, [r2, #0]
   12c72:	f36f 1307 	bfc	r3, #4, #4
   12c76:	7013      	strb	r3, [r2, #0]
   12c78:	9b01      	ldr	r3, [sp, #4]
   12c7a:	f89d 201c 	ldrb.w	r2, [sp, #28]
   12c7e:	705a      	strb	r2, [r3, #1]
   12c80:	9b01      	ldr	r3, [sp, #4]
   12c82:	f89d 2018 	ldrb.w	r2, [sp, #24]
   12c86:	709a      	strb	r2, [r3, #2]
    {
    }
   12c88:	9c01      	ldr	r4, [sp, #4]
   12c8a:	462b      	mov	r3, r5
   12c8c:	4619      	mov	r1, r3
   12c8e:	4803      	ldr	r0, [pc, #12]	; (12c9c <PixelDisplayInterface::Color_t::Color_t(bool, bool, bool, unsigned char, unsigned char, bool)+0x90>)
   12c90:	f003 fc0a 	bl	164a8 <__cyg_profile_func_exit>
   12c94:	4623      	mov	r3, r4
   12c96:	4618      	mov	r0, r3
   12c98:	b003      	add	sp, #12
   12c9a:	bd30      	pop	{r4, r5, pc}
   12c9c:	00012c0d 	.word	0x00012c0d

00012ca0 <PixelDisplayInterface::Color_t::Color_t()>:
    Color_t()
   12ca0:	b530      	push	{r4, r5, lr}
   12ca2:	b083      	sub	sp, #12
   12ca4:	4675      	mov	r5, lr
   12ca6:	9001      	str	r0, [sp, #4]
   12ca8:	462b      	mov	r3, r5
   12caa:	4619      	mov	r1, r3
   12cac:	4815      	ldr	r0, [pc, #84]	; (12d04 <PixelDisplayInterface::Color_t::Color_t()+0x64>)
   12cae:	f003 fbe7 	bl	16480 <__cyg_profile_func_enter>
          red(false),
          green(false),
          blue(false),
          padding(0),
          color_bits(0),
          alpha(0)
   12cb2:	9a01      	ldr	r2, [sp, #4]
   12cb4:	7813      	ldrb	r3, [r2, #0]
   12cb6:	f36f 0300 	bfc	r3, #0, #1
   12cba:	7013      	strb	r3, [r2, #0]
   12cbc:	9a01      	ldr	r2, [sp, #4]
   12cbe:	7813      	ldrb	r3, [r2, #0]
   12cc0:	f36f 0341 	bfc	r3, #1, #1
   12cc4:	7013      	strb	r3, [r2, #0]
   12cc6:	9a01      	ldr	r2, [sp, #4]
   12cc8:	7813      	ldrb	r3, [r2, #0]
   12cca:	f36f 0382 	bfc	r3, #2, #1
   12cce:	7013      	strb	r3, [r2, #0]
   12cd0:	9a01      	ldr	r2, [sp, #4]
   12cd2:	7813      	ldrb	r3, [r2, #0]
   12cd4:	f36f 03c3 	bfc	r3, #3, #1
   12cd8:	7013      	strb	r3, [r2, #0]
   12cda:	9a01      	ldr	r2, [sp, #4]
   12cdc:	7813      	ldrb	r3, [r2, #0]
   12cde:	f36f 1307 	bfc	r3, #4, #4
   12ce2:	7013      	strb	r3, [r2, #0]
   12ce4:	9b01      	ldr	r3, [sp, #4]
   12ce6:	2200      	movs	r2, #0
   12ce8:	705a      	strb	r2, [r3, #1]
   12cea:	9b01      	ldr	r3, [sp, #4]
   12cec:	2200      	movs	r2, #0
   12cee:	709a      	strb	r2, [r3, #2]
    {
    }
   12cf0:	9c01      	ldr	r4, [sp, #4]
   12cf2:	462b      	mov	r3, r5
   12cf4:	4619      	mov	r1, r3
   12cf6:	4803      	ldr	r0, [pc, #12]	; (12d04 <PixelDisplayInterface::Color_t::Color_t()+0x64>)
   12cf8:	f003 fbd6 	bl	164a8 <__cyg_profile_func_exit>
   12cfc:	4623      	mov	r3, r4
   12cfe:	4618      	mov	r0, r3
   12d00:	b003      	add	sp, #12
   12d02:	bd30      	pop	{r4, r5, pc}
   12d04:	00012ca1 	.word	0x00012ca1

00012d08 <PixelDisplayInterface::Enable()>:
  /// @returns a color object with the available colors.
  virtual Color_t AvailableColors() = 0;
  /// Configure hardware peripherals and initialize external display hardware
  virtual void Initialize() = 0;
  /// Optional method to turn on display if applicable
  virtual void Enable() {}
   12d08:	b510      	push	{r4, lr}
   12d0a:	b082      	sub	sp, #8
   12d0c:	4674      	mov	r4, lr
   12d0e:	9001      	str	r0, [sp, #4]
   12d10:	4623      	mov	r3, r4
   12d12:	4619      	mov	r1, r3
   12d14:	4805      	ldr	r0, [pc, #20]	; (12d2c <PixelDisplayInterface::Enable()+0x24>)
   12d16:	f003 fbb3 	bl	16480 <__cyg_profile_func_enter>
   12d1a:	4623      	mov	r3, r4
   12d1c:	4619      	mov	r1, r3
   12d1e:	4803      	ldr	r0, [pc, #12]	; (12d2c <PixelDisplayInterface::Enable()+0x24>)
   12d20:	f003 fbc2 	bl	164a8 <__cyg_profile_func_exit>
   12d24:	bf00      	nop
   12d26:	b002      	add	sp, #8
   12d28:	bd10      	pop	{r4, pc}
   12d2a:	bf00      	nop
   12d2c:	00012d09 	.word	0x00012d09

00012d30 <PixelDisplayInterface::Disable()>:
  /// Optional method to turn off display and potentially put it into a low
  /// power mode
  virtual void Disable() {}
   12d30:	b510      	push	{r4, lr}
   12d32:	b082      	sub	sp, #8
   12d34:	4674      	mov	r4, lr
   12d36:	9001      	str	r0, [sp, #4]
   12d38:	4623      	mov	r3, r4
   12d3a:	4619      	mov	r1, r3
   12d3c:	4805      	ldr	r0, [pc, #20]	; (12d54 <PixelDisplayInterface::Disable()+0x24>)
   12d3e:	f003 fb9f 	bl	16480 <__cyg_profile_func_enter>
   12d42:	4623      	mov	r3, r4
   12d44:	4619      	mov	r1, r3
   12d46:	4803      	ldr	r0, [pc, #12]	; (12d54 <PixelDisplayInterface::Disable()+0x24>)
   12d48:	f003 fbae 	bl	164a8 <__cyg_profile_func_exit>
   12d4c:	bf00      	nop
   12d4e:	b002      	add	sp, #8
   12d50:	bd10      	pop	{r4, pc}
   12d52:	bf00      	nop
   12d54:	00012d31 	.word	0x00012d31

00012d58 <PixelDisplayInterface::Update()>:
  /// @param color the color of the pixel. May be ignored on monochrome screens.
  virtual void DrawPixel(int32_t x, int32_t y, Color_t color) = 0;
  /// Update screen to match framebuffer.
  /// Implementations of this method that do not use a framebuffer, possibly
  /// due to memory constrains, can refrain from implementing this function.
  virtual void Update() {}
   12d58:	b510      	push	{r4, lr}
   12d5a:	b082      	sub	sp, #8
   12d5c:	4674      	mov	r4, lr
   12d5e:	9001      	str	r0, [sp, #4]
   12d60:	4623      	mov	r3, r4
   12d62:	4619      	mov	r1, r3
   12d64:	4805      	ldr	r0, [pc, #20]	; (12d7c <PixelDisplayInterface::Update()+0x24>)
   12d66:	f003 fb8b 	bl	16480 <__cyg_profile_func_enter>
   12d6a:	4623      	mov	r3, r4
   12d6c:	4619      	mov	r1, r3
   12d6e:	4803      	ldr	r0, [pc, #12]	; (12d7c <PixelDisplayInterface::Update()+0x24>)
   12d70:	f003 fb9a 	bl	164a8 <__cyg_profile_func_exit>
   12d74:	bf00      	nop
   12d76:	b002      	add	sp, #8
   12d78:	bd10      	pop	{r4, pc}
   12d7a:	bf00      	nop
   12d7c:	00012d59 	.word	0x00012d59

00012d80 <PixelDisplayInterface::PixelDisplayInterface()>:
class PixelDisplayInterface
   12d80:	b530      	push	{r4, r5, lr}
   12d82:	b083      	sub	sp, #12
   12d84:	4675      	mov	r5, lr
   12d86:	9001      	str	r0, [sp, #4]
   12d88:	462b      	mov	r3, r5
   12d8a:	4619      	mov	r1, r3
   12d8c:	4807      	ldr	r0, [pc, #28]	; (12dac <PixelDisplayInterface::PixelDisplayInterface()+0x2c>)
   12d8e:	f003 fb77 	bl	16480 <__cyg_profile_func_enter>
   12d92:	4a07      	ldr	r2, [pc, #28]	; (12db0 <PixelDisplayInterface::PixelDisplayInterface()+0x30>)
   12d94:	9b01      	ldr	r3, [sp, #4]
   12d96:	601a      	str	r2, [r3, #0]
   12d98:	9c01      	ldr	r4, [sp, #4]
   12d9a:	462b      	mov	r3, r5
   12d9c:	4619      	mov	r1, r3
   12d9e:	4803      	ldr	r0, [pc, #12]	; (12dac <PixelDisplayInterface::PixelDisplayInterface()+0x2c>)
   12da0:	f003 fb82 	bl	164a8 <__cyg_profile_func_exit>
   12da4:	4623      	mov	r3, r4
   12da6:	4618      	mov	r0, r3
   12da8:	b003      	add	sp, #12
   12daa:	bd30      	pop	{r4, r5, pc}
   12dac:	00012d81 	.word	0x00012d81
   12db0:	00019ba8 	.word	0x00019ba8

00012db4 <Ssd1306::Ssd1306()>:
  {
    kCommand = 0,
    kData    = 1
  };

  constexpr Ssd1306()
   12db4:	b530      	push	{r4, r5, lr}
   12db6:	b083      	sub	sp, #12
   12db8:	4675      	mov	r5, lr
   12dba:	9001      	str	r0, [sp, #4]
   12dbc:	462b      	mov	r3, r5
   12dbe:	4619      	mov	r1, r3
   12dc0:	481f      	ldr	r0, [pc, #124]	; (12e40 <Ssd1306::Ssd1306()+0x8c>)
   12dc2:	f003 fb5d 	bl	16480 <__cyg_profile_func_enter>
        cs_(&cs_gpio_),
        dc_(&dc_gpio_),
        ssp1_(Ssp::Peripheral::kSsp1),
        cs_gpio_(1, 22),
        dc_gpio_(1, 25),
        bitmap_{}
   12dc6:	9b01      	ldr	r3, [sp, #4]
   12dc8:	4618      	mov	r0, r3
   12dca:	f7ff ffd9 	bl	12d80 <PixelDisplayInterface::PixelDisplayInterface()>
   12dce:	4a1d      	ldr	r2, [pc, #116]	; (12e44 <Ssd1306::Ssd1306()+0x90>)
   12dd0:	9b01      	ldr	r3, [sp, #4]
   12dd2:	601a      	str	r2, [r3, #0]
      : ssp_(&ssp1_),
   12dd4:	9b01      	ldr	r3, [sp, #4]
   12dd6:	f103 0210 	add.w	r2, r3, #16
        bitmap_{}
   12dda:	9b01      	ldr	r3, [sp, #4]
   12ddc:	605a      	str	r2, [r3, #4]
        cs_(&cs_gpio_),
   12dde:	9b01      	ldr	r3, [sp, #4]
   12de0:	f103 0240 	add.w	r2, r3, #64	; 0x40
        bitmap_{}
   12de4:	9b01      	ldr	r3, [sp, #4]
   12de6:	609a      	str	r2, [r3, #8]
        dc_(&dc_gpio_),
   12de8:	9b01      	ldr	r3, [sp, #4]
   12dea:	f103 0254 	add.w	r2, r3, #84	; 0x54
        bitmap_{}
   12dee:	9b01      	ldr	r3, [sp, #4]
   12df0:	60da      	str	r2, [r3, #12]
   12df2:	9b01      	ldr	r3, [sp, #4]
   12df4:	3310      	adds	r3, #16
   12df6:	2101      	movs	r1, #1
   12df8:	4618      	mov	r0, r3
   12dfa:	f7ff f9cd 	bl	12198 <Ssp::Ssp(Ssp::Peripheral)>
   12dfe:	9b01      	ldr	r3, [sp, #4]
   12e00:	3340      	adds	r3, #64	; 0x40
   12e02:	2216      	movs	r2, #22
   12e04:	2101      	movs	r1, #1
   12e06:	4618      	mov	r0, r3
   12e08:	f7fe f9d6 	bl	111b8 <Gpio::Gpio(unsigned char, unsigned char)>
   12e0c:	9b01      	ldr	r3, [sp, #4]
   12e0e:	3354      	adds	r3, #84	; 0x54
   12e10:	2219      	movs	r2, #25
   12e12:	2101      	movs	r1, #1
   12e14:	4618      	mov	r0, r3
   12e16:	f7fe f9cf 	bl	111b8 <Gpio::Gpio(unsigned char, unsigned char)>
   12e1a:	9b01      	ldr	r3, [sp, #4]
   12e1c:	3368      	adds	r3, #104	; 0x68
   12e1e:	f240 62c1 	movw	r2, #1729	; 0x6c1
   12e22:	2100      	movs	r1, #0
   12e24:	4618      	mov	r0, r3
   12e26:	f006 f9d5 	bl	191d4 <memset>
  {
  }
   12e2a:	9c01      	ldr	r4, [sp, #4]
   12e2c:	462b      	mov	r3, r5
   12e2e:	4619      	mov	r1, r3
   12e30:	4803      	ldr	r0, [pc, #12]	; (12e40 <Ssd1306::Ssd1306()+0x8c>)
   12e32:	f003 fb39 	bl	164a8 <__cyg_profile_func_exit>
   12e36:	4623      	mov	r3, r4
   12e38:	4618      	mov	r0, r3
   12e3a:	b003      	add	sp, #12
   12e3c:	bd30      	pop	{r4, r5, pc}
   12e3e:	bf00      	nop
   12e40:	00012db5 	.word	0x00012db5
   12e44:	00019b7c 	.word	0x00019b7c

00012e48 <Ssd1306::GetWidth()>:
        dc_gpio_(1, 25),
        bitmap_{}
  {
  }

  size_t GetWidth() final override
   12e48:	b530      	push	{r4, r5, lr}
   12e4a:	b083      	sub	sp, #12
   12e4c:	4675      	mov	r5, lr
   12e4e:	9001      	str	r0, [sp, #4]
   12e50:	462b      	mov	r3, r5
   12e52:	4619      	mov	r1, r3
   12e54:	4806      	ldr	r0, [pc, #24]	; (12e70 <Ssd1306::GetWidth()+0x28>)
   12e56:	f003 fb13 	bl	16480 <__cyg_profile_func_enter>
  {
    return kWidth;
   12e5a:	2480      	movs	r4, #128	; 0x80
   12e5c:	462b      	mov	r3, r5
   12e5e:	4619      	mov	r1, r3
   12e60:	4803      	ldr	r0, [pc, #12]	; (12e70 <Ssd1306::GetWidth()+0x28>)
   12e62:	f003 fb21 	bl	164a8 <__cyg_profile_func_exit>
   12e66:	4623      	mov	r3, r4
  }
   12e68:	4618      	mov	r0, r3
   12e6a:	b003      	add	sp, #12
   12e6c:	bd30      	pop	{r4, r5, pc}
   12e6e:	bf00      	nop
   12e70:	00012e49 	.word	0x00012e49

00012e74 <Ssd1306::GetHeight()>:
  size_t GetHeight() final override
   12e74:	b530      	push	{r4, r5, lr}
   12e76:	b083      	sub	sp, #12
   12e78:	4675      	mov	r5, lr
   12e7a:	9001      	str	r0, [sp, #4]
   12e7c:	462b      	mov	r3, r5
   12e7e:	4619      	mov	r1, r3
   12e80:	4806      	ldr	r0, [pc, #24]	; (12e9c <Ssd1306::GetHeight()+0x28>)
   12e82:	f003 fafd 	bl	16480 <__cyg_profile_func_enter>
  {
    return kHeight;
   12e86:	2440      	movs	r4, #64	; 0x40
   12e88:	462b      	mov	r3, r5
   12e8a:	4619      	mov	r1, r3
   12e8c:	4803      	ldr	r0, [pc, #12]	; (12e9c <Ssd1306::GetHeight()+0x28>)
   12e8e:	f003 fb0b 	bl	164a8 <__cyg_profile_func_exit>
   12e92:	4623      	mov	r3, r4
  }
   12e94:	4618      	mov	r0, r3
   12e96:	b003      	add	sp, #12
   12e98:	bd30      	pop	{r4, r5, pc}
   12e9a:	bf00      	nop
   12e9c:	00012e75 	.word	0x00012e75

00012ea0 <Ssd1306::AvailableColors()>:
  Color_t AvailableColors() final override
   12ea0:	b510      	push	{r4, lr}
   12ea2:	b088      	sub	sp, #32
   12ea4:	4674      	mov	r4, lr
   12ea6:	9005      	str	r0, [sp, #20]
   12ea8:	4623      	mov	r3, r4
   12eaa:	4619      	mov	r1, r3
   12eac:	4815      	ldr	r0, [pc, #84]	; (12f04 <Ssd1306::AvailableColors()+0x64>)
   12eae:	f003 fae7 	bl	16480 <__cyg_profile_func_enter>
  {
    return Color_t(/* Red        = */ 1,
   12eb2:	a807      	add	r0, sp, #28
   12eb4:	2301      	movs	r3, #1
   12eb6:	9302      	str	r3, [sp, #8]
   12eb8:	2301      	movs	r3, #1
   12eba:	9301      	str	r3, [sp, #4]
   12ebc:	2301      	movs	r3, #1
   12ebe:	9300      	str	r3, [sp, #0]
   12ec0:	2301      	movs	r3, #1
   12ec2:	2201      	movs	r2, #1
   12ec4:	2101      	movs	r1, #1
   12ec6:	f7ff fea1 	bl	12c0c <PixelDisplayInterface::Color_t::Color_t(bool, bool, bool, unsigned char, unsigned char, bool)>
                   /* Green      = */ 1,
                   /* Blue       = */ 1,
                   /* Alpha      = */ 1,
                   /* Color Bits = */ 1,
                   /* Monochrome = */ true);
   12eca:	ab06      	add	r3, sp, #24
   12ecc:	aa07      	add	r2, sp, #28
   12ece:	6812      	ldr	r2, [r2, #0]
   12ed0:	4611      	mov	r1, r2
   12ed2:	8019      	strh	r1, [r3, #0]
   12ed4:	3302      	adds	r3, #2
   12ed6:	0c12      	lsrs	r2, r2, #16
   12ed8:	701a      	strb	r2, [r3, #0]
   12eda:	4623      	mov	r3, r4
   12edc:	4619      	mov	r1, r3
   12ede:	4809      	ldr	r0, [pc, #36]	; (12f04 <Ssd1306::AvailableColors()+0x64>)
   12ee0:	f003 fae2 	bl	164a8 <__cyg_profile_func_exit>
   12ee4:	2300      	movs	r3, #0
   12ee6:	f89d 2018 	ldrb.w	r2, [sp, #24]
   12eea:	f362 0307 	bfi	r3, r2, #0, #8
   12eee:	f89d 2019 	ldrb.w	r2, [sp, #25]
   12ef2:	f362 230f 	bfi	r3, r2, #8, #8
   12ef6:	f89d 201a 	ldrb.w	r2, [sp, #26]
   12efa:	f362 4317 	bfi	r3, r2, #16, #8
  }
   12efe:	4618      	mov	r0, r3
   12f00:	b008      	add	sp, #32
   12f02:	bd10      	pop	{r4, pc}
   12f04:	00012ea1 	.word	0x00012ea1

00012f08 <Ssd1306::Write(unsigned long, Ssd1306::Transaction, unsigned int)>:

  void Write(uint32_t data, Transaction transaction, size_t size = 1)
   12f08:	b510      	push	{r4, lr}
   12f0a:	b086      	sub	sp, #24
   12f0c:	4674      	mov	r4, lr
   12f0e:	9003      	str	r0, [sp, #12]
   12f10:	9102      	str	r1, [sp, #8]
   12f12:	9201      	str	r2, [sp, #4]
   12f14:	9300      	str	r3, [sp, #0]
   12f16:	4623      	mov	r3, r4
   12f18:	4619      	mov	r1, r3
   12f1a:	481e      	ldr	r0, [pc, #120]	; (12f94 <Ssd1306::Write(unsigned long, Ssd1306::Transaction, unsigned int)+0x8c>)
   12f1c:	f003 fab0 	bl	16480 <__cyg_profile_func_enter>
  {
    dc_->Set(static_cast<Gpio::State>(transaction));
   12f20:	9b03      	ldr	r3, [sp, #12]
   12f22:	68db      	ldr	r3, [r3, #12]
   12f24:	9a01      	ldr	r2, [sp, #4]
   12f26:	b2d2      	uxtb	r2, r2
   12f28:	4611      	mov	r1, r2
   12f2a:	4618      	mov	r0, r3
   12f2c:	f7fe fa84 	bl	11438 <Gpio::Set(GpioInterface::State)>
    cs_->SetLow();
   12f30:	9b03      	ldr	r3, [sp, #12]
   12f32:	689b      	ldr	r3, [r3, #8]
   12f34:	4618      	mov	r0, r3
   12f36:	f7fe fa4d 	bl	113d4 <Gpio::SetLow()>
    for (size_t i = 0; i < size; i++)
   12f3a:	2300      	movs	r3, #0
   12f3c:	9305      	str	r3, [sp, #20]
   12f3e:	9a05      	ldr	r2, [sp, #20]
   12f40:	9b00      	ldr	r3, [sp, #0]
   12f42:	429a      	cmp	r2, r3
   12f44:	d218      	bcs.n	12f78 <Ssd1306::Write(unsigned long, Ssd1306::Transaction, unsigned int)+0x70>
    {
      uint8_t send = static_cast<uint8_t>(data >> (((size - 1) - i) * 8));
   12f46:	9a00      	ldr	r2, [sp, #0]
   12f48:	9b05      	ldr	r3, [sp, #20]
   12f4a:	1ad3      	subs	r3, r2, r3
   12f4c:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
   12f50:	3b01      	subs	r3, #1
   12f52:	00db      	lsls	r3, r3, #3
   12f54:	9a02      	ldr	r2, [sp, #8]
   12f56:	fa22 f303 	lsr.w	r3, r2, r3
   12f5a:	f88d 3013 	strb.w	r3, [sp, #19]
      if (transaction == Transaction::kCommand)
      {
        LOG_DEBUG("send = 0x%X", send);
      }
      ssp_->Transfer(send);
   12f5e:	9b03      	ldr	r3, [sp, #12]
   12f60:	685b      	ldr	r3, [r3, #4]
   12f62:	f89d 2013 	ldrb.w	r2, [sp, #19]
   12f66:	b292      	uxth	r2, r2
   12f68:	4611      	mov	r1, r2
   12f6a:	4618      	mov	r0, r3
   12f6c:	f7ff fa34 	bl	123d8 <Ssp::Transfer(unsigned short)>
    for (size_t i = 0; i < size; i++)
   12f70:	9b05      	ldr	r3, [sp, #20]
   12f72:	3301      	adds	r3, #1
   12f74:	9305      	str	r3, [sp, #20]
   12f76:	e7e2      	b.n	12f3e <Ssd1306::Write(unsigned long, Ssd1306::Transaction, unsigned int)+0x36>
    }
    cs_->SetHigh();
   12f78:	9b03      	ldr	r3, [sp, #12]
   12f7a:	689b      	ldr	r3, [r3, #8]
   12f7c:	4618      	mov	r0, r3
   12f7e:	f7fe f9f7 	bl	11370 <Gpio::SetHigh()>
   12f82:	4623      	mov	r3, r4
   12f84:	4619      	mov	r1, r3
   12f86:	4803      	ldr	r0, [pc, #12]	; (12f94 <Ssd1306::Write(unsigned long, Ssd1306::Transaction, unsigned int)+0x8c>)
   12f88:	f003 fa8e 	bl	164a8 <__cyg_profile_func_exit>
  }
   12f8c:	bf00      	nop
   12f8e:	b006      	add	sp, #24
   12f90:	bd10      	pop	{r4, pc}
   12f92:	bf00      	nop
   12f94:	00012f09 	.word	0x00012f09

00012f98 <Ssd1306::InitializationPanel()>:

  void InitializationPanel()
   12f98:	b510      	push	{r4, lr}
   12f9a:	b082      	sub	sp, #8
   12f9c:	4674      	mov	r4, lr
   12f9e:	9001      	str	r0, [sp, #4]
   12fa0:	4623      	mov	r3, r4
   12fa2:	4619      	mov	r1, r3
   12fa4:	4837      	ldr	r0, [pc, #220]	; (13084 <Ssd1306::InitializationPanel()+0xec>)
   12fa6:	f003 fa6b 	bl	16480 <__cyg_profile_func_enter>
  {
    // This sequence of commands was found in:
    //   datasheets/OLED-display/ER-OLED0.96-1_Series_Datasheet.pdf, page 15

    // turn off oled panel
    Write(0xAE, Transaction::kCommand);
   12faa:	2301      	movs	r3, #1
   12fac:	2200      	movs	r2, #0
   12fae:	21ae      	movs	r1, #174	; 0xae
   12fb0:	9801      	ldr	r0, [sp, #4]
   12fb2:	f7ff ffa9 	bl	12f08 <Ssd1306::Write(unsigned long, Ssd1306::Transaction, unsigned int)>

    // set display clock divide ratio/oscillator frequency
    // set divide ratio
    Write(0xD5'80, Transaction::kCommand, 2);
   12fb6:	2302      	movs	r3, #2
   12fb8:	2200      	movs	r2, #0
   12fba:	f24d 5180 	movw	r1, #54656	; 0xd580
   12fbe:	9801      	ldr	r0, [sp, #4]
   12fc0:	f7ff ffa2 	bl	12f08 <Ssd1306::Write(unsigned long, Ssd1306::Transaction, unsigned int)>

    // set multiplex ratio(1 to 64)
    // 1/64 duty
    Write(0xA8'3F, Transaction::kCommand, 2);
   12fc4:	2302      	movs	r3, #2
   12fc6:	2200      	movs	r2, #0
   12fc8:	f64a 013f 	movw	r1, #43071	; 0xa83f
   12fcc:	9801      	ldr	r0, [sp, #4]
   12fce:	f7ff ff9b 	bl	12f08 <Ssd1306::Write(unsigned long, Ssd1306::Transaction, unsigned int)>

    // set display offset = not offset
    Write(0xD3'00, Transaction::kCommand, 2);
   12fd2:	2302      	movs	r3, #2
   12fd4:	2200      	movs	r2, #0
   12fd6:	f44f 4153 	mov.w	r1, #54016	; 0xd300
   12fda:	9801      	ldr	r0, [sp, #4]
   12fdc:	f7ff ff94 	bl	12f08 <Ssd1306::Write(unsigned long, Ssd1306::Transaction, unsigned int)>

    // Set display start line
    Write(0x40, Transaction::kCommand);
   12fe0:	2301      	movs	r3, #1
   12fe2:	2200      	movs	r2, #0
   12fe4:	2140      	movs	r1, #64	; 0x40
   12fe6:	9801      	ldr	r0, [sp, #4]
   12fe8:	f7ff ff8e 	bl	12f08 <Ssd1306::Write(unsigned long, Ssd1306::Transaction, unsigned int)>

    // Disable Charge Pump
    Write(0x8D'14, Transaction::kCommand, 2);
   12fec:	2302      	movs	r3, #2
   12fee:	2200      	movs	r2, #0
   12ff0:	f648 5114 	movw	r1, #36116	; 0x8d14
   12ff4:	9801      	ldr	r0, [sp, #4]
   12ff6:	f7ff ff87 	bl	12f08 <Ssd1306::Write(unsigned long, Ssd1306::Transaction, unsigned int)>

    // set segment re-map 128 to 0
    Write(0xA1, Transaction::kCommand);
   12ffa:	2301      	movs	r3, #1
   12ffc:	2200      	movs	r2, #0
   12ffe:	21a1      	movs	r1, #161	; 0xa1
   13000:	9801      	ldr	r0, [sp, #4]
   13002:	f7ff ff81 	bl	12f08 <Ssd1306::Write(unsigned long, Ssd1306::Transaction, unsigned int)>

    // Set COM Output Scan Direction 64 to 0
    Write(0xC8, Transaction::kCommand);
   13006:	2301      	movs	r3, #1
   13008:	2200      	movs	r2, #0
   1300a:	21c8      	movs	r1, #200	; 0xc8
   1300c:	9801      	ldr	r0, [sp, #4]
   1300e:	f7ff ff7b 	bl	12f08 <Ssd1306::Write(unsigned long, Ssd1306::Transaction, unsigned int)>

    // set com pins hardware configuration
    Write(0xDA'12, Transaction::kCommand, 2);
   13012:	2302      	movs	r3, #2
   13014:	2200      	movs	r2, #0
   13016:	f64d 2112 	movw	r1, #55826	; 0xda12
   1301a:	9801      	ldr	r0, [sp, #4]
   1301c:	f7ff ff74 	bl	12f08 <Ssd1306::Write(unsigned long, Ssd1306::Transaction, unsigned int)>

    // set contrast control register
    Write(0x81'CF, Transaction::kCommand, 2);
   13020:	2302      	movs	r3, #2
   13022:	2200      	movs	r2, #0
   13024:	f248 11cf 	movw	r1, #33231	; 0x81cf
   13028:	9801      	ldr	r0, [sp, #4]
   1302a:	f7ff ff6d 	bl	12f08 <Ssd1306::Write(unsigned long, Ssd1306::Transaction, unsigned int)>

    // Set pre-charge period
    Write(0xD9'F1, Transaction::kCommand, 2);
   1302e:	2302      	movs	r3, #2
   13030:	2200      	movs	r2, #0
   13032:	f64d 11f1 	movw	r1, #55793	; 0xd9f1
   13036:	9801      	ldr	r0, [sp, #4]
   13038:	f7ff ff66 	bl	12f08 <Ssd1306::Write(unsigned long, Ssd1306::Transaction, unsigned int)>

    // Set Vcomh
    Write(0xDB'40, Transaction::kCommand, 2);
   1303c:	2302      	movs	r3, #2
   1303e:	2200      	movs	r2, #0
   13040:	f64d 3140 	movw	r1, #56128	; 0xdb40
   13044:	9801      	ldr	r0, [sp, #4]
   13046:	f7ff ff5f 	bl	12f08 <Ssd1306::Write(unsigned long, Ssd1306::Transaction, unsigned int)>

    SetHorizontalAddressMode();
   1304a:	9801      	ldr	r0, [sp, #4]
   1304c:	f000 f85e 	bl	1310c <Ssd1306::SetHorizontalAddressMode()>

    // Enable entire display
    Write(0xA4, Transaction::kCommand);
   13050:	2301      	movs	r3, #1
   13052:	2200      	movs	r2, #0
   13054:	21a4      	movs	r1, #164	; 0xa4
   13056:	9801      	ldr	r0, [sp, #4]
   13058:	f7ff ff56 	bl	12f08 <Ssd1306::Write(unsigned long, Ssd1306::Transaction, unsigned int)>

    // Set display to normal colors
    Write(0xA6, Transaction::kCommand);
   1305c:	2301      	movs	r3, #1
   1305e:	2200      	movs	r2, #0
   13060:	21a6      	movs	r1, #166	; 0xa6
   13062:	9801      	ldr	r0, [sp, #4]
   13064:	f7ff ff50 	bl	12f08 <Ssd1306::Write(unsigned long, Ssd1306::Transaction, unsigned int)>

    // Set Display On
    Write(0xAF, Transaction::kCommand);
   13068:	2301      	movs	r3, #1
   1306a:	2200      	movs	r2, #0
   1306c:	21af      	movs	r1, #175	; 0xaf
   1306e:	9801      	ldr	r0, [sp, #4]
   13070:	f7ff ff4a 	bl	12f08 <Ssd1306::Write(unsigned long, Ssd1306::Transaction, unsigned int)>
   13074:	4623      	mov	r3, r4
   13076:	4619      	mov	r1, r3
   13078:	4802      	ldr	r0, [pc, #8]	; (13084 <Ssd1306::InitializationPanel()+0xec>)
   1307a:	f003 fa15 	bl	164a8 <__cyg_profile_func_exit>
  }
   1307e:	bf00      	nop
   13080:	b002      	add	sp, #8
   13082:	bd10      	pop	{r4, pc}
   13084:	00012f99 	.word	0x00012f99

00013088 <Ssd1306::Initialize()>:

  void Initialize() final override
   13088:	b510      	push	{r4, lr}
   1308a:	b084      	sub	sp, #16
   1308c:	4674      	mov	r4, lr
   1308e:	9003      	str	r0, [sp, #12]
   13090:	4623      	mov	r3, r4
   13092:	4619      	mov	r1, r3
   13094:	481c      	ldr	r0, [pc, #112]	; (13108 <Ssd1306::Initialize()+0x80>)
   13096:	f003 f9f3 	bl	16480 <__cyg_profile_func_enter>
  {
    cs_->SetAsOutput();
   1309a:	9b03      	ldr	r3, [sp, #12]
   1309c:	689b      	ldr	r3, [r3, #8]
   1309e:	4618      	mov	r0, r3
   130a0:	f7fe f906 	bl	112b0 <Gpio::SetAsOutput()>
    dc_->SetAsOutput();
   130a4:	9b03      	ldr	r3, [sp, #12]
   130a6:	68db      	ldr	r3, [r3, #12]
   130a8:	4618      	mov	r0, r3
   130aa:	f7fe f901 	bl	112b0 <Gpio::SetAsOutput()>
    cs_->SetHigh();
   130ae:	9b03      	ldr	r3, [sp, #12]
   130b0:	689b      	ldr	r3, [r3, #8]
   130b2:	4618      	mov	r0, r3
   130b4:	f7fe f95c 	bl	11370 <Gpio::SetHigh()>
    dc_->SetHigh();
   130b8:	9b03      	ldr	r3, [sp, #12]
   130ba:	68db      	ldr	r3, [r3, #12]
   130bc:	4618      	mov	r0, r3
   130be:	f7fe f957 	bl	11370 <Gpio::SetHigh()>

    ssp_->SetPeripheralMode(Ssp::MasterSlaveMode::kMaster, Ssp::FrameMode::kSpi,
   130c2:	9b03      	ldr	r3, [sp, #12]
   130c4:	6858      	ldr	r0, [r3, #4]
   130c6:	2307      	movs	r3, #7
   130c8:	2200      	movs	r2, #0
   130ca:	2100      	movs	r1, #0
   130cc:	f7ff fa30 	bl	12530 <Ssp::SetPeripheralMode(SspInterface::MasterSlaveMode, SspInterface::FrameMode, SspInterface::DataSize)>
                            Ssp::DataSize::kEight);
    // Set speed to 1Mhz by dividing by 1 * ClockFrequencyInMHz.
    ssp_->SetClock(false, false, 1, config::kSystemClockRateMhz/3);
   130d0:	9b03      	ldr	r3, [sp, #12]
   130d2:	6858      	ldr	r0, [r3, #4]
   130d4:	2310      	movs	r3, #16
   130d6:	9300      	str	r3, [sp, #0]
   130d8:	2301      	movs	r3, #1
   130da:	2200      	movs	r2, #0
   130dc:	2100      	movs	r1, #0
   130de:	f7ff fbdd 	bl	1289c <Ssp::SetClock(bool, bool, unsigned char, unsigned char)>
    ssp_->Initialize();
   130e2:	9b03      	ldr	r3, [sp, #12]
   130e4:	685b      	ldr	r3, [r3, #4]
   130e6:	4618      	mov	r0, r3
   130e8:	f7ff f8c8 	bl	1227c <Ssp::Initialize()>

    Clear();
   130ec:	9803      	ldr	r0, [sp, #12]
   130ee:	f000 f837 	bl	13160 <Ssd1306::Clear()>
    InitializationPanel();
   130f2:	9803      	ldr	r0, [sp, #12]
   130f4:	f7ff ff50 	bl	12f98 <Ssd1306::InitializationPanel()>
   130f8:	4623      	mov	r3, r4
   130fa:	4619      	mov	r1, r3
   130fc:	4802      	ldr	r0, [pc, #8]	; (13108 <Ssd1306::Initialize()+0x80>)
   130fe:	f003 f9d3 	bl	164a8 <__cyg_profile_func_exit>
  }
   13102:	bf00      	nop
   13104:	b004      	add	sp, #16
   13106:	bd10      	pop	{r4, pc}
   13108:	00013089 	.word	0x00013089

0001310c <Ssd1306::SetHorizontalAddressMode()>:

  void SetHorizontalAddressMode()
   1310c:	b510      	push	{r4, lr}
   1310e:	b082      	sub	sp, #8
   13110:	4674      	mov	r4, lr
   13112:	9001      	str	r0, [sp, #4]
   13114:	4623      	mov	r3, r4
   13116:	4619      	mov	r1, r3
   13118:	480e      	ldr	r0, [pc, #56]	; (13154 <Ssd1306::SetHorizontalAddressMode()+0x48>)
   1311a:	f003 f9b1 	bl	16480 <__cyg_profile_func_enter>
  {
    // Set Addressing mode
    // Addressing mode = Horizontal Mode (0b00)
    Write(0x20'00, Transaction::kCommand, 2);
   1311e:	2302      	movs	r3, #2
   13120:	2200      	movs	r2, #0
   13122:	f44f 5100 	mov.w	r1, #8192	; 0x2000
   13126:	9801      	ldr	r0, [sp, #4]
   13128:	f7ff feee 	bl	12f08 <Ssd1306::Write(unsigned long, Ssd1306::Transaction, unsigned int)>
    // Set Column Addresses
    // Set Column Address start = Column 0
    // Set Column Address start = Column 127
    Write(0x21'00'7F, Transaction::kCommand, 3);
   1312c:	2303      	movs	r3, #3
   1312e:	2200      	movs	r2, #0
   13130:	4909      	ldr	r1, [pc, #36]	; (13158 <Ssd1306::SetHorizontalAddressMode()+0x4c>)
   13132:	9801      	ldr	r0, [sp, #4]
   13134:	f7ff fee8 	bl	12f08 <Ssd1306::Write(unsigned long, Ssd1306::Transaction, unsigned int)>
    // Set Page Addresses
    // Set Page Address start = Page 0
    // Set Page Address start = Page 7
    Write(0x22'00'07, Transaction::kCommand, 3);
   13138:	2303      	movs	r3, #3
   1313a:	2200      	movs	r2, #0
   1313c:	4907      	ldr	r1, [pc, #28]	; (1315c <Ssd1306::SetHorizontalAddressMode()+0x50>)
   1313e:	9801      	ldr	r0, [sp, #4]
   13140:	f7ff fee2 	bl	12f08 <Ssd1306::Write(unsigned long, Ssd1306::Transaction, unsigned int)>
   13144:	4623      	mov	r3, r4
   13146:	4619      	mov	r1, r3
   13148:	4802      	ldr	r0, [pc, #8]	; (13154 <Ssd1306::SetHorizontalAddressMode()+0x48>)
   1314a:	f003 f9ad 	bl	164a8 <__cyg_profile_func_exit>
  }
   1314e:	bf00      	nop
   13150:	b002      	add	sp, #8
   13152:	bd10      	pop	{r4, pc}
   13154:	0001310d 	.word	0x0001310d
   13158:	0021007f 	.word	0x0021007f
   1315c:	00220007 	.word	0x00220007

00013160 <Ssd1306::Clear()>:
  /// Clears the internal bitmap_ to zero (or a user defined clear_value)
  void Clear() final override
   13160:	b510      	push	{r4, lr}
   13162:	b082      	sub	sp, #8
   13164:	4674      	mov	r4, lr
   13166:	9001      	str	r0, [sp, #4]
   13168:	4623      	mov	r3, r4
   1316a:	4619      	mov	r1, r3
   1316c:	4809      	ldr	r0, [pc, #36]	; (13194 <Ssd1306::Clear()+0x34>)
   1316e:	f003 f987 	bl	16480 <__cyg_profile_func_enter>
  {
    memset(bitmap_, 0x00, sizeof(bitmap_));
   13172:	9b01      	ldr	r3, [sp, #4]
   13174:	3368      	adds	r3, #104	; 0x68
   13176:	f240 62c1 	movw	r2, #1729	; 0x6c1
   1317a:	2100      	movs	r1, #0
   1317c:	4618      	mov	r0, r3
   1317e:	f006 f829 	bl	191d4 <memset>
   13182:	4623      	mov	r3, r4
   13184:	4619      	mov	r1, r3
   13186:	4803      	ldr	r0, [pc, #12]	; (13194 <Ssd1306::Clear()+0x34>)
   13188:	f003 f98e 	bl	164a8 <__cyg_profile_func_exit>
  }
   1318c:	bf00      	nop
   1318e:	b002      	add	sp, #8
   13190:	bd10      	pop	{r4, pc}
   13192:	bf00      	nop
   13194:	00013161 	.word	0x00013161

00013198 <Ssd1306::DrawPixel(long, long, PixelDisplayInterface::Color_t)>:
  void Fill()
  {
    memset(bitmap_, 0xFF, sizeof(bitmap_));
  }
  void DrawPixel(int32_t x, int32_t y, Color_t color) final override
   13198:	b510      	push	{r4, lr}
   1319a:	b08c      	sub	sp, #48	; 0x30
   1319c:	4674      	mov	r4, lr
   1319e:	9003      	str	r0, [sp, #12]
   131a0:	9102      	str	r1, [sp, #8]
   131a2:	9201      	str	r2, [sp, #4]
   131a4:	9300      	str	r3, [sp, #0]
   131a6:	4623      	mov	r3, r4
   131a8:	4619      	mov	r1, r3
   131aa:	481f      	ldr	r0, [pc, #124]	; (13228 <Ssd1306::DrawPixel(long, long, PixelDisplayInterface::Color_t)+0x90>)
   131ac:	f003 f968 	bl	16480 <__cyg_profile_func_enter>
  {
    // The 3 least significant bits hold the bit position within the byte
    uint32_t bit_position = y & 0b111;
   131b0:	9b01      	ldr	r3, [sp, #4]
   131b2:	f003 0307 	and.w	r3, r3, #7
   131b6:	930b      	str	r3, [sp, #44]	; 0x2c
    // Each byte makes up a vertical column.
    // Shifting by 3, which also divides by 8 (the 8-bits of a column), will
    // be the row that we need to edit.
    uint32_t row = y >> 3;
   131b8:	9b01      	ldr	r3, [sp, #4]
   131ba:	10db      	asrs	r3, r3, #3
   131bc:	930a      	str	r3, [sp, #40]	; 0x28
    // Mask to clear the bit
    uint32_t clear_mask = ~(1 << bit_position);
   131be:	2201      	movs	r2, #1
   131c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   131c2:	fa02 f303 	lsl.w	r3, r2, r3
   131c6:	43db      	mvns	r3, r3
   131c8:	9309      	str	r3, [sp, #36]	; 0x24
    // Mask to set the bit, if color.alpha != 0
    bool pixel_is_on  = (color.alpha != 0);
   131ca:	f89d 3002 	ldrb.w	r3, [sp, #2]
   131ce:	2b00      	cmp	r3, #0
   131d0:	bf14      	ite	ne
   131d2:	2301      	movne	r3, #1
   131d4:	2300      	moveq	r3, #0
   131d6:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
    uint32_t set_mask = pixel_is_on << bit_position;
   131da:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
   131de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   131e0:	fa02 f303 	lsl.w	r3, r2, r3
   131e4:	9307      	str	r3, [sp, #28]
    // Address of the pixel column to edit
    uint8_t * pixel_column = &(bitmap_[row][x]);
   131e6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   131e8:	4613      	mov	r3, r2
   131ea:	015b      	lsls	r3, r3, #5
   131ec:	4413      	add	r3, r2
   131ee:	009b      	lsls	r3, r3, #2
   131f0:	4413      	add	r3, r2
   131f2:	9a02      	ldr	r2, [sp, #8]
   131f4:	4413      	add	r3, r2
   131f6:	3368      	adds	r3, #104	; 0x68
   131f8:	9a03      	ldr	r2, [sp, #12]
   131fa:	4413      	add	r3, r2
   131fc:	9306      	str	r3, [sp, #24]
    // Read pixel column and update the pixel
    uint32_t result = (*pixel_column & clear_mask) | set_mask;
   131fe:	9b06      	ldr	r3, [sp, #24]
   13200:	781b      	ldrb	r3, [r3, #0]
   13202:	461a      	mov	r2, r3
   13204:	9b09      	ldr	r3, [sp, #36]	; 0x24
   13206:	4013      	ands	r3, r2
   13208:	9a07      	ldr	r2, [sp, #28]
   1320a:	4313      	orrs	r3, r2
   1320c:	9305      	str	r3, [sp, #20]
    // Update pixel with the result of this operation
    *pixel_column = static_cast<uint8_t>(result);
   1320e:	9b05      	ldr	r3, [sp, #20]
   13210:	b2da      	uxtb	r2, r3
   13212:	9b06      	ldr	r3, [sp, #24]
   13214:	701a      	strb	r2, [r3, #0]
   13216:	4623      	mov	r3, r4
   13218:	4619      	mov	r1, r3
   1321a:	4803      	ldr	r0, [pc, #12]	; (13228 <Ssd1306::DrawPixel(long, long, PixelDisplayInterface::Color_t)+0x90>)
   1321c:	f003 f944 	bl	164a8 <__cyg_profile_func_exit>
  }
   13220:	bf00      	nop
   13222:	b00c      	add	sp, #48	; 0x30
   13224:	bd10      	pop	{r4, pc}
   13226:	bf00      	nop
   13228:	00013199 	.word	0x00013199

0001322c <Ssd1306::Update()>:
  /// Writes internal bitmap_ to the screen
  void Update() final override
   1322c:	b510      	push	{r4, lr}
   1322e:	b084      	sub	sp, #16
   13230:	4674      	mov	r4, lr
   13232:	9001      	str	r0, [sp, #4]
   13234:	4623      	mov	r3, r4
   13236:	4619      	mov	r1, r3
   13238:	4818      	ldr	r0, [pc, #96]	; (1329c <Ssd1306::Update()+0x70>)
   1323a:	f003 f921 	bl	16480 <__cyg_profile_func_enter>
  {
    SetHorizontalAddressMode();
   1323e:	9801      	ldr	r0, [sp, #4]
   13240:	f7ff ff64 	bl	1310c <Ssd1306::SetHorizontalAddressMode()>
    for (size_t row = 0; row < kRows; row++)
   13244:	2300      	movs	r3, #0
   13246:	9303      	str	r3, [sp, #12]
   13248:	9b03      	ldr	r3, [sp, #12]
   1324a:	2b07      	cmp	r3, #7
   1324c:	d81e      	bhi.n	1328c <Ssd1306::Update()+0x60>
    {
      for (size_t column = 0; column < kColumns; column++)
   1324e:	2300      	movs	r3, #0
   13250:	9302      	str	r3, [sp, #8]
   13252:	9b02      	ldr	r3, [sp, #8]
   13254:	2b7f      	cmp	r3, #127	; 0x7f
   13256:	d815      	bhi.n	13284 <Ssd1306::Update()+0x58>
      {
        Write(bitmap_[row][column], Transaction::kData);
   13258:	9901      	ldr	r1, [sp, #4]
   1325a:	9a03      	ldr	r2, [sp, #12]
   1325c:	4613      	mov	r3, r2
   1325e:	015b      	lsls	r3, r3, #5
   13260:	4413      	add	r3, r2
   13262:	009b      	lsls	r3, r3, #2
   13264:	4413      	add	r3, r2
   13266:	18ca      	adds	r2, r1, r3
   13268:	9b02      	ldr	r3, [sp, #8]
   1326a:	4413      	add	r3, r2
   1326c:	3368      	adds	r3, #104	; 0x68
   1326e:	781b      	ldrb	r3, [r3, #0]
   13270:	4619      	mov	r1, r3
   13272:	2301      	movs	r3, #1
   13274:	2201      	movs	r2, #1
   13276:	9801      	ldr	r0, [sp, #4]
   13278:	f7ff fe46 	bl	12f08 <Ssd1306::Write(unsigned long, Ssd1306::Transaction, unsigned int)>
      for (size_t column = 0; column < kColumns; column++)
   1327c:	9b02      	ldr	r3, [sp, #8]
   1327e:	3301      	adds	r3, #1
   13280:	9302      	str	r3, [sp, #8]
   13282:	e7e6      	b.n	13252 <Ssd1306::Update()+0x26>
    for (size_t row = 0; row < kRows; row++)
   13284:	9b03      	ldr	r3, [sp, #12]
   13286:	3301      	adds	r3, #1
   13288:	9303      	str	r3, [sp, #12]
   1328a:	e7dd      	b.n	13248 <Ssd1306::Update()+0x1c>
   1328c:	4623      	mov	r3, r4
   1328e:	4619      	mov	r1, r3
   13290:	4802      	ldr	r0, [pc, #8]	; (1329c <Ssd1306::Update()+0x70>)
   13292:	f003 f909 	bl	164a8 <__cyg_profile_func_exit>
      }
    }
  }
   13296:	bf00      	nop
   13298:	b004      	add	sp, #16
   1329a:	bd10      	pop	{r4, pc}
   1329c:	0001322d 	.word	0x0001322d

000132a0 <Graphics::Graphics(PixelDisplayInterface*)>:
#include "utility/log.hpp"

class Graphics
{
 public:
  explicit Graphics(PixelDisplayInterface * display)
   132a0:	b530      	push	{r4, r5, lr}
   132a2:	b083      	sub	sp, #12
   132a4:	4675      	mov	r5, lr
   132a6:	9001      	str	r0, [sp, #4]
   132a8:	9100      	str	r1, [sp, #0]
   132aa:	462b      	mov	r3, r5
   132ac:	4619      	mov	r1, r3
   132ae:	481e      	ldr	r0, [pc, #120]	; (13328 <Graphics::Graphics(PixelDisplayInterface*)+0x88>)
   132b0:	f003 f8e6 	bl	16480 <__cyg_profile_func_enter>
      : display_(display), color_(), width_(0), height_(0)
   132b4:	9b01      	ldr	r3, [sp, #4]
   132b6:	9a00      	ldr	r2, [sp, #0]
   132b8:	601a      	str	r2, [r3, #0]
   132ba:	9b01      	ldr	r3, [sp, #4]
   132bc:	3304      	adds	r3, #4
   132be:	4618      	mov	r0, r3
   132c0:	f7ff fcee 	bl	12ca0 <PixelDisplayInterface::Color_t::Color_t()>
   132c4:	9b01      	ldr	r3, [sp, #4]
   132c6:	2200      	movs	r2, #0
   132c8:	609a      	str	r2, [r3, #8]
   132ca:	9b01      	ldr	r3, [sp, #4]
   132cc:	2200      	movs	r2, #0
   132ce:	60da      	str	r2, [r3, #12]
  {
    width_  = display->GetWidth();
   132d0:	9b00      	ldr	r3, [sp, #0]
   132d2:	681b      	ldr	r3, [r3, #0]
   132d4:	681b      	ldr	r3, [r3, #0]
   132d6:	9800      	ldr	r0, [sp, #0]
   132d8:	4798      	blx	r3
   132da:	4602      	mov	r2, r0
   132dc:	9b01      	ldr	r3, [sp, #4]
   132de:	609a      	str	r2, [r3, #8]
    height_ = display->GetHeight();
   132e0:	9b00      	ldr	r3, [sp, #0]
   132e2:	681b      	ldr	r3, [r3, #0]
   132e4:	3304      	adds	r3, #4
   132e6:	681b      	ldr	r3, [r3, #0]
   132e8:	9800      	ldr	r0, [sp, #0]
   132ea:	4798      	blx	r3
   132ec:	4602      	mov	r2, r0
   132ee:	9b01      	ldr	r3, [sp, #4]
   132f0:	60da      	str	r2, [r3, #12]
    color_  = display->AvailableColors();
   132f2:	9b00      	ldr	r3, [sp, #0]
   132f4:	681b      	ldr	r3, [r3, #0]
   132f6:	3308      	adds	r3, #8
   132f8:	681b      	ldr	r3, [r3, #0]
   132fa:	9c01      	ldr	r4, [sp, #4]
   132fc:	9800      	ldr	r0, [sp, #0]
   132fe:	4798      	blx	r3
   13300:	4603      	mov	r3, r0
   13302:	461a      	mov	r2, r3
   13304:	7122      	strb	r2, [r4, #4]
   13306:	f3c3 2207 	ubfx	r2, r3, #8, #8
   1330a:	7162      	strb	r2, [r4, #5]
   1330c:	f3c3 4307 	ubfx	r3, r3, #16, #8
   13310:	71a3      	strb	r3, [r4, #6]
  }
   13312:	9c01      	ldr	r4, [sp, #4]
   13314:	462b      	mov	r3, r5
   13316:	4619      	mov	r1, r3
   13318:	4803      	ldr	r0, [pc, #12]	; (13328 <Graphics::Graphics(PixelDisplayInterface*)+0x88>)
   1331a:	f003 f8c5 	bl	164a8 <__cyg_profile_func_exit>
   1331e:	4623      	mov	r3, r4
   13320:	4618      	mov	r0, r3
   13322:	b003      	add	sp, #12
   13324:	bd30      	pop	{r4, r5, pc}
   13326:	bf00      	nop
   13328:	000132a1 	.word	0x000132a1

0001332c <Graphics::Initialize()>:
  void SetColor(PixelDisplayInterface::Color_t color)
  {
    color_ = color;
  }

  void Initialize()
   1332c:	b510      	push	{r4, lr}
   1332e:	b082      	sub	sp, #8
   13330:	4674      	mov	r4, lr
   13332:	9001      	str	r0, [sp, #4]
   13334:	4623      	mov	r3, r4
   13336:	4619      	mov	r1, r3
   13338:	480e      	ldr	r0, [pc, #56]	; (13374 <Graphics::Initialize()+0x48>)
   1333a:	f003 f8a1 	bl	16480 <__cyg_profile_func_enter>
  {
    display_->Initialize();
   1333e:	9b01      	ldr	r3, [sp, #4]
   13340:	681a      	ldr	r2, [r3, #0]
   13342:	9b01      	ldr	r3, [sp, #4]
   13344:	681b      	ldr	r3, [r3, #0]
   13346:	681b      	ldr	r3, [r3, #0]
   13348:	330c      	adds	r3, #12
   1334a:	681b      	ldr	r3, [r3, #0]
   1334c:	4610      	mov	r0, r2
   1334e:	4798      	blx	r3
    display_->Enable();
   13350:	9b01      	ldr	r3, [sp, #4]
   13352:	681a      	ldr	r2, [r3, #0]
   13354:	9b01      	ldr	r3, [sp, #4]
   13356:	681b      	ldr	r3, [r3, #0]
   13358:	681b      	ldr	r3, [r3, #0]
   1335a:	3310      	adds	r3, #16
   1335c:	681b      	ldr	r3, [r3, #0]
   1335e:	4610      	mov	r0, r2
   13360:	4798      	blx	r3
   13362:	4623      	mov	r3, r4
   13364:	4619      	mov	r1, r3
   13366:	4803      	ldr	r0, [pc, #12]	; (13374 <Graphics::Initialize()+0x48>)
   13368:	f003 f89e 	bl	164a8 <__cyg_profile_func_exit>
  }
   1336c:	bf00      	nop
   1336e:	b002      	add	sp, #8
   13370:	bd10      	pop	{r4, pc}
   13372:	bf00      	nop
   13374:	0001332d 	.word	0x0001332d

00013378 <Graphics::DrawCharacter(long, long, char, bool)>:
    // |                    |
    // ----------------------
    DrawVerticalLine(x + width, y, height);
  }

  void DrawCharacter(int32_t x0, int32_t y0, char letter,
   13378:	b510      	push	{r4, lr}
   1337a:	b08e      	sub	sp, #56	; 0x38
   1337c:	4674      	mov	r4, lr
   1337e:	9007      	str	r0, [sp, #28]
   13380:	9106      	str	r1, [sp, #24]
   13382:	9205      	str	r2, [sp, #20]
   13384:	f88d 3013 	strb.w	r3, [sp, #19]
   13388:	4623      	mov	r3, r4
   1338a:	4619      	mov	r1, r3
   1338c:	4837      	ldr	r0, [pc, #220]	; (1346c <Graphics::DrawCharacter(long, long, char, bool)+0xf4>)
   1338e:	f003 f877 	bl	16480 <__cyg_profile_func_enter>
                     bool fill_background = true)
  {
    int32_t letter_position = static_cast<int32_t>(letter);
   13392:	f89d 3013 	ldrb.w	r3, [sp, #19]
   13396:	930b      	str	r3, [sp, #44]	; 0x2c

    PixelDisplayInterface::Color_t foreground = color_;
   13398:	9a07      	ldr	r2, [sp, #28]
   1339a:	ab0a      	add	r3, sp, #40	; 0x28
   1339c:	3204      	adds	r2, #4
   1339e:	6812      	ldr	r2, [r2, #0]
   133a0:	4611      	mov	r1, r2
   133a2:	8019      	strh	r1, [r3, #0]
   133a4:	3302      	adds	r3, #2
   133a6:	0c12      	lsrs	r2, r2, #16
   133a8:	701a      	strb	r2, [r3, #0]
    PixelDisplayInterface::Color_t background =
        PixelDisplayInterface::Color_t(0, 0, 0, 0, 1, true);
   133aa:	a809      	add	r0, sp, #36	; 0x24
   133ac:	2301      	movs	r3, #1
   133ae:	9302      	str	r3, [sp, #8]
   133b0:	2301      	movs	r3, #1
   133b2:	9301      	str	r3, [sp, #4]
   133b4:	2300      	movs	r3, #0
   133b6:	9300      	str	r3, [sp, #0]
   133b8:	2300      	movs	r3, #0
   133ba:	2200      	movs	r2, #0
   133bc:	2100      	movs	r1, #0
   133be:	f7ff fc25 	bl	12c0c <PixelDisplayInterface::Color_t::Color_t(bool, bool, bool, unsigned char, unsigned char, bool)>

    for (int32_t y = 0; y < 8; y++)
   133c2:	2300      	movs	r3, #0
   133c4:	930d      	str	r3, [sp, #52]	; 0x34
   133c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   133c8:	2b07      	cmp	r3, #7
   133ca:	dc3d      	bgt.n	13448 <Graphics::DrawCharacter(long, long, char, bool)+0xd0>
    {
      for (int32_t x = 0; x < 8; x++)
   133cc:	2300      	movs	r3, #0
   133ce:	930c      	str	r3, [sp, #48]	; 0x30
   133d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   133d2:	2b07      	cmp	r3, #7
   133d4:	dc34      	bgt.n	13440 <Graphics::DrawCharacter(long, long, char, bool)+0xc8>
      {
        if (font8x8_basic[letter_position][y] & (1 << x))
   133d6:	4a26      	ldr	r2, [pc, #152]	; (13470 <Graphics::DrawCharacter(long, long, char, bool)+0xf8>)
   133d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   133da:	00db      	lsls	r3, r3, #3
   133dc:	441a      	add	r2, r3
   133de:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   133e0:	4413      	add	r3, r2
   133e2:	781b      	ldrb	r3, [r3, #0]
   133e4:	461a      	mov	r2, r3
   133e6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   133e8:	fa42 f303 	asr.w	r3, r2, r3
   133ec:	f003 0301 	and.w	r3, r3, #1
   133f0:	2b00      	cmp	r3, #0
   133f2:	d009      	beq.n	13408 <Graphics::DrawCharacter(long, long, char, bool)+0x90>
        {
          color_ = foreground;
   133f4:	9b07      	ldr	r3, [sp, #28]
   133f6:	3304      	adds	r3, #4
   133f8:	aa0a      	add	r2, sp, #40	; 0x28
   133fa:	6812      	ldr	r2, [r2, #0]
   133fc:	4611      	mov	r1, r2
   133fe:	8019      	strh	r1, [r3, #0]
   13400:	3302      	adds	r3, #2
   13402:	0c12      	lsrs	r2, r2, #16
   13404:	701a      	strb	r2, [r3, #0]
   13406:	e00c      	b.n	13422 <Graphics::DrawCharacter(long, long, char, bool)+0xaa>
        }
        else if (fill_background)
   13408:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
   1340c:	2b00      	cmp	r3, #0
   1340e:	d008      	beq.n	13422 <Graphics::DrawCharacter(long, long, char, bool)+0xaa>
        {
          color_ = background;
   13410:	9b07      	ldr	r3, [sp, #28]
   13412:	3304      	adds	r3, #4
   13414:	aa09      	add	r2, sp, #36	; 0x24
   13416:	6812      	ldr	r2, [r2, #0]
   13418:	4611      	mov	r1, r2
   1341a:	8019      	strh	r1, [r3, #0]
   1341c:	3302      	adds	r3, #2
   1341e:	0c12      	lsrs	r2, r2, #16
   13420:	701a      	strb	r2, [r3, #0]
        }
        DrawPixel(x0 + x, y0 + y);
   13422:	9a06      	ldr	r2, [sp, #24]
   13424:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   13426:	4413      	add	r3, r2
   13428:	4619      	mov	r1, r3
   1342a:	9a05      	ldr	r2, [sp, #20]
   1342c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1342e:	4413      	add	r3, r2
   13430:	461a      	mov	r2, r3
   13432:	9807      	ldr	r0, [sp, #28]
   13434:	f000 f81e 	bl	13474 <Graphics::DrawPixel(unsigned long, unsigned long)>
      for (int32_t x = 0; x < 8; x++)
   13438:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1343a:	3301      	adds	r3, #1
   1343c:	930c      	str	r3, [sp, #48]	; 0x30
   1343e:	e7c7      	b.n	133d0 <Graphics::DrawCharacter(long, long, char, bool)+0x58>
    for (int32_t y = 0; y < 8; y++)
   13440:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   13442:	3301      	adds	r3, #1
   13444:	930d      	str	r3, [sp, #52]	; 0x34
   13446:	e7be      	b.n	133c6 <Graphics::DrawCharacter(long, long, char, bool)+0x4e>
      }
    }
    color_ = foreground;
   13448:	9b07      	ldr	r3, [sp, #28]
   1344a:	3304      	adds	r3, #4
   1344c:	aa0a      	add	r2, sp, #40	; 0x28
   1344e:	6812      	ldr	r2, [r2, #0]
   13450:	4611      	mov	r1, r2
   13452:	8019      	strh	r1, [r3, #0]
   13454:	3302      	adds	r3, #2
   13456:	0c12      	lsrs	r2, r2, #16
   13458:	701a      	strb	r2, [r3, #0]
   1345a:	4623      	mov	r3, r4
   1345c:	4619      	mov	r1, r3
   1345e:	4803      	ldr	r0, [pc, #12]	; (1346c <Graphics::DrawCharacter(long, long, char, bool)+0xf4>)
   13460:	f003 f822 	bl	164a8 <__cyg_profile_func_exit>
  }
   13464:	bf00      	nop
   13466:	b00e      	add	sp, #56	; 0x38
   13468:	bd10      	pop	{r4, pc}
   1346a:	bf00      	nop
   1346c:	00013379 	.word	0x00013379
   13470:	1000005c 	.word	0x1000005c

00013474 <Graphics::DrawPixel(unsigned long, unsigned long)>:

  void DrawPixel(uint32_t x, uint32_t y)
   13474:	b530      	push	{r4, r5, lr}
   13476:	b085      	sub	sp, #20
   13478:	4675      	mov	r5, lr
   1347a:	9003      	str	r0, [sp, #12]
   1347c:	9102      	str	r1, [sp, #8]
   1347e:	9201      	str	r2, [sp, #4]
   13480:	462b      	mov	r3, r5
   13482:	4619      	mov	r1, r3
   13484:	4810      	ldr	r0, [pc, #64]	; (134c8 <Graphics::DrawPixel(unsigned long, unsigned long)+0x54>)
   13486:	f002 fffb 	bl	16480 <__cyg_profile_func_enter>
  {
    // Pixels outside of the bounds of the screen will not be drawn.
    if (x <= width_ && y <= height_)
   1348a:	9b03      	ldr	r3, [sp, #12]
   1348c:	689b      	ldr	r3, [r3, #8]
   1348e:	9a02      	ldr	r2, [sp, #8]
   13490:	429a      	cmp	r2, r3
   13492:	d810      	bhi.n	134b6 <Graphics::DrawPixel(unsigned long, unsigned long)+0x42>
   13494:	9b03      	ldr	r3, [sp, #12]
   13496:	68db      	ldr	r3, [r3, #12]
   13498:	9a01      	ldr	r2, [sp, #4]
   1349a:	429a      	cmp	r2, r3
   1349c:	d80b      	bhi.n	134b6 <Graphics::DrawPixel(unsigned long, unsigned long)+0x42>
    {
      display_->DrawPixel(x, y, color_);
   1349e:	9b03      	ldr	r3, [sp, #12]
   134a0:	6818      	ldr	r0, [r3, #0]
   134a2:	9b03      	ldr	r3, [sp, #12]
   134a4:	681b      	ldr	r3, [r3, #0]
   134a6:	681b      	ldr	r3, [r3, #0]
   134a8:	331c      	adds	r3, #28
   134aa:	681c      	ldr	r4, [r3, #0]
   134ac:	9902      	ldr	r1, [sp, #8]
   134ae:	9a01      	ldr	r2, [sp, #4]
   134b0:	9b03      	ldr	r3, [sp, #12]
   134b2:	685b      	ldr	r3, [r3, #4]
   134b4:	47a0      	blx	r4
   134b6:	462b      	mov	r3, r5
   134b8:	4619      	mov	r1, r3
   134ba:	4803      	ldr	r0, [pc, #12]	; (134c8 <Graphics::DrawPixel(unsigned long, unsigned long)+0x54>)
   134bc:	f002 fff4 	bl	164a8 <__cyg_profile_func_exit>
    }
  }
   134c0:	bf00      	nop
   134c2:	b005      	add	sp, #20
   134c4:	bd30      	pop	{r4, r5, pc}
   134c6:	bf00      	nop
   134c8:	00013475 	.word	0x00013475

000134cc <Graphics::Update()>:
  void Update()
   134cc:	b510      	push	{r4, lr}
   134ce:	b082      	sub	sp, #8
   134d0:	4674      	mov	r4, lr
   134d2:	9001      	str	r0, [sp, #4]
   134d4:	4623      	mov	r3, r4
   134d6:	4619      	mov	r1, r3
   134d8:	4809      	ldr	r0, [pc, #36]	; (13500 <Graphics::Update()+0x34>)
   134da:	f002 ffd1 	bl	16480 <__cyg_profile_func_enter>
  {
    display_->Update();
   134de:	9b01      	ldr	r3, [sp, #4]
   134e0:	681a      	ldr	r2, [r3, #0]
   134e2:	9b01      	ldr	r3, [sp, #4]
   134e4:	681b      	ldr	r3, [r3, #0]
   134e6:	681b      	ldr	r3, [r3, #0]
   134e8:	3320      	adds	r3, #32
   134ea:	681b      	ldr	r3, [r3, #0]
   134ec:	4610      	mov	r0, r2
   134ee:	4798      	blx	r3
   134f0:	4623      	mov	r3, r4
   134f2:	4619      	mov	r1, r3
   134f4:	4802      	ldr	r0, [pc, #8]	; (13500 <Graphics::Update()+0x34>)
   134f6:	f002 ffd7 	bl	164a8 <__cyg_profile_func_exit>
  }
   134fa:	bf00      	nop
   134fc:	b002      	add	sp, #8
   134fe:	bd10      	pop	{r4, pc}
   13500:	000134cd 	.word	0x000134cd

00013504 <Graphics::Clear()>:
  void Clear()
   13504:	b510      	push	{r4, lr}
   13506:	b082      	sub	sp, #8
   13508:	4674      	mov	r4, lr
   1350a:	9001      	str	r0, [sp, #4]
   1350c:	4623      	mov	r3, r4
   1350e:	4619      	mov	r1, r3
   13510:	4809      	ldr	r0, [pc, #36]	; (13538 <Graphics::Clear()+0x34>)
   13512:	f002 ffb5 	bl	16480 <__cyg_profile_func_enter>
  {
    display_->Clear();
   13516:	9b01      	ldr	r3, [sp, #4]
   13518:	681a      	ldr	r2, [r3, #0]
   1351a:	9b01      	ldr	r3, [sp, #4]
   1351c:	681b      	ldr	r3, [r3, #0]
   1351e:	681b      	ldr	r3, [r3, #0]
   13520:	3318      	adds	r3, #24
   13522:	681b      	ldr	r3, [r3, #0]
   13524:	4610      	mov	r0, r2
   13526:	4798      	blx	r3
   13528:	4623      	mov	r3, r4
   1352a:	4619      	mov	r1, r3
   1352c:	4802      	ldr	r0, [pc, #8]	; (13538 <Graphics::Clear()+0x34>)
   1352e:	f002 ffbb 	bl	164a8 <__cyg_profile_func_exit>
  }
   13532:	bf00      	nop
   13534:	b002      	add	sp, #8
   13536:	bd10      	pop	{r4, pc}
   13538:	00013505 	.word	0x00013505

0001353c <OledTerminal::Initialize()>:
  static constexpr size_t kCharacterHeight = 8;
  static constexpr size_t kCharacterWidth  = 8;
  static constexpr size_t kMaxColumns      = Ssd1306::kWidth / kCharacterWidth;
  static constexpr size_t kMaxRows = Ssd1306::kHeight / kCharacterHeight;

  void Initialize()
   1353c:	b510      	push	{r4, lr}
   1353e:	b082      	sub	sp, #8
   13540:	4674      	mov	r4, lr
   13542:	9001      	str	r0, [sp, #4]
   13544:	4623      	mov	r3, r4
   13546:	4619      	mov	r1, r3
   13548:	480e      	ldr	r0, [pc, #56]	; (13584 <OledTerminal::Initialize()+0x48>)
   1354a:	f002 ff99 	bl	16480 <__cyg_profile_func_enter>
  {
    graphics_.Initialize();
   1354e:	9b01      	ldr	r3, [sp, #4]
   13550:	f203 732c 	addw	r3, r3, #1836	; 0x72c
   13554:	4618      	mov	r0, r3
   13556:	f7ff fee9 	bl	1332c <Graphics::Initialize()>
    graphics_.Clear();
   1355a:	9b01      	ldr	r3, [sp, #4]
   1355c:	f203 732c 	addw	r3, r3, #1836	; 0x72c
   13560:	4618      	mov	r0, r3
   13562:	f7ff ffcf 	bl	13504 <Graphics::Clear()>
    graphics_.Update();
   13566:	9b01      	ldr	r3, [sp, #4]
   13568:	f203 732c 	addw	r3, r3, #1836	; 0x72c
   1356c:	4618      	mov	r0, r3
   1356e:	f7ff ffad 	bl	134cc <Graphics::Update()>
   13572:	4623      	mov	r3, r4
   13574:	4619      	mov	r1, r3
   13576:	4803      	ldr	r0, [pc, #12]	; (13584 <OledTerminal::Initialize()+0x48>)
   13578:	f002 ff96 	bl	164a8 <__cyg_profile_func_exit>
  }
   1357c:	bf00      	nop
   1357e:	b002      	add	sp, #8
   13580:	bd10      	pop	{r4, pc}
   13582:	bf00      	nop
   13584:	0001353d 	.word	0x0001353d

00013588 <OledTerminal::printf(char const*, ...)>:

  int printf(const char * format, ...)  // NOLINT
   13588:	b40e      	push	{r1, r2, r3}
   1358a:	b530      	push	{r4, r5, lr}
   1358c:	b0c6      	sub	sp, #280	; 0x118
   1358e:	4675      	mov	r5, lr
   13590:	ab01      	add	r3, sp, #4
   13592:	6018      	str	r0, [r3, #0]
   13594:	462b      	mov	r3, r5
   13596:	4619      	mov	r1, r3
   13598:	4850      	ldr	r0, [pc, #320]	; (136dc <OledTerminal::printf(char const*, ...)+0x154>)
   1359a:	f002 ff71 	bl	16480 <__cyg_profile_func_enter>
  {
    char buffer[256];

    va_list args;
    va_start(args, format);
   1359e:	aa4a      	add	r2, sp, #296	; 0x128
   135a0:	ab02      	add	r3, sp, #8
   135a2:	601a      	str	r2, [r3, #0]
    size_t characters = vsnprintf(buffer, sizeof(buffer), format, args);
   135a4:	ab02      	add	r3, sp, #8
   135a6:	a803      	add	r0, sp, #12
   135a8:	681b      	ldr	r3, [r3, #0]
   135aa:	9a49      	ldr	r2, [sp, #292]	; 0x124
   135ac:	f44f 7180 	mov.w	r1, #256	; 0x100
   135b0:	f004 fa08 	bl	179c4 <vsnprintf>
   135b4:	4603      	mov	r3, r0
   135b6:	9344      	str	r3, [sp, #272]	; 0x110
    va_end(args);

    size_t pos = 0;
   135b8:	2300      	movs	r3, #0
   135ba:	9345      	str	r3, [sp, #276]	; 0x114
    for (; pos < characters; pos++)
   135bc:	9a45      	ldr	r2, [sp, #276]	; 0x114
   135be:	9b44      	ldr	r3, [sp, #272]	; 0x110
   135c0:	429a      	cmp	r2, r3
   135c2:	d253      	bcs.n	1366c <OledTerminal::printf(char const*, ...)+0xe4>
    {
      char character = buffer[pos];
   135c4:	aa03      	add	r2, sp, #12
   135c6:	9b45      	ldr	r3, [sp, #276]	; 0x114
   135c8:	4413      	add	r3, r2
   135ca:	781b      	ldrb	r3, [r3, #0]
   135cc:	f88d 310f 	strb.w	r3, [sp, #271]	; 0x10f
      switch (character)
   135d0:	f89d 310f 	ldrb.w	r3, [sp, #271]	; 0x10f
   135d4:	2b0a      	cmp	r3, #10
   135d6:	d10e      	bne.n	135f6 <OledTerminal::printf(char const*, ...)+0x6e>
      {
        case '\n':
          column_ = 0;
   135d8:	ab01      	add	r3, sp, #4
   135da:	681b      	ldr	r3, [r3, #0]
   135dc:	2200      	movs	r2, #0
   135de:	f8c3 2740 	str.w	r2, [r3, #1856]	; 0x740
          row_++;
   135e2:	ab01      	add	r3, sp, #4
   135e4:	681b      	ldr	r3, [r3, #0]
   135e6:	f8d3 373c 	ldr.w	r3, [r3, #1852]	; 0x73c
   135ea:	1c5a      	adds	r2, r3, #1
   135ec:	ab01      	add	r3, sp, #4
   135ee:	681b      	ldr	r3, [r3, #0]
   135f0:	f8c3 273c 	str.w	r2, [r3, #1852]	; 0x73c
          break;
   135f4:	e036      	b.n	13664 <OledTerminal::printf(char const*, ...)+0xdc>
        default:
          terminal_[(row_ + row_start_) % kMaxRows][column_] = character;
   135f6:	ab01      	add	r3, sp, #4
   135f8:	681b      	ldr	r3, [r3, #0]
   135fa:	f8d3 273c 	ldr.w	r2, [r3, #1852]	; 0x73c
   135fe:	ab01      	add	r3, sp, #4
   13600:	681b      	ldr	r3, [r3, #0]
   13602:	f8d3 3744 	ldr.w	r3, [r3, #1860]	; 0x744
   13606:	4413      	add	r3, r2
   13608:	f003 0207 	and.w	r2, r3, #7
   1360c:	ab01      	add	r3, sp, #4
   1360e:	681b      	ldr	r3, [r3, #0]
   13610:	f8d3 3740 	ldr.w	r3, [r3, #1856]	; 0x740
   13614:	a901      	add	r1, sp, #4
   13616:	6809      	ldr	r1, [r1, #0]
   13618:	0112      	lsls	r2, r2, #4
   1361a:	440a      	add	r2, r1
   1361c:	4413      	add	r3, r2
   1361e:	f503 63e9 	add.w	r3, r3, #1864	; 0x748
   13622:	f89d 210f 	ldrb.w	r2, [sp, #271]	; 0x10f
   13626:	701a      	strb	r2, [r3, #0]
          column_++;
   13628:	ab01      	add	r3, sp, #4
   1362a:	681b      	ldr	r3, [r3, #0]
   1362c:	f8d3 3740 	ldr.w	r3, [r3, #1856]	; 0x740
   13630:	1c5a      	adds	r2, r3, #1
   13632:	ab01      	add	r3, sp, #4
   13634:	681b      	ldr	r3, [r3, #0]
   13636:	f8c3 2740 	str.w	r2, [r3, #1856]	; 0x740
          if (column_ >= kMaxColumns)
   1363a:	ab01      	add	r3, sp, #4
   1363c:	681b      	ldr	r3, [r3, #0]
   1363e:	f8d3 3740 	ldr.w	r3, [r3, #1856]	; 0x740
   13642:	2b0f      	cmp	r3, #15
   13644:	d90d      	bls.n	13662 <OledTerminal::printf(char const*, ...)+0xda>
          {
            column_ = 0;
   13646:	ab01      	add	r3, sp, #4
   13648:	681b      	ldr	r3, [r3, #0]
   1364a:	2200      	movs	r2, #0
   1364c:	f8c3 2740 	str.w	r2, [r3, #1856]	; 0x740
            row_++;
   13650:	ab01      	add	r3, sp, #4
   13652:	681b      	ldr	r3, [r3, #0]
   13654:	f8d3 373c 	ldr.w	r3, [r3, #1852]	; 0x73c
   13658:	1c5a      	adds	r2, r3, #1
   1365a:	ab01      	add	r3, sp, #4
   1365c:	681b      	ldr	r3, [r3, #0]
   1365e:	f8c3 273c 	str.w	r2, [r3, #1852]	; 0x73c
          }
          break;
   13662:	bf00      	nop
    for (; pos < characters; pos++)
   13664:	9b45      	ldr	r3, [sp, #276]	; 0x114
   13666:	3301      	adds	r3, #1
   13668:	9345      	str	r3, [sp, #276]	; 0x114
   1366a:	e7a7      	b.n	135bc <OledTerminal::printf(char const*, ...)+0x34>
      }
    }
    Update();
   1366c:	ab01      	add	r3, sp, #4
   1366e:	6818      	ldr	r0, [r3, #0]
   13670:	f000 f85a 	bl	13728 <OledTerminal::Update()>
    if (row_ >= kMaxRows)
   13674:	ab01      	add	r3, sp, #4
   13676:	681b      	ldr	r3, [r3, #0]
   13678:	f8d3 373c 	ldr.w	r3, [r3, #1852]	; 0x73c
   1367c:	2b07      	cmp	r3, #7
   1367e:	d91f      	bls.n	136c0 <OledTerminal::printf(char const*, ...)+0x138>
    {
      row_start_ = (row_start_ + 1) % kMaxRows;
   13680:	ab01      	add	r3, sp, #4
   13682:	681b      	ldr	r3, [r3, #0]
   13684:	f8d3 3744 	ldr.w	r3, [r3, #1860]	; 0x744
   13688:	3301      	adds	r3, #1
   1368a:	f003 0207 	and.w	r2, r3, #7
   1368e:	ab01      	add	r3, sp, #4
   13690:	681b      	ldr	r3, [r3, #0]
   13692:	f8c3 2744 	str.w	r2, [r3, #1860]	; 0x744
      row_       = kMaxRows - 1;
   13696:	ab01      	add	r3, sp, #4
   13698:	681b      	ldr	r3, [r3, #0]
   1369a:	2207      	movs	r2, #7
   1369c:	f8c3 273c 	str.w	r2, [r3, #1852]	; 0x73c
      ClearRow((row_ + row_start_) % kMaxRows);
   136a0:	ab01      	add	r3, sp, #4
   136a2:	681b      	ldr	r3, [r3, #0]
   136a4:	f8d3 273c 	ldr.w	r2, [r3, #1852]	; 0x73c
   136a8:	ab01      	add	r3, sp, #4
   136aa:	681b      	ldr	r3, [r3, #0]
   136ac:	f8d3 3744 	ldr.w	r3, [r3, #1860]	; 0x744
   136b0:	4413      	add	r3, r2
   136b2:	f003 0207 	and.w	r2, r3, #7
   136b6:	ab01      	add	r3, sp, #4
   136b8:	4611      	mov	r1, r2
   136ba:	6818      	ldr	r0, [r3, #0]
   136bc:	f000 f882 	bl	137c4 <OledTerminal::ClearRow(unsigned int)>
    }
    return pos;
   136c0:	9c45      	ldr	r4, [sp, #276]	; 0x114
   136c2:	462b      	mov	r3, r5
   136c4:	4619      	mov	r1, r3
   136c6:	4805      	ldr	r0, [pc, #20]	; (136dc <OledTerminal::printf(char const*, ...)+0x154>)
   136c8:	f002 feee 	bl	164a8 <__cyg_profile_func_exit>
   136cc:	4623      	mov	r3, r4
  }
   136ce:	4618      	mov	r0, r3
   136d0:	b046      	add	sp, #280	; 0x118
   136d2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   136d6:	b003      	add	sp, #12
   136d8:	4770      	bx	lr
   136da:	bf00      	nop
   136dc:	00013589 	.word	0x00013589

000136e0 <OledTerminal::SetCursor(unsigned int, unsigned int)>:
  OledTerminal & SetCursor(size_t x, size_t y)
   136e0:	b530      	push	{r4, r5, lr}
   136e2:	b085      	sub	sp, #20
   136e4:	4675      	mov	r5, lr
   136e6:	9003      	str	r0, [sp, #12]
   136e8:	9102      	str	r1, [sp, #8]
   136ea:	9201      	str	r2, [sp, #4]
   136ec:	462b      	mov	r3, r5
   136ee:	4619      	mov	r1, r3
   136f0:	480c      	ldr	r0, [pc, #48]	; (13724 <OledTerminal::SetCursor(unsigned int, unsigned int)+0x44>)
   136f2:	f002 fec5 	bl	16480 <__cyg_profile_func_enter>
  {
    column_    = x;
   136f6:	9b03      	ldr	r3, [sp, #12]
   136f8:	9a02      	ldr	r2, [sp, #8]
   136fa:	f8c3 2740 	str.w	r2, [r3, #1856]	; 0x740
    row_       = y;
   136fe:	9b03      	ldr	r3, [sp, #12]
   13700:	9a01      	ldr	r2, [sp, #4]
   13702:	f8c3 273c 	str.w	r2, [r3, #1852]	; 0x73c
    row_start_ = 0;
   13706:	9b03      	ldr	r3, [sp, #12]
   13708:	2200      	movs	r2, #0
   1370a:	f8c3 2744 	str.w	r2, [r3, #1860]	; 0x744
    return *this;
   1370e:	9c03      	ldr	r4, [sp, #12]
   13710:	462b      	mov	r3, r5
   13712:	4619      	mov	r1, r3
   13714:	4803      	ldr	r0, [pc, #12]	; (13724 <OledTerminal::SetCursor(unsigned int, unsigned int)+0x44>)
   13716:	f002 fec7 	bl	164a8 <__cyg_profile_func_exit>
   1371a:	4623      	mov	r3, r4
  }
   1371c:	4618      	mov	r0, r3
   1371e:	b005      	add	sp, #20
   13720:	bd30      	pop	{r4, r5, pc}
   13722:	bf00      	nop
   13724:	000136e1 	.word	0x000136e1

00013728 <OledTerminal::Update()>:
  OledTerminal & MoveToLineStart()
  {
    column_ = 0;
    return *this;
  }
  OledTerminal & Update()
   13728:	b530      	push	{r4, r5, lr}
   1372a:	b089      	sub	sp, #36	; 0x24
   1372c:	4675      	mov	r5, lr
   1372e:	9003      	str	r0, [sp, #12]
   13730:	462b      	mov	r3, r5
   13732:	4619      	mov	r1, r3
   13734:	4822      	ldr	r0, [pc, #136]	; (137c0 <OledTerminal::Update()+0x98>)
   13736:	f002 fea3 	bl	16480 <__cyg_profile_func_enter>
  {
    for (size_t i = 0; i < kMaxRows; i++)
   1373a:	2300      	movs	r3, #0
   1373c:	9307      	str	r3, [sp, #28]
   1373e:	9b07      	ldr	r3, [sp, #28]
   13740:	2b07      	cmp	r3, #7
   13742:	d82c      	bhi.n	1379e <OledTerminal::Update()+0x76>
    {
      for (size_t j = 0; j < kMaxColumns; j++)
   13744:	2300      	movs	r3, #0
   13746:	9306      	str	r3, [sp, #24]
   13748:	9b06      	ldr	r3, [sp, #24]
   1374a:	2b0f      	cmp	r3, #15
   1374c:	d823      	bhi.n	13796 <OledTerminal::Update()+0x6e>
      {
        size_t x = j * kCharacterWidth;
   1374e:	9b06      	ldr	r3, [sp, #24]
   13750:	00db      	lsls	r3, r3, #3
   13752:	9305      	str	r3, [sp, #20]
        size_t y = i * kCharacterHeight;
   13754:	9b07      	ldr	r3, [sp, #28]
   13756:	00db      	lsls	r3, r3, #3
   13758:	9304      	str	r3, [sp, #16]
        graphics_.DrawCharacter(x, y,
   1375a:	9b03      	ldr	r3, [sp, #12]
   1375c:	f203 702c 	addw	r0, r3, #1836	; 0x72c
   13760:	9905      	ldr	r1, [sp, #20]
   13762:	9c04      	ldr	r4, [sp, #16]
                                terminal_[(i + row_start_) % kMaxRows][j]);
   13764:	9b03      	ldr	r3, [sp, #12]
   13766:	f8d3 2744 	ldr.w	r2, [r3, #1860]	; 0x744
   1376a:	9b07      	ldr	r3, [sp, #28]
   1376c:	4413      	add	r3, r2
   1376e:	f003 0307 	and.w	r3, r3, #7
        graphics_.DrawCharacter(x, y,
   13772:	9a03      	ldr	r2, [sp, #12]
   13774:	011b      	lsls	r3, r3, #4
   13776:	441a      	add	r2, r3
   13778:	9b06      	ldr	r3, [sp, #24]
   1377a:	4413      	add	r3, r2
   1377c:	f503 63e9 	add.w	r3, r3, #1864	; 0x748
   13780:	781a      	ldrb	r2, [r3, #0]
   13782:	2301      	movs	r3, #1
   13784:	9300      	str	r3, [sp, #0]
   13786:	4613      	mov	r3, r2
   13788:	4622      	mov	r2, r4
   1378a:	f7ff fdf5 	bl	13378 <Graphics::DrawCharacter(long, long, char, bool)>
      for (size_t j = 0; j < kMaxColumns; j++)
   1378e:	9b06      	ldr	r3, [sp, #24]
   13790:	3301      	adds	r3, #1
   13792:	9306      	str	r3, [sp, #24]
   13794:	e7d8      	b.n	13748 <OledTerminal::Update()+0x20>
    for (size_t i = 0; i < kMaxRows; i++)
   13796:	9b07      	ldr	r3, [sp, #28]
   13798:	3301      	adds	r3, #1
   1379a:	9307      	str	r3, [sp, #28]
   1379c:	e7cf      	b.n	1373e <OledTerminal::Update()+0x16>
      }
    }
    graphics_.Update();
   1379e:	9b03      	ldr	r3, [sp, #12]
   137a0:	f203 732c 	addw	r3, r3, #1836	; 0x72c
   137a4:	4618      	mov	r0, r3
   137a6:	f7ff fe91 	bl	134cc <Graphics::Update()>
    return *this;
   137aa:	9c03      	ldr	r4, [sp, #12]
   137ac:	462b      	mov	r3, r5
   137ae:	4619      	mov	r1, r3
   137b0:	4803      	ldr	r0, [pc, #12]	; (137c0 <OledTerminal::Update()+0x98>)
   137b2:	f002 fe79 	bl	164a8 <__cyg_profile_func_exit>
   137b6:	4623      	mov	r3, r4
  }
   137b8:	4618      	mov	r0, r3
   137ba:	b009      	add	sp, #36	; 0x24
   137bc:	bd30      	pop	{r4, r5, pc}
   137be:	bf00      	nop
   137c0:	00013729 	.word	0x00013729

000137c4 <OledTerminal::ClearRow(unsigned int)>:
  void ClearRow(size_t row_location)
   137c4:	b510      	push	{r4, lr}
   137c6:	b084      	sub	sp, #16
   137c8:	4674      	mov	r4, lr
   137ca:	9001      	str	r0, [sp, #4]
   137cc:	9100      	str	r1, [sp, #0]
   137ce:	4623      	mov	r3, r4
   137d0:	4619      	mov	r1, r3
   137d2:	480f      	ldr	r0, [pc, #60]	; (13810 <OledTerminal::ClearRow(unsigned int)+0x4c>)
   137d4:	f002 fe54 	bl	16480 <__cyg_profile_func_enter>
  {
    for (size_t i = 0; i < kMaxColumns; i++)
   137d8:	2300      	movs	r3, #0
   137da:	9303      	str	r3, [sp, #12]
   137dc:	9b03      	ldr	r3, [sp, #12]
   137de:	2b0f      	cmp	r3, #15
   137e0:	d80d      	bhi.n	137fe <OledTerminal::ClearRow(unsigned int)+0x3a>
    {
      terminal_[row_location][i] = ' ';
   137e2:	9a01      	ldr	r2, [sp, #4]
   137e4:	9b00      	ldr	r3, [sp, #0]
   137e6:	011b      	lsls	r3, r3, #4
   137e8:	441a      	add	r2, r3
   137ea:	9b03      	ldr	r3, [sp, #12]
   137ec:	4413      	add	r3, r2
   137ee:	f503 63e9 	add.w	r3, r3, #1864	; 0x748
   137f2:	2220      	movs	r2, #32
   137f4:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < kMaxColumns; i++)
   137f6:	9b03      	ldr	r3, [sp, #12]
   137f8:	3301      	adds	r3, #1
   137fa:	9303      	str	r3, [sp, #12]
   137fc:	e7ee      	b.n	137dc <OledTerminal::ClearRow(unsigned int)+0x18>
   137fe:	4623      	mov	r3, r4
   13800:	4619      	mov	r1, r3
   13802:	4803      	ldr	r0, [pc, #12]	; (13810 <OledTerminal::ClearRow(unsigned int)+0x4c>)
   13804:	f002 fe50 	bl	164a8 <__cyg_profile_func_exit>
    }
  }
   13808:	bf00      	nop
   1380a:	b004      	add	sp, #16
   1380c:	bd10      	pop	{r4, pc}
   1380e:	bf00      	nop
   13810:	000137c5 	.word	0x000137c5

00013814 <OledTerminal::Clear()>:
  void Clear()
   13814:	b510      	push	{r4, lr}
   13816:	b082      	sub	sp, #8
   13818:	4674      	mov	r4, lr
   1381a:	9001      	str	r0, [sp, #4]
   1381c:	4623      	mov	r3, r4
   1381e:	4619      	mov	r1, r3
   13820:	4811      	ldr	r0, [pc, #68]	; (13868 <OledTerminal::Clear()+0x54>)
   13822:	f002 fe2d 	bl	16480 <__cyg_profile_func_enter>
  {
    graphics_.Clear();
   13826:	9b01      	ldr	r3, [sp, #4]
   13828:	f203 732c 	addw	r3, r3, #1836	; 0x72c
   1382c:	4618      	mov	r0, r3
   1382e:	f7ff fe69 	bl	13504 <Graphics::Clear()>
    memset(terminal_, '\0', sizeof(terminal_));
   13832:	9b01      	ldr	r3, [sp, #4]
   13834:	f503 63e9 	add.w	r3, r3, #1864	; 0x748
   13838:	2280      	movs	r2, #128	; 0x80
   1383a:	2100      	movs	r1, #0
   1383c:	4618      	mov	r0, r3
   1383e:	f005 fcc9 	bl	191d4 <memset>
    SetCursor(0, 0);
   13842:	2200      	movs	r2, #0
   13844:	2100      	movs	r1, #0
   13846:	9801      	ldr	r0, [sp, #4]
   13848:	f7ff ff4a 	bl	136e0 <OledTerminal::SetCursor(unsigned int, unsigned int)>
    graphics_.Update();
   1384c:	9b01      	ldr	r3, [sp, #4]
   1384e:	f203 732c 	addw	r3, r3, #1836	; 0x72c
   13852:	4618      	mov	r0, r3
   13854:	f7ff fe3a 	bl	134cc <Graphics::Update()>
   13858:	4623      	mov	r3, r4
   1385a:	4619      	mov	r1, r3
   1385c:	4802      	ldr	r0, [pc, #8]	; (13868 <OledTerminal::Clear()+0x54>)
   1385e:	f002 fe23 	bl	164a8 <__cyg_profile_func_exit>
  }
   13862:	bf00      	nop
   13864:	b002      	add	sp, #8
   13866:	bd10      	pop	{r4, pc}
   13868:	00013815 	.word	0x00013815

0001386c <OledTerminal::OledTerminal()>:
class OledTerminal
   1386c:	b530      	push	{r4, r5, lr}
   1386e:	b083      	sub	sp, #12
   13870:	4675      	mov	r5, lr
   13872:	9001      	str	r0, [sp, #4]
   13874:	462b      	mov	r3, r5
   13876:	4619      	mov	r1, r3
   13878:	4816      	ldr	r0, [pc, #88]	; (138d4 <OledTerminal::OledTerminal()+0x68>)
   1387a:	f002 fe01 	bl	16480 <__cyg_profile_func_enter>
   1387e:	9b01      	ldr	r3, [sp, #4]
   13880:	4618      	mov	r0, r3
   13882:	f7ff fa97 	bl	12db4 <Ssd1306::Ssd1306()>
   13886:	9b01      	ldr	r3, [sp, #4]
   13888:	f203 732c 	addw	r3, r3, #1836	; 0x72c
   1388c:	9a01      	ldr	r2, [sp, #4]
   1388e:	4611      	mov	r1, r2
   13890:	4618      	mov	r0, r3
   13892:	f7ff fd05 	bl	132a0 <Graphics::Graphics(PixelDisplayInterface*)>
   13896:	9b01      	ldr	r3, [sp, #4]
   13898:	2200      	movs	r2, #0
   1389a:	f8c3 273c 	str.w	r2, [r3, #1852]	; 0x73c
   1389e:	9b01      	ldr	r3, [sp, #4]
   138a0:	2200      	movs	r2, #0
   138a2:	f8c3 2740 	str.w	r2, [r3, #1856]	; 0x740
   138a6:	9b01      	ldr	r3, [sp, #4]
   138a8:	2200      	movs	r2, #0
   138aa:	f8c3 2744 	str.w	r2, [r3, #1860]	; 0x744
   138ae:	9b01      	ldr	r3, [sp, #4]
   138b0:	f503 63e9 	add.w	r3, r3, #1864	; 0x748
   138b4:	2280      	movs	r2, #128	; 0x80
   138b6:	2100      	movs	r1, #0
   138b8:	4618      	mov	r0, r3
   138ba:	f005 fc8b 	bl	191d4 <memset>
   138be:	9c01      	ldr	r4, [sp, #4]
   138c0:	462b      	mov	r3, r5
   138c2:	4619      	mov	r1, r3
   138c4:	4803      	ldr	r0, [pc, #12]	; (138d4 <OledTerminal::OledTerminal()+0x68>)
   138c6:	f002 fdef 	bl	164a8 <__cyg_profile_func_exit>
   138ca:	4623      	mov	r3, r4
   138cc:	4618      	mov	r0, r3
   138ce:	b003      	add	sp, #12
   138d0:	bd30      	pop	{r4, r5, pc}
   138d2:	bf00      	nop
   138d4:	0001386d 	.word	0x0001386d

000138d8 <main>:
void DemoButton();
void EC(); // morse code translator
void morse_translate(); // translate dots and dashes to alphabet

int main() 
{ 
   138d8:	b500      	push	{lr}
   138da:	b083      	sub	sp, #12
   138dc:	4673      	mov	r3, lr
   138de:	4619      	mov	r1, r3
   138e0:	4819      	ldr	r0, [pc, #100]	; (13948 <main+0x70>)
   138e2:	f002 fdcd 	bl	16480 <__cyg_profile_func_enter>
  LOG_INFO("Start");
   138e6:	232f      	movs	r3, #47	; 0x2f
   138e8:	4a18      	ldr	r2, [pc, #96]	; (1394c <main+0x74>)
   138ea:	4919      	ldr	r1, [pc, #100]	; (13950 <main+0x78>)
   138ec:	4819      	ldr	r0, [pc, #100]	; (13954 <main+0x7c>)
   138ee:	f004 f843 	bl	17978 <printf>
  oled_terminal.Initialize();
   138f2:	4819      	ldr	r0, [pc, #100]	; (13958 <main+0x80>)
   138f4:	f7ff fe22 	bl	1353c <OledTerminal::Initialize()>
  button0.setPulldown();
   138f8:	4818      	ldr	r0, [pc, #96]	; (1395c <main+0x84>)
   138fa:	f7fc ff47 	bl	1078c <LabGPIO::setPulldown()>
  button1.setPulldown();
   138fe:	4818      	ldr	r0, [pc, #96]	; (13960 <main+0x88>)
   13900:	f7fc ff44 	bl	1078c <LabGPIO::setPulldown()>
  bool change =true;
   13904:	2301      	movs	r3, #1
   13906:	f88d 3007 	strb.w	r3, [sp, #7]

  while(true)
  {    
    if(change){ 
   1390a:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1390e:	2b00      	cmp	r3, #0
   13910:	d001      	beq.n	13916 <main+0x3e>
    // Logic to read if button has been RELEASED and if so, TOGGLE LED state;
      DemoButton();
   13912:	f000 f82f 	bl	13974 <DemoButton()>
    }
    if(CB0 == 1 && CB1 ==5 && CB2%4 ==0 && CB3 ==5)
   13916:	4b13      	ldr	r3, [pc, #76]	; (13964 <main+0x8c>)
   13918:	681b      	ldr	r3, [r3, #0]
   1391a:	2b01      	cmp	r3, #1
   1391c:	d1f5      	bne.n	1390a <main+0x32>
   1391e:	4b12      	ldr	r3, [pc, #72]	; (13968 <main+0x90>)
   13920:	681b      	ldr	r3, [r3, #0]
   13922:	2b05      	cmp	r3, #5
   13924:	d1f1      	bne.n	1390a <main+0x32>
   13926:	4b11      	ldr	r3, [pc, #68]	; (1396c <main+0x94>)
   13928:	681b      	ldr	r3, [r3, #0]
   1392a:	f003 0303 	and.w	r3, r3, #3
   1392e:	2b00      	cmp	r3, #0
   13930:	d1eb      	bne.n	1390a <main+0x32>
   13932:	4b0f      	ldr	r3, [pc, #60]	; (13970 <main+0x98>)
   13934:	681b      	ldr	r3, [r3, #0]
   13936:	2b05      	cmp	r3, #5
   13938:	d1e7      	bne.n	1390a <main+0x32>
    {   change=false;
   1393a:	2300      	movs	r3, #0
   1393c:	f88d 3007 	strb.w	r3, [sp, #7]
          EC();
   13940:	f000 f8de 	bl	13b00 <EC()>
    if(change){ 
   13944:	e7e1      	b.n	1390a <main+0x32>
   13946:	bf00      	nop
   13948:	000138d9 	.word	0x000138d9
   1394c:	00019d90 	.word	0x00019d90
   13950:	00019b38 	.word	0x00019b38
   13954:	0001982c 	.word	0x0001982c
   13958:	10000bf4 	.word	0x10000bf4
   1395c:	10000788 	.word	0x10000788
   13960:	10000780 	.word	0x10000780
   13964:	10000790 	.word	0x10000790
   13968:	10000794 	.word	0x10000794
   1396c:	10000798 	.word	0x10000798
   13970:	1000079c 	.word	0x1000079c

00013974 <DemoButton()>:
    LOG_INFO("Turning LED OFF!");
    Delay(500);
  }
}
void DemoButton()
{
   13974:	b510      	push	{r4, lr}
   13976:	4674      	mov	r4, lr
   13978:	4623      	mov	r3, r4
   1397a:	4619      	mov	r1, r3
   1397c:	484a      	ldr	r0, [pc, #296]	; (13aa8 <DemoButton()+0x134>)
   1397e:	f002 fd7f 	bl	16480 <__cyg_profile_func_enter>
   if(button0.ReadBool())
   13982:	484a      	ldr	r0, [pc, #296]	; (13aac <DemoButton()+0x138>)
   13984:	f7fc fde4 	bl	10550 <LabGPIO::ReadBool()>
   13988:	4603      	mov	r3, r0
   1398a:	2b00      	cmp	r3, #0
   1398c:	d01c      	beq.n	139c8 <DemoButton()+0x54>
   {    
      Delay(10); //debounce
   1398e:	f04f 000a 	mov.w	r0, #10
   13992:	f04f 0100 	mov.w	r1, #0
   13996:	f7fd fbdd 	bl	11154 <Delay(unsigned long long)>
       if(button0.ReadBool() != true)
   1399a:	4844      	ldr	r0, [pc, #272]	; (13aac <DemoButton()+0x138>)
   1399c:	f7fc fdd8 	bl	10550 <LabGPIO::ReadBool()>
   139a0:	4603      	mov	r3, r0
   139a2:	f083 0301 	eor.w	r3, r3, #1
   139a6:	b2db      	uxtb	r3, r3
   139a8:	2b00      	cmp	r3, #0
   139aa:	d00d      	beq.n	139c8 <DemoButton()+0x54>
       {
        LOG_INFO("Button 0 pressed!");
   139ac:	235e      	movs	r3, #94	; 0x5e
   139ae:	4a40      	ldr	r2, [pc, #256]	; (13ab0 <DemoButton()+0x13c>)
   139b0:	4940      	ldr	r1, [pc, #256]	; (13ab4 <DemoButton()+0x140>)
   139b2:	4841      	ldr	r0, [pc, #260]	; (13ab8 <DemoButton()+0x144>)
   139b4:	f003 ffe0 	bl	17978 <printf>
        led0.toggle();
   139b8:	4840      	ldr	r0, [pc, #256]	; (13abc <DemoButton()+0x148>)
   139ba:	f7fc fe5b 	bl	10674 <LabGPIO::toggle()>
        CB0++;
   139be:	4b40      	ldr	r3, [pc, #256]	; (13ac0 <DemoButton()+0x14c>)
   139c0:	681b      	ldr	r3, [r3, #0]
   139c2:	3301      	adds	r3, #1
   139c4:	4a3e      	ldr	r2, [pc, #248]	; (13ac0 <DemoButton()+0x14c>)
   139c6:	6013      	str	r3, [r2, #0]
       }           
   }
  
   if(button1.ReadBool())
   139c8:	483e      	ldr	r0, [pc, #248]	; (13ac4 <DemoButton()+0x150>)
   139ca:	f7fc fdc1 	bl	10550 <LabGPIO::ReadBool()>
   139ce:	4603      	mov	r3, r0
   139d0:	2b00      	cmp	r3, #0
   139d2:	d01c      	beq.n	13a0e <DemoButton()+0x9a>
   {     
      Delay(10); //debounce
   139d4:	f04f 000a 	mov.w	r0, #10
   139d8:	f04f 0100 	mov.w	r1, #0
   139dc:	f7fd fbba 	bl	11154 <Delay(unsigned long long)>
       if(button1.ReadBool() != true)
   139e0:	4838      	ldr	r0, [pc, #224]	; (13ac4 <DemoButton()+0x150>)
   139e2:	f7fc fdb5 	bl	10550 <LabGPIO::ReadBool()>
   139e6:	4603      	mov	r3, r0
   139e8:	f083 0301 	eor.w	r3, r3, #1
   139ec:	b2db      	uxtb	r3, r3
   139ee:	2b00      	cmp	r3, #0
   139f0:	d00d      	beq.n	13a0e <DemoButton()+0x9a>
       {
        LOG_INFO("Button 1 pressed!"); 
   139f2:	2369      	movs	r3, #105	; 0x69
   139f4:	4a2e      	ldr	r2, [pc, #184]	; (13ab0 <DemoButton()+0x13c>)
   139f6:	4934      	ldr	r1, [pc, #208]	; (13ac8 <DemoButton()+0x154>)
   139f8:	4834      	ldr	r0, [pc, #208]	; (13acc <DemoButton()+0x158>)
   139fa:	f003 ffbd 	bl	17978 <printf>
        led1.toggle();
   139fe:	4834      	ldr	r0, [pc, #208]	; (13ad0 <DemoButton()+0x15c>)
   13a00:	f7fc fe38 	bl	10674 <LabGPIO::toggle()>
        CB1++;
   13a04:	4b33      	ldr	r3, [pc, #204]	; (13ad4 <DemoButton()+0x160>)
   13a06:	681b      	ldr	r3, [r3, #0]
   13a08:	3301      	adds	r3, #1
   13a0a:	4a32      	ldr	r2, [pc, #200]	; (13ad4 <DemoButton()+0x160>)
   13a0c:	6013      	str	r3, [r2, #0]
       }           
   }
       
   if(button2.ReadBool())
   13a0e:	4832      	ldr	r0, [pc, #200]	; (13ad8 <DemoButton()+0x164>)
   13a10:	f7fc fd9e 	bl	10550 <LabGPIO::ReadBool()>
   13a14:	4603      	mov	r3, r0
   13a16:	2b00      	cmp	r3, #0
   13a18:	d01c      	beq.n	13a54 <DemoButton()+0xe0>
   {        
      Delay(10); //debounce
   13a1a:	f04f 000a 	mov.w	r0, #10
   13a1e:	f04f 0100 	mov.w	r1, #0
   13a22:	f7fd fb97 	bl	11154 <Delay(unsigned long long)>
       if(button2.ReadBool() != true)
   13a26:	482c      	ldr	r0, [pc, #176]	; (13ad8 <DemoButton()+0x164>)
   13a28:	f7fc fd92 	bl	10550 <LabGPIO::ReadBool()>
   13a2c:	4603      	mov	r3, r0
   13a2e:	f083 0301 	eor.w	r3, r3, #1
   13a32:	b2db      	uxtb	r3, r3
   13a34:	2b00      	cmp	r3, #0
   13a36:	d00d      	beq.n	13a54 <DemoButton()+0xe0>
       {
        LOG_INFO("Button 2 pressed!");
   13a38:	2374      	movs	r3, #116	; 0x74
   13a3a:	4a1d      	ldr	r2, [pc, #116]	; (13ab0 <DemoButton()+0x13c>)
   13a3c:	4927      	ldr	r1, [pc, #156]	; (13adc <DemoButton()+0x168>)
   13a3e:	4828      	ldr	r0, [pc, #160]	; (13ae0 <DemoButton()+0x16c>)
   13a40:	f003 ff9a 	bl	17978 <printf>
        led2.toggle();
   13a44:	4827      	ldr	r0, [pc, #156]	; (13ae4 <DemoButton()+0x170>)
   13a46:	f7fc fe15 	bl	10674 <LabGPIO::toggle()>
        CB2++;
   13a4a:	4b27      	ldr	r3, [pc, #156]	; (13ae8 <DemoButton()+0x174>)
   13a4c:	681b      	ldr	r3, [r3, #0]
   13a4e:	3301      	adds	r3, #1
   13a50:	4a25      	ldr	r2, [pc, #148]	; (13ae8 <DemoButton()+0x174>)
   13a52:	6013      	str	r3, [r2, #0]
       }           
   }
   if(button3.ReadBool())
   13a54:	4825      	ldr	r0, [pc, #148]	; (13aec <DemoButton()+0x178>)
   13a56:	f7fc fd7b 	bl	10550 <LabGPIO::ReadBool()>
   13a5a:	4603      	mov	r3, r0
   13a5c:	2b00      	cmp	r3, #0
   13a5e:	d01c      	beq.n	13a9a <DemoButton()+0x126>
   {     
      Delay(10); //debounce
   13a60:	f04f 000a 	mov.w	r0, #10
   13a64:	f04f 0100 	mov.w	r1, #0
   13a68:	f7fd fb74 	bl	11154 <Delay(unsigned long long)>
       if(button3.ReadBool() != true)
   13a6c:	481f      	ldr	r0, [pc, #124]	; (13aec <DemoButton()+0x178>)
   13a6e:	f7fc fd6f 	bl	10550 <LabGPIO::ReadBool()>
   13a72:	4603      	mov	r3, r0
   13a74:	f083 0301 	eor.w	r3, r3, #1
   13a78:	b2db      	uxtb	r3, r3
   13a7a:	2b00      	cmp	r3, #0
   13a7c:	d00d      	beq.n	13a9a <DemoButton()+0x126>
       {
        LOG_INFO("Button 3 pressed!");
   13a7e:	237e      	movs	r3, #126	; 0x7e
   13a80:	4a0b      	ldr	r2, [pc, #44]	; (13ab0 <DemoButton()+0x13c>)
   13a82:	491b      	ldr	r1, [pc, #108]	; (13af0 <DemoButton()+0x17c>)
   13a84:	481b      	ldr	r0, [pc, #108]	; (13af4 <DemoButton()+0x180>)
   13a86:	f003 ff77 	bl	17978 <printf>
        led3.toggle();
   13a8a:	481b      	ldr	r0, [pc, #108]	; (13af8 <DemoButton()+0x184>)
   13a8c:	f7fc fdf2 	bl	10674 <LabGPIO::toggle()>
        CB3++;
   13a90:	4b1a      	ldr	r3, [pc, #104]	; (13afc <DemoButton()+0x188>)
   13a92:	681b      	ldr	r3, [r3, #0]
   13a94:	3301      	adds	r3, #1
   13a96:	4a19      	ldr	r2, [pc, #100]	; (13afc <DemoButton()+0x188>)
   13a98:	6013      	str	r3, [r2, #0]
   13a9a:	4623      	mov	r3, r4
   13a9c:	4619      	mov	r1, r3
   13a9e:	4802      	ldr	r0, [pc, #8]	; (13aa8 <DemoButton()+0x134>)
   13aa0:	f002 fd02 	bl	164a8 <__cyg_profile_func_exit>
       }           
     
   }
}
   13aa4:	bf00      	nop
   13aa6:	bd10      	pop	{r4, pc}
   13aa8:	00013975 	.word	0x00013975
   13aac:	10000788 	.word	0x10000788
   13ab0:	00019d9c 	.word	0x00019d9c
   13ab4:	00019b44 	.word	0x00019b44
   13ab8:	00019904 	.word	0x00019904
   13abc:	1000078c 	.word	0x1000078c
   13ac0:	10000790 	.word	0x10000790
   13ac4:	10000780 	.word	0x10000780
   13ac8:	00019b50 	.word	0x00019b50
   13acc:	00019950 	.word	0x00019950
   13ad0:	10000784 	.word	0x10000784
   13ad4:	10000794 	.word	0x10000794
   13ad8:	10000778 	.word	0x10000778
   13adc:	00019b5c 	.word	0x00019b5c
   13ae0:	0001999c 	.word	0x0001999c
   13ae4:	1000077c 	.word	0x1000077c
   13ae8:	10000798 	.word	0x10000798
   13aec:	10000770 	.word	0x10000770
   13af0:	00019b68 	.word	0x00019b68
   13af4:	000199e8 	.word	0x000199e8
   13af8:	10000774 	.word	0x10000774
   13afc:	1000079c 	.word	0x1000079c

00013b00 <EC()>:
  
void EC(){
   13b00:	b510      	push	{r4, lr}
   13b02:	4674      	mov	r4, lr
   13b04:	4623      	mov	r3, r4
   13b06:	4619      	mov	r1, r3
   13b08:	4876      	ldr	r0, [pc, #472]	; (13ce4 <EC()+0x1e4>)
   13b0a:	f002 fcb9 	bl	16480 <__cyg_profile_func_enter>
      translated[0]='?';
   13b0e:	4b76      	ldr	r3, [pc, #472]	; (13ce8 <EC()+0x1e8>)
   13b10:	223f      	movs	r2, #63	; 0x3f
   13b12:	701a      	strb	r2, [r3, #0]
        morse[0]='?';
   13b14:	4b75      	ldr	r3, [pc, #468]	; (13cec <EC()+0x1ec>)
   13b16:	223f      	movs	r2, #63	; 0x3f
   13b18:	701a      	strb	r2, [r3, #0]
      if(button3.ReadBool()){
   13b1a:	4875      	ldr	r0, [pc, #468]	; (13cf0 <EC()+0x1f0>)
   13b1c:	f7fc fd18 	bl	10550 <LabGPIO::ReadBool()>
   13b20:	4603      	mov	r3, r0
   13b22:	2b00      	cmp	r3, #0
   13b24:	d048      	beq.n	13bb8 <EC()+0xb8>
          Delay(150);
   13b26:	f04f 0096 	mov.w	r0, #150	; 0x96
   13b2a:	f04f 0100 	mov.w	r1, #0
   13b2e:	f7fd fb11 	bl	11154 <Delay(unsigned long long)>
          count++;
   13b32:	4b70      	ldr	r3, [pc, #448]	; (13cf4 <EC()+0x1f4>)
   13b34:	681b      	ldr	r3, [r3, #0]
   13b36:	3301      	adds	r3, #1
   13b38:	4a6e      	ldr	r2, [pc, #440]	; (13cf4 <EC()+0x1f4>)
   13b3a:	6013      	str	r3, [r2, #0]
          if(count>2){
   13b3c:	4b6d      	ldr	r3, [pc, #436]	; (13cf4 <EC()+0x1f4>)
   13b3e:	681b      	ldr	r3, [r3, #0]
   13b40:	2b02      	cmp	r3, #2
   13b42:	dd11      	ble.n	13b68 <EC()+0x68>
          oled_terminal.printf("-");
   13b44:	496c      	ldr	r1, [pc, #432]	; (13cf8 <EC()+0x1f8>)
   13b46:	486d      	ldr	r0, [pc, #436]	; (13cfc <EC()+0x1fc>)
   13b48:	f7ff fd1e 	bl	13588 <OledTerminal::printf(char const*, ...)>
         
         morse[word_count]= '-';
   13b4c:	4b6c      	ldr	r3, [pc, #432]	; (13d00 <EC()+0x200>)
   13b4e:	681b      	ldr	r3, [r3, #0]
   13b50:	4a66      	ldr	r2, [pc, #408]	; (13cec <EC()+0x1ec>)
   13b52:	212d      	movs	r1, #45	; 0x2d
   13b54:	54d1      	strb	r1, [r2, r3]
          word_count++;
   13b56:	4b6a      	ldr	r3, [pc, #424]	; (13d00 <EC()+0x200>)
   13b58:	681b      	ldr	r3, [r3, #0]
   13b5a:	3301      	adds	r3, #1
   13b5c:	4a68      	ldr	r2, [pc, #416]	; (13d00 <EC()+0x200>)
   13b5e:	6013      	str	r3, [r2, #0]
           count=-1;
   13b60:	4b64      	ldr	r3, [pc, #400]	; (13cf4 <EC()+0x1f4>)
   13b62:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   13b66:	601a      	str	r2, [r3, #0]
          }
          if(button3.ReadBool() != true && (count != 0) && (count != -1))
   13b68:	4861      	ldr	r0, [pc, #388]	; (13cf0 <EC()+0x1f0>)
   13b6a:	f7fc fcf1 	bl	10550 <LabGPIO::ReadBool()>
   13b6e:	4603      	mov	r3, r0
   13b70:	f083 0301 	eor.w	r3, r3, #1
   13b74:	b2db      	uxtb	r3, r3
   13b76:	2b00      	cmp	r3, #0
   13b78:	d00a      	beq.n	13b90 <EC()+0x90>
   13b7a:	4b5e      	ldr	r3, [pc, #376]	; (13cf4 <EC()+0x1f4>)
   13b7c:	681b      	ldr	r3, [r3, #0]
   13b7e:	2b00      	cmp	r3, #0
   13b80:	d006      	beq.n	13b90 <EC()+0x90>
   13b82:	4b5c      	ldr	r3, [pc, #368]	; (13cf4 <EC()+0x1f4>)
   13b84:	681b      	ldr	r3, [r3, #0]
   13b86:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   13b8a:	d001      	beq.n	13b90 <EC()+0x90>
   13b8c:	2301      	movs	r3, #1
   13b8e:	e000      	b.n	13b92 <EC()+0x92>
   13b90:	2300      	movs	r3, #0
   13b92:	2b00      	cmp	r3, #0
   13b94:	d010      	beq.n	13bb8 <EC()+0xb8>
          {
          oled_terminal.printf(".");
   13b96:	495b      	ldr	r1, [pc, #364]	; (13d04 <EC()+0x204>)
   13b98:	4858      	ldr	r0, [pc, #352]	; (13cfc <EC()+0x1fc>)
   13b9a:	f7ff fcf5 	bl	13588 <OledTerminal::printf(char const*, ...)>
          morse[word_count] = '.';
   13b9e:	4b58      	ldr	r3, [pc, #352]	; (13d00 <EC()+0x200>)
   13ba0:	681b      	ldr	r3, [r3, #0]
   13ba2:	4a52      	ldr	r2, [pc, #328]	; (13cec <EC()+0x1ec>)
   13ba4:	212e      	movs	r1, #46	; 0x2e
   13ba6:	54d1      	strb	r1, [r2, r3]
          word_count++;
   13ba8:	4b55      	ldr	r3, [pc, #340]	; (13d00 <EC()+0x200>)
   13baa:	681b      	ldr	r3, [r3, #0]
   13bac:	3301      	adds	r3, #1
   13bae:	4a54      	ldr	r2, [pc, #336]	; (13d00 <EC()+0x200>)
   13bb0:	6013      	str	r3, [r2, #0]
          count = 0; 
   13bb2:	4b50      	ldr	r3, [pc, #320]	; (13cf4 <EC()+0x1f4>)
   13bb4:	2200      	movs	r2, #0
   13bb6:	601a      	str	r2, [r3, #0]
       
          }
      }
  if(button2.ReadBool())
   13bb8:	4853      	ldr	r0, [pc, #332]	; (13d08 <EC()+0x208>)
   13bba:	f7fc fcc9 	bl	10550 <LabGPIO::ReadBool()>
   13bbe:	4603      	mov	r3, r0
   13bc0:	2b00      	cmp	r3, #0
   13bc2:	d042      	beq.n	13c4a <EC()+0x14a>
  { Delay(10);
   13bc4:	f04f 000a 	mov.w	r0, #10
   13bc8:	f04f 0100 	mov.w	r1, #0
   13bcc:	f7fd fac2 	bl	11154 <Delay(unsigned long long)>
      if(button2.ReadBool() != true){
   13bd0:	484d      	ldr	r0, [pc, #308]	; (13d08 <EC()+0x208>)
   13bd2:	f7fc fcbd 	bl	10550 <LabGPIO::ReadBool()>
   13bd6:	4603      	mov	r3, r0
   13bd8:	f083 0301 	eor.w	r3, r3, #1
   13bdc:	b2db      	uxtb	r3, r3
   13bde:	2b00      	cmp	r3, #0
   13be0:	d033      	beq.n	13c4a <EC()+0x14a>
    for(increment =1; increment<=word_count; increment++){
   13be2:	4b4a      	ldr	r3, [pc, #296]	; (13d0c <EC()+0x20c>)
   13be4:	2201      	movs	r2, #1
   13be6:	601a      	str	r2, [r3, #0]
   13be8:	4b48      	ldr	r3, [pc, #288]	; (13d0c <EC()+0x20c>)
   13bea:	681a      	ldr	r2, [r3, #0]
   13bec:	4b44      	ldr	r3, [pc, #272]	; (13d00 <EC()+0x200>)
   13bee:	681b      	ldr	r3, [r3, #0]
   13bf0:	429a      	cmp	r2, r3
   13bf2:	dc0e      	bgt.n	13c12 <EC()+0x112>
     printf("%c", morse[increment]);
   13bf4:	4b45      	ldr	r3, [pc, #276]	; (13d0c <EC()+0x20c>)
   13bf6:	681b      	ldr	r3, [r3, #0]
   13bf8:	4a3c      	ldr	r2, [pc, #240]	; (13cec <EC()+0x1ec>)
   13bfa:	5cd3      	ldrb	r3, [r2, r3]
   13bfc:	4618      	mov	r0, r3
   13bfe:	f002 fbf3 	bl	163e8 <putchar>
     morse_translate();
   13c02:	f000 f88f 	bl	13d24 <morse_translate()>
    for(increment =1; increment<=word_count; increment++){
   13c06:	4b41      	ldr	r3, [pc, #260]	; (13d0c <EC()+0x20c>)
   13c08:	681b      	ldr	r3, [r3, #0]
   13c0a:	3301      	adds	r3, #1
   13c0c:	4a3f      	ldr	r2, [pc, #252]	; (13d0c <EC()+0x20c>)
   13c0e:	6013      	str	r3, [r2, #0]
   13c10:	e7ea      	b.n	13be8 <EC()+0xe8>
    }
    printf("\n");
   13c12:	200a      	movs	r0, #10
   13c14:	f002 fbe8 	bl	163e8 <putchar>
    for(increment=1; increment<=translated_count;increment++)
   13c18:	4b3c      	ldr	r3, [pc, #240]	; (13d0c <EC()+0x20c>)
   13c1a:	2201      	movs	r2, #1
   13c1c:	601a      	str	r2, [r3, #0]
   13c1e:	4b3b      	ldr	r3, [pc, #236]	; (13d0c <EC()+0x20c>)
   13c20:	681a      	ldr	r2, [r3, #0]
   13c22:	4b3b      	ldr	r3, [pc, #236]	; (13d10 <EC()+0x210>)
   13c24:	681b      	ldr	r3, [r3, #0]
   13c26:	429a      	cmp	r2, r3
   13c28:	dc0c      	bgt.n	13c44 <EC()+0x144>
    {
        printf("%c", translated[increment]);
   13c2a:	4b38      	ldr	r3, [pc, #224]	; (13d0c <EC()+0x20c>)
   13c2c:	681b      	ldr	r3, [r3, #0]
   13c2e:	4a2e      	ldr	r2, [pc, #184]	; (13ce8 <EC()+0x1e8>)
   13c30:	5cd3      	ldrb	r3, [r2, r3]
   13c32:	4618      	mov	r0, r3
   13c34:	f002 fbd8 	bl	163e8 <putchar>
    for(increment=1; increment<=translated_count;increment++)
   13c38:	4b34      	ldr	r3, [pc, #208]	; (13d0c <EC()+0x20c>)
   13c3a:	681b      	ldr	r3, [r3, #0]
   13c3c:	3301      	adds	r3, #1
   13c3e:	4a33      	ldr	r2, [pc, #204]	; (13d0c <EC()+0x20c>)
   13c40:	6013      	str	r3, [r2, #0]
   13c42:	e7ec      	b.n	13c1e <EC()+0x11e>
    }
    
        oled_terminal.Clear();
   13c44:	482d      	ldr	r0, [pc, #180]	; (13cfc <EC()+0x1fc>)
   13c46:	f7ff fde5 	bl	13814 <OledTerminal::Clear()>
      }
      
  }
    if(button1.ReadBool())
   13c4a:	4832      	ldr	r0, [pc, #200]	; (13d14 <EC()+0x214>)
   13c4c:	f7fc fc80 	bl	10550 <LabGPIO::ReadBool()>
   13c50:	4603      	mov	r3, r0
   13c52:	2b00      	cmp	r3, #0
   13c54:	d01c      	beq.n	13c90 <EC()+0x190>
  { Delay(10);
   13c56:	f04f 000a 	mov.w	r0, #10
   13c5a:	f04f 0100 	mov.w	r1, #0
   13c5e:	f7fd fa79 	bl	11154 <Delay(unsigned long long)>
      if(button1.ReadBool() != true){
   13c62:	482c      	ldr	r0, [pc, #176]	; (13d14 <EC()+0x214>)
   13c64:	f7fc fc74 	bl	10550 <LabGPIO::ReadBool()>
   13c68:	4603      	mov	r3, r0
   13c6a:	f083 0301 	eor.w	r3, r3, #1
   13c6e:	b2db      	uxtb	r3, r3
   13c70:	2b00      	cmp	r3, #0
   13c72:	d00d      	beq.n	13c90 <EC()+0x190>
      oled_terminal.printf("&"); 
   13c74:	4928      	ldr	r1, [pc, #160]	; (13d18 <EC()+0x218>)
   13c76:	4821      	ldr	r0, [pc, #132]	; (13cfc <EC()+0x1fc>)
   13c78:	f7ff fc86 	bl	13588 <OledTerminal::printf(char const*, ...)>
      morse[word_count] = '&';
   13c7c:	4b20      	ldr	r3, [pc, #128]	; (13d00 <EC()+0x200>)
   13c7e:	681b      	ldr	r3, [r3, #0]
   13c80:	4a1a      	ldr	r2, [pc, #104]	; (13cec <EC()+0x1ec>)
   13c82:	2126      	movs	r1, #38	; 0x26
   13c84:	54d1      	strb	r1, [r2, r3]
          word_count++;
   13c86:	4b1e      	ldr	r3, [pc, #120]	; (13d00 <EC()+0x200>)
   13c88:	681b      	ldr	r3, [r3, #0]
   13c8a:	3301      	adds	r3, #1
   13c8c:	4a1c      	ldr	r2, [pc, #112]	; (13d00 <EC()+0x200>)
   13c8e:	6013      	str	r3, [r2, #0]
      }
      
  }
  if(button0.ReadBool())
   13c90:	4822      	ldr	r0, [pc, #136]	; (13d1c <EC()+0x21c>)
   13c92:	f7fc fc5d 	bl	10550 <LabGPIO::ReadBool()>
   13c96:	4603      	mov	r3, r0
   13c98:	2b00      	cmp	r3, #0
   13c9a:	d01c      	beq.n	13cd6 <EC()+0x1d6>
  { Delay(10);
   13c9c:	f04f 000a 	mov.w	r0, #10
   13ca0:	f04f 0100 	mov.w	r1, #0
   13ca4:	f7fd fa56 	bl	11154 <Delay(unsigned long long)>
      if(button0.ReadBool() != true){
   13ca8:	481c      	ldr	r0, [pc, #112]	; (13d1c <EC()+0x21c>)
   13caa:	f7fc fc51 	bl	10550 <LabGPIO::ReadBool()>
   13cae:	4603      	mov	r3, r0
   13cb0:	f083 0301 	eor.w	r3, r3, #1
   13cb4:	b2db      	uxtb	r3, r3
   13cb6:	2b00      	cmp	r3, #0
   13cb8:	d00d      	beq.n	13cd6 <EC()+0x1d6>
      oled_terminal.printf("|"); 
   13cba:	4919      	ldr	r1, [pc, #100]	; (13d20 <EC()+0x220>)
   13cbc:	480f      	ldr	r0, [pc, #60]	; (13cfc <EC()+0x1fc>)
   13cbe:	f7ff fc63 	bl	13588 <OledTerminal::printf(char const*, ...)>
      morse[word_count] = '|';
   13cc2:	4b0f      	ldr	r3, [pc, #60]	; (13d00 <EC()+0x200>)
   13cc4:	681b      	ldr	r3, [r3, #0]
   13cc6:	4a09      	ldr	r2, [pc, #36]	; (13cec <EC()+0x1ec>)
   13cc8:	217c      	movs	r1, #124	; 0x7c
   13cca:	54d1      	strb	r1, [r2, r3]
          word_count++;
   13ccc:	4b0c      	ldr	r3, [pc, #48]	; (13d00 <EC()+0x200>)
   13cce:	681b      	ldr	r3, [r3, #0]
   13cd0:	3301      	adds	r3, #1
   13cd2:	4a0b      	ldr	r2, [pc, #44]	; (13d00 <EC()+0x200>)
   13cd4:	6013      	str	r3, [r2, #0]
   13cd6:	4623      	mov	r3, r4
   13cd8:	4619      	mov	r1, r3
   13cda:	4802      	ldr	r0, [pc, #8]	; (13ce4 <EC()+0x1e4>)
   13cdc:	f002 fbe4 	bl	164a8 <__cyg_profile_func_exit>
      }
      
  }
   
}
   13ce0:	bf00      	nop
   13ce2:	bd10      	pop	{r4, pc}
   13ce4:	00013b01 	.word	0x00013b01
   13ce8:	10000b90 	.word	0x10000b90
   13cec:	100007a8 	.word	0x100007a8
   13cf0:	10000770 	.word	0x10000770
   13cf4:	100007a4 	.word	0x100007a4
   13cf8:	00019a34 	.word	0x00019a34
   13cfc:	10000bf4 	.word	0x10000bf4
   13d00:	1000045c 	.word	0x1000045c
   13d04:	00019a38 	.word	0x00019a38
   13d08:	10000778 	.word	0x10000778
   13d0c:	100007a0 	.word	0x100007a0
   13d10:	10000460 	.word	0x10000460
   13d14:	10000780 	.word	0x10000780
   13d18:	00019a3c 	.word	0x00019a3c
   13d1c:	10000788 	.word	0x10000788
   13d20:	00019a40 	.word	0x00019a40

00013d24 <morse_translate()>:
void morse_translate(){
   13d24:	b510      	push	{r4, lr}
   13d26:	4674      	mov	r4, lr
   13d28:	4623      	mov	r3, r4
   13d2a:	4619      	mov	r1, r3
   13d2c:	4893      	ldr	r0, [pc, #588]	; (13f7c <morse_translate()+0x258>)
   13d2e:	f002 fba7 	bl	16480 <__cyg_profile_func_enter>
if(morse[increment] =='|')
   13d32:	4b93      	ldr	r3, [pc, #588]	; (13f80 <morse_translate()+0x25c>)
   13d34:	681b      	ldr	r3, [r3, #0]
   13d36:	4a93      	ldr	r2, [pc, #588]	; (13f84 <morse_translate()+0x260>)
   13d38:	5cd3      	ldrb	r3, [r2, r3]
   13d3a:	2b7c      	cmp	r3, #124	; 0x7c
   13d3c:	d109      	bne.n	13d52 <morse_translate()+0x2e>
     {
         translated[translated_count]=' ';
   13d3e:	4b92      	ldr	r3, [pc, #584]	; (13f88 <morse_translate()+0x264>)
   13d40:	681b      	ldr	r3, [r3, #0]
   13d42:	4a92      	ldr	r2, [pc, #584]	; (13f8c <morse_translate()+0x268>)
   13d44:	2120      	movs	r1, #32
   13d46:	54d1      	strb	r1, [r2, r3]
         translated_count++;
   13d48:	4b8f      	ldr	r3, [pc, #572]	; (13f88 <morse_translate()+0x264>)
   13d4a:	681b      	ldr	r3, [r3, #0]
   13d4c:	3301      	adds	r3, #1
   13d4e:	4a8e      	ldr	r2, [pc, #568]	; (13f88 <morse_translate()+0x264>)
   13d50:	6013      	str	r3, [r2, #0]
     }
    if((morse[increment-3] =='&' || morse[increment-3] == '|' || morse[increment-3] == '?') && morse[increment-2] =='.' && morse[increment-1] == '-' && morse[increment] == '&'){
   13d52:	4b8b      	ldr	r3, [pc, #556]	; (13f80 <morse_translate()+0x25c>)
   13d54:	681b      	ldr	r3, [r3, #0]
   13d56:	3b03      	subs	r3, #3
   13d58:	4a8a      	ldr	r2, [pc, #552]	; (13f84 <morse_translate()+0x260>)
   13d5a:	5cd3      	ldrb	r3, [r2, r3]
   13d5c:	2b26      	cmp	r3, #38	; 0x26
   13d5e:	d00d      	beq.n	13d7c <morse_translate()+0x58>
   13d60:	4b87      	ldr	r3, [pc, #540]	; (13f80 <morse_translate()+0x25c>)
   13d62:	681b      	ldr	r3, [r3, #0]
   13d64:	3b03      	subs	r3, #3
   13d66:	4a87      	ldr	r2, [pc, #540]	; (13f84 <morse_translate()+0x260>)
   13d68:	5cd3      	ldrb	r3, [r2, r3]
   13d6a:	2b7c      	cmp	r3, #124	; 0x7c
   13d6c:	d006      	beq.n	13d7c <morse_translate()+0x58>
   13d6e:	4b84      	ldr	r3, [pc, #528]	; (13f80 <morse_translate()+0x25c>)
   13d70:	681b      	ldr	r3, [r3, #0]
   13d72:	3b03      	subs	r3, #3
   13d74:	4a83      	ldr	r2, [pc, #524]	; (13f84 <morse_translate()+0x260>)
   13d76:	5cd3      	ldrb	r3, [r2, r3]
   13d78:	2b3f      	cmp	r3, #63	; 0x3f
   13d7a:	d11d      	bne.n	13db8 <morse_translate()+0x94>
   13d7c:	4b80      	ldr	r3, [pc, #512]	; (13f80 <morse_translate()+0x25c>)
   13d7e:	681b      	ldr	r3, [r3, #0]
   13d80:	3b02      	subs	r3, #2
   13d82:	4a80      	ldr	r2, [pc, #512]	; (13f84 <morse_translate()+0x260>)
   13d84:	5cd3      	ldrb	r3, [r2, r3]
   13d86:	2b2e      	cmp	r3, #46	; 0x2e
   13d88:	d116      	bne.n	13db8 <morse_translate()+0x94>
   13d8a:	4b7d      	ldr	r3, [pc, #500]	; (13f80 <morse_translate()+0x25c>)
   13d8c:	681b      	ldr	r3, [r3, #0]
   13d8e:	3b01      	subs	r3, #1
   13d90:	4a7c      	ldr	r2, [pc, #496]	; (13f84 <morse_translate()+0x260>)
   13d92:	5cd3      	ldrb	r3, [r2, r3]
   13d94:	2b2d      	cmp	r3, #45	; 0x2d
   13d96:	d10f      	bne.n	13db8 <morse_translate()+0x94>
   13d98:	4b79      	ldr	r3, [pc, #484]	; (13f80 <morse_translate()+0x25c>)
   13d9a:	681b      	ldr	r3, [r3, #0]
   13d9c:	4a79      	ldr	r2, [pc, #484]	; (13f84 <morse_translate()+0x260>)
   13d9e:	5cd3      	ldrb	r3, [r2, r3]
   13da0:	2b26      	cmp	r3, #38	; 0x26
   13da2:	d109      	bne.n	13db8 <morse_translate()+0x94>
        translated[translated_count]='a';
   13da4:	4b78      	ldr	r3, [pc, #480]	; (13f88 <morse_translate()+0x264>)
   13da6:	681b      	ldr	r3, [r3, #0]
   13da8:	4a78      	ldr	r2, [pc, #480]	; (13f8c <morse_translate()+0x268>)
   13daa:	2161      	movs	r1, #97	; 0x61
   13dac:	54d1      	strb	r1, [r2, r3]
        translated_count++;
   13dae:	4b76      	ldr	r3, [pc, #472]	; (13f88 <morse_translate()+0x264>)
   13db0:	681b      	ldr	r3, [r3, #0]
   13db2:	3301      	adds	r3, #1
   13db4:	4a74      	ldr	r2, [pc, #464]	; (13f88 <morse_translate()+0x264>)
   13db6:	6013      	str	r3, [r2, #0]
        }
     if((morse[increment-5] =='&' || morse[increment-5] == '|' || morse[increment-5] == '?') && morse[increment-4] =='-' && morse[increment-3] == '.' && morse[increment-2] == '.' && morse[increment-1] == '.'  && morse[increment] == '&'){
   13db8:	4b71      	ldr	r3, [pc, #452]	; (13f80 <morse_translate()+0x25c>)
   13dba:	681b      	ldr	r3, [r3, #0]
   13dbc:	3b05      	subs	r3, #5
   13dbe:	4a71      	ldr	r2, [pc, #452]	; (13f84 <morse_translate()+0x260>)
   13dc0:	5cd3      	ldrb	r3, [r2, r3]
   13dc2:	2b26      	cmp	r3, #38	; 0x26
   13dc4:	d00d      	beq.n	13de2 <morse_translate()+0xbe>
   13dc6:	4b6e      	ldr	r3, [pc, #440]	; (13f80 <morse_translate()+0x25c>)
   13dc8:	681b      	ldr	r3, [r3, #0]
   13dca:	3b05      	subs	r3, #5
   13dcc:	4a6d      	ldr	r2, [pc, #436]	; (13f84 <morse_translate()+0x260>)
   13dce:	5cd3      	ldrb	r3, [r2, r3]
   13dd0:	2b7c      	cmp	r3, #124	; 0x7c
   13dd2:	d006      	beq.n	13de2 <morse_translate()+0xbe>
   13dd4:	4b6a      	ldr	r3, [pc, #424]	; (13f80 <morse_translate()+0x25c>)
   13dd6:	681b      	ldr	r3, [r3, #0]
   13dd8:	3b05      	subs	r3, #5
   13dda:	4a6a      	ldr	r2, [pc, #424]	; (13f84 <morse_translate()+0x260>)
   13ddc:	5cd3      	ldrb	r3, [r2, r3]
   13dde:	2b3f      	cmp	r3, #63	; 0x3f
   13de0:	d12b      	bne.n	13e3a <morse_translate()+0x116>
   13de2:	4b67      	ldr	r3, [pc, #412]	; (13f80 <morse_translate()+0x25c>)
   13de4:	681b      	ldr	r3, [r3, #0]
   13de6:	3b04      	subs	r3, #4
   13de8:	4a66      	ldr	r2, [pc, #408]	; (13f84 <morse_translate()+0x260>)
   13dea:	5cd3      	ldrb	r3, [r2, r3]
   13dec:	2b2d      	cmp	r3, #45	; 0x2d
   13dee:	d124      	bne.n	13e3a <morse_translate()+0x116>
   13df0:	4b63      	ldr	r3, [pc, #396]	; (13f80 <morse_translate()+0x25c>)
   13df2:	681b      	ldr	r3, [r3, #0]
   13df4:	3b03      	subs	r3, #3
   13df6:	4a63      	ldr	r2, [pc, #396]	; (13f84 <morse_translate()+0x260>)
   13df8:	5cd3      	ldrb	r3, [r2, r3]
   13dfa:	2b2e      	cmp	r3, #46	; 0x2e
   13dfc:	d11d      	bne.n	13e3a <morse_translate()+0x116>
   13dfe:	4b60      	ldr	r3, [pc, #384]	; (13f80 <morse_translate()+0x25c>)
   13e00:	681b      	ldr	r3, [r3, #0]
   13e02:	3b02      	subs	r3, #2
   13e04:	4a5f      	ldr	r2, [pc, #380]	; (13f84 <morse_translate()+0x260>)
   13e06:	5cd3      	ldrb	r3, [r2, r3]
   13e08:	2b2e      	cmp	r3, #46	; 0x2e
   13e0a:	d116      	bne.n	13e3a <morse_translate()+0x116>
   13e0c:	4b5c      	ldr	r3, [pc, #368]	; (13f80 <morse_translate()+0x25c>)
   13e0e:	681b      	ldr	r3, [r3, #0]
   13e10:	3b01      	subs	r3, #1
   13e12:	4a5c      	ldr	r2, [pc, #368]	; (13f84 <morse_translate()+0x260>)
   13e14:	5cd3      	ldrb	r3, [r2, r3]
   13e16:	2b2e      	cmp	r3, #46	; 0x2e
   13e18:	d10f      	bne.n	13e3a <morse_translate()+0x116>
   13e1a:	4b59      	ldr	r3, [pc, #356]	; (13f80 <morse_translate()+0x25c>)
   13e1c:	681b      	ldr	r3, [r3, #0]
   13e1e:	4a59      	ldr	r2, [pc, #356]	; (13f84 <morse_translate()+0x260>)
   13e20:	5cd3      	ldrb	r3, [r2, r3]
   13e22:	2b26      	cmp	r3, #38	; 0x26
   13e24:	d109      	bne.n	13e3a <morse_translate()+0x116>
        translated[translated_count]='b';
   13e26:	4b58      	ldr	r3, [pc, #352]	; (13f88 <morse_translate()+0x264>)
   13e28:	681b      	ldr	r3, [r3, #0]
   13e2a:	4a58      	ldr	r2, [pc, #352]	; (13f8c <morse_translate()+0x268>)
   13e2c:	2162      	movs	r1, #98	; 0x62
   13e2e:	54d1      	strb	r1, [r2, r3]
        translated_count++;
   13e30:	4b55      	ldr	r3, [pc, #340]	; (13f88 <morse_translate()+0x264>)
   13e32:	681b      	ldr	r3, [r3, #0]
   13e34:	3301      	adds	r3, #1
   13e36:	4a54      	ldr	r2, [pc, #336]	; (13f88 <morse_translate()+0x264>)
   13e38:	6013      	str	r3, [r2, #0]
        }
      if((morse[increment-5] =='&' || morse[increment-5] == '|' || morse[increment-5] == '?') && morse[increment-4] =='-' && morse[increment-3] == '.' && morse[increment-2] == '-' && morse[increment-1] == '.'  && morse[increment] == '&'){
   13e3a:	4b51      	ldr	r3, [pc, #324]	; (13f80 <morse_translate()+0x25c>)
   13e3c:	681b      	ldr	r3, [r3, #0]
   13e3e:	3b05      	subs	r3, #5
   13e40:	4a50      	ldr	r2, [pc, #320]	; (13f84 <morse_translate()+0x260>)
   13e42:	5cd3      	ldrb	r3, [r2, r3]
   13e44:	2b26      	cmp	r3, #38	; 0x26
   13e46:	d00d      	beq.n	13e64 <morse_translate()+0x140>
   13e48:	4b4d      	ldr	r3, [pc, #308]	; (13f80 <morse_translate()+0x25c>)
   13e4a:	681b      	ldr	r3, [r3, #0]
   13e4c:	3b05      	subs	r3, #5
   13e4e:	4a4d      	ldr	r2, [pc, #308]	; (13f84 <morse_translate()+0x260>)
   13e50:	5cd3      	ldrb	r3, [r2, r3]
   13e52:	2b7c      	cmp	r3, #124	; 0x7c
   13e54:	d006      	beq.n	13e64 <morse_translate()+0x140>
   13e56:	4b4a      	ldr	r3, [pc, #296]	; (13f80 <morse_translate()+0x25c>)
   13e58:	681b      	ldr	r3, [r3, #0]
   13e5a:	3b05      	subs	r3, #5
   13e5c:	4a49      	ldr	r2, [pc, #292]	; (13f84 <morse_translate()+0x260>)
   13e5e:	5cd3      	ldrb	r3, [r2, r3]
   13e60:	2b3f      	cmp	r3, #63	; 0x3f
   13e62:	d12b      	bne.n	13ebc <morse_translate()+0x198>
   13e64:	4b46      	ldr	r3, [pc, #280]	; (13f80 <morse_translate()+0x25c>)
   13e66:	681b      	ldr	r3, [r3, #0]
   13e68:	3b04      	subs	r3, #4
   13e6a:	4a46      	ldr	r2, [pc, #280]	; (13f84 <morse_translate()+0x260>)
   13e6c:	5cd3      	ldrb	r3, [r2, r3]
   13e6e:	2b2d      	cmp	r3, #45	; 0x2d
   13e70:	d124      	bne.n	13ebc <morse_translate()+0x198>
   13e72:	4b43      	ldr	r3, [pc, #268]	; (13f80 <morse_translate()+0x25c>)
   13e74:	681b      	ldr	r3, [r3, #0]
   13e76:	3b03      	subs	r3, #3
   13e78:	4a42      	ldr	r2, [pc, #264]	; (13f84 <morse_translate()+0x260>)
   13e7a:	5cd3      	ldrb	r3, [r2, r3]
   13e7c:	2b2e      	cmp	r3, #46	; 0x2e
   13e7e:	d11d      	bne.n	13ebc <morse_translate()+0x198>
   13e80:	4b3f      	ldr	r3, [pc, #252]	; (13f80 <morse_translate()+0x25c>)
   13e82:	681b      	ldr	r3, [r3, #0]
   13e84:	3b02      	subs	r3, #2
   13e86:	4a3f      	ldr	r2, [pc, #252]	; (13f84 <morse_translate()+0x260>)
   13e88:	5cd3      	ldrb	r3, [r2, r3]
   13e8a:	2b2d      	cmp	r3, #45	; 0x2d
   13e8c:	d116      	bne.n	13ebc <morse_translate()+0x198>
   13e8e:	4b3c      	ldr	r3, [pc, #240]	; (13f80 <morse_translate()+0x25c>)
   13e90:	681b      	ldr	r3, [r3, #0]
   13e92:	3b01      	subs	r3, #1
   13e94:	4a3b      	ldr	r2, [pc, #236]	; (13f84 <morse_translate()+0x260>)
   13e96:	5cd3      	ldrb	r3, [r2, r3]
   13e98:	2b2e      	cmp	r3, #46	; 0x2e
   13e9a:	d10f      	bne.n	13ebc <morse_translate()+0x198>
   13e9c:	4b38      	ldr	r3, [pc, #224]	; (13f80 <morse_translate()+0x25c>)
   13e9e:	681b      	ldr	r3, [r3, #0]
   13ea0:	4a38      	ldr	r2, [pc, #224]	; (13f84 <morse_translate()+0x260>)
   13ea2:	5cd3      	ldrb	r3, [r2, r3]
   13ea4:	2b26      	cmp	r3, #38	; 0x26
   13ea6:	d109      	bne.n	13ebc <morse_translate()+0x198>
        translated[translated_count]='c';
   13ea8:	4b37      	ldr	r3, [pc, #220]	; (13f88 <morse_translate()+0x264>)
   13eaa:	681b      	ldr	r3, [r3, #0]
   13eac:	4a37      	ldr	r2, [pc, #220]	; (13f8c <morse_translate()+0x268>)
   13eae:	2163      	movs	r1, #99	; 0x63
   13eb0:	54d1      	strb	r1, [r2, r3]
        translated_count++;
   13eb2:	4b35      	ldr	r3, [pc, #212]	; (13f88 <morse_translate()+0x264>)
   13eb4:	681b      	ldr	r3, [r3, #0]
   13eb6:	3301      	adds	r3, #1
   13eb8:	4a33      	ldr	r2, [pc, #204]	; (13f88 <morse_translate()+0x264>)
   13eba:	6013      	str	r3, [r2, #0]
        }
       if((morse[increment-4] =='&' || morse[increment-4] == '|' || morse[increment-4] == '?') &&  morse[increment-3] == '-' && morse[increment-2] == '.' && morse[increment-1] == '.'  && morse[increment] == '&'){
   13ebc:	4b30      	ldr	r3, [pc, #192]	; (13f80 <morse_translate()+0x25c>)
   13ebe:	681b      	ldr	r3, [r3, #0]
   13ec0:	3b04      	subs	r3, #4
   13ec2:	4a30      	ldr	r2, [pc, #192]	; (13f84 <morse_translate()+0x260>)
   13ec4:	5cd3      	ldrb	r3, [r2, r3]
   13ec6:	2b26      	cmp	r3, #38	; 0x26
   13ec8:	d00d      	beq.n	13ee6 <morse_translate()+0x1c2>
   13eca:	4b2d      	ldr	r3, [pc, #180]	; (13f80 <morse_translate()+0x25c>)
   13ecc:	681b      	ldr	r3, [r3, #0]
   13ece:	3b04      	subs	r3, #4
   13ed0:	4a2c      	ldr	r2, [pc, #176]	; (13f84 <morse_translate()+0x260>)
   13ed2:	5cd3      	ldrb	r3, [r2, r3]
   13ed4:	2b7c      	cmp	r3, #124	; 0x7c
   13ed6:	d006      	beq.n	13ee6 <morse_translate()+0x1c2>
   13ed8:	4b29      	ldr	r3, [pc, #164]	; (13f80 <morse_translate()+0x25c>)
   13eda:	681b      	ldr	r3, [r3, #0]
   13edc:	3b04      	subs	r3, #4
   13ede:	4a29      	ldr	r2, [pc, #164]	; (13f84 <morse_translate()+0x260>)
   13ee0:	5cd3      	ldrb	r3, [r2, r3]
   13ee2:	2b3f      	cmp	r3, #63	; 0x3f
   13ee4:	d124      	bne.n	13f30 <morse_translate()+0x20c>
   13ee6:	4b26      	ldr	r3, [pc, #152]	; (13f80 <morse_translate()+0x25c>)
   13ee8:	681b      	ldr	r3, [r3, #0]
   13eea:	3b03      	subs	r3, #3
   13eec:	4a25      	ldr	r2, [pc, #148]	; (13f84 <morse_translate()+0x260>)
   13eee:	5cd3      	ldrb	r3, [r2, r3]
   13ef0:	2b2d      	cmp	r3, #45	; 0x2d
   13ef2:	d11d      	bne.n	13f30 <morse_translate()+0x20c>
   13ef4:	4b22      	ldr	r3, [pc, #136]	; (13f80 <morse_translate()+0x25c>)
   13ef6:	681b      	ldr	r3, [r3, #0]
   13ef8:	3b02      	subs	r3, #2
   13efa:	4a22      	ldr	r2, [pc, #136]	; (13f84 <morse_translate()+0x260>)
   13efc:	5cd3      	ldrb	r3, [r2, r3]
   13efe:	2b2e      	cmp	r3, #46	; 0x2e
   13f00:	d116      	bne.n	13f30 <morse_translate()+0x20c>
   13f02:	4b1f      	ldr	r3, [pc, #124]	; (13f80 <morse_translate()+0x25c>)
   13f04:	681b      	ldr	r3, [r3, #0]
   13f06:	3b01      	subs	r3, #1
   13f08:	4a1e      	ldr	r2, [pc, #120]	; (13f84 <morse_translate()+0x260>)
   13f0a:	5cd3      	ldrb	r3, [r2, r3]
   13f0c:	2b2e      	cmp	r3, #46	; 0x2e
   13f0e:	d10f      	bne.n	13f30 <morse_translate()+0x20c>
   13f10:	4b1b      	ldr	r3, [pc, #108]	; (13f80 <morse_translate()+0x25c>)
   13f12:	681b      	ldr	r3, [r3, #0]
   13f14:	4a1b      	ldr	r2, [pc, #108]	; (13f84 <morse_translate()+0x260>)
   13f16:	5cd3      	ldrb	r3, [r2, r3]
   13f18:	2b26      	cmp	r3, #38	; 0x26
   13f1a:	d109      	bne.n	13f30 <morse_translate()+0x20c>
        translated[translated_count]='d';
   13f1c:	4b1a      	ldr	r3, [pc, #104]	; (13f88 <morse_translate()+0x264>)
   13f1e:	681b      	ldr	r3, [r3, #0]
   13f20:	4a1a      	ldr	r2, [pc, #104]	; (13f8c <morse_translate()+0x268>)
   13f22:	2164      	movs	r1, #100	; 0x64
   13f24:	54d1      	strb	r1, [r2, r3]
        translated_count++;
   13f26:	4b18      	ldr	r3, [pc, #96]	; (13f88 <morse_translate()+0x264>)
   13f28:	681b      	ldr	r3, [r3, #0]
   13f2a:	3301      	adds	r3, #1
   13f2c:	4a16      	ldr	r2, [pc, #88]	; (13f88 <morse_translate()+0x264>)
   13f2e:	6013      	str	r3, [r2, #0]
        }
        if((morse[increment-2] =='&' || morse[increment-2] == '?' || morse[increment-2] == '|') && morse[increment-1] =='.'&& morse[increment] =='&')
   13f30:	4b13      	ldr	r3, [pc, #76]	; (13f80 <morse_translate()+0x25c>)
   13f32:	681b      	ldr	r3, [r3, #0]
   13f34:	3b02      	subs	r3, #2
   13f36:	4a13      	ldr	r2, [pc, #76]	; (13f84 <morse_translate()+0x260>)
   13f38:	5cd3      	ldrb	r3, [r2, r3]
   13f3a:	2b26      	cmp	r3, #38	; 0x26
   13f3c:	d00d      	beq.n	13f5a <morse_translate()+0x236>
   13f3e:	4b10      	ldr	r3, [pc, #64]	; (13f80 <morse_translate()+0x25c>)
   13f40:	681b      	ldr	r3, [r3, #0]
   13f42:	3b02      	subs	r3, #2
   13f44:	4a0f      	ldr	r2, [pc, #60]	; (13f84 <morse_translate()+0x260>)
   13f46:	5cd3      	ldrb	r3, [r2, r3]
   13f48:	2b3f      	cmp	r3, #63	; 0x3f
   13f4a:	d006      	beq.n	13f5a <morse_translate()+0x236>
   13f4c:	4b0c      	ldr	r3, [pc, #48]	; (13f80 <morse_translate()+0x25c>)
   13f4e:	681b      	ldr	r3, [r3, #0]
   13f50:	3b02      	subs	r3, #2
   13f52:	4a0c      	ldr	r2, [pc, #48]	; (13f84 <morse_translate()+0x260>)
   13f54:	5cd3      	ldrb	r3, [r2, r3]
   13f56:	2b7c      	cmp	r3, #124	; 0x7c
   13f58:	d122      	bne.n	13fa0 <morse_translate()+0x27c>
   13f5a:	4b09      	ldr	r3, [pc, #36]	; (13f80 <morse_translate()+0x25c>)
   13f5c:	681b      	ldr	r3, [r3, #0]
   13f5e:	3b01      	subs	r3, #1
   13f60:	4a08      	ldr	r2, [pc, #32]	; (13f84 <morse_translate()+0x260>)
   13f62:	5cd3      	ldrb	r3, [r2, r3]
   13f64:	2b2e      	cmp	r3, #46	; 0x2e
   13f66:	d11b      	bne.n	13fa0 <morse_translate()+0x27c>
   13f68:	4b05      	ldr	r3, [pc, #20]	; (13f80 <morse_translate()+0x25c>)
   13f6a:	681b      	ldr	r3, [r3, #0]
   13f6c:	4a05      	ldr	r2, [pc, #20]	; (13f84 <morse_translate()+0x260>)
   13f6e:	5cd3      	ldrb	r3, [r2, r3]
   13f70:	2b26      	cmp	r3, #38	; 0x26
   13f72:	d115      	bne.n	13fa0 <morse_translate()+0x27c>
        {
         translated[translated_count]='e';
   13f74:	4b04      	ldr	r3, [pc, #16]	; (13f88 <morse_translate()+0x264>)
   13f76:	681b      	ldr	r3, [r3, #0]
   13f78:	e00a      	b.n	13f90 <morse_translate()+0x26c>
   13f7a:	bf00      	nop
   13f7c:	00013d25 	.word	0x00013d25
   13f80:	100007a0 	.word	0x100007a0
   13f84:	100007a8 	.word	0x100007a8
   13f88:	10000460 	.word	0x10000460
   13f8c:	10000b90 	.word	0x10000b90
   13f90:	4a93      	ldr	r2, [pc, #588]	; (141e0 <morse_translate()+0x4bc>)
   13f92:	2165      	movs	r1, #101	; 0x65
   13f94:	54d1      	strb	r1, [r2, r3]
         translated_count++;
   13f96:	4b93      	ldr	r3, [pc, #588]	; (141e4 <morse_translate()+0x4c0>)
   13f98:	681b      	ldr	r3, [r3, #0]
   13f9a:	3301      	adds	r3, #1
   13f9c:	4a91      	ldr	r2, [pc, #580]	; (141e4 <morse_translate()+0x4c0>)
   13f9e:	6013      	str	r3, [r2, #0]
        }
        if((morse[increment-5] =='&' || morse[increment-5] == '|' || morse[increment-5] == '?') && morse[increment-4] =='.' && morse[increment-3] == '.' && morse[increment-2] == '-' && morse[increment-1] == '.'  && morse[increment] == '&'){
   13fa0:	4b91      	ldr	r3, [pc, #580]	; (141e8 <morse_translate()+0x4c4>)
   13fa2:	681b      	ldr	r3, [r3, #0]
   13fa4:	3b05      	subs	r3, #5
   13fa6:	4a91      	ldr	r2, [pc, #580]	; (141ec <morse_translate()+0x4c8>)
   13fa8:	5cd3      	ldrb	r3, [r2, r3]
   13faa:	2b26      	cmp	r3, #38	; 0x26
   13fac:	d00d      	beq.n	13fca <morse_translate()+0x2a6>
   13fae:	4b8e      	ldr	r3, [pc, #568]	; (141e8 <morse_translate()+0x4c4>)
   13fb0:	681b      	ldr	r3, [r3, #0]
   13fb2:	3b05      	subs	r3, #5
   13fb4:	4a8d      	ldr	r2, [pc, #564]	; (141ec <morse_translate()+0x4c8>)
   13fb6:	5cd3      	ldrb	r3, [r2, r3]
   13fb8:	2b7c      	cmp	r3, #124	; 0x7c
   13fba:	d006      	beq.n	13fca <morse_translate()+0x2a6>
   13fbc:	4b8a      	ldr	r3, [pc, #552]	; (141e8 <morse_translate()+0x4c4>)
   13fbe:	681b      	ldr	r3, [r3, #0]
   13fc0:	3b05      	subs	r3, #5
   13fc2:	4a8a      	ldr	r2, [pc, #552]	; (141ec <morse_translate()+0x4c8>)
   13fc4:	5cd3      	ldrb	r3, [r2, r3]
   13fc6:	2b3f      	cmp	r3, #63	; 0x3f
   13fc8:	d12b      	bne.n	14022 <morse_translate()+0x2fe>
   13fca:	4b87      	ldr	r3, [pc, #540]	; (141e8 <morse_translate()+0x4c4>)
   13fcc:	681b      	ldr	r3, [r3, #0]
   13fce:	3b04      	subs	r3, #4
   13fd0:	4a86      	ldr	r2, [pc, #536]	; (141ec <morse_translate()+0x4c8>)
   13fd2:	5cd3      	ldrb	r3, [r2, r3]
   13fd4:	2b2e      	cmp	r3, #46	; 0x2e
   13fd6:	d124      	bne.n	14022 <morse_translate()+0x2fe>
   13fd8:	4b83      	ldr	r3, [pc, #524]	; (141e8 <morse_translate()+0x4c4>)
   13fda:	681b      	ldr	r3, [r3, #0]
   13fdc:	3b03      	subs	r3, #3
   13fde:	4a83      	ldr	r2, [pc, #524]	; (141ec <morse_translate()+0x4c8>)
   13fe0:	5cd3      	ldrb	r3, [r2, r3]
   13fe2:	2b2e      	cmp	r3, #46	; 0x2e
   13fe4:	d11d      	bne.n	14022 <morse_translate()+0x2fe>
   13fe6:	4b80      	ldr	r3, [pc, #512]	; (141e8 <morse_translate()+0x4c4>)
   13fe8:	681b      	ldr	r3, [r3, #0]
   13fea:	3b02      	subs	r3, #2
   13fec:	4a7f      	ldr	r2, [pc, #508]	; (141ec <morse_translate()+0x4c8>)
   13fee:	5cd3      	ldrb	r3, [r2, r3]
   13ff0:	2b2d      	cmp	r3, #45	; 0x2d
   13ff2:	d116      	bne.n	14022 <morse_translate()+0x2fe>
   13ff4:	4b7c      	ldr	r3, [pc, #496]	; (141e8 <morse_translate()+0x4c4>)
   13ff6:	681b      	ldr	r3, [r3, #0]
   13ff8:	3b01      	subs	r3, #1
   13ffa:	4a7c      	ldr	r2, [pc, #496]	; (141ec <morse_translate()+0x4c8>)
   13ffc:	5cd3      	ldrb	r3, [r2, r3]
   13ffe:	2b2e      	cmp	r3, #46	; 0x2e
   14000:	d10f      	bne.n	14022 <morse_translate()+0x2fe>
   14002:	4b79      	ldr	r3, [pc, #484]	; (141e8 <morse_translate()+0x4c4>)
   14004:	681b      	ldr	r3, [r3, #0]
   14006:	4a79      	ldr	r2, [pc, #484]	; (141ec <morse_translate()+0x4c8>)
   14008:	5cd3      	ldrb	r3, [r2, r3]
   1400a:	2b26      	cmp	r3, #38	; 0x26
   1400c:	d109      	bne.n	14022 <morse_translate()+0x2fe>
        translated[translated_count]='f';
   1400e:	4b75      	ldr	r3, [pc, #468]	; (141e4 <morse_translate()+0x4c0>)
   14010:	681b      	ldr	r3, [r3, #0]
   14012:	4a73      	ldr	r2, [pc, #460]	; (141e0 <morse_translate()+0x4bc>)
   14014:	2166      	movs	r1, #102	; 0x66
   14016:	54d1      	strb	r1, [r2, r3]
        translated_count++;
   14018:	4b72      	ldr	r3, [pc, #456]	; (141e4 <morse_translate()+0x4c0>)
   1401a:	681b      	ldr	r3, [r3, #0]
   1401c:	3301      	adds	r3, #1
   1401e:	4a71      	ldr	r2, [pc, #452]	; (141e4 <morse_translate()+0x4c0>)
   14020:	6013      	str	r3, [r2, #0]
        }
       if((morse[increment-5] =='&' || morse[increment-5] == '|' || morse[increment-5] == '?') && morse[increment-4] =='.' && morse[increment-3] == '.' && morse[increment-2] == '.' && morse[increment-1] == '.'  && morse[increment] == '&'){
   14022:	4b71      	ldr	r3, [pc, #452]	; (141e8 <morse_translate()+0x4c4>)
   14024:	681b      	ldr	r3, [r3, #0]
   14026:	3b05      	subs	r3, #5
   14028:	4a70      	ldr	r2, [pc, #448]	; (141ec <morse_translate()+0x4c8>)
   1402a:	5cd3      	ldrb	r3, [r2, r3]
   1402c:	2b26      	cmp	r3, #38	; 0x26
   1402e:	d00d      	beq.n	1404c <morse_translate()+0x328>
   14030:	4b6d      	ldr	r3, [pc, #436]	; (141e8 <morse_translate()+0x4c4>)
   14032:	681b      	ldr	r3, [r3, #0]
   14034:	3b05      	subs	r3, #5
   14036:	4a6d      	ldr	r2, [pc, #436]	; (141ec <morse_translate()+0x4c8>)
   14038:	5cd3      	ldrb	r3, [r2, r3]
   1403a:	2b7c      	cmp	r3, #124	; 0x7c
   1403c:	d006      	beq.n	1404c <morse_translate()+0x328>
   1403e:	4b6a      	ldr	r3, [pc, #424]	; (141e8 <morse_translate()+0x4c4>)
   14040:	681b      	ldr	r3, [r3, #0]
   14042:	3b05      	subs	r3, #5
   14044:	4a69      	ldr	r2, [pc, #420]	; (141ec <morse_translate()+0x4c8>)
   14046:	5cd3      	ldrb	r3, [r2, r3]
   14048:	2b3f      	cmp	r3, #63	; 0x3f
   1404a:	d12b      	bne.n	140a4 <morse_translate()+0x380>
   1404c:	4b66      	ldr	r3, [pc, #408]	; (141e8 <morse_translate()+0x4c4>)
   1404e:	681b      	ldr	r3, [r3, #0]
   14050:	3b04      	subs	r3, #4
   14052:	4a66      	ldr	r2, [pc, #408]	; (141ec <morse_translate()+0x4c8>)
   14054:	5cd3      	ldrb	r3, [r2, r3]
   14056:	2b2e      	cmp	r3, #46	; 0x2e
   14058:	d124      	bne.n	140a4 <morse_translate()+0x380>
   1405a:	4b63      	ldr	r3, [pc, #396]	; (141e8 <morse_translate()+0x4c4>)
   1405c:	681b      	ldr	r3, [r3, #0]
   1405e:	3b03      	subs	r3, #3
   14060:	4a62      	ldr	r2, [pc, #392]	; (141ec <morse_translate()+0x4c8>)
   14062:	5cd3      	ldrb	r3, [r2, r3]
   14064:	2b2e      	cmp	r3, #46	; 0x2e
   14066:	d11d      	bne.n	140a4 <morse_translate()+0x380>
   14068:	4b5f      	ldr	r3, [pc, #380]	; (141e8 <morse_translate()+0x4c4>)
   1406a:	681b      	ldr	r3, [r3, #0]
   1406c:	3b02      	subs	r3, #2
   1406e:	4a5f      	ldr	r2, [pc, #380]	; (141ec <morse_translate()+0x4c8>)
   14070:	5cd3      	ldrb	r3, [r2, r3]
   14072:	2b2e      	cmp	r3, #46	; 0x2e
   14074:	d116      	bne.n	140a4 <morse_translate()+0x380>
   14076:	4b5c      	ldr	r3, [pc, #368]	; (141e8 <morse_translate()+0x4c4>)
   14078:	681b      	ldr	r3, [r3, #0]
   1407a:	3b01      	subs	r3, #1
   1407c:	4a5b      	ldr	r2, [pc, #364]	; (141ec <morse_translate()+0x4c8>)
   1407e:	5cd3      	ldrb	r3, [r2, r3]
   14080:	2b2e      	cmp	r3, #46	; 0x2e
   14082:	d10f      	bne.n	140a4 <morse_translate()+0x380>
   14084:	4b58      	ldr	r3, [pc, #352]	; (141e8 <morse_translate()+0x4c4>)
   14086:	681b      	ldr	r3, [r3, #0]
   14088:	4a58      	ldr	r2, [pc, #352]	; (141ec <morse_translate()+0x4c8>)
   1408a:	5cd3      	ldrb	r3, [r2, r3]
   1408c:	2b26      	cmp	r3, #38	; 0x26
   1408e:	d109      	bne.n	140a4 <morse_translate()+0x380>
        translated[translated_count]='h';
   14090:	4b54      	ldr	r3, [pc, #336]	; (141e4 <morse_translate()+0x4c0>)
   14092:	681b      	ldr	r3, [r3, #0]
   14094:	4a52      	ldr	r2, [pc, #328]	; (141e0 <morse_translate()+0x4bc>)
   14096:	2168      	movs	r1, #104	; 0x68
   14098:	54d1      	strb	r1, [r2, r3]
        translated_count++;
   1409a:	4b52      	ldr	r3, [pc, #328]	; (141e4 <morse_translate()+0x4c0>)
   1409c:	681b      	ldr	r3, [r3, #0]
   1409e:	3301      	adds	r3, #1
   140a0:	4a50      	ldr	r2, [pc, #320]	; (141e4 <morse_translate()+0x4c0>)
   140a2:	6013      	str	r3, [r2, #0]
        }
       if((morse[increment-3] =='&' || morse[increment-3] == '|' || morse[increment-3] == '?') && morse[increment-2] =='.' && morse[increment-1] == '.' && morse[increment] == '&'){
   140a4:	4b50      	ldr	r3, [pc, #320]	; (141e8 <morse_translate()+0x4c4>)
   140a6:	681b      	ldr	r3, [r3, #0]
   140a8:	3b03      	subs	r3, #3
   140aa:	4a50      	ldr	r2, [pc, #320]	; (141ec <morse_translate()+0x4c8>)
   140ac:	5cd3      	ldrb	r3, [r2, r3]
   140ae:	2b26      	cmp	r3, #38	; 0x26
   140b0:	d00d      	beq.n	140ce <morse_translate()+0x3aa>
   140b2:	4b4d      	ldr	r3, [pc, #308]	; (141e8 <morse_translate()+0x4c4>)
   140b4:	681b      	ldr	r3, [r3, #0]
   140b6:	3b03      	subs	r3, #3
   140b8:	4a4c      	ldr	r2, [pc, #304]	; (141ec <morse_translate()+0x4c8>)
   140ba:	5cd3      	ldrb	r3, [r2, r3]
   140bc:	2b7c      	cmp	r3, #124	; 0x7c
   140be:	d006      	beq.n	140ce <morse_translate()+0x3aa>
   140c0:	4b49      	ldr	r3, [pc, #292]	; (141e8 <morse_translate()+0x4c4>)
   140c2:	681b      	ldr	r3, [r3, #0]
   140c4:	3b03      	subs	r3, #3
   140c6:	4a49      	ldr	r2, [pc, #292]	; (141ec <morse_translate()+0x4c8>)
   140c8:	5cd3      	ldrb	r3, [r2, r3]
   140ca:	2b3f      	cmp	r3, #63	; 0x3f
   140cc:	d11d      	bne.n	1410a <morse_translate()+0x3e6>
   140ce:	4b46      	ldr	r3, [pc, #280]	; (141e8 <morse_translate()+0x4c4>)
   140d0:	681b      	ldr	r3, [r3, #0]
   140d2:	3b02      	subs	r3, #2
   140d4:	4a45      	ldr	r2, [pc, #276]	; (141ec <morse_translate()+0x4c8>)
   140d6:	5cd3      	ldrb	r3, [r2, r3]
   140d8:	2b2e      	cmp	r3, #46	; 0x2e
   140da:	d116      	bne.n	1410a <morse_translate()+0x3e6>
   140dc:	4b42      	ldr	r3, [pc, #264]	; (141e8 <morse_translate()+0x4c4>)
   140de:	681b      	ldr	r3, [r3, #0]
   140e0:	3b01      	subs	r3, #1
   140e2:	4a42      	ldr	r2, [pc, #264]	; (141ec <morse_translate()+0x4c8>)
   140e4:	5cd3      	ldrb	r3, [r2, r3]
   140e6:	2b2e      	cmp	r3, #46	; 0x2e
   140e8:	d10f      	bne.n	1410a <morse_translate()+0x3e6>
   140ea:	4b3f      	ldr	r3, [pc, #252]	; (141e8 <morse_translate()+0x4c4>)
   140ec:	681b      	ldr	r3, [r3, #0]
   140ee:	4a3f      	ldr	r2, [pc, #252]	; (141ec <morse_translate()+0x4c8>)
   140f0:	5cd3      	ldrb	r3, [r2, r3]
   140f2:	2b26      	cmp	r3, #38	; 0x26
   140f4:	d109      	bne.n	1410a <morse_translate()+0x3e6>
        translated[translated_count]='i';
   140f6:	4b3b      	ldr	r3, [pc, #236]	; (141e4 <morse_translate()+0x4c0>)
   140f8:	681b      	ldr	r3, [r3, #0]
   140fa:	4a39      	ldr	r2, [pc, #228]	; (141e0 <morse_translate()+0x4bc>)
   140fc:	2169      	movs	r1, #105	; 0x69
   140fe:	54d1      	strb	r1, [r2, r3]
        translated_count++;
   14100:	4b38      	ldr	r3, [pc, #224]	; (141e4 <morse_translate()+0x4c0>)
   14102:	681b      	ldr	r3, [r3, #0]
   14104:	3301      	adds	r3, #1
   14106:	4a37      	ldr	r2, [pc, #220]	; (141e4 <morse_translate()+0x4c0>)
   14108:	6013      	str	r3, [r2, #0]
        }
        if((morse[increment-5] =='&' || morse[increment-5] == '|' || morse[increment-5] == '?') && morse[increment-4] =='.' && morse[increment-3] == '-' && morse[increment-2] == '-' && morse[increment-1] == '-'  && morse[increment] == '&'){
   1410a:	4b37      	ldr	r3, [pc, #220]	; (141e8 <morse_translate()+0x4c4>)
   1410c:	681b      	ldr	r3, [r3, #0]
   1410e:	3b05      	subs	r3, #5
   14110:	4a36      	ldr	r2, [pc, #216]	; (141ec <morse_translate()+0x4c8>)
   14112:	5cd3      	ldrb	r3, [r2, r3]
   14114:	2b26      	cmp	r3, #38	; 0x26
   14116:	d00d      	beq.n	14134 <morse_translate()+0x410>
   14118:	4b33      	ldr	r3, [pc, #204]	; (141e8 <morse_translate()+0x4c4>)
   1411a:	681b      	ldr	r3, [r3, #0]
   1411c:	3b05      	subs	r3, #5
   1411e:	4a33      	ldr	r2, [pc, #204]	; (141ec <morse_translate()+0x4c8>)
   14120:	5cd3      	ldrb	r3, [r2, r3]
   14122:	2b7c      	cmp	r3, #124	; 0x7c
   14124:	d006      	beq.n	14134 <morse_translate()+0x410>
   14126:	4b30      	ldr	r3, [pc, #192]	; (141e8 <morse_translate()+0x4c4>)
   14128:	681b      	ldr	r3, [r3, #0]
   1412a:	3b05      	subs	r3, #5
   1412c:	4a2f      	ldr	r2, [pc, #188]	; (141ec <morse_translate()+0x4c8>)
   1412e:	5cd3      	ldrb	r3, [r2, r3]
   14130:	2b3f      	cmp	r3, #63	; 0x3f
   14132:	d12b      	bne.n	1418c <morse_translate()+0x468>
   14134:	4b2c      	ldr	r3, [pc, #176]	; (141e8 <morse_translate()+0x4c4>)
   14136:	681b      	ldr	r3, [r3, #0]
   14138:	3b04      	subs	r3, #4
   1413a:	4a2c      	ldr	r2, [pc, #176]	; (141ec <morse_translate()+0x4c8>)
   1413c:	5cd3      	ldrb	r3, [r2, r3]
   1413e:	2b2e      	cmp	r3, #46	; 0x2e
   14140:	d124      	bne.n	1418c <morse_translate()+0x468>
   14142:	4b29      	ldr	r3, [pc, #164]	; (141e8 <morse_translate()+0x4c4>)
   14144:	681b      	ldr	r3, [r3, #0]
   14146:	3b03      	subs	r3, #3
   14148:	4a28      	ldr	r2, [pc, #160]	; (141ec <morse_translate()+0x4c8>)
   1414a:	5cd3      	ldrb	r3, [r2, r3]
   1414c:	2b2d      	cmp	r3, #45	; 0x2d
   1414e:	d11d      	bne.n	1418c <morse_translate()+0x468>
   14150:	4b25      	ldr	r3, [pc, #148]	; (141e8 <morse_translate()+0x4c4>)
   14152:	681b      	ldr	r3, [r3, #0]
   14154:	3b02      	subs	r3, #2
   14156:	4a25      	ldr	r2, [pc, #148]	; (141ec <morse_translate()+0x4c8>)
   14158:	5cd3      	ldrb	r3, [r2, r3]
   1415a:	2b2d      	cmp	r3, #45	; 0x2d
   1415c:	d116      	bne.n	1418c <morse_translate()+0x468>
   1415e:	4b22      	ldr	r3, [pc, #136]	; (141e8 <morse_translate()+0x4c4>)
   14160:	681b      	ldr	r3, [r3, #0]
   14162:	3b01      	subs	r3, #1
   14164:	4a21      	ldr	r2, [pc, #132]	; (141ec <morse_translate()+0x4c8>)
   14166:	5cd3      	ldrb	r3, [r2, r3]
   14168:	2b2d      	cmp	r3, #45	; 0x2d
   1416a:	d10f      	bne.n	1418c <morse_translate()+0x468>
   1416c:	4b1e      	ldr	r3, [pc, #120]	; (141e8 <morse_translate()+0x4c4>)
   1416e:	681b      	ldr	r3, [r3, #0]
   14170:	4a1e      	ldr	r2, [pc, #120]	; (141ec <morse_translate()+0x4c8>)
   14172:	5cd3      	ldrb	r3, [r2, r3]
   14174:	2b26      	cmp	r3, #38	; 0x26
   14176:	d109      	bne.n	1418c <morse_translate()+0x468>
        translated[translated_count]='j';
   14178:	4b1a      	ldr	r3, [pc, #104]	; (141e4 <morse_translate()+0x4c0>)
   1417a:	681b      	ldr	r3, [r3, #0]
   1417c:	4a18      	ldr	r2, [pc, #96]	; (141e0 <morse_translate()+0x4bc>)
   1417e:	216a      	movs	r1, #106	; 0x6a
   14180:	54d1      	strb	r1, [r2, r3]
        translated_count++;
   14182:	4b18      	ldr	r3, [pc, #96]	; (141e4 <morse_translate()+0x4c0>)
   14184:	681b      	ldr	r3, [r3, #0]
   14186:	3301      	adds	r3, #1
   14188:	4a16      	ldr	r2, [pc, #88]	; (141e4 <morse_translate()+0x4c0>)
   1418a:	6013      	str	r3, [r2, #0]
        }
        if( (morse[increment-4] =='&' || morse[increment-4] == '|' || morse[increment-4] == '?') && morse[increment-3] == '-' && morse[increment-2] == '.' && morse[increment-1] == '-'  && morse[increment] == '&'){
   1418c:	4b16      	ldr	r3, [pc, #88]	; (141e8 <morse_translate()+0x4c4>)
   1418e:	681b      	ldr	r3, [r3, #0]
   14190:	3b04      	subs	r3, #4
   14192:	4a16      	ldr	r2, [pc, #88]	; (141ec <morse_translate()+0x4c8>)
   14194:	5cd3      	ldrb	r3, [r2, r3]
   14196:	2b26      	cmp	r3, #38	; 0x26
   14198:	d00d      	beq.n	141b6 <morse_translate()+0x492>
   1419a:	4b13      	ldr	r3, [pc, #76]	; (141e8 <morse_translate()+0x4c4>)
   1419c:	681b      	ldr	r3, [r3, #0]
   1419e:	3b04      	subs	r3, #4
   141a0:	4a12      	ldr	r2, [pc, #72]	; (141ec <morse_translate()+0x4c8>)
   141a2:	5cd3      	ldrb	r3, [r2, r3]
   141a4:	2b7c      	cmp	r3, #124	; 0x7c
   141a6:	d006      	beq.n	141b6 <morse_translate()+0x492>
   141a8:	4b0f      	ldr	r3, [pc, #60]	; (141e8 <morse_translate()+0x4c4>)
   141aa:	681b      	ldr	r3, [r3, #0]
   141ac:	3b04      	subs	r3, #4
   141ae:	4a0f      	ldr	r2, [pc, #60]	; (141ec <morse_translate()+0x4c8>)
   141b0:	5cd3      	ldrb	r3, [r2, r3]
   141b2:	2b3f      	cmp	r3, #63	; 0x3f
   141b4:	d12d      	bne.n	14212 <morse_translate()+0x4ee>
   141b6:	4b0c      	ldr	r3, [pc, #48]	; (141e8 <morse_translate()+0x4c4>)
   141b8:	681b      	ldr	r3, [r3, #0]
   141ba:	3b03      	subs	r3, #3
   141bc:	4a0b      	ldr	r2, [pc, #44]	; (141ec <morse_translate()+0x4c8>)
   141be:	5cd3      	ldrb	r3, [r2, r3]
   141c0:	2b2d      	cmp	r3, #45	; 0x2d
   141c2:	d126      	bne.n	14212 <morse_translate()+0x4ee>
   141c4:	4b08      	ldr	r3, [pc, #32]	; (141e8 <morse_translate()+0x4c4>)
   141c6:	681b      	ldr	r3, [r3, #0]
   141c8:	3b02      	subs	r3, #2
   141ca:	4a08      	ldr	r2, [pc, #32]	; (141ec <morse_translate()+0x4c8>)
   141cc:	5cd3      	ldrb	r3, [r2, r3]
   141ce:	2b2e      	cmp	r3, #46	; 0x2e
   141d0:	d11f      	bne.n	14212 <morse_translate()+0x4ee>
   141d2:	4b05      	ldr	r3, [pc, #20]	; (141e8 <morse_translate()+0x4c4>)
   141d4:	681b      	ldr	r3, [r3, #0]
   141d6:	3b01      	subs	r3, #1
   141d8:	4a04      	ldr	r2, [pc, #16]	; (141ec <morse_translate()+0x4c8>)
   141da:	5cd3      	ldrb	r3, [r2, r3]
   141dc:	2b2d      	cmp	r3, #45	; 0x2d
   141de:	e007      	b.n	141f0 <morse_translate()+0x4cc>
   141e0:	10000b90 	.word	0x10000b90
   141e4:	10000460 	.word	0x10000460
   141e8:	100007a0 	.word	0x100007a0
   141ec:	100007a8 	.word	0x100007a8
   141f0:	d10f      	bne.n	14212 <morse_translate()+0x4ee>
   141f2:	4b93      	ldr	r3, [pc, #588]	; (14440 <morse_translate()+0x71c>)
   141f4:	681b      	ldr	r3, [r3, #0]
   141f6:	4a93      	ldr	r2, [pc, #588]	; (14444 <morse_translate()+0x720>)
   141f8:	5cd3      	ldrb	r3, [r2, r3]
   141fa:	2b26      	cmp	r3, #38	; 0x26
   141fc:	d109      	bne.n	14212 <morse_translate()+0x4ee>
        translated[translated_count]='k';
   141fe:	4b92      	ldr	r3, [pc, #584]	; (14448 <morse_translate()+0x724>)
   14200:	681b      	ldr	r3, [r3, #0]
   14202:	4a92      	ldr	r2, [pc, #584]	; (1444c <morse_translate()+0x728>)
   14204:	216b      	movs	r1, #107	; 0x6b
   14206:	54d1      	strb	r1, [r2, r3]
        translated_count++;
   14208:	4b8f      	ldr	r3, [pc, #572]	; (14448 <morse_translate()+0x724>)
   1420a:	681b      	ldr	r3, [r3, #0]
   1420c:	3301      	adds	r3, #1
   1420e:	4a8e      	ldr	r2, [pc, #568]	; (14448 <morse_translate()+0x724>)
   14210:	6013      	str	r3, [r2, #0]
        }
        if((morse[increment-5] =='&' || morse[increment-5] == '|' || morse[increment-5] == '?') && morse[increment-4] =='.' && morse[increment-3] == '-' && morse[increment-2] == '.' && morse[increment-1] == '.'  && morse[increment] == '&'){
   14212:	4b8b      	ldr	r3, [pc, #556]	; (14440 <morse_translate()+0x71c>)
   14214:	681b      	ldr	r3, [r3, #0]
   14216:	3b05      	subs	r3, #5
   14218:	4a8a      	ldr	r2, [pc, #552]	; (14444 <morse_translate()+0x720>)
   1421a:	5cd3      	ldrb	r3, [r2, r3]
   1421c:	2b26      	cmp	r3, #38	; 0x26
   1421e:	d00d      	beq.n	1423c <morse_translate()+0x518>
   14220:	4b87      	ldr	r3, [pc, #540]	; (14440 <morse_translate()+0x71c>)
   14222:	681b      	ldr	r3, [r3, #0]
   14224:	3b05      	subs	r3, #5
   14226:	4a87      	ldr	r2, [pc, #540]	; (14444 <morse_translate()+0x720>)
   14228:	5cd3      	ldrb	r3, [r2, r3]
   1422a:	2b7c      	cmp	r3, #124	; 0x7c
   1422c:	d006      	beq.n	1423c <morse_translate()+0x518>
   1422e:	4b84      	ldr	r3, [pc, #528]	; (14440 <morse_translate()+0x71c>)
   14230:	681b      	ldr	r3, [r3, #0]
   14232:	3b05      	subs	r3, #5
   14234:	4a83      	ldr	r2, [pc, #524]	; (14444 <morse_translate()+0x720>)
   14236:	5cd3      	ldrb	r3, [r2, r3]
   14238:	2b3f      	cmp	r3, #63	; 0x3f
   1423a:	d12b      	bne.n	14294 <morse_translate()+0x570>
   1423c:	4b80      	ldr	r3, [pc, #512]	; (14440 <morse_translate()+0x71c>)
   1423e:	681b      	ldr	r3, [r3, #0]
   14240:	3b04      	subs	r3, #4
   14242:	4a80      	ldr	r2, [pc, #512]	; (14444 <morse_translate()+0x720>)
   14244:	5cd3      	ldrb	r3, [r2, r3]
   14246:	2b2e      	cmp	r3, #46	; 0x2e
   14248:	d124      	bne.n	14294 <morse_translate()+0x570>
   1424a:	4b7d      	ldr	r3, [pc, #500]	; (14440 <morse_translate()+0x71c>)
   1424c:	681b      	ldr	r3, [r3, #0]
   1424e:	3b03      	subs	r3, #3
   14250:	4a7c      	ldr	r2, [pc, #496]	; (14444 <morse_translate()+0x720>)
   14252:	5cd3      	ldrb	r3, [r2, r3]
   14254:	2b2d      	cmp	r3, #45	; 0x2d
   14256:	d11d      	bne.n	14294 <morse_translate()+0x570>
   14258:	4b79      	ldr	r3, [pc, #484]	; (14440 <morse_translate()+0x71c>)
   1425a:	681b      	ldr	r3, [r3, #0]
   1425c:	3b02      	subs	r3, #2
   1425e:	4a79      	ldr	r2, [pc, #484]	; (14444 <morse_translate()+0x720>)
   14260:	5cd3      	ldrb	r3, [r2, r3]
   14262:	2b2e      	cmp	r3, #46	; 0x2e
   14264:	d116      	bne.n	14294 <morse_translate()+0x570>
   14266:	4b76      	ldr	r3, [pc, #472]	; (14440 <morse_translate()+0x71c>)
   14268:	681b      	ldr	r3, [r3, #0]
   1426a:	3b01      	subs	r3, #1
   1426c:	4a75      	ldr	r2, [pc, #468]	; (14444 <morse_translate()+0x720>)
   1426e:	5cd3      	ldrb	r3, [r2, r3]
   14270:	2b2e      	cmp	r3, #46	; 0x2e
   14272:	d10f      	bne.n	14294 <morse_translate()+0x570>
   14274:	4b72      	ldr	r3, [pc, #456]	; (14440 <morse_translate()+0x71c>)
   14276:	681b      	ldr	r3, [r3, #0]
   14278:	4a72      	ldr	r2, [pc, #456]	; (14444 <morse_translate()+0x720>)
   1427a:	5cd3      	ldrb	r3, [r2, r3]
   1427c:	2b26      	cmp	r3, #38	; 0x26
   1427e:	d109      	bne.n	14294 <morse_translate()+0x570>
        translated[translated_count]='l';
   14280:	4b71      	ldr	r3, [pc, #452]	; (14448 <morse_translate()+0x724>)
   14282:	681b      	ldr	r3, [r3, #0]
   14284:	4a71      	ldr	r2, [pc, #452]	; (1444c <morse_translate()+0x728>)
   14286:	216c      	movs	r1, #108	; 0x6c
   14288:	54d1      	strb	r1, [r2, r3]
        translated_count++;
   1428a:	4b6f      	ldr	r3, [pc, #444]	; (14448 <morse_translate()+0x724>)
   1428c:	681b      	ldr	r3, [r3, #0]
   1428e:	3301      	adds	r3, #1
   14290:	4a6d      	ldr	r2, [pc, #436]	; (14448 <morse_translate()+0x724>)
   14292:	6013      	str	r3, [r2, #0]
        }
        if((morse[increment-3] =='&' || morse[increment-3] == '|' || morse[increment-3] == '?') && morse[increment-2] =='-' && morse[increment-1] == '-' && morse[increment] == '&'){
   14294:	4b6a      	ldr	r3, [pc, #424]	; (14440 <morse_translate()+0x71c>)
   14296:	681b      	ldr	r3, [r3, #0]
   14298:	3b03      	subs	r3, #3
   1429a:	4a6a      	ldr	r2, [pc, #424]	; (14444 <morse_translate()+0x720>)
   1429c:	5cd3      	ldrb	r3, [r2, r3]
   1429e:	2b26      	cmp	r3, #38	; 0x26
   142a0:	d00d      	beq.n	142be <morse_translate()+0x59a>
   142a2:	4b67      	ldr	r3, [pc, #412]	; (14440 <morse_translate()+0x71c>)
   142a4:	681b      	ldr	r3, [r3, #0]
   142a6:	3b03      	subs	r3, #3
   142a8:	4a66      	ldr	r2, [pc, #408]	; (14444 <morse_translate()+0x720>)
   142aa:	5cd3      	ldrb	r3, [r2, r3]
   142ac:	2b7c      	cmp	r3, #124	; 0x7c
   142ae:	d006      	beq.n	142be <morse_translate()+0x59a>
   142b0:	4b63      	ldr	r3, [pc, #396]	; (14440 <morse_translate()+0x71c>)
   142b2:	681b      	ldr	r3, [r3, #0]
   142b4:	3b03      	subs	r3, #3
   142b6:	4a63      	ldr	r2, [pc, #396]	; (14444 <morse_translate()+0x720>)
   142b8:	5cd3      	ldrb	r3, [r2, r3]
   142ba:	2b3f      	cmp	r3, #63	; 0x3f
   142bc:	d11d      	bne.n	142fa <morse_translate()+0x5d6>
   142be:	4b60      	ldr	r3, [pc, #384]	; (14440 <morse_translate()+0x71c>)
   142c0:	681b      	ldr	r3, [r3, #0]
   142c2:	3b02      	subs	r3, #2
   142c4:	4a5f      	ldr	r2, [pc, #380]	; (14444 <morse_translate()+0x720>)
   142c6:	5cd3      	ldrb	r3, [r2, r3]
   142c8:	2b2d      	cmp	r3, #45	; 0x2d
   142ca:	d116      	bne.n	142fa <morse_translate()+0x5d6>
   142cc:	4b5c      	ldr	r3, [pc, #368]	; (14440 <morse_translate()+0x71c>)
   142ce:	681b      	ldr	r3, [r3, #0]
   142d0:	3b01      	subs	r3, #1
   142d2:	4a5c      	ldr	r2, [pc, #368]	; (14444 <morse_translate()+0x720>)
   142d4:	5cd3      	ldrb	r3, [r2, r3]
   142d6:	2b2d      	cmp	r3, #45	; 0x2d
   142d8:	d10f      	bne.n	142fa <morse_translate()+0x5d6>
   142da:	4b59      	ldr	r3, [pc, #356]	; (14440 <morse_translate()+0x71c>)
   142dc:	681b      	ldr	r3, [r3, #0]
   142de:	4a59      	ldr	r2, [pc, #356]	; (14444 <morse_translate()+0x720>)
   142e0:	5cd3      	ldrb	r3, [r2, r3]
   142e2:	2b26      	cmp	r3, #38	; 0x26
   142e4:	d109      	bne.n	142fa <morse_translate()+0x5d6>
        translated[translated_count]='m';
   142e6:	4b58      	ldr	r3, [pc, #352]	; (14448 <morse_translate()+0x724>)
   142e8:	681b      	ldr	r3, [r3, #0]
   142ea:	4a58      	ldr	r2, [pc, #352]	; (1444c <morse_translate()+0x728>)
   142ec:	216d      	movs	r1, #109	; 0x6d
   142ee:	54d1      	strb	r1, [r2, r3]
        translated_count++;
   142f0:	4b55      	ldr	r3, [pc, #340]	; (14448 <morse_translate()+0x724>)
   142f2:	681b      	ldr	r3, [r3, #0]
   142f4:	3301      	adds	r3, #1
   142f6:	4a54      	ldr	r2, [pc, #336]	; (14448 <morse_translate()+0x724>)
   142f8:	6013      	str	r3, [r2, #0]
        }
        if((morse[increment-3] =='&' || morse[increment-3] == '|' || morse[increment-3] == '?') && morse[increment-2] =='-' && morse[increment-1] == '.' && morse[increment] == '&'){
   142fa:	4b51      	ldr	r3, [pc, #324]	; (14440 <morse_translate()+0x71c>)
   142fc:	681b      	ldr	r3, [r3, #0]
   142fe:	3b03      	subs	r3, #3
   14300:	4a50      	ldr	r2, [pc, #320]	; (14444 <morse_translate()+0x720>)
   14302:	5cd3      	ldrb	r3, [r2, r3]
   14304:	2b26      	cmp	r3, #38	; 0x26
   14306:	d00d      	beq.n	14324 <morse_translate()+0x600>
   14308:	4b4d      	ldr	r3, [pc, #308]	; (14440 <morse_translate()+0x71c>)
   1430a:	681b      	ldr	r3, [r3, #0]
   1430c:	3b03      	subs	r3, #3
   1430e:	4a4d      	ldr	r2, [pc, #308]	; (14444 <morse_translate()+0x720>)
   14310:	5cd3      	ldrb	r3, [r2, r3]
   14312:	2b7c      	cmp	r3, #124	; 0x7c
   14314:	d006      	beq.n	14324 <morse_translate()+0x600>
   14316:	4b4a      	ldr	r3, [pc, #296]	; (14440 <morse_translate()+0x71c>)
   14318:	681b      	ldr	r3, [r3, #0]
   1431a:	3b03      	subs	r3, #3
   1431c:	4a49      	ldr	r2, [pc, #292]	; (14444 <morse_translate()+0x720>)
   1431e:	5cd3      	ldrb	r3, [r2, r3]
   14320:	2b3f      	cmp	r3, #63	; 0x3f
   14322:	d11d      	bne.n	14360 <morse_translate()+0x63c>
   14324:	4b46      	ldr	r3, [pc, #280]	; (14440 <morse_translate()+0x71c>)
   14326:	681b      	ldr	r3, [r3, #0]
   14328:	3b02      	subs	r3, #2
   1432a:	4a46      	ldr	r2, [pc, #280]	; (14444 <morse_translate()+0x720>)
   1432c:	5cd3      	ldrb	r3, [r2, r3]
   1432e:	2b2d      	cmp	r3, #45	; 0x2d
   14330:	d116      	bne.n	14360 <morse_translate()+0x63c>
   14332:	4b43      	ldr	r3, [pc, #268]	; (14440 <morse_translate()+0x71c>)
   14334:	681b      	ldr	r3, [r3, #0]
   14336:	3b01      	subs	r3, #1
   14338:	4a42      	ldr	r2, [pc, #264]	; (14444 <morse_translate()+0x720>)
   1433a:	5cd3      	ldrb	r3, [r2, r3]
   1433c:	2b2e      	cmp	r3, #46	; 0x2e
   1433e:	d10f      	bne.n	14360 <morse_translate()+0x63c>
   14340:	4b3f      	ldr	r3, [pc, #252]	; (14440 <morse_translate()+0x71c>)
   14342:	681b      	ldr	r3, [r3, #0]
   14344:	4a3f      	ldr	r2, [pc, #252]	; (14444 <morse_translate()+0x720>)
   14346:	5cd3      	ldrb	r3, [r2, r3]
   14348:	2b26      	cmp	r3, #38	; 0x26
   1434a:	d109      	bne.n	14360 <morse_translate()+0x63c>
        translated[translated_count]='n';
   1434c:	4b3e      	ldr	r3, [pc, #248]	; (14448 <morse_translate()+0x724>)
   1434e:	681b      	ldr	r3, [r3, #0]
   14350:	4a3e      	ldr	r2, [pc, #248]	; (1444c <morse_translate()+0x728>)
   14352:	216e      	movs	r1, #110	; 0x6e
   14354:	54d1      	strb	r1, [r2, r3]
        translated_count++;
   14356:	4b3c      	ldr	r3, [pc, #240]	; (14448 <morse_translate()+0x724>)
   14358:	681b      	ldr	r3, [r3, #0]
   1435a:	3301      	adds	r3, #1
   1435c:	4a3a      	ldr	r2, [pc, #232]	; (14448 <morse_translate()+0x724>)
   1435e:	6013      	str	r3, [r2, #0]
        }
        if((morse[increment-4] =='&' || morse[increment-4] == '|' || morse[increment-4] == '?') && morse[increment-3] == '-' && morse[increment-2] == '-' && morse[increment-1] == '-'  && morse[increment] == '&'){
   14360:	4b37      	ldr	r3, [pc, #220]	; (14440 <morse_translate()+0x71c>)
   14362:	681b      	ldr	r3, [r3, #0]
   14364:	3b04      	subs	r3, #4
   14366:	4a37      	ldr	r2, [pc, #220]	; (14444 <morse_translate()+0x720>)
   14368:	5cd3      	ldrb	r3, [r2, r3]
   1436a:	2b26      	cmp	r3, #38	; 0x26
   1436c:	d00d      	beq.n	1438a <morse_translate()+0x666>
   1436e:	4b34      	ldr	r3, [pc, #208]	; (14440 <morse_translate()+0x71c>)
   14370:	681b      	ldr	r3, [r3, #0]
   14372:	3b04      	subs	r3, #4
   14374:	4a33      	ldr	r2, [pc, #204]	; (14444 <morse_translate()+0x720>)
   14376:	5cd3      	ldrb	r3, [r2, r3]
   14378:	2b7c      	cmp	r3, #124	; 0x7c
   1437a:	d006      	beq.n	1438a <morse_translate()+0x666>
   1437c:	4b30      	ldr	r3, [pc, #192]	; (14440 <morse_translate()+0x71c>)
   1437e:	681b      	ldr	r3, [r3, #0]
   14380:	3b04      	subs	r3, #4
   14382:	4a30      	ldr	r2, [pc, #192]	; (14444 <morse_translate()+0x720>)
   14384:	5cd3      	ldrb	r3, [r2, r3]
   14386:	2b3f      	cmp	r3, #63	; 0x3f
   14388:	d124      	bne.n	143d4 <morse_translate()+0x6b0>
   1438a:	4b2d      	ldr	r3, [pc, #180]	; (14440 <morse_translate()+0x71c>)
   1438c:	681b      	ldr	r3, [r3, #0]
   1438e:	3b03      	subs	r3, #3
   14390:	4a2c      	ldr	r2, [pc, #176]	; (14444 <morse_translate()+0x720>)
   14392:	5cd3      	ldrb	r3, [r2, r3]
   14394:	2b2d      	cmp	r3, #45	; 0x2d
   14396:	d11d      	bne.n	143d4 <morse_translate()+0x6b0>
   14398:	4b29      	ldr	r3, [pc, #164]	; (14440 <morse_translate()+0x71c>)
   1439a:	681b      	ldr	r3, [r3, #0]
   1439c:	3b02      	subs	r3, #2
   1439e:	4a29      	ldr	r2, [pc, #164]	; (14444 <morse_translate()+0x720>)
   143a0:	5cd3      	ldrb	r3, [r2, r3]
   143a2:	2b2d      	cmp	r3, #45	; 0x2d
   143a4:	d116      	bne.n	143d4 <morse_translate()+0x6b0>
   143a6:	4b26      	ldr	r3, [pc, #152]	; (14440 <morse_translate()+0x71c>)
   143a8:	681b      	ldr	r3, [r3, #0]
   143aa:	3b01      	subs	r3, #1
   143ac:	4a25      	ldr	r2, [pc, #148]	; (14444 <morse_translate()+0x720>)
   143ae:	5cd3      	ldrb	r3, [r2, r3]
   143b0:	2b2d      	cmp	r3, #45	; 0x2d
   143b2:	d10f      	bne.n	143d4 <morse_translate()+0x6b0>
   143b4:	4b22      	ldr	r3, [pc, #136]	; (14440 <morse_translate()+0x71c>)
   143b6:	681b      	ldr	r3, [r3, #0]
   143b8:	4a22      	ldr	r2, [pc, #136]	; (14444 <morse_translate()+0x720>)
   143ba:	5cd3      	ldrb	r3, [r2, r3]
   143bc:	2b26      	cmp	r3, #38	; 0x26
   143be:	d109      	bne.n	143d4 <morse_translate()+0x6b0>
        translated[translated_count]='o';
   143c0:	4b21      	ldr	r3, [pc, #132]	; (14448 <morse_translate()+0x724>)
   143c2:	681b      	ldr	r3, [r3, #0]
   143c4:	4a21      	ldr	r2, [pc, #132]	; (1444c <morse_translate()+0x728>)
   143c6:	216f      	movs	r1, #111	; 0x6f
   143c8:	54d1      	strb	r1, [r2, r3]
        translated_count++;
   143ca:	4b1f      	ldr	r3, [pc, #124]	; (14448 <morse_translate()+0x724>)
   143cc:	681b      	ldr	r3, [r3, #0]
   143ce:	3301      	adds	r3, #1
   143d0:	4a1d      	ldr	r2, [pc, #116]	; (14448 <morse_translate()+0x724>)
   143d2:	6013      	str	r3, [r2, #0]
        }
           if((morse[increment-5] =='&' || morse[increment-5] == '|' || morse[increment-5] == '?') && morse[increment-4] =='.' && morse[increment-3] == '-' && morse[increment-2] == '-' && morse[increment-1] == '.'  && morse[increment] == '&'){
   143d4:	4b1a      	ldr	r3, [pc, #104]	; (14440 <morse_translate()+0x71c>)
   143d6:	681b      	ldr	r3, [r3, #0]
   143d8:	3b05      	subs	r3, #5
   143da:	4a1a      	ldr	r2, [pc, #104]	; (14444 <morse_translate()+0x720>)
   143dc:	5cd3      	ldrb	r3, [r2, r3]
   143de:	2b26      	cmp	r3, #38	; 0x26
   143e0:	d00d      	beq.n	143fe <morse_translate()+0x6da>
   143e2:	4b17      	ldr	r3, [pc, #92]	; (14440 <morse_translate()+0x71c>)
   143e4:	681b      	ldr	r3, [r3, #0]
   143e6:	3b05      	subs	r3, #5
   143e8:	4a16      	ldr	r2, [pc, #88]	; (14444 <morse_translate()+0x720>)
   143ea:	5cd3      	ldrb	r3, [r2, r3]
   143ec:	2b7c      	cmp	r3, #124	; 0x7c
   143ee:	d006      	beq.n	143fe <morse_translate()+0x6da>
   143f0:	4b13      	ldr	r3, [pc, #76]	; (14440 <morse_translate()+0x71c>)
   143f2:	681b      	ldr	r3, [r3, #0]
   143f4:	3b05      	subs	r3, #5
   143f6:	4a13      	ldr	r2, [pc, #76]	; (14444 <morse_translate()+0x720>)
   143f8:	5cd3      	ldrb	r3, [r2, r3]
   143fa:	2b3f      	cmp	r3, #63	; 0x3f
   143fc:	d134      	bne.n	14468 <morse_translate()+0x744>
   143fe:	4b10      	ldr	r3, [pc, #64]	; (14440 <morse_translate()+0x71c>)
   14400:	681b      	ldr	r3, [r3, #0]
   14402:	3b04      	subs	r3, #4
   14404:	4a0f      	ldr	r2, [pc, #60]	; (14444 <morse_translate()+0x720>)
   14406:	5cd3      	ldrb	r3, [r2, r3]
   14408:	2b2e      	cmp	r3, #46	; 0x2e
   1440a:	d12d      	bne.n	14468 <morse_translate()+0x744>
   1440c:	4b0c      	ldr	r3, [pc, #48]	; (14440 <morse_translate()+0x71c>)
   1440e:	681b      	ldr	r3, [r3, #0]
   14410:	3b03      	subs	r3, #3
   14412:	4a0c      	ldr	r2, [pc, #48]	; (14444 <morse_translate()+0x720>)
   14414:	5cd3      	ldrb	r3, [r2, r3]
   14416:	2b2d      	cmp	r3, #45	; 0x2d
   14418:	d126      	bne.n	14468 <morse_translate()+0x744>
   1441a:	4b09      	ldr	r3, [pc, #36]	; (14440 <morse_translate()+0x71c>)
   1441c:	681b      	ldr	r3, [r3, #0]
   1441e:	3b02      	subs	r3, #2
   14420:	4a08      	ldr	r2, [pc, #32]	; (14444 <morse_translate()+0x720>)
   14422:	5cd3      	ldrb	r3, [r2, r3]
   14424:	2b2d      	cmp	r3, #45	; 0x2d
   14426:	d11f      	bne.n	14468 <morse_translate()+0x744>
   14428:	4b05      	ldr	r3, [pc, #20]	; (14440 <morse_translate()+0x71c>)
   1442a:	681b      	ldr	r3, [r3, #0]
   1442c:	3b01      	subs	r3, #1
   1442e:	4a05      	ldr	r2, [pc, #20]	; (14444 <morse_translate()+0x720>)
   14430:	5cd3      	ldrb	r3, [r2, r3]
   14432:	2b2e      	cmp	r3, #46	; 0x2e
   14434:	d118      	bne.n	14468 <morse_translate()+0x744>
   14436:	4b02      	ldr	r3, [pc, #8]	; (14440 <morse_translate()+0x71c>)
   14438:	681b      	ldr	r3, [r3, #0]
   1443a:	4a02      	ldr	r2, [pc, #8]	; (14444 <morse_translate()+0x720>)
   1443c:	5cd3      	ldrb	r3, [r2, r3]
   1443e:	e007      	b.n	14450 <morse_translate()+0x72c>
   14440:	100007a0 	.word	0x100007a0
   14444:	100007a8 	.word	0x100007a8
   14448:	10000460 	.word	0x10000460
   1444c:	10000b90 	.word	0x10000b90
   14450:	2b26      	cmp	r3, #38	; 0x26
   14452:	d109      	bne.n	14468 <morse_translate()+0x744>
        translated[translated_count]='p';
   14454:	4b92      	ldr	r3, [pc, #584]	; (146a0 <morse_translate()+0x97c>)
   14456:	681b      	ldr	r3, [r3, #0]
   14458:	4a92      	ldr	r2, [pc, #584]	; (146a4 <morse_translate()+0x980>)
   1445a:	2170      	movs	r1, #112	; 0x70
   1445c:	54d1      	strb	r1, [r2, r3]
        translated_count++;
   1445e:	4b90      	ldr	r3, [pc, #576]	; (146a0 <morse_translate()+0x97c>)
   14460:	681b      	ldr	r3, [r3, #0]
   14462:	3301      	adds	r3, #1
   14464:	4a8e      	ldr	r2, [pc, #568]	; (146a0 <morse_translate()+0x97c>)
   14466:	6013      	str	r3, [r2, #0]
        }
          if((morse[increment-5] =='&' || morse[increment-5] == '|' || morse[increment-5] == '?') && morse[increment-4] =='-' && morse[increment-3] == '-' && morse[increment-2] == '.' && morse[increment-1] == '-'  && morse[increment] == '&'){
   14468:	4b8f      	ldr	r3, [pc, #572]	; (146a8 <morse_translate()+0x984>)
   1446a:	681b      	ldr	r3, [r3, #0]
   1446c:	3b05      	subs	r3, #5
   1446e:	4a8f      	ldr	r2, [pc, #572]	; (146ac <morse_translate()+0x988>)
   14470:	5cd3      	ldrb	r3, [r2, r3]
   14472:	2b26      	cmp	r3, #38	; 0x26
   14474:	d00d      	beq.n	14492 <morse_translate()+0x76e>
   14476:	4b8c      	ldr	r3, [pc, #560]	; (146a8 <morse_translate()+0x984>)
   14478:	681b      	ldr	r3, [r3, #0]
   1447a:	3b05      	subs	r3, #5
   1447c:	4a8b      	ldr	r2, [pc, #556]	; (146ac <morse_translate()+0x988>)
   1447e:	5cd3      	ldrb	r3, [r2, r3]
   14480:	2b7c      	cmp	r3, #124	; 0x7c
   14482:	d006      	beq.n	14492 <morse_translate()+0x76e>
   14484:	4b88      	ldr	r3, [pc, #544]	; (146a8 <morse_translate()+0x984>)
   14486:	681b      	ldr	r3, [r3, #0]
   14488:	3b05      	subs	r3, #5
   1448a:	4a88      	ldr	r2, [pc, #544]	; (146ac <morse_translate()+0x988>)
   1448c:	5cd3      	ldrb	r3, [r2, r3]
   1448e:	2b3f      	cmp	r3, #63	; 0x3f
   14490:	d12b      	bne.n	144ea <morse_translate()+0x7c6>
   14492:	4b85      	ldr	r3, [pc, #532]	; (146a8 <morse_translate()+0x984>)
   14494:	681b      	ldr	r3, [r3, #0]
   14496:	3b04      	subs	r3, #4
   14498:	4a84      	ldr	r2, [pc, #528]	; (146ac <morse_translate()+0x988>)
   1449a:	5cd3      	ldrb	r3, [r2, r3]
   1449c:	2b2d      	cmp	r3, #45	; 0x2d
   1449e:	d124      	bne.n	144ea <morse_translate()+0x7c6>
   144a0:	4b81      	ldr	r3, [pc, #516]	; (146a8 <morse_translate()+0x984>)
   144a2:	681b      	ldr	r3, [r3, #0]
   144a4:	3b03      	subs	r3, #3
   144a6:	4a81      	ldr	r2, [pc, #516]	; (146ac <morse_translate()+0x988>)
   144a8:	5cd3      	ldrb	r3, [r2, r3]
   144aa:	2b2d      	cmp	r3, #45	; 0x2d
   144ac:	d11d      	bne.n	144ea <morse_translate()+0x7c6>
   144ae:	4b7e      	ldr	r3, [pc, #504]	; (146a8 <morse_translate()+0x984>)
   144b0:	681b      	ldr	r3, [r3, #0]
   144b2:	3b02      	subs	r3, #2
   144b4:	4a7d      	ldr	r2, [pc, #500]	; (146ac <morse_translate()+0x988>)
   144b6:	5cd3      	ldrb	r3, [r2, r3]
   144b8:	2b2e      	cmp	r3, #46	; 0x2e
   144ba:	d116      	bne.n	144ea <morse_translate()+0x7c6>
   144bc:	4b7a      	ldr	r3, [pc, #488]	; (146a8 <morse_translate()+0x984>)
   144be:	681b      	ldr	r3, [r3, #0]
   144c0:	3b01      	subs	r3, #1
   144c2:	4a7a      	ldr	r2, [pc, #488]	; (146ac <morse_translate()+0x988>)
   144c4:	5cd3      	ldrb	r3, [r2, r3]
   144c6:	2b2d      	cmp	r3, #45	; 0x2d
   144c8:	d10f      	bne.n	144ea <morse_translate()+0x7c6>
   144ca:	4b77      	ldr	r3, [pc, #476]	; (146a8 <morse_translate()+0x984>)
   144cc:	681b      	ldr	r3, [r3, #0]
   144ce:	4a77      	ldr	r2, [pc, #476]	; (146ac <morse_translate()+0x988>)
   144d0:	5cd3      	ldrb	r3, [r2, r3]
   144d2:	2b26      	cmp	r3, #38	; 0x26
   144d4:	d109      	bne.n	144ea <morse_translate()+0x7c6>
        translated[translated_count]='q';
   144d6:	4b72      	ldr	r3, [pc, #456]	; (146a0 <morse_translate()+0x97c>)
   144d8:	681b      	ldr	r3, [r3, #0]
   144da:	4a72      	ldr	r2, [pc, #456]	; (146a4 <morse_translate()+0x980>)
   144dc:	2171      	movs	r1, #113	; 0x71
   144de:	54d1      	strb	r1, [r2, r3]
        translated_count++;
   144e0:	4b6f      	ldr	r3, [pc, #444]	; (146a0 <morse_translate()+0x97c>)
   144e2:	681b      	ldr	r3, [r3, #0]
   144e4:	3301      	adds	r3, #1
   144e6:	4a6e      	ldr	r2, [pc, #440]	; (146a0 <morse_translate()+0x97c>)
   144e8:	6013      	str	r3, [r2, #0]
        }
         if((morse[increment-4] =='&' || morse[increment-4] == '|' || morse[increment-4] == '?') && morse[increment-3] == '.' && morse[increment-2] == '-' && morse[increment-1] == '.'  && morse[increment] == '&'){
   144ea:	4b6f      	ldr	r3, [pc, #444]	; (146a8 <morse_translate()+0x984>)
   144ec:	681b      	ldr	r3, [r3, #0]
   144ee:	3b04      	subs	r3, #4
   144f0:	4a6e      	ldr	r2, [pc, #440]	; (146ac <morse_translate()+0x988>)
   144f2:	5cd3      	ldrb	r3, [r2, r3]
   144f4:	2b26      	cmp	r3, #38	; 0x26
   144f6:	d00d      	beq.n	14514 <morse_translate()+0x7f0>
   144f8:	4b6b      	ldr	r3, [pc, #428]	; (146a8 <morse_translate()+0x984>)
   144fa:	681b      	ldr	r3, [r3, #0]
   144fc:	3b04      	subs	r3, #4
   144fe:	4a6b      	ldr	r2, [pc, #428]	; (146ac <morse_translate()+0x988>)
   14500:	5cd3      	ldrb	r3, [r2, r3]
   14502:	2b7c      	cmp	r3, #124	; 0x7c
   14504:	d006      	beq.n	14514 <morse_translate()+0x7f0>
   14506:	4b68      	ldr	r3, [pc, #416]	; (146a8 <morse_translate()+0x984>)
   14508:	681b      	ldr	r3, [r3, #0]
   1450a:	3b04      	subs	r3, #4
   1450c:	4a67      	ldr	r2, [pc, #412]	; (146ac <morse_translate()+0x988>)
   1450e:	5cd3      	ldrb	r3, [r2, r3]
   14510:	2b3f      	cmp	r3, #63	; 0x3f
   14512:	d124      	bne.n	1455e <morse_translate()+0x83a>
   14514:	4b64      	ldr	r3, [pc, #400]	; (146a8 <morse_translate()+0x984>)
   14516:	681b      	ldr	r3, [r3, #0]
   14518:	3b03      	subs	r3, #3
   1451a:	4a64      	ldr	r2, [pc, #400]	; (146ac <morse_translate()+0x988>)
   1451c:	5cd3      	ldrb	r3, [r2, r3]
   1451e:	2b2e      	cmp	r3, #46	; 0x2e
   14520:	d11d      	bne.n	1455e <morse_translate()+0x83a>
   14522:	4b61      	ldr	r3, [pc, #388]	; (146a8 <morse_translate()+0x984>)
   14524:	681b      	ldr	r3, [r3, #0]
   14526:	3b02      	subs	r3, #2
   14528:	4a60      	ldr	r2, [pc, #384]	; (146ac <morse_translate()+0x988>)
   1452a:	5cd3      	ldrb	r3, [r2, r3]
   1452c:	2b2d      	cmp	r3, #45	; 0x2d
   1452e:	d116      	bne.n	1455e <morse_translate()+0x83a>
   14530:	4b5d      	ldr	r3, [pc, #372]	; (146a8 <morse_translate()+0x984>)
   14532:	681b      	ldr	r3, [r3, #0]
   14534:	3b01      	subs	r3, #1
   14536:	4a5d      	ldr	r2, [pc, #372]	; (146ac <morse_translate()+0x988>)
   14538:	5cd3      	ldrb	r3, [r2, r3]
   1453a:	2b2e      	cmp	r3, #46	; 0x2e
   1453c:	d10f      	bne.n	1455e <morse_translate()+0x83a>
   1453e:	4b5a      	ldr	r3, [pc, #360]	; (146a8 <morse_translate()+0x984>)
   14540:	681b      	ldr	r3, [r3, #0]
   14542:	4a5a      	ldr	r2, [pc, #360]	; (146ac <morse_translate()+0x988>)
   14544:	5cd3      	ldrb	r3, [r2, r3]
   14546:	2b26      	cmp	r3, #38	; 0x26
   14548:	d109      	bne.n	1455e <morse_translate()+0x83a>
        translated[translated_count]='r';
   1454a:	4b55      	ldr	r3, [pc, #340]	; (146a0 <morse_translate()+0x97c>)
   1454c:	681b      	ldr	r3, [r3, #0]
   1454e:	4a55      	ldr	r2, [pc, #340]	; (146a4 <morse_translate()+0x980>)
   14550:	2172      	movs	r1, #114	; 0x72
   14552:	54d1      	strb	r1, [r2, r3]
        translated_count++;
   14554:	4b52      	ldr	r3, [pc, #328]	; (146a0 <morse_translate()+0x97c>)
   14556:	681b      	ldr	r3, [r3, #0]
   14558:	3301      	adds	r3, #1
   1455a:	4a51      	ldr	r2, [pc, #324]	; (146a0 <morse_translate()+0x97c>)
   1455c:	6013      	str	r3, [r2, #0]
        }
         if((morse[increment-4] =='&' || morse[increment-4] == '|' || morse[increment-4] == '?') && morse[increment-3] == '.' && morse[increment-2] == '.' && morse[increment-1] == '.'  && morse[increment] == '&'){
   1455e:	4b52      	ldr	r3, [pc, #328]	; (146a8 <morse_translate()+0x984>)
   14560:	681b      	ldr	r3, [r3, #0]
   14562:	3b04      	subs	r3, #4
   14564:	4a51      	ldr	r2, [pc, #324]	; (146ac <morse_translate()+0x988>)
   14566:	5cd3      	ldrb	r3, [r2, r3]
   14568:	2b26      	cmp	r3, #38	; 0x26
   1456a:	d00d      	beq.n	14588 <morse_translate()+0x864>
   1456c:	4b4e      	ldr	r3, [pc, #312]	; (146a8 <morse_translate()+0x984>)
   1456e:	681b      	ldr	r3, [r3, #0]
   14570:	3b04      	subs	r3, #4
   14572:	4a4e      	ldr	r2, [pc, #312]	; (146ac <morse_translate()+0x988>)
   14574:	5cd3      	ldrb	r3, [r2, r3]
   14576:	2b7c      	cmp	r3, #124	; 0x7c
   14578:	d006      	beq.n	14588 <morse_translate()+0x864>
   1457a:	4b4b      	ldr	r3, [pc, #300]	; (146a8 <morse_translate()+0x984>)
   1457c:	681b      	ldr	r3, [r3, #0]
   1457e:	3b04      	subs	r3, #4
   14580:	4a4a      	ldr	r2, [pc, #296]	; (146ac <morse_translate()+0x988>)
   14582:	5cd3      	ldrb	r3, [r2, r3]
   14584:	2b3f      	cmp	r3, #63	; 0x3f
   14586:	d124      	bne.n	145d2 <morse_translate()+0x8ae>
   14588:	4b47      	ldr	r3, [pc, #284]	; (146a8 <morse_translate()+0x984>)
   1458a:	681b      	ldr	r3, [r3, #0]
   1458c:	3b03      	subs	r3, #3
   1458e:	4a47      	ldr	r2, [pc, #284]	; (146ac <morse_translate()+0x988>)
   14590:	5cd3      	ldrb	r3, [r2, r3]
   14592:	2b2e      	cmp	r3, #46	; 0x2e
   14594:	d11d      	bne.n	145d2 <morse_translate()+0x8ae>
   14596:	4b44      	ldr	r3, [pc, #272]	; (146a8 <morse_translate()+0x984>)
   14598:	681b      	ldr	r3, [r3, #0]
   1459a:	3b02      	subs	r3, #2
   1459c:	4a43      	ldr	r2, [pc, #268]	; (146ac <morse_translate()+0x988>)
   1459e:	5cd3      	ldrb	r3, [r2, r3]
   145a0:	2b2e      	cmp	r3, #46	; 0x2e
   145a2:	d116      	bne.n	145d2 <morse_translate()+0x8ae>
   145a4:	4b40      	ldr	r3, [pc, #256]	; (146a8 <morse_translate()+0x984>)
   145a6:	681b      	ldr	r3, [r3, #0]
   145a8:	3b01      	subs	r3, #1
   145aa:	4a40      	ldr	r2, [pc, #256]	; (146ac <morse_translate()+0x988>)
   145ac:	5cd3      	ldrb	r3, [r2, r3]
   145ae:	2b2e      	cmp	r3, #46	; 0x2e
   145b0:	d10f      	bne.n	145d2 <morse_translate()+0x8ae>
   145b2:	4b3d      	ldr	r3, [pc, #244]	; (146a8 <morse_translate()+0x984>)
   145b4:	681b      	ldr	r3, [r3, #0]
   145b6:	4a3d      	ldr	r2, [pc, #244]	; (146ac <morse_translate()+0x988>)
   145b8:	5cd3      	ldrb	r3, [r2, r3]
   145ba:	2b26      	cmp	r3, #38	; 0x26
   145bc:	d109      	bne.n	145d2 <morse_translate()+0x8ae>
        translated[translated_count]='s';
   145be:	4b38      	ldr	r3, [pc, #224]	; (146a0 <morse_translate()+0x97c>)
   145c0:	681b      	ldr	r3, [r3, #0]
   145c2:	4a38      	ldr	r2, [pc, #224]	; (146a4 <morse_translate()+0x980>)
   145c4:	2173      	movs	r1, #115	; 0x73
   145c6:	54d1      	strb	r1, [r2, r3]
        translated_count++;
   145c8:	4b35      	ldr	r3, [pc, #212]	; (146a0 <morse_translate()+0x97c>)
   145ca:	681b      	ldr	r3, [r3, #0]
   145cc:	3301      	adds	r3, #1
   145ce:	4a34      	ldr	r2, [pc, #208]	; (146a0 <morse_translate()+0x97c>)
   145d0:	6013      	str	r3, [r2, #0]
        }
        if((morse[increment-2] =='&' || morse[increment-2] == '?' || morse[increment-2] == '|') && morse[increment-1] =='-'&& morse[increment] =='&')
   145d2:	4b35      	ldr	r3, [pc, #212]	; (146a8 <morse_translate()+0x984>)
   145d4:	681b      	ldr	r3, [r3, #0]
   145d6:	3b02      	subs	r3, #2
   145d8:	4a34      	ldr	r2, [pc, #208]	; (146ac <morse_translate()+0x988>)
   145da:	5cd3      	ldrb	r3, [r2, r3]
   145dc:	2b26      	cmp	r3, #38	; 0x26
   145de:	d00d      	beq.n	145fc <morse_translate()+0x8d8>
   145e0:	4b31      	ldr	r3, [pc, #196]	; (146a8 <morse_translate()+0x984>)
   145e2:	681b      	ldr	r3, [r3, #0]
   145e4:	3b02      	subs	r3, #2
   145e6:	4a31      	ldr	r2, [pc, #196]	; (146ac <morse_translate()+0x988>)
   145e8:	5cd3      	ldrb	r3, [r2, r3]
   145ea:	2b3f      	cmp	r3, #63	; 0x3f
   145ec:	d006      	beq.n	145fc <morse_translate()+0x8d8>
   145ee:	4b2e      	ldr	r3, [pc, #184]	; (146a8 <morse_translate()+0x984>)
   145f0:	681b      	ldr	r3, [r3, #0]
   145f2:	3b02      	subs	r3, #2
   145f4:	4a2d      	ldr	r2, [pc, #180]	; (146ac <morse_translate()+0x988>)
   145f6:	5cd3      	ldrb	r3, [r2, r3]
   145f8:	2b7c      	cmp	r3, #124	; 0x7c
   145fa:	d116      	bne.n	1462a <morse_translate()+0x906>
   145fc:	4b2a      	ldr	r3, [pc, #168]	; (146a8 <morse_translate()+0x984>)
   145fe:	681b      	ldr	r3, [r3, #0]
   14600:	3b01      	subs	r3, #1
   14602:	4a2a      	ldr	r2, [pc, #168]	; (146ac <morse_translate()+0x988>)
   14604:	5cd3      	ldrb	r3, [r2, r3]
   14606:	2b2d      	cmp	r3, #45	; 0x2d
   14608:	d10f      	bne.n	1462a <morse_translate()+0x906>
   1460a:	4b27      	ldr	r3, [pc, #156]	; (146a8 <morse_translate()+0x984>)
   1460c:	681b      	ldr	r3, [r3, #0]
   1460e:	4a27      	ldr	r2, [pc, #156]	; (146ac <morse_translate()+0x988>)
   14610:	5cd3      	ldrb	r3, [r2, r3]
   14612:	2b26      	cmp	r3, #38	; 0x26
   14614:	d109      	bne.n	1462a <morse_translate()+0x906>
        {
         translated[translated_count]='t';
   14616:	4b22      	ldr	r3, [pc, #136]	; (146a0 <morse_translate()+0x97c>)
   14618:	681b      	ldr	r3, [r3, #0]
   1461a:	4a22      	ldr	r2, [pc, #136]	; (146a4 <morse_translate()+0x980>)
   1461c:	2174      	movs	r1, #116	; 0x74
   1461e:	54d1      	strb	r1, [r2, r3]
         translated_count++;
   14620:	4b1f      	ldr	r3, [pc, #124]	; (146a0 <morse_translate()+0x97c>)
   14622:	681b      	ldr	r3, [r3, #0]
   14624:	3301      	adds	r3, #1
   14626:	4a1e      	ldr	r2, [pc, #120]	; (146a0 <morse_translate()+0x97c>)
   14628:	6013      	str	r3, [r2, #0]
        }
         if((morse[increment-4] =='&' || morse[increment-4] == '|' || morse[increment-4] == '?') && morse[increment-3] == '.' && morse[increment-2] == '.' && morse[increment-1] == '-'  && morse[increment] == '&'){
   1462a:	4b1f      	ldr	r3, [pc, #124]	; (146a8 <morse_translate()+0x984>)
   1462c:	681b      	ldr	r3, [r3, #0]
   1462e:	3b04      	subs	r3, #4
   14630:	4a1e      	ldr	r2, [pc, #120]	; (146ac <morse_translate()+0x988>)
   14632:	5cd3      	ldrb	r3, [r2, r3]
   14634:	2b26      	cmp	r3, #38	; 0x26
   14636:	d00d      	beq.n	14654 <morse_translate()+0x930>
   14638:	4b1b      	ldr	r3, [pc, #108]	; (146a8 <morse_translate()+0x984>)
   1463a:	681b      	ldr	r3, [r3, #0]
   1463c:	3b04      	subs	r3, #4
   1463e:	4a1b      	ldr	r2, [pc, #108]	; (146ac <morse_translate()+0x988>)
   14640:	5cd3      	ldrb	r3, [r2, r3]
   14642:	2b7c      	cmp	r3, #124	; 0x7c
   14644:	d006      	beq.n	14654 <morse_translate()+0x930>
   14646:	4b18      	ldr	r3, [pc, #96]	; (146a8 <morse_translate()+0x984>)
   14648:	681b      	ldr	r3, [r3, #0]
   1464a:	3b04      	subs	r3, #4
   1464c:	4a17      	ldr	r2, [pc, #92]	; (146ac <morse_translate()+0x988>)
   1464e:	5cd3      	ldrb	r3, [r2, r3]
   14650:	2b3f      	cmp	r3, #63	; 0x3f
   14652:	d12d      	bne.n	146b0 <morse_translate()+0x98c>
   14654:	4b14      	ldr	r3, [pc, #80]	; (146a8 <morse_translate()+0x984>)
   14656:	681b      	ldr	r3, [r3, #0]
   14658:	3b03      	subs	r3, #3
   1465a:	4a14      	ldr	r2, [pc, #80]	; (146ac <morse_translate()+0x988>)
   1465c:	5cd3      	ldrb	r3, [r2, r3]
   1465e:	2b2e      	cmp	r3, #46	; 0x2e
   14660:	d126      	bne.n	146b0 <morse_translate()+0x98c>
   14662:	4b11      	ldr	r3, [pc, #68]	; (146a8 <morse_translate()+0x984>)
   14664:	681b      	ldr	r3, [r3, #0]
   14666:	3b02      	subs	r3, #2
   14668:	4a10      	ldr	r2, [pc, #64]	; (146ac <morse_translate()+0x988>)
   1466a:	5cd3      	ldrb	r3, [r2, r3]
   1466c:	2b2e      	cmp	r3, #46	; 0x2e
   1466e:	d11f      	bne.n	146b0 <morse_translate()+0x98c>
   14670:	4b0d      	ldr	r3, [pc, #52]	; (146a8 <morse_translate()+0x984>)
   14672:	681b      	ldr	r3, [r3, #0]
   14674:	3b01      	subs	r3, #1
   14676:	4a0d      	ldr	r2, [pc, #52]	; (146ac <morse_translate()+0x988>)
   14678:	5cd3      	ldrb	r3, [r2, r3]
   1467a:	2b2d      	cmp	r3, #45	; 0x2d
   1467c:	d118      	bne.n	146b0 <morse_translate()+0x98c>
   1467e:	4b0a      	ldr	r3, [pc, #40]	; (146a8 <morse_translate()+0x984>)
   14680:	681b      	ldr	r3, [r3, #0]
   14682:	4a0a      	ldr	r2, [pc, #40]	; (146ac <morse_translate()+0x988>)
   14684:	5cd3      	ldrb	r3, [r2, r3]
   14686:	2b26      	cmp	r3, #38	; 0x26
   14688:	d112      	bne.n	146b0 <morse_translate()+0x98c>
        translated[translated_count]='u';
   1468a:	4b05      	ldr	r3, [pc, #20]	; (146a0 <morse_translate()+0x97c>)
   1468c:	681b      	ldr	r3, [r3, #0]
   1468e:	4a05      	ldr	r2, [pc, #20]	; (146a4 <morse_translate()+0x980>)
   14690:	2175      	movs	r1, #117	; 0x75
   14692:	54d1      	strb	r1, [r2, r3]
        translated_count++;
   14694:	4b02      	ldr	r3, [pc, #8]	; (146a0 <morse_translate()+0x97c>)
   14696:	681b      	ldr	r3, [r3, #0]
   14698:	3301      	adds	r3, #1
   1469a:	4a01      	ldr	r2, [pc, #4]	; (146a0 <morse_translate()+0x97c>)
   1469c:	6013      	str	r3, [r2, #0]
   1469e:	e007      	b.n	146b0 <morse_translate()+0x98c>
   146a0:	10000460 	.word	0x10000460
   146a4:	10000b90 	.word	0x10000b90
   146a8:	100007a0 	.word	0x100007a0
   146ac:	100007a8 	.word	0x100007a8
        }
            if((morse[increment-5] =='&' || morse[increment-5] == '|' || morse[increment-5] == '?') && morse[increment-4] =='.' && morse[increment-3] == '.' && morse[increment-2] == '.' && morse[increment-1] == '-'  && morse[increment] == '&'){
   146b0:	4b93      	ldr	r3, [pc, #588]	; (14900 <morse_translate()+0xbdc>)
   146b2:	681b      	ldr	r3, [r3, #0]
   146b4:	3b05      	subs	r3, #5
   146b6:	4a93      	ldr	r2, [pc, #588]	; (14904 <morse_translate()+0xbe0>)
   146b8:	5cd3      	ldrb	r3, [r2, r3]
   146ba:	2b26      	cmp	r3, #38	; 0x26
   146bc:	d00d      	beq.n	146da <morse_translate()+0x9b6>
   146be:	4b90      	ldr	r3, [pc, #576]	; (14900 <morse_translate()+0xbdc>)
   146c0:	681b      	ldr	r3, [r3, #0]
   146c2:	3b05      	subs	r3, #5
   146c4:	4a8f      	ldr	r2, [pc, #572]	; (14904 <morse_translate()+0xbe0>)
   146c6:	5cd3      	ldrb	r3, [r2, r3]
   146c8:	2b7c      	cmp	r3, #124	; 0x7c
   146ca:	d006      	beq.n	146da <morse_translate()+0x9b6>
   146cc:	4b8c      	ldr	r3, [pc, #560]	; (14900 <morse_translate()+0xbdc>)
   146ce:	681b      	ldr	r3, [r3, #0]
   146d0:	3b05      	subs	r3, #5
   146d2:	4a8c      	ldr	r2, [pc, #560]	; (14904 <morse_translate()+0xbe0>)
   146d4:	5cd3      	ldrb	r3, [r2, r3]
   146d6:	2b3f      	cmp	r3, #63	; 0x3f
   146d8:	d12b      	bne.n	14732 <morse_translate()+0xa0e>
   146da:	4b89      	ldr	r3, [pc, #548]	; (14900 <morse_translate()+0xbdc>)
   146dc:	681b      	ldr	r3, [r3, #0]
   146de:	3b04      	subs	r3, #4
   146e0:	4a88      	ldr	r2, [pc, #544]	; (14904 <morse_translate()+0xbe0>)
   146e2:	5cd3      	ldrb	r3, [r2, r3]
   146e4:	2b2e      	cmp	r3, #46	; 0x2e
   146e6:	d124      	bne.n	14732 <morse_translate()+0xa0e>
   146e8:	4b85      	ldr	r3, [pc, #532]	; (14900 <morse_translate()+0xbdc>)
   146ea:	681b      	ldr	r3, [r3, #0]
   146ec:	3b03      	subs	r3, #3
   146ee:	4a85      	ldr	r2, [pc, #532]	; (14904 <morse_translate()+0xbe0>)
   146f0:	5cd3      	ldrb	r3, [r2, r3]
   146f2:	2b2e      	cmp	r3, #46	; 0x2e
   146f4:	d11d      	bne.n	14732 <morse_translate()+0xa0e>
   146f6:	4b82      	ldr	r3, [pc, #520]	; (14900 <morse_translate()+0xbdc>)
   146f8:	681b      	ldr	r3, [r3, #0]
   146fa:	3b02      	subs	r3, #2
   146fc:	4a81      	ldr	r2, [pc, #516]	; (14904 <morse_translate()+0xbe0>)
   146fe:	5cd3      	ldrb	r3, [r2, r3]
   14700:	2b2e      	cmp	r3, #46	; 0x2e
   14702:	d116      	bne.n	14732 <morse_translate()+0xa0e>
   14704:	4b7e      	ldr	r3, [pc, #504]	; (14900 <morse_translate()+0xbdc>)
   14706:	681b      	ldr	r3, [r3, #0]
   14708:	3b01      	subs	r3, #1
   1470a:	4a7e      	ldr	r2, [pc, #504]	; (14904 <morse_translate()+0xbe0>)
   1470c:	5cd3      	ldrb	r3, [r2, r3]
   1470e:	2b2d      	cmp	r3, #45	; 0x2d
   14710:	d10f      	bne.n	14732 <morse_translate()+0xa0e>
   14712:	4b7b      	ldr	r3, [pc, #492]	; (14900 <morse_translate()+0xbdc>)
   14714:	681b      	ldr	r3, [r3, #0]
   14716:	4a7b      	ldr	r2, [pc, #492]	; (14904 <morse_translate()+0xbe0>)
   14718:	5cd3      	ldrb	r3, [r2, r3]
   1471a:	2b26      	cmp	r3, #38	; 0x26
   1471c:	d109      	bne.n	14732 <morse_translate()+0xa0e>
        translated[translated_count]='v';
   1471e:	4b7a      	ldr	r3, [pc, #488]	; (14908 <morse_translate()+0xbe4>)
   14720:	681b      	ldr	r3, [r3, #0]
   14722:	4a7a      	ldr	r2, [pc, #488]	; (1490c <morse_translate()+0xbe8>)
   14724:	2176      	movs	r1, #118	; 0x76
   14726:	54d1      	strb	r1, [r2, r3]
        translated_count++;
   14728:	4b77      	ldr	r3, [pc, #476]	; (14908 <morse_translate()+0xbe4>)
   1472a:	681b      	ldr	r3, [r3, #0]
   1472c:	3301      	adds	r3, #1
   1472e:	4a76      	ldr	r2, [pc, #472]	; (14908 <morse_translate()+0xbe4>)
   14730:	6013      	str	r3, [r2, #0]
        }
         if((morse[increment-4] =='&' || morse[increment-4] == '|' || morse[increment-4] == '?') && morse[increment-3] == '.' && morse[increment-2] == '-' && morse[increment-1] == '-'  && morse[increment] == '&'){
   14732:	4b73      	ldr	r3, [pc, #460]	; (14900 <morse_translate()+0xbdc>)
   14734:	681b      	ldr	r3, [r3, #0]
   14736:	3b04      	subs	r3, #4
   14738:	4a72      	ldr	r2, [pc, #456]	; (14904 <morse_translate()+0xbe0>)
   1473a:	5cd3      	ldrb	r3, [r2, r3]
   1473c:	2b26      	cmp	r3, #38	; 0x26
   1473e:	d00d      	beq.n	1475c <morse_translate()+0xa38>
   14740:	4b6f      	ldr	r3, [pc, #444]	; (14900 <morse_translate()+0xbdc>)
   14742:	681b      	ldr	r3, [r3, #0]
   14744:	3b04      	subs	r3, #4
   14746:	4a6f      	ldr	r2, [pc, #444]	; (14904 <morse_translate()+0xbe0>)
   14748:	5cd3      	ldrb	r3, [r2, r3]
   1474a:	2b7c      	cmp	r3, #124	; 0x7c
   1474c:	d006      	beq.n	1475c <morse_translate()+0xa38>
   1474e:	4b6c      	ldr	r3, [pc, #432]	; (14900 <morse_translate()+0xbdc>)
   14750:	681b      	ldr	r3, [r3, #0]
   14752:	3b04      	subs	r3, #4
   14754:	4a6b      	ldr	r2, [pc, #428]	; (14904 <morse_translate()+0xbe0>)
   14756:	5cd3      	ldrb	r3, [r2, r3]
   14758:	2b3f      	cmp	r3, #63	; 0x3f
   1475a:	d124      	bne.n	147a6 <morse_translate()+0xa82>
   1475c:	4b68      	ldr	r3, [pc, #416]	; (14900 <morse_translate()+0xbdc>)
   1475e:	681b      	ldr	r3, [r3, #0]
   14760:	3b03      	subs	r3, #3
   14762:	4a68      	ldr	r2, [pc, #416]	; (14904 <morse_translate()+0xbe0>)
   14764:	5cd3      	ldrb	r3, [r2, r3]
   14766:	2b2e      	cmp	r3, #46	; 0x2e
   14768:	d11d      	bne.n	147a6 <morse_translate()+0xa82>
   1476a:	4b65      	ldr	r3, [pc, #404]	; (14900 <morse_translate()+0xbdc>)
   1476c:	681b      	ldr	r3, [r3, #0]
   1476e:	3b02      	subs	r3, #2
   14770:	4a64      	ldr	r2, [pc, #400]	; (14904 <morse_translate()+0xbe0>)
   14772:	5cd3      	ldrb	r3, [r2, r3]
   14774:	2b2d      	cmp	r3, #45	; 0x2d
   14776:	d116      	bne.n	147a6 <morse_translate()+0xa82>
   14778:	4b61      	ldr	r3, [pc, #388]	; (14900 <morse_translate()+0xbdc>)
   1477a:	681b      	ldr	r3, [r3, #0]
   1477c:	3b01      	subs	r3, #1
   1477e:	4a61      	ldr	r2, [pc, #388]	; (14904 <morse_translate()+0xbe0>)
   14780:	5cd3      	ldrb	r3, [r2, r3]
   14782:	2b2d      	cmp	r3, #45	; 0x2d
   14784:	d10f      	bne.n	147a6 <morse_translate()+0xa82>
   14786:	4b5e      	ldr	r3, [pc, #376]	; (14900 <morse_translate()+0xbdc>)
   14788:	681b      	ldr	r3, [r3, #0]
   1478a:	4a5e      	ldr	r2, [pc, #376]	; (14904 <morse_translate()+0xbe0>)
   1478c:	5cd3      	ldrb	r3, [r2, r3]
   1478e:	2b26      	cmp	r3, #38	; 0x26
   14790:	d109      	bne.n	147a6 <morse_translate()+0xa82>
        translated[translated_count]='w';
   14792:	4b5d      	ldr	r3, [pc, #372]	; (14908 <morse_translate()+0xbe4>)
   14794:	681b      	ldr	r3, [r3, #0]
   14796:	4a5d      	ldr	r2, [pc, #372]	; (1490c <morse_translate()+0xbe8>)
   14798:	2177      	movs	r1, #119	; 0x77
   1479a:	54d1      	strb	r1, [r2, r3]
        translated_count++;
   1479c:	4b5a      	ldr	r3, [pc, #360]	; (14908 <morse_translate()+0xbe4>)
   1479e:	681b      	ldr	r3, [r3, #0]
   147a0:	3301      	adds	r3, #1
   147a2:	4a59      	ldr	r2, [pc, #356]	; (14908 <morse_translate()+0xbe4>)
   147a4:	6013      	str	r3, [r2, #0]
        }
            if((morse[increment-5] =='&' || morse[increment-5] == '|' || morse[increment-5] == '?') && morse[increment-4] =='-' && morse[increment-3] == '.' && morse[increment-2] == '.' && morse[increment-1] == '-'  && morse[increment] == '&'){
   147a6:	4b56      	ldr	r3, [pc, #344]	; (14900 <morse_translate()+0xbdc>)
   147a8:	681b      	ldr	r3, [r3, #0]
   147aa:	3b05      	subs	r3, #5
   147ac:	4a55      	ldr	r2, [pc, #340]	; (14904 <morse_translate()+0xbe0>)
   147ae:	5cd3      	ldrb	r3, [r2, r3]
   147b0:	2b26      	cmp	r3, #38	; 0x26
   147b2:	d00d      	beq.n	147d0 <morse_translate()+0xaac>
   147b4:	4b52      	ldr	r3, [pc, #328]	; (14900 <morse_translate()+0xbdc>)
   147b6:	681b      	ldr	r3, [r3, #0]
   147b8:	3b05      	subs	r3, #5
   147ba:	4a52      	ldr	r2, [pc, #328]	; (14904 <morse_translate()+0xbe0>)
   147bc:	5cd3      	ldrb	r3, [r2, r3]
   147be:	2b7c      	cmp	r3, #124	; 0x7c
   147c0:	d006      	beq.n	147d0 <morse_translate()+0xaac>
   147c2:	4b4f      	ldr	r3, [pc, #316]	; (14900 <morse_translate()+0xbdc>)
   147c4:	681b      	ldr	r3, [r3, #0]
   147c6:	3b05      	subs	r3, #5
   147c8:	4a4e      	ldr	r2, [pc, #312]	; (14904 <morse_translate()+0xbe0>)
   147ca:	5cd3      	ldrb	r3, [r2, r3]
   147cc:	2b3f      	cmp	r3, #63	; 0x3f
   147ce:	d12b      	bne.n	14828 <morse_translate()+0xb04>
   147d0:	4b4b      	ldr	r3, [pc, #300]	; (14900 <morse_translate()+0xbdc>)
   147d2:	681b      	ldr	r3, [r3, #0]
   147d4:	3b04      	subs	r3, #4
   147d6:	4a4b      	ldr	r2, [pc, #300]	; (14904 <morse_translate()+0xbe0>)
   147d8:	5cd3      	ldrb	r3, [r2, r3]
   147da:	2b2d      	cmp	r3, #45	; 0x2d
   147dc:	d124      	bne.n	14828 <morse_translate()+0xb04>
   147de:	4b48      	ldr	r3, [pc, #288]	; (14900 <morse_translate()+0xbdc>)
   147e0:	681b      	ldr	r3, [r3, #0]
   147e2:	3b03      	subs	r3, #3
   147e4:	4a47      	ldr	r2, [pc, #284]	; (14904 <morse_translate()+0xbe0>)
   147e6:	5cd3      	ldrb	r3, [r2, r3]
   147e8:	2b2e      	cmp	r3, #46	; 0x2e
   147ea:	d11d      	bne.n	14828 <morse_translate()+0xb04>
   147ec:	4b44      	ldr	r3, [pc, #272]	; (14900 <morse_translate()+0xbdc>)
   147ee:	681b      	ldr	r3, [r3, #0]
   147f0:	3b02      	subs	r3, #2
   147f2:	4a44      	ldr	r2, [pc, #272]	; (14904 <morse_translate()+0xbe0>)
   147f4:	5cd3      	ldrb	r3, [r2, r3]
   147f6:	2b2e      	cmp	r3, #46	; 0x2e
   147f8:	d116      	bne.n	14828 <morse_translate()+0xb04>
   147fa:	4b41      	ldr	r3, [pc, #260]	; (14900 <morse_translate()+0xbdc>)
   147fc:	681b      	ldr	r3, [r3, #0]
   147fe:	3b01      	subs	r3, #1
   14800:	4a40      	ldr	r2, [pc, #256]	; (14904 <morse_translate()+0xbe0>)
   14802:	5cd3      	ldrb	r3, [r2, r3]
   14804:	2b2d      	cmp	r3, #45	; 0x2d
   14806:	d10f      	bne.n	14828 <morse_translate()+0xb04>
   14808:	4b3d      	ldr	r3, [pc, #244]	; (14900 <morse_translate()+0xbdc>)
   1480a:	681b      	ldr	r3, [r3, #0]
   1480c:	4a3d      	ldr	r2, [pc, #244]	; (14904 <morse_translate()+0xbe0>)
   1480e:	5cd3      	ldrb	r3, [r2, r3]
   14810:	2b26      	cmp	r3, #38	; 0x26
   14812:	d109      	bne.n	14828 <morse_translate()+0xb04>
        translated[translated_count]='x';
   14814:	4b3c      	ldr	r3, [pc, #240]	; (14908 <morse_translate()+0xbe4>)
   14816:	681b      	ldr	r3, [r3, #0]
   14818:	4a3c      	ldr	r2, [pc, #240]	; (1490c <morse_translate()+0xbe8>)
   1481a:	2178      	movs	r1, #120	; 0x78
   1481c:	54d1      	strb	r1, [r2, r3]
        translated_count++;
   1481e:	4b3a      	ldr	r3, [pc, #232]	; (14908 <morse_translate()+0xbe4>)
   14820:	681b      	ldr	r3, [r3, #0]
   14822:	3301      	adds	r3, #1
   14824:	4a38      	ldr	r2, [pc, #224]	; (14908 <morse_translate()+0xbe4>)
   14826:	6013      	str	r3, [r2, #0]
        }
            if((morse[increment-5] =='&' || morse[increment-5] == '|' || morse[increment-5] == '?') && morse[increment-4] =='-' && morse[increment-3] == '.' && morse[increment-2] == '-' && morse[increment-1] == '-'  && morse[increment] == '&'){
   14828:	4b35      	ldr	r3, [pc, #212]	; (14900 <morse_translate()+0xbdc>)
   1482a:	681b      	ldr	r3, [r3, #0]
   1482c:	3b05      	subs	r3, #5
   1482e:	4a35      	ldr	r2, [pc, #212]	; (14904 <morse_translate()+0xbe0>)
   14830:	5cd3      	ldrb	r3, [r2, r3]
   14832:	2b26      	cmp	r3, #38	; 0x26
   14834:	d00d      	beq.n	14852 <morse_translate()+0xb2e>
   14836:	4b32      	ldr	r3, [pc, #200]	; (14900 <morse_translate()+0xbdc>)
   14838:	681b      	ldr	r3, [r3, #0]
   1483a:	3b05      	subs	r3, #5
   1483c:	4a31      	ldr	r2, [pc, #196]	; (14904 <morse_translate()+0xbe0>)
   1483e:	5cd3      	ldrb	r3, [r2, r3]
   14840:	2b7c      	cmp	r3, #124	; 0x7c
   14842:	d006      	beq.n	14852 <morse_translate()+0xb2e>
   14844:	4b2e      	ldr	r3, [pc, #184]	; (14900 <morse_translate()+0xbdc>)
   14846:	681b      	ldr	r3, [r3, #0]
   14848:	3b05      	subs	r3, #5
   1484a:	4a2e      	ldr	r2, [pc, #184]	; (14904 <morse_translate()+0xbe0>)
   1484c:	5cd3      	ldrb	r3, [r2, r3]
   1484e:	2b3f      	cmp	r3, #63	; 0x3f
   14850:	d12b      	bne.n	148aa <morse_translate()+0xb86>
   14852:	4b2b      	ldr	r3, [pc, #172]	; (14900 <morse_translate()+0xbdc>)
   14854:	681b      	ldr	r3, [r3, #0]
   14856:	3b04      	subs	r3, #4
   14858:	4a2a      	ldr	r2, [pc, #168]	; (14904 <morse_translate()+0xbe0>)
   1485a:	5cd3      	ldrb	r3, [r2, r3]
   1485c:	2b2d      	cmp	r3, #45	; 0x2d
   1485e:	d124      	bne.n	148aa <morse_translate()+0xb86>
   14860:	4b27      	ldr	r3, [pc, #156]	; (14900 <morse_translate()+0xbdc>)
   14862:	681b      	ldr	r3, [r3, #0]
   14864:	3b03      	subs	r3, #3
   14866:	4a27      	ldr	r2, [pc, #156]	; (14904 <morse_translate()+0xbe0>)
   14868:	5cd3      	ldrb	r3, [r2, r3]
   1486a:	2b2e      	cmp	r3, #46	; 0x2e
   1486c:	d11d      	bne.n	148aa <morse_translate()+0xb86>
   1486e:	4b24      	ldr	r3, [pc, #144]	; (14900 <morse_translate()+0xbdc>)
   14870:	681b      	ldr	r3, [r3, #0]
   14872:	3b02      	subs	r3, #2
   14874:	4a23      	ldr	r2, [pc, #140]	; (14904 <morse_translate()+0xbe0>)
   14876:	5cd3      	ldrb	r3, [r2, r3]
   14878:	2b2d      	cmp	r3, #45	; 0x2d
   1487a:	d116      	bne.n	148aa <morse_translate()+0xb86>
   1487c:	4b20      	ldr	r3, [pc, #128]	; (14900 <morse_translate()+0xbdc>)
   1487e:	681b      	ldr	r3, [r3, #0]
   14880:	3b01      	subs	r3, #1
   14882:	4a20      	ldr	r2, [pc, #128]	; (14904 <morse_translate()+0xbe0>)
   14884:	5cd3      	ldrb	r3, [r2, r3]
   14886:	2b2d      	cmp	r3, #45	; 0x2d
   14888:	d10f      	bne.n	148aa <morse_translate()+0xb86>
   1488a:	4b1d      	ldr	r3, [pc, #116]	; (14900 <morse_translate()+0xbdc>)
   1488c:	681b      	ldr	r3, [r3, #0]
   1488e:	4a1d      	ldr	r2, [pc, #116]	; (14904 <morse_translate()+0xbe0>)
   14890:	5cd3      	ldrb	r3, [r2, r3]
   14892:	2b26      	cmp	r3, #38	; 0x26
   14894:	d109      	bne.n	148aa <morse_translate()+0xb86>
        translated[translated_count]='y';
   14896:	4b1c      	ldr	r3, [pc, #112]	; (14908 <morse_translate()+0xbe4>)
   14898:	681b      	ldr	r3, [r3, #0]
   1489a:	4a1c      	ldr	r2, [pc, #112]	; (1490c <morse_translate()+0xbe8>)
   1489c:	2179      	movs	r1, #121	; 0x79
   1489e:	54d1      	strb	r1, [r2, r3]
        translated_count++;
   148a0:	4b19      	ldr	r3, [pc, #100]	; (14908 <morse_translate()+0xbe4>)
   148a2:	681b      	ldr	r3, [r3, #0]
   148a4:	3301      	adds	r3, #1
   148a6:	4a18      	ldr	r2, [pc, #96]	; (14908 <morse_translate()+0xbe4>)
   148a8:	6013      	str	r3, [r2, #0]
        }
            if((morse[increment-5] =='&' || morse[increment-5] == '|' || morse[increment-5] == '?') && morse[increment-4] =='-' && morse[increment-3] == '-' && morse[increment-2] == '.' && morse[increment-1] == '.'  && morse[increment] == '&'){
   148aa:	4b15      	ldr	r3, [pc, #84]	; (14900 <morse_translate()+0xbdc>)
   148ac:	681b      	ldr	r3, [r3, #0]
   148ae:	3b05      	subs	r3, #5
   148b0:	4a14      	ldr	r2, [pc, #80]	; (14904 <morse_translate()+0xbe0>)
   148b2:	5cd3      	ldrb	r3, [r2, r3]
   148b4:	2b26      	cmp	r3, #38	; 0x26
   148b6:	d00d      	beq.n	148d4 <morse_translate()+0xbb0>
   148b8:	4b11      	ldr	r3, [pc, #68]	; (14900 <morse_translate()+0xbdc>)
   148ba:	681b      	ldr	r3, [r3, #0]
   148bc:	3b05      	subs	r3, #5
   148be:	4a11      	ldr	r2, [pc, #68]	; (14904 <morse_translate()+0xbe0>)
   148c0:	5cd3      	ldrb	r3, [r2, r3]
   148c2:	2b7c      	cmp	r3, #124	; 0x7c
   148c4:	d006      	beq.n	148d4 <morse_translate()+0xbb0>
   148c6:	4b0e      	ldr	r3, [pc, #56]	; (14900 <morse_translate()+0xbdc>)
   148c8:	681b      	ldr	r3, [r3, #0]
   148ca:	3b05      	subs	r3, #5
   148cc:	4a0d      	ldr	r2, [pc, #52]	; (14904 <morse_translate()+0xbe0>)
   148ce:	5cd3      	ldrb	r3, [r2, r3]
   148d0:	2b3f      	cmp	r3, #63	; 0x3f
   148d2:	d134      	bne.n	1493e <morse_translate()+0xc1a>
   148d4:	4b0a      	ldr	r3, [pc, #40]	; (14900 <morse_translate()+0xbdc>)
   148d6:	681b      	ldr	r3, [r3, #0]
   148d8:	3b04      	subs	r3, #4
   148da:	4a0a      	ldr	r2, [pc, #40]	; (14904 <morse_translate()+0xbe0>)
   148dc:	5cd3      	ldrb	r3, [r2, r3]
   148de:	2b2d      	cmp	r3, #45	; 0x2d
   148e0:	d12d      	bne.n	1493e <morse_translate()+0xc1a>
   148e2:	4b07      	ldr	r3, [pc, #28]	; (14900 <morse_translate()+0xbdc>)
   148e4:	681b      	ldr	r3, [r3, #0]
   148e6:	3b03      	subs	r3, #3
   148e8:	4a06      	ldr	r2, [pc, #24]	; (14904 <morse_translate()+0xbe0>)
   148ea:	5cd3      	ldrb	r3, [r2, r3]
   148ec:	2b2d      	cmp	r3, #45	; 0x2d
   148ee:	d126      	bne.n	1493e <morse_translate()+0xc1a>
   148f0:	4b03      	ldr	r3, [pc, #12]	; (14900 <morse_translate()+0xbdc>)
   148f2:	681b      	ldr	r3, [r3, #0]
   148f4:	3b02      	subs	r3, #2
   148f6:	4a03      	ldr	r2, [pc, #12]	; (14904 <morse_translate()+0xbe0>)
   148f8:	5cd3      	ldrb	r3, [r2, r3]
   148fa:	2b2e      	cmp	r3, #46	; 0x2e
   148fc:	d11f      	bne.n	1493e <morse_translate()+0xc1a>
   148fe:	e007      	b.n	14910 <morse_translate()+0xbec>
   14900:	100007a0 	.word	0x100007a0
   14904:	100007a8 	.word	0x100007a8
   14908:	10000460 	.word	0x10000460
   1490c:	10000b90 	.word	0x10000b90
   14910:	4b0e      	ldr	r3, [pc, #56]	; (1494c <morse_translate()+0xc28>)
   14912:	681b      	ldr	r3, [r3, #0]
   14914:	3b01      	subs	r3, #1
   14916:	4a0e      	ldr	r2, [pc, #56]	; (14950 <morse_translate()+0xc2c>)
   14918:	5cd3      	ldrb	r3, [r2, r3]
   1491a:	2b2e      	cmp	r3, #46	; 0x2e
   1491c:	d10f      	bne.n	1493e <morse_translate()+0xc1a>
   1491e:	4b0b      	ldr	r3, [pc, #44]	; (1494c <morse_translate()+0xc28>)
   14920:	681b      	ldr	r3, [r3, #0]
   14922:	4a0b      	ldr	r2, [pc, #44]	; (14950 <morse_translate()+0xc2c>)
   14924:	5cd3      	ldrb	r3, [r2, r3]
   14926:	2b26      	cmp	r3, #38	; 0x26
   14928:	d109      	bne.n	1493e <morse_translate()+0xc1a>
        translated[translated_count]='z';
   1492a:	4b0a      	ldr	r3, [pc, #40]	; (14954 <morse_translate()+0xc30>)
   1492c:	681b      	ldr	r3, [r3, #0]
   1492e:	4a0a      	ldr	r2, [pc, #40]	; (14958 <morse_translate()+0xc34>)
   14930:	217a      	movs	r1, #122	; 0x7a
   14932:	54d1      	strb	r1, [r2, r3]
        translated_count++;
   14934:	4b07      	ldr	r3, [pc, #28]	; (14954 <morse_translate()+0xc30>)
   14936:	681b      	ldr	r3, [r3, #0]
   14938:	3301      	adds	r3, #1
   1493a:	4a06      	ldr	r2, [pc, #24]	; (14954 <morse_translate()+0xc30>)
   1493c:	6013      	str	r3, [r2, #0]
   1493e:	4623      	mov	r3, r4
   14940:	4619      	mov	r1, r3
   14942:	4806      	ldr	r0, [pc, #24]	; (1495c <morse_translate()+0xc38>)
   14944:	f001 fdb0 	bl	164a8 <__cyg_profile_func_exit>
        }
}
   14948:	bf00      	nop
   1494a:	bd10      	pop	{r4, pc}
   1494c:	100007a0 	.word	0x100007a0
   14950:	100007a8 	.word	0x100007a8
   14954:	10000460 	.word	0x10000460
   14958:	10000b90 	.word	0x10000b90
   1495c:	00013d25 	.word	0x00013d25

00014960 <Status Wait<Wait(unsigned long long)::{lambda()#1}>(unsigned long long, Wait(unsigned long long)::{lambda()#1})>:
inline Status Wait(uint64_t timeout, F is_done)
   14960:	e92d 4830 	stmdb	sp!, {r4, r5, fp, lr}
   14964:	b088      	sub	sp, #32
   14966:	4675      	mov	r5, lr
   14968:	e9cd 0102 	strd	r0, r1, [sp, #8]
   1496c:	f88d 2004 	strb.w	r2, [sp, #4]
   14970:	462b      	mov	r3, r5
   14972:	4619      	mov	r1, r3
   14974:	4824      	ldr	r0, [pc, #144]	; (14a08 <Status Wait<Wait(unsigned long long)::{lambda()#1}>(unsigned long long, Wait(unsigned long long)::{lambda()#1})+0xa8>)
   14976:	f001 fd83 	bl	16480 <__cyg_profile_func_enter>
  uint64_t timeout_time = 0;
   1497a:	f04f 0300 	mov.w	r3, #0
   1497e:	f04f 0400 	mov.w	r4, #0
   14982:	e9cd 3406 	strd	r3, r4, [sp, #24]
  if (timeout == kMaxWait)
   14986:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
   1498a:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
   1498e:	bf08      	it	eq
   14990:	f1b3 3fff 	cmpeq.w	r3, #4294967295	; 0xffffffff
   14994:	d106      	bne.n	149a4 <Status Wait<Wait(unsigned long long)::{lambda()#1}>(unsigned long long, Wait(unsigned long long)::{lambda()#1})+0x44>
    timeout_time = kMaxWait;
   14996:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1499a:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   1499e:	e9cd 3406 	strd	r3, r4, [sp, #24]
   149a2:	e00b      	b.n	149bc <Status Wait<Wait(unsigned long long)::{lambda()#1}>(unsigned long long, Wait(unsigned long long)::{lambda()#1})+0x5c>
    timeout_time = Milliseconds() + timeout;
   149a4:	f7fc fb26 	bl	10ff4 <Milliseconds()>
   149a8:	460a      	mov	r2, r1
   149aa:	4601      	mov	r1, r0
   149ac:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
   149b0:	eb13 0b01 	adds.w	fp, r3, r1
   149b4:	eb44 0c02 	adc.w	ip, r4, r2
   149b8:	e9cd bc06 	strd	fp, ip, [sp, #24]
  Status status = Status::kTimedOut;
   149bc:	2301      	movs	r3, #1
   149be:	9305      	str	r3, [sp, #20]
  while (Milliseconds() < timeout_time)
   149c0:	f7fc fb18 	bl	10ff4 <Milliseconds()>
   149c4:	460a      	mov	r2, r1
   149c6:	4601      	mov	r1, r0
   149c8:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
   149cc:	42a2      	cmp	r2, r4
   149ce:	bf08      	it	eq
   149d0:	4299      	cmpeq	r1, r3
   149d2:	bf34      	ite	cc
   149d4:	2301      	movcc	r3, #1
   149d6:	2300      	movcs	r3, #0
   149d8:	b2db      	uxtb	r3, r3
   149da:	2b00      	cmp	r3, #0
   149dc:	d008      	beq.n	149f0 <Status Wait<Wait(unsigned long long)::{lambda()#1}>(unsigned long long, Wait(unsigned long long)::{lambda()#1})+0x90>
    if (is_done())
   149de:	ab01      	add	r3, sp, #4
   149e0:	4618      	mov	r0, r3
   149e2:	f7fc fb29 	bl	11038 <Wait(unsigned long long)::{lambda()#1}::operator()() const>
   149e6:	4603      	mov	r3, r0
   149e8:	2b00      	cmp	r3, #0
   149ea:	d0e9      	beq.n	149c0 <Status Wait<Wait(unsigned long long)::{lambda()#1}>(unsigned long long, Wait(unsigned long long)::{lambda()#1})+0x60>
      status = Status::kSuccess;
   149ec:	2300      	movs	r3, #0
   149ee:	9305      	str	r3, [sp, #20]
  return status;
   149f0:	9c05      	ldr	r4, [sp, #20]
   149f2:	462b      	mov	r3, r5
   149f4:	4619      	mov	r1, r3
   149f6:	4804      	ldr	r0, [pc, #16]	; (14a08 <Status Wait<Wait(unsigned long long)::{lambda()#1}>(unsigned long long, Wait(unsigned long long)::{lambda()#1})+0xa8>)
   149f8:	f001 fd56 	bl	164a8 <__cyg_profile_func_exit>
   149fc:	4623      	mov	r3, r4
}
   149fe:	4618      	mov	r0, r3
   14a00:	b008      	add	sp, #32
   14a02:	e8bd 8830 	ldmia.w	sp!, {r4, r5, fp, pc}
   14a06:	bf00      	nop
   14a08:	00014961 	.word	0x00014961

00014a0c <unsigned long bit::Set<unsigned long>(unsigned long, unsigned long)>:
constexpr T Set(T target, uint32_t position)
   14a0c:	b530      	push	{r4, r5, lr}
   14a0e:	b083      	sub	sp, #12
   14a10:	4675      	mov	r5, lr
   14a12:	9001      	str	r0, [sp, #4]
   14a14:	9100      	str	r1, [sp, #0]
   14a16:	462b      	mov	r3, r5
   14a18:	4619      	mov	r1, r3
   14a1a:	480a      	ldr	r0, [pc, #40]	; (14a44 <unsigned long bit::Set<unsigned long>(unsigned long, unsigned long)+0x38>)
   14a1c:	f001 fd30 	bl	16480 <__cyg_profile_func_enter>
  return target | (1 << position);
   14a20:	2201      	movs	r2, #1
   14a22:	9b00      	ldr	r3, [sp, #0]
   14a24:	fa02 f303 	lsl.w	r3, r2, r3
   14a28:	461a      	mov	r2, r3
   14a2a:	9b01      	ldr	r3, [sp, #4]
   14a2c:	ea42 0403 	orr.w	r4, r2, r3
   14a30:	462b      	mov	r3, r5
   14a32:	4619      	mov	r1, r3
   14a34:	4803      	ldr	r0, [pc, #12]	; (14a44 <unsigned long bit::Set<unsigned long>(unsigned long, unsigned long)+0x38>)
   14a36:	f001 fd37 	bl	164a8 <__cyg_profile_func_exit>
   14a3a:	4623      	mov	r3, r4
}
   14a3c:	4618      	mov	r0, r3
   14a3e:	b003      	add	sp, #12
   14a40:	bd30      	pop	{r4, r5, pc}
   14a42:	bf00      	nop
   14a44:	00014a0d 	.word	0x00014a0d

00014a48 <bool bit::Read<unsigned long>(unsigned long, unsigned long)>:
[[gnu::always_inline]][[nodiscard]] constexpr bool Read(T target,
   14a48:	b530      	push	{r4, r5, lr}
   14a4a:	b083      	sub	sp, #12
   14a4c:	4675      	mov	r5, lr
   14a4e:	9001      	str	r0, [sp, #4]
   14a50:	9100      	str	r1, [sp, #0]
   14a52:	462b      	mov	r3, r5
   14a54:	4619      	mov	r1, r3
   14a56:	480c      	ldr	r0, [pc, #48]	; (14a88 <bool bit::Read<unsigned long>(unsigned long, unsigned long)+0x40>)
   14a58:	f001 fd12 	bl	16480 <__cyg_profile_func_enter>
  return static_cast<bool>(target & (1 << position));
   14a5c:	2201      	movs	r2, #1
   14a5e:	9b00      	ldr	r3, [sp, #0]
   14a60:	fa02 f303 	lsl.w	r3, r2, r3
   14a64:	461a      	mov	r2, r3
   14a66:	9b01      	ldr	r3, [sp, #4]
   14a68:	4013      	ands	r3, r2
   14a6a:	2b00      	cmp	r3, #0
   14a6c:	bf14      	ite	ne
   14a6e:	2301      	movne	r3, #1
   14a70:	2300      	moveq	r3, #0
   14a72:	b2dc      	uxtb	r4, r3
   14a74:	462b      	mov	r3, r5
   14a76:	4619      	mov	r1, r3
   14a78:	4803      	ldr	r0, [pc, #12]	; (14a88 <bool bit::Read<unsigned long>(unsigned long, unsigned long)+0x40>)
   14a7a:	f001 fd15 	bl	164a8 <__cyg_profile_func_exit>
   14a7e:	4623      	mov	r3, r4
}
   14a80:	4618      	mov	r0, r3
   14a82:	b003      	add	sp, #12
   14a84:	bd30      	pop	{r4, r5, pc}
   14a86:	bf00      	nop
   14a88:	00014a49 	.word	0x00014a49

00014a8c <unsigned long bit::Insert<unsigned long, unsigned char>(unsigned long, unsigned char, unsigned long, unsigned long)>:
constexpr T Insert(T target, U value, uint32_t position, uint32_t width = 1)
   14a8c:	b530      	push	{r4, r5, lr}
   14a8e:	b089      	sub	sp, #36	; 0x24
   14a90:	4675      	mov	r5, lr
   14a92:	9003      	str	r0, [sp, #12]
   14a94:	9201      	str	r2, [sp, #4]
   14a96:	9300      	str	r3, [sp, #0]
   14a98:	460b      	mov	r3, r1
   14a9a:	f88d 300b 	strb.w	r3, [sp, #11]
   14a9e:	462b      	mov	r3, r5
   14aa0:	4619      	mov	r1, r3
   14aa2:	4816      	ldr	r0, [pc, #88]	; (14afc <unsigned long bit::Insert<unsigned long, unsigned char>(unsigned long, unsigned char, unsigned long, unsigned long)+0x70>)
   14aa4:	f001 fcec 	bl	16480 <__cyg_profile_func_enter>
  constexpr UnsignedT kFieldOfOnes = GenerateFieldOfOnes<T>();
   14aa8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   14aac:	9307      	str	r3, [sp, #28]
  constexpr size_t kTargetWidth     = sizeof(T) * 8;
   14aae:	2320      	movs	r3, #32
   14ab0:	9306      	str	r3, [sp, #24]
  UnsignedT mask   = kFieldOfOnes >> (kTargetWidth - width);
   14ab2:	9b00      	ldr	r3, [sp, #0]
   14ab4:	f1c3 0320 	rsb	r3, r3, #32
   14ab8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   14abc:	fa22 f303 	lsr.w	r3, r2, r3
   14ac0:	9305      	str	r3, [sp, #20]
  target &= ~(mask << position);
   14ac2:	9a05      	ldr	r2, [sp, #20]
   14ac4:	9b01      	ldr	r3, [sp, #4]
   14ac6:	fa02 f303 	lsl.w	r3, r2, r3
   14aca:	43db      	mvns	r3, r3
   14acc:	9a03      	ldr	r2, [sp, #12]
   14ace:	4013      	ands	r3, r2
   14ad0:	9303      	str	r3, [sp, #12]
  target |= (value & mask) << position;
   14ad2:	f89d 200b 	ldrb.w	r2, [sp, #11]
   14ad6:	9b05      	ldr	r3, [sp, #20]
   14ad8:	401a      	ands	r2, r3
   14ada:	9b01      	ldr	r3, [sp, #4]
   14adc:	fa02 f303 	lsl.w	r3, r2, r3
   14ae0:	9a03      	ldr	r2, [sp, #12]
   14ae2:	4313      	orrs	r3, r2
   14ae4:	9303      	str	r3, [sp, #12]
  return target;
   14ae6:	9c03      	ldr	r4, [sp, #12]
   14ae8:	462b      	mov	r3, r5
   14aea:	4619      	mov	r1, r3
   14aec:	4803      	ldr	r0, [pc, #12]	; (14afc <unsigned long bit::Insert<unsigned long, unsigned char>(unsigned long, unsigned char, unsigned long, unsigned long)+0x70>)
   14aee:	f001 fcdb 	bl	164a8 <__cyg_profile_func_exit>
   14af2:	4623      	mov	r3, r4
}
   14af4:	4618      	mov	r0, r3
   14af6:	b009      	add	sp, #36	; 0x24
   14af8:	bd30      	pop	{r4, r5, pc}
   14afa:	bf00      	nop
   14afc:	00014a8d 	.word	0x00014a8d

00014b00 <unsigned long bit::Extract<unsigned long>(unsigned long, unsigned long, unsigned long)>:
constexpr T Extract(T target, uint32_t position, uint32_t width = 1)
   14b00:	b530      	push	{r4, r5, lr}
   14b02:	b089      	sub	sp, #36	; 0x24
   14b04:	4675      	mov	r5, lr
   14b06:	9003      	str	r0, [sp, #12]
   14b08:	9102      	str	r1, [sp, #8]
   14b0a:	9201      	str	r2, [sp, #4]
   14b0c:	462b      	mov	r3, r5
   14b0e:	4619      	mov	r1, r3
   14b10:	480f      	ldr	r0, [pc, #60]	; (14b50 <unsigned long bit::Extract<unsigned long>(unsigned long, unsigned long, unsigned long)+0x50>)
   14b12:	f001 fcb5 	bl	16480 <__cyg_profile_func_enter>
  constexpr UnsignedT kFieldOfOnes = GenerateFieldOfOnes<T>();
   14b16:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   14b1a:	9307      	str	r3, [sp, #28]
  constexpr size_t kTargetWidth     = sizeof(T) * 8;
   14b1c:	2320      	movs	r3, #32
   14b1e:	9306      	str	r3, [sp, #24]
  UnsignedT mask   = kFieldOfOnes >> (kTargetWidth - width);
   14b20:	9b01      	ldr	r3, [sp, #4]
   14b22:	f1c3 0320 	rsb	r3, r3, #32
   14b26:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   14b2a:	fa22 f303 	lsr.w	r3, r2, r3
   14b2e:	9305      	str	r3, [sp, #20]
  return (target >> position) & mask;
   14b30:	9a03      	ldr	r2, [sp, #12]
   14b32:	9b02      	ldr	r3, [sp, #8]
   14b34:	40da      	lsrs	r2, r3
   14b36:	9b05      	ldr	r3, [sp, #20]
   14b38:	ea02 0403 	and.w	r4, r2, r3
   14b3c:	462b      	mov	r3, r5
   14b3e:	4619      	mov	r1, r3
   14b40:	4803      	ldr	r0, [pc, #12]	; (14b50 <unsigned long bit::Extract<unsigned long>(unsigned long, unsigned long, unsigned long)+0x50>)
   14b42:	f001 fcb1 	bl	164a8 <__cyg_profile_func_exit>
   14b46:	4623      	mov	r3, r4
}
   14b48:	4618      	mov	r0, r3
   14b4a:	b009      	add	sp, #36	; 0x24
   14b4c:	bd30      	pop	{r4, r5, pc}
   14b4e:	bf00      	nop
   14b50:	00014b01 	.word	0x00014b01

00014b54 <unsigned long bit::Insert<unsigned long, bool>(unsigned long, bool, unsigned long, unsigned long)>:
constexpr T Insert(T target, U value, uint32_t position, uint32_t width = 1)
   14b54:	b530      	push	{r4, r5, lr}
   14b56:	b089      	sub	sp, #36	; 0x24
   14b58:	4675      	mov	r5, lr
   14b5a:	9003      	str	r0, [sp, #12]
   14b5c:	9201      	str	r2, [sp, #4]
   14b5e:	9300      	str	r3, [sp, #0]
   14b60:	460b      	mov	r3, r1
   14b62:	f88d 300b 	strb.w	r3, [sp, #11]
   14b66:	462b      	mov	r3, r5
   14b68:	4619      	mov	r1, r3
   14b6a:	4816      	ldr	r0, [pc, #88]	; (14bc4 <unsigned long bit::Insert<unsigned long, bool>(unsigned long, bool, unsigned long, unsigned long)+0x70>)
   14b6c:	f001 fc88 	bl	16480 <__cyg_profile_func_enter>
  constexpr UnsignedT kFieldOfOnes = GenerateFieldOfOnes<T>();
   14b70:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   14b74:	9307      	str	r3, [sp, #28]
  constexpr size_t kTargetWidth     = sizeof(T) * 8;
   14b76:	2320      	movs	r3, #32
   14b78:	9306      	str	r3, [sp, #24]
  UnsignedT mask   = kFieldOfOnes >> (kTargetWidth - width);
   14b7a:	9b00      	ldr	r3, [sp, #0]
   14b7c:	f1c3 0320 	rsb	r3, r3, #32
   14b80:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   14b84:	fa22 f303 	lsr.w	r3, r2, r3
   14b88:	9305      	str	r3, [sp, #20]
  target &= ~(mask << position);
   14b8a:	9a05      	ldr	r2, [sp, #20]
   14b8c:	9b01      	ldr	r3, [sp, #4]
   14b8e:	fa02 f303 	lsl.w	r3, r2, r3
   14b92:	43db      	mvns	r3, r3
   14b94:	9a03      	ldr	r2, [sp, #12]
   14b96:	4013      	ands	r3, r2
   14b98:	9303      	str	r3, [sp, #12]
  target |= (value & mask) << position;
   14b9a:	f89d 200b 	ldrb.w	r2, [sp, #11]
   14b9e:	9b05      	ldr	r3, [sp, #20]
   14ba0:	401a      	ands	r2, r3
   14ba2:	9b01      	ldr	r3, [sp, #4]
   14ba4:	fa02 f303 	lsl.w	r3, r2, r3
   14ba8:	9a03      	ldr	r2, [sp, #12]
   14baa:	4313      	orrs	r3, r2
   14bac:	9303      	str	r3, [sp, #12]
  return target;
   14bae:	9c03      	ldr	r4, [sp, #12]
   14bb0:	462b      	mov	r3, r5
   14bb2:	4619      	mov	r1, r3
   14bb4:	4803      	ldr	r0, [pc, #12]	; (14bc4 <unsigned long bit::Insert<unsigned long, bool>(unsigned long, bool, unsigned long, unsigned long)+0x70>)
   14bb6:	f001 fc77 	bl	164a8 <__cyg_profile_func_exit>
   14bba:	4623      	mov	r3, r4
}
   14bbc:	4618      	mov	r0, r3
   14bbe:	b009      	add	sp, #36	; 0x24
   14bc0:	bd30      	pop	{r4, r5, pc}
   14bc2:	bf00      	nop
   14bc4:	00014b55 	.word	0x00014b55

00014bc8 <__static_initialization_and_destruction_0(int, int)>:
   14bc8:	b510      	push	{r4, lr}
   14bca:	b082      	sub	sp, #8
   14bcc:	4674      	mov	r4, lr
   14bce:	9001      	str	r0, [sp, #4]
   14bd0:	9100      	str	r1, [sp, #0]
   14bd2:	4623      	mov	r3, r4
   14bd4:	4619      	mov	r1, r3
   14bd6:	481f      	ldr	r0, [pc, #124]	; (14c54 <__static_initialization_and_destruction_0(int, int)+0x8c>)
   14bd8:	f001 fc52 	bl	16480 <__cyg_profile_func_enter>
   14bdc:	9b01      	ldr	r3, [sp, #4]
   14bde:	2b01      	cmp	r3, #1
   14be0:	d12f      	bne.n	14c42 <__static_initialization_and_destruction_0(int, int)+0x7a>
   14be2:	9b00      	ldr	r3, [sp, #0]
   14be4:	f64f 72ff 	movw	r2, #65535	; 0xffff
   14be8:	4293      	cmp	r3, r2
   14bea:	d12a      	bne.n	14c42 <__static_initialization_and_destruction_0(int, int)+0x7a>
  LabGPIO button3(0, 29);
   14bec:	221d      	movs	r2, #29
   14bee:	2100      	movs	r1, #0
   14bf0:	4819      	ldr	r0, [pc, #100]	; (14c58 <__static_initialization_and_destruction_0(int, int)+0x90>)
   14bf2:	f7fb fbb9 	bl	10368 <LabGPIO::LabGPIO(unsigned char, unsigned char)>
  LabGPIO led3(1, 18);
   14bf6:	2212      	movs	r2, #18
   14bf8:	2101      	movs	r1, #1
   14bfa:	4818      	ldr	r0, [pc, #96]	; (14c5c <__static_initialization_and_destruction_0(int, int)+0x94>)
   14bfc:	f7fb fbb4 	bl	10368 <LabGPIO::LabGPIO(unsigned char, unsigned char)>
  LabGPIO button2(0, 30);
   14c00:	221e      	movs	r2, #30
   14c02:	2100      	movs	r1, #0
   14c04:	4816      	ldr	r0, [pc, #88]	; (14c60 <__static_initialization_and_destruction_0(int, int)+0x98>)
   14c06:	f7fb fbaf 	bl	10368 <LabGPIO::LabGPIO(unsigned char, unsigned char)>
  LabGPIO led2(1, 24);
   14c0a:	2218      	movs	r2, #24
   14c0c:	2101      	movs	r1, #1
   14c0e:	4815      	ldr	r0, [pc, #84]	; (14c64 <__static_initialization_and_destruction_0(int, int)+0x9c>)
   14c10:	f7fb fbaa 	bl	10368 <LabGPIO::LabGPIO(unsigned char, unsigned char)>
  LabGPIO button1(1, 15);
   14c14:	220f      	movs	r2, #15
   14c16:	2101      	movs	r1, #1
   14c18:	4813      	ldr	r0, [pc, #76]	; (14c68 <__static_initialization_and_destruction_0(int, int)+0xa0>)
   14c1a:	f7fb fba5 	bl	10368 <LabGPIO::LabGPIO(unsigned char, unsigned char)>
  LabGPIO led1(1, 26);
   14c1e:	221a      	movs	r2, #26
   14c20:	2101      	movs	r1, #1
   14c22:	4812      	ldr	r0, [pc, #72]	; (14c6c <__static_initialization_and_destruction_0(int, int)+0xa4>)
   14c24:	f7fb fba0 	bl	10368 <LabGPIO::LabGPIO(unsigned char, unsigned char)>
  LabGPIO button0(1, 19);
   14c28:	2213      	movs	r2, #19
   14c2a:	2101      	movs	r1, #1
   14c2c:	4810      	ldr	r0, [pc, #64]	; (14c70 <__static_initialization_and_destruction_0(int, int)+0xa8>)
   14c2e:	f7fb fb9b 	bl	10368 <LabGPIO::LabGPIO(unsigned char, unsigned char)>
  LabGPIO led0(2, 3);
   14c32:	2203      	movs	r2, #3
   14c34:	2102      	movs	r1, #2
   14c36:	480f      	ldr	r0, [pc, #60]	; (14c74 <__static_initialization_and_destruction_0(int, int)+0xac>)
   14c38:	f7fb fb96 	bl	10368 <LabGPIO::LabGPIO(unsigned char, unsigned char)>
  OledTerminal oled_terminal;
   14c3c:	480e      	ldr	r0, [pc, #56]	; (14c78 <__static_initialization_and_destruction_0(int, int)+0xb0>)
   14c3e:	f7fe fe15 	bl	1386c <OledTerminal::OledTerminal()>
   14c42:	4623      	mov	r3, r4
   14c44:	4619      	mov	r1, r3
   14c46:	4803      	ldr	r0, [pc, #12]	; (14c54 <__static_initialization_and_destruction_0(int, int)+0x8c>)
   14c48:	f001 fc2e 	bl	164a8 <__cyg_profile_func_exit>
}
   14c4c:	bf00      	nop
   14c4e:	b002      	add	sp, #8
   14c50:	bd10      	pop	{r4, pc}
   14c52:	bf00      	nop
   14c54:	00014bc9 	.word	0x00014bc9
   14c58:	10000770 	.word	0x10000770
   14c5c:	10000774 	.word	0x10000774
   14c60:	10000778 	.word	0x10000778
   14c64:	1000077c 	.word	0x1000077c
   14c68:	10000780 	.word	0x10000780
   14c6c:	10000784 	.word	0x10000784
   14c70:	10000788 	.word	0x10000788
   14c74:	1000078c 	.word	0x1000078c
   14c78:	10000bf4 	.word	0x10000bf4

00014c7c <_GLOBAL__sub_I_button3>:
   14c7c:	b510      	push	{r4, lr}
   14c7e:	4674      	mov	r4, lr
   14c80:	4623      	mov	r3, r4
   14c82:	4619      	mov	r1, r3
   14c84:	4806      	ldr	r0, [pc, #24]	; (14ca0 <_GLOBAL__sub_I_button3+0x24>)
   14c86:	f001 fbfb 	bl	16480 <__cyg_profile_func_enter>
   14c8a:	f64f 71ff 	movw	r1, #65535	; 0xffff
   14c8e:	2001      	movs	r0, #1
   14c90:	f7ff ff9a 	bl	14bc8 <__static_initialization_and_destruction_0(int, int)>
   14c94:	4623      	mov	r3, r4
   14c96:	4619      	mov	r1, r3
   14c98:	4801      	ldr	r0, [pc, #4]	; (14ca0 <_GLOBAL__sub_I_button3+0x24>)
   14c9a:	f001 fc05 	bl	164a8 <__cyg_profile_func_exit>
   14c9e:	bd10      	pop	{r4, pc}
   14ca0:	00014c7d 	.word	0x00014c7d

00014ca4 <SetUptimeFunction(unsigned long long (*)())>:
{
   14ca4:	b510      	push	{r4, lr}
   14ca6:	b082      	sub	sp, #8
   14ca8:	4674      	mov	r4, lr
   14caa:	9001      	str	r0, [sp, #4]
   14cac:	4623      	mov	r3, r4
   14cae:	4619      	mov	r1, r3
   14cb0:	4806      	ldr	r0, [pc, #24]	; (14ccc <SetUptimeFunction(unsigned long long (*)())+0x28>)
   14cb2:	f001 fbe5 	bl	16480 <__cyg_profile_func_enter>
  Uptime = uptime_function;
   14cb6:	4a06      	ldr	r2, [pc, #24]	; (14cd0 <SetUptimeFunction(unsigned long long (*)())+0x2c>)
   14cb8:	9b01      	ldr	r3, [sp, #4]
   14cba:	6013      	str	r3, [r2, #0]
   14cbc:	4623      	mov	r3, r4
   14cbe:	4619      	mov	r1, r3
   14cc0:	4802      	ldr	r0, [pc, #8]	; (14ccc <SetUptimeFunction(unsigned long long (*)())+0x28>)
   14cc2:	f001 fbf1 	bl	164a8 <__cyg_profile_func_exit>
}
   14cc6:	bf00      	nop
   14cc8:	b002      	add	sp, #8
   14cca:	bd10      	pop	{r4, pc}
   14ccc:	00014ca5 	.word	0x00014ca5
   14cd0:	10000004 	.word	0x10000004

00014cd4 <SystemTimer::DisableTimer()>:
  /// system_timer_isr defaults to nullptr. The actual SystemTickHandler should
  /// check if the isr is set to nullptr, and if it is, turn off the timer, if
  /// set a proper function then execute it.
  inline static IsrPointer system_timer_isr = nullptr;
  /// WARNING: Doing so will most likely disable FreeRTOS
  static void DisableTimer()
   14cd4:	b510      	push	{r4, lr}
   14cd6:	4674      	mov	r4, lr
   14cd8:	4623      	mov	r3, r4
   14cda:	4619      	mov	r1, r3
   14cdc:	480a      	ldr	r0, [pc, #40]	; (14d08 <SystemTimer::DisableTimer()+0x34>)
   14cde:	f001 fbcf 	bl	16480 <__cyg_profile_func_enter>
  {
    sys_tick->LOAD = 0;
   14ce2:	4b0a      	ldr	r3, [pc, #40]	; (14d0c <SystemTimer::DisableTimer()+0x38>)
   14ce4:	681b      	ldr	r3, [r3, #0]
   14ce6:	2200      	movs	r2, #0
   14ce8:	605a      	str	r2, [r3, #4]
    sys_tick->VAL  = 0;
   14cea:	4b08      	ldr	r3, [pc, #32]	; (14d0c <SystemTimer::DisableTimer()+0x38>)
   14cec:	681b      	ldr	r3, [r3, #0]
   14cee:	2200      	movs	r2, #0
   14cf0:	609a      	str	r2, [r3, #8]
    sys_tick->CTRL = 0;
   14cf2:	4b06      	ldr	r3, [pc, #24]	; (14d0c <SystemTimer::DisableTimer()+0x38>)
   14cf4:	681b      	ldr	r3, [r3, #0]
   14cf6:	2200      	movs	r2, #0
   14cf8:	601a      	str	r2, [r3, #0]
   14cfa:	4623      	mov	r3, r4
   14cfc:	4619      	mov	r1, r3
   14cfe:	4802      	ldr	r0, [pc, #8]	; (14d08 <SystemTimer::DisableTimer()+0x34>)
   14d00:	f001 fbd2 	bl	164a8 <__cyg_profile_func_exit>
  }
   14d04:	bf00      	nop
   14d06:	bd10      	pop	{r4, pc}
   14d08:	00014cd5 	.word	0x00014cd5
   14d0c:	10000464 	.word	0x10000464

00014d10 <SystemTimer::SystemTimerHandler()>:
  static void SystemTimerHandler()
   14d10:	b510      	push	{r4, lr}
   14d12:	4674      	mov	r4, lr
   14d14:	4623      	mov	r3, r4
   14d16:	4619      	mov	r1, r3
   14d18:	4808      	ldr	r0, [pc, #32]	; (14d3c <SystemTimer::SystemTimerHandler()+0x2c>)
   14d1a:	f001 fbb1 	bl	16480 <__cyg_profile_func_enter>
  {
    // This assumes that SysTickHandler is called every millisecond.
    // Changing that frequency will distort the milliseconds time.
    if (system_timer_isr != nullptr)
   14d1e:	4b08      	ldr	r3, [pc, #32]	; (14d40 <SystemTimer::SystemTimerHandler()+0x30>)
   14d20:	681b      	ldr	r3, [r3, #0]
   14d22:	2b00      	cmp	r3, #0
   14d24:	d002      	beq.n	14d2c <SystemTimer::SystemTimerHandler()+0x1c>
    {
      system_timer_isr();
   14d26:	4b06      	ldr	r3, [pc, #24]	; (14d40 <SystemTimer::SystemTimerHandler()+0x30>)
   14d28:	681b      	ldr	r3, [r3, #0]
   14d2a:	4798      	blx	r3
   14d2c:	4623      	mov	r3, r4
   14d2e:	4619      	mov	r1, r3
   14d30:	4802      	ldr	r0, [pc, #8]	; (14d3c <SystemTimer::SystemTimerHandler()+0x2c>)
   14d32:	f001 fbb9 	bl	164a8 <__cyg_profile_func_exit>
    }
  }
   14d36:	bf00      	nop
   14d38:	bd10      	pop	{r4, pc}
   14d3a:	bf00      	nop
   14d3c:	00014d11 	.word	0x00014d11
   14d40:	100013bc 	.word	0x100013bc

00014d44 <SystemTimer::SetIsrFunction(void (*)())>:
  constexpr SystemTimer() {}
  void SetIsrFunction(IsrPointer isr) override
   14d44:	b510      	push	{r4, lr}
   14d46:	b082      	sub	sp, #8
   14d48:	4674      	mov	r4, lr
   14d4a:	9001      	str	r0, [sp, #4]
   14d4c:	9100      	str	r1, [sp, #0]
   14d4e:	4623      	mov	r3, r4
   14d50:	4619      	mov	r1, r3
   14d52:	4807      	ldr	r0, [pc, #28]	; (14d70 <SystemTimer::SetIsrFunction(void (*)())+0x2c>)
   14d54:	f001 fb94 	bl	16480 <__cyg_profile_func_enter>
  {
    system_timer_isr = isr;
   14d58:	4a06      	ldr	r2, [pc, #24]	; (14d74 <SystemTimer::SetIsrFunction(void (*)())+0x30>)
   14d5a:	9b00      	ldr	r3, [sp, #0]
   14d5c:	6013      	str	r3, [r2, #0]
   14d5e:	4623      	mov	r3, r4
   14d60:	4619      	mov	r1, r3
   14d62:	4803      	ldr	r0, [pc, #12]	; (14d70 <SystemTimer::SetIsrFunction(void (*)())+0x2c>)
   14d64:	f001 fba0 	bl	164a8 <__cyg_profile_func_exit>
  }
   14d68:	bf00      	nop
   14d6a:	b002      	add	sp, #8
   14d6c:	bd10      	pop	{r4, pc}
   14d6e:	bf00      	nop
   14d70:	00014d45 	.word	0x00014d45
   14d74:	100013bc 	.word	0x100013bc

00014d78 <SystemTimer::StartTimer()>:
  bool StartTimer() override
   14d78:	b530      	push	{r4, r5, lr}
   14d7a:	b085      	sub	sp, #20
   14d7c:	4675      	mov	r5, lr
   14d7e:	9001      	str	r0, [sp, #4]
   14d80:	462b      	mov	r3, r5
   14d82:	4619      	mov	r1, r3
   14d84:	4820      	ldr	r0, [pc, #128]	; (14e08 <SystemTimer::StartTimer()+0x90>)
   14d86:	f001 fb7b 	bl	16480 <__cyg_profile_func_enter>
  {
    bool successful = false;
   14d8a:	2300      	movs	r3, #0
   14d8c:	f88d 300f 	strb.w	r3, [sp, #15]
    if (sys_tick->LOAD != 0)
   14d90:	4b1e      	ldr	r3, [pc, #120]	; (14e0c <SystemTimer::StartTimer()+0x94>)
   14d92:	681b      	ldr	r3, [r3, #0]
   14d94:	685b      	ldr	r3, [r3, #4]
   14d96:	2b00      	cmp	r3, #0
   14d98:	bf14      	ite	ne
   14d9a:	2301      	movne	r3, #1
   14d9c:	2300      	moveq	r3, #0
   14d9e:	b2db      	uxtb	r3, r3
   14da0:	2b00      	cmp	r3, #0
   14da2:	d01e      	beq.n	14de2 <SystemTimer::StartTimer()+0x6a>
    {
      sys_tick->VAL = 0;
   14da4:	4b19      	ldr	r3, [pc, #100]	; (14e0c <SystemTimer::StartTimer()+0x94>)
   14da6:	681b      	ldr	r3, [r3, #0]
   14da8:	2200      	movs	r2, #0
   14daa:	609a      	str	r2, [r3, #8]
      sys_tick->CTRL |= (1 << ControlBitMap::kTickInterupt);
   14dac:	4b17      	ldr	r3, [pc, #92]	; (14e0c <SystemTimer::StartTimer()+0x94>)
   14dae:	681b      	ldr	r3, [r3, #0]
   14db0:	681a      	ldr	r2, [r3, #0]
   14db2:	4b16      	ldr	r3, [pc, #88]	; (14e0c <SystemTimer::StartTimer()+0x94>)
   14db4:	681b      	ldr	r3, [r3, #0]
   14db6:	f042 0202 	orr.w	r2, r2, #2
   14dba:	601a      	str	r2, [r3, #0]
      sys_tick->CTRL |= (1 << ControlBitMap::kEnableCounter);
   14dbc:	4b13      	ldr	r3, [pc, #76]	; (14e0c <SystemTimer::StartTimer()+0x94>)
   14dbe:	681b      	ldr	r3, [r3, #0]
   14dc0:	681a      	ldr	r2, [r3, #0]
   14dc2:	4b12      	ldr	r3, [pc, #72]	; (14e0c <SystemTimer::StartTimer()+0x94>)
   14dc4:	681b      	ldr	r3, [r3, #0]
   14dc6:	f042 0201 	orr.w	r2, r2, #1
   14dca:	601a      	str	r2, [r3, #0]
      sys_tick->CTRL |= (1 << ControlBitMap::kClkSource);
   14dcc:	4b0f      	ldr	r3, [pc, #60]	; (14e0c <SystemTimer::StartTimer()+0x94>)
   14dce:	681b      	ldr	r3, [r3, #0]
   14dd0:	681a      	ldr	r2, [r3, #0]
   14dd2:	4b0e      	ldr	r3, [pc, #56]	; (14e0c <SystemTimer::StartTimer()+0x94>)
   14dd4:	681b      	ldr	r3, [r3, #0]
   14dd6:	f042 0204 	orr.w	r2, r2, #4
   14dda:	601a      	str	r2, [r3, #0]
      successful = true;
   14ddc:	2301      	movs	r3, #1
   14dde:	f88d 300f 	strb.w	r3, [sp, #15]
    }
    RegisterIsr(SysTick_IRQn, SystemTimerHandler);
   14de2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   14de6:	2201      	movs	r2, #1
   14de8:	4909      	ldr	r1, [pc, #36]	; (14e10 <SystemTimer::StartTimer()+0x98>)
   14dea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   14dee:	f001 fa1f 	bl	16230 <RegisterIsr(IRQn, void (*)(), bool, long)>
    return successful;
   14df2:	f89d 400f 	ldrb.w	r4, [sp, #15]
   14df6:	462b      	mov	r3, r5
   14df8:	4619      	mov	r1, r3
   14dfa:	4803      	ldr	r0, [pc, #12]	; (14e08 <SystemTimer::StartTimer()+0x90>)
   14dfc:	f001 fb54 	bl	164a8 <__cyg_profile_func_exit>
   14e00:	4623      	mov	r3, r4
  }
   14e02:	4618      	mov	r0, r3
   14e04:	b005      	add	sp, #20
   14e06:	bd30      	pop	{r4, r5, pc}
   14e08:	00014d79 	.word	0x00014d79
   14e0c:	10000464 	.word	0x10000464
   14e10:	00014d11 	.word	0x00014d11

00014e14 <SystemTimer::SetTickFrequency(unsigned long)>:
  ///          remainder will be returned.
  ///          If the freqency supplied is less then 2Hz, the function will
  ///          return without changing any hardware.
  ///          If the reload value exceeds the SysTick_LOAD_RELOAD_Msk, the
  ///          returned value is the SysTick_LOAD_RELOAD_Msk.
  uint32_t SetTickFrequency(uint32_t frequency) override
   14e14:	b530      	push	{r4, r5, lr}
   14e16:	b085      	sub	sp, #20
   14e18:	4675      	mov	r5, lr
   14e1a:	9001      	str	r0, [sp, #4]
   14e1c:	9100      	str	r1, [sp, #0]
   14e1e:	462b      	mov	r3, r5
   14e20:	4619      	mov	r1, r3
   14e22:	481f      	ldr	r0, [pc, #124]	; (14ea0 <SystemTimer::SetTickFrequency(unsigned long)+0x8c>)
   14e24:	f001 fb2c 	bl	16480 <__cyg_profile_func_enter>
  {
    if (frequency <= 1)
   14e28:	9b00      	ldr	r3, [sp, #0]
   14e2a:	2b01      	cmp	r3, #1
   14e2c:	d801      	bhi.n	14e32 <SystemTimer::SetTickFrequency(unsigned long)+0x1e>
    {
      return 0;
   14e2e:	2400      	movs	r4, #0
   14e30:	e02d      	b.n	14e8e <SystemTimer::SetTickFrequency(unsigned long)+0x7a>
    }
    uint32_t reload_value = (GetSystemFrequency() / frequency) - 1;
   14e32:	9b01      	ldr	r3, [sp, #4]
   14e34:	1d1a      	adds	r2, r3, #4
   14e36:	9b01      	ldr	r3, [sp, #4]
   14e38:	685b      	ldr	r3, [r3, #4]
   14e3a:	330c      	adds	r3, #12
   14e3c:	681b      	ldr	r3, [r3, #0]
   14e3e:	4610      	mov	r0, r2
   14e40:	4798      	blx	r3
   14e42:	4602      	mov	r2, r0
   14e44:	9b00      	ldr	r3, [sp, #0]
   14e46:	fbb2 f3f3 	udiv	r3, r2, r3
   14e4a:	3b01      	subs	r3, #1
   14e4c:	9303      	str	r3, [sp, #12]
    int remainder         = (GetSystemFrequency() % frequency);
   14e4e:	9b01      	ldr	r3, [sp, #4]
   14e50:	1d1a      	adds	r2, r3, #4
   14e52:	9b01      	ldr	r3, [sp, #4]
   14e54:	685b      	ldr	r3, [r3, #4]
   14e56:	330c      	adds	r3, #12
   14e58:	681b      	ldr	r3, [r3, #0]
   14e5a:	4610      	mov	r0, r2
   14e5c:	4798      	blx	r3
   14e5e:	4603      	mov	r3, r0
   14e60:	9a00      	ldr	r2, [sp, #0]
   14e62:	fbb3 f2f2 	udiv	r2, r3, r2
   14e66:	9900      	ldr	r1, [sp, #0]
   14e68:	fb01 f202 	mul.w	r2, r1, r2
   14e6c:	1a9b      	subs	r3, r3, r2
   14e6e:	9302      	str	r3, [sp, #8]
    if (reload_value > SysTick_LOAD_RELOAD_Msk)
   14e70:	9b03      	ldr	r3, [sp, #12]
   14e72:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
   14e76:	d305      	bcc.n	14e84 <SystemTimer::SetTickFrequency(unsigned long)+0x70>
    {
      reload_value = SysTick_LOAD_RELOAD_Msk;
   14e78:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
   14e7c:	9303      	str	r3, [sp, #12]
      remainder    = SysTick_LOAD_RELOAD_Msk;
   14e7e:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
   14e82:	9302      	str	r3, [sp, #8]
    }
    sys_tick->LOAD = reload_value;
   14e84:	4b07      	ldr	r3, [pc, #28]	; (14ea4 <SystemTimer::SetTickFrequency(unsigned long)+0x90>)
   14e86:	681b      	ldr	r3, [r3, #0]
   14e88:	9a03      	ldr	r2, [sp, #12]
   14e8a:	605a      	str	r2, [r3, #4]
    return remainder;
   14e8c:	9c02      	ldr	r4, [sp, #8]
   14e8e:	462b      	mov	r3, r5
   14e90:	4619      	mov	r1, r3
   14e92:	4803      	ldr	r0, [pc, #12]	; (14ea0 <SystemTimer::SetTickFrequency(unsigned long)+0x8c>)
   14e94:	f001 fb08 	bl	164a8 <__cyg_profile_func_exit>
   14e98:	4623      	mov	r3, r4
  }
   14e9a:	4618      	mov	r0, r3
   14e9c:	b005      	add	sp, #20
   14e9e:	bd30      	pop	{r4, r5, pc}
   14ea0:	00014e15 	.word	0x00014e15
   14ea4:	10000464 	.word	0x10000464

00014ea8 <unsigned char util::Value<TimerInterface::TimerPort, unsigned char>(TimerInterface::TimerPort)>:
constexpr Type Value(Enum enum_type_value)
   14ea8:	b530      	push	{r4, r5, lr}
   14eaa:	b083      	sub	sp, #12
   14eac:	4675      	mov	r5, lr
   14eae:	4603      	mov	r3, r0
   14eb0:	f88d 3007 	strb.w	r3, [sp, #7]
   14eb4:	462b      	mov	r3, r5
   14eb6:	4619      	mov	r1, r3
   14eb8:	4806      	ldr	r0, [pc, #24]	; (14ed4 <unsigned char util::Value<TimerInterface::TimerPort, unsigned char>(TimerInterface::TimerPort)+0x2c>)
   14eba:	f001 fae1 	bl	16480 <__cyg_profile_func_enter>
  return static_cast<Type>(enum_type_value);
   14ebe:	f89d 4007 	ldrb.w	r4, [sp, #7]
   14ec2:	462b      	mov	r3, r5
   14ec4:	4619      	mov	r1, r3
   14ec6:	4803      	ldr	r0, [pc, #12]	; (14ed4 <unsigned char util::Value<TimerInterface::TimerPort, unsigned char>(TimerInterface::TimerPort)+0x2c>)
   14ec8:	f001 faee 	bl	164a8 <__cyg_profile_func_exit>
   14ecc:	4623      	mov	r3, r4
}
   14ece:	4618      	mov	r0, r3
   14ed0:	b003      	add	sp, #12
   14ed2:	bd30      	pop	{r4, r5, pc}
   14ed4:	00014ea9 	.word	0x00014ea9

00014ed8 <Timer::DoNothingIsr()>:
    Lpc40xxSystemController::Peripherals::kTimer3
  };

  static constexpr IRQn kTimerIrq[] = { IRQn::TIMER0_IRQn, IRQn::TIMER1_IRQn,
                                        IRQn::TIMER2_IRQn, IRQn::TIMER3_IRQn };
  static void DoNothingIsr() {}
   14ed8:	b510      	push	{r4, lr}
   14eda:	4674      	mov	r4, lr
   14edc:	4623      	mov	r3, r4
   14ede:	4619      	mov	r1, r3
   14ee0:	4804      	ldr	r0, [pc, #16]	; (14ef4 <Timer::DoNothingIsr()+0x1c>)
   14ee2:	f001 facd 	bl	16480 <__cyg_profile_func_enter>
   14ee6:	4623      	mov	r3, r4
   14ee8:	4619      	mov	r1, r3
   14eea:	4802      	ldr	r0, [pc, #8]	; (14ef4 <Timer::DoNothingIsr()+0x1c>)
   14eec:	f001 fadc 	bl	164a8 <__cyg_profile_func_exit>
   14ef0:	bf00      	nop
   14ef2:	bd10      	pop	{r4, pc}
   14ef4:	00014ed9 	.word	0x00014ed9

00014ef8 <Timer::Initialize(unsigned long, void (*)(), long)>:
  ///                  register will be 10 ms.
  /// @param isr an ISR that will fire when the condition set by SetTimer
  ///            method is achieved.
  /// @param priority sets the Timer interrupt's priority level, defaults to -1
  ///                 which uses the platforms default priority.
  void Initialize(uint32_t frequency, IsrPointer isr = DoNothingIsr,
   14ef8:	b510      	push	{r4, lr}
   14efa:	b086      	sub	sp, #24
   14efc:	4674      	mov	r4, lr
   14efe:	9003      	str	r0, [sp, #12]
   14f00:	9102      	str	r1, [sp, #8]
   14f02:	9201      	str	r2, [sp, #4]
   14f04:	9300      	str	r3, [sp, #0]
   14f06:	4623      	mov	r3, r4
   14f08:	4619      	mov	r1, r3
   14f0a:	483e      	ldr	r0, [pc, #248]	; (15004 <Timer::Initialize(unsigned long, void (*)(), long)+0x10c>)
   14f0c:	f001 fab8 	bl	16480 <__cyg_profile_func_enter>
                  int32_t priority = -1) override final
  {
    PowerUpPeripheral(kPowerbit[channel_]);
   14f10:	9b03      	ldr	r3, [sp, #12]
   14f12:	1d18      	adds	r0, r3, #4
   14f14:	9b03      	ldr	r3, [sp, #12]
   14f16:	685b      	ldr	r3, [r3, #4]
   14f18:	3314      	adds	r3, #20
   14f1a:	681b      	ldr	r3, [r3, #0]
   14f1c:	9a03      	ldr	r2, [sp, #12]
   14f1e:	7a12      	ldrb	r2, [r2, #8]
   14f20:	0092      	lsls	r2, r2, #2
   14f22:	4939      	ldr	r1, [pc, #228]	; (15008 <Timer::Initialize(unsigned long, void (*)(), long)+0x110>)
   14f24:	440a      	add	r2, r1
   14f26:	4611      	mov	r1, r2
   14f28:	4798      	blx	r3
    SJ2_ASSERT_FATAL(
   14f2a:	9b02      	ldr	r3, [sp, #8]
   14f2c:	2b00      	cmp	r3, #0
   14f2e:	d10d      	bne.n	14f4c <Timer::Initialize(unsigned long, void (*)(), long)+0x54>
   14f30:	2384      	movs	r3, #132	; 0x84
   14f32:	4a36      	ldr	r2, [pc, #216]	; (1500c <Timer::Initialize(unsigned long, void (*)(), long)+0x114>)
   14f34:	4936      	ldr	r1, [pc, #216]	; (15010 <Timer::Initialize(unsigned long, void (*)(), long)+0x118>)
   14f36:	4837      	ldr	r0, [pc, #220]	; (15014 <Timer::Initialize(unsigned long, void (*)(), long)+0x11c>)
   14f38:	f002 fd1e 	bl	17978 <printf>
   14f3c:	4836      	ldr	r0, [pc, #216]	; (15018 <Timer::Initialize(unsigned long, void (*)(), long)+0x120>)
   14f3e:	f001 fa6f 	bl	16420 <puts>
   14f42:	2100      	movs	r1, #0
   14f44:	2001      	movs	r0, #1
   14f46:	f7fb ffbd 	bl	10ec4 <debug::PrintBacktrace(bool, void*)>
   14f4a:	e7fe      	b.n	14f4a <Timer::Initialize(unsigned long, void (*)(), long)+0x52>
        frequency != 0,
        "Cannot have zero ticks per microsecond, please choose 1 or more.");
    // Set Prescale register for Prescale Counter to milliseconds
    uint32_t prescaler = GetPeripheralFrequency() / frequency;
   14f4c:	9b03      	ldr	r3, [sp, #12]
   14f4e:	1d1a      	adds	r2, r3, #4
   14f50:	9b03      	ldr	r3, [sp, #12]
   14f52:	685b      	ldr	r3, [r3, #4]
   14f54:	3310      	adds	r3, #16
   14f56:	681b      	ldr	r3, [r3, #0]
   14f58:	4610      	mov	r0, r2
   14f5a:	4798      	blx	r3
   14f5c:	4602      	mov	r2, r0
   14f5e:	9b02      	ldr	r3, [sp, #8]
   14f60:	fbb2 f3f3 	udiv	r3, r2, r3
   14f64:	9305      	str	r3, [sp, #20]
    tim_register[channel_]->PR &= ~(kClear << 1);
   14f66:	9b03      	ldr	r3, [sp, #12]
   14f68:	7a1b      	ldrb	r3, [r3, #8]
   14f6a:	461a      	mov	r2, r3
   14f6c:	4b2b      	ldr	r3, [pc, #172]	; (1501c <Timer::Initialize(unsigned long, void (*)(), long)+0x124>)
   14f6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   14f72:	68da      	ldr	r2, [r3, #12]
   14f74:	9b03      	ldr	r3, [sp, #12]
   14f76:	7a1b      	ldrb	r3, [r3, #8]
   14f78:	4619      	mov	r1, r3
   14f7a:	4b28      	ldr	r3, [pc, #160]	; (1501c <Timer::Initialize(unsigned long, void (*)(), long)+0x124>)
   14f7c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   14f80:	f002 0201 	and.w	r2, r2, #1
   14f84:	60da      	str	r2, [r3, #12]
    tim_register[channel_]->PR |= (prescaler << 1);
   14f86:	9b03      	ldr	r3, [sp, #12]
   14f88:	7a1b      	ldrb	r3, [r3, #8]
   14f8a:	461a      	mov	r2, r3
   14f8c:	4b23      	ldr	r3, [pc, #140]	; (1501c <Timer::Initialize(unsigned long, void (*)(), long)+0x124>)
   14f8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   14f92:	68d9      	ldr	r1, [r3, #12]
   14f94:	9b05      	ldr	r3, [sp, #20]
   14f96:	005a      	lsls	r2, r3, #1
   14f98:	9b03      	ldr	r3, [sp, #12]
   14f9a:	7a1b      	ldrb	r3, [r3, #8]
   14f9c:	4618      	mov	r0, r3
   14f9e:	4b1f      	ldr	r3, [pc, #124]	; (1501c <Timer::Initialize(unsigned long, void (*)(), long)+0x124>)
   14fa0:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   14fa4:	430a      	orrs	r2, r1
   14fa6:	60da      	str	r2, [r3, #12]
    tim_register[channel_]->TCR |= (1 << 0);
   14fa8:	9b03      	ldr	r3, [sp, #12]
   14faa:	7a1b      	ldrb	r3, [r3, #8]
   14fac:	461a      	mov	r2, r3
   14fae:	4b1b      	ldr	r3, [pc, #108]	; (1501c <Timer::Initialize(unsigned long, void (*)(), long)+0x124>)
   14fb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   14fb4:	685a      	ldr	r2, [r3, #4]
   14fb6:	9b03      	ldr	r3, [sp, #12]
   14fb8:	7a1b      	ldrb	r3, [r3, #8]
   14fba:	4619      	mov	r1, r3
   14fbc:	4b17      	ldr	r3, [pc, #92]	; (1501c <Timer::Initialize(unsigned long, void (*)(), long)+0x124>)
   14fbe:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   14fc2:	f042 0201 	orr.w	r2, r2, #1
   14fc6:	605a      	str	r2, [r3, #4]
    user_timer_isr[channel_] = isr;
   14fc8:	9b03      	ldr	r3, [sp, #12]
   14fca:	7a1b      	ldrb	r3, [r3, #8]
   14fcc:	4619      	mov	r1, r3
   14fce:	4a14      	ldr	r2, [pc, #80]	; (15020 <Timer::Initialize(unsigned long, void (*)(), long)+0x128>)
   14fd0:	9b01      	ldr	r3, [sp, #4]
   14fd2:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
    RegisterIsr(kTimerIrq[channel_], kTimerIsr[channel_], true, priority);
   14fd6:	9b03      	ldr	r3, [sp, #12]
   14fd8:	7a1b      	ldrb	r3, [r3, #8]
   14fda:	461a      	mov	r2, r3
   14fdc:	4b11      	ldr	r3, [pc, #68]	; (15024 <Timer::Initialize(unsigned long, void (*)(), long)+0x12c>)
   14fde:	5698      	ldrsb	r0, [r3, r2]
   14fe0:	9b03      	ldr	r3, [sp, #12]
   14fe2:	7a1b      	ldrb	r3, [r3, #8]
   14fe4:	461a      	mov	r2, r3
   14fe6:	4b10      	ldr	r3, [pc, #64]	; (15028 <Timer::Initialize(unsigned long, void (*)(), long)+0x130>)
   14fe8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   14fec:	9b00      	ldr	r3, [sp, #0]
   14fee:	2201      	movs	r2, #1
   14ff0:	f001 f91e 	bl	16230 <RegisterIsr(IRQn, void (*)(), bool, long)>
   14ff4:	4623      	mov	r3, r4
   14ff6:	4619      	mov	r1, r3
   14ff8:	4802      	ldr	r0, [pc, #8]	; (15004 <Timer::Initialize(unsigned long, void (*)(), long)+0x10c>)
   14ffa:	f001 fa55 	bl	164a8 <__cyg_profile_func_exit>
  }
   14ffe:	bf00      	nop
   15000:	b006      	add	sp, #24
   15002:	bd10      	pop	{r4, pc}
   15004:	00014ef9 	.word	0x00014ef9
   15008:	0001a534 	.word	0x0001a534
   1500c:	0001a634 	.word	0x0001a634
   15010:	0001a558 	.word	0x0001a558
   15014:	0001a414 	.word	0x0001a414
   15018:	0001a120 	.word	0x0001a120
   1501c:	10000468 	.word	0x10000468
   15020:	10001400 	.word	0x10001400
   15024:	0001a544 	.word	0x0001a544
   15028:	0001a548 	.word	0x0001a548

0001502c <unsigned char util::Value<TimerInterface::MatchControlRegister, unsigned char>(TimerInterface::MatchControlRegister)>:
constexpr Type Value(Enum enum_type_value)
   1502c:	b530      	push	{r4, r5, lr}
   1502e:	b083      	sub	sp, #12
   15030:	4675      	mov	r5, lr
   15032:	4603      	mov	r3, r0
   15034:	f88d 3007 	strb.w	r3, [sp, #7]
   15038:	462b      	mov	r3, r5
   1503a:	4619      	mov	r1, r3
   1503c:	4806      	ldr	r0, [pc, #24]	; (15058 <unsigned char util::Value<TimerInterface::MatchControlRegister, unsigned char>(TimerInterface::MatchControlRegister)+0x2c>)
   1503e:	f001 fa1f 	bl	16480 <__cyg_profile_func_enter>
  return static_cast<Type>(enum_type_value);
   15042:	f89d 4007 	ldrb.w	r4, [sp, #7]
   15046:	462b      	mov	r3, r5
   15048:	4619      	mov	r1, r3
   1504a:	4803      	ldr	r0, [pc, #12]	; (15058 <unsigned char util::Value<TimerInterface::MatchControlRegister, unsigned char>(TimerInterface::MatchControlRegister)+0x2c>)
   1504c:	f001 fa2c 	bl	164a8 <__cyg_profile_func_exit>
   15050:	4623      	mov	r3, r4
}
   15052:	4618      	mov	r0, r3
   15054:	b003      	add	sp, #12
   15056:	bd30      	pop	{r4, r5, pc}
   15058:	0001502d 	.word	0x0001502d

0001505c <Timer::SetTimer(unsigned long, TimerInterface::TimerIsrCondition, TimerInterface::MatchControlRegister)>:
  ///
  /// @param ticks the count of the timer register (TC) to have an ISR fire
  /// @param condition the condition for which a timer interrupt will occur
  /// @param match_register which match register (from 0 to 3) should be used
  ///                       for holding the ticks for the condition.
  void SetTimer(uint32_t ticks, TimerIsrCondition condition,
   1505c:	b570      	push	{r4, r5, r6, lr}
   1505e:	b086      	sub	sp, #24
   15060:	4676      	mov	r6, lr
   15062:	9003      	str	r0, [sp, #12]
   15064:	9102      	str	r1, [sp, #8]
   15066:	4611      	mov	r1, r2
   15068:	461a      	mov	r2, r3
   1506a:	460b      	mov	r3, r1
   1506c:	f88d 3007 	strb.w	r3, [sp, #7]
   15070:	4613      	mov	r3, r2
   15072:	f88d 3006 	strb.w	r3, [sp, #6]
   15076:	4633      	mov	r3, r6
   15078:	4619      	mov	r1, r3
   1507a:	4832      	ldr	r0, [pc, #200]	; (15144 <Timer::SetTimer(unsigned long, TimerInterface::TimerIsrCondition, TimerInterface::MatchControlRegister)+0xe8>)
   1507c:	f001 fa00 	bl	16480 <__cyg_profile_func_enter>
                MatchControlRegister match_register = kMat0) override final
  {
    static constexpr uint8_t kClearMode = 0b0111;

    uint8_t match_value = util::Value(match_register);
   15080:	f89d 3006 	ldrb.w	r3, [sp, #6]
   15084:	4618      	mov	r0, r3
   15086:	f7ff ffd1 	bl	1502c <unsigned char util::Value<TimerInterface::MatchControlRegister, unsigned char>(TimerInterface::MatchControlRegister)>
   1508a:	4603      	mov	r3, r0
   1508c:	f88d 3017 	strb.w	r3, [sp, #23]
    tim_register[channel_]->MCR &= ~(kClearMode << match_value);
   15090:	9b03      	ldr	r3, [sp, #12]
   15092:	7a1b      	ldrb	r3, [r3, #8]
   15094:	461a      	mov	r2, r3
   15096:	4b2c      	ldr	r3, [pc, #176]	; (15148 <Timer::SetTimer(unsigned long, TimerInterface::TimerIsrCondition, TimerInterface::MatchControlRegister)+0xec>)
   15098:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   1509c:	695a      	ldr	r2, [r3, #20]
   1509e:	f89d 3017 	ldrb.w	r3, [sp, #23]
   150a2:	2107      	movs	r1, #7
   150a4:	fa01 f303 	lsl.w	r3, r1, r3
   150a8:	43db      	mvns	r3, r3
   150aa:	4619      	mov	r1, r3
   150ac:	9b03      	ldr	r3, [sp, #12]
   150ae:	7a1b      	ldrb	r3, [r3, #8]
   150b0:	4618      	mov	r0, r3
   150b2:	4b25      	ldr	r3, [pc, #148]	; (15148 <Timer::SetTimer(unsigned long, TimerInterface::TimerIsrCondition, TimerInterface::MatchControlRegister)+0xec>)
   150b4:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   150b8:	400a      	ands	r2, r1
   150ba:	615a      	str	r2, [r3, #20]
    tim_register[channel_]->MCR |= condition << match_value;
   150bc:	9b03      	ldr	r3, [sp, #12]
   150be:	7a1b      	ldrb	r3, [r3, #8]
   150c0:	461a      	mov	r2, r3
   150c2:	4b21      	ldr	r3, [pc, #132]	; (15148 <Timer::SetTimer(unsigned long, TimerInterface::TimerIsrCondition, TimerInterface::MatchControlRegister)+0xec>)
   150c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   150c8:	695a      	ldr	r2, [r3, #20]
   150ca:	f89d 1007 	ldrb.w	r1, [sp, #7]
   150ce:	f89d 3017 	ldrb.w	r3, [sp, #23]
   150d2:	fa01 f303 	lsl.w	r3, r1, r3
   150d6:	4619      	mov	r1, r3
   150d8:	9b03      	ldr	r3, [sp, #12]
   150da:	7a1b      	ldrb	r3, [r3, #8]
   150dc:	4618      	mov	r0, r3
   150de:	4b1a      	ldr	r3, [pc, #104]	; (15148 <Timer::SetTimer(unsigned long, TimerInterface::TimerIsrCondition, TimerInterface::MatchControlRegister)+0xec>)
   150e0:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   150e4:	430a      	orrs	r2, r1
   150e6:	615a      	str	r2, [r3, #20]
    *match[channel_][match_value / 3] |= (((ticks / 2)) << 0);
   150e8:	9b03      	ldr	r3, [sp, #12]
   150ea:	7a1b      	ldrb	r3, [r3, #8]
   150ec:	4618      	mov	r0, r3
   150ee:	f89d 3017 	ldrb.w	r3, [sp, #23]
   150f2:	4a16      	ldr	r2, [pc, #88]	; (1514c <Timer::SetTimer(unsigned long, TimerInterface::TimerIsrCondition, TimerInterface::MatchControlRegister)+0xf0>)
   150f4:	fba2 2303 	umull	r2, r3, r2, r3
   150f8:	085b      	lsrs	r3, r3, #1
   150fa:	b2db      	uxtb	r3, r3
   150fc:	4619      	mov	r1, r3
   150fe:	4a14      	ldr	r2, [pc, #80]	; (15150 <Timer::SetTimer(unsigned long, TimerInterface::TimerIsrCondition, TimerInterface::MatchControlRegister)+0xf4>)
   15100:	0083      	lsls	r3, r0, #2
   15102:	440b      	add	r3, r1
   15104:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15108:	6819      	ldr	r1, [r3, #0]
   1510a:	9b02      	ldr	r3, [sp, #8]
   1510c:	085a      	lsrs	r2, r3, #1
   1510e:	9b03      	ldr	r3, [sp, #12]
   15110:	7a1b      	ldrb	r3, [r3, #8]
   15112:	461d      	mov	r5, r3
   15114:	f89d 3017 	ldrb.w	r3, [sp, #23]
   15118:	480c      	ldr	r0, [pc, #48]	; (1514c <Timer::SetTimer(unsigned long, TimerInterface::TimerIsrCondition, TimerInterface::MatchControlRegister)+0xf0>)
   1511a:	fba0 0303 	umull	r0, r3, r0, r3
   1511e:	085b      	lsrs	r3, r3, #1
   15120:	b2db      	uxtb	r3, r3
   15122:	461c      	mov	r4, r3
   15124:	480a      	ldr	r0, [pc, #40]	; (15150 <Timer::SetTimer(unsigned long, TimerInterface::TimerIsrCondition, TimerInterface::MatchControlRegister)+0xf4>)
   15126:	00ab      	lsls	r3, r5, #2
   15128:	4423      	add	r3, r4
   1512a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
   1512e:	430a      	orrs	r2, r1
   15130:	601a      	str	r2, [r3, #0]
   15132:	4633      	mov	r3, r6
   15134:	4619      	mov	r1, r3
   15136:	4803      	ldr	r0, [pc, #12]	; (15144 <Timer::SetTimer(unsigned long, TimerInterface::TimerIsrCondition, TimerInterface::MatchControlRegister)+0xe8>)
   15138:	f001 f9b6 	bl	164a8 <__cyg_profile_func_exit>
  }
   1513c:	bf00      	nop
   1513e:	b006      	add	sp, #24
   15140:	bd70      	pop	{r4, r5, r6, pc}
   15142:	bf00      	nop
   15144:	0001505d 	.word	0x0001505d
   15148:	10000468 	.word	0x10000468
   1514c:	aaaaaaab 	.word	0xaaaaaaab
   15150:	100013c0 	.word	0x100013c0

00015154 <Timer::GetTimer()>:

  [[gnu::always_inline]] uint32_t GetTimer() override final {
   15154:	b530      	push	{r4, r5, lr}
   15156:	b083      	sub	sp, #12
   15158:	4675      	mov	r5, lr
   1515a:	9001      	str	r0, [sp, #4]
   1515c:	462b      	mov	r3, r5
   1515e:	4619      	mov	r1, r3
   15160:	4809      	ldr	r0, [pc, #36]	; (15188 <Timer::GetTimer()+0x34>)
   15162:	f001 f98d 	bl	16480 <__cyg_profile_func_enter>
    return tim_register[channel_]->TC;
   15166:	9b01      	ldr	r3, [sp, #4]
   15168:	7a1b      	ldrb	r3, [r3, #8]
   1516a:	461a      	mov	r2, r3
   1516c:	4b07      	ldr	r3, [pc, #28]	; (1518c <Timer::GetTimer()+0x38>)
   1516e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   15172:	689c      	ldr	r4, [r3, #8]
   15174:	462b      	mov	r3, r5
   15176:	4619      	mov	r1, r3
   15178:	4803      	ldr	r0, [pc, #12]	; (15188 <Timer::GetTimer()+0x34>)
   1517a:	f001 f995 	bl	164a8 <__cyg_profile_func_exit>
   1517e:	4623      	mov	r3, r4
  }
   15180:	4618      	mov	r0, r3
   15182:	b003      	add	sp, #12
   15184:	bd30      	pop	{r4, r5, pc}
   15186:	bf00      	nop
   15188:	00015155 	.word	0x00015155
   1518c:	10000468 	.word	0x10000468

00015190 <Uart::SetBaudRate(unsigned long)>:
  constexpr Uart(Channels mode, PinInterface * tx_pin, PinInterface * rx_pin)
      : channel_(static_cast<uint8_t>(mode)), tx_(tx_pin), rx_(rx_pin)
  {
  }

  void SetBaudRate(uint32_t baud_rate) override
   15190:	b510      	push	{r4, lr}
   15192:	b088      	sub	sp, #32
   15194:	4674      	mov	r4, lr
   15196:	9001      	str	r0, [sp, #4]
   15198:	9100      	str	r1, [sp, #0]
   1519a:	4623      	mov	r3, r4
   1519c:	4619      	mov	r1, r3
   1519e:	482d      	ldr	r0, [pc, #180]	; (15254 <Uart::SetBaudRate(unsigned long)+0xc4>)
   151a0:	f001 f96e 	bl	16480 <__cyg_profile_func_enter>
  {
    constexpr uint8_t kDlabBit = (1 << 7);
   151a4:	2380      	movs	r3, #128	; 0x80
   151a6:	f88d 301f 	strb.w	r3, [sp, #31]
    float baudrate             = static_cast<float>(baud_rate);
   151aa:	9b00      	ldr	r3, [sp, #0]
   151ac:	ee07 3a90 	vmov	s15, r3
   151b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
   151b4:	edcd 7a06 	vstr	s15, [sp, #24]
    UartCalibration_t dividers = GenerateUartCalibration(baudrate);
   151b8:	ab02      	add	r3, sp, #8
   151ba:	ed9d 0a06 	vldr	s0, [sp, #24]
   151be:	9901      	ldr	r1, [sp, #4]
   151c0:	4618      	mov	r0, r3
   151c2:	f000 fb2d 	bl	15820 <Uart::GenerateUartCalibration(float)>

    uint8_t dlm = static_cast<uint8_t>((dividers.divide_latch >> 8) & 0xFF);
   151c6:	9b02      	ldr	r3, [sp, #8]
   151c8:	0a1b      	lsrs	r3, r3, #8
   151ca:	f88d 3017 	strb.w	r3, [sp, #23]
    uint8_t dll = static_cast<uint8_t>(dividers.divide_latch & 0xFF);
   151ce:	9b02      	ldr	r3, [sp, #8]
   151d0:	f88d 3016 	strb.w	r3, [sp, #22]
    uint8_t fdr = static_cast<uint8_t>((dividers.multiply & 0xF) << 4 |
   151d4:	9b04      	ldr	r3, [sp, #16]
   151d6:	b2db      	uxtb	r3, r3
   151d8:	011b      	lsls	r3, r3, #4
   151da:	b2da      	uxtb	r2, r3
                                       (dividers.divide_add & 0xF));
   151dc:	9b03      	ldr	r3, [sp, #12]
   151de:	b2db      	uxtb	r3, r3
   151e0:	f003 030f 	and.w	r3, r3, #15
   151e4:	b2db      	uxtb	r3, r3
    uint8_t fdr = static_cast<uint8_t>((dividers.multiply & 0xF) << 4 |
   151e6:	4313      	orrs	r3, r2
   151e8:	f88d 3015 	strb.w	r3, [sp, #21]

    // Set baud rate
    uart[channel_]->LCR = kDlabBit;
   151ec:	9b01      	ldr	r3, [sp, #4]
   151ee:	7a1b      	ldrb	r3, [r3, #8]
   151f0:	461a      	mov	r2, r3
   151f2:	4b19      	ldr	r3, [pc, #100]	; (15258 <Uart::SetBaudRate(unsigned long)+0xc8>)
   151f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   151f8:	2280      	movs	r2, #128	; 0x80
   151fa:	731a      	strb	r2, [r3, #12]
    uart[channel_]->DLM = dlm;
   151fc:	9b01      	ldr	r3, [sp, #4]
   151fe:	7a1b      	ldrb	r3, [r3, #8]
   15200:	461a      	mov	r2, r3
   15202:	4b15      	ldr	r3, [pc, #84]	; (15258 <Uart::SetBaudRate(unsigned long)+0xc8>)
   15204:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   15208:	f89d 2017 	ldrb.w	r2, [sp, #23]
   1520c:	711a      	strb	r2, [r3, #4]
    uart[channel_]->DLL = dll;
   1520e:	9b01      	ldr	r3, [sp, #4]
   15210:	7a1b      	ldrb	r3, [r3, #8]
   15212:	461a      	mov	r2, r3
   15214:	4b10      	ldr	r3, [pc, #64]	; (15258 <Uart::SetBaudRate(unsigned long)+0xc8>)
   15216:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   1521a:	f89d 2016 	ldrb.w	r2, [sp, #22]
   1521e:	701a      	strb	r2, [r3, #0]
    uart[channel_]->FDR = fdr;
   15220:	9b01      	ldr	r3, [sp, #4]
   15222:	7a1b      	ldrb	r3, [r3, #8]
   15224:	461a      	mov	r2, r3
   15226:	4b0c      	ldr	r3, [pc, #48]	; (15258 <Uart::SetBaudRate(unsigned long)+0xc8>)
   15228:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   1522c:	f89d 2015 	ldrb.w	r2, [sp, #21]
   15230:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    uart[channel_]->LCR = kStandardUart;
   15234:	9b01      	ldr	r3, [sp, #4]
   15236:	7a1b      	ldrb	r3, [r3, #8]
   15238:	461a      	mov	r2, r3
   1523a:	4b07      	ldr	r3, [pc, #28]	; (15258 <Uart::SetBaudRate(unsigned long)+0xc8>)
   1523c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   15240:	2203      	movs	r2, #3
   15242:	731a      	strb	r2, [r3, #12]
   15244:	4623      	mov	r3, r4
   15246:	4619      	mov	r1, r3
   15248:	4802      	ldr	r0, [pc, #8]	; (15254 <Uart::SetBaudRate(unsigned long)+0xc4>)
   1524a:	f001 f92d 	bl	164a8 <__cyg_profile_func_exit>
  }
   1524e:	bf00      	nop
   15250:	b008      	add	sp, #32
   15252:	bd10      	pop	{r4, pc}
   15254:	00015191 	.word	0x00015191
   15258:	10000478 	.word	0x10000478

0001525c <Uart::Initialize(unsigned long)>:

  bool Initialize(uint32_t baud_rate) override
   1525c:	b530      	push	{r4, r5, lr}
   1525e:	b085      	sub	sp, #20
   15260:	4675      	mov	r5, lr
   15262:	9001      	str	r0, [sp, #4]
   15264:	9100      	str	r1, [sp, #0]
   15266:	462b      	mov	r3, r5
   15268:	4619      	mov	r1, r3
   1526a:	4830      	ldr	r0, [pc, #192]	; (1532c <Uart::Initialize(unsigned long)+0xd0>)
   1526c:	f001 f908 	bl	16480 <__cyg_profile_func_enter>
  {
    constexpr uint8_t kFIFOEnableAndReset = 0b111;
   15270:	2307      	movs	r3, #7
   15272:	f88d 300f 	strb.w	r3, [sp, #15]
    // Powering the port
    PowerUpPeripheral(kPowerbit[channel_]);
   15276:	9b01      	ldr	r3, [sp, #4]
   15278:	1d18      	adds	r0, r3, #4
   1527a:	9b01      	ldr	r3, [sp, #4]
   1527c:	685b      	ldr	r3, [r3, #4]
   1527e:	3314      	adds	r3, #20
   15280:	681b      	ldr	r3, [r3, #0]
   15282:	9a01      	ldr	r2, [sp, #4]
   15284:	7a12      	ldrb	r2, [r2, #8]
   15286:	0092      	lsls	r2, r2, #2
   15288:	4929      	ldr	r1, [pc, #164]	; (15330 <Uart::Initialize(unsigned long)+0xd4>)
   1528a:	440a      	add	r2, r1
   1528c:	4611      	mov	r1, r2
   1528e:	4798      	blx	r3
    // Setting the pin functions and modes
    rx_->SetPinFunction(kRxUartPortFunction[channel_]);
   15290:	9b01      	ldr	r3, [sp, #4]
   15292:	6918      	ldr	r0, [r3, #16]
   15294:	9b01      	ldr	r3, [sp, #4]
   15296:	691b      	ldr	r3, [r3, #16]
   15298:	681b      	ldr	r3, [r3, #0]
   1529a:	681b      	ldr	r3, [r3, #0]
   1529c:	9a01      	ldr	r2, [sp, #4]
   1529e:	7a12      	ldrb	r2, [r2, #8]
   152a0:	4611      	mov	r1, r2
   152a2:	4a24      	ldr	r2, [pc, #144]	; (15334 <Uart::Initialize(unsigned long)+0xd8>)
   152a4:	5c52      	ldrb	r2, [r2, r1]
   152a6:	4611      	mov	r1, r2
   152a8:	4798      	blx	r3
    tx_->SetPinFunction(kTxUartPortFunction[channel_]);
   152aa:	9b01      	ldr	r3, [sp, #4]
   152ac:	68d8      	ldr	r0, [r3, #12]
   152ae:	9b01      	ldr	r3, [sp, #4]
   152b0:	68db      	ldr	r3, [r3, #12]
   152b2:	681b      	ldr	r3, [r3, #0]
   152b4:	681b      	ldr	r3, [r3, #0]
   152b6:	9a01      	ldr	r2, [sp, #4]
   152b8:	7a12      	ldrb	r2, [r2, #8]
   152ba:	4611      	mov	r1, r2
   152bc:	4a1e      	ldr	r2, [pc, #120]	; (15338 <Uart::Initialize(unsigned long)+0xdc>)
   152be:	5c52      	ldrb	r2, [r2, r1]
   152c0:	4611      	mov	r1, r2
   152c2:	4798      	blx	r3
    rx_->SetMode(PinInterface::Mode::kPullUp);
   152c4:	9b01      	ldr	r3, [sp, #4]
   152c6:	691a      	ldr	r2, [r3, #16]
   152c8:	9b01      	ldr	r3, [sp, #4]
   152ca:	691b      	ldr	r3, [r3, #16]
   152cc:	681b      	ldr	r3, [r3, #0]
   152ce:	3304      	adds	r3, #4
   152d0:	681b      	ldr	r3, [r3, #0]
   152d2:	2102      	movs	r1, #2
   152d4:	4610      	mov	r0, r2
   152d6:	4798      	blx	r3
    tx_->SetMode(PinInterface::Mode::kPullUp);
   152d8:	9b01      	ldr	r3, [sp, #4]
   152da:	68da      	ldr	r2, [r3, #12]
   152dc:	9b01      	ldr	r3, [sp, #4]
   152de:	68db      	ldr	r3, [r3, #12]
   152e0:	681b      	ldr	r3, [r3, #0]
   152e2:	3304      	adds	r3, #4
   152e4:	681b      	ldr	r3, [r3, #0]
   152e6:	2102      	movs	r1, #2
   152e8:	4610      	mov	r0, r2
   152ea:	4798      	blx	r3
    // Baud rate setting
    SetBaudRate(baud_rate);
   152ec:	9900      	ldr	r1, [sp, #0]
   152ee:	9801      	ldr	r0, [sp, #4]
   152f0:	f7ff ff4e 	bl	15190 <Uart::SetBaudRate(unsigned long)>
    uart[channel_]->FCR |= kFIFOEnableAndReset;
   152f4:	9b01      	ldr	r3, [sp, #4]
   152f6:	7a1b      	ldrb	r3, [r3, #8]
   152f8:	461a      	mov	r2, r3
   152fa:	4b10      	ldr	r3, [pc, #64]	; (1533c <Uart::Initialize(unsigned long)+0xe0>)
   152fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   15300:	7a1b      	ldrb	r3, [r3, #8]
   15302:	b2da      	uxtb	r2, r3
   15304:	9b01      	ldr	r3, [sp, #4]
   15306:	7a1b      	ldrb	r3, [r3, #8]
   15308:	4619      	mov	r1, r3
   1530a:	4b0c      	ldr	r3, [pc, #48]	; (1533c <Uart::Initialize(unsigned long)+0xe0>)
   1530c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   15310:	f042 0207 	orr.w	r2, r2, #7
   15314:	b2d2      	uxtb	r2, r2
   15316:	721a      	strb	r2, [r3, #8]
    return true;
   15318:	2401      	movs	r4, #1
   1531a:	462b      	mov	r3, r5
   1531c:	4619      	mov	r1, r3
   1531e:	4803      	ldr	r0, [pc, #12]	; (1532c <Uart::Initialize(unsigned long)+0xd0>)
   15320:	f001 f8c2 	bl	164a8 <__cyg_profile_func_exit>
   15324:	4623      	mov	r3, r4
  }
   15326:	4618      	mov	r0, r3
   15328:	b005      	add	sp, #20
   1532a:	bd30      	pop	{r4, r5, pc}
   1532c:	0001525d 	.word	0x0001525d
   15330:	0001a56c 	.word	0x0001a56c
   15334:	0001a568 	.word	0x0001a568
   15338:	0001a564 	.word	0x0001a564
   1533c:	10000478 	.word	0x10000478

00015340 <Uart::Send(unsigned char)::{lambda()#1}::operator()() const>:

  void Send(uint8_t data) override
  {
    uart[channel_]->THR              = data;
    auto wait_for_transfer_to_finish = [this]() -> bool {
   15340:	b530      	push	{r4, r5, lr}
   15342:	b083      	sub	sp, #12
   15344:	4675      	mov	r5, lr
   15346:	9001      	str	r0, [sp, #4]
   15348:	462b      	mov	r3, r5
   1534a:	4619      	mov	r1, r3
   1534c:	480d      	ldr	r0, [pc, #52]	; (15384 <Uart::Send(unsigned char)::{lambda()#1}::operator()() const+0x44>)
   1534e:	f001 f897 	bl	16480 <__cyg_profile_func_enter>
   15352:	9b01      	ldr	r3, [sp, #4]
   15354:	681b      	ldr	r3, [r3, #0]
      return (uart[channel_]->LSR & (1 << 5));
   15356:	7a1b      	ldrb	r3, [r3, #8]
   15358:	461a      	mov	r2, r3
   1535a:	4b0b      	ldr	r3, [pc, #44]	; (15388 <Uart::Send(unsigned char)::{lambda()#1}::operator()() const+0x48>)
   1535c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   15360:	7d1b      	ldrb	r3, [r3, #20]
   15362:	b2db      	uxtb	r3, r3
   15364:	f003 0320 	and.w	r3, r3, #32
   15368:	2b00      	cmp	r3, #0
   1536a:	bf14      	ite	ne
   1536c:	2301      	movne	r3, #1
   1536e:	2300      	moveq	r3, #0
   15370:	b2dc      	uxtb	r4, r3
   15372:	462b      	mov	r3, r5
   15374:	4619      	mov	r1, r3
   15376:	4803      	ldr	r0, [pc, #12]	; (15384 <Uart::Send(unsigned char)::{lambda()#1}::operator()() const+0x44>)
   15378:	f001 f896 	bl	164a8 <__cyg_profile_func_exit>
   1537c:	4623      	mov	r3, r4
    };
   1537e:	4618      	mov	r0, r3
   15380:	b003      	add	sp, #12
   15382:	bd30      	pop	{r4, r5, pc}
   15384:	00015341 	.word	0x00015341
   15388:	10000478 	.word	0x10000478

0001538c <Uart::Send(unsigned char)>:
  void Send(uint8_t data) override
   1538c:	e92d 4830 	stmdb	sp!, {r4, r5, fp, lr}
   15390:	b08a      	sub	sp, #40	; 0x28
   15392:	4675      	mov	r5, lr
   15394:	9001      	str	r0, [sp, #4]
   15396:	460b      	mov	r3, r1
   15398:	f88d 3003 	strb.w	r3, [sp, #3]
   1539c:	462b      	mov	r3, r5
   1539e:	4619      	mov	r1, r3
   153a0:	4831      	ldr	r0, [pc, #196]	; (15468 <Uart::Send(unsigned char)+0xdc>)
   153a2:	f001 f86d 	bl	16480 <__cyg_profile_func_enter>
    uart[channel_]->THR              = data;
   153a6:	9b01      	ldr	r3, [sp, #4]
   153a8:	7a1b      	ldrb	r3, [r3, #8]
   153aa:	461a      	mov	r2, r3
   153ac:	4b2f      	ldr	r3, [pc, #188]	; (1546c <Uart::Send(unsigned char)+0xe0>)
   153ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   153b2:	f89d 2003 	ldrb.w	r2, [sp, #3]
   153b6:	701a      	strb	r2, [r3, #0]
    };
   153b8:	9b01      	ldr	r3, [sp, #4]
   153ba:	9304      	str	r3, [sp, #16]
   153bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   153c0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   153c4:	e9cd 3408 	strd	r3, r4, [sp, #32]
   153c8:	9b04      	ldr	r3, [sp, #16]
   153ca:	9303      	str	r3, [sp, #12]
   153cc:	462b      	mov	r3, r5
   153ce:	4619      	mov	r1, r3
   153d0:	4827      	ldr	r0, [pc, #156]	; (15470 <Uart::Send(unsigned char)+0xe4>)
   153d2:	f001 f855 	bl	16480 <__cyg_profile_func_enter>
  uint64_t timeout_time = 0;
   153d6:	f04f 0300 	mov.w	r3, #0
   153da:	f04f 0400 	mov.w	r4, #0
   153de:	e9cd 3406 	strd	r3, r4, [sp, #24]
  if (timeout == kMaxWait)
   153e2:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   153e6:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
   153ea:	bf08      	it	eq
   153ec:	f1b3 3fff 	cmpeq.w	r3, #4294967295	; 0xffffffff
   153f0:	d106      	bne.n	15400 <Uart::Send(unsigned char)+0x74>
    timeout_time = kMaxWait;
   153f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   153f6:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   153fa:	e9cd 3406 	strd	r3, r4, [sp, #24]
   153fe:	e00b      	b.n	15418 <Uart::Send(unsigned char)+0x8c>
    timeout_time = Milliseconds() + timeout;
   15400:	f7fb fdf8 	bl	10ff4 <Milliseconds()>
   15404:	460a      	mov	r2, r1
   15406:	4601      	mov	r1, r0
   15408:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   1540c:	eb13 0b01 	adds.w	fp, r3, r1
   15410:	eb44 0c02 	adc.w	ip, r4, r2
   15414:	e9cd bc06 	strd	fp, ip, [sp, #24]
  Status status = Status::kTimedOut;
   15418:	2301      	movs	r3, #1
   1541a:	9305      	str	r3, [sp, #20]
  while (Milliseconds() < timeout_time)
   1541c:	f7fb fdea 	bl	10ff4 <Milliseconds()>
   15420:	460a      	mov	r2, r1
   15422:	4601      	mov	r1, r0
   15424:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
   15428:	42a2      	cmp	r2, r4
   1542a:	bf08      	it	eq
   1542c:	4299      	cmpeq	r1, r3
   1542e:	bf34      	ite	cc
   15430:	2301      	movcc	r3, #1
   15432:	2300      	movcs	r3, #0
   15434:	b2db      	uxtb	r3, r3
   15436:	2b00      	cmp	r3, #0
   15438:	d008      	beq.n	1544c <Uart::Send(unsigned char)+0xc0>
    if (is_done())
   1543a:	ab03      	add	r3, sp, #12
   1543c:	4618      	mov	r0, r3
   1543e:	f7ff ff7f 	bl	15340 <Uart::Send(unsigned char)::{lambda()#1}::operator()() const>
   15442:	4603      	mov	r3, r0
   15444:	2b00      	cmp	r3, #0
   15446:	d0e9      	beq.n	1541c <Uart::Send(unsigned char)+0x90>
      status = Status::kSuccess;
   15448:	2300      	movs	r3, #0
   1544a:	9305      	str	r3, [sp, #20]
   1544c:	462b      	mov	r3, r5
   1544e:	4619      	mov	r1, r3
   15450:	4807      	ldr	r0, [pc, #28]	; (15470 <Uart::Send(unsigned char)+0xe4>)
   15452:	f001 f829 	bl	164a8 <__cyg_profile_func_exit>
   15456:	462b      	mov	r3, r5
   15458:	4619      	mov	r1, r3
   1545a:	4803      	ldr	r0, [pc, #12]	; (15468 <Uart::Send(unsigned char)+0xdc>)
   1545c:	f001 f824 	bl	164a8 <__cyg_profile_func_exit>
    Wait(kMaxWait, wait_for_transfer_to_finish);
  }
   15460:	bf00      	nop
   15462:	b00a      	add	sp, #40	; 0x28
   15464:	e8bd 8830 	ldmia.w	sp!, {r4, r5, fp, pc}
   15468:	0001538d 	.word	0x0001538d
   1546c:	10000478 	.word	0x10000478
   15470:	00015c89 	.word	0x00015c89

00015474 <Uart::Receive(unsigned long)::{lambda()#1}::operator()() const>:

  uint8_t Receive([[maybe_unused]] uint32_t timeout = 0x7FFFFFFF) override
  {
    uint8_t receiver   = '\xFF';
    auto byte_recieved = [this]() -> bool {
   15474:	b530      	push	{r4, r5, lr}
   15476:	b083      	sub	sp, #12
   15478:	4675      	mov	r5, lr
   1547a:	9001      	str	r0, [sp, #4]
   1547c:	462b      	mov	r3, r5
   1547e:	4619      	mov	r1, r3
   15480:	480d      	ldr	r0, [pc, #52]	; (154b8 <Uart::Receive(unsigned long)::{lambda()#1}::operator()() const+0x44>)
   15482:	f000 fffd 	bl	16480 <__cyg_profile_func_enter>
   15486:	9b01      	ldr	r3, [sp, #4]
   15488:	681b      	ldr	r3, [r3, #0]
      return (uart[channel_]->LSR & (1 << 0));
   1548a:	7a1b      	ldrb	r3, [r3, #8]
   1548c:	461a      	mov	r2, r3
   1548e:	4b0b      	ldr	r3, [pc, #44]	; (154bc <Uart::Receive(unsigned long)::{lambda()#1}::operator()() const+0x48>)
   15490:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   15494:	7d1b      	ldrb	r3, [r3, #20]
   15496:	b2db      	uxtb	r3, r3
   15498:	f003 0301 	and.w	r3, r3, #1
   1549c:	2b00      	cmp	r3, #0
   1549e:	bf14      	ite	ne
   154a0:	2301      	movne	r3, #1
   154a2:	2300      	moveq	r3, #0
   154a4:	b2dc      	uxtb	r4, r3
   154a6:	462b      	mov	r3, r5
   154a8:	4619      	mov	r1, r3
   154aa:	4803      	ldr	r0, [pc, #12]	; (154b8 <Uart::Receive(unsigned long)::{lambda()#1}::operator()() const+0x44>)
   154ac:	f000 fffc 	bl	164a8 <__cyg_profile_func_exit>
   154b0:	4623      	mov	r3, r4
    };
   154b2:	4618      	mov	r0, r3
   154b4:	b003      	add	sp, #12
   154b6:	bd30      	pop	{r4, r5, pc}
   154b8:	00015475 	.word	0x00015475
   154bc:	10000478 	.word	0x10000478

000154c0 <Uart::Receive(unsigned long)>:
  uint8_t Receive([[maybe_unused]] uint32_t timeout = 0x7FFFFFFF) override
   154c0:	e92d 4830 	stmdb	sp!, {r4, r5, fp, lr}
   154c4:	b08c      	sub	sp, #48	; 0x30
   154c6:	4675      	mov	r5, lr
   154c8:	9001      	str	r0, [sp, #4]
   154ca:	9100      	str	r1, [sp, #0]
   154cc:	462b      	mov	r3, r5
   154ce:	4619      	mov	r1, r3
   154d0:	4836      	ldr	r0, [pc, #216]	; (155ac <Uart::Receive(unsigned long)+0xec>)
   154d2:	f000 ffd5 	bl	16480 <__cyg_profile_func_enter>
    uint8_t receiver   = '\xFF';
   154d6:	23ff      	movs	r3, #255	; 0xff
   154d8:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
    };
   154dc:	9b01      	ldr	r3, [sp, #4]
   154de:	9304      	str	r3, [sp, #16]

    Status status = Wait(timeout, byte_recieved);
   154e0:	9b00      	ldr	r3, [sp, #0]
   154e2:	f04f 0400 	mov.w	r4, #0
   154e6:	e9cd 3408 	strd	r3, r4, [sp, #32]
   154ea:	9b04      	ldr	r3, [sp, #16]
   154ec:	9303      	str	r3, [sp, #12]
   154ee:	462b      	mov	r3, r5
   154f0:	4619      	mov	r1, r3
   154f2:	482f      	ldr	r0, [pc, #188]	; (155b0 <Uart::Receive(unsigned long)+0xf0>)
   154f4:	f000 ffc4 	bl	16480 <__cyg_profile_func_enter>
  uint64_t timeout_time = 0;
   154f8:	f04f 0300 	mov.w	r3, #0
   154fc:	f04f 0400 	mov.w	r4, #0
   15500:	e9cd 3406 	strd	r3, r4, [sp, #24]
  if (timeout == kMaxWait)
   15504:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   15508:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
   1550c:	bf08      	it	eq
   1550e:	f1b3 3fff 	cmpeq.w	r3, #4294967295	; 0xffffffff
   15512:	d106      	bne.n	15522 <Uart::Receive(unsigned long)+0x62>
    timeout_time = kMaxWait;
   15514:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   15518:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   1551c:	e9cd 3406 	strd	r3, r4, [sp, #24]
   15520:	e00b      	b.n	1553a <Uart::Receive(unsigned long)+0x7a>
    timeout_time = Milliseconds() + timeout;
   15522:	f7fb fd67 	bl	10ff4 <Milliseconds()>
   15526:	460a      	mov	r2, r1
   15528:	4601      	mov	r1, r0
   1552a:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   1552e:	eb13 0b01 	adds.w	fp, r3, r1
   15532:	eb44 0c02 	adc.w	ip, r4, r2
   15536:	e9cd bc06 	strd	fp, ip, [sp, #24]
  Status status = Status::kTimedOut;
   1553a:	2301      	movs	r3, #1
   1553c:	9305      	str	r3, [sp, #20]
  while (Milliseconds() < timeout_time)
   1553e:	f7fb fd59 	bl	10ff4 <Milliseconds()>
   15542:	460a      	mov	r2, r1
   15544:	4601      	mov	r1, r0
   15546:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
   1554a:	42a2      	cmp	r2, r4
   1554c:	bf08      	it	eq
   1554e:	4299      	cmpeq	r1, r3
   15550:	bf34      	ite	cc
   15552:	2301      	movcc	r3, #1
   15554:	2300      	movcs	r3, #0
   15556:	b2db      	uxtb	r3, r3
   15558:	2b00      	cmp	r3, #0
   1555a:	d008      	beq.n	1556e <Uart::Receive(unsigned long)+0xae>
    if (is_done())
   1555c:	ab03      	add	r3, sp, #12
   1555e:	4618      	mov	r0, r3
   15560:	f7ff ff88 	bl	15474 <Uart::Receive(unsigned long)::{lambda()#1}::operator()() const>
   15564:	4603      	mov	r3, r0
   15566:	2b00      	cmp	r3, #0
   15568:	d0e9      	beq.n	1553e <Uart::Receive(unsigned long)+0x7e>
      status = Status::kSuccess;
   1556a:	2300      	movs	r3, #0
   1556c:	9305      	str	r3, [sp, #20]
  return status;
   1556e:	9c05      	ldr	r4, [sp, #20]
   15570:	462b      	mov	r3, r5
   15572:	4619      	mov	r1, r3
   15574:	480e      	ldr	r0, [pc, #56]	; (155b0 <Uart::Receive(unsigned long)+0xf0>)
   15576:	f000 ff97 	bl	164a8 <__cyg_profile_func_exit>
   1557a:	940a      	str	r4, [sp, #40]	; 0x28

    if (status == Status::kSuccess)
   1557c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1557e:	2b00      	cmp	r3, #0
   15580:	d108      	bne.n	15594 <Uart::Receive(unsigned long)+0xd4>
    {
      receiver = static_cast<uint8_t>(uart[channel_]->RBR);
   15582:	9b01      	ldr	r3, [sp, #4]
   15584:	7a1b      	ldrb	r3, [r3, #8]
   15586:	461a      	mov	r2, r3
   15588:	4b0a      	ldr	r3, [pc, #40]	; (155b4 <Uart::Receive(unsigned long)+0xf4>)
   1558a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   1558e:	781b      	ldrb	r3, [r3, #0]
   15590:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
    }
    return receiver;
   15594:	f89d 402f 	ldrb.w	r4, [sp, #47]	; 0x2f
   15598:	462b      	mov	r3, r5
   1559a:	4619      	mov	r1, r3
   1559c:	4803      	ldr	r0, [pc, #12]	; (155ac <Uart::Receive(unsigned long)+0xec>)
   1559e:	f000 ff83 	bl	164a8 <__cyg_profile_func_exit>
   155a2:	4623      	mov	r3, r4
  }
   155a4:	4618      	mov	r0, r3
   155a6:	b00c      	add	sp, #48	; 0x30
   155a8:	e8bd 8830 	ldmia.w	sp!, {r4, r5, fp, pc}
   155ac:	000154c1 	.word	0x000154c1
   155b0:	00015d31 	.word	0x00015d31
   155b4:	10000478 	.word	0x10000478

000155b8 <Uart::FindClosestFractional(float)>:

 private:
  UartCalibration_t FindClosestFractional(float decimal)
   155b8:	b510      	push	{r4, lr}
   155ba:	b08a      	sub	sp, #40	; 0x28
   155bc:	4674      	mov	r4, lr
   155be:	9003      	str	r0, [sp, #12]
   155c0:	9102      	str	r1, [sp, #8]
   155c2:	ed8d 0a01 	vstr	s0, [sp, #4]
   155c6:	4623      	mov	r3, r4
   155c8:	4619      	mov	r1, r3
   155ca:	4838      	ldr	r0, [pc, #224]	; (156ac <Uart::FindClosestFractional(float)+0xf4>)
   155cc:	f000 ff58 	bl	16480 <__cyg_profile_func_enter>
  {
    UartCalibration_t result;
   155d0:	9b03      	ldr	r3, [sp, #12]
   155d2:	2200      	movs	r2, #0
   155d4:	601a      	str	r2, [r3, #0]
   155d6:	9b03      	ldr	r3, [sp, #12]
   155d8:	2200      	movs	r2, #0
   155da:	605a      	str	r2, [r3, #4]
   155dc:	9b03      	ldr	r3, [sp, #12]
   155de:	2201      	movs	r2, #1
   155e0:	609a      	str	r2, [r3, #8]
    bool finished = false;
   155e2:	2300      	movs	r3, #0
   155e4:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    for (int div = 0; div < 15 && !finished; div++)
   155e8:	2300      	movs	r3, #0
   155ea:	9308      	str	r3, [sp, #32]
   155ec:	9b08      	ldr	r3, [sp, #32]
   155ee:	2b0e      	cmp	r3, #14
   155f0:	dc52      	bgt.n	15698 <Uart::FindClosestFractional(float)+0xe0>
   155f2:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   155f6:	2b00      	cmp	r3, #0
   155f8:	d14e      	bne.n	15698 <Uart::FindClosestFractional(float)+0xe0>
    {
      for (int mul = div + 1; mul < 15 && !finished; mul++)
   155fa:	9b08      	ldr	r3, [sp, #32]
   155fc:	3301      	adds	r3, #1
   155fe:	9307      	str	r3, [sp, #28]
   15600:	9b07      	ldr	r3, [sp, #28]
   15602:	2b0e      	cmp	r3, #14
   15604:	dc44      	bgt.n	15690 <Uart::FindClosestFractional(float)+0xd8>
   15606:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   1560a:	2b00      	cmp	r3, #0
   1560c:	d140      	bne.n	15690 <Uart::FindClosestFractional(float)+0xd8>
      {
        float divf         = static_cast<float>(div);
   1560e:	9b08      	ldr	r3, [sp, #32]
   15610:	ee07 3a90 	vmov	s15, r3
   15614:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   15618:	edcd 7a06 	vstr	s15, [sp, #24]
        float mulf         = static_cast<float>(mul);
   1561c:	9b07      	ldr	r3, [sp, #28]
   1561e:	ee07 3a90 	vmov	s15, r3
   15622:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   15626:	edcd 7a05 	vstr	s15, [sp, #20]
        float test_decimal = 1.0f + divf / mulf;
   1562a:	eddd 6a06 	vldr	s13, [sp, #24]
   1562e:	ed9d 7a05 	vldr	s14, [sp, #20]
   15632:	eec6 7a87 	vdiv.f32	s15, s13, s14
   15636:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
   1563a:	ee77 7a87 	vadd.f32	s15, s15, s14
   1563e:	edcd 7a04 	vstr	s15, [sp, #16]
        if (decimal <= test_decimal + kThreshold &&
   15642:	eddd 7a04 	vldr	s15, [sp, #16]
   15646:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 156b0 <Uart::FindClosestFractional(float)+0xf8>
   1564a:	ee77 7a87 	vadd.f32	s15, s15, s14
   1564e:	ed9d 7a01 	vldr	s14, [sp, #4]
   15652:	eeb4 7ae7 	vcmpe.f32	s14, s15
   15656:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1565a:	d815      	bhi.n	15688 <Uart::FindClosestFractional(float)+0xd0>
            decimal >= test_decimal - kThreshold)
   1565c:	eddd 7a04 	vldr	s15, [sp, #16]
   15660:	ed9f 7a13 	vldr	s14, [pc, #76]	; 156b0 <Uart::FindClosestFractional(float)+0xf8>
   15664:	ee77 7ac7 	vsub.f32	s15, s15, s14
        if (decimal <= test_decimal + kThreshold &&
   15668:	ed9d 7a01 	vldr	s14, [sp, #4]
   1566c:	eeb4 7ae7 	vcmpe.f32	s14, s15
   15670:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   15674:	db08      	blt.n	15688 <Uart::FindClosestFractional(float)+0xd0>
        {
          result.divide_add = div;
   15676:	9a08      	ldr	r2, [sp, #32]
   15678:	9b03      	ldr	r3, [sp, #12]
   1567a:	605a      	str	r2, [r3, #4]
          result.multiply   = mul;
   1567c:	9a07      	ldr	r2, [sp, #28]
   1567e:	9b03      	ldr	r3, [sp, #12]
   15680:	609a      	str	r2, [r3, #8]
          finished          = true;
   15682:	2301      	movs	r3, #1
   15684:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
      for (int mul = div + 1; mul < 15 && !finished; mul++)
   15688:	9b07      	ldr	r3, [sp, #28]
   1568a:	3301      	adds	r3, #1
   1568c:	9307      	str	r3, [sp, #28]
   1568e:	e7b7      	b.n	15600 <Uart::FindClosestFractional(float)+0x48>
    for (int div = 0; div < 15 && !finished; div++)
   15690:	9b08      	ldr	r3, [sp, #32]
   15692:	3301      	adds	r3, #1
   15694:	9308      	str	r3, [sp, #32]
   15696:	e7a9      	b.n	155ec <Uart::FindClosestFractional(float)+0x34>
        }
      }
    }
    return result;
   15698:	bf00      	nop
   1569a:	4623      	mov	r3, r4
   1569c:	4619      	mov	r1, r3
   1569e:	4803      	ldr	r0, [pc, #12]	; (156ac <Uart::FindClosestFractional(float)+0xf4>)
   156a0:	f000 ff02 	bl	164a8 <__cyg_profile_func_exit>
   156a4:	bf00      	nop
  }
   156a6:	9803      	ldr	r0, [sp, #12]
   156a8:	b00a      	add	sp, #40	; 0x28
   156aa:	bd10      	pop	{r4, pc}
   156ac:	000155b9 	.word	0x000155b9
   156b0:	3d4ccccd 	.word	0x3d4ccccd

000156b4 <Uart::DividerEstimate(float, float)>:

  float DividerEstimate(float baud_rate, float fraction_estimate = 1)
   156b4:	b510      	push	{r4, lr}
   156b6:	ed2d 8b02 	vpush	{d8}
   156ba:	b086      	sub	sp, #24
   156bc:	4674      	mov	r4, lr
   156be:	9003      	str	r0, [sp, #12]
   156c0:	ed8d 0a02 	vstr	s0, [sp, #8]
   156c4:	edcd 0a01 	vstr	s1, [sp, #4]
   156c8:	4623      	mov	r3, r4
   156ca:	4619      	mov	r1, r3
   156cc:	4815      	ldr	r0, [pc, #84]	; (15724 <Uart::DividerEstimate(float, float)+0x70>)
   156ce:	f000 fed7 	bl	16480 <__cyg_profile_func_enter>
  {
    float clock_frequency = static_cast<float>(GetPeripheralFrequency());
   156d2:	9b03      	ldr	r3, [sp, #12]
   156d4:	1d1a      	adds	r2, r3, #4
   156d6:	9b03      	ldr	r3, [sp, #12]
   156d8:	685b      	ldr	r3, [r3, #4]
   156da:	3310      	adds	r3, #16
   156dc:	681b      	ldr	r3, [r3, #0]
   156de:	4610      	mov	r0, r2
   156e0:	4798      	blx	r3
   156e2:	ee07 0a90 	vmov	s15, r0
   156e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
   156ea:	edcd 7a05 	vstr	s15, [sp, #20]
    return clock_frequency / (16.0f * baud_rate * fraction_estimate);
   156ee:	eddd 7a02 	vldr	s15, [sp, #8]
   156f2:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
   156f6:	ee27 7a87 	vmul.f32	s14, s15, s14
   156fa:	eddd 7a01 	vldr	s15, [sp, #4]
   156fe:	ee67 7a27 	vmul.f32	s15, s14, s15
   15702:	ed9d 7a05 	vldr	s14, [sp, #20]
   15706:	ee87 8a27 	vdiv.f32	s16, s14, s15
   1570a:	4623      	mov	r3, r4
   1570c:	4619      	mov	r1, r3
   1570e:	4805      	ldr	r0, [pc, #20]	; (15724 <Uart::DividerEstimate(float, float)+0x70>)
   15710:	f000 feca 	bl	164a8 <__cyg_profile_func_exit>
   15714:	eef0 7a48 	vmov.f32	s15, s16
  }
   15718:	eeb0 0a67 	vmov.f32	s0, s15
   1571c:	b006      	add	sp, #24
   1571e:	ecbd 8b02 	vpop	{d8}
   15722:	bd10      	pop	{r4, pc}
   15724:	000156b5 	.word	0x000156b5

00015728 <Uart::FractionalEstimate(float, float)>:

  float FractionalEstimate(float baud_rate, float divider)
   15728:	b510      	push	{r4, lr}
   1572a:	ed2d 8b02 	vpush	{d8}
   1572e:	b086      	sub	sp, #24
   15730:	4674      	mov	r4, lr
   15732:	9003      	str	r0, [sp, #12]
   15734:	ed8d 0a02 	vstr	s0, [sp, #8]
   15738:	edcd 0a01 	vstr	s1, [sp, #4]
   1573c:	4623      	mov	r3, r4
   1573e:	4619      	mov	r1, r3
   15740:	4815      	ldr	r0, [pc, #84]	; (15798 <Uart::FractionalEstimate(float, float)+0x70>)
   15742:	f000 fe9d 	bl	16480 <__cyg_profile_func_enter>
  {
    float clock_frequency = static_cast<float>(GetPeripheralFrequency());
   15746:	9b03      	ldr	r3, [sp, #12]
   15748:	1d1a      	adds	r2, r3, #4
   1574a:	9b03      	ldr	r3, [sp, #12]
   1574c:	685b      	ldr	r3, [r3, #4]
   1574e:	3310      	adds	r3, #16
   15750:	681b      	ldr	r3, [r3, #0]
   15752:	4610      	mov	r0, r2
   15754:	4798      	blx	r3
   15756:	ee07 0a90 	vmov	s15, r0
   1575a:	eef8 7a67 	vcvt.f32.u32	s15, s15
   1575e:	edcd 7a05 	vstr	s15, [sp, #20]
    return clock_frequency / (16.0f * baud_rate * divider);
   15762:	eddd 7a02 	vldr	s15, [sp, #8]
   15766:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
   1576a:	ee27 7a87 	vmul.f32	s14, s15, s14
   1576e:	eddd 7a01 	vldr	s15, [sp, #4]
   15772:	ee67 7a27 	vmul.f32	s15, s14, s15
   15776:	ed9d 7a05 	vldr	s14, [sp, #20]
   1577a:	ee87 8a27 	vdiv.f32	s16, s14, s15
   1577e:	4623      	mov	r3, r4
   15780:	4619      	mov	r1, r3
   15782:	4805      	ldr	r0, [pc, #20]	; (15798 <Uart::FractionalEstimate(float, float)+0x70>)
   15784:	f000 fe90 	bl	164a8 <__cyg_profile_func_exit>
   15788:	eef0 7a48 	vmov.f32	s15, s16
  }
   1578c:	eeb0 0a67 	vmov.f32	s0, s15
   15790:	b006      	add	sp, #24
   15792:	ecbd 8b02 	vpop	{d8}
   15796:	bd10      	pop	{r4, pc}
   15798:	00015729 	.word	0x00015729

0001579c <Uart::IsDecmial(float)>:

  bool IsDecmial(float value)
   1579c:	b530      	push	{r4, r5, lr}
   1579e:	b087      	sub	sp, #28
   157a0:	4675      	mov	r5, lr
   157a2:	9001      	str	r0, [sp, #4]
   157a4:	ed8d 0a00 	vstr	s0, [sp]
   157a8:	462b      	mov	r3, r5
   157aa:	4619      	mov	r1, r3
   157ac:	4819      	ldr	r0, [pc, #100]	; (15814 <Uart::IsDecmial(float)+0x78>)
   157ae:	f000 fe67 	bl	16480 <__cyg_profile_func_enter>
  {
    bool result         = false;
   157b2:	2300      	movs	r3, #0
   157b4:	f88d 3017 	strb.w	r3, [sp, #23]
    float rounded_value = roundf(value);
   157b8:	ed9d 0a00 	vldr	s0, [sp]
   157bc:	f003 fade 	bl	18d7c <roundf>
   157c0:	ed8d 0a04 	vstr	s0, [sp, #16]
    float error         = value - rounded_value;
   157c4:	ed9d 7a00 	vldr	s14, [sp]
   157c8:	eddd 7a04 	vldr	s15, [sp, #16]
   157cc:	ee77 7a67 	vsub.f32	s15, s14, s15
   157d0:	edcd 7a03 	vstr	s15, [sp, #12]
    if (-kThreshold <= error && error <= kThreshold)
   157d4:	eddd 7a03 	vldr	s15, [sp, #12]
   157d8:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 15818 <Uart::IsDecmial(float)+0x7c>
   157dc:	eef4 7ac7 	vcmpe.f32	s15, s14
   157e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   157e4:	db0b      	blt.n	157fe <Uart::IsDecmial(float)+0x62>
   157e6:	eddd 7a03 	vldr	s15, [sp, #12]
   157ea:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 1581c <Uart::IsDecmial(float)+0x80>
   157ee:	eef4 7ac7 	vcmpe.f32	s15, s14
   157f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   157f6:	d802      	bhi.n	157fe <Uart::IsDecmial(float)+0x62>
    {
      result = true;
   157f8:	2301      	movs	r3, #1
   157fa:	f88d 3017 	strb.w	r3, [sp, #23]
    }
    return result;
   157fe:	f89d 4017 	ldrb.w	r4, [sp, #23]
   15802:	462b      	mov	r3, r5
   15804:	4619      	mov	r1, r3
   15806:	4803      	ldr	r0, [pc, #12]	; (15814 <Uart::IsDecmial(float)+0x78>)
   15808:	f000 fe4e 	bl	164a8 <__cyg_profile_func_exit>
   1580c:	4623      	mov	r3, r4
  }
   1580e:	4618      	mov	r0, r3
   15810:	b007      	add	sp, #28
   15812:	bd30      	pop	{r4, r5, pc}
   15814:	0001579d 	.word	0x0001579d
   15818:	bd4ccccd 	.word	0xbd4ccccd
   1581c:	3d4ccccd 	.word	0x3d4ccccd

00015820 <Uart::GenerateUartCalibration(float)>:

  UartCalibration_t GenerateUartCalibration(float baud_rate)
   15820:	b530      	push	{r4, r5, lr}
   15822:	b08f      	sub	sp, #60	; 0x3c
   15824:	4675      	mov	r5, lr
   15826:	9007      	str	r0, [sp, #28]
   15828:	9106      	str	r1, [sp, #24]
   1582a:	ed8d 0a05 	vstr	s0, [sp, #20]
   1582e:	462b      	mov	r3, r5
   15830:	4619      	mov	r1, r3
   15832:	4874      	ldr	r0, [pc, #464]	; (15a04 <Uart::GenerateUartCalibration(float)+0x1e4>)
   15834:	f000 fe24 	bl	16480 <__cyg_profile_func_enter>
  {
    States state = States::kCalculateIntegerDivideLatch;
   15838:	2300      	movs	r3, #0
   1583a:	930d      	str	r3, [sp, #52]	; 0x34
    UartCalibration_t uart_calibration;
   1583c:	9b07      	ldr	r3, [sp, #28]
   1583e:	2200      	movs	r2, #0
   15840:	601a      	str	r2, [r3, #0]
   15842:	9b07      	ldr	r3, [sp, #28]
   15844:	2200      	movs	r2, #0
   15846:	605a      	str	r2, [r3, #4]
   15848:	9b07      	ldr	r3, [sp, #28]
   1584a:	2201      	movs	r2, #1
   1584c:	609a      	str	r2, [r3, #8]
    float divide_estimate = 0;
   1584e:	f04f 0300 	mov.w	r3, #0
   15852:	930c      	str	r3, [sp, #48]	; 0x30
    float decimal         = 1.5;
   15854:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
   15858:	930b      	str	r3, [sp, #44]	; 0x2c
    float div             = 1;
   1585a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
   1585e:	930a      	str	r3, [sp, #40]	; 0x28
    float mul             = 2;
   15860:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   15864:	9309      	str	r3, [sp, #36]	; 0x24
    while (state != States::kDone)
   15866:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   15868:	2b04      	cmp	r3, #4
   1586a:	f000 80c1 	beq.w	159f0 <Uart::GenerateUartCalibration(float)+0x1d0>
    {
      switch (state)
   1586e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   15870:	2b04      	cmp	r3, #4
   15872:	f200 80bb 	bhi.w	159ec <Uart::GenerateUartCalibration(float)+0x1cc>
   15876:	a201      	add	r2, pc, #4	; (adr r2, 1587c <Uart::GenerateUartCalibration(float)+0x5c>)
   15878:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1587c:	00015891 	.word	0x00015891
   15880:	000158ed 	.word	0x000158ed
   15884:	0001594d 	.word	0x0001594d
   15888:	000159bd 	.word	0x000159bd
   1588c:	000159ed 	.word	0x000159ed
      {
        case States::kCalculateIntegerDivideLatch:
        {
          divide_estimate = DividerEstimate(baud_rate);
   15890:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
   15894:	ed9d 0a05 	vldr	s0, [sp, #20]
   15898:	9806      	ldr	r0, [sp, #24]
   1589a:	f7ff ff0b 	bl	156b4 <Uart::DividerEstimate(float, float)>
   1589e:	ed8d 0a0c 	vstr	s0, [sp, #48]	; 0x30
          if (divide_estimate < 1.0f)
   158a2:	eddd 7a0c 	vldr	s15, [sp, #48]	; 0x30
   158a6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
   158aa:	eef4 7ac7 	vcmpe.f32	s15, s14
   158ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   158b2:	d505      	bpl.n	158c0 <Uart::GenerateUartCalibration(float)+0xa0>
          {
            uart_calibration.divide_latch = 0;
   158b4:	9b07      	ldr	r3, [sp, #28]
   158b6:	2200      	movs	r2, #0
   158b8:	601a      	str	r2, [r3, #0]
            state                         = States::kDone;
   158ba:	2304      	movs	r3, #4
   158bc:	930d      	str	r3, [sp, #52]	; 0x34
          }
          else
          {
            state = States::kCalculateDivideLatchWithDecimal;
          }
          break;
   158be:	e096      	b.n	159ee <Uart::GenerateUartCalibration(float)+0x1ce>
          else if (IsDecmial(divide_estimate))
   158c0:	ed9d 0a0c 	vldr	s0, [sp, #48]	; 0x30
   158c4:	9806      	ldr	r0, [sp, #24]
   158c6:	f7ff ff69 	bl	1579c <Uart::IsDecmial(float)>
   158ca:	4603      	mov	r3, r0
   158cc:	2b00      	cmp	r3, #0
   158ce:	d00a      	beq.n	158e6 <Uart::GenerateUartCalibration(float)+0xc6>
                static_cast<uint32_t>(divide_estimate);
   158d0:	eddd 7a0c 	vldr	s15, [sp, #48]	; 0x30
   158d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
   158d8:	ee17 2a90 	vmov	r2, s15
            uart_calibration.divide_latch =
   158dc:	9b07      	ldr	r3, [sp, #28]
   158de:	601a      	str	r2, [r3, #0]
            state = States::kDone;
   158e0:	2304      	movs	r3, #4
   158e2:	930d      	str	r3, [sp, #52]	; 0x34
          break;
   158e4:	e083      	b.n	159ee <Uart::GenerateUartCalibration(float)+0x1ce>
            state = States::kCalculateDivideLatchWithDecimal;
   158e6:	2301      	movs	r3, #1
   158e8:	930d      	str	r3, [sp, #52]	; 0x34
          break;
   158ea:	e080      	b.n	159ee <Uart::GenerateUartCalibration(float)+0x1ce>
        }
        case States::kCalculateDivideLatchWithDecimal:
        {
          divide_estimate = roundf(DividerEstimate(baud_rate, decimal));
   158ec:	eddd 0a0b 	vldr	s1, [sp, #44]	; 0x2c
   158f0:	ed9d 0a05 	vldr	s0, [sp, #20]
   158f4:	9806      	ldr	r0, [sp, #24]
   158f6:	f7ff fedd 	bl	156b4 <Uart::DividerEstimate(float, float)>
   158fa:	eef0 7a40 	vmov.f32	s15, s0
   158fe:	eeb0 0a67 	vmov.f32	s0, s15
   15902:	f003 fa3b 	bl	18d7c <roundf>
   15906:	ed8d 0a0c 	vstr	s0, [sp, #48]	; 0x30
          decimal         = FractionalEstimate(baud_rate, divide_estimate);
   1590a:	eddd 0a0c 	vldr	s1, [sp, #48]	; 0x30
   1590e:	ed9d 0a05 	vldr	s0, [sp, #20]
   15912:	9806      	ldr	r0, [sp, #24]
   15914:	f7ff ff08 	bl	15728 <Uart::FractionalEstimate(float, float)>
   15918:	ed8d 0a0b 	vstr	s0, [sp, #44]	; 0x2c
          if (1.1f <= decimal && decimal <= 1.9f)
   1591c:	eddd 7a0b 	vldr	s15, [sp, #44]	; 0x2c
   15920:	ed9f 7a39 	vldr	s14, [pc, #228]	; 15a08 <Uart::GenerateUartCalibration(float)+0x1e8>
   15924:	eef4 7ac7 	vcmpe.f32	s15, s14
   15928:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1592c:	db0b      	blt.n	15946 <Uart::GenerateUartCalibration(float)+0x126>
   1592e:	eddd 7a0b 	vldr	s15, [sp, #44]	; 0x2c
   15932:	ed9f 7a36 	vldr	s14, [pc, #216]	; 15a0c <Uart::GenerateUartCalibration(float)+0x1ec>
   15936:	eef4 7ac7 	vcmpe.f32	s15, s14
   1593a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1593e:	d802      	bhi.n	15946 <Uart::GenerateUartCalibration(float)+0x126>
          {
            state = States::kGenerateFractionFromDecimal;
   15940:	2303      	movs	r3, #3
   15942:	930d      	str	r3, [sp, #52]	; 0x34
          }
          else
          {
            state = States::kDecimalFailedGenerateNewDecimal;
          }
          break;
   15944:	e053      	b.n	159ee <Uart::GenerateUartCalibration(float)+0x1ce>
            state = States::kDecimalFailedGenerateNewDecimal;
   15946:	2302      	movs	r3, #2
   15948:	930d      	str	r3, [sp, #52]	; 0x34
          break;
   1594a:	e050      	b.n	159ee <Uart::GenerateUartCalibration(float)+0x1ce>
        }
        case States::kDecimalFailedGenerateNewDecimal:
        {
          mul += 1;
   1594c:	eddd 7a09 	vldr	s15, [sp, #36]	; 0x24
   15950:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
   15954:	ee77 7a87 	vadd.f32	s15, s15, s14
   15958:	edcd 7a09 	vstr	s15, [sp, #36]	; 0x24

          if (div > 15)
   1595c:	eddd 7a0a 	vldr	s15, [sp, #40]	; 0x28
   15960:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
   15964:	eef4 7ac7 	vcmpe.f32	s15, s14
   15968:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1596c:	dd02      	ble.n	15974 <Uart::GenerateUartCalibration(float)+0x154>
          {
            state = States::kDone;
   1596e:	2304      	movs	r3, #4
   15970:	930d      	str	r3, [sp, #52]	; 0x34
            break;
   15972:	e03c      	b.n	159ee <Uart::GenerateUartCalibration(float)+0x1ce>
          }
          else if (mul > 15)
   15974:	eddd 7a09 	vldr	s15, [sp, #36]	; 0x24
   15978:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
   1597c:	eef4 7ac7 	vcmpe.f32	s15, s14
   15980:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   15984:	dd0f      	ble.n	159a6 <Uart::GenerateUartCalibration(float)+0x186>
          {
            div += 1;
   15986:	eddd 7a0a 	vldr	s15, [sp, #40]	; 0x28
   1598a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
   1598e:	ee77 7a87 	vadd.f32	s15, s15, s14
   15992:	edcd 7a0a 	vstr	s15, [sp, #40]	; 0x28
            mul = div + 1;
   15996:	eddd 7a0a 	vldr	s15, [sp, #40]	; 0x28
   1599a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
   1599e:	ee77 7a87 	vadd.f32	s15, s15, s14
   159a2:	edcd 7a09 	vstr	s15, [sp, #36]	; 0x24
          }
          decimal = div / mul;
   159a6:	eddd 6a0a 	vldr	s13, [sp, #40]	; 0x28
   159aa:	ed9d 7a09 	vldr	s14, [sp, #36]	; 0x24
   159ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
   159b2:	edcd 7a0b 	vstr	s15, [sp, #44]	; 0x2c
          state   = States::kCalculateDivideLatchWithDecimal;
   159b6:	2301      	movs	r3, #1
   159b8:	930d      	str	r3, [sp, #52]	; 0x34
          break;
   159ba:	e018      	b.n	159ee <Uart::GenerateUartCalibration(float)+0x1ce>
        }
        case States::kGenerateFractionFromDecimal:
        {
          uart_calibration = FindClosestFractional(decimal);
   159bc:	9c07      	ldr	r4, [sp, #28]
   159be:	466b      	mov	r3, sp
   159c0:	ed9d 0a0b 	vldr	s0, [sp, #44]	; 0x2c
   159c4:	9906      	ldr	r1, [sp, #24]
   159c6:	4618      	mov	r0, r3
   159c8:	f7ff fdf6 	bl	155b8 <Uart::FindClosestFractional(float)>
   159cc:	466b      	mov	r3, sp
   159ce:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   159d2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
          uart_calibration.divide_latch =
              static_cast<uint32_t>(divide_estimate);
   159d6:	eddd 7a0c 	vldr	s15, [sp, #48]	; 0x30
   159da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
   159de:	ee17 2a90 	vmov	r2, s15
          uart_calibration.divide_latch =
   159e2:	9b07      	ldr	r3, [sp, #28]
   159e4:	601a      	str	r2, [r3, #0]
          state = States::kDone;
   159e6:	2304      	movs	r3, #4
   159e8:	930d      	str	r3, [sp, #52]	; 0x34
          break;
   159ea:	e000      	b.n	159ee <Uart::GenerateUartCalibration(float)+0x1ce>
        }
        case States::kDone: { break;
        }
        default: { break;
   159ec:	bf00      	nop
    while (state != States::kDone)
   159ee:	e73a      	b.n	15866 <Uart::GenerateUartCalibration(float)+0x46>
        }
      }
    }
    return uart_calibration;
   159f0:	bf00      	nop
   159f2:	462b      	mov	r3, r5
   159f4:	4619      	mov	r1, r3
   159f6:	4803      	ldr	r0, [pc, #12]	; (15a04 <Uart::GenerateUartCalibration(float)+0x1e4>)
   159f8:	f000 fd56 	bl	164a8 <__cyg_profile_func_exit>
   159fc:	bf00      	nop
  }
   159fe:	9807      	ldr	r0, [sp, #28]
   15a00:	b00f      	add	sp, #60	; 0x3c
   15a02:	bd30      	pop	{r4, r5, pc}
   15a04:	00015821 	.word	0x00015821
   15a08:	3f8ccccd 	.word	0x3f8ccccd
   15a0c:	3ff33333 	.word	0x3ff33333

00015a10 <(anonymous namespace)::Lpc40xxUptime()>:
{
   15a10:	b538      	push	{r3, r4, r5, lr}
   15a12:	4675      	mov	r5, lr
   15a14:	462b      	mov	r3, r5
   15a16:	4619      	mov	r1, r3
   15a18:	480a      	ldr	r0, [pc, #40]	; (15a44 <(anonymous namespace)::Lpc40xxUptime()+0x34>)
   15a1a:	f000 fd31 	bl	16480 <__cyg_profile_func_enter>
    return tim_register[channel_]->TC;
   15a1e:	4b0a      	ldr	r3, [pc, #40]	; (15a48 <(anonymous namespace)::Lpc40xxUptime()+0x38>)
   15a20:	7a1b      	ldrb	r3, [r3, #8]
   15a22:	461a      	mov	r2, r3
   15a24:	4b09      	ldr	r3, [pc, #36]	; (15a4c <(anonymous namespace)::Lpc40xxUptime()+0x3c>)
   15a26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   15a2a:	689c      	ldr	r4, [r3, #8]
   15a2c:	462b      	mov	r3, r5
   15a2e:	4619      	mov	r1, r3
   15a30:	4804      	ldr	r0, [pc, #16]	; (15a44 <(anonymous namespace)::Lpc40xxUptime()+0x34>)
   15a32:	f000 fd39 	bl	164a8 <__cyg_profile_func_exit>
  return timer0.GetTimer();
   15a36:	4623      	mov	r3, r4
   15a38:	f04f 0400 	mov.w	r4, #0
}
   15a3c:	4618      	mov	r0, r3
   15a3e:	4621      	mov	r1, r4
   15a40:	bd38      	pop	{r3, r4, r5, pc}
   15a42:	bf00      	nop
   15a44:	00015155 	.word	0x00015155
   15a48:	100004e8 	.word	0x100004e8
   15a4c:	10000468 	.word	0x10000468

00015a50 <UptimeRTOS>:
{
   15a50:	b538      	push	{r3, r4, r5, lr}
   15a52:	4675      	mov	r5, lr
   15a54:	462b      	mov	r3, r5
   15a56:	4619      	mov	r1, r3
   15a58:	480a      	ldr	r0, [pc, #40]	; (15a84 <UptimeRTOS+0x34>)
   15a5a:	f000 fd11 	bl	16480 <__cyg_profile_func_enter>
   15a5e:	4b0a      	ldr	r3, [pc, #40]	; (15a88 <UptimeRTOS+0x38>)
   15a60:	7a1b      	ldrb	r3, [r3, #8]
   15a62:	461a      	mov	r2, r3
   15a64:	4b09      	ldr	r3, [pc, #36]	; (15a8c <UptimeRTOS+0x3c>)
   15a66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   15a6a:	689c      	ldr	r4, [r3, #8]
   15a6c:	462b      	mov	r3, r5
   15a6e:	4619      	mov	r1, r3
   15a70:	4804      	ldr	r0, [pc, #16]	; (15a84 <UptimeRTOS+0x34>)
   15a72:	f000 fd19 	bl	164a8 <__cyg_profile_func_exit>
  return timer0.GetTimer();
   15a76:	4623      	mov	r3, r4
   15a78:	f04f 0400 	mov.w	r4, #0
}
   15a7c:	4618      	mov	r0, r3
   15a7e:	4621      	mov	r1, r4
   15a80:	bd38      	pop	{r3, r4, r5, pc}
   15a82:	bf00      	nop
   15a84:	00015155 	.word	0x00015155
   15a88:	100004e8 	.word	0x100004e8
   15a8c:	10000468 	.word	0x10000468

00015a90 <LowLevelInit()>:

void LowLevelInit()
{
   15a90:	b500      	push	{lr}
   15a92:	b083      	sub	sp, #12
  // Set the SystemTick frequency to the RTOS tick frequency
  // It is critical that this happens before you set the system_clock, since
  // The system_timer keeps the time that the system_clock uses to delay itself.
  system_timer.SetTickFrequency(config::kRtosFrequency);
   15a94:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   15a98:	4822      	ldr	r0, [pc, #136]	; (15b24 <LowLevelInit()+0x94>)
   15a9a:	f7ff f9bb 	bl	14e14 <SystemTimer::SetTickFrequency(unsigned long)>
  bool timer_started_successfully = system_timer.StartTimer();
   15a9e:	4821      	ldr	r0, [pc, #132]	; (15b24 <LowLevelInit()+0x94>)
   15aa0:	f7ff f96a 	bl	14d78 <SystemTimer::StartTimer()>
   15aa4:	4603      	mov	r3, r0
   15aa6:	f88d 3007 	strb.w	r3, [sp, #7]
  SJ2_ASSERT_WARNING(timer_started_successfully,
   15aaa:	f89d 3007 	ldrb.w	r3, [sp, #7]
   15aae:	f083 0301 	eor.w	r3, r3, #1
   15ab2:	b2db      	uxtb	r3, r3
   15ab4:	2b00      	cmp	r3, #0
   15ab6:	d005      	beq.n	15ac4 <LowLevelInit()+0x34>
   15ab8:	23ad      	movs	r3, #173	; 0xad
   15aba:	4a1b      	ldr	r2, [pc, #108]	; (15b28 <LowLevelInit()+0x98>)
   15abc:	491b      	ldr	r1, [pc, #108]	; (15b2c <LowLevelInit()+0x9c>)
   15abe:	481c      	ldr	r0, [pc, #112]	; (15b30 <LowLevelInit()+0xa0>)
   15ac0:	f001 ff5a 	bl	17978 <printf>
                     "System Timer has FAILED to start!");
  // Set Clock Speed
  // SetClockFrequency will timeout return the offset between desire clockspeed
  // and actual clockspeed if the PLL doesn't get a frequency fix within a
  // defined timeout (see L1/system_clock.hpp:kDefaultTimeout)
  while (system_controller.SetClockFrequency(config::kSystemClockRateMhz) != 0)
   15ac4:	2130      	movs	r1, #48	; 0x30
   15ac6:	481b      	ldr	r0, [pc, #108]	; (15b34 <LowLevelInit()+0xa4>)
   15ac8:	f7fc f828 	bl	11b1c <Lpc40xxSystemController::SetClockFrequency(unsigned char)>
   15acc:	4603      	mov	r3, r0
   15ace:	2b00      	cmp	r3, #0
   15ad0:	bf14      	ite	ne
   15ad2:	2301      	movne	r3, #1
   15ad4:	2300      	moveq	r3, #0
   15ad6:	b2db      	uxtb	r3, r3
   15ad8:	2b00      	cmp	r3, #0
   15ada:	d001      	beq.n	15ae0 <LowLevelInit()+0x50>
  {
    // Continually attempt to set the clock frequency to the desired until the
    // delta between desired and actual are 0.
    continue;
   15adc:	bf00      	nop
  while (system_controller.SetClockFrequency(config::kSystemClockRateMhz) != 0)
   15ade:	e7f1      	b.n	15ac4 <LowLevelInit()+0x34>
  }
  // Enable Peripheral Clock and set its divider to 1 meaning the clock speed
  // fed to all peripherals will be 48Mhz.
  system_controller.SetPeripheralClockDivider(1);
   15ae0:	2101      	movs	r1, #1
   15ae2:	4814      	ldr	r0, [pc, #80]	; (15b34 <LowLevelInit()+0xa4>)
   15ae4:	f7fc f862 	bl	11bac <Lpc40xxSystemController::SetPeripheralClockDivider(unsigned char)>
  // Set System Timer frequency again, since the clock speed has changed since
  // the last time we ran this.
  system_timer.DisableTimer();
   15ae8:	f7ff f8f4 	bl	14cd4 <SystemTimer::DisableTimer()>
  system_timer.SetTickFrequency(config::kRtosFrequency);
   15aec:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   15af0:	480c      	ldr	r0, [pc, #48]	; (15b24 <LowLevelInit()+0x94>)
   15af2:	f7ff f98f 	bl	14e14 <SystemTimer::SetTickFrequency(unsigned long)>
  system_timer.StartTimer();
   15af6:	480b      	ldr	r0, [pc, #44]	; (15b24 <LowLevelInit()+0x94>)
   15af8:	f7ff f93e 	bl	14d78 <SystemTimer::StartTimer()>
  // Set timer0 to 1 MHz (1,000,000 Hz) so that the timer increments every 1
  // micro second.
  timer0.Initialize(1'000'000);
   15afc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   15b00:	4a0d      	ldr	r2, [pc, #52]	; (15b38 <LowLevelInit()+0xa8>)
   15b02:	490e      	ldr	r1, [pc, #56]	; (15b3c <LowLevelInit()+0xac>)
   15b04:	480e      	ldr	r0, [pc, #56]	; (15b40 <LowLevelInit()+0xb0>)
   15b06:	f7ff f9f7 	bl	14ef8 <Timer::Initialize(unsigned long, void (*)(), long)>
  SetUptimeFunction(Lpc40xxUptime);
   15b0a:	480e      	ldr	r0, [pc, #56]	; (15b44 <LowLevelInit()+0xb4>)
   15b0c:	f7ff f8ca 	bl	14ca4 <SetUptimeFunction(unsigned long long (*)())>
  // Set UART0 baudrate, which is required for printf and scanf to work properly
  uart0.Initialize(config::kBaudRate);
   15b10:	f44f 4116 	mov.w	r1, #38400	; 0x9600
   15b14:	480c      	ldr	r0, [pc, #48]	; (15b48 <LowLevelInit()+0xb8>)
   15b16:	f7ff fba1 	bl	1525c <Uart::Initialize(unsigned long)>
}
   15b1a:	bf00      	nop
   15b1c:	b003      	add	sp, #12
   15b1e:	f85d fb04 	ldr.w	pc, [sp], #4
   15b22:	bf00      	nop
   15b24:	100004dc 	.word	0x100004dc
   15b28:	0001a674 	.word	0x0001a674
   15b2c:	0001a57c 	.word	0x0001a57c
   15b30:	0001a4d4 	.word	0x0001a4d4
   15b34:	100004e4 	.word	0x100004e4
   15b38:	00014ed9 	.word	0x00014ed9
   15b3c:	000f4240 	.word	0x000f4240
   15b40:	100004e8 	.word	0x100004e8
   15b44:	00015a11 	.word	0x00015a11
   15b48:	100004c8 	.word	0x100004c8

00015b4c <SystemInit>:

void SystemInit()
{
   15b4c:	b508      	push	{r3, lr}
  // Transfer data section values from flash to RAM
  InitDataSection();
   15b4e:	f7fa fadd 	bl	1010c <InitDataSection()>
  // Clear BSS section of RAM
  // This is required because the nano implementation of the standard C/C++
  // libraries assumes that the BSS section is initialized to 0.
  InitBssSection();
   15b52:	f7fa fb23 	bl	1019c <InitBssSection()>
  // Enable FPU (F.loating P.oint U.nit)
  // System will crash if floating point operations occur without
  // Initializing the FPU.
  InitFpu();
   15b56:	f7fa fb51 	bl	101fc <InitFpu()>
  // Initialisation C++ libraries
  __libc_init_array();
   15b5a:	f003 fb17 	bl	1918c <__libc_init_array>
  // Run LowLevel System Initialization
  LowLevelInit();
   15b5e:	f7ff ff97 	bl	15a90 <LowLevelInit()>
}
   15b62:	bf00      	nop
   15b64:	bd08      	pop	{r3, pc}
   15b66:	Address 0x0000000000015b66 is out of bounds.


00015b68 <ResetIsr>:
// Sets up a simple runtime environment and initializes the C/C++ library.

extern "C"
{
  void ResetIsr(void)
  {
   15b68:	b580      	push	{r7, lr}
   15b6a:	b084      	sub	sp, #16
   15b6c:	af00      	add	r7, sp, #0
    // The Hyperload bootloader takes up stack space to execute. The Hyperload
    // bootloader function launches this ISR manually, but it never returns thus
    // it never cleans up the memory it uses. To get that memory back, we have
    // to manually move the stack pointers back to the top of stack.
    const uint32_t kTopOfStack = reinterpret_cast<intptr_t>(&StackTop);
   15b6e:	4b09      	ldr	r3, [pc, #36]	; (15b94 <ResetIsr+0x2c>)
   15b70:	60fb      	str	r3, [r7, #12]
   15b72:	68fb      	ldr	r3, [r7, #12]
   15b74:	603b      	str	r3, [r7, #0]
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
   15b76:	683b      	ldr	r3, [r7, #0]
   15b78:	f383 8809 	msr	PSP, r3
   15b7c:	68fb      	ldr	r3, [r7, #12]
   15b7e:	607b      	str	r3, [r7, #4]

    \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0\n" : : "r" (topOfMainStack) : "sp");
   15b80:	687b      	ldr	r3, [r7, #4]
   15b82:	f383 8808 	msr	MSP, r3
    __set_PSP(kTopOfStack);
    __set_MSP(kTopOfStack);

    SystemInit();
   15b86:	f7ff ffe1 	bl	15b4c <SystemInit>
// #pragma ignored "-Wpedantic" to suppress main function call warning
#pragma GCC diagnostic push ignored "-Wpedantic"
    [[maybe_unused]] int32_t result = main();
   15b8a:	f7fd fea5 	bl	138d8 <main>
   15b8e:	60b8      	str	r0, [r7, #8]
   15b90:	e7fe      	b.n	15b90 <ResetIsr+0x28>
   15b92:	bf00      	nop
   15b94:	10010000 	.word	0x10010000

00015b98 <void Timer::TimerHandler<(TimerInterface::TimerPort)0>()>:
  static void TimerHandler()
   15b98:	b510      	push	{r4, lr}
   15b9a:	4674      	mov	r4, lr
   15b9c:	4623      	mov	r3, r4
   15b9e:	4619      	mov	r1, r3
   15ba0:	480a      	ldr	r0, [pc, #40]	; (15bcc <void Timer::TimerHandler<(TimerInterface::TimerPort)0>()+0x34>)
   15ba2:	f000 fc6d 	bl	16480 <__cyg_profile_func_enter>
      user_timer_isr[util::Value(port)]();
   15ba6:	2000      	movs	r0, #0
   15ba8:	f7ff f97e 	bl	14ea8 <unsigned char util::Value<TimerInterface::TimerPort, unsigned char>(TimerInterface::TimerPort)>
   15bac:	4603      	mov	r3, r0
   15bae:	461a      	mov	r2, r3
   15bb0:	4b07      	ldr	r3, [pc, #28]	; (15bd0 <void Timer::TimerHandler<(TimerInterface::TimerPort)0>()+0x38>)
   15bb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   15bb6:	4798      	blx	r3
    ClearInterrupts<port>();
   15bb8:	f000 f90e 	bl	15dd8 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)0>()>
   15bbc:	4623      	mov	r3, r4
   15bbe:	4619      	mov	r1, r3
   15bc0:	4802      	ldr	r0, [pc, #8]	; (15bcc <void Timer::TimerHandler<(TimerInterface::TimerPort)0>()+0x34>)
   15bc2:	f000 fc71 	bl	164a8 <__cyg_profile_func_exit>
  }
   15bc6:	bf00      	nop
   15bc8:	bd10      	pop	{r4, pc}
   15bca:	bf00      	nop
   15bcc:	00015b99 	.word	0x00015b99
   15bd0:	10001400 	.word	0x10001400

00015bd4 <void Timer::TimerHandler<(TimerInterface::TimerPort)1>()>:
  static void TimerHandler()
   15bd4:	b510      	push	{r4, lr}
   15bd6:	4674      	mov	r4, lr
   15bd8:	4623      	mov	r3, r4
   15bda:	4619      	mov	r1, r3
   15bdc:	480a      	ldr	r0, [pc, #40]	; (15c08 <void Timer::TimerHandler<(TimerInterface::TimerPort)1>()+0x34>)
   15bde:	f000 fc4f 	bl	16480 <__cyg_profile_func_enter>
      user_timer_isr[util::Value(port)]();
   15be2:	2001      	movs	r0, #1
   15be4:	f7ff f960 	bl	14ea8 <unsigned char util::Value<TimerInterface::TimerPort, unsigned char>(TimerInterface::TimerPort)>
   15be8:	4603      	mov	r3, r0
   15bea:	461a      	mov	r2, r3
   15bec:	4b07      	ldr	r3, [pc, #28]	; (15c0c <void Timer::TimerHandler<(TimerInterface::TimerPort)1>()+0x38>)
   15bee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   15bf2:	4798      	blx	r3
    ClearInterrupts<port>();
   15bf4:	f000 f940 	bl	15e78 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)1>()>
   15bf8:	4623      	mov	r3, r4
   15bfa:	4619      	mov	r1, r3
   15bfc:	4802      	ldr	r0, [pc, #8]	; (15c08 <void Timer::TimerHandler<(TimerInterface::TimerPort)1>()+0x34>)
   15bfe:	f000 fc53 	bl	164a8 <__cyg_profile_func_exit>
  }
   15c02:	bf00      	nop
   15c04:	bd10      	pop	{r4, pc}
   15c06:	bf00      	nop
   15c08:	00015bd5 	.word	0x00015bd5
   15c0c:	10001400 	.word	0x10001400

00015c10 <void Timer::TimerHandler<(TimerInterface::TimerPort)2>()>:
  static void TimerHandler()
   15c10:	b510      	push	{r4, lr}
   15c12:	4674      	mov	r4, lr
   15c14:	4623      	mov	r3, r4
   15c16:	4619      	mov	r1, r3
   15c18:	480a      	ldr	r0, [pc, #40]	; (15c44 <void Timer::TimerHandler<(TimerInterface::TimerPort)2>()+0x34>)
   15c1a:	f000 fc31 	bl	16480 <__cyg_profile_func_enter>
      user_timer_isr[util::Value(port)]();
   15c1e:	2002      	movs	r0, #2
   15c20:	f7ff f942 	bl	14ea8 <unsigned char util::Value<TimerInterface::TimerPort, unsigned char>(TimerInterface::TimerPort)>
   15c24:	4603      	mov	r3, r0
   15c26:	461a      	mov	r2, r3
   15c28:	4b07      	ldr	r3, [pc, #28]	; (15c48 <void Timer::TimerHandler<(TimerInterface::TimerPort)2>()+0x38>)
   15c2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   15c2e:	4798      	blx	r3
    ClearInterrupts<port>();
   15c30:	f000 f972 	bl	15f18 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)2>()>
   15c34:	4623      	mov	r3, r4
   15c36:	4619      	mov	r1, r3
   15c38:	4802      	ldr	r0, [pc, #8]	; (15c44 <void Timer::TimerHandler<(TimerInterface::TimerPort)2>()+0x34>)
   15c3a:	f000 fc35 	bl	164a8 <__cyg_profile_func_exit>
  }
   15c3e:	bf00      	nop
   15c40:	bd10      	pop	{r4, pc}
   15c42:	bf00      	nop
   15c44:	00015c11 	.word	0x00015c11
   15c48:	10001400 	.word	0x10001400

00015c4c <void Timer::TimerHandler<(TimerInterface::TimerPort)3>()>:
  static void TimerHandler()
   15c4c:	b510      	push	{r4, lr}
   15c4e:	4674      	mov	r4, lr
   15c50:	4623      	mov	r3, r4
   15c52:	4619      	mov	r1, r3
   15c54:	480a      	ldr	r0, [pc, #40]	; (15c80 <void Timer::TimerHandler<(TimerInterface::TimerPort)3>()+0x34>)
   15c56:	f000 fc13 	bl	16480 <__cyg_profile_func_enter>
      user_timer_isr[util::Value(port)]();
   15c5a:	2003      	movs	r0, #3
   15c5c:	f7ff f924 	bl	14ea8 <unsigned char util::Value<TimerInterface::TimerPort, unsigned char>(TimerInterface::TimerPort)>
   15c60:	4603      	mov	r3, r0
   15c62:	461a      	mov	r2, r3
   15c64:	4b07      	ldr	r3, [pc, #28]	; (15c84 <void Timer::TimerHandler<(TimerInterface::TimerPort)3>()+0x38>)
   15c66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   15c6a:	4798      	blx	r3
    ClearInterrupts<port>();
   15c6c:	f000 f9a4 	bl	15fb8 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)3>()>
   15c70:	4623      	mov	r3, r4
   15c72:	4619      	mov	r1, r3
   15c74:	4802      	ldr	r0, [pc, #8]	; (15c80 <void Timer::TimerHandler<(TimerInterface::TimerPort)3>()+0x34>)
   15c76:	f000 fc17 	bl	164a8 <__cyg_profile_func_exit>
  }
   15c7a:	bf00      	nop
   15c7c:	bd10      	pop	{r4, pc}
   15c7e:	bf00      	nop
   15c80:	00015c4d 	.word	0x00015c4d
   15c84:	10001400 	.word	0x10001400

00015c88 <Status Wait<Uart::Send(unsigned char)::{lambda()#1}>(unsigned long long, Uart::Send(unsigned char)::{lambda()#1})>:
inline Status Wait(uint64_t timeout, F is_done)
   15c88:	e92d 4830 	stmdb	sp!, {r4, r5, fp, lr}
   15c8c:	b088      	sub	sp, #32
   15c8e:	4675      	mov	r5, lr
   15c90:	e9cd 0102 	strd	r0, r1, [sp, #8]
   15c94:	9201      	str	r2, [sp, #4]
   15c96:	462b      	mov	r3, r5
   15c98:	4619      	mov	r1, r3
   15c9a:	4824      	ldr	r0, [pc, #144]	; (15d2c <Status Wait<Uart::Send(unsigned char)::{lambda()#1}>(unsigned long long, Uart::Send(unsigned char)::{lambda()#1})+0xa4>)
   15c9c:	f000 fbf0 	bl	16480 <__cyg_profile_func_enter>
  uint64_t timeout_time = 0;
   15ca0:	f04f 0300 	mov.w	r3, #0
   15ca4:	f04f 0400 	mov.w	r4, #0
   15ca8:	e9cd 3406 	strd	r3, r4, [sp, #24]
  if (timeout == kMaxWait)
   15cac:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
   15cb0:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
   15cb4:	bf08      	it	eq
   15cb6:	f1b3 3fff 	cmpeq.w	r3, #4294967295	; 0xffffffff
   15cba:	d106      	bne.n	15cca <Status Wait<Uart::Send(unsigned char)::{lambda()#1}>(unsigned long long, Uart::Send(unsigned char)::{lambda()#1})+0x42>
    timeout_time = kMaxWait;
   15cbc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   15cc0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   15cc4:	e9cd 3406 	strd	r3, r4, [sp, #24]
   15cc8:	e00b      	b.n	15ce2 <Status Wait<Uart::Send(unsigned char)::{lambda()#1}>(unsigned long long, Uart::Send(unsigned char)::{lambda()#1})+0x5a>
    timeout_time = Milliseconds() + timeout;
   15cca:	f7fb f993 	bl	10ff4 <Milliseconds()>
   15cce:	460a      	mov	r2, r1
   15cd0:	4601      	mov	r1, r0
   15cd2:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
   15cd6:	eb13 0b01 	adds.w	fp, r3, r1
   15cda:	eb44 0c02 	adc.w	ip, r4, r2
   15cde:	e9cd bc06 	strd	fp, ip, [sp, #24]
  Status status = Status::kTimedOut;
   15ce2:	2301      	movs	r3, #1
   15ce4:	9305      	str	r3, [sp, #20]
  while (Milliseconds() < timeout_time)
   15ce6:	f7fb f985 	bl	10ff4 <Milliseconds()>
   15cea:	460a      	mov	r2, r1
   15cec:	4601      	mov	r1, r0
   15cee:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
   15cf2:	42a2      	cmp	r2, r4
   15cf4:	bf08      	it	eq
   15cf6:	4299      	cmpeq	r1, r3
   15cf8:	bf34      	ite	cc
   15cfa:	2301      	movcc	r3, #1
   15cfc:	2300      	movcs	r3, #0
   15cfe:	b2db      	uxtb	r3, r3
   15d00:	2b00      	cmp	r3, #0
   15d02:	d008      	beq.n	15d16 <Status Wait<Uart::Send(unsigned char)::{lambda()#1}>(unsigned long long, Uart::Send(unsigned char)::{lambda()#1})+0x8e>
    if (is_done())
   15d04:	ab01      	add	r3, sp, #4
   15d06:	4618      	mov	r0, r3
   15d08:	f7ff fb1a 	bl	15340 <Uart::Send(unsigned char)::{lambda()#1}::operator()() const>
   15d0c:	4603      	mov	r3, r0
   15d0e:	2b00      	cmp	r3, #0
   15d10:	d0e9      	beq.n	15ce6 <Status Wait<Uart::Send(unsigned char)::{lambda()#1}>(unsigned long long, Uart::Send(unsigned char)::{lambda()#1})+0x5e>
      status = Status::kSuccess;
   15d12:	2300      	movs	r3, #0
   15d14:	9305      	str	r3, [sp, #20]
  return status;
   15d16:	9c05      	ldr	r4, [sp, #20]
   15d18:	462b      	mov	r3, r5
   15d1a:	4619      	mov	r1, r3
   15d1c:	4803      	ldr	r0, [pc, #12]	; (15d2c <Status Wait<Uart::Send(unsigned char)::{lambda()#1}>(unsigned long long, Uart::Send(unsigned char)::{lambda()#1})+0xa4>)
   15d1e:	f000 fbc3 	bl	164a8 <__cyg_profile_func_exit>
   15d22:	4623      	mov	r3, r4
}
   15d24:	4618      	mov	r0, r3
   15d26:	b008      	add	sp, #32
   15d28:	e8bd 8830 	ldmia.w	sp!, {r4, r5, fp, pc}
   15d2c:	00015c89 	.word	0x00015c89

00015d30 <Status Wait<Uart::Receive(unsigned long)::{lambda()#1}>(unsigned long long, Uart::Receive(unsigned long)::{lambda()#1})>:
inline Status Wait(uint64_t timeout, F is_done)
   15d30:	e92d 4830 	stmdb	sp!, {r4, r5, fp, lr}
   15d34:	b088      	sub	sp, #32
   15d36:	4675      	mov	r5, lr
   15d38:	e9cd 0102 	strd	r0, r1, [sp, #8]
   15d3c:	9201      	str	r2, [sp, #4]
   15d3e:	462b      	mov	r3, r5
   15d40:	4619      	mov	r1, r3
   15d42:	4824      	ldr	r0, [pc, #144]	; (15dd4 <Status Wait<Uart::Receive(unsigned long)::{lambda()#1}>(unsigned long long, Uart::Receive(unsigned long)::{lambda()#1})+0xa4>)
   15d44:	f000 fb9c 	bl	16480 <__cyg_profile_func_enter>
  uint64_t timeout_time = 0;
   15d48:	f04f 0300 	mov.w	r3, #0
   15d4c:	f04f 0400 	mov.w	r4, #0
   15d50:	e9cd 3406 	strd	r3, r4, [sp, #24]
  if (timeout == kMaxWait)
   15d54:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
   15d58:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
   15d5c:	bf08      	it	eq
   15d5e:	f1b3 3fff 	cmpeq.w	r3, #4294967295	; 0xffffffff
   15d62:	d106      	bne.n	15d72 <Status Wait<Uart::Receive(unsigned long)::{lambda()#1}>(unsigned long long, Uart::Receive(unsigned long)::{lambda()#1})+0x42>
    timeout_time = kMaxWait;
   15d64:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   15d68:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   15d6c:	e9cd 3406 	strd	r3, r4, [sp, #24]
   15d70:	e00b      	b.n	15d8a <Status Wait<Uart::Receive(unsigned long)::{lambda()#1}>(unsigned long long, Uart::Receive(unsigned long)::{lambda()#1})+0x5a>
    timeout_time = Milliseconds() + timeout;
   15d72:	f7fb f93f 	bl	10ff4 <Milliseconds()>
   15d76:	460a      	mov	r2, r1
   15d78:	4601      	mov	r1, r0
   15d7a:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
   15d7e:	eb13 0b01 	adds.w	fp, r3, r1
   15d82:	eb44 0c02 	adc.w	ip, r4, r2
   15d86:	e9cd bc06 	strd	fp, ip, [sp, #24]
  Status status = Status::kTimedOut;
   15d8a:	2301      	movs	r3, #1
   15d8c:	9305      	str	r3, [sp, #20]
  while (Milliseconds() < timeout_time)
   15d8e:	f7fb f931 	bl	10ff4 <Milliseconds()>
   15d92:	460a      	mov	r2, r1
   15d94:	4601      	mov	r1, r0
   15d96:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
   15d9a:	42a2      	cmp	r2, r4
   15d9c:	bf08      	it	eq
   15d9e:	4299      	cmpeq	r1, r3
   15da0:	bf34      	ite	cc
   15da2:	2301      	movcc	r3, #1
   15da4:	2300      	movcs	r3, #0
   15da6:	b2db      	uxtb	r3, r3
   15da8:	2b00      	cmp	r3, #0
   15daa:	d008      	beq.n	15dbe <Status Wait<Uart::Receive(unsigned long)::{lambda()#1}>(unsigned long long, Uart::Receive(unsigned long)::{lambda()#1})+0x8e>
    if (is_done())
   15dac:	ab01      	add	r3, sp, #4
   15dae:	4618      	mov	r0, r3
   15db0:	f7ff fb60 	bl	15474 <Uart::Receive(unsigned long)::{lambda()#1}::operator()() const>
   15db4:	4603      	mov	r3, r0
   15db6:	2b00      	cmp	r3, #0
   15db8:	d0e9      	beq.n	15d8e <Status Wait<Uart::Receive(unsigned long)::{lambda()#1}>(unsigned long long, Uart::Receive(unsigned long)::{lambda()#1})+0x5e>
      status = Status::kSuccess;
   15dba:	2300      	movs	r3, #0
   15dbc:	9305      	str	r3, [sp, #20]
  return status;
   15dbe:	9c05      	ldr	r4, [sp, #20]
   15dc0:	462b      	mov	r3, r5
   15dc2:	4619      	mov	r1, r3
   15dc4:	4803      	ldr	r0, [pc, #12]	; (15dd4 <Status Wait<Uart::Receive(unsigned long)::{lambda()#1}>(unsigned long long, Uart::Receive(unsigned long)::{lambda()#1})+0xa4>)
   15dc6:	f000 fb6f 	bl	164a8 <__cyg_profile_func_exit>
   15dca:	4623      	mov	r3, r4
}
   15dcc:	4618      	mov	r0, r3
   15dce:	b008      	add	sp, #32
   15dd0:	e8bd 8830 	ldmia.w	sp!, {r4, r5, fp, pc}
   15dd4:	00015d31 	.word	0x00015d31

00015dd8 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)0>()>:
  static void ClearInterrupts()
   15dd8:	b510      	push	{r4, lr}
   15dda:	b082      	sub	sp, #8
   15ddc:	4674      	mov	r4, lr
   15dde:	4623      	mov	r3, r4
   15de0:	4619      	mov	r1, r3
   15de2:	4823      	ldr	r0, [pc, #140]	; (15e70 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)0>()+0x98>)
   15de4:	f000 fb4c 	bl	16480 <__cyg_profile_func_enter>
    uint8_t channel = util::Value(port);
   15de8:	2300      	movs	r3, #0
   15dea:	f88d 3007 	strb.w	r3, [sp, #7]
    tim_register[channel]->IR |= (1 << kRegMR0);
   15dee:	f89d 3007 	ldrb.w	r3, [sp, #7]
   15df2:	4a20      	ldr	r2, [pc, #128]	; (15e74 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)0>()+0x9c>)
   15df4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15df8:	681a      	ldr	r2, [r3, #0]
   15dfa:	f89d 3007 	ldrb.w	r3, [sp, #7]
   15dfe:	491d      	ldr	r1, [pc, #116]	; (15e74 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)0>()+0x9c>)
   15e00:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   15e04:	f042 0201 	orr.w	r2, r2, #1
   15e08:	601a      	str	r2, [r3, #0]
    tim_register[channel]->IR |= (1 << kRegMR1);
   15e0a:	f89d 3007 	ldrb.w	r3, [sp, #7]
   15e0e:	4a19      	ldr	r2, [pc, #100]	; (15e74 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)0>()+0x9c>)
   15e10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15e14:	681a      	ldr	r2, [r3, #0]
   15e16:	f89d 3007 	ldrb.w	r3, [sp, #7]
   15e1a:	4916      	ldr	r1, [pc, #88]	; (15e74 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)0>()+0x9c>)
   15e1c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   15e20:	f042 0202 	orr.w	r2, r2, #2
   15e24:	601a      	str	r2, [r3, #0]
    tim_register[channel]->IR |= (1 << kRegMR2);
   15e26:	f89d 3007 	ldrb.w	r3, [sp, #7]
   15e2a:	4a12      	ldr	r2, [pc, #72]	; (15e74 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)0>()+0x9c>)
   15e2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15e30:	681a      	ldr	r2, [r3, #0]
   15e32:	f89d 3007 	ldrb.w	r3, [sp, #7]
   15e36:	490f      	ldr	r1, [pc, #60]	; (15e74 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)0>()+0x9c>)
   15e38:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   15e3c:	f042 0204 	orr.w	r2, r2, #4
   15e40:	601a      	str	r2, [r3, #0]
    tim_register[channel]->IR |= (1 << kRegMR3);
   15e42:	f89d 3007 	ldrb.w	r3, [sp, #7]
   15e46:	4a0b      	ldr	r2, [pc, #44]	; (15e74 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)0>()+0x9c>)
   15e48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15e4c:	681a      	ldr	r2, [r3, #0]
   15e4e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   15e52:	4908      	ldr	r1, [pc, #32]	; (15e74 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)0>()+0x9c>)
   15e54:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   15e58:	f042 0208 	orr.w	r2, r2, #8
   15e5c:	601a      	str	r2, [r3, #0]
   15e5e:	4623      	mov	r3, r4
   15e60:	4619      	mov	r1, r3
   15e62:	4803      	ldr	r0, [pc, #12]	; (15e70 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)0>()+0x98>)
   15e64:	f000 fb20 	bl	164a8 <__cyg_profile_func_exit>
  }
   15e68:	bf00      	nop
   15e6a:	b002      	add	sp, #8
   15e6c:	bd10      	pop	{r4, pc}
   15e6e:	bf00      	nop
   15e70:	00015dd9 	.word	0x00015dd9
   15e74:	10000468 	.word	0x10000468

00015e78 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)1>()>:
  static void ClearInterrupts()
   15e78:	b510      	push	{r4, lr}
   15e7a:	b082      	sub	sp, #8
   15e7c:	4674      	mov	r4, lr
   15e7e:	4623      	mov	r3, r4
   15e80:	4619      	mov	r1, r3
   15e82:	4823      	ldr	r0, [pc, #140]	; (15f10 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)1>()+0x98>)
   15e84:	f000 fafc 	bl	16480 <__cyg_profile_func_enter>
    uint8_t channel = util::Value(port);
   15e88:	2301      	movs	r3, #1
   15e8a:	f88d 3007 	strb.w	r3, [sp, #7]
    tim_register[channel]->IR |= (1 << kRegMR0);
   15e8e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   15e92:	4a20      	ldr	r2, [pc, #128]	; (15f14 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)1>()+0x9c>)
   15e94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15e98:	681a      	ldr	r2, [r3, #0]
   15e9a:	f89d 3007 	ldrb.w	r3, [sp, #7]
   15e9e:	491d      	ldr	r1, [pc, #116]	; (15f14 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)1>()+0x9c>)
   15ea0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   15ea4:	f042 0201 	orr.w	r2, r2, #1
   15ea8:	601a      	str	r2, [r3, #0]
    tim_register[channel]->IR |= (1 << kRegMR1);
   15eaa:	f89d 3007 	ldrb.w	r3, [sp, #7]
   15eae:	4a19      	ldr	r2, [pc, #100]	; (15f14 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)1>()+0x9c>)
   15eb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15eb4:	681a      	ldr	r2, [r3, #0]
   15eb6:	f89d 3007 	ldrb.w	r3, [sp, #7]
   15eba:	4916      	ldr	r1, [pc, #88]	; (15f14 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)1>()+0x9c>)
   15ebc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   15ec0:	f042 0202 	orr.w	r2, r2, #2
   15ec4:	601a      	str	r2, [r3, #0]
    tim_register[channel]->IR |= (1 << kRegMR2);
   15ec6:	f89d 3007 	ldrb.w	r3, [sp, #7]
   15eca:	4a12      	ldr	r2, [pc, #72]	; (15f14 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)1>()+0x9c>)
   15ecc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15ed0:	681a      	ldr	r2, [r3, #0]
   15ed2:	f89d 3007 	ldrb.w	r3, [sp, #7]
   15ed6:	490f      	ldr	r1, [pc, #60]	; (15f14 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)1>()+0x9c>)
   15ed8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   15edc:	f042 0204 	orr.w	r2, r2, #4
   15ee0:	601a      	str	r2, [r3, #0]
    tim_register[channel]->IR |= (1 << kRegMR3);
   15ee2:	f89d 3007 	ldrb.w	r3, [sp, #7]
   15ee6:	4a0b      	ldr	r2, [pc, #44]	; (15f14 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)1>()+0x9c>)
   15ee8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15eec:	681a      	ldr	r2, [r3, #0]
   15eee:	f89d 3007 	ldrb.w	r3, [sp, #7]
   15ef2:	4908      	ldr	r1, [pc, #32]	; (15f14 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)1>()+0x9c>)
   15ef4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   15ef8:	f042 0208 	orr.w	r2, r2, #8
   15efc:	601a      	str	r2, [r3, #0]
   15efe:	4623      	mov	r3, r4
   15f00:	4619      	mov	r1, r3
   15f02:	4803      	ldr	r0, [pc, #12]	; (15f10 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)1>()+0x98>)
   15f04:	f000 fad0 	bl	164a8 <__cyg_profile_func_exit>
  }
   15f08:	bf00      	nop
   15f0a:	b002      	add	sp, #8
   15f0c:	bd10      	pop	{r4, pc}
   15f0e:	bf00      	nop
   15f10:	00015e79 	.word	0x00015e79
   15f14:	10000468 	.word	0x10000468

00015f18 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)2>()>:
  static void ClearInterrupts()
   15f18:	b510      	push	{r4, lr}
   15f1a:	b082      	sub	sp, #8
   15f1c:	4674      	mov	r4, lr
   15f1e:	4623      	mov	r3, r4
   15f20:	4619      	mov	r1, r3
   15f22:	4823      	ldr	r0, [pc, #140]	; (15fb0 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)2>()+0x98>)
   15f24:	f000 faac 	bl	16480 <__cyg_profile_func_enter>
    uint8_t channel = util::Value(port);
   15f28:	2302      	movs	r3, #2
   15f2a:	f88d 3007 	strb.w	r3, [sp, #7]
    tim_register[channel]->IR |= (1 << kRegMR0);
   15f2e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   15f32:	4a20      	ldr	r2, [pc, #128]	; (15fb4 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)2>()+0x9c>)
   15f34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15f38:	681a      	ldr	r2, [r3, #0]
   15f3a:	f89d 3007 	ldrb.w	r3, [sp, #7]
   15f3e:	491d      	ldr	r1, [pc, #116]	; (15fb4 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)2>()+0x9c>)
   15f40:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   15f44:	f042 0201 	orr.w	r2, r2, #1
   15f48:	601a      	str	r2, [r3, #0]
    tim_register[channel]->IR |= (1 << kRegMR1);
   15f4a:	f89d 3007 	ldrb.w	r3, [sp, #7]
   15f4e:	4a19      	ldr	r2, [pc, #100]	; (15fb4 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)2>()+0x9c>)
   15f50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15f54:	681a      	ldr	r2, [r3, #0]
   15f56:	f89d 3007 	ldrb.w	r3, [sp, #7]
   15f5a:	4916      	ldr	r1, [pc, #88]	; (15fb4 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)2>()+0x9c>)
   15f5c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   15f60:	f042 0202 	orr.w	r2, r2, #2
   15f64:	601a      	str	r2, [r3, #0]
    tim_register[channel]->IR |= (1 << kRegMR2);
   15f66:	f89d 3007 	ldrb.w	r3, [sp, #7]
   15f6a:	4a12      	ldr	r2, [pc, #72]	; (15fb4 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)2>()+0x9c>)
   15f6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15f70:	681a      	ldr	r2, [r3, #0]
   15f72:	f89d 3007 	ldrb.w	r3, [sp, #7]
   15f76:	490f      	ldr	r1, [pc, #60]	; (15fb4 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)2>()+0x9c>)
   15f78:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   15f7c:	f042 0204 	orr.w	r2, r2, #4
   15f80:	601a      	str	r2, [r3, #0]
    tim_register[channel]->IR |= (1 << kRegMR3);
   15f82:	f89d 3007 	ldrb.w	r3, [sp, #7]
   15f86:	4a0b      	ldr	r2, [pc, #44]	; (15fb4 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)2>()+0x9c>)
   15f88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15f8c:	681a      	ldr	r2, [r3, #0]
   15f8e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   15f92:	4908      	ldr	r1, [pc, #32]	; (15fb4 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)2>()+0x9c>)
   15f94:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   15f98:	f042 0208 	orr.w	r2, r2, #8
   15f9c:	601a      	str	r2, [r3, #0]
   15f9e:	4623      	mov	r3, r4
   15fa0:	4619      	mov	r1, r3
   15fa2:	4803      	ldr	r0, [pc, #12]	; (15fb0 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)2>()+0x98>)
   15fa4:	f000 fa80 	bl	164a8 <__cyg_profile_func_exit>
  }
   15fa8:	bf00      	nop
   15faa:	b002      	add	sp, #8
   15fac:	bd10      	pop	{r4, pc}
   15fae:	bf00      	nop
   15fb0:	00015f19 	.word	0x00015f19
   15fb4:	10000468 	.word	0x10000468

00015fb8 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)3>()>:
  static void ClearInterrupts()
   15fb8:	b510      	push	{r4, lr}
   15fba:	b082      	sub	sp, #8
   15fbc:	4674      	mov	r4, lr
   15fbe:	4623      	mov	r3, r4
   15fc0:	4619      	mov	r1, r3
   15fc2:	4823      	ldr	r0, [pc, #140]	; (16050 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)3>()+0x98>)
   15fc4:	f000 fa5c 	bl	16480 <__cyg_profile_func_enter>
    uint8_t channel = util::Value(port);
   15fc8:	2303      	movs	r3, #3
   15fca:	f88d 3007 	strb.w	r3, [sp, #7]
    tim_register[channel]->IR |= (1 << kRegMR0);
   15fce:	f89d 3007 	ldrb.w	r3, [sp, #7]
   15fd2:	4a20      	ldr	r2, [pc, #128]	; (16054 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)3>()+0x9c>)
   15fd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15fd8:	681a      	ldr	r2, [r3, #0]
   15fda:	f89d 3007 	ldrb.w	r3, [sp, #7]
   15fde:	491d      	ldr	r1, [pc, #116]	; (16054 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)3>()+0x9c>)
   15fe0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   15fe4:	f042 0201 	orr.w	r2, r2, #1
   15fe8:	601a      	str	r2, [r3, #0]
    tim_register[channel]->IR |= (1 << kRegMR1);
   15fea:	f89d 3007 	ldrb.w	r3, [sp, #7]
   15fee:	4a19      	ldr	r2, [pc, #100]	; (16054 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)3>()+0x9c>)
   15ff0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15ff4:	681a      	ldr	r2, [r3, #0]
   15ff6:	f89d 3007 	ldrb.w	r3, [sp, #7]
   15ffa:	4916      	ldr	r1, [pc, #88]	; (16054 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)3>()+0x9c>)
   15ffc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   16000:	f042 0202 	orr.w	r2, r2, #2
   16004:	601a      	str	r2, [r3, #0]
    tim_register[channel]->IR |= (1 << kRegMR2);
   16006:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1600a:	4a12      	ldr	r2, [pc, #72]	; (16054 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)3>()+0x9c>)
   1600c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16010:	681a      	ldr	r2, [r3, #0]
   16012:	f89d 3007 	ldrb.w	r3, [sp, #7]
   16016:	490f      	ldr	r1, [pc, #60]	; (16054 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)3>()+0x9c>)
   16018:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   1601c:	f042 0204 	orr.w	r2, r2, #4
   16020:	601a      	str	r2, [r3, #0]
    tim_register[channel]->IR |= (1 << kRegMR3);
   16022:	f89d 3007 	ldrb.w	r3, [sp, #7]
   16026:	4a0b      	ldr	r2, [pc, #44]	; (16054 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)3>()+0x9c>)
   16028:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1602c:	681a      	ldr	r2, [r3, #0]
   1602e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   16032:	4908      	ldr	r1, [pc, #32]	; (16054 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)3>()+0x9c>)
   16034:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   16038:	f042 0208 	orr.w	r2, r2, #8
   1603c:	601a      	str	r2, [r3, #0]
   1603e:	4623      	mov	r3, r4
   16040:	4619      	mov	r1, r3
   16042:	4803      	ldr	r0, [pc, #12]	; (16050 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)3>()+0x98>)
   16044:	f000 fa30 	bl	164a8 <__cyg_profile_func_exit>
  }
   16048:	bf00      	nop
   1604a:	b002      	add	sp, #8
   1604c:	bd10      	pop	{r4, pc}
   1604e:	bf00      	nop
   16050:	00015fb9 	.word	0x00015fb9
   16054:	10000468 	.word	0x10000468

00016058 <__static_initialization_and_destruction_0(int, int)>:
#pragma GCC diagnostic pop
    // main() shouldn't return, but if it does, we'll just enter an infinite
    // loop
    Halt();
  }
}
   16058:	b082      	sub	sp, #8
   1605a:	9001      	str	r0, [sp, #4]
   1605c:	9100      	str	r1, [sp, #0]
   1605e:	9b01      	ldr	r3, [sp, #4]
   16060:	2b01      	cmp	r3, #1
   16062:	d15d      	bne.n	16120 <__static_initialization_and_destruction_0(int, int)+0xc8>
   16064:	9b00      	ldr	r3, [sp, #0]
   16066:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1606a:	4293      	cmp	r3, r2
   1606c:	d158      	bne.n	16120 <__static_initialization_and_destruction_0(int, int)+0xc8>
  inline static volatile uint32_t * match[4][4] = {
   1606e:	4b2e      	ldr	r3, [pc, #184]	; (16128 <__static_initialization_and_destruction_0(int, int)+0xd0>)
   16070:	681b      	ldr	r3, [r3, #0]
   16072:	f003 0301 	and.w	r3, r3, #1
   16076:	2b00      	cmp	r3, #0
   16078:	d152      	bne.n	16120 <__static_initialization_and_destruction_0(int, int)+0xc8>
   1607a:	4b2b      	ldr	r3, [pc, #172]	; (16128 <__static_initialization_and_destruction_0(int, int)+0xd0>)
   1607c:	2201      	movs	r2, #1
   1607e:	601a      	str	r2, [r3, #0]
    [kTimer0] = { &tim_register[0]->MR0, &tim_register[0]->MR1,
   16080:	4b2a      	ldr	r3, [pc, #168]	; (1612c <__static_initialization_and_destruction_0(int, int)+0xd4>)
   16082:	681b      	ldr	r3, [r3, #0]
   16084:	3318      	adds	r3, #24
  };
   16086:	4a2a      	ldr	r2, [pc, #168]	; (16130 <__static_initialization_and_destruction_0(int, int)+0xd8>)
   16088:	6013      	str	r3, [r2, #0]
    [kTimer0] = { &tim_register[0]->MR0, &tim_register[0]->MR1,
   1608a:	4b28      	ldr	r3, [pc, #160]	; (1612c <__static_initialization_and_destruction_0(int, int)+0xd4>)
   1608c:	681b      	ldr	r3, [r3, #0]
   1608e:	331c      	adds	r3, #28
  };
   16090:	4a27      	ldr	r2, [pc, #156]	; (16130 <__static_initialization_and_destruction_0(int, int)+0xd8>)
   16092:	6053      	str	r3, [r2, #4]
                  &tim_register[0]->MR2, &tim_register[0]->MR3 },
   16094:	4b25      	ldr	r3, [pc, #148]	; (1612c <__static_initialization_and_destruction_0(int, int)+0xd4>)
   16096:	681b      	ldr	r3, [r3, #0]
   16098:	3320      	adds	r3, #32
  };
   1609a:	4a25      	ldr	r2, [pc, #148]	; (16130 <__static_initialization_and_destruction_0(int, int)+0xd8>)
   1609c:	6093      	str	r3, [r2, #8]
                  &tim_register[0]->MR2, &tim_register[0]->MR3 },
   1609e:	4b23      	ldr	r3, [pc, #140]	; (1612c <__static_initialization_and_destruction_0(int, int)+0xd4>)
   160a0:	681b      	ldr	r3, [r3, #0]
   160a2:	3324      	adds	r3, #36	; 0x24
  };
   160a4:	4a22      	ldr	r2, [pc, #136]	; (16130 <__static_initialization_and_destruction_0(int, int)+0xd8>)
   160a6:	60d3      	str	r3, [r2, #12]
    [kTimer1] = { &tim_register[1]->MR0, &tim_register[1]->MR1,
   160a8:	4b20      	ldr	r3, [pc, #128]	; (1612c <__static_initialization_and_destruction_0(int, int)+0xd4>)
   160aa:	685b      	ldr	r3, [r3, #4]
   160ac:	3318      	adds	r3, #24
  };
   160ae:	4a20      	ldr	r2, [pc, #128]	; (16130 <__static_initialization_and_destruction_0(int, int)+0xd8>)
   160b0:	6113      	str	r3, [r2, #16]
    [kTimer1] = { &tim_register[1]->MR0, &tim_register[1]->MR1,
   160b2:	4b1e      	ldr	r3, [pc, #120]	; (1612c <__static_initialization_and_destruction_0(int, int)+0xd4>)
   160b4:	685b      	ldr	r3, [r3, #4]
   160b6:	331c      	adds	r3, #28
  };
   160b8:	4a1d      	ldr	r2, [pc, #116]	; (16130 <__static_initialization_and_destruction_0(int, int)+0xd8>)
   160ba:	6153      	str	r3, [r2, #20]
                  &tim_register[1]->MR2, &tim_register[1]->MR3 },
   160bc:	4b1b      	ldr	r3, [pc, #108]	; (1612c <__static_initialization_and_destruction_0(int, int)+0xd4>)
   160be:	685b      	ldr	r3, [r3, #4]
   160c0:	3320      	adds	r3, #32
  };
   160c2:	4a1b      	ldr	r2, [pc, #108]	; (16130 <__static_initialization_and_destruction_0(int, int)+0xd8>)
   160c4:	6193      	str	r3, [r2, #24]
                  &tim_register[1]->MR2, &tim_register[1]->MR3 },
   160c6:	4b19      	ldr	r3, [pc, #100]	; (1612c <__static_initialization_and_destruction_0(int, int)+0xd4>)
   160c8:	685b      	ldr	r3, [r3, #4]
   160ca:	3324      	adds	r3, #36	; 0x24
  };
   160cc:	4a18      	ldr	r2, [pc, #96]	; (16130 <__static_initialization_and_destruction_0(int, int)+0xd8>)
   160ce:	61d3      	str	r3, [r2, #28]
    [kTimer2] = { &tim_register[2]->MR0, &tim_register[2]->MR1,
   160d0:	4b16      	ldr	r3, [pc, #88]	; (1612c <__static_initialization_and_destruction_0(int, int)+0xd4>)
   160d2:	689b      	ldr	r3, [r3, #8]
   160d4:	3318      	adds	r3, #24
  };
   160d6:	4a16      	ldr	r2, [pc, #88]	; (16130 <__static_initialization_and_destruction_0(int, int)+0xd8>)
   160d8:	6213      	str	r3, [r2, #32]
    [kTimer2] = { &tim_register[2]->MR0, &tim_register[2]->MR1,
   160da:	4b14      	ldr	r3, [pc, #80]	; (1612c <__static_initialization_and_destruction_0(int, int)+0xd4>)
   160dc:	689b      	ldr	r3, [r3, #8]
   160de:	331c      	adds	r3, #28
  };
   160e0:	4a13      	ldr	r2, [pc, #76]	; (16130 <__static_initialization_and_destruction_0(int, int)+0xd8>)
   160e2:	6253      	str	r3, [r2, #36]	; 0x24
                  &tim_register[2]->MR2, &tim_register[2]->MR3 },
   160e4:	4b11      	ldr	r3, [pc, #68]	; (1612c <__static_initialization_and_destruction_0(int, int)+0xd4>)
   160e6:	689b      	ldr	r3, [r3, #8]
   160e8:	3320      	adds	r3, #32
  };
   160ea:	4a11      	ldr	r2, [pc, #68]	; (16130 <__static_initialization_and_destruction_0(int, int)+0xd8>)
   160ec:	6293      	str	r3, [r2, #40]	; 0x28
                  &tim_register[2]->MR2, &tim_register[2]->MR3 },
   160ee:	4b0f      	ldr	r3, [pc, #60]	; (1612c <__static_initialization_and_destruction_0(int, int)+0xd4>)
   160f0:	689b      	ldr	r3, [r3, #8]
   160f2:	3324      	adds	r3, #36	; 0x24
  };
   160f4:	4a0e      	ldr	r2, [pc, #56]	; (16130 <__static_initialization_and_destruction_0(int, int)+0xd8>)
   160f6:	62d3      	str	r3, [r2, #44]	; 0x2c
    [kTimer3] = { &tim_register[3]->MR0, &tim_register[3]->MR1,
   160f8:	4b0c      	ldr	r3, [pc, #48]	; (1612c <__static_initialization_and_destruction_0(int, int)+0xd4>)
   160fa:	68db      	ldr	r3, [r3, #12]
   160fc:	3318      	adds	r3, #24
  };
   160fe:	4a0c      	ldr	r2, [pc, #48]	; (16130 <__static_initialization_and_destruction_0(int, int)+0xd8>)
   16100:	6313      	str	r3, [r2, #48]	; 0x30
    [kTimer3] = { &tim_register[3]->MR0, &tim_register[3]->MR1,
   16102:	4b0a      	ldr	r3, [pc, #40]	; (1612c <__static_initialization_and_destruction_0(int, int)+0xd4>)
   16104:	68db      	ldr	r3, [r3, #12]
   16106:	331c      	adds	r3, #28
  };
   16108:	4a09      	ldr	r2, [pc, #36]	; (16130 <__static_initialization_and_destruction_0(int, int)+0xd8>)
   1610a:	6353      	str	r3, [r2, #52]	; 0x34
                  &tim_register[3]->MR2, &tim_register[3]->MR3 }
   1610c:	4b07      	ldr	r3, [pc, #28]	; (1612c <__static_initialization_and_destruction_0(int, int)+0xd4>)
   1610e:	68db      	ldr	r3, [r3, #12]
   16110:	3320      	adds	r3, #32
  };
   16112:	4a07      	ldr	r2, [pc, #28]	; (16130 <__static_initialization_and_destruction_0(int, int)+0xd8>)
   16114:	6393      	str	r3, [r2, #56]	; 0x38
                  &tim_register[3]->MR2, &tim_register[3]->MR3 }
   16116:	4b05      	ldr	r3, [pc, #20]	; (1612c <__static_initialization_and_destruction_0(int, int)+0xd4>)
   16118:	68db      	ldr	r3, [r3, #12]
   1611a:	3324      	adds	r3, #36	; 0x24
  };
   1611c:	4a04      	ldr	r2, [pc, #16]	; (16130 <__static_initialization_and_destruction_0(int, int)+0xd8>)
   1611e:	63d3      	str	r3, [r2, #60]	; 0x3c
   16120:	bf00      	nop
   16122:	b002      	add	sp, #8
   16124:	4770      	bx	lr
   16126:	bf00      	nop
   16128:	10001410 	.word	0x10001410
   1612c:	10000468 	.word	0x10000468
   16130:	100013c0 	.word	0x100013c0

00016134 <_GLOBAL__sub_I_UptimeRTOS>:
   16134:	b508      	push	{r3, lr}
   16136:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1613a:	2001      	movs	r0, #1
   1613c:	f7ff ff8c 	bl	16058 <__static_initialization_and_destruction_0(int, int)>
   16140:	bd08      	pop	{r3, pc}
   16142:	Address 0x0000000000016142 is out of bounds.


00016144 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
   16144:	b082      	sub	sp, #8
   16146:	4603      	mov	r3, r0
   16148:	f88d 3007 	strb.w	r3, [sp, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
   1614c:	f99d 3007 	ldrsb.w	r3, [sp, #7]
   16150:	f003 021f 	and.w	r2, r3, #31
   16154:	4905      	ldr	r1, [pc, #20]	; (1616c <NVIC_EnableIRQ+0x28>)
   16156:	f99d 3007 	ldrsb.w	r3, [sp, #7]
   1615a:	095b      	lsrs	r3, r3, #5
   1615c:	2001      	movs	r0, #1
   1615e:	fa00 f202 	lsl.w	r2, r0, r2
   16162:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   16166:	bf00      	nop
   16168:	b002      	add	sp, #8
   1616a:	4770      	bx	lr
   1616c:	e000e100 	.word	0xe000e100

00016170 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
   16170:	b082      	sub	sp, #8
   16172:	4603      	mov	r3, r0
   16174:	9100      	str	r1, [sp, #0]
   16176:	f88d 3007 	strb.w	r3, [sp, #7]
  if ((int32_t)(IRQn) < 0)
   1617a:	f99d 3007 	ldrsb.w	r3, [sp, #7]
   1617e:	2b00      	cmp	r3, #0
   16180:	da0c      	bge.n	1619c <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   16182:	9b00      	ldr	r3, [sp, #0]
   16184:	b2da      	uxtb	r2, r3
   16186:	490d      	ldr	r1, [pc, #52]	; (161bc <NVIC_SetPriority+0x4c>)
   16188:	f99d 3007 	ldrsb.w	r3, [sp, #7]
   1618c:	f003 030f 	and.w	r3, r3, #15
   16190:	3b04      	subs	r3, #4
   16192:	0152      	lsls	r2, r2, #5
   16194:	b2d2      	uxtb	r2, r2
   16196:	440b      	add	r3, r1
   16198:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
   1619a:	e00b      	b.n	161b4 <NVIC_SetPriority+0x44>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1619c:	9b00      	ldr	r3, [sp, #0]
   1619e:	b2db      	uxtb	r3, r3
   161a0:	4a07      	ldr	r2, [pc, #28]	; (161c0 <NVIC_SetPriority+0x50>)
   161a2:	f99d 1007 	ldrsb.w	r1, [sp, #7]
   161a6:	4608      	mov	r0, r1
   161a8:	015b      	lsls	r3, r3, #5
   161aa:	b2d9      	uxtb	r1, r3
   161ac:	1813      	adds	r3, r2, r0
   161ae:	460a      	mov	r2, r1
   161b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
   161b4:	bf00      	nop
   161b6:	b002      	add	sp, #8
   161b8:	4770      	bx	lr
   161ba:	bf00      	nop
   161bc:	e000ed00 	.word	0xe000ed00
   161c0:	e000e100 	.word	0xe000e100

000161c4 <InterruptLookupHandler>:
{
   161c4:	b500      	push	{lr}
   161c6:	b085      	sub	sp, #20
  uint8_t active_isr = (SCB->ICSR & 0xFF);
   161c8:	4b12      	ldr	r3, [pc, #72]	; (16214 <InterruptLookupHandler+0x50>)
   161ca:	685b      	ldr	r3, [r3, #4]
   161cc:	f88d 300f 	strb.w	r3, [sp, #15]
  IsrPointer isr     = dynamic_isr_vector_table[active_isr];
   161d0:	f89d 300f 	ldrb.w	r3, [sp, #15]
   161d4:	4a10      	ldr	r2, [pc, #64]	; (16218 <InterruptLookupHandler+0x54>)
   161d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   161da:	9302      	str	r3, [sp, #8]
  SJ2_ASSERT_FATAL(isr != InterruptLookupHandler,
   161dc:	9b02      	ldr	r3, [sp, #8]
   161de:	4a0f      	ldr	r2, [pc, #60]	; (1621c <InterruptLookupHandler+0x58>)
   161e0:	4293      	cmp	r3, r2
   161e2:	d110      	bne.n	16206 <InterruptLookupHandler+0x42>
   161e4:	f89d 300f 	ldrb.w	r3, [sp, #15]
   161e8:	9300      	str	r3, [sp, #0]
   161ea:	23dd      	movs	r3, #221	; 0xdd
   161ec:	4a0c      	ldr	r2, [pc, #48]	; (16220 <InterruptLookupHandler+0x5c>)
   161ee:	490d      	ldr	r1, [pc, #52]	; (16224 <InterruptLookupHandler+0x60>)
   161f0:	480d      	ldr	r0, [pc, #52]	; (16228 <InterruptLookupHandler+0x64>)
   161f2:	f001 fbc1 	bl	17978 <printf>
   161f6:	480d      	ldr	r0, [pc, #52]	; (1622c <InterruptLookupHandler+0x68>)
   161f8:	f000 f912 	bl	16420 <puts>
   161fc:	2100      	movs	r1, #0
   161fe:	2001      	movs	r0, #1
   16200:	f7fa fe60 	bl	10ec4 <debug::PrintBacktrace(bool, void*)>
   16204:	e7fe      	b.n	16204 <InterruptLookupHandler+0x40>
  isr();
   16206:	9b02      	ldr	r3, [sp, #8]
   16208:	4798      	blx	r3
}
   1620a:	bf00      	nop
   1620c:	b005      	add	sp, #20
   1620e:	f85d fb04 	ldr.w	pc, [sp], #4
   16212:	bf00      	nop
   16214:	e000ed00 	.word	0xe000ed00
   16218:	100004f4 	.word	0x100004f4
   1621c:	000161c5 	.word	0x000161c5
   16220:	0001a8f0 	.word	0x0001a8f0
   16224:	0001a8e0 	.word	0x0001a8e0
   16228:	0001a784 	.word	0x0001a784
   1622c:	0001a830 	.word	0x0001a830

00016230 <RegisterIsr(IRQn, void (*)(), bool, long)>:
{
   16230:	b500      	push	{lr}
   16232:	b085      	sub	sp, #20
   16234:	9102      	str	r1, [sp, #8]
   16236:	9301      	str	r3, [sp, #4]
   16238:	4603      	mov	r3, r0
   1623a:	f88d 300f 	strb.w	r3, [sp, #15]
   1623e:	4613      	mov	r3, r2
   16240:	f88d 300e 	strb.w	r3, [sp, #14]
  dynamic_isr_vector_table[irq + kIrqOffset] = isr;
   16244:	f99d 300f 	ldrsb.w	r3, [sp, #15]
   16248:	3310      	adds	r3, #16
   1624a:	490f      	ldr	r1, [pc, #60]	; (16288 <RegisterIsr(IRQn, void (*)(), bool, long)+0x58>)
   1624c:	9a02      	ldr	r2, [sp, #8]
   1624e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  if (enable_interrupt && irq >= 0)
   16252:	f89d 300e 	ldrb.w	r3, [sp, #14]
   16256:	2b00      	cmp	r3, #0
   16258:	d008      	beq.n	1626c <RegisterIsr(IRQn, void (*)(), bool, long)+0x3c>
   1625a:	f99d 300f 	ldrsb.w	r3, [sp, #15]
   1625e:	2b00      	cmp	r3, #0
   16260:	db04      	blt.n	1626c <RegisterIsr(IRQn, void (*)(), bool, long)+0x3c>
    NVIC_EnableIRQ(irq);
   16262:	f99d 300f 	ldrsb.w	r3, [sp, #15]
   16266:	4618      	mov	r0, r3
   16268:	f7ff ff6c 	bl	16144 <NVIC_EnableIRQ>
  if (priority > -1)
   1626c:	9b01      	ldr	r3, [sp, #4]
   1626e:	2b00      	cmp	r3, #0
   16270:	db06      	blt.n	16280 <RegisterIsr(IRQn, void (*)(), bool, long)+0x50>
    NVIC_SetPriority(irq, priority);
   16272:	9a01      	ldr	r2, [sp, #4]
   16274:	f99d 300f 	ldrsb.w	r3, [sp, #15]
   16278:	4611      	mov	r1, r2
   1627a:	4618      	mov	r0, r3
   1627c:	f7ff ff78 	bl	16170 <NVIC_SetPriority>
}
   16280:	bf00      	nop
   16282:	b005      	add	sp, #20
   16284:	f85d fb04 	ldr.w	pc, [sp], #4
   16288:	100004f4 	.word	0x100004f4

0001628c <GetRegistersFromStack>:
{
   1628c:	b500      	push	{lr}
   1628e:	b08d      	sub	sp, #52	; 0x34
   16290:	9003      	str	r0, [sp, #12]
  volatile uint32_t r0  = fault_stack_address[0];
   16292:	9b03      	ldr	r3, [sp, #12]
   16294:	681b      	ldr	r3, [r3, #0]
   16296:	930b      	str	r3, [sp, #44]	; 0x2c
  volatile uint32_t r1  = fault_stack_address[1];
   16298:	9b03      	ldr	r3, [sp, #12]
   1629a:	685b      	ldr	r3, [r3, #4]
   1629c:	930a      	str	r3, [sp, #40]	; 0x28
  volatile uint32_t r2  = fault_stack_address[2];
   1629e:	9b03      	ldr	r3, [sp, #12]
   162a0:	689b      	ldr	r3, [r3, #8]
   162a2:	9309      	str	r3, [sp, #36]	; 0x24
  volatile uint32_t r3  = fault_stack_address[3];
   162a4:	9b03      	ldr	r3, [sp, #12]
   162a6:	68db      	ldr	r3, [r3, #12]
   162a8:	9308      	str	r3, [sp, #32]
  volatile uint32_t r12 = fault_stack_address[4];
   162aa:	9b03      	ldr	r3, [sp, #12]
   162ac:	691b      	ldr	r3, [r3, #16]
   162ae:	9307      	str	r3, [sp, #28]
  volatile uint32_t lr = fault_stack_address[5];
   162b0:	9b03      	ldr	r3, [sp, #12]
   162b2:	695b      	ldr	r3, [r3, #20]
   162b4:	9306      	str	r3, [sp, #24]
  volatile uint32_t pc = fault_stack_address[6];
   162b6:	9b03      	ldr	r3, [sp, #12]
   162b8:	699b      	ldr	r3, [r3, #24]
   162ba:	9305      	str	r3, [sp, #20]
  volatile uint32_t psr = fault_stack_address[7];
   162bc:	9b03      	ldr	r3, [sp, #12]
   162be:	69db      	ldr	r3, [r3, #28]
   162c0:	9304      	str	r3, [sp, #16]
  printf(SJ2_BACKGROUND_RED "Hard Fault Exception Occurred!\n" SJ2_COLOR_RESET);
   162c2:	480d      	ldr	r0, [pc, #52]	; (162f8 <GetRegistersFromStack+0x6c>)
   162c4:	f001 fb58 	bl	17978 <printf>
  printf("r0: 0x%08" PRIX32 ", r1: 0x%08" PRIX32
   162c8:	990b      	ldr	r1, [sp, #44]	; 0x2c
   162ca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   162cc:	9809      	ldr	r0, [sp, #36]	; 0x24
   162ce:	9b08      	ldr	r3, [sp, #32]
   162d0:	9300      	str	r3, [sp, #0]
   162d2:	4603      	mov	r3, r0
   162d4:	4809      	ldr	r0, [pc, #36]	; (162fc <GetRegistersFromStack+0x70>)
   162d6:	f001 fb4f 	bl	17978 <printf>
  printf("r12: 0x%08" PRIX32 ", lr: 0x%08" PRIX32
   162da:	9907      	ldr	r1, [sp, #28]
   162dc:	9a06      	ldr	r2, [sp, #24]
   162de:	9805      	ldr	r0, [sp, #20]
   162e0:	9b04      	ldr	r3, [sp, #16]
   162e2:	9300      	str	r3, [sp, #0]
   162e4:	4603      	mov	r3, r0
   162e6:	4806      	ldr	r0, [pc, #24]	; (16300 <GetRegistersFromStack+0x74>)
   162e8:	f001 fb46 	bl	17978 <printf>
  debug::PrintBacktrace(true, reinterpret_cast<void *>(pc));
   162ec:	9b05      	ldr	r3, [sp, #20]
   162ee:	4619      	mov	r1, r3
   162f0:	2001      	movs	r0, #1
   162f2:	f7fa fde7 	bl	10ec4 <debug::PrintBacktrace(bool, void*)>
   162f6:	e7fe      	b.n	162f6 <GetRegistersFromStack+0x6a>
   162f8:	0001a848 	.word	0x0001a848
   162fc:	0001a874 	.word	0x0001a874
   16300:	0001a8a8 	.word	0x0001a8a8

00016304 <FirmwareStdOut(int)>:
}
Stdout out = HostWrite;
Stdin in   = HostRead;
#else
int FirmwareStdOut(int data)
{
   16304:	b530      	push	{r4, r5, lr}
   16306:	b083      	sub	sp, #12
   16308:	4675      	mov	r5, lr
   1630a:	9001      	str	r0, [sp, #4]
   1630c:	462b      	mov	r3, r5
   1630e:	4619      	mov	r1, r3
   16310:	4809      	ldr	r0, [pc, #36]	; (16338 <FirmwareStdOut(int)+0x34>)
   16312:	f000 f8b5 	bl	16480 <__cyg_profile_func_enter>
  uart0.Send(static_cast<uint8_t>(data));
   16316:	9b01      	ldr	r3, [sp, #4]
   16318:	b2db      	uxtb	r3, r3
   1631a:	4619      	mov	r1, r3
   1631c:	4807      	ldr	r0, [pc, #28]	; (1633c <FirmwareStdOut(int)+0x38>)
   1631e:	f7ff f835 	bl	1538c <Uart::Send(unsigned char)>
  return 1;
   16322:	2401      	movs	r4, #1
   16324:	462b      	mov	r3, r5
   16326:	4619      	mov	r1, r3
   16328:	4803      	ldr	r0, [pc, #12]	; (16338 <FirmwareStdOut(int)+0x34>)
   1632a:	f000 f8bd 	bl	164a8 <__cyg_profile_func_exit>
   1632e:	4623      	mov	r3, r4
}
   16330:	4618      	mov	r0, r3
   16332:	b003      	add	sp, #12
   16334:	bd30      	pop	{r4, r5, pc}
   16336:	bf00      	nop
   16338:	00016305 	.word	0x00016305
   1633c:	100004c8 	.word	0x100004c8

00016340 <_exit>:
  }
  // Dummy implementation of exit with return code placed into
  // Arm register r3
  // NOLINTNEXTLINE(readability-identifier-naming)
  void _exit([[maybe_unused]] int rc)
  {
   16340:	b500      	push	{lr}
   16342:	b083      	sub	sp, #12
   16344:	4673      	mov	r3, lr
   16346:	9001      	str	r0, [sp, #4]
   16348:	4619      	mov	r1, r3
   1634a:	4802      	ldr	r0, [pc, #8]	; (16354 <_exit+0x14>)
   1634c:	f000 f898 	bl	16480 <__cyg_profile_func_enter>
    while (1)
    {
      continue;
   16350:	bf00      	nop
    while (1)
   16352:	e7fd      	b.n	16350 <_exit+0x10>
   16354:	00016341 	.word	0x00016341

00016358 <_getpid>:
    }
  }
  // Dummy implementation of getpid
  // NOLINTNEXTLINE(readability-identifier-naming)
  int _getpid()
  {
   16358:	b538      	push	{r3, r4, r5, lr}
   1635a:	4675      	mov	r5, lr
   1635c:	462b      	mov	r3, r5
   1635e:	4619      	mov	r1, r3
   16360:	4805      	ldr	r0, [pc, #20]	; (16378 <_getpid+0x20>)
   16362:	f000 f88d 	bl	16480 <__cyg_profile_func_enter>
    return 1;
   16366:	2401      	movs	r4, #1
   16368:	462b      	mov	r3, r5
   1636a:	4619      	mov	r1, r3
   1636c:	4802      	ldr	r0, [pc, #8]	; (16378 <_getpid+0x20>)
   1636e:	f000 f89b 	bl	164a8 <__cyg_profile_func_exit>
   16372:	4623      	mov	r3, r4
  }
   16374:	4618      	mov	r0, r3
   16376:	bd38      	pop	{r3, r4, r5, pc}
   16378:	00016359 	.word	0x00016359

0001637c <_kill>:
  // Dummy implementation of kill
  // NOLINTNEXTLINE(readability-identifier-naming)
  int _kill(int, int)
  {
   1637c:	b530      	push	{r4, r5, lr}
   1637e:	b083      	sub	sp, #12
   16380:	4675      	mov	r5, lr
   16382:	9001      	str	r0, [sp, #4]
   16384:	9100      	str	r1, [sp, #0]
   16386:	462b      	mov	r3, r5
   16388:	4619      	mov	r1, r3
   1638a:	4807      	ldr	r0, [pc, #28]	; (163a8 <_kill+0x2c>)
   1638c:	f000 f878 	bl	16480 <__cyg_profile_func_enter>
    return -1;
   16390:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   16394:	462b      	mov	r3, r5
   16396:	4619      	mov	r1, r3
   16398:	4803      	ldr	r0, [pc, #12]	; (163a8 <_kill+0x2c>)
   1639a:	f000 f885 	bl	164a8 <__cyg_profile_func_exit>
   1639e:	4623      	mov	r3, r4
  }
   163a0:	4618      	mov	r0, r3
   163a2:	b003      	add	sp, #12
   163a4:	bd30      	pop	{r4, r5, pc}
   163a6:	bf00      	nop
   163a8:	0001637d 	.word	0x0001637d

000163ac <_putchar>:
    }
    return length;
  }
  // Needed by third party printf library
  void _putchar(char character)  // NOLINT
  {
   163ac:	b510      	push	{r4, lr}
   163ae:	b082      	sub	sp, #8
   163b0:	4674      	mov	r4, lr
   163b2:	4603      	mov	r3, r0
   163b4:	f88d 3007 	strb.w	r3, [sp, #7]
   163b8:	4623      	mov	r3, r4
   163ba:	4619      	mov	r1, r3
   163bc:	4808      	ldr	r0, [pc, #32]	; (163e0 <_putchar+0x34>)
   163be:	f000 f85f 	bl	16480 <__cyg_profile_func_enter>
    out(character);
   163c2:	4b08      	ldr	r3, [pc, #32]	; (163e4 <_putchar+0x38>)
   163c4:	681b      	ldr	r3, [r3, #0]
   163c6:	f89d 2007 	ldrb.w	r2, [sp, #7]
   163ca:	4610      	mov	r0, r2
   163cc:	4798      	blx	r3
   163ce:	4623      	mov	r3, r4
   163d0:	4619      	mov	r1, r3
   163d2:	4803      	ldr	r0, [pc, #12]	; (163e0 <_putchar+0x34>)
   163d4:	f000 f868 	bl	164a8 <__cyg_profile_func_exit>
  }
   163d8:	bf00      	nop
   163da:	b002      	add	sp, #8
   163dc:	bd10      	pop	{r4, pc}
   163de:	bf00      	nop
   163e0:	000163ad 	.word	0x000163ad
   163e4:	100005d8 	.word	0x100005d8

000163e8 <putchar>:

  // Overload default libnano putchar() with a more optimal version that does
  // not use dynamic memory
  int putchar(int character)  // NOLINT
  {
   163e8:	b530      	push	{r4, r5, lr}
   163ea:	b083      	sub	sp, #12
   163ec:	4674      	mov	r4, lr
   163ee:	9001      	str	r0, [sp, #4]
   163f0:	4623      	mov	r3, r4
   163f2:	4619      	mov	r1, r3
   163f4:	4808      	ldr	r0, [pc, #32]	; (16418 <putchar+0x30>)
   163f6:	f000 f843 	bl	16480 <__cyg_profile_func_enter>
    return out(character);
   163fa:	4b08      	ldr	r3, [pc, #32]	; (1641c <putchar+0x34>)
   163fc:	681b      	ldr	r3, [r3, #0]
   163fe:	9801      	ldr	r0, [sp, #4]
   16400:	4798      	blx	r3
   16402:	4605      	mov	r5, r0
   16404:	4623      	mov	r3, r4
   16406:	4619      	mov	r1, r3
   16408:	4803      	ldr	r0, [pc, #12]	; (16418 <putchar+0x30>)
   1640a:	f000 f84d 	bl	164a8 <__cyg_profile_func_exit>
   1640e:	462b      	mov	r3, r5
  }
   16410:	4618      	mov	r0, r3
   16412:	b003      	add	sp, #12
   16414:	bd30      	pop	{r4, r5, pc}
   16416:	bf00      	nop
   16418:	000163e9 	.word	0x000163e9
   1641c:	100005d8 	.word	0x100005d8

00016420 <puts>:

  // Overload default libnano puts() with a more optimal version that does
  // not use dynamic memory
  int puts(const char * str)  // NOLINT
  {
   16420:	b530      	push	{r4, r5, lr}
   16422:	b085      	sub	sp, #20
   16424:	4675      	mov	r5, lr
   16426:	9001      	str	r0, [sp, #4]
   16428:	462b      	mov	r3, r5
   1642a:	4619      	mov	r1, r3
   1642c:	4812      	ldr	r0, [pc, #72]	; (16478 <puts+0x58>)
   1642e:	f000 f827 	bl	16480 <__cyg_profile_func_enter>
    int i;
    for (i = 0; str[i] != '\0'; i++)
   16432:	2300      	movs	r3, #0
   16434:	9303      	str	r3, [sp, #12]
   16436:	9b03      	ldr	r3, [sp, #12]
   16438:	9a01      	ldr	r2, [sp, #4]
   1643a:	4413      	add	r3, r2
   1643c:	781b      	ldrb	r3, [r3, #0]
   1643e:	2b00      	cmp	r3, #0
   16440:	d00b      	beq.n	1645a <puts+0x3a>
    {
      out(str[i]);
   16442:	4b0e      	ldr	r3, [pc, #56]	; (1647c <puts+0x5c>)
   16444:	681b      	ldr	r3, [r3, #0]
   16446:	9a03      	ldr	r2, [sp, #12]
   16448:	9901      	ldr	r1, [sp, #4]
   1644a:	440a      	add	r2, r1
   1644c:	7812      	ldrb	r2, [r2, #0]
   1644e:	4610      	mov	r0, r2
   16450:	4798      	blx	r3
    for (i = 0; str[i] != '\0'; i++)
   16452:	9b03      	ldr	r3, [sp, #12]
   16454:	3301      	adds	r3, #1
   16456:	9303      	str	r3, [sp, #12]
   16458:	e7ed      	b.n	16436 <puts+0x16>
    }
    out('\n');
   1645a:	4b08      	ldr	r3, [pc, #32]	; (1647c <puts+0x5c>)
   1645c:	681b      	ldr	r3, [r3, #0]
   1645e:	200a      	movs	r0, #10
   16460:	4798      	blx	r3
    return i;
   16462:	9c03      	ldr	r4, [sp, #12]
   16464:	462b      	mov	r3, r5
   16466:	4619      	mov	r1, r3
   16468:	4803      	ldr	r0, [pc, #12]	; (16478 <puts+0x58>)
   1646a:	f000 f81d 	bl	164a8 <__cyg_profile_func_exit>
   1646e:	4623      	mov	r3, r4
  }
   16470:	4618      	mov	r0, r3
   16472:	b005      	add	sp, #20
   16474:	bd30      	pop	{r4, r5, pc}
   16476:	bf00      	nop
   16478:	00016421 	.word	0x00016421
   1647c:	100005d8 	.word	0x100005d8

00016480 <__cyg_profile_func_enter>:
  // =============================
  void * stack_trace[config::kBacktraceDepth] = { nullptr };
  size_t stack_depth = 0;

  void __cyg_profile_func_enter(void *, void * call_site)  // NOLINT
  {
   16480:	b082      	sub	sp, #8
   16482:	9001      	str	r0, [sp, #4]
   16484:	9100      	str	r1, [sp, #0]
    stack_trace[stack_depth++] = call_site;
   16486:	9a00      	ldr	r2, [sp, #0]
   16488:	4b05      	ldr	r3, [pc, #20]	; (164a0 <__cyg_profile_func_enter+0x20>)
   1648a:	681b      	ldr	r3, [r3, #0]
   1648c:	1c59      	adds	r1, r3, #1
   1648e:	4804      	ldr	r0, [pc, #16]	; (164a0 <__cyg_profile_func_enter+0x20>)
   16490:	6001      	str	r1, [r0, #0]
   16492:	4904      	ldr	r1, [pc, #16]	; (164a4 <__cyg_profile_func_enter+0x24>)
   16494:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
   16498:	bf00      	nop
   1649a:	b002      	add	sp, #8
   1649c:	4770      	bx	lr
   1649e:	bf00      	nop
   164a0:	10001514 	.word	0x10001514
   164a4:	10001414 	.word	0x10001414

000164a8 <__cyg_profile_func_exit>:

  void __cyg_profile_func_exit(void *, void *)  // NOLINT
  {
   164a8:	b082      	sub	sp, #8
   164aa:	9001      	str	r0, [sp, #4]
   164ac:	9100      	str	r1, [sp, #0]
    stack_depth--;
   164ae:	4b04      	ldr	r3, [pc, #16]	; (164c0 <__cyg_profile_func_exit+0x18>)
   164b0:	681b      	ldr	r3, [r3, #0]
   164b2:	3b01      	subs	r3, #1
   164b4:	4a02      	ldr	r2, [pc, #8]	; (164c0 <__cyg_profile_func_exit+0x18>)
   164b6:	6013      	str	r3, [r2, #0]
  }
   164b8:	bf00      	nop
   164ba:	b002      	add	sp, #8
   164bc:	4770      	bx	lr
   164be:	bf00      	nop
   164c0:	10001514 	.word	0x10001514

000164c4 <GetStackTrace()>:
}

void ** GetStackTrace()
{
   164c4:	b538      	push	{r3, r4, r5, lr}
   164c6:	4675      	mov	r5, lr
   164c8:	462b      	mov	r3, r5
   164ca:	4619      	mov	r1, r3
   164cc:	4805      	ldr	r0, [pc, #20]	; (164e4 <GetStackTrace()+0x20>)
   164ce:	f7ff ffd7 	bl	16480 <__cyg_profile_func_enter>
  return stack_trace;
   164d2:	4c05      	ldr	r4, [pc, #20]	; (164e8 <GetStackTrace()+0x24>)
   164d4:	462b      	mov	r3, r5
   164d6:	4619      	mov	r1, r3
   164d8:	4802      	ldr	r0, [pc, #8]	; (164e4 <GetStackTrace()+0x20>)
   164da:	f7ff ffe5 	bl	164a8 <__cyg_profile_func_exit>
   164de:	4623      	mov	r3, r4
}
   164e0:	4618      	mov	r0, r3
   164e2:	bd38      	pop	{r3, r4, r5, pc}
   164e4:	000164c5 	.word	0x000164c5
   164e8:	10001414 	.word	0x10001414

000164ec <GetStackDepth()>:

size_t GetStackDepth()
{
   164ec:	b538      	push	{r3, r4, r5, lr}
   164ee:	4675      	mov	r5, lr
   164f0:	462b      	mov	r3, r5
   164f2:	4619      	mov	r1, r3
   164f4:	4806      	ldr	r0, [pc, #24]	; (16510 <GetStackDepth()+0x24>)
   164f6:	f7ff ffc3 	bl	16480 <__cyg_profile_func_enter>
  return stack_depth;
   164fa:	4b06      	ldr	r3, [pc, #24]	; (16514 <GetStackDepth()+0x28>)
   164fc:	681c      	ldr	r4, [r3, #0]
   164fe:	462b      	mov	r3, r5
   16500:	4619      	mov	r1, r3
   16502:	4803      	ldr	r0, [pc, #12]	; (16510 <GetStackDepth()+0x24>)
   16504:	f7ff ffd0 	bl	164a8 <__cyg_profile_func_exit>
   16508:	4623      	mov	r3, r4
}
   1650a:	4618      	mov	r0, r3
   1650c:	bd38      	pop	{r3, r4, r5, pc}
   1650e:	bf00      	nop
   16510:	000164ed 	.word	0x000164ed
   16514:	10001514 	.word	0x10001514

00016518 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
   16518:	b510      	push	{r4, lr}
   1651a:	b084      	sub	sp, #16
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
   1651c:	4b29      	ldr	r3, [pc, #164]	; (165c4 <vTaskSwitchContext+0xac>)
   1651e:	681b      	ldr	r3, [r3, #0]
   16520:	2b00      	cmp	r3, #0
   16522:	d003      	beq.n	1652c <vTaskSwitchContext+0x14>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
   16524:	4b28      	ldr	r3, [pc, #160]	; (165c8 <vTaskSwitchContext+0xb0>)
   16526:	2201      	movs	r2, #1
   16528:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
   1652a:	e047      	b.n	165bc <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
   1652c:	4b26      	ldr	r3, [pc, #152]	; (165c8 <vTaskSwitchContext+0xb0>)
   1652e:	2200      	movs	r2, #0
   16530:	601a      	str	r2, [r3, #0]
					ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
   16532:	f7ff fa8d 	bl	15a50 <UptimeRTOS>
   16536:	4603      	mov	r3, r0
   16538:	460c      	mov	r4, r1
   1653a:	461a      	mov	r2, r3
   1653c:	4b23      	ldr	r3, [pc, #140]	; (165cc <vTaskSwitchContext+0xb4>)
   1653e:	601a      	str	r2, [r3, #0]
				if( ulTotalRunTime > ulTaskSwitchedInTime )
   16540:	4b22      	ldr	r3, [pc, #136]	; (165cc <vTaskSwitchContext+0xb4>)
   16542:	681a      	ldr	r2, [r3, #0]
   16544:	4b22      	ldr	r3, [pc, #136]	; (165d0 <vTaskSwitchContext+0xb8>)
   16546:	681b      	ldr	r3, [r3, #0]
   16548:	429a      	cmp	r2, r3
   1654a:	d909      	bls.n	16560 <vTaskSwitchContext+0x48>
					pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
   1654c:	4b21      	ldr	r3, [pc, #132]	; (165d4 <vTaskSwitchContext+0xbc>)
   1654e:	681b      	ldr	r3, [r3, #0]
   16550:	6d59      	ldr	r1, [r3, #84]	; 0x54
   16552:	4a1e      	ldr	r2, [pc, #120]	; (165cc <vTaskSwitchContext+0xb4>)
   16554:	6810      	ldr	r0, [r2, #0]
   16556:	4a1e      	ldr	r2, [pc, #120]	; (165d0 <vTaskSwitchContext+0xb8>)
   16558:	6812      	ldr	r2, [r2, #0]
   1655a:	1a82      	subs	r2, r0, r2
   1655c:	440a      	add	r2, r1
   1655e:	655a      	str	r2, [r3, #84]	; 0x54
				ulTaskSwitchedInTime = ulTotalRunTime;
   16560:	4b1a      	ldr	r3, [pc, #104]	; (165cc <vTaskSwitchContext+0xb4>)
   16562:	681b      	ldr	r3, [r3, #0]
   16564:	4a1a      	ldr	r2, [pc, #104]	; (165d0 <vTaskSwitchContext+0xb8>)
   16566:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
   16568:	4b1b      	ldr	r3, [pc, #108]	; (165d8 <vTaskSwitchContext+0xc0>)
   1656a:	681b      	ldr	r3, [r3, #0]
   1656c:	9301      	str	r3, [sp, #4]
	/* Generic helper function. */
	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitmap )
	{
	uint8_t ucReturn;

		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
   1656e:	9b01      	ldr	r3, [sp, #4]
   16570:	fab3 f383 	clz	r3, r3
   16574:	f88d 3003 	strb.w	r3, [sp, #3]
		return ucReturn;
   16578:	f89d 3003 	ldrb.w	r3, [sp, #3]
   1657c:	f1c3 031f 	rsb	r3, r3, #31
   16580:	9303      	str	r3, [sp, #12]
   16582:	9a03      	ldr	r2, [sp, #12]
   16584:	4613      	mov	r3, r2
   16586:	009b      	lsls	r3, r3, #2
   16588:	4413      	add	r3, r2
   1658a:	009b      	lsls	r3, r3, #2
   1658c:	4a13      	ldr	r2, [pc, #76]	; (165dc <vTaskSwitchContext+0xc4>)
   1658e:	4413      	add	r3, r2
   16590:	9302      	str	r3, [sp, #8]
   16592:	9b02      	ldr	r3, [sp, #8]
   16594:	685b      	ldr	r3, [r3, #4]
   16596:	685a      	ldr	r2, [r3, #4]
   16598:	9b02      	ldr	r3, [sp, #8]
   1659a:	605a      	str	r2, [r3, #4]
   1659c:	9b02      	ldr	r3, [sp, #8]
   1659e:	685a      	ldr	r2, [r3, #4]
   165a0:	9b02      	ldr	r3, [sp, #8]
   165a2:	3308      	adds	r3, #8
   165a4:	429a      	cmp	r2, r3
   165a6:	d104      	bne.n	165b2 <vTaskSwitchContext+0x9a>
   165a8:	9b02      	ldr	r3, [sp, #8]
   165aa:	685b      	ldr	r3, [r3, #4]
   165ac:	685a      	ldr	r2, [r3, #4]
   165ae:	9b02      	ldr	r3, [sp, #8]
   165b0:	605a      	str	r2, [r3, #4]
   165b2:	9b02      	ldr	r3, [sp, #8]
   165b4:	685b      	ldr	r3, [r3, #4]
   165b6:	68db      	ldr	r3, [r3, #12]
   165b8:	4a06      	ldr	r2, [pc, #24]	; (165d4 <vTaskSwitchContext+0xbc>)
   165ba:	6013      	str	r3, [r2, #0]
}
   165bc:	bf00      	nop
   165be:	b004      	add	sp, #16
   165c0:	bd10      	pop	{r4, pc}
   165c2:	bf00      	nop
   165c4:	10001588 	.word	0x10001588
   165c8:	10001584 	.word	0x10001584
   165cc:	10001590 	.word	0x10001590
   165d0:	1000158c 	.word	0x1000158c
   165d4:	10001518 	.word	0x10001518
   165d8:	10001580 	.word	0x10001580
   165dc:	1000151c 	.word	0x1000151c

000165e0 <vPortSVCHandler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
   165e0:	4b07      	ldr	r3, [pc, #28]	; (16600 <pxCurrentTCBConst2>)
   165e2:	6819      	ldr	r1, [r3, #0]
   165e4:	6808      	ldr	r0, [r1, #0]
   165e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   165ea:	f380 8809 	msr	PSP, r0
   165ee:	f3bf 8f6f 	isb	sy
   165f2:	f04f 0000 	mov.w	r0, #0
   165f6:	f380 8811 	msr	BASEPRI, r0
   165fa:	4770      	bx	lr
   165fc:	f3af 8000 	nop.w

00016600 <pxCurrentTCBConst2>:
   16600:	10001518 	.word	0x10001518
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
   16604:	bf00      	nop
   16606:	bf00      	nop
   16608:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   1660c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

00016610 <xPortPendSVHandler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
   16610:	f3ef 8009 	mrs	r0, PSP
   16614:	f3bf 8f6f 	isb	sy
   16618:	4b15      	ldr	r3, [pc, #84]	; (16670 <pxCurrentTCBConst>)
   1661a:	681a      	ldr	r2, [r3, #0]
   1661c:	f01e 0f10 	tst.w	lr, #16
   16620:	bf08      	it	eq
   16622:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
   16626:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1662a:	6010      	str	r0, [r2, #0]
   1662c:	e92d 0009 	stmdb	sp!, {r0, r3}
   16630:	f04f 0028 	mov.w	r0, #40	; 0x28
   16634:	f380 8811 	msr	BASEPRI, r0
   16638:	f3bf 8f4f 	dsb	sy
   1663c:	f3bf 8f6f 	isb	sy
   16640:	f7ff ff6a 	bl	16518 <vTaskSwitchContext>
   16644:	f04f 0000 	mov.w	r0, #0
   16648:	f380 8811 	msr	BASEPRI, r0
   1664c:	bc09      	pop	{r0, r3}
   1664e:	6819      	ldr	r1, [r3, #0]
   16650:	6808      	ldr	r0, [r1, #0]
   16652:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16656:	f01e 0f10 	tst.w	lr, #16
   1665a:	bf08      	it	eq
   1665c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
   16660:	f380 8809 	msr	PSP, r0
   16664:	f3bf 8f6f 	isb	sy
   16668:	4770      	bx	lr
   1666a:	bf00      	nop
   1666c:	f3af 8000 	nop.w

00016670 <pxCurrentTCBConst>:
   16670:	10001518 	.word	0x10001518
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
   16674:	bf00      	nop
   16676:	bf00      	nop

00016678 <_out_buffer(char, void*, unsigned int, unsigned int)>:
} out_fct_wrap_type;


// internal buffer output
static inline void _out_buffer(char character, void* buffer, size_t idx, size_t maxlen)
{
   16678:	b510      	push	{r4, lr}
   1667a:	b084      	sub	sp, #16
   1667c:	4674      	mov	r4, lr
   1667e:	9102      	str	r1, [sp, #8]
   16680:	9201      	str	r2, [sp, #4]
   16682:	9300      	str	r3, [sp, #0]
   16684:	4603      	mov	r3, r0
   16686:	f88d 300f 	strb.w	r3, [sp, #15]
   1668a:	4623      	mov	r3, r4
   1668c:	4619      	mov	r1, r3
   1668e:	480a      	ldr	r0, [pc, #40]	; (166b8 <_out_buffer(char, void*, unsigned int, unsigned int)+0x40>)
   16690:	f7ff fef6 	bl	16480 <__cyg_profile_func_enter>
  if (idx < maxlen) {
   16694:	9a01      	ldr	r2, [sp, #4]
   16696:	9b00      	ldr	r3, [sp, #0]
   16698:	429a      	cmp	r2, r3
   1669a:	d205      	bcs.n	166a8 <_out_buffer(char, void*, unsigned int, unsigned int)+0x30>
    ((char*)buffer)[idx] = character;
   1669c:	9a02      	ldr	r2, [sp, #8]
   1669e:	9b01      	ldr	r3, [sp, #4]
   166a0:	4413      	add	r3, r2
   166a2:	f89d 200f 	ldrb.w	r2, [sp, #15]
   166a6:	701a      	strb	r2, [r3, #0]
   166a8:	4623      	mov	r3, r4
   166aa:	4619      	mov	r1, r3
   166ac:	4802      	ldr	r0, [pc, #8]	; (166b8 <_out_buffer(char, void*, unsigned int, unsigned int)+0x40>)
   166ae:	f7ff fefb 	bl	164a8 <__cyg_profile_func_exit>
  }
}
   166b2:	bf00      	nop
   166b4:	b004      	add	sp, #16
   166b6:	bd10      	pop	{r4, pc}
   166b8:	00016679 	.word	0x00016679

000166bc <_out_null(char, void*, unsigned int, unsigned int)>:


// internal null output
static inline void _out_null(char character, void* buffer, size_t idx, size_t maxlen)
{
   166bc:	b510      	push	{r4, lr}
   166be:	b084      	sub	sp, #16
   166c0:	4674      	mov	r4, lr
   166c2:	9102      	str	r1, [sp, #8]
   166c4:	9201      	str	r2, [sp, #4]
   166c6:	9300      	str	r3, [sp, #0]
   166c8:	4603      	mov	r3, r0
   166ca:	f88d 300f 	strb.w	r3, [sp, #15]
   166ce:	4623      	mov	r3, r4
   166d0:	4619      	mov	r1, r3
   166d2:	4805      	ldr	r0, [pc, #20]	; (166e8 <_out_null(char, void*, unsigned int, unsigned int)+0x2c>)
   166d4:	f7ff fed4 	bl	16480 <__cyg_profile_func_enter>
   166d8:	4623      	mov	r3, r4
   166da:	4619      	mov	r1, r3
   166dc:	4802      	ldr	r0, [pc, #8]	; (166e8 <_out_null(char, void*, unsigned int, unsigned int)+0x2c>)
   166de:	f7ff fee3 	bl	164a8 <__cyg_profile_func_exit>
  (void)character; (void)buffer; (void)idx; (void)maxlen;
}
   166e2:	bf00      	nop
   166e4:	b004      	add	sp, #16
   166e6:	bd10      	pop	{r4, pc}
   166e8:	000166bd 	.word	0x000166bd

000166ec <_out_char(char, void*, unsigned int, unsigned int)>:


// internal _putchar wrapper
static inline void _out_char(char character, void* buffer, size_t idx, size_t maxlen)
{
   166ec:	b510      	push	{r4, lr}
   166ee:	b084      	sub	sp, #16
   166f0:	4674      	mov	r4, lr
   166f2:	9102      	str	r1, [sp, #8]
   166f4:	9201      	str	r2, [sp, #4]
   166f6:	9300      	str	r3, [sp, #0]
   166f8:	4603      	mov	r3, r0
   166fa:	f88d 300f 	strb.w	r3, [sp, #15]
   166fe:	4623      	mov	r3, r4
   16700:	4619      	mov	r1, r3
   16702:	480a      	ldr	r0, [pc, #40]	; (1672c <_out_char(char, void*, unsigned int, unsigned int)+0x40>)
   16704:	f7ff febc 	bl	16480 <__cyg_profile_func_enter>
  (void)buffer; (void)idx; (void)maxlen;
  if (character) {
   16708:	f89d 300f 	ldrb.w	r3, [sp, #15]
   1670c:	2b00      	cmp	r3, #0
   1670e:	d004      	beq.n	1671a <_out_char(char, void*, unsigned int, unsigned int)+0x2e>
    _putchar(character);
   16710:	f89d 300f 	ldrb.w	r3, [sp, #15]
   16714:	4618      	mov	r0, r3
   16716:	f7ff fe49 	bl	163ac <_putchar>
   1671a:	4623      	mov	r3, r4
   1671c:	4619      	mov	r1, r3
   1671e:	4803      	ldr	r0, [pc, #12]	; (1672c <_out_char(char, void*, unsigned int, unsigned int)+0x40>)
   16720:	f7ff fec2 	bl	164a8 <__cyg_profile_func_exit>
  }
}
   16724:	bf00      	nop
   16726:	b004      	add	sp, #16
   16728:	bd10      	pop	{r4, pc}
   1672a:	bf00      	nop
   1672c:	000166ed 	.word	0x000166ed

00016730 <_strlen(char const*)>:


// internal strlen
// \return The length of the string (excluding the terminating 0)
static inline unsigned int _strlen(const char* str)
{
   16730:	b530      	push	{r4, r5, lr}
   16732:	b085      	sub	sp, #20
   16734:	4674      	mov	r4, lr
   16736:	9001      	str	r0, [sp, #4]
   16738:	4623      	mov	r3, r4
   1673a:	4619      	mov	r1, r3
   1673c:	480c      	ldr	r0, [pc, #48]	; (16770 <_strlen(char const*)+0x40>)
   1673e:	f7ff fe9f 	bl	16480 <__cyg_profile_func_enter>
  const char* s;
  for (s = str; *s; ++s);
   16742:	9b01      	ldr	r3, [sp, #4]
   16744:	9303      	str	r3, [sp, #12]
   16746:	9b03      	ldr	r3, [sp, #12]
   16748:	781b      	ldrb	r3, [r3, #0]
   1674a:	2b00      	cmp	r3, #0
   1674c:	d003      	beq.n	16756 <_strlen(char const*)+0x26>
   1674e:	9b03      	ldr	r3, [sp, #12]
   16750:	3301      	adds	r3, #1
   16752:	9303      	str	r3, [sp, #12]
   16754:	e7f7      	b.n	16746 <_strlen(char const*)+0x16>
  return (unsigned int)(s - str);
   16756:	9a03      	ldr	r2, [sp, #12]
   16758:	9b01      	ldr	r3, [sp, #4]
   1675a:	1ad3      	subs	r3, r2, r3
   1675c:	461d      	mov	r5, r3
   1675e:	4623      	mov	r3, r4
   16760:	4619      	mov	r1, r3
   16762:	4803      	ldr	r0, [pc, #12]	; (16770 <_strlen(char const*)+0x40>)
   16764:	f7ff fea0 	bl	164a8 <__cyg_profile_func_exit>
   16768:	462b      	mov	r3, r5
}
   1676a:	4618      	mov	r0, r3
   1676c:	b005      	add	sp, #20
   1676e:	bd30      	pop	{r4, r5, pc}
   16770:	00016731 	.word	0x00016731

00016774 <_is_digit(char)>:


// internal test if char is a digit (0-9)
// \return true if char is a digit
static inline bool _is_digit(char ch)
{
   16774:	b530      	push	{r4, r5, lr}
   16776:	b083      	sub	sp, #12
   16778:	4675      	mov	r5, lr
   1677a:	4603      	mov	r3, r0
   1677c:	f88d 3007 	strb.w	r3, [sp, #7]
   16780:	462b      	mov	r3, r5
   16782:	4619      	mov	r1, r3
   16784:	480b      	ldr	r0, [pc, #44]	; (167b4 <_is_digit(char)+0x40>)
   16786:	f7ff fe7b 	bl	16480 <__cyg_profile_func_enter>
  return (ch >= '0') && (ch <= '9');
   1678a:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1678e:	2b2f      	cmp	r3, #47	; 0x2f
   16790:	d905      	bls.n	1679e <_is_digit(char)+0x2a>
   16792:	f89d 3007 	ldrb.w	r3, [sp, #7]
   16796:	2b39      	cmp	r3, #57	; 0x39
   16798:	d801      	bhi.n	1679e <_is_digit(char)+0x2a>
   1679a:	2401      	movs	r4, #1
   1679c:	e000      	b.n	167a0 <_is_digit(char)+0x2c>
   1679e:	2400      	movs	r4, #0
   167a0:	462b      	mov	r3, r5
   167a2:	4619      	mov	r1, r3
   167a4:	4803      	ldr	r0, [pc, #12]	; (167b4 <_is_digit(char)+0x40>)
   167a6:	f7ff fe7f 	bl	164a8 <__cyg_profile_func_exit>
   167aa:	4623      	mov	r3, r4
}
   167ac:	4618      	mov	r0, r3
   167ae:	b003      	add	sp, #12
   167b0:	bd30      	pop	{r4, r5, pc}
   167b2:	bf00      	nop
   167b4:	00016775 	.word	0x00016775

000167b8 <_atoi(char const**)>:


// internal ASCII string to unsigned int conversion
static unsigned int _atoi(const char** str)
{
   167b8:	b530      	push	{r4, r5, lr}
   167ba:	b085      	sub	sp, #20
   167bc:	4675      	mov	r5, lr
   167be:	9001      	str	r0, [sp, #4]
   167c0:	462b      	mov	r3, r5
   167c2:	4619      	mov	r1, r3
   167c4:	4813      	ldr	r0, [pc, #76]	; (16814 <_atoi(char const**)+0x5c>)
   167c6:	f7ff fe5b 	bl	16480 <__cyg_profile_func_enter>
  unsigned int i = 0U;
   167ca:	2300      	movs	r3, #0
   167cc:	9303      	str	r3, [sp, #12]
  while (_is_digit(**str)) {
   167ce:	9b01      	ldr	r3, [sp, #4]
   167d0:	681b      	ldr	r3, [r3, #0]
   167d2:	781b      	ldrb	r3, [r3, #0]
   167d4:	4618      	mov	r0, r3
   167d6:	f7ff ffcd 	bl	16774 <_is_digit(char)>
   167da:	4603      	mov	r3, r0
   167dc:	2b00      	cmp	r3, #0
   167de:	d00f      	beq.n	16800 <_atoi(char const**)+0x48>
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
   167e0:	9a03      	ldr	r2, [sp, #12]
   167e2:	4613      	mov	r3, r2
   167e4:	009b      	lsls	r3, r3, #2
   167e6:	4413      	add	r3, r2
   167e8:	005b      	lsls	r3, r3, #1
   167ea:	4618      	mov	r0, r3
   167ec:	9b01      	ldr	r3, [sp, #4]
   167ee:	681b      	ldr	r3, [r3, #0]
   167f0:	1c59      	adds	r1, r3, #1
   167f2:	9a01      	ldr	r2, [sp, #4]
   167f4:	6011      	str	r1, [r2, #0]
   167f6:	781b      	ldrb	r3, [r3, #0]
   167f8:	4403      	add	r3, r0
   167fa:	3b30      	subs	r3, #48	; 0x30
   167fc:	9303      	str	r3, [sp, #12]
  while (_is_digit(**str)) {
   167fe:	e7e6      	b.n	167ce <_atoi(char const**)+0x16>
  }
  return i;
   16800:	9c03      	ldr	r4, [sp, #12]
   16802:	462b      	mov	r3, r5
   16804:	4619      	mov	r1, r3
   16806:	4803      	ldr	r0, [pc, #12]	; (16814 <_atoi(char const**)+0x5c>)
   16808:	f7ff fe4e 	bl	164a8 <__cyg_profile_func_exit>
   1680c:	4623      	mov	r3, r4
}
   1680e:	4618      	mov	r0, r3
   16810:	b005      	add	sp, #20
   16812:	bd30      	pop	{r4, r5, pc}
   16814:	000167b9 	.word	0x000167b9

00016818 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)>:


// internal itoa format
static size_t _ntoa_format(out_fct_type out, char* buffer, size_t idx, size_t maxlen, char* buf, size_t len, bool negative, unsigned int base, unsigned int prec, unsigned int width, unsigned int flags)
{
   16818:	b530      	push	{r4, r5, lr}
   1681a:	b089      	sub	sp, #36	; 0x24
   1681c:	4675      	mov	r5, lr
   1681e:	9003      	str	r0, [sp, #12]
   16820:	9102      	str	r1, [sp, #8]
   16822:	9201      	str	r2, [sp, #4]
   16824:	9300      	str	r3, [sp, #0]
   16826:	462b      	mov	r3, r5
   16828:	4619      	mov	r1, r3
   1682a:	4891      	ldr	r0, [pc, #580]	; (16a70 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x258>)
   1682c:	f7ff fe28 	bl	16480 <__cyg_profile_func_enter>
  const size_t start_idx = idx;
   16830:	9b01      	ldr	r3, [sp, #4]
   16832:	9305      	str	r3, [sp, #20]

  // pad leading zeros
  while (!(flags & FLAGS_LEFT) && (len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
   16834:	9b12      	ldr	r3, [sp, #72]	; 0x48
   16836:	f003 0302 	and.w	r3, r3, #2
   1683a:	2b00      	cmp	r3, #0
   1683c:	d10e      	bne.n	1685c <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x44>
   1683e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   16840:	9b10      	ldr	r3, [sp, #64]	; 0x40
   16842:	429a      	cmp	r2, r3
   16844:	d20a      	bcs.n	1685c <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x44>
   16846:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   16848:	2b1f      	cmp	r3, #31
   1684a:	d807      	bhi.n	1685c <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x44>
    buf[len++] = '0';
   1684c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1684e:	1c5a      	adds	r2, r3, #1
   16850:	920d      	str	r2, [sp, #52]	; 0x34
   16852:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   16854:	4413      	add	r3, r2
   16856:	2230      	movs	r2, #48	; 0x30
   16858:	701a      	strb	r2, [r3, #0]
  while (!(flags & FLAGS_LEFT) && (len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
   1685a:	e7eb      	b.n	16834 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1c>
  }
  while (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
   1685c:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1685e:	f003 0302 	and.w	r3, r3, #2
   16862:	2b00      	cmp	r3, #0
   16864:	d113      	bne.n	1688e <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x76>
   16866:	9b12      	ldr	r3, [sp, #72]	; 0x48
   16868:	f003 0301 	and.w	r3, r3, #1
   1686c:	2b00      	cmp	r3, #0
   1686e:	d00e      	beq.n	1688e <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x76>
   16870:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   16872:	9b11      	ldr	r3, [sp, #68]	; 0x44
   16874:	429a      	cmp	r2, r3
   16876:	d20a      	bcs.n	1688e <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x76>
   16878:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1687a:	2b1f      	cmp	r3, #31
   1687c:	d807      	bhi.n	1688e <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x76>
    buf[len++] = '0';
   1687e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   16880:	1c5a      	adds	r2, r3, #1
   16882:	920d      	str	r2, [sp, #52]	; 0x34
   16884:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   16886:	4413      	add	r3, r2
   16888:	2230      	movs	r2, #48	; 0x30
   1688a:	701a      	strb	r2, [r3, #0]
  while (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
   1688c:	e7e6      	b.n	1685c <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x44>
  }

  // handle hash
  if (flags & FLAGS_HASH) {
   1688e:	9b12      	ldr	r3, [sp, #72]	; 0x48
   16890:	f003 0310 	and.w	r3, r3, #16
   16894:	2b00      	cmp	r3, #0
   16896:	d058      	beq.n	1694a <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x132>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
   16898:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1689a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
   1689e:	2b00      	cmp	r3, #0
   168a0:	d116      	bne.n	168d0 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xb8>
   168a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   168a4:	2b00      	cmp	r3, #0
   168a6:	d013      	beq.n	168d0 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xb8>
   168a8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   168aa:	9b10      	ldr	r3, [sp, #64]	; 0x40
   168ac:	429a      	cmp	r2, r3
   168ae:	d003      	beq.n	168b8 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xa0>
   168b0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   168b2:	9b11      	ldr	r3, [sp, #68]	; 0x44
   168b4:	429a      	cmp	r2, r3
   168b6:	d10b      	bne.n	168d0 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xb8>
      len--;
   168b8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   168ba:	3b01      	subs	r3, #1
   168bc:	930d      	str	r3, [sp, #52]	; 0x34
      if (len && (base == 16U)) {
   168be:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   168c0:	2b00      	cmp	r3, #0
   168c2:	d005      	beq.n	168d0 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xb8>
   168c4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   168c6:	2b10      	cmp	r3, #16
   168c8:	d102      	bne.n	168d0 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xb8>
        len--;
   168ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   168cc:	3b01      	subs	r3, #1
   168ce:	930d      	str	r3, [sp, #52]	; 0x34
      }
    }
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
   168d0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   168d2:	2b10      	cmp	r3, #16
   168d4:	d10f      	bne.n	168f6 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xde>
   168d6:	9b12      	ldr	r3, [sp, #72]	; 0x48
   168d8:	f003 0320 	and.w	r3, r3, #32
   168dc:	2b00      	cmp	r3, #0
   168de:	d10a      	bne.n	168f6 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xde>
   168e0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   168e2:	2b1f      	cmp	r3, #31
   168e4:	d807      	bhi.n	168f6 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xde>
      buf[len++] = 'x';
   168e6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   168e8:	1c5a      	adds	r2, r3, #1
   168ea:	920d      	str	r2, [sp, #52]	; 0x34
   168ec:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   168ee:	4413      	add	r3, r2
   168f0:	2278      	movs	r2, #120	; 0x78
   168f2:	701a      	strb	r2, [r3, #0]
   168f4:	e01f      	b.n	16936 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x11e>
    }
    else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
   168f6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   168f8:	2b10      	cmp	r3, #16
   168fa:	d10f      	bne.n	1691c <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x104>
   168fc:	9b12      	ldr	r3, [sp, #72]	; 0x48
   168fe:	f003 0320 	and.w	r3, r3, #32
   16902:	2b00      	cmp	r3, #0
   16904:	d00a      	beq.n	1691c <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x104>
   16906:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   16908:	2b1f      	cmp	r3, #31
   1690a:	d807      	bhi.n	1691c <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x104>
      buf[len++] = 'X';
   1690c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1690e:	1c5a      	adds	r2, r3, #1
   16910:	920d      	str	r2, [sp, #52]	; 0x34
   16912:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   16914:	4413      	add	r3, r2
   16916:	2258      	movs	r2, #88	; 0x58
   16918:	701a      	strb	r2, [r3, #0]
   1691a:	e00c      	b.n	16936 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x11e>
    }
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
   1691c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1691e:	2b02      	cmp	r3, #2
   16920:	d109      	bne.n	16936 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x11e>
   16922:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   16924:	2b1f      	cmp	r3, #31
   16926:	d806      	bhi.n	16936 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x11e>
      buf[len++] = 'b';
   16928:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1692a:	1c5a      	adds	r2, r3, #1
   1692c:	920d      	str	r2, [sp, #52]	; 0x34
   1692e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   16930:	4413      	add	r3, r2
   16932:	2262      	movs	r2, #98	; 0x62
   16934:	701a      	strb	r2, [r3, #0]
    }
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
   16936:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   16938:	2b1f      	cmp	r3, #31
   1693a:	d806      	bhi.n	1694a <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x132>
      buf[len++] = '0';
   1693c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1693e:	1c5a      	adds	r2, r3, #1
   16940:	920d      	str	r2, [sp, #52]	; 0x34
   16942:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   16944:	4413      	add	r3, r2
   16946:	2230      	movs	r2, #48	; 0x30
   16948:	701a      	strb	r2, [r3, #0]
    }
  }

  // handle sign
  if (len && (len == width) && (negative || (flags & FLAGS_PLUS) || (flags & FLAGS_SPACE))) {
   1694a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1694c:	2b00      	cmp	r3, #0
   1694e:	d014      	beq.n	1697a <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x162>
   16950:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   16952:	9b11      	ldr	r3, [sp, #68]	; 0x44
   16954:	429a      	cmp	r2, r3
   16956:	d110      	bne.n	1697a <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x162>
   16958:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
   1695c:	2b00      	cmp	r3, #0
   1695e:	d109      	bne.n	16974 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x15c>
   16960:	9b12      	ldr	r3, [sp, #72]	; 0x48
   16962:	f003 0304 	and.w	r3, r3, #4
   16966:	2b00      	cmp	r3, #0
   16968:	d104      	bne.n	16974 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x15c>
   1696a:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1696c:	f003 0308 	and.w	r3, r3, #8
   16970:	2b00      	cmp	r3, #0
   16972:	d002      	beq.n	1697a <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x162>
    len--;
   16974:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   16976:	3b01      	subs	r3, #1
   16978:	930d      	str	r3, [sp, #52]	; 0x34
  }
  if (len < PRINTF_NTOA_BUFFER_SIZE) {
   1697a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1697c:	2b1f      	cmp	r3, #31
   1697e:	d824      	bhi.n	169ca <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1b2>
    if (negative) {
   16980:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
   16984:	2b00      	cmp	r3, #0
   16986:	d007      	beq.n	16998 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x180>
      buf[len++] = '-';
   16988:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1698a:	1c5a      	adds	r2, r3, #1
   1698c:	920d      	str	r2, [sp, #52]	; 0x34
   1698e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   16990:	4413      	add	r3, r2
   16992:	222d      	movs	r2, #45	; 0x2d
   16994:	701a      	strb	r2, [r3, #0]
   16996:	e018      	b.n	169ca <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1b2>
    }
    else if (flags & FLAGS_PLUS) {
   16998:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1699a:	f003 0304 	and.w	r3, r3, #4
   1699e:	2b00      	cmp	r3, #0
   169a0:	d007      	beq.n	169b2 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x19a>
      buf[len++] = '+';  // ignore the space if the '+' exists
   169a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   169a4:	1c5a      	adds	r2, r3, #1
   169a6:	920d      	str	r2, [sp, #52]	; 0x34
   169a8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   169aa:	4413      	add	r3, r2
   169ac:	222b      	movs	r2, #43	; 0x2b
   169ae:	701a      	strb	r2, [r3, #0]
   169b0:	e00b      	b.n	169ca <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1b2>
    }
    else if (flags & FLAGS_SPACE) {
   169b2:	9b12      	ldr	r3, [sp, #72]	; 0x48
   169b4:	f003 0308 	and.w	r3, r3, #8
   169b8:	2b00      	cmp	r3, #0
   169ba:	d006      	beq.n	169ca <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1b2>
      buf[len++] = ' ';
   169bc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   169be:	1c5a      	adds	r2, r3, #1
   169c0:	920d      	str	r2, [sp, #52]	; 0x34
   169c2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   169c4:	4413      	add	r3, r2
   169c6:	2220      	movs	r2, #32
   169c8:	701a      	strb	r2, [r3, #0]
    }
  }

  // pad spaces up to given width
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
   169ca:	9b12      	ldr	r3, [sp, #72]	; 0x48
   169cc:	f003 0302 	and.w	r3, r3, #2
   169d0:	2b00      	cmp	r3, #0
   169d2:	d116      	bne.n	16a02 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1ea>
   169d4:	9b12      	ldr	r3, [sp, #72]	; 0x48
   169d6:	f003 0301 	and.w	r3, r3, #1
   169da:	2b00      	cmp	r3, #0
   169dc:	d111      	bne.n	16a02 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1ea>
    for (size_t i = len; i < width; i++) {
   169de:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   169e0:	9307      	str	r3, [sp, #28]
   169e2:	9a07      	ldr	r2, [sp, #28]
   169e4:	9b11      	ldr	r3, [sp, #68]	; 0x44
   169e6:	429a      	cmp	r2, r3
   169e8:	d20b      	bcs.n	16a02 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1ea>
      out(' ', buffer, idx++, maxlen);
   169ea:	9a01      	ldr	r2, [sp, #4]
   169ec:	1c53      	adds	r3, r2, #1
   169ee:	9301      	str	r3, [sp, #4]
   169f0:	9c03      	ldr	r4, [sp, #12]
   169f2:	9b00      	ldr	r3, [sp, #0]
   169f4:	9902      	ldr	r1, [sp, #8]
   169f6:	2020      	movs	r0, #32
   169f8:	47a0      	blx	r4
    for (size_t i = len; i < width; i++) {
   169fa:	9b07      	ldr	r3, [sp, #28]
   169fc:	3301      	adds	r3, #1
   169fe:	9307      	str	r3, [sp, #28]
   16a00:	e7ef      	b.n	169e2 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1ca>
    }
  }

  // reverse string
  for (size_t i = 0U; i < len; i++) {
   16a02:	2300      	movs	r3, #0
   16a04:	9306      	str	r3, [sp, #24]
   16a06:	9a06      	ldr	r2, [sp, #24]
   16a08:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   16a0a:	429a      	cmp	r2, r3
   16a0c:	d211      	bcs.n	16a32 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x21a>
    out(buf[len - i - 1U], buffer, idx++, maxlen);
   16a0e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   16a10:	9b06      	ldr	r3, [sp, #24]
   16a12:	1ad3      	subs	r3, r2, r3
   16a14:	3b01      	subs	r3, #1
   16a16:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   16a18:	4413      	add	r3, r2
   16a1a:	7818      	ldrb	r0, [r3, #0]
   16a1c:	9a01      	ldr	r2, [sp, #4]
   16a1e:	1c53      	adds	r3, r2, #1
   16a20:	9301      	str	r3, [sp, #4]
   16a22:	9c03      	ldr	r4, [sp, #12]
   16a24:	9b00      	ldr	r3, [sp, #0]
   16a26:	9902      	ldr	r1, [sp, #8]
   16a28:	47a0      	blx	r4
  for (size_t i = 0U; i < len; i++) {
   16a2a:	9b06      	ldr	r3, [sp, #24]
   16a2c:	3301      	adds	r3, #1
   16a2e:	9306      	str	r3, [sp, #24]
   16a30:	e7e9      	b.n	16a06 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1ee>
  }

  // append pad spaces up to given width
  if (flags & FLAGS_LEFT) {
   16a32:	9b12      	ldr	r3, [sp, #72]	; 0x48
   16a34:	f003 0302 	and.w	r3, r3, #2
   16a38:	2b00      	cmp	r3, #0
   16a3a:	d00e      	beq.n	16a5a <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x242>
    while (idx - start_idx < width) {
   16a3c:	9a01      	ldr	r2, [sp, #4]
   16a3e:	9b05      	ldr	r3, [sp, #20]
   16a40:	1ad3      	subs	r3, r2, r3
   16a42:	9a11      	ldr	r2, [sp, #68]	; 0x44
   16a44:	429a      	cmp	r2, r3
   16a46:	d908      	bls.n	16a5a <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x242>
      out(' ', buffer, idx++, maxlen);
   16a48:	9a01      	ldr	r2, [sp, #4]
   16a4a:	1c53      	adds	r3, r2, #1
   16a4c:	9301      	str	r3, [sp, #4]
   16a4e:	9c03      	ldr	r4, [sp, #12]
   16a50:	9b00      	ldr	r3, [sp, #0]
   16a52:	9902      	ldr	r1, [sp, #8]
   16a54:	2020      	movs	r0, #32
   16a56:	47a0      	blx	r4
    while (idx - start_idx < width) {
   16a58:	e7f0      	b.n	16a3c <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x224>
    }
  }

  return idx;
   16a5a:	9c01      	ldr	r4, [sp, #4]
   16a5c:	462b      	mov	r3, r5
   16a5e:	4619      	mov	r1, r3
   16a60:	4803      	ldr	r0, [pc, #12]	; (16a70 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x258>)
   16a62:	f7ff fd21 	bl	164a8 <__cyg_profile_func_exit>
   16a66:	4623      	mov	r3, r4
}
   16a68:	4618      	mov	r0, r3
   16a6a:	b009      	add	sp, #36	; 0x24
   16a6c:	bd30      	pop	{r4, r5, pc}
   16a6e:	bf00      	nop
   16a70:	00016819 	.word	0x00016819

00016a74 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)>:


// internal itoa for 'long' type
static size_t _ntoa_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long value, bool negative, unsigned long base, unsigned int prec, unsigned int width, unsigned int flags)
{
   16a74:	b530      	push	{r4, r5, lr}
   16a76:	b097      	sub	sp, #92	; 0x5c
   16a78:	4674      	mov	r4, lr
   16a7a:	900b      	str	r0, [sp, #44]	; 0x2c
   16a7c:	910a      	str	r1, [sp, #40]	; 0x28
   16a7e:	9209      	str	r2, [sp, #36]	; 0x24
   16a80:	9308      	str	r3, [sp, #32]
   16a82:	4623      	mov	r3, r4
   16a84:	4619      	mov	r1, r3
   16a86:	4833      	ldr	r0, [pc, #204]	; (16b54 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0xe0>)
   16a88:	f7ff fcfa 	bl	16480 <__cyg_profile_func_enter>
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
   16a8c:	2300      	movs	r3, #0
   16a8e:	9315      	str	r3, [sp, #84]	; 0x54

  // no hash for 0 values
  if (!value) {
   16a90:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   16a92:	2b00      	cmp	r3, #0
   16a94:	d103      	bne.n	16a9e <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x2a>
    flags &= ~FLAGS_HASH;
   16a96:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   16a98:	f023 0310 	bic.w	r3, r3, #16
   16a9c:	931f      	str	r3, [sp, #124]	; 0x7c
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
   16a9e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   16aa0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
   16aa4:	2b00      	cmp	r3, #0
   16aa6:	d002      	beq.n	16aae <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x3a>
   16aa8:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   16aaa:	2b00      	cmp	r3, #0
   16aac:	d033      	beq.n	16b16 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0xa2>
    do {
      const char digit = (char)(value % base);
   16aae:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   16ab0:	9a1c      	ldr	r2, [sp, #112]	; 0x70
   16ab2:	fbb3 f2f2 	udiv	r2, r3, r2
   16ab6:	991c      	ldr	r1, [sp, #112]	; 0x70
   16ab8:	fb01 f202 	mul.w	r2, r1, r2
   16abc:	1a9b      	subs	r3, r3, r2
   16abe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
   16ac2:	f89d 3053 	ldrb.w	r3, [sp, #83]	; 0x53
   16ac6:	2b09      	cmp	r3, #9
   16ac8:	d804      	bhi.n	16ad4 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x60>
   16aca:	f89d 3053 	ldrb.w	r3, [sp, #83]	; 0x53
   16ace:	3330      	adds	r3, #48	; 0x30
   16ad0:	b2da      	uxtb	r2, r3
   16ad2:	e00d      	b.n	16af0 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x7c>
   16ad4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   16ad6:	f003 0320 	and.w	r3, r3, #32
   16ada:	2b00      	cmp	r3, #0
   16adc:	d001      	beq.n	16ae2 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x6e>
   16ade:	2241      	movs	r2, #65	; 0x41
   16ae0:	e000      	b.n	16ae4 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x70>
   16ae2:	2261      	movs	r2, #97	; 0x61
   16ae4:	f89d 3053 	ldrb.w	r3, [sp, #83]	; 0x53
   16ae8:	4413      	add	r3, r2
   16aea:	b2db      	uxtb	r3, r3
   16aec:	3b0a      	subs	r3, #10
   16aee:	b2da      	uxtb	r2, r3
   16af0:	9b15      	ldr	r3, [sp, #84]	; 0x54
   16af2:	1c59      	adds	r1, r3, #1
   16af4:	9115      	str	r1, [sp, #84]	; 0x54
   16af6:	a916      	add	r1, sp, #88	; 0x58
   16af8:	440b      	add	r3, r1
   16afa:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
   16afe:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   16b00:	9b1c      	ldr	r3, [sp, #112]	; 0x70
   16b02:	fbb2 f3f3 	udiv	r3, r2, r3
   16b06:	931a      	str	r3, [sp, #104]	; 0x68
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
   16b08:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   16b0a:	2b00      	cmp	r3, #0
   16b0c:	d003      	beq.n	16b16 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0xa2>
   16b0e:	9b15      	ldr	r3, [sp, #84]	; 0x54
   16b10:	2b1f      	cmp	r3, #31
   16b12:	d800      	bhi.n	16b16 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0xa2>
    do {
   16b14:	e7cb      	b.n	16aae <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x3a>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
   16b16:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   16b18:	9306      	str	r3, [sp, #24]
   16b1a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   16b1c:	9305      	str	r3, [sp, #20]
   16b1e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   16b20:	9304      	str	r3, [sp, #16]
   16b22:	9b1c      	ldr	r3, [sp, #112]	; 0x70
   16b24:	9303      	str	r3, [sp, #12]
   16b26:	f89d 306c 	ldrb.w	r3, [sp, #108]	; 0x6c
   16b2a:	9302      	str	r3, [sp, #8]
   16b2c:	9b15      	ldr	r3, [sp, #84]	; 0x54
   16b2e:	9301      	str	r3, [sp, #4]
   16b30:	ab0c      	add	r3, sp, #48	; 0x30
   16b32:	9300      	str	r3, [sp, #0]
   16b34:	9b08      	ldr	r3, [sp, #32]
   16b36:	9a09      	ldr	r2, [sp, #36]	; 0x24
   16b38:	990a      	ldr	r1, [sp, #40]	; 0x28
   16b3a:	980b      	ldr	r0, [sp, #44]	; 0x2c
   16b3c:	f7ff fe6c 	bl	16818 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)>
   16b40:	4605      	mov	r5, r0
   16b42:	4623      	mov	r3, r4
   16b44:	4619      	mov	r1, r3
   16b46:	4803      	ldr	r0, [pc, #12]	; (16b54 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0xe0>)
   16b48:	f7ff fcae 	bl	164a8 <__cyg_profile_func_exit>
   16b4c:	462b      	mov	r3, r5
}
   16b4e:	4618      	mov	r0, r3
   16b50:	b017      	add	sp, #92	; 0x5c
   16b52:	bd30      	pop	{r4, r5, pc}
   16b54:	00016a75 	.word	0x00016a75

00016b58 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)>:


// internal itoa for 'long long' type
#if defined(PRINTF_SUPPORT_LONG_LONG)
static size_t _ntoa_long_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long long value, bool negative, unsigned long long base, unsigned int prec, unsigned int width, unsigned int flags)
{
   16b58:	b530      	push	{r4, r5, lr}
   16b5a:	b097      	sub	sp, #92	; 0x5c
   16b5c:	4675      	mov	r5, lr
   16b5e:	900b      	str	r0, [sp, #44]	; 0x2c
   16b60:	910a      	str	r1, [sp, #40]	; 0x28
   16b62:	9209      	str	r2, [sp, #36]	; 0x24
   16b64:	9308      	str	r3, [sp, #32]
   16b66:	462b      	mov	r3, r5
   16b68:	4619      	mov	r1, r3
   16b6a:	4837      	ldr	r0, [pc, #220]	; (16c48 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0xf0>)
   16b6c:	f7ff fc88 	bl	16480 <__cyg_profile_func_enter>
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
   16b70:	2300      	movs	r3, #0
   16b72:	9315      	str	r3, [sp, #84]	; 0x54

  // no hash for 0 values
  if (!value) {
   16b74:	e9dd 341a 	ldrd	r3, r4, [sp, #104]	; 0x68
   16b78:	4323      	orrs	r3, r4
   16b7a:	d103      	bne.n	16b84 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0x2c>
    flags &= ~FLAGS_HASH;
   16b7c:	9b22      	ldr	r3, [sp, #136]	; 0x88
   16b7e:	f023 0310 	bic.w	r3, r3, #16
   16b82:	9322      	str	r3, [sp, #136]	; 0x88
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
   16b84:	9b22      	ldr	r3, [sp, #136]	; 0x88
   16b86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
   16b8a:	2b00      	cmp	r3, #0
   16b8c:	d003      	beq.n	16b96 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0x3e>
   16b8e:	e9dd 341a 	ldrd	r3, r4, [sp, #104]	; 0x68
   16b92:	4323      	orrs	r3, r4
   16b94:	d039      	beq.n	16c0a <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0xb2>
    do {
      const char digit = (char)(value % base);
   16b96:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
   16b9a:	e9dd 231e 	ldrd	r2, r3, [sp, #120]	; 0x78
   16b9e:	f002 f96d 	bl	18e7c <__aeabi_uldivmod>
   16ba2:	461c      	mov	r4, r3
   16ba4:	4613      	mov	r3, r2
   16ba6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
   16baa:	f89d 3053 	ldrb.w	r3, [sp, #83]	; 0x53
   16bae:	2b09      	cmp	r3, #9
   16bb0:	d804      	bhi.n	16bbc <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0x64>
   16bb2:	f89d 3053 	ldrb.w	r3, [sp, #83]	; 0x53
   16bb6:	3330      	adds	r3, #48	; 0x30
   16bb8:	b2da      	uxtb	r2, r3
   16bba:	e00d      	b.n	16bd8 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0x80>
   16bbc:	9b22      	ldr	r3, [sp, #136]	; 0x88
   16bbe:	f003 0320 	and.w	r3, r3, #32
   16bc2:	2b00      	cmp	r3, #0
   16bc4:	d001      	beq.n	16bca <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0x72>
   16bc6:	2241      	movs	r2, #65	; 0x41
   16bc8:	e000      	b.n	16bcc <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0x74>
   16bca:	2261      	movs	r2, #97	; 0x61
   16bcc:	f89d 3053 	ldrb.w	r3, [sp, #83]	; 0x53
   16bd0:	4413      	add	r3, r2
   16bd2:	b2db      	uxtb	r3, r3
   16bd4:	3b0a      	subs	r3, #10
   16bd6:	b2da      	uxtb	r2, r3
   16bd8:	9b15      	ldr	r3, [sp, #84]	; 0x54
   16bda:	1c59      	adds	r1, r3, #1
   16bdc:	9115      	str	r1, [sp, #84]	; 0x54
   16bde:	a916      	add	r1, sp, #88	; 0x58
   16be0:	440b      	add	r3, r1
   16be2:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
   16be6:	e9dd 231e 	ldrd	r2, r3, [sp, #120]	; 0x78
   16bea:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
   16bee:	f002 f945 	bl	18e7c <__aeabi_uldivmod>
   16bf2:	4603      	mov	r3, r0
   16bf4:	460c      	mov	r4, r1
   16bf6:	e9cd 341a 	strd	r3, r4, [sp, #104]	; 0x68
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
   16bfa:	e9dd 341a 	ldrd	r3, r4, [sp, #104]	; 0x68
   16bfe:	4323      	orrs	r3, r4
   16c00:	d003      	beq.n	16c0a <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0xb2>
   16c02:	9b15      	ldr	r3, [sp, #84]	; 0x54
   16c04:	2b1f      	cmp	r3, #31
   16c06:	d800      	bhi.n	16c0a <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0xb2>
    do {
   16c08:	e7c5      	b.n	16b96 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0x3e>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
   16c0a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   16c0c:	9a22      	ldr	r2, [sp, #136]	; 0x88
   16c0e:	9206      	str	r2, [sp, #24]
   16c10:	9a21      	ldr	r2, [sp, #132]	; 0x84
   16c12:	9205      	str	r2, [sp, #20]
   16c14:	9a20      	ldr	r2, [sp, #128]	; 0x80
   16c16:	9204      	str	r2, [sp, #16]
   16c18:	9303      	str	r3, [sp, #12]
   16c1a:	f89d 3070 	ldrb.w	r3, [sp, #112]	; 0x70
   16c1e:	9302      	str	r3, [sp, #8]
   16c20:	9b15      	ldr	r3, [sp, #84]	; 0x54
   16c22:	9301      	str	r3, [sp, #4]
   16c24:	ab0c      	add	r3, sp, #48	; 0x30
   16c26:	9300      	str	r3, [sp, #0]
   16c28:	9b08      	ldr	r3, [sp, #32]
   16c2a:	9a09      	ldr	r2, [sp, #36]	; 0x24
   16c2c:	990a      	ldr	r1, [sp, #40]	; 0x28
   16c2e:	980b      	ldr	r0, [sp, #44]	; 0x2c
   16c30:	f7ff fdf2 	bl	16818 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)>
   16c34:	4604      	mov	r4, r0
   16c36:	462b      	mov	r3, r5
   16c38:	4619      	mov	r1, r3
   16c3a:	4803      	ldr	r0, [pc, #12]	; (16c48 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0xf0>)
   16c3c:	f7ff fc34 	bl	164a8 <__cyg_profile_func_exit>
   16c40:	4623      	mov	r3, r4
}
   16c42:	4618      	mov	r0, r3
   16c44:	b017      	add	sp, #92	; 0x5c
   16c46:	bd30      	pop	{r4, r5, pc}
   16c48:	00016b59 	.word	0x00016b59

00016c4c <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)>:
#endif  // PRINTF_SUPPORT_LONG_LONG


#if defined(PRINTF_SUPPORT_FLOAT)
static size_t _ftoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value_param, unsigned int prec, unsigned int width, unsigned int flags)
{
   16c4c:	b530      	push	{r4, r5, lr}
   16c4e:	b09b      	sub	sp, #108	; 0x6c
   16c50:	4675      	mov	r5, lr
   16c52:	9005      	str	r0, [sp, #20]
   16c54:	9104      	str	r1, [sp, #16]
   16c56:	9203      	str	r2, [sp, #12]
   16c58:	9302      	str	r3, [sp, #8]
   16c5a:	ed8d 0b00 	vstr	d0, [sp]
   16c5e:	462b      	mov	r3, r5
   16c60:	4619      	mov	r1, r3
   16c62:	48b7      	ldr	r0, [pc, #732]	; (16f40 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x2f4>)
   16c64:	f7ff fc0c 	bl	16480 <__cyg_profile_func_enter>
  const size_t start_idx = idx;
   16c68:	9b03      	ldr	r3, [sp, #12]
   16c6a:	9311      	str	r3, [sp, #68]	; 0x44

  float value = static_cast<float>(value_param);
   16c6c:	e9dd 0100 	ldrd	r0, r1, [sp]
   16c70:	f002 f8b4 	bl	18ddc <__aeabi_d2f>
   16c74:	4603      	mov	r3, r0
   16c76:	9319      	str	r3, [sp, #100]	; 0x64

  char buf[PRINTF_FTOA_BUFFER_SIZE];
  size_t len  = 0U;
   16c78:	2300      	movs	r3, #0
   16c7a:	9318      	str	r3, [sp, #96]	; 0x60
  float diff = 0.0;
   16c7c:	f04f 0300 	mov.w	r3, #0
   16c80:	9310      	str	r3, [sp, #64]	; 0x40

  // if input is larger than thres_max, revert to exponential
  const float thres_max = (float)0x7FFFFFFF;
   16c82:	f04f 439e 	mov.w	r3, #1325400064	; 0x4f000000
   16c86:	930f      	str	r3, [sp, #60]	; 0x3c

  // powers of 10
  static const float pow10[] = { 1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000 };

  // test for negative
  bool negative = false;
   16c88:	2300      	movs	r3, #0
   16c8a:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
  if (value < 0) {
   16c8e:	eddd 7a19 	vldr	s15, [sp, #100]	; 0x64
   16c92:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   16c96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   16c9a:	d50a      	bpl.n	16cb2 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x66>
    negative = true;
   16c9c:	2301      	movs	r3, #1
   16c9e:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
    value = 0 - value;
   16ca2:	ed9f 7aa8 	vldr	s14, [pc, #672]	; 16f44 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x2f8>
   16ca6:	eddd 7a19 	vldr	s15, [sp, #100]	; 0x64
   16caa:	ee77 7a67 	vsub.f32	s15, s14, s15
   16cae:	edcd 7a19 	vstr	s15, [sp, #100]	; 0x64
  }

  // set default precision to 6, if not set explicitly
  if (!(flags & FLAGS_PRECISION)) {
   16cb2:	9b20      	ldr	r3, [sp, #128]	; 0x80
   16cb4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
   16cb8:	2b00      	cmp	r3, #0
   16cba:	d101      	bne.n	16cc0 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x74>
    prec = 6U;
   16cbc:	2306      	movs	r3, #6
   16cbe:	931e      	str	r3, [sp, #120]	; 0x78
  }
  // limit precision to 9, cause a prec >= 10 can lead to overflow errors
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
   16cc0:	9b18      	ldr	r3, [sp, #96]	; 0x60
   16cc2:	2b1f      	cmp	r3, #31
   16cc4:	d80e      	bhi.n	16ce4 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x98>
   16cc6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   16cc8:	2b09      	cmp	r3, #9
   16cca:	d90b      	bls.n	16ce4 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x98>
    buf[len++] = '0';
   16ccc:	9b18      	ldr	r3, [sp, #96]	; 0x60
   16cce:	1c5a      	adds	r2, r3, #1
   16cd0:	9218      	str	r2, [sp, #96]	; 0x60
   16cd2:	aa1a      	add	r2, sp, #104	; 0x68
   16cd4:	4413      	add	r3, r2
   16cd6:	2230      	movs	r2, #48	; 0x30
   16cd8:	f803 2c50 	strb.w	r2, [r3, #-80]
    prec--;
   16cdc:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   16cde:	3b01      	subs	r3, #1
   16ce0:	931e      	str	r3, [sp, #120]	; 0x78
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
   16ce2:	e7ed      	b.n	16cc0 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x74>
  }

  int whole = (int)value;
   16ce4:	eddd 7a19 	vldr	s15, [sp, #100]	; 0x64
   16ce8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   16cec:	ee17 3a90 	vmov	r3, s15
   16cf0:	9316      	str	r3, [sp, #88]	; 0x58
  float tmp = (value - whole) * pow10[prec];
   16cf2:	9b16      	ldr	r3, [sp, #88]	; 0x58
   16cf4:	ee07 3a90 	vmov	s15, r3
   16cf8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   16cfc:	ed9d 7a19 	vldr	s14, [sp, #100]	; 0x64
   16d00:	ee37 7a67 	vsub.f32	s14, s14, s15
   16d04:	4a90      	ldr	r2, [pc, #576]	; (16f48 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x2fc>)
   16d06:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   16d08:	009b      	lsls	r3, r3, #2
   16d0a:	4413      	add	r3, r2
   16d0c:	edd3 7a00 	vldr	s15, [r3]
   16d10:	ee67 7a27 	vmul.f32	s15, s14, s15
   16d14:	edcd 7a0e 	vstr	s15, [sp, #56]	; 0x38
  unsigned long frac = (unsigned long)tmp;
   16d18:	eddd 7a0e 	vldr	s15, [sp, #56]	; 0x38
   16d1c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
   16d20:	ee17 3a90 	vmov	r3, s15
   16d24:	9315      	str	r3, [sp, #84]	; 0x54
  diff = tmp - frac;
   16d26:	9b15      	ldr	r3, [sp, #84]	; 0x54
   16d28:	ee07 3a90 	vmov	s15, r3
   16d2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
   16d30:	ed9d 7a0e 	vldr	s14, [sp, #56]	; 0x38
   16d34:	ee77 7a67 	vsub.f32	s15, s14, s15
   16d38:	edcd 7a10 	vstr	s15, [sp, #64]	; 0x40

  if (diff > 0.5) {
   16d3c:	eddd 7a10 	vldr	s15, [sp, #64]	; 0x40
   16d40:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
   16d44:	eef4 7ac7 	vcmpe.f32	s15, s14
   16d48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   16d4c:	dd18      	ble.n	16d80 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x134>
    ++frac;
   16d4e:	9b15      	ldr	r3, [sp, #84]	; 0x54
   16d50:	3301      	adds	r3, #1
   16d52:	9315      	str	r3, [sp, #84]	; 0x54
    // handle rollover, e.g. case 0.99 with prec 1 is 1.0
    if (frac >= pow10[prec]) {
   16d54:	9b15      	ldr	r3, [sp, #84]	; 0x54
   16d56:	ee07 3a90 	vmov	s15, r3
   16d5a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
   16d5e:	4a7a      	ldr	r2, [pc, #488]	; (16f48 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x2fc>)
   16d60:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   16d62:	009b      	lsls	r3, r3, #2
   16d64:	4413      	add	r3, r2
   16d66:	edd3 7a00 	vldr	s15, [r3]
   16d6a:	eeb4 7ae7 	vcmpe.f32	s14, s15
   16d6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   16d72:	db19      	blt.n	16da8 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x15c>
      frac = 0;
   16d74:	2300      	movs	r3, #0
   16d76:	9315      	str	r3, [sp, #84]	; 0x54
      ++whole;
   16d78:	9b16      	ldr	r3, [sp, #88]	; 0x58
   16d7a:	3301      	adds	r3, #1
   16d7c:	9316      	str	r3, [sp, #88]	; 0x58
   16d7e:	e013      	b.n	16da8 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x15c>
    }
  }
  else if ((diff == 0.5) && ((frac == 0U) || (frac & 1U))) {
   16d80:	eddd 7a10 	vldr	s15, [sp, #64]	; 0x40
   16d84:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
   16d88:	eef4 7a47 	vcmp.f32	s15, s14
   16d8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   16d90:	d10a      	bne.n	16da8 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x15c>
   16d92:	9b15      	ldr	r3, [sp, #84]	; 0x54
   16d94:	2b00      	cmp	r3, #0
   16d96:	d004      	beq.n	16da2 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x156>
   16d98:	9b15      	ldr	r3, [sp, #84]	; 0x54
   16d9a:	f003 0301 	and.w	r3, r3, #1
   16d9e:	2b00      	cmp	r3, #0
   16da0:	d002      	beq.n	16da8 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x15c>
    // if halfway, round up if odd, OR if last digit is 0
    ++frac;
   16da2:	9b15      	ldr	r3, [sp, #84]	; 0x54
   16da4:	3301      	adds	r3, #1
   16da6:	9315      	str	r3, [sp, #84]	; 0x54
  }

  // TBD: for very large numbers switch back to native sprintf for exponentials. Anyone want to write code to replace this?
  // Normal printf behavior is to print EVERY whole number digit which can be 100s of characters overflowing your buffers == bad
  if (value > thres_max) {
   16da8:	eddd 7a19 	vldr	s15, [sp, #100]	; 0x64
   16dac:	ed9f 7a67 	vldr	s14, [pc, #412]	; 16f4c <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x300>
   16db0:	eef4 7ac7 	vcmpe.f32	s15, s14
   16db4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   16db8:	dd01      	ble.n	16dbe <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x172>
    return 0U;
   16dba:	2400      	movs	r4, #0
   16dbc:	e156      	b.n	1706c <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x420>
  }

  if (prec == 0U) {
   16dbe:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   16dc0:	2b00      	cmp	r3, #0
   16dc2:	d129      	bne.n	16e18 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x1cc>
    diff = value - (float)whole;
   16dc4:	9b16      	ldr	r3, [sp, #88]	; 0x58
   16dc6:	ee07 3a90 	vmov	s15, r3
   16dca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   16dce:	ed9d 7a19 	vldr	s14, [sp, #100]	; 0x64
   16dd2:	ee77 7a67 	vsub.f32	s15, s14, s15
   16dd6:	edcd 7a10 	vstr	s15, [sp, #64]	; 0x40
    if (diff > 0.5) {
   16dda:	eddd 7a10 	vldr	s15, [sp, #64]	; 0x40
   16dde:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
   16de2:	eef4 7ac7 	vcmpe.f32	s15, s14
   16de6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   16dea:	dd03      	ble.n	16df4 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x1a8>
      // greater than 0.5, round up, e.g. 1.6 -> 2
      ++whole;
   16dec:	9b16      	ldr	r3, [sp, #88]	; 0x58
   16dee:	3301      	adds	r3, #1
   16df0:	9316      	str	r3, [sp, #88]	; 0x58
   16df2:	e05f      	b.n	16eb4 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x268>
    }
    else if ((diff == 0.5) && (whole & 1)) {
   16df4:	eddd 7a10 	vldr	s15, [sp, #64]	; 0x40
   16df8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
   16dfc:	eef4 7a47 	vcmp.f32	s15, s14
   16e00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   16e04:	d156      	bne.n	16eb4 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x268>
   16e06:	9b16      	ldr	r3, [sp, #88]	; 0x58
   16e08:	f003 0301 	and.w	r3, r3, #1
   16e0c:	2b00      	cmp	r3, #0
   16e0e:	d051      	beq.n	16eb4 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x268>
      // exactly 0.5 and ODD, then round up
      // 1.5 -> 2, but 2.5 -> 2
      ++whole;
   16e10:	9b16      	ldr	r3, [sp, #88]	; 0x58
   16e12:	3301      	adds	r3, #1
   16e14:	9316      	str	r3, [sp, #88]	; 0x58
   16e16:	e04d      	b.n	16eb4 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x268>
    }
  }
  else {
    unsigned int count = prec;
   16e18:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   16e1a:	9314      	str	r3, [sp, #80]	; 0x50
    // now do fractional part, as an unsigned number
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
   16e1c:	9b18      	ldr	r3, [sp, #96]	; 0x60
   16e1e:	2b1f      	cmp	r3, #31
   16e20:	d827      	bhi.n	16e72 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x226>
      --count;
   16e22:	9b14      	ldr	r3, [sp, #80]	; 0x50
   16e24:	3b01      	subs	r3, #1
   16e26:	9314      	str	r3, [sp, #80]	; 0x50
      buf[len++] = (char)(48U + (frac % 10U));
   16e28:	9915      	ldr	r1, [sp, #84]	; 0x54
   16e2a:	4b49      	ldr	r3, [pc, #292]	; (16f50 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x304>)
   16e2c:	fba3 2301 	umull	r2, r3, r3, r1
   16e30:	08da      	lsrs	r2, r3, #3
   16e32:	4613      	mov	r3, r2
   16e34:	009b      	lsls	r3, r3, #2
   16e36:	4413      	add	r3, r2
   16e38:	005b      	lsls	r3, r3, #1
   16e3a:	1aca      	subs	r2, r1, r3
   16e3c:	b2d3      	uxtb	r3, r2
   16e3e:	3330      	adds	r3, #48	; 0x30
   16e40:	b2d9      	uxtb	r1, r3
   16e42:	9b18      	ldr	r3, [sp, #96]	; 0x60
   16e44:	1c5a      	adds	r2, r3, #1
   16e46:	9218      	str	r2, [sp, #96]	; 0x60
   16e48:	aa1a      	add	r2, sp, #104	; 0x68
   16e4a:	4413      	add	r3, r2
   16e4c:	460a      	mov	r2, r1
   16e4e:	f803 2c50 	strb.w	r2, [r3, #-80]
      if (!(frac /= 10U)) {
   16e52:	9b15      	ldr	r3, [sp, #84]	; 0x54
   16e54:	4a3e      	ldr	r2, [pc, #248]	; (16f50 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x304>)
   16e56:	fba2 2303 	umull	r2, r3, r2, r3
   16e5a:	08db      	lsrs	r3, r3, #3
   16e5c:	9315      	str	r3, [sp, #84]	; 0x54
   16e5e:	9b15      	ldr	r3, [sp, #84]	; 0x54
   16e60:	2b00      	cmp	r3, #0
   16e62:	bf0c      	ite	eq
   16e64:	2301      	moveq	r3, #1
   16e66:	2300      	movne	r3, #0
   16e68:	b2db      	uxtb	r3, r3
   16e6a:	2b00      	cmp	r3, #0
   16e6c:	d100      	bne.n	16e70 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x224>
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
   16e6e:	e7d5      	b.n	16e1c <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x1d0>
        break;
   16e70:	bf00      	nop
      }
    }
    // add extra 0s
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
   16e72:	9b18      	ldr	r3, [sp, #96]	; 0x60
   16e74:	2b1f      	cmp	r3, #31
   16e76:	d806      	bhi.n	16e86 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x23a>
   16e78:	9b14      	ldr	r3, [sp, #80]	; 0x50
   16e7a:	1e5a      	subs	r2, r3, #1
   16e7c:	9214      	str	r2, [sp, #80]	; 0x50
   16e7e:	2b00      	cmp	r3, #0
   16e80:	d001      	beq.n	16e86 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x23a>
   16e82:	2301      	movs	r3, #1
   16e84:	e000      	b.n	16e88 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x23c>
   16e86:	2300      	movs	r3, #0
   16e88:	2b00      	cmp	r3, #0
   16e8a:	d008      	beq.n	16e9e <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x252>
      buf[len++] = '0';
   16e8c:	9b18      	ldr	r3, [sp, #96]	; 0x60
   16e8e:	1c5a      	adds	r2, r3, #1
   16e90:	9218      	str	r2, [sp, #96]	; 0x60
   16e92:	aa1a      	add	r2, sp, #104	; 0x68
   16e94:	4413      	add	r3, r2
   16e96:	2230      	movs	r2, #48	; 0x30
   16e98:	f803 2c50 	strb.w	r2, [r3, #-80]
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
   16e9c:	e7e9      	b.n	16e72 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x226>
    }
    if (len < PRINTF_FTOA_BUFFER_SIZE) {
   16e9e:	9b18      	ldr	r3, [sp, #96]	; 0x60
   16ea0:	2b1f      	cmp	r3, #31
   16ea2:	d807      	bhi.n	16eb4 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x268>
      // add decimal
      buf[len++] = '.';
   16ea4:	9b18      	ldr	r3, [sp, #96]	; 0x60
   16ea6:	1c5a      	adds	r2, r3, #1
   16ea8:	9218      	str	r2, [sp, #96]	; 0x60
   16eaa:	aa1a      	add	r2, sp, #104	; 0x68
   16eac:	4413      	add	r3, r2
   16eae:	222e      	movs	r2, #46	; 0x2e
   16eb0:	f803 2c50 	strb.w	r2, [r3, #-80]
    }
  }

  // do whole part, number is reversed
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
   16eb4:	9b18      	ldr	r3, [sp, #96]	; 0x60
   16eb6:	2b1f      	cmp	r3, #31
   16eb8:	d828      	bhi.n	16f0c <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x2c0>
    buf[len++] = (char)(48 + (whole % 10));
   16eba:	9a16      	ldr	r2, [sp, #88]	; 0x58
   16ebc:	4b25      	ldr	r3, [pc, #148]	; (16f54 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x308>)
   16ebe:	fb83 1302 	smull	r1, r3, r3, r2
   16ec2:	1099      	asrs	r1, r3, #2
   16ec4:	17d3      	asrs	r3, r2, #31
   16ec6:	1ac9      	subs	r1, r1, r3
   16ec8:	460b      	mov	r3, r1
   16eca:	009b      	lsls	r3, r3, #2
   16ecc:	440b      	add	r3, r1
   16ece:	005b      	lsls	r3, r3, #1
   16ed0:	1ad1      	subs	r1, r2, r3
   16ed2:	b2cb      	uxtb	r3, r1
   16ed4:	3330      	adds	r3, #48	; 0x30
   16ed6:	b2d9      	uxtb	r1, r3
   16ed8:	9b18      	ldr	r3, [sp, #96]	; 0x60
   16eda:	1c5a      	adds	r2, r3, #1
   16edc:	9218      	str	r2, [sp, #96]	; 0x60
   16ede:	aa1a      	add	r2, sp, #104	; 0x68
   16ee0:	4413      	add	r3, r2
   16ee2:	460a      	mov	r2, r1
   16ee4:	f803 2c50 	strb.w	r2, [r3, #-80]
    if (!(whole /= 10)) {
   16ee8:	9b16      	ldr	r3, [sp, #88]	; 0x58
   16eea:	4a1a      	ldr	r2, [pc, #104]	; (16f54 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x308>)
   16eec:	fb82 1203 	smull	r1, r2, r2, r3
   16ef0:	1092      	asrs	r2, r2, #2
   16ef2:	17db      	asrs	r3, r3, #31
   16ef4:	1ad3      	subs	r3, r2, r3
   16ef6:	9316      	str	r3, [sp, #88]	; 0x58
   16ef8:	9b16      	ldr	r3, [sp, #88]	; 0x58
   16efa:	2b00      	cmp	r3, #0
   16efc:	bf0c      	ite	eq
   16efe:	2301      	moveq	r3, #1
   16f00:	2300      	movne	r3, #0
   16f02:	b2db      	uxtb	r3, r3
   16f04:	2b00      	cmp	r3, #0
   16f06:	d100      	bne.n	16f0a <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x2be>
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
   16f08:	e7d4      	b.n	16eb4 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x268>
      break;
   16f0a:	bf00      	nop
    }
  }

  // pad leading zeros
  while (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
   16f0c:	9b20      	ldr	r3, [sp, #128]	; 0x80
   16f0e:	f003 0302 	and.w	r3, r3, #2
   16f12:	2b00      	cmp	r3, #0
   16f14:	d120      	bne.n	16f58 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x30c>
   16f16:	9b20      	ldr	r3, [sp, #128]	; 0x80
   16f18:	f003 0301 	and.w	r3, r3, #1
   16f1c:	2b00      	cmp	r3, #0
   16f1e:	d01b      	beq.n	16f58 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x30c>
   16f20:	9a18      	ldr	r2, [sp, #96]	; 0x60
   16f22:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   16f24:	429a      	cmp	r2, r3
   16f26:	d217      	bcs.n	16f58 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x30c>
   16f28:	9b18      	ldr	r3, [sp, #96]	; 0x60
   16f2a:	2b1f      	cmp	r3, #31
   16f2c:	d814      	bhi.n	16f58 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x30c>
    buf[len++] = '0';
   16f2e:	9b18      	ldr	r3, [sp, #96]	; 0x60
   16f30:	1c5a      	adds	r2, r3, #1
   16f32:	9218      	str	r2, [sp, #96]	; 0x60
   16f34:	aa1a      	add	r2, sp, #104	; 0x68
   16f36:	4413      	add	r3, r2
   16f38:	2230      	movs	r2, #48	; 0x30
   16f3a:	f803 2c50 	strb.w	r2, [r3, #-80]
  while (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
   16f3e:	e7e5      	b.n	16f0c <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x2c0>
   16f40:	00016c4d 	.word	0x00016c4d
   16f44:	00000000 	.word	0x00000000
   16f48:	0001a910 	.word	0x0001a910
   16f4c:	4f000000 	.word	0x4f000000
   16f50:	cccccccd 	.word	0xcccccccd
   16f54:	66666667 	.word	0x66666667
  }

  // handle sign
  if ((len == width) && (negative || (flags & FLAGS_PLUS) || (flags & FLAGS_SPACE))) {
   16f58:	9a18      	ldr	r2, [sp, #96]	; 0x60
   16f5a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   16f5c:	429a      	cmp	r2, r3
   16f5e:	d110      	bne.n	16f82 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x336>
   16f60:	f89d 305f 	ldrb.w	r3, [sp, #95]	; 0x5f
   16f64:	2b00      	cmp	r3, #0
   16f66:	d109      	bne.n	16f7c <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x330>
   16f68:	9b20      	ldr	r3, [sp, #128]	; 0x80
   16f6a:	f003 0304 	and.w	r3, r3, #4
   16f6e:	2b00      	cmp	r3, #0
   16f70:	d104      	bne.n	16f7c <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x330>
   16f72:	9b20      	ldr	r3, [sp, #128]	; 0x80
   16f74:	f003 0308 	and.w	r3, r3, #8
   16f78:	2b00      	cmp	r3, #0
   16f7a:	d002      	beq.n	16f82 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x336>
    len--;
   16f7c:	9b18      	ldr	r3, [sp, #96]	; 0x60
   16f7e:	3b01      	subs	r3, #1
   16f80:	9318      	str	r3, [sp, #96]	; 0x60
  }
  if (len < PRINTF_FTOA_BUFFER_SIZE) {
   16f82:	9b18      	ldr	r3, [sp, #96]	; 0x60
   16f84:	2b1f      	cmp	r3, #31
   16f86:	d827      	bhi.n	16fd8 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x38c>
    if (negative) {
   16f88:	f89d 305f 	ldrb.w	r3, [sp, #95]	; 0x5f
   16f8c:	2b00      	cmp	r3, #0
   16f8e:	d008      	beq.n	16fa2 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x356>
      buf[len++] = '-';
   16f90:	9b18      	ldr	r3, [sp, #96]	; 0x60
   16f92:	1c5a      	adds	r2, r3, #1
   16f94:	9218      	str	r2, [sp, #96]	; 0x60
   16f96:	aa1a      	add	r2, sp, #104	; 0x68
   16f98:	4413      	add	r3, r2
   16f9a:	222d      	movs	r2, #45	; 0x2d
   16f9c:	f803 2c50 	strb.w	r2, [r3, #-80]
   16fa0:	e01a      	b.n	16fd8 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x38c>
    }
    else if (flags & FLAGS_PLUS) {
   16fa2:	9b20      	ldr	r3, [sp, #128]	; 0x80
   16fa4:	f003 0304 	and.w	r3, r3, #4
   16fa8:	2b00      	cmp	r3, #0
   16faa:	d008      	beq.n	16fbe <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x372>
      buf[len++] = '+';  // ignore the space if the '+' exists
   16fac:	9b18      	ldr	r3, [sp, #96]	; 0x60
   16fae:	1c5a      	adds	r2, r3, #1
   16fb0:	9218      	str	r2, [sp, #96]	; 0x60
   16fb2:	aa1a      	add	r2, sp, #104	; 0x68
   16fb4:	4413      	add	r3, r2
   16fb6:	222b      	movs	r2, #43	; 0x2b
   16fb8:	f803 2c50 	strb.w	r2, [r3, #-80]
   16fbc:	e00c      	b.n	16fd8 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x38c>
    }
    else if (flags & FLAGS_SPACE) {
   16fbe:	9b20      	ldr	r3, [sp, #128]	; 0x80
   16fc0:	f003 0308 	and.w	r3, r3, #8
   16fc4:	2b00      	cmp	r3, #0
   16fc6:	d007      	beq.n	16fd8 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x38c>
      buf[len++] = ' ';
   16fc8:	9b18      	ldr	r3, [sp, #96]	; 0x60
   16fca:	1c5a      	adds	r2, r3, #1
   16fcc:	9218      	str	r2, [sp, #96]	; 0x60
   16fce:	aa1a      	add	r2, sp, #104	; 0x68
   16fd0:	4413      	add	r3, r2
   16fd2:	2220      	movs	r2, #32
   16fd4:	f803 2c50 	strb.w	r2, [r3, #-80]
    }
  }

  // pad spaces up to given width
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
   16fd8:	9b20      	ldr	r3, [sp, #128]	; 0x80
   16fda:	f003 0302 	and.w	r3, r3, #2
   16fde:	2b00      	cmp	r3, #0
   16fe0:	d116      	bne.n	17010 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x3c4>
   16fe2:	9b20      	ldr	r3, [sp, #128]	; 0x80
   16fe4:	f003 0301 	and.w	r3, r3, #1
   16fe8:	2b00      	cmp	r3, #0
   16fea:	d111      	bne.n	17010 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x3c4>
    for (size_t i = len; i < width; i++) {
   16fec:	9b18      	ldr	r3, [sp, #96]	; 0x60
   16fee:	9313      	str	r3, [sp, #76]	; 0x4c
   16ff0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   16ff2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   16ff4:	429a      	cmp	r2, r3
   16ff6:	d20b      	bcs.n	17010 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x3c4>
      out(' ', buffer, idx++, maxlen);
   16ff8:	9a03      	ldr	r2, [sp, #12]
   16ffa:	1c53      	adds	r3, r2, #1
   16ffc:	9303      	str	r3, [sp, #12]
   16ffe:	9c05      	ldr	r4, [sp, #20]
   17000:	9b02      	ldr	r3, [sp, #8]
   17002:	9904      	ldr	r1, [sp, #16]
   17004:	2020      	movs	r0, #32
   17006:	47a0      	blx	r4
    for (size_t i = len; i < width; i++) {
   17008:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   1700a:	3301      	adds	r3, #1
   1700c:	9313      	str	r3, [sp, #76]	; 0x4c
   1700e:	e7ef      	b.n	16ff0 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x3a4>
    }
  }

  // reverse string
  for (size_t i = 0U; i < len; i++) {
   17010:	2300      	movs	r3, #0
   17012:	9312      	str	r3, [sp, #72]	; 0x48
   17014:	9a12      	ldr	r2, [sp, #72]	; 0x48
   17016:	9b18      	ldr	r3, [sp, #96]	; 0x60
   17018:	429a      	cmp	r2, r3
   1701a:	d212      	bcs.n	17042 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x3f6>
    out(buf[len - i - 1U], buffer, idx++, maxlen);
   1701c:	9a18      	ldr	r2, [sp, #96]	; 0x60
   1701e:	9b12      	ldr	r3, [sp, #72]	; 0x48
   17020:	1ad3      	subs	r3, r2, r3
   17022:	3b01      	subs	r3, #1
   17024:	aa1a      	add	r2, sp, #104	; 0x68
   17026:	4413      	add	r3, r2
   17028:	f813 0c50 	ldrb.w	r0, [r3, #-80]
   1702c:	9a03      	ldr	r2, [sp, #12]
   1702e:	1c53      	adds	r3, r2, #1
   17030:	9303      	str	r3, [sp, #12]
   17032:	9c05      	ldr	r4, [sp, #20]
   17034:	9b02      	ldr	r3, [sp, #8]
   17036:	9904      	ldr	r1, [sp, #16]
   17038:	47a0      	blx	r4
  for (size_t i = 0U; i < len; i++) {
   1703a:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1703c:	3301      	adds	r3, #1
   1703e:	9312      	str	r3, [sp, #72]	; 0x48
   17040:	e7e8      	b.n	17014 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x3c8>
  }

  // append pad spaces up to given width
  if (flags & FLAGS_LEFT) {
   17042:	9b20      	ldr	r3, [sp, #128]	; 0x80
   17044:	f003 0302 	and.w	r3, r3, #2
   17048:	2b00      	cmp	r3, #0
   1704a:	d00e      	beq.n	1706a <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x41e>
    while (idx - start_idx < width) {
   1704c:	9a03      	ldr	r2, [sp, #12]
   1704e:	9b11      	ldr	r3, [sp, #68]	; 0x44
   17050:	1ad3      	subs	r3, r2, r3
   17052:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   17054:	429a      	cmp	r2, r3
   17056:	d908      	bls.n	1706a <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x41e>
      out(' ', buffer, idx++, maxlen);
   17058:	9a03      	ldr	r2, [sp, #12]
   1705a:	1c53      	adds	r3, r2, #1
   1705c:	9303      	str	r3, [sp, #12]
   1705e:	9c05      	ldr	r4, [sp, #20]
   17060:	9b02      	ldr	r3, [sp, #8]
   17062:	9904      	ldr	r1, [sp, #16]
   17064:	2020      	movs	r0, #32
   17066:	47a0      	blx	r4
    while (idx - start_idx < width) {
   17068:	e7f0      	b.n	1704c <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x400>
    }
  }

  return idx;
   1706a:	9c03      	ldr	r4, [sp, #12]
   1706c:	462b      	mov	r3, r5
   1706e:	4619      	mov	r1, r3
   17070:	4803      	ldr	r0, [pc, #12]	; (17080 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x434>)
   17072:	f7ff fa19 	bl	164a8 <__cyg_profile_func_exit>
   17076:	4623      	mov	r3, r4
}
   17078:	4618      	mov	r0, r3
   1707a:	b01b      	add	sp, #108	; 0x6c
   1707c:	bd30      	pop	{r4, r5, pc}
   1707e:	bf00      	nop
   17080:	00016c4d 	.word	0x00016c4d

00017084 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)>:
#endif  // PRINTF_SUPPORT_FLOAT


// internal vsnprintf
static int _vsnprintf(out_fct_type out, char* buffer, const size_t maxlen, const char* format, va_list va)
{
   17084:	b570      	push	{r4, r5, r6, lr}
   17086:	b0a0      	sub	sp, #128	; 0x80
   17088:	4676      	mov	r6, lr
   1708a:	900d      	str	r0, [sp, #52]	; 0x34
   1708c:	910c      	str	r1, [sp, #48]	; 0x30
   1708e:	920b      	str	r2, [sp, #44]	; 0x2c
   17090:	930a      	str	r3, [sp, #40]	; 0x28
   17092:	4633      	mov	r3, r6
   17094:	4619      	mov	r1, r3
   17096:	48a7      	ldr	r0, [pc, #668]	; (17334 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2b0>)
   17098:	f7ff f9f2 	bl	16480 <__cyg_profile_func_enter>
  unsigned int flags, width, precision, n;
  size_t idx = 0U;
   1709c:	2300      	movs	r3, #0
   1709e:	931b      	str	r3, [sp, #108]	; 0x6c

  if (!buffer) {
   170a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   170a2:	2b00      	cmp	r3, #0
   170a4:	d101      	bne.n	170aa <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x26>
    // use null output function
    out = _out_null;
   170a6:	4ba4      	ldr	r3, [pc, #656]	; (17338 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2b4>)
   170a8:	930d      	str	r3, [sp, #52]	; 0x34
  }

  while (*format)
   170aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   170ac:	781b      	ldrb	r3, [r3, #0]
   170ae:	2b00      	cmp	r3, #0
   170b0:	f000 8448 	beq.w	17944 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8c0>
  {
    // format specifier?  %[flags][width][.precision][length]
    if (*format != '%') {
   170b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   170b6:	781b      	ldrb	r3, [r3, #0]
   170b8:	2b25      	cmp	r3, #37	; 0x25
   170ba:	d00d      	beq.n	170d8 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x54>
      // no
      out(*format, buffer, idx++, maxlen);
   170bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   170be:	7818      	ldrb	r0, [r3, #0]
   170c0:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   170c2:	1c53      	adds	r3, r2, #1
   170c4:	931b      	str	r3, [sp, #108]	; 0x6c
   170c6:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   170c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   170ca:	990c      	ldr	r1, [sp, #48]	; 0x30
   170cc:	47a0      	blx	r4
      format++;
   170ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   170d0:	3301      	adds	r3, #1
   170d2:	930a      	str	r3, [sp, #40]	; 0x28
      continue;
   170d4:	f000 bc34 	b.w	17940 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8bc>
    }
    else {
      // yes, evaluate it
      format++;
   170d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   170da:	3301      	adds	r3, #1
   170dc:	930a      	str	r3, [sp, #40]	; 0x28
    }

    // evaluate flags
    flags = 0U;
   170de:	2300      	movs	r3, #0
   170e0:	931f      	str	r3, [sp, #124]	; 0x7c
    do {
      switch (*format) {
   170e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   170e4:	781b      	ldrb	r3, [r3, #0]
   170e6:	3b20      	subs	r3, #32
   170e8:	2b10      	cmp	r3, #16
   170ea:	d857      	bhi.n	1719c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x118>
   170ec:	a201      	add	r2, pc, #4	; (adr r2, 170f4 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x70>)
   170ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   170f2:	bf00      	nop
   170f4:	00017175 	.word	0x00017175
   170f8:	0001719d 	.word	0x0001719d
   170fc:	0001719d 	.word	0x0001719d
   17100:	00017189 	.word	0x00017189
   17104:	0001719d 	.word	0x0001719d
   17108:	0001719d 	.word	0x0001719d
   1710c:	0001719d 	.word	0x0001719d
   17110:	0001719d 	.word	0x0001719d
   17114:	0001719d 	.word	0x0001719d
   17118:	0001719d 	.word	0x0001719d
   1711c:	0001719d 	.word	0x0001719d
   17120:	00017161 	.word	0x00017161
   17124:	0001719d 	.word	0x0001719d
   17128:	0001714d 	.word	0x0001714d
   1712c:	0001719d 	.word	0x0001719d
   17130:	0001719d 	.word	0x0001719d
   17134:	00017139 	.word	0x00017139
        case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
   17138:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   1713a:	f043 0301 	orr.w	r3, r3, #1
   1713e:	931f      	str	r3, [sp, #124]	; 0x7c
   17140:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   17142:	3301      	adds	r3, #1
   17144:	930a      	str	r3, [sp, #40]	; 0x28
   17146:	2301      	movs	r3, #1
   17148:	931c      	str	r3, [sp, #112]	; 0x70
   1714a:	e02a      	b.n	171a2 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x11e>
        case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
   1714c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   1714e:	f043 0302 	orr.w	r3, r3, #2
   17152:	931f      	str	r3, [sp, #124]	; 0x7c
   17154:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   17156:	3301      	adds	r3, #1
   17158:	930a      	str	r3, [sp, #40]	; 0x28
   1715a:	2301      	movs	r3, #1
   1715c:	931c      	str	r3, [sp, #112]	; 0x70
   1715e:	e020      	b.n	171a2 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x11e>
        case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
   17160:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   17162:	f043 0304 	orr.w	r3, r3, #4
   17166:	931f      	str	r3, [sp, #124]	; 0x7c
   17168:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1716a:	3301      	adds	r3, #1
   1716c:	930a      	str	r3, [sp, #40]	; 0x28
   1716e:	2301      	movs	r3, #1
   17170:	931c      	str	r3, [sp, #112]	; 0x70
   17172:	e016      	b.n	171a2 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x11e>
        case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
   17174:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   17176:	f043 0308 	orr.w	r3, r3, #8
   1717a:	931f      	str	r3, [sp, #124]	; 0x7c
   1717c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1717e:	3301      	adds	r3, #1
   17180:	930a      	str	r3, [sp, #40]	; 0x28
   17182:	2301      	movs	r3, #1
   17184:	931c      	str	r3, [sp, #112]	; 0x70
   17186:	e00c      	b.n	171a2 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x11e>
        case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;
   17188:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   1718a:	f043 0310 	orr.w	r3, r3, #16
   1718e:	931f      	str	r3, [sp, #124]	; 0x7c
   17190:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   17192:	3301      	adds	r3, #1
   17194:	930a      	str	r3, [sp, #40]	; 0x28
   17196:	2301      	movs	r3, #1
   17198:	931c      	str	r3, [sp, #112]	; 0x70
   1719a:	e002      	b.n	171a2 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x11e>
        default :                                   n = 0U; break;
   1719c:	2300      	movs	r3, #0
   1719e:	931c      	str	r3, [sp, #112]	; 0x70
   171a0:	bf00      	nop
      }
    } while (n);
   171a2:	9b1c      	ldr	r3, [sp, #112]	; 0x70
   171a4:	2b00      	cmp	r3, #0
   171a6:	d000      	beq.n	171aa <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x126>
    do {
   171a8:	e79b      	b.n	170e2 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x5e>

    // evaluate width field
    width = 0U;
   171aa:	2300      	movs	r3, #0
   171ac:	931e      	str	r3, [sp, #120]	; 0x78
    if (_is_digit(*format)) {
   171ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   171b0:	781b      	ldrb	r3, [r3, #0]
   171b2:	4618      	mov	r0, r3
   171b4:	f7ff fade 	bl	16774 <_is_digit(char)>
   171b8:	4603      	mov	r3, r0
   171ba:	2b00      	cmp	r3, #0
   171bc:	d005      	beq.n	171ca <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x146>
      width = _atoi(&format);
   171be:	ab0a      	add	r3, sp, #40	; 0x28
   171c0:	4618      	mov	r0, r3
   171c2:	f7ff faf9 	bl	167b8 <_atoi(char const**)>
   171c6:	901e      	str	r0, [sp, #120]	; 0x78
   171c8:	e018      	b.n	171fc <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x178>
    }
    else if (*format == '*') {
   171ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   171cc:	781b      	ldrb	r3, [r3, #0]
   171ce:	2b2a      	cmp	r3, #42	; 0x2a
   171d0:	d114      	bne.n	171fc <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x178>
      const int w = va_arg(va, int);
   171d2:	9b24      	ldr	r3, [sp, #144]	; 0x90
   171d4:	1d1a      	adds	r2, r3, #4
   171d6:	9224      	str	r2, [sp, #144]	; 0x90
   171d8:	681b      	ldr	r3, [r3, #0]
   171da:	9316      	str	r3, [sp, #88]	; 0x58
      if (w < 0) {
   171dc:	9b16      	ldr	r3, [sp, #88]	; 0x58
   171de:	2b00      	cmp	r3, #0
   171e0:	da07      	bge.n	171f2 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x16e>
        flags |= FLAGS_LEFT;    // reverse padding
   171e2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   171e4:	f043 0302 	orr.w	r3, r3, #2
   171e8:	931f      	str	r3, [sp, #124]	; 0x7c
        width = (unsigned int)-w;
   171ea:	9b16      	ldr	r3, [sp, #88]	; 0x58
   171ec:	425b      	negs	r3, r3
   171ee:	931e      	str	r3, [sp, #120]	; 0x78
   171f0:	e001      	b.n	171f6 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x172>
      }
      else {
        width = (unsigned int)w;
   171f2:	9b16      	ldr	r3, [sp, #88]	; 0x58
   171f4:	931e      	str	r3, [sp, #120]	; 0x78
      }
      format++;
   171f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   171f8:	3301      	adds	r3, #1
   171fa:	930a      	str	r3, [sp, #40]	; 0x28
    }

    // evaluate precision field
    precision = 0U;
   171fc:	2300      	movs	r3, #0
   171fe:	931d      	str	r3, [sp, #116]	; 0x74
    if (*format == '.') {
   17200:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   17202:	781b      	ldrb	r3, [r3, #0]
   17204:	2b2e      	cmp	r3, #46	; 0x2e
   17206:	d124      	bne.n	17252 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x1ce>
      flags |= FLAGS_PRECISION;
   17208:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   1720a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
   1720e:	931f      	str	r3, [sp, #124]	; 0x7c
      format++;
   17210:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   17212:	3301      	adds	r3, #1
   17214:	930a      	str	r3, [sp, #40]	; 0x28
      if (_is_digit(*format)) {
   17216:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   17218:	781b      	ldrb	r3, [r3, #0]
   1721a:	4618      	mov	r0, r3
   1721c:	f7ff faaa 	bl	16774 <_is_digit(char)>
   17220:	4603      	mov	r3, r0
   17222:	2b00      	cmp	r3, #0
   17224:	d005      	beq.n	17232 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x1ae>
        precision = _atoi(&format);
   17226:	ab0a      	add	r3, sp, #40	; 0x28
   17228:	4618      	mov	r0, r3
   1722a:	f7ff fac5 	bl	167b8 <_atoi(char const**)>
   1722e:	901d      	str	r0, [sp, #116]	; 0x74
   17230:	e00f      	b.n	17252 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x1ce>
      }
      else if (*format == '*') {
   17232:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   17234:	781b      	ldrb	r3, [r3, #0]
   17236:	2b2a      	cmp	r3, #42	; 0x2a
   17238:	d10b      	bne.n	17252 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x1ce>
        const int prec = (int)va_arg(va, int);
   1723a:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1723c:	1d1a      	adds	r2, r3, #4
   1723e:	9224      	str	r2, [sp, #144]	; 0x90
   17240:	681b      	ldr	r3, [r3, #0]
   17242:	9315      	str	r3, [sp, #84]	; 0x54
        precision = prec > 0 ? (unsigned int)prec : 0U;
   17244:	9b15      	ldr	r3, [sp, #84]	; 0x54
   17246:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   1724a:	931d      	str	r3, [sp, #116]	; 0x74
        format++;
   1724c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1724e:	3301      	adds	r3, #1
   17250:	930a      	str	r3, [sp, #40]	; 0x28
      }
    }

    // evaluate length field
    switch (*format) {
   17252:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   17254:	781b      	ldrb	r3, [r3, #0]
   17256:	3b68      	subs	r3, #104	; 0x68
   17258:	2b12      	cmp	r3, #18
   1725a:	d867      	bhi.n	1732c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2a8>
   1725c:	a201      	add	r2, pc, #4	; (adr r2, 17264 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x1e0>)
   1725e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   17262:	bf00      	nop
   17264:	000172d7 	.word	0x000172d7
   17268:	0001732d 	.word	0x0001732d
   1726c:	0001730d 	.word	0x0001730d
   17270:	0001732d 	.word	0x0001732d
   17274:	000172b1 	.word	0x000172b1
   17278:	0001732d 	.word	0x0001732d
   1727c:	0001732d 	.word	0x0001732d
   17280:	0001732d 	.word	0x0001732d
   17284:	0001732d 	.word	0x0001732d
   17288:	0001732d 	.word	0x0001732d
   1728c:	0001732d 	.word	0x0001732d
   17290:	0001732d 	.word	0x0001732d
   17294:	000172fd 	.word	0x000172fd
   17298:	0001732d 	.word	0x0001732d
   1729c:	0001732d 	.word	0x0001732d
   172a0:	0001732d 	.word	0x0001732d
   172a4:	0001732d 	.word	0x0001732d
   172a8:	0001732d 	.word	0x0001732d
   172ac:	0001731d 	.word	0x0001731d
      case 'l' :
        flags |= FLAGS_LONG;
   172b0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   172b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   172b6:	931f      	str	r3, [sp, #124]	; 0x7c
        format++;
   172b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   172ba:	3301      	adds	r3, #1
   172bc:	930a      	str	r3, [sp, #40]	; 0x28
        if (*format == 'l') {
   172be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   172c0:	781b      	ldrb	r3, [r3, #0]
   172c2:	2b6c      	cmp	r3, #108	; 0x6c
   172c4:	d134      	bne.n	17330 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2ac>
          flags |= FLAGS_LONG_LONG;
   172c6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   172c8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   172cc:	931f      	str	r3, [sp, #124]	; 0x7c
          format++;
   172ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   172d0:	3301      	adds	r3, #1
   172d2:	930a      	str	r3, [sp, #40]	; 0x28
        }
        break;
   172d4:	e02c      	b.n	17330 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2ac>
      case 'h' :
        flags |= FLAGS_SHORT;
   172d6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   172d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   172dc:	931f      	str	r3, [sp, #124]	; 0x7c
        format++;
   172de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   172e0:	3301      	adds	r3, #1
   172e2:	930a      	str	r3, [sp, #40]	; 0x28
        if (*format == 'h') {
   172e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   172e6:	781b      	ldrb	r3, [r3, #0]
   172e8:	2b68      	cmp	r3, #104	; 0x68
   172ea:	d127      	bne.n	1733c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2b8>
          flags |= FLAGS_CHAR;
   172ec:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   172ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   172f2:	931f      	str	r3, [sp, #124]	; 0x7c
          format++;
   172f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   172f6:	3301      	adds	r3, #1
   172f8:	930a      	str	r3, [sp, #40]	; 0x28
        }
        break;
   172fa:	e01f      	b.n	1733c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2b8>
#if defined(PRINTF_SUPPORT_PTRDIFF_T)
      case 't' :
        flags |= (sizeof(ptrdiff_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
   172fc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   172fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   17302:	931f      	str	r3, [sp, #124]	; 0x7c
        format++;
   17304:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   17306:	3301      	adds	r3, #1
   17308:	930a      	str	r3, [sp, #40]	; 0x28
        break;
   1730a:	e018      	b.n	1733e <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2ba>
#endif
      case 'j' :
        flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
   1730c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   1730e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   17312:	931f      	str	r3, [sp, #124]	; 0x7c
        format++;
   17314:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   17316:	3301      	adds	r3, #1
   17318:	930a      	str	r3, [sp, #40]	; 0x28
        break;
   1731a:	e010      	b.n	1733e <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2ba>
      case 'z' :
        flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
   1731c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   1731e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   17322:	931f      	str	r3, [sp, #124]	; 0x7c
        format++;
   17324:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   17326:	3301      	adds	r3, #1
   17328:	930a      	str	r3, [sp, #40]	; 0x28
        break;
   1732a:	e008      	b.n	1733e <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2ba>
      default :
        break;
   1732c:	bf00      	nop
   1732e:	e006      	b.n	1733e <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2ba>
        break;
   17330:	bf00      	nop
   17332:	e004      	b.n	1733e <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2ba>
   17334:	00017085 	.word	0x00017085
   17338:	000166bd 	.word	0x000166bd
        break;
   1733c:	bf00      	nop
    }

    // evaluate specifier
    switch (*format) {
   1733e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   17340:	781b      	ldrb	r3, [r3, #0]
   17342:	3b25      	subs	r3, #37	; 0x25
   17344:	2b53      	cmp	r3, #83	; 0x53
   17346:	f200 82ee 	bhi.w	17926 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8a2>
   1734a:	a201      	add	r2, pc, #4	; (adr r2, 17350 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2cc>)
   1734c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   17350:	0001790f 	.word	0x0001790f
   17354:	00017927 	.word	0x00017927
   17358:	00017927 	.word	0x00017927
   1735c:	00017927 	.word	0x00017927
   17360:	00017927 	.word	0x00017927
   17364:	00017927 	.word	0x00017927
   17368:	00017927 	.word	0x00017927
   1736c:	00017927 	.word	0x00017927
   17370:	00017927 	.word	0x00017927
   17374:	00017927 	.word	0x00017927
   17378:	00017927 	.word	0x00017927
   1737c:	00017927 	.word	0x00017927
   17380:	00017927 	.word	0x00017927
   17384:	00017927 	.word	0x00017927
   17388:	00017927 	.word	0x00017927
   1738c:	00017927 	.word	0x00017927
   17390:	00017927 	.word	0x00017927
   17394:	00017927 	.word	0x00017927
   17398:	00017927 	.word	0x00017927
   1739c:	00017927 	.word	0x00017927
   173a0:	00017927 	.word	0x00017927
   173a4:	00017927 	.word	0x00017927
   173a8:	00017927 	.word	0x00017927
   173ac:	00017927 	.word	0x00017927
   173b0:	00017927 	.word	0x00017927
   173b4:	00017927 	.word	0x00017927
   173b8:	00017927 	.word	0x00017927
   173bc:	00017927 	.word	0x00017927
   173c0:	00017927 	.word	0x00017927
   173c4:	00017927 	.word	0x00017927
   173c8:	00017927 	.word	0x00017927
   173cc:	00017927 	.word	0x00017927
   173d0:	00017927 	.word	0x00017927
   173d4:	0001772d 	.word	0x0001772d
   173d8:	00017927 	.word	0x00017927
   173dc:	00017927 	.word	0x00017927
   173e0:	00017927 	.word	0x00017927
   173e4:	00017927 	.word	0x00017927
   173e8:	00017927 	.word	0x00017927
   173ec:	00017927 	.word	0x00017927
   173f0:	00017927 	.word	0x00017927
   173f4:	00017927 	.word	0x00017927
   173f8:	00017927 	.word	0x00017927
   173fc:	00017927 	.word	0x00017927
   17400:	00017927 	.word	0x00017927
   17404:	00017927 	.word	0x00017927
   17408:	00017927 	.word	0x00017927
   1740c:	00017927 	.word	0x00017927
   17410:	00017927 	.word	0x00017927
   17414:	00017927 	.word	0x00017927
   17418:	00017927 	.word	0x00017927
   1741c:	000174a1 	.word	0x000174a1
   17420:	00017927 	.word	0x00017927
   17424:	00017927 	.word	0x00017927
   17428:	00017927 	.word	0x00017927
   1742c:	00017927 	.word	0x00017927
   17430:	00017927 	.word	0x00017927
   17434:	00017927 	.word	0x00017927
   17438:	00017927 	.word	0x00017927
   1743c:	00017927 	.word	0x00017927
   17440:	00017927 	.word	0x00017927
   17444:	000174a1 	.word	0x000174a1
   17448:	00017769 	.word	0x00017769
   1744c:	000174a1 	.word	0x000174a1
   17450:	00017927 	.word	0x00017927
   17454:	0001772d 	.word	0x0001772d
   17458:	00017927 	.word	0x00017927
   1745c:	00017927 	.word	0x00017927
   17460:	000174a1 	.word	0x000174a1
   17464:	00017927 	.word	0x00017927
   17468:	00017927 	.word	0x00017927
   1746c:	00017927 	.word	0x00017927
   17470:	00017927 	.word	0x00017927
   17474:	00017927 	.word	0x00017927
   17478:	000174a1 	.word	0x000174a1
   1747c:	000178c7 	.word	0x000178c7
   17480:	00017927 	.word	0x00017927
   17484:	00017927 	.word	0x00017927
   17488:	000177f1 	.word	0x000177f1
   1748c:	00017927 	.word	0x00017927
   17490:	000174a1 	.word	0x000174a1
   17494:	00017927 	.word	0x00017927
   17498:	00017927 	.word	0x00017927
   1749c:	000174a1 	.word	0x000174a1
      case 'X' :
      case 'o' :
      case 'b' : {
        // set the base
        unsigned int base;
        if (*format == 'x' || *format == 'X') {
   174a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   174a2:	781b      	ldrb	r3, [r3, #0]
   174a4:	2b78      	cmp	r3, #120	; 0x78
   174a6:	d003      	beq.n	174b0 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x42c>
   174a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   174aa:	781b      	ldrb	r3, [r3, #0]
   174ac:	2b58      	cmp	r3, #88	; 0x58
   174ae:	d102      	bne.n	174b6 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x432>
          base = 16U;
   174b0:	2310      	movs	r3, #16
   174b2:	931a      	str	r3, [sp, #104]	; 0x68
   174b4:	e013      	b.n	174de <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x45a>
        }
        else if (*format == 'o') {
   174b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   174b8:	781b      	ldrb	r3, [r3, #0]
   174ba:	2b6f      	cmp	r3, #111	; 0x6f
   174bc:	d102      	bne.n	174c4 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x440>
          base =  8U;
   174be:	2308      	movs	r3, #8
   174c0:	931a      	str	r3, [sp, #104]	; 0x68
   174c2:	e00c      	b.n	174de <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x45a>
        }
        else if (*format == 'b') {
   174c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   174c6:	781b      	ldrb	r3, [r3, #0]
   174c8:	2b62      	cmp	r3, #98	; 0x62
   174ca:	d102      	bne.n	174d2 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x44e>
          base =  2U;
   174cc:	2302      	movs	r3, #2
   174ce:	931a      	str	r3, [sp, #104]	; 0x68
   174d0:	e005      	b.n	174de <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x45a>
        }
        else {
          base = 10U;
   174d2:	230a      	movs	r3, #10
   174d4:	931a      	str	r3, [sp, #104]	; 0x68
          flags &= ~FLAGS_HASH;   // no hash for dec format
   174d6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   174d8:	f023 0310 	bic.w	r3, r3, #16
   174dc:	931f      	str	r3, [sp, #124]	; 0x7c
        }
        // uppercase
        if (*format == 'X') {
   174de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   174e0:	781b      	ldrb	r3, [r3, #0]
   174e2:	2b58      	cmp	r3, #88	; 0x58
   174e4:	d103      	bne.n	174ee <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x46a>
          flags |= FLAGS_UPPERCASE;
   174e6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   174e8:	f043 0320 	orr.w	r3, r3, #32
   174ec:	931f      	str	r3, [sp, #124]	; 0x7c
        }

        // no plus or space flag for u, x, X, o, b
        if ((*format != 'i') && (*format != 'd')) {
   174ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   174f0:	781b      	ldrb	r3, [r3, #0]
   174f2:	2b69      	cmp	r3, #105	; 0x69
   174f4:	d007      	beq.n	17506 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x482>
   174f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   174f8:	781b      	ldrb	r3, [r3, #0]
   174fa:	2b64      	cmp	r3, #100	; 0x64
   174fc:	d003      	beq.n	17506 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x482>
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
   174fe:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   17500:	f023 030c 	bic.w	r3, r3, #12
   17504:	931f      	str	r3, [sp, #124]	; 0x7c
        }

        // ignore '0' flag when precision is given
        if (flags & FLAGS_PRECISION) {
   17506:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   17508:	f403 6380 	and.w	r3, r3, #1024	; 0x400
   1750c:	2b00      	cmp	r3, #0
   1750e:	d003      	beq.n	17518 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x494>
          flags &= ~FLAGS_ZEROPAD;
   17510:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   17512:	f023 0301 	bic.w	r3, r3, #1
   17516:	931f      	str	r3, [sp, #124]	; 0x7c
        }

        // convert the integer
        if ((*format == 'i') || (*format == 'd')) {
   17518:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1751a:	781b      	ldrb	r3, [r3, #0]
   1751c:	2b69      	cmp	r3, #105	; 0x69
   1751e:	d004      	beq.n	1752a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x4a6>
   17520:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   17522:	781b      	ldrb	r3, [r3, #0]
   17524:	2b64      	cmp	r3, #100	; 0x64
   17526:	f040 808d 	bne.w	17644 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x5c0>
          // signed
          if (flags & FLAGS_LONG_LONG) {
   1752a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   1752c:	f403 7300 	and.w	r3, r3, #512	; 0x200
   17530:	2b00      	cmp	r3, #0
   17532:	d02e      	beq.n	17592 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x50e>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            const long long value = va_arg(va, long long);
   17534:	9b24      	ldr	r3, [sp, #144]	; 0x90
   17536:	3307      	adds	r3, #7
   17538:	f023 0307 	bic.w	r3, r3, #7
   1753c:	f103 0208 	add.w	r2, r3, #8
   17540:	9224      	str	r2, [sp, #144]	; 0x90
   17542:	e9d3 3400 	ldrd	r3, r4, [r3]
   17546:	e9cd 340e 	strd	r3, r4, [sp, #56]	; 0x38
            idx = _ntoa_long_long(out, buffer, idx, maxlen, (unsigned long long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
   1754a:	e9dd 340e 	ldrd	r3, r4, [sp, #56]	; 0x38
   1754e:	2b00      	cmp	r3, #0
   17550:	f174 0200 	sbcs.w	r2, r4, #0
   17554:	da02      	bge.n	1755c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x4d8>
   17556:	425b      	negs	r3, r3
   17558:	eb64 0444 	sbc.w	r4, r4, r4, lsl #1
   1755c:	4619      	mov	r1, r3
   1755e:	4622      	mov	r2, r4
   17560:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   17562:	0fdb      	lsrs	r3, r3, #31
   17564:	b2d8      	uxtb	r0, r3
   17566:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   17568:	f04f 0400 	mov.w	r4, #0
   1756c:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
   1756e:	9508      	str	r5, [sp, #32]
   17570:	9d1e      	ldr	r5, [sp, #120]	; 0x78
   17572:	9507      	str	r5, [sp, #28]
   17574:	9d1d      	ldr	r5, [sp, #116]	; 0x74
   17576:	9506      	str	r5, [sp, #24]
   17578:	e9cd 3404 	strd	r3, r4, [sp, #16]
   1757c:	9002      	str	r0, [sp, #8]
   1757e:	e9cd 1200 	strd	r1, r2, [sp]
   17582:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   17584:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   17586:	990c      	ldr	r1, [sp, #48]	; 0x30
   17588:	980d      	ldr	r0, [sp, #52]	; 0x34
   1758a:	f7ff fae5 	bl	16b58 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)>
   1758e:	901b      	str	r0, [sp, #108]	; 0x6c
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
          }
          else {
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
          }
   17590:	e0c8      	b.n	17724 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x6a0>
          else if (flags & FLAGS_LONG) {
   17592:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   17594:	f403 7380 	and.w	r3, r3, #256	; 0x100
   17598:	2b00      	cmp	r3, #0
   1759a:	d01e      	beq.n	175da <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x556>
            const long value = va_arg(va, long);
   1759c:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1759e:	1d1a      	adds	r2, r3, #4
   175a0:	9224      	str	r2, [sp, #144]	; 0x90
   175a2:	681b      	ldr	r3, [r3, #0]
   175a4:	9311      	str	r3, [sp, #68]	; 0x44
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
   175a6:	9b11      	ldr	r3, [sp, #68]	; 0x44
   175a8:	2b00      	cmp	r3, #0
   175aa:	bfb8      	it	lt
   175ac:	425b      	neglt	r3, r3
   175ae:	4619      	mov	r1, r3
   175b0:	9b11      	ldr	r3, [sp, #68]	; 0x44
   175b2:	0fdb      	lsrs	r3, r3, #31
   175b4:	b2db      	uxtb	r3, r3
   175b6:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   175b8:	9205      	str	r2, [sp, #20]
   175ba:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   175bc:	9204      	str	r2, [sp, #16]
   175be:	9a1d      	ldr	r2, [sp, #116]	; 0x74
   175c0:	9203      	str	r2, [sp, #12]
   175c2:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   175c4:	9202      	str	r2, [sp, #8]
   175c6:	9301      	str	r3, [sp, #4]
   175c8:	9100      	str	r1, [sp, #0]
   175ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   175cc:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   175ce:	990c      	ldr	r1, [sp, #48]	; 0x30
   175d0:	980d      	ldr	r0, [sp, #52]	; 0x34
   175d2:	f7ff fa4f 	bl	16a74 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)>
   175d6:	901b      	str	r0, [sp, #108]	; 0x6c
          }
   175d8:	e0a4      	b.n	17724 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x6a0>
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
   175da:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   175dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
   175e0:	2b00      	cmp	r3, #0
   175e2:	d005      	beq.n	175f0 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x56c>
   175e4:	9b24      	ldr	r3, [sp, #144]	; 0x90
   175e6:	1d1a      	adds	r2, r3, #4
   175e8:	9224      	str	r2, [sp, #144]	; 0x90
   175ea:	681b      	ldr	r3, [r3, #0]
   175ec:	b2db      	uxtb	r3, r3
   175ee:	e00e      	b.n	1760e <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x58a>
   175f0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   175f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
   175f6:	2b00      	cmp	r3, #0
   175f8:	d005      	beq.n	17606 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x582>
   175fa:	9b24      	ldr	r3, [sp, #144]	; 0x90
   175fc:	1d1a      	adds	r2, r3, #4
   175fe:	9224      	str	r2, [sp, #144]	; 0x90
   17600:	681b      	ldr	r3, [r3, #0]
   17602:	b21b      	sxth	r3, r3
   17604:	e003      	b.n	1760e <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x58a>
   17606:	9b24      	ldr	r3, [sp, #144]	; 0x90
   17608:	1d1a      	adds	r2, r3, #4
   1760a:	9224      	str	r2, [sp, #144]	; 0x90
   1760c:	681b      	ldr	r3, [r3, #0]
   1760e:	9312      	str	r3, [sp, #72]	; 0x48
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
   17610:	9b12      	ldr	r3, [sp, #72]	; 0x48
   17612:	2b00      	cmp	r3, #0
   17614:	bfb8      	it	lt
   17616:	425b      	neglt	r3, r3
   17618:	4619      	mov	r1, r3
   1761a:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1761c:	0fdb      	lsrs	r3, r3, #31
   1761e:	b2db      	uxtb	r3, r3
   17620:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   17622:	9205      	str	r2, [sp, #20]
   17624:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   17626:	9204      	str	r2, [sp, #16]
   17628:	9a1d      	ldr	r2, [sp, #116]	; 0x74
   1762a:	9203      	str	r2, [sp, #12]
   1762c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   1762e:	9202      	str	r2, [sp, #8]
   17630:	9301      	str	r3, [sp, #4]
   17632:	9100      	str	r1, [sp, #0]
   17634:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   17636:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   17638:	990c      	ldr	r1, [sp, #48]	; 0x30
   1763a:	980d      	ldr	r0, [sp, #52]	; 0x34
   1763c:	f7ff fa1a 	bl	16a74 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)>
   17640:	901b      	str	r0, [sp, #108]	; 0x6c
          }
   17642:	e06f      	b.n	17724 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x6a0>
        }
        else {
          // unsigned
          if (flags & FLAGS_LONG_LONG) {
   17644:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   17646:	f403 7300 	and.w	r3, r3, #512	; 0x200
   1764a:	2b00      	cmp	r3, #0
   1764c:	d020      	beq.n	17690 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x60c>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base, precision, width, flags);
   1764e:	9b24      	ldr	r3, [sp, #144]	; 0x90
   17650:	3307      	adds	r3, #7
   17652:	f023 0307 	bic.w	r3, r3, #7
   17656:	f103 0208 	add.w	r2, r3, #8
   1765a:	9224      	str	r2, [sp, #144]	; 0x90
   1765c:	e9d3 3400 	ldrd	r3, r4, [r3]
   17660:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   17662:	4611      	mov	r1, r2
   17664:	f04f 0200 	mov.w	r2, #0
   17668:	981f      	ldr	r0, [sp, #124]	; 0x7c
   1766a:	9008      	str	r0, [sp, #32]
   1766c:	981e      	ldr	r0, [sp, #120]	; 0x78
   1766e:	9007      	str	r0, [sp, #28]
   17670:	981d      	ldr	r0, [sp, #116]	; 0x74
   17672:	9006      	str	r0, [sp, #24]
   17674:	e9cd 1204 	strd	r1, r2, [sp, #16]
   17678:	2200      	movs	r2, #0
   1767a:	9202      	str	r2, [sp, #8]
   1767c:	e9cd 3400 	strd	r3, r4, [sp]
   17680:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   17682:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   17684:	990c      	ldr	r1, [sp, #48]	; 0x30
   17686:	980d      	ldr	r0, [sp, #52]	; 0x34
   17688:	f7ff fa66 	bl	16b58 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)>
   1768c:	901b      	str	r0, [sp, #108]	; 0x6c
   1768e:	e049      	b.n	17724 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x6a0>
#endif
          }
          else if (flags & FLAGS_LONG) {
   17690:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   17692:	f403 7380 	and.w	r3, r3, #256	; 0x100
   17696:	2b00      	cmp	r3, #0
   17698:	d016      	beq.n	176c8 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x644>
            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
   1769a:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1769c:	1d1a      	adds	r2, r3, #4
   1769e:	9224      	str	r2, [sp, #144]	; 0x90
   176a0:	681b      	ldr	r3, [r3, #0]
   176a2:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   176a4:	9205      	str	r2, [sp, #20]
   176a6:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   176a8:	9204      	str	r2, [sp, #16]
   176aa:	9a1d      	ldr	r2, [sp, #116]	; 0x74
   176ac:	9203      	str	r2, [sp, #12]
   176ae:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   176b0:	9202      	str	r2, [sp, #8]
   176b2:	2200      	movs	r2, #0
   176b4:	9201      	str	r2, [sp, #4]
   176b6:	9300      	str	r3, [sp, #0]
   176b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   176ba:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   176bc:	990c      	ldr	r1, [sp, #48]	; 0x30
   176be:	980d      	ldr	r0, [sp, #52]	; 0x34
   176c0:	f7ff f9d8 	bl	16a74 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)>
   176c4:	901b      	str	r0, [sp, #108]	; 0x6c
   176c6:	e02d      	b.n	17724 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x6a0>
          }
          else {
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
   176c8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   176ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
   176ce:	2b00      	cmp	r3, #0
   176d0:	d005      	beq.n	176de <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x65a>
   176d2:	9b24      	ldr	r3, [sp, #144]	; 0x90
   176d4:	1d1a      	adds	r2, r3, #4
   176d6:	9224      	str	r2, [sp, #144]	; 0x90
   176d8:	681b      	ldr	r3, [r3, #0]
   176da:	b2db      	uxtb	r3, r3
   176dc:	e00e      	b.n	176fc <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x678>
   176de:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   176e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
   176e4:	2b00      	cmp	r3, #0
   176e6:	d005      	beq.n	176f4 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x670>
   176e8:	9b24      	ldr	r3, [sp, #144]	; 0x90
   176ea:	1d1a      	adds	r2, r3, #4
   176ec:	9224      	str	r2, [sp, #144]	; 0x90
   176ee:	681b      	ldr	r3, [r3, #0]
   176f0:	b29b      	uxth	r3, r3
   176f2:	e003      	b.n	176fc <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x678>
   176f4:	9b24      	ldr	r3, [sp, #144]	; 0x90
   176f6:	1d1a      	adds	r2, r3, #4
   176f8:	9224      	str	r2, [sp, #144]	; 0x90
   176fa:	681b      	ldr	r3, [r3, #0]
   176fc:	9313      	str	r3, [sp, #76]	; 0x4c
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
   176fe:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   17700:	9305      	str	r3, [sp, #20]
   17702:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   17704:	9304      	str	r3, [sp, #16]
   17706:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   17708:	9303      	str	r3, [sp, #12]
   1770a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   1770c:	9302      	str	r3, [sp, #8]
   1770e:	2300      	movs	r3, #0
   17710:	9301      	str	r3, [sp, #4]
   17712:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   17714:	9300      	str	r3, [sp, #0]
   17716:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   17718:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   1771a:	990c      	ldr	r1, [sp, #48]	; 0x30
   1771c:	980d      	ldr	r0, [sp, #52]	; 0x34
   1771e:	f7ff f9a9 	bl	16a74 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)>
   17722:	901b      	str	r0, [sp, #108]	; 0x6c
          }
        }
        format++;
   17724:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   17726:	3301      	adds	r3, #1
   17728:	930a      	str	r3, [sp, #40]	; 0x28
        break;
   1772a:	e109      	b.n	17940 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8bc>
      }
#if defined(PRINTF_SUPPORT_FLOAT)
      case 'f' :
      case 'F' :
        idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
   1772c:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1772e:	3307      	adds	r3, #7
   17730:	f023 0307 	bic.w	r3, r3, #7
   17734:	f103 0208 	add.w	r2, r3, #8
   17738:	9224      	str	r2, [sp, #144]	; 0x90
   1773a:	ed93 7b00 	vldr	d7, [r3]
   1773e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   17740:	9302      	str	r3, [sp, #8]
   17742:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   17744:	9301      	str	r3, [sp, #4]
   17746:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   17748:	9300      	str	r3, [sp, #0]
   1774a:	eeb0 0a47 	vmov.f32	s0, s14
   1774e:	eef0 0a67 	vmov.f32	s1, s15
   17752:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   17754:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   17756:	990c      	ldr	r1, [sp, #48]	; 0x30
   17758:	980d      	ldr	r0, [sp, #52]	; 0x34
   1775a:	f7ff fa77 	bl	16c4c <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)>
   1775e:	901b      	str	r0, [sp, #108]	; 0x6c
        format++;
   17760:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   17762:	3301      	adds	r3, #1
   17764:	930a      	str	r3, [sp, #40]	; 0x28
        break;
   17766:	e0eb      	b.n	17940 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8bc>
#endif  // PRINTF_SUPPORT_FLOAT
      case 'c' : {
        unsigned int l = 1U;
   17768:	2301      	movs	r3, #1
   1776a:	9319      	str	r3, [sp, #100]	; 0x64
        // pre padding
        if (!(flags & FLAGS_LEFT)) {
   1776c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   1776e:	f003 0302 	and.w	r3, r3, #2
   17772:	2b00      	cmp	r3, #0
   17774:	d113      	bne.n	1779e <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x71a>
          while (l++ < width) {
   17776:	9b19      	ldr	r3, [sp, #100]	; 0x64
   17778:	1c5a      	adds	r2, r3, #1
   1777a:	9219      	str	r2, [sp, #100]	; 0x64
   1777c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   1777e:	429a      	cmp	r2, r3
   17780:	bf8c      	ite	hi
   17782:	2301      	movhi	r3, #1
   17784:	2300      	movls	r3, #0
   17786:	b2db      	uxtb	r3, r3
   17788:	2b00      	cmp	r3, #0
   1778a:	d008      	beq.n	1779e <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x71a>
            out(' ', buffer, idx++, maxlen);
   1778c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   1778e:	1c53      	adds	r3, r2, #1
   17790:	931b      	str	r3, [sp, #108]	; 0x6c
   17792:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   17794:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   17796:	990c      	ldr	r1, [sp, #48]	; 0x30
   17798:	2020      	movs	r0, #32
   1779a:	47a0      	blx	r4
          while (l++ < width) {
   1779c:	e7eb      	b.n	17776 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x6f2>
          }
        }
        // char output
        out((char)va_arg(va, int), buffer, idx++, maxlen);
   1779e:	9b24      	ldr	r3, [sp, #144]	; 0x90
   177a0:	1d1a      	adds	r2, r3, #4
   177a2:	9224      	str	r2, [sp, #144]	; 0x90
   177a4:	681b      	ldr	r3, [r3, #0]
   177a6:	b2d8      	uxtb	r0, r3
   177a8:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   177aa:	1c53      	adds	r3, r2, #1
   177ac:	931b      	str	r3, [sp, #108]	; 0x6c
   177ae:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   177b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   177b2:	990c      	ldr	r1, [sp, #48]	; 0x30
   177b4:	47a0      	blx	r4
        // post padding
        if (flags & FLAGS_LEFT) {
   177b6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   177b8:	f003 0302 	and.w	r3, r3, #2
   177bc:	2b00      	cmp	r3, #0
   177be:	d013      	beq.n	177e8 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x764>
          while (l++ < width) {
   177c0:	9b19      	ldr	r3, [sp, #100]	; 0x64
   177c2:	1c5a      	adds	r2, r3, #1
   177c4:	9219      	str	r2, [sp, #100]	; 0x64
   177c6:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   177c8:	429a      	cmp	r2, r3
   177ca:	bf8c      	ite	hi
   177cc:	2301      	movhi	r3, #1
   177ce:	2300      	movls	r3, #0
   177d0:	b2db      	uxtb	r3, r3
   177d2:	2b00      	cmp	r3, #0
   177d4:	d008      	beq.n	177e8 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x764>
            out(' ', buffer, idx++, maxlen);
   177d6:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   177d8:	1c53      	adds	r3, r2, #1
   177da:	931b      	str	r3, [sp, #108]	; 0x6c
   177dc:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   177de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   177e0:	990c      	ldr	r1, [sp, #48]	; 0x30
   177e2:	2020      	movs	r0, #32
   177e4:	47a0      	blx	r4
          while (l++ < width) {
   177e6:	e7eb      	b.n	177c0 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x73c>
          }
        }
        format++;
   177e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   177ea:	3301      	adds	r3, #1
   177ec:	930a      	str	r3, [sp, #40]	; 0x28
        break;
   177ee:	e0a7      	b.n	17940 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8bc>
      }

      case 's' : {
        char* p = va_arg(va, char*);
   177f0:	9b24      	ldr	r3, [sp, #144]	; 0x90
   177f2:	1d1a      	adds	r2, r3, #4
   177f4:	9224      	str	r2, [sp, #144]	; 0x90
   177f6:	681b      	ldr	r3, [r3, #0]
   177f8:	9318      	str	r3, [sp, #96]	; 0x60
        unsigned int l = _strlen(p);
   177fa:	9818      	ldr	r0, [sp, #96]	; 0x60
   177fc:	f7fe ff98 	bl	16730 <_strlen(char const*)>
   17800:	9017      	str	r0, [sp, #92]	; 0x5c
        // pre padding
        if (flags & FLAGS_PRECISION) {
   17802:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   17804:	f403 6380 	and.w	r3, r3, #1024	; 0x400
   17808:	2b00      	cmp	r3, #0
   1780a:	d007      	beq.n	1781c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x798>
          l = (l < precision ? l : precision);
   1780c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   1780e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   17810:	429a      	cmp	r2, r3
   17812:	d201      	bcs.n	17818 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x794>
   17814:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   17816:	e000      	b.n	1781a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x796>
   17818:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   1781a:	9317      	str	r3, [sp, #92]	; 0x5c
        }
        if (!(flags & FLAGS_LEFT)) {
   1781c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   1781e:	f003 0302 	and.w	r3, r3, #2
   17822:	2b00      	cmp	r3, #0
   17824:	d113      	bne.n	1784e <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7ca>
          while (l++ < width) {
   17826:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   17828:	1c5a      	adds	r2, r3, #1
   1782a:	9217      	str	r2, [sp, #92]	; 0x5c
   1782c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   1782e:	429a      	cmp	r2, r3
   17830:	bf8c      	ite	hi
   17832:	2301      	movhi	r3, #1
   17834:	2300      	movls	r3, #0
   17836:	b2db      	uxtb	r3, r3
   17838:	2b00      	cmp	r3, #0
   1783a:	d008      	beq.n	1784e <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7ca>
            out(' ', buffer, idx++, maxlen);
   1783c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   1783e:	1c53      	adds	r3, r2, #1
   17840:	931b      	str	r3, [sp, #108]	; 0x6c
   17842:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   17844:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   17846:	990c      	ldr	r1, [sp, #48]	; 0x30
   17848:	2020      	movs	r0, #32
   1784a:	47a0      	blx	r4
          while (l++ < width) {
   1784c:	e7eb      	b.n	17826 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7a2>
          }
        }
        // string output
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
   1784e:	9b18      	ldr	r3, [sp, #96]	; 0x60
   17850:	781b      	ldrb	r3, [r3, #0]
   17852:	2b00      	cmp	r3, #0
   17854:	d00b      	beq.n	1786e <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7ea>
   17856:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   17858:	f403 6380 	and.w	r3, r3, #1024	; 0x400
   1785c:	2b00      	cmp	r3, #0
   1785e:	d004      	beq.n	1786a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7e6>
   17860:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   17862:	1e5a      	subs	r2, r3, #1
   17864:	921d      	str	r2, [sp, #116]	; 0x74
   17866:	2b00      	cmp	r3, #0
   17868:	d001      	beq.n	1786e <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7ea>
   1786a:	2301      	movs	r3, #1
   1786c:	e000      	b.n	17870 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7ec>
   1786e:	2300      	movs	r3, #0
   17870:	2b00      	cmp	r3, #0
   17872:	d00b      	beq.n	1788c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x808>
          out(*(p++), buffer, idx++, maxlen);
   17874:	9b18      	ldr	r3, [sp, #96]	; 0x60
   17876:	1c5a      	adds	r2, r3, #1
   17878:	9218      	str	r2, [sp, #96]	; 0x60
   1787a:	7818      	ldrb	r0, [r3, #0]
   1787c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   1787e:	1c53      	adds	r3, r2, #1
   17880:	931b      	str	r3, [sp, #108]	; 0x6c
   17882:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   17884:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   17886:	990c      	ldr	r1, [sp, #48]	; 0x30
   17888:	47a0      	blx	r4
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
   1788a:	e7e0      	b.n	1784e <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7ca>
        }
        // post padding
        if (flags & FLAGS_LEFT) {
   1788c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   1788e:	f003 0302 	and.w	r3, r3, #2
   17892:	2b00      	cmp	r3, #0
   17894:	d013      	beq.n	178be <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x83a>
          while (l++ < width) {
   17896:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   17898:	1c5a      	adds	r2, r3, #1
   1789a:	9217      	str	r2, [sp, #92]	; 0x5c
   1789c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   1789e:	429a      	cmp	r2, r3
   178a0:	bf8c      	ite	hi
   178a2:	2301      	movhi	r3, #1
   178a4:	2300      	movls	r3, #0
   178a6:	b2db      	uxtb	r3, r3
   178a8:	2b00      	cmp	r3, #0
   178aa:	d008      	beq.n	178be <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x83a>
            out(' ', buffer, idx++, maxlen);
   178ac:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   178ae:	1c53      	adds	r3, r2, #1
   178b0:	931b      	str	r3, [sp, #108]	; 0x6c
   178b2:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   178b4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   178b6:	990c      	ldr	r1, [sp, #48]	; 0x30
   178b8:	2020      	movs	r0, #32
   178ba:	47a0      	blx	r4
          while (l++ < width) {
   178bc:	e7eb      	b.n	17896 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x812>
          }
        }
        format++;
   178be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   178c0:	3301      	adds	r3, #1
   178c2:	930a      	str	r3, [sp, #40]	; 0x28
        break;
   178c4:	e03c      	b.n	17940 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8bc>
      }

      case 'p' : {
        width = sizeof(void*) * 2U;
   178c6:	2308      	movs	r3, #8
   178c8:	931e      	str	r3, [sp, #120]	; 0x78
        flags |= FLAGS_ZEROPAD | FLAGS_UPPERCASE;
   178ca:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   178cc:	f043 0321 	orr.w	r3, r3, #33	; 0x21
   178d0:	931f      	str	r3, [sp, #124]	; 0x7c
#if defined(PRINTF_SUPPORT_LONG_LONG)
        const bool is_ll = sizeof(uintptr_t) == sizeof(long long);
   178d2:	2300      	movs	r3, #0
   178d4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
        if (is_ll) {
          idx = _ntoa_long_long(out, buffer, idx, maxlen, (uintptr_t)va_arg(va, void*), false, 16U, precision, width, flags);
        }
        else {
#endif
          idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void*)), false, 16U, precision, width, flags);
   178d8:	9b24      	ldr	r3, [sp, #144]	; 0x90
   178da:	1d1a      	adds	r2, r3, #4
   178dc:	9224      	str	r2, [sp, #144]	; 0x90
   178de:	681b      	ldr	r3, [r3, #0]
   178e0:	461a      	mov	r2, r3
   178e2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   178e4:	9305      	str	r3, [sp, #20]
   178e6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   178e8:	9304      	str	r3, [sp, #16]
   178ea:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   178ec:	9303      	str	r3, [sp, #12]
   178ee:	2310      	movs	r3, #16
   178f0:	9302      	str	r3, [sp, #8]
   178f2:	2300      	movs	r3, #0
   178f4:	9301      	str	r3, [sp, #4]
   178f6:	9200      	str	r2, [sp, #0]
   178f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   178fa:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   178fc:	990c      	ldr	r1, [sp, #48]	; 0x30
   178fe:	980d      	ldr	r0, [sp, #52]	; 0x34
   17900:	f7ff f8b8 	bl	16a74 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)>
   17904:	901b      	str	r0, [sp, #108]	; 0x6c
#if defined(PRINTF_SUPPORT_LONG_LONG)
        }
#endif
        format++;
   17906:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   17908:	3301      	adds	r3, #1
   1790a:	930a      	str	r3, [sp, #40]	; 0x28
        break;
   1790c:	e018      	b.n	17940 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8bc>
      }

      case '%' :
        out('%', buffer, idx++, maxlen);
   1790e:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   17910:	1c53      	adds	r3, r2, #1
   17912:	931b      	str	r3, [sp, #108]	; 0x6c
   17914:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   17916:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   17918:	990c      	ldr	r1, [sp, #48]	; 0x30
   1791a:	2025      	movs	r0, #37	; 0x25
   1791c:	47a0      	blx	r4
        format++;
   1791e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   17920:	3301      	adds	r3, #1
   17922:	930a      	str	r3, [sp, #40]	; 0x28
        break;
   17924:	e00c      	b.n	17940 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8bc>

      default :
        out(*format, buffer, idx++, maxlen);
   17926:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   17928:	7818      	ldrb	r0, [r3, #0]
   1792a:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   1792c:	1c53      	adds	r3, r2, #1
   1792e:	931b      	str	r3, [sp, #108]	; 0x6c
   17930:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   17932:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   17934:	990c      	ldr	r1, [sp, #48]	; 0x30
   17936:	47a0      	blx	r4
        format++;
   17938:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1793a:	3301      	adds	r3, #1
   1793c:	930a      	str	r3, [sp, #40]	; 0x28
        break;
   1793e:	bf00      	nop
  while (*format)
   17940:	f7ff bbb3 	b.w	170aa <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x26>
    }
  }

  // termination
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
   17944:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   17946:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   17948:	429a      	cmp	r2, r3
   1794a:	d302      	bcc.n	17952 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8ce>
   1794c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1794e:	1e5a      	subs	r2, r3, #1
   17950:	e000      	b.n	17954 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8d0>
   17952:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   17954:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   17956:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   17958:	990c      	ldr	r1, [sp, #48]	; 0x30
   1795a:	2000      	movs	r0, #0
   1795c:	47a0      	blx	r4

  // return written chars without terminating \0
  return (int)idx;
   1795e:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
   17960:	4633      	mov	r3, r6
   17962:	4619      	mov	r1, r3
   17964:	4803      	ldr	r0, [pc, #12]	; (17974 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8f0>)
   17966:	f7fe fd9f 	bl	164a8 <__cyg_profile_func_exit>
   1796a:	4623      	mov	r3, r4
}
   1796c:	4618      	mov	r0, r3
   1796e:	b020      	add	sp, #128	; 0x80
   17970:	bd70      	pop	{r4, r5, r6, pc}
   17972:	bf00      	nop
   17974:	00017085 	.word	0x00017085

00017978 <printf>:

///////////////////////////////////////////////////////////////////////////////


int printf(const char* format, ...)
{
   17978:	b40f      	push	{r0, r1, r2, r3}
   1797a:	b530      	push	{r4, r5, lr}
   1797c:	b087      	sub	sp, #28
   1797e:	4675      	mov	r5, lr
   17980:	462b      	mov	r3, r5
   17982:	4619      	mov	r1, r3
   17984:	480d      	ldr	r0, [pc, #52]	; (179bc <printf+0x44>)
   17986:	f7fe fd7b 	bl	16480 <__cyg_profile_func_enter>
  va_list va;
  va_start(va, format);
   1798a:	ab0b      	add	r3, sp, #44	; 0x2c
   1798c:	9304      	str	r3, [sp, #16]
  char buffer[1];
  const int ret = _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
   1798e:	a903      	add	r1, sp, #12
   17990:	9b04      	ldr	r3, [sp, #16]
   17992:	9300      	str	r3, [sp, #0]
   17994:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   17996:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1799a:	4809      	ldr	r0, [pc, #36]	; (179c0 <printf+0x48>)
   1799c:	f7ff fb72 	bl	17084 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)>
   179a0:	9005      	str	r0, [sp, #20]
  va_end(va);
  return ret;
   179a2:	9c05      	ldr	r4, [sp, #20]
   179a4:	462b      	mov	r3, r5
   179a6:	4619      	mov	r1, r3
   179a8:	4804      	ldr	r0, [pc, #16]	; (179bc <printf+0x44>)
   179aa:	f7fe fd7d 	bl	164a8 <__cyg_profile_func_exit>
   179ae:	4623      	mov	r3, r4
}
   179b0:	4618      	mov	r0, r3
   179b2:	b007      	add	sp, #28
   179b4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   179b8:	b004      	add	sp, #16
   179ba:	4770      	bx	lr
   179bc:	00017979 	.word	0x00017979
   179c0:	000166ed 	.word	0x000166ed

000179c4 <vsnprintf>:
  return ret;
}


int vsnprintf(char* buffer, size_t count, const char* format, va_list va)
{
   179c4:	b530      	push	{r4, r5, lr}
   179c6:	b087      	sub	sp, #28
   179c8:	4674      	mov	r4, lr
   179ca:	9005      	str	r0, [sp, #20]
   179cc:	9104      	str	r1, [sp, #16]
   179ce:	9203      	str	r2, [sp, #12]
   179d0:	9302      	str	r3, [sp, #8]
   179d2:	4623      	mov	r3, r4
   179d4:	4619      	mov	r1, r3
   179d6:	480a      	ldr	r0, [pc, #40]	; (17a00 <vsnprintf+0x3c>)
   179d8:	f7fe fd52 	bl	16480 <__cyg_profile_func_enter>
  return _vsnprintf(_out_buffer, buffer, count, format, va);
   179dc:	9b02      	ldr	r3, [sp, #8]
   179de:	9300      	str	r3, [sp, #0]
   179e0:	9b03      	ldr	r3, [sp, #12]
   179e2:	9a04      	ldr	r2, [sp, #16]
   179e4:	9905      	ldr	r1, [sp, #20]
   179e6:	4807      	ldr	r0, [pc, #28]	; (17a04 <vsnprintf+0x40>)
   179e8:	f7ff fb4c 	bl	17084 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)>
   179ec:	4605      	mov	r5, r0
   179ee:	4623      	mov	r3, r4
   179f0:	4619      	mov	r1, r3
   179f2:	4803      	ldr	r0, [pc, #12]	; (17a00 <vsnprintf+0x3c>)
   179f4:	f7fe fd58 	bl	164a8 <__cyg_profile_func_exit>
   179f8:	462b      	mov	r3, r5
}
   179fa:	4618      	mov	r0, r3
   179fc:	b007      	add	sp, #28
   179fe:	bd30      	pop	{r4, r5, pc}
   17a00:	000179c5 	.word	0x000179c5
   17a04:	00016679 	.word	0x00016679

00017a08 <SdInterface::SdInterface()>:
// NOLINTNEXTLINE(readability-identifier-naming)
// Relevant Datasheet:
// https://www.sdcard.org/downloads/pls/pdf/index.php?p=Part1_Physical_Layer_Simplified_Specification_Ver6.00.jpg&f=Part1_Physical_Layer_Simplified_Specification_Ver6.00.pdf&e=EN_SS1
// TODO(#348):  Write a class to represent a single Sd Card Block to make use
//              of block-related functions easier.
class SdInterface
   17a08:	b530      	push	{r4, r5, lr}
   17a0a:	b083      	sub	sp, #12
   17a0c:	4675      	mov	r5, lr
   17a0e:	9001      	str	r0, [sp, #4]
   17a10:	462b      	mov	r3, r5
   17a12:	4619      	mov	r1, r3
   17a14:	4807      	ldr	r0, [pc, #28]	; (17a34 <SdInterface::SdInterface()+0x2c>)
   17a16:	f7fe fd33 	bl	16480 <__cyg_profile_func_enter>
   17a1a:	4a07      	ldr	r2, [pc, #28]	; (17a38 <SdInterface::SdInterface()+0x30>)
   17a1c:	9b01      	ldr	r3, [sp, #4]
   17a1e:	601a      	str	r2, [r3, #0]
   17a20:	9c01      	ldr	r4, [sp, #4]
   17a22:	462b      	mov	r3, r5
   17a24:	4619      	mov	r1, r3
   17a26:	4803      	ldr	r0, [pc, #12]	; (17a34 <SdInterface::SdInterface()+0x2c>)
   17a28:	f7fe fd3e 	bl	164a8 <__cyg_profile_func_exit>
   17a2c:	4623      	mov	r3, r4
   17a2e:	4618      	mov	r0, r3
   17a30:	b003      	add	sp, #12
   17a32:	bd30      	pop	{r4, r5, pc}
   17a34:	00017a09 	.word	0x00017a09
   17a38:	0001b930 	.word	0x0001b930

00017a3c <Sd::Sd(Sd::DebugSdCard_t, unsigned char, unsigned char, unsigned char, unsigned char)>:
  /// port that is broken out through the board's GPIO, allowing you to probe
  /// the chip select manually. To use this version instead of the main version,
  /// instantiate an Sd card instance like so:
  ///
  ///   Sd sdcard(Sd::DebugSdCard_t{});
  constexpr Sd(DebugSdCard_t, uint8_t port = 1, uint8_t pin = 8,
   17a3c:	b530      	push	{r4, r5, lr}
   17a3e:	b083      	sub	sp, #12
   17a40:	4675      	mov	r5, lr
   17a42:	9001      	str	r0, [sp, #4]
   17a44:	f88d 1000 	strb.w	r1, [sp]
   17a48:	4611      	mov	r1, r2
   17a4a:	461a      	mov	r2, r3
   17a4c:	460b      	mov	r3, r1
   17a4e:	f88d 3003 	strb.w	r3, [sp, #3]
   17a52:	4613      	mov	r3, r2
   17a54:	f88d 3002 	strb.w	r3, [sp, #2]
   17a58:	462b      	mov	r3, r5
   17a5a:	4619      	mov	r1, r3
   17a5c:	481d      	ldr	r0, [pc, #116]	; (17ad4 <Sd::Sd(Sd::DebugSdCard_t, unsigned char, unsigned char, unsigned char, unsigned char)+0x98>)
   17a5e:	f7fe fd0f 	bl	16480 <__cyg_profile_func_enter>
      : ssp_interface_(&ssp_),
        ssp_(Ssp::Peripheral::kSsp2),
        chip_select_(&chip_select_pin_),
        chip_select_external_(&chip_select_external_pin_),
        chip_select_pin_(port, pin),
        chip_select_external_pin_(extport, extpin)
   17a62:	9b01      	ldr	r3, [sp, #4]
   17a64:	4618      	mov	r0, r3
   17a66:	f7ff ffcf 	bl	17a08 <SdInterface::SdInterface()>
   17a6a:	4a1b      	ldr	r2, [pc, #108]	; (17ad8 <Sd::Sd(Sd::DebugSdCard_t, unsigned char, unsigned char, unsigned char, unsigned char)+0x9c>)
   17a6c:	9b01      	ldr	r3, [sp, #4]
   17a6e:	601a      	str	r2, [r3, #0]
   17a70:	9b01      	ldr	r3, [sp, #4]
   17a72:	f103 0208 	add.w	r2, r3, #8
   17a76:	9b01      	ldr	r3, [sp, #4]
   17a78:	605a      	str	r2, [r3, #4]
   17a7a:	9b01      	ldr	r3, [sp, #4]
   17a7c:	3308      	adds	r3, #8
   17a7e:	2102      	movs	r1, #2
   17a80:	4618      	mov	r0, r3
   17a82:	f7fa fb89 	bl	12198 <Ssp::Ssp(Ssp::Peripheral)>
   17a86:	9b01      	ldr	r3, [sp, #4]
   17a88:	f103 0240 	add.w	r2, r3, #64	; 0x40
   17a8c:	9b01      	ldr	r3, [sp, #4]
   17a8e:	639a      	str	r2, [r3, #56]	; 0x38
   17a90:	9b01      	ldr	r3, [sp, #4]
   17a92:	f103 0254 	add.w	r2, r3, #84	; 0x54
   17a96:	9b01      	ldr	r3, [sp, #4]
   17a98:	63da      	str	r2, [r3, #60]	; 0x3c
   17a9a:	9b01      	ldr	r3, [sp, #4]
   17a9c:	3340      	adds	r3, #64	; 0x40
   17a9e:	f89d 2002 	ldrb.w	r2, [sp, #2]
   17aa2:	f89d 1003 	ldrb.w	r1, [sp, #3]
   17aa6:	4618      	mov	r0, r3
   17aa8:	f7f9 fb86 	bl	111b8 <Gpio::Gpio(unsigned char, unsigned char)>
   17aac:	9b01      	ldr	r3, [sp, #4]
   17aae:	3354      	adds	r3, #84	; 0x54
   17ab0:	f89d 201c 	ldrb.w	r2, [sp, #28]
   17ab4:	f89d 1018 	ldrb.w	r1, [sp, #24]
   17ab8:	4618      	mov	r0, r3
   17aba:	f7f9 fb7d 	bl	111b8 <Gpio::Gpio(unsigned char, unsigned char)>
  {
  }
   17abe:	9c01      	ldr	r4, [sp, #4]
   17ac0:	462b      	mov	r3, r5
   17ac2:	4619      	mov	r1, r3
   17ac4:	4803      	ldr	r0, [pc, #12]	; (17ad4 <Sd::Sd(Sd::DebugSdCard_t, unsigned char, unsigned char, unsigned char, unsigned char)+0x98>)
   17ac6:	f7fe fcef 	bl	164a8 <__cyg_profile_func_exit>
   17aca:	4623      	mov	r3, r4
   17acc:	4618      	mov	r0, r3
   17ace:	b003      	add	sp, #12
   17ad0:	bd30      	pop	{r4, r5, pc}
   17ad2:	bf00      	nop
   17ad4:	00017a3d 	.word	0x00017a3d
   17ad8:	0001b904 	.word	0x0001b904

00017adc <Sd::Initialize()>:

  void Initialize() override
   17adc:	b530      	push	{r4, r5, lr}
   17ade:	b085      	sub	sp, #20
   17ae0:	4675      	mov	r5, lr
   17ae2:	9003      	str	r0, [sp, #12]
   17ae4:	462b      	mov	r3, r5
   17ae6:	4619      	mov	r1, r3
   17ae8:	4827      	ldr	r0, [pc, #156]	; (17b88 <Sd::Initialize()+0xac>)
   17aea:	f7fe fcc9 	bl	16480 <__cyg_profile_func_enter>
  {
    LOG_DEBUG("Begin initialization:");
    LOG_DEBUG("Setting CS as output...");
    chip_select_->SetAsOutput();
   17aee:	9b03      	ldr	r3, [sp, #12]
   17af0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   17af2:	9b03      	ldr	r3, [sp, #12]
   17af4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   17af6:	681b      	ldr	r3, [r3, #0]
   17af8:	3304      	adds	r3, #4
   17afa:	681b      	ldr	r3, [r3, #0]
   17afc:	4610      	mov	r0, r2
   17afe:	4798      	blx	r3
    chip_select_->SetHigh();
   17b00:	9b03      	ldr	r3, [sp, #12]
   17b02:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   17b04:	9b03      	ldr	r3, [sp, #12]
   17b06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   17b08:	681b      	ldr	r3, [r3, #0]
   17b0a:	330c      	adds	r3, #12
   17b0c:	681b      	ldr	r3, [r3, #0]
   17b0e:	4610      	mov	r0, r2
   17b10:	4798      	blx	r3
    chip_select_external_->SetAsOutput();
   17b12:	9b03      	ldr	r3, [sp, #12]
   17b14:	6bda      	ldr	r2, [r3, #60]	; 0x3c
   17b16:	9b03      	ldr	r3, [sp, #12]
   17b18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   17b1a:	681b      	ldr	r3, [r3, #0]
   17b1c:	3304      	adds	r3, #4
   17b1e:	681b      	ldr	r3, [r3, #0]
   17b20:	4610      	mov	r0, r2
   17b22:	4798      	blx	r3
    chip_select_external_->SetHigh();
   17b24:	9b03      	ldr	r3, [sp, #12]
   17b26:	6bda      	ldr	r2, [r3, #60]	; 0x3c
   17b28:	9b03      	ldr	r3, [sp, #12]
   17b2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   17b2c:	681b      	ldr	r3, [r3, #0]
   17b2e:	330c      	adds	r3, #12
   17b30:	681b      	ldr	r3, [r3, #0]
   17b32:	4610      	mov	r0, r2
   17b34:	4798      	blx	r3

    LOG_DEBUG("Setting SSP Clock Speed...");
    ssp_interface_->SetClock(false, false, 14, 2);  // 400kHz
   17b36:	9b03      	ldr	r3, [sp, #12]
   17b38:	6858      	ldr	r0, [r3, #4]
   17b3a:	9b03      	ldr	r3, [sp, #12]
   17b3c:	685b      	ldr	r3, [r3, #4]
   17b3e:	681b      	ldr	r3, [r3, #0]
   17b40:	3318      	adds	r3, #24
   17b42:	681c      	ldr	r4, [r3, #0]
   17b44:	2302      	movs	r3, #2
   17b46:	9300      	str	r3, [sp, #0]
   17b48:	230e      	movs	r3, #14
   17b4a:	2200      	movs	r2, #0
   17b4c:	2100      	movs	r1, #0
   17b4e:	47a0      	blx	r4

    LOG_DEBUG("Setting Peripheral Mode...");
    ssp_interface_->SetPeripheralMode(Ssp::MasterSlaveMode::kMaster,
   17b50:	9b03      	ldr	r3, [sp, #12]
   17b52:	6858      	ldr	r0, [r3, #4]
   17b54:	9b03      	ldr	r3, [sp, #12]
   17b56:	685b      	ldr	r3, [r3, #4]
                                      Ssp::FrameMode::kSpi,
                                      Ssp::DataSize::kEight);
   17b58:	681b      	ldr	r3, [r3, #0]
   17b5a:	3310      	adds	r3, #16
   17b5c:	681c      	ldr	r4, [r3, #0]
    ssp_interface_->SetPeripheralMode(Ssp::MasterSlaveMode::kMaster,
   17b5e:	2307      	movs	r3, #7
   17b60:	2200      	movs	r2, #0
   17b62:	2100      	movs	r1, #0
   17b64:	47a0      	blx	r4

    LOG_DEBUG("Starting SSP Peripheral...");
    ssp_interface_->Initialize();
   17b66:	9b03      	ldr	r3, [sp, #12]
   17b68:	685a      	ldr	r2, [r3, #4]
   17b6a:	9b03      	ldr	r3, [sp, #12]
   17b6c:	685b      	ldr	r3, [r3, #4]
   17b6e:	681b      	ldr	r3, [r3, #0]
   17b70:	681b      	ldr	r3, [r3, #0]
   17b72:	4610      	mov	r0, r2
   17b74:	4798      	blx	r3
   17b76:	462b      	mov	r3, r5
   17b78:	4619      	mov	r1, r3
   17b7a:	4803      	ldr	r0, [pc, #12]	; (17b88 <Sd::Initialize()+0xac>)
   17b7c:	f7fe fc94 	bl	164a8 <__cyg_profile_func_exit>
  }
   17b80:	bf00      	nop
   17b82:	b005      	add	sp, #20
   17b84:	bd30      	pop	{r4, r5, pc}
   17b86:	bf00      	nop
   17b88:	00017add 	.word	0x00017add

00017b8c <Sd::Mount(SdInterface::CardInfo_t*)>:

  // Initialize SD Card
  // TODO(#349): Split method into smaller piece with single jobs
  bool Mount(CardInfo_t * sd) override
   17b8c:	b530      	push	{r4, r5, lr}
   17b8e:	b08b      	sub	sp, #44	; 0x2c
   17b90:	4675      	mov	r5, lr
   17b92:	9003      	str	r0, [sp, #12]
   17b94:	9102      	str	r1, [sp, #8]
   17b96:	462b      	mov	r3, r5
   17b98:	4619      	mov	r1, r3
   17b9a:	48a7      	ldr	r0, [pc, #668]	; (17e38 <Sd::Mount(SdInterface::CardInfo_t*)+0x2ac>)
   17b9c:	f7fe fc70 	bl	16480 <__cyg_profile_func_enter>
  {
    uint8_t tries     = 0;
   17ba0:	2300      	movs	r3, #0
   17ba2:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    bool card_is_idle = false;
   17ba6:	2300      	movs	r3, #0
   17ba8:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26

    // Reset the card and force it to go to idle state at <400kHz with a
    // CMD0 + (active-low) CS
    LOG_DEBUG("Sending SD Card to Idle State...");
    sd->response.length = SendCmd(Command::kReset, 0x00000000,
                                  sd->response.data.byte, 100, KeepAlive::kYes);
   17bac:	9b03      	ldr	r3, [sp, #12]
   17bae:	681b      	ldr	r3, [r3, #0]
   17bb0:	681c      	ldr	r4, [r3, #0]
    sd->response.length = SendCmd(Command::kReset, 0x00000000,
   17bb2:	9b02      	ldr	r3, [sp, #8]
   17bb4:	f103 0208 	add.w	r2, r3, #8
   17bb8:	2301      	movs	r3, #1
   17bba:	9301      	str	r3, [sp, #4]
   17bbc:	2364      	movs	r3, #100	; 0x64
   17bbe:	9300      	str	r3, [sp, #0]
   17bc0:	4613      	mov	r3, r2
   17bc2:	2200      	movs	r2, #0
   17bc4:	2140      	movs	r1, #64	; 0x40
   17bc6:	9803      	ldr	r0, [sp, #12]
   17bc8:	47a0      	blx	r4
   17bca:	4602      	mov	r2, r0
   17bcc:	9b02      	ldr	r3, [sp, #8]
   17bce:	611a      	str	r2, [r3, #16]

    // Reset the card again to trigger SPI mode
    LOG_DEBUG("Initializing SPI mode...");
    do
    {
      tries++;
   17bd0:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   17bd4:	3301      	adds	r3, #1
   17bd6:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
      sd->response.length = SendCmd(
          Command::kReset, 0x00, sd->response.data.byte, 100, KeepAlive::kYes);
   17bda:	9b03      	ldr	r3, [sp, #12]
   17bdc:	681b      	ldr	r3, [r3, #0]
   17bde:	681c      	ldr	r4, [r3, #0]
      sd->response.length = SendCmd(
   17be0:	9b02      	ldr	r3, [sp, #8]
   17be2:	f103 0208 	add.w	r2, r3, #8
   17be6:	2301      	movs	r3, #1
   17be8:	9301      	str	r3, [sp, #4]
   17bea:	2364      	movs	r3, #100	; 0x64
   17bec:	9300      	str	r3, [sp, #0]
   17bee:	4613      	mov	r3, r2
   17bf0:	2200      	movs	r2, #0
   17bf2:	2140      	movs	r1, #64	; 0x40
   17bf4:	9803      	ldr	r0, [sp, #12]
   17bf6:	47a0      	blx	r4
   17bf8:	4602      	mov	r2, r0
   17bfa:	9b02      	ldr	r3, [sp, #8]
   17bfc:	611a      	str	r2, [r3, #16]

      // Check if R1 response frame's bit 1 is set (to ensure that
      // card is in idle state)
      if (sd->response.data.byte[0] != 0xFF &&
   17bfe:	9b02      	ldr	r3, [sp, #8]
   17c00:	7a1b      	ldrb	r3, [r3, #8]
   17c02:	2bff      	cmp	r3, #255	; 0xff
   17c04:	d008      	beq.n	17c18 <Sd::Mount(SdInterface::CardInfo_t*)+0x8c>
          (sd->response.data.byte[0] & 0x01) == 0x01)
   17c06:	9b02      	ldr	r3, [sp, #8]
   17c08:	7a1b      	ldrb	r3, [r3, #8]
   17c0a:	f003 0301 	and.w	r3, r3, #1
      if (sd->response.data.byte[0] != 0xFF &&
   17c0e:	2b00      	cmp	r3, #0
   17c10:	d002      	beq.n	17c18 <Sd::Mount(SdInterface::CardInfo_t*)+0x8c>
      {
        // If it is, we can move on; otherwise, keep trying for a set
        // amount of tries
        card_is_idle = true;
   17c12:	2301      	movs	r3, #1
   17c14:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
      }
      Delay(10);
   17c18:	f04f 000a 	mov.w	r0, #10
   17c1c:	f04f 0100 	mov.w	r1, #0
   17c20:	f7f9 fa98 	bl	11154 <Delay(unsigned long long)>
    } while (tries < kBusTimeout && !card_is_idle);
   17c24:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   17c28:	2bf9      	cmp	r3, #249	; 0xf9
   17c2a:	d804      	bhi.n	17c36 <Sd::Mount(SdInterface::CardInfo_t*)+0xaa>
   17c2c:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
   17c30:	2b00      	cmp	r3, #0
   17c32:	d100      	bne.n	17c36 <Sd::Mount(SdInterface::CardInfo_t*)+0xaa>
    do
   17c34:	e7cc      	b.n	17bd0 <Sd::Mount(SdInterface::CardInfo_t*)+0x44>
    LOG_DEBUG("%d tries", tries);
    if (tries >= kBusTimeout)
   17c36:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   17c3a:	2bf9      	cmp	r3, #249	; 0xf9
   17c3c:	d91b      	bls.n	17c76 <Sd::Mount(SdInterface::CardInfo_t*)+0xea>
    {
      LOG_ERROR("Failed to initiate SPI mode within timeout. Aborting!");
   17c3e:	f240 13ff 	movw	r3, #511	; 0x1ff
   17c42:	4a7e      	ldr	r2, [pc, #504]	; (17e3c <Sd::Mount(SdInterface::CardInfo_t*)+0x2b0>)
   17c44:	497e      	ldr	r1, [pc, #504]	; (17e40 <Sd::Mount(SdInterface::CardInfo_t*)+0x2b4>)
   17c46:	487f      	ldr	r0, [pc, #508]	; (17e44 <Sd::Mount(SdInterface::CardInfo_t*)+0x2b8>)
   17c48:	f7ff fe96 	bl	17978 <printf>
      sd->response.length = SendCmd(Command::kGarbage, 0xFFFFFFFF,
                                    sd->response.data.byte, 0, KeepAlive::kNo);
   17c4c:	9b03      	ldr	r3, [sp, #12]
   17c4e:	681b      	ldr	r3, [r3, #0]
   17c50:	681c      	ldr	r4, [r3, #0]
      sd->response.length = SendCmd(Command::kGarbage, 0xFFFFFFFF,
   17c52:	9b02      	ldr	r3, [sp, #8]
   17c54:	f103 0208 	add.w	r2, r3, #8
   17c58:	2300      	movs	r3, #0
   17c5a:	9301      	str	r3, [sp, #4]
   17c5c:	2300      	movs	r3, #0
   17c5e:	9300      	str	r3, [sp, #0]
   17c60:	4613      	mov	r3, r2
   17c62:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   17c66:	21ff      	movs	r1, #255	; 0xff
   17c68:	9803      	ldr	r0, [sp, #12]
   17c6a:	47a0      	blx	r4
   17c6c:	4602      	mov	r2, r0
   17c6e:	9b02      	ldr	r3, [sp, #8]
   17c70:	611a      	str	r2, [r3, #16]
      return false;
   17c72:	2400      	movs	r4, #0
   17c74:	e10c      	b.n	17e90 <Sd::Mount(SdInterface::CardInfo_t*)+0x304>
    }

    // Send the host's supported voltage (3.3V) and ask if the card
    // supports it
    LOG_DEBUG("Checking Current SD Card Voltage Level...");
    constexpr uint8_t kCheckPattern = 0xAB;
   17c76:	23ab      	movs	r3, #171	; 0xab
   17c78:	f88d 301f 	strb.w	r3, [sp, #31]
    uint64_t supported_voltage      = 0x00000001;
   17c7c:	f04f 0301 	mov.w	r3, #1
   17c80:	f04f 0400 	mov.w	r4, #0
   17c84:	e9cd 3404 	strd	r3, r4, [sp, #16]
    sd->response.length =
        SendCmd(Command::kGetOp,
                static_cast<uint32_t>((supported_voltage << 8) | kCheckPattern),
                sd->response.data.byte, 100, KeepAlive::kYes);
   17c88:	9b03      	ldr	r3, [sp, #12]
   17c8a:	681b      	ldr	r3, [r3, #0]
   17c8c:	681c      	ldr	r4, [r3, #0]
                static_cast<uint32_t>((supported_voltage << 8) | kCheckPattern),
   17c8e:	9b04      	ldr	r3, [sp, #16]
   17c90:	021b      	lsls	r3, r3, #8
        SendCmd(Command::kGetOp,
   17c92:	f043 02ab 	orr.w	r2, r3, #171	; 0xab
   17c96:	9b02      	ldr	r3, [sp, #8]
   17c98:	f103 0108 	add.w	r1, r3, #8
   17c9c:	2301      	movs	r3, #1
   17c9e:	9301      	str	r3, [sp, #4]
   17ca0:	2364      	movs	r3, #100	; 0x64
   17ca2:	9300      	str	r3, [sp, #0]
   17ca4:	460b      	mov	r3, r1
   17ca6:	2148      	movs	r1, #72	; 0x48
   17ca8:	9803      	ldr	r0, [sp, #12]
   17caa:	47a0      	blx	r4
   17cac:	4602      	mov	r2, r0
    sd->response.length =
   17cae:	9b02      	ldr	r3, [sp, #8]
   17cb0:	611a      	str	r2, [r3, #16]
    if (sd->response.data.byte[4] != kCheckPattern)
   17cb2:	9b02      	ldr	r3, [sp, #8]
   17cb4:	7b1b      	ldrb	r3, [r3, #12]
   17cb6:	2bab      	cmp	r3, #171	; 0xab
   17cb8:	d01b      	beq.n	17cf2 <Sd::Mount(SdInterface::CardInfo_t*)+0x166>
    {
      // If the last byte is not an exact echo of the LSB of the kGetOp
      // command's argument, this response is invalid
      LOG_ERROR("Response integrity check failed. Aborting!");
   17cba:	f240 2312 	movw	r3, #530	; 0x212
   17cbe:	4a5f      	ldr	r2, [pc, #380]	; (17e3c <Sd::Mount(SdInterface::CardInfo_t*)+0x2b0>)
   17cc0:	4961      	ldr	r1, [pc, #388]	; (17e48 <Sd::Mount(SdInterface::CardInfo_t*)+0x2bc>)
   17cc2:	4862      	ldr	r0, [pc, #392]	; (17e4c <Sd::Mount(SdInterface::CardInfo_t*)+0x2c0>)
   17cc4:	f7ff fe58 	bl	17978 <printf>
      sd->response.length = SendCmd(Command::kGarbage, 0xFFFFFFFF,
                                    sd->response.data.byte, 0, KeepAlive::kNo);
   17cc8:	9b03      	ldr	r3, [sp, #12]
   17cca:	681b      	ldr	r3, [r3, #0]
   17ccc:	681c      	ldr	r4, [r3, #0]
      sd->response.length = SendCmd(Command::kGarbage, 0xFFFFFFFF,
   17cce:	9b02      	ldr	r3, [sp, #8]
   17cd0:	f103 0208 	add.w	r2, r3, #8
   17cd4:	2300      	movs	r3, #0
   17cd6:	9301      	str	r3, [sp, #4]
   17cd8:	2300      	movs	r3, #0
   17cda:	9300      	str	r3, [sp, #0]
   17cdc:	4613      	mov	r3, r2
   17cde:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   17ce2:	21ff      	movs	r1, #255	; 0xff
   17ce4:	9803      	ldr	r0, [sp, #12]
   17ce6:	47a0      	blx	r4
   17ce8:	4602      	mov	r2, r0
   17cea:	9b02      	ldr	r3, [sp, #8]
   17cec:	611a      	str	r2, [r3, #16]
      return false;
   17cee:	2400      	movs	r4, #0
   17cf0:	e0ce      	b.n	17e90 <Sd::Mount(SdInterface::CardInfo_t*)+0x304>
    }
    else if (sd->response.data.byte[3] &
   17cf2:	9b02      	ldr	r3, [sp, #8]
   17cf4:	7adb      	ldrb	r3, [r3, #11]
   17cf6:	4619      	mov	r1, r3
             (supported_voltage == static_cast<uint64_t>(0x00)))
   17cf8:	9a04      	ldr	r2, [sp, #16]
   17cfa:	9b05      	ldr	r3, [sp, #20]
   17cfc:	4313      	orrs	r3, r2
   17cfe:	2b00      	cmp	r3, #0
   17d00:	bf0c      	ite	eq
   17d02:	2301      	moveq	r3, #1
   17d04:	2300      	movne	r3, #0
   17d06:	b2db      	uxtb	r3, r3
    else if (sd->response.data.byte[3] &
   17d08:	400b      	ands	r3, r1
   17d0a:	2b00      	cmp	r3, #0
   17d0c:	d01b      	beq.n	17d46 <Sd::Mount(SdInterface::CardInfo_t*)+0x1ba>
    {
      // If the 2nd-to-last byte of the reponse AND'ed with our host
      // device's supported voltage range is 0x00, the SD card doesn't
      // support our device's operating voltage
      LOG_ERROR("Unsupported voltage in use. Aborting!");
   17d0e:	f240 231d 	movw	r3, #541	; 0x21d
   17d12:	4a4a      	ldr	r2, [pc, #296]	; (17e3c <Sd::Mount(SdInterface::CardInfo_t*)+0x2b0>)
   17d14:	494e      	ldr	r1, [pc, #312]	; (17e50 <Sd::Mount(SdInterface::CardInfo_t*)+0x2c4>)
   17d16:	484f      	ldr	r0, [pc, #316]	; (17e54 <Sd::Mount(SdInterface::CardInfo_t*)+0x2c8>)
   17d18:	f7ff fe2e 	bl	17978 <printf>
      sd->response.length = SendCmd(Command::kGarbage, 0xFFFFFFFF,
                                    sd->response.data.byte, 0, KeepAlive::kNo);
   17d1c:	9b03      	ldr	r3, [sp, #12]
   17d1e:	681b      	ldr	r3, [r3, #0]
   17d20:	681c      	ldr	r4, [r3, #0]
      sd->response.length = SendCmd(Command::kGarbage, 0xFFFFFFFF,
   17d22:	9b02      	ldr	r3, [sp, #8]
   17d24:	f103 0208 	add.w	r2, r3, #8
   17d28:	2300      	movs	r3, #0
   17d2a:	9301      	str	r3, [sp, #4]
   17d2c:	2300      	movs	r3, #0
   17d2e:	9300      	str	r3, [sp, #0]
   17d30:	4613      	mov	r3, r2
   17d32:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   17d36:	21ff      	movs	r1, #255	; 0xff
   17d38:	9803      	ldr	r0, [sp, #12]
   17d3a:	47a0      	blx	r4
   17d3c:	4602      	mov	r2, r0
   17d3e:	9b02      	ldr	r3, [sp, #8]
   17d40:	611a      	str	r2, [r3, #16]
      return false;
   17d42:	2400      	movs	r4, #0
   17d44:	e0a4      	b.n	17e90 <Sd::Mount(SdInterface::CardInfo_t*)+0x304>
    }

    // Indicate that the host supports SDHC/SDXC and wait for card to
    // shift out of idle state
    LOG_DEBUG("Expressing High-Capacity SD Card Support...");
    tries = 0;
   17d46:	2300      	movs	r3, #0
   17d48:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    do
    {
      // Send host's operating conditions
      sd->response.length =
          SendCmd(Command::kInit, 0x40000000, sd->response.data.byte, 100,
                  KeepAlive::kYes);
   17d4c:	9b03      	ldr	r3, [sp, #12]
   17d4e:	681b      	ldr	r3, [r3, #0]
   17d50:	681c      	ldr	r4, [r3, #0]
          SendCmd(Command::kInit, 0x40000000, sd->response.data.byte, 100,
   17d52:	9b02      	ldr	r3, [sp, #8]
   17d54:	f103 0208 	add.w	r2, r3, #8
   17d58:	2301      	movs	r3, #1
   17d5a:	9301      	str	r3, [sp, #4]
   17d5c:	2364      	movs	r3, #100	; 0x64
   17d5e:	9300      	str	r3, [sp, #0]
   17d60:	4613      	mov	r3, r2
   17d62:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   17d66:	2141      	movs	r1, #65	; 0x41
   17d68:	9803      	ldr	r0, [sp, #12]
   17d6a:	47a0      	blx	r4
   17d6c:	4602      	mov	r2, r0
      sd->response.length =
   17d6e:	9b02      	ldr	r3, [sp, #8]
   17d70:	611a      	str	r2, [r3, #16]
      tries++;
   17d72:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   17d76:	3301      	adds	r3, #1
   17d78:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    } while (tries < kBusTimeout && sd->response.data.byte[0] & 0x01);
   17d7c:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   17d80:	2bf9      	cmp	r3, #249	; 0xf9
   17d82:	d806      	bhi.n	17d92 <Sd::Mount(SdInterface::CardInfo_t*)+0x206>
   17d84:	9b02      	ldr	r3, [sp, #8]
   17d86:	7a1b      	ldrb	r3, [r3, #8]
   17d88:	f003 0301 	and.w	r3, r3, #1
   17d8c:	2b00      	cmp	r3, #0
   17d8e:	d000      	beq.n	17d92 <Sd::Mount(SdInterface::CardInfo_t*)+0x206>
    do
   17d90:	e7dc      	b.n	17d4c <Sd::Mount(SdInterface::CardInfo_t*)+0x1c0>
    if (tries == kBusTimeout)
   17d92:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   17d96:	2bfa      	cmp	r3, #250	; 0xfa
   17d98:	d11b      	bne.n	17dd2 <Sd::Mount(SdInterface::CardInfo_t*)+0x246>
    {
      LOG_ERROR("SD Card timed out. Aborting!");
   17d9a:	f240 2331 	movw	r3, #561	; 0x231
   17d9e:	4a27      	ldr	r2, [pc, #156]	; (17e3c <Sd::Mount(SdInterface::CardInfo_t*)+0x2b0>)
   17da0:	492d      	ldr	r1, [pc, #180]	; (17e58 <Sd::Mount(SdInterface::CardInfo_t*)+0x2cc>)
   17da2:	482e      	ldr	r0, [pc, #184]	; (17e5c <Sd::Mount(SdInterface::CardInfo_t*)+0x2d0>)
   17da4:	f7ff fde8 	bl	17978 <printf>
      sd->response.length = SendCmd(Command::kGarbage, 0xFFFFFFFF,
                                    sd->response.data.byte, 0, KeepAlive::kNo);
   17da8:	9b03      	ldr	r3, [sp, #12]
   17daa:	681b      	ldr	r3, [r3, #0]
   17dac:	681c      	ldr	r4, [r3, #0]
      sd->response.length = SendCmd(Command::kGarbage, 0xFFFFFFFF,
   17dae:	9b02      	ldr	r3, [sp, #8]
   17db0:	f103 0208 	add.w	r2, r3, #8
   17db4:	2300      	movs	r3, #0
   17db6:	9301      	str	r3, [sp, #4]
   17db8:	2300      	movs	r3, #0
   17dba:	9300      	str	r3, [sp, #0]
   17dbc:	4613      	mov	r3, r2
   17dbe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   17dc2:	21ff      	movs	r1, #255	; 0xff
   17dc4:	9803      	ldr	r0, [sp, #12]
   17dc6:	47a0      	blx	r4
   17dc8:	4602      	mov	r2, r0
   17dca:	9b02      	ldr	r3, [sp, #8]
   17dcc:	611a      	str	r2, [r3, #16]
      return false;
   17dce:	2400      	movs	r4, #0
   17dd0:	e05e      	b.n	17e90 <Sd::Mount(SdInterface::CardInfo_t*)+0x304>
    // After card is ready, acquire card capacity info using kGetOcr a
    // second time
    LOG_DEBUG("Reading Card Capacity Information...");
    // Read CCS
    sd->response.length = SendCmd(Command::kGetOcr, 0x00,
                                  sd->response.data.byte, 100, KeepAlive::kYes);
   17dd2:	9b03      	ldr	r3, [sp, #12]
   17dd4:	681b      	ldr	r3, [r3, #0]
   17dd6:	681c      	ldr	r4, [r3, #0]
    sd->response.length = SendCmd(Command::kGetOcr, 0x00,
   17dd8:	9b02      	ldr	r3, [sp, #8]
   17dda:	f103 0208 	add.w	r2, r3, #8
   17dde:	2301      	movs	r3, #1
   17de0:	9301      	str	r3, [sp, #4]
   17de2:	2364      	movs	r3, #100	; 0x64
   17de4:	9300      	str	r3, [sp, #0]
   17de6:	4613      	mov	r3, r2
   17de8:	2200      	movs	r2, #0
   17dea:	217a      	movs	r1, #122	; 0x7a
   17dec:	9803      	ldr	r0, [sp, #12]
   17dee:	47a0      	blx	r4
   17df0:	4602      	mov	r2, r0
   17df2:	9b02      	ldr	r3, [sp, #8]
   17df4:	611a      	str	r2, [r3, #16]
    if (sd->response.data.byte[1] & 0x40)
   17df6:	9b02      	ldr	r3, [sp, #8]
   17df8:	7a5b      	ldrb	r3, [r3, #9]
   17dfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
   17dfe:	2b00      	cmp	r3, #0
   17e00:	d003      	beq.n	17e0a <Sd::Mount(SdInterface::CardInfo_t*)+0x27e>
    {
      // The card is either high or extended capacity
      LOG_DEBUG("SD Card is HC/XC");
      sd->type = Type::kSDHC;
   17e02:	9b02      	ldr	r3, [sp, #8]
   17e04:	2201      	movs	r2, #1
   17e06:	605a      	str	r2, [r3, #4]
   17e08:	e002      	b.n	17e10 <Sd::Mount(SdInterface::CardInfo_t*)+0x284>
    }
    else
    {
      // The card is standard capacity
      LOG_DEBUG("SD Card is SC");
      sd->type = Type::kSDSC;
   17e0a:	9b02      	ldr	r3, [sp, #8]
   17e0c:	2200      	movs	r2, #0
   17e0e:	605a      	str	r2, [r3, #4]
    }

    // Store OCR information
    for (int i = 0; i < 4; i++)
   17e10:	2300      	movs	r3, #0
   17e12:	9308      	str	r3, [sp, #32]
   17e14:	9b08      	ldr	r3, [sp, #32]
   17e16:	2b03      	cmp	r3, #3
   17e18:	dc22      	bgt.n	17e60 <Sd::Mount(SdInterface::CardInfo_t*)+0x2d4>
    {
      // ensure OCR doesn't capture the R1 section of the response
      sd->ocr.byte[i] = sd->response.data.byte[i + 1];
   17e1a:	9b08      	ldr	r3, [sp, #32]
   17e1c:	3301      	adds	r3, #1
   17e1e:	9a02      	ldr	r2, [sp, #8]
   17e20:	4413      	add	r3, r2
   17e22:	7a19      	ldrb	r1, [r3, #8]
   17e24:	9a02      	ldr	r2, [sp, #8]
   17e26:	9b08      	ldr	r3, [sp, #32]
   17e28:	4413      	add	r3, r2
   17e2a:	460a      	mov	r2, r1
   17e2c:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < 4; i++)
   17e2e:	9b08      	ldr	r3, [sp, #32]
   17e30:	3301      	adds	r3, #1
   17e32:	9308      	str	r3, [sp, #32]
   17e34:	e7ee      	b.n	17e14 <Sd::Mount(SdInterface::CardInfo_t*)+0x288>
   17e36:	bf00      	nop
   17e38:	00017b8d 	.word	0x00017b8d
   17e3c:	0001b954 	.word	0x0001b954
   17e40:	0001b864 	.word	0x0001b864
   17e44:	0001aef8 	.word	0x0001aef8
   17e48:	0001b86c 	.word	0x0001b86c
   17e4c:	0001af68 	.word	0x0001af68
   17e50:	0001b874 	.word	0x0001b874
   17e54:	0001afcc 	.word	0x0001afcc
   17e58:	0001b87c 	.word	0x0001b87c
   17e5c:	0001b02c 	.word	0x0001b02c
    }

    // If card is SDSC, manually set its block size
    if (sd->type == Type::kSDSC)
   17e60:	9b02      	ldr	r3, [sp, #8]
   17e62:	685b      	ldr	r3, [r3, #4]
   17e64:	2b00      	cmp	r3, #0
   17e66:	d112      	bne.n	17e8e <Sd::Mount(SdInterface::CardInfo_t*)+0x302>
    {
      // Send requested byte size
      sd->response.length =
          SendCmd(Command::kChgBlkLen, static_cast<uint32_t>(kBlockSize),
                  sd->response.data.byte, 0, KeepAlive::kYes);
   17e68:	9b03      	ldr	r3, [sp, #12]
   17e6a:	681b      	ldr	r3, [r3, #0]
   17e6c:	681c      	ldr	r4, [r3, #0]
          SendCmd(Command::kChgBlkLen, static_cast<uint32_t>(kBlockSize),
   17e6e:	9b02      	ldr	r3, [sp, #8]
   17e70:	f103 0208 	add.w	r2, r3, #8
   17e74:	2301      	movs	r3, #1
   17e76:	9301      	str	r3, [sp, #4]
   17e78:	2300      	movs	r3, #0
   17e7a:	9300      	str	r3, [sp, #0]
   17e7c:	4613      	mov	r3, r2
   17e7e:	f44f 7200 	mov.w	r2, #512	; 0x200
   17e82:	2150      	movs	r1, #80	; 0x50
   17e84:	9803      	ldr	r0, [sp, #12]
   17e86:	47a0      	blx	r4
   17e88:	4602      	mov	r2, r0
      sd->response.length =
   17e8a:	9b02      	ldr	r3, [sp, #8]
   17e8c:	611a      	str	r2, [r3, #16]
    }

    return true;
   17e8e:	2401      	movs	r4, #1
   17e90:	462b      	mov	r3, r5
   17e92:	4619      	mov	r1, r3
   17e94:	4803      	ldr	r0, [pc, #12]	; (17ea4 <Sd::Mount(SdInterface::CardInfo_t*)+0x318>)
   17e96:	f7fe fb07 	bl	164a8 <__cyg_profile_func_exit>
   17e9a:	4623      	mov	r3, r4
  }
   17e9c:	4618      	mov	r0, r3
   17e9e:	b00b      	add	sp, #44	; 0x2c
   17ea0:	bd30      	pop	{r4, r5, pc}
   17ea2:	bf00      	nop
   17ea4:	00017b8d 	.word	0x00017b8d

00017ea8 <Sd::ToBool(bool)>:

  // Returns string to represent a boolean value
  const char * ToBool(bool condition)
   17ea8:	b530      	push	{r4, r5, lr}
   17eaa:	b083      	sub	sp, #12
   17eac:	4675      	mov	r5, lr
   17eae:	9001      	str	r0, [sp, #4]
   17eb0:	460b      	mov	r3, r1
   17eb2:	f88d 3003 	strb.w	r3, [sp, #3]
   17eb6:	462b      	mov	r3, r5
   17eb8:	4619      	mov	r1, r3
   17eba:	4809      	ldr	r0, [pc, #36]	; (17ee0 <Sd::ToBool(bool)+0x38>)
   17ebc:	f7fe fae0 	bl	16480 <__cyg_profile_func_enter>
  {
    return (condition) ? "true" : "false";
   17ec0:	f89d 3003 	ldrb.w	r3, [sp, #3]
   17ec4:	2b00      	cmp	r3, #0
   17ec6:	d001      	beq.n	17ecc <Sd::ToBool(bool)+0x24>
   17ec8:	4c06      	ldr	r4, [pc, #24]	; (17ee4 <Sd::ToBool(bool)+0x3c>)
   17eca:	e000      	b.n	17ece <Sd::ToBool(bool)+0x26>
   17ecc:	4c06      	ldr	r4, [pc, #24]	; (17ee8 <Sd::ToBool(bool)+0x40>)
   17ece:	462b      	mov	r3, r5
   17ed0:	4619      	mov	r1, r3
   17ed2:	4803      	ldr	r0, [pc, #12]	; (17ee0 <Sd::ToBool(bool)+0x38>)
   17ed4:	f7fe fae8 	bl	164a8 <__cyg_profile_func_exit>
   17ed8:	4623      	mov	r3, r4
  }
   17eda:	4618      	mov	r0, r3
   17edc:	b003      	add	sp, #12
   17ede:	bd30      	pop	{r4, r5, pc}
   17ee0:	00017ea9 	.word	0x00017ea9
   17ee4:	0001b084 	.word	0x0001b084
   17ee8:	0001b08c 	.word	0x0001b08c

00017eec <Sd::WaitToReadBlock()>:

  // Waits for the card to respond after a single or multi block read cmd is
  // sent.
  void WaitToReadBlock()
   17eec:	b510      	push	{r4, lr}
   17eee:	b084      	sub	sp, #16
   17ef0:	4674      	mov	r4, lr
   17ef2:	9001      	str	r0, [sp, #4]
   17ef4:	4623      	mov	r3, r4
   17ef6:	4619      	mov	r1, r3
   17ef8:	4814      	ldr	r0, [pc, #80]	; (17f4c <Sd::WaitToReadBlock()+0x60>)
   17efa:	f7fe fac1 	bl	16480 <__cyg_profile_func_enter>
    // Bit 4 -->  If set, card is locked
    // Bit 3 -->  If set, address is out or range
    // Bit 2 -->  If set, card ECC failed
    // Bit 1 -->  If set, CC error occurred
    // Bit 0 -->  If set, a generic error occurred
    uint8_t wait_byte = 0x00;
   17efe:	2300      	movs	r3, #0
   17f00:	f88d 300f 	strb.w	r3, [sp, #15]
    do
    {
      wait_byte = static_cast<uint8_t>(ssp_interface_->Transfer(0xFF));
   17f04:	9b01      	ldr	r3, [sp, #4]
   17f06:	685a      	ldr	r2, [r3, #4]
   17f08:	9b01      	ldr	r3, [sp, #4]
   17f0a:	685b      	ldr	r3, [r3, #4]
   17f0c:	681b      	ldr	r3, [r3, #0]
   17f0e:	3308      	adds	r3, #8
   17f10:	681b      	ldr	r3, [r3, #0]
   17f12:	21ff      	movs	r1, #255	; 0xff
   17f14:	4610      	mov	r0, r2
   17f16:	4798      	blx	r3
   17f18:	4603      	mov	r3, r0
   17f1a:	f88d 300f 	strb.w	r3, [sp, #15]
    } while (wait_byte != 0xFE && (wait_byte & 0xE0) != 0x00);
   17f1e:	f89d 300f 	ldrb.w	r3, [sp, #15]
   17f22:	2bfe      	cmp	r3, #254	; 0xfe
   17f24:	d006      	beq.n	17f34 <Sd::WaitToReadBlock()+0x48>
   17f26:	f89d 300f 	ldrb.w	r3, [sp, #15]
   17f2a:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
   17f2e:	2b00      	cmp	r3, #0
   17f30:	d000      	beq.n	17f34 <Sd::WaitToReadBlock()+0x48>
    do
   17f32:	e7e7      	b.n	17f04 <Sd::WaitToReadBlock()+0x18>

    // DEBUG: Check the value of the wait byte
    if (wait_byte == 0xFE)
   17f34:	f89d 300f 	ldrb.w	r3, [sp, #15]
   17f38:	2bfe      	cmp	r3, #254	; 0xfe
   17f3a:	4623      	mov	r3, r4
   17f3c:	4619      	mov	r1, r3
   17f3e:	4803      	ldr	r0, [pc, #12]	; (17f4c <Sd::WaitToReadBlock()+0x60>)
   17f40:	f7fe fab2 	bl	164a8 <__cyg_profile_func_exit>
      LOG_DEBUG("Addr Out of Range?: %s", ToBool(wait_byte & 0x08));
      LOG_DEBUG("Card ECC Failed?: %s", ToBool(wait_byte & 0x04));
      LOG_DEBUG("CC Error?: %s", ToBool(wait_byte & 0x02));
      LOG_DEBUG("Error?: %s", ToBool(wait_byte & 0x01));
    }
  }
   17f44:	bf00      	nop
   17f46:	b004      	add	sp, #16
   17f48:	bd10      	pop	{r4, pc}
   17f4a:	bf00      	nop
   17f4c:	00017eed 	.word	0x00017eed

00017f50 <Sd::WaitWhileBusy()>:

  // Waits for the card to be ready to receive a new block after one has
  // been written or erased
  void WaitWhileBusy()
   17f50:	b510      	push	{r4, lr}
   17f52:	b084      	sub	sp, #16
   17f54:	4674      	mov	r4, lr
   17f56:	9001      	str	r0, [sp, #4]
   17f58:	4623      	mov	r3, r4
   17f5a:	4619      	mov	r1, r3
   17f5c:	480f      	ldr	r0, [pc, #60]	; (17f9c <Sd::WaitWhileBusy()+0x4c>)
   17f5e:	f7fe fa8f 	bl	16480 <__cyg_profile_func_enter>
  {
    // Wait for the card to finish programming (i.e. when the
    // bytes return to 0xFF)
    uint8_t busy_byte = 0x00;
   17f62:	2300      	movs	r3, #0
   17f64:	f88d 300f 	strb.w	r3, [sp, #15]
    LOG_DEBUG("Card is busy. Waiting for it to finish...");
    do
    {
      busy_byte = static_cast<uint8_t>(ssp_interface_->Transfer(0xFF));
   17f68:	9b01      	ldr	r3, [sp, #4]
   17f6a:	685a      	ldr	r2, [r3, #4]
   17f6c:	9b01      	ldr	r3, [sp, #4]
   17f6e:	685b      	ldr	r3, [r3, #4]
   17f70:	681b      	ldr	r3, [r3, #0]
   17f72:	3308      	adds	r3, #8
   17f74:	681b      	ldr	r3, [r3, #0]
   17f76:	21ff      	movs	r1, #255	; 0xff
   17f78:	4610      	mov	r0, r2
   17f7a:	4798      	blx	r3
   17f7c:	4603      	mov	r3, r0
   17f7e:	f88d 300f 	strb.w	r3, [sp, #15]
    } while (busy_byte != 0xFF);
   17f82:	f89d 300f 	ldrb.w	r3, [sp, #15]
   17f86:	2bff      	cmp	r3, #255	; 0xff
   17f88:	d000      	beq.n	17f8c <Sd::WaitWhileBusy()+0x3c>
    do
   17f8a:	e7ed      	b.n	17f68 <Sd::WaitWhileBusy()+0x18>
   17f8c:	4623      	mov	r3, r4
   17f8e:	4619      	mov	r1, r3
   17f90:	4802      	ldr	r0, [pc, #8]	; (17f9c <Sd::WaitWhileBusy()+0x4c>)
   17f92:	f7fe fa89 	bl	164a8 <__cyg_profile_func_exit>
    LOG_DEBUG("Card finished!");
  }
   17f96:	bf00      	nop
   17f98:	b004      	add	sp, #16
   17f9a:	bd10      	pop	{r4, pc}
   17f9c:	00017f51 	.word	0x00017f51

00017fa0 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)>:

  // Read any number of blocks from the SD card
  uint8_t ReadBlock(uint32_t address, uint8_t * array,
   17fa0:	b530      	push	{r4, r5, lr}
   17fa2:	f5ad 7d13 	sub.w	sp, sp, #588	; 0x24c
   17fa6:	4675      	mov	r5, lr
   17fa8:	ac05      	add	r4, sp, #20
   17faa:	6020      	str	r0, [r4, #0]
   17fac:	a804      	add	r0, sp, #16
   17fae:	6001      	str	r1, [r0, #0]
   17fb0:	a903      	add	r1, sp, #12
   17fb2:	600a      	str	r2, [r1, #0]
   17fb4:	aa02      	add	r2, sp, #8
   17fb6:	6013      	str	r3, [r2, #0]
   17fb8:	462b      	mov	r3, r5
   17fba:	4619      	mov	r1, r3
   17fbc:	487d      	ldr	r0, [pc, #500]	; (181b4 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x214>)
   17fbe:	f7fe fa5f 	bl	16480 <__cyg_profile_func_enter>
                    uint32_t blocks = 1) override
  {
    LOG_DEBUG("Block %" PRId32 " :: 0x%" PRIX32 " for %" PRId32 " blocks",
              address, address, blocks);
    // Wait for a previous command to finish
    WaitWhileBusy();
   17fc2:	ab05      	add	r3, sp, #20
   17fc4:	6818      	ldr	r0, [r3, #0]
   17fc6:	f7ff ffc3 	bl	17f50 <Sd::WaitWhileBusy()>

    // Create a temporary storage location to store sd command responses
    Sd::CardInfo_t sd;
    bool payload_had_bad_crc = false;
   17fca:	2300      	movs	r3, #0
   17fcc:	f88d 3247 	strb.w	r3, [sp, #583]	; 0x247

    // Create a temporary place to store blocks of 512 bytes (this is now
    // possible because the constructor enforces block size cross-
    // compatibility)
    uint8_t block_store[512] = { 0 };
   17fd0:	ab06      	add	r3, sp, #24
   17fd2:	4618      	mov	r0, r3
   17fd4:	f44f 7300 	mov.w	r3, #512	; 0x200
   17fd8:	461a      	mov	r2, r3
   17fda:	2100      	movs	r1, #0
   17fdc:	f001 f8fa 	bl	191d4 <memset>

    // Determine appropriate command to send
    Command read_cmd;
    if (blocks > 1)
   17fe0:	ab02      	add	r3, sp, #8
   17fe2:	681b      	ldr	r3, [r3, #0]
   17fe4:	2b01      	cmp	r3, #1
   17fe6:	d902      	bls.n	17fee <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x4e>
    {
      read_cmd = Command::kReadMulti;
   17fe8:	2352      	movs	r3, #82	; 0x52
   17fea:	9390      	str	r3, [sp, #576]	; 0x240
   17fec:	e001      	b.n	17ff2 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x52>
    }
    else
    {
      read_cmd = Command::kReadSingle;
   17fee:	2351      	movs	r3, #81	; 0x51
   17ff0:	9390      	str	r3, [sp, #576]	; 0x240
    }

    // Send initial read command
    sd.response.length =
        SendCmd(read_cmd, address, sd.response.data.byte, 100, KeepAlive::kYes);
   17ff2:	ab05      	add	r3, sp, #20
   17ff4:	681b      	ldr	r3, [r3, #0]
   17ff6:	681b      	ldr	r3, [r3, #0]
   17ff8:	681c      	ldr	r4, [r3, #0]
   17ffa:	ab86      	add	r3, sp, #536	; 0x218
   17ffc:	f103 0108 	add.w	r1, r3, #8
   18000:	aa04      	add	r2, sp, #16
   18002:	a805      	add	r0, sp, #20
   18004:	2301      	movs	r3, #1
   18006:	9301      	str	r3, [sp, #4]
   18008:	2364      	movs	r3, #100	; 0x64
   1800a:	9300      	str	r3, [sp, #0]
   1800c:	460b      	mov	r3, r1
   1800e:	6812      	ldr	r2, [r2, #0]
   18010:	9990      	ldr	r1, [sp, #576]	; 0x240
   18012:	6800      	ldr	r0, [r0, #0]
   18014:	47a0      	blx	r4
   18016:	4603      	mov	r3, r0
    sd.response.length =
   18018:	938a      	str	r3, [sp, #552]	; 0x228
    LOG_DEBUG("Sent Read Cmd");
    LOG_DEBUG("[R1 Response:0x%02X]", sd.response.data.byte[0]);

    // Check if the command was acknowledged properly
    if (sd.response.data.byte[0] == 0x00)
   1801a:	f89d 3220 	ldrb.w	r3, [sp, #544]	; 0x220
   1801e:	2b00      	cmp	r3, #0
   18020:	f040 80d8 	bne.w	181d4 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x234>
    {
      // For every block requested
      uint16_t block_count;
      for (block_count = 0; block_count < blocks; block_count++)
   18024:	2300      	movs	r3, #0
   18026:	f8ad 323e 	strh.w	r3, [sp, #574]	; 0x23e
   1802a:	f8bd 323e 	ldrh.w	r3, [sp, #574]	; 0x23e
   1802e:	aa02      	add	r2, sp, #8
   18030:	6812      	ldr	r2, [r2, #0]
   18032:	429a      	cmp	r2, r3
   18034:	f240 8099 	bls.w	1816a <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x1ca>
      {
        // Wait for the card to respond with a ready signal
        WaitToReadBlock();
   18038:	ab05      	add	r3, sp, #20
   1803a:	6818      	ldr	r0, [r3, #0]
   1803c:	f7ff ff56 	bl	17eec <Sd::WaitToReadBlock()>

        // Calculate the block address offset
        uint16_t block_addr_offset =
   18040:	f8bd 323e 	ldrh.w	r3, [sp, #574]	; 0x23e
   18044:	025b      	lsls	r3, r3, #9
   18046:	f8ad 323a 	strh.w	r3, [sp, #570]	; 0x23a
            static_cast<uint16_t>(block_count * kBlockSize);

        // Read all the bytes of a single block
        for (uint16_t byte_count = 0; byte_count < kBlockSize; byte_count++)
   1804a:	2300      	movs	r3, #0
   1804c:	f8ad 323c 	strh.w	r3, [sp, #572]	; 0x23c
   18050:	f8bd 323c 	ldrh.w	r3, [sp, #572]	; 0x23c
   18054:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   18058:	d22b      	bcs.n	180b2 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x112>
        {
          // Calculate the current storage index
          uint16_t storage_index =
   1805a:	f8bd 223a 	ldrh.w	r2, [sp, #570]	; 0x23a
   1805e:	f8bd 323c 	ldrh.w	r3, [sp, #572]	; 0x23c
   18062:	4413      	add	r3, r2
   18064:	f8ad 3238 	strh.w	r3, [sp, #568]	; 0x238
              static_cast<uint16_t>(block_addr_offset + byte_count);

          // Transfer a byte to read a block from the SD card
          array[storage_index] =
              static_cast<uint8_t>(ssp_interface_->Transfer(0xFF));
   18068:	ab05      	add	r3, sp, #20
   1806a:	681b      	ldr	r3, [r3, #0]
   1806c:	685a      	ldr	r2, [r3, #4]
   1806e:	ab05      	add	r3, sp, #20
   18070:	681b      	ldr	r3, [r3, #0]
   18072:	685b      	ldr	r3, [r3, #4]
   18074:	681b      	ldr	r3, [r3, #0]
   18076:	3308      	adds	r3, #8
   18078:	681b      	ldr	r3, [r3, #0]
   1807a:	21ff      	movs	r1, #255	; 0xff
   1807c:	4610      	mov	r0, r2
   1807e:	4798      	blx	r3
   18080:	4603      	mov	r3, r0
   18082:	4619      	mov	r1, r3
          array[storage_index] =
   18084:	f8bd 3238 	ldrh.w	r3, [sp, #568]	; 0x238
   18088:	aa03      	add	r2, sp, #12
   1808a:	6812      	ldr	r2, [r2, #0]
   1808c:	4413      	add	r3, r2
   1808e:	b2ca      	uxtb	r2, r1
   18090:	701a      	strb	r2, [r3, #0]

          // Copy that byte into our temporary block store
          block_store[byte_count] = array[storage_index];
   18092:	f8bd 3238 	ldrh.w	r3, [sp, #568]	; 0x238
   18096:	aa03      	add	r2, sp, #12
   18098:	6812      	ldr	r2, [r2, #0]
   1809a:	441a      	add	r2, r3
   1809c:	f8bd 323c 	ldrh.w	r3, [sp, #572]	; 0x23c
   180a0:	7811      	ldrb	r1, [r2, #0]
   180a2:	aa06      	add	r2, sp, #24
   180a4:	54d1      	strb	r1, [r2, r3]
        for (uint16_t byte_count = 0; byte_count < kBlockSize; byte_count++)
   180a6:	f8bd 323c 	ldrh.w	r3, [sp, #572]	; 0x23c
   180aa:	3301      	adds	r3, #1
   180ac:	f8ad 323c 	strh.w	r3, [sp, #572]	; 0x23c
   180b0:	e7ce      	b.n	18050 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0xb0>
        }

        // Then read the block's 16-bit CRC (i.e. read two bytes)
        uint16_t block_crc =
            static_cast<uint16_t>((ssp_interface_->Transfer(0xFF) << 8) |
   180b2:	ab05      	add	r3, sp, #20
   180b4:	681b      	ldr	r3, [r3, #0]
   180b6:	685a      	ldr	r2, [r3, #4]
   180b8:	ab05      	add	r3, sp, #20
   180ba:	681b      	ldr	r3, [r3, #0]
   180bc:	685b      	ldr	r3, [r3, #4]
   180be:	681b      	ldr	r3, [r3, #0]
   180c0:	3308      	adds	r3, #8
   180c2:	681b      	ldr	r3, [r3, #0]
   180c4:	21ff      	movs	r1, #255	; 0xff
   180c6:	4610      	mov	r0, r2
   180c8:	4798      	blx	r3
   180ca:	4603      	mov	r3, r0
   180cc:	021b      	lsls	r3, r3, #8
   180ce:	b21c      	sxth	r4, r3
                                  ssp_interface_->Transfer(0xFF));
   180d0:	ab05      	add	r3, sp, #20
   180d2:	681b      	ldr	r3, [r3, #0]
   180d4:	685a      	ldr	r2, [r3, #4]
   180d6:	ab05      	add	r3, sp, #20
   180d8:	681b      	ldr	r3, [r3, #0]
   180da:	685b      	ldr	r3, [r3, #4]
   180dc:	681b      	ldr	r3, [r3, #0]
   180de:	3308      	adds	r3, #8
   180e0:	681b      	ldr	r3, [r3, #0]
   180e2:	21ff      	movs	r1, #255	; 0xff
   180e4:	4610      	mov	r0, r2
   180e6:	4798      	blx	r3
   180e8:	4603      	mov	r3, r0
   180ea:	b21b      	sxth	r3, r3
            static_cast<uint16_t>((ssp_interface_->Transfer(0xFF) << 8) |
   180ec:	4323      	orrs	r3, r4
   180ee:	b21b      	sxth	r3, r3
                                  ssp_interface_->Transfer(0xFF));
   180f0:	f8ad 3236 	strh.w	r3, [sp, #566]	; 0x236

        // Run a CRC-16 calculation on the message to determine if the
        // received CRCs match (i.e. checks if the block data is
        // valid).
        uint16_t expected_block_crc = GetCrc16(block_store, 512);
   180f4:	ab05      	add	r3, sp, #20
   180f6:	681b      	ldr	r3, [r3, #0]
   180f8:	681b      	ldr	r3, [r3, #0]
   180fa:	3320      	adds	r3, #32
   180fc:	681b      	ldr	r3, [r3, #0]
   180fe:	a906      	add	r1, sp, #24
   18100:	a805      	add	r0, sp, #20
   18102:	f44f 7200 	mov.w	r2, #512	; 0x200
   18106:	6800      	ldr	r0, [r0, #0]
   18108:	4798      	blx	r3
   1810a:	4603      	mov	r3, r0
   1810c:	f8ad 3234 	strh.w	r3, [sp, #564]	; 0x234

        LOG_DEBUG("Block #%d @ 0x%" PRIX32 " acquired", block_count, address);
        LOG_DEBUG("Expecting block crc16 '0x%04X'", expected_block_crc);
        LOG_DEBUG("Got '0x%04X'", block_crc);
        if (expected_block_crc != block_crc)
   18110:	f8bd 2234 	ldrh.w	r2, [sp, #564]	; 0x234
   18114:	f8bd 3236 	ldrh.w	r3, [sp, #566]	; 0x236
   18118:	429a      	cmp	r2, r3
   1811a:	d020      	beq.n	1815e <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x1be>
        {
          // If they do not match, set the bad crc status
          payload_had_bad_crc = true;
   1811c:	2301      	movs	r3, #1
   1811e:	f88d 3247 	strb.w	r3, [sp, #583]	; 0x247
          LOG_ERROR("While Reading Block #%d CRC16:", block_count);
   18122:	f8bd 323e 	ldrh.w	r3, [sp, #574]	; 0x23e
   18126:	9300      	str	r3, [sp, #0]
   18128:	f240 23ed 	movw	r3, #749	; 0x2ed
   1812c:	4a22      	ldr	r2, [pc, #136]	; (181b8 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x218>)
   1812e:	4923      	ldr	r1, [pc, #140]	; (181bc <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x21c>)
   18130:	4823      	ldr	r0, [pc, #140]	; (181c0 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x220>)
   18132:	f7ff fc21 	bl	17978 <printf>
          LOG_ERROR("Expected '0x%04X'", expected_block_crc);
   18136:	f8bd 3234 	ldrh.w	r3, [sp, #564]	; 0x234
   1813a:	9300      	str	r3, [sp, #0]
   1813c:	f240 23ee 	movw	r3, #750	; 0x2ee
   18140:	4a1d      	ldr	r2, [pc, #116]	; (181b8 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x218>)
   18142:	4920      	ldr	r1, [pc, #128]	; (181c4 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x224>)
   18144:	4820      	ldr	r0, [pc, #128]	; (181c8 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x228>)
   18146:	f7ff fc17 	bl	17978 <printf>
          LOG_ERROR("Got '0x%04X'", block_crc);
   1814a:	f8bd 3236 	ldrh.w	r3, [sp, #566]	; 0x236
   1814e:	9300      	str	r3, [sp, #0]
   18150:	f240 23ef 	movw	r3, #751	; 0x2ef
   18154:	4a18      	ldr	r2, [pc, #96]	; (181b8 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x218>)
   18156:	491d      	ldr	r1, [pc, #116]	; (181cc <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x22c>)
   18158:	481d      	ldr	r0, [pc, #116]	; (181d0 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x230>)
   1815a:	f7ff fc0d 	bl	17978 <printf>
      for (block_count = 0; block_count < blocks; block_count++)
   1815e:	f8bd 323e 	ldrh.w	r3, [sp, #574]	; 0x23e
   18162:	3301      	adds	r3, #1
   18164:	f8ad 323e 	strh.w	r3, [sp, #574]	; 0x23e
   18168:	e75f      	b.n	1802a <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x8a>
        }
      }

      // After reading multiple blocks, send the stop command to terminate the
      // transaction (i.e. no keep-alive)
      if (blocks > 1)
   1816a:	ab02      	add	r3, sp, #8
   1816c:	681b      	ldr	r3, [r3, #0]
   1816e:	2b01      	cmp	r3, #1
   18170:	d913      	bls.n	1819a <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x1fa>
      {
        sd.response.length =
            SendCmd(Command::kStopTrans, 0xFFFFFFFF, sd.response.data.byte, 100,
                    KeepAlive::kNo);
   18172:	ab05      	add	r3, sp, #20
   18174:	681b      	ldr	r3, [r3, #0]
   18176:	681b      	ldr	r3, [r3, #0]
   18178:	681c      	ldr	r4, [r3, #0]
            SendCmd(Command::kStopTrans, 0xFFFFFFFF, sd.response.data.byte, 100,
   1817a:	ab86      	add	r3, sp, #536	; 0x218
   1817c:	f103 0208 	add.w	r2, r3, #8
   18180:	a805      	add	r0, sp, #20
   18182:	2300      	movs	r3, #0
   18184:	9301      	str	r3, [sp, #4]
   18186:	2364      	movs	r3, #100	; 0x64
   18188:	9300      	str	r3, [sp, #0]
   1818a:	4613      	mov	r3, r2
   1818c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   18190:	214c      	movs	r1, #76	; 0x4c
   18192:	6800      	ldr	r0, [r0, #0]
   18194:	47a0      	blx	r4
   18196:	4603      	mov	r3, r0
        sd.response.length =
   18198:	938a      	str	r3, [sp, #552]	; 0x228
      LOG_DEBUG("Response Byte");
      LOG_DEBUG("0x%02X", sd.response.data.byte[0]);

      // If there was a bad crc from the payload, manually set the
      // CRC error flag in the command response byte
      if (payload_had_bad_crc)
   1819a:	f89d 3247 	ldrb.w	r3, [sp, #583]	; 0x247
   1819e:	2b00      	cmp	r3, #0
   181a0:	f000 80c0 	beq.w	18324 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x384>
      {
        sd.response.data.byte[0] |= 0x08;
   181a4:	f89d 3220 	ldrb.w	r3, [sp, #544]	; 0x220
   181a8:	f043 0308 	orr.w	r3, r3, #8
   181ac:	b2db      	uxtb	r3, r3
   181ae:	f88d 3220 	strb.w	r3, [sp, #544]	; 0x220
   181b2:	e0b7      	b.n	18324 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x384>
   181b4:	00017fa1 	.word	0x00017fa1
   181b8:	0001b988 	.word	0x0001b988
   181bc:	0001b884 	.word	0x0001b884
   181c0:	0001b094 	.word	0x0001b094
   181c4:	0001b88c 	.word	0x0001b88c
   181c8:	0001b0ec 	.word	0x0001b0ec
   181cc:	0001b894 	.word	0x0001b894
   181d0:	0001b138 	.word	0x0001b138
      }
    }
    else
    {
      LOG_ERROR("Read Cmd was not acknowledged properly!");
   181d4:	f240 3309 	movw	r3, #777	; 0x309
   181d8:	4a65      	ldr	r2, [pc, #404]	; (18370 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x3d0>)
   181da:	4966      	ldr	r1, [pc, #408]	; (18374 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x3d4>)
   181dc:	4866      	ldr	r0, [pc, #408]	; (18378 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x3d8>)
   181de:	f7ff fbcb 	bl	17978 <printf>
      LOG_ERROR("Parameter Err: %s", ToBool(sd.response.data.byte[0] & 0x40));
   181e2:	f89d 3220 	ldrb.w	r3, [sp, #544]	; 0x220
   181e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
   181ea:	2b00      	cmp	r3, #0
   181ec:	bf14      	ite	ne
   181ee:	2301      	movne	r3, #1
   181f0:	2300      	moveq	r3, #0
   181f2:	b2da      	uxtb	r2, r3
   181f4:	ab05      	add	r3, sp, #20
   181f6:	4611      	mov	r1, r2
   181f8:	6818      	ldr	r0, [r3, #0]
   181fa:	f7ff fe55 	bl	17ea8 <Sd::ToBool(bool)>
   181fe:	4603      	mov	r3, r0
   18200:	9300      	str	r3, [sp, #0]
   18202:	f240 330a 	movw	r3, #778	; 0x30a
   18206:	4a5a      	ldr	r2, [pc, #360]	; (18370 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x3d0>)
   18208:	495c      	ldr	r1, [pc, #368]	; (1837c <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x3dc>)
   1820a:	485d      	ldr	r0, [pc, #372]	; (18380 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x3e0>)
   1820c:	f7ff fbb4 	bl	17978 <printf>
      LOG_ERROR("Addr Err: %s", ToBool(sd.response.data.byte[0] & 0x20));
   18210:	f89d 3220 	ldrb.w	r3, [sp, #544]	; 0x220
   18214:	f003 0320 	and.w	r3, r3, #32
   18218:	2b00      	cmp	r3, #0
   1821a:	bf14      	ite	ne
   1821c:	2301      	movne	r3, #1
   1821e:	2300      	moveq	r3, #0
   18220:	b2da      	uxtb	r2, r3
   18222:	ab05      	add	r3, sp, #20
   18224:	4611      	mov	r1, r2
   18226:	6818      	ldr	r0, [r3, #0]
   18228:	f7ff fe3e 	bl	17ea8 <Sd::ToBool(bool)>
   1822c:	4603      	mov	r3, r0
   1822e:	9300      	str	r3, [sp, #0]
   18230:	f240 330b 	movw	r3, #779	; 0x30b
   18234:	4a4e      	ldr	r2, [pc, #312]	; (18370 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x3d0>)
   18236:	4953      	ldr	r1, [pc, #332]	; (18384 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x3e4>)
   18238:	4853      	ldr	r0, [pc, #332]	; (18388 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x3e8>)
   1823a:	f7ff fb9d 	bl	17978 <printf>
      LOG_ERROR("Erase Seq Err: %s", ToBool(sd.response.data.byte[0] & 0x10));
   1823e:	f89d 3220 	ldrb.w	r3, [sp, #544]	; 0x220
   18242:	f003 0310 	and.w	r3, r3, #16
   18246:	2b00      	cmp	r3, #0
   18248:	bf14      	ite	ne
   1824a:	2301      	movne	r3, #1
   1824c:	2300      	moveq	r3, #0
   1824e:	b2da      	uxtb	r2, r3
   18250:	ab05      	add	r3, sp, #20
   18252:	4611      	mov	r1, r2
   18254:	6818      	ldr	r0, [r3, #0]
   18256:	f7ff fe27 	bl	17ea8 <Sd::ToBool(bool)>
   1825a:	4603      	mov	r3, r0
   1825c:	9300      	str	r3, [sp, #0]
   1825e:	f44f 7343 	mov.w	r3, #780	; 0x30c
   18262:	4a43      	ldr	r2, [pc, #268]	; (18370 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x3d0>)
   18264:	4949      	ldr	r1, [pc, #292]	; (1838c <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x3ec>)
   18266:	484a      	ldr	r0, [pc, #296]	; (18390 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x3f0>)
   18268:	f7ff fb86 	bl	17978 <printf>
      LOG_ERROR("Com CRC Err: %s", ToBool(sd.response.data.byte[0] & 0x08));
   1826c:	f89d 3220 	ldrb.w	r3, [sp, #544]	; 0x220
   18270:	f003 0308 	and.w	r3, r3, #8
   18274:	2b00      	cmp	r3, #0
   18276:	bf14      	ite	ne
   18278:	2301      	movne	r3, #1
   1827a:	2300      	moveq	r3, #0
   1827c:	b2da      	uxtb	r2, r3
   1827e:	ab05      	add	r3, sp, #20
   18280:	4611      	mov	r1, r2
   18282:	6818      	ldr	r0, [r3, #0]
   18284:	f7ff fe10 	bl	17ea8 <Sd::ToBool(bool)>
   18288:	4603      	mov	r3, r0
   1828a:	9300      	str	r3, [sp, #0]
   1828c:	f240 330d 	movw	r3, #781	; 0x30d
   18290:	4a37      	ldr	r2, [pc, #220]	; (18370 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x3d0>)
   18292:	4940      	ldr	r1, [pc, #256]	; (18394 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x3f4>)
   18294:	4840      	ldr	r0, [pc, #256]	; (18398 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x3f8>)
   18296:	f7ff fb6f 	bl	17978 <printf>
      LOG_ERROR("Illegal Cmd Err: %s", ToBool(sd.response.data.byte[0] & 0x04));
   1829a:	f89d 3220 	ldrb.w	r3, [sp, #544]	; 0x220
   1829e:	f003 0304 	and.w	r3, r3, #4
   182a2:	2b00      	cmp	r3, #0
   182a4:	bf14      	ite	ne
   182a6:	2301      	movne	r3, #1
   182a8:	2300      	moveq	r3, #0
   182aa:	b2da      	uxtb	r2, r3
   182ac:	ab05      	add	r3, sp, #20
   182ae:	4611      	mov	r1, r2
   182b0:	6818      	ldr	r0, [r3, #0]
   182b2:	f7ff fdf9 	bl	17ea8 <Sd::ToBool(bool)>
   182b6:	4603      	mov	r3, r0
   182b8:	9300      	str	r3, [sp, #0]
   182ba:	f240 330e 	movw	r3, #782	; 0x30e
   182be:	4a2c      	ldr	r2, [pc, #176]	; (18370 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x3d0>)
   182c0:	4936      	ldr	r1, [pc, #216]	; (1839c <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x3fc>)
   182c2:	4837      	ldr	r0, [pc, #220]	; (183a0 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x400>)
   182c4:	f7ff fb58 	bl	17978 <printf>
      LOG_ERROR("Erase Reset: %s", ToBool(sd.response.data.byte[0] & 0x02));
   182c8:	f89d 3220 	ldrb.w	r3, [sp, #544]	; 0x220
   182cc:	f003 0302 	and.w	r3, r3, #2
   182d0:	2b00      	cmp	r3, #0
   182d2:	bf14      	ite	ne
   182d4:	2301      	movne	r3, #1
   182d6:	2300      	moveq	r3, #0
   182d8:	b2da      	uxtb	r2, r3
   182da:	ab05      	add	r3, sp, #20
   182dc:	4611      	mov	r1, r2
   182de:	6818      	ldr	r0, [r3, #0]
   182e0:	f7ff fde2 	bl	17ea8 <Sd::ToBool(bool)>
   182e4:	4603      	mov	r3, r0
   182e6:	9300      	str	r3, [sp, #0]
   182e8:	f240 330f 	movw	r3, #783	; 0x30f
   182ec:	4a20      	ldr	r2, [pc, #128]	; (18370 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x3d0>)
   182ee:	492d      	ldr	r1, [pc, #180]	; (183a4 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x404>)
   182f0:	482d      	ldr	r0, [pc, #180]	; (183a8 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x408>)
   182f2:	f7ff fb41 	bl	17978 <printf>
      LOG_ERROR("In Idle: %s", ToBool(sd.response.data.byte[0] & 0x01));
   182f6:	f89d 3220 	ldrb.w	r3, [sp, #544]	; 0x220
   182fa:	f003 0301 	and.w	r3, r3, #1
   182fe:	2b00      	cmp	r3, #0
   18300:	bf14      	ite	ne
   18302:	2301      	movne	r3, #1
   18304:	2300      	moveq	r3, #0
   18306:	b2da      	uxtb	r2, r3
   18308:	ab05      	add	r3, sp, #20
   1830a:	4611      	mov	r1, r2
   1830c:	6818      	ldr	r0, [r3, #0]
   1830e:	f7ff fdcb 	bl	17ea8 <Sd::ToBool(bool)>
   18312:	4603      	mov	r3, r0
   18314:	9300      	str	r3, [sp, #0]
   18316:	f44f 7344 	mov.w	r3, #784	; 0x310
   1831a:	4a15      	ldr	r2, [pc, #84]	; (18370 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x3d0>)
   1831c:	4923      	ldr	r1, [pc, #140]	; (183ac <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x40c>)
   1831e:	4824      	ldr	r0, [pc, #144]	; (183b0 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x410>)
   18320:	f7ff fb2a 	bl	17978 <printf>
    LOG_DEBUG("Now waiting for SD Card to exit Idle Mode...");
    do
    {
      // Query the status register
      sd.response.length = SendCmd(Command::kGetStatus, 32,
                                   sd.response.data.byte, 0, KeepAlive::kNo);
   18324:	ab05      	add	r3, sp, #20
   18326:	681b      	ldr	r3, [r3, #0]
   18328:	681b      	ldr	r3, [r3, #0]
   1832a:	681c      	ldr	r4, [r3, #0]
      sd.response.length = SendCmd(Command::kGetStatus, 32,
   1832c:	ab86      	add	r3, sp, #536	; 0x218
   1832e:	f103 0208 	add.w	r2, r3, #8
   18332:	a805      	add	r0, sp, #20
   18334:	2300      	movs	r3, #0
   18336:	9301      	str	r3, [sp, #4]
   18338:	2300      	movs	r3, #0
   1833a:	9300      	str	r3, [sp, #0]
   1833c:	4613      	mov	r3, r2
   1833e:	2220      	movs	r2, #32
   18340:	210d      	movs	r1, #13
   18342:	6800      	ldr	r0, [r0, #0]
   18344:	47a0      	blx	r4
   18346:	4603      	mov	r3, r0
   18348:	938a      	str	r3, [sp, #552]	; 0x228
    } while (sd.response.data.byte[0] & 0x01);
   1834a:	f89d 3220 	ldrb.w	r3, [sp, #544]	; 0x220
   1834e:	f003 0301 	and.w	r3, r3, #1
   18352:	2b00      	cmp	r3, #0
   18354:	d000      	beq.n	18358 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x3b8>
    do
   18356:	e7e5      	b.n	18324 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x384>
    LOG_DEBUG("SD Card is out of Idle Mode!");

    // Return the status
    LOG_DEBUG("Read Complete! [R1 Response: 0x%02X]", sd.response.data.byte[0]);
    return sd.response.data.byte[0];
   18358:	f89d 4220 	ldrb.w	r4, [sp, #544]	; 0x220
   1835c:	462b      	mov	r3, r5
   1835e:	4619      	mov	r1, r3
   18360:	4814      	ldr	r0, [pc, #80]	; (183b4 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x414>)
   18362:	f7fe f8a1 	bl	164a8 <__cyg_profile_func_exit>
   18366:	4623      	mov	r3, r4
  }
   18368:	4618      	mov	r0, r3
   1836a:	f50d 7d13 	add.w	sp, sp, #588	; 0x24c
   1836e:	bd30      	pop	{r4, r5, pc}
   18370:	0001b988 	.word	0x0001b988
   18374:	0001b89c 	.word	0x0001b89c
   18378:	0001b180 	.word	0x0001b180
   1837c:	0001b8a4 	.word	0x0001b8a4
   18380:	0001b1e4 	.word	0x0001b1e4
   18384:	0001b8ac 	.word	0x0001b8ac
   18388:	0001b230 	.word	0x0001b230
   1838c:	0001b8b4 	.word	0x0001b8b4
   18390:	0001b278 	.word	0x0001b278
   18394:	0001b8bc 	.word	0x0001b8bc
   18398:	0001b2c4 	.word	0x0001b2c4
   1839c:	0001b8c4 	.word	0x0001b8c4
   183a0:	0001b310 	.word	0x0001b310
   183a4:	0001b8cc 	.word	0x0001b8cc
   183a8:	0001b360 	.word	0x0001b360
   183ac:	0001b8d4 	.word	0x0001b8d4
   183b0:	0001b3ac 	.word	0x0001b3ac
   183b4:	00017fa1 	.word	0x00017fa1

000183b8 <Sd::WriteBlock(unsigned long, unsigned char const*, unsigned long)>:

  // Writes any number of 512-byte blocks to the SD Card
  uint8_t WriteBlock(uint32_t address, const uint8_t * array,
   183b8:	b530      	push	{r4, r5, lr}
   183ba:	b095      	sub	sp, #84	; 0x54
   183bc:	4675      	mov	r5, lr
   183be:	9005      	str	r0, [sp, #20]
   183c0:	9104      	str	r1, [sp, #16]
   183c2:	9203      	str	r2, [sp, #12]
   183c4:	9302      	str	r3, [sp, #8]
   183c6:	462b      	mov	r3, r5
   183c8:	4619      	mov	r1, r3
   183ca:	4865      	ldr	r0, [pc, #404]	; (18560 <Sd::WriteBlock(unsigned long, unsigned char const*, unsigned long)+0x1a8>)
   183cc:	f7fe f858 	bl	16480 <__cyg_profile_func_enter>
                     uint32_t blocks = 1) override
  {
    // Wait for a previous command to finish
    WaitWhileBusy();
   183d0:	9805      	ldr	r0, [sp, #20]
   183d2:	f7ff fdbd 	bl	17f50 <Sd::WaitWhileBusy()>
    Sd::CardInfo_t sd;

    // Determine appropriate command and start token to send
    Command write_cmd;
    uint8_t write_start_tkn;
    if (blocks > 1)
   183d6:	9b02      	ldr	r3, [sp, #8]
   183d8:	2b01      	cmp	r3, #1
   183da:	d905      	bls.n	183e8 <Sd::WriteBlock(unsigned long, unsigned char const*, unsigned long)+0x30>
    {
      write_cmd       = Command::kWriteMulti;
   183dc:	2359      	movs	r3, #89	; 0x59
   183de:	9313      	str	r3, [sp, #76]	; 0x4c
      write_start_tkn = 0xFC;
   183e0:	23fc      	movs	r3, #252	; 0xfc
   183e2:	f88d 304b 	strb.w	r3, [sp, #75]	; 0x4b
   183e6:	e004      	b.n	183f2 <Sd::WriteBlock(unsigned long, unsigned char const*, unsigned long)+0x3a>
    }
    else
    {
      write_cmd       = Command::kWriteSingle;
   183e8:	2358      	movs	r3, #88	; 0x58
   183ea:	9313      	str	r3, [sp, #76]	; 0x4c
      write_start_tkn = 0xFE;
   183ec:	23fe      	movs	r3, #254	; 0xfe
   183ee:	f88d 304b 	strb.w	r3, [sp, #75]	; 0x4b
    }

    // Send initial write command
    sd.response.length = SendCmd(write_cmd, address, sd.response.data.byte, 100,
                                 KeepAlive::kYes);
   183f2:	9b05      	ldr	r3, [sp, #20]
   183f4:	681b      	ldr	r3, [r3, #0]
   183f6:	681c      	ldr	r4, [r3, #0]
    sd.response.length = SendCmd(write_cmd, address, sd.response.data.byte, 100,
   183f8:	ab06      	add	r3, sp, #24
   183fa:	f103 0208 	add.w	r2, r3, #8
   183fe:	2301      	movs	r3, #1
   18400:	9301      	str	r3, [sp, #4]
   18402:	2364      	movs	r3, #100	; 0x64
   18404:	9300      	str	r3, [sp, #0]
   18406:	4613      	mov	r3, r2
   18408:	9a04      	ldr	r2, [sp, #16]
   1840a:	9913      	ldr	r1, [sp, #76]	; 0x4c
   1840c:	9805      	ldr	r0, [sp, #20]
   1840e:	47a0      	blx	r4
   18410:	4603      	mov	r3, r0
   18412:	930a      	str	r3, [sp, #40]	; 0x28
    LOG_DEBUG("Sent Write Cmd");
    LOG_DEBUG("[R1 Response:0x%02X]", sd.response.data.byte[0]);

    // Check if the response was acknowledged properly
    if (sd.response.data.byte[0] == 0x00)
   18414:	f89d 3020 	ldrb.w	r3, [sp, #32]
   18418:	2b00      	cmp	r3, #0
   1841a:	f040 8096 	bne.w	1854a <Sd::WriteBlock(unsigned long, unsigned char const*, unsigned long)+0x192>
    {
      // If no errors, proceed write given block(s) to SD Card
      // For each given block
      for (uint16_t current_block_num = 0; current_block_num < blocks;
   1841e:	2300      	movs	r3, #0
   18420:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
   18424:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
   18428:	9a02      	ldr	r2, [sp, #8]
   1842a:	429a      	cmp	r2, r3
   1842c:	d97a      	bls.n	18524 <Sd::WriteBlock(unsigned long, unsigned char const*, unsigned long)+0x16c>
           current_block_num++)
      {
        // Calculate array offset
        uint64_t arr_offset = current_block_num * kBlockSize;
   1842e:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
   18432:	025b      	lsls	r3, r3, #9
   18434:	ea4f 74e3 	mov.w	r4, r3, asr #31
   18438:	e9cd 340e 	strd	r3, r4, [sp, #56]	; 0x38

        // Send the start token for the current block
        ssp_interface_->Transfer(write_start_tkn);
   1843c:	9b05      	ldr	r3, [sp, #20]
   1843e:	685a      	ldr	r2, [r3, #4]
   18440:	9b05      	ldr	r3, [sp, #20]
   18442:	685b      	ldr	r3, [r3, #4]
   18444:	681b      	ldr	r3, [r3, #0]
   18446:	3308      	adds	r3, #8
   18448:	681b      	ldr	r3, [r3, #0]
   1844a:	f89d 104b 	ldrb.w	r1, [sp, #75]	; 0x4b
   1844e:	b289      	uxth	r1, r1
   18450:	4610      	mov	r0, r2
   18452:	4798      	blx	r3

        // Write all 512-bytes of the given block
        LOG_DEBUG("Writing block #%d", current_block_num);
        for (uint16_t current_byte = 0; current_byte < kBlockSize;
   18454:	2300      	movs	r3, #0
   18456:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
   1845a:	f8bd 3046 	ldrh.w	r3, [sp, #70]	; 0x46
   1845e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   18462:	d216      	bcs.n	18492 <Sd::WriteBlock(unsigned long, unsigned char const*, unsigned long)+0xda>
             current_byte++)
        {
          ssp_interface_->Transfer(array[arr_offset + current_byte]);
   18464:	9b05      	ldr	r3, [sp, #20]
   18466:	6858      	ldr	r0, [r3, #4]
   18468:	9b05      	ldr	r3, [sp, #20]
   1846a:	685b      	ldr	r3, [r3, #4]
   1846c:	681b      	ldr	r3, [r3, #0]
   1846e:	3308      	adds	r3, #8
   18470:	681b      	ldr	r3, [r3, #0]
   18472:	990e      	ldr	r1, [sp, #56]	; 0x38
   18474:	f8bd 2046 	ldrh.w	r2, [sp, #70]	; 0x46
   18478:	440a      	add	r2, r1
   1847a:	9903      	ldr	r1, [sp, #12]
   1847c:	440a      	add	r2, r1
   1847e:	7812      	ldrb	r2, [r2, #0]
   18480:	b292      	uxth	r2, r2
   18482:	4611      	mov	r1, r2
   18484:	4798      	blx	r3
        for (uint16_t current_byte = 0; current_byte < kBlockSize;
   18486:	f8bd 3046 	ldrh.w	r3, [sp, #70]	; 0x46
   1848a:	3301      	adds	r3, #1
   1848c:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
   18490:	e7e3      	b.n	1845a <Sd::WriteBlock(unsigned long, unsigned char const*, unsigned long)+0xa2>
        }

        // Read the data response token after writing the block
        uint8_t data_response_tkn =
            static_cast<uint8_t>(ssp_interface_->Transfer(0xFF));
   18492:	9b05      	ldr	r3, [sp, #20]
   18494:	685a      	ldr	r2, [r3, #4]
   18496:	9b05      	ldr	r3, [sp, #20]
   18498:	685b      	ldr	r3, [r3, #4]
   1849a:	681b      	ldr	r3, [r3, #0]
   1849c:	3308      	adds	r3, #8
   1849e:	681b      	ldr	r3, [r3, #0]
   184a0:	21ff      	movs	r1, #255	; 0xff
   184a2:	4610      	mov	r0, r2
   184a4:	4798      	blx	r3
   184a6:	4603      	mov	r3, r0
   184a8:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
                  ToBool(data_response_tkn & 0x0B));
        LOG_DEBUG("Data Rejected (write err)?: %s",
                  ToBool(data_response_tkn & 0x0D));

        // If writing multiple blocks and the previous block was rejected
        if (blocks > 1 && !(data_response_tkn & 0x05))
   184ac:	9b02      	ldr	r3, [sp, #8]
   184ae:	2b01      	cmp	r3, #1
   184b0:	d92f      	bls.n	18512 <Sd::WriteBlock(unsigned long, unsigned char const*, unsigned long)+0x15a>
   184b2:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
   184b6:	f003 0305 	and.w	r3, r3, #5
   184ba:	2b00      	cmp	r3, #0
   184bc:	d129      	bne.n	18512 <Sd::WriteBlock(unsigned long, unsigned char const*, unsigned long)+0x15a>
        {
          // Send an immediate stop (CMD12)
          sd.response.length =
              SendCmd(Command::kStopTrans, 0xFFFFFFFF, sd.response.data.byte,
                      100, KeepAlive::kYes);
   184be:	9b05      	ldr	r3, [sp, #20]
   184c0:	681b      	ldr	r3, [r3, #0]
   184c2:	681c      	ldr	r4, [r3, #0]
              SendCmd(Command::kStopTrans, 0xFFFFFFFF, sd.response.data.byte,
   184c4:	ab06      	add	r3, sp, #24
   184c6:	f103 0208 	add.w	r2, r3, #8
   184ca:	2301      	movs	r3, #1
   184cc:	9301      	str	r3, [sp, #4]
   184ce:	2364      	movs	r3, #100	; 0x64
   184d0:	9300      	str	r3, [sp, #0]
   184d2:	4613      	mov	r3, r2
   184d4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   184d8:	214c      	movs	r1, #76	; 0x4c
   184da:	9805      	ldr	r0, [sp, #20]
   184dc:	47a0      	blx	r4
   184de:	4603      	mov	r3, r0
          sd.response.length =
   184e0:	930a      	str	r3, [sp, #40]	; 0x28
          LOG_DEBUG("Stopped Transmission due to rejection...");
          LOG_DEBUG("[R1 Response: 0x%02X]", sd.response.data.byte[0]);

          // In the case of a write error, ask for the reason why
          if (data_response_tkn & 0x0D)
   184e2:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
   184e6:	f003 030d 	and.w	r3, r3, #13
   184ea:	2b00      	cmp	r3, #0
   184ec:	d011      	beq.n	18512 <Sd::WriteBlock(unsigned long, unsigned char const*, unsigned long)+0x15a>
          {
            sd.response.length =
                SendCmd(Command::kGetStatus, 0xFFFFFFFF, sd.response.data.byte,
                        100, KeepAlive::kYes);
   184ee:	9b05      	ldr	r3, [sp, #20]
   184f0:	681b      	ldr	r3, [r3, #0]
   184f2:	681c      	ldr	r4, [r3, #0]
                SendCmd(Command::kGetStatus, 0xFFFFFFFF, sd.response.data.byte,
   184f4:	ab06      	add	r3, sp, #24
   184f6:	f103 0208 	add.w	r2, r3, #8
   184fa:	2301      	movs	r3, #1
   184fc:	9301      	str	r3, [sp, #4]
   184fe:	2364      	movs	r3, #100	; 0x64
   18500:	9300      	str	r3, [sp, #0]
   18502:	4613      	mov	r3, r2
   18504:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   18508:	210d      	movs	r1, #13
   1850a:	9805      	ldr	r0, [sp, #20]
   1850c:	47a0      	blx	r4
   1850e:	4603      	mov	r3, r0
            sd.response.length =
   18510:	930a      	str	r3, [sp, #40]	; 0x28
                "Checking Status Register to see cause of Write Error...");
            LOG_DEBUG("[R2 Response: 0x%04" PRIX32 "]",
                      sd.response.data.dWord.lo);
          }
        }
        WaitWhileBusy();
   18512:	9805      	ldr	r0, [sp, #20]
   18514:	f7ff fd1c 	bl	17f50 <Sd::WaitWhileBusy()>
      for (uint16_t current_block_num = 0; current_block_num < blocks;
   18518:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
   1851c:	3301      	adds	r3, #1
   1851e:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
   18522:	e77f      	b.n	18424 <Sd::WriteBlock(unsigned long, unsigned char const*, unsigned long)+0x6c>
      }

      if (blocks > 1)
   18524:	9b02      	ldr	r3, [sp, #8]
   18526:	2b01      	cmp	r3, #1
   18528:	d90f      	bls.n	1854a <Sd::WriteBlock(unsigned long, unsigned char const*, unsigned long)+0x192>
      {
        constexpr uint8_t kStopToken = 0xFD;
   1852a:	23fd      	movs	r3, #253	; 0xfd
   1852c:	f88d 3036 	strb.w	r3, [sp, #54]	; 0x36
        ssp_interface_->Transfer(kStopToken);
   18530:	9b05      	ldr	r3, [sp, #20]
   18532:	685a      	ldr	r2, [r3, #4]
   18534:	9b05      	ldr	r3, [sp, #20]
   18536:	685b      	ldr	r3, [r3, #4]
   18538:	681b      	ldr	r3, [r3, #0]
   1853a:	3308      	adds	r3, #8
   1853c:	681b      	ldr	r3, [r3, #0]
   1853e:	21fd      	movs	r1, #253	; 0xfd
   18540:	4610      	mov	r0, r2
   18542:	4798      	blx	r3

        // Wait for the card's programming to complete before
        // reselecting it (i.e. to prevent corruption)
        WaitWhileBusy();
   18544:	9805      	ldr	r0, [sp, #20]
   18546:	f7ff fd03 	bl	17f50 <Sd::WaitWhileBusy()>
      LOG_DEBUG("Illegal Cmd Err: %s", ToBool(sd.response.data.byte[0] & 0x04));
      LOG_DEBUG("Erase Reset: %s", ToBool(sd.response.data.byte[0] & 0x02));
      LOG_DEBUG("In Idle: %s", ToBool(sd.response.data.byte[0] & 0x01));
    }

    return sd.response.data.byte[0];
   1854a:	f89d 4020 	ldrb.w	r4, [sp, #32]
   1854e:	462b      	mov	r3, r5
   18550:	4619      	mov	r1, r3
   18552:	4803      	ldr	r0, [pc, #12]	; (18560 <Sd::WriteBlock(unsigned long, unsigned char const*, unsigned long)+0x1a8>)
   18554:	f7fd ffa8 	bl	164a8 <__cyg_profile_func_exit>
   18558:	4623      	mov	r3, r4
  }
   1855a:	4618      	mov	r0, r3
   1855c:	b015      	add	sp, #84	; 0x54
   1855e:	bd30      	pop	{r4, r5, pc}
   18560:	000183b9 	.word	0x000183b9

00018564 <Sd::DeleteBlock(unsigned long, unsigned long)>:

  // Deletes any number of blocks (inclusively) within a range of address.
  uint8_t DeleteBlock(uint32_t start, uint32_t end) override
   18564:	b530      	push	{r4, r5, lr}
   18566:	b08f      	sub	sp, #60	; 0x3c
   18568:	4675      	mov	r5, lr
   1856a:	9005      	str	r0, [sp, #20]
   1856c:	9104      	str	r1, [sp, #16]
   1856e:	9203      	str	r2, [sp, #12]
   18570:	462b      	mov	r3, r5
   18572:	4619      	mov	r1, r3
   18574:	483d      	ldr	r0, [pc, #244]	; (1866c <Sd::DeleteBlock(unsigned long, unsigned long)+0x108>)
   18576:	f7fd ff83 	bl	16480 <__cyg_profile_func_enter>
  {
    // Wait for a previous command to finish
    WaitWhileBusy();
   1857a:	9805      	ldr	r0, [sp, #20]
   1857c:	f7ff fce8 	bl	17f50 <Sd::WaitWhileBusy()>

    // Create a temporary storage location to store sd command responses
    Sd::CardInfo_t sd;
    bool delete_failed = false;
   18580:	2300      	movs	r3, #0
   18582:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37

    // Set the delete start address
    LOG_DEBUG("Setting Delete Start Address...");
    sd.response.length = SendCmd(Command::kDelFrom, start,
                                 sd.response.data.byte, 100, KeepAlive::kYes);
   18586:	9b05      	ldr	r3, [sp, #20]
   18588:	681b      	ldr	r3, [r3, #0]
   1858a:	681c      	ldr	r4, [r3, #0]
    sd.response.length = SendCmd(Command::kDelFrom, start,
   1858c:	ab06      	add	r3, sp, #24
   1858e:	f103 0208 	add.w	r2, r3, #8
   18592:	2301      	movs	r3, #1
   18594:	9301      	str	r3, [sp, #4]
   18596:	2364      	movs	r3, #100	; 0x64
   18598:	9300      	str	r3, [sp, #0]
   1859a:	4613      	mov	r3, r2
   1859c:	9a04      	ldr	r2, [sp, #16]
   1859e:	2160      	movs	r1, #96	; 0x60
   185a0:	9805      	ldr	r0, [sp, #20]
   185a2:	47a0      	blx	r4
   185a4:	4603      	mov	r3, r0
   185a6:	930a      	str	r3, [sp, #40]	; 0x28

    // Wait while the writing the start address
    WaitWhileBusy();
   185a8:	9805      	ldr	r0, [sp, #20]
   185aa:	f7ff fcd1 	bl	17f50 <Sd::WaitWhileBusy()>

    // Force return if an error occurred
    if (sd.response.data.byte[0] != 0x00)
   185ae:	f89d 3020 	ldrb.w	r3, [sp, #32]
   185b2:	2b00      	cmp	r3, #0
   185b4:	d009      	beq.n	185ca <Sd::DeleteBlock(unsigned long, unsigned long)+0x66>
    {
      LOG_ERROR("Failed to set Start Address!");
   185b6:	f44f 736a 	mov.w	r3, #936	; 0x3a8
   185ba:	4a2d      	ldr	r2, [pc, #180]	; (18670 <Sd::DeleteBlock(unsigned long, unsigned long)+0x10c>)
   185bc:	492d      	ldr	r1, [pc, #180]	; (18674 <Sd::DeleteBlock(unsigned long, unsigned long)+0x110>)
   185be:	482e      	ldr	r0, [pc, #184]	; (18678 <Sd::DeleteBlock(unsigned long, unsigned long)+0x114>)
   185c0:	f7ff f9da 	bl	17978 <printf>
      delete_failed = true;
   185c4:	2301      	movs	r3, #1
   185c6:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
    }

    // Set the delete end address
    if (!delete_failed)
   185ca:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
   185ce:	f083 0301 	eor.w	r3, r3, #1
   185d2:	b2db      	uxtb	r3, r3
   185d4:	2b00      	cmp	r3, #0
   185d6:	d010      	beq.n	185fa <Sd::DeleteBlock(unsigned long, unsigned long)+0x96>
    {
      LOG_DEBUG("Setting Delete End Address...");
      sd.response.length = SendCmd(Command::kDelTo, end, sd.response.data.byte,
                                   100, KeepAlive::kYes);
   185d8:	9b05      	ldr	r3, [sp, #20]
   185da:	681b      	ldr	r3, [r3, #0]
   185dc:	681c      	ldr	r4, [r3, #0]
      sd.response.length = SendCmd(Command::kDelTo, end, sd.response.data.byte,
   185de:	ab06      	add	r3, sp, #24
   185e0:	f103 0208 	add.w	r2, r3, #8
   185e4:	2301      	movs	r3, #1
   185e6:	9301      	str	r3, [sp, #4]
   185e8:	2364      	movs	r3, #100	; 0x64
   185ea:	9300      	str	r3, [sp, #0]
   185ec:	4613      	mov	r3, r2
   185ee:	9a03      	ldr	r2, [sp, #12]
   185f0:	2161      	movs	r1, #97	; 0x61
   185f2:	9805      	ldr	r0, [sp, #20]
   185f4:	47a0      	blx	r4
   185f6:	4603      	mov	r3, r0
   185f8:	930a      	str	r3, [sp, #40]	; 0x28
    }

    // Wait while the writing the end address
    WaitWhileBusy();
   185fa:	9805      	ldr	r0, [sp, #20]
   185fc:	f7ff fca8 	bl	17f50 <Sd::WaitWhileBusy()>

    // Force return if an error occurred
    if (sd.response.data.byte[0] != 0x00)
   18600:	f89d 3020 	ldrb.w	r3, [sp, #32]
   18604:	2b00      	cmp	r3, #0
   18606:	d009      	beq.n	1861c <Sd::DeleteBlock(unsigned long, unsigned long)+0xb8>
    {
      LOG_ERROR("Failed to set End Address!");
   18608:	f240 33ba 	movw	r3, #954	; 0x3ba
   1860c:	4a18      	ldr	r2, [pc, #96]	; (18670 <Sd::DeleteBlock(unsigned long, unsigned long)+0x10c>)
   1860e:	491b      	ldr	r1, [pc, #108]	; (1867c <Sd::DeleteBlock(unsigned long, unsigned long)+0x118>)
   18610:	481b      	ldr	r0, [pc, #108]	; (18680 <Sd::DeleteBlock(unsigned long, unsigned long)+0x11c>)
   18612:	f7ff f9b1 	bl	17978 <printf>
      delete_failed = true;
   18616:	2301      	movs	r3, #1
   18618:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
    }

    // Finally, attempt a delete
    if (!delete_failed)
   1861c:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
   18620:	f083 0301 	eor.w	r3, r3, #1
   18624:	b2db      	uxtb	r3, r3
   18626:	2b00      	cmp	r3, #0
   18628:	d014      	beq.n	18654 <Sd::DeleteBlock(unsigned long, unsigned long)+0xf0>
    {
      // Issue the delete command to delete from our from:to range
      LOG_DEBUG("Issuing Delete Command...");
      sd.response.length = SendCmd(Command::kDel, 0xFFFFFFFF,
                                   sd.response.data.byte, 100, KeepAlive::kYes);
   1862a:	9b05      	ldr	r3, [sp, #20]
   1862c:	681b      	ldr	r3, [r3, #0]
   1862e:	681c      	ldr	r4, [r3, #0]
      sd.response.length = SendCmd(Command::kDel, 0xFFFFFFFF,
   18630:	ab06      	add	r3, sp, #24
   18632:	f103 0208 	add.w	r2, r3, #8
   18636:	2301      	movs	r3, #1
   18638:	9301      	str	r3, [sp, #4]
   1863a:	2364      	movs	r3, #100	; 0x64
   1863c:	9300      	str	r3, [sp, #0]
   1863e:	4613      	mov	r3, r2
   18640:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   18644:	2166      	movs	r1, #102	; 0x66
   18646:	9805      	ldr	r0, [sp, #20]
   18648:	47a0      	blx	r4
   1864a:	4603      	mov	r3, r0
   1864c:	930a      	str	r3, [sp, #40]	; 0x28

      // Wait while the deletion occurs
      WaitWhileBusy();
   1864e:	9805      	ldr	r0, [sp, #20]
   18650:	f7ff fc7e 	bl	17f50 <Sd::WaitWhileBusy()>
      LOG_DEBUG("[R1 Response: 0x%02X]", sd.response.data.byte[0]);
      LOG_DEBUG("Deletion Complete...");
    }

    // Return status
    return sd.response.data.byte[0];
   18654:	f89d 4020 	ldrb.w	r4, [sp, #32]
   18658:	462b      	mov	r3, r5
   1865a:	4619      	mov	r1, r3
   1865c:	4803      	ldr	r0, [pc, #12]	; (1866c <Sd::DeleteBlock(unsigned long, unsigned long)+0x108>)
   1865e:	f7fd ff23 	bl	164a8 <__cyg_profile_func_exit>
   18662:	4623      	mov	r3, r4
  }
   18664:	4618      	mov	r0, r3
   18666:	b00f      	add	sp, #60	; 0x3c
   18668:	bd30      	pop	{r4, r5, pc}
   1866a:	bf00      	nop
   1866c:	00018565 	.word	0x00018565
   18670:	0001b9c4 	.word	0x0001b9c4
   18674:	0001b8dc 	.word	0x0001b8dc
   18678:	0001b3f4 	.word	0x0001b3f4
   1867c:	0001b8e4 	.word	0x0001b8e4
   18680:	0001b44c 	.word	0x0001b44c

00018684 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)>:

  // Send a command
  uint32_t SendCmd(Command sdc, uint32_t arg, uint8_t response_buffer[],
   18684:	e92d 49f0 	stmdb	sp!, {r4, r5, r6, r7, r8, fp, lr}
   18688:	b08f      	sub	sp, #60	; 0x3c
   1868a:	46f0      	mov	r8, lr
   1868c:	9003      	str	r0, [sp, #12]
   1868e:	9102      	str	r1, [sp, #8]
   18690:	9201      	str	r2, [sp, #4]
   18692:	9300      	str	r3, [sp, #0]
   18694:	4643      	mov	r3, r8
   18696:	4619      	mov	r1, r3
   18698:	4840      	ldr	r0, [pc, #256]	; (1879c <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x118>)
   1869a:	f7fd fef1 	bl	16480 <__cyg_profile_func_enter>
                   uint32_t delay, KeepAlive keep_alive) override
  {
    ResponseType res_type;
    uint8_t res_len    = 0;
   1869e:	2300      	movs	r3, #0
   186a0:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
    uint8_t crc        = 0;
   186a4:	2300      	movs	r3, #0
   186a6:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
    uint8_t tries      = 0;
   186aa:	2300      	movs	r3, #0
   186ac:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
    uint8_t bit_offset = 0;  // determines the distance of the response's
   186b0:	2300      	movs	r3, #0
   186b2:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
                             // 0 bit from the MSB place
    uint8_t temp_byte = 0;
   186b6:	2300      	movs	r3, #0
   186b8:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f

    // Determine the response type of the set command
    switch (sdc)
   186bc:	9b02      	ldr	r3, [sp, #8]
   186be:	2b58      	cmp	r3, #88	; 0x58
   186c0:	d052      	beq.n	18768 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0xe4>
   186c2:	2b58      	cmp	r3, #88	; 0x58
   186c4:	dc16      	bgt.n	186f4 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x70>
   186c6:	2b48      	cmp	r3, #72	; 0x48
   186c8:	d033      	beq.n	18732 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0xae>
   186ca:	2b48      	cmp	r3, #72	; 0x48
   186cc:	dc06      	bgt.n	186dc <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x58>
   186ce:	2b40      	cmp	r3, #64	; 0x40
   186d0:	d029      	beq.n	18726 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0xa2>
   186d2:	2b41      	cmp	r3, #65	; 0x41
   186d4:	d02a      	beq.n	1872c <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0xa8>
   186d6:	2b0d      	cmp	r3, #13
   186d8:	d031      	beq.n	1873e <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0xba>
   186da:	e054      	b.n	18786 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x102>
   186dc:	2b50      	cmp	r3, #80	; 0x50
   186de:	d03a      	beq.n	18756 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0xd2>
   186e0:	2b50      	cmp	r3, #80	; 0x50
   186e2:	dc02      	bgt.n	186ea <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x66>
   186e4:	2b4c      	cmp	r3, #76	; 0x4c
   186e6:	d027      	beq.n	18738 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0xb4>
   186e8:	e04d      	b.n	18786 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x102>
   186ea:	2b51      	cmp	r3, #81	; 0x51
   186ec:	d036      	beq.n	1875c <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0xd8>
   186ee:	2b52      	cmp	r3, #82	; 0x52
   186f0:	d037      	beq.n	18762 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0xde>
   186f2:	e048      	b.n	18786 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x102>
   186f4:	2b66      	cmp	r3, #102	; 0x66
   186f6:	d043      	beq.n	18780 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0xfc>
   186f8:	2b66      	cmp	r3, #102	; 0x66
   186fa:	dc06      	bgt.n	1870a <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x86>
   186fc:	2b60      	cmp	r3, #96	; 0x60
   186fe:	d039      	beq.n	18774 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0xf0>
   18700:	2b61      	cmp	r3, #97	; 0x61
   18702:	d03a      	beq.n	1877a <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0xf6>
   18704:	2b59      	cmp	r3, #89	; 0x59
   18706:	d032      	beq.n	1876e <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0xea>
   18708:	e03d      	b.n	18786 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x102>
   1870a:	2b77      	cmp	r3, #119	; 0x77
   1870c:	d01a      	beq.n	18744 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0xc0>
   1870e:	2b77      	cmp	r3, #119	; 0x77
   18710:	dc02      	bgt.n	18718 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x94>
   18712:	2b69      	cmp	r3, #105	; 0x69
   18714:	d019      	beq.n	1874a <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0xc6>
   18716:	e036      	b.n	18786 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x102>
   18718:	2b7a      	cmp	r3, #122	; 0x7a
   1871a:	d019      	beq.n	18750 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0xcc>
   1871c:	2bff      	cmp	r3, #255	; 0xff
   1871e:	d132      	bne.n	18786 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x102>
    {
      case Command::kGarbage: res_type = ResponseType::kR1; break;
   18720:	2300      	movs	r3, #0
   18722:	930d      	str	r3, [sp, #52]	; 0x34
   18724:	e042      	b.n	187ac <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x128>
      case Command::kReset: res_type = ResponseType::kR1; break;
   18726:	2300      	movs	r3, #0
   18728:	930d      	str	r3, [sp, #52]	; 0x34
   1872a:	e03f      	b.n	187ac <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x128>
      case Command::kInit: res_type = ResponseType::kR1; break;
   1872c:	2300      	movs	r3, #0
   1872e:	930d      	str	r3, [sp, #52]	; 0x34
   18730:	e03c      	b.n	187ac <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x128>
      case Command::kGetOp: res_type = ResponseType::kR7; break;
   18732:	2307      	movs	r3, #7
   18734:	930d      	str	r3, [sp, #52]	; 0x34
   18736:	e039      	b.n	187ac <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x128>
      case Command::kStopTrans: res_type = ResponseType::kR1; break;
   18738:	2300      	movs	r3, #0
   1873a:	930d      	str	r3, [sp, #52]	; 0x34
   1873c:	e036      	b.n	187ac <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x128>
      case Command::kGetStatus: res_type = ResponseType::kR2; break;
   1873e:	2302      	movs	r3, #2
   18740:	930d      	str	r3, [sp, #52]	; 0x34
   18742:	e033      	b.n	187ac <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x128>
      case Command::kAcBegin: res_type = ResponseType::kR1; break;
   18744:	2300      	movs	r3, #0
   18746:	930d      	str	r3, [sp, #52]	; 0x34
   18748:	e030      	b.n	187ac <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x128>
      case Command::kAcInit: res_type = ResponseType::kR1; break;
   1874a:	2300      	movs	r3, #0
   1874c:	930d      	str	r3, [sp, #52]	; 0x34
   1874e:	e02d      	b.n	187ac <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x128>
      case Command::kGetOcr: res_type = ResponseType::kR3; break;
   18750:	2303      	movs	r3, #3
   18752:	930d      	str	r3, [sp, #52]	; 0x34
   18754:	e02a      	b.n	187ac <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x128>
      case Command::kChgBlkLen: res_type = ResponseType::kR1; break;
   18756:	2300      	movs	r3, #0
   18758:	930d      	str	r3, [sp, #52]	; 0x34
   1875a:	e027      	b.n	187ac <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x128>
      case Command::kReadSingle: res_type = ResponseType::kR1; break;
   1875c:	2300      	movs	r3, #0
   1875e:	930d      	str	r3, [sp, #52]	; 0x34
   18760:	e024      	b.n	187ac <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x128>
      case Command::kReadMulti: res_type = ResponseType::kR1; break;
   18762:	2300      	movs	r3, #0
   18764:	930d      	str	r3, [sp, #52]	; 0x34
   18766:	e021      	b.n	187ac <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x128>
      case Command::kWriteSingle: res_type = ResponseType::kR1; break;
   18768:	2300      	movs	r3, #0
   1876a:	930d      	str	r3, [sp, #52]	; 0x34
   1876c:	e01e      	b.n	187ac <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x128>
      case Command::kWriteMulti: res_type = ResponseType::kR1; break;
   1876e:	2300      	movs	r3, #0
   18770:	930d      	str	r3, [sp, #52]	; 0x34
   18772:	e01b      	b.n	187ac <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x128>
      case Command::kDelFrom: res_type = ResponseType::kR1; break;
   18774:	2300      	movs	r3, #0
   18776:	930d      	str	r3, [sp, #52]	; 0x34
   18778:	e018      	b.n	187ac <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x128>
      case Command::kDelTo: res_type = ResponseType::kR1; break;
   1877a:	2300      	movs	r3, #0
   1877c:	930d      	str	r3, [sp, #52]	; 0x34
   1877e:	e015      	b.n	187ac <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x128>
      case Command::kDel: res_type = ResponseType::kR1b; break;
   18780:	2301      	movs	r3, #1
   18782:	930d      	str	r3, [sp, #52]	; 0x34
   18784:	e012      	b.n	187ac <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x128>
      default:
        LOG_ERROR("Unknown response type. Aborting!");
   18786:	f240 33f3 	movw	r3, #1011	; 0x3f3
   1878a:	4a05      	ldr	r2, [pc, #20]	; (187a0 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x11c>)
   1878c:	4905      	ldr	r1, [pc, #20]	; (187a4 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x120>)
   1878e:	4806      	ldr	r0, [pc, #24]	; (187a8 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x124>)
   18790:	f7ff f8f2 	bl	17978 <printf>
        return -1;
   18794:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   18798:	e1b1      	b.n	18afe <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x47a>
   1879a:	bf00      	nop
   1879c:	00018685 	.word	0x00018685
   187a0:	0001b9f8 	.word	0x0001b9f8
   187a4:	0001b8ec 	.word	0x0001b8ec
   187a8:	0001b4a0 	.word	0x0001b4a0
    // algorithm
    uint8_t msg[5] = { static_cast<uint8_t>(sdc),
                       static_cast<uint8_t>(arg >> 24),
                       static_cast<uint8_t>(arg >> 16),
                       static_cast<uint8_t>(arg >> 8),
                       static_cast<uint8_t>(arg >> 0) };
   187ac:	9b02      	ldr	r3, [sp, #8]
   187ae:	b2db      	uxtb	r3, r3
   187b0:	f88d 3010 	strb.w	r3, [sp, #16]
                       static_cast<uint8_t>(arg >> 24),
   187b4:	9b01      	ldr	r3, [sp, #4]
   187b6:	0e1b      	lsrs	r3, r3, #24
                       static_cast<uint8_t>(arg >> 0) };
   187b8:	b2db      	uxtb	r3, r3
   187ba:	f88d 3011 	strb.w	r3, [sp, #17]
                       static_cast<uint8_t>(arg >> 16),
   187be:	9b01      	ldr	r3, [sp, #4]
   187c0:	0c1b      	lsrs	r3, r3, #16
                       static_cast<uint8_t>(arg >> 0) };
   187c2:	b2db      	uxtb	r3, r3
   187c4:	f88d 3012 	strb.w	r3, [sp, #18]
                       static_cast<uint8_t>(arg >> 8),
   187c8:	9b01      	ldr	r3, [sp, #4]
   187ca:	0a1b      	lsrs	r3, r3, #8
                       static_cast<uint8_t>(arg >> 0) };
   187cc:	b2db      	uxtb	r3, r3
   187ce:	f88d 3013 	strb.w	r3, [sp, #19]
   187d2:	9b01      	ldr	r3, [sp, #4]
   187d4:	b2db      	uxtb	r3, r3
   187d6:	f88d 3014 	strb.w	r3, [sp, #20]

    crc = GetCrc7(msg, sizeof(msg));
   187da:	9b03      	ldr	r3, [sp, #12]
   187dc:	681b      	ldr	r3, [r3, #0]
   187de:	331c      	adds	r3, #28
   187e0:	681b      	ldr	r3, [r3, #0]
   187e2:	a904      	add	r1, sp, #16
   187e4:	2205      	movs	r2, #5
   187e6:	9803      	ldr	r0, [sp, #12]
   187e8:	4798      	blx	r3
   187ea:	4603      	mov	r3, r0
   187ec:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
    if (sdc == Command::kGarbage)
   187f0:	9b02      	ldr	r3, [sp, #8]
   187f2:	2bff      	cmp	r3, #255	; 0xff
   187f4:	d102      	bne.n	187fc <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x178>
    {
      crc = 0xFF;
   187f6:	23ff      	movs	r3, #255	; 0xff
   187f8:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
    }

    // Select the SD Card
    chip_select_->SetLow();
   187fc:	9b03      	ldr	r3, [sp, #12]
   187fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   18800:	9b03      	ldr	r3, [sp, #12]
   18802:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   18804:	681b      	ldr	r3, [r3, #0]
   18806:	3310      	adds	r3, #16
   18808:	681b      	ldr	r3, [r3, #0]
   1880a:	4610      	mov	r0, r2
   1880c:	4798      	blx	r3
    chip_select_external_->SetLow();
   1880e:	9b03      	ldr	r3, [sp, #12]
   18810:	6bda      	ldr	r2, [r3, #60]	; 0x3c
   18812:	9b03      	ldr	r3, [sp, #12]
   18814:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   18816:	681b      	ldr	r3, [r3, #0]
   18818:	3310      	adds	r3, #16
   1881a:	681b      	ldr	r3, [r3, #0]
   1881c:	4610      	mov	r0, r2
   1881e:	4798      	blx	r3

    // If desired, wait a bit before talking
    if (delay > 0)
   18820:	9b16      	ldr	r3, [sp, #88]	; 0x58
   18822:	2b00      	cmp	r3, #0
   18824:	d007      	beq.n	18836 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x1b2>
    {
      Delay(delay);
   18826:	9b16      	ldr	r3, [sp, #88]	; 0x58
   18828:	461a      	mov	r2, r3
   1882a:	f04f 0300 	mov.w	r3, #0
   1882e:	4610      	mov	r0, r2
   18830:	4619      	mov	r1, r3
   18832:	f7f8 fc8f 	bl	11154 <Delay(unsigned long long)>
    }

    // Send the desired command frame to the SD card board
    // Begin by transfering the command byte
    ssp_interface_->Transfer(static_cast<uint16_t>(sdc));
   18836:	9b03      	ldr	r3, [sp, #12]
   18838:	685a      	ldr	r2, [r3, #4]
   1883a:	9b03      	ldr	r3, [sp, #12]
   1883c:	685b      	ldr	r3, [r3, #4]
   1883e:	681b      	ldr	r3, [r3, #0]
   18840:	3308      	adds	r3, #8
   18842:	681b      	ldr	r3, [r3, #0]
   18844:	9902      	ldr	r1, [sp, #8]
   18846:	b289      	uxth	r1, r1
   18848:	4610      	mov	r0, r2
   1884a:	4798      	blx	r3
    // Send arg byte [31:24]
    ssp_interface_->Transfer(static_cast<uint16_t>(arg >> 24) & 0xFF);
   1884c:	9b03      	ldr	r3, [sp, #12]
   1884e:	6858      	ldr	r0, [r3, #4]
   18850:	9b03      	ldr	r3, [sp, #12]
   18852:	685b      	ldr	r3, [r3, #4]
   18854:	681b      	ldr	r3, [r3, #0]
   18856:	3308      	adds	r3, #8
   18858:	681b      	ldr	r3, [r3, #0]
   1885a:	9a01      	ldr	r2, [sp, #4]
   1885c:	0e12      	lsrs	r2, r2, #24
   1885e:	b292      	uxth	r2, r2
   18860:	b2d2      	uxtb	r2, r2
   18862:	b292      	uxth	r2, r2
   18864:	4611      	mov	r1, r2
   18866:	4798      	blx	r3
    // Send arg byte [23:16]
    ssp_interface_->Transfer(static_cast<uint16_t>(arg >> 16) & 0xFF);
   18868:	9b03      	ldr	r3, [sp, #12]
   1886a:	6858      	ldr	r0, [r3, #4]
   1886c:	9b03      	ldr	r3, [sp, #12]
   1886e:	685b      	ldr	r3, [r3, #4]
   18870:	681b      	ldr	r3, [r3, #0]
   18872:	3308      	adds	r3, #8
   18874:	681b      	ldr	r3, [r3, #0]
   18876:	9a01      	ldr	r2, [sp, #4]
   18878:	0c12      	lsrs	r2, r2, #16
   1887a:	b292      	uxth	r2, r2
   1887c:	b2d2      	uxtb	r2, r2
   1887e:	b292      	uxth	r2, r2
   18880:	4611      	mov	r1, r2
   18882:	4798      	blx	r3
    // Send arg byte [15:8]
    ssp_interface_->Transfer(static_cast<uint16_t>(arg >> 8) & 0xFF);
   18884:	9b03      	ldr	r3, [sp, #12]
   18886:	6858      	ldr	r0, [r3, #4]
   18888:	9b03      	ldr	r3, [sp, #12]
   1888a:	685b      	ldr	r3, [r3, #4]
   1888c:	681b      	ldr	r3, [r3, #0]
   1888e:	3308      	adds	r3, #8
   18890:	681b      	ldr	r3, [r3, #0]
   18892:	9a01      	ldr	r2, [sp, #4]
   18894:	0a12      	lsrs	r2, r2, #8
   18896:	b292      	uxth	r2, r2
   18898:	b2d2      	uxtb	r2, r2
   1889a:	b292      	uxth	r2, r2
   1889c:	4611      	mov	r1, r2
   1889e:	4798      	blx	r3
    // Send arg byte [7:0]
    ssp_interface_->Transfer(static_cast<uint16_t>(arg >> 0) & 0xFF);
   188a0:	9b03      	ldr	r3, [sp, #12]
   188a2:	685a      	ldr	r2, [r3, #4]
   188a4:	9b03      	ldr	r3, [sp, #12]
   188a6:	685b      	ldr	r3, [r3, #4]
   188a8:	681b      	ldr	r3, [r3, #0]
   188aa:	3308      	adds	r3, #8
   188ac:	681b      	ldr	r3, [r3, #0]
   188ae:	9901      	ldr	r1, [sp, #4]
   188b0:	b289      	uxth	r1, r1
   188b2:	b2c9      	uxtb	r1, r1
   188b4:	b289      	uxth	r1, r1
   188b6:	4610      	mov	r0, r2
   188b8:	4798      	blx	r3
    // Send 7-bit CRC and LSB stop addr (as b1)
    ssp_interface_->Transfer(static_cast<uint16_t>(crc << 1) | 0x01);
   188ba:	9b03      	ldr	r3, [sp, #12]
   188bc:	6858      	ldr	r0, [r3, #4]
   188be:	9b03      	ldr	r3, [sp, #12]
   188c0:	685b      	ldr	r3, [r3, #4]
   188c2:	681b      	ldr	r3, [r3, #0]
   188c4:	3308      	adds	r3, #8
   188c6:	681b      	ldr	r3, [r3, #0]
   188c8:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
   188cc:	b292      	uxth	r2, r2
   188ce:	0052      	lsls	r2, r2, #1
   188d0:	b292      	uxth	r2, r2
   188d2:	f042 0201 	orr.w	r2, r2, #1
   188d6:	b292      	uxth	r2, r2
   188d8:	4611      	mov	r1, r2
   188da:	4798      	blx	r3

    // Write garbage while waiting for a response
    // Send at least 1 byte of garbage before checking for a response
    temp_byte = static_cast<uint8_t>(ssp_interface_->Transfer(0xFF));
   188dc:	9b03      	ldr	r3, [sp, #12]
   188de:	685a      	ldr	r2, [r3, #4]
   188e0:	9b03      	ldr	r3, [sp, #12]
   188e2:	685b      	ldr	r3, [r3, #4]
   188e4:	681b      	ldr	r3, [r3, #0]
   188e6:	3308      	adds	r3, #8
   188e8:	681b      	ldr	r3, [r3, #0]
   188ea:	21ff      	movs	r1, #255	; 0xff
   188ec:	4610      	mov	r0, r2
   188ee:	4798      	blx	r3
   188f0:	4603      	mov	r3, r0
   188f2:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
    while (tries++ < kBusTimeout)
   188f6:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   188fa:	1c5a      	adds	r2, r3, #1
   188fc:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
   18900:	2bf9      	cmp	r3, #249	; 0xf9
   18902:	bf94      	ite	ls
   18904:	2301      	movls	r3, #1
   18906:	2300      	movhi	r3, #0
   18908:	b2db      	uxtb	r3, r3
   1890a:	2b00      	cmp	r3, #0
   1890c:	d027      	beq.n	1895e <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x2da>
    {
      temp_byte = static_cast<uint8_t>(ssp_interface_->Transfer(0xFF));
   1890e:	9b03      	ldr	r3, [sp, #12]
   18910:	685a      	ldr	r2, [r3, #4]
   18912:	9b03      	ldr	r3, [sp, #12]
   18914:	685b      	ldr	r3, [r3, #4]
   18916:	681b      	ldr	r3, [r3, #0]
   18918:	3308      	adds	r3, #8
   1891a:	681b      	ldr	r3, [r3, #0]
   1891c:	21ff      	movs	r1, #255	; 0xff
   1891e:	4610      	mov	r0, r2
   18920:	4798      	blx	r3
   18922:	4603      	mov	r3, r0
   18924:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
      if (temp_byte != 0xFF)
   18928:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
   1892c:	2bff      	cmp	r3, #255	; 0xff
   1892e:	d00f      	beq.n	18950 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x2cc>
      {
        // Determine the offset, since the first byte of a
        // response will always be 0.
        while (temp_byte & (0x80 >> bit_offset))
   18930:	f89d 202f 	ldrb.w	r2, [sp, #47]	; 0x2f
   18934:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
   18938:	2180      	movs	r1, #128	; 0x80
   1893a:	fa41 f303 	asr.w	r3, r1, r3
   1893e:	4013      	ands	r3, r2
   18940:	2b00      	cmp	r3, #0
   18942:	d00b      	beq.n	1895c <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x2d8>
        {
          bit_offset++;
   18944:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
   18948:	3301      	adds	r3, #1
   1894a:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
        while (temp_byte & (0x80 >> bit_offset))
   1894e:	e7ef      	b.n	18930 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x2ac>
        }
        break;
      }
      tries++;
   18950:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   18954:	3301      	adds	r3, #1
   18956:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
    while (tries++ < kBusTimeout)
   1895a:	e7cc      	b.n	188f6 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x272>
        break;
   1895c:	bf00      	nop
    }

    // Determine response length (in bytes) based on response type
    switch (res_type)
   1895e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   18960:	2b07      	cmp	r3, #7
   18962:	d827      	bhi.n	189b4 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x330>
   18964:	a201      	add	r2, pc, #4	; (adr r2, 1896c <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x2e8>)
   18966:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1896a:	bf00      	nop
   1896c:	0001898d 	.word	0x0001898d
   18970:	00018995 	.word	0x00018995
   18974:	0001899d 	.word	0x0001899d
   18978:	000189a5 	.word	0x000189a5
   1897c:	000189b5 	.word	0x000189b5
   18980:	000189b5 	.word	0x000189b5
   18984:	000189b5 	.word	0x000189b5
   18988:	000189ad 	.word	0x000189ad
    {
      case ResponseType::kR1: res_len = 1; break;
   1898c:	2301      	movs	r3, #1
   1898e:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
   18992:	e019      	b.n	189c8 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x344>
      case ResponseType::kR1b: res_len = 1; break;
   18994:	2301      	movs	r3, #1
   18996:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
   1899a:	e015      	b.n	189c8 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x344>
      case ResponseType::kR2: res_len = 2; break;
   1899c:	2302      	movs	r3, #2
   1899e:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
   189a2:	e011      	b.n	189c8 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x344>
      case ResponseType::kR3: res_len = 5; break;
   189a4:	2305      	movs	r3, #5
   189a6:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
   189aa:	e00d      	b.n	189c8 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x344>
      case ResponseType::kR7: res_len = 5; break;
   189ac:	2305      	movs	r3, #5
   189ae:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
   189b2:	e009      	b.n	189c8 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x344>
      default:
        LOG_ERROR("Response unsupported in SPI mode. Aborting!");
   189b4:	f240 433a 	movw	r3, #1082	; 0x43a
   189b8:	4a56      	ldr	r2, [pc, #344]	; (18b14 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x490>)
   189ba:	4957      	ldr	r1, [pc, #348]	; (18b18 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x494>)
   189bc:	4857      	ldr	r0, [pc, #348]	; (18b1c <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x498>)
   189be:	f7fe ffdb 	bl	17978 <printf>
        return -1;
   189c2:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   189c6:	e09a      	b.n	18afe <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x47a>
        break;
    }

    // Acquire the response
    uint64_t temp_response = 0;
   189c8:	f04f 0200 	mov.w	r2, #0
   189cc:	f04f 0300 	mov.w	r3, #0
   189d0:	e9cd 2308 	strd	r2, r3, [sp, #32]
    // Read an extra 8 bits since the response was offset
    uint8_t bytes_to_read =
   189d4:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
   189d8:	2b00      	cmp	r3, #0
   189da:	d004      	beq.n	189e6 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x362>
   189dc:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
   189e0:	3301      	adds	r3, #1
   189e2:	b2db      	uxtb	r3, r3
   189e4:	e001      	b.n	189ea <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x366>
   189e6:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
   189ea:	f88d 301f 	strb.w	r3, [sp, #31]
        static_cast<uint8_t>((bit_offset > 0) ? res_len + 1 : res_len);
    while (bytes_to_read-- > 0)
   189ee:	f89d 301f 	ldrb.w	r3, [sp, #31]
   189f2:	1e5a      	subs	r2, r3, #1
   189f4:	f88d 201f 	strb.w	r2, [sp, #31]
   189f8:	2b00      	cmp	r3, #0
   189fa:	bf14      	ite	ne
   189fc:	2301      	movne	r3, #1
   189fe:	2300      	moveq	r3, #0
   18a00:	b2db      	uxtb	r3, r3
   18a02:	2b00      	cmp	r3, #0
   18a04:	d025      	beq.n	18a52 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x3ce>
    {
      // Make space for the next byte
      temp_response = temp_response << 8;
   18a06:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   18a0a:	f04f 0200 	mov.w	r2, #0
   18a0e:	f04f 0300 	mov.w	r3, #0
   18a12:	020b      	lsls	r3, r1, #8
   18a14:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
   18a18:	0202      	lsls	r2, r0, #8
   18a1a:	e9cd 2308 	strd	r2, r3, [sp, #32]
      temp_response |= temp_byte;
   18a1e:	f89d b02f 	ldrb.w	fp, [sp, #47]	; 0x2f
   18a22:	f04f 0c00 	mov.w	ip, #0
   18a26:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   18a2a:	ea4b 0200 	orr.w	r2, fp, r0
   18a2e:	ea4c 0301 	orr.w	r3, ip, r1
   18a32:	e9cd 2308 	strd	r2, r3, [sp, #32]
      temp_byte = static_cast<uint8_t>(ssp_interface_->Transfer(0xFF));
   18a36:	9b03      	ldr	r3, [sp, #12]
   18a38:	685a      	ldr	r2, [r3, #4]
   18a3a:	9b03      	ldr	r3, [sp, #12]
   18a3c:	685b      	ldr	r3, [r3, #4]
   18a3e:	681b      	ldr	r3, [r3, #0]
   18a40:	3308      	adds	r3, #8
   18a42:	681b      	ldr	r3, [r3, #0]
   18a44:	21ff      	movs	r1, #255	; 0xff
   18a46:	4610      	mov	r0, r2
   18a48:	4798      	blx	r3
   18a4a:	4603      	mov	r3, r0
   18a4c:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
    while (bytes_to_read-- > 0)
   18a50:	e7cd      	b.n	189ee <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x36a>
    }
    // Compensate for the bit offset
    temp_response = temp_response >> bit_offset;
   18a52:	f89d 1030 	ldrb.w	r1, [sp, #48]	; 0x30
   18a56:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   18a5a:	f1c1 0c20 	rsb	ip, r1, #32
   18a5e:	f1a1 0020 	sub.w	r0, r1, #32
   18a62:	fa22 f401 	lsr.w	r4, r2, r1
   18a66:	fa03 fc0c 	lsl.w	ip, r3, ip
   18a6a:	ea44 040c 	orr.w	r4, r4, ip
   18a6e:	fa23 f000 	lsr.w	r0, r3, r0
   18a72:	4304      	orrs	r4, r0
   18a74:	fa23 f501 	lsr.w	r5, r3, r1
   18a78:	e9cd 4508 	strd	r4, r5, [sp, #32]

    // Only write to the response buffer if it is provided
    if (response_buffer != nullptr)
   18a7c:	9b00      	ldr	r3, [sp, #0]
   18a7e:	2b00      	cmp	r3, #0
   18a80:	d025      	beq.n	18ace <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x44a>
    {
      for (int i = 0; i < res_len; i++)
   18a82:	2300      	movs	r3, #0
   18a84:	9306      	str	r3, [sp, #24]
   18a86:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
   18a8a:	9a06      	ldr	r2, [sp, #24]
   18a8c:	429a      	cmp	r2, r3
   18a8e:	da1e      	bge.n	18ace <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x44a>
      {
        response_buffer[i] =
            static_cast<uint8_t>(temp_response >> 8 * (res_len - 1 - i));
   18a90:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
   18a94:	1e5a      	subs	r2, r3, #1
   18a96:	9b06      	ldr	r3, [sp, #24]
   18a98:	1ad3      	subs	r3, r2, r3
   18a9a:	00da      	lsls	r2, r3, #3
   18a9c:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   18aa0:	f1c2 0020 	rsb	r0, r2, #32
   18aa4:	f1a2 0120 	sub.w	r1, r2, #32
   18aa8:	fa23 f602 	lsr.w	r6, r3, r2
   18aac:	fa04 f000 	lsl.w	r0, r4, r0
   18ab0:	4306      	orrs	r6, r0
   18ab2:	fa24 f101 	lsr.w	r1, r4, r1
   18ab6:	430e      	orrs	r6, r1
   18ab8:	fa24 f702 	lsr.w	r7, r4, r2
        response_buffer[i] =
   18abc:	9b06      	ldr	r3, [sp, #24]
   18abe:	9a00      	ldr	r2, [sp, #0]
   18ac0:	4413      	add	r3, r2
   18ac2:	b2f2      	uxtb	r2, r6
   18ac4:	701a      	strb	r2, [r3, #0]
      for (int i = 0; i < res_len; i++)
   18ac6:	9b06      	ldr	r3, [sp, #24]
   18ac8:	3301      	adds	r3, #1
   18aca:	9306      	str	r3, [sp, #24]
   18acc:	e7db      	b.n	18a86 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x402>
      }
    }

    // Only end the transaction if keep_alive isn't requested
    if (keep_alive == KeepAlive::kNo)
   18ace:	f89d 305c 	ldrb.w	r3, [sp, #92]	; 0x5c
   18ad2:	2b00      	cmp	r3, #0
   18ad4:	d111      	bne.n	18afa <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x476>
    {
      // Deselect the SPI comm board
      chip_select_->SetHigh();
   18ad6:	9b03      	ldr	r3, [sp, #12]
   18ad8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   18ada:	9b03      	ldr	r3, [sp, #12]
   18adc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   18ade:	681b      	ldr	r3, [r3, #0]
   18ae0:	330c      	adds	r3, #12
   18ae2:	681b      	ldr	r3, [r3, #0]
   18ae4:	4610      	mov	r0, r2
   18ae6:	4798      	blx	r3
      chip_select_external_->SetHigh();
   18ae8:	9b03      	ldr	r3, [sp, #12]
   18aea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
   18aec:	9b03      	ldr	r3, [sp, #12]
   18aee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   18af0:	681b      	ldr	r3, [r3, #0]
   18af2:	330c      	adds	r3, #12
   18af4:	681b      	ldr	r3, [r3, #0]
   18af6:	4610      	mov	r0, r2
   18af8:	4798      	blx	r3
    }
    return res_len;
   18afa:	f89d 4033 	ldrb.w	r4, [sp, #51]	; 0x33
   18afe:	4643      	mov	r3, r8
   18b00:	4619      	mov	r1, r3
   18b02:	4807      	ldr	r0, [pc, #28]	; (18b20 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x49c>)
   18b04:	f7fd fcd0 	bl	164a8 <__cyg_profile_func_exit>
   18b08:	4623      	mov	r3, r4
  }
   18b0a:	4618      	mov	r0, r3
   18b0c:	b00f      	add	sp, #60	; 0x3c
   18b0e:	e8bd 89f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, fp, pc}
   18b12:	bf00      	nop
   18b14:	0001b9f8 	.word	0x0001b9f8
   18b18:	0001b8f4 	.word	0x0001b8f4
   18b1c:	0001b4fc 	.word	0x0001b4fc
   18b20:	00018685 	.word	0x00018685

00018b24 <Sd::Crc7Add(unsigned char, unsigned char)>:

  // Adds a message byte to the current CRC-7 to get a the new CRC-7
  uint8_t Crc7Add(uint8_t crc, uint8_t message_byte) override
   18b24:	b530      	push	{r4, r5, lr}
   18b26:	b083      	sub	sp, #12
   18b28:	4675      	mov	r5, lr
   18b2a:	9001      	str	r0, [sp, #4]
   18b2c:	460b      	mov	r3, r1
   18b2e:	f88d 3003 	strb.w	r3, [sp, #3]
   18b32:	4613      	mov	r3, r2
   18b34:	f88d 3002 	strb.w	r3, [sp, #2]
   18b38:	462b      	mov	r3, r5
   18b3a:	4619      	mov	r1, r3
   18b3c:	4809      	ldr	r0, [pc, #36]	; (18b64 <Sd::Crc7Add(unsigned char, unsigned char)+0x40>)
   18b3e:	f7fd fc9f 	bl	16480 <__cyg_profile_func_enter>
  {
    return kCrcTable8.crc_table[(crc << 1) ^ message_byte];
   18b42:	f89d 3003 	ldrb.w	r3, [sp, #3]
   18b46:	005a      	lsls	r2, r3, #1
   18b48:	f89d 3002 	ldrb.w	r3, [sp, #2]
   18b4c:	4053      	eors	r3, r2
   18b4e:	4a06      	ldr	r2, [pc, #24]	; (18b68 <Sd::Crc7Add(unsigned char, unsigned char)+0x44>)
   18b50:	5cd4      	ldrb	r4, [r2, r3]
   18b52:	462b      	mov	r3, r5
   18b54:	4619      	mov	r1, r3
   18b56:	4803      	ldr	r0, [pc, #12]	; (18b64 <Sd::Crc7Add(unsigned char, unsigned char)+0x40>)
   18b58:	f7fd fca6 	bl	164a8 <__cyg_profile_func_exit>
   18b5c:	4623      	mov	r3, r4
  }
   18b5e:	4618      	mov	r0, r3
   18b60:	b003      	add	sp, #12
   18b62:	bd30      	pop	{r4, r5, pc}
   18b64:	00018b25 	.word	0x00018b25
   18b68:	0001b564 	.word	0x0001b564

00018b6c <Sd::GetCrc7(unsigned char*, unsigned char)>:

  // Returns the CRC-7 for a message of "length" bytes
  uint8_t GetCrc7(uint8_t * message, uint8_t length) override
   18b6c:	b530      	push	{r4, r5, lr}
   18b6e:	b087      	sub	sp, #28
   18b70:	4675      	mov	r5, lr
   18b72:	9003      	str	r0, [sp, #12]
   18b74:	9102      	str	r1, [sp, #8]
   18b76:	4613      	mov	r3, r2
   18b78:	f88d 3007 	strb.w	r3, [sp, #7]
   18b7c:	462b      	mov	r3, r5
   18b7e:	4619      	mov	r1, r3
   18b80:	4815      	ldr	r0, [pc, #84]	; (18bd8 <Sd::GetCrc7(unsigned char*, unsigned char)+0x6c>)
   18b82:	f7fd fc7d 	bl	16480 <__cyg_profile_func_enter>
  {
    uint8_t crc = 0;
   18b86:	2300      	movs	r3, #0
   18b88:	f88d 3017 	strb.w	r3, [sp, #23]
    for (int i = 0; i < length; i++)
   18b8c:	2300      	movs	r3, #0
   18b8e:	9304      	str	r3, [sp, #16]
   18b90:	f89d 3007 	ldrb.w	r3, [sp, #7]
   18b94:	9a04      	ldr	r2, [sp, #16]
   18b96:	429a      	cmp	r2, r3
   18b98:	da12      	bge.n	18bc0 <Sd::GetCrc7(unsigned char*, unsigned char)+0x54>
    {
      crc = Crc7Add(crc, message[i]);
   18b9a:	9b03      	ldr	r3, [sp, #12]
   18b9c:	681b      	ldr	r3, [r3, #0]
   18b9e:	3318      	adds	r3, #24
   18ba0:	681b      	ldr	r3, [r3, #0]
   18ba2:	9a04      	ldr	r2, [sp, #16]
   18ba4:	9902      	ldr	r1, [sp, #8]
   18ba6:	440a      	add	r2, r1
   18ba8:	7812      	ldrb	r2, [r2, #0]
   18baa:	f89d 1017 	ldrb.w	r1, [sp, #23]
   18bae:	9803      	ldr	r0, [sp, #12]
   18bb0:	4798      	blx	r3
   18bb2:	4603      	mov	r3, r0
   18bb4:	f88d 3017 	strb.w	r3, [sp, #23]
    for (int i = 0; i < length; i++)
   18bb8:	9b04      	ldr	r3, [sp, #16]
   18bba:	3301      	adds	r3, #1
   18bbc:	9304      	str	r3, [sp, #16]
   18bbe:	e7e7      	b.n	18b90 <Sd::GetCrc7(unsigned char*, unsigned char)+0x24>
    }
    return crc;
   18bc0:	f89d 4017 	ldrb.w	r4, [sp, #23]
   18bc4:	462b      	mov	r3, r5
   18bc6:	4619      	mov	r1, r3
   18bc8:	4803      	ldr	r0, [pc, #12]	; (18bd8 <Sd::GetCrc7(unsigned char*, unsigned char)+0x6c>)
   18bca:	f7fd fc6d 	bl	164a8 <__cyg_profile_func_exit>
   18bce:	4623      	mov	r3, r4
  }
   18bd0:	4618      	mov	r0, r3
   18bd2:	b007      	add	sp, #28
   18bd4:	bd30      	pop	{r4, r5, pc}
   18bd6:	bf00      	nop
   18bd8:	00018b6d 	.word	0x00018b6d

00018bdc <Sd::GetCrc16(unsigned char*, unsigned short)>:

  // Returns CCITT CRC-16 for a message of "length" bytes
  uint16_t GetCrc16(uint8_t * message, uint16_t length) override
   18bdc:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
   18be0:	b08c      	sub	sp, #48	; 0x30
   18be2:	4677      	mov	r7, lr
   18be4:	9003      	str	r0, [sp, #12]
   18be6:	9102      	str	r1, [sp, #8]
   18be8:	4613      	mov	r3, r2
   18bea:	f8ad 3006 	strh.w	r3, [sp, #6]
   18bee:	463b      	mov	r3, r7
   18bf0:	4619      	mov	r1, r3
   18bf2:	4837      	ldr	r0, [pc, #220]	; (18cd0 <Sd::GetCrc16(unsigned char*, unsigned short)+0xf4>)
   18bf4:	f7fd fc44 	bl	16480 <__cyg_profile_func_enter>
  {
    uint64_t crc = 0x0000;
   18bf8:	f04f 0300 	mov.w	r3, #0
   18bfc:	f04f 0400 	mov.w	r4, #0
   18c00:	e9cd 340a 	strd	r3, r4, [sp, #40]	; 0x28
    uint64_t temp;
    uint64_t final_value = 0;
   18c04:	f04f 0300 	mov.w	r3, #0
   18c08:	f04f 0400 	mov.w	r4, #0
   18c0c:	e9cd 3406 	strd	r3, r4, [sp, #24]

    for (uint64_t count = 0; count < length; ++count)
   18c10:	f04f 0300 	mov.w	r3, #0
   18c14:	f04f 0400 	mov.w	r4, #0
   18c18:	e9cd 3408 	strd	r3, r4, [sp, #32]
   18c1c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   18c20:	f04f 0400 	mov.w	r4, #0
   18c24:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
   18c28:	42a2      	cmp	r2, r4
   18c2a:	bf08      	it	eq
   18c2c:	4299      	cmpeq	r1, r3
   18c2e:	d23f      	bcs.n	18cb0 <Sd::GetCrc16(unsigned char*, unsigned short)+0xd4>
    {
      temp = (*message++ ^ (crc >> 8)) & 0xff;
   18c30:	9b02      	ldr	r3, [sp, #8]
   18c32:	1c5a      	adds	r2, r3, #1
   18c34:	9202      	str	r2, [sp, #8]
   18c36:	781b      	ldrb	r3, [r3, #0]
   18c38:	b2dd      	uxtb	r5, r3
   18c3a:	f04f 0600 	mov.w	r6, #0
   18c3e:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
   18c42:	f04f 0300 	mov.w	r3, #0
   18c46:	f04f 0400 	mov.w	r4, #0
   18c4a:	0a0b      	lsrs	r3, r1, #8
   18c4c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
   18c50:	0a14      	lsrs	r4, r2, #8
   18c52:	ea83 0b05 	eor.w	fp, r3, r5
   18c56:	ea84 0c06 	eor.w	ip, r4, r6
   18c5a:	f04f 01ff 	mov.w	r1, #255	; 0xff
   18c5e:	f04f 0200 	mov.w	r2, #0
   18c62:	ea0b 0301 	and.w	r3, fp, r1
   18c66:	ea0c 0402 	and.w	r4, ip, r2
   18c6a:	e9cd 3404 	strd	r3, r4, [sp, #16]
      crc  = kCrcTable16.crc_table[temp] ^ (crc << 8);
   18c6e:	4a19      	ldr	r2, [pc, #100]	; (18cd4 <Sd::GetCrc16(unsigned char*, unsigned short)+0xf8>)
   18c70:	9b04      	ldr	r3, [sp, #16]
   18c72:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
   18c76:	b29d      	uxth	r5, r3
   18c78:	f04f 0600 	mov.w	r6, #0
   18c7c:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
   18c80:	f04f 0b00 	mov.w	fp, #0
   18c84:	f04f 0c00 	mov.w	ip, #0
   18c88:	ea4f 2c02 	mov.w	ip, r2, lsl #8
   18c8c:	ea4c 6c11 	orr.w	ip, ip, r1, lsr #24
   18c90:	ea4f 2b01 	mov.w	fp, r1, lsl #8
   18c94:	ea8b 0305 	eor.w	r3, fp, r5
   18c98:	ea8c 0406 	eor.w	r4, ip, r6
   18c9c:	e9cd 340a 	strd	r3, r4, [sp, #40]	; 0x28
    for (uint64_t count = 0; count < length; ++count)
   18ca0:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   18ca4:	1c59      	adds	r1, r3, #1
   18ca6:	f144 0200 	adc.w	r2, r4, #0
   18caa:	e9cd 1208 	strd	r1, r2, [sp, #32]
   18cae:	e7b5      	b.n	18c1c <Sd::GetCrc16(unsigned char*, unsigned short)+0x40>
    }

    return static_cast<uint16_t>(crc ^ final_value);
   18cb0:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
   18cb4:	f8bd 3018 	ldrh.w	r3, [sp, #24]
   18cb8:	4053      	eors	r3, r2
   18cba:	b29c      	uxth	r4, r3
   18cbc:	463b      	mov	r3, r7
   18cbe:	4619      	mov	r1, r3
   18cc0:	4803      	ldr	r0, [pc, #12]	; (18cd0 <Sd::GetCrc16(unsigned char*, unsigned short)+0xf4>)
   18cc2:	f7fd fbf1 	bl	164a8 <__cyg_profile_func_exit>
   18cc6:	4623      	mov	r3, r4
  }
   18cc8:	4618      	mov	r0, r3
   18cca:	b00c      	add	sp, #48	; 0x30
   18ccc:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
   18cd0:	00018bdd 	.word	0x00018bdd
   18cd4:	0001b664 	.word	0x0001b664

00018cd8 <__static_initialization_and_destruction_0(int, int)>:
extern "C" DRESULT disk_ioctl([[maybe_unused]] BYTE drive_number,
                              [[maybe_unused]] BYTE command,
                              [[maybe_unused]] void * buffer)
{
  return RES_PARERR;
}
   18cd8:	b530      	push	{r4, r5, lr}
   18cda:	b085      	sub	sp, #20
   18cdc:	4674      	mov	r4, lr
   18cde:	9003      	str	r0, [sp, #12]
   18ce0:	9102      	str	r1, [sp, #8]
   18ce2:	4623      	mov	r3, r4
   18ce4:	4619      	mov	r1, r3
   18ce6:	480e      	ldr	r0, [pc, #56]	; (18d20 <__static_initialization_and_destruction_0(int, int)+0x48>)
   18ce8:	f7fd fbca 	bl	16480 <__cyg_profile_func_enter>
   18cec:	9b03      	ldr	r3, [sp, #12]
   18cee:	2b01      	cmp	r3, #1
   18cf0:	d10e      	bne.n	18d10 <__static_initialization_and_destruction_0(int, int)+0x38>
   18cf2:	9b02      	ldr	r3, [sp, #8]
   18cf4:	f64f 72ff 	movw	r2, #65535	; 0xffff
   18cf8:	4293      	cmp	r3, r2
   18cfa:	d109      	bne.n	18d10 <__static_initialization_and_destruction_0(int, int)+0x38>
Sd sd_card(Sd::DebugSdCard_t{});
   18cfc:	2306      	movs	r3, #6
   18cfe:	9301      	str	r3, [sp, #4]
   18d00:	2300      	movs	r3, #0
   18d02:	9300      	str	r3, [sp, #0]
   18d04:	2308      	movs	r3, #8
   18d06:	2201      	movs	r2, #1
   18d08:	4629      	mov	r1, r5
   18d0a:	4806      	ldr	r0, [pc, #24]	; (18d24 <__static_initialization_and_destruction_0(int, int)+0x4c>)
   18d0c:	f7fe fe96 	bl	17a3c <Sd::Sd(Sd::DebugSdCard_t, unsigned char, unsigned char, unsigned char, unsigned char)>
   18d10:	4623      	mov	r3, r4
   18d12:	4619      	mov	r1, r3
   18d14:	4802      	ldr	r0, [pc, #8]	; (18d20 <__static_initialization_and_destruction_0(int, int)+0x48>)
   18d16:	f7fd fbc7 	bl	164a8 <__cyg_profile_func_exit>
}
   18d1a:	bf00      	nop
   18d1c:	b005      	add	sp, #20
   18d1e:	bd30      	pop	{r4, r5, pc}
   18d20:	00018cd9 	.word	0x00018cd9
   18d24:	10001594 	.word	0x10001594

00018d28 <_GLOBAL__sub_I_disk_status>:
   18d28:	b510      	push	{r4, lr}
   18d2a:	4674      	mov	r4, lr
   18d2c:	4623      	mov	r3, r4
   18d2e:	4619      	mov	r1, r3
   18d30:	4806      	ldr	r0, [pc, #24]	; (18d4c <_GLOBAL__sub_I_disk_status+0x24>)
   18d32:	f7fd fba5 	bl	16480 <__cyg_profile_func_enter>
   18d36:	f64f 71ff 	movw	r1, #65535	; 0xffff
   18d3a:	2001      	movs	r0, #1
   18d3c:	f7ff ffcc 	bl	18cd8 <__static_initialization_and_destruction_0(int, int)>
   18d40:	4623      	mov	r3, r4
   18d42:	4619      	mov	r1, r3
   18d44:	4801      	ldr	r0, [pc, #4]	; (18d4c <_GLOBAL__sub_I_disk_status+0x24>)
   18d46:	f7fd fbaf 	bl	164a8 <__cyg_profile_func_exit>
   18d4a:	bd10      	pop	{r4, pc}
   18d4c:	00018d29 	.word	0x00018d29

00018d50 <__cxa_pure_virtual>:
   18d50:	b508      	push	{r3, lr}
   18d52:	f000 f80d 	bl	18d70 <std::terminate()>

00018d56 <__cxxabiv1::__terminate(void (*)())>:
   18d56:	b508      	push	{r3, lr}
   18d58:	4780      	blx	r0
   18d5a:	f000 fa0f 	bl	1917c <abort>
   18d5e:	Address 0x0000000000018d5e is out of bounds.


00018d60 <std::get_terminate()>:
   18d60:	4b02      	ldr	r3, [pc, #8]	; (18d6c <std::get_terminate()+0xc>)
   18d62:	6818      	ldr	r0, [r3, #0]
   18d64:	f3bf 8f5b 	dmb	ish
   18d68:	4770      	bx	lr
   18d6a:	bf00      	nop
   18d6c:	100005dc 	.word	0x100005dc

00018d70 <std::terminate()>:
   18d70:	b508      	push	{r3, lr}
   18d72:	f7ff fff5 	bl	18d60 <std::get_terminate()>
   18d76:	f7ff ffee 	bl	18d56 <__cxxabiv1::__terminate(void (*)())>
   18d7a:	Address 0x0000000000018d7a is out of bounds.


00018d7c <roundf>:
   18d7c:	b082      	sub	sp, #8
   18d7e:	ed8d 0a01 	vstr	s0, [sp, #4]
   18d82:	9901      	ldr	r1, [sp, #4]
   18d84:	f3c1 53c7 	ubfx	r3, r1, #23, #8
   18d88:	f1a3 027f 	sub.w	r2, r3, #127	; 0x7f
   18d8c:	2a16      	cmp	r2, #22
   18d8e:	dc0c      	bgt.n	18daa <roundf+0x2e>
   18d90:	2a00      	cmp	r2, #0
   18d92:	db10      	blt.n	18db6 <roundf+0x3a>
   18d94:	4810      	ldr	r0, [pc, #64]	; (18dd8 <roundf+0x5c>)
   18d96:	4110      	asrs	r0, r2
   18d98:	4201      	tst	r1, r0
   18d9a:	d008      	beq.n	18dae <roundf+0x32>
   18d9c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   18da0:	4113      	asrs	r3, r2
   18da2:	440b      	add	r3, r1
   18da4:	ea23 0300 	bic.w	r3, r3, r0
   18da8:	e00b      	b.n	18dc2 <roundf+0x46>
   18daa:	2a80      	cmp	r2, #128	; 0x80
   18dac:	d00d      	beq.n	18dca <roundf+0x4e>
   18dae:	ed9d 0a01 	vldr	s0, [sp, #4]
   18db2:	b002      	add	sp, #8
   18db4:	4770      	bx	lr
   18db6:	3201      	adds	r2, #1
   18db8:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
   18dbc:	d101      	bne.n	18dc2 <roundf+0x46>
   18dbe:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
   18dc2:	ee00 3a10 	vmov	s0, r3
   18dc6:	b002      	add	sp, #8
   18dc8:	4770      	bx	lr
   18dca:	eddd 7a01 	vldr	s15, [sp, #4]
   18dce:	ee37 0aa7 	vadd.f32	s0, s15, s15
   18dd2:	b002      	add	sp, #8
   18dd4:	4770      	bx	lr
   18dd6:	bf00      	nop
   18dd8:	007fffff 	.word	0x007fffff

00018ddc <__aeabi_d2f>:
   18ddc:	ea4f 0241 	mov.w	r2, r1, lsl #1
   18de0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   18de4:	bf24      	itt	cs
   18de6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   18dea:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   18dee:	d90d      	bls.n	18e0c <__aeabi_d2f+0x30>
   18df0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   18df4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   18df8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   18dfc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   18e00:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   18e04:	bf08      	it	eq
   18e06:	f020 0001 	biceq.w	r0, r0, #1
   18e0a:	4770      	bx	lr
   18e0c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   18e10:	d121      	bne.n	18e56 <__aeabi_d2f+0x7a>
   18e12:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   18e16:	bfbc      	itt	lt
   18e18:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   18e1c:	4770      	bxlt	lr
   18e1e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   18e22:	ea4f 5252 	mov.w	r2, r2, lsr #21
   18e26:	f1c2 0218 	rsb	r2, r2, #24
   18e2a:	f1c2 0c20 	rsb	ip, r2, #32
   18e2e:	fa10 f30c 	lsls.w	r3, r0, ip
   18e32:	fa20 f002 	lsr.w	r0, r0, r2
   18e36:	bf18      	it	ne
   18e38:	f040 0001 	orrne.w	r0, r0, #1
   18e3c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   18e40:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   18e44:	fa03 fc0c 	lsl.w	ip, r3, ip
   18e48:	ea40 000c 	orr.w	r0, r0, ip
   18e4c:	fa23 f302 	lsr.w	r3, r3, r2
   18e50:	ea4f 0343 	mov.w	r3, r3, lsl #1
   18e54:	e7cc      	b.n	18df0 <__aeabi_d2f+0x14>
   18e56:	ea7f 5362 	mvns.w	r3, r2, asr #21
   18e5a:	d107      	bne.n	18e6c <__aeabi_d2f+0x90>
   18e5c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   18e60:	bf1e      	ittt	ne
   18e62:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   18e66:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   18e6a:	4770      	bxne	lr
   18e6c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   18e70:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   18e74:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   18e78:	4770      	bx	lr
   18e7a:	bf00      	nop

00018e7c <__aeabi_uldivmod>:
   18e7c:	b953      	cbnz	r3, 18e94 <__aeabi_uldivmod+0x18>
   18e7e:	b94a      	cbnz	r2, 18e94 <__aeabi_uldivmod+0x18>
   18e80:	2900      	cmp	r1, #0
   18e82:	bf08      	it	eq
   18e84:	2800      	cmpeq	r0, #0
   18e86:	bf1c      	itt	ne
   18e88:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
   18e8c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   18e90:	f000 b972 	b.w	19178 <__aeabi_idiv0>
   18e94:	f1ad 0c08 	sub.w	ip, sp, #8
   18e98:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   18e9c:	f000 f806 	bl	18eac <__udivmoddi4>
   18ea0:	f8dd e004 	ldr.w	lr, [sp, #4]
   18ea4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   18ea8:	b004      	add	sp, #16
   18eaa:	4770      	bx	lr

00018eac <__udivmoddi4>:
   18eac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   18eb0:	9e08      	ldr	r6, [sp, #32]
   18eb2:	4604      	mov	r4, r0
   18eb4:	4688      	mov	r8, r1
   18eb6:	2b00      	cmp	r3, #0
   18eb8:	d14b      	bne.n	18f52 <__udivmoddi4+0xa6>
   18eba:	428a      	cmp	r2, r1
   18ebc:	4615      	mov	r5, r2
   18ebe:	d967      	bls.n	18f90 <__udivmoddi4+0xe4>
   18ec0:	fab2 f282 	clz	r2, r2
   18ec4:	b14a      	cbz	r2, 18eda <__udivmoddi4+0x2e>
   18ec6:	f1c2 0720 	rsb	r7, r2, #32
   18eca:	fa01 f302 	lsl.w	r3, r1, r2
   18ece:	fa20 f707 	lsr.w	r7, r0, r7
   18ed2:	4095      	lsls	r5, r2
   18ed4:	ea47 0803 	orr.w	r8, r7, r3
   18ed8:	4094      	lsls	r4, r2
   18eda:	ea4f 4e15 	mov.w	lr, r5, lsr #16
   18ede:	0c23      	lsrs	r3, r4, #16
   18ee0:	fbb8 f7fe 	udiv	r7, r8, lr
   18ee4:	fa1f fc85 	uxth.w	ip, r5
   18ee8:	fb0e 8817 	mls	r8, lr, r7, r8
   18eec:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
   18ef0:	fb07 f10c 	mul.w	r1, r7, ip
   18ef4:	4299      	cmp	r1, r3
   18ef6:	d909      	bls.n	18f0c <__udivmoddi4+0x60>
   18ef8:	18eb      	adds	r3, r5, r3
   18efa:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
   18efe:	f080 811b 	bcs.w	19138 <__udivmoddi4+0x28c>
   18f02:	4299      	cmp	r1, r3
   18f04:	f240 8118 	bls.w	19138 <__udivmoddi4+0x28c>
   18f08:	3f02      	subs	r7, #2
   18f0a:	442b      	add	r3, r5
   18f0c:	1a5b      	subs	r3, r3, r1
   18f0e:	b2a4      	uxth	r4, r4
   18f10:	fbb3 f0fe 	udiv	r0, r3, lr
   18f14:	fb0e 3310 	mls	r3, lr, r0, r3
   18f18:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
   18f1c:	fb00 fc0c 	mul.w	ip, r0, ip
   18f20:	45a4      	cmp	ip, r4
   18f22:	d909      	bls.n	18f38 <__udivmoddi4+0x8c>
   18f24:	192c      	adds	r4, r5, r4
   18f26:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   18f2a:	f080 8107 	bcs.w	1913c <__udivmoddi4+0x290>
   18f2e:	45a4      	cmp	ip, r4
   18f30:	f240 8104 	bls.w	1913c <__udivmoddi4+0x290>
   18f34:	3802      	subs	r0, #2
   18f36:	442c      	add	r4, r5
   18f38:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
   18f3c:	eba4 040c 	sub.w	r4, r4, ip
   18f40:	2700      	movs	r7, #0
   18f42:	b11e      	cbz	r6, 18f4c <__udivmoddi4+0xa0>
   18f44:	40d4      	lsrs	r4, r2
   18f46:	2300      	movs	r3, #0
   18f48:	e9c6 4300 	strd	r4, r3, [r6]
   18f4c:	4639      	mov	r1, r7
   18f4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   18f52:	428b      	cmp	r3, r1
   18f54:	d909      	bls.n	18f6a <__udivmoddi4+0xbe>
   18f56:	2e00      	cmp	r6, #0
   18f58:	f000 80eb 	beq.w	19132 <__udivmoddi4+0x286>
   18f5c:	2700      	movs	r7, #0
   18f5e:	e9c6 0100 	strd	r0, r1, [r6]
   18f62:	4638      	mov	r0, r7
   18f64:	4639      	mov	r1, r7
   18f66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   18f6a:	fab3 f783 	clz	r7, r3
   18f6e:	2f00      	cmp	r7, #0
   18f70:	d147      	bne.n	19002 <__udivmoddi4+0x156>
   18f72:	428b      	cmp	r3, r1
   18f74:	d302      	bcc.n	18f7c <__udivmoddi4+0xd0>
   18f76:	4282      	cmp	r2, r0
   18f78:	f200 80fa 	bhi.w	19170 <__udivmoddi4+0x2c4>
   18f7c:	1a84      	subs	r4, r0, r2
   18f7e:	eb61 0303 	sbc.w	r3, r1, r3
   18f82:	2001      	movs	r0, #1
   18f84:	4698      	mov	r8, r3
   18f86:	2e00      	cmp	r6, #0
   18f88:	d0e0      	beq.n	18f4c <__udivmoddi4+0xa0>
   18f8a:	e9c6 4800 	strd	r4, r8, [r6]
   18f8e:	e7dd      	b.n	18f4c <__udivmoddi4+0xa0>
   18f90:	b902      	cbnz	r2, 18f94 <__udivmoddi4+0xe8>
   18f92:	deff      	udf	#255	; 0xff
   18f94:	fab2 f282 	clz	r2, r2
   18f98:	2a00      	cmp	r2, #0
   18f9a:	f040 808f 	bne.w	190bc <__udivmoddi4+0x210>
   18f9e:	1b49      	subs	r1, r1, r5
   18fa0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
   18fa4:	fa1f f885 	uxth.w	r8, r5
   18fa8:	2701      	movs	r7, #1
   18faa:	fbb1 fcfe 	udiv	ip, r1, lr
   18fae:	0c23      	lsrs	r3, r4, #16
   18fb0:	fb0e 111c 	mls	r1, lr, ip, r1
   18fb4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   18fb8:	fb08 f10c 	mul.w	r1, r8, ip
   18fbc:	4299      	cmp	r1, r3
   18fbe:	d907      	bls.n	18fd0 <__udivmoddi4+0x124>
   18fc0:	18eb      	adds	r3, r5, r3
   18fc2:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
   18fc6:	d202      	bcs.n	18fce <__udivmoddi4+0x122>
   18fc8:	4299      	cmp	r1, r3
   18fca:	f200 80cd 	bhi.w	19168 <__udivmoddi4+0x2bc>
   18fce:	4684      	mov	ip, r0
   18fd0:	1a59      	subs	r1, r3, r1
   18fd2:	b2a3      	uxth	r3, r4
   18fd4:	fbb1 f0fe 	udiv	r0, r1, lr
   18fd8:	fb0e 1410 	mls	r4, lr, r0, r1
   18fdc:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
   18fe0:	fb08 f800 	mul.w	r8, r8, r0
   18fe4:	45a0      	cmp	r8, r4
   18fe6:	d907      	bls.n	18ff8 <__udivmoddi4+0x14c>
   18fe8:	192c      	adds	r4, r5, r4
   18fea:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   18fee:	d202      	bcs.n	18ff6 <__udivmoddi4+0x14a>
   18ff0:	45a0      	cmp	r8, r4
   18ff2:	f200 80b6 	bhi.w	19162 <__udivmoddi4+0x2b6>
   18ff6:	4618      	mov	r0, r3
   18ff8:	eba4 0408 	sub.w	r4, r4, r8
   18ffc:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
   19000:	e79f      	b.n	18f42 <__udivmoddi4+0x96>
   19002:	f1c7 0c20 	rsb	ip, r7, #32
   19006:	40bb      	lsls	r3, r7
   19008:	fa22 fe0c 	lsr.w	lr, r2, ip
   1900c:	ea4e 0e03 	orr.w	lr, lr, r3
   19010:	fa01 f407 	lsl.w	r4, r1, r7
   19014:	fa20 f50c 	lsr.w	r5, r0, ip
   19018:	fa21 f30c 	lsr.w	r3, r1, ip
   1901c:	ea4f 481e 	mov.w	r8, lr, lsr #16
   19020:	4325      	orrs	r5, r4
   19022:	fbb3 f9f8 	udiv	r9, r3, r8
   19026:	0c2c      	lsrs	r4, r5, #16
   19028:	fb08 3319 	mls	r3, r8, r9, r3
   1902c:	fa1f fa8e 	uxth.w	sl, lr
   19030:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
   19034:	fb09 f40a 	mul.w	r4, r9, sl
   19038:	429c      	cmp	r4, r3
   1903a:	fa02 f207 	lsl.w	r2, r2, r7
   1903e:	fa00 f107 	lsl.w	r1, r0, r7
   19042:	d90b      	bls.n	1905c <__udivmoddi4+0x1b0>
   19044:	eb1e 0303 	adds.w	r3, lr, r3
   19048:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
   1904c:	f080 8087 	bcs.w	1915e <__udivmoddi4+0x2b2>
   19050:	429c      	cmp	r4, r3
   19052:	f240 8084 	bls.w	1915e <__udivmoddi4+0x2b2>
   19056:	f1a9 0902 	sub.w	r9, r9, #2
   1905a:	4473      	add	r3, lr
   1905c:	1b1b      	subs	r3, r3, r4
   1905e:	b2ad      	uxth	r5, r5
   19060:	fbb3 f0f8 	udiv	r0, r3, r8
   19064:	fb08 3310 	mls	r3, r8, r0, r3
   19068:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
   1906c:	fb00 fa0a 	mul.w	sl, r0, sl
   19070:	45a2      	cmp	sl, r4
   19072:	d908      	bls.n	19086 <__udivmoddi4+0x1da>
   19074:	eb1e 0404 	adds.w	r4, lr, r4
   19078:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   1907c:	d26b      	bcs.n	19156 <__udivmoddi4+0x2aa>
   1907e:	45a2      	cmp	sl, r4
   19080:	d969      	bls.n	19156 <__udivmoddi4+0x2aa>
   19082:	3802      	subs	r0, #2
   19084:	4474      	add	r4, lr
   19086:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   1908a:	fba0 8902 	umull	r8, r9, r0, r2
   1908e:	eba4 040a 	sub.w	r4, r4, sl
   19092:	454c      	cmp	r4, r9
   19094:	46c2      	mov	sl, r8
   19096:	464b      	mov	r3, r9
   19098:	d354      	bcc.n	19144 <__udivmoddi4+0x298>
   1909a:	d051      	beq.n	19140 <__udivmoddi4+0x294>
   1909c:	2e00      	cmp	r6, #0
   1909e:	d069      	beq.n	19174 <__udivmoddi4+0x2c8>
   190a0:	ebb1 050a 	subs.w	r5, r1, sl
   190a4:	eb64 0403 	sbc.w	r4, r4, r3
   190a8:	fa04 fc0c 	lsl.w	ip, r4, ip
   190ac:	40fd      	lsrs	r5, r7
   190ae:	40fc      	lsrs	r4, r7
   190b0:	ea4c 0505 	orr.w	r5, ip, r5
   190b4:	e9c6 5400 	strd	r5, r4, [r6]
   190b8:	2700      	movs	r7, #0
   190ba:	e747      	b.n	18f4c <__udivmoddi4+0xa0>
   190bc:	f1c2 0320 	rsb	r3, r2, #32
   190c0:	fa20 f703 	lsr.w	r7, r0, r3
   190c4:	4095      	lsls	r5, r2
   190c6:	fa01 f002 	lsl.w	r0, r1, r2
   190ca:	fa21 f303 	lsr.w	r3, r1, r3
   190ce:	ea4f 4e15 	mov.w	lr, r5, lsr #16
   190d2:	4338      	orrs	r0, r7
   190d4:	0c01      	lsrs	r1, r0, #16
   190d6:	fbb3 f7fe 	udiv	r7, r3, lr
   190da:	fa1f f885 	uxth.w	r8, r5
   190de:	fb0e 3317 	mls	r3, lr, r7, r3
   190e2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   190e6:	fb07 f308 	mul.w	r3, r7, r8
   190ea:	428b      	cmp	r3, r1
   190ec:	fa04 f402 	lsl.w	r4, r4, r2
   190f0:	d907      	bls.n	19102 <__udivmoddi4+0x256>
   190f2:	1869      	adds	r1, r5, r1
   190f4:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
   190f8:	d22f      	bcs.n	1915a <__udivmoddi4+0x2ae>
   190fa:	428b      	cmp	r3, r1
   190fc:	d92d      	bls.n	1915a <__udivmoddi4+0x2ae>
   190fe:	3f02      	subs	r7, #2
   19100:	4429      	add	r1, r5
   19102:	1acb      	subs	r3, r1, r3
   19104:	b281      	uxth	r1, r0
   19106:	fbb3 f0fe 	udiv	r0, r3, lr
   1910a:	fb0e 3310 	mls	r3, lr, r0, r3
   1910e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   19112:	fb00 f308 	mul.w	r3, r0, r8
   19116:	428b      	cmp	r3, r1
   19118:	d907      	bls.n	1912a <__udivmoddi4+0x27e>
   1911a:	1869      	adds	r1, r5, r1
   1911c:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
   19120:	d217      	bcs.n	19152 <__udivmoddi4+0x2a6>
   19122:	428b      	cmp	r3, r1
   19124:	d915      	bls.n	19152 <__udivmoddi4+0x2a6>
   19126:	3802      	subs	r0, #2
   19128:	4429      	add	r1, r5
   1912a:	1ac9      	subs	r1, r1, r3
   1912c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
   19130:	e73b      	b.n	18faa <__udivmoddi4+0xfe>
   19132:	4637      	mov	r7, r6
   19134:	4630      	mov	r0, r6
   19136:	e709      	b.n	18f4c <__udivmoddi4+0xa0>
   19138:	4607      	mov	r7, r0
   1913a:	e6e7      	b.n	18f0c <__udivmoddi4+0x60>
   1913c:	4618      	mov	r0, r3
   1913e:	e6fb      	b.n	18f38 <__udivmoddi4+0x8c>
   19140:	4541      	cmp	r1, r8
   19142:	d2ab      	bcs.n	1909c <__udivmoddi4+0x1f0>
   19144:	ebb8 0a02 	subs.w	sl, r8, r2
   19148:	eb69 020e 	sbc.w	r2, r9, lr
   1914c:	3801      	subs	r0, #1
   1914e:	4613      	mov	r3, r2
   19150:	e7a4      	b.n	1909c <__udivmoddi4+0x1f0>
   19152:	4660      	mov	r0, ip
   19154:	e7e9      	b.n	1912a <__udivmoddi4+0x27e>
   19156:	4618      	mov	r0, r3
   19158:	e795      	b.n	19086 <__udivmoddi4+0x1da>
   1915a:	4667      	mov	r7, ip
   1915c:	e7d1      	b.n	19102 <__udivmoddi4+0x256>
   1915e:	4681      	mov	r9, r0
   19160:	e77c      	b.n	1905c <__udivmoddi4+0x1b0>
   19162:	3802      	subs	r0, #2
   19164:	442c      	add	r4, r5
   19166:	e747      	b.n	18ff8 <__udivmoddi4+0x14c>
   19168:	f1ac 0c02 	sub.w	ip, ip, #2
   1916c:	442b      	add	r3, r5
   1916e:	e72f      	b.n	18fd0 <__udivmoddi4+0x124>
   19170:	4638      	mov	r0, r7
   19172:	e708      	b.n	18f86 <__udivmoddi4+0xda>
   19174:	4637      	mov	r7, r6
   19176:	e6e9      	b.n	18f4c <__udivmoddi4+0xa0>

00019178 <__aeabi_idiv0>:
   19178:	4770      	bx	lr
   1917a:	bf00      	nop

0001917c <abort>:
   1917c:	b508      	push	{r3, lr}
   1917e:	2006      	movs	r0, #6
   19180:	f000 f858 	bl	19234 <raise>
   19184:	2001      	movs	r0, #1
   19186:	f7fd f8db 	bl	16340 <_exit>
   1918a:	Address 0x000000000001918a is out of bounds.


0001918c <__libc_init_array>:
   1918c:	b570      	push	{r4, r5, r6, lr}
   1918e:	4e0d      	ldr	r6, [pc, #52]	; (191c4 <__libc_init_array+0x38>)
   19190:	4c0d      	ldr	r4, [pc, #52]	; (191c8 <__libc_init_array+0x3c>)
   19192:	1ba4      	subs	r4, r4, r6
   19194:	10a4      	asrs	r4, r4, #2
   19196:	2500      	movs	r5, #0
   19198:	42a5      	cmp	r5, r4
   1919a:	d109      	bne.n	191b0 <__libc_init_array+0x24>
   1919c:	4e0b      	ldr	r6, [pc, #44]	; (191cc <__libc_init_array+0x40>)
   1919e:	4c0c      	ldr	r4, [pc, #48]	; (191d0 <__libc_init_array+0x44>)
   191a0:	f7f7 f8ae 	bl	10300 <_init>
   191a4:	1ba4      	subs	r4, r4, r6
   191a6:	10a4      	asrs	r4, r4, #2
   191a8:	2500      	movs	r5, #0
   191aa:	42a5      	cmp	r5, r4
   191ac:	d105      	bne.n	191ba <__libc_init_array+0x2e>
   191ae:	bd70      	pop	{r4, r5, r6, pc}
   191b0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   191b4:	4798      	blx	r3
   191b6:	3501      	adds	r5, #1
   191b8:	e7ee      	b.n	19198 <__libc_init_array+0xc>
   191ba:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   191be:	4798      	blx	r3
   191c0:	3501      	adds	r5, #1
   191c2:	e7f2      	b.n	191aa <__libc_init_array+0x1e>
   191c4:	0001030c 	.word	0x0001030c
   191c8:	0001030c 	.word	0x0001030c
   191cc:	0001030c 	.word	0x0001030c
   191d0:	0001031c 	.word	0x0001031c

000191d4 <memset>:
   191d4:	4402      	add	r2, r0
   191d6:	4603      	mov	r3, r0
   191d8:	4293      	cmp	r3, r2
   191da:	d100      	bne.n	191de <memset+0xa>
   191dc:	4770      	bx	lr
   191de:	f803 1b01 	strb.w	r1, [r3], #1
   191e2:	e7f9      	b.n	191d8 <memset+0x4>

000191e4 <_raise_r>:
   191e4:	291f      	cmp	r1, #31
   191e6:	b538      	push	{r3, r4, r5, lr}
   191e8:	4604      	mov	r4, r0
   191ea:	460d      	mov	r5, r1
   191ec:	d904      	bls.n	191f8 <_raise_r+0x14>
   191ee:	2316      	movs	r3, #22
   191f0:	6003      	str	r3, [r0, #0]
   191f2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   191f6:	bd38      	pop	{r3, r4, r5, pc}
   191f8:	6c42      	ldr	r2, [r0, #68]	; 0x44
   191fa:	b112      	cbz	r2, 19202 <_raise_r+0x1e>
   191fc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
   19200:	b94b      	cbnz	r3, 19216 <_raise_r+0x32>
   19202:	4620      	mov	r0, r4
   19204:	f000 f830 	bl	19268 <_getpid_r>
   19208:	462a      	mov	r2, r5
   1920a:	4601      	mov	r1, r0
   1920c:	4620      	mov	r0, r4
   1920e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   19212:	f000 b817 	b.w	19244 <_kill_r>
   19216:	2b01      	cmp	r3, #1
   19218:	d00a      	beq.n	19230 <_raise_r+0x4c>
   1921a:	1c59      	adds	r1, r3, #1
   1921c:	d103      	bne.n	19226 <_raise_r+0x42>
   1921e:	2316      	movs	r3, #22
   19220:	6003      	str	r3, [r0, #0]
   19222:	2001      	movs	r0, #1
   19224:	e7e7      	b.n	191f6 <_raise_r+0x12>
   19226:	2400      	movs	r4, #0
   19228:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
   1922c:	4628      	mov	r0, r5
   1922e:	4798      	blx	r3
   19230:	2000      	movs	r0, #0
   19232:	e7e0      	b.n	191f6 <_raise_r+0x12>

00019234 <raise>:
   19234:	4b02      	ldr	r3, [pc, #8]	; (19240 <raise+0xc>)
   19236:	4601      	mov	r1, r0
   19238:	6818      	ldr	r0, [r3, #0]
   1923a:	f7ff bfd3 	b.w	191e4 <_raise_r>
   1923e:	bf00      	nop
   19240:	100005e0 	.word	0x100005e0

00019244 <_kill_r>:
   19244:	b538      	push	{r3, r4, r5, lr}
   19246:	4c07      	ldr	r4, [pc, #28]	; (19264 <_kill_r+0x20>)
   19248:	2300      	movs	r3, #0
   1924a:	4605      	mov	r5, r0
   1924c:	4608      	mov	r0, r1
   1924e:	4611      	mov	r1, r2
   19250:	6023      	str	r3, [r4, #0]
   19252:	f7fd f893 	bl	1637c <_kill>
   19256:	1c43      	adds	r3, r0, #1
   19258:	d102      	bne.n	19260 <_kill_r+0x1c>
   1925a:	6823      	ldr	r3, [r4, #0]
   1925c:	b103      	cbz	r3, 19260 <_kill_r+0x1c>
   1925e:	602b      	str	r3, [r5, #0]
   19260:	bd38      	pop	{r3, r4, r5, pc}
   19262:	bf00      	nop
   19264:	100015fc 	.word	0x100015fc

00019268 <_getpid_r>:
   19268:	f7fd b876 	b.w	16358 <_getpid>
   1926c:	63617453 	.word	0x63617453
   19270:	6544206b 	.word	0x6544206b
   19274:	20687470 	.word	0x20687470
   19278:	7a25203d 	.word	0x7a25203d
   1927c:	00000a64 	.word	0x00000a64
   19280:	25232020 	.word	0x25232020
   19284:	203a757a 	.word	0x203a757a
   19288:	70257830 	.word	0x70257830
   1928c:	0000000a 	.word	0x0000000a
   19290:	6e75520a 	.word	0x6e75520a
   19294:	6874203a 	.word	0x6874203a
   19298:	6f662065 	.word	0x6f662065
   1929c:	776f6c6c 	.word	0x776f6c6c
   192a0:	20676e69 	.word	0x20676e69
   192a4:	6d6d6f63 	.word	0x6d6d6f63
   192a8:	20646e61 	.word	0x20646e61
   192ac:	79206e69 	.word	0x79206e69
   192b0:	2072756f 	.word	0x2072756f
   192b4:	6a6f7270 	.word	0x6a6f7270
   192b8:	20746365 	.word	0x20746365
   192bc:	65726964 	.word	0x65726964
   192c0:	726f7463 	.word	0x726f7463
   192c4:	00000079 	.word	0x00000079
   192c8:	1b20200a 	.word	0x1b20200a
   192cc:	333b315b 	.word	0x333b315b
   192d0:	616d6d37 	.word	0x616d6d37
   192d4:	7320656b 	.word	0x7320656b
   192d8:	6b636174 	.word	0x6b636174
   192dc:	63617274 	.word	0x63617274
   192e0:	73252d65 	.word	0x73252d65
   192e4:	41525420 	.word	0x41525420
   192e8:	3d534543 	.word	0x3d534543
   192ec:	00000022 	.word	0x00000022
   192f0:	70257830 	.word	0x70257830
   192f4:	00000000 	.word	0x00000000
   192f8:	25783020 	.word	0x25783020
   192fc:	00000070 	.word	0x00000070
   19300:	5b1b0a22 	.word	0x5b1b0a22
   19304:	00006d30 	.word	0x00006d30
   19308:	73696854 	.word	0x73696854
   1930c:	6c697720 	.word	0x6c697720
   19310:	6572206c 	.word	0x6572206c
   19314:	74726f70 	.word	0x74726f70
   19318:	65687420 	.word	0x65687420
   1931c:	6c696620 	.word	0x6c696620
   19320:	6e612065 	.word	0x6e612065
   19324:	696c2064 	.word	0x696c2064
   19328:	6e20656e 	.word	0x6e20656e
   1932c:	65626d75 	.word	0x65626d75
   19330:	68742072 	.word	0x68742072
   19334:	6c207461 	.word	0x6c207461
   19338:	74206465 	.word	0x74206465
   1933c:	6874206f 	.word	0x6874206f
   19340:	66207369 	.word	0x66207369
   19344:	74636e75 	.word	0x74636e75
   19348:	206e6f69 	.word	0x206e6f69
   1934c:	6e696562 	.word	0x6e696562
   19350:	61632067 	.word	0x61632067
   19354:	64656c6c 	.word	0x64656c6c
   19358:	0000002e 	.word	0x0000002e
   1935c:	6c707061 	.word	0x6c707061
   19360:	74616369 	.word	0x74616369
   19364:	006e6f69 	.word	0x006e6f69
   19368:	33345b1b 	.word	0x33345b1b
   1936c:	4157206d 	.word	0x4157206d
   19370:	4e494e52 	.word	0x4e494e52
   19374:	305b1b47 	.word	0x305b1b47
   19378:	6d34393b 	.word	0x6d34393b
   1937c:	3a73253a 	.word	0x3a73253a
   19380:	3b305b1b 	.word	0x3b305b1b
   19384:	256d3239 	.word	0x256d3239
   19388:	5b1b3a73 	.word	0x5b1b3a73
   1938c:	33393b30 	.word	0x33393b30
   19390:	3e64256d 	.word	0x3e64256d
   19394:	305b1b20 	.word	0x305b1b20
   19398:	6d37333b 	.word	0x6d37333b
   1939c:	74726f50 	.word	0x74726f50
   193a0:	20642520 	.word	0x20642520
   193a4:	6e6e6163 	.word	0x6e6e6163
   193a8:	6220746f 	.word	0x6220746f
   193ac:	73752065 	.word	0x73752065
   193b0:	66206465 	.word	0x66206465
   193b4:	4520726f 	.word	0x4520726f
   193b8:	72657478 	.word	0x72657478
   193bc:	206c616e 	.word	0x206c616e
   193c0:	65746e49 	.word	0x65746e49
   193c4:	70757272 	.word	0x70757272
   193c8:	202e7374 	.word	0x202e7374
   193cc:	6465654e 	.word	0x6465654e
   193d0:	206f7420 	.word	0x206f7420
   193d4:	20657375 	.word	0x20657375
   193d8:	4f495047 	.word	0x4f495047
   193dc:	206e6f20 	.word	0x206e6f20
   193e0:	74726f50 	.word	0x74726f50
   193e4:	6f203020 	.word	0x6f203020
   193e8:	2e322072 	.word	0x2e322072
   193ec:	6d305b1b 	.word	0x6d305b1b
   193f0:	6d305b1b 	.word	0x6d305b1b
   193f4:	0000000a 	.word	0x0000000a
   193f8:	33345b1b 	.word	0x33345b1b
   193fc:	4157206d 	.word	0x4157206d
   19400:	4e494e52 	.word	0x4e494e52
   19404:	305b1b47 	.word	0x305b1b47
   19408:	6d34393b 	.word	0x6d34393b
   1940c:	3a73253a 	.word	0x3a73253a
   19410:	3b305b1b 	.word	0x3b305b1b
   19414:	256d3239 	.word	0x256d3239
   19418:	5b1b3a73 	.word	0x5b1b3a73
   1941c:	33393b30 	.word	0x33393b30
   19420:	3e64256d 	.word	0x3e64256d
   19424:	305b1b20 	.word	0x305b1b20
   19428:	6d37333b 	.word	0x6d37333b
   1942c:	65676445 	.word	0x65676445
   19430:	20642520 	.word	0x20642520
   19434:	6e6e6163 	.word	0x6e6e6163
   19438:	6220746f 	.word	0x6220746f
   1943c:	73752065 	.word	0x73752065
   19440:	66206465 	.word	0x66206465
   19444:	4520726f 	.word	0x4520726f
   19448:	72657478 	.word	0x72657478
   1944c:	206c616e 	.word	0x206c616e
   19450:	65746e49 	.word	0x65746e49
   19454:	70757272 	.word	0x70757272
   19458:	4e2e7374 	.word	0x4e2e7374
   1945c:	20646565 	.word	0x20646565
   19460:	75206f74 	.word	0x75206f74
   19464:	61206573 	.word	0x61206573
   19468:	73697220 	.word	0x73697220
   1946c:	2c676e69 	.word	0x2c676e69
   19470:	6c616620 	.word	0x6c616620
   19474:	676e696c 	.word	0x676e696c
   19478:	726f202c 	.word	0x726f202c
   1947c:	746f6220 	.word	0x746f6220
   19480:	6f632068 	.word	0x6f632068
   19484:	6769666e 	.word	0x6769666e
   19488:	74617275 	.word	0x74617275
   1948c:	2e6e6f69 	.word	0x2e6e6f69
   19490:	6d305b1b 	.word	0x6d305b1b
   19494:	0000000a 	.word	0x0000000a
   19498:	31345b1b 	.word	0x31345b1b
   1949c:	4952436d 	.word	0x4952436d
   194a0:	41434954 	.word	0x41434954
   194a4:	305b1b4c 	.word	0x305b1b4c
   194a8:	6d34393b 	.word	0x6d34393b
   194ac:	3a73253a 	.word	0x3a73253a
   194b0:	3b305b1b 	.word	0x3b305b1b
   194b4:	256d3239 	.word	0x256d3239
   194b8:	5b1b3a73 	.word	0x5b1b3a73
   194bc:	33393b30 	.word	0x33393b30
   194c0:	3e64256d 	.word	0x3e64256d
   194c4:	305b1b20 	.word	0x305b1b20
   194c8:	6d37333b 	.word	0x6d37333b
   194cc:	65737341 	.word	0x65737341
   194d0:	6f697472 	.word	0x6f697472
   194d4:	6146206e 	.word	0x6146206e
   194d8:	72756c69 	.word	0x72756c69
   194dc:	43202c65 	.word	0x43202c65
   194e0:	69646e6f 	.word	0x69646e6f
   194e4:	6e6f6974 	.word	0x6e6f6974
   194e8:	73655420 	.word	0x73655420
   194ec:	3a646574 	.word	0x3a646574
   194f0:	65702820 	.word	0x65702820
   194f4:	68706972 	.word	0x68706972
   194f8:	6c617265 	.word	0x6c617265
   194fc:	7669645f 	.word	0x7669645f
   19500:	72656469 	.word	0x72656469
   19504:	203d3c20 	.word	0x203d3c20
   19508:	200a2934 	.word	0x200a2934
   1950c:	20202020 	.word	0x20202020
   19510:	20202020 	.word	0x20202020
   19514:	76694420 	.word	0x76694420
   19518:	72656469 	.word	0x72656469
   1951c:	73756d20 	.word	0x73756d20
   19520:	74276e74 	.word	0x74276e74
   19524:	63786520 	.word	0x63786520
   19528:	20646565 	.word	0x20646565
   1952c:	5b1b3233 	.word	0x5b1b3233
   19530:	5b1b6d30 	.word	0x5b1b6d30
   19534:	000a6d30 	.word	0x000a6d30
   19538:	6972500a 	.word	0x6972500a
   1953c:	6e69746e 	.word	0x6e69746e
   19540:	74532067 	.word	0x74532067
   19544:	206b6361 	.word	0x206b6361
   19548:	63617254 	.word	0x63617254
   1954c:	000a3a65 	.word	0x000a3a65
   19550:	31345b1b 	.word	0x31345b1b
   19554:	4952436d 	.word	0x4952436d
   19558:	41434954 	.word	0x41434954
   1955c:	305b1b4c 	.word	0x305b1b4c
   19560:	6d34393b 	.word	0x6d34393b
   19564:	3a73253a 	.word	0x3a73253a
   19568:	3b305b1b 	.word	0x3b305b1b
   1956c:	256d3239 	.word	0x256d3239
   19570:	5b1b3a73 	.word	0x5b1b3a73
   19574:	33393b30 	.word	0x33393b30
   19578:	3e64256d 	.word	0x3e64256d
   1957c:	305b1b20 	.word	0x305b1b20
   19580:	6d37333b 	.word	0x6d37333b
   19584:	65737341 	.word	0x65737341
   19588:	6f697472 	.word	0x6f697472
   1958c:	6146206e 	.word	0x6146206e
   19590:	72756c69 	.word	0x72756c69
   19594:	43202c65 	.word	0x43202c65
   19598:	69646e6f 	.word	0x69646e6f
   1959c:	6e6f6974 	.word	0x6e6f6974
   195a0:	73655420 	.word	0x73655420
   195a4:	3a646574 	.word	0x3a646574
   195a8:	65642820 	.word	0x65642820
   195ac:	65726973 	.word	0x65726973
   195b0:	70735f64 	.word	0x70735f64
   195b4:	5f646565 	.word	0x5f646565
   195b8:	6d5f6e69 	.word	0x6d5f6e69
   195bc:	3c207a68 	.word	0x3c207a68
   195c0:	34383320 	.word	0x34383320
   195c4:	20262620 	.word	0x20262620
   195c8:	69736564 	.word	0x69736564
   195cc:	5f646572 	.word	0x5f646572
   195d0:	65657073 	.word	0x65657073
   195d4:	6e695f64 	.word	0x6e695f64
   195d8:	7a686d5f 	.word	0x7a686d5f
   195dc:	31203e20 	.word	0x31203e20
   195e0:	200a2932 	.word	0x200a2932
   195e4:	20202020 	.word	0x20202020
   195e8:	20202020 	.word	0x20202020
   195ec:	65724620 	.word	0x65724620
   195f0:	6e657571 	.word	0x6e657571
   195f4:	6d207963 	.word	0x6d207963
   195f8:	20747375 	.word	0x20747375
   195fc:	6c206562 	.word	0x6c206562
   19600:	7265776f 	.word	0x7265776f
   19604:	61687420 	.word	0x61687420
   19608:	3833206e 	.word	0x3833206e
   1960c:	484d2034 	.word	0x484d2034
   19610:	646e617a 	.word	0x646e617a
   19614:	65726720 	.word	0x65726720
   19618:	72657461 	.word	0x72657461
   1961c:	61687420 	.word	0x61687420
   19620:	726f206e 	.word	0x726f206e
   19624:	75716520 	.word	0x75716520
   19628:	74206c61 	.word	0x74206c61
   1962c:	3231206f 	.word	0x3231206f
   19630:	7a484d20 	.word	0x7a484d20
   19634:	6d305b1b 	.word	0x6d305b1b
   19638:	6d305b1b 	.word	0x6d305b1b
   1963c:	0000000a 	.word	0x0000000a
   19640:	31345b1b 	.word	0x31345b1b
   19644:	4952436d 	.word	0x4952436d
   19648:	41434954 	.word	0x41434954
   1964c:	305b1b4c 	.word	0x305b1b4c
   19650:	6d34393b 	.word	0x6d34393b
   19654:	3a73253a 	.word	0x3a73253a
   19658:	3b305b1b 	.word	0x3b305b1b
   1965c:	256d3239 	.word	0x256d3239
   19660:	5b1b3a73 	.word	0x5b1b3a73
   19664:	33393b30 	.word	0x33393b30
   19668:	3e64256d 	.word	0x3e64256d
   1966c:	305b1b20 	.word	0x305b1b20
   19670:	6d37333b 	.word	0x6d37333b
   19674:	65737341 	.word	0x65737341
   19678:	6f697472 	.word	0x6f697472
   1967c:	6146206e 	.word	0x6146206e
   19680:	72756c69 	.word	0x72756c69
   19684:	43202c65 	.word	0x43202c65
   19688:	69646e6f 	.word	0x69646e6f
   1968c:	6e6f6974 	.word	0x6e6f6974
   19690:	73655420 	.word	0x73655420
   19694:	3a646574 	.word	0x3a646574
   19698:	69642820 	.word	0x69642820
   1969c:	65646976 	.word	0x65646976
   196a0:	61765f72 	.word	0x61765f72
   196a4:	2065756c 	.word	0x2065756c
   196a8:	2938203c 	.word	0x2938203c
   196ac:	2020200a 	.word	0x2020200a
   196b0:	20202020 	.word	0x20202020
   196b4:	50202020 	.word	0x50202020
   196b8:	64204c4c 	.word	0x64204c4c
   196bc:	64697669 	.word	0x64697669
   196c0:	76207265 	.word	0x76207265
   196c4:	65756c61 	.word	0x65756c61
   196c8:	6e657720 	.word	0x6e657720
   196cc:	756f2074 	.word	0x756f2074
   196d0:	666f2074 	.word	0x666f2074
   196d4:	756f6220 	.word	0x756f6220
   196d8:	1b73646e 	.word	0x1b73646e
   196dc:	1b6d305b 	.word	0x1b6d305b
   196e0:	0a6d305b 	.word	0x0a6d305b
   196e4:	00000000 	.word	0x00000000
   196e8:	31345b1b 	.word	0x31345b1b
   196ec:	4952436d 	.word	0x4952436d
   196f0:	41434954 	.word	0x41434954
   196f4:	305b1b4c 	.word	0x305b1b4c
   196f8:	6d34393b 	.word	0x6d34393b
   196fc:	3a73253a 	.word	0x3a73253a
   19700:	3b305b1b 	.word	0x3b305b1b
   19704:	256d3239 	.word	0x256d3239
   19708:	5b1b3a73 	.word	0x5b1b3a73
   1970c:	33393b30 	.word	0x33393b30
   19710:	3e64256d 	.word	0x3e64256d
   19714:	305b1b20 	.word	0x305b1b20
   19718:	6d37333b 	.word	0x6d37333b
   1971c:	65737341 	.word	0x65737341
   19720:	6f697472 	.word	0x6f697472
   19724:	6146206e 	.word	0x6146206e
   19728:	72756c69 	.word	0x72756c69
   1972c:	43202c65 	.word	0x43202c65
   19730:	69646e6f 	.word	0x69646e6f
   19734:	6e6f6974 	.word	0x6e6f6974
   19738:	73655420 	.word	0x73655420
   1973c:	3a646574 	.word	0x3a646574
   19740:	61662820 	.word	0x61662820
   19744:	2965736c 	.word	0x2965736c
   19748:	2020200a 	.word	0x2020200a
   1974c:	20202020 	.word	0x20202020
   19750:	50202020 	.word	0x50202020
   19754:	6c204c4c 	.word	0x6c204c4c
   19758:	206b636f 	.word	0x206b636f
   1975c:	6c756f63 	.word	0x6c756f63
   19760:	6f6e2064 	.word	0x6f6e2064
   19764:	65622074 	.word	0x65622074
   19768:	74736520 	.word	0x74736520
   1976c:	696c6261 	.word	0x696c6261
   19770:	64656873 	.word	0x64656873
   19774:	66656220 	.word	0x66656220
   19778:	2065726f 	.word	0x2065726f
   1977c:	656d6974 	.word	0x656d6974
   19780:	1b74756f 	.word	0x1b74756f
   19784:	1b6d305b 	.word	0x1b6d305b
   19788:	0a6d305b 	.word	0x0a6d305b
   1978c:	00000000 	.word	0x00000000
   19790:	31345b1b 	.word	0x31345b1b
   19794:	4952436d 	.word	0x4952436d
   19798:	41434954 	.word	0x41434954
   1979c:	305b1b4c 	.word	0x305b1b4c
   197a0:	6d34393b 	.word	0x6d34393b
   197a4:	3a73253a 	.word	0x3a73253a
   197a8:	3b305b1b 	.word	0x3b305b1b
   197ac:	256d3239 	.word	0x256d3239
   197b0:	5b1b3a73 	.word	0x5b1b3a73
   197b4:	33393b30 	.word	0x33393b30
   197b8:	3e64256d 	.word	0x3e64256d
   197bc:	305b1b20 	.word	0x305b1b20
   197c0:	6d37333b 	.word	0x6d37333b
   197c4:	65737341 	.word	0x65737341
   197c8:	6f697472 	.word	0x6f697472
   197cc:	6146206e 	.word	0x6146206e
   197d0:	72756c69 	.word	0x72756c69
   197d4:	43202c65 	.word	0x43202c65
   197d8:	69646e6f 	.word	0x69646e6f
   197dc:	6e6f6974 	.word	0x6e6f6974
   197e0:	73655420 	.word	0x73655420
   197e4:	3a646574 	.word	0x3a646574
   197e8:	70632820 	.word	0x70632820
   197ec:	69645f75 	.word	0x69645f75
   197f0:	65646976 	.word	0x65646976
   197f4:	203c2072 	.word	0x203c2072
   197f8:	0a293233 	.word	0x0a293233
   197fc:	20202020 	.word	0x20202020
   19800:	20202020 	.word	0x20202020
   19804:	69442020 	.word	0x69442020
   19808:	65646976 	.word	0x65646976
   1980c:	756d2072 	.word	0x756d2072
   19810:	276e7473 	.word	0x276e7473
   19814:	78652074 	.word	0x78652074
   19818:	64656563 	.word	0x64656563
   1981c:	1b323320 	.word	0x1b323320
   19820:	1b6d305b 	.word	0x1b6d305b
   19824:	0a6d305b 	.word	0x0a6d305b
   19828:	00000000 	.word	0x00000000
   1982c:	32345b1b 	.word	0x32345b1b
   19830:	2020206d 	.word	0x2020206d
   19834:	464e4920 	.word	0x464e4920
   19838:	305b1b4f 	.word	0x305b1b4f
   1983c:	6d34393b 	.word	0x6d34393b
   19840:	3a73253a 	.word	0x3a73253a
   19844:	3b305b1b 	.word	0x3b305b1b
   19848:	256d3239 	.word	0x256d3239
   1984c:	5b1b3a73 	.word	0x5b1b3a73
   19850:	33393b30 	.word	0x33393b30
   19854:	3e64256d 	.word	0x3e64256d
   19858:	305b1b20 	.word	0x305b1b20
   1985c:	6d37333b 	.word	0x6d37333b
   19860:	72617453 	.word	0x72617453
   19864:	305b1b74 	.word	0x305b1b74
   19868:	00000a6d 	.word	0x00000a6d
   1986c:	32345b1b 	.word	0x32345b1b
   19870:	2020206d 	.word	0x2020206d
   19874:	464e4920 	.word	0x464e4920
   19878:	305b1b4f 	.word	0x305b1b4f
   1987c:	6d34393b 	.word	0x6d34393b
   19880:	3a73253a 	.word	0x3a73253a
   19884:	3b305b1b 	.word	0x3b305b1b
   19888:	256d3239 	.word	0x256d3239
   1988c:	5b1b3a73 	.word	0x5b1b3a73
   19890:	33393b30 	.word	0x33393b30
   19894:	3e64256d 	.word	0x3e64256d
   19898:	305b1b20 	.word	0x305b1b20
   1989c:	6d37333b 	.word	0x6d37333b
   198a0:	6e727554 	.word	0x6e727554
   198a4:	20676e69 	.word	0x20676e69
   198a8:	2044454c 	.word	0x2044454c
   198ac:	1b214e4f 	.word	0x1b214e4f
   198b0:	0a6d305b 	.word	0x0a6d305b
   198b4:	00000000 	.word	0x00000000
   198b8:	32345b1b 	.word	0x32345b1b
   198bc:	2020206d 	.word	0x2020206d
   198c0:	464e4920 	.word	0x464e4920
   198c4:	305b1b4f 	.word	0x305b1b4f
   198c8:	6d34393b 	.word	0x6d34393b
   198cc:	3a73253a 	.word	0x3a73253a
   198d0:	3b305b1b 	.word	0x3b305b1b
   198d4:	256d3239 	.word	0x256d3239
   198d8:	5b1b3a73 	.word	0x5b1b3a73
   198dc:	33393b30 	.word	0x33393b30
   198e0:	3e64256d 	.word	0x3e64256d
   198e4:	305b1b20 	.word	0x305b1b20
   198e8:	6d37333b 	.word	0x6d37333b
   198ec:	6e727554 	.word	0x6e727554
   198f0:	20676e69 	.word	0x20676e69
   198f4:	2044454c 	.word	0x2044454c
   198f8:	2146464f 	.word	0x2146464f
   198fc:	6d305b1b 	.word	0x6d305b1b
   19900:	0000000a 	.word	0x0000000a
   19904:	32345b1b 	.word	0x32345b1b
   19908:	2020206d 	.word	0x2020206d
   1990c:	464e4920 	.word	0x464e4920
   19910:	305b1b4f 	.word	0x305b1b4f
   19914:	6d34393b 	.word	0x6d34393b
   19918:	3a73253a 	.word	0x3a73253a
   1991c:	3b305b1b 	.word	0x3b305b1b
   19920:	256d3239 	.word	0x256d3239
   19924:	5b1b3a73 	.word	0x5b1b3a73
   19928:	33393b30 	.word	0x33393b30
   1992c:	3e64256d 	.word	0x3e64256d
   19930:	305b1b20 	.word	0x305b1b20
   19934:	6d37333b 	.word	0x6d37333b
   19938:	74747542 	.word	0x74747542
   1993c:	30206e6f 	.word	0x30206e6f
   19940:	65727020 	.word	0x65727020
   19944:	64657373 	.word	0x64657373
   19948:	305b1b21 	.word	0x305b1b21
   1994c:	00000a6d 	.word	0x00000a6d
   19950:	32345b1b 	.word	0x32345b1b
   19954:	2020206d 	.word	0x2020206d
   19958:	464e4920 	.word	0x464e4920
   1995c:	305b1b4f 	.word	0x305b1b4f
   19960:	6d34393b 	.word	0x6d34393b
   19964:	3a73253a 	.word	0x3a73253a
   19968:	3b305b1b 	.word	0x3b305b1b
   1996c:	256d3239 	.word	0x256d3239
   19970:	5b1b3a73 	.word	0x5b1b3a73
   19974:	33393b30 	.word	0x33393b30
   19978:	3e64256d 	.word	0x3e64256d
   1997c:	305b1b20 	.word	0x305b1b20
   19980:	6d37333b 	.word	0x6d37333b
   19984:	74747542 	.word	0x74747542
   19988:	31206e6f 	.word	0x31206e6f
   1998c:	65727020 	.word	0x65727020
   19990:	64657373 	.word	0x64657373
   19994:	305b1b21 	.word	0x305b1b21
   19998:	00000a6d 	.word	0x00000a6d
   1999c:	32345b1b 	.word	0x32345b1b
   199a0:	2020206d 	.word	0x2020206d
   199a4:	464e4920 	.word	0x464e4920
   199a8:	305b1b4f 	.word	0x305b1b4f
   199ac:	6d34393b 	.word	0x6d34393b
   199b0:	3a73253a 	.word	0x3a73253a
   199b4:	3b305b1b 	.word	0x3b305b1b
   199b8:	256d3239 	.word	0x256d3239
   199bc:	5b1b3a73 	.word	0x5b1b3a73
   199c0:	33393b30 	.word	0x33393b30
   199c4:	3e64256d 	.word	0x3e64256d
   199c8:	305b1b20 	.word	0x305b1b20
   199cc:	6d37333b 	.word	0x6d37333b
   199d0:	74747542 	.word	0x74747542
   199d4:	32206e6f 	.word	0x32206e6f
   199d8:	65727020 	.word	0x65727020
   199dc:	64657373 	.word	0x64657373
   199e0:	305b1b21 	.word	0x305b1b21
   199e4:	00000a6d 	.word	0x00000a6d
   199e8:	32345b1b 	.word	0x32345b1b
   199ec:	2020206d 	.word	0x2020206d
   199f0:	464e4920 	.word	0x464e4920
   199f4:	305b1b4f 	.word	0x305b1b4f
   199f8:	6d34393b 	.word	0x6d34393b
   199fc:	3a73253a 	.word	0x3a73253a
   19a00:	3b305b1b 	.word	0x3b305b1b
   19a04:	256d3239 	.word	0x256d3239
   19a08:	5b1b3a73 	.word	0x5b1b3a73
   19a0c:	33393b30 	.word	0x33393b30
   19a10:	3e64256d 	.word	0x3e64256d
   19a14:	305b1b20 	.word	0x305b1b20
   19a18:	6d37333b 	.word	0x6d37333b
   19a1c:	74747542 	.word	0x74747542
   19a20:	33206e6f 	.word	0x33206e6f
   19a24:	65727020 	.word	0x65727020
   19a28:	64657373 	.word	0x64657373
   19a2c:	305b1b21 	.word	0x305b1b21
   19a30:	00000a6d 	.word	0x00000a6d
   19a34:	0000002d 	.word	0x0000002d
   19a38:	0000002e 	.word	0x0000002e
   19a3c:	00000026 	.word	0x00000026
   19a40:	ffff007c 	.word	0xffff007c

00019a44 <Gpio::ValidPortCheck()::file>:
   19a44:	6f697067 7070682e ffffff00              gpio.hpp....

00019a50 <Gpio::SetInterruptEdge(GpioInterface::Edge)::file>:
   19a50:	6f697067 7070682e ffffff00              gpio.hpp....

00019a5c <Gpio::ClearInterruptEdge(GpioInterface::Edge)::file>:
   19a5c:	6f697067 7070682e ffffff00              gpio.hpp....

00019a68 <Lpc40xxSystemController::SetPeripheralClockDivider(unsigned char)::file>:
   19a68:	74737973 635f6d65 72746e6f 656c6c6f     system_controlle
   19a78:	70682e72 ffff0070                       r.hpp...

00019a80 <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)::file>:
   19a80:	74737973 635f6d65 72746e6f 656c6c6f     system_controlle
   19a90:	70682e72 ffff0070                       r.hpp...

00019a98 <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)::file>:
   19a98:	74737973 635f6d65 72746e6f 656c6c6f     system_controlle
   19aa8:	70682e72 ffff0070                       r.hpp...

00019ab0 <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)::file>:
   19ab0:	74737973 635f6d65 72746e6f 656c6c6f     system_controlle
   19ac0:	70682e72 ffff0070                       r.hpp...

00019ac8 <Lpc40xxSystemController::SetCpuClockDivider(unsigned char)::file>:
   19ac8:	74737973 635f6d65 72746e6f 656c6c6f     system_controlle
   19ad8:	70682e72 ffff0070                       r.hpp...

00019ae0 <Ssp::kPinSelect>:
   19ae0:	ff040202                                ....

00019ae4 <Ssp::kSspPinMatrix>:
   19ae4:	00019d20 00001200 00019d20 00001100      ....... .......
   19af4:	00019d20 00000f00 00019d20 00000900      ....... .......
   19b04:	00019d20 00000800 00019d20 00000700      ....... .......
   19b14:	00019d20 00000101 00019d20 00000401      ....... .......
   19b24:	00019d20 00000001                        .......

00019b2c <Ssp::kPowerBit>:
   19b2c:	00000015 0000000a 00000014              ............

00019b38 <main::file>:
   19b38:	6e69616d 7070632e ffffff00              main.cpp....

00019b44 <DemoButton()::file>:
   19b44:	6e69616d 7070632e ffffff00              main.cpp....

00019b50 <DemoButton()::file>:
   19b50:	6e69616d 7070632e ffffff00              main.cpp....

00019b5c <DemoButton()::file>:
   19b5c:	6e69616d 7070632e ffffff00              main.cpp....

00019b68 <DemoButton()::file>:
   19b68:	6e69616d 7070632e ffffff00              main.cpp....

00019b74 <vtable for Ssd1306>:
	...
   19b7c:	00012e49 00012e75 00012ea1 00013089     I...u........0..
   19b8c:	00012d09 00012d31 00013161 00013199     .-..1-..a1...1..
   19b9c:	0001322d                                -2..

00019ba0 <vtable for PixelDisplayInterface>:
	...
   19ba8:	00018d51 00018d51 00018d51 00018d51     Q...Q...Q...Q...
   19bb8:	00012d09 00012d31 00018d51 00018d51     .-..1-..Q...Q...
   19bc8:	00012d59                                Y-..

00019bcc <vtable for Ssp>:
	...
   19bd4:	0001227d 00012361 000123d9 00012445     }"..a#...#..E$..
   19be4:	00012531 0001273d 0001289d 00012a89     1%..='...(...*..
   19bf4:	fffffffc 00000000 00011b1d 00011bad     ................
   19c04:	00011c05 00011c1d 00011c31 00011c71     ........1...q...
   19c14:	00011ca1                                ....

00019c18 <vtable for SspInterface>:
	...
   19c20:	00018d51 00018d51 00018d51 00018d51     Q...Q...Q...Q...
   19c30:	00018d51 00018d51 00018d51 00018d51     Q...Q...Q...Q...

00019c40 <vtable for Lpc40xxSystemController>:
	...
   19c48:	00011b1d 00011bad 00011c05 00011c1d     ................
   19c58:	00011c31 00011c71 00011ca1              1...q.......

00019c64 <vtable for SystemControllerInterface>:
	...
   19c6c:	00018d51 00018d51 00018d51 00018d51     Q...Q...Q...Q...
   19c7c:	00018d51 00018d51 00018d51              Q...Q...Q...

00019c88 <vtable for Gpio>:
	...
   19c90:	00011235 000112b1 0001132d 00011371     5.......-...q...
   19ca0:	000113d5 00011439 0001147d 000114e9     ....9...}.......
   19cb0:	00011561 000115d1 00011869 000118b1     a.......i.......
   19cc0:	00011679 000116d5 00011759 000117e1     y.......Y.......

00019cd0 <vtable for GpioInterface>:
	...
   19cd8:	00018d51 00018d51 00018d51 00018d51     Q...Q...Q...Q...
   19ce8:	00018d51 00018d51 00018d51 00018d51     Q...Q...Q...Q...
   19cf8:	00018d51 00018d51 00018d51 00018d51     Q...Q...Q...Q...
   19d08:	00018d51 00018d51 00018d51 00018d51     Q...Q...Q...Q...

00019d18 <vtable for Pin>:
	...
   19d20:	000108e5 0001095d 000109dd 00010a51     ....].......Q...
   19d30:	00010ac5 00010b41 00010bbd 00010c31     ....A.......1...
   19d40:	00010cad 00010d21 00010d95 00010e6d     ....!.......m...
   19d50:	00010e99                                ....

00019d54 <vtable for PinInterface>:
	...
   19d5c:	00018d51 00018d51 00018d51 00018d51     Q...Q...Q...Q...
   19d6c:	00018d51 00018d51 00018d51 00018d51     Q...Q...Q...Q...
   19d7c:	00018d51 00018d51 00018d51 00018d51     Q...Q...Q...Q...
   19d8c:	00018d51                                Q...

00019d90 <main::__PRETTY_FUNCTION__>:
   19d90:	20746e69 6e69616d ff002928              int main()..

00019d9c <DemoButton()::__PRETTY_FUNCTION__>:
   19d9c:	64696f76 6d654420 7475426f 286e6f74     void DemoButton(
   19dac:	ffff0029                                )...

00019db0 <Lpc40xxSystemController::SetPeripheralClockDivider(unsigned char)::__PRETTY_FUNCTION__>:
   19db0:	74726976 206c6175 64696f76 63704c20     virtual void Lpc
   19dc0:	78783034 74737953 6f436d65 6f72746e     40xxSystemContro
   19dd0:	72656c6c 65533a3a 72655074 65687069     ller::SetPeriphe
   19de0:	436c6172 6b636f6c 69766944 28726564     ralClockDivider(
   19df0:	746e6975 29745f38 ffffff00              uint8_t)....

00019dfc <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)::__PRETTY_FUNCTION__>:
   19dfc:	746e6975 745f3233 63704c20 78783034     uint32_t Lpc40xx
   19e0c:	74737953 6f436d65 6f72746e 72656c6c     SystemController
   19e1c:	65533a3a 69614d74 6c6c506e 63704c28     ::SetMainPll(Lpc
   19e2c:	78783034 74737953 6f436d65 6f72746e     40xxSystemContro
   19e3c:	72656c6c 6c503a3a 706e496c 202c7475     ller::PllInput, 
   19e4c:	746e6975 745f3631 ffff0029              uint16_t)...

00019e58 <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)::__PRETTY_FUNCTION__>:
   19e58:	746e6975 745f3233 63704c20 78783034     uint32_t Lpc40xx
   19e68:	74737953 6f436d65 6f72746e 72656c6c     SystemController
   19e78:	61433a3a 6c75636c 50657461 4c286c6c     ::CalculatePll(L
   19e88:	30346370 79537878 6d657473 746e6f43     pc40xxSystemCont
   19e98:	6c6c6f72 3a3a7265 496c6c50 7475706e     roller::PllInput
   19ea8:	6975202c 3631746e 0029745f              , uint16_t).

00019eb4 <Lpc40xxSystemController::SetCpuClockDivider(unsigned char)::__PRETTY_FUNCTION__>:
   19eb4:	64696f76 63704c20 78783034 74737953     void Lpc40xxSyst
   19ec4:	6f436d65 6f72746e 72656c6c 65533a3a     emController::Se
   19ed4:	75704374 636f6c43 7669446b 72656469     tCpuClockDivider
   19ee4:	6e697528 745f3874 ffff0029              (uint8_t)...

00019ef0 <Gpio::ClearInterruptEdge(GpioInterface::Edge)::__PRETTY_FUNCTION__>:
   19ef0:	74726976 206c6175 64696f76 69704720     virtual void Gpi
   19f00:	433a3a6f 7261656c 65746e49 70757272     o::ClearInterrup
   19f10:	67644574 70472865 6e496f69 66726574     tEdge(GpioInterf
   19f20:	3a656361 6764453a ff002965              ace::Edge)..

00019f2c <Gpio::ValidPortCheck()::__PRETTY_FUNCTION__>:
   19f2c:	6c6f6f62 69704720 563a3a6f 64696c61     bool Gpio::Valid
   19f3c:	74726f50 63656843 0029286b              PortCheck().

00019f48 <Gpio::SetInterruptEdge(GpioInterface::Edge)::__PRETTY_FUNCTION__>:
   19f48:	74726976 206c6175 64696f76 69704720     virtual void Gpi
   19f58:	533a3a6f 6e497465 72726574 45747075     o::SetInterruptE
   19f68:	28656764 6f697047 65746e49 63616672     dge(GpioInterfac
   19f78:	453a3a65 29656764 ffffff00 63617453     e::Edge)....Stac
   19f88:	6544206b 20687470 7a25203d 00000a64     k Depth = %zd...
   19f98:	25232020 203a757a 70257830 0000000a       #%zu: 0x%p....
   19fa8:	6e75520a 6874203a 6f662065 776f6c6c     .Run: the follow
   19fb8:	20676e69 6d6d6f63 20646e61 79206e69     ing command in y
   19fc8:	2072756f 6a6f7270 20746365 65726964     our project dire
   19fd8:	726f7463 00000079 1b20200a 333b315b     ctory....  .[1;3
   19fe8:	616d6d37 7320656b 6b636174 63617274     7mmake stacktrac
   19ff8:	73252d65 41525420 3d534543 00000022     e-%s TRACES="...
   1a008:	70257830 00000000 25783020 00000070     0x%p.... 0x%p...
   1a018:	5b1b0a22 00006d30 73696854 6c697720     "..[0m..This wil
   1a028:	6572206c 74726f70 65687420 6c696620     l report the fil
   1a038:	6e612065 696c2064 6e20656e 65626d75     e and line numbe
   1a048:	68742072 6c207461 74206465 6874206f     r that led to th
   1a058:	66207369 74636e75 206e6f69 6e696562     is function bein
   1a068:	61632067 64656c6c 0000002e 6c707061     g called....appl
   1a078:	74616369 006e6f69 31345b1b 4952436d     ication..[41mCRI
   1a088:	41434954 305b1b4c 6d34393b 3a73253a     TICAL.[0;94m:%s:
   1a098:	3b305b1b 256d3239 5b1b3a73 33393b30     .[0;92m%s:.[0;93
   1a0a8:	3e64256d 305b1b20 6d37333b 65737341     m%d> .[0;37mAsse
   1a0b8:	6f697472 6146206e 72756c69 43202c65     rtion Failure, C
   1a0c8:	69646e6f 6e6f6974 73655420 3a646574     ondition Tested:
   1a0d8:	65702820 68706972 6c617265 7669645f      (peripheral_div
   1a0e8:	72656469 203d3c20 200a2934 20202020     ider <= 4).     
   1a0f8:	20202020 76694420 72656469 73756d20          Divider mus
   1a108:	74276e74 63786520 20646565 5b1b3233     tn't exceed 32.[
   1a118:	5b1b6d30 000a6d30 6972500a 6e69746e     0m.[0m...Printin
   1a128:	74532067 206b6361 63617254 000a3a65     g Stack Trace:..
   1a138:	31345b1b 4952436d 41434954 305b1b4c     .[41mCRITICAL.[0
   1a148:	6d34393b 3a73253a 3b305b1b 256d3239     ;94m:%s:.[0;92m%
   1a158:	5b1b3a73 33393b30 3e64256d 305b1b20     s:.[0;93m%d> .[0
   1a168:	6d37333b 65737341 6f697472 6146206e     ;37mAssertion Fa
   1a178:	72756c69 43202c65 69646e6f 6e6f6974     ilure, Condition
   1a188:	73655420 3a646574 65642820 65726973      Tested: (desire
   1a198:	70735f64 5f646565 6d5f6e69 3c207a68     d_speed_in_mhz <
   1a1a8:	34383320 20262620 69736564 5f646572      384 && desired_
   1a1b8:	65657073 6e695f64 7a686d5f 31203e20     speed_in_mhz > 1
   1a1c8:	200a2932 20202020 20202020 65724620     2).          Fre
   1a1d8:	6e657571 6d207963 20747375 6c206562     quency must be l
   1a1e8:	7265776f 61687420 3833206e 484d2034     ower than 384 MH
   1a1f8:	646e617a 65726720 72657461 61687420     zand greater tha
   1a208:	726f206e 75716520 74206c61 3231206f     n or equal to 12
   1a218:	7a484d20 6d305b1b 6d305b1b 0000000a      MHz.[0m.[0m....
   1a228:	31345b1b 4952436d 41434954 305b1b4c     .[41mCRITICAL.[0
   1a238:	6d34393b 3a73253a 3b305b1b 256d3239     ;94m:%s:.[0;92m%
   1a248:	5b1b3a73 33393b30 3e64256d 305b1b20     s:.[0;93m%d> .[0
   1a258:	6d37333b 65737341 6f697472 6146206e     ;37mAssertion Fa
   1a268:	72756c69 43202c65 69646e6f 6e6f6974     ilure, Condition
   1a278:	73655420 3a646574 69642820 65646976      Tested: (divide
   1a288:	61765f72 2065756c 2938203c 2020200a     r_value < 8).   
   1a298:	20202020 50202020 64204c4c 64697669            PLL divid
   1a2a8:	76207265 65756c61 6e657720 756f2074     er value went ou
   1a2b8:	666f2074 756f6220 1b73646e 1b6d305b     t of bounds.[0m.
   1a2c8:	0a6d305b 00000000 31345b1b 4952436d     [0m......[41mCRI
   1a2d8:	41434954 305b1b4c 6d34393b 3a73253a     TICAL.[0;94m:%s:
   1a2e8:	3b305b1b 256d3239 5b1b3a73 33393b30     .[0;92m%s:.[0;93
   1a2f8:	3e64256d 305b1b20 6d37333b 65737341     m%d> .[0;37mAsse
   1a308:	6f697472 6146206e 72756c69 43202c65     rtion Failure, C
   1a318:	69646e6f 6e6f6974 73655420 3a646574     ondition Tested:
   1a328:	61662820 2965736c 2020200a 20202020      (false).       
   1a338:	50202020 6c204c4c 206b636f 6c756f63        PLL lock coul
   1a348:	6f6e2064 65622074 74736520 696c6261     d not be establi
   1a358:	64656873 66656220 2065726f 656d6974     shed before time
   1a368:	1b74756f 1b6d305b 0a6d305b 00000000     out.[0m.[0m.....
   1a378:	31345b1b 4952436d 41434954 305b1b4c     .[41mCRITICAL.[0
   1a388:	6d34393b 3a73253a 3b305b1b 256d3239     ;94m:%s:.[0;92m%
   1a398:	5b1b3a73 33393b30 3e64256d 305b1b20     s:.[0;93m%d> .[0
   1a3a8:	6d37333b 65737341 6f697472 6146206e     ;37mAssertion Fa
   1a3b8:	72756c69 43202c65 69646e6f 6e6f6974     ilure, Condition
   1a3c8:	73655420 3a646574 70632820 69645f75      Tested: (cpu_di
   1a3d8:	65646976 203c2072 0a293233 20202020     vider < 32).    
   1a3e8:	20202020 69442020 65646976 756d2072           Divider mu
   1a3f8:	276e7473 78652074 64656563 1b323320     stn't exceed 32.
   1a408:	1b6d305b 0a6d305b 00000000 31345b1b     [0m.[0m......[41
   1a418:	4952436d 41434954 305b1b4c 6d34393b     mCRITICAL.[0;94m
   1a428:	3a73253a 3b305b1b 256d3239 5b1b3a73     :%s:.[0;92m%s:.[
   1a438:	33393b30 3e64256d 305b1b20 6d37333b     0;93m%d> .[0;37m
   1a448:	65737341 6f697472 6146206e 72756c69     Assertion Failur
   1a458:	43202c65 69646e6f 6e6f6974 73655420     e, Condition Tes
   1a468:	3a646574 72662820 65757165 2079636e     ted: (frequency 
   1a478:	30203d21 20200a29 20202020 20202020     != 0).          
   1a488:	6e6e6143 6820746f 20657661 6f72657a     Cannot have zero
   1a498:	63697420 7020736b 6d207265 6f726369      ticks per micro
   1a4a8:	6f636573 202c646e 61656c70 63206573     second, please c
   1a4b8:	736f6f68 20312065 6d20726f 2e65726f     hoose 1 or more.
   1a4c8:	6d305b1b 6d305b1b 0000000a 33345b1b     .[0m.[0m.....[43
   1a4d8:	4157206d 4e494e52 305b1b47 6d34393b     m WARNING.[0;94m
   1a4e8:	3a73253a 3b305b1b 256d3239 5b1b3a73     :%s:.[0;92m%s:.[
   1a4f8:	33393b30 3e64256d 305b1b20 6d37333b     0;93m%d> .[0;37m
   1a508:	74737953 54206d65 72656d69 73616820     System Timer has
   1a518:	49414620 2044454c 73206f74 74726174      FAILED to start
   1a528:	305b1b21 305b1b6d ff000a6d              !.[0m.[0m...

0001a534 <Timer::kPowerbit>:
   1a534:	00000001 00000002 00000016 00000017     ................

0001a544 <Timer::kTimerIrq>:
   1a544:	04030201                                ....

0001a548 <Timer::kTimerIsr>:
   1a548:	00015b99 00015bd5 00015c11 00015c4d     .[...[...\..M\..

0001a558 <Timer::Initialize(unsigned long, void (*)(), long)::file>:
   1a558:	656d6974 70682e72 ffff0070              timer.hpp...

0001a564 <Uart::kTxUartPortFunction>:
   1a564:	05020201                                ....

0001a568 <Uart::kRxUartPortFunction>:
   1a568:	03020201                                ....

0001a56c <Uart::kPowerbit>:
   1a56c:	00000003 00000018 00000019 00000008     ................

0001a57c <LowLevelInit()::file>:
   1a57c:	72617473 2e707574 00707063              startup.cpp.

0001a588 <vtable for Uart>:
	...
   1a590:	00015191 0001525d 0001538d 000154c1     .Q..]R...S...T..
   1a5a0:	fffffffc 00000000 00011b1d 00011bad     ................
   1a5b0:	00011c05 00011c1d 00011c31 00011c71     ........1...q...
   1a5c0:	00011ca1                                ....

0001a5c4 <vtable for Timer>:
	...
   1a5cc:	00014ef9 0001505d 00015155 fffffffc     .N..]P..UQ......
   1a5dc:	00000000 00011b1d 00011bad 00011c05     ................
   1a5ec:	00011c1d 00011c31 00011c71 00011ca1     ....1...q.......

0001a5fc <vtable for SystemTimer>:
	...
   1a604:	00014d45 00014d79 00014e15 fffffffc     EM..yM...N......
   1a614:	00000000 00011b1d 00011bad 00011c05     ................
   1a624:	00011c1d 00011c31 00011c71 00011ca1     ....1...q.......

0001a634 <Timer::Initialize(unsigned long, void (*)(), long)::__PRETTY_FUNCTION__>:
   1a634:	74726976 206c6175 64696f76 6d695420     virtual void Tim
   1a644:	3a3a7265 74696e49 696c6169 7528657a     er::Initialize(u
   1a654:	33746e69 2c745f32 72734920 6e696f50     int32_t, IsrPoin
   1a664:	2c726574 746e6920 745f3233 ffff0029     ter, int32_t)...

0001a674 <LowLevelInit()::__PRETTY_FUNCTION__>:
   1a674:	64696f76 776f4c20 6576654c 696e496c     void LowLevelIni
   1a684:	00292874 63617453 6544206b 20687470     t().Stack Depth 
   1a694:	7a25203d 00000a64 25232020 203a757a     = %zd...  #%zu: 
   1a6a4:	70257830 0000000a 6e75520a 6874203a     0x%p.....Run: th
   1a6b4:	6f662065 776f6c6c 20676e69 6d6d6f63     e following comm
   1a6c4:	20646e61 79206e69 2072756f 6a6f7270     and in your proj
   1a6d4:	20746365 65726964 726f7463 00000079     ect directory...
   1a6e4:	1b20200a 333b315b 616d6d37 7320656b     .  .[1;37mmake s
   1a6f4:	6b636174 63617274 73252d65 41525420     tacktrace-%s TRA
   1a704:	3d534543 00000022 70257830 00000000     CES="...0x%p....
   1a714:	25783020 00000070 5b1b0a22 00006d30      0x%p..."..[0m..
   1a724:	73696854 6c697720 6572206c 74726f70     This will report
   1a734:	65687420 6c696620 6e612065 696c2064      the file and li
   1a744:	6e20656e 65626d75 68742072 6c207461     ne number that l
   1a754:	74206465 6874206f 66207369 74636e75     ed to this funct
   1a764:	206e6f69 6e696562 61632067 64656c6c     ion being called
   1a774:	0000002e 6c707061 74616369 006e6f69     ....application.
   1a784:	31345b1b 4952436d 41434954 305b1b4c     .[41mCRITICAL.[0
   1a794:	6d34393b 3a73253a 3b305b1b 256d3239     ;94m:%s:.[0;92m%
   1a7a4:	5b1b3a73 33393b30 3e64256d 305b1b20     s:.[0;93m%d> .[0
   1a7b4:	6d37333b 65737341 6f697472 6146206e     ;37mAssertion Fa
   1a7c4:	72756c69 43202c65 69646e6f 6e6f6974     ilure, Condition
   1a7d4:	73655420 3a646574 73692820 3d212072      Tested: (isr !=
   1a7e4:	746e4920 75727265 6f4c7470 70756b6f      InterruptLookup
   1a7f4:	646e6148 2972656c 2020200a 20202020     Handler).       
   1a804:	4e202020 5349206f 6f662052 20646e75        No ISR found 
   1a814:	20726f66 20656874 74636576 2520726f     for the vector %
   1a824:	305b1b75 305b1b6d 00000a6d 6972500a     u.[0m.[0m....Pri
   1a834:	6e69746e 74532067 206b6361 63617254     nting Stack Trac
   1a844:	000a3a65 31345b1b 7261486d 61462064     e:...[41mHard Fa
   1a854:	20746c75 65637845 6f697470 634f206e     ult Exception Oc
   1a864:	72727563 0a216465 6d305b1b 00000000     curred!..[0m....
   1a874:	203a3072 30257830 2c586c38 3a317220     r0: 0x%08lX, r1:
   1a884:	25783020 586c3830 3272202c 7830203a      0x%08lX, r2: 0x
   1a894:	6c383025 72202c58 30203a33 38302578     %08lX, r3: 0x%08
   1a8a4:	000a586c 3a323172 25783020 586c3830     lX..r12: 0x%08lX
   1a8b4:	726c202c 7830203a 6c383025 70202c58     , lr: 0x%08lX, p
   1a8c4:	30203a63 38302578 202c586c 3a727370     c: 0x%08lX, psr:
   1a8d4:	25783020 586c3830 ffff000a               0x%08lX....

0001a8e0 <InterruptLookupHandler::file>:
   1a8e0:	65746e69 70757272 70632e74 ffff0070     interrupt.cpp...

0001a8f0 <InterruptLookupHandler::__PRETTY_FUNCTION__>:
   1a8f0:	64696f76 746e4920 75727265 6f4c7470     void InterruptLo
   1a900:	70756b6f 646e6148 2872656c ffff0029     okupHandler()...

0001a910 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)::pow10>:
   1a910:	3f800000 41200000 42c80000 447a0000     ...?.. A...B..zD
   1a920:	461c4000 47c35000 49742400 4b189680     .@.F.P.G.$tI...K
   1a930:	4cbebc20 4e6e6b28 63617453 6544206b      ..L(knNStack De
   1a940:	20687470 7a25203d 00000a64 25232020     pth = %zd...  #%
   1a950:	203a757a 70257830 0000000a 6e75520a     zu: 0x%p.....Run
   1a960:	6874203a 6f662065 776f6c6c 20676e69     : the following 
   1a970:	6d6d6f63 20646e61 79206e69 2072756f     command in your 
   1a980:	6a6f7270 20746365 65726964 726f7463     project director
   1a990:	00000079 1b20200a 333b315b 616d6d37     y....  .[1;37mma
   1a9a0:	7320656b 6b636174 63617274 73252d65     ke stacktrace-%s
   1a9b0:	41525420 3d534543 00000022 70257830      TRACES="...0x%p
   1a9c0:	00000000 25783020 00000070 5b1b0a22     .... 0x%p..."..[
   1a9d0:	00006d30 73696854 6c697720 6572206c     0m..This will re
   1a9e0:	74726f70 65687420 6c696620 6e612065     port the file an
   1a9f0:	696c2064 6e20656e 65626d75 68742072     d line number th
   1aa00:	6c207461 74206465 6874206f 66207369     at led to this f
   1aa10:	74636e75 206e6f69 6e696562 61632067     unction being ca
   1aa20:	64656c6c 0000002e 6c707061 74616369     lled....applicat
   1aa30:	006e6f69 33345b1b 4157206d 4e494e52     ion..[43m WARNIN
   1aa40:	305b1b47 6d34393b 3a73253a 3b305b1b     G.[0;94m:%s:.[0;
   1aa50:	256d3239 5b1b3a73 33393b30 3e64256d     92m%s:.[0;93m%d>
   1aa60:	305b1b20 6d37333b 74726f50 20642520      .[0;37mPort %d 
   1aa70:	6e6e6163 6220746f 73752065 66206465     cannot be used f
   1aa80:	4520726f 72657478 206c616e 65746e49     or External Inte
   1aa90:	70757272 202e7374 6465654e 206f7420     rrupts. Need to 
   1aaa0:	20657375 4f495047 206e6f20 74726f50     use GPIO on Port
   1aab0:	6f203020 2e322072 6d305b1b 6d305b1b      0 or 2..[0m.[0m
   1aac0:	0000000a 33345b1b 4157206d 4e494e52     .....[43m WARNIN
   1aad0:	305b1b47 6d34393b 3a73253a 3b305b1b     G.[0;94m:%s:.[0;
   1aae0:	256d3239 5b1b3a73 33393b30 3e64256d     92m%s:.[0;93m%d>
   1aaf0:	305b1b20 6d37333b 65676445 20642520      .[0;37mEdge %d 
   1ab00:	6e6e6163 6220746f 73752065 66206465     cannot be used f
   1ab10:	4520726f 72657478 206c616e 65746e49     or External Inte
   1ab20:	70757272 4e2e7374 20646565 75206f74     rrupts.Need to u
   1ab30:	61206573 73697220 2c676e69 6c616620     se a rising, fal
   1ab40:	676e696c 726f202c 746f6220 6f632068     ling, or both co
   1ab50:	6769666e 74617275 2e6e6f69 6d305b1b     nfiguration..[0m
   1ab60:	0000000a 31345b1b 4952436d 41434954     .....[41mCRITICA
   1ab70:	305b1b4c 6d34393b 3a73253a 3b305b1b     L.[0;94m:%s:.[0;
   1ab80:	256d3239 5b1b3a73 33393b30 3e64256d     92m%s:.[0;93m%d>
   1ab90:	305b1b20 6d37333b 65737341 6f697472      .[0;37mAssertio
   1aba0:	6146206e 72756c69 43202c65 69646e6f     n Failure, Condi
   1abb0:	6e6f6974 73655420 3a646574 65702820     tion Tested: (pe
   1abc0:	68706972 6c617265 7669645f 72656469     ripheral_divider
   1abd0:	203d3c20 200a2934 20202020 20202020      <= 4).         
   1abe0:	76694420 72656469 73756d20 74276e74      Divider mustn't
   1abf0:	63786520 20646565 5b1b3233 5b1b6d30      exceed 32.[0m.[
   1ac00:	000a6d30 6972500a 6e69746e 74532067     0m...Printing St
   1ac10:	206b6361 63617254 000a3a65 31345b1b     ack Trace:...[41
   1ac20:	4952436d 41434954 305b1b4c 6d34393b     mCRITICAL.[0;94m
   1ac30:	3a73253a 3b305b1b 256d3239 5b1b3a73     :%s:.[0;92m%s:.[
   1ac40:	33393b30 3e64256d 305b1b20 6d37333b     0;93m%d> .[0;37m
   1ac50:	65737341 6f697472 6146206e 72756c69     Assertion Failur
   1ac60:	43202c65 69646e6f 6e6f6974 73655420     e, Condition Tes
   1ac70:	3a646574 65642820 65726973 70735f64     ted: (desired_sp
   1ac80:	5f646565 6d5f6e69 3c207a68 34383320     eed_in_mhz < 384
   1ac90:	20262620 69736564 5f646572 65657073      && desired_spee
   1aca0:	6e695f64 7a686d5f 31203e20 200a2932     d_in_mhz > 12). 
   1acb0:	20202020 20202020 65724620 6e657571              Frequen
   1acc0:	6d207963 20747375 6c206562 7265776f     cy must be lower
   1acd0:	61687420 3833206e 484d2034 646e617a      than 384 MHzand
   1ace0:	65726720 72657461 61687420 726f206e      greater than or
   1acf0:	75716520 74206c61 3231206f 7a484d20      equal to 12 MHz
   1ad00:	6d305b1b 6d305b1b 0000000a 31345b1b     .[0m.[0m.....[41
   1ad10:	4952436d 41434954 305b1b4c 6d34393b     mCRITICAL.[0;94m
   1ad20:	3a73253a 3b305b1b 256d3239 5b1b3a73     :%s:.[0;92m%s:.[
   1ad30:	33393b30 3e64256d 305b1b20 6d37333b     0;93m%d> .[0;37m
   1ad40:	65737341 6f697472 6146206e 72756c69     Assertion Failur
   1ad50:	43202c65 69646e6f 6e6f6974 73655420     e, Condition Tes
   1ad60:	3a646574 69642820 65646976 61765f72     ted: (divider_va
   1ad70:	2065756c 2938203c 2020200a 20202020     lue < 8).       
   1ad80:	50202020 64204c4c 64697669 76207265        PLL divider v
   1ad90:	65756c61 6e657720 756f2074 666f2074     alue went out of
   1ada0:	756f6220 1b73646e 1b6d305b 0a6d305b      bounds.[0m.[0m.
   1adb0:	00000000 31345b1b 4952436d 41434954     .....[41mCRITICA
   1adc0:	305b1b4c 6d34393b 3a73253a 3b305b1b     L.[0;94m:%s:.[0;
   1add0:	256d3239 5b1b3a73 33393b30 3e64256d     92m%s:.[0;93m%d>
   1ade0:	305b1b20 6d37333b 65737341 6f697472      .[0;37mAssertio
   1adf0:	6146206e 72756c69 43202c65 69646e6f     n Failure, Condi
   1ae00:	6e6f6974 73655420 3a646574 61662820     tion Tested: (fa
   1ae10:	2965736c 2020200a 20202020 50202020     lse).          P
   1ae20:	6c204c4c 206b636f 6c756f63 6f6e2064     LL lock could no
   1ae30:	65622074 74736520 696c6261 64656873     t be established
   1ae40:	66656220 2065726f 656d6974 1b74756f      before timeout.
   1ae50:	1b6d305b 0a6d305b 00000000 31345b1b     [0m.[0m......[41
   1ae60:	4952436d 41434954 305b1b4c 6d34393b     mCRITICAL.[0;94m
   1ae70:	3a73253a 3b305b1b 256d3239 5b1b3a73     :%s:.[0;92m%s:.[
   1ae80:	33393b30 3e64256d 305b1b20 6d37333b     0;93m%d> .[0;37m
   1ae90:	65737341 6f697472 6146206e 72756c69     Assertion Failur
   1aea0:	43202c65 69646e6f 6e6f6974 73655420     e, Condition Tes
   1aeb0:	3a646574 70632820 69645f75 65646976     ted: (cpu_divide
   1aec0:	203c2072 0a293233 20202020 20202020     r < 32).        
   1aed0:	69442020 65646976 756d2072 276e7473       Divider mustn'
   1aee0:	78652074 64656563 1b323320 1b6d305b     t exceed 32.[0m.
   1aef0:	0a6d305b 00000000 35345b1b 2020206d     [0m......[45m   
   1af00:	4f525245 305b1b52 6d34393b 3a73253a     ERROR.[0;94m:%s:
   1af10:	3b305b1b 256d3239 5b1b3a73 33393b30     .[0;92m%s:.[0;93
   1af20:	3e64256d 305b1b20 6d37333b 6c696146     m%d> .[0;37mFail
   1af30:	74206465 6e69206f 61697469 53206574     ed to initiate S
   1af40:	6d204950 2065646f 68746977 74206e69     PI mode within t
   1af50:	6f656d69 202e7475 726f6241 676e6974     imeout. Aborting
   1af60:	305b1b21 00000a6d 35345b1b 2020206d     !.[0m....[45m   
   1af70:	4f525245 305b1b52 6d34393b 3a73253a     ERROR.[0;94m:%s:
   1af80:	3b305b1b 256d3239 5b1b3a73 33393b30     .[0;92m%s:.[0;93
   1af90:	3e64256d 305b1b20 6d37333b 70736552     m%d> .[0;37mResp
   1afa0:	65736e6f 746e6920 69726765 63207974     onse integrity c
   1afb0:	6b636568 69616620 2e64656c 6f624120     heck failed. Abo
   1afc0:	6e697472 5b1b2167 000a6d30 35345b1b     rting!.[0m...[45
   1afd0:	2020206d 4f525245 305b1b52 6d34393b     m   ERROR.[0;94m
   1afe0:	3a73253a 3b305b1b 256d3239 5b1b3a73     :%s:.[0;92m%s:.[
   1aff0:	33393b30 3e64256d 305b1b20 6d37333b     0;93m%d> .[0;37m
   1b000:	75736e55 726f7070 20646574 746c6f76     Unsupported volt
   1b010:	20656761 75206e69 202e6573 726f6241     age in use. Abor
   1b020:	676e6974 305b1b21 00000a6d 35345b1b     ting!.[0m....[45
   1b030:	2020206d 4f525245 305b1b52 6d34393b     m   ERROR.[0;94m
   1b040:	3a73253a 3b305b1b 256d3239 5b1b3a73     :%s:.[0;92m%s:.[
   1b050:	33393b30 3e64256d 305b1b20 6d37333b     0;93m%d> .[0;37m
   1b060:	43204453 20647261 656d6974 756f2064     SD Card timed ou
   1b070:	41202e74 74726f62 21676e69 6d305b1b     t. Aborting!.[0m
   1b080:	0000000a 65757274 00000000 736c6166     ....true....fals
   1b090:	00000065 35345b1b 2020206d 4f525245     e....[45m   ERRO
   1b0a0:	305b1b52 6d34393b 3a73253a 3b305b1b     R.[0;94m:%s:.[0;
   1b0b0:	256d3239 5b1b3a73 33393b30 3e64256d     92m%s:.[0;93m%d>
   1b0c0:	305b1b20 6d37333b 6c696857 65522065      .[0;37mWhile Re
   1b0d0:	6e696461 6c422067 206b636f 20642523     ading Block #%d 
   1b0e0:	31435243 5b1b3a36 000a6d30 35345b1b     CRC16:.[0m...[45
   1b0f0:	2020206d 4f525245 305b1b52 6d34393b     m   ERROR.[0;94m
   1b100:	3a73253a 3b305b1b 256d3239 5b1b3a73     :%s:.[0;92m%s:.[
   1b110:	33393b30 3e64256d 305b1b20 6d37333b     0;93m%d> .[0;37m
   1b120:	65707845 64657463 78302720 58343025     Expected '0x%04X
   1b130:	305b1b27 00000a6d 35345b1b 2020206d     '.[0m....[45m   
   1b140:	4f525245 305b1b52 6d34393b 3a73253a     ERROR.[0;94m:%s:
   1b150:	3b305b1b 256d3239 5b1b3a73 33393b30     .[0;92m%s:.[0;93
   1b160:	3e64256d 305b1b20 6d37333b 20746f47     m%d> .[0;37mGot 
   1b170:	25783027 27583430 6d305b1b 0000000a     '0x%04X'.[0m....
   1b180:	35345b1b 2020206d 4f525245 305b1b52     .[45m   ERROR.[0
   1b190:	6d34393b 3a73253a 3b305b1b 256d3239     ;94m:%s:.[0;92m%
   1b1a0:	5b1b3a73 33393b30 3e64256d 305b1b20     s:.[0;93m%d> .[0
   1b1b0:	6d37333b 64616552 646d4320 73617720     ;37mRead Cmd was
   1b1c0:	746f6e20 6b636120 6c776f6e 65676465      not acknowledge
   1b1d0:	72702064 7265706f 1b21796c 0a6d305b     d properly!.[0m.
   1b1e0:	00000000 35345b1b 2020206d 4f525245     .....[45m   ERRO
   1b1f0:	305b1b52 6d34393b 3a73253a 3b305b1b     R.[0;94m:%s:.[0;
   1b200:	256d3239 5b1b3a73 33393b30 3e64256d     92m%s:.[0;93m%d>
   1b210:	305b1b20 6d37333b 61726150 6574656d      .[0;37mParamete
   1b220:	72452072 25203a72 305b1b73 00000a6d     r Err: %s.[0m...
   1b230:	35345b1b 2020206d 4f525245 305b1b52     .[45m   ERROR.[0
   1b240:	6d34393b 3a73253a 3b305b1b 256d3239     ;94m:%s:.[0;92m%
   1b250:	5b1b3a73 33393b30 3e64256d 305b1b20     s:.[0;93m%d> .[0
   1b260:	6d37333b 72646441 72724520 7325203a     ;37mAddr Err: %s
   1b270:	6d305b1b 0000000a 35345b1b 2020206d     .[0m.....[45m   
   1b280:	4f525245 305b1b52 6d34393b 3a73253a     ERROR.[0;94m:%s:
   1b290:	3b305b1b 256d3239 5b1b3a73 33393b30     .[0;92m%s:.[0;93
   1b2a0:	3e64256d 305b1b20 6d37333b 73617245     m%d> .[0;37mEras
   1b2b0:	65532065 72452071 25203a72 305b1b73     e Seq Err: %s.[0
   1b2c0:	00000a6d 35345b1b 2020206d 4f525245     m....[45m   ERRO
   1b2d0:	305b1b52 6d34393b 3a73253a 3b305b1b     R.[0;94m:%s:.[0;
   1b2e0:	256d3239 5b1b3a73 33393b30 3e64256d     92m%s:.[0;93m%d>
   1b2f0:	305b1b20 6d37333b 206d6f43 20435243      .[0;37mCom CRC 
   1b300:	3a727245 1b732520 0a6d305b 00000000     Err: %s.[0m.....
   1b310:	35345b1b 2020206d 4f525245 305b1b52     .[45m   ERROR.[0
   1b320:	6d34393b 3a73253a 3b305b1b 256d3239     ;94m:%s:.[0;92m%
   1b330:	5b1b3a73 33393b30 3e64256d 305b1b20     s:.[0;93m%d> .[0
   1b340:	6d37333b 656c6c49 206c6167 20646d43     ;37mIllegal Cmd 
   1b350:	3a727245 1b732520 0a6d305b 00000000     Err: %s.[0m.....
   1b360:	35345b1b 2020206d 4f525245 305b1b52     .[45m   ERROR.[0
   1b370:	6d34393b 3a73253a 3b305b1b 256d3239     ;94m:%s:.[0;92m%
   1b380:	5b1b3a73 33393b30 3e64256d 305b1b20     s:.[0;93m%d> .[0
   1b390:	6d37333b 73617245 65522065 3a746573     ;37mErase Reset:
   1b3a0:	1b732520 0a6d305b 00000000 35345b1b      %s.[0m......[45
   1b3b0:	2020206d 4f525245 305b1b52 6d34393b     m   ERROR.[0;94m
   1b3c0:	3a73253a 3b305b1b 256d3239 5b1b3a73     :%s:.[0;92m%s:.[
   1b3d0:	33393b30 3e64256d 305b1b20 6d37333b     0;93m%d> .[0;37m
   1b3e0:	49206e49 3a656c64 1b732520 0a6d305b     In Idle: %s.[0m.
   1b3f0:	00000000 35345b1b 2020206d 4f525245     .....[45m   ERRO
   1b400:	305b1b52 6d34393b 3a73253a 3b305b1b     R.[0;94m:%s:.[0;
   1b410:	256d3239 5b1b3a73 33393b30 3e64256d     92m%s:.[0;93m%d>
   1b420:	305b1b20 6d37333b 6c696146 74206465      .[0;37mFailed t
   1b430:	6573206f 74532074 20747261 72646441     o set Start Addr
   1b440:	21737365 6d305b1b 0000000a 35345b1b     ess!.[0m.....[45
   1b450:	2020206d 4f525245 305b1b52 6d34393b     m   ERROR.[0;94m
   1b460:	3a73253a 3b305b1b 256d3239 5b1b3a73     :%s:.[0;92m%s:.[
   1b470:	33393b30 3e64256d 305b1b20 6d37333b     0;93m%d> .[0;37m
   1b480:	6c696146 74206465 6573206f 6e452074     Failed to set En
   1b490:	64412064 73657264 5b1b2173 000a6d30     d Address!.[0m..
   1b4a0:	35345b1b 2020206d 4f525245 305b1b52     .[45m   ERROR.[0
   1b4b0:	6d34393b 3a73253a 3b305b1b 256d3239     ;94m:%s:.[0;92m%
   1b4c0:	5b1b3a73 33393b30 3e64256d 305b1b20     s:.[0;93m%d> .[0
   1b4d0:	6d37333b 6e6b6e55 206e776f 70736572     ;37mUnknown resp
   1b4e0:	65736e6f 70797420 41202e65 74726f62     onse type. Abort
   1b4f0:	21676e69 6d305b1b 0000000a 35345b1b     ing!.[0m.....[45
   1b500:	2020206d 4f525245 305b1b52 6d34393b     m   ERROR.[0;94m
   1b510:	3a73253a 3b305b1b 256d3239 5b1b3a73     :%s:.[0;92m%s:.[
   1b520:	33393b30 3e64256d 305b1b20 6d37333b     0;93m%d> .[0;37m
   1b530:	70736552 65736e6f 736e7520 6f707075     Response unsuppo
   1b540:	64657472 206e6920 20495053 65646f6d     rted in SPI mode
   1b550:	6241202e 6974726f 1b21676e 0a6d305b     . Aborting!.[0m.
   1b560:	ffffff00                                ....

0001b564 <Sd::kCrcTable8>:
   1b564:	1b120900 3f362d24 535a4148 777e656c     ....$-6?HAZSle~w
   1b574:	020b1019 262f343d 4a435851 6e677c75     ....=4/&QXCJu|gn
   1b584:	29203b32 0d041f16 6168737a 454c575e     2; )....zsha^WLE
   1b594:	3039222b 141d060f 78716a63 5c554e47     +"90....cjqxGNU\
   1b5a4:	7f766d64 5b524940 373e252c 131a0108     dmv.@IR[,%>7....
   1b5b4:	666f747d 424b5059 2e273c35 0a031811     }tofYPKB5<'.....
   1b5c4:	4d445f56 69607b72 050c171e 2128333a     V_DMr{`i....:3(!
   1b5d4:	545d464f 7079626b 1c150e07 38312a23     OF]Tkbyp....#*18
   1b5e4:	5a534841 7e776c65 121b0009 363f242d     AHSZelw~....-$?6
   1b5f4:	434a5158 676e757c 0b021910 2f263d34     XQJC|ung....4=&/
   1b604:	68617a73 4c455e57 2029323b 040d161f     szahW^EL;2) ....
   1b614:	7178636a 555c474e 39302b22 1d140f06     jcxqNG\U"+09....
   1b624:	3e372c25 1a130801 767f646d 525b4049     %,7>....md.vI@[R
   1b634:	272e353c 030a1118 6f667d74 4b425950     <5.'....t}foPYBK
   1b644:	0c051e17 28213a33 444d565f 6069727b     ....3:!(_VMD{ri`
   1b654:	151c070e 3138232a 5d544f46 00706b62     ....*#81FOT]bkp.

0001b664 <Sd::kCrcTable16>:
   1b664:	10210000 30632042 50a54084 70e760c6     ..!.B c0.@.P.`.p
   1b674:	91298108 b16ba14a d1adc18c f1efe1ce     ..).J.k.........
   1b684:	02101231 22523273 429452b5 62d672f7     1...s2R".R.B.r.b
   1b694:	83189339 a35ab37b c39cd3bd e3def3ff     9...{.Z.........
   1b6a4:	34432462 14010420 74c764e6 548544a4     b$C4 ....d.t.D.T
   1b6b4:	b54ba56a 95098528 f5cfe5ee d58dc5ac     j.K.(...........
   1b6c4:	26723653 06301611 66f676d7 46b45695     S6r&..0..v.f.V.F
   1b6d4:	a77ab75b 87389719 e7fef7df c7bcd79d     [.z...8.........
   1b6e4:	58e548c4 78a76886 18610840 38232802     .H.X.h.x@.a..(#8
   1b6f4:	d9edc9cc f9afe98e 99698948 b92ba90a     ........H.i...+.
   1b704:	4ad45af5 6a967ab7 0a501a71 2a123a33     .Z.J.z.jq.P.3:.*
   1b714:	cbdcdbfd eb9efbbf 8b589b79 ab1abb3b     ........y.X.;...
   1b724:	7c876ca6 5cc54ce4 3c032c22 1c410c60     .l.|.L.\",.<`.A.
   1b734:	fd8fedae ddcdcdec bd0bad2a 9d498d68     ........*...h.I.
   1b744:	6eb67e97 4ef45ed5 2e323e13 0e701e51     .~.n.^.N.>2.Q.p.
   1b754:	efbeff9f cffcdfdd af3abf1b 8f789f59     ..........:.Y.x.
   1b764:	81a99188 a1ebb1ca c12dd10c e16ff14e     ..........-.N.o.
   1b774:	00a11080 20e330c2 40255004 60677046     .....0. .P%@Fpg`
   1b784:	939883b9 b3daa3fb d31cc33d f35ee37f     ........=.....^.
   1b794:	129002b1 32d222f3 52144235 72566277     .....".25B.RwbVr
   1b7a4:	a5cbb5ea 858995a8 e54ff56e c50dd52c     ........n.O.,...
   1b7b4:	24c334e2 048114a0 64477466 44055424     .4.$....ftGd$T.D
   1b7c4:	b7faa7db 97b88799 f77ee75f d73cc71d     ........_.~...<.
   1b7d4:	36f226d3 16b00691 76766657 56344615     .&.6....Wfvv.F4V
   1b7e4:	c96dd94c e92ff90e 89e999c8 a9abb98a     L.m.../.........
   1b7f4:	48655844 68277806 08e118c0 28a33882     DXeH.x'h.....8.(
   1b804:	db5ccb7d fb1eeb3f 9bd88bf9 bb9aabbb     }.\.?...........
   1b814:	5a544a75 7a166a37 1ad00af1 3a922ab3     uJTZ7j.z.....*.:
   1b824:	ed0ffd2e cd4ddd6c ad8bbdaa 8dc99de8     ....l.M.........
   1b834:	6c077c26 4c455c64 2c833ca2 0cc11ce0     &|.ld\EL.<.,....
   1b844:	ff3eef1f df7ccf5d bfbaaf9b 9ff88fd9     ..>.].|.........
   1b854:	7e366e17 5e744e55 3eb22e93 1ef00ed1     .n6~UNt^...>....

0001b864 <Sd::Mount(SdInterface::CardInfo_t*)::file>:
   1b864:	682e6473 ff007070                       sd.hpp..

0001b86c <Sd::Mount(SdInterface::CardInfo_t*)::file>:
   1b86c:	682e6473 ff007070                       sd.hpp..

0001b874 <Sd::Mount(SdInterface::CardInfo_t*)::file>:
   1b874:	682e6473 ff007070                       sd.hpp..

0001b87c <Sd::Mount(SdInterface::CardInfo_t*)::file>:
   1b87c:	682e6473 ff007070                       sd.hpp..

0001b884 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file>:
   1b884:	682e6473 ff007070                       sd.hpp..

0001b88c <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file>:
   1b88c:	682e6473 ff007070                       sd.hpp..

0001b894 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file>:
   1b894:	682e6473 ff007070                       sd.hpp..

0001b89c <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file>:
   1b89c:	682e6473 ff007070                       sd.hpp..

0001b8a4 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file>:
   1b8a4:	682e6473 ff007070                       sd.hpp..

0001b8ac <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file>:
   1b8ac:	682e6473 ff007070                       sd.hpp..

0001b8b4 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file>:
   1b8b4:	682e6473 ff007070                       sd.hpp..

0001b8bc <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file>:
   1b8bc:	682e6473 ff007070                       sd.hpp..

0001b8c4 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file>:
   1b8c4:	682e6473 ff007070                       sd.hpp..

0001b8cc <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file>:
   1b8cc:	682e6473 ff007070                       sd.hpp..

0001b8d4 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file>:
   1b8d4:	682e6473 ff007070                       sd.hpp..

0001b8dc <Sd::DeleteBlock(unsigned long, unsigned long)::file>:
   1b8dc:	682e6473 ff007070                       sd.hpp..

0001b8e4 <Sd::DeleteBlock(unsigned long, unsigned long)::file>:
   1b8e4:	682e6473 ff007070                       sd.hpp..

0001b8ec <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)::file>:
   1b8ec:	682e6473 ff007070                       sd.hpp..

0001b8f4 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)::file>:
   1b8f4:	682e6473 ff007070                       sd.hpp..

0001b8fc <vtable for Sd>:
	...
   1b904:	00018685 00017add 00017b8d 00017fa1     .....z...{......
   1b914:	000183b9 00018565 00018b25 00018b6d     ....e...%...m...
   1b924:	00018bdd                                ....

0001b928 <vtable for SdInterface>:
	...
   1b930:	00018d51 00018d51 00018d51 00018d51     Q...Q...Q...Q...
   1b940:	00018d51 00018d51 00018d51 00018d51     Q...Q...Q...Q...
   1b950:	00018d51                                Q...

0001b954 <Sd::Mount(SdInterface::CardInfo_t*)::__PRETTY_FUNCTION__>:
   1b954:	74726976 206c6175 6c6f6f62 3a645320     virtual bool Sd:
   1b964:	756f4d3a 5328746e 746e4964 61667265     :Mount(SdInterfa
   1b974:	3a3a6563 64726143 6f666e49 292a745f     ce::CardInfo_t*)
   1b984:	ffffff00                                ....

0001b988 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::__PRETTY_FUNCTION__>:
   1b988:	74726976 206c6175 746e6975 20745f38     virtual uint8_t 
   1b998:	3a3a6453 64616552 636f6c42 6975286b     Sd::ReadBlock(ui
   1b9a8:	3233746e 202c745f 746e6975 2a745f38     nt32_t, uint8_t*
   1b9b8:	6975202c 3233746e 0029745f              , uint32_t).

0001b9c4 <Sd::DeleteBlock(unsigned long, unsigned long)::__PRETTY_FUNCTION__>:
   1b9c4:	74726976 206c6175 746e6975 20745f38     virtual uint8_t 
   1b9d4:	3a3a6453 656c6544 6c426574 286b636f     Sd::DeleteBlock(
   1b9e4:	746e6975 745f3233 6975202c 3233746e     uint32_t, uint32
   1b9f4:	0029745f                                _t).

0001b9f8 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)::__PRETTY_FUNCTION__>:
   1b9f8:	74726976 206c6175 746e6975 745f3233     virtual uint32_t
   1ba08:	3a645320 6e65533a 646d4364 49645328      Sd::SendCmd(SdI
   1ba18:	7265746e 65636166 6f433a3a 6e616d6d     nterface::Comman
   1ba28:	75202c64 33746e69 2c745f32 6e697520     d, uint32_t, uin
   1ba38:	745f3874 75202c2a 33746e69 2c745f32     t8_t*, uint32_t,
   1ba48:	49645320 7265746e 65636166 654b3a3a      SdInterface::Ke
   1ba58:	6c417065 29657669 ffffff00              epAlive)....

0001ba64 <__sf_fake_stderr>:
	...

0001ba84 <__sf_fake_stdin>:
	...

0001baa4 <__sf_fake_stdout>:
	...
