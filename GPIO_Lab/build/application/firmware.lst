
build/application/firmware.elf:     file format elf32-littlearm
build/application/firmware.elf
architecture: arm, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x0001281d

Program Header:
0x70000001 off    0x000197a8 vaddr 0x000197a8 paddr 0x000197a8 align 2**2
         filesz 0x00000008 memsz 0x00000008 flags r--
    LOAD off    0x00010000 vaddr 0x00010000 paddr 0x00010000 align 2**16
         filesz 0x000097b0 memsz 0x000097b0 flags r-x
    LOAD off    0x00020000 vaddr 0x10000000 paddr 0x000197b0 align 2**16
         filesz 0x0000023c memsz 0x0000023c flags rw-
    LOAD off    0x00020240 vaddr 0x10000240 paddr 0x10000240 align 2**16
         filesz 0x00000000 memsz 0x0000038c flags rw-
private flags = 5000400: [Version5 EABI] [hard-float ABI]

Sections:
Idx Name             Size      VMA       LMA       File off  Algn  Flags
  0 .text            000097a8  00010000  00010000  00010000  2**4  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data            0000023c  10000000  000197b0  00020000  2**2  CONTENTS, ALLOC, LOAD, DATA
  2 .data_RAM2       00000000  20000000  20000000  0002023c  2**2  CONTENTS
  3 .bss             0000038c  10000240  10000240  00020240  2**3  ALLOC
  4 .ARM.exidx       00000008  000197a8  000197a8  000197a8  2**2  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .uninit_RESERVED 00000000  10000000  10000000  0002023c  2**2  CONTENTS
  6 .noinit_RAM2     00000000  20000000  20000000  0002023c  2**2  CONTENTS
  7 .noinit          00000000  100005cc  100005cc  0002023c  2**2  CONTENTS
  8 .ARM.attributes  00000030  00000000  00000000  0002023c  2**0  CONTENTS, READONLY
  9 .comment         0000007e  00000000  00000000  0002026c  2**0  CONTENTS, READONLY
 10 .debug_info      0003c5eb  00000000  00000000  000202ea  2**0  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev    0000429e  00000000  00000000  0005c8d5  2**0  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges   00000cc0  00000000  00000000  00060b73  2**0  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges    00000c30  00000000  00000000  00061833  2**0  CONTENTS, READONLY, DEBUGGING
 14 .debug_line      00006695  00000000  00000000  00062463  2**0  CONTENTS, READONLY, DEBUGGING
 15 .debug_str       0001950b  00000000  00000000  00068af8  2**0  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame     000031fc  00000000  00000000  00082004  2**2  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
00010000 l    d  .text	00000000 .text
10000000 l    d  .data	00000000 .data
20000000 l    d  .data_RAM2	00000000 .data_RAM2
10000240 l    d  .bss	00000000 .bss
000197a8 l    d  .ARM.exidx	00000000 .ARM.exidx
10000000 l    d  .uninit_RESERVED	00000000 .uninit_RESERVED
20000000 l    d  .noinit_RAM2	00000000 .noinit_RAM2
100005cc l    d  .noinit	00000000 .noinit
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 interrupt.cpp
00012df8 l     F .text	0000002c NVIC_EnableIRQ
00012e24 l     F .text	00000054 NVIC_SetPriority
00010000 l     O .text	000000e4 kInterruptVectorTable
00018350 l     O .text	0000000e InterruptLookupHandler::file
00018360 l     O .text	0000001e InterruptLookupHandler::__PRETTY_FUNCTION__
0001022c l       .text	00000000 handler2_address_const
00000000 l    df *ABS*	00000000 startup.cpp
00017f64 l     O .text	00000049 Lpc40xxSystemController::SetPeripheralClockDivider(unsigned char)::__PRETTY_FUNCTION__
0001800c l     O .text	0000005c Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)::__PRETTY_FUNCTION__
00017fb0 l     O .text	0000005a Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)::__PRETTY_FUNCTION__
00018068 l     O .text	0000003a Lpc40xxSystemController::SetCpuClockDivider(unsigned char)::__PRETTY_FUNCTION__
000180a4 l     O .text	0000003e Timer::Initialize(unsigned long, void (*)(), long)::__PRETTY_FUNCTION__
10000088 l     O .data	00000008 (anonymous namespace)::system_timer
10000090 l     O .data	00000004 (anonymous namespace)::system_controller
10000094 l     O .data	0000000c (anonymous namespace)::timer0
000126c4 l     F .text	00000040 (anonymous namespace)::Lpc40xxUptime()
00017e4c l     O .text	0000000c LowLevelInit()::file
000180e4 l     O .text	00000014 LowLevelInit()::__PRETTY_FUNCTION__
000102fc l     O .text	00000004 kCrpWord
00012d0c l     F .text	000000dc __static_initialization_and_destruction_0(int, int)
00012de8 l     F .text	0000000e _GLOBAL__sub_I_UptimeRTOS
00000000 l    df *ABS*	00000000 /mnt/c/SJSU_Dev2/SJSU-Dev2/tools/gcc-arm-none-eabi-7-2017-q4-major/bin/../lib/gcc/arm-none-eabi/7.2.1/thumb/v7e-m/fpv4-sp/hard/crti.o
00000000 l    df *ABS*	00000000 /mnt/c/SJSU_Dev2/SJSU-Dev2/tools/gcc-arm-none-eabi-7-2017-q4-major/bin/../lib/gcc/arm-none-eabi/7.2.1/thumb/v7e-m/fpv4-sp/hard/crtn.o
00000000 l    df *ABS*	00000000 crtstuff.c
00010328 l     F .text	00000000 __do_global_dtors_aux
10000240 l       .bss	00000001 completed.9929
0001034c l     F .text	00000000 frame_dummy
10000244 l       .bss	00000018 object.9934
0001030c l     O .text	00000000 __frame_dummy_init_array_entry
00000000 l    df *ABS*	00000000 main.cpp
10000260 l     O .bss	00000008 (anonymous namespace)::uptime
00010858 l     F .text	00000030 (anonymous namespace)::DefaultUptime()
000175e4 l     O .text	00000009 main::file
000175f0 l     O .text	00000009 main::file
000175fc l     O .text	00000009 main::file
00017608 l     O .text	00000009 main::file
000177d0 l     O .text	0000000b main::__PRETTY_FUNCTION__
00010c18 l     F .text	000000a8 __static_initialization_and_destruction_0(int, int)
00010cc0 l     F .text	00000028 _GLOBAL__sub_I_button3
00000000 l    df *ABS*	00000000 diskio.cpp
000195e0 l     O .text	0000001c Gpio::ValidPortCheck()::__PRETTY_FUNCTION__
000195fc l     O .text	00000039 Gpio::SetInterruptEdge(GpioInterface::Edge)::__PRETTY_FUNCTION__
000195a4 l     O .text	0000003b Gpio::ClearInterruptEdge(GpioInterface::Edge)::__PRETTY_FUNCTION__
00019638 l     O .text	00000031 Sd::Mount(SdInterface::CardInfo_t*)::__PRETTY_FUNCTION__
0001966c l     O .text	0000003c Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::__PRETTY_FUNCTION__
000196a8 l     O .text	00000034 Sd::DeleteBlock(unsigned long, unsigned long)::__PRETTY_FUNCTION__
000196dc l     O .text	00000069 Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)::__PRETTY_FUNCTION__
10000560 l     O .bss	00000068 (anonymous namespace)::sd_card
00017050 l     F .text	00000050 __static_initialization_and_destruction_0(int, int)
000170a0 l     F .text	00000028 _GLOBAL__sub_I_disk_status
00000000 l    df *ABS*	00000000 LabGPIO.cpp
00000000 l    df *ABS*	00000000 newlib.cpp
00000000 l    df *ABS*	00000000 tasks.c
100003e8 l     O .bss	00000064 pxReadyTasksLists
1000044c l     O .bss	00000004 uxTopReadyPriority
10000450 l     O .bss	00000004 xYieldPending
10000454 l     O .bss	00000004 uxSchedulerSuspended
10000458 l     O .bss	00000004 ulTaskSwitchedInTime
1000045c l     O .bss	00000004 ulTotalRunTime
00000000 l    df *ABS*	00000000 port.c
000132c0 l       .text	00000000 pxCurrentTCBConst2
00013330 l       .text	00000000 pxCurrentTCBConst
00000000 l    df *ABS*	00000000 printf.cpp
00013338 l     F .text	00000030 _out_null(char, void*, unsigned int, unsigned int)
00013368 l     F .text	00000044 _out_char(char, void*, unsigned int, unsigned int)
000133ac l     F .text	00000044 _strlen(char const*)
000133f0 l     F .text	00000044 _is_digit(char)
00013434 l     F .text	00000060 _atoi(char const**)
00013494 l     F .text	0000025c _ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)
000136f0 l     F .text	000000e4 _ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)
000137d4 l     F .text	000000f4 _ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)
00018380 l     O .text	00000028 _ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)::pow10
000138c8 l     F .text	00000438 _ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)
00013d00 l     F .text	000008f4 _vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)
00000000 l    df *ABS*	00000000 pure.cc
00000000 l    df *ABS*	00000000 eh_terminate.cc
00000000 l    df *ABS*	00000000 sf_round.c
00000000 l    df *ABS*	00000000 _arm_truncdfsf2.o
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 abort.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 signal.c
00000000 l    df *ABS*	00000000 signalr.c
00000000 l    df *ABS*	00000000 findfp.c
00000000 l    df *ABS*	00000000 eh_term_handler.cc
00000000 l    df *ABS*	00000000 impure.c
100001dc l     O .data	00000060 impure_data
00000000 l    df *ABS*	00000000 reent.c
00010f2c  w    F .text	0000003e Lpc40xxSystemController::GetPeripheralFrequency() const
0001309c g     F .text	00000038 putchar
00012e78  w    F .text	0000006c Pwm0IrqHandler
00018fe0  w    O .text	00000009 Gpio::SetInterruptEdge(GpioInterface::Edge)::file
00010218 g     F .text	0000001c HardFaultHandler
0001300c g     F .text	00000024 _getpid
00013060 g     F .text	0000003c _putchar
00012e78  w    F .text	0000006c EepromIrqHandler
00012e78  w    F .text	0000006c Timer2IrqHandler
10000074  w    O .data	00000014 uart0
000131a0 g     F .text	0000002c GetStackDepth()
00019350  w    O .text	00000007 Sd::Mount(SdInterface::CardInfo_t*)::file
00015040  w    F .text	00000024 Lpc40xxSystemController::Lpc40xxSystemController()
00017e14  w    O .text	00000004 Timer::kTimerIrq
00019388  w    O .text	00000007 Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file
000175bc g     F .text	00000024 _kill_r
0001010c g       .text	00000000 bss_section_table_end
000145f4 g     F .text	0000004c printf
1000000c  w    O .data	00000004 SystemTimer::sys_tick
00012e78  w    F .text	0000006c I2c1IrqHandler
000128c4  w    F .text	0000003c void Timer::TimerHandler<(TimerInterface::TimerPort)2>()
10000024  w    O .data	00000010 Uart::uart
000193b8  w    O .text	00000007 Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file
00010000 g       *ABS*	00000000 __vectors_start__
00010888  w    F .text	00000044 Milliseconds()
00011090  w    F .text	00000110 Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)
00015090  w    F .text	00000034 SspInterface::SspInterface()
00012e78  w    F .text	0000006c BusFaultHandler
100002e0 g     O .bss	00000100 stack_trace
10000010  w    O .data	00000004 Pin::pin_map
00011f10  w    F .text	000000e4 Uart::Initialize(unsigned long)
20000000 g       *ABS*	00000000 __base_RAM2
000197b0 g       .ARM.exidx	00000000 __exidx_end
00014f30  w    F .text	0000007c Gpio::ClearEdgeRising()
00011378  w    F .text	00000030 Lpc40xxSystemController::SetEmcClockDivider(Lpc40xxSystemController::EmcDivider)
00018fd4  w    O .text	00000009 Gpio::ValidPortCheck()::file
100003e4 g     O .bss	00000004 pxCurrentTCB
00014640  w    F .text	00000034 PinInterface::PinInterface()
0001315c g     F .text	0000001c __cyg_profile_func_exit
00016ce0  w    F .text	00000048 Sd::Crc7Add(unsigned char, unsigned char)
00015bf8  w    F .text	000000a0 Sd::Sd(Sd::DebugSdCard_t, unsigned char, unsigned char, unsigned char, unsigned char)
00012b2c  w    F .text	000000a0 void Timer::ClearInterrupts<(TimerInterface::TimerPort)1>()
100005c8 g     O .bss	00000004 errno
000197b0 g       .ARM.exidx	00000000 _etext
10000004  w    O .data	00000004 Lpc40xxSystemController::system_controller
00010e18  w    F .text	00000090 Lpc40xxSystemController::SetClockFrequency(unsigned char)
00011ce0  w    F .text	00000030 unsigned char util::Value<TimerInterface::MatchControlRegister, unsigned char>(TimerInterface::MatchControlRegister)
00010f18  w    F .text	00000014 Lpc40xxSystemController::GetSystemFrequency() const
000124d4  w    F .text	000001f0 Uart::GenerateUartCalibration(float)
10000188  w    O .data	00000018 Gpio::gpio_port
00011d10  w    F .text	000000f8 Timer::SetTimer(unsigned long, TimerInterface::TimerIsrCondition, TimerInterface::MatchControlRegister)
00012744  w    F .text	000000bc LowLevelInit()
00012e78  w    F .text	0000006c LcdIrqHandler
000193e0  w    O .text	00000007 Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)::file
00080000 g       *ABS*	00000000 __top_MFlash512
00015390  w    F .text	0000006c Ssp::Transfer(unsigned short)
00012174  w    F .text	000000f8 Uart::Receive(unsigned long)
00011030  w    F .text	00000030 Lpc40xxSystemController::SelectUsbClockSource(Lpc40xxSystemController::UsbSource)
000109e8  w    F .text	00000030 Delay(unsigned long long)
00017e3c  w    O .text	00000010 Uart::kPowerbit
00012e78  w    F .text	0000006c I2c2IrqHandler
10000288  w    O .bss	00000004 SystemTimer::system_timer_isr
00014df8  w    F .text	00000040 Gpio::DetachInterrupt()
00012e78  w    F .text	0000006c CanIrqHandler
00011a2c  w    F .text	00000074 Pin::EnableDac(bool)
00010550 g     F .text	00000124 LabGPIO::ReadBool()
0001175c  w    F .text	0000007c Pin::SetAsAnalogMode(bool)
00011310  w    F .text	00000068 Lpc40xxSystemController::SetCpuClockDivider(unsigned char)
00016d98  w    F .text	000000fc Sd::GetCrc16(unsigned char*, unsigned short)
000171f4 g     F .text	00000000 .hidden __aeabi_uldivmod
100005cc g       .noinit	00000000 _noinit
000130d4 g     F .text	00000060 puts
100000a0 g     O .data	000000e4 dynamic_isr_vector_table
00014b18  w    F .text	0000002c Gpio::GetPin()
00014bc0  w    F .text	0000005c Gpio::SetInterruptRoutine(void (*)())
000146cc  w    F .text	00000034 GpioInterface::GpioInterface()
00015090  w    F .text	00000034 SspInterface::SspInterface()
00012e78  w    F .text	0000006c RitIrqHandler
00012e78  w    F .text	0000006c Uart2IrqHandler
00011aa0  w    F .text	00000064 Pin::BitPlace(unsigned long, unsigned long, unsigned long, unsigned long)
00017dec  w    O .text	00000016 Lpc40xxSystemController::SetCpuClockDivider(unsigned char)::file
00019370  w    O .text	00000007 Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file
000156f4  w    F .text	00000160 Ssp::GetPeripheralMode()
00012bcc  w    F .text	000000a0 void Timer::ClearInterrupts<(TimerInterface::TimerPort)2>()
000170f4 g     F .text	00000060 roundf
0001755c g     F .text	00000050 _raise_r
000108f8  w    F .text	0000002c Wait(unsigned long long)::{lambda()#1}::_FUN()
00015064  w    F .text	0000002c int util::Value<Ssp::Peripheral, int>(Ssp::Peripheral)
000150c4  w    F .text	00000038 PinInterface::PinInterface(PinInterface const&)
10010000 g       *ABS*	00000000 __top_RAM
00017e38  w    O .text	00000004 Uart::kRxUartPortFunction
000132d0 g     F .text	00000066 xPortPendSVHandler
00010924  w    F .text	000000c4 Wait(unsigned long long)
00015bc4  w    F .text	00000034 SdInterface::SdInterface()
00011e08  w    F .text	0000003c Timer::GetTimer()
10000000 g       *ABS*	00000000 __base_RamLoc64
00013178 g     F .text	00000028 GetStackTrace()
10000184 g     O .data	00000004 out
10000008  w    O .data	00000004 Lpc40xxSystemController::speed_in_hertz
000193c0  w    O .text	00000007 Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file
000193a8  w    O .text	00000007 Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file
000175e0 g     F .text	00000004 _getpid_r
00000000 g       *ABS*	00000000 __base_MFlash512
00019440  w    O .text	0000004c vtable for Ssp
10010000 g       *ABS*	00000000 StackTop
000160a8  w    F .text	00000064 Sd::WaitToReadBlock()
00018ff8  w    O .text	00000003 Ssp::kPinSelect
00017224 g     F .text	000002cc .hidden __udivmoddi4
00012e78  w    F .text	0000006c I2sIrqHandler
000100fc g       .text	00000000 bss_section_table
00010300 g       .text	00000000 __CRP_WORD_END__
20008000 g       *ABS*	00000000 __top_RAM2
0001281c g     F .text	00000030 ResetIsr
00016064  w    F .text	00000044 Sd::ToBool(bool)
0001948c  w    O .text	00000028 vtable for SspInterface
00012e78  w    F .text	0000006c PendSVHandler
00015458  w    F .text	00000030 unsigned char util::Value<SspInterface::DataSize, unsigned char>(SspInterface::DataSize)
00011418  w    F .text	00000034 SystemTimer::SetIsrFunction(void (*)())
00016ed0  w    F .text	00000044 bool bit::Read<unsigned long>(unsigned long, unsigned long)
00015318  w    F .text	00000078 Ssp::IsTransferRegBusy()
00012e78  w    F .text	0000006c UsageFaultHandler
20000000 g       *ABS*	00000000 __user_heap_base
1000027c g     O .bss	00000002 led1
000197a8 g       .text	00000000 __exidx_start
00011944  w    F .text	00000074 Pin::EnableI2cHighCurrentDrive(bool)
00012e78  w    F .text	0000006c Uart4IrqHandler
00014c1c  w    F .text	00000054 Gpio::ClearInterruptRoutine()
000118c8  w    F .text	0000007c Pin::EnableI2cHighSpeedMode(bool)
000101fc g     F .text	00000018 InitFpu()
000117d8  w    F .text	0000007c Pin::EnableDigitalFilter(bool)
00017504 g     F .text	00000048 __libc_init_array
00012e78 g     F .text	0000006c InterruptLookupHandler
00011060  w    F .text	00000030 Lpc40xxSystemController::SelectSpifiClockSource(Lpc40xxSystemController::SpifiSource)
00010f00  w    F .text	00000018 Lpc40xxSystemController::GetPeripheralClockDivider() const
10000000  w    O .data	00000004 Uptime
00019520  w    O .text	00000048 vtable for GpioInterface
00012040  w    F .text	000000e8 Uart::Send(unsigned char)
000174f4 g     F .text	0000000e abort
00012e78  w    F .text	0000006c BodIrqHandler
00015a40  w    F .text	00000184 Ssp::GetClock()
00010300 g     F .text	00000000 _init
0001010c g       .text	00000000 section_table_end
00012c6c  w    F .text	000000a0 void Timer::ClearInterrupts<(TimerInterface::TimerPort)3>()
000170e8 g     F .text	0000000a std::terminate()
00017154 g     F .text	0000009e .hidden __aeabi_d2f
00014fac  w    F .text	0000007c Gpio::ClearEdgeFalling()
00012e78  w    F .text	0000006c SysTickHandler
000100e4 g       .text	00000000 section_table_start
100005cc g       .bss	00000000 _ebss
00014eb4  w    F .text	0000007c Gpio::SetEdgeFalling()
00019380  w    O .text	00000007 Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file
00012e78  w    F .text	0000006c RtcIrqHandler
00014aa8  w    F .text	00000070 Gpio::Read()
0001293c  w    F .text	000000a8 Status Wait<Uart::Send(unsigned char)::{lambda()#1}>(unsigned long long, Uart::Send(unsigned char)::{lambda()#1})
eff81be6 g       *ABS*	00000000 ValidUserCodeChecksum
00012e78  w    F .text	0000006c Uart0IrqHandler
00012f40 g     F .text	00000078 GetRegistersFromStack
0001078c g     F .text	000000cc LabGPIO::setPulldown()
00016e94  w    F .text	0000003c unsigned long bit::Set<unsigned long>(unsigned long, unsigned long)
00019568  w    O .text	0000003c vtable for PinInterface
00012e78  w    F .text	0000006c UsbIrqHandler
00012e78  w    F .text	0000006c AdcIrqHandler
00012128  w    F .text	0000004c Uart::Receive(unsigned long)::{lambda()#1}::operator()() const
00010de8  w    F .text	00000030 SetUptimeFunction(unsigned long long (*)())
00010368 g     F .text	00000048 LabGPIO::LabGPIO(unsigned char, unsigned char)
00019748 g     O .text	00000020 __sf_fake_stderr
00019050  w    O .text	00000100 Sd::kCrcTable8
000170d8 g     F .text	00000010 std::get_terminate()
000123dc  w    F .text	00000074 Uart::FractionalEstimate(float, float)
00014ca0  w    F .text	00000088 Gpio::SetInterruptEdge(GpioInterface::Edge)
00012e78  w    F .text	0000006c EnetIrqHandler
00012e78  w    F .text	0000006c DmaIrqHandler
0001010c g     F .text	00000090 InitDataSection()
00012ee4 g     F .text	0000005c RegisterIsr(IRQn, void (*)(), bool, long)
00000000 g       *ABS*	00000000 __base_Flash
00012e78  w    F .text	0000006c Eint1IrqHandler
100001c8  w    O .data	0000000c Ssp::ssp_registers
00012e78  w    F .text	0000006c SvcHandler
00012e78  w    F .text	0000006c GpioIrqHandler
000193d0  w    O .text	00000007 Sd::DeleteBlock(unsigned long, unsigned long)::file
00012e78  w    F .text	0000006c SdioIrqHandler
10010000 g       *ABS*	00000000 __top_RamLoc64
10000240 g       .bss	00000000 _bss
00019368  w    O .text	00000007 Sd::Mount(SdInterface::CardInfo_t*)::file
00012e78  w    F .text	0000006c Pll1IrqHandler
00012e78  w    F .text	0000006c MemManageHandler
000170c8 g     F .text	00000006 __cxa_pure_virtual
00012e78  w    F .text	0000006c Pwm1IrqHandler
00014c70  w    F .text	00000030 unsigned char util::Value<GpioInterface::Edge, unsigned char>(GpioInterface::Edge)
00012e78  w    F .text	0000006c Timer0IrqHandler
000129e4  w    F .text	000000a8 Status Wait<Uart::Receive(unsigned long)::{lambda()#1}>(unsigned long long, Uart::Receive(unsigned long)::{lambda()#1})
00080000 g       *ABS*	00000000 __top_Flash
00012450  w    F .text	00000084 Uart::IsDecmial(float)
00015854  w    F .text	000001ec Ssp::SetClock(bool, bool, unsigned char, unsigned char)
100005cc g       .noinit	00000000 _end_noinit
000113a8  w    F .text	0000003c SystemTimer::DisableTimer()
00016720  w    F .text	00000120 Sd::DeleteBlock(unsigned long, unsigned long)
000131cc g     F .text	000000c8 vTaskSwitchContext
00016f88  w    F .text	00000054 unsigned long bit::Extract<unsigned long>(unsigned long, unsigned long, unsigned long)
00014674  w    F .text	00000058 Pin::Pin(unsigned char, unsigned char)
000154b8  w    F .text	00000030 unsigned char util::Value<SspInterface::MasterSlaveMode, unsigned char>(SspInterface::MasterSlaveMode)
00019390  w    O .text	00000007 Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file
00017e34  w    O .text	00000004 Uart::kTxUartPortFunction
00012e78  w    F .text	0000006c Uart3IrqHandler
00015028  w    F .text	00000018 SystemControllerInterface::SystemControllerInterface()
000193c8  w    O .text	00000007 Sd::DeleteBlock(unsigned long, unsigned long)::file
20000000 g       *ABS*	00000000 __base_RamPeriph32
00018fec  w    O .text	00000009 Gpio::ClearInterruptEdge(GpioInterface::Edge)::file
100003e0 g     O .bss	00000004 stack_depth
000149c4  w    F .text	0000006c Gpio::Toggle()
000193a0  w    O .text	00000007 Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file
00019150  w    O .text	00000200 Sd::kCrcTable16
10000460  w    O .bss	00000100 Gpio::interrupthandlers
000174f0  w    F .text	00000002 .hidden __aeabi_ldiv0
00012e78  w    F .text	0000006c Timer1IrqHandler
00012368  w    F .text	00000074 Uart::DividerEstimate(float, float)
000148b8  w    F .text	00000064 Gpio::SetHigh()
10000270 g     O .bss	00000002 button2
0001226c  w    F .text	000000fc Uart::FindClosestFractional(float)
00015150  w    F .text	000000e4 Ssp::Ssp(Ssp::Peripheral)
000100e4 g       .text	00000000 data_section_table
000115f4  w    F .text	00000080 Pin::SetMode(PinInterface::Mode)
00017da4  w    O .text	00000016 Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)::file
0001610c  w    F .text	00000050 Sd::WaitWhileBusy()
000114e8  w    F .text	00000094 SystemTimer::SetTickFrequency(unsigned long)
00019768 g     O .text	00000020 __sf_fake_stdin
00016fdc  w    F .text	00000074 unsigned long bit::Insert<unsigned long, bool>(unsigned long, bool, unsigned long, unsigned long)
000102fc g       .text	00000000 __CRP_WORD_START__
00017e18  w    O .text	00000010 Timer::kTimerIsr
00014db0  w    F .text	00000048 Gpio::AttachInterrupt(void (*)(), GpioInterface::Edge)
00012e78  w    F .text	0000006c Uart1IrqHandler
0001477c  w    F .text	0000007c Gpio::SetAsInput()
00013134 g     F .text	00000028 __cyg_profile_func_enter
0001754c g     F .text	00000010 memset
00010a18 g     F .text	00000154 main
00015bf8  w    F .text	000000a0 Sd::Sd(Sd::DebugSdCard_t, unsigned char, unsigned char, unsigned char, unsigned char)
1000026c g     O .bss	00000002 led3
100001a0  w    O .data	00000028 Gpio::interrupt
10000284 g     O .bss	00000002 led0
00011b8c  w    F .text	00000020 Timer::DoNothingIsr()
00012e78  w    F .text	0000006c QeiIrqHandler
20000000 g       *ABS*	00000000 heap
00012e78  w    F .text	0000006c Ssp2IrqHandler
00011b04  w    F .text	0000002c Pin::GetPort() const
00016574  w    F .text	000001ac Sd::WriteBlock(unsigned long, unsigned char const*, unsigned long)
00014674  w    F .text	00000058 Pin::Pin(unsigned char, unsigned char)
00017154 g     F .text	0000009e .hidden __truncdfsf2
0001031c g       .text	00000000 __init_array_end
000132a0 g     F .text	00000026 vPortSVCHandler
00012fb8 g     F .text	0000003c FirmwareStdOut(int)
000193e8  w    O .text	0000002c vtable for Sd
00014d28  w    F .text	00000088 Gpio::ClearInterruptEdge(GpioInterface::Edge)
00012e78  w    F .text	0000006c Ssp1IrqHandler
0001284c  w    F .text	0000003c void Timer::TimerHandler<(TimerInterface::TimerPort)0>()
00019044  w    O .text	0000000c Ssp::kPowerBit
10000268 g     O .bss	00000002 button3
00011b30  w    F .text	0000002c Pin::GetPin() const
00011e44  w    F .text	000000cc Uart::SetBaudRate(unsigned long)
00014874  w    F .text	00000044 Gpio::SetDirection(GpioInterface::Direction)
00017e58  w    O .text	0000003c vtable for Uart
000147f8  w    F .text	0000007c Gpio::SetAsOutput()
000193b0  w    O .text	00000007 Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file
000111a0  w    F .text	00000170 Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)
0001491c  w    F .text	00000064 Gpio::SetLow()
00017f40  w    O .text	00000024 vtable for Lpc40xxSystemController
0001615c  w    F .text	00000418 Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)
000193d8  w    O .text	00000007 Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)::file
00017d8c  w    O .text	00000016 Lpc40xxSystemController::SetPeripheralClockDivider(unsigned char)::file
00012800 g     F .text	0000001a SystemInit
00011bac  w    F .text	00000134 Timer::Initialize(unsigned long, void (*)(), long)
00010f6c  w    F .text	00000030 Lpc40xxSystemController::PowerUpPeripheral(SystemControllerInterface::PeripheralID const&)
20008000 g       *ABS*	00000000 heap_end
00015234  w    F .text	000000e4 Ssp::Initialize()
00017e94  w    O .text	00000038 vtable for Timer
000150c4  w    F .text	00000038 PinInterface::PinInterface(PinInterface const&)
10000014  w    O .data	00000010 Timer::tim_register
00012e78  w    F .text	0000006c Ssp0IrqHandler
00010368 g     F .text	00000048 LabGPIO::LabGPIO(unsigned char, unsigned char)
0001031c g     F .text	00000000 _fini
00012e78  w    F .text	0000006c UsbactivityIrqHandler
00014980  w    F .text	00000044 Gpio::Set(GpioInterface::State)
00012e78  w    F .text	0000006c Pll0IrqHandler
000150fc  w    F .text	00000054 Pin::Pin(Pin const&)
000100fc g       .text	00000000 data_section_table_end
00012e78  w    F .text	0000006c CanactivityIrqHandler
00012e78  w    F .text	0000006c NmiHandler
00018ffc  w    O .text	00000048 Ssp::kSspPinMatrix
00014a30  w    F .text	00000078 Gpio::ReadState()
00019378  w    O .text	00000007 Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file
100001d8 g     O .data	00000004 _impure_ptr
00010b6c  w    F .text	000000ac Status Wait<Wait(unsigned long long)::{lambda()#1}>(unsigned long long, Wait(unsigned long long)::{lambda()#1})
10000000 g       .uninit_RESERVED	00000000 _end_uninit_RESERVED
00016d28  w    F .text	00000070 Sd::GetCrc7(unsigned char*, unsigned char)
00012e78  w    F .text	0000006c McpwmIrqHandler
0001030c g       .text	00000000 __preinit_array_end
00012e78  w    F .text	0000006c WdtIrqHandler
000108cc  w    F .text	0000002c Wait(unsigned long long)::{lambda()#1}::operator()() const
00016840  w    F .text	000004a0 Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)
00015040  w    F .text	00000024 Lpc40xxSystemController::Lpc40xxSystemController()
00017ecc  w    O .text	0000003c vtable for Pin
10000000 g       .data	00000000 _data
000116e8  w    F .text	00000074 Pin::SetAsActiveLow(bool)
00011000  w    F .text	00000030 Lpc40xxSystemController::SelectMainClockSource(Lpc40xxSystemController::MainClockSource)
00014e38  w    F .text	0000007c Gpio::SetEdgeRising()
00019358  w    O .text	00000007 Sd::Mount(SdInterface::CardInfo_t*)::file
00011b5c  w    F .text	00000030 unsigned char util::Value<TimerInterface::TimerPort, unsigned char>(TimerInterface::TimerPort)
100002cc  w    O .bss	00000010 Timer::user_timer_isr
00017dbc  w    O .text	00000016 Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)::file
1000028c  w    O .bss	00000040 Timer::match
00010480 g     F .text	000000d0 LabGPIO::SetLow()
00011ff4  w    F .text	0000004c Uart::Send(unsigned char)::{lambda()#1}::operator()() const
00015d48  w    F .text	0000031c Sd::Mount(SdInterface::CardInfo_t*)
100001d4 g     O .data	00000004 __cxxabiv1::__terminate_handler
10000278 g     O .bss	00000002 button1
000194b4  w    O .text	00000024 vtable for SystemControllerInterface
000194d8  w    O .text	00000048 vtable for Gpio
1000023c g       .data	00000000 _edata
00017e04  w    O .text	00000010 Timer::kPowerbit
00012888  w    F .text	0000003c void Timer::TimerHandler<(TimerInterface::TimerPort)1>()
00011674  w    F .text	00000074 Pin::EnableHysteresis(bool)
000146cc  w    F .text	00000034 GpioInterface::GpioInterface()
00010674 g     F .text	00000118 LabGPIO::toggle()
00012e78  w    F .text	0000006c DebugMonHandler
00014b44  w    F .text	0000007c Gpio::ValidPortCheck()
00012e78  w    F .text	0000006c Eint2IrqHandler
20008000 g       *ABS*	00000000 __top_RamPeriph32
00015150  w    F .text	000000e4 Ssp::Ssp(Ssp::Peripheral)
00012e78  w    F .text	0000006c Timer3IrqHandler
000103b0 g     F .text	000000d0 LabGPIO::SetHigh()
10000000 g       *ABS*	00000000 __base_RAM
00012e78  w    F .text	0000006c Eint3IrqHandler
000170ce g     F .text	00000008 __cxxabiv1::__terminate(void (*)())
00013030 g     F .text	00000030 _kill
00012e78  w    F .text	0000006c I2c0IrqHandler
000150fc  w    F .text	00000054 Pin::Pin(Pin const&)
00017e28  w    O .text	0000000a Timer::Initialize(unsigned long, void (*)(), long)::file
000113e4  w    F .text	00000034 SystemTimer::SystemTimerHandler()
00019360  w    O .text	00000007 Sd::Mount(SdInterface::CardInfo_t*)::file
00019788 g     O .text	00000020 __sf_fake_stdout
00010ce8  w    F .text	00000100 debug::PrintBacktrace(bool, void*)
0001030c g       .text	00000000 __init_array_start
000174f0  w    F .text	00000002 .hidden __aeabi_idiv0
00019414  w    O .text	0000002c vtable for SdInterface
00015c98  w    F .text	000000b0 Sd::Initialize()
00012ff4 g     F .text	00000018 _exit
00011854  w    F .text	00000074 Pin::EnableFastMode(bool)
00012a8c  w    F .text	000000a0 void Timer::ClearInterrupts<(TimerInterface::TimerPort)0>()
00012e78  w    F .text	0000006c Eint0IrqHandler
0001144c  w    F .text	0000009c SystemTimer::StartTimer()
00015488  w    F .text	00000030 unsigned char util::Value<SspInterface::FrameMode, unsigned char>(SspInterface::FrameMode)
0001019c g     F .text	00000060 InitBssSection()
00014700  w    F .text	0000007c Gpio::Gpio(unsigned char, unsigned char)
00012704 g     F .text	00000040 UptimeRTOS
000119b8  w    F .text	00000074 Pin::SetAsOpenDrain(bool)
00017f08  w    O .text	00000038 vtable for SystemTimer
00012e78  w    F .text	0000006c SpiIrqHandler
00019398  w    O .text	00000007 Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file
000153fc  w    F .text	0000005c Ssp::SetSpiMasterDefault()
10000034  w    O .data	00000040 Uart::pairs
00015028  w    F .text	00000018 SystemControllerInterface::SystemControllerInterface()
00010f9c  w    F .text	00000030 Lpc40xxSystemController::PowerDownPeripheral(SystemControllerInterface::PeripheralID const&)
00015bc4  w    F .text	00000034 SdInterface::SdInterface()
0001030c g       .text	00000000 __preinit_array_start
00017dd4  w    O .text	00000016 Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)::file
00010fcc  w    F .text	00000034 Lpc40xxSystemController::SelectOscillatorSource(Lpc40xxSystemController::OscillatorSource)
100002dc  w    O .bss	00000004 guard variable for Timer::match
000154e8  w    F .text	0000020c Ssp::SetPeripheralMode(SspInterface::MasterSlaveMode, SspInterface::FrameMode, SspInterface::DataSize)
0001157c  w    F .text	00000078 Pin::SetPinFunction(unsigned char)
10000274 g     O .bss	00000002 led2
00016f14  w    F .text	00000074 unsigned long bit::Insert<unsigned long, unsigned char>(unsigned long, unsigned char, unsigned long, unsigned long)
00014640  w    F .text	00000034 PinInterface::PinInterface()
10000280 g     O .bss	00000002 button0
00010ea8  w    F .text	00000058 Lpc40xxSystemController::SetPeripheralClockDivider(unsigned char)
00014700  w    F .text	0000007c Gpio::Gpio(unsigned char, unsigned char)
00012900  w    F .text	0000003c void Timer::TimerHandler<(TimerInterface::TimerPort)3>()
000175ac g     F .text	00000010 raise



Disassembly of section .text:

00010000 <kInterruptVectorTable>:
   10000:	00 00 01 10 1d 28 01 00 79 2e 01 00 19 02 01 00     .....(..y.......
   10010:	79 2e 01 00 79 2e 01 00 79 2e 01 00 e6 1b f8 ef     y...y...y.......
	...
   1002c:	a1 32 01 00 79 2e 01 00 00 00 00 00 d1 32 01 00     .2..y........2..
   1003c:	79 2e 01 00 79 2e 01 00 79 2e 01 00 79 2e 01 00     y...y...y...y...
   1004c:	79 2e 01 00 79 2e 01 00 79 2e 01 00 79 2e 01 00     y...y...y...y...
   1005c:	79 2e 01 00 79 2e 01 00 79 2e 01 00 79 2e 01 00     y...y...y...y...
   1006c:	79 2e 01 00 79 2e 01 00 00 00 00 00 79 2e 01 00     y...y.......y...
   1007c:	79 2e 01 00 79 2e 01 00 79 2e 01 00 79 2e 01 00     y...y...y...y...
   1008c:	79 2e 01 00 79 2e 01 00 79 2e 01 00 79 2e 01 00     y...y...y...y...
   1009c:	79 2e 01 00 79 2e 01 00 79 2e 01 00 79 2e 01 00     y...y...y...y...
   100ac:	79 2e 01 00 79 2e 01 00 79 2e 01 00 79 2e 01 00     y...y...y...y...
   100bc:	79 2e 01 00 79 2e 01 00 79 2e 01 00 79 2e 01 00     y...y...y...y...
   100cc:	79 2e 01 00 79 2e 01 00 79 2e 01 00 79 2e 01 00     y...y...y...y...
   100dc:	79 2e 01 00 79 2e 01 00                             y...y...

000100e4 <data_section_table>:
   100e4:	000197b0 	.word	0x000197b0
   100e8:	10000000 	.word	0x10000000
   100ec:	0000023c 	.word	0x0000023c
   100f0:	000197b0 	.word	0x000197b0
   100f4:	20000000 	.word	0x20000000
   100f8:	00000000 	.word	0x00000000

000100fc <bss_section_table>:
   100fc:	10000240 	.word	0x10000240
   10100:	0000038c 	.word	0x0000038c
   10104:	20000000 	.word	0x20000000
   10108:	00000000 	.word	0x00000000

0001010c <InitDataSection()>:
SJ2_IGNORE_STACK_TRACE(void SystemInit());

// Functions to carry out the initialization of RW and BSS data sections.
SJ2_SECTION(".after_vectors")
void InitDataSection()
{
   1010c:	b086      	sub	sp, #24
  for (int i = 0; &data_section_table[i] < &data_section_table_end; i++)
   1010e:	2300      	movs	r3, #0
   10110:	9305      	str	r3, [sp, #20]
   10112:	9a05      	ldr	r2, [sp, #20]
   10114:	4613      	mov	r3, r2
   10116:	005b      	lsls	r3, r3, #1
   10118:	4413      	add	r3, r2
   1011a:	009b      	lsls	r3, r3, #2
   1011c:	4a1d      	ldr	r2, [pc, #116]	; (10194 <InitDataSection()+0x88>)
   1011e:	4413      	add	r3, r2
   10120:	4a1d      	ldr	r2, [pc, #116]	; (10198 <InitDataSection()+0x8c>)
   10122:	4293      	cmp	r3, r2
   10124:	d233      	bcs.n	1018e <InitDataSection()+0x82>
  {
    uint32_t * rom_location = data_section_table[i].rom_location;
   10126:	491b      	ldr	r1, [pc, #108]	; (10194 <InitDataSection()+0x88>)
   10128:	9a05      	ldr	r2, [sp, #20]
   1012a:	4613      	mov	r3, r2
   1012c:	005b      	lsls	r3, r3, #1
   1012e:	4413      	add	r3, r2
   10130:	009b      	lsls	r3, r3, #2
   10132:	440b      	add	r3, r1
   10134:	681b      	ldr	r3, [r3, #0]
   10136:	9303      	str	r3, [sp, #12]
    uint32_t * ram_location = data_section_table[i].ram_location;
   10138:	4916      	ldr	r1, [pc, #88]	; (10194 <InitDataSection()+0x88>)
   1013a:	9a05      	ldr	r2, [sp, #20]
   1013c:	4613      	mov	r3, r2
   1013e:	005b      	lsls	r3, r3, #1
   10140:	4413      	add	r3, r2
   10142:	009b      	lsls	r3, r3, #2
   10144:	440b      	add	r3, r1
   10146:	685b      	ldr	r3, [r3, #4]
   10148:	9302      	str	r3, [sp, #8]
    uint32_t length         = data_section_table[i].length;
   1014a:	4912      	ldr	r1, [pc, #72]	; (10194 <InitDataSection()+0x88>)
   1014c:	9a05      	ldr	r2, [sp, #20]
   1014e:	4613      	mov	r3, r2
   10150:	005b      	lsls	r3, r3, #1
   10152:	4413      	add	r3, r2
   10154:	009b      	lsls	r3, r3, #2
   10156:	440b      	add	r3, r1
   10158:	3308      	adds	r3, #8
   1015a:	681b      	ldr	r3, [r3, #0]
   1015c:	9301      	str	r3, [sp, #4]
    for (size_t j = 0; j < length; j++)
   1015e:	2300      	movs	r3, #0
   10160:	9304      	str	r3, [sp, #16]
   10162:	9a04      	ldr	r2, [sp, #16]
   10164:	9b01      	ldr	r3, [sp, #4]
   10166:	429a      	cmp	r2, r3
   10168:	d20d      	bcs.n	10186 <InitDataSection()+0x7a>
    {
      ram_location[j] = rom_location[j];
   1016a:	9b04      	ldr	r3, [sp, #16]
   1016c:	009b      	lsls	r3, r3, #2
   1016e:	9a03      	ldr	r2, [sp, #12]
   10170:	441a      	add	r2, r3
   10172:	9b04      	ldr	r3, [sp, #16]
   10174:	009b      	lsls	r3, r3, #2
   10176:	9902      	ldr	r1, [sp, #8]
   10178:	440b      	add	r3, r1
   1017a:	6812      	ldr	r2, [r2, #0]
   1017c:	601a      	str	r2, [r3, #0]
    for (size_t j = 0; j < length; j++)
   1017e:	9b04      	ldr	r3, [sp, #16]
   10180:	3301      	adds	r3, #1
   10182:	9304      	str	r3, [sp, #16]
   10184:	e7ed      	b.n	10162 <InitDataSection()+0x56>
  for (int i = 0; &data_section_table[i] < &data_section_table_end; i++)
   10186:	9b05      	ldr	r3, [sp, #20]
   10188:	3301      	adds	r3, #1
   1018a:	9305      	str	r3, [sp, #20]
   1018c:	e7c1      	b.n	10112 <InitDataSection()+0x6>
    }
  }
}
   1018e:	bf00      	nop
   10190:	b006      	add	sp, #24
   10192:	4770      	bx	lr
   10194:	000100e4 	.word	0x000100e4
   10198:	000100fc 	.word	0x000100fc

0001019c <InitBssSection()>:

// Functions to initialization BSS data sections. This is important because
// the std c libs assume that BSS is set to zero.
SJ2_SECTION(".after_vectors")
void InitBssSection()
{
   1019c:	b084      	sub	sp, #16
  for (int i = 0; &bss_section_table[i] < &bss_section_table_end; i++)
   1019e:	2300      	movs	r3, #0
   101a0:	9303      	str	r3, [sp, #12]
   101a2:	9b03      	ldr	r3, [sp, #12]
   101a4:	00db      	lsls	r3, r3, #3
   101a6:	4a13      	ldr	r2, [pc, #76]	; (101f4 <InitBssSection()+0x58>)
   101a8:	4413      	add	r3, r2
   101aa:	4a13      	ldr	r2, [pc, #76]	; (101f8 <InitBssSection()+0x5c>)
   101ac:	4293      	cmp	r3, r2
   101ae:	d21e      	bcs.n	101ee <InitBssSection()+0x52>
  {
    uint32_t * ram_location = bss_section_table[i].ram_location;
   101b0:	4a10      	ldr	r2, [pc, #64]	; (101f4 <InitBssSection()+0x58>)
   101b2:	9b03      	ldr	r3, [sp, #12]
   101b4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
   101b8:	9301      	str	r3, [sp, #4]
    uint32_t length         = bss_section_table[i].length;
   101ba:	4a0e      	ldr	r2, [pc, #56]	; (101f4 <InitBssSection()+0x58>)
   101bc:	9b03      	ldr	r3, [sp, #12]
   101be:	00db      	lsls	r3, r3, #3
   101c0:	4413      	add	r3, r2
   101c2:	685b      	ldr	r3, [r3, #4]
   101c4:	9300      	str	r3, [sp, #0]
    for (size_t j = 0; j < length; j++)
   101c6:	2300      	movs	r3, #0
   101c8:	9302      	str	r3, [sp, #8]
   101ca:	9a02      	ldr	r2, [sp, #8]
   101cc:	9b00      	ldr	r3, [sp, #0]
   101ce:	429a      	cmp	r2, r3
   101d0:	d209      	bcs.n	101e6 <InitBssSection()+0x4a>
    {
      ram_location[j] = 0;
   101d2:	9b02      	ldr	r3, [sp, #8]
   101d4:	009b      	lsls	r3, r3, #2
   101d6:	9a01      	ldr	r2, [sp, #4]
   101d8:	4413      	add	r3, r2
   101da:	2200      	movs	r2, #0
   101dc:	601a      	str	r2, [r3, #0]
    for (size_t j = 0; j < length; j++)
   101de:	9b02      	ldr	r3, [sp, #8]
   101e0:	3301      	adds	r3, #1
   101e2:	9302      	str	r3, [sp, #8]
   101e4:	e7f1      	b.n	101ca <InitBssSection()+0x2e>
  for (int i = 0; &bss_section_table[i] < &bss_section_table_end; i++)
   101e6:	9b03      	ldr	r3, [sp, #12]
   101e8:	3301      	adds	r3, #1
   101ea:	9303      	str	r3, [sp, #12]
   101ec:	e7d9      	b.n	101a2 <InitBssSection()+0x6>
    }
  }
}
   101ee:	bf00      	nop
   101f0:	b004      	add	sp, #16
   101f2:	4770      	bx	lr
   101f4:	000100fc 	.word	0x000100fc
   101f8:	0001010c 	.word	0x0001010c

000101fc <InitFpu()>:
      // Write back the modified value to the CPACR
      "STR     R1, [R0]\n"
      // Wait for store to complete
      "DSB\n"
      // reset pipeline now the FPU is enabled
      "ISB\n");
   101fc:	f8df 0014 	ldr.w	r0, [pc, #20]	; 10214 <InitFpu()+0x18>
   10200:	6801      	ldr	r1, [r0, #0]
   10202:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   10206:	6001      	str	r1, [r0, #0]
   10208:	f3bf 8f4f 	dsb	sy
   1020c:	f3bf 8f6f 	isb	sy
}
   10210:	bf00      	nop
   10212:	4770      	bx	lr
   10214:	e000ed88 	.word	0xe000ed88

00010218 <HardFaultHandler>:
      " mrseq r0, msp                                       \n"
      " mrsne r0, psp                                       \n"
      " ldr r1, [r0, #24]                                   \n"
      " ldr r2, handler2_address_const                      \n"
      " bx r2                                               \n"
      " handler2_address_const: .word GetRegistersFromStack \n");
   10218:	f01e 0f04 	tst.w	lr, #4
   1021c:	bf0c      	ite	eq
   1021e:	f3ef 8008 	mrseq	r0, MSP
   10222:	f3ef 8009 	mrsne	r0, PSP
   10226:	6981      	ldr	r1, [r0, #24]
   10228:	4a00      	ldr	r2, [pc, #0]	; (1022c <handler2_address_const>)
   1022a:	4710      	bx	r2

0001022c <handler2_address_const>:
   1022c:	00012f41 	.word	0x00012f41
#endif
}
   10230:	bf00      	nop
   10232:	4770      	bx	lr
   10234:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   10238:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   1023c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   10240:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   10244:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   10248:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   1024c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   10250:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   10254:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   10258:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   1025c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   10260:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   10264:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   10268:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   1026c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   10270:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   10274:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   10278:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   1027c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   10280:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   10284:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   10288:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   1028c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   10290:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   10294:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   10298:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   1029c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102a0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102a4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102a8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102ac:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102b0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102b4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102b8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102bc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102c0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102c4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102c8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102cc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102d0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102d4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102d8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102dc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102e0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102e4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102e8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102ec:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102f0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102f4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102f8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

000102fc <__CRP_WORD_START__>:
   102fc:	ffffffff 	.word	0xffffffff

00010300 <_init>:
   10300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10302:	bf00      	nop
   10304:	bcf8      	pop	{r3, r4, r5, r6, r7}
   10306:	bc08      	pop	{r3}
   10308:	469e      	mov	lr, r3
   1030a:	4770      	bx	lr

0001030c <__init_array_start>:
   1030c:	0001034d 	.word	0x0001034d
   10310:	00010cc1 	.word	0x00010cc1
   10314:	00012de9 	.word	0x00012de9
   10318:	000170a1 	.word	0x000170a1

0001031c <_fini>:
   1031c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1031e:	bf00      	nop
   10320:	bcf8      	pop	{r3, r4, r5, r6, r7}
   10322:	bc08      	pop	{r3}
   10324:	469e      	mov	lr, r3
   10326:	4770      	bx	lr

00010328 <__do_global_dtors_aux>:
   10328:	b510      	push	{r4, lr}
   1032a:	4c05      	ldr	r4, [pc, #20]	; (10340 <__do_global_dtors_aux+0x18>)
   1032c:	7823      	ldrb	r3, [r4, #0]
   1032e:	b933      	cbnz	r3, 1033e <__do_global_dtors_aux+0x16>
   10330:	4b04      	ldr	r3, [pc, #16]	; (10344 <__do_global_dtors_aux+0x1c>)
   10332:	b113      	cbz	r3, 1033a <__do_global_dtors_aux+0x12>
   10334:	4804      	ldr	r0, [pc, #16]	; (10348 <__do_global_dtors_aux+0x20>)
   10336:	f3af 8000 	nop.w
   1033a:	2301      	movs	r3, #1
   1033c:	7023      	strb	r3, [r4, #0]
   1033e:	bd10      	pop	{r4, pc}
   10340:	10000240 	.word	0x10000240
   10344:	00000000 	.word	0x00000000
   10348:	000197b0 	.word	0x000197b0

0001034c <frame_dummy>:
   1034c:	b508      	push	{r3, lr}
   1034e:	4b03      	ldr	r3, [pc, #12]	; (1035c <frame_dummy+0x10>)
   10350:	b11b      	cbz	r3, 1035a <frame_dummy+0xe>
   10352:	4903      	ldr	r1, [pc, #12]	; (10360 <frame_dummy+0x14>)
   10354:	4803      	ldr	r0, [pc, #12]	; (10364 <frame_dummy+0x18>)
   10356:	f3af 8000 	nop.w
   1035a:	bd08      	pop	{r3, pc}
   1035c:	00000000 	.word	0x00000000
   10360:	10000244 	.word	0x10000244
   10364:	000197b0 	.word	0x000197b0

00010368 <LabGPIO::LabGPIO(unsigned char, unsigned char)>:
#include "LabGPIO.hpp"
 
  LabGPIO::LabGPIO(uint8_t port, uint8_t pin){
   10368:	b530      	push	{r4, r5, lr}
   1036a:	b083      	sub	sp, #12
   1036c:	4675      	mov	r5, lr
   1036e:	9001      	str	r0, [sp, #4]
   10370:	460b      	mov	r3, r1
   10372:	f88d 3003 	strb.w	r3, [sp, #3]
   10376:	4613      	mov	r3, r2
   10378:	f88d 3002 	strb.w	r3, [sp, #2]
   1037c:	462b      	mov	r3, r5
   1037e:	4619      	mov	r1, r3
   10380:	480a      	ldr	r0, [pc, #40]	; (103ac <LabGPIO::LabGPIO(unsigned char, unsigned char)+0x44>)
   10382:	f002 fed7 	bl	13134 <__cyg_profile_func_enter>
    SelPort = port;
   10386:	9b01      	ldr	r3, [sp, #4]
   10388:	f89d 2003 	ldrb.w	r2, [sp, #3]
   1038c:	701a      	strb	r2, [r3, #0]
    SelPin = pin;
   1038e:	9b01      	ldr	r3, [sp, #4]
   10390:	f89d 2002 	ldrb.w	r2, [sp, #2]
   10394:	705a      	strb	r2, [r3, #1]
 
  }
   10396:	9c01      	ldr	r4, [sp, #4]
   10398:	462b      	mov	r3, r5
   1039a:	4619      	mov	r1, r3
   1039c:	4803      	ldr	r0, [pc, #12]	; (103ac <LabGPIO::LabGPIO(unsigned char, unsigned char)+0x44>)
   1039e:	f002 fedd 	bl	1315c <__cyg_profile_func_exit>
   103a2:	4623      	mov	r3, r4
   103a4:	4618      	mov	r0, r3
   103a6:	b003      	add	sp, #12
   103a8:	bd30      	pop	{r4, r5, pc}
   103aa:	bf00      	nop
   103ac:	00010369 	.word	0x00010369

000103b0 <LabGPIO::SetHigh()>:
    break;
  }
 
  }

  void LabGPIO::SetHigh(){
   103b0:	b510      	push	{r4, lr}
   103b2:	b082      	sub	sp, #8
   103b4:	4674      	mov	r4, lr
   103b6:	9001      	str	r0, [sp, #4]
   103b8:	4623      	mov	r3, r4
   103ba:	4619      	mov	r1, r3
   103bc:	4829      	ldr	r0, [pc, #164]	; (10464 <LabGPIO::SetHigh()+0xb4>)
   103be:	f002 feb9 	bl	13134 <__cyg_profile_func_enter>
       /// Set voltage of pin to HIGH
     switch(SelPort){
   103c2:	9b01      	ldr	r3, [sp, #4]
   103c4:	781b      	ldrb	r3, [r3, #0]
   103c6:	2b05      	cmp	r3, #5
   103c8:	d844      	bhi.n	10454 <LabGPIO::SetHigh()+0xa4>
   103ca:	a201      	add	r2, pc, #4	; (adr r2, 103d0 <LabGPIO::SetHigh()+0x20>)
   103cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   103d0:	000103e9 	.word	0x000103e9
   103d4:	000103fb 	.word	0x000103fb
   103d8:	0001040d 	.word	0x0001040d
   103dc:	0001041f 	.word	0x0001041f
   103e0:	00010431 	.word	0x00010431
   103e4:	00010443 	.word	0x00010443
    case 0:
       LPC_GPIO0-> SET = (1<<SelPin);
   103e8:	9b01      	ldr	r3, [sp, #4]
   103ea:	785b      	ldrb	r3, [r3, #1]
   103ec:	461a      	mov	r2, r3
   103ee:	2301      	movs	r3, #1
   103f0:	fa03 f202 	lsl.w	r2, r3, r2
   103f4:	4b1c      	ldr	r3, [pc, #112]	; (10468 <LabGPIO::SetHigh()+0xb8>)
   103f6:	619a      	str	r2, [r3, #24]
       break;
   103f8:	e02c      	b.n	10454 <LabGPIO::SetHigh()+0xa4>
    case 1:
       LPC_GPIO1-> SET = (1<<SelPin);
   103fa:	9b01      	ldr	r3, [sp, #4]
   103fc:	785b      	ldrb	r3, [r3, #1]
   103fe:	461a      	mov	r2, r3
   10400:	2301      	movs	r3, #1
   10402:	fa03 f202 	lsl.w	r2, r3, r2
   10406:	4b19      	ldr	r3, [pc, #100]	; (1046c <LabGPIO::SetHigh()+0xbc>)
   10408:	619a      	str	r2, [r3, #24]
       break;
   1040a:	e023      	b.n	10454 <LabGPIO::SetHigh()+0xa4>
    case 2:
       LPC_GPIO2-> SET = (1<<SelPin);
   1040c:	9b01      	ldr	r3, [sp, #4]
   1040e:	785b      	ldrb	r3, [r3, #1]
   10410:	461a      	mov	r2, r3
   10412:	2301      	movs	r3, #1
   10414:	fa03 f202 	lsl.w	r2, r3, r2
   10418:	4b15      	ldr	r3, [pc, #84]	; (10470 <LabGPIO::SetHigh()+0xc0>)
   1041a:	619a      	str	r2, [r3, #24]
       break;
   1041c:	e01a      	b.n	10454 <LabGPIO::SetHigh()+0xa4>
    case 3:
       LPC_GPIO3-> SET = (1<<SelPin);
   1041e:	9b01      	ldr	r3, [sp, #4]
   10420:	785b      	ldrb	r3, [r3, #1]
   10422:	461a      	mov	r2, r3
   10424:	2301      	movs	r3, #1
   10426:	fa03 f202 	lsl.w	r2, r3, r2
   1042a:	4b12      	ldr	r3, [pc, #72]	; (10474 <LabGPIO::SetHigh()+0xc4>)
   1042c:	619a      	str	r2, [r3, #24]
       break;   
   1042e:	e011      	b.n	10454 <LabGPIO::SetHigh()+0xa4>
    case 4:
       LPC_GPIO4-> SET = (1<<SelPin);
   10430:	9b01      	ldr	r3, [sp, #4]
   10432:	785b      	ldrb	r3, [r3, #1]
   10434:	461a      	mov	r2, r3
   10436:	2301      	movs	r3, #1
   10438:	fa03 f202 	lsl.w	r2, r3, r2
   1043c:	4b0e      	ldr	r3, [pc, #56]	; (10478 <LabGPIO::SetHigh()+0xc8>)
   1043e:	619a      	str	r2, [r3, #24]
        break;
   10440:	e008      	b.n	10454 <LabGPIO::SetHigh()+0xa4>
    case 5:
       LPC_GPIO5-> SET = (1<<SelPin);
   10442:	9b01      	ldr	r3, [sp, #4]
   10444:	785b      	ldrb	r3, [r3, #1]
   10446:	461a      	mov	r2, r3
   10448:	2301      	movs	r3, #1
   1044a:	fa03 f202 	lsl.w	r2, r3, r2
   1044e:	4b0b      	ldr	r3, [pc, #44]	; (1047c <LabGPIO::SetHigh()+0xcc>)
   10450:	619a      	str	r2, [r3, #24]
       break;
   10452:	bf00      	nop
   10454:	4623      	mov	r3, r4
   10456:	4619      	mov	r1, r3
   10458:	4802      	ldr	r0, [pc, #8]	; (10464 <LabGPIO::SetHigh()+0xb4>)
   1045a:	f002 fe7f 	bl	1315c <__cyg_profile_func_exit>
  }
  }
   1045e:	bf00      	nop
   10460:	b002      	add	sp, #8
   10462:	bd10      	pop	{r4, pc}
   10464:	000103b1 	.word	0x000103b1
   10468:	20098000 	.word	0x20098000
   1046c:	20098020 	.word	0x20098020
   10470:	20098040 	.word	0x20098040
   10474:	20098060 	.word	0x20098060
   10478:	20098080 	.word	0x20098080
   1047c:	200980a0 	.word	0x200980a0

00010480 <LabGPIO::SetLow()>:
  void LabGPIO::SetLow(){
   10480:	b510      	push	{r4, lr}
   10482:	b082      	sub	sp, #8
   10484:	4674      	mov	r4, lr
   10486:	9001      	str	r0, [sp, #4]
   10488:	4623      	mov	r3, r4
   1048a:	4619      	mov	r1, r3
   1048c:	4829      	ldr	r0, [pc, #164]	; (10534 <LabGPIO::SetLow()+0xb4>)
   1048e:	f002 fe51 	bl	13134 <__cyg_profile_func_enter>
        /// Set voltage of pin to LOW 
    switch(SelPort){
   10492:	9b01      	ldr	r3, [sp, #4]
   10494:	781b      	ldrb	r3, [r3, #0]
   10496:	2b05      	cmp	r3, #5
   10498:	d844      	bhi.n	10524 <LabGPIO::SetLow()+0xa4>
   1049a:	a201      	add	r2, pc, #4	; (adr r2, 104a0 <LabGPIO::SetLow()+0x20>)
   1049c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   104a0:	000104b9 	.word	0x000104b9
   104a4:	000104cb 	.word	0x000104cb
   104a8:	000104dd 	.word	0x000104dd
   104ac:	000104ef 	.word	0x000104ef
   104b0:	00010501 	.word	0x00010501
   104b4:	00010513 	.word	0x00010513
    case 0:
       LPC_GPIO0-> CLR = (1<<SelPin);
   104b8:	9b01      	ldr	r3, [sp, #4]
   104ba:	785b      	ldrb	r3, [r3, #1]
   104bc:	461a      	mov	r2, r3
   104be:	2301      	movs	r3, #1
   104c0:	fa03 f202 	lsl.w	r2, r3, r2
   104c4:	4b1c      	ldr	r3, [pc, #112]	; (10538 <LabGPIO::SetLow()+0xb8>)
   104c6:	61da      	str	r2, [r3, #28]
       break;
   104c8:	e02c      	b.n	10524 <LabGPIO::SetLow()+0xa4>
    case 1:
       LPC_GPIO1-> CLR = (1<<SelPin);
   104ca:	9b01      	ldr	r3, [sp, #4]
   104cc:	785b      	ldrb	r3, [r3, #1]
   104ce:	461a      	mov	r2, r3
   104d0:	2301      	movs	r3, #1
   104d2:	fa03 f202 	lsl.w	r2, r3, r2
   104d6:	4b19      	ldr	r3, [pc, #100]	; (1053c <LabGPIO::SetLow()+0xbc>)
   104d8:	61da      	str	r2, [r3, #28]
       break;
   104da:	e023      	b.n	10524 <LabGPIO::SetLow()+0xa4>
    case 2:
       LPC_GPIO2-> CLR = (1<<SelPin);
   104dc:	9b01      	ldr	r3, [sp, #4]
   104de:	785b      	ldrb	r3, [r3, #1]
   104e0:	461a      	mov	r2, r3
   104e2:	2301      	movs	r3, #1
   104e4:	fa03 f202 	lsl.w	r2, r3, r2
   104e8:	4b15      	ldr	r3, [pc, #84]	; (10540 <LabGPIO::SetLow()+0xc0>)
   104ea:	61da      	str	r2, [r3, #28]
       break;
   104ec:	e01a      	b.n	10524 <LabGPIO::SetLow()+0xa4>
    case 3:
       LPC_GPIO3-> CLR = (1<<SelPin);
   104ee:	9b01      	ldr	r3, [sp, #4]
   104f0:	785b      	ldrb	r3, [r3, #1]
   104f2:	461a      	mov	r2, r3
   104f4:	2301      	movs	r3, #1
   104f6:	fa03 f202 	lsl.w	r2, r3, r2
   104fa:	4b12      	ldr	r3, [pc, #72]	; (10544 <LabGPIO::SetLow()+0xc4>)
   104fc:	61da      	str	r2, [r3, #28]
       break;
   104fe:	e011      	b.n	10524 <LabGPIO::SetLow()+0xa4>
    case 4:
       LPC_GPIO4-> CLR = (1<<SelPin);
   10500:	9b01      	ldr	r3, [sp, #4]
   10502:	785b      	ldrb	r3, [r3, #1]
   10504:	461a      	mov	r2, r3
   10506:	2301      	movs	r3, #1
   10508:	fa03 f202 	lsl.w	r2, r3, r2
   1050c:	4b0e      	ldr	r3, [pc, #56]	; (10548 <LabGPIO::SetLow()+0xc8>)
   1050e:	61da      	str	r2, [r3, #28]
        break;
   10510:	e008      	b.n	10524 <LabGPIO::SetLow()+0xa4>
    case 5:
       LPC_GPIO5-> CLR = (1<<SelPin);
   10512:	9b01      	ldr	r3, [sp, #4]
   10514:	785b      	ldrb	r3, [r3, #1]
   10516:	461a      	mov	r2, r3
   10518:	2301      	movs	r3, #1
   1051a:	fa03 f202 	lsl.w	r2, r3, r2
   1051e:	4b0b      	ldr	r3, [pc, #44]	; (1054c <LabGPIO::SetLow()+0xcc>)
   10520:	61da      	str	r2, [r3, #28]
       break;
   10522:	bf00      	nop
   10524:	4623      	mov	r3, r4
   10526:	4619      	mov	r1, r3
   10528:	4802      	ldr	r0, [pc, #8]	; (10534 <LabGPIO::SetLow()+0xb4>)
   1052a:	f002 fe17 	bl	1315c <__cyg_profile_func_exit>
  }
  
  }
   1052e:	bf00      	nop
   10530:	b002      	add	sp, #8
   10532:	bd10      	pop	{r4, pc}
   10534:	00010481 	.word	0x00010481
   10538:	20098000 	.word	0x20098000
   1053c:	20098020 	.word	0x20098020
   10540:	20098040 	.word	0x20098040
   10544:	20098060 	.word	0x20098060
   10548:	20098080 	.word	0x20098080
   1054c:	200980a0 	.word	0x200980a0

00010550 <LabGPIO::ReadBool()>:
    case 5:
        if(LPC_GPIO5->PIN & (1<<SelPin)) return State::kHigh;
        else return State::kLow;
    }
  }
 bool LabGPIO::ReadBool(){
   10550:	b570      	push	{r4, r5, r6, lr}
   10552:	b082      	sub	sp, #8
   10554:	4676      	mov	r6, lr
   10556:	9001      	str	r0, [sp, #4]
   10558:	4633      	mov	r3, r6
   1055a:	4619      	mov	r1, r3
   1055c:	483e      	ldr	r0, [pc, #248]	; (10658 <LabGPIO::ReadBool()+0x108>)
   1055e:	f002 fde9 	bl	13134 <__cyg_profile_func_enter>
  /// Should return the state of the pin (input or output, doesn't matter)
  ///
  /// @return level of pin high => true, low => false
  switch(SelPort){
   10562:	9b01      	ldr	r3, [sp, #4]
   10564:	781b      	ldrb	r3, [r3, #0]
   10566:	2b05      	cmp	r3, #5
   10568:	d868      	bhi.n	1063c <LabGPIO::ReadBool()+0xec>
   1056a:	a201      	add	r2, pc, #4	; (adr r2, 10570 <LabGPIO::ReadBool()+0x20>)
   1056c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   10570:	00010589 	.word	0x00010589
   10574:	000105a7 	.word	0x000105a7
   10578:	000105c5 	.word	0x000105c5
   1057c:	000105e3 	.word	0x000105e3
   10580:	00010601 	.word	0x00010601
   10584:	0001061f 	.word	0x0001061f
    case 0:
        return(LPC_GPIO0->PIN & (1<<SelPin));
   10588:	4b34      	ldr	r3, [pc, #208]	; (1065c <LabGPIO::ReadBool()+0x10c>)
   1058a:	695b      	ldr	r3, [r3, #20]
   1058c:	9a01      	ldr	r2, [sp, #4]
   1058e:	7852      	ldrb	r2, [r2, #1]
   10590:	4611      	mov	r1, r2
   10592:	2201      	movs	r2, #1
   10594:	408a      	lsls	r2, r1
   10596:	4013      	ands	r3, r2
   10598:	2b00      	cmp	r3, #0
   1059a:	bf14      	ite	ne
   1059c:	2301      	movne	r3, #1
   1059e:	2300      	moveq	r3, #0
   105a0:	b2dc      	uxtb	r4, r3
   105a2:	2500      	movs	r5, #0
   105a4:	e04b      	b.n	1063e <LabGPIO::ReadBool()+0xee>
    case 1:
        return(LPC_GPIO1->PIN & (1<<SelPin));
   105a6:	4b2e      	ldr	r3, [pc, #184]	; (10660 <LabGPIO::ReadBool()+0x110>)
   105a8:	695b      	ldr	r3, [r3, #20]
   105aa:	9a01      	ldr	r2, [sp, #4]
   105ac:	7852      	ldrb	r2, [r2, #1]
   105ae:	4611      	mov	r1, r2
   105b0:	2201      	movs	r2, #1
   105b2:	408a      	lsls	r2, r1
   105b4:	4013      	ands	r3, r2
   105b6:	2b00      	cmp	r3, #0
   105b8:	bf14      	ite	ne
   105ba:	2301      	movne	r3, #1
   105bc:	2300      	moveq	r3, #0
   105be:	b2dc      	uxtb	r4, r3
   105c0:	2500      	movs	r5, #0
   105c2:	e03c      	b.n	1063e <LabGPIO::ReadBool()+0xee>
    case 2:
        return(LPC_GPIO2->PIN & (1<<SelPin));
   105c4:	4b27      	ldr	r3, [pc, #156]	; (10664 <LabGPIO::ReadBool()+0x114>)
   105c6:	695b      	ldr	r3, [r3, #20]
   105c8:	9a01      	ldr	r2, [sp, #4]
   105ca:	7852      	ldrb	r2, [r2, #1]
   105cc:	4611      	mov	r1, r2
   105ce:	2201      	movs	r2, #1
   105d0:	408a      	lsls	r2, r1
   105d2:	4013      	ands	r3, r2
   105d4:	2b00      	cmp	r3, #0
   105d6:	bf14      	ite	ne
   105d8:	2301      	movne	r3, #1
   105da:	2300      	moveq	r3, #0
   105dc:	b2dc      	uxtb	r4, r3
   105de:	2500      	movs	r5, #0
   105e0:	e02d      	b.n	1063e <LabGPIO::ReadBool()+0xee>
    case 3:
        return(LPC_GPIO3->PIN & (1<<SelPin));
   105e2:	4b21      	ldr	r3, [pc, #132]	; (10668 <LabGPIO::ReadBool()+0x118>)
   105e4:	695b      	ldr	r3, [r3, #20]
   105e6:	9a01      	ldr	r2, [sp, #4]
   105e8:	7852      	ldrb	r2, [r2, #1]
   105ea:	4611      	mov	r1, r2
   105ec:	2201      	movs	r2, #1
   105ee:	408a      	lsls	r2, r1
   105f0:	4013      	ands	r3, r2
   105f2:	2b00      	cmp	r3, #0
   105f4:	bf14      	ite	ne
   105f6:	2301      	movne	r3, #1
   105f8:	2300      	moveq	r3, #0
   105fa:	b2dc      	uxtb	r4, r3
   105fc:	2500      	movs	r5, #0
   105fe:	e01e      	b.n	1063e <LabGPIO::ReadBool()+0xee>
    case 4:
        return(LPC_GPIO4->PIN & (1<<SelPin));
   10600:	4b1a      	ldr	r3, [pc, #104]	; (1066c <LabGPIO::ReadBool()+0x11c>)
   10602:	695b      	ldr	r3, [r3, #20]
   10604:	9a01      	ldr	r2, [sp, #4]
   10606:	7852      	ldrb	r2, [r2, #1]
   10608:	4611      	mov	r1, r2
   1060a:	2201      	movs	r2, #1
   1060c:	408a      	lsls	r2, r1
   1060e:	4013      	ands	r3, r2
   10610:	2b00      	cmp	r3, #0
   10612:	bf14      	ite	ne
   10614:	2301      	movne	r3, #1
   10616:	2300      	moveq	r3, #0
   10618:	b2dc      	uxtb	r4, r3
   1061a:	2500      	movs	r5, #0
   1061c:	e00f      	b.n	1063e <LabGPIO::ReadBool()+0xee>
    case 5:
        return(LPC_GPIO5->PIN & (1<<SelPin));  
   1061e:	4b14      	ldr	r3, [pc, #80]	; (10670 <LabGPIO::ReadBool()+0x120>)
   10620:	695b      	ldr	r3, [r3, #20]
   10622:	9a01      	ldr	r2, [sp, #4]
   10624:	7852      	ldrb	r2, [r2, #1]
   10626:	4611      	mov	r1, r2
   10628:	2201      	movs	r2, #1
   1062a:	408a      	lsls	r2, r1
   1062c:	4013      	ands	r3, r2
   1062e:	2b00      	cmp	r3, #0
   10630:	bf14      	ite	ne
   10632:	2301      	movne	r3, #1
   10634:	2300      	moveq	r3, #0
   10636:	b2dc      	uxtb	r4, r3
   10638:	2500      	movs	r5, #0
   1063a:	e000      	b.n	1063e <LabGPIO::ReadBool()+0xee>
   1063c:	2501      	movs	r5, #1
   1063e:	4633      	mov	r3, r6
   10640:	4619      	mov	r1, r3
   10642:	4805      	ldr	r0, [pc, #20]	; (10658 <LabGPIO::ReadBool()+0x108>)
   10644:	f002 fd8a 	bl	1315c <__cyg_profile_func_exit>
   10648:	2d01      	cmp	r5, #1
   1064a:	d100      	bne.n	1064e <LabGPIO::ReadBool()+0xfe>
  }
  }
   1064c:	e000      	b.n	10650 <LabGPIO::ReadBool()+0x100>
   1064e:	4623      	mov	r3, r4
   10650:	4618      	mov	r0, r3
   10652:	b002      	add	sp, #8
   10654:	bd70      	pop	{r4, r5, r6, pc}
   10656:	bf00      	nop
   10658:	00010551 	.word	0x00010551
   1065c:	20098000 	.word	0x20098000
   10660:	20098020 	.word	0x20098020
   10664:	20098040 	.word	0x20098040
   10668:	20098060 	.word	0x20098060
   1066c:	20098080 	.word	0x20098080
   10670:	200980a0 	.word	0x200980a0

00010674 <LabGPIO::toggle()>:
 void LabGPIO::toggle(){
   10674:	b510      	push	{r4, lr}
   10676:	b082      	sub	sp, #8
   10678:	4674      	mov	r4, lr
   1067a:	9001      	str	r0, [sp, #4]
   1067c:	4623      	mov	r3, r4
   1067e:	4619      	mov	r1, r3
   10680:	4841      	ldr	r0, [pc, #260]	; (10788 <LabGPIO::toggle()+0x114>)
   10682:	f002 fd57 	bl	13134 <__cyg_profile_func_enter>

    switch(SelPort){
   10686:	9b01      	ldr	r3, [sp, #4]
   10688:	781b      	ldrb	r3, [r3, #0]
   1068a:	2b05      	cmp	r3, #5
   1068c:	d874      	bhi.n	10778 <LabGPIO::toggle()+0x104>
   1068e:	a201      	add	r2, pc, #4	; (adr r2, 10694 <LabGPIO::toggle()+0x20>)
   10690:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   10694:	000106ad 	.word	0x000106ad
   10698:	000106cf 	.word	0x000106cf
   1069c:	000106f1 	.word	0x000106f1
   106a0:	00010713 	.word	0x00010713
   106a4:	00010735 	.word	0x00010735
   106a8:	00010757 	.word	0x00010757
    case 0:
        if(!ReadBool()) //reads the current state and if it is not true which means it is SetLow then SetHigh 
   106ac:	9801      	ldr	r0, [sp, #4]
   106ae:	f7ff ff4f 	bl	10550 <LabGPIO::ReadBool()>
   106b2:	4603      	mov	r3, r0
   106b4:	f083 0301 	eor.w	r3, r3, #1
   106b8:	b2db      	uxtb	r3, r3
   106ba:	2b00      	cmp	r3, #0
   106bc:	d003      	beq.n	106c6 <LabGPIO::toggle()+0x52>
            SetHigh(); 
   106be:	9801      	ldr	r0, [sp, #4]
   106c0:	f7ff fe76 	bl	103b0 <LabGPIO::SetHigh()>
        else SetLow();
        break;
   106c4:	e058      	b.n	10778 <LabGPIO::toggle()+0x104>
        else SetLow();
   106c6:	9801      	ldr	r0, [sp, #4]
   106c8:	f7ff feda 	bl	10480 <LabGPIO::SetLow()>
        break;
   106cc:	e054      	b.n	10778 <LabGPIO::toggle()+0x104>
    case 1:
        if(!ReadBool()) //reads the current state and if it is not true which means it is SetLow then SetHigh 
   106ce:	9801      	ldr	r0, [sp, #4]
   106d0:	f7ff ff3e 	bl	10550 <LabGPIO::ReadBool()>
   106d4:	4603      	mov	r3, r0
   106d6:	f083 0301 	eor.w	r3, r3, #1
   106da:	b2db      	uxtb	r3, r3
   106dc:	2b00      	cmp	r3, #0
   106de:	d003      	beq.n	106e8 <LabGPIO::toggle()+0x74>
            SetHigh(); 
   106e0:	9801      	ldr	r0, [sp, #4]
   106e2:	f7ff fe65 	bl	103b0 <LabGPIO::SetHigh()>
        else SetLow();
        break;
   106e6:	e047      	b.n	10778 <LabGPIO::toggle()+0x104>
        else SetLow();
   106e8:	9801      	ldr	r0, [sp, #4]
   106ea:	f7ff fec9 	bl	10480 <LabGPIO::SetLow()>
        break;
   106ee:	e043      	b.n	10778 <LabGPIO::toggle()+0x104>
    case 2:
        if(!ReadBool()) //reads the current state and if it is not true which means it is SetLow then SetHigh 
   106f0:	9801      	ldr	r0, [sp, #4]
   106f2:	f7ff ff2d 	bl	10550 <LabGPIO::ReadBool()>
   106f6:	4603      	mov	r3, r0
   106f8:	f083 0301 	eor.w	r3, r3, #1
   106fc:	b2db      	uxtb	r3, r3
   106fe:	2b00      	cmp	r3, #0
   10700:	d003      	beq.n	1070a <LabGPIO::toggle()+0x96>
            SetHigh(); 
   10702:	9801      	ldr	r0, [sp, #4]
   10704:	f7ff fe54 	bl	103b0 <LabGPIO::SetHigh()>
        else SetLow();
        break;
   10708:	e036      	b.n	10778 <LabGPIO::toggle()+0x104>
        else SetLow();
   1070a:	9801      	ldr	r0, [sp, #4]
   1070c:	f7ff feb8 	bl	10480 <LabGPIO::SetLow()>
        break;
   10710:	e032      	b.n	10778 <LabGPIO::toggle()+0x104>
    case 3:
        if(!ReadBool()) //reads the current state and if it is not true which means it is SetLow then SetHigh 
   10712:	9801      	ldr	r0, [sp, #4]
   10714:	f7ff ff1c 	bl	10550 <LabGPIO::ReadBool()>
   10718:	4603      	mov	r3, r0
   1071a:	f083 0301 	eor.w	r3, r3, #1
   1071e:	b2db      	uxtb	r3, r3
   10720:	2b00      	cmp	r3, #0
   10722:	d003      	beq.n	1072c <LabGPIO::toggle()+0xb8>
            SetHigh(); 
   10724:	9801      	ldr	r0, [sp, #4]
   10726:	f7ff fe43 	bl	103b0 <LabGPIO::SetHigh()>
        else SetLow();
        break;
   1072a:	e025      	b.n	10778 <LabGPIO::toggle()+0x104>
        else SetLow();
   1072c:	9801      	ldr	r0, [sp, #4]
   1072e:	f7ff fea7 	bl	10480 <LabGPIO::SetLow()>
        break;
   10732:	e021      	b.n	10778 <LabGPIO::toggle()+0x104>
    case 4:
        if(!ReadBool()) //reads the current state and if it is not true which means it is SetLow then SetHigh 
   10734:	9801      	ldr	r0, [sp, #4]
   10736:	f7ff ff0b 	bl	10550 <LabGPIO::ReadBool()>
   1073a:	4603      	mov	r3, r0
   1073c:	f083 0301 	eor.w	r3, r3, #1
   10740:	b2db      	uxtb	r3, r3
   10742:	2b00      	cmp	r3, #0
   10744:	d003      	beq.n	1074e <LabGPIO::toggle()+0xda>
            SetHigh(); 
   10746:	9801      	ldr	r0, [sp, #4]
   10748:	f7ff fe32 	bl	103b0 <LabGPIO::SetHigh()>
        else SetLow();
        break;
   1074c:	e014      	b.n	10778 <LabGPIO::toggle()+0x104>
        else SetLow();
   1074e:	9801      	ldr	r0, [sp, #4]
   10750:	f7ff fe96 	bl	10480 <LabGPIO::SetLow()>
        break;
   10754:	e010      	b.n	10778 <LabGPIO::toggle()+0x104>
    case 5:
        if(!ReadBool()) //reads the current state and if it is not true which means it is SetLow then SetHigh 
   10756:	9801      	ldr	r0, [sp, #4]
   10758:	f7ff fefa 	bl	10550 <LabGPIO::ReadBool()>
   1075c:	4603      	mov	r3, r0
   1075e:	f083 0301 	eor.w	r3, r3, #1
   10762:	b2db      	uxtb	r3, r3
   10764:	2b00      	cmp	r3, #0
   10766:	d003      	beq.n	10770 <LabGPIO::toggle()+0xfc>
            SetHigh(); 
   10768:	9801      	ldr	r0, [sp, #4]
   1076a:	f7ff fe21 	bl	103b0 <LabGPIO::SetHigh()>
        else SetLow();
        break;
   1076e:	e002      	b.n	10776 <LabGPIO::toggle()+0x102>
        else SetLow();
   10770:	9801      	ldr	r0, [sp, #4]
   10772:	f7ff fe85 	bl	10480 <LabGPIO::SetLow()>
        break;
   10776:	bf00      	nop
   10778:	4623      	mov	r3, r4
   1077a:	4619      	mov	r1, r3
   1077c:	4802      	ldr	r0, [pc, #8]	; (10788 <LabGPIO::toggle()+0x114>)
   1077e:	f002 fced 	bl	1315c <__cyg_profile_func_exit>
    }
  }
   10782:	bf00      	nop
   10784:	b002      	add	sp, #8
   10786:	bd10      	pop	{r4, pc}
   10788:	00010675 	.word	0x00010675

0001078c <LabGPIO::setPulldown()>:
  void LabGPIO::setPulldown(){
   1078c:	b510      	push	{r4, lr}
   1078e:	b082      	sub	sp, #8
   10790:	4674      	mov	r4, lr
   10792:	9001      	str	r0, [sp, #4]
   10794:	4623      	mov	r3, r4
   10796:	4619      	mov	r1, r3
   10798:	482d      	ldr	r0, [pc, #180]	; (10850 <LabGPIO::setPulldown()+0xc4>)
   1079a:	f002 fccb 	bl	13134 <__cyg_profile_func_enter>
   switch(SelPort){
   1079e:	9b01      	ldr	r3, [sp, #4]
   107a0:	781b      	ldrb	r3, [r3, #0]
   107a2:	2b00      	cmp	r3, #0
   107a4:	d002      	beq.n	107ac <LabGPIO::setPulldown()+0x20>
   107a6:	2b01      	cmp	r3, #1
   107a8:	d021      	beq.n	107ee <LabGPIO::setPulldown()+0x62>
   107aa:	e049      	b.n	10840 <LabGPIO::setPulldown()+0xb4>
   case 0:
    if(SelPin == 29)
   107ac:	9b01      	ldr	r3, [sp, #4]
   107ae:	785b      	ldrb	r3, [r3, #1]
   107b0:	2b1d      	cmp	r3, #29
   107b2:	d10c      	bne.n	107ce <LabGPIO::setPulldown()+0x42>
   {   
       LPC_IOCON->P0_29 &= ~(0b11<<3);
   107b4:	4b27      	ldr	r3, [pc, #156]	; (10854 <LabGPIO::setPulldown()+0xc8>)
   107b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
   107b8:	4a26      	ldr	r2, [pc, #152]	; (10854 <LabGPIO::setPulldown()+0xc8>)
   107ba:	f023 0318 	bic.w	r3, r3, #24
   107be:	6753      	str	r3, [r2, #116]	; 0x74
       LPC_IOCON->P0_29 |= (0b1<<3);
   107c0:	4b24      	ldr	r3, [pc, #144]	; (10854 <LabGPIO::setPulldown()+0xc8>)
   107c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
   107c4:	4a23      	ldr	r2, [pc, #140]	; (10854 <LabGPIO::setPulldown()+0xc8>)
   107c6:	f043 0308 	orr.w	r3, r3, #8
   107ca:	6753      	str	r3, [r2, #116]	; 0x74
   107cc:	e00f      	b.n	107ee <LabGPIO::setPulldown()+0x62>
   }
   else if ( SelPin == 30)
   107ce:	9b01      	ldr	r3, [sp, #4]
   107d0:	785b      	ldrb	r3, [r3, #1]
   107d2:	2b1e      	cmp	r3, #30
   107d4:	d10b      	bne.n	107ee <LabGPIO::setPulldown()+0x62>
   {
       LPC_IOCON->P0_30 &= ~(0b11<<3);
   107d6:	4b1f      	ldr	r3, [pc, #124]	; (10854 <LabGPIO::setPulldown()+0xc8>)
   107d8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   107da:	4a1e      	ldr	r2, [pc, #120]	; (10854 <LabGPIO::setPulldown()+0xc8>)
   107dc:	f023 0318 	bic.w	r3, r3, #24
   107e0:	6793      	str	r3, [r2, #120]	; 0x78
       LPC_IOCON->P0_30 |= (0b1<<3);
   107e2:	4b1c      	ldr	r3, [pc, #112]	; (10854 <LabGPIO::setPulldown()+0xc8>)
   107e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   107e6:	4a1b      	ldr	r2, [pc, #108]	; (10854 <LabGPIO::setPulldown()+0xc8>)
   107e8:	f043 0308 	orr.w	r3, r3, #8
   107ec:	6793      	str	r3, [r2, #120]	; 0x78
   }
     //fall through
   case 1:   
   if(SelPin == 19)
   107ee:	9b01      	ldr	r3, [sp, #4]
   107f0:	785b      	ldrb	r3, [r3, #1]
   107f2:	2b13      	cmp	r3, #19
   107f4:	d110      	bne.n	10818 <LabGPIO::setPulldown()+0x8c>
   {   
       LPC_IOCON->P1_19 &= ~(0b11<<3);
   107f6:	4b17      	ldr	r3, [pc, #92]	; (10854 <LabGPIO::setPulldown()+0xc8>)
   107f8:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
   107fc:	4a15      	ldr	r2, [pc, #84]	; (10854 <LabGPIO::setPulldown()+0xc8>)
   107fe:	f023 0318 	bic.w	r3, r3, #24
   10802:	f8c2 30cc 	str.w	r3, [r2, #204]	; 0xcc
       LPC_IOCON->P1_19 |= (0b1<<3);
   10806:	4b13      	ldr	r3, [pc, #76]	; (10854 <LabGPIO::setPulldown()+0xc8>)
   10808:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
   1080c:	4a11      	ldr	r2, [pc, #68]	; (10854 <LabGPIO::setPulldown()+0xc8>)
   1080e:	f043 0308 	orr.w	r3, r3, #8
   10812:	f8c2 30cc 	str.w	r3, [r2, #204]	; 0xcc
   10816:	e013      	b.n	10840 <LabGPIO::setPulldown()+0xb4>
   }
   else if ( SelPin == 15)
   10818:	9b01      	ldr	r3, [sp, #4]
   1081a:	785b      	ldrb	r3, [r3, #1]
   1081c:	2b0f      	cmp	r3, #15
   1081e:	d10f      	bne.n	10840 <LabGPIO::setPulldown()+0xb4>
   {
       LPC_IOCON->P1_15 &= ~(0b11<<3);
   10820:	4b0c      	ldr	r3, [pc, #48]	; (10854 <LabGPIO::setPulldown()+0xc8>)
   10822:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
   10826:	4a0b      	ldr	r2, [pc, #44]	; (10854 <LabGPIO::setPulldown()+0xc8>)
   10828:	f023 0318 	bic.w	r3, r3, #24
   1082c:	f8c2 30bc 	str.w	r3, [r2, #188]	; 0xbc
       LPC_IOCON->P1_15 |= (0b1<<3);
   10830:	4b08      	ldr	r3, [pc, #32]	; (10854 <LabGPIO::setPulldown()+0xc8>)
   10832:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
   10836:	4a07      	ldr	r2, [pc, #28]	; (10854 <LabGPIO::setPulldown()+0xc8>)
   10838:	f043 0308 	orr.w	r3, r3, #8
   1083c:	f8c2 30bc 	str.w	r3, [r2, #188]	; 0xbc
   10840:	4623      	mov	r3, r4
   10842:	4619      	mov	r1, r3
   10844:	4802      	ldr	r0, [pc, #8]	; (10850 <LabGPIO::setPulldown()+0xc4>)
   10846:	f002 fc89 	bl	1315c <__cyg_profile_func_exit>
   }
  
   }
  }
   1084a:	bf00      	nop
   1084c:	b002      	add	sp, #8
   1084e:	bd10      	pop	{r4, pc}
   10850:	0001078d 	.word	0x0001078d
   10854:	4002c000 	.word	0x4002c000

00010858 <(anonymous namespace)::DefaultUptime()>:
{
// uptime in nanoseconds
inline uint64_t uptime = 0;
// Returns the system uptime in nanoseconds, do not use this function directly
[[gnu::always_inline]] inline uint64_t DefaultUptime()
{
   10858:	b570      	push	{r4, r5, r6, lr}
   1085a:	4676      	mov	r6, lr
   1085c:	4633      	mov	r3, r6
   1085e:	4619      	mov	r1, r3
   10860:	4807      	ldr	r0, [pc, #28]	; (10880 <(anonymous namespace)::DefaultUptime()+0x28>)
   10862:	f002 fc67 	bl	13134 <__cyg_profile_func_enter>
  return uptime;
   10866:	4b07      	ldr	r3, [pc, #28]	; (10884 <(anonymous namespace)::DefaultUptime()+0x2c>)
   10868:	e9d3 4500 	ldrd	r4, r5, [r3]
   1086c:	4633      	mov	r3, r6
   1086e:	4619      	mov	r1, r3
   10870:	4803      	ldr	r0, [pc, #12]	; (10880 <(anonymous namespace)::DefaultUptime()+0x28>)
   10872:	f002 fc73 	bl	1315c <__cyg_profile_func_exit>
   10876:	4623      	mov	r3, r4
   10878:	462c      	mov	r4, r5
}
   1087a:	4618      	mov	r0, r3
   1087c:	4621      	mov	r1, r4
   1087e:	bd70      	pop	{r4, r5, r6, pc}
   10880:	00010859 	.word	0x00010859
   10884:	10000260 	.word	0x10000260

00010888 <Milliseconds()>:
{
  Uptime = uptime_function;
}
// Get system uptime in milliseconds as a 64-bit integer
inline uint64_t Milliseconds()
{
   10888:	b570      	push	{r4, r5, r6, lr}
   1088a:	4674      	mov	r4, lr
   1088c:	4623      	mov	r3, r4
   1088e:	4619      	mov	r1, r3
   10890:	480c      	ldr	r0, [pc, #48]	; (108c4 <Milliseconds()+0x3c>)
   10892:	f002 fc4f 	bl	13134 <__cyg_profile_func_enter>
  return Uptime() / 1'000;
   10896:	4b0c      	ldr	r3, [pc, #48]	; (108c8 <Milliseconds()+0x40>)
   10898:	681b      	ldr	r3, [r3, #0]
   1089a:	4798      	blx	r3
   1089c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   108a0:	f04f 0300 	mov.w	r3, #0
   108a4:	f006 fca6 	bl	171f4 <__aeabi_uldivmod>
   108a8:	4602      	mov	r2, r0
   108aa:	460b      	mov	r3, r1
   108ac:	4615      	mov	r5, r2
   108ae:	461e      	mov	r6, r3
   108b0:	4623      	mov	r3, r4
   108b2:	4619      	mov	r1, r3
   108b4:	4803      	ldr	r0, [pc, #12]	; (108c4 <Milliseconds()+0x3c>)
   108b6:	f002 fc51 	bl	1315c <__cyg_profile_func_exit>
   108ba:	462b      	mov	r3, r5
   108bc:	4634      	mov	r4, r6
}
   108be:	4618      	mov	r0, r3
   108c0:	4621      	mov	r1, r4
   108c2:	bd70      	pop	{r4, r5, r6, pc}
   108c4:	00010889 	.word	0x00010889
   108c8:	10000000 	.word	0x10000000

000108cc <Wait(unsigned long long)::{lambda()#1}::operator()() const>:
  return status;
}

inline Status Wait(uint64_t timeout)
{
  return Wait(timeout, []() -> bool { return false; });
   108cc:	b530      	push	{r4, r5, lr}
   108ce:	b083      	sub	sp, #12
   108d0:	4675      	mov	r5, lr
   108d2:	9001      	str	r0, [sp, #4]
   108d4:	462b      	mov	r3, r5
   108d6:	4619      	mov	r1, r3
   108d8:	4806      	ldr	r0, [pc, #24]	; (108f4 <Wait(unsigned long long)::{lambda()#1}::operator()() const+0x28>)
   108da:	f002 fc2b 	bl	13134 <__cyg_profile_func_enter>
   108de:	2400      	movs	r4, #0
   108e0:	462b      	mov	r3, r5
   108e2:	4619      	mov	r1, r3
   108e4:	4803      	ldr	r0, [pc, #12]	; (108f4 <Wait(unsigned long long)::{lambda()#1}::operator()() const+0x28>)
   108e6:	f002 fc39 	bl	1315c <__cyg_profile_func_exit>
   108ea:	4623      	mov	r3, r4
   108ec:	4618      	mov	r0, r3
   108ee:	b003      	add	sp, #12
   108f0:	bd30      	pop	{r4, r5, pc}
   108f2:	bf00      	nop
   108f4:	000108cd 	.word	0x000108cd

000108f8 <Wait(unsigned long long)::{lambda()#1}::_FUN()>:
   108f8:	b538      	push	{r3, r4, r5, lr}
   108fa:	4674      	mov	r4, lr
   108fc:	4623      	mov	r3, r4
   108fe:	4619      	mov	r1, r3
   10900:	4807      	ldr	r0, [pc, #28]	; (10920 <Wait(unsigned long long)::{lambda()#1}::_FUN()+0x28>)
   10902:	f002 fc17 	bl	13134 <__cyg_profile_func_enter>
   10906:	2000      	movs	r0, #0
   10908:	f7ff ffe0 	bl	108cc <Wait(unsigned long long)::{lambda()#1}::operator()() const>
   1090c:	4603      	mov	r3, r0
   1090e:	461d      	mov	r5, r3
   10910:	4623      	mov	r3, r4
   10912:	4619      	mov	r1, r3
   10914:	4802      	ldr	r0, [pc, #8]	; (10920 <Wait(unsigned long long)::{lambda()#1}::_FUN()+0x28>)
   10916:	f002 fc21 	bl	1315c <__cyg_profile_func_exit>
   1091a:	462b      	mov	r3, r5
   1091c:	4618      	mov	r0, r3
   1091e:	bd38      	pop	{r3, r4, r5, pc}
   10920:	000108f9 	.word	0x000108f9

00010924 <Wait(unsigned long long)>:
{
   10924:	b5f0      	push	{r4, r5, r6, r7, lr}
   10926:	b089      	sub	sp, #36	; 0x24
   10928:	4675      	mov	r5, lr
   1092a:	e9cd 0100 	strd	r0, r1, [sp]
   1092e:	462b      	mov	r3, r5
   10930:	4619      	mov	r1, r3
   10932:	482b      	ldr	r0, [pc, #172]	; (109e0 <Wait(unsigned long long)+0xbc>)
   10934:	f002 fbfe 	bl	13134 <__cyg_profile_func_enter>
   10938:	e9dd 3400 	ldrd	r3, r4, [sp]
   1093c:	e9cd 3406 	strd	r3, r4, [sp, #24]
   10940:	f88d 6008 	strb.w	r6, [sp, #8]
   10944:	462b      	mov	r3, r5
   10946:	4619      	mov	r1, r3
   10948:	4826      	ldr	r0, [pc, #152]	; (109e4 <Wait(unsigned long long)+0xc0>)
   1094a:	f002 fbf3 	bl	13134 <__cyg_profile_func_enter>
  uint64_t timeout_time = 0;
   1094e:	f04f 0300 	mov.w	r3, #0
   10952:	f04f 0400 	mov.w	r4, #0
   10956:	e9cd 3404 	strd	r3, r4, [sp, #16]
  if (timeout == kMaxWait)
   1095a:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
   1095e:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
   10962:	bf08      	it	eq
   10964:	f1b3 3fff 	cmpeq.w	r3, #4294967295	; 0xffffffff
   10968:	d106      	bne.n	10978 <Wait(unsigned long long)+0x54>
    timeout_time = kMaxWait;
   1096a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1096e:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   10972:	e9cd 3404 	strd	r3, r4, [sp, #16]
   10976:	e00a      	b.n	1098e <Wait(unsigned long long)+0x6a>
    timeout_time = Milliseconds() + timeout;
   10978:	f7ff ff86 	bl	10888 <Milliseconds()>
   1097c:	460a      	mov	r2, r1
   1097e:	4601      	mov	r1, r0
   10980:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
   10984:	185e      	adds	r6, r3, r1
   10986:	eb44 0702 	adc.w	r7, r4, r2
   1098a:	e9cd 6704 	strd	r6, r7, [sp, #16]
  Status status = Status::kTimedOut;
   1098e:	2301      	movs	r3, #1
   10990:	9303      	str	r3, [sp, #12]
  while (Milliseconds() < timeout_time)
   10992:	f7ff ff79 	bl	10888 <Milliseconds()>
   10996:	460a      	mov	r2, r1
   10998:	4601      	mov	r1, r0
   1099a:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
   1099e:	42a2      	cmp	r2, r4
   109a0:	bf08      	it	eq
   109a2:	4299      	cmpeq	r1, r3
   109a4:	bf34      	ite	cc
   109a6:	2301      	movcc	r3, #1
   109a8:	2300      	movcs	r3, #0
   109aa:	b2db      	uxtb	r3, r3
   109ac:	2b00      	cmp	r3, #0
   109ae:	d008      	beq.n	109c2 <Wait(unsigned long long)+0x9e>
    if (is_done())
   109b0:	ab02      	add	r3, sp, #8
   109b2:	4618      	mov	r0, r3
   109b4:	f7ff ff8a 	bl	108cc <Wait(unsigned long long)::{lambda()#1}::operator()() const>
   109b8:	4603      	mov	r3, r0
   109ba:	2b00      	cmp	r3, #0
   109bc:	d0e9      	beq.n	10992 <Wait(unsigned long long)+0x6e>
      status = Status::kSuccess;
   109be:	2300      	movs	r3, #0
   109c0:	9303      	str	r3, [sp, #12]
  return status;
   109c2:	9c03      	ldr	r4, [sp, #12]
   109c4:	462b      	mov	r3, r5
   109c6:	4619      	mov	r1, r3
   109c8:	4806      	ldr	r0, [pc, #24]	; (109e4 <Wait(unsigned long long)+0xc0>)
   109ca:	f002 fbc7 	bl	1315c <__cyg_profile_func_exit>
   109ce:	462b      	mov	r3, r5
   109d0:	4619      	mov	r1, r3
   109d2:	4803      	ldr	r0, [pc, #12]	; (109e0 <Wait(unsigned long long)+0xbc>)
   109d4:	f002 fbc2 	bl	1315c <__cyg_profile_func_exit>
  return Wait(timeout, []() -> bool { return false; });
   109d8:	4623      	mov	r3, r4
}
   109da:	4618      	mov	r0, r3
   109dc:	b009      	add	sp, #36	; 0x24
   109de:	bdf0      	pop	{r4, r5, r6, r7, pc}
   109e0:	00010925 	.word	0x00010925
   109e4:	00010b6d 	.word	0x00010b6d

000109e8 <Delay(unsigned long long)>:

// Delay the system for a duration of time
inline void Delay([[maybe_unused]] uint64_t delay_time_ms)
{
   109e8:	b510      	push	{r4, lr}
   109ea:	b082      	sub	sp, #8
   109ec:	4674      	mov	r4, lr
   109ee:	e9cd 0100 	strd	r0, r1, [sp]
   109f2:	4623      	mov	r3, r4
   109f4:	4619      	mov	r1, r3
   109f6:	4807      	ldr	r0, [pc, #28]	; (10a14 <Delay(unsigned long long)+0x2c>)
   109f8:	f002 fb9c 	bl	13134 <__cyg_profile_func_enter>
#if defined(HOST_TEST)
  return;
#else
  Wait(delay_time_ms);
   109fc:	e9dd 0100 	ldrd	r0, r1, [sp]
   10a00:	f7ff ff90 	bl	10924 <Wait(unsigned long long)>
   10a04:	4623      	mov	r3, r4
   10a06:	4619      	mov	r1, r3
   10a08:	4802      	ldr	r0, [pc, #8]	; (10a14 <Delay(unsigned long long)+0x2c>)
   10a0a:	f002 fba7 	bl	1315c <__cyg_profile_func_exit>
#endif  // HOST_TEST
}
   10a0e:	bf00      	nop
   10a10:	b002      	add	sp, #8
   10a12:	bd10      	pop	{r4, pc}
   10a14:	000109e9 	.word	0x000109e9

00010a18 <main>:
void DB1();
void DB2();
void DB3();

int main() 
{
   10a18:	b508      	push	{r3, lr}
   10a1a:	4673      	mov	r3, lr
   10a1c:	4619      	mov	r1, r3
   10a1e:	4841      	ldr	r0, [pc, #260]	; (10b24 <main+0x10c>)
   10a20:	f002 fb88 	bl	13134 <__cyg_profile_func_enter>
  LOG_INFO("Start");
   10a24:	231f      	movs	r3, #31
   10a26:	4a40      	ldr	r2, [pc, #256]	; (10b28 <main+0x110>)
   10a28:	4940      	ldr	r1, [pc, #256]	; (10b2c <main+0x114>)
   10a2a:	4841      	ldr	r0, [pc, #260]	; (10b30 <main+0x118>)
   10a2c:	f003 fde2 	bl	145f4 <printf>
  /*Lab3*/
 
 
        button0.setPulldown();
   10a30:	4840      	ldr	r0, [pc, #256]	; (10b34 <main+0x11c>)
   10a32:	f7ff feab 	bl	1078c <LabGPIO::setPulldown()>
        button1.setPulldown();
   10a36:	4840      	ldr	r0, [pc, #256]	; (10b38 <main+0x120>)
   10a38:	f7ff fea8 	bl	1078c <LabGPIO::setPulldown()>
  // Initialize button and led here

  while(true)
  {    
     if(button0.ReadBool()){
   10a3c:	483d      	ldr	r0, [pc, #244]	; (10b34 <main+0x11c>)
   10a3e:	f7ff fd87 	bl	10550 <LabGPIO::ReadBool()>
   10a42:	4603      	mov	r3, r0
   10a44:	2b00      	cmp	r3, #0
   10a46:	d011      	beq.n	10a6c <main+0x54>
        
         Delay(10);
   10a48:	f04f 000a 	mov.w	r0, #10
   10a4c:	f04f 0100 	mov.w	r1, #0
   10a50:	f7ff ffca 	bl	109e8 <Delay(unsigned long long)>
         if(button0.ReadBool() != true)
   10a54:	4837      	ldr	r0, [pc, #220]	; (10b34 <main+0x11c>)
   10a56:	f7ff fd7b 	bl	10550 <LabGPIO::ReadBool()>
   10a5a:	4603      	mov	r3, r0
   10a5c:	f083 0301 	eor.w	r3, r3, #1
   10a60:	b2db      	uxtb	r3, r3
   10a62:	2b00      	cmp	r3, #0
   10a64:	d002      	beq.n	10a6c <main+0x54>
       {
           //LOG_INFO("Button 0 pressed!");
         led0.toggle();
   10a66:	4835      	ldr	r0, [pc, #212]	; (10b3c <main+0x124>)
   10a68:	f7ff fe04 	bl	10674 <LabGPIO::toggle()>
       }           
       }
          
       
       if(button1.ReadBool()){
   10a6c:	4832      	ldr	r0, [pc, #200]	; (10b38 <main+0x120>)
   10a6e:	f7ff fd6f 	bl	10550 <LabGPIO::ReadBool()>
   10a72:	4603      	mov	r3, r0
   10a74:	2b00      	cmp	r3, #0
   10a76:	d017      	beq.n	10aa8 <main+0x90>
             
          Delay(10);
   10a78:	f04f 000a 	mov.w	r0, #10
   10a7c:	f04f 0100 	mov.w	r1, #0
   10a80:	f7ff ffb2 	bl	109e8 <Delay(unsigned long long)>
         if(button1.ReadBool() != true)
   10a84:	482c      	ldr	r0, [pc, #176]	; (10b38 <main+0x120>)
   10a86:	f7ff fd63 	bl	10550 <LabGPIO::ReadBool()>
   10a8a:	4603      	mov	r3, r0
   10a8c:	f083 0301 	eor.w	r3, r3, #1
   10a90:	b2db      	uxtb	r3, r3
   10a92:	2b00      	cmp	r3, #0
   10a94:	d008      	beq.n	10aa8 <main+0x90>
       {
             LOG_INFO("Button 1 pressed!"); 
   10a96:	2339      	movs	r3, #57	; 0x39
   10a98:	4a23      	ldr	r2, [pc, #140]	; (10b28 <main+0x110>)
   10a9a:	4929      	ldr	r1, [pc, #164]	; (10b40 <main+0x128>)
   10a9c:	4829      	ldr	r0, [pc, #164]	; (10b44 <main+0x12c>)
   10a9e:	f003 fda9 	bl	145f4 <printf>
            led1.toggle();
   10aa2:	4829      	ldr	r0, [pc, #164]	; (10b48 <main+0x130>)
   10aa4:	f7ff fde6 	bl	10674 <LabGPIO::toggle()>
       }           
       }
       if(button2.ReadBool()){
   10aa8:	4828      	ldr	r0, [pc, #160]	; (10b4c <main+0x134>)
   10aaa:	f7ff fd51 	bl	10550 <LabGPIO::ReadBool()>
   10aae:	4603      	mov	r3, r0
   10ab0:	2b00      	cmp	r3, #0
   10ab2:	d017      	beq.n	10ae4 <main+0xcc>
            
               Delay(10);
   10ab4:	f04f 000a 	mov.w	r0, #10
   10ab8:	f04f 0100 	mov.w	r1, #0
   10abc:	f7ff ff94 	bl	109e8 <Delay(unsigned long long)>
         if(button2.ReadBool() != true)
   10ac0:	4822      	ldr	r0, [pc, #136]	; (10b4c <main+0x134>)
   10ac2:	f7ff fd45 	bl	10550 <LabGPIO::ReadBool()>
   10ac6:	4603      	mov	r3, r0
   10ac8:	f083 0301 	eor.w	r3, r3, #1
   10acc:	b2db      	uxtb	r3, r3
   10ace:	2b00      	cmp	r3, #0
   10ad0:	d008      	beq.n	10ae4 <main+0xcc>
       {
             LOG_INFO("Button 2 pressed!");
   10ad2:	2342      	movs	r3, #66	; 0x42
   10ad4:	4a14      	ldr	r2, [pc, #80]	; (10b28 <main+0x110>)
   10ad6:	491e      	ldr	r1, [pc, #120]	; (10b50 <main+0x138>)
   10ad8:	481e      	ldr	r0, [pc, #120]	; (10b54 <main+0x13c>)
   10ada:	f003 fd8b 	bl	145f4 <printf>
            led2.toggle();
   10ade:	481e      	ldr	r0, [pc, #120]	; (10b58 <main+0x140>)
   10ae0:	f7ff fdc8 	bl	10674 <LabGPIO::toggle()>
       }           
       }
       if(button3.ReadBool()){
   10ae4:	481d      	ldr	r0, [pc, #116]	; (10b5c <main+0x144>)
   10ae6:	f7ff fd33 	bl	10550 <LabGPIO::ReadBool()>
   10aea:	4603      	mov	r3, r0
   10aec:	2b00      	cmp	r3, #0
   10aee:	d0a5      	beq.n	10a3c <main+0x24>
          
          Delay(10);
   10af0:	f04f 000a 	mov.w	r0, #10
   10af4:	f04f 0100 	mov.w	r1, #0
   10af8:	f7ff ff76 	bl	109e8 <Delay(unsigned long long)>
         if(button3.ReadBool() != true)
   10afc:	4817      	ldr	r0, [pc, #92]	; (10b5c <main+0x144>)
   10afe:	f7ff fd27 	bl	10550 <LabGPIO::ReadBool()>
   10b02:	4603      	mov	r3, r0
   10b04:	f083 0301 	eor.w	r3, r3, #1
   10b08:	b2db      	uxtb	r3, r3
   10b0a:	2b00      	cmp	r3, #0
   10b0c:	d096      	beq.n	10a3c <main+0x24>
       {
           LOG_INFO("Button 3 pressed!");
   10b0e:	234b      	movs	r3, #75	; 0x4b
   10b10:	4a05      	ldr	r2, [pc, #20]	; (10b28 <main+0x110>)
   10b12:	4913      	ldr	r1, [pc, #76]	; (10b60 <main+0x148>)
   10b14:	4813      	ldr	r0, [pc, #76]	; (10b64 <main+0x14c>)
   10b16:	f003 fd6d 	bl	145f4 <printf>
            led3.toggle();
   10b1a:	4813      	ldr	r0, [pc, #76]	; (10b68 <main+0x150>)
   10b1c:	f7ff fdaa 	bl	10674 <LabGPIO::toggle()>
       }
      
      
      
    // Logic to read if button has been RELEASED and if so, TOGGLE LED state;
  }
   10b20:	e78c      	b.n	10a3c <main+0x24>
   10b22:	bf00      	nop
   10b24:	00010a19 	.word	0x00010a19
   10b28:	000177d0 	.word	0x000177d0
   10b2c:	000175e4 	.word	0x000175e4
   10b30:	00017614 	.word	0x00017614
   10b34:	10000280 	.word	0x10000280
   10b38:	10000278 	.word	0x10000278
   10b3c:	10000284 	.word	0x10000284
   10b40:	000175f0 	.word	0x000175f0
   10b44:	00017654 	.word	0x00017654
   10b48:	1000027c 	.word	0x1000027c
   10b4c:	10000270 	.word	0x10000270
   10b50:	000175fc 	.word	0x000175fc
   10b54:	000176a0 	.word	0x000176a0
   10b58:	10000274 	.word	0x10000274
   10b5c:	10000268 	.word	0x10000268
   10b60:	00017608 	.word	0x00017608
   10b64:	000176ec 	.word	0x000176ec
   10b68:	1000026c 	.word	0x1000026c

00010b6c <Status Wait<Wait(unsigned long long)::{lambda()#1}>(unsigned long long, Wait(unsigned long long)::{lambda()#1})>:
inline Status Wait(uint64_t timeout, F is_done)
   10b6c:	e92d 4830 	stmdb	sp!, {r4, r5, fp, lr}
   10b70:	b088      	sub	sp, #32
   10b72:	4675      	mov	r5, lr
   10b74:	e9cd 0102 	strd	r0, r1, [sp, #8]
   10b78:	f88d 2004 	strb.w	r2, [sp, #4]
   10b7c:	462b      	mov	r3, r5
   10b7e:	4619      	mov	r1, r3
   10b80:	4824      	ldr	r0, [pc, #144]	; (10c14 <Status Wait<Wait(unsigned long long)::{lambda()#1}>(unsigned long long, Wait(unsigned long long)::{lambda()#1})+0xa8>)
   10b82:	f002 fad7 	bl	13134 <__cyg_profile_func_enter>
  uint64_t timeout_time = 0;
   10b86:	f04f 0300 	mov.w	r3, #0
   10b8a:	f04f 0400 	mov.w	r4, #0
   10b8e:	e9cd 3406 	strd	r3, r4, [sp, #24]
  if (timeout == kMaxWait)
   10b92:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
   10b96:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
   10b9a:	bf08      	it	eq
   10b9c:	f1b3 3fff 	cmpeq.w	r3, #4294967295	; 0xffffffff
   10ba0:	d106      	bne.n	10bb0 <Status Wait<Wait(unsigned long long)::{lambda()#1}>(unsigned long long, Wait(unsigned long long)::{lambda()#1})+0x44>
    timeout_time = kMaxWait;
   10ba2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   10ba6:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   10baa:	e9cd 3406 	strd	r3, r4, [sp, #24]
   10bae:	e00b      	b.n	10bc8 <Status Wait<Wait(unsigned long long)::{lambda()#1}>(unsigned long long, Wait(unsigned long long)::{lambda()#1})+0x5c>
    timeout_time = Milliseconds() + timeout;
   10bb0:	f7ff fe6a 	bl	10888 <Milliseconds()>
   10bb4:	460a      	mov	r2, r1
   10bb6:	4601      	mov	r1, r0
   10bb8:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
   10bbc:	eb13 0b01 	adds.w	fp, r3, r1
   10bc0:	eb44 0c02 	adc.w	ip, r4, r2
   10bc4:	e9cd bc06 	strd	fp, ip, [sp, #24]
  Status status = Status::kTimedOut;
   10bc8:	2301      	movs	r3, #1
   10bca:	9305      	str	r3, [sp, #20]
  while (Milliseconds() < timeout_time)
   10bcc:	f7ff fe5c 	bl	10888 <Milliseconds()>
   10bd0:	460a      	mov	r2, r1
   10bd2:	4601      	mov	r1, r0
   10bd4:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
   10bd8:	42a2      	cmp	r2, r4
   10bda:	bf08      	it	eq
   10bdc:	4299      	cmpeq	r1, r3
   10bde:	bf34      	ite	cc
   10be0:	2301      	movcc	r3, #1
   10be2:	2300      	movcs	r3, #0
   10be4:	b2db      	uxtb	r3, r3
   10be6:	2b00      	cmp	r3, #0
   10be8:	d008      	beq.n	10bfc <Status Wait<Wait(unsigned long long)::{lambda()#1}>(unsigned long long, Wait(unsigned long long)::{lambda()#1})+0x90>
    if (is_done())
   10bea:	ab01      	add	r3, sp, #4
   10bec:	4618      	mov	r0, r3
   10bee:	f7ff fe6d 	bl	108cc <Wait(unsigned long long)::{lambda()#1}::operator()() const>
   10bf2:	4603      	mov	r3, r0
   10bf4:	2b00      	cmp	r3, #0
   10bf6:	d0e9      	beq.n	10bcc <Status Wait<Wait(unsigned long long)::{lambda()#1}>(unsigned long long, Wait(unsigned long long)::{lambda()#1})+0x60>
      status = Status::kSuccess;
   10bf8:	2300      	movs	r3, #0
   10bfa:	9305      	str	r3, [sp, #20]
  return status;
   10bfc:	9c05      	ldr	r4, [sp, #20]
   10bfe:	462b      	mov	r3, r5
   10c00:	4619      	mov	r1, r3
   10c02:	4804      	ldr	r0, [pc, #16]	; (10c14 <Status Wait<Wait(unsigned long long)::{lambda()#1}>(unsigned long long, Wait(unsigned long long)::{lambda()#1})+0xa8>)
   10c04:	f002 faaa 	bl	1315c <__cyg_profile_func_exit>
   10c08:	4623      	mov	r3, r4
}
   10c0a:	4618      	mov	r0, r3
   10c0c:	b008      	add	sp, #32
   10c0e:	e8bd 8830 	ldmia.w	sp!, {r4, r5, fp, pc}
   10c12:	bf00      	nop
   10c14:	00010b6d 	.word	0x00010b6d

00010c18 <__static_initialization_and_destruction_0(int, int)>:
  
 }
 void DB3(){
   
      
   10c18:	b510      	push	{r4, lr}
   10c1a:	b082      	sub	sp, #8
   10c1c:	4674      	mov	r4, lr
   10c1e:	9001      	str	r0, [sp, #4]
   10c20:	9100      	str	r1, [sp, #0]
   10c22:	4623      	mov	r3, r4
   10c24:	4619      	mov	r1, r3
   10c26:	481d      	ldr	r0, [pc, #116]	; (10c9c <__static_initialization_and_destruction_0(int, int)+0x84>)
   10c28:	f002 fa84 	bl	13134 <__cyg_profile_func_enter>
   10c2c:	9b01      	ldr	r3, [sp, #4]
   10c2e:	2b01      	cmp	r3, #1
   10c30:	d12c      	bne.n	10c8c <__static_initialization_and_destruction_0(int, int)+0x74>
   10c32:	9b00      	ldr	r3, [sp, #0]
   10c34:	f64f 72ff 	movw	r2, #65535	; 0xffff
   10c38:	4293      	cmp	r3, r2
   10c3a:	d127      	bne.n	10c8c <__static_initialization_and_destruction_0(int, int)+0x74>
  LabGPIO button3(0, 29);
   10c3c:	221d      	movs	r2, #29
   10c3e:	2100      	movs	r1, #0
   10c40:	4817      	ldr	r0, [pc, #92]	; (10ca0 <__static_initialization_and_destruction_0(int, int)+0x88>)
   10c42:	f7ff fb91 	bl	10368 <LabGPIO::LabGPIO(unsigned char, unsigned char)>
  LabGPIO led3(1, 18);
   10c46:	2212      	movs	r2, #18
   10c48:	2101      	movs	r1, #1
   10c4a:	4816      	ldr	r0, [pc, #88]	; (10ca4 <__static_initialization_and_destruction_0(int, int)+0x8c>)
   10c4c:	f7ff fb8c 	bl	10368 <LabGPIO::LabGPIO(unsigned char, unsigned char)>
  LabGPIO button2(0, 30);
   10c50:	221e      	movs	r2, #30
   10c52:	2100      	movs	r1, #0
   10c54:	4814      	ldr	r0, [pc, #80]	; (10ca8 <__static_initialization_and_destruction_0(int, int)+0x90>)
   10c56:	f7ff fb87 	bl	10368 <LabGPIO::LabGPIO(unsigned char, unsigned char)>
  LabGPIO led2(1, 24);
   10c5a:	2218      	movs	r2, #24
   10c5c:	2101      	movs	r1, #1
   10c5e:	4813      	ldr	r0, [pc, #76]	; (10cac <__static_initialization_and_destruction_0(int, int)+0x94>)
   10c60:	f7ff fb82 	bl	10368 <LabGPIO::LabGPIO(unsigned char, unsigned char)>
  LabGPIO button1(1, 15);
   10c64:	220f      	movs	r2, #15
   10c66:	2101      	movs	r1, #1
   10c68:	4811      	ldr	r0, [pc, #68]	; (10cb0 <__static_initialization_and_destruction_0(int, int)+0x98>)
   10c6a:	f7ff fb7d 	bl	10368 <LabGPIO::LabGPIO(unsigned char, unsigned char)>
  LabGPIO led1(1, 26);
   10c6e:	221a      	movs	r2, #26
   10c70:	2101      	movs	r1, #1
   10c72:	4810      	ldr	r0, [pc, #64]	; (10cb4 <__static_initialization_and_destruction_0(int, int)+0x9c>)
   10c74:	f7ff fb78 	bl	10368 <LabGPIO::LabGPIO(unsigned char, unsigned char)>
  LabGPIO button0(1, 19);
   10c78:	2213      	movs	r2, #19
   10c7a:	2101      	movs	r1, #1
   10c7c:	480e      	ldr	r0, [pc, #56]	; (10cb8 <__static_initialization_and_destruction_0(int, int)+0xa0>)
   10c7e:	f7ff fb73 	bl	10368 <LabGPIO::LabGPIO(unsigned char, unsigned char)>
  LabGPIO led0(2, 3);
   10c82:	2203      	movs	r2, #3
   10c84:	2102      	movs	r1, #2
   10c86:	480d      	ldr	r0, [pc, #52]	; (10cbc <__static_initialization_and_destruction_0(int, int)+0xa4>)
   10c88:	f7ff fb6e 	bl	10368 <LabGPIO::LabGPIO(unsigned char, unsigned char)>
   10c8c:	4623      	mov	r3, r4
   10c8e:	4619      	mov	r1, r3
   10c90:	4802      	ldr	r0, [pc, #8]	; (10c9c <__static_initialization_and_destruction_0(int, int)+0x84>)
   10c92:	f002 fa63 	bl	1315c <__cyg_profile_func_exit>
   10c96:	bf00      	nop
   10c98:	b002      	add	sp, #8
   10c9a:	bd10      	pop	{r4, pc}
   10c9c:	00010c19 	.word	0x00010c19
   10ca0:	10000268 	.word	0x10000268
   10ca4:	1000026c 	.word	0x1000026c
   10ca8:	10000270 	.word	0x10000270
   10cac:	10000274 	.word	0x10000274
   10cb0:	10000278 	.word	0x10000278
   10cb4:	1000027c 	.word	0x1000027c
   10cb8:	10000280 	.word	0x10000280
   10cbc:	10000284 	.word	0x10000284

00010cc0 <_GLOBAL__sub_I_button3>:
   10cc0:	b510      	push	{r4, lr}
   10cc2:	4674      	mov	r4, lr
   10cc4:	4623      	mov	r3, r4
   10cc6:	4619      	mov	r1, r3
   10cc8:	4806      	ldr	r0, [pc, #24]	; (10ce4 <_GLOBAL__sub_I_button3+0x24>)
   10cca:	f002 fa33 	bl	13134 <__cyg_profile_func_enter>
   10cce:	f64f 71ff 	movw	r1, #65535	; 0xffff
   10cd2:	2001      	movs	r0, #1
   10cd4:	f7ff ffa0 	bl	10c18 <__static_initialization_and_destruction_0(int, int)>
   10cd8:	4623      	mov	r3, r4
   10cda:	4619      	mov	r1, r3
   10cdc:	4801      	ldr	r0, [pc, #4]	; (10ce4 <_GLOBAL__sub_I_button3+0x24>)
   10cde:	f002 fa3d 	bl	1315c <__cyg_profile_func_exit>
   10ce2:	bd10      	pop	{r4, pc}
   10ce4:	00010cc1 	.word	0x00010cc1

00010ce8 <debug::PrintBacktrace(bool, void*)>:
}

[[gnu::no_instrument_function]]
inline void PrintBacktrace(bool show_make_command = false,
                           void * final_address   = nullptr)
{
   10ce8:	b500      	push	{lr}
   10cea:	b08b      	sub	sp, #44	; 0x2c
   10cec:	4603      	mov	r3, r0
   10cee:	9100      	str	r1, [sp, #0]
   10cf0:	f88d 3007 	strb.w	r3, [sp, #7]
  printf("Stack Depth = %zd\n", GetStackDepth());
   10cf4:	f002 fa54 	bl	131a0 <GetStackDepth()>
   10cf8:	4603      	mov	r3, r0
   10cfa:	4619      	mov	r1, r3
   10cfc:	4831      	ldr	r0, [pc, #196]	; (10dc4 <debug::PrintBacktrace(bool, void*)+0xdc>)
   10cfe:	f003 fc79 	bl	145f4 <printf>
  // stack_depth-1 to ignore PrintBacktrace()
  // PrintBacktrace shouldn't be ignored in profiling because it causes
  // the exit to still fire, which can result in a negative stack_depth
  void ** list_of_called_functions = GetStackTrace();
   10d02:	f002 fa39 	bl	13178 <GetStackTrace()>
   10d06:	9007      	str	r0, [sp, #28]
  size_t stack_depth               = GetStackDepth();
   10d08:	f002 fa4a 	bl	131a0 <GetStackDepth()>
   10d0c:	9006      	str	r0, [sp, #24]
  // Ignore the last function as it is the Backtrace function
  for (size_t pos = 0; pos < stack_depth - 1; pos++)
   10d0e:	2300      	movs	r3, #0
   10d10:	9309      	str	r3, [sp, #36]	; 0x24
   10d12:	9b06      	ldr	r3, [sp, #24]
   10d14:	3b01      	subs	r3, #1
   10d16:	9a09      	ldr	r2, [sp, #36]	; 0x24
   10d18:	429a      	cmp	r2, r3
   10d1a:	d20d      	bcs.n	10d38 <debug::PrintBacktrace(bool, void*)+0x50>
  {
    printf("  #%zu: 0x%p\n", pos, list_of_called_functions[pos]);
   10d1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   10d1e:	009b      	lsls	r3, r3, #2
   10d20:	9a07      	ldr	r2, [sp, #28]
   10d22:	4413      	add	r3, r2
   10d24:	681b      	ldr	r3, [r3, #0]
   10d26:	461a      	mov	r2, r3
   10d28:	9909      	ldr	r1, [sp, #36]	; 0x24
   10d2a:	4827      	ldr	r0, [pc, #156]	; (10dc8 <debug::PrintBacktrace(bool, void*)+0xe0>)
   10d2c:	f003 fc62 	bl	145f4 <printf>
  for (size_t pos = 0; pos < stack_depth - 1; pos++)
   10d30:	9b09      	ldr	r3, [sp, #36]	; 0x24
   10d32:	3301      	adds	r3, #1
   10d34:	9309      	str	r3, [sp, #36]	; 0x24
   10d36:	e7ec      	b.n	10d12 <debug::PrintBacktrace(bool, void*)+0x2a>
  }
  if (final_address != nullptr)
   10d38:	9b00      	ldr	r3, [sp, #0]
   10d3a:	2b00      	cmp	r3, #0
   10d3c:	d006      	beq.n	10d4c <debug::PrintBacktrace(bool, void*)+0x64>
  {
    printf("  #%zu: 0x%p\n", stack_depth - 1, final_address);
   10d3e:	9b06      	ldr	r3, [sp, #24]
   10d40:	3b01      	subs	r3, #1
   10d42:	9a00      	ldr	r2, [sp, #0]
   10d44:	4619      	mov	r1, r3
   10d46:	4820      	ldr	r0, [pc, #128]	; (10dc8 <debug::PrintBacktrace(bool, void*)+0xe0>)
   10d48:	f003 fc54 	bl	145f4 <printf>
  }
  if (show_make_command)
   10d4c:	f89d 3007 	ldrb.w	r3, [sp, #7]
   10d50:	2b00      	cmp	r3, #0
   10d52:	d033      	beq.n	10dbc <debug::PrintBacktrace(bool, void*)+0xd4>
  {
    constexpr const char kBuildType[] =
   10d54:	4a1d      	ldr	r2, [pc, #116]	; (10dcc <debug::PrintBacktrace(bool, void*)+0xe4>)
   10d56:	ab03      	add	r3, sp, #12
   10d58:	ca07      	ldmia	r2, {r0, r1, r2}
   10d5a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#if defined(APPLICATION)
        "application";
#else
        "bootloader";
#endif
    puts("\nRun: the following command in your project directory");
   10d5e:	481c      	ldr	r0, [pc, #112]	; (10dd0 <debug::PrintBacktrace(bool, void*)+0xe8>)
   10d60:	f002 f9b8 	bl	130d4 <puts>
    printf("\n  " SJ2_BOLD_WHITE "make stacktrace-%s TRACES=\"", kBuildType);
   10d64:	ab03      	add	r3, sp, #12
   10d66:	4619      	mov	r1, r3
   10d68:	481a      	ldr	r0, [pc, #104]	; (10dd4 <debug::PrintBacktrace(bool, void*)+0xec>)
   10d6a:	f003 fc43 	bl	145f4 <printf>
    for (size_t pos = 0; pos < stack_depth - 1; pos++)
   10d6e:	2300      	movs	r3, #0
   10d70:	9308      	str	r3, [sp, #32]
   10d72:	9b06      	ldr	r3, [sp, #24]
   10d74:	3b01      	subs	r3, #1
   10d76:	9a08      	ldr	r2, [sp, #32]
   10d78:	429a      	cmp	r2, r3
   10d7a:	d212      	bcs.n	10da2 <debug::PrintBacktrace(bool, void*)+0xba>
    {
      if (pos != 0)
   10d7c:	9b08      	ldr	r3, [sp, #32]
   10d7e:	2b00      	cmp	r3, #0
   10d80:	d002      	beq.n	10d88 <debug::PrintBacktrace(bool, void*)+0xa0>
      {
        putchar(' ');
   10d82:	2020      	movs	r0, #32
   10d84:	f002 f98a 	bl	1309c <putchar>
      }
      printf("0x%p", list_of_called_functions[pos]);
   10d88:	9b08      	ldr	r3, [sp, #32]
   10d8a:	009b      	lsls	r3, r3, #2
   10d8c:	9a07      	ldr	r2, [sp, #28]
   10d8e:	4413      	add	r3, r2
   10d90:	681b      	ldr	r3, [r3, #0]
   10d92:	4619      	mov	r1, r3
   10d94:	4810      	ldr	r0, [pc, #64]	; (10dd8 <debug::PrintBacktrace(bool, void*)+0xf0>)
   10d96:	f003 fc2d 	bl	145f4 <printf>
    for (size_t pos = 0; pos < stack_depth - 1; pos++)
   10d9a:	9b08      	ldr	r3, [sp, #32]
   10d9c:	3301      	adds	r3, #1
   10d9e:	9308      	str	r3, [sp, #32]
   10da0:	e7e7      	b.n	10d72 <debug::PrintBacktrace(bool, void*)+0x8a>
    }
    if (final_address != nullptr)
   10da2:	9b00      	ldr	r3, [sp, #0]
   10da4:	2b00      	cmp	r3, #0
   10da6:	d003      	beq.n	10db0 <debug::PrintBacktrace(bool, void*)+0xc8>
    {
      printf(" 0x%p", final_address);
   10da8:	9900      	ldr	r1, [sp, #0]
   10daa:	480c      	ldr	r0, [pc, #48]	; (10ddc <debug::PrintBacktrace(bool, void*)+0xf4>)
   10dac:	f003 fc22 	bl	145f4 <printf>
    }
    puts("\"\n" SJ2_COLOR_RESET);
   10db0:	480b      	ldr	r0, [pc, #44]	; (10de0 <debug::PrintBacktrace(bool, void*)+0xf8>)
   10db2:	f002 f98f 	bl	130d4 <puts>
    puts(
   10db6:	480b      	ldr	r0, [pc, #44]	; (10de4 <debug::PrintBacktrace(bool, void*)+0xfc>)
   10db8:	f002 f98c 	bl	130d4 <puts>
        "This will report the file and line number that led to this function "
        "being called.");
  }
}
   10dbc:	bf00      	nop
   10dbe:	b00b      	add	sp, #44	; 0x2c
   10dc0:	f85d fb04 	ldr.w	pc, [sp], #4
   10dc4:	000177dc 	.word	0x000177dc
   10dc8:	000177f0 	.word	0x000177f0
   10dcc:	000178cc 	.word	0x000178cc
   10dd0:	00017800 	.word	0x00017800
   10dd4:	00017838 	.word	0x00017838
   10dd8:	00017860 	.word	0x00017860
   10ddc:	00017868 	.word	0x00017868
   10de0:	00017870 	.word	0x00017870
   10de4:	00017878 	.word	0x00017878

00010de8 <SetUptimeFunction(unsigned long long (*)())>:
{
   10de8:	b510      	push	{r4, lr}
   10dea:	b082      	sub	sp, #8
   10dec:	4674      	mov	r4, lr
   10dee:	9001      	str	r0, [sp, #4]
   10df0:	4623      	mov	r3, r4
   10df2:	4619      	mov	r1, r3
   10df4:	4806      	ldr	r0, [pc, #24]	; (10e10 <SetUptimeFunction(unsigned long long (*)())+0x28>)
   10df6:	f002 f99d 	bl	13134 <__cyg_profile_func_enter>
  Uptime = uptime_function;
   10dfa:	4a06      	ldr	r2, [pc, #24]	; (10e14 <SetUptimeFunction(unsigned long long (*)())+0x2c>)
   10dfc:	9b01      	ldr	r3, [sp, #4]
   10dfe:	6013      	str	r3, [r2, #0]
   10e00:	4623      	mov	r3, r4
   10e02:	4619      	mov	r1, r3
   10e04:	4802      	ldr	r0, [pc, #8]	; (10e10 <SetUptimeFunction(unsigned long long (*)())+0x28>)
   10e06:	f002 f9a9 	bl	1315c <__cyg_profile_func_exit>
}
   10e0a:	bf00      	nop
   10e0c:	b002      	add	sp, #8
   10e0e:	bd10      	pop	{r4, pc}
   10e10:	00010de9 	.word	0x00010de9
   10e14:	10000000 	.word	0x10000000

00010e18 <Lpc40xxSystemController::SetClockFrequency(unsigned char)>:

  inline static LPC_SC_TypeDef * system_controller = LPC_SC;

  constexpr Lpc40xxSystemController() {}

  uint32_t SetClockFrequency(uint8_t frequency_in_mhz) override
   10e18:	b500      	push	{lr}
   10e1a:	b085      	sub	sp, #20
   10e1c:	9001      	str	r0, [sp, #4]
   10e1e:	460b      	mov	r3, r1
   10e20:	f88d 3003 	strb.w	r3, [sp, #3]
  {
    uint32_t offset = 0;
   10e24:	2300      	movs	r3, #0
   10e26:	9303      	str	r3, [sp, #12]
    SelectOscillatorSource(OscillatorSource::kIrc);
   10e28:	2100      	movs	r1, #0
   10e2a:	9801      	ldr	r0, [sp, #4]
   10e2c:	f000 f8ce 	bl	10fcc <Lpc40xxSystemController::SelectOscillatorSource(Lpc40xxSystemController::OscillatorSource)>
    if (frequency_in_mhz > 12)
   10e30:	f89d 3003 	ldrb.w	r3, [sp, #3]
   10e34:	2b0c      	cmp	r3, #12
   10e36:	d916      	bls.n	10e66 <Lpc40xxSystemController::SetClockFrequency(unsigned char)+0x4e>
    {
      offset = SetMainPll(PllInput::kIrc, frequency_in_mhz);
   10e38:	f89d 3003 	ldrb.w	r3, [sp, #3]
   10e3c:	b29b      	uxth	r3, r3
   10e3e:	461a      	mov	r2, r3
   10e40:	210c      	movs	r1, #12
   10e42:	9801      	ldr	r0, [sp, #4]
   10e44:	f000 f9ac 	bl	111a0 <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)>
   10e48:	9003      	str	r0, [sp, #12]
      SelectMainClockSource(MainClockSource::kPllClock);
   10e4a:	f44f 7180 	mov.w	r1, #256	; 0x100
   10e4e:	9801      	ldr	r0, [sp, #4]
   10e50:	f000 f8d6 	bl	11000 <Lpc40xxSystemController::SelectMainClockSource(Lpc40xxSystemController::MainClockSource)>
      speed_in_hertz = frequency_in_mhz * 1'000'000;
   10e54:	f89d 3003 	ldrb.w	r3, [sp, #3]
   10e58:	4a10      	ldr	r2, [pc, #64]	; (10e9c <Lpc40xxSystemController::SetClockFrequency(unsigned char)+0x84>)
   10e5a:	fb02 f303 	mul.w	r3, r2, r3
   10e5e:	461a      	mov	r2, r3
   10e60:	4b0f      	ldr	r3, [pc, #60]	; (10ea0 <Lpc40xxSystemController::SetClockFrequency(unsigned char)+0x88>)
   10e62:	601a      	str	r2, [r3, #0]
   10e64:	e006      	b.n	10e74 <Lpc40xxSystemController::SetClockFrequency(unsigned char)+0x5c>
    }
    else
    {
      SelectMainClockSource(MainClockSource::kBaseClock);
   10e66:	2100      	movs	r1, #0
   10e68:	9801      	ldr	r0, [sp, #4]
   10e6a:	f000 f8c9 	bl	11000 <Lpc40xxSystemController::SelectMainClockSource(Lpc40xxSystemController::MainClockSource)>
      speed_in_hertz = kDefaultIRCFrequency;
   10e6e:	4b0c      	ldr	r3, [pc, #48]	; (10ea0 <Lpc40xxSystemController::SetClockFrequency(unsigned char)+0x88>)
   10e70:	4a0c      	ldr	r2, [pc, #48]	; (10ea4 <Lpc40xxSystemController::SetClockFrequency(unsigned char)+0x8c>)
   10e72:	601a      	str	r2, [r3, #0]
    }
    SetCpuClockDivider(kDivideInputBy1);
   10e74:	2101      	movs	r1, #1
   10e76:	9801      	ldr	r0, [sp, #4]
   10e78:	f000 fa4a 	bl	11310 <Lpc40xxSystemController::SetCpuClockDivider(unsigned char)>
    SetPeripheralClockDivider(kDivideInputBy1);
   10e7c:	9b01      	ldr	r3, [sp, #4]
   10e7e:	681b      	ldr	r3, [r3, #0]
   10e80:	3304      	adds	r3, #4
   10e82:	681b      	ldr	r3, [r3, #0]
   10e84:	2101      	movs	r1, #1
   10e86:	9801      	ldr	r0, [sp, #4]
   10e88:	4798      	blx	r3
    SetEmcClockDivider(EmcDivider::kSameSpeedAsCpu);
   10e8a:	2100      	movs	r1, #0
   10e8c:	9801      	ldr	r0, [sp, #4]
   10e8e:	f000 fa73 	bl	11378 <Lpc40xxSystemController::SetEmcClockDivider(Lpc40xxSystemController::EmcDivider)>
    return offset;
   10e92:	9b03      	ldr	r3, [sp, #12]
  }
   10e94:	4618      	mov	r0, r3
   10e96:	b005      	add	sp, #20
   10e98:	f85d fb04 	ldr.w	pc, [sp], #4
   10e9c:	000f4240 	.word	0x000f4240
   10ea0:	10000008 	.word	0x10000008
   10ea4:	00b71b00 	.word	0x00b71b00

00010ea8 <Lpc40xxSystemController::SetPeripheralClockDivider(unsigned char)>:

  void SetPeripheralClockDivider(uint8_t peripheral_divider) override
   10ea8:	b500      	push	{lr}
   10eaa:	b083      	sub	sp, #12
   10eac:	9001      	str	r0, [sp, #4]
   10eae:	460b      	mov	r3, r1
   10eb0:	f88d 3003 	strb.w	r3, [sp, #3]
  {
    SJ2_ASSERT_FATAL(peripheral_divider <= 4, "Divider mustn't exceed 32");
   10eb4:	f89d 3003 	ldrb.w	r3, [sp, #3]
   10eb8:	2b04      	cmp	r3, #4
   10eba:	d90d      	bls.n	10ed8 <Lpc40xxSystemController::SetPeripheralClockDivider(unsigned char)+0x30>
   10ebc:	23ae      	movs	r3, #174	; 0xae
   10ebe:	4a0b      	ldr	r2, [pc, #44]	; (10eec <Lpc40xxSystemController::SetPeripheralClockDivider(unsigned char)+0x44>)
   10ec0:	490b      	ldr	r1, [pc, #44]	; (10ef0 <Lpc40xxSystemController::SetPeripheralClockDivider(unsigned char)+0x48>)
   10ec2:	480c      	ldr	r0, [pc, #48]	; (10ef4 <Lpc40xxSystemController::SetPeripheralClockDivider(unsigned char)+0x4c>)
   10ec4:	f003 fb96 	bl	145f4 <printf>
   10ec8:	480b      	ldr	r0, [pc, #44]	; (10ef8 <Lpc40xxSystemController::SetPeripheralClockDivider(unsigned char)+0x50>)
   10eca:	f002 f903 	bl	130d4 <puts>
   10ece:	2100      	movs	r1, #0
   10ed0:	2001      	movs	r0, #1
   10ed2:	f7ff ff09 	bl	10ce8 <debug::PrintBacktrace(bool, void*)>
   10ed6:	e7fe      	b.n	10ed6 <Lpc40xxSystemController::SetPeripheralClockDivider(unsigned char)+0x2e>
    system_controller->PCLKSEL = peripheral_divider;
   10ed8:	4b08      	ldr	r3, [pc, #32]	; (10efc <Lpc40xxSystemController::SetPeripheralClockDivider(unsigned char)+0x54>)
   10eda:	681b      	ldr	r3, [r3, #0]
   10edc:	f89d 2003 	ldrb.w	r2, [sp, #3]
   10ee0:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
  }
   10ee4:	bf00      	nop
   10ee6:	b003      	add	sp, #12
   10ee8:	f85d fb04 	ldr.w	pc, [sp], #4
   10eec:	00017f64 	.word	0x00017f64
   10ef0:	00017d8c 	.word	0x00017d8c
   10ef4:	000178d8 	.word	0x000178d8
   10ef8:	00017978 	.word	0x00017978
   10efc:	10000004 	.word	0x10000004

00010f00 <Lpc40xxSystemController::GetPeripheralClockDivider() const>:

  uint32_t GetPeripheralClockDivider() const override
   10f00:	b082      	sub	sp, #8
   10f02:	9001      	str	r0, [sp, #4]
  {
#if defined(HOST_TEST)
    return 1;
#else
    return system_controller->PCLKSEL;
   10f04:	4b03      	ldr	r3, [pc, #12]	; (10f14 <Lpc40xxSystemController::GetPeripheralClockDivider() const+0x14>)
   10f06:	681b      	ldr	r3, [r3, #0]
   10f08:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
#endif
  }
   10f0c:	4618      	mov	r0, r3
   10f0e:	b002      	add	sp, #8
   10f10:	4770      	bx	lr
   10f12:	bf00      	nop
   10f14:	10000004 	.word	0x10000004

00010f18 <Lpc40xxSystemController::GetSystemFrequency() const>:

  uint32_t GetSystemFrequency() const override
   10f18:	b082      	sub	sp, #8
   10f1a:	9001      	str	r0, [sp, #4]
  {
#if defined(HOST_TEST)
    return config::kSystemClockRate;
#else
    return speed_in_hertz;
   10f1c:	4b02      	ldr	r3, [pc, #8]	; (10f28 <Lpc40xxSystemController::GetSystemFrequency() const+0x10>)
   10f1e:	681b      	ldr	r3, [r3, #0]
#endif
  }
   10f20:	4618      	mov	r0, r3
   10f22:	b002      	add	sp, #8
   10f24:	4770      	bx	lr
   10f26:	bf00      	nop
   10f28:	10000008 	.word	0x10000008

00010f2c <Lpc40xxSystemController::GetPeripheralFrequency() const>:

  uint32_t GetPeripheralFrequency() const override
   10f2c:	b500      	push	{lr}
   10f2e:	b085      	sub	sp, #20
   10f30:	9001      	str	r0, [sp, #4]
  {
    uint32_t peripheral_clock_divider = GetPeripheralClockDivider();
   10f32:	9b01      	ldr	r3, [sp, #4]
   10f34:	681b      	ldr	r3, [r3, #0]
   10f36:	3308      	adds	r3, #8
   10f38:	681b      	ldr	r3, [r3, #0]
   10f3a:	9801      	ldr	r0, [sp, #4]
   10f3c:	4798      	blx	r3
   10f3e:	9002      	str	r0, [sp, #8]
    uint32_t result = 0;  // return 0 if peripheral_clock_divider == 0
   10f40:	2300      	movs	r3, #0
   10f42:	9303      	str	r3, [sp, #12]
    if (peripheral_clock_divider != 0)
   10f44:	9b02      	ldr	r3, [sp, #8]
   10f46:	2b00      	cmp	r3, #0
   10f48:	d00a      	beq.n	10f60 <Lpc40xxSystemController::GetPeripheralFrequency() const+0x34>
    {
      result = GetSystemFrequency() / peripheral_clock_divider;
   10f4a:	9b01      	ldr	r3, [sp, #4]
   10f4c:	681b      	ldr	r3, [r3, #0]
   10f4e:	330c      	adds	r3, #12
   10f50:	681b      	ldr	r3, [r3, #0]
   10f52:	9801      	ldr	r0, [sp, #4]
   10f54:	4798      	blx	r3
   10f56:	4602      	mov	r2, r0
   10f58:	9b02      	ldr	r3, [sp, #8]
   10f5a:	fbb2 f3f3 	udiv	r3, r2, r3
   10f5e:	9303      	str	r3, [sp, #12]
    }
    return result;
   10f60:	9b03      	ldr	r3, [sp, #12]
  }
   10f62:	4618      	mov	r0, r3
   10f64:	b005      	add	sp, #20
   10f66:	f85d fb04 	ldr.w	pc, [sp], #4
   10f6a:	Address 0x0000000000010f6a is out of bounds.


00010f6c <Lpc40xxSystemController::PowerUpPeripheral(SystemControllerInterface::PeripheralID const&)>:

  void PowerUpPeripheral(const PeripheralID & peripheral_select) override
   10f6c:	b084      	sub	sp, #16
   10f6e:	9001      	str	r0, [sp, #4]
   10f70:	9100      	str	r1, [sp, #0]
  {
    auto power_connection_with_enabled_peripheral =
        system_controller->PCONP | (1 << peripheral_select.device_id);
   10f72:	4b09      	ldr	r3, [pc, #36]	; (10f98 <Lpc40xxSystemController::PowerUpPeripheral(SystemControllerInterface::PeripheralID const&)+0x2c>)
   10f74:	681b      	ldr	r3, [r3, #0]
   10f76:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
   10f7a:	9a00      	ldr	r2, [sp, #0]
   10f7c:	6812      	ldr	r2, [r2, #0]
   10f7e:	2101      	movs	r1, #1
   10f80:	fa01 f202 	lsl.w	r2, r1, r2
   10f84:	4313      	orrs	r3, r2
   10f86:	9303      	str	r3, [sp, #12]

    system_controller->PCONP = power_connection_with_enabled_peripheral;
   10f88:	4b03      	ldr	r3, [pc, #12]	; (10f98 <Lpc40xxSystemController::PowerUpPeripheral(SystemControllerInterface::PeripheralID const&)+0x2c>)
   10f8a:	681b      	ldr	r3, [r3, #0]
   10f8c:	9a03      	ldr	r2, [sp, #12]
   10f8e:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  }
   10f92:	bf00      	nop
   10f94:	b004      	add	sp, #16
   10f96:	4770      	bx	lr
   10f98:	10000004 	.word	0x10000004

00010f9c <Lpc40xxSystemController::PowerDownPeripheral(SystemControllerInterface::PeripheralID const&)>:
  void PowerDownPeripheral(const PeripheralID & peripheral_select) override
   10f9c:	b084      	sub	sp, #16
   10f9e:	9001      	str	r0, [sp, #4]
   10fa0:	9100      	str	r1, [sp, #0]
  {
    auto power_connection_without_enabled_peripheral =
        system_controller->PCONP & (1 << peripheral_select.device_id);
   10fa2:	4b09      	ldr	r3, [pc, #36]	; (10fc8 <Lpc40xxSystemController::PowerDownPeripheral(SystemControllerInterface::PeripheralID const&)+0x2c>)
   10fa4:	681b      	ldr	r3, [r3, #0]
   10fa6:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
   10faa:	9a00      	ldr	r2, [sp, #0]
   10fac:	6812      	ldr	r2, [r2, #0]
   10fae:	2101      	movs	r1, #1
   10fb0:	fa01 f202 	lsl.w	r2, r1, r2
   10fb4:	4013      	ands	r3, r2
   10fb6:	9303      	str	r3, [sp, #12]

    system_controller->PCONP = power_connection_without_enabled_peripheral;
   10fb8:	4b03      	ldr	r3, [pc, #12]	; (10fc8 <Lpc40xxSystemController::PowerDownPeripheral(SystemControllerInterface::PeripheralID const&)+0x2c>)
   10fba:	681b      	ldr	r3, [r3, #0]
   10fbc:	9a03      	ldr	r2, [sp, #12]
   10fbe:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  }
   10fc2:	bf00      	nop
   10fc4:	b004      	add	sp, #16
   10fc6:	4770      	bx	lr
   10fc8:	10000004 	.word	0x10000004

00010fcc <Lpc40xxSystemController::SelectOscillatorSource(Lpc40xxSystemController::OscillatorSource)>:

 private:
  void SelectOscillatorSource(OscillatorSource source)
   10fcc:	b084      	sub	sp, #16
   10fce:	9001      	str	r0, [sp, #4]
   10fd0:	460b      	mov	r3, r1
   10fd2:	f8ad 3002 	strh.w	r3, [sp, #2]
  {
    uint32_t source_bit = static_cast<uint32_t>(source);
   10fd6:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   10fda:	9303      	str	r3, [sp, #12]
    system_controller->CLKSRCSEL =
        (system_controller->CLKSRCSEL & ~(kOscillatorSelect)) | source_bit;
   10fdc:	4b07      	ldr	r3, [pc, #28]	; (10ffc <Lpc40xxSystemController::SelectOscillatorSource(Lpc40xxSystemController::OscillatorSource)+0x30>)
   10fde:	681b      	ldr	r3, [r3, #0]
   10fe0:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
   10fe4:	f023 0101 	bic.w	r1, r3, #1
    system_controller->CLKSRCSEL =
   10fe8:	4b04      	ldr	r3, [pc, #16]	; (10ffc <Lpc40xxSystemController::SelectOscillatorSource(Lpc40xxSystemController::OscillatorSource)+0x30>)
   10fea:	681b      	ldr	r3, [r3, #0]
        (system_controller->CLKSRCSEL & ~(kOscillatorSelect)) | source_bit;
   10fec:	9a03      	ldr	r2, [sp, #12]
   10fee:	430a      	orrs	r2, r1
    system_controller->CLKSRCSEL =
   10ff0:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
  }
   10ff4:	bf00      	nop
   10ff6:	b004      	add	sp, #16
   10ff8:	4770      	bx	lr
   10ffa:	bf00      	nop
   10ffc:	10000004 	.word	0x10000004

00011000 <Lpc40xxSystemController::SelectMainClockSource(Lpc40xxSystemController::MainClockSource)>:

  void SelectMainClockSource(MainClockSource source)
   11000:	b082      	sub	sp, #8
   11002:	9001      	str	r0, [sp, #4]
   11004:	460b      	mov	r3, r1
   11006:	f8ad 3002 	strh.w	r3, [sp, #2]
  {
    system_controller->CCLKSEL =
        (system_controller->CCLKSEL & ~(kBaseClockSelect)) |
   1100a:	4b08      	ldr	r3, [pc, #32]	; (1102c <Lpc40xxSystemController::SelectMainClockSource(Lpc40xxSystemController::MainClockSource)+0x2c>)
   1100c:	681b      	ldr	r3, [r3, #0]
   1100e:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   11012:	f423 7180 	bic.w	r1, r3, #256	; 0x100
        static_cast<uint32_t>(source);
   11016:	f8bd 2002 	ldrh.w	r2, [sp, #2]
    system_controller->CCLKSEL =
   1101a:	4b04      	ldr	r3, [pc, #16]	; (1102c <Lpc40xxSystemController::SelectMainClockSource(Lpc40xxSystemController::MainClockSource)+0x2c>)
   1101c:	681b      	ldr	r3, [r3, #0]
        (system_controller->CCLKSEL & ~(kBaseClockSelect)) |
   1101e:	430a      	orrs	r2, r1
    system_controller->CCLKSEL =
   11020:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
  }
   11024:	bf00      	nop
   11026:	b002      	add	sp, #8
   11028:	4770      	bx	lr
   1102a:	bf00      	nop
   1102c:	10000004 	.word	0x10000004

00011030 <Lpc40xxSystemController::SelectUsbClockSource(Lpc40xxSystemController::UsbSource)>:

  void SelectUsbClockSource(UsbSource usb_clock)
   11030:	b082      	sub	sp, #8
   11032:	9001      	str	r0, [sp, #4]
   11034:	460b      	mov	r3, r1
   11036:	f8ad 3002 	strh.w	r3, [sp, #2]
  {
    system_controller->USBCLKSEL =
        (system_controller->USBCLKSEL & ~(kUsbClockSource)) |
   1103a:	4b08      	ldr	r3, [pc, #32]	; (1105c <Lpc40xxSystemController::SelectUsbClockSource(Lpc40xxSystemController::UsbSource)+0x2c>)
   1103c:	681b      	ldr	r3, [r3, #0]
   1103e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
   11042:	f423 7140 	bic.w	r1, r3, #768	; 0x300
        static_cast<uint32_t>(usb_clock);
   11046:	f8bd 2002 	ldrh.w	r2, [sp, #2]
    system_controller->USBCLKSEL =
   1104a:	4b04      	ldr	r3, [pc, #16]	; (1105c <Lpc40xxSystemController::SelectUsbClockSource(Lpc40xxSystemController::UsbSource)+0x2c>)
   1104c:	681b      	ldr	r3, [r3, #0]
        (system_controller->USBCLKSEL & ~(kUsbClockSource)) |
   1104e:	430a      	orrs	r2, r1
    system_controller->USBCLKSEL =
   11050:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
  }
   11054:	bf00      	nop
   11056:	b002      	add	sp, #8
   11058:	4770      	bx	lr
   1105a:	bf00      	nop
   1105c:	10000004 	.word	0x10000004

00011060 <Lpc40xxSystemController::SelectSpifiClockSource(Lpc40xxSystemController::SpifiSource)>:

  void SelectSpifiClockSource(SpifiSource spifi_clock)
   11060:	b082      	sub	sp, #8
   11062:	9001      	str	r0, [sp, #4]
   11064:	460b      	mov	r3, r1
   11066:	f8ad 3002 	strh.w	r3, [sp, #2]
  {
    system_controller->SPIFISEL =
        (system_controller->SPIFISEL & ~(kSpifiClockSource)) |
   1106a:	4b08      	ldr	r3, [pc, #32]	; (1108c <Lpc40xxSystemController::SelectSpifiClockSource(Lpc40xxSystemController::SpifiSource)+0x2c>)
   1106c:	681b      	ldr	r3, [r3, #0]
   1106e:	f8d3 31b4 	ldr.w	r3, [r3, #436]	; 0x1b4
   11072:	f423 7140 	bic.w	r1, r3, #768	; 0x300
        static_cast<uint32_t>(spifi_clock);
   11076:	f8bd 2002 	ldrh.w	r2, [sp, #2]
    system_controller->SPIFISEL =
   1107a:	4b04      	ldr	r3, [pc, #16]	; (1108c <Lpc40xxSystemController::SelectSpifiClockSource(Lpc40xxSystemController::SpifiSource)+0x2c>)
   1107c:	681b      	ldr	r3, [r3, #0]
        (system_controller->SPIFISEL & ~(kSpifiClockSource)) |
   1107e:	430a      	orrs	r2, r1
    system_controller->SPIFISEL =
   11080:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
  }
   11084:	bf00      	nop
   11086:	b002      	add	sp, #8
   11088:	4770      	bx	lr
   1108a:	bf00      	nop
   1108c:	10000004 	.word	0x10000004

00011090 <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)>:

  uint32_t CalculatePll(PllInput input_frequency, uint16_t desired_speed_in_mhz)
   11090:	b500      	push	{lr}
   11092:	b087      	sub	sp, #28
   11094:	9001      	str	r0, [sp, #4]
   11096:	460b      	mov	r3, r1
   11098:	f8ad 3002 	strh.w	r3, [sp, #2]
   1109c:	4613      	mov	r3, r2
   1109e:	f8ad 3000 	strh.w	r3, [sp]
  {
    SJ2_ASSERT_FATAL(desired_speed_in_mhz < 384 && desired_speed_in_mhz > 12,
   110a2:	f8bd 3000 	ldrh.w	r3, [sp]
   110a6:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
   110aa:	d203      	bcs.n	110b4 <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)+0x24>
   110ac:	f8bd 3000 	ldrh.w	r3, [sp]
   110b0:	2b0c      	cmp	r3, #12
   110b2:	d80d      	bhi.n	110d0 <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)+0x40>
   110b4:	23ff      	movs	r3, #255	; 0xff
   110b6:	4a34      	ldr	r2, [pc, #208]	; (11188 <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)+0xf8>)
   110b8:	4934      	ldr	r1, [pc, #208]	; (1118c <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)+0xfc>)
   110ba:	4835      	ldr	r0, [pc, #212]	; (11190 <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)+0x100>)
   110bc:	f003 fa9a 	bl	145f4 <printf>
   110c0:	4834      	ldr	r0, [pc, #208]	; (11194 <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)+0x104>)
   110c2:	f002 f807 	bl	130d4 <puts>
   110c6:	2100      	movs	r1, #0
   110c8:	2001      	movs	r0, #1
   110ca:	f7ff fe0d 	bl	10ce8 <debug::PrintBacktrace(bool, void*)>
   110ce:	e7fe      	b.n	110ce <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)+0x3e>
                     "Frequency must be lower than 384 MHz"
                     "and greater than or equal to 12 MHz");
    bool calculating = true;
   110d0:	2301      	movs	r3, #1
   110d2:	f88d 3017 	strb.w	r3, [sp, #23]
    uint32_t multiplier_value;
    if ((desired_speed_in_mhz % static_cast<uint16_t>(input_frequency)) >= 1)
   110d6:	f8bd 3000 	ldrh.w	r3, [sp]
   110da:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   110de:	fbb3 f1f2 	udiv	r1, r3, r2
   110e2:	fb02 f201 	mul.w	r2, r2, r1
   110e6:	1a9b      	subs	r3, r3, r2
   110e8:	b29b      	uxth	r3, r3
   110ea:	2b00      	cmp	r3, #0
   110ec:	d009      	beq.n	11102 <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)+0x72>
    {
      multiplier_value = static_cast<uint32_t>(
          (desired_speed_in_mhz / static_cast<uint16_t>(input_frequency)) + 1);
   110ee:	f8bd 2000 	ldrh.w	r2, [sp]
   110f2:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   110f6:	fbb2 f3f3 	udiv	r3, r2, r3
   110fa:	b29b      	uxth	r3, r3
   110fc:	3301      	adds	r3, #1
      multiplier_value = static_cast<uint32_t>(
   110fe:	9304      	str	r3, [sp, #16]
   11100:	e007      	b.n	11112 <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)+0x82>
    }
    else
    {
      multiplier_value = static_cast<uint32_t>(
          desired_speed_in_mhz / static_cast<uint16_t>(input_frequency));
   11102:	f8bd 2000 	ldrh.w	r2, [sp]
   11106:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   1110a:	fbb2 f3f3 	udiv	r3, r2, r3
   1110e:	b29b      	uxth	r3, r3
      multiplier_value = static_cast<uint32_t>(
   11110:	9304      	str	r3, [sp, #16]
    }
    uint16_t divider_value = 1;
   11112:	2301      	movs	r3, #1
   11114:	f8ad 300e 	strh.w	r3, [sp, #14]
    while (calculating)
   11118:	f89d 3017 	ldrb.w	r3, [sp, #23]
   1111c:	2b00      	cmp	r3, #0
   1111e:	d02e      	beq.n	1117e <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)+0xee>
    {
      uint16_t current_controlled_oscillator_frequency;
      current_controlled_oscillator_frequency = static_cast<uint16_t>(
   11120:	9b04      	ldr	r3, [sp, #16]
   11122:	b29b      	uxth	r3, r3
   11124:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   11128:	fb12 f303 	smulbb	r3, r2, r3
   1112c:	b29b      	uxth	r3, r3
   1112e:	f8bd 200e 	ldrh.w	r2, [sp, #14]
   11132:	fb12 f303 	smulbb	r3, r2, r3
   11136:	b29b      	uxth	r3, r3
   11138:	005b      	lsls	r3, r3, #1
   1113a:	f8ad 300c 	strh.w	r3, [sp, #12]
          (static_cast<uint16_t>(input_frequency) * multiplier_value * 2) *
          divider_value);
      if (current_controlled_oscillator_frequency >= 156)
   1113e:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   11142:	2b9b      	cmp	r3, #155	; 0x9b
   11144:	d903      	bls.n	1114e <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)+0xbe>
      {
        calculating = false;
   11146:	2300      	movs	r3, #0
   11148:	f88d 3017 	strb.w	r3, [sp, #23]
   1114c:	e7e4      	b.n	11118 <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)+0x88>
      }
      else
      {
        divider_value = static_cast<uint16_t>(divider_value * 2);
   1114e:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   11152:	005b      	lsls	r3, r3, #1
   11154:	f8ad 300e 	strh.w	r3, [sp, #14]
        SJ2_ASSERT_FATAL(divider_value < 8,
   11158:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   1115c:	2b07      	cmp	r3, #7
   1115e:	d9db      	bls.n	11118 <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)+0x88>
   11160:	f240 131b 	movw	r3, #283	; 0x11b
   11164:	4a08      	ldr	r2, [pc, #32]	; (11188 <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)+0xf8>)
   11166:	490c      	ldr	r1, [pc, #48]	; (11198 <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)+0x108>)
   11168:	480c      	ldr	r0, [pc, #48]	; (1119c <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)+0x10c>)
   1116a:	f003 fa43 	bl	145f4 <printf>
   1116e:	4809      	ldr	r0, [pc, #36]	; (11194 <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)+0x104>)
   11170:	f001 ffb0 	bl	130d4 <puts>
   11174:	2100      	movs	r1, #0
   11176:	2001      	movs	r0, #1
   11178:	f7ff fdb6 	bl	10ce8 <debug::PrintBacktrace(bool, void*)>
   1117c:	e7fe      	b.n	1117c <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)+0xec>
                         "PLL divider value went out of bounds");
      }
    }

    return multiplier_value;
   1117e:	9b04      	ldr	r3, [sp, #16]
  }
   11180:	4618      	mov	r0, r3
   11182:	b007      	add	sp, #28
   11184:	f85d fb04 	ldr.w	pc, [sp], #4
   11188:	0001800c 	.word	0x0001800c
   1118c:	00017da4 	.word	0x00017da4
   11190:	00017990 	.word	0x00017990
   11194:	00017978 	.word	0x00017978
   11198:	00017dbc 	.word	0x00017dbc
   1119c:	00017a80 	.word	0x00017a80

000111a0 <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)>:

  uint32_t SetMainPll(PllInput input_frequency, uint16_t desired_speed_in_mhz)
   111a0:	b510      	push	{r4, lr}
   111a2:	b08a      	sub	sp, #40	; 0x28
   111a4:	9001      	str	r0, [sp, #4]
   111a6:	460b      	mov	r3, r1
   111a8:	f8ad 3002 	strh.w	r3, [sp, #2]
   111ac:	4613      	mov	r3, r2
   111ae:	f8ad 3000 	strh.w	r3, [sp]
  {
    uint16_t divider_value = 1;
   111b2:	2301      	movs	r3, #1
   111b4:	f8ad 301a 	strh.w	r3, [sp, #26]
    uint64_t timeout_time  = Milliseconds() + kDefaultTimeout;
   111b8:	f7ff fb66 	bl	10888 <Milliseconds()>
   111bc:	460a      	mov	r2, r1
   111be:	4601      	mov	r1, r0
   111c0:	f511 737a 	adds.w	r3, r1, #1000	; 0x3e8
   111c4:	f142 0400 	adc.w	r4, r2, #0
   111c8:	e9cd 3404 	strd	r3, r4, [sp, #16]
    uint64_t current_time  = Milliseconds();
   111cc:	f7ff fb5c 	bl	10888 <Milliseconds()>
   111d0:	e9cd 0108 	strd	r0, r1, [sp, #32]
    uint32_t multiplier_value =
        CalculatePll(input_frequency, desired_speed_in_mhz);
   111d4:	f8bd 2000 	ldrh.w	r2, [sp]
   111d8:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   111dc:	4619      	mov	r1, r3
   111de:	9801      	ldr	r0, [sp, #4]
   111e0:	f7ff ff56 	bl	11090 <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)>
   111e4:	9003      	str	r0, [sp, #12]
    uint32_t actual_speed =
        static_cast<uint32_t>(input_frequency) * multiplier_value;
   111e6:	f8bd 2002 	ldrh.w	r2, [sp, #2]
    uint32_t actual_speed =
   111ea:	9b03      	ldr	r3, [sp, #12]
   111ec:	fb02 f303 	mul.w	r3, r2, r3
   111f0:	9307      	str	r3, [sp, #28]
    // TO DO: use registers to retreive values
    SelectOscillatorSource(OscillatorSource::kIrc);
   111f2:	2100      	movs	r1, #0
   111f4:	9801      	ldr	r0, [sp, #4]
   111f6:	f7ff fee9 	bl	10fcc <Lpc40xxSystemController::SelectOscillatorSource(Lpc40xxSystemController::OscillatorSource)>
    SelectMainClockSource(MainClockSource::kBaseClock);
   111fa:	2100      	movs	r1, #0
   111fc:	9801      	ldr	r0, [sp, #4]
   111fe:	f7ff feff 	bl	11000 <Lpc40xxSystemController::SelectMainClockSource(Lpc40xxSystemController::MainClockSource)>
    SelectUsbClockSource(UsbSource::kBaseClock);
   11202:	2100      	movs	r1, #0
   11204:	9801      	ldr	r0, [sp, #4]
   11206:	f7ff ff13 	bl	11030 <Lpc40xxSystemController::SelectUsbClockSource(Lpc40xxSystemController::UsbSource)>
    SelectSpifiClockSource(SpifiSource::kBaseClock);
   1120a:	2100      	movs	r1, #0
   1120c:	9801      	ldr	r0, [sp, #4]
   1120e:	f7ff ff27 	bl	11060 <Lpc40xxSystemController::SelectSpifiClockSource(Lpc40xxSystemController::SpifiSource)>
    // must subtract 1 from multiplier value as specified in datasheet
    system_controller->PLL0CFG =
        (system_controller->PLL0CFG & ~kClearPllMultiplier) |
   11212:	4b3a      	ldr	r3, [pc, #232]	; (112fc <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0x15c>)
   11214:	681b      	ldr	r3, [r3, #0]
   11216:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   1121a:	f023 011f 	bic.w	r1, r3, #31
        (multiplier_value - 1);
   1121e:	9b03      	ldr	r3, [sp, #12]
   11220:	1e5a      	subs	r2, r3, #1
    system_controller->PLL0CFG =
   11222:	4b36      	ldr	r3, [pc, #216]	; (112fc <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0x15c>)
   11224:	681b      	ldr	r3, [r3, #0]
        (system_controller->PLL0CFG & ~kClearPllMultiplier) |
   11226:	430a      	orrs	r2, r1
    system_controller->PLL0CFG =
   11228:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    system_controller->PLL0CFG =
        (system_controller->PLL0CFG & ~kClearPllDivider) | (divider_value << 5);
   1122c:	4b33      	ldr	r3, [pc, #204]	; (112fc <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0x15c>)
   1122e:	681b      	ldr	r3, [r3, #0]
   11230:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   11234:	f023 0260 	bic.w	r2, r3, #96	; 0x60
   11238:	f8bd 301a 	ldrh.w	r3, [sp, #26]
   1123c:	015b      	lsls	r3, r3, #5
   1123e:	4619      	mov	r1, r3
    system_controller->PLL0CFG =
   11240:	4b2e      	ldr	r3, [pc, #184]	; (112fc <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0x15c>)
   11242:	681b      	ldr	r3, [r3, #0]
        (system_controller->PLL0CFG & ~kClearPllDivider) | (divider_value << 5);
   11244:	430a      	orrs	r2, r1
    system_controller->PLL0CFG =
   11246:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    system_controller->PLL0CON |= kEnablePll;
   1124a:	4b2c      	ldr	r3, [pc, #176]	; (112fc <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0x15c>)
   1124c:	681b      	ldr	r3, [r3, #0]
   1124e:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
   11252:	4b2a      	ldr	r3, [pc, #168]	; (112fc <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0x15c>)
   11254:	681b      	ldr	r3, [r3, #0]
   11256:	f042 0201 	orr.w	r2, r2, #1
   1125a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    // nessecary feed sequence to ensure the changes are intentional
    system_controller->PLL0FEED = 0xAA;
   1125e:	4b27      	ldr	r3, [pc, #156]	; (112fc <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0x15c>)
   11260:	681b      	ldr	r3, [r3, #0]
   11262:	22aa      	movs	r2, #170	; 0xaa
   11264:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    system_controller->PLL0FEED = 0x55;
   11268:	4b24      	ldr	r3, [pc, #144]	; (112fc <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0x15c>)
   1126a:	681b      	ldr	r3, [r3, #0]
   1126c:	2255      	movs	r2, #85	; 0x55
   1126e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    while (!(system_controller->PLL0STAT >> kPlock & 1) &&
   11272:	4b22      	ldr	r3, [pc, #136]	; (112fc <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0x15c>)
   11274:	681b      	ldr	r3, [r3, #0]
   11276:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   1127a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
   1127e:	2b00      	cmp	r3, #0
   11280:	d109      	bne.n	11296 <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0xf6>
   11282:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
   11286:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
   1128a:	42a2      	cmp	r2, r4
   1128c:	bf08      	it	eq
   1128e:	4299      	cmpeq	r1, r3
   11290:	d201      	bcs.n	11296 <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0xf6>
   11292:	2301      	movs	r3, #1
   11294:	e000      	b.n	11298 <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0xf8>
   11296:	2300      	movs	r3, #0
   11298:	2b00      	cmp	r3, #0
   1129a:	d004      	beq.n	112a6 <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0x106>
           (current_time < timeout_time))
    {
      current_time = Milliseconds();
   1129c:	f7ff faf4 	bl	10888 <Milliseconds()>
   112a0:	e9cd 0108 	strd	r0, r1, [sp, #32]
    while (!(system_controller->PLL0STAT >> kPlock & 1) &&
   112a4:	e7e5      	b.n	11272 <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0xd2>
    }
    if (!(system_controller->PLL0STAT >> kPlock & 1) &&
   112a6:	4b15      	ldr	r3, [pc, #84]	; (112fc <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0x15c>)
   112a8:	681b      	ldr	r3, [r3, #0]
   112aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   112ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
   112b2:	2b00      	cmp	r3, #0
   112b4:	d109      	bne.n	112ca <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0x12a>
   112b6:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
   112ba:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
   112be:	42a2      	cmp	r2, r4
   112c0:	bf08      	it	eq
   112c2:	4299      	cmpeq	r1, r3
   112c4:	d301      	bcc.n	112ca <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0x12a>
   112c6:	2301      	movs	r3, #1
   112c8:	e000      	b.n	112cc <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0x12c>
   112ca:	2300      	movs	r3, #0
   112cc:	2b00      	cmp	r3, #0
   112ce:	d00e      	beq.n	112ee <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0x14e>
        (current_time >= timeout_time))
    {
      SJ2_ASSERT_FATAL(false,
   112d0:	f240 1343 	movw	r3, #323	; 0x143
   112d4:	4a0a      	ldr	r2, [pc, #40]	; (11300 <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0x160>)
   112d6:	490b      	ldr	r1, [pc, #44]	; (11304 <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0x164>)
   112d8:	480b      	ldr	r0, [pc, #44]	; (11308 <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0x168>)
   112da:	f003 f98b 	bl	145f4 <printf>
   112de:	480b      	ldr	r0, [pc, #44]	; (1130c <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0x16c>)
   112e0:	f001 fef8 	bl	130d4 <puts>
   112e4:	2100      	movs	r1, #0
   112e6:	2001      	movs	r0, #1
   112e8:	f7ff fcfe 	bl	10ce8 <debug::PrintBacktrace(bool, void*)>
   112ec:	e7fe      	b.n	112ec <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0x14c>
                       "PLL lock could not be established before timeout");
      actual_speed = kDefaultIRCFrequency;
    }
    return (actual_speed - desired_speed_in_mhz);
   112ee:	f8bd 3000 	ldrh.w	r3, [sp]
   112f2:	9a07      	ldr	r2, [sp, #28]
   112f4:	1ad3      	subs	r3, r2, r3
  }
   112f6:	4618      	mov	r0, r3
   112f8:	b00a      	add	sp, #40	; 0x28
   112fa:	bd10      	pop	{r4, pc}
   112fc:	10000004 	.word	0x10000004
   11300:	00017fb0 	.word	0x00017fb0
   11304:	00017dd4 	.word	0x00017dd4
   11308:	00017b28 	.word	0x00017b28
   1130c:	00017978 	.word	0x00017978

00011310 <Lpc40xxSystemController::SetCpuClockDivider(unsigned char)>:
                       "PLL lock could not be established before timeout");
    }
    return (actual_speed - desired_speed_in_mhz);
  }

  void SetCpuClockDivider(uint8_t cpu_divider)
   11310:	b500      	push	{lr}
   11312:	b083      	sub	sp, #12
   11314:	9001      	str	r0, [sp, #4]
   11316:	460b      	mov	r3, r1
   11318:	f88d 3003 	strb.w	r3, [sp, #3]
  {
    SJ2_ASSERT_FATAL(cpu_divider < 32, "Divider mustn't exceed 32");
   1131c:	f89d 3003 	ldrb.w	r3, [sp, #3]
   11320:	2b1f      	cmp	r3, #31
   11322:	d90e      	bls.n	11342 <Lpc40xxSystemController::SetCpuClockDivider(unsigned char)+0x32>
   11324:	f240 136f 	movw	r3, #367	; 0x16f
   11328:	4a0e      	ldr	r2, [pc, #56]	; (11364 <Lpc40xxSystemController::SetCpuClockDivider(unsigned char)+0x54>)
   1132a:	490f      	ldr	r1, [pc, #60]	; (11368 <Lpc40xxSystemController::SetCpuClockDivider(unsigned char)+0x58>)
   1132c:	480f      	ldr	r0, [pc, #60]	; (1136c <Lpc40xxSystemController::SetCpuClockDivider(unsigned char)+0x5c>)
   1132e:	f003 f961 	bl	145f4 <printf>
   11332:	480f      	ldr	r0, [pc, #60]	; (11370 <Lpc40xxSystemController::SetCpuClockDivider(unsigned char)+0x60>)
   11334:	f001 fece 	bl	130d4 <puts>
   11338:	2100      	movs	r1, #0
   1133a:	2001      	movs	r0, #1
   1133c:	f7ff fcd4 	bl	10ce8 <debug::PrintBacktrace(bool, void*)>
   11340:	e7fe      	b.n	11340 <Lpc40xxSystemController::SetCpuClockDivider(unsigned char)+0x30>
    system_controller->CCLKSEL =
        (system_controller->CCLKSEL & ~kClearCpuDivider) | cpu_divider;
   11342:	4b0c      	ldr	r3, [pc, #48]	; (11374 <Lpc40xxSystemController::SetCpuClockDivider(unsigned char)+0x64>)
   11344:	681b      	ldr	r3, [r3, #0]
   11346:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   1134a:	f023 011f 	bic.w	r1, r3, #31
   1134e:	f89d 2003 	ldrb.w	r2, [sp, #3]
    system_controller->CCLKSEL =
   11352:	4b08      	ldr	r3, [pc, #32]	; (11374 <Lpc40xxSystemController::SetCpuClockDivider(unsigned char)+0x64>)
   11354:	681b      	ldr	r3, [r3, #0]
        (system_controller->CCLKSEL & ~kClearCpuDivider) | cpu_divider;
   11356:	430a      	orrs	r2, r1
    system_controller->CCLKSEL =
   11358:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
  }
   1135c:	bf00      	nop
   1135e:	b003      	add	sp, #12
   11360:	f85d fb04 	ldr.w	pc, [sp], #4
   11364:	00018068 	.word	0x00018068
   11368:	00017dec 	.word	0x00017dec
   1136c:	00017bd0 	.word	0x00017bd0
   11370:	00017978 	.word	0x00017978
   11374:	10000004 	.word	0x10000004

00011378 <Lpc40xxSystemController::SetEmcClockDivider(Lpc40xxSystemController::EmcDivider)>:

  void SetEmcClockDivider(EmcDivider emc_divider)
   11378:	b082      	sub	sp, #8
   1137a:	9001      	str	r0, [sp, #4]
   1137c:	460b      	mov	r3, r1
   1137e:	f88d 3003 	strb.w	r3, [sp, #3]
  {
    system_controller->EMCCLKSEL =
        (system_controller->EMCCLKSEL & ~kClearEmcDivider) |
   11382:	4b08      	ldr	r3, [pc, #32]	; (113a4 <Lpc40xxSystemController::SetEmcClockDivider(Lpc40xxSystemController::EmcDivider)+0x2c>)
   11384:	681b      	ldr	r3, [r3, #0]
   11386:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   1138a:	f023 0101 	bic.w	r1, r3, #1
        static_cast<uint8_t>(emc_divider);
   1138e:	f89d 2003 	ldrb.w	r2, [sp, #3]
    system_controller->EMCCLKSEL =
   11392:	4b04      	ldr	r3, [pc, #16]	; (113a4 <Lpc40xxSystemController::SetEmcClockDivider(Lpc40xxSystemController::EmcDivider)+0x2c>)
   11394:	681b      	ldr	r3, [r3, #0]
        (system_controller->EMCCLKSEL & ~kClearEmcDivider) |
   11396:	430a      	orrs	r2, r1
    system_controller->EMCCLKSEL =
   11398:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }
   1139c:	bf00      	nop
   1139e:	b002      	add	sp, #8
   113a0:	4770      	bx	lr
   113a2:	bf00      	nop
   113a4:	10000004 	.word	0x10000004

000113a8 <SystemTimer::DisableTimer()>:
  /// system_timer_isr defaults to nullptr. The actual SystemTickHandler should
  /// check if the isr is set to nullptr, and if it is, turn off the timer, if
  /// set a proper function then execute it.
  inline static IsrPointer system_timer_isr = nullptr;
  /// WARNING: Doing so will most likely disable FreeRTOS
  static void DisableTimer()
   113a8:	b510      	push	{r4, lr}
   113aa:	4674      	mov	r4, lr
   113ac:	4623      	mov	r3, r4
   113ae:	4619      	mov	r1, r3
   113b0:	480a      	ldr	r0, [pc, #40]	; (113dc <SystemTimer::DisableTimer()+0x34>)
   113b2:	f001 febf 	bl	13134 <__cyg_profile_func_enter>
  {
    sys_tick->LOAD = 0;
   113b6:	4b0a      	ldr	r3, [pc, #40]	; (113e0 <SystemTimer::DisableTimer()+0x38>)
   113b8:	681b      	ldr	r3, [r3, #0]
   113ba:	2200      	movs	r2, #0
   113bc:	605a      	str	r2, [r3, #4]
    sys_tick->VAL  = 0;
   113be:	4b08      	ldr	r3, [pc, #32]	; (113e0 <SystemTimer::DisableTimer()+0x38>)
   113c0:	681b      	ldr	r3, [r3, #0]
   113c2:	2200      	movs	r2, #0
   113c4:	609a      	str	r2, [r3, #8]
    sys_tick->CTRL = 0;
   113c6:	4b06      	ldr	r3, [pc, #24]	; (113e0 <SystemTimer::DisableTimer()+0x38>)
   113c8:	681b      	ldr	r3, [r3, #0]
   113ca:	2200      	movs	r2, #0
   113cc:	601a      	str	r2, [r3, #0]
   113ce:	4623      	mov	r3, r4
   113d0:	4619      	mov	r1, r3
   113d2:	4802      	ldr	r0, [pc, #8]	; (113dc <SystemTimer::DisableTimer()+0x34>)
   113d4:	f001 fec2 	bl	1315c <__cyg_profile_func_exit>
  }
   113d8:	bf00      	nop
   113da:	bd10      	pop	{r4, pc}
   113dc:	000113a9 	.word	0x000113a9
   113e0:	1000000c 	.word	0x1000000c

000113e4 <SystemTimer::SystemTimerHandler()>:
  static void SystemTimerHandler()
   113e4:	b510      	push	{r4, lr}
   113e6:	4674      	mov	r4, lr
   113e8:	4623      	mov	r3, r4
   113ea:	4619      	mov	r1, r3
   113ec:	4808      	ldr	r0, [pc, #32]	; (11410 <SystemTimer::SystemTimerHandler()+0x2c>)
   113ee:	f001 fea1 	bl	13134 <__cyg_profile_func_enter>
  {
    // This assumes that SysTickHandler is called every millisecond.
    // Changing that frequency will distort the milliseconds time.
    if (system_timer_isr != nullptr)
   113f2:	4b08      	ldr	r3, [pc, #32]	; (11414 <SystemTimer::SystemTimerHandler()+0x30>)
   113f4:	681b      	ldr	r3, [r3, #0]
   113f6:	2b00      	cmp	r3, #0
   113f8:	d002      	beq.n	11400 <SystemTimer::SystemTimerHandler()+0x1c>
    {
      system_timer_isr();
   113fa:	4b06      	ldr	r3, [pc, #24]	; (11414 <SystemTimer::SystemTimerHandler()+0x30>)
   113fc:	681b      	ldr	r3, [r3, #0]
   113fe:	4798      	blx	r3
   11400:	4623      	mov	r3, r4
   11402:	4619      	mov	r1, r3
   11404:	4802      	ldr	r0, [pc, #8]	; (11410 <SystemTimer::SystemTimerHandler()+0x2c>)
   11406:	f001 fea9 	bl	1315c <__cyg_profile_func_exit>
    }
  }
   1140a:	bf00      	nop
   1140c:	bd10      	pop	{r4, pc}
   1140e:	bf00      	nop
   11410:	000113e5 	.word	0x000113e5
   11414:	10000288 	.word	0x10000288

00011418 <SystemTimer::SetIsrFunction(void (*)())>:
  constexpr SystemTimer() {}
  void SetIsrFunction(IsrPointer isr) override
   11418:	b510      	push	{r4, lr}
   1141a:	b082      	sub	sp, #8
   1141c:	4674      	mov	r4, lr
   1141e:	9001      	str	r0, [sp, #4]
   11420:	9100      	str	r1, [sp, #0]
   11422:	4623      	mov	r3, r4
   11424:	4619      	mov	r1, r3
   11426:	4807      	ldr	r0, [pc, #28]	; (11444 <SystemTimer::SetIsrFunction(void (*)())+0x2c>)
   11428:	f001 fe84 	bl	13134 <__cyg_profile_func_enter>
  {
    system_timer_isr = isr;
   1142c:	4a06      	ldr	r2, [pc, #24]	; (11448 <SystemTimer::SetIsrFunction(void (*)())+0x30>)
   1142e:	9b00      	ldr	r3, [sp, #0]
   11430:	6013      	str	r3, [r2, #0]
   11432:	4623      	mov	r3, r4
   11434:	4619      	mov	r1, r3
   11436:	4803      	ldr	r0, [pc, #12]	; (11444 <SystemTimer::SetIsrFunction(void (*)())+0x2c>)
   11438:	f001 fe90 	bl	1315c <__cyg_profile_func_exit>
  }
   1143c:	bf00      	nop
   1143e:	b002      	add	sp, #8
   11440:	bd10      	pop	{r4, pc}
   11442:	bf00      	nop
   11444:	00011419 	.word	0x00011419
   11448:	10000288 	.word	0x10000288

0001144c <SystemTimer::StartTimer()>:
  bool StartTimer() override
   1144c:	b530      	push	{r4, r5, lr}
   1144e:	b085      	sub	sp, #20
   11450:	4675      	mov	r5, lr
   11452:	9001      	str	r0, [sp, #4]
   11454:	462b      	mov	r3, r5
   11456:	4619      	mov	r1, r3
   11458:	4820      	ldr	r0, [pc, #128]	; (114dc <SystemTimer::StartTimer()+0x90>)
   1145a:	f001 fe6b 	bl	13134 <__cyg_profile_func_enter>
  {
    bool successful = false;
   1145e:	2300      	movs	r3, #0
   11460:	f88d 300f 	strb.w	r3, [sp, #15]
    if (sys_tick->LOAD != 0)
   11464:	4b1e      	ldr	r3, [pc, #120]	; (114e0 <SystemTimer::StartTimer()+0x94>)
   11466:	681b      	ldr	r3, [r3, #0]
   11468:	685b      	ldr	r3, [r3, #4]
   1146a:	2b00      	cmp	r3, #0
   1146c:	bf14      	ite	ne
   1146e:	2301      	movne	r3, #1
   11470:	2300      	moveq	r3, #0
   11472:	b2db      	uxtb	r3, r3
   11474:	2b00      	cmp	r3, #0
   11476:	d01e      	beq.n	114b6 <SystemTimer::StartTimer()+0x6a>
    {
      sys_tick->VAL = 0;
   11478:	4b19      	ldr	r3, [pc, #100]	; (114e0 <SystemTimer::StartTimer()+0x94>)
   1147a:	681b      	ldr	r3, [r3, #0]
   1147c:	2200      	movs	r2, #0
   1147e:	609a      	str	r2, [r3, #8]
      sys_tick->CTRL |= (1 << ControlBitMap::kTickInterupt);
   11480:	4b17      	ldr	r3, [pc, #92]	; (114e0 <SystemTimer::StartTimer()+0x94>)
   11482:	681b      	ldr	r3, [r3, #0]
   11484:	681a      	ldr	r2, [r3, #0]
   11486:	4b16      	ldr	r3, [pc, #88]	; (114e0 <SystemTimer::StartTimer()+0x94>)
   11488:	681b      	ldr	r3, [r3, #0]
   1148a:	f042 0202 	orr.w	r2, r2, #2
   1148e:	601a      	str	r2, [r3, #0]
      sys_tick->CTRL |= (1 << ControlBitMap::kEnableCounter);
   11490:	4b13      	ldr	r3, [pc, #76]	; (114e0 <SystemTimer::StartTimer()+0x94>)
   11492:	681b      	ldr	r3, [r3, #0]
   11494:	681a      	ldr	r2, [r3, #0]
   11496:	4b12      	ldr	r3, [pc, #72]	; (114e0 <SystemTimer::StartTimer()+0x94>)
   11498:	681b      	ldr	r3, [r3, #0]
   1149a:	f042 0201 	orr.w	r2, r2, #1
   1149e:	601a      	str	r2, [r3, #0]
      sys_tick->CTRL |= (1 << ControlBitMap::kClkSource);
   114a0:	4b0f      	ldr	r3, [pc, #60]	; (114e0 <SystemTimer::StartTimer()+0x94>)
   114a2:	681b      	ldr	r3, [r3, #0]
   114a4:	681a      	ldr	r2, [r3, #0]
   114a6:	4b0e      	ldr	r3, [pc, #56]	; (114e0 <SystemTimer::StartTimer()+0x94>)
   114a8:	681b      	ldr	r3, [r3, #0]
   114aa:	f042 0204 	orr.w	r2, r2, #4
   114ae:	601a      	str	r2, [r3, #0]
      successful = true;
   114b0:	2301      	movs	r3, #1
   114b2:	f88d 300f 	strb.w	r3, [sp, #15]
    }
    RegisterIsr(SysTick_IRQn, SystemTimerHandler);
   114b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   114ba:	2201      	movs	r2, #1
   114bc:	4909      	ldr	r1, [pc, #36]	; (114e4 <SystemTimer::StartTimer()+0x98>)
   114be:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   114c2:	f001 fd0f 	bl	12ee4 <RegisterIsr(IRQn, void (*)(), bool, long)>
    return successful;
   114c6:	f89d 400f 	ldrb.w	r4, [sp, #15]
   114ca:	462b      	mov	r3, r5
   114cc:	4619      	mov	r1, r3
   114ce:	4803      	ldr	r0, [pc, #12]	; (114dc <SystemTimer::StartTimer()+0x90>)
   114d0:	f001 fe44 	bl	1315c <__cyg_profile_func_exit>
   114d4:	4623      	mov	r3, r4
  }
   114d6:	4618      	mov	r0, r3
   114d8:	b005      	add	sp, #20
   114da:	bd30      	pop	{r4, r5, pc}
   114dc:	0001144d 	.word	0x0001144d
   114e0:	1000000c 	.word	0x1000000c
   114e4:	000113e5 	.word	0x000113e5

000114e8 <SystemTimer::SetTickFrequency(unsigned long)>:
  ///          remainder will be returned.
  ///          If the freqency supplied is less then 2Hz, the function will
  ///          return without changing any hardware.
  ///          If the reload value exceeds the SysTick_LOAD_RELOAD_Msk, the
  ///          returned value is the SysTick_LOAD_RELOAD_Msk.
  uint32_t SetTickFrequency(uint32_t frequency) override
   114e8:	b530      	push	{r4, r5, lr}
   114ea:	b085      	sub	sp, #20
   114ec:	4675      	mov	r5, lr
   114ee:	9001      	str	r0, [sp, #4]
   114f0:	9100      	str	r1, [sp, #0]
   114f2:	462b      	mov	r3, r5
   114f4:	4619      	mov	r1, r3
   114f6:	481f      	ldr	r0, [pc, #124]	; (11574 <SystemTimer::SetTickFrequency(unsigned long)+0x8c>)
   114f8:	f001 fe1c 	bl	13134 <__cyg_profile_func_enter>
  {
    if (frequency <= 1)
   114fc:	9b00      	ldr	r3, [sp, #0]
   114fe:	2b01      	cmp	r3, #1
   11500:	d801      	bhi.n	11506 <SystemTimer::SetTickFrequency(unsigned long)+0x1e>
    {
      return 0;
   11502:	2400      	movs	r4, #0
   11504:	e02d      	b.n	11562 <SystemTimer::SetTickFrequency(unsigned long)+0x7a>
    }
    uint32_t reload_value = (GetSystemFrequency() / frequency) - 1;
   11506:	9b01      	ldr	r3, [sp, #4]
   11508:	1d1a      	adds	r2, r3, #4
   1150a:	9b01      	ldr	r3, [sp, #4]
   1150c:	685b      	ldr	r3, [r3, #4]
   1150e:	330c      	adds	r3, #12
   11510:	681b      	ldr	r3, [r3, #0]
   11512:	4610      	mov	r0, r2
   11514:	4798      	blx	r3
   11516:	4602      	mov	r2, r0
   11518:	9b00      	ldr	r3, [sp, #0]
   1151a:	fbb2 f3f3 	udiv	r3, r2, r3
   1151e:	3b01      	subs	r3, #1
   11520:	9303      	str	r3, [sp, #12]
    int remainder         = (GetSystemFrequency() % frequency);
   11522:	9b01      	ldr	r3, [sp, #4]
   11524:	1d1a      	adds	r2, r3, #4
   11526:	9b01      	ldr	r3, [sp, #4]
   11528:	685b      	ldr	r3, [r3, #4]
   1152a:	330c      	adds	r3, #12
   1152c:	681b      	ldr	r3, [r3, #0]
   1152e:	4610      	mov	r0, r2
   11530:	4798      	blx	r3
   11532:	4603      	mov	r3, r0
   11534:	9a00      	ldr	r2, [sp, #0]
   11536:	fbb3 f2f2 	udiv	r2, r3, r2
   1153a:	9900      	ldr	r1, [sp, #0]
   1153c:	fb01 f202 	mul.w	r2, r1, r2
   11540:	1a9b      	subs	r3, r3, r2
   11542:	9302      	str	r3, [sp, #8]
    if (reload_value > SysTick_LOAD_RELOAD_Msk)
   11544:	9b03      	ldr	r3, [sp, #12]
   11546:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
   1154a:	d305      	bcc.n	11558 <SystemTimer::SetTickFrequency(unsigned long)+0x70>
    {
      reload_value = SysTick_LOAD_RELOAD_Msk;
   1154c:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
   11550:	9303      	str	r3, [sp, #12]
      remainder    = SysTick_LOAD_RELOAD_Msk;
   11552:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
   11556:	9302      	str	r3, [sp, #8]
    }
    sys_tick->LOAD = reload_value;
   11558:	4b07      	ldr	r3, [pc, #28]	; (11578 <SystemTimer::SetTickFrequency(unsigned long)+0x90>)
   1155a:	681b      	ldr	r3, [r3, #0]
   1155c:	9a03      	ldr	r2, [sp, #12]
   1155e:	605a      	str	r2, [r3, #4]
    return remainder;
   11560:	9c02      	ldr	r4, [sp, #8]
   11562:	462b      	mov	r3, r5
   11564:	4619      	mov	r1, r3
   11566:	4803      	ldr	r0, [pc, #12]	; (11574 <SystemTimer::SetTickFrequency(unsigned long)+0x8c>)
   11568:	f001 fdf8 	bl	1315c <__cyg_profile_func_exit>
   1156c:	4623      	mov	r3, r4
  }
   1156e:	4618      	mov	r0, r3
   11570:	b005      	add	sp, #20
   11572:	bd30      	pop	{r4, r5, pc}
   11574:	000114e9 	.word	0x000114e9
   11578:	1000000c 	.word	0x1000000c

0001157c <Pin::SetPinFunction(unsigned char)>:
  }
  constexpr Pin(uint8_t port_number, uint8_t pin_number)
      : port_(port_number), pin_(pin_number)
  {
  }
  void SetPinFunction(uint8_t function) override
   1157c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1157e:	b085      	sub	sp, #20
   11580:	4677      	mov	r7, lr
   11582:	9003      	str	r0, [sp, #12]
   11584:	460b      	mov	r3, r1
   11586:	f88d 300b 	strb.w	r3, [sp, #11]
   1158a:	463b      	mov	r3, r7
   1158c:	4619      	mov	r1, r3
   1158e:	4817      	ldr	r0, [pc, #92]	; (115ec <Pin::SetPinFunction(unsigned char)+0x70>)
   11590:	f001 fdd0 	bl	13134 <__cyg_profile_func_enter>
  {
    pin_map->_register[port_][pin_] =
        BitPlace(pin_map->_register[port_][pin_], PinBitMap::kFunction,
   11594:	4b16      	ldr	r3, [pc, #88]	; (115f0 <Pin::SetPinFunction(unsigned char)+0x74>)
   11596:	681b      	ldr	r3, [r3, #0]
   11598:	9a03      	ldr	r2, [sp, #12]
   1159a:	7912      	ldrb	r2, [r2, #4]
   1159c:	4610      	mov	r0, r2
   1159e:	9a03      	ldr	r2, [sp, #12]
   115a0:	7952      	ldrb	r2, [r2, #5]
   115a2:	4611      	mov	r1, r2
   115a4:	0142      	lsls	r2, r0, #5
   115a6:	440a      	add	r2, r1
   115a8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
                 function & 0b111, 3);
   115ac:	f89d 300b 	ldrb.w	r3, [sp, #11]
        BitPlace(pin_map->_register[port_][pin_], PinBitMap::kFunction,
   115b0:	f003 0207 	and.w	r2, r3, #7
    pin_map->_register[port_][pin_] =
   115b4:	4b0e      	ldr	r3, [pc, #56]	; (115f0 <Pin::SetPinFunction(unsigned char)+0x74>)
   115b6:	681c      	ldr	r4, [r3, #0]
   115b8:	9b03      	ldr	r3, [sp, #12]
   115ba:	791b      	ldrb	r3, [r3, #4]
   115bc:	461e      	mov	r6, r3
   115be:	9b03      	ldr	r3, [sp, #12]
   115c0:	795b      	ldrb	r3, [r3, #5]
   115c2:	461d      	mov	r5, r3
        BitPlace(pin_map->_register[port_][pin_], PinBitMap::kFunction,
   115c4:	2303      	movs	r3, #3
   115c6:	9300      	str	r3, [sp, #0]
   115c8:	4613      	mov	r3, r2
   115ca:	2200      	movs	r2, #0
   115cc:	9803      	ldr	r0, [sp, #12]
   115ce:	f000 fa67 	bl	11aa0 <Pin::BitPlace(unsigned long, unsigned long, unsigned long, unsigned long)>
   115d2:	4602      	mov	r2, r0
    pin_map->_register[port_][pin_] =
   115d4:	0173      	lsls	r3, r6, #5
   115d6:	442b      	add	r3, r5
   115d8:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
   115dc:	463b      	mov	r3, r7
   115de:	4619      	mov	r1, r3
   115e0:	4802      	ldr	r0, [pc, #8]	; (115ec <Pin::SetPinFunction(unsigned char)+0x70>)
   115e2:	f001 fdbb 	bl	1315c <__cyg_profile_func_exit>
  }
   115e6:	bf00      	nop
   115e8:	b005      	add	sp, #20
   115ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
   115ec:	0001157d 	.word	0x0001157d
   115f0:	10000010 	.word	0x10000010

000115f4 <Pin::SetMode(PinInterface::Mode)>:
  void SetMode(PinInterface::Mode mode) override
   115f4:	b5f0      	push	{r4, r5, r6, r7, lr}
   115f6:	b087      	sub	sp, #28
   115f8:	4677      	mov	r7, lr
   115fa:	9003      	str	r0, [sp, #12]
   115fc:	460b      	mov	r3, r1
   115fe:	f88d 300b 	strb.w	r3, [sp, #11]
   11602:	463b      	mov	r3, r7
   11604:	4619      	mov	r1, r3
   11606:	4819      	ldr	r0, [pc, #100]	; (1166c <Pin::SetMode(PinInterface::Mode)+0x78>)
   11608:	f001 fd94 	bl	13134 <__cyg_profile_func_enter>
  {
    uint8_t ui_mode                 = static_cast<uint8_t>(mode);
   1160c:	f89d 300b 	ldrb.w	r3, [sp, #11]
   11610:	f88d 3017 	strb.w	r3, [sp, #23]
    pin_map->_register[port_][pin_] = BitPlace(
   11614:	4b16      	ldr	r3, [pc, #88]	; (11670 <Pin::SetMode(PinInterface::Mode)+0x7c>)
   11616:	681b      	ldr	r3, [r3, #0]
        pin_map->_register[port_][pin_], PinBitMap::kMode, ui_mode & 0b11, 2);
   11618:	9a03      	ldr	r2, [sp, #12]
   1161a:	7912      	ldrb	r2, [r2, #4]
   1161c:	4610      	mov	r0, r2
   1161e:	9a03      	ldr	r2, [sp, #12]
   11620:	7952      	ldrb	r2, [r2, #5]
   11622:	4611      	mov	r1, r2
    pin_map->_register[port_][pin_] = BitPlace(
   11624:	0142      	lsls	r2, r0, #5
   11626:	440a      	add	r2, r1
   11628:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
        pin_map->_register[port_][pin_], PinBitMap::kMode, ui_mode & 0b11, 2);
   1162c:	f89d 3017 	ldrb.w	r3, [sp, #23]
    pin_map->_register[port_][pin_] = BitPlace(
   11630:	f003 0203 	and.w	r2, r3, #3
   11634:	4b0e      	ldr	r3, [pc, #56]	; (11670 <Pin::SetMode(PinInterface::Mode)+0x7c>)
   11636:	681c      	ldr	r4, [r3, #0]
   11638:	9b03      	ldr	r3, [sp, #12]
   1163a:	791b      	ldrb	r3, [r3, #4]
   1163c:	461e      	mov	r6, r3
   1163e:	9b03      	ldr	r3, [sp, #12]
   11640:	795b      	ldrb	r3, [r3, #5]
   11642:	461d      	mov	r5, r3
   11644:	2302      	movs	r3, #2
   11646:	9300      	str	r3, [sp, #0]
   11648:	4613      	mov	r3, r2
   1164a:	2203      	movs	r2, #3
   1164c:	9803      	ldr	r0, [sp, #12]
   1164e:	f000 fa27 	bl	11aa0 <Pin::BitPlace(unsigned long, unsigned long, unsigned long, unsigned long)>
   11652:	4602      	mov	r2, r0
   11654:	0173      	lsls	r3, r6, #5
   11656:	442b      	add	r3, r5
   11658:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
   1165c:	463b      	mov	r3, r7
   1165e:	4619      	mov	r1, r3
   11660:	4802      	ldr	r0, [pc, #8]	; (1166c <Pin::SetMode(PinInterface::Mode)+0x78>)
   11662:	f001 fd7b 	bl	1315c <__cyg_profile_func_exit>
  }
   11666:	bf00      	nop
   11668:	b007      	add	sp, #28
   1166a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1166c:	000115f5 	.word	0x000115f5
   11670:	10000010 	.word	0x10000010

00011674 <Pin::EnableHysteresis(bool)>:
  void EnableHysteresis(bool enable_hysteresis = true) override
   11674:	b5f0      	push	{r4, r5, r6, r7, lr}
   11676:	b085      	sub	sp, #20
   11678:	4677      	mov	r7, lr
   1167a:	9003      	str	r0, [sp, #12]
   1167c:	460b      	mov	r3, r1
   1167e:	f88d 300b 	strb.w	r3, [sp, #11]
   11682:	463b      	mov	r3, r7
   11684:	4619      	mov	r1, r3
   11686:	4816      	ldr	r0, [pc, #88]	; (116e0 <Pin::EnableHysteresis(bool)+0x6c>)
   11688:	f001 fd54 	bl	13134 <__cyg_profile_func_enter>
  {
    pin_map->_register[port_][pin_] =
        BitPlace(pin_map->_register[port_][pin_], PinBitMap::kHysteresis,
   1168c:	4b15      	ldr	r3, [pc, #84]	; (116e4 <Pin::EnableHysteresis(bool)+0x70>)
   1168e:	681b      	ldr	r3, [r3, #0]
   11690:	9a03      	ldr	r2, [sp, #12]
   11692:	7912      	ldrb	r2, [r2, #4]
   11694:	4610      	mov	r0, r2
   11696:	9a03      	ldr	r2, [sp, #12]
   11698:	7952      	ldrb	r2, [r2, #5]
   1169a:	4611      	mov	r1, r2
   1169c:	0142      	lsls	r2, r0, #5
   1169e:	440a      	add	r2, r1
   116a0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   116a4:	f89d 200b 	ldrb.w	r2, [sp, #11]
    pin_map->_register[port_][pin_] =
   116a8:	4b0e      	ldr	r3, [pc, #56]	; (116e4 <Pin::EnableHysteresis(bool)+0x70>)
   116aa:	681c      	ldr	r4, [r3, #0]
   116ac:	9b03      	ldr	r3, [sp, #12]
   116ae:	791b      	ldrb	r3, [r3, #4]
   116b0:	461e      	mov	r6, r3
   116b2:	9b03      	ldr	r3, [sp, #12]
   116b4:	795b      	ldrb	r3, [r3, #5]
   116b6:	461d      	mov	r5, r3
        BitPlace(pin_map->_register[port_][pin_], PinBitMap::kHysteresis,
   116b8:	2301      	movs	r3, #1
   116ba:	9300      	str	r3, [sp, #0]
   116bc:	4613      	mov	r3, r2
   116be:	2205      	movs	r2, #5
   116c0:	9803      	ldr	r0, [sp, #12]
   116c2:	f000 f9ed 	bl	11aa0 <Pin::BitPlace(unsigned long, unsigned long, unsigned long, unsigned long)>
   116c6:	4602      	mov	r2, r0
    pin_map->_register[port_][pin_] =
   116c8:	0173      	lsls	r3, r6, #5
   116ca:	442b      	add	r3, r5
   116cc:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
   116d0:	463b      	mov	r3, r7
   116d2:	4619      	mov	r1, r3
   116d4:	4802      	ldr	r0, [pc, #8]	; (116e0 <Pin::EnableHysteresis(bool)+0x6c>)
   116d6:	f001 fd41 	bl	1315c <__cyg_profile_func_exit>
                 enable_hysteresis, 1);
  }
   116da:	bf00      	nop
   116dc:	b005      	add	sp, #20
   116de:	bdf0      	pop	{r4, r5, r6, r7, pc}
   116e0:	00011675 	.word	0x00011675
   116e4:	10000010 	.word	0x10000010

000116e8 <Pin::SetAsActiveLow(bool)>:
  void SetAsActiveLow(bool set_as_active_low = true) override
   116e8:	b5f0      	push	{r4, r5, r6, r7, lr}
   116ea:	b085      	sub	sp, #20
   116ec:	4677      	mov	r7, lr
   116ee:	9003      	str	r0, [sp, #12]
   116f0:	460b      	mov	r3, r1
   116f2:	f88d 300b 	strb.w	r3, [sp, #11]
   116f6:	463b      	mov	r3, r7
   116f8:	4619      	mov	r1, r3
   116fa:	4816      	ldr	r0, [pc, #88]	; (11754 <Pin::SetAsActiveLow(bool)+0x6c>)
   116fc:	f001 fd1a 	bl	13134 <__cyg_profile_func_enter>
  {
    pin_map->_register[port_][pin_] =
        BitPlace(pin_map->_register[port_][pin_], PinBitMap::kInputInvert,
   11700:	4b15      	ldr	r3, [pc, #84]	; (11758 <Pin::SetAsActiveLow(bool)+0x70>)
   11702:	681b      	ldr	r3, [r3, #0]
   11704:	9a03      	ldr	r2, [sp, #12]
   11706:	7912      	ldrb	r2, [r2, #4]
   11708:	4610      	mov	r0, r2
   1170a:	9a03      	ldr	r2, [sp, #12]
   1170c:	7952      	ldrb	r2, [r2, #5]
   1170e:	4611      	mov	r1, r2
   11710:	0142      	lsls	r2, r0, #5
   11712:	440a      	add	r2, r1
   11714:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   11718:	f89d 200b 	ldrb.w	r2, [sp, #11]
    pin_map->_register[port_][pin_] =
   1171c:	4b0e      	ldr	r3, [pc, #56]	; (11758 <Pin::SetAsActiveLow(bool)+0x70>)
   1171e:	681c      	ldr	r4, [r3, #0]
   11720:	9b03      	ldr	r3, [sp, #12]
   11722:	791b      	ldrb	r3, [r3, #4]
   11724:	461e      	mov	r6, r3
   11726:	9b03      	ldr	r3, [sp, #12]
   11728:	795b      	ldrb	r3, [r3, #5]
   1172a:	461d      	mov	r5, r3
        BitPlace(pin_map->_register[port_][pin_], PinBitMap::kInputInvert,
   1172c:	2301      	movs	r3, #1
   1172e:	9300      	str	r3, [sp, #0]
   11730:	4613      	mov	r3, r2
   11732:	2206      	movs	r2, #6
   11734:	9803      	ldr	r0, [sp, #12]
   11736:	f000 f9b3 	bl	11aa0 <Pin::BitPlace(unsigned long, unsigned long, unsigned long, unsigned long)>
   1173a:	4602      	mov	r2, r0
    pin_map->_register[port_][pin_] =
   1173c:	0173      	lsls	r3, r6, #5
   1173e:	442b      	add	r3, r5
   11740:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
   11744:	463b      	mov	r3, r7
   11746:	4619      	mov	r1, r3
   11748:	4802      	ldr	r0, [pc, #8]	; (11754 <Pin::SetAsActiveLow(bool)+0x6c>)
   1174a:	f001 fd07 	bl	1315c <__cyg_profile_func_exit>
                 set_as_active_low, 1);
  }
   1174e:	bf00      	nop
   11750:	b005      	add	sp, #20
   11752:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11754:	000116e9 	.word	0x000116e9
   11758:	10000010 	.word	0x10000010

0001175c <Pin::SetAsAnalogMode(bool)>:
  // Set bit to 0 to enable analog mode
  void SetAsAnalogMode(bool set_as_analog = true) override
   1175c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1175e:	b085      	sub	sp, #20
   11760:	4677      	mov	r7, lr
   11762:	9003      	str	r0, [sp, #12]
   11764:	460b      	mov	r3, r1
   11766:	f88d 300b 	strb.w	r3, [sp, #11]
   1176a:	463b      	mov	r3, r7
   1176c:	4619      	mov	r1, r3
   1176e:	4818      	ldr	r0, [pc, #96]	; (117d0 <Pin::SetAsAnalogMode(bool)+0x74>)
   11770:	f001 fce0 	bl	13134 <__cyg_profile_func_enter>
  {
    pin_map->_register[port_][pin_] =
        BitPlace(pin_map->_register[port_][pin_], PinBitMap::kAnalogDigitalMode,
   11774:	4b17      	ldr	r3, [pc, #92]	; (117d4 <Pin::SetAsAnalogMode(bool)+0x78>)
   11776:	681b      	ldr	r3, [r3, #0]
   11778:	9a03      	ldr	r2, [sp, #12]
   1177a:	7912      	ldrb	r2, [r2, #4]
   1177c:	4610      	mov	r0, r2
   1177e:	9a03      	ldr	r2, [sp, #12]
   11780:	7952      	ldrb	r2, [r2, #5]
   11782:	4611      	mov	r1, r2
   11784:	0142      	lsls	r2, r0, #5
   11786:	440a      	add	r2, r1
   11788:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
                 !set_as_analog, 1);
   1178c:	f89d 300b 	ldrb.w	r3, [sp, #11]
   11790:	f083 0301 	eor.w	r3, r3, #1
   11794:	b2db      	uxtb	r3, r3
        BitPlace(pin_map->_register[port_][pin_], PinBitMap::kAnalogDigitalMode,
   11796:	461a      	mov	r2, r3
    pin_map->_register[port_][pin_] =
   11798:	4b0e      	ldr	r3, [pc, #56]	; (117d4 <Pin::SetAsAnalogMode(bool)+0x78>)
   1179a:	681c      	ldr	r4, [r3, #0]
   1179c:	9b03      	ldr	r3, [sp, #12]
   1179e:	791b      	ldrb	r3, [r3, #4]
   117a0:	461e      	mov	r6, r3
   117a2:	9b03      	ldr	r3, [sp, #12]
   117a4:	795b      	ldrb	r3, [r3, #5]
   117a6:	461d      	mov	r5, r3
        BitPlace(pin_map->_register[port_][pin_], PinBitMap::kAnalogDigitalMode,
   117a8:	2301      	movs	r3, #1
   117aa:	9300      	str	r3, [sp, #0]
   117ac:	4613      	mov	r3, r2
   117ae:	2207      	movs	r2, #7
   117b0:	9803      	ldr	r0, [sp, #12]
   117b2:	f000 f975 	bl	11aa0 <Pin::BitPlace(unsigned long, unsigned long, unsigned long, unsigned long)>
   117b6:	4602      	mov	r2, r0
    pin_map->_register[port_][pin_] =
   117b8:	0173      	lsls	r3, r6, #5
   117ba:	442b      	add	r3, r5
   117bc:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
   117c0:	463b      	mov	r3, r7
   117c2:	4619      	mov	r1, r3
   117c4:	4802      	ldr	r0, [pc, #8]	; (117d0 <Pin::SetAsAnalogMode(bool)+0x74>)
   117c6:	f001 fcc9 	bl	1315c <__cyg_profile_func_exit>
  }
   117ca:	bf00      	nop
   117cc:	b005      	add	sp, #20
   117ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
   117d0:	0001175d 	.word	0x0001175d
   117d4:	10000010 	.word	0x10000010

000117d8 <Pin::EnableDigitalFilter(bool)>:
  // Enable by setting bit to 0 to enable digital filter.
  void EnableDigitalFilter(bool enable_digital_filter = true) override
   117d8:	b5f0      	push	{r4, r5, r6, r7, lr}
   117da:	b085      	sub	sp, #20
   117dc:	4677      	mov	r7, lr
   117de:	9003      	str	r0, [sp, #12]
   117e0:	460b      	mov	r3, r1
   117e2:	f88d 300b 	strb.w	r3, [sp, #11]
   117e6:	463b      	mov	r3, r7
   117e8:	4619      	mov	r1, r3
   117ea:	4818      	ldr	r0, [pc, #96]	; (1184c <Pin::EnableDigitalFilter(bool)+0x74>)
   117ec:	f001 fca2 	bl	13134 <__cyg_profile_func_enter>
  {
    pin_map->_register[port_][pin_] =
        BitPlace(pin_map->_register[port_][pin_], PinBitMap::kDigitalFilter,
   117f0:	4b17      	ldr	r3, [pc, #92]	; (11850 <Pin::EnableDigitalFilter(bool)+0x78>)
   117f2:	681b      	ldr	r3, [r3, #0]
   117f4:	9a03      	ldr	r2, [sp, #12]
   117f6:	7912      	ldrb	r2, [r2, #4]
   117f8:	4610      	mov	r0, r2
   117fa:	9a03      	ldr	r2, [sp, #12]
   117fc:	7952      	ldrb	r2, [r2, #5]
   117fe:	4611      	mov	r1, r2
   11800:	0142      	lsls	r2, r0, #5
   11802:	440a      	add	r2, r1
   11804:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
                 !enable_digital_filter, 1);
   11808:	f89d 300b 	ldrb.w	r3, [sp, #11]
   1180c:	f083 0301 	eor.w	r3, r3, #1
   11810:	b2db      	uxtb	r3, r3
        BitPlace(pin_map->_register[port_][pin_], PinBitMap::kDigitalFilter,
   11812:	461a      	mov	r2, r3
    pin_map->_register[port_][pin_] =
   11814:	4b0e      	ldr	r3, [pc, #56]	; (11850 <Pin::EnableDigitalFilter(bool)+0x78>)
   11816:	681c      	ldr	r4, [r3, #0]
   11818:	9b03      	ldr	r3, [sp, #12]
   1181a:	791b      	ldrb	r3, [r3, #4]
   1181c:	461e      	mov	r6, r3
   1181e:	9b03      	ldr	r3, [sp, #12]
   11820:	795b      	ldrb	r3, [r3, #5]
   11822:	461d      	mov	r5, r3
        BitPlace(pin_map->_register[port_][pin_], PinBitMap::kDigitalFilter,
   11824:	2301      	movs	r3, #1
   11826:	9300      	str	r3, [sp, #0]
   11828:	4613      	mov	r3, r2
   1182a:	2208      	movs	r2, #8
   1182c:	9803      	ldr	r0, [sp, #12]
   1182e:	f000 f937 	bl	11aa0 <Pin::BitPlace(unsigned long, unsigned long, unsigned long, unsigned long)>
   11832:	4602      	mov	r2, r0
    pin_map->_register[port_][pin_] =
   11834:	0173      	lsls	r3, r6, #5
   11836:	442b      	add	r3, r5
   11838:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
   1183c:	463b      	mov	r3, r7
   1183e:	4619      	mov	r1, r3
   11840:	4802      	ldr	r0, [pc, #8]	; (1184c <Pin::EnableDigitalFilter(bool)+0x74>)
   11842:	f001 fc8b 	bl	1315c <__cyg_profile_func_exit>
  }
   11846:	bf00      	nop
   11848:	b005      	add	sp, #20
   1184a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1184c:	000117d9 	.word	0x000117d9
   11850:	10000010 	.word	0x10000010

00011854 <Pin::EnableFastMode(bool)>:
  void EnableFastMode(bool enable_fast_mode = true) override
   11854:	b5f0      	push	{r4, r5, r6, r7, lr}
   11856:	b085      	sub	sp, #20
   11858:	4677      	mov	r7, lr
   1185a:	9003      	str	r0, [sp, #12]
   1185c:	460b      	mov	r3, r1
   1185e:	f88d 300b 	strb.w	r3, [sp, #11]
   11862:	463b      	mov	r3, r7
   11864:	4619      	mov	r1, r3
   11866:	4816      	ldr	r0, [pc, #88]	; (118c0 <Pin::EnableFastMode(bool)+0x6c>)
   11868:	f001 fc64 	bl	13134 <__cyg_profile_func_enter>
  {
    pin_map->_register[port_][pin_] = BitPlace(
   1186c:	4b15      	ldr	r3, [pc, #84]	; (118c4 <Pin::EnableFastMode(bool)+0x70>)
   1186e:	681b      	ldr	r3, [r3, #0]
        pin_map->_register[port_][pin_], PinBitMap::kSlew, enable_fast_mode, 1);
   11870:	9a03      	ldr	r2, [sp, #12]
   11872:	7912      	ldrb	r2, [r2, #4]
   11874:	4610      	mov	r0, r2
   11876:	9a03      	ldr	r2, [sp, #12]
   11878:	7952      	ldrb	r2, [r2, #5]
   1187a:	4611      	mov	r1, r2
    pin_map->_register[port_][pin_] = BitPlace(
   1187c:	0142      	lsls	r2, r0, #5
   1187e:	440a      	add	r2, r1
   11880:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   11884:	f89d 200b 	ldrb.w	r2, [sp, #11]
   11888:	4b0e      	ldr	r3, [pc, #56]	; (118c4 <Pin::EnableFastMode(bool)+0x70>)
   1188a:	681c      	ldr	r4, [r3, #0]
   1188c:	9b03      	ldr	r3, [sp, #12]
   1188e:	791b      	ldrb	r3, [r3, #4]
   11890:	461e      	mov	r6, r3
   11892:	9b03      	ldr	r3, [sp, #12]
   11894:	795b      	ldrb	r3, [r3, #5]
   11896:	461d      	mov	r5, r3
   11898:	2301      	movs	r3, #1
   1189a:	9300      	str	r3, [sp, #0]
   1189c:	4613      	mov	r3, r2
   1189e:	2209      	movs	r2, #9
   118a0:	9803      	ldr	r0, [sp, #12]
   118a2:	f000 f8fd 	bl	11aa0 <Pin::BitPlace(unsigned long, unsigned long, unsigned long, unsigned long)>
   118a6:	4602      	mov	r2, r0
   118a8:	0173      	lsls	r3, r6, #5
   118aa:	442b      	add	r3, r5
   118ac:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
   118b0:	463b      	mov	r3, r7
   118b2:	4619      	mov	r1, r3
   118b4:	4802      	ldr	r0, [pc, #8]	; (118c0 <Pin::EnableFastMode(bool)+0x6c>)
   118b6:	f001 fc51 	bl	1315c <__cyg_profile_func_exit>
  }
   118ba:	bf00      	nop
   118bc:	b005      	add	sp, #20
   118be:	bdf0      	pop	{r4, r5, r6, r7, pc}
   118c0:	00011855 	.word	0x00011855
   118c4:	10000010 	.word	0x10000010

000118c8 <Pin::EnableI2cHighSpeedMode(bool)>:
  // Enable by setting bit to 0 for i2c high speed mode
  void EnableI2cHighSpeedMode(bool enable_high_speed = true) override
   118c8:	b5f0      	push	{r4, r5, r6, r7, lr}
   118ca:	b085      	sub	sp, #20
   118cc:	4677      	mov	r7, lr
   118ce:	9003      	str	r0, [sp, #12]
   118d0:	460b      	mov	r3, r1
   118d2:	f88d 300b 	strb.w	r3, [sp, #11]
   118d6:	463b      	mov	r3, r7
   118d8:	4619      	mov	r1, r3
   118da:	4818      	ldr	r0, [pc, #96]	; (1193c <Pin::EnableI2cHighSpeedMode(bool)+0x74>)
   118dc:	f001 fc2a 	bl	13134 <__cyg_profile_func_enter>
  {
    pin_map->_register[port_][pin_] =
        BitPlace(pin_map->_register[port_][pin_], PinBitMap::kI2cHighSpeed,
   118e0:	4b17      	ldr	r3, [pc, #92]	; (11940 <Pin::EnableI2cHighSpeedMode(bool)+0x78>)
   118e2:	681b      	ldr	r3, [r3, #0]
   118e4:	9a03      	ldr	r2, [sp, #12]
   118e6:	7912      	ldrb	r2, [r2, #4]
   118e8:	4610      	mov	r0, r2
   118ea:	9a03      	ldr	r2, [sp, #12]
   118ec:	7952      	ldrb	r2, [r2, #5]
   118ee:	4611      	mov	r1, r2
   118f0:	0142      	lsls	r2, r0, #5
   118f2:	440a      	add	r2, r1
   118f4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
                 !enable_high_speed, 1);
   118f8:	f89d 300b 	ldrb.w	r3, [sp, #11]
   118fc:	f083 0301 	eor.w	r3, r3, #1
   11900:	b2db      	uxtb	r3, r3
        BitPlace(pin_map->_register[port_][pin_], PinBitMap::kI2cHighSpeed,
   11902:	461a      	mov	r2, r3
    pin_map->_register[port_][pin_] =
   11904:	4b0e      	ldr	r3, [pc, #56]	; (11940 <Pin::EnableI2cHighSpeedMode(bool)+0x78>)
   11906:	681c      	ldr	r4, [r3, #0]
   11908:	9b03      	ldr	r3, [sp, #12]
   1190a:	791b      	ldrb	r3, [r3, #4]
   1190c:	461e      	mov	r6, r3
   1190e:	9b03      	ldr	r3, [sp, #12]
   11910:	795b      	ldrb	r3, [r3, #5]
   11912:	461d      	mov	r5, r3
        BitPlace(pin_map->_register[port_][pin_], PinBitMap::kI2cHighSpeed,
   11914:	2301      	movs	r3, #1
   11916:	9300      	str	r3, [sp, #0]
   11918:	4613      	mov	r3, r2
   1191a:	2208      	movs	r2, #8
   1191c:	9803      	ldr	r0, [sp, #12]
   1191e:	f000 f8bf 	bl	11aa0 <Pin::BitPlace(unsigned long, unsigned long, unsigned long, unsigned long)>
   11922:	4602      	mov	r2, r0
    pin_map->_register[port_][pin_] =
   11924:	0173      	lsls	r3, r6, #5
   11926:	442b      	add	r3, r5
   11928:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
   1192c:	463b      	mov	r3, r7
   1192e:	4619      	mov	r1, r3
   11930:	4802      	ldr	r0, [pc, #8]	; (1193c <Pin::EnableI2cHighSpeedMode(bool)+0x74>)
   11932:	f001 fc13 	bl	1315c <__cyg_profile_func_exit>
  }
   11936:	bf00      	nop
   11938:	b005      	add	sp, #20
   1193a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1193c:	000118c9 	.word	0x000118c9
   11940:	10000010 	.word	0x10000010

00011944 <Pin::EnableI2cHighCurrentDrive(bool)>:
  void EnableI2cHighCurrentDrive(bool enable_high_current = true) override
   11944:	b5f0      	push	{r4, r5, r6, r7, lr}
   11946:	b085      	sub	sp, #20
   11948:	4677      	mov	r7, lr
   1194a:	9003      	str	r0, [sp, #12]
   1194c:	460b      	mov	r3, r1
   1194e:	f88d 300b 	strb.w	r3, [sp, #11]
   11952:	463b      	mov	r3, r7
   11954:	4619      	mov	r1, r3
   11956:	4816      	ldr	r0, [pc, #88]	; (119b0 <Pin::EnableI2cHighCurrentDrive(bool)+0x6c>)
   11958:	f001 fbec 	bl	13134 <__cyg_profile_func_enter>
  {
    pin_map->_register[port_][pin_] =
        BitPlace(pin_map->_register[port_][pin_],
   1195c:	4b15      	ldr	r3, [pc, #84]	; (119b4 <Pin::EnableI2cHighCurrentDrive(bool)+0x70>)
   1195e:	681b      	ldr	r3, [r3, #0]
   11960:	9a03      	ldr	r2, [sp, #12]
   11962:	7912      	ldrb	r2, [r2, #4]
   11964:	4610      	mov	r0, r2
   11966:	9a03      	ldr	r2, [sp, #12]
   11968:	7952      	ldrb	r2, [r2, #5]
   1196a:	4611      	mov	r1, r2
   1196c:	0142      	lsls	r2, r0, #5
   1196e:	440a      	add	r2, r1
   11970:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   11974:	f89d 200b 	ldrb.w	r2, [sp, #11]
    pin_map->_register[port_][pin_] =
   11978:	4b0e      	ldr	r3, [pc, #56]	; (119b4 <Pin::EnableI2cHighCurrentDrive(bool)+0x70>)
   1197a:	681c      	ldr	r4, [r3, #0]
   1197c:	9b03      	ldr	r3, [sp, #12]
   1197e:	791b      	ldrb	r3, [r3, #4]
   11980:	461e      	mov	r6, r3
   11982:	9b03      	ldr	r3, [sp, #12]
   11984:	795b      	ldrb	r3, [r3, #5]
   11986:	461d      	mov	r5, r3
        BitPlace(pin_map->_register[port_][pin_],
   11988:	2301      	movs	r3, #1
   1198a:	9300      	str	r3, [sp, #0]
   1198c:	4613      	mov	r3, r2
   1198e:	2209      	movs	r2, #9
   11990:	9803      	ldr	r0, [sp, #12]
   11992:	f000 f885 	bl	11aa0 <Pin::BitPlace(unsigned long, unsigned long, unsigned long, unsigned long)>
   11996:	4602      	mov	r2, r0
    pin_map->_register[port_][pin_] =
   11998:	0173      	lsls	r3, r6, #5
   1199a:	442b      	add	r3, r5
   1199c:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
   119a0:	463b      	mov	r3, r7
   119a2:	4619      	mov	r1, r3
   119a4:	4802      	ldr	r0, [pc, #8]	; (119b0 <Pin::EnableI2cHighCurrentDrive(bool)+0x6c>)
   119a6:	f001 fbd9 	bl	1315c <__cyg_profile_func_exit>
                 PinBitMap::kI2cHighCurrentDrive, enable_high_current, 1);
  }
   119aa:	bf00      	nop
   119ac:	b005      	add	sp, #20
   119ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
   119b0:	00011945 	.word	0x00011945
   119b4:	10000010 	.word	0x10000010

000119b8 <Pin::SetAsOpenDrain(bool)>:
  void SetAsOpenDrain(bool set_as_open_drain = true) override
   119b8:	b5f0      	push	{r4, r5, r6, r7, lr}
   119ba:	b085      	sub	sp, #20
   119bc:	4677      	mov	r7, lr
   119be:	9003      	str	r0, [sp, #12]
   119c0:	460b      	mov	r3, r1
   119c2:	f88d 300b 	strb.w	r3, [sp, #11]
   119c6:	463b      	mov	r3, r7
   119c8:	4619      	mov	r1, r3
   119ca:	4816      	ldr	r0, [pc, #88]	; (11a24 <Pin::SetAsOpenDrain(bool)+0x6c>)
   119cc:	f001 fbb2 	bl	13134 <__cyg_profile_func_enter>
  {
    pin_map->_register[port_][pin_] =
        BitPlace(pin_map->_register[port_][pin_], PinBitMap::kOpenDrain,
   119d0:	4b15      	ldr	r3, [pc, #84]	; (11a28 <Pin::SetAsOpenDrain(bool)+0x70>)
   119d2:	681b      	ldr	r3, [r3, #0]
   119d4:	9a03      	ldr	r2, [sp, #12]
   119d6:	7912      	ldrb	r2, [r2, #4]
   119d8:	4610      	mov	r0, r2
   119da:	9a03      	ldr	r2, [sp, #12]
   119dc:	7952      	ldrb	r2, [r2, #5]
   119de:	4611      	mov	r1, r2
   119e0:	0142      	lsls	r2, r0, #5
   119e2:	440a      	add	r2, r1
   119e4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   119e8:	f89d 200b 	ldrb.w	r2, [sp, #11]
    pin_map->_register[port_][pin_] =
   119ec:	4b0e      	ldr	r3, [pc, #56]	; (11a28 <Pin::SetAsOpenDrain(bool)+0x70>)
   119ee:	681c      	ldr	r4, [r3, #0]
   119f0:	9b03      	ldr	r3, [sp, #12]
   119f2:	791b      	ldrb	r3, [r3, #4]
   119f4:	461e      	mov	r6, r3
   119f6:	9b03      	ldr	r3, [sp, #12]
   119f8:	795b      	ldrb	r3, [r3, #5]
   119fa:	461d      	mov	r5, r3
        BitPlace(pin_map->_register[port_][pin_], PinBitMap::kOpenDrain,
   119fc:	2301      	movs	r3, #1
   119fe:	9300      	str	r3, [sp, #0]
   11a00:	4613      	mov	r3, r2
   11a02:	220a      	movs	r2, #10
   11a04:	9803      	ldr	r0, [sp, #12]
   11a06:	f000 f84b 	bl	11aa0 <Pin::BitPlace(unsigned long, unsigned long, unsigned long, unsigned long)>
   11a0a:	4602      	mov	r2, r0
    pin_map->_register[port_][pin_] =
   11a0c:	0173      	lsls	r3, r6, #5
   11a0e:	442b      	add	r3, r5
   11a10:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
   11a14:	463b      	mov	r3, r7
   11a16:	4619      	mov	r1, r3
   11a18:	4802      	ldr	r0, [pc, #8]	; (11a24 <Pin::SetAsOpenDrain(bool)+0x6c>)
   11a1a:	f001 fb9f 	bl	1315c <__cyg_profile_func_exit>
                 set_as_open_drain, 1);
  }
   11a1e:	bf00      	nop
   11a20:	b005      	add	sp, #20
   11a22:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11a24:	000119b9 	.word	0x000119b9
   11a28:	10000010 	.word	0x10000010

00011a2c <Pin::EnableDac(bool)>:
  void EnableDac(bool enable_dac = true) override
   11a2c:	b5f0      	push	{r4, r5, r6, r7, lr}
   11a2e:	b085      	sub	sp, #20
   11a30:	4677      	mov	r7, lr
   11a32:	9003      	str	r0, [sp, #12]
   11a34:	460b      	mov	r3, r1
   11a36:	f88d 300b 	strb.w	r3, [sp, #11]
   11a3a:	463b      	mov	r3, r7
   11a3c:	4619      	mov	r1, r3
   11a3e:	4816      	ldr	r0, [pc, #88]	; (11a98 <Pin::EnableDac(bool)+0x6c>)
   11a40:	f001 fb78 	bl	13134 <__cyg_profile_func_enter>
  {
    pin_map->_register[port_][pin_] = BitPlace(
   11a44:	4b15      	ldr	r3, [pc, #84]	; (11a9c <Pin::EnableDac(bool)+0x70>)
   11a46:	681b      	ldr	r3, [r3, #0]
        pin_map->_register[port_][pin_], PinBitMap::kDacEnable, enable_dac, 1);
   11a48:	9a03      	ldr	r2, [sp, #12]
   11a4a:	7912      	ldrb	r2, [r2, #4]
   11a4c:	4610      	mov	r0, r2
   11a4e:	9a03      	ldr	r2, [sp, #12]
   11a50:	7952      	ldrb	r2, [r2, #5]
   11a52:	4611      	mov	r1, r2
    pin_map->_register[port_][pin_] = BitPlace(
   11a54:	0142      	lsls	r2, r0, #5
   11a56:	440a      	add	r2, r1
   11a58:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   11a5c:	f89d 200b 	ldrb.w	r2, [sp, #11]
   11a60:	4b0e      	ldr	r3, [pc, #56]	; (11a9c <Pin::EnableDac(bool)+0x70>)
   11a62:	681c      	ldr	r4, [r3, #0]
   11a64:	9b03      	ldr	r3, [sp, #12]
   11a66:	791b      	ldrb	r3, [r3, #4]
   11a68:	461e      	mov	r6, r3
   11a6a:	9b03      	ldr	r3, [sp, #12]
   11a6c:	795b      	ldrb	r3, [r3, #5]
   11a6e:	461d      	mov	r5, r3
   11a70:	2301      	movs	r3, #1
   11a72:	9300      	str	r3, [sp, #0]
   11a74:	4613      	mov	r3, r2
   11a76:	2210      	movs	r2, #16
   11a78:	9803      	ldr	r0, [sp, #12]
   11a7a:	f000 f811 	bl	11aa0 <Pin::BitPlace(unsigned long, unsigned long, unsigned long, unsigned long)>
   11a7e:	4602      	mov	r2, r0
   11a80:	0173      	lsls	r3, r6, #5
   11a82:	442b      	add	r3, r5
   11a84:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
   11a88:	463b      	mov	r3, r7
   11a8a:	4619      	mov	r1, r3
   11a8c:	4802      	ldr	r0, [pc, #8]	; (11a98 <Pin::EnableDac(bool)+0x6c>)
   11a8e:	f001 fb65 	bl	1315c <__cyg_profile_func_exit>
  }
   11a92:	bf00      	nop
   11a94:	b005      	add	sp, #20
   11a96:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11a98:	00011a2d 	.word	0x00011a2d
   11a9c:	10000010 	.word	0x10000010

00011aa0 <Pin::BitPlace(unsigned long, unsigned long, unsigned long, unsigned long)>:
  inline uint32_t BitPlace(uint32_t target, uint32_t position, uint32_t value,
   11aa0:	b530      	push	{r4, r5, lr}
   11aa2:	b087      	sub	sp, #28
   11aa4:	4675      	mov	r5, lr
   11aa6:	9003      	str	r0, [sp, #12]
   11aa8:	9102      	str	r1, [sp, #8]
   11aaa:	9201      	str	r2, [sp, #4]
   11aac:	9300      	str	r3, [sp, #0]
   11aae:	462b      	mov	r3, r5
   11ab0:	4619      	mov	r1, r3
   11ab2:	4813      	ldr	r0, [pc, #76]	; (11b00 <Pin::BitPlace(unsigned long, unsigned long, unsigned long, unsigned long)+0x60>)
   11ab4:	f001 fb3e 	bl	13134 <__cyg_profile_func_enter>
                           uint32_t value_width)
  {
    // Generate mask with all 1s
    uint32_t mask = 0xFFFFFFFF >> (32 - value_width);
   11ab8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   11aba:	f1c3 0320 	rsb	r3, r3, #32
   11abe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   11ac2:	fa22 f303 	lsr.w	r3, r2, r3
   11ac6:	9305      	str	r3, [sp, #20]
    target &= ~(mask << position);
   11ac8:	9a05      	ldr	r2, [sp, #20]
   11aca:	9b01      	ldr	r3, [sp, #4]
   11acc:	fa02 f303 	lsl.w	r3, r2, r3
   11ad0:	43db      	mvns	r3, r3
   11ad2:	9a02      	ldr	r2, [sp, #8]
   11ad4:	4013      	ands	r3, r2
   11ad6:	9302      	str	r3, [sp, #8]
    target |= (value & mask) << position;
   11ad8:	9a00      	ldr	r2, [sp, #0]
   11ada:	9b05      	ldr	r3, [sp, #20]
   11adc:	401a      	ands	r2, r3
   11ade:	9b01      	ldr	r3, [sp, #4]
   11ae0:	fa02 f303 	lsl.w	r3, r2, r3
   11ae4:	9a02      	ldr	r2, [sp, #8]
   11ae6:	4313      	orrs	r3, r2
   11ae8:	9302      	str	r3, [sp, #8]
    return target;
   11aea:	9c02      	ldr	r4, [sp, #8]
   11aec:	462b      	mov	r3, r5
   11aee:	4619      	mov	r1, r3
   11af0:	4803      	ldr	r0, [pc, #12]	; (11b00 <Pin::BitPlace(unsigned long, unsigned long, unsigned long, unsigned long)+0x60>)
   11af2:	f001 fb33 	bl	1315c <__cyg_profile_func_exit>
   11af6:	4623      	mov	r3, r4
  }
   11af8:	4618      	mov	r0, r3
   11afa:	b007      	add	sp, #28
   11afc:	bd30      	pop	{r4, r5, pc}
   11afe:	bf00      	nop
   11b00:	00011aa1 	.word	0x00011aa1

00011b04 <Pin::GetPort() const>:
  uint8_t GetPort() const override
   11b04:	b530      	push	{r4, r5, lr}
   11b06:	b083      	sub	sp, #12
   11b08:	4675      	mov	r5, lr
   11b0a:	9001      	str	r0, [sp, #4]
   11b0c:	462b      	mov	r3, r5
   11b0e:	4619      	mov	r1, r3
   11b10:	4806      	ldr	r0, [pc, #24]	; (11b2c <Pin::GetPort() const+0x28>)
   11b12:	f001 fb0f 	bl	13134 <__cyg_profile_func_enter>
  {
    return port_;
   11b16:	9b01      	ldr	r3, [sp, #4]
   11b18:	791c      	ldrb	r4, [r3, #4]
   11b1a:	462b      	mov	r3, r5
   11b1c:	4619      	mov	r1, r3
   11b1e:	4803      	ldr	r0, [pc, #12]	; (11b2c <Pin::GetPort() const+0x28>)
   11b20:	f001 fb1c 	bl	1315c <__cyg_profile_func_exit>
   11b24:	4623      	mov	r3, r4
  }
   11b26:	4618      	mov	r0, r3
   11b28:	b003      	add	sp, #12
   11b2a:	bd30      	pop	{r4, r5, pc}
   11b2c:	00011b05 	.word	0x00011b05

00011b30 <Pin::GetPin() const>:
  uint8_t GetPin() const override
   11b30:	b530      	push	{r4, r5, lr}
   11b32:	b083      	sub	sp, #12
   11b34:	4675      	mov	r5, lr
   11b36:	9001      	str	r0, [sp, #4]
   11b38:	462b      	mov	r3, r5
   11b3a:	4619      	mov	r1, r3
   11b3c:	4806      	ldr	r0, [pc, #24]	; (11b58 <Pin::GetPin() const+0x28>)
   11b3e:	f001 faf9 	bl	13134 <__cyg_profile_func_enter>
  {
    return pin_;
   11b42:	9b01      	ldr	r3, [sp, #4]
   11b44:	795c      	ldrb	r4, [r3, #5]
   11b46:	462b      	mov	r3, r5
   11b48:	4619      	mov	r1, r3
   11b4a:	4803      	ldr	r0, [pc, #12]	; (11b58 <Pin::GetPin() const+0x28>)
   11b4c:	f001 fb06 	bl	1315c <__cyg_profile_func_exit>
   11b50:	4623      	mov	r3, r4
  }
   11b52:	4618      	mov	r0, r3
   11b54:	b003      	add	sp, #12
   11b56:	bd30      	pop	{r4, r5, pc}
   11b58:	00011b31 	.word	0x00011b31

00011b5c <unsigned char util::Value<TimerInterface::TimerPort, unsigned char>(TimerInterface::TimerPort)>:
//
// @param enum_type_value variable you would like to get the value of.
// @return the value of the enum class type variable of with the underlying
//         type of the enum class.
template <typename Enum, typename Type = typename std::underlying_type_t<Enum>>
constexpr Type Value(Enum enum_type_value)
   11b5c:	b530      	push	{r4, r5, lr}
   11b5e:	b083      	sub	sp, #12
   11b60:	4675      	mov	r5, lr
   11b62:	4603      	mov	r3, r0
   11b64:	f88d 3007 	strb.w	r3, [sp, #7]
   11b68:	462b      	mov	r3, r5
   11b6a:	4619      	mov	r1, r3
   11b6c:	4806      	ldr	r0, [pc, #24]	; (11b88 <unsigned char util::Value<TimerInterface::TimerPort, unsigned char>(TimerInterface::TimerPort)+0x2c>)
   11b6e:	f001 fae1 	bl	13134 <__cyg_profile_func_enter>
{
  return static_cast<Type>(enum_type_value);
   11b72:	f89d 4007 	ldrb.w	r4, [sp, #7]
   11b76:	462b      	mov	r3, r5
   11b78:	4619      	mov	r1, r3
   11b7a:	4803      	ldr	r0, [pc, #12]	; (11b88 <unsigned char util::Value<TimerInterface::TimerPort, unsigned char>(TimerInterface::TimerPort)+0x2c>)
   11b7c:	f001 faee 	bl	1315c <__cyg_profile_func_exit>
   11b80:	4623      	mov	r3, r4
}
   11b82:	4618      	mov	r0, r3
   11b84:	b003      	add	sp, #12
   11b86:	bd30      	pop	{r4, r5, pc}
   11b88:	00011b5d 	.word	0x00011b5d

00011b8c <Timer::DoNothingIsr()>:
    Lpc40xxSystemController::Peripherals::kTimer3
  };

  static constexpr IRQn kTimerIrq[] = { IRQn::TIMER0_IRQn, IRQn::TIMER1_IRQn,
                                        IRQn::TIMER2_IRQn, IRQn::TIMER3_IRQn };
  static void DoNothingIsr() {}
   11b8c:	b510      	push	{r4, lr}
   11b8e:	4674      	mov	r4, lr
   11b90:	4623      	mov	r3, r4
   11b92:	4619      	mov	r1, r3
   11b94:	4804      	ldr	r0, [pc, #16]	; (11ba8 <Timer::DoNothingIsr()+0x1c>)
   11b96:	f001 facd 	bl	13134 <__cyg_profile_func_enter>
   11b9a:	4623      	mov	r3, r4
   11b9c:	4619      	mov	r1, r3
   11b9e:	4802      	ldr	r0, [pc, #8]	; (11ba8 <Timer::DoNothingIsr()+0x1c>)
   11ba0:	f001 fadc 	bl	1315c <__cyg_profile_func_exit>
   11ba4:	bf00      	nop
   11ba6:	bd10      	pop	{r4, pc}
   11ba8:	00011b8d 	.word	0x00011b8d

00011bac <Timer::Initialize(unsigned long, void (*)(), long)>:
  ///                  register will be 10 ms.
  /// @param isr an ISR that will fire when the condition set by SetTimer
  ///            method is achieved.
  /// @param priority sets the Timer interrupt's priority level, defaults to -1
  ///                 which uses the platforms default priority.
  void Initialize(uint32_t frequency, IsrPointer isr = DoNothingIsr,
   11bac:	b510      	push	{r4, lr}
   11bae:	b086      	sub	sp, #24
   11bb0:	4674      	mov	r4, lr
   11bb2:	9003      	str	r0, [sp, #12]
   11bb4:	9102      	str	r1, [sp, #8]
   11bb6:	9201      	str	r2, [sp, #4]
   11bb8:	9300      	str	r3, [sp, #0]
   11bba:	4623      	mov	r3, r4
   11bbc:	4619      	mov	r1, r3
   11bbe:	483e      	ldr	r0, [pc, #248]	; (11cb8 <Timer::Initialize(unsigned long, void (*)(), long)+0x10c>)
   11bc0:	f001 fab8 	bl	13134 <__cyg_profile_func_enter>
                  int32_t priority = -1) override final
  {
    PowerUpPeripheral(kPowerbit[channel_]);
   11bc4:	9b03      	ldr	r3, [sp, #12]
   11bc6:	1d18      	adds	r0, r3, #4
   11bc8:	9b03      	ldr	r3, [sp, #12]
   11bca:	685b      	ldr	r3, [r3, #4]
   11bcc:	3314      	adds	r3, #20
   11bce:	681b      	ldr	r3, [r3, #0]
   11bd0:	9a03      	ldr	r2, [sp, #12]
   11bd2:	7a12      	ldrb	r2, [r2, #8]
   11bd4:	0092      	lsls	r2, r2, #2
   11bd6:	4939      	ldr	r1, [pc, #228]	; (11cbc <Timer::Initialize(unsigned long, void (*)(), long)+0x110>)
   11bd8:	440a      	add	r2, r1
   11bda:	4611      	mov	r1, r2
   11bdc:	4798      	blx	r3
    SJ2_ASSERT_FATAL(
   11bde:	9b02      	ldr	r3, [sp, #8]
   11be0:	2b00      	cmp	r3, #0
   11be2:	d10d      	bne.n	11c00 <Timer::Initialize(unsigned long, void (*)(), long)+0x54>
   11be4:	2384      	movs	r3, #132	; 0x84
   11be6:	4a36      	ldr	r2, [pc, #216]	; (11cc0 <Timer::Initialize(unsigned long, void (*)(), long)+0x114>)
   11be8:	4936      	ldr	r1, [pc, #216]	; (11cc4 <Timer::Initialize(unsigned long, void (*)(), long)+0x118>)
   11bea:	4837      	ldr	r0, [pc, #220]	; (11cc8 <Timer::Initialize(unsigned long, void (*)(), long)+0x11c>)
   11bec:	f002 fd02 	bl	145f4 <printf>
   11bf0:	4836      	ldr	r0, [pc, #216]	; (11ccc <Timer::Initialize(unsigned long, void (*)(), long)+0x120>)
   11bf2:	f001 fa6f 	bl	130d4 <puts>
   11bf6:	2100      	movs	r1, #0
   11bf8:	2001      	movs	r0, #1
   11bfa:	f7ff f875 	bl	10ce8 <debug::PrintBacktrace(bool, void*)>
   11bfe:	e7fe      	b.n	11bfe <Timer::Initialize(unsigned long, void (*)(), long)+0x52>
        frequency != 0,
        "Cannot have zero ticks per microsecond, please choose 1 or more.");
    // Set Prescale register for Prescale Counter to milliseconds
    uint32_t prescaler = GetPeripheralFrequency() / frequency;
   11c00:	9b03      	ldr	r3, [sp, #12]
   11c02:	1d1a      	adds	r2, r3, #4
   11c04:	9b03      	ldr	r3, [sp, #12]
   11c06:	685b      	ldr	r3, [r3, #4]
   11c08:	3310      	adds	r3, #16
   11c0a:	681b      	ldr	r3, [r3, #0]
   11c0c:	4610      	mov	r0, r2
   11c0e:	4798      	blx	r3
   11c10:	4602      	mov	r2, r0
   11c12:	9b02      	ldr	r3, [sp, #8]
   11c14:	fbb2 f3f3 	udiv	r3, r2, r3
   11c18:	9305      	str	r3, [sp, #20]
    tim_register[channel_]->PR &= ~(kClear << 1);
   11c1a:	9b03      	ldr	r3, [sp, #12]
   11c1c:	7a1b      	ldrb	r3, [r3, #8]
   11c1e:	461a      	mov	r2, r3
   11c20:	4b2b      	ldr	r3, [pc, #172]	; (11cd0 <Timer::Initialize(unsigned long, void (*)(), long)+0x124>)
   11c22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   11c26:	68da      	ldr	r2, [r3, #12]
   11c28:	9b03      	ldr	r3, [sp, #12]
   11c2a:	7a1b      	ldrb	r3, [r3, #8]
   11c2c:	4619      	mov	r1, r3
   11c2e:	4b28      	ldr	r3, [pc, #160]	; (11cd0 <Timer::Initialize(unsigned long, void (*)(), long)+0x124>)
   11c30:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   11c34:	f002 0201 	and.w	r2, r2, #1
   11c38:	60da      	str	r2, [r3, #12]
    tim_register[channel_]->PR |= (prescaler << 1);
   11c3a:	9b03      	ldr	r3, [sp, #12]
   11c3c:	7a1b      	ldrb	r3, [r3, #8]
   11c3e:	461a      	mov	r2, r3
   11c40:	4b23      	ldr	r3, [pc, #140]	; (11cd0 <Timer::Initialize(unsigned long, void (*)(), long)+0x124>)
   11c42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   11c46:	68d9      	ldr	r1, [r3, #12]
   11c48:	9b05      	ldr	r3, [sp, #20]
   11c4a:	005a      	lsls	r2, r3, #1
   11c4c:	9b03      	ldr	r3, [sp, #12]
   11c4e:	7a1b      	ldrb	r3, [r3, #8]
   11c50:	4618      	mov	r0, r3
   11c52:	4b1f      	ldr	r3, [pc, #124]	; (11cd0 <Timer::Initialize(unsigned long, void (*)(), long)+0x124>)
   11c54:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   11c58:	430a      	orrs	r2, r1
   11c5a:	60da      	str	r2, [r3, #12]
    tim_register[channel_]->TCR |= (1 << 0);
   11c5c:	9b03      	ldr	r3, [sp, #12]
   11c5e:	7a1b      	ldrb	r3, [r3, #8]
   11c60:	461a      	mov	r2, r3
   11c62:	4b1b      	ldr	r3, [pc, #108]	; (11cd0 <Timer::Initialize(unsigned long, void (*)(), long)+0x124>)
   11c64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   11c68:	685a      	ldr	r2, [r3, #4]
   11c6a:	9b03      	ldr	r3, [sp, #12]
   11c6c:	7a1b      	ldrb	r3, [r3, #8]
   11c6e:	4619      	mov	r1, r3
   11c70:	4b17      	ldr	r3, [pc, #92]	; (11cd0 <Timer::Initialize(unsigned long, void (*)(), long)+0x124>)
   11c72:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   11c76:	f042 0201 	orr.w	r2, r2, #1
   11c7a:	605a      	str	r2, [r3, #4]
    user_timer_isr[channel_] = isr;
   11c7c:	9b03      	ldr	r3, [sp, #12]
   11c7e:	7a1b      	ldrb	r3, [r3, #8]
   11c80:	4619      	mov	r1, r3
   11c82:	4a14      	ldr	r2, [pc, #80]	; (11cd4 <Timer::Initialize(unsigned long, void (*)(), long)+0x128>)
   11c84:	9b01      	ldr	r3, [sp, #4]
   11c86:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
    RegisterIsr(kTimerIrq[channel_], kTimerIsr[channel_], true, priority);
   11c8a:	9b03      	ldr	r3, [sp, #12]
   11c8c:	7a1b      	ldrb	r3, [r3, #8]
   11c8e:	461a      	mov	r2, r3
   11c90:	4b11      	ldr	r3, [pc, #68]	; (11cd8 <Timer::Initialize(unsigned long, void (*)(), long)+0x12c>)
   11c92:	5698      	ldrsb	r0, [r3, r2]
   11c94:	9b03      	ldr	r3, [sp, #12]
   11c96:	7a1b      	ldrb	r3, [r3, #8]
   11c98:	461a      	mov	r2, r3
   11c9a:	4b10      	ldr	r3, [pc, #64]	; (11cdc <Timer::Initialize(unsigned long, void (*)(), long)+0x130>)
   11c9c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   11ca0:	9b00      	ldr	r3, [sp, #0]
   11ca2:	2201      	movs	r2, #1
   11ca4:	f001 f91e 	bl	12ee4 <RegisterIsr(IRQn, void (*)(), bool, long)>
   11ca8:	4623      	mov	r3, r4
   11caa:	4619      	mov	r1, r3
   11cac:	4802      	ldr	r0, [pc, #8]	; (11cb8 <Timer::Initialize(unsigned long, void (*)(), long)+0x10c>)
   11cae:	f001 fa55 	bl	1315c <__cyg_profile_func_exit>
  }
   11cb2:	bf00      	nop
   11cb4:	b006      	add	sp, #24
   11cb6:	bd10      	pop	{r4, pc}
   11cb8:	00011bad 	.word	0x00011bad
   11cbc:	00017e04 	.word	0x00017e04
   11cc0:	000180a4 	.word	0x000180a4
   11cc4:	00017e28 	.word	0x00017e28
   11cc8:	00017c6c 	.word	0x00017c6c
   11ccc:	00017978 	.word	0x00017978
   11cd0:	10000014 	.word	0x10000014
   11cd4:	100002cc 	.word	0x100002cc
   11cd8:	00017e14 	.word	0x00017e14
   11cdc:	00017e18 	.word	0x00017e18

00011ce0 <unsigned char util::Value<TimerInterface::MatchControlRegister, unsigned char>(TimerInterface::MatchControlRegister)>:
constexpr Type Value(Enum enum_type_value)
   11ce0:	b530      	push	{r4, r5, lr}
   11ce2:	b083      	sub	sp, #12
   11ce4:	4675      	mov	r5, lr
   11ce6:	4603      	mov	r3, r0
   11ce8:	f88d 3007 	strb.w	r3, [sp, #7]
   11cec:	462b      	mov	r3, r5
   11cee:	4619      	mov	r1, r3
   11cf0:	4806      	ldr	r0, [pc, #24]	; (11d0c <unsigned char util::Value<TimerInterface::MatchControlRegister, unsigned char>(TimerInterface::MatchControlRegister)+0x2c>)
   11cf2:	f001 fa1f 	bl	13134 <__cyg_profile_func_enter>
  return static_cast<Type>(enum_type_value);
   11cf6:	f89d 4007 	ldrb.w	r4, [sp, #7]
   11cfa:	462b      	mov	r3, r5
   11cfc:	4619      	mov	r1, r3
   11cfe:	4803      	ldr	r0, [pc, #12]	; (11d0c <unsigned char util::Value<TimerInterface::MatchControlRegister, unsigned char>(TimerInterface::MatchControlRegister)+0x2c>)
   11d00:	f001 fa2c 	bl	1315c <__cyg_profile_func_exit>
   11d04:	4623      	mov	r3, r4
}
   11d06:	4618      	mov	r0, r3
   11d08:	b003      	add	sp, #12
   11d0a:	bd30      	pop	{r4, r5, pc}
   11d0c:	00011ce1 	.word	0x00011ce1

00011d10 <Timer::SetTimer(unsigned long, TimerInterface::TimerIsrCondition, TimerInterface::MatchControlRegister)>:
  ///
  /// @param ticks the count of the timer register (TC) to have an ISR fire
  /// @param condition the condition for which a timer interrupt will occur
  /// @param match_register which match register (from 0 to 3) should be used
  ///                       for holding the ticks for the condition.
  void SetTimer(uint32_t ticks, TimerIsrCondition condition,
   11d10:	b570      	push	{r4, r5, r6, lr}
   11d12:	b086      	sub	sp, #24
   11d14:	4676      	mov	r6, lr
   11d16:	9003      	str	r0, [sp, #12]
   11d18:	9102      	str	r1, [sp, #8]
   11d1a:	4611      	mov	r1, r2
   11d1c:	461a      	mov	r2, r3
   11d1e:	460b      	mov	r3, r1
   11d20:	f88d 3007 	strb.w	r3, [sp, #7]
   11d24:	4613      	mov	r3, r2
   11d26:	f88d 3006 	strb.w	r3, [sp, #6]
   11d2a:	4633      	mov	r3, r6
   11d2c:	4619      	mov	r1, r3
   11d2e:	4832      	ldr	r0, [pc, #200]	; (11df8 <Timer::SetTimer(unsigned long, TimerInterface::TimerIsrCondition, TimerInterface::MatchControlRegister)+0xe8>)
   11d30:	f001 fa00 	bl	13134 <__cyg_profile_func_enter>
                MatchControlRegister match_register = kMat0) override final
  {
    static constexpr uint8_t kClearMode = 0b0111;

    uint8_t match_value = util::Value(match_register);
   11d34:	f89d 3006 	ldrb.w	r3, [sp, #6]
   11d38:	4618      	mov	r0, r3
   11d3a:	f7ff ffd1 	bl	11ce0 <unsigned char util::Value<TimerInterface::MatchControlRegister, unsigned char>(TimerInterface::MatchControlRegister)>
   11d3e:	4603      	mov	r3, r0
   11d40:	f88d 3017 	strb.w	r3, [sp, #23]
    tim_register[channel_]->MCR &= ~(kClearMode << match_value);
   11d44:	9b03      	ldr	r3, [sp, #12]
   11d46:	7a1b      	ldrb	r3, [r3, #8]
   11d48:	461a      	mov	r2, r3
   11d4a:	4b2c      	ldr	r3, [pc, #176]	; (11dfc <Timer::SetTimer(unsigned long, TimerInterface::TimerIsrCondition, TimerInterface::MatchControlRegister)+0xec>)
   11d4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   11d50:	695a      	ldr	r2, [r3, #20]
   11d52:	f89d 3017 	ldrb.w	r3, [sp, #23]
   11d56:	2107      	movs	r1, #7
   11d58:	fa01 f303 	lsl.w	r3, r1, r3
   11d5c:	43db      	mvns	r3, r3
   11d5e:	4619      	mov	r1, r3
   11d60:	9b03      	ldr	r3, [sp, #12]
   11d62:	7a1b      	ldrb	r3, [r3, #8]
   11d64:	4618      	mov	r0, r3
   11d66:	4b25      	ldr	r3, [pc, #148]	; (11dfc <Timer::SetTimer(unsigned long, TimerInterface::TimerIsrCondition, TimerInterface::MatchControlRegister)+0xec>)
   11d68:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   11d6c:	400a      	ands	r2, r1
   11d6e:	615a      	str	r2, [r3, #20]
    tim_register[channel_]->MCR |= condition << match_value;
   11d70:	9b03      	ldr	r3, [sp, #12]
   11d72:	7a1b      	ldrb	r3, [r3, #8]
   11d74:	461a      	mov	r2, r3
   11d76:	4b21      	ldr	r3, [pc, #132]	; (11dfc <Timer::SetTimer(unsigned long, TimerInterface::TimerIsrCondition, TimerInterface::MatchControlRegister)+0xec>)
   11d78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   11d7c:	695a      	ldr	r2, [r3, #20]
   11d7e:	f89d 1007 	ldrb.w	r1, [sp, #7]
   11d82:	f89d 3017 	ldrb.w	r3, [sp, #23]
   11d86:	fa01 f303 	lsl.w	r3, r1, r3
   11d8a:	4619      	mov	r1, r3
   11d8c:	9b03      	ldr	r3, [sp, #12]
   11d8e:	7a1b      	ldrb	r3, [r3, #8]
   11d90:	4618      	mov	r0, r3
   11d92:	4b1a      	ldr	r3, [pc, #104]	; (11dfc <Timer::SetTimer(unsigned long, TimerInterface::TimerIsrCondition, TimerInterface::MatchControlRegister)+0xec>)
   11d94:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   11d98:	430a      	orrs	r2, r1
   11d9a:	615a      	str	r2, [r3, #20]
    *match[channel_][match_value / 3] |= (((ticks / 2)) << 0);
   11d9c:	9b03      	ldr	r3, [sp, #12]
   11d9e:	7a1b      	ldrb	r3, [r3, #8]
   11da0:	4618      	mov	r0, r3
   11da2:	f89d 3017 	ldrb.w	r3, [sp, #23]
   11da6:	4a16      	ldr	r2, [pc, #88]	; (11e00 <Timer::SetTimer(unsigned long, TimerInterface::TimerIsrCondition, TimerInterface::MatchControlRegister)+0xf0>)
   11da8:	fba2 2303 	umull	r2, r3, r2, r3
   11dac:	085b      	lsrs	r3, r3, #1
   11dae:	b2db      	uxtb	r3, r3
   11db0:	4619      	mov	r1, r3
   11db2:	4a14      	ldr	r2, [pc, #80]	; (11e04 <Timer::SetTimer(unsigned long, TimerInterface::TimerIsrCondition, TimerInterface::MatchControlRegister)+0xf4>)
   11db4:	0083      	lsls	r3, r0, #2
   11db6:	440b      	add	r3, r1
   11db8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11dbc:	6819      	ldr	r1, [r3, #0]
   11dbe:	9b02      	ldr	r3, [sp, #8]
   11dc0:	085a      	lsrs	r2, r3, #1
   11dc2:	9b03      	ldr	r3, [sp, #12]
   11dc4:	7a1b      	ldrb	r3, [r3, #8]
   11dc6:	461d      	mov	r5, r3
   11dc8:	f89d 3017 	ldrb.w	r3, [sp, #23]
   11dcc:	480c      	ldr	r0, [pc, #48]	; (11e00 <Timer::SetTimer(unsigned long, TimerInterface::TimerIsrCondition, TimerInterface::MatchControlRegister)+0xf0>)
   11dce:	fba0 0303 	umull	r0, r3, r0, r3
   11dd2:	085b      	lsrs	r3, r3, #1
   11dd4:	b2db      	uxtb	r3, r3
   11dd6:	461c      	mov	r4, r3
   11dd8:	480a      	ldr	r0, [pc, #40]	; (11e04 <Timer::SetTimer(unsigned long, TimerInterface::TimerIsrCondition, TimerInterface::MatchControlRegister)+0xf4>)
   11dda:	00ab      	lsls	r3, r5, #2
   11ddc:	4423      	add	r3, r4
   11dde:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
   11de2:	430a      	orrs	r2, r1
   11de4:	601a      	str	r2, [r3, #0]
   11de6:	4633      	mov	r3, r6
   11de8:	4619      	mov	r1, r3
   11dea:	4803      	ldr	r0, [pc, #12]	; (11df8 <Timer::SetTimer(unsigned long, TimerInterface::TimerIsrCondition, TimerInterface::MatchControlRegister)+0xe8>)
   11dec:	f001 f9b6 	bl	1315c <__cyg_profile_func_exit>
  }
   11df0:	bf00      	nop
   11df2:	b006      	add	sp, #24
   11df4:	bd70      	pop	{r4, r5, r6, pc}
   11df6:	bf00      	nop
   11df8:	00011d11 	.word	0x00011d11
   11dfc:	10000014 	.word	0x10000014
   11e00:	aaaaaaab 	.word	0xaaaaaaab
   11e04:	1000028c 	.word	0x1000028c

00011e08 <Timer::GetTimer()>:

  [[gnu::always_inline]] uint32_t GetTimer() override final {
   11e08:	b530      	push	{r4, r5, lr}
   11e0a:	b083      	sub	sp, #12
   11e0c:	4675      	mov	r5, lr
   11e0e:	9001      	str	r0, [sp, #4]
   11e10:	462b      	mov	r3, r5
   11e12:	4619      	mov	r1, r3
   11e14:	4809      	ldr	r0, [pc, #36]	; (11e3c <Timer::GetTimer()+0x34>)
   11e16:	f001 f98d 	bl	13134 <__cyg_profile_func_enter>
    return tim_register[channel_]->TC;
   11e1a:	9b01      	ldr	r3, [sp, #4]
   11e1c:	7a1b      	ldrb	r3, [r3, #8]
   11e1e:	461a      	mov	r2, r3
   11e20:	4b07      	ldr	r3, [pc, #28]	; (11e40 <Timer::GetTimer()+0x38>)
   11e22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   11e26:	689c      	ldr	r4, [r3, #8]
   11e28:	462b      	mov	r3, r5
   11e2a:	4619      	mov	r1, r3
   11e2c:	4803      	ldr	r0, [pc, #12]	; (11e3c <Timer::GetTimer()+0x34>)
   11e2e:	f001 f995 	bl	1315c <__cyg_profile_func_exit>
   11e32:	4623      	mov	r3, r4
  }
   11e34:	4618      	mov	r0, r3
   11e36:	b003      	add	sp, #12
   11e38:	bd30      	pop	{r4, r5, pc}
   11e3a:	bf00      	nop
   11e3c:	00011e09 	.word	0x00011e09
   11e40:	10000014 	.word	0x10000014

00011e44 <Uart::SetBaudRate(unsigned long)>:
  constexpr Uart(Channels mode, PinInterface * tx_pin, PinInterface * rx_pin)
      : channel_(static_cast<uint8_t>(mode)), tx_(tx_pin), rx_(rx_pin)
  {
  }

  void SetBaudRate(uint32_t baud_rate) override
   11e44:	b510      	push	{r4, lr}
   11e46:	b088      	sub	sp, #32
   11e48:	4674      	mov	r4, lr
   11e4a:	9001      	str	r0, [sp, #4]
   11e4c:	9100      	str	r1, [sp, #0]
   11e4e:	4623      	mov	r3, r4
   11e50:	4619      	mov	r1, r3
   11e52:	482d      	ldr	r0, [pc, #180]	; (11f08 <Uart::SetBaudRate(unsigned long)+0xc4>)
   11e54:	f001 f96e 	bl	13134 <__cyg_profile_func_enter>
  {
    constexpr uint8_t kDlabBit = (1 << 7);
   11e58:	2380      	movs	r3, #128	; 0x80
   11e5a:	f88d 301f 	strb.w	r3, [sp, #31]
    float baudrate             = static_cast<float>(baud_rate);
   11e5e:	9b00      	ldr	r3, [sp, #0]
   11e60:	ee07 3a90 	vmov	s15, r3
   11e64:	eef8 7a67 	vcvt.f32.u32	s15, s15
   11e68:	edcd 7a06 	vstr	s15, [sp, #24]
    UartCalibration_t dividers = GenerateUartCalibration(baudrate);
   11e6c:	ab02      	add	r3, sp, #8
   11e6e:	ed9d 0a06 	vldr	s0, [sp, #24]
   11e72:	9901      	ldr	r1, [sp, #4]
   11e74:	4618      	mov	r0, r3
   11e76:	f000 fb2d 	bl	124d4 <Uart::GenerateUartCalibration(float)>

    uint8_t dlm = static_cast<uint8_t>((dividers.divide_latch >> 8) & 0xFF);
   11e7a:	9b02      	ldr	r3, [sp, #8]
   11e7c:	0a1b      	lsrs	r3, r3, #8
   11e7e:	f88d 3017 	strb.w	r3, [sp, #23]
    uint8_t dll = static_cast<uint8_t>(dividers.divide_latch & 0xFF);
   11e82:	9b02      	ldr	r3, [sp, #8]
   11e84:	f88d 3016 	strb.w	r3, [sp, #22]
    uint8_t fdr = static_cast<uint8_t>((dividers.multiply & 0xF) << 4 |
   11e88:	9b04      	ldr	r3, [sp, #16]
   11e8a:	b2db      	uxtb	r3, r3
   11e8c:	011b      	lsls	r3, r3, #4
   11e8e:	b2da      	uxtb	r2, r3
                                       (dividers.divide_add & 0xF));
   11e90:	9b03      	ldr	r3, [sp, #12]
   11e92:	b2db      	uxtb	r3, r3
   11e94:	f003 030f 	and.w	r3, r3, #15
   11e98:	b2db      	uxtb	r3, r3
    uint8_t fdr = static_cast<uint8_t>((dividers.multiply & 0xF) << 4 |
   11e9a:	4313      	orrs	r3, r2
   11e9c:	f88d 3015 	strb.w	r3, [sp, #21]

    // Set baud rate
    uart[channel_]->LCR = kDlabBit;
   11ea0:	9b01      	ldr	r3, [sp, #4]
   11ea2:	7a1b      	ldrb	r3, [r3, #8]
   11ea4:	461a      	mov	r2, r3
   11ea6:	4b19      	ldr	r3, [pc, #100]	; (11f0c <Uart::SetBaudRate(unsigned long)+0xc8>)
   11ea8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   11eac:	2280      	movs	r2, #128	; 0x80
   11eae:	731a      	strb	r2, [r3, #12]
    uart[channel_]->DLM = dlm;
   11eb0:	9b01      	ldr	r3, [sp, #4]
   11eb2:	7a1b      	ldrb	r3, [r3, #8]
   11eb4:	461a      	mov	r2, r3
   11eb6:	4b15      	ldr	r3, [pc, #84]	; (11f0c <Uart::SetBaudRate(unsigned long)+0xc8>)
   11eb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   11ebc:	f89d 2017 	ldrb.w	r2, [sp, #23]
   11ec0:	711a      	strb	r2, [r3, #4]
    uart[channel_]->DLL = dll;
   11ec2:	9b01      	ldr	r3, [sp, #4]
   11ec4:	7a1b      	ldrb	r3, [r3, #8]
   11ec6:	461a      	mov	r2, r3
   11ec8:	4b10      	ldr	r3, [pc, #64]	; (11f0c <Uart::SetBaudRate(unsigned long)+0xc8>)
   11eca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   11ece:	f89d 2016 	ldrb.w	r2, [sp, #22]
   11ed2:	701a      	strb	r2, [r3, #0]
    uart[channel_]->FDR = fdr;
   11ed4:	9b01      	ldr	r3, [sp, #4]
   11ed6:	7a1b      	ldrb	r3, [r3, #8]
   11ed8:	461a      	mov	r2, r3
   11eda:	4b0c      	ldr	r3, [pc, #48]	; (11f0c <Uart::SetBaudRate(unsigned long)+0xc8>)
   11edc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   11ee0:	f89d 2015 	ldrb.w	r2, [sp, #21]
   11ee4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    uart[channel_]->LCR = kStandardUart;
   11ee8:	9b01      	ldr	r3, [sp, #4]
   11eea:	7a1b      	ldrb	r3, [r3, #8]
   11eec:	461a      	mov	r2, r3
   11eee:	4b07      	ldr	r3, [pc, #28]	; (11f0c <Uart::SetBaudRate(unsigned long)+0xc8>)
   11ef0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   11ef4:	2203      	movs	r2, #3
   11ef6:	731a      	strb	r2, [r3, #12]
   11ef8:	4623      	mov	r3, r4
   11efa:	4619      	mov	r1, r3
   11efc:	4802      	ldr	r0, [pc, #8]	; (11f08 <Uart::SetBaudRate(unsigned long)+0xc4>)
   11efe:	f001 f92d 	bl	1315c <__cyg_profile_func_exit>
  }
   11f02:	bf00      	nop
   11f04:	b008      	add	sp, #32
   11f06:	bd10      	pop	{r4, pc}
   11f08:	00011e45 	.word	0x00011e45
   11f0c:	10000024 	.word	0x10000024

00011f10 <Uart::Initialize(unsigned long)>:

  bool Initialize(uint32_t baud_rate) override
   11f10:	b530      	push	{r4, r5, lr}
   11f12:	b085      	sub	sp, #20
   11f14:	4675      	mov	r5, lr
   11f16:	9001      	str	r0, [sp, #4]
   11f18:	9100      	str	r1, [sp, #0]
   11f1a:	462b      	mov	r3, r5
   11f1c:	4619      	mov	r1, r3
   11f1e:	4830      	ldr	r0, [pc, #192]	; (11fe0 <Uart::Initialize(unsigned long)+0xd0>)
   11f20:	f001 f908 	bl	13134 <__cyg_profile_func_enter>
  {
    constexpr uint8_t kFIFOEnableAndReset = 0b111;
   11f24:	2307      	movs	r3, #7
   11f26:	f88d 300f 	strb.w	r3, [sp, #15]
    // Powering the port
    PowerUpPeripheral(kPowerbit[channel_]);
   11f2a:	9b01      	ldr	r3, [sp, #4]
   11f2c:	1d18      	adds	r0, r3, #4
   11f2e:	9b01      	ldr	r3, [sp, #4]
   11f30:	685b      	ldr	r3, [r3, #4]
   11f32:	3314      	adds	r3, #20
   11f34:	681b      	ldr	r3, [r3, #0]
   11f36:	9a01      	ldr	r2, [sp, #4]
   11f38:	7a12      	ldrb	r2, [r2, #8]
   11f3a:	0092      	lsls	r2, r2, #2
   11f3c:	4929      	ldr	r1, [pc, #164]	; (11fe4 <Uart::Initialize(unsigned long)+0xd4>)
   11f3e:	440a      	add	r2, r1
   11f40:	4611      	mov	r1, r2
   11f42:	4798      	blx	r3
    // Setting the pin functions and modes
    rx_->SetPinFunction(kRxUartPortFunction[channel_]);
   11f44:	9b01      	ldr	r3, [sp, #4]
   11f46:	6918      	ldr	r0, [r3, #16]
   11f48:	9b01      	ldr	r3, [sp, #4]
   11f4a:	691b      	ldr	r3, [r3, #16]
   11f4c:	681b      	ldr	r3, [r3, #0]
   11f4e:	681b      	ldr	r3, [r3, #0]
   11f50:	9a01      	ldr	r2, [sp, #4]
   11f52:	7a12      	ldrb	r2, [r2, #8]
   11f54:	4611      	mov	r1, r2
   11f56:	4a24      	ldr	r2, [pc, #144]	; (11fe8 <Uart::Initialize(unsigned long)+0xd8>)
   11f58:	5c52      	ldrb	r2, [r2, r1]
   11f5a:	4611      	mov	r1, r2
   11f5c:	4798      	blx	r3
    tx_->SetPinFunction(kTxUartPortFunction[channel_]);
   11f5e:	9b01      	ldr	r3, [sp, #4]
   11f60:	68d8      	ldr	r0, [r3, #12]
   11f62:	9b01      	ldr	r3, [sp, #4]
   11f64:	68db      	ldr	r3, [r3, #12]
   11f66:	681b      	ldr	r3, [r3, #0]
   11f68:	681b      	ldr	r3, [r3, #0]
   11f6a:	9a01      	ldr	r2, [sp, #4]
   11f6c:	7a12      	ldrb	r2, [r2, #8]
   11f6e:	4611      	mov	r1, r2
   11f70:	4a1e      	ldr	r2, [pc, #120]	; (11fec <Uart::Initialize(unsigned long)+0xdc>)
   11f72:	5c52      	ldrb	r2, [r2, r1]
   11f74:	4611      	mov	r1, r2
   11f76:	4798      	blx	r3
    rx_->SetMode(PinInterface::Mode::kPullUp);
   11f78:	9b01      	ldr	r3, [sp, #4]
   11f7a:	691a      	ldr	r2, [r3, #16]
   11f7c:	9b01      	ldr	r3, [sp, #4]
   11f7e:	691b      	ldr	r3, [r3, #16]
   11f80:	681b      	ldr	r3, [r3, #0]
   11f82:	3304      	adds	r3, #4
   11f84:	681b      	ldr	r3, [r3, #0]
   11f86:	2102      	movs	r1, #2
   11f88:	4610      	mov	r0, r2
   11f8a:	4798      	blx	r3
    tx_->SetMode(PinInterface::Mode::kPullUp);
   11f8c:	9b01      	ldr	r3, [sp, #4]
   11f8e:	68da      	ldr	r2, [r3, #12]
   11f90:	9b01      	ldr	r3, [sp, #4]
   11f92:	68db      	ldr	r3, [r3, #12]
   11f94:	681b      	ldr	r3, [r3, #0]
   11f96:	3304      	adds	r3, #4
   11f98:	681b      	ldr	r3, [r3, #0]
   11f9a:	2102      	movs	r1, #2
   11f9c:	4610      	mov	r0, r2
   11f9e:	4798      	blx	r3
    // Baud rate setting
    SetBaudRate(baud_rate);
   11fa0:	9900      	ldr	r1, [sp, #0]
   11fa2:	9801      	ldr	r0, [sp, #4]
   11fa4:	f7ff ff4e 	bl	11e44 <Uart::SetBaudRate(unsigned long)>
    uart[channel_]->FCR |= kFIFOEnableAndReset;
   11fa8:	9b01      	ldr	r3, [sp, #4]
   11faa:	7a1b      	ldrb	r3, [r3, #8]
   11fac:	461a      	mov	r2, r3
   11fae:	4b10      	ldr	r3, [pc, #64]	; (11ff0 <Uart::Initialize(unsigned long)+0xe0>)
   11fb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   11fb4:	7a1b      	ldrb	r3, [r3, #8]
   11fb6:	b2da      	uxtb	r2, r3
   11fb8:	9b01      	ldr	r3, [sp, #4]
   11fba:	7a1b      	ldrb	r3, [r3, #8]
   11fbc:	4619      	mov	r1, r3
   11fbe:	4b0c      	ldr	r3, [pc, #48]	; (11ff0 <Uart::Initialize(unsigned long)+0xe0>)
   11fc0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   11fc4:	f042 0207 	orr.w	r2, r2, #7
   11fc8:	b2d2      	uxtb	r2, r2
   11fca:	721a      	strb	r2, [r3, #8]
    return true;
   11fcc:	2401      	movs	r4, #1
   11fce:	462b      	mov	r3, r5
   11fd0:	4619      	mov	r1, r3
   11fd2:	4803      	ldr	r0, [pc, #12]	; (11fe0 <Uart::Initialize(unsigned long)+0xd0>)
   11fd4:	f001 f8c2 	bl	1315c <__cyg_profile_func_exit>
   11fd8:	4623      	mov	r3, r4
  }
   11fda:	4618      	mov	r0, r3
   11fdc:	b005      	add	sp, #20
   11fde:	bd30      	pop	{r4, r5, pc}
   11fe0:	00011f11 	.word	0x00011f11
   11fe4:	00017e3c 	.word	0x00017e3c
   11fe8:	00017e38 	.word	0x00017e38
   11fec:	00017e34 	.word	0x00017e34
   11ff0:	10000024 	.word	0x10000024

00011ff4 <Uart::Send(unsigned char)::{lambda()#1}::operator()() const>:

  void Send(uint8_t data) override
  {
    uart[channel_]->THR              = data;
    auto wait_for_transfer_to_finish = [this]() -> bool {
   11ff4:	b530      	push	{r4, r5, lr}
   11ff6:	b083      	sub	sp, #12
   11ff8:	4675      	mov	r5, lr
   11ffa:	9001      	str	r0, [sp, #4]
   11ffc:	462b      	mov	r3, r5
   11ffe:	4619      	mov	r1, r3
   12000:	480d      	ldr	r0, [pc, #52]	; (12038 <Uart::Send(unsigned char)::{lambda()#1}::operator()() const+0x44>)
   12002:	f001 f897 	bl	13134 <__cyg_profile_func_enter>
   12006:	9b01      	ldr	r3, [sp, #4]
   12008:	681b      	ldr	r3, [r3, #0]
      return (uart[channel_]->LSR & (1 << 5));
   1200a:	7a1b      	ldrb	r3, [r3, #8]
   1200c:	461a      	mov	r2, r3
   1200e:	4b0b      	ldr	r3, [pc, #44]	; (1203c <Uart::Send(unsigned char)::{lambda()#1}::operator()() const+0x48>)
   12010:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   12014:	7d1b      	ldrb	r3, [r3, #20]
   12016:	b2db      	uxtb	r3, r3
   12018:	f003 0320 	and.w	r3, r3, #32
   1201c:	2b00      	cmp	r3, #0
   1201e:	bf14      	ite	ne
   12020:	2301      	movne	r3, #1
   12022:	2300      	moveq	r3, #0
   12024:	b2dc      	uxtb	r4, r3
   12026:	462b      	mov	r3, r5
   12028:	4619      	mov	r1, r3
   1202a:	4803      	ldr	r0, [pc, #12]	; (12038 <Uart::Send(unsigned char)::{lambda()#1}::operator()() const+0x44>)
   1202c:	f001 f896 	bl	1315c <__cyg_profile_func_exit>
   12030:	4623      	mov	r3, r4
    };
   12032:	4618      	mov	r0, r3
   12034:	b003      	add	sp, #12
   12036:	bd30      	pop	{r4, r5, pc}
   12038:	00011ff5 	.word	0x00011ff5
   1203c:	10000024 	.word	0x10000024

00012040 <Uart::Send(unsigned char)>:
  void Send(uint8_t data) override
   12040:	e92d 4830 	stmdb	sp!, {r4, r5, fp, lr}
   12044:	b08a      	sub	sp, #40	; 0x28
   12046:	4675      	mov	r5, lr
   12048:	9001      	str	r0, [sp, #4]
   1204a:	460b      	mov	r3, r1
   1204c:	f88d 3003 	strb.w	r3, [sp, #3]
   12050:	462b      	mov	r3, r5
   12052:	4619      	mov	r1, r3
   12054:	4831      	ldr	r0, [pc, #196]	; (1211c <Uart::Send(unsigned char)+0xdc>)
   12056:	f001 f86d 	bl	13134 <__cyg_profile_func_enter>
    uart[channel_]->THR              = data;
   1205a:	9b01      	ldr	r3, [sp, #4]
   1205c:	7a1b      	ldrb	r3, [r3, #8]
   1205e:	461a      	mov	r2, r3
   12060:	4b2f      	ldr	r3, [pc, #188]	; (12120 <Uart::Send(unsigned char)+0xe0>)
   12062:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   12066:	f89d 2003 	ldrb.w	r2, [sp, #3]
   1206a:	701a      	strb	r2, [r3, #0]
    };
   1206c:	9b01      	ldr	r3, [sp, #4]
   1206e:	9304      	str	r3, [sp, #16]
   12070:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   12074:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   12078:	e9cd 3408 	strd	r3, r4, [sp, #32]
   1207c:	9b04      	ldr	r3, [sp, #16]
   1207e:	9303      	str	r3, [sp, #12]
   12080:	462b      	mov	r3, r5
   12082:	4619      	mov	r1, r3
   12084:	4827      	ldr	r0, [pc, #156]	; (12124 <Uart::Send(unsigned char)+0xe4>)
   12086:	f001 f855 	bl	13134 <__cyg_profile_func_enter>
  uint64_t timeout_time = 0;
   1208a:	f04f 0300 	mov.w	r3, #0
   1208e:	f04f 0400 	mov.w	r4, #0
   12092:	e9cd 3406 	strd	r3, r4, [sp, #24]
  if (timeout == kMaxWait)
   12096:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   1209a:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
   1209e:	bf08      	it	eq
   120a0:	f1b3 3fff 	cmpeq.w	r3, #4294967295	; 0xffffffff
   120a4:	d106      	bne.n	120b4 <Uart::Send(unsigned char)+0x74>
    timeout_time = kMaxWait;
   120a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   120aa:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   120ae:	e9cd 3406 	strd	r3, r4, [sp, #24]
   120b2:	e00b      	b.n	120cc <Uart::Send(unsigned char)+0x8c>
    timeout_time = Milliseconds() + timeout;
   120b4:	f7fe fbe8 	bl	10888 <Milliseconds()>
   120b8:	460a      	mov	r2, r1
   120ba:	4601      	mov	r1, r0
   120bc:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   120c0:	eb13 0b01 	adds.w	fp, r3, r1
   120c4:	eb44 0c02 	adc.w	ip, r4, r2
   120c8:	e9cd bc06 	strd	fp, ip, [sp, #24]
  Status status = Status::kTimedOut;
   120cc:	2301      	movs	r3, #1
   120ce:	9305      	str	r3, [sp, #20]
  while (Milliseconds() < timeout_time)
   120d0:	f7fe fbda 	bl	10888 <Milliseconds()>
   120d4:	460a      	mov	r2, r1
   120d6:	4601      	mov	r1, r0
   120d8:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
   120dc:	42a2      	cmp	r2, r4
   120de:	bf08      	it	eq
   120e0:	4299      	cmpeq	r1, r3
   120e2:	bf34      	ite	cc
   120e4:	2301      	movcc	r3, #1
   120e6:	2300      	movcs	r3, #0
   120e8:	b2db      	uxtb	r3, r3
   120ea:	2b00      	cmp	r3, #0
   120ec:	d008      	beq.n	12100 <Uart::Send(unsigned char)+0xc0>
    if (is_done())
   120ee:	ab03      	add	r3, sp, #12
   120f0:	4618      	mov	r0, r3
   120f2:	f7ff ff7f 	bl	11ff4 <Uart::Send(unsigned char)::{lambda()#1}::operator()() const>
   120f6:	4603      	mov	r3, r0
   120f8:	2b00      	cmp	r3, #0
   120fa:	d0e9      	beq.n	120d0 <Uart::Send(unsigned char)+0x90>
      status = Status::kSuccess;
   120fc:	2300      	movs	r3, #0
   120fe:	9305      	str	r3, [sp, #20]
   12100:	462b      	mov	r3, r5
   12102:	4619      	mov	r1, r3
   12104:	4807      	ldr	r0, [pc, #28]	; (12124 <Uart::Send(unsigned char)+0xe4>)
   12106:	f001 f829 	bl	1315c <__cyg_profile_func_exit>
   1210a:	462b      	mov	r3, r5
   1210c:	4619      	mov	r1, r3
   1210e:	4803      	ldr	r0, [pc, #12]	; (1211c <Uart::Send(unsigned char)+0xdc>)
   12110:	f001 f824 	bl	1315c <__cyg_profile_func_exit>
    Wait(kMaxWait, wait_for_transfer_to_finish);
  }
   12114:	bf00      	nop
   12116:	b00a      	add	sp, #40	; 0x28
   12118:	e8bd 8830 	ldmia.w	sp!, {r4, r5, fp, pc}
   1211c:	00012041 	.word	0x00012041
   12120:	10000024 	.word	0x10000024
   12124:	0001293d 	.word	0x0001293d

00012128 <Uart::Receive(unsigned long)::{lambda()#1}::operator()() const>:

  uint8_t Receive([[maybe_unused]] uint32_t timeout = 0x7FFFFFFF) override
  {
    uint8_t receiver   = '\xFF';
    auto byte_recieved = [this]() -> bool {
   12128:	b530      	push	{r4, r5, lr}
   1212a:	b083      	sub	sp, #12
   1212c:	4675      	mov	r5, lr
   1212e:	9001      	str	r0, [sp, #4]
   12130:	462b      	mov	r3, r5
   12132:	4619      	mov	r1, r3
   12134:	480d      	ldr	r0, [pc, #52]	; (1216c <Uart::Receive(unsigned long)::{lambda()#1}::operator()() const+0x44>)
   12136:	f000 fffd 	bl	13134 <__cyg_profile_func_enter>
   1213a:	9b01      	ldr	r3, [sp, #4]
   1213c:	681b      	ldr	r3, [r3, #0]
      return (uart[channel_]->LSR & (1 << 0));
   1213e:	7a1b      	ldrb	r3, [r3, #8]
   12140:	461a      	mov	r2, r3
   12142:	4b0b      	ldr	r3, [pc, #44]	; (12170 <Uart::Receive(unsigned long)::{lambda()#1}::operator()() const+0x48>)
   12144:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   12148:	7d1b      	ldrb	r3, [r3, #20]
   1214a:	b2db      	uxtb	r3, r3
   1214c:	f003 0301 	and.w	r3, r3, #1
   12150:	2b00      	cmp	r3, #0
   12152:	bf14      	ite	ne
   12154:	2301      	movne	r3, #1
   12156:	2300      	moveq	r3, #0
   12158:	b2dc      	uxtb	r4, r3
   1215a:	462b      	mov	r3, r5
   1215c:	4619      	mov	r1, r3
   1215e:	4803      	ldr	r0, [pc, #12]	; (1216c <Uart::Receive(unsigned long)::{lambda()#1}::operator()() const+0x44>)
   12160:	f000 fffc 	bl	1315c <__cyg_profile_func_exit>
   12164:	4623      	mov	r3, r4
    };
   12166:	4618      	mov	r0, r3
   12168:	b003      	add	sp, #12
   1216a:	bd30      	pop	{r4, r5, pc}
   1216c:	00012129 	.word	0x00012129
   12170:	10000024 	.word	0x10000024

00012174 <Uart::Receive(unsigned long)>:
  uint8_t Receive([[maybe_unused]] uint32_t timeout = 0x7FFFFFFF) override
   12174:	e92d 4830 	stmdb	sp!, {r4, r5, fp, lr}
   12178:	b08c      	sub	sp, #48	; 0x30
   1217a:	4675      	mov	r5, lr
   1217c:	9001      	str	r0, [sp, #4]
   1217e:	9100      	str	r1, [sp, #0]
   12180:	462b      	mov	r3, r5
   12182:	4619      	mov	r1, r3
   12184:	4836      	ldr	r0, [pc, #216]	; (12260 <Uart::Receive(unsigned long)+0xec>)
   12186:	f000 ffd5 	bl	13134 <__cyg_profile_func_enter>
    uint8_t receiver   = '\xFF';
   1218a:	23ff      	movs	r3, #255	; 0xff
   1218c:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
    };
   12190:	9b01      	ldr	r3, [sp, #4]
   12192:	9304      	str	r3, [sp, #16]

    Status status = Wait(timeout, byte_recieved);
   12194:	9b00      	ldr	r3, [sp, #0]
   12196:	f04f 0400 	mov.w	r4, #0
   1219a:	e9cd 3408 	strd	r3, r4, [sp, #32]
   1219e:	9b04      	ldr	r3, [sp, #16]
   121a0:	9303      	str	r3, [sp, #12]
   121a2:	462b      	mov	r3, r5
   121a4:	4619      	mov	r1, r3
   121a6:	482f      	ldr	r0, [pc, #188]	; (12264 <Uart::Receive(unsigned long)+0xf0>)
   121a8:	f000 ffc4 	bl	13134 <__cyg_profile_func_enter>
  uint64_t timeout_time = 0;
   121ac:	f04f 0300 	mov.w	r3, #0
   121b0:	f04f 0400 	mov.w	r4, #0
   121b4:	e9cd 3406 	strd	r3, r4, [sp, #24]
  if (timeout == kMaxWait)
   121b8:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   121bc:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
   121c0:	bf08      	it	eq
   121c2:	f1b3 3fff 	cmpeq.w	r3, #4294967295	; 0xffffffff
   121c6:	d106      	bne.n	121d6 <Uart::Receive(unsigned long)+0x62>
    timeout_time = kMaxWait;
   121c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   121cc:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   121d0:	e9cd 3406 	strd	r3, r4, [sp, #24]
   121d4:	e00b      	b.n	121ee <Uart::Receive(unsigned long)+0x7a>
    timeout_time = Milliseconds() + timeout;
   121d6:	f7fe fb57 	bl	10888 <Milliseconds()>
   121da:	460a      	mov	r2, r1
   121dc:	4601      	mov	r1, r0
   121de:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   121e2:	eb13 0b01 	adds.w	fp, r3, r1
   121e6:	eb44 0c02 	adc.w	ip, r4, r2
   121ea:	e9cd bc06 	strd	fp, ip, [sp, #24]
  Status status = Status::kTimedOut;
   121ee:	2301      	movs	r3, #1
   121f0:	9305      	str	r3, [sp, #20]
  while (Milliseconds() < timeout_time)
   121f2:	f7fe fb49 	bl	10888 <Milliseconds()>
   121f6:	460a      	mov	r2, r1
   121f8:	4601      	mov	r1, r0
   121fa:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
   121fe:	42a2      	cmp	r2, r4
   12200:	bf08      	it	eq
   12202:	4299      	cmpeq	r1, r3
   12204:	bf34      	ite	cc
   12206:	2301      	movcc	r3, #1
   12208:	2300      	movcs	r3, #0
   1220a:	b2db      	uxtb	r3, r3
   1220c:	2b00      	cmp	r3, #0
   1220e:	d008      	beq.n	12222 <Uart::Receive(unsigned long)+0xae>
    if (is_done())
   12210:	ab03      	add	r3, sp, #12
   12212:	4618      	mov	r0, r3
   12214:	f7ff ff88 	bl	12128 <Uart::Receive(unsigned long)::{lambda()#1}::operator()() const>
   12218:	4603      	mov	r3, r0
   1221a:	2b00      	cmp	r3, #0
   1221c:	d0e9      	beq.n	121f2 <Uart::Receive(unsigned long)+0x7e>
      status = Status::kSuccess;
   1221e:	2300      	movs	r3, #0
   12220:	9305      	str	r3, [sp, #20]
  return status;
   12222:	9c05      	ldr	r4, [sp, #20]
   12224:	462b      	mov	r3, r5
   12226:	4619      	mov	r1, r3
   12228:	480e      	ldr	r0, [pc, #56]	; (12264 <Uart::Receive(unsigned long)+0xf0>)
   1222a:	f000 ff97 	bl	1315c <__cyg_profile_func_exit>
   1222e:	940a      	str	r4, [sp, #40]	; 0x28

    if (status == Status::kSuccess)
   12230:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   12232:	2b00      	cmp	r3, #0
   12234:	d108      	bne.n	12248 <Uart::Receive(unsigned long)+0xd4>
    {
      receiver = static_cast<uint8_t>(uart[channel_]->RBR);
   12236:	9b01      	ldr	r3, [sp, #4]
   12238:	7a1b      	ldrb	r3, [r3, #8]
   1223a:	461a      	mov	r2, r3
   1223c:	4b0a      	ldr	r3, [pc, #40]	; (12268 <Uart::Receive(unsigned long)+0xf4>)
   1223e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   12242:	781b      	ldrb	r3, [r3, #0]
   12244:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
    }
    return receiver;
   12248:	f89d 402f 	ldrb.w	r4, [sp, #47]	; 0x2f
   1224c:	462b      	mov	r3, r5
   1224e:	4619      	mov	r1, r3
   12250:	4803      	ldr	r0, [pc, #12]	; (12260 <Uart::Receive(unsigned long)+0xec>)
   12252:	f000 ff83 	bl	1315c <__cyg_profile_func_exit>
   12256:	4623      	mov	r3, r4
  }
   12258:	4618      	mov	r0, r3
   1225a:	b00c      	add	sp, #48	; 0x30
   1225c:	e8bd 8830 	ldmia.w	sp!, {r4, r5, fp, pc}
   12260:	00012175 	.word	0x00012175
   12264:	000129e5 	.word	0x000129e5
   12268:	10000024 	.word	0x10000024

0001226c <Uart::FindClosestFractional(float)>:

 private:
  UartCalibration_t FindClosestFractional(float decimal)
   1226c:	b510      	push	{r4, lr}
   1226e:	b08a      	sub	sp, #40	; 0x28
   12270:	4674      	mov	r4, lr
   12272:	9003      	str	r0, [sp, #12]
   12274:	9102      	str	r1, [sp, #8]
   12276:	ed8d 0a01 	vstr	s0, [sp, #4]
   1227a:	4623      	mov	r3, r4
   1227c:	4619      	mov	r1, r3
   1227e:	4838      	ldr	r0, [pc, #224]	; (12360 <Uart::FindClosestFractional(float)+0xf4>)
   12280:	f000 ff58 	bl	13134 <__cyg_profile_func_enter>
  {
    UartCalibration_t result;
   12284:	9b03      	ldr	r3, [sp, #12]
   12286:	2200      	movs	r2, #0
   12288:	601a      	str	r2, [r3, #0]
   1228a:	9b03      	ldr	r3, [sp, #12]
   1228c:	2200      	movs	r2, #0
   1228e:	605a      	str	r2, [r3, #4]
   12290:	9b03      	ldr	r3, [sp, #12]
   12292:	2201      	movs	r2, #1
   12294:	609a      	str	r2, [r3, #8]
    bool finished = false;
   12296:	2300      	movs	r3, #0
   12298:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    for (int div = 0; div < 15 && !finished; div++)
   1229c:	2300      	movs	r3, #0
   1229e:	9308      	str	r3, [sp, #32]
   122a0:	9b08      	ldr	r3, [sp, #32]
   122a2:	2b0e      	cmp	r3, #14
   122a4:	dc52      	bgt.n	1234c <Uart::FindClosestFractional(float)+0xe0>
   122a6:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   122aa:	2b00      	cmp	r3, #0
   122ac:	d14e      	bne.n	1234c <Uart::FindClosestFractional(float)+0xe0>
    {
      for (int mul = div + 1; mul < 15 && !finished; mul++)
   122ae:	9b08      	ldr	r3, [sp, #32]
   122b0:	3301      	adds	r3, #1
   122b2:	9307      	str	r3, [sp, #28]
   122b4:	9b07      	ldr	r3, [sp, #28]
   122b6:	2b0e      	cmp	r3, #14
   122b8:	dc44      	bgt.n	12344 <Uart::FindClosestFractional(float)+0xd8>
   122ba:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   122be:	2b00      	cmp	r3, #0
   122c0:	d140      	bne.n	12344 <Uart::FindClosestFractional(float)+0xd8>
      {
        float divf         = static_cast<float>(div);
   122c2:	9b08      	ldr	r3, [sp, #32]
   122c4:	ee07 3a90 	vmov	s15, r3
   122c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   122cc:	edcd 7a06 	vstr	s15, [sp, #24]
        float mulf         = static_cast<float>(mul);
   122d0:	9b07      	ldr	r3, [sp, #28]
   122d2:	ee07 3a90 	vmov	s15, r3
   122d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   122da:	edcd 7a05 	vstr	s15, [sp, #20]
        float test_decimal = 1.0f + divf / mulf;
   122de:	eddd 6a06 	vldr	s13, [sp, #24]
   122e2:	ed9d 7a05 	vldr	s14, [sp, #20]
   122e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
   122ea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
   122ee:	ee77 7a87 	vadd.f32	s15, s15, s14
   122f2:	edcd 7a04 	vstr	s15, [sp, #16]
        if (decimal <= test_decimal + kThreshold &&
   122f6:	eddd 7a04 	vldr	s15, [sp, #16]
   122fa:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 12364 <Uart::FindClosestFractional(float)+0xf8>
   122fe:	ee77 7a87 	vadd.f32	s15, s15, s14
   12302:	ed9d 7a01 	vldr	s14, [sp, #4]
   12306:	eeb4 7ae7 	vcmpe.f32	s14, s15
   1230a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1230e:	d815      	bhi.n	1233c <Uart::FindClosestFractional(float)+0xd0>
            decimal >= test_decimal - kThreshold)
   12310:	eddd 7a04 	vldr	s15, [sp, #16]
   12314:	ed9f 7a13 	vldr	s14, [pc, #76]	; 12364 <Uart::FindClosestFractional(float)+0xf8>
   12318:	ee77 7ac7 	vsub.f32	s15, s15, s14
        if (decimal <= test_decimal + kThreshold &&
   1231c:	ed9d 7a01 	vldr	s14, [sp, #4]
   12320:	eeb4 7ae7 	vcmpe.f32	s14, s15
   12324:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   12328:	db08      	blt.n	1233c <Uart::FindClosestFractional(float)+0xd0>
        {
          result.divide_add = div;
   1232a:	9a08      	ldr	r2, [sp, #32]
   1232c:	9b03      	ldr	r3, [sp, #12]
   1232e:	605a      	str	r2, [r3, #4]
          result.multiply   = mul;
   12330:	9a07      	ldr	r2, [sp, #28]
   12332:	9b03      	ldr	r3, [sp, #12]
   12334:	609a      	str	r2, [r3, #8]
          finished          = true;
   12336:	2301      	movs	r3, #1
   12338:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
      for (int mul = div + 1; mul < 15 && !finished; mul++)
   1233c:	9b07      	ldr	r3, [sp, #28]
   1233e:	3301      	adds	r3, #1
   12340:	9307      	str	r3, [sp, #28]
   12342:	e7b7      	b.n	122b4 <Uart::FindClosestFractional(float)+0x48>
    for (int div = 0; div < 15 && !finished; div++)
   12344:	9b08      	ldr	r3, [sp, #32]
   12346:	3301      	adds	r3, #1
   12348:	9308      	str	r3, [sp, #32]
   1234a:	e7a9      	b.n	122a0 <Uart::FindClosestFractional(float)+0x34>
        }
      }
    }
    return result;
   1234c:	bf00      	nop
   1234e:	4623      	mov	r3, r4
   12350:	4619      	mov	r1, r3
   12352:	4803      	ldr	r0, [pc, #12]	; (12360 <Uart::FindClosestFractional(float)+0xf4>)
   12354:	f000 ff02 	bl	1315c <__cyg_profile_func_exit>
   12358:	bf00      	nop
  }
   1235a:	9803      	ldr	r0, [sp, #12]
   1235c:	b00a      	add	sp, #40	; 0x28
   1235e:	bd10      	pop	{r4, pc}
   12360:	0001226d 	.word	0x0001226d
   12364:	3d4ccccd 	.word	0x3d4ccccd

00012368 <Uart::DividerEstimate(float, float)>:

  float DividerEstimate(float baud_rate, float fraction_estimate = 1)
   12368:	b510      	push	{r4, lr}
   1236a:	ed2d 8b02 	vpush	{d8}
   1236e:	b086      	sub	sp, #24
   12370:	4674      	mov	r4, lr
   12372:	9003      	str	r0, [sp, #12]
   12374:	ed8d 0a02 	vstr	s0, [sp, #8]
   12378:	edcd 0a01 	vstr	s1, [sp, #4]
   1237c:	4623      	mov	r3, r4
   1237e:	4619      	mov	r1, r3
   12380:	4815      	ldr	r0, [pc, #84]	; (123d8 <Uart::DividerEstimate(float, float)+0x70>)
   12382:	f000 fed7 	bl	13134 <__cyg_profile_func_enter>
  {
    float clock_frequency = static_cast<float>(GetPeripheralFrequency());
   12386:	9b03      	ldr	r3, [sp, #12]
   12388:	1d1a      	adds	r2, r3, #4
   1238a:	9b03      	ldr	r3, [sp, #12]
   1238c:	685b      	ldr	r3, [r3, #4]
   1238e:	3310      	adds	r3, #16
   12390:	681b      	ldr	r3, [r3, #0]
   12392:	4610      	mov	r0, r2
   12394:	4798      	blx	r3
   12396:	ee07 0a90 	vmov	s15, r0
   1239a:	eef8 7a67 	vcvt.f32.u32	s15, s15
   1239e:	edcd 7a05 	vstr	s15, [sp, #20]
    return clock_frequency / (16.0f * baud_rate * fraction_estimate);
   123a2:	eddd 7a02 	vldr	s15, [sp, #8]
   123a6:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
   123aa:	ee27 7a87 	vmul.f32	s14, s15, s14
   123ae:	eddd 7a01 	vldr	s15, [sp, #4]
   123b2:	ee67 7a27 	vmul.f32	s15, s14, s15
   123b6:	ed9d 7a05 	vldr	s14, [sp, #20]
   123ba:	ee87 8a27 	vdiv.f32	s16, s14, s15
   123be:	4623      	mov	r3, r4
   123c0:	4619      	mov	r1, r3
   123c2:	4805      	ldr	r0, [pc, #20]	; (123d8 <Uart::DividerEstimate(float, float)+0x70>)
   123c4:	f000 feca 	bl	1315c <__cyg_profile_func_exit>
   123c8:	eef0 7a48 	vmov.f32	s15, s16
  }
   123cc:	eeb0 0a67 	vmov.f32	s0, s15
   123d0:	b006      	add	sp, #24
   123d2:	ecbd 8b02 	vpop	{d8}
   123d6:	bd10      	pop	{r4, pc}
   123d8:	00012369 	.word	0x00012369

000123dc <Uart::FractionalEstimate(float, float)>:

  float FractionalEstimate(float baud_rate, float divider)
   123dc:	b510      	push	{r4, lr}
   123de:	ed2d 8b02 	vpush	{d8}
   123e2:	b086      	sub	sp, #24
   123e4:	4674      	mov	r4, lr
   123e6:	9003      	str	r0, [sp, #12]
   123e8:	ed8d 0a02 	vstr	s0, [sp, #8]
   123ec:	edcd 0a01 	vstr	s1, [sp, #4]
   123f0:	4623      	mov	r3, r4
   123f2:	4619      	mov	r1, r3
   123f4:	4815      	ldr	r0, [pc, #84]	; (1244c <Uart::FractionalEstimate(float, float)+0x70>)
   123f6:	f000 fe9d 	bl	13134 <__cyg_profile_func_enter>
  {
    float clock_frequency = static_cast<float>(GetPeripheralFrequency());
   123fa:	9b03      	ldr	r3, [sp, #12]
   123fc:	1d1a      	adds	r2, r3, #4
   123fe:	9b03      	ldr	r3, [sp, #12]
   12400:	685b      	ldr	r3, [r3, #4]
   12402:	3310      	adds	r3, #16
   12404:	681b      	ldr	r3, [r3, #0]
   12406:	4610      	mov	r0, r2
   12408:	4798      	blx	r3
   1240a:	ee07 0a90 	vmov	s15, r0
   1240e:	eef8 7a67 	vcvt.f32.u32	s15, s15
   12412:	edcd 7a05 	vstr	s15, [sp, #20]
    return clock_frequency / (16.0f * baud_rate * divider);
   12416:	eddd 7a02 	vldr	s15, [sp, #8]
   1241a:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
   1241e:	ee27 7a87 	vmul.f32	s14, s15, s14
   12422:	eddd 7a01 	vldr	s15, [sp, #4]
   12426:	ee67 7a27 	vmul.f32	s15, s14, s15
   1242a:	ed9d 7a05 	vldr	s14, [sp, #20]
   1242e:	ee87 8a27 	vdiv.f32	s16, s14, s15
   12432:	4623      	mov	r3, r4
   12434:	4619      	mov	r1, r3
   12436:	4805      	ldr	r0, [pc, #20]	; (1244c <Uart::FractionalEstimate(float, float)+0x70>)
   12438:	f000 fe90 	bl	1315c <__cyg_profile_func_exit>
   1243c:	eef0 7a48 	vmov.f32	s15, s16
  }
   12440:	eeb0 0a67 	vmov.f32	s0, s15
   12444:	b006      	add	sp, #24
   12446:	ecbd 8b02 	vpop	{d8}
   1244a:	bd10      	pop	{r4, pc}
   1244c:	000123dd 	.word	0x000123dd

00012450 <Uart::IsDecmial(float)>:

  bool IsDecmial(float value)
   12450:	b530      	push	{r4, r5, lr}
   12452:	b087      	sub	sp, #28
   12454:	4675      	mov	r5, lr
   12456:	9001      	str	r0, [sp, #4]
   12458:	ed8d 0a00 	vstr	s0, [sp]
   1245c:	462b      	mov	r3, r5
   1245e:	4619      	mov	r1, r3
   12460:	4819      	ldr	r0, [pc, #100]	; (124c8 <Uart::IsDecmial(float)+0x78>)
   12462:	f000 fe67 	bl	13134 <__cyg_profile_func_enter>
  {
    bool result         = false;
   12466:	2300      	movs	r3, #0
   12468:	f88d 3017 	strb.w	r3, [sp, #23]
    float rounded_value = roundf(value);
   1246c:	ed9d 0a00 	vldr	s0, [sp]
   12470:	f004 fe40 	bl	170f4 <roundf>
   12474:	ed8d 0a04 	vstr	s0, [sp, #16]
    float error         = value - rounded_value;
   12478:	ed9d 7a00 	vldr	s14, [sp]
   1247c:	eddd 7a04 	vldr	s15, [sp, #16]
   12480:	ee77 7a67 	vsub.f32	s15, s14, s15
   12484:	edcd 7a03 	vstr	s15, [sp, #12]
    if (-kThreshold <= error && error <= kThreshold)
   12488:	eddd 7a03 	vldr	s15, [sp, #12]
   1248c:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 124cc <Uart::IsDecmial(float)+0x7c>
   12490:	eef4 7ac7 	vcmpe.f32	s15, s14
   12494:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   12498:	db0b      	blt.n	124b2 <Uart::IsDecmial(float)+0x62>
   1249a:	eddd 7a03 	vldr	s15, [sp, #12]
   1249e:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 124d0 <Uart::IsDecmial(float)+0x80>
   124a2:	eef4 7ac7 	vcmpe.f32	s15, s14
   124a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   124aa:	d802      	bhi.n	124b2 <Uart::IsDecmial(float)+0x62>
    {
      result = true;
   124ac:	2301      	movs	r3, #1
   124ae:	f88d 3017 	strb.w	r3, [sp, #23]
    }
    return result;
   124b2:	f89d 4017 	ldrb.w	r4, [sp, #23]
   124b6:	462b      	mov	r3, r5
   124b8:	4619      	mov	r1, r3
   124ba:	4803      	ldr	r0, [pc, #12]	; (124c8 <Uart::IsDecmial(float)+0x78>)
   124bc:	f000 fe4e 	bl	1315c <__cyg_profile_func_exit>
   124c0:	4623      	mov	r3, r4
  }
   124c2:	4618      	mov	r0, r3
   124c4:	b007      	add	sp, #28
   124c6:	bd30      	pop	{r4, r5, pc}
   124c8:	00012451 	.word	0x00012451
   124cc:	bd4ccccd 	.word	0xbd4ccccd
   124d0:	3d4ccccd 	.word	0x3d4ccccd

000124d4 <Uart::GenerateUartCalibration(float)>:

  UartCalibration_t GenerateUartCalibration(float baud_rate)
   124d4:	b530      	push	{r4, r5, lr}
   124d6:	b08f      	sub	sp, #60	; 0x3c
   124d8:	4675      	mov	r5, lr
   124da:	9007      	str	r0, [sp, #28]
   124dc:	9106      	str	r1, [sp, #24]
   124de:	ed8d 0a05 	vstr	s0, [sp, #20]
   124e2:	462b      	mov	r3, r5
   124e4:	4619      	mov	r1, r3
   124e6:	4874      	ldr	r0, [pc, #464]	; (126b8 <Uart::GenerateUartCalibration(float)+0x1e4>)
   124e8:	f000 fe24 	bl	13134 <__cyg_profile_func_enter>
  {
    States state = States::kCalculateIntegerDivideLatch;
   124ec:	2300      	movs	r3, #0
   124ee:	930d      	str	r3, [sp, #52]	; 0x34
    UartCalibration_t uart_calibration;
   124f0:	9b07      	ldr	r3, [sp, #28]
   124f2:	2200      	movs	r2, #0
   124f4:	601a      	str	r2, [r3, #0]
   124f6:	9b07      	ldr	r3, [sp, #28]
   124f8:	2200      	movs	r2, #0
   124fa:	605a      	str	r2, [r3, #4]
   124fc:	9b07      	ldr	r3, [sp, #28]
   124fe:	2201      	movs	r2, #1
   12500:	609a      	str	r2, [r3, #8]
    float divide_estimate = 0;
   12502:	f04f 0300 	mov.w	r3, #0
   12506:	930c      	str	r3, [sp, #48]	; 0x30
    float decimal         = 1.5;
   12508:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
   1250c:	930b      	str	r3, [sp, #44]	; 0x2c
    float div             = 1;
   1250e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
   12512:	930a      	str	r3, [sp, #40]	; 0x28
    float mul             = 2;
   12514:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   12518:	9309      	str	r3, [sp, #36]	; 0x24
    while (state != States::kDone)
   1251a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1251c:	2b04      	cmp	r3, #4
   1251e:	f000 80c1 	beq.w	126a4 <Uart::GenerateUartCalibration(float)+0x1d0>
    {
      switch (state)
   12522:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   12524:	2b04      	cmp	r3, #4
   12526:	f200 80bb 	bhi.w	126a0 <Uart::GenerateUartCalibration(float)+0x1cc>
   1252a:	a201      	add	r2, pc, #4	; (adr r2, 12530 <Uart::GenerateUartCalibration(float)+0x5c>)
   1252c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   12530:	00012545 	.word	0x00012545
   12534:	000125a1 	.word	0x000125a1
   12538:	00012601 	.word	0x00012601
   1253c:	00012671 	.word	0x00012671
   12540:	000126a1 	.word	0x000126a1
      {
        case States::kCalculateIntegerDivideLatch:
        {
          divide_estimate = DividerEstimate(baud_rate);
   12544:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
   12548:	ed9d 0a05 	vldr	s0, [sp, #20]
   1254c:	9806      	ldr	r0, [sp, #24]
   1254e:	f7ff ff0b 	bl	12368 <Uart::DividerEstimate(float, float)>
   12552:	ed8d 0a0c 	vstr	s0, [sp, #48]	; 0x30
          if (divide_estimate < 1.0f)
   12556:	eddd 7a0c 	vldr	s15, [sp, #48]	; 0x30
   1255a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
   1255e:	eef4 7ac7 	vcmpe.f32	s15, s14
   12562:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   12566:	d505      	bpl.n	12574 <Uart::GenerateUartCalibration(float)+0xa0>
          {
            uart_calibration.divide_latch = 0;
   12568:	9b07      	ldr	r3, [sp, #28]
   1256a:	2200      	movs	r2, #0
   1256c:	601a      	str	r2, [r3, #0]
            state                         = States::kDone;
   1256e:	2304      	movs	r3, #4
   12570:	930d      	str	r3, [sp, #52]	; 0x34
          }
          else
          {
            state = States::kCalculateDivideLatchWithDecimal;
          }
          break;
   12572:	e096      	b.n	126a2 <Uart::GenerateUartCalibration(float)+0x1ce>
          else if (IsDecmial(divide_estimate))
   12574:	ed9d 0a0c 	vldr	s0, [sp, #48]	; 0x30
   12578:	9806      	ldr	r0, [sp, #24]
   1257a:	f7ff ff69 	bl	12450 <Uart::IsDecmial(float)>
   1257e:	4603      	mov	r3, r0
   12580:	2b00      	cmp	r3, #0
   12582:	d00a      	beq.n	1259a <Uart::GenerateUartCalibration(float)+0xc6>
                static_cast<uint32_t>(divide_estimate);
   12584:	eddd 7a0c 	vldr	s15, [sp, #48]	; 0x30
   12588:	eefc 7ae7 	vcvt.u32.f32	s15, s15
   1258c:	ee17 2a90 	vmov	r2, s15
            uart_calibration.divide_latch =
   12590:	9b07      	ldr	r3, [sp, #28]
   12592:	601a      	str	r2, [r3, #0]
            state = States::kDone;
   12594:	2304      	movs	r3, #4
   12596:	930d      	str	r3, [sp, #52]	; 0x34
          break;
   12598:	e083      	b.n	126a2 <Uart::GenerateUartCalibration(float)+0x1ce>
            state = States::kCalculateDivideLatchWithDecimal;
   1259a:	2301      	movs	r3, #1
   1259c:	930d      	str	r3, [sp, #52]	; 0x34
          break;
   1259e:	e080      	b.n	126a2 <Uart::GenerateUartCalibration(float)+0x1ce>
        }
        case States::kCalculateDivideLatchWithDecimal:
        {
          divide_estimate = roundf(DividerEstimate(baud_rate, decimal));
   125a0:	eddd 0a0b 	vldr	s1, [sp, #44]	; 0x2c
   125a4:	ed9d 0a05 	vldr	s0, [sp, #20]
   125a8:	9806      	ldr	r0, [sp, #24]
   125aa:	f7ff fedd 	bl	12368 <Uart::DividerEstimate(float, float)>
   125ae:	eef0 7a40 	vmov.f32	s15, s0
   125b2:	eeb0 0a67 	vmov.f32	s0, s15
   125b6:	f004 fd9d 	bl	170f4 <roundf>
   125ba:	ed8d 0a0c 	vstr	s0, [sp, #48]	; 0x30
          decimal         = FractionalEstimate(baud_rate, divide_estimate);
   125be:	eddd 0a0c 	vldr	s1, [sp, #48]	; 0x30
   125c2:	ed9d 0a05 	vldr	s0, [sp, #20]
   125c6:	9806      	ldr	r0, [sp, #24]
   125c8:	f7ff ff08 	bl	123dc <Uart::FractionalEstimate(float, float)>
   125cc:	ed8d 0a0b 	vstr	s0, [sp, #44]	; 0x2c
          if (1.1f <= decimal && decimal <= 1.9f)
   125d0:	eddd 7a0b 	vldr	s15, [sp, #44]	; 0x2c
   125d4:	ed9f 7a39 	vldr	s14, [pc, #228]	; 126bc <Uart::GenerateUartCalibration(float)+0x1e8>
   125d8:	eef4 7ac7 	vcmpe.f32	s15, s14
   125dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   125e0:	db0b      	blt.n	125fa <Uart::GenerateUartCalibration(float)+0x126>
   125e2:	eddd 7a0b 	vldr	s15, [sp, #44]	; 0x2c
   125e6:	ed9f 7a36 	vldr	s14, [pc, #216]	; 126c0 <Uart::GenerateUartCalibration(float)+0x1ec>
   125ea:	eef4 7ac7 	vcmpe.f32	s15, s14
   125ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   125f2:	d802      	bhi.n	125fa <Uart::GenerateUartCalibration(float)+0x126>
          {
            state = States::kGenerateFractionFromDecimal;
   125f4:	2303      	movs	r3, #3
   125f6:	930d      	str	r3, [sp, #52]	; 0x34
          }
          else
          {
            state = States::kDecimalFailedGenerateNewDecimal;
          }
          break;
   125f8:	e053      	b.n	126a2 <Uart::GenerateUartCalibration(float)+0x1ce>
            state = States::kDecimalFailedGenerateNewDecimal;
   125fa:	2302      	movs	r3, #2
   125fc:	930d      	str	r3, [sp, #52]	; 0x34
          break;
   125fe:	e050      	b.n	126a2 <Uart::GenerateUartCalibration(float)+0x1ce>
        }
        case States::kDecimalFailedGenerateNewDecimal:
        {
          mul += 1;
   12600:	eddd 7a09 	vldr	s15, [sp, #36]	; 0x24
   12604:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
   12608:	ee77 7a87 	vadd.f32	s15, s15, s14
   1260c:	edcd 7a09 	vstr	s15, [sp, #36]	; 0x24

          if (div > 15)
   12610:	eddd 7a0a 	vldr	s15, [sp, #40]	; 0x28
   12614:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
   12618:	eef4 7ac7 	vcmpe.f32	s15, s14
   1261c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   12620:	dd02      	ble.n	12628 <Uart::GenerateUartCalibration(float)+0x154>
          {
            state = States::kDone;
   12622:	2304      	movs	r3, #4
   12624:	930d      	str	r3, [sp, #52]	; 0x34
            break;
   12626:	e03c      	b.n	126a2 <Uart::GenerateUartCalibration(float)+0x1ce>
          }
          else if (mul > 15)
   12628:	eddd 7a09 	vldr	s15, [sp, #36]	; 0x24
   1262c:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
   12630:	eef4 7ac7 	vcmpe.f32	s15, s14
   12634:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   12638:	dd0f      	ble.n	1265a <Uart::GenerateUartCalibration(float)+0x186>
          {
            div += 1;
   1263a:	eddd 7a0a 	vldr	s15, [sp, #40]	; 0x28
   1263e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
   12642:	ee77 7a87 	vadd.f32	s15, s15, s14
   12646:	edcd 7a0a 	vstr	s15, [sp, #40]	; 0x28
            mul = div + 1;
   1264a:	eddd 7a0a 	vldr	s15, [sp, #40]	; 0x28
   1264e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
   12652:	ee77 7a87 	vadd.f32	s15, s15, s14
   12656:	edcd 7a09 	vstr	s15, [sp, #36]	; 0x24
          }
          decimal = div / mul;
   1265a:	eddd 6a0a 	vldr	s13, [sp, #40]	; 0x28
   1265e:	ed9d 7a09 	vldr	s14, [sp, #36]	; 0x24
   12662:	eec6 7a87 	vdiv.f32	s15, s13, s14
   12666:	edcd 7a0b 	vstr	s15, [sp, #44]	; 0x2c
          state   = States::kCalculateDivideLatchWithDecimal;
   1266a:	2301      	movs	r3, #1
   1266c:	930d      	str	r3, [sp, #52]	; 0x34
          break;
   1266e:	e018      	b.n	126a2 <Uart::GenerateUartCalibration(float)+0x1ce>
        }
        case States::kGenerateFractionFromDecimal:
        {
          uart_calibration = FindClosestFractional(decimal);
   12670:	9c07      	ldr	r4, [sp, #28]
   12672:	466b      	mov	r3, sp
   12674:	ed9d 0a0b 	vldr	s0, [sp, #44]	; 0x2c
   12678:	9906      	ldr	r1, [sp, #24]
   1267a:	4618      	mov	r0, r3
   1267c:	f7ff fdf6 	bl	1226c <Uart::FindClosestFractional(float)>
   12680:	466b      	mov	r3, sp
   12682:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   12686:	e884 0007 	stmia.w	r4, {r0, r1, r2}
          uart_calibration.divide_latch =
              static_cast<uint32_t>(divide_estimate);
   1268a:	eddd 7a0c 	vldr	s15, [sp, #48]	; 0x30
   1268e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
   12692:	ee17 2a90 	vmov	r2, s15
          uart_calibration.divide_latch =
   12696:	9b07      	ldr	r3, [sp, #28]
   12698:	601a      	str	r2, [r3, #0]
          state = States::kDone;
   1269a:	2304      	movs	r3, #4
   1269c:	930d      	str	r3, [sp, #52]	; 0x34
          break;
   1269e:	e000      	b.n	126a2 <Uart::GenerateUartCalibration(float)+0x1ce>
        }
        case States::kDone: { break;
        }
        default: { break;
   126a0:	bf00      	nop
    while (state != States::kDone)
   126a2:	e73a      	b.n	1251a <Uart::GenerateUartCalibration(float)+0x46>
        }
      }
    }
    return uart_calibration;
   126a4:	bf00      	nop
   126a6:	462b      	mov	r3, r5
   126a8:	4619      	mov	r1, r3
   126aa:	4803      	ldr	r0, [pc, #12]	; (126b8 <Uart::GenerateUartCalibration(float)+0x1e4>)
   126ac:	f000 fd56 	bl	1315c <__cyg_profile_func_exit>
   126b0:	bf00      	nop
  }
   126b2:	9807      	ldr	r0, [sp, #28]
   126b4:	b00f      	add	sp, #60	; 0x3c
   126b6:	bd30      	pop	{r4, r5, pc}
   126b8:	000124d5 	.word	0x000124d5
   126bc:	3f8ccccd 	.word	0x3f8ccccd
   126c0:	3ff33333 	.word	0x3ff33333

000126c4 <(anonymous namespace)::Lpc40xxUptime()>:
{
   126c4:	b538      	push	{r3, r4, r5, lr}
   126c6:	4675      	mov	r5, lr
   126c8:	462b      	mov	r3, r5
   126ca:	4619      	mov	r1, r3
   126cc:	480a      	ldr	r0, [pc, #40]	; (126f8 <(anonymous namespace)::Lpc40xxUptime()+0x34>)
   126ce:	f000 fd31 	bl	13134 <__cyg_profile_func_enter>
    return tim_register[channel_]->TC;
   126d2:	4b0a      	ldr	r3, [pc, #40]	; (126fc <(anonymous namespace)::Lpc40xxUptime()+0x38>)
   126d4:	7a1b      	ldrb	r3, [r3, #8]
   126d6:	461a      	mov	r2, r3
   126d8:	4b09      	ldr	r3, [pc, #36]	; (12700 <(anonymous namespace)::Lpc40xxUptime()+0x3c>)
   126da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   126de:	689c      	ldr	r4, [r3, #8]
   126e0:	462b      	mov	r3, r5
   126e2:	4619      	mov	r1, r3
   126e4:	4804      	ldr	r0, [pc, #16]	; (126f8 <(anonymous namespace)::Lpc40xxUptime()+0x34>)
   126e6:	f000 fd39 	bl	1315c <__cyg_profile_func_exit>
  return timer0.GetTimer();
   126ea:	4623      	mov	r3, r4
   126ec:	f04f 0400 	mov.w	r4, #0
}
   126f0:	4618      	mov	r0, r3
   126f2:	4621      	mov	r1, r4
   126f4:	bd38      	pop	{r3, r4, r5, pc}
   126f6:	bf00      	nop
   126f8:	00011e09 	.word	0x00011e09
   126fc:	10000094 	.word	0x10000094
   12700:	10000014 	.word	0x10000014

00012704 <UptimeRTOS>:
{
   12704:	b538      	push	{r3, r4, r5, lr}
   12706:	4675      	mov	r5, lr
   12708:	462b      	mov	r3, r5
   1270a:	4619      	mov	r1, r3
   1270c:	480a      	ldr	r0, [pc, #40]	; (12738 <UptimeRTOS+0x34>)
   1270e:	f000 fd11 	bl	13134 <__cyg_profile_func_enter>
   12712:	4b0a      	ldr	r3, [pc, #40]	; (1273c <UptimeRTOS+0x38>)
   12714:	7a1b      	ldrb	r3, [r3, #8]
   12716:	461a      	mov	r2, r3
   12718:	4b09      	ldr	r3, [pc, #36]	; (12740 <UptimeRTOS+0x3c>)
   1271a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   1271e:	689c      	ldr	r4, [r3, #8]
   12720:	462b      	mov	r3, r5
   12722:	4619      	mov	r1, r3
   12724:	4804      	ldr	r0, [pc, #16]	; (12738 <UptimeRTOS+0x34>)
   12726:	f000 fd19 	bl	1315c <__cyg_profile_func_exit>
  return timer0.GetTimer();
   1272a:	4623      	mov	r3, r4
   1272c:	f04f 0400 	mov.w	r4, #0
}
   12730:	4618      	mov	r0, r3
   12732:	4621      	mov	r1, r4
   12734:	bd38      	pop	{r3, r4, r5, pc}
   12736:	bf00      	nop
   12738:	00011e09 	.word	0x00011e09
   1273c:	10000094 	.word	0x10000094
   12740:	10000014 	.word	0x10000014

00012744 <LowLevelInit()>:

void LowLevelInit()
{
   12744:	b500      	push	{lr}
   12746:	b083      	sub	sp, #12
  // Set the SystemTick frequency to the RTOS tick frequency
  // It is critical that this happens before you set the system_clock, since
  // The system_timer keeps the time that the system_clock uses to delay itself.
  system_timer.SetTickFrequency(config::kRtosFrequency);
   12748:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   1274c:	4822      	ldr	r0, [pc, #136]	; (127d8 <LowLevelInit()+0x94>)
   1274e:	f7fe fecb 	bl	114e8 <SystemTimer::SetTickFrequency(unsigned long)>
  bool timer_started_successfully = system_timer.StartTimer();
   12752:	4821      	ldr	r0, [pc, #132]	; (127d8 <LowLevelInit()+0x94>)
   12754:	f7fe fe7a 	bl	1144c <SystemTimer::StartTimer()>
   12758:	4603      	mov	r3, r0
   1275a:	f88d 3007 	strb.w	r3, [sp, #7]
  SJ2_ASSERT_WARNING(timer_started_successfully,
   1275e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   12762:	f083 0301 	eor.w	r3, r3, #1
   12766:	b2db      	uxtb	r3, r3
   12768:	2b00      	cmp	r3, #0
   1276a:	d005      	beq.n	12778 <LowLevelInit()+0x34>
   1276c:	23ad      	movs	r3, #173	; 0xad
   1276e:	4a1b      	ldr	r2, [pc, #108]	; (127dc <LowLevelInit()+0x98>)
   12770:	491b      	ldr	r1, [pc, #108]	; (127e0 <LowLevelInit()+0x9c>)
   12772:	481c      	ldr	r0, [pc, #112]	; (127e4 <LowLevelInit()+0xa0>)
   12774:	f001 ff3e 	bl	145f4 <printf>
                     "System Timer has FAILED to start!");
  // Set Clock Speed
  // SetClockFrequency will timeout return the offset between desire clockspeed
  // and actual clockspeed if the PLL doesn't get a frequency fix within a
  // defined timeout (see L1/system_clock.hpp:kDefaultTimeout)
  while (system_controller.SetClockFrequency(config::kSystemClockRateMhz) != 0)
   12778:	2130      	movs	r1, #48	; 0x30
   1277a:	481b      	ldr	r0, [pc, #108]	; (127e8 <LowLevelInit()+0xa4>)
   1277c:	f7fe fb4c 	bl	10e18 <Lpc40xxSystemController::SetClockFrequency(unsigned char)>
   12780:	4603      	mov	r3, r0
   12782:	2b00      	cmp	r3, #0
   12784:	bf14      	ite	ne
   12786:	2301      	movne	r3, #1
   12788:	2300      	moveq	r3, #0
   1278a:	b2db      	uxtb	r3, r3
   1278c:	2b00      	cmp	r3, #0
   1278e:	d001      	beq.n	12794 <LowLevelInit()+0x50>
  {
    // Continually attempt to set the clock frequency to the desired until the
    // delta between desired and actual are 0.
    continue;
   12790:	bf00      	nop
  while (system_controller.SetClockFrequency(config::kSystemClockRateMhz) != 0)
   12792:	e7f1      	b.n	12778 <LowLevelInit()+0x34>
  }
  // Enable Peripheral Clock and set its divider to 1 meaning the clock speed
  // fed to all peripherals will be 48Mhz.
  system_controller.SetPeripheralClockDivider(1);
   12794:	2101      	movs	r1, #1
   12796:	4814      	ldr	r0, [pc, #80]	; (127e8 <LowLevelInit()+0xa4>)
   12798:	f7fe fb86 	bl	10ea8 <Lpc40xxSystemController::SetPeripheralClockDivider(unsigned char)>
  // Set System Timer frequency again, since the clock speed has changed since
  // the last time we ran this.
  system_timer.DisableTimer();
   1279c:	f7fe fe04 	bl	113a8 <SystemTimer::DisableTimer()>
  system_timer.SetTickFrequency(config::kRtosFrequency);
   127a0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   127a4:	480c      	ldr	r0, [pc, #48]	; (127d8 <LowLevelInit()+0x94>)
   127a6:	f7fe fe9f 	bl	114e8 <SystemTimer::SetTickFrequency(unsigned long)>
  system_timer.StartTimer();
   127aa:	480b      	ldr	r0, [pc, #44]	; (127d8 <LowLevelInit()+0x94>)
   127ac:	f7fe fe4e 	bl	1144c <SystemTimer::StartTimer()>
  // Set timer0 to 1 MHz (1,000,000 Hz) so that the timer increments every 1
  // micro second.
  timer0.Initialize(1'000'000);
   127b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   127b4:	4a0d      	ldr	r2, [pc, #52]	; (127ec <LowLevelInit()+0xa8>)
   127b6:	490e      	ldr	r1, [pc, #56]	; (127f0 <LowLevelInit()+0xac>)
   127b8:	480e      	ldr	r0, [pc, #56]	; (127f4 <LowLevelInit()+0xb0>)
   127ba:	f7ff f9f7 	bl	11bac <Timer::Initialize(unsigned long, void (*)(), long)>
  SetUptimeFunction(Lpc40xxUptime);
   127be:	480e      	ldr	r0, [pc, #56]	; (127f8 <LowLevelInit()+0xb4>)
   127c0:	f7fe fb12 	bl	10de8 <SetUptimeFunction(unsigned long long (*)())>
  // Set UART0 baudrate, which is required for printf and scanf to work properly
  uart0.Initialize(config::kBaudRate);
   127c4:	f44f 4116 	mov.w	r1, #38400	; 0x9600
   127c8:	480c      	ldr	r0, [pc, #48]	; (127fc <LowLevelInit()+0xb8>)
   127ca:	f7ff fba1 	bl	11f10 <Uart::Initialize(unsigned long)>
}
   127ce:	bf00      	nop
   127d0:	b003      	add	sp, #12
   127d2:	f85d fb04 	ldr.w	pc, [sp], #4
   127d6:	bf00      	nop
   127d8:	10000088 	.word	0x10000088
   127dc:	000180e4 	.word	0x000180e4
   127e0:	00017e4c 	.word	0x00017e4c
   127e4:	00017d2c 	.word	0x00017d2c
   127e8:	10000090 	.word	0x10000090
   127ec:	00011b8d 	.word	0x00011b8d
   127f0:	000f4240 	.word	0x000f4240
   127f4:	10000094 	.word	0x10000094
   127f8:	000126c5 	.word	0x000126c5
   127fc:	10000074 	.word	0x10000074

00012800 <SystemInit>:

void SystemInit()
{
   12800:	b508      	push	{r3, lr}
  // Transfer data section values from flash to RAM
  InitDataSection();
   12802:	f7fd fc83 	bl	1010c <InitDataSection()>
  // Clear BSS section of RAM
  // This is required because the nano implementation of the standard C/C++
  // libraries assumes that the BSS section is initialized to 0.
  InitBssSection();
   12806:	f7fd fcc9 	bl	1019c <InitBssSection()>
  // Enable FPU (F.loating P.oint U.nit)
  // System will crash if floating point operations occur without
  // Initializing the FPU.
  InitFpu();
   1280a:	f7fd fcf7 	bl	101fc <InitFpu()>
  // Initialisation C++ libraries
  __libc_init_array();
   1280e:	f004 fe79 	bl	17504 <__libc_init_array>
  // Run LowLevel System Initialization
  LowLevelInit();
   12812:	f7ff ff97 	bl	12744 <LowLevelInit()>
}
   12816:	bf00      	nop
   12818:	bd08      	pop	{r3, pc}
   1281a:	Address 0x000000000001281a is out of bounds.


0001281c <ResetIsr>:
// Sets up a simple runtime environment and initializes the C/C++ library.

extern "C"
{
  void ResetIsr(void)
  {
   1281c:	b580      	push	{r7, lr}
   1281e:	b084      	sub	sp, #16
   12820:	af00      	add	r7, sp, #0
    // The Hyperload bootloader takes up stack space to execute. The Hyperload
    // bootloader function launches this ISR manually, but it never returns thus
    // it never cleans up the memory it uses. To get that memory back, we have
    // to manually move the stack pointers back to the top of stack.
    const uint32_t kTopOfStack = reinterpret_cast<intptr_t>(&StackTop);
   12822:	4b09      	ldr	r3, [pc, #36]	; (12848 <ResetIsr+0x2c>)
   12824:	60fb      	str	r3, [r7, #12]
   12826:	68fb      	ldr	r3, [r7, #12]
   12828:	603b      	str	r3, [r7, #0]
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
   1282a:	683b      	ldr	r3, [r7, #0]
   1282c:	f383 8809 	msr	PSP, r3
   12830:	68fb      	ldr	r3, [r7, #12]
   12832:	607b      	str	r3, [r7, #4]

    \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0\n" : : "r" (topOfMainStack) : "sp");
   12834:	687b      	ldr	r3, [r7, #4]
   12836:	f383 8808 	msr	MSP, r3
    __set_PSP(kTopOfStack);
    __set_MSP(kTopOfStack);

    SystemInit();
   1283a:	f7ff ffe1 	bl	12800 <SystemInit>
// #pragma ignored "-Wpedantic" to suppress main function call warning
#pragma GCC diagnostic push ignored "-Wpedantic"
    [[maybe_unused]] int32_t result = main();
   1283e:	f7fe f8eb 	bl	10a18 <main>
   12842:	60b8      	str	r0, [r7, #8]
   12844:	e7fe      	b.n	12844 <ResetIsr+0x28>
   12846:	bf00      	nop
   12848:	10010000 	.word	0x10010000

0001284c <void Timer::TimerHandler<(TimerInterface::TimerPort)0>()>:
  static void TimerHandler()
   1284c:	b510      	push	{r4, lr}
   1284e:	4674      	mov	r4, lr
   12850:	4623      	mov	r3, r4
   12852:	4619      	mov	r1, r3
   12854:	480a      	ldr	r0, [pc, #40]	; (12880 <void Timer::TimerHandler<(TimerInterface::TimerPort)0>()+0x34>)
   12856:	f000 fc6d 	bl	13134 <__cyg_profile_func_enter>
      user_timer_isr[util::Value(port)]();
   1285a:	2000      	movs	r0, #0
   1285c:	f7ff f97e 	bl	11b5c <unsigned char util::Value<TimerInterface::TimerPort, unsigned char>(TimerInterface::TimerPort)>
   12860:	4603      	mov	r3, r0
   12862:	461a      	mov	r2, r3
   12864:	4b07      	ldr	r3, [pc, #28]	; (12884 <void Timer::TimerHandler<(TimerInterface::TimerPort)0>()+0x38>)
   12866:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   1286a:	4798      	blx	r3
    ClearInterrupts<port>();
   1286c:	f000 f90e 	bl	12a8c <void Timer::ClearInterrupts<(TimerInterface::TimerPort)0>()>
   12870:	4623      	mov	r3, r4
   12872:	4619      	mov	r1, r3
   12874:	4802      	ldr	r0, [pc, #8]	; (12880 <void Timer::TimerHandler<(TimerInterface::TimerPort)0>()+0x34>)
   12876:	f000 fc71 	bl	1315c <__cyg_profile_func_exit>
  }
   1287a:	bf00      	nop
   1287c:	bd10      	pop	{r4, pc}
   1287e:	bf00      	nop
   12880:	0001284d 	.word	0x0001284d
   12884:	100002cc 	.word	0x100002cc

00012888 <void Timer::TimerHandler<(TimerInterface::TimerPort)1>()>:
  static void TimerHandler()
   12888:	b510      	push	{r4, lr}
   1288a:	4674      	mov	r4, lr
   1288c:	4623      	mov	r3, r4
   1288e:	4619      	mov	r1, r3
   12890:	480a      	ldr	r0, [pc, #40]	; (128bc <void Timer::TimerHandler<(TimerInterface::TimerPort)1>()+0x34>)
   12892:	f000 fc4f 	bl	13134 <__cyg_profile_func_enter>
      user_timer_isr[util::Value(port)]();
   12896:	2001      	movs	r0, #1
   12898:	f7ff f960 	bl	11b5c <unsigned char util::Value<TimerInterface::TimerPort, unsigned char>(TimerInterface::TimerPort)>
   1289c:	4603      	mov	r3, r0
   1289e:	461a      	mov	r2, r3
   128a0:	4b07      	ldr	r3, [pc, #28]	; (128c0 <void Timer::TimerHandler<(TimerInterface::TimerPort)1>()+0x38>)
   128a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   128a6:	4798      	blx	r3
    ClearInterrupts<port>();
   128a8:	f000 f940 	bl	12b2c <void Timer::ClearInterrupts<(TimerInterface::TimerPort)1>()>
   128ac:	4623      	mov	r3, r4
   128ae:	4619      	mov	r1, r3
   128b0:	4802      	ldr	r0, [pc, #8]	; (128bc <void Timer::TimerHandler<(TimerInterface::TimerPort)1>()+0x34>)
   128b2:	f000 fc53 	bl	1315c <__cyg_profile_func_exit>
  }
   128b6:	bf00      	nop
   128b8:	bd10      	pop	{r4, pc}
   128ba:	bf00      	nop
   128bc:	00012889 	.word	0x00012889
   128c0:	100002cc 	.word	0x100002cc

000128c4 <void Timer::TimerHandler<(TimerInterface::TimerPort)2>()>:
  static void TimerHandler()
   128c4:	b510      	push	{r4, lr}
   128c6:	4674      	mov	r4, lr
   128c8:	4623      	mov	r3, r4
   128ca:	4619      	mov	r1, r3
   128cc:	480a      	ldr	r0, [pc, #40]	; (128f8 <void Timer::TimerHandler<(TimerInterface::TimerPort)2>()+0x34>)
   128ce:	f000 fc31 	bl	13134 <__cyg_profile_func_enter>
      user_timer_isr[util::Value(port)]();
   128d2:	2002      	movs	r0, #2
   128d4:	f7ff f942 	bl	11b5c <unsigned char util::Value<TimerInterface::TimerPort, unsigned char>(TimerInterface::TimerPort)>
   128d8:	4603      	mov	r3, r0
   128da:	461a      	mov	r2, r3
   128dc:	4b07      	ldr	r3, [pc, #28]	; (128fc <void Timer::TimerHandler<(TimerInterface::TimerPort)2>()+0x38>)
   128de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   128e2:	4798      	blx	r3
    ClearInterrupts<port>();
   128e4:	f000 f972 	bl	12bcc <void Timer::ClearInterrupts<(TimerInterface::TimerPort)2>()>
   128e8:	4623      	mov	r3, r4
   128ea:	4619      	mov	r1, r3
   128ec:	4802      	ldr	r0, [pc, #8]	; (128f8 <void Timer::TimerHandler<(TimerInterface::TimerPort)2>()+0x34>)
   128ee:	f000 fc35 	bl	1315c <__cyg_profile_func_exit>
  }
   128f2:	bf00      	nop
   128f4:	bd10      	pop	{r4, pc}
   128f6:	bf00      	nop
   128f8:	000128c5 	.word	0x000128c5
   128fc:	100002cc 	.word	0x100002cc

00012900 <void Timer::TimerHandler<(TimerInterface::TimerPort)3>()>:
  static void TimerHandler()
   12900:	b510      	push	{r4, lr}
   12902:	4674      	mov	r4, lr
   12904:	4623      	mov	r3, r4
   12906:	4619      	mov	r1, r3
   12908:	480a      	ldr	r0, [pc, #40]	; (12934 <void Timer::TimerHandler<(TimerInterface::TimerPort)3>()+0x34>)
   1290a:	f000 fc13 	bl	13134 <__cyg_profile_func_enter>
      user_timer_isr[util::Value(port)]();
   1290e:	2003      	movs	r0, #3
   12910:	f7ff f924 	bl	11b5c <unsigned char util::Value<TimerInterface::TimerPort, unsigned char>(TimerInterface::TimerPort)>
   12914:	4603      	mov	r3, r0
   12916:	461a      	mov	r2, r3
   12918:	4b07      	ldr	r3, [pc, #28]	; (12938 <void Timer::TimerHandler<(TimerInterface::TimerPort)3>()+0x38>)
   1291a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   1291e:	4798      	blx	r3
    ClearInterrupts<port>();
   12920:	f000 f9a4 	bl	12c6c <void Timer::ClearInterrupts<(TimerInterface::TimerPort)3>()>
   12924:	4623      	mov	r3, r4
   12926:	4619      	mov	r1, r3
   12928:	4802      	ldr	r0, [pc, #8]	; (12934 <void Timer::TimerHandler<(TimerInterface::TimerPort)3>()+0x34>)
   1292a:	f000 fc17 	bl	1315c <__cyg_profile_func_exit>
  }
   1292e:	bf00      	nop
   12930:	bd10      	pop	{r4, pc}
   12932:	bf00      	nop
   12934:	00012901 	.word	0x00012901
   12938:	100002cc 	.word	0x100002cc

0001293c <Status Wait<Uart::Send(unsigned char)::{lambda()#1}>(unsigned long long, Uart::Send(unsigned char)::{lambda()#1})>:
inline Status Wait(uint64_t timeout, F is_done)
   1293c:	e92d 4830 	stmdb	sp!, {r4, r5, fp, lr}
   12940:	b088      	sub	sp, #32
   12942:	4675      	mov	r5, lr
   12944:	e9cd 0102 	strd	r0, r1, [sp, #8]
   12948:	9201      	str	r2, [sp, #4]
   1294a:	462b      	mov	r3, r5
   1294c:	4619      	mov	r1, r3
   1294e:	4824      	ldr	r0, [pc, #144]	; (129e0 <Status Wait<Uart::Send(unsigned char)::{lambda()#1}>(unsigned long long, Uart::Send(unsigned char)::{lambda()#1})+0xa4>)
   12950:	f000 fbf0 	bl	13134 <__cyg_profile_func_enter>
  uint64_t timeout_time = 0;
   12954:	f04f 0300 	mov.w	r3, #0
   12958:	f04f 0400 	mov.w	r4, #0
   1295c:	e9cd 3406 	strd	r3, r4, [sp, #24]
  if (timeout == kMaxWait)
   12960:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
   12964:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
   12968:	bf08      	it	eq
   1296a:	f1b3 3fff 	cmpeq.w	r3, #4294967295	; 0xffffffff
   1296e:	d106      	bne.n	1297e <Status Wait<Uart::Send(unsigned char)::{lambda()#1}>(unsigned long long, Uart::Send(unsigned char)::{lambda()#1})+0x42>
    timeout_time = kMaxWait;
   12970:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   12974:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   12978:	e9cd 3406 	strd	r3, r4, [sp, #24]
   1297c:	e00b      	b.n	12996 <Status Wait<Uart::Send(unsigned char)::{lambda()#1}>(unsigned long long, Uart::Send(unsigned char)::{lambda()#1})+0x5a>
    timeout_time = Milliseconds() + timeout;
   1297e:	f7fd ff83 	bl	10888 <Milliseconds()>
   12982:	460a      	mov	r2, r1
   12984:	4601      	mov	r1, r0
   12986:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
   1298a:	eb13 0b01 	adds.w	fp, r3, r1
   1298e:	eb44 0c02 	adc.w	ip, r4, r2
   12992:	e9cd bc06 	strd	fp, ip, [sp, #24]
  Status status = Status::kTimedOut;
   12996:	2301      	movs	r3, #1
   12998:	9305      	str	r3, [sp, #20]
  while (Milliseconds() < timeout_time)
   1299a:	f7fd ff75 	bl	10888 <Milliseconds()>
   1299e:	460a      	mov	r2, r1
   129a0:	4601      	mov	r1, r0
   129a2:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
   129a6:	42a2      	cmp	r2, r4
   129a8:	bf08      	it	eq
   129aa:	4299      	cmpeq	r1, r3
   129ac:	bf34      	ite	cc
   129ae:	2301      	movcc	r3, #1
   129b0:	2300      	movcs	r3, #0
   129b2:	b2db      	uxtb	r3, r3
   129b4:	2b00      	cmp	r3, #0
   129b6:	d008      	beq.n	129ca <Status Wait<Uart::Send(unsigned char)::{lambda()#1}>(unsigned long long, Uart::Send(unsigned char)::{lambda()#1})+0x8e>
    if (is_done())
   129b8:	ab01      	add	r3, sp, #4
   129ba:	4618      	mov	r0, r3
   129bc:	f7ff fb1a 	bl	11ff4 <Uart::Send(unsigned char)::{lambda()#1}::operator()() const>
   129c0:	4603      	mov	r3, r0
   129c2:	2b00      	cmp	r3, #0
   129c4:	d0e9      	beq.n	1299a <Status Wait<Uart::Send(unsigned char)::{lambda()#1}>(unsigned long long, Uart::Send(unsigned char)::{lambda()#1})+0x5e>
      status = Status::kSuccess;
   129c6:	2300      	movs	r3, #0
   129c8:	9305      	str	r3, [sp, #20]
  return status;
   129ca:	9c05      	ldr	r4, [sp, #20]
   129cc:	462b      	mov	r3, r5
   129ce:	4619      	mov	r1, r3
   129d0:	4803      	ldr	r0, [pc, #12]	; (129e0 <Status Wait<Uart::Send(unsigned char)::{lambda()#1}>(unsigned long long, Uart::Send(unsigned char)::{lambda()#1})+0xa4>)
   129d2:	f000 fbc3 	bl	1315c <__cyg_profile_func_exit>
   129d6:	4623      	mov	r3, r4
}
   129d8:	4618      	mov	r0, r3
   129da:	b008      	add	sp, #32
   129dc:	e8bd 8830 	ldmia.w	sp!, {r4, r5, fp, pc}
   129e0:	0001293d 	.word	0x0001293d

000129e4 <Status Wait<Uart::Receive(unsigned long)::{lambda()#1}>(unsigned long long, Uart::Receive(unsigned long)::{lambda()#1})>:
inline Status Wait(uint64_t timeout, F is_done)
   129e4:	e92d 4830 	stmdb	sp!, {r4, r5, fp, lr}
   129e8:	b088      	sub	sp, #32
   129ea:	4675      	mov	r5, lr
   129ec:	e9cd 0102 	strd	r0, r1, [sp, #8]
   129f0:	9201      	str	r2, [sp, #4]
   129f2:	462b      	mov	r3, r5
   129f4:	4619      	mov	r1, r3
   129f6:	4824      	ldr	r0, [pc, #144]	; (12a88 <Status Wait<Uart::Receive(unsigned long)::{lambda()#1}>(unsigned long long, Uart::Receive(unsigned long)::{lambda()#1})+0xa4>)
   129f8:	f000 fb9c 	bl	13134 <__cyg_profile_func_enter>
  uint64_t timeout_time = 0;
   129fc:	f04f 0300 	mov.w	r3, #0
   12a00:	f04f 0400 	mov.w	r4, #0
   12a04:	e9cd 3406 	strd	r3, r4, [sp, #24]
  if (timeout == kMaxWait)
   12a08:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
   12a0c:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
   12a10:	bf08      	it	eq
   12a12:	f1b3 3fff 	cmpeq.w	r3, #4294967295	; 0xffffffff
   12a16:	d106      	bne.n	12a26 <Status Wait<Uart::Receive(unsigned long)::{lambda()#1}>(unsigned long long, Uart::Receive(unsigned long)::{lambda()#1})+0x42>
    timeout_time = kMaxWait;
   12a18:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   12a1c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   12a20:	e9cd 3406 	strd	r3, r4, [sp, #24]
   12a24:	e00b      	b.n	12a3e <Status Wait<Uart::Receive(unsigned long)::{lambda()#1}>(unsigned long long, Uart::Receive(unsigned long)::{lambda()#1})+0x5a>
    timeout_time = Milliseconds() + timeout;
   12a26:	f7fd ff2f 	bl	10888 <Milliseconds()>
   12a2a:	460a      	mov	r2, r1
   12a2c:	4601      	mov	r1, r0
   12a2e:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
   12a32:	eb13 0b01 	adds.w	fp, r3, r1
   12a36:	eb44 0c02 	adc.w	ip, r4, r2
   12a3a:	e9cd bc06 	strd	fp, ip, [sp, #24]
  Status status = Status::kTimedOut;
   12a3e:	2301      	movs	r3, #1
   12a40:	9305      	str	r3, [sp, #20]
  while (Milliseconds() < timeout_time)
   12a42:	f7fd ff21 	bl	10888 <Milliseconds()>
   12a46:	460a      	mov	r2, r1
   12a48:	4601      	mov	r1, r0
   12a4a:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
   12a4e:	42a2      	cmp	r2, r4
   12a50:	bf08      	it	eq
   12a52:	4299      	cmpeq	r1, r3
   12a54:	bf34      	ite	cc
   12a56:	2301      	movcc	r3, #1
   12a58:	2300      	movcs	r3, #0
   12a5a:	b2db      	uxtb	r3, r3
   12a5c:	2b00      	cmp	r3, #0
   12a5e:	d008      	beq.n	12a72 <Status Wait<Uart::Receive(unsigned long)::{lambda()#1}>(unsigned long long, Uart::Receive(unsigned long)::{lambda()#1})+0x8e>
    if (is_done())
   12a60:	ab01      	add	r3, sp, #4
   12a62:	4618      	mov	r0, r3
   12a64:	f7ff fb60 	bl	12128 <Uart::Receive(unsigned long)::{lambda()#1}::operator()() const>
   12a68:	4603      	mov	r3, r0
   12a6a:	2b00      	cmp	r3, #0
   12a6c:	d0e9      	beq.n	12a42 <Status Wait<Uart::Receive(unsigned long)::{lambda()#1}>(unsigned long long, Uart::Receive(unsigned long)::{lambda()#1})+0x5e>
      status = Status::kSuccess;
   12a6e:	2300      	movs	r3, #0
   12a70:	9305      	str	r3, [sp, #20]
  return status;
   12a72:	9c05      	ldr	r4, [sp, #20]
   12a74:	462b      	mov	r3, r5
   12a76:	4619      	mov	r1, r3
   12a78:	4803      	ldr	r0, [pc, #12]	; (12a88 <Status Wait<Uart::Receive(unsigned long)::{lambda()#1}>(unsigned long long, Uart::Receive(unsigned long)::{lambda()#1})+0xa4>)
   12a7a:	f000 fb6f 	bl	1315c <__cyg_profile_func_exit>
   12a7e:	4623      	mov	r3, r4
}
   12a80:	4618      	mov	r0, r3
   12a82:	b008      	add	sp, #32
   12a84:	e8bd 8830 	ldmia.w	sp!, {r4, r5, fp, pc}
   12a88:	000129e5 	.word	0x000129e5

00012a8c <void Timer::ClearInterrupts<(TimerInterface::TimerPort)0>()>:
  static void ClearInterrupts()
   12a8c:	b510      	push	{r4, lr}
   12a8e:	b082      	sub	sp, #8
   12a90:	4674      	mov	r4, lr
   12a92:	4623      	mov	r3, r4
   12a94:	4619      	mov	r1, r3
   12a96:	4823      	ldr	r0, [pc, #140]	; (12b24 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)0>()+0x98>)
   12a98:	f000 fb4c 	bl	13134 <__cyg_profile_func_enter>
    uint8_t channel = util::Value(port);
   12a9c:	2300      	movs	r3, #0
   12a9e:	f88d 3007 	strb.w	r3, [sp, #7]
    tim_register[channel]->IR |= (1 << kRegMR0);
   12aa2:	f89d 3007 	ldrb.w	r3, [sp, #7]
   12aa6:	4a20      	ldr	r2, [pc, #128]	; (12b28 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)0>()+0x9c>)
   12aa8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12aac:	681a      	ldr	r2, [r3, #0]
   12aae:	f89d 3007 	ldrb.w	r3, [sp, #7]
   12ab2:	491d      	ldr	r1, [pc, #116]	; (12b28 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)0>()+0x9c>)
   12ab4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   12ab8:	f042 0201 	orr.w	r2, r2, #1
   12abc:	601a      	str	r2, [r3, #0]
    tim_register[channel]->IR |= (1 << kRegMR1);
   12abe:	f89d 3007 	ldrb.w	r3, [sp, #7]
   12ac2:	4a19      	ldr	r2, [pc, #100]	; (12b28 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)0>()+0x9c>)
   12ac4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12ac8:	681a      	ldr	r2, [r3, #0]
   12aca:	f89d 3007 	ldrb.w	r3, [sp, #7]
   12ace:	4916      	ldr	r1, [pc, #88]	; (12b28 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)0>()+0x9c>)
   12ad0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   12ad4:	f042 0202 	orr.w	r2, r2, #2
   12ad8:	601a      	str	r2, [r3, #0]
    tim_register[channel]->IR |= (1 << kRegMR2);
   12ada:	f89d 3007 	ldrb.w	r3, [sp, #7]
   12ade:	4a12      	ldr	r2, [pc, #72]	; (12b28 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)0>()+0x9c>)
   12ae0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12ae4:	681a      	ldr	r2, [r3, #0]
   12ae6:	f89d 3007 	ldrb.w	r3, [sp, #7]
   12aea:	490f      	ldr	r1, [pc, #60]	; (12b28 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)0>()+0x9c>)
   12aec:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   12af0:	f042 0204 	orr.w	r2, r2, #4
   12af4:	601a      	str	r2, [r3, #0]
    tim_register[channel]->IR |= (1 << kRegMR3);
   12af6:	f89d 3007 	ldrb.w	r3, [sp, #7]
   12afa:	4a0b      	ldr	r2, [pc, #44]	; (12b28 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)0>()+0x9c>)
   12afc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12b00:	681a      	ldr	r2, [r3, #0]
   12b02:	f89d 3007 	ldrb.w	r3, [sp, #7]
   12b06:	4908      	ldr	r1, [pc, #32]	; (12b28 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)0>()+0x9c>)
   12b08:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   12b0c:	f042 0208 	orr.w	r2, r2, #8
   12b10:	601a      	str	r2, [r3, #0]
   12b12:	4623      	mov	r3, r4
   12b14:	4619      	mov	r1, r3
   12b16:	4803      	ldr	r0, [pc, #12]	; (12b24 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)0>()+0x98>)
   12b18:	f000 fb20 	bl	1315c <__cyg_profile_func_exit>
  }
   12b1c:	bf00      	nop
   12b1e:	b002      	add	sp, #8
   12b20:	bd10      	pop	{r4, pc}
   12b22:	bf00      	nop
   12b24:	00012a8d 	.word	0x00012a8d
   12b28:	10000014 	.word	0x10000014

00012b2c <void Timer::ClearInterrupts<(TimerInterface::TimerPort)1>()>:
  static void ClearInterrupts()
   12b2c:	b510      	push	{r4, lr}
   12b2e:	b082      	sub	sp, #8
   12b30:	4674      	mov	r4, lr
   12b32:	4623      	mov	r3, r4
   12b34:	4619      	mov	r1, r3
   12b36:	4823      	ldr	r0, [pc, #140]	; (12bc4 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)1>()+0x98>)
   12b38:	f000 fafc 	bl	13134 <__cyg_profile_func_enter>
    uint8_t channel = util::Value(port);
   12b3c:	2301      	movs	r3, #1
   12b3e:	f88d 3007 	strb.w	r3, [sp, #7]
    tim_register[channel]->IR |= (1 << kRegMR0);
   12b42:	f89d 3007 	ldrb.w	r3, [sp, #7]
   12b46:	4a20      	ldr	r2, [pc, #128]	; (12bc8 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)1>()+0x9c>)
   12b48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12b4c:	681a      	ldr	r2, [r3, #0]
   12b4e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   12b52:	491d      	ldr	r1, [pc, #116]	; (12bc8 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)1>()+0x9c>)
   12b54:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   12b58:	f042 0201 	orr.w	r2, r2, #1
   12b5c:	601a      	str	r2, [r3, #0]
    tim_register[channel]->IR |= (1 << kRegMR1);
   12b5e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   12b62:	4a19      	ldr	r2, [pc, #100]	; (12bc8 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)1>()+0x9c>)
   12b64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12b68:	681a      	ldr	r2, [r3, #0]
   12b6a:	f89d 3007 	ldrb.w	r3, [sp, #7]
   12b6e:	4916      	ldr	r1, [pc, #88]	; (12bc8 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)1>()+0x9c>)
   12b70:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   12b74:	f042 0202 	orr.w	r2, r2, #2
   12b78:	601a      	str	r2, [r3, #0]
    tim_register[channel]->IR |= (1 << kRegMR2);
   12b7a:	f89d 3007 	ldrb.w	r3, [sp, #7]
   12b7e:	4a12      	ldr	r2, [pc, #72]	; (12bc8 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)1>()+0x9c>)
   12b80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12b84:	681a      	ldr	r2, [r3, #0]
   12b86:	f89d 3007 	ldrb.w	r3, [sp, #7]
   12b8a:	490f      	ldr	r1, [pc, #60]	; (12bc8 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)1>()+0x9c>)
   12b8c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   12b90:	f042 0204 	orr.w	r2, r2, #4
   12b94:	601a      	str	r2, [r3, #0]
    tim_register[channel]->IR |= (1 << kRegMR3);
   12b96:	f89d 3007 	ldrb.w	r3, [sp, #7]
   12b9a:	4a0b      	ldr	r2, [pc, #44]	; (12bc8 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)1>()+0x9c>)
   12b9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12ba0:	681a      	ldr	r2, [r3, #0]
   12ba2:	f89d 3007 	ldrb.w	r3, [sp, #7]
   12ba6:	4908      	ldr	r1, [pc, #32]	; (12bc8 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)1>()+0x9c>)
   12ba8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   12bac:	f042 0208 	orr.w	r2, r2, #8
   12bb0:	601a      	str	r2, [r3, #0]
   12bb2:	4623      	mov	r3, r4
   12bb4:	4619      	mov	r1, r3
   12bb6:	4803      	ldr	r0, [pc, #12]	; (12bc4 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)1>()+0x98>)
   12bb8:	f000 fad0 	bl	1315c <__cyg_profile_func_exit>
  }
   12bbc:	bf00      	nop
   12bbe:	b002      	add	sp, #8
   12bc0:	bd10      	pop	{r4, pc}
   12bc2:	bf00      	nop
   12bc4:	00012b2d 	.word	0x00012b2d
   12bc8:	10000014 	.word	0x10000014

00012bcc <void Timer::ClearInterrupts<(TimerInterface::TimerPort)2>()>:
  static void ClearInterrupts()
   12bcc:	b510      	push	{r4, lr}
   12bce:	b082      	sub	sp, #8
   12bd0:	4674      	mov	r4, lr
   12bd2:	4623      	mov	r3, r4
   12bd4:	4619      	mov	r1, r3
   12bd6:	4823      	ldr	r0, [pc, #140]	; (12c64 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)2>()+0x98>)
   12bd8:	f000 faac 	bl	13134 <__cyg_profile_func_enter>
    uint8_t channel = util::Value(port);
   12bdc:	2302      	movs	r3, #2
   12bde:	f88d 3007 	strb.w	r3, [sp, #7]
    tim_register[channel]->IR |= (1 << kRegMR0);
   12be2:	f89d 3007 	ldrb.w	r3, [sp, #7]
   12be6:	4a20      	ldr	r2, [pc, #128]	; (12c68 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)2>()+0x9c>)
   12be8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12bec:	681a      	ldr	r2, [r3, #0]
   12bee:	f89d 3007 	ldrb.w	r3, [sp, #7]
   12bf2:	491d      	ldr	r1, [pc, #116]	; (12c68 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)2>()+0x9c>)
   12bf4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   12bf8:	f042 0201 	orr.w	r2, r2, #1
   12bfc:	601a      	str	r2, [r3, #0]
    tim_register[channel]->IR |= (1 << kRegMR1);
   12bfe:	f89d 3007 	ldrb.w	r3, [sp, #7]
   12c02:	4a19      	ldr	r2, [pc, #100]	; (12c68 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)2>()+0x9c>)
   12c04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12c08:	681a      	ldr	r2, [r3, #0]
   12c0a:	f89d 3007 	ldrb.w	r3, [sp, #7]
   12c0e:	4916      	ldr	r1, [pc, #88]	; (12c68 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)2>()+0x9c>)
   12c10:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   12c14:	f042 0202 	orr.w	r2, r2, #2
   12c18:	601a      	str	r2, [r3, #0]
    tim_register[channel]->IR |= (1 << kRegMR2);
   12c1a:	f89d 3007 	ldrb.w	r3, [sp, #7]
   12c1e:	4a12      	ldr	r2, [pc, #72]	; (12c68 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)2>()+0x9c>)
   12c20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12c24:	681a      	ldr	r2, [r3, #0]
   12c26:	f89d 3007 	ldrb.w	r3, [sp, #7]
   12c2a:	490f      	ldr	r1, [pc, #60]	; (12c68 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)2>()+0x9c>)
   12c2c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   12c30:	f042 0204 	orr.w	r2, r2, #4
   12c34:	601a      	str	r2, [r3, #0]
    tim_register[channel]->IR |= (1 << kRegMR3);
   12c36:	f89d 3007 	ldrb.w	r3, [sp, #7]
   12c3a:	4a0b      	ldr	r2, [pc, #44]	; (12c68 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)2>()+0x9c>)
   12c3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12c40:	681a      	ldr	r2, [r3, #0]
   12c42:	f89d 3007 	ldrb.w	r3, [sp, #7]
   12c46:	4908      	ldr	r1, [pc, #32]	; (12c68 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)2>()+0x9c>)
   12c48:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   12c4c:	f042 0208 	orr.w	r2, r2, #8
   12c50:	601a      	str	r2, [r3, #0]
   12c52:	4623      	mov	r3, r4
   12c54:	4619      	mov	r1, r3
   12c56:	4803      	ldr	r0, [pc, #12]	; (12c64 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)2>()+0x98>)
   12c58:	f000 fa80 	bl	1315c <__cyg_profile_func_exit>
  }
   12c5c:	bf00      	nop
   12c5e:	b002      	add	sp, #8
   12c60:	bd10      	pop	{r4, pc}
   12c62:	bf00      	nop
   12c64:	00012bcd 	.word	0x00012bcd
   12c68:	10000014 	.word	0x10000014

00012c6c <void Timer::ClearInterrupts<(TimerInterface::TimerPort)3>()>:
  static void ClearInterrupts()
   12c6c:	b510      	push	{r4, lr}
   12c6e:	b082      	sub	sp, #8
   12c70:	4674      	mov	r4, lr
   12c72:	4623      	mov	r3, r4
   12c74:	4619      	mov	r1, r3
   12c76:	4823      	ldr	r0, [pc, #140]	; (12d04 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)3>()+0x98>)
   12c78:	f000 fa5c 	bl	13134 <__cyg_profile_func_enter>
    uint8_t channel = util::Value(port);
   12c7c:	2303      	movs	r3, #3
   12c7e:	f88d 3007 	strb.w	r3, [sp, #7]
    tim_register[channel]->IR |= (1 << kRegMR0);
   12c82:	f89d 3007 	ldrb.w	r3, [sp, #7]
   12c86:	4a20      	ldr	r2, [pc, #128]	; (12d08 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)3>()+0x9c>)
   12c88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12c8c:	681a      	ldr	r2, [r3, #0]
   12c8e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   12c92:	491d      	ldr	r1, [pc, #116]	; (12d08 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)3>()+0x9c>)
   12c94:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   12c98:	f042 0201 	orr.w	r2, r2, #1
   12c9c:	601a      	str	r2, [r3, #0]
    tim_register[channel]->IR |= (1 << kRegMR1);
   12c9e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   12ca2:	4a19      	ldr	r2, [pc, #100]	; (12d08 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)3>()+0x9c>)
   12ca4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12ca8:	681a      	ldr	r2, [r3, #0]
   12caa:	f89d 3007 	ldrb.w	r3, [sp, #7]
   12cae:	4916      	ldr	r1, [pc, #88]	; (12d08 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)3>()+0x9c>)
   12cb0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   12cb4:	f042 0202 	orr.w	r2, r2, #2
   12cb8:	601a      	str	r2, [r3, #0]
    tim_register[channel]->IR |= (1 << kRegMR2);
   12cba:	f89d 3007 	ldrb.w	r3, [sp, #7]
   12cbe:	4a12      	ldr	r2, [pc, #72]	; (12d08 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)3>()+0x9c>)
   12cc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12cc4:	681a      	ldr	r2, [r3, #0]
   12cc6:	f89d 3007 	ldrb.w	r3, [sp, #7]
   12cca:	490f      	ldr	r1, [pc, #60]	; (12d08 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)3>()+0x9c>)
   12ccc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   12cd0:	f042 0204 	orr.w	r2, r2, #4
   12cd4:	601a      	str	r2, [r3, #0]
    tim_register[channel]->IR |= (1 << kRegMR3);
   12cd6:	f89d 3007 	ldrb.w	r3, [sp, #7]
   12cda:	4a0b      	ldr	r2, [pc, #44]	; (12d08 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)3>()+0x9c>)
   12cdc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12ce0:	681a      	ldr	r2, [r3, #0]
   12ce2:	f89d 3007 	ldrb.w	r3, [sp, #7]
   12ce6:	4908      	ldr	r1, [pc, #32]	; (12d08 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)3>()+0x9c>)
   12ce8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   12cec:	f042 0208 	orr.w	r2, r2, #8
   12cf0:	601a      	str	r2, [r3, #0]
   12cf2:	4623      	mov	r3, r4
   12cf4:	4619      	mov	r1, r3
   12cf6:	4803      	ldr	r0, [pc, #12]	; (12d04 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)3>()+0x98>)
   12cf8:	f000 fa30 	bl	1315c <__cyg_profile_func_exit>
  }
   12cfc:	bf00      	nop
   12cfe:	b002      	add	sp, #8
   12d00:	bd10      	pop	{r4, pc}
   12d02:	bf00      	nop
   12d04:	00012c6d 	.word	0x00012c6d
   12d08:	10000014 	.word	0x10000014

00012d0c <__static_initialization_and_destruction_0(int, int)>:
#pragma GCC diagnostic pop
    // main() shouldn't return, but if it does, we'll just enter an infinite
    // loop
    Halt();
  }
}
   12d0c:	b082      	sub	sp, #8
   12d0e:	9001      	str	r0, [sp, #4]
   12d10:	9100      	str	r1, [sp, #0]
   12d12:	9b01      	ldr	r3, [sp, #4]
   12d14:	2b01      	cmp	r3, #1
   12d16:	d15d      	bne.n	12dd4 <__static_initialization_and_destruction_0(int, int)+0xc8>
   12d18:	9b00      	ldr	r3, [sp, #0]
   12d1a:	f64f 72ff 	movw	r2, #65535	; 0xffff
   12d1e:	4293      	cmp	r3, r2
   12d20:	d158      	bne.n	12dd4 <__static_initialization_and_destruction_0(int, int)+0xc8>
  inline static volatile uint32_t * match[4][4] = {
   12d22:	4b2e      	ldr	r3, [pc, #184]	; (12ddc <__static_initialization_and_destruction_0(int, int)+0xd0>)
   12d24:	681b      	ldr	r3, [r3, #0]
   12d26:	f003 0301 	and.w	r3, r3, #1
   12d2a:	2b00      	cmp	r3, #0
   12d2c:	d152      	bne.n	12dd4 <__static_initialization_and_destruction_0(int, int)+0xc8>
   12d2e:	4b2b      	ldr	r3, [pc, #172]	; (12ddc <__static_initialization_and_destruction_0(int, int)+0xd0>)
   12d30:	2201      	movs	r2, #1
   12d32:	601a      	str	r2, [r3, #0]
    [kTimer0] = { &tim_register[0]->MR0, &tim_register[0]->MR1,
   12d34:	4b2a      	ldr	r3, [pc, #168]	; (12de0 <__static_initialization_and_destruction_0(int, int)+0xd4>)
   12d36:	681b      	ldr	r3, [r3, #0]
   12d38:	3318      	adds	r3, #24
  };
   12d3a:	4a2a      	ldr	r2, [pc, #168]	; (12de4 <__static_initialization_and_destruction_0(int, int)+0xd8>)
   12d3c:	6013      	str	r3, [r2, #0]
    [kTimer0] = { &tim_register[0]->MR0, &tim_register[0]->MR1,
   12d3e:	4b28      	ldr	r3, [pc, #160]	; (12de0 <__static_initialization_and_destruction_0(int, int)+0xd4>)
   12d40:	681b      	ldr	r3, [r3, #0]
   12d42:	331c      	adds	r3, #28
  };
   12d44:	4a27      	ldr	r2, [pc, #156]	; (12de4 <__static_initialization_and_destruction_0(int, int)+0xd8>)
   12d46:	6053      	str	r3, [r2, #4]
                  &tim_register[0]->MR2, &tim_register[0]->MR3 },
   12d48:	4b25      	ldr	r3, [pc, #148]	; (12de0 <__static_initialization_and_destruction_0(int, int)+0xd4>)
   12d4a:	681b      	ldr	r3, [r3, #0]
   12d4c:	3320      	adds	r3, #32
  };
   12d4e:	4a25      	ldr	r2, [pc, #148]	; (12de4 <__static_initialization_and_destruction_0(int, int)+0xd8>)
   12d50:	6093      	str	r3, [r2, #8]
                  &tim_register[0]->MR2, &tim_register[0]->MR3 },
   12d52:	4b23      	ldr	r3, [pc, #140]	; (12de0 <__static_initialization_and_destruction_0(int, int)+0xd4>)
   12d54:	681b      	ldr	r3, [r3, #0]
   12d56:	3324      	adds	r3, #36	; 0x24
  };
   12d58:	4a22      	ldr	r2, [pc, #136]	; (12de4 <__static_initialization_and_destruction_0(int, int)+0xd8>)
   12d5a:	60d3      	str	r3, [r2, #12]
    [kTimer1] = { &tim_register[1]->MR0, &tim_register[1]->MR1,
   12d5c:	4b20      	ldr	r3, [pc, #128]	; (12de0 <__static_initialization_and_destruction_0(int, int)+0xd4>)
   12d5e:	685b      	ldr	r3, [r3, #4]
   12d60:	3318      	adds	r3, #24
  };
   12d62:	4a20      	ldr	r2, [pc, #128]	; (12de4 <__static_initialization_and_destruction_0(int, int)+0xd8>)
   12d64:	6113      	str	r3, [r2, #16]
    [kTimer1] = { &tim_register[1]->MR0, &tim_register[1]->MR1,
   12d66:	4b1e      	ldr	r3, [pc, #120]	; (12de0 <__static_initialization_and_destruction_0(int, int)+0xd4>)
   12d68:	685b      	ldr	r3, [r3, #4]
   12d6a:	331c      	adds	r3, #28
  };
   12d6c:	4a1d      	ldr	r2, [pc, #116]	; (12de4 <__static_initialization_and_destruction_0(int, int)+0xd8>)
   12d6e:	6153      	str	r3, [r2, #20]
                  &tim_register[1]->MR2, &tim_register[1]->MR3 },
   12d70:	4b1b      	ldr	r3, [pc, #108]	; (12de0 <__static_initialization_and_destruction_0(int, int)+0xd4>)
   12d72:	685b      	ldr	r3, [r3, #4]
   12d74:	3320      	adds	r3, #32
  };
   12d76:	4a1b      	ldr	r2, [pc, #108]	; (12de4 <__static_initialization_and_destruction_0(int, int)+0xd8>)
   12d78:	6193      	str	r3, [r2, #24]
                  &tim_register[1]->MR2, &tim_register[1]->MR3 },
   12d7a:	4b19      	ldr	r3, [pc, #100]	; (12de0 <__static_initialization_and_destruction_0(int, int)+0xd4>)
   12d7c:	685b      	ldr	r3, [r3, #4]
   12d7e:	3324      	adds	r3, #36	; 0x24
  };
   12d80:	4a18      	ldr	r2, [pc, #96]	; (12de4 <__static_initialization_and_destruction_0(int, int)+0xd8>)
   12d82:	61d3      	str	r3, [r2, #28]
    [kTimer2] = { &tim_register[2]->MR0, &tim_register[2]->MR1,
   12d84:	4b16      	ldr	r3, [pc, #88]	; (12de0 <__static_initialization_and_destruction_0(int, int)+0xd4>)
   12d86:	689b      	ldr	r3, [r3, #8]
   12d88:	3318      	adds	r3, #24
  };
   12d8a:	4a16      	ldr	r2, [pc, #88]	; (12de4 <__static_initialization_and_destruction_0(int, int)+0xd8>)
   12d8c:	6213      	str	r3, [r2, #32]
    [kTimer2] = { &tim_register[2]->MR0, &tim_register[2]->MR1,
   12d8e:	4b14      	ldr	r3, [pc, #80]	; (12de0 <__static_initialization_and_destruction_0(int, int)+0xd4>)
   12d90:	689b      	ldr	r3, [r3, #8]
   12d92:	331c      	adds	r3, #28
  };
   12d94:	4a13      	ldr	r2, [pc, #76]	; (12de4 <__static_initialization_and_destruction_0(int, int)+0xd8>)
   12d96:	6253      	str	r3, [r2, #36]	; 0x24
                  &tim_register[2]->MR2, &tim_register[2]->MR3 },
   12d98:	4b11      	ldr	r3, [pc, #68]	; (12de0 <__static_initialization_and_destruction_0(int, int)+0xd4>)
   12d9a:	689b      	ldr	r3, [r3, #8]
   12d9c:	3320      	adds	r3, #32
  };
   12d9e:	4a11      	ldr	r2, [pc, #68]	; (12de4 <__static_initialization_and_destruction_0(int, int)+0xd8>)
   12da0:	6293      	str	r3, [r2, #40]	; 0x28
                  &tim_register[2]->MR2, &tim_register[2]->MR3 },
   12da2:	4b0f      	ldr	r3, [pc, #60]	; (12de0 <__static_initialization_and_destruction_0(int, int)+0xd4>)
   12da4:	689b      	ldr	r3, [r3, #8]
   12da6:	3324      	adds	r3, #36	; 0x24
  };
   12da8:	4a0e      	ldr	r2, [pc, #56]	; (12de4 <__static_initialization_and_destruction_0(int, int)+0xd8>)
   12daa:	62d3      	str	r3, [r2, #44]	; 0x2c
    [kTimer3] = { &tim_register[3]->MR0, &tim_register[3]->MR1,
   12dac:	4b0c      	ldr	r3, [pc, #48]	; (12de0 <__static_initialization_and_destruction_0(int, int)+0xd4>)
   12dae:	68db      	ldr	r3, [r3, #12]
   12db0:	3318      	adds	r3, #24
  };
   12db2:	4a0c      	ldr	r2, [pc, #48]	; (12de4 <__static_initialization_and_destruction_0(int, int)+0xd8>)
   12db4:	6313      	str	r3, [r2, #48]	; 0x30
    [kTimer3] = { &tim_register[3]->MR0, &tim_register[3]->MR1,
   12db6:	4b0a      	ldr	r3, [pc, #40]	; (12de0 <__static_initialization_and_destruction_0(int, int)+0xd4>)
   12db8:	68db      	ldr	r3, [r3, #12]
   12dba:	331c      	adds	r3, #28
  };
   12dbc:	4a09      	ldr	r2, [pc, #36]	; (12de4 <__static_initialization_and_destruction_0(int, int)+0xd8>)
   12dbe:	6353      	str	r3, [r2, #52]	; 0x34
                  &tim_register[3]->MR2, &tim_register[3]->MR3 }
   12dc0:	4b07      	ldr	r3, [pc, #28]	; (12de0 <__static_initialization_and_destruction_0(int, int)+0xd4>)
   12dc2:	68db      	ldr	r3, [r3, #12]
   12dc4:	3320      	adds	r3, #32
  };
   12dc6:	4a07      	ldr	r2, [pc, #28]	; (12de4 <__static_initialization_and_destruction_0(int, int)+0xd8>)
   12dc8:	6393      	str	r3, [r2, #56]	; 0x38
                  &tim_register[3]->MR2, &tim_register[3]->MR3 }
   12dca:	4b05      	ldr	r3, [pc, #20]	; (12de0 <__static_initialization_and_destruction_0(int, int)+0xd4>)
   12dcc:	68db      	ldr	r3, [r3, #12]
   12dce:	3324      	adds	r3, #36	; 0x24
  };
   12dd0:	4a04      	ldr	r2, [pc, #16]	; (12de4 <__static_initialization_and_destruction_0(int, int)+0xd8>)
   12dd2:	63d3      	str	r3, [r2, #60]	; 0x3c
   12dd4:	bf00      	nop
   12dd6:	b002      	add	sp, #8
   12dd8:	4770      	bx	lr
   12dda:	bf00      	nop
   12ddc:	100002dc 	.word	0x100002dc
   12de0:	10000014 	.word	0x10000014
   12de4:	1000028c 	.word	0x1000028c

00012de8 <_GLOBAL__sub_I_UptimeRTOS>:
   12de8:	b508      	push	{r3, lr}
   12dea:	f64f 71ff 	movw	r1, #65535	; 0xffff
   12dee:	2001      	movs	r0, #1
   12df0:	f7ff ff8c 	bl	12d0c <__static_initialization_and_destruction_0(int, int)>
   12df4:	bd08      	pop	{r3, pc}
   12df6:	Address 0x0000000000012df6 is out of bounds.


00012df8 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
   12df8:	b082      	sub	sp, #8
   12dfa:	4603      	mov	r3, r0
   12dfc:	f88d 3007 	strb.w	r3, [sp, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
   12e00:	f99d 3007 	ldrsb.w	r3, [sp, #7]
   12e04:	f003 021f 	and.w	r2, r3, #31
   12e08:	4905      	ldr	r1, [pc, #20]	; (12e20 <NVIC_EnableIRQ+0x28>)
   12e0a:	f99d 3007 	ldrsb.w	r3, [sp, #7]
   12e0e:	095b      	lsrs	r3, r3, #5
   12e10:	2001      	movs	r0, #1
   12e12:	fa00 f202 	lsl.w	r2, r0, r2
   12e16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   12e1a:	bf00      	nop
   12e1c:	b002      	add	sp, #8
   12e1e:	4770      	bx	lr
   12e20:	e000e100 	.word	0xe000e100

00012e24 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
   12e24:	b082      	sub	sp, #8
   12e26:	4603      	mov	r3, r0
   12e28:	9100      	str	r1, [sp, #0]
   12e2a:	f88d 3007 	strb.w	r3, [sp, #7]
  if ((int32_t)(IRQn) < 0)
   12e2e:	f99d 3007 	ldrsb.w	r3, [sp, #7]
   12e32:	2b00      	cmp	r3, #0
   12e34:	da0c      	bge.n	12e50 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   12e36:	9b00      	ldr	r3, [sp, #0]
   12e38:	b2da      	uxtb	r2, r3
   12e3a:	490d      	ldr	r1, [pc, #52]	; (12e70 <NVIC_SetPriority+0x4c>)
   12e3c:	f99d 3007 	ldrsb.w	r3, [sp, #7]
   12e40:	f003 030f 	and.w	r3, r3, #15
   12e44:	3b04      	subs	r3, #4
   12e46:	0152      	lsls	r2, r2, #5
   12e48:	b2d2      	uxtb	r2, r2
   12e4a:	440b      	add	r3, r1
   12e4c:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
   12e4e:	e00b      	b.n	12e68 <NVIC_SetPriority+0x44>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   12e50:	9b00      	ldr	r3, [sp, #0]
   12e52:	b2db      	uxtb	r3, r3
   12e54:	4a07      	ldr	r2, [pc, #28]	; (12e74 <NVIC_SetPriority+0x50>)
   12e56:	f99d 1007 	ldrsb.w	r1, [sp, #7]
   12e5a:	4608      	mov	r0, r1
   12e5c:	015b      	lsls	r3, r3, #5
   12e5e:	b2d9      	uxtb	r1, r3
   12e60:	1813      	adds	r3, r2, r0
   12e62:	460a      	mov	r2, r1
   12e64:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
   12e68:	bf00      	nop
   12e6a:	b002      	add	sp, #8
   12e6c:	4770      	bx	lr
   12e6e:	bf00      	nop
   12e70:	e000ed00 	.word	0xe000ed00
   12e74:	e000e100 	.word	0xe000e100

00012e78 <InterruptLookupHandler>:
{
   12e78:	b500      	push	{lr}
   12e7a:	b085      	sub	sp, #20
  uint8_t active_isr = (SCB->ICSR & 0xFF);
   12e7c:	4b12      	ldr	r3, [pc, #72]	; (12ec8 <InterruptLookupHandler+0x50>)
   12e7e:	685b      	ldr	r3, [r3, #4]
   12e80:	f88d 300f 	strb.w	r3, [sp, #15]
  IsrPointer isr     = dynamic_isr_vector_table[active_isr];
   12e84:	f89d 300f 	ldrb.w	r3, [sp, #15]
   12e88:	4a10      	ldr	r2, [pc, #64]	; (12ecc <InterruptLookupHandler+0x54>)
   12e8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12e8e:	9302      	str	r3, [sp, #8]
  SJ2_ASSERT_FATAL(isr != InterruptLookupHandler,
   12e90:	9b02      	ldr	r3, [sp, #8]
   12e92:	4a0f      	ldr	r2, [pc, #60]	; (12ed0 <InterruptLookupHandler+0x58>)
   12e94:	4293      	cmp	r3, r2
   12e96:	d110      	bne.n	12eba <InterruptLookupHandler+0x42>
   12e98:	f89d 300f 	ldrb.w	r3, [sp, #15]
   12e9c:	9300      	str	r3, [sp, #0]
   12e9e:	23dd      	movs	r3, #221	; 0xdd
   12ea0:	4a0c      	ldr	r2, [pc, #48]	; (12ed4 <InterruptLookupHandler+0x5c>)
   12ea2:	490d      	ldr	r1, [pc, #52]	; (12ed8 <InterruptLookupHandler+0x60>)
   12ea4:	480d      	ldr	r0, [pc, #52]	; (12edc <InterruptLookupHandler+0x64>)
   12ea6:	f001 fba5 	bl	145f4 <printf>
   12eaa:	480d      	ldr	r0, [pc, #52]	; (12ee0 <InterruptLookupHandler+0x68>)
   12eac:	f000 f912 	bl	130d4 <puts>
   12eb0:	2100      	movs	r1, #0
   12eb2:	2001      	movs	r0, #1
   12eb4:	f7fd ff18 	bl	10ce8 <debug::PrintBacktrace(bool, void*)>
   12eb8:	e7fe      	b.n	12eb8 <InterruptLookupHandler+0x40>
  isr();
   12eba:	9b02      	ldr	r3, [sp, #8]
   12ebc:	4798      	blx	r3
}
   12ebe:	bf00      	nop
   12ec0:	b005      	add	sp, #20
   12ec2:	f85d fb04 	ldr.w	pc, [sp], #4
   12ec6:	bf00      	nop
   12ec8:	e000ed00 	.word	0xe000ed00
   12ecc:	100000a0 	.word	0x100000a0
   12ed0:	00012e79 	.word	0x00012e79
   12ed4:	00018360 	.word	0x00018360
   12ed8:	00018350 	.word	0x00018350
   12edc:	000181f4 	.word	0x000181f4
   12ee0:	000182a0 	.word	0x000182a0

00012ee4 <RegisterIsr(IRQn, void (*)(), bool, long)>:
{
   12ee4:	b500      	push	{lr}
   12ee6:	b085      	sub	sp, #20
   12ee8:	9102      	str	r1, [sp, #8]
   12eea:	9301      	str	r3, [sp, #4]
   12eec:	4603      	mov	r3, r0
   12eee:	f88d 300f 	strb.w	r3, [sp, #15]
   12ef2:	4613      	mov	r3, r2
   12ef4:	f88d 300e 	strb.w	r3, [sp, #14]
  dynamic_isr_vector_table[irq + kIrqOffset] = isr;
   12ef8:	f99d 300f 	ldrsb.w	r3, [sp, #15]
   12efc:	3310      	adds	r3, #16
   12efe:	490f      	ldr	r1, [pc, #60]	; (12f3c <RegisterIsr(IRQn, void (*)(), bool, long)+0x58>)
   12f00:	9a02      	ldr	r2, [sp, #8]
   12f02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  if (enable_interrupt && irq >= 0)
   12f06:	f89d 300e 	ldrb.w	r3, [sp, #14]
   12f0a:	2b00      	cmp	r3, #0
   12f0c:	d008      	beq.n	12f20 <RegisterIsr(IRQn, void (*)(), bool, long)+0x3c>
   12f0e:	f99d 300f 	ldrsb.w	r3, [sp, #15]
   12f12:	2b00      	cmp	r3, #0
   12f14:	db04      	blt.n	12f20 <RegisterIsr(IRQn, void (*)(), bool, long)+0x3c>
    NVIC_EnableIRQ(irq);
   12f16:	f99d 300f 	ldrsb.w	r3, [sp, #15]
   12f1a:	4618      	mov	r0, r3
   12f1c:	f7ff ff6c 	bl	12df8 <NVIC_EnableIRQ>
  if (priority > -1)
   12f20:	9b01      	ldr	r3, [sp, #4]
   12f22:	2b00      	cmp	r3, #0
   12f24:	db06      	blt.n	12f34 <RegisterIsr(IRQn, void (*)(), bool, long)+0x50>
    NVIC_SetPriority(irq, priority);
   12f26:	9a01      	ldr	r2, [sp, #4]
   12f28:	f99d 300f 	ldrsb.w	r3, [sp, #15]
   12f2c:	4611      	mov	r1, r2
   12f2e:	4618      	mov	r0, r3
   12f30:	f7ff ff78 	bl	12e24 <NVIC_SetPriority>
}
   12f34:	bf00      	nop
   12f36:	b005      	add	sp, #20
   12f38:	f85d fb04 	ldr.w	pc, [sp], #4
   12f3c:	100000a0 	.word	0x100000a0

00012f40 <GetRegistersFromStack>:
{
   12f40:	b500      	push	{lr}
   12f42:	b08d      	sub	sp, #52	; 0x34
   12f44:	9003      	str	r0, [sp, #12]
  volatile uint32_t r0  = fault_stack_address[0];
   12f46:	9b03      	ldr	r3, [sp, #12]
   12f48:	681b      	ldr	r3, [r3, #0]
   12f4a:	930b      	str	r3, [sp, #44]	; 0x2c
  volatile uint32_t r1  = fault_stack_address[1];
   12f4c:	9b03      	ldr	r3, [sp, #12]
   12f4e:	685b      	ldr	r3, [r3, #4]
   12f50:	930a      	str	r3, [sp, #40]	; 0x28
  volatile uint32_t r2  = fault_stack_address[2];
   12f52:	9b03      	ldr	r3, [sp, #12]
   12f54:	689b      	ldr	r3, [r3, #8]
   12f56:	9309      	str	r3, [sp, #36]	; 0x24
  volatile uint32_t r3  = fault_stack_address[3];
   12f58:	9b03      	ldr	r3, [sp, #12]
   12f5a:	68db      	ldr	r3, [r3, #12]
   12f5c:	9308      	str	r3, [sp, #32]
  volatile uint32_t r12 = fault_stack_address[4];
   12f5e:	9b03      	ldr	r3, [sp, #12]
   12f60:	691b      	ldr	r3, [r3, #16]
   12f62:	9307      	str	r3, [sp, #28]
  volatile uint32_t lr = fault_stack_address[5];
   12f64:	9b03      	ldr	r3, [sp, #12]
   12f66:	695b      	ldr	r3, [r3, #20]
   12f68:	9306      	str	r3, [sp, #24]
  volatile uint32_t pc = fault_stack_address[6];
   12f6a:	9b03      	ldr	r3, [sp, #12]
   12f6c:	699b      	ldr	r3, [r3, #24]
   12f6e:	9305      	str	r3, [sp, #20]
  volatile uint32_t psr = fault_stack_address[7];
   12f70:	9b03      	ldr	r3, [sp, #12]
   12f72:	69db      	ldr	r3, [r3, #28]
   12f74:	9304      	str	r3, [sp, #16]
  printf(SJ2_BACKGROUND_RED "Hard Fault Exception Occurred!\n" SJ2_COLOR_RESET);
   12f76:	480d      	ldr	r0, [pc, #52]	; (12fac <GetRegistersFromStack+0x6c>)
   12f78:	f001 fb3c 	bl	145f4 <printf>
  printf("r0: 0x%08" PRIX32 ", r1: 0x%08" PRIX32
   12f7c:	990b      	ldr	r1, [sp, #44]	; 0x2c
   12f7e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   12f80:	9809      	ldr	r0, [sp, #36]	; 0x24
   12f82:	9b08      	ldr	r3, [sp, #32]
   12f84:	9300      	str	r3, [sp, #0]
   12f86:	4603      	mov	r3, r0
   12f88:	4809      	ldr	r0, [pc, #36]	; (12fb0 <GetRegistersFromStack+0x70>)
   12f8a:	f001 fb33 	bl	145f4 <printf>
  printf("r12: 0x%08" PRIX32 ", lr: 0x%08" PRIX32
   12f8e:	9907      	ldr	r1, [sp, #28]
   12f90:	9a06      	ldr	r2, [sp, #24]
   12f92:	9805      	ldr	r0, [sp, #20]
   12f94:	9b04      	ldr	r3, [sp, #16]
   12f96:	9300      	str	r3, [sp, #0]
   12f98:	4603      	mov	r3, r0
   12f9a:	4806      	ldr	r0, [pc, #24]	; (12fb4 <GetRegistersFromStack+0x74>)
   12f9c:	f001 fb2a 	bl	145f4 <printf>
  debug::PrintBacktrace(true, reinterpret_cast<void *>(pc));
   12fa0:	9b05      	ldr	r3, [sp, #20]
   12fa2:	4619      	mov	r1, r3
   12fa4:	2001      	movs	r0, #1
   12fa6:	f7fd fe9f 	bl	10ce8 <debug::PrintBacktrace(bool, void*)>
   12faa:	e7fe      	b.n	12faa <GetRegistersFromStack+0x6a>
   12fac:	000182b8 	.word	0x000182b8
   12fb0:	000182e4 	.word	0x000182e4
   12fb4:	00018318 	.word	0x00018318

00012fb8 <FirmwareStdOut(int)>:
}
Stdout out = HostWrite;
Stdin in   = HostRead;
#else
int FirmwareStdOut(int data)
{
   12fb8:	b530      	push	{r4, r5, lr}
   12fba:	b083      	sub	sp, #12
   12fbc:	4675      	mov	r5, lr
   12fbe:	9001      	str	r0, [sp, #4]
   12fc0:	462b      	mov	r3, r5
   12fc2:	4619      	mov	r1, r3
   12fc4:	4809      	ldr	r0, [pc, #36]	; (12fec <FirmwareStdOut(int)+0x34>)
   12fc6:	f000 f8b5 	bl	13134 <__cyg_profile_func_enter>
  uart0.Send(static_cast<uint8_t>(data));
   12fca:	9b01      	ldr	r3, [sp, #4]
   12fcc:	b2db      	uxtb	r3, r3
   12fce:	4619      	mov	r1, r3
   12fd0:	4807      	ldr	r0, [pc, #28]	; (12ff0 <FirmwareStdOut(int)+0x38>)
   12fd2:	f7ff f835 	bl	12040 <Uart::Send(unsigned char)>
  return 1;
   12fd6:	2401      	movs	r4, #1
   12fd8:	462b      	mov	r3, r5
   12fda:	4619      	mov	r1, r3
   12fdc:	4803      	ldr	r0, [pc, #12]	; (12fec <FirmwareStdOut(int)+0x34>)
   12fde:	f000 f8bd 	bl	1315c <__cyg_profile_func_exit>
   12fe2:	4623      	mov	r3, r4
}
   12fe4:	4618      	mov	r0, r3
   12fe6:	b003      	add	sp, #12
   12fe8:	bd30      	pop	{r4, r5, pc}
   12fea:	bf00      	nop
   12fec:	00012fb9 	.word	0x00012fb9
   12ff0:	10000074 	.word	0x10000074

00012ff4 <_exit>:
  }
  // Dummy implementation of exit with return code placed into
  // Arm register r3
  // NOLINTNEXTLINE(readability-identifier-naming)
  void _exit([[maybe_unused]] int rc)
  {
   12ff4:	b500      	push	{lr}
   12ff6:	b083      	sub	sp, #12
   12ff8:	4673      	mov	r3, lr
   12ffa:	9001      	str	r0, [sp, #4]
   12ffc:	4619      	mov	r1, r3
   12ffe:	4802      	ldr	r0, [pc, #8]	; (13008 <_exit+0x14>)
   13000:	f000 f898 	bl	13134 <__cyg_profile_func_enter>
    while (1)
    {
      continue;
   13004:	bf00      	nop
    while (1)
   13006:	e7fd      	b.n	13004 <_exit+0x10>
   13008:	00012ff5 	.word	0x00012ff5

0001300c <_getpid>:
    }
  }
  // Dummy implementation of getpid
  // NOLINTNEXTLINE(readability-identifier-naming)
  int _getpid()
  {
   1300c:	b538      	push	{r3, r4, r5, lr}
   1300e:	4675      	mov	r5, lr
   13010:	462b      	mov	r3, r5
   13012:	4619      	mov	r1, r3
   13014:	4805      	ldr	r0, [pc, #20]	; (1302c <_getpid+0x20>)
   13016:	f000 f88d 	bl	13134 <__cyg_profile_func_enter>
    return 1;
   1301a:	2401      	movs	r4, #1
   1301c:	462b      	mov	r3, r5
   1301e:	4619      	mov	r1, r3
   13020:	4802      	ldr	r0, [pc, #8]	; (1302c <_getpid+0x20>)
   13022:	f000 f89b 	bl	1315c <__cyg_profile_func_exit>
   13026:	4623      	mov	r3, r4
  }
   13028:	4618      	mov	r0, r3
   1302a:	bd38      	pop	{r3, r4, r5, pc}
   1302c:	0001300d 	.word	0x0001300d

00013030 <_kill>:
  // Dummy implementation of kill
  // NOLINTNEXTLINE(readability-identifier-naming)
  int _kill(int, int)
  {
   13030:	b530      	push	{r4, r5, lr}
   13032:	b083      	sub	sp, #12
   13034:	4675      	mov	r5, lr
   13036:	9001      	str	r0, [sp, #4]
   13038:	9100      	str	r1, [sp, #0]
   1303a:	462b      	mov	r3, r5
   1303c:	4619      	mov	r1, r3
   1303e:	4807      	ldr	r0, [pc, #28]	; (1305c <_kill+0x2c>)
   13040:	f000 f878 	bl	13134 <__cyg_profile_func_enter>
    return -1;
   13044:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   13048:	462b      	mov	r3, r5
   1304a:	4619      	mov	r1, r3
   1304c:	4803      	ldr	r0, [pc, #12]	; (1305c <_kill+0x2c>)
   1304e:	f000 f885 	bl	1315c <__cyg_profile_func_exit>
   13052:	4623      	mov	r3, r4
  }
   13054:	4618      	mov	r0, r3
   13056:	b003      	add	sp, #12
   13058:	bd30      	pop	{r4, r5, pc}
   1305a:	bf00      	nop
   1305c:	00013031 	.word	0x00013031

00013060 <_putchar>:
    }
    return length;
  }
  // Needed by third party printf library
  void _putchar(char character)  // NOLINT
  {
   13060:	b510      	push	{r4, lr}
   13062:	b082      	sub	sp, #8
   13064:	4674      	mov	r4, lr
   13066:	4603      	mov	r3, r0
   13068:	f88d 3007 	strb.w	r3, [sp, #7]
   1306c:	4623      	mov	r3, r4
   1306e:	4619      	mov	r1, r3
   13070:	4808      	ldr	r0, [pc, #32]	; (13094 <_putchar+0x34>)
   13072:	f000 f85f 	bl	13134 <__cyg_profile_func_enter>
    out(character);
   13076:	4b08      	ldr	r3, [pc, #32]	; (13098 <_putchar+0x38>)
   13078:	681b      	ldr	r3, [r3, #0]
   1307a:	f89d 2007 	ldrb.w	r2, [sp, #7]
   1307e:	4610      	mov	r0, r2
   13080:	4798      	blx	r3
   13082:	4623      	mov	r3, r4
   13084:	4619      	mov	r1, r3
   13086:	4803      	ldr	r0, [pc, #12]	; (13094 <_putchar+0x34>)
   13088:	f000 f868 	bl	1315c <__cyg_profile_func_exit>
  }
   1308c:	bf00      	nop
   1308e:	b002      	add	sp, #8
   13090:	bd10      	pop	{r4, pc}
   13092:	bf00      	nop
   13094:	00013061 	.word	0x00013061
   13098:	10000184 	.word	0x10000184

0001309c <putchar>:

  // Overload default libnano putchar() with a more optimal version that does
  // not use dynamic memory
  int putchar(int character)  // NOLINT
  {
   1309c:	b530      	push	{r4, r5, lr}
   1309e:	b083      	sub	sp, #12
   130a0:	4674      	mov	r4, lr
   130a2:	9001      	str	r0, [sp, #4]
   130a4:	4623      	mov	r3, r4
   130a6:	4619      	mov	r1, r3
   130a8:	4808      	ldr	r0, [pc, #32]	; (130cc <putchar+0x30>)
   130aa:	f000 f843 	bl	13134 <__cyg_profile_func_enter>
    return out(character);
   130ae:	4b08      	ldr	r3, [pc, #32]	; (130d0 <putchar+0x34>)
   130b0:	681b      	ldr	r3, [r3, #0]
   130b2:	9801      	ldr	r0, [sp, #4]
   130b4:	4798      	blx	r3
   130b6:	4605      	mov	r5, r0
   130b8:	4623      	mov	r3, r4
   130ba:	4619      	mov	r1, r3
   130bc:	4803      	ldr	r0, [pc, #12]	; (130cc <putchar+0x30>)
   130be:	f000 f84d 	bl	1315c <__cyg_profile_func_exit>
   130c2:	462b      	mov	r3, r5
  }
   130c4:	4618      	mov	r0, r3
   130c6:	b003      	add	sp, #12
   130c8:	bd30      	pop	{r4, r5, pc}
   130ca:	bf00      	nop
   130cc:	0001309d 	.word	0x0001309d
   130d0:	10000184 	.word	0x10000184

000130d4 <puts>:

  // Overload default libnano puts() with a more optimal version that does
  // not use dynamic memory
  int puts(const char * str)  // NOLINT
  {
   130d4:	b530      	push	{r4, r5, lr}
   130d6:	b085      	sub	sp, #20
   130d8:	4675      	mov	r5, lr
   130da:	9001      	str	r0, [sp, #4]
   130dc:	462b      	mov	r3, r5
   130de:	4619      	mov	r1, r3
   130e0:	4812      	ldr	r0, [pc, #72]	; (1312c <puts+0x58>)
   130e2:	f000 f827 	bl	13134 <__cyg_profile_func_enter>
    int i;
    for (i = 0; str[i] != '\0'; i++)
   130e6:	2300      	movs	r3, #0
   130e8:	9303      	str	r3, [sp, #12]
   130ea:	9b03      	ldr	r3, [sp, #12]
   130ec:	9a01      	ldr	r2, [sp, #4]
   130ee:	4413      	add	r3, r2
   130f0:	781b      	ldrb	r3, [r3, #0]
   130f2:	2b00      	cmp	r3, #0
   130f4:	d00b      	beq.n	1310e <puts+0x3a>
    {
      out(str[i]);
   130f6:	4b0e      	ldr	r3, [pc, #56]	; (13130 <puts+0x5c>)
   130f8:	681b      	ldr	r3, [r3, #0]
   130fa:	9a03      	ldr	r2, [sp, #12]
   130fc:	9901      	ldr	r1, [sp, #4]
   130fe:	440a      	add	r2, r1
   13100:	7812      	ldrb	r2, [r2, #0]
   13102:	4610      	mov	r0, r2
   13104:	4798      	blx	r3
    for (i = 0; str[i] != '\0'; i++)
   13106:	9b03      	ldr	r3, [sp, #12]
   13108:	3301      	adds	r3, #1
   1310a:	9303      	str	r3, [sp, #12]
   1310c:	e7ed      	b.n	130ea <puts+0x16>
    }
    out('\n');
   1310e:	4b08      	ldr	r3, [pc, #32]	; (13130 <puts+0x5c>)
   13110:	681b      	ldr	r3, [r3, #0]
   13112:	200a      	movs	r0, #10
   13114:	4798      	blx	r3
    return i;
   13116:	9c03      	ldr	r4, [sp, #12]
   13118:	462b      	mov	r3, r5
   1311a:	4619      	mov	r1, r3
   1311c:	4803      	ldr	r0, [pc, #12]	; (1312c <puts+0x58>)
   1311e:	f000 f81d 	bl	1315c <__cyg_profile_func_exit>
   13122:	4623      	mov	r3, r4
  }
   13124:	4618      	mov	r0, r3
   13126:	b005      	add	sp, #20
   13128:	bd30      	pop	{r4, r5, pc}
   1312a:	bf00      	nop
   1312c:	000130d5 	.word	0x000130d5
   13130:	10000184 	.word	0x10000184

00013134 <__cyg_profile_func_enter>:
  // =============================
  void * stack_trace[config::kBacktraceDepth] = { nullptr };
  size_t stack_depth = 0;

  void __cyg_profile_func_enter(void *, void * call_site)  // NOLINT
  {
   13134:	b082      	sub	sp, #8
   13136:	9001      	str	r0, [sp, #4]
   13138:	9100      	str	r1, [sp, #0]
    stack_trace[stack_depth++] = call_site;
   1313a:	9a00      	ldr	r2, [sp, #0]
   1313c:	4b05      	ldr	r3, [pc, #20]	; (13154 <__cyg_profile_func_enter+0x20>)
   1313e:	681b      	ldr	r3, [r3, #0]
   13140:	1c59      	adds	r1, r3, #1
   13142:	4804      	ldr	r0, [pc, #16]	; (13154 <__cyg_profile_func_enter+0x20>)
   13144:	6001      	str	r1, [r0, #0]
   13146:	4904      	ldr	r1, [pc, #16]	; (13158 <__cyg_profile_func_enter+0x24>)
   13148:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
   1314c:	bf00      	nop
   1314e:	b002      	add	sp, #8
   13150:	4770      	bx	lr
   13152:	bf00      	nop
   13154:	100003e0 	.word	0x100003e0
   13158:	100002e0 	.word	0x100002e0

0001315c <__cyg_profile_func_exit>:

  void __cyg_profile_func_exit(void *, void *)  // NOLINT
  {
   1315c:	b082      	sub	sp, #8
   1315e:	9001      	str	r0, [sp, #4]
   13160:	9100      	str	r1, [sp, #0]
    stack_depth--;
   13162:	4b04      	ldr	r3, [pc, #16]	; (13174 <__cyg_profile_func_exit+0x18>)
   13164:	681b      	ldr	r3, [r3, #0]
   13166:	3b01      	subs	r3, #1
   13168:	4a02      	ldr	r2, [pc, #8]	; (13174 <__cyg_profile_func_exit+0x18>)
   1316a:	6013      	str	r3, [r2, #0]
  }
   1316c:	bf00      	nop
   1316e:	b002      	add	sp, #8
   13170:	4770      	bx	lr
   13172:	bf00      	nop
   13174:	100003e0 	.word	0x100003e0

00013178 <GetStackTrace()>:
}

void ** GetStackTrace()
{
   13178:	b538      	push	{r3, r4, r5, lr}
   1317a:	4675      	mov	r5, lr
   1317c:	462b      	mov	r3, r5
   1317e:	4619      	mov	r1, r3
   13180:	4805      	ldr	r0, [pc, #20]	; (13198 <GetStackTrace()+0x20>)
   13182:	f7ff ffd7 	bl	13134 <__cyg_profile_func_enter>
  return stack_trace;
   13186:	4c05      	ldr	r4, [pc, #20]	; (1319c <GetStackTrace()+0x24>)
   13188:	462b      	mov	r3, r5
   1318a:	4619      	mov	r1, r3
   1318c:	4802      	ldr	r0, [pc, #8]	; (13198 <GetStackTrace()+0x20>)
   1318e:	f7ff ffe5 	bl	1315c <__cyg_profile_func_exit>
   13192:	4623      	mov	r3, r4
}
   13194:	4618      	mov	r0, r3
   13196:	bd38      	pop	{r3, r4, r5, pc}
   13198:	00013179 	.word	0x00013179
   1319c:	100002e0 	.word	0x100002e0

000131a0 <GetStackDepth()>:

size_t GetStackDepth()
{
   131a0:	b538      	push	{r3, r4, r5, lr}
   131a2:	4675      	mov	r5, lr
   131a4:	462b      	mov	r3, r5
   131a6:	4619      	mov	r1, r3
   131a8:	4806      	ldr	r0, [pc, #24]	; (131c4 <GetStackDepth()+0x24>)
   131aa:	f7ff ffc3 	bl	13134 <__cyg_profile_func_enter>
  return stack_depth;
   131ae:	4b06      	ldr	r3, [pc, #24]	; (131c8 <GetStackDepth()+0x28>)
   131b0:	681c      	ldr	r4, [r3, #0]
   131b2:	462b      	mov	r3, r5
   131b4:	4619      	mov	r1, r3
   131b6:	4803      	ldr	r0, [pc, #12]	; (131c4 <GetStackDepth()+0x24>)
   131b8:	f7ff ffd0 	bl	1315c <__cyg_profile_func_exit>
   131bc:	4623      	mov	r3, r4
}
   131be:	4618      	mov	r0, r3
   131c0:	bd38      	pop	{r3, r4, r5, pc}
   131c2:	bf00      	nop
   131c4:	000131a1 	.word	0x000131a1
   131c8:	100003e0 	.word	0x100003e0

000131cc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
   131cc:	b510      	push	{r4, lr}
   131ce:	b084      	sub	sp, #16
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
   131d0:	4b29      	ldr	r3, [pc, #164]	; (13278 <vTaskSwitchContext+0xac>)
   131d2:	681b      	ldr	r3, [r3, #0]
   131d4:	2b00      	cmp	r3, #0
   131d6:	d003      	beq.n	131e0 <vTaskSwitchContext+0x14>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
   131d8:	4b28      	ldr	r3, [pc, #160]	; (1327c <vTaskSwitchContext+0xb0>)
   131da:	2201      	movs	r2, #1
   131dc:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
   131de:	e047      	b.n	13270 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
   131e0:	4b26      	ldr	r3, [pc, #152]	; (1327c <vTaskSwitchContext+0xb0>)
   131e2:	2200      	movs	r2, #0
   131e4:	601a      	str	r2, [r3, #0]
					ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
   131e6:	f7ff fa8d 	bl	12704 <UptimeRTOS>
   131ea:	4603      	mov	r3, r0
   131ec:	460c      	mov	r4, r1
   131ee:	461a      	mov	r2, r3
   131f0:	4b23      	ldr	r3, [pc, #140]	; (13280 <vTaskSwitchContext+0xb4>)
   131f2:	601a      	str	r2, [r3, #0]
				if( ulTotalRunTime > ulTaskSwitchedInTime )
   131f4:	4b22      	ldr	r3, [pc, #136]	; (13280 <vTaskSwitchContext+0xb4>)
   131f6:	681a      	ldr	r2, [r3, #0]
   131f8:	4b22      	ldr	r3, [pc, #136]	; (13284 <vTaskSwitchContext+0xb8>)
   131fa:	681b      	ldr	r3, [r3, #0]
   131fc:	429a      	cmp	r2, r3
   131fe:	d909      	bls.n	13214 <vTaskSwitchContext+0x48>
					pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
   13200:	4b21      	ldr	r3, [pc, #132]	; (13288 <vTaskSwitchContext+0xbc>)
   13202:	681b      	ldr	r3, [r3, #0]
   13204:	6d59      	ldr	r1, [r3, #84]	; 0x54
   13206:	4a1e      	ldr	r2, [pc, #120]	; (13280 <vTaskSwitchContext+0xb4>)
   13208:	6810      	ldr	r0, [r2, #0]
   1320a:	4a1e      	ldr	r2, [pc, #120]	; (13284 <vTaskSwitchContext+0xb8>)
   1320c:	6812      	ldr	r2, [r2, #0]
   1320e:	1a82      	subs	r2, r0, r2
   13210:	440a      	add	r2, r1
   13212:	655a      	str	r2, [r3, #84]	; 0x54
				ulTaskSwitchedInTime = ulTotalRunTime;
   13214:	4b1a      	ldr	r3, [pc, #104]	; (13280 <vTaskSwitchContext+0xb4>)
   13216:	681b      	ldr	r3, [r3, #0]
   13218:	4a1a      	ldr	r2, [pc, #104]	; (13284 <vTaskSwitchContext+0xb8>)
   1321a:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
   1321c:	4b1b      	ldr	r3, [pc, #108]	; (1328c <vTaskSwitchContext+0xc0>)
   1321e:	681b      	ldr	r3, [r3, #0]
   13220:	9301      	str	r3, [sp, #4]
	/* Generic helper function. */
	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitmap )
	{
	uint8_t ucReturn;

		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
   13222:	9b01      	ldr	r3, [sp, #4]
   13224:	fab3 f383 	clz	r3, r3
   13228:	f88d 3003 	strb.w	r3, [sp, #3]
		return ucReturn;
   1322c:	f89d 3003 	ldrb.w	r3, [sp, #3]
   13230:	f1c3 031f 	rsb	r3, r3, #31
   13234:	9303      	str	r3, [sp, #12]
   13236:	9a03      	ldr	r2, [sp, #12]
   13238:	4613      	mov	r3, r2
   1323a:	009b      	lsls	r3, r3, #2
   1323c:	4413      	add	r3, r2
   1323e:	009b      	lsls	r3, r3, #2
   13240:	4a13      	ldr	r2, [pc, #76]	; (13290 <vTaskSwitchContext+0xc4>)
   13242:	4413      	add	r3, r2
   13244:	9302      	str	r3, [sp, #8]
   13246:	9b02      	ldr	r3, [sp, #8]
   13248:	685b      	ldr	r3, [r3, #4]
   1324a:	685a      	ldr	r2, [r3, #4]
   1324c:	9b02      	ldr	r3, [sp, #8]
   1324e:	605a      	str	r2, [r3, #4]
   13250:	9b02      	ldr	r3, [sp, #8]
   13252:	685a      	ldr	r2, [r3, #4]
   13254:	9b02      	ldr	r3, [sp, #8]
   13256:	3308      	adds	r3, #8
   13258:	429a      	cmp	r2, r3
   1325a:	d104      	bne.n	13266 <vTaskSwitchContext+0x9a>
   1325c:	9b02      	ldr	r3, [sp, #8]
   1325e:	685b      	ldr	r3, [r3, #4]
   13260:	685a      	ldr	r2, [r3, #4]
   13262:	9b02      	ldr	r3, [sp, #8]
   13264:	605a      	str	r2, [r3, #4]
   13266:	9b02      	ldr	r3, [sp, #8]
   13268:	685b      	ldr	r3, [r3, #4]
   1326a:	68db      	ldr	r3, [r3, #12]
   1326c:	4a06      	ldr	r2, [pc, #24]	; (13288 <vTaskSwitchContext+0xbc>)
   1326e:	6013      	str	r3, [r2, #0]
}
   13270:	bf00      	nop
   13272:	b004      	add	sp, #16
   13274:	bd10      	pop	{r4, pc}
   13276:	bf00      	nop
   13278:	10000454 	.word	0x10000454
   1327c:	10000450 	.word	0x10000450
   13280:	1000045c 	.word	0x1000045c
   13284:	10000458 	.word	0x10000458
   13288:	100003e4 	.word	0x100003e4
   1328c:	1000044c 	.word	0x1000044c
   13290:	100003e8 	.word	0x100003e8
   13294:	ffffffff 	.word	0xffffffff
   13298:	ffffffff 	.word	0xffffffff
   1329c:	ffffffff 	.word	0xffffffff

000132a0 <vPortSVCHandler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
   132a0:	4b07      	ldr	r3, [pc, #28]	; (132c0 <pxCurrentTCBConst2>)
   132a2:	6819      	ldr	r1, [r3, #0]
   132a4:	6808      	ldr	r0, [r1, #0]
   132a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   132aa:	f380 8809 	msr	PSP, r0
   132ae:	f3bf 8f6f 	isb	sy
   132b2:	f04f 0000 	mov.w	r0, #0
   132b6:	f380 8811 	msr	BASEPRI, r0
   132ba:	4770      	bx	lr
   132bc:	f3af 8000 	nop.w

000132c0 <pxCurrentTCBConst2>:
   132c0:	100003e4 	.word	0x100003e4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
   132c4:	bf00      	nop
   132c6:	bf00      	nop
   132c8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   132cc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

000132d0 <xPortPendSVHandler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
   132d0:	f3ef 8009 	mrs	r0, PSP
   132d4:	f3bf 8f6f 	isb	sy
   132d8:	4b15      	ldr	r3, [pc, #84]	; (13330 <pxCurrentTCBConst>)
   132da:	681a      	ldr	r2, [r3, #0]
   132dc:	f01e 0f10 	tst.w	lr, #16
   132e0:	bf08      	it	eq
   132e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
   132e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   132ea:	6010      	str	r0, [r2, #0]
   132ec:	e92d 0009 	stmdb	sp!, {r0, r3}
   132f0:	f04f 0028 	mov.w	r0, #40	; 0x28
   132f4:	f380 8811 	msr	BASEPRI, r0
   132f8:	f3bf 8f4f 	dsb	sy
   132fc:	f3bf 8f6f 	isb	sy
   13300:	f7ff ff64 	bl	131cc <vTaskSwitchContext>
   13304:	f04f 0000 	mov.w	r0, #0
   13308:	f380 8811 	msr	BASEPRI, r0
   1330c:	bc09      	pop	{r0, r3}
   1330e:	6819      	ldr	r1, [r3, #0]
   13310:	6808      	ldr	r0, [r1, #0]
   13312:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13316:	f01e 0f10 	tst.w	lr, #16
   1331a:	bf08      	it	eq
   1331c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
   13320:	f380 8809 	msr	PSP, r0
   13324:	f3bf 8f6f 	isb	sy
   13328:	4770      	bx	lr
   1332a:	bf00      	nop
   1332c:	f3af 8000 	nop.w

00013330 <pxCurrentTCBConst>:
   13330:	100003e4 	.word	0x100003e4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
   13334:	bf00      	nop
   13336:	bf00      	nop

00013338 <_out_null(char, void*, unsigned int, unsigned int)>:
}


// internal null output
static inline void _out_null(char character, void* buffer, size_t idx, size_t maxlen)
{
   13338:	b510      	push	{r4, lr}
   1333a:	b084      	sub	sp, #16
   1333c:	4674      	mov	r4, lr
   1333e:	9102      	str	r1, [sp, #8]
   13340:	9201      	str	r2, [sp, #4]
   13342:	9300      	str	r3, [sp, #0]
   13344:	4603      	mov	r3, r0
   13346:	f88d 300f 	strb.w	r3, [sp, #15]
   1334a:	4623      	mov	r3, r4
   1334c:	4619      	mov	r1, r3
   1334e:	4805      	ldr	r0, [pc, #20]	; (13364 <_out_null(char, void*, unsigned int, unsigned int)+0x2c>)
   13350:	f7ff fef0 	bl	13134 <__cyg_profile_func_enter>
   13354:	4623      	mov	r3, r4
   13356:	4619      	mov	r1, r3
   13358:	4802      	ldr	r0, [pc, #8]	; (13364 <_out_null(char, void*, unsigned int, unsigned int)+0x2c>)
   1335a:	f7ff feff 	bl	1315c <__cyg_profile_func_exit>
  (void)character; (void)buffer; (void)idx; (void)maxlen;
}
   1335e:	bf00      	nop
   13360:	b004      	add	sp, #16
   13362:	bd10      	pop	{r4, pc}
   13364:	00013339 	.word	0x00013339

00013368 <_out_char(char, void*, unsigned int, unsigned int)>:


// internal _putchar wrapper
static inline void _out_char(char character, void* buffer, size_t idx, size_t maxlen)
{
   13368:	b510      	push	{r4, lr}
   1336a:	b084      	sub	sp, #16
   1336c:	4674      	mov	r4, lr
   1336e:	9102      	str	r1, [sp, #8]
   13370:	9201      	str	r2, [sp, #4]
   13372:	9300      	str	r3, [sp, #0]
   13374:	4603      	mov	r3, r0
   13376:	f88d 300f 	strb.w	r3, [sp, #15]
   1337a:	4623      	mov	r3, r4
   1337c:	4619      	mov	r1, r3
   1337e:	480a      	ldr	r0, [pc, #40]	; (133a8 <_out_char(char, void*, unsigned int, unsigned int)+0x40>)
   13380:	f7ff fed8 	bl	13134 <__cyg_profile_func_enter>
  (void)buffer; (void)idx; (void)maxlen;
  if (character) {
   13384:	f89d 300f 	ldrb.w	r3, [sp, #15]
   13388:	2b00      	cmp	r3, #0
   1338a:	d004      	beq.n	13396 <_out_char(char, void*, unsigned int, unsigned int)+0x2e>
    _putchar(character);
   1338c:	f89d 300f 	ldrb.w	r3, [sp, #15]
   13390:	4618      	mov	r0, r3
   13392:	f7ff fe65 	bl	13060 <_putchar>
   13396:	4623      	mov	r3, r4
   13398:	4619      	mov	r1, r3
   1339a:	4803      	ldr	r0, [pc, #12]	; (133a8 <_out_char(char, void*, unsigned int, unsigned int)+0x40>)
   1339c:	f7ff fede 	bl	1315c <__cyg_profile_func_exit>
  }
}
   133a0:	bf00      	nop
   133a2:	b004      	add	sp, #16
   133a4:	bd10      	pop	{r4, pc}
   133a6:	bf00      	nop
   133a8:	00013369 	.word	0x00013369

000133ac <_strlen(char const*)>:


// internal strlen
// \return The length of the string (excluding the terminating 0)
static inline unsigned int _strlen(const char* str)
{
   133ac:	b530      	push	{r4, r5, lr}
   133ae:	b085      	sub	sp, #20
   133b0:	4674      	mov	r4, lr
   133b2:	9001      	str	r0, [sp, #4]
   133b4:	4623      	mov	r3, r4
   133b6:	4619      	mov	r1, r3
   133b8:	480c      	ldr	r0, [pc, #48]	; (133ec <_strlen(char const*)+0x40>)
   133ba:	f7ff febb 	bl	13134 <__cyg_profile_func_enter>
  const char* s;
  for (s = str; *s; ++s);
   133be:	9b01      	ldr	r3, [sp, #4]
   133c0:	9303      	str	r3, [sp, #12]
   133c2:	9b03      	ldr	r3, [sp, #12]
   133c4:	781b      	ldrb	r3, [r3, #0]
   133c6:	2b00      	cmp	r3, #0
   133c8:	d003      	beq.n	133d2 <_strlen(char const*)+0x26>
   133ca:	9b03      	ldr	r3, [sp, #12]
   133cc:	3301      	adds	r3, #1
   133ce:	9303      	str	r3, [sp, #12]
   133d0:	e7f7      	b.n	133c2 <_strlen(char const*)+0x16>
  return (unsigned int)(s - str);
   133d2:	9a03      	ldr	r2, [sp, #12]
   133d4:	9b01      	ldr	r3, [sp, #4]
   133d6:	1ad3      	subs	r3, r2, r3
   133d8:	461d      	mov	r5, r3
   133da:	4623      	mov	r3, r4
   133dc:	4619      	mov	r1, r3
   133de:	4803      	ldr	r0, [pc, #12]	; (133ec <_strlen(char const*)+0x40>)
   133e0:	f7ff febc 	bl	1315c <__cyg_profile_func_exit>
   133e4:	462b      	mov	r3, r5
}
   133e6:	4618      	mov	r0, r3
   133e8:	b005      	add	sp, #20
   133ea:	bd30      	pop	{r4, r5, pc}
   133ec:	000133ad 	.word	0x000133ad

000133f0 <_is_digit(char)>:


// internal test if char is a digit (0-9)
// \return true if char is a digit
static inline bool _is_digit(char ch)
{
   133f0:	b530      	push	{r4, r5, lr}
   133f2:	b083      	sub	sp, #12
   133f4:	4675      	mov	r5, lr
   133f6:	4603      	mov	r3, r0
   133f8:	f88d 3007 	strb.w	r3, [sp, #7]
   133fc:	462b      	mov	r3, r5
   133fe:	4619      	mov	r1, r3
   13400:	480b      	ldr	r0, [pc, #44]	; (13430 <_is_digit(char)+0x40>)
   13402:	f7ff fe97 	bl	13134 <__cyg_profile_func_enter>
  return (ch >= '0') && (ch <= '9');
   13406:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1340a:	2b2f      	cmp	r3, #47	; 0x2f
   1340c:	d905      	bls.n	1341a <_is_digit(char)+0x2a>
   1340e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   13412:	2b39      	cmp	r3, #57	; 0x39
   13414:	d801      	bhi.n	1341a <_is_digit(char)+0x2a>
   13416:	2401      	movs	r4, #1
   13418:	e000      	b.n	1341c <_is_digit(char)+0x2c>
   1341a:	2400      	movs	r4, #0
   1341c:	462b      	mov	r3, r5
   1341e:	4619      	mov	r1, r3
   13420:	4803      	ldr	r0, [pc, #12]	; (13430 <_is_digit(char)+0x40>)
   13422:	f7ff fe9b 	bl	1315c <__cyg_profile_func_exit>
   13426:	4623      	mov	r3, r4
}
   13428:	4618      	mov	r0, r3
   1342a:	b003      	add	sp, #12
   1342c:	bd30      	pop	{r4, r5, pc}
   1342e:	bf00      	nop
   13430:	000133f1 	.word	0x000133f1

00013434 <_atoi(char const**)>:


// internal ASCII string to unsigned int conversion
static unsigned int _atoi(const char** str)
{
   13434:	b530      	push	{r4, r5, lr}
   13436:	b085      	sub	sp, #20
   13438:	4675      	mov	r5, lr
   1343a:	9001      	str	r0, [sp, #4]
   1343c:	462b      	mov	r3, r5
   1343e:	4619      	mov	r1, r3
   13440:	4813      	ldr	r0, [pc, #76]	; (13490 <_atoi(char const**)+0x5c>)
   13442:	f7ff fe77 	bl	13134 <__cyg_profile_func_enter>
  unsigned int i = 0U;
   13446:	2300      	movs	r3, #0
   13448:	9303      	str	r3, [sp, #12]
  while (_is_digit(**str)) {
   1344a:	9b01      	ldr	r3, [sp, #4]
   1344c:	681b      	ldr	r3, [r3, #0]
   1344e:	781b      	ldrb	r3, [r3, #0]
   13450:	4618      	mov	r0, r3
   13452:	f7ff ffcd 	bl	133f0 <_is_digit(char)>
   13456:	4603      	mov	r3, r0
   13458:	2b00      	cmp	r3, #0
   1345a:	d00f      	beq.n	1347c <_atoi(char const**)+0x48>
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
   1345c:	9a03      	ldr	r2, [sp, #12]
   1345e:	4613      	mov	r3, r2
   13460:	009b      	lsls	r3, r3, #2
   13462:	4413      	add	r3, r2
   13464:	005b      	lsls	r3, r3, #1
   13466:	4618      	mov	r0, r3
   13468:	9b01      	ldr	r3, [sp, #4]
   1346a:	681b      	ldr	r3, [r3, #0]
   1346c:	1c59      	adds	r1, r3, #1
   1346e:	9a01      	ldr	r2, [sp, #4]
   13470:	6011      	str	r1, [r2, #0]
   13472:	781b      	ldrb	r3, [r3, #0]
   13474:	4403      	add	r3, r0
   13476:	3b30      	subs	r3, #48	; 0x30
   13478:	9303      	str	r3, [sp, #12]
  while (_is_digit(**str)) {
   1347a:	e7e6      	b.n	1344a <_atoi(char const**)+0x16>
  }
  return i;
   1347c:	9c03      	ldr	r4, [sp, #12]
   1347e:	462b      	mov	r3, r5
   13480:	4619      	mov	r1, r3
   13482:	4803      	ldr	r0, [pc, #12]	; (13490 <_atoi(char const**)+0x5c>)
   13484:	f7ff fe6a 	bl	1315c <__cyg_profile_func_exit>
   13488:	4623      	mov	r3, r4
}
   1348a:	4618      	mov	r0, r3
   1348c:	b005      	add	sp, #20
   1348e:	bd30      	pop	{r4, r5, pc}
   13490:	00013435 	.word	0x00013435

00013494 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)>:


// internal itoa format
static size_t _ntoa_format(out_fct_type out, char* buffer, size_t idx, size_t maxlen, char* buf, size_t len, bool negative, unsigned int base, unsigned int prec, unsigned int width, unsigned int flags)
{
   13494:	b530      	push	{r4, r5, lr}
   13496:	b089      	sub	sp, #36	; 0x24
   13498:	4675      	mov	r5, lr
   1349a:	9003      	str	r0, [sp, #12]
   1349c:	9102      	str	r1, [sp, #8]
   1349e:	9201      	str	r2, [sp, #4]
   134a0:	9300      	str	r3, [sp, #0]
   134a2:	462b      	mov	r3, r5
   134a4:	4619      	mov	r1, r3
   134a6:	4891      	ldr	r0, [pc, #580]	; (136ec <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x258>)
   134a8:	f7ff fe44 	bl	13134 <__cyg_profile_func_enter>
  const size_t start_idx = idx;
   134ac:	9b01      	ldr	r3, [sp, #4]
   134ae:	9305      	str	r3, [sp, #20]

  // pad leading zeros
  while (!(flags & FLAGS_LEFT) && (len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
   134b0:	9b12      	ldr	r3, [sp, #72]	; 0x48
   134b2:	f003 0302 	and.w	r3, r3, #2
   134b6:	2b00      	cmp	r3, #0
   134b8:	d10e      	bne.n	134d8 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x44>
   134ba:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   134bc:	9b10      	ldr	r3, [sp, #64]	; 0x40
   134be:	429a      	cmp	r2, r3
   134c0:	d20a      	bcs.n	134d8 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x44>
   134c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   134c4:	2b1f      	cmp	r3, #31
   134c6:	d807      	bhi.n	134d8 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x44>
    buf[len++] = '0';
   134c8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   134ca:	1c5a      	adds	r2, r3, #1
   134cc:	920d      	str	r2, [sp, #52]	; 0x34
   134ce:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   134d0:	4413      	add	r3, r2
   134d2:	2230      	movs	r2, #48	; 0x30
   134d4:	701a      	strb	r2, [r3, #0]
  while (!(flags & FLAGS_LEFT) && (len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
   134d6:	e7eb      	b.n	134b0 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1c>
  }
  while (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
   134d8:	9b12      	ldr	r3, [sp, #72]	; 0x48
   134da:	f003 0302 	and.w	r3, r3, #2
   134de:	2b00      	cmp	r3, #0
   134e0:	d113      	bne.n	1350a <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x76>
   134e2:	9b12      	ldr	r3, [sp, #72]	; 0x48
   134e4:	f003 0301 	and.w	r3, r3, #1
   134e8:	2b00      	cmp	r3, #0
   134ea:	d00e      	beq.n	1350a <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x76>
   134ec:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   134ee:	9b11      	ldr	r3, [sp, #68]	; 0x44
   134f0:	429a      	cmp	r2, r3
   134f2:	d20a      	bcs.n	1350a <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x76>
   134f4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   134f6:	2b1f      	cmp	r3, #31
   134f8:	d807      	bhi.n	1350a <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x76>
    buf[len++] = '0';
   134fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   134fc:	1c5a      	adds	r2, r3, #1
   134fe:	920d      	str	r2, [sp, #52]	; 0x34
   13500:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   13502:	4413      	add	r3, r2
   13504:	2230      	movs	r2, #48	; 0x30
   13506:	701a      	strb	r2, [r3, #0]
  while (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
   13508:	e7e6      	b.n	134d8 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x44>
  }

  // handle hash
  if (flags & FLAGS_HASH) {
   1350a:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1350c:	f003 0310 	and.w	r3, r3, #16
   13510:	2b00      	cmp	r3, #0
   13512:	d058      	beq.n	135c6 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x132>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
   13514:	9b12      	ldr	r3, [sp, #72]	; 0x48
   13516:	f403 6380 	and.w	r3, r3, #1024	; 0x400
   1351a:	2b00      	cmp	r3, #0
   1351c:	d116      	bne.n	1354c <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xb8>
   1351e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   13520:	2b00      	cmp	r3, #0
   13522:	d013      	beq.n	1354c <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xb8>
   13524:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   13526:	9b10      	ldr	r3, [sp, #64]	; 0x40
   13528:	429a      	cmp	r2, r3
   1352a:	d003      	beq.n	13534 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xa0>
   1352c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   1352e:	9b11      	ldr	r3, [sp, #68]	; 0x44
   13530:	429a      	cmp	r2, r3
   13532:	d10b      	bne.n	1354c <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xb8>
      len--;
   13534:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   13536:	3b01      	subs	r3, #1
   13538:	930d      	str	r3, [sp, #52]	; 0x34
      if (len && (base == 16U)) {
   1353a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1353c:	2b00      	cmp	r3, #0
   1353e:	d005      	beq.n	1354c <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xb8>
   13540:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   13542:	2b10      	cmp	r3, #16
   13544:	d102      	bne.n	1354c <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xb8>
        len--;
   13546:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   13548:	3b01      	subs	r3, #1
   1354a:	930d      	str	r3, [sp, #52]	; 0x34
      }
    }
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
   1354c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1354e:	2b10      	cmp	r3, #16
   13550:	d10f      	bne.n	13572 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xde>
   13552:	9b12      	ldr	r3, [sp, #72]	; 0x48
   13554:	f003 0320 	and.w	r3, r3, #32
   13558:	2b00      	cmp	r3, #0
   1355a:	d10a      	bne.n	13572 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xde>
   1355c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1355e:	2b1f      	cmp	r3, #31
   13560:	d807      	bhi.n	13572 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xde>
      buf[len++] = 'x';
   13562:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   13564:	1c5a      	adds	r2, r3, #1
   13566:	920d      	str	r2, [sp, #52]	; 0x34
   13568:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1356a:	4413      	add	r3, r2
   1356c:	2278      	movs	r2, #120	; 0x78
   1356e:	701a      	strb	r2, [r3, #0]
   13570:	e01f      	b.n	135b2 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x11e>
    }
    else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
   13572:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   13574:	2b10      	cmp	r3, #16
   13576:	d10f      	bne.n	13598 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x104>
   13578:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1357a:	f003 0320 	and.w	r3, r3, #32
   1357e:	2b00      	cmp	r3, #0
   13580:	d00a      	beq.n	13598 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x104>
   13582:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   13584:	2b1f      	cmp	r3, #31
   13586:	d807      	bhi.n	13598 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x104>
      buf[len++] = 'X';
   13588:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1358a:	1c5a      	adds	r2, r3, #1
   1358c:	920d      	str	r2, [sp, #52]	; 0x34
   1358e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   13590:	4413      	add	r3, r2
   13592:	2258      	movs	r2, #88	; 0x58
   13594:	701a      	strb	r2, [r3, #0]
   13596:	e00c      	b.n	135b2 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x11e>
    }
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
   13598:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1359a:	2b02      	cmp	r3, #2
   1359c:	d109      	bne.n	135b2 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x11e>
   1359e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   135a0:	2b1f      	cmp	r3, #31
   135a2:	d806      	bhi.n	135b2 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x11e>
      buf[len++] = 'b';
   135a4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   135a6:	1c5a      	adds	r2, r3, #1
   135a8:	920d      	str	r2, [sp, #52]	; 0x34
   135aa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   135ac:	4413      	add	r3, r2
   135ae:	2262      	movs	r2, #98	; 0x62
   135b0:	701a      	strb	r2, [r3, #0]
    }
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
   135b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   135b4:	2b1f      	cmp	r3, #31
   135b6:	d806      	bhi.n	135c6 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x132>
      buf[len++] = '0';
   135b8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   135ba:	1c5a      	adds	r2, r3, #1
   135bc:	920d      	str	r2, [sp, #52]	; 0x34
   135be:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   135c0:	4413      	add	r3, r2
   135c2:	2230      	movs	r2, #48	; 0x30
   135c4:	701a      	strb	r2, [r3, #0]
    }
  }

  // handle sign
  if (len && (len == width) && (negative || (flags & FLAGS_PLUS) || (flags & FLAGS_SPACE))) {
   135c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   135c8:	2b00      	cmp	r3, #0
   135ca:	d014      	beq.n	135f6 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x162>
   135cc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   135ce:	9b11      	ldr	r3, [sp, #68]	; 0x44
   135d0:	429a      	cmp	r2, r3
   135d2:	d110      	bne.n	135f6 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x162>
   135d4:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
   135d8:	2b00      	cmp	r3, #0
   135da:	d109      	bne.n	135f0 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x15c>
   135dc:	9b12      	ldr	r3, [sp, #72]	; 0x48
   135de:	f003 0304 	and.w	r3, r3, #4
   135e2:	2b00      	cmp	r3, #0
   135e4:	d104      	bne.n	135f0 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x15c>
   135e6:	9b12      	ldr	r3, [sp, #72]	; 0x48
   135e8:	f003 0308 	and.w	r3, r3, #8
   135ec:	2b00      	cmp	r3, #0
   135ee:	d002      	beq.n	135f6 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x162>
    len--;
   135f0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   135f2:	3b01      	subs	r3, #1
   135f4:	930d      	str	r3, [sp, #52]	; 0x34
  }
  if (len < PRINTF_NTOA_BUFFER_SIZE) {
   135f6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   135f8:	2b1f      	cmp	r3, #31
   135fa:	d824      	bhi.n	13646 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1b2>
    if (negative) {
   135fc:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
   13600:	2b00      	cmp	r3, #0
   13602:	d007      	beq.n	13614 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x180>
      buf[len++] = '-';
   13604:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   13606:	1c5a      	adds	r2, r3, #1
   13608:	920d      	str	r2, [sp, #52]	; 0x34
   1360a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1360c:	4413      	add	r3, r2
   1360e:	222d      	movs	r2, #45	; 0x2d
   13610:	701a      	strb	r2, [r3, #0]
   13612:	e018      	b.n	13646 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1b2>
    }
    else if (flags & FLAGS_PLUS) {
   13614:	9b12      	ldr	r3, [sp, #72]	; 0x48
   13616:	f003 0304 	and.w	r3, r3, #4
   1361a:	2b00      	cmp	r3, #0
   1361c:	d007      	beq.n	1362e <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x19a>
      buf[len++] = '+';  // ignore the space if the '+' exists
   1361e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   13620:	1c5a      	adds	r2, r3, #1
   13622:	920d      	str	r2, [sp, #52]	; 0x34
   13624:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   13626:	4413      	add	r3, r2
   13628:	222b      	movs	r2, #43	; 0x2b
   1362a:	701a      	strb	r2, [r3, #0]
   1362c:	e00b      	b.n	13646 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1b2>
    }
    else if (flags & FLAGS_SPACE) {
   1362e:	9b12      	ldr	r3, [sp, #72]	; 0x48
   13630:	f003 0308 	and.w	r3, r3, #8
   13634:	2b00      	cmp	r3, #0
   13636:	d006      	beq.n	13646 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1b2>
      buf[len++] = ' ';
   13638:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1363a:	1c5a      	adds	r2, r3, #1
   1363c:	920d      	str	r2, [sp, #52]	; 0x34
   1363e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   13640:	4413      	add	r3, r2
   13642:	2220      	movs	r2, #32
   13644:	701a      	strb	r2, [r3, #0]
    }
  }

  // pad spaces up to given width
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
   13646:	9b12      	ldr	r3, [sp, #72]	; 0x48
   13648:	f003 0302 	and.w	r3, r3, #2
   1364c:	2b00      	cmp	r3, #0
   1364e:	d116      	bne.n	1367e <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1ea>
   13650:	9b12      	ldr	r3, [sp, #72]	; 0x48
   13652:	f003 0301 	and.w	r3, r3, #1
   13656:	2b00      	cmp	r3, #0
   13658:	d111      	bne.n	1367e <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1ea>
    for (size_t i = len; i < width; i++) {
   1365a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1365c:	9307      	str	r3, [sp, #28]
   1365e:	9a07      	ldr	r2, [sp, #28]
   13660:	9b11      	ldr	r3, [sp, #68]	; 0x44
   13662:	429a      	cmp	r2, r3
   13664:	d20b      	bcs.n	1367e <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1ea>
      out(' ', buffer, idx++, maxlen);
   13666:	9a01      	ldr	r2, [sp, #4]
   13668:	1c53      	adds	r3, r2, #1
   1366a:	9301      	str	r3, [sp, #4]
   1366c:	9c03      	ldr	r4, [sp, #12]
   1366e:	9b00      	ldr	r3, [sp, #0]
   13670:	9902      	ldr	r1, [sp, #8]
   13672:	2020      	movs	r0, #32
   13674:	47a0      	blx	r4
    for (size_t i = len; i < width; i++) {
   13676:	9b07      	ldr	r3, [sp, #28]
   13678:	3301      	adds	r3, #1
   1367a:	9307      	str	r3, [sp, #28]
   1367c:	e7ef      	b.n	1365e <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1ca>
    }
  }

  // reverse string
  for (size_t i = 0U; i < len; i++) {
   1367e:	2300      	movs	r3, #0
   13680:	9306      	str	r3, [sp, #24]
   13682:	9a06      	ldr	r2, [sp, #24]
   13684:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   13686:	429a      	cmp	r2, r3
   13688:	d211      	bcs.n	136ae <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x21a>
    out(buf[len - i - 1U], buffer, idx++, maxlen);
   1368a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   1368c:	9b06      	ldr	r3, [sp, #24]
   1368e:	1ad3      	subs	r3, r2, r3
   13690:	3b01      	subs	r3, #1
   13692:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   13694:	4413      	add	r3, r2
   13696:	7818      	ldrb	r0, [r3, #0]
   13698:	9a01      	ldr	r2, [sp, #4]
   1369a:	1c53      	adds	r3, r2, #1
   1369c:	9301      	str	r3, [sp, #4]
   1369e:	9c03      	ldr	r4, [sp, #12]
   136a0:	9b00      	ldr	r3, [sp, #0]
   136a2:	9902      	ldr	r1, [sp, #8]
   136a4:	47a0      	blx	r4
  for (size_t i = 0U; i < len; i++) {
   136a6:	9b06      	ldr	r3, [sp, #24]
   136a8:	3301      	adds	r3, #1
   136aa:	9306      	str	r3, [sp, #24]
   136ac:	e7e9      	b.n	13682 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1ee>
  }

  // append pad spaces up to given width
  if (flags & FLAGS_LEFT) {
   136ae:	9b12      	ldr	r3, [sp, #72]	; 0x48
   136b0:	f003 0302 	and.w	r3, r3, #2
   136b4:	2b00      	cmp	r3, #0
   136b6:	d00e      	beq.n	136d6 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x242>
    while (idx - start_idx < width) {
   136b8:	9a01      	ldr	r2, [sp, #4]
   136ba:	9b05      	ldr	r3, [sp, #20]
   136bc:	1ad3      	subs	r3, r2, r3
   136be:	9a11      	ldr	r2, [sp, #68]	; 0x44
   136c0:	429a      	cmp	r2, r3
   136c2:	d908      	bls.n	136d6 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x242>
      out(' ', buffer, idx++, maxlen);
   136c4:	9a01      	ldr	r2, [sp, #4]
   136c6:	1c53      	adds	r3, r2, #1
   136c8:	9301      	str	r3, [sp, #4]
   136ca:	9c03      	ldr	r4, [sp, #12]
   136cc:	9b00      	ldr	r3, [sp, #0]
   136ce:	9902      	ldr	r1, [sp, #8]
   136d0:	2020      	movs	r0, #32
   136d2:	47a0      	blx	r4
    while (idx - start_idx < width) {
   136d4:	e7f0      	b.n	136b8 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x224>
    }
  }

  return idx;
   136d6:	9c01      	ldr	r4, [sp, #4]
   136d8:	462b      	mov	r3, r5
   136da:	4619      	mov	r1, r3
   136dc:	4803      	ldr	r0, [pc, #12]	; (136ec <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x258>)
   136de:	f7ff fd3d 	bl	1315c <__cyg_profile_func_exit>
   136e2:	4623      	mov	r3, r4
}
   136e4:	4618      	mov	r0, r3
   136e6:	b009      	add	sp, #36	; 0x24
   136e8:	bd30      	pop	{r4, r5, pc}
   136ea:	bf00      	nop
   136ec:	00013495 	.word	0x00013495

000136f0 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)>:


// internal itoa for 'long' type
static size_t _ntoa_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long value, bool negative, unsigned long base, unsigned int prec, unsigned int width, unsigned int flags)
{
   136f0:	b530      	push	{r4, r5, lr}
   136f2:	b097      	sub	sp, #92	; 0x5c
   136f4:	4674      	mov	r4, lr
   136f6:	900b      	str	r0, [sp, #44]	; 0x2c
   136f8:	910a      	str	r1, [sp, #40]	; 0x28
   136fa:	9209      	str	r2, [sp, #36]	; 0x24
   136fc:	9308      	str	r3, [sp, #32]
   136fe:	4623      	mov	r3, r4
   13700:	4619      	mov	r1, r3
   13702:	4833      	ldr	r0, [pc, #204]	; (137d0 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0xe0>)
   13704:	f7ff fd16 	bl	13134 <__cyg_profile_func_enter>
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
   13708:	2300      	movs	r3, #0
   1370a:	9315      	str	r3, [sp, #84]	; 0x54

  // no hash for 0 values
  if (!value) {
   1370c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   1370e:	2b00      	cmp	r3, #0
   13710:	d103      	bne.n	1371a <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x2a>
    flags &= ~FLAGS_HASH;
   13712:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   13714:	f023 0310 	bic.w	r3, r3, #16
   13718:	931f      	str	r3, [sp, #124]	; 0x7c
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
   1371a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   1371c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
   13720:	2b00      	cmp	r3, #0
   13722:	d002      	beq.n	1372a <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x3a>
   13724:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   13726:	2b00      	cmp	r3, #0
   13728:	d033      	beq.n	13792 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0xa2>
    do {
      const char digit = (char)(value % base);
   1372a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   1372c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
   1372e:	fbb3 f2f2 	udiv	r2, r3, r2
   13732:	991c      	ldr	r1, [sp, #112]	; 0x70
   13734:	fb01 f202 	mul.w	r2, r1, r2
   13738:	1a9b      	subs	r3, r3, r2
   1373a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
   1373e:	f89d 3053 	ldrb.w	r3, [sp, #83]	; 0x53
   13742:	2b09      	cmp	r3, #9
   13744:	d804      	bhi.n	13750 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x60>
   13746:	f89d 3053 	ldrb.w	r3, [sp, #83]	; 0x53
   1374a:	3330      	adds	r3, #48	; 0x30
   1374c:	b2da      	uxtb	r2, r3
   1374e:	e00d      	b.n	1376c <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x7c>
   13750:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   13752:	f003 0320 	and.w	r3, r3, #32
   13756:	2b00      	cmp	r3, #0
   13758:	d001      	beq.n	1375e <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x6e>
   1375a:	2241      	movs	r2, #65	; 0x41
   1375c:	e000      	b.n	13760 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x70>
   1375e:	2261      	movs	r2, #97	; 0x61
   13760:	f89d 3053 	ldrb.w	r3, [sp, #83]	; 0x53
   13764:	4413      	add	r3, r2
   13766:	b2db      	uxtb	r3, r3
   13768:	3b0a      	subs	r3, #10
   1376a:	b2da      	uxtb	r2, r3
   1376c:	9b15      	ldr	r3, [sp, #84]	; 0x54
   1376e:	1c59      	adds	r1, r3, #1
   13770:	9115      	str	r1, [sp, #84]	; 0x54
   13772:	a916      	add	r1, sp, #88	; 0x58
   13774:	440b      	add	r3, r1
   13776:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
   1377a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   1377c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
   1377e:	fbb2 f3f3 	udiv	r3, r2, r3
   13782:	931a      	str	r3, [sp, #104]	; 0x68
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
   13784:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   13786:	2b00      	cmp	r3, #0
   13788:	d003      	beq.n	13792 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0xa2>
   1378a:	9b15      	ldr	r3, [sp, #84]	; 0x54
   1378c:	2b1f      	cmp	r3, #31
   1378e:	d800      	bhi.n	13792 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0xa2>
    do {
   13790:	e7cb      	b.n	1372a <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x3a>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
   13792:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   13794:	9306      	str	r3, [sp, #24]
   13796:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   13798:	9305      	str	r3, [sp, #20]
   1379a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   1379c:	9304      	str	r3, [sp, #16]
   1379e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
   137a0:	9303      	str	r3, [sp, #12]
   137a2:	f89d 306c 	ldrb.w	r3, [sp, #108]	; 0x6c
   137a6:	9302      	str	r3, [sp, #8]
   137a8:	9b15      	ldr	r3, [sp, #84]	; 0x54
   137aa:	9301      	str	r3, [sp, #4]
   137ac:	ab0c      	add	r3, sp, #48	; 0x30
   137ae:	9300      	str	r3, [sp, #0]
   137b0:	9b08      	ldr	r3, [sp, #32]
   137b2:	9a09      	ldr	r2, [sp, #36]	; 0x24
   137b4:	990a      	ldr	r1, [sp, #40]	; 0x28
   137b6:	980b      	ldr	r0, [sp, #44]	; 0x2c
   137b8:	f7ff fe6c 	bl	13494 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)>
   137bc:	4605      	mov	r5, r0
   137be:	4623      	mov	r3, r4
   137c0:	4619      	mov	r1, r3
   137c2:	4803      	ldr	r0, [pc, #12]	; (137d0 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0xe0>)
   137c4:	f7ff fcca 	bl	1315c <__cyg_profile_func_exit>
   137c8:	462b      	mov	r3, r5
}
   137ca:	4618      	mov	r0, r3
   137cc:	b017      	add	sp, #92	; 0x5c
   137ce:	bd30      	pop	{r4, r5, pc}
   137d0:	000136f1 	.word	0x000136f1

000137d4 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)>:


// internal itoa for 'long long' type
#if defined(PRINTF_SUPPORT_LONG_LONG)
static size_t _ntoa_long_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long long value, bool negative, unsigned long long base, unsigned int prec, unsigned int width, unsigned int flags)
{
   137d4:	b530      	push	{r4, r5, lr}
   137d6:	b097      	sub	sp, #92	; 0x5c
   137d8:	4675      	mov	r5, lr
   137da:	900b      	str	r0, [sp, #44]	; 0x2c
   137dc:	910a      	str	r1, [sp, #40]	; 0x28
   137de:	9209      	str	r2, [sp, #36]	; 0x24
   137e0:	9308      	str	r3, [sp, #32]
   137e2:	462b      	mov	r3, r5
   137e4:	4619      	mov	r1, r3
   137e6:	4837      	ldr	r0, [pc, #220]	; (138c4 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0xf0>)
   137e8:	f7ff fca4 	bl	13134 <__cyg_profile_func_enter>
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
   137ec:	2300      	movs	r3, #0
   137ee:	9315      	str	r3, [sp, #84]	; 0x54

  // no hash for 0 values
  if (!value) {
   137f0:	e9dd 341a 	ldrd	r3, r4, [sp, #104]	; 0x68
   137f4:	4323      	orrs	r3, r4
   137f6:	d103      	bne.n	13800 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0x2c>
    flags &= ~FLAGS_HASH;
   137f8:	9b22      	ldr	r3, [sp, #136]	; 0x88
   137fa:	f023 0310 	bic.w	r3, r3, #16
   137fe:	9322      	str	r3, [sp, #136]	; 0x88
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
   13800:	9b22      	ldr	r3, [sp, #136]	; 0x88
   13802:	f403 6380 	and.w	r3, r3, #1024	; 0x400
   13806:	2b00      	cmp	r3, #0
   13808:	d003      	beq.n	13812 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0x3e>
   1380a:	e9dd 341a 	ldrd	r3, r4, [sp, #104]	; 0x68
   1380e:	4323      	orrs	r3, r4
   13810:	d039      	beq.n	13886 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0xb2>
    do {
      const char digit = (char)(value % base);
   13812:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
   13816:	e9dd 231e 	ldrd	r2, r3, [sp, #120]	; 0x78
   1381a:	f003 fceb 	bl	171f4 <__aeabi_uldivmod>
   1381e:	461c      	mov	r4, r3
   13820:	4613      	mov	r3, r2
   13822:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
   13826:	f89d 3053 	ldrb.w	r3, [sp, #83]	; 0x53
   1382a:	2b09      	cmp	r3, #9
   1382c:	d804      	bhi.n	13838 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0x64>
   1382e:	f89d 3053 	ldrb.w	r3, [sp, #83]	; 0x53
   13832:	3330      	adds	r3, #48	; 0x30
   13834:	b2da      	uxtb	r2, r3
   13836:	e00d      	b.n	13854 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0x80>
   13838:	9b22      	ldr	r3, [sp, #136]	; 0x88
   1383a:	f003 0320 	and.w	r3, r3, #32
   1383e:	2b00      	cmp	r3, #0
   13840:	d001      	beq.n	13846 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0x72>
   13842:	2241      	movs	r2, #65	; 0x41
   13844:	e000      	b.n	13848 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0x74>
   13846:	2261      	movs	r2, #97	; 0x61
   13848:	f89d 3053 	ldrb.w	r3, [sp, #83]	; 0x53
   1384c:	4413      	add	r3, r2
   1384e:	b2db      	uxtb	r3, r3
   13850:	3b0a      	subs	r3, #10
   13852:	b2da      	uxtb	r2, r3
   13854:	9b15      	ldr	r3, [sp, #84]	; 0x54
   13856:	1c59      	adds	r1, r3, #1
   13858:	9115      	str	r1, [sp, #84]	; 0x54
   1385a:	a916      	add	r1, sp, #88	; 0x58
   1385c:	440b      	add	r3, r1
   1385e:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
   13862:	e9dd 231e 	ldrd	r2, r3, [sp, #120]	; 0x78
   13866:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
   1386a:	f003 fcc3 	bl	171f4 <__aeabi_uldivmod>
   1386e:	4603      	mov	r3, r0
   13870:	460c      	mov	r4, r1
   13872:	e9cd 341a 	strd	r3, r4, [sp, #104]	; 0x68
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
   13876:	e9dd 341a 	ldrd	r3, r4, [sp, #104]	; 0x68
   1387a:	4323      	orrs	r3, r4
   1387c:	d003      	beq.n	13886 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0xb2>
   1387e:	9b15      	ldr	r3, [sp, #84]	; 0x54
   13880:	2b1f      	cmp	r3, #31
   13882:	d800      	bhi.n	13886 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0xb2>
    do {
   13884:	e7c5      	b.n	13812 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0x3e>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
   13886:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   13888:	9a22      	ldr	r2, [sp, #136]	; 0x88
   1388a:	9206      	str	r2, [sp, #24]
   1388c:	9a21      	ldr	r2, [sp, #132]	; 0x84
   1388e:	9205      	str	r2, [sp, #20]
   13890:	9a20      	ldr	r2, [sp, #128]	; 0x80
   13892:	9204      	str	r2, [sp, #16]
   13894:	9303      	str	r3, [sp, #12]
   13896:	f89d 3070 	ldrb.w	r3, [sp, #112]	; 0x70
   1389a:	9302      	str	r3, [sp, #8]
   1389c:	9b15      	ldr	r3, [sp, #84]	; 0x54
   1389e:	9301      	str	r3, [sp, #4]
   138a0:	ab0c      	add	r3, sp, #48	; 0x30
   138a2:	9300      	str	r3, [sp, #0]
   138a4:	9b08      	ldr	r3, [sp, #32]
   138a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
   138a8:	990a      	ldr	r1, [sp, #40]	; 0x28
   138aa:	980b      	ldr	r0, [sp, #44]	; 0x2c
   138ac:	f7ff fdf2 	bl	13494 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)>
   138b0:	4604      	mov	r4, r0
   138b2:	462b      	mov	r3, r5
   138b4:	4619      	mov	r1, r3
   138b6:	4803      	ldr	r0, [pc, #12]	; (138c4 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0xf0>)
   138b8:	f7ff fc50 	bl	1315c <__cyg_profile_func_exit>
   138bc:	4623      	mov	r3, r4
}
   138be:	4618      	mov	r0, r3
   138c0:	b017      	add	sp, #92	; 0x5c
   138c2:	bd30      	pop	{r4, r5, pc}
   138c4:	000137d5 	.word	0x000137d5

000138c8 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)>:
#endif  // PRINTF_SUPPORT_LONG_LONG


#if defined(PRINTF_SUPPORT_FLOAT)
static size_t _ftoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value_param, unsigned int prec, unsigned int width, unsigned int flags)
{
   138c8:	b530      	push	{r4, r5, lr}
   138ca:	b09b      	sub	sp, #108	; 0x6c
   138cc:	4675      	mov	r5, lr
   138ce:	9005      	str	r0, [sp, #20]
   138d0:	9104      	str	r1, [sp, #16]
   138d2:	9203      	str	r2, [sp, #12]
   138d4:	9302      	str	r3, [sp, #8]
   138d6:	ed8d 0b00 	vstr	d0, [sp]
   138da:	462b      	mov	r3, r5
   138dc:	4619      	mov	r1, r3
   138de:	48b7      	ldr	r0, [pc, #732]	; (13bbc <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x2f4>)
   138e0:	f7ff fc28 	bl	13134 <__cyg_profile_func_enter>
  const size_t start_idx = idx;
   138e4:	9b03      	ldr	r3, [sp, #12]
   138e6:	9311      	str	r3, [sp, #68]	; 0x44

  float value = static_cast<float>(value_param);
   138e8:	e9dd 0100 	ldrd	r0, r1, [sp]
   138ec:	f003 fc32 	bl	17154 <__aeabi_d2f>
   138f0:	4603      	mov	r3, r0
   138f2:	9319      	str	r3, [sp, #100]	; 0x64

  char buf[PRINTF_FTOA_BUFFER_SIZE];
  size_t len  = 0U;
   138f4:	2300      	movs	r3, #0
   138f6:	9318      	str	r3, [sp, #96]	; 0x60
  float diff = 0.0;
   138f8:	f04f 0300 	mov.w	r3, #0
   138fc:	9310      	str	r3, [sp, #64]	; 0x40

  // if input is larger than thres_max, revert to exponential
  const float thres_max = (float)0x7FFFFFFF;
   138fe:	f04f 439e 	mov.w	r3, #1325400064	; 0x4f000000
   13902:	930f      	str	r3, [sp, #60]	; 0x3c

  // powers of 10
  static const float pow10[] = { 1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000 };

  // test for negative
  bool negative = false;
   13904:	2300      	movs	r3, #0
   13906:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
  if (value < 0) {
   1390a:	eddd 7a19 	vldr	s15, [sp, #100]	; 0x64
   1390e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   13912:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   13916:	d50a      	bpl.n	1392e <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x66>
    negative = true;
   13918:	2301      	movs	r3, #1
   1391a:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
    value = 0 - value;
   1391e:	ed9f 7aa8 	vldr	s14, [pc, #672]	; 13bc0 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x2f8>
   13922:	eddd 7a19 	vldr	s15, [sp, #100]	; 0x64
   13926:	ee77 7a67 	vsub.f32	s15, s14, s15
   1392a:	edcd 7a19 	vstr	s15, [sp, #100]	; 0x64
  }

  // set default precision to 6, if not set explicitly
  if (!(flags & FLAGS_PRECISION)) {
   1392e:	9b20      	ldr	r3, [sp, #128]	; 0x80
   13930:	f403 6380 	and.w	r3, r3, #1024	; 0x400
   13934:	2b00      	cmp	r3, #0
   13936:	d101      	bne.n	1393c <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x74>
    prec = 6U;
   13938:	2306      	movs	r3, #6
   1393a:	931e      	str	r3, [sp, #120]	; 0x78
  }
  // limit precision to 9, cause a prec >= 10 can lead to overflow errors
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
   1393c:	9b18      	ldr	r3, [sp, #96]	; 0x60
   1393e:	2b1f      	cmp	r3, #31
   13940:	d80e      	bhi.n	13960 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x98>
   13942:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   13944:	2b09      	cmp	r3, #9
   13946:	d90b      	bls.n	13960 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x98>
    buf[len++] = '0';
   13948:	9b18      	ldr	r3, [sp, #96]	; 0x60
   1394a:	1c5a      	adds	r2, r3, #1
   1394c:	9218      	str	r2, [sp, #96]	; 0x60
   1394e:	aa1a      	add	r2, sp, #104	; 0x68
   13950:	4413      	add	r3, r2
   13952:	2230      	movs	r2, #48	; 0x30
   13954:	f803 2c50 	strb.w	r2, [r3, #-80]
    prec--;
   13958:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   1395a:	3b01      	subs	r3, #1
   1395c:	931e      	str	r3, [sp, #120]	; 0x78
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
   1395e:	e7ed      	b.n	1393c <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x74>
  }

  int whole = (int)value;
   13960:	eddd 7a19 	vldr	s15, [sp, #100]	; 0x64
   13964:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   13968:	ee17 3a90 	vmov	r3, s15
   1396c:	9316      	str	r3, [sp, #88]	; 0x58
  float tmp = (value - whole) * pow10[prec];
   1396e:	9b16      	ldr	r3, [sp, #88]	; 0x58
   13970:	ee07 3a90 	vmov	s15, r3
   13974:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   13978:	ed9d 7a19 	vldr	s14, [sp, #100]	; 0x64
   1397c:	ee37 7a67 	vsub.f32	s14, s14, s15
   13980:	4a90      	ldr	r2, [pc, #576]	; (13bc4 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x2fc>)
   13982:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   13984:	009b      	lsls	r3, r3, #2
   13986:	4413      	add	r3, r2
   13988:	edd3 7a00 	vldr	s15, [r3]
   1398c:	ee67 7a27 	vmul.f32	s15, s14, s15
   13990:	edcd 7a0e 	vstr	s15, [sp, #56]	; 0x38
  unsigned long frac = (unsigned long)tmp;
   13994:	eddd 7a0e 	vldr	s15, [sp, #56]	; 0x38
   13998:	eefc 7ae7 	vcvt.u32.f32	s15, s15
   1399c:	ee17 3a90 	vmov	r3, s15
   139a0:	9315      	str	r3, [sp, #84]	; 0x54
  diff = tmp - frac;
   139a2:	9b15      	ldr	r3, [sp, #84]	; 0x54
   139a4:	ee07 3a90 	vmov	s15, r3
   139a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
   139ac:	ed9d 7a0e 	vldr	s14, [sp, #56]	; 0x38
   139b0:	ee77 7a67 	vsub.f32	s15, s14, s15
   139b4:	edcd 7a10 	vstr	s15, [sp, #64]	; 0x40

  if (diff > 0.5) {
   139b8:	eddd 7a10 	vldr	s15, [sp, #64]	; 0x40
   139bc:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
   139c0:	eef4 7ac7 	vcmpe.f32	s15, s14
   139c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   139c8:	dd18      	ble.n	139fc <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x134>
    ++frac;
   139ca:	9b15      	ldr	r3, [sp, #84]	; 0x54
   139cc:	3301      	adds	r3, #1
   139ce:	9315      	str	r3, [sp, #84]	; 0x54
    // handle rollover, e.g. case 0.99 with prec 1 is 1.0
    if (frac >= pow10[prec]) {
   139d0:	9b15      	ldr	r3, [sp, #84]	; 0x54
   139d2:	ee07 3a90 	vmov	s15, r3
   139d6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
   139da:	4a7a      	ldr	r2, [pc, #488]	; (13bc4 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x2fc>)
   139dc:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   139de:	009b      	lsls	r3, r3, #2
   139e0:	4413      	add	r3, r2
   139e2:	edd3 7a00 	vldr	s15, [r3]
   139e6:	eeb4 7ae7 	vcmpe.f32	s14, s15
   139ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   139ee:	db19      	blt.n	13a24 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x15c>
      frac = 0;
   139f0:	2300      	movs	r3, #0
   139f2:	9315      	str	r3, [sp, #84]	; 0x54
      ++whole;
   139f4:	9b16      	ldr	r3, [sp, #88]	; 0x58
   139f6:	3301      	adds	r3, #1
   139f8:	9316      	str	r3, [sp, #88]	; 0x58
   139fa:	e013      	b.n	13a24 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x15c>
    }
  }
  else if ((diff == 0.5) && ((frac == 0U) || (frac & 1U))) {
   139fc:	eddd 7a10 	vldr	s15, [sp, #64]	; 0x40
   13a00:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
   13a04:	eef4 7a47 	vcmp.f32	s15, s14
   13a08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   13a0c:	d10a      	bne.n	13a24 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x15c>
   13a0e:	9b15      	ldr	r3, [sp, #84]	; 0x54
   13a10:	2b00      	cmp	r3, #0
   13a12:	d004      	beq.n	13a1e <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x156>
   13a14:	9b15      	ldr	r3, [sp, #84]	; 0x54
   13a16:	f003 0301 	and.w	r3, r3, #1
   13a1a:	2b00      	cmp	r3, #0
   13a1c:	d002      	beq.n	13a24 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x15c>
    // if halfway, round up if odd, OR if last digit is 0
    ++frac;
   13a1e:	9b15      	ldr	r3, [sp, #84]	; 0x54
   13a20:	3301      	adds	r3, #1
   13a22:	9315      	str	r3, [sp, #84]	; 0x54
  }

  // TBD: for very large numbers switch back to native sprintf for exponentials. Anyone want to write code to replace this?
  // Normal printf behavior is to print EVERY whole number digit which can be 100s of characters overflowing your buffers == bad
  if (value > thres_max) {
   13a24:	eddd 7a19 	vldr	s15, [sp, #100]	; 0x64
   13a28:	ed9f 7a67 	vldr	s14, [pc, #412]	; 13bc8 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x300>
   13a2c:	eef4 7ac7 	vcmpe.f32	s15, s14
   13a30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   13a34:	dd01      	ble.n	13a3a <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x172>
    return 0U;
   13a36:	2400      	movs	r4, #0
   13a38:	e156      	b.n	13ce8 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x420>
  }

  if (prec == 0U) {
   13a3a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   13a3c:	2b00      	cmp	r3, #0
   13a3e:	d129      	bne.n	13a94 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x1cc>
    diff = value - (float)whole;
   13a40:	9b16      	ldr	r3, [sp, #88]	; 0x58
   13a42:	ee07 3a90 	vmov	s15, r3
   13a46:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   13a4a:	ed9d 7a19 	vldr	s14, [sp, #100]	; 0x64
   13a4e:	ee77 7a67 	vsub.f32	s15, s14, s15
   13a52:	edcd 7a10 	vstr	s15, [sp, #64]	; 0x40
    if (diff > 0.5) {
   13a56:	eddd 7a10 	vldr	s15, [sp, #64]	; 0x40
   13a5a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
   13a5e:	eef4 7ac7 	vcmpe.f32	s15, s14
   13a62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   13a66:	dd03      	ble.n	13a70 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x1a8>
      // greater than 0.5, round up, e.g. 1.6 -> 2
      ++whole;
   13a68:	9b16      	ldr	r3, [sp, #88]	; 0x58
   13a6a:	3301      	adds	r3, #1
   13a6c:	9316      	str	r3, [sp, #88]	; 0x58
   13a6e:	e05f      	b.n	13b30 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x268>
    }
    else if ((diff == 0.5) && (whole & 1)) {
   13a70:	eddd 7a10 	vldr	s15, [sp, #64]	; 0x40
   13a74:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
   13a78:	eef4 7a47 	vcmp.f32	s15, s14
   13a7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   13a80:	d156      	bne.n	13b30 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x268>
   13a82:	9b16      	ldr	r3, [sp, #88]	; 0x58
   13a84:	f003 0301 	and.w	r3, r3, #1
   13a88:	2b00      	cmp	r3, #0
   13a8a:	d051      	beq.n	13b30 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x268>
      // exactly 0.5 and ODD, then round up
      // 1.5 -> 2, but 2.5 -> 2
      ++whole;
   13a8c:	9b16      	ldr	r3, [sp, #88]	; 0x58
   13a8e:	3301      	adds	r3, #1
   13a90:	9316      	str	r3, [sp, #88]	; 0x58
   13a92:	e04d      	b.n	13b30 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x268>
    }
  }
  else {
    unsigned int count = prec;
   13a94:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   13a96:	9314      	str	r3, [sp, #80]	; 0x50
    // now do fractional part, as an unsigned number
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
   13a98:	9b18      	ldr	r3, [sp, #96]	; 0x60
   13a9a:	2b1f      	cmp	r3, #31
   13a9c:	d827      	bhi.n	13aee <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x226>
      --count;
   13a9e:	9b14      	ldr	r3, [sp, #80]	; 0x50
   13aa0:	3b01      	subs	r3, #1
   13aa2:	9314      	str	r3, [sp, #80]	; 0x50
      buf[len++] = (char)(48U + (frac % 10U));
   13aa4:	9915      	ldr	r1, [sp, #84]	; 0x54
   13aa6:	4b49      	ldr	r3, [pc, #292]	; (13bcc <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x304>)
   13aa8:	fba3 2301 	umull	r2, r3, r3, r1
   13aac:	08da      	lsrs	r2, r3, #3
   13aae:	4613      	mov	r3, r2
   13ab0:	009b      	lsls	r3, r3, #2
   13ab2:	4413      	add	r3, r2
   13ab4:	005b      	lsls	r3, r3, #1
   13ab6:	1aca      	subs	r2, r1, r3
   13ab8:	b2d3      	uxtb	r3, r2
   13aba:	3330      	adds	r3, #48	; 0x30
   13abc:	b2d9      	uxtb	r1, r3
   13abe:	9b18      	ldr	r3, [sp, #96]	; 0x60
   13ac0:	1c5a      	adds	r2, r3, #1
   13ac2:	9218      	str	r2, [sp, #96]	; 0x60
   13ac4:	aa1a      	add	r2, sp, #104	; 0x68
   13ac6:	4413      	add	r3, r2
   13ac8:	460a      	mov	r2, r1
   13aca:	f803 2c50 	strb.w	r2, [r3, #-80]
      if (!(frac /= 10U)) {
   13ace:	9b15      	ldr	r3, [sp, #84]	; 0x54
   13ad0:	4a3e      	ldr	r2, [pc, #248]	; (13bcc <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x304>)
   13ad2:	fba2 2303 	umull	r2, r3, r2, r3
   13ad6:	08db      	lsrs	r3, r3, #3
   13ad8:	9315      	str	r3, [sp, #84]	; 0x54
   13ada:	9b15      	ldr	r3, [sp, #84]	; 0x54
   13adc:	2b00      	cmp	r3, #0
   13ade:	bf0c      	ite	eq
   13ae0:	2301      	moveq	r3, #1
   13ae2:	2300      	movne	r3, #0
   13ae4:	b2db      	uxtb	r3, r3
   13ae6:	2b00      	cmp	r3, #0
   13ae8:	d100      	bne.n	13aec <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x224>
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
   13aea:	e7d5      	b.n	13a98 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x1d0>
        break;
   13aec:	bf00      	nop
      }
    }
    // add extra 0s
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
   13aee:	9b18      	ldr	r3, [sp, #96]	; 0x60
   13af0:	2b1f      	cmp	r3, #31
   13af2:	d806      	bhi.n	13b02 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x23a>
   13af4:	9b14      	ldr	r3, [sp, #80]	; 0x50
   13af6:	1e5a      	subs	r2, r3, #1
   13af8:	9214      	str	r2, [sp, #80]	; 0x50
   13afa:	2b00      	cmp	r3, #0
   13afc:	d001      	beq.n	13b02 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x23a>
   13afe:	2301      	movs	r3, #1
   13b00:	e000      	b.n	13b04 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x23c>
   13b02:	2300      	movs	r3, #0
   13b04:	2b00      	cmp	r3, #0
   13b06:	d008      	beq.n	13b1a <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x252>
      buf[len++] = '0';
   13b08:	9b18      	ldr	r3, [sp, #96]	; 0x60
   13b0a:	1c5a      	adds	r2, r3, #1
   13b0c:	9218      	str	r2, [sp, #96]	; 0x60
   13b0e:	aa1a      	add	r2, sp, #104	; 0x68
   13b10:	4413      	add	r3, r2
   13b12:	2230      	movs	r2, #48	; 0x30
   13b14:	f803 2c50 	strb.w	r2, [r3, #-80]
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
   13b18:	e7e9      	b.n	13aee <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x226>
    }
    if (len < PRINTF_FTOA_BUFFER_SIZE) {
   13b1a:	9b18      	ldr	r3, [sp, #96]	; 0x60
   13b1c:	2b1f      	cmp	r3, #31
   13b1e:	d807      	bhi.n	13b30 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x268>
      // add decimal
      buf[len++] = '.';
   13b20:	9b18      	ldr	r3, [sp, #96]	; 0x60
   13b22:	1c5a      	adds	r2, r3, #1
   13b24:	9218      	str	r2, [sp, #96]	; 0x60
   13b26:	aa1a      	add	r2, sp, #104	; 0x68
   13b28:	4413      	add	r3, r2
   13b2a:	222e      	movs	r2, #46	; 0x2e
   13b2c:	f803 2c50 	strb.w	r2, [r3, #-80]
    }
  }

  // do whole part, number is reversed
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
   13b30:	9b18      	ldr	r3, [sp, #96]	; 0x60
   13b32:	2b1f      	cmp	r3, #31
   13b34:	d828      	bhi.n	13b88 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x2c0>
    buf[len++] = (char)(48 + (whole % 10));
   13b36:	9a16      	ldr	r2, [sp, #88]	; 0x58
   13b38:	4b25      	ldr	r3, [pc, #148]	; (13bd0 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x308>)
   13b3a:	fb83 1302 	smull	r1, r3, r3, r2
   13b3e:	1099      	asrs	r1, r3, #2
   13b40:	17d3      	asrs	r3, r2, #31
   13b42:	1ac9      	subs	r1, r1, r3
   13b44:	460b      	mov	r3, r1
   13b46:	009b      	lsls	r3, r3, #2
   13b48:	440b      	add	r3, r1
   13b4a:	005b      	lsls	r3, r3, #1
   13b4c:	1ad1      	subs	r1, r2, r3
   13b4e:	b2cb      	uxtb	r3, r1
   13b50:	3330      	adds	r3, #48	; 0x30
   13b52:	b2d9      	uxtb	r1, r3
   13b54:	9b18      	ldr	r3, [sp, #96]	; 0x60
   13b56:	1c5a      	adds	r2, r3, #1
   13b58:	9218      	str	r2, [sp, #96]	; 0x60
   13b5a:	aa1a      	add	r2, sp, #104	; 0x68
   13b5c:	4413      	add	r3, r2
   13b5e:	460a      	mov	r2, r1
   13b60:	f803 2c50 	strb.w	r2, [r3, #-80]
    if (!(whole /= 10)) {
   13b64:	9b16      	ldr	r3, [sp, #88]	; 0x58
   13b66:	4a1a      	ldr	r2, [pc, #104]	; (13bd0 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x308>)
   13b68:	fb82 1203 	smull	r1, r2, r2, r3
   13b6c:	1092      	asrs	r2, r2, #2
   13b6e:	17db      	asrs	r3, r3, #31
   13b70:	1ad3      	subs	r3, r2, r3
   13b72:	9316      	str	r3, [sp, #88]	; 0x58
   13b74:	9b16      	ldr	r3, [sp, #88]	; 0x58
   13b76:	2b00      	cmp	r3, #0
   13b78:	bf0c      	ite	eq
   13b7a:	2301      	moveq	r3, #1
   13b7c:	2300      	movne	r3, #0
   13b7e:	b2db      	uxtb	r3, r3
   13b80:	2b00      	cmp	r3, #0
   13b82:	d100      	bne.n	13b86 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x2be>
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
   13b84:	e7d4      	b.n	13b30 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x268>
      break;
   13b86:	bf00      	nop
    }
  }

  // pad leading zeros
  while (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
   13b88:	9b20      	ldr	r3, [sp, #128]	; 0x80
   13b8a:	f003 0302 	and.w	r3, r3, #2
   13b8e:	2b00      	cmp	r3, #0
   13b90:	d120      	bne.n	13bd4 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x30c>
   13b92:	9b20      	ldr	r3, [sp, #128]	; 0x80
   13b94:	f003 0301 	and.w	r3, r3, #1
   13b98:	2b00      	cmp	r3, #0
   13b9a:	d01b      	beq.n	13bd4 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x30c>
   13b9c:	9a18      	ldr	r2, [sp, #96]	; 0x60
   13b9e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   13ba0:	429a      	cmp	r2, r3
   13ba2:	d217      	bcs.n	13bd4 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x30c>
   13ba4:	9b18      	ldr	r3, [sp, #96]	; 0x60
   13ba6:	2b1f      	cmp	r3, #31
   13ba8:	d814      	bhi.n	13bd4 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x30c>
    buf[len++] = '0';
   13baa:	9b18      	ldr	r3, [sp, #96]	; 0x60
   13bac:	1c5a      	adds	r2, r3, #1
   13bae:	9218      	str	r2, [sp, #96]	; 0x60
   13bb0:	aa1a      	add	r2, sp, #104	; 0x68
   13bb2:	4413      	add	r3, r2
   13bb4:	2230      	movs	r2, #48	; 0x30
   13bb6:	f803 2c50 	strb.w	r2, [r3, #-80]
  while (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
   13bba:	e7e5      	b.n	13b88 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x2c0>
   13bbc:	000138c9 	.word	0x000138c9
   13bc0:	00000000 	.word	0x00000000
   13bc4:	00018380 	.word	0x00018380
   13bc8:	4f000000 	.word	0x4f000000
   13bcc:	cccccccd 	.word	0xcccccccd
   13bd0:	66666667 	.word	0x66666667
  }

  // handle sign
  if ((len == width) && (negative || (flags & FLAGS_PLUS) || (flags & FLAGS_SPACE))) {
   13bd4:	9a18      	ldr	r2, [sp, #96]	; 0x60
   13bd6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   13bd8:	429a      	cmp	r2, r3
   13bda:	d110      	bne.n	13bfe <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x336>
   13bdc:	f89d 305f 	ldrb.w	r3, [sp, #95]	; 0x5f
   13be0:	2b00      	cmp	r3, #0
   13be2:	d109      	bne.n	13bf8 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x330>
   13be4:	9b20      	ldr	r3, [sp, #128]	; 0x80
   13be6:	f003 0304 	and.w	r3, r3, #4
   13bea:	2b00      	cmp	r3, #0
   13bec:	d104      	bne.n	13bf8 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x330>
   13bee:	9b20      	ldr	r3, [sp, #128]	; 0x80
   13bf0:	f003 0308 	and.w	r3, r3, #8
   13bf4:	2b00      	cmp	r3, #0
   13bf6:	d002      	beq.n	13bfe <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x336>
    len--;
   13bf8:	9b18      	ldr	r3, [sp, #96]	; 0x60
   13bfa:	3b01      	subs	r3, #1
   13bfc:	9318      	str	r3, [sp, #96]	; 0x60
  }
  if (len < PRINTF_FTOA_BUFFER_SIZE) {
   13bfe:	9b18      	ldr	r3, [sp, #96]	; 0x60
   13c00:	2b1f      	cmp	r3, #31
   13c02:	d827      	bhi.n	13c54 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x38c>
    if (negative) {
   13c04:	f89d 305f 	ldrb.w	r3, [sp, #95]	; 0x5f
   13c08:	2b00      	cmp	r3, #0
   13c0a:	d008      	beq.n	13c1e <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x356>
      buf[len++] = '-';
   13c0c:	9b18      	ldr	r3, [sp, #96]	; 0x60
   13c0e:	1c5a      	adds	r2, r3, #1
   13c10:	9218      	str	r2, [sp, #96]	; 0x60
   13c12:	aa1a      	add	r2, sp, #104	; 0x68
   13c14:	4413      	add	r3, r2
   13c16:	222d      	movs	r2, #45	; 0x2d
   13c18:	f803 2c50 	strb.w	r2, [r3, #-80]
   13c1c:	e01a      	b.n	13c54 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x38c>
    }
    else if (flags & FLAGS_PLUS) {
   13c1e:	9b20      	ldr	r3, [sp, #128]	; 0x80
   13c20:	f003 0304 	and.w	r3, r3, #4
   13c24:	2b00      	cmp	r3, #0
   13c26:	d008      	beq.n	13c3a <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x372>
      buf[len++] = '+';  // ignore the space if the '+' exists
   13c28:	9b18      	ldr	r3, [sp, #96]	; 0x60
   13c2a:	1c5a      	adds	r2, r3, #1
   13c2c:	9218      	str	r2, [sp, #96]	; 0x60
   13c2e:	aa1a      	add	r2, sp, #104	; 0x68
   13c30:	4413      	add	r3, r2
   13c32:	222b      	movs	r2, #43	; 0x2b
   13c34:	f803 2c50 	strb.w	r2, [r3, #-80]
   13c38:	e00c      	b.n	13c54 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x38c>
    }
    else if (flags & FLAGS_SPACE) {
   13c3a:	9b20      	ldr	r3, [sp, #128]	; 0x80
   13c3c:	f003 0308 	and.w	r3, r3, #8
   13c40:	2b00      	cmp	r3, #0
   13c42:	d007      	beq.n	13c54 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x38c>
      buf[len++] = ' ';
   13c44:	9b18      	ldr	r3, [sp, #96]	; 0x60
   13c46:	1c5a      	adds	r2, r3, #1
   13c48:	9218      	str	r2, [sp, #96]	; 0x60
   13c4a:	aa1a      	add	r2, sp, #104	; 0x68
   13c4c:	4413      	add	r3, r2
   13c4e:	2220      	movs	r2, #32
   13c50:	f803 2c50 	strb.w	r2, [r3, #-80]
    }
  }

  // pad spaces up to given width
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
   13c54:	9b20      	ldr	r3, [sp, #128]	; 0x80
   13c56:	f003 0302 	and.w	r3, r3, #2
   13c5a:	2b00      	cmp	r3, #0
   13c5c:	d116      	bne.n	13c8c <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x3c4>
   13c5e:	9b20      	ldr	r3, [sp, #128]	; 0x80
   13c60:	f003 0301 	and.w	r3, r3, #1
   13c64:	2b00      	cmp	r3, #0
   13c66:	d111      	bne.n	13c8c <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x3c4>
    for (size_t i = len; i < width; i++) {
   13c68:	9b18      	ldr	r3, [sp, #96]	; 0x60
   13c6a:	9313      	str	r3, [sp, #76]	; 0x4c
   13c6c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   13c6e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   13c70:	429a      	cmp	r2, r3
   13c72:	d20b      	bcs.n	13c8c <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x3c4>
      out(' ', buffer, idx++, maxlen);
   13c74:	9a03      	ldr	r2, [sp, #12]
   13c76:	1c53      	adds	r3, r2, #1
   13c78:	9303      	str	r3, [sp, #12]
   13c7a:	9c05      	ldr	r4, [sp, #20]
   13c7c:	9b02      	ldr	r3, [sp, #8]
   13c7e:	9904      	ldr	r1, [sp, #16]
   13c80:	2020      	movs	r0, #32
   13c82:	47a0      	blx	r4
    for (size_t i = len; i < width; i++) {
   13c84:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   13c86:	3301      	adds	r3, #1
   13c88:	9313      	str	r3, [sp, #76]	; 0x4c
   13c8a:	e7ef      	b.n	13c6c <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x3a4>
    }
  }

  // reverse string
  for (size_t i = 0U; i < len; i++) {
   13c8c:	2300      	movs	r3, #0
   13c8e:	9312      	str	r3, [sp, #72]	; 0x48
   13c90:	9a12      	ldr	r2, [sp, #72]	; 0x48
   13c92:	9b18      	ldr	r3, [sp, #96]	; 0x60
   13c94:	429a      	cmp	r2, r3
   13c96:	d212      	bcs.n	13cbe <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x3f6>
    out(buf[len - i - 1U], buffer, idx++, maxlen);
   13c98:	9a18      	ldr	r2, [sp, #96]	; 0x60
   13c9a:	9b12      	ldr	r3, [sp, #72]	; 0x48
   13c9c:	1ad3      	subs	r3, r2, r3
   13c9e:	3b01      	subs	r3, #1
   13ca0:	aa1a      	add	r2, sp, #104	; 0x68
   13ca2:	4413      	add	r3, r2
   13ca4:	f813 0c50 	ldrb.w	r0, [r3, #-80]
   13ca8:	9a03      	ldr	r2, [sp, #12]
   13caa:	1c53      	adds	r3, r2, #1
   13cac:	9303      	str	r3, [sp, #12]
   13cae:	9c05      	ldr	r4, [sp, #20]
   13cb0:	9b02      	ldr	r3, [sp, #8]
   13cb2:	9904      	ldr	r1, [sp, #16]
   13cb4:	47a0      	blx	r4
  for (size_t i = 0U; i < len; i++) {
   13cb6:	9b12      	ldr	r3, [sp, #72]	; 0x48
   13cb8:	3301      	adds	r3, #1
   13cba:	9312      	str	r3, [sp, #72]	; 0x48
   13cbc:	e7e8      	b.n	13c90 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x3c8>
  }

  // append pad spaces up to given width
  if (flags & FLAGS_LEFT) {
   13cbe:	9b20      	ldr	r3, [sp, #128]	; 0x80
   13cc0:	f003 0302 	and.w	r3, r3, #2
   13cc4:	2b00      	cmp	r3, #0
   13cc6:	d00e      	beq.n	13ce6 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x41e>
    while (idx - start_idx < width) {
   13cc8:	9a03      	ldr	r2, [sp, #12]
   13cca:	9b11      	ldr	r3, [sp, #68]	; 0x44
   13ccc:	1ad3      	subs	r3, r2, r3
   13cce:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   13cd0:	429a      	cmp	r2, r3
   13cd2:	d908      	bls.n	13ce6 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x41e>
      out(' ', buffer, idx++, maxlen);
   13cd4:	9a03      	ldr	r2, [sp, #12]
   13cd6:	1c53      	adds	r3, r2, #1
   13cd8:	9303      	str	r3, [sp, #12]
   13cda:	9c05      	ldr	r4, [sp, #20]
   13cdc:	9b02      	ldr	r3, [sp, #8]
   13cde:	9904      	ldr	r1, [sp, #16]
   13ce0:	2020      	movs	r0, #32
   13ce2:	47a0      	blx	r4
    while (idx - start_idx < width) {
   13ce4:	e7f0      	b.n	13cc8 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x400>
    }
  }

  return idx;
   13ce6:	9c03      	ldr	r4, [sp, #12]
   13ce8:	462b      	mov	r3, r5
   13cea:	4619      	mov	r1, r3
   13cec:	4803      	ldr	r0, [pc, #12]	; (13cfc <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x434>)
   13cee:	f7ff fa35 	bl	1315c <__cyg_profile_func_exit>
   13cf2:	4623      	mov	r3, r4
}
   13cf4:	4618      	mov	r0, r3
   13cf6:	b01b      	add	sp, #108	; 0x6c
   13cf8:	bd30      	pop	{r4, r5, pc}
   13cfa:	bf00      	nop
   13cfc:	000138c9 	.word	0x000138c9

00013d00 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)>:
#endif  // PRINTF_SUPPORT_FLOAT


// internal vsnprintf
static int _vsnprintf(out_fct_type out, char* buffer, const size_t maxlen, const char* format, va_list va)
{
   13d00:	b570      	push	{r4, r5, r6, lr}
   13d02:	b0a0      	sub	sp, #128	; 0x80
   13d04:	4676      	mov	r6, lr
   13d06:	900d      	str	r0, [sp, #52]	; 0x34
   13d08:	910c      	str	r1, [sp, #48]	; 0x30
   13d0a:	920b      	str	r2, [sp, #44]	; 0x2c
   13d0c:	930a      	str	r3, [sp, #40]	; 0x28
   13d0e:	4633      	mov	r3, r6
   13d10:	4619      	mov	r1, r3
   13d12:	48a7      	ldr	r0, [pc, #668]	; (13fb0 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2b0>)
   13d14:	f7ff fa0e 	bl	13134 <__cyg_profile_func_enter>
  unsigned int flags, width, precision, n;
  size_t idx = 0U;
   13d18:	2300      	movs	r3, #0
   13d1a:	931b      	str	r3, [sp, #108]	; 0x6c

  if (!buffer) {
   13d1c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   13d1e:	2b00      	cmp	r3, #0
   13d20:	d101      	bne.n	13d26 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x26>
    // use null output function
    out = _out_null;
   13d22:	4ba4      	ldr	r3, [pc, #656]	; (13fb4 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2b4>)
   13d24:	930d      	str	r3, [sp, #52]	; 0x34
  }

  while (*format)
   13d26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13d28:	781b      	ldrb	r3, [r3, #0]
   13d2a:	2b00      	cmp	r3, #0
   13d2c:	f000 8448 	beq.w	145c0 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8c0>
  {
    // format specifier?  %[flags][width][.precision][length]
    if (*format != '%') {
   13d30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13d32:	781b      	ldrb	r3, [r3, #0]
   13d34:	2b25      	cmp	r3, #37	; 0x25
   13d36:	d00d      	beq.n	13d54 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x54>
      // no
      out(*format, buffer, idx++, maxlen);
   13d38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13d3a:	7818      	ldrb	r0, [r3, #0]
   13d3c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   13d3e:	1c53      	adds	r3, r2, #1
   13d40:	931b      	str	r3, [sp, #108]	; 0x6c
   13d42:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   13d44:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   13d46:	990c      	ldr	r1, [sp, #48]	; 0x30
   13d48:	47a0      	blx	r4
      format++;
   13d4a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13d4c:	3301      	adds	r3, #1
   13d4e:	930a      	str	r3, [sp, #40]	; 0x28
      continue;
   13d50:	f000 bc34 	b.w	145bc <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8bc>
    }
    else {
      // yes, evaluate it
      format++;
   13d54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13d56:	3301      	adds	r3, #1
   13d58:	930a      	str	r3, [sp, #40]	; 0x28
    }

    // evaluate flags
    flags = 0U;
   13d5a:	2300      	movs	r3, #0
   13d5c:	931f      	str	r3, [sp, #124]	; 0x7c
    do {
      switch (*format) {
   13d5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13d60:	781b      	ldrb	r3, [r3, #0]
   13d62:	3b20      	subs	r3, #32
   13d64:	2b10      	cmp	r3, #16
   13d66:	d857      	bhi.n	13e18 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x118>
   13d68:	a201      	add	r2, pc, #4	; (adr r2, 13d70 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x70>)
   13d6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   13d6e:	bf00      	nop
   13d70:	00013df1 	.word	0x00013df1
   13d74:	00013e19 	.word	0x00013e19
   13d78:	00013e19 	.word	0x00013e19
   13d7c:	00013e05 	.word	0x00013e05
   13d80:	00013e19 	.word	0x00013e19
   13d84:	00013e19 	.word	0x00013e19
   13d88:	00013e19 	.word	0x00013e19
   13d8c:	00013e19 	.word	0x00013e19
   13d90:	00013e19 	.word	0x00013e19
   13d94:	00013e19 	.word	0x00013e19
   13d98:	00013e19 	.word	0x00013e19
   13d9c:	00013ddd 	.word	0x00013ddd
   13da0:	00013e19 	.word	0x00013e19
   13da4:	00013dc9 	.word	0x00013dc9
   13da8:	00013e19 	.word	0x00013e19
   13dac:	00013e19 	.word	0x00013e19
   13db0:	00013db5 	.word	0x00013db5
        case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
   13db4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   13db6:	f043 0301 	orr.w	r3, r3, #1
   13dba:	931f      	str	r3, [sp, #124]	; 0x7c
   13dbc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13dbe:	3301      	adds	r3, #1
   13dc0:	930a      	str	r3, [sp, #40]	; 0x28
   13dc2:	2301      	movs	r3, #1
   13dc4:	931c      	str	r3, [sp, #112]	; 0x70
   13dc6:	e02a      	b.n	13e1e <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x11e>
        case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
   13dc8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   13dca:	f043 0302 	orr.w	r3, r3, #2
   13dce:	931f      	str	r3, [sp, #124]	; 0x7c
   13dd0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13dd2:	3301      	adds	r3, #1
   13dd4:	930a      	str	r3, [sp, #40]	; 0x28
   13dd6:	2301      	movs	r3, #1
   13dd8:	931c      	str	r3, [sp, #112]	; 0x70
   13dda:	e020      	b.n	13e1e <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x11e>
        case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
   13ddc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   13dde:	f043 0304 	orr.w	r3, r3, #4
   13de2:	931f      	str	r3, [sp, #124]	; 0x7c
   13de4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13de6:	3301      	adds	r3, #1
   13de8:	930a      	str	r3, [sp, #40]	; 0x28
   13dea:	2301      	movs	r3, #1
   13dec:	931c      	str	r3, [sp, #112]	; 0x70
   13dee:	e016      	b.n	13e1e <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x11e>
        case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
   13df0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   13df2:	f043 0308 	orr.w	r3, r3, #8
   13df6:	931f      	str	r3, [sp, #124]	; 0x7c
   13df8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13dfa:	3301      	adds	r3, #1
   13dfc:	930a      	str	r3, [sp, #40]	; 0x28
   13dfe:	2301      	movs	r3, #1
   13e00:	931c      	str	r3, [sp, #112]	; 0x70
   13e02:	e00c      	b.n	13e1e <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x11e>
        case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;
   13e04:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   13e06:	f043 0310 	orr.w	r3, r3, #16
   13e0a:	931f      	str	r3, [sp, #124]	; 0x7c
   13e0c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13e0e:	3301      	adds	r3, #1
   13e10:	930a      	str	r3, [sp, #40]	; 0x28
   13e12:	2301      	movs	r3, #1
   13e14:	931c      	str	r3, [sp, #112]	; 0x70
   13e16:	e002      	b.n	13e1e <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x11e>
        default :                                   n = 0U; break;
   13e18:	2300      	movs	r3, #0
   13e1a:	931c      	str	r3, [sp, #112]	; 0x70
   13e1c:	bf00      	nop
      }
    } while (n);
   13e1e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
   13e20:	2b00      	cmp	r3, #0
   13e22:	d000      	beq.n	13e26 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x126>
    do {
   13e24:	e79b      	b.n	13d5e <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x5e>

    // evaluate width field
    width = 0U;
   13e26:	2300      	movs	r3, #0
   13e28:	931e      	str	r3, [sp, #120]	; 0x78
    if (_is_digit(*format)) {
   13e2a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13e2c:	781b      	ldrb	r3, [r3, #0]
   13e2e:	4618      	mov	r0, r3
   13e30:	f7ff fade 	bl	133f0 <_is_digit(char)>
   13e34:	4603      	mov	r3, r0
   13e36:	2b00      	cmp	r3, #0
   13e38:	d005      	beq.n	13e46 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x146>
      width = _atoi(&format);
   13e3a:	ab0a      	add	r3, sp, #40	; 0x28
   13e3c:	4618      	mov	r0, r3
   13e3e:	f7ff faf9 	bl	13434 <_atoi(char const**)>
   13e42:	901e      	str	r0, [sp, #120]	; 0x78
   13e44:	e018      	b.n	13e78 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x178>
    }
    else if (*format == '*') {
   13e46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13e48:	781b      	ldrb	r3, [r3, #0]
   13e4a:	2b2a      	cmp	r3, #42	; 0x2a
   13e4c:	d114      	bne.n	13e78 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x178>
      const int w = va_arg(va, int);
   13e4e:	9b24      	ldr	r3, [sp, #144]	; 0x90
   13e50:	1d1a      	adds	r2, r3, #4
   13e52:	9224      	str	r2, [sp, #144]	; 0x90
   13e54:	681b      	ldr	r3, [r3, #0]
   13e56:	9316      	str	r3, [sp, #88]	; 0x58
      if (w < 0) {
   13e58:	9b16      	ldr	r3, [sp, #88]	; 0x58
   13e5a:	2b00      	cmp	r3, #0
   13e5c:	da07      	bge.n	13e6e <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x16e>
        flags |= FLAGS_LEFT;    // reverse padding
   13e5e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   13e60:	f043 0302 	orr.w	r3, r3, #2
   13e64:	931f      	str	r3, [sp, #124]	; 0x7c
        width = (unsigned int)-w;
   13e66:	9b16      	ldr	r3, [sp, #88]	; 0x58
   13e68:	425b      	negs	r3, r3
   13e6a:	931e      	str	r3, [sp, #120]	; 0x78
   13e6c:	e001      	b.n	13e72 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x172>
      }
      else {
        width = (unsigned int)w;
   13e6e:	9b16      	ldr	r3, [sp, #88]	; 0x58
   13e70:	931e      	str	r3, [sp, #120]	; 0x78
      }
      format++;
   13e72:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13e74:	3301      	adds	r3, #1
   13e76:	930a      	str	r3, [sp, #40]	; 0x28
    }

    // evaluate precision field
    precision = 0U;
   13e78:	2300      	movs	r3, #0
   13e7a:	931d      	str	r3, [sp, #116]	; 0x74
    if (*format == '.') {
   13e7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13e7e:	781b      	ldrb	r3, [r3, #0]
   13e80:	2b2e      	cmp	r3, #46	; 0x2e
   13e82:	d124      	bne.n	13ece <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x1ce>
      flags |= FLAGS_PRECISION;
   13e84:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   13e86:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
   13e8a:	931f      	str	r3, [sp, #124]	; 0x7c
      format++;
   13e8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13e8e:	3301      	adds	r3, #1
   13e90:	930a      	str	r3, [sp, #40]	; 0x28
      if (_is_digit(*format)) {
   13e92:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13e94:	781b      	ldrb	r3, [r3, #0]
   13e96:	4618      	mov	r0, r3
   13e98:	f7ff faaa 	bl	133f0 <_is_digit(char)>
   13e9c:	4603      	mov	r3, r0
   13e9e:	2b00      	cmp	r3, #0
   13ea0:	d005      	beq.n	13eae <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x1ae>
        precision = _atoi(&format);
   13ea2:	ab0a      	add	r3, sp, #40	; 0x28
   13ea4:	4618      	mov	r0, r3
   13ea6:	f7ff fac5 	bl	13434 <_atoi(char const**)>
   13eaa:	901d      	str	r0, [sp, #116]	; 0x74
   13eac:	e00f      	b.n	13ece <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x1ce>
      }
      else if (*format == '*') {
   13eae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13eb0:	781b      	ldrb	r3, [r3, #0]
   13eb2:	2b2a      	cmp	r3, #42	; 0x2a
   13eb4:	d10b      	bne.n	13ece <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x1ce>
        const int prec = (int)va_arg(va, int);
   13eb6:	9b24      	ldr	r3, [sp, #144]	; 0x90
   13eb8:	1d1a      	adds	r2, r3, #4
   13eba:	9224      	str	r2, [sp, #144]	; 0x90
   13ebc:	681b      	ldr	r3, [r3, #0]
   13ebe:	9315      	str	r3, [sp, #84]	; 0x54
        precision = prec > 0 ? (unsigned int)prec : 0U;
   13ec0:	9b15      	ldr	r3, [sp, #84]	; 0x54
   13ec2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   13ec6:	931d      	str	r3, [sp, #116]	; 0x74
        format++;
   13ec8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13eca:	3301      	adds	r3, #1
   13ecc:	930a      	str	r3, [sp, #40]	; 0x28
      }
    }

    // evaluate length field
    switch (*format) {
   13ece:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13ed0:	781b      	ldrb	r3, [r3, #0]
   13ed2:	3b68      	subs	r3, #104	; 0x68
   13ed4:	2b12      	cmp	r3, #18
   13ed6:	d867      	bhi.n	13fa8 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2a8>
   13ed8:	a201      	add	r2, pc, #4	; (adr r2, 13ee0 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x1e0>)
   13eda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   13ede:	bf00      	nop
   13ee0:	00013f53 	.word	0x00013f53
   13ee4:	00013fa9 	.word	0x00013fa9
   13ee8:	00013f89 	.word	0x00013f89
   13eec:	00013fa9 	.word	0x00013fa9
   13ef0:	00013f2d 	.word	0x00013f2d
   13ef4:	00013fa9 	.word	0x00013fa9
   13ef8:	00013fa9 	.word	0x00013fa9
   13efc:	00013fa9 	.word	0x00013fa9
   13f00:	00013fa9 	.word	0x00013fa9
   13f04:	00013fa9 	.word	0x00013fa9
   13f08:	00013fa9 	.word	0x00013fa9
   13f0c:	00013fa9 	.word	0x00013fa9
   13f10:	00013f79 	.word	0x00013f79
   13f14:	00013fa9 	.word	0x00013fa9
   13f18:	00013fa9 	.word	0x00013fa9
   13f1c:	00013fa9 	.word	0x00013fa9
   13f20:	00013fa9 	.word	0x00013fa9
   13f24:	00013fa9 	.word	0x00013fa9
   13f28:	00013f99 	.word	0x00013f99
      case 'l' :
        flags |= FLAGS_LONG;
   13f2c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   13f2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   13f32:	931f      	str	r3, [sp, #124]	; 0x7c
        format++;
   13f34:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13f36:	3301      	adds	r3, #1
   13f38:	930a      	str	r3, [sp, #40]	; 0x28
        if (*format == 'l') {
   13f3a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13f3c:	781b      	ldrb	r3, [r3, #0]
   13f3e:	2b6c      	cmp	r3, #108	; 0x6c
   13f40:	d134      	bne.n	13fac <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2ac>
          flags |= FLAGS_LONG_LONG;
   13f42:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   13f44:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   13f48:	931f      	str	r3, [sp, #124]	; 0x7c
          format++;
   13f4a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13f4c:	3301      	adds	r3, #1
   13f4e:	930a      	str	r3, [sp, #40]	; 0x28
        }
        break;
   13f50:	e02c      	b.n	13fac <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2ac>
      case 'h' :
        flags |= FLAGS_SHORT;
   13f52:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   13f54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   13f58:	931f      	str	r3, [sp, #124]	; 0x7c
        format++;
   13f5a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13f5c:	3301      	adds	r3, #1
   13f5e:	930a      	str	r3, [sp, #40]	; 0x28
        if (*format == 'h') {
   13f60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13f62:	781b      	ldrb	r3, [r3, #0]
   13f64:	2b68      	cmp	r3, #104	; 0x68
   13f66:	d127      	bne.n	13fb8 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2b8>
          flags |= FLAGS_CHAR;
   13f68:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   13f6a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   13f6e:	931f      	str	r3, [sp, #124]	; 0x7c
          format++;
   13f70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13f72:	3301      	adds	r3, #1
   13f74:	930a      	str	r3, [sp, #40]	; 0x28
        }
        break;
   13f76:	e01f      	b.n	13fb8 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2b8>
#if defined(PRINTF_SUPPORT_PTRDIFF_T)
      case 't' :
        flags |= (sizeof(ptrdiff_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
   13f78:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   13f7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   13f7e:	931f      	str	r3, [sp, #124]	; 0x7c
        format++;
   13f80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13f82:	3301      	adds	r3, #1
   13f84:	930a      	str	r3, [sp, #40]	; 0x28
        break;
   13f86:	e018      	b.n	13fba <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2ba>
#endif
      case 'j' :
        flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
   13f88:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   13f8a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   13f8e:	931f      	str	r3, [sp, #124]	; 0x7c
        format++;
   13f90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13f92:	3301      	adds	r3, #1
   13f94:	930a      	str	r3, [sp, #40]	; 0x28
        break;
   13f96:	e010      	b.n	13fba <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2ba>
      case 'z' :
        flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
   13f98:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   13f9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   13f9e:	931f      	str	r3, [sp, #124]	; 0x7c
        format++;
   13fa0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13fa2:	3301      	adds	r3, #1
   13fa4:	930a      	str	r3, [sp, #40]	; 0x28
        break;
   13fa6:	e008      	b.n	13fba <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2ba>
      default :
        break;
   13fa8:	bf00      	nop
   13faa:	e006      	b.n	13fba <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2ba>
        break;
   13fac:	bf00      	nop
   13fae:	e004      	b.n	13fba <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2ba>
   13fb0:	00013d01 	.word	0x00013d01
   13fb4:	00013339 	.word	0x00013339
        break;
   13fb8:	bf00      	nop
    }

    // evaluate specifier
    switch (*format) {
   13fba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13fbc:	781b      	ldrb	r3, [r3, #0]
   13fbe:	3b25      	subs	r3, #37	; 0x25
   13fc0:	2b53      	cmp	r3, #83	; 0x53
   13fc2:	f200 82ee 	bhi.w	145a2 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8a2>
   13fc6:	a201      	add	r2, pc, #4	; (adr r2, 13fcc <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2cc>)
   13fc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   13fcc:	0001458b 	.word	0x0001458b
   13fd0:	000145a3 	.word	0x000145a3
   13fd4:	000145a3 	.word	0x000145a3
   13fd8:	000145a3 	.word	0x000145a3
   13fdc:	000145a3 	.word	0x000145a3
   13fe0:	000145a3 	.word	0x000145a3
   13fe4:	000145a3 	.word	0x000145a3
   13fe8:	000145a3 	.word	0x000145a3
   13fec:	000145a3 	.word	0x000145a3
   13ff0:	000145a3 	.word	0x000145a3
   13ff4:	000145a3 	.word	0x000145a3
   13ff8:	000145a3 	.word	0x000145a3
   13ffc:	000145a3 	.word	0x000145a3
   14000:	000145a3 	.word	0x000145a3
   14004:	000145a3 	.word	0x000145a3
   14008:	000145a3 	.word	0x000145a3
   1400c:	000145a3 	.word	0x000145a3
   14010:	000145a3 	.word	0x000145a3
   14014:	000145a3 	.word	0x000145a3
   14018:	000145a3 	.word	0x000145a3
   1401c:	000145a3 	.word	0x000145a3
   14020:	000145a3 	.word	0x000145a3
   14024:	000145a3 	.word	0x000145a3
   14028:	000145a3 	.word	0x000145a3
   1402c:	000145a3 	.word	0x000145a3
   14030:	000145a3 	.word	0x000145a3
   14034:	000145a3 	.word	0x000145a3
   14038:	000145a3 	.word	0x000145a3
   1403c:	000145a3 	.word	0x000145a3
   14040:	000145a3 	.word	0x000145a3
   14044:	000145a3 	.word	0x000145a3
   14048:	000145a3 	.word	0x000145a3
   1404c:	000145a3 	.word	0x000145a3
   14050:	000143a9 	.word	0x000143a9
   14054:	000145a3 	.word	0x000145a3
   14058:	000145a3 	.word	0x000145a3
   1405c:	000145a3 	.word	0x000145a3
   14060:	000145a3 	.word	0x000145a3
   14064:	000145a3 	.word	0x000145a3
   14068:	000145a3 	.word	0x000145a3
   1406c:	000145a3 	.word	0x000145a3
   14070:	000145a3 	.word	0x000145a3
   14074:	000145a3 	.word	0x000145a3
   14078:	000145a3 	.word	0x000145a3
   1407c:	000145a3 	.word	0x000145a3
   14080:	000145a3 	.word	0x000145a3
   14084:	000145a3 	.word	0x000145a3
   14088:	000145a3 	.word	0x000145a3
   1408c:	000145a3 	.word	0x000145a3
   14090:	000145a3 	.word	0x000145a3
   14094:	000145a3 	.word	0x000145a3
   14098:	0001411d 	.word	0x0001411d
   1409c:	000145a3 	.word	0x000145a3
   140a0:	000145a3 	.word	0x000145a3
   140a4:	000145a3 	.word	0x000145a3
   140a8:	000145a3 	.word	0x000145a3
   140ac:	000145a3 	.word	0x000145a3
   140b0:	000145a3 	.word	0x000145a3
   140b4:	000145a3 	.word	0x000145a3
   140b8:	000145a3 	.word	0x000145a3
   140bc:	000145a3 	.word	0x000145a3
   140c0:	0001411d 	.word	0x0001411d
   140c4:	000143e5 	.word	0x000143e5
   140c8:	0001411d 	.word	0x0001411d
   140cc:	000145a3 	.word	0x000145a3
   140d0:	000143a9 	.word	0x000143a9
   140d4:	000145a3 	.word	0x000145a3
   140d8:	000145a3 	.word	0x000145a3
   140dc:	0001411d 	.word	0x0001411d
   140e0:	000145a3 	.word	0x000145a3
   140e4:	000145a3 	.word	0x000145a3
   140e8:	000145a3 	.word	0x000145a3
   140ec:	000145a3 	.word	0x000145a3
   140f0:	000145a3 	.word	0x000145a3
   140f4:	0001411d 	.word	0x0001411d
   140f8:	00014543 	.word	0x00014543
   140fc:	000145a3 	.word	0x000145a3
   14100:	000145a3 	.word	0x000145a3
   14104:	0001446d 	.word	0x0001446d
   14108:	000145a3 	.word	0x000145a3
   1410c:	0001411d 	.word	0x0001411d
   14110:	000145a3 	.word	0x000145a3
   14114:	000145a3 	.word	0x000145a3
   14118:	0001411d 	.word	0x0001411d
      case 'X' :
      case 'o' :
      case 'b' : {
        // set the base
        unsigned int base;
        if (*format == 'x' || *format == 'X') {
   1411c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1411e:	781b      	ldrb	r3, [r3, #0]
   14120:	2b78      	cmp	r3, #120	; 0x78
   14122:	d003      	beq.n	1412c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x42c>
   14124:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   14126:	781b      	ldrb	r3, [r3, #0]
   14128:	2b58      	cmp	r3, #88	; 0x58
   1412a:	d102      	bne.n	14132 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x432>
          base = 16U;
   1412c:	2310      	movs	r3, #16
   1412e:	931a      	str	r3, [sp, #104]	; 0x68
   14130:	e013      	b.n	1415a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x45a>
        }
        else if (*format == 'o') {
   14132:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   14134:	781b      	ldrb	r3, [r3, #0]
   14136:	2b6f      	cmp	r3, #111	; 0x6f
   14138:	d102      	bne.n	14140 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x440>
          base =  8U;
   1413a:	2308      	movs	r3, #8
   1413c:	931a      	str	r3, [sp, #104]	; 0x68
   1413e:	e00c      	b.n	1415a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x45a>
        }
        else if (*format == 'b') {
   14140:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   14142:	781b      	ldrb	r3, [r3, #0]
   14144:	2b62      	cmp	r3, #98	; 0x62
   14146:	d102      	bne.n	1414e <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x44e>
          base =  2U;
   14148:	2302      	movs	r3, #2
   1414a:	931a      	str	r3, [sp, #104]	; 0x68
   1414c:	e005      	b.n	1415a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x45a>
        }
        else {
          base = 10U;
   1414e:	230a      	movs	r3, #10
   14150:	931a      	str	r3, [sp, #104]	; 0x68
          flags &= ~FLAGS_HASH;   // no hash for dec format
   14152:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   14154:	f023 0310 	bic.w	r3, r3, #16
   14158:	931f      	str	r3, [sp, #124]	; 0x7c
        }
        // uppercase
        if (*format == 'X') {
   1415a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1415c:	781b      	ldrb	r3, [r3, #0]
   1415e:	2b58      	cmp	r3, #88	; 0x58
   14160:	d103      	bne.n	1416a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x46a>
          flags |= FLAGS_UPPERCASE;
   14162:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   14164:	f043 0320 	orr.w	r3, r3, #32
   14168:	931f      	str	r3, [sp, #124]	; 0x7c
        }

        // no plus or space flag for u, x, X, o, b
        if ((*format != 'i') && (*format != 'd')) {
   1416a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1416c:	781b      	ldrb	r3, [r3, #0]
   1416e:	2b69      	cmp	r3, #105	; 0x69
   14170:	d007      	beq.n	14182 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x482>
   14172:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   14174:	781b      	ldrb	r3, [r3, #0]
   14176:	2b64      	cmp	r3, #100	; 0x64
   14178:	d003      	beq.n	14182 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x482>
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
   1417a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   1417c:	f023 030c 	bic.w	r3, r3, #12
   14180:	931f      	str	r3, [sp, #124]	; 0x7c
        }

        // ignore '0' flag when precision is given
        if (flags & FLAGS_PRECISION) {
   14182:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   14184:	f403 6380 	and.w	r3, r3, #1024	; 0x400
   14188:	2b00      	cmp	r3, #0
   1418a:	d003      	beq.n	14194 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x494>
          flags &= ~FLAGS_ZEROPAD;
   1418c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   1418e:	f023 0301 	bic.w	r3, r3, #1
   14192:	931f      	str	r3, [sp, #124]	; 0x7c
        }

        // convert the integer
        if ((*format == 'i') || (*format == 'd')) {
   14194:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   14196:	781b      	ldrb	r3, [r3, #0]
   14198:	2b69      	cmp	r3, #105	; 0x69
   1419a:	d004      	beq.n	141a6 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x4a6>
   1419c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1419e:	781b      	ldrb	r3, [r3, #0]
   141a0:	2b64      	cmp	r3, #100	; 0x64
   141a2:	f040 808d 	bne.w	142c0 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x5c0>
          // signed
          if (flags & FLAGS_LONG_LONG) {
   141a6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   141a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
   141ac:	2b00      	cmp	r3, #0
   141ae:	d02e      	beq.n	1420e <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x50e>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            const long long value = va_arg(va, long long);
   141b0:	9b24      	ldr	r3, [sp, #144]	; 0x90
   141b2:	3307      	adds	r3, #7
   141b4:	f023 0307 	bic.w	r3, r3, #7
   141b8:	f103 0208 	add.w	r2, r3, #8
   141bc:	9224      	str	r2, [sp, #144]	; 0x90
   141be:	e9d3 3400 	ldrd	r3, r4, [r3]
   141c2:	e9cd 340e 	strd	r3, r4, [sp, #56]	; 0x38
            idx = _ntoa_long_long(out, buffer, idx, maxlen, (unsigned long long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
   141c6:	e9dd 340e 	ldrd	r3, r4, [sp, #56]	; 0x38
   141ca:	2b00      	cmp	r3, #0
   141cc:	f174 0200 	sbcs.w	r2, r4, #0
   141d0:	da02      	bge.n	141d8 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x4d8>
   141d2:	425b      	negs	r3, r3
   141d4:	eb64 0444 	sbc.w	r4, r4, r4, lsl #1
   141d8:	4619      	mov	r1, r3
   141da:	4622      	mov	r2, r4
   141dc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   141de:	0fdb      	lsrs	r3, r3, #31
   141e0:	b2d8      	uxtb	r0, r3
   141e2:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   141e4:	f04f 0400 	mov.w	r4, #0
   141e8:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
   141ea:	9508      	str	r5, [sp, #32]
   141ec:	9d1e      	ldr	r5, [sp, #120]	; 0x78
   141ee:	9507      	str	r5, [sp, #28]
   141f0:	9d1d      	ldr	r5, [sp, #116]	; 0x74
   141f2:	9506      	str	r5, [sp, #24]
   141f4:	e9cd 3404 	strd	r3, r4, [sp, #16]
   141f8:	9002      	str	r0, [sp, #8]
   141fa:	e9cd 1200 	strd	r1, r2, [sp]
   141fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   14200:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   14202:	990c      	ldr	r1, [sp, #48]	; 0x30
   14204:	980d      	ldr	r0, [sp, #52]	; 0x34
   14206:	f7ff fae5 	bl	137d4 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)>
   1420a:	901b      	str	r0, [sp, #108]	; 0x6c
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
          }
          else {
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
          }
   1420c:	e0c8      	b.n	143a0 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x6a0>
          else if (flags & FLAGS_LONG) {
   1420e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   14210:	f403 7380 	and.w	r3, r3, #256	; 0x100
   14214:	2b00      	cmp	r3, #0
   14216:	d01e      	beq.n	14256 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x556>
            const long value = va_arg(va, long);
   14218:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1421a:	1d1a      	adds	r2, r3, #4
   1421c:	9224      	str	r2, [sp, #144]	; 0x90
   1421e:	681b      	ldr	r3, [r3, #0]
   14220:	9311      	str	r3, [sp, #68]	; 0x44
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
   14222:	9b11      	ldr	r3, [sp, #68]	; 0x44
   14224:	2b00      	cmp	r3, #0
   14226:	bfb8      	it	lt
   14228:	425b      	neglt	r3, r3
   1422a:	4619      	mov	r1, r3
   1422c:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1422e:	0fdb      	lsrs	r3, r3, #31
   14230:	b2db      	uxtb	r3, r3
   14232:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   14234:	9205      	str	r2, [sp, #20]
   14236:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   14238:	9204      	str	r2, [sp, #16]
   1423a:	9a1d      	ldr	r2, [sp, #116]	; 0x74
   1423c:	9203      	str	r2, [sp, #12]
   1423e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   14240:	9202      	str	r2, [sp, #8]
   14242:	9301      	str	r3, [sp, #4]
   14244:	9100      	str	r1, [sp, #0]
   14246:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   14248:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   1424a:	990c      	ldr	r1, [sp, #48]	; 0x30
   1424c:	980d      	ldr	r0, [sp, #52]	; 0x34
   1424e:	f7ff fa4f 	bl	136f0 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)>
   14252:	901b      	str	r0, [sp, #108]	; 0x6c
          }
   14254:	e0a4      	b.n	143a0 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x6a0>
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
   14256:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   14258:	f003 0340 	and.w	r3, r3, #64	; 0x40
   1425c:	2b00      	cmp	r3, #0
   1425e:	d005      	beq.n	1426c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x56c>
   14260:	9b24      	ldr	r3, [sp, #144]	; 0x90
   14262:	1d1a      	adds	r2, r3, #4
   14264:	9224      	str	r2, [sp, #144]	; 0x90
   14266:	681b      	ldr	r3, [r3, #0]
   14268:	b2db      	uxtb	r3, r3
   1426a:	e00e      	b.n	1428a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x58a>
   1426c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   1426e:	f003 0380 	and.w	r3, r3, #128	; 0x80
   14272:	2b00      	cmp	r3, #0
   14274:	d005      	beq.n	14282 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x582>
   14276:	9b24      	ldr	r3, [sp, #144]	; 0x90
   14278:	1d1a      	adds	r2, r3, #4
   1427a:	9224      	str	r2, [sp, #144]	; 0x90
   1427c:	681b      	ldr	r3, [r3, #0]
   1427e:	b21b      	sxth	r3, r3
   14280:	e003      	b.n	1428a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x58a>
   14282:	9b24      	ldr	r3, [sp, #144]	; 0x90
   14284:	1d1a      	adds	r2, r3, #4
   14286:	9224      	str	r2, [sp, #144]	; 0x90
   14288:	681b      	ldr	r3, [r3, #0]
   1428a:	9312      	str	r3, [sp, #72]	; 0x48
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
   1428c:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1428e:	2b00      	cmp	r3, #0
   14290:	bfb8      	it	lt
   14292:	425b      	neglt	r3, r3
   14294:	4619      	mov	r1, r3
   14296:	9b12      	ldr	r3, [sp, #72]	; 0x48
   14298:	0fdb      	lsrs	r3, r3, #31
   1429a:	b2db      	uxtb	r3, r3
   1429c:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   1429e:	9205      	str	r2, [sp, #20]
   142a0:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   142a2:	9204      	str	r2, [sp, #16]
   142a4:	9a1d      	ldr	r2, [sp, #116]	; 0x74
   142a6:	9203      	str	r2, [sp, #12]
   142a8:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   142aa:	9202      	str	r2, [sp, #8]
   142ac:	9301      	str	r3, [sp, #4]
   142ae:	9100      	str	r1, [sp, #0]
   142b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   142b2:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   142b4:	990c      	ldr	r1, [sp, #48]	; 0x30
   142b6:	980d      	ldr	r0, [sp, #52]	; 0x34
   142b8:	f7ff fa1a 	bl	136f0 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)>
   142bc:	901b      	str	r0, [sp, #108]	; 0x6c
          }
   142be:	e06f      	b.n	143a0 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x6a0>
        }
        else {
          // unsigned
          if (flags & FLAGS_LONG_LONG) {
   142c0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   142c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
   142c6:	2b00      	cmp	r3, #0
   142c8:	d020      	beq.n	1430c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x60c>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base, precision, width, flags);
   142ca:	9b24      	ldr	r3, [sp, #144]	; 0x90
   142cc:	3307      	adds	r3, #7
   142ce:	f023 0307 	bic.w	r3, r3, #7
   142d2:	f103 0208 	add.w	r2, r3, #8
   142d6:	9224      	str	r2, [sp, #144]	; 0x90
   142d8:	e9d3 3400 	ldrd	r3, r4, [r3]
   142dc:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   142de:	4611      	mov	r1, r2
   142e0:	f04f 0200 	mov.w	r2, #0
   142e4:	981f      	ldr	r0, [sp, #124]	; 0x7c
   142e6:	9008      	str	r0, [sp, #32]
   142e8:	981e      	ldr	r0, [sp, #120]	; 0x78
   142ea:	9007      	str	r0, [sp, #28]
   142ec:	981d      	ldr	r0, [sp, #116]	; 0x74
   142ee:	9006      	str	r0, [sp, #24]
   142f0:	e9cd 1204 	strd	r1, r2, [sp, #16]
   142f4:	2200      	movs	r2, #0
   142f6:	9202      	str	r2, [sp, #8]
   142f8:	e9cd 3400 	strd	r3, r4, [sp]
   142fc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   142fe:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   14300:	990c      	ldr	r1, [sp, #48]	; 0x30
   14302:	980d      	ldr	r0, [sp, #52]	; 0x34
   14304:	f7ff fa66 	bl	137d4 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)>
   14308:	901b      	str	r0, [sp, #108]	; 0x6c
   1430a:	e049      	b.n	143a0 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x6a0>
#endif
          }
          else if (flags & FLAGS_LONG) {
   1430c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   1430e:	f403 7380 	and.w	r3, r3, #256	; 0x100
   14312:	2b00      	cmp	r3, #0
   14314:	d016      	beq.n	14344 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x644>
            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
   14316:	9b24      	ldr	r3, [sp, #144]	; 0x90
   14318:	1d1a      	adds	r2, r3, #4
   1431a:	9224      	str	r2, [sp, #144]	; 0x90
   1431c:	681b      	ldr	r3, [r3, #0]
   1431e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   14320:	9205      	str	r2, [sp, #20]
   14322:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   14324:	9204      	str	r2, [sp, #16]
   14326:	9a1d      	ldr	r2, [sp, #116]	; 0x74
   14328:	9203      	str	r2, [sp, #12]
   1432a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   1432c:	9202      	str	r2, [sp, #8]
   1432e:	2200      	movs	r2, #0
   14330:	9201      	str	r2, [sp, #4]
   14332:	9300      	str	r3, [sp, #0]
   14334:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   14336:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   14338:	990c      	ldr	r1, [sp, #48]	; 0x30
   1433a:	980d      	ldr	r0, [sp, #52]	; 0x34
   1433c:	f7ff f9d8 	bl	136f0 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)>
   14340:	901b      	str	r0, [sp, #108]	; 0x6c
   14342:	e02d      	b.n	143a0 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x6a0>
          }
          else {
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
   14344:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   14346:	f003 0340 	and.w	r3, r3, #64	; 0x40
   1434a:	2b00      	cmp	r3, #0
   1434c:	d005      	beq.n	1435a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x65a>
   1434e:	9b24      	ldr	r3, [sp, #144]	; 0x90
   14350:	1d1a      	adds	r2, r3, #4
   14352:	9224      	str	r2, [sp, #144]	; 0x90
   14354:	681b      	ldr	r3, [r3, #0]
   14356:	b2db      	uxtb	r3, r3
   14358:	e00e      	b.n	14378 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x678>
   1435a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   1435c:	f003 0380 	and.w	r3, r3, #128	; 0x80
   14360:	2b00      	cmp	r3, #0
   14362:	d005      	beq.n	14370 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x670>
   14364:	9b24      	ldr	r3, [sp, #144]	; 0x90
   14366:	1d1a      	adds	r2, r3, #4
   14368:	9224      	str	r2, [sp, #144]	; 0x90
   1436a:	681b      	ldr	r3, [r3, #0]
   1436c:	b29b      	uxth	r3, r3
   1436e:	e003      	b.n	14378 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x678>
   14370:	9b24      	ldr	r3, [sp, #144]	; 0x90
   14372:	1d1a      	adds	r2, r3, #4
   14374:	9224      	str	r2, [sp, #144]	; 0x90
   14376:	681b      	ldr	r3, [r3, #0]
   14378:	9313      	str	r3, [sp, #76]	; 0x4c
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
   1437a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   1437c:	9305      	str	r3, [sp, #20]
   1437e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   14380:	9304      	str	r3, [sp, #16]
   14382:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   14384:	9303      	str	r3, [sp, #12]
   14386:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   14388:	9302      	str	r3, [sp, #8]
   1438a:	2300      	movs	r3, #0
   1438c:	9301      	str	r3, [sp, #4]
   1438e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   14390:	9300      	str	r3, [sp, #0]
   14392:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   14394:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   14396:	990c      	ldr	r1, [sp, #48]	; 0x30
   14398:	980d      	ldr	r0, [sp, #52]	; 0x34
   1439a:	f7ff f9a9 	bl	136f0 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)>
   1439e:	901b      	str	r0, [sp, #108]	; 0x6c
          }
        }
        format++;
   143a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   143a2:	3301      	adds	r3, #1
   143a4:	930a      	str	r3, [sp, #40]	; 0x28
        break;
   143a6:	e109      	b.n	145bc <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8bc>
      }
#if defined(PRINTF_SUPPORT_FLOAT)
      case 'f' :
      case 'F' :
        idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
   143a8:	9b24      	ldr	r3, [sp, #144]	; 0x90
   143aa:	3307      	adds	r3, #7
   143ac:	f023 0307 	bic.w	r3, r3, #7
   143b0:	f103 0208 	add.w	r2, r3, #8
   143b4:	9224      	str	r2, [sp, #144]	; 0x90
   143b6:	ed93 7b00 	vldr	d7, [r3]
   143ba:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   143bc:	9302      	str	r3, [sp, #8]
   143be:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   143c0:	9301      	str	r3, [sp, #4]
   143c2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   143c4:	9300      	str	r3, [sp, #0]
   143c6:	eeb0 0a47 	vmov.f32	s0, s14
   143ca:	eef0 0a67 	vmov.f32	s1, s15
   143ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   143d0:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   143d2:	990c      	ldr	r1, [sp, #48]	; 0x30
   143d4:	980d      	ldr	r0, [sp, #52]	; 0x34
   143d6:	f7ff fa77 	bl	138c8 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)>
   143da:	901b      	str	r0, [sp, #108]	; 0x6c
        format++;
   143dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   143de:	3301      	adds	r3, #1
   143e0:	930a      	str	r3, [sp, #40]	; 0x28
        break;
   143e2:	e0eb      	b.n	145bc <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8bc>
#endif  // PRINTF_SUPPORT_FLOAT
      case 'c' : {
        unsigned int l = 1U;
   143e4:	2301      	movs	r3, #1
   143e6:	9319      	str	r3, [sp, #100]	; 0x64
        // pre padding
        if (!(flags & FLAGS_LEFT)) {
   143e8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   143ea:	f003 0302 	and.w	r3, r3, #2
   143ee:	2b00      	cmp	r3, #0
   143f0:	d113      	bne.n	1441a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x71a>
          while (l++ < width) {
   143f2:	9b19      	ldr	r3, [sp, #100]	; 0x64
   143f4:	1c5a      	adds	r2, r3, #1
   143f6:	9219      	str	r2, [sp, #100]	; 0x64
   143f8:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   143fa:	429a      	cmp	r2, r3
   143fc:	bf8c      	ite	hi
   143fe:	2301      	movhi	r3, #1
   14400:	2300      	movls	r3, #0
   14402:	b2db      	uxtb	r3, r3
   14404:	2b00      	cmp	r3, #0
   14406:	d008      	beq.n	1441a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x71a>
            out(' ', buffer, idx++, maxlen);
   14408:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   1440a:	1c53      	adds	r3, r2, #1
   1440c:	931b      	str	r3, [sp, #108]	; 0x6c
   1440e:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   14410:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   14412:	990c      	ldr	r1, [sp, #48]	; 0x30
   14414:	2020      	movs	r0, #32
   14416:	47a0      	blx	r4
          while (l++ < width) {
   14418:	e7eb      	b.n	143f2 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x6f2>
          }
        }
        // char output
        out((char)va_arg(va, int), buffer, idx++, maxlen);
   1441a:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1441c:	1d1a      	adds	r2, r3, #4
   1441e:	9224      	str	r2, [sp, #144]	; 0x90
   14420:	681b      	ldr	r3, [r3, #0]
   14422:	b2d8      	uxtb	r0, r3
   14424:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   14426:	1c53      	adds	r3, r2, #1
   14428:	931b      	str	r3, [sp, #108]	; 0x6c
   1442a:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   1442c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1442e:	990c      	ldr	r1, [sp, #48]	; 0x30
   14430:	47a0      	blx	r4
        // post padding
        if (flags & FLAGS_LEFT) {
   14432:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   14434:	f003 0302 	and.w	r3, r3, #2
   14438:	2b00      	cmp	r3, #0
   1443a:	d013      	beq.n	14464 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x764>
          while (l++ < width) {
   1443c:	9b19      	ldr	r3, [sp, #100]	; 0x64
   1443e:	1c5a      	adds	r2, r3, #1
   14440:	9219      	str	r2, [sp, #100]	; 0x64
   14442:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   14444:	429a      	cmp	r2, r3
   14446:	bf8c      	ite	hi
   14448:	2301      	movhi	r3, #1
   1444a:	2300      	movls	r3, #0
   1444c:	b2db      	uxtb	r3, r3
   1444e:	2b00      	cmp	r3, #0
   14450:	d008      	beq.n	14464 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x764>
            out(' ', buffer, idx++, maxlen);
   14452:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   14454:	1c53      	adds	r3, r2, #1
   14456:	931b      	str	r3, [sp, #108]	; 0x6c
   14458:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   1445a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1445c:	990c      	ldr	r1, [sp, #48]	; 0x30
   1445e:	2020      	movs	r0, #32
   14460:	47a0      	blx	r4
          while (l++ < width) {
   14462:	e7eb      	b.n	1443c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x73c>
          }
        }
        format++;
   14464:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   14466:	3301      	adds	r3, #1
   14468:	930a      	str	r3, [sp, #40]	; 0x28
        break;
   1446a:	e0a7      	b.n	145bc <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8bc>
      }

      case 's' : {
        char* p = va_arg(va, char*);
   1446c:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1446e:	1d1a      	adds	r2, r3, #4
   14470:	9224      	str	r2, [sp, #144]	; 0x90
   14472:	681b      	ldr	r3, [r3, #0]
   14474:	9318      	str	r3, [sp, #96]	; 0x60
        unsigned int l = _strlen(p);
   14476:	9818      	ldr	r0, [sp, #96]	; 0x60
   14478:	f7fe ff98 	bl	133ac <_strlen(char const*)>
   1447c:	9017      	str	r0, [sp, #92]	; 0x5c
        // pre padding
        if (flags & FLAGS_PRECISION) {
   1447e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   14480:	f403 6380 	and.w	r3, r3, #1024	; 0x400
   14484:	2b00      	cmp	r3, #0
   14486:	d007      	beq.n	14498 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x798>
          l = (l < precision ? l : precision);
   14488:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   1448a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   1448c:	429a      	cmp	r2, r3
   1448e:	d201      	bcs.n	14494 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x794>
   14490:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   14492:	e000      	b.n	14496 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x796>
   14494:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   14496:	9317      	str	r3, [sp, #92]	; 0x5c
        }
        if (!(flags & FLAGS_LEFT)) {
   14498:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   1449a:	f003 0302 	and.w	r3, r3, #2
   1449e:	2b00      	cmp	r3, #0
   144a0:	d113      	bne.n	144ca <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7ca>
          while (l++ < width) {
   144a2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   144a4:	1c5a      	adds	r2, r3, #1
   144a6:	9217      	str	r2, [sp, #92]	; 0x5c
   144a8:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   144aa:	429a      	cmp	r2, r3
   144ac:	bf8c      	ite	hi
   144ae:	2301      	movhi	r3, #1
   144b0:	2300      	movls	r3, #0
   144b2:	b2db      	uxtb	r3, r3
   144b4:	2b00      	cmp	r3, #0
   144b6:	d008      	beq.n	144ca <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7ca>
            out(' ', buffer, idx++, maxlen);
   144b8:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   144ba:	1c53      	adds	r3, r2, #1
   144bc:	931b      	str	r3, [sp, #108]	; 0x6c
   144be:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   144c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   144c2:	990c      	ldr	r1, [sp, #48]	; 0x30
   144c4:	2020      	movs	r0, #32
   144c6:	47a0      	blx	r4
          while (l++ < width) {
   144c8:	e7eb      	b.n	144a2 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7a2>
          }
        }
        // string output
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
   144ca:	9b18      	ldr	r3, [sp, #96]	; 0x60
   144cc:	781b      	ldrb	r3, [r3, #0]
   144ce:	2b00      	cmp	r3, #0
   144d0:	d00b      	beq.n	144ea <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7ea>
   144d2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   144d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
   144d8:	2b00      	cmp	r3, #0
   144da:	d004      	beq.n	144e6 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7e6>
   144dc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   144de:	1e5a      	subs	r2, r3, #1
   144e0:	921d      	str	r2, [sp, #116]	; 0x74
   144e2:	2b00      	cmp	r3, #0
   144e4:	d001      	beq.n	144ea <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7ea>
   144e6:	2301      	movs	r3, #1
   144e8:	e000      	b.n	144ec <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7ec>
   144ea:	2300      	movs	r3, #0
   144ec:	2b00      	cmp	r3, #0
   144ee:	d00b      	beq.n	14508 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x808>
          out(*(p++), buffer, idx++, maxlen);
   144f0:	9b18      	ldr	r3, [sp, #96]	; 0x60
   144f2:	1c5a      	adds	r2, r3, #1
   144f4:	9218      	str	r2, [sp, #96]	; 0x60
   144f6:	7818      	ldrb	r0, [r3, #0]
   144f8:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   144fa:	1c53      	adds	r3, r2, #1
   144fc:	931b      	str	r3, [sp, #108]	; 0x6c
   144fe:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   14500:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   14502:	990c      	ldr	r1, [sp, #48]	; 0x30
   14504:	47a0      	blx	r4
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
   14506:	e7e0      	b.n	144ca <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7ca>
        }
        // post padding
        if (flags & FLAGS_LEFT) {
   14508:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   1450a:	f003 0302 	and.w	r3, r3, #2
   1450e:	2b00      	cmp	r3, #0
   14510:	d013      	beq.n	1453a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x83a>
          while (l++ < width) {
   14512:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   14514:	1c5a      	adds	r2, r3, #1
   14516:	9217      	str	r2, [sp, #92]	; 0x5c
   14518:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   1451a:	429a      	cmp	r2, r3
   1451c:	bf8c      	ite	hi
   1451e:	2301      	movhi	r3, #1
   14520:	2300      	movls	r3, #0
   14522:	b2db      	uxtb	r3, r3
   14524:	2b00      	cmp	r3, #0
   14526:	d008      	beq.n	1453a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x83a>
            out(' ', buffer, idx++, maxlen);
   14528:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   1452a:	1c53      	adds	r3, r2, #1
   1452c:	931b      	str	r3, [sp, #108]	; 0x6c
   1452e:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   14530:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   14532:	990c      	ldr	r1, [sp, #48]	; 0x30
   14534:	2020      	movs	r0, #32
   14536:	47a0      	blx	r4
          while (l++ < width) {
   14538:	e7eb      	b.n	14512 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x812>
          }
        }
        format++;
   1453a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1453c:	3301      	adds	r3, #1
   1453e:	930a      	str	r3, [sp, #40]	; 0x28
        break;
   14540:	e03c      	b.n	145bc <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8bc>
      }

      case 'p' : {
        width = sizeof(void*) * 2U;
   14542:	2308      	movs	r3, #8
   14544:	931e      	str	r3, [sp, #120]	; 0x78
        flags |= FLAGS_ZEROPAD | FLAGS_UPPERCASE;
   14546:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   14548:	f043 0321 	orr.w	r3, r3, #33	; 0x21
   1454c:	931f      	str	r3, [sp, #124]	; 0x7c
#if defined(PRINTF_SUPPORT_LONG_LONG)
        const bool is_ll = sizeof(uintptr_t) == sizeof(long long);
   1454e:	2300      	movs	r3, #0
   14550:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
        if (is_ll) {
          idx = _ntoa_long_long(out, buffer, idx, maxlen, (uintptr_t)va_arg(va, void*), false, 16U, precision, width, flags);
        }
        else {
#endif
          idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void*)), false, 16U, precision, width, flags);
   14554:	9b24      	ldr	r3, [sp, #144]	; 0x90
   14556:	1d1a      	adds	r2, r3, #4
   14558:	9224      	str	r2, [sp, #144]	; 0x90
   1455a:	681b      	ldr	r3, [r3, #0]
   1455c:	461a      	mov	r2, r3
   1455e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   14560:	9305      	str	r3, [sp, #20]
   14562:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   14564:	9304      	str	r3, [sp, #16]
   14566:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   14568:	9303      	str	r3, [sp, #12]
   1456a:	2310      	movs	r3, #16
   1456c:	9302      	str	r3, [sp, #8]
   1456e:	2300      	movs	r3, #0
   14570:	9301      	str	r3, [sp, #4]
   14572:	9200      	str	r2, [sp, #0]
   14574:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   14576:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   14578:	990c      	ldr	r1, [sp, #48]	; 0x30
   1457a:	980d      	ldr	r0, [sp, #52]	; 0x34
   1457c:	f7ff f8b8 	bl	136f0 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)>
   14580:	901b      	str	r0, [sp, #108]	; 0x6c
#if defined(PRINTF_SUPPORT_LONG_LONG)
        }
#endif
        format++;
   14582:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   14584:	3301      	adds	r3, #1
   14586:	930a      	str	r3, [sp, #40]	; 0x28
        break;
   14588:	e018      	b.n	145bc <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8bc>
      }

      case '%' :
        out('%', buffer, idx++, maxlen);
   1458a:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   1458c:	1c53      	adds	r3, r2, #1
   1458e:	931b      	str	r3, [sp, #108]	; 0x6c
   14590:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   14592:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   14594:	990c      	ldr	r1, [sp, #48]	; 0x30
   14596:	2025      	movs	r0, #37	; 0x25
   14598:	47a0      	blx	r4
        format++;
   1459a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1459c:	3301      	adds	r3, #1
   1459e:	930a      	str	r3, [sp, #40]	; 0x28
        break;
   145a0:	e00c      	b.n	145bc <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8bc>

      default :
        out(*format, buffer, idx++, maxlen);
   145a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   145a4:	7818      	ldrb	r0, [r3, #0]
   145a6:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   145a8:	1c53      	adds	r3, r2, #1
   145aa:	931b      	str	r3, [sp, #108]	; 0x6c
   145ac:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   145ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   145b0:	990c      	ldr	r1, [sp, #48]	; 0x30
   145b2:	47a0      	blx	r4
        format++;
   145b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   145b6:	3301      	adds	r3, #1
   145b8:	930a      	str	r3, [sp, #40]	; 0x28
        break;
   145ba:	bf00      	nop
  while (*format)
   145bc:	f7ff bbb3 	b.w	13d26 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x26>
    }
  }

  // termination
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
   145c0:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   145c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   145c4:	429a      	cmp	r2, r3
   145c6:	d302      	bcc.n	145ce <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8ce>
   145c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   145ca:	1e5a      	subs	r2, r3, #1
   145cc:	e000      	b.n	145d0 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8d0>
   145ce:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   145d0:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   145d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   145d4:	990c      	ldr	r1, [sp, #48]	; 0x30
   145d6:	2000      	movs	r0, #0
   145d8:	47a0      	blx	r4

  // return written chars without terminating \0
  return (int)idx;
   145da:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
   145dc:	4633      	mov	r3, r6
   145de:	4619      	mov	r1, r3
   145e0:	4803      	ldr	r0, [pc, #12]	; (145f0 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8f0>)
   145e2:	f7fe fdbb 	bl	1315c <__cyg_profile_func_exit>
   145e6:	4623      	mov	r3, r4
}
   145e8:	4618      	mov	r0, r3
   145ea:	b020      	add	sp, #128	; 0x80
   145ec:	bd70      	pop	{r4, r5, r6, pc}
   145ee:	bf00      	nop
   145f0:	00013d01 	.word	0x00013d01

000145f4 <printf>:

///////////////////////////////////////////////////////////////////////////////


int printf(const char* format, ...)
{
   145f4:	b40f      	push	{r0, r1, r2, r3}
   145f6:	b530      	push	{r4, r5, lr}
   145f8:	b087      	sub	sp, #28
   145fa:	4675      	mov	r5, lr
   145fc:	462b      	mov	r3, r5
   145fe:	4619      	mov	r1, r3
   14600:	480d      	ldr	r0, [pc, #52]	; (14638 <printf+0x44>)
   14602:	f7fe fd97 	bl	13134 <__cyg_profile_func_enter>
  va_list va;
  va_start(va, format);
   14606:	ab0b      	add	r3, sp, #44	; 0x2c
   14608:	9304      	str	r3, [sp, #16]
  char buffer[1];
  const int ret = _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
   1460a:	a903      	add	r1, sp, #12
   1460c:	9b04      	ldr	r3, [sp, #16]
   1460e:	9300      	str	r3, [sp, #0]
   14610:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   14612:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   14616:	4809      	ldr	r0, [pc, #36]	; (1463c <printf+0x48>)
   14618:	f7ff fb72 	bl	13d00 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)>
   1461c:	9005      	str	r0, [sp, #20]
  va_end(va);
  return ret;
   1461e:	9c05      	ldr	r4, [sp, #20]
   14620:	462b      	mov	r3, r5
   14622:	4619      	mov	r1, r3
   14624:	4804      	ldr	r0, [pc, #16]	; (14638 <printf+0x44>)
   14626:	f7fe fd99 	bl	1315c <__cyg_profile_func_exit>
   1462a:	4623      	mov	r3, r4
}
   1462c:	4618      	mov	r0, r3
   1462e:	b007      	add	sp, #28
   14630:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   14634:	b004      	add	sp, #16
   14636:	4770      	bx	lr
   14638:	000145f5 	.word	0x000145f5
   1463c:	00013369 	.word	0x00013369

00014640 <PinInterface::PinInterface()>:
class PinInterface
   14640:	b530      	push	{r4, r5, lr}
   14642:	b083      	sub	sp, #12
   14644:	4675      	mov	r5, lr
   14646:	9001      	str	r0, [sp, #4]
   14648:	462b      	mov	r3, r5
   1464a:	4619      	mov	r1, r3
   1464c:	4807      	ldr	r0, [pc, #28]	; (1466c <PinInterface::PinInterface()+0x2c>)
   1464e:	f7fe fd71 	bl	13134 <__cyg_profile_func_enter>
   14652:	4a07      	ldr	r2, [pc, #28]	; (14670 <PinInterface::PinInterface()+0x30>)
   14654:	9b01      	ldr	r3, [sp, #4]
   14656:	601a      	str	r2, [r3, #0]
   14658:	9c01      	ldr	r4, [sp, #4]
   1465a:	462b      	mov	r3, r5
   1465c:	4619      	mov	r1, r3
   1465e:	4803      	ldr	r0, [pc, #12]	; (1466c <PinInterface::PinInterface()+0x2c>)
   14660:	f7fe fd7c 	bl	1315c <__cyg_profile_func_exit>
   14664:	4623      	mov	r3, r4
   14666:	4618      	mov	r0, r3
   14668:	b003      	add	sp, #12
   1466a:	bd30      	pop	{r4, r5, pc}
   1466c:	00014641 	.word	0x00014641
   14670:	00019570 	.word	0x00019570

00014674 <Pin::Pin(unsigned char, unsigned char)>:
  constexpr Pin(uint8_t port_number, uint8_t pin_number)
   14674:	b530      	push	{r4, r5, lr}
   14676:	b083      	sub	sp, #12
   14678:	4675      	mov	r5, lr
   1467a:	9001      	str	r0, [sp, #4]
   1467c:	460b      	mov	r3, r1
   1467e:	f88d 3003 	strb.w	r3, [sp, #3]
   14682:	4613      	mov	r3, r2
   14684:	f88d 3002 	strb.w	r3, [sp, #2]
   14688:	462b      	mov	r3, r5
   1468a:	4619      	mov	r1, r3
   1468c:	480d      	ldr	r0, [pc, #52]	; (146c4 <Pin::Pin(unsigned char, unsigned char)+0x50>)
   1468e:	f7fe fd51 	bl	13134 <__cyg_profile_func_enter>
      : port_(port_number), pin_(pin_number)
   14692:	9b01      	ldr	r3, [sp, #4]
   14694:	4618      	mov	r0, r3
   14696:	f7ff ffd3 	bl	14640 <PinInterface::PinInterface()>
   1469a:	4a0b      	ldr	r2, [pc, #44]	; (146c8 <Pin::Pin(unsigned char, unsigned char)+0x54>)
   1469c:	9b01      	ldr	r3, [sp, #4]
   1469e:	601a      	str	r2, [r3, #0]
   146a0:	9b01      	ldr	r3, [sp, #4]
   146a2:	f89d 2003 	ldrb.w	r2, [sp, #3]
   146a6:	711a      	strb	r2, [r3, #4]
   146a8:	9b01      	ldr	r3, [sp, #4]
   146aa:	f89d 2002 	ldrb.w	r2, [sp, #2]
   146ae:	715a      	strb	r2, [r3, #5]
  }
   146b0:	9c01      	ldr	r4, [sp, #4]
   146b2:	462b      	mov	r3, r5
   146b4:	4619      	mov	r1, r3
   146b6:	4803      	ldr	r0, [pc, #12]	; (146c4 <Pin::Pin(unsigned char, unsigned char)+0x50>)
   146b8:	f7fe fd50 	bl	1315c <__cyg_profile_func_exit>
   146bc:	4623      	mov	r3, r4
   146be:	4618      	mov	r0, r3
   146c0:	b003      	add	sp, #12
   146c2:	bd30      	pop	{r4, r5, pc}
   146c4:	00014675 	.word	0x00014675
   146c8:	00017ed4 	.word	0x00017ed4

000146cc <GpioInterface::GpioInterface()>:
#include "L0_LowLevel/LPC40xx.h"
#include "L1_Drivers/pin.hpp"
#include "utility/enum.hpp"
#include "utility/log.hpp"

class GpioInterface
   146cc:	b530      	push	{r4, r5, lr}
   146ce:	b083      	sub	sp, #12
   146d0:	4675      	mov	r5, lr
   146d2:	9001      	str	r0, [sp, #4]
   146d4:	462b      	mov	r3, r5
   146d6:	4619      	mov	r1, r3
   146d8:	4807      	ldr	r0, [pc, #28]	; (146f8 <GpioInterface::GpioInterface()+0x2c>)
   146da:	f7fe fd2b 	bl	13134 <__cyg_profile_func_enter>
   146de:	4a07      	ldr	r2, [pc, #28]	; (146fc <GpioInterface::GpioInterface()+0x30>)
   146e0:	9b01      	ldr	r3, [sp, #4]
   146e2:	601a      	str	r2, [r3, #0]
   146e4:	9c01      	ldr	r4, [sp, #4]
   146e6:	462b      	mov	r3, r5
   146e8:	4619      	mov	r1, r3
   146ea:	4803      	ldr	r0, [pc, #12]	; (146f8 <GpioInterface::GpioInterface()+0x2c>)
   146ec:	f7fe fd36 	bl	1315c <__cyg_profile_func_exit>
   146f0:	4623      	mov	r3, r4
   146f2:	4618      	mov	r0, r3
   146f4:	b003      	add	sp, #12
   146f6:	bd30      	pop	{r4, r5, pc}
   146f8:	000146cd 	.word	0x000146cd
   146fc:	00019528 	.word	0x00019528

00014700 <Gpio::Gpio(unsigned char, unsigned char)>:
  };

  inline static volatile uint32_t * port_status = &(LPC_GPIOINT->IntStatus);

  // For port 0-4, pins 0-31 are available. Port 5 only has pins 0-4 available.
  constexpr Gpio(uint8_t port_number, uint8_t pin_number)
   14700:	b530      	push	{r4, r5, lr}
   14702:	b083      	sub	sp, #12
   14704:	4675      	mov	r5, lr
   14706:	9001      	str	r0, [sp, #4]
   14708:	460b      	mov	r3, r1
   1470a:	f88d 3003 	strb.w	r3, [sp, #3]
   1470e:	4613      	mov	r3, r2
   14710:	f88d 3002 	strb.w	r3, [sp, #2]
   14714:	462b      	mov	r3, r5
   14716:	4619      	mov	r1, r3
   14718:	4816      	ldr	r0, [pc, #88]	; (14774 <Gpio::Gpio(unsigned char, unsigned char)+0x74>)
   1471a:	f7fe fd0b 	bl	13134 <__cyg_profile_func_enter>
      : interupt_port_(false),
        pin_(&lpc40xx_pin_),
        lpc40xx_pin_(port_number, pin_number)
   1471e:	9b01      	ldr	r3, [sp, #4]
   14720:	4618      	mov	r0, r3
   14722:	f7ff ffd3 	bl	146cc <GpioInterface::GpioInterface()>
   14726:	4a14      	ldr	r2, [pc, #80]	; (14778 <Gpio::Gpio(unsigned char, unsigned char)+0x78>)
   14728:	9b01      	ldr	r3, [sp, #4]
   1472a:	601a      	str	r2, [r3, #0]
   1472c:	9b01      	ldr	r3, [sp, #4]
   1472e:	2200      	movs	r2, #0
   14730:	711a      	strb	r2, [r3, #4]
   14732:	9b01      	ldr	r3, [sp, #4]
   14734:	f103 020c 	add.w	r2, r3, #12
   14738:	9b01      	ldr	r3, [sp, #4]
   1473a:	609a      	str	r2, [r3, #8]
   1473c:	9b01      	ldr	r3, [sp, #4]
   1473e:	330c      	adds	r3, #12
   14740:	f89d 2002 	ldrb.w	r2, [sp, #2]
   14744:	f89d 1003 	ldrb.w	r1, [sp, #3]
   14748:	4618      	mov	r0, r3
   1474a:	f7ff ff93 	bl	14674 <Pin::Pin(unsigned char, unsigned char)>
  {
    interupt_port_ = (port_number == 2) ? 1 : 0;
   1474e:	f89d 3003 	ldrb.w	r3, [sp, #3]
   14752:	2b02      	cmp	r3, #2
   14754:	d101      	bne.n	1475a <Gpio::Gpio(unsigned char, unsigned char)+0x5a>
   14756:	2201      	movs	r2, #1
   14758:	e000      	b.n	1475c <Gpio::Gpio(unsigned char, unsigned char)+0x5c>
   1475a:	2200      	movs	r2, #0
   1475c:	9b01      	ldr	r3, [sp, #4]
   1475e:	711a      	strb	r2, [r3, #4]
  }
   14760:	9c01      	ldr	r4, [sp, #4]
   14762:	462b      	mov	r3, r5
   14764:	4619      	mov	r1, r3
   14766:	4803      	ldr	r0, [pc, #12]	; (14774 <Gpio::Gpio(unsigned char, unsigned char)+0x74>)
   14768:	f7fe fcf8 	bl	1315c <__cyg_profile_func_exit>
   1476c:	4623      	mov	r3, r4
   1476e:	4618      	mov	r0, r3
   14770:	b003      	add	sp, #12
   14772:	bd30      	pop	{r4, r5, pc}
   14774:	00014701 	.word	0x00014701
   14778:	000194e0 	.word	0x000194e0

0001477c <Gpio::SetAsInput()>:
      : interupt_port_(false), pin_(pin), lpc40xx_pin_(Pin::CreateInactivePin())
  {
    interupt_port_ = pin_->GetPort();
  }
  // Sets the GPIO pin direction as input
  void SetAsInput(void) override
   1477c:	b530      	push	{r4, r5, lr}
   1477e:	b083      	sub	sp, #12
   14780:	4675      	mov	r5, lr
   14782:	9001      	str	r0, [sp, #4]
   14784:	462b      	mov	r3, r5
   14786:	4619      	mov	r1, r3
   14788:	4819      	ldr	r0, [pc, #100]	; (147f0 <Gpio::SetAsInput()+0x74>)
   1478a:	f7fe fcd3 	bl	13134 <__cyg_profile_func_enter>
  {
    pin_->SetPinFunction(kGpioFunction);
   1478e:	9b01      	ldr	r3, [sp, #4]
   14790:	689a      	ldr	r2, [r3, #8]
   14792:	9b01      	ldr	r3, [sp, #4]
   14794:	689b      	ldr	r3, [r3, #8]
   14796:	681b      	ldr	r3, [r3, #0]
   14798:	681b      	ldr	r3, [r3, #0]
   1479a:	2100      	movs	r1, #0
   1479c:	4610      	mov	r0, r2
   1479e:	4798      	blx	r3
    gpio_port[pin_->GetPort()]->DIR &= ~(1 << pin_->GetPin());
   147a0:	9b01      	ldr	r3, [sp, #4]
   147a2:	689a      	ldr	r2, [r3, #8]
   147a4:	9b01      	ldr	r3, [sp, #4]
   147a6:	689b      	ldr	r3, [r3, #8]
   147a8:	681b      	ldr	r3, [r3, #0]
   147aa:	3330      	adds	r3, #48	; 0x30
   147ac:	681b      	ldr	r3, [r3, #0]
   147ae:	4610      	mov	r0, r2
   147b0:	4798      	blx	r3
   147b2:	4603      	mov	r3, r0
   147b4:	461a      	mov	r2, r3
   147b6:	2301      	movs	r3, #1
   147b8:	4093      	lsls	r3, r2
   147ba:	43dc      	mvns	r4, r3
   147bc:	9b01      	ldr	r3, [sp, #4]
   147be:	689a      	ldr	r2, [r3, #8]
   147c0:	9b01      	ldr	r3, [sp, #4]
   147c2:	689b      	ldr	r3, [r3, #8]
   147c4:	681b      	ldr	r3, [r3, #0]
   147c6:	332c      	adds	r3, #44	; 0x2c
   147c8:	681b      	ldr	r3, [r3, #0]
   147ca:	4610      	mov	r0, r2
   147cc:	4798      	blx	r3
   147ce:	4603      	mov	r3, r0
   147d0:	461a      	mov	r2, r3
   147d2:	4b08      	ldr	r3, [pc, #32]	; (147f4 <Gpio::SetAsInput()+0x78>)
   147d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   147d8:	681a      	ldr	r2, [r3, #0]
   147da:	4621      	mov	r1, r4
   147dc:	400a      	ands	r2, r1
   147de:	601a      	str	r2, [r3, #0]
   147e0:	462b      	mov	r3, r5
   147e2:	4619      	mov	r1, r3
   147e4:	4802      	ldr	r0, [pc, #8]	; (147f0 <Gpio::SetAsInput()+0x74>)
   147e6:	f7fe fcb9 	bl	1315c <__cyg_profile_func_exit>
  }
   147ea:	bf00      	nop
   147ec:	b003      	add	sp, #12
   147ee:	bd30      	pop	{r4, r5, pc}
   147f0:	0001477d 	.word	0x0001477d
   147f4:	10000188 	.word	0x10000188

000147f8 <Gpio::SetAsOutput()>:
  // Sets the GPIO pin direction as output
  void SetAsOutput(void) override
   147f8:	b530      	push	{r4, r5, lr}
   147fa:	b083      	sub	sp, #12
   147fc:	4675      	mov	r5, lr
   147fe:	9001      	str	r0, [sp, #4]
   14800:	462b      	mov	r3, r5
   14802:	4619      	mov	r1, r3
   14804:	4819      	ldr	r0, [pc, #100]	; (1486c <Gpio::SetAsOutput()+0x74>)
   14806:	f7fe fc95 	bl	13134 <__cyg_profile_func_enter>
  {
    pin_->SetPinFunction(kGpioFunction);
   1480a:	9b01      	ldr	r3, [sp, #4]
   1480c:	689a      	ldr	r2, [r3, #8]
   1480e:	9b01      	ldr	r3, [sp, #4]
   14810:	689b      	ldr	r3, [r3, #8]
   14812:	681b      	ldr	r3, [r3, #0]
   14814:	681b      	ldr	r3, [r3, #0]
   14816:	2100      	movs	r1, #0
   14818:	4610      	mov	r0, r2
   1481a:	4798      	blx	r3
    gpio_port[pin_->GetPort()]->DIR |= (1 << pin_->GetPin());
   1481c:	9b01      	ldr	r3, [sp, #4]
   1481e:	689a      	ldr	r2, [r3, #8]
   14820:	9b01      	ldr	r3, [sp, #4]
   14822:	689b      	ldr	r3, [r3, #8]
   14824:	681b      	ldr	r3, [r3, #0]
   14826:	3330      	adds	r3, #48	; 0x30
   14828:	681b      	ldr	r3, [r3, #0]
   1482a:	4610      	mov	r0, r2
   1482c:	4798      	blx	r3
   1482e:	4603      	mov	r3, r0
   14830:	461a      	mov	r2, r3
   14832:	2301      	movs	r3, #1
   14834:	fa03 f402 	lsl.w	r4, r3, r2
   14838:	9b01      	ldr	r3, [sp, #4]
   1483a:	689a      	ldr	r2, [r3, #8]
   1483c:	9b01      	ldr	r3, [sp, #4]
   1483e:	689b      	ldr	r3, [r3, #8]
   14840:	681b      	ldr	r3, [r3, #0]
   14842:	332c      	adds	r3, #44	; 0x2c
   14844:	681b      	ldr	r3, [r3, #0]
   14846:	4610      	mov	r0, r2
   14848:	4798      	blx	r3
   1484a:	4603      	mov	r3, r0
   1484c:	461a      	mov	r2, r3
   1484e:	4b08      	ldr	r3, [pc, #32]	; (14870 <Gpio::SetAsOutput()+0x78>)
   14850:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   14854:	681a      	ldr	r2, [r3, #0]
   14856:	4621      	mov	r1, r4
   14858:	430a      	orrs	r2, r1
   1485a:	601a      	str	r2, [r3, #0]
   1485c:	462b      	mov	r3, r5
   1485e:	4619      	mov	r1, r3
   14860:	4802      	ldr	r0, [pc, #8]	; (1486c <Gpio::SetAsOutput()+0x74>)
   14862:	f7fe fc7b 	bl	1315c <__cyg_profile_func_exit>
  }
   14866:	bf00      	nop
   14868:	b003      	add	sp, #12
   1486a:	bd30      	pop	{r4, r5, pc}
   1486c:	000147f9 	.word	0x000147f9
   14870:	10000188 	.word	0x10000188

00014874 <Gpio::SetDirection(GpioInterface::Direction)>:
  // Sets the GPIO pin direction as output or input depending on the
  // Direction enum parameter
  inline void SetDirection(Direction direction) override
   14874:	b510      	push	{r4, lr}
   14876:	b082      	sub	sp, #8
   14878:	4674      	mov	r4, lr
   1487a:	9001      	str	r0, [sp, #4]
   1487c:	460b      	mov	r3, r1
   1487e:	f88d 3003 	strb.w	r3, [sp, #3]
   14882:	4623      	mov	r3, r4
   14884:	4619      	mov	r1, r3
   14886:	480b      	ldr	r0, [pc, #44]	; (148b4 <Gpio::SetDirection(GpioInterface::Direction)+0x40>)
   14888:	f7fe fc54 	bl	13134 <__cyg_profile_func_enter>
  {
    (direction) ? SetAsOutput() : SetAsInput();
   1488c:	f89d 3003 	ldrb.w	r3, [sp, #3]
   14890:	2b00      	cmp	r3, #0
   14892:	d003      	beq.n	1489c <Gpio::SetDirection(GpioInterface::Direction)+0x28>
   14894:	9801      	ldr	r0, [sp, #4]
   14896:	f7ff ffaf 	bl	147f8 <Gpio::SetAsOutput()>
   1489a:	e002      	b.n	148a2 <Gpio::SetDirection(GpioInterface::Direction)+0x2e>
   1489c:	9801      	ldr	r0, [sp, #4]
   1489e:	f7ff ff6d 	bl	1477c <Gpio::SetAsInput()>
   148a2:	4623      	mov	r3, r4
   148a4:	4619      	mov	r1, r3
   148a6:	4803      	ldr	r0, [pc, #12]	; (148b4 <Gpio::SetDirection(GpioInterface::Direction)+0x40>)
   148a8:	f7fe fc58 	bl	1315c <__cyg_profile_func_exit>
  }
   148ac:	bf00      	nop
   148ae:	b002      	add	sp, #8
   148b0:	bd10      	pop	{r4, pc}
   148b2:	bf00      	nop
   148b4:	00014875 	.word	0x00014875

000148b8 <Gpio::SetHigh()>:
  // Sets the GPIO output pin to high
  void SetHigh(void) override
   148b8:	b530      	push	{r4, r5, lr}
   148ba:	b083      	sub	sp, #12
   148bc:	4675      	mov	r5, lr
   148be:	9001      	str	r0, [sp, #4]
   148c0:	462b      	mov	r3, r5
   148c2:	4619      	mov	r1, r3
   148c4:	4813      	ldr	r0, [pc, #76]	; (14914 <Gpio::SetHigh()+0x5c>)
   148c6:	f7fe fc35 	bl	13134 <__cyg_profile_func_enter>
  {
    gpio_port[pin_->GetPort()]->SET = (1 << pin_->GetPin());
   148ca:	9b01      	ldr	r3, [sp, #4]
   148cc:	689a      	ldr	r2, [r3, #8]
   148ce:	9b01      	ldr	r3, [sp, #4]
   148d0:	689b      	ldr	r3, [r3, #8]
   148d2:	681b      	ldr	r3, [r3, #0]
   148d4:	3330      	adds	r3, #48	; 0x30
   148d6:	681b      	ldr	r3, [r3, #0]
   148d8:	4610      	mov	r0, r2
   148da:	4798      	blx	r3
   148dc:	4603      	mov	r3, r0
   148de:	461a      	mov	r2, r3
   148e0:	2301      	movs	r3, #1
   148e2:	4093      	lsls	r3, r2
   148e4:	461c      	mov	r4, r3
   148e6:	9b01      	ldr	r3, [sp, #4]
   148e8:	689a      	ldr	r2, [r3, #8]
   148ea:	9b01      	ldr	r3, [sp, #4]
   148ec:	689b      	ldr	r3, [r3, #8]
   148ee:	681b      	ldr	r3, [r3, #0]
   148f0:	332c      	adds	r3, #44	; 0x2c
   148f2:	681b      	ldr	r3, [r3, #0]
   148f4:	4610      	mov	r0, r2
   148f6:	4798      	blx	r3
   148f8:	4603      	mov	r3, r0
   148fa:	461a      	mov	r2, r3
   148fc:	4b06      	ldr	r3, [pc, #24]	; (14918 <Gpio::SetHigh()+0x60>)
   148fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   14902:	619c      	str	r4, [r3, #24]
   14904:	462b      	mov	r3, r5
   14906:	4619      	mov	r1, r3
   14908:	4802      	ldr	r0, [pc, #8]	; (14914 <Gpio::SetHigh()+0x5c>)
   1490a:	f7fe fc27 	bl	1315c <__cyg_profile_func_exit>
  }
   1490e:	bf00      	nop
   14910:	b003      	add	sp, #12
   14912:	bd30      	pop	{r4, r5, pc}
   14914:	000148b9 	.word	0x000148b9
   14918:	10000188 	.word	0x10000188

0001491c <Gpio::SetLow()>:
  // Sets the GPIO output pin to low
  void SetLow(void) override
   1491c:	b530      	push	{r4, r5, lr}
   1491e:	b083      	sub	sp, #12
   14920:	4675      	mov	r5, lr
   14922:	9001      	str	r0, [sp, #4]
   14924:	462b      	mov	r3, r5
   14926:	4619      	mov	r1, r3
   14928:	4813      	ldr	r0, [pc, #76]	; (14978 <Gpio::SetLow()+0x5c>)
   1492a:	f7fe fc03 	bl	13134 <__cyg_profile_func_enter>
  {
    gpio_port[pin_->GetPort()]->CLR = (1 << pin_->GetPin());
   1492e:	9b01      	ldr	r3, [sp, #4]
   14930:	689a      	ldr	r2, [r3, #8]
   14932:	9b01      	ldr	r3, [sp, #4]
   14934:	689b      	ldr	r3, [r3, #8]
   14936:	681b      	ldr	r3, [r3, #0]
   14938:	3330      	adds	r3, #48	; 0x30
   1493a:	681b      	ldr	r3, [r3, #0]
   1493c:	4610      	mov	r0, r2
   1493e:	4798      	blx	r3
   14940:	4603      	mov	r3, r0
   14942:	461a      	mov	r2, r3
   14944:	2301      	movs	r3, #1
   14946:	4093      	lsls	r3, r2
   14948:	461c      	mov	r4, r3
   1494a:	9b01      	ldr	r3, [sp, #4]
   1494c:	689a      	ldr	r2, [r3, #8]
   1494e:	9b01      	ldr	r3, [sp, #4]
   14950:	689b      	ldr	r3, [r3, #8]
   14952:	681b      	ldr	r3, [r3, #0]
   14954:	332c      	adds	r3, #44	; 0x2c
   14956:	681b      	ldr	r3, [r3, #0]
   14958:	4610      	mov	r0, r2
   1495a:	4798      	blx	r3
   1495c:	4603      	mov	r3, r0
   1495e:	461a      	mov	r2, r3
   14960:	4b06      	ldr	r3, [pc, #24]	; (1497c <Gpio::SetLow()+0x60>)
   14962:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   14966:	61dc      	str	r4, [r3, #28]
   14968:	462b      	mov	r3, r5
   1496a:	4619      	mov	r1, r3
   1496c:	4802      	ldr	r0, [pc, #8]	; (14978 <Gpio::SetLow()+0x5c>)
   1496e:	f7fe fbf5 	bl	1315c <__cyg_profile_func_exit>
  }
   14972:	bf00      	nop
   14974:	b003      	add	sp, #12
   14976:	bd30      	pop	{r4, r5, pc}
   14978:	0001491d 	.word	0x0001491d
   1497c:	10000188 	.word	0x10000188

00014980 <Gpio::Set(GpioInterface::State)>:
  // Sets the GPIO output pin to high or low depending on the State enum
  // parameter
  void Set(State output = kHigh) override
   14980:	b510      	push	{r4, lr}
   14982:	b082      	sub	sp, #8
   14984:	4674      	mov	r4, lr
   14986:	9001      	str	r0, [sp, #4]
   14988:	460b      	mov	r3, r1
   1498a:	f88d 3003 	strb.w	r3, [sp, #3]
   1498e:	4623      	mov	r3, r4
   14990:	4619      	mov	r1, r3
   14992:	480b      	ldr	r0, [pc, #44]	; (149c0 <Gpio::Set(GpioInterface::State)+0x40>)
   14994:	f7fe fbce 	bl	13134 <__cyg_profile_func_enter>
  {
    (output) ? SetHigh() : SetLow();
   14998:	f89d 3003 	ldrb.w	r3, [sp, #3]
   1499c:	2b00      	cmp	r3, #0
   1499e:	d003      	beq.n	149a8 <Gpio::Set(GpioInterface::State)+0x28>
   149a0:	9801      	ldr	r0, [sp, #4]
   149a2:	f7ff ff89 	bl	148b8 <Gpio::SetHigh()>
   149a6:	e002      	b.n	149ae <Gpio::Set(GpioInterface::State)+0x2e>
   149a8:	9801      	ldr	r0, [sp, #4]
   149aa:	f7ff ffb7 	bl	1491c <Gpio::SetLow()>
   149ae:	4623      	mov	r3, r4
   149b0:	4619      	mov	r1, r3
   149b2:	4803      	ldr	r0, [pc, #12]	; (149c0 <Gpio::Set(GpioInterface::State)+0x40>)
   149b4:	f7fe fbd2 	bl	1315c <__cyg_profile_func_exit>
  }
   149b8:	bf00      	nop
   149ba:	b002      	add	sp, #8
   149bc:	bd10      	pop	{r4, pc}
   149be:	bf00      	nop
   149c0:	00014981 	.word	0x00014981

000149c4 <Gpio::Toggle()>:
  // Toggle the output of a GPIO output pin
  void Toggle() override
   149c4:	b530      	push	{r4, r5, lr}
   149c6:	b083      	sub	sp, #12
   149c8:	4675      	mov	r5, lr
   149ca:	9001      	str	r0, [sp, #4]
   149cc:	462b      	mov	r3, r5
   149ce:	4619      	mov	r1, r3
   149d0:	4815      	ldr	r0, [pc, #84]	; (14a28 <Gpio::Toggle()+0x64>)
   149d2:	f7fe fbaf 	bl	13134 <__cyg_profile_func_enter>
  {
    gpio_port[pin_->GetPort()]->PIN ^= (1 << pin_->GetPin());
   149d6:	9b01      	ldr	r3, [sp, #4]
   149d8:	689a      	ldr	r2, [r3, #8]
   149da:	9b01      	ldr	r3, [sp, #4]
   149dc:	689b      	ldr	r3, [r3, #8]
   149de:	681b      	ldr	r3, [r3, #0]
   149e0:	3330      	adds	r3, #48	; 0x30
   149e2:	681b      	ldr	r3, [r3, #0]
   149e4:	4610      	mov	r0, r2
   149e6:	4798      	blx	r3
   149e8:	4603      	mov	r3, r0
   149ea:	461a      	mov	r2, r3
   149ec:	2301      	movs	r3, #1
   149ee:	fa03 f402 	lsl.w	r4, r3, r2
   149f2:	9b01      	ldr	r3, [sp, #4]
   149f4:	689a      	ldr	r2, [r3, #8]
   149f6:	9b01      	ldr	r3, [sp, #4]
   149f8:	689b      	ldr	r3, [r3, #8]
   149fa:	681b      	ldr	r3, [r3, #0]
   149fc:	332c      	adds	r3, #44	; 0x2c
   149fe:	681b      	ldr	r3, [r3, #0]
   14a00:	4610      	mov	r0, r2
   14a02:	4798      	blx	r3
   14a04:	4603      	mov	r3, r0
   14a06:	461a      	mov	r2, r3
   14a08:	4b08      	ldr	r3, [pc, #32]	; (14a2c <Gpio::Toggle()+0x68>)
   14a0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   14a0e:	695a      	ldr	r2, [r3, #20]
   14a10:	4621      	mov	r1, r4
   14a12:	404a      	eors	r2, r1
   14a14:	615a      	str	r2, [r3, #20]
   14a16:	462b      	mov	r3, r5
   14a18:	4619      	mov	r1, r3
   14a1a:	4803      	ldr	r0, [pc, #12]	; (14a28 <Gpio::Toggle()+0x64>)
   14a1c:	f7fe fb9e 	bl	1315c <__cyg_profile_func_exit>
  }
   14a20:	bf00      	nop
   14a22:	b003      	add	sp, #12
   14a24:	bd30      	pop	{r4, r5, pc}
   14a26:	bf00      	nop
   14a28:	000149c5 	.word	0x000149c5
   14a2c:	10000188 	.word	0x10000188

00014a30 <Gpio::ReadState()>:
  // Returns the current State state of the pin
  State ReadState(void) override
   14a30:	b530      	push	{r4, r5, lr}
   14a32:	b085      	sub	sp, #20
   14a34:	4675      	mov	r5, lr
   14a36:	9001      	str	r0, [sp, #4]
   14a38:	462b      	mov	r3, r5
   14a3a:	4619      	mov	r1, r3
   14a3c:	4818      	ldr	r0, [pc, #96]	; (14aa0 <Gpio::ReadState()+0x70>)
   14a3e:	f7fe fb79 	bl	13134 <__cyg_profile_func_enter>
  {
    bool state = (gpio_port[pin_->GetPort()]->PIN >> pin_->GetPin()) & 1;
   14a42:	9b01      	ldr	r3, [sp, #4]
   14a44:	689a      	ldr	r2, [r3, #8]
   14a46:	9b01      	ldr	r3, [sp, #4]
   14a48:	689b      	ldr	r3, [r3, #8]
   14a4a:	681b      	ldr	r3, [r3, #0]
   14a4c:	332c      	adds	r3, #44	; 0x2c
   14a4e:	681b      	ldr	r3, [r3, #0]
   14a50:	4610      	mov	r0, r2
   14a52:	4798      	blx	r3
   14a54:	4603      	mov	r3, r0
   14a56:	461a      	mov	r2, r3
   14a58:	4b12      	ldr	r3, [pc, #72]	; (14aa4 <Gpio::ReadState()+0x74>)
   14a5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   14a5e:	695c      	ldr	r4, [r3, #20]
   14a60:	9b01      	ldr	r3, [sp, #4]
   14a62:	689a      	ldr	r2, [r3, #8]
   14a64:	9b01      	ldr	r3, [sp, #4]
   14a66:	689b      	ldr	r3, [r3, #8]
   14a68:	681b      	ldr	r3, [r3, #0]
   14a6a:	3330      	adds	r3, #48	; 0x30
   14a6c:	681b      	ldr	r3, [r3, #0]
   14a6e:	4610      	mov	r0, r2
   14a70:	4798      	blx	r3
   14a72:	4603      	mov	r3, r0
   14a74:	fa24 f303 	lsr.w	r3, r4, r3
   14a78:	f003 0301 	and.w	r3, r3, #1
   14a7c:	2b00      	cmp	r3, #0
   14a7e:	bf14      	ite	ne
   14a80:	2301      	movne	r3, #1
   14a82:	2300      	moveq	r3, #0
   14a84:	f88d 300f 	strb.w	r3, [sp, #15]
    return static_cast<State>(state);
   14a88:	f89d 400f 	ldrb.w	r4, [sp, #15]
   14a8c:	462b      	mov	r3, r5
   14a8e:	4619      	mov	r1, r3
   14a90:	4803      	ldr	r0, [pc, #12]	; (14aa0 <Gpio::ReadState()+0x70>)
   14a92:	f7fe fb63 	bl	1315c <__cyg_profile_func_exit>
   14a96:	4623      	mov	r3, r4
  }
   14a98:	4618      	mov	r0, r3
   14a9a:	b005      	add	sp, #20
   14a9c:	bd30      	pop	{r4, r5, pc}
   14a9e:	bf00      	nop
   14aa0:	00014a31 	.word	0x00014a31
   14aa4:	10000188 	.word	0x10000188

00014aa8 <Gpio::Read()>:
  // Returns true if input or output pin is high
  bool Read(void) override
   14aa8:	b530      	push	{r4, r5, lr}
   14aaa:	b083      	sub	sp, #12
   14aac:	4675      	mov	r5, lr
   14aae:	9001      	str	r0, [sp, #4]
   14ab0:	462b      	mov	r3, r5
   14ab2:	4619      	mov	r1, r3
   14ab4:	4816      	ldr	r0, [pc, #88]	; (14b10 <Gpio::Read()+0x68>)
   14ab6:	f7fe fb3d 	bl	13134 <__cyg_profile_func_enter>
  {
    return (gpio_port[pin_->GetPort()]->PIN >> pin_->GetPin()) & 1;
   14aba:	9b01      	ldr	r3, [sp, #4]
   14abc:	689a      	ldr	r2, [r3, #8]
   14abe:	9b01      	ldr	r3, [sp, #4]
   14ac0:	689b      	ldr	r3, [r3, #8]
   14ac2:	681b      	ldr	r3, [r3, #0]
   14ac4:	332c      	adds	r3, #44	; 0x2c
   14ac6:	681b      	ldr	r3, [r3, #0]
   14ac8:	4610      	mov	r0, r2
   14aca:	4798      	blx	r3
   14acc:	4603      	mov	r3, r0
   14ace:	461a      	mov	r2, r3
   14ad0:	4b10      	ldr	r3, [pc, #64]	; (14b14 <Gpio::Read()+0x6c>)
   14ad2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   14ad6:	695c      	ldr	r4, [r3, #20]
   14ad8:	9b01      	ldr	r3, [sp, #4]
   14ada:	689a      	ldr	r2, [r3, #8]
   14adc:	9b01      	ldr	r3, [sp, #4]
   14ade:	689b      	ldr	r3, [r3, #8]
   14ae0:	681b      	ldr	r3, [r3, #0]
   14ae2:	3330      	adds	r3, #48	; 0x30
   14ae4:	681b      	ldr	r3, [r3, #0]
   14ae6:	4610      	mov	r0, r2
   14ae8:	4798      	blx	r3
   14aea:	4603      	mov	r3, r0
   14aec:	fa24 f303 	lsr.w	r3, r4, r3
   14af0:	f003 0301 	and.w	r3, r3, #1
   14af4:	2b00      	cmp	r3, #0
   14af6:	bf14      	ite	ne
   14af8:	2301      	movne	r3, #1
   14afa:	2300      	moveq	r3, #0
   14afc:	b2dc      	uxtb	r4, r3
   14afe:	462b      	mov	r3, r5
   14b00:	4619      	mov	r1, r3
   14b02:	4803      	ldr	r0, [pc, #12]	; (14b10 <Gpio::Read()+0x68>)
   14b04:	f7fe fb2a 	bl	1315c <__cyg_profile_func_exit>
   14b08:	4623      	mov	r3, r4
  }
   14b0a:	4618      	mov	r0, r3
   14b0c:	b003      	add	sp, #12
   14b0e:	bd30      	pop	{r4, r5, pc}
   14b10:	00014aa9 	.word	0x00014aa9
   14b14:	10000188 	.word	0x10000188

00014b18 <Gpio::GetPin()>:
  PinInterface & GetPin() override
   14b18:	b530      	push	{r4, r5, lr}
   14b1a:	b083      	sub	sp, #12
   14b1c:	4675      	mov	r5, lr
   14b1e:	9001      	str	r0, [sp, #4]
   14b20:	462b      	mov	r3, r5
   14b22:	4619      	mov	r1, r3
   14b24:	4806      	ldr	r0, [pc, #24]	; (14b40 <Gpio::GetPin()+0x28>)
   14b26:	f7fe fb05 	bl	13134 <__cyg_profile_func_enter>
  {
    return *pin_;
   14b2a:	9b01      	ldr	r3, [sp, #4]
   14b2c:	689c      	ldr	r4, [r3, #8]
   14b2e:	462b      	mov	r3, r5
   14b30:	4619      	mov	r1, r3
   14b32:	4803      	ldr	r0, [pc, #12]	; (14b40 <Gpio::GetPin()+0x28>)
   14b34:	f7fe fb12 	bl	1315c <__cyg_profile_func_exit>
   14b38:	4623      	mov	r3, r4
  }
   14b3a:	4618      	mov	r0, r3
   14b3c:	b003      	add	sp, #12
   14b3e:	bd30      	pop	{r4, r5, pc}
   14b40:	00014b19 	.word	0x00014b19

00014b44 <Gpio::ValidPortCheck()>:

  // Checks if the selected gpio port is valid for external interrupts.
  bool ValidPortCheck()
   14b44:	b530      	push	{r4, r5, lr}
   14b46:	b087      	sub	sp, #28
   14b48:	4675      	mov	r5, lr
   14b4a:	9003      	str	r0, [sp, #12]
   14b4c:	462b      	mov	r3, r5
   14b4e:	4619      	mov	r1, r3
   14b50:	4817      	ldr	r0, [pc, #92]	; (14bb0 <Gpio::ValidPortCheck()+0x6c>)
   14b52:	f7fe faef 	bl	13134 <__cyg_profile_func_enter>
  {
    bool is_valid = (interupt_port_ <= 1);
   14b56:	9b03      	ldr	r3, [sp, #12]
   14b58:	791b      	ldrb	r3, [r3, #4]
   14b5a:	2b01      	cmp	r3, #1
   14b5c:	bf94      	ite	ls
   14b5e:	2301      	movls	r3, #1
   14b60:	2300      	movhi	r3, #0
   14b62:	b2db      	uxtb	r3, r3
   14b64:	f88d 3017 	strb.w	r3, [sp, #23]
    SJ2_ASSERT_WARNING(is_valid,
   14b68:	f89d 3017 	ldrb.w	r3, [sp, #23]
   14b6c:	f083 0301 	eor.w	r3, r3, #1
   14b70:	b2db      	uxtb	r3, r3
   14b72:	2b00      	cmp	r3, #0
   14b74:	d010      	beq.n	14b98 <Gpio::ValidPortCheck()+0x54>
   14b76:	9b03      	ldr	r3, [sp, #12]
   14b78:	689a      	ldr	r2, [r3, #8]
   14b7a:	9b03      	ldr	r3, [sp, #12]
   14b7c:	689b      	ldr	r3, [r3, #8]
   14b7e:	681b      	ldr	r3, [r3, #0]
   14b80:	332c      	adds	r3, #44	; 0x2c
   14b82:	681b      	ldr	r3, [r3, #0]
   14b84:	4610      	mov	r0, r2
   14b86:	4798      	blx	r3
   14b88:	4603      	mov	r3, r0
   14b8a:	9300      	str	r3, [sp, #0]
   14b8c:	23a6      	movs	r3, #166	; 0xa6
   14b8e:	4a09      	ldr	r2, [pc, #36]	; (14bb4 <Gpio::ValidPortCheck()+0x70>)
   14b90:	4909      	ldr	r1, [pc, #36]	; (14bb8 <Gpio::ValidPortCheck()+0x74>)
   14b92:	480a      	ldr	r0, [pc, #40]	; (14bbc <Gpio::ValidPortCheck()+0x78>)
   14b94:	f7ff fd2e 	bl	145f4 <printf>
                       "Port %d cannot be used for External Interrupts. Need "
                       "to use GPIO on Port 0 or 2.",
                       pin_->GetPort());
    return is_valid;
   14b98:	f89d 4017 	ldrb.w	r4, [sp, #23]
   14b9c:	462b      	mov	r3, r5
   14b9e:	4619      	mov	r1, r3
   14ba0:	4803      	ldr	r0, [pc, #12]	; (14bb0 <Gpio::ValidPortCheck()+0x6c>)
   14ba2:	f7fe fadb 	bl	1315c <__cyg_profile_func_exit>
   14ba6:	4623      	mov	r3, r4
  }
   14ba8:	4618      	mov	r0, r3
   14baa:	b007      	add	sp, #28
   14bac:	bd30      	pop	{r4, r5, pc}
   14bae:	bf00      	nop
   14bb0:	00014b45 	.word	0x00014b45
   14bb4:	000195e0 	.word	0x000195e0
   14bb8:	00018fd4 	.word	0x00018fd4
   14bbc:	000184a4 	.word	0x000184a4

00014bc0 <Gpio::SetInterruptRoutine(void (*)())>:

  // Assigns the developer's ISR function to the port/pin gpio instance.
  void SetInterruptRoutine(IsrPointer function) override
   14bc0:	b570      	push	{r4, r5, r6, lr}
   14bc2:	b082      	sub	sp, #8
   14bc4:	4676      	mov	r6, lr
   14bc6:	9001      	str	r0, [sp, #4]
   14bc8:	9100      	str	r1, [sp, #0]
   14bca:	4633      	mov	r3, r6
   14bcc:	4619      	mov	r1, r3
   14bce:	4811      	ldr	r0, [pc, #68]	; (14c14 <Gpio::SetInterruptRoutine(void (*)())+0x54>)
   14bd0:	f7fe fab0 	bl	13134 <__cyg_profile_func_enter>
  {
    ValidPortCheck();
   14bd4:	9801      	ldr	r0, [sp, #4]
   14bd6:	f7ff ffb5 	bl	14b44 <Gpio::ValidPortCheck()>
    interrupthandlers[interupt_port_][pin_->GetPin()] = function;
   14bda:	9c00      	ldr	r4, [sp, #0]
   14bdc:	9b01      	ldr	r3, [sp, #4]
   14bde:	791b      	ldrb	r3, [r3, #4]
   14be0:	461d      	mov	r5, r3
   14be2:	9b01      	ldr	r3, [sp, #4]
   14be4:	689a      	ldr	r2, [r3, #8]
   14be6:	9b01      	ldr	r3, [sp, #4]
   14be8:	689b      	ldr	r3, [r3, #8]
   14bea:	681b      	ldr	r3, [r3, #0]
   14bec:	3330      	adds	r3, #48	; 0x30
   14bee:	681b      	ldr	r3, [r3, #0]
   14bf0:	4610      	mov	r0, r2
   14bf2:	4798      	blx	r3
   14bf4:	4603      	mov	r3, r0
   14bf6:	4619      	mov	r1, r3
   14bf8:	4a07      	ldr	r2, [pc, #28]	; (14c18 <Gpio::SetInterruptRoutine(void (*)())+0x58>)
   14bfa:	016b      	lsls	r3, r5, #5
   14bfc:	440b      	add	r3, r1
   14bfe:	f842 4023 	str.w	r4, [r2, r3, lsl #2]
   14c02:	4633      	mov	r3, r6
   14c04:	4619      	mov	r1, r3
   14c06:	4803      	ldr	r0, [pc, #12]	; (14c14 <Gpio::SetInterruptRoutine(void (*)())+0x54>)
   14c08:	f7fe faa8 	bl	1315c <__cyg_profile_func_exit>
  }
   14c0c:	bf00      	nop
   14c0e:	b002      	add	sp, #8
   14c10:	bd70      	pop	{r4, r5, r6, pc}
   14c12:	bf00      	nop
   14c14:	00014bc1 	.word	0x00014bc1
   14c18:	10000460 	.word	0x10000460

00014c1c <Gpio::ClearInterruptRoutine()>:

  // Clears the developers ISR function from the port/pin gio instance.
  void ClearInterruptRoutine() override
   14c1c:	b530      	push	{r4, r5, lr}
   14c1e:	b083      	sub	sp, #12
   14c20:	4675      	mov	r5, lr
   14c22:	9001      	str	r0, [sp, #4]
   14c24:	462b      	mov	r3, r5
   14c26:	4619      	mov	r1, r3
   14c28:	480f      	ldr	r0, [pc, #60]	; (14c68 <Gpio::ClearInterruptRoutine()+0x4c>)
   14c2a:	f7fe fa83 	bl	13134 <__cyg_profile_func_enter>
  {
    interrupthandlers[interupt_port_][pin_->GetPin()] = nullptr;
   14c2e:	9b01      	ldr	r3, [sp, #4]
   14c30:	791b      	ldrb	r3, [r3, #4]
   14c32:	461c      	mov	r4, r3
   14c34:	9b01      	ldr	r3, [sp, #4]
   14c36:	689a      	ldr	r2, [r3, #8]
   14c38:	9b01      	ldr	r3, [sp, #4]
   14c3a:	689b      	ldr	r3, [r3, #8]
   14c3c:	681b      	ldr	r3, [r3, #0]
   14c3e:	3330      	adds	r3, #48	; 0x30
   14c40:	681b      	ldr	r3, [r3, #0]
   14c42:	4610      	mov	r0, r2
   14c44:	4798      	blx	r3
   14c46:	4603      	mov	r3, r0
   14c48:	4619      	mov	r1, r3
   14c4a:	4a08      	ldr	r2, [pc, #32]	; (14c6c <Gpio::ClearInterruptRoutine()+0x50>)
   14c4c:	0163      	lsls	r3, r4, #5
   14c4e:	440b      	add	r3, r1
   14c50:	2100      	movs	r1, #0
   14c52:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
   14c56:	462b      	mov	r3, r5
   14c58:	4619      	mov	r1, r3
   14c5a:	4803      	ldr	r0, [pc, #12]	; (14c68 <Gpio::ClearInterruptRoutine()+0x4c>)
   14c5c:	f7fe fa7e 	bl	1315c <__cyg_profile_func_exit>
  }
   14c60:	bf00      	nop
   14c62:	b003      	add	sp, #12
   14c64:	bd30      	pop	{r4, r5, pc}
   14c66:	bf00      	nop
   14c68:	00014c1d 	.word	0x00014c1d
   14c6c:	10000460 	.word	0x10000460

00014c70 <unsigned char util::Value<GpioInterface::Edge, unsigned char>(GpioInterface::Edge)>:
constexpr Type Value(Enum enum_type_value)
   14c70:	b530      	push	{r4, r5, lr}
   14c72:	b083      	sub	sp, #12
   14c74:	4675      	mov	r5, lr
   14c76:	4603      	mov	r3, r0
   14c78:	f88d 3007 	strb.w	r3, [sp, #7]
   14c7c:	462b      	mov	r3, r5
   14c7e:	4619      	mov	r1, r3
   14c80:	4806      	ldr	r0, [pc, #24]	; (14c9c <unsigned char util::Value<GpioInterface::Edge, unsigned char>(GpioInterface::Edge)+0x2c>)
   14c82:	f7fe fa57 	bl	13134 <__cyg_profile_func_enter>
  return static_cast<Type>(enum_type_value);
   14c86:	f89d 4007 	ldrb.w	r4, [sp, #7]
   14c8a:	462b      	mov	r3, r5
   14c8c:	4619      	mov	r1, r3
   14c8e:	4803      	ldr	r0, [pc, #12]	; (14c9c <unsigned char util::Value<GpioInterface::Edge, unsigned char>(GpioInterface::Edge)+0x2c>)
   14c90:	f7fe fa64 	bl	1315c <__cyg_profile_func_exit>
   14c94:	4623      	mov	r3, r4
}
   14c96:	4618      	mov	r0, r3
   14c98:	b003      	add	sp, #12
   14c9a:	bd30      	pop	{r4, r5, pc}
   14c9c:	00014c71 	.word	0x00014c71

00014ca0 <Gpio::SetInterruptEdge(GpioInterface::Edge)>:

  // Sets the selected edge that the gpio interrupt will be triggered on.
  void SetInterruptEdge(Edge edge) override
   14ca0:	b510      	push	{r4, lr}
   14ca2:	b084      	sub	sp, #16
   14ca4:	4674      	mov	r4, lr
   14ca6:	9003      	str	r0, [sp, #12]
   14ca8:	460b      	mov	r3, r1
   14caa:	f88d 300b 	strb.w	r3, [sp, #11]
   14cae:	4623      	mov	r3, r4
   14cb0:	4619      	mov	r1, r3
   14cb2:	4819      	ldr	r0, [pc, #100]	; (14d18 <Gpio::SetInterruptEdge(GpioInterface::Edge)+0x78>)
   14cb4:	f7fe fa3e 	bl	13134 <__cyg_profile_func_enter>
  {
    ValidPortCheck();
   14cb8:	9803      	ldr	r0, [sp, #12]
   14cba:	f7ff ff43 	bl	14b44 <Gpio::ValidPortCheck()>
    switch (edge)
   14cbe:	f89d 300b 	ldrb.w	r3, [sp, #11]
   14cc2:	2b01      	cmp	r3, #1
   14cc4:	d008      	beq.n	14cd8 <Gpio::SetInterruptEdge(GpioInterface::Edge)+0x38>
   14cc6:	2b01      	cmp	r3, #1
   14cc8:	d302      	bcc.n	14cd0 <Gpio::SetInterruptEdge(GpioInterface::Edge)+0x30>
   14cca:	2b02      	cmp	r3, #2
   14ccc:	d008      	beq.n	14ce0 <Gpio::SetInterruptEdge(GpioInterface::Edge)+0x40>
   14cce:	e00e      	b.n	14cee <Gpio::SetInterruptEdge(GpioInterface::Edge)+0x4e>
    {
      case Edge::kEdgeRising:
      {
        SetEdgeRising();
   14cd0:	9803      	ldr	r0, [sp, #12]
   14cd2:	f000 f8b1 	bl	14e38 <Gpio::SetEdgeRising()>
        break;
   14cd6:	e017      	b.n	14d08 <Gpio::SetInterruptEdge(GpioInterface::Edge)+0x68>
      }
      case Edge::kEdgeFalling:
      {
        SetEdgeFalling();
   14cd8:	9803      	ldr	r0, [sp, #12]
   14cda:	f000 f8eb 	bl	14eb4 <Gpio::SetEdgeFalling()>
        break;
   14cde:	e013      	b.n	14d08 <Gpio::SetInterruptEdge(GpioInterface::Edge)+0x68>
      }
      case Edge::kEdgeBoth:
      {
        SetEdgeRising();
   14ce0:	9803      	ldr	r0, [sp, #12]
   14ce2:	f000 f8a9 	bl	14e38 <Gpio::SetEdgeRising()>
        SetEdgeFalling();
   14ce6:	9803      	ldr	r0, [sp, #12]
   14ce8:	f000 f8e4 	bl	14eb4 <Gpio::SetEdgeFalling()>
        break;
   14cec:	e00c      	b.n	14d08 <Gpio::SetInterruptEdge(GpioInterface::Edge)+0x68>
      }
      default:
      {
        LOG_WARNING(
   14cee:	f89d 300b 	ldrb.w	r3, [sp, #11]
   14cf2:	4618      	mov	r0, r3
   14cf4:	f7ff ffbc 	bl	14c70 <unsigned char util::Value<GpioInterface::Edge, unsigned char>(GpioInterface::Edge)>
   14cf8:	4603      	mov	r3, r0
   14cfa:	9300      	str	r3, [sp, #0]
   14cfc:	23d2      	movs	r3, #210	; 0xd2
   14cfe:	4a07      	ldr	r2, [pc, #28]	; (14d1c <Gpio::SetInterruptEdge(GpioInterface::Edge)+0x7c>)
   14d00:	4907      	ldr	r1, [pc, #28]	; (14d20 <Gpio::SetInterruptEdge(GpioInterface::Edge)+0x80>)
   14d02:	4808      	ldr	r0, [pc, #32]	; (14d24 <Gpio::SetInterruptEdge(GpioInterface::Edge)+0x84>)
   14d04:	f7ff fc76 	bl	145f4 <printf>
   14d08:	4623      	mov	r3, r4
   14d0a:	4619      	mov	r1, r3
   14d0c:	4802      	ldr	r0, [pc, #8]	; (14d18 <Gpio::SetInterruptEdge(GpioInterface::Edge)+0x78>)
   14d0e:	f7fe fa25 	bl	1315c <__cyg_profile_func_exit>
            "Edge %d cannot be used for External Interrupts."
            "Need to use a rising, falling, or both configuration.",
            util::Value(edge));
      }
    }
  }
   14d12:	bf00      	nop
   14d14:	b004      	add	sp, #16
   14d16:	bd10      	pop	{r4, pc}
   14d18:	00014ca1 	.word	0x00014ca1
   14d1c:	000195fc 	.word	0x000195fc
   14d20:	00018fe0 	.word	0x00018fe0
   14d24:	00018534 	.word	0x00018534

00014d28 <Gpio::ClearInterruptEdge(GpioInterface::Edge)>:

  // Clears the seleted edge of the gpio interrupt from being triggered.
  void ClearInterruptEdge(Edge edge) override
   14d28:	b510      	push	{r4, lr}
   14d2a:	b084      	sub	sp, #16
   14d2c:	4674      	mov	r4, lr
   14d2e:	9003      	str	r0, [sp, #12]
   14d30:	460b      	mov	r3, r1
   14d32:	f88d 300b 	strb.w	r3, [sp, #11]
   14d36:	4623      	mov	r3, r4
   14d38:	4619      	mov	r1, r3
   14d3a:	4819      	ldr	r0, [pc, #100]	; (14da0 <Gpio::ClearInterruptEdge(GpioInterface::Edge)+0x78>)
   14d3c:	f7fe f9fa 	bl	13134 <__cyg_profile_func_enter>
  {
    ValidPortCheck();
   14d40:	9803      	ldr	r0, [sp, #12]
   14d42:	f7ff feff 	bl	14b44 <Gpio::ValidPortCheck()>
    switch (edge)
   14d46:	f89d 300b 	ldrb.w	r3, [sp, #11]
   14d4a:	2b01      	cmp	r3, #1
   14d4c:	d008      	beq.n	14d60 <Gpio::ClearInterruptEdge(GpioInterface::Edge)+0x38>
   14d4e:	2b01      	cmp	r3, #1
   14d50:	d302      	bcc.n	14d58 <Gpio::ClearInterruptEdge(GpioInterface::Edge)+0x30>
   14d52:	2b02      	cmp	r3, #2
   14d54:	d008      	beq.n	14d68 <Gpio::ClearInterruptEdge(GpioInterface::Edge)+0x40>
   14d56:	e00e      	b.n	14d76 <Gpio::ClearInterruptEdge(GpioInterface::Edge)+0x4e>
    {
      case Edge::kEdgeRising:
      {
        ClearEdgeRising();
   14d58:	9803      	ldr	r0, [sp, #12]
   14d5a:	f000 f8e9 	bl	14f30 <Gpio::ClearEdgeRising()>
        break;
   14d5e:	e017      	b.n	14d90 <Gpio::ClearInterruptEdge(GpioInterface::Edge)+0x68>
      }
      case Edge::kEdgeFalling:
      {
        ClearEdgeFalling();
   14d60:	9803      	ldr	r0, [sp, #12]
   14d62:	f000 f923 	bl	14fac <Gpio::ClearEdgeFalling()>
        break;
   14d66:	e013      	b.n	14d90 <Gpio::ClearInterruptEdge(GpioInterface::Edge)+0x68>
      }
      case Edge::kEdgeBoth:
      {
        ClearEdgeRising();
   14d68:	9803      	ldr	r0, [sp, #12]
   14d6a:	f000 f8e1 	bl	14f30 <Gpio::ClearEdgeRising()>
        ClearEdgeFalling();
   14d6e:	9803      	ldr	r0, [sp, #12]
   14d70:	f000 f91c 	bl	14fac <Gpio::ClearEdgeFalling()>
        break;
   14d74:	e00c      	b.n	14d90 <Gpio::ClearInterruptEdge(GpioInterface::Edge)+0x68>
      }
      default:
      {
        LOG_WARNING(
   14d76:	f89d 300b 	ldrb.w	r3, [sp, #11]
   14d7a:	4618      	mov	r0, r3
   14d7c:	f7ff ff78 	bl	14c70 <unsigned char util::Value<GpioInterface::Edge, unsigned char>(GpioInterface::Edge)>
   14d80:	4603      	mov	r3, r0
   14d82:	9300      	str	r3, [sp, #0]
   14d84:	23f2      	movs	r3, #242	; 0xf2
   14d86:	4a07      	ldr	r2, [pc, #28]	; (14da4 <Gpio::ClearInterruptEdge(GpioInterface::Edge)+0x7c>)
   14d88:	4907      	ldr	r1, [pc, #28]	; (14da8 <Gpio::ClearInterruptEdge(GpioInterface::Edge)+0x80>)
   14d8a:	4808      	ldr	r0, [pc, #32]	; (14dac <Gpio::ClearInterruptEdge(GpioInterface::Edge)+0x84>)
   14d8c:	f7ff fc32 	bl	145f4 <printf>
   14d90:	4623      	mov	r3, r4
   14d92:	4619      	mov	r1, r3
   14d94:	4802      	ldr	r0, [pc, #8]	; (14da0 <Gpio::ClearInterruptEdge(GpioInterface::Edge)+0x78>)
   14d96:	f7fe f9e1 	bl	1315c <__cyg_profile_func_exit>
            "Edge %d cannot be used for External Interrupts."
            "Need to use a rising, falling, or both configuration.",
           util::Value(edge));
      }
    }
  }
   14d9a:	bf00      	nop
   14d9c:	b004      	add	sp, #16
   14d9e:	bd10      	pop	{r4, pc}
   14da0:	00014d29 	.word	0x00014d29
   14da4:	000195a4 	.word	0x000195a4
   14da8:	00018fec 	.word	0x00018fec
   14dac:	00018534 	.word	0x00018534

00014db0 <Gpio::AttachInterrupt(void (*)(), GpioInterface::Edge)>:

  // Assign the developer's ISR and sets the selected edge that the gpio
  // interrupt will be triggered on.
  void AttachInterrupt(IsrPointer function, Edge edge) override
   14db0:	b510      	push	{r4, lr}
   14db2:	b084      	sub	sp, #16
   14db4:	4674      	mov	r4, lr
   14db6:	9003      	str	r0, [sp, #12]
   14db8:	9102      	str	r1, [sp, #8]
   14dba:	4613      	mov	r3, r2
   14dbc:	f88d 3007 	strb.w	r3, [sp, #7]
   14dc0:	4623      	mov	r3, r4
   14dc2:	4619      	mov	r1, r3
   14dc4:	480b      	ldr	r0, [pc, #44]	; (14df4 <Gpio::AttachInterrupt(void (*)(), GpioInterface::Edge)+0x44>)
   14dc6:	f7fe f9b5 	bl	13134 <__cyg_profile_func_enter>
  {
    ValidPortCheck();
   14dca:	9803      	ldr	r0, [sp, #12]
   14dcc:	f7ff feba 	bl	14b44 <Gpio::ValidPortCheck()>
    SetInterruptRoutine(function);
   14dd0:	9902      	ldr	r1, [sp, #8]
   14dd2:	9803      	ldr	r0, [sp, #12]
   14dd4:	f7ff fef4 	bl	14bc0 <Gpio::SetInterruptRoutine(void (*)())>
    SetInterruptEdge(edge);
   14dd8:	f89d 3007 	ldrb.w	r3, [sp, #7]
   14ddc:	4619      	mov	r1, r3
   14dde:	9803      	ldr	r0, [sp, #12]
   14de0:	f7ff ff5e 	bl	14ca0 <Gpio::SetInterruptEdge(GpioInterface::Edge)>
   14de4:	4623      	mov	r3, r4
   14de6:	4619      	mov	r1, r3
   14de8:	4802      	ldr	r0, [pc, #8]	; (14df4 <Gpio::AttachInterrupt(void (*)(), GpioInterface::Edge)+0x44>)
   14dea:	f7fe f9b7 	bl	1315c <__cyg_profile_func_exit>
  }
   14dee:	bf00      	nop
   14df0:	b004      	add	sp, #16
   14df2:	bd10      	pop	{r4, pc}
   14df4:	00014db1 	.word	0x00014db1

00014df8 <Gpio::DetachInterrupt()>:

  // Removes the developer's ISR and clears the selected edge of the gpio
  // interrupt from being triggered.
  void DetachInterrupt() override
   14df8:	b510      	push	{r4, lr}
   14dfa:	b082      	sub	sp, #8
   14dfc:	4674      	mov	r4, lr
   14dfe:	9001      	str	r0, [sp, #4]
   14e00:	4623      	mov	r3, r4
   14e02:	4619      	mov	r1, r3
   14e04:	480b      	ldr	r0, [pc, #44]	; (14e34 <Gpio::DetachInterrupt()+0x3c>)
   14e06:	f7fe f995 	bl	13134 <__cyg_profile_func_enter>
  {
    ValidPortCheck();
   14e0a:	9801      	ldr	r0, [sp, #4]
   14e0c:	f7ff fe9a 	bl	14b44 <Gpio::ValidPortCheck()>
    ClearInterruptRoutine();
   14e10:	9801      	ldr	r0, [sp, #4]
   14e12:	f7ff ff03 	bl	14c1c <Gpio::ClearInterruptRoutine()>
    ClearEdgeRising();
   14e16:	9801      	ldr	r0, [sp, #4]
   14e18:	f000 f88a 	bl	14f30 <Gpio::ClearEdgeRising()>
    ClearEdgeFalling();
   14e1c:	9801      	ldr	r0, [sp, #4]
   14e1e:	f000 f8c5 	bl	14fac <Gpio::ClearEdgeFalling()>
   14e22:	4623      	mov	r3, r4
   14e24:	4619      	mov	r1, r3
   14e26:	4803      	ldr	r0, [pc, #12]	; (14e34 <Gpio::DetachInterrupt()+0x3c>)
   14e28:	f7fe f998 	bl	1315c <__cyg_profile_func_exit>
  }
   14e2c:	bf00      	nop
   14e2e:	b002      	add	sp, #8
   14e30:	bd10      	pop	{r4, pc}
   14e32:	bf00      	nop
   14e34:	00014df9 	.word	0x00014df9

00014e38 <Gpio::SetEdgeRising()>:
    *interrupt[triggered_port].clear |= (1 << triggered_pin);
  }

 private:
  // Sets the gpio interrupt to trigger on a rising edge.
  void SetEdgeRising()
   14e38:	b530      	push	{r4, r5, lr}
   14e3a:	b083      	sub	sp, #12
   14e3c:	4675      	mov	r5, lr
   14e3e:	9001      	str	r0, [sp, #4]
   14e40:	462b      	mov	r3, r5
   14e42:	4619      	mov	r1, r3
   14e44:	4819      	ldr	r0, [pc, #100]	; (14eac <Gpio::SetEdgeRising()+0x74>)
   14e46:	f7fe f975 	bl	13134 <__cyg_profile_func_enter>
  {
    *interrupt[interupt_port_].enable_rising_edge |= (1 << pin_->GetPin());
   14e4a:	9b01      	ldr	r3, [sp, #4]
   14e4c:	689a      	ldr	r2, [r3, #8]
   14e4e:	9b01      	ldr	r3, [sp, #4]
   14e50:	689b      	ldr	r3, [r3, #8]
   14e52:	681b      	ldr	r3, [r3, #0]
   14e54:	3330      	adds	r3, #48	; 0x30
   14e56:	681b      	ldr	r3, [r3, #0]
   14e58:	4610      	mov	r0, r2
   14e5a:	4798      	blx	r3
   14e5c:	4603      	mov	r3, r0
   14e5e:	461a      	mov	r2, r3
   14e60:	2301      	movs	r3, #1
   14e62:	fa03 f002 	lsl.w	r0, r3, r2
   14e66:	9b01      	ldr	r3, [sp, #4]
   14e68:	791b      	ldrb	r3, [r3, #4]
   14e6a:	4619      	mov	r1, r3
   14e6c:	4a10      	ldr	r2, [pc, #64]	; (14eb0 <Gpio::SetEdgeRising()+0x78>)
   14e6e:	460b      	mov	r3, r1
   14e70:	009b      	lsls	r3, r3, #2
   14e72:	440b      	add	r3, r1
   14e74:	009b      	lsls	r3, r3, #2
   14e76:	4413      	add	r3, r2
   14e78:	330c      	adds	r3, #12
   14e7a:	681b      	ldr	r3, [r3, #0]
   14e7c:	681a      	ldr	r2, [r3, #0]
   14e7e:	4604      	mov	r4, r0
   14e80:	9b01      	ldr	r3, [sp, #4]
   14e82:	791b      	ldrb	r3, [r3, #4]
   14e84:	4618      	mov	r0, r3
   14e86:	490a      	ldr	r1, [pc, #40]	; (14eb0 <Gpio::SetEdgeRising()+0x78>)
   14e88:	4603      	mov	r3, r0
   14e8a:	009b      	lsls	r3, r3, #2
   14e8c:	4403      	add	r3, r0
   14e8e:	009b      	lsls	r3, r3, #2
   14e90:	440b      	add	r3, r1
   14e92:	330c      	adds	r3, #12
   14e94:	681b      	ldr	r3, [r3, #0]
   14e96:	4322      	orrs	r2, r4
   14e98:	601a      	str	r2, [r3, #0]
   14e9a:	462b      	mov	r3, r5
   14e9c:	4619      	mov	r1, r3
   14e9e:	4803      	ldr	r0, [pc, #12]	; (14eac <Gpio::SetEdgeRising()+0x74>)
   14ea0:	f7fe f95c 	bl	1315c <__cyg_profile_func_exit>
  }
   14ea4:	bf00      	nop
   14ea6:	b003      	add	sp, #12
   14ea8:	bd30      	pop	{r4, r5, pc}
   14eaa:	bf00      	nop
   14eac:	00014e39 	.word	0x00014e39
   14eb0:	100001a0 	.word	0x100001a0

00014eb4 <Gpio::SetEdgeFalling()>:

  // Sets the gpio interrupt to trigger on a falling edge.
  void SetEdgeFalling()
   14eb4:	b530      	push	{r4, r5, lr}
   14eb6:	b083      	sub	sp, #12
   14eb8:	4675      	mov	r5, lr
   14eba:	9001      	str	r0, [sp, #4]
   14ebc:	462b      	mov	r3, r5
   14ebe:	4619      	mov	r1, r3
   14ec0:	4819      	ldr	r0, [pc, #100]	; (14f28 <Gpio::SetEdgeFalling()+0x74>)
   14ec2:	f7fe f937 	bl	13134 <__cyg_profile_func_enter>
  {
    *interrupt[interupt_port_].enable_falling_edge |= (1 << pin_->GetPin());
   14ec6:	9b01      	ldr	r3, [sp, #4]
   14ec8:	689a      	ldr	r2, [r3, #8]
   14eca:	9b01      	ldr	r3, [sp, #4]
   14ecc:	689b      	ldr	r3, [r3, #8]
   14ece:	681b      	ldr	r3, [r3, #0]
   14ed0:	3330      	adds	r3, #48	; 0x30
   14ed2:	681b      	ldr	r3, [r3, #0]
   14ed4:	4610      	mov	r0, r2
   14ed6:	4798      	blx	r3
   14ed8:	4603      	mov	r3, r0
   14eda:	461a      	mov	r2, r3
   14edc:	2301      	movs	r3, #1
   14ede:	fa03 f002 	lsl.w	r0, r3, r2
   14ee2:	9b01      	ldr	r3, [sp, #4]
   14ee4:	791b      	ldrb	r3, [r3, #4]
   14ee6:	4619      	mov	r1, r3
   14ee8:	4a10      	ldr	r2, [pc, #64]	; (14f2c <Gpio::SetEdgeFalling()+0x78>)
   14eea:	460b      	mov	r3, r1
   14eec:	009b      	lsls	r3, r3, #2
   14eee:	440b      	add	r3, r1
   14ef0:	009b      	lsls	r3, r3, #2
   14ef2:	4413      	add	r3, r2
   14ef4:	3310      	adds	r3, #16
   14ef6:	681b      	ldr	r3, [r3, #0]
   14ef8:	681a      	ldr	r2, [r3, #0]
   14efa:	4604      	mov	r4, r0
   14efc:	9b01      	ldr	r3, [sp, #4]
   14efe:	791b      	ldrb	r3, [r3, #4]
   14f00:	4618      	mov	r0, r3
   14f02:	490a      	ldr	r1, [pc, #40]	; (14f2c <Gpio::SetEdgeFalling()+0x78>)
   14f04:	4603      	mov	r3, r0
   14f06:	009b      	lsls	r3, r3, #2
   14f08:	4403      	add	r3, r0
   14f0a:	009b      	lsls	r3, r3, #2
   14f0c:	440b      	add	r3, r1
   14f0e:	3310      	adds	r3, #16
   14f10:	681b      	ldr	r3, [r3, #0]
   14f12:	4322      	orrs	r2, r4
   14f14:	601a      	str	r2, [r3, #0]
   14f16:	462b      	mov	r3, r5
   14f18:	4619      	mov	r1, r3
   14f1a:	4803      	ldr	r0, [pc, #12]	; (14f28 <Gpio::SetEdgeFalling()+0x74>)
   14f1c:	f7fe f91e 	bl	1315c <__cyg_profile_func_exit>
  }
   14f20:	bf00      	nop
   14f22:	b003      	add	sp, #12
   14f24:	bd30      	pop	{r4, r5, pc}
   14f26:	bf00      	nop
   14f28:	00014eb5 	.word	0x00014eb5
   14f2c:	100001a0 	.word	0x100001a0

00014f30 <Gpio::ClearEdgeRising()>:

  // Clears the gpio interrupt to no longer trigger on a rising edge.
  void ClearEdgeRising()
   14f30:	b530      	push	{r4, r5, lr}
   14f32:	b083      	sub	sp, #12
   14f34:	4675      	mov	r5, lr
   14f36:	9001      	str	r0, [sp, #4]
   14f38:	462b      	mov	r3, r5
   14f3a:	4619      	mov	r1, r3
   14f3c:	4819      	ldr	r0, [pc, #100]	; (14fa4 <Gpio::ClearEdgeRising()+0x74>)
   14f3e:	f7fe f8f9 	bl	13134 <__cyg_profile_func_enter>
  {
    *interrupt[interupt_port_].enable_rising_edge &= ~(1 << pin_->GetPin());
   14f42:	9b01      	ldr	r3, [sp, #4]
   14f44:	689a      	ldr	r2, [r3, #8]
   14f46:	9b01      	ldr	r3, [sp, #4]
   14f48:	689b      	ldr	r3, [r3, #8]
   14f4a:	681b      	ldr	r3, [r3, #0]
   14f4c:	3330      	adds	r3, #48	; 0x30
   14f4e:	681b      	ldr	r3, [r3, #0]
   14f50:	4610      	mov	r0, r2
   14f52:	4798      	blx	r3
   14f54:	4603      	mov	r3, r0
   14f56:	461a      	mov	r2, r3
   14f58:	2301      	movs	r3, #1
   14f5a:	4093      	lsls	r3, r2
   14f5c:	43d8      	mvns	r0, r3
   14f5e:	9b01      	ldr	r3, [sp, #4]
   14f60:	791b      	ldrb	r3, [r3, #4]
   14f62:	4619      	mov	r1, r3
   14f64:	4a10      	ldr	r2, [pc, #64]	; (14fa8 <Gpio::ClearEdgeRising()+0x78>)
   14f66:	460b      	mov	r3, r1
   14f68:	009b      	lsls	r3, r3, #2
   14f6a:	440b      	add	r3, r1
   14f6c:	009b      	lsls	r3, r3, #2
   14f6e:	4413      	add	r3, r2
   14f70:	330c      	adds	r3, #12
   14f72:	681b      	ldr	r3, [r3, #0]
   14f74:	681a      	ldr	r2, [r3, #0]
   14f76:	4604      	mov	r4, r0
   14f78:	9b01      	ldr	r3, [sp, #4]
   14f7a:	791b      	ldrb	r3, [r3, #4]
   14f7c:	4618      	mov	r0, r3
   14f7e:	490a      	ldr	r1, [pc, #40]	; (14fa8 <Gpio::ClearEdgeRising()+0x78>)
   14f80:	4603      	mov	r3, r0
   14f82:	009b      	lsls	r3, r3, #2
   14f84:	4403      	add	r3, r0
   14f86:	009b      	lsls	r3, r3, #2
   14f88:	440b      	add	r3, r1
   14f8a:	330c      	adds	r3, #12
   14f8c:	681b      	ldr	r3, [r3, #0]
   14f8e:	4022      	ands	r2, r4
   14f90:	601a      	str	r2, [r3, #0]
   14f92:	462b      	mov	r3, r5
   14f94:	4619      	mov	r1, r3
   14f96:	4803      	ldr	r0, [pc, #12]	; (14fa4 <Gpio::ClearEdgeRising()+0x74>)
   14f98:	f7fe f8e0 	bl	1315c <__cyg_profile_func_exit>
  }
   14f9c:	bf00      	nop
   14f9e:	b003      	add	sp, #12
   14fa0:	bd30      	pop	{r4, r5, pc}
   14fa2:	bf00      	nop
   14fa4:	00014f31 	.word	0x00014f31
   14fa8:	100001a0 	.word	0x100001a0

00014fac <Gpio::ClearEdgeFalling()>:

  // Clears the gpio interrupt to no longer trigger on a falling edge.
  void ClearEdgeFalling()
   14fac:	b530      	push	{r4, r5, lr}
   14fae:	b083      	sub	sp, #12
   14fb0:	4675      	mov	r5, lr
   14fb2:	9001      	str	r0, [sp, #4]
   14fb4:	462b      	mov	r3, r5
   14fb6:	4619      	mov	r1, r3
   14fb8:	4819      	ldr	r0, [pc, #100]	; (15020 <Gpio::ClearEdgeFalling()+0x74>)
   14fba:	f7fe f8bb 	bl	13134 <__cyg_profile_func_enter>
  {
    *interrupt[interupt_port_].enable_falling_edge &= ~(1 << pin_->GetPin());
   14fbe:	9b01      	ldr	r3, [sp, #4]
   14fc0:	689a      	ldr	r2, [r3, #8]
   14fc2:	9b01      	ldr	r3, [sp, #4]
   14fc4:	689b      	ldr	r3, [r3, #8]
   14fc6:	681b      	ldr	r3, [r3, #0]
   14fc8:	3330      	adds	r3, #48	; 0x30
   14fca:	681b      	ldr	r3, [r3, #0]
   14fcc:	4610      	mov	r0, r2
   14fce:	4798      	blx	r3
   14fd0:	4603      	mov	r3, r0
   14fd2:	461a      	mov	r2, r3
   14fd4:	2301      	movs	r3, #1
   14fd6:	4093      	lsls	r3, r2
   14fd8:	43d8      	mvns	r0, r3
   14fda:	9b01      	ldr	r3, [sp, #4]
   14fdc:	791b      	ldrb	r3, [r3, #4]
   14fde:	4619      	mov	r1, r3
   14fe0:	4a10      	ldr	r2, [pc, #64]	; (15024 <Gpio::ClearEdgeFalling()+0x78>)
   14fe2:	460b      	mov	r3, r1
   14fe4:	009b      	lsls	r3, r3, #2
   14fe6:	440b      	add	r3, r1
   14fe8:	009b      	lsls	r3, r3, #2
   14fea:	4413      	add	r3, r2
   14fec:	3310      	adds	r3, #16
   14fee:	681b      	ldr	r3, [r3, #0]
   14ff0:	681a      	ldr	r2, [r3, #0]
   14ff2:	4604      	mov	r4, r0
   14ff4:	9b01      	ldr	r3, [sp, #4]
   14ff6:	791b      	ldrb	r3, [r3, #4]
   14ff8:	4618      	mov	r0, r3
   14ffa:	490a      	ldr	r1, [pc, #40]	; (15024 <Gpio::ClearEdgeFalling()+0x78>)
   14ffc:	4603      	mov	r3, r0
   14ffe:	009b      	lsls	r3, r3, #2
   15000:	4403      	add	r3, r0
   15002:	009b      	lsls	r3, r3, #2
   15004:	440b      	add	r3, r1
   15006:	3310      	adds	r3, #16
   15008:	681b      	ldr	r3, [r3, #0]
   1500a:	4022      	ands	r2, r4
   1500c:	601a      	str	r2, [r3, #0]
   1500e:	462b      	mov	r3, r5
   15010:	4619      	mov	r1, r3
   15012:	4803      	ldr	r0, [pc, #12]	; (15020 <Gpio::ClearEdgeFalling()+0x74>)
   15014:	f7fe f8a2 	bl	1315c <__cyg_profile_func_exit>
  }
   15018:	bf00      	nop
   1501a:	b003      	add	sp, #12
   1501c:	bd30      	pop	{r4, r5, pc}
   1501e:	bf00      	nop
   15020:	00014fad 	.word	0x00014fad
   15024:	100001a0 	.word	0x100001a0

00015028 <SystemControllerInterface::SystemControllerInterface()>:
class SystemControllerInterface
   15028:	b082      	sub	sp, #8
   1502a:	9001      	str	r0, [sp, #4]
   1502c:	4a03      	ldr	r2, [pc, #12]	; (1503c <SystemControllerInterface::SystemControllerInterface()+0x14>)
   1502e:	9b01      	ldr	r3, [sp, #4]
   15030:	601a      	str	r2, [r3, #0]
   15032:	9b01      	ldr	r3, [sp, #4]
   15034:	4618      	mov	r0, r3
   15036:	b002      	add	sp, #8
   15038:	4770      	bx	lr
   1503a:	bf00      	nop
   1503c:	000194bc 	.word	0x000194bc

00015040 <Lpc40xxSystemController::Lpc40xxSystemController()>:
  constexpr Lpc40xxSystemController() {}
   15040:	b500      	push	{lr}
   15042:	b083      	sub	sp, #12
   15044:	9001      	str	r0, [sp, #4]
   15046:	9b01      	ldr	r3, [sp, #4]
   15048:	4618      	mov	r0, r3
   1504a:	f7ff ffed 	bl	15028 <SystemControllerInterface::SystemControllerInterface()>
   1504e:	4a04      	ldr	r2, [pc, #16]	; (15060 <Lpc40xxSystemController::Lpc40xxSystemController()+0x20>)
   15050:	9b01      	ldr	r3, [sp, #4]
   15052:	601a      	str	r2, [r3, #0]
   15054:	9b01      	ldr	r3, [sp, #4]
   15056:	4618      	mov	r0, r3
   15058:	b003      	add	sp, #12
   1505a:	f85d fb04 	ldr.w	pc, [sp], #4
   1505e:	bf00      	nop
   15060:	00017f48 	.word	0x00017f48

00015064 <int util::Value<Ssp::Peripheral, int>(Ssp::Peripheral)>:
constexpr Type Value(Enum enum_type_value)
   15064:	b530      	push	{r4, r5, lr}
   15066:	b083      	sub	sp, #12
   15068:	4675      	mov	r5, lr
   1506a:	9001      	str	r0, [sp, #4]
   1506c:	462b      	mov	r3, r5
   1506e:	4619      	mov	r1, r3
   15070:	4806      	ldr	r0, [pc, #24]	; (1508c <int util::Value<Ssp::Peripheral, int>(Ssp::Peripheral)+0x28>)
   15072:	f7fe f85f 	bl	13134 <__cyg_profile_func_enter>
  return static_cast<Type>(enum_type_value);
   15076:	9c01      	ldr	r4, [sp, #4]
   15078:	462b      	mov	r3, r5
   1507a:	4619      	mov	r1, r3
   1507c:	4803      	ldr	r0, [pc, #12]	; (1508c <int util::Value<Ssp::Peripheral, int>(Ssp::Peripheral)+0x28>)
   1507e:	f7fe f86d 	bl	1315c <__cyg_profile_func_exit>
   15082:	4623      	mov	r3, r4
}
   15084:	4618      	mov	r0, r3
   15086:	b003      	add	sp, #12
   15088:	bd30      	pop	{r4, r5, pc}
   1508a:	bf00      	nop
   1508c:	00015065 	.word	0x00015065

00015090 <SspInterface::SspInterface()>:
#include "L0_LowLevel/system_controller.hpp"
#include "L1_Drivers/pin.hpp"
#include "utility/bit.hpp"
#include "utility/enum.hpp"

class SspInterface
   15090:	b530      	push	{r4, r5, lr}
   15092:	b083      	sub	sp, #12
   15094:	4675      	mov	r5, lr
   15096:	9001      	str	r0, [sp, #4]
   15098:	462b      	mov	r3, r5
   1509a:	4619      	mov	r1, r3
   1509c:	4807      	ldr	r0, [pc, #28]	; (150bc <SspInterface::SspInterface()+0x2c>)
   1509e:	f7fe f849 	bl	13134 <__cyg_profile_func_enter>
   150a2:	4a07      	ldr	r2, [pc, #28]	; (150c0 <SspInterface::SspInterface()+0x30>)
   150a4:	9b01      	ldr	r3, [sp, #4]
   150a6:	601a      	str	r2, [r3, #0]
   150a8:	9c01      	ldr	r4, [sp, #4]
   150aa:	462b      	mov	r3, r5
   150ac:	4619      	mov	r1, r3
   150ae:	4803      	ldr	r0, [pc, #12]	; (150bc <SspInterface::SspInterface()+0x2c>)
   150b0:	f7fe f854 	bl	1315c <__cyg_profile_func_exit>
   150b4:	4623      	mov	r3, r4
   150b6:	4618      	mov	r0, r3
   150b8:	b003      	add	sp, #12
   150ba:	bd30      	pop	{r4, r5, pc}
   150bc:	00015091 	.word	0x00015091
   150c0:	00019494 	.word	0x00019494

000150c4 <PinInterface::PinInterface(PinInterface const&)>:
class PinInterface
   150c4:	b530      	push	{r4, r5, lr}
   150c6:	b083      	sub	sp, #12
   150c8:	4675      	mov	r5, lr
   150ca:	9001      	str	r0, [sp, #4]
   150cc:	9100      	str	r1, [sp, #0]
   150ce:	462b      	mov	r3, r5
   150d0:	4619      	mov	r1, r3
   150d2:	4808      	ldr	r0, [pc, #32]	; (150f4 <PinInterface::PinInterface(PinInterface const&)+0x30>)
   150d4:	f7fe f82e 	bl	13134 <__cyg_profile_func_enter>
   150d8:	4a07      	ldr	r2, [pc, #28]	; (150f8 <PinInterface::PinInterface(PinInterface const&)+0x34>)
   150da:	9b01      	ldr	r3, [sp, #4]
   150dc:	601a      	str	r2, [r3, #0]
   150de:	9c01      	ldr	r4, [sp, #4]
   150e0:	462b      	mov	r3, r5
   150e2:	4619      	mov	r1, r3
   150e4:	4803      	ldr	r0, [pc, #12]	; (150f4 <PinInterface::PinInterface(PinInterface const&)+0x30>)
   150e6:	f7fe f839 	bl	1315c <__cyg_profile_func_exit>
   150ea:	4623      	mov	r3, r4
   150ec:	4618      	mov	r0, r3
   150ee:	b003      	add	sp, #12
   150f0:	bd30      	pop	{r4, r5, pc}
   150f2:	bf00      	nop
   150f4:	000150c5 	.word	0x000150c5
   150f8:	00019570 	.word	0x00019570

000150fc <Pin::Pin(Pin const&)>:
class Pin : public PinInterface
   150fc:	b530      	push	{r4, r5, lr}
   150fe:	b083      	sub	sp, #12
   15100:	4675      	mov	r5, lr
   15102:	9001      	str	r0, [sp, #4]
   15104:	9100      	str	r1, [sp, #0]
   15106:	462b      	mov	r3, r5
   15108:	4619      	mov	r1, r3
   1510a:	480f      	ldr	r0, [pc, #60]	; (15148 <Pin::Pin(Pin const&)+0x4c>)
   1510c:	f7fe f812 	bl	13134 <__cyg_profile_func_enter>
   15110:	9b01      	ldr	r3, [sp, #4]
   15112:	9a00      	ldr	r2, [sp, #0]
   15114:	4611      	mov	r1, r2
   15116:	4618      	mov	r0, r3
   15118:	f7ff ffd4 	bl	150c4 <PinInterface::PinInterface(PinInterface const&)>
   1511c:	4a0b      	ldr	r2, [pc, #44]	; (1514c <Pin::Pin(Pin const&)+0x50>)
   1511e:	9b01      	ldr	r3, [sp, #4]
   15120:	601a      	str	r2, [r3, #0]
   15122:	9b00      	ldr	r3, [sp, #0]
   15124:	791a      	ldrb	r2, [r3, #4]
   15126:	9b01      	ldr	r3, [sp, #4]
   15128:	711a      	strb	r2, [r3, #4]
   1512a:	9b00      	ldr	r3, [sp, #0]
   1512c:	795a      	ldrb	r2, [r3, #5]
   1512e:	9b01      	ldr	r3, [sp, #4]
   15130:	715a      	strb	r2, [r3, #5]
   15132:	9c01      	ldr	r4, [sp, #4]
   15134:	462b      	mov	r3, r5
   15136:	4619      	mov	r1, r3
   15138:	4803      	ldr	r0, [pc, #12]	; (15148 <Pin::Pin(Pin const&)+0x4c>)
   1513a:	f7fe f80f 	bl	1315c <__cyg_profile_func_exit>
   1513e:	4623      	mov	r3, r4
   15140:	4618      	mov	r0, r3
   15142:	b003      	add	sp, #12
   15144:	bd30      	pop	{r4, r5, pc}
   15146:	bf00      	nop
   15148:	000150fd 	.word	0x000150fd
   1514c:	00017ed4 	.word	0x00017ed4

00015150 <Ssp::Ssp(Ssp::Peripheral)>:
        pssp_(Peripheral::kSsp0)
  {
  }

  /// User modified constructor. Must be followed by Set functions.
  explicit constexpr Ssp(Peripheral set_pssp)
   15150:	b530      	push	{r4, r5, lr}
   15152:	b083      	sub	sp, #12
   15154:	4675      	mov	r5, lr
   15156:	9001      	str	r0, [sp, #4]
   15158:	9100      	str	r1, [sp, #0]
   1515a:	462b      	mov	r3, r5
   1515c:	4619      	mov	r1, r3
   1515e:	4831      	ldr	r0, [pc, #196]	; (15224 <Ssp::Ssp(Ssp::Peripheral)+0xd4>)
   15160:	f7fd ffe8 	bl	13134 <__cyg_profile_func_enter>
        miso_(&miso_pin_),
        sck_(&sck_pin_),
        mosi_pin_(kSspPinMatrix[util::Value(set_pssp)][MatrixLookup::kMosi]),
        miso_pin_(kSspPinMatrix[util::Value(set_pssp)][MatrixLookup::kMiso]),
        sck_pin_(kSspPinMatrix[util::Value(set_pssp)][MatrixLookup::kSck]),
        pssp_(set_pssp)
   15164:	9b01      	ldr	r3, [sp, #4]
   15166:	4618      	mov	r0, r3
   15168:	f7ff ff92 	bl	15090 <SspInterface::SspInterface()>
   1516c:	9b01      	ldr	r3, [sp, #4]
   1516e:	3304      	adds	r3, #4
   15170:	4618      	mov	r0, r3
   15172:	f7ff ff65 	bl	15040 <Lpc40xxSystemController::Lpc40xxSystemController()>
   15176:	4a2c      	ldr	r2, [pc, #176]	; (15228 <Ssp::Ssp(Ssp::Peripheral)+0xd8>)
   15178:	9b01      	ldr	r3, [sp, #4]
   1517a:	601a      	str	r2, [r3, #0]
   1517c:	4a2b      	ldr	r2, [pc, #172]	; (1522c <Ssp::Ssp(Ssp::Peripheral)+0xdc>)
   1517e:	9b01      	ldr	r3, [sp, #4]
   15180:	605a      	str	r2, [r3, #4]
   15182:	9b01      	ldr	r3, [sp, #4]
   15184:	f103 0214 	add.w	r2, r3, #20
   15188:	9b01      	ldr	r3, [sp, #4]
   1518a:	609a      	str	r2, [r3, #8]
   1518c:	9b01      	ldr	r3, [sp, #4]
   1518e:	f103 021c 	add.w	r2, r3, #28
   15192:	9b01      	ldr	r3, [sp, #4]
   15194:	60da      	str	r2, [r3, #12]
   15196:	9b01      	ldr	r3, [sp, #4]
   15198:	f103 0224 	add.w	r2, r3, #36	; 0x24
   1519c:	9b01      	ldr	r3, [sp, #4]
   1519e:	611a      	str	r2, [r3, #16]
   151a0:	9b01      	ldr	r3, [sp, #4]
   151a2:	f103 0414 	add.w	r4, r3, #20
        mosi_pin_(kSspPinMatrix[util::Value(set_pssp)][MatrixLookup::kMosi]),
   151a6:	9800      	ldr	r0, [sp, #0]
   151a8:	f7ff ff5c 	bl	15064 <int util::Value<Ssp::Peripheral, int>(Ssp::Peripheral)>
   151ac:	4602      	mov	r2, r0
        pssp_(set_pssp)
   151ae:	4613      	mov	r3, r2
   151b0:	005b      	lsls	r3, r3, #1
   151b2:	4413      	add	r3, r2
   151b4:	00db      	lsls	r3, r3, #3
   151b6:	4a1e      	ldr	r2, [pc, #120]	; (15230 <Ssp::Ssp(Ssp::Peripheral)+0xe0>)
   151b8:	4413      	add	r3, r2
   151ba:	4619      	mov	r1, r3
   151bc:	4620      	mov	r0, r4
   151be:	f7ff ff9d 	bl	150fc <Pin::Pin(Pin const&)>
   151c2:	9b01      	ldr	r3, [sp, #4]
   151c4:	f103 041c 	add.w	r4, r3, #28
        miso_pin_(kSspPinMatrix[util::Value(set_pssp)][MatrixLookup::kMiso]),
   151c8:	9800      	ldr	r0, [sp, #0]
   151ca:	f7ff ff4b 	bl	15064 <int util::Value<Ssp::Peripheral, int>(Ssp::Peripheral)>
   151ce:	4602      	mov	r2, r0
        pssp_(set_pssp)
   151d0:	4613      	mov	r3, r2
   151d2:	005b      	lsls	r3, r3, #1
   151d4:	4413      	add	r3, r2
   151d6:	00db      	lsls	r3, r3, #3
   151d8:	3308      	adds	r3, #8
   151da:	4a15      	ldr	r2, [pc, #84]	; (15230 <Ssp::Ssp(Ssp::Peripheral)+0xe0>)
   151dc:	4413      	add	r3, r2
   151de:	4619      	mov	r1, r3
   151e0:	4620      	mov	r0, r4
   151e2:	f7ff ff8b 	bl	150fc <Pin::Pin(Pin const&)>
   151e6:	9b01      	ldr	r3, [sp, #4]
   151e8:	f103 0424 	add.w	r4, r3, #36	; 0x24
        sck_pin_(kSspPinMatrix[util::Value(set_pssp)][MatrixLookup::kSck]),
   151ec:	9800      	ldr	r0, [sp, #0]
   151ee:	f7ff ff39 	bl	15064 <int util::Value<Ssp::Peripheral, int>(Ssp::Peripheral)>
   151f2:	4602      	mov	r2, r0
        pssp_(set_pssp)
   151f4:	4613      	mov	r3, r2
   151f6:	005b      	lsls	r3, r3, #1
   151f8:	4413      	add	r3, r2
   151fa:	00db      	lsls	r3, r3, #3
   151fc:	3310      	adds	r3, #16
   151fe:	4a0c      	ldr	r2, [pc, #48]	; (15230 <Ssp::Ssp(Ssp::Peripheral)+0xe0>)
   15200:	4413      	add	r3, r2
   15202:	4619      	mov	r1, r3
   15204:	4620      	mov	r0, r4
   15206:	f7ff ff79 	bl	150fc <Pin::Pin(Pin const&)>
   1520a:	9b01      	ldr	r3, [sp, #4]
   1520c:	9a00      	ldr	r2, [sp, #0]
   1520e:	62da      	str	r2, [r3, #44]	; 0x2c
  {
  }
   15210:	9c01      	ldr	r4, [sp, #4]
   15212:	462b      	mov	r3, r5
   15214:	4619      	mov	r1, r3
   15216:	4803      	ldr	r0, [pc, #12]	; (15224 <Ssp::Ssp(Ssp::Peripheral)+0xd4>)
   15218:	f7fd ffa0 	bl	1315c <__cyg_profile_func_exit>
   1521c:	4623      	mov	r3, r4
   1521e:	4618      	mov	r0, r3
   15220:	b003      	add	sp, #12
   15222:	bd30      	pop	{r4, r5, pc}
   15224:	00015151 	.word	0x00015151
   15228:	00019448 	.word	0x00019448
   1522c:	00019470 	.word	0x00019470
   15230:	00018ffc 	.word	0x00018ffc

00015234 <Ssp::Initialize()>:
  }

  /// Powers on the peripheral, sets the peripheral clock, format, and data
  /// size, and enables the SSP pins for communication see and more.
  /// See page 601 of user manual UM10562 LPC408x/407x for more details.
  void Initialize() override
   15234:	b570      	push	{r4, r5, r6, lr}
   15236:	b086      	sub	sp, #24
   15238:	4676      	mov	r6, lr
   1523a:	9001      	str	r0, [sp, #4]
   1523c:	4633      	mov	r3, r6
   1523e:	4619      	mov	r1, r3
   15240:	4830      	ldr	r0, [pc, #192]	; (15304 <Ssp::Initialize()+0xd0>)
   15242:	f7fd ff77 	bl	13134 <__cyg_profile_func_enter>
  {
    uint32_t pssp = util::Value(pssp_);
   15246:	9b01      	ldr	r3, [sp, #4]
   15248:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1524a:	4618      	mov	r0, r3
   1524c:	f7ff ff0a 	bl	15064 <int util::Value<Ssp::Peripheral, int>(Ssp::Peripheral)>
   15250:	4603      	mov	r3, r0
   15252:	9305      	str	r3, [sp, #20]
    // Power up peripheral
    PowerUpPeripheral(kPowerBit[pssp]);
   15254:	9b01      	ldr	r3, [sp, #4]
   15256:	1d18      	adds	r0, r3, #4
   15258:	9b01      	ldr	r3, [sp, #4]
   1525a:	685b      	ldr	r3, [r3, #4]
   1525c:	3314      	adds	r3, #20
   1525e:	681b      	ldr	r3, [r3, #0]
   15260:	9a05      	ldr	r2, [sp, #20]
   15262:	0092      	lsls	r2, r2, #2
   15264:	4928      	ldr	r1, [pc, #160]	; (15308 <Ssp::Initialize()+0xd4>)
   15266:	440a      	add	r2, r1
   15268:	4611      	mov	r1, r2
   1526a:	4798      	blx	r3
    // Enable SSP pins
    mosi_->SetPinFunction(kPinSelect[pssp]);
   1526c:	9b01      	ldr	r3, [sp, #4]
   1526e:	6898      	ldr	r0, [r3, #8]
   15270:	9b01      	ldr	r3, [sp, #4]
   15272:	689b      	ldr	r3, [r3, #8]
   15274:	681b      	ldr	r3, [r3, #0]
   15276:	681b      	ldr	r3, [r3, #0]
   15278:	4924      	ldr	r1, [pc, #144]	; (1530c <Ssp::Initialize()+0xd8>)
   1527a:	9a05      	ldr	r2, [sp, #20]
   1527c:	440a      	add	r2, r1
   1527e:	7812      	ldrb	r2, [r2, #0]
   15280:	4611      	mov	r1, r2
   15282:	4798      	blx	r3
    miso_->SetPinFunction(kPinSelect[pssp]);
   15284:	9b01      	ldr	r3, [sp, #4]
   15286:	68d8      	ldr	r0, [r3, #12]
   15288:	9b01      	ldr	r3, [sp, #4]
   1528a:	68db      	ldr	r3, [r3, #12]
   1528c:	681b      	ldr	r3, [r3, #0]
   1528e:	681b      	ldr	r3, [r3, #0]
   15290:	491e      	ldr	r1, [pc, #120]	; (1530c <Ssp::Initialize()+0xd8>)
   15292:	9a05      	ldr	r2, [sp, #20]
   15294:	440a      	add	r2, r1
   15296:	7812      	ldrb	r2, [r2, #0]
   15298:	4611      	mov	r1, r2
   1529a:	4798      	blx	r3
    sck_->SetPinFunction(kPinSelect[pssp]);
   1529c:	9b01      	ldr	r3, [sp, #4]
   1529e:	6918      	ldr	r0, [r3, #16]
   152a0:	9b01      	ldr	r3, [sp, #4]
   152a2:	691b      	ldr	r3, [r3, #16]
   152a4:	681b      	ldr	r3, [r3, #0]
   152a6:	681b      	ldr	r3, [r3, #0]
   152a8:	4918      	ldr	r1, [pc, #96]	; (1530c <Ssp::Initialize()+0xd8>)
   152aa:	9a05      	ldr	r2, [sp, #20]
   152ac:	440a      	add	r2, r1
   152ae:	7812      	ldrb	r2, [r2, #0]
   152b0:	4611      	mov	r1, r2
   152b2:	4798      	blx	r3
    // Enable SSP
    ssp_registers[pssp]->CR1 = bit::Set(ssp_registers[pssp]->CR1, kSspEnable);
   152b4:	4a16      	ldr	r2, [pc, #88]	; (15310 <Ssp::Initialize()+0xdc>)
   152b6:	9b05      	ldr	r3, [sp, #20]
   152b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   152bc:	685b      	ldr	r3, [r3, #4]
   152be:	4914      	ldr	r1, [pc, #80]	; (15310 <Ssp::Initialize()+0xdc>)
   152c0:	9a05      	ldr	r2, [sp, #20]
   152c2:	f851 4022 	ldr.w	r4, [r1, r2, lsl #2]
   152c6:	9304      	str	r3, [sp, #16]
   152c8:	2301      	movs	r3, #1
   152ca:	9303      	str	r3, [sp, #12]
   152cc:	4633      	mov	r3, r6
   152ce:	4619      	mov	r1, r3
   152d0:	4810      	ldr	r0, [pc, #64]	; (15314 <Ssp::Initialize()+0xe0>)
   152d2:	f7fd ff2f 	bl	13134 <__cyg_profile_func_enter>
[[gnu::always_inline]] [[nodiscard]]
constexpr T Set(T target, uint32_t position)
{
  static_assert(std::numeric_limits<T>::is_integer,
                "Set only accepts intergers.");
  return target | (1 << position);
   152d6:	2201      	movs	r2, #1
   152d8:	9b03      	ldr	r3, [sp, #12]
   152da:	fa02 f303 	lsl.w	r3, r2, r3
   152de:	461a      	mov	r2, r3
   152e0:	9b04      	ldr	r3, [sp, #16]
   152e2:	ea42 0503 	orr.w	r5, r2, r3
   152e6:	4633      	mov	r3, r6
   152e8:	4619      	mov	r1, r3
   152ea:	480a      	ldr	r0, [pc, #40]	; (15314 <Ssp::Initialize()+0xe0>)
   152ec:	f7fd ff36 	bl	1315c <__cyg_profile_func_exit>
   152f0:	6065      	str	r5, [r4, #4]
   152f2:	4633      	mov	r3, r6
   152f4:	4619      	mov	r1, r3
   152f6:	4803      	ldr	r0, [pc, #12]	; (15304 <Ssp::Initialize()+0xd0>)
   152f8:	f7fd ff30 	bl	1315c <__cyg_profile_func_exit>
  }
   152fc:	bf00      	nop
   152fe:	b006      	add	sp, #24
   15300:	bd70      	pop	{r4, r5, r6, pc}
   15302:	bf00      	nop
   15304:	00015235 	.word	0x00015235
   15308:	00019044 	.word	0x00019044
   1530c:	00018ff8 	.word	0x00018ff8
   15310:	100001c8 	.word	0x100001c8
   15314:	00016e95 	.word	0x00016e95

00015318 <Ssp::IsTransferRegBusy()>:

  /// Checks if the SSP controller is idle.
  /// @returns true if the controller is sending or receiving a data frame and
  /// false if it is idle.
  bool IsTransferRegBusy() override
   15318:	b530      	push	{r4, r5, lr}
   1531a:	b085      	sub	sp, #20
   1531c:	4675      	mov	r5, lr
   1531e:	9001      	str	r0, [sp, #4]
   15320:	462b      	mov	r3, r5
   15322:	4619      	mov	r1, r3
   15324:	4817      	ldr	r0, [pc, #92]	; (15384 <Ssp::IsTransferRegBusy()+0x6c>)
   15326:	f7fd ff05 	bl	13134 <__cyg_profile_func_enter>
  {
    return (bit::Read(ssp_registers[util::Value(pssp_)]->SR, kDataLineIdleBit));
   1532a:	9b01      	ldr	r3, [sp, #4]
   1532c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1532e:	4618      	mov	r0, r3
   15330:	f7ff fe98 	bl	15064 <int util::Value<Ssp::Peripheral, int>(Ssp::Peripheral)>
   15334:	4602      	mov	r2, r0
   15336:	4b14      	ldr	r3, [pc, #80]	; (15388 <Ssp::IsTransferRegBusy()+0x70>)
   15338:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   1533c:	68db      	ldr	r3, [r3, #12]
   1533e:	9303      	str	r3, [sp, #12]
   15340:	2304      	movs	r3, #4
   15342:	9302      	str	r3, [sp, #8]
   15344:	462b      	mov	r3, r5
   15346:	4619      	mov	r1, r3
   15348:	4810      	ldr	r0, [pc, #64]	; (1538c <Ssp::IsTransferRegBusy()+0x74>)
   1534a:	f7fd fef3 	bl	13134 <__cyg_profile_func_enter>
[[gnu::always_inline]][[nodiscard]] constexpr bool Read(T target,
                                                        uint32_t position)
{
  static_assert(std::numeric_limits<T>::is_integer,
                "Read only accepts intergers.");
  return static_cast<bool>(target & (1 << position));
   1534e:	2201      	movs	r2, #1
   15350:	9b02      	ldr	r3, [sp, #8]
   15352:	fa02 f303 	lsl.w	r3, r2, r3
   15356:	461a      	mov	r2, r3
   15358:	9b03      	ldr	r3, [sp, #12]
   1535a:	4013      	ands	r3, r2
   1535c:	2b00      	cmp	r3, #0
   1535e:	bf14      	ite	ne
   15360:	2301      	movne	r3, #1
   15362:	2300      	moveq	r3, #0
   15364:	b2dc      	uxtb	r4, r3
   15366:	462b      	mov	r3, r5
   15368:	4619      	mov	r1, r3
   1536a:	4808      	ldr	r0, [pc, #32]	; (1538c <Ssp::IsTransferRegBusy()+0x74>)
   1536c:	f7fd fef6 	bl	1315c <__cyg_profile_func_exit>
   15370:	462b      	mov	r3, r5
   15372:	4619      	mov	r1, r3
   15374:	4803      	ldr	r0, [pc, #12]	; (15384 <Ssp::IsTransferRegBusy()+0x6c>)
   15376:	f7fd fef1 	bl	1315c <__cyg_profile_func_exit>
   1537a:	4623      	mov	r3, r4
  }
   1537c:	4618      	mov	r0, r3
   1537e:	b005      	add	sp, #20
   15380:	bd30      	pop	{r4, r5, pc}
   15382:	bf00      	nop
   15384:	00015319 	.word	0x00015319
   15388:	100001c8 	.word	0x100001c8
   1538c:	00016ed1 	.word	0x00016ed1

00015390 <Ssp::Transfer(unsigned short)>:
  /// data register. This functions for both transmitting and
  /// receiving data. It is recommended this region be protected
  /// by a mutex.
  /// @param data - information to be placed in data register
  /// @return - received data from external device
  uint16_t Transfer(uint16_t data) override
   15390:	b530      	push	{r4, r5, lr}
   15392:	b085      	sub	sp, #20
   15394:	4675      	mov	r5, lr
   15396:	9001      	str	r0, [sp, #4]
   15398:	460b      	mov	r3, r1
   1539a:	f8ad 3002 	strh.w	r3, [sp, #2]
   1539e:	462b      	mov	r3, r5
   153a0:	4619      	mov	r1, r3
   153a2:	4814      	ldr	r0, [pc, #80]	; (153f4 <Ssp::Transfer(unsigned short)+0x64>)
   153a4:	f7fd fec6 	bl	13134 <__cyg_profile_func_enter>
  {
    uint32_t pssp = util::Value(pssp_);
   153a8:	9b01      	ldr	r3, [sp, #4]
   153aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   153ac:	4618      	mov	r0, r3
   153ae:	f7ff fe59 	bl	15064 <int util::Value<Ssp::Peripheral, int>(Ssp::Peripheral)>
   153b2:	4603      	mov	r3, r0
   153b4:	9303      	str	r3, [sp, #12]

    ssp_registers[pssp]->DR = data;
   153b6:	4a10      	ldr	r2, [pc, #64]	; (153f8 <Ssp::Transfer(unsigned short)+0x68>)
   153b8:	9b03      	ldr	r3, [sp, #12]
   153ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   153be:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   153c2:	609a      	str	r2, [r3, #8]
    while (IsTransferRegBusy())
   153c4:	9801      	ldr	r0, [sp, #4]
   153c6:	f7ff ffa7 	bl	15318 <Ssp::IsTransferRegBusy()>
   153ca:	4603      	mov	r3, r0
   153cc:	2b00      	cmp	r3, #0
   153ce:	d001      	beq.n	153d4 <Ssp::Transfer(unsigned short)+0x44>
    {
      continue;
   153d0:	bf00      	nop
    while (IsTransferRegBusy())
   153d2:	e7f7      	b.n	153c4 <Ssp::Transfer(unsigned short)+0x34>
    }
    return static_cast<uint16_t>(ssp_registers[pssp]->DR);
   153d4:	4a08      	ldr	r2, [pc, #32]	; (153f8 <Ssp::Transfer(unsigned short)+0x68>)
   153d6:	9b03      	ldr	r3, [sp, #12]
   153d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   153dc:	689b      	ldr	r3, [r3, #8]
   153de:	b29c      	uxth	r4, r3
   153e0:	462b      	mov	r3, r5
   153e2:	4619      	mov	r1, r3
   153e4:	4803      	ldr	r0, [pc, #12]	; (153f4 <Ssp::Transfer(unsigned short)+0x64>)
   153e6:	f7fd feb9 	bl	1315c <__cyg_profile_func_exit>
   153ea:	4623      	mov	r3, r4
  }
   153ec:	4618      	mov	r0, r3
   153ee:	b005      	add	sp, #20
   153f0:	bd30      	pop	{r4, r5, pc}
   153f2:	bf00      	nop
   153f4:	00015391 	.word	0x00015391
   153f8:	100001c8 	.word	0x100001c8

000153fc <Ssp::SetSpiMasterDefault()>:

  /// Sets up SSP peripheral as SPI master
  void SetSpiMasterDefault() override
   153fc:	b510      	push	{r4, lr}
   153fe:	b086      	sub	sp, #24
   15400:	4674      	mov	r4, lr
   15402:	9003      	str	r0, [sp, #12]
   15404:	4623      	mov	r3, r4
   15406:	4619      	mov	r1, r3
   15408:	4812      	ldr	r0, [pc, #72]	; (15454 <Ssp::SetSpiMasterDefault()+0x58>)
   1540a:	f7fd fe93 	bl	13134 <__cyg_profile_func_enter>
  {
    constexpr bool kHighPolarity  = 1;
   1540e:	2301      	movs	r3, #1
   15410:	f88d 3017 	strb.w	r3, [sp, #23]
    constexpr bool kPhase0        = 0;
   15414:	2300      	movs	r3, #0
   15416:	f88d 3016 	strb.w	r3, [sp, #22]
    constexpr uint8_t kScrDivider = 0;
   1541a:	2300      	movs	r3, #0
   1541c:	f88d 3015 	strb.w	r3, [sp, #21]
    constexpr uint8_t kPrescaler  = SJ2_SYSTEM_CLOCK_RATE_MHZ;
   15420:	2330      	movs	r3, #48	; 0x30
   15422:	f88d 3014 	strb.w	r3, [sp, #20]

    SetPeripheralMode(kMaster, kSpi, kEight);
   15426:	2307      	movs	r3, #7
   15428:	2200      	movs	r2, #0
   1542a:	2100      	movs	r1, #0
   1542c:	9803      	ldr	r0, [sp, #12]
   1542e:	f000 f85b 	bl	154e8 <Ssp::SetPeripheralMode(SspInterface::MasterSlaveMode, SspInterface::FrameMode, SspInterface::DataSize)>
    SetClock(kHighPolarity, kPhase0, kScrDivider, kPrescaler);
   15432:	2330      	movs	r3, #48	; 0x30
   15434:	9300      	str	r3, [sp, #0]
   15436:	2300      	movs	r3, #0
   15438:	2200      	movs	r2, #0
   1543a:	2101      	movs	r1, #1
   1543c:	9803      	ldr	r0, [sp, #12]
   1543e:	f000 fa09 	bl	15854 <Ssp::SetClock(bool, bool, unsigned char, unsigned char)>
   15442:	4623      	mov	r3, r4
   15444:	4619      	mov	r1, r3
   15446:	4803      	ldr	r0, [pc, #12]	; (15454 <Ssp::SetSpiMasterDefault()+0x58>)
   15448:	f7fd fe88 	bl	1315c <__cyg_profile_func_exit>
  }
   1544c:	bf00      	nop
   1544e:	b006      	add	sp, #24
   15450:	bd10      	pop	{r4, pc}
   15452:	bf00      	nop
   15454:	000153fd 	.word	0x000153fd

00015458 <unsigned char util::Value<SspInterface::DataSize, unsigned char>(SspInterface::DataSize)>:
constexpr Type Value(Enum enum_type_value)
   15458:	b530      	push	{r4, r5, lr}
   1545a:	b083      	sub	sp, #12
   1545c:	4675      	mov	r5, lr
   1545e:	4603      	mov	r3, r0
   15460:	f88d 3007 	strb.w	r3, [sp, #7]
   15464:	462b      	mov	r3, r5
   15466:	4619      	mov	r1, r3
   15468:	4806      	ldr	r0, [pc, #24]	; (15484 <unsigned char util::Value<SspInterface::DataSize, unsigned char>(SspInterface::DataSize)+0x2c>)
   1546a:	f7fd fe63 	bl	13134 <__cyg_profile_func_enter>
  return static_cast<Type>(enum_type_value);
   1546e:	f89d 4007 	ldrb.w	r4, [sp, #7]
   15472:	462b      	mov	r3, r5
   15474:	4619      	mov	r1, r3
   15476:	4803      	ldr	r0, [pc, #12]	; (15484 <unsigned char util::Value<SspInterface::DataSize, unsigned char>(SspInterface::DataSize)+0x2c>)
   15478:	f7fd fe70 	bl	1315c <__cyg_profile_func_exit>
   1547c:	4623      	mov	r3, r4
}
   1547e:	4618      	mov	r0, r3
   15480:	b003      	add	sp, #12
   15482:	bd30      	pop	{r4, r5, pc}
   15484:	00015459 	.word	0x00015459

00015488 <unsigned char util::Value<SspInterface::FrameMode, unsigned char>(SspInterface::FrameMode)>:
constexpr Type Value(Enum enum_type_value)
   15488:	b530      	push	{r4, r5, lr}
   1548a:	b083      	sub	sp, #12
   1548c:	4675      	mov	r5, lr
   1548e:	4603      	mov	r3, r0
   15490:	f88d 3007 	strb.w	r3, [sp, #7]
   15494:	462b      	mov	r3, r5
   15496:	4619      	mov	r1, r3
   15498:	4806      	ldr	r0, [pc, #24]	; (154b4 <unsigned char util::Value<SspInterface::FrameMode, unsigned char>(SspInterface::FrameMode)+0x2c>)
   1549a:	f7fd fe4b 	bl	13134 <__cyg_profile_func_enter>
  return static_cast<Type>(enum_type_value);
   1549e:	f89d 4007 	ldrb.w	r4, [sp, #7]
   154a2:	462b      	mov	r3, r5
   154a4:	4619      	mov	r1, r3
   154a6:	4803      	ldr	r0, [pc, #12]	; (154b4 <unsigned char util::Value<SspInterface::FrameMode, unsigned char>(SspInterface::FrameMode)+0x2c>)
   154a8:	f7fd fe58 	bl	1315c <__cyg_profile_func_exit>
   154ac:	4623      	mov	r3, r4
}
   154ae:	4618      	mov	r0, r3
   154b0:	b003      	add	sp, #12
   154b2:	bd30      	pop	{r4, r5, pc}
   154b4:	00015489 	.word	0x00015489

000154b8 <unsigned char util::Value<SspInterface::MasterSlaveMode, unsigned char>(SspInterface::MasterSlaveMode)>:
constexpr Type Value(Enum enum_type_value)
   154b8:	b530      	push	{r4, r5, lr}
   154ba:	b083      	sub	sp, #12
   154bc:	4675      	mov	r5, lr
   154be:	4603      	mov	r3, r0
   154c0:	f88d 3007 	strb.w	r3, [sp, #7]
   154c4:	462b      	mov	r3, r5
   154c6:	4619      	mov	r1, r3
   154c8:	4806      	ldr	r0, [pc, #24]	; (154e4 <unsigned char util::Value<SspInterface::MasterSlaveMode, unsigned char>(SspInterface::MasterSlaveMode)+0x2c>)
   154ca:	f7fd fe33 	bl	13134 <__cyg_profile_func_enter>
  return static_cast<Type>(enum_type_value);
   154ce:	f89d 4007 	ldrb.w	r4, [sp, #7]
   154d2:	462b      	mov	r3, r5
   154d4:	4619      	mov	r1, r3
   154d6:	4803      	ldr	r0, [pc, #12]	; (154e4 <unsigned char util::Value<SspInterface::MasterSlaveMode, unsigned char>(SspInterface::MasterSlaveMode)+0x2c>)
   154d8:	f7fd fe40 	bl	1315c <__cyg_profile_func_exit>
   154dc:	4623      	mov	r3, r4
}
   154de:	4618      	mov	r0, r3
   154e0:	b003      	add	sp, #12
   154e2:	bd30      	pop	{r4, r5, pc}
   154e4:	000154b9 	.word	0x000154b9

000154e8 <Ssp::SetPeripheralMode(SspInterface::MasterSlaveMode, SspInterface::FrameMode, SspInterface::DataSize)>:

  /// Sets the various modes for the Peripheral
  /// @param mode - master or slave mode
  /// @param frame - format for Peripheral data to use
  /// @param size - number of bits per frame
  void SetPeripheralMode(MasterSlaveMode mode, FrameMode frame,
   154e8:	b570      	push	{r4, r5, r6, lr}
   154ea:	b098      	sub	sp, #96	; 0x60
   154ec:	4674      	mov	r4, lr
   154ee:	9001      	str	r0, [sp, #4]
   154f0:	4608      	mov	r0, r1
   154f2:	4611      	mov	r1, r2
   154f4:	461a      	mov	r2, r3
   154f6:	4603      	mov	r3, r0
   154f8:	f88d 3003 	strb.w	r3, [sp, #3]
   154fc:	460b      	mov	r3, r1
   154fe:	f88d 3002 	strb.w	r3, [sp, #2]
   15502:	4613      	mov	r3, r2
   15504:	f88d 3001 	strb.w	r3, [sp, #1]
   15508:	4623      	mov	r3, r4
   1550a:	4619      	mov	r1, r3
   1550c:	4875      	ldr	r0, [pc, #468]	; (156e4 <Ssp::SetPeripheralMode(SspInterface::MasterSlaveMode, SspInterface::FrameMode, SspInterface::DataSize)+0x1fc>)
   1550e:	f7fd fe11 	bl	13134 <__cyg_profile_func_enter>
                         DataSize size) override
  {
    uint32_t pssp = util::Value(pssp_);
   15512:	9b01      	ldr	r3, [sp, #4]
   15514:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   15516:	4618      	mov	r0, r3
   15518:	f7ff fda4 	bl	15064 <int util::Value<Ssp::Peripheral, int>(Ssp::Peripheral)>
   1551c:	4603      	mov	r3, r0
   1551e:	9317      	str	r3, [sp, #92]	; 0x5c
    // TODO(#371): Find a better alternative to powering up the peripheral for
    // every method.
    Ssp::PowerUpPeripheral(Ssp::kPowerBit[pssp]);
   15520:	9b01      	ldr	r3, [sp, #4]
   15522:	1d18      	adds	r0, r3, #4
   15524:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   15526:	009b      	lsls	r3, r3, #2
   15528:	4a6f      	ldr	r2, [pc, #444]	; (156e8 <Ssp::SetPeripheralMode(SspInterface::MasterSlaveMode, SspInterface::FrameMode, SspInterface::DataSize)+0x200>)
   1552a:	4413      	add	r3, r2
   1552c:	4619      	mov	r1, r3
   1552e:	f7fb fd1d 	bl	10f6c <Lpc40xxSystemController::PowerUpPeripheral(SystemControllerInterface::PeripheralID const&)>
    if (frame == kMicro)
   15532:	f89d 3002 	ldrb.w	r3, [sp, #2]
   15536:	2b02      	cmp	r3, #2
   15538:	d102      	bne.n	15540 <Ssp::SetPeripheralMode(SspInterface::MasterSlaveMode, SspInterface::FrameMode, SspInterface::DataSize)+0x58>
    {
      size = kEight;
   1553a:	2307      	movs	r3, #7
   1553c:	f88d 3001 	strb.w	r3, [sp, #1]
    }
    ssp_registers[pssp]->CR0 =
        bit::Insert(ssp_registers[pssp]->CR0, util::Value(size), kDataBit, 4);
   15540:	4a6a      	ldr	r2, [pc, #424]	; (156ec <Ssp::SetPeripheralMode(SspInterface::MasterSlaveMode, SspInterface::FrameMode, SspInterface::DataSize)+0x204>)
   15542:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   15544:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15548:	681e      	ldr	r6, [r3, #0]
   1554a:	f89d 3001 	ldrb.w	r3, [sp, #1]
   1554e:	4618      	mov	r0, r3
   15550:	f7ff ff82 	bl	15458 <unsigned char util::Value<SspInterface::DataSize, unsigned char>(SspInterface::DataSize)>
   15554:	4603      	mov	r3, r0
   15556:	4619      	mov	r1, r3
    ssp_registers[pssp]->CR0 =
   15558:	4a64      	ldr	r2, [pc, #400]	; (156ec <Ssp::SetPeripheralMode(SspInterface::MasterSlaveMode, SspInterface::FrameMode, SspInterface::DataSize)+0x204>)
   1555a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   1555c:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
   15560:	9608      	str	r6, [sp, #32]
   15562:	460b      	mov	r3, r1
   15564:	f88d 301f 	strb.w	r3, [sp, #31]
   15568:	2300      	movs	r3, #0
   1556a:	9306      	str	r3, [sp, #24]
   1556c:	2304      	movs	r3, #4
   1556e:	9305      	str	r3, [sp, #20]
   15570:	4623      	mov	r3, r4
   15572:	4619      	mov	r1, r3
   15574:	485e      	ldr	r0, [pc, #376]	; (156f0 <Ssp::SetPeripheralMode(SspInterface::MasterSlaveMode, SspInterface::FrameMode, SspInterface::DataSize)+0x208>)
   15576:	f7fd fddd 	bl	13134 <__cyg_profile_func_enter>
  constexpr UnsignedT kFieldOfOnes = GenerateFieldOfOnes<T>();
   1557a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1557e:	9304      	str	r3, [sp, #16]
  constexpr size_t kTargetWidth     = sizeof(T) * 8;
   15580:	2320      	movs	r3, #32
   15582:	9303      	str	r3, [sp, #12]
  UnsignedT mask   = kFieldOfOnes >> (kTargetWidth - width);
   15584:	9b05      	ldr	r3, [sp, #20]
   15586:	f1c3 0320 	rsb	r3, r3, #32
   1558a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1558e:	fa22 f303 	lsr.w	r3, r2, r3
   15592:	9302      	str	r3, [sp, #8]
  target &= ~(mask << position);
   15594:	9a02      	ldr	r2, [sp, #8]
   15596:	9b06      	ldr	r3, [sp, #24]
   15598:	fa02 f303 	lsl.w	r3, r2, r3
   1559c:	43db      	mvns	r3, r3
   1559e:	9a08      	ldr	r2, [sp, #32]
   155a0:	4013      	ands	r3, r2
   155a2:	9308      	str	r3, [sp, #32]
  target |= (value & mask) << position;
   155a4:	f89d 201f 	ldrb.w	r2, [sp, #31]
   155a8:	9b02      	ldr	r3, [sp, #8]
   155aa:	401a      	ands	r2, r3
   155ac:	9b06      	ldr	r3, [sp, #24]
   155ae:	fa02 f303 	lsl.w	r3, r2, r3
   155b2:	9a08      	ldr	r2, [sp, #32]
   155b4:	4313      	orrs	r3, r2
   155b6:	9308      	str	r3, [sp, #32]
  return target;
   155b8:	9e08      	ldr	r6, [sp, #32]
   155ba:	4623      	mov	r3, r4
   155bc:	4619      	mov	r1, r3
   155be:	484c      	ldr	r0, [pc, #304]	; (156f0 <Ssp::SetPeripheralMode(SspInterface::MasterSlaveMode, SspInterface::FrameMode, SspInterface::DataSize)+0x208>)
   155c0:	f7fd fdcc 	bl	1315c <__cyg_profile_func_exit>
   155c4:	602e      	str	r6, [r5, #0]
    ssp_registers[pssp]->CR0 =
        bit::Insert(ssp_registers[pssp]->CR0, util::Value(frame), kFrameBit, 2);
   155c6:	4a49      	ldr	r2, [pc, #292]	; (156ec <Ssp::SetPeripheralMode(SspInterface::MasterSlaveMode, SspInterface::FrameMode, SspInterface::DataSize)+0x204>)
   155c8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   155ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   155ce:	681e      	ldr	r6, [r3, #0]
   155d0:	f89d 3002 	ldrb.w	r3, [sp, #2]
   155d4:	4618      	mov	r0, r3
   155d6:	f7ff ff57 	bl	15488 <unsigned char util::Value<SspInterface::FrameMode, unsigned char>(SspInterface::FrameMode)>
   155da:	4603      	mov	r3, r0
   155dc:	4619      	mov	r1, r3
    ssp_registers[pssp]->CR0 =
   155de:	4a43      	ldr	r2, [pc, #268]	; (156ec <Ssp::SetPeripheralMode(SspInterface::MasterSlaveMode, SspInterface::FrameMode, SspInterface::DataSize)+0x204>)
   155e0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   155e2:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
   155e6:	960f      	str	r6, [sp, #60]	; 0x3c
   155e8:	460b      	mov	r3, r1
   155ea:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
   155ee:	2304      	movs	r3, #4
   155f0:	930d      	str	r3, [sp, #52]	; 0x34
   155f2:	2302      	movs	r3, #2
   155f4:	930c      	str	r3, [sp, #48]	; 0x30
   155f6:	4623      	mov	r3, r4
   155f8:	4619      	mov	r1, r3
   155fa:	483d      	ldr	r0, [pc, #244]	; (156f0 <Ssp::SetPeripheralMode(SspInterface::MasterSlaveMode, SspInterface::FrameMode, SspInterface::DataSize)+0x208>)
   155fc:	f7fd fd9a 	bl	13134 <__cyg_profile_func_enter>
  constexpr UnsignedT kFieldOfOnes = GenerateFieldOfOnes<T>();
   15600:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   15604:	930b      	str	r3, [sp, #44]	; 0x2c
  constexpr size_t kTargetWidth     = sizeof(T) * 8;
   15606:	2320      	movs	r3, #32
   15608:	930a      	str	r3, [sp, #40]	; 0x28
  UnsignedT mask   = kFieldOfOnes >> (kTargetWidth - width);
   1560a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1560c:	f1c3 0320 	rsb	r3, r3, #32
   15610:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   15614:	fa22 f303 	lsr.w	r3, r2, r3
   15618:	9309      	str	r3, [sp, #36]	; 0x24
  target &= ~(mask << position);
   1561a:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1561c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1561e:	fa02 f303 	lsl.w	r3, r2, r3
   15622:	43db      	mvns	r3, r3
   15624:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   15626:	4013      	ands	r3, r2
   15628:	930f      	str	r3, [sp, #60]	; 0x3c
  target |= (value & mask) << position;
   1562a:	f89d 203b 	ldrb.w	r2, [sp, #59]	; 0x3b
   1562e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   15630:	401a      	ands	r2, r3
   15632:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   15634:	fa02 f303 	lsl.w	r3, r2, r3
   15638:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   1563a:	4313      	orrs	r3, r2
   1563c:	930f      	str	r3, [sp, #60]	; 0x3c
  return target;
   1563e:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
   15640:	4623      	mov	r3, r4
   15642:	4619      	mov	r1, r3
   15644:	482a      	ldr	r0, [pc, #168]	; (156f0 <Ssp::SetPeripheralMode(SspInterface::MasterSlaveMode, SspInterface::FrameMode, SspInterface::DataSize)+0x208>)
   15646:	f7fd fd89 	bl	1315c <__cyg_profile_func_exit>
   1564a:	602e      	str	r6, [r5, #0]
    ssp_registers[pssp]->CR1 = bit::Insert(
        ssp_registers[pssp]->CR1, util::Value(mode), kMasterModeBit, 1);
   1564c:	4a27      	ldr	r2, [pc, #156]	; (156ec <Ssp::SetPeripheralMode(SspInterface::MasterSlaveMode, SspInterface::FrameMode, SspInterface::DataSize)+0x204>)
   1564e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   15650:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15654:	685e      	ldr	r6, [r3, #4]
    ssp_registers[pssp]->CR1 = bit::Insert(
   15656:	f89d 3003 	ldrb.w	r3, [sp, #3]
   1565a:	4618      	mov	r0, r3
   1565c:	f7ff ff2c 	bl	154b8 <unsigned char util::Value<SspInterface::MasterSlaveMode, unsigned char>(SspInterface::MasterSlaveMode)>
   15660:	4603      	mov	r3, r0
   15662:	4619      	mov	r1, r3
   15664:	4a21      	ldr	r2, [pc, #132]	; (156ec <Ssp::SetPeripheralMode(SspInterface::MasterSlaveMode, SspInterface::FrameMode, SspInterface::DataSize)+0x204>)
   15666:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   15668:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
   1566c:	9616      	str	r6, [sp, #88]	; 0x58
   1566e:	460b      	mov	r3, r1
   15670:	f88d 3057 	strb.w	r3, [sp, #87]	; 0x57
   15674:	2302      	movs	r3, #2
   15676:	9314      	str	r3, [sp, #80]	; 0x50
   15678:	2301      	movs	r3, #1
   1567a:	9313      	str	r3, [sp, #76]	; 0x4c
   1567c:	4623      	mov	r3, r4
   1567e:	4619      	mov	r1, r3
   15680:	481b      	ldr	r0, [pc, #108]	; (156f0 <Ssp::SetPeripheralMode(SspInterface::MasterSlaveMode, SspInterface::FrameMode, SspInterface::DataSize)+0x208>)
   15682:	f7fd fd57 	bl	13134 <__cyg_profile_func_enter>
  constexpr UnsignedT kFieldOfOnes = GenerateFieldOfOnes<T>();
   15686:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1568a:	9312      	str	r3, [sp, #72]	; 0x48
  constexpr size_t kTargetWidth     = sizeof(T) * 8;
   1568c:	2320      	movs	r3, #32
   1568e:	9311      	str	r3, [sp, #68]	; 0x44
  UnsignedT mask   = kFieldOfOnes >> (kTargetWidth - width);
   15690:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   15692:	f1c3 0320 	rsb	r3, r3, #32
   15696:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1569a:	fa22 f303 	lsr.w	r3, r2, r3
   1569e:	9310      	str	r3, [sp, #64]	; 0x40
  target &= ~(mask << position);
   156a0:	9a10      	ldr	r2, [sp, #64]	; 0x40
   156a2:	9b14      	ldr	r3, [sp, #80]	; 0x50
   156a4:	fa02 f303 	lsl.w	r3, r2, r3
   156a8:	43db      	mvns	r3, r3
   156aa:	9a16      	ldr	r2, [sp, #88]	; 0x58
   156ac:	4013      	ands	r3, r2
   156ae:	9316      	str	r3, [sp, #88]	; 0x58
  target |= (value & mask) << position;
   156b0:	f89d 2057 	ldrb.w	r2, [sp, #87]	; 0x57
   156b4:	9b10      	ldr	r3, [sp, #64]	; 0x40
   156b6:	401a      	ands	r2, r3
   156b8:	9b14      	ldr	r3, [sp, #80]	; 0x50
   156ba:	fa02 f303 	lsl.w	r3, r2, r3
   156be:	9a16      	ldr	r2, [sp, #88]	; 0x58
   156c0:	4313      	orrs	r3, r2
   156c2:	9316      	str	r3, [sp, #88]	; 0x58
  return target;
   156c4:	9e16      	ldr	r6, [sp, #88]	; 0x58
   156c6:	4623      	mov	r3, r4
   156c8:	4619      	mov	r1, r3
   156ca:	4809      	ldr	r0, [pc, #36]	; (156f0 <Ssp::SetPeripheralMode(SspInterface::MasterSlaveMode, SspInterface::FrameMode, SspInterface::DataSize)+0x208>)
   156cc:	f7fd fd46 	bl	1315c <__cyg_profile_func_exit>
   156d0:	606e      	str	r6, [r5, #4]
   156d2:	4623      	mov	r3, r4
   156d4:	4619      	mov	r1, r3
   156d6:	4803      	ldr	r0, [pc, #12]	; (156e4 <Ssp::SetPeripheralMode(SspInterface::MasterSlaveMode, SspInterface::FrameMode, SspInterface::DataSize)+0x1fc>)
   156d8:	f7fd fd40 	bl	1315c <__cyg_profile_func_exit>
  }
   156dc:	bf00      	nop
   156de:	b018      	add	sp, #96	; 0x60
   156e0:	bd70      	pop	{r4, r5, r6, pc}
   156e2:	bf00      	nop
   156e4:	000154e9 	.word	0x000154e9
   156e8:	00019044 	.word	0x00019044
   156ec:	100001c8 	.word	0x100001c8
   156f0:	00016f15 	.word	0x00016f15

000156f4 <Ssp::GetPeripheralMode()>:
  /// Gets the Peripheral modes from registers
  /// @return - returns a 16-bit value as follows: 0000_000x 0xx0_xxxx
  ///       MasterSlaveMode = 1-bit @ bit 8
  ///       FrameMode       = 2-bit @ bit 5
  ///       DataSize        = 4-bit @ bit 0
  uint16_t GetPeripheralMode() override
   156f4:	b570      	push	{r4, r5, r6, lr}
   156f6:	b096      	sub	sp, #88	; 0x58
   156f8:	4674      	mov	r4, lr
   156fa:	9001      	str	r0, [sp, #4]
   156fc:	4623      	mov	r3, r4
   156fe:	4619      	mov	r1, r3
   15700:	4850      	ldr	r0, [pc, #320]	; (15844 <Ssp::GetPeripheralMode()+0x150>)
   15702:	f7fd fd17 	bl	13134 <__cyg_profile_func_enter>
  {
    uint16_t return_val = 0;
   15706:	2300      	movs	r3, #0
   15708:	f8ad 3056 	strh.w	r3, [sp, #86]	; 0x56
    uint32_t pssp       = util::Value(pssp_);
   1570c:	9b01      	ldr	r3, [sp, #4]
   1570e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   15710:	4618      	mov	r0, r3
   15712:	f7ff fca7 	bl	15064 <int util::Value<Ssp::Peripheral, int>(Ssp::Peripheral)>
   15716:	4603      	mov	r3, r0
   15718:	9314      	str	r3, [sp, #80]	; 0x50
    // TODO(#371): Find a better alternative to powering up the peripheral for
    // every method.
    Ssp::PowerUpPeripheral(Ssp::kPowerBit[pssp]);
   1571a:	9b01      	ldr	r3, [sp, #4]
   1571c:	1d18      	adds	r0, r3, #4
   1571e:	9b14      	ldr	r3, [sp, #80]	; 0x50
   15720:	009b      	lsls	r3, r3, #2
   15722:	4a49      	ldr	r2, [pc, #292]	; (15848 <Ssp::GetPeripheralMode()+0x154>)
   15724:	4413      	add	r3, r2
   15726:	4619      	mov	r1, r3
   15728:	f7fb fc20 	bl	10f6c <Lpc40xxSystemController::PowerUpPeripheral(SystemControllerInterface::PeripheralID const&)>

    return_val = static_cast<uint16_t>(
        (bit::Extract(ssp_registers[pssp]->CR0, kDataBit, 4)) +
   1572c:	4a47      	ldr	r2, [pc, #284]	; (1584c <Ssp::GetPeripheralMode()+0x158>)
   1572e:	9b14      	ldr	r3, [sp, #80]	; 0x50
   15730:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15734:	681b      	ldr	r3, [r3, #0]
   15736:	9307      	str	r3, [sp, #28]
   15738:	2300      	movs	r3, #0
   1573a:	9306      	str	r3, [sp, #24]
   1573c:	2304      	movs	r3, #4
   1573e:	9305      	str	r3, [sp, #20]
   15740:	4623      	mov	r3, r4
   15742:	4619      	mov	r1, r3
   15744:	4842      	ldr	r0, [pc, #264]	; (15850 <Ssp::GetPeripheralMode()+0x15c>)
   15746:	f7fd fcf5 	bl	13134 <__cyg_profile_func_enter>
  constexpr UnsignedT kFieldOfOnes = GenerateFieldOfOnes<T>();
   1574a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1574e:	9304      	str	r3, [sp, #16]
  constexpr size_t kTargetWidth     = sizeof(T) * 8;
   15750:	2320      	movs	r3, #32
   15752:	9303      	str	r3, [sp, #12]
  UnsignedT mask   = kFieldOfOnes >> (kTargetWidth - width);
   15754:	9b05      	ldr	r3, [sp, #20]
   15756:	f1c3 0320 	rsb	r3, r3, #32
   1575a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1575e:	fa22 f303 	lsr.w	r3, r2, r3
   15762:	9302      	str	r3, [sp, #8]
  return (target >> position) & mask;
   15764:	9a07      	ldr	r2, [sp, #28]
   15766:	9b06      	ldr	r3, [sp, #24]
   15768:	40da      	lsrs	r2, r3
   1576a:	9b02      	ldr	r3, [sp, #8]
   1576c:	ea02 0503 	and.w	r5, r2, r3
   15770:	4623      	mov	r3, r4
   15772:	4619      	mov	r1, r3
   15774:	4836      	ldr	r0, [pc, #216]	; (15850 <Ssp::GetPeripheralMode()+0x15c>)
   15776:	f7fd fcf1 	bl	1315c <__cyg_profile_func_exit>
   1577a:	b2ad      	uxth	r5, r5
        ((bit::Extract(ssp_registers[pssp]->CR0, kFrameBit, 2)) << 5) +
   1577c:	4a33      	ldr	r2, [pc, #204]	; (1584c <Ssp::GetPeripheralMode()+0x158>)
   1577e:	9b14      	ldr	r3, [sp, #80]	; 0x50
   15780:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15784:	681b      	ldr	r3, [r3, #0]
   15786:	930d      	str	r3, [sp, #52]	; 0x34
   15788:	2304      	movs	r3, #4
   1578a:	930c      	str	r3, [sp, #48]	; 0x30
   1578c:	2302      	movs	r3, #2
   1578e:	930b      	str	r3, [sp, #44]	; 0x2c
   15790:	4623      	mov	r3, r4
   15792:	4619      	mov	r1, r3
   15794:	482e      	ldr	r0, [pc, #184]	; (15850 <Ssp::GetPeripheralMode()+0x15c>)
   15796:	f7fd fccd 	bl	13134 <__cyg_profile_func_enter>
  constexpr UnsignedT kFieldOfOnes = GenerateFieldOfOnes<T>();
   1579a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1579e:	930a      	str	r3, [sp, #40]	; 0x28
  constexpr size_t kTargetWidth     = sizeof(T) * 8;
   157a0:	2320      	movs	r3, #32
   157a2:	9309      	str	r3, [sp, #36]	; 0x24
  UnsignedT mask   = kFieldOfOnes >> (kTargetWidth - width);
   157a4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   157a6:	f1c3 0320 	rsb	r3, r3, #32
   157aa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   157ae:	fa22 f303 	lsr.w	r3, r2, r3
   157b2:	9308      	str	r3, [sp, #32]
  return (target >> position) & mask;
   157b4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   157b6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   157b8:	40da      	lsrs	r2, r3
   157ba:	9b08      	ldr	r3, [sp, #32]
   157bc:	ea02 0603 	and.w	r6, r2, r3
   157c0:	4623      	mov	r3, r4
   157c2:	4619      	mov	r1, r3
   157c4:	4822      	ldr	r0, [pc, #136]	; (15850 <Ssp::GetPeripheralMode()+0x15c>)
   157c6:	f7fd fcc9 	bl	1315c <__cyg_profile_func_exit>
   157ca:	b2b3      	uxth	r3, r6
   157cc:	015b      	lsls	r3, r3, #5
   157ce:	b29b      	uxth	r3, r3
        (bit::Extract(ssp_registers[pssp]->CR0, kDataBit, 4)) +
   157d0:	442b      	add	r3, r5
   157d2:	b29d      	uxth	r5, r3
        ((bit::Extract(ssp_registers[pssp]->CR1, kMasterModeBit)) << 8));
   157d4:	4a1d      	ldr	r2, [pc, #116]	; (1584c <Ssp::GetPeripheralMode()+0x158>)
   157d6:	9b14      	ldr	r3, [sp, #80]	; 0x50
   157d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   157dc:	685b      	ldr	r3, [r3, #4]
   157de:	9313      	str	r3, [sp, #76]	; 0x4c
   157e0:	2302      	movs	r3, #2
   157e2:	9312      	str	r3, [sp, #72]	; 0x48
   157e4:	2301      	movs	r3, #1
   157e6:	9311      	str	r3, [sp, #68]	; 0x44
   157e8:	4623      	mov	r3, r4
   157ea:	4619      	mov	r1, r3
   157ec:	4818      	ldr	r0, [pc, #96]	; (15850 <Ssp::GetPeripheralMode()+0x15c>)
   157ee:	f7fd fca1 	bl	13134 <__cyg_profile_func_enter>
  constexpr UnsignedT kFieldOfOnes = GenerateFieldOfOnes<T>();
   157f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   157f6:	9310      	str	r3, [sp, #64]	; 0x40
  constexpr size_t kTargetWidth     = sizeof(T) * 8;
   157f8:	2320      	movs	r3, #32
   157fa:	930f      	str	r3, [sp, #60]	; 0x3c
  UnsignedT mask   = kFieldOfOnes >> (kTargetWidth - width);
   157fc:	9b11      	ldr	r3, [sp, #68]	; 0x44
   157fe:	f1c3 0320 	rsb	r3, r3, #32
   15802:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   15806:	fa22 f303 	lsr.w	r3, r2, r3
   1580a:	930e      	str	r3, [sp, #56]	; 0x38
  return (target >> position) & mask;
   1580c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   1580e:	9b12      	ldr	r3, [sp, #72]	; 0x48
   15810:	40da      	lsrs	r2, r3
   15812:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   15814:	ea02 0603 	and.w	r6, r2, r3
   15818:	4623      	mov	r3, r4
   1581a:	4619      	mov	r1, r3
   1581c:	480c      	ldr	r0, [pc, #48]	; (15850 <Ssp::GetPeripheralMode()+0x15c>)
   1581e:	f7fd fc9d 	bl	1315c <__cyg_profile_func_exit>
   15822:	b2b3      	uxth	r3, r6
   15824:	021b      	lsls	r3, r3, #8
   15826:	b29b      	uxth	r3, r3
    return_val = static_cast<uint16_t>(
   15828:	442b      	add	r3, r5
   1582a:	f8ad 3056 	strh.w	r3, [sp, #86]	; 0x56
    return return_val;
   1582e:	f8bd 5056 	ldrh.w	r5, [sp, #86]	; 0x56
   15832:	4623      	mov	r3, r4
   15834:	4619      	mov	r1, r3
   15836:	4803      	ldr	r0, [pc, #12]	; (15844 <Ssp::GetPeripheralMode()+0x150>)
   15838:	f7fd fc90 	bl	1315c <__cyg_profile_func_exit>
   1583c:	462b      	mov	r3, r5
  }
   1583e:	4618      	mov	r0, r3
   15840:	b016      	add	sp, #88	; 0x58
   15842:	bd70      	pop	{r4, r5, r6, pc}
   15844:	000156f5 	.word	0x000156f5
   15848:	00019044 	.word	0x00019044
   1584c:	100001c8 	.word	0x100001c8
   15850:	00016f89 	.word	0x00016f89

00015854 <Ssp::SetClock(bool, bool, unsigned char, unsigned char)>:
  /// Sets the clock rate for the Peripheral
  /// @param polarity - maintain bus on clock 0=low or 1=high between frames
  /// @param phase - capture serial data on 0=first or 1=second clock cycle
  /// @param divider - see notes in SSP_Interface above
  /// @param prescaler - divides the PCLK, must be even value between 2-254
  void SetClock(bool polarity, bool phase, uint8_t divider,
   15854:	b570      	push	{r4, r5, r6, lr}
   15856:	b098      	sub	sp, #96	; 0x60
   15858:	4674      	mov	r4, lr
   1585a:	9001      	str	r0, [sp, #4]
   1585c:	4608      	mov	r0, r1
   1585e:	4611      	mov	r1, r2
   15860:	461a      	mov	r2, r3
   15862:	4603      	mov	r3, r0
   15864:	f88d 3003 	strb.w	r3, [sp, #3]
   15868:	460b      	mov	r3, r1
   1586a:	f88d 3002 	strb.w	r3, [sp, #2]
   1586e:	4613      	mov	r3, r2
   15870:	f88d 3001 	strb.w	r3, [sp, #1]
   15874:	4623      	mov	r3, r4
   15876:	4619      	mov	r1, r3
   15878:	486c      	ldr	r0, [pc, #432]	; (15a2c <Ssp::SetClock(bool, bool, unsigned char, unsigned char)+0x1d8>)
   1587a:	f7fd fc5b 	bl	13134 <__cyg_profile_func_enter>
                uint8_t prescaler) override
  {
    uint32_t pssp = util::Value(pssp_);
   1587e:	9b01      	ldr	r3, [sp, #4]
   15880:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   15882:	4618      	mov	r0, r3
   15884:	f7ff fbee 	bl	15064 <int util::Value<Ssp::Peripheral, int>(Ssp::Peripheral)>
   15888:	4603      	mov	r3, r0
   1588a:	9317      	str	r3, [sp, #92]	; 0x5c
    // TODO(#371): Find a better alternative to powering up the peripheral for
    // every method.
    Ssp::PowerUpPeripheral(Ssp::kPowerBit[pssp]);
   1588c:	9b01      	ldr	r3, [sp, #4]
   1588e:	1d18      	adds	r0, r3, #4
   15890:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   15892:	009b      	lsls	r3, r3, #2
   15894:	4a66      	ldr	r2, [pc, #408]	; (15a30 <Ssp::SetClock(bool, bool, unsigned char, unsigned char)+0x1dc>)
   15896:	4413      	add	r3, r2
   15898:	4619      	mov	r1, r3
   1589a:	f7fb fb67 	bl	10f6c <Lpc40xxSystemController::PowerUpPeripheral(SystemControllerInterface::PeripheralID const&)>
    // first clear the appropriate registers
    ssp_registers[pssp]->CR0 =
        bit::Insert(ssp_registers[pssp]->CR0, polarity, kPolarityBit, 1);
   1589e:	4a65      	ldr	r2, [pc, #404]	; (15a34 <Ssp::SetClock(bool, bool, unsigned char, unsigned char)+0x1e0>)
   158a0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   158a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   158a6:	681b      	ldr	r3, [r3, #0]
    ssp_registers[pssp]->CR0 =
   158a8:	4962      	ldr	r1, [pc, #392]	; (15a34 <Ssp::SetClock(bool, bool, unsigned char, unsigned char)+0x1e0>)
   158aa:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   158ac:	f851 5022 	ldr.w	r5, [r1, r2, lsl #2]
   158b0:	9308      	str	r3, [sp, #32]
   158b2:	f89d 3003 	ldrb.w	r3, [sp, #3]
   158b6:	f88d 301f 	strb.w	r3, [sp, #31]
   158ba:	2306      	movs	r3, #6
   158bc:	9306      	str	r3, [sp, #24]
   158be:	2301      	movs	r3, #1
   158c0:	9305      	str	r3, [sp, #20]
   158c2:	4623      	mov	r3, r4
   158c4:	4619      	mov	r1, r3
   158c6:	485c      	ldr	r0, [pc, #368]	; (15a38 <Ssp::SetClock(bool, bool, unsigned char, unsigned char)+0x1e4>)
   158c8:	f7fd fc34 	bl	13134 <__cyg_profile_func_enter>
  constexpr UnsignedT kFieldOfOnes = GenerateFieldOfOnes<T>();
   158cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   158d0:	9304      	str	r3, [sp, #16]
  constexpr size_t kTargetWidth     = sizeof(T) * 8;
   158d2:	2320      	movs	r3, #32
   158d4:	9303      	str	r3, [sp, #12]
  UnsignedT mask   = kFieldOfOnes >> (kTargetWidth - width);
   158d6:	9b05      	ldr	r3, [sp, #20]
   158d8:	f1c3 0320 	rsb	r3, r3, #32
   158dc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   158e0:	fa22 f303 	lsr.w	r3, r2, r3
   158e4:	9302      	str	r3, [sp, #8]
  target &= ~(mask << position);
   158e6:	9a02      	ldr	r2, [sp, #8]
   158e8:	9b06      	ldr	r3, [sp, #24]
   158ea:	fa02 f303 	lsl.w	r3, r2, r3
   158ee:	43db      	mvns	r3, r3
   158f0:	9a08      	ldr	r2, [sp, #32]
   158f2:	4013      	ands	r3, r2
   158f4:	9308      	str	r3, [sp, #32]
  target |= (value & mask) << position;
   158f6:	f89d 201f 	ldrb.w	r2, [sp, #31]
   158fa:	9b02      	ldr	r3, [sp, #8]
   158fc:	401a      	ands	r2, r3
   158fe:	9b06      	ldr	r3, [sp, #24]
   15900:	fa02 f303 	lsl.w	r3, r2, r3
   15904:	9a08      	ldr	r2, [sp, #32]
   15906:	4313      	orrs	r3, r2
   15908:	9308      	str	r3, [sp, #32]
  return target;
   1590a:	9e08      	ldr	r6, [sp, #32]
   1590c:	4623      	mov	r3, r4
   1590e:	4619      	mov	r1, r3
   15910:	4849      	ldr	r0, [pc, #292]	; (15a38 <Ssp::SetClock(bool, bool, unsigned char, unsigned char)+0x1e4>)
   15912:	f7fd fc23 	bl	1315c <__cyg_profile_func_exit>
   15916:	602e      	str	r6, [r5, #0]
    ssp_registers[pssp]->CR0 =
        bit::Insert(ssp_registers[pssp]->CR0, phase, kPhaseBit, 1);
   15918:	4a46      	ldr	r2, [pc, #280]	; (15a34 <Ssp::SetClock(bool, bool, unsigned char, unsigned char)+0x1e0>)
   1591a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   1591c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15920:	681b      	ldr	r3, [r3, #0]
    ssp_registers[pssp]->CR0 =
   15922:	4944      	ldr	r1, [pc, #272]	; (15a34 <Ssp::SetClock(bool, bool, unsigned char, unsigned char)+0x1e0>)
   15924:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   15926:	f851 5022 	ldr.w	r5, [r1, r2, lsl #2]
   1592a:	930f      	str	r3, [sp, #60]	; 0x3c
   1592c:	f89d 3002 	ldrb.w	r3, [sp, #2]
   15930:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
   15934:	2307      	movs	r3, #7
   15936:	930d      	str	r3, [sp, #52]	; 0x34
   15938:	2301      	movs	r3, #1
   1593a:	930c      	str	r3, [sp, #48]	; 0x30
   1593c:	4623      	mov	r3, r4
   1593e:	4619      	mov	r1, r3
   15940:	483d      	ldr	r0, [pc, #244]	; (15a38 <Ssp::SetClock(bool, bool, unsigned char, unsigned char)+0x1e4>)
   15942:	f7fd fbf7 	bl	13134 <__cyg_profile_func_enter>
  constexpr UnsignedT kFieldOfOnes = GenerateFieldOfOnes<T>();
   15946:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1594a:	930b      	str	r3, [sp, #44]	; 0x2c
  constexpr size_t kTargetWidth     = sizeof(T) * 8;
   1594c:	2320      	movs	r3, #32
   1594e:	930a      	str	r3, [sp, #40]	; 0x28
  UnsignedT mask   = kFieldOfOnes >> (kTargetWidth - width);
   15950:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   15952:	f1c3 0320 	rsb	r3, r3, #32
   15956:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1595a:	fa22 f303 	lsr.w	r3, r2, r3
   1595e:	9309      	str	r3, [sp, #36]	; 0x24
  target &= ~(mask << position);
   15960:	9a09      	ldr	r2, [sp, #36]	; 0x24
   15962:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   15964:	fa02 f303 	lsl.w	r3, r2, r3
   15968:	43db      	mvns	r3, r3
   1596a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   1596c:	4013      	ands	r3, r2
   1596e:	930f      	str	r3, [sp, #60]	; 0x3c
  target |= (value & mask) << position;
   15970:	f89d 203b 	ldrb.w	r2, [sp, #59]	; 0x3b
   15974:	9b09      	ldr	r3, [sp, #36]	; 0x24
   15976:	401a      	ands	r2, r3
   15978:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1597a:	fa02 f303 	lsl.w	r3, r2, r3
   1597e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   15980:	4313      	orrs	r3, r2
   15982:	930f      	str	r3, [sp, #60]	; 0x3c
  return target;
   15984:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
   15986:	4623      	mov	r3, r4
   15988:	4619      	mov	r1, r3
   1598a:	482b      	ldr	r0, [pc, #172]	; (15a38 <Ssp::SetClock(bool, bool, unsigned char, unsigned char)+0x1e4>)
   1598c:	f7fd fbe6 	bl	1315c <__cyg_profile_func_exit>
   15990:	602e      	str	r6, [r5, #0]
    ssp_registers[pssp]->CR0 =
        bit::Insert(ssp_registers[pssp]->CR0, divider, kDividerBit, 8);
   15992:	4a28      	ldr	r2, [pc, #160]	; (15a34 <Ssp::SetClock(bool, bool, unsigned char, unsigned char)+0x1e0>)
   15994:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   15996:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1599a:	681b      	ldr	r3, [r3, #0]
    ssp_registers[pssp]->CR0 =
   1599c:	4925      	ldr	r1, [pc, #148]	; (15a34 <Ssp::SetClock(bool, bool, unsigned char, unsigned char)+0x1e0>)
   1599e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   159a0:	f851 5022 	ldr.w	r5, [r1, r2, lsl #2]
   159a4:	9316      	str	r3, [sp, #88]	; 0x58
   159a6:	f89d 3001 	ldrb.w	r3, [sp, #1]
   159aa:	f88d 3057 	strb.w	r3, [sp, #87]	; 0x57
   159ae:	2308      	movs	r3, #8
   159b0:	9314      	str	r3, [sp, #80]	; 0x50
   159b2:	2308      	movs	r3, #8
   159b4:	9313      	str	r3, [sp, #76]	; 0x4c
   159b6:	4623      	mov	r3, r4
   159b8:	4619      	mov	r1, r3
   159ba:	4820      	ldr	r0, [pc, #128]	; (15a3c <Ssp::SetClock(bool, bool, unsigned char, unsigned char)+0x1e8>)
   159bc:	f7fd fbba 	bl	13134 <__cyg_profile_func_enter>
  constexpr UnsignedT kFieldOfOnes = GenerateFieldOfOnes<T>();
   159c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   159c4:	9312      	str	r3, [sp, #72]	; 0x48
  constexpr size_t kTargetWidth     = sizeof(T) * 8;
   159c6:	2320      	movs	r3, #32
   159c8:	9311      	str	r3, [sp, #68]	; 0x44
  UnsignedT mask   = kFieldOfOnes >> (kTargetWidth - width);
   159ca:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   159cc:	f1c3 0320 	rsb	r3, r3, #32
   159d0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   159d4:	fa22 f303 	lsr.w	r3, r2, r3
   159d8:	9310      	str	r3, [sp, #64]	; 0x40
  target &= ~(mask << position);
   159da:	9a10      	ldr	r2, [sp, #64]	; 0x40
   159dc:	9b14      	ldr	r3, [sp, #80]	; 0x50
   159de:	fa02 f303 	lsl.w	r3, r2, r3
   159e2:	43db      	mvns	r3, r3
   159e4:	9a16      	ldr	r2, [sp, #88]	; 0x58
   159e6:	4013      	ands	r3, r2
   159e8:	9316      	str	r3, [sp, #88]	; 0x58
  target |= (value & mask) << position;
   159ea:	f89d 2057 	ldrb.w	r2, [sp, #87]	; 0x57
   159ee:	9b10      	ldr	r3, [sp, #64]	; 0x40
   159f0:	401a      	ands	r2, r3
   159f2:	9b14      	ldr	r3, [sp, #80]	; 0x50
   159f4:	fa02 f303 	lsl.w	r3, r2, r3
   159f8:	9a16      	ldr	r2, [sp, #88]	; 0x58
   159fa:	4313      	orrs	r3, r2
   159fc:	9316      	str	r3, [sp, #88]	; 0x58
  return target;
   159fe:	9e16      	ldr	r6, [sp, #88]	; 0x58
   15a00:	4623      	mov	r3, r4
   15a02:	4619      	mov	r1, r3
   15a04:	480d      	ldr	r0, [pc, #52]	; (15a3c <Ssp::SetClock(bool, bool, unsigned char, unsigned char)+0x1e8>)
   15a06:	f7fd fba9 	bl	1315c <__cyg_profile_func_exit>
   15a0a:	602e      	str	r6, [r5, #0]
    ssp_registers[pssp]->CPSR = prescaler;
   15a0c:	4a09      	ldr	r2, [pc, #36]	; (15a34 <Ssp::SetClock(bool, bool, unsigned char, unsigned char)+0x1e0>)
   15a0e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   15a10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15a14:	f89d 2070 	ldrb.w	r2, [sp, #112]	; 0x70
   15a18:	611a      	str	r2, [r3, #16]
   15a1a:	4623      	mov	r3, r4
   15a1c:	4619      	mov	r1, r3
   15a1e:	4803      	ldr	r0, [pc, #12]	; (15a2c <Ssp::SetClock(bool, bool, unsigned char, unsigned char)+0x1d8>)
   15a20:	f7fd fb9c 	bl	1315c <__cyg_profile_func_exit>
  }
   15a24:	bf00      	nop
   15a26:	b018      	add	sp, #96	; 0x60
   15a28:	bd70      	pop	{r4, r5, r6, pc}
   15a2a:	bf00      	nop
   15a2c:	00015855 	.word	0x00015855
   15a30:	00019044 	.word	0x00019044
   15a34:	100001c8 	.word	0x100001c8
   15a38:	00016fdd 	.word	0x00016fdd
   15a3c:	00016f15 	.word	0x00016f15

00015a40 <Ssp::GetClock()>:
  ///   0000_0000 0000_0x0x xxxx_xxxx xxxx_xxxx
  ///       polarity    = 1-bit @ bit 18
  ///       phase       = 1-bit @ bit 16
  ///       divider     = 8-bits @ bit 8
  ///       prescaler   = 8-bits @ bit 0
  uint32_t GetClock() override
   15a40:	b570      	push	{r4, r5, r6, lr}
   15a42:	b094      	sub	sp, #80	; 0x50
   15a44:	4674      	mov	r4, lr
   15a46:	9001      	str	r0, [sp, #4]
   15a48:	4623      	mov	r3, r4
   15a4a:	4619      	mov	r1, r3
   15a4c:	4858      	ldr	r0, [pc, #352]	; (15bb0 <Ssp::GetClock()+0x170>)
   15a4e:	f7fd fb71 	bl	13134 <__cyg_profile_func_enter>
  {
    uint32_t return_val = 0;
   15a52:	2300      	movs	r3, #0
   15a54:	9313      	str	r3, [sp, #76]	; 0x4c
    uint32_t pssp       = util::Value(pssp_);
   15a56:	9b01      	ldr	r3, [sp, #4]
   15a58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   15a5a:	4618      	mov	r0, r3
   15a5c:	f7ff fb02 	bl	15064 <int util::Value<Ssp::Peripheral, int>(Ssp::Peripheral)>
   15a60:	4603      	mov	r3, r0
   15a62:	9312      	str	r3, [sp, #72]	; 0x48
    // TODO(#371): Find a better alternative to powering up the peripheral for
    // every method.
    Ssp::PowerUpPeripheral(Ssp::kPowerBit[pssp]);
   15a64:	9b01      	ldr	r3, [sp, #4]
   15a66:	1d18      	adds	r0, r3, #4
   15a68:	9b12      	ldr	r3, [sp, #72]	; 0x48
   15a6a:	009b      	lsls	r3, r3, #2
   15a6c:	4a51      	ldr	r2, [pc, #324]	; (15bb4 <Ssp::GetClock()+0x174>)
   15a6e:	4413      	add	r3, r2
   15a70:	4619      	mov	r1, r3
   15a72:	f7fb fa7b 	bl	10f6c <Lpc40xxSystemController::PowerUpPeripheral(SystemControllerInterface::PeripheralID const&)>

    return_val =
        (bit::Extract(ssp_registers[pssp]->CPSR, kPrescalerBit, 8)) +
   15a76:	4a50      	ldr	r2, [pc, #320]	; (15bb8 <Ssp::GetClock()+0x178>)
   15a78:	9b12      	ldr	r3, [sp, #72]	; 0x48
   15a7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15a7e:	691b      	ldr	r3, [r3, #16]
   15a80:	9307      	str	r3, [sp, #28]
   15a82:	2300      	movs	r3, #0
   15a84:	9306      	str	r3, [sp, #24]
   15a86:	2308      	movs	r3, #8
   15a88:	9305      	str	r3, [sp, #20]
   15a8a:	4623      	mov	r3, r4
   15a8c:	4619      	mov	r1, r3
   15a8e:	484b      	ldr	r0, [pc, #300]	; (15bbc <Ssp::GetClock()+0x17c>)
   15a90:	f7fd fb50 	bl	13134 <__cyg_profile_func_enter>
  constexpr UnsignedT kFieldOfOnes = GenerateFieldOfOnes<T>();
   15a94:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   15a98:	9304      	str	r3, [sp, #16]
  constexpr size_t kTargetWidth     = sizeof(T) * 8;
   15a9a:	2320      	movs	r3, #32
   15a9c:	9303      	str	r3, [sp, #12]
  UnsignedT mask   = kFieldOfOnes >> (kTargetWidth - width);
   15a9e:	9b05      	ldr	r3, [sp, #20]
   15aa0:	f1c3 0320 	rsb	r3, r3, #32
   15aa4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   15aa8:	fa22 f303 	lsr.w	r3, r2, r3
   15aac:	9302      	str	r3, [sp, #8]
  return (target >> position) & mask;
   15aae:	9a07      	ldr	r2, [sp, #28]
   15ab0:	9b06      	ldr	r3, [sp, #24]
   15ab2:	40da      	lsrs	r2, r3
   15ab4:	9b02      	ldr	r3, [sp, #8]
   15ab6:	ea02 0503 	and.w	r5, r2, r3
   15aba:	4623      	mov	r3, r4
   15abc:	4619      	mov	r1, r3
   15abe:	483f      	ldr	r0, [pc, #252]	; (15bbc <Ssp::GetClock()+0x17c>)
   15ac0:	f7fd fb4c 	bl	1315c <__cyg_profile_func_exit>
        ((bit::Extract(ssp_registers[pssp]->CR0, kDividerBit, 8)) << 8) +
   15ac4:	4a3c      	ldr	r2, [pc, #240]	; (15bb8 <Ssp::GetClock()+0x178>)
   15ac6:	9b12      	ldr	r3, [sp, #72]	; 0x48
   15ac8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15acc:	681b      	ldr	r3, [r3, #0]
   15ace:	930d      	str	r3, [sp, #52]	; 0x34
   15ad0:	2308      	movs	r3, #8
   15ad2:	930c      	str	r3, [sp, #48]	; 0x30
   15ad4:	2308      	movs	r3, #8
   15ad6:	930b      	str	r3, [sp, #44]	; 0x2c
   15ad8:	4623      	mov	r3, r4
   15ada:	4619      	mov	r1, r3
   15adc:	4837      	ldr	r0, [pc, #220]	; (15bbc <Ssp::GetClock()+0x17c>)
   15ade:	f7fd fb29 	bl	13134 <__cyg_profile_func_enter>
  constexpr UnsignedT kFieldOfOnes = GenerateFieldOfOnes<T>();
   15ae2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   15ae6:	930a      	str	r3, [sp, #40]	; 0x28
  constexpr size_t kTargetWidth     = sizeof(T) * 8;
   15ae8:	2320      	movs	r3, #32
   15aea:	9309      	str	r3, [sp, #36]	; 0x24
  UnsignedT mask   = kFieldOfOnes >> (kTargetWidth - width);
   15aec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   15aee:	f1c3 0320 	rsb	r3, r3, #32
   15af2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   15af6:	fa22 f303 	lsr.w	r3, r2, r3
   15afa:	9308      	str	r3, [sp, #32]
  return (target >> position) & mask;
   15afc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   15afe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   15b00:	40da      	lsrs	r2, r3
   15b02:	9b08      	ldr	r3, [sp, #32]
   15b04:	ea02 0603 	and.w	r6, r2, r3
   15b08:	4623      	mov	r3, r4
   15b0a:	4619      	mov	r1, r3
   15b0c:	482b      	ldr	r0, [pc, #172]	; (15bbc <Ssp::GetClock()+0x17c>)
   15b0e:	f7fd fb25 	bl	1315c <__cyg_profile_func_exit>
   15b12:	0233      	lsls	r3, r6, #8
        (bit::Extract(ssp_registers[pssp]->CPSR, kPrescalerBit, 8)) +
   15b14:	441d      	add	r5, r3
        ((bit::Read(ssp_registers[pssp]->CR0, kPhaseBit)) << 16) +
   15b16:	4a28      	ldr	r2, [pc, #160]	; (15bb8 <Ssp::GetClock()+0x178>)
   15b18:	9b12      	ldr	r3, [sp, #72]	; 0x48
   15b1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15b1e:	681b      	ldr	r3, [r3, #0]
   15b20:	930f      	str	r3, [sp, #60]	; 0x3c
   15b22:	2307      	movs	r3, #7
   15b24:	930e      	str	r3, [sp, #56]	; 0x38
   15b26:	4623      	mov	r3, r4
   15b28:	4619      	mov	r1, r3
   15b2a:	4825      	ldr	r0, [pc, #148]	; (15bc0 <Ssp::GetClock()+0x180>)
   15b2c:	f7fd fb02 	bl	13134 <__cyg_profile_func_enter>
  return static_cast<bool>(target & (1 << position));
   15b30:	2201      	movs	r2, #1
   15b32:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   15b34:	fa02 f303 	lsl.w	r3, r2, r3
   15b38:	461a      	mov	r2, r3
   15b3a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   15b3c:	4013      	ands	r3, r2
   15b3e:	2b00      	cmp	r3, #0
   15b40:	bf14      	ite	ne
   15b42:	2301      	movne	r3, #1
   15b44:	2300      	moveq	r3, #0
   15b46:	b2de      	uxtb	r6, r3
   15b48:	4623      	mov	r3, r4
   15b4a:	4619      	mov	r1, r3
   15b4c:	481c      	ldr	r0, [pc, #112]	; (15bc0 <Ssp::GetClock()+0x180>)
   15b4e:	f7fd fb05 	bl	1315c <__cyg_profile_func_exit>
   15b52:	4633      	mov	r3, r6
   15b54:	041b      	lsls	r3, r3, #16
        ((bit::Extract(ssp_registers[pssp]->CR0, kDividerBit, 8)) << 8) +
   15b56:	441d      	add	r5, r3
        ((bit::Read(ssp_registers[pssp]->CR0, kPolarityBit)) << 18);
   15b58:	4a17      	ldr	r2, [pc, #92]	; (15bb8 <Ssp::GetClock()+0x178>)
   15b5a:	9b12      	ldr	r3, [sp, #72]	; 0x48
   15b5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15b60:	681b      	ldr	r3, [r3, #0]
   15b62:	9311      	str	r3, [sp, #68]	; 0x44
   15b64:	2306      	movs	r3, #6
   15b66:	9310      	str	r3, [sp, #64]	; 0x40
   15b68:	4623      	mov	r3, r4
   15b6a:	4619      	mov	r1, r3
   15b6c:	4814      	ldr	r0, [pc, #80]	; (15bc0 <Ssp::GetClock()+0x180>)
   15b6e:	f7fd fae1 	bl	13134 <__cyg_profile_func_enter>
   15b72:	2201      	movs	r2, #1
   15b74:	9b10      	ldr	r3, [sp, #64]	; 0x40
   15b76:	fa02 f303 	lsl.w	r3, r2, r3
   15b7a:	461a      	mov	r2, r3
   15b7c:	9b11      	ldr	r3, [sp, #68]	; 0x44
   15b7e:	4013      	ands	r3, r2
   15b80:	2b00      	cmp	r3, #0
   15b82:	bf14      	ite	ne
   15b84:	2301      	movne	r3, #1
   15b86:	2300      	moveq	r3, #0
   15b88:	b2de      	uxtb	r6, r3
   15b8a:	4623      	mov	r3, r4
   15b8c:	4619      	mov	r1, r3
   15b8e:	480c      	ldr	r0, [pc, #48]	; (15bc0 <Ssp::GetClock()+0x180>)
   15b90:	f7fd fae4 	bl	1315c <__cyg_profile_func_exit>
   15b94:	4633      	mov	r3, r6
   15b96:	049b      	lsls	r3, r3, #18
    return_val =
   15b98:	442b      	add	r3, r5
   15b9a:	9313      	str	r3, [sp, #76]	; 0x4c

    return return_val;
   15b9c:	9d13      	ldr	r5, [sp, #76]	; 0x4c
   15b9e:	4623      	mov	r3, r4
   15ba0:	4619      	mov	r1, r3
   15ba2:	4803      	ldr	r0, [pc, #12]	; (15bb0 <Ssp::GetClock()+0x170>)
   15ba4:	f7fd fada 	bl	1315c <__cyg_profile_func_exit>
   15ba8:	462b      	mov	r3, r5
  }
   15baa:	4618      	mov	r0, r3
   15bac:	b014      	add	sp, #80	; 0x50
   15bae:	bd70      	pop	{r4, r5, r6, pc}
   15bb0:	00015a41 	.word	0x00015a41
   15bb4:	00019044 	.word	0x00019044
   15bb8:	100001c8 	.word	0x100001c8
   15bbc:	00016f89 	.word	0x00016f89
   15bc0:	00016ed1 	.word	0x00016ed1

00015bc4 <SdInterface::SdInterface()>:
// NOLINTNEXTLINE(readability-identifier-naming)
// Relevant Datasheet:
// https://www.sdcard.org/downloads/pls/pdf/index.php?p=Part1_Physical_Layer_Simplified_Specification_Ver6.00.jpg&f=Part1_Physical_Layer_Simplified_Specification_Ver6.00.pdf&e=EN_SS1
// TODO(#348):  Write a class to represent a single Sd Card Block to make use
//              of block-related functions easier.
class SdInterface
   15bc4:	b530      	push	{r4, r5, lr}
   15bc6:	b083      	sub	sp, #12
   15bc8:	4675      	mov	r5, lr
   15bca:	9001      	str	r0, [sp, #4]
   15bcc:	462b      	mov	r3, r5
   15bce:	4619      	mov	r1, r3
   15bd0:	4807      	ldr	r0, [pc, #28]	; (15bf0 <SdInterface::SdInterface()+0x2c>)
   15bd2:	f7fd faaf 	bl	13134 <__cyg_profile_func_enter>
   15bd6:	4a07      	ldr	r2, [pc, #28]	; (15bf4 <SdInterface::SdInterface()+0x30>)
   15bd8:	9b01      	ldr	r3, [sp, #4]
   15bda:	601a      	str	r2, [r3, #0]
   15bdc:	9c01      	ldr	r4, [sp, #4]
   15bde:	462b      	mov	r3, r5
   15be0:	4619      	mov	r1, r3
   15be2:	4803      	ldr	r0, [pc, #12]	; (15bf0 <SdInterface::SdInterface()+0x2c>)
   15be4:	f7fd faba 	bl	1315c <__cyg_profile_func_exit>
   15be8:	4623      	mov	r3, r4
   15bea:	4618      	mov	r0, r3
   15bec:	b003      	add	sp, #12
   15bee:	bd30      	pop	{r4, r5, pc}
   15bf0:	00015bc5 	.word	0x00015bc5
   15bf4:	0001941c 	.word	0x0001941c

00015bf8 <Sd::Sd(Sd::DebugSdCard_t, unsigned char, unsigned char, unsigned char, unsigned char)>:
  /// port that is broken out through the board's GPIO, allowing you to probe
  /// the chip select manually. To use this version instead of the main version,
  /// instantiate an Sd card instance like so:
  ///
  ///   Sd sdcard(Sd::DebugSdCard_t{});
  constexpr Sd(DebugSdCard_t, uint8_t port = 1, uint8_t pin = 8,
   15bf8:	b530      	push	{r4, r5, lr}
   15bfa:	b083      	sub	sp, #12
   15bfc:	4675      	mov	r5, lr
   15bfe:	9001      	str	r0, [sp, #4]
   15c00:	f88d 1000 	strb.w	r1, [sp]
   15c04:	4611      	mov	r1, r2
   15c06:	461a      	mov	r2, r3
   15c08:	460b      	mov	r3, r1
   15c0a:	f88d 3003 	strb.w	r3, [sp, #3]
   15c0e:	4613      	mov	r3, r2
   15c10:	f88d 3002 	strb.w	r3, [sp, #2]
   15c14:	462b      	mov	r3, r5
   15c16:	4619      	mov	r1, r3
   15c18:	481d      	ldr	r0, [pc, #116]	; (15c90 <Sd::Sd(Sd::DebugSdCard_t, unsigned char, unsigned char, unsigned char, unsigned char)+0x98>)
   15c1a:	f7fd fa8b 	bl	13134 <__cyg_profile_func_enter>
      : ssp_interface_(&ssp_),
        ssp_(Ssp::Peripheral::kSsp2),
        chip_select_(&chip_select_pin_),
        chip_select_external_(&chip_select_external_pin_),
        chip_select_pin_(port, pin),
        chip_select_external_pin_(extport, extpin)
   15c1e:	9b01      	ldr	r3, [sp, #4]
   15c20:	4618      	mov	r0, r3
   15c22:	f7ff ffcf 	bl	15bc4 <SdInterface::SdInterface()>
   15c26:	4a1b      	ldr	r2, [pc, #108]	; (15c94 <Sd::Sd(Sd::DebugSdCard_t, unsigned char, unsigned char, unsigned char, unsigned char)+0x9c>)
   15c28:	9b01      	ldr	r3, [sp, #4]
   15c2a:	601a      	str	r2, [r3, #0]
   15c2c:	9b01      	ldr	r3, [sp, #4]
   15c2e:	f103 0208 	add.w	r2, r3, #8
   15c32:	9b01      	ldr	r3, [sp, #4]
   15c34:	605a      	str	r2, [r3, #4]
   15c36:	9b01      	ldr	r3, [sp, #4]
   15c38:	3308      	adds	r3, #8
   15c3a:	2102      	movs	r1, #2
   15c3c:	4618      	mov	r0, r3
   15c3e:	f7ff fa87 	bl	15150 <Ssp::Ssp(Ssp::Peripheral)>
   15c42:	9b01      	ldr	r3, [sp, #4]
   15c44:	f103 0240 	add.w	r2, r3, #64	; 0x40
   15c48:	9b01      	ldr	r3, [sp, #4]
   15c4a:	639a      	str	r2, [r3, #56]	; 0x38
   15c4c:	9b01      	ldr	r3, [sp, #4]
   15c4e:	f103 0254 	add.w	r2, r3, #84	; 0x54
   15c52:	9b01      	ldr	r3, [sp, #4]
   15c54:	63da      	str	r2, [r3, #60]	; 0x3c
   15c56:	9b01      	ldr	r3, [sp, #4]
   15c58:	3340      	adds	r3, #64	; 0x40
   15c5a:	f89d 2002 	ldrb.w	r2, [sp, #2]
   15c5e:	f89d 1003 	ldrb.w	r1, [sp, #3]
   15c62:	4618      	mov	r0, r3
   15c64:	f7fe fd4c 	bl	14700 <Gpio::Gpio(unsigned char, unsigned char)>
   15c68:	9b01      	ldr	r3, [sp, #4]
   15c6a:	3354      	adds	r3, #84	; 0x54
   15c6c:	f89d 201c 	ldrb.w	r2, [sp, #28]
   15c70:	f89d 1018 	ldrb.w	r1, [sp, #24]
   15c74:	4618      	mov	r0, r3
   15c76:	f7fe fd43 	bl	14700 <Gpio::Gpio(unsigned char, unsigned char)>
  {
  }
   15c7a:	9c01      	ldr	r4, [sp, #4]
   15c7c:	462b      	mov	r3, r5
   15c7e:	4619      	mov	r1, r3
   15c80:	4803      	ldr	r0, [pc, #12]	; (15c90 <Sd::Sd(Sd::DebugSdCard_t, unsigned char, unsigned char, unsigned char, unsigned char)+0x98>)
   15c82:	f7fd fa6b 	bl	1315c <__cyg_profile_func_exit>
   15c86:	4623      	mov	r3, r4
   15c88:	4618      	mov	r0, r3
   15c8a:	b003      	add	sp, #12
   15c8c:	bd30      	pop	{r4, r5, pc}
   15c8e:	bf00      	nop
   15c90:	00015bf9 	.word	0x00015bf9
   15c94:	000193f0 	.word	0x000193f0

00015c98 <Sd::Initialize()>:

  void Initialize() override
   15c98:	b530      	push	{r4, r5, lr}
   15c9a:	b085      	sub	sp, #20
   15c9c:	4675      	mov	r5, lr
   15c9e:	9003      	str	r0, [sp, #12]
   15ca0:	462b      	mov	r3, r5
   15ca2:	4619      	mov	r1, r3
   15ca4:	4827      	ldr	r0, [pc, #156]	; (15d44 <Sd::Initialize()+0xac>)
   15ca6:	f7fd fa45 	bl	13134 <__cyg_profile_func_enter>
  {
    LOG_DEBUG("Begin initialization:");
    LOG_DEBUG("Setting CS as output...");
    chip_select_->SetAsOutput();
   15caa:	9b03      	ldr	r3, [sp, #12]
   15cac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   15cae:	9b03      	ldr	r3, [sp, #12]
   15cb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   15cb2:	681b      	ldr	r3, [r3, #0]
   15cb4:	3304      	adds	r3, #4
   15cb6:	681b      	ldr	r3, [r3, #0]
   15cb8:	4610      	mov	r0, r2
   15cba:	4798      	blx	r3
    chip_select_->SetHigh();
   15cbc:	9b03      	ldr	r3, [sp, #12]
   15cbe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   15cc0:	9b03      	ldr	r3, [sp, #12]
   15cc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   15cc4:	681b      	ldr	r3, [r3, #0]
   15cc6:	330c      	adds	r3, #12
   15cc8:	681b      	ldr	r3, [r3, #0]
   15cca:	4610      	mov	r0, r2
   15ccc:	4798      	blx	r3
    chip_select_external_->SetAsOutput();
   15cce:	9b03      	ldr	r3, [sp, #12]
   15cd0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
   15cd2:	9b03      	ldr	r3, [sp, #12]
   15cd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   15cd6:	681b      	ldr	r3, [r3, #0]
   15cd8:	3304      	adds	r3, #4
   15cda:	681b      	ldr	r3, [r3, #0]
   15cdc:	4610      	mov	r0, r2
   15cde:	4798      	blx	r3
    chip_select_external_->SetHigh();
   15ce0:	9b03      	ldr	r3, [sp, #12]
   15ce2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
   15ce4:	9b03      	ldr	r3, [sp, #12]
   15ce6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   15ce8:	681b      	ldr	r3, [r3, #0]
   15cea:	330c      	adds	r3, #12
   15cec:	681b      	ldr	r3, [r3, #0]
   15cee:	4610      	mov	r0, r2
   15cf0:	4798      	blx	r3

    LOG_DEBUG("Setting SSP Clock Speed...");
    ssp_interface_->SetClock(false, false, 14, 2);  // 400kHz
   15cf2:	9b03      	ldr	r3, [sp, #12]
   15cf4:	6858      	ldr	r0, [r3, #4]
   15cf6:	9b03      	ldr	r3, [sp, #12]
   15cf8:	685b      	ldr	r3, [r3, #4]
   15cfa:	681b      	ldr	r3, [r3, #0]
   15cfc:	3318      	adds	r3, #24
   15cfe:	681c      	ldr	r4, [r3, #0]
   15d00:	2302      	movs	r3, #2
   15d02:	9300      	str	r3, [sp, #0]
   15d04:	230e      	movs	r3, #14
   15d06:	2200      	movs	r2, #0
   15d08:	2100      	movs	r1, #0
   15d0a:	47a0      	blx	r4

    LOG_DEBUG("Setting Peripheral Mode...");
    ssp_interface_->SetPeripheralMode(Ssp::MasterSlaveMode::kMaster,
   15d0c:	9b03      	ldr	r3, [sp, #12]
   15d0e:	6858      	ldr	r0, [r3, #4]
   15d10:	9b03      	ldr	r3, [sp, #12]
   15d12:	685b      	ldr	r3, [r3, #4]
                                      Ssp::FrameMode::kSpi,
                                      Ssp::DataSize::kEight);
   15d14:	681b      	ldr	r3, [r3, #0]
   15d16:	3310      	adds	r3, #16
   15d18:	681c      	ldr	r4, [r3, #0]
    ssp_interface_->SetPeripheralMode(Ssp::MasterSlaveMode::kMaster,
   15d1a:	2307      	movs	r3, #7
   15d1c:	2200      	movs	r2, #0
   15d1e:	2100      	movs	r1, #0
   15d20:	47a0      	blx	r4

    LOG_DEBUG("Starting SSP Peripheral...");
    ssp_interface_->Initialize();
   15d22:	9b03      	ldr	r3, [sp, #12]
   15d24:	685a      	ldr	r2, [r3, #4]
   15d26:	9b03      	ldr	r3, [sp, #12]
   15d28:	685b      	ldr	r3, [r3, #4]
   15d2a:	681b      	ldr	r3, [r3, #0]
   15d2c:	681b      	ldr	r3, [r3, #0]
   15d2e:	4610      	mov	r0, r2
   15d30:	4798      	blx	r3
   15d32:	462b      	mov	r3, r5
   15d34:	4619      	mov	r1, r3
   15d36:	4803      	ldr	r0, [pc, #12]	; (15d44 <Sd::Initialize()+0xac>)
   15d38:	f7fd fa10 	bl	1315c <__cyg_profile_func_exit>
  }
   15d3c:	bf00      	nop
   15d3e:	b005      	add	sp, #20
   15d40:	bd30      	pop	{r4, r5, pc}
   15d42:	bf00      	nop
   15d44:	00015c99 	.word	0x00015c99

00015d48 <Sd::Mount(SdInterface::CardInfo_t*)>:

  // Initialize SD Card
  // TODO(#349): Split method into smaller piece with single jobs
  bool Mount(CardInfo_t * sd) override
   15d48:	b530      	push	{r4, r5, lr}
   15d4a:	b08b      	sub	sp, #44	; 0x2c
   15d4c:	4675      	mov	r5, lr
   15d4e:	9003      	str	r0, [sp, #12]
   15d50:	9102      	str	r1, [sp, #8]
   15d52:	462b      	mov	r3, r5
   15d54:	4619      	mov	r1, r3
   15d56:	48a7      	ldr	r0, [pc, #668]	; (15ff4 <Sd::Mount(SdInterface::CardInfo_t*)+0x2ac>)
   15d58:	f7fd f9ec 	bl	13134 <__cyg_profile_func_enter>
  {
    uint8_t tries     = 0;
   15d5c:	2300      	movs	r3, #0
   15d5e:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    bool card_is_idle = false;
   15d62:	2300      	movs	r3, #0
   15d64:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26

    // Reset the card and force it to go to idle state at <400kHz with a
    // CMD0 + (active-low) CS
    LOG_DEBUG("Sending SD Card to Idle State...");
    sd->response.length = SendCmd(Command::kReset, 0x00000000,
                                  sd->response.data.byte, 100, KeepAlive::kYes);
   15d68:	9b03      	ldr	r3, [sp, #12]
   15d6a:	681b      	ldr	r3, [r3, #0]
   15d6c:	681c      	ldr	r4, [r3, #0]
    sd->response.length = SendCmd(Command::kReset, 0x00000000,
   15d6e:	9b02      	ldr	r3, [sp, #8]
   15d70:	f103 0208 	add.w	r2, r3, #8
   15d74:	2301      	movs	r3, #1
   15d76:	9301      	str	r3, [sp, #4]
   15d78:	2364      	movs	r3, #100	; 0x64
   15d7a:	9300      	str	r3, [sp, #0]
   15d7c:	4613      	mov	r3, r2
   15d7e:	2200      	movs	r2, #0
   15d80:	2140      	movs	r1, #64	; 0x40
   15d82:	9803      	ldr	r0, [sp, #12]
   15d84:	47a0      	blx	r4
   15d86:	4602      	mov	r2, r0
   15d88:	9b02      	ldr	r3, [sp, #8]
   15d8a:	611a      	str	r2, [r3, #16]

    // Reset the card again to trigger SPI mode
    LOG_DEBUG("Initializing SPI mode...");
    do
    {
      tries++;
   15d8c:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   15d90:	3301      	adds	r3, #1
   15d92:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
      sd->response.length = SendCmd(
          Command::kReset, 0x00, sd->response.data.byte, 100, KeepAlive::kYes);
   15d96:	9b03      	ldr	r3, [sp, #12]
   15d98:	681b      	ldr	r3, [r3, #0]
   15d9a:	681c      	ldr	r4, [r3, #0]
      sd->response.length = SendCmd(
   15d9c:	9b02      	ldr	r3, [sp, #8]
   15d9e:	f103 0208 	add.w	r2, r3, #8
   15da2:	2301      	movs	r3, #1
   15da4:	9301      	str	r3, [sp, #4]
   15da6:	2364      	movs	r3, #100	; 0x64
   15da8:	9300      	str	r3, [sp, #0]
   15daa:	4613      	mov	r3, r2
   15dac:	2200      	movs	r2, #0
   15dae:	2140      	movs	r1, #64	; 0x40
   15db0:	9803      	ldr	r0, [sp, #12]
   15db2:	47a0      	blx	r4
   15db4:	4602      	mov	r2, r0
   15db6:	9b02      	ldr	r3, [sp, #8]
   15db8:	611a      	str	r2, [r3, #16]

      // Check if R1 response frame's bit 1 is set (to ensure that
      // card is in idle state)
      if (sd->response.data.byte[0] != 0xFF &&
   15dba:	9b02      	ldr	r3, [sp, #8]
   15dbc:	7a1b      	ldrb	r3, [r3, #8]
   15dbe:	2bff      	cmp	r3, #255	; 0xff
   15dc0:	d008      	beq.n	15dd4 <Sd::Mount(SdInterface::CardInfo_t*)+0x8c>
          (sd->response.data.byte[0] & 0x01) == 0x01)
   15dc2:	9b02      	ldr	r3, [sp, #8]
   15dc4:	7a1b      	ldrb	r3, [r3, #8]
   15dc6:	f003 0301 	and.w	r3, r3, #1
      if (sd->response.data.byte[0] != 0xFF &&
   15dca:	2b00      	cmp	r3, #0
   15dcc:	d002      	beq.n	15dd4 <Sd::Mount(SdInterface::CardInfo_t*)+0x8c>
      {
        // If it is, we can move on; otherwise, keep trying for a set
        // amount of tries
        card_is_idle = true;
   15dce:	2301      	movs	r3, #1
   15dd0:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
      }
      Delay(10);
   15dd4:	f04f 000a 	mov.w	r0, #10
   15dd8:	f04f 0100 	mov.w	r1, #0
   15ddc:	f7fa fe04 	bl	109e8 <Delay(unsigned long long)>
    } while (tries < kBusTimeout && !card_is_idle);
   15de0:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   15de4:	2bf9      	cmp	r3, #249	; 0xf9
   15de6:	d804      	bhi.n	15df2 <Sd::Mount(SdInterface::CardInfo_t*)+0xaa>
   15de8:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
   15dec:	2b00      	cmp	r3, #0
   15dee:	d100      	bne.n	15df2 <Sd::Mount(SdInterface::CardInfo_t*)+0xaa>
    do
   15df0:	e7cc      	b.n	15d8c <Sd::Mount(SdInterface::CardInfo_t*)+0x44>
    LOG_DEBUG("%d tries", tries);
    if (tries >= kBusTimeout)
   15df2:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   15df6:	2bf9      	cmp	r3, #249	; 0xf9
   15df8:	d91b      	bls.n	15e32 <Sd::Mount(SdInterface::CardInfo_t*)+0xea>
    {
      LOG_ERROR("Failed to initiate SPI mode within timeout. Aborting!");
   15dfa:	f240 13ff 	movw	r3, #511	; 0x1ff
   15dfe:	4a7e      	ldr	r2, [pc, #504]	; (15ff8 <Sd::Mount(SdInterface::CardInfo_t*)+0x2b0>)
   15e00:	497e      	ldr	r1, [pc, #504]	; (15ffc <Sd::Mount(SdInterface::CardInfo_t*)+0x2b4>)
   15e02:	487f      	ldr	r0, [pc, #508]	; (16000 <Sd::Mount(SdInterface::CardInfo_t*)+0x2b8>)
   15e04:	f7fe fbf6 	bl	145f4 <printf>
      sd->response.length = SendCmd(Command::kGarbage, 0xFFFFFFFF,
                                    sd->response.data.byte, 0, KeepAlive::kNo);
   15e08:	9b03      	ldr	r3, [sp, #12]
   15e0a:	681b      	ldr	r3, [r3, #0]
   15e0c:	681c      	ldr	r4, [r3, #0]
      sd->response.length = SendCmd(Command::kGarbage, 0xFFFFFFFF,
   15e0e:	9b02      	ldr	r3, [sp, #8]
   15e10:	f103 0208 	add.w	r2, r3, #8
   15e14:	2300      	movs	r3, #0
   15e16:	9301      	str	r3, [sp, #4]
   15e18:	2300      	movs	r3, #0
   15e1a:	9300      	str	r3, [sp, #0]
   15e1c:	4613      	mov	r3, r2
   15e1e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   15e22:	21ff      	movs	r1, #255	; 0xff
   15e24:	9803      	ldr	r0, [sp, #12]
   15e26:	47a0      	blx	r4
   15e28:	4602      	mov	r2, r0
   15e2a:	9b02      	ldr	r3, [sp, #8]
   15e2c:	611a      	str	r2, [r3, #16]
      return false;
   15e2e:	2400      	movs	r4, #0
   15e30:	e10c      	b.n	1604c <Sd::Mount(SdInterface::CardInfo_t*)+0x304>
    }

    // Send the host's supported voltage (3.3V) and ask if the card
    // supports it
    LOG_DEBUG("Checking Current SD Card Voltage Level...");
    constexpr uint8_t kCheckPattern = 0xAB;
   15e32:	23ab      	movs	r3, #171	; 0xab
   15e34:	f88d 301f 	strb.w	r3, [sp, #31]
    uint64_t supported_voltage      = 0x00000001;
   15e38:	f04f 0301 	mov.w	r3, #1
   15e3c:	f04f 0400 	mov.w	r4, #0
   15e40:	e9cd 3404 	strd	r3, r4, [sp, #16]
    sd->response.length =
        SendCmd(Command::kGetOp,
                static_cast<uint32_t>((supported_voltage << 8) | kCheckPattern),
                sd->response.data.byte, 100, KeepAlive::kYes);
   15e44:	9b03      	ldr	r3, [sp, #12]
   15e46:	681b      	ldr	r3, [r3, #0]
   15e48:	681c      	ldr	r4, [r3, #0]
                static_cast<uint32_t>((supported_voltage << 8) | kCheckPattern),
   15e4a:	9b04      	ldr	r3, [sp, #16]
   15e4c:	021b      	lsls	r3, r3, #8
        SendCmd(Command::kGetOp,
   15e4e:	f043 02ab 	orr.w	r2, r3, #171	; 0xab
   15e52:	9b02      	ldr	r3, [sp, #8]
   15e54:	f103 0108 	add.w	r1, r3, #8
   15e58:	2301      	movs	r3, #1
   15e5a:	9301      	str	r3, [sp, #4]
   15e5c:	2364      	movs	r3, #100	; 0x64
   15e5e:	9300      	str	r3, [sp, #0]
   15e60:	460b      	mov	r3, r1
   15e62:	2148      	movs	r1, #72	; 0x48
   15e64:	9803      	ldr	r0, [sp, #12]
   15e66:	47a0      	blx	r4
   15e68:	4602      	mov	r2, r0
    sd->response.length =
   15e6a:	9b02      	ldr	r3, [sp, #8]
   15e6c:	611a      	str	r2, [r3, #16]
    if (sd->response.data.byte[4] != kCheckPattern)
   15e6e:	9b02      	ldr	r3, [sp, #8]
   15e70:	7b1b      	ldrb	r3, [r3, #12]
   15e72:	2bab      	cmp	r3, #171	; 0xab
   15e74:	d01b      	beq.n	15eae <Sd::Mount(SdInterface::CardInfo_t*)+0x166>
    {
      // If the last byte is not an exact echo of the LSB of the kGetOp
      // command's argument, this response is invalid
      LOG_ERROR("Response integrity check failed. Aborting!");
   15e76:	f240 2312 	movw	r3, #530	; 0x212
   15e7a:	4a5f      	ldr	r2, [pc, #380]	; (15ff8 <Sd::Mount(SdInterface::CardInfo_t*)+0x2b0>)
   15e7c:	4961      	ldr	r1, [pc, #388]	; (16004 <Sd::Mount(SdInterface::CardInfo_t*)+0x2bc>)
   15e7e:	4862      	ldr	r0, [pc, #392]	; (16008 <Sd::Mount(SdInterface::CardInfo_t*)+0x2c0>)
   15e80:	f7fe fbb8 	bl	145f4 <printf>
      sd->response.length = SendCmd(Command::kGarbage, 0xFFFFFFFF,
                                    sd->response.data.byte, 0, KeepAlive::kNo);
   15e84:	9b03      	ldr	r3, [sp, #12]
   15e86:	681b      	ldr	r3, [r3, #0]
   15e88:	681c      	ldr	r4, [r3, #0]
      sd->response.length = SendCmd(Command::kGarbage, 0xFFFFFFFF,
   15e8a:	9b02      	ldr	r3, [sp, #8]
   15e8c:	f103 0208 	add.w	r2, r3, #8
   15e90:	2300      	movs	r3, #0
   15e92:	9301      	str	r3, [sp, #4]
   15e94:	2300      	movs	r3, #0
   15e96:	9300      	str	r3, [sp, #0]
   15e98:	4613      	mov	r3, r2
   15e9a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   15e9e:	21ff      	movs	r1, #255	; 0xff
   15ea0:	9803      	ldr	r0, [sp, #12]
   15ea2:	47a0      	blx	r4
   15ea4:	4602      	mov	r2, r0
   15ea6:	9b02      	ldr	r3, [sp, #8]
   15ea8:	611a      	str	r2, [r3, #16]
      return false;
   15eaa:	2400      	movs	r4, #0
   15eac:	e0ce      	b.n	1604c <Sd::Mount(SdInterface::CardInfo_t*)+0x304>
    }
    else if (sd->response.data.byte[3] &
   15eae:	9b02      	ldr	r3, [sp, #8]
   15eb0:	7adb      	ldrb	r3, [r3, #11]
   15eb2:	4619      	mov	r1, r3
             (supported_voltage == static_cast<uint64_t>(0x00)))
   15eb4:	9a04      	ldr	r2, [sp, #16]
   15eb6:	9b05      	ldr	r3, [sp, #20]
   15eb8:	4313      	orrs	r3, r2
   15eba:	2b00      	cmp	r3, #0
   15ebc:	bf0c      	ite	eq
   15ebe:	2301      	moveq	r3, #1
   15ec0:	2300      	movne	r3, #0
   15ec2:	b2db      	uxtb	r3, r3
    else if (sd->response.data.byte[3] &
   15ec4:	400b      	ands	r3, r1
   15ec6:	2b00      	cmp	r3, #0
   15ec8:	d01b      	beq.n	15f02 <Sd::Mount(SdInterface::CardInfo_t*)+0x1ba>
    {
      // If the 2nd-to-last byte of the reponse AND'ed with our host
      // device's supported voltage range is 0x00, the SD card doesn't
      // support our device's operating voltage
      LOG_ERROR("Unsupported voltage in use. Aborting!");
   15eca:	f240 231d 	movw	r3, #541	; 0x21d
   15ece:	4a4a      	ldr	r2, [pc, #296]	; (15ff8 <Sd::Mount(SdInterface::CardInfo_t*)+0x2b0>)
   15ed0:	494e      	ldr	r1, [pc, #312]	; (1600c <Sd::Mount(SdInterface::CardInfo_t*)+0x2c4>)
   15ed2:	484f      	ldr	r0, [pc, #316]	; (16010 <Sd::Mount(SdInterface::CardInfo_t*)+0x2c8>)
   15ed4:	f7fe fb8e 	bl	145f4 <printf>
      sd->response.length = SendCmd(Command::kGarbage, 0xFFFFFFFF,
                                    sd->response.data.byte, 0, KeepAlive::kNo);
   15ed8:	9b03      	ldr	r3, [sp, #12]
   15eda:	681b      	ldr	r3, [r3, #0]
   15edc:	681c      	ldr	r4, [r3, #0]
      sd->response.length = SendCmd(Command::kGarbage, 0xFFFFFFFF,
   15ede:	9b02      	ldr	r3, [sp, #8]
   15ee0:	f103 0208 	add.w	r2, r3, #8
   15ee4:	2300      	movs	r3, #0
   15ee6:	9301      	str	r3, [sp, #4]
   15ee8:	2300      	movs	r3, #0
   15eea:	9300      	str	r3, [sp, #0]
   15eec:	4613      	mov	r3, r2
   15eee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   15ef2:	21ff      	movs	r1, #255	; 0xff
   15ef4:	9803      	ldr	r0, [sp, #12]
   15ef6:	47a0      	blx	r4
   15ef8:	4602      	mov	r2, r0
   15efa:	9b02      	ldr	r3, [sp, #8]
   15efc:	611a      	str	r2, [r3, #16]
      return false;
   15efe:	2400      	movs	r4, #0
   15f00:	e0a4      	b.n	1604c <Sd::Mount(SdInterface::CardInfo_t*)+0x304>
    }

    // Indicate that the host supports SDHC/SDXC and wait for card to
    // shift out of idle state
    LOG_DEBUG("Expressing High-Capacity SD Card Support...");
    tries = 0;
   15f02:	2300      	movs	r3, #0
   15f04:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    do
    {
      // Send host's operating conditions
      sd->response.length =
          SendCmd(Command::kInit, 0x40000000, sd->response.data.byte, 100,
                  KeepAlive::kYes);
   15f08:	9b03      	ldr	r3, [sp, #12]
   15f0a:	681b      	ldr	r3, [r3, #0]
   15f0c:	681c      	ldr	r4, [r3, #0]
          SendCmd(Command::kInit, 0x40000000, sd->response.data.byte, 100,
   15f0e:	9b02      	ldr	r3, [sp, #8]
   15f10:	f103 0208 	add.w	r2, r3, #8
   15f14:	2301      	movs	r3, #1
   15f16:	9301      	str	r3, [sp, #4]
   15f18:	2364      	movs	r3, #100	; 0x64
   15f1a:	9300      	str	r3, [sp, #0]
   15f1c:	4613      	mov	r3, r2
   15f1e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   15f22:	2141      	movs	r1, #65	; 0x41
   15f24:	9803      	ldr	r0, [sp, #12]
   15f26:	47a0      	blx	r4
   15f28:	4602      	mov	r2, r0
      sd->response.length =
   15f2a:	9b02      	ldr	r3, [sp, #8]
   15f2c:	611a      	str	r2, [r3, #16]
      tries++;
   15f2e:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   15f32:	3301      	adds	r3, #1
   15f34:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    } while (tries < kBusTimeout && sd->response.data.byte[0] & 0x01);
   15f38:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   15f3c:	2bf9      	cmp	r3, #249	; 0xf9
   15f3e:	d806      	bhi.n	15f4e <Sd::Mount(SdInterface::CardInfo_t*)+0x206>
   15f40:	9b02      	ldr	r3, [sp, #8]
   15f42:	7a1b      	ldrb	r3, [r3, #8]
   15f44:	f003 0301 	and.w	r3, r3, #1
   15f48:	2b00      	cmp	r3, #0
   15f4a:	d000      	beq.n	15f4e <Sd::Mount(SdInterface::CardInfo_t*)+0x206>
    do
   15f4c:	e7dc      	b.n	15f08 <Sd::Mount(SdInterface::CardInfo_t*)+0x1c0>
    if (tries == kBusTimeout)
   15f4e:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   15f52:	2bfa      	cmp	r3, #250	; 0xfa
   15f54:	d11b      	bne.n	15f8e <Sd::Mount(SdInterface::CardInfo_t*)+0x246>
    {
      LOG_ERROR("SD Card timed out. Aborting!");
   15f56:	f240 2331 	movw	r3, #561	; 0x231
   15f5a:	4a27      	ldr	r2, [pc, #156]	; (15ff8 <Sd::Mount(SdInterface::CardInfo_t*)+0x2b0>)
   15f5c:	492d      	ldr	r1, [pc, #180]	; (16014 <Sd::Mount(SdInterface::CardInfo_t*)+0x2cc>)
   15f5e:	482e      	ldr	r0, [pc, #184]	; (16018 <Sd::Mount(SdInterface::CardInfo_t*)+0x2d0>)
   15f60:	f7fe fb48 	bl	145f4 <printf>
      sd->response.length = SendCmd(Command::kGarbage, 0xFFFFFFFF,
                                    sd->response.data.byte, 0, KeepAlive::kNo);
   15f64:	9b03      	ldr	r3, [sp, #12]
   15f66:	681b      	ldr	r3, [r3, #0]
   15f68:	681c      	ldr	r4, [r3, #0]
      sd->response.length = SendCmd(Command::kGarbage, 0xFFFFFFFF,
   15f6a:	9b02      	ldr	r3, [sp, #8]
   15f6c:	f103 0208 	add.w	r2, r3, #8
   15f70:	2300      	movs	r3, #0
   15f72:	9301      	str	r3, [sp, #4]
   15f74:	2300      	movs	r3, #0
   15f76:	9300      	str	r3, [sp, #0]
   15f78:	4613      	mov	r3, r2
   15f7a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   15f7e:	21ff      	movs	r1, #255	; 0xff
   15f80:	9803      	ldr	r0, [sp, #12]
   15f82:	47a0      	blx	r4
   15f84:	4602      	mov	r2, r0
   15f86:	9b02      	ldr	r3, [sp, #8]
   15f88:	611a      	str	r2, [r3, #16]
      return false;
   15f8a:	2400      	movs	r4, #0
   15f8c:	e05e      	b.n	1604c <Sd::Mount(SdInterface::CardInfo_t*)+0x304>
    // After card is ready, acquire card capacity info using kGetOcr a
    // second time
    LOG_DEBUG("Reading Card Capacity Information...");
    // Read CCS
    sd->response.length = SendCmd(Command::kGetOcr, 0x00,
                                  sd->response.data.byte, 100, KeepAlive::kYes);
   15f8e:	9b03      	ldr	r3, [sp, #12]
   15f90:	681b      	ldr	r3, [r3, #0]
   15f92:	681c      	ldr	r4, [r3, #0]
    sd->response.length = SendCmd(Command::kGetOcr, 0x00,
   15f94:	9b02      	ldr	r3, [sp, #8]
   15f96:	f103 0208 	add.w	r2, r3, #8
   15f9a:	2301      	movs	r3, #1
   15f9c:	9301      	str	r3, [sp, #4]
   15f9e:	2364      	movs	r3, #100	; 0x64
   15fa0:	9300      	str	r3, [sp, #0]
   15fa2:	4613      	mov	r3, r2
   15fa4:	2200      	movs	r2, #0
   15fa6:	217a      	movs	r1, #122	; 0x7a
   15fa8:	9803      	ldr	r0, [sp, #12]
   15faa:	47a0      	blx	r4
   15fac:	4602      	mov	r2, r0
   15fae:	9b02      	ldr	r3, [sp, #8]
   15fb0:	611a      	str	r2, [r3, #16]
    if (sd->response.data.byte[1] & 0x40)
   15fb2:	9b02      	ldr	r3, [sp, #8]
   15fb4:	7a5b      	ldrb	r3, [r3, #9]
   15fb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
   15fba:	2b00      	cmp	r3, #0
   15fbc:	d003      	beq.n	15fc6 <Sd::Mount(SdInterface::CardInfo_t*)+0x27e>
    {
      // The card is either high or extended capacity
      LOG_DEBUG("SD Card is HC/XC");
      sd->type = Type::kSDHC;
   15fbe:	9b02      	ldr	r3, [sp, #8]
   15fc0:	2201      	movs	r2, #1
   15fc2:	605a      	str	r2, [r3, #4]
   15fc4:	e002      	b.n	15fcc <Sd::Mount(SdInterface::CardInfo_t*)+0x284>
    }
    else
    {
      // The card is standard capacity
      LOG_DEBUG("SD Card is SC");
      sd->type = Type::kSDSC;
   15fc6:	9b02      	ldr	r3, [sp, #8]
   15fc8:	2200      	movs	r2, #0
   15fca:	605a      	str	r2, [r3, #4]
    }

    // Store OCR information
    for (int i = 0; i < 4; i++)
   15fcc:	2300      	movs	r3, #0
   15fce:	9308      	str	r3, [sp, #32]
   15fd0:	9b08      	ldr	r3, [sp, #32]
   15fd2:	2b03      	cmp	r3, #3
   15fd4:	dc22      	bgt.n	1601c <Sd::Mount(SdInterface::CardInfo_t*)+0x2d4>
    {
      // ensure OCR doesn't capture the R1 section of the response
      sd->ocr.byte[i] = sd->response.data.byte[i + 1];
   15fd6:	9b08      	ldr	r3, [sp, #32]
   15fd8:	3301      	adds	r3, #1
   15fda:	9a02      	ldr	r2, [sp, #8]
   15fdc:	4413      	add	r3, r2
   15fde:	7a19      	ldrb	r1, [r3, #8]
   15fe0:	9a02      	ldr	r2, [sp, #8]
   15fe2:	9b08      	ldr	r3, [sp, #32]
   15fe4:	4413      	add	r3, r2
   15fe6:	460a      	mov	r2, r1
   15fe8:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < 4; i++)
   15fea:	9b08      	ldr	r3, [sp, #32]
   15fec:	3301      	adds	r3, #1
   15fee:	9308      	str	r3, [sp, #32]
   15ff0:	e7ee      	b.n	15fd0 <Sd::Mount(SdInterface::CardInfo_t*)+0x288>
   15ff2:	bf00      	nop
   15ff4:	00015d49 	.word	0x00015d49
   15ff8:	00019638 	.word	0x00019638
   15ffc:	00019350 	.word	0x00019350
   16000:	00018968 	.word	0x00018968
   16004:	00019358 	.word	0x00019358
   16008:	000189d8 	.word	0x000189d8
   1600c:	00019360 	.word	0x00019360
   16010:	00018a3c 	.word	0x00018a3c
   16014:	00019368 	.word	0x00019368
   16018:	00018a9c 	.word	0x00018a9c
    }

    // If card is SDSC, manually set its block size
    if (sd->type == Type::kSDSC)
   1601c:	9b02      	ldr	r3, [sp, #8]
   1601e:	685b      	ldr	r3, [r3, #4]
   16020:	2b00      	cmp	r3, #0
   16022:	d112      	bne.n	1604a <Sd::Mount(SdInterface::CardInfo_t*)+0x302>
    {
      // Send requested byte size
      sd->response.length =
          SendCmd(Command::kChgBlkLen, static_cast<uint32_t>(kBlockSize),
                  sd->response.data.byte, 0, KeepAlive::kYes);
   16024:	9b03      	ldr	r3, [sp, #12]
   16026:	681b      	ldr	r3, [r3, #0]
   16028:	681c      	ldr	r4, [r3, #0]
          SendCmd(Command::kChgBlkLen, static_cast<uint32_t>(kBlockSize),
   1602a:	9b02      	ldr	r3, [sp, #8]
   1602c:	f103 0208 	add.w	r2, r3, #8
   16030:	2301      	movs	r3, #1
   16032:	9301      	str	r3, [sp, #4]
   16034:	2300      	movs	r3, #0
   16036:	9300      	str	r3, [sp, #0]
   16038:	4613      	mov	r3, r2
   1603a:	f44f 7200 	mov.w	r2, #512	; 0x200
   1603e:	2150      	movs	r1, #80	; 0x50
   16040:	9803      	ldr	r0, [sp, #12]
   16042:	47a0      	blx	r4
   16044:	4602      	mov	r2, r0
      sd->response.length =
   16046:	9b02      	ldr	r3, [sp, #8]
   16048:	611a      	str	r2, [r3, #16]
    }

    return true;
   1604a:	2401      	movs	r4, #1
   1604c:	462b      	mov	r3, r5
   1604e:	4619      	mov	r1, r3
   16050:	4803      	ldr	r0, [pc, #12]	; (16060 <Sd::Mount(SdInterface::CardInfo_t*)+0x318>)
   16052:	f7fd f883 	bl	1315c <__cyg_profile_func_exit>
   16056:	4623      	mov	r3, r4
  }
   16058:	4618      	mov	r0, r3
   1605a:	b00b      	add	sp, #44	; 0x2c
   1605c:	bd30      	pop	{r4, r5, pc}
   1605e:	bf00      	nop
   16060:	00015d49 	.word	0x00015d49

00016064 <Sd::ToBool(bool)>:

  // Returns string to represent a boolean value
  const char * ToBool(bool condition)
   16064:	b530      	push	{r4, r5, lr}
   16066:	b083      	sub	sp, #12
   16068:	4675      	mov	r5, lr
   1606a:	9001      	str	r0, [sp, #4]
   1606c:	460b      	mov	r3, r1
   1606e:	f88d 3003 	strb.w	r3, [sp, #3]
   16072:	462b      	mov	r3, r5
   16074:	4619      	mov	r1, r3
   16076:	4809      	ldr	r0, [pc, #36]	; (1609c <Sd::ToBool(bool)+0x38>)
   16078:	f7fd f85c 	bl	13134 <__cyg_profile_func_enter>
  {
    return (condition) ? "true" : "false";
   1607c:	f89d 3003 	ldrb.w	r3, [sp, #3]
   16080:	2b00      	cmp	r3, #0
   16082:	d001      	beq.n	16088 <Sd::ToBool(bool)+0x24>
   16084:	4c06      	ldr	r4, [pc, #24]	; (160a0 <Sd::ToBool(bool)+0x3c>)
   16086:	e000      	b.n	1608a <Sd::ToBool(bool)+0x26>
   16088:	4c06      	ldr	r4, [pc, #24]	; (160a4 <Sd::ToBool(bool)+0x40>)
   1608a:	462b      	mov	r3, r5
   1608c:	4619      	mov	r1, r3
   1608e:	4803      	ldr	r0, [pc, #12]	; (1609c <Sd::ToBool(bool)+0x38>)
   16090:	f7fd f864 	bl	1315c <__cyg_profile_func_exit>
   16094:	4623      	mov	r3, r4
  }
   16096:	4618      	mov	r0, r3
   16098:	b003      	add	sp, #12
   1609a:	bd30      	pop	{r4, r5, pc}
   1609c:	00016065 	.word	0x00016065
   160a0:	00018af4 	.word	0x00018af4
   160a4:	00018afc 	.word	0x00018afc

000160a8 <Sd::WaitToReadBlock()>:

  // Waits for the card to respond after a single or multi block read cmd is
  // sent.
  void WaitToReadBlock()
   160a8:	b510      	push	{r4, lr}
   160aa:	b084      	sub	sp, #16
   160ac:	4674      	mov	r4, lr
   160ae:	9001      	str	r0, [sp, #4]
   160b0:	4623      	mov	r3, r4
   160b2:	4619      	mov	r1, r3
   160b4:	4814      	ldr	r0, [pc, #80]	; (16108 <Sd::WaitToReadBlock()+0x60>)
   160b6:	f7fd f83d 	bl	13134 <__cyg_profile_func_enter>
    // Bit 4 -->  If set, card is locked
    // Bit 3 -->  If set, address is out or range
    // Bit 2 -->  If set, card ECC failed
    // Bit 1 -->  If set, CC error occurred
    // Bit 0 -->  If set, a generic error occurred
    uint8_t wait_byte = 0x00;
   160ba:	2300      	movs	r3, #0
   160bc:	f88d 300f 	strb.w	r3, [sp, #15]
    do
    {
      wait_byte = static_cast<uint8_t>(ssp_interface_->Transfer(0xFF));
   160c0:	9b01      	ldr	r3, [sp, #4]
   160c2:	685a      	ldr	r2, [r3, #4]
   160c4:	9b01      	ldr	r3, [sp, #4]
   160c6:	685b      	ldr	r3, [r3, #4]
   160c8:	681b      	ldr	r3, [r3, #0]
   160ca:	3308      	adds	r3, #8
   160cc:	681b      	ldr	r3, [r3, #0]
   160ce:	21ff      	movs	r1, #255	; 0xff
   160d0:	4610      	mov	r0, r2
   160d2:	4798      	blx	r3
   160d4:	4603      	mov	r3, r0
   160d6:	f88d 300f 	strb.w	r3, [sp, #15]
    } while (wait_byte != 0xFE && (wait_byte & 0xE0) != 0x00);
   160da:	f89d 300f 	ldrb.w	r3, [sp, #15]
   160de:	2bfe      	cmp	r3, #254	; 0xfe
   160e0:	d006      	beq.n	160f0 <Sd::WaitToReadBlock()+0x48>
   160e2:	f89d 300f 	ldrb.w	r3, [sp, #15]
   160e6:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
   160ea:	2b00      	cmp	r3, #0
   160ec:	d000      	beq.n	160f0 <Sd::WaitToReadBlock()+0x48>
    do
   160ee:	e7e7      	b.n	160c0 <Sd::WaitToReadBlock()+0x18>

    // DEBUG: Check the value of the wait byte
    if (wait_byte == 0xFE)
   160f0:	f89d 300f 	ldrb.w	r3, [sp, #15]
   160f4:	2bfe      	cmp	r3, #254	; 0xfe
   160f6:	4623      	mov	r3, r4
   160f8:	4619      	mov	r1, r3
   160fa:	4803      	ldr	r0, [pc, #12]	; (16108 <Sd::WaitToReadBlock()+0x60>)
   160fc:	f7fd f82e 	bl	1315c <__cyg_profile_func_exit>
      LOG_DEBUG("Addr Out of Range?: %s", ToBool(wait_byte & 0x08));
      LOG_DEBUG("Card ECC Failed?: %s", ToBool(wait_byte & 0x04));
      LOG_DEBUG("CC Error?: %s", ToBool(wait_byte & 0x02));
      LOG_DEBUG("Error?: %s", ToBool(wait_byte & 0x01));
    }
  }
   16100:	bf00      	nop
   16102:	b004      	add	sp, #16
   16104:	bd10      	pop	{r4, pc}
   16106:	bf00      	nop
   16108:	000160a9 	.word	0x000160a9

0001610c <Sd::WaitWhileBusy()>:

  // Waits for the card to be ready to receive a new block after one has
  // been written or erased
  void WaitWhileBusy()
   1610c:	b510      	push	{r4, lr}
   1610e:	b084      	sub	sp, #16
   16110:	4674      	mov	r4, lr
   16112:	9001      	str	r0, [sp, #4]
   16114:	4623      	mov	r3, r4
   16116:	4619      	mov	r1, r3
   16118:	480f      	ldr	r0, [pc, #60]	; (16158 <Sd::WaitWhileBusy()+0x4c>)
   1611a:	f7fd f80b 	bl	13134 <__cyg_profile_func_enter>
  {
    // Wait for the card to finish programming (i.e. when the
    // bytes return to 0xFF)
    uint8_t busy_byte = 0x00;
   1611e:	2300      	movs	r3, #0
   16120:	f88d 300f 	strb.w	r3, [sp, #15]
    LOG_DEBUG("Card is busy. Waiting for it to finish...");
    do
    {
      busy_byte = static_cast<uint8_t>(ssp_interface_->Transfer(0xFF));
   16124:	9b01      	ldr	r3, [sp, #4]
   16126:	685a      	ldr	r2, [r3, #4]
   16128:	9b01      	ldr	r3, [sp, #4]
   1612a:	685b      	ldr	r3, [r3, #4]
   1612c:	681b      	ldr	r3, [r3, #0]
   1612e:	3308      	adds	r3, #8
   16130:	681b      	ldr	r3, [r3, #0]
   16132:	21ff      	movs	r1, #255	; 0xff
   16134:	4610      	mov	r0, r2
   16136:	4798      	blx	r3
   16138:	4603      	mov	r3, r0
   1613a:	f88d 300f 	strb.w	r3, [sp, #15]
    } while (busy_byte != 0xFF);
   1613e:	f89d 300f 	ldrb.w	r3, [sp, #15]
   16142:	2bff      	cmp	r3, #255	; 0xff
   16144:	d000      	beq.n	16148 <Sd::WaitWhileBusy()+0x3c>
    do
   16146:	e7ed      	b.n	16124 <Sd::WaitWhileBusy()+0x18>
   16148:	4623      	mov	r3, r4
   1614a:	4619      	mov	r1, r3
   1614c:	4802      	ldr	r0, [pc, #8]	; (16158 <Sd::WaitWhileBusy()+0x4c>)
   1614e:	f7fd f805 	bl	1315c <__cyg_profile_func_exit>
    LOG_DEBUG("Card finished!");
  }
   16152:	bf00      	nop
   16154:	b004      	add	sp, #16
   16156:	bd10      	pop	{r4, pc}
   16158:	0001610d 	.word	0x0001610d

0001615c <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)>:

  // Read any number of blocks from the SD card
  uint8_t ReadBlock(uint32_t address, uint8_t * array,
   1615c:	b530      	push	{r4, r5, lr}
   1615e:	f5ad 7d13 	sub.w	sp, sp, #588	; 0x24c
   16162:	4675      	mov	r5, lr
   16164:	ac05      	add	r4, sp, #20
   16166:	6020      	str	r0, [r4, #0]
   16168:	a804      	add	r0, sp, #16
   1616a:	6001      	str	r1, [r0, #0]
   1616c:	a903      	add	r1, sp, #12
   1616e:	600a      	str	r2, [r1, #0]
   16170:	aa02      	add	r2, sp, #8
   16172:	6013      	str	r3, [r2, #0]
   16174:	462b      	mov	r3, r5
   16176:	4619      	mov	r1, r3
   16178:	487d      	ldr	r0, [pc, #500]	; (16370 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x214>)
   1617a:	f7fc ffdb 	bl	13134 <__cyg_profile_func_enter>
                    uint32_t blocks = 1) override
  {
    LOG_DEBUG("Block %" PRId32 " :: 0x%" PRIX32 " for %" PRId32 " blocks",
              address, address, blocks);
    // Wait for a previous command to finish
    WaitWhileBusy();
   1617e:	ab05      	add	r3, sp, #20
   16180:	6818      	ldr	r0, [r3, #0]
   16182:	f7ff ffc3 	bl	1610c <Sd::WaitWhileBusy()>

    // Create a temporary storage location to store sd command responses
    Sd::CardInfo_t sd;
    bool payload_had_bad_crc = false;
   16186:	2300      	movs	r3, #0
   16188:	f88d 3247 	strb.w	r3, [sp, #583]	; 0x247

    // Create a temporary place to store blocks of 512 bytes (this is now
    // possible because the constructor enforces block size cross-
    // compatibility)
    uint8_t block_store[512] = { 0 };
   1618c:	ab06      	add	r3, sp, #24
   1618e:	4618      	mov	r0, r3
   16190:	f44f 7300 	mov.w	r3, #512	; 0x200
   16194:	461a      	mov	r2, r3
   16196:	2100      	movs	r1, #0
   16198:	f001 f9d8 	bl	1754c <memset>

    // Determine appropriate command to send
    Command read_cmd;
    if (blocks > 1)
   1619c:	ab02      	add	r3, sp, #8
   1619e:	681b      	ldr	r3, [r3, #0]
   161a0:	2b01      	cmp	r3, #1
   161a2:	d902      	bls.n	161aa <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x4e>
    {
      read_cmd = Command::kReadMulti;
   161a4:	2352      	movs	r3, #82	; 0x52
   161a6:	9390      	str	r3, [sp, #576]	; 0x240
   161a8:	e001      	b.n	161ae <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x52>
    }
    else
    {
      read_cmd = Command::kReadSingle;
   161aa:	2351      	movs	r3, #81	; 0x51
   161ac:	9390      	str	r3, [sp, #576]	; 0x240
    }

    // Send initial read command
    sd.response.length =
        SendCmd(read_cmd, address, sd.response.data.byte, 100, KeepAlive::kYes);
   161ae:	ab05      	add	r3, sp, #20
   161b0:	681b      	ldr	r3, [r3, #0]
   161b2:	681b      	ldr	r3, [r3, #0]
   161b4:	681c      	ldr	r4, [r3, #0]
   161b6:	ab86      	add	r3, sp, #536	; 0x218
   161b8:	f103 0108 	add.w	r1, r3, #8
   161bc:	aa04      	add	r2, sp, #16
   161be:	a805      	add	r0, sp, #20
   161c0:	2301      	movs	r3, #1
   161c2:	9301      	str	r3, [sp, #4]
   161c4:	2364      	movs	r3, #100	; 0x64
   161c6:	9300      	str	r3, [sp, #0]
   161c8:	460b      	mov	r3, r1
   161ca:	6812      	ldr	r2, [r2, #0]
   161cc:	9990      	ldr	r1, [sp, #576]	; 0x240
   161ce:	6800      	ldr	r0, [r0, #0]
   161d0:	47a0      	blx	r4
   161d2:	4603      	mov	r3, r0
    sd.response.length =
   161d4:	938a      	str	r3, [sp, #552]	; 0x228
    LOG_DEBUG("Sent Read Cmd");
    LOG_DEBUG("[R1 Response:0x%02X]", sd.response.data.byte[0]);

    // Check if the command was acknowledged properly
    if (sd.response.data.byte[0] == 0x00)
   161d6:	f89d 3220 	ldrb.w	r3, [sp, #544]	; 0x220
   161da:	2b00      	cmp	r3, #0
   161dc:	f040 80d8 	bne.w	16390 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x234>
    {
      // For every block requested
      uint16_t block_count;
      for (block_count = 0; block_count < blocks; block_count++)
   161e0:	2300      	movs	r3, #0
   161e2:	f8ad 323e 	strh.w	r3, [sp, #574]	; 0x23e
   161e6:	f8bd 323e 	ldrh.w	r3, [sp, #574]	; 0x23e
   161ea:	aa02      	add	r2, sp, #8
   161ec:	6812      	ldr	r2, [r2, #0]
   161ee:	429a      	cmp	r2, r3
   161f0:	f240 8099 	bls.w	16326 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x1ca>
      {
        // Wait for the card to respond with a ready signal
        WaitToReadBlock();
   161f4:	ab05      	add	r3, sp, #20
   161f6:	6818      	ldr	r0, [r3, #0]
   161f8:	f7ff ff56 	bl	160a8 <Sd::WaitToReadBlock()>

        // Calculate the block address offset
        uint16_t block_addr_offset =
   161fc:	f8bd 323e 	ldrh.w	r3, [sp, #574]	; 0x23e
   16200:	025b      	lsls	r3, r3, #9
   16202:	f8ad 323a 	strh.w	r3, [sp, #570]	; 0x23a
            static_cast<uint16_t>(block_count * kBlockSize);

        // Read all the bytes of a single block
        for (uint16_t byte_count = 0; byte_count < kBlockSize; byte_count++)
   16206:	2300      	movs	r3, #0
   16208:	f8ad 323c 	strh.w	r3, [sp, #572]	; 0x23c
   1620c:	f8bd 323c 	ldrh.w	r3, [sp, #572]	; 0x23c
   16210:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   16214:	d22b      	bcs.n	1626e <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x112>
        {
          // Calculate the current storage index
          uint16_t storage_index =
   16216:	f8bd 223a 	ldrh.w	r2, [sp, #570]	; 0x23a
   1621a:	f8bd 323c 	ldrh.w	r3, [sp, #572]	; 0x23c
   1621e:	4413      	add	r3, r2
   16220:	f8ad 3238 	strh.w	r3, [sp, #568]	; 0x238
              static_cast<uint16_t>(block_addr_offset + byte_count);

          // Transfer a byte to read a block from the SD card
          array[storage_index] =
              static_cast<uint8_t>(ssp_interface_->Transfer(0xFF));
   16224:	ab05      	add	r3, sp, #20
   16226:	681b      	ldr	r3, [r3, #0]
   16228:	685a      	ldr	r2, [r3, #4]
   1622a:	ab05      	add	r3, sp, #20
   1622c:	681b      	ldr	r3, [r3, #0]
   1622e:	685b      	ldr	r3, [r3, #4]
   16230:	681b      	ldr	r3, [r3, #0]
   16232:	3308      	adds	r3, #8
   16234:	681b      	ldr	r3, [r3, #0]
   16236:	21ff      	movs	r1, #255	; 0xff
   16238:	4610      	mov	r0, r2
   1623a:	4798      	blx	r3
   1623c:	4603      	mov	r3, r0
   1623e:	4619      	mov	r1, r3
          array[storage_index] =
   16240:	f8bd 3238 	ldrh.w	r3, [sp, #568]	; 0x238
   16244:	aa03      	add	r2, sp, #12
   16246:	6812      	ldr	r2, [r2, #0]
   16248:	4413      	add	r3, r2
   1624a:	b2ca      	uxtb	r2, r1
   1624c:	701a      	strb	r2, [r3, #0]

          // Copy that byte into our temporary block store
          block_store[byte_count] = array[storage_index];
   1624e:	f8bd 3238 	ldrh.w	r3, [sp, #568]	; 0x238
   16252:	aa03      	add	r2, sp, #12
   16254:	6812      	ldr	r2, [r2, #0]
   16256:	441a      	add	r2, r3
   16258:	f8bd 323c 	ldrh.w	r3, [sp, #572]	; 0x23c
   1625c:	7811      	ldrb	r1, [r2, #0]
   1625e:	aa06      	add	r2, sp, #24
   16260:	54d1      	strb	r1, [r2, r3]
        for (uint16_t byte_count = 0; byte_count < kBlockSize; byte_count++)
   16262:	f8bd 323c 	ldrh.w	r3, [sp, #572]	; 0x23c
   16266:	3301      	adds	r3, #1
   16268:	f8ad 323c 	strh.w	r3, [sp, #572]	; 0x23c
   1626c:	e7ce      	b.n	1620c <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0xb0>
        }

        // Then read the block's 16-bit CRC (i.e. read two bytes)
        uint16_t block_crc =
            static_cast<uint16_t>((ssp_interface_->Transfer(0xFF) << 8) |
   1626e:	ab05      	add	r3, sp, #20
   16270:	681b      	ldr	r3, [r3, #0]
   16272:	685a      	ldr	r2, [r3, #4]
   16274:	ab05      	add	r3, sp, #20
   16276:	681b      	ldr	r3, [r3, #0]
   16278:	685b      	ldr	r3, [r3, #4]
   1627a:	681b      	ldr	r3, [r3, #0]
   1627c:	3308      	adds	r3, #8
   1627e:	681b      	ldr	r3, [r3, #0]
   16280:	21ff      	movs	r1, #255	; 0xff
   16282:	4610      	mov	r0, r2
   16284:	4798      	blx	r3
   16286:	4603      	mov	r3, r0
   16288:	021b      	lsls	r3, r3, #8
   1628a:	b21c      	sxth	r4, r3
                                  ssp_interface_->Transfer(0xFF));
   1628c:	ab05      	add	r3, sp, #20
   1628e:	681b      	ldr	r3, [r3, #0]
   16290:	685a      	ldr	r2, [r3, #4]
   16292:	ab05      	add	r3, sp, #20
   16294:	681b      	ldr	r3, [r3, #0]
   16296:	685b      	ldr	r3, [r3, #4]
   16298:	681b      	ldr	r3, [r3, #0]
   1629a:	3308      	adds	r3, #8
   1629c:	681b      	ldr	r3, [r3, #0]
   1629e:	21ff      	movs	r1, #255	; 0xff
   162a0:	4610      	mov	r0, r2
   162a2:	4798      	blx	r3
   162a4:	4603      	mov	r3, r0
   162a6:	b21b      	sxth	r3, r3
            static_cast<uint16_t>((ssp_interface_->Transfer(0xFF) << 8) |
   162a8:	4323      	orrs	r3, r4
   162aa:	b21b      	sxth	r3, r3
                                  ssp_interface_->Transfer(0xFF));
   162ac:	f8ad 3236 	strh.w	r3, [sp, #566]	; 0x236

        // Run a CRC-16 calculation on the message to determine if the
        // received CRCs match (i.e. checks if the block data is
        // valid).
        uint16_t expected_block_crc = GetCrc16(block_store, 512);
   162b0:	ab05      	add	r3, sp, #20
   162b2:	681b      	ldr	r3, [r3, #0]
   162b4:	681b      	ldr	r3, [r3, #0]
   162b6:	3320      	adds	r3, #32
   162b8:	681b      	ldr	r3, [r3, #0]
   162ba:	a906      	add	r1, sp, #24
   162bc:	a805      	add	r0, sp, #20
   162be:	f44f 7200 	mov.w	r2, #512	; 0x200
   162c2:	6800      	ldr	r0, [r0, #0]
   162c4:	4798      	blx	r3
   162c6:	4603      	mov	r3, r0
   162c8:	f8ad 3234 	strh.w	r3, [sp, #564]	; 0x234

        LOG_DEBUG("Block #%d @ 0x%" PRIX32 " acquired", block_count, address);
        LOG_DEBUG("Expecting block crc16 '0x%04X'", expected_block_crc);
        LOG_DEBUG("Got '0x%04X'", block_crc);
        if (expected_block_crc != block_crc)
   162cc:	f8bd 2234 	ldrh.w	r2, [sp, #564]	; 0x234
   162d0:	f8bd 3236 	ldrh.w	r3, [sp, #566]	; 0x236
   162d4:	429a      	cmp	r2, r3
   162d6:	d020      	beq.n	1631a <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x1be>
        {
          // If they do not match, set the bad crc status
          payload_had_bad_crc = true;
   162d8:	2301      	movs	r3, #1
   162da:	f88d 3247 	strb.w	r3, [sp, #583]	; 0x247
          LOG_ERROR("While Reading Block #%d CRC16:", block_count);
   162de:	f8bd 323e 	ldrh.w	r3, [sp, #574]	; 0x23e
   162e2:	9300      	str	r3, [sp, #0]
   162e4:	f240 23ed 	movw	r3, #749	; 0x2ed
   162e8:	4a22      	ldr	r2, [pc, #136]	; (16374 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x218>)
   162ea:	4923      	ldr	r1, [pc, #140]	; (16378 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x21c>)
   162ec:	4823      	ldr	r0, [pc, #140]	; (1637c <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x220>)
   162ee:	f7fe f981 	bl	145f4 <printf>
          LOG_ERROR("Expected '0x%04X'", expected_block_crc);
   162f2:	f8bd 3234 	ldrh.w	r3, [sp, #564]	; 0x234
   162f6:	9300      	str	r3, [sp, #0]
   162f8:	f240 23ee 	movw	r3, #750	; 0x2ee
   162fc:	4a1d      	ldr	r2, [pc, #116]	; (16374 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x218>)
   162fe:	4920      	ldr	r1, [pc, #128]	; (16380 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x224>)
   16300:	4820      	ldr	r0, [pc, #128]	; (16384 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x228>)
   16302:	f7fe f977 	bl	145f4 <printf>
          LOG_ERROR("Got '0x%04X'", block_crc);
   16306:	f8bd 3236 	ldrh.w	r3, [sp, #566]	; 0x236
   1630a:	9300      	str	r3, [sp, #0]
   1630c:	f240 23ef 	movw	r3, #751	; 0x2ef
   16310:	4a18      	ldr	r2, [pc, #96]	; (16374 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x218>)
   16312:	491d      	ldr	r1, [pc, #116]	; (16388 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x22c>)
   16314:	481d      	ldr	r0, [pc, #116]	; (1638c <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x230>)
   16316:	f7fe f96d 	bl	145f4 <printf>
      for (block_count = 0; block_count < blocks; block_count++)
   1631a:	f8bd 323e 	ldrh.w	r3, [sp, #574]	; 0x23e
   1631e:	3301      	adds	r3, #1
   16320:	f8ad 323e 	strh.w	r3, [sp, #574]	; 0x23e
   16324:	e75f      	b.n	161e6 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x8a>
        }
      }

      // After reading multiple blocks, send the stop command to terminate the
      // transaction (i.e. no keep-alive)
      if (blocks > 1)
   16326:	ab02      	add	r3, sp, #8
   16328:	681b      	ldr	r3, [r3, #0]
   1632a:	2b01      	cmp	r3, #1
   1632c:	d913      	bls.n	16356 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x1fa>
      {
        sd.response.length =
            SendCmd(Command::kStopTrans, 0xFFFFFFFF, sd.response.data.byte, 100,
                    KeepAlive::kNo);
   1632e:	ab05      	add	r3, sp, #20
   16330:	681b      	ldr	r3, [r3, #0]
   16332:	681b      	ldr	r3, [r3, #0]
   16334:	681c      	ldr	r4, [r3, #0]
            SendCmd(Command::kStopTrans, 0xFFFFFFFF, sd.response.data.byte, 100,
   16336:	ab86      	add	r3, sp, #536	; 0x218
   16338:	f103 0208 	add.w	r2, r3, #8
   1633c:	a805      	add	r0, sp, #20
   1633e:	2300      	movs	r3, #0
   16340:	9301      	str	r3, [sp, #4]
   16342:	2364      	movs	r3, #100	; 0x64
   16344:	9300      	str	r3, [sp, #0]
   16346:	4613      	mov	r3, r2
   16348:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1634c:	214c      	movs	r1, #76	; 0x4c
   1634e:	6800      	ldr	r0, [r0, #0]
   16350:	47a0      	blx	r4
   16352:	4603      	mov	r3, r0
        sd.response.length =
   16354:	938a      	str	r3, [sp, #552]	; 0x228
      LOG_DEBUG("Response Byte");
      LOG_DEBUG("0x%02X", sd.response.data.byte[0]);

      // If there was a bad crc from the payload, manually set the
      // CRC error flag in the command response byte
      if (payload_had_bad_crc)
   16356:	f89d 3247 	ldrb.w	r3, [sp, #583]	; 0x247
   1635a:	2b00      	cmp	r3, #0
   1635c:	f000 80c0 	beq.w	164e0 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x384>
      {
        sd.response.data.byte[0] |= 0x08;
   16360:	f89d 3220 	ldrb.w	r3, [sp, #544]	; 0x220
   16364:	f043 0308 	orr.w	r3, r3, #8
   16368:	b2db      	uxtb	r3, r3
   1636a:	f88d 3220 	strb.w	r3, [sp, #544]	; 0x220
   1636e:	e0b7      	b.n	164e0 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x384>
   16370:	0001615d 	.word	0x0001615d
   16374:	0001966c 	.word	0x0001966c
   16378:	00019370 	.word	0x00019370
   1637c:	00018b04 	.word	0x00018b04
   16380:	00019378 	.word	0x00019378
   16384:	00018b5c 	.word	0x00018b5c
   16388:	00019380 	.word	0x00019380
   1638c:	00018ba8 	.word	0x00018ba8
      }
    }
    else
    {
      LOG_ERROR("Read Cmd was not acknowledged properly!");
   16390:	f240 3309 	movw	r3, #777	; 0x309
   16394:	4a65      	ldr	r2, [pc, #404]	; (1652c <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x3d0>)
   16396:	4966      	ldr	r1, [pc, #408]	; (16530 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x3d4>)
   16398:	4866      	ldr	r0, [pc, #408]	; (16534 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x3d8>)
   1639a:	f7fe f92b 	bl	145f4 <printf>
      LOG_ERROR("Parameter Err: %s", ToBool(sd.response.data.byte[0] & 0x40));
   1639e:	f89d 3220 	ldrb.w	r3, [sp, #544]	; 0x220
   163a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
   163a6:	2b00      	cmp	r3, #0
   163a8:	bf14      	ite	ne
   163aa:	2301      	movne	r3, #1
   163ac:	2300      	moveq	r3, #0
   163ae:	b2da      	uxtb	r2, r3
   163b0:	ab05      	add	r3, sp, #20
   163b2:	4611      	mov	r1, r2
   163b4:	6818      	ldr	r0, [r3, #0]
   163b6:	f7ff fe55 	bl	16064 <Sd::ToBool(bool)>
   163ba:	4603      	mov	r3, r0
   163bc:	9300      	str	r3, [sp, #0]
   163be:	f240 330a 	movw	r3, #778	; 0x30a
   163c2:	4a5a      	ldr	r2, [pc, #360]	; (1652c <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x3d0>)
   163c4:	495c      	ldr	r1, [pc, #368]	; (16538 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x3dc>)
   163c6:	485d      	ldr	r0, [pc, #372]	; (1653c <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x3e0>)
   163c8:	f7fe f914 	bl	145f4 <printf>
      LOG_ERROR("Addr Err: %s", ToBool(sd.response.data.byte[0] & 0x20));
   163cc:	f89d 3220 	ldrb.w	r3, [sp, #544]	; 0x220
   163d0:	f003 0320 	and.w	r3, r3, #32
   163d4:	2b00      	cmp	r3, #0
   163d6:	bf14      	ite	ne
   163d8:	2301      	movne	r3, #1
   163da:	2300      	moveq	r3, #0
   163dc:	b2da      	uxtb	r2, r3
   163de:	ab05      	add	r3, sp, #20
   163e0:	4611      	mov	r1, r2
   163e2:	6818      	ldr	r0, [r3, #0]
   163e4:	f7ff fe3e 	bl	16064 <Sd::ToBool(bool)>
   163e8:	4603      	mov	r3, r0
   163ea:	9300      	str	r3, [sp, #0]
   163ec:	f240 330b 	movw	r3, #779	; 0x30b
   163f0:	4a4e      	ldr	r2, [pc, #312]	; (1652c <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x3d0>)
   163f2:	4953      	ldr	r1, [pc, #332]	; (16540 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x3e4>)
   163f4:	4853      	ldr	r0, [pc, #332]	; (16544 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x3e8>)
   163f6:	f7fe f8fd 	bl	145f4 <printf>
      LOG_ERROR("Erase Seq Err: %s", ToBool(sd.response.data.byte[0] & 0x10));
   163fa:	f89d 3220 	ldrb.w	r3, [sp, #544]	; 0x220
   163fe:	f003 0310 	and.w	r3, r3, #16
   16402:	2b00      	cmp	r3, #0
   16404:	bf14      	ite	ne
   16406:	2301      	movne	r3, #1
   16408:	2300      	moveq	r3, #0
   1640a:	b2da      	uxtb	r2, r3
   1640c:	ab05      	add	r3, sp, #20
   1640e:	4611      	mov	r1, r2
   16410:	6818      	ldr	r0, [r3, #0]
   16412:	f7ff fe27 	bl	16064 <Sd::ToBool(bool)>
   16416:	4603      	mov	r3, r0
   16418:	9300      	str	r3, [sp, #0]
   1641a:	f44f 7343 	mov.w	r3, #780	; 0x30c
   1641e:	4a43      	ldr	r2, [pc, #268]	; (1652c <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x3d0>)
   16420:	4949      	ldr	r1, [pc, #292]	; (16548 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x3ec>)
   16422:	484a      	ldr	r0, [pc, #296]	; (1654c <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x3f0>)
   16424:	f7fe f8e6 	bl	145f4 <printf>
      LOG_ERROR("Com CRC Err: %s", ToBool(sd.response.data.byte[0] & 0x08));
   16428:	f89d 3220 	ldrb.w	r3, [sp, #544]	; 0x220
   1642c:	f003 0308 	and.w	r3, r3, #8
   16430:	2b00      	cmp	r3, #0
   16432:	bf14      	ite	ne
   16434:	2301      	movne	r3, #1
   16436:	2300      	moveq	r3, #0
   16438:	b2da      	uxtb	r2, r3
   1643a:	ab05      	add	r3, sp, #20
   1643c:	4611      	mov	r1, r2
   1643e:	6818      	ldr	r0, [r3, #0]
   16440:	f7ff fe10 	bl	16064 <Sd::ToBool(bool)>
   16444:	4603      	mov	r3, r0
   16446:	9300      	str	r3, [sp, #0]
   16448:	f240 330d 	movw	r3, #781	; 0x30d
   1644c:	4a37      	ldr	r2, [pc, #220]	; (1652c <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x3d0>)
   1644e:	4940      	ldr	r1, [pc, #256]	; (16550 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x3f4>)
   16450:	4840      	ldr	r0, [pc, #256]	; (16554 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x3f8>)
   16452:	f7fe f8cf 	bl	145f4 <printf>
      LOG_ERROR("Illegal Cmd Err: %s", ToBool(sd.response.data.byte[0] & 0x04));
   16456:	f89d 3220 	ldrb.w	r3, [sp, #544]	; 0x220
   1645a:	f003 0304 	and.w	r3, r3, #4
   1645e:	2b00      	cmp	r3, #0
   16460:	bf14      	ite	ne
   16462:	2301      	movne	r3, #1
   16464:	2300      	moveq	r3, #0
   16466:	b2da      	uxtb	r2, r3
   16468:	ab05      	add	r3, sp, #20
   1646a:	4611      	mov	r1, r2
   1646c:	6818      	ldr	r0, [r3, #0]
   1646e:	f7ff fdf9 	bl	16064 <Sd::ToBool(bool)>
   16472:	4603      	mov	r3, r0
   16474:	9300      	str	r3, [sp, #0]
   16476:	f240 330e 	movw	r3, #782	; 0x30e
   1647a:	4a2c      	ldr	r2, [pc, #176]	; (1652c <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x3d0>)
   1647c:	4936      	ldr	r1, [pc, #216]	; (16558 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x3fc>)
   1647e:	4837      	ldr	r0, [pc, #220]	; (1655c <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x400>)
   16480:	f7fe f8b8 	bl	145f4 <printf>
      LOG_ERROR("Erase Reset: %s", ToBool(sd.response.data.byte[0] & 0x02));
   16484:	f89d 3220 	ldrb.w	r3, [sp, #544]	; 0x220
   16488:	f003 0302 	and.w	r3, r3, #2
   1648c:	2b00      	cmp	r3, #0
   1648e:	bf14      	ite	ne
   16490:	2301      	movne	r3, #1
   16492:	2300      	moveq	r3, #0
   16494:	b2da      	uxtb	r2, r3
   16496:	ab05      	add	r3, sp, #20
   16498:	4611      	mov	r1, r2
   1649a:	6818      	ldr	r0, [r3, #0]
   1649c:	f7ff fde2 	bl	16064 <Sd::ToBool(bool)>
   164a0:	4603      	mov	r3, r0
   164a2:	9300      	str	r3, [sp, #0]
   164a4:	f240 330f 	movw	r3, #783	; 0x30f
   164a8:	4a20      	ldr	r2, [pc, #128]	; (1652c <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x3d0>)
   164aa:	492d      	ldr	r1, [pc, #180]	; (16560 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x404>)
   164ac:	482d      	ldr	r0, [pc, #180]	; (16564 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x408>)
   164ae:	f7fe f8a1 	bl	145f4 <printf>
      LOG_ERROR("In Idle: %s", ToBool(sd.response.data.byte[0] & 0x01));
   164b2:	f89d 3220 	ldrb.w	r3, [sp, #544]	; 0x220
   164b6:	f003 0301 	and.w	r3, r3, #1
   164ba:	2b00      	cmp	r3, #0
   164bc:	bf14      	ite	ne
   164be:	2301      	movne	r3, #1
   164c0:	2300      	moveq	r3, #0
   164c2:	b2da      	uxtb	r2, r3
   164c4:	ab05      	add	r3, sp, #20
   164c6:	4611      	mov	r1, r2
   164c8:	6818      	ldr	r0, [r3, #0]
   164ca:	f7ff fdcb 	bl	16064 <Sd::ToBool(bool)>
   164ce:	4603      	mov	r3, r0
   164d0:	9300      	str	r3, [sp, #0]
   164d2:	f44f 7344 	mov.w	r3, #784	; 0x310
   164d6:	4a15      	ldr	r2, [pc, #84]	; (1652c <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x3d0>)
   164d8:	4923      	ldr	r1, [pc, #140]	; (16568 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x40c>)
   164da:	4824      	ldr	r0, [pc, #144]	; (1656c <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x410>)
   164dc:	f7fe f88a 	bl	145f4 <printf>
    LOG_DEBUG("Now waiting for SD Card to exit Idle Mode...");
    do
    {
      // Query the status register
      sd.response.length = SendCmd(Command::kGetStatus, 32,
                                   sd.response.data.byte, 0, KeepAlive::kNo);
   164e0:	ab05      	add	r3, sp, #20
   164e2:	681b      	ldr	r3, [r3, #0]
   164e4:	681b      	ldr	r3, [r3, #0]
   164e6:	681c      	ldr	r4, [r3, #0]
      sd.response.length = SendCmd(Command::kGetStatus, 32,
   164e8:	ab86      	add	r3, sp, #536	; 0x218
   164ea:	f103 0208 	add.w	r2, r3, #8
   164ee:	a805      	add	r0, sp, #20
   164f0:	2300      	movs	r3, #0
   164f2:	9301      	str	r3, [sp, #4]
   164f4:	2300      	movs	r3, #0
   164f6:	9300      	str	r3, [sp, #0]
   164f8:	4613      	mov	r3, r2
   164fa:	2220      	movs	r2, #32
   164fc:	210d      	movs	r1, #13
   164fe:	6800      	ldr	r0, [r0, #0]
   16500:	47a0      	blx	r4
   16502:	4603      	mov	r3, r0
   16504:	938a      	str	r3, [sp, #552]	; 0x228
    } while (sd.response.data.byte[0] & 0x01);
   16506:	f89d 3220 	ldrb.w	r3, [sp, #544]	; 0x220
   1650a:	f003 0301 	and.w	r3, r3, #1
   1650e:	2b00      	cmp	r3, #0
   16510:	d000      	beq.n	16514 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x3b8>
    do
   16512:	e7e5      	b.n	164e0 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x384>
    LOG_DEBUG("SD Card is out of Idle Mode!");

    // Return the status
    LOG_DEBUG("Read Complete! [R1 Response: 0x%02X]", sd.response.data.byte[0]);
    return sd.response.data.byte[0];
   16514:	f89d 4220 	ldrb.w	r4, [sp, #544]	; 0x220
   16518:	462b      	mov	r3, r5
   1651a:	4619      	mov	r1, r3
   1651c:	4814      	ldr	r0, [pc, #80]	; (16570 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x414>)
   1651e:	f7fc fe1d 	bl	1315c <__cyg_profile_func_exit>
   16522:	4623      	mov	r3, r4
  }
   16524:	4618      	mov	r0, r3
   16526:	f50d 7d13 	add.w	sp, sp, #588	; 0x24c
   1652a:	bd30      	pop	{r4, r5, pc}
   1652c:	0001966c 	.word	0x0001966c
   16530:	00019388 	.word	0x00019388
   16534:	00018bf0 	.word	0x00018bf0
   16538:	00019390 	.word	0x00019390
   1653c:	00018c54 	.word	0x00018c54
   16540:	00019398 	.word	0x00019398
   16544:	00018ca0 	.word	0x00018ca0
   16548:	000193a0 	.word	0x000193a0
   1654c:	00018ce8 	.word	0x00018ce8
   16550:	000193a8 	.word	0x000193a8
   16554:	00018d34 	.word	0x00018d34
   16558:	000193b0 	.word	0x000193b0
   1655c:	00018d80 	.word	0x00018d80
   16560:	000193b8 	.word	0x000193b8
   16564:	00018dd0 	.word	0x00018dd0
   16568:	000193c0 	.word	0x000193c0
   1656c:	00018e1c 	.word	0x00018e1c
   16570:	0001615d 	.word	0x0001615d

00016574 <Sd::WriteBlock(unsigned long, unsigned char const*, unsigned long)>:

  // Writes any number of 512-byte blocks to the SD Card
  uint8_t WriteBlock(uint32_t address, const uint8_t * array,
   16574:	b530      	push	{r4, r5, lr}
   16576:	b095      	sub	sp, #84	; 0x54
   16578:	4675      	mov	r5, lr
   1657a:	9005      	str	r0, [sp, #20]
   1657c:	9104      	str	r1, [sp, #16]
   1657e:	9203      	str	r2, [sp, #12]
   16580:	9302      	str	r3, [sp, #8]
   16582:	462b      	mov	r3, r5
   16584:	4619      	mov	r1, r3
   16586:	4865      	ldr	r0, [pc, #404]	; (1671c <Sd::WriteBlock(unsigned long, unsigned char const*, unsigned long)+0x1a8>)
   16588:	f7fc fdd4 	bl	13134 <__cyg_profile_func_enter>
                     uint32_t blocks = 1) override
  {
    // Wait for a previous command to finish
    WaitWhileBusy();
   1658c:	9805      	ldr	r0, [sp, #20]
   1658e:	f7ff fdbd 	bl	1610c <Sd::WaitWhileBusy()>
    Sd::CardInfo_t sd;

    // Determine appropriate command and start token to send
    Command write_cmd;
    uint8_t write_start_tkn;
    if (blocks > 1)
   16592:	9b02      	ldr	r3, [sp, #8]
   16594:	2b01      	cmp	r3, #1
   16596:	d905      	bls.n	165a4 <Sd::WriteBlock(unsigned long, unsigned char const*, unsigned long)+0x30>
    {
      write_cmd       = Command::kWriteMulti;
   16598:	2359      	movs	r3, #89	; 0x59
   1659a:	9313      	str	r3, [sp, #76]	; 0x4c
      write_start_tkn = 0xFC;
   1659c:	23fc      	movs	r3, #252	; 0xfc
   1659e:	f88d 304b 	strb.w	r3, [sp, #75]	; 0x4b
   165a2:	e004      	b.n	165ae <Sd::WriteBlock(unsigned long, unsigned char const*, unsigned long)+0x3a>
    }
    else
    {
      write_cmd       = Command::kWriteSingle;
   165a4:	2358      	movs	r3, #88	; 0x58
   165a6:	9313      	str	r3, [sp, #76]	; 0x4c
      write_start_tkn = 0xFE;
   165a8:	23fe      	movs	r3, #254	; 0xfe
   165aa:	f88d 304b 	strb.w	r3, [sp, #75]	; 0x4b
    }

    // Send initial write command
    sd.response.length = SendCmd(write_cmd, address, sd.response.data.byte, 100,
                                 KeepAlive::kYes);
   165ae:	9b05      	ldr	r3, [sp, #20]
   165b0:	681b      	ldr	r3, [r3, #0]
   165b2:	681c      	ldr	r4, [r3, #0]
    sd.response.length = SendCmd(write_cmd, address, sd.response.data.byte, 100,
   165b4:	ab06      	add	r3, sp, #24
   165b6:	f103 0208 	add.w	r2, r3, #8
   165ba:	2301      	movs	r3, #1
   165bc:	9301      	str	r3, [sp, #4]
   165be:	2364      	movs	r3, #100	; 0x64
   165c0:	9300      	str	r3, [sp, #0]
   165c2:	4613      	mov	r3, r2
   165c4:	9a04      	ldr	r2, [sp, #16]
   165c6:	9913      	ldr	r1, [sp, #76]	; 0x4c
   165c8:	9805      	ldr	r0, [sp, #20]
   165ca:	47a0      	blx	r4
   165cc:	4603      	mov	r3, r0
   165ce:	930a      	str	r3, [sp, #40]	; 0x28
    LOG_DEBUG("Sent Write Cmd");
    LOG_DEBUG("[R1 Response:0x%02X]", sd.response.data.byte[0]);

    // Check if the response was acknowledged properly
    if (sd.response.data.byte[0] == 0x00)
   165d0:	f89d 3020 	ldrb.w	r3, [sp, #32]
   165d4:	2b00      	cmp	r3, #0
   165d6:	f040 8096 	bne.w	16706 <Sd::WriteBlock(unsigned long, unsigned char const*, unsigned long)+0x192>
    {
      // If no errors, proceed write given block(s) to SD Card
      // For each given block
      for (uint16_t current_block_num = 0; current_block_num < blocks;
   165da:	2300      	movs	r3, #0
   165dc:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
   165e0:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
   165e4:	9a02      	ldr	r2, [sp, #8]
   165e6:	429a      	cmp	r2, r3
   165e8:	d97a      	bls.n	166e0 <Sd::WriteBlock(unsigned long, unsigned char const*, unsigned long)+0x16c>
           current_block_num++)
      {
        // Calculate array offset
        uint64_t arr_offset = current_block_num * kBlockSize;
   165ea:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
   165ee:	025b      	lsls	r3, r3, #9
   165f0:	ea4f 74e3 	mov.w	r4, r3, asr #31
   165f4:	e9cd 340e 	strd	r3, r4, [sp, #56]	; 0x38

        // Send the start token for the current block
        ssp_interface_->Transfer(write_start_tkn);
   165f8:	9b05      	ldr	r3, [sp, #20]
   165fa:	685a      	ldr	r2, [r3, #4]
   165fc:	9b05      	ldr	r3, [sp, #20]
   165fe:	685b      	ldr	r3, [r3, #4]
   16600:	681b      	ldr	r3, [r3, #0]
   16602:	3308      	adds	r3, #8
   16604:	681b      	ldr	r3, [r3, #0]
   16606:	f89d 104b 	ldrb.w	r1, [sp, #75]	; 0x4b
   1660a:	b289      	uxth	r1, r1
   1660c:	4610      	mov	r0, r2
   1660e:	4798      	blx	r3

        // Write all 512-bytes of the given block
        LOG_DEBUG("Writing block #%d", current_block_num);
        for (uint16_t current_byte = 0; current_byte < kBlockSize;
   16610:	2300      	movs	r3, #0
   16612:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
   16616:	f8bd 3046 	ldrh.w	r3, [sp, #70]	; 0x46
   1661a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   1661e:	d216      	bcs.n	1664e <Sd::WriteBlock(unsigned long, unsigned char const*, unsigned long)+0xda>
             current_byte++)
        {
          ssp_interface_->Transfer(array[arr_offset + current_byte]);
   16620:	9b05      	ldr	r3, [sp, #20]
   16622:	6858      	ldr	r0, [r3, #4]
   16624:	9b05      	ldr	r3, [sp, #20]
   16626:	685b      	ldr	r3, [r3, #4]
   16628:	681b      	ldr	r3, [r3, #0]
   1662a:	3308      	adds	r3, #8
   1662c:	681b      	ldr	r3, [r3, #0]
   1662e:	990e      	ldr	r1, [sp, #56]	; 0x38
   16630:	f8bd 2046 	ldrh.w	r2, [sp, #70]	; 0x46
   16634:	440a      	add	r2, r1
   16636:	9903      	ldr	r1, [sp, #12]
   16638:	440a      	add	r2, r1
   1663a:	7812      	ldrb	r2, [r2, #0]
   1663c:	b292      	uxth	r2, r2
   1663e:	4611      	mov	r1, r2
   16640:	4798      	blx	r3
        for (uint16_t current_byte = 0; current_byte < kBlockSize;
   16642:	f8bd 3046 	ldrh.w	r3, [sp, #70]	; 0x46
   16646:	3301      	adds	r3, #1
   16648:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
   1664c:	e7e3      	b.n	16616 <Sd::WriteBlock(unsigned long, unsigned char const*, unsigned long)+0xa2>
        }

        // Read the data response token after writing the block
        uint8_t data_response_tkn =
            static_cast<uint8_t>(ssp_interface_->Transfer(0xFF));
   1664e:	9b05      	ldr	r3, [sp, #20]
   16650:	685a      	ldr	r2, [r3, #4]
   16652:	9b05      	ldr	r3, [sp, #20]
   16654:	685b      	ldr	r3, [r3, #4]
   16656:	681b      	ldr	r3, [r3, #0]
   16658:	3308      	adds	r3, #8
   1665a:	681b      	ldr	r3, [r3, #0]
   1665c:	21ff      	movs	r1, #255	; 0xff
   1665e:	4610      	mov	r0, r2
   16660:	4798      	blx	r3
   16662:	4603      	mov	r3, r0
   16664:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
                  ToBool(data_response_tkn & 0x0B));
        LOG_DEBUG("Data Rejected (write err)?: %s",
                  ToBool(data_response_tkn & 0x0D));

        // If writing multiple blocks and the previous block was rejected
        if (blocks > 1 && !(data_response_tkn & 0x05))
   16668:	9b02      	ldr	r3, [sp, #8]
   1666a:	2b01      	cmp	r3, #1
   1666c:	d92f      	bls.n	166ce <Sd::WriteBlock(unsigned long, unsigned char const*, unsigned long)+0x15a>
   1666e:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
   16672:	f003 0305 	and.w	r3, r3, #5
   16676:	2b00      	cmp	r3, #0
   16678:	d129      	bne.n	166ce <Sd::WriteBlock(unsigned long, unsigned char const*, unsigned long)+0x15a>
        {
          // Send an immediate stop (CMD12)
          sd.response.length =
              SendCmd(Command::kStopTrans, 0xFFFFFFFF, sd.response.data.byte,
                      100, KeepAlive::kYes);
   1667a:	9b05      	ldr	r3, [sp, #20]
   1667c:	681b      	ldr	r3, [r3, #0]
   1667e:	681c      	ldr	r4, [r3, #0]
              SendCmd(Command::kStopTrans, 0xFFFFFFFF, sd.response.data.byte,
   16680:	ab06      	add	r3, sp, #24
   16682:	f103 0208 	add.w	r2, r3, #8
   16686:	2301      	movs	r3, #1
   16688:	9301      	str	r3, [sp, #4]
   1668a:	2364      	movs	r3, #100	; 0x64
   1668c:	9300      	str	r3, [sp, #0]
   1668e:	4613      	mov	r3, r2
   16690:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   16694:	214c      	movs	r1, #76	; 0x4c
   16696:	9805      	ldr	r0, [sp, #20]
   16698:	47a0      	blx	r4
   1669a:	4603      	mov	r3, r0
          sd.response.length =
   1669c:	930a      	str	r3, [sp, #40]	; 0x28
          LOG_DEBUG("Stopped Transmission due to rejection...");
          LOG_DEBUG("[R1 Response: 0x%02X]", sd.response.data.byte[0]);

          // In the case of a write error, ask for the reason why
          if (data_response_tkn & 0x0D)
   1669e:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
   166a2:	f003 030d 	and.w	r3, r3, #13
   166a6:	2b00      	cmp	r3, #0
   166a8:	d011      	beq.n	166ce <Sd::WriteBlock(unsigned long, unsigned char const*, unsigned long)+0x15a>
          {
            sd.response.length =
                SendCmd(Command::kGetStatus, 0xFFFFFFFF, sd.response.data.byte,
                        100, KeepAlive::kYes);
   166aa:	9b05      	ldr	r3, [sp, #20]
   166ac:	681b      	ldr	r3, [r3, #0]
   166ae:	681c      	ldr	r4, [r3, #0]
                SendCmd(Command::kGetStatus, 0xFFFFFFFF, sd.response.data.byte,
   166b0:	ab06      	add	r3, sp, #24
   166b2:	f103 0208 	add.w	r2, r3, #8
   166b6:	2301      	movs	r3, #1
   166b8:	9301      	str	r3, [sp, #4]
   166ba:	2364      	movs	r3, #100	; 0x64
   166bc:	9300      	str	r3, [sp, #0]
   166be:	4613      	mov	r3, r2
   166c0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   166c4:	210d      	movs	r1, #13
   166c6:	9805      	ldr	r0, [sp, #20]
   166c8:	47a0      	blx	r4
   166ca:	4603      	mov	r3, r0
            sd.response.length =
   166cc:	930a      	str	r3, [sp, #40]	; 0x28
                "Checking Status Register to see cause of Write Error...");
            LOG_DEBUG("[R2 Response: 0x%04" PRIX32 "]",
                      sd.response.data.dWord.lo);
          }
        }
        WaitWhileBusy();
   166ce:	9805      	ldr	r0, [sp, #20]
   166d0:	f7ff fd1c 	bl	1610c <Sd::WaitWhileBusy()>
      for (uint16_t current_block_num = 0; current_block_num < blocks;
   166d4:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
   166d8:	3301      	adds	r3, #1
   166da:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
   166de:	e77f      	b.n	165e0 <Sd::WriteBlock(unsigned long, unsigned char const*, unsigned long)+0x6c>
      }

      if (blocks > 1)
   166e0:	9b02      	ldr	r3, [sp, #8]
   166e2:	2b01      	cmp	r3, #1
   166e4:	d90f      	bls.n	16706 <Sd::WriteBlock(unsigned long, unsigned char const*, unsigned long)+0x192>
      {
        constexpr uint8_t kStopToken = 0xFD;
   166e6:	23fd      	movs	r3, #253	; 0xfd
   166e8:	f88d 3036 	strb.w	r3, [sp, #54]	; 0x36
        ssp_interface_->Transfer(kStopToken);
   166ec:	9b05      	ldr	r3, [sp, #20]
   166ee:	685a      	ldr	r2, [r3, #4]
   166f0:	9b05      	ldr	r3, [sp, #20]
   166f2:	685b      	ldr	r3, [r3, #4]
   166f4:	681b      	ldr	r3, [r3, #0]
   166f6:	3308      	adds	r3, #8
   166f8:	681b      	ldr	r3, [r3, #0]
   166fa:	21fd      	movs	r1, #253	; 0xfd
   166fc:	4610      	mov	r0, r2
   166fe:	4798      	blx	r3

        // Wait for the card's programming to complete before
        // reselecting it (i.e. to prevent corruption)
        WaitWhileBusy();
   16700:	9805      	ldr	r0, [sp, #20]
   16702:	f7ff fd03 	bl	1610c <Sd::WaitWhileBusy()>
      LOG_DEBUG("Illegal Cmd Err: %s", ToBool(sd.response.data.byte[0] & 0x04));
      LOG_DEBUG("Erase Reset: %s", ToBool(sd.response.data.byte[0] & 0x02));
      LOG_DEBUG("In Idle: %s", ToBool(sd.response.data.byte[0] & 0x01));
    }

    return sd.response.data.byte[0];
   16706:	f89d 4020 	ldrb.w	r4, [sp, #32]
   1670a:	462b      	mov	r3, r5
   1670c:	4619      	mov	r1, r3
   1670e:	4803      	ldr	r0, [pc, #12]	; (1671c <Sd::WriteBlock(unsigned long, unsigned char const*, unsigned long)+0x1a8>)
   16710:	f7fc fd24 	bl	1315c <__cyg_profile_func_exit>
   16714:	4623      	mov	r3, r4
  }
   16716:	4618      	mov	r0, r3
   16718:	b015      	add	sp, #84	; 0x54
   1671a:	bd30      	pop	{r4, r5, pc}
   1671c:	00016575 	.word	0x00016575

00016720 <Sd::DeleteBlock(unsigned long, unsigned long)>:

  // Deletes any number of blocks (inclusively) within a range of address.
  uint8_t DeleteBlock(uint32_t start, uint32_t end) override
   16720:	b530      	push	{r4, r5, lr}
   16722:	b08f      	sub	sp, #60	; 0x3c
   16724:	4675      	mov	r5, lr
   16726:	9005      	str	r0, [sp, #20]
   16728:	9104      	str	r1, [sp, #16]
   1672a:	9203      	str	r2, [sp, #12]
   1672c:	462b      	mov	r3, r5
   1672e:	4619      	mov	r1, r3
   16730:	483d      	ldr	r0, [pc, #244]	; (16828 <Sd::DeleteBlock(unsigned long, unsigned long)+0x108>)
   16732:	f7fc fcff 	bl	13134 <__cyg_profile_func_enter>
  {
    // Wait for a previous command to finish
    WaitWhileBusy();
   16736:	9805      	ldr	r0, [sp, #20]
   16738:	f7ff fce8 	bl	1610c <Sd::WaitWhileBusy()>

    // Create a temporary storage location to store sd command responses
    Sd::CardInfo_t sd;
    bool delete_failed = false;
   1673c:	2300      	movs	r3, #0
   1673e:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37

    // Set the delete start address
    LOG_DEBUG("Setting Delete Start Address...");
    sd.response.length = SendCmd(Command::kDelFrom, start,
                                 sd.response.data.byte, 100, KeepAlive::kYes);
   16742:	9b05      	ldr	r3, [sp, #20]
   16744:	681b      	ldr	r3, [r3, #0]
   16746:	681c      	ldr	r4, [r3, #0]
    sd.response.length = SendCmd(Command::kDelFrom, start,
   16748:	ab06      	add	r3, sp, #24
   1674a:	f103 0208 	add.w	r2, r3, #8
   1674e:	2301      	movs	r3, #1
   16750:	9301      	str	r3, [sp, #4]
   16752:	2364      	movs	r3, #100	; 0x64
   16754:	9300      	str	r3, [sp, #0]
   16756:	4613      	mov	r3, r2
   16758:	9a04      	ldr	r2, [sp, #16]
   1675a:	2160      	movs	r1, #96	; 0x60
   1675c:	9805      	ldr	r0, [sp, #20]
   1675e:	47a0      	blx	r4
   16760:	4603      	mov	r3, r0
   16762:	930a      	str	r3, [sp, #40]	; 0x28

    // Wait while the writing the start address
    WaitWhileBusy();
   16764:	9805      	ldr	r0, [sp, #20]
   16766:	f7ff fcd1 	bl	1610c <Sd::WaitWhileBusy()>

    // Force return if an error occurred
    if (sd.response.data.byte[0] != 0x00)
   1676a:	f89d 3020 	ldrb.w	r3, [sp, #32]
   1676e:	2b00      	cmp	r3, #0
   16770:	d009      	beq.n	16786 <Sd::DeleteBlock(unsigned long, unsigned long)+0x66>
    {
      LOG_ERROR("Failed to set Start Address!");
   16772:	f44f 736a 	mov.w	r3, #936	; 0x3a8
   16776:	4a2d      	ldr	r2, [pc, #180]	; (1682c <Sd::DeleteBlock(unsigned long, unsigned long)+0x10c>)
   16778:	492d      	ldr	r1, [pc, #180]	; (16830 <Sd::DeleteBlock(unsigned long, unsigned long)+0x110>)
   1677a:	482e      	ldr	r0, [pc, #184]	; (16834 <Sd::DeleteBlock(unsigned long, unsigned long)+0x114>)
   1677c:	f7fd ff3a 	bl	145f4 <printf>
      delete_failed = true;
   16780:	2301      	movs	r3, #1
   16782:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
    }

    // Set the delete end address
    if (!delete_failed)
   16786:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
   1678a:	f083 0301 	eor.w	r3, r3, #1
   1678e:	b2db      	uxtb	r3, r3
   16790:	2b00      	cmp	r3, #0
   16792:	d010      	beq.n	167b6 <Sd::DeleteBlock(unsigned long, unsigned long)+0x96>
    {
      LOG_DEBUG("Setting Delete End Address...");
      sd.response.length = SendCmd(Command::kDelTo, end, sd.response.data.byte,
                                   100, KeepAlive::kYes);
   16794:	9b05      	ldr	r3, [sp, #20]
   16796:	681b      	ldr	r3, [r3, #0]
   16798:	681c      	ldr	r4, [r3, #0]
      sd.response.length = SendCmd(Command::kDelTo, end, sd.response.data.byte,
   1679a:	ab06      	add	r3, sp, #24
   1679c:	f103 0208 	add.w	r2, r3, #8
   167a0:	2301      	movs	r3, #1
   167a2:	9301      	str	r3, [sp, #4]
   167a4:	2364      	movs	r3, #100	; 0x64
   167a6:	9300      	str	r3, [sp, #0]
   167a8:	4613      	mov	r3, r2
   167aa:	9a03      	ldr	r2, [sp, #12]
   167ac:	2161      	movs	r1, #97	; 0x61
   167ae:	9805      	ldr	r0, [sp, #20]
   167b0:	47a0      	blx	r4
   167b2:	4603      	mov	r3, r0
   167b4:	930a      	str	r3, [sp, #40]	; 0x28
    }

    // Wait while the writing the end address
    WaitWhileBusy();
   167b6:	9805      	ldr	r0, [sp, #20]
   167b8:	f7ff fca8 	bl	1610c <Sd::WaitWhileBusy()>

    // Force return if an error occurred
    if (sd.response.data.byte[0] != 0x00)
   167bc:	f89d 3020 	ldrb.w	r3, [sp, #32]
   167c0:	2b00      	cmp	r3, #0
   167c2:	d009      	beq.n	167d8 <Sd::DeleteBlock(unsigned long, unsigned long)+0xb8>
    {
      LOG_ERROR("Failed to set End Address!");
   167c4:	f240 33ba 	movw	r3, #954	; 0x3ba
   167c8:	4a18      	ldr	r2, [pc, #96]	; (1682c <Sd::DeleteBlock(unsigned long, unsigned long)+0x10c>)
   167ca:	491b      	ldr	r1, [pc, #108]	; (16838 <Sd::DeleteBlock(unsigned long, unsigned long)+0x118>)
   167cc:	481b      	ldr	r0, [pc, #108]	; (1683c <Sd::DeleteBlock(unsigned long, unsigned long)+0x11c>)
   167ce:	f7fd ff11 	bl	145f4 <printf>
      delete_failed = true;
   167d2:	2301      	movs	r3, #1
   167d4:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
    }

    // Finally, attempt a delete
    if (!delete_failed)
   167d8:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
   167dc:	f083 0301 	eor.w	r3, r3, #1
   167e0:	b2db      	uxtb	r3, r3
   167e2:	2b00      	cmp	r3, #0
   167e4:	d014      	beq.n	16810 <Sd::DeleteBlock(unsigned long, unsigned long)+0xf0>
    {
      // Issue the delete command to delete from our from:to range
      LOG_DEBUG("Issuing Delete Command...");
      sd.response.length = SendCmd(Command::kDel, 0xFFFFFFFF,
                                   sd.response.data.byte, 100, KeepAlive::kYes);
   167e6:	9b05      	ldr	r3, [sp, #20]
   167e8:	681b      	ldr	r3, [r3, #0]
   167ea:	681c      	ldr	r4, [r3, #0]
      sd.response.length = SendCmd(Command::kDel, 0xFFFFFFFF,
   167ec:	ab06      	add	r3, sp, #24
   167ee:	f103 0208 	add.w	r2, r3, #8
   167f2:	2301      	movs	r3, #1
   167f4:	9301      	str	r3, [sp, #4]
   167f6:	2364      	movs	r3, #100	; 0x64
   167f8:	9300      	str	r3, [sp, #0]
   167fa:	4613      	mov	r3, r2
   167fc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   16800:	2166      	movs	r1, #102	; 0x66
   16802:	9805      	ldr	r0, [sp, #20]
   16804:	47a0      	blx	r4
   16806:	4603      	mov	r3, r0
   16808:	930a      	str	r3, [sp, #40]	; 0x28

      // Wait while the deletion occurs
      WaitWhileBusy();
   1680a:	9805      	ldr	r0, [sp, #20]
   1680c:	f7ff fc7e 	bl	1610c <Sd::WaitWhileBusy()>
      LOG_DEBUG("[R1 Response: 0x%02X]", sd.response.data.byte[0]);
      LOG_DEBUG("Deletion Complete...");
    }

    // Return status
    return sd.response.data.byte[0];
   16810:	f89d 4020 	ldrb.w	r4, [sp, #32]
   16814:	462b      	mov	r3, r5
   16816:	4619      	mov	r1, r3
   16818:	4803      	ldr	r0, [pc, #12]	; (16828 <Sd::DeleteBlock(unsigned long, unsigned long)+0x108>)
   1681a:	f7fc fc9f 	bl	1315c <__cyg_profile_func_exit>
   1681e:	4623      	mov	r3, r4
  }
   16820:	4618      	mov	r0, r3
   16822:	b00f      	add	sp, #60	; 0x3c
   16824:	bd30      	pop	{r4, r5, pc}
   16826:	bf00      	nop
   16828:	00016721 	.word	0x00016721
   1682c:	000196a8 	.word	0x000196a8
   16830:	000193c8 	.word	0x000193c8
   16834:	00018e64 	.word	0x00018e64
   16838:	000193d0 	.word	0x000193d0
   1683c:	00018ebc 	.word	0x00018ebc

00016840 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)>:

  // Send a command
  uint32_t SendCmd(Command sdc, uint32_t arg, uint8_t response_buffer[],
   16840:	e92d 49f0 	stmdb	sp!, {r4, r5, r6, r7, r8, fp, lr}
   16844:	b08f      	sub	sp, #60	; 0x3c
   16846:	46f0      	mov	r8, lr
   16848:	9003      	str	r0, [sp, #12]
   1684a:	9102      	str	r1, [sp, #8]
   1684c:	9201      	str	r2, [sp, #4]
   1684e:	9300      	str	r3, [sp, #0]
   16850:	4643      	mov	r3, r8
   16852:	4619      	mov	r1, r3
   16854:	4840      	ldr	r0, [pc, #256]	; (16958 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x118>)
   16856:	f7fc fc6d 	bl	13134 <__cyg_profile_func_enter>
                   uint32_t delay, KeepAlive keep_alive) override
  {
    ResponseType res_type;
    uint8_t res_len    = 0;
   1685a:	2300      	movs	r3, #0
   1685c:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
    uint8_t crc        = 0;
   16860:	2300      	movs	r3, #0
   16862:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
    uint8_t tries      = 0;
   16866:	2300      	movs	r3, #0
   16868:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
    uint8_t bit_offset = 0;  // determines the distance of the response's
   1686c:	2300      	movs	r3, #0
   1686e:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
                             // 0 bit from the MSB place
    uint8_t temp_byte = 0;
   16872:	2300      	movs	r3, #0
   16874:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f

    // Determine the response type of the set command
    switch (sdc)
   16878:	9b02      	ldr	r3, [sp, #8]
   1687a:	2b58      	cmp	r3, #88	; 0x58
   1687c:	d052      	beq.n	16924 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0xe4>
   1687e:	2b58      	cmp	r3, #88	; 0x58
   16880:	dc16      	bgt.n	168b0 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x70>
   16882:	2b48      	cmp	r3, #72	; 0x48
   16884:	d033      	beq.n	168ee <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0xae>
   16886:	2b48      	cmp	r3, #72	; 0x48
   16888:	dc06      	bgt.n	16898 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x58>
   1688a:	2b40      	cmp	r3, #64	; 0x40
   1688c:	d029      	beq.n	168e2 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0xa2>
   1688e:	2b41      	cmp	r3, #65	; 0x41
   16890:	d02a      	beq.n	168e8 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0xa8>
   16892:	2b0d      	cmp	r3, #13
   16894:	d031      	beq.n	168fa <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0xba>
   16896:	e054      	b.n	16942 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x102>
   16898:	2b50      	cmp	r3, #80	; 0x50
   1689a:	d03a      	beq.n	16912 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0xd2>
   1689c:	2b50      	cmp	r3, #80	; 0x50
   1689e:	dc02      	bgt.n	168a6 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x66>
   168a0:	2b4c      	cmp	r3, #76	; 0x4c
   168a2:	d027      	beq.n	168f4 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0xb4>
   168a4:	e04d      	b.n	16942 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x102>
   168a6:	2b51      	cmp	r3, #81	; 0x51
   168a8:	d036      	beq.n	16918 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0xd8>
   168aa:	2b52      	cmp	r3, #82	; 0x52
   168ac:	d037      	beq.n	1691e <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0xde>
   168ae:	e048      	b.n	16942 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x102>
   168b0:	2b66      	cmp	r3, #102	; 0x66
   168b2:	d043      	beq.n	1693c <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0xfc>
   168b4:	2b66      	cmp	r3, #102	; 0x66
   168b6:	dc06      	bgt.n	168c6 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x86>
   168b8:	2b60      	cmp	r3, #96	; 0x60
   168ba:	d039      	beq.n	16930 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0xf0>
   168bc:	2b61      	cmp	r3, #97	; 0x61
   168be:	d03a      	beq.n	16936 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0xf6>
   168c0:	2b59      	cmp	r3, #89	; 0x59
   168c2:	d032      	beq.n	1692a <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0xea>
   168c4:	e03d      	b.n	16942 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x102>
   168c6:	2b77      	cmp	r3, #119	; 0x77
   168c8:	d01a      	beq.n	16900 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0xc0>
   168ca:	2b77      	cmp	r3, #119	; 0x77
   168cc:	dc02      	bgt.n	168d4 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x94>
   168ce:	2b69      	cmp	r3, #105	; 0x69
   168d0:	d019      	beq.n	16906 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0xc6>
   168d2:	e036      	b.n	16942 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x102>
   168d4:	2b7a      	cmp	r3, #122	; 0x7a
   168d6:	d019      	beq.n	1690c <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0xcc>
   168d8:	2bff      	cmp	r3, #255	; 0xff
   168da:	d132      	bne.n	16942 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x102>
    {
      case Command::kGarbage: res_type = ResponseType::kR1; break;
   168dc:	2300      	movs	r3, #0
   168de:	930d      	str	r3, [sp, #52]	; 0x34
   168e0:	e042      	b.n	16968 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x128>
      case Command::kReset: res_type = ResponseType::kR1; break;
   168e2:	2300      	movs	r3, #0
   168e4:	930d      	str	r3, [sp, #52]	; 0x34
   168e6:	e03f      	b.n	16968 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x128>
      case Command::kInit: res_type = ResponseType::kR1; break;
   168e8:	2300      	movs	r3, #0
   168ea:	930d      	str	r3, [sp, #52]	; 0x34
   168ec:	e03c      	b.n	16968 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x128>
      case Command::kGetOp: res_type = ResponseType::kR7; break;
   168ee:	2307      	movs	r3, #7
   168f0:	930d      	str	r3, [sp, #52]	; 0x34
   168f2:	e039      	b.n	16968 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x128>
      case Command::kStopTrans: res_type = ResponseType::kR1; break;
   168f4:	2300      	movs	r3, #0
   168f6:	930d      	str	r3, [sp, #52]	; 0x34
   168f8:	e036      	b.n	16968 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x128>
      case Command::kGetStatus: res_type = ResponseType::kR2; break;
   168fa:	2302      	movs	r3, #2
   168fc:	930d      	str	r3, [sp, #52]	; 0x34
   168fe:	e033      	b.n	16968 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x128>
      case Command::kAcBegin: res_type = ResponseType::kR1; break;
   16900:	2300      	movs	r3, #0
   16902:	930d      	str	r3, [sp, #52]	; 0x34
   16904:	e030      	b.n	16968 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x128>
      case Command::kAcInit: res_type = ResponseType::kR1; break;
   16906:	2300      	movs	r3, #0
   16908:	930d      	str	r3, [sp, #52]	; 0x34
   1690a:	e02d      	b.n	16968 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x128>
      case Command::kGetOcr: res_type = ResponseType::kR3; break;
   1690c:	2303      	movs	r3, #3
   1690e:	930d      	str	r3, [sp, #52]	; 0x34
   16910:	e02a      	b.n	16968 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x128>
      case Command::kChgBlkLen: res_type = ResponseType::kR1; break;
   16912:	2300      	movs	r3, #0
   16914:	930d      	str	r3, [sp, #52]	; 0x34
   16916:	e027      	b.n	16968 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x128>
      case Command::kReadSingle: res_type = ResponseType::kR1; break;
   16918:	2300      	movs	r3, #0
   1691a:	930d      	str	r3, [sp, #52]	; 0x34
   1691c:	e024      	b.n	16968 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x128>
      case Command::kReadMulti: res_type = ResponseType::kR1; break;
   1691e:	2300      	movs	r3, #0
   16920:	930d      	str	r3, [sp, #52]	; 0x34
   16922:	e021      	b.n	16968 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x128>
      case Command::kWriteSingle: res_type = ResponseType::kR1; break;
   16924:	2300      	movs	r3, #0
   16926:	930d      	str	r3, [sp, #52]	; 0x34
   16928:	e01e      	b.n	16968 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x128>
      case Command::kWriteMulti: res_type = ResponseType::kR1; break;
   1692a:	2300      	movs	r3, #0
   1692c:	930d      	str	r3, [sp, #52]	; 0x34
   1692e:	e01b      	b.n	16968 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x128>
      case Command::kDelFrom: res_type = ResponseType::kR1; break;
   16930:	2300      	movs	r3, #0
   16932:	930d      	str	r3, [sp, #52]	; 0x34
   16934:	e018      	b.n	16968 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x128>
      case Command::kDelTo: res_type = ResponseType::kR1; break;
   16936:	2300      	movs	r3, #0
   16938:	930d      	str	r3, [sp, #52]	; 0x34
   1693a:	e015      	b.n	16968 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x128>
      case Command::kDel: res_type = ResponseType::kR1b; break;
   1693c:	2301      	movs	r3, #1
   1693e:	930d      	str	r3, [sp, #52]	; 0x34
   16940:	e012      	b.n	16968 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x128>
      default:
        LOG_ERROR("Unknown response type. Aborting!");
   16942:	f240 33f3 	movw	r3, #1011	; 0x3f3
   16946:	4a05      	ldr	r2, [pc, #20]	; (1695c <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x11c>)
   16948:	4905      	ldr	r1, [pc, #20]	; (16960 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x120>)
   1694a:	4806      	ldr	r0, [pc, #24]	; (16964 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x124>)
   1694c:	f7fd fe52 	bl	145f4 <printf>
        return -1;
   16950:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   16954:	e1b1      	b.n	16cba <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x47a>
   16956:	bf00      	nop
   16958:	00016841 	.word	0x00016841
   1695c:	000196dc 	.word	0x000196dc
   16960:	000193d8 	.word	0x000193d8
   16964:	00018f10 	.word	0x00018f10
    // algorithm
    uint8_t msg[5] = { static_cast<uint8_t>(sdc),
                       static_cast<uint8_t>(arg >> 24),
                       static_cast<uint8_t>(arg >> 16),
                       static_cast<uint8_t>(arg >> 8),
                       static_cast<uint8_t>(arg >> 0) };
   16968:	9b02      	ldr	r3, [sp, #8]
   1696a:	b2db      	uxtb	r3, r3
   1696c:	f88d 3010 	strb.w	r3, [sp, #16]
                       static_cast<uint8_t>(arg >> 24),
   16970:	9b01      	ldr	r3, [sp, #4]
   16972:	0e1b      	lsrs	r3, r3, #24
                       static_cast<uint8_t>(arg >> 0) };
   16974:	b2db      	uxtb	r3, r3
   16976:	f88d 3011 	strb.w	r3, [sp, #17]
                       static_cast<uint8_t>(arg >> 16),
   1697a:	9b01      	ldr	r3, [sp, #4]
   1697c:	0c1b      	lsrs	r3, r3, #16
                       static_cast<uint8_t>(arg >> 0) };
   1697e:	b2db      	uxtb	r3, r3
   16980:	f88d 3012 	strb.w	r3, [sp, #18]
                       static_cast<uint8_t>(arg >> 8),
   16984:	9b01      	ldr	r3, [sp, #4]
   16986:	0a1b      	lsrs	r3, r3, #8
                       static_cast<uint8_t>(arg >> 0) };
   16988:	b2db      	uxtb	r3, r3
   1698a:	f88d 3013 	strb.w	r3, [sp, #19]
   1698e:	9b01      	ldr	r3, [sp, #4]
   16990:	b2db      	uxtb	r3, r3
   16992:	f88d 3014 	strb.w	r3, [sp, #20]

    crc = GetCrc7(msg, sizeof(msg));
   16996:	9b03      	ldr	r3, [sp, #12]
   16998:	681b      	ldr	r3, [r3, #0]
   1699a:	331c      	adds	r3, #28
   1699c:	681b      	ldr	r3, [r3, #0]
   1699e:	a904      	add	r1, sp, #16
   169a0:	2205      	movs	r2, #5
   169a2:	9803      	ldr	r0, [sp, #12]
   169a4:	4798      	blx	r3
   169a6:	4603      	mov	r3, r0
   169a8:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
    if (sdc == Command::kGarbage)
   169ac:	9b02      	ldr	r3, [sp, #8]
   169ae:	2bff      	cmp	r3, #255	; 0xff
   169b0:	d102      	bne.n	169b8 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x178>
    {
      crc = 0xFF;
   169b2:	23ff      	movs	r3, #255	; 0xff
   169b4:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
    }

    // Select the SD Card
    chip_select_->SetLow();
   169b8:	9b03      	ldr	r3, [sp, #12]
   169ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   169bc:	9b03      	ldr	r3, [sp, #12]
   169be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   169c0:	681b      	ldr	r3, [r3, #0]
   169c2:	3310      	adds	r3, #16
   169c4:	681b      	ldr	r3, [r3, #0]
   169c6:	4610      	mov	r0, r2
   169c8:	4798      	blx	r3
    chip_select_external_->SetLow();
   169ca:	9b03      	ldr	r3, [sp, #12]
   169cc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
   169ce:	9b03      	ldr	r3, [sp, #12]
   169d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   169d2:	681b      	ldr	r3, [r3, #0]
   169d4:	3310      	adds	r3, #16
   169d6:	681b      	ldr	r3, [r3, #0]
   169d8:	4610      	mov	r0, r2
   169da:	4798      	blx	r3

    // If desired, wait a bit before talking
    if (delay > 0)
   169dc:	9b16      	ldr	r3, [sp, #88]	; 0x58
   169de:	2b00      	cmp	r3, #0
   169e0:	d007      	beq.n	169f2 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x1b2>
    {
      Delay(delay);
   169e2:	9b16      	ldr	r3, [sp, #88]	; 0x58
   169e4:	461a      	mov	r2, r3
   169e6:	f04f 0300 	mov.w	r3, #0
   169ea:	4610      	mov	r0, r2
   169ec:	4619      	mov	r1, r3
   169ee:	f7f9 fffb 	bl	109e8 <Delay(unsigned long long)>
    }

    // Send the desired command frame to the SD card board
    // Begin by transfering the command byte
    ssp_interface_->Transfer(static_cast<uint16_t>(sdc));
   169f2:	9b03      	ldr	r3, [sp, #12]
   169f4:	685a      	ldr	r2, [r3, #4]
   169f6:	9b03      	ldr	r3, [sp, #12]
   169f8:	685b      	ldr	r3, [r3, #4]
   169fa:	681b      	ldr	r3, [r3, #0]
   169fc:	3308      	adds	r3, #8
   169fe:	681b      	ldr	r3, [r3, #0]
   16a00:	9902      	ldr	r1, [sp, #8]
   16a02:	b289      	uxth	r1, r1
   16a04:	4610      	mov	r0, r2
   16a06:	4798      	blx	r3
    // Send arg byte [31:24]
    ssp_interface_->Transfer(static_cast<uint16_t>(arg >> 24) & 0xFF);
   16a08:	9b03      	ldr	r3, [sp, #12]
   16a0a:	6858      	ldr	r0, [r3, #4]
   16a0c:	9b03      	ldr	r3, [sp, #12]
   16a0e:	685b      	ldr	r3, [r3, #4]
   16a10:	681b      	ldr	r3, [r3, #0]
   16a12:	3308      	adds	r3, #8
   16a14:	681b      	ldr	r3, [r3, #0]
   16a16:	9a01      	ldr	r2, [sp, #4]
   16a18:	0e12      	lsrs	r2, r2, #24
   16a1a:	b292      	uxth	r2, r2
   16a1c:	b2d2      	uxtb	r2, r2
   16a1e:	b292      	uxth	r2, r2
   16a20:	4611      	mov	r1, r2
   16a22:	4798      	blx	r3
    // Send arg byte [23:16]
    ssp_interface_->Transfer(static_cast<uint16_t>(arg >> 16) & 0xFF);
   16a24:	9b03      	ldr	r3, [sp, #12]
   16a26:	6858      	ldr	r0, [r3, #4]
   16a28:	9b03      	ldr	r3, [sp, #12]
   16a2a:	685b      	ldr	r3, [r3, #4]
   16a2c:	681b      	ldr	r3, [r3, #0]
   16a2e:	3308      	adds	r3, #8
   16a30:	681b      	ldr	r3, [r3, #0]
   16a32:	9a01      	ldr	r2, [sp, #4]
   16a34:	0c12      	lsrs	r2, r2, #16
   16a36:	b292      	uxth	r2, r2
   16a38:	b2d2      	uxtb	r2, r2
   16a3a:	b292      	uxth	r2, r2
   16a3c:	4611      	mov	r1, r2
   16a3e:	4798      	blx	r3
    // Send arg byte [15:8]
    ssp_interface_->Transfer(static_cast<uint16_t>(arg >> 8) & 0xFF);
   16a40:	9b03      	ldr	r3, [sp, #12]
   16a42:	6858      	ldr	r0, [r3, #4]
   16a44:	9b03      	ldr	r3, [sp, #12]
   16a46:	685b      	ldr	r3, [r3, #4]
   16a48:	681b      	ldr	r3, [r3, #0]
   16a4a:	3308      	adds	r3, #8
   16a4c:	681b      	ldr	r3, [r3, #0]
   16a4e:	9a01      	ldr	r2, [sp, #4]
   16a50:	0a12      	lsrs	r2, r2, #8
   16a52:	b292      	uxth	r2, r2
   16a54:	b2d2      	uxtb	r2, r2
   16a56:	b292      	uxth	r2, r2
   16a58:	4611      	mov	r1, r2
   16a5a:	4798      	blx	r3
    // Send arg byte [7:0]
    ssp_interface_->Transfer(static_cast<uint16_t>(arg >> 0) & 0xFF);
   16a5c:	9b03      	ldr	r3, [sp, #12]
   16a5e:	685a      	ldr	r2, [r3, #4]
   16a60:	9b03      	ldr	r3, [sp, #12]
   16a62:	685b      	ldr	r3, [r3, #4]
   16a64:	681b      	ldr	r3, [r3, #0]
   16a66:	3308      	adds	r3, #8
   16a68:	681b      	ldr	r3, [r3, #0]
   16a6a:	9901      	ldr	r1, [sp, #4]
   16a6c:	b289      	uxth	r1, r1
   16a6e:	b2c9      	uxtb	r1, r1
   16a70:	b289      	uxth	r1, r1
   16a72:	4610      	mov	r0, r2
   16a74:	4798      	blx	r3
    // Send 7-bit CRC and LSB stop addr (as b1)
    ssp_interface_->Transfer(static_cast<uint16_t>(crc << 1) | 0x01);
   16a76:	9b03      	ldr	r3, [sp, #12]
   16a78:	6858      	ldr	r0, [r3, #4]
   16a7a:	9b03      	ldr	r3, [sp, #12]
   16a7c:	685b      	ldr	r3, [r3, #4]
   16a7e:	681b      	ldr	r3, [r3, #0]
   16a80:	3308      	adds	r3, #8
   16a82:	681b      	ldr	r3, [r3, #0]
   16a84:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
   16a88:	b292      	uxth	r2, r2
   16a8a:	0052      	lsls	r2, r2, #1
   16a8c:	b292      	uxth	r2, r2
   16a8e:	f042 0201 	orr.w	r2, r2, #1
   16a92:	b292      	uxth	r2, r2
   16a94:	4611      	mov	r1, r2
   16a96:	4798      	blx	r3

    // Write garbage while waiting for a response
    // Send at least 1 byte of garbage before checking for a response
    temp_byte = static_cast<uint8_t>(ssp_interface_->Transfer(0xFF));
   16a98:	9b03      	ldr	r3, [sp, #12]
   16a9a:	685a      	ldr	r2, [r3, #4]
   16a9c:	9b03      	ldr	r3, [sp, #12]
   16a9e:	685b      	ldr	r3, [r3, #4]
   16aa0:	681b      	ldr	r3, [r3, #0]
   16aa2:	3308      	adds	r3, #8
   16aa4:	681b      	ldr	r3, [r3, #0]
   16aa6:	21ff      	movs	r1, #255	; 0xff
   16aa8:	4610      	mov	r0, r2
   16aaa:	4798      	blx	r3
   16aac:	4603      	mov	r3, r0
   16aae:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
    while (tries++ < kBusTimeout)
   16ab2:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   16ab6:	1c5a      	adds	r2, r3, #1
   16ab8:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
   16abc:	2bf9      	cmp	r3, #249	; 0xf9
   16abe:	bf94      	ite	ls
   16ac0:	2301      	movls	r3, #1
   16ac2:	2300      	movhi	r3, #0
   16ac4:	b2db      	uxtb	r3, r3
   16ac6:	2b00      	cmp	r3, #0
   16ac8:	d027      	beq.n	16b1a <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x2da>
    {
      temp_byte = static_cast<uint8_t>(ssp_interface_->Transfer(0xFF));
   16aca:	9b03      	ldr	r3, [sp, #12]
   16acc:	685a      	ldr	r2, [r3, #4]
   16ace:	9b03      	ldr	r3, [sp, #12]
   16ad0:	685b      	ldr	r3, [r3, #4]
   16ad2:	681b      	ldr	r3, [r3, #0]
   16ad4:	3308      	adds	r3, #8
   16ad6:	681b      	ldr	r3, [r3, #0]
   16ad8:	21ff      	movs	r1, #255	; 0xff
   16ada:	4610      	mov	r0, r2
   16adc:	4798      	blx	r3
   16ade:	4603      	mov	r3, r0
   16ae0:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
      if (temp_byte != 0xFF)
   16ae4:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
   16ae8:	2bff      	cmp	r3, #255	; 0xff
   16aea:	d00f      	beq.n	16b0c <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x2cc>
      {
        // Determine the offset, since the first byte of a
        // response will always be 0.
        while (temp_byte & (0x80 >> bit_offset))
   16aec:	f89d 202f 	ldrb.w	r2, [sp, #47]	; 0x2f
   16af0:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
   16af4:	2180      	movs	r1, #128	; 0x80
   16af6:	fa41 f303 	asr.w	r3, r1, r3
   16afa:	4013      	ands	r3, r2
   16afc:	2b00      	cmp	r3, #0
   16afe:	d00b      	beq.n	16b18 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x2d8>
        {
          bit_offset++;
   16b00:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
   16b04:	3301      	adds	r3, #1
   16b06:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
        while (temp_byte & (0x80 >> bit_offset))
   16b0a:	e7ef      	b.n	16aec <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x2ac>
        }
        break;
      }
      tries++;
   16b0c:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   16b10:	3301      	adds	r3, #1
   16b12:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
    while (tries++ < kBusTimeout)
   16b16:	e7cc      	b.n	16ab2 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x272>
        break;
   16b18:	bf00      	nop
    }

    // Determine response length (in bytes) based on response type
    switch (res_type)
   16b1a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   16b1c:	2b07      	cmp	r3, #7
   16b1e:	d827      	bhi.n	16b70 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x330>
   16b20:	a201      	add	r2, pc, #4	; (adr r2, 16b28 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x2e8>)
   16b22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   16b26:	bf00      	nop
   16b28:	00016b49 	.word	0x00016b49
   16b2c:	00016b51 	.word	0x00016b51
   16b30:	00016b59 	.word	0x00016b59
   16b34:	00016b61 	.word	0x00016b61
   16b38:	00016b71 	.word	0x00016b71
   16b3c:	00016b71 	.word	0x00016b71
   16b40:	00016b71 	.word	0x00016b71
   16b44:	00016b69 	.word	0x00016b69
    {
      case ResponseType::kR1: res_len = 1; break;
   16b48:	2301      	movs	r3, #1
   16b4a:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
   16b4e:	e019      	b.n	16b84 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x344>
      case ResponseType::kR1b: res_len = 1; break;
   16b50:	2301      	movs	r3, #1
   16b52:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
   16b56:	e015      	b.n	16b84 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x344>
      case ResponseType::kR2: res_len = 2; break;
   16b58:	2302      	movs	r3, #2
   16b5a:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
   16b5e:	e011      	b.n	16b84 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x344>
      case ResponseType::kR3: res_len = 5; break;
   16b60:	2305      	movs	r3, #5
   16b62:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
   16b66:	e00d      	b.n	16b84 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x344>
      case ResponseType::kR7: res_len = 5; break;
   16b68:	2305      	movs	r3, #5
   16b6a:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
   16b6e:	e009      	b.n	16b84 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x344>
      default:
        LOG_ERROR("Response unsupported in SPI mode. Aborting!");
   16b70:	f240 433a 	movw	r3, #1082	; 0x43a
   16b74:	4a56      	ldr	r2, [pc, #344]	; (16cd0 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x490>)
   16b76:	4957      	ldr	r1, [pc, #348]	; (16cd4 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x494>)
   16b78:	4857      	ldr	r0, [pc, #348]	; (16cd8 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x498>)
   16b7a:	f7fd fd3b 	bl	145f4 <printf>
        return -1;
   16b7e:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   16b82:	e09a      	b.n	16cba <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x47a>
        break;
    }

    // Acquire the response
    uint64_t temp_response = 0;
   16b84:	f04f 0200 	mov.w	r2, #0
   16b88:	f04f 0300 	mov.w	r3, #0
   16b8c:	e9cd 2308 	strd	r2, r3, [sp, #32]
    // Read an extra 8 bits since the response was offset
    uint8_t bytes_to_read =
   16b90:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
   16b94:	2b00      	cmp	r3, #0
   16b96:	d004      	beq.n	16ba2 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x362>
   16b98:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
   16b9c:	3301      	adds	r3, #1
   16b9e:	b2db      	uxtb	r3, r3
   16ba0:	e001      	b.n	16ba6 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x366>
   16ba2:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
   16ba6:	f88d 301f 	strb.w	r3, [sp, #31]
        static_cast<uint8_t>((bit_offset > 0) ? res_len + 1 : res_len);
    while (bytes_to_read-- > 0)
   16baa:	f89d 301f 	ldrb.w	r3, [sp, #31]
   16bae:	1e5a      	subs	r2, r3, #1
   16bb0:	f88d 201f 	strb.w	r2, [sp, #31]
   16bb4:	2b00      	cmp	r3, #0
   16bb6:	bf14      	ite	ne
   16bb8:	2301      	movne	r3, #1
   16bba:	2300      	moveq	r3, #0
   16bbc:	b2db      	uxtb	r3, r3
   16bbe:	2b00      	cmp	r3, #0
   16bc0:	d025      	beq.n	16c0e <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x3ce>
    {
      // Make space for the next byte
      temp_response = temp_response << 8;
   16bc2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   16bc6:	f04f 0200 	mov.w	r2, #0
   16bca:	f04f 0300 	mov.w	r3, #0
   16bce:	020b      	lsls	r3, r1, #8
   16bd0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
   16bd4:	0202      	lsls	r2, r0, #8
   16bd6:	e9cd 2308 	strd	r2, r3, [sp, #32]
      temp_response |= temp_byte;
   16bda:	f89d b02f 	ldrb.w	fp, [sp, #47]	; 0x2f
   16bde:	f04f 0c00 	mov.w	ip, #0
   16be2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   16be6:	ea4b 0200 	orr.w	r2, fp, r0
   16bea:	ea4c 0301 	orr.w	r3, ip, r1
   16bee:	e9cd 2308 	strd	r2, r3, [sp, #32]
      temp_byte = static_cast<uint8_t>(ssp_interface_->Transfer(0xFF));
   16bf2:	9b03      	ldr	r3, [sp, #12]
   16bf4:	685a      	ldr	r2, [r3, #4]
   16bf6:	9b03      	ldr	r3, [sp, #12]
   16bf8:	685b      	ldr	r3, [r3, #4]
   16bfa:	681b      	ldr	r3, [r3, #0]
   16bfc:	3308      	adds	r3, #8
   16bfe:	681b      	ldr	r3, [r3, #0]
   16c00:	21ff      	movs	r1, #255	; 0xff
   16c02:	4610      	mov	r0, r2
   16c04:	4798      	blx	r3
   16c06:	4603      	mov	r3, r0
   16c08:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
    while (bytes_to_read-- > 0)
   16c0c:	e7cd      	b.n	16baa <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x36a>
    }
    // Compensate for the bit offset
    temp_response = temp_response >> bit_offset;
   16c0e:	f89d 1030 	ldrb.w	r1, [sp, #48]	; 0x30
   16c12:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   16c16:	f1c1 0c20 	rsb	ip, r1, #32
   16c1a:	f1a1 0020 	sub.w	r0, r1, #32
   16c1e:	fa22 f401 	lsr.w	r4, r2, r1
   16c22:	fa03 fc0c 	lsl.w	ip, r3, ip
   16c26:	ea44 040c 	orr.w	r4, r4, ip
   16c2a:	fa23 f000 	lsr.w	r0, r3, r0
   16c2e:	4304      	orrs	r4, r0
   16c30:	fa23 f501 	lsr.w	r5, r3, r1
   16c34:	e9cd 4508 	strd	r4, r5, [sp, #32]

    // Only write to the response buffer if it is provided
    if (response_buffer != nullptr)
   16c38:	9b00      	ldr	r3, [sp, #0]
   16c3a:	2b00      	cmp	r3, #0
   16c3c:	d025      	beq.n	16c8a <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x44a>
    {
      for (int i = 0; i < res_len; i++)
   16c3e:	2300      	movs	r3, #0
   16c40:	9306      	str	r3, [sp, #24]
   16c42:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
   16c46:	9a06      	ldr	r2, [sp, #24]
   16c48:	429a      	cmp	r2, r3
   16c4a:	da1e      	bge.n	16c8a <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x44a>
      {
        response_buffer[i] =
            static_cast<uint8_t>(temp_response >> 8 * (res_len - 1 - i));
   16c4c:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
   16c50:	1e5a      	subs	r2, r3, #1
   16c52:	9b06      	ldr	r3, [sp, #24]
   16c54:	1ad3      	subs	r3, r2, r3
   16c56:	00da      	lsls	r2, r3, #3
   16c58:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   16c5c:	f1c2 0020 	rsb	r0, r2, #32
   16c60:	f1a2 0120 	sub.w	r1, r2, #32
   16c64:	fa23 f602 	lsr.w	r6, r3, r2
   16c68:	fa04 f000 	lsl.w	r0, r4, r0
   16c6c:	4306      	orrs	r6, r0
   16c6e:	fa24 f101 	lsr.w	r1, r4, r1
   16c72:	430e      	orrs	r6, r1
   16c74:	fa24 f702 	lsr.w	r7, r4, r2
        response_buffer[i] =
   16c78:	9b06      	ldr	r3, [sp, #24]
   16c7a:	9a00      	ldr	r2, [sp, #0]
   16c7c:	4413      	add	r3, r2
   16c7e:	b2f2      	uxtb	r2, r6
   16c80:	701a      	strb	r2, [r3, #0]
      for (int i = 0; i < res_len; i++)
   16c82:	9b06      	ldr	r3, [sp, #24]
   16c84:	3301      	adds	r3, #1
   16c86:	9306      	str	r3, [sp, #24]
   16c88:	e7db      	b.n	16c42 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x402>
      }
    }

    // Only end the transaction if keep_alive isn't requested
    if (keep_alive == KeepAlive::kNo)
   16c8a:	f89d 305c 	ldrb.w	r3, [sp, #92]	; 0x5c
   16c8e:	2b00      	cmp	r3, #0
   16c90:	d111      	bne.n	16cb6 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x476>
    {
      // Deselect the SPI comm board
      chip_select_->SetHigh();
   16c92:	9b03      	ldr	r3, [sp, #12]
   16c94:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   16c96:	9b03      	ldr	r3, [sp, #12]
   16c98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   16c9a:	681b      	ldr	r3, [r3, #0]
   16c9c:	330c      	adds	r3, #12
   16c9e:	681b      	ldr	r3, [r3, #0]
   16ca0:	4610      	mov	r0, r2
   16ca2:	4798      	blx	r3
      chip_select_external_->SetHigh();
   16ca4:	9b03      	ldr	r3, [sp, #12]
   16ca6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
   16ca8:	9b03      	ldr	r3, [sp, #12]
   16caa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   16cac:	681b      	ldr	r3, [r3, #0]
   16cae:	330c      	adds	r3, #12
   16cb0:	681b      	ldr	r3, [r3, #0]
   16cb2:	4610      	mov	r0, r2
   16cb4:	4798      	blx	r3
    }
    return res_len;
   16cb6:	f89d 4033 	ldrb.w	r4, [sp, #51]	; 0x33
   16cba:	4643      	mov	r3, r8
   16cbc:	4619      	mov	r1, r3
   16cbe:	4807      	ldr	r0, [pc, #28]	; (16cdc <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x49c>)
   16cc0:	f7fc fa4c 	bl	1315c <__cyg_profile_func_exit>
   16cc4:	4623      	mov	r3, r4
  }
   16cc6:	4618      	mov	r0, r3
   16cc8:	b00f      	add	sp, #60	; 0x3c
   16cca:	e8bd 89f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, fp, pc}
   16cce:	bf00      	nop
   16cd0:	000196dc 	.word	0x000196dc
   16cd4:	000193e0 	.word	0x000193e0
   16cd8:	00018f6c 	.word	0x00018f6c
   16cdc:	00016841 	.word	0x00016841

00016ce0 <Sd::Crc7Add(unsigned char, unsigned char)>:

  // Adds a message byte to the current CRC-7 to get a the new CRC-7
  uint8_t Crc7Add(uint8_t crc, uint8_t message_byte) override
   16ce0:	b530      	push	{r4, r5, lr}
   16ce2:	b083      	sub	sp, #12
   16ce4:	4675      	mov	r5, lr
   16ce6:	9001      	str	r0, [sp, #4]
   16ce8:	460b      	mov	r3, r1
   16cea:	f88d 3003 	strb.w	r3, [sp, #3]
   16cee:	4613      	mov	r3, r2
   16cf0:	f88d 3002 	strb.w	r3, [sp, #2]
   16cf4:	462b      	mov	r3, r5
   16cf6:	4619      	mov	r1, r3
   16cf8:	4809      	ldr	r0, [pc, #36]	; (16d20 <Sd::Crc7Add(unsigned char, unsigned char)+0x40>)
   16cfa:	f7fc fa1b 	bl	13134 <__cyg_profile_func_enter>
  {
    return kCrcTable8.crc_table[(crc << 1) ^ message_byte];
   16cfe:	f89d 3003 	ldrb.w	r3, [sp, #3]
   16d02:	005a      	lsls	r2, r3, #1
   16d04:	f89d 3002 	ldrb.w	r3, [sp, #2]
   16d08:	4053      	eors	r3, r2
   16d0a:	4a06      	ldr	r2, [pc, #24]	; (16d24 <Sd::Crc7Add(unsigned char, unsigned char)+0x44>)
   16d0c:	5cd4      	ldrb	r4, [r2, r3]
   16d0e:	462b      	mov	r3, r5
   16d10:	4619      	mov	r1, r3
   16d12:	4803      	ldr	r0, [pc, #12]	; (16d20 <Sd::Crc7Add(unsigned char, unsigned char)+0x40>)
   16d14:	f7fc fa22 	bl	1315c <__cyg_profile_func_exit>
   16d18:	4623      	mov	r3, r4
  }
   16d1a:	4618      	mov	r0, r3
   16d1c:	b003      	add	sp, #12
   16d1e:	bd30      	pop	{r4, r5, pc}
   16d20:	00016ce1 	.word	0x00016ce1
   16d24:	00019050 	.word	0x00019050

00016d28 <Sd::GetCrc7(unsigned char*, unsigned char)>:

  // Returns the CRC-7 for a message of "length" bytes
  uint8_t GetCrc7(uint8_t * message, uint8_t length) override
   16d28:	b530      	push	{r4, r5, lr}
   16d2a:	b087      	sub	sp, #28
   16d2c:	4675      	mov	r5, lr
   16d2e:	9003      	str	r0, [sp, #12]
   16d30:	9102      	str	r1, [sp, #8]
   16d32:	4613      	mov	r3, r2
   16d34:	f88d 3007 	strb.w	r3, [sp, #7]
   16d38:	462b      	mov	r3, r5
   16d3a:	4619      	mov	r1, r3
   16d3c:	4815      	ldr	r0, [pc, #84]	; (16d94 <Sd::GetCrc7(unsigned char*, unsigned char)+0x6c>)
   16d3e:	f7fc f9f9 	bl	13134 <__cyg_profile_func_enter>
  {
    uint8_t crc = 0;
   16d42:	2300      	movs	r3, #0
   16d44:	f88d 3017 	strb.w	r3, [sp, #23]
    for (int i = 0; i < length; i++)
   16d48:	2300      	movs	r3, #0
   16d4a:	9304      	str	r3, [sp, #16]
   16d4c:	f89d 3007 	ldrb.w	r3, [sp, #7]
   16d50:	9a04      	ldr	r2, [sp, #16]
   16d52:	429a      	cmp	r2, r3
   16d54:	da12      	bge.n	16d7c <Sd::GetCrc7(unsigned char*, unsigned char)+0x54>
    {
      crc = Crc7Add(crc, message[i]);
   16d56:	9b03      	ldr	r3, [sp, #12]
   16d58:	681b      	ldr	r3, [r3, #0]
   16d5a:	3318      	adds	r3, #24
   16d5c:	681b      	ldr	r3, [r3, #0]
   16d5e:	9a04      	ldr	r2, [sp, #16]
   16d60:	9902      	ldr	r1, [sp, #8]
   16d62:	440a      	add	r2, r1
   16d64:	7812      	ldrb	r2, [r2, #0]
   16d66:	f89d 1017 	ldrb.w	r1, [sp, #23]
   16d6a:	9803      	ldr	r0, [sp, #12]
   16d6c:	4798      	blx	r3
   16d6e:	4603      	mov	r3, r0
   16d70:	f88d 3017 	strb.w	r3, [sp, #23]
    for (int i = 0; i < length; i++)
   16d74:	9b04      	ldr	r3, [sp, #16]
   16d76:	3301      	adds	r3, #1
   16d78:	9304      	str	r3, [sp, #16]
   16d7a:	e7e7      	b.n	16d4c <Sd::GetCrc7(unsigned char*, unsigned char)+0x24>
    }
    return crc;
   16d7c:	f89d 4017 	ldrb.w	r4, [sp, #23]
   16d80:	462b      	mov	r3, r5
   16d82:	4619      	mov	r1, r3
   16d84:	4803      	ldr	r0, [pc, #12]	; (16d94 <Sd::GetCrc7(unsigned char*, unsigned char)+0x6c>)
   16d86:	f7fc f9e9 	bl	1315c <__cyg_profile_func_exit>
   16d8a:	4623      	mov	r3, r4
  }
   16d8c:	4618      	mov	r0, r3
   16d8e:	b007      	add	sp, #28
   16d90:	bd30      	pop	{r4, r5, pc}
   16d92:	bf00      	nop
   16d94:	00016d29 	.word	0x00016d29

00016d98 <Sd::GetCrc16(unsigned char*, unsigned short)>:

  // Returns CCITT CRC-16 for a message of "length" bytes
  uint16_t GetCrc16(uint8_t * message, uint16_t length) override
   16d98:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
   16d9c:	b08c      	sub	sp, #48	; 0x30
   16d9e:	4677      	mov	r7, lr
   16da0:	9003      	str	r0, [sp, #12]
   16da2:	9102      	str	r1, [sp, #8]
   16da4:	4613      	mov	r3, r2
   16da6:	f8ad 3006 	strh.w	r3, [sp, #6]
   16daa:	463b      	mov	r3, r7
   16dac:	4619      	mov	r1, r3
   16dae:	4837      	ldr	r0, [pc, #220]	; (16e8c <Sd::GetCrc16(unsigned char*, unsigned short)+0xf4>)
   16db0:	f7fc f9c0 	bl	13134 <__cyg_profile_func_enter>
  {
    uint64_t crc = 0x0000;
   16db4:	f04f 0300 	mov.w	r3, #0
   16db8:	f04f 0400 	mov.w	r4, #0
   16dbc:	e9cd 340a 	strd	r3, r4, [sp, #40]	; 0x28
    uint64_t temp;
    uint64_t final_value = 0;
   16dc0:	f04f 0300 	mov.w	r3, #0
   16dc4:	f04f 0400 	mov.w	r4, #0
   16dc8:	e9cd 3406 	strd	r3, r4, [sp, #24]

    for (uint64_t count = 0; count < length; ++count)
   16dcc:	f04f 0300 	mov.w	r3, #0
   16dd0:	f04f 0400 	mov.w	r4, #0
   16dd4:	e9cd 3408 	strd	r3, r4, [sp, #32]
   16dd8:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   16ddc:	f04f 0400 	mov.w	r4, #0
   16de0:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
   16de4:	42a2      	cmp	r2, r4
   16de6:	bf08      	it	eq
   16de8:	4299      	cmpeq	r1, r3
   16dea:	d23f      	bcs.n	16e6c <Sd::GetCrc16(unsigned char*, unsigned short)+0xd4>
    {
      temp = (*message++ ^ (crc >> 8)) & 0xff;
   16dec:	9b02      	ldr	r3, [sp, #8]
   16dee:	1c5a      	adds	r2, r3, #1
   16df0:	9202      	str	r2, [sp, #8]
   16df2:	781b      	ldrb	r3, [r3, #0]
   16df4:	b2dd      	uxtb	r5, r3
   16df6:	f04f 0600 	mov.w	r6, #0
   16dfa:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
   16dfe:	f04f 0300 	mov.w	r3, #0
   16e02:	f04f 0400 	mov.w	r4, #0
   16e06:	0a0b      	lsrs	r3, r1, #8
   16e08:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
   16e0c:	0a14      	lsrs	r4, r2, #8
   16e0e:	ea83 0b05 	eor.w	fp, r3, r5
   16e12:	ea84 0c06 	eor.w	ip, r4, r6
   16e16:	f04f 01ff 	mov.w	r1, #255	; 0xff
   16e1a:	f04f 0200 	mov.w	r2, #0
   16e1e:	ea0b 0301 	and.w	r3, fp, r1
   16e22:	ea0c 0402 	and.w	r4, ip, r2
   16e26:	e9cd 3404 	strd	r3, r4, [sp, #16]
      crc  = kCrcTable16.crc_table[temp] ^ (crc << 8);
   16e2a:	4a19      	ldr	r2, [pc, #100]	; (16e90 <Sd::GetCrc16(unsigned char*, unsigned short)+0xf8>)
   16e2c:	9b04      	ldr	r3, [sp, #16]
   16e2e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
   16e32:	b29d      	uxth	r5, r3
   16e34:	f04f 0600 	mov.w	r6, #0
   16e38:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
   16e3c:	f04f 0b00 	mov.w	fp, #0
   16e40:	f04f 0c00 	mov.w	ip, #0
   16e44:	ea4f 2c02 	mov.w	ip, r2, lsl #8
   16e48:	ea4c 6c11 	orr.w	ip, ip, r1, lsr #24
   16e4c:	ea4f 2b01 	mov.w	fp, r1, lsl #8
   16e50:	ea8b 0305 	eor.w	r3, fp, r5
   16e54:	ea8c 0406 	eor.w	r4, ip, r6
   16e58:	e9cd 340a 	strd	r3, r4, [sp, #40]	; 0x28
    for (uint64_t count = 0; count < length; ++count)
   16e5c:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   16e60:	1c59      	adds	r1, r3, #1
   16e62:	f144 0200 	adc.w	r2, r4, #0
   16e66:	e9cd 1208 	strd	r1, r2, [sp, #32]
   16e6a:	e7b5      	b.n	16dd8 <Sd::GetCrc16(unsigned char*, unsigned short)+0x40>
    }

    return static_cast<uint16_t>(crc ^ final_value);
   16e6c:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
   16e70:	f8bd 3018 	ldrh.w	r3, [sp, #24]
   16e74:	4053      	eors	r3, r2
   16e76:	b29c      	uxth	r4, r3
   16e78:	463b      	mov	r3, r7
   16e7a:	4619      	mov	r1, r3
   16e7c:	4803      	ldr	r0, [pc, #12]	; (16e8c <Sd::GetCrc16(unsigned char*, unsigned short)+0xf4>)
   16e7e:	f7fc f96d 	bl	1315c <__cyg_profile_func_exit>
   16e82:	4623      	mov	r3, r4
  }
   16e84:	4618      	mov	r0, r3
   16e86:	b00c      	add	sp, #48	; 0x30
   16e88:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
   16e8c:	00016d99 	.word	0x00016d99
   16e90:	00019150 	.word	0x00019150

00016e94 <unsigned long bit::Set<unsigned long>(unsigned long, unsigned long)>:
constexpr T Set(T target, uint32_t position)
   16e94:	b530      	push	{r4, r5, lr}
   16e96:	b083      	sub	sp, #12
   16e98:	4675      	mov	r5, lr
   16e9a:	9001      	str	r0, [sp, #4]
   16e9c:	9100      	str	r1, [sp, #0]
   16e9e:	462b      	mov	r3, r5
   16ea0:	4619      	mov	r1, r3
   16ea2:	480a      	ldr	r0, [pc, #40]	; (16ecc <unsigned long bit::Set<unsigned long>(unsigned long, unsigned long)+0x38>)
   16ea4:	f7fc f946 	bl	13134 <__cyg_profile_func_enter>
  return target | (1 << position);
   16ea8:	2201      	movs	r2, #1
   16eaa:	9b00      	ldr	r3, [sp, #0]
   16eac:	fa02 f303 	lsl.w	r3, r2, r3
   16eb0:	461a      	mov	r2, r3
   16eb2:	9b01      	ldr	r3, [sp, #4]
   16eb4:	ea42 0403 	orr.w	r4, r2, r3
   16eb8:	462b      	mov	r3, r5
   16eba:	4619      	mov	r1, r3
   16ebc:	4803      	ldr	r0, [pc, #12]	; (16ecc <unsigned long bit::Set<unsigned long>(unsigned long, unsigned long)+0x38>)
   16ebe:	f7fc f94d 	bl	1315c <__cyg_profile_func_exit>
   16ec2:	4623      	mov	r3, r4
}
   16ec4:	4618      	mov	r0, r3
   16ec6:	b003      	add	sp, #12
   16ec8:	bd30      	pop	{r4, r5, pc}
   16eca:	bf00      	nop
   16ecc:	00016e95 	.word	0x00016e95

00016ed0 <bool bit::Read<unsigned long>(unsigned long, unsigned long)>:
[[gnu::always_inline]][[nodiscard]] constexpr bool Read(T target,
   16ed0:	b530      	push	{r4, r5, lr}
   16ed2:	b083      	sub	sp, #12
   16ed4:	4675      	mov	r5, lr
   16ed6:	9001      	str	r0, [sp, #4]
   16ed8:	9100      	str	r1, [sp, #0]
   16eda:	462b      	mov	r3, r5
   16edc:	4619      	mov	r1, r3
   16ede:	480c      	ldr	r0, [pc, #48]	; (16f10 <bool bit::Read<unsigned long>(unsigned long, unsigned long)+0x40>)
   16ee0:	f7fc f928 	bl	13134 <__cyg_profile_func_enter>
  return static_cast<bool>(target & (1 << position));
   16ee4:	2201      	movs	r2, #1
   16ee6:	9b00      	ldr	r3, [sp, #0]
   16ee8:	fa02 f303 	lsl.w	r3, r2, r3
   16eec:	461a      	mov	r2, r3
   16eee:	9b01      	ldr	r3, [sp, #4]
   16ef0:	4013      	ands	r3, r2
   16ef2:	2b00      	cmp	r3, #0
   16ef4:	bf14      	ite	ne
   16ef6:	2301      	movne	r3, #1
   16ef8:	2300      	moveq	r3, #0
   16efa:	b2dc      	uxtb	r4, r3
   16efc:	462b      	mov	r3, r5
   16efe:	4619      	mov	r1, r3
   16f00:	4803      	ldr	r0, [pc, #12]	; (16f10 <bool bit::Read<unsigned long>(unsigned long, unsigned long)+0x40>)
   16f02:	f7fc f92b 	bl	1315c <__cyg_profile_func_exit>
   16f06:	4623      	mov	r3, r4
}
   16f08:	4618      	mov	r0, r3
   16f0a:	b003      	add	sp, #12
   16f0c:	bd30      	pop	{r4, r5, pc}
   16f0e:	bf00      	nop
   16f10:	00016ed1 	.word	0x00016ed1

00016f14 <unsigned long bit::Insert<unsigned long, unsigned char>(unsigned long, unsigned char, unsigned long, unsigned long)>:
constexpr T Insert(T target, U value, uint32_t position, uint32_t width = 1)
   16f14:	b530      	push	{r4, r5, lr}
   16f16:	b089      	sub	sp, #36	; 0x24
   16f18:	4675      	mov	r5, lr
   16f1a:	9003      	str	r0, [sp, #12]
   16f1c:	9201      	str	r2, [sp, #4]
   16f1e:	9300      	str	r3, [sp, #0]
   16f20:	460b      	mov	r3, r1
   16f22:	f88d 300b 	strb.w	r3, [sp, #11]
   16f26:	462b      	mov	r3, r5
   16f28:	4619      	mov	r1, r3
   16f2a:	4816      	ldr	r0, [pc, #88]	; (16f84 <unsigned long bit::Insert<unsigned long, unsigned char>(unsigned long, unsigned char, unsigned long, unsigned long)+0x70>)
   16f2c:	f7fc f902 	bl	13134 <__cyg_profile_func_enter>
  constexpr UnsignedT kFieldOfOnes = GenerateFieldOfOnes<T>();
   16f30:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   16f34:	9307      	str	r3, [sp, #28]
  constexpr size_t kTargetWidth     = sizeof(T) * 8;
   16f36:	2320      	movs	r3, #32
   16f38:	9306      	str	r3, [sp, #24]
  UnsignedT mask   = kFieldOfOnes >> (kTargetWidth - width);
   16f3a:	9b00      	ldr	r3, [sp, #0]
   16f3c:	f1c3 0320 	rsb	r3, r3, #32
   16f40:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   16f44:	fa22 f303 	lsr.w	r3, r2, r3
   16f48:	9305      	str	r3, [sp, #20]
  target &= ~(mask << position);
   16f4a:	9a05      	ldr	r2, [sp, #20]
   16f4c:	9b01      	ldr	r3, [sp, #4]
   16f4e:	fa02 f303 	lsl.w	r3, r2, r3
   16f52:	43db      	mvns	r3, r3
   16f54:	9a03      	ldr	r2, [sp, #12]
   16f56:	4013      	ands	r3, r2
   16f58:	9303      	str	r3, [sp, #12]
  target |= (value & mask) << position;
   16f5a:	f89d 200b 	ldrb.w	r2, [sp, #11]
   16f5e:	9b05      	ldr	r3, [sp, #20]
   16f60:	401a      	ands	r2, r3
   16f62:	9b01      	ldr	r3, [sp, #4]
   16f64:	fa02 f303 	lsl.w	r3, r2, r3
   16f68:	9a03      	ldr	r2, [sp, #12]
   16f6a:	4313      	orrs	r3, r2
   16f6c:	9303      	str	r3, [sp, #12]
  return target;
   16f6e:	9c03      	ldr	r4, [sp, #12]
   16f70:	462b      	mov	r3, r5
   16f72:	4619      	mov	r1, r3
   16f74:	4803      	ldr	r0, [pc, #12]	; (16f84 <unsigned long bit::Insert<unsigned long, unsigned char>(unsigned long, unsigned char, unsigned long, unsigned long)+0x70>)
   16f76:	f7fc f8f1 	bl	1315c <__cyg_profile_func_exit>
   16f7a:	4623      	mov	r3, r4
}
   16f7c:	4618      	mov	r0, r3
   16f7e:	b009      	add	sp, #36	; 0x24
   16f80:	bd30      	pop	{r4, r5, pc}
   16f82:	bf00      	nop
   16f84:	00016f15 	.word	0x00016f15

00016f88 <unsigned long bit::Extract<unsigned long>(unsigned long, unsigned long, unsigned long)>:
constexpr T Extract(T target, uint32_t position, uint32_t width = 1)
   16f88:	b530      	push	{r4, r5, lr}
   16f8a:	b089      	sub	sp, #36	; 0x24
   16f8c:	4675      	mov	r5, lr
   16f8e:	9003      	str	r0, [sp, #12]
   16f90:	9102      	str	r1, [sp, #8]
   16f92:	9201      	str	r2, [sp, #4]
   16f94:	462b      	mov	r3, r5
   16f96:	4619      	mov	r1, r3
   16f98:	480f      	ldr	r0, [pc, #60]	; (16fd8 <unsigned long bit::Extract<unsigned long>(unsigned long, unsigned long, unsigned long)+0x50>)
   16f9a:	f7fc f8cb 	bl	13134 <__cyg_profile_func_enter>
  constexpr UnsignedT kFieldOfOnes = GenerateFieldOfOnes<T>();
   16f9e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   16fa2:	9307      	str	r3, [sp, #28]
  constexpr size_t kTargetWidth     = sizeof(T) * 8;
   16fa4:	2320      	movs	r3, #32
   16fa6:	9306      	str	r3, [sp, #24]
  UnsignedT mask   = kFieldOfOnes >> (kTargetWidth - width);
   16fa8:	9b01      	ldr	r3, [sp, #4]
   16faa:	f1c3 0320 	rsb	r3, r3, #32
   16fae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   16fb2:	fa22 f303 	lsr.w	r3, r2, r3
   16fb6:	9305      	str	r3, [sp, #20]
  return (target >> position) & mask;
   16fb8:	9a03      	ldr	r2, [sp, #12]
   16fba:	9b02      	ldr	r3, [sp, #8]
   16fbc:	40da      	lsrs	r2, r3
   16fbe:	9b05      	ldr	r3, [sp, #20]
   16fc0:	ea02 0403 	and.w	r4, r2, r3
   16fc4:	462b      	mov	r3, r5
   16fc6:	4619      	mov	r1, r3
   16fc8:	4803      	ldr	r0, [pc, #12]	; (16fd8 <unsigned long bit::Extract<unsigned long>(unsigned long, unsigned long, unsigned long)+0x50>)
   16fca:	f7fc f8c7 	bl	1315c <__cyg_profile_func_exit>
   16fce:	4623      	mov	r3, r4
}
   16fd0:	4618      	mov	r0, r3
   16fd2:	b009      	add	sp, #36	; 0x24
   16fd4:	bd30      	pop	{r4, r5, pc}
   16fd6:	bf00      	nop
   16fd8:	00016f89 	.word	0x00016f89

00016fdc <unsigned long bit::Insert<unsigned long, bool>(unsigned long, bool, unsigned long, unsigned long)>:
constexpr T Insert(T target, U value, uint32_t position, uint32_t width = 1)
   16fdc:	b530      	push	{r4, r5, lr}
   16fde:	b089      	sub	sp, #36	; 0x24
   16fe0:	4675      	mov	r5, lr
   16fe2:	9003      	str	r0, [sp, #12]
   16fe4:	9201      	str	r2, [sp, #4]
   16fe6:	9300      	str	r3, [sp, #0]
   16fe8:	460b      	mov	r3, r1
   16fea:	f88d 300b 	strb.w	r3, [sp, #11]
   16fee:	462b      	mov	r3, r5
   16ff0:	4619      	mov	r1, r3
   16ff2:	4816      	ldr	r0, [pc, #88]	; (1704c <unsigned long bit::Insert<unsigned long, bool>(unsigned long, bool, unsigned long, unsigned long)+0x70>)
   16ff4:	f7fc f89e 	bl	13134 <__cyg_profile_func_enter>
  constexpr UnsignedT kFieldOfOnes = GenerateFieldOfOnes<T>();
   16ff8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   16ffc:	9307      	str	r3, [sp, #28]
  constexpr size_t kTargetWidth     = sizeof(T) * 8;
   16ffe:	2320      	movs	r3, #32
   17000:	9306      	str	r3, [sp, #24]
  UnsignedT mask   = kFieldOfOnes >> (kTargetWidth - width);
   17002:	9b00      	ldr	r3, [sp, #0]
   17004:	f1c3 0320 	rsb	r3, r3, #32
   17008:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1700c:	fa22 f303 	lsr.w	r3, r2, r3
   17010:	9305      	str	r3, [sp, #20]
  target &= ~(mask << position);
   17012:	9a05      	ldr	r2, [sp, #20]
   17014:	9b01      	ldr	r3, [sp, #4]
   17016:	fa02 f303 	lsl.w	r3, r2, r3
   1701a:	43db      	mvns	r3, r3
   1701c:	9a03      	ldr	r2, [sp, #12]
   1701e:	4013      	ands	r3, r2
   17020:	9303      	str	r3, [sp, #12]
  target |= (value & mask) << position;
   17022:	f89d 200b 	ldrb.w	r2, [sp, #11]
   17026:	9b05      	ldr	r3, [sp, #20]
   17028:	401a      	ands	r2, r3
   1702a:	9b01      	ldr	r3, [sp, #4]
   1702c:	fa02 f303 	lsl.w	r3, r2, r3
   17030:	9a03      	ldr	r2, [sp, #12]
   17032:	4313      	orrs	r3, r2
   17034:	9303      	str	r3, [sp, #12]
  return target;
   17036:	9c03      	ldr	r4, [sp, #12]
   17038:	462b      	mov	r3, r5
   1703a:	4619      	mov	r1, r3
   1703c:	4803      	ldr	r0, [pc, #12]	; (1704c <unsigned long bit::Insert<unsigned long, bool>(unsigned long, bool, unsigned long, unsigned long)+0x70>)
   1703e:	f7fc f88d 	bl	1315c <__cyg_profile_func_exit>
   17042:	4623      	mov	r3, r4
}
   17044:	4618      	mov	r0, r3
   17046:	b009      	add	sp, #36	; 0x24
   17048:	bd30      	pop	{r4, r5, pc}
   1704a:	bf00      	nop
   1704c:	00016fdd 	.word	0x00016fdd

00017050 <__static_initialization_and_destruction_0(int, int)>:
extern "C" DRESULT disk_ioctl([[maybe_unused]] BYTE drive_number,
                              [[maybe_unused]] BYTE command,
                              [[maybe_unused]] void * buffer)
{
  return RES_PARERR;
}
   17050:	b530      	push	{r4, r5, lr}
   17052:	b085      	sub	sp, #20
   17054:	4674      	mov	r4, lr
   17056:	9003      	str	r0, [sp, #12]
   17058:	9102      	str	r1, [sp, #8]
   1705a:	4623      	mov	r3, r4
   1705c:	4619      	mov	r1, r3
   1705e:	480e      	ldr	r0, [pc, #56]	; (17098 <__static_initialization_and_destruction_0(int, int)+0x48>)
   17060:	f7fc f868 	bl	13134 <__cyg_profile_func_enter>
   17064:	9b03      	ldr	r3, [sp, #12]
   17066:	2b01      	cmp	r3, #1
   17068:	d10e      	bne.n	17088 <__static_initialization_and_destruction_0(int, int)+0x38>
   1706a:	9b02      	ldr	r3, [sp, #8]
   1706c:	f64f 72ff 	movw	r2, #65535	; 0xffff
   17070:	4293      	cmp	r3, r2
   17072:	d109      	bne.n	17088 <__static_initialization_and_destruction_0(int, int)+0x38>
Sd sd_card(Sd::DebugSdCard_t{});
   17074:	2306      	movs	r3, #6
   17076:	9301      	str	r3, [sp, #4]
   17078:	2300      	movs	r3, #0
   1707a:	9300      	str	r3, [sp, #0]
   1707c:	2308      	movs	r3, #8
   1707e:	2201      	movs	r2, #1
   17080:	4629      	mov	r1, r5
   17082:	4806      	ldr	r0, [pc, #24]	; (1709c <__static_initialization_and_destruction_0(int, int)+0x4c>)
   17084:	f7fe fdb8 	bl	15bf8 <Sd::Sd(Sd::DebugSdCard_t, unsigned char, unsigned char, unsigned char, unsigned char)>
   17088:	4623      	mov	r3, r4
   1708a:	4619      	mov	r1, r3
   1708c:	4802      	ldr	r0, [pc, #8]	; (17098 <__static_initialization_and_destruction_0(int, int)+0x48>)
   1708e:	f7fc f865 	bl	1315c <__cyg_profile_func_exit>
}
   17092:	bf00      	nop
   17094:	b005      	add	sp, #20
   17096:	bd30      	pop	{r4, r5, pc}
   17098:	00017051 	.word	0x00017051
   1709c:	10000560 	.word	0x10000560

000170a0 <_GLOBAL__sub_I_disk_status>:
   170a0:	b510      	push	{r4, lr}
   170a2:	4674      	mov	r4, lr
   170a4:	4623      	mov	r3, r4
   170a6:	4619      	mov	r1, r3
   170a8:	4806      	ldr	r0, [pc, #24]	; (170c4 <_GLOBAL__sub_I_disk_status+0x24>)
   170aa:	f7fc f843 	bl	13134 <__cyg_profile_func_enter>
   170ae:	f64f 71ff 	movw	r1, #65535	; 0xffff
   170b2:	2001      	movs	r0, #1
   170b4:	f7ff ffcc 	bl	17050 <__static_initialization_and_destruction_0(int, int)>
   170b8:	4623      	mov	r3, r4
   170ba:	4619      	mov	r1, r3
   170bc:	4801      	ldr	r0, [pc, #4]	; (170c4 <_GLOBAL__sub_I_disk_status+0x24>)
   170be:	f7fc f84d 	bl	1315c <__cyg_profile_func_exit>
   170c2:	bd10      	pop	{r4, pc}
   170c4:	000170a1 	.word	0x000170a1

000170c8 <__cxa_pure_virtual>:
   170c8:	b508      	push	{r3, lr}
   170ca:	f000 f80d 	bl	170e8 <std::terminate()>

000170ce <__cxxabiv1::__terminate(void (*)())>:
   170ce:	b508      	push	{r3, lr}
   170d0:	4780      	blx	r0
   170d2:	f000 fa0f 	bl	174f4 <abort>
   170d6:	Address 0x00000000000170d6 is out of bounds.


000170d8 <std::get_terminate()>:
   170d8:	4b02      	ldr	r3, [pc, #8]	; (170e4 <std::get_terminate()+0xc>)
   170da:	6818      	ldr	r0, [r3, #0]
   170dc:	f3bf 8f5b 	dmb	ish
   170e0:	4770      	bx	lr
   170e2:	bf00      	nop
   170e4:	100001d4 	.word	0x100001d4

000170e8 <std::terminate()>:
   170e8:	b508      	push	{r3, lr}
   170ea:	f7ff fff5 	bl	170d8 <std::get_terminate()>
   170ee:	f7ff ffee 	bl	170ce <__cxxabiv1::__terminate(void (*)())>
   170f2:	Address 0x00000000000170f2 is out of bounds.


000170f4 <roundf>:
   170f4:	b082      	sub	sp, #8
   170f6:	ed8d 0a01 	vstr	s0, [sp, #4]
   170fa:	9901      	ldr	r1, [sp, #4]
   170fc:	f3c1 53c7 	ubfx	r3, r1, #23, #8
   17100:	f1a3 027f 	sub.w	r2, r3, #127	; 0x7f
   17104:	2a16      	cmp	r2, #22
   17106:	dc0c      	bgt.n	17122 <roundf+0x2e>
   17108:	2a00      	cmp	r2, #0
   1710a:	db10      	blt.n	1712e <roundf+0x3a>
   1710c:	4810      	ldr	r0, [pc, #64]	; (17150 <roundf+0x5c>)
   1710e:	4110      	asrs	r0, r2
   17110:	4201      	tst	r1, r0
   17112:	d008      	beq.n	17126 <roundf+0x32>
   17114:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   17118:	4113      	asrs	r3, r2
   1711a:	440b      	add	r3, r1
   1711c:	ea23 0300 	bic.w	r3, r3, r0
   17120:	e00b      	b.n	1713a <roundf+0x46>
   17122:	2a80      	cmp	r2, #128	; 0x80
   17124:	d00d      	beq.n	17142 <roundf+0x4e>
   17126:	ed9d 0a01 	vldr	s0, [sp, #4]
   1712a:	b002      	add	sp, #8
   1712c:	4770      	bx	lr
   1712e:	3201      	adds	r2, #1
   17130:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
   17134:	d101      	bne.n	1713a <roundf+0x46>
   17136:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
   1713a:	ee00 3a10 	vmov	s0, r3
   1713e:	b002      	add	sp, #8
   17140:	4770      	bx	lr
   17142:	eddd 7a01 	vldr	s15, [sp, #4]
   17146:	ee37 0aa7 	vadd.f32	s0, s15, s15
   1714a:	b002      	add	sp, #8
   1714c:	4770      	bx	lr
   1714e:	bf00      	nop
   17150:	007fffff 	.word	0x007fffff

00017154 <__aeabi_d2f>:
   17154:	ea4f 0241 	mov.w	r2, r1, lsl #1
   17158:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   1715c:	bf24      	itt	cs
   1715e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   17162:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   17166:	d90d      	bls.n	17184 <__aeabi_d2f+0x30>
   17168:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   1716c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   17170:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   17174:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   17178:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   1717c:	bf08      	it	eq
   1717e:	f020 0001 	biceq.w	r0, r0, #1
   17182:	4770      	bx	lr
   17184:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   17188:	d121      	bne.n	171ce <__aeabi_d2f+0x7a>
   1718a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   1718e:	bfbc      	itt	lt
   17190:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   17194:	4770      	bxlt	lr
   17196:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   1719a:	ea4f 5252 	mov.w	r2, r2, lsr #21
   1719e:	f1c2 0218 	rsb	r2, r2, #24
   171a2:	f1c2 0c20 	rsb	ip, r2, #32
   171a6:	fa10 f30c 	lsls.w	r3, r0, ip
   171aa:	fa20 f002 	lsr.w	r0, r0, r2
   171ae:	bf18      	it	ne
   171b0:	f040 0001 	orrne.w	r0, r0, #1
   171b4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   171b8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   171bc:	fa03 fc0c 	lsl.w	ip, r3, ip
   171c0:	ea40 000c 	orr.w	r0, r0, ip
   171c4:	fa23 f302 	lsr.w	r3, r3, r2
   171c8:	ea4f 0343 	mov.w	r3, r3, lsl #1
   171cc:	e7cc      	b.n	17168 <__aeabi_d2f+0x14>
   171ce:	ea7f 5362 	mvns.w	r3, r2, asr #21
   171d2:	d107      	bne.n	171e4 <__aeabi_d2f+0x90>
   171d4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   171d8:	bf1e      	ittt	ne
   171da:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   171de:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   171e2:	4770      	bxne	lr
   171e4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   171e8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   171ec:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   171f0:	4770      	bx	lr
   171f2:	bf00      	nop

000171f4 <__aeabi_uldivmod>:
   171f4:	b953      	cbnz	r3, 1720c <__aeabi_uldivmod+0x18>
   171f6:	b94a      	cbnz	r2, 1720c <__aeabi_uldivmod+0x18>
   171f8:	2900      	cmp	r1, #0
   171fa:	bf08      	it	eq
   171fc:	2800      	cmpeq	r0, #0
   171fe:	bf1c      	itt	ne
   17200:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
   17204:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   17208:	f000 b972 	b.w	174f0 <__aeabi_idiv0>
   1720c:	f1ad 0c08 	sub.w	ip, sp, #8
   17210:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   17214:	f000 f806 	bl	17224 <__udivmoddi4>
   17218:	f8dd e004 	ldr.w	lr, [sp, #4]
   1721c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   17220:	b004      	add	sp, #16
   17222:	4770      	bx	lr

00017224 <__udivmoddi4>:
   17224:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   17228:	9e08      	ldr	r6, [sp, #32]
   1722a:	4604      	mov	r4, r0
   1722c:	4688      	mov	r8, r1
   1722e:	2b00      	cmp	r3, #0
   17230:	d14b      	bne.n	172ca <__udivmoddi4+0xa6>
   17232:	428a      	cmp	r2, r1
   17234:	4615      	mov	r5, r2
   17236:	d967      	bls.n	17308 <__udivmoddi4+0xe4>
   17238:	fab2 f282 	clz	r2, r2
   1723c:	b14a      	cbz	r2, 17252 <__udivmoddi4+0x2e>
   1723e:	f1c2 0720 	rsb	r7, r2, #32
   17242:	fa01 f302 	lsl.w	r3, r1, r2
   17246:	fa20 f707 	lsr.w	r7, r0, r7
   1724a:	4095      	lsls	r5, r2
   1724c:	ea47 0803 	orr.w	r8, r7, r3
   17250:	4094      	lsls	r4, r2
   17252:	ea4f 4e15 	mov.w	lr, r5, lsr #16
   17256:	0c23      	lsrs	r3, r4, #16
   17258:	fbb8 f7fe 	udiv	r7, r8, lr
   1725c:	fa1f fc85 	uxth.w	ip, r5
   17260:	fb0e 8817 	mls	r8, lr, r7, r8
   17264:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
   17268:	fb07 f10c 	mul.w	r1, r7, ip
   1726c:	4299      	cmp	r1, r3
   1726e:	d909      	bls.n	17284 <__udivmoddi4+0x60>
   17270:	18eb      	adds	r3, r5, r3
   17272:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
   17276:	f080 811b 	bcs.w	174b0 <__udivmoddi4+0x28c>
   1727a:	4299      	cmp	r1, r3
   1727c:	f240 8118 	bls.w	174b0 <__udivmoddi4+0x28c>
   17280:	3f02      	subs	r7, #2
   17282:	442b      	add	r3, r5
   17284:	1a5b      	subs	r3, r3, r1
   17286:	b2a4      	uxth	r4, r4
   17288:	fbb3 f0fe 	udiv	r0, r3, lr
   1728c:	fb0e 3310 	mls	r3, lr, r0, r3
   17290:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
   17294:	fb00 fc0c 	mul.w	ip, r0, ip
   17298:	45a4      	cmp	ip, r4
   1729a:	d909      	bls.n	172b0 <__udivmoddi4+0x8c>
   1729c:	192c      	adds	r4, r5, r4
   1729e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   172a2:	f080 8107 	bcs.w	174b4 <__udivmoddi4+0x290>
   172a6:	45a4      	cmp	ip, r4
   172a8:	f240 8104 	bls.w	174b4 <__udivmoddi4+0x290>
   172ac:	3802      	subs	r0, #2
   172ae:	442c      	add	r4, r5
   172b0:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
   172b4:	eba4 040c 	sub.w	r4, r4, ip
   172b8:	2700      	movs	r7, #0
   172ba:	b11e      	cbz	r6, 172c4 <__udivmoddi4+0xa0>
   172bc:	40d4      	lsrs	r4, r2
   172be:	2300      	movs	r3, #0
   172c0:	e9c6 4300 	strd	r4, r3, [r6]
   172c4:	4639      	mov	r1, r7
   172c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   172ca:	428b      	cmp	r3, r1
   172cc:	d909      	bls.n	172e2 <__udivmoddi4+0xbe>
   172ce:	2e00      	cmp	r6, #0
   172d0:	f000 80eb 	beq.w	174aa <__udivmoddi4+0x286>
   172d4:	2700      	movs	r7, #0
   172d6:	e9c6 0100 	strd	r0, r1, [r6]
   172da:	4638      	mov	r0, r7
   172dc:	4639      	mov	r1, r7
   172de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   172e2:	fab3 f783 	clz	r7, r3
   172e6:	2f00      	cmp	r7, #0
   172e8:	d147      	bne.n	1737a <__udivmoddi4+0x156>
   172ea:	428b      	cmp	r3, r1
   172ec:	d302      	bcc.n	172f4 <__udivmoddi4+0xd0>
   172ee:	4282      	cmp	r2, r0
   172f0:	f200 80fa 	bhi.w	174e8 <__udivmoddi4+0x2c4>
   172f4:	1a84      	subs	r4, r0, r2
   172f6:	eb61 0303 	sbc.w	r3, r1, r3
   172fa:	2001      	movs	r0, #1
   172fc:	4698      	mov	r8, r3
   172fe:	2e00      	cmp	r6, #0
   17300:	d0e0      	beq.n	172c4 <__udivmoddi4+0xa0>
   17302:	e9c6 4800 	strd	r4, r8, [r6]
   17306:	e7dd      	b.n	172c4 <__udivmoddi4+0xa0>
   17308:	b902      	cbnz	r2, 1730c <__udivmoddi4+0xe8>
   1730a:	deff      	udf	#255	; 0xff
   1730c:	fab2 f282 	clz	r2, r2
   17310:	2a00      	cmp	r2, #0
   17312:	f040 808f 	bne.w	17434 <__udivmoddi4+0x210>
   17316:	1b49      	subs	r1, r1, r5
   17318:	ea4f 4e15 	mov.w	lr, r5, lsr #16
   1731c:	fa1f f885 	uxth.w	r8, r5
   17320:	2701      	movs	r7, #1
   17322:	fbb1 fcfe 	udiv	ip, r1, lr
   17326:	0c23      	lsrs	r3, r4, #16
   17328:	fb0e 111c 	mls	r1, lr, ip, r1
   1732c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   17330:	fb08 f10c 	mul.w	r1, r8, ip
   17334:	4299      	cmp	r1, r3
   17336:	d907      	bls.n	17348 <__udivmoddi4+0x124>
   17338:	18eb      	adds	r3, r5, r3
   1733a:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
   1733e:	d202      	bcs.n	17346 <__udivmoddi4+0x122>
   17340:	4299      	cmp	r1, r3
   17342:	f200 80cd 	bhi.w	174e0 <__udivmoddi4+0x2bc>
   17346:	4684      	mov	ip, r0
   17348:	1a59      	subs	r1, r3, r1
   1734a:	b2a3      	uxth	r3, r4
   1734c:	fbb1 f0fe 	udiv	r0, r1, lr
   17350:	fb0e 1410 	mls	r4, lr, r0, r1
   17354:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
   17358:	fb08 f800 	mul.w	r8, r8, r0
   1735c:	45a0      	cmp	r8, r4
   1735e:	d907      	bls.n	17370 <__udivmoddi4+0x14c>
   17360:	192c      	adds	r4, r5, r4
   17362:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   17366:	d202      	bcs.n	1736e <__udivmoddi4+0x14a>
   17368:	45a0      	cmp	r8, r4
   1736a:	f200 80b6 	bhi.w	174da <__udivmoddi4+0x2b6>
   1736e:	4618      	mov	r0, r3
   17370:	eba4 0408 	sub.w	r4, r4, r8
   17374:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
   17378:	e79f      	b.n	172ba <__udivmoddi4+0x96>
   1737a:	f1c7 0c20 	rsb	ip, r7, #32
   1737e:	40bb      	lsls	r3, r7
   17380:	fa22 fe0c 	lsr.w	lr, r2, ip
   17384:	ea4e 0e03 	orr.w	lr, lr, r3
   17388:	fa01 f407 	lsl.w	r4, r1, r7
   1738c:	fa20 f50c 	lsr.w	r5, r0, ip
   17390:	fa21 f30c 	lsr.w	r3, r1, ip
   17394:	ea4f 481e 	mov.w	r8, lr, lsr #16
   17398:	4325      	orrs	r5, r4
   1739a:	fbb3 f9f8 	udiv	r9, r3, r8
   1739e:	0c2c      	lsrs	r4, r5, #16
   173a0:	fb08 3319 	mls	r3, r8, r9, r3
   173a4:	fa1f fa8e 	uxth.w	sl, lr
   173a8:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
   173ac:	fb09 f40a 	mul.w	r4, r9, sl
   173b0:	429c      	cmp	r4, r3
   173b2:	fa02 f207 	lsl.w	r2, r2, r7
   173b6:	fa00 f107 	lsl.w	r1, r0, r7
   173ba:	d90b      	bls.n	173d4 <__udivmoddi4+0x1b0>
   173bc:	eb1e 0303 	adds.w	r3, lr, r3
   173c0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
   173c4:	f080 8087 	bcs.w	174d6 <__udivmoddi4+0x2b2>
   173c8:	429c      	cmp	r4, r3
   173ca:	f240 8084 	bls.w	174d6 <__udivmoddi4+0x2b2>
   173ce:	f1a9 0902 	sub.w	r9, r9, #2
   173d2:	4473      	add	r3, lr
   173d4:	1b1b      	subs	r3, r3, r4
   173d6:	b2ad      	uxth	r5, r5
   173d8:	fbb3 f0f8 	udiv	r0, r3, r8
   173dc:	fb08 3310 	mls	r3, r8, r0, r3
   173e0:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
   173e4:	fb00 fa0a 	mul.w	sl, r0, sl
   173e8:	45a2      	cmp	sl, r4
   173ea:	d908      	bls.n	173fe <__udivmoddi4+0x1da>
   173ec:	eb1e 0404 	adds.w	r4, lr, r4
   173f0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   173f4:	d26b      	bcs.n	174ce <__udivmoddi4+0x2aa>
   173f6:	45a2      	cmp	sl, r4
   173f8:	d969      	bls.n	174ce <__udivmoddi4+0x2aa>
   173fa:	3802      	subs	r0, #2
   173fc:	4474      	add	r4, lr
   173fe:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   17402:	fba0 8902 	umull	r8, r9, r0, r2
   17406:	eba4 040a 	sub.w	r4, r4, sl
   1740a:	454c      	cmp	r4, r9
   1740c:	46c2      	mov	sl, r8
   1740e:	464b      	mov	r3, r9
   17410:	d354      	bcc.n	174bc <__udivmoddi4+0x298>
   17412:	d051      	beq.n	174b8 <__udivmoddi4+0x294>
   17414:	2e00      	cmp	r6, #0
   17416:	d069      	beq.n	174ec <__udivmoddi4+0x2c8>
   17418:	ebb1 050a 	subs.w	r5, r1, sl
   1741c:	eb64 0403 	sbc.w	r4, r4, r3
   17420:	fa04 fc0c 	lsl.w	ip, r4, ip
   17424:	40fd      	lsrs	r5, r7
   17426:	40fc      	lsrs	r4, r7
   17428:	ea4c 0505 	orr.w	r5, ip, r5
   1742c:	e9c6 5400 	strd	r5, r4, [r6]
   17430:	2700      	movs	r7, #0
   17432:	e747      	b.n	172c4 <__udivmoddi4+0xa0>
   17434:	f1c2 0320 	rsb	r3, r2, #32
   17438:	fa20 f703 	lsr.w	r7, r0, r3
   1743c:	4095      	lsls	r5, r2
   1743e:	fa01 f002 	lsl.w	r0, r1, r2
   17442:	fa21 f303 	lsr.w	r3, r1, r3
   17446:	ea4f 4e15 	mov.w	lr, r5, lsr #16
   1744a:	4338      	orrs	r0, r7
   1744c:	0c01      	lsrs	r1, r0, #16
   1744e:	fbb3 f7fe 	udiv	r7, r3, lr
   17452:	fa1f f885 	uxth.w	r8, r5
   17456:	fb0e 3317 	mls	r3, lr, r7, r3
   1745a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   1745e:	fb07 f308 	mul.w	r3, r7, r8
   17462:	428b      	cmp	r3, r1
   17464:	fa04 f402 	lsl.w	r4, r4, r2
   17468:	d907      	bls.n	1747a <__udivmoddi4+0x256>
   1746a:	1869      	adds	r1, r5, r1
   1746c:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
   17470:	d22f      	bcs.n	174d2 <__udivmoddi4+0x2ae>
   17472:	428b      	cmp	r3, r1
   17474:	d92d      	bls.n	174d2 <__udivmoddi4+0x2ae>
   17476:	3f02      	subs	r7, #2
   17478:	4429      	add	r1, r5
   1747a:	1acb      	subs	r3, r1, r3
   1747c:	b281      	uxth	r1, r0
   1747e:	fbb3 f0fe 	udiv	r0, r3, lr
   17482:	fb0e 3310 	mls	r3, lr, r0, r3
   17486:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   1748a:	fb00 f308 	mul.w	r3, r0, r8
   1748e:	428b      	cmp	r3, r1
   17490:	d907      	bls.n	174a2 <__udivmoddi4+0x27e>
   17492:	1869      	adds	r1, r5, r1
   17494:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
   17498:	d217      	bcs.n	174ca <__udivmoddi4+0x2a6>
   1749a:	428b      	cmp	r3, r1
   1749c:	d915      	bls.n	174ca <__udivmoddi4+0x2a6>
   1749e:	3802      	subs	r0, #2
   174a0:	4429      	add	r1, r5
   174a2:	1ac9      	subs	r1, r1, r3
   174a4:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
   174a8:	e73b      	b.n	17322 <__udivmoddi4+0xfe>
   174aa:	4637      	mov	r7, r6
   174ac:	4630      	mov	r0, r6
   174ae:	e709      	b.n	172c4 <__udivmoddi4+0xa0>
   174b0:	4607      	mov	r7, r0
   174b2:	e6e7      	b.n	17284 <__udivmoddi4+0x60>
   174b4:	4618      	mov	r0, r3
   174b6:	e6fb      	b.n	172b0 <__udivmoddi4+0x8c>
   174b8:	4541      	cmp	r1, r8
   174ba:	d2ab      	bcs.n	17414 <__udivmoddi4+0x1f0>
   174bc:	ebb8 0a02 	subs.w	sl, r8, r2
   174c0:	eb69 020e 	sbc.w	r2, r9, lr
   174c4:	3801      	subs	r0, #1
   174c6:	4613      	mov	r3, r2
   174c8:	e7a4      	b.n	17414 <__udivmoddi4+0x1f0>
   174ca:	4660      	mov	r0, ip
   174cc:	e7e9      	b.n	174a2 <__udivmoddi4+0x27e>
   174ce:	4618      	mov	r0, r3
   174d0:	e795      	b.n	173fe <__udivmoddi4+0x1da>
   174d2:	4667      	mov	r7, ip
   174d4:	e7d1      	b.n	1747a <__udivmoddi4+0x256>
   174d6:	4681      	mov	r9, r0
   174d8:	e77c      	b.n	173d4 <__udivmoddi4+0x1b0>
   174da:	3802      	subs	r0, #2
   174dc:	442c      	add	r4, r5
   174de:	e747      	b.n	17370 <__udivmoddi4+0x14c>
   174e0:	f1ac 0c02 	sub.w	ip, ip, #2
   174e4:	442b      	add	r3, r5
   174e6:	e72f      	b.n	17348 <__udivmoddi4+0x124>
   174e8:	4638      	mov	r0, r7
   174ea:	e708      	b.n	172fe <__udivmoddi4+0xda>
   174ec:	4637      	mov	r7, r6
   174ee:	e6e9      	b.n	172c4 <__udivmoddi4+0xa0>

000174f0 <__aeabi_idiv0>:
   174f0:	4770      	bx	lr
   174f2:	bf00      	nop

000174f4 <abort>:
   174f4:	b508      	push	{r3, lr}
   174f6:	2006      	movs	r0, #6
   174f8:	f000 f858 	bl	175ac <raise>
   174fc:	2001      	movs	r0, #1
   174fe:	f7fb fd79 	bl	12ff4 <_exit>
   17502:	Address 0x0000000000017502 is out of bounds.


00017504 <__libc_init_array>:
   17504:	b570      	push	{r4, r5, r6, lr}
   17506:	4e0d      	ldr	r6, [pc, #52]	; (1753c <__libc_init_array+0x38>)
   17508:	4c0d      	ldr	r4, [pc, #52]	; (17540 <__libc_init_array+0x3c>)
   1750a:	1ba4      	subs	r4, r4, r6
   1750c:	10a4      	asrs	r4, r4, #2
   1750e:	2500      	movs	r5, #0
   17510:	42a5      	cmp	r5, r4
   17512:	d109      	bne.n	17528 <__libc_init_array+0x24>
   17514:	4e0b      	ldr	r6, [pc, #44]	; (17544 <__libc_init_array+0x40>)
   17516:	4c0c      	ldr	r4, [pc, #48]	; (17548 <__libc_init_array+0x44>)
   17518:	f7f8 fef2 	bl	10300 <_init>
   1751c:	1ba4      	subs	r4, r4, r6
   1751e:	10a4      	asrs	r4, r4, #2
   17520:	2500      	movs	r5, #0
   17522:	42a5      	cmp	r5, r4
   17524:	d105      	bne.n	17532 <__libc_init_array+0x2e>
   17526:	bd70      	pop	{r4, r5, r6, pc}
   17528:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   1752c:	4798      	blx	r3
   1752e:	3501      	adds	r5, #1
   17530:	e7ee      	b.n	17510 <__libc_init_array+0xc>
   17532:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   17536:	4798      	blx	r3
   17538:	3501      	adds	r5, #1
   1753a:	e7f2      	b.n	17522 <__libc_init_array+0x1e>
   1753c:	0001030c 	.word	0x0001030c
   17540:	0001030c 	.word	0x0001030c
   17544:	0001030c 	.word	0x0001030c
   17548:	0001031c 	.word	0x0001031c

0001754c <memset>:
   1754c:	4402      	add	r2, r0
   1754e:	4603      	mov	r3, r0
   17550:	4293      	cmp	r3, r2
   17552:	d100      	bne.n	17556 <memset+0xa>
   17554:	4770      	bx	lr
   17556:	f803 1b01 	strb.w	r1, [r3], #1
   1755a:	e7f9      	b.n	17550 <memset+0x4>

0001755c <_raise_r>:
   1755c:	291f      	cmp	r1, #31
   1755e:	b538      	push	{r3, r4, r5, lr}
   17560:	4604      	mov	r4, r0
   17562:	460d      	mov	r5, r1
   17564:	d904      	bls.n	17570 <_raise_r+0x14>
   17566:	2316      	movs	r3, #22
   17568:	6003      	str	r3, [r0, #0]
   1756a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1756e:	bd38      	pop	{r3, r4, r5, pc}
   17570:	6c42      	ldr	r2, [r0, #68]	; 0x44
   17572:	b112      	cbz	r2, 1757a <_raise_r+0x1e>
   17574:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
   17578:	b94b      	cbnz	r3, 1758e <_raise_r+0x32>
   1757a:	4620      	mov	r0, r4
   1757c:	f000 f830 	bl	175e0 <_getpid_r>
   17580:	462a      	mov	r2, r5
   17582:	4601      	mov	r1, r0
   17584:	4620      	mov	r0, r4
   17586:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1758a:	f000 b817 	b.w	175bc <_kill_r>
   1758e:	2b01      	cmp	r3, #1
   17590:	d00a      	beq.n	175a8 <_raise_r+0x4c>
   17592:	1c59      	adds	r1, r3, #1
   17594:	d103      	bne.n	1759e <_raise_r+0x42>
   17596:	2316      	movs	r3, #22
   17598:	6003      	str	r3, [r0, #0]
   1759a:	2001      	movs	r0, #1
   1759c:	e7e7      	b.n	1756e <_raise_r+0x12>
   1759e:	2400      	movs	r4, #0
   175a0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
   175a4:	4628      	mov	r0, r5
   175a6:	4798      	blx	r3
   175a8:	2000      	movs	r0, #0
   175aa:	e7e0      	b.n	1756e <_raise_r+0x12>

000175ac <raise>:
   175ac:	4b02      	ldr	r3, [pc, #8]	; (175b8 <raise+0xc>)
   175ae:	4601      	mov	r1, r0
   175b0:	6818      	ldr	r0, [r3, #0]
   175b2:	f7ff bfd3 	b.w	1755c <_raise_r>
   175b6:	bf00      	nop
   175b8:	100001d8 	.word	0x100001d8

000175bc <_kill_r>:
   175bc:	b538      	push	{r3, r4, r5, lr}
   175be:	4c07      	ldr	r4, [pc, #28]	; (175dc <_kill_r+0x20>)
   175c0:	2300      	movs	r3, #0
   175c2:	4605      	mov	r5, r0
   175c4:	4608      	mov	r0, r1
   175c6:	4611      	mov	r1, r2
   175c8:	6023      	str	r3, [r4, #0]
   175ca:	f7fb fd31 	bl	13030 <_kill>
   175ce:	1c43      	adds	r3, r0, #1
   175d0:	d102      	bne.n	175d8 <_kill_r+0x1c>
   175d2:	6823      	ldr	r3, [r4, #0]
   175d4:	b103      	cbz	r3, 175d8 <_kill_r+0x1c>
   175d6:	602b      	str	r3, [r5, #0]
   175d8:	bd38      	pop	{r3, r4, r5, pc}
   175da:	bf00      	nop
   175dc:	100005c8 	.word	0x100005c8

000175e0 <_getpid_r>:
   175e0:	f7fb bd14 	b.w	1300c <_getpid>

000175e4 <main::file>:
   175e4:	616d 6e69 632e 7070 ff00 ffff               main.cpp....

000175f0 <main::file>:
   175f0:	616d 6e69 632e 7070 ff00 ffff               main.cpp....

000175fc <main::file>:
   175fc:	616d 6e69 632e 7070 ff00 ffff               main.cpp....

00017608 <main::file>:
   17608:	616d 6e69 632e 7070 ff00 ffff 5b1b 3234     main.cpp.....[42
   17618:	206d 2020 4920 464e 1b4f 305b 393b 6d34     m    INFO.[0;94m
   17628:	253a 3a73 5b1b 3b30 3239 256d 3a73 5b1b     :%s:.[0;92m%s:.[
   17638:	3b30 3339 256d 3e64 1b20 305b 333b 6d37     0;93m%d> .[0;37m
   17648:	7453 7261 1b74 305b 0a6d 0000 5b1b 3234     Start.[0m....[42
   17658:	206d 2020 4920 464e 1b4f 305b 393b 6d34     m    INFO.[0;94m
   17668:	253a 3a73 5b1b 3b30 3239 256d 3a73 5b1b     :%s:.[0;92m%s:.[
   17678:	3b30 3339 256d 3e64 1b20 305b 333b 6d37     0;93m%d> .[0;37m
   17688:	7542 7474 6e6f 3120 7020 6572 7373 6465     Button 1 pressed
   17698:	1b21 305b 0a6d 0000 5b1b 3234 206d 2020     !.[0m....[42m   
   176a8:	4920 464e 1b4f 305b 393b 6d34 253a 3a73      INFO.[0;94m:%s:
   176b8:	5b1b 3b30 3239 256d 3a73 5b1b 3b30 3339     .[0;92m%s:.[0;93
   176c8:	256d 3e64 1b20 305b 333b 6d37 7542 7474     m%d> .[0;37mButt
   176d8:	6e6f 3220 7020 6572 7373 6465 1b21 305b     on 2 pressed!.[0
   176e8:	0a6d 0000 5b1b 3234 206d 2020 4920 464e     m....[42m    INF
   176f8:	1b4f 305b 393b 6d34 253a 3a73 5b1b 3b30     O.[0;94m:%s:.[0;
   17708:	3239 256d 3a73 5b1b 3b30 3339 256d 3e64     92m%s:.[0;93m%d>
   17718:	1b20 305b 333b 6d37 7542 7474 6e6f 3320      .[0;37mButton 3
   17728:	7020 6572 7373 6465 1b21 305b 0a6d 0000      pressed!.[0m...
   17738:	5b1b 3234 206d 2020 4920 464e 1b4f 305b     .[42m    INFO.[0
   17748:	393b 6d34 253a 3a73 5b1b 3b30 3239 256d     ;94m:%s:.[0;92m%
   17758:	3a73 5b1b 3b30 3339 256d 3e64 1b20 305b     s:.[0;93m%d> .[0
   17768:	333b 6d37 7554 6e72 6e69 2067 454c 2044     ;37mTurning LED 
   17778:	4e4f 1b21 305b 0a6d 0000 0000 5b1b 3234     ON!.[0m......[42
   17788:	206d 2020 4920 464e 1b4f 305b 393b 6d34     m    INFO.[0;94m
   17798:	253a 3a73 5b1b 3b30 3239 256d 3a73 5b1b     :%s:.[0;92m%s:.[
   177a8:	3b30 3339 256d 3e64 1b20 305b 333b 6d37     0;93m%d> .[0;37m
   177b8:	7554 6e72 6e69 2067 454c 2044 464f 2146     Turning LED OFF!
   177c8:	5b1b 6d30 000a ffff                         .[0m....

000177d0 <main::__PRETTY_FUNCTION__>:
   177d0:	6e69 2074 616d 6e69 2928 ff00 7453 6361     int main()..Stac
   177e0:	206b 6544 7470 2068 203d 7a25 0a64 0000     k Depth = %zd...
   177f0:	2020 2523 757a 203a 7830 7025 000a 0000       #%zu: 0x%p....
   17800:	520a 6e75 203a 6874 2065 6f66 6c6c 776f     .Run: the follow
   17810:	6e69 2067 6f63 6d6d 6e61 2064 6e69 7920     ing command in y
   17820:	756f 2072 7270 6a6f 6365 2074 6964 6572     our project dire
   17830:	7463 726f 0079 0000 200a 1b20 315b 333b     ctory....  .[1;3
   17840:	6d37 616d 656b 7320 6174 6b63 7274 6361     7mmake stacktrac
   17850:	2d65 7325 5420 4152 4543 3d53 0022 0000     e-%s TRACES="...
   17860:	7830 7025 0000 0000 3020 2578 0070 0000     0x%p.... 0x%p...
   17870:	0a22 5b1b 6d30 0000 6854 7369 7720 6c69     "..[0m..This wil
   17880:	206c 6572 6f70 7472 7420 6568 6620 6c69     l report the fil
   17890:	2065 6e61 2064 696c 656e 6e20 6d75 6562     e and line numbe
   178a0:	2072 6874 7461 6c20 6465 7420 206f 6874     r that led to th
   178b0:	7369 6620 6e75 7463 6f69 206e 6562 6e69     is function bein
   178c0:	2067 6163 6c6c 6465 002e 0000 7061 6c70     g called....appl
   178d0:	6369 7461 6f69 006e 5b1b 3134 436d 4952     ication..[41mCRI
   178e0:	4954 4143 1b4c 305b 393b 6d34 253a 3a73     TICAL.[0;94m:%s:
   178f0:	5b1b 3b30 3239 256d 3a73 5b1b 3b30 3339     .[0;92m%s:.[0;93
   17900:	256d 3e64 1b20 305b 333b 6d37 7341 6573     m%d> .[0;37mAsse
   17910:	7472 6f69 206e 6146 6c69 7275 2c65 4320     rtion Failure, C
   17920:	6e6f 6964 6974 6e6f 5420 7365 6574 3a64     ondition Tested:
   17930:	2820 6570 6972 6870 7265 6c61 645f 7669      (peripheral_div
   17940:	6469 7265 3c20 203d 2934 200a 2020 2020     ider <= 4).     
   17950:	2020 2020 4420 7669 6469 7265 6d20 7375          Divider mus
   17960:	6e74 7427 6520 6378 6565 2064 3233 5b1b     tn't exceed 32.[
   17970:	6d30 5b1b 6d30 000a 500a 6972 746e 6e69     0m.[0m...Printin
   17980:	2067 7453 6361 206b 7254 6361 3a65 000a     g Stack Trace:..
   17990:	5b1b 3134 436d 4952 4954 4143 1b4c 305b     .[41mCRITICAL.[0
   179a0:	393b 6d34 253a 3a73 5b1b 3b30 3239 256d     ;94m:%s:.[0;92m%
   179b0:	3a73 5b1b 3b30 3339 256d 3e64 1b20 305b     s:.[0;93m%d> .[0
   179c0:	333b 6d37 7341 6573 7472 6f69 206e 6146     ;37mAssertion Fa
   179d0:	6c69 7275 2c65 4320 6e6f 6964 6974 6e6f     ilure, Condition
   179e0:	5420 7365 6574 3a64 2820 6564 6973 6572      Tested: (desire
   179f0:	5f64 7073 6565 5f64 6e69 6d5f 7a68 3c20     d_speed_in_mhz <
   17a00:	3320 3438 2620 2026 6564 6973 6572 5f64      384 && desired_
   17a10:	7073 6565 5f64 6e69 6d5f 7a68 3e20 3120     speed_in_mhz > 1
   17a20:	2932 200a 2020 2020 2020 2020 4620 6572     2).          Fre
   17a30:	7571 6e65 7963 6d20 7375 2074 6562 6c20     quency must be l
   17a40:	776f 7265 7420 6168 206e 3833 2034 484d     ower than 384 MH
   17a50:	617a 646e 6720 6572 7461 7265 7420 6168     zand greater tha
   17a60:	206e 726f 6520 7571 6c61 7420 206f 3231     n or equal to 12
   17a70:	4d20 7a48 5b1b 6d30 5b1b 6d30 000a 0000      MHz.[0m.[0m....
   17a80:	5b1b 3134 436d 4952 4954 4143 1b4c 305b     .[41mCRITICAL.[0
   17a90:	393b 6d34 253a 3a73 5b1b 3b30 3239 256d     ;94m:%s:.[0;92m%
   17aa0:	3a73 5b1b 3b30 3339 256d 3e64 1b20 305b     s:.[0;93m%d> .[0
   17ab0:	333b 6d37 7341 6573 7472 6f69 206e 6146     ;37mAssertion Fa
   17ac0:	6c69 7275 2c65 4320 6e6f 6964 6974 6e6f     ilure, Condition
   17ad0:	5420 7365 6574 3a64 2820 6964 6976 6564      Tested: (divide
   17ae0:	5f72 6176 756c 2065 203c 2938 200a 2020     r_value < 8).   
   17af0:	2020 2020 2020 5020 4c4c 6420 7669 6469            PLL divid
   17b00:	7265 7620 6c61 6575 7720 6e65 2074 756f     er value went ou
   17b10:	2074 666f 6220 756f 646e 1b73 305b 1b6d     t of bounds.[0m.
   17b20:	305b 0a6d 0000 0000 5b1b 3134 436d 4952     [0m......[41mCRI
   17b30:	4954 4143 1b4c 305b 393b 6d34 253a 3a73     TICAL.[0;94m:%s:
   17b40:	5b1b 3b30 3239 256d 3a73 5b1b 3b30 3339     .[0;92m%s:.[0;93
   17b50:	256d 3e64 1b20 305b 333b 6d37 7341 6573     m%d> .[0;37mAsse
   17b60:	7472 6f69 206e 6146 6c69 7275 2c65 4320     rtion Failure, C
   17b70:	6e6f 6964 6974 6e6f 5420 7365 6574 3a64     ondition Tested:
   17b80:	2820 6166 736c 2965 200a 2020 2020 2020      (false).       
   17b90:	2020 5020 4c4c 6c20 636f 206b 6f63 6c75        PLL lock coul
   17ba0:	2064 6f6e 2074 6562 6520 7473 6261 696c     d not be establi
   17bb0:	6873 6465 6220 6665 726f 2065 6974 656d     shed before time
   17bc0:	756f 1b74 305b 1b6d 305b 0a6d 0000 0000     out.[0m.[0m.....
   17bd0:	5b1b 3134 436d 4952 4954 4143 1b4c 305b     .[41mCRITICAL.[0
   17be0:	393b 6d34 253a 3a73 5b1b 3b30 3239 256d     ;94m:%s:.[0;92m%
   17bf0:	3a73 5b1b 3b30 3339 256d 3e64 1b20 305b     s:.[0;93m%d> .[0
   17c00:	333b 6d37 7341 6573 7472 6f69 206e 6146     ;37mAssertion Fa
   17c10:	6c69 7275 2c65 4320 6e6f 6964 6974 6e6f     ilure, Condition
   17c20:	5420 7365 6574 3a64 2820 7063 5f75 6964      Tested: (cpu_di
   17c30:	6976 6564 2072 203c 3233 0a29 2020 2020     vider < 32).    
   17c40:	2020 2020 2020 6944 6976 6564 2072 756d           Divider mu
   17c50:	7473 276e 2074 7865 6563 6465 3320 1b32     stn't exceed 32.
   17c60:	305b 1b6d 305b 0a6d 0000 0000 5b1b 3134     [0m.[0m......[41
   17c70:	436d 4952 4954 4143 1b4c 305b 393b 6d34     mCRITICAL.[0;94m
   17c80:	253a 3a73 5b1b 3b30 3239 256d 3a73 5b1b     :%s:.[0;92m%s:.[
   17c90:	3b30 3339 256d 3e64 1b20 305b 333b 6d37     0;93m%d> .[0;37m
   17ca0:	7341 6573 7472 6f69 206e 6146 6c69 7275     Assertion Failur
   17cb0:	2c65 4320 6e6f 6964 6974 6e6f 5420 7365     e, Condition Tes
   17cc0:	6574 3a64 2820 7266 7165 6575 636e 2079     ted: (frequency 
   17cd0:	3d21 3020 0a29 2020 2020 2020 2020 2020     != 0).          
   17ce0:	6143 6e6e 746f 6820 7661 2065 657a 6f72     Cannot have zero
   17cf0:	7420 6369 736b 7020 7265 6d20 6369 6f72      ticks per micro
   17d00:	6573 6f63 646e 202c 6c70 6165 6573 6320     second, please c
   17d10:	6f68 736f 2065 2031 726f 6d20 726f 2e65     hoose 1 or more.
   17d20:	5b1b 6d30 5b1b 6d30 000a 0000 5b1b 3334     .[0m.[0m.....[43
   17d30:	206d 4157 4e52 4e49 1b47 305b 393b 6d34     m WARNING.[0;94m
   17d40:	253a 3a73 5b1b 3b30 3239 256d 3a73 5b1b     :%s:.[0;92m%s:.[
   17d50:	3b30 3339 256d 3e64 1b20 305b 333b 6d37     0;93m%d> .[0;37m
   17d60:	7953 7473 6d65 5420 6d69 7265 6820 7361     System Timer has
   17d70:	4620 4941 454c 2044 6f74 7320 6174 7472      FAILED to start
   17d80:	1b21 305b 1b6d 305b 0a6d ff00               !.[0m.[0m...

00017d8c <Lpc40xxSystemController::SetPeripheralClockDivider(unsigned char)::file>:
   17d8c:	7973 7473 6d65 635f 6e6f 7274 6c6f 656c     system_controlle
   17d9c:	2e72 7068 0070 ffff                         r.hpp...

00017da4 <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)::file>:
   17da4:	7973 7473 6d65 635f 6e6f 7274 6c6f 656c     system_controlle
   17db4:	2e72 7068 0070 ffff                         r.hpp...

00017dbc <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)::file>:
   17dbc:	7973 7473 6d65 635f 6e6f 7274 6c6f 656c     system_controlle
   17dcc:	2e72 7068 0070 ffff                         r.hpp...

00017dd4 <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)::file>:
   17dd4:	7973 7473 6d65 635f 6e6f 7274 6c6f 656c     system_controlle
   17de4:	2e72 7068 0070 ffff                         r.hpp...

00017dec <Lpc40xxSystemController::SetCpuClockDivider(unsigned char)::file>:
   17dec:	7973 7473 6d65 635f 6e6f 7274 6c6f 656c     system_controlle
   17dfc:	2e72 7068 0070 ffff                         r.hpp...

00017e04 <Timer::kPowerbit>:
   17e04:	0001 0000 0002 0000 0016 0000 0017 0000     ................

00017e14 <Timer::kTimerIrq>:
   17e14:	0201 0403                                   ....

00017e18 <Timer::kTimerIsr>:
   17e18:	284d 0001 2889 0001 28c5 0001 2901 0001     M(...(...(...)..

00017e28 <Timer::Initialize(unsigned long, void (*)(), long)::file>:
   17e28:	6974 656d 2e72 7068 0070 ffff               timer.hpp...

00017e34 <Uart::kTxUartPortFunction>:
   17e34:	0201 0502                                   ....

00017e38 <Uart::kRxUartPortFunction>:
   17e38:	0201 0302                                   ....

00017e3c <Uart::kPowerbit>:
   17e3c:	0003 0000 0018 0000 0019 0000 0008 0000     ................

00017e4c <LowLevelInit()::file>:
   17e4c:	7473 7261 7574 2e70 7063 0070               startup.cpp.

00017e58 <vtable for Uart>:
	...
   17e60:	1e45 0001 1f11 0001 2041 0001 2175 0001     E.......A ..u!..
   17e70:	fffc ffff 0000 0000 0e19 0001 0ea9 0001     ................
   17e80:	0f01 0001 0f19 0001 0f2d 0001 0f6d 0001     ........-...m...
   17e90:	0f9d 0001                                   ....

00017e94 <vtable for Timer>:
	...
   17e9c:	1bad 0001 1d11 0001 1e09 0001 fffc ffff     ................
   17eac:	0000 0000 0e19 0001 0ea9 0001 0f01 0001     ................
   17ebc:	0f19 0001 0f2d 0001 0f6d 0001 0f9d 0001     ....-...m.......

00017ecc <vtable for Pin>:
	...
   17ed4:	157d 0001 15f5 0001 1675 0001 16e9 0001     }.......u.......
   17ee4:	175d 0001 17d9 0001 1855 0001 18c9 0001     ].......U.......
   17ef4:	1945 0001 19b9 0001 1a2d 0001 1b05 0001     E.......-.......
   17f04:	1b31 0001                                   1...

00017f08 <vtable for SystemTimer>:
	...
   17f10:	1419 0001 144d 0001 14e9 0001 fffc ffff     ....M...........
   17f20:	0000 0000 0e19 0001 0ea9 0001 0f01 0001     ................
   17f30:	0f19 0001 0f2d 0001 0f6d 0001 0f9d 0001     ....-...m.......

00017f40 <vtable for Lpc40xxSystemController>:
	...
   17f48:	0e19 0001 0ea9 0001 0f01 0001 0f19 0001     ................
   17f58:	0f2d 0001 0f6d 0001 0f9d 0001               -...m.......

00017f64 <Lpc40xxSystemController::SetPeripheralClockDivider(unsigned char)::__PRETTY_FUNCTION__>:
   17f64:	6976 7472 6175 206c 6f76 6469 4c20 6370     virtual void Lpc
   17f74:	3034 7878 7953 7473 6d65 6f43 746e 6f72     40xxSystemContro
   17f84:	6c6c 7265 3a3a 6553 5074 7265 7069 6568     ller::SetPeriphe
   17f94:	6172 436c 6f6c 6b63 6944 6976 6564 2872     ralClockDivider(
   17fa4:	6975 746e 5f38 2974 ff00 ffff               uint8_t)....

00017fb0 <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)::__PRETTY_FUNCTION__>:
   17fb0:	6975 746e 3233 745f 4c20 6370 3034 7878     uint32_t Lpc40xx
   17fc0:	7953 7473 6d65 6f43 746e 6f72 6c6c 7265     SystemController
   17fd0:	3a3a 6553 4d74 6961 506e 6c6c 4c28 6370     ::SetMainPll(Lpc
   17fe0:	3034 7878 7953 7473 6d65 6f43 746e 6f72     40xxSystemContro
   17ff0:	6c6c 7265 3a3a 6c50 496c 706e 7475 202c     ller::PllInput, 
   18000:	6975 746e 3631 745f 0029 ffff               uint16_t)...

0001800c <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)::__PRETTY_FUNCTION__>:
   1800c:	6975 746e 3233 745f 4c20 6370 3034 7878     uint32_t Lpc40xx
   1801c:	7953 7473 6d65 6f43 746e 6f72 6c6c 7265     SystemController
   1802c:	3a3a 6143 636c 6c75 7461 5065 6c6c 4c28     ::CalculatePll(L
   1803c:	6370 3034 7878 7953 7473 6d65 6f43 746e     pc40xxSystemCont
   1804c:	6f72 6c6c 7265 3a3a 6c50 496c 706e 7475     roller::PllInput
   1805c:	202c 6975 746e 3631 745f 0029               , uint16_t).

00018068 <Lpc40xxSystemController::SetCpuClockDivider(unsigned char)::__PRETTY_FUNCTION__>:
   18068:	6f76 6469 4c20 6370 3034 7878 7953 7473     void Lpc40xxSyst
   18078:	6d65 6f43 746e 6f72 6c6c 7265 3a3a 6553     emController::Se
   18088:	4374 7570 6c43 636f 446b 7669 6469 7265     tCpuClockDivider
   18098:	7528 6e69 3874 745f 0029 ffff               (uint8_t)...

000180a4 <Timer::Initialize(unsigned long, void (*)(), long)::__PRETTY_FUNCTION__>:
   180a4:	6976 7472 6175 206c 6f76 6469 5420 6d69     virtual void Tim
   180b4:	7265 3a3a 6e49 7469 6169 696c 657a 7528     er::Initialize(u
   180c4:	6e69 3374 5f32 2c74 4920 7273 6f50 6e69     int32_t, IsrPoin
   180d4:	6574 2c72 6920 746e 3233 745f 0029 ffff     ter, int32_t)...

000180e4 <LowLevelInit()::__PRETTY_FUNCTION__>:
   180e4:	6f76 6469 4c20 776f 654c 6576 496c 696e     void LowLevelIni
   180f4:	2874 0029 7453 6361 206b 6544 7470 2068     t().Stack Depth 
   18104:	203d 7a25 0a64 0000 2020 2523 757a 203a     = %zd...  #%zu: 
   18114:	7830 7025 000a 0000 520a 6e75 203a 6874     0x%p.....Run: th
   18124:	2065 6f66 6c6c 776f 6e69 2067 6f63 6d6d     e following comm
   18134:	6e61 2064 6e69 7920 756f 2072 7270 6a6f     and in your proj
   18144:	6365 2074 6964 6572 7463 726f 0079 0000     ect directory...
   18154:	200a 1b20 315b 333b 6d37 616d 656b 7320     .  .[1;37mmake s
   18164:	6174 6b63 7274 6361 2d65 7325 5420 4152     tacktrace-%s TRA
   18174:	4543 3d53 0022 0000 7830 7025 0000 0000     CES="...0x%p....
   18184:	3020 2578 0070 0000 0a22 5b1b 6d30 0000      0x%p..."..[0m..
   18194:	6854 7369 7720 6c69 206c 6572 6f70 7472     This will report
   181a4:	7420 6568 6620 6c69 2065 6e61 2064 696c      the file and li
   181b4:	656e 6e20 6d75 6562 2072 6874 7461 6c20     ne number that l
   181c4:	6465 7420 206f 6874 7369 6620 6e75 7463     ed to this funct
   181d4:	6f69 206e 6562 6e69 2067 6163 6c6c 6465     ion being called
   181e4:	002e 0000 7061 6c70 6369 7461 6f69 006e     ....application.
   181f4:	5b1b 3134 436d 4952 4954 4143 1b4c 305b     .[41mCRITICAL.[0
   18204:	393b 6d34 253a 3a73 5b1b 3b30 3239 256d     ;94m:%s:.[0;92m%
   18214:	3a73 5b1b 3b30 3339 256d 3e64 1b20 305b     s:.[0;93m%d> .[0
   18224:	333b 6d37 7341 6573 7472 6f69 206e 6146     ;37mAssertion Fa
   18234:	6c69 7275 2c65 4320 6e6f 6964 6974 6e6f     ilure, Condition
   18244:	5420 7365 6574 3a64 2820 7369 2072 3d21      Tested: (isr !=
   18254:	4920 746e 7265 7572 7470 6f4c 6b6f 7075      InterruptLookup
   18264:	6148 646e 656c 2972 200a 2020 2020 2020     Handler).       
   18274:	2020 4e20 206f 5349 2052 6f66 6e75 2064        No ISR found 
   18284:	6f66 2072 6874 2065 6576 7463 726f 2520     for the vector %
   18294:	1b75 305b 1b6d 305b 0a6d 0000 500a 6972     u.[0m.[0m....Pri
   182a4:	746e 6e69 2067 7453 6361 206b 7254 6361     nting Stack Trac
   182b4:	3a65 000a 5b1b 3134 486d 7261 2064 6146     e:...[41mHard Fa
   182c4:	6c75 2074 7845 6563 7470 6f69 206e 634f     ult Exception Oc
   182d4:	7563 7272 6465 0a21 5b1b 6d30 0000 0000     curred!..[0m....
   182e4:	3072 203a 7830 3025 6c38 2c58 7220 3a31     r0: 0x%08lX, r1:
   182f4:	3020 2578 3830 586c 202c 3272 203a 7830      0x%08lX, r2: 0x
   18304:	3025 6c38 2c58 7220 3a33 3020 2578 3830     %08lX, r3: 0x%08
   18314:	586c 000a 3172 3a32 3020 2578 3830 586c     lX..r12: 0x%08lX
   18324:	202c 726c 203a 7830 3025 6c38 2c58 7020     , lr: 0x%08lX, p
   18334:	3a63 3020 2578 3830 586c 202c 7370 3a72     c: 0x%08lX, psr:
   18344:	3020 2578 3830 586c 000a ffff                0x%08lX....

00018350 <InterruptLookupHandler::file>:
   18350:	6e69 6574 7272 7075 2e74 7063 0070 ffff     interrupt.cpp...

00018360 <InterruptLookupHandler::__PRETTY_FUNCTION__>:
   18360:	6f76 6469 4920 746e 7265 7572 7470 6f4c     void InterruptLo
   18370:	6b6f 7075 6148 646e 656c 2872 0029 ffff     okupHandler()...

00018380 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)::pow10>:
   18380:	0000 3f80 0000 4120 0000 42c8 0000 447a     ...?.. A...B..zD
   18390:	4000 461c 5000 47c3 2400 4974 9680 4b18     .@.F.P.G.$tI...K
   183a0:	bc20 4cbe 6b28 4e6e 7453 6361 206b 6544      ..L(knNStack De
   183b0:	7470 2068 203d 7a25 0a64 0000 2020 2523     pth = %zd...  #%
   183c0:	757a 203a 7830 7025 000a 0000 520a 6e75     zu: 0x%p.....Run
   183d0:	203a 6874 2065 6f66 6c6c 776f 6e69 2067     : the following 
   183e0:	6f63 6d6d 6e61 2064 6e69 7920 756f 2072     command in your 
   183f0:	7270 6a6f 6365 2074 6964 6572 7463 726f     project director
   18400:	0079 0000 200a 1b20 315b 333b 6d37 616d     y....  .[1;37mma
   18410:	656b 7320 6174 6b63 7274 6361 2d65 7325     ke stacktrace-%s
   18420:	5420 4152 4543 3d53 0022 0000 7830 7025      TRACES="...0x%p
   18430:	0000 0000 3020 2578 0070 0000 0a22 5b1b     .... 0x%p..."..[
   18440:	6d30 0000 6854 7369 7720 6c69 206c 6572     0m..This will re
   18450:	6f70 7472 7420 6568 6620 6c69 2065 6e61     port the file an
   18460:	2064 696c 656e 6e20 6d75 6562 2072 6874     d line number th
   18470:	7461 6c20 6465 7420 206f 6874 7369 6620     at led to this f
   18480:	6e75 7463 6f69 206e 6562 6e69 2067 6163     unction being ca
   18490:	6c6c 6465 002e 0000 7061 6c70 6369 7461     lled....applicat
   184a0:	6f69 006e 5b1b 3334 206d 4157 4e52 4e49     ion..[43m WARNIN
   184b0:	1b47 305b 393b 6d34 253a 3a73 5b1b 3b30     G.[0;94m:%s:.[0;
   184c0:	3239 256d 3a73 5b1b 3b30 3339 256d 3e64     92m%s:.[0;93m%d>
   184d0:	1b20 305b 333b 6d37 6f50 7472 2520 2064      .[0;37mPort %d 
   184e0:	6163 6e6e 746f 6220 2065 7375 6465 6620     cannot be used f
   184f0:	726f 4520 7478 7265 616e 206c 6e49 6574     or External Inte
   18500:	7272 7075 7374 202e 654e 6465 7420 206f     rrupts. Need to 
   18510:	7375 2065 5047 4f49 6f20 206e 6f50 7472     use GPIO on Port
   18520:	3020 6f20 2072 2e32 5b1b 6d30 5b1b 6d30      0 or 2..[0m.[0m
   18530:	000a 0000 5b1b 3334 206d 4157 4e52 4e49     .....[43m WARNIN
   18540:	1b47 305b 393b 6d34 253a 3a73 5b1b 3b30     G.[0;94m:%s:.[0;
   18550:	3239 256d 3a73 5b1b 3b30 3339 256d 3e64     92m%s:.[0;93m%d>
   18560:	1b20 305b 333b 6d37 6445 6567 2520 2064      .[0;37mEdge %d 
   18570:	6163 6e6e 746f 6220 2065 7375 6465 6620     cannot be used f
   18580:	726f 4520 7478 7265 616e 206c 6e49 6574     or External Inte
   18590:	7272 7075 7374 4e2e 6565 2064 6f74 7520     rrupts.Need to u
   185a0:	6573 6120 7220 7369 6e69 2c67 6620 6c61     se a rising, fal
   185b0:	696c 676e 202c 726f 6220 746f 2068 6f63     ling, or both co
   185c0:	666e 6769 7275 7461 6f69 2e6e 5b1b 6d30     nfiguration..[0m
   185d0:	000a 0000 5b1b 3134 436d 4952 4954 4143     .....[41mCRITICA
   185e0:	1b4c 305b 393b 6d34 253a 3a73 5b1b 3b30     L.[0;94m:%s:.[0;
   185f0:	3239 256d 3a73 5b1b 3b30 3339 256d 3e64     92m%s:.[0;93m%d>
   18600:	1b20 305b 333b 6d37 7341 6573 7472 6f69      .[0;37mAssertio
   18610:	206e 6146 6c69 7275 2c65 4320 6e6f 6964     n Failure, Condi
   18620:	6974 6e6f 5420 7365 6574 3a64 2820 6570     tion Tested: (pe
   18630:	6972 6870 7265 6c61 645f 7669 6469 7265     ripheral_divider
   18640:	3c20 203d 2934 200a 2020 2020 2020 2020      <= 4).         
   18650:	4420 7669 6469 7265 6d20 7375 6e74 7427      Divider mustn't
   18660:	6520 6378 6565 2064 3233 5b1b 6d30 5b1b      exceed 32.[0m.[
   18670:	6d30 000a 500a 6972 746e 6e69 2067 7453     0m...Printing St
   18680:	6361 206b 7254 6361 3a65 000a 5b1b 3134     ack Trace:...[41
   18690:	436d 4952 4954 4143 1b4c 305b 393b 6d34     mCRITICAL.[0;94m
   186a0:	253a 3a73 5b1b 3b30 3239 256d 3a73 5b1b     :%s:.[0;92m%s:.[
   186b0:	3b30 3339 256d 3e64 1b20 305b 333b 6d37     0;93m%d> .[0;37m
   186c0:	7341 6573 7472 6f69 206e 6146 6c69 7275     Assertion Failur
   186d0:	2c65 4320 6e6f 6964 6974 6e6f 5420 7365     e, Condition Tes
   186e0:	6574 3a64 2820 6564 6973 6572 5f64 7073     ted: (desired_sp
   186f0:	6565 5f64 6e69 6d5f 7a68 3c20 3320 3438     eed_in_mhz < 384
   18700:	2620 2026 6564 6973 6572 5f64 7073 6565      && desired_spee
   18710:	5f64 6e69 6d5f 7a68 3e20 3120 2932 200a     d_in_mhz > 12). 
   18720:	2020 2020 2020 2020 4620 6572 7571 6e65              Frequen
   18730:	7963 6d20 7375 2074 6562 6c20 776f 7265     cy must be lower
   18740:	7420 6168 206e 3833 2034 484d 617a 646e      than 384 MHzand
   18750:	6720 6572 7461 7265 7420 6168 206e 726f      greater than or
   18760:	6520 7571 6c61 7420 206f 3231 4d20 7a48      equal to 12 MHz
   18770:	5b1b 6d30 5b1b 6d30 000a 0000 5b1b 3134     .[0m.[0m.....[41
   18780:	436d 4952 4954 4143 1b4c 305b 393b 6d34     mCRITICAL.[0;94m
   18790:	253a 3a73 5b1b 3b30 3239 256d 3a73 5b1b     :%s:.[0;92m%s:.[
   187a0:	3b30 3339 256d 3e64 1b20 305b 333b 6d37     0;93m%d> .[0;37m
   187b0:	7341 6573 7472 6f69 206e 6146 6c69 7275     Assertion Failur
   187c0:	2c65 4320 6e6f 6964 6974 6e6f 5420 7365     e, Condition Tes
   187d0:	6574 3a64 2820 6964 6976 6564 5f72 6176     ted: (divider_va
   187e0:	756c 2065 203c 2938 200a 2020 2020 2020     lue < 8).       
   187f0:	2020 5020 4c4c 6420 7669 6469 7265 7620        PLL divider v
   18800:	6c61 6575 7720 6e65 2074 756f 2074 666f     alue went out of
   18810:	6220 756f 646e 1b73 305b 1b6d 305b 0a6d      bounds.[0m.[0m.
   18820:	0000 0000 5b1b 3134 436d 4952 4954 4143     .....[41mCRITICA
   18830:	1b4c 305b 393b 6d34 253a 3a73 5b1b 3b30     L.[0;94m:%s:.[0;
   18840:	3239 256d 3a73 5b1b 3b30 3339 256d 3e64     92m%s:.[0;93m%d>
   18850:	1b20 305b 333b 6d37 7341 6573 7472 6f69      .[0;37mAssertio
   18860:	206e 6146 6c69 7275 2c65 4320 6e6f 6964     n Failure, Condi
   18870:	6974 6e6f 5420 7365 6574 3a64 2820 6166     tion Tested: (fa
   18880:	736c 2965 200a 2020 2020 2020 2020 5020     lse).          P
   18890:	4c4c 6c20 636f 206b 6f63 6c75 2064 6f6e     LL lock could no
   188a0:	2074 6562 6520 7473 6261 696c 6873 6465     t be established
   188b0:	6220 6665 726f 2065 6974 656d 756f 1b74      before timeout.
   188c0:	305b 1b6d 305b 0a6d 0000 0000 5b1b 3134     [0m.[0m......[41
   188d0:	436d 4952 4954 4143 1b4c 305b 393b 6d34     mCRITICAL.[0;94m
   188e0:	253a 3a73 5b1b 3b30 3239 256d 3a73 5b1b     :%s:.[0;92m%s:.[
   188f0:	3b30 3339 256d 3e64 1b20 305b 333b 6d37     0;93m%d> .[0;37m
   18900:	7341 6573 7472 6f69 206e 6146 6c69 7275     Assertion Failur
   18910:	2c65 4320 6e6f 6964 6974 6e6f 5420 7365     e, Condition Tes
   18920:	6574 3a64 2820 7063 5f75 6964 6976 6564     ted: (cpu_divide
   18930:	2072 203c 3233 0a29 2020 2020 2020 2020     r < 32).        
   18940:	2020 6944 6976 6564 2072 756d 7473 276e       Divider mustn'
   18950:	2074 7865 6563 6465 3320 1b32 305b 1b6d     t exceed 32.[0m.
   18960:	305b 0a6d 0000 0000 5b1b 3534 206d 2020     [0m......[45m   
   18970:	5245 4f52 1b52 305b 393b 6d34 253a 3a73     ERROR.[0;94m:%s:
   18980:	5b1b 3b30 3239 256d 3a73 5b1b 3b30 3339     .[0;92m%s:.[0;93
   18990:	256d 3e64 1b20 305b 333b 6d37 6146 6c69     m%d> .[0;37mFail
   189a0:	6465 7420 206f 6e69 7469 6169 6574 5320     ed to initiate S
   189b0:	4950 6d20 646f 2065 6977 6874 6e69 7420     PI mode within t
   189c0:	6d69 6f65 7475 202e 6241 726f 6974 676e     imeout. Aborting
   189d0:	1b21 305b 0a6d 0000 5b1b 3534 206d 2020     !.[0m....[45m   
   189e0:	5245 4f52 1b52 305b 393b 6d34 253a 3a73     ERROR.[0;94m:%s:
   189f0:	5b1b 3b30 3239 256d 3a73 5b1b 3b30 3339     .[0;92m%s:.[0;93
   18a00:	256d 3e64 1b20 305b 333b 6d37 6552 7073     m%d> .[0;37mResp
   18a10:	6e6f 6573 6920 746e 6765 6972 7974 6320     onse integrity c
   18a20:	6568 6b63 6620 6961 656c 2e64 4120 6f62     heck failed. Abo
   18a30:	7472 6e69 2167 5b1b 6d30 000a 5b1b 3534     rting!.[0m...[45
   18a40:	206d 2020 5245 4f52 1b52 305b 393b 6d34     m   ERROR.[0;94m
   18a50:	253a 3a73 5b1b 3b30 3239 256d 3a73 5b1b     :%s:.[0;92m%s:.[
   18a60:	3b30 3339 256d 3e64 1b20 305b 333b 6d37     0;93m%d> .[0;37m
   18a70:	6e55 7573 7070 726f 6574 2064 6f76 746c     Unsupported volt
   18a80:	6761 2065 6e69 7520 6573 202e 6241 726f     age in use. Abor
   18a90:	6974 676e 1b21 305b 0a6d 0000 5b1b 3534     ting!.[0m....[45
   18aa0:	206d 2020 5245 4f52 1b52 305b 393b 6d34     m   ERROR.[0;94m
   18ab0:	253a 3a73 5b1b 3b30 3239 256d 3a73 5b1b     :%s:.[0;92m%s:.[
   18ac0:	3b30 3339 256d 3e64 1b20 305b 333b 6d37     0;93m%d> .[0;37m
   18ad0:	4453 4320 7261 2064 6974 656d 2064 756f     SD Card timed ou
   18ae0:	2e74 4120 6f62 7472 6e69 2167 5b1b 6d30     t. Aborting!.[0m
   18af0:	000a 0000 7274 6575 0000 0000 6166 736c     ....true....fals
   18b00:	0065 0000 5b1b 3534 206d 2020 5245 4f52     e....[45m   ERRO
   18b10:	1b52 305b 393b 6d34 253a 3a73 5b1b 3b30     R.[0;94m:%s:.[0;
   18b20:	3239 256d 3a73 5b1b 3b30 3339 256d 3e64     92m%s:.[0;93m%d>
   18b30:	1b20 305b 333b 6d37 6857 6c69 2065 6552      .[0;37mWhile Re
   18b40:	6461 6e69 2067 6c42 636f 206b 2523 2064     ading Block #%d 
   18b50:	5243 3143 3a36 5b1b 6d30 000a 5b1b 3534     CRC16:.[0m...[45
   18b60:	206d 2020 5245 4f52 1b52 305b 393b 6d34     m   ERROR.[0;94m
   18b70:	253a 3a73 5b1b 3b30 3239 256d 3a73 5b1b     :%s:.[0;92m%s:.[
   18b80:	3b30 3339 256d 3e64 1b20 305b 333b 6d37     0;93m%d> .[0;37m
   18b90:	7845 6570 7463 6465 2720 7830 3025 5834     Expected '0x%04X
   18ba0:	1b27 305b 0a6d 0000 5b1b 3534 206d 2020     '.[0m....[45m   
   18bb0:	5245 4f52 1b52 305b 393b 6d34 253a 3a73     ERROR.[0;94m:%s:
   18bc0:	5b1b 3b30 3239 256d 3a73 5b1b 3b30 3339     .[0;92m%s:.[0;93
   18bd0:	256d 3e64 1b20 305b 333b 6d37 6f47 2074     m%d> .[0;37mGot 
   18be0:	3027 2578 3430 2758 5b1b 6d30 000a 0000     '0x%04X'.[0m....
   18bf0:	5b1b 3534 206d 2020 5245 4f52 1b52 305b     .[45m   ERROR.[0
   18c00:	393b 6d34 253a 3a73 5b1b 3b30 3239 256d     ;94m:%s:.[0;92m%
   18c10:	3a73 5b1b 3b30 3339 256d 3e64 1b20 305b     s:.[0;93m%d> .[0
   18c20:	333b 6d37 6552 6461 4320 646d 7720 7361     ;37mRead Cmd was
   18c30:	6e20 746f 6120 6b63 6f6e 6c77 6465 6567      not acknowledge
   18c40:	2064 7270 706f 7265 796c 1b21 305b 0a6d     d properly!.[0m.
   18c50:	0000 0000 5b1b 3534 206d 2020 5245 4f52     .....[45m   ERRO
   18c60:	1b52 305b 393b 6d34 253a 3a73 5b1b 3b30     R.[0;94m:%s:.[0;
   18c70:	3239 256d 3a73 5b1b 3b30 3339 256d 3e64     92m%s:.[0;93m%d>
   18c80:	1b20 305b 333b 6d37 6150 6172 656d 6574      .[0;37mParamete
   18c90:	2072 7245 3a72 2520 1b73 305b 0a6d 0000     r Err: %s.[0m...
   18ca0:	5b1b 3534 206d 2020 5245 4f52 1b52 305b     .[45m   ERROR.[0
   18cb0:	393b 6d34 253a 3a73 5b1b 3b30 3239 256d     ;94m:%s:.[0;92m%
   18cc0:	3a73 5b1b 3b30 3339 256d 3e64 1b20 305b     s:.[0;93m%d> .[0
   18cd0:	333b 6d37 6441 7264 4520 7272 203a 7325     ;37mAddr Err: %s
   18ce0:	5b1b 6d30 000a 0000 5b1b 3534 206d 2020     .[0m.....[45m   
   18cf0:	5245 4f52 1b52 305b 393b 6d34 253a 3a73     ERROR.[0;94m:%s:
   18d00:	5b1b 3b30 3239 256d 3a73 5b1b 3b30 3339     .[0;92m%s:.[0;93
   18d10:	256d 3e64 1b20 305b 333b 6d37 7245 7361     m%d> .[0;37mEras
   18d20:	2065 6553 2071 7245 3a72 2520 1b73 305b     e Seq Err: %s.[0
   18d30:	0a6d 0000 5b1b 3534 206d 2020 5245 4f52     m....[45m   ERRO
   18d40:	1b52 305b 393b 6d34 253a 3a73 5b1b 3b30     R.[0;94m:%s:.[0;
   18d50:	3239 256d 3a73 5b1b 3b30 3339 256d 3e64     92m%s:.[0;93m%d>
   18d60:	1b20 305b 333b 6d37 6f43 206d 5243 2043      .[0;37mCom CRC 
   18d70:	7245 3a72 2520 1b73 305b 0a6d 0000 0000     Err: %s.[0m.....
   18d80:	5b1b 3534 206d 2020 5245 4f52 1b52 305b     .[45m   ERROR.[0
   18d90:	393b 6d34 253a 3a73 5b1b 3b30 3239 256d     ;94m:%s:.[0;92m%
   18da0:	3a73 5b1b 3b30 3339 256d 3e64 1b20 305b     s:.[0;93m%d> .[0
   18db0:	333b 6d37 6c49 656c 6167 206c 6d43 2064     ;37mIllegal Cmd 
   18dc0:	7245 3a72 2520 1b73 305b 0a6d 0000 0000     Err: %s.[0m.....
   18dd0:	5b1b 3534 206d 2020 5245 4f52 1b52 305b     .[45m   ERROR.[0
   18de0:	393b 6d34 253a 3a73 5b1b 3b30 3239 256d     ;94m:%s:.[0;92m%
   18df0:	3a73 5b1b 3b30 3339 256d 3e64 1b20 305b     s:.[0;93m%d> .[0
   18e00:	333b 6d37 7245 7361 2065 6552 6573 3a74     ;37mErase Reset:
   18e10:	2520 1b73 305b 0a6d 0000 0000 5b1b 3534      %s.[0m......[45
   18e20:	206d 2020 5245 4f52 1b52 305b 393b 6d34     m   ERROR.[0;94m
   18e30:	253a 3a73 5b1b 3b30 3239 256d 3a73 5b1b     :%s:.[0;92m%s:.[
   18e40:	3b30 3339 256d 3e64 1b20 305b 333b 6d37     0;93m%d> .[0;37m
   18e50:	6e49 4920 6c64 3a65 2520 1b73 305b 0a6d     In Idle: %s.[0m.
   18e60:	0000 0000 5b1b 3534 206d 2020 5245 4f52     .....[45m   ERRO
   18e70:	1b52 305b 393b 6d34 253a 3a73 5b1b 3b30     R.[0;94m:%s:.[0;
   18e80:	3239 256d 3a73 5b1b 3b30 3339 256d 3e64     92m%s:.[0;93m%d>
   18e90:	1b20 305b 333b 6d37 6146 6c69 6465 7420      .[0;37mFailed t
   18ea0:	206f 6573 2074 7453 7261 2074 6441 7264     o set Start Addr
   18eb0:	7365 2173 5b1b 6d30 000a 0000 5b1b 3534     ess!.[0m.....[45
   18ec0:	206d 2020 5245 4f52 1b52 305b 393b 6d34     m   ERROR.[0;94m
   18ed0:	253a 3a73 5b1b 3b30 3239 256d 3a73 5b1b     :%s:.[0;92m%s:.[
   18ee0:	3b30 3339 256d 3e64 1b20 305b 333b 6d37     0;93m%d> .[0;37m
   18ef0:	6146 6c69 6465 7420 206f 6573 2074 6e45     Failed to set En
   18f00:	2064 6441 7264 7365 2173 5b1b 6d30 000a     d Address!.[0m..
   18f10:	5b1b 3534 206d 2020 5245 4f52 1b52 305b     .[45m   ERROR.[0
   18f20:	393b 6d34 253a 3a73 5b1b 3b30 3239 256d     ;94m:%s:.[0;92m%
   18f30:	3a73 5b1b 3b30 3339 256d 3e64 1b20 305b     s:.[0;93m%d> .[0
   18f40:	333b 6d37 6e55 6e6b 776f 206e 6572 7073     ;37mUnknown resp
   18f50:	6e6f 6573 7420 7079 2e65 4120 6f62 7472     onse type. Abort
   18f60:	6e69 2167 5b1b 6d30 000a 0000 5b1b 3534     ing!.[0m.....[45
   18f70:	206d 2020 5245 4f52 1b52 305b 393b 6d34     m   ERROR.[0;94m
   18f80:	253a 3a73 5b1b 3b30 3239 256d 3a73 5b1b     :%s:.[0;92m%s:.[
   18f90:	3b30 3339 256d 3e64 1b20 305b 333b 6d37     0;93m%d> .[0;37m
   18fa0:	6552 7073 6e6f 6573 7520 736e 7075 6f70     Response unsuppo
   18fb0:	7472 6465 6920 206e 5053 2049 6f6d 6564     rted in SPI mode
   18fc0:	202e 6241 726f 6974 676e 1b21 305b 0a6d     . Aborting!.[0m.
   18fd0:	ff00 ffff                                   ....

00018fd4 <Gpio::ValidPortCheck()::file>:
   18fd4:	7067 6f69 682e 7070 ff00 ffff               gpio.hpp....

00018fe0 <Gpio::SetInterruptEdge(GpioInterface::Edge)::file>:
   18fe0:	7067 6f69 682e 7070 ff00 ffff               gpio.hpp....

00018fec <Gpio::ClearInterruptEdge(GpioInterface::Edge)::file>:
   18fec:	7067 6f69 682e 7070 ff00 ffff               gpio.hpp....

00018ff8 <Ssp::kPinSelect>:
   18ff8:	0202 ff04                                   ....

00018ffc <Ssp::kSspPinMatrix>:
   18ffc:	7ed4 0001 1200 0000 7ed4 0001 1100 0000     .~.......~......
   1900c:	7ed4 0001 0f00 0000 7ed4 0001 0900 0000     .~.......~......
   1901c:	7ed4 0001 0800 0000 7ed4 0001 0700 0000     .~.......~......
   1902c:	7ed4 0001 0101 0000 7ed4 0001 0401 0000     .~.......~......
   1903c:	7ed4 0001 0001 0000                         .~......

00019044 <Ssp::kPowerBit>:
   19044:	0015 0000 000a 0000 0014 0000               ............

00019050 <Sd::kCrcTable8>:
   19050:	0900 1b12 2d24 3f36 4148 535a 656c 777e     ....$-6?HAZSle~w
   19060:	1019 020b 343d 262f 5851 4a43 7c75 6e67     ....=4/&QXCJu|gn
   19070:	3b32 2920 1f16 0d04 737a 6168 575e 454c     2; )....zsha^WLE
   19080:	222b 3039 060f 141d 6a63 7871 4e47 5c55     +"90....cjqxGNU\
   19090:	6d64 7f76 4940 5b52 252c 373e 0108 131a     dmv.@IR[,%>7....
   190a0:	747d 666f 5059 424b 3c35 2e27 1811 0a03     }tofYPKB5<'.....
   190b0:	5f56 4d44 7b72 6960 171e 050c 333a 2128     V_DMr{`i....:3(!
   190c0:	464f 545d 626b 7079 0e07 1c15 2a23 3831     OF]Tkbyp....#*18
   190d0:	4841 5a53 6c65 7e77 0009 121b 242d 363f     AHSZelw~....-$?6
   190e0:	5158 434a 757c 676e 1910 0b02 3d34 2f26     XQJC|ung....4=&/
   190f0:	7a73 6861 5e57 4c45 323b 2029 161f 040d     szahW^EL;2) ....
   19100:	636a 7178 474e 555c 2b22 3930 0f06 1d14     jcxqNG\U"+09....
   19110:	2c25 3e37 0801 1a13 646d 767f 4049 525b     %,7>....md.vI@[R
   19120:	353c 272e 1118 030a 7d74 6f66 5950 4b42     <5.'....t}foPYBK
   19130:	1e17 0c05 3a33 2821 565f 444d 727b 6069     ....3:!(_VMD{ri`
   19140:	070e 151c 232a 3138 4f46 5d54 6b62 0070     ....*#81FOT]bkp.

00019150 <Sd::kCrcTable16>:
   19150:	0000 1021 2042 3063 4084 50a5 60c6 70e7     ..!.B c0.@.P.`.p
   19160:	8108 9129 a14a b16b c18c d1ad e1ce f1ef     ..).J.k.........
   19170:	1231 0210 3273 2252 52b5 4294 72f7 62d6     1...s2R".R.B.r.b
   19180:	9339 8318 b37b a35a d3bd c39c f3ff e3de     9...{.Z.........
   19190:	2462 3443 0420 1401 64e6 74c7 44a4 5485     b$C4 ....d.t.D.T
   191a0:	a56a b54b 8528 9509 e5ee f5cf c5ac d58d     j.K.(...........
   191b0:	3653 2672 1611 0630 76d7 66f6 5695 46b4     S6r&..0..v.f.V.F
   191c0:	b75b a77a 9719 8738 f7df e7fe d79d c7bc     [.z...8.........
   191d0:	48c4 58e5 6886 78a7 0840 1861 2802 3823     .H.X.h.x@.a..(#8
   191e0:	c9cc d9ed e98e f9af 8948 9969 a90a b92b     ........H.i...+.
   191f0:	5af5 4ad4 7ab7 6a96 1a71 0a50 3a33 2a12     .Z.J.z.jq.P.3:.*
   19200:	dbfd cbdc fbbf eb9e 9b79 8b58 bb3b ab1a     ........y.X.;...
   19210:	6ca6 7c87 4ce4 5cc5 2c22 3c03 0c60 1c41     .l.|.L.\",.<`.A.
   19220:	edae fd8f cdec ddcd ad2a bd0b 8d68 9d49     ........*...h.I.
   19230:	7e97 6eb6 5ed5 4ef4 3e13 2e32 1e51 0e70     .~.n.^.N.>2.Q.p.
   19240:	ff9f efbe dfdd cffc bf1b af3a 9f59 8f78     ..........:.Y.x.
   19250:	9188 81a9 b1ca a1eb d10c c12d f14e e16f     ..........-.N.o.
   19260:	1080 00a1 30c2 20e3 5004 4025 7046 6067     .....0. .P%@Fpg`
   19270:	83b9 9398 a3fb b3da c33d d31c e37f f35e     ........=.....^.
   19280:	02b1 1290 22f3 32d2 4235 5214 6277 7256     .....".25B.RwbVr
   19290:	b5ea a5cb 95a8 8589 f56e e54f d52c c50d     ........n.O.,...
   192a0:	34e2 24c3 14a0 0481 7466 6447 5424 4405     .4.$....ftGd$T.D
   192b0:	a7db b7fa 8799 97b8 e75f f77e c71d d73c     ........_.~...<.
   192c0:	26d3 36f2 0691 16b0 6657 7676 4615 5634     .&.6....Wfvv.F4V
   192d0:	d94c c96d f90e e92f 99c8 89e9 b98a a9ab     L.m.../.........
   192e0:	5844 4865 7806 6827 18c0 08e1 3882 28a3     DXeH.x'h.....8.(
   192f0:	cb7d db5c eb3f fb1e 8bf9 9bd8 abbb bb9a     }.\.?...........
   19300:	4a75 5a54 6a37 7a16 0af1 1ad0 2ab3 3a92     uJTZ7j.z.....*.:
   19310:	fd2e ed0f dd6c cd4d bdaa ad8b 9de8 8dc9     ....l.M.........
   19320:	7c26 6c07 5c64 4c45 3ca2 2c83 1ce0 0cc1     &|.ld\EL.<.,....
   19330:	ef1f ff3e cf5d df7c af9b bfba 8fd9 9ff8     ..>.].|.........
   19340:	6e17 7e36 4e55 5e74 2e93 3eb2 0ed1 1ef0     .n6~UNt^...>....

00019350 <Sd::Mount(SdInterface::CardInfo_t*)::file>:
   19350:	6473 682e 7070 ff00                         sd.hpp..

00019358 <Sd::Mount(SdInterface::CardInfo_t*)::file>:
   19358:	6473 682e 7070 ff00                         sd.hpp..

00019360 <Sd::Mount(SdInterface::CardInfo_t*)::file>:
   19360:	6473 682e 7070 ff00                         sd.hpp..

00019368 <Sd::Mount(SdInterface::CardInfo_t*)::file>:
   19368:	6473 682e 7070 ff00                         sd.hpp..

00019370 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file>:
   19370:	6473 682e 7070 ff00                         sd.hpp..

00019378 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file>:
   19378:	6473 682e 7070 ff00                         sd.hpp..

00019380 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file>:
   19380:	6473 682e 7070 ff00                         sd.hpp..

00019388 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file>:
   19388:	6473 682e 7070 ff00                         sd.hpp..

00019390 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file>:
   19390:	6473 682e 7070 ff00                         sd.hpp..

00019398 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file>:
   19398:	6473 682e 7070 ff00                         sd.hpp..

000193a0 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file>:
   193a0:	6473 682e 7070 ff00                         sd.hpp..

000193a8 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file>:
   193a8:	6473 682e 7070 ff00                         sd.hpp..

000193b0 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file>:
   193b0:	6473 682e 7070 ff00                         sd.hpp..

000193b8 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file>:
   193b8:	6473 682e 7070 ff00                         sd.hpp..

000193c0 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file>:
   193c0:	6473 682e 7070 ff00                         sd.hpp..

000193c8 <Sd::DeleteBlock(unsigned long, unsigned long)::file>:
   193c8:	6473 682e 7070 ff00                         sd.hpp..

000193d0 <Sd::DeleteBlock(unsigned long, unsigned long)::file>:
   193d0:	6473 682e 7070 ff00                         sd.hpp..

000193d8 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)::file>:
   193d8:	6473 682e 7070 ff00                         sd.hpp..

000193e0 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)::file>:
   193e0:	6473 682e 7070 ff00                         sd.hpp..

000193e8 <vtable for Sd>:
	...
   193f0:	6841 0001 5c99 0001 5d49 0001 615d 0001     Ah...\..I]..]a..
   19400:	6575 0001 6721 0001 6ce1 0001 6d29 0001     ue..!g...l..)m..
   19410:	6d99 0001                                   .m..

00019414 <vtable for SdInterface>:
	...
   1941c:	70c9 0001 70c9 0001 70c9 0001 70c9 0001     .p...p...p...p..
   1942c:	70c9 0001 70c9 0001 70c9 0001 70c9 0001     .p...p...p...p..
   1943c:	70c9 0001                                   .p..

00019440 <vtable for Ssp>:
	...
   19448:	5235 0001 5319 0001 5391 0001 53fd 0001     5R...S...S...S..
   19458:	54e9 0001 56f5 0001 5855 0001 5a41 0001     .T...V..UX..AZ..
   19468:	fffc ffff 0000 0000 0e19 0001 0ea9 0001     ................
   19478:	0f01 0001 0f19 0001 0f2d 0001 0f6d 0001     ........-...m...
   19488:	0f9d 0001                                   ....

0001948c <vtable for SspInterface>:
	...
   19494:	70c9 0001 70c9 0001 70c9 0001 70c9 0001     .p...p...p...p..
   194a4:	70c9 0001 70c9 0001 70c9 0001 70c9 0001     .p...p...p...p..

000194b4 <vtable for SystemControllerInterface>:
	...
   194bc:	70c9 0001 70c9 0001 70c9 0001 70c9 0001     .p...p...p...p..
   194cc:	70c9 0001 70c9 0001 70c9 0001               .p...p...p..

000194d8 <vtable for Gpio>:
	...
   194e0:	477d 0001 47f9 0001 4875 0001 48b9 0001     }G...G..uH...H..
   194f0:	491d 0001 4981 0001 49c5 0001 4a31 0001     .I...I...I..1J..
   19500:	4aa9 0001 4b19 0001 4db1 0001 4df9 0001     .J...K...M...M..
   19510:	4bc1 0001 4c1d 0001 4ca1 0001 4d29 0001     .K...L...L..)M..

00019520 <vtable for GpioInterface>:
	...
   19528:	70c9 0001 70c9 0001 70c9 0001 70c9 0001     .p...p...p...p..
   19538:	70c9 0001 70c9 0001 70c9 0001 70c9 0001     .p...p...p...p..
   19548:	70c9 0001 70c9 0001 70c9 0001 70c9 0001     .p...p...p...p..
   19558:	70c9 0001 70c9 0001 70c9 0001 70c9 0001     .p...p...p...p..

00019568 <vtable for PinInterface>:
	...
   19570:	70c9 0001 70c9 0001 70c9 0001 70c9 0001     .p...p...p...p..
   19580:	70c9 0001 70c9 0001 70c9 0001 70c9 0001     .p...p...p...p..
   19590:	70c9 0001 70c9 0001 70c9 0001 70c9 0001     .p...p...p...p..
   195a0:	70c9 0001                                   .p..

000195a4 <Gpio::ClearInterruptEdge(GpioInterface::Edge)::__PRETTY_FUNCTION__>:
   195a4:	6976 7472 6175 206c 6f76 6469 4720 6970     virtual void Gpi
   195b4:	3a6f 433a 656c 7261 6e49 6574 7272 7075     o::ClearInterrup
   195c4:	4574 6764 2865 7047 6f69 6e49 6574 6672     tEdge(GpioInterf
   195d4:	6361 3a65 453a 6764 2965 ff00               ace::Edge)..

000195e0 <Gpio::ValidPortCheck()::__PRETTY_FUNCTION__>:
   195e0:	6f62 6c6f 4720 6970 3a6f 563a 6c61 6469     bool Gpio::Valid
   195f0:	6f50 7472 6843 6365 286b 0029               PortCheck().

000195fc <Gpio::SetInterruptEdge(GpioInterface::Edge)::__PRETTY_FUNCTION__>:
   195fc:	6976 7472 6175 206c 6f76 6469 4720 6970     virtual void Gpi
   1960c:	3a6f 533a 7465 6e49 6574 7272 7075 4574     o::SetInterruptE
   1961c:	6764 2865 7047 6f69 6e49 6574 6672 6361     dge(GpioInterfac
   1962c:	3a65 453a 6764 2965 ff00 ffff               e::Edge)....

00019638 <Sd::Mount(SdInterface::CardInfo_t*)::__PRETTY_FUNCTION__>:
   19638:	6976 7472 6175 206c 6f62 6c6f 5320 3a64     virtual bool Sd:
   19648:	4d3a 756f 746e 5328 4964 746e 7265 6166     :Mount(SdInterfa
   19658:	6563 3a3a 6143 6472 6e49 6f66 745f 292a     ce::CardInfo_t*)
   19668:	ff00 ffff                                   ....

0001966c <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::__PRETTY_FUNCTION__>:
   1966c:	6976 7472 6175 206c 6975 746e 5f38 2074     virtual uint8_t 
   1967c:	6453 3a3a 6552 6461 6c42 636f 286b 6975     Sd::ReadBlock(ui
   1968c:	746e 3233 745f 202c 6975 746e 5f38 2a74     nt32_t, uint8_t*
   1969c:	202c 6975 746e 3233 745f 0029               , uint32_t).

000196a8 <Sd::DeleteBlock(unsigned long, unsigned long)::__PRETTY_FUNCTION__>:
   196a8:	6976 7472 6175 206c 6975 746e 5f38 2074     virtual uint8_t 
   196b8:	6453 3a3a 6544 656c 6574 6c42 636f 286b     Sd::DeleteBlock(
   196c8:	6975 746e 3233 745f 202c 6975 746e 3233     uint32_t, uint32
   196d8:	745f 0029                                   _t).

000196dc <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)::__PRETTY_FUNCTION__>:
   196dc:	6976 7472 6175 206c 6975 746e 3233 745f     virtual uint32_t
   196ec:	5320 3a64 533a 6e65 4364 646d 5328 4964      Sd::SendCmd(SdI
   196fc:	746e 7265 6166 6563 3a3a 6f43 6d6d 6e61     nterface::Comman
   1970c:	2c64 7520 6e69 3374 5f32 2c74 7520 6e69     d, uint32_t, uin
   1971c:	3874 745f 2c2a 7520 6e69 3374 5f32 2c74     t8_t*, uint32_t,
   1972c:	5320 4964 746e 7265 6166 6563 3a3a 654b      SdInterface::Ke
   1973c:	7065 6c41 7669 2965 ff00 ffff               epAlive)....

00019748 <__sf_fake_stderr>:
	...

00019768 <__sf_fake_stdin>:
	...

00019788 <__sf_fake_stdout>:
	...
