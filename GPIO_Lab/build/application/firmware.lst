
build/application/firmware.elf:     file format elf32-littlearm
build/application/firmware.elf
architecture: arm, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000123c9

Program Header:
0x70000001 off    0x00019348 vaddr 0x00019348 paddr 0x00019348 align 2**2
         filesz 0x00000008 memsz 0x00000008 flags r--
    LOAD off    0x00010000 vaddr 0x00010000 paddr 0x00010000 align 2**16
         filesz 0x00009350 memsz 0x00009350 flags r-x
    LOAD off    0x00020000 vaddr 0x10000000 paddr 0x00019350 align 2**16
         filesz 0x0000023c memsz 0x0000023c flags rw-
    LOAD off    0x00020240 vaddr 0x10000240 paddr 0x10000240 align 2**16
         filesz 0x00000000 memsz 0x0000036c flags rw-
private flags = 5000400: [Version5 EABI] [hard-float ABI]

Sections:
Idx Name             Size      VMA       LMA       File off  Algn  Flags
  0 .text            00009348  00010000  00010000  00010000  2**4  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data            0000023c  10000000  00019350  00020000  2**2  CONTENTS, ALLOC, LOAD, DATA
  2 .data_RAM2       00000000  20000000  20000000  0002023c  2**2  CONTENTS
  3 .bss             0000036c  10000240  10000240  00020240  2**3  ALLOC
  4 .ARM.exidx       00000008  00019348  00019348  00019348  2**2  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .uninit_RESERVED 00000000  10000000  10000000  0002023c  2**2  CONTENTS
  6 .noinit_RAM2     00000000  20000000  20000000  0002023c  2**2  CONTENTS
  7 .noinit          00000000  100005ac  100005ac  0002023c  2**2  CONTENTS
  8 .ARM.attributes  00000030  00000000  00000000  0002023c  2**0  CONTENTS, READONLY
  9 .comment         0000007e  00000000  00000000  0002026c  2**0  CONTENTS, READONLY
 10 .debug_info      0003ca9d  00000000  00000000  000202ea  2**0  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev    000042a9  00000000  00000000  0005cd87  2**0  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges   00000c30  00000000  00000000  00061030  2**0  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges    00000ba0  00000000  00000000  00061c60  2**0  CONTENTS, READONLY, DEBUGGING
 14 .debug_line      00006603  00000000  00000000  00062800  2**0  CONTENTS, READONLY, DEBUGGING
 15 .debug_str       000193f6  00000000  00000000  00068e03  2**0  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame     00002ff0  00000000  00000000  000821fc  2**2  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
00010000 l    d  .text	00000000 .text
10000000 l    d  .data	00000000 .data
20000000 l    d  .data_RAM2	00000000 .data_RAM2
10000240 l    d  .bss	00000000 .bss
00019348 l    d  .ARM.exidx	00000000 .ARM.exidx
10000000 l    d  .uninit_RESERVED	00000000 .uninit_RESERVED
20000000 l    d  .noinit_RAM2	00000000 .noinit_RAM2
100005ac l    d  .noinit	00000000 .noinit
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 interrupt.cpp
000129a4 l     F .text	0000002c NVIC_EnableIRQ
000129d0 l     F .text	00000054 NVIC_SetPriority
00010000 l     O .text	000000e4 kInterruptVectorTable
00017ef0 l     O .text	0000000e InterruptLookupHandler::file
00017f00 l     O .text	0000001e InterruptLookupHandler::__PRETTY_FUNCTION__
0001022c l       .text	00000000 handler2_address_const
00000000 l    df *ABS*	00000000 startup.cpp
10000260 l     O .bss	00000008 (anonymous namespace)::uptime
00010920 l     F .text	00000030 (anonymous namespace)::DefaultUptime()
00017b04 l     O .text	00000049 Lpc40xxSystemController::SetPeripheralClockDivider(unsigned char)::__PRETTY_FUNCTION__
00017bac l     O .text	0000005c Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)::__PRETTY_FUNCTION__
00017b50 l     O .text	0000005a Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)::__PRETTY_FUNCTION__
00017c08 l     O .text	0000003a Lpc40xxSystemController::SetCpuClockDivider(unsigned char)::__PRETTY_FUNCTION__
00017c44 l     O .text	0000003e Timer::Initialize(unsigned long, void (*)(), long)::__PRETTY_FUNCTION__
10000088 l     O .data	00000008 (anonymous namespace)::system_timer
10000090 l     O .data	00000004 (anonymous namespace)::system_controller
10000094 l     O .data	0000000c (anonymous namespace)::timer0
00012270 l     F .text	00000040 (anonymous namespace)::Lpc40xxUptime()
000179ec l     O .text	0000000c LowLevelInit()::file
00017c84 l     O .text	00000014 LowLevelInit()::__PRETTY_FUNCTION__
000102fc l     O .text	00000004 kCrpWord
000128b8 l     F .text	000000dc __static_initialization_and_destruction_0(int, int)
00012994 l     F .text	0000000e _GLOBAL__sub_I_UptimeRTOS
00000000 l    df *ABS*	00000000 /mnt/c/SJSU_Dev2/SJSU-Dev2/tools/gcc-arm-none-eabi-7-2017-q4-major/bin/../lib/gcc/arm-none-eabi/7.2.1/thumb/v7e-m/fpv4-sp/hard/crti.o
00000000 l    df *ABS*	00000000 /mnt/c/SJSU_Dev2/SJSU-Dev2/tools/gcc-arm-none-eabi-7-2017-q4-major/bin/../lib/gcc/arm-none-eabi/7.2.1/thumb/v7e-m/fpv4-sp/hard/crtn.o
00000000 l    df *ABS*	00000000 crtstuff.c
00010324 l     F .text	00000000 __do_global_dtors_aux
10000240 l       .bss	00000001 completed.9929
00010348 l     F .text	00000000 frame_dummy
10000244 l       .bss	00000018 object.9934
0001030c l     O .text	00000000 __frame_dummy_init_array_entry
00000000 l    df *ABS*	00000000 diskio.cpp
00019180 l     O .text	0000001c Gpio::ValidPortCheck()::__PRETTY_FUNCTION__
0001919c l     O .text	00000039 Gpio::SetInterruptEdge(GpioInterface::Edge)::__PRETTY_FUNCTION__
00019144 l     O .text	0000003b Gpio::ClearInterruptEdge(GpioInterface::Edge)::__PRETTY_FUNCTION__
000191d8 l     O .text	00000031 Sd::Mount(SdInterface::CardInfo_t*)::__PRETTY_FUNCTION__
0001920c l     O .text	0000003c Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::__PRETTY_FUNCTION__
00019248 l     O .text	00000034 Sd::DeleteBlock(unsigned long, unsigned long)::__PRETTY_FUNCTION__
0001927c l     O .text	00000069 Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)::__PRETTY_FUNCTION__
10000540 l     O .bss	00000068 (anonymous namespace)::sd_card
00016de8 l     F .text	00000050 __static_initialization_and_destruction_0(int, int)
00016e38 l     F .text	00000028 _GLOBAL__sub_I_disk_status
00000000 l    df *ABS*	00000000 LabGPIO.cpp
00000000 l    df *ABS*	00000000 main.cpp
00000000 l    df *ABS*	00000000 newlib.cpp
00000000 l    df *ABS*	00000000 tasks.c
100003c8 l     O .bss	00000064 pxReadyTasksLists
1000042c l     O .bss	00000004 uxTopReadyPriority
10000430 l     O .bss	00000004 xYieldPending
10000434 l     O .bss	00000004 uxSchedulerSuspended
10000438 l     O .bss	00000004 ulTaskSwitchedInTime
1000043c l     O .bss	00000004 ulTotalRunTime
00000000 l    df *ABS*	00000000 port.c
00012e60 l       .text	00000000 pxCurrentTCBConst2
00012ed0 l       .text	00000000 pxCurrentTCBConst
00000000 l    df *ABS*	00000000 printf.cpp
00012ed8 l     F .text	00000030 _out_null(char, void*, unsigned int, unsigned int)
00012f08 l     F .text	00000044 _out_char(char, void*, unsigned int, unsigned int)
00012f4c l     F .text	00000044 _strlen(char const*)
00012f90 l     F .text	00000044 _is_digit(char)
00012fd4 l     F .text	00000060 _atoi(char const**)
00013034 l     F .text	0000025c _ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)
00013290 l     F .text	000000e4 _ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)
00013374 l     F .text	000000f4 _ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)
00017f20 l     O .text	00000028 _ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)::pow10
00013468 l     F .text	00000438 _ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)
000138a0 l     F .text	000008f4 _vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)
00000000 l    df *ABS*	00000000 pure.cc
00000000 l    df *ABS*	00000000 eh_terminate.cc
00000000 l    df *ABS*	00000000 sf_round.c
00000000 l    df *ABS*	00000000 _arm_truncdfsf2.o
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 abort.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 signal.c
00000000 l    df *ABS*	00000000 signalr.c
00000000 l    df *ABS*	00000000 findfp.c
00000000 l    df *ABS*	00000000 eh_term_handler.cc
00000000 l    df *ABS*	00000000 impure.c
100001dc l     O .data	00000060 impure_data
00000000 l    df *ABS*	00000000 reent.c
00010ad8  w    F .text	0000003e Lpc40xxSystemController::GetPeripheralFrequency() const
00012c48 g     F .text	00000038 putchar
00012a24  w    F .text	0000006c Pwm0IrqHandler
00018b80  w    O .text	00000009 Gpio::SetInterruptEdge(GpioInterface::Edge)::file
00010218 g     F .text	0000001c HardFaultHandler
00012bb8 g     F .text	00000024 _getpid
00012c0c g     F .text	0000003c _putchar
00012a24  w    F .text	0000006c EepromIrqHandler
00012a24  w    F .text	0000006c Timer2IrqHandler
10000074  w    O .data	00000014 uart0
00012d4c g     F .text	0000002c GetStackDepth()
00018ef0  w    O .text	00000007 Sd::Mount(SdInterface::CardInfo_t*)::file
00014d2c  w    F .text	00000024 Lpc40xxSystemController::Lpc40xxSystemController()
000179b4  w    O .text	00000004 Timer::kTimerIrq
00018f28  w    O .text	00000007 Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file
00017354 g     F .text	00000024 _kill_r
0001010c g       .text	00000000 bss_section_table_end
00014194 g     F .text	0000004c printf
1000000c  w    O .data	00000004 SystemTimer::sys_tick
00012a24  w    F .text	0000006c I2c1IrqHandler
00012470  w    F .text	0000003c void Timer::TimerHandler<(TimerInterface::TimerPort)2>()
10000024  w    O .data	00000010 Uart::uart
00018f58  w    O .text	00000007 Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file
00010000 g       *ABS*	00000000 __vectors_start__
00010980  w    F .text	00000044 Milliseconds()
00010c3c  w    F .text	00000110 Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)
00014d7c  w    F .text	00000034 SspInterface::SspInterface()
00012a24  w    F .text	0000006c BusFaultHandler
100002c0 g     O .bss	00000100 stack_trace
10000010  w    O .data	00000004 Pin::pin_map
00011abc  w    F .text	000000e4 Uart::Initialize(unsigned long)
20000000 g       *ABS*	00000000 __base_RAM2
00019350 g       .ARM.exidx	00000000 __exidx_end
00014c1c  w    F .text	0000007c Gpio::ClearEdgeRising()
00010f24  w    F .text	00000030 Lpc40xxSystemController::SetEmcClockDivider(Lpc40xxSystemController::EmcDivider)
00018b74  w    O .text	00000009 Gpio::ValidPortCheck()::file
100003c4 g     O .bss	00000004 pxCurrentTCB
000141e0  w    F .text	00000034 PinInterface::PinInterface()
00012d08 g     F .text	0000001c __cyg_profile_func_exit
000169cc  w    F .text	00000048 Sd::Crc7Add(unsigned char, unsigned char)
000158e4  w    F .text	000000a0 Sd::Sd(Sd::DebugSdCard_t, unsigned char, unsigned char, unsigned char, unsigned char)
000126d8  w    F .text	000000a0 void Timer::ClearInterrupts<(TimerInterface::TimerPort)1>()
100005a8 g     O .bss	00000004 errno
00019350 g       .ARM.exidx	00000000 _etext
10000004  w    O .data	00000004 Lpc40xxSystemController::system_controller
000109c4  w    F .text	00000090 Lpc40xxSystemController::SetClockFrequency(unsigned char)
0001188c  w    F .text	00000030 unsigned char util::Value<TimerInterface::MatchControlRegister, unsigned char>(TimerInterface::MatchControlRegister)
00010ac4  w    F .text	00000014 Lpc40xxSystemController::GetSystemFrequency() const
00012080  w    F .text	000001f0 Uart::GenerateUartCalibration(float)
10000188  w    O .data	00000018 Gpio::gpio_port
000118bc  w    F .text	000000f8 Timer::SetTimer(unsigned long, TimerInterface::TimerIsrCondition, TimerInterface::MatchControlRegister)
000122f0  w    F .text	000000bc LowLevelInit()
00012a24  w    F .text	0000006c LcdIrqHandler
00018f80  w    O .text	00000007 Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)::file
00080000 g       *ABS*	00000000 __top_MFlash512
0001507c  w    F .text	0000006c Ssp::Transfer(unsigned short)
00011d20  w    F .text	000000f8 Uart::Receive(unsigned long)
00010bdc  w    F .text	00000030 Lpc40xxSystemController::SelectUsbClockSource(Lpc40xxSystemController::UsbSource)
00014388  w    F .text	00000030 Delay(unsigned long long)
000179dc  w    O .text	00000010 Uart::kPowerbit
00012a24  w    F .text	0000006c I2c2IrqHandler
10000268  w    O .bss	00000004 SystemTimer::system_timer_isr
00014ae4  w    F .text	00000040 Gpio::DetachInterrupt()
00012a24  w    F .text	0000006c CanIrqHandler
000115d8  w    F .text	00000074 Pin::EnableDac(bool)
0001054c g     F .text	00000124 LabGPIO::ReadBool()
00011308  w    F .text	0000007c Pin::SetAsAnalogMode(bool)
00010ebc  w    F .text	00000068 Lpc40xxSystemController::SetCpuClockDivider(unsigned char)
00016a84  w    F .text	000000fc Sd::GetCrc16(unsigned char*, unsigned short)
00016f8c g     F .text	00000000 .hidden __aeabi_uldivmod
100005ac g       .noinit	00000000 _noinit
00012c80 g     F .text	00000060 puts
100000a0 g     O .data	000000e4 dynamic_isr_vector_table
00014804  w    F .text	0000002c Gpio::GetPin()
000148ac  w    F .text	0000005c Gpio::SetInterruptRoutine(void (*)())
000143b8  w    F .text	00000034 GpioInterface::GpioInterface()
00014d7c  w    F .text	00000034 SspInterface::SspInterface()
00012a24  w    F .text	0000006c RitIrqHandler
00012a24  w    F .text	0000006c Uart2IrqHandler
0001164c  w    F .text	00000064 Pin::BitPlace(unsigned long, unsigned long, unsigned long, unsigned long)
0001798c  w    O .text	00000016 Lpc40xxSystemController::SetCpuClockDivider(unsigned char)::file
00018f10  w    O .text	00000007 Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file
000153e0  w    F .text	00000160 Ssp::GetPeripheralMode()
00012778  w    F .text	000000a0 void Timer::ClearInterrupts<(TimerInterface::TimerPort)2>()
00016e8c g     F .text	00000060 roundf
000172f4 g     F .text	00000050 _raise_r
00014298  w    F .text	0000002c Wait(unsigned long long)::{lambda()#1}::_FUN()
00014d50  w    F .text	0000002c int util::Value<Ssp::Peripheral, int>(Ssp::Peripheral)
00014db0  w    F .text	00000038 PinInterface::PinInterface(PinInterface const&)
10010000 g       *ABS*	00000000 __top_RAM
000179d8  w    O .text	00000004 Uart::kRxUartPortFunction
000142c4  w    F .text	000000c4 Wait(unsigned long long)
00012e70 g     F .text	00000066 xPortPendSVHandler
000158b0  w    F .text	00000034 SdInterface::SdInterface()
000119b4  w    F .text	0000003c Timer::GetTimer()
10000000 g       *ABS*	00000000 __base_RamLoc64
00012d24 g     F .text	00000028 GetStackTrace()
10000184 g     O .data	00000004 out
10000008  w    O .data	00000004 Lpc40xxSystemController::speed_in_hertz
00018f60  w    O .text	00000007 Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file
00018f48  w    O .text	00000007 Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file
00017378 g     F .text	00000004 _getpid_r
00000000 g       *ABS*	00000000 __base_MFlash512
00018fe0  w    O .text	0000004c vtable for Ssp
10010000 g       *ABS*	00000000 StackTop
00015d94  w    F .text	00000064 Sd::WaitToReadBlock()
00018b98  w    O .text	00000003 Ssp::kPinSelect
00016fbc g     F .text	000002cc .hidden __udivmoddi4
00012a24  w    F .text	0000006c I2sIrqHandler
000100fc g       .text	00000000 bss_section_table
00010300 g       .text	00000000 __CRP_WORD_END__
20008000 g       *ABS*	00000000 __top_RAM2
000123c8 g     F .text	00000030 ResetIsr
00015d50  w    F .text	00000044 Sd::ToBool(bool)
0001902c  w    O .text	00000028 vtable for SspInterface
00012a24  w    F .text	0000006c PendSVHandler
00015144  w    F .text	00000030 unsigned char util::Value<SspInterface::DataSize, unsigned char>(SspInterface::DataSize)
00010fc4  w    F .text	00000034 SystemTimer::SetIsrFunction(void (*)())
00016c68  w    F .text	00000044 bool bit::Read<unsigned long>(unsigned long, unsigned long)
00015004  w    F .text	00000078 Ssp::IsTransferRegBusy()
00012a24  w    F .text	0000006c UsageFaultHandler
20000000 g       *ABS*	00000000 __user_heap_base
00019348 g       .text	00000000 __exidx_start
000114f0  w    F .text	00000074 Pin::EnableI2cHighCurrentDrive(bool)
00012a24  w    F .text	0000006c Uart4IrqHandler
00014908  w    F .text	00000054 Gpio::ClearInterruptRoutine()
00011474  w    F .text	0000007c Pin::EnableI2cHighSpeedMode(bool)
000101fc g     F .text	00000018 InitFpu()
00011384  w    F .text	0000007c Pin::EnableDigitalFilter(bool)
0001729c g     F .text	00000048 __libc_init_array
00012a24 g     F .text	0000006c InterruptLookupHandler
00010c0c  w    F .text	00000030 Lpc40xxSystemController::SelectSpifiClockSource(Lpc40xxSystemController::SpifiSource)
00010aac  w    F .text	00000018 Lpc40xxSystemController::GetPeripheralClockDivider() const
10000000  w    O .data	00000004 Uptime
000190c0  w    O .text	00000048 vtable for GpioInterface
00011bec  w    F .text	000000e8 Uart::Send(unsigned char)
0001728c g     F .text	0000000e abort
00012a24  w    F .text	0000006c BodIrqHandler
0001572c  w    F .text	00000184 Ssp::GetClock()
00010300 g     F .text	00000000 _init
0001010c g       .text	00000000 section_table_end
00012818  w    F .text	000000a0 void Timer::ClearInterrupts<(TimerInterface::TimerPort)3>()
00016e80 g     F .text	0000000a std::terminate()
00016eec g     F .text	0000009e .hidden __aeabi_d2f
00014c98  w    F .text	0000007c Gpio::ClearEdgeFalling()
00012a24  w    F .text	0000006c SysTickHandler
000100e4 g       .text	00000000 section_table_start
100005ac g       .bss	00000000 _ebss
00014ba0  w    F .text	0000007c Gpio::SetEdgeFalling()
00018f20  w    O .text	00000007 Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file
00012a24  w    F .text	0000006c RtcIrqHandler
00014794  w    F .text	00000070 Gpio::Read()
000124e8  w    F .text	000000a8 Status Wait<Uart::Send(unsigned char)::{lambda()#1}>(unsigned long long, Uart::Send(unsigned char)::{lambda()#1})
eff8318a g       *ABS*	00000000 ValidUserCodeChecksum
00012a24  w    F .text	0000006c Uart0IrqHandler
00012aec g     F .text	00000078 GetRegistersFromStack
00016c2c  w    F .text	0000003c unsigned long bit::Set<unsigned long>(unsigned long, unsigned long)
00019108  w    O .text	0000003c vtable for PinInterface
00012a24  w    F .text	0000006c UsbIrqHandler
00012a24  w    F .text	0000006c AdcIrqHandler
00011cd4  w    F .text	0000004c Uart::Receive(unsigned long)::{lambda()#1}::operator()() const
00010950  w    F .text	00000030 SetUptimeFunction(unsigned long long (*)())
00010364 g     F .text	00000048 LabGPIO::LabGPIO(unsigned char, unsigned char)
000192e8 g     O .text	00000020 __sf_fake_stderr
00018bf0  w    O .text	00000100 Sd::kCrcTable8
00016e70 g     F .text	00000010 std::get_terminate()
00011f88  w    F .text	00000074 Uart::FractionalEstimate(float, float)
0001498c  w    F .text	00000088 Gpio::SetInterruptEdge(GpioInterface::Edge)
00012a24  w    F .text	0000006c EnetIrqHandler
00012a24  w    F .text	0000006c DmaIrqHandler
0001010c g     F .text	00000090 InitDataSection()
00012a90 g     F .text	0000005c RegisterIsr(IRQn, void (*)(), bool, long)
00000000 g       *ABS*	00000000 __base_Flash
00012a24  w    F .text	0000006c Eint1IrqHandler
100001c8  w    O .data	0000000c Ssp::ssp_registers
00012a24  w    F .text	0000006c SvcHandler
00012a24  w    F .text	0000006c GpioIrqHandler
00018f70  w    O .text	00000007 Sd::DeleteBlock(unsigned long, unsigned long)::file
00012a24  w    F .text	0000006c SdioIrqHandler
10010000 g       *ABS*	00000000 __top_RamLoc64
10000240 g       .bss	00000000 _bss
00018f08  w    O .text	00000007 Sd::Mount(SdInterface::CardInfo_t*)::file
00012a24  w    F .text	0000006c Pll1IrqHandler
00012a24  w    F .text	0000006c MemManageHandler
00016e60 g     F .text	00000006 __cxa_pure_virtual
00012a24  w    F .text	0000006c Pwm1IrqHandler
0001495c  w    F .text	00000030 unsigned char util::Value<GpioInterface::Edge, unsigned char>(GpioInterface::Edge)
00012a24  w    F .text	0000006c Timer0IrqHandler
00012590  w    F .text	000000a8 Status Wait<Uart::Receive(unsigned long)::{lambda()#1}>(unsigned long long, Uart::Receive(unsigned long)::{lambda()#1})
00080000 g       *ABS*	00000000 __top_Flash
00011ffc  w    F .text	00000084 Uart::IsDecmial(float)
00015540  w    F .text	000001ec Ssp::SetClock(bool, bool, unsigned char, unsigned char)
100005ac g       .noinit	00000000 _end_noinit
00010f54  w    F .text	0000003c SystemTimer::DisableTimer()
0001640c  w    F .text	00000120 Sd::DeleteBlock(unsigned long, unsigned long)
00012d78 g     F .text	000000c8 vTaskSwitchContext
00016d20  w    F .text	00000054 unsigned long bit::Extract<unsigned long>(unsigned long, unsigned long, unsigned long)
00014214  w    F .text	00000058 Pin::Pin(unsigned char, unsigned char)
000151a4  w    F .text	00000030 unsigned char util::Value<SspInterface::MasterSlaveMode, unsigned char>(SspInterface::MasterSlaveMode)
00018f30  w    O .text	00000007 Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file
000179d4  w    O .text	00000004 Uart::kTxUartPortFunction
00012a24  w    F .text	0000006c Uart3IrqHandler
00014d14  w    F .text	00000018 SystemControllerInterface::SystemControllerInterface()
00018f68  w    O .text	00000007 Sd::DeleteBlock(unsigned long, unsigned long)::file
20000000 g       *ABS*	00000000 __base_RamPeriph32
00018b8c  w    O .text	00000009 Gpio::ClearInterruptEdge(GpioInterface::Edge)::file
100003c0 g     O .bss	00000004 stack_depth
000146b0  w    F .text	0000006c Gpio::Toggle()
00018f40  w    O .text	00000007 Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file
00018cf0  w    O .text	00000200 Sd::kCrcTable16
10000440  w    O .bss	00000100 Gpio::interrupthandlers
00017288  w    F .text	00000002 .hidden __aeabi_ldiv0
00012a24  w    F .text	0000006c Timer1IrqHandler
00011f14  w    F .text	00000074 Uart::DividerEstimate(float, float)
000145a4  w    F .text	00000064 Gpio::SetHigh()
00011e18  w    F .text	000000fc Uart::FindClosestFractional(float)
00014e3c  w    F .text	000000e4 Ssp::Ssp(Ssp::Peripheral)
000100e4 g       .text	00000000 data_section_table
000111a0  w    F .text	00000080 Pin::SetMode(PinInterface::Mode)
00017944  w    O .text	00000016 Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)::file
00015df8  w    F .text	00000050 Sd::WaitWhileBusy()
00011094  w    F .text	00000094 SystemTimer::SetTickFrequency(unsigned long)
00019308 g     O .text	00000020 __sf_fake_stdin
00016d74  w    F .text	00000074 unsigned long bit::Insert<unsigned long, bool>(unsigned long, bool, unsigned long, unsigned long)
000102fc g       .text	00000000 __CRP_WORD_START__
000179b8  w    O .text	00000010 Timer::kTimerIsr
00014a9c  w    F .text	00000048 Gpio::AttachInterrupt(void (*)(), GpioInterface::Edge)
00012a24  w    F .text	0000006c Uart1IrqHandler
00014468  w    F .text	0000007c Gpio::SetAsInput()
00012ce0 g     F .text	00000028 __cyg_profile_func_enter
000172e4 g     F .text	00000010 memset
0001077c g     F .text	000000a4 main
000158e4  w    F .text	000000a0 Sd::Sd(Sd::DebugSdCard_t, unsigned char, unsigned char, unsigned char, unsigned char)
100001a0  w    O .data	00000028 Gpio::interrupt
00011738  w    F .text	00000020 Timer::DoNothingIsr()
00012a24  w    F .text	0000006c QeiIrqHandler
20000000 g       *ABS*	00000000 heap
00012a24  w    F .text	0000006c Ssp2IrqHandler
000116b0  w    F .text	0000002c Pin::GetPort() const
00016260  w    F .text	000001ac Sd::WriteBlock(unsigned long, unsigned char const*, unsigned long)
00014214  w    F .text	00000058 Pin::Pin(unsigned char, unsigned char)
00016eec g     F .text	0000009e .hidden __truncdfsf2
00010318 g       .text	00000000 __init_array_end
00012e40 g     F .text	00000026 vPortSVCHandler
00012b64 g     F .text	0000003c FirmwareStdOut(int)
00018f88  w    O .text	0000002c vtable for Sd
00014a14  w    F .text	00000088 Gpio::ClearInterruptEdge(GpioInterface::Edge)
00012a24  w    F .text	0000006c Ssp1IrqHandler
000123f8  w    F .text	0000003c void Timer::TimerHandler<(TimerInterface::TimerPort)0>()
00018be4  w    O .text	0000000c Ssp::kPowerBit
000116dc  w    F .text	0000002c Pin::GetPin() const
000119f0  w    F .text	000000cc Uart::SetBaudRate(unsigned long)
00014560  w    F .text	00000044 Gpio::SetDirection(GpioInterface::Direction)
000179f8  w    O .text	0000003c vtable for Uart
000144e4  w    F .text	0000007c Gpio::SetAsOutput()
00018f50  w    O .text	00000007 Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file
00010d4c  w    F .text	00000170 Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)
00014608  w    F .text	00000064 Gpio::SetLow()
00017ae0  w    O .text	00000024 vtable for Lpc40xxSystemController
00015e48  w    F .text	00000418 Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)
00018f78  w    O .text	00000007 Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)::file
0001792c  w    O .text	00000016 Lpc40xxSystemController::SetPeripheralClockDivider(unsigned char)::file
000123ac g     F .text	0000001a SystemInit
00011758  w    F .text	00000134 Timer::Initialize(unsigned long, void (*)(), long)
00010b18  w    F .text	00000030 Lpc40xxSystemController::PowerUpPeripheral(SystemControllerInterface::PeripheralID const&)
20008000 g       *ABS*	00000000 heap_end
00014f20  w    F .text	000000e4 Ssp::Initialize()
00017a34  w    O .text	00000038 vtable for Timer
00014db0  w    F .text	00000038 PinInterface::PinInterface(PinInterface const&)
10000014  w    O .data	00000010 Timer::tim_register
00012a24  w    F .text	0000006c Ssp0IrqHandler
00010364 g     F .text	00000048 LabGPIO::LabGPIO(unsigned char, unsigned char)
00010318 g     F .text	00000000 _fini
00012a24  w    F .text	0000006c UsbactivityIrqHandler
0001466c  w    F .text	00000044 Gpio::Set(GpioInterface::State)
00012a24  w    F .text	0000006c Pll0IrqHandler
00014de8  w    F .text	00000054 Pin::Pin(Pin const&)
000100fc g       .text	00000000 data_section_table_end
00012a24  w    F .text	0000006c CanactivityIrqHandler
00012a24  w    F .text	0000006c NmiHandler
00018b9c  w    O .text	00000048 Ssp::kSspPinMatrix
0001471c  w    F .text	00000078 Gpio::ReadState()
00018f18  w    O .text	00000007 Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file
100001d8 g     O .data	00000004 _impure_ptr
00016b80  w    F .text	000000ac Status Wait<Wait(unsigned long long)::{lambda()#1}>(unsigned long long, Wait(unsigned long long)::{lambda()#1})
10000000 g       .uninit_RESERVED	00000000 _end_uninit_RESERVED
00016a14  w    F .text	00000070 Sd::GetCrc7(unsigned char*, unsigned char)
00012a24  w    F .text	0000006c McpwmIrqHandler
0001030c g       .text	00000000 __preinit_array_end
00012a24  w    F .text	0000006c WdtIrqHandler
0001426c  w    F .text	0000002c Wait(unsigned long long)::{lambda()#1}::operator()() const
0001652c  w    F .text	000004a0 Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)
00014d2c  w    F .text	00000024 Lpc40xxSystemController::Lpc40xxSystemController()
00017a6c  w    O .text	0000003c vtable for Pin
10000000 g       .data	00000000 _data
00011294  w    F .text	00000074 Pin::SetAsActiveLow(bool)
00010bac  w    F .text	00000030 Lpc40xxSystemController::SelectMainClockSource(Lpc40xxSystemController::MainClockSource)
00014b24  w    F .text	0000007c Gpio::SetEdgeRising()
00018ef8  w    O .text	00000007 Sd::Mount(SdInterface::CardInfo_t*)::file
00011708  w    F .text	00000030 unsigned char util::Value<TimerInterface::TimerPort, unsigned char>(TimerInterface::TimerPort)
100002ac  w    O .bss	00000010 Timer::user_timer_isr
0001795c  w    O .text	00000016 Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)::file
1000026c  w    O .bss	00000040 Timer::match
0001047c g     F .text	000000d0 LabGPIO::SetLow()
00011ba0  w    F .text	0000004c Uart::Send(unsigned char)::{lambda()#1}::operator()() const
00015a34  w    F .text	0000031c Sd::Mount(SdInterface::CardInfo_t*)
100001d4 g     O .data	00000004 __cxxabiv1::__terminate_handler
00019054  w    O .text	00000024 vtable for SystemControllerInterface
00019078  w    O .text	00000048 vtable for Gpio
1000023c g       .data	00000000 _edata
000179a4  w    O .text	00000010 Timer::kPowerbit
00012434  w    F .text	0000003c void Timer::TimerHandler<(TimerInterface::TimerPort)1>()
00011220  w    F .text	00000074 Pin::EnableHysteresis(bool)
000143b8  w    F .text	00000034 GpioInterface::GpioInterface()
00010670 g     F .text	0000010c LabGPIO::toggle()
00012a24  w    F .text	0000006c DebugMonHandler
00014830  w    F .text	0000007c Gpio::ValidPortCheck()
00012a24  w    F .text	0000006c Eint2IrqHandler
20008000 g       *ABS*	00000000 __top_RamPeriph32
00014e3c  w    F .text	000000e4 Ssp::Ssp(Ssp::Peripheral)
00012a24  w    F .text	0000006c Timer3IrqHandler
000103ac g     F .text	000000d0 LabGPIO::SetHigh()
10000000 g       *ABS*	00000000 __base_RAM
00012a24  w    F .text	0000006c Eint3IrqHandler
00016e66 g     F .text	00000008 __cxxabiv1::__terminate(void (*)())
00012bdc g     F .text	00000030 _kill
00012a24  w    F .text	0000006c I2c0IrqHandler
00014de8  w    F .text	00000054 Pin::Pin(Pin const&)
000179c8  w    O .text	0000000a Timer::Initialize(unsigned long, void (*)(), long)::file
00010f90  w    F .text	00000034 SystemTimer::SystemTimerHandler()
00018f00  w    O .text	00000007 Sd::Mount(SdInterface::CardInfo_t*)::file
00019328 g     O .text	00000020 __sf_fake_stdout
00010820  w    F .text	00000100 debug::PrintBacktrace(bool, void*)
0001030c g       .text	00000000 __init_array_start
00017288  w    F .text	00000002 .hidden __aeabi_idiv0
00018fb4  w    O .text	0000002c vtable for SdInterface
00015984  w    F .text	000000b0 Sd::Initialize()
00012ba0 g     F .text	00000018 _exit
00011400  w    F .text	00000074 Pin::EnableFastMode(bool)
00012638  w    F .text	000000a0 void Timer::ClearInterrupts<(TimerInterface::TimerPort)0>()
00012a24  w    F .text	0000006c Eint0IrqHandler
00010ff8  w    F .text	0000009c SystemTimer::StartTimer()
00015174  w    F .text	00000030 unsigned char util::Value<SspInterface::FrameMode, unsigned char>(SspInterface::FrameMode)
0001019c g     F .text	00000060 InitBssSection()
000143ec  w    F .text	0000007c Gpio::Gpio(unsigned char, unsigned char)
000122b0 g     F .text	00000040 UptimeRTOS
00011564  w    F .text	00000074 Pin::SetAsOpenDrain(bool)
00017aa8  w    O .text	00000038 vtable for SystemTimer
00012a24  w    F .text	0000006c SpiIrqHandler
00018f38  w    O .text	00000007 Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file
000150e8  w    F .text	0000005c Ssp::SetSpiMasterDefault()
10000034  w    O .data	00000040 Uart::pairs
00014d14  w    F .text	00000018 SystemControllerInterface::SystemControllerInterface()
00010b48  w    F .text	00000030 Lpc40xxSystemController::PowerDownPeripheral(SystemControllerInterface::PeripheralID const&)
000158b0  w    F .text	00000034 SdInterface::SdInterface()
0001030c g       .text	00000000 __preinit_array_start
00017974  w    O .text	00000016 Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)::file
00010b78  w    F .text	00000034 Lpc40xxSystemController::SelectOscillatorSource(Lpc40xxSystemController::OscillatorSource)
100002bc  w    O .bss	00000004 guard variable for Timer::match
000151d4  w    F .text	0000020c Ssp::SetPeripheralMode(SspInterface::MasterSlaveMode, SspInterface::FrameMode, SspInterface::DataSize)
00011128  w    F .text	00000078 Pin::SetPinFunction(unsigned char)
00016cac  w    F .text	00000074 unsigned long bit::Insert<unsigned long, unsigned char>(unsigned long, unsigned char, unsigned long, unsigned long)
000141e0  w    F .text	00000034 PinInterface::PinInterface()
00010a54  w    F .text	00000058 Lpc40xxSystemController::SetPeripheralClockDivider(unsigned char)
000143ec  w    F .text	0000007c Gpio::Gpio(unsigned char, unsigned char)
000124ac  w    F .text	0000003c void Timer::TimerHandler<(TimerInterface::TimerPort)3>()
00017344 g     F .text	00000010 raise



Disassembly of section .text:

00010000 <kInterruptVectorTable>:
   10000:	00 00 01 10 c9 23 01 00 25 2a 01 00 19 02 01 00     .....#..%*......
   10010:	25 2a 01 00 25 2a 01 00 25 2a 01 00 8a 31 f8 ef     %*..%*..%*...1..
	...
   1002c:	41 2e 01 00 25 2a 01 00 00 00 00 00 71 2e 01 00     A...%*......q...
   1003c:	25 2a 01 00 25 2a 01 00 25 2a 01 00 25 2a 01 00     %*..%*..%*..%*..
   1004c:	25 2a 01 00 25 2a 01 00 25 2a 01 00 25 2a 01 00     %*..%*..%*..%*..
   1005c:	25 2a 01 00 25 2a 01 00 25 2a 01 00 25 2a 01 00     %*..%*..%*..%*..
   1006c:	25 2a 01 00 25 2a 01 00 00 00 00 00 25 2a 01 00     %*..%*......%*..
   1007c:	25 2a 01 00 25 2a 01 00 25 2a 01 00 25 2a 01 00     %*..%*..%*..%*..
   1008c:	25 2a 01 00 25 2a 01 00 25 2a 01 00 25 2a 01 00     %*..%*..%*..%*..
   1009c:	25 2a 01 00 25 2a 01 00 25 2a 01 00 25 2a 01 00     %*..%*..%*..%*..
   100ac:	25 2a 01 00 25 2a 01 00 25 2a 01 00 25 2a 01 00     %*..%*..%*..%*..
   100bc:	25 2a 01 00 25 2a 01 00 25 2a 01 00 25 2a 01 00     %*..%*..%*..%*..
   100cc:	25 2a 01 00 25 2a 01 00 25 2a 01 00 25 2a 01 00     %*..%*..%*..%*..
   100dc:	25 2a 01 00 25 2a 01 00                             %*..%*..

000100e4 <data_section_table>:
   100e4:	00019350 	.word	0x00019350
   100e8:	10000000 	.word	0x10000000
   100ec:	0000023c 	.word	0x0000023c
   100f0:	00019350 	.word	0x00019350
   100f4:	20000000 	.word	0x20000000
   100f8:	00000000 	.word	0x00000000

000100fc <bss_section_table>:
   100fc:	10000240 	.word	0x10000240
   10100:	0000036c 	.word	0x0000036c
   10104:	20000000 	.word	0x20000000
   10108:	00000000 	.word	0x00000000

0001010c <InitDataSection()>:
SJ2_IGNORE_STACK_TRACE(void SystemInit());

// Functions to carry out the initialization of RW and BSS data sections.
SJ2_SECTION(".after_vectors")
void InitDataSection()
{
   1010c:	b086      	sub	sp, #24
  for (int i = 0; &data_section_table[i] < &data_section_table_end; i++)
   1010e:	2300      	movs	r3, #0
   10110:	9305      	str	r3, [sp, #20]
   10112:	9a05      	ldr	r2, [sp, #20]
   10114:	4613      	mov	r3, r2
   10116:	005b      	lsls	r3, r3, #1
   10118:	4413      	add	r3, r2
   1011a:	009b      	lsls	r3, r3, #2
   1011c:	4a1d      	ldr	r2, [pc, #116]	; (10194 <InitDataSection()+0x88>)
   1011e:	4413      	add	r3, r2
   10120:	4a1d      	ldr	r2, [pc, #116]	; (10198 <InitDataSection()+0x8c>)
   10122:	4293      	cmp	r3, r2
   10124:	d233      	bcs.n	1018e <InitDataSection()+0x82>
  {
    uint32_t * rom_location = data_section_table[i].rom_location;
   10126:	491b      	ldr	r1, [pc, #108]	; (10194 <InitDataSection()+0x88>)
   10128:	9a05      	ldr	r2, [sp, #20]
   1012a:	4613      	mov	r3, r2
   1012c:	005b      	lsls	r3, r3, #1
   1012e:	4413      	add	r3, r2
   10130:	009b      	lsls	r3, r3, #2
   10132:	440b      	add	r3, r1
   10134:	681b      	ldr	r3, [r3, #0]
   10136:	9303      	str	r3, [sp, #12]
    uint32_t * ram_location = data_section_table[i].ram_location;
   10138:	4916      	ldr	r1, [pc, #88]	; (10194 <InitDataSection()+0x88>)
   1013a:	9a05      	ldr	r2, [sp, #20]
   1013c:	4613      	mov	r3, r2
   1013e:	005b      	lsls	r3, r3, #1
   10140:	4413      	add	r3, r2
   10142:	009b      	lsls	r3, r3, #2
   10144:	440b      	add	r3, r1
   10146:	685b      	ldr	r3, [r3, #4]
   10148:	9302      	str	r3, [sp, #8]
    uint32_t length         = data_section_table[i].length;
   1014a:	4912      	ldr	r1, [pc, #72]	; (10194 <InitDataSection()+0x88>)
   1014c:	9a05      	ldr	r2, [sp, #20]
   1014e:	4613      	mov	r3, r2
   10150:	005b      	lsls	r3, r3, #1
   10152:	4413      	add	r3, r2
   10154:	009b      	lsls	r3, r3, #2
   10156:	440b      	add	r3, r1
   10158:	3308      	adds	r3, #8
   1015a:	681b      	ldr	r3, [r3, #0]
   1015c:	9301      	str	r3, [sp, #4]
    for (size_t j = 0; j < length; j++)
   1015e:	2300      	movs	r3, #0
   10160:	9304      	str	r3, [sp, #16]
   10162:	9a04      	ldr	r2, [sp, #16]
   10164:	9b01      	ldr	r3, [sp, #4]
   10166:	429a      	cmp	r2, r3
   10168:	d20d      	bcs.n	10186 <InitDataSection()+0x7a>
    {
      ram_location[j] = rom_location[j];
   1016a:	9b04      	ldr	r3, [sp, #16]
   1016c:	009b      	lsls	r3, r3, #2
   1016e:	9a03      	ldr	r2, [sp, #12]
   10170:	441a      	add	r2, r3
   10172:	9b04      	ldr	r3, [sp, #16]
   10174:	009b      	lsls	r3, r3, #2
   10176:	9902      	ldr	r1, [sp, #8]
   10178:	440b      	add	r3, r1
   1017a:	6812      	ldr	r2, [r2, #0]
   1017c:	601a      	str	r2, [r3, #0]
    for (size_t j = 0; j < length; j++)
   1017e:	9b04      	ldr	r3, [sp, #16]
   10180:	3301      	adds	r3, #1
   10182:	9304      	str	r3, [sp, #16]
   10184:	e7ed      	b.n	10162 <InitDataSection()+0x56>
  for (int i = 0; &data_section_table[i] < &data_section_table_end; i++)
   10186:	9b05      	ldr	r3, [sp, #20]
   10188:	3301      	adds	r3, #1
   1018a:	9305      	str	r3, [sp, #20]
   1018c:	e7c1      	b.n	10112 <InitDataSection()+0x6>
    }
  }
}
   1018e:	bf00      	nop
   10190:	b006      	add	sp, #24
   10192:	4770      	bx	lr
   10194:	000100e4 	.word	0x000100e4
   10198:	000100fc 	.word	0x000100fc

0001019c <InitBssSection()>:

// Functions to initialization BSS data sections. This is important because
// the std c libs assume that BSS is set to zero.
SJ2_SECTION(".after_vectors")
void InitBssSection()
{
   1019c:	b084      	sub	sp, #16
  for (int i = 0; &bss_section_table[i] < &bss_section_table_end; i++)
   1019e:	2300      	movs	r3, #0
   101a0:	9303      	str	r3, [sp, #12]
   101a2:	9b03      	ldr	r3, [sp, #12]
   101a4:	00db      	lsls	r3, r3, #3
   101a6:	4a13      	ldr	r2, [pc, #76]	; (101f4 <InitBssSection()+0x58>)
   101a8:	4413      	add	r3, r2
   101aa:	4a13      	ldr	r2, [pc, #76]	; (101f8 <InitBssSection()+0x5c>)
   101ac:	4293      	cmp	r3, r2
   101ae:	d21e      	bcs.n	101ee <InitBssSection()+0x52>
  {
    uint32_t * ram_location = bss_section_table[i].ram_location;
   101b0:	4a10      	ldr	r2, [pc, #64]	; (101f4 <InitBssSection()+0x58>)
   101b2:	9b03      	ldr	r3, [sp, #12]
   101b4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
   101b8:	9301      	str	r3, [sp, #4]
    uint32_t length         = bss_section_table[i].length;
   101ba:	4a0e      	ldr	r2, [pc, #56]	; (101f4 <InitBssSection()+0x58>)
   101bc:	9b03      	ldr	r3, [sp, #12]
   101be:	00db      	lsls	r3, r3, #3
   101c0:	4413      	add	r3, r2
   101c2:	685b      	ldr	r3, [r3, #4]
   101c4:	9300      	str	r3, [sp, #0]
    for (size_t j = 0; j < length; j++)
   101c6:	2300      	movs	r3, #0
   101c8:	9302      	str	r3, [sp, #8]
   101ca:	9a02      	ldr	r2, [sp, #8]
   101cc:	9b00      	ldr	r3, [sp, #0]
   101ce:	429a      	cmp	r2, r3
   101d0:	d209      	bcs.n	101e6 <InitBssSection()+0x4a>
    {
      ram_location[j] = 0;
   101d2:	9b02      	ldr	r3, [sp, #8]
   101d4:	009b      	lsls	r3, r3, #2
   101d6:	9a01      	ldr	r2, [sp, #4]
   101d8:	4413      	add	r3, r2
   101da:	2200      	movs	r2, #0
   101dc:	601a      	str	r2, [r3, #0]
    for (size_t j = 0; j < length; j++)
   101de:	9b02      	ldr	r3, [sp, #8]
   101e0:	3301      	adds	r3, #1
   101e2:	9302      	str	r3, [sp, #8]
   101e4:	e7f1      	b.n	101ca <InitBssSection()+0x2e>
  for (int i = 0; &bss_section_table[i] < &bss_section_table_end; i++)
   101e6:	9b03      	ldr	r3, [sp, #12]
   101e8:	3301      	adds	r3, #1
   101ea:	9303      	str	r3, [sp, #12]
   101ec:	e7d9      	b.n	101a2 <InitBssSection()+0x6>
    }
  }
}
   101ee:	bf00      	nop
   101f0:	b004      	add	sp, #16
   101f2:	4770      	bx	lr
   101f4:	000100fc 	.word	0x000100fc
   101f8:	0001010c 	.word	0x0001010c

000101fc <InitFpu()>:
      // Write back the modified value to the CPACR
      "STR     R1, [R0]\n"
      // Wait for store to complete
      "DSB\n"
      // reset pipeline now the FPU is enabled
      "ISB\n");
   101fc:	f8df 0014 	ldr.w	r0, [pc, #20]	; 10214 <InitFpu()+0x18>
   10200:	6801      	ldr	r1, [r0, #0]
   10202:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   10206:	6001      	str	r1, [r0, #0]
   10208:	f3bf 8f4f 	dsb	sy
   1020c:	f3bf 8f6f 	isb	sy
}
   10210:	bf00      	nop
   10212:	4770      	bx	lr
   10214:	e000ed88 	.word	0xe000ed88

00010218 <HardFaultHandler>:
      " mrseq r0, msp                                       \n"
      " mrsne r0, psp                                       \n"
      " ldr r1, [r0, #24]                                   \n"
      " ldr r2, handler2_address_const                      \n"
      " bx r2                                               \n"
      " handler2_address_const: .word GetRegistersFromStack \n");
   10218:	f01e 0f04 	tst.w	lr, #4
   1021c:	bf0c      	ite	eq
   1021e:	f3ef 8008 	mrseq	r0, MSP
   10222:	f3ef 8009 	mrsne	r0, PSP
   10226:	6981      	ldr	r1, [r0, #24]
   10228:	4a00      	ldr	r2, [pc, #0]	; (1022c <handler2_address_const>)
   1022a:	4710      	bx	r2

0001022c <handler2_address_const>:
   1022c:	00012aed 	.word	0x00012aed
#endif
}
   10230:	bf00      	nop
   10232:	4770      	bx	lr
   10234:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   10238:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   1023c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   10240:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   10244:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   10248:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   1024c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   10250:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   10254:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   10258:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   1025c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   10260:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   10264:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   10268:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   1026c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   10270:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   10274:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   10278:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   1027c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   10280:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   10284:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   10288:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   1028c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   10290:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   10294:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   10298:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   1029c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102a0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102a4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102a8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102ac:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102b0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102b4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102b8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102bc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102c0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102c4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102c8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102cc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102d0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102d4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102d8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102dc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102e0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102e4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102e8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102ec:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102f0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102f4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102f8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

000102fc <__CRP_WORD_START__>:
   102fc:	ffffffff 	.word	0xffffffff

00010300 <_init>:
   10300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10302:	bf00      	nop
   10304:	bcf8      	pop	{r3, r4, r5, r6, r7}
   10306:	bc08      	pop	{r3}
   10308:	469e      	mov	lr, r3
   1030a:	4770      	bx	lr

0001030c <__init_array_start>:
   1030c:	00010349 	.word	0x00010349
   10310:	00012995 	.word	0x00012995
   10314:	00016e39 	.word	0x00016e39

00010318 <_fini>:
   10318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1031a:	bf00      	nop
   1031c:	bcf8      	pop	{r3, r4, r5, r6, r7}
   1031e:	bc08      	pop	{r3}
   10320:	469e      	mov	lr, r3
   10322:	4770      	bx	lr

00010324 <__do_global_dtors_aux>:
   10324:	b510      	push	{r4, lr}
   10326:	4c05      	ldr	r4, [pc, #20]	; (1033c <__do_global_dtors_aux+0x18>)
   10328:	7823      	ldrb	r3, [r4, #0]
   1032a:	b933      	cbnz	r3, 1033a <__do_global_dtors_aux+0x16>
   1032c:	4b04      	ldr	r3, [pc, #16]	; (10340 <__do_global_dtors_aux+0x1c>)
   1032e:	b113      	cbz	r3, 10336 <__do_global_dtors_aux+0x12>
   10330:	4804      	ldr	r0, [pc, #16]	; (10344 <__do_global_dtors_aux+0x20>)
   10332:	f3af 8000 	nop.w
   10336:	2301      	movs	r3, #1
   10338:	7023      	strb	r3, [r4, #0]
   1033a:	bd10      	pop	{r4, pc}
   1033c:	10000240 	.word	0x10000240
   10340:	00000000 	.word	0x00000000
   10344:	00019350 	.word	0x00019350

00010348 <frame_dummy>:
   10348:	b508      	push	{r3, lr}
   1034a:	4b03      	ldr	r3, [pc, #12]	; (10358 <frame_dummy+0x10>)
   1034c:	b11b      	cbz	r3, 10356 <frame_dummy+0xe>
   1034e:	4903      	ldr	r1, [pc, #12]	; (1035c <frame_dummy+0x14>)
   10350:	4803      	ldr	r0, [pc, #12]	; (10360 <frame_dummy+0x18>)
   10352:	f3af 8000 	nop.w
   10356:	bd08      	pop	{r3, pc}
   10358:	00000000 	.word	0x00000000
   1035c:	10000244 	.word	0x10000244
   10360:	00019350 	.word	0x00019350

00010364 <LabGPIO::LabGPIO(unsigned char, unsigned char)>:


#include "LabGPIO.hpp"
 
  LabGPIO::LabGPIO(uint8_t port, uint8_t pin){
   10364:	b530      	push	{r4, r5, lr}
   10366:	b083      	sub	sp, #12
   10368:	4675      	mov	r5, lr
   1036a:	9001      	str	r0, [sp, #4]
   1036c:	460b      	mov	r3, r1
   1036e:	f88d 3003 	strb.w	r3, [sp, #3]
   10372:	4613      	mov	r3, r2
   10374:	f88d 3002 	strb.w	r3, [sp, #2]
   10378:	462b      	mov	r3, r5
   1037a:	4619      	mov	r1, r3
   1037c:	480a      	ldr	r0, [pc, #40]	; (103a8 <LabGPIO::LabGPIO(unsigned char, unsigned char)+0x44>)
   1037e:	f002 fcaf 	bl	12ce0 <__cyg_profile_func_enter>
    SelPort = port;
   10382:	9b01      	ldr	r3, [sp, #4]
   10384:	f89d 2003 	ldrb.w	r2, [sp, #3]
   10388:	701a      	strb	r2, [r3, #0]
    SelPin = pin;
   1038a:	9b01      	ldr	r3, [sp, #4]
   1038c:	f89d 2002 	ldrb.w	r2, [sp, #2]
   10390:	705a      	strb	r2, [r3, #1]
 
  }
   10392:	9c01      	ldr	r4, [sp, #4]
   10394:	462b      	mov	r3, r5
   10396:	4619      	mov	r1, r3
   10398:	4803      	ldr	r0, [pc, #12]	; (103a8 <LabGPIO::LabGPIO(unsigned char, unsigned char)+0x44>)
   1039a:	f002 fcb5 	bl	12d08 <__cyg_profile_func_exit>
   1039e:	4623      	mov	r3, r4
   103a0:	4618      	mov	r0, r3
   103a2:	b003      	add	sp, #12
   103a4:	bd30      	pop	{r4, r5, pc}
   103a6:	bf00      	nop
   103a8:	00010365 	.word	0x00010365

000103ac <LabGPIO::SetHigh()>:
    break;
  }
 
  }

  void LabGPIO::SetHigh(){
   103ac:	b510      	push	{r4, lr}
   103ae:	b082      	sub	sp, #8
   103b0:	4674      	mov	r4, lr
   103b2:	9001      	str	r0, [sp, #4]
   103b4:	4623      	mov	r3, r4
   103b6:	4619      	mov	r1, r3
   103b8:	4829      	ldr	r0, [pc, #164]	; (10460 <LabGPIO::SetHigh()+0xb4>)
   103ba:	f002 fc91 	bl	12ce0 <__cyg_profile_func_enter>
       /// Set voltage of pin to HIGH
     switch(SelPort){
   103be:	9b01      	ldr	r3, [sp, #4]
   103c0:	781b      	ldrb	r3, [r3, #0]
   103c2:	2b05      	cmp	r3, #5
   103c4:	d844      	bhi.n	10450 <LabGPIO::SetHigh()+0xa4>
   103c6:	a201      	add	r2, pc, #4	; (adr r2, 103cc <LabGPIO::SetHigh()+0x20>)
   103c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   103cc:	000103e5 	.word	0x000103e5
   103d0:	000103f7 	.word	0x000103f7
   103d4:	00010409 	.word	0x00010409
   103d8:	0001041b 	.word	0x0001041b
   103dc:	0001042d 	.word	0x0001042d
   103e0:	0001043f 	.word	0x0001043f
    case 0:
       LPC_GPIO0-> SET = (1<<SelPin);
   103e4:	9b01      	ldr	r3, [sp, #4]
   103e6:	785b      	ldrb	r3, [r3, #1]
   103e8:	461a      	mov	r2, r3
   103ea:	2301      	movs	r3, #1
   103ec:	fa03 f202 	lsl.w	r2, r3, r2
   103f0:	4b1c      	ldr	r3, [pc, #112]	; (10464 <LabGPIO::SetHigh()+0xb8>)
   103f2:	619a      	str	r2, [r3, #24]
       break;
   103f4:	e02c      	b.n	10450 <LabGPIO::SetHigh()+0xa4>
    case 1:
       LPC_GPIO1-> SET = (1<<SelPin);
   103f6:	9b01      	ldr	r3, [sp, #4]
   103f8:	785b      	ldrb	r3, [r3, #1]
   103fa:	461a      	mov	r2, r3
   103fc:	2301      	movs	r3, #1
   103fe:	fa03 f202 	lsl.w	r2, r3, r2
   10402:	4b19      	ldr	r3, [pc, #100]	; (10468 <LabGPIO::SetHigh()+0xbc>)
   10404:	619a      	str	r2, [r3, #24]
       break;
   10406:	e023      	b.n	10450 <LabGPIO::SetHigh()+0xa4>
    case 2:
       LPC_GPIO2-> SET = (1<<SelPin);
   10408:	9b01      	ldr	r3, [sp, #4]
   1040a:	785b      	ldrb	r3, [r3, #1]
   1040c:	461a      	mov	r2, r3
   1040e:	2301      	movs	r3, #1
   10410:	fa03 f202 	lsl.w	r2, r3, r2
   10414:	4b15      	ldr	r3, [pc, #84]	; (1046c <LabGPIO::SetHigh()+0xc0>)
   10416:	619a      	str	r2, [r3, #24]
       break;
   10418:	e01a      	b.n	10450 <LabGPIO::SetHigh()+0xa4>
    case 3:
       LPC_GPIO3-> SET = (1<<SelPin);
   1041a:	9b01      	ldr	r3, [sp, #4]
   1041c:	785b      	ldrb	r3, [r3, #1]
   1041e:	461a      	mov	r2, r3
   10420:	2301      	movs	r3, #1
   10422:	fa03 f202 	lsl.w	r2, r3, r2
   10426:	4b12      	ldr	r3, [pc, #72]	; (10470 <LabGPIO::SetHigh()+0xc4>)
   10428:	619a      	str	r2, [r3, #24]
       break;   
   1042a:	e011      	b.n	10450 <LabGPIO::SetHigh()+0xa4>
    case 4:
       LPC_GPIO4-> SET = (1<<SelPin);
   1042c:	9b01      	ldr	r3, [sp, #4]
   1042e:	785b      	ldrb	r3, [r3, #1]
   10430:	461a      	mov	r2, r3
   10432:	2301      	movs	r3, #1
   10434:	fa03 f202 	lsl.w	r2, r3, r2
   10438:	4b0e      	ldr	r3, [pc, #56]	; (10474 <LabGPIO::SetHigh()+0xc8>)
   1043a:	619a      	str	r2, [r3, #24]
        break;
   1043c:	e008      	b.n	10450 <LabGPIO::SetHigh()+0xa4>
    case 5:
       LPC_GPIO5-> SET = (1<<SelPin);
   1043e:	9b01      	ldr	r3, [sp, #4]
   10440:	785b      	ldrb	r3, [r3, #1]
   10442:	461a      	mov	r2, r3
   10444:	2301      	movs	r3, #1
   10446:	fa03 f202 	lsl.w	r2, r3, r2
   1044a:	4b0b      	ldr	r3, [pc, #44]	; (10478 <LabGPIO::SetHigh()+0xcc>)
   1044c:	619a      	str	r2, [r3, #24]
       break;
   1044e:	bf00      	nop
   10450:	4623      	mov	r3, r4
   10452:	4619      	mov	r1, r3
   10454:	4802      	ldr	r0, [pc, #8]	; (10460 <LabGPIO::SetHigh()+0xb4>)
   10456:	f002 fc57 	bl	12d08 <__cyg_profile_func_exit>
  }
  }
   1045a:	bf00      	nop
   1045c:	b002      	add	sp, #8
   1045e:	bd10      	pop	{r4, pc}
   10460:	000103ad 	.word	0x000103ad
   10464:	20098000 	.word	0x20098000
   10468:	20098020 	.word	0x20098020
   1046c:	20098040 	.word	0x20098040
   10470:	20098060 	.word	0x20098060
   10474:	20098080 	.word	0x20098080
   10478:	200980a0 	.word	0x200980a0

0001047c <LabGPIO::SetLow()>:
  void LabGPIO::SetLow(){
   1047c:	b510      	push	{r4, lr}
   1047e:	b082      	sub	sp, #8
   10480:	4674      	mov	r4, lr
   10482:	9001      	str	r0, [sp, #4]
   10484:	4623      	mov	r3, r4
   10486:	4619      	mov	r1, r3
   10488:	4829      	ldr	r0, [pc, #164]	; (10530 <LabGPIO::SetLow()+0xb4>)
   1048a:	f002 fc29 	bl	12ce0 <__cyg_profile_func_enter>
        /// Set voltage of pin to LOW 
    switch(SelPort){
   1048e:	9b01      	ldr	r3, [sp, #4]
   10490:	781b      	ldrb	r3, [r3, #0]
   10492:	2b05      	cmp	r3, #5
   10494:	d844      	bhi.n	10520 <LabGPIO::SetLow()+0xa4>
   10496:	a201      	add	r2, pc, #4	; (adr r2, 1049c <LabGPIO::SetLow()+0x20>)
   10498:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1049c:	000104b5 	.word	0x000104b5
   104a0:	000104c7 	.word	0x000104c7
   104a4:	000104d9 	.word	0x000104d9
   104a8:	000104eb 	.word	0x000104eb
   104ac:	000104fd 	.word	0x000104fd
   104b0:	0001050f 	.word	0x0001050f
    case 0:
       LPC_GPIO0-> CLR = (1<<SelPin);
   104b4:	9b01      	ldr	r3, [sp, #4]
   104b6:	785b      	ldrb	r3, [r3, #1]
   104b8:	461a      	mov	r2, r3
   104ba:	2301      	movs	r3, #1
   104bc:	fa03 f202 	lsl.w	r2, r3, r2
   104c0:	4b1c      	ldr	r3, [pc, #112]	; (10534 <LabGPIO::SetLow()+0xb8>)
   104c2:	61da      	str	r2, [r3, #28]
       break;
   104c4:	e02c      	b.n	10520 <LabGPIO::SetLow()+0xa4>
    case 1:
       LPC_GPIO1-> CLR = (1<<SelPin);
   104c6:	9b01      	ldr	r3, [sp, #4]
   104c8:	785b      	ldrb	r3, [r3, #1]
   104ca:	461a      	mov	r2, r3
   104cc:	2301      	movs	r3, #1
   104ce:	fa03 f202 	lsl.w	r2, r3, r2
   104d2:	4b19      	ldr	r3, [pc, #100]	; (10538 <LabGPIO::SetLow()+0xbc>)
   104d4:	61da      	str	r2, [r3, #28]
       break;
   104d6:	e023      	b.n	10520 <LabGPIO::SetLow()+0xa4>
    case 2:
       LPC_GPIO2-> CLR = (1<<SelPin);
   104d8:	9b01      	ldr	r3, [sp, #4]
   104da:	785b      	ldrb	r3, [r3, #1]
   104dc:	461a      	mov	r2, r3
   104de:	2301      	movs	r3, #1
   104e0:	fa03 f202 	lsl.w	r2, r3, r2
   104e4:	4b15      	ldr	r3, [pc, #84]	; (1053c <LabGPIO::SetLow()+0xc0>)
   104e6:	61da      	str	r2, [r3, #28]
       break;
   104e8:	e01a      	b.n	10520 <LabGPIO::SetLow()+0xa4>
    case 3:
       LPC_GPIO3-> CLR = (1<<SelPin);
   104ea:	9b01      	ldr	r3, [sp, #4]
   104ec:	785b      	ldrb	r3, [r3, #1]
   104ee:	461a      	mov	r2, r3
   104f0:	2301      	movs	r3, #1
   104f2:	fa03 f202 	lsl.w	r2, r3, r2
   104f6:	4b12      	ldr	r3, [pc, #72]	; (10540 <LabGPIO::SetLow()+0xc4>)
   104f8:	61da      	str	r2, [r3, #28]
       break;
   104fa:	e011      	b.n	10520 <LabGPIO::SetLow()+0xa4>
    case 4:
       LPC_GPIO4-> CLR = (1<<SelPin);
   104fc:	9b01      	ldr	r3, [sp, #4]
   104fe:	785b      	ldrb	r3, [r3, #1]
   10500:	461a      	mov	r2, r3
   10502:	2301      	movs	r3, #1
   10504:	fa03 f202 	lsl.w	r2, r3, r2
   10508:	4b0e      	ldr	r3, [pc, #56]	; (10544 <LabGPIO::SetLow()+0xc8>)
   1050a:	61da      	str	r2, [r3, #28]
        break;
   1050c:	e008      	b.n	10520 <LabGPIO::SetLow()+0xa4>
    case 5:
       LPC_GPIO5-> CLR = (1<<SelPin);
   1050e:	9b01      	ldr	r3, [sp, #4]
   10510:	785b      	ldrb	r3, [r3, #1]
   10512:	461a      	mov	r2, r3
   10514:	2301      	movs	r3, #1
   10516:	fa03 f202 	lsl.w	r2, r3, r2
   1051a:	4b0b      	ldr	r3, [pc, #44]	; (10548 <LabGPIO::SetLow()+0xcc>)
   1051c:	61da      	str	r2, [r3, #28]
       break;
   1051e:	bf00      	nop
   10520:	4623      	mov	r3, r4
   10522:	4619      	mov	r1, r3
   10524:	4802      	ldr	r0, [pc, #8]	; (10530 <LabGPIO::SetLow()+0xb4>)
   10526:	f002 fbef 	bl	12d08 <__cyg_profile_func_exit>
  }
  
  }
   1052a:	bf00      	nop
   1052c:	b002      	add	sp, #8
   1052e:	bd10      	pop	{r4, pc}
   10530:	0001047d 	.word	0x0001047d
   10534:	20098000 	.word	0x20098000
   10538:	20098020 	.word	0x20098020
   1053c:	20098040 	.word	0x20098040
   10540:	20098060 	.word	0x20098060
   10544:	20098080 	.word	0x20098080
   10548:	200980a0 	.word	0x200980a0

0001054c <LabGPIO::ReadBool()>:
    case 5:
        if(LPC_GPIO5->PIN & (1<<SelPin)) return State::kHigh;
        else return State::kLow;
    }
  }
    bool LabGPIO::ReadBool(){
   1054c:	b570      	push	{r4, r5, r6, lr}
   1054e:	b082      	sub	sp, #8
   10550:	4676      	mov	r6, lr
   10552:	9001      	str	r0, [sp, #4]
   10554:	4633      	mov	r3, r6
   10556:	4619      	mov	r1, r3
   10558:	483e      	ldr	r0, [pc, #248]	; (10654 <LabGPIO::ReadBool()+0x108>)
   1055a:	f002 fbc1 	bl	12ce0 <__cyg_profile_func_enter>
  /// Should return the state of the pin (input or output, doesn't matter)
  ///
  /// @return level of pin high => true, low => false
  switch(SelPort){
   1055e:	9b01      	ldr	r3, [sp, #4]
   10560:	781b      	ldrb	r3, [r3, #0]
   10562:	2b05      	cmp	r3, #5
   10564:	d868      	bhi.n	10638 <LabGPIO::ReadBool()+0xec>
   10566:	a201      	add	r2, pc, #4	; (adr r2, 1056c <LabGPIO::ReadBool()+0x20>)
   10568:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1056c:	00010585 	.word	0x00010585
   10570:	000105a3 	.word	0x000105a3
   10574:	000105c1 	.word	0x000105c1
   10578:	000105df 	.word	0x000105df
   1057c:	000105fd 	.word	0x000105fd
   10580:	0001061b 	.word	0x0001061b
    case 0:
        return(LPC_GPIO0->PIN & (1<<SelPin));
   10584:	4b34      	ldr	r3, [pc, #208]	; (10658 <LabGPIO::ReadBool()+0x10c>)
   10586:	695b      	ldr	r3, [r3, #20]
   10588:	9a01      	ldr	r2, [sp, #4]
   1058a:	7852      	ldrb	r2, [r2, #1]
   1058c:	4611      	mov	r1, r2
   1058e:	2201      	movs	r2, #1
   10590:	408a      	lsls	r2, r1
   10592:	4013      	ands	r3, r2
   10594:	2b00      	cmp	r3, #0
   10596:	bf14      	ite	ne
   10598:	2301      	movne	r3, #1
   1059a:	2300      	moveq	r3, #0
   1059c:	b2dc      	uxtb	r4, r3
   1059e:	2500      	movs	r5, #0
   105a0:	e04b      	b.n	1063a <LabGPIO::ReadBool()+0xee>
    case 1:
        return(LPC_GPIO1->PIN & (1<<SelPin));
   105a2:	4b2e      	ldr	r3, [pc, #184]	; (1065c <LabGPIO::ReadBool()+0x110>)
   105a4:	695b      	ldr	r3, [r3, #20]
   105a6:	9a01      	ldr	r2, [sp, #4]
   105a8:	7852      	ldrb	r2, [r2, #1]
   105aa:	4611      	mov	r1, r2
   105ac:	2201      	movs	r2, #1
   105ae:	408a      	lsls	r2, r1
   105b0:	4013      	ands	r3, r2
   105b2:	2b00      	cmp	r3, #0
   105b4:	bf14      	ite	ne
   105b6:	2301      	movne	r3, #1
   105b8:	2300      	moveq	r3, #0
   105ba:	b2dc      	uxtb	r4, r3
   105bc:	2500      	movs	r5, #0
   105be:	e03c      	b.n	1063a <LabGPIO::ReadBool()+0xee>
    case 2:
        return(LPC_GPIO2->PIN & (1<<SelPin));
   105c0:	4b27      	ldr	r3, [pc, #156]	; (10660 <LabGPIO::ReadBool()+0x114>)
   105c2:	695b      	ldr	r3, [r3, #20]
   105c4:	9a01      	ldr	r2, [sp, #4]
   105c6:	7852      	ldrb	r2, [r2, #1]
   105c8:	4611      	mov	r1, r2
   105ca:	2201      	movs	r2, #1
   105cc:	408a      	lsls	r2, r1
   105ce:	4013      	ands	r3, r2
   105d0:	2b00      	cmp	r3, #0
   105d2:	bf14      	ite	ne
   105d4:	2301      	movne	r3, #1
   105d6:	2300      	moveq	r3, #0
   105d8:	b2dc      	uxtb	r4, r3
   105da:	2500      	movs	r5, #0
   105dc:	e02d      	b.n	1063a <LabGPIO::ReadBool()+0xee>
    case 3:
        return(LPC_GPIO3->PIN & (1<<SelPin));
   105de:	4b21      	ldr	r3, [pc, #132]	; (10664 <LabGPIO::ReadBool()+0x118>)
   105e0:	695b      	ldr	r3, [r3, #20]
   105e2:	9a01      	ldr	r2, [sp, #4]
   105e4:	7852      	ldrb	r2, [r2, #1]
   105e6:	4611      	mov	r1, r2
   105e8:	2201      	movs	r2, #1
   105ea:	408a      	lsls	r2, r1
   105ec:	4013      	ands	r3, r2
   105ee:	2b00      	cmp	r3, #0
   105f0:	bf14      	ite	ne
   105f2:	2301      	movne	r3, #1
   105f4:	2300      	moveq	r3, #0
   105f6:	b2dc      	uxtb	r4, r3
   105f8:	2500      	movs	r5, #0
   105fa:	e01e      	b.n	1063a <LabGPIO::ReadBool()+0xee>
    case 4:
        return(LPC_GPIO4->PIN & (1<<SelPin));
   105fc:	4b1a      	ldr	r3, [pc, #104]	; (10668 <LabGPIO::ReadBool()+0x11c>)
   105fe:	695b      	ldr	r3, [r3, #20]
   10600:	9a01      	ldr	r2, [sp, #4]
   10602:	7852      	ldrb	r2, [r2, #1]
   10604:	4611      	mov	r1, r2
   10606:	2201      	movs	r2, #1
   10608:	408a      	lsls	r2, r1
   1060a:	4013      	ands	r3, r2
   1060c:	2b00      	cmp	r3, #0
   1060e:	bf14      	ite	ne
   10610:	2301      	movne	r3, #1
   10612:	2300      	moveq	r3, #0
   10614:	b2dc      	uxtb	r4, r3
   10616:	2500      	movs	r5, #0
   10618:	e00f      	b.n	1063a <LabGPIO::ReadBool()+0xee>
    case 5:
        return(LPC_GPIO5->PIN & (1<<SelPin));  
   1061a:	4b14      	ldr	r3, [pc, #80]	; (1066c <LabGPIO::ReadBool()+0x120>)
   1061c:	695b      	ldr	r3, [r3, #20]
   1061e:	9a01      	ldr	r2, [sp, #4]
   10620:	7852      	ldrb	r2, [r2, #1]
   10622:	4611      	mov	r1, r2
   10624:	2201      	movs	r2, #1
   10626:	408a      	lsls	r2, r1
   10628:	4013      	ands	r3, r2
   1062a:	2b00      	cmp	r3, #0
   1062c:	bf14      	ite	ne
   1062e:	2301      	movne	r3, #1
   10630:	2300      	moveq	r3, #0
   10632:	b2dc      	uxtb	r4, r3
   10634:	2500      	movs	r5, #0
   10636:	e000      	b.n	1063a <LabGPIO::ReadBool()+0xee>
   10638:	2501      	movs	r5, #1
   1063a:	4633      	mov	r3, r6
   1063c:	4619      	mov	r1, r3
   1063e:	4805      	ldr	r0, [pc, #20]	; (10654 <LabGPIO::ReadBool()+0x108>)
   10640:	f002 fb62 	bl	12d08 <__cyg_profile_func_exit>
   10644:	2d01      	cmp	r5, #1
   10646:	d100      	bne.n	1064a <LabGPIO::ReadBool()+0xfe>
  }
  }
   10648:	e000      	b.n	1064c <LabGPIO::ReadBool()+0x100>
   1064a:	4623      	mov	r3, r4
   1064c:	4618      	mov	r0, r3
   1064e:	b002      	add	sp, #8
   10650:	bd70      	pop	{r4, r5, r6, pc}
   10652:	bf00      	nop
   10654:	0001054d 	.word	0x0001054d
   10658:	20098000 	.word	0x20098000
   1065c:	20098020 	.word	0x20098020
   10660:	20098040 	.word	0x20098040
   10664:	20098060 	.word	0x20098060
   10668:	20098080 	.word	0x20098080
   1066c:	200980a0 	.word	0x200980a0

00010670 <LabGPIO::toggle()>:
    void LabGPIO::toggle(){
   10670:	b510      	push	{r4, lr}
   10672:	b082      	sub	sp, #8
   10674:	4674      	mov	r4, lr
   10676:	9001      	str	r0, [sp, #4]
   10678:	4623      	mov	r3, r4
   1067a:	4619      	mov	r1, r3
   1067c:	483e      	ldr	r0, [pc, #248]	; (10778 <LabGPIO::toggle()+0x108>)
   1067e:	f002 fb2f 	bl	12ce0 <__cyg_profile_func_enter>

    switch(SelPort){
   10682:	9b01      	ldr	r3, [sp, #4]
   10684:	781b      	ldrb	r3, [r3, #0]
   10686:	2b05      	cmp	r3, #5
   10688:	d86e      	bhi.n	10768 <LabGPIO::toggle()+0xf8>
   1068a:	a201      	add	r2, pc, #4	; (adr r2, 10690 <LabGPIO::toggle()+0x20>)
   1068c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   10690:	000106a9 	.word	0x000106a9
   10694:	000106c9 	.word	0x000106c9
   10698:	000106e9 	.word	0x000106e9
   1069c:	00010709 	.word	0x00010709
   106a0:	00010729 	.word	0x00010729
   106a4:	00010749 	.word	0x00010749
    case 0:
        if(!ReadBool()) //reads the current state and if it is not true which means it is SetLow then SetHigh 
   106a8:	9801      	ldr	r0, [sp, #4]
   106aa:	f7ff ff4f 	bl	1054c <LabGPIO::ReadBool()>
   106ae:	4603      	mov	r3, r0
   106b0:	f083 0301 	eor.w	r3, r3, #1
   106b4:	b2db      	uxtb	r3, r3
   106b6:	2b00      	cmp	r3, #0
   106b8:	d003      	beq.n	106c2 <LabGPIO::toggle()+0x52>
            SetHigh(); 
   106ba:	9801      	ldr	r0, [sp, #4]
   106bc:	f7ff fe76 	bl	103ac <LabGPIO::SetHigh()>
   106c0:	e002      	b.n	106c8 <LabGPIO::toggle()+0x58>
        else SetLow();
   106c2:	9801      	ldr	r0, [sp, #4]
   106c4:	f7ff feda 	bl	1047c <LabGPIO::SetLow()>
    
    case 1:
        if(!ReadBool()) //reads the current state and if it is not true which means it is SetLow then SetHigh 
   106c8:	9801      	ldr	r0, [sp, #4]
   106ca:	f7ff ff3f 	bl	1054c <LabGPIO::ReadBool()>
   106ce:	4603      	mov	r3, r0
   106d0:	f083 0301 	eor.w	r3, r3, #1
   106d4:	b2db      	uxtb	r3, r3
   106d6:	2b00      	cmp	r3, #0
   106d8:	d003      	beq.n	106e2 <LabGPIO::toggle()+0x72>
            SetHigh(); 
   106da:	9801      	ldr	r0, [sp, #4]
   106dc:	f7ff fe66 	bl	103ac <LabGPIO::SetHigh()>
   106e0:	e002      	b.n	106e8 <LabGPIO::toggle()+0x78>
        else SetLow();
   106e2:	9801      	ldr	r0, [sp, #4]
   106e4:	f7ff feca 	bl	1047c <LabGPIO::SetLow()>
    
    case 2:
        if(!ReadBool()) //reads the current state and if it is not true which means it is SetLow then SetHigh 
   106e8:	9801      	ldr	r0, [sp, #4]
   106ea:	f7ff ff2f 	bl	1054c <LabGPIO::ReadBool()>
   106ee:	4603      	mov	r3, r0
   106f0:	f083 0301 	eor.w	r3, r3, #1
   106f4:	b2db      	uxtb	r3, r3
   106f6:	2b00      	cmp	r3, #0
   106f8:	d003      	beq.n	10702 <LabGPIO::toggle()+0x92>
            SetHigh(); 
   106fa:	9801      	ldr	r0, [sp, #4]
   106fc:	f7ff fe56 	bl	103ac <LabGPIO::SetHigh()>
   10700:	e002      	b.n	10708 <LabGPIO::toggle()+0x98>
        else SetLow();
   10702:	9801      	ldr	r0, [sp, #4]
   10704:	f7ff feba 	bl	1047c <LabGPIO::SetLow()>
    
    case 3:
        if(!ReadBool()) //reads the current state and if it is not true which means it is SetLow then SetHigh 
   10708:	9801      	ldr	r0, [sp, #4]
   1070a:	f7ff ff1f 	bl	1054c <LabGPIO::ReadBool()>
   1070e:	4603      	mov	r3, r0
   10710:	f083 0301 	eor.w	r3, r3, #1
   10714:	b2db      	uxtb	r3, r3
   10716:	2b00      	cmp	r3, #0
   10718:	d003      	beq.n	10722 <LabGPIO::toggle()+0xb2>
            SetHigh(); 
   1071a:	9801      	ldr	r0, [sp, #4]
   1071c:	f7ff fe46 	bl	103ac <LabGPIO::SetHigh()>
   10720:	e002      	b.n	10728 <LabGPIO::toggle()+0xb8>
        else SetLow();
   10722:	9801      	ldr	r0, [sp, #4]
   10724:	f7ff feaa 	bl	1047c <LabGPIO::SetLow()>
    
    case 4:
        if(!ReadBool()) //reads the current state and if it is not true which means it is SetLow then SetHigh 
   10728:	9801      	ldr	r0, [sp, #4]
   1072a:	f7ff ff0f 	bl	1054c <LabGPIO::ReadBool()>
   1072e:	4603      	mov	r3, r0
   10730:	f083 0301 	eor.w	r3, r3, #1
   10734:	b2db      	uxtb	r3, r3
   10736:	2b00      	cmp	r3, #0
   10738:	d003      	beq.n	10742 <LabGPIO::toggle()+0xd2>
            SetHigh(); 
   1073a:	9801      	ldr	r0, [sp, #4]
   1073c:	f7ff fe36 	bl	103ac <LabGPIO::SetHigh()>
   10740:	e002      	b.n	10748 <LabGPIO::toggle()+0xd8>
        else SetLow();
   10742:	9801      	ldr	r0, [sp, #4]
   10744:	f7ff fe9a 	bl	1047c <LabGPIO::SetLow()>
    
    case 5:
        if(!ReadBool()) //reads the current state and if it is not true which means it is SetLow then SetHigh 
   10748:	9801      	ldr	r0, [sp, #4]
   1074a:	f7ff feff 	bl	1054c <LabGPIO::ReadBool()>
   1074e:	4603      	mov	r3, r0
   10750:	f083 0301 	eor.w	r3, r3, #1
   10754:	b2db      	uxtb	r3, r3
   10756:	2b00      	cmp	r3, #0
   10758:	d003      	beq.n	10762 <LabGPIO::toggle()+0xf2>
            SetHigh(); 
   1075a:	9801      	ldr	r0, [sp, #4]
   1075c:	f7ff fe26 	bl	103ac <LabGPIO::SetHigh()>
   10760:	e002      	b.n	10768 <LabGPIO::toggle()+0xf8>
        else SetLow();
   10762:	9801      	ldr	r0, [sp, #4]
   10764:	f7ff fe8a 	bl	1047c <LabGPIO::SetLow()>
   10768:	4623      	mov	r3, r4
   1076a:	4619      	mov	r1, r3
   1076c:	4802      	ldr	r0, [pc, #8]	; (10778 <LabGPIO::toggle()+0x108>)
   1076e:	f002 facb 	bl	12d08 <__cyg_profile_func_exit>
    }
  }
   10772:	bf00      	nop
   10774:	b002      	add	sp, #8
   10776:	bd10      	pop	{r4, pc}
   10778:	00010671 	.word	0x00010671

0001077c <main>:

#include "utility/log.hpp"
#include "utility/time.hpp"
#include "LabGPIO.hpp"
int main() 
{
   1077c:	b500      	push	{lr}
   1077e:	b08b      	sub	sp, #44	; 0x2c
   10780:	4673      	mov	r3, lr
   10782:	4619      	mov	r1, r3
   10784:	4825      	ldr	r0, [pc, #148]	; (1081c <main+0xa0>)
   10786:	f002 faab 	bl	12ce0 <__cyg_profile_func_enter>
  }
  return 0;
  */
  
  /*Lab3*/
  LabGPIO button3(0, 29);
   1078a:	ab08      	add	r3, sp, #32
   1078c:	221d      	movs	r2, #29
   1078e:	2100      	movs	r1, #0
   10790:	4618      	mov	r0, r3
   10792:	f7ff fde7 	bl	10364 <LabGPIO::LabGPIO(unsigned char, unsigned char)>
  LabGPIO led3(1, 18);
   10796:	ab07      	add	r3, sp, #28
   10798:	2212      	movs	r2, #18
   1079a:	2101      	movs	r1, #1
   1079c:	4618      	mov	r0, r3
   1079e:	f7ff fde1 	bl	10364 <LabGPIO::LabGPIO(unsigned char, unsigned char)>
  
  LabGPIO button2(0, 30);
   107a2:	ab06      	add	r3, sp, #24
   107a4:	221e      	movs	r2, #30
   107a6:	2100      	movs	r1, #0
   107a8:	4618      	mov	r0, r3
   107aa:	f7ff fddb 	bl	10364 <LabGPIO::LabGPIO(unsigned char, unsigned char)>
  LabGPIO led2(1, 24);
   107ae:	ab05      	add	r3, sp, #20
   107b0:	2218      	movs	r2, #24
   107b2:	2101      	movs	r1, #1
   107b4:	4618      	mov	r0, r3
   107b6:	f7ff fdd5 	bl	10364 <LabGPIO::LabGPIO(unsigned char, unsigned char)>
  
  LabGPIO button1(1, 15);
   107ba:	ab04      	add	r3, sp, #16
   107bc:	220f      	movs	r2, #15
   107be:	2101      	movs	r1, #1
   107c0:	4618      	mov	r0, r3
   107c2:	f7ff fdcf 	bl	10364 <LabGPIO::LabGPIO(unsigned char, unsigned char)>
  LabGPIO led1(1, 26);
   107c6:	ab03      	add	r3, sp, #12
   107c8:	221a      	movs	r2, #26
   107ca:	2101      	movs	r1, #1
   107cc:	4618      	mov	r0, r3
   107ce:	f7ff fdc9 	bl	10364 <LabGPIO::LabGPIO(unsigned char, unsigned char)>
  
  LabGPIO button0(1, 19);
   107d2:	ab02      	add	r3, sp, #8
   107d4:	2213      	movs	r2, #19
   107d6:	2101      	movs	r1, #1
   107d8:	4618      	mov	r0, r3
   107da:	f7ff fdc3 	bl	10364 <LabGPIO::LabGPIO(unsigned char, unsigned char)>
  LabGPIO led0(2, 3);
   107de:	ab01      	add	r3, sp, #4
   107e0:	2203      	movs	r2, #3
   107e2:	2102      	movs	r1, #2
   107e4:	4618      	mov	r0, r3
   107e6:	f7ff fdbd 	bl	10364 <LabGPIO::LabGPIO(unsigned char, unsigned char)>
  int count=0;
   107ea:	2300      	movs	r3, #0
   107ec:	9309      	str	r3, [sp, #36]	; 0x24
  // Initialize button and led here

  while(true)
  {
       if(button3.ReadBool()){
   107ee:	ab08      	add	r3, sp, #32
   107f0:	4618      	mov	r0, r3
   107f2:	f7ff feab 	bl	1054c <LabGPIO::ReadBool()>
   107f6:	4603      	mov	r3, r0
   107f8:	2b00      	cmp	r3, #0
   107fa:	d0f8      	beq.n	107ee <main+0x72>
        
         if(button3.ReadBool() != true)
   107fc:	ab08      	add	r3, sp, #32
   107fe:	4618      	mov	r0, r3
   10800:	f7ff fea4 	bl	1054c <LabGPIO::ReadBool()>
   10804:	4603      	mov	r3, r0
   10806:	f083 0301 	eor.w	r3, r3, #1
   1080a:	b2db      	uxtb	r3, r3
   1080c:	2b00      	cmp	r3, #0
   1080e:	d0ee      	beq.n	107ee <main+0x72>
       {
            led3.toggle();
   10810:	ab07      	add	r3, sp, #28
   10812:	4618      	mov	r0, r3
   10814:	f7ff ff2c 	bl	10670 <LabGPIO::toggle()>
       if(button3.ReadBool()){
   10818:	e7e9      	b.n	107ee <main+0x72>
   1081a:	bf00      	nop
   1081c:	0001077d 	.word	0x0001077d

00010820 <debug::PrintBacktrace(bool, void*)>:
}

[[gnu::no_instrument_function]]
inline void PrintBacktrace(bool show_make_command = false,
                           void * final_address   = nullptr)
{
   10820:	b500      	push	{lr}
   10822:	b08b      	sub	sp, #44	; 0x2c
   10824:	4603      	mov	r3, r0
   10826:	9100      	str	r1, [sp, #0]
   10828:	f88d 3007 	strb.w	r3, [sp, #7]
  printf("Stack Depth = %zd\n", GetStackDepth());
   1082c:	f002 fa8e 	bl	12d4c <GetStackDepth()>
   10830:	4603      	mov	r3, r0
   10832:	4619      	mov	r1, r3
   10834:	4831      	ldr	r0, [pc, #196]	; (108fc <debug::PrintBacktrace(bool, void*)+0xdc>)
   10836:	f003 fcad 	bl	14194 <printf>
  // stack_depth-1 to ignore PrintBacktrace()
  // PrintBacktrace shouldn't be ignored in profiling because it causes
  // the exit to still fire, which can result in a negative stack_depth
  void ** list_of_called_functions = GetStackTrace();
   1083a:	f002 fa73 	bl	12d24 <GetStackTrace()>
   1083e:	9007      	str	r0, [sp, #28]
  size_t stack_depth               = GetStackDepth();
   10840:	f002 fa84 	bl	12d4c <GetStackDepth()>
   10844:	9006      	str	r0, [sp, #24]
  // Ignore the last function as it is the Backtrace function
  for (size_t pos = 0; pos < stack_depth - 1; pos++)
   10846:	2300      	movs	r3, #0
   10848:	9309      	str	r3, [sp, #36]	; 0x24
   1084a:	9b06      	ldr	r3, [sp, #24]
   1084c:	3b01      	subs	r3, #1
   1084e:	9a09      	ldr	r2, [sp, #36]	; 0x24
   10850:	429a      	cmp	r2, r3
   10852:	d20d      	bcs.n	10870 <debug::PrintBacktrace(bool, void*)+0x50>
  {
    printf("  #%zu: 0x%p\n", pos, list_of_called_functions[pos]);
   10854:	9b09      	ldr	r3, [sp, #36]	; 0x24
   10856:	009b      	lsls	r3, r3, #2
   10858:	9a07      	ldr	r2, [sp, #28]
   1085a:	4413      	add	r3, r2
   1085c:	681b      	ldr	r3, [r3, #0]
   1085e:	461a      	mov	r2, r3
   10860:	9909      	ldr	r1, [sp, #36]	; 0x24
   10862:	4827      	ldr	r0, [pc, #156]	; (10900 <debug::PrintBacktrace(bool, void*)+0xe0>)
   10864:	f003 fc96 	bl	14194 <printf>
  for (size_t pos = 0; pos < stack_depth - 1; pos++)
   10868:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1086a:	3301      	adds	r3, #1
   1086c:	9309      	str	r3, [sp, #36]	; 0x24
   1086e:	e7ec      	b.n	1084a <debug::PrintBacktrace(bool, void*)+0x2a>
  }
  if (final_address != nullptr)
   10870:	9b00      	ldr	r3, [sp, #0]
   10872:	2b00      	cmp	r3, #0
   10874:	d006      	beq.n	10884 <debug::PrintBacktrace(bool, void*)+0x64>
  {
    printf("  #%zu: 0x%p\n", stack_depth - 1, final_address);
   10876:	9b06      	ldr	r3, [sp, #24]
   10878:	3b01      	subs	r3, #1
   1087a:	9a00      	ldr	r2, [sp, #0]
   1087c:	4619      	mov	r1, r3
   1087e:	4820      	ldr	r0, [pc, #128]	; (10900 <debug::PrintBacktrace(bool, void*)+0xe0>)
   10880:	f003 fc88 	bl	14194 <printf>
  }
  if (show_make_command)
   10884:	f89d 3007 	ldrb.w	r3, [sp, #7]
   10888:	2b00      	cmp	r3, #0
   1088a:	d033      	beq.n	108f4 <debug::PrintBacktrace(bool, void*)+0xd4>
  {
    constexpr const char kBuildType[] =
   1088c:	4a1d      	ldr	r2, [pc, #116]	; (10904 <debug::PrintBacktrace(bool, void*)+0xe4>)
   1088e:	ab03      	add	r3, sp, #12
   10890:	ca07      	ldmia	r2, {r0, r1, r2}
   10892:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#if defined(APPLICATION)
        "application";
#else
        "bootloader";
#endif
    puts("\nRun: the following command in your project directory");
   10896:	481c      	ldr	r0, [pc, #112]	; (10908 <debug::PrintBacktrace(bool, void*)+0xe8>)
   10898:	f002 f9f2 	bl	12c80 <puts>
    printf("\n  " SJ2_BOLD_WHITE "make stacktrace-%s TRACES=\"", kBuildType);
   1089c:	ab03      	add	r3, sp, #12
   1089e:	4619      	mov	r1, r3
   108a0:	481a      	ldr	r0, [pc, #104]	; (1090c <debug::PrintBacktrace(bool, void*)+0xec>)
   108a2:	f003 fc77 	bl	14194 <printf>
    for (size_t pos = 0; pos < stack_depth - 1; pos++)
   108a6:	2300      	movs	r3, #0
   108a8:	9308      	str	r3, [sp, #32]
   108aa:	9b06      	ldr	r3, [sp, #24]
   108ac:	3b01      	subs	r3, #1
   108ae:	9a08      	ldr	r2, [sp, #32]
   108b0:	429a      	cmp	r2, r3
   108b2:	d212      	bcs.n	108da <debug::PrintBacktrace(bool, void*)+0xba>
    {
      if (pos != 0)
   108b4:	9b08      	ldr	r3, [sp, #32]
   108b6:	2b00      	cmp	r3, #0
   108b8:	d002      	beq.n	108c0 <debug::PrintBacktrace(bool, void*)+0xa0>
      {
        putchar(' ');
   108ba:	2020      	movs	r0, #32
   108bc:	f002 f9c4 	bl	12c48 <putchar>
      }
      printf("0x%p", list_of_called_functions[pos]);
   108c0:	9b08      	ldr	r3, [sp, #32]
   108c2:	009b      	lsls	r3, r3, #2
   108c4:	9a07      	ldr	r2, [sp, #28]
   108c6:	4413      	add	r3, r2
   108c8:	681b      	ldr	r3, [r3, #0]
   108ca:	4619      	mov	r1, r3
   108cc:	4810      	ldr	r0, [pc, #64]	; (10910 <debug::PrintBacktrace(bool, void*)+0xf0>)
   108ce:	f003 fc61 	bl	14194 <printf>
    for (size_t pos = 0; pos < stack_depth - 1; pos++)
   108d2:	9b08      	ldr	r3, [sp, #32]
   108d4:	3301      	adds	r3, #1
   108d6:	9308      	str	r3, [sp, #32]
   108d8:	e7e7      	b.n	108aa <debug::PrintBacktrace(bool, void*)+0x8a>
    }
    if (final_address != nullptr)
   108da:	9b00      	ldr	r3, [sp, #0]
   108dc:	2b00      	cmp	r3, #0
   108de:	d003      	beq.n	108e8 <debug::PrintBacktrace(bool, void*)+0xc8>
    {
      printf(" 0x%p", final_address);
   108e0:	9900      	ldr	r1, [sp, #0]
   108e2:	480c      	ldr	r0, [pc, #48]	; (10914 <debug::PrintBacktrace(bool, void*)+0xf4>)
   108e4:	f003 fc56 	bl	14194 <printf>
    }
    puts("\"\n" SJ2_COLOR_RESET);
   108e8:	480b      	ldr	r0, [pc, #44]	; (10918 <debug::PrintBacktrace(bool, void*)+0xf8>)
   108ea:	f002 f9c9 	bl	12c80 <puts>
    puts(
   108ee:	480b      	ldr	r0, [pc, #44]	; (1091c <debug::PrintBacktrace(bool, void*)+0xfc>)
   108f0:	f002 f9c6 	bl	12c80 <puts>
        "This will report the file and line number that led to this function "
        "being called.");
  }
}
   108f4:	bf00      	nop
   108f6:	b00b      	add	sp, #44	; 0x2c
   108f8:	f85d fb04 	ldr.w	pc, [sp], #4
   108fc:	0001737c 	.word	0x0001737c
   10900:	00017390 	.word	0x00017390
   10904:	0001746c 	.word	0x0001746c
   10908:	000173a0 	.word	0x000173a0
   1090c:	000173d8 	.word	0x000173d8
   10910:	00017400 	.word	0x00017400
   10914:	00017408 	.word	0x00017408
   10918:	00017410 	.word	0x00017410
   1091c:	00017418 	.word	0x00017418

00010920 <(anonymous namespace)::DefaultUptime()>:
{
// uptime in nanoseconds
inline uint64_t uptime = 0;
// Returns the system uptime in nanoseconds, do not use this function directly
[[gnu::always_inline]] inline uint64_t DefaultUptime()
{
   10920:	b570      	push	{r4, r5, r6, lr}
   10922:	4676      	mov	r6, lr
   10924:	4633      	mov	r3, r6
   10926:	4619      	mov	r1, r3
   10928:	4807      	ldr	r0, [pc, #28]	; (10948 <(anonymous namespace)::DefaultUptime()+0x28>)
   1092a:	f002 f9d9 	bl	12ce0 <__cyg_profile_func_enter>
  return uptime;
   1092e:	4b07      	ldr	r3, [pc, #28]	; (1094c <(anonymous namespace)::DefaultUptime()+0x2c>)
   10930:	e9d3 4500 	ldrd	r4, r5, [r3]
   10934:	4633      	mov	r3, r6
   10936:	4619      	mov	r1, r3
   10938:	4803      	ldr	r0, [pc, #12]	; (10948 <(anonymous namespace)::DefaultUptime()+0x28>)
   1093a:	f002 f9e5 	bl	12d08 <__cyg_profile_func_exit>
   1093e:	4623      	mov	r3, r4
   10940:	462c      	mov	r4, r5
}
   10942:	4618      	mov	r0, r3
   10944:	4621      	mov	r1, r4
   10946:	bd70      	pop	{r4, r5, r6, pc}
   10948:	00010921 	.word	0x00010921
   1094c:	10000260 	.word	0x10000260

00010950 <SetUptimeFunction(unsigned long long (*)())>:

using UptimeFunction = uint64_t (*)();
// Returns the system uptime in nanoseconds.
inline UptimeFunction Uptime = DefaultUptime;  // NOLINT
inline void SetUptimeFunction(UptimeFunction uptime_function)
{
   10950:	b510      	push	{r4, lr}
   10952:	b082      	sub	sp, #8
   10954:	4674      	mov	r4, lr
   10956:	9001      	str	r0, [sp, #4]
   10958:	4623      	mov	r3, r4
   1095a:	4619      	mov	r1, r3
   1095c:	4806      	ldr	r0, [pc, #24]	; (10978 <SetUptimeFunction(unsigned long long (*)())+0x28>)
   1095e:	f002 f9bf 	bl	12ce0 <__cyg_profile_func_enter>
  Uptime = uptime_function;
   10962:	4a06      	ldr	r2, [pc, #24]	; (1097c <SetUptimeFunction(unsigned long long (*)())+0x2c>)
   10964:	9b01      	ldr	r3, [sp, #4]
   10966:	6013      	str	r3, [r2, #0]
   10968:	4623      	mov	r3, r4
   1096a:	4619      	mov	r1, r3
   1096c:	4802      	ldr	r0, [pc, #8]	; (10978 <SetUptimeFunction(unsigned long long (*)())+0x28>)
   1096e:	f002 f9cb 	bl	12d08 <__cyg_profile_func_exit>
}
   10972:	bf00      	nop
   10974:	b002      	add	sp, #8
   10976:	bd10      	pop	{r4, pc}
   10978:	00010951 	.word	0x00010951
   1097c:	10000000 	.word	0x10000000

00010980 <Milliseconds()>:
// Get system uptime in milliseconds as a 64-bit integer
inline uint64_t Milliseconds()
{
   10980:	b570      	push	{r4, r5, r6, lr}
   10982:	4674      	mov	r4, lr
   10984:	4623      	mov	r3, r4
   10986:	4619      	mov	r1, r3
   10988:	480c      	ldr	r0, [pc, #48]	; (109bc <Milliseconds()+0x3c>)
   1098a:	f002 f9a9 	bl	12ce0 <__cyg_profile_func_enter>
  return Uptime() / 1'000;
   1098e:	4b0c      	ldr	r3, [pc, #48]	; (109c0 <Milliseconds()+0x40>)
   10990:	681b      	ldr	r3, [r3, #0]
   10992:	4798      	blx	r3
   10994:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   10998:	f04f 0300 	mov.w	r3, #0
   1099c:	f006 faf6 	bl	16f8c <__aeabi_uldivmod>
   109a0:	4602      	mov	r2, r0
   109a2:	460b      	mov	r3, r1
   109a4:	4615      	mov	r5, r2
   109a6:	461e      	mov	r6, r3
   109a8:	4623      	mov	r3, r4
   109aa:	4619      	mov	r1, r3
   109ac:	4803      	ldr	r0, [pc, #12]	; (109bc <Milliseconds()+0x3c>)
   109ae:	f002 f9ab 	bl	12d08 <__cyg_profile_func_exit>
   109b2:	462b      	mov	r3, r5
   109b4:	4634      	mov	r4, r6
}
   109b6:	4618      	mov	r0, r3
   109b8:	4621      	mov	r1, r4
   109ba:	bd70      	pop	{r4, r5, r6, pc}
   109bc:	00010981 	.word	0x00010981
   109c0:	10000000 	.word	0x10000000

000109c4 <Lpc40xxSystemController::SetClockFrequency(unsigned char)>:

  inline static LPC_SC_TypeDef * system_controller = LPC_SC;

  constexpr Lpc40xxSystemController() {}

  uint32_t SetClockFrequency(uint8_t frequency_in_mhz) override
   109c4:	b500      	push	{lr}
   109c6:	b085      	sub	sp, #20
   109c8:	9001      	str	r0, [sp, #4]
   109ca:	460b      	mov	r3, r1
   109cc:	f88d 3003 	strb.w	r3, [sp, #3]
  {
    uint32_t offset = 0;
   109d0:	2300      	movs	r3, #0
   109d2:	9303      	str	r3, [sp, #12]
    SelectOscillatorSource(OscillatorSource::kIrc);
   109d4:	2100      	movs	r1, #0
   109d6:	9801      	ldr	r0, [sp, #4]
   109d8:	f000 f8ce 	bl	10b78 <Lpc40xxSystemController::SelectOscillatorSource(Lpc40xxSystemController::OscillatorSource)>
    if (frequency_in_mhz > 12)
   109dc:	f89d 3003 	ldrb.w	r3, [sp, #3]
   109e0:	2b0c      	cmp	r3, #12
   109e2:	d916      	bls.n	10a12 <Lpc40xxSystemController::SetClockFrequency(unsigned char)+0x4e>
    {
      offset = SetMainPll(PllInput::kIrc, frequency_in_mhz);
   109e4:	f89d 3003 	ldrb.w	r3, [sp, #3]
   109e8:	b29b      	uxth	r3, r3
   109ea:	461a      	mov	r2, r3
   109ec:	210c      	movs	r1, #12
   109ee:	9801      	ldr	r0, [sp, #4]
   109f0:	f000 f9ac 	bl	10d4c <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)>
   109f4:	9003      	str	r0, [sp, #12]
      SelectMainClockSource(MainClockSource::kPllClock);
   109f6:	f44f 7180 	mov.w	r1, #256	; 0x100
   109fa:	9801      	ldr	r0, [sp, #4]
   109fc:	f000 f8d6 	bl	10bac <Lpc40xxSystemController::SelectMainClockSource(Lpc40xxSystemController::MainClockSource)>
      speed_in_hertz = frequency_in_mhz * 1'000'000;
   10a00:	f89d 3003 	ldrb.w	r3, [sp, #3]
   10a04:	4a10      	ldr	r2, [pc, #64]	; (10a48 <Lpc40xxSystemController::SetClockFrequency(unsigned char)+0x84>)
   10a06:	fb02 f303 	mul.w	r3, r2, r3
   10a0a:	461a      	mov	r2, r3
   10a0c:	4b0f      	ldr	r3, [pc, #60]	; (10a4c <Lpc40xxSystemController::SetClockFrequency(unsigned char)+0x88>)
   10a0e:	601a      	str	r2, [r3, #0]
   10a10:	e006      	b.n	10a20 <Lpc40xxSystemController::SetClockFrequency(unsigned char)+0x5c>
    }
    else
    {
      SelectMainClockSource(MainClockSource::kBaseClock);
   10a12:	2100      	movs	r1, #0
   10a14:	9801      	ldr	r0, [sp, #4]
   10a16:	f000 f8c9 	bl	10bac <Lpc40xxSystemController::SelectMainClockSource(Lpc40xxSystemController::MainClockSource)>
      speed_in_hertz = kDefaultIRCFrequency;
   10a1a:	4b0c      	ldr	r3, [pc, #48]	; (10a4c <Lpc40xxSystemController::SetClockFrequency(unsigned char)+0x88>)
   10a1c:	4a0c      	ldr	r2, [pc, #48]	; (10a50 <Lpc40xxSystemController::SetClockFrequency(unsigned char)+0x8c>)
   10a1e:	601a      	str	r2, [r3, #0]
    }
    SetCpuClockDivider(kDivideInputBy1);
   10a20:	2101      	movs	r1, #1
   10a22:	9801      	ldr	r0, [sp, #4]
   10a24:	f000 fa4a 	bl	10ebc <Lpc40xxSystemController::SetCpuClockDivider(unsigned char)>
    SetPeripheralClockDivider(kDivideInputBy1);
   10a28:	9b01      	ldr	r3, [sp, #4]
   10a2a:	681b      	ldr	r3, [r3, #0]
   10a2c:	3304      	adds	r3, #4
   10a2e:	681b      	ldr	r3, [r3, #0]
   10a30:	2101      	movs	r1, #1
   10a32:	9801      	ldr	r0, [sp, #4]
   10a34:	4798      	blx	r3
    SetEmcClockDivider(EmcDivider::kSameSpeedAsCpu);
   10a36:	2100      	movs	r1, #0
   10a38:	9801      	ldr	r0, [sp, #4]
   10a3a:	f000 fa73 	bl	10f24 <Lpc40xxSystemController::SetEmcClockDivider(Lpc40xxSystemController::EmcDivider)>
    return offset;
   10a3e:	9b03      	ldr	r3, [sp, #12]
  }
   10a40:	4618      	mov	r0, r3
   10a42:	b005      	add	sp, #20
   10a44:	f85d fb04 	ldr.w	pc, [sp], #4
   10a48:	000f4240 	.word	0x000f4240
   10a4c:	10000008 	.word	0x10000008
   10a50:	00b71b00 	.word	0x00b71b00

00010a54 <Lpc40xxSystemController::SetPeripheralClockDivider(unsigned char)>:

  void SetPeripheralClockDivider(uint8_t peripheral_divider) override
   10a54:	b500      	push	{lr}
   10a56:	b083      	sub	sp, #12
   10a58:	9001      	str	r0, [sp, #4]
   10a5a:	460b      	mov	r3, r1
   10a5c:	f88d 3003 	strb.w	r3, [sp, #3]
  {
    SJ2_ASSERT_FATAL(peripheral_divider <= 4, "Divider mustn't exceed 32");
   10a60:	f89d 3003 	ldrb.w	r3, [sp, #3]
   10a64:	2b04      	cmp	r3, #4
   10a66:	d90d      	bls.n	10a84 <Lpc40xxSystemController::SetPeripheralClockDivider(unsigned char)+0x30>
   10a68:	23ae      	movs	r3, #174	; 0xae
   10a6a:	4a0b      	ldr	r2, [pc, #44]	; (10a98 <Lpc40xxSystemController::SetPeripheralClockDivider(unsigned char)+0x44>)
   10a6c:	490b      	ldr	r1, [pc, #44]	; (10a9c <Lpc40xxSystemController::SetPeripheralClockDivider(unsigned char)+0x48>)
   10a6e:	480c      	ldr	r0, [pc, #48]	; (10aa0 <Lpc40xxSystemController::SetPeripheralClockDivider(unsigned char)+0x4c>)
   10a70:	f003 fb90 	bl	14194 <printf>
   10a74:	480b      	ldr	r0, [pc, #44]	; (10aa4 <Lpc40xxSystemController::SetPeripheralClockDivider(unsigned char)+0x50>)
   10a76:	f002 f903 	bl	12c80 <puts>
   10a7a:	2100      	movs	r1, #0
   10a7c:	2001      	movs	r0, #1
   10a7e:	f7ff fecf 	bl	10820 <debug::PrintBacktrace(bool, void*)>
   10a82:	e7fe      	b.n	10a82 <Lpc40xxSystemController::SetPeripheralClockDivider(unsigned char)+0x2e>
    system_controller->PCLKSEL = peripheral_divider;
   10a84:	4b08      	ldr	r3, [pc, #32]	; (10aa8 <Lpc40xxSystemController::SetPeripheralClockDivider(unsigned char)+0x54>)
   10a86:	681b      	ldr	r3, [r3, #0]
   10a88:	f89d 2003 	ldrb.w	r2, [sp, #3]
   10a8c:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
  }
   10a90:	bf00      	nop
   10a92:	b003      	add	sp, #12
   10a94:	f85d fb04 	ldr.w	pc, [sp], #4
   10a98:	00017b04 	.word	0x00017b04
   10a9c:	0001792c 	.word	0x0001792c
   10aa0:	00017478 	.word	0x00017478
   10aa4:	00017518 	.word	0x00017518
   10aa8:	10000004 	.word	0x10000004

00010aac <Lpc40xxSystemController::GetPeripheralClockDivider() const>:

  uint32_t GetPeripheralClockDivider() const override
   10aac:	b082      	sub	sp, #8
   10aae:	9001      	str	r0, [sp, #4]
  {
#if defined(HOST_TEST)
    return 1;
#else
    return system_controller->PCLKSEL;
   10ab0:	4b03      	ldr	r3, [pc, #12]	; (10ac0 <Lpc40xxSystemController::GetPeripheralClockDivider() const+0x14>)
   10ab2:	681b      	ldr	r3, [r3, #0]
   10ab4:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
#endif
  }
   10ab8:	4618      	mov	r0, r3
   10aba:	b002      	add	sp, #8
   10abc:	4770      	bx	lr
   10abe:	bf00      	nop
   10ac0:	10000004 	.word	0x10000004

00010ac4 <Lpc40xxSystemController::GetSystemFrequency() const>:

  uint32_t GetSystemFrequency() const override
   10ac4:	b082      	sub	sp, #8
   10ac6:	9001      	str	r0, [sp, #4]
  {
#if defined(HOST_TEST)
    return config::kSystemClockRate;
#else
    return speed_in_hertz;
   10ac8:	4b02      	ldr	r3, [pc, #8]	; (10ad4 <Lpc40xxSystemController::GetSystemFrequency() const+0x10>)
   10aca:	681b      	ldr	r3, [r3, #0]
#endif
  }
   10acc:	4618      	mov	r0, r3
   10ace:	b002      	add	sp, #8
   10ad0:	4770      	bx	lr
   10ad2:	bf00      	nop
   10ad4:	10000008 	.word	0x10000008

00010ad8 <Lpc40xxSystemController::GetPeripheralFrequency() const>:

  uint32_t GetPeripheralFrequency() const override
   10ad8:	b500      	push	{lr}
   10ada:	b085      	sub	sp, #20
   10adc:	9001      	str	r0, [sp, #4]
  {
    uint32_t peripheral_clock_divider = GetPeripheralClockDivider();
   10ade:	9b01      	ldr	r3, [sp, #4]
   10ae0:	681b      	ldr	r3, [r3, #0]
   10ae2:	3308      	adds	r3, #8
   10ae4:	681b      	ldr	r3, [r3, #0]
   10ae6:	9801      	ldr	r0, [sp, #4]
   10ae8:	4798      	blx	r3
   10aea:	9002      	str	r0, [sp, #8]
    uint32_t result = 0;  // return 0 if peripheral_clock_divider == 0
   10aec:	2300      	movs	r3, #0
   10aee:	9303      	str	r3, [sp, #12]
    if (peripheral_clock_divider != 0)
   10af0:	9b02      	ldr	r3, [sp, #8]
   10af2:	2b00      	cmp	r3, #0
   10af4:	d00a      	beq.n	10b0c <Lpc40xxSystemController::GetPeripheralFrequency() const+0x34>
    {
      result = GetSystemFrequency() / peripheral_clock_divider;
   10af6:	9b01      	ldr	r3, [sp, #4]
   10af8:	681b      	ldr	r3, [r3, #0]
   10afa:	330c      	adds	r3, #12
   10afc:	681b      	ldr	r3, [r3, #0]
   10afe:	9801      	ldr	r0, [sp, #4]
   10b00:	4798      	blx	r3
   10b02:	4602      	mov	r2, r0
   10b04:	9b02      	ldr	r3, [sp, #8]
   10b06:	fbb2 f3f3 	udiv	r3, r2, r3
   10b0a:	9303      	str	r3, [sp, #12]
    }
    return result;
   10b0c:	9b03      	ldr	r3, [sp, #12]
  }
   10b0e:	4618      	mov	r0, r3
   10b10:	b005      	add	sp, #20
   10b12:	f85d fb04 	ldr.w	pc, [sp], #4
   10b16:	Address 0x0000000000010b16 is out of bounds.


00010b18 <Lpc40xxSystemController::PowerUpPeripheral(SystemControllerInterface::PeripheralID const&)>:

  void PowerUpPeripheral(const PeripheralID & peripheral_select) override
   10b18:	b084      	sub	sp, #16
   10b1a:	9001      	str	r0, [sp, #4]
   10b1c:	9100      	str	r1, [sp, #0]
  {
    auto power_connection_with_enabled_peripheral =
        system_controller->PCONP | (1 << peripheral_select.device_id);
   10b1e:	4b09      	ldr	r3, [pc, #36]	; (10b44 <Lpc40xxSystemController::PowerUpPeripheral(SystemControllerInterface::PeripheralID const&)+0x2c>)
   10b20:	681b      	ldr	r3, [r3, #0]
   10b22:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
   10b26:	9a00      	ldr	r2, [sp, #0]
   10b28:	6812      	ldr	r2, [r2, #0]
   10b2a:	2101      	movs	r1, #1
   10b2c:	fa01 f202 	lsl.w	r2, r1, r2
   10b30:	4313      	orrs	r3, r2
   10b32:	9303      	str	r3, [sp, #12]

    system_controller->PCONP = power_connection_with_enabled_peripheral;
   10b34:	4b03      	ldr	r3, [pc, #12]	; (10b44 <Lpc40xxSystemController::PowerUpPeripheral(SystemControllerInterface::PeripheralID const&)+0x2c>)
   10b36:	681b      	ldr	r3, [r3, #0]
   10b38:	9a03      	ldr	r2, [sp, #12]
   10b3a:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  }
   10b3e:	bf00      	nop
   10b40:	b004      	add	sp, #16
   10b42:	4770      	bx	lr
   10b44:	10000004 	.word	0x10000004

00010b48 <Lpc40xxSystemController::PowerDownPeripheral(SystemControllerInterface::PeripheralID const&)>:
  void PowerDownPeripheral(const PeripheralID & peripheral_select) override
   10b48:	b084      	sub	sp, #16
   10b4a:	9001      	str	r0, [sp, #4]
   10b4c:	9100      	str	r1, [sp, #0]
  {
    auto power_connection_without_enabled_peripheral =
        system_controller->PCONP & (1 << peripheral_select.device_id);
   10b4e:	4b09      	ldr	r3, [pc, #36]	; (10b74 <Lpc40xxSystemController::PowerDownPeripheral(SystemControllerInterface::PeripheralID const&)+0x2c>)
   10b50:	681b      	ldr	r3, [r3, #0]
   10b52:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
   10b56:	9a00      	ldr	r2, [sp, #0]
   10b58:	6812      	ldr	r2, [r2, #0]
   10b5a:	2101      	movs	r1, #1
   10b5c:	fa01 f202 	lsl.w	r2, r1, r2
   10b60:	4013      	ands	r3, r2
   10b62:	9303      	str	r3, [sp, #12]

    system_controller->PCONP = power_connection_without_enabled_peripheral;
   10b64:	4b03      	ldr	r3, [pc, #12]	; (10b74 <Lpc40xxSystemController::PowerDownPeripheral(SystemControllerInterface::PeripheralID const&)+0x2c>)
   10b66:	681b      	ldr	r3, [r3, #0]
   10b68:	9a03      	ldr	r2, [sp, #12]
   10b6a:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  }
   10b6e:	bf00      	nop
   10b70:	b004      	add	sp, #16
   10b72:	4770      	bx	lr
   10b74:	10000004 	.word	0x10000004

00010b78 <Lpc40xxSystemController::SelectOscillatorSource(Lpc40xxSystemController::OscillatorSource)>:

 private:
  void SelectOscillatorSource(OscillatorSource source)
   10b78:	b084      	sub	sp, #16
   10b7a:	9001      	str	r0, [sp, #4]
   10b7c:	460b      	mov	r3, r1
   10b7e:	f8ad 3002 	strh.w	r3, [sp, #2]
  {
    uint32_t source_bit = static_cast<uint32_t>(source);
   10b82:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   10b86:	9303      	str	r3, [sp, #12]
    system_controller->CLKSRCSEL =
        (system_controller->CLKSRCSEL & ~(kOscillatorSelect)) | source_bit;
   10b88:	4b07      	ldr	r3, [pc, #28]	; (10ba8 <Lpc40xxSystemController::SelectOscillatorSource(Lpc40xxSystemController::OscillatorSource)+0x30>)
   10b8a:	681b      	ldr	r3, [r3, #0]
   10b8c:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
   10b90:	f023 0101 	bic.w	r1, r3, #1
    system_controller->CLKSRCSEL =
   10b94:	4b04      	ldr	r3, [pc, #16]	; (10ba8 <Lpc40xxSystemController::SelectOscillatorSource(Lpc40xxSystemController::OscillatorSource)+0x30>)
   10b96:	681b      	ldr	r3, [r3, #0]
        (system_controller->CLKSRCSEL & ~(kOscillatorSelect)) | source_bit;
   10b98:	9a03      	ldr	r2, [sp, #12]
   10b9a:	430a      	orrs	r2, r1
    system_controller->CLKSRCSEL =
   10b9c:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
  }
   10ba0:	bf00      	nop
   10ba2:	b004      	add	sp, #16
   10ba4:	4770      	bx	lr
   10ba6:	bf00      	nop
   10ba8:	10000004 	.word	0x10000004

00010bac <Lpc40xxSystemController::SelectMainClockSource(Lpc40xxSystemController::MainClockSource)>:

  void SelectMainClockSource(MainClockSource source)
   10bac:	b082      	sub	sp, #8
   10bae:	9001      	str	r0, [sp, #4]
   10bb0:	460b      	mov	r3, r1
   10bb2:	f8ad 3002 	strh.w	r3, [sp, #2]
  {
    system_controller->CCLKSEL =
        (system_controller->CCLKSEL & ~(kBaseClockSelect)) |
   10bb6:	4b08      	ldr	r3, [pc, #32]	; (10bd8 <Lpc40xxSystemController::SelectMainClockSource(Lpc40xxSystemController::MainClockSource)+0x2c>)
   10bb8:	681b      	ldr	r3, [r3, #0]
   10bba:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   10bbe:	f423 7180 	bic.w	r1, r3, #256	; 0x100
        static_cast<uint32_t>(source);
   10bc2:	f8bd 2002 	ldrh.w	r2, [sp, #2]
    system_controller->CCLKSEL =
   10bc6:	4b04      	ldr	r3, [pc, #16]	; (10bd8 <Lpc40xxSystemController::SelectMainClockSource(Lpc40xxSystemController::MainClockSource)+0x2c>)
   10bc8:	681b      	ldr	r3, [r3, #0]
        (system_controller->CCLKSEL & ~(kBaseClockSelect)) |
   10bca:	430a      	orrs	r2, r1
    system_controller->CCLKSEL =
   10bcc:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
  }
   10bd0:	bf00      	nop
   10bd2:	b002      	add	sp, #8
   10bd4:	4770      	bx	lr
   10bd6:	bf00      	nop
   10bd8:	10000004 	.word	0x10000004

00010bdc <Lpc40xxSystemController::SelectUsbClockSource(Lpc40xxSystemController::UsbSource)>:

  void SelectUsbClockSource(UsbSource usb_clock)
   10bdc:	b082      	sub	sp, #8
   10bde:	9001      	str	r0, [sp, #4]
   10be0:	460b      	mov	r3, r1
   10be2:	f8ad 3002 	strh.w	r3, [sp, #2]
  {
    system_controller->USBCLKSEL =
        (system_controller->USBCLKSEL & ~(kUsbClockSource)) |
   10be6:	4b08      	ldr	r3, [pc, #32]	; (10c08 <Lpc40xxSystemController::SelectUsbClockSource(Lpc40xxSystemController::UsbSource)+0x2c>)
   10be8:	681b      	ldr	r3, [r3, #0]
   10bea:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
   10bee:	f423 7140 	bic.w	r1, r3, #768	; 0x300
        static_cast<uint32_t>(usb_clock);
   10bf2:	f8bd 2002 	ldrh.w	r2, [sp, #2]
    system_controller->USBCLKSEL =
   10bf6:	4b04      	ldr	r3, [pc, #16]	; (10c08 <Lpc40xxSystemController::SelectUsbClockSource(Lpc40xxSystemController::UsbSource)+0x2c>)
   10bf8:	681b      	ldr	r3, [r3, #0]
        (system_controller->USBCLKSEL & ~(kUsbClockSource)) |
   10bfa:	430a      	orrs	r2, r1
    system_controller->USBCLKSEL =
   10bfc:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
  }
   10c00:	bf00      	nop
   10c02:	b002      	add	sp, #8
   10c04:	4770      	bx	lr
   10c06:	bf00      	nop
   10c08:	10000004 	.word	0x10000004

00010c0c <Lpc40xxSystemController::SelectSpifiClockSource(Lpc40xxSystemController::SpifiSource)>:

  void SelectSpifiClockSource(SpifiSource spifi_clock)
   10c0c:	b082      	sub	sp, #8
   10c0e:	9001      	str	r0, [sp, #4]
   10c10:	460b      	mov	r3, r1
   10c12:	f8ad 3002 	strh.w	r3, [sp, #2]
  {
    system_controller->SPIFISEL =
        (system_controller->SPIFISEL & ~(kSpifiClockSource)) |
   10c16:	4b08      	ldr	r3, [pc, #32]	; (10c38 <Lpc40xxSystemController::SelectSpifiClockSource(Lpc40xxSystemController::SpifiSource)+0x2c>)
   10c18:	681b      	ldr	r3, [r3, #0]
   10c1a:	f8d3 31b4 	ldr.w	r3, [r3, #436]	; 0x1b4
   10c1e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
        static_cast<uint32_t>(spifi_clock);
   10c22:	f8bd 2002 	ldrh.w	r2, [sp, #2]
    system_controller->SPIFISEL =
   10c26:	4b04      	ldr	r3, [pc, #16]	; (10c38 <Lpc40xxSystemController::SelectSpifiClockSource(Lpc40xxSystemController::SpifiSource)+0x2c>)
   10c28:	681b      	ldr	r3, [r3, #0]
        (system_controller->SPIFISEL & ~(kSpifiClockSource)) |
   10c2a:	430a      	orrs	r2, r1
    system_controller->SPIFISEL =
   10c2c:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
  }
   10c30:	bf00      	nop
   10c32:	b002      	add	sp, #8
   10c34:	4770      	bx	lr
   10c36:	bf00      	nop
   10c38:	10000004 	.word	0x10000004

00010c3c <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)>:

  uint32_t CalculatePll(PllInput input_frequency, uint16_t desired_speed_in_mhz)
   10c3c:	b500      	push	{lr}
   10c3e:	b087      	sub	sp, #28
   10c40:	9001      	str	r0, [sp, #4]
   10c42:	460b      	mov	r3, r1
   10c44:	f8ad 3002 	strh.w	r3, [sp, #2]
   10c48:	4613      	mov	r3, r2
   10c4a:	f8ad 3000 	strh.w	r3, [sp]
  {
    SJ2_ASSERT_FATAL(desired_speed_in_mhz < 384 && desired_speed_in_mhz > 12,
   10c4e:	f8bd 3000 	ldrh.w	r3, [sp]
   10c52:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
   10c56:	d203      	bcs.n	10c60 <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)+0x24>
   10c58:	f8bd 3000 	ldrh.w	r3, [sp]
   10c5c:	2b0c      	cmp	r3, #12
   10c5e:	d80d      	bhi.n	10c7c <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)+0x40>
   10c60:	23ff      	movs	r3, #255	; 0xff
   10c62:	4a34      	ldr	r2, [pc, #208]	; (10d34 <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)+0xf8>)
   10c64:	4934      	ldr	r1, [pc, #208]	; (10d38 <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)+0xfc>)
   10c66:	4835      	ldr	r0, [pc, #212]	; (10d3c <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)+0x100>)
   10c68:	f003 fa94 	bl	14194 <printf>
   10c6c:	4834      	ldr	r0, [pc, #208]	; (10d40 <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)+0x104>)
   10c6e:	f002 f807 	bl	12c80 <puts>
   10c72:	2100      	movs	r1, #0
   10c74:	2001      	movs	r0, #1
   10c76:	f7ff fdd3 	bl	10820 <debug::PrintBacktrace(bool, void*)>
   10c7a:	e7fe      	b.n	10c7a <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)+0x3e>
                     "Frequency must be lower than 384 MHz"
                     "and greater than or equal to 12 MHz");
    bool calculating = true;
   10c7c:	2301      	movs	r3, #1
   10c7e:	f88d 3017 	strb.w	r3, [sp, #23]
    uint32_t multiplier_value;
    if ((desired_speed_in_mhz % static_cast<uint16_t>(input_frequency)) >= 1)
   10c82:	f8bd 3000 	ldrh.w	r3, [sp]
   10c86:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   10c8a:	fbb3 f1f2 	udiv	r1, r3, r2
   10c8e:	fb02 f201 	mul.w	r2, r2, r1
   10c92:	1a9b      	subs	r3, r3, r2
   10c94:	b29b      	uxth	r3, r3
   10c96:	2b00      	cmp	r3, #0
   10c98:	d009      	beq.n	10cae <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)+0x72>
    {
      multiplier_value = static_cast<uint32_t>(
          (desired_speed_in_mhz / static_cast<uint16_t>(input_frequency)) + 1);
   10c9a:	f8bd 2000 	ldrh.w	r2, [sp]
   10c9e:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   10ca2:	fbb2 f3f3 	udiv	r3, r2, r3
   10ca6:	b29b      	uxth	r3, r3
   10ca8:	3301      	adds	r3, #1
      multiplier_value = static_cast<uint32_t>(
   10caa:	9304      	str	r3, [sp, #16]
   10cac:	e007      	b.n	10cbe <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)+0x82>
    }
    else
    {
      multiplier_value = static_cast<uint32_t>(
          desired_speed_in_mhz / static_cast<uint16_t>(input_frequency));
   10cae:	f8bd 2000 	ldrh.w	r2, [sp]
   10cb2:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   10cb6:	fbb2 f3f3 	udiv	r3, r2, r3
   10cba:	b29b      	uxth	r3, r3
      multiplier_value = static_cast<uint32_t>(
   10cbc:	9304      	str	r3, [sp, #16]
    }
    uint16_t divider_value = 1;
   10cbe:	2301      	movs	r3, #1
   10cc0:	f8ad 300e 	strh.w	r3, [sp, #14]
    while (calculating)
   10cc4:	f89d 3017 	ldrb.w	r3, [sp, #23]
   10cc8:	2b00      	cmp	r3, #0
   10cca:	d02e      	beq.n	10d2a <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)+0xee>
    {
      uint16_t current_controlled_oscillator_frequency;
      current_controlled_oscillator_frequency = static_cast<uint16_t>(
   10ccc:	9b04      	ldr	r3, [sp, #16]
   10cce:	b29b      	uxth	r3, r3
   10cd0:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   10cd4:	fb12 f303 	smulbb	r3, r2, r3
   10cd8:	b29b      	uxth	r3, r3
   10cda:	f8bd 200e 	ldrh.w	r2, [sp, #14]
   10cde:	fb12 f303 	smulbb	r3, r2, r3
   10ce2:	b29b      	uxth	r3, r3
   10ce4:	005b      	lsls	r3, r3, #1
   10ce6:	f8ad 300c 	strh.w	r3, [sp, #12]
          (static_cast<uint16_t>(input_frequency) * multiplier_value * 2) *
          divider_value);
      if (current_controlled_oscillator_frequency >= 156)
   10cea:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   10cee:	2b9b      	cmp	r3, #155	; 0x9b
   10cf0:	d903      	bls.n	10cfa <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)+0xbe>
      {
        calculating = false;
   10cf2:	2300      	movs	r3, #0
   10cf4:	f88d 3017 	strb.w	r3, [sp, #23]
   10cf8:	e7e4      	b.n	10cc4 <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)+0x88>
      }
      else
      {
        divider_value = static_cast<uint16_t>(divider_value * 2);
   10cfa:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   10cfe:	005b      	lsls	r3, r3, #1
   10d00:	f8ad 300e 	strh.w	r3, [sp, #14]
        SJ2_ASSERT_FATAL(divider_value < 8,
   10d04:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   10d08:	2b07      	cmp	r3, #7
   10d0a:	d9db      	bls.n	10cc4 <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)+0x88>
   10d0c:	f240 131b 	movw	r3, #283	; 0x11b
   10d10:	4a08      	ldr	r2, [pc, #32]	; (10d34 <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)+0xf8>)
   10d12:	490c      	ldr	r1, [pc, #48]	; (10d44 <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)+0x108>)
   10d14:	480c      	ldr	r0, [pc, #48]	; (10d48 <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)+0x10c>)
   10d16:	f003 fa3d 	bl	14194 <printf>
   10d1a:	4809      	ldr	r0, [pc, #36]	; (10d40 <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)+0x104>)
   10d1c:	f001 ffb0 	bl	12c80 <puts>
   10d20:	2100      	movs	r1, #0
   10d22:	2001      	movs	r0, #1
   10d24:	f7ff fd7c 	bl	10820 <debug::PrintBacktrace(bool, void*)>
   10d28:	e7fe      	b.n	10d28 <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)+0xec>
                         "PLL divider value went out of bounds");
      }
    }

    return multiplier_value;
   10d2a:	9b04      	ldr	r3, [sp, #16]
  }
   10d2c:	4618      	mov	r0, r3
   10d2e:	b007      	add	sp, #28
   10d30:	f85d fb04 	ldr.w	pc, [sp], #4
   10d34:	00017bac 	.word	0x00017bac
   10d38:	00017944 	.word	0x00017944
   10d3c:	00017530 	.word	0x00017530
   10d40:	00017518 	.word	0x00017518
   10d44:	0001795c 	.word	0x0001795c
   10d48:	00017620 	.word	0x00017620

00010d4c <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)>:

  uint32_t SetMainPll(PllInput input_frequency, uint16_t desired_speed_in_mhz)
   10d4c:	b510      	push	{r4, lr}
   10d4e:	b08a      	sub	sp, #40	; 0x28
   10d50:	9001      	str	r0, [sp, #4]
   10d52:	460b      	mov	r3, r1
   10d54:	f8ad 3002 	strh.w	r3, [sp, #2]
   10d58:	4613      	mov	r3, r2
   10d5a:	f8ad 3000 	strh.w	r3, [sp]
  {
    uint16_t divider_value = 1;
   10d5e:	2301      	movs	r3, #1
   10d60:	f8ad 301a 	strh.w	r3, [sp, #26]
    uint64_t timeout_time  = Milliseconds() + kDefaultTimeout;
   10d64:	f7ff fe0c 	bl	10980 <Milliseconds()>
   10d68:	460a      	mov	r2, r1
   10d6a:	4601      	mov	r1, r0
   10d6c:	f511 737a 	adds.w	r3, r1, #1000	; 0x3e8
   10d70:	f142 0400 	adc.w	r4, r2, #0
   10d74:	e9cd 3404 	strd	r3, r4, [sp, #16]
    uint64_t current_time  = Milliseconds();
   10d78:	f7ff fe02 	bl	10980 <Milliseconds()>
   10d7c:	e9cd 0108 	strd	r0, r1, [sp, #32]
    uint32_t multiplier_value =
        CalculatePll(input_frequency, desired_speed_in_mhz);
   10d80:	f8bd 2000 	ldrh.w	r2, [sp]
   10d84:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   10d88:	4619      	mov	r1, r3
   10d8a:	9801      	ldr	r0, [sp, #4]
   10d8c:	f7ff ff56 	bl	10c3c <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)>
   10d90:	9003      	str	r0, [sp, #12]
    uint32_t actual_speed =
        static_cast<uint32_t>(input_frequency) * multiplier_value;
   10d92:	f8bd 2002 	ldrh.w	r2, [sp, #2]
    uint32_t actual_speed =
   10d96:	9b03      	ldr	r3, [sp, #12]
   10d98:	fb02 f303 	mul.w	r3, r2, r3
   10d9c:	9307      	str	r3, [sp, #28]
    // TO DO: use registers to retreive values
    SelectOscillatorSource(OscillatorSource::kIrc);
   10d9e:	2100      	movs	r1, #0
   10da0:	9801      	ldr	r0, [sp, #4]
   10da2:	f7ff fee9 	bl	10b78 <Lpc40xxSystemController::SelectOscillatorSource(Lpc40xxSystemController::OscillatorSource)>
    SelectMainClockSource(MainClockSource::kBaseClock);
   10da6:	2100      	movs	r1, #0
   10da8:	9801      	ldr	r0, [sp, #4]
   10daa:	f7ff feff 	bl	10bac <Lpc40xxSystemController::SelectMainClockSource(Lpc40xxSystemController::MainClockSource)>
    SelectUsbClockSource(UsbSource::kBaseClock);
   10dae:	2100      	movs	r1, #0
   10db0:	9801      	ldr	r0, [sp, #4]
   10db2:	f7ff ff13 	bl	10bdc <Lpc40xxSystemController::SelectUsbClockSource(Lpc40xxSystemController::UsbSource)>
    SelectSpifiClockSource(SpifiSource::kBaseClock);
   10db6:	2100      	movs	r1, #0
   10db8:	9801      	ldr	r0, [sp, #4]
   10dba:	f7ff ff27 	bl	10c0c <Lpc40xxSystemController::SelectSpifiClockSource(Lpc40xxSystemController::SpifiSource)>
    // must subtract 1 from multiplier value as specified in datasheet
    system_controller->PLL0CFG =
        (system_controller->PLL0CFG & ~kClearPllMultiplier) |
   10dbe:	4b3a      	ldr	r3, [pc, #232]	; (10ea8 <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0x15c>)
   10dc0:	681b      	ldr	r3, [r3, #0]
   10dc2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   10dc6:	f023 011f 	bic.w	r1, r3, #31
        (multiplier_value - 1);
   10dca:	9b03      	ldr	r3, [sp, #12]
   10dcc:	1e5a      	subs	r2, r3, #1
    system_controller->PLL0CFG =
   10dce:	4b36      	ldr	r3, [pc, #216]	; (10ea8 <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0x15c>)
   10dd0:	681b      	ldr	r3, [r3, #0]
        (system_controller->PLL0CFG & ~kClearPllMultiplier) |
   10dd2:	430a      	orrs	r2, r1
    system_controller->PLL0CFG =
   10dd4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    system_controller->PLL0CFG =
        (system_controller->PLL0CFG & ~kClearPllDivider) | (divider_value << 5);
   10dd8:	4b33      	ldr	r3, [pc, #204]	; (10ea8 <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0x15c>)
   10dda:	681b      	ldr	r3, [r3, #0]
   10ddc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   10de0:	f023 0260 	bic.w	r2, r3, #96	; 0x60
   10de4:	f8bd 301a 	ldrh.w	r3, [sp, #26]
   10de8:	015b      	lsls	r3, r3, #5
   10dea:	4619      	mov	r1, r3
    system_controller->PLL0CFG =
   10dec:	4b2e      	ldr	r3, [pc, #184]	; (10ea8 <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0x15c>)
   10dee:	681b      	ldr	r3, [r3, #0]
        (system_controller->PLL0CFG & ~kClearPllDivider) | (divider_value << 5);
   10df0:	430a      	orrs	r2, r1
    system_controller->PLL0CFG =
   10df2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    system_controller->PLL0CON |= kEnablePll;
   10df6:	4b2c      	ldr	r3, [pc, #176]	; (10ea8 <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0x15c>)
   10df8:	681b      	ldr	r3, [r3, #0]
   10dfa:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
   10dfe:	4b2a      	ldr	r3, [pc, #168]	; (10ea8 <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0x15c>)
   10e00:	681b      	ldr	r3, [r3, #0]
   10e02:	f042 0201 	orr.w	r2, r2, #1
   10e06:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    // nessecary feed sequence to ensure the changes are intentional
    system_controller->PLL0FEED = 0xAA;
   10e0a:	4b27      	ldr	r3, [pc, #156]	; (10ea8 <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0x15c>)
   10e0c:	681b      	ldr	r3, [r3, #0]
   10e0e:	22aa      	movs	r2, #170	; 0xaa
   10e10:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    system_controller->PLL0FEED = 0x55;
   10e14:	4b24      	ldr	r3, [pc, #144]	; (10ea8 <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0x15c>)
   10e16:	681b      	ldr	r3, [r3, #0]
   10e18:	2255      	movs	r2, #85	; 0x55
   10e1a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    while (!(system_controller->PLL0STAT >> kPlock & 1) &&
   10e1e:	4b22      	ldr	r3, [pc, #136]	; (10ea8 <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0x15c>)
   10e20:	681b      	ldr	r3, [r3, #0]
   10e22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   10e26:	f403 6380 	and.w	r3, r3, #1024	; 0x400
   10e2a:	2b00      	cmp	r3, #0
   10e2c:	d109      	bne.n	10e42 <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0xf6>
   10e2e:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
   10e32:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
   10e36:	42a2      	cmp	r2, r4
   10e38:	bf08      	it	eq
   10e3a:	4299      	cmpeq	r1, r3
   10e3c:	d201      	bcs.n	10e42 <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0xf6>
   10e3e:	2301      	movs	r3, #1
   10e40:	e000      	b.n	10e44 <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0xf8>
   10e42:	2300      	movs	r3, #0
   10e44:	2b00      	cmp	r3, #0
   10e46:	d004      	beq.n	10e52 <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0x106>
           (current_time < timeout_time))
    {
      current_time = Milliseconds();
   10e48:	f7ff fd9a 	bl	10980 <Milliseconds()>
   10e4c:	e9cd 0108 	strd	r0, r1, [sp, #32]
    while (!(system_controller->PLL0STAT >> kPlock & 1) &&
   10e50:	e7e5      	b.n	10e1e <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0xd2>
    }
    if (!(system_controller->PLL0STAT >> kPlock & 1) &&
   10e52:	4b15      	ldr	r3, [pc, #84]	; (10ea8 <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0x15c>)
   10e54:	681b      	ldr	r3, [r3, #0]
   10e56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   10e5a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
   10e5e:	2b00      	cmp	r3, #0
   10e60:	d109      	bne.n	10e76 <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0x12a>
   10e62:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
   10e66:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
   10e6a:	42a2      	cmp	r2, r4
   10e6c:	bf08      	it	eq
   10e6e:	4299      	cmpeq	r1, r3
   10e70:	d301      	bcc.n	10e76 <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0x12a>
   10e72:	2301      	movs	r3, #1
   10e74:	e000      	b.n	10e78 <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0x12c>
   10e76:	2300      	movs	r3, #0
   10e78:	2b00      	cmp	r3, #0
   10e7a:	d00e      	beq.n	10e9a <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0x14e>
        (current_time >= timeout_time))
    {
      SJ2_ASSERT_FATAL(false,
   10e7c:	f240 1343 	movw	r3, #323	; 0x143
   10e80:	4a0a      	ldr	r2, [pc, #40]	; (10eac <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0x160>)
   10e82:	490b      	ldr	r1, [pc, #44]	; (10eb0 <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0x164>)
   10e84:	480b      	ldr	r0, [pc, #44]	; (10eb4 <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0x168>)
   10e86:	f003 f985 	bl	14194 <printf>
   10e8a:	480b      	ldr	r0, [pc, #44]	; (10eb8 <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0x16c>)
   10e8c:	f001 fef8 	bl	12c80 <puts>
   10e90:	2100      	movs	r1, #0
   10e92:	2001      	movs	r0, #1
   10e94:	f7ff fcc4 	bl	10820 <debug::PrintBacktrace(bool, void*)>
   10e98:	e7fe      	b.n	10e98 <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0x14c>
                       "PLL lock could not be established before timeout");
      actual_speed = kDefaultIRCFrequency;
    }
    return (actual_speed - desired_speed_in_mhz);
   10e9a:	f8bd 3000 	ldrh.w	r3, [sp]
   10e9e:	9a07      	ldr	r2, [sp, #28]
   10ea0:	1ad3      	subs	r3, r2, r3
  }
   10ea2:	4618      	mov	r0, r3
   10ea4:	b00a      	add	sp, #40	; 0x28
   10ea6:	bd10      	pop	{r4, pc}
   10ea8:	10000004 	.word	0x10000004
   10eac:	00017b50 	.word	0x00017b50
   10eb0:	00017974 	.word	0x00017974
   10eb4:	000176c8 	.word	0x000176c8
   10eb8:	00017518 	.word	0x00017518

00010ebc <Lpc40xxSystemController::SetCpuClockDivider(unsigned char)>:
                       "PLL lock could not be established before timeout");
    }
    return (actual_speed - desired_speed_in_mhz);
  }

  void SetCpuClockDivider(uint8_t cpu_divider)
   10ebc:	b500      	push	{lr}
   10ebe:	b083      	sub	sp, #12
   10ec0:	9001      	str	r0, [sp, #4]
   10ec2:	460b      	mov	r3, r1
   10ec4:	f88d 3003 	strb.w	r3, [sp, #3]
  {
    SJ2_ASSERT_FATAL(cpu_divider < 32, "Divider mustn't exceed 32");
   10ec8:	f89d 3003 	ldrb.w	r3, [sp, #3]
   10ecc:	2b1f      	cmp	r3, #31
   10ece:	d90e      	bls.n	10eee <Lpc40xxSystemController::SetCpuClockDivider(unsigned char)+0x32>
   10ed0:	f240 136f 	movw	r3, #367	; 0x16f
   10ed4:	4a0e      	ldr	r2, [pc, #56]	; (10f10 <Lpc40xxSystemController::SetCpuClockDivider(unsigned char)+0x54>)
   10ed6:	490f      	ldr	r1, [pc, #60]	; (10f14 <Lpc40xxSystemController::SetCpuClockDivider(unsigned char)+0x58>)
   10ed8:	480f      	ldr	r0, [pc, #60]	; (10f18 <Lpc40xxSystemController::SetCpuClockDivider(unsigned char)+0x5c>)
   10eda:	f003 f95b 	bl	14194 <printf>
   10ede:	480f      	ldr	r0, [pc, #60]	; (10f1c <Lpc40xxSystemController::SetCpuClockDivider(unsigned char)+0x60>)
   10ee0:	f001 fece 	bl	12c80 <puts>
   10ee4:	2100      	movs	r1, #0
   10ee6:	2001      	movs	r0, #1
   10ee8:	f7ff fc9a 	bl	10820 <debug::PrintBacktrace(bool, void*)>
   10eec:	e7fe      	b.n	10eec <Lpc40xxSystemController::SetCpuClockDivider(unsigned char)+0x30>
    system_controller->CCLKSEL =
        (system_controller->CCLKSEL & ~kClearCpuDivider) | cpu_divider;
   10eee:	4b0c      	ldr	r3, [pc, #48]	; (10f20 <Lpc40xxSystemController::SetCpuClockDivider(unsigned char)+0x64>)
   10ef0:	681b      	ldr	r3, [r3, #0]
   10ef2:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   10ef6:	f023 011f 	bic.w	r1, r3, #31
   10efa:	f89d 2003 	ldrb.w	r2, [sp, #3]
    system_controller->CCLKSEL =
   10efe:	4b08      	ldr	r3, [pc, #32]	; (10f20 <Lpc40xxSystemController::SetCpuClockDivider(unsigned char)+0x64>)
   10f00:	681b      	ldr	r3, [r3, #0]
        (system_controller->CCLKSEL & ~kClearCpuDivider) | cpu_divider;
   10f02:	430a      	orrs	r2, r1
    system_controller->CCLKSEL =
   10f04:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
  }
   10f08:	bf00      	nop
   10f0a:	b003      	add	sp, #12
   10f0c:	f85d fb04 	ldr.w	pc, [sp], #4
   10f10:	00017c08 	.word	0x00017c08
   10f14:	0001798c 	.word	0x0001798c
   10f18:	00017770 	.word	0x00017770
   10f1c:	00017518 	.word	0x00017518
   10f20:	10000004 	.word	0x10000004

00010f24 <Lpc40xxSystemController::SetEmcClockDivider(Lpc40xxSystemController::EmcDivider)>:

  void SetEmcClockDivider(EmcDivider emc_divider)
   10f24:	b082      	sub	sp, #8
   10f26:	9001      	str	r0, [sp, #4]
   10f28:	460b      	mov	r3, r1
   10f2a:	f88d 3003 	strb.w	r3, [sp, #3]
  {
    system_controller->EMCCLKSEL =
        (system_controller->EMCCLKSEL & ~kClearEmcDivider) |
   10f2e:	4b08      	ldr	r3, [pc, #32]	; (10f50 <Lpc40xxSystemController::SetEmcClockDivider(Lpc40xxSystemController::EmcDivider)+0x2c>)
   10f30:	681b      	ldr	r3, [r3, #0]
   10f32:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   10f36:	f023 0101 	bic.w	r1, r3, #1
        static_cast<uint8_t>(emc_divider);
   10f3a:	f89d 2003 	ldrb.w	r2, [sp, #3]
    system_controller->EMCCLKSEL =
   10f3e:	4b04      	ldr	r3, [pc, #16]	; (10f50 <Lpc40xxSystemController::SetEmcClockDivider(Lpc40xxSystemController::EmcDivider)+0x2c>)
   10f40:	681b      	ldr	r3, [r3, #0]
        (system_controller->EMCCLKSEL & ~kClearEmcDivider) |
   10f42:	430a      	orrs	r2, r1
    system_controller->EMCCLKSEL =
   10f44:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }
   10f48:	bf00      	nop
   10f4a:	b002      	add	sp, #8
   10f4c:	4770      	bx	lr
   10f4e:	bf00      	nop
   10f50:	10000004 	.word	0x10000004

00010f54 <SystemTimer::DisableTimer()>:
  /// system_timer_isr defaults to nullptr. The actual SystemTickHandler should
  /// check if the isr is set to nullptr, and if it is, turn off the timer, if
  /// set a proper function then execute it.
  inline static IsrPointer system_timer_isr = nullptr;
  /// WARNING: Doing so will most likely disable FreeRTOS
  static void DisableTimer()
   10f54:	b510      	push	{r4, lr}
   10f56:	4674      	mov	r4, lr
   10f58:	4623      	mov	r3, r4
   10f5a:	4619      	mov	r1, r3
   10f5c:	480a      	ldr	r0, [pc, #40]	; (10f88 <SystemTimer::DisableTimer()+0x34>)
   10f5e:	f001 febf 	bl	12ce0 <__cyg_profile_func_enter>
  {
    sys_tick->LOAD = 0;
   10f62:	4b0a      	ldr	r3, [pc, #40]	; (10f8c <SystemTimer::DisableTimer()+0x38>)
   10f64:	681b      	ldr	r3, [r3, #0]
   10f66:	2200      	movs	r2, #0
   10f68:	605a      	str	r2, [r3, #4]
    sys_tick->VAL  = 0;
   10f6a:	4b08      	ldr	r3, [pc, #32]	; (10f8c <SystemTimer::DisableTimer()+0x38>)
   10f6c:	681b      	ldr	r3, [r3, #0]
   10f6e:	2200      	movs	r2, #0
   10f70:	609a      	str	r2, [r3, #8]
    sys_tick->CTRL = 0;
   10f72:	4b06      	ldr	r3, [pc, #24]	; (10f8c <SystemTimer::DisableTimer()+0x38>)
   10f74:	681b      	ldr	r3, [r3, #0]
   10f76:	2200      	movs	r2, #0
   10f78:	601a      	str	r2, [r3, #0]
   10f7a:	4623      	mov	r3, r4
   10f7c:	4619      	mov	r1, r3
   10f7e:	4802      	ldr	r0, [pc, #8]	; (10f88 <SystemTimer::DisableTimer()+0x34>)
   10f80:	f001 fec2 	bl	12d08 <__cyg_profile_func_exit>
  }
   10f84:	bf00      	nop
   10f86:	bd10      	pop	{r4, pc}
   10f88:	00010f55 	.word	0x00010f55
   10f8c:	1000000c 	.word	0x1000000c

00010f90 <SystemTimer::SystemTimerHandler()>:
  static void SystemTimerHandler()
   10f90:	b510      	push	{r4, lr}
   10f92:	4674      	mov	r4, lr
   10f94:	4623      	mov	r3, r4
   10f96:	4619      	mov	r1, r3
   10f98:	4808      	ldr	r0, [pc, #32]	; (10fbc <SystemTimer::SystemTimerHandler()+0x2c>)
   10f9a:	f001 fea1 	bl	12ce0 <__cyg_profile_func_enter>
  {
    // This assumes that SysTickHandler is called every millisecond.
    // Changing that frequency will distort the milliseconds time.
    if (system_timer_isr != nullptr)
   10f9e:	4b08      	ldr	r3, [pc, #32]	; (10fc0 <SystemTimer::SystemTimerHandler()+0x30>)
   10fa0:	681b      	ldr	r3, [r3, #0]
   10fa2:	2b00      	cmp	r3, #0
   10fa4:	d002      	beq.n	10fac <SystemTimer::SystemTimerHandler()+0x1c>
    {
      system_timer_isr();
   10fa6:	4b06      	ldr	r3, [pc, #24]	; (10fc0 <SystemTimer::SystemTimerHandler()+0x30>)
   10fa8:	681b      	ldr	r3, [r3, #0]
   10faa:	4798      	blx	r3
   10fac:	4623      	mov	r3, r4
   10fae:	4619      	mov	r1, r3
   10fb0:	4802      	ldr	r0, [pc, #8]	; (10fbc <SystemTimer::SystemTimerHandler()+0x2c>)
   10fb2:	f001 fea9 	bl	12d08 <__cyg_profile_func_exit>
    }
  }
   10fb6:	bf00      	nop
   10fb8:	bd10      	pop	{r4, pc}
   10fba:	bf00      	nop
   10fbc:	00010f91 	.word	0x00010f91
   10fc0:	10000268 	.word	0x10000268

00010fc4 <SystemTimer::SetIsrFunction(void (*)())>:
  constexpr SystemTimer() {}
  void SetIsrFunction(IsrPointer isr) override
   10fc4:	b510      	push	{r4, lr}
   10fc6:	b082      	sub	sp, #8
   10fc8:	4674      	mov	r4, lr
   10fca:	9001      	str	r0, [sp, #4]
   10fcc:	9100      	str	r1, [sp, #0]
   10fce:	4623      	mov	r3, r4
   10fd0:	4619      	mov	r1, r3
   10fd2:	4807      	ldr	r0, [pc, #28]	; (10ff0 <SystemTimer::SetIsrFunction(void (*)())+0x2c>)
   10fd4:	f001 fe84 	bl	12ce0 <__cyg_profile_func_enter>
  {
    system_timer_isr = isr;
   10fd8:	4a06      	ldr	r2, [pc, #24]	; (10ff4 <SystemTimer::SetIsrFunction(void (*)())+0x30>)
   10fda:	9b00      	ldr	r3, [sp, #0]
   10fdc:	6013      	str	r3, [r2, #0]
   10fde:	4623      	mov	r3, r4
   10fe0:	4619      	mov	r1, r3
   10fe2:	4803      	ldr	r0, [pc, #12]	; (10ff0 <SystemTimer::SetIsrFunction(void (*)())+0x2c>)
   10fe4:	f001 fe90 	bl	12d08 <__cyg_profile_func_exit>
  }
   10fe8:	bf00      	nop
   10fea:	b002      	add	sp, #8
   10fec:	bd10      	pop	{r4, pc}
   10fee:	bf00      	nop
   10ff0:	00010fc5 	.word	0x00010fc5
   10ff4:	10000268 	.word	0x10000268

00010ff8 <SystemTimer::StartTimer()>:
  bool StartTimer() override
   10ff8:	b530      	push	{r4, r5, lr}
   10ffa:	b085      	sub	sp, #20
   10ffc:	4675      	mov	r5, lr
   10ffe:	9001      	str	r0, [sp, #4]
   11000:	462b      	mov	r3, r5
   11002:	4619      	mov	r1, r3
   11004:	4820      	ldr	r0, [pc, #128]	; (11088 <SystemTimer::StartTimer()+0x90>)
   11006:	f001 fe6b 	bl	12ce0 <__cyg_profile_func_enter>
  {
    bool successful = false;
   1100a:	2300      	movs	r3, #0
   1100c:	f88d 300f 	strb.w	r3, [sp, #15]
    if (sys_tick->LOAD != 0)
   11010:	4b1e      	ldr	r3, [pc, #120]	; (1108c <SystemTimer::StartTimer()+0x94>)
   11012:	681b      	ldr	r3, [r3, #0]
   11014:	685b      	ldr	r3, [r3, #4]
   11016:	2b00      	cmp	r3, #0
   11018:	bf14      	ite	ne
   1101a:	2301      	movne	r3, #1
   1101c:	2300      	moveq	r3, #0
   1101e:	b2db      	uxtb	r3, r3
   11020:	2b00      	cmp	r3, #0
   11022:	d01e      	beq.n	11062 <SystemTimer::StartTimer()+0x6a>
    {
      sys_tick->VAL = 0;
   11024:	4b19      	ldr	r3, [pc, #100]	; (1108c <SystemTimer::StartTimer()+0x94>)
   11026:	681b      	ldr	r3, [r3, #0]
   11028:	2200      	movs	r2, #0
   1102a:	609a      	str	r2, [r3, #8]
      sys_tick->CTRL |= (1 << ControlBitMap::kTickInterupt);
   1102c:	4b17      	ldr	r3, [pc, #92]	; (1108c <SystemTimer::StartTimer()+0x94>)
   1102e:	681b      	ldr	r3, [r3, #0]
   11030:	681a      	ldr	r2, [r3, #0]
   11032:	4b16      	ldr	r3, [pc, #88]	; (1108c <SystemTimer::StartTimer()+0x94>)
   11034:	681b      	ldr	r3, [r3, #0]
   11036:	f042 0202 	orr.w	r2, r2, #2
   1103a:	601a      	str	r2, [r3, #0]
      sys_tick->CTRL |= (1 << ControlBitMap::kEnableCounter);
   1103c:	4b13      	ldr	r3, [pc, #76]	; (1108c <SystemTimer::StartTimer()+0x94>)
   1103e:	681b      	ldr	r3, [r3, #0]
   11040:	681a      	ldr	r2, [r3, #0]
   11042:	4b12      	ldr	r3, [pc, #72]	; (1108c <SystemTimer::StartTimer()+0x94>)
   11044:	681b      	ldr	r3, [r3, #0]
   11046:	f042 0201 	orr.w	r2, r2, #1
   1104a:	601a      	str	r2, [r3, #0]
      sys_tick->CTRL |= (1 << ControlBitMap::kClkSource);
   1104c:	4b0f      	ldr	r3, [pc, #60]	; (1108c <SystemTimer::StartTimer()+0x94>)
   1104e:	681b      	ldr	r3, [r3, #0]
   11050:	681a      	ldr	r2, [r3, #0]
   11052:	4b0e      	ldr	r3, [pc, #56]	; (1108c <SystemTimer::StartTimer()+0x94>)
   11054:	681b      	ldr	r3, [r3, #0]
   11056:	f042 0204 	orr.w	r2, r2, #4
   1105a:	601a      	str	r2, [r3, #0]
      successful = true;
   1105c:	2301      	movs	r3, #1
   1105e:	f88d 300f 	strb.w	r3, [sp, #15]
    }
    RegisterIsr(SysTick_IRQn, SystemTimerHandler);
   11062:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   11066:	2201      	movs	r2, #1
   11068:	4909      	ldr	r1, [pc, #36]	; (11090 <SystemTimer::StartTimer()+0x98>)
   1106a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1106e:	f001 fd0f 	bl	12a90 <RegisterIsr(IRQn, void (*)(), bool, long)>
    return successful;
   11072:	f89d 400f 	ldrb.w	r4, [sp, #15]
   11076:	462b      	mov	r3, r5
   11078:	4619      	mov	r1, r3
   1107a:	4803      	ldr	r0, [pc, #12]	; (11088 <SystemTimer::StartTimer()+0x90>)
   1107c:	f001 fe44 	bl	12d08 <__cyg_profile_func_exit>
   11080:	4623      	mov	r3, r4
  }
   11082:	4618      	mov	r0, r3
   11084:	b005      	add	sp, #20
   11086:	bd30      	pop	{r4, r5, pc}
   11088:	00010ff9 	.word	0x00010ff9
   1108c:	1000000c 	.word	0x1000000c
   11090:	00010f91 	.word	0x00010f91

00011094 <SystemTimer::SetTickFrequency(unsigned long)>:
  ///          remainder will be returned.
  ///          If the freqency supplied is less then 2Hz, the function will
  ///          return without changing any hardware.
  ///          If the reload value exceeds the SysTick_LOAD_RELOAD_Msk, the
  ///          returned value is the SysTick_LOAD_RELOAD_Msk.
  uint32_t SetTickFrequency(uint32_t frequency) override
   11094:	b530      	push	{r4, r5, lr}
   11096:	b085      	sub	sp, #20
   11098:	4675      	mov	r5, lr
   1109a:	9001      	str	r0, [sp, #4]
   1109c:	9100      	str	r1, [sp, #0]
   1109e:	462b      	mov	r3, r5
   110a0:	4619      	mov	r1, r3
   110a2:	481f      	ldr	r0, [pc, #124]	; (11120 <SystemTimer::SetTickFrequency(unsigned long)+0x8c>)
   110a4:	f001 fe1c 	bl	12ce0 <__cyg_profile_func_enter>
  {
    if (frequency <= 1)
   110a8:	9b00      	ldr	r3, [sp, #0]
   110aa:	2b01      	cmp	r3, #1
   110ac:	d801      	bhi.n	110b2 <SystemTimer::SetTickFrequency(unsigned long)+0x1e>
    {
      return 0;
   110ae:	2400      	movs	r4, #0
   110b0:	e02d      	b.n	1110e <SystemTimer::SetTickFrequency(unsigned long)+0x7a>
    }
    uint32_t reload_value = (GetSystemFrequency() / frequency) - 1;
   110b2:	9b01      	ldr	r3, [sp, #4]
   110b4:	1d1a      	adds	r2, r3, #4
   110b6:	9b01      	ldr	r3, [sp, #4]
   110b8:	685b      	ldr	r3, [r3, #4]
   110ba:	330c      	adds	r3, #12
   110bc:	681b      	ldr	r3, [r3, #0]
   110be:	4610      	mov	r0, r2
   110c0:	4798      	blx	r3
   110c2:	4602      	mov	r2, r0
   110c4:	9b00      	ldr	r3, [sp, #0]
   110c6:	fbb2 f3f3 	udiv	r3, r2, r3
   110ca:	3b01      	subs	r3, #1
   110cc:	9303      	str	r3, [sp, #12]
    int remainder         = (GetSystemFrequency() % frequency);
   110ce:	9b01      	ldr	r3, [sp, #4]
   110d0:	1d1a      	adds	r2, r3, #4
   110d2:	9b01      	ldr	r3, [sp, #4]
   110d4:	685b      	ldr	r3, [r3, #4]
   110d6:	330c      	adds	r3, #12
   110d8:	681b      	ldr	r3, [r3, #0]
   110da:	4610      	mov	r0, r2
   110dc:	4798      	blx	r3
   110de:	4603      	mov	r3, r0
   110e0:	9a00      	ldr	r2, [sp, #0]
   110e2:	fbb3 f2f2 	udiv	r2, r3, r2
   110e6:	9900      	ldr	r1, [sp, #0]
   110e8:	fb01 f202 	mul.w	r2, r1, r2
   110ec:	1a9b      	subs	r3, r3, r2
   110ee:	9302      	str	r3, [sp, #8]
    if (reload_value > SysTick_LOAD_RELOAD_Msk)
   110f0:	9b03      	ldr	r3, [sp, #12]
   110f2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
   110f6:	d305      	bcc.n	11104 <SystemTimer::SetTickFrequency(unsigned long)+0x70>
    {
      reload_value = SysTick_LOAD_RELOAD_Msk;
   110f8:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
   110fc:	9303      	str	r3, [sp, #12]
      remainder    = SysTick_LOAD_RELOAD_Msk;
   110fe:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
   11102:	9302      	str	r3, [sp, #8]
    }
    sys_tick->LOAD = reload_value;
   11104:	4b07      	ldr	r3, [pc, #28]	; (11124 <SystemTimer::SetTickFrequency(unsigned long)+0x90>)
   11106:	681b      	ldr	r3, [r3, #0]
   11108:	9a03      	ldr	r2, [sp, #12]
   1110a:	605a      	str	r2, [r3, #4]
    return remainder;
   1110c:	9c02      	ldr	r4, [sp, #8]
   1110e:	462b      	mov	r3, r5
   11110:	4619      	mov	r1, r3
   11112:	4803      	ldr	r0, [pc, #12]	; (11120 <SystemTimer::SetTickFrequency(unsigned long)+0x8c>)
   11114:	f001 fdf8 	bl	12d08 <__cyg_profile_func_exit>
   11118:	4623      	mov	r3, r4
  }
   1111a:	4618      	mov	r0, r3
   1111c:	b005      	add	sp, #20
   1111e:	bd30      	pop	{r4, r5, pc}
   11120:	00011095 	.word	0x00011095
   11124:	1000000c 	.word	0x1000000c

00011128 <Pin::SetPinFunction(unsigned char)>:
  }
  constexpr Pin(uint8_t port_number, uint8_t pin_number)
      : port_(port_number), pin_(pin_number)
  {
  }
  void SetPinFunction(uint8_t function) override
   11128:	b5f0      	push	{r4, r5, r6, r7, lr}
   1112a:	b085      	sub	sp, #20
   1112c:	4677      	mov	r7, lr
   1112e:	9003      	str	r0, [sp, #12]
   11130:	460b      	mov	r3, r1
   11132:	f88d 300b 	strb.w	r3, [sp, #11]
   11136:	463b      	mov	r3, r7
   11138:	4619      	mov	r1, r3
   1113a:	4817      	ldr	r0, [pc, #92]	; (11198 <Pin::SetPinFunction(unsigned char)+0x70>)
   1113c:	f001 fdd0 	bl	12ce0 <__cyg_profile_func_enter>
  {
    pin_map->_register[port_][pin_] =
        BitPlace(pin_map->_register[port_][pin_], PinBitMap::kFunction,
   11140:	4b16      	ldr	r3, [pc, #88]	; (1119c <Pin::SetPinFunction(unsigned char)+0x74>)
   11142:	681b      	ldr	r3, [r3, #0]
   11144:	9a03      	ldr	r2, [sp, #12]
   11146:	7912      	ldrb	r2, [r2, #4]
   11148:	4610      	mov	r0, r2
   1114a:	9a03      	ldr	r2, [sp, #12]
   1114c:	7952      	ldrb	r2, [r2, #5]
   1114e:	4611      	mov	r1, r2
   11150:	0142      	lsls	r2, r0, #5
   11152:	440a      	add	r2, r1
   11154:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
                 function & 0b111, 3);
   11158:	f89d 300b 	ldrb.w	r3, [sp, #11]
        BitPlace(pin_map->_register[port_][pin_], PinBitMap::kFunction,
   1115c:	f003 0207 	and.w	r2, r3, #7
    pin_map->_register[port_][pin_] =
   11160:	4b0e      	ldr	r3, [pc, #56]	; (1119c <Pin::SetPinFunction(unsigned char)+0x74>)
   11162:	681c      	ldr	r4, [r3, #0]
   11164:	9b03      	ldr	r3, [sp, #12]
   11166:	791b      	ldrb	r3, [r3, #4]
   11168:	461e      	mov	r6, r3
   1116a:	9b03      	ldr	r3, [sp, #12]
   1116c:	795b      	ldrb	r3, [r3, #5]
   1116e:	461d      	mov	r5, r3
        BitPlace(pin_map->_register[port_][pin_], PinBitMap::kFunction,
   11170:	2303      	movs	r3, #3
   11172:	9300      	str	r3, [sp, #0]
   11174:	4613      	mov	r3, r2
   11176:	2200      	movs	r2, #0
   11178:	9803      	ldr	r0, [sp, #12]
   1117a:	f000 fa67 	bl	1164c <Pin::BitPlace(unsigned long, unsigned long, unsigned long, unsigned long)>
   1117e:	4602      	mov	r2, r0
    pin_map->_register[port_][pin_] =
   11180:	0173      	lsls	r3, r6, #5
   11182:	442b      	add	r3, r5
   11184:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
   11188:	463b      	mov	r3, r7
   1118a:	4619      	mov	r1, r3
   1118c:	4802      	ldr	r0, [pc, #8]	; (11198 <Pin::SetPinFunction(unsigned char)+0x70>)
   1118e:	f001 fdbb 	bl	12d08 <__cyg_profile_func_exit>
  }
   11192:	bf00      	nop
   11194:	b005      	add	sp, #20
   11196:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11198:	00011129 	.word	0x00011129
   1119c:	10000010 	.word	0x10000010

000111a0 <Pin::SetMode(PinInterface::Mode)>:
  void SetMode(PinInterface::Mode mode) override
   111a0:	b5f0      	push	{r4, r5, r6, r7, lr}
   111a2:	b087      	sub	sp, #28
   111a4:	4677      	mov	r7, lr
   111a6:	9003      	str	r0, [sp, #12]
   111a8:	460b      	mov	r3, r1
   111aa:	f88d 300b 	strb.w	r3, [sp, #11]
   111ae:	463b      	mov	r3, r7
   111b0:	4619      	mov	r1, r3
   111b2:	4819      	ldr	r0, [pc, #100]	; (11218 <Pin::SetMode(PinInterface::Mode)+0x78>)
   111b4:	f001 fd94 	bl	12ce0 <__cyg_profile_func_enter>
  {
    uint8_t ui_mode                 = static_cast<uint8_t>(mode);
   111b8:	f89d 300b 	ldrb.w	r3, [sp, #11]
   111bc:	f88d 3017 	strb.w	r3, [sp, #23]
    pin_map->_register[port_][pin_] = BitPlace(
   111c0:	4b16      	ldr	r3, [pc, #88]	; (1121c <Pin::SetMode(PinInterface::Mode)+0x7c>)
   111c2:	681b      	ldr	r3, [r3, #0]
        pin_map->_register[port_][pin_], PinBitMap::kMode, ui_mode & 0b11, 2);
   111c4:	9a03      	ldr	r2, [sp, #12]
   111c6:	7912      	ldrb	r2, [r2, #4]
   111c8:	4610      	mov	r0, r2
   111ca:	9a03      	ldr	r2, [sp, #12]
   111cc:	7952      	ldrb	r2, [r2, #5]
   111ce:	4611      	mov	r1, r2
    pin_map->_register[port_][pin_] = BitPlace(
   111d0:	0142      	lsls	r2, r0, #5
   111d2:	440a      	add	r2, r1
   111d4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
        pin_map->_register[port_][pin_], PinBitMap::kMode, ui_mode & 0b11, 2);
   111d8:	f89d 3017 	ldrb.w	r3, [sp, #23]
    pin_map->_register[port_][pin_] = BitPlace(
   111dc:	f003 0203 	and.w	r2, r3, #3
   111e0:	4b0e      	ldr	r3, [pc, #56]	; (1121c <Pin::SetMode(PinInterface::Mode)+0x7c>)
   111e2:	681c      	ldr	r4, [r3, #0]
   111e4:	9b03      	ldr	r3, [sp, #12]
   111e6:	791b      	ldrb	r3, [r3, #4]
   111e8:	461e      	mov	r6, r3
   111ea:	9b03      	ldr	r3, [sp, #12]
   111ec:	795b      	ldrb	r3, [r3, #5]
   111ee:	461d      	mov	r5, r3
   111f0:	2302      	movs	r3, #2
   111f2:	9300      	str	r3, [sp, #0]
   111f4:	4613      	mov	r3, r2
   111f6:	2203      	movs	r2, #3
   111f8:	9803      	ldr	r0, [sp, #12]
   111fa:	f000 fa27 	bl	1164c <Pin::BitPlace(unsigned long, unsigned long, unsigned long, unsigned long)>
   111fe:	4602      	mov	r2, r0
   11200:	0173      	lsls	r3, r6, #5
   11202:	442b      	add	r3, r5
   11204:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
   11208:	463b      	mov	r3, r7
   1120a:	4619      	mov	r1, r3
   1120c:	4802      	ldr	r0, [pc, #8]	; (11218 <Pin::SetMode(PinInterface::Mode)+0x78>)
   1120e:	f001 fd7b 	bl	12d08 <__cyg_profile_func_exit>
  }
   11212:	bf00      	nop
   11214:	b007      	add	sp, #28
   11216:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11218:	000111a1 	.word	0x000111a1
   1121c:	10000010 	.word	0x10000010

00011220 <Pin::EnableHysteresis(bool)>:
  void EnableHysteresis(bool enable_hysteresis = true) override
   11220:	b5f0      	push	{r4, r5, r6, r7, lr}
   11222:	b085      	sub	sp, #20
   11224:	4677      	mov	r7, lr
   11226:	9003      	str	r0, [sp, #12]
   11228:	460b      	mov	r3, r1
   1122a:	f88d 300b 	strb.w	r3, [sp, #11]
   1122e:	463b      	mov	r3, r7
   11230:	4619      	mov	r1, r3
   11232:	4816      	ldr	r0, [pc, #88]	; (1128c <Pin::EnableHysteresis(bool)+0x6c>)
   11234:	f001 fd54 	bl	12ce0 <__cyg_profile_func_enter>
  {
    pin_map->_register[port_][pin_] =
        BitPlace(pin_map->_register[port_][pin_], PinBitMap::kHysteresis,
   11238:	4b15      	ldr	r3, [pc, #84]	; (11290 <Pin::EnableHysteresis(bool)+0x70>)
   1123a:	681b      	ldr	r3, [r3, #0]
   1123c:	9a03      	ldr	r2, [sp, #12]
   1123e:	7912      	ldrb	r2, [r2, #4]
   11240:	4610      	mov	r0, r2
   11242:	9a03      	ldr	r2, [sp, #12]
   11244:	7952      	ldrb	r2, [r2, #5]
   11246:	4611      	mov	r1, r2
   11248:	0142      	lsls	r2, r0, #5
   1124a:	440a      	add	r2, r1
   1124c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   11250:	f89d 200b 	ldrb.w	r2, [sp, #11]
    pin_map->_register[port_][pin_] =
   11254:	4b0e      	ldr	r3, [pc, #56]	; (11290 <Pin::EnableHysteresis(bool)+0x70>)
   11256:	681c      	ldr	r4, [r3, #0]
   11258:	9b03      	ldr	r3, [sp, #12]
   1125a:	791b      	ldrb	r3, [r3, #4]
   1125c:	461e      	mov	r6, r3
   1125e:	9b03      	ldr	r3, [sp, #12]
   11260:	795b      	ldrb	r3, [r3, #5]
   11262:	461d      	mov	r5, r3
        BitPlace(pin_map->_register[port_][pin_], PinBitMap::kHysteresis,
   11264:	2301      	movs	r3, #1
   11266:	9300      	str	r3, [sp, #0]
   11268:	4613      	mov	r3, r2
   1126a:	2205      	movs	r2, #5
   1126c:	9803      	ldr	r0, [sp, #12]
   1126e:	f000 f9ed 	bl	1164c <Pin::BitPlace(unsigned long, unsigned long, unsigned long, unsigned long)>
   11272:	4602      	mov	r2, r0
    pin_map->_register[port_][pin_] =
   11274:	0173      	lsls	r3, r6, #5
   11276:	442b      	add	r3, r5
   11278:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
   1127c:	463b      	mov	r3, r7
   1127e:	4619      	mov	r1, r3
   11280:	4802      	ldr	r0, [pc, #8]	; (1128c <Pin::EnableHysteresis(bool)+0x6c>)
   11282:	f001 fd41 	bl	12d08 <__cyg_profile_func_exit>
                 enable_hysteresis, 1);
  }
   11286:	bf00      	nop
   11288:	b005      	add	sp, #20
   1128a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1128c:	00011221 	.word	0x00011221
   11290:	10000010 	.word	0x10000010

00011294 <Pin::SetAsActiveLow(bool)>:
  void SetAsActiveLow(bool set_as_active_low = true) override
   11294:	b5f0      	push	{r4, r5, r6, r7, lr}
   11296:	b085      	sub	sp, #20
   11298:	4677      	mov	r7, lr
   1129a:	9003      	str	r0, [sp, #12]
   1129c:	460b      	mov	r3, r1
   1129e:	f88d 300b 	strb.w	r3, [sp, #11]
   112a2:	463b      	mov	r3, r7
   112a4:	4619      	mov	r1, r3
   112a6:	4816      	ldr	r0, [pc, #88]	; (11300 <Pin::SetAsActiveLow(bool)+0x6c>)
   112a8:	f001 fd1a 	bl	12ce0 <__cyg_profile_func_enter>
  {
    pin_map->_register[port_][pin_] =
        BitPlace(pin_map->_register[port_][pin_], PinBitMap::kInputInvert,
   112ac:	4b15      	ldr	r3, [pc, #84]	; (11304 <Pin::SetAsActiveLow(bool)+0x70>)
   112ae:	681b      	ldr	r3, [r3, #0]
   112b0:	9a03      	ldr	r2, [sp, #12]
   112b2:	7912      	ldrb	r2, [r2, #4]
   112b4:	4610      	mov	r0, r2
   112b6:	9a03      	ldr	r2, [sp, #12]
   112b8:	7952      	ldrb	r2, [r2, #5]
   112ba:	4611      	mov	r1, r2
   112bc:	0142      	lsls	r2, r0, #5
   112be:	440a      	add	r2, r1
   112c0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   112c4:	f89d 200b 	ldrb.w	r2, [sp, #11]
    pin_map->_register[port_][pin_] =
   112c8:	4b0e      	ldr	r3, [pc, #56]	; (11304 <Pin::SetAsActiveLow(bool)+0x70>)
   112ca:	681c      	ldr	r4, [r3, #0]
   112cc:	9b03      	ldr	r3, [sp, #12]
   112ce:	791b      	ldrb	r3, [r3, #4]
   112d0:	461e      	mov	r6, r3
   112d2:	9b03      	ldr	r3, [sp, #12]
   112d4:	795b      	ldrb	r3, [r3, #5]
   112d6:	461d      	mov	r5, r3
        BitPlace(pin_map->_register[port_][pin_], PinBitMap::kInputInvert,
   112d8:	2301      	movs	r3, #1
   112da:	9300      	str	r3, [sp, #0]
   112dc:	4613      	mov	r3, r2
   112de:	2206      	movs	r2, #6
   112e0:	9803      	ldr	r0, [sp, #12]
   112e2:	f000 f9b3 	bl	1164c <Pin::BitPlace(unsigned long, unsigned long, unsigned long, unsigned long)>
   112e6:	4602      	mov	r2, r0
    pin_map->_register[port_][pin_] =
   112e8:	0173      	lsls	r3, r6, #5
   112ea:	442b      	add	r3, r5
   112ec:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
   112f0:	463b      	mov	r3, r7
   112f2:	4619      	mov	r1, r3
   112f4:	4802      	ldr	r0, [pc, #8]	; (11300 <Pin::SetAsActiveLow(bool)+0x6c>)
   112f6:	f001 fd07 	bl	12d08 <__cyg_profile_func_exit>
                 set_as_active_low, 1);
  }
   112fa:	bf00      	nop
   112fc:	b005      	add	sp, #20
   112fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11300:	00011295 	.word	0x00011295
   11304:	10000010 	.word	0x10000010

00011308 <Pin::SetAsAnalogMode(bool)>:
  // Set bit to 0 to enable analog mode
  void SetAsAnalogMode(bool set_as_analog = true) override
   11308:	b5f0      	push	{r4, r5, r6, r7, lr}
   1130a:	b085      	sub	sp, #20
   1130c:	4677      	mov	r7, lr
   1130e:	9003      	str	r0, [sp, #12]
   11310:	460b      	mov	r3, r1
   11312:	f88d 300b 	strb.w	r3, [sp, #11]
   11316:	463b      	mov	r3, r7
   11318:	4619      	mov	r1, r3
   1131a:	4818      	ldr	r0, [pc, #96]	; (1137c <Pin::SetAsAnalogMode(bool)+0x74>)
   1131c:	f001 fce0 	bl	12ce0 <__cyg_profile_func_enter>
  {
    pin_map->_register[port_][pin_] =
        BitPlace(pin_map->_register[port_][pin_], PinBitMap::kAnalogDigitalMode,
   11320:	4b17      	ldr	r3, [pc, #92]	; (11380 <Pin::SetAsAnalogMode(bool)+0x78>)
   11322:	681b      	ldr	r3, [r3, #0]
   11324:	9a03      	ldr	r2, [sp, #12]
   11326:	7912      	ldrb	r2, [r2, #4]
   11328:	4610      	mov	r0, r2
   1132a:	9a03      	ldr	r2, [sp, #12]
   1132c:	7952      	ldrb	r2, [r2, #5]
   1132e:	4611      	mov	r1, r2
   11330:	0142      	lsls	r2, r0, #5
   11332:	440a      	add	r2, r1
   11334:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
                 !set_as_analog, 1);
   11338:	f89d 300b 	ldrb.w	r3, [sp, #11]
   1133c:	f083 0301 	eor.w	r3, r3, #1
   11340:	b2db      	uxtb	r3, r3
        BitPlace(pin_map->_register[port_][pin_], PinBitMap::kAnalogDigitalMode,
   11342:	461a      	mov	r2, r3
    pin_map->_register[port_][pin_] =
   11344:	4b0e      	ldr	r3, [pc, #56]	; (11380 <Pin::SetAsAnalogMode(bool)+0x78>)
   11346:	681c      	ldr	r4, [r3, #0]
   11348:	9b03      	ldr	r3, [sp, #12]
   1134a:	791b      	ldrb	r3, [r3, #4]
   1134c:	461e      	mov	r6, r3
   1134e:	9b03      	ldr	r3, [sp, #12]
   11350:	795b      	ldrb	r3, [r3, #5]
   11352:	461d      	mov	r5, r3
        BitPlace(pin_map->_register[port_][pin_], PinBitMap::kAnalogDigitalMode,
   11354:	2301      	movs	r3, #1
   11356:	9300      	str	r3, [sp, #0]
   11358:	4613      	mov	r3, r2
   1135a:	2207      	movs	r2, #7
   1135c:	9803      	ldr	r0, [sp, #12]
   1135e:	f000 f975 	bl	1164c <Pin::BitPlace(unsigned long, unsigned long, unsigned long, unsigned long)>
   11362:	4602      	mov	r2, r0
    pin_map->_register[port_][pin_] =
   11364:	0173      	lsls	r3, r6, #5
   11366:	442b      	add	r3, r5
   11368:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
   1136c:	463b      	mov	r3, r7
   1136e:	4619      	mov	r1, r3
   11370:	4802      	ldr	r0, [pc, #8]	; (1137c <Pin::SetAsAnalogMode(bool)+0x74>)
   11372:	f001 fcc9 	bl	12d08 <__cyg_profile_func_exit>
  }
   11376:	bf00      	nop
   11378:	b005      	add	sp, #20
   1137a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1137c:	00011309 	.word	0x00011309
   11380:	10000010 	.word	0x10000010

00011384 <Pin::EnableDigitalFilter(bool)>:
  // Enable by setting bit to 0 to enable digital filter.
  void EnableDigitalFilter(bool enable_digital_filter = true) override
   11384:	b5f0      	push	{r4, r5, r6, r7, lr}
   11386:	b085      	sub	sp, #20
   11388:	4677      	mov	r7, lr
   1138a:	9003      	str	r0, [sp, #12]
   1138c:	460b      	mov	r3, r1
   1138e:	f88d 300b 	strb.w	r3, [sp, #11]
   11392:	463b      	mov	r3, r7
   11394:	4619      	mov	r1, r3
   11396:	4818      	ldr	r0, [pc, #96]	; (113f8 <Pin::EnableDigitalFilter(bool)+0x74>)
   11398:	f001 fca2 	bl	12ce0 <__cyg_profile_func_enter>
  {
    pin_map->_register[port_][pin_] =
        BitPlace(pin_map->_register[port_][pin_], PinBitMap::kDigitalFilter,
   1139c:	4b17      	ldr	r3, [pc, #92]	; (113fc <Pin::EnableDigitalFilter(bool)+0x78>)
   1139e:	681b      	ldr	r3, [r3, #0]
   113a0:	9a03      	ldr	r2, [sp, #12]
   113a2:	7912      	ldrb	r2, [r2, #4]
   113a4:	4610      	mov	r0, r2
   113a6:	9a03      	ldr	r2, [sp, #12]
   113a8:	7952      	ldrb	r2, [r2, #5]
   113aa:	4611      	mov	r1, r2
   113ac:	0142      	lsls	r2, r0, #5
   113ae:	440a      	add	r2, r1
   113b0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
                 !enable_digital_filter, 1);
   113b4:	f89d 300b 	ldrb.w	r3, [sp, #11]
   113b8:	f083 0301 	eor.w	r3, r3, #1
   113bc:	b2db      	uxtb	r3, r3
        BitPlace(pin_map->_register[port_][pin_], PinBitMap::kDigitalFilter,
   113be:	461a      	mov	r2, r3
    pin_map->_register[port_][pin_] =
   113c0:	4b0e      	ldr	r3, [pc, #56]	; (113fc <Pin::EnableDigitalFilter(bool)+0x78>)
   113c2:	681c      	ldr	r4, [r3, #0]
   113c4:	9b03      	ldr	r3, [sp, #12]
   113c6:	791b      	ldrb	r3, [r3, #4]
   113c8:	461e      	mov	r6, r3
   113ca:	9b03      	ldr	r3, [sp, #12]
   113cc:	795b      	ldrb	r3, [r3, #5]
   113ce:	461d      	mov	r5, r3
        BitPlace(pin_map->_register[port_][pin_], PinBitMap::kDigitalFilter,
   113d0:	2301      	movs	r3, #1
   113d2:	9300      	str	r3, [sp, #0]
   113d4:	4613      	mov	r3, r2
   113d6:	2208      	movs	r2, #8
   113d8:	9803      	ldr	r0, [sp, #12]
   113da:	f000 f937 	bl	1164c <Pin::BitPlace(unsigned long, unsigned long, unsigned long, unsigned long)>
   113de:	4602      	mov	r2, r0
    pin_map->_register[port_][pin_] =
   113e0:	0173      	lsls	r3, r6, #5
   113e2:	442b      	add	r3, r5
   113e4:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
   113e8:	463b      	mov	r3, r7
   113ea:	4619      	mov	r1, r3
   113ec:	4802      	ldr	r0, [pc, #8]	; (113f8 <Pin::EnableDigitalFilter(bool)+0x74>)
   113ee:	f001 fc8b 	bl	12d08 <__cyg_profile_func_exit>
  }
   113f2:	bf00      	nop
   113f4:	b005      	add	sp, #20
   113f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   113f8:	00011385 	.word	0x00011385
   113fc:	10000010 	.word	0x10000010

00011400 <Pin::EnableFastMode(bool)>:
  void EnableFastMode(bool enable_fast_mode = true) override
   11400:	b5f0      	push	{r4, r5, r6, r7, lr}
   11402:	b085      	sub	sp, #20
   11404:	4677      	mov	r7, lr
   11406:	9003      	str	r0, [sp, #12]
   11408:	460b      	mov	r3, r1
   1140a:	f88d 300b 	strb.w	r3, [sp, #11]
   1140e:	463b      	mov	r3, r7
   11410:	4619      	mov	r1, r3
   11412:	4816      	ldr	r0, [pc, #88]	; (1146c <Pin::EnableFastMode(bool)+0x6c>)
   11414:	f001 fc64 	bl	12ce0 <__cyg_profile_func_enter>
  {
    pin_map->_register[port_][pin_] = BitPlace(
   11418:	4b15      	ldr	r3, [pc, #84]	; (11470 <Pin::EnableFastMode(bool)+0x70>)
   1141a:	681b      	ldr	r3, [r3, #0]
        pin_map->_register[port_][pin_], PinBitMap::kSlew, enable_fast_mode, 1);
   1141c:	9a03      	ldr	r2, [sp, #12]
   1141e:	7912      	ldrb	r2, [r2, #4]
   11420:	4610      	mov	r0, r2
   11422:	9a03      	ldr	r2, [sp, #12]
   11424:	7952      	ldrb	r2, [r2, #5]
   11426:	4611      	mov	r1, r2
    pin_map->_register[port_][pin_] = BitPlace(
   11428:	0142      	lsls	r2, r0, #5
   1142a:	440a      	add	r2, r1
   1142c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   11430:	f89d 200b 	ldrb.w	r2, [sp, #11]
   11434:	4b0e      	ldr	r3, [pc, #56]	; (11470 <Pin::EnableFastMode(bool)+0x70>)
   11436:	681c      	ldr	r4, [r3, #0]
   11438:	9b03      	ldr	r3, [sp, #12]
   1143a:	791b      	ldrb	r3, [r3, #4]
   1143c:	461e      	mov	r6, r3
   1143e:	9b03      	ldr	r3, [sp, #12]
   11440:	795b      	ldrb	r3, [r3, #5]
   11442:	461d      	mov	r5, r3
   11444:	2301      	movs	r3, #1
   11446:	9300      	str	r3, [sp, #0]
   11448:	4613      	mov	r3, r2
   1144a:	2209      	movs	r2, #9
   1144c:	9803      	ldr	r0, [sp, #12]
   1144e:	f000 f8fd 	bl	1164c <Pin::BitPlace(unsigned long, unsigned long, unsigned long, unsigned long)>
   11452:	4602      	mov	r2, r0
   11454:	0173      	lsls	r3, r6, #5
   11456:	442b      	add	r3, r5
   11458:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
   1145c:	463b      	mov	r3, r7
   1145e:	4619      	mov	r1, r3
   11460:	4802      	ldr	r0, [pc, #8]	; (1146c <Pin::EnableFastMode(bool)+0x6c>)
   11462:	f001 fc51 	bl	12d08 <__cyg_profile_func_exit>
  }
   11466:	bf00      	nop
   11468:	b005      	add	sp, #20
   1146a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1146c:	00011401 	.word	0x00011401
   11470:	10000010 	.word	0x10000010

00011474 <Pin::EnableI2cHighSpeedMode(bool)>:
  // Enable by setting bit to 0 for i2c high speed mode
  void EnableI2cHighSpeedMode(bool enable_high_speed = true) override
   11474:	b5f0      	push	{r4, r5, r6, r7, lr}
   11476:	b085      	sub	sp, #20
   11478:	4677      	mov	r7, lr
   1147a:	9003      	str	r0, [sp, #12]
   1147c:	460b      	mov	r3, r1
   1147e:	f88d 300b 	strb.w	r3, [sp, #11]
   11482:	463b      	mov	r3, r7
   11484:	4619      	mov	r1, r3
   11486:	4818      	ldr	r0, [pc, #96]	; (114e8 <Pin::EnableI2cHighSpeedMode(bool)+0x74>)
   11488:	f001 fc2a 	bl	12ce0 <__cyg_profile_func_enter>
  {
    pin_map->_register[port_][pin_] =
        BitPlace(pin_map->_register[port_][pin_], PinBitMap::kI2cHighSpeed,
   1148c:	4b17      	ldr	r3, [pc, #92]	; (114ec <Pin::EnableI2cHighSpeedMode(bool)+0x78>)
   1148e:	681b      	ldr	r3, [r3, #0]
   11490:	9a03      	ldr	r2, [sp, #12]
   11492:	7912      	ldrb	r2, [r2, #4]
   11494:	4610      	mov	r0, r2
   11496:	9a03      	ldr	r2, [sp, #12]
   11498:	7952      	ldrb	r2, [r2, #5]
   1149a:	4611      	mov	r1, r2
   1149c:	0142      	lsls	r2, r0, #5
   1149e:	440a      	add	r2, r1
   114a0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
                 !enable_high_speed, 1);
   114a4:	f89d 300b 	ldrb.w	r3, [sp, #11]
   114a8:	f083 0301 	eor.w	r3, r3, #1
   114ac:	b2db      	uxtb	r3, r3
        BitPlace(pin_map->_register[port_][pin_], PinBitMap::kI2cHighSpeed,
   114ae:	461a      	mov	r2, r3
    pin_map->_register[port_][pin_] =
   114b0:	4b0e      	ldr	r3, [pc, #56]	; (114ec <Pin::EnableI2cHighSpeedMode(bool)+0x78>)
   114b2:	681c      	ldr	r4, [r3, #0]
   114b4:	9b03      	ldr	r3, [sp, #12]
   114b6:	791b      	ldrb	r3, [r3, #4]
   114b8:	461e      	mov	r6, r3
   114ba:	9b03      	ldr	r3, [sp, #12]
   114bc:	795b      	ldrb	r3, [r3, #5]
   114be:	461d      	mov	r5, r3
        BitPlace(pin_map->_register[port_][pin_], PinBitMap::kI2cHighSpeed,
   114c0:	2301      	movs	r3, #1
   114c2:	9300      	str	r3, [sp, #0]
   114c4:	4613      	mov	r3, r2
   114c6:	2208      	movs	r2, #8
   114c8:	9803      	ldr	r0, [sp, #12]
   114ca:	f000 f8bf 	bl	1164c <Pin::BitPlace(unsigned long, unsigned long, unsigned long, unsigned long)>
   114ce:	4602      	mov	r2, r0
    pin_map->_register[port_][pin_] =
   114d0:	0173      	lsls	r3, r6, #5
   114d2:	442b      	add	r3, r5
   114d4:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
   114d8:	463b      	mov	r3, r7
   114da:	4619      	mov	r1, r3
   114dc:	4802      	ldr	r0, [pc, #8]	; (114e8 <Pin::EnableI2cHighSpeedMode(bool)+0x74>)
   114de:	f001 fc13 	bl	12d08 <__cyg_profile_func_exit>
  }
   114e2:	bf00      	nop
   114e4:	b005      	add	sp, #20
   114e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   114e8:	00011475 	.word	0x00011475
   114ec:	10000010 	.word	0x10000010

000114f0 <Pin::EnableI2cHighCurrentDrive(bool)>:
  void EnableI2cHighCurrentDrive(bool enable_high_current = true) override
   114f0:	b5f0      	push	{r4, r5, r6, r7, lr}
   114f2:	b085      	sub	sp, #20
   114f4:	4677      	mov	r7, lr
   114f6:	9003      	str	r0, [sp, #12]
   114f8:	460b      	mov	r3, r1
   114fa:	f88d 300b 	strb.w	r3, [sp, #11]
   114fe:	463b      	mov	r3, r7
   11500:	4619      	mov	r1, r3
   11502:	4816      	ldr	r0, [pc, #88]	; (1155c <Pin::EnableI2cHighCurrentDrive(bool)+0x6c>)
   11504:	f001 fbec 	bl	12ce0 <__cyg_profile_func_enter>
  {
    pin_map->_register[port_][pin_] =
        BitPlace(pin_map->_register[port_][pin_],
   11508:	4b15      	ldr	r3, [pc, #84]	; (11560 <Pin::EnableI2cHighCurrentDrive(bool)+0x70>)
   1150a:	681b      	ldr	r3, [r3, #0]
   1150c:	9a03      	ldr	r2, [sp, #12]
   1150e:	7912      	ldrb	r2, [r2, #4]
   11510:	4610      	mov	r0, r2
   11512:	9a03      	ldr	r2, [sp, #12]
   11514:	7952      	ldrb	r2, [r2, #5]
   11516:	4611      	mov	r1, r2
   11518:	0142      	lsls	r2, r0, #5
   1151a:	440a      	add	r2, r1
   1151c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   11520:	f89d 200b 	ldrb.w	r2, [sp, #11]
    pin_map->_register[port_][pin_] =
   11524:	4b0e      	ldr	r3, [pc, #56]	; (11560 <Pin::EnableI2cHighCurrentDrive(bool)+0x70>)
   11526:	681c      	ldr	r4, [r3, #0]
   11528:	9b03      	ldr	r3, [sp, #12]
   1152a:	791b      	ldrb	r3, [r3, #4]
   1152c:	461e      	mov	r6, r3
   1152e:	9b03      	ldr	r3, [sp, #12]
   11530:	795b      	ldrb	r3, [r3, #5]
   11532:	461d      	mov	r5, r3
        BitPlace(pin_map->_register[port_][pin_],
   11534:	2301      	movs	r3, #1
   11536:	9300      	str	r3, [sp, #0]
   11538:	4613      	mov	r3, r2
   1153a:	2209      	movs	r2, #9
   1153c:	9803      	ldr	r0, [sp, #12]
   1153e:	f000 f885 	bl	1164c <Pin::BitPlace(unsigned long, unsigned long, unsigned long, unsigned long)>
   11542:	4602      	mov	r2, r0
    pin_map->_register[port_][pin_] =
   11544:	0173      	lsls	r3, r6, #5
   11546:	442b      	add	r3, r5
   11548:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
   1154c:	463b      	mov	r3, r7
   1154e:	4619      	mov	r1, r3
   11550:	4802      	ldr	r0, [pc, #8]	; (1155c <Pin::EnableI2cHighCurrentDrive(bool)+0x6c>)
   11552:	f001 fbd9 	bl	12d08 <__cyg_profile_func_exit>
                 PinBitMap::kI2cHighCurrentDrive, enable_high_current, 1);
  }
   11556:	bf00      	nop
   11558:	b005      	add	sp, #20
   1155a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1155c:	000114f1 	.word	0x000114f1
   11560:	10000010 	.word	0x10000010

00011564 <Pin::SetAsOpenDrain(bool)>:
  void SetAsOpenDrain(bool set_as_open_drain = true) override
   11564:	b5f0      	push	{r4, r5, r6, r7, lr}
   11566:	b085      	sub	sp, #20
   11568:	4677      	mov	r7, lr
   1156a:	9003      	str	r0, [sp, #12]
   1156c:	460b      	mov	r3, r1
   1156e:	f88d 300b 	strb.w	r3, [sp, #11]
   11572:	463b      	mov	r3, r7
   11574:	4619      	mov	r1, r3
   11576:	4816      	ldr	r0, [pc, #88]	; (115d0 <Pin::SetAsOpenDrain(bool)+0x6c>)
   11578:	f001 fbb2 	bl	12ce0 <__cyg_profile_func_enter>
  {
    pin_map->_register[port_][pin_] =
        BitPlace(pin_map->_register[port_][pin_], PinBitMap::kOpenDrain,
   1157c:	4b15      	ldr	r3, [pc, #84]	; (115d4 <Pin::SetAsOpenDrain(bool)+0x70>)
   1157e:	681b      	ldr	r3, [r3, #0]
   11580:	9a03      	ldr	r2, [sp, #12]
   11582:	7912      	ldrb	r2, [r2, #4]
   11584:	4610      	mov	r0, r2
   11586:	9a03      	ldr	r2, [sp, #12]
   11588:	7952      	ldrb	r2, [r2, #5]
   1158a:	4611      	mov	r1, r2
   1158c:	0142      	lsls	r2, r0, #5
   1158e:	440a      	add	r2, r1
   11590:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   11594:	f89d 200b 	ldrb.w	r2, [sp, #11]
    pin_map->_register[port_][pin_] =
   11598:	4b0e      	ldr	r3, [pc, #56]	; (115d4 <Pin::SetAsOpenDrain(bool)+0x70>)
   1159a:	681c      	ldr	r4, [r3, #0]
   1159c:	9b03      	ldr	r3, [sp, #12]
   1159e:	791b      	ldrb	r3, [r3, #4]
   115a0:	461e      	mov	r6, r3
   115a2:	9b03      	ldr	r3, [sp, #12]
   115a4:	795b      	ldrb	r3, [r3, #5]
   115a6:	461d      	mov	r5, r3
        BitPlace(pin_map->_register[port_][pin_], PinBitMap::kOpenDrain,
   115a8:	2301      	movs	r3, #1
   115aa:	9300      	str	r3, [sp, #0]
   115ac:	4613      	mov	r3, r2
   115ae:	220a      	movs	r2, #10
   115b0:	9803      	ldr	r0, [sp, #12]
   115b2:	f000 f84b 	bl	1164c <Pin::BitPlace(unsigned long, unsigned long, unsigned long, unsigned long)>
   115b6:	4602      	mov	r2, r0
    pin_map->_register[port_][pin_] =
   115b8:	0173      	lsls	r3, r6, #5
   115ba:	442b      	add	r3, r5
   115bc:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
   115c0:	463b      	mov	r3, r7
   115c2:	4619      	mov	r1, r3
   115c4:	4802      	ldr	r0, [pc, #8]	; (115d0 <Pin::SetAsOpenDrain(bool)+0x6c>)
   115c6:	f001 fb9f 	bl	12d08 <__cyg_profile_func_exit>
                 set_as_open_drain, 1);
  }
   115ca:	bf00      	nop
   115cc:	b005      	add	sp, #20
   115ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
   115d0:	00011565 	.word	0x00011565
   115d4:	10000010 	.word	0x10000010

000115d8 <Pin::EnableDac(bool)>:
  void EnableDac(bool enable_dac = true) override
   115d8:	b5f0      	push	{r4, r5, r6, r7, lr}
   115da:	b085      	sub	sp, #20
   115dc:	4677      	mov	r7, lr
   115de:	9003      	str	r0, [sp, #12]
   115e0:	460b      	mov	r3, r1
   115e2:	f88d 300b 	strb.w	r3, [sp, #11]
   115e6:	463b      	mov	r3, r7
   115e8:	4619      	mov	r1, r3
   115ea:	4816      	ldr	r0, [pc, #88]	; (11644 <Pin::EnableDac(bool)+0x6c>)
   115ec:	f001 fb78 	bl	12ce0 <__cyg_profile_func_enter>
  {
    pin_map->_register[port_][pin_] = BitPlace(
   115f0:	4b15      	ldr	r3, [pc, #84]	; (11648 <Pin::EnableDac(bool)+0x70>)
   115f2:	681b      	ldr	r3, [r3, #0]
        pin_map->_register[port_][pin_], PinBitMap::kDacEnable, enable_dac, 1);
   115f4:	9a03      	ldr	r2, [sp, #12]
   115f6:	7912      	ldrb	r2, [r2, #4]
   115f8:	4610      	mov	r0, r2
   115fa:	9a03      	ldr	r2, [sp, #12]
   115fc:	7952      	ldrb	r2, [r2, #5]
   115fe:	4611      	mov	r1, r2
    pin_map->_register[port_][pin_] = BitPlace(
   11600:	0142      	lsls	r2, r0, #5
   11602:	440a      	add	r2, r1
   11604:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   11608:	f89d 200b 	ldrb.w	r2, [sp, #11]
   1160c:	4b0e      	ldr	r3, [pc, #56]	; (11648 <Pin::EnableDac(bool)+0x70>)
   1160e:	681c      	ldr	r4, [r3, #0]
   11610:	9b03      	ldr	r3, [sp, #12]
   11612:	791b      	ldrb	r3, [r3, #4]
   11614:	461e      	mov	r6, r3
   11616:	9b03      	ldr	r3, [sp, #12]
   11618:	795b      	ldrb	r3, [r3, #5]
   1161a:	461d      	mov	r5, r3
   1161c:	2301      	movs	r3, #1
   1161e:	9300      	str	r3, [sp, #0]
   11620:	4613      	mov	r3, r2
   11622:	2210      	movs	r2, #16
   11624:	9803      	ldr	r0, [sp, #12]
   11626:	f000 f811 	bl	1164c <Pin::BitPlace(unsigned long, unsigned long, unsigned long, unsigned long)>
   1162a:	4602      	mov	r2, r0
   1162c:	0173      	lsls	r3, r6, #5
   1162e:	442b      	add	r3, r5
   11630:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
   11634:	463b      	mov	r3, r7
   11636:	4619      	mov	r1, r3
   11638:	4802      	ldr	r0, [pc, #8]	; (11644 <Pin::EnableDac(bool)+0x6c>)
   1163a:	f001 fb65 	bl	12d08 <__cyg_profile_func_exit>
  }
   1163e:	bf00      	nop
   11640:	b005      	add	sp, #20
   11642:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11644:	000115d9 	.word	0x000115d9
   11648:	10000010 	.word	0x10000010

0001164c <Pin::BitPlace(unsigned long, unsigned long, unsigned long, unsigned long)>:
  inline uint32_t BitPlace(uint32_t target, uint32_t position, uint32_t value,
   1164c:	b530      	push	{r4, r5, lr}
   1164e:	b087      	sub	sp, #28
   11650:	4675      	mov	r5, lr
   11652:	9003      	str	r0, [sp, #12]
   11654:	9102      	str	r1, [sp, #8]
   11656:	9201      	str	r2, [sp, #4]
   11658:	9300      	str	r3, [sp, #0]
   1165a:	462b      	mov	r3, r5
   1165c:	4619      	mov	r1, r3
   1165e:	4813      	ldr	r0, [pc, #76]	; (116ac <Pin::BitPlace(unsigned long, unsigned long, unsigned long, unsigned long)+0x60>)
   11660:	f001 fb3e 	bl	12ce0 <__cyg_profile_func_enter>
                           uint32_t value_width)
  {
    // Generate mask with all 1s
    uint32_t mask = 0xFFFFFFFF >> (32 - value_width);
   11664:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   11666:	f1c3 0320 	rsb	r3, r3, #32
   1166a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1166e:	fa22 f303 	lsr.w	r3, r2, r3
   11672:	9305      	str	r3, [sp, #20]
    target &= ~(mask << position);
   11674:	9a05      	ldr	r2, [sp, #20]
   11676:	9b01      	ldr	r3, [sp, #4]
   11678:	fa02 f303 	lsl.w	r3, r2, r3
   1167c:	43db      	mvns	r3, r3
   1167e:	9a02      	ldr	r2, [sp, #8]
   11680:	4013      	ands	r3, r2
   11682:	9302      	str	r3, [sp, #8]
    target |= (value & mask) << position;
   11684:	9a00      	ldr	r2, [sp, #0]
   11686:	9b05      	ldr	r3, [sp, #20]
   11688:	401a      	ands	r2, r3
   1168a:	9b01      	ldr	r3, [sp, #4]
   1168c:	fa02 f303 	lsl.w	r3, r2, r3
   11690:	9a02      	ldr	r2, [sp, #8]
   11692:	4313      	orrs	r3, r2
   11694:	9302      	str	r3, [sp, #8]
    return target;
   11696:	9c02      	ldr	r4, [sp, #8]
   11698:	462b      	mov	r3, r5
   1169a:	4619      	mov	r1, r3
   1169c:	4803      	ldr	r0, [pc, #12]	; (116ac <Pin::BitPlace(unsigned long, unsigned long, unsigned long, unsigned long)+0x60>)
   1169e:	f001 fb33 	bl	12d08 <__cyg_profile_func_exit>
   116a2:	4623      	mov	r3, r4
  }
   116a4:	4618      	mov	r0, r3
   116a6:	b007      	add	sp, #28
   116a8:	bd30      	pop	{r4, r5, pc}
   116aa:	bf00      	nop
   116ac:	0001164d 	.word	0x0001164d

000116b0 <Pin::GetPort() const>:
  uint8_t GetPort() const override
   116b0:	b530      	push	{r4, r5, lr}
   116b2:	b083      	sub	sp, #12
   116b4:	4675      	mov	r5, lr
   116b6:	9001      	str	r0, [sp, #4]
   116b8:	462b      	mov	r3, r5
   116ba:	4619      	mov	r1, r3
   116bc:	4806      	ldr	r0, [pc, #24]	; (116d8 <Pin::GetPort() const+0x28>)
   116be:	f001 fb0f 	bl	12ce0 <__cyg_profile_func_enter>
  {
    return port_;
   116c2:	9b01      	ldr	r3, [sp, #4]
   116c4:	791c      	ldrb	r4, [r3, #4]
   116c6:	462b      	mov	r3, r5
   116c8:	4619      	mov	r1, r3
   116ca:	4803      	ldr	r0, [pc, #12]	; (116d8 <Pin::GetPort() const+0x28>)
   116cc:	f001 fb1c 	bl	12d08 <__cyg_profile_func_exit>
   116d0:	4623      	mov	r3, r4
  }
   116d2:	4618      	mov	r0, r3
   116d4:	b003      	add	sp, #12
   116d6:	bd30      	pop	{r4, r5, pc}
   116d8:	000116b1 	.word	0x000116b1

000116dc <Pin::GetPin() const>:
  uint8_t GetPin() const override
   116dc:	b530      	push	{r4, r5, lr}
   116de:	b083      	sub	sp, #12
   116e0:	4675      	mov	r5, lr
   116e2:	9001      	str	r0, [sp, #4]
   116e4:	462b      	mov	r3, r5
   116e6:	4619      	mov	r1, r3
   116e8:	4806      	ldr	r0, [pc, #24]	; (11704 <Pin::GetPin() const+0x28>)
   116ea:	f001 faf9 	bl	12ce0 <__cyg_profile_func_enter>
  {
    return pin_;
   116ee:	9b01      	ldr	r3, [sp, #4]
   116f0:	795c      	ldrb	r4, [r3, #5]
   116f2:	462b      	mov	r3, r5
   116f4:	4619      	mov	r1, r3
   116f6:	4803      	ldr	r0, [pc, #12]	; (11704 <Pin::GetPin() const+0x28>)
   116f8:	f001 fb06 	bl	12d08 <__cyg_profile_func_exit>
   116fc:	4623      	mov	r3, r4
  }
   116fe:	4618      	mov	r0, r3
   11700:	b003      	add	sp, #12
   11702:	bd30      	pop	{r4, r5, pc}
   11704:	000116dd 	.word	0x000116dd

00011708 <unsigned char util::Value<TimerInterface::TimerPort, unsigned char>(TimerInterface::TimerPort)>:
//
// @param enum_type_value variable you would like to get the value of.
// @return the value of the enum class type variable of with the underlying
//         type of the enum class.
template <typename Enum, typename Type = typename std::underlying_type_t<Enum>>
constexpr Type Value(Enum enum_type_value)
   11708:	b530      	push	{r4, r5, lr}
   1170a:	b083      	sub	sp, #12
   1170c:	4675      	mov	r5, lr
   1170e:	4603      	mov	r3, r0
   11710:	f88d 3007 	strb.w	r3, [sp, #7]
   11714:	462b      	mov	r3, r5
   11716:	4619      	mov	r1, r3
   11718:	4806      	ldr	r0, [pc, #24]	; (11734 <unsigned char util::Value<TimerInterface::TimerPort, unsigned char>(TimerInterface::TimerPort)+0x2c>)
   1171a:	f001 fae1 	bl	12ce0 <__cyg_profile_func_enter>
{
  return static_cast<Type>(enum_type_value);
   1171e:	f89d 4007 	ldrb.w	r4, [sp, #7]
   11722:	462b      	mov	r3, r5
   11724:	4619      	mov	r1, r3
   11726:	4803      	ldr	r0, [pc, #12]	; (11734 <unsigned char util::Value<TimerInterface::TimerPort, unsigned char>(TimerInterface::TimerPort)+0x2c>)
   11728:	f001 faee 	bl	12d08 <__cyg_profile_func_exit>
   1172c:	4623      	mov	r3, r4
}
   1172e:	4618      	mov	r0, r3
   11730:	b003      	add	sp, #12
   11732:	bd30      	pop	{r4, r5, pc}
   11734:	00011709 	.word	0x00011709

00011738 <Timer::DoNothingIsr()>:
    Lpc40xxSystemController::Peripherals::kTimer3
  };

  static constexpr IRQn kTimerIrq[] = { IRQn::TIMER0_IRQn, IRQn::TIMER1_IRQn,
                                        IRQn::TIMER2_IRQn, IRQn::TIMER3_IRQn };
  static void DoNothingIsr() {}
   11738:	b510      	push	{r4, lr}
   1173a:	4674      	mov	r4, lr
   1173c:	4623      	mov	r3, r4
   1173e:	4619      	mov	r1, r3
   11740:	4804      	ldr	r0, [pc, #16]	; (11754 <Timer::DoNothingIsr()+0x1c>)
   11742:	f001 facd 	bl	12ce0 <__cyg_profile_func_enter>
   11746:	4623      	mov	r3, r4
   11748:	4619      	mov	r1, r3
   1174a:	4802      	ldr	r0, [pc, #8]	; (11754 <Timer::DoNothingIsr()+0x1c>)
   1174c:	f001 fadc 	bl	12d08 <__cyg_profile_func_exit>
   11750:	bf00      	nop
   11752:	bd10      	pop	{r4, pc}
   11754:	00011739 	.word	0x00011739

00011758 <Timer::Initialize(unsigned long, void (*)(), long)>:
  ///                  register will be 10 ms.
  /// @param isr an ISR that will fire when the condition set by SetTimer
  ///            method is achieved.
  /// @param priority sets the Timer interrupt's priority level, defaults to -1
  ///                 which uses the platforms default priority.
  void Initialize(uint32_t frequency, IsrPointer isr = DoNothingIsr,
   11758:	b510      	push	{r4, lr}
   1175a:	b086      	sub	sp, #24
   1175c:	4674      	mov	r4, lr
   1175e:	9003      	str	r0, [sp, #12]
   11760:	9102      	str	r1, [sp, #8]
   11762:	9201      	str	r2, [sp, #4]
   11764:	9300      	str	r3, [sp, #0]
   11766:	4623      	mov	r3, r4
   11768:	4619      	mov	r1, r3
   1176a:	483e      	ldr	r0, [pc, #248]	; (11864 <Timer::Initialize(unsigned long, void (*)(), long)+0x10c>)
   1176c:	f001 fab8 	bl	12ce0 <__cyg_profile_func_enter>
                  int32_t priority = -1) override final
  {
    PowerUpPeripheral(kPowerbit[channel_]);
   11770:	9b03      	ldr	r3, [sp, #12]
   11772:	1d18      	adds	r0, r3, #4
   11774:	9b03      	ldr	r3, [sp, #12]
   11776:	685b      	ldr	r3, [r3, #4]
   11778:	3314      	adds	r3, #20
   1177a:	681b      	ldr	r3, [r3, #0]
   1177c:	9a03      	ldr	r2, [sp, #12]
   1177e:	7a12      	ldrb	r2, [r2, #8]
   11780:	0092      	lsls	r2, r2, #2
   11782:	4939      	ldr	r1, [pc, #228]	; (11868 <Timer::Initialize(unsigned long, void (*)(), long)+0x110>)
   11784:	440a      	add	r2, r1
   11786:	4611      	mov	r1, r2
   11788:	4798      	blx	r3
    SJ2_ASSERT_FATAL(
   1178a:	9b02      	ldr	r3, [sp, #8]
   1178c:	2b00      	cmp	r3, #0
   1178e:	d10d      	bne.n	117ac <Timer::Initialize(unsigned long, void (*)(), long)+0x54>
   11790:	2384      	movs	r3, #132	; 0x84
   11792:	4a36      	ldr	r2, [pc, #216]	; (1186c <Timer::Initialize(unsigned long, void (*)(), long)+0x114>)
   11794:	4936      	ldr	r1, [pc, #216]	; (11870 <Timer::Initialize(unsigned long, void (*)(), long)+0x118>)
   11796:	4837      	ldr	r0, [pc, #220]	; (11874 <Timer::Initialize(unsigned long, void (*)(), long)+0x11c>)
   11798:	f002 fcfc 	bl	14194 <printf>
   1179c:	4836      	ldr	r0, [pc, #216]	; (11878 <Timer::Initialize(unsigned long, void (*)(), long)+0x120>)
   1179e:	f001 fa6f 	bl	12c80 <puts>
   117a2:	2100      	movs	r1, #0
   117a4:	2001      	movs	r0, #1
   117a6:	f7ff f83b 	bl	10820 <debug::PrintBacktrace(bool, void*)>
   117aa:	e7fe      	b.n	117aa <Timer::Initialize(unsigned long, void (*)(), long)+0x52>
        frequency != 0,
        "Cannot have zero ticks per microsecond, please choose 1 or more.");
    // Set Prescale register for Prescale Counter to milliseconds
    uint32_t prescaler = GetPeripheralFrequency() / frequency;
   117ac:	9b03      	ldr	r3, [sp, #12]
   117ae:	1d1a      	adds	r2, r3, #4
   117b0:	9b03      	ldr	r3, [sp, #12]
   117b2:	685b      	ldr	r3, [r3, #4]
   117b4:	3310      	adds	r3, #16
   117b6:	681b      	ldr	r3, [r3, #0]
   117b8:	4610      	mov	r0, r2
   117ba:	4798      	blx	r3
   117bc:	4602      	mov	r2, r0
   117be:	9b02      	ldr	r3, [sp, #8]
   117c0:	fbb2 f3f3 	udiv	r3, r2, r3
   117c4:	9305      	str	r3, [sp, #20]
    tim_register[channel_]->PR &= ~(kClear << 1);
   117c6:	9b03      	ldr	r3, [sp, #12]
   117c8:	7a1b      	ldrb	r3, [r3, #8]
   117ca:	461a      	mov	r2, r3
   117cc:	4b2b      	ldr	r3, [pc, #172]	; (1187c <Timer::Initialize(unsigned long, void (*)(), long)+0x124>)
   117ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   117d2:	68da      	ldr	r2, [r3, #12]
   117d4:	9b03      	ldr	r3, [sp, #12]
   117d6:	7a1b      	ldrb	r3, [r3, #8]
   117d8:	4619      	mov	r1, r3
   117da:	4b28      	ldr	r3, [pc, #160]	; (1187c <Timer::Initialize(unsigned long, void (*)(), long)+0x124>)
   117dc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   117e0:	f002 0201 	and.w	r2, r2, #1
   117e4:	60da      	str	r2, [r3, #12]
    tim_register[channel_]->PR |= (prescaler << 1);
   117e6:	9b03      	ldr	r3, [sp, #12]
   117e8:	7a1b      	ldrb	r3, [r3, #8]
   117ea:	461a      	mov	r2, r3
   117ec:	4b23      	ldr	r3, [pc, #140]	; (1187c <Timer::Initialize(unsigned long, void (*)(), long)+0x124>)
   117ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   117f2:	68d9      	ldr	r1, [r3, #12]
   117f4:	9b05      	ldr	r3, [sp, #20]
   117f6:	005a      	lsls	r2, r3, #1
   117f8:	9b03      	ldr	r3, [sp, #12]
   117fa:	7a1b      	ldrb	r3, [r3, #8]
   117fc:	4618      	mov	r0, r3
   117fe:	4b1f      	ldr	r3, [pc, #124]	; (1187c <Timer::Initialize(unsigned long, void (*)(), long)+0x124>)
   11800:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   11804:	430a      	orrs	r2, r1
   11806:	60da      	str	r2, [r3, #12]
    tim_register[channel_]->TCR |= (1 << 0);
   11808:	9b03      	ldr	r3, [sp, #12]
   1180a:	7a1b      	ldrb	r3, [r3, #8]
   1180c:	461a      	mov	r2, r3
   1180e:	4b1b      	ldr	r3, [pc, #108]	; (1187c <Timer::Initialize(unsigned long, void (*)(), long)+0x124>)
   11810:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   11814:	685a      	ldr	r2, [r3, #4]
   11816:	9b03      	ldr	r3, [sp, #12]
   11818:	7a1b      	ldrb	r3, [r3, #8]
   1181a:	4619      	mov	r1, r3
   1181c:	4b17      	ldr	r3, [pc, #92]	; (1187c <Timer::Initialize(unsigned long, void (*)(), long)+0x124>)
   1181e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   11822:	f042 0201 	orr.w	r2, r2, #1
   11826:	605a      	str	r2, [r3, #4]
    user_timer_isr[channel_] = isr;
   11828:	9b03      	ldr	r3, [sp, #12]
   1182a:	7a1b      	ldrb	r3, [r3, #8]
   1182c:	4619      	mov	r1, r3
   1182e:	4a14      	ldr	r2, [pc, #80]	; (11880 <Timer::Initialize(unsigned long, void (*)(), long)+0x128>)
   11830:	9b01      	ldr	r3, [sp, #4]
   11832:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
    RegisterIsr(kTimerIrq[channel_], kTimerIsr[channel_], true, priority);
   11836:	9b03      	ldr	r3, [sp, #12]
   11838:	7a1b      	ldrb	r3, [r3, #8]
   1183a:	461a      	mov	r2, r3
   1183c:	4b11      	ldr	r3, [pc, #68]	; (11884 <Timer::Initialize(unsigned long, void (*)(), long)+0x12c>)
   1183e:	5698      	ldrsb	r0, [r3, r2]
   11840:	9b03      	ldr	r3, [sp, #12]
   11842:	7a1b      	ldrb	r3, [r3, #8]
   11844:	461a      	mov	r2, r3
   11846:	4b10      	ldr	r3, [pc, #64]	; (11888 <Timer::Initialize(unsigned long, void (*)(), long)+0x130>)
   11848:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   1184c:	9b00      	ldr	r3, [sp, #0]
   1184e:	2201      	movs	r2, #1
   11850:	f001 f91e 	bl	12a90 <RegisterIsr(IRQn, void (*)(), bool, long)>
   11854:	4623      	mov	r3, r4
   11856:	4619      	mov	r1, r3
   11858:	4802      	ldr	r0, [pc, #8]	; (11864 <Timer::Initialize(unsigned long, void (*)(), long)+0x10c>)
   1185a:	f001 fa55 	bl	12d08 <__cyg_profile_func_exit>
  }
   1185e:	bf00      	nop
   11860:	b006      	add	sp, #24
   11862:	bd10      	pop	{r4, pc}
   11864:	00011759 	.word	0x00011759
   11868:	000179a4 	.word	0x000179a4
   1186c:	00017c44 	.word	0x00017c44
   11870:	000179c8 	.word	0x000179c8
   11874:	0001780c 	.word	0x0001780c
   11878:	00017518 	.word	0x00017518
   1187c:	10000014 	.word	0x10000014
   11880:	100002ac 	.word	0x100002ac
   11884:	000179b4 	.word	0x000179b4
   11888:	000179b8 	.word	0x000179b8

0001188c <unsigned char util::Value<TimerInterface::MatchControlRegister, unsigned char>(TimerInterface::MatchControlRegister)>:
constexpr Type Value(Enum enum_type_value)
   1188c:	b530      	push	{r4, r5, lr}
   1188e:	b083      	sub	sp, #12
   11890:	4675      	mov	r5, lr
   11892:	4603      	mov	r3, r0
   11894:	f88d 3007 	strb.w	r3, [sp, #7]
   11898:	462b      	mov	r3, r5
   1189a:	4619      	mov	r1, r3
   1189c:	4806      	ldr	r0, [pc, #24]	; (118b8 <unsigned char util::Value<TimerInterface::MatchControlRegister, unsigned char>(TimerInterface::MatchControlRegister)+0x2c>)
   1189e:	f001 fa1f 	bl	12ce0 <__cyg_profile_func_enter>
  return static_cast<Type>(enum_type_value);
   118a2:	f89d 4007 	ldrb.w	r4, [sp, #7]
   118a6:	462b      	mov	r3, r5
   118a8:	4619      	mov	r1, r3
   118aa:	4803      	ldr	r0, [pc, #12]	; (118b8 <unsigned char util::Value<TimerInterface::MatchControlRegister, unsigned char>(TimerInterface::MatchControlRegister)+0x2c>)
   118ac:	f001 fa2c 	bl	12d08 <__cyg_profile_func_exit>
   118b0:	4623      	mov	r3, r4
}
   118b2:	4618      	mov	r0, r3
   118b4:	b003      	add	sp, #12
   118b6:	bd30      	pop	{r4, r5, pc}
   118b8:	0001188d 	.word	0x0001188d

000118bc <Timer::SetTimer(unsigned long, TimerInterface::TimerIsrCondition, TimerInterface::MatchControlRegister)>:
  ///
  /// @param ticks the count of the timer register (TC) to have an ISR fire
  /// @param condition the condition for which a timer interrupt will occur
  /// @param match_register which match register (from 0 to 3) should be used
  ///                       for holding the ticks for the condition.
  void SetTimer(uint32_t ticks, TimerIsrCondition condition,
   118bc:	b570      	push	{r4, r5, r6, lr}
   118be:	b086      	sub	sp, #24
   118c0:	4676      	mov	r6, lr
   118c2:	9003      	str	r0, [sp, #12]
   118c4:	9102      	str	r1, [sp, #8]
   118c6:	4611      	mov	r1, r2
   118c8:	461a      	mov	r2, r3
   118ca:	460b      	mov	r3, r1
   118cc:	f88d 3007 	strb.w	r3, [sp, #7]
   118d0:	4613      	mov	r3, r2
   118d2:	f88d 3006 	strb.w	r3, [sp, #6]
   118d6:	4633      	mov	r3, r6
   118d8:	4619      	mov	r1, r3
   118da:	4832      	ldr	r0, [pc, #200]	; (119a4 <Timer::SetTimer(unsigned long, TimerInterface::TimerIsrCondition, TimerInterface::MatchControlRegister)+0xe8>)
   118dc:	f001 fa00 	bl	12ce0 <__cyg_profile_func_enter>
                MatchControlRegister match_register = kMat0) override final
  {
    static constexpr uint8_t kClearMode = 0b0111;

    uint8_t match_value = util::Value(match_register);
   118e0:	f89d 3006 	ldrb.w	r3, [sp, #6]
   118e4:	4618      	mov	r0, r3
   118e6:	f7ff ffd1 	bl	1188c <unsigned char util::Value<TimerInterface::MatchControlRegister, unsigned char>(TimerInterface::MatchControlRegister)>
   118ea:	4603      	mov	r3, r0
   118ec:	f88d 3017 	strb.w	r3, [sp, #23]
    tim_register[channel_]->MCR &= ~(kClearMode << match_value);
   118f0:	9b03      	ldr	r3, [sp, #12]
   118f2:	7a1b      	ldrb	r3, [r3, #8]
   118f4:	461a      	mov	r2, r3
   118f6:	4b2c      	ldr	r3, [pc, #176]	; (119a8 <Timer::SetTimer(unsigned long, TimerInterface::TimerIsrCondition, TimerInterface::MatchControlRegister)+0xec>)
   118f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   118fc:	695a      	ldr	r2, [r3, #20]
   118fe:	f89d 3017 	ldrb.w	r3, [sp, #23]
   11902:	2107      	movs	r1, #7
   11904:	fa01 f303 	lsl.w	r3, r1, r3
   11908:	43db      	mvns	r3, r3
   1190a:	4619      	mov	r1, r3
   1190c:	9b03      	ldr	r3, [sp, #12]
   1190e:	7a1b      	ldrb	r3, [r3, #8]
   11910:	4618      	mov	r0, r3
   11912:	4b25      	ldr	r3, [pc, #148]	; (119a8 <Timer::SetTimer(unsigned long, TimerInterface::TimerIsrCondition, TimerInterface::MatchControlRegister)+0xec>)
   11914:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   11918:	400a      	ands	r2, r1
   1191a:	615a      	str	r2, [r3, #20]
    tim_register[channel_]->MCR |= condition << match_value;
   1191c:	9b03      	ldr	r3, [sp, #12]
   1191e:	7a1b      	ldrb	r3, [r3, #8]
   11920:	461a      	mov	r2, r3
   11922:	4b21      	ldr	r3, [pc, #132]	; (119a8 <Timer::SetTimer(unsigned long, TimerInterface::TimerIsrCondition, TimerInterface::MatchControlRegister)+0xec>)
   11924:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   11928:	695a      	ldr	r2, [r3, #20]
   1192a:	f89d 1007 	ldrb.w	r1, [sp, #7]
   1192e:	f89d 3017 	ldrb.w	r3, [sp, #23]
   11932:	fa01 f303 	lsl.w	r3, r1, r3
   11936:	4619      	mov	r1, r3
   11938:	9b03      	ldr	r3, [sp, #12]
   1193a:	7a1b      	ldrb	r3, [r3, #8]
   1193c:	4618      	mov	r0, r3
   1193e:	4b1a      	ldr	r3, [pc, #104]	; (119a8 <Timer::SetTimer(unsigned long, TimerInterface::TimerIsrCondition, TimerInterface::MatchControlRegister)+0xec>)
   11940:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   11944:	430a      	orrs	r2, r1
   11946:	615a      	str	r2, [r3, #20]
    *match[channel_][match_value / 3] |= (((ticks / 2)) << 0);
   11948:	9b03      	ldr	r3, [sp, #12]
   1194a:	7a1b      	ldrb	r3, [r3, #8]
   1194c:	4618      	mov	r0, r3
   1194e:	f89d 3017 	ldrb.w	r3, [sp, #23]
   11952:	4a16      	ldr	r2, [pc, #88]	; (119ac <Timer::SetTimer(unsigned long, TimerInterface::TimerIsrCondition, TimerInterface::MatchControlRegister)+0xf0>)
   11954:	fba2 2303 	umull	r2, r3, r2, r3
   11958:	085b      	lsrs	r3, r3, #1
   1195a:	b2db      	uxtb	r3, r3
   1195c:	4619      	mov	r1, r3
   1195e:	4a14      	ldr	r2, [pc, #80]	; (119b0 <Timer::SetTimer(unsigned long, TimerInterface::TimerIsrCondition, TimerInterface::MatchControlRegister)+0xf4>)
   11960:	0083      	lsls	r3, r0, #2
   11962:	440b      	add	r3, r1
   11964:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11968:	6819      	ldr	r1, [r3, #0]
   1196a:	9b02      	ldr	r3, [sp, #8]
   1196c:	085a      	lsrs	r2, r3, #1
   1196e:	9b03      	ldr	r3, [sp, #12]
   11970:	7a1b      	ldrb	r3, [r3, #8]
   11972:	461d      	mov	r5, r3
   11974:	f89d 3017 	ldrb.w	r3, [sp, #23]
   11978:	480c      	ldr	r0, [pc, #48]	; (119ac <Timer::SetTimer(unsigned long, TimerInterface::TimerIsrCondition, TimerInterface::MatchControlRegister)+0xf0>)
   1197a:	fba0 0303 	umull	r0, r3, r0, r3
   1197e:	085b      	lsrs	r3, r3, #1
   11980:	b2db      	uxtb	r3, r3
   11982:	461c      	mov	r4, r3
   11984:	480a      	ldr	r0, [pc, #40]	; (119b0 <Timer::SetTimer(unsigned long, TimerInterface::TimerIsrCondition, TimerInterface::MatchControlRegister)+0xf4>)
   11986:	00ab      	lsls	r3, r5, #2
   11988:	4423      	add	r3, r4
   1198a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
   1198e:	430a      	orrs	r2, r1
   11990:	601a      	str	r2, [r3, #0]
   11992:	4633      	mov	r3, r6
   11994:	4619      	mov	r1, r3
   11996:	4803      	ldr	r0, [pc, #12]	; (119a4 <Timer::SetTimer(unsigned long, TimerInterface::TimerIsrCondition, TimerInterface::MatchControlRegister)+0xe8>)
   11998:	f001 f9b6 	bl	12d08 <__cyg_profile_func_exit>
  }
   1199c:	bf00      	nop
   1199e:	b006      	add	sp, #24
   119a0:	bd70      	pop	{r4, r5, r6, pc}
   119a2:	bf00      	nop
   119a4:	000118bd 	.word	0x000118bd
   119a8:	10000014 	.word	0x10000014
   119ac:	aaaaaaab 	.word	0xaaaaaaab
   119b0:	1000026c 	.word	0x1000026c

000119b4 <Timer::GetTimer()>:

  [[gnu::always_inline]] uint32_t GetTimer() override final {
   119b4:	b530      	push	{r4, r5, lr}
   119b6:	b083      	sub	sp, #12
   119b8:	4675      	mov	r5, lr
   119ba:	9001      	str	r0, [sp, #4]
   119bc:	462b      	mov	r3, r5
   119be:	4619      	mov	r1, r3
   119c0:	4809      	ldr	r0, [pc, #36]	; (119e8 <Timer::GetTimer()+0x34>)
   119c2:	f001 f98d 	bl	12ce0 <__cyg_profile_func_enter>
    return tim_register[channel_]->TC;
   119c6:	9b01      	ldr	r3, [sp, #4]
   119c8:	7a1b      	ldrb	r3, [r3, #8]
   119ca:	461a      	mov	r2, r3
   119cc:	4b07      	ldr	r3, [pc, #28]	; (119ec <Timer::GetTimer()+0x38>)
   119ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   119d2:	689c      	ldr	r4, [r3, #8]
   119d4:	462b      	mov	r3, r5
   119d6:	4619      	mov	r1, r3
   119d8:	4803      	ldr	r0, [pc, #12]	; (119e8 <Timer::GetTimer()+0x34>)
   119da:	f001 f995 	bl	12d08 <__cyg_profile_func_exit>
   119de:	4623      	mov	r3, r4
  }
   119e0:	4618      	mov	r0, r3
   119e2:	b003      	add	sp, #12
   119e4:	bd30      	pop	{r4, r5, pc}
   119e6:	bf00      	nop
   119e8:	000119b5 	.word	0x000119b5
   119ec:	10000014 	.word	0x10000014

000119f0 <Uart::SetBaudRate(unsigned long)>:
  constexpr Uart(Channels mode, PinInterface * tx_pin, PinInterface * rx_pin)
      : channel_(static_cast<uint8_t>(mode)), tx_(tx_pin), rx_(rx_pin)
  {
  }

  void SetBaudRate(uint32_t baud_rate) override
   119f0:	b510      	push	{r4, lr}
   119f2:	b088      	sub	sp, #32
   119f4:	4674      	mov	r4, lr
   119f6:	9001      	str	r0, [sp, #4]
   119f8:	9100      	str	r1, [sp, #0]
   119fa:	4623      	mov	r3, r4
   119fc:	4619      	mov	r1, r3
   119fe:	482d      	ldr	r0, [pc, #180]	; (11ab4 <Uart::SetBaudRate(unsigned long)+0xc4>)
   11a00:	f001 f96e 	bl	12ce0 <__cyg_profile_func_enter>
  {
    constexpr uint8_t kDlabBit = (1 << 7);
   11a04:	2380      	movs	r3, #128	; 0x80
   11a06:	f88d 301f 	strb.w	r3, [sp, #31]
    float baudrate             = static_cast<float>(baud_rate);
   11a0a:	9b00      	ldr	r3, [sp, #0]
   11a0c:	ee07 3a90 	vmov	s15, r3
   11a10:	eef8 7a67 	vcvt.f32.u32	s15, s15
   11a14:	edcd 7a06 	vstr	s15, [sp, #24]
    UartCalibration_t dividers = GenerateUartCalibration(baudrate);
   11a18:	ab02      	add	r3, sp, #8
   11a1a:	ed9d 0a06 	vldr	s0, [sp, #24]
   11a1e:	9901      	ldr	r1, [sp, #4]
   11a20:	4618      	mov	r0, r3
   11a22:	f000 fb2d 	bl	12080 <Uart::GenerateUartCalibration(float)>

    uint8_t dlm = static_cast<uint8_t>((dividers.divide_latch >> 8) & 0xFF);
   11a26:	9b02      	ldr	r3, [sp, #8]
   11a28:	0a1b      	lsrs	r3, r3, #8
   11a2a:	f88d 3017 	strb.w	r3, [sp, #23]
    uint8_t dll = static_cast<uint8_t>(dividers.divide_latch & 0xFF);
   11a2e:	9b02      	ldr	r3, [sp, #8]
   11a30:	f88d 3016 	strb.w	r3, [sp, #22]
    uint8_t fdr = static_cast<uint8_t>((dividers.multiply & 0xF) << 4 |
   11a34:	9b04      	ldr	r3, [sp, #16]
   11a36:	b2db      	uxtb	r3, r3
   11a38:	011b      	lsls	r3, r3, #4
   11a3a:	b2da      	uxtb	r2, r3
                                       (dividers.divide_add & 0xF));
   11a3c:	9b03      	ldr	r3, [sp, #12]
   11a3e:	b2db      	uxtb	r3, r3
   11a40:	f003 030f 	and.w	r3, r3, #15
   11a44:	b2db      	uxtb	r3, r3
    uint8_t fdr = static_cast<uint8_t>((dividers.multiply & 0xF) << 4 |
   11a46:	4313      	orrs	r3, r2
   11a48:	f88d 3015 	strb.w	r3, [sp, #21]

    // Set baud rate
    uart[channel_]->LCR = kDlabBit;
   11a4c:	9b01      	ldr	r3, [sp, #4]
   11a4e:	7a1b      	ldrb	r3, [r3, #8]
   11a50:	461a      	mov	r2, r3
   11a52:	4b19      	ldr	r3, [pc, #100]	; (11ab8 <Uart::SetBaudRate(unsigned long)+0xc8>)
   11a54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   11a58:	2280      	movs	r2, #128	; 0x80
   11a5a:	731a      	strb	r2, [r3, #12]
    uart[channel_]->DLM = dlm;
   11a5c:	9b01      	ldr	r3, [sp, #4]
   11a5e:	7a1b      	ldrb	r3, [r3, #8]
   11a60:	461a      	mov	r2, r3
   11a62:	4b15      	ldr	r3, [pc, #84]	; (11ab8 <Uart::SetBaudRate(unsigned long)+0xc8>)
   11a64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   11a68:	f89d 2017 	ldrb.w	r2, [sp, #23]
   11a6c:	711a      	strb	r2, [r3, #4]
    uart[channel_]->DLL = dll;
   11a6e:	9b01      	ldr	r3, [sp, #4]
   11a70:	7a1b      	ldrb	r3, [r3, #8]
   11a72:	461a      	mov	r2, r3
   11a74:	4b10      	ldr	r3, [pc, #64]	; (11ab8 <Uart::SetBaudRate(unsigned long)+0xc8>)
   11a76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   11a7a:	f89d 2016 	ldrb.w	r2, [sp, #22]
   11a7e:	701a      	strb	r2, [r3, #0]
    uart[channel_]->FDR = fdr;
   11a80:	9b01      	ldr	r3, [sp, #4]
   11a82:	7a1b      	ldrb	r3, [r3, #8]
   11a84:	461a      	mov	r2, r3
   11a86:	4b0c      	ldr	r3, [pc, #48]	; (11ab8 <Uart::SetBaudRate(unsigned long)+0xc8>)
   11a88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   11a8c:	f89d 2015 	ldrb.w	r2, [sp, #21]
   11a90:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    uart[channel_]->LCR = kStandardUart;
   11a94:	9b01      	ldr	r3, [sp, #4]
   11a96:	7a1b      	ldrb	r3, [r3, #8]
   11a98:	461a      	mov	r2, r3
   11a9a:	4b07      	ldr	r3, [pc, #28]	; (11ab8 <Uart::SetBaudRate(unsigned long)+0xc8>)
   11a9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   11aa0:	2203      	movs	r2, #3
   11aa2:	731a      	strb	r2, [r3, #12]
   11aa4:	4623      	mov	r3, r4
   11aa6:	4619      	mov	r1, r3
   11aa8:	4802      	ldr	r0, [pc, #8]	; (11ab4 <Uart::SetBaudRate(unsigned long)+0xc4>)
   11aaa:	f001 f92d 	bl	12d08 <__cyg_profile_func_exit>
  }
   11aae:	bf00      	nop
   11ab0:	b008      	add	sp, #32
   11ab2:	bd10      	pop	{r4, pc}
   11ab4:	000119f1 	.word	0x000119f1
   11ab8:	10000024 	.word	0x10000024

00011abc <Uart::Initialize(unsigned long)>:

  bool Initialize(uint32_t baud_rate) override
   11abc:	b530      	push	{r4, r5, lr}
   11abe:	b085      	sub	sp, #20
   11ac0:	4675      	mov	r5, lr
   11ac2:	9001      	str	r0, [sp, #4]
   11ac4:	9100      	str	r1, [sp, #0]
   11ac6:	462b      	mov	r3, r5
   11ac8:	4619      	mov	r1, r3
   11aca:	4830      	ldr	r0, [pc, #192]	; (11b8c <Uart::Initialize(unsigned long)+0xd0>)
   11acc:	f001 f908 	bl	12ce0 <__cyg_profile_func_enter>
  {
    constexpr uint8_t kFIFOEnableAndReset = 0b111;
   11ad0:	2307      	movs	r3, #7
   11ad2:	f88d 300f 	strb.w	r3, [sp, #15]
    // Powering the port
    PowerUpPeripheral(kPowerbit[channel_]);
   11ad6:	9b01      	ldr	r3, [sp, #4]
   11ad8:	1d18      	adds	r0, r3, #4
   11ada:	9b01      	ldr	r3, [sp, #4]
   11adc:	685b      	ldr	r3, [r3, #4]
   11ade:	3314      	adds	r3, #20
   11ae0:	681b      	ldr	r3, [r3, #0]
   11ae2:	9a01      	ldr	r2, [sp, #4]
   11ae4:	7a12      	ldrb	r2, [r2, #8]
   11ae6:	0092      	lsls	r2, r2, #2
   11ae8:	4929      	ldr	r1, [pc, #164]	; (11b90 <Uart::Initialize(unsigned long)+0xd4>)
   11aea:	440a      	add	r2, r1
   11aec:	4611      	mov	r1, r2
   11aee:	4798      	blx	r3
    // Setting the pin functions and modes
    rx_->SetPinFunction(kRxUartPortFunction[channel_]);
   11af0:	9b01      	ldr	r3, [sp, #4]
   11af2:	6918      	ldr	r0, [r3, #16]
   11af4:	9b01      	ldr	r3, [sp, #4]
   11af6:	691b      	ldr	r3, [r3, #16]
   11af8:	681b      	ldr	r3, [r3, #0]
   11afa:	681b      	ldr	r3, [r3, #0]
   11afc:	9a01      	ldr	r2, [sp, #4]
   11afe:	7a12      	ldrb	r2, [r2, #8]
   11b00:	4611      	mov	r1, r2
   11b02:	4a24      	ldr	r2, [pc, #144]	; (11b94 <Uart::Initialize(unsigned long)+0xd8>)
   11b04:	5c52      	ldrb	r2, [r2, r1]
   11b06:	4611      	mov	r1, r2
   11b08:	4798      	blx	r3
    tx_->SetPinFunction(kTxUartPortFunction[channel_]);
   11b0a:	9b01      	ldr	r3, [sp, #4]
   11b0c:	68d8      	ldr	r0, [r3, #12]
   11b0e:	9b01      	ldr	r3, [sp, #4]
   11b10:	68db      	ldr	r3, [r3, #12]
   11b12:	681b      	ldr	r3, [r3, #0]
   11b14:	681b      	ldr	r3, [r3, #0]
   11b16:	9a01      	ldr	r2, [sp, #4]
   11b18:	7a12      	ldrb	r2, [r2, #8]
   11b1a:	4611      	mov	r1, r2
   11b1c:	4a1e      	ldr	r2, [pc, #120]	; (11b98 <Uart::Initialize(unsigned long)+0xdc>)
   11b1e:	5c52      	ldrb	r2, [r2, r1]
   11b20:	4611      	mov	r1, r2
   11b22:	4798      	blx	r3
    rx_->SetMode(PinInterface::Mode::kPullUp);
   11b24:	9b01      	ldr	r3, [sp, #4]
   11b26:	691a      	ldr	r2, [r3, #16]
   11b28:	9b01      	ldr	r3, [sp, #4]
   11b2a:	691b      	ldr	r3, [r3, #16]
   11b2c:	681b      	ldr	r3, [r3, #0]
   11b2e:	3304      	adds	r3, #4
   11b30:	681b      	ldr	r3, [r3, #0]
   11b32:	2102      	movs	r1, #2
   11b34:	4610      	mov	r0, r2
   11b36:	4798      	blx	r3
    tx_->SetMode(PinInterface::Mode::kPullUp);
   11b38:	9b01      	ldr	r3, [sp, #4]
   11b3a:	68da      	ldr	r2, [r3, #12]
   11b3c:	9b01      	ldr	r3, [sp, #4]
   11b3e:	68db      	ldr	r3, [r3, #12]
   11b40:	681b      	ldr	r3, [r3, #0]
   11b42:	3304      	adds	r3, #4
   11b44:	681b      	ldr	r3, [r3, #0]
   11b46:	2102      	movs	r1, #2
   11b48:	4610      	mov	r0, r2
   11b4a:	4798      	blx	r3
    // Baud rate setting
    SetBaudRate(baud_rate);
   11b4c:	9900      	ldr	r1, [sp, #0]
   11b4e:	9801      	ldr	r0, [sp, #4]
   11b50:	f7ff ff4e 	bl	119f0 <Uart::SetBaudRate(unsigned long)>
    uart[channel_]->FCR |= kFIFOEnableAndReset;
   11b54:	9b01      	ldr	r3, [sp, #4]
   11b56:	7a1b      	ldrb	r3, [r3, #8]
   11b58:	461a      	mov	r2, r3
   11b5a:	4b10      	ldr	r3, [pc, #64]	; (11b9c <Uart::Initialize(unsigned long)+0xe0>)
   11b5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   11b60:	7a1b      	ldrb	r3, [r3, #8]
   11b62:	b2da      	uxtb	r2, r3
   11b64:	9b01      	ldr	r3, [sp, #4]
   11b66:	7a1b      	ldrb	r3, [r3, #8]
   11b68:	4619      	mov	r1, r3
   11b6a:	4b0c      	ldr	r3, [pc, #48]	; (11b9c <Uart::Initialize(unsigned long)+0xe0>)
   11b6c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   11b70:	f042 0207 	orr.w	r2, r2, #7
   11b74:	b2d2      	uxtb	r2, r2
   11b76:	721a      	strb	r2, [r3, #8]
    return true;
   11b78:	2401      	movs	r4, #1
   11b7a:	462b      	mov	r3, r5
   11b7c:	4619      	mov	r1, r3
   11b7e:	4803      	ldr	r0, [pc, #12]	; (11b8c <Uart::Initialize(unsigned long)+0xd0>)
   11b80:	f001 f8c2 	bl	12d08 <__cyg_profile_func_exit>
   11b84:	4623      	mov	r3, r4
  }
   11b86:	4618      	mov	r0, r3
   11b88:	b005      	add	sp, #20
   11b8a:	bd30      	pop	{r4, r5, pc}
   11b8c:	00011abd 	.word	0x00011abd
   11b90:	000179dc 	.word	0x000179dc
   11b94:	000179d8 	.word	0x000179d8
   11b98:	000179d4 	.word	0x000179d4
   11b9c:	10000024 	.word	0x10000024

00011ba0 <Uart::Send(unsigned char)::{lambda()#1}::operator()() const>:

  void Send(uint8_t data) override
  {
    uart[channel_]->THR              = data;
    auto wait_for_transfer_to_finish = [this]() -> bool {
   11ba0:	b530      	push	{r4, r5, lr}
   11ba2:	b083      	sub	sp, #12
   11ba4:	4675      	mov	r5, lr
   11ba6:	9001      	str	r0, [sp, #4]
   11ba8:	462b      	mov	r3, r5
   11baa:	4619      	mov	r1, r3
   11bac:	480d      	ldr	r0, [pc, #52]	; (11be4 <Uart::Send(unsigned char)::{lambda()#1}::operator()() const+0x44>)
   11bae:	f001 f897 	bl	12ce0 <__cyg_profile_func_enter>
   11bb2:	9b01      	ldr	r3, [sp, #4]
   11bb4:	681b      	ldr	r3, [r3, #0]
      return (uart[channel_]->LSR & (1 << 5));
   11bb6:	7a1b      	ldrb	r3, [r3, #8]
   11bb8:	461a      	mov	r2, r3
   11bba:	4b0b      	ldr	r3, [pc, #44]	; (11be8 <Uart::Send(unsigned char)::{lambda()#1}::operator()() const+0x48>)
   11bbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   11bc0:	7d1b      	ldrb	r3, [r3, #20]
   11bc2:	b2db      	uxtb	r3, r3
   11bc4:	f003 0320 	and.w	r3, r3, #32
   11bc8:	2b00      	cmp	r3, #0
   11bca:	bf14      	ite	ne
   11bcc:	2301      	movne	r3, #1
   11bce:	2300      	moveq	r3, #0
   11bd0:	b2dc      	uxtb	r4, r3
   11bd2:	462b      	mov	r3, r5
   11bd4:	4619      	mov	r1, r3
   11bd6:	4803      	ldr	r0, [pc, #12]	; (11be4 <Uart::Send(unsigned char)::{lambda()#1}::operator()() const+0x44>)
   11bd8:	f001 f896 	bl	12d08 <__cyg_profile_func_exit>
   11bdc:	4623      	mov	r3, r4
    };
   11bde:	4618      	mov	r0, r3
   11be0:	b003      	add	sp, #12
   11be2:	bd30      	pop	{r4, r5, pc}
   11be4:	00011ba1 	.word	0x00011ba1
   11be8:	10000024 	.word	0x10000024

00011bec <Uart::Send(unsigned char)>:
  void Send(uint8_t data) override
   11bec:	e92d 4830 	stmdb	sp!, {r4, r5, fp, lr}
   11bf0:	b08a      	sub	sp, #40	; 0x28
   11bf2:	4675      	mov	r5, lr
   11bf4:	9001      	str	r0, [sp, #4]
   11bf6:	460b      	mov	r3, r1
   11bf8:	f88d 3003 	strb.w	r3, [sp, #3]
   11bfc:	462b      	mov	r3, r5
   11bfe:	4619      	mov	r1, r3
   11c00:	4831      	ldr	r0, [pc, #196]	; (11cc8 <Uart::Send(unsigned char)+0xdc>)
   11c02:	f001 f86d 	bl	12ce0 <__cyg_profile_func_enter>
    uart[channel_]->THR              = data;
   11c06:	9b01      	ldr	r3, [sp, #4]
   11c08:	7a1b      	ldrb	r3, [r3, #8]
   11c0a:	461a      	mov	r2, r3
   11c0c:	4b2f      	ldr	r3, [pc, #188]	; (11ccc <Uart::Send(unsigned char)+0xe0>)
   11c0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   11c12:	f89d 2003 	ldrb.w	r2, [sp, #3]
   11c16:	701a      	strb	r2, [r3, #0]
    };
   11c18:	9b01      	ldr	r3, [sp, #4]
   11c1a:	9304      	str	r3, [sp, #16]
   11c1c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   11c20:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   11c24:	e9cd 3408 	strd	r3, r4, [sp, #32]
   11c28:	9b04      	ldr	r3, [sp, #16]
   11c2a:	9303      	str	r3, [sp, #12]
   11c2c:	462b      	mov	r3, r5
   11c2e:	4619      	mov	r1, r3
   11c30:	4827      	ldr	r0, [pc, #156]	; (11cd0 <Uart::Send(unsigned char)+0xe4>)
   11c32:	f001 f855 	bl	12ce0 <__cyg_profile_func_enter>
template <typename F>
[[gnu::always_inline]] inline Status Wait(uint64_t timeout, F is_done);
template <typename F>
inline Status Wait(uint64_t timeout, F is_done)
{
  uint64_t timeout_time = 0;
   11c36:	f04f 0300 	mov.w	r3, #0
   11c3a:	f04f 0400 	mov.w	r4, #0
   11c3e:	e9cd 3406 	strd	r3, r4, [sp, #24]
  if (timeout == kMaxWait)
   11c42:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   11c46:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
   11c4a:	bf08      	it	eq
   11c4c:	f1b3 3fff 	cmpeq.w	r3, #4294967295	; 0xffffffff
   11c50:	d106      	bne.n	11c60 <Uart::Send(unsigned char)+0x74>
  {
    timeout_time = kMaxWait;
   11c52:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   11c56:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   11c5a:	e9cd 3406 	strd	r3, r4, [sp, #24]
   11c5e:	e00b      	b.n	11c78 <Uart::Send(unsigned char)+0x8c>
  }
  else
  {
    timeout_time = Milliseconds() + timeout;
   11c60:	f7fe fe8e 	bl	10980 <Milliseconds()>
   11c64:	460a      	mov	r2, r1
   11c66:	4601      	mov	r1, r0
   11c68:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   11c6c:	eb13 0b01 	adds.w	fp, r3, r1
   11c70:	eb44 0c02 	adc.w	ip, r4, r2
   11c74:	e9cd bc06 	strd	fp, ip, [sp, #24]
  }

  Status status = Status::kTimedOut;
   11c78:	2301      	movs	r3, #1
   11c7a:	9305      	str	r3, [sp, #20]
  while (Milliseconds() < timeout_time)
   11c7c:	f7fe fe80 	bl	10980 <Milliseconds()>
   11c80:	460a      	mov	r2, r1
   11c82:	4601      	mov	r1, r0
   11c84:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
   11c88:	42a2      	cmp	r2, r4
   11c8a:	bf08      	it	eq
   11c8c:	4299      	cmpeq	r1, r3
   11c8e:	bf34      	ite	cc
   11c90:	2301      	movcc	r3, #1
   11c92:	2300      	movcs	r3, #0
   11c94:	b2db      	uxtb	r3, r3
   11c96:	2b00      	cmp	r3, #0
   11c98:	d008      	beq.n	11cac <Uart::Send(unsigned char)+0xc0>
  {
    if (is_done())
   11c9a:	ab03      	add	r3, sp, #12
   11c9c:	4618      	mov	r0, r3
   11c9e:	f7ff ff7f 	bl	11ba0 <Uart::Send(unsigned char)::{lambda()#1}::operator()() const>
   11ca2:	4603      	mov	r3, r0
   11ca4:	2b00      	cmp	r3, #0
   11ca6:	d0e9      	beq.n	11c7c <Uart::Send(unsigned char)+0x90>
    {
      status = Status::kSuccess;
   11ca8:	2300      	movs	r3, #0
   11caa:	9305      	str	r3, [sp, #20]
   11cac:	462b      	mov	r3, r5
   11cae:	4619      	mov	r1, r3
   11cb0:	4807      	ldr	r0, [pc, #28]	; (11cd0 <Uart::Send(unsigned char)+0xe4>)
   11cb2:	f001 f829 	bl	12d08 <__cyg_profile_func_exit>
   11cb6:	462b      	mov	r3, r5
   11cb8:	4619      	mov	r1, r3
   11cba:	4803      	ldr	r0, [pc, #12]	; (11cc8 <Uart::Send(unsigned char)+0xdc>)
   11cbc:	f001 f824 	bl	12d08 <__cyg_profile_func_exit>
    Wait(kMaxWait, wait_for_transfer_to_finish);
  }
   11cc0:	bf00      	nop
   11cc2:	b00a      	add	sp, #40	; 0x28
   11cc4:	e8bd 8830 	ldmia.w	sp!, {r4, r5, fp, pc}
   11cc8:	00011bed 	.word	0x00011bed
   11ccc:	10000024 	.word	0x10000024
   11cd0:	000124e9 	.word	0x000124e9

00011cd4 <Uart::Receive(unsigned long)::{lambda()#1}::operator()() const>:

  uint8_t Receive([[maybe_unused]] uint32_t timeout = 0x7FFFFFFF) override
  {
    uint8_t receiver   = '\xFF';
    auto byte_recieved = [this]() -> bool {
   11cd4:	b530      	push	{r4, r5, lr}
   11cd6:	b083      	sub	sp, #12
   11cd8:	4675      	mov	r5, lr
   11cda:	9001      	str	r0, [sp, #4]
   11cdc:	462b      	mov	r3, r5
   11cde:	4619      	mov	r1, r3
   11ce0:	480d      	ldr	r0, [pc, #52]	; (11d18 <Uart::Receive(unsigned long)::{lambda()#1}::operator()() const+0x44>)
   11ce2:	f000 fffd 	bl	12ce0 <__cyg_profile_func_enter>
   11ce6:	9b01      	ldr	r3, [sp, #4]
   11ce8:	681b      	ldr	r3, [r3, #0]
      return (uart[channel_]->LSR & (1 << 0));
   11cea:	7a1b      	ldrb	r3, [r3, #8]
   11cec:	461a      	mov	r2, r3
   11cee:	4b0b      	ldr	r3, [pc, #44]	; (11d1c <Uart::Receive(unsigned long)::{lambda()#1}::operator()() const+0x48>)
   11cf0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   11cf4:	7d1b      	ldrb	r3, [r3, #20]
   11cf6:	b2db      	uxtb	r3, r3
   11cf8:	f003 0301 	and.w	r3, r3, #1
   11cfc:	2b00      	cmp	r3, #0
   11cfe:	bf14      	ite	ne
   11d00:	2301      	movne	r3, #1
   11d02:	2300      	moveq	r3, #0
   11d04:	b2dc      	uxtb	r4, r3
   11d06:	462b      	mov	r3, r5
   11d08:	4619      	mov	r1, r3
   11d0a:	4803      	ldr	r0, [pc, #12]	; (11d18 <Uart::Receive(unsigned long)::{lambda()#1}::operator()() const+0x44>)
   11d0c:	f000 fffc 	bl	12d08 <__cyg_profile_func_exit>
   11d10:	4623      	mov	r3, r4
    };
   11d12:	4618      	mov	r0, r3
   11d14:	b003      	add	sp, #12
   11d16:	bd30      	pop	{r4, r5, pc}
   11d18:	00011cd5 	.word	0x00011cd5
   11d1c:	10000024 	.word	0x10000024

00011d20 <Uart::Receive(unsigned long)>:
  uint8_t Receive([[maybe_unused]] uint32_t timeout = 0x7FFFFFFF) override
   11d20:	e92d 4830 	stmdb	sp!, {r4, r5, fp, lr}
   11d24:	b08c      	sub	sp, #48	; 0x30
   11d26:	4675      	mov	r5, lr
   11d28:	9001      	str	r0, [sp, #4]
   11d2a:	9100      	str	r1, [sp, #0]
   11d2c:	462b      	mov	r3, r5
   11d2e:	4619      	mov	r1, r3
   11d30:	4836      	ldr	r0, [pc, #216]	; (11e0c <Uart::Receive(unsigned long)+0xec>)
   11d32:	f000 ffd5 	bl	12ce0 <__cyg_profile_func_enter>
    uint8_t receiver   = '\xFF';
   11d36:	23ff      	movs	r3, #255	; 0xff
   11d38:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
    };
   11d3c:	9b01      	ldr	r3, [sp, #4]
   11d3e:	9304      	str	r3, [sp, #16]

    Status status = Wait(timeout, byte_recieved);
   11d40:	9b00      	ldr	r3, [sp, #0]
   11d42:	f04f 0400 	mov.w	r4, #0
   11d46:	e9cd 3408 	strd	r3, r4, [sp, #32]
   11d4a:	9b04      	ldr	r3, [sp, #16]
   11d4c:	9303      	str	r3, [sp, #12]
   11d4e:	462b      	mov	r3, r5
   11d50:	4619      	mov	r1, r3
   11d52:	482f      	ldr	r0, [pc, #188]	; (11e10 <Uart::Receive(unsigned long)+0xf0>)
   11d54:	f000 ffc4 	bl	12ce0 <__cyg_profile_func_enter>
  uint64_t timeout_time = 0;
   11d58:	f04f 0300 	mov.w	r3, #0
   11d5c:	f04f 0400 	mov.w	r4, #0
   11d60:	e9cd 3406 	strd	r3, r4, [sp, #24]
  if (timeout == kMaxWait)
   11d64:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   11d68:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
   11d6c:	bf08      	it	eq
   11d6e:	f1b3 3fff 	cmpeq.w	r3, #4294967295	; 0xffffffff
   11d72:	d106      	bne.n	11d82 <Uart::Receive(unsigned long)+0x62>
    timeout_time = kMaxWait;
   11d74:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   11d78:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   11d7c:	e9cd 3406 	strd	r3, r4, [sp, #24]
   11d80:	e00b      	b.n	11d9a <Uart::Receive(unsigned long)+0x7a>
    timeout_time = Milliseconds() + timeout;
   11d82:	f7fe fdfd 	bl	10980 <Milliseconds()>
   11d86:	460a      	mov	r2, r1
   11d88:	4601      	mov	r1, r0
   11d8a:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   11d8e:	eb13 0b01 	adds.w	fp, r3, r1
   11d92:	eb44 0c02 	adc.w	ip, r4, r2
   11d96:	e9cd bc06 	strd	fp, ip, [sp, #24]
  Status status = Status::kTimedOut;
   11d9a:	2301      	movs	r3, #1
   11d9c:	9305      	str	r3, [sp, #20]
  while (Milliseconds() < timeout_time)
   11d9e:	f7fe fdef 	bl	10980 <Milliseconds()>
   11da2:	460a      	mov	r2, r1
   11da4:	4601      	mov	r1, r0
   11da6:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
   11daa:	42a2      	cmp	r2, r4
   11dac:	bf08      	it	eq
   11dae:	4299      	cmpeq	r1, r3
   11db0:	bf34      	ite	cc
   11db2:	2301      	movcc	r3, #1
   11db4:	2300      	movcs	r3, #0
   11db6:	b2db      	uxtb	r3, r3
   11db8:	2b00      	cmp	r3, #0
   11dba:	d008      	beq.n	11dce <Uart::Receive(unsigned long)+0xae>
    if (is_done())
   11dbc:	ab03      	add	r3, sp, #12
   11dbe:	4618      	mov	r0, r3
   11dc0:	f7ff ff88 	bl	11cd4 <Uart::Receive(unsigned long)::{lambda()#1}::operator()() const>
   11dc4:	4603      	mov	r3, r0
   11dc6:	2b00      	cmp	r3, #0
   11dc8:	d0e9      	beq.n	11d9e <Uart::Receive(unsigned long)+0x7e>
      status = Status::kSuccess;
   11dca:	2300      	movs	r3, #0
   11dcc:	9305      	str	r3, [sp, #20]
      break;
    }
  }
  return status;
   11dce:	9c05      	ldr	r4, [sp, #20]
   11dd0:	462b      	mov	r3, r5
   11dd2:	4619      	mov	r1, r3
   11dd4:	480e      	ldr	r0, [pc, #56]	; (11e10 <Uart::Receive(unsigned long)+0xf0>)
   11dd6:	f000 ff97 	bl	12d08 <__cyg_profile_func_exit>
   11dda:	940a      	str	r4, [sp, #40]	; 0x28

    if (status == Status::kSuccess)
   11ddc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   11dde:	2b00      	cmp	r3, #0
   11de0:	d108      	bne.n	11df4 <Uart::Receive(unsigned long)+0xd4>
    {
      receiver = static_cast<uint8_t>(uart[channel_]->RBR);
   11de2:	9b01      	ldr	r3, [sp, #4]
   11de4:	7a1b      	ldrb	r3, [r3, #8]
   11de6:	461a      	mov	r2, r3
   11de8:	4b0a      	ldr	r3, [pc, #40]	; (11e14 <Uart::Receive(unsigned long)+0xf4>)
   11dea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   11dee:	781b      	ldrb	r3, [r3, #0]
   11df0:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
    }
    return receiver;
   11df4:	f89d 402f 	ldrb.w	r4, [sp, #47]	; 0x2f
   11df8:	462b      	mov	r3, r5
   11dfa:	4619      	mov	r1, r3
   11dfc:	4803      	ldr	r0, [pc, #12]	; (11e0c <Uart::Receive(unsigned long)+0xec>)
   11dfe:	f000 ff83 	bl	12d08 <__cyg_profile_func_exit>
   11e02:	4623      	mov	r3, r4
  }
   11e04:	4618      	mov	r0, r3
   11e06:	b00c      	add	sp, #48	; 0x30
   11e08:	e8bd 8830 	ldmia.w	sp!, {r4, r5, fp, pc}
   11e0c:	00011d21 	.word	0x00011d21
   11e10:	00012591 	.word	0x00012591
   11e14:	10000024 	.word	0x10000024

00011e18 <Uart::FindClosestFractional(float)>:

 private:
  UartCalibration_t FindClosestFractional(float decimal)
   11e18:	b510      	push	{r4, lr}
   11e1a:	b08a      	sub	sp, #40	; 0x28
   11e1c:	4674      	mov	r4, lr
   11e1e:	9003      	str	r0, [sp, #12]
   11e20:	9102      	str	r1, [sp, #8]
   11e22:	ed8d 0a01 	vstr	s0, [sp, #4]
   11e26:	4623      	mov	r3, r4
   11e28:	4619      	mov	r1, r3
   11e2a:	4838      	ldr	r0, [pc, #224]	; (11f0c <Uart::FindClosestFractional(float)+0xf4>)
   11e2c:	f000 ff58 	bl	12ce0 <__cyg_profile_func_enter>
  {
    UartCalibration_t result;
   11e30:	9b03      	ldr	r3, [sp, #12]
   11e32:	2200      	movs	r2, #0
   11e34:	601a      	str	r2, [r3, #0]
   11e36:	9b03      	ldr	r3, [sp, #12]
   11e38:	2200      	movs	r2, #0
   11e3a:	605a      	str	r2, [r3, #4]
   11e3c:	9b03      	ldr	r3, [sp, #12]
   11e3e:	2201      	movs	r2, #1
   11e40:	609a      	str	r2, [r3, #8]
    bool finished = false;
   11e42:	2300      	movs	r3, #0
   11e44:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    for (int div = 0; div < 15 && !finished; div++)
   11e48:	2300      	movs	r3, #0
   11e4a:	9308      	str	r3, [sp, #32]
   11e4c:	9b08      	ldr	r3, [sp, #32]
   11e4e:	2b0e      	cmp	r3, #14
   11e50:	dc52      	bgt.n	11ef8 <Uart::FindClosestFractional(float)+0xe0>
   11e52:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   11e56:	2b00      	cmp	r3, #0
   11e58:	d14e      	bne.n	11ef8 <Uart::FindClosestFractional(float)+0xe0>
    {
      for (int mul = div + 1; mul < 15 && !finished; mul++)
   11e5a:	9b08      	ldr	r3, [sp, #32]
   11e5c:	3301      	adds	r3, #1
   11e5e:	9307      	str	r3, [sp, #28]
   11e60:	9b07      	ldr	r3, [sp, #28]
   11e62:	2b0e      	cmp	r3, #14
   11e64:	dc44      	bgt.n	11ef0 <Uart::FindClosestFractional(float)+0xd8>
   11e66:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   11e6a:	2b00      	cmp	r3, #0
   11e6c:	d140      	bne.n	11ef0 <Uart::FindClosestFractional(float)+0xd8>
      {
        float divf         = static_cast<float>(div);
   11e6e:	9b08      	ldr	r3, [sp, #32]
   11e70:	ee07 3a90 	vmov	s15, r3
   11e74:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   11e78:	edcd 7a06 	vstr	s15, [sp, #24]
        float mulf         = static_cast<float>(mul);
   11e7c:	9b07      	ldr	r3, [sp, #28]
   11e7e:	ee07 3a90 	vmov	s15, r3
   11e82:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   11e86:	edcd 7a05 	vstr	s15, [sp, #20]
        float test_decimal = 1.0f + divf / mulf;
   11e8a:	eddd 6a06 	vldr	s13, [sp, #24]
   11e8e:	ed9d 7a05 	vldr	s14, [sp, #20]
   11e92:	eec6 7a87 	vdiv.f32	s15, s13, s14
   11e96:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
   11e9a:	ee77 7a87 	vadd.f32	s15, s15, s14
   11e9e:	edcd 7a04 	vstr	s15, [sp, #16]
        if (decimal <= test_decimal + kThreshold &&
   11ea2:	eddd 7a04 	vldr	s15, [sp, #16]
   11ea6:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 11f10 <Uart::FindClosestFractional(float)+0xf8>
   11eaa:	ee77 7a87 	vadd.f32	s15, s15, s14
   11eae:	ed9d 7a01 	vldr	s14, [sp, #4]
   11eb2:	eeb4 7ae7 	vcmpe.f32	s14, s15
   11eb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   11eba:	d815      	bhi.n	11ee8 <Uart::FindClosestFractional(float)+0xd0>
            decimal >= test_decimal - kThreshold)
   11ebc:	eddd 7a04 	vldr	s15, [sp, #16]
   11ec0:	ed9f 7a13 	vldr	s14, [pc, #76]	; 11f10 <Uart::FindClosestFractional(float)+0xf8>
   11ec4:	ee77 7ac7 	vsub.f32	s15, s15, s14
        if (decimal <= test_decimal + kThreshold &&
   11ec8:	ed9d 7a01 	vldr	s14, [sp, #4]
   11ecc:	eeb4 7ae7 	vcmpe.f32	s14, s15
   11ed0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   11ed4:	db08      	blt.n	11ee8 <Uart::FindClosestFractional(float)+0xd0>
        {
          result.divide_add = div;
   11ed6:	9a08      	ldr	r2, [sp, #32]
   11ed8:	9b03      	ldr	r3, [sp, #12]
   11eda:	605a      	str	r2, [r3, #4]
          result.multiply   = mul;
   11edc:	9a07      	ldr	r2, [sp, #28]
   11ede:	9b03      	ldr	r3, [sp, #12]
   11ee0:	609a      	str	r2, [r3, #8]
          finished          = true;
   11ee2:	2301      	movs	r3, #1
   11ee4:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
      for (int mul = div + 1; mul < 15 && !finished; mul++)
   11ee8:	9b07      	ldr	r3, [sp, #28]
   11eea:	3301      	adds	r3, #1
   11eec:	9307      	str	r3, [sp, #28]
   11eee:	e7b7      	b.n	11e60 <Uart::FindClosestFractional(float)+0x48>
    for (int div = 0; div < 15 && !finished; div++)
   11ef0:	9b08      	ldr	r3, [sp, #32]
   11ef2:	3301      	adds	r3, #1
   11ef4:	9308      	str	r3, [sp, #32]
   11ef6:	e7a9      	b.n	11e4c <Uart::FindClosestFractional(float)+0x34>
        }
      }
    }
    return result;
   11ef8:	bf00      	nop
   11efa:	4623      	mov	r3, r4
   11efc:	4619      	mov	r1, r3
   11efe:	4803      	ldr	r0, [pc, #12]	; (11f0c <Uart::FindClosestFractional(float)+0xf4>)
   11f00:	f000 ff02 	bl	12d08 <__cyg_profile_func_exit>
   11f04:	bf00      	nop
  }
   11f06:	9803      	ldr	r0, [sp, #12]
   11f08:	b00a      	add	sp, #40	; 0x28
   11f0a:	bd10      	pop	{r4, pc}
   11f0c:	00011e19 	.word	0x00011e19
   11f10:	3d4ccccd 	.word	0x3d4ccccd

00011f14 <Uart::DividerEstimate(float, float)>:

  float DividerEstimate(float baud_rate, float fraction_estimate = 1)
   11f14:	b510      	push	{r4, lr}
   11f16:	ed2d 8b02 	vpush	{d8}
   11f1a:	b086      	sub	sp, #24
   11f1c:	4674      	mov	r4, lr
   11f1e:	9003      	str	r0, [sp, #12]
   11f20:	ed8d 0a02 	vstr	s0, [sp, #8]
   11f24:	edcd 0a01 	vstr	s1, [sp, #4]
   11f28:	4623      	mov	r3, r4
   11f2a:	4619      	mov	r1, r3
   11f2c:	4815      	ldr	r0, [pc, #84]	; (11f84 <Uart::DividerEstimate(float, float)+0x70>)
   11f2e:	f000 fed7 	bl	12ce0 <__cyg_profile_func_enter>
  {
    float clock_frequency = static_cast<float>(GetPeripheralFrequency());
   11f32:	9b03      	ldr	r3, [sp, #12]
   11f34:	1d1a      	adds	r2, r3, #4
   11f36:	9b03      	ldr	r3, [sp, #12]
   11f38:	685b      	ldr	r3, [r3, #4]
   11f3a:	3310      	adds	r3, #16
   11f3c:	681b      	ldr	r3, [r3, #0]
   11f3e:	4610      	mov	r0, r2
   11f40:	4798      	blx	r3
   11f42:	ee07 0a90 	vmov	s15, r0
   11f46:	eef8 7a67 	vcvt.f32.u32	s15, s15
   11f4a:	edcd 7a05 	vstr	s15, [sp, #20]
    return clock_frequency / (16.0f * baud_rate * fraction_estimate);
   11f4e:	eddd 7a02 	vldr	s15, [sp, #8]
   11f52:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
   11f56:	ee27 7a87 	vmul.f32	s14, s15, s14
   11f5a:	eddd 7a01 	vldr	s15, [sp, #4]
   11f5e:	ee67 7a27 	vmul.f32	s15, s14, s15
   11f62:	ed9d 7a05 	vldr	s14, [sp, #20]
   11f66:	ee87 8a27 	vdiv.f32	s16, s14, s15
   11f6a:	4623      	mov	r3, r4
   11f6c:	4619      	mov	r1, r3
   11f6e:	4805      	ldr	r0, [pc, #20]	; (11f84 <Uart::DividerEstimate(float, float)+0x70>)
   11f70:	f000 feca 	bl	12d08 <__cyg_profile_func_exit>
   11f74:	eef0 7a48 	vmov.f32	s15, s16
  }
   11f78:	eeb0 0a67 	vmov.f32	s0, s15
   11f7c:	b006      	add	sp, #24
   11f7e:	ecbd 8b02 	vpop	{d8}
   11f82:	bd10      	pop	{r4, pc}
   11f84:	00011f15 	.word	0x00011f15

00011f88 <Uart::FractionalEstimate(float, float)>:

  float FractionalEstimate(float baud_rate, float divider)
   11f88:	b510      	push	{r4, lr}
   11f8a:	ed2d 8b02 	vpush	{d8}
   11f8e:	b086      	sub	sp, #24
   11f90:	4674      	mov	r4, lr
   11f92:	9003      	str	r0, [sp, #12]
   11f94:	ed8d 0a02 	vstr	s0, [sp, #8]
   11f98:	edcd 0a01 	vstr	s1, [sp, #4]
   11f9c:	4623      	mov	r3, r4
   11f9e:	4619      	mov	r1, r3
   11fa0:	4815      	ldr	r0, [pc, #84]	; (11ff8 <Uart::FractionalEstimate(float, float)+0x70>)
   11fa2:	f000 fe9d 	bl	12ce0 <__cyg_profile_func_enter>
  {
    float clock_frequency = static_cast<float>(GetPeripheralFrequency());
   11fa6:	9b03      	ldr	r3, [sp, #12]
   11fa8:	1d1a      	adds	r2, r3, #4
   11faa:	9b03      	ldr	r3, [sp, #12]
   11fac:	685b      	ldr	r3, [r3, #4]
   11fae:	3310      	adds	r3, #16
   11fb0:	681b      	ldr	r3, [r3, #0]
   11fb2:	4610      	mov	r0, r2
   11fb4:	4798      	blx	r3
   11fb6:	ee07 0a90 	vmov	s15, r0
   11fba:	eef8 7a67 	vcvt.f32.u32	s15, s15
   11fbe:	edcd 7a05 	vstr	s15, [sp, #20]
    return clock_frequency / (16.0f * baud_rate * divider);
   11fc2:	eddd 7a02 	vldr	s15, [sp, #8]
   11fc6:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
   11fca:	ee27 7a87 	vmul.f32	s14, s15, s14
   11fce:	eddd 7a01 	vldr	s15, [sp, #4]
   11fd2:	ee67 7a27 	vmul.f32	s15, s14, s15
   11fd6:	ed9d 7a05 	vldr	s14, [sp, #20]
   11fda:	ee87 8a27 	vdiv.f32	s16, s14, s15
   11fde:	4623      	mov	r3, r4
   11fe0:	4619      	mov	r1, r3
   11fe2:	4805      	ldr	r0, [pc, #20]	; (11ff8 <Uart::FractionalEstimate(float, float)+0x70>)
   11fe4:	f000 fe90 	bl	12d08 <__cyg_profile_func_exit>
   11fe8:	eef0 7a48 	vmov.f32	s15, s16
  }
   11fec:	eeb0 0a67 	vmov.f32	s0, s15
   11ff0:	b006      	add	sp, #24
   11ff2:	ecbd 8b02 	vpop	{d8}
   11ff6:	bd10      	pop	{r4, pc}
   11ff8:	00011f89 	.word	0x00011f89

00011ffc <Uart::IsDecmial(float)>:

  bool IsDecmial(float value)
   11ffc:	b530      	push	{r4, r5, lr}
   11ffe:	b087      	sub	sp, #28
   12000:	4675      	mov	r5, lr
   12002:	9001      	str	r0, [sp, #4]
   12004:	ed8d 0a00 	vstr	s0, [sp]
   12008:	462b      	mov	r3, r5
   1200a:	4619      	mov	r1, r3
   1200c:	4819      	ldr	r0, [pc, #100]	; (12074 <Uart::IsDecmial(float)+0x78>)
   1200e:	f000 fe67 	bl	12ce0 <__cyg_profile_func_enter>
  {
    bool result         = false;
   12012:	2300      	movs	r3, #0
   12014:	f88d 3017 	strb.w	r3, [sp, #23]
    float rounded_value = roundf(value);
   12018:	ed9d 0a00 	vldr	s0, [sp]
   1201c:	f004 ff36 	bl	16e8c <roundf>
   12020:	ed8d 0a04 	vstr	s0, [sp, #16]
    float error         = value - rounded_value;
   12024:	ed9d 7a00 	vldr	s14, [sp]
   12028:	eddd 7a04 	vldr	s15, [sp, #16]
   1202c:	ee77 7a67 	vsub.f32	s15, s14, s15
   12030:	edcd 7a03 	vstr	s15, [sp, #12]
    if (-kThreshold <= error && error <= kThreshold)
   12034:	eddd 7a03 	vldr	s15, [sp, #12]
   12038:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 12078 <Uart::IsDecmial(float)+0x7c>
   1203c:	eef4 7ac7 	vcmpe.f32	s15, s14
   12040:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   12044:	db0b      	blt.n	1205e <Uart::IsDecmial(float)+0x62>
   12046:	eddd 7a03 	vldr	s15, [sp, #12]
   1204a:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 1207c <Uart::IsDecmial(float)+0x80>
   1204e:	eef4 7ac7 	vcmpe.f32	s15, s14
   12052:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   12056:	d802      	bhi.n	1205e <Uart::IsDecmial(float)+0x62>
    {
      result = true;
   12058:	2301      	movs	r3, #1
   1205a:	f88d 3017 	strb.w	r3, [sp, #23]
    }
    return result;
   1205e:	f89d 4017 	ldrb.w	r4, [sp, #23]
   12062:	462b      	mov	r3, r5
   12064:	4619      	mov	r1, r3
   12066:	4803      	ldr	r0, [pc, #12]	; (12074 <Uart::IsDecmial(float)+0x78>)
   12068:	f000 fe4e 	bl	12d08 <__cyg_profile_func_exit>
   1206c:	4623      	mov	r3, r4
  }
   1206e:	4618      	mov	r0, r3
   12070:	b007      	add	sp, #28
   12072:	bd30      	pop	{r4, r5, pc}
   12074:	00011ffd 	.word	0x00011ffd
   12078:	bd4ccccd 	.word	0xbd4ccccd
   1207c:	3d4ccccd 	.word	0x3d4ccccd

00012080 <Uart::GenerateUartCalibration(float)>:

  UartCalibration_t GenerateUartCalibration(float baud_rate)
   12080:	b530      	push	{r4, r5, lr}
   12082:	b08f      	sub	sp, #60	; 0x3c
   12084:	4675      	mov	r5, lr
   12086:	9007      	str	r0, [sp, #28]
   12088:	9106      	str	r1, [sp, #24]
   1208a:	ed8d 0a05 	vstr	s0, [sp, #20]
   1208e:	462b      	mov	r3, r5
   12090:	4619      	mov	r1, r3
   12092:	4874      	ldr	r0, [pc, #464]	; (12264 <Uart::GenerateUartCalibration(float)+0x1e4>)
   12094:	f000 fe24 	bl	12ce0 <__cyg_profile_func_enter>
  {
    States state = States::kCalculateIntegerDivideLatch;
   12098:	2300      	movs	r3, #0
   1209a:	930d      	str	r3, [sp, #52]	; 0x34
    UartCalibration_t uart_calibration;
   1209c:	9b07      	ldr	r3, [sp, #28]
   1209e:	2200      	movs	r2, #0
   120a0:	601a      	str	r2, [r3, #0]
   120a2:	9b07      	ldr	r3, [sp, #28]
   120a4:	2200      	movs	r2, #0
   120a6:	605a      	str	r2, [r3, #4]
   120a8:	9b07      	ldr	r3, [sp, #28]
   120aa:	2201      	movs	r2, #1
   120ac:	609a      	str	r2, [r3, #8]
    float divide_estimate = 0;
   120ae:	f04f 0300 	mov.w	r3, #0
   120b2:	930c      	str	r3, [sp, #48]	; 0x30
    float decimal         = 1.5;
   120b4:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
   120b8:	930b      	str	r3, [sp, #44]	; 0x2c
    float div             = 1;
   120ba:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
   120be:	930a      	str	r3, [sp, #40]	; 0x28
    float mul             = 2;
   120c0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   120c4:	9309      	str	r3, [sp, #36]	; 0x24
    while (state != States::kDone)
   120c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   120c8:	2b04      	cmp	r3, #4
   120ca:	f000 80c1 	beq.w	12250 <Uart::GenerateUartCalibration(float)+0x1d0>
    {
      switch (state)
   120ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   120d0:	2b04      	cmp	r3, #4
   120d2:	f200 80bb 	bhi.w	1224c <Uart::GenerateUartCalibration(float)+0x1cc>
   120d6:	a201      	add	r2, pc, #4	; (adr r2, 120dc <Uart::GenerateUartCalibration(float)+0x5c>)
   120d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   120dc:	000120f1 	.word	0x000120f1
   120e0:	0001214d 	.word	0x0001214d
   120e4:	000121ad 	.word	0x000121ad
   120e8:	0001221d 	.word	0x0001221d
   120ec:	0001224d 	.word	0x0001224d
      {
        case States::kCalculateIntegerDivideLatch:
        {
          divide_estimate = DividerEstimate(baud_rate);
   120f0:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
   120f4:	ed9d 0a05 	vldr	s0, [sp, #20]
   120f8:	9806      	ldr	r0, [sp, #24]
   120fa:	f7ff ff0b 	bl	11f14 <Uart::DividerEstimate(float, float)>
   120fe:	ed8d 0a0c 	vstr	s0, [sp, #48]	; 0x30
          if (divide_estimate < 1.0f)
   12102:	eddd 7a0c 	vldr	s15, [sp, #48]	; 0x30
   12106:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
   1210a:	eef4 7ac7 	vcmpe.f32	s15, s14
   1210e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   12112:	d505      	bpl.n	12120 <Uart::GenerateUartCalibration(float)+0xa0>
          {
            uart_calibration.divide_latch = 0;
   12114:	9b07      	ldr	r3, [sp, #28]
   12116:	2200      	movs	r2, #0
   12118:	601a      	str	r2, [r3, #0]
            state                         = States::kDone;
   1211a:	2304      	movs	r3, #4
   1211c:	930d      	str	r3, [sp, #52]	; 0x34
          }
          else
          {
            state = States::kCalculateDivideLatchWithDecimal;
          }
          break;
   1211e:	e096      	b.n	1224e <Uart::GenerateUartCalibration(float)+0x1ce>
          else if (IsDecmial(divide_estimate))
   12120:	ed9d 0a0c 	vldr	s0, [sp, #48]	; 0x30
   12124:	9806      	ldr	r0, [sp, #24]
   12126:	f7ff ff69 	bl	11ffc <Uart::IsDecmial(float)>
   1212a:	4603      	mov	r3, r0
   1212c:	2b00      	cmp	r3, #0
   1212e:	d00a      	beq.n	12146 <Uart::GenerateUartCalibration(float)+0xc6>
                static_cast<uint32_t>(divide_estimate);
   12130:	eddd 7a0c 	vldr	s15, [sp, #48]	; 0x30
   12134:	eefc 7ae7 	vcvt.u32.f32	s15, s15
   12138:	ee17 2a90 	vmov	r2, s15
            uart_calibration.divide_latch =
   1213c:	9b07      	ldr	r3, [sp, #28]
   1213e:	601a      	str	r2, [r3, #0]
            state = States::kDone;
   12140:	2304      	movs	r3, #4
   12142:	930d      	str	r3, [sp, #52]	; 0x34
          break;
   12144:	e083      	b.n	1224e <Uart::GenerateUartCalibration(float)+0x1ce>
            state = States::kCalculateDivideLatchWithDecimal;
   12146:	2301      	movs	r3, #1
   12148:	930d      	str	r3, [sp, #52]	; 0x34
          break;
   1214a:	e080      	b.n	1224e <Uart::GenerateUartCalibration(float)+0x1ce>
        }
        case States::kCalculateDivideLatchWithDecimal:
        {
          divide_estimate = roundf(DividerEstimate(baud_rate, decimal));
   1214c:	eddd 0a0b 	vldr	s1, [sp, #44]	; 0x2c
   12150:	ed9d 0a05 	vldr	s0, [sp, #20]
   12154:	9806      	ldr	r0, [sp, #24]
   12156:	f7ff fedd 	bl	11f14 <Uart::DividerEstimate(float, float)>
   1215a:	eef0 7a40 	vmov.f32	s15, s0
   1215e:	eeb0 0a67 	vmov.f32	s0, s15
   12162:	f004 fe93 	bl	16e8c <roundf>
   12166:	ed8d 0a0c 	vstr	s0, [sp, #48]	; 0x30
          decimal         = FractionalEstimate(baud_rate, divide_estimate);
   1216a:	eddd 0a0c 	vldr	s1, [sp, #48]	; 0x30
   1216e:	ed9d 0a05 	vldr	s0, [sp, #20]
   12172:	9806      	ldr	r0, [sp, #24]
   12174:	f7ff ff08 	bl	11f88 <Uart::FractionalEstimate(float, float)>
   12178:	ed8d 0a0b 	vstr	s0, [sp, #44]	; 0x2c
          if (1.1f <= decimal && decimal <= 1.9f)
   1217c:	eddd 7a0b 	vldr	s15, [sp, #44]	; 0x2c
   12180:	ed9f 7a39 	vldr	s14, [pc, #228]	; 12268 <Uart::GenerateUartCalibration(float)+0x1e8>
   12184:	eef4 7ac7 	vcmpe.f32	s15, s14
   12188:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1218c:	db0b      	blt.n	121a6 <Uart::GenerateUartCalibration(float)+0x126>
   1218e:	eddd 7a0b 	vldr	s15, [sp, #44]	; 0x2c
   12192:	ed9f 7a36 	vldr	s14, [pc, #216]	; 1226c <Uart::GenerateUartCalibration(float)+0x1ec>
   12196:	eef4 7ac7 	vcmpe.f32	s15, s14
   1219a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1219e:	d802      	bhi.n	121a6 <Uart::GenerateUartCalibration(float)+0x126>
          {
            state = States::kGenerateFractionFromDecimal;
   121a0:	2303      	movs	r3, #3
   121a2:	930d      	str	r3, [sp, #52]	; 0x34
          }
          else
          {
            state = States::kDecimalFailedGenerateNewDecimal;
          }
          break;
   121a4:	e053      	b.n	1224e <Uart::GenerateUartCalibration(float)+0x1ce>
            state = States::kDecimalFailedGenerateNewDecimal;
   121a6:	2302      	movs	r3, #2
   121a8:	930d      	str	r3, [sp, #52]	; 0x34
          break;
   121aa:	e050      	b.n	1224e <Uart::GenerateUartCalibration(float)+0x1ce>
        }
        case States::kDecimalFailedGenerateNewDecimal:
        {
          mul += 1;
   121ac:	eddd 7a09 	vldr	s15, [sp, #36]	; 0x24
   121b0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
   121b4:	ee77 7a87 	vadd.f32	s15, s15, s14
   121b8:	edcd 7a09 	vstr	s15, [sp, #36]	; 0x24

          if (div > 15)
   121bc:	eddd 7a0a 	vldr	s15, [sp, #40]	; 0x28
   121c0:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
   121c4:	eef4 7ac7 	vcmpe.f32	s15, s14
   121c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   121cc:	dd02      	ble.n	121d4 <Uart::GenerateUartCalibration(float)+0x154>
          {
            state = States::kDone;
   121ce:	2304      	movs	r3, #4
   121d0:	930d      	str	r3, [sp, #52]	; 0x34
            break;
   121d2:	e03c      	b.n	1224e <Uart::GenerateUartCalibration(float)+0x1ce>
          }
          else if (mul > 15)
   121d4:	eddd 7a09 	vldr	s15, [sp, #36]	; 0x24
   121d8:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
   121dc:	eef4 7ac7 	vcmpe.f32	s15, s14
   121e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   121e4:	dd0f      	ble.n	12206 <Uart::GenerateUartCalibration(float)+0x186>
          {
            div += 1;
   121e6:	eddd 7a0a 	vldr	s15, [sp, #40]	; 0x28
   121ea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
   121ee:	ee77 7a87 	vadd.f32	s15, s15, s14
   121f2:	edcd 7a0a 	vstr	s15, [sp, #40]	; 0x28
            mul = div + 1;
   121f6:	eddd 7a0a 	vldr	s15, [sp, #40]	; 0x28
   121fa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
   121fe:	ee77 7a87 	vadd.f32	s15, s15, s14
   12202:	edcd 7a09 	vstr	s15, [sp, #36]	; 0x24
          }
          decimal = div / mul;
   12206:	eddd 6a0a 	vldr	s13, [sp, #40]	; 0x28
   1220a:	ed9d 7a09 	vldr	s14, [sp, #36]	; 0x24
   1220e:	eec6 7a87 	vdiv.f32	s15, s13, s14
   12212:	edcd 7a0b 	vstr	s15, [sp, #44]	; 0x2c
          state   = States::kCalculateDivideLatchWithDecimal;
   12216:	2301      	movs	r3, #1
   12218:	930d      	str	r3, [sp, #52]	; 0x34
          break;
   1221a:	e018      	b.n	1224e <Uart::GenerateUartCalibration(float)+0x1ce>
        }
        case States::kGenerateFractionFromDecimal:
        {
          uart_calibration = FindClosestFractional(decimal);
   1221c:	9c07      	ldr	r4, [sp, #28]
   1221e:	466b      	mov	r3, sp
   12220:	ed9d 0a0b 	vldr	s0, [sp, #44]	; 0x2c
   12224:	9906      	ldr	r1, [sp, #24]
   12226:	4618      	mov	r0, r3
   12228:	f7ff fdf6 	bl	11e18 <Uart::FindClosestFractional(float)>
   1222c:	466b      	mov	r3, sp
   1222e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   12232:	e884 0007 	stmia.w	r4, {r0, r1, r2}
          uart_calibration.divide_latch =
              static_cast<uint32_t>(divide_estimate);
   12236:	eddd 7a0c 	vldr	s15, [sp, #48]	; 0x30
   1223a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
   1223e:	ee17 2a90 	vmov	r2, s15
          uart_calibration.divide_latch =
   12242:	9b07      	ldr	r3, [sp, #28]
   12244:	601a      	str	r2, [r3, #0]
          state = States::kDone;
   12246:	2304      	movs	r3, #4
   12248:	930d      	str	r3, [sp, #52]	; 0x34
          break;
   1224a:	e000      	b.n	1224e <Uart::GenerateUartCalibration(float)+0x1ce>
        }
        case States::kDone: { break;
        }
        default: { break;
   1224c:	bf00      	nop
    while (state != States::kDone)
   1224e:	e73a      	b.n	120c6 <Uart::GenerateUartCalibration(float)+0x46>
        }
      }
    }
    return uart_calibration;
   12250:	bf00      	nop
   12252:	462b      	mov	r3, r5
   12254:	4619      	mov	r1, r3
   12256:	4803      	ldr	r0, [pc, #12]	; (12264 <Uart::GenerateUartCalibration(float)+0x1e4>)
   12258:	f000 fd56 	bl	12d08 <__cyg_profile_func_exit>
   1225c:	bf00      	nop
  }
   1225e:	9807      	ldr	r0, [sp, #28]
   12260:	b00f      	add	sp, #60	; 0x3c
   12262:	bd30      	pop	{r4, r5, pc}
   12264:	00012081 	.word	0x00012081
   12268:	3f8ccccd 	.word	0x3f8ccccd
   1226c:	3ff33333 	.word	0x3ff33333

00012270 <(anonymous namespace)::Lpc40xxUptime()>:
{
   12270:	b538      	push	{r3, r4, r5, lr}
   12272:	4675      	mov	r5, lr
   12274:	462b      	mov	r3, r5
   12276:	4619      	mov	r1, r3
   12278:	480a      	ldr	r0, [pc, #40]	; (122a4 <(anonymous namespace)::Lpc40xxUptime()+0x34>)
   1227a:	f000 fd31 	bl	12ce0 <__cyg_profile_func_enter>
    return tim_register[channel_]->TC;
   1227e:	4b0a      	ldr	r3, [pc, #40]	; (122a8 <(anonymous namespace)::Lpc40xxUptime()+0x38>)
   12280:	7a1b      	ldrb	r3, [r3, #8]
   12282:	461a      	mov	r2, r3
   12284:	4b09      	ldr	r3, [pc, #36]	; (122ac <(anonymous namespace)::Lpc40xxUptime()+0x3c>)
   12286:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   1228a:	689c      	ldr	r4, [r3, #8]
   1228c:	462b      	mov	r3, r5
   1228e:	4619      	mov	r1, r3
   12290:	4804      	ldr	r0, [pc, #16]	; (122a4 <(anonymous namespace)::Lpc40xxUptime()+0x34>)
   12292:	f000 fd39 	bl	12d08 <__cyg_profile_func_exit>
  return timer0.GetTimer();
   12296:	4623      	mov	r3, r4
   12298:	f04f 0400 	mov.w	r4, #0
}
   1229c:	4618      	mov	r0, r3
   1229e:	4621      	mov	r1, r4
   122a0:	bd38      	pop	{r3, r4, r5, pc}
   122a2:	bf00      	nop
   122a4:	000119b5 	.word	0x000119b5
   122a8:	10000094 	.word	0x10000094
   122ac:	10000014 	.word	0x10000014

000122b0 <UptimeRTOS>:
{
   122b0:	b538      	push	{r3, r4, r5, lr}
   122b2:	4675      	mov	r5, lr
   122b4:	462b      	mov	r3, r5
   122b6:	4619      	mov	r1, r3
   122b8:	480a      	ldr	r0, [pc, #40]	; (122e4 <UptimeRTOS+0x34>)
   122ba:	f000 fd11 	bl	12ce0 <__cyg_profile_func_enter>
   122be:	4b0a      	ldr	r3, [pc, #40]	; (122e8 <UptimeRTOS+0x38>)
   122c0:	7a1b      	ldrb	r3, [r3, #8]
   122c2:	461a      	mov	r2, r3
   122c4:	4b09      	ldr	r3, [pc, #36]	; (122ec <UptimeRTOS+0x3c>)
   122c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   122ca:	689c      	ldr	r4, [r3, #8]
   122cc:	462b      	mov	r3, r5
   122ce:	4619      	mov	r1, r3
   122d0:	4804      	ldr	r0, [pc, #16]	; (122e4 <UptimeRTOS+0x34>)
   122d2:	f000 fd19 	bl	12d08 <__cyg_profile_func_exit>
  return timer0.GetTimer();
   122d6:	4623      	mov	r3, r4
   122d8:	f04f 0400 	mov.w	r4, #0
}
   122dc:	4618      	mov	r0, r3
   122de:	4621      	mov	r1, r4
   122e0:	bd38      	pop	{r3, r4, r5, pc}
   122e2:	bf00      	nop
   122e4:	000119b5 	.word	0x000119b5
   122e8:	10000094 	.word	0x10000094
   122ec:	10000014 	.word	0x10000014

000122f0 <LowLevelInit()>:

void LowLevelInit()
{
   122f0:	b500      	push	{lr}
   122f2:	b083      	sub	sp, #12
  // Set the SystemTick frequency to the RTOS tick frequency
  // It is critical that this happens before you set the system_clock, since
  // The system_timer keeps the time that the system_clock uses to delay itself.
  system_timer.SetTickFrequency(config::kRtosFrequency);
   122f4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   122f8:	4822      	ldr	r0, [pc, #136]	; (12384 <LowLevelInit()+0x94>)
   122fa:	f7fe fecb 	bl	11094 <SystemTimer::SetTickFrequency(unsigned long)>
  bool timer_started_successfully = system_timer.StartTimer();
   122fe:	4821      	ldr	r0, [pc, #132]	; (12384 <LowLevelInit()+0x94>)
   12300:	f7fe fe7a 	bl	10ff8 <SystemTimer::StartTimer()>
   12304:	4603      	mov	r3, r0
   12306:	f88d 3007 	strb.w	r3, [sp, #7]
  SJ2_ASSERT_WARNING(timer_started_successfully,
   1230a:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1230e:	f083 0301 	eor.w	r3, r3, #1
   12312:	b2db      	uxtb	r3, r3
   12314:	2b00      	cmp	r3, #0
   12316:	d005      	beq.n	12324 <LowLevelInit()+0x34>
   12318:	23ad      	movs	r3, #173	; 0xad
   1231a:	4a1b      	ldr	r2, [pc, #108]	; (12388 <LowLevelInit()+0x98>)
   1231c:	491b      	ldr	r1, [pc, #108]	; (1238c <LowLevelInit()+0x9c>)
   1231e:	481c      	ldr	r0, [pc, #112]	; (12390 <LowLevelInit()+0xa0>)
   12320:	f001 ff38 	bl	14194 <printf>
                     "System Timer has FAILED to start!");
  // Set Clock Speed
  // SetClockFrequency will timeout return the offset between desire clockspeed
  // and actual clockspeed if the PLL doesn't get a frequency fix within a
  // defined timeout (see L1/system_clock.hpp:kDefaultTimeout)
  while (system_controller.SetClockFrequency(config::kSystemClockRateMhz) != 0)
   12324:	2130      	movs	r1, #48	; 0x30
   12326:	481b      	ldr	r0, [pc, #108]	; (12394 <LowLevelInit()+0xa4>)
   12328:	f7fe fb4c 	bl	109c4 <Lpc40xxSystemController::SetClockFrequency(unsigned char)>
   1232c:	4603      	mov	r3, r0
   1232e:	2b00      	cmp	r3, #0
   12330:	bf14      	ite	ne
   12332:	2301      	movne	r3, #1
   12334:	2300      	moveq	r3, #0
   12336:	b2db      	uxtb	r3, r3
   12338:	2b00      	cmp	r3, #0
   1233a:	d001      	beq.n	12340 <LowLevelInit()+0x50>
  {
    // Continually attempt to set the clock frequency to the desired until the
    // delta between desired and actual are 0.
    continue;
   1233c:	bf00      	nop
  while (system_controller.SetClockFrequency(config::kSystemClockRateMhz) != 0)
   1233e:	e7f1      	b.n	12324 <LowLevelInit()+0x34>
  }
  // Enable Peripheral Clock and set its divider to 1 meaning the clock speed
  // fed to all peripherals will be 48Mhz.
  system_controller.SetPeripheralClockDivider(1);
   12340:	2101      	movs	r1, #1
   12342:	4814      	ldr	r0, [pc, #80]	; (12394 <LowLevelInit()+0xa4>)
   12344:	f7fe fb86 	bl	10a54 <Lpc40xxSystemController::SetPeripheralClockDivider(unsigned char)>
  // Set System Timer frequency again, since the clock speed has changed since
  // the last time we ran this.
  system_timer.DisableTimer();
   12348:	f7fe fe04 	bl	10f54 <SystemTimer::DisableTimer()>
  system_timer.SetTickFrequency(config::kRtosFrequency);
   1234c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   12350:	480c      	ldr	r0, [pc, #48]	; (12384 <LowLevelInit()+0x94>)
   12352:	f7fe fe9f 	bl	11094 <SystemTimer::SetTickFrequency(unsigned long)>
  system_timer.StartTimer();
   12356:	480b      	ldr	r0, [pc, #44]	; (12384 <LowLevelInit()+0x94>)
   12358:	f7fe fe4e 	bl	10ff8 <SystemTimer::StartTimer()>
  // Set timer0 to 1 MHz (1,000,000 Hz) so that the timer increments every 1
  // micro second.
  timer0.Initialize(1'000'000);
   1235c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   12360:	4a0d      	ldr	r2, [pc, #52]	; (12398 <LowLevelInit()+0xa8>)
   12362:	490e      	ldr	r1, [pc, #56]	; (1239c <LowLevelInit()+0xac>)
   12364:	480e      	ldr	r0, [pc, #56]	; (123a0 <LowLevelInit()+0xb0>)
   12366:	f7ff f9f7 	bl	11758 <Timer::Initialize(unsigned long, void (*)(), long)>
  SetUptimeFunction(Lpc40xxUptime);
   1236a:	480e      	ldr	r0, [pc, #56]	; (123a4 <LowLevelInit()+0xb4>)
   1236c:	f7fe faf0 	bl	10950 <SetUptimeFunction(unsigned long long (*)())>
  // Set UART0 baudrate, which is required for printf and scanf to work properly
  uart0.Initialize(config::kBaudRate);
   12370:	f44f 4116 	mov.w	r1, #38400	; 0x9600
   12374:	480c      	ldr	r0, [pc, #48]	; (123a8 <LowLevelInit()+0xb8>)
   12376:	f7ff fba1 	bl	11abc <Uart::Initialize(unsigned long)>
}
   1237a:	bf00      	nop
   1237c:	b003      	add	sp, #12
   1237e:	f85d fb04 	ldr.w	pc, [sp], #4
   12382:	bf00      	nop
   12384:	10000088 	.word	0x10000088
   12388:	00017c84 	.word	0x00017c84
   1238c:	000179ec 	.word	0x000179ec
   12390:	000178cc 	.word	0x000178cc
   12394:	10000090 	.word	0x10000090
   12398:	00011739 	.word	0x00011739
   1239c:	000f4240 	.word	0x000f4240
   123a0:	10000094 	.word	0x10000094
   123a4:	00012271 	.word	0x00012271
   123a8:	10000074 	.word	0x10000074

000123ac <SystemInit>:

void SystemInit()
{
   123ac:	b508      	push	{r3, lr}
  // Transfer data section values from flash to RAM
  InitDataSection();
   123ae:	f7fd fead 	bl	1010c <InitDataSection()>
  // Clear BSS section of RAM
  // This is required because the nano implementation of the standard C/C++
  // libraries assumes that the BSS section is initialized to 0.
  InitBssSection();
   123b2:	f7fd fef3 	bl	1019c <InitBssSection()>
  // Enable FPU (F.loating P.oint U.nit)
  // System will crash if floating point operations occur without
  // Initializing the FPU.
  InitFpu();
   123b6:	f7fd ff21 	bl	101fc <InitFpu()>
  // Initialisation C++ libraries
  __libc_init_array();
   123ba:	f004 ff6f 	bl	1729c <__libc_init_array>
  // Run LowLevel System Initialization
  LowLevelInit();
   123be:	f7ff ff97 	bl	122f0 <LowLevelInit()>
}
   123c2:	bf00      	nop
   123c4:	bd08      	pop	{r3, pc}
   123c6:	Address 0x00000000000123c6 is out of bounds.


000123c8 <ResetIsr>:
// Sets up a simple runtime environment and initializes the C/C++ library.

extern "C"
{
  void ResetIsr(void)
  {
   123c8:	b580      	push	{r7, lr}
   123ca:	b084      	sub	sp, #16
   123cc:	af00      	add	r7, sp, #0
    // The Hyperload bootloader takes up stack space to execute. The Hyperload
    // bootloader function launches this ISR manually, but it never returns thus
    // it never cleans up the memory it uses. To get that memory back, we have
    // to manually move the stack pointers back to the top of stack.
    const uint32_t kTopOfStack = reinterpret_cast<intptr_t>(&StackTop);
   123ce:	4b09      	ldr	r3, [pc, #36]	; (123f4 <ResetIsr+0x2c>)
   123d0:	60fb      	str	r3, [r7, #12]
   123d2:	68fb      	ldr	r3, [r7, #12]
   123d4:	603b      	str	r3, [r7, #0]
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
   123d6:	683b      	ldr	r3, [r7, #0]
   123d8:	f383 8809 	msr	PSP, r3
   123dc:	68fb      	ldr	r3, [r7, #12]
   123de:	607b      	str	r3, [r7, #4]

    \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0\n" : : "r" (topOfMainStack) : "sp");
   123e0:	687b      	ldr	r3, [r7, #4]
   123e2:	f383 8808 	msr	MSP, r3
    __set_PSP(kTopOfStack);
    __set_MSP(kTopOfStack);

    SystemInit();
   123e6:	f7ff ffe1 	bl	123ac <SystemInit>
// #pragma ignored "-Wpedantic" to suppress main function call warning
#pragma GCC diagnostic push ignored "-Wpedantic"
    [[maybe_unused]] int32_t result = main();
   123ea:	f7fe f9c7 	bl	1077c <main>
   123ee:	60b8      	str	r0, [r7, #8]
   123f0:	e7fe      	b.n	123f0 <ResetIsr+0x28>
   123f2:	bf00      	nop
   123f4:	10010000 	.word	0x10010000

000123f8 <void Timer::TimerHandler<(TimerInterface::TimerPort)0>()>:
  static void TimerHandler()
   123f8:	b510      	push	{r4, lr}
   123fa:	4674      	mov	r4, lr
   123fc:	4623      	mov	r3, r4
   123fe:	4619      	mov	r1, r3
   12400:	480a      	ldr	r0, [pc, #40]	; (1242c <void Timer::TimerHandler<(TimerInterface::TimerPort)0>()+0x34>)
   12402:	f000 fc6d 	bl	12ce0 <__cyg_profile_func_enter>
      user_timer_isr[util::Value(port)]();
   12406:	2000      	movs	r0, #0
   12408:	f7ff f97e 	bl	11708 <unsigned char util::Value<TimerInterface::TimerPort, unsigned char>(TimerInterface::TimerPort)>
   1240c:	4603      	mov	r3, r0
   1240e:	461a      	mov	r2, r3
   12410:	4b07      	ldr	r3, [pc, #28]	; (12430 <void Timer::TimerHandler<(TimerInterface::TimerPort)0>()+0x38>)
   12412:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   12416:	4798      	blx	r3
    ClearInterrupts<port>();
   12418:	f000 f90e 	bl	12638 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)0>()>
   1241c:	4623      	mov	r3, r4
   1241e:	4619      	mov	r1, r3
   12420:	4802      	ldr	r0, [pc, #8]	; (1242c <void Timer::TimerHandler<(TimerInterface::TimerPort)0>()+0x34>)
   12422:	f000 fc71 	bl	12d08 <__cyg_profile_func_exit>
  }
   12426:	bf00      	nop
   12428:	bd10      	pop	{r4, pc}
   1242a:	bf00      	nop
   1242c:	000123f9 	.word	0x000123f9
   12430:	100002ac 	.word	0x100002ac

00012434 <void Timer::TimerHandler<(TimerInterface::TimerPort)1>()>:
  static void TimerHandler()
   12434:	b510      	push	{r4, lr}
   12436:	4674      	mov	r4, lr
   12438:	4623      	mov	r3, r4
   1243a:	4619      	mov	r1, r3
   1243c:	480a      	ldr	r0, [pc, #40]	; (12468 <void Timer::TimerHandler<(TimerInterface::TimerPort)1>()+0x34>)
   1243e:	f000 fc4f 	bl	12ce0 <__cyg_profile_func_enter>
      user_timer_isr[util::Value(port)]();
   12442:	2001      	movs	r0, #1
   12444:	f7ff f960 	bl	11708 <unsigned char util::Value<TimerInterface::TimerPort, unsigned char>(TimerInterface::TimerPort)>
   12448:	4603      	mov	r3, r0
   1244a:	461a      	mov	r2, r3
   1244c:	4b07      	ldr	r3, [pc, #28]	; (1246c <void Timer::TimerHandler<(TimerInterface::TimerPort)1>()+0x38>)
   1244e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   12452:	4798      	blx	r3
    ClearInterrupts<port>();
   12454:	f000 f940 	bl	126d8 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)1>()>
   12458:	4623      	mov	r3, r4
   1245a:	4619      	mov	r1, r3
   1245c:	4802      	ldr	r0, [pc, #8]	; (12468 <void Timer::TimerHandler<(TimerInterface::TimerPort)1>()+0x34>)
   1245e:	f000 fc53 	bl	12d08 <__cyg_profile_func_exit>
  }
   12462:	bf00      	nop
   12464:	bd10      	pop	{r4, pc}
   12466:	bf00      	nop
   12468:	00012435 	.word	0x00012435
   1246c:	100002ac 	.word	0x100002ac

00012470 <void Timer::TimerHandler<(TimerInterface::TimerPort)2>()>:
  static void TimerHandler()
   12470:	b510      	push	{r4, lr}
   12472:	4674      	mov	r4, lr
   12474:	4623      	mov	r3, r4
   12476:	4619      	mov	r1, r3
   12478:	480a      	ldr	r0, [pc, #40]	; (124a4 <void Timer::TimerHandler<(TimerInterface::TimerPort)2>()+0x34>)
   1247a:	f000 fc31 	bl	12ce0 <__cyg_profile_func_enter>
      user_timer_isr[util::Value(port)]();
   1247e:	2002      	movs	r0, #2
   12480:	f7ff f942 	bl	11708 <unsigned char util::Value<TimerInterface::TimerPort, unsigned char>(TimerInterface::TimerPort)>
   12484:	4603      	mov	r3, r0
   12486:	461a      	mov	r2, r3
   12488:	4b07      	ldr	r3, [pc, #28]	; (124a8 <void Timer::TimerHandler<(TimerInterface::TimerPort)2>()+0x38>)
   1248a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   1248e:	4798      	blx	r3
    ClearInterrupts<port>();
   12490:	f000 f972 	bl	12778 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)2>()>
   12494:	4623      	mov	r3, r4
   12496:	4619      	mov	r1, r3
   12498:	4802      	ldr	r0, [pc, #8]	; (124a4 <void Timer::TimerHandler<(TimerInterface::TimerPort)2>()+0x34>)
   1249a:	f000 fc35 	bl	12d08 <__cyg_profile_func_exit>
  }
   1249e:	bf00      	nop
   124a0:	bd10      	pop	{r4, pc}
   124a2:	bf00      	nop
   124a4:	00012471 	.word	0x00012471
   124a8:	100002ac 	.word	0x100002ac

000124ac <void Timer::TimerHandler<(TimerInterface::TimerPort)3>()>:
  static void TimerHandler()
   124ac:	b510      	push	{r4, lr}
   124ae:	4674      	mov	r4, lr
   124b0:	4623      	mov	r3, r4
   124b2:	4619      	mov	r1, r3
   124b4:	480a      	ldr	r0, [pc, #40]	; (124e0 <void Timer::TimerHandler<(TimerInterface::TimerPort)3>()+0x34>)
   124b6:	f000 fc13 	bl	12ce0 <__cyg_profile_func_enter>
      user_timer_isr[util::Value(port)]();
   124ba:	2003      	movs	r0, #3
   124bc:	f7ff f924 	bl	11708 <unsigned char util::Value<TimerInterface::TimerPort, unsigned char>(TimerInterface::TimerPort)>
   124c0:	4603      	mov	r3, r0
   124c2:	461a      	mov	r2, r3
   124c4:	4b07      	ldr	r3, [pc, #28]	; (124e4 <void Timer::TimerHandler<(TimerInterface::TimerPort)3>()+0x38>)
   124c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   124ca:	4798      	blx	r3
    ClearInterrupts<port>();
   124cc:	f000 f9a4 	bl	12818 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)3>()>
   124d0:	4623      	mov	r3, r4
   124d2:	4619      	mov	r1, r3
   124d4:	4802      	ldr	r0, [pc, #8]	; (124e0 <void Timer::TimerHandler<(TimerInterface::TimerPort)3>()+0x34>)
   124d6:	f000 fc17 	bl	12d08 <__cyg_profile_func_exit>
  }
   124da:	bf00      	nop
   124dc:	bd10      	pop	{r4, pc}
   124de:	bf00      	nop
   124e0:	000124ad 	.word	0x000124ad
   124e4:	100002ac 	.word	0x100002ac

000124e8 <Status Wait<Uart::Send(unsigned char)::{lambda()#1}>(unsigned long long, Uart::Send(unsigned char)::{lambda()#1})>:
inline Status Wait(uint64_t timeout, F is_done)
   124e8:	e92d 4830 	stmdb	sp!, {r4, r5, fp, lr}
   124ec:	b088      	sub	sp, #32
   124ee:	4675      	mov	r5, lr
   124f0:	e9cd 0102 	strd	r0, r1, [sp, #8]
   124f4:	9201      	str	r2, [sp, #4]
   124f6:	462b      	mov	r3, r5
   124f8:	4619      	mov	r1, r3
   124fa:	4824      	ldr	r0, [pc, #144]	; (1258c <Status Wait<Uart::Send(unsigned char)::{lambda()#1}>(unsigned long long, Uart::Send(unsigned char)::{lambda()#1})+0xa4>)
   124fc:	f000 fbf0 	bl	12ce0 <__cyg_profile_func_enter>
  uint64_t timeout_time = 0;
   12500:	f04f 0300 	mov.w	r3, #0
   12504:	f04f 0400 	mov.w	r4, #0
   12508:	e9cd 3406 	strd	r3, r4, [sp, #24]
  if (timeout == kMaxWait)
   1250c:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
   12510:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
   12514:	bf08      	it	eq
   12516:	f1b3 3fff 	cmpeq.w	r3, #4294967295	; 0xffffffff
   1251a:	d106      	bne.n	1252a <Status Wait<Uart::Send(unsigned char)::{lambda()#1}>(unsigned long long, Uart::Send(unsigned char)::{lambda()#1})+0x42>
    timeout_time = kMaxWait;
   1251c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   12520:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   12524:	e9cd 3406 	strd	r3, r4, [sp, #24]
   12528:	e00b      	b.n	12542 <Status Wait<Uart::Send(unsigned char)::{lambda()#1}>(unsigned long long, Uart::Send(unsigned char)::{lambda()#1})+0x5a>
    timeout_time = Milliseconds() + timeout;
   1252a:	f7fe fa29 	bl	10980 <Milliseconds()>
   1252e:	460a      	mov	r2, r1
   12530:	4601      	mov	r1, r0
   12532:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
   12536:	eb13 0b01 	adds.w	fp, r3, r1
   1253a:	eb44 0c02 	adc.w	ip, r4, r2
   1253e:	e9cd bc06 	strd	fp, ip, [sp, #24]
  Status status = Status::kTimedOut;
   12542:	2301      	movs	r3, #1
   12544:	9305      	str	r3, [sp, #20]
  while (Milliseconds() < timeout_time)
   12546:	f7fe fa1b 	bl	10980 <Milliseconds()>
   1254a:	460a      	mov	r2, r1
   1254c:	4601      	mov	r1, r0
   1254e:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
   12552:	42a2      	cmp	r2, r4
   12554:	bf08      	it	eq
   12556:	4299      	cmpeq	r1, r3
   12558:	bf34      	ite	cc
   1255a:	2301      	movcc	r3, #1
   1255c:	2300      	movcs	r3, #0
   1255e:	b2db      	uxtb	r3, r3
   12560:	2b00      	cmp	r3, #0
   12562:	d008      	beq.n	12576 <Status Wait<Uart::Send(unsigned char)::{lambda()#1}>(unsigned long long, Uart::Send(unsigned char)::{lambda()#1})+0x8e>
    if (is_done())
   12564:	ab01      	add	r3, sp, #4
   12566:	4618      	mov	r0, r3
   12568:	f7ff fb1a 	bl	11ba0 <Uart::Send(unsigned char)::{lambda()#1}::operator()() const>
   1256c:	4603      	mov	r3, r0
   1256e:	2b00      	cmp	r3, #0
   12570:	d0e9      	beq.n	12546 <Status Wait<Uart::Send(unsigned char)::{lambda()#1}>(unsigned long long, Uart::Send(unsigned char)::{lambda()#1})+0x5e>
      status = Status::kSuccess;
   12572:	2300      	movs	r3, #0
   12574:	9305      	str	r3, [sp, #20]
  return status;
   12576:	9c05      	ldr	r4, [sp, #20]
   12578:	462b      	mov	r3, r5
   1257a:	4619      	mov	r1, r3
   1257c:	4803      	ldr	r0, [pc, #12]	; (1258c <Status Wait<Uart::Send(unsigned char)::{lambda()#1}>(unsigned long long, Uart::Send(unsigned char)::{lambda()#1})+0xa4>)
   1257e:	f000 fbc3 	bl	12d08 <__cyg_profile_func_exit>
   12582:	4623      	mov	r3, r4
}
   12584:	4618      	mov	r0, r3
   12586:	b008      	add	sp, #32
   12588:	e8bd 8830 	ldmia.w	sp!, {r4, r5, fp, pc}
   1258c:	000124e9 	.word	0x000124e9

00012590 <Status Wait<Uart::Receive(unsigned long)::{lambda()#1}>(unsigned long long, Uart::Receive(unsigned long)::{lambda()#1})>:
inline Status Wait(uint64_t timeout, F is_done)
   12590:	e92d 4830 	stmdb	sp!, {r4, r5, fp, lr}
   12594:	b088      	sub	sp, #32
   12596:	4675      	mov	r5, lr
   12598:	e9cd 0102 	strd	r0, r1, [sp, #8]
   1259c:	9201      	str	r2, [sp, #4]
   1259e:	462b      	mov	r3, r5
   125a0:	4619      	mov	r1, r3
   125a2:	4824      	ldr	r0, [pc, #144]	; (12634 <Status Wait<Uart::Receive(unsigned long)::{lambda()#1}>(unsigned long long, Uart::Receive(unsigned long)::{lambda()#1})+0xa4>)
   125a4:	f000 fb9c 	bl	12ce0 <__cyg_profile_func_enter>
  uint64_t timeout_time = 0;
   125a8:	f04f 0300 	mov.w	r3, #0
   125ac:	f04f 0400 	mov.w	r4, #0
   125b0:	e9cd 3406 	strd	r3, r4, [sp, #24]
  if (timeout == kMaxWait)
   125b4:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
   125b8:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
   125bc:	bf08      	it	eq
   125be:	f1b3 3fff 	cmpeq.w	r3, #4294967295	; 0xffffffff
   125c2:	d106      	bne.n	125d2 <Status Wait<Uart::Receive(unsigned long)::{lambda()#1}>(unsigned long long, Uart::Receive(unsigned long)::{lambda()#1})+0x42>
    timeout_time = kMaxWait;
   125c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   125c8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   125cc:	e9cd 3406 	strd	r3, r4, [sp, #24]
   125d0:	e00b      	b.n	125ea <Status Wait<Uart::Receive(unsigned long)::{lambda()#1}>(unsigned long long, Uart::Receive(unsigned long)::{lambda()#1})+0x5a>
    timeout_time = Milliseconds() + timeout;
   125d2:	f7fe f9d5 	bl	10980 <Milliseconds()>
   125d6:	460a      	mov	r2, r1
   125d8:	4601      	mov	r1, r0
   125da:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
   125de:	eb13 0b01 	adds.w	fp, r3, r1
   125e2:	eb44 0c02 	adc.w	ip, r4, r2
   125e6:	e9cd bc06 	strd	fp, ip, [sp, #24]
  Status status = Status::kTimedOut;
   125ea:	2301      	movs	r3, #1
   125ec:	9305      	str	r3, [sp, #20]
  while (Milliseconds() < timeout_time)
   125ee:	f7fe f9c7 	bl	10980 <Milliseconds()>
   125f2:	460a      	mov	r2, r1
   125f4:	4601      	mov	r1, r0
   125f6:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
   125fa:	42a2      	cmp	r2, r4
   125fc:	bf08      	it	eq
   125fe:	4299      	cmpeq	r1, r3
   12600:	bf34      	ite	cc
   12602:	2301      	movcc	r3, #1
   12604:	2300      	movcs	r3, #0
   12606:	b2db      	uxtb	r3, r3
   12608:	2b00      	cmp	r3, #0
   1260a:	d008      	beq.n	1261e <Status Wait<Uart::Receive(unsigned long)::{lambda()#1}>(unsigned long long, Uart::Receive(unsigned long)::{lambda()#1})+0x8e>
    if (is_done())
   1260c:	ab01      	add	r3, sp, #4
   1260e:	4618      	mov	r0, r3
   12610:	f7ff fb60 	bl	11cd4 <Uart::Receive(unsigned long)::{lambda()#1}::operator()() const>
   12614:	4603      	mov	r3, r0
   12616:	2b00      	cmp	r3, #0
   12618:	d0e9      	beq.n	125ee <Status Wait<Uart::Receive(unsigned long)::{lambda()#1}>(unsigned long long, Uart::Receive(unsigned long)::{lambda()#1})+0x5e>
      status = Status::kSuccess;
   1261a:	2300      	movs	r3, #0
   1261c:	9305      	str	r3, [sp, #20]
  return status;
   1261e:	9c05      	ldr	r4, [sp, #20]
   12620:	462b      	mov	r3, r5
   12622:	4619      	mov	r1, r3
   12624:	4803      	ldr	r0, [pc, #12]	; (12634 <Status Wait<Uart::Receive(unsigned long)::{lambda()#1}>(unsigned long long, Uart::Receive(unsigned long)::{lambda()#1})+0xa4>)
   12626:	f000 fb6f 	bl	12d08 <__cyg_profile_func_exit>
   1262a:	4623      	mov	r3, r4
}
   1262c:	4618      	mov	r0, r3
   1262e:	b008      	add	sp, #32
   12630:	e8bd 8830 	ldmia.w	sp!, {r4, r5, fp, pc}
   12634:	00012591 	.word	0x00012591

00012638 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)0>()>:
  static void ClearInterrupts()
   12638:	b510      	push	{r4, lr}
   1263a:	b082      	sub	sp, #8
   1263c:	4674      	mov	r4, lr
   1263e:	4623      	mov	r3, r4
   12640:	4619      	mov	r1, r3
   12642:	4823      	ldr	r0, [pc, #140]	; (126d0 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)0>()+0x98>)
   12644:	f000 fb4c 	bl	12ce0 <__cyg_profile_func_enter>
    uint8_t channel = util::Value(port);
   12648:	2300      	movs	r3, #0
   1264a:	f88d 3007 	strb.w	r3, [sp, #7]
    tim_register[channel]->IR |= (1 << kRegMR0);
   1264e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   12652:	4a20      	ldr	r2, [pc, #128]	; (126d4 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)0>()+0x9c>)
   12654:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12658:	681a      	ldr	r2, [r3, #0]
   1265a:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1265e:	491d      	ldr	r1, [pc, #116]	; (126d4 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)0>()+0x9c>)
   12660:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   12664:	f042 0201 	orr.w	r2, r2, #1
   12668:	601a      	str	r2, [r3, #0]
    tim_register[channel]->IR |= (1 << kRegMR1);
   1266a:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1266e:	4a19      	ldr	r2, [pc, #100]	; (126d4 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)0>()+0x9c>)
   12670:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12674:	681a      	ldr	r2, [r3, #0]
   12676:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1267a:	4916      	ldr	r1, [pc, #88]	; (126d4 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)0>()+0x9c>)
   1267c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   12680:	f042 0202 	orr.w	r2, r2, #2
   12684:	601a      	str	r2, [r3, #0]
    tim_register[channel]->IR |= (1 << kRegMR2);
   12686:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1268a:	4a12      	ldr	r2, [pc, #72]	; (126d4 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)0>()+0x9c>)
   1268c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12690:	681a      	ldr	r2, [r3, #0]
   12692:	f89d 3007 	ldrb.w	r3, [sp, #7]
   12696:	490f      	ldr	r1, [pc, #60]	; (126d4 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)0>()+0x9c>)
   12698:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   1269c:	f042 0204 	orr.w	r2, r2, #4
   126a0:	601a      	str	r2, [r3, #0]
    tim_register[channel]->IR |= (1 << kRegMR3);
   126a2:	f89d 3007 	ldrb.w	r3, [sp, #7]
   126a6:	4a0b      	ldr	r2, [pc, #44]	; (126d4 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)0>()+0x9c>)
   126a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   126ac:	681a      	ldr	r2, [r3, #0]
   126ae:	f89d 3007 	ldrb.w	r3, [sp, #7]
   126b2:	4908      	ldr	r1, [pc, #32]	; (126d4 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)0>()+0x9c>)
   126b4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   126b8:	f042 0208 	orr.w	r2, r2, #8
   126bc:	601a      	str	r2, [r3, #0]
   126be:	4623      	mov	r3, r4
   126c0:	4619      	mov	r1, r3
   126c2:	4803      	ldr	r0, [pc, #12]	; (126d0 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)0>()+0x98>)
   126c4:	f000 fb20 	bl	12d08 <__cyg_profile_func_exit>
  }
   126c8:	bf00      	nop
   126ca:	b002      	add	sp, #8
   126cc:	bd10      	pop	{r4, pc}
   126ce:	bf00      	nop
   126d0:	00012639 	.word	0x00012639
   126d4:	10000014 	.word	0x10000014

000126d8 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)1>()>:
  static void ClearInterrupts()
   126d8:	b510      	push	{r4, lr}
   126da:	b082      	sub	sp, #8
   126dc:	4674      	mov	r4, lr
   126de:	4623      	mov	r3, r4
   126e0:	4619      	mov	r1, r3
   126e2:	4823      	ldr	r0, [pc, #140]	; (12770 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)1>()+0x98>)
   126e4:	f000 fafc 	bl	12ce0 <__cyg_profile_func_enter>
    uint8_t channel = util::Value(port);
   126e8:	2301      	movs	r3, #1
   126ea:	f88d 3007 	strb.w	r3, [sp, #7]
    tim_register[channel]->IR |= (1 << kRegMR0);
   126ee:	f89d 3007 	ldrb.w	r3, [sp, #7]
   126f2:	4a20      	ldr	r2, [pc, #128]	; (12774 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)1>()+0x9c>)
   126f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   126f8:	681a      	ldr	r2, [r3, #0]
   126fa:	f89d 3007 	ldrb.w	r3, [sp, #7]
   126fe:	491d      	ldr	r1, [pc, #116]	; (12774 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)1>()+0x9c>)
   12700:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   12704:	f042 0201 	orr.w	r2, r2, #1
   12708:	601a      	str	r2, [r3, #0]
    tim_register[channel]->IR |= (1 << kRegMR1);
   1270a:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1270e:	4a19      	ldr	r2, [pc, #100]	; (12774 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)1>()+0x9c>)
   12710:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12714:	681a      	ldr	r2, [r3, #0]
   12716:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1271a:	4916      	ldr	r1, [pc, #88]	; (12774 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)1>()+0x9c>)
   1271c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   12720:	f042 0202 	orr.w	r2, r2, #2
   12724:	601a      	str	r2, [r3, #0]
    tim_register[channel]->IR |= (1 << kRegMR2);
   12726:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1272a:	4a12      	ldr	r2, [pc, #72]	; (12774 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)1>()+0x9c>)
   1272c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12730:	681a      	ldr	r2, [r3, #0]
   12732:	f89d 3007 	ldrb.w	r3, [sp, #7]
   12736:	490f      	ldr	r1, [pc, #60]	; (12774 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)1>()+0x9c>)
   12738:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   1273c:	f042 0204 	orr.w	r2, r2, #4
   12740:	601a      	str	r2, [r3, #0]
    tim_register[channel]->IR |= (1 << kRegMR3);
   12742:	f89d 3007 	ldrb.w	r3, [sp, #7]
   12746:	4a0b      	ldr	r2, [pc, #44]	; (12774 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)1>()+0x9c>)
   12748:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1274c:	681a      	ldr	r2, [r3, #0]
   1274e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   12752:	4908      	ldr	r1, [pc, #32]	; (12774 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)1>()+0x9c>)
   12754:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   12758:	f042 0208 	orr.w	r2, r2, #8
   1275c:	601a      	str	r2, [r3, #0]
   1275e:	4623      	mov	r3, r4
   12760:	4619      	mov	r1, r3
   12762:	4803      	ldr	r0, [pc, #12]	; (12770 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)1>()+0x98>)
   12764:	f000 fad0 	bl	12d08 <__cyg_profile_func_exit>
  }
   12768:	bf00      	nop
   1276a:	b002      	add	sp, #8
   1276c:	bd10      	pop	{r4, pc}
   1276e:	bf00      	nop
   12770:	000126d9 	.word	0x000126d9
   12774:	10000014 	.word	0x10000014

00012778 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)2>()>:
  static void ClearInterrupts()
   12778:	b510      	push	{r4, lr}
   1277a:	b082      	sub	sp, #8
   1277c:	4674      	mov	r4, lr
   1277e:	4623      	mov	r3, r4
   12780:	4619      	mov	r1, r3
   12782:	4823      	ldr	r0, [pc, #140]	; (12810 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)2>()+0x98>)
   12784:	f000 faac 	bl	12ce0 <__cyg_profile_func_enter>
    uint8_t channel = util::Value(port);
   12788:	2302      	movs	r3, #2
   1278a:	f88d 3007 	strb.w	r3, [sp, #7]
    tim_register[channel]->IR |= (1 << kRegMR0);
   1278e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   12792:	4a20      	ldr	r2, [pc, #128]	; (12814 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)2>()+0x9c>)
   12794:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12798:	681a      	ldr	r2, [r3, #0]
   1279a:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1279e:	491d      	ldr	r1, [pc, #116]	; (12814 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)2>()+0x9c>)
   127a0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   127a4:	f042 0201 	orr.w	r2, r2, #1
   127a8:	601a      	str	r2, [r3, #0]
    tim_register[channel]->IR |= (1 << kRegMR1);
   127aa:	f89d 3007 	ldrb.w	r3, [sp, #7]
   127ae:	4a19      	ldr	r2, [pc, #100]	; (12814 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)2>()+0x9c>)
   127b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   127b4:	681a      	ldr	r2, [r3, #0]
   127b6:	f89d 3007 	ldrb.w	r3, [sp, #7]
   127ba:	4916      	ldr	r1, [pc, #88]	; (12814 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)2>()+0x9c>)
   127bc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   127c0:	f042 0202 	orr.w	r2, r2, #2
   127c4:	601a      	str	r2, [r3, #0]
    tim_register[channel]->IR |= (1 << kRegMR2);
   127c6:	f89d 3007 	ldrb.w	r3, [sp, #7]
   127ca:	4a12      	ldr	r2, [pc, #72]	; (12814 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)2>()+0x9c>)
   127cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   127d0:	681a      	ldr	r2, [r3, #0]
   127d2:	f89d 3007 	ldrb.w	r3, [sp, #7]
   127d6:	490f      	ldr	r1, [pc, #60]	; (12814 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)2>()+0x9c>)
   127d8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   127dc:	f042 0204 	orr.w	r2, r2, #4
   127e0:	601a      	str	r2, [r3, #0]
    tim_register[channel]->IR |= (1 << kRegMR3);
   127e2:	f89d 3007 	ldrb.w	r3, [sp, #7]
   127e6:	4a0b      	ldr	r2, [pc, #44]	; (12814 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)2>()+0x9c>)
   127e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   127ec:	681a      	ldr	r2, [r3, #0]
   127ee:	f89d 3007 	ldrb.w	r3, [sp, #7]
   127f2:	4908      	ldr	r1, [pc, #32]	; (12814 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)2>()+0x9c>)
   127f4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   127f8:	f042 0208 	orr.w	r2, r2, #8
   127fc:	601a      	str	r2, [r3, #0]
   127fe:	4623      	mov	r3, r4
   12800:	4619      	mov	r1, r3
   12802:	4803      	ldr	r0, [pc, #12]	; (12810 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)2>()+0x98>)
   12804:	f000 fa80 	bl	12d08 <__cyg_profile_func_exit>
  }
   12808:	bf00      	nop
   1280a:	b002      	add	sp, #8
   1280c:	bd10      	pop	{r4, pc}
   1280e:	bf00      	nop
   12810:	00012779 	.word	0x00012779
   12814:	10000014 	.word	0x10000014

00012818 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)3>()>:
  static void ClearInterrupts()
   12818:	b510      	push	{r4, lr}
   1281a:	b082      	sub	sp, #8
   1281c:	4674      	mov	r4, lr
   1281e:	4623      	mov	r3, r4
   12820:	4619      	mov	r1, r3
   12822:	4823      	ldr	r0, [pc, #140]	; (128b0 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)3>()+0x98>)
   12824:	f000 fa5c 	bl	12ce0 <__cyg_profile_func_enter>
    uint8_t channel = util::Value(port);
   12828:	2303      	movs	r3, #3
   1282a:	f88d 3007 	strb.w	r3, [sp, #7]
    tim_register[channel]->IR |= (1 << kRegMR0);
   1282e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   12832:	4a20      	ldr	r2, [pc, #128]	; (128b4 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)3>()+0x9c>)
   12834:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12838:	681a      	ldr	r2, [r3, #0]
   1283a:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1283e:	491d      	ldr	r1, [pc, #116]	; (128b4 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)3>()+0x9c>)
   12840:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   12844:	f042 0201 	orr.w	r2, r2, #1
   12848:	601a      	str	r2, [r3, #0]
    tim_register[channel]->IR |= (1 << kRegMR1);
   1284a:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1284e:	4a19      	ldr	r2, [pc, #100]	; (128b4 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)3>()+0x9c>)
   12850:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12854:	681a      	ldr	r2, [r3, #0]
   12856:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1285a:	4916      	ldr	r1, [pc, #88]	; (128b4 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)3>()+0x9c>)
   1285c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   12860:	f042 0202 	orr.w	r2, r2, #2
   12864:	601a      	str	r2, [r3, #0]
    tim_register[channel]->IR |= (1 << kRegMR2);
   12866:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1286a:	4a12      	ldr	r2, [pc, #72]	; (128b4 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)3>()+0x9c>)
   1286c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12870:	681a      	ldr	r2, [r3, #0]
   12872:	f89d 3007 	ldrb.w	r3, [sp, #7]
   12876:	490f      	ldr	r1, [pc, #60]	; (128b4 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)3>()+0x9c>)
   12878:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   1287c:	f042 0204 	orr.w	r2, r2, #4
   12880:	601a      	str	r2, [r3, #0]
    tim_register[channel]->IR |= (1 << kRegMR3);
   12882:	f89d 3007 	ldrb.w	r3, [sp, #7]
   12886:	4a0b      	ldr	r2, [pc, #44]	; (128b4 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)3>()+0x9c>)
   12888:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1288c:	681a      	ldr	r2, [r3, #0]
   1288e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   12892:	4908      	ldr	r1, [pc, #32]	; (128b4 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)3>()+0x9c>)
   12894:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   12898:	f042 0208 	orr.w	r2, r2, #8
   1289c:	601a      	str	r2, [r3, #0]
   1289e:	4623      	mov	r3, r4
   128a0:	4619      	mov	r1, r3
   128a2:	4803      	ldr	r0, [pc, #12]	; (128b0 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)3>()+0x98>)
   128a4:	f000 fa30 	bl	12d08 <__cyg_profile_func_exit>
  }
   128a8:	bf00      	nop
   128aa:	b002      	add	sp, #8
   128ac:	bd10      	pop	{r4, pc}
   128ae:	bf00      	nop
   128b0:	00012819 	.word	0x00012819
   128b4:	10000014 	.word	0x10000014

000128b8 <__static_initialization_and_destruction_0(int, int)>:
#pragma GCC diagnostic pop
    // main() shouldn't return, but if it does, we'll just enter an infinite
    // loop
    Halt();
  }
}
   128b8:	b082      	sub	sp, #8
   128ba:	9001      	str	r0, [sp, #4]
   128bc:	9100      	str	r1, [sp, #0]
   128be:	9b01      	ldr	r3, [sp, #4]
   128c0:	2b01      	cmp	r3, #1
   128c2:	d15d      	bne.n	12980 <__static_initialization_and_destruction_0(int, int)+0xc8>
   128c4:	9b00      	ldr	r3, [sp, #0]
   128c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
   128ca:	4293      	cmp	r3, r2
   128cc:	d158      	bne.n	12980 <__static_initialization_and_destruction_0(int, int)+0xc8>
  inline static volatile uint32_t * match[4][4] = {
   128ce:	4b2e      	ldr	r3, [pc, #184]	; (12988 <__static_initialization_and_destruction_0(int, int)+0xd0>)
   128d0:	681b      	ldr	r3, [r3, #0]
   128d2:	f003 0301 	and.w	r3, r3, #1
   128d6:	2b00      	cmp	r3, #0
   128d8:	d152      	bne.n	12980 <__static_initialization_and_destruction_0(int, int)+0xc8>
   128da:	4b2b      	ldr	r3, [pc, #172]	; (12988 <__static_initialization_and_destruction_0(int, int)+0xd0>)
   128dc:	2201      	movs	r2, #1
   128de:	601a      	str	r2, [r3, #0]
    [kTimer0] = { &tim_register[0]->MR0, &tim_register[0]->MR1,
   128e0:	4b2a      	ldr	r3, [pc, #168]	; (1298c <__static_initialization_and_destruction_0(int, int)+0xd4>)
   128e2:	681b      	ldr	r3, [r3, #0]
   128e4:	3318      	adds	r3, #24
  };
   128e6:	4a2a      	ldr	r2, [pc, #168]	; (12990 <__static_initialization_and_destruction_0(int, int)+0xd8>)
   128e8:	6013      	str	r3, [r2, #0]
    [kTimer0] = { &tim_register[0]->MR0, &tim_register[0]->MR1,
   128ea:	4b28      	ldr	r3, [pc, #160]	; (1298c <__static_initialization_and_destruction_0(int, int)+0xd4>)
   128ec:	681b      	ldr	r3, [r3, #0]
   128ee:	331c      	adds	r3, #28
  };
   128f0:	4a27      	ldr	r2, [pc, #156]	; (12990 <__static_initialization_and_destruction_0(int, int)+0xd8>)
   128f2:	6053      	str	r3, [r2, #4]
                  &tim_register[0]->MR2, &tim_register[0]->MR3 },
   128f4:	4b25      	ldr	r3, [pc, #148]	; (1298c <__static_initialization_and_destruction_0(int, int)+0xd4>)
   128f6:	681b      	ldr	r3, [r3, #0]
   128f8:	3320      	adds	r3, #32
  };
   128fa:	4a25      	ldr	r2, [pc, #148]	; (12990 <__static_initialization_and_destruction_0(int, int)+0xd8>)
   128fc:	6093      	str	r3, [r2, #8]
                  &tim_register[0]->MR2, &tim_register[0]->MR3 },
   128fe:	4b23      	ldr	r3, [pc, #140]	; (1298c <__static_initialization_and_destruction_0(int, int)+0xd4>)
   12900:	681b      	ldr	r3, [r3, #0]
   12902:	3324      	adds	r3, #36	; 0x24
  };
   12904:	4a22      	ldr	r2, [pc, #136]	; (12990 <__static_initialization_and_destruction_0(int, int)+0xd8>)
   12906:	60d3      	str	r3, [r2, #12]
    [kTimer1] = { &tim_register[1]->MR0, &tim_register[1]->MR1,
   12908:	4b20      	ldr	r3, [pc, #128]	; (1298c <__static_initialization_and_destruction_0(int, int)+0xd4>)
   1290a:	685b      	ldr	r3, [r3, #4]
   1290c:	3318      	adds	r3, #24
  };
   1290e:	4a20      	ldr	r2, [pc, #128]	; (12990 <__static_initialization_and_destruction_0(int, int)+0xd8>)
   12910:	6113      	str	r3, [r2, #16]
    [kTimer1] = { &tim_register[1]->MR0, &tim_register[1]->MR1,
   12912:	4b1e      	ldr	r3, [pc, #120]	; (1298c <__static_initialization_and_destruction_0(int, int)+0xd4>)
   12914:	685b      	ldr	r3, [r3, #4]
   12916:	331c      	adds	r3, #28
  };
   12918:	4a1d      	ldr	r2, [pc, #116]	; (12990 <__static_initialization_and_destruction_0(int, int)+0xd8>)
   1291a:	6153      	str	r3, [r2, #20]
                  &tim_register[1]->MR2, &tim_register[1]->MR3 },
   1291c:	4b1b      	ldr	r3, [pc, #108]	; (1298c <__static_initialization_and_destruction_0(int, int)+0xd4>)
   1291e:	685b      	ldr	r3, [r3, #4]
   12920:	3320      	adds	r3, #32
  };
   12922:	4a1b      	ldr	r2, [pc, #108]	; (12990 <__static_initialization_and_destruction_0(int, int)+0xd8>)
   12924:	6193      	str	r3, [r2, #24]
                  &tim_register[1]->MR2, &tim_register[1]->MR3 },
   12926:	4b19      	ldr	r3, [pc, #100]	; (1298c <__static_initialization_and_destruction_0(int, int)+0xd4>)
   12928:	685b      	ldr	r3, [r3, #4]
   1292a:	3324      	adds	r3, #36	; 0x24
  };
   1292c:	4a18      	ldr	r2, [pc, #96]	; (12990 <__static_initialization_and_destruction_0(int, int)+0xd8>)
   1292e:	61d3      	str	r3, [r2, #28]
    [kTimer2] = { &tim_register[2]->MR0, &tim_register[2]->MR1,
   12930:	4b16      	ldr	r3, [pc, #88]	; (1298c <__static_initialization_and_destruction_0(int, int)+0xd4>)
   12932:	689b      	ldr	r3, [r3, #8]
   12934:	3318      	adds	r3, #24
  };
   12936:	4a16      	ldr	r2, [pc, #88]	; (12990 <__static_initialization_and_destruction_0(int, int)+0xd8>)
   12938:	6213      	str	r3, [r2, #32]
    [kTimer2] = { &tim_register[2]->MR0, &tim_register[2]->MR1,
   1293a:	4b14      	ldr	r3, [pc, #80]	; (1298c <__static_initialization_and_destruction_0(int, int)+0xd4>)
   1293c:	689b      	ldr	r3, [r3, #8]
   1293e:	331c      	adds	r3, #28
  };
   12940:	4a13      	ldr	r2, [pc, #76]	; (12990 <__static_initialization_and_destruction_0(int, int)+0xd8>)
   12942:	6253      	str	r3, [r2, #36]	; 0x24
                  &tim_register[2]->MR2, &tim_register[2]->MR3 },
   12944:	4b11      	ldr	r3, [pc, #68]	; (1298c <__static_initialization_and_destruction_0(int, int)+0xd4>)
   12946:	689b      	ldr	r3, [r3, #8]
   12948:	3320      	adds	r3, #32
  };
   1294a:	4a11      	ldr	r2, [pc, #68]	; (12990 <__static_initialization_and_destruction_0(int, int)+0xd8>)
   1294c:	6293      	str	r3, [r2, #40]	; 0x28
                  &tim_register[2]->MR2, &tim_register[2]->MR3 },
   1294e:	4b0f      	ldr	r3, [pc, #60]	; (1298c <__static_initialization_and_destruction_0(int, int)+0xd4>)
   12950:	689b      	ldr	r3, [r3, #8]
   12952:	3324      	adds	r3, #36	; 0x24
  };
   12954:	4a0e      	ldr	r2, [pc, #56]	; (12990 <__static_initialization_and_destruction_0(int, int)+0xd8>)
   12956:	62d3      	str	r3, [r2, #44]	; 0x2c
    [kTimer3] = { &tim_register[3]->MR0, &tim_register[3]->MR1,
   12958:	4b0c      	ldr	r3, [pc, #48]	; (1298c <__static_initialization_and_destruction_0(int, int)+0xd4>)
   1295a:	68db      	ldr	r3, [r3, #12]
   1295c:	3318      	adds	r3, #24
  };
   1295e:	4a0c      	ldr	r2, [pc, #48]	; (12990 <__static_initialization_and_destruction_0(int, int)+0xd8>)
   12960:	6313      	str	r3, [r2, #48]	; 0x30
    [kTimer3] = { &tim_register[3]->MR0, &tim_register[3]->MR1,
   12962:	4b0a      	ldr	r3, [pc, #40]	; (1298c <__static_initialization_and_destruction_0(int, int)+0xd4>)
   12964:	68db      	ldr	r3, [r3, #12]
   12966:	331c      	adds	r3, #28
  };
   12968:	4a09      	ldr	r2, [pc, #36]	; (12990 <__static_initialization_and_destruction_0(int, int)+0xd8>)
   1296a:	6353      	str	r3, [r2, #52]	; 0x34
                  &tim_register[3]->MR2, &tim_register[3]->MR3 }
   1296c:	4b07      	ldr	r3, [pc, #28]	; (1298c <__static_initialization_and_destruction_0(int, int)+0xd4>)
   1296e:	68db      	ldr	r3, [r3, #12]
   12970:	3320      	adds	r3, #32
  };
   12972:	4a07      	ldr	r2, [pc, #28]	; (12990 <__static_initialization_and_destruction_0(int, int)+0xd8>)
   12974:	6393      	str	r3, [r2, #56]	; 0x38
                  &tim_register[3]->MR2, &tim_register[3]->MR3 }
   12976:	4b05      	ldr	r3, [pc, #20]	; (1298c <__static_initialization_and_destruction_0(int, int)+0xd4>)
   12978:	68db      	ldr	r3, [r3, #12]
   1297a:	3324      	adds	r3, #36	; 0x24
  };
   1297c:	4a04      	ldr	r2, [pc, #16]	; (12990 <__static_initialization_and_destruction_0(int, int)+0xd8>)
   1297e:	63d3      	str	r3, [r2, #60]	; 0x3c
   12980:	bf00      	nop
   12982:	b002      	add	sp, #8
   12984:	4770      	bx	lr
   12986:	bf00      	nop
   12988:	100002bc 	.word	0x100002bc
   1298c:	10000014 	.word	0x10000014
   12990:	1000026c 	.word	0x1000026c

00012994 <_GLOBAL__sub_I_UptimeRTOS>:
   12994:	b508      	push	{r3, lr}
   12996:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1299a:	2001      	movs	r0, #1
   1299c:	f7ff ff8c 	bl	128b8 <__static_initialization_and_destruction_0(int, int)>
   129a0:	bd08      	pop	{r3, pc}
   129a2:	Address 0x00000000000129a2 is out of bounds.


000129a4 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
   129a4:	b082      	sub	sp, #8
   129a6:	4603      	mov	r3, r0
   129a8:	f88d 3007 	strb.w	r3, [sp, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
   129ac:	f99d 3007 	ldrsb.w	r3, [sp, #7]
   129b0:	f003 021f 	and.w	r2, r3, #31
   129b4:	4905      	ldr	r1, [pc, #20]	; (129cc <NVIC_EnableIRQ+0x28>)
   129b6:	f99d 3007 	ldrsb.w	r3, [sp, #7]
   129ba:	095b      	lsrs	r3, r3, #5
   129bc:	2001      	movs	r0, #1
   129be:	fa00 f202 	lsl.w	r2, r0, r2
   129c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   129c6:	bf00      	nop
   129c8:	b002      	add	sp, #8
   129ca:	4770      	bx	lr
   129cc:	e000e100 	.word	0xe000e100

000129d0 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
   129d0:	b082      	sub	sp, #8
   129d2:	4603      	mov	r3, r0
   129d4:	9100      	str	r1, [sp, #0]
   129d6:	f88d 3007 	strb.w	r3, [sp, #7]
  if ((int32_t)(IRQn) < 0)
   129da:	f99d 3007 	ldrsb.w	r3, [sp, #7]
   129de:	2b00      	cmp	r3, #0
   129e0:	da0c      	bge.n	129fc <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   129e2:	9b00      	ldr	r3, [sp, #0]
   129e4:	b2da      	uxtb	r2, r3
   129e6:	490d      	ldr	r1, [pc, #52]	; (12a1c <NVIC_SetPriority+0x4c>)
   129e8:	f99d 3007 	ldrsb.w	r3, [sp, #7]
   129ec:	f003 030f 	and.w	r3, r3, #15
   129f0:	3b04      	subs	r3, #4
   129f2:	0152      	lsls	r2, r2, #5
   129f4:	b2d2      	uxtb	r2, r2
   129f6:	440b      	add	r3, r1
   129f8:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
   129fa:	e00b      	b.n	12a14 <NVIC_SetPriority+0x44>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   129fc:	9b00      	ldr	r3, [sp, #0]
   129fe:	b2db      	uxtb	r3, r3
   12a00:	4a07      	ldr	r2, [pc, #28]	; (12a20 <NVIC_SetPriority+0x50>)
   12a02:	f99d 1007 	ldrsb.w	r1, [sp, #7]
   12a06:	4608      	mov	r0, r1
   12a08:	015b      	lsls	r3, r3, #5
   12a0a:	b2d9      	uxtb	r1, r3
   12a0c:	1813      	adds	r3, r2, r0
   12a0e:	460a      	mov	r2, r1
   12a10:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
   12a14:	bf00      	nop
   12a16:	b002      	add	sp, #8
   12a18:	4770      	bx	lr
   12a1a:	bf00      	nop
   12a1c:	e000ed00 	.word	0xe000ed00
   12a20:	e000e100 	.word	0xe000e100

00012a24 <InterruptLookupHandler>:
{
   12a24:	b500      	push	{lr}
   12a26:	b085      	sub	sp, #20
  uint8_t active_isr = (SCB->ICSR & 0xFF);
   12a28:	4b12      	ldr	r3, [pc, #72]	; (12a74 <InterruptLookupHandler+0x50>)
   12a2a:	685b      	ldr	r3, [r3, #4]
   12a2c:	f88d 300f 	strb.w	r3, [sp, #15]
  IsrPointer isr     = dynamic_isr_vector_table[active_isr];
   12a30:	f89d 300f 	ldrb.w	r3, [sp, #15]
   12a34:	4a10      	ldr	r2, [pc, #64]	; (12a78 <InterruptLookupHandler+0x54>)
   12a36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12a3a:	9302      	str	r3, [sp, #8]
  SJ2_ASSERT_FATAL(isr != InterruptLookupHandler,
   12a3c:	9b02      	ldr	r3, [sp, #8]
   12a3e:	4a0f      	ldr	r2, [pc, #60]	; (12a7c <InterruptLookupHandler+0x58>)
   12a40:	4293      	cmp	r3, r2
   12a42:	d110      	bne.n	12a66 <InterruptLookupHandler+0x42>
   12a44:	f89d 300f 	ldrb.w	r3, [sp, #15]
   12a48:	9300      	str	r3, [sp, #0]
   12a4a:	23dd      	movs	r3, #221	; 0xdd
   12a4c:	4a0c      	ldr	r2, [pc, #48]	; (12a80 <InterruptLookupHandler+0x5c>)
   12a4e:	490d      	ldr	r1, [pc, #52]	; (12a84 <InterruptLookupHandler+0x60>)
   12a50:	480d      	ldr	r0, [pc, #52]	; (12a88 <InterruptLookupHandler+0x64>)
   12a52:	f001 fb9f 	bl	14194 <printf>
   12a56:	480d      	ldr	r0, [pc, #52]	; (12a8c <InterruptLookupHandler+0x68>)
   12a58:	f000 f912 	bl	12c80 <puts>
   12a5c:	2100      	movs	r1, #0
   12a5e:	2001      	movs	r0, #1
   12a60:	f7fd fede 	bl	10820 <debug::PrintBacktrace(bool, void*)>
   12a64:	e7fe      	b.n	12a64 <InterruptLookupHandler+0x40>
  isr();
   12a66:	9b02      	ldr	r3, [sp, #8]
   12a68:	4798      	blx	r3
}
   12a6a:	bf00      	nop
   12a6c:	b005      	add	sp, #20
   12a6e:	f85d fb04 	ldr.w	pc, [sp], #4
   12a72:	bf00      	nop
   12a74:	e000ed00 	.word	0xe000ed00
   12a78:	100000a0 	.word	0x100000a0
   12a7c:	00012a25 	.word	0x00012a25
   12a80:	00017f00 	.word	0x00017f00
   12a84:	00017ef0 	.word	0x00017ef0
   12a88:	00017d94 	.word	0x00017d94
   12a8c:	00017e40 	.word	0x00017e40

00012a90 <RegisterIsr(IRQn, void (*)(), bool, long)>:
{
   12a90:	b500      	push	{lr}
   12a92:	b085      	sub	sp, #20
   12a94:	9102      	str	r1, [sp, #8]
   12a96:	9301      	str	r3, [sp, #4]
   12a98:	4603      	mov	r3, r0
   12a9a:	f88d 300f 	strb.w	r3, [sp, #15]
   12a9e:	4613      	mov	r3, r2
   12aa0:	f88d 300e 	strb.w	r3, [sp, #14]
  dynamic_isr_vector_table[irq + kIrqOffset] = isr;
   12aa4:	f99d 300f 	ldrsb.w	r3, [sp, #15]
   12aa8:	3310      	adds	r3, #16
   12aaa:	490f      	ldr	r1, [pc, #60]	; (12ae8 <RegisterIsr(IRQn, void (*)(), bool, long)+0x58>)
   12aac:	9a02      	ldr	r2, [sp, #8]
   12aae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  if (enable_interrupt && irq >= 0)
   12ab2:	f89d 300e 	ldrb.w	r3, [sp, #14]
   12ab6:	2b00      	cmp	r3, #0
   12ab8:	d008      	beq.n	12acc <RegisterIsr(IRQn, void (*)(), bool, long)+0x3c>
   12aba:	f99d 300f 	ldrsb.w	r3, [sp, #15]
   12abe:	2b00      	cmp	r3, #0
   12ac0:	db04      	blt.n	12acc <RegisterIsr(IRQn, void (*)(), bool, long)+0x3c>
    NVIC_EnableIRQ(irq);
   12ac2:	f99d 300f 	ldrsb.w	r3, [sp, #15]
   12ac6:	4618      	mov	r0, r3
   12ac8:	f7ff ff6c 	bl	129a4 <NVIC_EnableIRQ>
  if (priority > -1)
   12acc:	9b01      	ldr	r3, [sp, #4]
   12ace:	2b00      	cmp	r3, #0
   12ad0:	db06      	blt.n	12ae0 <RegisterIsr(IRQn, void (*)(), bool, long)+0x50>
    NVIC_SetPriority(irq, priority);
   12ad2:	9a01      	ldr	r2, [sp, #4]
   12ad4:	f99d 300f 	ldrsb.w	r3, [sp, #15]
   12ad8:	4611      	mov	r1, r2
   12ada:	4618      	mov	r0, r3
   12adc:	f7ff ff78 	bl	129d0 <NVIC_SetPriority>
}
   12ae0:	bf00      	nop
   12ae2:	b005      	add	sp, #20
   12ae4:	f85d fb04 	ldr.w	pc, [sp], #4
   12ae8:	100000a0 	.word	0x100000a0

00012aec <GetRegistersFromStack>:
{
   12aec:	b500      	push	{lr}
   12aee:	b08d      	sub	sp, #52	; 0x34
   12af0:	9003      	str	r0, [sp, #12]
  volatile uint32_t r0  = fault_stack_address[0];
   12af2:	9b03      	ldr	r3, [sp, #12]
   12af4:	681b      	ldr	r3, [r3, #0]
   12af6:	930b      	str	r3, [sp, #44]	; 0x2c
  volatile uint32_t r1  = fault_stack_address[1];
   12af8:	9b03      	ldr	r3, [sp, #12]
   12afa:	685b      	ldr	r3, [r3, #4]
   12afc:	930a      	str	r3, [sp, #40]	; 0x28
  volatile uint32_t r2  = fault_stack_address[2];
   12afe:	9b03      	ldr	r3, [sp, #12]
   12b00:	689b      	ldr	r3, [r3, #8]
   12b02:	9309      	str	r3, [sp, #36]	; 0x24
  volatile uint32_t r3  = fault_stack_address[3];
   12b04:	9b03      	ldr	r3, [sp, #12]
   12b06:	68db      	ldr	r3, [r3, #12]
   12b08:	9308      	str	r3, [sp, #32]
  volatile uint32_t r12 = fault_stack_address[4];
   12b0a:	9b03      	ldr	r3, [sp, #12]
   12b0c:	691b      	ldr	r3, [r3, #16]
   12b0e:	9307      	str	r3, [sp, #28]
  volatile uint32_t lr = fault_stack_address[5];
   12b10:	9b03      	ldr	r3, [sp, #12]
   12b12:	695b      	ldr	r3, [r3, #20]
   12b14:	9306      	str	r3, [sp, #24]
  volatile uint32_t pc = fault_stack_address[6];
   12b16:	9b03      	ldr	r3, [sp, #12]
   12b18:	699b      	ldr	r3, [r3, #24]
   12b1a:	9305      	str	r3, [sp, #20]
  volatile uint32_t psr = fault_stack_address[7];
   12b1c:	9b03      	ldr	r3, [sp, #12]
   12b1e:	69db      	ldr	r3, [r3, #28]
   12b20:	9304      	str	r3, [sp, #16]
  printf(SJ2_BACKGROUND_RED "Hard Fault Exception Occurred!\n" SJ2_COLOR_RESET);
   12b22:	480d      	ldr	r0, [pc, #52]	; (12b58 <GetRegistersFromStack+0x6c>)
   12b24:	f001 fb36 	bl	14194 <printf>
  printf("r0: 0x%08" PRIX32 ", r1: 0x%08" PRIX32
   12b28:	990b      	ldr	r1, [sp, #44]	; 0x2c
   12b2a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   12b2c:	9809      	ldr	r0, [sp, #36]	; 0x24
   12b2e:	9b08      	ldr	r3, [sp, #32]
   12b30:	9300      	str	r3, [sp, #0]
   12b32:	4603      	mov	r3, r0
   12b34:	4809      	ldr	r0, [pc, #36]	; (12b5c <GetRegistersFromStack+0x70>)
   12b36:	f001 fb2d 	bl	14194 <printf>
  printf("r12: 0x%08" PRIX32 ", lr: 0x%08" PRIX32
   12b3a:	9907      	ldr	r1, [sp, #28]
   12b3c:	9a06      	ldr	r2, [sp, #24]
   12b3e:	9805      	ldr	r0, [sp, #20]
   12b40:	9b04      	ldr	r3, [sp, #16]
   12b42:	9300      	str	r3, [sp, #0]
   12b44:	4603      	mov	r3, r0
   12b46:	4806      	ldr	r0, [pc, #24]	; (12b60 <GetRegistersFromStack+0x74>)
   12b48:	f001 fb24 	bl	14194 <printf>
  debug::PrintBacktrace(true, reinterpret_cast<void *>(pc));
   12b4c:	9b05      	ldr	r3, [sp, #20]
   12b4e:	4619      	mov	r1, r3
   12b50:	2001      	movs	r0, #1
   12b52:	f7fd fe65 	bl	10820 <debug::PrintBacktrace(bool, void*)>
   12b56:	e7fe      	b.n	12b56 <GetRegistersFromStack+0x6a>
   12b58:	00017e58 	.word	0x00017e58
   12b5c:	00017e84 	.word	0x00017e84
   12b60:	00017eb8 	.word	0x00017eb8

00012b64 <FirmwareStdOut(int)>:
}
Stdout out = HostWrite;
Stdin in   = HostRead;
#else
int FirmwareStdOut(int data)
{
   12b64:	b530      	push	{r4, r5, lr}
   12b66:	b083      	sub	sp, #12
   12b68:	4675      	mov	r5, lr
   12b6a:	9001      	str	r0, [sp, #4]
   12b6c:	462b      	mov	r3, r5
   12b6e:	4619      	mov	r1, r3
   12b70:	4809      	ldr	r0, [pc, #36]	; (12b98 <FirmwareStdOut(int)+0x34>)
   12b72:	f000 f8b5 	bl	12ce0 <__cyg_profile_func_enter>
  uart0.Send(static_cast<uint8_t>(data));
   12b76:	9b01      	ldr	r3, [sp, #4]
   12b78:	b2db      	uxtb	r3, r3
   12b7a:	4619      	mov	r1, r3
   12b7c:	4807      	ldr	r0, [pc, #28]	; (12b9c <FirmwareStdOut(int)+0x38>)
   12b7e:	f7ff f835 	bl	11bec <Uart::Send(unsigned char)>
  return 1;
   12b82:	2401      	movs	r4, #1
   12b84:	462b      	mov	r3, r5
   12b86:	4619      	mov	r1, r3
   12b88:	4803      	ldr	r0, [pc, #12]	; (12b98 <FirmwareStdOut(int)+0x34>)
   12b8a:	f000 f8bd 	bl	12d08 <__cyg_profile_func_exit>
   12b8e:	4623      	mov	r3, r4
}
   12b90:	4618      	mov	r0, r3
   12b92:	b003      	add	sp, #12
   12b94:	bd30      	pop	{r4, r5, pc}
   12b96:	bf00      	nop
   12b98:	00012b65 	.word	0x00012b65
   12b9c:	10000074 	.word	0x10000074

00012ba0 <_exit>:
  }
  // Dummy implementation of exit with return code placed into
  // Arm register r3
  // NOLINTNEXTLINE(readability-identifier-naming)
  void _exit([[maybe_unused]] int rc)
  {
   12ba0:	b500      	push	{lr}
   12ba2:	b083      	sub	sp, #12
   12ba4:	4673      	mov	r3, lr
   12ba6:	9001      	str	r0, [sp, #4]
   12ba8:	4619      	mov	r1, r3
   12baa:	4802      	ldr	r0, [pc, #8]	; (12bb4 <_exit+0x14>)
   12bac:	f000 f898 	bl	12ce0 <__cyg_profile_func_enter>
    while (1)
    {
      continue;
   12bb0:	bf00      	nop
    while (1)
   12bb2:	e7fd      	b.n	12bb0 <_exit+0x10>
   12bb4:	00012ba1 	.word	0x00012ba1

00012bb8 <_getpid>:
    }
  }
  // Dummy implementation of getpid
  // NOLINTNEXTLINE(readability-identifier-naming)
  int _getpid()
  {
   12bb8:	b538      	push	{r3, r4, r5, lr}
   12bba:	4675      	mov	r5, lr
   12bbc:	462b      	mov	r3, r5
   12bbe:	4619      	mov	r1, r3
   12bc0:	4805      	ldr	r0, [pc, #20]	; (12bd8 <_getpid+0x20>)
   12bc2:	f000 f88d 	bl	12ce0 <__cyg_profile_func_enter>
    return 1;
   12bc6:	2401      	movs	r4, #1
   12bc8:	462b      	mov	r3, r5
   12bca:	4619      	mov	r1, r3
   12bcc:	4802      	ldr	r0, [pc, #8]	; (12bd8 <_getpid+0x20>)
   12bce:	f000 f89b 	bl	12d08 <__cyg_profile_func_exit>
   12bd2:	4623      	mov	r3, r4
  }
   12bd4:	4618      	mov	r0, r3
   12bd6:	bd38      	pop	{r3, r4, r5, pc}
   12bd8:	00012bb9 	.word	0x00012bb9

00012bdc <_kill>:
  // Dummy implementation of kill
  // NOLINTNEXTLINE(readability-identifier-naming)
  int _kill(int, int)
  {
   12bdc:	b530      	push	{r4, r5, lr}
   12bde:	b083      	sub	sp, #12
   12be0:	4675      	mov	r5, lr
   12be2:	9001      	str	r0, [sp, #4]
   12be4:	9100      	str	r1, [sp, #0]
   12be6:	462b      	mov	r3, r5
   12be8:	4619      	mov	r1, r3
   12bea:	4807      	ldr	r0, [pc, #28]	; (12c08 <_kill+0x2c>)
   12bec:	f000 f878 	bl	12ce0 <__cyg_profile_func_enter>
    return -1;
   12bf0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   12bf4:	462b      	mov	r3, r5
   12bf6:	4619      	mov	r1, r3
   12bf8:	4803      	ldr	r0, [pc, #12]	; (12c08 <_kill+0x2c>)
   12bfa:	f000 f885 	bl	12d08 <__cyg_profile_func_exit>
   12bfe:	4623      	mov	r3, r4
  }
   12c00:	4618      	mov	r0, r3
   12c02:	b003      	add	sp, #12
   12c04:	bd30      	pop	{r4, r5, pc}
   12c06:	bf00      	nop
   12c08:	00012bdd 	.word	0x00012bdd

00012c0c <_putchar>:
    }
    return length;
  }
  // Needed by third party printf library
  void _putchar(char character)  // NOLINT
  {
   12c0c:	b510      	push	{r4, lr}
   12c0e:	b082      	sub	sp, #8
   12c10:	4674      	mov	r4, lr
   12c12:	4603      	mov	r3, r0
   12c14:	f88d 3007 	strb.w	r3, [sp, #7]
   12c18:	4623      	mov	r3, r4
   12c1a:	4619      	mov	r1, r3
   12c1c:	4808      	ldr	r0, [pc, #32]	; (12c40 <_putchar+0x34>)
   12c1e:	f000 f85f 	bl	12ce0 <__cyg_profile_func_enter>
    out(character);
   12c22:	4b08      	ldr	r3, [pc, #32]	; (12c44 <_putchar+0x38>)
   12c24:	681b      	ldr	r3, [r3, #0]
   12c26:	f89d 2007 	ldrb.w	r2, [sp, #7]
   12c2a:	4610      	mov	r0, r2
   12c2c:	4798      	blx	r3
   12c2e:	4623      	mov	r3, r4
   12c30:	4619      	mov	r1, r3
   12c32:	4803      	ldr	r0, [pc, #12]	; (12c40 <_putchar+0x34>)
   12c34:	f000 f868 	bl	12d08 <__cyg_profile_func_exit>
  }
   12c38:	bf00      	nop
   12c3a:	b002      	add	sp, #8
   12c3c:	bd10      	pop	{r4, pc}
   12c3e:	bf00      	nop
   12c40:	00012c0d 	.word	0x00012c0d
   12c44:	10000184 	.word	0x10000184

00012c48 <putchar>:

  // Overload default libnano putchar() with a more optimal version that does
  // not use dynamic memory
  int putchar(int character)  // NOLINT
  {
   12c48:	b530      	push	{r4, r5, lr}
   12c4a:	b083      	sub	sp, #12
   12c4c:	4674      	mov	r4, lr
   12c4e:	9001      	str	r0, [sp, #4]
   12c50:	4623      	mov	r3, r4
   12c52:	4619      	mov	r1, r3
   12c54:	4808      	ldr	r0, [pc, #32]	; (12c78 <putchar+0x30>)
   12c56:	f000 f843 	bl	12ce0 <__cyg_profile_func_enter>
    return out(character);
   12c5a:	4b08      	ldr	r3, [pc, #32]	; (12c7c <putchar+0x34>)
   12c5c:	681b      	ldr	r3, [r3, #0]
   12c5e:	9801      	ldr	r0, [sp, #4]
   12c60:	4798      	blx	r3
   12c62:	4605      	mov	r5, r0
   12c64:	4623      	mov	r3, r4
   12c66:	4619      	mov	r1, r3
   12c68:	4803      	ldr	r0, [pc, #12]	; (12c78 <putchar+0x30>)
   12c6a:	f000 f84d 	bl	12d08 <__cyg_profile_func_exit>
   12c6e:	462b      	mov	r3, r5
  }
   12c70:	4618      	mov	r0, r3
   12c72:	b003      	add	sp, #12
   12c74:	bd30      	pop	{r4, r5, pc}
   12c76:	bf00      	nop
   12c78:	00012c49 	.word	0x00012c49
   12c7c:	10000184 	.word	0x10000184

00012c80 <puts>:

  // Overload default libnano puts() with a more optimal version that does
  // not use dynamic memory
  int puts(const char * str)  // NOLINT
  {
   12c80:	b530      	push	{r4, r5, lr}
   12c82:	b085      	sub	sp, #20
   12c84:	4675      	mov	r5, lr
   12c86:	9001      	str	r0, [sp, #4]
   12c88:	462b      	mov	r3, r5
   12c8a:	4619      	mov	r1, r3
   12c8c:	4812      	ldr	r0, [pc, #72]	; (12cd8 <puts+0x58>)
   12c8e:	f000 f827 	bl	12ce0 <__cyg_profile_func_enter>
    int i;
    for (i = 0; str[i] != '\0'; i++)
   12c92:	2300      	movs	r3, #0
   12c94:	9303      	str	r3, [sp, #12]
   12c96:	9b03      	ldr	r3, [sp, #12]
   12c98:	9a01      	ldr	r2, [sp, #4]
   12c9a:	4413      	add	r3, r2
   12c9c:	781b      	ldrb	r3, [r3, #0]
   12c9e:	2b00      	cmp	r3, #0
   12ca0:	d00b      	beq.n	12cba <puts+0x3a>
    {
      out(str[i]);
   12ca2:	4b0e      	ldr	r3, [pc, #56]	; (12cdc <puts+0x5c>)
   12ca4:	681b      	ldr	r3, [r3, #0]
   12ca6:	9a03      	ldr	r2, [sp, #12]
   12ca8:	9901      	ldr	r1, [sp, #4]
   12caa:	440a      	add	r2, r1
   12cac:	7812      	ldrb	r2, [r2, #0]
   12cae:	4610      	mov	r0, r2
   12cb0:	4798      	blx	r3
    for (i = 0; str[i] != '\0'; i++)
   12cb2:	9b03      	ldr	r3, [sp, #12]
   12cb4:	3301      	adds	r3, #1
   12cb6:	9303      	str	r3, [sp, #12]
   12cb8:	e7ed      	b.n	12c96 <puts+0x16>
    }
    out('\n');
   12cba:	4b08      	ldr	r3, [pc, #32]	; (12cdc <puts+0x5c>)
   12cbc:	681b      	ldr	r3, [r3, #0]
   12cbe:	200a      	movs	r0, #10
   12cc0:	4798      	blx	r3
    return i;
   12cc2:	9c03      	ldr	r4, [sp, #12]
   12cc4:	462b      	mov	r3, r5
   12cc6:	4619      	mov	r1, r3
   12cc8:	4803      	ldr	r0, [pc, #12]	; (12cd8 <puts+0x58>)
   12cca:	f000 f81d 	bl	12d08 <__cyg_profile_func_exit>
   12cce:	4623      	mov	r3, r4
  }
   12cd0:	4618      	mov	r0, r3
   12cd2:	b005      	add	sp, #20
   12cd4:	bd30      	pop	{r4, r5, pc}
   12cd6:	bf00      	nop
   12cd8:	00012c81 	.word	0x00012c81
   12cdc:	10000184 	.word	0x10000184

00012ce0 <__cyg_profile_func_enter>:
  // =============================
  void * stack_trace[config::kBacktraceDepth] = { nullptr };
  size_t stack_depth = 0;

  void __cyg_profile_func_enter(void *, void * call_site)  // NOLINT
  {
   12ce0:	b082      	sub	sp, #8
   12ce2:	9001      	str	r0, [sp, #4]
   12ce4:	9100      	str	r1, [sp, #0]
    stack_trace[stack_depth++] = call_site;
   12ce6:	9a00      	ldr	r2, [sp, #0]
   12ce8:	4b05      	ldr	r3, [pc, #20]	; (12d00 <__cyg_profile_func_enter+0x20>)
   12cea:	681b      	ldr	r3, [r3, #0]
   12cec:	1c59      	adds	r1, r3, #1
   12cee:	4804      	ldr	r0, [pc, #16]	; (12d00 <__cyg_profile_func_enter+0x20>)
   12cf0:	6001      	str	r1, [r0, #0]
   12cf2:	4904      	ldr	r1, [pc, #16]	; (12d04 <__cyg_profile_func_enter+0x24>)
   12cf4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
   12cf8:	bf00      	nop
   12cfa:	b002      	add	sp, #8
   12cfc:	4770      	bx	lr
   12cfe:	bf00      	nop
   12d00:	100003c0 	.word	0x100003c0
   12d04:	100002c0 	.word	0x100002c0

00012d08 <__cyg_profile_func_exit>:

  void __cyg_profile_func_exit(void *, void *)  // NOLINT
  {
   12d08:	b082      	sub	sp, #8
   12d0a:	9001      	str	r0, [sp, #4]
   12d0c:	9100      	str	r1, [sp, #0]
    stack_depth--;
   12d0e:	4b04      	ldr	r3, [pc, #16]	; (12d20 <__cyg_profile_func_exit+0x18>)
   12d10:	681b      	ldr	r3, [r3, #0]
   12d12:	3b01      	subs	r3, #1
   12d14:	4a02      	ldr	r2, [pc, #8]	; (12d20 <__cyg_profile_func_exit+0x18>)
   12d16:	6013      	str	r3, [r2, #0]
  }
   12d18:	bf00      	nop
   12d1a:	b002      	add	sp, #8
   12d1c:	4770      	bx	lr
   12d1e:	bf00      	nop
   12d20:	100003c0 	.word	0x100003c0

00012d24 <GetStackTrace()>:
}

void ** GetStackTrace()
{
   12d24:	b538      	push	{r3, r4, r5, lr}
   12d26:	4675      	mov	r5, lr
   12d28:	462b      	mov	r3, r5
   12d2a:	4619      	mov	r1, r3
   12d2c:	4805      	ldr	r0, [pc, #20]	; (12d44 <GetStackTrace()+0x20>)
   12d2e:	f7ff ffd7 	bl	12ce0 <__cyg_profile_func_enter>
  return stack_trace;
   12d32:	4c05      	ldr	r4, [pc, #20]	; (12d48 <GetStackTrace()+0x24>)
   12d34:	462b      	mov	r3, r5
   12d36:	4619      	mov	r1, r3
   12d38:	4802      	ldr	r0, [pc, #8]	; (12d44 <GetStackTrace()+0x20>)
   12d3a:	f7ff ffe5 	bl	12d08 <__cyg_profile_func_exit>
   12d3e:	4623      	mov	r3, r4
}
   12d40:	4618      	mov	r0, r3
   12d42:	bd38      	pop	{r3, r4, r5, pc}
   12d44:	00012d25 	.word	0x00012d25
   12d48:	100002c0 	.word	0x100002c0

00012d4c <GetStackDepth()>:

size_t GetStackDepth()
{
   12d4c:	b538      	push	{r3, r4, r5, lr}
   12d4e:	4675      	mov	r5, lr
   12d50:	462b      	mov	r3, r5
   12d52:	4619      	mov	r1, r3
   12d54:	4806      	ldr	r0, [pc, #24]	; (12d70 <GetStackDepth()+0x24>)
   12d56:	f7ff ffc3 	bl	12ce0 <__cyg_profile_func_enter>
  return stack_depth;
   12d5a:	4b06      	ldr	r3, [pc, #24]	; (12d74 <GetStackDepth()+0x28>)
   12d5c:	681c      	ldr	r4, [r3, #0]
   12d5e:	462b      	mov	r3, r5
   12d60:	4619      	mov	r1, r3
   12d62:	4803      	ldr	r0, [pc, #12]	; (12d70 <GetStackDepth()+0x24>)
   12d64:	f7ff ffd0 	bl	12d08 <__cyg_profile_func_exit>
   12d68:	4623      	mov	r3, r4
}
   12d6a:	4618      	mov	r0, r3
   12d6c:	bd38      	pop	{r3, r4, r5, pc}
   12d6e:	bf00      	nop
   12d70:	00012d4d 	.word	0x00012d4d
   12d74:	100003c0 	.word	0x100003c0

00012d78 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
   12d78:	b510      	push	{r4, lr}
   12d7a:	b084      	sub	sp, #16
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
   12d7c:	4b29      	ldr	r3, [pc, #164]	; (12e24 <vTaskSwitchContext+0xac>)
   12d7e:	681b      	ldr	r3, [r3, #0]
   12d80:	2b00      	cmp	r3, #0
   12d82:	d003      	beq.n	12d8c <vTaskSwitchContext+0x14>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
   12d84:	4b28      	ldr	r3, [pc, #160]	; (12e28 <vTaskSwitchContext+0xb0>)
   12d86:	2201      	movs	r2, #1
   12d88:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
   12d8a:	e047      	b.n	12e1c <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
   12d8c:	4b26      	ldr	r3, [pc, #152]	; (12e28 <vTaskSwitchContext+0xb0>)
   12d8e:	2200      	movs	r2, #0
   12d90:	601a      	str	r2, [r3, #0]
					ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
   12d92:	f7ff fa8d 	bl	122b0 <UptimeRTOS>
   12d96:	4603      	mov	r3, r0
   12d98:	460c      	mov	r4, r1
   12d9a:	461a      	mov	r2, r3
   12d9c:	4b23      	ldr	r3, [pc, #140]	; (12e2c <vTaskSwitchContext+0xb4>)
   12d9e:	601a      	str	r2, [r3, #0]
				if( ulTotalRunTime > ulTaskSwitchedInTime )
   12da0:	4b22      	ldr	r3, [pc, #136]	; (12e2c <vTaskSwitchContext+0xb4>)
   12da2:	681a      	ldr	r2, [r3, #0]
   12da4:	4b22      	ldr	r3, [pc, #136]	; (12e30 <vTaskSwitchContext+0xb8>)
   12da6:	681b      	ldr	r3, [r3, #0]
   12da8:	429a      	cmp	r2, r3
   12daa:	d909      	bls.n	12dc0 <vTaskSwitchContext+0x48>
					pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
   12dac:	4b21      	ldr	r3, [pc, #132]	; (12e34 <vTaskSwitchContext+0xbc>)
   12dae:	681b      	ldr	r3, [r3, #0]
   12db0:	6d59      	ldr	r1, [r3, #84]	; 0x54
   12db2:	4a1e      	ldr	r2, [pc, #120]	; (12e2c <vTaskSwitchContext+0xb4>)
   12db4:	6810      	ldr	r0, [r2, #0]
   12db6:	4a1e      	ldr	r2, [pc, #120]	; (12e30 <vTaskSwitchContext+0xb8>)
   12db8:	6812      	ldr	r2, [r2, #0]
   12dba:	1a82      	subs	r2, r0, r2
   12dbc:	440a      	add	r2, r1
   12dbe:	655a      	str	r2, [r3, #84]	; 0x54
				ulTaskSwitchedInTime = ulTotalRunTime;
   12dc0:	4b1a      	ldr	r3, [pc, #104]	; (12e2c <vTaskSwitchContext+0xb4>)
   12dc2:	681b      	ldr	r3, [r3, #0]
   12dc4:	4a1a      	ldr	r2, [pc, #104]	; (12e30 <vTaskSwitchContext+0xb8>)
   12dc6:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
   12dc8:	4b1b      	ldr	r3, [pc, #108]	; (12e38 <vTaskSwitchContext+0xc0>)
   12dca:	681b      	ldr	r3, [r3, #0]
   12dcc:	9301      	str	r3, [sp, #4]
	/* Generic helper function. */
	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitmap )
	{
	uint8_t ucReturn;

		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
   12dce:	9b01      	ldr	r3, [sp, #4]
   12dd0:	fab3 f383 	clz	r3, r3
   12dd4:	f88d 3003 	strb.w	r3, [sp, #3]
		return ucReturn;
   12dd8:	f89d 3003 	ldrb.w	r3, [sp, #3]
   12ddc:	f1c3 031f 	rsb	r3, r3, #31
   12de0:	9303      	str	r3, [sp, #12]
   12de2:	9a03      	ldr	r2, [sp, #12]
   12de4:	4613      	mov	r3, r2
   12de6:	009b      	lsls	r3, r3, #2
   12de8:	4413      	add	r3, r2
   12dea:	009b      	lsls	r3, r3, #2
   12dec:	4a13      	ldr	r2, [pc, #76]	; (12e3c <vTaskSwitchContext+0xc4>)
   12dee:	4413      	add	r3, r2
   12df0:	9302      	str	r3, [sp, #8]
   12df2:	9b02      	ldr	r3, [sp, #8]
   12df4:	685b      	ldr	r3, [r3, #4]
   12df6:	685a      	ldr	r2, [r3, #4]
   12df8:	9b02      	ldr	r3, [sp, #8]
   12dfa:	605a      	str	r2, [r3, #4]
   12dfc:	9b02      	ldr	r3, [sp, #8]
   12dfe:	685a      	ldr	r2, [r3, #4]
   12e00:	9b02      	ldr	r3, [sp, #8]
   12e02:	3308      	adds	r3, #8
   12e04:	429a      	cmp	r2, r3
   12e06:	d104      	bne.n	12e12 <vTaskSwitchContext+0x9a>
   12e08:	9b02      	ldr	r3, [sp, #8]
   12e0a:	685b      	ldr	r3, [r3, #4]
   12e0c:	685a      	ldr	r2, [r3, #4]
   12e0e:	9b02      	ldr	r3, [sp, #8]
   12e10:	605a      	str	r2, [r3, #4]
   12e12:	9b02      	ldr	r3, [sp, #8]
   12e14:	685b      	ldr	r3, [r3, #4]
   12e16:	68db      	ldr	r3, [r3, #12]
   12e18:	4a06      	ldr	r2, [pc, #24]	; (12e34 <vTaskSwitchContext+0xbc>)
   12e1a:	6013      	str	r3, [r2, #0]
}
   12e1c:	bf00      	nop
   12e1e:	b004      	add	sp, #16
   12e20:	bd10      	pop	{r4, pc}
   12e22:	bf00      	nop
   12e24:	10000434 	.word	0x10000434
   12e28:	10000430 	.word	0x10000430
   12e2c:	1000043c 	.word	0x1000043c
   12e30:	10000438 	.word	0x10000438
   12e34:	100003c4 	.word	0x100003c4
   12e38:	1000042c 	.word	0x1000042c
   12e3c:	100003c8 	.word	0x100003c8

00012e40 <vPortSVCHandler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
   12e40:	4b07      	ldr	r3, [pc, #28]	; (12e60 <pxCurrentTCBConst2>)
   12e42:	6819      	ldr	r1, [r3, #0]
   12e44:	6808      	ldr	r0, [r1, #0]
   12e46:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12e4a:	f380 8809 	msr	PSP, r0
   12e4e:	f3bf 8f6f 	isb	sy
   12e52:	f04f 0000 	mov.w	r0, #0
   12e56:	f380 8811 	msr	BASEPRI, r0
   12e5a:	4770      	bx	lr
   12e5c:	f3af 8000 	nop.w

00012e60 <pxCurrentTCBConst2>:
   12e60:	100003c4 	.word	0x100003c4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
   12e64:	bf00      	nop
   12e66:	bf00      	nop
   12e68:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   12e6c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

00012e70 <xPortPendSVHandler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
   12e70:	f3ef 8009 	mrs	r0, PSP
   12e74:	f3bf 8f6f 	isb	sy
   12e78:	4b15      	ldr	r3, [pc, #84]	; (12ed0 <pxCurrentTCBConst>)
   12e7a:	681a      	ldr	r2, [r3, #0]
   12e7c:	f01e 0f10 	tst.w	lr, #16
   12e80:	bf08      	it	eq
   12e82:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
   12e86:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12e8a:	6010      	str	r0, [r2, #0]
   12e8c:	e92d 0009 	stmdb	sp!, {r0, r3}
   12e90:	f04f 0028 	mov.w	r0, #40	; 0x28
   12e94:	f380 8811 	msr	BASEPRI, r0
   12e98:	f3bf 8f4f 	dsb	sy
   12e9c:	f3bf 8f6f 	isb	sy
   12ea0:	f7ff ff6a 	bl	12d78 <vTaskSwitchContext>
   12ea4:	f04f 0000 	mov.w	r0, #0
   12ea8:	f380 8811 	msr	BASEPRI, r0
   12eac:	bc09      	pop	{r0, r3}
   12eae:	6819      	ldr	r1, [r3, #0]
   12eb0:	6808      	ldr	r0, [r1, #0]
   12eb2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12eb6:	f01e 0f10 	tst.w	lr, #16
   12eba:	bf08      	it	eq
   12ebc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
   12ec0:	f380 8809 	msr	PSP, r0
   12ec4:	f3bf 8f6f 	isb	sy
   12ec8:	4770      	bx	lr
   12eca:	bf00      	nop
   12ecc:	f3af 8000 	nop.w

00012ed0 <pxCurrentTCBConst>:
   12ed0:	100003c4 	.word	0x100003c4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
   12ed4:	bf00      	nop
   12ed6:	bf00      	nop

00012ed8 <_out_null(char, void*, unsigned int, unsigned int)>:
}


// internal null output
static inline void _out_null(char character, void* buffer, size_t idx, size_t maxlen)
{
   12ed8:	b510      	push	{r4, lr}
   12eda:	b084      	sub	sp, #16
   12edc:	4674      	mov	r4, lr
   12ede:	9102      	str	r1, [sp, #8]
   12ee0:	9201      	str	r2, [sp, #4]
   12ee2:	9300      	str	r3, [sp, #0]
   12ee4:	4603      	mov	r3, r0
   12ee6:	f88d 300f 	strb.w	r3, [sp, #15]
   12eea:	4623      	mov	r3, r4
   12eec:	4619      	mov	r1, r3
   12eee:	4805      	ldr	r0, [pc, #20]	; (12f04 <_out_null(char, void*, unsigned int, unsigned int)+0x2c>)
   12ef0:	f7ff fef6 	bl	12ce0 <__cyg_profile_func_enter>
   12ef4:	4623      	mov	r3, r4
   12ef6:	4619      	mov	r1, r3
   12ef8:	4802      	ldr	r0, [pc, #8]	; (12f04 <_out_null(char, void*, unsigned int, unsigned int)+0x2c>)
   12efa:	f7ff ff05 	bl	12d08 <__cyg_profile_func_exit>
  (void)character; (void)buffer; (void)idx; (void)maxlen;
}
   12efe:	bf00      	nop
   12f00:	b004      	add	sp, #16
   12f02:	bd10      	pop	{r4, pc}
   12f04:	00012ed9 	.word	0x00012ed9

00012f08 <_out_char(char, void*, unsigned int, unsigned int)>:


// internal _putchar wrapper
static inline void _out_char(char character, void* buffer, size_t idx, size_t maxlen)
{
   12f08:	b510      	push	{r4, lr}
   12f0a:	b084      	sub	sp, #16
   12f0c:	4674      	mov	r4, lr
   12f0e:	9102      	str	r1, [sp, #8]
   12f10:	9201      	str	r2, [sp, #4]
   12f12:	9300      	str	r3, [sp, #0]
   12f14:	4603      	mov	r3, r0
   12f16:	f88d 300f 	strb.w	r3, [sp, #15]
   12f1a:	4623      	mov	r3, r4
   12f1c:	4619      	mov	r1, r3
   12f1e:	480a      	ldr	r0, [pc, #40]	; (12f48 <_out_char(char, void*, unsigned int, unsigned int)+0x40>)
   12f20:	f7ff fede 	bl	12ce0 <__cyg_profile_func_enter>
  (void)buffer; (void)idx; (void)maxlen;
  if (character) {
   12f24:	f89d 300f 	ldrb.w	r3, [sp, #15]
   12f28:	2b00      	cmp	r3, #0
   12f2a:	d004      	beq.n	12f36 <_out_char(char, void*, unsigned int, unsigned int)+0x2e>
    _putchar(character);
   12f2c:	f89d 300f 	ldrb.w	r3, [sp, #15]
   12f30:	4618      	mov	r0, r3
   12f32:	f7ff fe6b 	bl	12c0c <_putchar>
   12f36:	4623      	mov	r3, r4
   12f38:	4619      	mov	r1, r3
   12f3a:	4803      	ldr	r0, [pc, #12]	; (12f48 <_out_char(char, void*, unsigned int, unsigned int)+0x40>)
   12f3c:	f7ff fee4 	bl	12d08 <__cyg_profile_func_exit>
  }
}
   12f40:	bf00      	nop
   12f42:	b004      	add	sp, #16
   12f44:	bd10      	pop	{r4, pc}
   12f46:	bf00      	nop
   12f48:	00012f09 	.word	0x00012f09

00012f4c <_strlen(char const*)>:


// internal strlen
// \return The length of the string (excluding the terminating 0)
static inline unsigned int _strlen(const char* str)
{
   12f4c:	b530      	push	{r4, r5, lr}
   12f4e:	b085      	sub	sp, #20
   12f50:	4674      	mov	r4, lr
   12f52:	9001      	str	r0, [sp, #4]
   12f54:	4623      	mov	r3, r4
   12f56:	4619      	mov	r1, r3
   12f58:	480c      	ldr	r0, [pc, #48]	; (12f8c <_strlen(char const*)+0x40>)
   12f5a:	f7ff fec1 	bl	12ce0 <__cyg_profile_func_enter>
  const char* s;
  for (s = str; *s; ++s);
   12f5e:	9b01      	ldr	r3, [sp, #4]
   12f60:	9303      	str	r3, [sp, #12]
   12f62:	9b03      	ldr	r3, [sp, #12]
   12f64:	781b      	ldrb	r3, [r3, #0]
   12f66:	2b00      	cmp	r3, #0
   12f68:	d003      	beq.n	12f72 <_strlen(char const*)+0x26>
   12f6a:	9b03      	ldr	r3, [sp, #12]
   12f6c:	3301      	adds	r3, #1
   12f6e:	9303      	str	r3, [sp, #12]
   12f70:	e7f7      	b.n	12f62 <_strlen(char const*)+0x16>
  return (unsigned int)(s - str);
   12f72:	9a03      	ldr	r2, [sp, #12]
   12f74:	9b01      	ldr	r3, [sp, #4]
   12f76:	1ad3      	subs	r3, r2, r3
   12f78:	461d      	mov	r5, r3
   12f7a:	4623      	mov	r3, r4
   12f7c:	4619      	mov	r1, r3
   12f7e:	4803      	ldr	r0, [pc, #12]	; (12f8c <_strlen(char const*)+0x40>)
   12f80:	f7ff fec2 	bl	12d08 <__cyg_profile_func_exit>
   12f84:	462b      	mov	r3, r5
}
   12f86:	4618      	mov	r0, r3
   12f88:	b005      	add	sp, #20
   12f8a:	bd30      	pop	{r4, r5, pc}
   12f8c:	00012f4d 	.word	0x00012f4d

00012f90 <_is_digit(char)>:


// internal test if char is a digit (0-9)
// \return true if char is a digit
static inline bool _is_digit(char ch)
{
   12f90:	b530      	push	{r4, r5, lr}
   12f92:	b083      	sub	sp, #12
   12f94:	4675      	mov	r5, lr
   12f96:	4603      	mov	r3, r0
   12f98:	f88d 3007 	strb.w	r3, [sp, #7]
   12f9c:	462b      	mov	r3, r5
   12f9e:	4619      	mov	r1, r3
   12fa0:	480b      	ldr	r0, [pc, #44]	; (12fd0 <_is_digit(char)+0x40>)
   12fa2:	f7ff fe9d 	bl	12ce0 <__cyg_profile_func_enter>
  return (ch >= '0') && (ch <= '9');
   12fa6:	f89d 3007 	ldrb.w	r3, [sp, #7]
   12faa:	2b2f      	cmp	r3, #47	; 0x2f
   12fac:	d905      	bls.n	12fba <_is_digit(char)+0x2a>
   12fae:	f89d 3007 	ldrb.w	r3, [sp, #7]
   12fb2:	2b39      	cmp	r3, #57	; 0x39
   12fb4:	d801      	bhi.n	12fba <_is_digit(char)+0x2a>
   12fb6:	2401      	movs	r4, #1
   12fb8:	e000      	b.n	12fbc <_is_digit(char)+0x2c>
   12fba:	2400      	movs	r4, #0
   12fbc:	462b      	mov	r3, r5
   12fbe:	4619      	mov	r1, r3
   12fc0:	4803      	ldr	r0, [pc, #12]	; (12fd0 <_is_digit(char)+0x40>)
   12fc2:	f7ff fea1 	bl	12d08 <__cyg_profile_func_exit>
   12fc6:	4623      	mov	r3, r4
}
   12fc8:	4618      	mov	r0, r3
   12fca:	b003      	add	sp, #12
   12fcc:	bd30      	pop	{r4, r5, pc}
   12fce:	bf00      	nop
   12fd0:	00012f91 	.word	0x00012f91

00012fd4 <_atoi(char const**)>:


// internal ASCII string to unsigned int conversion
static unsigned int _atoi(const char** str)
{
   12fd4:	b530      	push	{r4, r5, lr}
   12fd6:	b085      	sub	sp, #20
   12fd8:	4675      	mov	r5, lr
   12fda:	9001      	str	r0, [sp, #4]
   12fdc:	462b      	mov	r3, r5
   12fde:	4619      	mov	r1, r3
   12fe0:	4813      	ldr	r0, [pc, #76]	; (13030 <_atoi(char const**)+0x5c>)
   12fe2:	f7ff fe7d 	bl	12ce0 <__cyg_profile_func_enter>
  unsigned int i = 0U;
   12fe6:	2300      	movs	r3, #0
   12fe8:	9303      	str	r3, [sp, #12]
  while (_is_digit(**str)) {
   12fea:	9b01      	ldr	r3, [sp, #4]
   12fec:	681b      	ldr	r3, [r3, #0]
   12fee:	781b      	ldrb	r3, [r3, #0]
   12ff0:	4618      	mov	r0, r3
   12ff2:	f7ff ffcd 	bl	12f90 <_is_digit(char)>
   12ff6:	4603      	mov	r3, r0
   12ff8:	2b00      	cmp	r3, #0
   12ffa:	d00f      	beq.n	1301c <_atoi(char const**)+0x48>
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
   12ffc:	9a03      	ldr	r2, [sp, #12]
   12ffe:	4613      	mov	r3, r2
   13000:	009b      	lsls	r3, r3, #2
   13002:	4413      	add	r3, r2
   13004:	005b      	lsls	r3, r3, #1
   13006:	4618      	mov	r0, r3
   13008:	9b01      	ldr	r3, [sp, #4]
   1300a:	681b      	ldr	r3, [r3, #0]
   1300c:	1c59      	adds	r1, r3, #1
   1300e:	9a01      	ldr	r2, [sp, #4]
   13010:	6011      	str	r1, [r2, #0]
   13012:	781b      	ldrb	r3, [r3, #0]
   13014:	4403      	add	r3, r0
   13016:	3b30      	subs	r3, #48	; 0x30
   13018:	9303      	str	r3, [sp, #12]
  while (_is_digit(**str)) {
   1301a:	e7e6      	b.n	12fea <_atoi(char const**)+0x16>
  }
  return i;
   1301c:	9c03      	ldr	r4, [sp, #12]
   1301e:	462b      	mov	r3, r5
   13020:	4619      	mov	r1, r3
   13022:	4803      	ldr	r0, [pc, #12]	; (13030 <_atoi(char const**)+0x5c>)
   13024:	f7ff fe70 	bl	12d08 <__cyg_profile_func_exit>
   13028:	4623      	mov	r3, r4
}
   1302a:	4618      	mov	r0, r3
   1302c:	b005      	add	sp, #20
   1302e:	bd30      	pop	{r4, r5, pc}
   13030:	00012fd5 	.word	0x00012fd5

00013034 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)>:


// internal itoa format
static size_t _ntoa_format(out_fct_type out, char* buffer, size_t idx, size_t maxlen, char* buf, size_t len, bool negative, unsigned int base, unsigned int prec, unsigned int width, unsigned int flags)
{
   13034:	b530      	push	{r4, r5, lr}
   13036:	b089      	sub	sp, #36	; 0x24
   13038:	4675      	mov	r5, lr
   1303a:	9003      	str	r0, [sp, #12]
   1303c:	9102      	str	r1, [sp, #8]
   1303e:	9201      	str	r2, [sp, #4]
   13040:	9300      	str	r3, [sp, #0]
   13042:	462b      	mov	r3, r5
   13044:	4619      	mov	r1, r3
   13046:	4891      	ldr	r0, [pc, #580]	; (1328c <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x258>)
   13048:	f7ff fe4a 	bl	12ce0 <__cyg_profile_func_enter>
  const size_t start_idx = idx;
   1304c:	9b01      	ldr	r3, [sp, #4]
   1304e:	9305      	str	r3, [sp, #20]

  // pad leading zeros
  while (!(flags & FLAGS_LEFT) && (len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
   13050:	9b12      	ldr	r3, [sp, #72]	; 0x48
   13052:	f003 0302 	and.w	r3, r3, #2
   13056:	2b00      	cmp	r3, #0
   13058:	d10e      	bne.n	13078 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x44>
   1305a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   1305c:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1305e:	429a      	cmp	r2, r3
   13060:	d20a      	bcs.n	13078 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x44>
   13062:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   13064:	2b1f      	cmp	r3, #31
   13066:	d807      	bhi.n	13078 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x44>
    buf[len++] = '0';
   13068:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1306a:	1c5a      	adds	r2, r3, #1
   1306c:	920d      	str	r2, [sp, #52]	; 0x34
   1306e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   13070:	4413      	add	r3, r2
   13072:	2230      	movs	r2, #48	; 0x30
   13074:	701a      	strb	r2, [r3, #0]
  while (!(flags & FLAGS_LEFT) && (len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
   13076:	e7eb      	b.n	13050 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1c>
  }
  while (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
   13078:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1307a:	f003 0302 	and.w	r3, r3, #2
   1307e:	2b00      	cmp	r3, #0
   13080:	d113      	bne.n	130aa <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x76>
   13082:	9b12      	ldr	r3, [sp, #72]	; 0x48
   13084:	f003 0301 	and.w	r3, r3, #1
   13088:	2b00      	cmp	r3, #0
   1308a:	d00e      	beq.n	130aa <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x76>
   1308c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   1308e:	9b11      	ldr	r3, [sp, #68]	; 0x44
   13090:	429a      	cmp	r2, r3
   13092:	d20a      	bcs.n	130aa <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x76>
   13094:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   13096:	2b1f      	cmp	r3, #31
   13098:	d807      	bhi.n	130aa <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x76>
    buf[len++] = '0';
   1309a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1309c:	1c5a      	adds	r2, r3, #1
   1309e:	920d      	str	r2, [sp, #52]	; 0x34
   130a0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   130a2:	4413      	add	r3, r2
   130a4:	2230      	movs	r2, #48	; 0x30
   130a6:	701a      	strb	r2, [r3, #0]
  while (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
   130a8:	e7e6      	b.n	13078 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x44>
  }

  // handle hash
  if (flags & FLAGS_HASH) {
   130aa:	9b12      	ldr	r3, [sp, #72]	; 0x48
   130ac:	f003 0310 	and.w	r3, r3, #16
   130b0:	2b00      	cmp	r3, #0
   130b2:	d058      	beq.n	13166 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x132>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
   130b4:	9b12      	ldr	r3, [sp, #72]	; 0x48
   130b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
   130ba:	2b00      	cmp	r3, #0
   130bc:	d116      	bne.n	130ec <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xb8>
   130be:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   130c0:	2b00      	cmp	r3, #0
   130c2:	d013      	beq.n	130ec <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xb8>
   130c4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   130c6:	9b10      	ldr	r3, [sp, #64]	; 0x40
   130c8:	429a      	cmp	r2, r3
   130ca:	d003      	beq.n	130d4 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xa0>
   130cc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   130ce:	9b11      	ldr	r3, [sp, #68]	; 0x44
   130d0:	429a      	cmp	r2, r3
   130d2:	d10b      	bne.n	130ec <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xb8>
      len--;
   130d4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   130d6:	3b01      	subs	r3, #1
   130d8:	930d      	str	r3, [sp, #52]	; 0x34
      if (len && (base == 16U)) {
   130da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   130dc:	2b00      	cmp	r3, #0
   130de:	d005      	beq.n	130ec <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xb8>
   130e0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   130e2:	2b10      	cmp	r3, #16
   130e4:	d102      	bne.n	130ec <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xb8>
        len--;
   130e6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   130e8:	3b01      	subs	r3, #1
   130ea:	930d      	str	r3, [sp, #52]	; 0x34
      }
    }
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
   130ec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   130ee:	2b10      	cmp	r3, #16
   130f0:	d10f      	bne.n	13112 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xde>
   130f2:	9b12      	ldr	r3, [sp, #72]	; 0x48
   130f4:	f003 0320 	and.w	r3, r3, #32
   130f8:	2b00      	cmp	r3, #0
   130fa:	d10a      	bne.n	13112 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xde>
   130fc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   130fe:	2b1f      	cmp	r3, #31
   13100:	d807      	bhi.n	13112 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xde>
      buf[len++] = 'x';
   13102:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   13104:	1c5a      	adds	r2, r3, #1
   13106:	920d      	str	r2, [sp, #52]	; 0x34
   13108:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1310a:	4413      	add	r3, r2
   1310c:	2278      	movs	r2, #120	; 0x78
   1310e:	701a      	strb	r2, [r3, #0]
   13110:	e01f      	b.n	13152 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x11e>
    }
    else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
   13112:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   13114:	2b10      	cmp	r3, #16
   13116:	d10f      	bne.n	13138 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x104>
   13118:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1311a:	f003 0320 	and.w	r3, r3, #32
   1311e:	2b00      	cmp	r3, #0
   13120:	d00a      	beq.n	13138 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x104>
   13122:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   13124:	2b1f      	cmp	r3, #31
   13126:	d807      	bhi.n	13138 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x104>
      buf[len++] = 'X';
   13128:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1312a:	1c5a      	adds	r2, r3, #1
   1312c:	920d      	str	r2, [sp, #52]	; 0x34
   1312e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   13130:	4413      	add	r3, r2
   13132:	2258      	movs	r2, #88	; 0x58
   13134:	701a      	strb	r2, [r3, #0]
   13136:	e00c      	b.n	13152 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x11e>
    }
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
   13138:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1313a:	2b02      	cmp	r3, #2
   1313c:	d109      	bne.n	13152 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x11e>
   1313e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   13140:	2b1f      	cmp	r3, #31
   13142:	d806      	bhi.n	13152 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x11e>
      buf[len++] = 'b';
   13144:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   13146:	1c5a      	adds	r2, r3, #1
   13148:	920d      	str	r2, [sp, #52]	; 0x34
   1314a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1314c:	4413      	add	r3, r2
   1314e:	2262      	movs	r2, #98	; 0x62
   13150:	701a      	strb	r2, [r3, #0]
    }
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
   13152:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   13154:	2b1f      	cmp	r3, #31
   13156:	d806      	bhi.n	13166 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x132>
      buf[len++] = '0';
   13158:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1315a:	1c5a      	adds	r2, r3, #1
   1315c:	920d      	str	r2, [sp, #52]	; 0x34
   1315e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   13160:	4413      	add	r3, r2
   13162:	2230      	movs	r2, #48	; 0x30
   13164:	701a      	strb	r2, [r3, #0]
    }
  }

  // handle sign
  if (len && (len == width) && (negative || (flags & FLAGS_PLUS) || (flags & FLAGS_SPACE))) {
   13166:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   13168:	2b00      	cmp	r3, #0
   1316a:	d014      	beq.n	13196 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x162>
   1316c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   1316e:	9b11      	ldr	r3, [sp, #68]	; 0x44
   13170:	429a      	cmp	r2, r3
   13172:	d110      	bne.n	13196 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x162>
   13174:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
   13178:	2b00      	cmp	r3, #0
   1317a:	d109      	bne.n	13190 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x15c>
   1317c:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1317e:	f003 0304 	and.w	r3, r3, #4
   13182:	2b00      	cmp	r3, #0
   13184:	d104      	bne.n	13190 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x15c>
   13186:	9b12      	ldr	r3, [sp, #72]	; 0x48
   13188:	f003 0308 	and.w	r3, r3, #8
   1318c:	2b00      	cmp	r3, #0
   1318e:	d002      	beq.n	13196 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x162>
    len--;
   13190:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   13192:	3b01      	subs	r3, #1
   13194:	930d      	str	r3, [sp, #52]	; 0x34
  }
  if (len < PRINTF_NTOA_BUFFER_SIZE) {
   13196:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   13198:	2b1f      	cmp	r3, #31
   1319a:	d824      	bhi.n	131e6 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1b2>
    if (negative) {
   1319c:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
   131a0:	2b00      	cmp	r3, #0
   131a2:	d007      	beq.n	131b4 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x180>
      buf[len++] = '-';
   131a4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   131a6:	1c5a      	adds	r2, r3, #1
   131a8:	920d      	str	r2, [sp, #52]	; 0x34
   131aa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   131ac:	4413      	add	r3, r2
   131ae:	222d      	movs	r2, #45	; 0x2d
   131b0:	701a      	strb	r2, [r3, #0]
   131b2:	e018      	b.n	131e6 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1b2>
    }
    else if (flags & FLAGS_PLUS) {
   131b4:	9b12      	ldr	r3, [sp, #72]	; 0x48
   131b6:	f003 0304 	and.w	r3, r3, #4
   131ba:	2b00      	cmp	r3, #0
   131bc:	d007      	beq.n	131ce <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x19a>
      buf[len++] = '+';  // ignore the space if the '+' exists
   131be:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   131c0:	1c5a      	adds	r2, r3, #1
   131c2:	920d      	str	r2, [sp, #52]	; 0x34
   131c4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   131c6:	4413      	add	r3, r2
   131c8:	222b      	movs	r2, #43	; 0x2b
   131ca:	701a      	strb	r2, [r3, #0]
   131cc:	e00b      	b.n	131e6 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1b2>
    }
    else if (flags & FLAGS_SPACE) {
   131ce:	9b12      	ldr	r3, [sp, #72]	; 0x48
   131d0:	f003 0308 	and.w	r3, r3, #8
   131d4:	2b00      	cmp	r3, #0
   131d6:	d006      	beq.n	131e6 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1b2>
      buf[len++] = ' ';
   131d8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   131da:	1c5a      	adds	r2, r3, #1
   131dc:	920d      	str	r2, [sp, #52]	; 0x34
   131de:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   131e0:	4413      	add	r3, r2
   131e2:	2220      	movs	r2, #32
   131e4:	701a      	strb	r2, [r3, #0]
    }
  }

  // pad spaces up to given width
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
   131e6:	9b12      	ldr	r3, [sp, #72]	; 0x48
   131e8:	f003 0302 	and.w	r3, r3, #2
   131ec:	2b00      	cmp	r3, #0
   131ee:	d116      	bne.n	1321e <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1ea>
   131f0:	9b12      	ldr	r3, [sp, #72]	; 0x48
   131f2:	f003 0301 	and.w	r3, r3, #1
   131f6:	2b00      	cmp	r3, #0
   131f8:	d111      	bne.n	1321e <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1ea>
    for (size_t i = len; i < width; i++) {
   131fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   131fc:	9307      	str	r3, [sp, #28]
   131fe:	9a07      	ldr	r2, [sp, #28]
   13200:	9b11      	ldr	r3, [sp, #68]	; 0x44
   13202:	429a      	cmp	r2, r3
   13204:	d20b      	bcs.n	1321e <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1ea>
      out(' ', buffer, idx++, maxlen);
   13206:	9a01      	ldr	r2, [sp, #4]
   13208:	1c53      	adds	r3, r2, #1
   1320a:	9301      	str	r3, [sp, #4]
   1320c:	9c03      	ldr	r4, [sp, #12]
   1320e:	9b00      	ldr	r3, [sp, #0]
   13210:	9902      	ldr	r1, [sp, #8]
   13212:	2020      	movs	r0, #32
   13214:	47a0      	blx	r4
    for (size_t i = len; i < width; i++) {
   13216:	9b07      	ldr	r3, [sp, #28]
   13218:	3301      	adds	r3, #1
   1321a:	9307      	str	r3, [sp, #28]
   1321c:	e7ef      	b.n	131fe <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1ca>
    }
  }

  // reverse string
  for (size_t i = 0U; i < len; i++) {
   1321e:	2300      	movs	r3, #0
   13220:	9306      	str	r3, [sp, #24]
   13222:	9a06      	ldr	r2, [sp, #24]
   13224:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   13226:	429a      	cmp	r2, r3
   13228:	d211      	bcs.n	1324e <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x21a>
    out(buf[len - i - 1U], buffer, idx++, maxlen);
   1322a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   1322c:	9b06      	ldr	r3, [sp, #24]
   1322e:	1ad3      	subs	r3, r2, r3
   13230:	3b01      	subs	r3, #1
   13232:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   13234:	4413      	add	r3, r2
   13236:	7818      	ldrb	r0, [r3, #0]
   13238:	9a01      	ldr	r2, [sp, #4]
   1323a:	1c53      	adds	r3, r2, #1
   1323c:	9301      	str	r3, [sp, #4]
   1323e:	9c03      	ldr	r4, [sp, #12]
   13240:	9b00      	ldr	r3, [sp, #0]
   13242:	9902      	ldr	r1, [sp, #8]
   13244:	47a0      	blx	r4
  for (size_t i = 0U; i < len; i++) {
   13246:	9b06      	ldr	r3, [sp, #24]
   13248:	3301      	adds	r3, #1
   1324a:	9306      	str	r3, [sp, #24]
   1324c:	e7e9      	b.n	13222 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1ee>
  }

  // append pad spaces up to given width
  if (flags & FLAGS_LEFT) {
   1324e:	9b12      	ldr	r3, [sp, #72]	; 0x48
   13250:	f003 0302 	and.w	r3, r3, #2
   13254:	2b00      	cmp	r3, #0
   13256:	d00e      	beq.n	13276 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x242>
    while (idx - start_idx < width) {
   13258:	9a01      	ldr	r2, [sp, #4]
   1325a:	9b05      	ldr	r3, [sp, #20]
   1325c:	1ad3      	subs	r3, r2, r3
   1325e:	9a11      	ldr	r2, [sp, #68]	; 0x44
   13260:	429a      	cmp	r2, r3
   13262:	d908      	bls.n	13276 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x242>
      out(' ', buffer, idx++, maxlen);
   13264:	9a01      	ldr	r2, [sp, #4]
   13266:	1c53      	adds	r3, r2, #1
   13268:	9301      	str	r3, [sp, #4]
   1326a:	9c03      	ldr	r4, [sp, #12]
   1326c:	9b00      	ldr	r3, [sp, #0]
   1326e:	9902      	ldr	r1, [sp, #8]
   13270:	2020      	movs	r0, #32
   13272:	47a0      	blx	r4
    while (idx - start_idx < width) {
   13274:	e7f0      	b.n	13258 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x224>
    }
  }

  return idx;
   13276:	9c01      	ldr	r4, [sp, #4]
   13278:	462b      	mov	r3, r5
   1327a:	4619      	mov	r1, r3
   1327c:	4803      	ldr	r0, [pc, #12]	; (1328c <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x258>)
   1327e:	f7ff fd43 	bl	12d08 <__cyg_profile_func_exit>
   13282:	4623      	mov	r3, r4
}
   13284:	4618      	mov	r0, r3
   13286:	b009      	add	sp, #36	; 0x24
   13288:	bd30      	pop	{r4, r5, pc}
   1328a:	bf00      	nop
   1328c:	00013035 	.word	0x00013035

00013290 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)>:


// internal itoa for 'long' type
static size_t _ntoa_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long value, bool negative, unsigned long base, unsigned int prec, unsigned int width, unsigned int flags)
{
   13290:	b530      	push	{r4, r5, lr}
   13292:	b097      	sub	sp, #92	; 0x5c
   13294:	4674      	mov	r4, lr
   13296:	900b      	str	r0, [sp, #44]	; 0x2c
   13298:	910a      	str	r1, [sp, #40]	; 0x28
   1329a:	9209      	str	r2, [sp, #36]	; 0x24
   1329c:	9308      	str	r3, [sp, #32]
   1329e:	4623      	mov	r3, r4
   132a0:	4619      	mov	r1, r3
   132a2:	4833      	ldr	r0, [pc, #204]	; (13370 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0xe0>)
   132a4:	f7ff fd1c 	bl	12ce0 <__cyg_profile_func_enter>
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
   132a8:	2300      	movs	r3, #0
   132aa:	9315      	str	r3, [sp, #84]	; 0x54

  // no hash for 0 values
  if (!value) {
   132ac:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   132ae:	2b00      	cmp	r3, #0
   132b0:	d103      	bne.n	132ba <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x2a>
    flags &= ~FLAGS_HASH;
   132b2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   132b4:	f023 0310 	bic.w	r3, r3, #16
   132b8:	931f      	str	r3, [sp, #124]	; 0x7c
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
   132ba:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   132bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
   132c0:	2b00      	cmp	r3, #0
   132c2:	d002      	beq.n	132ca <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x3a>
   132c4:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   132c6:	2b00      	cmp	r3, #0
   132c8:	d033      	beq.n	13332 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0xa2>
    do {
      const char digit = (char)(value % base);
   132ca:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   132cc:	9a1c      	ldr	r2, [sp, #112]	; 0x70
   132ce:	fbb3 f2f2 	udiv	r2, r3, r2
   132d2:	991c      	ldr	r1, [sp, #112]	; 0x70
   132d4:	fb01 f202 	mul.w	r2, r1, r2
   132d8:	1a9b      	subs	r3, r3, r2
   132da:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
   132de:	f89d 3053 	ldrb.w	r3, [sp, #83]	; 0x53
   132e2:	2b09      	cmp	r3, #9
   132e4:	d804      	bhi.n	132f0 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x60>
   132e6:	f89d 3053 	ldrb.w	r3, [sp, #83]	; 0x53
   132ea:	3330      	adds	r3, #48	; 0x30
   132ec:	b2da      	uxtb	r2, r3
   132ee:	e00d      	b.n	1330c <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x7c>
   132f0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   132f2:	f003 0320 	and.w	r3, r3, #32
   132f6:	2b00      	cmp	r3, #0
   132f8:	d001      	beq.n	132fe <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x6e>
   132fa:	2241      	movs	r2, #65	; 0x41
   132fc:	e000      	b.n	13300 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x70>
   132fe:	2261      	movs	r2, #97	; 0x61
   13300:	f89d 3053 	ldrb.w	r3, [sp, #83]	; 0x53
   13304:	4413      	add	r3, r2
   13306:	b2db      	uxtb	r3, r3
   13308:	3b0a      	subs	r3, #10
   1330a:	b2da      	uxtb	r2, r3
   1330c:	9b15      	ldr	r3, [sp, #84]	; 0x54
   1330e:	1c59      	adds	r1, r3, #1
   13310:	9115      	str	r1, [sp, #84]	; 0x54
   13312:	a916      	add	r1, sp, #88	; 0x58
   13314:	440b      	add	r3, r1
   13316:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
   1331a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   1331c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
   1331e:	fbb2 f3f3 	udiv	r3, r2, r3
   13322:	931a      	str	r3, [sp, #104]	; 0x68
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
   13324:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   13326:	2b00      	cmp	r3, #0
   13328:	d003      	beq.n	13332 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0xa2>
   1332a:	9b15      	ldr	r3, [sp, #84]	; 0x54
   1332c:	2b1f      	cmp	r3, #31
   1332e:	d800      	bhi.n	13332 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0xa2>
    do {
   13330:	e7cb      	b.n	132ca <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x3a>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
   13332:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   13334:	9306      	str	r3, [sp, #24]
   13336:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   13338:	9305      	str	r3, [sp, #20]
   1333a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   1333c:	9304      	str	r3, [sp, #16]
   1333e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
   13340:	9303      	str	r3, [sp, #12]
   13342:	f89d 306c 	ldrb.w	r3, [sp, #108]	; 0x6c
   13346:	9302      	str	r3, [sp, #8]
   13348:	9b15      	ldr	r3, [sp, #84]	; 0x54
   1334a:	9301      	str	r3, [sp, #4]
   1334c:	ab0c      	add	r3, sp, #48	; 0x30
   1334e:	9300      	str	r3, [sp, #0]
   13350:	9b08      	ldr	r3, [sp, #32]
   13352:	9a09      	ldr	r2, [sp, #36]	; 0x24
   13354:	990a      	ldr	r1, [sp, #40]	; 0x28
   13356:	980b      	ldr	r0, [sp, #44]	; 0x2c
   13358:	f7ff fe6c 	bl	13034 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)>
   1335c:	4605      	mov	r5, r0
   1335e:	4623      	mov	r3, r4
   13360:	4619      	mov	r1, r3
   13362:	4803      	ldr	r0, [pc, #12]	; (13370 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0xe0>)
   13364:	f7ff fcd0 	bl	12d08 <__cyg_profile_func_exit>
   13368:	462b      	mov	r3, r5
}
   1336a:	4618      	mov	r0, r3
   1336c:	b017      	add	sp, #92	; 0x5c
   1336e:	bd30      	pop	{r4, r5, pc}
   13370:	00013291 	.word	0x00013291

00013374 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)>:


// internal itoa for 'long long' type
#if defined(PRINTF_SUPPORT_LONG_LONG)
static size_t _ntoa_long_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long long value, bool negative, unsigned long long base, unsigned int prec, unsigned int width, unsigned int flags)
{
   13374:	b530      	push	{r4, r5, lr}
   13376:	b097      	sub	sp, #92	; 0x5c
   13378:	4675      	mov	r5, lr
   1337a:	900b      	str	r0, [sp, #44]	; 0x2c
   1337c:	910a      	str	r1, [sp, #40]	; 0x28
   1337e:	9209      	str	r2, [sp, #36]	; 0x24
   13380:	9308      	str	r3, [sp, #32]
   13382:	462b      	mov	r3, r5
   13384:	4619      	mov	r1, r3
   13386:	4837      	ldr	r0, [pc, #220]	; (13464 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0xf0>)
   13388:	f7ff fcaa 	bl	12ce0 <__cyg_profile_func_enter>
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
   1338c:	2300      	movs	r3, #0
   1338e:	9315      	str	r3, [sp, #84]	; 0x54

  // no hash for 0 values
  if (!value) {
   13390:	e9dd 341a 	ldrd	r3, r4, [sp, #104]	; 0x68
   13394:	4323      	orrs	r3, r4
   13396:	d103      	bne.n	133a0 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0x2c>
    flags &= ~FLAGS_HASH;
   13398:	9b22      	ldr	r3, [sp, #136]	; 0x88
   1339a:	f023 0310 	bic.w	r3, r3, #16
   1339e:	9322      	str	r3, [sp, #136]	; 0x88
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
   133a0:	9b22      	ldr	r3, [sp, #136]	; 0x88
   133a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
   133a6:	2b00      	cmp	r3, #0
   133a8:	d003      	beq.n	133b2 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0x3e>
   133aa:	e9dd 341a 	ldrd	r3, r4, [sp, #104]	; 0x68
   133ae:	4323      	orrs	r3, r4
   133b0:	d039      	beq.n	13426 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0xb2>
    do {
      const char digit = (char)(value % base);
   133b2:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
   133b6:	e9dd 231e 	ldrd	r2, r3, [sp, #120]	; 0x78
   133ba:	f003 fde7 	bl	16f8c <__aeabi_uldivmod>
   133be:	461c      	mov	r4, r3
   133c0:	4613      	mov	r3, r2
   133c2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
   133c6:	f89d 3053 	ldrb.w	r3, [sp, #83]	; 0x53
   133ca:	2b09      	cmp	r3, #9
   133cc:	d804      	bhi.n	133d8 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0x64>
   133ce:	f89d 3053 	ldrb.w	r3, [sp, #83]	; 0x53
   133d2:	3330      	adds	r3, #48	; 0x30
   133d4:	b2da      	uxtb	r2, r3
   133d6:	e00d      	b.n	133f4 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0x80>
   133d8:	9b22      	ldr	r3, [sp, #136]	; 0x88
   133da:	f003 0320 	and.w	r3, r3, #32
   133de:	2b00      	cmp	r3, #0
   133e0:	d001      	beq.n	133e6 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0x72>
   133e2:	2241      	movs	r2, #65	; 0x41
   133e4:	e000      	b.n	133e8 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0x74>
   133e6:	2261      	movs	r2, #97	; 0x61
   133e8:	f89d 3053 	ldrb.w	r3, [sp, #83]	; 0x53
   133ec:	4413      	add	r3, r2
   133ee:	b2db      	uxtb	r3, r3
   133f0:	3b0a      	subs	r3, #10
   133f2:	b2da      	uxtb	r2, r3
   133f4:	9b15      	ldr	r3, [sp, #84]	; 0x54
   133f6:	1c59      	adds	r1, r3, #1
   133f8:	9115      	str	r1, [sp, #84]	; 0x54
   133fa:	a916      	add	r1, sp, #88	; 0x58
   133fc:	440b      	add	r3, r1
   133fe:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
   13402:	e9dd 231e 	ldrd	r2, r3, [sp, #120]	; 0x78
   13406:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
   1340a:	f003 fdbf 	bl	16f8c <__aeabi_uldivmod>
   1340e:	4603      	mov	r3, r0
   13410:	460c      	mov	r4, r1
   13412:	e9cd 341a 	strd	r3, r4, [sp, #104]	; 0x68
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
   13416:	e9dd 341a 	ldrd	r3, r4, [sp, #104]	; 0x68
   1341a:	4323      	orrs	r3, r4
   1341c:	d003      	beq.n	13426 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0xb2>
   1341e:	9b15      	ldr	r3, [sp, #84]	; 0x54
   13420:	2b1f      	cmp	r3, #31
   13422:	d800      	bhi.n	13426 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0xb2>
    do {
   13424:	e7c5      	b.n	133b2 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0x3e>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
   13426:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   13428:	9a22      	ldr	r2, [sp, #136]	; 0x88
   1342a:	9206      	str	r2, [sp, #24]
   1342c:	9a21      	ldr	r2, [sp, #132]	; 0x84
   1342e:	9205      	str	r2, [sp, #20]
   13430:	9a20      	ldr	r2, [sp, #128]	; 0x80
   13432:	9204      	str	r2, [sp, #16]
   13434:	9303      	str	r3, [sp, #12]
   13436:	f89d 3070 	ldrb.w	r3, [sp, #112]	; 0x70
   1343a:	9302      	str	r3, [sp, #8]
   1343c:	9b15      	ldr	r3, [sp, #84]	; 0x54
   1343e:	9301      	str	r3, [sp, #4]
   13440:	ab0c      	add	r3, sp, #48	; 0x30
   13442:	9300      	str	r3, [sp, #0]
   13444:	9b08      	ldr	r3, [sp, #32]
   13446:	9a09      	ldr	r2, [sp, #36]	; 0x24
   13448:	990a      	ldr	r1, [sp, #40]	; 0x28
   1344a:	980b      	ldr	r0, [sp, #44]	; 0x2c
   1344c:	f7ff fdf2 	bl	13034 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)>
   13450:	4604      	mov	r4, r0
   13452:	462b      	mov	r3, r5
   13454:	4619      	mov	r1, r3
   13456:	4803      	ldr	r0, [pc, #12]	; (13464 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0xf0>)
   13458:	f7ff fc56 	bl	12d08 <__cyg_profile_func_exit>
   1345c:	4623      	mov	r3, r4
}
   1345e:	4618      	mov	r0, r3
   13460:	b017      	add	sp, #92	; 0x5c
   13462:	bd30      	pop	{r4, r5, pc}
   13464:	00013375 	.word	0x00013375

00013468 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)>:
#endif  // PRINTF_SUPPORT_LONG_LONG


#if defined(PRINTF_SUPPORT_FLOAT)
static size_t _ftoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value_param, unsigned int prec, unsigned int width, unsigned int flags)
{
   13468:	b530      	push	{r4, r5, lr}
   1346a:	b09b      	sub	sp, #108	; 0x6c
   1346c:	4675      	mov	r5, lr
   1346e:	9005      	str	r0, [sp, #20]
   13470:	9104      	str	r1, [sp, #16]
   13472:	9203      	str	r2, [sp, #12]
   13474:	9302      	str	r3, [sp, #8]
   13476:	ed8d 0b00 	vstr	d0, [sp]
   1347a:	462b      	mov	r3, r5
   1347c:	4619      	mov	r1, r3
   1347e:	48b7      	ldr	r0, [pc, #732]	; (1375c <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x2f4>)
   13480:	f7ff fc2e 	bl	12ce0 <__cyg_profile_func_enter>
  const size_t start_idx = idx;
   13484:	9b03      	ldr	r3, [sp, #12]
   13486:	9311      	str	r3, [sp, #68]	; 0x44

  float value = static_cast<float>(value_param);
   13488:	e9dd 0100 	ldrd	r0, r1, [sp]
   1348c:	f003 fd2e 	bl	16eec <__aeabi_d2f>
   13490:	4603      	mov	r3, r0
   13492:	9319      	str	r3, [sp, #100]	; 0x64

  char buf[PRINTF_FTOA_BUFFER_SIZE];
  size_t len  = 0U;
   13494:	2300      	movs	r3, #0
   13496:	9318      	str	r3, [sp, #96]	; 0x60
  float diff = 0.0;
   13498:	f04f 0300 	mov.w	r3, #0
   1349c:	9310      	str	r3, [sp, #64]	; 0x40

  // if input is larger than thres_max, revert to exponential
  const float thres_max = (float)0x7FFFFFFF;
   1349e:	f04f 439e 	mov.w	r3, #1325400064	; 0x4f000000
   134a2:	930f      	str	r3, [sp, #60]	; 0x3c

  // powers of 10
  static const float pow10[] = { 1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000 };

  // test for negative
  bool negative = false;
   134a4:	2300      	movs	r3, #0
   134a6:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
  if (value < 0) {
   134aa:	eddd 7a19 	vldr	s15, [sp, #100]	; 0x64
   134ae:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   134b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   134b6:	d50a      	bpl.n	134ce <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x66>
    negative = true;
   134b8:	2301      	movs	r3, #1
   134ba:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
    value = 0 - value;
   134be:	ed9f 7aa8 	vldr	s14, [pc, #672]	; 13760 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x2f8>
   134c2:	eddd 7a19 	vldr	s15, [sp, #100]	; 0x64
   134c6:	ee77 7a67 	vsub.f32	s15, s14, s15
   134ca:	edcd 7a19 	vstr	s15, [sp, #100]	; 0x64
  }

  // set default precision to 6, if not set explicitly
  if (!(flags & FLAGS_PRECISION)) {
   134ce:	9b20      	ldr	r3, [sp, #128]	; 0x80
   134d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
   134d4:	2b00      	cmp	r3, #0
   134d6:	d101      	bne.n	134dc <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x74>
    prec = 6U;
   134d8:	2306      	movs	r3, #6
   134da:	931e      	str	r3, [sp, #120]	; 0x78
  }
  // limit precision to 9, cause a prec >= 10 can lead to overflow errors
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
   134dc:	9b18      	ldr	r3, [sp, #96]	; 0x60
   134de:	2b1f      	cmp	r3, #31
   134e0:	d80e      	bhi.n	13500 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x98>
   134e2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   134e4:	2b09      	cmp	r3, #9
   134e6:	d90b      	bls.n	13500 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x98>
    buf[len++] = '0';
   134e8:	9b18      	ldr	r3, [sp, #96]	; 0x60
   134ea:	1c5a      	adds	r2, r3, #1
   134ec:	9218      	str	r2, [sp, #96]	; 0x60
   134ee:	aa1a      	add	r2, sp, #104	; 0x68
   134f0:	4413      	add	r3, r2
   134f2:	2230      	movs	r2, #48	; 0x30
   134f4:	f803 2c50 	strb.w	r2, [r3, #-80]
    prec--;
   134f8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   134fa:	3b01      	subs	r3, #1
   134fc:	931e      	str	r3, [sp, #120]	; 0x78
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
   134fe:	e7ed      	b.n	134dc <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x74>
  }

  int whole = (int)value;
   13500:	eddd 7a19 	vldr	s15, [sp, #100]	; 0x64
   13504:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   13508:	ee17 3a90 	vmov	r3, s15
   1350c:	9316      	str	r3, [sp, #88]	; 0x58
  float tmp = (value - whole) * pow10[prec];
   1350e:	9b16      	ldr	r3, [sp, #88]	; 0x58
   13510:	ee07 3a90 	vmov	s15, r3
   13514:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   13518:	ed9d 7a19 	vldr	s14, [sp, #100]	; 0x64
   1351c:	ee37 7a67 	vsub.f32	s14, s14, s15
   13520:	4a90      	ldr	r2, [pc, #576]	; (13764 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x2fc>)
   13522:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   13524:	009b      	lsls	r3, r3, #2
   13526:	4413      	add	r3, r2
   13528:	edd3 7a00 	vldr	s15, [r3]
   1352c:	ee67 7a27 	vmul.f32	s15, s14, s15
   13530:	edcd 7a0e 	vstr	s15, [sp, #56]	; 0x38
  unsigned long frac = (unsigned long)tmp;
   13534:	eddd 7a0e 	vldr	s15, [sp, #56]	; 0x38
   13538:	eefc 7ae7 	vcvt.u32.f32	s15, s15
   1353c:	ee17 3a90 	vmov	r3, s15
   13540:	9315      	str	r3, [sp, #84]	; 0x54
  diff = tmp - frac;
   13542:	9b15      	ldr	r3, [sp, #84]	; 0x54
   13544:	ee07 3a90 	vmov	s15, r3
   13548:	eef8 7a67 	vcvt.f32.u32	s15, s15
   1354c:	ed9d 7a0e 	vldr	s14, [sp, #56]	; 0x38
   13550:	ee77 7a67 	vsub.f32	s15, s14, s15
   13554:	edcd 7a10 	vstr	s15, [sp, #64]	; 0x40

  if (diff > 0.5) {
   13558:	eddd 7a10 	vldr	s15, [sp, #64]	; 0x40
   1355c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
   13560:	eef4 7ac7 	vcmpe.f32	s15, s14
   13564:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   13568:	dd18      	ble.n	1359c <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x134>
    ++frac;
   1356a:	9b15      	ldr	r3, [sp, #84]	; 0x54
   1356c:	3301      	adds	r3, #1
   1356e:	9315      	str	r3, [sp, #84]	; 0x54
    // handle rollover, e.g. case 0.99 with prec 1 is 1.0
    if (frac >= pow10[prec]) {
   13570:	9b15      	ldr	r3, [sp, #84]	; 0x54
   13572:	ee07 3a90 	vmov	s15, r3
   13576:	eeb8 7a67 	vcvt.f32.u32	s14, s15
   1357a:	4a7a      	ldr	r2, [pc, #488]	; (13764 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x2fc>)
   1357c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   1357e:	009b      	lsls	r3, r3, #2
   13580:	4413      	add	r3, r2
   13582:	edd3 7a00 	vldr	s15, [r3]
   13586:	eeb4 7ae7 	vcmpe.f32	s14, s15
   1358a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1358e:	db19      	blt.n	135c4 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x15c>
      frac = 0;
   13590:	2300      	movs	r3, #0
   13592:	9315      	str	r3, [sp, #84]	; 0x54
      ++whole;
   13594:	9b16      	ldr	r3, [sp, #88]	; 0x58
   13596:	3301      	adds	r3, #1
   13598:	9316      	str	r3, [sp, #88]	; 0x58
   1359a:	e013      	b.n	135c4 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x15c>
    }
  }
  else if ((diff == 0.5) && ((frac == 0U) || (frac & 1U))) {
   1359c:	eddd 7a10 	vldr	s15, [sp, #64]	; 0x40
   135a0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
   135a4:	eef4 7a47 	vcmp.f32	s15, s14
   135a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   135ac:	d10a      	bne.n	135c4 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x15c>
   135ae:	9b15      	ldr	r3, [sp, #84]	; 0x54
   135b0:	2b00      	cmp	r3, #0
   135b2:	d004      	beq.n	135be <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x156>
   135b4:	9b15      	ldr	r3, [sp, #84]	; 0x54
   135b6:	f003 0301 	and.w	r3, r3, #1
   135ba:	2b00      	cmp	r3, #0
   135bc:	d002      	beq.n	135c4 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x15c>
    // if halfway, round up if odd, OR if last digit is 0
    ++frac;
   135be:	9b15      	ldr	r3, [sp, #84]	; 0x54
   135c0:	3301      	adds	r3, #1
   135c2:	9315      	str	r3, [sp, #84]	; 0x54
  }

  // TBD: for very large numbers switch back to native sprintf for exponentials. Anyone want to write code to replace this?
  // Normal printf behavior is to print EVERY whole number digit which can be 100s of characters overflowing your buffers == bad
  if (value > thres_max) {
   135c4:	eddd 7a19 	vldr	s15, [sp, #100]	; 0x64
   135c8:	ed9f 7a67 	vldr	s14, [pc, #412]	; 13768 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x300>
   135cc:	eef4 7ac7 	vcmpe.f32	s15, s14
   135d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   135d4:	dd01      	ble.n	135da <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x172>
    return 0U;
   135d6:	2400      	movs	r4, #0
   135d8:	e156      	b.n	13888 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x420>
  }

  if (prec == 0U) {
   135da:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   135dc:	2b00      	cmp	r3, #0
   135de:	d129      	bne.n	13634 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x1cc>
    diff = value - (float)whole;
   135e0:	9b16      	ldr	r3, [sp, #88]	; 0x58
   135e2:	ee07 3a90 	vmov	s15, r3
   135e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   135ea:	ed9d 7a19 	vldr	s14, [sp, #100]	; 0x64
   135ee:	ee77 7a67 	vsub.f32	s15, s14, s15
   135f2:	edcd 7a10 	vstr	s15, [sp, #64]	; 0x40
    if (diff > 0.5) {
   135f6:	eddd 7a10 	vldr	s15, [sp, #64]	; 0x40
   135fa:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
   135fe:	eef4 7ac7 	vcmpe.f32	s15, s14
   13602:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   13606:	dd03      	ble.n	13610 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x1a8>
      // greater than 0.5, round up, e.g. 1.6 -> 2
      ++whole;
   13608:	9b16      	ldr	r3, [sp, #88]	; 0x58
   1360a:	3301      	adds	r3, #1
   1360c:	9316      	str	r3, [sp, #88]	; 0x58
   1360e:	e05f      	b.n	136d0 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x268>
    }
    else if ((diff == 0.5) && (whole & 1)) {
   13610:	eddd 7a10 	vldr	s15, [sp, #64]	; 0x40
   13614:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
   13618:	eef4 7a47 	vcmp.f32	s15, s14
   1361c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   13620:	d156      	bne.n	136d0 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x268>
   13622:	9b16      	ldr	r3, [sp, #88]	; 0x58
   13624:	f003 0301 	and.w	r3, r3, #1
   13628:	2b00      	cmp	r3, #0
   1362a:	d051      	beq.n	136d0 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x268>
      // exactly 0.5 and ODD, then round up
      // 1.5 -> 2, but 2.5 -> 2
      ++whole;
   1362c:	9b16      	ldr	r3, [sp, #88]	; 0x58
   1362e:	3301      	adds	r3, #1
   13630:	9316      	str	r3, [sp, #88]	; 0x58
   13632:	e04d      	b.n	136d0 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x268>
    }
  }
  else {
    unsigned int count = prec;
   13634:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   13636:	9314      	str	r3, [sp, #80]	; 0x50
    // now do fractional part, as an unsigned number
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
   13638:	9b18      	ldr	r3, [sp, #96]	; 0x60
   1363a:	2b1f      	cmp	r3, #31
   1363c:	d827      	bhi.n	1368e <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x226>
      --count;
   1363e:	9b14      	ldr	r3, [sp, #80]	; 0x50
   13640:	3b01      	subs	r3, #1
   13642:	9314      	str	r3, [sp, #80]	; 0x50
      buf[len++] = (char)(48U + (frac % 10U));
   13644:	9915      	ldr	r1, [sp, #84]	; 0x54
   13646:	4b49      	ldr	r3, [pc, #292]	; (1376c <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x304>)
   13648:	fba3 2301 	umull	r2, r3, r3, r1
   1364c:	08da      	lsrs	r2, r3, #3
   1364e:	4613      	mov	r3, r2
   13650:	009b      	lsls	r3, r3, #2
   13652:	4413      	add	r3, r2
   13654:	005b      	lsls	r3, r3, #1
   13656:	1aca      	subs	r2, r1, r3
   13658:	b2d3      	uxtb	r3, r2
   1365a:	3330      	adds	r3, #48	; 0x30
   1365c:	b2d9      	uxtb	r1, r3
   1365e:	9b18      	ldr	r3, [sp, #96]	; 0x60
   13660:	1c5a      	adds	r2, r3, #1
   13662:	9218      	str	r2, [sp, #96]	; 0x60
   13664:	aa1a      	add	r2, sp, #104	; 0x68
   13666:	4413      	add	r3, r2
   13668:	460a      	mov	r2, r1
   1366a:	f803 2c50 	strb.w	r2, [r3, #-80]
      if (!(frac /= 10U)) {
   1366e:	9b15      	ldr	r3, [sp, #84]	; 0x54
   13670:	4a3e      	ldr	r2, [pc, #248]	; (1376c <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x304>)
   13672:	fba2 2303 	umull	r2, r3, r2, r3
   13676:	08db      	lsrs	r3, r3, #3
   13678:	9315      	str	r3, [sp, #84]	; 0x54
   1367a:	9b15      	ldr	r3, [sp, #84]	; 0x54
   1367c:	2b00      	cmp	r3, #0
   1367e:	bf0c      	ite	eq
   13680:	2301      	moveq	r3, #1
   13682:	2300      	movne	r3, #0
   13684:	b2db      	uxtb	r3, r3
   13686:	2b00      	cmp	r3, #0
   13688:	d100      	bne.n	1368c <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x224>
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
   1368a:	e7d5      	b.n	13638 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x1d0>
        break;
   1368c:	bf00      	nop
      }
    }
    // add extra 0s
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
   1368e:	9b18      	ldr	r3, [sp, #96]	; 0x60
   13690:	2b1f      	cmp	r3, #31
   13692:	d806      	bhi.n	136a2 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x23a>
   13694:	9b14      	ldr	r3, [sp, #80]	; 0x50
   13696:	1e5a      	subs	r2, r3, #1
   13698:	9214      	str	r2, [sp, #80]	; 0x50
   1369a:	2b00      	cmp	r3, #0
   1369c:	d001      	beq.n	136a2 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x23a>
   1369e:	2301      	movs	r3, #1
   136a0:	e000      	b.n	136a4 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x23c>
   136a2:	2300      	movs	r3, #0
   136a4:	2b00      	cmp	r3, #0
   136a6:	d008      	beq.n	136ba <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x252>
      buf[len++] = '0';
   136a8:	9b18      	ldr	r3, [sp, #96]	; 0x60
   136aa:	1c5a      	adds	r2, r3, #1
   136ac:	9218      	str	r2, [sp, #96]	; 0x60
   136ae:	aa1a      	add	r2, sp, #104	; 0x68
   136b0:	4413      	add	r3, r2
   136b2:	2230      	movs	r2, #48	; 0x30
   136b4:	f803 2c50 	strb.w	r2, [r3, #-80]
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
   136b8:	e7e9      	b.n	1368e <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x226>
    }
    if (len < PRINTF_FTOA_BUFFER_SIZE) {
   136ba:	9b18      	ldr	r3, [sp, #96]	; 0x60
   136bc:	2b1f      	cmp	r3, #31
   136be:	d807      	bhi.n	136d0 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x268>
      // add decimal
      buf[len++] = '.';
   136c0:	9b18      	ldr	r3, [sp, #96]	; 0x60
   136c2:	1c5a      	adds	r2, r3, #1
   136c4:	9218      	str	r2, [sp, #96]	; 0x60
   136c6:	aa1a      	add	r2, sp, #104	; 0x68
   136c8:	4413      	add	r3, r2
   136ca:	222e      	movs	r2, #46	; 0x2e
   136cc:	f803 2c50 	strb.w	r2, [r3, #-80]
    }
  }

  // do whole part, number is reversed
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
   136d0:	9b18      	ldr	r3, [sp, #96]	; 0x60
   136d2:	2b1f      	cmp	r3, #31
   136d4:	d828      	bhi.n	13728 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x2c0>
    buf[len++] = (char)(48 + (whole % 10));
   136d6:	9a16      	ldr	r2, [sp, #88]	; 0x58
   136d8:	4b25      	ldr	r3, [pc, #148]	; (13770 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x308>)
   136da:	fb83 1302 	smull	r1, r3, r3, r2
   136de:	1099      	asrs	r1, r3, #2
   136e0:	17d3      	asrs	r3, r2, #31
   136e2:	1ac9      	subs	r1, r1, r3
   136e4:	460b      	mov	r3, r1
   136e6:	009b      	lsls	r3, r3, #2
   136e8:	440b      	add	r3, r1
   136ea:	005b      	lsls	r3, r3, #1
   136ec:	1ad1      	subs	r1, r2, r3
   136ee:	b2cb      	uxtb	r3, r1
   136f0:	3330      	adds	r3, #48	; 0x30
   136f2:	b2d9      	uxtb	r1, r3
   136f4:	9b18      	ldr	r3, [sp, #96]	; 0x60
   136f6:	1c5a      	adds	r2, r3, #1
   136f8:	9218      	str	r2, [sp, #96]	; 0x60
   136fa:	aa1a      	add	r2, sp, #104	; 0x68
   136fc:	4413      	add	r3, r2
   136fe:	460a      	mov	r2, r1
   13700:	f803 2c50 	strb.w	r2, [r3, #-80]
    if (!(whole /= 10)) {
   13704:	9b16      	ldr	r3, [sp, #88]	; 0x58
   13706:	4a1a      	ldr	r2, [pc, #104]	; (13770 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x308>)
   13708:	fb82 1203 	smull	r1, r2, r2, r3
   1370c:	1092      	asrs	r2, r2, #2
   1370e:	17db      	asrs	r3, r3, #31
   13710:	1ad3      	subs	r3, r2, r3
   13712:	9316      	str	r3, [sp, #88]	; 0x58
   13714:	9b16      	ldr	r3, [sp, #88]	; 0x58
   13716:	2b00      	cmp	r3, #0
   13718:	bf0c      	ite	eq
   1371a:	2301      	moveq	r3, #1
   1371c:	2300      	movne	r3, #0
   1371e:	b2db      	uxtb	r3, r3
   13720:	2b00      	cmp	r3, #0
   13722:	d100      	bne.n	13726 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x2be>
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
   13724:	e7d4      	b.n	136d0 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x268>
      break;
   13726:	bf00      	nop
    }
  }

  // pad leading zeros
  while (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
   13728:	9b20      	ldr	r3, [sp, #128]	; 0x80
   1372a:	f003 0302 	and.w	r3, r3, #2
   1372e:	2b00      	cmp	r3, #0
   13730:	d120      	bne.n	13774 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x30c>
   13732:	9b20      	ldr	r3, [sp, #128]	; 0x80
   13734:	f003 0301 	and.w	r3, r3, #1
   13738:	2b00      	cmp	r3, #0
   1373a:	d01b      	beq.n	13774 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x30c>
   1373c:	9a18      	ldr	r2, [sp, #96]	; 0x60
   1373e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   13740:	429a      	cmp	r2, r3
   13742:	d217      	bcs.n	13774 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x30c>
   13744:	9b18      	ldr	r3, [sp, #96]	; 0x60
   13746:	2b1f      	cmp	r3, #31
   13748:	d814      	bhi.n	13774 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x30c>
    buf[len++] = '0';
   1374a:	9b18      	ldr	r3, [sp, #96]	; 0x60
   1374c:	1c5a      	adds	r2, r3, #1
   1374e:	9218      	str	r2, [sp, #96]	; 0x60
   13750:	aa1a      	add	r2, sp, #104	; 0x68
   13752:	4413      	add	r3, r2
   13754:	2230      	movs	r2, #48	; 0x30
   13756:	f803 2c50 	strb.w	r2, [r3, #-80]
  while (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
   1375a:	e7e5      	b.n	13728 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x2c0>
   1375c:	00013469 	.word	0x00013469
   13760:	00000000 	.word	0x00000000
   13764:	00017f20 	.word	0x00017f20
   13768:	4f000000 	.word	0x4f000000
   1376c:	cccccccd 	.word	0xcccccccd
   13770:	66666667 	.word	0x66666667
  }

  // handle sign
  if ((len == width) && (negative || (flags & FLAGS_PLUS) || (flags & FLAGS_SPACE))) {
   13774:	9a18      	ldr	r2, [sp, #96]	; 0x60
   13776:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   13778:	429a      	cmp	r2, r3
   1377a:	d110      	bne.n	1379e <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x336>
   1377c:	f89d 305f 	ldrb.w	r3, [sp, #95]	; 0x5f
   13780:	2b00      	cmp	r3, #0
   13782:	d109      	bne.n	13798 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x330>
   13784:	9b20      	ldr	r3, [sp, #128]	; 0x80
   13786:	f003 0304 	and.w	r3, r3, #4
   1378a:	2b00      	cmp	r3, #0
   1378c:	d104      	bne.n	13798 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x330>
   1378e:	9b20      	ldr	r3, [sp, #128]	; 0x80
   13790:	f003 0308 	and.w	r3, r3, #8
   13794:	2b00      	cmp	r3, #0
   13796:	d002      	beq.n	1379e <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x336>
    len--;
   13798:	9b18      	ldr	r3, [sp, #96]	; 0x60
   1379a:	3b01      	subs	r3, #1
   1379c:	9318      	str	r3, [sp, #96]	; 0x60
  }
  if (len < PRINTF_FTOA_BUFFER_SIZE) {
   1379e:	9b18      	ldr	r3, [sp, #96]	; 0x60
   137a0:	2b1f      	cmp	r3, #31
   137a2:	d827      	bhi.n	137f4 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x38c>
    if (negative) {
   137a4:	f89d 305f 	ldrb.w	r3, [sp, #95]	; 0x5f
   137a8:	2b00      	cmp	r3, #0
   137aa:	d008      	beq.n	137be <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x356>
      buf[len++] = '-';
   137ac:	9b18      	ldr	r3, [sp, #96]	; 0x60
   137ae:	1c5a      	adds	r2, r3, #1
   137b0:	9218      	str	r2, [sp, #96]	; 0x60
   137b2:	aa1a      	add	r2, sp, #104	; 0x68
   137b4:	4413      	add	r3, r2
   137b6:	222d      	movs	r2, #45	; 0x2d
   137b8:	f803 2c50 	strb.w	r2, [r3, #-80]
   137bc:	e01a      	b.n	137f4 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x38c>
    }
    else if (flags & FLAGS_PLUS) {
   137be:	9b20      	ldr	r3, [sp, #128]	; 0x80
   137c0:	f003 0304 	and.w	r3, r3, #4
   137c4:	2b00      	cmp	r3, #0
   137c6:	d008      	beq.n	137da <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x372>
      buf[len++] = '+';  // ignore the space if the '+' exists
   137c8:	9b18      	ldr	r3, [sp, #96]	; 0x60
   137ca:	1c5a      	adds	r2, r3, #1
   137cc:	9218      	str	r2, [sp, #96]	; 0x60
   137ce:	aa1a      	add	r2, sp, #104	; 0x68
   137d0:	4413      	add	r3, r2
   137d2:	222b      	movs	r2, #43	; 0x2b
   137d4:	f803 2c50 	strb.w	r2, [r3, #-80]
   137d8:	e00c      	b.n	137f4 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x38c>
    }
    else if (flags & FLAGS_SPACE) {
   137da:	9b20      	ldr	r3, [sp, #128]	; 0x80
   137dc:	f003 0308 	and.w	r3, r3, #8
   137e0:	2b00      	cmp	r3, #0
   137e2:	d007      	beq.n	137f4 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x38c>
      buf[len++] = ' ';
   137e4:	9b18      	ldr	r3, [sp, #96]	; 0x60
   137e6:	1c5a      	adds	r2, r3, #1
   137e8:	9218      	str	r2, [sp, #96]	; 0x60
   137ea:	aa1a      	add	r2, sp, #104	; 0x68
   137ec:	4413      	add	r3, r2
   137ee:	2220      	movs	r2, #32
   137f0:	f803 2c50 	strb.w	r2, [r3, #-80]
    }
  }

  // pad spaces up to given width
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
   137f4:	9b20      	ldr	r3, [sp, #128]	; 0x80
   137f6:	f003 0302 	and.w	r3, r3, #2
   137fa:	2b00      	cmp	r3, #0
   137fc:	d116      	bne.n	1382c <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x3c4>
   137fe:	9b20      	ldr	r3, [sp, #128]	; 0x80
   13800:	f003 0301 	and.w	r3, r3, #1
   13804:	2b00      	cmp	r3, #0
   13806:	d111      	bne.n	1382c <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x3c4>
    for (size_t i = len; i < width; i++) {
   13808:	9b18      	ldr	r3, [sp, #96]	; 0x60
   1380a:	9313      	str	r3, [sp, #76]	; 0x4c
   1380c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   1380e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   13810:	429a      	cmp	r2, r3
   13812:	d20b      	bcs.n	1382c <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x3c4>
      out(' ', buffer, idx++, maxlen);
   13814:	9a03      	ldr	r2, [sp, #12]
   13816:	1c53      	adds	r3, r2, #1
   13818:	9303      	str	r3, [sp, #12]
   1381a:	9c05      	ldr	r4, [sp, #20]
   1381c:	9b02      	ldr	r3, [sp, #8]
   1381e:	9904      	ldr	r1, [sp, #16]
   13820:	2020      	movs	r0, #32
   13822:	47a0      	blx	r4
    for (size_t i = len; i < width; i++) {
   13824:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   13826:	3301      	adds	r3, #1
   13828:	9313      	str	r3, [sp, #76]	; 0x4c
   1382a:	e7ef      	b.n	1380c <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x3a4>
    }
  }

  // reverse string
  for (size_t i = 0U; i < len; i++) {
   1382c:	2300      	movs	r3, #0
   1382e:	9312      	str	r3, [sp, #72]	; 0x48
   13830:	9a12      	ldr	r2, [sp, #72]	; 0x48
   13832:	9b18      	ldr	r3, [sp, #96]	; 0x60
   13834:	429a      	cmp	r2, r3
   13836:	d212      	bcs.n	1385e <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x3f6>
    out(buf[len - i - 1U], buffer, idx++, maxlen);
   13838:	9a18      	ldr	r2, [sp, #96]	; 0x60
   1383a:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1383c:	1ad3      	subs	r3, r2, r3
   1383e:	3b01      	subs	r3, #1
   13840:	aa1a      	add	r2, sp, #104	; 0x68
   13842:	4413      	add	r3, r2
   13844:	f813 0c50 	ldrb.w	r0, [r3, #-80]
   13848:	9a03      	ldr	r2, [sp, #12]
   1384a:	1c53      	adds	r3, r2, #1
   1384c:	9303      	str	r3, [sp, #12]
   1384e:	9c05      	ldr	r4, [sp, #20]
   13850:	9b02      	ldr	r3, [sp, #8]
   13852:	9904      	ldr	r1, [sp, #16]
   13854:	47a0      	blx	r4
  for (size_t i = 0U; i < len; i++) {
   13856:	9b12      	ldr	r3, [sp, #72]	; 0x48
   13858:	3301      	adds	r3, #1
   1385a:	9312      	str	r3, [sp, #72]	; 0x48
   1385c:	e7e8      	b.n	13830 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x3c8>
  }

  // append pad spaces up to given width
  if (flags & FLAGS_LEFT) {
   1385e:	9b20      	ldr	r3, [sp, #128]	; 0x80
   13860:	f003 0302 	and.w	r3, r3, #2
   13864:	2b00      	cmp	r3, #0
   13866:	d00e      	beq.n	13886 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x41e>
    while (idx - start_idx < width) {
   13868:	9a03      	ldr	r2, [sp, #12]
   1386a:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1386c:	1ad3      	subs	r3, r2, r3
   1386e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   13870:	429a      	cmp	r2, r3
   13872:	d908      	bls.n	13886 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x41e>
      out(' ', buffer, idx++, maxlen);
   13874:	9a03      	ldr	r2, [sp, #12]
   13876:	1c53      	adds	r3, r2, #1
   13878:	9303      	str	r3, [sp, #12]
   1387a:	9c05      	ldr	r4, [sp, #20]
   1387c:	9b02      	ldr	r3, [sp, #8]
   1387e:	9904      	ldr	r1, [sp, #16]
   13880:	2020      	movs	r0, #32
   13882:	47a0      	blx	r4
    while (idx - start_idx < width) {
   13884:	e7f0      	b.n	13868 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x400>
    }
  }

  return idx;
   13886:	9c03      	ldr	r4, [sp, #12]
   13888:	462b      	mov	r3, r5
   1388a:	4619      	mov	r1, r3
   1388c:	4803      	ldr	r0, [pc, #12]	; (1389c <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x434>)
   1388e:	f7ff fa3b 	bl	12d08 <__cyg_profile_func_exit>
   13892:	4623      	mov	r3, r4
}
   13894:	4618      	mov	r0, r3
   13896:	b01b      	add	sp, #108	; 0x6c
   13898:	bd30      	pop	{r4, r5, pc}
   1389a:	bf00      	nop
   1389c:	00013469 	.word	0x00013469

000138a0 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)>:
#endif  // PRINTF_SUPPORT_FLOAT


// internal vsnprintf
static int _vsnprintf(out_fct_type out, char* buffer, const size_t maxlen, const char* format, va_list va)
{
   138a0:	b570      	push	{r4, r5, r6, lr}
   138a2:	b0a0      	sub	sp, #128	; 0x80
   138a4:	4676      	mov	r6, lr
   138a6:	900d      	str	r0, [sp, #52]	; 0x34
   138a8:	910c      	str	r1, [sp, #48]	; 0x30
   138aa:	920b      	str	r2, [sp, #44]	; 0x2c
   138ac:	930a      	str	r3, [sp, #40]	; 0x28
   138ae:	4633      	mov	r3, r6
   138b0:	4619      	mov	r1, r3
   138b2:	48a7      	ldr	r0, [pc, #668]	; (13b50 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2b0>)
   138b4:	f7ff fa14 	bl	12ce0 <__cyg_profile_func_enter>
  unsigned int flags, width, precision, n;
  size_t idx = 0U;
   138b8:	2300      	movs	r3, #0
   138ba:	931b      	str	r3, [sp, #108]	; 0x6c

  if (!buffer) {
   138bc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   138be:	2b00      	cmp	r3, #0
   138c0:	d101      	bne.n	138c6 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x26>
    // use null output function
    out = _out_null;
   138c2:	4ba4      	ldr	r3, [pc, #656]	; (13b54 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2b4>)
   138c4:	930d      	str	r3, [sp, #52]	; 0x34
  }

  while (*format)
   138c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   138c8:	781b      	ldrb	r3, [r3, #0]
   138ca:	2b00      	cmp	r3, #0
   138cc:	f000 8448 	beq.w	14160 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8c0>
  {
    // format specifier?  %[flags][width][.precision][length]
    if (*format != '%') {
   138d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   138d2:	781b      	ldrb	r3, [r3, #0]
   138d4:	2b25      	cmp	r3, #37	; 0x25
   138d6:	d00d      	beq.n	138f4 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x54>
      // no
      out(*format, buffer, idx++, maxlen);
   138d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   138da:	7818      	ldrb	r0, [r3, #0]
   138dc:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   138de:	1c53      	adds	r3, r2, #1
   138e0:	931b      	str	r3, [sp, #108]	; 0x6c
   138e2:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   138e4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   138e6:	990c      	ldr	r1, [sp, #48]	; 0x30
   138e8:	47a0      	blx	r4
      format++;
   138ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   138ec:	3301      	adds	r3, #1
   138ee:	930a      	str	r3, [sp, #40]	; 0x28
      continue;
   138f0:	f000 bc34 	b.w	1415c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8bc>
    }
    else {
      // yes, evaluate it
      format++;
   138f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   138f6:	3301      	adds	r3, #1
   138f8:	930a      	str	r3, [sp, #40]	; 0x28
    }

    // evaluate flags
    flags = 0U;
   138fa:	2300      	movs	r3, #0
   138fc:	931f      	str	r3, [sp, #124]	; 0x7c
    do {
      switch (*format) {
   138fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13900:	781b      	ldrb	r3, [r3, #0]
   13902:	3b20      	subs	r3, #32
   13904:	2b10      	cmp	r3, #16
   13906:	d857      	bhi.n	139b8 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x118>
   13908:	a201      	add	r2, pc, #4	; (adr r2, 13910 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x70>)
   1390a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1390e:	bf00      	nop
   13910:	00013991 	.word	0x00013991
   13914:	000139b9 	.word	0x000139b9
   13918:	000139b9 	.word	0x000139b9
   1391c:	000139a5 	.word	0x000139a5
   13920:	000139b9 	.word	0x000139b9
   13924:	000139b9 	.word	0x000139b9
   13928:	000139b9 	.word	0x000139b9
   1392c:	000139b9 	.word	0x000139b9
   13930:	000139b9 	.word	0x000139b9
   13934:	000139b9 	.word	0x000139b9
   13938:	000139b9 	.word	0x000139b9
   1393c:	0001397d 	.word	0x0001397d
   13940:	000139b9 	.word	0x000139b9
   13944:	00013969 	.word	0x00013969
   13948:	000139b9 	.word	0x000139b9
   1394c:	000139b9 	.word	0x000139b9
   13950:	00013955 	.word	0x00013955
        case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
   13954:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   13956:	f043 0301 	orr.w	r3, r3, #1
   1395a:	931f      	str	r3, [sp, #124]	; 0x7c
   1395c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1395e:	3301      	adds	r3, #1
   13960:	930a      	str	r3, [sp, #40]	; 0x28
   13962:	2301      	movs	r3, #1
   13964:	931c      	str	r3, [sp, #112]	; 0x70
   13966:	e02a      	b.n	139be <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x11e>
        case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
   13968:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   1396a:	f043 0302 	orr.w	r3, r3, #2
   1396e:	931f      	str	r3, [sp, #124]	; 0x7c
   13970:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13972:	3301      	adds	r3, #1
   13974:	930a      	str	r3, [sp, #40]	; 0x28
   13976:	2301      	movs	r3, #1
   13978:	931c      	str	r3, [sp, #112]	; 0x70
   1397a:	e020      	b.n	139be <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x11e>
        case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
   1397c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   1397e:	f043 0304 	orr.w	r3, r3, #4
   13982:	931f      	str	r3, [sp, #124]	; 0x7c
   13984:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13986:	3301      	adds	r3, #1
   13988:	930a      	str	r3, [sp, #40]	; 0x28
   1398a:	2301      	movs	r3, #1
   1398c:	931c      	str	r3, [sp, #112]	; 0x70
   1398e:	e016      	b.n	139be <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x11e>
        case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
   13990:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   13992:	f043 0308 	orr.w	r3, r3, #8
   13996:	931f      	str	r3, [sp, #124]	; 0x7c
   13998:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1399a:	3301      	adds	r3, #1
   1399c:	930a      	str	r3, [sp, #40]	; 0x28
   1399e:	2301      	movs	r3, #1
   139a0:	931c      	str	r3, [sp, #112]	; 0x70
   139a2:	e00c      	b.n	139be <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x11e>
        case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;
   139a4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   139a6:	f043 0310 	orr.w	r3, r3, #16
   139aa:	931f      	str	r3, [sp, #124]	; 0x7c
   139ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   139ae:	3301      	adds	r3, #1
   139b0:	930a      	str	r3, [sp, #40]	; 0x28
   139b2:	2301      	movs	r3, #1
   139b4:	931c      	str	r3, [sp, #112]	; 0x70
   139b6:	e002      	b.n	139be <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x11e>
        default :                                   n = 0U; break;
   139b8:	2300      	movs	r3, #0
   139ba:	931c      	str	r3, [sp, #112]	; 0x70
   139bc:	bf00      	nop
      }
    } while (n);
   139be:	9b1c      	ldr	r3, [sp, #112]	; 0x70
   139c0:	2b00      	cmp	r3, #0
   139c2:	d000      	beq.n	139c6 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x126>
    do {
   139c4:	e79b      	b.n	138fe <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x5e>

    // evaluate width field
    width = 0U;
   139c6:	2300      	movs	r3, #0
   139c8:	931e      	str	r3, [sp, #120]	; 0x78
    if (_is_digit(*format)) {
   139ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   139cc:	781b      	ldrb	r3, [r3, #0]
   139ce:	4618      	mov	r0, r3
   139d0:	f7ff fade 	bl	12f90 <_is_digit(char)>
   139d4:	4603      	mov	r3, r0
   139d6:	2b00      	cmp	r3, #0
   139d8:	d005      	beq.n	139e6 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x146>
      width = _atoi(&format);
   139da:	ab0a      	add	r3, sp, #40	; 0x28
   139dc:	4618      	mov	r0, r3
   139de:	f7ff faf9 	bl	12fd4 <_atoi(char const**)>
   139e2:	901e      	str	r0, [sp, #120]	; 0x78
   139e4:	e018      	b.n	13a18 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x178>
    }
    else if (*format == '*') {
   139e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   139e8:	781b      	ldrb	r3, [r3, #0]
   139ea:	2b2a      	cmp	r3, #42	; 0x2a
   139ec:	d114      	bne.n	13a18 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x178>
      const int w = va_arg(va, int);
   139ee:	9b24      	ldr	r3, [sp, #144]	; 0x90
   139f0:	1d1a      	adds	r2, r3, #4
   139f2:	9224      	str	r2, [sp, #144]	; 0x90
   139f4:	681b      	ldr	r3, [r3, #0]
   139f6:	9316      	str	r3, [sp, #88]	; 0x58
      if (w < 0) {
   139f8:	9b16      	ldr	r3, [sp, #88]	; 0x58
   139fa:	2b00      	cmp	r3, #0
   139fc:	da07      	bge.n	13a0e <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x16e>
        flags |= FLAGS_LEFT;    // reverse padding
   139fe:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   13a00:	f043 0302 	orr.w	r3, r3, #2
   13a04:	931f      	str	r3, [sp, #124]	; 0x7c
        width = (unsigned int)-w;
   13a06:	9b16      	ldr	r3, [sp, #88]	; 0x58
   13a08:	425b      	negs	r3, r3
   13a0a:	931e      	str	r3, [sp, #120]	; 0x78
   13a0c:	e001      	b.n	13a12 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x172>
      }
      else {
        width = (unsigned int)w;
   13a0e:	9b16      	ldr	r3, [sp, #88]	; 0x58
   13a10:	931e      	str	r3, [sp, #120]	; 0x78
      }
      format++;
   13a12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13a14:	3301      	adds	r3, #1
   13a16:	930a      	str	r3, [sp, #40]	; 0x28
    }

    // evaluate precision field
    precision = 0U;
   13a18:	2300      	movs	r3, #0
   13a1a:	931d      	str	r3, [sp, #116]	; 0x74
    if (*format == '.') {
   13a1c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13a1e:	781b      	ldrb	r3, [r3, #0]
   13a20:	2b2e      	cmp	r3, #46	; 0x2e
   13a22:	d124      	bne.n	13a6e <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x1ce>
      flags |= FLAGS_PRECISION;
   13a24:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   13a26:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
   13a2a:	931f      	str	r3, [sp, #124]	; 0x7c
      format++;
   13a2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13a2e:	3301      	adds	r3, #1
   13a30:	930a      	str	r3, [sp, #40]	; 0x28
      if (_is_digit(*format)) {
   13a32:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13a34:	781b      	ldrb	r3, [r3, #0]
   13a36:	4618      	mov	r0, r3
   13a38:	f7ff faaa 	bl	12f90 <_is_digit(char)>
   13a3c:	4603      	mov	r3, r0
   13a3e:	2b00      	cmp	r3, #0
   13a40:	d005      	beq.n	13a4e <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x1ae>
        precision = _atoi(&format);
   13a42:	ab0a      	add	r3, sp, #40	; 0x28
   13a44:	4618      	mov	r0, r3
   13a46:	f7ff fac5 	bl	12fd4 <_atoi(char const**)>
   13a4a:	901d      	str	r0, [sp, #116]	; 0x74
   13a4c:	e00f      	b.n	13a6e <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x1ce>
      }
      else if (*format == '*') {
   13a4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13a50:	781b      	ldrb	r3, [r3, #0]
   13a52:	2b2a      	cmp	r3, #42	; 0x2a
   13a54:	d10b      	bne.n	13a6e <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x1ce>
        const int prec = (int)va_arg(va, int);
   13a56:	9b24      	ldr	r3, [sp, #144]	; 0x90
   13a58:	1d1a      	adds	r2, r3, #4
   13a5a:	9224      	str	r2, [sp, #144]	; 0x90
   13a5c:	681b      	ldr	r3, [r3, #0]
   13a5e:	9315      	str	r3, [sp, #84]	; 0x54
        precision = prec > 0 ? (unsigned int)prec : 0U;
   13a60:	9b15      	ldr	r3, [sp, #84]	; 0x54
   13a62:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   13a66:	931d      	str	r3, [sp, #116]	; 0x74
        format++;
   13a68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13a6a:	3301      	adds	r3, #1
   13a6c:	930a      	str	r3, [sp, #40]	; 0x28
      }
    }

    // evaluate length field
    switch (*format) {
   13a6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13a70:	781b      	ldrb	r3, [r3, #0]
   13a72:	3b68      	subs	r3, #104	; 0x68
   13a74:	2b12      	cmp	r3, #18
   13a76:	d867      	bhi.n	13b48 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2a8>
   13a78:	a201      	add	r2, pc, #4	; (adr r2, 13a80 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x1e0>)
   13a7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   13a7e:	bf00      	nop
   13a80:	00013af3 	.word	0x00013af3
   13a84:	00013b49 	.word	0x00013b49
   13a88:	00013b29 	.word	0x00013b29
   13a8c:	00013b49 	.word	0x00013b49
   13a90:	00013acd 	.word	0x00013acd
   13a94:	00013b49 	.word	0x00013b49
   13a98:	00013b49 	.word	0x00013b49
   13a9c:	00013b49 	.word	0x00013b49
   13aa0:	00013b49 	.word	0x00013b49
   13aa4:	00013b49 	.word	0x00013b49
   13aa8:	00013b49 	.word	0x00013b49
   13aac:	00013b49 	.word	0x00013b49
   13ab0:	00013b19 	.word	0x00013b19
   13ab4:	00013b49 	.word	0x00013b49
   13ab8:	00013b49 	.word	0x00013b49
   13abc:	00013b49 	.word	0x00013b49
   13ac0:	00013b49 	.word	0x00013b49
   13ac4:	00013b49 	.word	0x00013b49
   13ac8:	00013b39 	.word	0x00013b39
      case 'l' :
        flags |= FLAGS_LONG;
   13acc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   13ace:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   13ad2:	931f      	str	r3, [sp, #124]	; 0x7c
        format++;
   13ad4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13ad6:	3301      	adds	r3, #1
   13ad8:	930a      	str	r3, [sp, #40]	; 0x28
        if (*format == 'l') {
   13ada:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13adc:	781b      	ldrb	r3, [r3, #0]
   13ade:	2b6c      	cmp	r3, #108	; 0x6c
   13ae0:	d134      	bne.n	13b4c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2ac>
          flags |= FLAGS_LONG_LONG;
   13ae2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   13ae4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   13ae8:	931f      	str	r3, [sp, #124]	; 0x7c
          format++;
   13aea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13aec:	3301      	adds	r3, #1
   13aee:	930a      	str	r3, [sp, #40]	; 0x28
        }
        break;
   13af0:	e02c      	b.n	13b4c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2ac>
      case 'h' :
        flags |= FLAGS_SHORT;
   13af2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   13af4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   13af8:	931f      	str	r3, [sp, #124]	; 0x7c
        format++;
   13afa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13afc:	3301      	adds	r3, #1
   13afe:	930a      	str	r3, [sp, #40]	; 0x28
        if (*format == 'h') {
   13b00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13b02:	781b      	ldrb	r3, [r3, #0]
   13b04:	2b68      	cmp	r3, #104	; 0x68
   13b06:	d127      	bne.n	13b58 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2b8>
          flags |= FLAGS_CHAR;
   13b08:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   13b0a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   13b0e:	931f      	str	r3, [sp, #124]	; 0x7c
          format++;
   13b10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13b12:	3301      	adds	r3, #1
   13b14:	930a      	str	r3, [sp, #40]	; 0x28
        }
        break;
   13b16:	e01f      	b.n	13b58 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2b8>
#if defined(PRINTF_SUPPORT_PTRDIFF_T)
      case 't' :
        flags |= (sizeof(ptrdiff_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
   13b18:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   13b1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   13b1e:	931f      	str	r3, [sp, #124]	; 0x7c
        format++;
   13b20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13b22:	3301      	adds	r3, #1
   13b24:	930a      	str	r3, [sp, #40]	; 0x28
        break;
   13b26:	e018      	b.n	13b5a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2ba>
#endif
      case 'j' :
        flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
   13b28:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   13b2a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   13b2e:	931f      	str	r3, [sp, #124]	; 0x7c
        format++;
   13b30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13b32:	3301      	adds	r3, #1
   13b34:	930a      	str	r3, [sp, #40]	; 0x28
        break;
   13b36:	e010      	b.n	13b5a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2ba>
      case 'z' :
        flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
   13b38:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   13b3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   13b3e:	931f      	str	r3, [sp, #124]	; 0x7c
        format++;
   13b40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13b42:	3301      	adds	r3, #1
   13b44:	930a      	str	r3, [sp, #40]	; 0x28
        break;
   13b46:	e008      	b.n	13b5a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2ba>
      default :
        break;
   13b48:	bf00      	nop
   13b4a:	e006      	b.n	13b5a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2ba>
        break;
   13b4c:	bf00      	nop
   13b4e:	e004      	b.n	13b5a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2ba>
   13b50:	000138a1 	.word	0x000138a1
   13b54:	00012ed9 	.word	0x00012ed9
        break;
   13b58:	bf00      	nop
    }

    // evaluate specifier
    switch (*format) {
   13b5a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13b5c:	781b      	ldrb	r3, [r3, #0]
   13b5e:	3b25      	subs	r3, #37	; 0x25
   13b60:	2b53      	cmp	r3, #83	; 0x53
   13b62:	f200 82ee 	bhi.w	14142 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8a2>
   13b66:	a201      	add	r2, pc, #4	; (adr r2, 13b6c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2cc>)
   13b68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   13b6c:	0001412b 	.word	0x0001412b
   13b70:	00014143 	.word	0x00014143
   13b74:	00014143 	.word	0x00014143
   13b78:	00014143 	.word	0x00014143
   13b7c:	00014143 	.word	0x00014143
   13b80:	00014143 	.word	0x00014143
   13b84:	00014143 	.word	0x00014143
   13b88:	00014143 	.word	0x00014143
   13b8c:	00014143 	.word	0x00014143
   13b90:	00014143 	.word	0x00014143
   13b94:	00014143 	.word	0x00014143
   13b98:	00014143 	.word	0x00014143
   13b9c:	00014143 	.word	0x00014143
   13ba0:	00014143 	.word	0x00014143
   13ba4:	00014143 	.word	0x00014143
   13ba8:	00014143 	.word	0x00014143
   13bac:	00014143 	.word	0x00014143
   13bb0:	00014143 	.word	0x00014143
   13bb4:	00014143 	.word	0x00014143
   13bb8:	00014143 	.word	0x00014143
   13bbc:	00014143 	.word	0x00014143
   13bc0:	00014143 	.word	0x00014143
   13bc4:	00014143 	.word	0x00014143
   13bc8:	00014143 	.word	0x00014143
   13bcc:	00014143 	.word	0x00014143
   13bd0:	00014143 	.word	0x00014143
   13bd4:	00014143 	.word	0x00014143
   13bd8:	00014143 	.word	0x00014143
   13bdc:	00014143 	.word	0x00014143
   13be0:	00014143 	.word	0x00014143
   13be4:	00014143 	.word	0x00014143
   13be8:	00014143 	.word	0x00014143
   13bec:	00014143 	.word	0x00014143
   13bf0:	00013f49 	.word	0x00013f49
   13bf4:	00014143 	.word	0x00014143
   13bf8:	00014143 	.word	0x00014143
   13bfc:	00014143 	.word	0x00014143
   13c00:	00014143 	.word	0x00014143
   13c04:	00014143 	.word	0x00014143
   13c08:	00014143 	.word	0x00014143
   13c0c:	00014143 	.word	0x00014143
   13c10:	00014143 	.word	0x00014143
   13c14:	00014143 	.word	0x00014143
   13c18:	00014143 	.word	0x00014143
   13c1c:	00014143 	.word	0x00014143
   13c20:	00014143 	.word	0x00014143
   13c24:	00014143 	.word	0x00014143
   13c28:	00014143 	.word	0x00014143
   13c2c:	00014143 	.word	0x00014143
   13c30:	00014143 	.word	0x00014143
   13c34:	00014143 	.word	0x00014143
   13c38:	00013cbd 	.word	0x00013cbd
   13c3c:	00014143 	.word	0x00014143
   13c40:	00014143 	.word	0x00014143
   13c44:	00014143 	.word	0x00014143
   13c48:	00014143 	.word	0x00014143
   13c4c:	00014143 	.word	0x00014143
   13c50:	00014143 	.word	0x00014143
   13c54:	00014143 	.word	0x00014143
   13c58:	00014143 	.word	0x00014143
   13c5c:	00014143 	.word	0x00014143
   13c60:	00013cbd 	.word	0x00013cbd
   13c64:	00013f85 	.word	0x00013f85
   13c68:	00013cbd 	.word	0x00013cbd
   13c6c:	00014143 	.word	0x00014143
   13c70:	00013f49 	.word	0x00013f49
   13c74:	00014143 	.word	0x00014143
   13c78:	00014143 	.word	0x00014143
   13c7c:	00013cbd 	.word	0x00013cbd
   13c80:	00014143 	.word	0x00014143
   13c84:	00014143 	.word	0x00014143
   13c88:	00014143 	.word	0x00014143
   13c8c:	00014143 	.word	0x00014143
   13c90:	00014143 	.word	0x00014143
   13c94:	00013cbd 	.word	0x00013cbd
   13c98:	000140e3 	.word	0x000140e3
   13c9c:	00014143 	.word	0x00014143
   13ca0:	00014143 	.word	0x00014143
   13ca4:	0001400d 	.word	0x0001400d
   13ca8:	00014143 	.word	0x00014143
   13cac:	00013cbd 	.word	0x00013cbd
   13cb0:	00014143 	.word	0x00014143
   13cb4:	00014143 	.word	0x00014143
   13cb8:	00013cbd 	.word	0x00013cbd
      case 'X' :
      case 'o' :
      case 'b' : {
        // set the base
        unsigned int base;
        if (*format == 'x' || *format == 'X') {
   13cbc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13cbe:	781b      	ldrb	r3, [r3, #0]
   13cc0:	2b78      	cmp	r3, #120	; 0x78
   13cc2:	d003      	beq.n	13ccc <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x42c>
   13cc4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13cc6:	781b      	ldrb	r3, [r3, #0]
   13cc8:	2b58      	cmp	r3, #88	; 0x58
   13cca:	d102      	bne.n	13cd2 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x432>
          base = 16U;
   13ccc:	2310      	movs	r3, #16
   13cce:	931a      	str	r3, [sp, #104]	; 0x68
   13cd0:	e013      	b.n	13cfa <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x45a>
        }
        else if (*format == 'o') {
   13cd2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13cd4:	781b      	ldrb	r3, [r3, #0]
   13cd6:	2b6f      	cmp	r3, #111	; 0x6f
   13cd8:	d102      	bne.n	13ce0 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x440>
          base =  8U;
   13cda:	2308      	movs	r3, #8
   13cdc:	931a      	str	r3, [sp, #104]	; 0x68
   13cde:	e00c      	b.n	13cfa <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x45a>
        }
        else if (*format == 'b') {
   13ce0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13ce2:	781b      	ldrb	r3, [r3, #0]
   13ce4:	2b62      	cmp	r3, #98	; 0x62
   13ce6:	d102      	bne.n	13cee <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x44e>
          base =  2U;
   13ce8:	2302      	movs	r3, #2
   13cea:	931a      	str	r3, [sp, #104]	; 0x68
   13cec:	e005      	b.n	13cfa <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x45a>
        }
        else {
          base = 10U;
   13cee:	230a      	movs	r3, #10
   13cf0:	931a      	str	r3, [sp, #104]	; 0x68
          flags &= ~FLAGS_HASH;   // no hash for dec format
   13cf2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   13cf4:	f023 0310 	bic.w	r3, r3, #16
   13cf8:	931f      	str	r3, [sp, #124]	; 0x7c
        }
        // uppercase
        if (*format == 'X') {
   13cfa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13cfc:	781b      	ldrb	r3, [r3, #0]
   13cfe:	2b58      	cmp	r3, #88	; 0x58
   13d00:	d103      	bne.n	13d0a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x46a>
          flags |= FLAGS_UPPERCASE;
   13d02:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   13d04:	f043 0320 	orr.w	r3, r3, #32
   13d08:	931f      	str	r3, [sp, #124]	; 0x7c
        }

        // no plus or space flag for u, x, X, o, b
        if ((*format != 'i') && (*format != 'd')) {
   13d0a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13d0c:	781b      	ldrb	r3, [r3, #0]
   13d0e:	2b69      	cmp	r3, #105	; 0x69
   13d10:	d007      	beq.n	13d22 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x482>
   13d12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13d14:	781b      	ldrb	r3, [r3, #0]
   13d16:	2b64      	cmp	r3, #100	; 0x64
   13d18:	d003      	beq.n	13d22 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x482>
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
   13d1a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   13d1c:	f023 030c 	bic.w	r3, r3, #12
   13d20:	931f      	str	r3, [sp, #124]	; 0x7c
        }

        // ignore '0' flag when precision is given
        if (flags & FLAGS_PRECISION) {
   13d22:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   13d24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
   13d28:	2b00      	cmp	r3, #0
   13d2a:	d003      	beq.n	13d34 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x494>
          flags &= ~FLAGS_ZEROPAD;
   13d2c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   13d2e:	f023 0301 	bic.w	r3, r3, #1
   13d32:	931f      	str	r3, [sp, #124]	; 0x7c
        }

        // convert the integer
        if ((*format == 'i') || (*format == 'd')) {
   13d34:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13d36:	781b      	ldrb	r3, [r3, #0]
   13d38:	2b69      	cmp	r3, #105	; 0x69
   13d3a:	d004      	beq.n	13d46 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x4a6>
   13d3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13d3e:	781b      	ldrb	r3, [r3, #0]
   13d40:	2b64      	cmp	r3, #100	; 0x64
   13d42:	f040 808d 	bne.w	13e60 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x5c0>
          // signed
          if (flags & FLAGS_LONG_LONG) {
   13d46:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   13d48:	f403 7300 	and.w	r3, r3, #512	; 0x200
   13d4c:	2b00      	cmp	r3, #0
   13d4e:	d02e      	beq.n	13dae <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x50e>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            const long long value = va_arg(va, long long);
   13d50:	9b24      	ldr	r3, [sp, #144]	; 0x90
   13d52:	3307      	adds	r3, #7
   13d54:	f023 0307 	bic.w	r3, r3, #7
   13d58:	f103 0208 	add.w	r2, r3, #8
   13d5c:	9224      	str	r2, [sp, #144]	; 0x90
   13d5e:	e9d3 3400 	ldrd	r3, r4, [r3]
   13d62:	e9cd 340e 	strd	r3, r4, [sp, #56]	; 0x38
            idx = _ntoa_long_long(out, buffer, idx, maxlen, (unsigned long long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
   13d66:	e9dd 340e 	ldrd	r3, r4, [sp, #56]	; 0x38
   13d6a:	2b00      	cmp	r3, #0
   13d6c:	f174 0200 	sbcs.w	r2, r4, #0
   13d70:	da02      	bge.n	13d78 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x4d8>
   13d72:	425b      	negs	r3, r3
   13d74:	eb64 0444 	sbc.w	r4, r4, r4, lsl #1
   13d78:	4619      	mov	r1, r3
   13d7a:	4622      	mov	r2, r4
   13d7c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   13d7e:	0fdb      	lsrs	r3, r3, #31
   13d80:	b2d8      	uxtb	r0, r3
   13d82:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   13d84:	f04f 0400 	mov.w	r4, #0
   13d88:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
   13d8a:	9508      	str	r5, [sp, #32]
   13d8c:	9d1e      	ldr	r5, [sp, #120]	; 0x78
   13d8e:	9507      	str	r5, [sp, #28]
   13d90:	9d1d      	ldr	r5, [sp, #116]	; 0x74
   13d92:	9506      	str	r5, [sp, #24]
   13d94:	e9cd 3404 	strd	r3, r4, [sp, #16]
   13d98:	9002      	str	r0, [sp, #8]
   13d9a:	e9cd 1200 	strd	r1, r2, [sp]
   13d9e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   13da0:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   13da2:	990c      	ldr	r1, [sp, #48]	; 0x30
   13da4:	980d      	ldr	r0, [sp, #52]	; 0x34
   13da6:	f7ff fae5 	bl	13374 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)>
   13daa:	901b      	str	r0, [sp, #108]	; 0x6c
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
          }
          else {
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
          }
   13dac:	e0c8      	b.n	13f40 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x6a0>
          else if (flags & FLAGS_LONG) {
   13dae:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   13db0:	f403 7380 	and.w	r3, r3, #256	; 0x100
   13db4:	2b00      	cmp	r3, #0
   13db6:	d01e      	beq.n	13df6 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x556>
            const long value = va_arg(va, long);
   13db8:	9b24      	ldr	r3, [sp, #144]	; 0x90
   13dba:	1d1a      	adds	r2, r3, #4
   13dbc:	9224      	str	r2, [sp, #144]	; 0x90
   13dbe:	681b      	ldr	r3, [r3, #0]
   13dc0:	9311      	str	r3, [sp, #68]	; 0x44
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
   13dc2:	9b11      	ldr	r3, [sp, #68]	; 0x44
   13dc4:	2b00      	cmp	r3, #0
   13dc6:	bfb8      	it	lt
   13dc8:	425b      	neglt	r3, r3
   13dca:	4619      	mov	r1, r3
   13dcc:	9b11      	ldr	r3, [sp, #68]	; 0x44
   13dce:	0fdb      	lsrs	r3, r3, #31
   13dd0:	b2db      	uxtb	r3, r3
   13dd2:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   13dd4:	9205      	str	r2, [sp, #20]
   13dd6:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   13dd8:	9204      	str	r2, [sp, #16]
   13dda:	9a1d      	ldr	r2, [sp, #116]	; 0x74
   13ddc:	9203      	str	r2, [sp, #12]
   13dde:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   13de0:	9202      	str	r2, [sp, #8]
   13de2:	9301      	str	r3, [sp, #4]
   13de4:	9100      	str	r1, [sp, #0]
   13de6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   13de8:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   13dea:	990c      	ldr	r1, [sp, #48]	; 0x30
   13dec:	980d      	ldr	r0, [sp, #52]	; 0x34
   13dee:	f7ff fa4f 	bl	13290 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)>
   13df2:	901b      	str	r0, [sp, #108]	; 0x6c
          }
   13df4:	e0a4      	b.n	13f40 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x6a0>
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
   13df6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   13df8:	f003 0340 	and.w	r3, r3, #64	; 0x40
   13dfc:	2b00      	cmp	r3, #0
   13dfe:	d005      	beq.n	13e0c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x56c>
   13e00:	9b24      	ldr	r3, [sp, #144]	; 0x90
   13e02:	1d1a      	adds	r2, r3, #4
   13e04:	9224      	str	r2, [sp, #144]	; 0x90
   13e06:	681b      	ldr	r3, [r3, #0]
   13e08:	b2db      	uxtb	r3, r3
   13e0a:	e00e      	b.n	13e2a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x58a>
   13e0c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   13e0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
   13e12:	2b00      	cmp	r3, #0
   13e14:	d005      	beq.n	13e22 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x582>
   13e16:	9b24      	ldr	r3, [sp, #144]	; 0x90
   13e18:	1d1a      	adds	r2, r3, #4
   13e1a:	9224      	str	r2, [sp, #144]	; 0x90
   13e1c:	681b      	ldr	r3, [r3, #0]
   13e1e:	b21b      	sxth	r3, r3
   13e20:	e003      	b.n	13e2a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x58a>
   13e22:	9b24      	ldr	r3, [sp, #144]	; 0x90
   13e24:	1d1a      	adds	r2, r3, #4
   13e26:	9224      	str	r2, [sp, #144]	; 0x90
   13e28:	681b      	ldr	r3, [r3, #0]
   13e2a:	9312      	str	r3, [sp, #72]	; 0x48
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
   13e2c:	9b12      	ldr	r3, [sp, #72]	; 0x48
   13e2e:	2b00      	cmp	r3, #0
   13e30:	bfb8      	it	lt
   13e32:	425b      	neglt	r3, r3
   13e34:	4619      	mov	r1, r3
   13e36:	9b12      	ldr	r3, [sp, #72]	; 0x48
   13e38:	0fdb      	lsrs	r3, r3, #31
   13e3a:	b2db      	uxtb	r3, r3
   13e3c:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   13e3e:	9205      	str	r2, [sp, #20]
   13e40:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   13e42:	9204      	str	r2, [sp, #16]
   13e44:	9a1d      	ldr	r2, [sp, #116]	; 0x74
   13e46:	9203      	str	r2, [sp, #12]
   13e48:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   13e4a:	9202      	str	r2, [sp, #8]
   13e4c:	9301      	str	r3, [sp, #4]
   13e4e:	9100      	str	r1, [sp, #0]
   13e50:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   13e52:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   13e54:	990c      	ldr	r1, [sp, #48]	; 0x30
   13e56:	980d      	ldr	r0, [sp, #52]	; 0x34
   13e58:	f7ff fa1a 	bl	13290 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)>
   13e5c:	901b      	str	r0, [sp, #108]	; 0x6c
          }
   13e5e:	e06f      	b.n	13f40 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x6a0>
        }
        else {
          // unsigned
          if (flags & FLAGS_LONG_LONG) {
   13e60:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   13e62:	f403 7300 	and.w	r3, r3, #512	; 0x200
   13e66:	2b00      	cmp	r3, #0
   13e68:	d020      	beq.n	13eac <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x60c>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base, precision, width, flags);
   13e6a:	9b24      	ldr	r3, [sp, #144]	; 0x90
   13e6c:	3307      	adds	r3, #7
   13e6e:	f023 0307 	bic.w	r3, r3, #7
   13e72:	f103 0208 	add.w	r2, r3, #8
   13e76:	9224      	str	r2, [sp, #144]	; 0x90
   13e78:	e9d3 3400 	ldrd	r3, r4, [r3]
   13e7c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   13e7e:	4611      	mov	r1, r2
   13e80:	f04f 0200 	mov.w	r2, #0
   13e84:	981f      	ldr	r0, [sp, #124]	; 0x7c
   13e86:	9008      	str	r0, [sp, #32]
   13e88:	981e      	ldr	r0, [sp, #120]	; 0x78
   13e8a:	9007      	str	r0, [sp, #28]
   13e8c:	981d      	ldr	r0, [sp, #116]	; 0x74
   13e8e:	9006      	str	r0, [sp, #24]
   13e90:	e9cd 1204 	strd	r1, r2, [sp, #16]
   13e94:	2200      	movs	r2, #0
   13e96:	9202      	str	r2, [sp, #8]
   13e98:	e9cd 3400 	strd	r3, r4, [sp]
   13e9c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   13e9e:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   13ea0:	990c      	ldr	r1, [sp, #48]	; 0x30
   13ea2:	980d      	ldr	r0, [sp, #52]	; 0x34
   13ea4:	f7ff fa66 	bl	13374 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)>
   13ea8:	901b      	str	r0, [sp, #108]	; 0x6c
   13eaa:	e049      	b.n	13f40 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x6a0>
#endif
          }
          else if (flags & FLAGS_LONG) {
   13eac:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   13eae:	f403 7380 	and.w	r3, r3, #256	; 0x100
   13eb2:	2b00      	cmp	r3, #0
   13eb4:	d016      	beq.n	13ee4 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x644>
            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
   13eb6:	9b24      	ldr	r3, [sp, #144]	; 0x90
   13eb8:	1d1a      	adds	r2, r3, #4
   13eba:	9224      	str	r2, [sp, #144]	; 0x90
   13ebc:	681b      	ldr	r3, [r3, #0]
   13ebe:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   13ec0:	9205      	str	r2, [sp, #20]
   13ec2:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   13ec4:	9204      	str	r2, [sp, #16]
   13ec6:	9a1d      	ldr	r2, [sp, #116]	; 0x74
   13ec8:	9203      	str	r2, [sp, #12]
   13eca:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   13ecc:	9202      	str	r2, [sp, #8]
   13ece:	2200      	movs	r2, #0
   13ed0:	9201      	str	r2, [sp, #4]
   13ed2:	9300      	str	r3, [sp, #0]
   13ed4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   13ed6:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   13ed8:	990c      	ldr	r1, [sp, #48]	; 0x30
   13eda:	980d      	ldr	r0, [sp, #52]	; 0x34
   13edc:	f7ff f9d8 	bl	13290 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)>
   13ee0:	901b      	str	r0, [sp, #108]	; 0x6c
   13ee2:	e02d      	b.n	13f40 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x6a0>
          }
          else {
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
   13ee4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   13ee6:	f003 0340 	and.w	r3, r3, #64	; 0x40
   13eea:	2b00      	cmp	r3, #0
   13eec:	d005      	beq.n	13efa <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x65a>
   13eee:	9b24      	ldr	r3, [sp, #144]	; 0x90
   13ef0:	1d1a      	adds	r2, r3, #4
   13ef2:	9224      	str	r2, [sp, #144]	; 0x90
   13ef4:	681b      	ldr	r3, [r3, #0]
   13ef6:	b2db      	uxtb	r3, r3
   13ef8:	e00e      	b.n	13f18 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x678>
   13efa:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   13efc:	f003 0380 	and.w	r3, r3, #128	; 0x80
   13f00:	2b00      	cmp	r3, #0
   13f02:	d005      	beq.n	13f10 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x670>
   13f04:	9b24      	ldr	r3, [sp, #144]	; 0x90
   13f06:	1d1a      	adds	r2, r3, #4
   13f08:	9224      	str	r2, [sp, #144]	; 0x90
   13f0a:	681b      	ldr	r3, [r3, #0]
   13f0c:	b29b      	uxth	r3, r3
   13f0e:	e003      	b.n	13f18 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x678>
   13f10:	9b24      	ldr	r3, [sp, #144]	; 0x90
   13f12:	1d1a      	adds	r2, r3, #4
   13f14:	9224      	str	r2, [sp, #144]	; 0x90
   13f16:	681b      	ldr	r3, [r3, #0]
   13f18:	9313      	str	r3, [sp, #76]	; 0x4c
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
   13f1a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   13f1c:	9305      	str	r3, [sp, #20]
   13f1e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   13f20:	9304      	str	r3, [sp, #16]
   13f22:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   13f24:	9303      	str	r3, [sp, #12]
   13f26:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   13f28:	9302      	str	r3, [sp, #8]
   13f2a:	2300      	movs	r3, #0
   13f2c:	9301      	str	r3, [sp, #4]
   13f2e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   13f30:	9300      	str	r3, [sp, #0]
   13f32:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   13f34:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   13f36:	990c      	ldr	r1, [sp, #48]	; 0x30
   13f38:	980d      	ldr	r0, [sp, #52]	; 0x34
   13f3a:	f7ff f9a9 	bl	13290 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)>
   13f3e:	901b      	str	r0, [sp, #108]	; 0x6c
          }
        }
        format++;
   13f40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13f42:	3301      	adds	r3, #1
   13f44:	930a      	str	r3, [sp, #40]	; 0x28
        break;
   13f46:	e109      	b.n	1415c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8bc>
      }
#if defined(PRINTF_SUPPORT_FLOAT)
      case 'f' :
      case 'F' :
        idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
   13f48:	9b24      	ldr	r3, [sp, #144]	; 0x90
   13f4a:	3307      	adds	r3, #7
   13f4c:	f023 0307 	bic.w	r3, r3, #7
   13f50:	f103 0208 	add.w	r2, r3, #8
   13f54:	9224      	str	r2, [sp, #144]	; 0x90
   13f56:	ed93 7b00 	vldr	d7, [r3]
   13f5a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   13f5c:	9302      	str	r3, [sp, #8]
   13f5e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   13f60:	9301      	str	r3, [sp, #4]
   13f62:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   13f64:	9300      	str	r3, [sp, #0]
   13f66:	eeb0 0a47 	vmov.f32	s0, s14
   13f6a:	eef0 0a67 	vmov.f32	s1, s15
   13f6e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   13f70:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   13f72:	990c      	ldr	r1, [sp, #48]	; 0x30
   13f74:	980d      	ldr	r0, [sp, #52]	; 0x34
   13f76:	f7ff fa77 	bl	13468 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)>
   13f7a:	901b      	str	r0, [sp, #108]	; 0x6c
        format++;
   13f7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13f7e:	3301      	adds	r3, #1
   13f80:	930a      	str	r3, [sp, #40]	; 0x28
        break;
   13f82:	e0eb      	b.n	1415c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8bc>
#endif  // PRINTF_SUPPORT_FLOAT
      case 'c' : {
        unsigned int l = 1U;
   13f84:	2301      	movs	r3, #1
   13f86:	9319      	str	r3, [sp, #100]	; 0x64
        // pre padding
        if (!(flags & FLAGS_LEFT)) {
   13f88:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   13f8a:	f003 0302 	and.w	r3, r3, #2
   13f8e:	2b00      	cmp	r3, #0
   13f90:	d113      	bne.n	13fba <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x71a>
          while (l++ < width) {
   13f92:	9b19      	ldr	r3, [sp, #100]	; 0x64
   13f94:	1c5a      	adds	r2, r3, #1
   13f96:	9219      	str	r2, [sp, #100]	; 0x64
   13f98:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   13f9a:	429a      	cmp	r2, r3
   13f9c:	bf8c      	ite	hi
   13f9e:	2301      	movhi	r3, #1
   13fa0:	2300      	movls	r3, #0
   13fa2:	b2db      	uxtb	r3, r3
   13fa4:	2b00      	cmp	r3, #0
   13fa6:	d008      	beq.n	13fba <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x71a>
            out(' ', buffer, idx++, maxlen);
   13fa8:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   13faa:	1c53      	adds	r3, r2, #1
   13fac:	931b      	str	r3, [sp, #108]	; 0x6c
   13fae:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   13fb0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   13fb2:	990c      	ldr	r1, [sp, #48]	; 0x30
   13fb4:	2020      	movs	r0, #32
   13fb6:	47a0      	blx	r4
          while (l++ < width) {
   13fb8:	e7eb      	b.n	13f92 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x6f2>
          }
        }
        // char output
        out((char)va_arg(va, int), buffer, idx++, maxlen);
   13fba:	9b24      	ldr	r3, [sp, #144]	; 0x90
   13fbc:	1d1a      	adds	r2, r3, #4
   13fbe:	9224      	str	r2, [sp, #144]	; 0x90
   13fc0:	681b      	ldr	r3, [r3, #0]
   13fc2:	b2d8      	uxtb	r0, r3
   13fc4:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   13fc6:	1c53      	adds	r3, r2, #1
   13fc8:	931b      	str	r3, [sp, #108]	; 0x6c
   13fca:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   13fcc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   13fce:	990c      	ldr	r1, [sp, #48]	; 0x30
   13fd0:	47a0      	blx	r4
        // post padding
        if (flags & FLAGS_LEFT) {
   13fd2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   13fd4:	f003 0302 	and.w	r3, r3, #2
   13fd8:	2b00      	cmp	r3, #0
   13fda:	d013      	beq.n	14004 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x764>
          while (l++ < width) {
   13fdc:	9b19      	ldr	r3, [sp, #100]	; 0x64
   13fde:	1c5a      	adds	r2, r3, #1
   13fe0:	9219      	str	r2, [sp, #100]	; 0x64
   13fe2:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   13fe4:	429a      	cmp	r2, r3
   13fe6:	bf8c      	ite	hi
   13fe8:	2301      	movhi	r3, #1
   13fea:	2300      	movls	r3, #0
   13fec:	b2db      	uxtb	r3, r3
   13fee:	2b00      	cmp	r3, #0
   13ff0:	d008      	beq.n	14004 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x764>
            out(' ', buffer, idx++, maxlen);
   13ff2:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   13ff4:	1c53      	adds	r3, r2, #1
   13ff6:	931b      	str	r3, [sp, #108]	; 0x6c
   13ff8:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   13ffa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   13ffc:	990c      	ldr	r1, [sp, #48]	; 0x30
   13ffe:	2020      	movs	r0, #32
   14000:	47a0      	blx	r4
          while (l++ < width) {
   14002:	e7eb      	b.n	13fdc <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x73c>
          }
        }
        format++;
   14004:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   14006:	3301      	adds	r3, #1
   14008:	930a      	str	r3, [sp, #40]	; 0x28
        break;
   1400a:	e0a7      	b.n	1415c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8bc>
      }

      case 's' : {
        char* p = va_arg(va, char*);
   1400c:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1400e:	1d1a      	adds	r2, r3, #4
   14010:	9224      	str	r2, [sp, #144]	; 0x90
   14012:	681b      	ldr	r3, [r3, #0]
   14014:	9318      	str	r3, [sp, #96]	; 0x60
        unsigned int l = _strlen(p);
   14016:	9818      	ldr	r0, [sp, #96]	; 0x60
   14018:	f7fe ff98 	bl	12f4c <_strlen(char const*)>
   1401c:	9017      	str	r0, [sp, #92]	; 0x5c
        // pre padding
        if (flags & FLAGS_PRECISION) {
   1401e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   14020:	f403 6380 	and.w	r3, r3, #1024	; 0x400
   14024:	2b00      	cmp	r3, #0
   14026:	d007      	beq.n	14038 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x798>
          l = (l < precision ? l : precision);
   14028:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   1402a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   1402c:	429a      	cmp	r2, r3
   1402e:	d201      	bcs.n	14034 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x794>
   14030:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   14032:	e000      	b.n	14036 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x796>
   14034:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   14036:	9317      	str	r3, [sp, #92]	; 0x5c
        }
        if (!(flags & FLAGS_LEFT)) {
   14038:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   1403a:	f003 0302 	and.w	r3, r3, #2
   1403e:	2b00      	cmp	r3, #0
   14040:	d113      	bne.n	1406a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7ca>
          while (l++ < width) {
   14042:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   14044:	1c5a      	adds	r2, r3, #1
   14046:	9217      	str	r2, [sp, #92]	; 0x5c
   14048:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   1404a:	429a      	cmp	r2, r3
   1404c:	bf8c      	ite	hi
   1404e:	2301      	movhi	r3, #1
   14050:	2300      	movls	r3, #0
   14052:	b2db      	uxtb	r3, r3
   14054:	2b00      	cmp	r3, #0
   14056:	d008      	beq.n	1406a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7ca>
            out(' ', buffer, idx++, maxlen);
   14058:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   1405a:	1c53      	adds	r3, r2, #1
   1405c:	931b      	str	r3, [sp, #108]	; 0x6c
   1405e:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   14060:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   14062:	990c      	ldr	r1, [sp, #48]	; 0x30
   14064:	2020      	movs	r0, #32
   14066:	47a0      	blx	r4
          while (l++ < width) {
   14068:	e7eb      	b.n	14042 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7a2>
          }
        }
        // string output
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
   1406a:	9b18      	ldr	r3, [sp, #96]	; 0x60
   1406c:	781b      	ldrb	r3, [r3, #0]
   1406e:	2b00      	cmp	r3, #0
   14070:	d00b      	beq.n	1408a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7ea>
   14072:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   14074:	f403 6380 	and.w	r3, r3, #1024	; 0x400
   14078:	2b00      	cmp	r3, #0
   1407a:	d004      	beq.n	14086 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7e6>
   1407c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   1407e:	1e5a      	subs	r2, r3, #1
   14080:	921d      	str	r2, [sp, #116]	; 0x74
   14082:	2b00      	cmp	r3, #0
   14084:	d001      	beq.n	1408a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7ea>
   14086:	2301      	movs	r3, #1
   14088:	e000      	b.n	1408c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7ec>
   1408a:	2300      	movs	r3, #0
   1408c:	2b00      	cmp	r3, #0
   1408e:	d00b      	beq.n	140a8 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x808>
          out(*(p++), buffer, idx++, maxlen);
   14090:	9b18      	ldr	r3, [sp, #96]	; 0x60
   14092:	1c5a      	adds	r2, r3, #1
   14094:	9218      	str	r2, [sp, #96]	; 0x60
   14096:	7818      	ldrb	r0, [r3, #0]
   14098:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   1409a:	1c53      	adds	r3, r2, #1
   1409c:	931b      	str	r3, [sp, #108]	; 0x6c
   1409e:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   140a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   140a2:	990c      	ldr	r1, [sp, #48]	; 0x30
   140a4:	47a0      	blx	r4
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
   140a6:	e7e0      	b.n	1406a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7ca>
        }
        // post padding
        if (flags & FLAGS_LEFT) {
   140a8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   140aa:	f003 0302 	and.w	r3, r3, #2
   140ae:	2b00      	cmp	r3, #0
   140b0:	d013      	beq.n	140da <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x83a>
          while (l++ < width) {
   140b2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   140b4:	1c5a      	adds	r2, r3, #1
   140b6:	9217      	str	r2, [sp, #92]	; 0x5c
   140b8:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   140ba:	429a      	cmp	r2, r3
   140bc:	bf8c      	ite	hi
   140be:	2301      	movhi	r3, #1
   140c0:	2300      	movls	r3, #0
   140c2:	b2db      	uxtb	r3, r3
   140c4:	2b00      	cmp	r3, #0
   140c6:	d008      	beq.n	140da <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x83a>
            out(' ', buffer, idx++, maxlen);
   140c8:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   140ca:	1c53      	adds	r3, r2, #1
   140cc:	931b      	str	r3, [sp, #108]	; 0x6c
   140ce:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   140d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   140d2:	990c      	ldr	r1, [sp, #48]	; 0x30
   140d4:	2020      	movs	r0, #32
   140d6:	47a0      	blx	r4
          while (l++ < width) {
   140d8:	e7eb      	b.n	140b2 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x812>
          }
        }
        format++;
   140da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   140dc:	3301      	adds	r3, #1
   140de:	930a      	str	r3, [sp, #40]	; 0x28
        break;
   140e0:	e03c      	b.n	1415c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8bc>
      }

      case 'p' : {
        width = sizeof(void*) * 2U;
   140e2:	2308      	movs	r3, #8
   140e4:	931e      	str	r3, [sp, #120]	; 0x78
        flags |= FLAGS_ZEROPAD | FLAGS_UPPERCASE;
   140e6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   140e8:	f043 0321 	orr.w	r3, r3, #33	; 0x21
   140ec:	931f      	str	r3, [sp, #124]	; 0x7c
#if defined(PRINTF_SUPPORT_LONG_LONG)
        const bool is_ll = sizeof(uintptr_t) == sizeof(long long);
   140ee:	2300      	movs	r3, #0
   140f0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
        if (is_ll) {
          idx = _ntoa_long_long(out, buffer, idx, maxlen, (uintptr_t)va_arg(va, void*), false, 16U, precision, width, flags);
        }
        else {
#endif
          idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void*)), false, 16U, precision, width, flags);
   140f4:	9b24      	ldr	r3, [sp, #144]	; 0x90
   140f6:	1d1a      	adds	r2, r3, #4
   140f8:	9224      	str	r2, [sp, #144]	; 0x90
   140fa:	681b      	ldr	r3, [r3, #0]
   140fc:	461a      	mov	r2, r3
   140fe:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   14100:	9305      	str	r3, [sp, #20]
   14102:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   14104:	9304      	str	r3, [sp, #16]
   14106:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   14108:	9303      	str	r3, [sp, #12]
   1410a:	2310      	movs	r3, #16
   1410c:	9302      	str	r3, [sp, #8]
   1410e:	2300      	movs	r3, #0
   14110:	9301      	str	r3, [sp, #4]
   14112:	9200      	str	r2, [sp, #0]
   14114:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   14116:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   14118:	990c      	ldr	r1, [sp, #48]	; 0x30
   1411a:	980d      	ldr	r0, [sp, #52]	; 0x34
   1411c:	f7ff f8b8 	bl	13290 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)>
   14120:	901b      	str	r0, [sp, #108]	; 0x6c
#if defined(PRINTF_SUPPORT_LONG_LONG)
        }
#endif
        format++;
   14122:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   14124:	3301      	adds	r3, #1
   14126:	930a      	str	r3, [sp, #40]	; 0x28
        break;
   14128:	e018      	b.n	1415c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8bc>
      }

      case '%' :
        out('%', buffer, idx++, maxlen);
   1412a:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   1412c:	1c53      	adds	r3, r2, #1
   1412e:	931b      	str	r3, [sp, #108]	; 0x6c
   14130:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   14132:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   14134:	990c      	ldr	r1, [sp, #48]	; 0x30
   14136:	2025      	movs	r0, #37	; 0x25
   14138:	47a0      	blx	r4
        format++;
   1413a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1413c:	3301      	adds	r3, #1
   1413e:	930a      	str	r3, [sp, #40]	; 0x28
        break;
   14140:	e00c      	b.n	1415c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8bc>

      default :
        out(*format, buffer, idx++, maxlen);
   14142:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   14144:	7818      	ldrb	r0, [r3, #0]
   14146:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   14148:	1c53      	adds	r3, r2, #1
   1414a:	931b      	str	r3, [sp, #108]	; 0x6c
   1414c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   1414e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   14150:	990c      	ldr	r1, [sp, #48]	; 0x30
   14152:	47a0      	blx	r4
        format++;
   14154:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   14156:	3301      	adds	r3, #1
   14158:	930a      	str	r3, [sp, #40]	; 0x28
        break;
   1415a:	bf00      	nop
  while (*format)
   1415c:	f7ff bbb3 	b.w	138c6 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x26>
    }
  }

  // termination
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
   14160:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   14162:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   14164:	429a      	cmp	r2, r3
   14166:	d302      	bcc.n	1416e <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8ce>
   14168:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1416a:	1e5a      	subs	r2, r3, #1
   1416c:	e000      	b.n	14170 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8d0>
   1416e:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   14170:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   14172:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   14174:	990c      	ldr	r1, [sp, #48]	; 0x30
   14176:	2000      	movs	r0, #0
   14178:	47a0      	blx	r4

  // return written chars without terminating \0
  return (int)idx;
   1417a:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
   1417c:	4633      	mov	r3, r6
   1417e:	4619      	mov	r1, r3
   14180:	4803      	ldr	r0, [pc, #12]	; (14190 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8f0>)
   14182:	f7fe fdc1 	bl	12d08 <__cyg_profile_func_exit>
   14186:	4623      	mov	r3, r4
}
   14188:	4618      	mov	r0, r3
   1418a:	b020      	add	sp, #128	; 0x80
   1418c:	bd70      	pop	{r4, r5, r6, pc}
   1418e:	bf00      	nop
   14190:	000138a1 	.word	0x000138a1

00014194 <printf>:

///////////////////////////////////////////////////////////////////////////////


int printf(const char* format, ...)
{
   14194:	b40f      	push	{r0, r1, r2, r3}
   14196:	b530      	push	{r4, r5, lr}
   14198:	b087      	sub	sp, #28
   1419a:	4675      	mov	r5, lr
   1419c:	462b      	mov	r3, r5
   1419e:	4619      	mov	r1, r3
   141a0:	480d      	ldr	r0, [pc, #52]	; (141d8 <printf+0x44>)
   141a2:	f7fe fd9d 	bl	12ce0 <__cyg_profile_func_enter>
  va_list va;
  va_start(va, format);
   141a6:	ab0b      	add	r3, sp, #44	; 0x2c
   141a8:	9304      	str	r3, [sp, #16]
  char buffer[1];
  const int ret = _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
   141aa:	a903      	add	r1, sp, #12
   141ac:	9b04      	ldr	r3, [sp, #16]
   141ae:	9300      	str	r3, [sp, #0]
   141b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   141b2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   141b6:	4809      	ldr	r0, [pc, #36]	; (141dc <printf+0x48>)
   141b8:	f7ff fb72 	bl	138a0 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)>
   141bc:	9005      	str	r0, [sp, #20]
  va_end(va);
  return ret;
   141be:	9c05      	ldr	r4, [sp, #20]
   141c0:	462b      	mov	r3, r5
   141c2:	4619      	mov	r1, r3
   141c4:	4804      	ldr	r0, [pc, #16]	; (141d8 <printf+0x44>)
   141c6:	f7fe fd9f 	bl	12d08 <__cyg_profile_func_exit>
   141ca:	4623      	mov	r3, r4
}
   141cc:	4618      	mov	r0, r3
   141ce:	b007      	add	sp, #28
   141d0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   141d4:	b004      	add	sp, #16
   141d6:	4770      	bx	lr
   141d8:	00014195 	.word	0x00014195
   141dc:	00012f09 	.word	0x00012f09

000141e0 <PinInterface::PinInterface()>:
class PinInterface
   141e0:	b530      	push	{r4, r5, lr}
   141e2:	b083      	sub	sp, #12
   141e4:	4675      	mov	r5, lr
   141e6:	9001      	str	r0, [sp, #4]
   141e8:	462b      	mov	r3, r5
   141ea:	4619      	mov	r1, r3
   141ec:	4807      	ldr	r0, [pc, #28]	; (1420c <PinInterface::PinInterface()+0x2c>)
   141ee:	f7fe fd77 	bl	12ce0 <__cyg_profile_func_enter>
   141f2:	4a07      	ldr	r2, [pc, #28]	; (14210 <PinInterface::PinInterface()+0x30>)
   141f4:	9b01      	ldr	r3, [sp, #4]
   141f6:	601a      	str	r2, [r3, #0]
   141f8:	9c01      	ldr	r4, [sp, #4]
   141fa:	462b      	mov	r3, r5
   141fc:	4619      	mov	r1, r3
   141fe:	4803      	ldr	r0, [pc, #12]	; (1420c <PinInterface::PinInterface()+0x2c>)
   14200:	f7fe fd82 	bl	12d08 <__cyg_profile_func_exit>
   14204:	4623      	mov	r3, r4
   14206:	4618      	mov	r0, r3
   14208:	b003      	add	sp, #12
   1420a:	bd30      	pop	{r4, r5, pc}
   1420c:	000141e1 	.word	0x000141e1
   14210:	00019110 	.word	0x00019110

00014214 <Pin::Pin(unsigned char, unsigned char)>:
  constexpr Pin(uint8_t port_number, uint8_t pin_number)
   14214:	b530      	push	{r4, r5, lr}
   14216:	b083      	sub	sp, #12
   14218:	4675      	mov	r5, lr
   1421a:	9001      	str	r0, [sp, #4]
   1421c:	460b      	mov	r3, r1
   1421e:	f88d 3003 	strb.w	r3, [sp, #3]
   14222:	4613      	mov	r3, r2
   14224:	f88d 3002 	strb.w	r3, [sp, #2]
   14228:	462b      	mov	r3, r5
   1422a:	4619      	mov	r1, r3
   1422c:	480d      	ldr	r0, [pc, #52]	; (14264 <Pin::Pin(unsigned char, unsigned char)+0x50>)
   1422e:	f7fe fd57 	bl	12ce0 <__cyg_profile_func_enter>
      : port_(port_number), pin_(pin_number)
   14232:	9b01      	ldr	r3, [sp, #4]
   14234:	4618      	mov	r0, r3
   14236:	f7ff ffd3 	bl	141e0 <PinInterface::PinInterface()>
   1423a:	4a0b      	ldr	r2, [pc, #44]	; (14268 <Pin::Pin(unsigned char, unsigned char)+0x54>)
   1423c:	9b01      	ldr	r3, [sp, #4]
   1423e:	601a      	str	r2, [r3, #0]
   14240:	9b01      	ldr	r3, [sp, #4]
   14242:	f89d 2003 	ldrb.w	r2, [sp, #3]
   14246:	711a      	strb	r2, [r3, #4]
   14248:	9b01      	ldr	r3, [sp, #4]
   1424a:	f89d 2002 	ldrb.w	r2, [sp, #2]
   1424e:	715a      	strb	r2, [r3, #5]
  }
   14250:	9c01      	ldr	r4, [sp, #4]
   14252:	462b      	mov	r3, r5
   14254:	4619      	mov	r1, r3
   14256:	4803      	ldr	r0, [pc, #12]	; (14264 <Pin::Pin(unsigned char, unsigned char)+0x50>)
   14258:	f7fe fd56 	bl	12d08 <__cyg_profile_func_exit>
   1425c:	4623      	mov	r3, r4
   1425e:	4618      	mov	r0, r3
   14260:	b003      	add	sp, #12
   14262:	bd30      	pop	{r4, r5, pc}
   14264:	00014215 	.word	0x00014215
   14268:	00017a74 	.word	0x00017a74

0001426c <Wait(unsigned long long)::{lambda()#1}::operator()() const>:

inline Status Wait(uint64_t timeout)
{
  return Wait(timeout, []() -> bool { return false; });
   1426c:	b530      	push	{r4, r5, lr}
   1426e:	b083      	sub	sp, #12
   14270:	4675      	mov	r5, lr
   14272:	9001      	str	r0, [sp, #4]
   14274:	462b      	mov	r3, r5
   14276:	4619      	mov	r1, r3
   14278:	4806      	ldr	r0, [pc, #24]	; (14294 <Wait(unsigned long long)::{lambda()#1}::operator()() const+0x28>)
   1427a:	f7fe fd31 	bl	12ce0 <__cyg_profile_func_enter>
   1427e:	2400      	movs	r4, #0
   14280:	462b      	mov	r3, r5
   14282:	4619      	mov	r1, r3
   14284:	4803      	ldr	r0, [pc, #12]	; (14294 <Wait(unsigned long long)::{lambda()#1}::operator()() const+0x28>)
   14286:	f7fe fd3f 	bl	12d08 <__cyg_profile_func_exit>
   1428a:	4623      	mov	r3, r4
   1428c:	4618      	mov	r0, r3
   1428e:	b003      	add	sp, #12
   14290:	bd30      	pop	{r4, r5, pc}
   14292:	bf00      	nop
   14294:	0001426d 	.word	0x0001426d

00014298 <Wait(unsigned long long)::{lambda()#1}::_FUN()>:
   14298:	b538      	push	{r3, r4, r5, lr}
   1429a:	4674      	mov	r4, lr
   1429c:	4623      	mov	r3, r4
   1429e:	4619      	mov	r1, r3
   142a0:	4807      	ldr	r0, [pc, #28]	; (142c0 <Wait(unsigned long long)::{lambda()#1}::_FUN()+0x28>)
   142a2:	f7fe fd1d 	bl	12ce0 <__cyg_profile_func_enter>
   142a6:	2000      	movs	r0, #0
   142a8:	f7ff ffe0 	bl	1426c <Wait(unsigned long long)::{lambda()#1}::operator()() const>
   142ac:	4603      	mov	r3, r0
   142ae:	461d      	mov	r5, r3
   142b0:	4623      	mov	r3, r4
   142b2:	4619      	mov	r1, r3
   142b4:	4802      	ldr	r0, [pc, #8]	; (142c0 <Wait(unsigned long long)::{lambda()#1}::_FUN()+0x28>)
   142b6:	f7fe fd27 	bl	12d08 <__cyg_profile_func_exit>
   142ba:	462b      	mov	r3, r5
   142bc:	4618      	mov	r0, r3
   142be:	bd38      	pop	{r3, r4, r5, pc}
   142c0:	00014299 	.word	0x00014299

000142c4 <Wait(unsigned long long)>:
{
   142c4:	b5f0      	push	{r4, r5, r6, r7, lr}
   142c6:	b089      	sub	sp, #36	; 0x24
   142c8:	4675      	mov	r5, lr
   142ca:	e9cd 0100 	strd	r0, r1, [sp]
   142ce:	462b      	mov	r3, r5
   142d0:	4619      	mov	r1, r3
   142d2:	482b      	ldr	r0, [pc, #172]	; (14380 <Wait(unsigned long long)+0xbc>)
   142d4:	f7fe fd04 	bl	12ce0 <__cyg_profile_func_enter>
   142d8:	e9dd 3400 	ldrd	r3, r4, [sp]
   142dc:	e9cd 3406 	strd	r3, r4, [sp, #24]
   142e0:	f88d 6008 	strb.w	r6, [sp, #8]
   142e4:	462b      	mov	r3, r5
   142e6:	4619      	mov	r1, r3
   142e8:	4826      	ldr	r0, [pc, #152]	; (14384 <Wait(unsigned long long)+0xc0>)
   142ea:	f7fe fcf9 	bl	12ce0 <__cyg_profile_func_enter>
  uint64_t timeout_time = 0;
   142ee:	f04f 0300 	mov.w	r3, #0
   142f2:	f04f 0400 	mov.w	r4, #0
   142f6:	e9cd 3404 	strd	r3, r4, [sp, #16]
  if (timeout == kMaxWait)
   142fa:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
   142fe:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
   14302:	bf08      	it	eq
   14304:	f1b3 3fff 	cmpeq.w	r3, #4294967295	; 0xffffffff
   14308:	d106      	bne.n	14318 <Wait(unsigned long long)+0x54>
    timeout_time = kMaxWait;
   1430a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1430e:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   14312:	e9cd 3404 	strd	r3, r4, [sp, #16]
   14316:	e00a      	b.n	1432e <Wait(unsigned long long)+0x6a>
    timeout_time = Milliseconds() + timeout;
   14318:	f7fc fb32 	bl	10980 <Milliseconds()>
   1431c:	460a      	mov	r2, r1
   1431e:	4601      	mov	r1, r0
   14320:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
   14324:	185e      	adds	r6, r3, r1
   14326:	eb44 0702 	adc.w	r7, r4, r2
   1432a:	e9cd 6704 	strd	r6, r7, [sp, #16]
  Status status = Status::kTimedOut;
   1432e:	2301      	movs	r3, #1
   14330:	9303      	str	r3, [sp, #12]
  while (Milliseconds() < timeout_time)
   14332:	f7fc fb25 	bl	10980 <Milliseconds()>
   14336:	460a      	mov	r2, r1
   14338:	4601      	mov	r1, r0
   1433a:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
   1433e:	42a2      	cmp	r2, r4
   14340:	bf08      	it	eq
   14342:	4299      	cmpeq	r1, r3
   14344:	bf34      	ite	cc
   14346:	2301      	movcc	r3, #1
   14348:	2300      	movcs	r3, #0
   1434a:	b2db      	uxtb	r3, r3
   1434c:	2b00      	cmp	r3, #0
   1434e:	d008      	beq.n	14362 <Wait(unsigned long long)+0x9e>
    if (is_done())
   14350:	ab02      	add	r3, sp, #8
   14352:	4618      	mov	r0, r3
   14354:	f7ff ff8a 	bl	1426c <Wait(unsigned long long)::{lambda()#1}::operator()() const>
   14358:	4603      	mov	r3, r0
   1435a:	2b00      	cmp	r3, #0
   1435c:	d0e9      	beq.n	14332 <Wait(unsigned long long)+0x6e>
      status = Status::kSuccess;
   1435e:	2300      	movs	r3, #0
   14360:	9303      	str	r3, [sp, #12]
  return status;
   14362:	9c03      	ldr	r4, [sp, #12]
   14364:	462b      	mov	r3, r5
   14366:	4619      	mov	r1, r3
   14368:	4806      	ldr	r0, [pc, #24]	; (14384 <Wait(unsigned long long)+0xc0>)
   1436a:	f7fe fccd 	bl	12d08 <__cyg_profile_func_exit>
   1436e:	462b      	mov	r3, r5
   14370:	4619      	mov	r1, r3
   14372:	4803      	ldr	r0, [pc, #12]	; (14380 <Wait(unsigned long long)+0xbc>)
   14374:	f7fe fcc8 	bl	12d08 <__cyg_profile_func_exit>
  return Wait(timeout, []() -> bool { return false; });
   14378:	4623      	mov	r3, r4
}
   1437a:	4618      	mov	r0, r3
   1437c:	b009      	add	sp, #36	; 0x24
   1437e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   14380:	000142c5 	.word	0x000142c5
   14384:	00016b81 	.word	0x00016b81

00014388 <Delay(unsigned long long)>:

// Delay the system for a duration of time
inline void Delay([[maybe_unused]] uint64_t delay_time_ms)
{
   14388:	b510      	push	{r4, lr}
   1438a:	b082      	sub	sp, #8
   1438c:	4674      	mov	r4, lr
   1438e:	e9cd 0100 	strd	r0, r1, [sp]
   14392:	4623      	mov	r3, r4
   14394:	4619      	mov	r1, r3
   14396:	4807      	ldr	r0, [pc, #28]	; (143b4 <Delay(unsigned long long)+0x2c>)
   14398:	f7fe fca2 	bl	12ce0 <__cyg_profile_func_enter>
#if defined(HOST_TEST)
  return;
#else
  Wait(delay_time_ms);
   1439c:	e9dd 0100 	ldrd	r0, r1, [sp]
   143a0:	f7ff ff90 	bl	142c4 <Wait(unsigned long long)>
   143a4:	4623      	mov	r3, r4
   143a6:	4619      	mov	r1, r3
   143a8:	4802      	ldr	r0, [pc, #8]	; (143b4 <Delay(unsigned long long)+0x2c>)
   143aa:	f7fe fcad 	bl	12d08 <__cyg_profile_func_exit>
#endif  // HOST_TEST
}
   143ae:	bf00      	nop
   143b0:	b002      	add	sp, #8
   143b2:	bd10      	pop	{r4, pc}
   143b4:	00014389 	.word	0x00014389

000143b8 <GpioInterface::GpioInterface()>:
#include "L0_LowLevel/LPC40xx.h"
#include "L1_Drivers/pin.hpp"
#include "utility/enum.hpp"
#include "utility/log.hpp"

class GpioInterface
   143b8:	b530      	push	{r4, r5, lr}
   143ba:	b083      	sub	sp, #12
   143bc:	4675      	mov	r5, lr
   143be:	9001      	str	r0, [sp, #4]
   143c0:	462b      	mov	r3, r5
   143c2:	4619      	mov	r1, r3
   143c4:	4807      	ldr	r0, [pc, #28]	; (143e4 <GpioInterface::GpioInterface()+0x2c>)
   143c6:	f7fe fc8b 	bl	12ce0 <__cyg_profile_func_enter>
   143ca:	4a07      	ldr	r2, [pc, #28]	; (143e8 <GpioInterface::GpioInterface()+0x30>)
   143cc:	9b01      	ldr	r3, [sp, #4]
   143ce:	601a      	str	r2, [r3, #0]
   143d0:	9c01      	ldr	r4, [sp, #4]
   143d2:	462b      	mov	r3, r5
   143d4:	4619      	mov	r1, r3
   143d6:	4803      	ldr	r0, [pc, #12]	; (143e4 <GpioInterface::GpioInterface()+0x2c>)
   143d8:	f7fe fc96 	bl	12d08 <__cyg_profile_func_exit>
   143dc:	4623      	mov	r3, r4
   143de:	4618      	mov	r0, r3
   143e0:	b003      	add	sp, #12
   143e2:	bd30      	pop	{r4, r5, pc}
   143e4:	000143b9 	.word	0x000143b9
   143e8:	000190c8 	.word	0x000190c8

000143ec <Gpio::Gpio(unsigned char, unsigned char)>:
  };

  inline static volatile uint32_t * port_status = &(LPC_GPIOINT->IntStatus);

  // For port 0-4, pins 0-31 are available. Port 5 only has pins 0-4 available.
  constexpr Gpio(uint8_t port_number, uint8_t pin_number)
   143ec:	b530      	push	{r4, r5, lr}
   143ee:	b083      	sub	sp, #12
   143f0:	4675      	mov	r5, lr
   143f2:	9001      	str	r0, [sp, #4]
   143f4:	460b      	mov	r3, r1
   143f6:	f88d 3003 	strb.w	r3, [sp, #3]
   143fa:	4613      	mov	r3, r2
   143fc:	f88d 3002 	strb.w	r3, [sp, #2]
   14400:	462b      	mov	r3, r5
   14402:	4619      	mov	r1, r3
   14404:	4816      	ldr	r0, [pc, #88]	; (14460 <Gpio::Gpio(unsigned char, unsigned char)+0x74>)
   14406:	f7fe fc6b 	bl	12ce0 <__cyg_profile_func_enter>
      : interupt_port_(false),
        pin_(&lpc40xx_pin_),
        lpc40xx_pin_(port_number, pin_number)
   1440a:	9b01      	ldr	r3, [sp, #4]
   1440c:	4618      	mov	r0, r3
   1440e:	f7ff ffd3 	bl	143b8 <GpioInterface::GpioInterface()>
   14412:	4a14      	ldr	r2, [pc, #80]	; (14464 <Gpio::Gpio(unsigned char, unsigned char)+0x78>)
   14414:	9b01      	ldr	r3, [sp, #4]
   14416:	601a      	str	r2, [r3, #0]
   14418:	9b01      	ldr	r3, [sp, #4]
   1441a:	2200      	movs	r2, #0
   1441c:	711a      	strb	r2, [r3, #4]
   1441e:	9b01      	ldr	r3, [sp, #4]
   14420:	f103 020c 	add.w	r2, r3, #12
   14424:	9b01      	ldr	r3, [sp, #4]
   14426:	609a      	str	r2, [r3, #8]
   14428:	9b01      	ldr	r3, [sp, #4]
   1442a:	330c      	adds	r3, #12
   1442c:	f89d 2002 	ldrb.w	r2, [sp, #2]
   14430:	f89d 1003 	ldrb.w	r1, [sp, #3]
   14434:	4618      	mov	r0, r3
   14436:	f7ff feed 	bl	14214 <Pin::Pin(unsigned char, unsigned char)>
  {
    interupt_port_ = (port_number == 2) ? 1 : 0;
   1443a:	f89d 3003 	ldrb.w	r3, [sp, #3]
   1443e:	2b02      	cmp	r3, #2
   14440:	d101      	bne.n	14446 <Gpio::Gpio(unsigned char, unsigned char)+0x5a>
   14442:	2201      	movs	r2, #1
   14444:	e000      	b.n	14448 <Gpio::Gpio(unsigned char, unsigned char)+0x5c>
   14446:	2200      	movs	r2, #0
   14448:	9b01      	ldr	r3, [sp, #4]
   1444a:	711a      	strb	r2, [r3, #4]
  }
   1444c:	9c01      	ldr	r4, [sp, #4]
   1444e:	462b      	mov	r3, r5
   14450:	4619      	mov	r1, r3
   14452:	4803      	ldr	r0, [pc, #12]	; (14460 <Gpio::Gpio(unsigned char, unsigned char)+0x74>)
   14454:	f7fe fc58 	bl	12d08 <__cyg_profile_func_exit>
   14458:	4623      	mov	r3, r4
   1445a:	4618      	mov	r0, r3
   1445c:	b003      	add	sp, #12
   1445e:	bd30      	pop	{r4, r5, pc}
   14460:	000143ed 	.word	0x000143ed
   14464:	00019080 	.word	0x00019080

00014468 <Gpio::SetAsInput()>:
      : interupt_port_(false), pin_(pin), lpc40xx_pin_(Pin::CreateInactivePin())
  {
    interupt_port_ = pin_->GetPort();
  }
  // Sets the GPIO pin direction as input
  void SetAsInput(void) override
   14468:	b530      	push	{r4, r5, lr}
   1446a:	b083      	sub	sp, #12
   1446c:	4675      	mov	r5, lr
   1446e:	9001      	str	r0, [sp, #4]
   14470:	462b      	mov	r3, r5
   14472:	4619      	mov	r1, r3
   14474:	4819      	ldr	r0, [pc, #100]	; (144dc <Gpio::SetAsInput()+0x74>)
   14476:	f7fe fc33 	bl	12ce0 <__cyg_profile_func_enter>
  {
    pin_->SetPinFunction(kGpioFunction);
   1447a:	9b01      	ldr	r3, [sp, #4]
   1447c:	689a      	ldr	r2, [r3, #8]
   1447e:	9b01      	ldr	r3, [sp, #4]
   14480:	689b      	ldr	r3, [r3, #8]
   14482:	681b      	ldr	r3, [r3, #0]
   14484:	681b      	ldr	r3, [r3, #0]
   14486:	2100      	movs	r1, #0
   14488:	4610      	mov	r0, r2
   1448a:	4798      	blx	r3
    gpio_port[pin_->GetPort()]->DIR &= ~(1 << pin_->GetPin());
   1448c:	9b01      	ldr	r3, [sp, #4]
   1448e:	689a      	ldr	r2, [r3, #8]
   14490:	9b01      	ldr	r3, [sp, #4]
   14492:	689b      	ldr	r3, [r3, #8]
   14494:	681b      	ldr	r3, [r3, #0]
   14496:	3330      	adds	r3, #48	; 0x30
   14498:	681b      	ldr	r3, [r3, #0]
   1449a:	4610      	mov	r0, r2
   1449c:	4798      	blx	r3
   1449e:	4603      	mov	r3, r0
   144a0:	461a      	mov	r2, r3
   144a2:	2301      	movs	r3, #1
   144a4:	4093      	lsls	r3, r2
   144a6:	43dc      	mvns	r4, r3
   144a8:	9b01      	ldr	r3, [sp, #4]
   144aa:	689a      	ldr	r2, [r3, #8]
   144ac:	9b01      	ldr	r3, [sp, #4]
   144ae:	689b      	ldr	r3, [r3, #8]
   144b0:	681b      	ldr	r3, [r3, #0]
   144b2:	332c      	adds	r3, #44	; 0x2c
   144b4:	681b      	ldr	r3, [r3, #0]
   144b6:	4610      	mov	r0, r2
   144b8:	4798      	blx	r3
   144ba:	4603      	mov	r3, r0
   144bc:	461a      	mov	r2, r3
   144be:	4b08      	ldr	r3, [pc, #32]	; (144e0 <Gpio::SetAsInput()+0x78>)
   144c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   144c4:	681a      	ldr	r2, [r3, #0]
   144c6:	4621      	mov	r1, r4
   144c8:	400a      	ands	r2, r1
   144ca:	601a      	str	r2, [r3, #0]
   144cc:	462b      	mov	r3, r5
   144ce:	4619      	mov	r1, r3
   144d0:	4802      	ldr	r0, [pc, #8]	; (144dc <Gpio::SetAsInput()+0x74>)
   144d2:	f7fe fc19 	bl	12d08 <__cyg_profile_func_exit>
  }
   144d6:	bf00      	nop
   144d8:	b003      	add	sp, #12
   144da:	bd30      	pop	{r4, r5, pc}
   144dc:	00014469 	.word	0x00014469
   144e0:	10000188 	.word	0x10000188

000144e4 <Gpio::SetAsOutput()>:
  // Sets the GPIO pin direction as output
  void SetAsOutput(void) override
   144e4:	b530      	push	{r4, r5, lr}
   144e6:	b083      	sub	sp, #12
   144e8:	4675      	mov	r5, lr
   144ea:	9001      	str	r0, [sp, #4]
   144ec:	462b      	mov	r3, r5
   144ee:	4619      	mov	r1, r3
   144f0:	4819      	ldr	r0, [pc, #100]	; (14558 <Gpio::SetAsOutput()+0x74>)
   144f2:	f7fe fbf5 	bl	12ce0 <__cyg_profile_func_enter>
  {
    pin_->SetPinFunction(kGpioFunction);
   144f6:	9b01      	ldr	r3, [sp, #4]
   144f8:	689a      	ldr	r2, [r3, #8]
   144fa:	9b01      	ldr	r3, [sp, #4]
   144fc:	689b      	ldr	r3, [r3, #8]
   144fe:	681b      	ldr	r3, [r3, #0]
   14500:	681b      	ldr	r3, [r3, #0]
   14502:	2100      	movs	r1, #0
   14504:	4610      	mov	r0, r2
   14506:	4798      	blx	r3
    gpio_port[pin_->GetPort()]->DIR |= (1 << pin_->GetPin());
   14508:	9b01      	ldr	r3, [sp, #4]
   1450a:	689a      	ldr	r2, [r3, #8]
   1450c:	9b01      	ldr	r3, [sp, #4]
   1450e:	689b      	ldr	r3, [r3, #8]
   14510:	681b      	ldr	r3, [r3, #0]
   14512:	3330      	adds	r3, #48	; 0x30
   14514:	681b      	ldr	r3, [r3, #0]
   14516:	4610      	mov	r0, r2
   14518:	4798      	blx	r3
   1451a:	4603      	mov	r3, r0
   1451c:	461a      	mov	r2, r3
   1451e:	2301      	movs	r3, #1
   14520:	fa03 f402 	lsl.w	r4, r3, r2
   14524:	9b01      	ldr	r3, [sp, #4]
   14526:	689a      	ldr	r2, [r3, #8]
   14528:	9b01      	ldr	r3, [sp, #4]
   1452a:	689b      	ldr	r3, [r3, #8]
   1452c:	681b      	ldr	r3, [r3, #0]
   1452e:	332c      	adds	r3, #44	; 0x2c
   14530:	681b      	ldr	r3, [r3, #0]
   14532:	4610      	mov	r0, r2
   14534:	4798      	blx	r3
   14536:	4603      	mov	r3, r0
   14538:	461a      	mov	r2, r3
   1453a:	4b08      	ldr	r3, [pc, #32]	; (1455c <Gpio::SetAsOutput()+0x78>)
   1453c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   14540:	681a      	ldr	r2, [r3, #0]
   14542:	4621      	mov	r1, r4
   14544:	430a      	orrs	r2, r1
   14546:	601a      	str	r2, [r3, #0]
   14548:	462b      	mov	r3, r5
   1454a:	4619      	mov	r1, r3
   1454c:	4802      	ldr	r0, [pc, #8]	; (14558 <Gpio::SetAsOutput()+0x74>)
   1454e:	f7fe fbdb 	bl	12d08 <__cyg_profile_func_exit>
  }
   14552:	bf00      	nop
   14554:	b003      	add	sp, #12
   14556:	bd30      	pop	{r4, r5, pc}
   14558:	000144e5 	.word	0x000144e5
   1455c:	10000188 	.word	0x10000188

00014560 <Gpio::SetDirection(GpioInterface::Direction)>:
  // Sets the GPIO pin direction as output or input depending on the
  // Direction enum parameter
  inline void SetDirection(Direction direction) override
   14560:	b510      	push	{r4, lr}
   14562:	b082      	sub	sp, #8
   14564:	4674      	mov	r4, lr
   14566:	9001      	str	r0, [sp, #4]
   14568:	460b      	mov	r3, r1
   1456a:	f88d 3003 	strb.w	r3, [sp, #3]
   1456e:	4623      	mov	r3, r4
   14570:	4619      	mov	r1, r3
   14572:	480b      	ldr	r0, [pc, #44]	; (145a0 <Gpio::SetDirection(GpioInterface::Direction)+0x40>)
   14574:	f7fe fbb4 	bl	12ce0 <__cyg_profile_func_enter>
  {
    (direction) ? SetAsOutput() : SetAsInput();
   14578:	f89d 3003 	ldrb.w	r3, [sp, #3]
   1457c:	2b00      	cmp	r3, #0
   1457e:	d003      	beq.n	14588 <Gpio::SetDirection(GpioInterface::Direction)+0x28>
   14580:	9801      	ldr	r0, [sp, #4]
   14582:	f7ff ffaf 	bl	144e4 <Gpio::SetAsOutput()>
   14586:	e002      	b.n	1458e <Gpio::SetDirection(GpioInterface::Direction)+0x2e>
   14588:	9801      	ldr	r0, [sp, #4]
   1458a:	f7ff ff6d 	bl	14468 <Gpio::SetAsInput()>
   1458e:	4623      	mov	r3, r4
   14590:	4619      	mov	r1, r3
   14592:	4803      	ldr	r0, [pc, #12]	; (145a0 <Gpio::SetDirection(GpioInterface::Direction)+0x40>)
   14594:	f7fe fbb8 	bl	12d08 <__cyg_profile_func_exit>
  }
   14598:	bf00      	nop
   1459a:	b002      	add	sp, #8
   1459c:	bd10      	pop	{r4, pc}
   1459e:	bf00      	nop
   145a0:	00014561 	.word	0x00014561

000145a4 <Gpio::SetHigh()>:
  // Sets the GPIO output pin to high
  void SetHigh(void) override
   145a4:	b530      	push	{r4, r5, lr}
   145a6:	b083      	sub	sp, #12
   145a8:	4675      	mov	r5, lr
   145aa:	9001      	str	r0, [sp, #4]
   145ac:	462b      	mov	r3, r5
   145ae:	4619      	mov	r1, r3
   145b0:	4813      	ldr	r0, [pc, #76]	; (14600 <Gpio::SetHigh()+0x5c>)
   145b2:	f7fe fb95 	bl	12ce0 <__cyg_profile_func_enter>
  {
    gpio_port[pin_->GetPort()]->SET = (1 << pin_->GetPin());
   145b6:	9b01      	ldr	r3, [sp, #4]
   145b8:	689a      	ldr	r2, [r3, #8]
   145ba:	9b01      	ldr	r3, [sp, #4]
   145bc:	689b      	ldr	r3, [r3, #8]
   145be:	681b      	ldr	r3, [r3, #0]
   145c0:	3330      	adds	r3, #48	; 0x30
   145c2:	681b      	ldr	r3, [r3, #0]
   145c4:	4610      	mov	r0, r2
   145c6:	4798      	blx	r3
   145c8:	4603      	mov	r3, r0
   145ca:	461a      	mov	r2, r3
   145cc:	2301      	movs	r3, #1
   145ce:	4093      	lsls	r3, r2
   145d0:	461c      	mov	r4, r3
   145d2:	9b01      	ldr	r3, [sp, #4]
   145d4:	689a      	ldr	r2, [r3, #8]
   145d6:	9b01      	ldr	r3, [sp, #4]
   145d8:	689b      	ldr	r3, [r3, #8]
   145da:	681b      	ldr	r3, [r3, #0]
   145dc:	332c      	adds	r3, #44	; 0x2c
   145de:	681b      	ldr	r3, [r3, #0]
   145e0:	4610      	mov	r0, r2
   145e2:	4798      	blx	r3
   145e4:	4603      	mov	r3, r0
   145e6:	461a      	mov	r2, r3
   145e8:	4b06      	ldr	r3, [pc, #24]	; (14604 <Gpio::SetHigh()+0x60>)
   145ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   145ee:	619c      	str	r4, [r3, #24]
   145f0:	462b      	mov	r3, r5
   145f2:	4619      	mov	r1, r3
   145f4:	4802      	ldr	r0, [pc, #8]	; (14600 <Gpio::SetHigh()+0x5c>)
   145f6:	f7fe fb87 	bl	12d08 <__cyg_profile_func_exit>
  }
   145fa:	bf00      	nop
   145fc:	b003      	add	sp, #12
   145fe:	bd30      	pop	{r4, r5, pc}
   14600:	000145a5 	.word	0x000145a5
   14604:	10000188 	.word	0x10000188

00014608 <Gpio::SetLow()>:
  // Sets the GPIO output pin to low
  void SetLow(void) override
   14608:	b530      	push	{r4, r5, lr}
   1460a:	b083      	sub	sp, #12
   1460c:	4675      	mov	r5, lr
   1460e:	9001      	str	r0, [sp, #4]
   14610:	462b      	mov	r3, r5
   14612:	4619      	mov	r1, r3
   14614:	4813      	ldr	r0, [pc, #76]	; (14664 <Gpio::SetLow()+0x5c>)
   14616:	f7fe fb63 	bl	12ce0 <__cyg_profile_func_enter>
  {
    gpio_port[pin_->GetPort()]->CLR = (1 << pin_->GetPin());
   1461a:	9b01      	ldr	r3, [sp, #4]
   1461c:	689a      	ldr	r2, [r3, #8]
   1461e:	9b01      	ldr	r3, [sp, #4]
   14620:	689b      	ldr	r3, [r3, #8]
   14622:	681b      	ldr	r3, [r3, #0]
   14624:	3330      	adds	r3, #48	; 0x30
   14626:	681b      	ldr	r3, [r3, #0]
   14628:	4610      	mov	r0, r2
   1462a:	4798      	blx	r3
   1462c:	4603      	mov	r3, r0
   1462e:	461a      	mov	r2, r3
   14630:	2301      	movs	r3, #1
   14632:	4093      	lsls	r3, r2
   14634:	461c      	mov	r4, r3
   14636:	9b01      	ldr	r3, [sp, #4]
   14638:	689a      	ldr	r2, [r3, #8]
   1463a:	9b01      	ldr	r3, [sp, #4]
   1463c:	689b      	ldr	r3, [r3, #8]
   1463e:	681b      	ldr	r3, [r3, #0]
   14640:	332c      	adds	r3, #44	; 0x2c
   14642:	681b      	ldr	r3, [r3, #0]
   14644:	4610      	mov	r0, r2
   14646:	4798      	blx	r3
   14648:	4603      	mov	r3, r0
   1464a:	461a      	mov	r2, r3
   1464c:	4b06      	ldr	r3, [pc, #24]	; (14668 <Gpio::SetLow()+0x60>)
   1464e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   14652:	61dc      	str	r4, [r3, #28]
   14654:	462b      	mov	r3, r5
   14656:	4619      	mov	r1, r3
   14658:	4802      	ldr	r0, [pc, #8]	; (14664 <Gpio::SetLow()+0x5c>)
   1465a:	f7fe fb55 	bl	12d08 <__cyg_profile_func_exit>
  }
   1465e:	bf00      	nop
   14660:	b003      	add	sp, #12
   14662:	bd30      	pop	{r4, r5, pc}
   14664:	00014609 	.word	0x00014609
   14668:	10000188 	.word	0x10000188

0001466c <Gpio::Set(GpioInterface::State)>:
  // Sets the GPIO output pin to high or low depending on the State enum
  // parameter
  void Set(State output = kHigh) override
   1466c:	b510      	push	{r4, lr}
   1466e:	b082      	sub	sp, #8
   14670:	4674      	mov	r4, lr
   14672:	9001      	str	r0, [sp, #4]
   14674:	460b      	mov	r3, r1
   14676:	f88d 3003 	strb.w	r3, [sp, #3]
   1467a:	4623      	mov	r3, r4
   1467c:	4619      	mov	r1, r3
   1467e:	480b      	ldr	r0, [pc, #44]	; (146ac <Gpio::Set(GpioInterface::State)+0x40>)
   14680:	f7fe fb2e 	bl	12ce0 <__cyg_profile_func_enter>
  {
    (output) ? SetHigh() : SetLow();
   14684:	f89d 3003 	ldrb.w	r3, [sp, #3]
   14688:	2b00      	cmp	r3, #0
   1468a:	d003      	beq.n	14694 <Gpio::Set(GpioInterface::State)+0x28>
   1468c:	9801      	ldr	r0, [sp, #4]
   1468e:	f7ff ff89 	bl	145a4 <Gpio::SetHigh()>
   14692:	e002      	b.n	1469a <Gpio::Set(GpioInterface::State)+0x2e>
   14694:	9801      	ldr	r0, [sp, #4]
   14696:	f7ff ffb7 	bl	14608 <Gpio::SetLow()>
   1469a:	4623      	mov	r3, r4
   1469c:	4619      	mov	r1, r3
   1469e:	4803      	ldr	r0, [pc, #12]	; (146ac <Gpio::Set(GpioInterface::State)+0x40>)
   146a0:	f7fe fb32 	bl	12d08 <__cyg_profile_func_exit>
  }
   146a4:	bf00      	nop
   146a6:	b002      	add	sp, #8
   146a8:	bd10      	pop	{r4, pc}
   146aa:	bf00      	nop
   146ac:	0001466d 	.word	0x0001466d

000146b0 <Gpio::Toggle()>:
  // Toggle the output of a GPIO output pin
  void Toggle() override
   146b0:	b530      	push	{r4, r5, lr}
   146b2:	b083      	sub	sp, #12
   146b4:	4675      	mov	r5, lr
   146b6:	9001      	str	r0, [sp, #4]
   146b8:	462b      	mov	r3, r5
   146ba:	4619      	mov	r1, r3
   146bc:	4815      	ldr	r0, [pc, #84]	; (14714 <Gpio::Toggle()+0x64>)
   146be:	f7fe fb0f 	bl	12ce0 <__cyg_profile_func_enter>
  {
    gpio_port[pin_->GetPort()]->PIN ^= (1 << pin_->GetPin());
   146c2:	9b01      	ldr	r3, [sp, #4]
   146c4:	689a      	ldr	r2, [r3, #8]
   146c6:	9b01      	ldr	r3, [sp, #4]
   146c8:	689b      	ldr	r3, [r3, #8]
   146ca:	681b      	ldr	r3, [r3, #0]
   146cc:	3330      	adds	r3, #48	; 0x30
   146ce:	681b      	ldr	r3, [r3, #0]
   146d0:	4610      	mov	r0, r2
   146d2:	4798      	blx	r3
   146d4:	4603      	mov	r3, r0
   146d6:	461a      	mov	r2, r3
   146d8:	2301      	movs	r3, #1
   146da:	fa03 f402 	lsl.w	r4, r3, r2
   146de:	9b01      	ldr	r3, [sp, #4]
   146e0:	689a      	ldr	r2, [r3, #8]
   146e2:	9b01      	ldr	r3, [sp, #4]
   146e4:	689b      	ldr	r3, [r3, #8]
   146e6:	681b      	ldr	r3, [r3, #0]
   146e8:	332c      	adds	r3, #44	; 0x2c
   146ea:	681b      	ldr	r3, [r3, #0]
   146ec:	4610      	mov	r0, r2
   146ee:	4798      	blx	r3
   146f0:	4603      	mov	r3, r0
   146f2:	461a      	mov	r2, r3
   146f4:	4b08      	ldr	r3, [pc, #32]	; (14718 <Gpio::Toggle()+0x68>)
   146f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   146fa:	695a      	ldr	r2, [r3, #20]
   146fc:	4621      	mov	r1, r4
   146fe:	404a      	eors	r2, r1
   14700:	615a      	str	r2, [r3, #20]
   14702:	462b      	mov	r3, r5
   14704:	4619      	mov	r1, r3
   14706:	4803      	ldr	r0, [pc, #12]	; (14714 <Gpio::Toggle()+0x64>)
   14708:	f7fe fafe 	bl	12d08 <__cyg_profile_func_exit>
  }
   1470c:	bf00      	nop
   1470e:	b003      	add	sp, #12
   14710:	bd30      	pop	{r4, r5, pc}
   14712:	bf00      	nop
   14714:	000146b1 	.word	0x000146b1
   14718:	10000188 	.word	0x10000188

0001471c <Gpio::ReadState()>:
  // Returns the current State state of the pin
  State ReadState(void) override
   1471c:	b530      	push	{r4, r5, lr}
   1471e:	b085      	sub	sp, #20
   14720:	4675      	mov	r5, lr
   14722:	9001      	str	r0, [sp, #4]
   14724:	462b      	mov	r3, r5
   14726:	4619      	mov	r1, r3
   14728:	4818      	ldr	r0, [pc, #96]	; (1478c <Gpio::ReadState()+0x70>)
   1472a:	f7fe fad9 	bl	12ce0 <__cyg_profile_func_enter>
  {
    bool state = (gpio_port[pin_->GetPort()]->PIN >> pin_->GetPin()) & 1;
   1472e:	9b01      	ldr	r3, [sp, #4]
   14730:	689a      	ldr	r2, [r3, #8]
   14732:	9b01      	ldr	r3, [sp, #4]
   14734:	689b      	ldr	r3, [r3, #8]
   14736:	681b      	ldr	r3, [r3, #0]
   14738:	332c      	adds	r3, #44	; 0x2c
   1473a:	681b      	ldr	r3, [r3, #0]
   1473c:	4610      	mov	r0, r2
   1473e:	4798      	blx	r3
   14740:	4603      	mov	r3, r0
   14742:	461a      	mov	r2, r3
   14744:	4b12      	ldr	r3, [pc, #72]	; (14790 <Gpio::ReadState()+0x74>)
   14746:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   1474a:	695c      	ldr	r4, [r3, #20]
   1474c:	9b01      	ldr	r3, [sp, #4]
   1474e:	689a      	ldr	r2, [r3, #8]
   14750:	9b01      	ldr	r3, [sp, #4]
   14752:	689b      	ldr	r3, [r3, #8]
   14754:	681b      	ldr	r3, [r3, #0]
   14756:	3330      	adds	r3, #48	; 0x30
   14758:	681b      	ldr	r3, [r3, #0]
   1475a:	4610      	mov	r0, r2
   1475c:	4798      	blx	r3
   1475e:	4603      	mov	r3, r0
   14760:	fa24 f303 	lsr.w	r3, r4, r3
   14764:	f003 0301 	and.w	r3, r3, #1
   14768:	2b00      	cmp	r3, #0
   1476a:	bf14      	ite	ne
   1476c:	2301      	movne	r3, #1
   1476e:	2300      	moveq	r3, #0
   14770:	f88d 300f 	strb.w	r3, [sp, #15]
    return static_cast<State>(state);
   14774:	f89d 400f 	ldrb.w	r4, [sp, #15]
   14778:	462b      	mov	r3, r5
   1477a:	4619      	mov	r1, r3
   1477c:	4803      	ldr	r0, [pc, #12]	; (1478c <Gpio::ReadState()+0x70>)
   1477e:	f7fe fac3 	bl	12d08 <__cyg_profile_func_exit>
   14782:	4623      	mov	r3, r4
  }
   14784:	4618      	mov	r0, r3
   14786:	b005      	add	sp, #20
   14788:	bd30      	pop	{r4, r5, pc}
   1478a:	bf00      	nop
   1478c:	0001471d 	.word	0x0001471d
   14790:	10000188 	.word	0x10000188

00014794 <Gpio::Read()>:
  // Returns true if input or output pin is high
  bool Read(void) override
   14794:	b530      	push	{r4, r5, lr}
   14796:	b083      	sub	sp, #12
   14798:	4675      	mov	r5, lr
   1479a:	9001      	str	r0, [sp, #4]
   1479c:	462b      	mov	r3, r5
   1479e:	4619      	mov	r1, r3
   147a0:	4816      	ldr	r0, [pc, #88]	; (147fc <Gpio::Read()+0x68>)
   147a2:	f7fe fa9d 	bl	12ce0 <__cyg_profile_func_enter>
  {
    return (gpio_port[pin_->GetPort()]->PIN >> pin_->GetPin()) & 1;
   147a6:	9b01      	ldr	r3, [sp, #4]
   147a8:	689a      	ldr	r2, [r3, #8]
   147aa:	9b01      	ldr	r3, [sp, #4]
   147ac:	689b      	ldr	r3, [r3, #8]
   147ae:	681b      	ldr	r3, [r3, #0]
   147b0:	332c      	adds	r3, #44	; 0x2c
   147b2:	681b      	ldr	r3, [r3, #0]
   147b4:	4610      	mov	r0, r2
   147b6:	4798      	blx	r3
   147b8:	4603      	mov	r3, r0
   147ba:	461a      	mov	r2, r3
   147bc:	4b10      	ldr	r3, [pc, #64]	; (14800 <Gpio::Read()+0x6c>)
   147be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   147c2:	695c      	ldr	r4, [r3, #20]
   147c4:	9b01      	ldr	r3, [sp, #4]
   147c6:	689a      	ldr	r2, [r3, #8]
   147c8:	9b01      	ldr	r3, [sp, #4]
   147ca:	689b      	ldr	r3, [r3, #8]
   147cc:	681b      	ldr	r3, [r3, #0]
   147ce:	3330      	adds	r3, #48	; 0x30
   147d0:	681b      	ldr	r3, [r3, #0]
   147d2:	4610      	mov	r0, r2
   147d4:	4798      	blx	r3
   147d6:	4603      	mov	r3, r0
   147d8:	fa24 f303 	lsr.w	r3, r4, r3
   147dc:	f003 0301 	and.w	r3, r3, #1
   147e0:	2b00      	cmp	r3, #0
   147e2:	bf14      	ite	ne
   147e4:	2301      	movne	r3, #1
   147e6:	2300      	moveq	r3, #0
   147e8:	b2dc      	uxtb	r4, r3
   147ea:	462b      	mov	r3, r5
   147ec:	4619      	mov	r1, r3
   147ee:	4803      	ldr	r0, [pc, #12]	; (147fc <Gpio::Read()+0x68>)
   147f0:	f7fe fa8a 	bl	12d08 <__cyg_profile_func_exit>
   147f4:	4623      	mov	r3, r4
  }
   147f6:	4618      	mov	r0, r3
   147f8:	b003      	add	sp, #12
   147fa:	bd30      	pop	{r4, r5, pc}
   147fc:	00014795 	.word	0x00014795
   14800:	10000188 	.word	0x10000188

00014804 <Gpio::GetPin()>:
  PinInterface & GetPin() override
   14804:	b530      	push	{r4, r5, lr}
   14806:	b083      	sub	sp, #12
   14808:	4675      	mov	r5, lr
   1480a:	9001      	str	r0, [sp, #4]
   1480c:	462b      	mov	r3, r5
   1480e:	4619      	mov	r1, r3
   14810:	4806      	ldr	r0, [pc, #24]	; (1482c <Gpio::GetPin()+0x28>)
   14812:	f7fe fa65 	bl	12ce0 <__cyg_profile_func_enter>
  {
    return *pin_;
   14816:	9b01      	ldr	r3, [sp, #4]
   14818:	689c      	ldr	r4, [r3, #8]
   1481a:	462b      	mov	r3, r5
   1481c:	4619      	mov	r1, r3
   1481e:	4803      	ldr	r0, [pc, #12]	; (1482c <Gpio::GetPin()+0x28>)
   14820:	f7fe fa72 	bl	12d08 <__cyg_profile_func_exit>
   14824:	4623      	mov	r3, r4
  }
   14826:	4618      	mov	r0, r3
   14828:	b003      	add	sp, #12
   1482a:	bd30      	pop	{r4, r5, pc}
   1482c:	00014805 	.word	0x00014805

00014830 <Gpio::ValidPortCheck()>:

  // Checks if the selected gpio port is valid for external interrupts.
  bool ValidPortCheck()
   14830:	b530      	push	{r4, r5, lr}
   14832:	b087      	sub	sp, #28
   14834:	4675      	mov	r5, lr
   14836:	9003      	str	r0, [sp, #12]
   14838:	462b      	mov	r3, r5
   1483a:	4619      	mov	r1, r3
   1483c:	4817      	ldr	r0, [pc, #92]	; (1489c <Gpio::ValidPortCheck()+0x6c>)
   1483e:	f7fe fa4f 	bl	12ce0 <__cyg_profile_func_enter>
  {
    bool is_valid = (interupt_port_ <= 1);
   14842:	9b03      	ldr	r3, [sp, #12]
   14844:	791b      	ldrb	r3, [r3, #4]
   14846:	2b01      	cmp	r3, #1
   14848:	bf94      	ite	ls
   1484a:	2301      	movls	r3, #1
   1484c:	2300      	movhi	r3, #0
   1484e:	b2db      	uxtb	r3, r3
   14850:	f88d 3017 	strb.w	r3, [sp, #23]
    SJ2_ASSERT_WARNING(is_valid,
   14854:	f89d 3017 	ldrb.w	r3, [sp, #23]
   14858:	f083 0301 	eor.w	r3, r3, #1
   1485c:	b2db      	uxtb	r3, r3
   1485e:	2b00      	cmp	r3, #0
   14860:	d010      	beq.n	14884 <Gpio::ValidPortCheck()+0x54>
   14862:	9b03      	ldr	r3, [sp, #12]
   14864:	689a      	ldr	r2, [r3, #8]
   14866:	9b03      	ldr	r3, [sp, #12]
   14868:	689b      	ldr	r3, [r3, #8]
   1486a:	681b      	ldr	r3, [r3, #0]
   1486c:	332c      	adds	r3, #44	; 0x2c
   1486e:	681b      	ldr	r3, [r3, #0]
   14870:	4610      	mov	r0, r2
   14872:	4798      	blx	r3
   14874:	4603      	mov	r3, r0
   14876:	9300      	str	r3, [sp, #0]
   14878:	23a6      	movs	r3, #166	; 0xa6
   1487a:	4a09      	ldr	r2, [pc, #36]	; (148a0 <Gpio::ValidPortCheck()+0x70>)
   1487c:	4909      	ldr	r1, [pc, #36]	; (148a4 <Gpio::ValidPortCheck()+0x74>)
   1487e:	480a      	ldr	r0, [pc, #40]	; (148a8 <Gpio::ValidPortCheck()+0x78>)
   14880:	f7ff fc88 	bl	14194 <printf>
                       "Port %d cannot be used for External Interrupts. Need "
                       "to use GPIO on Port 0 or 2.",
                       pin_->GetPort());
    return is_valid;
   14884:	f89d 4017 	ldrb.w	r4, [sp, #23]
   14888:	462b      	mov	r3, r5
   1488a:	4619      	mov	r1, r3
   1488c:	4803      	ldr	r0, [pc, #12]	; (1489c <Gpio::ValidPortCheck()+0x6c>)
   1488e:	f7fe fa3b 	bl	12d08 <__cyg_profile_func_exit>
   14892:	4623      	mov	r3, r4
  }
   14894:	4618      	mov	r0, r3
   14896:	b007      	add	sp, #28
   14898:	bd30      	pop	{r4, r5, pc}
   1489a:	bf00      	nop
   1489c:	00014831 	.word	0x00014831
   148a0:	00019180 	.word	0x00019180
   148a4:	00018b74 	.word	0x00018b74
   148a8:	00018044 	.word	0x00018044

000148ac <Gpio::SetInterruptRoutine(void (*)())>:

  // Assigns the developer's ISR function to the port/pin gpio instance.
  void SetInterruptRoutine(IsrPointer function) override
   148ac:	b570      	push	{r4, r5, r6, lr}
   148ae:	b082      	sub	sp, #8
   148b0:	4676      	mov	r6, lr
   148b2:	9001      	str	r0, [sp, #4]
   148b4:	9100      	str	r1, [sp, #0]
   148b6:	4633      	mov	r3, r6
   148b8:	4619      	mov	r1, r3
   148ba:	4811      	ldr	r0, [pc, #68]	; (14900 <Gpio::SetInterruptRoutine(void (*)())+0x54>)
   148bc:	f7fe fa10 	bl	12ce0 <__cyg_profile_func_enter>
  {
    ValidPortCheck();
   148c0:	9801      	ldr	r0, [sp, #4]
   148c2:	f7ff ffb5 	bl	14830 <Gpio::ValidPortCheck()>
    interrupthandlers[interupt_port_][pin_->GetPin()] = function;
   148c6:	9c00      	ldr	r4, [sp, #0]
   148c8:	9b01      	ldr	r3, [sp, #4]
   148ca:	791b      	ldrb	r3, [r3, #4]
   148cc:	461d      	mov	r5, r3
   148ce:	9b01      	ldr	r3, [sp, #4]
   148d0:	689a      	ldr	r2, [r3, #8]
   148d2:	9b01      	ldr	r3, [sp, #4]
   148d4:	689b      	ldr	r3, [r3, #8]
   148d6:	681b      	ldr	r3, [r3, #0]
   148d8:	3330      	adds	r3, #48	; 0x30
   148da:	681b      	ldr	r3, [r3, #0]
   148dc:	4610      	mov	r0, r2
   148de:	4798      	blx	r3
   148e0:	4603      	mov	r3, r0
   148e2:	4619      	mov	r1, r3
   148e4:	4a07      	ldr	r2, [pc, #28]	; (14904 <Gpio::SetInterruptRoutine(void (*)())+0x58>)
   148e6:	016b      	lsls	r3, r5, #5
   148e8:	440b      	add	r3, r1
   148ea:	f842 4023 	str.w	r4, [r2, r3, lsl #2]
   148ee:	4633      	mov	r3, r6
   148f0:	4619      	mov	r1, r3
   148f2:	4803      	ldr	r0, [pc, #12]	; (14900 <Gpio::SetInterruptRoutine(void (*)())+0x54>)
   148f4:	f7fe fa08 	bl	12d08 <__cyg_profile_func_exit>
  }
   148f8:	bf00      	nop
   148fa:	b002      	add	sp, #8
   148fc:	bd70      	pop	{r4, r5, r6, pc}
   148fe:	bf00      	nop
   14900:	000148ad 	.word	0x000148ad
   14904:	10000440 	.word	0x10000440

00014908 <Gpio::ClearInterruptRoutine()>:

  // Clears the developers ISR function from the port/pin gio instance.
  void ClearInterruptRoutine() override
   14908:	b530      	push	{r4, r5, lr}
   1490a:	b083      	sub	sp, #12
   1490c:	4675      	mov	r5, lr
   1490e:	9001      	str	r0, [sp, #4]
   14910:	462b      	mov	r3, r5
   14912:	4619      	mov	r1, r3
   14914:	480f      	ldr	r0, [pc, #60]	; (14954 <Gpio::ClearInterruptRoutine()+0x4c>)
   14916:	f7fe f9e3 	bl	12ce0 <__cyg_profile_func_enter>
  {
    interrupthandlers[interupt_port_][pin_->GetPin()] = nullptr;
   1491a:	9b01      	ldr	r3, [sp, #4]
   1491c:	791b      	ldrb	r3, [r3, #4]
   1491e:	461c      	mov	r4, r3
   14920:	9b01      	ldr	r3, [sp, #4]
   14922:	689a      	ldr	r2, [r3, #8]
   14924:	9b01      	ldr	r3, [sp, #4]
   14926:	689b      	ldr	r3, [r3, #8]
   14928:	681b      	ldr	r3, [r3, #0]
   1492a:	3330      	adds	r3, #48	; 0x30
   1492c:	681b      	ldr	r3, [r3, #0]
   1492e:	4610      	mov	r0, r2
   14930:	4798      	blx	r3
   14932:	4603      	mov	r3, r0
   14934:	4619      	mov	r1, r3
   14936:	4a08      	ldr	r2, [pc, #32]	; (14958 <Gpio::ClearInterruptRoutine()+0x50>)
   14938:	0163      	lsls	r3, r4, #5
   1493a:	440b      	add	r3, r1
   1493c:	2100      	movs	r1, #0
   1493e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
   14942:	462b      	mov	r3, r5
   14944:	4619      	mov	r1, r3
   14946:	4803      	ldr	r0, [pc, #12]	; (14954 <Gpio::ClearInterruptRoutine()+0x4c>)
   14948:	f7fe f9de 	bl	12d08 <__cyg_profile_func_exit>
  }
   1494c:	bf00      	nop
   1494e:	b003      	add	sp, #12
   14950:	bd30      	pop	{r4, r5, pc}
   14952:	bf00      	nop
   14954:	00014909 	.word	0x00014909
   14958:	10000440 	.word	0x10000440

0001495c <unsigned char util::Value<GpioInterface::Edge, unsigned char>(GpioInterface::Edge)>:
constexpr Type Value(Enum enum_type_value)
   1495c:	b530      	push	{r4, r5, lr}
   1495e:	b083      	sub	sp, #12
   14960:	4675      	mov	r5, lr
   14962:	4603      	mov	r3, r0
   14964:	f88d 3007 	strb.w	r3, [sp, #7]
   14968:	462b      	mov	r3, r5
   1496a:	4619      	mov	r1, r3
   1496c:	4806      	ldr	r0, [pc, #24]	; (14988 <unsigned char util::Value<GpioInterface::Edge, unsigned char>(GpioInterface::Edge)+0x2c>)
   1496e:	f7fe f9b7 	bl	12ce0 <__cyg_profile_func_enter>
  return static_cast<Type>(enum_type_value);
   14972:	f89d 4007 	ldrb.w	r4, [sp, #7]
   14976:	462b      	mov	r3, r5
   14978:	4619      	mov	r1, r3
   1497a:	4803      	ldr	r0, [pc, #12]	; (14988 <unsigned char util::Value<GpioInterface::Edge, unsigned char>(GpioInterface::Edge)+0x2c>)
   1497c:	f7fe f9c4 	bl	12d08 <__cyg_profile_func_exit>
   14980:	4623      	mov	r3, r4
}
   14982:	4618      	mov	r0, r3
   14984:	b003      	add	sp, #12
   14986:	bd30      	pop	{r4, r5, pc}
   14988:	0001495d 	.word	0x0001495d

0001498c <Gpio::SetInterruptEdge(GpioInterface::Edge)>:

  // Sets the selected edge that the gpio interrupt will be triggered on.
  void SetInterruptEdge(Edge edge) override
   1498c:	b510      	push	{r4, lr}
   1498e:	b084      	sub	sp, #16
   14990:	4674      	mov	r4, lr
   14992:	9003      	str	r0, [sp, #12]
   14994:	460b      	mov	r3, r1
   14996:	f88d 300b 	strb.w	r3, [sp, #11]
   1499a:	4623      	mov	r3, r4
   1499c:	4619      	mov	r1, r3
   1499e:	4819      	ldr	r0, [pc, #100]	; (14a04 <Gpio::SetInterruptEdge(GpioInterface::Edge)+0x78>)
   149a0:	f7fe f99e 	bl	12ce0 <__cyg_profile_func_enter>
  {
    ValidPortCheck();
   149a4:	9803      	ldr	r0, [sp, #12]
   149a6:	f7ff ff43 	bl	14830 <Gpio::ValidPortCheck()>
    switch (edge)
   149aa:	f89d 300b 	ldrb.w	r3, [sp, #11]
   149ae:	2b01      	cmp	r3, #1
   149b0:	d008      	beq.n	149c4 <Gpio::SetInterruptEdge(GpioInterface::Edge)+0x38>
   149b2:	2b01      	cmp	r3, #1
   149b4:	d302      	bcc.n	149bc <Gpio::SetInterruptEdge(GpioInterface::Edge)+0x30>
   149b6:	2b02      	cmp	r3, #2
   149b8:	d008      	beq.n	149cc <Gpio::SetInterruptEdge(GpioInterface::Edge)+0x40>
   149ba:	e00e      	b.n	149da <Gpio::SetInterruptEdge(GpioInterface::Edge)+0x4e>
    {
      case Edge::kEdgeRising:
      {
        SetEdgeRising();
   149bc:	9803      	ldr	r0, [sp, #12]
   149be:	f000 f8b1 	bl	14b24 <Gpio::SetEdgeRising()>
        break;
   149c2:	e017      	b.n	149f4 <Gpio::SetInterruptEdge(GpioInterface::Edge)+0x68>
      }
      case Edge::kEdgeFalling:
      {
        SetEdgeFalling();
   149c4:	9803      	ldr	r0, [sp, #12]
   149c6:	f000 f8eb 	bl	14ba0 <Gpio::SetEdgeFalling()>
        break;
   149ca:	e013      	b.n	149f4 <Gpio::SetInterruptEdge(GpioInterface::Edge)+0x68>
      }
      case Edge::kEdgeBoth:
      {
        SetEdgeRising();
   149cc:	9803      	ldr	r0, [sp, #12]
   149ce:	f000 f8a9 	bl	14b24 <Gpio::SetEdgeRising()>
        SetEdgeFalling();
   149d2:	9803      	ldr	r0, [sp, #12]
   149d4:	f000 f8e4 	bl	14ba0 <Gpio::SetEdgeFalling()>
        break;
   149d8:	e00c      	b.n	149f4 <Gpio::SetInterruptEdge(GpioInterface::Edge)+0x68>
      }
      default:
      {
        LOG_WARNING(
   149da:	f89d 300b 	ldrb.w	r3, [sp, #11]
   149de:	4618      	mov	r0, r3
   149e0:	f7ff ffbc 	bl	1495c <unsigned char util::Value<GpioInterface::Edge, unsigned char>(GpioInterface::Edge)>
   149e4:	4603      	mov	r3, r0
   149e6:	9300      	str	r3, [sp, #0]
   149e8:	23d2      	movs	r3, #210	; 0xd2
   149ea:	4a07      	ldr	r2, [pc, #28]	; (14a08 <Gpio::SetInterruptEdge(GpioInterface::Edge)+0x7c>)
   149ec:	4907      	ldr	r1, [pc, #28]	; (14a0c <Gpio::SetInterruptEdge(GpioInterface::Edge)+0x80>)
   149ee:	4808      	ldr	r0, [pc, #32]	; (14a10 <Gpio::SetInterruptEdge(GpioInterface::Edge)+0x84>)
   149f0:	f7ff fbd0 	bl	14194 <printf>
   149f4:	4623      	mov	r3, r4
   149f6:	4619      	mov	r1, r3
   149f8:	4802      	ldr	r0, [pc, #8]	; (14a04 <Gpio::SetInterruptEdge(GpioInterface::Edge)+0x78>)
   149fa:	f7fe f985 	bl	12d08 <__cyg_profile_func_exit>
            "Edge %d cannot be used for External Interrupts."
            "Need to use a rising, falling, or both configuration.",
            util::Value(edge));
      }
    }
  }
   149fe:	bf00      	nop
   14a00:	b004      	add	sp, #16
   14a02:	bd10      	pop	{r4, pc}
   14a04:	0001498d 	.word	0x0001498d
   14a08:	0001919c 	.word	0x0001919c
   14a0c:	00018b80 	.word	0x00018b80
   14a10:	000180d4 	.word	0x000180d4

00014a14 <Gpio::ClearInterruptEdge(GpioInterface::Edge)>:

  // Clears the seleted edge of the gpio interrupt from being triggered.
  void ClearInterruptEdge(Edge edge) override
   14a14:	b510      	push	{r4, lr}
   14a16:	b084      	sub	sp, #16
   14a18:	4674      	mov	r4, lr
   14a1a:	9003      	str	r0, [sp, #12]
   14a1c:	460b      	mov	r3, r1
   14a1e:	f88d 300b 	strb.w	r3, [sp, #11]
   14a22:	4623      	mov	r3, r4
   14a24:	4619      	mov	r1, r3
   14a26:	4819      	ldr	r0, [pc, #100]	; (14a8c <Gpio::ClearInterruptEdge(GpioInterface::Edge)+0x78>)
   14a28:	f7fe f95a 	bl	12ce0 <__cyg_profile_func_enter>
  {
    ValidPortCheck();
   14a2c:	9803      	ldr	r0, [sp, #12]
   14a2e:	f7ff feff 	bl	14830 <Gpio::ValidPortCheck()>
    switch (edge)
   14a32:	f89d 300b 	ldrb.w	r3, [sp, #11]
   14a36:	2b01      	cmp	r3, #1
   14a38:	d008      	beq.n	14a4c <Gpio::ClearInterruptEdge(GpioInterface::Edge)+0x38>
   14a3a:	2b01      	cmp	r3, #1
   14a3c:	d302      	bcc.n	14a44 <Gpio::ClearInterruptEdge(GpioInterface::Edge)+0x30>
   14a3e:	2b02      	cmp	r3, #2
   14a40:	d008      	beq.n	14a54 <Gpio::ClearInterruptEdge(GpioInterface::Edge)+0x40>
   14a42:	e00e      	b.n	14a62 <Gpio::ClearInterruptEdge(GpioInterface::Edge)+0x4e>
    {
      case Edge::kEdgeRising:
      {
        ClearEdgeRising();
   14a44:	9803      	ldr	r0, [sp, #12]
   14a46:	f000 f8e9 	bl	14c1c <Gpio::ClearEdgeRising()>
        break;
   14a4a:	e017      	b.n	14a7c <Gpio::ClearInterruptEdge(GpioInterface::Edge)+0x68>
      }
      case Edge::kEdgeFalling:
      {
        ClearEdgeFalling();
   14a4c:	9803      	ldr	r0, [sp, #12]
   14a4e:	f000 f923 	bl	14c98 <Gpio::ClearEdgeFalling()>
        break;
   14a52:	e013      	b.n	14a7c <Gpio::ClearInterruptEdge(GpioInterface::Edge)+0x68>
      }
      case Edge::kEdgeBoth:
      {
        ClearEdgeRising();
   14a54:	9803      	ldr	r0, [sp, #12]
   14a56:	f000 f8e1 	bl	14c1c <Gpio::ClearEdgeRising()>
        ClearEdgeFalling();
   14a5a:	9803      	ldr	r0, [sp, #12]
   14a5c:	f000 f91c 	bl	14c98 <Gpio::ClearEdgeFalling()>
        break;
   14a60:	e00c      	b.n	14a7c <Gpio::ClearInterruptEdge(GpioInterface::Edge)+0x68>
      }
      default:
      {
        LOG_WARNING(
   14a62:	f89d 300b 	ldrb.w	r3, [sp, #11]
   14a66:	4618      	mov	r0, r3
   14a68:	f7ff ff78 	bl	1495c <unsigned char util::Value<GpioInterface::Edge, unsigned char>(GpioInterface::Edge)>
   14a6c:	4603      	mov	r3, r0
   14a6e:	9300      	str	r3, [sp, #0]
   14a70:	23f2      	movs	r3, #242	; 0xf2
   14a72:	4a07      	ldr	r2, [pc, #28]	; (14a90 <Gpio::ClearInterruptEdge(GpioInterface::Edge)+0x7c>)
   14a74:	4907      	ldr	r1, [pc, #28]	; (14a94 <Gpio::ClearInterruptEdge(GpioInterface::Edge)+0x80>)
   14a76:	4808      	ldr	r0, [pc, #32]	; (14a98 <Gpio::ClearInterruptEdge(GpioInterface::Edge)+0x84>)
   14a78:	f7ff fb8c 	bl	14194 <printf>
   14a7c:	4623      	mov	r3, r4
   14a7e:	4619      	mov	r1, r3
   14a80:	4802      	ldr	r0, [pc, #8]	; (14a8c <Gpio::ClearInterruptEdge(GpioInterface::Edge)+0x78>)
   14a82:	f7fe f941 	bl	12d08 <__cyg_profile_func_exit>
            "Edge %d cannot be used for External Interrupts."
            "Need to use a rising, falling, or both configuration.",
           util::Value(edge));
      }
    }
  }
   14a86:	bf00      	nop
   14a88:	b004      	add	sp, #16
   14a8a:	bd10      	pop	{r4, pc}
   14a8c:	00014a15 	.word	0x00014a15
   14a90:	00019144 	.word	0x00019144
   14a94:	00018b8c 	.word	0x00018b8c
   14a98:	000180d4 	.word	0x000180d4

00014a9c <Gpio::AttachInterrupt(void (*)(), GpioInterface::Edge)>:

  // Assign the developer's ISR and sets the selected edge that the gpio
  // interrupt will be triggered on.
  void AttachInterrupt(IsrPointer function, Edge edge) override
   14a9c:	b510      	push	{r4, lr}
   14a9e:	b084      	sub	sp, #16
   14aa0:	4674      	mov	r4, lr
   14aa2:	9003      	str	r0, [sp, #12]
   14aa4:	9102      	str	r1, [sp, #8]
   14aa6:	4613      	mov	r3, r2
   14aa8:	f88d 3007 	strb.w	r3, [sp, #7]
   14aac:	4623      	mov	r3, r4
   14aae:	4619      	mov	r1, r3
   14ab0:	480b      	ldr	r0, [pc, #44]	; (14ae0 <Gpio::AttachInterrupt(void (*)(), GpioInterface::Edge)+0x44>)
   14ab2:	f7fe f915 	bl	12ce0 <__cyg_profile_func_enter>
  {
    ValidPortCheck();
   14ab6:	9803      	ldr	r0, [sp, #12]
   14ab8:	f7ff feba 	bl	14830 <Gpio::ValidPortCheck()>
    SetInterruptRoutine(function);
   14abc:	9902      	ldr	r1, [sp, #8]
   14abe:	9803      	ldr	r0, [sp, #12]
   14ac0:	f7ff fef4 	bl	148ac <Gpio::SetInterruptRoutine(void (*)())>
    SetInterruptEdge(edge);
   14ac4:	f89d 3007 	ldrb.w	r3, [sp, #7]
   14ac8:	4619      	mov	r1, r3
   14aca:	9803      	ldr	r0, [sp, #12]
   14acc:	f7ff ff5e 	bl	1498c <Gpio::SetInterruptEdge(GpioInterface::Edge)>
   14ad0:	4623      	mov	r3, r4
   14ad2:	4619      	mov	r1, r3
   14ad4:	4802      	ldr	r0, [pc, #8]	; (14ae0 <Gpio::AttachInterrupt(void (*)(), GpioInterface::Edge)+0x44>)
   14ad6:	f7fe f917 	bl	12d08 <__cyg_profile_func_exit>
  }
   14ada:	bf00      	nop
   14adc:	b004      	add	sp, #16
   14ade:	bd10      	pop	{r4, pc}
   14ae0:	00014a9d 	.word	0x00014a9d

00014ae4 <Gpio::DetachInterrupt()>:

  // Removes the developer's ISR and clears the selected edge of the gpio
  // interrupt from being triggered.
  void DetachInterrupt() override
   14ae4:	b510      	push	{r4, lr}
   14ae6:	b082      	sub	sp, #8
   14ae8:	4674      	mov	r4, lr
   14aea:	9001      	str	r0, [sp, #4]
   14aec:	4623      	mov	r3, r4
   14aee:	4619      	mov	r1, r3
   14af0:	480b      	ldr	r0, [pc, #44]	; (14b20 <Gpio::DetachInterrupt()+0x3c>)
   14af2:	f7fe f8f5 	bl	12ce0 <__cyg_profile_func_enter>
  {
    ValidPortCheck();
   14af6:	9801      	ldr	r0, [sp, #4]
   14af8:	f7ff fe9a 	bl	14830 <Gpio::ValidPortCheck()>
    ClearInterruptRoutine();
   14afc:	9801      	ldr	r0, [sp, #4]
   14afe:	f7ff ff03 	bl	14908 <Gpio::ClearInterruptRoutine()>
    ClearEdgeRising();
   14b02:	9801      	ldr	r0, [sp, #4]
   14b04:	f000 f88a 	bl	14c1c <Gpio::ClearEdgeRising()>
    ClearEdgeFalling();
   14b08:	9801      	ldr	r0, [sp, #4]
   14b0a:	f000 f8c5 	bl	14c98 <Gpio::ClearEdgeFalling()>
   14b0e:	4623      	mov	r3, r4
   14b10:	4619      	mov	r1, r3
   14b12:	4803      	ldr	r0, [pc, #12]	; (14b20 <Gpio::DetachInterrupt()+0x3c>)
   14b14:	f7fe f8f8 	bl	12d08 <__cyg_profile_func_exit>
  }
   14b18:	bf00      	nop
   14b1a:	b002      	add	sp, #8
   14b1c:	bd10      	pop	{r4, pc}
   14b1e:	bf00      	nop
   14b20:	00014ae5 	.word	0x00014ae5

00014b24 <Gpio::SetEdgeRising()>:
    *interrupt[triggered_port].clear |= (1 << triggered_pin);
  }

 private:
  // Sets the gpio interrupt to trigger on a rising edge.
  void SetEdgeRising()
   14b24:	b530      	push	{r4, r5, lr}
   14b26:	b083      	sub	sp, #12
   14b28:	4675      	mov	r5, lr
   14b2a:	9001      	str	r0, [sp, #4]
   14b2c:	462b      	mov	r3, r5
   14b2e:	4619      	mov	r1, r3
   14b30:	4819      	ldr	r0, [pc, #100]	; (14b98 <Gpio::SetEdgeRising()+0x74>)
   14b32:	f7fe f8d5 	bl	12ce0 <__cyg_profile_func_enter>
  {
    *interrupt[interupt_port_].enable_rising_edge |= (1 << pin_->GetPin());
   14b36:	9b01      	ldr	r3, [sp, #4]
   14b38:	689a      	ldr	r2, [r3, #8]
   14b3a:	9b01      	ldr	r3, [sp, #4]
   14b3c:	689b      	ldr	r3, [r3, #8]
   14b3e:	681b      	ldr	r3, [r3, #0]
   14b40:	3330      	adds	r3, #48	; 0x30
   14b42:	681b      	ldr	r3, [r3, #0]
   14b44:	4610      	mov	r0, r2
   14b46:	4798      	blx	r3
   14b48:	4603      	mov	r3, r0
   14b4a:	461a      	mov	r2, r3
   14b4c:	2301      	movs	r3, #1
   14b4e:	fa03 f002 	lsl.w	r0, r3, r2
   14b52:	9b01      	ldr	r3, [sp, #4]
   14b54:	791b      	ldrb	r3, [r3, #4]
   14b56:	4619      	mov	r1, r3
   14b58:	4a10      	ldr	r2, [pc, #64]	; (14b9c <Gpio::SetEdgeRising()+0x78>)
   14b5a:	460b      	mov	r3, r1
   14b5c:	009b      	lsls	r3, r3, #2
   14b5e:	440b      	add	r3, r1
   14b60:	009b      	lsls	r3, r3, #2
   14b62:	4413      	add	r3, r2
   14b64:	330c      	adds	r3, #12
   14b66:	681b      	ldr	r3, [r3, #0]
   14b68:	681a      	ldr	r2, [r3, #0]
   14b6a:	4604      	mov	r4, r0
   14b6c:	9b01      	ldr	r3, [sp, #4]
   14b6e:	791b      	ldrb	r3, [r3, #4]
   14b70:	4618      	mov	r0, r3
   14b72:	490a      	ldr	r1, [pc, #40]	; (14b9c <Gpio::SetEdgeRising()+0x78>)
   14b74:	4603      	mov	r3, r0
   14b76:	009b      	lsls	r3, r3, #2
   14b78:	4403      	add	r3, r0
   14b7a:	009b      	lsls	r3, r3, #2
   14b7c:	440b      	add	r3, r1
   14b7e:	330c      	adds	r3, #12
   14b80:	681b      	ldr	r3, [r3, #0]
   14b82:	4322      	orrs	r2, r4
   14b84:	601a      	str	r2, [r3, #0]
   14b86:	462b      	mov	r3, r5
   14b88:	4619      	mov	r1, r3
   14b8a:	4803      	ldr	r0, [pc, #12]	; (14b98 <Gpio::SetEdgeRising()+0x74>)
   14b8c:	f7fe f8bc 	bl	12d08 <__cyg_profile_func_exit>
  }
   14b90:	bf00      	nop
   14b92:	b003      	add	sp, #12
   14b94:	bd30      	pop	{r4, r5, pc}
   14b96:	bf00      	nop
   14b98:	00014b25 	.word	0x00014b25
   14b9c:	100001a0 	.word	0x100001a0

00014ba0 <Gpio::SetEdgeFalling()>:

  // Sets the gpio interrupt to trigger on a falling edge.
  void SetEdgeFalling()
   14ba0:	b530      	push	{r4, r5, lr}
   14ba2:	b083      	sub	sp, #12
   14ba4:	4675      	mov	r5, lr
   14ba6:	9001      	str	r0, [sp, #4]
   14ba8:	462b      	mov	r3, r5
   14baa:	4619      	mov	r1, r3
   14bac:	4819      	ldr	r0, [pc, #100]	; (14c14 <Gpio::SetEdgeFalling()+0x74>)
   14bae:	f7fe f897 	bl	12ce0 <__cyg_profile_func_enter>
  {
    *interrupt[interupt_port_].enable_falling_edge |= (1 << pin_->GetPin());
   14bb2:	9b01      	ldr	r3, [sp, #4]
   14bb4:	689a      	ldr	r2, [r3, #8]
   14bb6:	9b01      	ldr	r3, [sp, #4]
   14bb8:	689b      	ldr	r3, [r3, #8]
   14bba:	681b      	ldr	r3, [r3, #0]
   14bbc:	3330      	adds	r3, #48	; 0x30
   14bbe:	681b      	ldr	r3, [r3, #0]
   14bc0:	4610      	mov	r0, r2
   14bc2:	4798      	blx	r3
   14bc4:	4603      	mov	r3, r0
   14bc6:	461a      	mov	r2, r3
   14bc8:	2301      	movs	r3, #1
   14bca:	fa03 f002 	lsl.w	r0, r3, r2
   14bce:	9b01      	ldr	r3, [sp, #4]
   14bd0:	791b      	ldrb	r3, [r3, #4]
   14bd2:	4619      	mov	r1, r3
   14bd4:	4a10      	ldr	r2, [pc, #64]	; (14c18 <Gpio::SetEdgeFalling()+0x78>)
   14bd6:	460b      	mov	r3, r1
   14bd8:	009b      	lsls	r3, r3, #2
   14bda:	440b      	add	r3, r1
   14bdc:	009b      	lsls	r3, r3, #2
   14bde:	4413      	add	r3, r2
   14be0:	3310      	adds	r3, #16
   14be2:	681b      	ldr	r3, [r3, #0]
   14be4:	681a      	ldr	r2, [r3, #0]
   14be6:	4604      	mov	r4, r0
   14be8:	9b01      	ldr	r3, [sp, #4]
   14bea:	791b      	ldrb	r3, [r3, #4]
   14bec:	4618      	mov	r0, r3
   14bee:	490a      	ldr	r1, [pc, #40]	; (14c18 <Gpio::SetEdgeFalling()+0x78>)
   14bf0:	4603      	mov	r3, r0
   14bf2:	009b      	lsls	r3, r3, #2
   14bf4:	4403      	add	r3, r0
   14bf6:	009b      	lsls	r3, r3, #2
   14bf8:	440b      	add	r3, r1
   14bfa:	3310      	adds	r3, #16
   14bfc:	681b      	ldr	r3, [r3, #0]
   14bfe:	4322      	orrs	r2, r4
   14c00:	601a      	str	r2, [r3, #0]
   14c02:	462b      	mov	r3, r5
   14c04:	4619      	mov	r1, r3
   14c06:	4803      	ldr	r0, [pc, #12]	; (14c14 <Gpio::SetEdgeFalling()+0x74>)
   14c08:	f7fe f87e 	bl	12d08 <__cyg_profile_func_exit>
  }
   14c0c:	bf00      	nop
   14c0e:	b003      	add	sp, #12
   14c10:	bd30      	pop	{r4, r5, pc}
   14c12:	bf00      	nop
   14c14:	00014ba1 	.word	0x00014ba1
   14c18:	100001a0 	.word	0x100001a0

00014c1c <Gpio::ClearEdgeRising()>:

  // Clears the gpio interrupt to no longer trigger on a rising edge.
  void ClearEdgeRising()
   14c1c:	b530      	push	{r4, r5, lr}
   14c1e:	b083      	sub	sp, #12
   14c20:	4675      	mov	r5, lr
   14c22:	9001      	str	r0, [sp, #4]
   14c24:	462b      	mov	r3, r5
   14c26:	4619      	mov	r1, r3
   14c28:	4819      	ldr	r0, [pc, #100]	; (14c90 <Gpio::ClearEdgeRising()+0x74>)
   14c2a:	f7fe f859 	bl	12ce0 <__cyg_profile_func_enter>
  {
    *interrupt[interupt_port_].enable_rising_edge &= ~(1 << pin_->GetPin());
   14c2e:	9b01      	ldr	r3, [sp, #4]
   14c30:	689a      	ldr	r2, [r3, #8]
   14c32:	9b01      	ldr	r3, [sp, #4]
   14c34:	689b      	ldr	r3, [r3, #8]
   14c36:	681b      	ldr	r3, [r3, #0]
   14c38:	3330      	adds	r3, #48	; 0x30
   14c3a:	681b      	ldr	r3, [r3, #0]
   14c3c:	4610      	mov	r0, r2
   14c3e:	4798      	blx	r3
   14c40:	4603      	mov	r3, r0
   14c42:	461a      	mov	r2, r3
   14c44:	2301      	movs	r3, #1
   14c46:	4093      	lsls	r3, r2
   14c48:	43d8      	mvns	r0, r3
   14c4a:	9b01      	ldr	r3, [sp, #4]
   14c4c:	791b      	ldrb	r3, [r3, #4]
   14c4e:	4619      	mov	r1, r3
   14c50:	4a10      	ldr	r2, [pc, #64]	; (14c94 <Gpio::ClearEdgeRising()+0x78>)
   14c52:	460b      	mov	r3, r1
   14c54:	009b      	lsls	r3, r3, #2
   14c56:	440b      	add	r3, r1
   14c58:	009b      	lsls	r3, r3, #2
   14c5a:	4413      	add	r3, r2
   14c5c:	330c      	adds	r3, #12
   14c5e:	681b      	ldr	r3, [r3, #0]
   14c60:	681a      	ldr	r2, [r3, #0]
   14c62:	4604      	mov	r4, r0
   14c64:	9b01      	ldr	r3, [sp, #4]
   14c66:	791b      	ldrb	r3, [r3, #4]
   14c68:	4618      	mov	r0, r3
   14c6a:	490a      	ldr	r1, [pc, #40]	; (14c94 <Gpio::ClearEdgeRising()+0x78>)
   14c6c:	4603      	mov	r3, r0
   14c6e:	009b      	lsls	r3, r3, #2
   14c70:	4403      	add	r3, r0
   14c72:	009b      	lsls	r3, r3, #2
   14c74:	440b      	add	r3, r1
   14c76:	330c      	adds	r3, #12
   14c78:	681b      	ldr	r3, [r3, #0]
   14c7a:	4022      	ands	r2, r4
   14c7c:	601a      	str	r2, [r3, #0]
   14c7e:	462b      	mov	r3, r5
   14c80:	4619      	mov	r1, r3
   14c82:	4803      	ldr	r0, [pc, #12]	; (14c90 <Gpio::ClearEdgeRising()+0x74>)
   14c84:	f7fe f840 	bl	12d08 <__cyg_profile_func_exit>
  }
   14c88:	bf00      	nop
   14c8a:	b003      	add	sp, #12
   14c8c:	bd30      	pop	{r4, r5, pc}
   14c8e:	bf00      	nop
   14c90:	00014c1d 	.word	0x00014c1d
   14c94:	100001a0 	.word	0x100001a0

00014c98 <Gpio::ClearEdgeFalling()>:

  // Clears the gpio interrupt to no longer trigger on a falling edge.
  void ClearEdgeFalling()
   14c98:	b530      	push	{r4, r5, lr}
   14c9a:	b083      	sub	sp, #12
   14c9c:	4675      	mov	r5, lr
   14c9e:	9001      	str	r0, [sp, #4]
   14ca0:	462b      	mov	r3, r5
   14ca2:	4619      	mov	r1, r3
   14ca4:	4819      	ldr	r0, [pc, #100]	; (14d0c <Gpio::ClearEdgeFalling()+0x74>)
   14ca6:	f7fe f81b 	bl	12ce0 <__cyg_profile_func_enter>
  {
    *interrupt[interupt_port_].enable_falling_edge &= ~(1 << pin_->GetPin());
   14caa:	9b01      	ldr	r3, [sp, #4]
   14cac:	689a      	ldr	r2, [r3, #8]
   14cae:	9b01      	ldr	r3, [sp, #4]
   14cb0:	689b      	ldr	r3, [r3, #8]
   14cb2:	681b      	ldr	r3, [r3, #0]
   14cb4:	3330      	adds	r3, #48	; 0x30
   14cb6:	681b      	ldr	r3, [r3, #0]
   14cb8:	4610      	mov	r0, r2
   14cba:	4798      	blx	r3
   14cbc:	4603      	mov	r3, r0
   14cbe:	461a      	mov	r2, r3
   14cc0:	2301      	movs	r3, #1
   14cc2:	4093      	lsls	r3, r2
   14cc4:	43d8      	mvns	r0, r3
   14cc6:	9b01      	ldr	r3, [sp, #4]
   14cc8:	791b      	ldrb	r3, [r3, #4]
   14cca:	4619      	mov	r1, r3
   14ccc:	4a10      	ldr	r2, [pc, #64]	; (14d10 <Gpio::ClearEdgeFalling()+0x78>)
   14cce:	460b      	mov	r3, r1
   14cd0:	009b      	lsls	r3, r3, #2
   14cd2:	440b      	add	r3, r1
   14cd4:	009b      	lsls	r3, r3, #2
   14cd6:	4413      	add	r3, r2
   14cd8:	3310      	adds	r3, #16
   14cda:	681b      	ldr	r3, [r3, #0]
   14cdc:	681a      	ldr	r2, [r3, #0]
   14cde:	4604      	mov	r4, r0
   14ce0:	9b01      	ldr	r3, [sp, #4]
   14ce2:	791b      	ldrb	r3, [r3, #4]
   14ce4:	4618      	mov	r0, r3
   14ce6:	490a      	ldr	r1, [pc, #40]	; (14d10 <Gpio::ClearEdgeFalling()+0x78>)
   14ce8:	4603      	mov	r3, r0
   14cea:	009b      	lsls	r3, r3, #2
   14cec:	4403      	add	r3, r0
   14cee:	009b      	lsls	r3, r3, #2
   14cf0:	440b      	add	r3, r1
   14cf2:	3310      	adds	r3, #16
   14cf4:	681b      	ldr	r3, [r3, #0]
   14cf6:	4022      	ands	r2, r4
   14cf8:	601a      	str	r2, [r3, #0]
   14cfa:	462b      	mov	r3, r5
   14cfc:	4619      	mov	r1, r3
   14cfe:	4803      	ldr	r0, [pc, #12]	; (14d0c <Gpio::ClearEdgeFalling()+0x74>)
   14d00:	f7fe f802 	bl	12d08 <__cyg_profile_func_exit>
  }
   14d04:	bf00      	nop
   14d06:	b003      	add	sp, #12
   14d08:	bd30      	pop	{r4, r5, pc}
   14d0a:	bf00      	nop
   14d0c:	00014c99 	.word	0x00014c99
   14d10:	100001a0 	.word	0x100001a0

00014d14 <SystemControllerInterface::SystemControllerInterface()>:
class SystemControllerInterface
   14d14:	b082      	sub	sp, #8
   14d16:	9001      	str	r0, [sp, #4]
   14d18:	4a03      	ldr	r2, [pc, #12]	; (14d28 <SystemControllerInterface::SystemControllerInterface()+0x14>)
   14d1a:	9b01      	ldr	r3, [sp, #4]
   14d1c:	601a      	str	r2, [r3, #0]
   14d1e:	9b01      	ldr	r3, [sp, #4]
   14d20:	4618      	mov	r0, r3
   14d22:	b002      	add	sp, #8
   14d24:	4770      	bx	lr
   14d26:	bf00      	nop
   14d28:	0001905c 	.word	0x0001905c

00014d2c <Lpc40xxSystemController::Lpc40xxSystemController()>:
  constexpr Lpc40xxSystemController() {}
   14d2c:	b500      	push	{lr}
   14d2e:	b083      	sub	sp, #12
   14d30:	9001      	str	r0, [sp, #4]
   14d32:	9b01      	ldr	r3, [sp, #4]
   14d34:	4618      	mov	r0, r3
   14d36:	f7ff ffed 	bl	14d14 <SystemControllerInterface::SystemControllerInterface()>
   14d3a:	4a04      	ldr	r2, [pc, #16]	; (14d4c <Lpc40xxSystemController::Lpc40xxSystemController()+0x20>)
   14d3c:	9b01      	ldr	r3, [sp, #4]
   14d3e:	601a      	str	r2, [r3, #0]
   14d40:	9b01      	ldr	r3, [sp, #4]
   14d42:	4618      	mov	r0, r3
   14d44:	b003      	add	sp, #12
   14d46:	f85d fb04 	ldr.w	pc, [sp], #4
   14d4a:	bf00      	nop
   14d4c:	00017ae8 	.word	0x00017ae8

00014d50 <int util::Value<Ssp::Peripheral, int>(Ssp::Peripheral)>:
constexpr Type Value(Enum enum_type_value)
   14d50:	b530      	push	{r4, r5, lr}
   14d52:	b083      	sub	sp, #12
   14d54:	4675      	mov	r5, lr
   14d56:	9001      	str	r0, [sp, #4]
   14d58:	462b      	mov	r3, r5
   14d5a:	4619      	mov	r1, r3
   14d5c:	4806      	ldr	r0, [pc, #24]	; (14d78 <int util::Value<Ssp::Peripheral, int>(Ssp::Peripheral)+0x28>)
   14d5e:	f7fd ffbf 	bl	12ce0 <__cyg_profile_func_enter>
  return static_cast<Type>(enum_type_value);
   14d62:	9c01      	ldr	r4, [sp, #4]
   14d64:	462b      	mov	r3, r5
   14d66:	4619      	mov	r1, r3
   14d68:	4803      	ldr	r0, [pc, #12]	; (14d78 <int util::Value<Ssp::Peripheral, int>(Ssp::Peripheral)+0x28>)
   14d6a:	f7fd ffcd 	bl	12d08 <__cyg_profile_func_exit>
   14d6e:	4623      	mov	r3, r4
}
   14d70:	4618      	mov	r0, r3
   14d72:	b003      	add	sp, #12
   14d74:	bd30      	pop	{r4, r5, pc}
   14d76:	bf00      	nop
   14d78:	00014d51 	.word	0x00014d51

00014d7c <SspInterface::SspInterface()>:
#include "L0_LowLevel/system_controller.hpp"
#include "L1_Drivers/pin.hpp"
#include "utility/bit.hpp"
#include "utility/enum.hpp"

class SspInterface
   14d7c:	b530      	push	{r4, r5, lr}
   14d7e:	b083      	sub	sp, #12
   14d80:	4675      	mov	r5, lr
   14d82:	9001      	str	r0, [sp, #4]
   14d84:	462b      	mov	r3, r5
   14d86:	4619      	mov	r1, r3
   14d88:	4807      	ldr	r0, [pc, #28]	; (14da8 <SspInterface::SspInterface()+0x2c>)
   14d8a:	f7fd ffa9 	bl	12ce0 <__cyg_profile_func_enter>
   14d8e:	4a07      	ldr	r2, [pc, #28]	; (14dac <SspInterface::SspInterface()+0x30>)
   14d90:	9b01      	ldr	r3, [sp, #4]
   14d92:	601a      	str	r2, [r3, #0]
   14d94:	9c01      	ldr	r4, [sp, #4]
   14d96:	462b      	mov	r3, r5
   14d98:	4619      	mov	r1, r3
   14d9a:	4803      	ldr	r0, [pc, #12]	; (14da8 <SspInterface::SspInterface()+0x2c>)
   14d9c:	f7fd ffb4 	bl	12d08 <__cyg_profile_func_exit>
   14da0:	4623      	mov	r3, r4
   14da2:	4618      	mov	r0, r3
   14da4:	b003      	add	sp, #12
   14da6:	bd30      	pop	{r4, r5, pc}
   14da8:	00014d7d 	.word	0x00014d7d
   14dac:	00019034 	.word	0x00019034

00014db0 <PinInterface::PinInterface(PinInterface const&)>:
class PinInterface
   14db0:	b530      	push	{r4, r5, lr}
   14db2:	b083      	sub	sp, #12
   14db4:	4675      	mov	r5, lr
   14db6:	9001      	str	r0, [sp, #4]
   14db8:	9100      	str	r1, [sp, #0]
   14dba:	462b      	mov	r3, r5
   14dbc:	4619      	mov	r1, r3
   14dbe:	4808      	ldr	r0, [pc, #32]	; (14de0 <PinInterface::PinInterface(PinInterface const&)+0x30>)
   14dc0:	f7fd ff8e 	bl	12ce0 <__cyg_profile_func_enter>
   14dc4:	4a07      	ldr	r2, [pc, #28]	; (14de4 <PinInterface::PinInterface(PinInterface const&)+0x34>)
   14dc6:	9b01      	ldr	r3, [sp, #4]
   14dc8:	601a      	str	r2, [r3, #0]
   14dca:	9c01      	ldr	r4, [sp, #4]
   14dcc:	462b      	mov	r3, r5
   14dce:	4619      	mov	r1, r3
   14dd0:	4803      	ldr	r0, [pc, #12]	; (14de0 <PinInterface::PinInterface(PinInterface const&)+0x30>)
   14dd2:	f7fd ff99 	bl	12d08 <__cyg_profile_func_exit>
   14dd6:	4623      	mov	r3, r4
   14dd8:	4618      	mov	r0, r3
   14dda:	b003      	add	sp, #12
   14ddc:	bd30      	pop	{r4, r5, pc}
   14dde:	bf00      	nop
   14de0:	00014db1 	.word	0x00014db1
   14de4:	00019110 	.word	0x00019110

00014de8 <Pin::Pin(Pin const&)>:
class Pin : public PinInterface
   14de8:	b530      	push	{r4, r5, lr}
   14dea:	b083      	sub	sp, #12
   14dec:	4675      	mov	r5, lr
   14dee:	9001      	str	r0, [sp, #4]
   14df0:	9100      	str	r1, [sp, #0]
   14df2:	462b      	mov	r3, r5
   14df4:	4619      	mov	r1, r3
   14df6:	480f      	ldr	r0, [pc, #60]	; (14e34 <Pin::Pin(Pin const&)+0x4c>)
   14df8:	f7fd ff72 	bl	12ce0 <__cyg_profile_func_enter>
   14dfc:	9b01      	ldr	r3, [sp, #4]
   14dfe:	9a00      	ldr	r2, [sp, #0]
   14e00:	4611      	mov	r1, r2
   14e02:	4618      	mov	r0, r3
   14e04:	f7ff ffd4 	bl	14db0 <PinInterface::PinInterface(PinInterface const&)>
   14e08:	4a0b      	ldr	r2, [pc, #44]	; (14e38 <Pin::Pin(Pin const&)+0x50>)
   14e0a:	9b01      	ldr	r3, [sp, #4]
   14e0c:	601a      	str	r2, [r3, #0]
   14e0e:	9b00      	ldr	r3, [sp, #0]
   14e10:	791a      	ldrb	r2, [r3, #4]
   14e12:	9b01      	ldr	r3, [sp, #4]
   14e14:	711a      	strb	r2, [r3, #4]
   14e16:	9b00      	ldr	r3, [sp, #0]
   14e18:	795a      	ldrb	r2, [r3, #5]
   14e1a:	9b01      	ldr	r3, [sp, #4]
   14e1c:	715a      	strb	r2, [r3, #5]
   14e1e:	9c01      	ldr	r4, [sp, #4]
   14e20:	462b      	mov	r3, r5
   14e22:	4619      	mov	r1, r3
   14e24:	4803      	ldr	r0, [pc, #12]	; (14e34 <Pin::Pin(Pin const&)+0x4c>)
   14e26:	f7fd ff6f 	bl	12d08 <__cyg_profile_func_exit>
   14e2a:	4623      	mov	r3, r4
   14e2c:	4618      	mov	r0, r3
   14e2e:	b003      	add	sp, #12
   14e30:	bd30      	pop	{r4, r5, pc}
   14e32:	bf00      	nop
   14e34:	00014de9 	.word	0x00014de9
   14e38:	00017a74 	.word	0x00017a74

00014e3c <Ssp::Ssp(Ssp::Peripheral)>:
        pssp_(Peripheral::kSsp0)
  {
  }

  /// User modified constructor. Must be followed by Set functions.
  explicit constexpr Ssp(Peripheral set_pssp)
   14e3c:	b530      	push	{r4, r5, lr}
   14e3e:	b083      	sub	sp, #12
   14e40:	4675      	mov	r5, lr
   14e42:	9001      	str	r0, [sp, #4]
   14e44:	9100      	str	r1, [sp, #0]
   14e46:	462b      	mov	r3, r5
   14e48:	4619      	mov	r1, r3
   14e4a:	4831      	ldr	r0, [pc, #196]	; (14f10 <Ssp::Ssp(Ssp::Peripheral)+0xd4>)
   14e4c:	f7fd ff48 	bl	12ce0 <__cyg_profile_func_enter>
        miso_(&miso_pin_),
        sck_(&sck_pin_),
        mosi_pin_(kSspPinMatrix[util::Value(set_pssp)][MatrixLookup::kMosi]),
        miso_pin_(kSspPinMatrix[util::Value(set_pssp)][MatrixLookup::kMiso]),
        sck_pin_(kSspPinMatrix[util::Value(set_pssp)][MatrixLookup::kSck]),
        pssp_(set_pssp)
   14e50:	9b01      	ldr	r3, [sp, #4]
   14e52:	4618      	mov	r0, r3
   14e54:	f7ff ff92 	bl	14d7c <SspInterface::SspInterface()>
   14e58:	9b01      	ldr	r3, [sp, #4]
   14e5a:	3304      	adds	r3, #4
   14e5c:	4618      	mov	r0, r3
   14e5e:	f7ff ff65 	bl	14d2c <Lpc40xxSystemController::Lpc40xxSystemController()>
   14e62:	4a2c      	ldr	r2, [pc, #176]	; (14f14 <Ssp::Ssp(Ssp::Peripheral)+0xd8>)
   14e64:	9b01      	ldr	r3, [sp, #4]
   14e66:	601a      	str	r2, [r3, #0]
   14e68:	4a2b      	ldr	r2, [pc, #172]	; (14f18 <Ssp::Ssp(Ssp::Peripheral)+0xdc>)
   14e6a:	9b01      	ldr	r3, [sp, #4]
   14e6c:	605a      	str	r2, [r3, #4]
   14e6e:	9b01      	ldr	r3, [sp, #4]
   14e70:	f103 0214 	add.w	r2, r3, #20
   14e74:	9b01      	ldr	r3, [sp, #4]
   14e76:	609a      	str	r2, [r3, #8]
   14e78:	9b01      	ldr	r3, [sp, #4]
   14e7a:	f103 021c 	add.w	r2, r3, #28
   14e7e:	9b01      	ldr	r3, [sp, #4]
   14e80:	60da      	str	r2, [r3, #12]
   14e82:	9b01      	ldr	r3, [sp, #4]
   14e84:	f103 0224 	add.w	r2, r3, #36	; 0x24
   14e88:	9b01      	ldr	r3, [sp, #4]
   14e8a:	611a      	str	r2, [r3, #16]
   14e8c:	9b01      	ldr	r3, [sp, #4]
   14e8e:	f103 0414 	add.w	r4, r3, #20
        mosi_pin_(kSspPinMatrix[util::Value(set_pssp)][MatrixLookup::kMosi]),
   14e92:	9800      	ldr	r0, [sp, #0]
   14e94:	f7ff ff5c 	bl	14d50 <int util::Value<Ssp::Peripheral, int>(Ssp::Peripheral)>
   14e98:	4602      	mov	r2, r0
        pssp_(set_pssp)
   14e9a:	4613      	mov	r3, r2
   14e9c:	005b      	lsls	r3, r3, #1
   14e9e:	4413      	add	r3, r2
   14ea0:	00db      	lsls	r3, r3, #3
   14ea2:	4a1e      	ldr	r2, [pc, #120]	; (14f1c <Ssp::Ssp(Ssp::Peripheral)+0xe0>)
   14ea4:	4413      	add	r3, r2
   14ea6:	4619      	mov	r1, r3
   14ea8:	4620      	mov	r0, r4
   14eaa:	f7ff ff9d 	bl	14de8 <Pin::Pin(Pin const&)>
   14eae:	9b01      	ldr	r3, [sp, #4]
   14eb0:	f103 041c 	add.w	r4, r3, #28
        miso_pin_(kSspPinMatrix[util::Value(set_pssp)][MatrixLookup::kMiso]),
   14eb4:	9800      	ldr	r0, [sp, #0]
   14eb6:	f7ff ff4b 	bl	14d50 <int util::Value<Ssp::Peripheral, int>(Ssp::Peripheral)>
   14eba:	4602      	mov	r2, r0
        pssp_(set_pssp)
   14ebc:	4613      	mov	r3, r2
   14ebe:	005b      	lsls	r3, r3, #1
   14ec0:	4413      	add	r3, r2
   14ec2:	00db      	lsls	r3, r3, #3
   14ec4:	3308      	adds	r3, #8
   14ec6:	4a15      	ldr	r2, [pc, #84]	; (14f1c <Ssp::Ssp(Ssp::Peripheral)+0xe0>)
   14ec8:	4413      	add	r3, r2
   14eca:	4619      	mov	r1, r3
   14ecc:	4620      	mov	r0, r4
   14ece:	f7ff ff8b 	bl	14de8 <Pin::Pin(Pin const&)>
   14ed2:	9b01      	ldr	r3, [sp, #4]
   14ed4:	f103 0424 	add.w	r4, r3, #36	; 0x24
        sck_pin_(kSspPinMatrix[util::Value(set_pssp)][MatrixLookup::kSck]),
   14ed8:	9800      	ldr	r0, [sp, #0]
   14eda:	f7ff ff39 	bl	14d50 <int util::Value<Ssp::Peripheral, int>(Ssp::Peripheral)>
   14ede:	4602      	mov	r2, r0
        pssp_(set_pssp)
   14ee0:	4613      	mov	r3, r2
   14ee2:	005b      	lsls	r3, r3, #1
   14ee4:	4413      	add	r3, r2
   14ee6:	00db      	lsls	r3, r3, #3
   14ee8:	3310      	adds	r3, #16
   14eea:	4a0c      	ldr	r2, [pc, #48]	; (14f1c <Ssp::Ssp(Ssp::Peripheral)+0xe0>)
   14eec:	4413      	add	r3, r2
   14eee:	4619      	mov	r1, r3
   14ef0:	4620      	mov	r0, r4
   14ef2:	f7ff ff79 	bl	14de8 <Pin::Pin(Pin const&)>
   14ef6:	9b01      	ldr	r3, [sp, #4]
   14ef8:	9a00      	ldr	r2, [sp, #0]
   14efa:	62da      	str	r2, [r3, #44]	; 0x2c
  {
  }
   14efc:	9c01      	ldr	r4, [sp, #4]
   14efe:	462b      	mov	r3, r5
   14f00:	4619      	mov	r1, r3
   14f02:	4803      	ldr	r0, [pc, #12]	; (14f10 <Ssp::Ssp(Ssp::Peripheral)+0xd4>)
   14f04:	f7fd ff00 	bl	12d08 <__cyg_profile_func_exit>
   14f08:	4623      	mov	r3, r4
   14f0a:	4618      	mov	r0, r3
   14f0c:	b003      	add	sp, #12
   14f0e:	bd30      	pop	{r4, r5, pc}
   14f10:	00014e3d 	.word	0x00014e3d
   14f14:	00018fe8 	.word	0x00018fe8
   14f18:	00019010 	.word	0x00019010
   14f1c:	00018b9c 	.word	0x00018b9c

00014f20 <Ssp::Initialize()>:
  }

  /// Powers on the peripheral, sets the peripheral clock, format, and data
  /// size, and enables the SSP pins for communication see and more.
  /// See page 601 of user manual UM10562 LPC408x/407x for more details.
  void Initialize() override
   14f20:	b570      	push	{r4, r5, r6, lr}
   14f22:	b086      	sub	sp, #24
   14f24:	4676      	mov	r6, lr
   14f26:	9001      	str	r0, [sp, #4]
   14f28:	4633      	mov	r3, r6
   14f2a:	4619      	mov	r1, r3
   14f2c:	4830      	ldr	r0, [pc, #192]	; (14ff0 <Ssp::Initialize()+0xd0>)
   14f2e:	f7fd fed7 	bl	12ce0 <__cyg_profile_func_enter>
  {
    uint32_t pssp = util::Value(pssp_);
   14f32:	9b01      	ldr	r3, [sp, #4]
   14f34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   14f36:	4618      	mov	r0, r3
   14f38:	f7ff ff0a 	bl	14d50 <int util::Value<Ssp::Peripheral, int>(Ssp::Peripheral)>
   14f3c:	4603      	mov	r3, r0
   14f3e:	9305      	str	r3, [sp, #20]
    // Power up peripheral
    PowerUpPeripheral(kPowerBit[pssp]);
   14f40:	9b01      	ldr	r3, [sp, #4]
   14f42:	1d18      	adds	r0, r3, #4
   14f44:	9b01      	ldr	r3, [sp, #4]
   14f46:	685b      	ldr	r3, [r3, #4]
   14f48:	3314      	adds	r3, #20
   14f4a:	681b      	ldr	r3, [r3, #0]
   14f4c:	9a05      	ldr	r2, [sp, #20]
   14f4e:	0092      	lsls	r2, r2, #2
   14f50:	4928      	ldr	r1, [pc, #160]	; (14ff4 <Ssp::Initialize()+0xd4>)
   14f52:	440a      	add	r2, r1
   14f54:	4611      	mov	r1, r2
   14f56:	4798      	blx	r3
    // Enable SSP pins
    mosi_->SetPinFunction(kPinSelect[pssp]);
   14f58:	9b01      	ldr	r3, [sp, #4]
   14f5a:	6898      	ldr	r0, [r3, #8]
   14f5c:	9b01      	ldr	r3, [sp, #4]
   14f5e:	689b      	ldr	r3, [r3, #8]
   14f60:	681b      	ldr	r3, [r3, #0]
   14f62:	681b      	ldr	r3, [r3, #0]
   14f64:	4924      	ldr	r1, [pc, #144]	; (14ff8 <Ssp::Initialize()+0xd8>)
   14f66:	9a05      	ldr	r2, [sp, #20]
   14f68:	440a      	add	r2, r1
   14f6a:	7812      	ldrb	r2, [r2, #0]
   14f6c:	4611      	mov	r1, r2
   14f6e:	4798      	blx	r3
    miso_->SetPinFunction(kPinSelect[pssp]);
   14f70:	9b01      	ldr	r3, [sp, #4]
   14f72:	68d8      	ldr	r0, [r3, #12]
   14f74:	9b01      	ldr	r3, [sp, #4]
   14f76:	68db      	ldr	r3, [r3, #12]
   14f78:	681b      	ldr	r3, [r3, #0]
   14f7a:	681b      	ldr	r3, [r3, #0]
   14f7c:	491e      	ldr	r1, [pc, #120]	; (14ff8 <Ssp::Initialize()+0xd8>)
   14f7e:	9a05      	ldr	r2, [sp, #20]
   14f80:	440a      	add	r2, r1
   14f82:	7812      	ldrb	r2, [r2, #0]
   14f84:	4611      	mov	r1, r2
   14f86:	4798      	blx	r3
    sck_->SetPinFunction(kPinSelect[pssp]);
   14f88:	9b01      	ldr	r3, [sp, #4]
   14f8a:	6918      	ldr	r0, [r3, #16]
   14f8c:	9b01      	ldr	r3, [sp, #4]
   14f8e:	691b      	ldr	r3, [r3, #16]
   14f90:	681b      	ldr	r3, [r3, #0]
   14f92:	681b      	ldr	r3, [r3, #0]
   14f94:	4918      	ldr	r1, [pc, #96]	; (14ff8 <Ssp::Initialize()+0xd8>)
   14f96:	9a05      	ldr	r2, [sp, #20]
   14f98:	440a      	add	r2, r1
   14f9a:	7812      	ldrb	r2, [r2, #0]
   14f9c:	4611      	mov	r1, r2
   14f9e:	4798      	blx	r3
    // Enable SSP
    ssp_registers[pssp]->CR1 = bit::Set(ssp_registers[pssp]->CR1, kSspEnable);
   14fa0:	4a16      	ldr	r2, [pc, #88]	; (14ffc <Ssp::Initialize()+0xdc>)
   14fa2:	9b05      	ldr	r3, [sp, #20]
   14fa4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14fa8:	685b      	ldr	r3, [r3, #4]
   14faa:	4914      	ldr	r1, [pc, #80]	; (14ffc <Ssp::Initialize()+0xdc>)
   14fac:	9a05      	ldr	r2, [sp, #20]
   14fae:	f851 4022 	ldr.w	r4, [r1, r2, lsl #2]
   14fb2:	9304      	str	r3, [sp, #16]
   14fb4:	2301      	movs	r3, #1
   14fb6:	9303      	str	r3, [sp, #12]
   14fb8:	4633      	mov	r3, r6
   14fba:	4619      	mov	r1, r3
   14fbc:	4810      	ldr	r0, [pc, #64]	; (15000 <Ssp::Initialize()+0xe0>)
   14fbe:	f7fd fe8f 	bl	12ce0 <__cyg_profile_func_enter>
[[gnu::always_inline]] [[nodiscard]]
constexpr T Set(T target, uint32_t position)
{
  static_assert(std::numeric_limits<T>::is_integer,
                "Set only accepts intergers.");
  return target | (1 << position);
   14fc2:	2201      	movs	r2, #1
   14fc4:	9b03      	ldr	r3, [sp, #12]
   14fc6:	fa02 f303 	lsl.w	r3, r2, r3
   14fca:	461a      	mov	r2, r3
   14fcc:	9b04      	ldr	r3, [sp, #16]
   14fce:	ea42 0503 	orr.w	r5, r2, r3
   14fd2:	4633      	mov	r3, r6
   14fd4:	4619      	mov	r1, r3
   14fd6:	480a      	ldr	r0, [pc, #40]	; (15000 <Ssp::Initialize()+0xe0>)
   14fd8:	f7fd fe96 	bl	12d08 <__cyg_profile_func_exit>
   14fdc:	6065      	str	r5, [r4, #4]
   14fde:	4633      	mov	r3, r6
   14fe0:	4619      	mov	r1, r3
   14fe2:	4803      	ldr	r0, [pc, #12]	; (14ff0 <Ssp::Initialize()+0xd0>)
   14fe4:	f7fd fe90 	bl	12d08 <__cyg_profile_func_exit>
  }
   14fe8:	bf00      	nop
   14fea:	b006      	add	sp, #24
   14fec:	bd70      	pop	{r4, r5, r6, pc}
   14fee:	bf00      	nop
   14ff0:	00014f21 	.word	0x00014f21
   14ff4:	00018be4 	.word	0x00018be4
   14ff8:	00018b98 	.word	0x00018b98
   14ffc:	100001c8 	.word	0x100001c8
   15000:	00016c2d 	.word	0x00016c2d

00015004 <Ssp::IsTransferRegBusy()>:

  /// Checks if the SSP controller is idle.
  /// @returns true if the controller is sending or receiving a data frame and
  /// false if it is idle.
  bool IsTransferRegBusy() override
   15004:	b530      	push	{r4, r5, lr}
   15006:	b085      	sub	sp, #20
   15008:	4675      	mov	r5, lr
   1500a:	9001      	str	r0, [sp, #4]
   1500c:	462b      	mov	r3, r5
   1500e:	4619      	mov	r1, r3
   15010:	4817      	ldr	r0, [pc, #92]	; (15070 <Ssp::IsTransferRegBusy()+0x6c>)
   15012:	f7fd fe65 	bl	12ce0 <__cyg_profile_func_enter>
  {
    return (bit::Read(ssp_registers[util::Value(pssp_)]->SR, kDataLineIdleBit));
   15016:	9b01      	ldr	r3, [sp, #4]
   15018:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1501a:	4618      	mov	r0, r3
   1501c:	f7ff fe98 	bl	14d50 <int util::Value<Ssp::Peripheral, int>(Ssp::Peripheral)>
   15020:	4602      	mov	r2, r0
   15022:	4b14      	ldr	r3, [pc, #80]	; (15074 <Ssp::IsTransferRegBusy()+0x70>)
   15024:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   15028:	68db      	ldr	r3, [r3, #12]
   1502a:	9303      	str	r3, [sp, #12]
   1502c:	2304      	movs	r3, #4
   1502e:	9302      	str	r3, [sp, #8]
   15030:	462b      	mov	r3, r5
   15032:	4619      	mov	r1, r3
   15034:	4810      	ldr	r0, [pc, #64]	; (15078 <Ssp::IsTransferRegBusy()+0x74>)
   15036:	f7fd fe53 	bl	12ce0 <__cyg_profile_func_enter>
[[gnu::always_inline]][[nodiscard]] constexpr bool Read(T target,
                                                        uint32_t position)
{
  static_assert(std::numeric_limits<T>::is_integer,
                "Read only accepts intergers.");
  return static_cast<bool>(target & (1 << position));
   1503a:	2201      	movs	r2, #1
   1503c:	9b02      	ldr	r3, [sp, #8]
   1503e:	fa02 f303 	lsl.w	r3, r2, r3
   15042:	461a      	mov	r2, r3
   15044:	9b03      	ldr	r3, [sp, #12]
   15046:	4013      	ands	r3, r2
   15048:	2b00      	cmp	r3, #0
   1504a:	bf14      	ite	ne
   1504c:	2301      	movne	r3, #1
   1504e:	2300      	moveq	r3, #0
   15050:	b2dc      	uxtb	r4, r3
   15052:	462b      	mov	r3, r5
   15054:	4619      	mov	r1, r3
   15056:	4808      	ldr	r0, [pc, #32]	; (15078 <Ssp::IsTransferRegBusy()+0x74>)
   15058:	f7fd fe56 	bl	12d08 <__cyg_profile_func_exit>
   1505c:	462b      	mov	r3, r5
   1505e:	4619      	mov	r1, r3
   15060:	4803      	ldr	r0, [pc, #12]	; (15070 <Ssp::IsTransferRegBusy()+0x6c>)
   15062:	f7fd fe51 	bl	12d08 <__cyg_profile_func_exit>
   15066:	4623      	mov	r3, r4
  }
   15068:	4618      	mov	r0, r3
   1506a:	b005      	add	sp, #20
   1506c:	bd30      	pop	{r4, r5, pc}
   1506e:	bf00      	nop
   15070:	00015005 	.word	0x00015005
   15074:	100001c8 	.word	0x100001c8
   15078:	00016c69 	.word	0x00016c69

0001507c <Ssp::Transfer(unsigned short)>:
  /// data register. This functions for both transmitting and
  /// receiving data. It is recommended this region be protected
  /// by a mutex.
  /// @param data - information to be placed in data register
  /// @return - received data from external device
  uint16_t Transfer(uint16_t data) override
   1507c:	b530      	push	{r4, r5, lr}
   1507e:	b085      	sub	sp, #20
   15080:	4675      	mov	r5, lr
   15082:	9001      	str	r0, [sp, #4]
   15084:	460b      	mov	r3, r1
   15086:	f8ad 3002 	strh.w	r3, [sp, #2]
   1508a:	462b      	mov	r3, r5
   1508c:	4619      	mov	r1, r3
   1508e:	4814      	ldr	r0, [pc, #80]	; (150e0 <Ssp::Transfer(unsigned short)+0x64>)
   15090:	f7fd fe26 	bl	12ce0 <__cyg_profile_func_enter>
  {
    uint32_t pssp = util::Value(pssp_);
   15094:	9b01      	ldr	r3, [sp, #4]
   15096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   15098:	4618      	mov	r0, r3
   1509a:	f7ff fe59 	bl	14d50 <int util::Value<Ssp::Peripheral, int>(Ssp::Peripheral)>
   1509e:	4603      	mov	r3, r0
   150a0:	9303      	str	r3, [sp, #12]

    ssp_registers[pssp]->DR = data;
   150a2:	4a10      	ldr	r2, [pc, #64]	; (150e4 <Ssp::Transfer(unsigned short)+0x68>)
   150a4:	9b03      	ldr	r3, [sp, #12]
   150a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   150aa:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   150ae:	609a      	str	r2, [r3, #8]
    while (IsTransferRegBusy())
   150b0:	9801      	ldr	r0, [sp, #4]
   150b2:	f7ff ffa7 	bl	15004 <Ssp::IsTransferRegBusy()>
   150b6:	4603      	mov	r3, r0
   150b8:	2b00      	cmp	r3, #0
   150ba:	d001      	beq.n	150c0 <Ssp::Transfer(unsigned short)+0x44>
    {
      continue;
   150bc:	bf00      	nop
    while (IsTransferRegBusy())
   150be:	e7f7      	b.n	150b0 <Ssp::Transfer(unsigned short)+0x34>
    }
    return static_cast<uint16_t>(ssp_registers[pssp]->DR);
   150c0:	4a08      	ldr	r2, [pc, #32]	; (150e4 <Ssp::Transfer(unsigned short)+0x68>)
   150c2:	9b03      	ldr	r3, [sp, #12]
   150c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   150c8:	689b      	ldr	r3, [r3, #8]
   150ca:	b29c      	uxth	r4, r3
   150cc:	462b      	mov	r3, r5
   150ce:	4619      	mov	r1, r3
   150d0:	4803      	ldr	r0, [pc, #12]	; (150e0 <Ssp::Transfer(unsigned short)+0x64>)
   150d2:	f7fd fe19 	bl	12d08 <__cyg_profile_func_exit>
   150d6:	4623      	mov	r3, r4
  }
   150d8:	4618      	mov	r0, r3
   150da:	b005      	add	sp, #20
   150dc:	bd30      	pop	{r4, r5, pc}
   150de:	bf00      	nop
   150e0:	0001507d 	.word	0x0001507d
   150e4:	100001c8 	.word	0x100001c8

000150e8 <Ssp::SetSpiMasterDefault()>:

  /// Sets up SSP peripheral as SPI master
  void SetSpiMasterDefault() override
   150e8:	b510      	push	{r4, lr}
   150ea:	b086      	sub	sp, #24
   150ec:	4674      	mov	r4, lr
   150ee:	9003      	str	r0, [sp, #12]
   150f0:	4623      	mov	r3, r4
   150f2:	4619      	mov	r1, r3
   150f4:	4812      	ldr	r0, [pc, #72]	; (15140 <Ssp::SetSpiMasterDefault()+0x58>)
   150f6:	f7fd fdf3 	bl	12ce0 <__cyg_profile_func_enter>
  {
    constexpr bool kHighPolarity  = 1;
   150fa:	2301      	movs	r3, #1
   150fc:	f88d 3017 	strb.w	r3, [sp, #23]
    constexpr bool kPhase0        = 0;
   15100:	2300      	movs	r3, #0
   15102:	f88d 3016 	strb.w	r3, [sp, #22]
    constexpr uint8_t kScrDivider = 0;
   15106:	2300      	movs	r3, #0
   15108:	f88d 3015 	strb.w	r3, [sp, #21]
    constexpr uint8_t kPrescaler  = SJ2_SYSTEM_CLOCK_RATE_MHZ;
   1510c:	2330      	movs	r3, #48	; 0x30
   1510e:	f88d 3014 	strb.w	r3, [sp, #20]

    SetPeripheralMode(kMaster, kSpi, kEight);
   15112:	2307      	movs	r3, #7
   15114:	2200      	movs	r2, #0
   15116:	2100      	movs	r1, #0
   15118:	9803      	ldr	r0, [sp, #12]
   1511a:	f000 f85b 	bl	151d4 <Ssp::SetPeripheralMode(SspInterface::MasterSlaveMode, SspInterface::FrameMode, SspInterface::DataSize)>
    SetClock(kHighPolarity, kPhase0, kScrDivider, kPrescaler);
   1511e:	2330      	movs	r3, #48	; 0x30
   15120:	9300      	str	r3, [sp, #0]
   15122:	2300      	movs	r3, #0
   15124:	2200      	movs	r2, #0
   15126:	2101      	movs	r1, #1
   15128:	9803      	ldr	r0, [sp, #12]
   1512a:	f000 fa09 	bl	15540 <Ssp::SetClock(bool, bool, unsigned char, unsigned char)>
   1512e:	4623      	mov	r3, r4
   15130:	4619      	mov	r1, r3
   15132:	4803      	ldr	r0, [pc, #12]	; (15140 <Ssp::SetSpiMasterDefault()+0x58>)
   15134:	f7fd fde8 	bl	12d08 <__cyg_profile_func_exit>
  }
   15138:	bf00      	nop
   1513a:	b006      	add	sp, #24
   1513c:	bd10      	pop	{r4, pc}
   1513e:	bf00      	nop
   15140:	000150e9 	.word	0x000150e9

00015144 <unsigned char util::Value<SspInterface::DataSize, unsigned char>(SspInterface::DataSize)>:
constexpr Type Value(Enum enum_type_value)
   15144:	b530      	push	{r4, r5, lr}
   15146:	b083      	sub	sp, #12
   15148:	4675      	mov	r5, lr
   1514a:	4603      	mov	r3, r0
   1514c:	f88d 3007 	strb.w	r3, [sp, #7]
   15150:	462b      	mov	r3, r5
   15152:	4619      	mov	r1, r3
   15154:	4806      	ldr	r0, [pc, #24]	; (15170 <unsigned char util::Value<SspInterface::DataSize, unsigned char>(SspInterface::DataSize)+0x2c>)
   15156:	f7fd fdc3 	bl	12ce0 <__cyg_profile_func_enter>
  return static_cast<Type>(enum_type_value);
   1515a:	f89d 4007 	ldrb.w	r4, [sp, #7]
   1515e:	462b      	mov	r3, r5
   15160:	4619      	mov	r1, r3
   15162:	4803      	ldr	r0, [pc, #12]	; (15170 <unsigned char util::Value<SspInterface::DataSize, unsigned char>(SspInterface::DataSize)+0x2c>)
   15164:	f7fd fdd0 	bl	12d08 <__cyg_profile_func_exit>
   15168:	4623      	mov	r3, r4
}
   1516a:	4618      	mov	r0, r3
   1516c:	b003      	add	sp, #12
   1516e:	bd30      	pop	{r4, r5, pc}
   15170:	00015145 	.word	0x00015145

00015174 <unsigned char util::Value<SspInterface::FrameMode, unsigned char>(SspInterface::FrameMode)>:
constexpr Type Value(Enum enum_type_value)
   15174:	b530      	push	{r4, r5, lr}
   15176:	b083      	sub	sp, #12
   15178:	4675      	mov	r5, lr
   1517a:	4603      	mov	r3, r0
   1517c:	f88d 3007 	strb.w	r3, [sp, #7]
   15180:	462b      	mov	r3, r5
   15182:	4619      	mov	r1, r3
   15184:	4806      	ldr	r0, [pc, #24]	; (151a0 <unsigned char util::Value<SspInterface::FrameMode, unsigned char>(SspInterface::FrameMode)+0x2c>)
   15186:	f7fd fdab 	bl	12ce0 <__cyg_profile_func_enter>
  return static_cast<Type>(enum_type_value);
   1518a:	f89d 4007 	ldrb.w	r4, [sp, #7]
   1518e:	462b      	mov	r3, r5
   15190:	4619      	mov	r1, r3
   15192:	4803      	ldr	r0, [pc, #12]	; (151a0 <unsigned char util::Value<SspInterface::FrameMode, unsigned char>(SspInterface::FrameMode)+0x2c>)
   15194:	f7fd fdb8 	bl	12d08 <__cyg_profile_func_exit>
   15198:	4623      	mov	r3, r4
}
   1519a:	4618      	mov	r0, r3
   1519c:	b003      	add	sp, #12
   1519e:	bd30      	pop	{r4, r5, pc}
   151a0:	00015175 	.word	0x00015175

000151a4 <unsigned char util::Value<SspInterface::MasterSlaveMode, unsigned char>(SspInterface::MasterSlaveMode)>:
constexpr Type Value(Enum enum_type_value)
   151a4:	b530      	push	{r4, r5, lr}
   151a6:	b083      	sub	sp, #12
   151a8:	4675      	mov	r5, lr
   151aa:	4603      	mov	r3, r0
   151ac:	f88d 3007 	strb.w	r3, [sp, #7]
   151b0:	462b      	mov	r3, r5
   151b2:	4619      	mov	r1, r3
   151b4:	4806      	ldr	r0, [pc, #24]	; (151d0 <unsigned char util::Value<SspInterface::MasterSlaveMode, unsigned char>(SspInterface::MasterSlaveMode)+0x2c>)
   151b6:	f7fd fd93 	bl	12ce0 <__cyg_profile_func_enter>
  return static_cast<Type>(enum_type_value);
   151ba:	f89d 4007 	ldrb.w	r4, [sp, #7]
   151be:	462b      	mov	r3, r5
   151c0:	4619      	mov	r1, r3
   151c2:	4803      	ldr	r0, [pc, #12]	; (151d0 <unsigned char util::Value<SspInterface::MasterSlaveMode, unsigned char>(SspInterface::MasterSlaveMode)+0x2c>)
   151c4:	f7fd fda0 	bl	12d08 <__cyg_profile_func_exit>
   151c8:	4623      	mov	r3, r4
}
   151ca:	4618      	mov	r0, r3
   151cc:	b003      	add	sp, #12
   151ce:	bd30      	pop	{r4, r5, pc}
   151d0:	000151a5 	.word	0x000151a5

000151d4 <Ssp::SetPeripheralMode(SspInterface::MasterSlaveMode, SspInterface::FrameMode, SspInterface::DataSize)>:

  /// Sets the various modes for the Peripheral
  /// @param mode - master or slave mode
  /// @param frame - format for Peripheral data to use
  /// @param size - number of bits per frame
  void SetPeripheralMode(MasterSlaveMode mode, FrameMode frame,
   151d4:	b570      	push	{r4, r5, r6, lr}
   151d6:	b098      	sub	sp, #96	; 0x60
   151d8:	4674      	mov	r4, lr
   151da:	9001      	str	r0, [sp, #4]
   151dc:	4608      	mov	r0, r1
   151de:	4611      	mov	r1, r2
   151e0:	461a      	mov	r2, r3
   151e2:	4603      	mov	r3, r0
   151e4:	f88d 3003 	strb.w	r3, [sp, #3]
   151e8:	460b      	mov	r3, r1
   151ea:	f88d 3002 	strb.w	r3, [sp, #2]
   151ee:	4613      	mov	r3, r2
   151f0:	f88d 3001 	strb.w	r3, [sp, #1]
   151f4:	4623      	mov	r3, r4
   151f6:	4619      	mov	r1, r3
   151f8:	4875      	ldr	r0, [pc, #468]	; (153d0 <Ssp::SetPeripheralMode(SspInterface::MasterSlaveMode, SspInterface::FrameMode, SspInterface::DataSize)+0x1fc>)
   151fa:	f7fd fd71 	bl	12ce0 <__cyg_profile_func_enter>
                         DataSize size) override
  {
    uint32_t pssp = util::Value(pssp_);
   151fe:	9b01      	ldr	r3, [sp, #4]
   15200:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   15202:	4618      	mov	r0, r3
   15204:	f7ff fda4 	bl	14d50 <int util::Value<Ssp::Peripheral, int>(Ssp::Peripheral)>
   15208:	4603      	mov	r3, r0
   1520a:	9317      	str	r3, [sp, #92]	; 0x5c
    // TODO(#371): Find a better alternative to powering up the peripheral for
    // every method.
    Ssp::PowerUpPeripheral(Ssp::kPowerBit[pssp]);
   1520c:	9b01      	ldr	r3, [sp, #4]
   1520e:	1d18      	adds	r0, r3, #4
   15210:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   15212:	009b      	lsls	r3, r3, #2
   15214:	4a6f      	ldr	r2, [pc, #444]	; (153d4 <Ssp::SetPeripheralMode(SspInterface::MasterSlaveMode, SspInterface::FrameMode, SspInterface::DataSize)+0x200>)
   15216:	4413      	add	r3, r2
   15218:	4619      	mov	r1, r3
   1521a:	f7fb fc7d 	bl	10b18 <Lpc40xxSystemController::PowerUpPeripheral(SystemControllerInterface::PeripheralID const&)>
    if (frame == kMicro)
   1521e:	f89d 3002 	ldrb.w	r3, [sp, #2]
   15222:	2b02      	cmp	r3, #2
   15224:	d102      	bne.n	1522c <Ssp::SetPeripheralMode(SspInterface::MasterSlaveMode, SspInterface::FrameMode, SspInterface::DataSize)+0x58>
    {
      size = kEight;
   15226:	2307      	movs	r3, #7
   15228:	f88d 3001 	strb.w	r3, [sp, #1]
    }
    ssp_registers[pssp]->CR0 =
        bit::Insert(ssp_registers[pssp]->CR0, util::Value(size), kDataBit, 4);
   1522c:	4a6a      	ldr	r2, [pc, #424]	; (153d8 <Ssp::SetPeripheralMode(SspInterface::MasterSlaveMode, SspInterface::FrameMode, SspInterface::DataSize)+0x204>)
   1522e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   15230:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15234:	681e      	ldr	r6, [r3, #0]
   15236:	f89d 3001 	ldrb.w	r3, [sp, #1]
   1523a:	4618      	mov	r0, r3
   1523c:	f7ff ff82 	bl	15144 <unsigned char util::Value<SspInterface::DataSize, unsigned char>(SspInterface::DataSize)>
   15240:	4603      	mov	r3, r0
   15242:	4619      	mov	r1, r3
    ssp_registers[pssp]->CR0 =
   15244:	4a64      	ldr	r2, [pc, #400]	; (153d8 <Ssp::SetPeripheralMode(SspInterface::MasterSlaveMode, SspInterface::FrameMode, SspInterface::DataSize)+0x204>)
   15246:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   15248:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
   1524c:	9608      	str	r6, [sp, #32]
   1524e:	460b      	mov	r3, r1
   15250:	f88d 301f 	strb.w	r3, [sp, #31]
   15254:	2300      	movs	r3, #0
   15256:	9306      	str	r3, [sp, #24]
   15258:	2304      	movs	r3, #4
   1525a:	9305      	str	r3, [sp, #20]
   1525c:	4623      	mov	r3, r4
   1525e:	4619      	mov	r1, r3
   15260:	485e      	ldr	r0, [pc, #376]	; (153dc <Ssp::SetPeripheralMode(SspInterface::MasterSlaveMode, SspInterface::FrameMode, SspInterface::DataSize)+0x208>)
   15262:	f7fd fd3d 	bl	12ce0 <__cyg_profile_func_enter>
  constexpr UnsignedT kFieldOfOnes = GenerateFieldOfOnes<T>();
   15266:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1526a:	9304      	str	r3, [sp, #16]
  constexpr size_t kTargetWidth     = sizeof(T) * 8;
   1526c:	2320      	movs	r3, #32
   1526e:	9303      	str	r3, [sp, #12]
  UnsignedT mask   = kFieldOfOnes >> (kTargetWidth - width);
   15270:	9b05      	ldr	r3, [sp, #20]
   15272:	f1c3 0320 	rsb	r3, r3, #32
   15276:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1527a:	fa22 f303 	lsr.w	r3, r2, r3
   1527e:	9302      	str	r3, [sp, #8]
  target &= ~(mask << position);
   15280:	9a02      	ldr	r2, [sp, #8]
   15282:	9b06      	ldr	r3, [sp, #24]
   15284:	fa02 f303 	lsl.w	r3, r2, r3
   15288:	43db      	mvns	r3, r3
   1528a:	9a08      	ldr	r2, [sp, #32]
   1528c:	4013      	ands	r3, r2
   1528e:	9308      	str	r3, [sp, #32]
  target |= (value & mask) << position;
   15290:	f89d 201f 	ldrb.w	r2, [sp, #31]
   15294:	9b02      	ldr	r3, [sp, #8]
   15296:	401a      	ands	r2, r3
   15298:	9b06      	ldr	r3, [sp, #24]
   1529a:	fa02 f303 	lsl.w	r3, r2, r3
   1529e:	9a08      	ldr	r2, [sp, #32]
   152a0:	4313      	orrs	r3, r2
   152a2:	9308      	str	r3, [sp, #32]
  return target;
   152a4:	9e08      	ldr	r6, [sp, #32]
   152a6:	4623      	mov	r3, r4
   152a8:	4619      	mov	r1, r3
   152aa:	484c      	ldr	r0, [pc, #304]	; (153dc <Ssp::SetPeripheralMode(SspInterface::MasterSlaveMode, SspInterface::FrameMode, SspInterface::DataSize)+0x208>)
   152ac:	f7fd fd2c 	bl	12d08 <__cyg_profile_func_exit>
   152b0:	602e      	str	r6, [r5, #0]
    ssp_registers[pssp]->CR0 =
        bit::Insert(ssp_registers[pssp]->CR0, util::Value(frame), kFrameBit, 2);
   152b2:	4a49      	ldr	r2, [pc, #292]	; (153d8 <Ssp::SetPeripheralMode(SspInterface::MasterSlaveMode, SspInterface::FrameMode, SspInterface::DataSize)+0x204>)
   152b4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   152b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   152ba:	681e      	ldr	r6, [r3, #0]
   152bc:	f89d 3002 	ldrb.w	r3, [sp, #2]
   152c0:	4618      	mov	r0, r3
   152c2:	f7ff ff57 	bl	15174 <unsigned char util::Value<SspInterface::FrameMode, unsigned char>(SspInterface::FrameMode)>
   152c6:	4603      	mov	r3, r0
   152c8:	4619      	mov	r1, r3
    ssp_registers[pssp]->CR0 =
   152ca:	4a43      	ldr	r2, [pc, #268]	; (153d8 <Ssp::SetPeripheralMode(SspInterface::MasterSlaveMode, SspInterface::FrameMode, SspInterface::DataSize)+0x204>)
   152cc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   152ce:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
   152d2:	960f      	str	r6, [sp, #60]	; 0x3c
   152d4:	460b      	mov	r3, r1
   152d6:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
   152da:	2304      	movs	r3, #4
   152dc:	930d      	str	r3, [sp, #52]	; 0x34
   152de:	2302      	movs	r3, #2
   152e0:	930c      	str	r3, [sp, #48]	; 0x30
   152e2:	4623      	mov	r3, r4
   152e4:	4619      	mov	r1, r3
   152e6:	483d      	ldr	r0, [pc, #244]	; (153dc <Ssp::SetPeripheralMode(SspInterface::MasterSlaveMode, SspInterface::FrameMode, SspInterface::DataSize)+0x208>)
   152e8:	f7fd fcfa 	bl	12ce0 <__cyg_profile_func_enter>
  constexpr UnsignedT kFieldOfOnes = GenerateFieldOfOnes<T>();
   152ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   152f0:	930b      	str	r3, [sp, #44]	; 0x2c
  constexpr size_t kTargetWidth     = sizeof(T) * 8;
   152f2:	2320      	movs	r3, #32
   152f4:	930a      	str	r3, [sp, #40]	; 0x28
  UnsignedT mask   = kFieldOfOnes >> (kTargetWidth - width);
   152f6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   152f8:	f1c3 0320 	rsb	r3, r3, #32
   152fc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   15300:	fa22 f303 	lsr.w	r3, r2, r3
   15304:	9309      	str	r3, [sp, #36]	; 0x24
  target &= ~(mask << position);
   15306:	9a09      	ldr	r2, [sp, #36]	; 0x24
   15308:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1530a:	fa02 f303 	lsl.w	r3, r2, r3
   1530e:	43db      	mvns	r3, r3
   15310:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   15312:	4013      	ands	r3, r2
   15314:	930f      	str	r3, [sp, #60]	; 0x3c
  target |= (value & mask) << position;
   15316:	f89d 203b 	ldrb.w	r2, [sp, #59]	; 0x3b
   1531a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1531c:	401a      	ands	r2, r3
   1531e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   15320:	fa02 f303 	lsl.w	r3, r2, r3
   15324:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   15326:	4313      	orrs	r3, r2
   15328:	930f      	str	r3, [sp, #60]	; 0x3c
  return target;
   1532a:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
   1532c:	4623      	mov	r3, r4
   1532e:	4619      	mov	r1, r3
   15330:	482a      	ldr	r0, [pc, #168]	; (153dc <Ssp::SetPeripheralMode(SspInterface::MasterSlaveMode, SspInterface::FrameMode, SspInterface::DataSize)+0x208>)
   15332:	f7fd fce9 	bl	12d08 <__cyg_profile_func_exit>
   15336:	602e      	str	r6, [r5, #0]
    ssp_registers[pssp]->CR1 = bit::Insert(
        ssp_registers[pssp]->CR1, util::Value(mode), kMasterModeBit, 1);
   15338:	4a27      	ldr	r2, [pc, #156]	; (153d8 <Ssp::SetPeripheralMode(SspInterface::MasterSlaveMode, SspInterface::FrameMode, SspInterface::DataSize)+0x204>)
   1533a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   1533c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15340:	685e      	ldr	r6, [r3, #4]
    ssp_registers[pssp]->CR1 = bit::Insert(
   15342:	f89d 3003 	ldrb.w	r3, [sp, #3]
   15346:	4618      	mov	r0, r3
   15348:	f7ff ff2c 	bl	151a4 <unsigned char util::Value<SspInterface::MasterSlaveMode, unsigned char>(SspInterface::MasterSlaveMode)>
   1534c:	4603      	mov	r3, r0
   1534e:	4619      	mov	r1, r3
   15350:	4a21      	ldr	r2, [pc, #132]	; (153d8 <Ssp::SetPeripheralMode(SspInterface::MasterSlaveMode, SspInterface::FrameMode, SspInterface::DataSize)+0x204>)
   15352:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   15354:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
   15358:	9616      	str	r6, [sp, #88]	; 0x58
   1535a:	460b      	mov	r3, r1
   1535c:	f88d 3057 	strb.w	r3, [sp, #87]	; 0x57
   15360:	2302      	movs	r3, #2
   15362:	9314      	str	r3, [sp, #80]	; 0x50
   15364:	2301      	movs	r3, #1
   15366:	9313      	str	r3, [sp, #76]	; 0x4c
   15368:	4623      	mov	r3, r4
   1536a:	4619      	mov	r1, r3
   1536c:	481b      	ldr	r0, [pc, #108]	; (153dc <Ssp::SetPeripheralMode(SspInterface::MasterSlaveMode, SspInterface::FrameMode, SspInterface::DataSize)+0x208>)
   1536e:	f7fd fcb7 	bl	12ce0 <__cyg_profile_func_enter>
  constexpr UnsignedT kFieldOfOnes = GenerateFieldOfOnes<T>();
   15372:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   15376:	9312      	str	r3, [sp, #72]	; 0x48
  constexpr size_t kTargetWidth     = sizeof(T) * 8;
   15378:	2320      	movs	r3, #32
   1537a:	9311      	str	r3, [sp, #68]	; 0x44
  UnsignedT mask   = kFieldOfOnes >> (kTargetWidth - width);
   1537c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   1537e:	f1c3 0320 	rsb	r3, r3, #32
   15382:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   15386:	fa22 f303 	lsr.w	r3, r2, r3
   1538a:	9310      	str	r3, [sp, #64]	; 0x40
  target &= ~(mask << position);
   1538c:	9a10      	ldr	r2, [sp, #64]	; 0x40
   1538e:	9b14      	ldr	r3, [sp, #80]	; 0x50
   15390:	fa02 f303 	lsl.w	r3, r2, r3
   15394:	43db      	mvns	r3, r3
   15396:	9a16      	ldr	r2, [sp, #88]	; 0x58
   15398:	4013      	ands	r3, r2
   1539a:	9316      	str	r3, [sp, #88]	; 0x58
  target |= (value & mask) << position;
   1539c:	f89d 2057 	ldrb.w	r2, [sp, #87]	; 0x57
   153a0:	9b10      	ldr	r3, [sp, #64]	; 0x40
   153a2:	401a      	ands	r2, r3
   153a4:	9b14      	ldr	r3, [sp, #80]	; 0x50
   153a6:	fa02 f303 	lsl.w	r3, r2, r3
   153aa:	9a16      	ldr	r2, [sp, #88]	; 0x58
   153ac:	4313      	orrs	r3, r2
   153ae:	9316      	str	r3, [sp, #88]	; 0x58
  return target;
   153b0:	9e16      	ldr	r6, [sp, #88]	; 0x58
   153b2:	4623      	mov	r3, r4
   153b4:	4619      	mov	r1, r3
   153b6:	4809      	ldr	r0, [pc, #36]	; (153dc <Ssp::SetPeripheralMode(SspInterface::MasterSlaveMode, SspInterface::FrameMode, SspInterface::DataSize)+0x208>)
   153b8:	f7fd fca6 	bl	12d08 <__cyg_profile_func_exit>
   153bc:	606e      	str	r6, [r5, #4]
   153be:	4623      	mov	r3, r4
   153c0:	4619      	mov	r1, r3
   153c2:	4803      	ldr	r0, [pc, #12]	; (153d0 <Ssp::SetPeripheralMode(SspInterface::MasterSlaveMode, SspInterface::FrameMode, SspInterface::DataSize)+0x1fc>)
   153c4:	f7fd fca0 	bl	12d08 <__cyg_profile_func_exit>
  }
   153c8:	bf00      	nop
   153ca:	b018      	add	sp, #96	; 0x60
   153cc:	bd70      	pop	{r4, r5, r6, pc}
   153ce:	bf00      	nop
   153d0:	000151d5 	.word	0x000151d5
   153d4:	00018be4 	.word	0x00018be4
   153d8:	100001c8 	.word	0x100001c8
   153dc:	00016cad 	.word	0x00016cad

000153e0 <Ssp::GetPeripheralMode()>:
  /// Gets the Peripheral modes from registers
  /// @return - returns a 16-bit value as follows: 0000_000x 0xx0_xxxx
  ///       MasterSlaveMode = 1-bit @ bit 8
  ///       FrameMode       = 2-bit @ bit 5
  ///       DataSize        = 4-bit @ bit 0
  uint16_t GetPeripheralMode() override
   153e0:	b570      	push	{r4, r5, r6, lr}
   153e2:	b096      	sub	sp, #88	; 0x58
   153e4:	4674      	mov	r4, lr
   153e6:	9001      	str	r0, [sp, #4]
   153e8:	4623      	mov	r3, r4
   153ea:	4619      	mov	r1, r3
   153ec:	4850      	ldr	r0, [pc, #320]	; (15530 <Ssp::GetPeripheralMode()+0x150>)
   153ee:	f7fd fc77 	bl	12ce0 <__cyg_profile_func_enter>
  {
    uint16_t return_val = 0;
   153f2:	2300      	movs	r3, #0
   153f4:	f8ad 3056 	strh.w	r3, [sp, #86]	; 0x56
    uint32_t pssp       = util::Value(pssp_);
   153f8:	9b01      	ldr	r3, [sp, #4]
   153fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   153fc:	4618      	mov	r0, r3
   153fe:	f7ff fca7 	bl	14d50 <int util::Value<Ssp::Peripheral, int>(Ssp::Peripheral)>
   15402:	4603      	mov	r3, r0
   15404:	9314      	str	r3, [sp, #80]	; 0x50
    // TODO(#371): Find a better alternative to powering up the peripheral for
    // every method.
    Ssp::PowerUpPeripheral(Ssp::kPowerBit[pssp]);
   15406:	9b01      	ldr	r3, [sp, #4]
   15408:	1d18      	adds	r0, r3, #4
   1540a:	9b14      	ldr	r3, [sp, #80]	; 0x50
   1540c:	009b      	lsls	r3, r3, #2
   1540e:	4a49      	ldr	r2, [pc, #292]	; (15534 <Ssp::GetPeripheralMode()+0x154>)
   15410:	4413      	add	r3, r2
   15412:	4619      	mov	r1, r3
   15414:	f7fb fb80 	bl	10b18 <Lpc40xxSystemController::PowerUpPeripheral(SystemControllerInterface::PeripheralID const&)>

    return_val = static_cast<uint16_t>(
        (bit::Extract(ssp_registers[pssp]->CR0, kDataBit, 4)) +
   15418:	4a47      	ldr	r2, [pc, #284]	; (15538 <Ssp::GetPeripheralMode()+0x158>)
   1541a:	9b14      	ldr	r3, [sp, #80]	; 0x50
   1541c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15420:	681b      	ldr	r3, [r3, #0]
   15422:	9307      	str	r3, [sp, #28]
   15424:	2300      	movs	r3, #0
   15426:	9306      	str	r3, [sp, #24]
   15428:	2304      	movs	r3, #4
   1542a:	9305      	str	r3, [sp, #20]
   1542c:	4623      	mov	r3, r4
   1542e:	4619      	mov	r1, r3
   15430:	4842      	ldr	r0, [pc, #264]	; (1553c <Ssp::GetPeripheralMode()+0x15c>)
   15432:	f7fd fc55 	bl	12ce0 <__cyg_profile_func_enter>
  constexpr UnsignedT kFieldOfOnes = GenerateFieldOfOnes<T>();
   15436:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1543a:	9304      	str	r3, [sp, #16]
  constexpr size_t kTargetWidth     = sizeof(T) * 8;
   1543c:	2320      	movs	r3, #32
   1543e:	9303      	str	r3, [sp, #12]
  UnsignedT mask   = kFieldOfOnes >> (kTargetWidth - width);
   15440:	9b05      	ldr	r3, [sp, #20]
   15442:	f1c3 0320 	rsb	r3, r3, #32
   15446:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1544a:	fa22 f303 	lsr.w	r3, r2, r3
   1544e:	9302      	str	r3, [sp, #8]
  return (target >> position) & mask;
   15450:	9a07      	ldr	r2, [sp, #28]
   15452:	9b06      	ldr	r3, [sp, #24]
   15454:	40da      	lsrs	r2, r3
   15456:	9b02      	ldr	r3, [sp, #8]
   15458:	ea02 0503 	and.w	r5, r2, r3
   1545c:	4623      	mov	r3, r4
   1545e:	4619      	mov	r1, r3
   15460:	4836      	ldr	r0, [pc, #216]	; (1553c <Ssp::GetPeripheralMode()+0x15c>)
   15462:	f7fd fc51 	bl	12d08 <__cyg_profile_func_exit>
   15466:	b2ad      	uxth	r5, r5
        ((bit::Extract(ssp_registers[pssp]->CR0, kFrameBit, 2)) << 5) +
   15468:	4a33      	ldr	r2, [pc, #204]	; (15538 <Ssp::GetPeripheralMode()+0x158>)
   1546a:	9b14      	ldr	r3, [sp, #80]	; 0x50
   1546c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15470:	681b      	ldr	r3, [r3, #0]
   15472:	930d      	str	r3, [sp, #52]	; 0x34
   15474:	2304      	movs	r3, #4
   15476:	930c      	str	r3, [sp, #48]	; 0x30
   15478:	2302      	movs	r3, #2
   1547a:	930b      	str	r3, [sp, #44]	; 0x2c
   1547c:	4623      	mov	r3, r4
   1547e:	4619      	mov	r1, r3
   15480:	482e      	ldr	r0, [pc, #184]	; (1553c <Ssp::GetPeripheralMode()+0x15c>)
   15482:	f7fd fc2d 	bl	12ce0 <__cyg_profile_func_enter>
  constexpr UnsignedT kFieldOfOnes = GenerateFieldOfOnes<T>();
   15486:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1548a:	930a      	str	r3, [sp, #40]	; 0x28
  constexpr size_t kTargetWidth     = sizeof(T) * 8;
   1548c:	2320      	movs	r3, #32
   1548e:	9309      	str	r3, [sp, #36]	; 0x24
  UnsignedT mask   = kFieldOfOnes >> (kTargetWidth - width);
   15490:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   15492:	f1c3 0320 	rsb	r3, r3, #32
   15496:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1549a:	fa22 f303 	lsr.w	r3, r2, r3
   1549e:	9308      	str	r3, [sp, #32]
  return (target >> position) & mask;
   154a0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   154a2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   154a4:	40da      	lsrs	r2, r3
   154a6:	9b08      	ldr	r3, [sp, #32]
   154a8:	ea02 0603 	and.w	r6, r2, r3
   154ac:	4623      	mov	r3, r4
   154ae:	4619      	mov	r1, r3
   154b0:	4822      	ldr	r0, [pc, #136]	; (1553c <Ssp::GetPeripheralMode()+0x15c>)
   154b2:	f7fd fc29 	bl	12d08 <__cyg_profile_func_exit>
   154b6:	b2b3      	uxth	r3, r6
   154b8:	015b      	lsls	r3, r3, #5
   154ba:	b29b      	uxth	r3, r3
        (bit::Extract(ssp_registers[pssp]->CR0, kDataBit, 4)) +
   154bc:	442b      	add	r3, r5
   154be:	b29d      	uxth	r5, r3
        ((bit::Extract(ssp_registers[pssp]->CR1, kMasterModeBit)) << 8));
   154c0:	4a1d      	ldr	r2, [pc, #116]	; (15538 <Ssp::GetPeripheralMode()+0x158>)
   154c2:	9b14      	ldr	r3, [sp, #80]	; 0x50
   154c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   154c8:	685b      	ldr	r3, [r3, #4]
   154ca:	9313      	str	r3, [sp, #76]	; 0x4c
   154cc:	2302      	movs	r3, #2
   154ce:	9312      	str	r3, [sp, #72]	; 0x48
   154d0:	2301      	movs	r3, #1
   154d2:	9311      	str	r3, [sp, #68]	; 0x44
   154d4:	4623      	mov	r3, r4
   154d6:	4619      	mov	r1, r3
   154d8:	4818      	ldr	r0, [pc, #96]	; (1553c <Ssp::GetPeripheralMode()+0x15c>)
   154da:	f7fd fc01 	bl	12ce0 <__cyg_profile_func_enter>
  constexpr UnsignedT kFieldOfOnes = GenerateFieldOfOnes<T>();
   154de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   154e2:	9310      	str	r3, [sp, #64]	; 0x40
  constexpr size_t kTargetWidth     = sizeof(T) * 8;
   154e4:	2320      	movs	r3, #32
   154e6:	930f      	str	r3, [sp, #60]	; 0x3c
  UnsignedT mask   = kFieldOfOnes >> (kTargetWidth - width);
   154e8:	9b11      	ldr	r3, [sp, #68]	; 0x44
   154ea:	f1c3 0320 	rsb	r3, r3, #32
   154ee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   154f2:	fa22 f303 	lsr.w	r3, r2, r3
   154f6:	930e      	str	r3, [sp, #56]	; 0x38
  return (target >> position) & mask;
   154f8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   154fa:	9b12      	ldr	r3, [sp, #72]	; 0x48
   154fc:	40da      	lsrs	r2, r3
   154fe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   15500:	ea02 0603 	and.w	r6, r2, r3
   15504:	4623      	mov	r3, r4
   15506:	4619      	mov	r1, r3
   15508:	480c      	ldr	r0, [pc, #48]	; (1553c <Ssp::GetPeripheralMode()+0x15c>)
   1550a:	f7fd fbfd 	bl	12d08 <__cyg_profile_func_exit>
   1550e:	b2b3      	uxth	r3, r6
   15510:	021b      	lsls	r3, r3, #8
   15512:	b29b      	uxth	r3, r3
    return_val = static_cast<uint16_t>(
   15514:	442b      	add	r3, r5
   15516:	f8ad 3056 	strh.w	r3, [sp, #86]	; 0x56
    return return_val;
   1551a:	f8bd 5056 	ldrh.w	r5, [sp, #86]	; 0x56
   1551e:	4623      	mov	r3, r4
   15520:	4619      	mov	r1, r3
   15522:	4803      	ldr	r0, [pc, #12]	; (15530 <Ssp::GetPeripheralMode()+0x150>)
   15524:	f7fd fbf0 	bl	12d08 <__cyg_profile_func_exit>
   15528:	462b      	mov	r3, r5
  }
   1552a:	4618      	mov	r0, r3
   1552c:	b016      	add	sp, #88	; 0x58
   1552e:	bd70      	pop	{r4, r5, r6, pc}
   15530:	000153e1 	.word	0x000153e1
   15534:	00018be4 	.word	0x00018be4
   15538:	100001c8 	.word	0x100001c8
   1553c:	00016d21 	.word	0x00016d21

00015540 <Ssp::SetClock(bool, bool, unsigned char, unsigned char)>:
  /// Sets the clock rate for the Peripheral
  /// @param polarity - maintain bus on clock 0=low or 1=high between frames
  /// @param phase - capture serial data on 0=first or 1=second clock cycle
  /// @param divider - see notes in SSP_Interface above
  /// @param prescaler - divides the PCLK, must be even value between 2-254
  void SetClock(bool polarity, bool phase, uint8_t divider,
   15540:	b570      	push	{r4, r5, r6, lr}
   15542:	b098      	sub	sp, #96	; 0x60
   15544:	4674      	mov	r4, lr
   15546:	9001      	str	r0, [sp, #4]
   15548:	4608      	mov	r0, r1
   1554a:	4611      	mov	r1, r2
   1554c:	461a      	mov	r2, r3
   1554e:	4603      	mov	r3, r0
   15550:	f88d 3003 	strb.w	r3, [sp, #3]
   15554:	460b      	mov	r3, r1
   15556:	f88d 3002 	strb.w	r3, [sp, #2]
   1555a:	4613      	mov	r3, r2
   1555c:	f88d 3001 	strb.w	r3, [sp, #1]
   15560:	4623      	mov	r3, r4
   15562:	4619      	mov	r1, r3
   15564:	486c      	ldr	r0, [pc, #432]	; (15718 <Ssp::SetClock(bool, bool, unsigned char, unsigned char)+0x1d8>)
   15566:	f7fd fbbb 	bl	12ce0 <__cyg_profile_func_enter>
                uint8_t prescaler) override
  {
    uint32_t pssp = util::Value(pssp_);
   1556a:	9b01      	ldr	r3, [sp, #4]
   1556c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1556e:	4618      	mov	r0, r3
   15570:	f7ff fbee 	bl	14d50 <int util::Value<Ssp::Peripheral, int>(Ssp::Peripheral)>
   15574:	4603      	mov	r3, r0
   15576:	9317      	str	r3, [sp, #92]	; 0x5c
    // TODO(#371): Find a better alternative to powering up the peripheral for
    // every method.
    Ssp::PowerUpPeripheral(Ssp::kPowerBit[pssp]);
   15578:	9b01      	ldr	r3, [sp, #4]
   1557a:	1d18      	adds	r0, r3, #4
   1557c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   1557e:	009b      	lsls	r3, r3, #2
   15580:	4a66      	ldr	r2, [pc, #408]	; (1571c <Ssp::SetClock(bool, bool, unsigned char, unsigned char)+0x1dc>)
   15582:	4413      	add	r3, r2
   15584:	4619      	mov	r1, r3
   15586:	f7fb fac7 	bl	10b18 <Lpc40xxSystemController::PowerUpPeripheral(SystemControllerInterface::PeripheralID const&)>
    // first clear the appropriate registers
    ssp_registers[pssp]->CR0 =
        bit::Insert(ssp_registers[pssp]->CR0, polarity, kPolarityBit, 1);
   1558a:	4a65      	ldr	r2, [pc, #404]	; (15720 <Ssp::SetClock(bool, bool, unsigned char, unsigned char)+0x1e0>)
   1558c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   1558e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15592:	681b      	ldr	r3, [r3, #0]
    ssp_registers[pssp]->CR0 =
   15594:	4962      	ldr	r1, [pc, #392]	; (15720 <Ssp::SetClock(bool, bool, unsigned char, unsigned char)+0x1e0>)
   15596:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   15598:	f851 5022 	ldr.w	r5, [r1, r2, lsl #2]
   1559c:	9308      	str	r3, [sp, #32]
   1559e:	f89d 3003 	ldrb.w	r3, [sp, #3]
   155a2:	f88d 301f 	strb.w	r3, [sp, #31]
   155a6:	2306      	movs	r3, #6
   155a8:	9306      	str	r3, [sp, #24]
   155aa:	2301      	movs	r3, #1
   155ac:	9305      	str	r3, [sp, #20]
   155ae:	4623      	mov	r3, r4
   155b0:	4619      	mov	r1, r3
   155b2:	485c      	ldr	r0, [pc, #368]	; (15724 <Ssp::SetClock(bool, bool, unsigned char, unsigned char)+0x1e4>)
   155b4:	f7fd fb94 	bl	12ce0 <__cyg_profile_func_enter>
  constexpr UnsignedT kFieldOfOnes = GenerateFieldOfOnes<T>();
   155b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   155bc:	9304      	str	r3, [sp, #16]
  constexpr size_t kTargetWidth     = sizeof(T) * 8;
   155be:	2320      	movs	r3, #32
   155c0:	9303      	str	r3, [sp, #12]
  UnsignedT mask   = kFieldOfOnes >> (kTargetWidth - width);
   155c2:	9b05      	ldr	r3, [sp, #20]
   155c4:	f1c3 0320 	rsb	r3, r3, #32
   155c8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   155cc:	fa22 f303 	lsr.w	r3, r2, r3
   155d0:	9302      	str	r3, [sp, #8]
  target &= ~(mask << position);
   155d2:	9a02      	ldr	r2, [sp, #8]
   155d4:	9b06      	ldr	r3, [sp, #24]
   155d6:	fa02 f303 	lsl.w	r3, r2, r3
   155da:	43db      	mvns	r3, r3
   155dc:	9a08      	ldr	r2, [sp, #32]
   155de:	4013      	ands	r3, r2
   155e0:	9308      	str	r3, [sp, #32]
  target |= (value & mask) << position;
   155e2:	f89d 201f 	ldrb.w	r2, [sp, #31]
   155e6:	9b02      	ldr	r3, [sp, #8]
   155e8:	401a      	ands	r2, r3
   155ea:	9b06      	ldr	r3, [sp, #24]
   155ec:	fa02 f303 	lsl.w	r3, r2, r3
   155f0:	9a08      	ldr	r2, [sp, #32]
   155f2:	4313      	orrs	r3, r2
   155f4:	9308      	str	r3, [sp, #32]
  return target;
   155f6:	9e08      	ldr	r6, [sp, #32]
   155f8:	4623      	mov	r3, r4
   155fa:	4619      	mov	r1, r3
   155fc:	4849      	ldr	r0, [pc, #292]	; (15724 <Ssp::SetClock(bool, bool, unsigned char, unsigned char)+0x1e4>)
   155fe:	f7fd fb83 	bl	12d08 <__cyg_profile_func_exit>
   15602:	602e      	str	r6, [r5, #0]
    ssp_registers[pssp]->CR0 =
        bit::Insert(ssp_registers[pssp]->CR0, phase, kPhaseBit, 1);
   15604:	4a46      	ldr	r2, [pc, #280]	; (15720 <Ssp::SetClock(bool, bool, unsigned char, unsigned char)+0x1e0>)
   15606:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   15608:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1560c:	681b      	ldr	r3, [r3, #0]
    ssp_registers[pssp]->CR0 =
   1560e:	4944      	ldr	r1, [pc, #272]	; (15720 <Ssp::SetClock(bool, bool, unsigned char, unsigned char)+0x1e0>)
   15610:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   15612:	f851 5022 	ldr.w	r5, [r1, r2, lsl #2]
   15616:	930f      	str	r3, [sp, #60]	; 0x3c
   15618:	f89d 3002 	ldrb.w	r3, [sp, #2]
   1561c:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
   15620:	2307      	movs	r3, #7
   15622:	930d      	str	r3, [sp, #52]	; 0x34
   15624:	2301      	movs	r3, #1
   15626:	930c      	str	r3, [sp, #48]	; 0x30
   15628:	4623      	mov	r3, r4
   1562a:	4619      	mov	r1, r3
   1562c:	483d      	ldr	r0, [pc, #244]	; (15724 <Ssp::SetClock(bool, bool, unsigned char, unsigned char)+0x1e4>)
   1562e:	f7fd fb57 	bl	12ce0 <__cyg_profile_func_enter>
  constexpr UnsignedT kFieldOfOnes = GenerateFieldOfOnes<T>();
   15632:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   15636:	930b      	str	r3, [sp, #44]	; 0x2c
  constexpr size_t kTargetWidth     = sizeof(T) * 8;
   15638:	2320      	movs	r3, #32
   1563a:	930a      	str	r3, [sp, #40]	; 0x28
  UnsignedT mask   = kFieldOfOnes >> (kTargetWidth - width);
   1563c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1563e:	f1c3 0320 	rsb	r3, r3, #32
   15642:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   15646:	fa22 f303 	lsr.w	r3, r2, r3
   1564a:	9309      	str	r3, [sp, #36]	; 0x24
  target &= ~(mask << position);
   1564c:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1564e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   15650:	fa02 f303 	lsl.w	r3, r2, r3
   15654:	43db      	mvns	r3, r3
   15656:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   15658:	4013      	ands	r3, r2
   1565a:	930f      	str	r3, [sp, #60]	; 0x3c
  target |= (value & mask) << position;
   1565c:	f89d 203b 	ldrb.w	r2, [sp, #59]	; 0x3b
   15660:	9b09      	ldr	r3, [sp, #36]	; 0x24
   15662:	401a      	ands	r2, r3
   15664:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   15666:	fa02 f303 	lsl.w	r3, r2, r3
   1566a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   1566c:	4313      	orrs	r3, r2
   1566e:	930f      	str	r3, [sp, #60]	; 0x3c
  return target;
   15670:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
   15672:	4623      	mov	r3, r4
   15674:	4619      	mov	r1, r3
   15676:	482b      	ldr	r0, [pc, #172]	; (15724 <Ssp::SetClock(bool, bool, unsigned char, unsigned char)+0x1e4>)
   15678:	f7fd fb46 	bl	12d08 <__cyg_profile_func_exit>
   1567c:	602e      	str	r6, [r5, #0]
    ssp_registers[pssp]->CR0 =
        bit::Insert(ssp_registers[pssp]->CR0, divider, kDividerBit, 8);
   1567e:	4a28      	ldr	r2, [pc, #160]	; (15720 <Ssp::SetClock(bool, bool, unsigned char, unsigned char)+0x1e0>)
   15680:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   15682:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15686:	681b      	ldr	r3, [r3, #0]
    ssp_registers[pssp]->CR0 =
   15688:	4925      	ldr	r1, [pc, #148]	; (15720 <Ssp::SetClock(bool, bool, unsigned char, unsigned char)+0x1e0>)
   1568a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   1568c:	f851 5022 	ldr.w	r5, [r1, r2, lsl #2]
   15690:	9316      	str	r3, [sp, #88]	; 0x58
   15692:	f89d 3001 	ldrb.w	r3, [sp, #1]
   15696:	f88d 3057 	strb.w	r3, [sp, #87]	; 0x57
   1569a:	2308      	movs	r3, #8
   1569c:	9314      	str	r3, [sp, #80]	; 0x50
   1569e:	2308      	movs	r3, #8
   156a0:	9313      	str	r3, [sp, #76]	; 0x4c
   156a2:	4623      	mov	r3, r4
   156a4:	4619      	mov	r1, r3
   156a6:	4820      	ldr	r0, [pc, #128]	; (15728 <Ssp::SetClock(bool, bool, unsigned char, unsigned char)+0x1e8>)
   156a8:	f7fd fb1a 	bl	12ce0 <__cyg_profile_func_enter>
  constexpr UnsignedT kFieldOfOnes = GenerateFieldOfOnes<T>();
   156ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   156b0:	9312      	str	r3, [sp, #72]	; 0x48
  constexpr size_t kTargetWidth     = sizeof(T) * 8;
   156b2:	2320      	movs	r3, #32
   156b4:	9311      	str	r3, [sp, #68]	; 0x44
  UnsignedT mask   = kFieldOfOnes >> (kTargetWidth - width);
   156b6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   156b8:	f1c3 0320 	rsb	r3, r3, #32
   156bc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   156c0:	fa22 f303 	lsr.w	r3, r2, r3
   156c4:	9310      	str	r3, [sp, #64]	; 0x40
  target &= ~(mask << position);
   156c6:	9a10      	ldr	r2, [sp, #64]	; 0x40
   156c8:	9b14      	ldr	r3, [sp, #80]	; 0x50
   156ca:	fa02 f303 	lsl.w	r3, r2, r3
   156ce:	43db      	mvns	r3, r3
   156d0:	9a16      	ldr	r2, [sp, #88]	; 0x58
   156d2:	4013      	ands	r3, r2
   156d4:	9316      	str	r3, [sp, #88]	; 0x58
  target |= (value & mask) << position;
   156d6:	f89d 2057 	ldrb.w	r2, [sp, #87]	; 0x57
   156da:	9b10      	ldr	r3, [sp, #64]	; 0x40
   156dc:	401a      	ands	r2, r3
   156de:	9b14      	ldr	r3, [sp, #80]	; 0x50
   156e0:	fa02 f303 	lsl.w	r3, r2, r3
   156e4:	9a16      	ldr	r2, [sp, #88]	; 0x58
   156e6:	4313      	orrs	r3, r2
   156e8:	9316      	str	r3, [sp, #88]	; 0x58
  return target;
   156ea:	9e16      	ldr	r6, [sp, #88]	; 0x58
   156ec:	4623      	mov	r3, r4
   156ee:	4619      	mov	r1, r3
   156f0:	480d      	ldr	r0, [pc, #52]	; (15728 <Ssp::SetClock(bool, bool, unsigned char, unsigned char)+0x1e8>)
   156f2:	f7fd fb09 	bl	12d08 <__cyg_profile_func_exit>
   156f6:	602e      	str	r6, [r5, #0]
    ssp_registers[pssp]->CPSR = prescaler;
   156f8:	4a09      	ldr	r2, [pc, #36]	; (15720 <Ssp::SetClock(bool, bool, unsigned char, unsigned char)+0x1e0>)
   156fa:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   156fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15700:	f89d 2070 	ldrb.w	r2, [sp, #112]	; 0x70
   15704:	611a      	str	r2, [r3, #16]
   15706:	4623      	mov	r3, r4
   15708:	4619      	mov	r1, r3
   1570a:	4803      	ldr	r0, [pc, #12]	; (15718 <Ssp::SetClock(bool, bool, unsigned char, unsigned char)+0x1d8>)
   1570c:	f7fd fafc 	bl	12d08 <__cyg_profile_func_exit>
  }
   15710:	bf00      	nop
   15712:	b018      	add	sp, #96	; 0x60
   15714:	bd70      	pop	{r4, r5, r6, pc}
   15716:	bf00      	nop
   15718:	00015541 	.word	0x00015541
   1571c:	00018be4 	.word	0x00018be4
   15720:	100001c8 	.word	0x100001c8
   15724:	00016d75 	.word	0x00016d75
   15728:	00016cad 	.word	0x00016cad

0001572c <Ssp::GetClock()>:
  ///   0000_0000 0000_0x0x xxxx_xxxx xxxx_xxxx
  ///       polarity    = 1-bit @ bit 18
  ///       phase       = 1-bit @ bit 16
  ///       divider     = 8-bits @ bit 8
  ///       prescaler   = 8-bits @ bit 0
  uint32_t GetClock() override
   1572c:	b570      	push	{r4, r5, r6, lr}
   1572e:	b094      	sub	sp, #80	; 0x50
   15730:	4674      	mov	r4, lr
   15732:	9001      	str	r0, [sp, #4]
   15734:	4623      	mov	r3, r4
   15736:	4619      	mov	r1, r3
   15738:	4858      	ldr	r0, [pc, #352]	; (1589c <Ssp::GetClock()+0x170>)
   1573a:	f7fd fad1 	bl	12ce0 <__cyg_profile_func_enter>
  {
    uint32_t return_val = 0;
   1573e:	2300      	movs	r3, #0
   15740:	9313      	str	r3, [sp, #76]	; 0x4c
    uint32_t pssp       = util::Value(pssp_);
   15742:	9b01      	ldr	r3, [sp, #4]
   15744:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   15746:	4618      	mov	r0, r3
   15748:	f7ff fb02 	bl	14d50 <int util::Value<Ssp::Peripheral, int>(Ssp::Peripheral)>
   1574c:	4603      	mov	r3, r0
   1574e:	9312      	str	r3, [sp, #72]	; 0x48
    // TODO(#371): Find a better alternative to powering up the peripheral for
    // every method.
    Ssp::PowerUpPeripheral(Ssp::kPowerBit[pssp]);
   15750:	9b01      	ldr	r3, [sp, #4]
   15752:	1d18      	adds	r0, r3, #4
   15754:	9b12      	ldr	r3, [sp, #72]	; 0x48
   15756:	009b      	lsls	r3, r3, #2
   15758:	4a51      	ldr	r2, [pc, #324]	; (158a0 <Ssp::GetClock()+0x174>)
   1575a:	4413      	add	r3, r2
   1575c:	4619      	mov	r1, r3
   1575e:	f7fb f9db 	bl	10b18 <Lpc40xxSystemController::PowerUpPeripheral(SystemControllerInterface::PeripheralID const&)>

    return_val =
        (bit::Extract(ssp_registers[pssp]->CPSR, kPrescalerBit, 8)) +
   15762:	4a50      	ldr	r2, [pc, #320]	; (158a4 <Ssp::GetClock()+0x178>)
   15764:	9b12      	ldr	r3, [sp, #72]	; 0x48
   15766:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1576a:	691b      	ldr	r3, [r3, #16]
   1576c:	9307      	str	r3, [sp, #28]
   1576e:	2300      	movs	r3, #0
   15770:	9306      	str	r3, [sp, #24]
   15772:	2308      	movs	r3, #8
   15774:	9305      	str	r3, [sp, #20]
   15776:	4623      	mov	r3, r4
   15778:	4619      	mov	r1, r3
   1577a:	484b      	ldr	r0, [pc, #300]	; (158a8 <Ssp::GetClock()+0x17c>)
   1577c:	f7fd fab0 	bl	12ce0 <__cyg_profile_func_enter>
  constexpr UnsignedT kFieldOfOnes = GenerateFieldOfOnes<T>();
   15780:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   15784:	9304      	str	r3, [sp, #16]
  constexpr size_t kTargetWidth     = sizeof(T) * 8;
   15786:	2320      	movs	r3, #32
   15788:	9303      	str	r3, [sp, #12]
  UnsignedT mask   = kFieldOfOnes >> (kTargetWidth - width);
   1578a:	9b05      	ldr	r3, [sp, #20]
   1578c:	f1c3 0320 	rsb	r3, r3, #32
   15790:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   15794:	fa22 f303 	lsr.w	r3, r2, r3
   15798:	9302      	str	r3, [sp, #8]
  return (target >> position) & mask;
   1579a:	9a07      	ldr	r2, [sp, #28]
   1579c:	9b06      	ldr	r3, [sp, #24]
   1579e:	40da      	lsrs	r2, r3
   157a0:	9b02      	ldr	r3, [sp, #8]
   157a2:	ea02 0503 	and.w	r5, r2, r3
   157a6:	4623      	mov	r3, r4
   157a8:	4619      	mov	r1, r3
   157aa:	483f      	ldr	r0, [pc, #252]	; (158a8 <Ssp::GetClock()+0x17c>)
   157ac:	f7fd faac 	bl	12d08 <__cyg_profile_func_exit>
        ((bit::Extract(ssp_registers[pssp]->CR0, kDividerBit, 8)) << 8) +
   157b0:	4a3c      	ldr	r2, [pc, #240]	; (158a4 <Ssp::GetClock()+0x178>)
   157b2:	9b12      	ldr	r3, [sp, #72]	; 0x48
   157b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   157b8:	681b      	ldr	r3, [r3, #0]
   157ba:	930d      	str	r3, [sp, #52]	; 0x34
   157bc:	2308      	movs	r3, #8
   157be:	930c      	str	r3, [sp, #48]	; 0x30
   157c0:	2308      	movs	r3, #8
   157c2:	930b      	str	r3, [sp, #44]	; 0x2c
   157c4:	4623      	mov	r3, r4
   157c6:	4619      	mov	r1, r3
   157c8:	4837      	ldr	r0, [pc, #220]	; (158a8 <Ssp::GetClock()+0x17c>)
   157ca:	f7fd fa89 	bl	12ce0 <__cyg_profile_func_enter>
  constexpr UnsignedT kFieldOfOnes = GenerateFieldOfOnes<T>();
   157ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   157d2:	930a      	str	r3, [sp, #40]	; 0x28
  constexpr size_t kTargetWidth     = sizeof(T) * 8;
   157d4:	2320      	movs	r3, #32
   157d6:	9309      	str	r3, [sp, #36]	; 0x24
  UnsignedT mask   = kFieldOfOnes >> (kTargetWidth - width);
   157d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   157da:	f1c3 0320 	rsb	r3, r3, #32
   157de:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   157e2:	fa22 f303 	lsr.w	r3, r2, r3
   157e6:	9308      	str	r3, [sp, #32]
  return (target >> position) & mask;
   157e8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   157ea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   157ec:	40da      	lsrs	r2, r3
   157ee:	9b08      	ldr	r3, [sp, #32]
   157f0:	ea02 0603 	and.w	r6, r2, r3
   157f4:	4623      	mov	r3, r4
   157f6:	4619      	mov	r1, r3
   157f8:	482b      	ldr	r0, [pc, #172]	; (158a8 <Ssp::GetClock()+0x17c>)
   157fa:	f7fd fa85 	bl	12d08 <__cyg_profile_func_exit>
   157fe:	0233      	lsls	r3, r6, #8
        (bit::Extract(ssp_registers[pssp]->CPSR, kPrescalerBit, 8)) +
   15800:	441d      	add	r5, r3
        ((bit::Read(ssp_registers[pssp]->CR0, kPhaseBit)) << 16) +
   15802:	4a28      	ldr	r2, [pc, #160]	; (158a4 <Ssp::GetClock()+0x178>)
   15804:	9b12      	ldr	r3, [sp, #72]	; 0x48
   15806:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1580a:	681b      	ldr	r3, [r3, #0]
   1580c:	930f      	str	r3, [sp, #60]	; 0x3c
   1580e:	2307      	movs	r3, #7
   15810:	930e      	str	r3, [sp, #56]	; 0x38
   15812:	4623      	mov	r3, r4
   15814:	4619      	mov	r1, r3
   15816:	4825      	ldr	r0, [pc, #148]	; (158ac <Ssp::GetClock()+0x180>)
   15818:	f7fd fa62 	bl	12ce0 <__cyg_profile_func_enter>
  return static_cast<bool>(target & (1 << position));
   1581c:	2201      	movs	r2, #1
   1581e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   15820:	fa02 f303 	lsl.w	r3, r2, r3
   15824:	461a      	mov	r2, r3
   15826:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   15828:	4013      	ands	r3, r2
   1582a:	2b00      	cmp	r3, #0
   1582c:	bf14      	ite	ne
   1582e:	2301      	movne	r3, #1
   15830:	2300      	moveq	r3, #0
   15832:	b2de      	uxtb	r6, r3
   15834:	4623      	mov	r3, r4
   15836:	4619      	mov	r1, r3
   15838:	481c      	ldr	r0, [pc, #112]	; (158ac <Ssp::GetClock()+0x180>)
   1583a:	f7fd fa65 	bl	12d08 <__cyg_profile_func_exit>
   1583e:	4633      	mov	r3, r6
   15840:	041b      	lsls	r3, r3, #16
        ((bit::Extract(ssp_registers[pssp]->CR0, kDividerBit, 8)) << 8) +
   15842:	441d      	add	r5, r3
        ((bit::Read(ssp_registers[pssp]->CR0, kPolarityBit)) << 18);
   15844:	4a17      	ldr	r2, [pc, #92]	; (158a4 <Ssp::GetClock()+0x178>)
   15846:	9b12      	ldr	r3, [sp, #72]	; 0x48
   15848:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1584c:	681b      	ldr	r3, [r3, #0]
   1584e:	9311      	str	r3, [sp, #68]	; 0x44
   15850:	2306      	movs	r3, #6
   15852:	9310      	str	r3, [sp, #64]	; 0x40
   15854:	4623      	mov	r3, r4
   15856:	4619      	mov	r1, r3
   15858:	4814      	ldr	r0, [pc, #80]	; (158ac <Ssp::GetClock()+0x180>)
   1585a:	f7fd fa41 	bl	12ce0 <__cyg_profile_func_enter>
   1585e:	2201      	movs	r2, #1
   15860:	9b10      	ldr	r3, [sp, #64]	; 0x40
   15862:	fa02 f303 	lsl.w	r3, r2, r3
   15866:	461a      	mov	r2, r3
   15868:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1586a:	4013      	ands	r3, r2
   1586c:	2b00      	cmp	r3, #0
   1586e:	bf14      	ite	ne
   15870:	2301      	movne	r3, #1
   15872:	2300      	moveq	r3, #0
   15874:	b2de      	uxtb	r6, r3
   15876:	4623      	mov	r3, r4
   15878:	4619      	mov	r1, r3
   1587a:	480c      	ldr	r0, [pc, #48]	; (158ac <Ssp::GetClock()+0x180>)
   1587c:	f7fd fa44 	bl	12d08 <__cyg_profile_func_exit>
   15880:	4633      	mov	r3, r6
   15882:	049b      	lsls	r3, r3, #18
    return_val =
   15884:	442b      	add	r3, r5
   15886:	9313      	str	r3, [sp, #76]	; 0x4c

    return return_val;
   15888:	9d13      	ldr	r5, [sp, #76]	; 0x4c
   1588a:	4623      	mov	r3, r4
   1588c:	4619      	mov	r1, r3
   1588e:	4803      	ldr	r0, [pc, #12]	; (1589c <Ssp::GetClock()+0x170>)
   15890:	f7fd fa3a 	bl	12d08 <__cyg_profile_func_exit>
   15894:	462b      	mov	r3, r5
  }
   15896:	4618      	mov	r0, r3
   15898:	b014      	add	sp, #80	; 0x50
   1589a:	bd70      	pop	{r4, r5, r6, pc}
   1589c:	0001572d 	.word	0x0001572d
   158a0:	00018be4 	.word	0x00018be4
   158a4:	100001c8 	.word	0x100001c8
   158a8:	00016d21 	.word	0x00016d21
   158ac:	00016c69 	.word	0x00016c69

000158b0 <SdInterface::SdInterface()>:
// NOLINTNEXTLINE(readability-identifier-naming)
// Relevant Datasheet:
// https://www.sdcard.org/downloads/pls/pdf/index.php?p=Part1_Physical_Layer_Simplified_Specification_Ver6.00.jpg&f=Part1_Physical_Layer_Simplified_Specification_Ver6.00.pdf&e=EN_SS1
// TODO(#348):  Write a class to represent a single Sd Card Block to make use
//              of block-related functions easier.
class SdInterface
   158b0:	b530      	push	{r4, r5, lr}
   158b2:	b083      	sub	sp, #12
   158b4:	4675      	mov	r5, lr
   158b6:	9001      	str	r0, [sp, #4]
   158b8:	462b      	mov	r3, r5
   158ba:	4619      	mov	r1, r3
   158bc:	4807      	ldr	r0, [pc, #28]	; (158dc <SdInterface::SdInterface()+0x2c>)
   158be:	f7fd fa0f 	bl	12ce0 <__cyg_profile_func_enter>
   158c2:	4a07      	ldr	r2, [pc, #28]	; (158e0 <SdInterface::SdInterface()+0x30>)
   158c4:	9b01      	ldr	r3, [sp, #4]
   158c6:	601a      	str	r2, [r3, #0]
   158c8:	9c01      	ldr	r4, [sp, #4]
   158ca:	462b      	mov	r3, r5
   158cc:	4619      	mov	r1, r3
   158ce:	4803      	ldr	r0, [pc, #12]	; (158dc <SdInterface::SdInterface()+0x2c>)
   158d0:	f7fd fa1a 	bl	12d08 <__cyg_profile_func_exit>
   158d4:	4623      	mov	r3, r4
   158d6:	4618      	mov	r0, r3
   158d8:	b003      	add	sp, #12
   158da:	bd30      	pop	{r4, r5, pc}
   158dc:	000158b1 	.word	0x000158b1
   158e0:	00018fbc 	.word	0x00018fbc

000158e4 <Sd::Sd(Sd::DebugSdCard_t, unsigned char, unsigned char, unsigned char, unsigned char)>:
  /// port that is broken out through the board's GPIO, allowing you to probe
  /// the chip select manually. To use this version instead of the main version,
  /// instantiate an Sd card instance like so:
  ///
  ///   Sd sdcard(Sd::DebugSdCard_t{});
  constexpr Sd(DebugSdCard_t, uint8_t port = 1, uint8_t pin = 8,
   158e4:	b530      	push	{r4, r5, lr}
   158e6:	b083      	sub	sp, #12
   158e8:	4675      	mov	r5, lr
   158ea:	9001      	str	r0, [sp, #4]
   158ec:	f88d 1000 	strb.w	r1, [sp]
   158f0:	4611      	mov	r1, r2
   158f2:	461a      	mov	r2, r3
   158f4:	460b      	mov	r3, r1
   158f6:	f88d 3003 	strb.w	r3, [sp, #3]
   158fa:	4613      	mov	r3, r2
   158fc:	f88d 3002 	strb.w	r3, [sp, #2]
   15900:	462b      	mov	r3, r5
   15902:	4619      	mov	r1, r3
   15904:	481d      	ldr	r0, [pc, #116]	; (1597c <Sd::Sd(Sd::DebugSdCard_t, unsigned char, unsigned char, unsigned char, unsigned char)+0x98>)
   15906:	f7fd f9eb 	bl	12ce0 <__cyg_profile_func_enter>
      : ssp_interface_(&ssp_),
        ssp_(Ssp::Peripheral::kSsp2),
        chip_select_(&chip_select_pin_),
        chip_select_external_(&chip_select_external_pin_),
        chip_select_pin_(port, pin),
        chip_select_external_pin_(extport, extpin)
   1590a:	9b01      	ldr	r3, [sp, #4]
   1590c:	4618      	mov	r0, r3
   1590e:	f7ff ffcf 	bl	158b0 <SdInterface::SdInterface()>
   15912:	4a1b      	ldr	r2, [pc, #108]	; (15980 <Sd::Sd(Sd::DebugSdCard_t, unsigned char, unsigned char, unsigned char, unsigned char)+0x9c>)
   15914:	9b01      	ldr	r3, [sp, #4]
   15916:	601a      	str	r2, [r3, #0]
   15918:	9b01      	ldr	r3, [sp, #4]
   1591a:	f103 0208 	add.w	r2, r3, #8
   1591e:	9b01      	ldr	r3, [sp, #4]
   15920:	605a      	str	r2, [r3, #4]
   15922:	9b01      	ldr	r3, [sp, #4]
   15924:	3308      	adds	r3, #8
   15926:	2102      	movs	r1, #2
   15928:	4618      	mov	r0, r3
   1592a:	f7ff fa87 	bl	14e3c <Ssp::Ssp(Ssp::Peripheral)>
   1592e:	9b01      	ldr	r3, [sp, #4]
   15930:	f103 0240 	add.w	r2, r3, #64	; 0x40
   15934:	9b01      	ldr	r3, [sp, #4]
   15936:	639a      	str	r2, [r3, #56]	; 0x38
   15938:	9b01      	ldr	r3, [sp, #4]
   1593a:	f103 0254 	add.w	r2, r3, #84	; 0x54
   1593e:	9b01      	ldr	r3, [sp, #4]
   15940:	63da      	str	r2, [r3, #60]	; 0x3c
   15942:	9b01      	ldr	r3, [sp, #4]
   15944:	3340      	adds	r3, #64	; 0x40
   15946:	f89d 2002 	ldrb.w	r2, [sp, #2]
   1594a:	f89d 1003 	ldrb.w	r1, [sp, #3]
   1594e:	4618      	mov	r0, r3
   15950:	f7fe fd4c 	bl	143ec <Gpio::Gpio(unsigned char, unsigned char)>
   15954:	9b01      	ldr	r3, [sp, #4]
   15956:	3354      	adds	r3, #84	; 0x54
   15958:	f89d 201c 	ldrb.w	r2, [sp, #28]
   1595c:	f89d 1018 	ldrb.w	r1, [sp, #24]
   15960:	4618      	mov	r0, r3
   15962:	f7fe fd43 	bl	143ec <Gpio::Gpio(unsigned char, unsigned char)>
  {
  }
   15966:	9c01      	ldr	r4, [sp, #4]
   15968:	462b      	mov	r3, r5
   1596a:	4619      	mov	r1, r3
   1596c:	4803      	ldr	r0, [pc, #12]	; (1597c <Sd::Sd(Sd::DebugSdCard_t, unsigned char, unsigned char, unsigned char, unsigned char)+0x98>)
   1596e:	f7fd f9cb 	bl	12d08 <__cyg_profile_func_exit>
   15972:	4623      	mov	r3, r4
   15974:	4618      	mov	r0, r3
   15976:	b003      	add	sp, #12
   15978:	bd30      	pop	{r4, r5, pc}
   1597a:	bf00      	nop
   1597c:	000158e5 	.word	0x000158e5
   15980:	00018f90 	.word	0x00018f90

00015984 <Sd::Initialize()>:

  void Initialize() override
   15984:	b530      	push	{r4, r5, lr}
   15986:	b085      	sub	sp, #20
   15988:	4675      	mov	r5, lr
   1598a:	9003      	str	r0, [sp, #12]
   1598c:	462b      	mov	r3, r5
   1598e:	4619      	mov	r1, r3
   15990:	4827      	ldr	r0, [pc, #156]	; (15a30 <Sd::Initialize()+0xac>)
   15992:	f7fd f9a5 	bl	12ce0 <__cyg_profile_func_enter>
  {
    LOG_DEBUG("Begin initialization:");
    LOG_DEBUG("Setting CS as output...");
    chip_select_->SetAsOutput();
   15996:	9b03      	ldr	r3, [sp, #12]
   15998:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1599a:	9b03      	ldr	r3, [sp, #12]
   1599c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1599e:	681b      	ldr	r3, [r3, #0]
   159a0:	3304      	adds	r3, #4
   159a2:	681b      	ldr	r3, [r3, #0]
   159a4:	4610      	mov	r0, r2
   159a6:	4798      	blx	r3
    chip_select_->SetHigh();
   159a8:	9b03      	ldr	r3, [sp, #12]
   159aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   159ac:	9b03      	ldr	r3, [sp, #12]
   159ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   159b0:	681b      	ldr	r3, [r3, #0]
   159b2:	330c      	adds	r3, #12
   159b4:	681b      	ldr	r3, [r3, #0]
   159b6:	4610      	mov	r0, r2
   159b8:	4798      	blx	r3
    chip_select_external_->SetAsOutput();
   159ba:	9b03      	ldr	r3, [sp, #12]
   159bc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
   159be:	9b03      	ldr	r3, [sp, #12]
   159c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   159c2:	681b      	ldr	r3, [r3, #0]
   159c4:	3304      	adds	r3, #4
   159c6:	681b      	ldr	r3, [r3, #0]
   159c8:	4610      	mov	r0, r2
   159ca:	4798      	blx	r3
    chip_select_external_->SetHigh();
   159cc:	9b03      	ldr	r3, [sp, #12]
   159ce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
   159d0:	9b03      	ldr	r3, [sp, #12]
   159d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   159d4:	681b      	ldr	r3, [r3, #0]
   159d6:	330c      	adds	r3, #12
   159d8:	681b      	ldr	r3, [r3, #0]
   159da:	4610      	mov	r0, r2
   159dc:	4798      	blx	r3

    LOG_DEBUG("Setting SSP Clock Speed...");
    ssp_interface_->SetClock(false, false, 14, 2);  // 400kHz
   159de:	9b03      	ldr	r3, [sp, #12]
   159e0:	6858      	ldr	r0, [r3, #4]
   159e2:	9b03      	ldr	r3, [sp, #12]
   159e4:	685b      	ldr	r3, [r3, #4]
   159e6:	681b      	ldr	r3, [r3, #0]
   159e8:	3318      	adds	r3, #24
   159ea:	681c      	ldr	r4, [r3, #0]
   159ec:	2302      	movs	r3, #2
   159ee:	9300      	str	r3, [sp, #0]
   159f0:	230e      	movs	r3, #14
   159f2:	2200      	movs	r2, #0
   159f4:	2100      	movs	r1, #0
   159f6:	47a0      	blx	r4

    LOG_DEBUG("Setting Peripheral Mode...");
    ssp_interface_->SetPeripheralMode(Ssp::MasterSlaveMode::kMaster,
   159f8:	9b03      	ldr	r3, [sp, #12]
   159fa:	6858      	ldr	r0, [r3, #4]
   159fc:	9b03      	ldr	r3, [sp, #12]
   159fe:	685b      	ldr	r3, [r3, #4]
                                      Ssp::FrameMode::kSpi,
                                      Ssp::DataSize::kEight);
   15a00:	681b      	ldr	r3, [r3, #0]
   15a02:	3310      	adds	r3, #16
   15a04:	681c      	ldr	r4, [r3, #0]
    ssp_interface_->SetPeripheralMode(Ssp::MasterSlaveMode::kMaster,
   15a06:	2307      	movs	r3, #7
   15a08:	2200      	movs	r2, #0
   15a0a:	2100      	movs	r1, #0
   15a0c:	47a0      	blx	r4

    LOG_DEBUG("Starting SSP Peripheral...");
    ssp_interface_->Initialize();
   15a0e:	9b03      	ldr	r3, [sp, #12]
   15a10:	685a      	ldr	r2, [r3, #4]
   15a12:	9b03      	ldr	r3, [sp, #12]
   15a14:	685b      	ldr	r3, [r3, #4]
   15a16:	681b      	ldr	r3, [r3, #0]
   15a18:	681b      	ldr	r3, [r3, #0]
   15a1a:	4610      	mov	r0, r2
   15a1c:	4798      	blx	r3
   15a1e:	462b      	mov	r3, r5
   15a20:	4619      	mov	r1, r3
   15a22:	4803      	ldr	r0, [pc, #12]	; (15a30 <Sd::Initialize()+0xac>)
   15a24:	f7fd f970 	bl	12d08 <__cyg_profile_func_exit>
  }
   15a28:	bf00      	nop
   15a2a:	b005      	add	sp, #20
   15a2c:	bd30      	pop	{r4, r5, pc}
   15a2e:	bf00      	nop
   15a30:	00015985 	.word	0x00015985

00015a34 <Sd::Mount(SdInterface::CardInfo_t*)>:

  // Initialize SD Card
  // TODO(#349): Split method into smaller piece with single jobs
  bool Mount(CardInfo_t * sd) override
   15a34:	b530      	push	{r4, r5, lr}
   15a36:	b08b      	sub	sp, #44	; 0x2c
   15a38:	4675      	mov	r5, lr
   15a3a:	9003      	str	r0, [sp, #12]
   15a3c:	9102      	str	r1, [sp, #8]
   15a3e:	462b      	mov	r3, r5
   15a40:	4619      	mov	r1, r3
   15a42:	48a7      	ldr	r0, [pc, #668]	; (15ce0 <Sd::Mount(SdInterface::CardInfo_t*)+0x2ac>)
   15a44:	f7fd f94c 	bl	12ce0 <__cyg_profile_func_enter>
  {
    uint8_t tries     = 0;
   15a48:	2300      	movs	r3, #0
   15a4a:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    bool card_is_idle = false;
   15a4e:	2300      	movs	r3, #0
   15a50:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26

    // Reset the card and force it to go to idle state at <400kHz with a
    // CMD0 + (active-low) CS
    LOG_DEBUG("Sending SD Card to Idle State...");
    sd->response.length = SendCmd(Command::kReset, 0x00000000,
                                  sd->response.data.byte, 100, KeepAlive::kYes);
   15a54:	9b03      	ldr	r3, [sp, #12]
   15a56:	681b      	ldr	r3, [r3, #0]
   15a58:	681c      	ldr	r4, [r3, #0]
    sd->response.length = SendCmd(Command::kReset, 0x00000000,
   15a5a:	9b02      	ldr	r3, [sp, #8]
   15a5c:	f103 0208 	add.w	r2, r3, #8
   15a60:	2301      	movs	r3, #1
   15a62:	9301      	str	r3, [sp, #4]
   15a64:	2364      	movs	r3, #100	; 0x64
   15a66:	9300      	str	r3, [sp, #0]
   15a68:	4613      	mov	r3, r2
   15a6a:	2200      	movs	r2, #0
   15a6c:	2140      	movs	r1, #64	; 0x40
   15a6e:	9803      	ldr	r0, [sp, #12]
   15a70:	47a0      	blx	r4
   15a72:	4602      	mov	r2, r0
   15a74:	9b02      	ldr	r3, [sp, #8]
   15a76:	611a      	str	r2, [r3, #16]

    // Reset the card again to trigger SPI mode
    LOG_DEBUG("Initializing SPI mode...");
    do
    {
      tries++;
   15a78:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   15a7c:	3301      	adds	r3, #1
   15a7e:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
      sd->response.length = SendCmd(
          Command::kReset, 0x00, sd->response.data.byte, 100, KeepAlive::kYes);
   15a82:	9b03      	ldr	r3, [sp, #12]
   15a84:	681b      	ldr	r3, [r3, #0]
   15a86:	681c      	ldr	r4, [r3, #0]
      sd->response.length = SendCmd(
   15a88:	9b02      	ldr	r3, [sp, #8]
   15a8a:	f103 0208 	add.w	r2, r3, #8
   15a8e:	2301      	movs	r3, #1
   15a90:	9301      	str	r3, [sp, #4]
   15a92:	2364      	movs	r3, #100	; 0x64
   15a94:	9300      	str	r3, [sp, #0]
   15a96:	4613      	mov	r3, r2
   15a98:	2200      	movs	r2, #0
   15a9a:	2140      	movs	r1, #64	; 0x40
   15a9c:	9803      	ldr	r0, [sp, #12]
   15a9e:	47a0      	blx	r4
   15aa0:	4602      	mov	r2, r0
   15aa2:	9b02      	ldr	r3, [sp, #8]
   15aa4:	611a      	str	r2, [r3, #16]

      // Check if R1 response frame's bit 1 is set (to ensure that
      // card is in idle state)
      if (sd->response.data.byte[0] != 0xFF &&
   15aa6:	9b02      	ldr	r3, [sp, #8]
   15aa8:	7a1b      	ldrb	r3, [r3, #8]
   15aaa:	2bff      	cmp	r3, #255	; 0xff
   15aac:	d008      	beq.n	15ac0 <Sd::Mount(SdInterface::CardInfo_t*)+0x8c>
          (sd->response.data.byte[0] & 0x01) == 0x01)
   15aae:	9b02      	ldr	r3, [sp, #8]
   15ab0:	7a1b      	ldrb	r3, [r3, #8]
   15ab2:	f003 0301 	and.w	r3, r3, #1
      if (sd->response.data.byte[0] != 0xFF &&
   15ab6:	2b00      	cmp	r3, #0
   15ab8:	d002      	beq.n	15ac0 <Sd::Mount(SdInterface::CardInfo_t*)+0x8c>
      {
        // If it is, we can move on; otherwise, keep trying for a set
        // amount of tries
        card_is_idle = true;
   15aba:	2301      	movs	r3, #1
   15abc:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
      }
      Delay(10);
   15ac0:	f04f 000a 	mov.w	r0, #10
   15ac4:	f04f 0100 	mov.w	r1, #0
   15ac8:	f7fe fc5e 	bl	14388 <Delay(unsigned long long)>
    } while (tries < kBusTimeout && !card_is_idle);
   15acc:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   15ad0:	2bf9      	cmp	r3, #249	; 0xf9
   15ad2:	d804      	bhi.n	15ade <Sd::Mount(SdInterface::CardInfo_t*)+0xaa>
   15ad4:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
   15ad8:	2b00      	cmp	r3, #0
   15ada:	d100      	bne.n	15ade <Sd::Mount(SdInterface::CardInfo_t*)+0xaa>
    do
   15adc:	e7cc      	b.n	15a78 <Sd::Mount(SdInterface::CardInfo_t*)+0x44>
    LOG_DEBUG("%d tries", tries);
    if (tries >= kBusTimeout)
   15ade:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   15ae2:	2bf9      	cmp	r3, #249	; 0xf9
   15ae4:	d91b      	bls.n	15b1e <Sd::Mount(SdInterface::CardInfo_t*)+0xea>
    {
      LOG_ERROR("Failed to initiate SPI mode within timeout. Aborting!");
   15ae6:	f240 13ff 	movw	r3, #511	; 0x1ff
   15aea:	4a7e      	ldr	r2, [pc, #504]	; (15ce4 <Sd::Mount(SdInterface::CardInfo_t*)+0x2b0>)
   15aec:	497e      	ldr	r1, [pc, #504]	; (15ce8 <Sd::Mount(SdInterface::CardInfo_t*)+0x2b4>)
   15aee:	487f      	ldr	r0, [pc, #508]	; (15cec <Sd::Mount(SdInterface::CardInfo_t*)+0x2b8>)
   15af0:	f7fe fb50 	bl	14194 <printf>
      sd->response.length = SendCmd(Command::kGarbage, 0xFFFFFFFF,
                                    sd->response.data.byte, 0, KeepAlive::kNo);
   15af4:	9b03      	ldr	r3, [sp, #12]
   15af6:	681b      	ldr	r3, [r3, #0]
   15af8:	681c      	ldr	r4, [r3, #0]
      sd->response.length = SendCmd(Command::kGarbage, 0xFFFFFFFF,
   15afa:	9b02      	ldr	r3, [sp, #8]
   15afc:	f103 0208 	add.w	r2, r3, #8
   15b00:	2300      	movs	r3, #0
   15b02:	9301      	str	r3, [sp, #4]
   15b04:	2300      	movs	r3, #0
   15b06:	9300      	str	r3, [sp, #0]
   15b08:	4613      	mov	r3, r2
   15b0a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   15b0e:	21ff      	movs	r1, #255	; 0xff
   15b10:	9803      	ldr	r0, [sp, #12]
   15b12:	47a0      	blx	r4
   15b14:	4602      	mov	r2, r0
   15b16:	9b02      	ldr	r3, [sp, #8]
   15b18:	611a      	str	r2, [r3, #16]
      return false;
   15b1a:	2400      	movs	r4, #0
   15b1c:	e10c      	b.n	15d38 <Sd::Mount(SdInterface::CardInfo_t*)+0x304>
    }

    // Send the host's supported voltage (3.3V) and ask if the card
    // supports it
    LOG_DEBUG("Checking Current SD Card Voltage Level...");
    constexpr uint8_t kCheckPattern = 0xAB;
   15b1e:	23ab      	movs	r3, #171	; 0xab
   15b20:	f88d 301f 	strb.w	r3, [sp, #31]
    uint64_t supported_voltage      = 0x00000001;
   15b24:	f04f 0301 	mov.w	r3, #1
   15b28:	f04f 0400 	mov.w	r4, #0
   15b2c:	e9cd 3404 	strd	r3, r4, [sp, #16]
    sd->response.length =
        SendCmd(Command::kGetOp,
                static_cast<uint32_t>((supported_voltage << 8) | kCheckPattern),
                sd->response.data.byte, 100, KeepAlive::kYes);
   15b30:	9b03      	ldr	r3, [sp, #12]
   15b32:	681b      	ldr	r3, [r3, #0]
   15b34:	681c      	ldr	r4, [r3, #0]
                static_cast<uint32_t>((supported_voltage << 8) | kCheckPattern),
   15b36:	9b04      	ldr	r3, [sp, #16]
   15b38:	021b      	lsls	r3, r3, #8
        SendCmd(Command::kGetOp,
   15b3a:	f043 02ab 	orr.w	r2, r3, #171	; 0xab
   15b3e:	9b02      	ldr	r3, [sp, #8]
   15b40:	f103 0108 	add.w	r1, r3, #8
   15b44:	2301      	movs	r3, #1
   15b46:	9301      	str	r3, [sp, #4]
   15b48:	2364      	movs	r3, #100	; 0x64
   15b4a:	9300      	str	r3, [sp, #0]
   15b4c:	460b      	mov	r3, r1
   15b4e:	2148      	movs	r1, #72	; 0x48
   15b50:	9803      	ldr	r0, [sp, #12]
   15b52:	47a0      	blx	r4
   15b54:	4602      	mov	r2, r0
    sd->response.length =
   15b56:	9b02      	ldr	r3, [sp, #8]
   15b58:	611a      	str	r2, [r3, #16]
    if (sd->response.data.byte[4] != kCheckPattern)
   15b5a:	9b02      	ldr	r3, [sp, #8]
   15b5c:	7b1b      	ldrb	r3, [r3, #12]
   15b5e:	2bab      	cmp	r3, #171	; 0xab
   15b60:	d01b      	beq.n	15b9a <Sd::Mount(SdInterface::CardInfo_t*)+0x166>
    {
      // If the last byte is not an exact echo of the LSB of the kGetOp
      // command's argument, this response is invalid
      LOG_ERROR("Response integrity check failed. Aborting!");
   15b62:	f240 2312 	movw	r3, #530	; 0x212
   15b66:	4a5f      	ldr	r2, [pc, #380]	; (15ce4 <Sd::Mount(SdInterface::CardInfo_t*)+0x2b0>)
   15b68:	4961      	ldr	r1, [pc, #388]	; (15cf0 <Sd::Mount(SdInterface::CardInfo_t*)+0x2bc>)
   15b6a:	4862      	ldr	r0, [pc, #392]	; (15cf4 <Sd::Mount(SdInterface::CardInfo_t*)+0x2c0>)
   15b6c:	f7fe fb12 	bl	14194 <printf>
      sd->response.length = SendCmd(Command::kGarbage, 0xFFFFFFFF,
                                    sd->response.data.byte, 0, KeepAlive::kNo);
   15b70:	9b03      	ldr	r3, [sp, #12]
   15b72:	681b      	ldr	r3, [r3, #0]
   15b74:	681c      	ldr	r4, [r3, #0]
      sd->response.length = SendCmd(Command::kGarbage, 0xFFFFFFFF,
   15b76:	9b02      	ldr	r3, [sp, #8]
   15b78:	f103 0208 	add.w	r2, r3, #8
   15b7c:	2300      	movs	r3, #0
   15b7e:	9301      	str	r3, [sp, #4]
   15b80:	2300      	movs	r3, #0
   15b82:	9300      	str	r3, [sp, #0]
   15b84:	4613      	mov	r3, r2
   15b86:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   15b8a:	21ff      	movs	r1, #255	; 0xff
   15b8c:	9803      	ldr	r0, [sp, #12]
   15b8e:	47a0      	blx	r4
   15b90:	4602      	mov	r2, r0
   15b92:	9b02      	ldr	r3, [sp, #8]
   15b94:	611a      	str	r2, [r3, #16]
      return false;
   15b96:	2400      	movs	r4, #0
   15b98:	e0ce      	b.n	15d38 <Sd::Mount(SdInterface::CardInfo_t*)+0x304>
    }
    else if (sd->response.data.byte[3] &
   15b9a:	9b02      	ldr	r3, [sp, #8]
   15b9c:	7adb      	ldrb	r3, [r3, #11]
   15b9e:	4619      	mov	r1, r3
             (supported_voltage == static_cast<uint64_t>(0x00)))
   15ba0:	9a04      	ldr	r2, [sp, #16]
   15ba2:	9b05      	ldr	r3, [sp, #20]
   15ba4:	4313      	orrs	r3, r2
   15ba6:	2b00      	cmp	r3, #0
   15ba8:	bf0c      	ite	eq
   15baa:	2301      	moveq	r3, #1
   15bac:	2300      	movne	r3, #0
   15bae:	b2db      	uxtb	r3, r3
    else if (sd->response.data.byte[3] &
   15bb0:	400b      	ands	r3, r1
   15bb2:	2b00      	cmp	r3, #0
   15bb4:	d01b      	beq.n	15bee <Sd::Mount(SdInterface::CardInfo_t*)+0x1ba>
    {
      // If the 2nd-to-last byte of the reponse AND'ed with our host
      // device's supported voltage range is 0x00, the SD card doesn't
      // support our device's operating voltage
      LOG_ERROR("Unsupported voltage in use. Aborting!");
   15bb6:	f240 231d 	movw	r3, #541	; 0x21d
   15bba:	4a4a      	ldr	r2, [pc, #296]	; (15ce4 <Sd::Mount(SdInterface::CardInfo_t*)+0x2b0>)
   15bbc:	494e      	ldr	r1, [pc, #312]	; (15cf8 <Sd::Mount(SdInterface::CardInfo_t*)+0x2c4>)
   15bbe:	484f      	ldr	r0, [pc, #316]	; (15cfc <Sd::Mount(SdInterface::CardInfo_t*)+0x2c8>)
   15bc0:	f7fe fae8 	bl	14194 <printf>
      sd->response.length = SendCmd(Command::kGarbage, 0xFFFFFFFF,
                                    sd->response.data.byte, 0, KeepAlive::kNo);
   15bc4:	9b03      	ldr	r3, [sp, #12]
   15bc6:	681b      	ldr	r3, [r3, #0]
   15bc8:	681c      	ldr	r4, [r3, #0]
      sd->response.length = SendCmd(Command::kGarbage, 0xFFFFFFFF,
   15bca:	9b02      	ldr	r3, [sp, #8]
   15bcc:	f103 0208 	add.w	r2, r3, #8
   15bd0:	2300      	movs	r3, #0
   15bd2:	9301      	str	r3, [sp, #4]
   15bd4:	2300      	movs	r3, #0
   15bd6:	9300      	str	r3, [sp, #0]
   15bd8:	4613      	mov	r3, r2
   15bda:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   15bde:	21ff      	movs	r1, #255	; 0xff
   15be0:	9803      	ldr	r0, [sp, #12]
   15be2:	47a0      	blx	r4
   15be4:	4602      	mov	r2, r0
   15be6:	9b02      	ldr	r3, [sp, #8]
   15be8:	611a      	str	r2, [r3, #16]
      return false;
   15bea:	2400      	movs	r4, #0
   15bec:	e0a4      	b.n	15d38 <Sd::Mount(SdInterface::CardInfo_t*)+0x304>
    }

    // Indicate that the host supports SDHC/SDXC and wait for card to
    // shift out of idle state
    LOG_DEBUG("Expressing High-Capacity SD Card Support...");
    tries = 0;
   15bee:	2300      	movs	r3, #0
   15bf0:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    do
    {
      // Send host's operating conditions
      sd->response.length =
          SendCmd(Command::kInit, 0x40000000, sd->response.data.byte, 100,
                  KeepAlive::kYes);
   15bf4:	9b03      	ldr	r3, [sp, #12]
   15bf6:	681b      	ldr	r3, [r3, #0]
   15bf8:	681c      	ldr	r4, [r3, #0]
          SendCmd(Command::kInit, 0x40000000, sd->response.data.byte, 100,
   15bfa:	9b02      	ldr	r3, [sp, #8]
   15bfc:	f103 0208 	add.w	r2, r3, #8
   15c00:	2301      	movs	r3, #1
   15c02:	9301      	str	r3, [sp, #4]
   15c04:	2364      	movs	r3, #100	; 0x64
   15c06:	9300      	str	r3, [sp, #0]
   15c08:	4613      	mov	r3, r2
   15c0a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   15c0e:	2141      	movs	r1, #65	; 0x41
   15c10:	9803      	ldr	r0, [sp, #12]
   15c12:	47a0      	blx	r4
   15c14:	4602      	mov	r2, r0
      sd->response.length =
   15c16:	9b02      	ldr	r3, [sp, #8]
   15c18:	611a      	str	r2, [r3, #16]
      tries++;
   15c1a:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   15c1e:	3301      	adds	r3, #1
   15c20:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    } while (tries < kBusTimeout && sd->response.data.byte[0] & 0x01);
   15c24:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   15c28:	2bf9      	cmp	r3, #249	; 0xf9
   15c2a:	d806      	bhi.n	15c3a <Sd::Mount(SdInterface::CardInfo_t*)+0x206>
   15c2c:	9b02      	ldr	r3, [sp, #8]
   15c2e:	7a1b      	ldrb	r3, [r3, #8]
   15c30:	f003 0301 	and.w	r3, r3, #1
   15c34:	2b00      	cmp	r3, #0
   15c36:	d000      	beq.n	15c3a <Sd::Mount(SdInterface::CardInfo_t*)+0x206>
    do
   15c38:	e7dc      	b.n	15bf4 <Sd::Mount(SdInterface::CardInfo_t*)+0x1c0>
    if (tries == kBusTimeout)
   15c3a:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   15c3e:	2bfa      	cmp	r3, #250	; 0xfa
   15c40:	d11b      	bne.n	15c7a <Sd::Mount(SdInterface::CardInfo_t*)+0x246>
    {
      LOG_ERROR("SD Card timed out. Aborting!");
   15c42:	f240 2331 	movw	r3, #561	; 0x231
   15c46:	4a27      	ldr	r2, [pc, #156]	; (15ce4 <Sd::Mount(SdInterface::CardInfo_t*)+0x2b0>)
   15c48:	492d      	ldr	r1, [pc, #180]	; (15d00 <Sd::Mount(SdInterface::CardInfo_t*)+0x2cc>)
   15c4a:	482e      	ldr	r0, [pc, #184]	; (15d04 <Sd::Mount(SdInterface::CardInfo_t*)+0x2d0>)
   15c4c:	f7fe faa2 	bl	14194 <printf>
      sd->response.length = SendCmd(Command::kGarbage, 0xFFFFFFFF,
                                    sd->response.data.byte, 0, KeepAlive::kNo);
   15c50:	9b03      	ldr	r3, [sp, #12]
   15c52:	681b      	ldr	r3, [r3, #0]
   15c54:	681c      	ldr	r4, [r3, #0]
      sd->response.length = SendCmd(Command::kGarbage, 0xFFFFFFFF,
   15c56:	9b02      	ldr	r3, [sp, #8]
   15c58:	f103 0208 	add.w	r2, r3, #8
   15c5c:	2300      	movs	r3, #0
   15c5e:	9301      	str	r3, [sp, #4]
   15c60:	2300      	movs	r3, #0
   15c62:	9300      	str	r3, [sp, #0]
   15c64:	4613      	mov	r3, r2
   15c66:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   15c6a:	21ff      	movs	r1, #255	; 0xff
   15c6c:	9803      	ldr	r0, [sp, #12]
   15c6e:	47a0      	blx	r4
   15c70:	4602      	mov	r2, r0
   15c72:	9b02      	ldr	r3, [sp, #8]
   15c74:	611a      	str	r2, [r3, #16]
      return false;
   15c76:	2400      	movs	r4, #0
   15c78:	e05e      	b.n	15d38 <Sd::Mount(SdInterface::CardInfo_t*)+0x304>
    // After card is ready, acquire card capacity info using kGetOcr a
    // second time
    LOG_DEBUG("Reading Card Capacity Information...");
    // Read CCS
    sd->response.length = SendCmd(Command::kGetOcr, 0x00,
                                  sd->response.data.byte, 100, KeepAlive::kYes);
   15c7a:	9b03      	ldr	r3, [sp, #12]
   15c7c:	681b      	ldr	r3, [r3, #0]
   15c7e:	681c      	ldr	r4, [r3, #0]
    sd->response.length = SendCmd(Command::kGetOcr, 0x00,
   15c80:	9b02      	ldr	r3, [sp, #8]
   15c82:	f103 0208 	add.w	r2, r3, #8
   15c86:	2301      	movs	r3, #1
   15c88:	9301      	str	r3, [sp, #4]
   15c8a:	2364      	movs	r3, #100	; 0x64
   15c8c:	9300      	str	r3, [sp, #0]
   15c8e:	4613      	mov	r3, r2
   15c90:	2200      	movs	r2, #0
   15c92:	217a      	movs	r1, #122	; 0x7a
   15c94:	9803      	ldr	r0, [sp, #12]
   15c96:	47a0      	blx	r4
   15c98:	4602      	mov	r2, r0
   15c9a:	9b02      	ldr	r3, [sp, #8]
   15c9c:	611a      	str	r2, [r3, #16]
    if (sd->response.data.byte[1] & 0x40)
   15c9e:	9b02      	ldr	r3, [sp, #8]
   15ca0:	7a5b      	ldrb	r3, [r3, #9]
   15ca2:	f003 0340 	and.w	r3, r3, #64	; 0x40
   15ca6:	2b00      	cmp	r3, #0
   15ca8:	d003      	beq.n	15cb2 <Sd::Mount(SdInterface::CardInfo_t*)+0x27e>
    {
      // The card is either high or extended capacity
      LOG_DEBUG("SD Card is HC/XC");
      sd->type = Type::kSDHC;
   15caa:	9b02      	ldr	r3, [sp, #8]
   15cac:	2201      	movs	r2, #1
   15cae:	605a      	str	r2, [r3, #4]
   15cb0:	e002      	b.n	15cb8 <Sd::Mount(SdInterface::CardInfo_t*)+0x284>
    }
    else
    {
      // The card is standard capacity
      LOG_DEBUG("SD Card is SC");
      sd->type = Type::kSDSC;
   15cb2:	9b02      	ldr	r3, [sp, #8]
   15cb4:	2200      	movs	r2, #0
   15cb6:	605a      	str	r2, [r3, #4]
    }

    // Store OCR information
    for (int i = 0; i < 4; i++)
   15cb8:	2300      	movs	r3, #0
   15cba:	9308      	str	r3, [sp, #32]
   15cbc:	9b08      	ldr	r3, [sp, #32]
   15cbe:	2b03      	cmp	r3, #3
   15cc0:	dc22      	bgt.n	15d08 <Sd::Mount(SdInterface::CardInfo_t*)+0x2d4>
    {
      // ensure OCR doesn't capture the R1 section of the response
      sd->ocr.byte[i] = sd->response.data.byte[i + 1];
   15cc2:	9b08      	ldr	r3, [sp, #32]
   15cc4:	3301      	adds	r3, #1
   15cc6:	9a02      	ldr	r2, [sp, #8]
   15cc8:	4413      	add	r3, r2
   15cca:	7a19      	ldrb	r1, [r3, #8]
   15ccc:	9a02      	ldr	r2, [sp, #8]
   15cce:	9b08      	ldr	r3, [sp, #32]
   15cd0:	4413      	add	r3, r2
   15cd2:	460a      	mov	r2, r1
   15cd4:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < 4; i++)
   15cd6:	9b08      	ldr	r3, [sp, #32]
   15cd8:	3301      	adds	r3, #1
   15cda:	9308      	str	r3, [sp, #32]
   15cdc:	e7ee      	b.n	15cbc <Sd::Mount(SdInterface::CardInfo_t*)+0x288>
   15cde:	bf00      	nop
   15ce0:	00015a35 	.word	0x00015a35
   15ce4:	000191d8 	.word	0x000191d8
   15ce8:	00018ef0 	.word	0x00018ef0
   15cec:	00018508 	.word	0x00018508
   15cf0:	00018ef8 	.word	0x00018ef8
   15cf4:	00018578 	.word	0x00018578
   15cf8:	00018f00 	.word	0x00018f00
   15cfc:	000185dc 	.word	0x000185dc
   15d00:	00018f08 	.word	0x00018f08
   15d04:	0001863c 	.word	0x0001863c
    }

    // If card is SDSC, manually set its block size
    if (sd->type == Type::kSDSC)
   15d08:	9b02      	ldr	r3, [sp, #8]
   15d0a:	685b      	ldr	r3, [r3, #4]
   15d0c:	2b00      	cmp	r3, #0
   15d0e:	d112      	bne.n	15d36 <Sd::Mount(SdInterface::CardInfo_t*)+0x302>
    {
      // Send requested byte size
      sd->response.length =
          SendCmd(Command::kChgBlkLen, static_cast<uint32_t>(kBlockSize),
                  sd->response.data.byte, 0, KeepAlive::kYes);
   15d10:	9b03      	ldr	r3, [sp, #12]
   15d12:	681b      	ldr	r3, [r3, #0]
   15d14:	681c      	ldr	r4, [r3, #0]
          SendCmd(Command::kChgBlkLen, static_cast<uint32_t>(kBlockSize),
   15d16:	9b02      	ldr	r3, [sp, #8]
   15d18:	f103 0208 	add.w	r2, r3, #8
   15d1c:	2301      	movs	r3, #1
   15d1e:	9301      	str	r3, [sp, #4]
   15d20:	2300      	movs	r3, #0
   15d22:	9300      	str	r3, [sp, #0]
   15d24:	4613      	mov	r3, r2
   15d26:	f44f 7200 	mov.w	r2, #512	; 0x200
   15d2a:	2150      	movs	r1, #80	; 0x50
   15d2c:	9803      	ldr	r0, [sp, #12]
   15d2e:	47a0      	blx	r4
   15d30:	4602      	mov	r2, r0
      sd->response.length =
   15d32:	9b02      	ldr	r3, [sp, #8]
   15d34:	611a      	str	r2, [r3, #16]
    }

    return true;
   15d36:	2401      	movs	r4, #1
   15d38:	462b      	mov	r3, r5
   15d3a:	4619      	mov	r1, r3
   15d3c:	4803      	ldr	r0, [pc, #12]	; (15d4c <Sd::Mount(SdInterface::CardInfo_t*)+0x318>)
   15d3e:	f7fc ffe3 	bl	12d08 <__cyg_profile_func_exit>
   15d42:	4623      	mov	r3, r4
  }
   15d44:	4618      	mov	r0, r3
   15d46:	b00b      	add	sp, #44	; 0x2c
   15d48:	bd30      	pop	{r4, r5, pc}
   15d4a:	bf00      	nop
   15d4c:	00015a35 	.word	0x00015a35

00015d50 <Sd::ToBool(bool)>:

  // Returns string to represent a boolean value
  const char * ToBool(bool condition)
   15d50:	b530      	push	{r4, r5, lr}
   15d52:	b083      	sub	sp, #12
   15d54:	4675      	mov	r5, lr
   15d56:	9001      	str	r0, [sp, #4]
   15d58:	460b      	mov	r3, r1
   15d5a:	f88d 3003 	strb.w	r3, [sp, #3]
   15d5e:	462b      	mov	r3, r5
   15d60:	4619      	mov	r1, r3
   15d62:	4809      	ldr	r0, [pc, #36]	; (15d88 <Sd::ToBool(bool)+0x38>)
   15d64:	f7fc ffbc 	bl	12ce0 <__cyg_profile_func_enter>
  {
    return (condition) ? "true" : "false";
   15d68:	f89d 3003 	ldrb.w	r3, [sp, #3]
   15d6c:	2b00      	cmp	r3, #0
   15d6e:	d001      	beq.n	15d74 <Sd::ToBool(bool)+0x24>
   15d70:	4c06      	ldr	r4, [pc, #24]	; (15d8c <Sd::ToBool(bool)+0x3c>)
   15d72:	e000      	b.n	15d76 <Sd::ToBool(bool)+0x26>
   15d74:	4c06      	ldr	r4, [pc, #24]	; (15d90 <Sd::ToBool(bool)+0x40>)
   15d76:	462b      	mov	r3, r5
   15d78:	4619      	mov	r1, r3
   15d7a:	4803      	ldr	r0, [pc, #12]	; (15d88 <Sd::ToBool(bool)+0x38>)
   15d7c:	f7fc ffc4 	bl	12d08 <__cyg_profile_func_exit>
   15d80:	4623      	mov	r3, r4
  }
   15d82:	4618      	mov	r0, r3
   15d84:	b003      	add	sp, #12
   15d86:	bd30      	pop	{r4, r5, pc}
   15d88:	00015d51 	.word	0x00015d51
   15d8c:	00018694 	.word	0x00018694
   15d90:	0001869c 	.word	0x0001869c

00015d94 <Sd::WaitToReadBlock()>:

  // Waits for the card to respond after a single or multi block read cmd is
  // sent.
  void WaitToReadBlock()
   15d94:	b510      	push	{r4, lr}
   15d96:	b084      	sub	sp, #16
   15d98:	4674      	mov	r4, lr
   15d9a:	9001      	str	r0, [sp, #4]
   15d9c:	4623      	mov	r3, r4
   15d9e:	4619      	mov	r1, r3
   15da0:	4814      	ldr	r0, [pc, #80]	; (15df4 <Sd::WaitToReadBlock()+0x60>)
   15da2:	f7fc ff9d 	bl	12ce0 <__cyg_profile_func_enter>
    // Bit 4 -->  If set, card is locked
    // Bit 3 -->  If set, address is out or range
    // Bit 2 -->  If set, card ECC failed
    // Bit 1 -->  If set, CC error occurred
    // Bit 0 -->  If set, a generic error occurred
    uint8_t wait_byte = 0x00;
   15da6:	2300      	movs	r3, #0
   15da8:	f88d 300f 	strb.w	r3, [sp, #15]
    do
    {
      wait_byte = static_cast<uint8_t>(ssp_interface_->Transfer(0xFF));
   15dac:	9b01      	ldr	r3, [sp, #4]
   15dae:	685a      	ldr	r2, [r3, #4]
   15db0:	9b01      	ldr	r3, [sp, #4]
   15db2:	685b      	ldr	r3, [r3, #4]
   15db4:	681b      	ldr	r3, [r3, #0]
   15db6:	3308      	adds	r3, #8
   15db8:	681b      	ldr	r3, [r3, #0]
   15dba:	21ff      	movs	r1, #255	; 0xff
   15dbc:	4610      	mov	r0, r2
   15dbe:	4798      	blx	r3
   15dc0:	4603      	mov	r3, r0
   15dc2:	f88d 300f 	strb.w	r3, [sp, #15]
    } while (wait_byte != 0xFE && (wait_byte & 0xE0) != 0x00);
   15dc6:	f89d 300f 	ldrb.w	r3, [sp, #15]
   15dca:	2bfe      	cmp	r3, #254	; 0xfe
   15dcc:	d006      	beq.n	15ddc <Sd::WaitToReadBlock()+0x48>
   15dce:	f89d 300f 	ldrb.w	r3, [sp, #15]
   15dd2:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
   15dd6:	2b00      	cmp	r3, #0
   15dd8:	d000      	beq.n	15ddc <Sd::WaitToReadBlock()+0x48>
    do
   15dda:	e7e7      	b.n	15dac <Sd::WaitToReadBlock()+0x18>

    // DEBUG: Check the value of the wait byte
    if (wait_byte == 0xFE)
   15ddc:	f89d 300f 	ldrb.w	r3, [sp, #15]
   15de0:	2bfe      	cmp	r3, #254	; 0xfe
   15de2:	4623      	mov	r3, r4
   15de4:	4619      	mov	r1, r3
   15de6:	4803      	ldr	r0, [pc, #12]	; (15df4 <Sd::WaitToReadBlock()+0x60>)
   15de8:	f7fc ff8e 	bl	12d08 <__cyg_profile_func_exit>
      LOG_DEBUG("Addr Out of Range?: %s", ToBool(wait_byte & 0x08));
      LOG_DEBUG("Card ECC Failed?: %s", ToBool(wait_byte & 0x04));
      LOG_DEBUG("CC Error?: %s", ToBool(wait_byte & 0x02));
      LOG_DEBUG("Error?: %s", ToBool(wait_byte & 0x01));
    }
  }
   15dec:	bf00      	nop
   15dee:	b004      	add	sp, #16
   15df0:	bd10      	pop	{r4, pc}
   15df2:	bf00      	nop
   15df4:	00015d95 	.word	0x00015d95

00015df8 <Sd::WaitWhileBusy()>:

  // Waits for the card to be ready to receive a new block after one has
  // been written or erased
  void WaitWhileBusy()
   15df8:	b510      	push	{r4, lr}
   15dfa:	b084      	sub	sp, #16
   15dfc:	4674      	mov	r4, lr
   15dfe:	9001      	str	r0, [sp, #4]
   15e00:	4623      	mov	r3, r4
   15e02:	4619      	mov	r1, r3
   15e04:	480f      	ldr	r0, [pc, #60]	; (15e44 <Sd::WaitWhileBusy()+0x4c>)
   15e06:	f7fc ff6b 	bl	12ce0 <__cyg_profile_func_enter>
  {
    // Wait for the card to finish programming (i.e. when the
    // bytes return to 0xFF)
    uint8_t busy_byte = 0x00;
   15e0a:	2300      	movs	r3, #0
   15e0c:	f88d 300f 	strb.w	r3, [sp, #15]
    LOG_DEBUG("Card is busy. Waiting for it to finish...");
    do
    {
      busy_byte = static_cast<uint8_t>(ssp_interface_->Transfer(0xFF));
   15e10:	9b01      	ldr	r3, [sp, #4]
   15e12:	685a      	ldr	r2, [r3, #4]
   15e14:	9b01      	ldr	r3, [sp, #4]
   15e16:	685b      	ldr	r3, [r3, #4]
   15e18:	681b      	ldr	r3, [r3, #0]
   15e1a:	3308      	adds	r3, #8
   15e1c:	681b      	ldr	r3, [r3, #0]
   15e1e:	21ff      	movs	r1, #255	; 0xff
   15e20:	4610      	mov	r0, r2
   15e22:	4798      	blx	r3
   15e24:	4603      	mov	r3, r0
   15e26:	f88d 300f 	strb.w	r3, [sp, #15]
    } while (busy_byte != 0xFF);
   15e2a:	f89d 300f 	ldrb.w	r3, [sp, #15]
   15e2e:	2bff      	cmp	r3, #255	; 0xff
   15e30:	d000      	beq.n	15e34 <Sd::WaitWhileBusy()+0x3c>
    do
   15e32:	e7ed      	b.n	15e10 <Sd::WaitWhileBusy()+0x18>
   15e34:	4623      	mov	r3, r4
   15e36:	4619      	mov	r1, r3
   15e38:	4802      	ldr	r0, [pc, #8]	; (15e44 <Sd::WaitWhileBusy()+0x4c>)
   15e3a:	f7fc ff65 	bl	12d08 <__cyg_profile_func_exit>
    LOG_DEBUG("Card finished!");
  }
   15e3e:	bf00      	nop
   15e40:	b004      	add	sp, #16
   15e42:	bd10      	pop	{r4, pc}
   15e44:	00015df9 	.word	0x00015df9

00015e48 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)>:

  // Read any number of blocks from the SD card
  uint8_t ReadBlock(uint32_t address, uint8_t * array,
   15e48:	b530      	push	{r4, r5, lr}
   15e4a:	f5ad 7d13 	sub.w	sp, sp, #588	; 0x24c
   15e4e:	4675      	mov	r5, lr
   15e50:	ac05      	add	r4, sp, #20
   15e52:	6020      	str	r0, [r4, #0]
   15e54:	a804      	add	r0, sp, #16
   15e56:	6001      	str	r1, [r0, #0]
   15e58:	a903      	add	r1, sp, #12
   15e5a:	600a      	str	r2, [r1, #0]
   15e5c:	aa02      	add	r2, sp, #8
   15e5e:	6013      	str	r3, [r2, #0]
   15e60:	462b      	mov	r3, r5
   15e62:	4619      	mov	r1, r3
   15e64:	487d      	ldr	r0, [pc, #500]	; (1605c <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x214>)
   15e66:	f7fc ff3b 	bl	12ce0 <__cyg_profile_func_enter>
                    uint32_t blocks = 1) override
  {
    LOG_DEBUG("Block %" PRId32 " :: 0x%" PRIX32 " for %" PRId32 " blocks",
              address, address, blocks);
    // Wait for a previous command to finish
    WaitWhileBusy();
   15e6a:	ab05      	add	r3, sp, #20
   15e6c:	6818      	ldr	r0, [r3, #0]
   15e6e:	f7ff ffc3 	bl	15df8 <Sd::WaitWhileBusy()>

    // Create a temporary storage location to store sd command responses
    Sd::CardInfo_t sd;
    bool payload_had_bad_crc = false;
   15e72:	2300      	movs	r3, #0
   15e74:	f88d 3247 	strb.w	r3, [sp, #583]	; 0x247

    // Create a temporary place to store blocks of 512 bytes (this is now
    // possible because the constructor enforces block size cross-
    // compatibility)
    uint8_t block_store[512] = { 0 };
   15e78:	ab06      	add	r3, sp, #24
   15e7a:	4618      	mov	r0, r3
   15e7c:	f44f 7300 	mov.w	r3, #512	; 0x200
   15e80:	461a      	mov	r2, r3
   15e82:	2100      	movs	r1, #0
   15e84:	f001 fa2e 	bl	172e4 <memset>

    // Determine appropriate command to send
    Command read_cmd;
    if (blocks > 1)
   15e88:	ab02      	add	r3, sp, #8
   15e8a:	681b      	ldr	r3, [r3, #0]
   15e8c:	2b01      	cmp	r3, #1
   15e8e:	d902      	bls.n	15e96 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x4e>
    {
      read_cmd = Command::kReadMulti;
   15e90:	2352      	movs	r3, #82	; 0x52
   15e92:	9390      	str	r3, [sp, #576]	; 0x240
   15e94:	e001      	b.n	15e9a <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x52>
    }
    else
    {
      read_cmd = Command::kReadSingle;
   15e96:	2351      	movs	r3, #81	; 0x51
   15e98:	9390      	str	r3, [sp, #576]	; 0x240
    }

    // Send initial read command
    sd.response.length =
        SendCmd(read_cmd, address, sd.response.data.byte, 100, KeepAlive::kYes);
   15e9a:	ab05      	add	r3, sp, #20
   15e9c:	681b      	ldr	r3, [r3, #0]
   15e9e:	681b      	ldr	r3, [r3, #0]
   15ea0:	681c      	ldr	r4, [r3, #0]
   15ea2:	ab86      	add	r3, sp, #536	; 0x218
   15ea4:	f103 0108 	add.w	r1, r3, #8
   15ea8:	aa04      	add	r2, sp, #16
   15eaa:	a805      	add	r0, sp, #20
   15eac:	2301      	movs	r3, #1
   15eae:	9301      	str	r3, [sp, #4]
   15eb0:	2364      	movs	r3, #100	; 0x64
   15eb2:	9300      	str	r3, [sp, #0]
   15eb4:	460b      	mov	r3, r1
   15eb6:	6812      	ldr	r2, [r2, #0]
   15eb8:	9990      	ldr	r1, [sp, #576]	; 0x240
   15eba:	6800      	ldr	r0, [r0, #0]
   15ebc:	47a0      	blx	r4
   15ebe:	4603      	mov	r3, r0
    sd.response.length =
   15ec0:	938a      	str	r3, [sp, #552]	; 0x228
    LOG_DEBUG("Sent Read Cmd");
    LOG_DEBUG("[R1 Response:0x%02X]", sd.response.data.byte[0]);

    // Check if the command was acknowledged properly
    if (sd.response.data.byte[0] == 0x00)
   15ec2:	f89d 3220 	ldrb.w	r3, [sp, #544]	; 0x220
   15ec6:	2b00      	cmp	r3, #0
   15ec8:	f040 80d8 	bne.w	1607c <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x234>
    {
      // For every block requested
      uint16_t block_count;
      for (block_count = 0; block_count < blocks; block_count++)
   15ecc:	2300      	movs	r3, #0
   15ece:	f8ad 323e 	strh.w	r3, [sp, #574]	; 0x23e
   15ed2:	f8bd 323e 	ldrh.w	r3, [sp, #574]	; 0x23e
   15ed6:	aa02      	add	r2, sp, #8
   15ed8:	6812      	ldr	r2, [r2, #0]
   15eda:	429a      	cmp	r2, r3
   15edc:	f240 8099 	bls.w	16012 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x1ca>
      {
        // Wait for the card to respond with a ready signal
        WaitToReadBlock();
   15ee0:	ab05      	add	r3, sp, #20
   15ee2:	6818      	ldr	r0, [r3, #0]
   15ee4:	f7ff ff56 	bl	15d94 <Sd::WaitToReadBlock()>

        // Calculate the block address offset
        uint16_t block_addr_offset =
   15ee8:	f8bd 323e 	ldrh.w	r3, [sp, #574]	; 0x23e
   15eec:	025b      	lsls	r3, r3, #9
   15eee:	f8ad 323a 	strh.w	r3, [sp, #570]	; 0x23a
            static_cast<uint16_t>(block_count * kBlockSize);

        // Read all the bytes of a single block
        for (uint16_t byte_count = 0; byte_count < kBlockSize; byte_count++)
   15ef2:	2300      	movs	r3, #0
   15ef4:	f8ad 323c 	strh.w	r3, [sp, #572]	; 0x23c
   15ef8:	f8bd 323c 	ldrh.w	r3, [sp, #572]	; 0x23c
   15efc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   15f00:	d22b      	bcs.n	15f5a <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x112>
        {
          // Calculate the current storage index
          uint16_t storage_index =
   15f02:	f8bd 223a 	ldrh.w	r2, [sp, #570]	; 0x23a
   15f06:	f8bd 323c 	ldrh.w	r3, [sp, #572]	; 0x23c
   15f0a:	4413      	add	r3, r2
   15f0c:	f8ad 3238 	strh.w	r3, [sp, #568]	; 0x238
              static_cast<uint16_t>(block_addr_offset + byte_count);

          // Transfer a byte to read a block from the SD card
          array[storage_index] =
              static_cast<uint8_t>(ssp_interface_->Transfer(0xFF));
   15f10:	ab05      	add	r3, sp, #20
   15f12:	681b      	ldr	r3, [r3, #0]
   15f14:	685a      	ldr	r2, [r3, #4]
   15f16:	ab05      	add	r3, sp, #20
   15f18:	681b      	ldr	r3, [r3, #0]
   15f1a:	685b      	ldr	r3, [r3, #4]
   15f1c:	681b      	ldr	r3, [r3, #0]
   15f1e:	3308      	adds	r3, #8
   15f20:	681b      	ldr	r3, [r3, #0]
   15f22:	21ff      	movs	r1, #255	; 0xff
   15f24:	4610      	mov	r0, r2
   15f26:	4798      	blx	r3
   15f28:	4603      	mov	r3, r0
   15f2a:	4619      	mov	r1, r3
          array[storage_index] =
   15f2c:	f8bd 3238 	ldrh.w	r3, [sp, #568]	; 0x238
   15f30:	aa03      	add	r2, sp, #12
   15f32:	6812      	ldr	r2, [r2, #0]
   15f34:	4413      	add	r3, r2
   15f36:	b2ca      	uxtb	r2, r1
   15f38:	701a      	strb	r2, [r3, #0]

          // Copy that byte into our temporary block store
          block_store[byte_count] = array[storage_index];
   15f3a:	f8bd 3238 	ldrh.w	r3, [sp, #568]	; 0x238
   15f3e:	aa03      	add	r2, sp, #12
   15f40:	6812      	ldr	r2, [r2, #0]
   15f42:	441a      	add	r2, r3
   15f44:	f8bd 323c 	ldrh.w	r3, [sp, #572]	; 0x23c
   15f48:	7811      	ldrb	r1, [r2, #0]
   15f4a:	aa06      	add	r2, sp, #24
   15f4c:	54d1      	strb	r1, [r2, r3]
        for (uint16_t byte_count = 0; byte_count < kBlockSize; byte_count++)
   15f4e:	f8bd 323c 	ldrh.w	r3, [sp, #572]	; 0x23c
   15f52:	3301      	adds	r3, #1
   15f54:	f8ad 323c 	strh.w	r3, [sp, #572]	; 0x23c
   15f58:	e7ce      	b.n	15ef8 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0xb0>
        }

        // Then read the block's 16-bit CRC (i.e. read two bytes)
        uint16_t block_crc =
            static_cast<uint16_t>((ssp_interface_->Transfer(0xFF) << 8) |
   15f5a:	ab05      	add	r3, sp, #20
   15f5c:	681b      	ldr	r3, [r3, #0]
   15f5e:	685a      	ldr	r2, [r3, #4]
   15f60:	ab05      	add	r3, sp, #20
   15f62:	681b      	ldr	r3, [r3, #0]
   15f64:	685b      	ldr	r3, [r3, #4]
   15f66:	681b      	ldr	r3, [r3, #0]
   15f68:	3308      	adds	r3, #8
   15f6a:	681b      	ldr	r3, [r3, #0]
   15f6c:	21ff      	movs	r1, #255	; 0xff
   15f6e:	4610      	mov	r0, r2
   15f70:	4798      	blx	r3
   15f72:	4603      	mov	r3, r0
   15f74:	021b      	lsls	r3, r3, #8
   15f76:	b21c      	sxth	r4, r3
                                  ssp_interface_->Transfer(0xFF));
   15f78:	ab05      	add	r3, sp, #20
   15f7a:	681b      	ldr	r3, [r3, #0]
   15f7c:	685a      	ldr	r2, [r3, #4]
   15f7e:	ab05      	add	r3, sp, #20
   15f80:	681b      	ldr	r3, [r3, #0]
   15f82:	685b      	ldr	r3, [r3, #4]
   15f84:	681b      	ldr	r3, [r3, #0]
   15f86:	3308      	adds	r3, #8
   15f88:	681b      	ldr	r3, [r3, #0]
   15f8a:	21ff      	movs	r1, #255	; 0xff
   15f8c:	4610      	mov	r0, r2
   15f8e:	4798      	blx	r3
   15f90:	4603      	mov	r3, r0
   15f92:	b21b      	sxth	r3, r3
            static_cast<uint16_t>((ssp_interface_->Transfer(0xFF) << 8) |
   15f94:	4323      	orrs	r3, r4
   15f96:	b21b      	sxth	r3, r3
                                  ssp_interface_->Transfer(0xFF));
   15f98:	f8ad 3236 	strh.w	r3, [sp, #566]	; 0x236

        // Run a CRC-16 calculation on the message to determine if the
        // received CRCs match (i.e. checks if the block data is
        // valid).
        uint16_t expected_block_crc = GetCrc16(block_store, 512);
   15f9c:	ab05      	add	r3, sp, #20
   15f9e:	681b      	ldr	r3, [r3, #0]
   15fa0:	681b      	ldr	r3, [r3, #0]
   15fa2:	3320      	adds	r3, #32
   15fa4:	681b      	ldr	r3, [r3, #0]
   15fa6:	a906      	add	r1, sp, #24
   15fa8:	a805      	add	r0, sp, #20
   15faa:	f44f 7200 	mov.w	r2, #512	; 0x200
   15fae:	6800      	ldr	r0, [r0, #0]
   15fb0:	4798      	blx	r3
   15fb2:	4603      	mov	r3, r0
   15fb4:	f8ad 3234 	strh.w	r3, [sp, #564]	; 0x234

        LOG_DEBUG("Block #%d @ 0x%" PRIX32 " acquired", block_count, address);
        LOG_DEBUG("Expecting block crc16 '0x%04X'", expected_block_crc);
        LOG_DEBUG("Got '0x%04X'", block_crc);
        if (expected_block_crc != block_crc)
   15fb8:	f8bd 2234 	ldrh.w	r2, [sp, #564]	; 0x234
   15fbc:	f8bd 3236 	ldrh.w	r3, [sp, #566]	; 0x236
   15fc0:	429a      	cmp	r2, r3
   15fc2:	d020      	beq.n	16006 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x1be>
        {
          // If they do not match, set the bad crc status
          payload_had_bad_crc = true;
   15fc4:	2301      	movs	r3, #1
   15fc6:	f88d 3247 	strb.w	r3, [sp, #583]	; 0x247
          LOG_ERROR("While Reading Block #%d CRC16:", block_count);
   15fca:	f8bd 323e 	ldrh.w	r3, [sp, #574]	; 0x23e
   15fce:	9300      	str	r3, [sp, #0]
   15fd0:	f240 23ed 	movw	r3, #749	; 0x2ed
   15fd4:	4a22      	ldr	r2, [pc, #136]	; (16060 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x218>)
   15fd6:	4923      	ldr	r1, [pc, #140]	; (16064 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x21c>)
   15fd8:	4823      	ldr	r0, [pc, #140]	; (16068 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x220>)
   15fda:	f7fe f8db 	bl	14194 <printf>
          LOG_ERROR("Expected '0x%04X'", expected_block_crc);
   15fde:	f8bd 3234 	ldrh.w	r3, [sp, #564]	; 0x234
   15fe2:	9300      	str	r3, [sp, #0]
   15fe4:	f240 23ee 	movw	r3, #750	; 0x2ee
   15fe8:	4a1d      	ldr	r2, [pc, #116]	; (16060 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x218>)
   15fea:	4920      	ldr	r1, [pc, #128]	; (1606c <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x224>)
   15fec:	4820      	ldr	r0, [pc, #128]	; (16070 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x228>)
   15fee:	f7fe f8d1 	bl	14194 <printf>
          LOG_ERROR("Got '0x%04X'", block_crc);
   15ff2:	f8bd 3236 	ldrh.w	r3, [sp, #566]	; 0x236
   15ff6:	9300      	str	r3, [sp, #0]
   15ff8:	f240 23ef 	movw	r3, #751	; 0x2ef
   15ffc:	4a18      	ldr	r2, [pc, #96]	; (16060 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x218>)
   15ffe:	491d      	ldr	r1, [pc, #116]	; (16074 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x22c>)
   16000:	481d      	ldr	r0, [pc, #116]	; (16078 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x230>)
   16002:	f7fe f8c7 	bl	14194 <printf>
      for (block_count = 0; block_count < blocks; block_count++)
   16006:	f8bd 323e 	ldrh.w	r3, [sp, #574]	; 0x23e
   1600a:	3301      	adds	r3, #1
   1600c:	f8ad 323e 	strh.w	r3, [sp, #574]	; 0x23e
   16010:	e75f      	b.n	15ed2 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x8a>
        }
      }

      // After reading multiple blocks, send the stop command to terminate the
      // transaction (i.e. no keep-alive)
      if (blocks > 1)
   16012:	ab02      	add	r3, sp, #8
   16014:	681b      	ldr	r3, [r3, #0]
   16016:	2b01      	cmp	r3, #1
   16018:	d913      	bls.n	16042 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x1fa>
      {
        sd.response.length =
            SendCmd(Command::kStopTrans, 0xFFFFFFFF, sd.response.data.byte, 100,
                    KeepAlive::kNo);
   1601a:	ab05      	add	r3, sp, #20
   1601c:	681b      	ldr	r3, [r3, #0]
   1601e:	681b      	ldr	r3, [r3, #0]
   16020:	681c      	ldr	r4, [r3, #0]
            SendCmd(Command::kStopTrans, 0xFFFFFFFF, sd.response.data.byte, 100,
   16022:	ab86      	add	r3, sp, #536	; 0x218
   16024:	f103 0208 	add.w	r2, r3, #8
   16028:	a805      	add	r0, sp, #20
   1602a:	2300      	movs	r3, #0
   1602c:	9301      	str	r3, [sp, #4]
   1602e:	2364      	movs	r3, #100	; 0x64
   16030:	9300      	str	r3, [sp, #0]
   16032:	4613      	mov	r3, r2
   16034:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   16038:	214c      	movs	r1, #76	; 0x4c
   1603a:	6800      	ldr	r0, [r0, #0]
   1603c:	47a0      	blx	r4
   1603e:	4603      	mov	r3, r0
        sd.response.length =
   16040:	938a      	str	r3, [sp, #552]	; 0x228
      LOG_DEBUG("Response Byte");
      LOG_DEBUG("0x%02X", sd.response.data.byte[0]);

      // If there was a bad crc from the payload, manually set the
      // CRC error flag in the command response byte
      if (payload_had_bad_crc)
   16042:	f89d 3247 	ldrb.w	r3, [sp, #583]	; 0x247
   16046:	2b00      	cmp	r3, #0
   16048:	f000 80c0 	beq.w	161cc <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x384>
      {
        sd.response.data.byte[0] |= 0x08;
   1604c:	f89d 3220 	ldrb.w	r3, [sp, #544]	; 0x220
   16050:	f043 0308 	orr.w	r3, r3, #8
   16054:	b2db      	uxtb	r3, r3
   16056:	f88d 3220 	strb.w	r3, [sp, #544]	; 0x220
   1605a:	e0b7      	b.n	161cc <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x384>
   1605c:	00015e49 	.word	0x00015e49
   16060:	0001920c 	.word	0x0001920c
   16064:	00018f10 	.word	0x00018f10
   16068:	000186a4 	.word	0x000186a4
   1606c:	00018f18 	.word	0x00018f18
   16070:	000186fc 	.word	0x000186fc
   16074:	00018f20 	.word	0x00018f20
   16078:	00018748 	.word	0x00018748
      }
    }
    else
    {
      LOG_ERROR("Read Cmd was not acknowledged properly!");
   1607c:	f240 3309 	movw	r3, #777	; 0x309
   16080:	4a65      	ldr	r2, [pc, #404]	; (16218 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x3d0>)
   16082:	4966      	ldr	r1, [pc, #408]	; (1621c <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x3d4>)
   16084:	4866      	ldr	r0, [pc, #408]	; (16220 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x3d8>)
   16086:	f7fe f885 	bl	14194 <printf>
      LOG_ERROR("Parameter Err: %s", ToBool(sd.response.data.byte[0] & 0x40));
   1608a:	f89d 3220 	ldrb.w	r3, [sp, #544]	; 0x220
   1608e:	f003 0340 	and.w	r3, r3, #64	; 0x40
   16092:	2b00      	cmp	r3, #0
   16094:	bf14      	ite	ne
   16096:	2301      	movne	r3, #1
   16098:	2300      	moveq	r3, #0
   1609a:	b2da      	uxtb	r2, r3
   1609c:	ab05      	add	r3, sp, #20
   1609e:	4611      	mov	r1, r2
   160a0:	6818      	ldr	r0, [r3, #0]
   160a2:	f7ff fe55 	bl	15d50 <Sd::ToBool(bool)>
   160a6:	4603      	mov	r3, r0
   160a8:	9300      	str	r3, [sp, #0]
   160aa:	f240 330a 	movw	r3, #778	; 0x30a
   160ae:	4a5a      	ldr	r2, [pc, #360]	; (16218 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x3d0>)
   160b0:	495c      	ldr	r1, [pc, #368]	; (16224 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x3dc>)
   160b2:	485d      	ldr	r0, [pc, #372]	; (16228 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x3e0>)
   160b4:	f7fe f86e 	bl	14194 <printf>
      LOG_ERROR("Addr Err: %s", ToBool(sd.response.data.byte[0] & 0x20));
   160b8:	f89d 3220 	ldrb.w	r3, [sp, #544]	; 0x220
   160bc:	f003 0320 	and.w	r3, r3, #32
   160c0:	2b00      	cmp	r3, #0
   160c2:	bf14      	ite	ne
   160c4:	2301      	movne	r3, #1
   160c6:	2300      	moveq	r3, #0
   160c8:	b2da      	uxtb	r2, r3
   160ca:	ab05      	add	r3, sp, #20
   160cc:	4611      	mov	r1, r2
   160ce:	6818      	ldr	r0, [r3, #0]
   160d0:	f7ff fe3e 	bl	15d50 <Sd::ToBool(bool)>
   160d4:	4603      	mov	r3, r0
   160d6:	9300      	str	r3, [sp, #0]
   160d8:	f240 330b 	movw	r3, #779	; 0x30b
   160dc:	4a4e      	ldr	r2, [pc, #312]	; (16218 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x3d0>)
   160de:	4953      	ldr	r1, [pc, #332]	; (1622c <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x3e4>)
   160e0:	4853      	ldr	r0, [pc, #332]	; (16230 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x3e8>)
   160e2:	f7fe f857 	bl	14194 <printf>
      LOG_ERROR("Erase Seq Err: %s", ToBool(sd.response.data.byte[0] & 0x10));
   160e6:	f89d 3220 	ldrb.w	r3, [sp, #544]	; 0x220
   160ea:	f003 0310 	and.w	r3, r3, #16
   160ee:	2b00      	cmp	r3, #0
   160f0:	bf14      	ite	ne
   160f2:	2301      	movne	r3, #1
   160f4:	2300      	moveq	r3, #0
   160f6:	b2da      	uxtb	r2, r3
   160f8:	ab05      	add	r3, sp, #20
   160fa:	4611      	mov	r1, r2
   160fc:	6818      	ldr	r0, [r3, #0]
   160fe:	f7ff fe27 	bl	15d50 <Sd::ToBool(bool)>
   16102:	4603      	mov	r3, r0
   16104:	9300      	str	r3, [sp, #0]
   16106:	f44f 7343 	mov.w	r3, #780	; 0x30c
   1610a:	4a43      	ldr	r2, [pc, #268]	; (16218 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x3d0>)
   1610c:	4949      	ldr	r1, [pc, #292]	; (16234 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x3ec>)
   1610e:	484a      	ldr	r0, [pc, #296]	; (16238 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x3f0>)
   16110:	f7fe f840 	bl	14194 <printf>
      LOG_ERROR("Com CRC Err: %s", ToBool(sd.response.data.byte[0] & 0x08));
   16114:	f89d 3220 	ldrb.w	r3, [sp, #544]	; 0x220
   16118:	f003 0308 	and.w	r3, r3, #8
   1611c:	2b00      	cmp	r3, #0
   1611e:	bf14      	ite	ne
   16120:	2301      	movne	r3, #1
   16122:	2300      	moveq	r3, #0
   16124:	b2da      	uxtb	r2, r3
   16126:	ab05      	add	r3, sp, #20
   16128:	4611      	mov	r1, r2
   1612a:	6818      	ldr	r0, [r3, #0]
   1612c:	f7ff fe10 	bl	15d50 <Sd::ToBool(bool)>
   16130:	4603      	mov	r3, r0
   16132:	9300      	str	r3, [sp, #0]
   16134:	f240 330d 	movw	r3, #781	; 0x30d
   16138:	4a37      	ldr	r2, [pc, #220]	; (16218 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x3d0>)
   1613a:	4940      	ldr	r1, [pc, #256]	; (1623c <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x3f4>)
   1613c:	4840      	ldr	r0, [pc, #256]	; (16240 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x3f8>)
   1613e:	f7fe f829 	bl	14194 <printf>
      LOG_ERROR("Illegal Cmd Err: %s", ToBool(sd.response.data.byte[0] & 0x04));
   16142:	f89d 3220 	ldrb.w	r3, [sp, #544]	; 0x220
   16146:	f003 0304 	and.w	r3, r3, #4
   1614a:	2b00      	cmp	r3, #0
   1614c:	bf14      	ite	ne
   1614e:	2301      	movne	r3, #1
   16150:	2300      	moveq	r3, #0
   16152:	b2da      	uxtb	r2, r3
   16154:	ab05      	add	r3, sp, #20
   16156:	4611      	mov	r1, r2
   16158:	6818      	ldr	r0, [r3, #0]
   1615a:	f7ff fdf9 	bl	15d50 <Sd::ToBool(bool)>
   1615e:	4603      	mov	r3, r0
   16160:	9300      	str	r3, [sp, #0]
   16162:	f240 330e 	movw	r3, #782	; 0x30e
   16166:	4a2c      	ldr	r2, [pc, #176]	; (16218 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x3d0>)
   16168:	4936      	ldr	r1, [pc, #216]	; (16244 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x3fc>)
   1616a:	4837      	ldr	r0, [pc, #220]	; (16248 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x400>)
   1616c:	f7fe f812 	bl	14194 <printf>
      LOG_ERROR("Erase Reset: %s", ToBool(sd.response.data.byte[0] & 0x02));
   16170:	f89d 3220 	ldrb.w	r3, [sp, #544]	; 0x220
   16174:	f003 0302 	and.w	r3, r3, #2
   16178:	2b00      	cmp	r3, #0
   1617a:	bf14      	ite	ne
   1617c:	2301      	movne	r3, #1
   1617e:	2300      	moveq	r3, #0
   16180:	b2da      	uxtb	r2, r3
   16182:	ab05      	add	r3, sp, #20
   16184:	4611      	mov	r1, r2
   16186:	6818      	ldr	r0, [r3, #0]
   16188:	f7ff fde2 	bl	15d50 <Sd::ToBool(bool)>
   1618c:	4603      	mov	r3, r0
   1618e:	9300      	str	r3, [sp, #0]
   16190:	f240 330f 	movw	r3, #783	; 0x30f
   16194:	4a20      	ldr	r2, [pc, #128]	; (16218 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x3d0>)
   16196:	492d      	ldr	r1, [pc, #180]	; (1624c <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x404>)
   16198:	482d      	ldr	r0, [pc, #180]	; (16250 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x408>)
   1619a:	f7fd fffb 	bl	14194 <printf>
      LOG_ERROR("In Idle: %s", ToBool(sd.response.data.byte[0] & 0x01));
   1619e:	f89d 3220 	ldrb.w	r3, [sp, #544]	; 0x220
   161a2:	f003 0301 	and.w	r3, r3, #1
   161a6:	2b00      	cmp	r3, #0
   161a8:	bf14      	ite	ne
   161aa:	2301      	movne	r3, #1
   161ac:	2300      	moveq	r3, #0
   161ae:	b2da      	uxtb	r2, r3
   161b0:	ab05      	add	r3, sp, #20
   161b2:	4611      	mov	r1, r2
   161b4:	6818      	ldr	r0, [r3, #0]
   161b6:	f7ff fdcb 	bl	15d50 <Sd::ToBool(bool)>
   161ba:	4603      	mov	r3, r0
   161bc:	9300      	str	r3, [sp, #0]
   161be:	f44f 7344 	mov.w	r3, #784	; 0x310
   161c2:	4a15      	ldr	r2, [pc, #84]	; (16218 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x3d0>)
   161c4:	4923      	ldr	r1, [pc, #140]	; (16254 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x40c>)
   161c6:	4824      	ldr	r0, [pc, #144]	; (16258 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x410>)
   161c8:	f7fd ffe4 	bl	14194 <printf>
    LOG_DEBUG("Now waiting for SD Card to exit Idle Mode...");
    do
    {
      // Query the status register
      sd.response.length = SendCmd(Command::kGetStatus, 32,
                                   sd.response.data.byte, 0, KeepAlive::kNo);
   161cc:	ab05      	add	r3, sp, #20
   161ce:	681b      	ldr	r3, [r3, #0]
   161d0:	681b      	ldr	r3, [r3, #0]
   161d2:	681c      	ldr	r4, [r3, #0]
      sd.response.length = SendCmd(Command::kGetStatus, 32,
   161d4:	ab86      	add	r3, sp, #536	; 0x218
   161d6:	f103 0208 	add.w	r2, r3, #8
   161da:	a805      	add	r0, sp, #20
   161dc:	2300      	movs	r3, #0
   161de:	9301      	str	r3, [sp, #4]
   161e0:	2300      	movs	r3, #0
   161e2:	9300      	str	r3, [sp, #0]
   161e4:	4613      	mov	r3, r2
   161e6:	2220      	movs	r2, #32
   161e8:	210d      	movs	r1, #13
   161ea:	6800      	ldr	r0, [r0, #0]
   161ec:	47a0      	blx	r4
   161ee:	4603      	mov	r3, r0
   161f0:	938a      	str	r3, [sp, #552]	; 0x228
    } while (sd.response.data.byte[0] & 0x01);
   161f2:	f89d 3220 	ldrb.w	r3, [sp, #544]	; 0x220
   161f6:	f003 0301 	and.w	r3, r3, #1
   161fa:	2b00      	cmp	r3, #0
   161fc:	d000      	beq.n	16200 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x3b8>
    do
   161fe:	e7e5      	b.n	161cc <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x384>
    LOG_DEBUG("SD Card is out of Idle Mode!");

    // Return the status
    LOG_DEBUG("Read Complete! [R1 Response: 0x%02X]", sd.response.data.byte[0]);
    return sd.response.data.byte[0];
   16200:	f89d 4220 	ldrb.w	r4, [sp, #544]	; 0x220
   16204:	462b      	mov	r3, r5
   16206:	4619      	mov	r1, r3
   16208:	4814      	ldr	r0, [pc, #80]	; (1625c <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x414>)
   1620a:	f7fc fd7d 	bl	12d08 <__cyg_profile_func_exit>
   1620e:	4623      	mov	r3, r4
  }
   16210:	4618      	mov	r0, r3
   16212:	f50d 7d13 	add.w	sp, sp, #588	; 0x24c
   16216:	bd30      	pop	{r4, r5, pc}
   16218:	0001920c 	.word	0x0001920c
   1621c:	00018f28 	.word	0x00018f28
   16220:	00018790 	.word	0x00018790
   16224:	00018f30 	.word	0x00018f30
   16228:	000187f4 	.word	0x000187f4
   1622c:	00018f38 	.word	0x00018f38
   16230:	00018840 	.word	0x00018840
   16234:	00018f40 	.word	0x00018f40
   16238:	00018888 	.word	0x00018888
   1623c:	00018f48 	.word	0x00018f48
   16240:	000188d4 	.word	0x000188d4
   16244:	00018f50 	.word	0x00018f50
   16248:	00018920 	.word	0x00018920
   1624c:	00018f58 	.word	0x00018f58
   16250:	00018970 	.word	0x00018970
   16254:	00018f60 	.word	0x00018f60
   16258:	000189bc 	.word	0x000189bc
   1625c:	00015e49 	.word	0x00015e49

00016260 <Sd::WriteBlock(unsigned long, unsigned char const*, unsigned long)>:

  // Writes any number of 512-byte blocks to the SD Card
  uint8_t WriteBlock(uint32_t address, const uint8_t * array,
   16260:	b530      	push	{r4, r5, lr}
   16262:	b095      	sub	sp, #84	; 0x54
   16264:	4675      	mov	r5, lr
   16266:	9005      	str	r0, [sp, #20]
   16268:	9104      	str	r1, [sp, #16]
   1626a:	9203      	str	r2, [sp, #12]
   1626c:	9302      	str	r3, [sp, #8]
   1626e:	462b      	mov	r3, r5
   16270:	4619      	mov	r1, r3
   16272:	4865      	ldr	r0, [pc, #404]	; (16408 <Sd::WriteBlock(unsigned long, unsigned char const*, unsigned long)+0x1a8>)
   16274:	f7fc fd34 	bl	12ce0 <__cyg_profile_func_enter>
                     uint32_t blocks = 1) override
  {
    // Wait for a previous command to finish
    WaitWhileBusy();
   16278:	9805      	ldr	r0, [sp, #20]
   1627a:	f7ff fdbd 	bl	15df8 <Sd::WaitWhileBusy()>
    Sd::CardInfo_t sd;

    // Determine appropriate command and start token to send
    Command write_cmd;
    uint8_t write_start_tkn;
    if (blocks > 1)
   1627e:	9b02      	ldr	r3, [sp, #8]
   16280:	2b01      	cmp	r3, #1
   16282:	d905      	bls.n	16290 <Sd::WriteBlock(unsigned long, unsigned char const*, unsigned long)+0x30>
    {
      write_cmd       = Command::kWriteMulti;
   16284:	2359      	movs	r3, #89	; 0x59
   16286:	9313      	str	r3, [sp, #76]	; 0x4c
      write_start_tkn = 0xFC;
   16288:	23fc      	movs	r3, #252	; 0xfc
   1628a:	f88d 304b 	strb.w	r3, [sp, #75]	; 0x4b
   1628e:	e004      	b.n	1629a <Sd::WriteBlock(unsigned long, unsigned char const*, unsigned long)+0x3a>
    }
    else
    {
      write_cmd       = Command::kWriteSingle;
   16290:	2358      	movs	r3, #88	; 0x58
   16292:	9313      	str	r3, [sp, #76]	; 0x4c
      write_start_tkn = 0xFE;
   16294:	23fe      	movs	r3, #254	; 0xfe
   16296:	f88d 304b 	strb.w	r3, [sp, #75]	; 0x4b
    }

    // Send initial write command
    sd.response.length = SendCmd(write_cmd, address, sd.response.data.byte, 100,
                                 KeepAlive::kYes);
   1629a:	9b05      	ldr	r3, [sp, #20]
   1629c:	681b      	ldr	r3, [r3, #0]
   1629e:	681c      	ldr	r4, [r3, #0]
    sd.response.length = SendCmd(write_cmd, address, sd.response.data.byte, 100,
   162a0:	ab06      	add	r3, sp, #24
   162a2:	f103 0208 	add.w	r2, r3, #8
   162a6:	2301      	movs	r3, #1
   162a8:	9301      	str	r3, [sp, #4]
   162aa:	2364      	movs	r3, #100	; 0x64
   162ac:	9300      	str	r3, [sp, #0]
   162ae:	4613      	mov	r3, r2
   162b0:	9a04      	ldr	r2, [sp, #16]
   162b2:	9913      	ldr	r1, [sp, #76]	; 0x4c
   162b4:	9805      	ldr	r0, [sp, #20]
   162b6:	47a0      	blx	r4
   162b8:	4603      	mov	r3, r0
   162ba:	930a      	str	r3, [sp, #40]	; 0x28
    LOG_DEBUG("Sent Write Cmd");
    LOG_DEBUG("[R1 Response:0x%02X]", sd.response.data.byte[0]);

    // Check if the response was acknowledged properly
    if (sd.response.data.byte[0] == 0x00)
   162bc:	f89d 3020 	ldrb.w	r3, [sp, #32]
   162c0:	2b00      	cmp	r3, #0
   162c2:	f040 8096 	bne.w	163f2 <Sd::WriteBlock(unsigned long, unsigned char const*, unsigned long)+0x192>
    {
      // If no errors, proceed write given block(s) to SD Card
      // For each given block
      for (uint16_t current_block_num = 0; current_block_num < blocks;
   162c6:	2300      	movs	r3, #0
   162c8:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
   162cc:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
   162d0:	9a02      	ldr	r2, [sp, #8]
   162d2:	429a      	cmp	r2, r3
   162d4:	d97a      	bls.n	163cc <Sd::WriteBlock(unsigned long, unsigned char const*, unsigned long)+0x16c>
           current_block_num++)
      {
        // Calculate array offset
        uint64_t arr_offset = current_block_num * kBlockSize;
   162d6:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
   162da:	025b      	lsls	r3, r3, #9
   162dc:	ea4f 74e3 	mov.w	r4, r3, asr #31
   162e0:	e9cd 340e 	strd	r3, r4, [sp, #56]	; 0x38

        // Send the start token for the current block
        ssp_interface_->Transfer(write_start_tkn);
   162e4:	9b05      	ldr	r3, [sp, #20]
   162e6:	685a      	ldr	r2, [r3, #4]
   162e8:	9b05      	ldr	r3, [sp, #20]
   162ea:	685b      	ldr	r3, [r3, #4]
   162ec:	681b      	ldr	r3, [r3, #0]
   162ee:	3308      	adds	r3, #8
   162f0:	681b      	ldr	r3, [r3, #0]
   162f2:	f89d 104b 	ldrb.w	r1, [sp, #75]	; 0x4b
   162f6:	b289      	uxth	r1, r1
   162f8:	4610      	mov	r0, r2
   162fa:	4798      	blx	r3

        // Write all 512-bytes of the given block
        LOG_DEBUG("Writing block #%d", current_block_num);
        for (uint16_t current_byte = 0; current_byte < kBlockSize;
   162fc:	2300      	movs	r3, #0
   162fe:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
   16302:	f8bd 3046 	ldrh.w	r3, [sp, #70]	; 0x46
   16306:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   1630a:	d216      	bcs.n	1633a <Sd::WriteBlock(unsigned long, unsigned char const*, unsigned long)+0xda>
             current_byte++)
        {
          ssp_interface_->Transfer(array[arr_offset + current_byte]);
   1630c:	9b05      	ldr	r3, [sp, #20]
   1630e:	6858      	ldr	r0, [r3, #4]
   16310:	9b05      	ldr	r3, [sp, #20]
   16312:	685b      	ldr	r3, [r3, #4]
   16314:	681b      	ldr	r3, [r3, #0]
   16316:	3308      	adds	r3, #8
   16318:	681b      	ldr	r3, [r3, #0]
   1631a:	990e      	ldr	r1, [sp, #56]	; 0x38
   1631c:	f8bd 2046 	ldrh.w	r2, [sp, #70]	; 0x46
   16320:	440a      	add	r2, r1
   16322:	9903      	ldr	r1, [sp, #12]
   16324:	440a      	add	r2, r1
   16326:	7812      	ldrb	r2, [r2, #0]
   16328:	b292      	uxth	r2, r2
   1632a:	4611      	mov	r1, r2
   1632c:	4798      	blx	r3
        for (uint16_t current_byte = 0; current_byte < kBlockSize;
   1632e:	f8bd 3046 	ldrh.w	r3, [sp, #70]	; 0x46
   16332:	3301      	adds	r3, #1
   16334:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
   16338:	e7e3      	b.n	16302 <Sd::WriteBlock(unsigned long, unsigned char const*, unsigned long)+0xa2>
        }

        // Read the data response token after writing the block
        uint8_t data_response_tkn =
            static_cast<uint8_t>(ssp_interface_->Transfer(0xFF));
   1633a:	9b05      	ldr	r3, [sp, #20]
   1633c:	685a      	ldr	r2, [r3, #4]
   1633e:	9b05      	ldr	r3, [sp, #20]
   16340:	685b      	ldr	r3, [r3, #4]
   16342:	681b      	ldr	r3, [r3, #0]
   16344:	3308      	adds	r3, #8
   16346:	681b      	ldr	r3, [r3, #0]
   16348:	21ff      	movs	r1, #255	; 0xff
   1634a:	4610      	mov	r0, r2
   1634c:	4798      	blx	r3
   1634e:	4603      	mov	r3, r0
   16350:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
                  ToBool(data_response_tkn & 0x0B));
        LOG_DEBUG("Data Rejected (write err)?: %s",
                  ToBool(data_response_tkn & 0x0D));

        // If writing multiple blocks and the previous block was rejected
        if (blocks > 1 && !(data_response_tkn & 0x05))
   16354:	9b02      	ldr	r3, [sp, #8]
   16356:	2b01      	cmp	r3, #1
   16358:	d92f      	bls.n	163ba <Sd::WriteBlock(unsigned long, unsigned char const*, unsigned long)+0x15a>
   1635a:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
   1635e:	f003 0305 	and.w	r3, r3, #5
   16362:	2b00      	cmp	r3, #0
   16364:	d129      	bne.n	163ba <Sd::WriteBlock(unsigned long, unsigned char const*, unsigned long)+0x15a>
        {
          // Send an immediate stop (CMD12)
          sd.response.length =
              SendCmd(Command::kStopTrans, 0xFFFFFFFF, sd.response.data.byte,
                      100, KeepAlive::kYes);
   16366:	9b05      	ldr	r3, [sp, #20]
   16368:	681b      	ldr	r3, [r3, #0]
   1636a:	681c      	ldr	r4, [r3, #0]
              SendCmd(Command::kStopTrans, 0xFFFFFFFF, sd.response.data.byte,
   1636c:	ab06      	add	r3, sp, #24
   1636e:	f103 0208 	add.w	r2, r3, #8
   16372:	2301      	movs	r3, #1
   16374:	9301      	str	r3, [sp, #4]
   16376:	2364      	movs	r3, #100	; 0x64
   16378:	9300      	str	r3, [sp, #0]
   1637a:	4613      	mov	r3, r2
   1637c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   16380:	214c      	movs	r1, #76	; 0x4c
   16382:	9805      	ldr	r0, [sp, #20]
   16384:	47a0      	blx	r4
   16386:	4603      	mov	r3, r0
          sd.response.length =
   16388:	930a      	str	r3, [sp, #40]	; 0x28
          LOG_DEBUG("Stopped Transmission due to rejection...");
          LOG_DEBUG("[R1 Response: 0x%02X]", sd.response.data.byte[0]);

          // In the case of a write error, ask for the reason why
          if (data_response_tkn & 0x0D)
   1638a:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
   1638e:	f003 030d 	and.w	r3, r3, #13
   16392:	2b00      	cmp	r3, #0
   16394:	d011      	beq.n	163ba <Sd::WriteBlock(unsigned long, unsigned char const*, unsigned long)+0x15a>
          {
            sd.response.length =
                SendCmd(Command::kGetStatus, 0xFFFFFFFF, sd.response.data.byte,
                        100, KeepAlive::kYes);
   16396:	9b05      	ldr	r3, [sp, #20]
   16398:	681b      	ldr	r3, [r3, #0]
   1639a:	681c      	ldr	r4, [r3, #0]
                SendCmd(Command::kGetStatus, 0xFFFFFFFF, sd.response.data.byte,
   1639c:	ab06      	add	r3, sp, #24
   1639e:	f103 0208 	add.w	r2, r3, #8
   163a2:	2301      	movs	r3, #1
   163a4:	9301      	str	r3, [sp, #4]
   163a6:	2364      	movs	r3, #100	; 0x64
   163a8:	9300      	str	r3, [sp, #0]
   163aa:	4613      	mov	r3, r2
   163ac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   163b0:	210d      	movs	r1, #13
   163b2:	9805      	ldr	r0, [sp, #20]
   163b4:	47a0      	blx	r4
   163b6:	4603      	mov	r3, r0
            sd.response.length =
   163b8:	930a      	str	r3, [sp, #40]	; 0x28
                "Checking Status Register to see cause of Write Error...");
            LOG_DEBUG("[R2 Response: 0x%04" PRIX32 "]",
                      sd.response.data.dWord.lo);
          }
        }
        WaitWhileBusy();
   163ba:	9805      	ldr	r0, [sp, #20]
   163bc:	f7ff fd1c 	bl	15df8 <Sd::WaitWhileBusy()>
      for (uint16_t current_block_num = 0; current_block_num < blocks;
   163c0:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
   163c4:	3301      	adds	r3, #1
   163c6:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
   163ca:	e77f      	b.n	162cc <Sd::WriteBlock(unsigned long, unsigned char const*, unsigned long)+0x6c>
      }

      if (blocks > 1)
   163cc:	9b02      	ldr	r3, [sp, #8]
   163ce:	2b01      	cmp	r3, #1
   163d0:	d90f      	bls.n	163f2 <Sd::WriteBlock(unsigned long, unsigned char const*, unsigned long)+0x192>
      {
        constexpr uint8_t kStopToken = 0xFD;
   163d2:	23fd      	movs	r3, #253	; 0xfd
   163d4:	f88d 3036 	strb.w	r3, [sp, #54]	; 0x36
        ssp_interface_->Transfer(kStopToken);
   163d8:	9b05      	ldr	r3, [sp, #20]
   163da:	685a      	ldr	r2, [r3, #4]
   163dc:	9b05      	ldr	r3, [sp, #20]
   163de:	685b      	ldr	r3, [r3, #4]
   163e0:	681b      	ldr	r3, [r3, #0]
   163e2:	3308      	adds	r3, #8
   163e4:	681b      	ldr	r3, [r3, #0]
   163e6:	21fd      	movs	r1, #253	; 0xfd
   163e8:	4610      	mov	r0, r2
   163ea:	4798      	blx	r3

        // Wait for the card's programming to complete before
        // reselecting it (i.e. to prevent corruption)
        WaitWhileBusy();
   163ec:	9805      	ldr	r0, [sp, #20]
   163ee:	f7ff fd03 	bl	15df8 <Sd::WaitWhileBusy()>
      LOG_DEBUG("Illegal Cmd Err: %s", ToBool(sd.response.data.byte[0] & 0x04));
      LOG_DEBUG("Erase Reset: %s", ToBool(sd.response.data.byte[0] & 0x02));
      LOG_DEBUG("In Idle: %s", ToBool(sd.response.data.byte[0] & 0x01));
    }

    return sd.response.data.byte[0];
   163f2:	f89d 4020 	ldrb.w	r4, [sp, #32]
   163f6:	462b      	mov	r3, r5
   163f8:	4619      	mov	r1, r3
   163fa:	4803      	ldr	r0, [pc, #12]	; (16408 <Sd::WriteBlock(unsigned long, unsigned char const*, unsigned long)+0x1a8>)
   163fc:	f7fc fc84 	bl	12d08 <__cyg_profile_func_exit>
   16400:	4623      	mov	r3, r4
  }
   16402:	4618      	mov	r0, r3
   16404:	b015      	add	sp, #84	; 0x54
   16406:	bd30      	pop	{r4, r5, pc}
   16408:	00016261 	.word	0x00016261

0001640c <Sd::DeleteBlock(unsigned long, unsigned long)>:

  // Deletes any number of blocks (inclusively) within a range of address.
  uint8_t DeleteBlock(uint32_t start, uint32_t end) override
   1640c:	b530      	push	{r4, r5, lr}
   1640e:	b08f      	sub	sp, #60	; 0x3c
   16410:	4675      	mov	r5, lr
   16412:	9005      	str	r0, [sp, #20]
   16414:	9104      	str	r1, [sp, #16]
   16416:	9203      	str	r2, [sp, #12]
   16418:	462b      	mov	r3, r5
   1641a:	4619      	mov	r1, r3
   1641c:	483d      	ldr	r0, [pc, #244]	; (16514 <Sd::DeleteBlock(unsigned long, unsigned long)+0x108>)
   1641e:	f7fc fc5f 	bl	12ce0 <__cyg_profile_func_enter>
  {
    // Wait for a previous command to finish
    WaitWhileBusy();
   16422:	9805      	ldr	r0, [sp, #20]
   16424:	f7ff fce8 	bl	15df8 <Sd::WaitWhileBusy()>

    // Create a temporary storage location to store sd command responses
    Sd::CardInfo_t sd;
    bool delete_failed = false;
   16428:	2300      	movs	r3, #0
   1642a:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37

    // Set the delete start address
    LOG_DEBUG("Setting Delete Start Address...");
    sd.response.length = SendCmd(Command::kDelFrom, start,
                                 sd.response.data.byte, 100, KeepAlive::kYes);
   1642e:	9b05      	ldr	r3, [sp, #20]
   16430:	681b      	ldr	r3, [r3, #0]
   16432:	681c      	ldr	r4, [r3, #0]
    sd.response.length = SendCmd(Command::kDelFrom, start,
   16434:	ab06      	add	r3, sp, #24
   16436:	f103 0208 	add.w	r2, r3, #8
   1643a:	2301      	movs	r3, #1
   1643c:	9301      	str	r3, [sp, #4]
   1643e:	2364      	movs	r3, #100	; 0x64
   16440:	9300      	str	r3, [sp, #0]
   16442:	4613      	mov	r3, r2
   16444:	9a04      	ldr	r2, [sp, #16]
   16446:	2160      	movs	r1, #96	; 0x60
   16448:	9805      	ldr	r0, [sp, #20]
   1644a:	47a0      	blx	r4
   1644c:	4603      	mov	r3, r0
   1644e:	930a      	str	r3, [sp, #40]	; 0x28

    // Wait while the writing the start address
    WaitWhileBusy();
   16450:	9805      	ldr	r0, [sp, #20]
   16452:	f7ff fcd1 	bl	15df8 <Sd::WaitWhileBusy()>

    // Force return if an error occurred
    if (sd.response.data.byte[0] != 0x00)
   16456:	f89d 3020 	ldrb.w	r3, [sp, #32]
   1645a:	2b00      	cmp	r3, #0
   1645c:	d009      	beq.n	16472 <Sd::DeleteBlock(unsigned long, unsigned long)+0x66>
    {
      LOG_ERROR("Failed to set Start Address!");
   1645e:	f44f 736a 	mov.w	r3, #936	; 0x3a8
   16462:	4a2d      	ldr	r2, [pc, #180]	; (16518 <Sd::DeleteBlock(unsigned long, unsigned long)+0x10c>)
   16464:	492d      	ldr	r1, [pc, #180]	; (1651c <Sd::DeleteBlock(unsigned long, unsigned long)+0x110>)
   16466:	482e      	ldr	r0, [pc, #184]	; (16520 <Sd::DeleteBlock(unsigned long, unsigned long)+0x114>)
   16468:	f7fd fe94 	bl	14194 <printf>
      delete_failed = true;
   1646c:	2301      	movs	r3, #1
   1646e:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
    }

    // Set the delete end address
    if (!delete_failed)
   16472:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
   16476:	f083 0301 	eor.w	r3, r3, #1
   1647a:	b2db      	uxtb	r3, r3
   1647c:	2b00      	cmp	r3, #0
   1647e:	d010      	beq.n	164a2 <Sd::DeleteBlock(unsigned long, unsigned long)+0x96>
    {
      LOG_DEBUG("Setting Delete End Address...");
      sd.response.length = SendCmd(Command::kDelTo, end, sd.response.data.byte,
                                   100, KeepAlive::kYes);
   16480:	9b05      	ldr	r3, [sp, #20]
   16482:	681b      	ldr	r3, [r3, #0]
   16484:	681c      	ldr	r4, [r3, #0]
      sd.response.length = SendCmd(Command::kDelTo, end, sd.response.data.byte,
   16486:	ab06      	add	r3, sp, #24
   16488:	f103 0208 	add.w	r2, r3, #8
   1648c:	2301      	movs	r3, #1
   1648e:	9301      	str	r3, [sp, #4]
   16490:	2364      	movs	r3, #100	; 0x64
   16492:	9300      	str	r3, [sp, #0]
   16494:	4613      	mov	r3, r2
   16496:	9a03      	ldr	r2, [sp, #12]
   16498:	2161      	movs	r1, #97	; 0x61
   1649a:	9805      	ldr	r0, [sp, #20]
   1649c:	47a0      	blx	r4
   1649e:	4603      	mov	r3, r0
   164a0:	930a      	str	r3, [sp, #40]	; 0x28
    }

    // Wait while the writing the end address
    WaitWhileBusy();
   164a2:	9805      	ldr	r0, [sp, #20]
   164a4:	f7ff fca8 	bl	15df8 <Sd::WaitWhileBusy()>

    // Force return if an error occurred
    if (sd.response.data.byte[0] != 0x00)
   164a8:	f89d 3020 	ldrb.w	r3, [sp, #32]
   164ac:	2b00      	cmp	r3, #0
   164ae:	d009      	beq.n	164c4 <Sd::DeleteBlock(unsigned long, unsigned long)+0xb8>
    {
      LOG_ERROR("Failed to set End Address!");
   164b0:	f240 33ba 	movw	r3, #954	; 0x3ba
   164b4:	4a18      	ldr	r2, [pc, #96]	; (16518 <Sd::DeleteBlock(unsigned long, unsigned long)+0x10c>)
   164b6:	491b      	ldr	r1, [pc, #108]	; (16524 <Sd::DeleteBlock(unsigned long, unsigned long)+0x118>)
   164b8:	481b      	ldr	r0, [pc, #108]	; (16528 <Sd::DeleteBlock(unsigned long, unsigned long)+0x11c>)
   164ba:	f7fd fe6b 	bl	14194 <printf>
      delete_failed = true;
   164be:	2301      	movs	r3, #1
   164c0:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
    }

    // Finally, attempt a delete
    if (!delete_failed)
   164c4:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
   164c8:	f083 0301 	eor.w	r3, r3, #1
   164cc:	b2db      	uxtb	r3, r3
   164ce:	2b00      	cmp	r3, #0
   164d0:	d014      	beq.n	164fc <Sd::DeleteBlock(unsigned long, unsigned long)+0xf0>
    {
      // Issue the delete command to delete from our from:to range
      LOG_DEBUG("Issuing Delete Command...");
      sd.response.length = SendCmd(Command::kDel, 0xFFFFFFFF,
                                   sd.response.data.byte, 100, KeepAlive::kYes);
   164d2:	9b05      	ldr	r3, [sp, #20]
   164d4:	681b      	ldr	r3, [r3, #0]
   164d6:	681c      	ldr	r4, [r3, #0]
      sd.response.length = SendCmd(Command::kDel, 0xFFFFFFFF,
   164d8:	ab06      	add	r3, sp, #24
   164da:	f103 0208 	add.w	r2, r3, #8
   164de:	2301      	movs	r3, #1
   164e0:	9301      	str	r3, [sp, #4]
   164e2:	2364      	movs	r3, #100	; 0x64
   164e4:	9300      	str	r3, [sp, #0]
   164e6:	4613      	mov	r3, r2
   164e8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   164ec:	2166      	movs	r1, #102	; 0x66
   164ee:	9805      	ldr	r0, [sp, #20]
   164f0:	47a0      	blx	r4
   164f2:	4603      	mov	r3, r0
   164f4:	930a      	str	r3, [sp, #40]	; 0x28

      // Wait while the deletion occurs
      WaitWhileBusy();
   164f6:	9805      	ldr	r0, [sp, #20]
   164f8:	f7ff fc7e 	bl	15df8 <Sd::WaitWhileBusy()>
      LOG_DEBUG("[R1 Response: 0x%02X]", sd.response.data.byte[0]);
      LOG_DEBUG("Deletion Complete...");
    }

    // Return status
    return sd.response.data.byte[0];
   164fc:	f89d 4020 	ldrb.w	r4, [sp, #32]
   16500:	462b      	mov	r3, r5
   16502:	4619      	mov	r1, r3
   16504:	4803      	ldr	r0, [pc, #12]	; (16514 <Sd::DeleteBlock(unsigned long, unsigned long)+0x108>)
   16506:	f7fc fbff 	bl	12d08 <__cyg_profile_func_exit>
   1650a:	4623      	mov	r3, r4
  }
   1650c:	4618      	mov	r0, r3
   1650e:	b00f      	add	sp, #60	; 0x3c
   16510:	bd30      	pop	{r4, r5, pc}
   16512:	bf00      	nop
   16514:	0001640d 	.word	0x0001640d
   16518:	00019248 	.word	0x00019248
   1651c:	00018f68 	.word	0x00018f68
   16520:	00018a04 	.word	0x00018a04
   16524:	00018f70 	.word	0x00018f70
   16528:	00018a5c 	.word	0x00018a5c

0001652c <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)>:

  // Send a command
  uint32_t SendCmd(Command sdc, uint32_t arg, uint8_t response_buffer[],
   1652c:	e92d 49f0 	stmdb	sp!, {r4, r5, r6, r7, r8, fp, lr}
   16530:	b08f      	sub	sp, #60	; 0x3c
   16532:	46f0      	mov	r8, lr
   16534:	9003      	str	r0, [sp, #12]
   16536:	9102      	str	r1, [sp, #8]
   16538:	9201      	str	r2, [sp, #4]
   1653a:	9300      	str	r3, [sp, #0]
   1653c:	4643      	mov	r3, r8
   1653e:	4619      	mov	r1, r3
   16540:	4840      	ldr	r0, [pc, #256]	; (16644 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x118>)
   16542:	f7fc fbcd 	bl	12ce0 <__cyg_profile_func_enter>
                   uint32_t delay, KeepAlive keep_alive) override
  {
    ResponseType res_type;
    uint8_t res_len    = 0;
   16546:	2300      	movs	r3, #0
   16548:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
    uint8_t crc        = 0;
   1654c:	2300      	movs	r3, #0
   1654e:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
    uint8_t tries      = 0;
   16552:	2300      	movs	r3, #0
   16554:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
    uint8_t bit_offset = 0;  // determines the distance of the response's
   16558:	2300      	movs	r3, #0
   1655a:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
                             // 0 bit from the MSB place
    uint8_t temp_byte = 0;
   1655e:	2300      	movs	r3, #0
   16560:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f

    // Determine the response type of the set command
    switch (sdc)
   16564:	9b02      	ldr	r3, [sp, #8]
   16566:	2b58      	cmp	r3, #88	; 0x58
   16568:	d052      	beq.n	16610 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0xe4>
   1656a:	2b58      	cmp	r3, #88	; 0x58
   1656c:	dc16      	bgt.n	1659c <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x70>
   1656e:	2b48      	cmp	r3, #72	; 0x48
   16570:	d033      	beq.n	165da <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0xae>
   16572:	2b48      	cmp	r3, #72	; 0x48
   16574:	dc06      	bgt.n	16584 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x58>
   16576:	2b40      	cmp	r3, #64	; 0x40
   16578:	d029      	beq.n	165ce <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0xa2>
   1657a:	2b41      	cmp	r3, #65	; 0x41
   1657c:	d02a      	beq.n	165d4 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0xa8>
   1657e:	2b0d      	cmp	r3, #13
   16580:	d031      	beq.n	165e6 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0xba>
   16582:	e054      	b.n	1662e <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x102>
   16584:	2b50      	cmp	r3, #80	; 0x50
   16586:	d03a      	beq.n	165fe <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0xd2>
   16588:	2b50      	cmp	r3, #80	; 0x50
   1658a:	dc02      	bgt.n	16592 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x66>
   1658c:	2b4c      	cmp	r3, #76	; 0x4c
   1658e:	d027      	beq.n	165e0 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0xb4>
   16590:	e04d      	b.n	1662e <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x102>
   16592:	2b51      	cmp	r3, #81	; 0x51
   16594:	d036      	beq.n	16604 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0xd8>
   16596:	2b52      	cmp	r3, #82	; 0x52
   16598:	d037      	beq.n	1660a <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0xde>
   1659a:	e048      	b.n	1662e <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x102>
   1659c:	2b66      	cmp	r3, #102	; 0x66
   1659e:	d043      	beq.n	16628 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0xfc>
   165a0:	2b66      	cmp	r3, #102	; 0x66
   165a2:	dc06      	bgt.n	165b2 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x86>
   165a4:	2b60      	cmp	r3, #96	; 0x60
   165a6:	d039      	beq.n	1661c <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0xf0>
   165a8:	2b61      	cmp	r3, #97	; 0x61
   165aa:	d03a      	beq.n	16622 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0xf6>
   165ac:	2b59      	cmp	r3, #89	; 0x59
   165ae:	d032      	beq.n	16616 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0xea>
   165b0:	e03d      	b.n	1662e <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x102>
   165b2:	2b77      	cmp	r3, #119	; 0x77
   165b4:	d01a      	beq.n	165ec <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0xc0>
   165b6:	2b77      	cmp	r3, #119	; 0x77
   165b8:	dc02      	bgt.n	165c0 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x94>
   165ba:	2b69      	cmp	r3, #105	; 0x69
   165bc:	d019      	beq.n	165f2 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0xc6>
   165be:	e036      	b.n	1662e <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x102>
   165c0:	2b7a      	cmp	r3, #122	; 0x7a
   165c2:	d019      	beq.n	165f8 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0xcc>
   165c4:	2bff      	cmp	r3, #255	; 0xff
   165c6:	d132      	bne.n	1662e <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x102>
    {
      case Command::kGarbage: res_type = ResponseType::kR1; break;
   165c8:	2300      	movs	r3, #0
   165ca:	930d      	str	r3, [sp, #52]	; 0x34
   165cc:	e042      	b.n	16654 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x128>
      case Command::kReset: res_type = ResponseType::kR1; break;
   165ce:	2300      	movs	r3, #0
   165d0:	930d      	str	r3, [sp, #52]	; 0x34
   165d2:	e03f      	b.n	16654 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x128>
      case Command::kInit: res_type = ResponseType::kR1; break;
   165d4:	2300      	movs	r3, #0
   165d6:	930d      	str	r3, [sp, #52]	; 0x34
   165d8:	e03c      	b.n	16654 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x128>
      case Command::kGetOp: res_type = ResponseType::kR7; break;
   165da:	2307      	movs	r3, #7
   165dc:	930d      	str	r3, [sp, #52]	; 0x34
   165de:	e039      	b.n	16654 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x128>
      case Command::kStopTrans: res_type = ResponseType::kR1; break;
   165e0:	2300      	movs	r3, #0
   165e2:	930d      	str	r3, [sp, #52]	; 0x34
   165e4:	e036      	b.n	16654 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x128>
      case Command::kGetStatus: res_type = ResponseType::kR2; break;
   165e6:	2302      	movs	r3, #2
   165e8:	930d      	str	r3, [sp, #52]	; 0x34
   165ea:	e033      	b.n	16654 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x128>
      case Command::kAcBegin: res_type = ResponseType::kR1; break;
   165ec:	2300      	movs	r3, #0
   165ee:	930d      	str	r3, [sp, #52]	; 0x34
   165f0:	e030      	b.n	16654 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x128>
      case Command::kAcInit: res_type = ResponseType::kR1; break;
   165f2:	2300      	movs	r3, #0
   165f4:	930d      	str	r3, [sp, #52]	; 0x34
   165f6:	e02d      	b.n	16654 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x128>
      case Command::kGetOcr: res_type = ResponseType::kR3; break;
   165f8:	2303      	movs	r3, #3
   165fa:	930d      	str	r3, [sp, #52]	; 0x34
   165fc:	e02a      	b.n	16654 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x128>
      case Command::kChgBlkLen: res_type = ResponseType::kR1; break;
   165fe:	2300      	movs	r3, #0
   16600:	930d      	str	r3, [sp, #52]	; 0x34
   16602:	e027      	b.n	16654 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x128>
      case Command::kReadSingle: res_type = ResponseType::kR1; break;
   16604:	2300      	movs	r3, #0
   16606:	930d      	str	r3, [sp, #52]	; 0x34
   16608:	e024      	b.n	16654 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x128>
      case Command::kReadMulti: res_type = ResponseType::kR1; break;
   1660a:	2300      	movs	r3, #0
   1660c:	930d      	str	r3, [sp, #52]	; 0x34
   1660e:	e021      	b.n	16654 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x128>
      case Command::kWriteSingle: res_type = ResponseType::kR1; break;
   16610:	2300      	movs	r3, #0
   16612:	930d      	str	r3, [sp, #52]	; 0x34
   16614:	e01e      	b.n	16654 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x128>
      case Command::kWriteMulti: res_type = ResponseType::kR1; break;
   16616:	2300      	movs	r3, #0
   16618:	930d      	str	r3, [sp, #52]	; 0x34
   1661a:	e01b      	b.n	16654 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x128>
      case Command::kDelFrom: res_type = ResponseType::kR1; break;
   1661c:	2300      	movs	r3, #0
   1661e:	930d      	str	r3, [sp, #52]	; 0x34
   16620:	e018      	b.n	16654 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x128>
      case Command::kDelTo: res_type = ResponseType::kR1; break;
   16622:	2300      	movs	r3, #0
   16624:	930d      	str	r3, [sp, #52]	; 0x34
   16626:	e015      	b.n	16654 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x128>
      case Command::kDel: res_type = ResponseType::kR1b; break;
   16628:	2301      	movs	r3, #1
   1662a:	930d      	str	r3, [sp, #52]	; 0x34
   1662c:	e012      	b.n	16654 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x128>
      default:
        LOG_ERROR("Unknown response type. Aborting!");
   1662e:	f240 33f3 	movw	r3, #1011	; 0x3f3
   16632:	4a05      	ldr	r2, [pc, #20]	; (16648 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x11c>)
   16634:	4905      	ldr	r1, [pc, #20]	; (1664c <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x120>)
   16636:	4806      	ldr	r0, [pc, #24]	; (16650 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x124>)
   16638:	f7fd fdac 	bl	14194 <printf>
        return -1;
   1663c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   16640:	e1b1      	b.n	169a6 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x47a>
   16642:	bf00      	nop
   16644:	0001652d 	.word	0x0001652d
   16648:	0001927c 	.word	0x0001927c
   1664c:	00018f78 	.word	0x00018f78
   16650:	00018ab0 	.word	0x00018ab0
    // algorithm
    uint8_t msg[5] = { static_cast<uint8_t>(sdc),
                       static_cast<uint8_t>(arg >> 24),
                       static_cast<uint8_t>(arg >> 16),
                       static_cast<uint8_t>(arg >> 8),
                       static_cast<uint8_t>(arg >> 0) };
   16654:	9b02      	ldr	r3, [sp, #8]
   16656:	b2db      	uxtb	r3, r3
   16658:	f88d 3010 	strb.w	r3, [sp, #16]
                       static_cast<uint8_t>(arg >> 24),
   1665c:	9b01      	ldr	r3, [sp, #4]
   1665e:	0e1b      	lsrs	r3, r3, #24
                       static_cast<uint8_t>(arg >> 0) };
   16660:	b2db      	uxtb	r3, r3
   16662:	f88d 3011 	strb.w	r3, [sp, #17]
                       static_cast<uint8_t>(arg >> 16),
   16666:	9b01      	ldr	r3, [sp, #4]
   16668:	0c1b      	lsrs	r3, r3, #16
                       static_cast<uint8_t>(arg >> 0) };
   1666a:	b2db      	uxtb	r3, r3
   1666c:	f88d 3012 	strb.w	r3, [sp, #18]
                       static_cast<uint8_t>(arg >> 8),
   16670:	9b01      	ldr	r3, [sp, #4]
   16672:	0a1b      	lsrs	r3, r3, #8
                       static_cast<uint8_t>(arg >> 0) };
   16674:	b2db      	uxtb	r3, r3
   16676:	f88d 3013 	strb.w	r3, [sp, #19]
   1667a:	9b01      	ldr	r3, [sp, #4]
   1667c:	b2db      	uxtb	r3, r3
   1667e:	f88d 3014 	strb.w	r3, [sp, #20]

    crc = GetCrc7(msg, sizeof(msg));
   16682:	9b03      	ldr	r3, [sp, #12]
   16684:	681b      	ldr	r3, [r3, #0]
   16686:	331c      	adds	r3, #28
   16688:	681b      	ldr	r3, [r3, #0]
   1668a:	a904      	add	r1, sp, #16
   1668c:	2205      	movs	r2, #5
   1668e:	9803      	ldr	r0, [sp, #12]
   16690:	4798      	blx	r3
   16692:	4603      	mov	r3, r0
   16694:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
    if (sdc == Command::kGarbage)
   16698:	9b02      	ldr	r3, [sp, #8]
   1669a:	2bff      	cmp	r3, #255	; 0xff
   1669c:	d102      	bne.n	166a4 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x178>
    {
      crc = 0xFF;
   1669e:	23ff      	movs	r3, #255	; 0xff
   166a0:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
    }

    // Select the SD Card
    chip_select_->SetLow();
   166a4:	9b03      	ldr	r3, [sp, #12]
   166a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   166a8:	9b03      	ldr	r3, [sp, #12]
   166aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   166ac:	681b      	ldr	r3, [r3, #0]
   166ae:	3310      	adds	r3, #16
   166b0:	681b      	ldr	r3, [r3, #0]
   166b2:	4610      	mov	r0, r2
   166b4:	4798      	blx	r3
    chip_select_external_->SetLow();
   166b6:	9b03      	ldr	r3, [sp, #12]
   166b8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
   166ba:	9b03      	ldr	r3, [sp, #12]
   166bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   166be:	681b      	ldr	r3, [r3, #0]
   166c0:	3310      	adds	r3, #16
   166c2:	681b      	ldr	r3, [r3, #0]
   166c4:	4610      	mov	r0, r2
   166c6:	4798      	blx	r3

    // If desired, wait a bit before talking
    if (delay > 0)
   166c8:	9b16      	ldr	r3, [sp, #88]	; 0x58
   166ca:	2b00      	cmp	r3, #0
   166cc:	d007      	beq.n	166de <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x1b2>
    {
      Delay(delay);
   166ce:	9b16      	ldr	r3, [sp, #88]	; 0x58
   166d0:	461a      	mov	r2, r3
   166d2:	f04f 0300 	mov.w	r3, #0
   166d6:	4610      	mov	r0, r2
   166d8:	4619      	mov	r1, r3
   166da:	f7fd fe55 	bl	14388 <Delay(unsigned long long)>
    }

    // Send the desired command frame to the SD card board
    // Begin by transfering the command byte
    ssp_interface_->Transfer(static_cast<uint16_t>(sdc));
   166de:	9b03      	ldr	r3, [sp, #12]
   166e0:	685a      	ldr	r2, [r3, #4]
   166e2:	9b03      	ldr	r3, [sp, #12]
   166e4:	685b      	ldr	r3, [r3, #4]
   166e6:	681b      	ldr	r3, [r3, #0]
   166e8:	3308      	adds	r3, #8
   166ea:	681b      	ldr	r3, [r3, #0]
   166ec:	9902      	ldr	r1, [sp, #8]
   166ee:	b289      	uxth	r1, r1
   166f0:	4610      	mov	r0, r2
   166f2:	4798      	blx	r3
    // Send arg byte [31:24]
    ssp_interface_->Transfer(static_cast<uint16_t>(arg >> 24) & 0xFF);
   166f4:	9b03      	ldr	r3, [sp, #12]
   166f6:	6858      	ldr	r0, [r3, #4]
   166f8:	9b03      	ldr	r3, [sp, #12]
   166fa:	685b      	ldr	r3, [r3, #4]
   166fc:	681b      	ldr	r3, [r3, #0]
   166fe:	3308      	adds	r3, #8
   16700:	681b      	ldr	r3, [r3, #0]
   16702:	9a01      	ldr	r2, [sp, #4]
   16704:	0e12      	lsrs	r2, r2, #24
   16706:	b292      	uxth	r2, r2
   16708:	b2d2      	uxtb	r2, r2
   1670a:	b292      	uxth	r2, r2
   1670c:	4611      	mov	r1, r2
   1670e:	4798      	blx	r3
    // Send arg byte [23:16]
    ssp_interface_->Transfer(static_cast<uint16_t>(arg >> 16) & 0xFF);
   16710:	9b03      	ldr	r3, [sp, #12]
   16712:	6858      	ldr	r0, [r3, #4]
   16714:	9b03      	ldr	r3, [sp, #12]
   16716:	685b      	ldr	r3, [r3, #4]
   16718:	681b      	ldr	r3, [r3, #0]
   1671a:	3308      	adds	r3, #8
   1671c:	681b      	ldr	r3, [r3, #0]
   1671e:	9a01      	ldr	r2, [sp, #4]
   16720:	0c12      	lsrs	r2, r2, #16
   16722:	b292      	uxth	r2, r2
   16724:	b2d2      	uxtb	r2, r2
   16726:	b292      	uxth	r2, r2
   16728:	4611      	mov	r1, r2
   1672a:	4798      	blx	r3
    // Send arg byte [15:8]
    ssp_interface_->Transfer(static_cast<uint16_t>(arg >> 8) & 0xFF);
   1672c:	9b03      	ldr	r3, [sp, #12]
   1672e:	6858      	ldr	r0, [r3, #4]
   16730:	9b03      	ldr	r3, [sp, #12]
   16732:	685b      	ldr	r3, [r3, #4]
   16734:	681b      	ldr	r3, [r3, #0]
   16736:	3308      	adds	r3, #8
   16738:	681b      	ldr	r3, [r3, #0]
   1673a:	9a01      	ldr	r2, [sp, #4]
   1673c:	0a12      	lsrs	r2, r2, #8
   1673e:	b292      	uxth	r2, r2
   16740:	b2d2      	uxtb	r2, r2
   16742:	b292      	uxth	r2, r2
   16744:	4611      	mov	r1, r2
   16746:	4798      	blx	r3
    // Send arg byte [7:0]
    ssp_interface_->Transfer(static_cast<uint16_t>(arg >> 0) & 0xFF);
   16748:	9b03      	ldr	r3, [sp, #12]
   1674a:	685a      	ldr	r2, [r3, #4]
   1674c:	9b03      	ldr	r3, [sp, #12]
   1674e:	685b      	ldr	r3, [r3, #4]
   16750:	681b      	ldr	r3, [r3, #0]
   16752:	3308      	adds	r3, #8
   16754:	681b      	ldr	r3, [r3, #0]
   16756:	9901      	ldr	r1, [sp, #4]
   16758:	b289      	uxth	r1, r1
   1675a:	b2c9      	uxtb	r1, r1
   1675c:	b289      	uxth	r1, r1
   1675e:	4610      	mov	r0, r2
   16760:	4798      	blx	r3
    // Send 7-bit CRC and LSB stop addr (as b1)
    ssp_interface_->Transfer(static_cast<uint16_t>(crc << 1) | 0x01);
   16762:	9b03      	ldr	r3, [sp, #12]
   16764:	6858      	ldr	r0, [r3, #4]
   16766:	9b03      	ldr	r3, [sp, #12]
   16768:	685b      	ldr	r3, [r3, #4]
   1676a:	681b      	ldr	r3, [r3, #0]
   1676c:	3308      	adds	r3, #8
   1676e:	681b      	ldr	r3, [r3, #0]
   16770:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
   16774:	b292      	uxth	r2, r2
   16776:	0052      	lsls	r2, r2, #1
   16778:	b292      	uxth	r2, r2
   1677a:	f042 0201 	orr.w	r2, r2, #1
   1677e:	b292      	uxth	r2, r2
   16780:	4611      	mov	r1, r2
   16782:	4798      	blx	r3

    // Write garbage while waiting for a response
    // Send at least 1 byte of garbage before checking for a response
    temp_byte = static_cast<uint8_t>(ssp_interface_->Transfer(0xFF));
   16784:	9b03      	ldr	r3, [sp, #12]
   16786:	685a      	ldr	r2, [r3, #4]
   16788:	9b03      	ldr	r3, [sp, #12]
   1678a:	685b      	ldr	r3, [r3, #4]
   1678c:	681b      	ldr	r3, [r3, #0]
   1678e:	3308      	adds	r3, #8
   16790:	681b      	ldr	r3, [r3, #0]
   16792:	21ff      	movs	r1, #255	; 0xff
   16794:	4610      	mov	r0, r2
   16796:	4798      	blx	r3
   16798:	4603      	mov	r3, r0
   1679a:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
    while (tries++ < kBusTimeout)
   1679e:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   167a2:	1c5a      	adds	r2, r3, #1
   167a4:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
   167a8:	2bf9      	cmp	r3, #249	; 0xf9
   167aa:	bf94      	ite	ls
   167ac:	2301      	movls	r3, #1
   167ae:	2300      	movhi	r3, #0
   167b0:	b2db      	uxtb	r3, r3
   167b2:	2b00      	cmp	r3, #0
   167b4:	d027      	beq.n	16806 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x2da>
    {
      temp_byte = static_cast<uint8_t>(ssp_interface_->Transfer(0xFF));
   167b6:	9b03      	ldr	r3, [sp, #12]
   167b8:	685a      	ldr	r2, [r3, #4]
   167ba:	9b03      	ldr	r3, [sp, #12]
   167bc:	685b      	ldr	r3, [r3, #4]
   167be:	681b      	ldr	r3, [r3, #0]
   167c0:	3308      	adds	r3, #8
   167c2:	681b      	ldr	r3, [r3, #0]
   167c4:	21ff      	movs	r1, #255	; 0xff
   167c6:	4610      	mov	r0, r2
   167c8:	4798      	blx	r3
   167ca:	4603      	mov	r3, r0
   167cc:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
      if (temp_byte != 0xFF)
   167d0:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
   167d4:	2bff      	cmp	r3, #255	; 0xff
   167d6:	d00f      	beq.n	167f8 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x2cc>
      {
        // Determine the offset, since the first byte of a
        // response will always be 0.
        while (temp_byte & (0x80 >> bit_offset))
   167d8:	f89d 202f 	ldrb.w	r2, [sp, #47]	; 0x2f
   167dc:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
   167e0:	2180      	movs	r1, #128	; 0x80
   167e2:	fa41 f303 	asr.w	r3, r1, r3
   167e6:	4013      	ands	r3, r2
   167e8:	2b00      	cmp	r3, #0
   167ea:	d00b      	beq.n	16804 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x2d8>
        {
          bit_offset++;
   167ec:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
   167f0:	3301      	adds	r3, #1
   167f2:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
        while (temp_byte & (0x80 >> bit_offset))
   167f6:	e7ef      	b.n	167d8 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x2ac>
        }
        break;
      }
      tries++;
   167f8:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   167fc:	3301      	adds	r3, #1
   167fe:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
    while (tries++ < kBusTimeout)
   16802:	e7cc      	b.n	1679e <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x272>
        break;
   16804:	bf00      	nop
    }

    // Determine response length (in bytes) based on response type
    switch (res_type)
   16806:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   16808:	2b07      	cmp	r3, #7
   1680a:	d827      	bhi.n	1685c <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x330>
   1680c:	a201      	add	r2, pc, #4	; (adr r2, 16814 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x2e8>)
   1680e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   16812:	bf00      	nop
   16814:	00016835 	.word	0x00016835
   16818:	0001683d 	.word	0x0001683d
   1681c:	00016845 	.word	0x00016845
   16820:	0001684d 	.word	0x0001684d
   16824:	0001685d 	.word	0x0001685d
   16828:	0001685d 	.word	0x0001685d
   1682c:	0001685d 	.word	0x0001685d
   16830:	00016855 	.word	0x00016855
    {
      case ResponseType::kR1: res_len = 1; break;
   16834:	2301      	movs	r3, #1
   16836:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
   1683a:	e019      	b.n	16870 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x344>
      case ResponseType::kR1b: res_len = 1; break;
   1683c:	2301      	movs	r3, #1
   1683e:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
   16842:	e015      	b.n	16870 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x344>
      case ResponseType::kR2: res_len = 2; break;
   16844:	2302      	movs	r3, #2
   16846:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
   1684a:	e011      	b.n	16870 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x344>
      case ResponseType::kR3: res_len = 5; break;
   1684c:	2305      	movs	r3, #5
   1684e:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
   16852:	e00d      	b.n	16870 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x344>
      case ResponseType::kR7: res_len = 5; break;
   16854:	2305      	movs	r3, #5
   16856:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
   1685a:	e009      	b.n	16870 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x344>
      default:
        LOG_ERROR("Response unsupported in SPI mode. Aborting!");
   1685c:	f240 433a 	movw	r3, #1082	; 0x43a
   16860:	4a56      	ldr	r2, [pc, #344]	; (169bc <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x490>)
   16862:	4957      	ldr	r1, [pc, #348]	; (169c0 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x494>)
   16864:	4857      	ldr	r0, [pc, #348]	; (169c4 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x498>)
   16866:	f7fd fc95 	bl	14194 <printf>
        return -1;
   1686a:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   1686e:	e09a      	b.n	169a6 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x47a>
        break;
    }

    // Acquire the response
    uint64_t temp_response = 0;
   16870:	f04f 0200 	mov.w	r2, #0
   16874:	f04f 0300 	mov.w	r3, #0
   16878:	e9cd 2308 	strd	r2, r3, [sp, #32]
    // Read an extra 8 bits since the response was offset
    uint8_t bytes_to_read =
   1687c:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
   16880:	2b00      	cmp	r3, #0
   16882:	d004      	beq.n	1688e <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x362>
   16884:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
   16888:	3301      	adds	r3, #1
   1688a:	b2db      	uxtb	r3, r3
   1688c:	e001      	b.n	16892 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x366>
   1688e:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
   16892:	f88d 301f 	strb.w	r3, [sp, #31]
        static_cast<uint8_t>((bit_offset > 0) ? res_len + 1 : res_len);
    while (bytes_to_read-- > 0)
   16896:	f89d 301f 	ldrb.w	r3, [sp, #31]
   1689a:	1e5a      	subs	r2, r3, #1
   1689c:	f88d 201f 	strb.w	r2, [sp, #31]
   168a0:	2b00      	cmp	r3, #0
   168a2:	bf14      	ite	ne
   168a4:	2301      	movne	r3, #1
   168a6:	2300      	moveq	r3, #0
   168a8:	b2db      	uxtb	r3, r3
   168aa:	2b00      	cmp	r3, #0
   168ac:	d025      	beq.n	168fa <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x3ce>
    {
      // Make space for the next byte
      temp_response = temp_response << 8;
   168ae:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   168b2:	f04f 0200 	mov.w	r2, #0
   168b6:	f04f 0300 	mov.w	r3, #0
   168ba:	020b      	lsls	r3, r1, #8
   168bc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
   168c0:	0202      	lsls	r2, r0, #8
   168c2:	e9cd 2308 	strd	r2, r3, [sp, #32]
      temp_response |= temp_byte;
   168c6:	f89d b02f 	ldrb.w	fp, [sp, #47]	; 0x2f
   168ca:	f04f 0c00 	mov.w	ip, #0
   168ce:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   168d2:	ea4b 0200 	orr.w	r2, fp, r0
   168d6:	ea4c 0301 	orr.w	r3, ip, r1
   168da:	e9cd 2308 	strd	r2, r3, [sp, #32]
      temp_byte = static_cast<uint8_t>(ssp_interface_->Transfer(0xFF));
   168de:	9b03      	ldr	r3, [sp, #12]
   168e0:	685a      	ldr	r2, [r3, #4]
   168e2:	9b03      	ldr	r3, [sp, #12]
   168e4:	685b      	ldr	r3, [r3, #4]
   168e6:	681b      	ldr	r3, [r3, #0]
   168e8:	3308      	adds	r3, #8
   168ea:	681b      	ldr	r3, [r3, #0]
   168ec:	21ff      	movs	r1, #255	; 0xff
   168ee:	4610      	mov	r0, r2
   168f0:	4798      	blx	r3
   168f2:	4603      	mov	r3, r0
   168f4:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
    while (bytes_to_read-- > 0)
   168f8:	e7cd      	b.n	16896 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x36a>
    }
    // Compensate for the bit offset
    temp_response = temp_response >> bit_offset;
   168fa:	f89d 1030 	ldrb.w	r1, [sp, #48]	; 0x30
   168fe:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   16902:	f1c1 0c20 	rsb	ip, r1, #32
   16906:	f1a1 0020 	sub.w	r0, r1, #32
   1690a:	fa22 f401 	lsr.w	r4, r2, r1
   1690e:	fa03 fc0c 	lsl.w	ip, r3, ip
   16912:	ea44 040c 	orr.w	r4, r4, ip
   16916:	fa23 f000 	lsr.w	r0, r3, r0
   1691a:	4304      	orrs	r4, r0
   1691c:	fa23 f501 	lsr.w	r5, r3, r1
   16920:	e9cd 4508 	strd	r4, r5, [sp, #32]

    // Only write to the response buffer if it is provided
    if (response_buffer != nullptr)
   16924:	9b00      	ldr	r3, [sp, #0]
   16926:	2b00      	cmp	r3, #0
   16928:	d025      	beq.n	16976 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x44a>
    {
      for (int i = 0; i < res_len; i++)
   1692a:	2300      	movs	r3, #0
   1692c:	9306      	str	r3, [sp, #24]
   1692e:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
   16932:	9a06      	ldr	r2, [sp, #24]
   16934:	429a      	cmp	r2, r3
   16936:	da1e      	bge.n	16976 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x44a>
      {
        response_buffer[i] =
            static_cast<uint8_t>(temp_response >> 8 * (res_len - 1 - i));
   16938:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
   1693c:	1e5a      	subs	r2, r3, #1
   1693e:	9b06      	ldr	r3, [sp, #24]
   16940:	1ad3      	subs	r3, r2, r3
   16942:	00da      	lsls	r2, r3, #3
   16944:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   16948:	f1c2 0020 	rsb	r0, r2, #32
   1694c:	f1a2 0120 	sub.w	r1, r2, #32
   16950:	fa23 f602 	lsr.w	r6, r3, r2
   16954:	fa04 f000 	lsl.w	r0, r4, r0
   16958:	4306      	orrs	r6, r0
   1695a:	fa24 f101 	lsr.w	r1, r4, r1
   1695e:	430e      	orrs	r6, r1
   16960:	fa24 f702 	lsr.w	r7, r4, r2
        response_buffer[i] =
   16964:	9b06      	ldr	r3, [sp, #24]
   16966:	9a00      	ldr	r2, [sp, #0]
   16968:	4413      	add	r3, r2
   1696a:	b2f2      	uxtb	r2, r6
   1696c:	701a      	strb	r2, [r3, #0]
      for (int i = 0; i < res_len; i++)
   1696e:	9b06      	ldr	r3, [sp, #24]
   16970:	3301      	adds	r3, #1
   16972:	9306      	str	r3, [sp, #24]
   16974:	e7db      	b.n	1692e <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x402>
      }
    }

    // Only end the transaction if keep_alive isn't requested
    if (keep_alive == KeepAlive::kNo)
   16976:	f89d 305c 	ldrb.w	r3, [sp, #92]	; 0x5c
   1697a:	2b00      	cmp	r3, #0
   1697c:	d111      	bne.n	169a2 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x476>
    {
      // Deselect the SPI comm board
      chip_select_->SetHigh();
   1697e:	9b03      	ldr	r3, [sp, #12]
   16980:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   16982:	9b03      	ldr	r3, [sp, #12]
   16984:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   16986:	681b      	ldr	r3, [r3, #0]
   16988:	330c      	adds	r3, #12
   1698a:	681b      	ldr	r3, [r3, #0]
   1698c:	4610      	mov	r0, r2
   1698e:	4798      	blx	r3
      chip_select_external_->SetHigh();
   16990:	9b03      	ldr	r3, [sp, #12]
   16992:	6bda      	ldr	r2, [r3, #60]	; 0x3c
   16994:	9b03      	ldr	r3, [sp, #12]
   16996:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   16998:	681b      	ldr	r3, [r3, #0]
   1699a:	330c      	adds	r3, #12
   1699c:	681b      	ldr	r3, [r3, #0]
   1699e:	4610      	mov	r0, r2
   169a0:	4798      	blx	r3
    }
    return res_len;
   169a2:	f89d 4033 	ldrb.w	r4, [sp, #51]	; 0x33
   169a6:	4643      	mov	r3, r8
   169a8:	4619      	mov	r1, r3
   169aa:	4807      	ldr	r0, [pc, #28]	; (169c8 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x49c>)
   169ac:	f7fc f9ac 	bl	12d08 <__cyg_profile_func_exit>
   169b0:	4623      	mov	r3, r4
  }
   169b2:	4618      	mov	r0, r3
   169b4:	b00f      	add	sp, #60	; 0x3c
   169b6:	e8bd 89f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, fp, pc}
   169ba:	bf00      	nop
   169bc:	0001927c 	.word	0x0001927c
   169c0:	00018f80 	.word	0x00018f80
   169c4:	00018b0c 	.word	0x00018b0c
   169c8:	0001652d 	.word	0x0001652d

000169cc <Sd::Crc7Add(unsigned char, unsigned char)>:

  // Adds a message byte to the current CRC-7 to get a the new CRC-7
  uint8_t Crc7Add(uint8_t crc, uint8_t message_byte) override
   169cc:	b530      	push	{r4, r5, lr}
   169ce:	b083      	sub	sp, #12
   169d0:	4675      	mov	r5, lr
   169d2:	9001      	str	r0, [sp, #4]
   169d4:	460b      	mov	r3, r1
   169d6:	f88d 3003 	strb.w	r3, [sp, #3]
   169da:	4613      	mov	r3, r2
   169dc:	f88d 3002 	strb.w	r3, [sp, #2]
   169e0:	462b      	mov	r3, r5
   169e2:	4619      	mov	r1, r3
   169e4:	4809      	ldr	r0, [pc, #36]	; (16a0c <Sd::Crc7Add(unsigned char, unsigned char)+0x40>)
   169e6:	f7fc f97b 	bl	12ce0 <__cyg_profile_func_enter>
  {
    return kCrcTable8.crc_table[(crc << 1) ^ message_byte];
   169ea:	f89d 3003 	ldrb.w	r3, [sp, #3]
   169ee:	005a      	lsls	r2, r3, #1
   169f0:	f89d 3002 	ldrb.w	r3, [sp, #2]
   169f4:	4053      	eors	r3, r2
   169f6:	4a06      	ldr	r2, [pc, #24]	; (16a10 <Sd::Crc7Add(unsigned char, unsigned char)+0x44>)
   169f8:	5cd4      	ldrb	r4, [r2, r3]
   169fa:	462b      	mov	r3, r5
   169fc:	4619      	mov	r1, r3
   169fe:	4803      	ldr	r0, [pc, #12]	; (16a0c <Sd::Crc7Add(unsigned char, unsigned char)+0x40>)
   16a00:	f7fc f982 	bl	12d08 <__cyg_profile_func_exit>
   16a04:	4623      	mov	r3, r4
  }
   16a06:	4618      	mov	r0, r3
   16a08:	b003      	add	sp, #12
   16a0a:	bd30      	pop	{r4, r5, pc}
   16a0c:	000169cd 	.word	0x000169cd
   16a10:	00018bf0 	.word	0x00018bf0

00016a14 <Sd::GetCrc7(unsigned char*, unsigned char)>:

  // Returns the CRC-7 for a message of "length" bytes
  uint8_t GetCrc7(uint8_t * message, uint8_t length) override
   16a14:	b530      	push	{r4, r5, lr}
   16a16:	b087      	sub	sp, #28
   16a18:	4675      	mov	r5, lr
   16a1a:	9003      	str	r0, [sp, #12]
   16a1c:	9102      	str	r1, [sp, #8]
   16a1e:	4613      	mov	r3, r2
   16a20:	f88d 3007 	strb.w	r3, [sp, #7]
   16a24:	462b      	mov	r3, r5
   16a26:	4619      	mov	r1, r3
   16a28:	4815      	ldr	r0, [pc, #84]	; (16a80 <Sd::GetCrc7(unsigned char*, unsigned char)+0x6c>)
   16a2a:	f7fc f959 	bl	12ce0 <__cyg_profile_func_enter>
  {
    uint8_t crc = 0;
   16a2e:	2300      	movs	r3, #0
   16a30:	f88d 3017 	strb.w	r3, [sp, #23]
    for (int i = 0; i < length; i++)
   16a34:	2300      	movs	r3, #0
   16a36:	9304      	str	r3, [sp, #16]
   16a38:	f89d 3007 	ldrb.w	r3, [sp, #7]
   16a3c:	9a04      	ldr	r2, [sp, #16]
   16a3e:	429a      	cmp	r2, r3
   16a40:	da12      	bge.n	16a68 <Sd::GetCrc7(unsigned char*, unsigned char)+0x54>
    {
      crc = Crc7Add(crc, message[i]);
   16a42:	9b03      	ldr	r3, [sp, #12]
   16a44:	681b      	ldr	r3, [r3, #0]
   16a46:	3318      	adds	r3, #24
   16a48:	681b      	ldr	r3, [r3, #0]
   16a4a:	9a04      	ldr	r2, [sp, #16]
   16a4c:	9902      	ldr	r1, [sp, #8]
   16a4e:	440a      	add	r2, r1
   16a50:	7812      	ldrb	r2, [r2, #0]
   16a52:	f89d 1017 	ldrb.w	r1, [sp, #23]
   16a56:	9803      	ldr	r0, [sp, #12]
   16a58:	4798      	blx	r3
   16a5a:	4603      	mov	r3, r0
   16a5c:	f88d 3017 	strb.w	r3, [sp, #23]
    for (int i = 0; i < length; i++)
   16a60:	9b04      	ldr	r3, [sp, #16]
   16a62:	3301      	adds	r3, #1
   16a64:	9304      	str	r3, [sp, #16]
   16a66:	e7e7      	b.n	16a38 <Sd::GetCrc7(unsigned char*, unsigned char)+0x24>
    }
    return crc;
   16a68:	f89d 4017 	ldrb.w	r4, [sp, #23]
   16a6c:	462b      	mov	r3, r5
   16a6e:	4619      	mov	r1, r3
   16a70:	4803      	ldr	r0, [pc, #12]	; (16a80 <Sd::GetCrc7(unsigned char*, unsigned char)+0x6c>)
   16a72:	f7fc f949 	bl	12d08 <__cyg_profile_func_exit>
   16a76:	4623      	mov	r3, r4
  }
   16a78:	4618      	mov	r0, r3
   16a7a:	b007      	add	sp, #28
   16a7c:	bd30      	pop	{r4, r5, pc}
   16a7e:	bf00      	nop
   16a80:	00016a15 	.word	0x00016a15

00016a84 <Sd::GetCrc16(unsigned char*, unsigned short)>:

  // Returns CCITT CRC-16 for a message of "length" bytes
  uint16_t GetCrc16(uint8_t * message, uint16_t length) override
   16a84:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
   16a88:	b08c      	sub	sp, #48	; 0x30
   16a8a:	4677      	mov	r7, lr
   16a8c:	9003      	str	r0, [sp, #12]
   16a8e:	9102      	str	r1, [sp, #8]
   16a90:	4613      	mov	r3, r2
   16a92:	f8ad 3006 	strh.w	r3, [sp, #6]
   16a96:	463b      	mov	r3, r7
   16a98:	4619      	mov	r1, r3
   16a9a:	4837      	ldr	r0, [pc, #220]	; (16b78 <Sd::GetCrc16(unsigned char*, unsigned short)+0xf4>)
   16a9c:	f7fc f920 	bl	12ce0 <__cyg_profile_func_enter>
  {
    uint64_t crc = 0x0000;
   16aa0:	f04f 0300 	mov.w	r3, #0
   16aa4:	f04f 0400 	mov.w	r4, #0
   16aa8:	e9cd 340a 	strd	r3, r4, [sp, #40]	; 0x28
    uint64_t temp;
    uint64_t final_value = 0;
   16aac:	f04f 0300 	mov.w	r3, #0
   16ab0:	f04f 0400 	mov.w	r4, #0
   16ab4:	e9cd 3406 	strd	r3, r4, [sp, #24]

    for (uint64_t count = 0; count < length; ++count)
   16ab8:	f04f 0300 	mov.w	r3, #0
   16abc:	f04f 0400 	mov.w	r4, #0
   16ac0:	e9cd 3408 	strd	r3, r4, [sp, #32]
   16ac4:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   16ac8:	f04f 0400 	mov.w	r4, #0
   16acc:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
   16ad0:	42a2      	cmp	r2, r4
   16ad2:	bf08      	it	eq
   16ad4:	4299      	cmpeq	r1, r3
   16ad6:	d23f      	bcs.n	16b58 <Sd::GetCrc16(unsigned char*, unsigned short)+0xd4>
    {
      temp = (*message++ ^ (crc >> 8)) & 0xff;
   16ad8:	9b02      	ldr	r3, [sp, #8]
   16ada:	1c5a      	adds	r2, r3, #1
   16adc:	9202      	str	r2, [sp, #8]
   16ade:	781b      	ldrb	r3, [r3, #0]
   16ae0:	b2dd      	uxtb	r5, r3
   16ae2:	f04f 0600 	mov.w	r6, #0
   16ae6:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
   16aea:	f04f 0300 	mov.w	r3, #0
   16aee:	f04f 0400 	mov.w	r4, #0
   16af2:	0a0b      	lsrs	r3, r1, #8
   16af4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
   16af8:	0a14      	lsrs	r4, r2, #8
   16afa:	ea83 0b05 	eor.w	fp, r3, r5
   16afe:	ea84 0c06 	eor.w	ip, r4, r6
   16b02:	f04f 01ff 	mov.w	r1, #255	; 0xff
   16b06:	f04f 0200 	mov.w	r2, #0
   16b0a:	ea0b 0301 	and.w	r3, fp, r1
   16b0e:	ea0c 0402 	and.w	r4, ip, r2
   16b12:	e9cd 3404 	strd	r3, r4, [sp, #16]
      crc  = kCrcTable16.crc_table[temp] ^ (crc << 8);
   16b16:	4a19      	ldr	r2, [pc, #100]	; (16b7c <Sd::GetCrc16(unsigned char*, unsigned short)+0xf8>)
   16b18:	9b04      	ldr	r3, [sp, #16]
   16b1a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
   16b1e:	b29d      	uxth	r5, r3
   16b20:	f04f 0600 	mov.w	r6, #0
   16b24:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
   16b28:	f04f 0b00 	mov.w	fp, #0
   16b2c:	f04f 0c00 	mov.w	ip, #0
   16b30:	ea4f 2c02 	mov.w	ip, r2, lsl #8
   16b34:	ea4c 6c11 	orr.w	ip, ip, r1, lsr #24
   16b38:	ea4f 2b01 	mov.w	fp, r1, lsl #8
   16b3c:	ea8b 0305 	eor.w	r3, fp, r5
   16b40:	ea8c 0406 	eor.w	r4, ip, r6
   16b44:	e9cd 340a 	strd	r3, r4, [sp, #40]	; 0x28
    for (uint64_t count = 0; count < length; ++count)
   16b48:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   16b4c:	1c59      	adds	r1, r3, #1
   16b4e:	f144 0200 	adc.w	r2, r4, #0
   16b52:	e9cd 1208 	strd	r1, r2, [sp, #32]
   16b56:	e7b5      	b.n	16ac4 <Sd::GetCrc16(unsigned char*, unsigned short)+0x40>
    }

    return static_cast<uint16_t>(crc ^ final_value);
   16b58:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
   16b5c:	f8bd 3018 	ldrh.w	r3, [sp, #24]
   16b60:	4053      	eors	r3, r2
   16b62:	b29c      	uxth	r4, r3
   16b64:	463b      	mov	r3, r7
   16b66:	4619      	mov	r1, r3
   16b68:	4803      	ldr	r0, [pc, #12]	; (16b78 <Sd::GetCrc16(unsigned char*, unsigned short)+0xf4>)
   16b6a:	f7fc f8cd 	bl	12d08 <__cyg_profile_func_exit>
   16b6e:	4623      	mov	r3, r4
  }
   16b70:	4618      	mov	r0, r3
   16b72:	b00c      	add	sp, #48	; 0x30
   16b74:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
   16b78:	00016a85 	.word	0x00016a85
   16b7c:	00018cf0 	.word	0x00018cf0

00016b80 <Status Wait<Wait(unsigned long long)::{lambda()#1}>(unsigned long long, Wait(unsigned long long)::{lambda()#1})>:
inline Status Wait(uint64_t timeout, F is_done)
   16b80:	e92d 4830 	stmdb	sp!, {r4, r5, fp, lr}
   16b84:	b088      	sub	sp, #32
   16b86:	4675      	mov	r5, lr
   16b88:	e9cd 0102 	strd	r0, r1, [sp, #8]
   16b8c:	f88d 2004 	strb.w	r2, [sp, #4]
   16b90:	462b      	mov	r3, r5
   16b92:	4619      	mov	r1, r3
   16b94:	4824      	ldr	r0, [pc, #144]	; (16c28 <Status Wait<Wait(unsigned long long)::{lambda()#1}>(unsigned long long, Wait(unsigned long long)::{lambda()#1})+0xa8>)
   16b96:	f7fc f8a3 	bl	12ce0 <__cyg_profile_func_enter>
  uint64_t timeout_time = 0;
   16b9a:	f04f 0300 	mov.w	r3, #0
   16b9e:	f04f 0400 	mov.w	r4, #0
   16ba2:	e9cd 3406 	strd	r3, r4, [sp, #24]
  if (timeout == kMaxWait)
   16ba6:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
   16baa:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
   16bae:	bf08      	it	eq
   16bb0:	f1b3 3fff 	cmpeq.w	r3, #4294967295	; 0xffffffff
   16bb4:	d106      	bne.n	16bc4 <Status Wait<Wait(unsigned long long)::{lambda()#1}>(unsigned long long, Wait(unsigned long long)::{lambda()#1})+0x44>
    timeout_time = kMaxWait;
   16bb6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   16bba:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   16bbe:	e9cd 3406 	strd	r3, r4, [sp, #24]
   16bc2:	e00b      	b.n	16bdc <Status Wait<Wait(unsigned long long)::{lambda()#1}>(unsigned long long, Wait(unsigned long long)::{lambda()#1})+0x5c>
    timeout_time = Milliseconds() + timeout;
   16bc4:	f7f9 fedc 	bl	10980 <Milliseconds()>
   16bc8:	460a      	mov	r2, r1
   16bca:	4601      	mov	r1, r0
   16bcc:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
   16bd0:	eb13 0b01 	adds.w	fp, r3, r1
   16bd4:	eb44 0c02 	adc.w	ip, r4, r2
   16bd8:	e9cd bc06 	strd	fp, ip, [sp, #24]
  Status status = Status::kTimedOut;
   16bdc:	2301      	movs	r3, #1
   16bde:	9305      	str	r3, [sp, #20]
  while (Milliseconds() < timeout_time)
   16be0:	f7f9 fece 	bl	10980 <Milliseconds()>
   16be4:	460a      	mov	r2, r1
   16be6:	4601      	mov	r1, r0
   16be8:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
   16bec:	42a2      	cmp	r2, r4
   16bee:	bf08      	it	eq
   16bf0:	4299      	cmpeq	r1, r3
   16bf2:	bf34      	ite	cc
   16bf4:	2301      	movcc	r3, #1
   16bf6:	2300      	movcs	r3, #0
   16bf8:	b2db      	uxtb	r3, r3
   16bfa:	2b00      	cmp	r3, #0
   16bfc:	d008      	beq.n	16c10 <Status Wait<Wait(unsigned long long)::{lambda()#1}>(unsigned long long, Wait(unsigned long long)::{lambda()#1})+0x90>
    if (is_done())
   16bfe:	ab01      	add	r3, sp, #4
   16c00:	4618      	mov	r0, r3
   16c02:	f7fd fb33 	bl	1426c <Wait(unsigned long long)::{lambda()#1}::operator()() const>
   16c06:	4603      	mov	r3, r0
   16c08:	2b00      	cmp	r3, #0
   16c0a:	d0e9      	beq.n	16be0 <Status Wait<Wait(unsigned long long)::{lambda()#1}>(unsigned long long, Wait(unsigned long long)::{lambda()#1})+0x60>
      status = Status::kSuccess;
   16c0c:	2300      	movs	r3, #0
   16c0e:	9305      	str	r3, [sp, #20]
  return status;
   16c10:	9c05      	ldr	r4, [sp, #20]
   16c12:	462b      	mov	r3, r5
   16c14:	4619      	mov	r1, r3
   16c16:	4804      	ldr	r0, [pc, #16]	; (16c28 <Status Wait<Wait(unsigned long long)::{lambda()#1}>(unsigned long long, Wait(unsigned long long)::{lambda()#1})+0xa8>)
   16c18:	f7fc f876 	bl	12d08 <__cyg_profile_func_exit>
   16c1c:	4623      	mov	r3, r4
}
   16c1e:	4618      	mov	r0, r3
   16c20:	b008      	add	sp, #32
   16c22:	e8bd 8830 	ldmia.w	sp!, {r4, r5, fp, pc}
   16c26:	bf00      	nop
   16c28:	00016b81 	.word	0x00016b81

00016c2c <unsigned long bit::Set<unsigned long>(unsigned long, unsigned long)>:
constexpr T Set(T target, uint32_t position)
   16c2c:	b530      	push	{r4, r5, lr}
   16c2e:	b083      	sub	sp, #12
   16c30:	4675      	mov	r5, lr
   16c32:	9001      	str	r0, [sp, #4]
   16c34:	9100      	str	r1, [sp, #0]
   16c36:	462b      	mov	r3, r5
   16c38:	4619      	mov	r1, r3
   16c3a:	480a      	ldr	r0, [pc, #40]	; (16c64 <unsigned long bit::Set<unsigned long>(unsigned long, unsigned long)+0x38>)
   16c3c:	f7fc f850 	bl	12ce0 <__cyg_profile_func_enter>
  return target | (1 << position);
   16c40:	2201      	movs	r2, #1
   16c42:	9b00      	ldr	r3, [sp, #0]
   16c44:	fa02 f303 	lsl.w	r3, r2, r3
   16c48:	461a      	mov	r2, r3
   16c4a:	9b01      	ldr	r3, [sp, #4]
   16c4c:	ea42 0403 	orr.w	r4, r2, r3
   16c50:	462b      	mov	r3, r5
   16c52:	4619      	mov	r1, r3
   16c54:	4803      	ldr	r0, [pc, #12]	; (16c64 <unsigned long bit::Set<unsigned long>(unsigned long, unsigned long)+0x38>)
   16c56:	f7fc f857 	bl	12d08 <__cyg_profile_func_exit>
   16c5a:	4623      	mov	r3, r4
}
   16c5c:	4618      	mov	r0, r3
   16c5e:	b003      	add	sp, #12
   16c60:	bd30      	pop	{r4, r5, pc}
   16c62:	bf00      	nop
   16c64:	00016c2d 	.word	0x00016c2d

00016c68 <bool bit::Read<unsigned long>(unsigned long, unsigned long)>:
[[gnu::always_inline]][[nodiscard]] constexpr bool Read(T target,
   16c68:	b530      	push	{r4, r5, lr}
   16c6a:	b083      	sub	sp, #12
   16c6c:	4675      	mov	r5, lr
   16c6e:	9001      	str	r0, [sp, #4]
   16c70:	9100      	str	r1, [sp, #0]
   16c72:	462b      	mov	r3, r5
   16c74:	4619      	mov	r1, r3
   16c76:	480c      	ldr	r0, [pc, #48]	; (16ca8 <bool bit::Read<unsigned long>(unsigned long, unsigned long)+0x40>)
   16c78:	f7fc f832 	bl	12ce0 <__cyg_profile_func_enter>
  return static_cast<bool>(target & (1 << position));
   16c7c:	2201      	movs	r2, #1
   16c7e:	9b00      	ldr	r3, [sp, #0]
   16c80:	fa02 f303 	lsl.w	r3, r2, r3
   16c84:	461a      	mov	r2, r3
   16c86:	9b01      	ldr	r3, [sp, #4]
   16c88:	4013      	ands	r3, r2
   16c8a:	2b00      	cmp	r3, #0
   16c8c:	bf14      	ite	ne
   16c8e:	2301      	movne	r3, #1
   16c90:	2300      	moveq	r3, #0
   16c92:	b2dc      	uxtb	r4, r3
   16c94:	462b      	mov	r3, r5
   16c96:	4619      	mov	r1, r3
   16c98:	4803      	ldr	r0, [pc, #12]	; (16ca8 <bool bit::Read<unsigned long>(unsigned long, unsigned long)+0x40>)
   16c9a:	f7fc f835 	bl	12d08 <__cyg_profile_func_exit>
   16c9e:	4623      	mov	r3, r4
}
   16ca0:	4618      	mov	r0, r3
   16ca2:	b003      	add	sp, #12
   16ca4:	bd30      	pop	{r4, r5, pc}
   16ca6:	bf00      	nop
   16ca8:	00016c69 	.word	0x00016c69

00016cac <unsigned long bit::Insert<unsigned long, unsigned char>(unsigned long, unsigned char, unsigned long, unsigned long)>:
constexpr T Insert(T target, U value, uint32_t position, uint32_t width = 1)
   16cac:	b530      	push	{r4, r5, lr}
   16cae:	b089      	sub	sp, #36	; 0x24
   16cb0:	4675      	mov	r5, lr
   16cb2:	9003      	str	r0, [sp, #12]
   16cb4:	9201      	str	r2, [sp, #4]
   16cb6:	9300      	str	r3, [sp, #0]
   16cb8:	460b      	mov	r3, r1
   16cba:	f88d 300b 	strb.w	r3, [sp, #11]
   16cbe:	462b      	mov	r3, r5
   16cc0:	4619      	mov	r1, r3
   16cc2:	4816      	ldr	r0, [pc, #88]	; (16d1c <unsigned long bit::Insert<unsigned long, unsigned char>(unsigned long, unsigned char, unsigned long, unsigned long)+0x70>)
   16cc4:	f7fc f80c 	bl	12ce0 <__cyg_profile_func_enter>
  constexpr UnsignedT kFieldOfOnes = GenerateFieldOfOnes<T>();
   16cc8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   16ccc:	9307      	str	r3, [sp, #28]
  constexpr size_t kTargetWidth     = sizeof(T) * 8;
   16cce:	2320      	movs	r3, #32
   16cd0:	9306      	str	r3, [sp, #24]
  UnsignedT mask   = kFieldOfOnes >> (kTargetWidth - width);
   16cd2:	9b00      	ldr	r3, [sp, #0]
   16cd4:	f1c3 0320 	rsb	r3, r3, #32
   16cd8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   16cdc:	fa22 f303 	lsr.w	r3, r2, r3
   16ce0:	9305      	str	r3, [sp, #20]
  target &= ~(mask << position);
   16ce2:	9a05      	ldr	r2, [sp, #20]
   16ce4:	9b01      	ldr	r3, [sp, #4]
   16ce6:	fa02 f303 	lsl.w	r3, r2, r3
   16cea:	43db      	mvns	r3, r3
   16cec:	9a03      	ldr	r2, [sp, #12]
   16cee:	4013      	ands	r3, r2
   16cf0:	9303      	str	r3, [sp, #12]
  target |= (value & mask) << position;
   16cf2:	f89d 200b 	ldrb.w	r2, [sp, #11]
   16cf6:	9b05      	ldr	r3, [sp, #20]
   16cf8:	401a      	ands	r2, r3
   16cfa:	9b01      	ldr	r3, [sp, #4]
   16cfc:	fa02 f303 	lsl.w	r3, r2, r3
   16d00:	9a03      	ldr	r2, [sp, #12]
   16d02:	4313      	orrs	r3, r2
   16d04:	9303      	str	r3, [sp, #12]
  return target;
   16d06:	9c03      	ldr	r4, [sp, #12]
   16d08:	462b      	mov	r3, r5
   16d0a:	4619      	mov	r1, r3
   16d0c:	4803      	ldr	r0, [pc, #12]	; (16d1c <unsigned long bit::Insert<unsigned long, unsigned char>(unsigned long, unsigned char, unsigned long, unsigned long)+0x70>)
   16d0e:	f7fb fffb 	bl	12d08 <__cyg_profile_func_exit>
   16d12:	4623      	mov	r3, r4
}
   16d14:	4618      	mov	r0, r3
   16d16:	b009      	add	sp, #36	; 0x24
   16d18:	bd30      	pop	{r4, r5, pc}
   16d1a:	bf00      	nop
   16d1c:	00016cad 	.word	0x00016cad

00016d20 <unsigned long bit::Extract<unsigned long>(unsigned long, unsigned long, unsigned long)>:
constexpr T Extract(T target, uint32_t position, uint32_t width = 1)
   16d20:	b530      	push	{r4, r5, lr}
   16d22:	b089      	sub	sp, #36	; 0x24
   16d24:	4675      	mov	r5, lr
   16d26:	9003      	str	r0, [sp, #12]
   16d28:	9102      	str	r1, [sp, #8]
   16d2a:	9201      	str	r2, [sp, #4]
   16d2c:	462b      	mov	r3, r5
   16d2e:	4619      	mov	r1, r3
   16d30:	480f      	ldr	r0, [pc, #60]	; (16d70 <unsigned long bit::Extract<unsigned long>(unsigned long, unsigned long, unsigned long)+0x50>)
   16d32:	f7fb ffd5 	bl	12ce0 <__cyg_profile_func_enter>
  constexpr UnsignedT kFieldOfOnes = GenerateFieldOfOnes<T>();
   16d36:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   16d3a:	9307      	str	r3, [sp, #28]
  constexpr size_t kTargetWidth     = sizeof(T) * 8;
   16d3c:	2320      	movs	r3, #32
   16d3e:	9306      	str	r3, [sp, #24]
  UnsignedT mask   = kFieldOfOnes >> (kTargetWidth - width);
   16d40:	9b01      	ldr	r3, [sp, #4]
   16d42:	f1c3 0320 	rsb	r3, r3, #32
   16d46:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   16d4a:	fa22 f303 	lsr.w	r3, r2, r3
   16d4e:	9305      	str	r3, [sp, #20]
  return (target >> position) & mask;
   16d50:	9a03      	ldr	r2, [sp, #12]
   16d52:	9b02      	ldr	r3, [sp, #8]
   16d54:	40da      	lsrs	r2, r3
   16d56:	9b05      	ldr	r3, [sp, #20]
   16d58:	ea02 0403 	and.w	r4, r2, r3
   16d5c:	462b      	mov	r3, r5
   16d5e:	4619      	mov	r1, r3
   16d60:	4803      	ldr	r0, [pc, #12]	; (16d70 <unsigned long bit::Extract<unsigned long>(unsigned long, unsigned long, unsigned long)+0x50>)
   16d62:	f7fb ffd1 	bl	12d08 <__cyg_profile_func_exit>
   16d66:	4623      	mov	r3, r4
}
   16d68:	4618      	mov	r0, r3
   16d6a:	b009      	add	sp, #36	; 0x24
   16d6c:	bd30      	pop	{r4, r5, pc}
   16d6e:	bf00      	nop
   16d70:	00016d21 	.word	0x00016d21

00016d74 <unsigned long bit::Insert<unsigned long, bool>(unsigned long, bool, unsigned long, unsigned long)>:
constexpr T Insert(T target, U value, uint32_t position, uint32_t width = 1)
   16d74:	b530      	push	{r4, r5, lr}
   16d76:	b089      	sub	sp, #36	; 0x24
   16d78:	4675      	mov	r5, lr
   16d7a:	9003      	str	r0, [sp, #12]
   16d7c:	9201      	str	r2, [sp, #4]
   16d7e:	9300      	str	r3, [sp, #0]
   16d80:	460b      	mov	r3, r1
   16d82:	f88d 300b 	strb.w	r3, [sp, #11]
   16d86:	462b      	mov	r3, r5
   16d88:	4619      	mov	r1, r3
   16d8a:	4816      	ldr	r0, [pc, #88]	; (16de4 <unsigned long bit::Insert<unsigned long, bool>(unsigned long, bool, unsigned long, unsigned long)+0x70>)
   16d8c:	f7fb ffa8 	bl	12ce0 <__cyg_profile_func_enter>
  constexpr UnsignedT kFieldOfOnes = GenerateFieldOfOnes<T>();
   16d90:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   16d94:	9307      	str	r3, [sp, #28]
  constexpr size_t kTargetWidth     = sizeof(T) * 8;
   16d96:	2320      	movs	r3, #32
   16d98:	9306      	str	r3, [sp, #24]
  UnsignedT mask   = kFieldOfOnes >> (kTargetWidth - width);
   16d9a:	9b00      	ldr	r3, [sp, #0]
   16d9c:	f1c3 0320 	rsb	r3, r3, #32
   16da0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   16da4:	fa22 f303 	lsr.w	r3, r2, r3
   16da8:	9305      	str	r3, [sp, #20]
  target &= ~(mask << position);
   16daa:	9a05      	ldr	r2, [sp, #20]
   16dac:	9b01      	ldr	r3, [sp, #4]
   16dae:	fa02 f303 	lsl.w	r3, r2, r3
   16db2:	43db      	mvns	r3, r3
   16db4:	9a03      	ldr	r2, [sp, #12]
   16db6:	4013      	ands	r3, r2
   16db8:	9303      	str	r3, [sp, #12]
  target |= (value & mask) << position;
   16dba:	f89d 200b 	ldrb.w	r2, [sp, #11]
   16dbe:	9b05      	ldr	r3, [sp, #20]
   16dc0:	401a      	ands	r2, r3
   16dc2:	9b01      	ldr	r3, [sp, #4]
   16dc4:	fa02 f303 	lsl.w	r3, r2, r3
   16dc8:	9a03      	ldr	r2, [sp, #12]
   16dca:	4313      	orrs	r3, r2
   16dcc:	9303      	str	r3, [sp, #12]
  return target;
   16dce:	9c03      	ldr	r4, [sp, #12]
   16dd0:	462b      	mov	r3, r5
   16dd2:	4619      	mov	r1, r3
   16dd4:	4803      	ldr	r0, [pc, #12]	; (16de4 <unsigned long bit::Insert<unsigned long, bool>(unsigned long, bool, unsigned long, unsigned long)+0x70>)
   16dd6:	f7fb ff97 	bl	12d08 <__cyg_profile_func_exit>
   16dda:	4623      	mov	r3, r4
}
   16ddc:	4618      	mov	r0, r3
   16dde:	b009      	add	sp, #36	; 0x24
   16de0:	bd30      	pop	{r4, r5, pc}
   16de2:	bf00      	nop
   16de4:	00016d75 	.word	0x00016d75

00016de8 <__static_initialization_and_destruction_0(int, int)>:
extern "C" DRESULT disk_ioctl([[maybe_unused]] BYTE drive_number,
                              [[maybe_unused]] BYTE command,
                              [[maybe_unused]] void * buffer)
{
  return RES_PARERR;
}
   16de8:	b530      	push	{r4, r5, lr}
   16dea:	b085      	sub	sp, #20
   16dec:	4674      	mov	r4, lr
   16dee:	9003      	str	r0, [sp, #12]
   16df0:	9102      	str	r1, [sp, #8]
   16df2:	4623      	mov	r3, r4
   16df4:	4619      	mov	r1, r3
   16df6:	480e      	ldr	r0, [pc, #56]	; (16e30 <__static_initialization_and_destruction_0(int, int)+0x48>)
   16df8:	f7fb ff72 	bl	12ce0 <__cyg_profile_func_enter>
   16dfc:	9b03      	ldr	r3, [sp, #12]
   16dfe:	2b01      	cmp	r3, #1
   16e00:	d10e      	bne.n	16e20 <__static_initialization_and_destruction_0(int, int)+0x38>
   16e02:	9b02      	ldr	r3, [sp, #8]
   16e04:	f64f 72ff 	movw	r2, #65535	; 0xffff
   16e08:	4293      	cmp	r3, r2
   16e0a:	d109      	bne.n	16e20 <__static_initialization_and_destruction_0(int, int)+0x38>
Sd sd_card(Sd::DebugSdCard_t{});
   16e0c:	2306      	movs	r3, #6
   16e0e:	9301      	str	r3, [sp, #4]
   16e10:	2300      	movs	r3, #0
   16e12:	9300      	str	r3, [sp, #0]
   16e14:	2308      	movs	r3, #8
   16e16:	2201      	movs	r2, #1
   16e18:	4629      	mov	r1, r5
   16e1a:	4806      	ldr	r0, [pc, #24]	; (16e34 <__static_initialization_and_destruction_0(int, int)+0x4c>)
   16e1c:	f7fe fd62 	bl	158e4 <Sd::Sd(Sd::DebugSdCard_t, unsigned char, unsigned char, unsigned char, unsigned char)>
   16e20:	4623      	mov	r3, r4
   16e22:	4619      	mov	r1, r3
   16e24:	4802      	ldr	r0, [pc, #8]	; (16e30 <__static_initialization_and_destruction_0(int, int)+0x48>)
   16e26:	f7fb ff6f 	bl	12d08 <__cyg_profile_func_exit>
}
   16e2a:	bf00      	nop
   16e2c:	b005      	add	sp, #20
   16e2e:	bd30      	pop	{r4, r5, pc}
   16e30:	00016de9 	.word	0x00016de9
   16e34:	10000540 	.word	0x10000540

00016e38 <_GLOBAL__sub_I_disk_status>:
   16e38:	b510      	push	{r4, lr}
   16e3a:	4674      	mov	r4, lr
   16e3c:	4623      	mov	r3, r4
   16e3e:	4619      	mov	r1, r3
   16e40:	4806      	ldr	r0, [pc, #24]	; (16e5c <_GLOBAL__sub_I_disk_status+0x24>)
   16e42:	f7fb ff4d 	bl	12ce0 <__cyg_profile_func_enter>
   16e46:	f64f 71ff 	movw	r1, #65535	; 0xffff
   16e4a:	2001      	movs	r0, #1
   16e4c:	f7ff ffcc 	bl	16de8 <__static_initialization_and_destruction_0(int, int)>
   16e50:	4623      	mov	r3, r4
   16e52:	4619      	mov	r1, r3
   16e54:	4801      	ldr	r0, [pc, #4]	; (16e5c <_GLOBAL__sub_I_disk_status+0x24>)
   16e56:	f7fb ff57 	bl	12d08 <__cyg_profile_func_exit>
   16e5a:	bd10      	pop	{r4, pc}
   16e5c:	00016e39 	.word	0x00016e39

00016e60 <__cxa_pure_virtual>:
   16e60:	b508      	push	{r3, lr}
   16e62:	f000 f80d 	bl	16e80 <std::terminate()>

00016e66 <__cxxabiv1::__terminate(void (*)())>:
   16e66:	b508      	push	{r3, lr}
   16e68:	4780      	blx	r0
   16e6a:	f000 fa0f 	bl	1728c <abort>
   16e6e:	Address 0x0000000000016e6e is out of bounds.


00016e70 <std::get_terminate()>:
   16e70:	4b02      	ldr	r3, [pc, #8]	; (16e7c <std::get_terminate()+0xc>)
   16e72:	6818      	ldr	r0, [r3, #0]
   16e74:	f3bf 8f5b 	dmb	ish
   16e78:	4770      	bx	lr
   16e7a:	bf00      	nop
   16e7c:	100001d4 	.word	0x100001d4

00016e80 <std::terminate()>:
   16e80:	b508      	push	{r3, lr}
   16e82:	f7ff fff5 	bl	16e70 <std::get_terminate()>
   16e86:	f7ff ffee 	bl	16e66 <__cxxabiv1::__terminate(void (*)())>
   16e8a:	Address 0x0000000000016e8a is out of bounds.


00016e8c <roundf>:
   16e8c:	b082      	sub	sp, #8
   16e8e:	ed8d 0a01 	vstr	s0, [sp, #4]
   16e92:	9901      	ldr	r1, [sp, #4]
   16e94:	f3c1 53c7 	ubfx	r3, r1, #23, #8
   16e98:	f1a3 027f 	sub.w	r2, r3, #127	; 0x7f
   16e9c:	2a16      	cmp	r2, #22
   16e9e:	dc0c      	bgt.n	16eba <roundf+0x2e>
   16ea0:	2a00      	cmp	r2, #0
   16ea2:	db10      	blt.n	16ec6 <roundf+0x3a>
   16ea4:	4810      	ldr	r0, [pc, #64]	; (16ee8 <roundf+0x5c>)
   16ea6:	4110      	asrs	r0, r2
   16ea8:	4201      	tst	r1, r0
   16eaa:	d008      	beq.n	16ebe <roundf+0x32>
   16eac:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   16eb0:	4113      	asrs	r3, r2
   16eb2:	440b      	add	r3, r1
   16eb4:	ea23 0300 	bic.w	r3, r3, r0
   16eb8:	e00b      	b.n	16ed2 <roundf+0x46>
   16eba:	2a80      	cmp	r2, #128	; 0x80
   16ebc:	d00d      	beq.n	16eda <roundf+0x4e>
   16ebe:	ed9d 0a01 	vldr	s0, [sp, #4]
   16ec2:	b002      	add	sp, #8
   16ec4:	4770      	bx	lr
   16ec6:	3201      	adds	r2, #1
   16ec8:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
   16ecc:	d101      	bne.n	16ed2 <roundf+0x46>
   16ece:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
   16ed2:	ee00 3a10 	vmov	s0, r3
   16ed6:	b002      	add	sp, #8
   16ed8:	4770      	bx	lr
   16eda:	eddd 7a01 	vldr	s15, [sp, #4]
   16ede:	ee37 0aa7 	vadd.f32	s0, s15, s15
   16ee2:	b002      	add	sp, #8
   16ee4:	4770      	bx	lr
   16ee6:	bf00      	nop
   16ee8:	007fffff 	.word	0x007fffff

00016eec <__aeabi_d2f>:
   16eec:	ea4f 0241 	mov.w	r2, r1, lsl #1
   16ef0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   16ef4:	bf24      	itt	cs
   16ef6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   16efa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   16efe:	d90d      	bls.n	16f1c <__aeabi_d2f+0x30>
   16f00:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   16f04:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   16f08:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   16f0c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   16f10:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   16f14:	bf08      	it	eq
   16f16:	f020 0001 	biceq.w	r0, r0, #1
   16f1a:	4770      	bx	lr
   16f1c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   16f20:	d121      	bne.n	16f66 <__aeabi_d2f+0x7a>
   16f22:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   16f26:	bfbc      	itt	lt
   16f28:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   16f2c:	4770      	bxlt	lr
   16f2e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   16f32:	ea4f 5252 	mov.w	r2, r2, lsr #21
   16f36:	f1c2 0218 	rsb	r2, r2, #24
   16f3a:	f1c2 0c20 	rsb	ip, r2, #32
   16f3e:	fa10 f30c 	lsls.w	r3, r0, ip
   16f42:	fa20 f002 	lsr.w	r0, r0, r2
   16f46:	bf18      	it	ne
   16f48:	f040 0001 	orrne.w	r0, r0, #1
   16f4c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   16f50:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   16f54:	fa03 fc0c 	lsl.w	ip, r3, ip
   16f58:	ea40 000c 	orr.w	r0, r0, ip
   16f5c:	fa23 f302 	lsr.w	r3, r3, r2
   16f60:	ea4f 0343 	mov.w	r3, r3, lsl #1
   16f64:	e7cc      	b.n	16f00 <__aeabi_d2f+0x14>
   16f66:	ea7f 5362 	mvns.w	r3, r2, asr #21
   16f6a:	d107      	bne.n	16f7c <__aeabi_d2f+0x90>
   16f6c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   16f70:	bf1e      	ittt	ne
   16f72:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   16f76:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   16f7a:	4770      	bxne	lr
   16f7c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   16f80:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   16f84:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   16f88:	4770      	bx	lr
   16f8a:	bf00      	nop

00016f8c <__aeabi_uldivmod>:
   16f8c:	b953      	cbnz	r3, 16fa4 <__aeabi_uldivmod+0x18>
   16f8e:	b94a      	cbnz	r2, 16fa4 <__aeabi_uldivmod+0x18>
   16f90:	2900      	cmp	r1, #0
   16f92:	bf08      	it	eq
   16f94:	2800      	cmpeq	r0, #0
   16f96:	bf1c      	itt	ne
   16f98:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
   16f9c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   16fa0:	f000 b972 	b.w	17288 <__aeabi_idiv0>
   16fa4:	f1ad 0c08 	sub.w	ip, sp, #8
   16fa8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   16fac:	f000 f806 	bl	16fbc <__udivmoddi4>
   16fb0:	f8dd e004 	ldr.w	lr, [sp, #4]
   16fb4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   16fb8:	b004      	add	sp, #16
   16fba:	4770      	bx	lr

00016fbc <__udivmoddi4>:
   16fbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16fc0:	9e08      	ldr	r6, [sp, #32]
   16fc2:	4604      	mov	r4, r0
   16fc4:	4688      	mov	r8, r1
   16fc6:	2b00      	cmp	r3, #0
   16fc8:	d14b      	bne.n	17062 <__udivmoddi4+0xa6>
   16fca:	428a      	cmp	r2, r1
   16fcc:	4615      	mov	r5, r2
   16fce:	d967      	bls.n	170a0 <__udivmoddi4+0xe4>
   16fd0:	fab2 f282 	clz	r2, r2
   16fd4:	b14a      	cbz	r2, 16fea <__udivmoddi4+0x2e>
   16fd6:	f1c2 0720 	rsb	r7, r2, #32
   16fda:	fa01 f302 	lsl.w	r3, r1, r2
   16fde:	fa20 f707 	lsr.w	r7, r0, r7
   16fe2:	4095      	lsls	r5, r2
   16fe4:	ea47 0803 	orr.w	r8, r7, r3
   16fe8:	4094      	lsls	r4, r2
   16fea:	ea4f 4e15 	mov.w	lr, r5, lsr #16
   16fee:	0c23      	lsrs	r3, r4, #16
   16ff0:	fbb8 f7fe 	udiv	r7, r8, lr
   16ff4:	fa1f fc85 	uxth.w	ip, r5
   16ff8:	fb0e 8817 	mls	r8, lr, r7, r8
   16ffc:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
   17000:	fb07 f10c 	mul.w	r1, r7, ip
   17004:	4299      	cmp	r1, r3
   17006:	d909      	bls.n	1701c <__udivmoddi4+0x60>
   17008:	18eb      	adds	r3, r5, r3
   1700a:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
   1700e:	f080 811b 	bcs.w	17248 <__udivmoddi4+0x28c>
   17012:	4299      	cmp	r1, r3
   17014:	f240 8118 	bls.w	17248 <__udivmoddi4+0x28c>
   17018:	3f02      	subs	r7, #2
   1701a:	442b      	add	r3, r5
   1701c:	1a5b      	subs	r3, r3, r1
   1701e:	b2a4      	uxth	r4, r4
   17020:	fbb3 f0fe 	udiv	r0, r3, lr
   17024:	fb0e 3310 	mls	r3, lr, r0, r3
   17028:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
   1702c:	fb00 fc0c 	mul.w	ip, r0, ip
   17030:	45a4      	cmp	ip, r4
   17032:	d909      	bls.n	17048 <__udivmoddi4+0x8c>
   17034:	192c      	adds	r4, r5, r4
   17036:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   1703a:	f080 8107 	bcs.w	1724c <__udivmoddi4+0x290>
   1703e:	45a4      	cmp	ip, r4
   17040:	f240 8104 	bls.w	1724c <__udivmoddi4+0x290>
   17044:	3802      	subs	r0, #2
   17046:	442c      	add	r4, r5
   17048:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
   1704c:	eba4 040c 	sub.w	r4, r4, ip
   17050:	2700      	movs	r7, #0
   17052:	b11e      	cbz	r6, 1705c <__udivmoddi4+0xa0>
   17054:	40d4      	lsrs	r4, r2
   17056:	2300      	movs	r3, #0
   17058:	e9c6 4300 	strd	r4, r3, [r6]
   1705c:	4639      	mov	r1, r7
   1705e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   17062:	428b      	cmp	r3, r1
   17064:	d909      	bls.n	1707a <__udivmoddi4+0xbe>
   17066:	2e00      	cmp	r6, #0
   17068:	f000 80eb 	beq.w	17242 <__udivmoddi4+0x286>
   1706c:	2700      	movs	r7, #0
   1706e:	e9c6 0100 	strd	r0, r1, [r6]
   17072:	4638      	mov	r0, r7
   17074:	4639      	mov	r1, r7
   17076:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1707a:	fab3 f783 	clz	r7, r3
   1707e:	2f00      	cmp	r7, #0
   17080:	d147      	bne.n	17112 <__udivmoddi4+0x156>
   17082:	428b      	cmp	r3, r1
   17084:	d302      	bcc.n	1708c <__udivmoddi4+0xd0>
   17086:	4282      	cmp	r2, r0
   17088:	f200 80fa 	bhi.w	17280 <__udivmoddi4+0x2c4>
   1708c:	1a84      	subs	r4, r0, r2
   1708e:	eb61 0303 	sbc.w	r3, r1, r3
   17092:	2001      	movs	r0, #1
   17094:	4698      	mov	r8, r3
   17096:	2e00      	cmp	r6, #0
   17098:	d0e0      	beq.n	1705c <__udivmoddi4+0xa0>
   1709a:	e9c6 4800 	strd	r4, r8, [r6]
   1709e:	e7dd      	b.n	1705c <__udivmoddi4+0xa0>
   170a0:	b902      	cbnz	r2, 170a4 <__udivmoddi4+0xe8>
   170a2:	deff      	udf	#255	; 0xff
   170a4:	fab2 f282 	clz	r2, r2
   170a8:	2a00      	cmp	r2, #0
   170aa:	f040 808f 	bne.w	171cc <__udivmoddi4+0x210>
   170ae:	1b49      	subs	r1, r1, r5
   170b0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
   170b4:	fa1f f885 	uxth.w	r8, r5
   170b8:	2701      	movs	r7, #1
   170ba:	fbb1 fcfe 	udiv	ip, r1, lr
   170be:	0c23      	lsrs	r3, r4, #16
   170c0:	fb0e 111c 	mls	r1, lr, ip, r1
   170c4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   170c8:	fb08 f10c 	mul.w	r1, r8, ip
   170cc:	4299      	cmp	r1, r3
   170ce:	d907      	bls.n	170e0 <__udivmoddi4+0x124>
   170d0:	18eb      	adds	r3, r5, r3
   170d2:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
   170d6:	d202      	bcs.n	170de <__udivmoddi4+0x122>
   170d8:	4299      	cmp	r1, r3
   170da:	f200 80cd 	bhi.w	17278 <__udivmoddi4+0x2bc>
   170de:	4684      	mov	ip, r0
   170e0:	1a59      	subs	r1, r3, r1
   170e2:	b2a3      	uxth	r3, r4
   170e4:	fbb1 f0fe 	udiv	r0, r1, lr
   170e8:	fb0e 1410 	mls	r4, lr, r0, r1
   170ec:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
   170f0:	fb08 f800 	mul.w	r8, r8, r0
   170f4:	45a0      	cmp	r8, r4
   170f6:	d907      	bls.n	17108 <__udivmoddi4+0x14c>
   170f8:	192c      	adds	r4, r5, r4
   170fa:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   170fe:	d202      	bcs.n	17106 <__udivmoddi4+0x14a>
   17100:	45a0      	cmp	r8, r4
   17102:	f200 80b6 	bhi.w	17272 <__udivmoddi4+0x2b6>
   17106:	4618      	mov	r0, r3
   17108:	eba4 0408 	sub.w	r4, r4, r8
   1710c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
   17110:	e79f      	b.n	17052 <__udivmoddi4+0x96>
   17112:	f1c7 0c20 	rsb	ip, r7, #32
   17116:	40bb      	lsls	r3, r7
   17118:	fa22 fe0c 	lsr.w	lr, r2, ip
   1711c:	ea4e 0e03 	orr.w	lr, lr, r3
   17120:	fa01 f407 	lsl.w	r4, r1, r7
   17124:	fa20 f50c 	lsr.w	r5, r0, ip
   17128:	fa21 f30c 	lsr.w	r3, r1, ip
   1712c:	ea4f 481e 	mov.w	r8, lr, lsr #16
   17130:	4325      	orrs	r5, r4
   17132:	fbb3 f9f8 	udiv	r9, r3, r8
   17136:	0c2c      	lsrs	r4, r5, #16
   17138:	fb08 3319 	mls	r3, r8, r9, r3
   1713c:	fa1f fa8e 	uxth.w	sl, lr
   17140:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
   17144:	fb09 f40a 	mul.w	r4, r9, sl
   17148:	429c      	cmp	r4, r3
   1714a:	fa02 f207 	lsl.w	r2, r2, r7
   1714e:	fa00 f107 	lsl.w	r1, r0, r7
   17152:	d90b      	bls.n	1716c <__udivmoddi4+0x1b0>
   17154:	eb1e 0303 	adds.w	r3, lr, r3
   17158:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
   1715c:	f080 8087 	bcs.w	1726e <__udivmoddi4+0x2b2>
   17160:	429c      	cmp	r4, r3
   17162:	f240 8084 	bls.w	1726e <__udivmoddi4+0x2b2>
   17166:	f1a9 0902 	sub.w	r9, r9, #2
   1716a:	4473      	add	r3, lr
   1716c:	1b1b      	subs	r3, r3, r4
   1716e:	b2ad      	uxth	r5, r5
   17170:	fbb3 f0f8 	udiv	r0, r3, r8
   17174:	fb08 3310 	mls	r3, r8, r0, r3
   17178:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
   1717c:	fb00 fa0a 	mul.w	sl, r0, sl
   17180:	45a2      	cmp	sl, r4
   17182:	d908      	bls.n	17196 <__udivmoddi4+0x1da>
   17184:	eb1e 0404 	adds.w	r4, lr, r4
   17188:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   1718c:	d26b      	bcs.n	17266 <__udivmoddi4+0x2aa>
   1718e:	45a2      	cmp	sl, r4
   17190:	d969      	bls.n	17266 <__udivmoddi4+0x2aa>
   17192:	3802      	subs	r0, #2
   17194:	4474      	add	r4, lr
   17196:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   1719a:	fba0 8902 	umull	r8, r9, r0, r2
   1719e:	eba4 040a 	sub.w	r4, r4, sl
   171a2:	454c      	cmp	r4, r9
   171a4:	46c2      	mov	sl, r8
   171a6:	464b      	mov	r3, r9
   171a8:	d354      	bcc.n	17254 <__udivmoddi4+0x298>
   171aa:	d051      	beq.n	17250 <__udivmoddi4+0x294>
   171ac:	2e00      	cmp	r6, #0
   171ae:	d069      	beq.n	17284 <__udivmoddi4+0x2c8>
   171b0:	ebb1 050a 	subs.w	r5, r1, sl
   171b4:	eb64 0403 	sbc.w	r4, r4, r3
   171b8:	fa04 fc0c 	lsl.w	ip, r4, ip
   171bc:	40fd      	lsrs	r5, r7
   171be:	40fc      	lsrs	r4, r7
   171c0:	ea4c 0505 	orr.w	r5, ip, r5
   171c4:	e9c6 5400 	strd	r5, r4, [r6]
   171c8:	2700      	movs	r7, #0
   171ca:	e747      	b.n	1705c <__udivmoddi4+0xa0>
   171cc:	f1c2 0320 	rsb	r3, r2, #32
   171d0:	fa20 f703 	lsr.w	r7, r0, r3
   171d4:	4095      	lsls	r5, r2
   171d6:	fa01 f002 	lsl.w	r0, r1, r2
   171da:	fa21 f303 	lsr.w	r3, r1, r3
   171de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
   171e2:	4338      	orrs	r0, r7
   171e4:	0c01      	lsrs	r1, r0, #16
   171e6:	fbb3 f7fe 	udiv	r7, r3, lr
   171ea:	fa1f f885 	uxth.w	r8, r5
   171ee:	fb0e 3317 	mls	r3, lr, r7, r3
   171f2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   171f6:	fb07 f308 	mul.w	r3, r7, r8
   171fa:	428b      	cmp	r3, r1
   171fc:	fa04 f402 	lsl.w	r4, r4, r2
   17200:	d907      	bls.n	17212 <__udivmoddi4+0x256>
   17202:	1869      	adds	r1, r5, r1
   17204:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
   17208:	d22f      	bcs.n	1726a <__udivmoddi4+0x2ae>
   1720a:	428b      	cmp	r3, r1
   1720c:	d92d      	bls.n	1726a <__udivmoddi4+0x2ae>
   1720e:	3f02      	subs	r7, #2
   17210:	4429      	add	r1, r5
   17212:	1acb      	subs	r3, r1, r3
   17214:	b281      	uxth	r1, r0
   17216:	fbb3 f0fe 	udiv	r0, r3, lr
   1721a:	fb0e 3310 	mls	r3, lr, r0, r3
   1721e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   17222:	fb00 f308 	mul.w	r3, r0, r8
   17226:	428b      	cmp	r3, r1
   17228:	d907      	bls.n	1723a <__udivmoddi4+0x27e>
   1722a:	1869      	adds	r1, r5, r1
   1722c:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
   17230:	d217      	bcs.n	17262 <__udivmoddi4+0x2a6>
   17232:	428b      	cmp	r3, r1
   17234:	d915      	bls.n	17262 <__udivmoddi4+0x2a6>
   17236:	3802      	subs	r0, #2
   17238:	4429      	add	r1, r5
   1723a:	1ac9      	subs	r1, r1, r3
   1723c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
   17240:	e73b      	b.n	170ba <__udivmoddi4+0xfe>
   17242:	4637      	mov	r7, r6
   17244:	4630      	mov	r0, r6
   17246:	e709      	b.n	1705c <__udivmoddi4+0xa0>
   17248:	4607      	mov	r7, r0
   1724a:	e6e7      	b.n	1701c <__udivmoddi4+0x60>
   1724c:	4618      	mov	r0, r3
   1724e:	e6fb      	b.n	17048 <__udivmoddi4+0x8c>
   17250:	4541      	cmp	r1, r8
   17252:	d2ab      	bcs.n	171ac <__udivmoddi4+0x1f0>
   17254:	ebb8 0a02 	subs.w	sl, r8, r2
   17258:	eb69 020e 	sbc.w	r2, r9, lr
   1725c:	3801      	subs	r0, #1
   1725e:	4613      	mov	r3, r2
   17260:	e7a4      	b.n	171ac <__udivmoddi4+0x1f0>
   17262:	4660      	mov	r0, ip
   17264:	e7e9      	b.n	1723a <__udivmoddi4+0x27e>
   17266:	4618      	mov	r0, r3
   17268:	e795      	b.n	17196 <__udivmoddi4+0x1da>
   1726a:	4667      	mov	r7, ip
   1726c:	e7d1      	b.n	17212 <__udivmoddi4+0x256>
   1726e:	4681      	mov	r9, r0
   17270:	e77c      	b.n	1716c <__udivmoddi4+0x1b0>
   17272:	3802      	subs	r0, #2
   17274:	442c      	add	r4, r5
   17276:	e747      	b.n	17108 <__udivmoddi4+0x14c>
   17278:	f1ac 0c02 	sub.w	ip, ip, #2
   1727c:	442b      	add	r3, r5
   1727e:	e72f      	b.n	170e0 <__udivmoddi4+0x124>
   17280:	4638      	mov	r0, r7
   17282:	e708      	b.n	17096 <__udivmoddi4+0xda>
   17284:	4637      	mov	r7, r6
   17286:	e6e9      	b.n	1705c <__udivmoddi4+0xa0>

00017288 <__aeabi_idiv0>:
   17288:	4770      	bx	lr
   1728a:	bf00      	nop

0001728c <abort>:
   1728c:	b508      	push	{r3, lr}
   1728e:	2006      	movs	r0, #6
   17290:	f000 f858 	bl	17344 <raise>
   17294:	2001      	movs	r0, #1
   17296:	f7fb fc83 	bl	12ba0 <_exit>
   1729a:	Address 0x000000000001729a is out of bounds.


0001729c <__libc_init_array>:
   1729c:	b570      	push	{r4, r5, r6, lr}
   1729e:	4e0d      	ldr	r6, [pc, #52]	; (172d4 <__libc_init_array+0x38>)
   172a0:	4c0d      	ldr	r4, [pc, #52]	; (172d8 <__libc_init_array+0x3c>)
   172a2:	1ba4      	subs	r4, r4, r6
   172a4:	10a4      	asrs	r4, r4, #2
   172a6:	2500      	movs	r5, #0
   172a8:	42a5      	cmp	r5, r4
   172aa:	d109      	bne.n	172c0 <__libc_init_array+0x24>
   172ac:	4e0b      	ldr	r6, [pc, #44]	; (172dc <__libc_init_array+0x40>)
   172ae:	4c0c      	ldr	r4, [pc, #48]	; (172e0 <__libc_init_array+0x44>)
   172b0:	f7f9 f826 	bl	10300 <_init>
   172b4:	1ba4      	subs	r4, r4, r6
   172b6:	10a4      	asrs	r4, r4, #2
   172b8:	2500      	movs	r5, #0
   172ba:	42a5      	cmp	r5, r4
   172bc:	d105      	bne.n	172ca <__libc_init_array+0x2e>
   172be:	bd70      	pop	{r4, r5, r6, pc}
   172c0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   172c4:	4798      	blx	r3
   172c6:	3501      	adds	r5, #1
   172c8:	e7ee      	b.n	172a8 <__libc_init_array+0xc>
   172ca:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   172ce:	4798      	blx	r3
   172d0:	3501      	adds	r5, #1
   172d2:	e7f2      	b.n	172ba <__libc_init_array+0x1e>
   172d4:	0001030c 	.word	0x0001030c
   172d8:	0001030c 	.word	0x0001030c
   172dc:	0001030c 	.word	0x0001030c
   172e0:	00010318 	.word	0x00010318

000172e4 <memset>:
   172e4:	4402      	add	r2, r0
   172e6:	4603      	mov	r3, r0
   172e8:	4293      	cmp	r3, r2
   172ea:	d100      	bne.n	172ee <memset+0xa>
   172ec:	4770      	bx	lr
   172ee:	f803 1b01 	strb.w	r1, [r3], #1
   172f2:	e7f9      	b.n	172e8 <memset+0x4>

000172f4 <_raise_r>:
   172f4:	291f      	cmp	r1, #31
   172f6:	b538      	push	{r3, r4, r5, lr}
   172f8:	4604      	mov	r4, r0
   172fa:	460d      	mov	r5, r1
   172fc:	d904      	bls.n	17308 <_raise_r+0x14>
   172fe:	2316      	movs	r3, #22
   17300:	6003      	str	r3, [r0, #0]
   17302:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   17306:	bd38      	pop	{r3, r4, r5, pc}
   17308:	6c42      	ldr	r2, [r0, #68]	; 0x44
   1730a:	b112      	cbz	r2, 17312 <_raise_r+0x1e>
   1730c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
   17310:	b94b      	cbnz	r3, 17326 <_raise_r+0x32>
   17312:	4620      	mov	r0, r4
   17314:	f000 f830 	bl	17378 <_getpid_r>
   17318:	462a      	mov	r2, r5
   1731a:	4601      	mov	r1, r0
   1731c:	4620      	mov	r0, r4
   1731e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   17322:	f000 b817 	b.w	17354 <_kill_r>
   17326:	2b01      	cmp	r3, #1
   17328:	d00a      	beq.n	17340 <_raise_r+0x4c>
   1732a:	1c59      	adds	r1, r3, #1
   1732c:	d103      	bne.n	17336 <_raise_r+0x42>
   1732e:	2316      	movs	r3, #22
   17330:	6003      	str	r3, [r0, #0]
   17332:	2001      	movs	r0, #1
   17334:	e7e7      	b.n	17306 <_raise_r+0x12>
   17336:	2400      	movs	r4, #0
   17338:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
   1733c:	4628      	mov	r0, r5
   1733e:	4798      	blx	r3
   17340:	2000      	movs	r0, #0
   17342:	e7e0      	b.n	17306 <_raise_r+0x12>

00017344 <raise>:
   17344:	4b02      	ldr	r3, [pc, #8]	; (17350 <raise+0xc>)
   17346:	4601      	mov	r1, r0
   17348:	6818      	ldr	r0, [r3, #0]
   1734a:	f7ff bfd3 	b.w	172f4 <_raise_r>
   1734e:	bf00      	nop
   17350:	100001d8 	.word	0x100001d8

00017354 <_kill_r>:
   17354:	b538      	push	{r3, r4, r5, lr}
   17356:	4c07      	ldr	r4, [pc, #28]	; (17374 <_kill_r+0x20>)
   17358:	2300      	movs	r3, #0
   1735a:	4605      	mov	r5, r0
   1735c:	4608      	mov	r0, r1
   1735e:	4611      	mov	r1, r2
   17360:	6023      	str	r3, [r4, #0]
   17362:	f7fb fc3b 	bl	12bdc <_kill>
   17366:	1c43      	adds	r3, r0, #1
   17368:	d102      	bne.n	17370 <_kill_r+0x1c>
   1736a:	6823      	ldr	r3, [r4, #0]
   1736c:	b103      	cbz	r3, 17370 <_kill_r+0x1c>
   1736e:	602b      	str	r3, [r5, #0]
   17370:	bd38      	pop	{r3, r4, r5, pc}
   17372:	bf00      	nop
   17374:	100005a8 	.word	0x100005a8

00017378 <_getpid_r>:
   17378:	f7fb bc1e 	b.w	12bb8 <_getpid>
   1737c:	63617453 	.word	0x63617453
   17380:	6544206b 	.word	0x6544206b
   17384:	20687470 	.word	0x20687470
   17388:	7a25203d 	.word	0x7a25203d
   1738c:	00000a64 	.word	0x00000a64
   17390:	25232020 	.word	0x25232020
   17394:	203a757a 	.word	0x203a757a
   17398:	70257830 	.word	0x70257830
   1739c:	0000000a 	.word	0x0000000a
   173a0:	6e75520a 	.word	0x6e75520a
   173a4:	6874203a 	.word	0x6874203a
   173a8:	6f662065 	.word	0x6f662065
   173ac:	776f6c6c 	.word	0x776f6c6c
   173b0:	20676e69 	.word	0x20676e69
   173b4:	6d6d6f63 	.word	0x6d6d6f63
   173b8:	20646e61 	.word	0x20646e61
   173bc:	79206e69 	.word	0x79206e69
   173c0:	2072756f 	.word	0x2072756f
   173c4:	6a6f7270 	.word	0x6a6f7270
   173c8:	20746365 	.word	0x20746365
   173cc:	65726964 	.word	0x65726964
   173d0:	726f7463 	.word	0x726f7463
   173d4:	00000079 	.word	0x00000079
   173d8:	1b20200a 	.word	0x1b20200a
   173dc:	333b315b 	.word	0x333b315b
   173e0:	616d6d37 	.word	0x616d6d37
   173e4:	7320656b 	.word	0x7320656b
   173e8:	6b636174 	.word	0x6b636174
   173ec:	63617274 	.word	0x63617274
   173f0:	73252d65 	.word	0x73252d65
   173f4:	41525420 	.word	0x41525420
   173f8:	3d534543 	.word	0x3d534543
   173fc:	00000022 	.word	0x00000022
   17400:	70257830 	.word	0x70257830
   17404:	00000000 	.word	0x00000000
   17408:	25783020 	.word	0x25783020
   1740c:	00000070 	.word	0x00000070
   17410:	5b1b0a22 	.word	0x5b1b0a22
   17414:	00006d30 	.word	0x00006d30
   17418:	73696854 	.word	0x73696854
   1741c:	6c697720 	.word	0x6c697720
   17420:	6572206c 	.word	0x6572206c
   17424:	74726f70 	.word	0x74726f70
   17428:	65687420 	.word	0x65687420
   1742c:	6c696620 	.word	0x6c696620
   17430:	6e612065 	.word	0x6e612065
   17434:	696c2064 	.word	0x696c2064
   17438:	6e20656e 	.word	0x6e20656e
   1743c:	65626d75 	.word	0x65626d75
   17440:	68742072 	.word	0x68742072
   17444:	6c207461 	.word	0x6c207461
   17448:	74206465 	.word	0x74206465
   1744c:	6874206f 	.word	0x6874206f
   17450:	66207369 	.word	0x66207369
   17454:	74636e75 	.word	0x74636e75
   17458:	206e6f69 	.word	0x206e6f69
   1745c:	6e696562 	.word	0x6e696562
   17460:	61632067 	.word	0x61632067
   17464:	64656c6c 	.word	0x64656c6c
   17468:	0000002e 	.word	0x0000002e
   1746c:	6c707061 	.word	0x6c707061
   17470:	74616369 	.word	0x74616369
   17474:	006e6f69 	.word	0x006e6f69
   17478:	31345b1b 	.word	0x31345b1b
   1747c:	4952436d 	.word	0x4952436d
   17480:	41434954 	.word	0x41434954
   17484:	305b1b4c 	.word	0x305b1b4c
   17488:	6d34393b 	.word	0x6d34393b
   1748c:	3a73253a 	.word	0x3a73253a
   17490:	3b305b1b 	.word	0x3b305b1b
   17494:	256d3239 	.word	0x256d3239
   17498:	5b1b3a73 	.word	0x5b1b3a73
   1749c:	33393b30 	.word	0x33393b30
   174a0:	3e64256d 	.word	0x3e64256d
   174a4:	305b1b20 	.word	0x305b1b20
   174a8:	6d37333b 	.word	0x6d37333b
   174ac:	65737341 	.word	0x65737341
   174b0:	6f697472 	.word	0x6f697472
   174b4:	6146206e 	.word	0x6146206e
   174b8:	72756c69 	.word	0x72756c69
   174bc:	43202c65 	.word	0x43202c65
   174c0:	69646e6f 	.word	0x69646e6f
   174c4:	6e6f6974 	.word	0x6e6f6974
   174c8:	73655420 	.word	0x73655420
   174cc:	3a646574 	.word	0x3a646574
   174d0:	65702820 	.word	0x65702820
   174d4:	68706972 	.word	0x68706972
   174d8:	6c617265 	.word	0x6c617265
   174dc:	7669645f 	.word	0x7669645f
   174e0:	72656469 	.word	0x72656469
   174e4:	203d3c20 	.word	0x203d3c20
   174e8:	200a2934 	.word	0x200a2934
   174ec:	20202020 	.word	0x20202020
   174f0:	20202020 	.word	0x20202020
   174f4:	76694420 	.word	0x76694420
   174f8:	72656469 	.word	0x72656469
   174fc:	73756d20 	.word	0x73756d20
   17500:	74276e74 	.word	0x74276e74
   17504:	63786520 	.word	0x63786520
   17508:	20646565 	.word	0x20646565
   1750c:	5b1b3233 	.word	0x5b1b3233
   17510:	5b1b6d30 	.word	0x5b1b6d30
   17514:	000a6d30 	.word	0x000a6d30
   17518:	6972500a 	.word	0x6972500a
   1751c:	6e69746e 	.word	0x6e69746e
   17520:	74532067 	.word	0x74532067
   17524:	206b6361 	.word	0x206b6361
   17528:	63617254 	.word	0x63617254
   1752c:	000a3a65 	.word	0x000a3a65
   17530:	31345b1b 	.word	0x31345b1b
   17534:	4952436d 	.word	0x4952436d
   17538:	41434954 	.word	0x41434954
   1753c:	305b1b4c 	.word	0x305b1b4c
   17540:	6d34393b 	.word	0x6d34393b
   17544:	3a73253a 	.word	0x3a73253a
   17548:	3b305b1b 	.word	0x3b305b1b
   1754c:	256d3239 	.word	0x256d3239
   17550:	5b1b3a73 	.word	0x5b1b3a73
   17554:	33393b30 	.word	0x33393b30
   17558:	3e64256d 	.word	0x3e64256d
   1755c:	305b1b20 	.word	0x305b1b20
   17560:	6d37333b 	.word	0x6d37333b
   17564:	65737341 	.word	0x65737341
   17568:	6f697472 	.word	0x6f697472
   1756c:	6146206e 	.word	0x6146206e
   17570:	72756c69 	.word	0x72756c69
   17574:	43202c65 	.word	0x43202c65
   17578:	69646e6f 	.word	0x69646e6f
   1757c:	6e6f6974 	.word	0x6e6f6974
   17580:	73655420 	.word	0x73655420
   17584:	3a646574 	.word	0x3a646574
   17588:	65642820 	.word	0x65642820
   1758c:	65726973 	.word	0x65726973
   17590:	70735f64 	.word	0x70735f64
   17594:	5f646565 	.word	0x5f646565
   17598:	6d5f6e69 	.word	0x6d5f6e69
   1759c:	3c207a68 	.word	0x3c207a68
   175a0:	34383320 	.word	0x34383320
   175a4:	20262620 	.word	0x20262620
   175a8:	69736564 	.word	0x69736564
   175ac:	5f646572 	.word	0x5f646572
   175b0:	65657073 	.word	0x65657073
   175b4:	6e695f64 	.word	0x6e695f64
   175b8:	7a686d5f 	.word	0x7a686d5f
   175bc:	31203e20 	.word	0x31203e20
   175c0:	200a2932 	.word	0x200a2932
   175c4:	20202020 	.word	0x20202020
   175c8:	20202020 	.word	0x20202020
   175cc:	65724620 	.word	0x65724620
   175d0:	6e657571 	.word	0x6e657571
   175d4:	6d207963 	.word	0x6d207963
   175d8:	20747375 	.word	0x20747375
   175dc:	6c206562 	.word	0x6c206562
   175e0:	7265776f 	.word	0x7265776f
   175e4:	61687420 	.word	0x61687420
   175e8:	3833206e 	.word	0x3833206e
   175ec:	484d2034 	.word	0x484d2034
   175f0:	646e617a 	.word	0x646e617a
   175f4:	65726720 	.word	0x65726720
   175f8:	72657461 	.word	0x72657461
   175fc:	61687420 	.word	0x61687420
   17600:	726f206e 	.word	0x726f206e
   17604:	75716520 	.word	0x75716520
   17608:	74206c61 	.word	0x74206c61
   1760c:	3231206f 	.word	0x3231206f
   17610:	7a484d20 	.word	0x7a484d20
   17614:	6d305b1b 	.word	0x6d305b1b
   17618:	6d305b1b 	.word	0x6d305b1b
   1761c:	0000000a 	.word	0x0000000a
   17620:	31345b1b 	.word	0x31345b1b
   17624:	4952436d 	.word	0x4952436d
   17628:	41434954 	.word	0x41434954
   1762c:	305b1b4c 	.word	0x305b1b4c
   17630:	6d34393b 	.word	0x6d34393b
   17634:	3a73253a 	.word	0x3a73253a
   17638:	3b305b1b 	.word	0x3b305b1b
   1763c:	256d3239 	.word	0x256d3239
   17640:	5b1b3a73 	.word	0x5b1b3a73
   17644:	33393b30 	.word	0x33393b30
   17648:	3e64256d 	.word	0x3e64256d
   1764c:	305b1b20 	.word	0x305b1b20
   17650:	6d37333b 	.word	0x6d37333b
   17654:	65737341 	.word	0x65737341
   17658:	6f697472 	.word	0x6f697472
   1765c:	6146206e 	.word	0x6146206e
   17660:	72756c69 	.word	0x72756c69
   17664:	43202c65 	.word	0x43202c65
   17668:	69646e6f 	.word	0x69646e6f
   1766c:	6e6f6974 	.word	0x6e6f6974
   17670:	73655420 	.word	0x73655420
   17674:	3a646574 	.word	0x3a646574
   17678:	69642820 	.word	0x69642820
   1767c:	65646976 	.word	0x65646976
   17680:	61765f72 	.word	0x61765f72
   17684:	2065756c 	.word	0x2065756c
   17688:	2938203c 	.word	0x2938203c
   1768c:	2020200a 	.word	0x2020200a
   17690:	20202020 	.word	0x20202020
   17694:	50202020 	.word	0x50202020
   17698:	64204c4c 	.word	0x64204c4c
   1769c:	64697669 	.word	0x64697669
   176a0:	76207265 	.word	0x76207265
   176a4:	65756c61 	.word	0x65756c61
   176a8:	6e657720 	.word	0x6e657720
   176ac:	756f2074 	.word	0x756f2074
   176b0:	666f2074 	.word	0x666f2074
   176b4:	756f6220 	.word	0x756f6220
   176b8:	1b73646e 	.word	0x1b73646e
   176bc:	1b6d305b 	.word	0x1b6d305b
   176c0:	0a6d305b 	.word	0x0a6d305b
   176c4:	00000000 	.word	0x00000000
   176c8:	31345b1b 	.word	0x31345b1b
   176cc:	4952436d 	.word	0x4952436d
   176d0:	41434954 	.word	0x41434954
   176d4:	305b1b4c 	.word	0x305b1b4c
   176d8:	6d34393b 	.word	0x6d34393b
   176dc:	3a73253a 	.word	0x3a73253a
   176e0:	3b305b1b 	.word	0x3b305b1b
   176e4:	256d3239 	.word	0x256d3239
   176e8:	5b1b3a73 	.word	0x5b1b3a73
   176ec:	33393b30 	.word	0x33393b30
   176f0:	3e64256d 	.word	0x3e64256d
   176f4:	305b1b20 	.word	0x305b1b20
   176f8:	6d37333b 	.word	0x6d37333b
   176fc:	65737341 	.word	0x65737341
   17700:	6f697472 	.word	0x6f697472
   17704:	6146206e 	.word	0x6146206e
   17708:	72756c69 	.word	0x72756c69
   1770c:	43202c65 	.word	0x43202c65
   17710:	69646e6f 	.word	0x69646e6f
   17714:	6e6f6974 	.word	0x6e6f6974
   17718:	73655420 	.word	0x73655420
   1771c:	3a646574 	.word	0x3a646574
   17720:	61662820 	.word	0x61662820
   17724:	2965736c 	.word	0x2965736c
   17728:	2020200a 	.word	0x2020200a
   1772c:	20202020 	.word	0x20202020
   17730:	50202020 	.word	0x50202020
   17734:	6c204c4c 	.word	0x6c204c4c
   17738:	206b636f 	.word	0x206b636f
   1773c:	6c756f63 	.word	0x6c756f63
   17740:	6f6e2064 	.word	0x6f6e2064
   17744:	65622074 	.word	0x65622074
   17748:	74736520 	.word	0x74736520
   1774c:	696c6261 	.word	0x696c6261
   17750:	64656873 	.word	0x64656873
   17754:	66656220 	.word	0x66656220
   17758:	2065726f 	.word	0x2065726f
   1775c:	656d6974 	.word	0x656d6974
   17760:	1b74756f 	.word	0x1b74756f
   17764:	1b6d305b 	.word	0x1b6d305b
   17768:	0a6d305b 	.word	0x0a6d305b
   1776c:	00000000 	.word	0x00000000
   17770:	31345b1b 	.word	0x31345b1b
   17774:	4952436d 	.word	0x4952436d
   17778:	41434954 	.word	0x41434954
   1777c:	305b1b4c 	.word	0x305b1b4c
   17780:	6d34393b 	.word	0x6d34393b
   17784:	3a73253a 	.word	0x3a73253a
   17788:	3b305b1b 	.word	0x3b305b1b
   1778c:	256d3239 	.word	0x256d3239
   17790:	5b1b3a73 	.word	0x5b1b3a73
   17794:	33393b30 	.word	0x33393b30
   17798:	3e64256d 	.word	0x3e64256d
   1779c:	305b1b20 	.word	0x305b1b20
   177a0:	6d37333b 	.word	0x6d37333b
   177a4:	65737341 	.word	0x65737341
   177a8:	6f697472 	.word	0x6f697472
   177ac:	6146206e 	.word	0x6146206e
   177b0:	72756c69 	.word	0x72756c69
   177b4:	43202c65 	.word	0x43202c65
   177b8:	69646e6f 	.word	0x69646e6f
   177bc:	6e6f6974 	.word	0x6e6f6974
   177c0:	73655420 	.word	0x73655420
   177c4:	3a646574 	.word	0x3a646574
   177c8:	70632820 	.word	0x70632820
   177cc:	69645f75 	.word	0x69645f75
   177d0:	65646976 	.word	0x65646976
   177d4:	203c2072 	.word	0x203c2072
   177d8:	0a293233 	.word	0x0a293233
   177dc:	20202020 	.word	0x20202020
   177e0:	20202020 	.word	0x20202020
   177e4:	69442020 	.word	0x69442020
   177e8:	65646976 	.word	0x65646976
   177ec:	756d2072 	.word	0x756d2072
   177f0:	276e7473 	.word	0x276e7473
   177f4:	78652074 	.word	0x78652074
   177f8:	64656563 	.word	0x64656563
   177fc:	1b323320 	.word	0x1b323320
   17800:	1b6d305b 	.word	0x1b6d305b
   17804:	0a6d305b 	.word	0x0a6d305b
   17808:	00000000 	.word	0x00000000
   1780c:	31345b1b 	.word	0x31345b1b
   17810:	4952436d 	.word	0x4952436d
   17814:	41434954 	.word	0x41434954
   17818:	305b1b4c 	.word	0x305b1b4c
   1781c:	6d34393b 	.word	0x6d34393b
   17820:	3a73253a 	.word	0x3a73253a
   17824:	3b305b1b 	.word	0x3b305b1b
   17828:	256d3239 	.word	0x256d3239
   1782c:	5b1b3a73 	.word	0x5b1b3a73
   17830:	33393b30 	.word	0x33393b30
   17834:	3e64256d 	.word	0x3e64256d
   17838:	305b1b20 	.word	0x305b1b20
   1783c:	6d37333b 	.word	0x6d37333b
   17840:	65737341 	.word	0x65737341
   17844:	6f697472 	.word	0x6f697472
   17848:	6146206e 	.word	0x6146206e
   1784c:	72756c69 	.word	0x72756c69
   17850:	43202c65 	.word	0x43202c65
   17854:	69646e6f 	.word	0x69646e6f
   17858:	6e6f6974 	.word	0x6e6f6974
   1785c:	73655420 	.word	0x73655420
   17860:	3a646574 	.word	0x3a646574
   17864:	72662820 	.word	0x72662820
   17868:	65757165 	.word	0x65757165
   1786c:	2079636e 	.word	0x2079636e
   17870:	30203d21 	.word	0x30203d21
   17874:	20200a29 	.word	0x20200a29
   17878:	20202020 	.word	0x20202020
   1787c:	20202020 	.word	0x20202020
   17880:	6e6e6143 	.word	0x6e6e6143
   17884:	6820746f 	.word	0x6820746f
   17888:	20657661 	.word	0x20657661
   1788c:	6f72657a 	.word	0x6f72657a
   17890:	63697420 	.word	0x63697420
   17894:	7020736b 	.word	0x7020736b
   17898:	6d207265 	.word	0x6d207265
   1789c:	6f726369 	.word	0x6f726369
   178a0:	6f636573 	.word	0x6f636573
   178a4:	202c646e 	.word	0x202c646e
   178a8:	61656c70 	.word	0x61656c70
   178ac:	63206573 	.word	0x63206573
   178b0:	736f6f68 	.word	0x736f6f68
   178b4:	20312065 	.word	0x20312065
   178b8:	6d20726f 	.word	0x6d20726f
   178bc:	2e65726f 	.word	0x2e65726f
   178c0:	6d305b1b 	.word	0x6d305b1b
   178c4:	6d305b1b 	.word	0x6d305b1b
   178c8:	0000000a 	.word	0x0000000a
   178cc:	33345b1b 	.word	0x33345b1b
   178d0:	4157206d 	.word	0x4157206d
   178d4:	4e494e52 	.word	0x4e494e52
   178d8:	305b1b47 	.word	0x305b1b47
   178dc:	6d34393b 	.word	0x6d34393b
   178e0:	3a73253a 	.word	0x3a73253a
   178e4:	3b305b1b 	.word	0x3b305b1b
   178e8:	256d3239 	.word	0x256d3239
   178ec:	5b1b3a73 	.word	0x5b1b3a73
   178f0:	33393b30 	.word	0x33393b30
   178f4:	3e64256d 	.word	0x3e64256d
   178f8:	305b1b20 	.word	0x305b1b20
   178fc:	6d37333b 	.word	0x6d37333b
   17900:	74737953 	.word	0x74737953
   17904:	54206d65 	.word	0x54206d65
   17908:	72656d69 	.word	0x72656d69
   1790c:	73616820 	.word	0x73616820
   17910:	49414620 	.word	0x49414620
   17914:	2044454c 	.word	0x2044454c
   17918:	73206f74 	.word	0x73206f74
   1791c:	74726174 	.word	0x74726174
   17920:	305b1b21 	.word	0x305b1b21
   17924:	305b1b6d 	.word	0x305b1b6d
   17928:	ff000a6d 	.word	0xff000a6d

0001792c <Lpc40xxSystemController::SetPeripheralClockDivider(unsigned char)::file>:
   1792c:	74737973 635f6d65 72746e6f 656c6c6f     system_controlle
   1793c:	70682e72 ffff0070                       r.hpp...

00017944 <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)::file>:
   17944:	74737973 635f6d65 72746e6f 656c6c6f     system_controlle
   17954:	70682e72 ffff0070                       r.hpp...

0001795c <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)::file>:
   1795c:	74737973 635f6d65 72746e6f 656c6c6f     system_controlle
   1796c:	70682e72 ffff0070                       r.hpp...

00017974 <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)::file>:
   17974:	74737973 635f6d65 72746e6f 656c6c6f     system_controlle
   17984:	70682e72 ffff0070                       r.hpp...

0001798c <Lpc40xxSystemController::SetCpuClockDivider(unsigned char)::file>:
   1798c:	74737973 635f6d65 72746e6f 656c6c6f     system_controlle
   1799c:	70682e72 ffff0070                       r.hpp...

000179a4 <Timer::kPowerbit>:
   179a4:	00000001 00000002 00000016 00000017     ................

000179b4 <Timer::kTimerIrq>:
   179b4:	04030201                                ....

000179b8 <Timer::kTimerIsr>:
   179b8:	000123f9 00012435 00012471 000124ad     .#..5$..q$...$..

000179c8 <Timer::Initialize(unsigned long, void (*)(), long)::file>:
   179c8:	656d6974 70682e72 ffff0070              timer.hpp...

000179d4 <Uart::kTxUartPortFunction>:
   179d4:	05020201                                ....

000179d8 <Uart::kRxUartPortFunction>:
   179d8:	03020201                                ....

000179dc <Uart::kPowerbit>:
   179dc:	00000003 00000018 00000019 00000008     ................

000179ec <LowLevelInit()::file>:
   179ec:	72617473 2e707574 00707063              startup.cpp.

000179f8 <vtable for Uart>:
	...
   17a00:	000119f1 00011abd 00011bed 00011d21     ............!...
   17a10:	fffffffc 00000000 000109c5 00010a55     ............U...
   17a20:	00010aad 00010ac5 00010ad9 00010b19     ................
   17a30:	00010b49                                I...

00017a34 <vtable for Timer>:
	...
   17a3c:	00011759 000118bd 000119b5 fffffffc     Y...............
   17a4c:	00000000 000109c5 00010a55 00010aad     ........U.......
   17a5c:	00010ac5 00010ad9 00010b19 00010b49     ............I...

00017a6c <vtable for Pin>:
	...
   17a74:	00011129 000111a1 00011221 00011295     ).......!.......
   17a84:	00011309 00011385 00011401 00011475     ............u...
   17a94:	000114f1 00011565 000115d9 000116b1     ....e...........
   17aa4:	000116dd                                ....

00017aa8 <vtable for SystemTimer>:
	...
   17ab0:	00010fc5 00010ff9 00011095 fffffffc     ................
   17ac0:	00000000 000109c5 00010a55 00010aad     ........U.......
   17ad0:	00010ac5 00010ad9 00010b19 00010b49     ............I...

00017ae0 <vtable for Lpc40xxSystemController>:
	...
   17ae8:	000109c5 00010a55 00010aad 00010ac5     ....U...........
   17af8:	00010ad9 00010b19 00010b49              ........I...

00017b04 <Lpc40xxSystemController::SetPeripheralClockDivider(unsigned char)::__PRETTY_FUNCTION__>:
   17b04:	74726976 206c6175 64696f76 63704c20     virtual void Lpc
   17b14:	78783034 74737953 6f436d65 6f72746e     40xxSystemContro
   17b24:	72656c6c 65533a3a 72655074 65687069     ller::SetPeriphe
   17b34:	436c6172 6b636f6c 69766944 28726564     ralClockDivider(
   17b44:	746e6975 29745f38 ffffff00              uint8_t)....

00017b50 <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)::__PRETTY_FUNCTION__>:
   17b50:	746e6975 745f3233 63704c20 78783034     uint32_t Lpc40xx
   17b60:	74737953 6f436d65 6f72746e 72656c6c     SystemController
   17b70:	65533a3a 69614d74 6c6c506e 63704c28     ::SetMainPll(Lpc
   17b80:	78783034 74737953 6f436d65 6f72746e     40xxSystemContro
   17b90:	72656c6c 6c503a3a 706e496c 202c7475     ller::PllInput, 
   17ba0:	746e6975 745f3631 ffff0029              uint16_t)...

00017bac <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)::__PRETTY_FUNCTION__>:
   17bac:	746e6975 745f3233 63704c20 78783034     uint32_t Lpc40xx
   17bbc:	74737953 6f436d65 6f72746e 72656c6c     SystemController
   17bcc:	61433a3a 6c75636c 50657461 4c286c6c     ::CalculatePll(L
   17bdc:	30346370 79537878 6d657473 746e6f43     pc40xxSystemCont
   17bec:	6c6c6f72 3a3a7265 496c6c50 7475706e     roller::PllInput
   17bfc:	6975202c 3631746e 0029745f              , uint16_t).

00017c08 <Lpc40xxSystemController::SetCpuClockDivider(unsigned char)::__PRETTY_FUNCTION__>:
   17c08:	64696f76 63704c20 78783034 74737953     void Lpc40xxSyst
   17c18:	6f436d65 6f72746e 72656c6c 65533a3a     emController::Se
   17c28:	75704374 636f6c43 7669446b 72656469     tCpuClockDivider
   17c38:	6e697528 745f3874 ffff0029              (uint8_t)...

00017c44 <Timer::Initialize(unsigned long, void (*)(), long)::__PRETTY_FUNCTION__>:
   17c44:	74726976 206c6175 64696f76 6d695420     virtual void Tim
   17c54:	3a3a7265 74696e49 696c6169 7528657a     er::Initialize(u
   17c64:	33746e69 2c745f32 72734920 6e696f50     int32_t, IsrPoin
   17c74:	2c726574 746e6920 745f3233 ffff0029     ter, int32_t)...

00017c84 <LowLevelInit()::__PRETTY_FUNCTION__>:
   17c84:	64696f76 776f4c20 6576654c 696e496c     void LowLevelIni
   17c94:	00292874 63617453 6544206b 20687470     t().Stack Depth 
   17ca4:	7a25203d 00000a64 25232020 203a757a     = %zd...  #%zu: 
   17cb4:	70257830 0000000a 6e75520a 6874203a     0x%p.....Run: th
   17cc4:	6f662065 776f6c6c 20676e69 6d6d6f63     e following comm
   17cd4:	20646e61 79206e69 2072756f 6a6f7270     and in your proj
   17ce4:	20746365 65726964 726f7463 00000079     ect directory...
   17cf4:	1b20200a 333b315b 616d6d37 7320656b     .  .[1;37mmake s
   17d04:	6b636174 63617274 73252d65 41525420     tacktrace-%s TRA
   17d14:	3d534543 00000022 70257830 00000000     CES="...0x%p....
   17d24:	25783020 00000070 5b1b0a22 00006d30      0x%p..."..[0m..
   17d34:	73696854 6c697720 6572206c 74726f70     This will report
   17d44:	65687420 6c696620 6e612065 696c2064      the file and li
   17d54:	6e20656e 65626d75 68742072 6c207461     ne number that l
   17d64:	74206465 6874206f 66207369 74636e75     ed to this funct
   17d74:	206e6f69 6e696562 61632067 64656c6c     ion being called
   17d84:	0000002e 6c707061 74616369 006e6f69     ....application.
   17d94:	31345b1b 4952436d 41434954 305b1b4c     .[41mCRITICAL.[0
   17da4:	6d34393b 3a73253a 3b305b1b 256d3239     ;94m:%s:.[0;92m%
   17db4:	5b1b3a73 33393b30 3e64256d 305b1b20     s:.[0;93m%d> .[0
   17dc4:	6d37333b 65737341 6f697472 6146206e     ;37mAssertion Fa
   17dd4:	72756c69 43202c65 69646e6f 6e6f6974     ilure, Condition
   17de4:	73655420 3a646574 73692820 3d212072      Tested: (isr !=
   17df4:	746e4920 75727265 6f4c7470 70756b6f      InterruptLookup
   17e04:	646e6148 2972656c 2020200a 20202020     Handler).       
   17e14:	4e202020 5349206f 6f662052 20646e75        No ISR found 
   17e24:	20726f66 20656874 74636576 2520726f     for the vector %
   17e34:	305b1b75 305b1b6d 00000a6d 6972500a     u.[0m.[0m....Pri
   17e44:	6e69746e 74532067 206b6361 63617254     nting Stack Trac
   17e54:	000a3a65 31345b1b 7261486d 61462064     e:...[41mHard Fa
   17e64:	20746c75 65637845 6f697470 634f206e     ult Exception Oc
   17e74:	72727563 0a216465 6d305b1b 00000000     curred!..[0m....
   17e84:	203a3072 30257830 2c586c38 3a317220     r0: 0x%08lX, r1:
   17e94:	25783020 586c3830 3272202c 7830203a      0x%08lX, r2: 0x
   17ea4:	6c383025 72202c58 30203a33 38302578     %08lX, r3: 0x%08
   17eb4:	000a586c 3a323172 25783020 586c3830     lX..r12: 0x%08lX
   17ec4:	726c202c 7830203a 6c383025 70202c58     , lr: 0x%08lX, p
   17ed4:	30203a63 38302578 202c586c 3a727370     c: 0x%08lX, psr:
   17ee4:	25783020 586c3830 ffff000a               0x%08lX....

00017ef0 <InterruptLookupHandler::file>:
   17ef0:	65746e69 70757272 70632e74 ffff0070     interrupt.cpp...

00017f00 <InterruptLookupHandler::__PRETTY_FUNCTION__>:
   17f00:	64696f76 746e4920 75727265 6f4c7470     void InterruptLo
   17f10:	70756b6f 646e6148 2872656c ffff0029     okupHandler()...

00017f20 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)::pow10>:
   17f20:	3f800000 41200000 42c80000 447a0000     ...?.. A...B..zD
   17f30:	461c4000 47c35000 49742400 4b189680     .@.F.P.G.$tI...K
   17f40:	4cbebc20 4e6e6b28 63617453 6544206b      ..L(knNStack De
   17f50:	20687470 7a25203d 00000a64 25232020     pth = %zd...  #%
   17f60:	203a757a 70257830 0000000a 6e75520a     zu: 0x%p.....Run
   17f70:	6874203a 6f662065 776f6c6c 20676e69     : the following 
   17f80:	6d6d6f63 20646e61 79206e69 2072756f     command in your 
   17f90:	6a6f7270 20746365 65726964 726f7463     project director
   17fa0:	00000079 1b20200a 333b315b 616d6d37     y....  .[1;37mma
   17fb0:	7320656b 6b636174 63617274 73252d65     ke stacktrace-%s
   17fc0:	41525420 3d534543 00000022 70257830      TRACES="...0x%p
   17fd0:	00000000 25783020 00000070 5b1b0a22     .... 0x%p..."..[
   17fe0:	00006d30 73696854 6c697720 6572206c     0m..This will re
   17ff0:	74726f70 65687420 6c696620 6e612065     port the file an
   18000:	696c2064 6e20656e 65626d75 68742072     d line number th
   18010:	6c207461 74206465 6874206f 66207369     at led to this f
   18020:	74636e75 206e6f69 6e696562 61632067     unction being ca
   18030:	64656c6c 0000002e 6c707061 74616369     lled....applicat
   18040:	006e6f69 33345b1b 4157206d 4e494e52     ion..[43m WARNIN
   18050:	305b1b47 6d34393b 3a73253a 3b305b1b     G.[0;94m:%s:.[0;
   18060:	256d3239 5b1b3a73 33393b30 3e64256d     92m%s:.[0;93m%d>
   18070:	305b1b20 6d37333b 74726f50 20642520      .[0;37mPort %d 
   18080:	6e6e6163 6220746f 73752065 66206465     cannot be used f
   18090:	4520726f 72657478 206c616e 65746e49     or External Inte
   180a0:	70757272 202e7374 6465654e 206f7420     rrupts. Need to 
   180b0:	20657375 4f495047 206e6f20 74726f50     use GPIO on Port
   180c0:	6f203020 2e322072 6d305b1b 6d305b1b      0 or 2..[0m.[0m
   180d0:	0000000a 33345b1b 4157206d 4e494e52     .....[43m WARNIN
   180e0:	305b1b47 6d34393b 3a73253a 3b305b1b     G.[0;94m:%s:.[0;
   180f0:	256d3239 5b1b3a73 33393b30 3e64256d     92m%s:.[0;93m%d>
   18100:	305b1b20 6d37333b 65676445 20642520      .[0;37mEdge %d 
   18110:	6e6e6163 6220746f 73752065 66206465     cannot be used f
   18120:	4520726f 72657478 206c616e 65746e49     or External Inte
   18130:	70757272 4e2e7374 20646565 75206f74     rrupts.Need to u
   18140:	61206573 73697220 2c676e69 6c616620     se a rising, fal
   18150:	676e696c 726f202c 746f6220 6f632068     ling, or both co
   18160:	6769666e 74617275 2e6e6f69 6d305b1b     nfiguration..[0m
   18170:	0000000a 31345b1b 4952436d 41434954     .....[41mCRITICA
   18180:	305b1b4c 6d34393b 3a73253a 3b305b1b     L.[0;94m:%s:.[0;
   18190:	256d3239 5b1b3a73 33393b30 3e64256d     92m%s:.[0;93m%d>
   181a0:	305b1b20 6d37333b 65737341 6f697472      .[0;37mAssertio
   181b0:	6146206e 72756c69 43202c65 69646e6f     n Failure, Condi
   181c0:	6e6f6974 73655420 3a646574 65702820     tion Tested: (pe
   181d0:	68706972 6c617265 7669645f 72656469     ripheral_divider
   181e0:	203d3c20 200a2934 20202020 20202020      <= 4).         
   181f0:	76694420 72656469 73756d20 74276e74      Divider mustn't
   18200:	63786520 20646565 5b1b3233 5b1b6d30      exceed 32.[0m.[
   18210:	000a6d30 6972500a 6e69746e 74532067     0m...Printing St
   18220:	206b6361 63617254 000a3a65 31345b1b     ack Trace:...[41
   18230:	4952436d 41434954 305b1b4c 6d34393b     mCRITICAL.[0;94m
   18240:	3a73253a 3b305b1b 256d3239 5b1b3a73     :%s:.[0;92m%s:.[
   18250:	33393b30 3e64256d 305b1b20 6d37333b     0;93m%d> .[0;37m
   18260:	65737341 6f697472 6146206e 72756c69     Assertion Failur
   18270:	43202c65 69646e6f 6e6f6974 73655420     e, Condition Tes
   18280:	3a646574 65642820 65726973 70735f64     ted: (desired_sp
   18290:	5f646565 6d5f6e69 3c207a68 34383320     eed_in_mhz < 384
   182a0:	20262620 69736564 5f646572 65657073      && desired_spee
   182b0:	6e695f64 7a686d5f 31203e20 200a2932     d_in_mhz > 12). 
   182c0:	20202020 20202020 65724620 6e657571              Frequen
   182d0:	6d207963 20747375 6c206562 7265776f     cy must be lower
   182e0:	61687420 3833206e 484d2034 646e617a      than 384 MHzand
   182f0:	65726720 72657461 61687420 726f206e      greater than or
   18300:	75716520 74206c61 3231206f 7a484d20      equal to 12 MHz
   18310:	6d305b1b 6d305b1b 0000000a 31345b1b     .[0m.[0m.....[41
   18320:	4952436d 41434954 305b1b4c 6d34393b     mCRITICAL.[0;94m
   18330:	3a73253a 3b305b1b 256d3239 5b1b3a73     :%s:.[0;92m%s:.[
   18340:	33393b30 3e64256d 305b1b20 6d37333b     0;93m%d> .[0;37m
   18350:	65737341 6f697472 6146206e 72756c69     Assertion Failur
   18360:	43202c65 69646e6f 6e6f6974 73655420     e, Condition Tes
   18370:	3a646574 69642820 65646976 61765f72     ted: (divider_va
   18380:	2065756c 2938203c 2020200a 20202020     lue < 8).       
   18390:	50202020 64204c4c 64697669 76207265        PLL divider v
   183a0:	65756c61 6e657720 756f2074 666f2074     alue went out of
   183b0:	756f6220 1b73646e 1b6d305b 0a6d305b      bounds.[0m.[0m.
   183c0:	00000000 31345b1b 4952436d 41434954     .....[41mCRITICA
   183d0:	305b1b4c 6d34393b 3a73253a 3b305b1b     L.[0;94m:%s:.[0;
   183e0:	256d3239 5b1b3a73 33393b30 3e64256d     92m%s:.[0;93m%d>
   183f0:	305b1b20 6d37333b 65737341 6f697472      .[0;37mAssertio
   18400:	6146206e 72756c69 43202c65 69646e6f     n Failure, Condi
   18410:	6e6f6974 73655420 3a646574 61662820     tion Tested: (fa
   18420:	2965736c 2020200a 20202020 50202020     lse).          P
   18430:	6c204c4c 206b636f 6c756f63 6f6e2064     LL lock could no
   18440:	65622074 74736520 696c6261 64656873     t be established
   18450:	66656220 2065726f 656d6974 1b74756f      before timeout.
   18460:	1b6d305b 0a6d305b 00000000 31345b1b     [0m.[0m......[41
   18470:	4952436d 41434954 305b1b4c 6d34393b     mCRITICAL.[0;94m
   18480:	3a73253a 3b305b1b 256d3239 5b1b3a73     :%s:.[0;92m%s:.[
   18490:	33393b30 3e64256d 305b1b20 6d37333b     0;93m%d> .[0;37m
   184a0:	65737341 6f697472 6146206e 72756c69     Assertion Failur
   184b0:	43202c65 69646e6f 6e6f6974 73655420     e, Condition Tes
   184c0:	3a646574 70632820 69645f75 65646976     ted: (cpu_divide
   184d0:	203c2072 0a293233 20202020 20202020     r < 32).        
   184e0:	69442020 65646976 756d2072 276e7473       Divider mustn'
   184f0:	78652074 64656563 1b323320 1b6d305b     t exceed 32.[0m.
   18500:	0a6d305b 00000000 35345b1b 2020206d     [0m......[45m   
   18510:	4f525245 305b1b52 6d34393b 3a73253a     ERROR.[0;94m:%s:
   18520:	3b305b1b 256d3239 5b1b3a73 33393b30     .[0;92m%s:.[0;93
   18530:	3e64256d 305b1b20 6d37333b 6c696146     m%d> .[0;37mFail
   18540:	74206465 6e69206f 61697469 53206574     ed to initiate S
   18550:	6d204950 2065646f 68746977 74206e69     PI mode within t
   18560:	6f656d69 202e7475 726f6241 676e6974     imeout. Aborting
   18570:	305b1b21 00000a6d 35345b1b 2020206d     !.[0m....[45m   
   18580:	4f525245 305b1b52 6d34393b 3a73253a     ERROR.[0;94m:%s:
   18590:	3b305b1b 256d3239 5b1b3a73 33393b30     .[0;92m%s:.[0;93
   185a0:	3e64256d 305b1b20 6d37333b 70736552     m%d> .[0;37mResp
   185b0:	65736e6f 746e6920 69726765 63207974     onse integrity c
   185c0:	6b636568 69616620 2e64656c 6f624120     heck failed. Abo
   185d0:	6e697472 5b1b2167 000a6d30 35345b1b     rting!.[0m...[45
   185e0:	2020206d 4f525245 305b1b52 6d34393b     m   ERROR.[0;94m
   185f0:	3a73253a 3b305b1b 256d3239 5b1b3a73     :%s:.[0;92m%s:.[
   18600:	33393b30 3e64256d 305b1b20 6d37333b     0;93m%d> .[0;37m
   18610:	75736e55 726f7070 20646574 746c6f76     Unsupported volt
   18620:	20656761 75206e69 202e6573 726f6241     age in use. Abor
   18630:	676e6974 305b1b21 00000a6d 35345b1b     ting!.[0m....[45
   18640:	2020206d 4f525245 305b1b52 6d34393b     m   ERROR.[0;94m
   18650:	3a73253a 3b305b1b 256d3239 5b1b3a73     :%s:.[0;92m%s:.[
   18660:	33393b30 3e64256d 305b1b20 6d37333b     0;93m%d> .[0;37m
   18670:	43204453 20647261 656d6974 756f2064     SD Card timed ou
   18680:	41202e74 74726f62 21676e69 6d305b1b     t. Aborting!.[0m
   18690:	0000000a 65757274 00000000 736c6166     ....true....fals
   186a0:	00000065 35345b1b 2020206d 4f525245     e....[45m   ERRO
   186b0:	305b1b52 6d34393b 3a73253a 3b305b1b     R.[0;94m:%s:.[0;
   186c0:	256d3239 5b1b3a73 33393b30 3e64256d     92m%s:.[0;93m%d>
   186d0:	305b1b20 6d37333b 6c696857 65522065      .[0;37mWhile Re
   186e0:	6e696461 6c422067 206b636f 20642523     ading Block #%d 
   186f0:	31435243 5b1b3a36 000a6d30 35345b1b     CRC16:.[0m...[45
   18700:	2020206d 4f525245 305b1b52 6d34393b     m   ERROR.[0;94m
   18710:	3a73253a 3b305b1b 256d3239 5b1b3a73     :%s:.[0;92m%s:.[
   18720:	33393b30 3e64256d 305b1b20 6d37333b     0;93m%d> .[0;37m
   18730:	65707845 64657463 78302720 58343025     Expected '0x%04X
   18740:	305b1b27 00000a6d 35345b1b 2020206d     '.[0m....[45m   
   18750:	4f525245 305b1b52 6d34393b 3a73253a     ERROR.[0;94m:%s:
   18760:	3b305b1b 256d3239 5b1b3a73 33393b30     .[0;92m%s:.[0;93
   18770:	3e64256d 305b1b20 6d37333b 20746f47     m%d> .[0;37mGot 
   18780:	25783027 27583430 6d305b1b 0000000a     '0x%04X'.[0m....
   18790:	35345b1b 2020206d 4f525245 305b1b52     .[45m   ERROR.[0
   187a0:	6d34393b 3a73253a 3b305b1b 256d3239     ;94m:%s:.[0;92m%
   187b0:	5b1b3a73 33393b30 3e64256d 305b1b20     s:.[0;93m%d> .[0
   187c0:	6d37333b 64616552 646d4320 73617720     ;37mRead Cmd was
   187d0:	746f6e20 6b636120 6c776f6e 65676465      not acknowledge
   187e0:	72702064 7265706f 1b21796c 0a6d305b     d properly!.[0m.
   187f0:	00000000 35345b1b 2020206d 4f525245     .....[45m   ERRO
   18800:	305b1b52 6d34393b 3a73253a 3b305b1b     R.[0;94m:%s:.[0;
   18810:	256d3239 5b1b3a73 33393b30 3e64256d     92m%s:.[0;93m%d>
   18820:	305b1b20 6d37333b 61726150 6574656d      .[0;37mParamete
   18830:	72452072 25203a72 305b1b73 00000a6d     r Err: %s.[0m...
   18840:	35345b1b 2020206d 4f525245 305b1b52     .[45m   ERROR.[0
   18850:	6d34393b 3a73253a 3b305b1b 256d3239     ;94m:%s:.[0;92m%
   18860:	5b1b3a73 33393b30 3e64256d 305b1b20     s:.[0;93m%d> .[0
   18870:	6d37333b 72646441 72724520 7325203a     ;37mAddr Err: %s
   18880:	6d305b1b 0000000a 35345b1b 2020206d     .[0m.....[45m   
   18890:	4f525245 305b1b52 6d34393b 3a73253a     ERROR.[0;94m:%s:
   188a0:	3b305b1b 256d3239 5b1b3a73 33393b30     .[0;92m%s:.[0;93
   188b0:	3e64256d 305b1b20 6d37333b 73617245     m%d> .[0;37mEras
   188c0:	65532065 72452071 25203a72 305b1b73     e Seq Err: %s.[0
   188d0:	00000a6d 35345b1b 2020206d 4f525245     m....[45m   ERRO
   188e0:	305b1b52 6d34393b 3a73253a 3b305b1b     R.[0;94m:%s:.[0;
   188f0:	256d3239 5b1b3a73 33393b30 3e64256d     92m%s:.[0;93m%d>
   18900:	305b1b20 6d37333b 206d6f43 20435243      .[0;37mCom CRC 
   18910:	3a727245 1b732520 0a6d305b 00000000     Err: %s.[0m.....
   18920:	35345b1b 2020206d 4f525245 305b1b52     .[45m   ERROR.[0
   18930:	6d34393b 3a73253a 3b305b1b 256d3239     ;94m:%s:.[0;92m%
   18940:	5b1b3a73 33393b30 3e64256d 305b1b20     s:.[0;93m%d> .[0
   18950:	6d37333b 656c6c49 206c6167 20646d43     ;37mIllegal Cmd 
   18960:	3a727245 1b732520 0a6d305b 00000000     Err: %s.[0m.....
   18970:	35345b1b 2020206d 4f525245 305b1b52     .[45m   ERROR.[0
   18980:	6d34393b 3a73253a 3b305b1b 256d3239     ;94m:%s:.[0;92m%
   18990:	5b1b3a73 33393b30 3e64256d 305b1b20     s:.[0;93m%d> .[0
   189a0:	6d37333b 73617245 65522065 3a746573     ;37mErase Reset:
   189b0:	1b732520 0a6d305b 00000000 35345b1b      %s.[0m......[45
   189c0:	2020206d 4f525245 305b1b52 6d34393b     m   ERROR.[0;94m
   189d0:	3a73253a 3b305b1b 256d3239 5b1b3a73     :%s:.[0;92m%s:.[
   189e0:	33393b30 3e64256d 305b1b20 6d37333b     0;93m%d> .[0;37m
   189f0:	49206e49 3a656c64 1b732520 0a6d305b     In Idle: %s.[0m.
   18a00:	00000000 35345b1b 2020206d 4f525245     .....[45m   ERRO
   18a10:	305b1b52 6d34393b 3a73253a 3b305b1b     R.[0;94m:%s:.[0;
   18a20:	256d3239 5b1b3a73 33393b30 3e64256d     92m%s:.[0;93m%d>
   18a30:	305b1b20 6d37333b 6c696146 74206465      .[0;37mFailed t
   18a40:	6573206f 74532074 20747261 72646441     o set Start Addr
   18a50:	21737365 6d305b1b 0000000a 35345b1b     ess!.[0m.....[45
   18a60:	2020206d 4f525245 305b1b52 6d34393b     m   ERROR.[0;94m
   18a70:	3a73253a 3b305b1b 256d3239 5b1b3a73     :%s:.[0;92m%s:.[
   18a80:	33393b30 3e64256d 305b1b20 6d37333b     0;93m%d> .[0;37m
   18a90:	6c696146 74206465 6573206f 6e452074     Failed to set En
   18aa0:	64412064 73657264 5b1b2173 000a6d30     d Address!.[0m..
   18ab0:	35345b1b 2020206d 4f525245 305b1b52     .[45m   ERROR.[0
   18ac0:	6d34393b 3a73253a 3b305b1b 256d3239     ;94m:%s:.[0;92m%
   18ad0:	5b1b3a73 33393b30 3e64256d 305b1b20     s:.[0;93m%d> .[0
   18ae0:	6d37333b 6e6b6e55 206e776f 70736572     ;37mUnknown resp
   18af0:	65736e6f 70797420 41202e65 74726f62     onse type. Abort
   18b00:	21676e69 6d305b1b 0000000a 35345b1b     ing!.[0m.....[45
   18b10:	2020206d 4f525245 305b1b52 6d34393b     m   ERROR.[0;94m
   18b20:	3a73253a 3b305b1b 256d3239 5b1b3a73     :%s:.[0;92m%s:.[
   18b30:	33393b30 3e64256d 305b1b20 6d37333b     0;93m%d> .[0;37m
   18b40:	70736552 65736e6f 736e7520 6f707075     Response unsuppo
   18b50:	64657472 206e6920 20495053 65646f6d     rted in SPI mode
   18b60:	6241202e 6974726f 1b21676e 0a6d305b     . Aborting!.[0m.
   18b70:	ffffff00                                ....

00018b74 <Gpio::ValidPortCheck()::file>:
   18b74:	6f697067 7070682e ffffff00              gpio.hpp....

00018b80 <Gpio::SetInterruptEdge(GpioInterface::Edge)::file>:
   18b80:	6f697067 7070682e ffffff00              gpio.hpp....

00018b8c <Gpio::ClearInterruptEdge(GpioInterface::Edge)::file>:
   18b8c:	6f697067 7070682e ffffff00              gpio.hpp....

00018b98 <Ssp::kPinSelect>:
   18b98:	ff040202                                ....

00018b9c <Ssp::kSspPinMatrix>:
   18b9c:	00017a74 00001200 00017a74 00001100     tz......tz......
   18bac:	00017a74 00000f00 00017a74 00000900     tz......tz......
   18bbc:	00017a74 00000800 00017a74 00000700     tz......tz......
   18bcc:	00017a74 00000101 00017a74 00000401     tz......tz......
   18bdc:	00017a74 00000001                       tz......

00018be4 <Ssp::kPowerBit>:
   18be4:	00000015 0000000a 00000014              ............

00018bf0 <Sd::kCrcTable8>:
   18bf0:	1b120900 3f362d24 535a4148 777e656c     ....$-6?HAZSle~w
   18c00:	020b1019 262f343d 4a435851 6e677c75     ....=4/&QXCJu|gn
   18c10:	29203b32 0d041f16 6168737a 454c575e     2; )....zsha^WLE
   18c20:	3039222b 141d060f 78716a63 5c554e47     +"90....cjqxGNU\
   18c30:	7f766d64 5b524940 373e252c 131a0108     dmv.@IR[,%>7....
   18c40:	666f747d 424b5059 2e273c35 0a031811     }tofYPKB5<'.....
   18c50:	4d445f56 69607b72 050c171e 2128333a     V_DMr{`i....:3(!
   18c60:	545d464f 7079626b 1c150e07 38312a23     OF]Tkbyp....#*18
   18c70:	5a534841 7e776c65 121b0009 363f242d     AHSZelw~....-$?6
   18c80:	434a5158 676e757c 0b021910 2f263d34     XQJC|ung....4=&/
   18c90:	68617a73 4c455e57 2029323b 040d161f     szahW^EL;2) ....
   18ca0:	7178636a 555c474e 39302b22 1d140f06     jcxqNG\U"+09....
   18cb0:	3e372c25 1a130801 767f646d 525b4049     %,7>....md.vI@[R
   18cc0:	272e353c 030a1118 6f667d74 4b425950     <5.'....t}foPYBK
   18cd0:	0c051e17 28213a33 444d565f 6069727b     ....3:!(_VMD{ri`
   18ce0:	151c070e 3138232a 5d544f46 00706b62     ....*#81FOT]bkp.

00018cf0 <Sd::kCrcTable16>:
   18cf0:	10210000 30632042 50a54084 70e760c6     ..!.B c0.@.P.`.p
   18d00:	91298108 b16ba14a d1adc18c f1efe1ce     ..).J.k.........
   18d10:	02101231 22523273 429452b5 62d672f7     1...s2R".R.B.r.b
   18d20:	83189339 a35ab37b c39cd3bd e3def3ff     9...{.Z.........
   18d30:	34432462 14010420 74c764e6 548544a4     b$C4 ....d.t.D.T
   18d40:	b54ba56a 95098528 f5cfe5ee d58dc5ac     j.K.(...........
   18d50:	26723653 06301611 66f676d7 46b45695     S6r&..0..v.f.V.F
   18d60:	a77ab75b 87389719 e7fef7df c7bcd79d     [.z...8.........
   18d70:	58e548c4 78a76886 18610840 38232802     .H.X.h.x@.a..(#8
   18d80:	d9edc9cc f9afe98e 99698948 b92ba90a     ........H.i...+.
   18d90:	4ad45af5 6a967ab7 0a501a71 2a123a33     .Z.J.z.jq.P.3:.*
   18da0:	cbdcdbfd eb9efbbf 8b589b79 ab1abb3b     ........y.X.;...
   18db0:	7c876ca6 5cc54ce4 3c032c22 1c410c60     .l.|.L.\",.<`.A.
   18dc0:	fd8fedae ddcdcdec bd0bad2a 9d498d68     ........*...h.I.
   18dd0:	6eb67e97 4ef45ed5 2e323e13 0e701e51     .~.n.^.N.>2.Q.p.
   18de0:	efbeff9f cffcdfdd af3abf1b 8f789f59     ..........:.Y.x.
   18df0:	81a99188 a1ebb1ca c12dd10c e16ff14e     ..........-.N.o.
   18e00:	00a11080 20e330c2 40255004 60677046     .....0. .P%@Fpg`
   18e10:	939883b9 b3daa3fb d31cc33d f35ee37f     ........=.....^.
   18e20:	129002b1 32d222f3 52144235 72566277     .....".25B.RwbVr
   18e30:	a5cbb5ea 858995a8 e54ff56e c50dd52c     ........n.O.,...
   18e40:	24c334e2 048114a0 64477466 44055424     .4.$....ftGd$T.D
   18e50:	b7faa7db 97b88799 f77ee75f d73cc71d     ........_.~...<.
   18e60:	36f226d3 16b00691 76766657 56344615     .&.6....Wfvv.F4V
   18e70:	c96dd94c e92ff90e 89e999c8 a9abb98a     L.m.../.........
   18e80:	48655844 68277806 08e118c0 28a33882     DXeH.x'h.....8.(
   18e90:	db5ccb7d fb1eeb3f 9bd88bf9 bb9aabbb     }.\.?...........
   18ea0:	5a544a75 7a166a37 1ad00af1 3a922ab3     uJTZ7j.z.....*.:
   18eb0:	ed0ffd2e cd4ddd6c ad8bbdaa 8dc99de8     ....l.M.........
   18ec0:	6c077c26 4c455c64 2c833ca2 0cc11ce0     &|.ld\EL.<.,....
   18ed0:	ff3eef1f df7ccf5d bfbaaf9b 9ff88fd9     ..>.].|.........
   18ee0:	7e366e17 5e744e55 3eb22e93 1ef00ed1     .n6~UNt^...>....

00018ef0 <Sd::Mount(SdInterface::CardInfo_t*)::file>:
   18ef0:	682e6473 ff007070                       sd.hpp..

00018ef8 <Sd::Mount(SdInterface::CardInfo_t*)::file>:
   18ef8:	682e6473 ff007070                       sd.hpp..

00018f00 <Sd::Mount(SdInterface::CardInfo_t*)::file>:
   18f00:	682e6473 ff007070                       sd.hpp..

00018f08 <Sd::Mount(SdInterface::CardInfo_t*)::file>:
   18f08:	682e6473 ff007070                       sd.hpp..

00018f10 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file>:
   18f10:	682e6473 ff007070                       sd.hpp..

00018f18 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file>:
   18f18:	682e6473 ff007070                       sd.hpp..

00018f20 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file>:
   18f20:	682e6473 ff007070                       sd.hpp..

00018f28 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file>:
   18f28:	682e6473 ff007070                       sd.hpp..

00018f30 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file>:
   18f30:	682e6473 ff007070                       sd.hpp..

00018f38 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file>:
   18f38:	682e6473 ff007070                       sd.hpp..

00018f40 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file>:
   18f40:	682e6473 ff007070                       sd.hpp..

00018f48 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file>:
   18f48:	682e6473 ff007070                       sd.hpp..

00018f50 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file>:
   18f50:	682e6473 ff007070                       sd.hpp..

00018f58 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file>:
   18f58:	682e6473 ff007070                       sd.hpp..

00018f60 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file>:
   18f60:	682e6473 ff007070                       sd.hpp..

00018f68 <Sd::DeleteBlock(unsigned long, unsigned long)::file>:
   18f68:	682e6473 ff007070                       sd.hpp..

00018f70 <Sd::DeleteBlock(unsigned long, unsigned long)::file>:
   18f70:	682e6473 ff007070                       sd.hpp..

00018f78 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)::file>:
   18f78:	682e6473 ff007070                       sd.hpp..

00018f80 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)::file>:
   18f80:	682e6473 ff007070                       sd.hpp..

00018f88 <vtable for Sd>:
	...
   18f90:	0001652d 00015985 00015a35 00015e49     -e...Y..5Z..I^..
   18fa0:	00016261 0001640d 000169cd 00016a15     ab...d...i...j..
   18fb0:	00016a85                                .j..

00018fb4 <vtable for SdInterface>:
	...
   18fbc:	00016e61 00016e61 00016e61 00016e61     an..an..an..an..
   18fcc:	00016e61 00016e61 00016e61 00016e61     an..an..an..an..
   18fdc:	00016e61                                an..

00018fe0 <vtable for Ssp>:
	...
   18fe8:	00014f21 00015005 0001507d 000150e9     !O...P..}P...P..
   18ff8:	000151d5 000153e1 00015541 0001572d     .Q...S..AU..-W..
   19008:	fffffffc 00000000 000109c5 00010a55     ............U...
   19018:	00010aad 00010ac5 00010ad9 00010b19     ................
   19028:	00010b49                                I...

0001902c <vtable for SspInterface>:
	...
   19034:	00016e61 00016e61 00016e61 00016e61     an..an..an..an..
   19044:	00016e61 00016e61 00016e61 00016e61     an..an..an..an..

00019054 <vtable for SystemControllerInterface>:
	...
   1905c:	00016e61 00016e61 00016e61 00016e61     an..an..an..an..
   1906c:	00016e61 00016e61 00016e61              an..an..an..

00019078 <vtable for Gpio>:
	...
   19080:	00014469 000144e5 00014561 000145a5     iD...D..aE...E..
   19090:	00014609 0001466d 000146b1 0001471d     .F..mF...F...G..
   190a0:	00014795 00014805 00014a9d 00014ae5     .G...H...J...J..
   190b0:	000148ad 00014909 0001498d 00014a15     .H...I...I...J..

000190c0 <vtable for GpioInterface>:
	...
   190c8:	00016e61 00016e61 00016e61 00016e61     an..an..an..an..
   190d8:	00016e61 00016e61 00016e61 00016e61     an..an..an..an..
   190e8:	00016e61 00016e61 00016e61 00016e61     an..an..an..an..
   190f8:	00016e61 00016e61 00016e61 00016e61     an..an..an..an..

00019108 <vtable for PinInterface>:
	...
   19110:	00016e61 00016e61 00016e61 00016e61     an..an..an..an..
   19120:	00016e61 00016e61 00016e61 00016e61     an..an..an..an..
   19130:	00016e61 00016e61 00016e61 00016e61     an..an..an..an..
   19140:	00016e61                                an..

00019144 <Gpio::ClearInterruptEdge(GpioInterface::Edge)::__PRETTY_FUNCTION__>:
   19144:	74726976 206c6175 64696f76 69704720     virtual void Gpi
   19154:	433a3a6f 7261656c 65746e49 70757272     o::ClearInterrup
   19164:	67644574 70472865 6e496f69 66726574     tEdge(GpioInterf
   19174:	3a656361 6764453a ff002965              ace::Edge)..

00019180 <Gpio::ValidPortCheck()::__PRETTY_FUNCTION__>:
   19180:	6c6f6f62 69704720 563a3a6f 64696c61     bool Gpio::Valid
   19190:	74726f50 63656843 0029286b              PortCheck().

0001919c <Gpio::SetInterruptEdge(GpioInterface::Edge)::__PRETTY_FUNCTION__>:
   1919c:	74726976 206c6175 64696f76 69704720     virtual void Gpi
   191ac:	533a3a6f 6e497465 72726574 45747075     o::SetInterruptE
   191bc:	28656764 6f697047 65746e49 63616672     dge(GpioInterfac
   191cc:	453a3a65 29656764 ffffff00              e::Edge)....

000191d8 <Sd::Mount(SdInterface::CardInfo_t*)::__PRETTY_FUNCTION__>:
   191d8:	74726976 206c6175 6c6f6f62 3a645320     virtual bool Sd:
   191e8:	756f4d3a 5328746e 746e4964 61667265     :Mount(SdInterfa
   191f8:	3a3a6563 64726143 6f666e49 292a745f     ce::CardInfo_t*)
   19208:	ffffff00                                ....

0001920c <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::__PRETTY_FUNCTION__>:
   1920c:	74726976 206c6175 746e6975 20745f38     virtual uint8_t 
   1921c:	3a3a6453 64616552 636f6c42 6975286b     Sd::ReadBlock(ui
   1922c:	3233746e 202c745f 746e6975 2a745f38     nt32_t, uint8_t*
   1923c:	6975202c 3233746e 0029745f              , uint32_t).

00019248 <Sd::DeleteBlock(unsigned long, unsigned long)::__PRETTY_FUNCTION__>:
   19248:	74726976 206c6175 746e6975 20745f38     virtual uint8_t 
   19258:	3a3a6453 656c6544 6c426574 286b636f     Sd::DeleteBlock(
   19268:	746e6975 745f3233 6975202c 3233746e     uint32_t, uint32
   19278:	0029745f                                _t).

0001927c <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)::__PRETTY_FUNCTION__>:
   1927c:	74726976 206c6175 746e6975 745f3233     virtual uint32_t
   1928c:	3a645320 6e65533a 646d4364 49645328      Sd::SendCmd(SdI
   1929c:	7265746e 65636166 6f433a3a 6e616d6d     nterface::Comman
   192ac:	75202c64 33746e69 2c745f32 6e697520     d, uint32_t, uin
   192bc:	745f3874 75202c2a 33746e69 2c745f32     t8_t*, uint32_t,
   192cc:	49645320 7265746e 65636166 654b3a3a      SdInterface::Ke
   192dc:	6c417065 29657669 ffffff00              epAlive)....

000192e8 <__sf_fake_stderr>:
	...

00019308 <__sf_fake_stdin>:
	...

00019328 <__sf_fake_stdout>:
	...
