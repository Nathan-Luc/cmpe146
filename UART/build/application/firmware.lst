
build/application/firmware.elf:     file format elf32-littlearm
build/application/firmware.elf
architecture: arm, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000146e9

Program Header:
0x70000001 off    0x0001abdc vaddr 0x0001abdc paddr 0x0001abdc align 2**2
         filesz 0x00000008 memsz 0x00000008 flags r--
    LOAD off    0x00010000 vaddr 0x00010000 paddr 0x00010000 align 2**16
         filesz 0x0000abe4 memsz 0x0000abe4 flags r-x
    LOAD off    0x00020000 vaddr 0x10000000 paddr 0x0001abe4 align 2**16
         filesz 0x0000093c memsz 0x0000093c flags rw-
    LOAD off    0x00020940 vaddr 0x10000940 paddr 0x10000940 align 2**16
         filesz 0x00000000 memsz 0x00000b38 flags rw-
private flags = 5000400: [Version5 EABI] [hard-float ABI]

Sections:
Idx Name             Size      VMA       LMA       File off  Algn  Flags
  0 .text            0000abdc  00010000  00010000  00010000  2**4  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data            0000093c  10000000  0001abe4  00020000  2**2  CONTENTS, ALLOC, LOAD, DATA
  2 .data_RAM2       00000000  20000000  20000000  0002093c  2**2  CONTENTS
  3 .bss             00000b38  10000940  10000940  00020940  2**3  ALLOC
  4 .ARM.exidx       00000008  0001abdc  0001abdc  0001abdc  2**2  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .uninit_RESERVED 00000000  10000000  10000000  0002093c  2**2  CONTENTS
  6 .noinit_RAM2     00000000  20000000  20000000  0002093c  2**2  CONTENTS
  7 .noinit          00000000  10001478  10001478  0002093c  2**2  CONTENTS
  8 .ARM.attributes  00000030  00000000  00000000  0002093c  2**0  CONTENTS, READONLY
  9 .comment         0000007e  00000000  00000000  0002096c  2**0  CONTENTS, READONLY
 10 .debug_info      0005c2c3  00000000  00000000  000209ea  2**0  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev    00005a23  00000000  00000000  0007ccad  2**0  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges   000013d0  00000000  00000000  000826d0  2**0  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges    00001330  00000000  00000000  00083aa0  2**0  CONTENTS, READONLY, DEBUGGING
 14 .debug_line      00008e14  00000000  00000000  00084dd0  2**0  CONTENTS, READONLY, DEBUGGING
 15 .debug_str       0001a662  00000000  00000000  0008dbe4  2**0  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame     00004db8  00000000  00000000  000a8248  2**2  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
00010000 l    d  .text	00000000 .text
10000000 l    d  .data	00000000 .data
20000000 l    d  .data_RAM2	00000000 .data_RAM2
10000940 l    d  .bss	00000000 .bss
0001abdc l    d  .ARM.exidx	00000000 .ARM.exidx
10000000 l    d  .uninit_RESERVED	00000000 .uninit_RESERVED
20000000 l    d  .noinit_RAM2	00000000 .noinit_RAM2
10001478 l    d  .noinit	00000000 .noinit
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 interrupt.cpp
00014cc4 l     F .text	0000002c NVIC_EnableIRQ
00014cf0 l     F .text	00000054 NVIC_SetPriority
00010000 l     O .text	000000e4 kInterruptVectorTable
000199f8 l     O .text	0000000e InterruptLookupHandler::file
00019a08 l     O .text	0000001e InterruptLookupHandler::__PRETTY_FUNCTION__
0001022c l       .text	00000000 handler2_address_const
00000000 l    df *ABS*	00000000 startup.cpp
0001974c l     O .text	0000003e Timer::Initialize(unsigned long, void (*)(), long)::__PRETTY_FUNCTION__
100007d4 l     O .data	00000008 (anonymous namespace)::system_timer
100007dc l     O .data	00000004 (anonymous namespace)::system_controller
100007e0 l     O .data	0000000c (anonymous namespace)::timer0
00014590 l     F .text	00000040 (anonymous namespace)::Lpc40xxUptime()
00019694 l     O .text	0000000c LowLevelInit()::file
0001978c l     O .text	00000014 LowLevelInit()::__PRETTY_FUNCTION__
000102fc l     O .text	00000004 kCrpWord
00014bd8 l     F .text	000000dc __static_initialization_and_destruction_0(int, int)
00014cb4 l     F .text	0000000e _GLOBAL__sub_I_UptimeRTOS
00000000 l    df *ABS*	00000000 /mnt/c/SJSU_Dev2/SJSU-Dev2/tools/gcc-arm-none-eabi-7-2017-q4-major/bin/../lib/gcc/arm-none-eabi/7.2.1/thumb/v7e-m/fpv4-sp/hard/crti.o
00000000 l    df *ABS*	00000000 /mnt/c/SJSU_Dev2/SJSU-Dev2/tools/gcc-arm-none-eabi-7-2017-q4-major/bin/../lib/gcc/arm-none-eabi/7.2.1/thumb/v7e-m/fpv4-sp/hard/crtn.o
00000000 l    df *ABS*	00000000 crtstuff.c
00010328 l     F .text	00000000 __do_global_dtors_aux
10000940 l       .bss	00000001 completed.9929
0001034c l     F .text	00000000 frame_dummy
10000944 l       .bss	00000018 object.9934
0001030c l     O .text	00000000 __frame_dummy_init_array_entry
00000000 l    df *ABS*	00000000 main.cpp
000135d4 l     F .text	00000044 __static_initialization_and_destruction_0(int, int)
00013618 l     F .text	00000028 _GLOBAL__sub_I_q
00000000 l    df *ABS*	00000000 diskio.cpp
0001aa6c l     O .text	00000031 Sd::Mount(SdInterface::CardInfo_t*)::__PRETTY_FUNCTION__
0001aaa0 l     O .text	0000003c Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::__PRETTY_FUNCTION__
0001aadc l     O .text	00000034 Sd::DeleteBlock(unsigned long, unsigned long)::__PRETTY_FUNCTION__
0001ab10 l     O .text	00000069 Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)::__PRETTY_FUNCTION__
1000140c l     O .bss	00000068 (anonymous namespace)::sd_card
00017a50 l     F .text	00000050 __static_initialization_and_destruction_0(int, int)
00017aa0 l     F .text	00000028 _GLOBAL__sub_I_disk_status
00000000 l    df *ABS*	00000000 LabUART.cpp
10000960 l     O .bss	00000008 (anonymous namespace)::uptime
00010ad4 l     F .text	00000030 (anonymous namespace)::DefaultUptime()
00018a50 l     O .text	0000001c Gpio::ValidPortCheck()::__PRETTY_FUNCTION__
00018a6c l     O .text	00000039 Gpio::SetInterruptEdge(GpioInterface::Edge)::__PRETTY_FUNCTION__
00018a14 l     O .text	0000003b Gpio::ClearInterruptEdge(GpioInterface::Edge)::__PRETTY_FUNCTION__
000188d4 l     O .text	00000049 Lpc40xxSystemController::SetPeripheralClockDivider(unsigned char)::__PRETTY_FUNCTION__
0001897c l     O .text	0000005c Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)::__PRETTY_FUNCTION__
00018920 l     O .text	0000005a Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)::__PRETTY_FUNCTION__
000189d8 l     O .text	0000003a Lpc40xxSystemController::SetCpuClockDivider(unsigned char)::__PRETTY_FUNCTION__
00000000 l    df *ABS*	00000000 pinconn.cpp
00000000 l    df *ABS*	00000000 newlib.cpp
00000000 l    df *ABS*	00000000 tasks.c
10001394 l     O .bss	00000064 pxReadyTasksLists
100013f8 l     O .bss	00000004 uxTopReadyPriority
100013fc l     O .bss	00000004 xYieldPending
10001400 l     O .bss	00000004 uxSchedulerSuspended
10001404 l     O .bss	00000004 ulTaskSwitchedInTime
10001408 l     O .bss	00000004 ulTotalRunTime
00000000 l    df *ABS*	00000000 port.c
00015180 l       .text	00000000 pxCurrentTCBConst2
000151f0 l       .text	00000000 pxCurrentTCBConst
00000000 l    df *ABS*	00000000 printf.cpp
000151f8 l     F .text	00000044 _out_buffer(char, void*, unsigned int, unsigned int)
0001523c l     F .text	00000030 _out_null(char, void*, unsigned int, unsigned int)
0001526c l     F .text	00000044 _out_char(char, void*, unsigned int, unsigned int)
000152b0 l     F .text	00000044 _strlen(char const*)
000152f4 l     F .text	00000044 _is_digit(char)
00015338 l     F .text	00000060 _atoi(char const**)
00015398 l     F .text	0000025c _ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)
000155f4 l     F .text	000000e4 _ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)
000156d8 l     F .text	000000f4 _ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)
00019a28 l     O .text	00000028 _ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)::pow10
000157cc l     F .text	00000438 _ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)
00015c04 l     F .text	000008f4 _vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)
00000000 l    df *ABS*	00000000 pure.cc
00000000 l    df *ABS*	00000000 eh_terminate.cc
00000000 l    df *ABS*	00000000 sf_round.c
00000000 l    df *ABS*	00000000 _arm_truncdfsf2.o
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 abort.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 signal.c
00000000 l    df *ABS*	00000000 signalr.c
00000000 l    df *ABS*	00000000 findfp.c
00000000 l    df *ABS*	00000000 eh_term_handler.cc
00000000 l    df *ABS*	00000000 impure.c
100008dc l     O .data	00000060 impure_data
00000000 l    df *ABS*	00000000 reent.c
000115f4  w    F .text	0000003e Lpc40xxSystemController::GetPeripheralFrequency() const
00014f68 g     F .text	00000038 putchar
00014d44  w    F .text	0000006c Pwm0IrqHandler
000185d0  w    O .text	00000009 Gpio::SetInterruptEdge(GpioInterface::Edge)::file
00010218 g     F .text	0000001c HardFaultHandler
00014ed8 g     F .text	00000024 _getpid
00014f2c g     F .text	0000003c _putchar
00014d44  w    F .text	0000006c EepromIrqHandler
00014d44  w    F .text	0000006c Timer2IrqHandler
100007c0  w    O .data	00000014 uart0
0001506c g     F .text	0000002c GetStackDepth()
0001a97c  w    O .text	00000007 Sd::Mount(SdInterface::CardInfo_t*)::file
000114bc  w    F .text	00000024 Lpc40xxSystemController::Lpc40xxSystemController()
0001965c  w    O .text	00000004 Timer::kTimerIrq
0001a9b4  w    O .text	00000007 Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file
00017fbc g     F .text	00000024 _kill_r
0001010c g       .text	00000000 bss_section_table_end
000164f8 g     F .text	0000004c printf
1000075c  w    O .data	00000004 SystemTimer::sys_tick
00014d44  w    F .text	0000006c I2c1IrqHandler
00014790  w    F .text	0000003c void Timer::TimerHandler<(TimerInterface::TimerPort)2>()
10000770  w    O .data	00000010 Uart::uart
0001a9e4  w    O .text	00000007 Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file
00010000 g       *ABS*	00000000 __vectors_start__
000128cc  w    F .text	00000090 Ssd1306::Write(unsigned long, Ssd1306::Transaction, unsigned int)
00010b04  w    F .text	00000044 Milliseconds()
00011758  w    F .text	00000110 Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)
00012778  w    F .text	00000094 Ssd1306::Ssd1306()
00011a9c  w    F .text	00000034 SspInterface::SspInterface()
00014d44  w    F .text	0000006c BusFaultHandler
1000128c g     O .bss	00000100 stack_trace
10000000  w    O .data	00000004 Pin::pin_map
00013ddc  w    F .text	000000e4 Uart::Initialize(unsigned long)
20000000 g       *ABS*	00000000 __base_RAM2
00012778  w    F .text	00000094 Ssd1306::Ssd1306()
0001abe4 g       .ARM.exidx	00000000 __exidx_end
000113ac  w    F .text	0000007c Gpio::ClearEdgeRising()
00011a40  w    F .text	00000030 Lpc40xxSystemController::SetEmcClockDivider(Lpc40xxSystemController::EmcDivider)
000185c4  w    O .text	00000009 Gpio::ValidPortCheck()::file
000130c0  w    F .text	0000006c OledTerminal::OledTerminal()
10001390 g     O .bss	00000004 pxCurrentTCB
00010368  w    F .text	00000034 PinInterface::PinInterface()
00015028 g     F .text	0000001c __cyg_profile_func_exit
000177f0  w    F .text	00000048 Sd::Crc7Add(unsigned char, unsigned char)
00016708  w    F .text	000000a0 Sd::Sd(Sd::DebugSdCard_t, unsigned char, unsigned char, unsigned char, unsigned char)
000149f8  w    F .text	000000a0 void Timer::ClearInterrupts<(TimerInterface::TimerPort)1>()
10001474 g     O .bss	00000004 errno
0001abe4 g       .ARM.exidx	00000000 _etext
10000048  w    O .data	00000004 Lpc40xxSystemController::system_controller
000114e0  w    F .text	00000090 Lpc40xxSystemController::SetClockFrequency(unsigned char)
00013bac  w    F .text	00000030 unsigned char util::Value<TimerInterface::MatchControlRegister, unsigned char>(TimerInterface::MatchControlRegister)
000115e0  w    F .text	00000014 Lpc40xxSystemController::GetSystemFrequency() const
000143a0  w    F .text	000001f0 Uart::GenerateUartCalibration(float)
10000008  w    O .data	00000018 Gpio::gpio_port
00013bdc  w    F .text	000000f8 Timer::SetTimer(unsigned long, TimerInterface::TimerIsrCondition, TimerInterface::MatchControlRegister)
00014610  w    F .text	000000bc LowLevelInit()
00014d44  w    F .text	0000006c LcdIrqHandler
0001aa0c  w    O .text	00000007 Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)::file
00080000 g       *ABS*	00000000 __top_MFlash512
00011d9c  w    F .text	0000006c Ssp::Transfer(unsigned short)
00014040  w    F .text	000000f8 Uart::Receive(unsigned long)
000116f8  w    F .text	00000030 Lpc40xxSystemController::SelectUsbClockSource(Lpc40xxSystemController::UsbSource)
000166a4  w    F .text	00000030 Delay(unsigned long long)
00019684  w    O .text	00000010 Uart::kPowerbit
00014d44  w    F .text	0000006c I2c2IrqHandler
10001234  w    O .bss	00000004 SystemTimer::system_timer_isr
00011274  w    F .text	00000040 Gpio::DetachInterrupt()
00013640 g     F .text	00000064 pinconn::clear7(unsigned char, unsigned char)
00013764 g     F .text	000000c0 pinconn::uart2_rxd(unsigned char, unsigned char)
00014d44  w    F .text	0000006c CanIrqHandler
00013404 g     F .text	000000f0 InitializeUart2()
000108a4  w    F .text	00000074 Pin::EnableDac(bool)
000105d4  w    F .text	0000007c Pin::SetAsAnalogMode(bool)
000119d8  w    F .text	00000068 Lpc40xxSystemController::SetCpuClockDivider(unsigned char)
000178a8  w    F .text	000000fc Sd::GetCrc16(unsigned char*, unsigned short)
00017bf4 g     F .text	00000000 .hidden __aeabi_uldivmod
10001478 g       .noinit	00000000 _noinit
00014fa0 g     F .text	00000060 puts
100007ec g     O .data	000000e4 dynamic_isr_vector_table
00010f94  w    F .text	0000002c Gpio::GetPin()
0001103c  w    F .text	0000005c Gpio::SetInterruptRoutine(void (*)())
00010b48  w    F .text	00000034 GpioInterface::GpioInterface()
00011a9c  w    F .text	00000034 SspInterface::SspInterface()
00014d44  w    F .text	0000006c RitIrqHandler
00014d44  w    F .text	0000006c Uart2IrqHandler
00010918  w    F .text	00000064 Pin::BitPlace(unsigned long, unsigned long, unsigned long, unsigned long)
00018648  w    O .text	00000016 Lpc40xxSystemController::SetCpuClockDivider(unsigned char)::file
0001a99c  w    O .text	00000007 Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file
00012100  w    F .text	00000160 Ssp::GetPeripheralMode()
00014a98  w    F .text	000000a0 void Timer::ClearInterrupts<(TimerInterface::TimerPort)2>()
00017af4 g     F .text	00000060 roundf
00017f5c g     F .text	00000050 _raise_r
000165b4  w    F .text	0000002c Wait(unsigned long long)::{lambda()#1}::_FUN()
00011a70  w    F .text	0000002c int util::Value<Ssp::Peripheral, int>(Ssp::Peripheral)
00011ad0  w    F .text	00000038 PinInterface::PinInterface(PinInterface const&)
10010000 g       *ABS*	00000000 __top_RAM
00019680  w    O .text	00000004 Uart::kRxUartPortFunction
000165e0  w    F .text	000000c4 Wait(unsigned long long)
00015190 g     F .text	00000066 xPortPendSVHandler
00016544 g     F .text	00000044 vsnprintf
000166d4  w    F .text	00000034 SdInterface::SdInterface()
00013cd4  w    F .text	0000003c Timer::GetTimer()
10000000 g       *ABS*	00000000 __base_RamLoc64
00015044 g     F .text	00000028 GetStackTrace()
100008d0 g     O .data	00000004 out
1000004c  w    O .data	00000004 Lpc40xxSystemController::speed_in_hertz
0001a9ec  w    O .text	00000007 Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file
0001a9d4  w    O .text	00000007 Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file
00017fe0 g     F .text	00000004 _getpid_r
00000000 g       *ABS*	00000000 __base_MFlash512
00018710  w    O .text	0000004c vtable for Ssp
10010000 g       *ABS*	00000000 StackTop
00016bb8  w    F .text	00000064 Sd::WaitToReadBlock()
00018660  w    O .text	00000003 Ssp::kPinSelect
00013334  w    F .text	00000038 Graphics::Clear()
00012864  w    F .text	00000068 Ssd1306::AvailableColors()
00017c24 g     F .text	000002cc .hidden __udivmoddi4
00014d44  w    F .text	0000006c I2sIrqHandler
000100fc g       .text	00000000 bss_section_table
00013070  w    F .text	00000050 OledTerminal::ClearRow(unsigned int)
00010300 g       .text	00000000 __CRP_WORD_END__
20008000 g       *ABS*	00000000 __top_RAM2
000146e8 g     F .text	00000030 ResetIsr
000186b8  w    O .text	0000002c vtable for Ssd1306
00016b74  w    F .text	00000044 Sd::ToBool(bool)
0001875c  w    O .text	00000028 vtable for SspInterface
00014d44  w    F .text	0000006c PendSVHandler
1000005c  w    O .data	00000400 font8x8_basic
00011e64  w    F .text	00000030 unsigned char util::Value<SspInterface::DataSize, unsigned char>(SspInterface::DataSize)
000138c4  w    F .text	00000034 SystemTimer::SetIsrFunction(void (*)())
00013168  w    F .text	00000044 bool bit::Read<unsigned long>(unsigned long, unsigned long)
00011d24  w    F .text	00000078 Ssp::IsTransferRegBusy()
00014d44  w    F .text	0000006c UsageFaultHandler
20000000 g       *ABS*	00000000 __user_heap_base
00012c64  w    F .text	0000008c Graphics::Graphics(PixelDisplayInterface*)
0001abdc g       .text	00000000 __exidx_start
000107bc  w    F .text	00000074 Pin::EnableI2cHighCurrentDrive(bool)
00014d44  w    F .text	0000006c Uart4IrqHandler
00011098  w    F .text	00000054 Gpio::ClearInterruptRoutine()
00010740  w    F .text	0000007c Pin::EnableI2cHighSpeedMode(bool)
000101fc g     F .text	00000018 InitFpu()
00010650  w    F .text	0000007c Pin::EnableDigitalFilter(bool)
0001280c  w    F .text	0000002c Ssd1306::GetWidth()
00017f04 g     F .text	00000048 __libc_init_array
00014d44 g     F .text	0000006c InterruptLookupHandler
00011728  w    F .text	00000030 Lpc40xxSystemController::SelectSpifiClockSource(Lpc40xxSystemController::SpifiSource)
000115c8  w    F .text	00000018 Lpc40xxSystemController::GetPeripheralClockDivider() const
10000004  w    O .data	00000004 Uptime
00018814  w    O .text	00000048 vtable for GpioInterface
00013f0c  w    F .text	000000e8 Uart::Send(unsigned char)
00017ef4 g     F .text	0000000e abort
00014d44  w    F .text	0000006c BodIrqHandler
000134f4 g     F .text	00000098 Uart2Send(char)
0001244c  w    F .text	00000184 Ssp::GetClock()
00010300 g     F .text	00000000 _init
0001010c g       .text	00000000 section_table_end
00014b38  w    F .text	000000a0 void Timer::ClearInterrupts<(TimerInterface::TimerPort)3>()
00017ae8 g     F .text	0000000a std::terminate()
00017b54 g     F .text	0000009e .hidden __aeabi_d2f
00011428  w    F .text	0000007c Gpio::ClearEdgeFalling()
00014d44  w    F .text	0000006c SysTickHandler
000100e4 g       .text	00000000 section_table_start
10001478 g       .bss	00000000 _ebss
00012bf0  w    F .text	00000074 Ssd1306::Update()
00011330  w    F .text	0000007c Gpio::SetEdgeFalling()
0001a9ac  w    O .text	00000007 Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file
00014d44  w    F .text	0000006c RtcIrqHandler
00010f24  w    F .text	00000070 Gpio::Read()
00012c64  w    F .text	0000008c Graphics::Graphics(PixelDisplayInterface*)
00014808  w    F .text	000000a8 Status Wait<Uart::Send(unsigned char)::{lambda()#1}>(unsigned long long, Uart::Send(unsigned char)::{lambda()#1})
eff781ea g       *ABS*	00000000 ValidUserCodeChecksum
00014d44  w    F .text	0000006c Uart0IrqHandler
00014e0c g     F .text	00000078 GetRegistersFromStack
0001312c  w    F .text	0000003c unsigned long bit::Set<unsigned long>(unsigned long, unsigned long)
0001336c  w    F .text	0000004c OledTerminal::Initialize()
00012e44  w    F .text	00000038 Graphics::Update()
00018898  w    O .text	0000003c vtable for PinInterface
00014d44  w    F .text	0000006c UsbIrqHandler
00014d44  w    F .text	0000006c AdcIrqHandler
00013ff4  w    F .text	0000004c Uart::Receive(unsigned long)::{lambda()#1}::operator()() const
00013824  w    F .text	00000030 SetUptimeFunction(unsigned long long (*)())
0001ab7c g     O .text	00000020 __sf_fake_stderr
000125d0  w    F .text	00000094 PixelDisplayInterface::Color_t::Color_t(bool, bool, bool, unsigned char, unsigned char, bool)
0001a67c  w    O .text	00000100 Sd::kCrcTable8
00017ad8 g     F .text	00000010 std::get_terminate()
000142a8  w    F .text	00000074 Uart::FractionalEstimate(float, float)
0001111c  w    F .text	00000088 Gpio::SetInterruptEdge(GpioInterface::Edge)
00014d44  w    F .text	0000006c EnetIrqHandler
00014d44  w    F .text	0000006c DmaIrqHandler
0001010c g     F .text	00000090 InitDataSection()
00014db0 g     F .text	0000005c RegisterIsr(IRQn, void (*)(), bool, long)
00000000 g       *ABS*	00000000 __base_Flash
00014d44  w    F .text	0000006c Eint1IrqHandler
10000050  w    O .data	0000000c Ssp::ssp_registers
00014d44  w    F .text	0000006c SvcHandler
00012e7c  w    F .text	00000158 OledTerminal::printf(char const*, ...)
00014d44  w    F .text	0000006c GpioIrqHandler
0001a9fc  w    O .text	00000007 Sd::DeleteBlock(unsigned long, unsigned long)::file
00014d44  w    F .text	0000006c SdioIrqHandler
10010000 g       *ABS*	00000000 __top_RamLoc64
10000940 g       .bss	00000000 _bss
0001a994  w    O .text	00000007 Sd::Mount(SdInterface::CardInfo_t*)::file
00014d44  w    F .text	0000006c Pll1IrqHandler
00014d44  w    F .text	0000006c MemManageHandler
000126f4  w    F .text	00000028 PixelDisplayInterface::Disable()
00017ac8 g     F .text	00000006 __cxa_pure_virtual
00012dec  w    F .text	00000058 Graphics::DrawPixel(unsigned long, unsigned long)
00014d44  w    F .text	0000006c Pwm1IrqHandler
000110ec  w    F .text	00000030 unsigned char util::Value<GpioInterface::Edge, unsigned char>(GpioInterface::Edge)
00014d44  w    F .text	0000006c Timer0IrqHandler
000148b0  w    F .text	000000a8 Status Wait<Uart::Receive(unsigned long)::{lambda()#1}>(unsigned long long, Uart::Receive(unsigned long)::{lambda()#1})
00012838  w    F .text	0000002c Ssd1306::GetHeight()
00080000 g       *ABS*	00000000 __top_Flash
0001431c  w    F .text	00000084 Uart::IsDecmial(float)
00012260  w    F .text	000001ec Ssp::SetClock(bool, bool, unsigned char, unsigned char)
00012fd4  w    F .text	0000009c OledTerminal::Update()
10001478 g       .noinit	00000000 _end_noinit
00013854  w    F .text	0000003c SystemTimer::DisableTimer()
00017230  w    F .text	00000120 Sd::DeleteBlock(unsigned long, unsigned long)
00015098 g     F .text	000000c8 vTaskSwitchContext
00013220  w    F .text	00000054 unsigned long bit::Extract<unsigned long>(unsigned long, unsigned long, unsigned long)
0001039c  w    F .text	00000058 Pin::Pin(unsigned char, unsigned char)
00011ec4  w    F .text	00000030 unsigned char util::Value<SspInterface::MasterSlaveMode, unsigned char>(SspInterface::MasterSlaveMode)
0001a9bc  w    O .text	00000007 Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file
0001967c  w    O .text	00000004 Uart::kTxUartPortFunction
00012cf0  w    F .text	000000fc Graphics::DrawCharacter(long, long, char, bool)
00014d44  w    F .text	0000006c Uart3IrqHandler
000114a4  w    F .text	00000018 SystemControllerInterface::SystemControllerInterface()
0001a9f4  w    O .text	00000007 Sd::DeleteBlock(unsigned long, unsigned long)::file
20000000 g       *ABS*	00000000 __base_RamPeriph32
00012b5c  w    F .text	00000094 Ssd1306::DrawPixel(long, long, PixelDisplayInterface::Color_t)
000185dc  w    O .text	00000009 Gpio::ClearInterruptEdge(GpioInterface::Edge)::file
1000138c g     O .bss	00000004 stack_depth
00010e40  w    F .text	0000006c Gpio::Toggle()
0001a9cc  w    O .text	00000007 Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file
0001a77c  w    O .text	00000200 Sd::kCrcTable16
10000968  w    O .bss	00000100 Gpio::interrupthandlers
00017ef0  w    F .text	00000002 .hidden __aeabi_ldiv0
00014d44  w    F .text	0000006c Timer1IrqHandler
00012664  w    F .text	00000068 PixelDisplayInterface::Color_t::Color_t()
00014234  w    F .text	00000074 Uart::DividerEstimate(float, float)
00010d34  w    F .text	00000064 Gpio::SetHigh()
00014138  w    F .text	000000fc Uart::FindClosestFractional(float)
00011b5c  w    F .text	000000e4 Ssp::Ssp(Ssp::Peripheral)
000100e4 g       .text	00000000 data_section_table
00018600  w    O .text	00000016 Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)::file
0001046c  w    F .text	00000080 Pin::SetMode(PinInterface::Mode)
00016c1c  w    F .text	00000050 Sd::WaitWhileBusy()
00013994  w    F .text	00000094 SystemTimer::SetTickFrequency(unsigned long)
0001ab9c g     O .text	00000020 __sf_fake_stdin
00013274  w    F .text	00000074 unsigned long bit::Insert<unsigned long, bool>(unsigned long, bool, unsigned long, unsigned long)
000102fc g       .text	00000000 __CRP_WORD_START__
00019660  w    O .text	00000010 Timer::kTimerIsr
0001295c  w    F .text	000000f0 Ssd1306::InitializationPanel()
0001122c  w    F .text	00000048 Gpio::AttachInterrupt(void (*)(), GpioInterface::Edge)
00014d44  w    F .text	0000006c Uart1IrqHandler
00010bf8  w    F .text	0000007c Gpio::SetAsInput()
00015000 g     F .text	00000028 __cyg_profile_func_enter
00017f4c g     F .text	00000010 memset
000133b8 g     F .text	0000004c main
00016708  w    F .text	000000a0 Sd::Sd(Sd::DebugSdCard_t, unsigned char, unsigned char, unsigned char, unsigned char)
10000020  w    O .data	00000028 Gpio::interrupt
00013a58  w    F .text	00000020 Timer::DoNothingIsr()
00014d44  w    F .text	0000006c QeiIrqHandler
20000000 g       *ABS*	00000000 heap
00014d44  w    F .text	0000006c Ssp2IrqHandler
0001097c  w    F .text	0000002c Pin::GetPort() const
00017084  w    F .text	000001ac Sd::WriteBlock(unsigned long, unsigned char const*, unsigned long)
0001039c  w    F .text	00000058 Pin::Pin(unsigned char, unsigned char)
00017b54 g     F .text	0000009e .hidden __truncdfsf2
0001031c g       .text	00000000 __init_array_end
00015160 g     F .text	00000026 vPortSVCHandler
00014e84 g     F .text	0000003c FirmwareStdOut(int)
0001aa14  w    O .text	0000002c vtable for Sd
000111a4  w    F .text	00000088 Gpio::ClearInterruptEdge(GpioInterface::Edge)
00014d44  w    F .text	0000006c Ssp1IrqHandler
00014718  w    F .text	0000003c void Timer::TimerHandler<(TimerInterface::TimerPort)0>()
000186ac  w    O .text	0000000c Ssp::kPowerBit
000109a8  w    F .text	0000002c Pin::GetPin() const
00013d10  w    F .text	000000cc Uart::SetBaudRate(unsigned long)
000196a0  w    O .text	0000003c vtable for Uart
00010cf0  w    F .text	00000044 Gpio::SetDirection(GpioInterface::Direction)
00010c74  w    F .text	0000007c Gpio::SetAsOutput()
0001a9dc  w    O .text	00000007 Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file
00011868  w    F .text	00000170 Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)
000130c0  w    F .text	0000006c OledTerminal::OledTerminal()
00010d98  w    F .text	00000064 Gpio::SetLow()
00018784  w    O .text	00000024 vtable for Lpc40xxSystemController
00016c6c  w    F .text	00000418 Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)
0001aa04  w    O .text	00000007 Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)::file
000185e8  w    O .text	00000016 Lpc40xxSystemController::SetPeripheralClockDivider(unsigned char)::file
000146cc g     F .text	0000001a SystemInit
00013a78  w    F .text	00000134 Timer::Initialize(unsigned long, void (*)(), long)
10000a6c g     O .bss	000007c8 oled_terminal
00011634  w    F .text	00000030 Lpc40xxSystemController::PowerUpPeripheral(SystemControllerInterface::PeripheralID const&)
20008000 g       *ABS*	00000000 heap_end
00011c40  w    F .text	000000e4 Ssp::Initialize()
000196dc  w    O .text	00000038 vtable for Timer
00011ad0  w    F .text	00000038 PinInterface::PinInterface(PinInterface const&)
10000760  w    O .data	00000010 Timer::tim_register
00014d44  w    F .text	0000006c Ssp0IrqHandler
0001031c g     F .text	00000000 _fini
00014d44  w    F .text	0000006c UsbactivityIrqHandler
00010dfc  w    F .text	00000044 Gpio::Set(GpioInterface::State)
00014d44  w    F .text	0000006c Pll0IrqHandler
00011b08  w    F .text	00000054 Pin::Pin(Pin const&)
000100fc g       .text	00000000 data_section_table_end
00014d44  w    F .text	0000006c CanactivityIrqHandler
00014d44  w    F .text	0000006c NmiHandler
00012664  w    F .text	00000068 PixelDisplayInterface::Color_t::Color_t()
0001271c  w    F .text	00000028 PixelDisplayInterface::Update()
00018664  w    O .text	00000048 Ssp::kSspPinMatrix
00012ad0  w    F .text	00000054 Ssd1306::SetHorizontalAddressMode()
00010eac  w    F .text	00000078 Gpio::ReadState()
0001a9a4  w    O .text	00000007 Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file
100008d8 g     O .data	00000004 _impure_ptr
000179a4  w    F .text	000000ac Status Wait<Wait(unsigned long long)::{lambda()#1}>(unsigned long long, Wait(unsigned long long)::{lambda()#1})
10000000 g       .uninit_RESERVED	00000000 _end_uninit_RESERVED
00017838  w    F .text	00000070 Sd::GetCrc7(unsigned char*, unsigned char)
00012a4c  w    F .text	00000084 Ssd1306::Initialize()
00014d44  w    F .text	0000006c McpwmIrqHandler
0001030c g       .text	00000000 __preinit_array_end
00014d44  w    F .text	0000006c WdtIrqHandler
00016588  w    F .text	0000002c Wait(unsigned long long)::{lambda()#1}::operator()() const
00017350  w    F .text	000004a0 Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)
000114bc  w    F .text	00000024 Lpc40xxSystemController::Lpc40xxSystemController()
0001885c  w    O .text	0000003c vtable for Pin
00012b24  w    F .text	00000038 Ssd1306::Clear()
10000000 g       .data	00000000 _data
00010560  w    F .text	00000074 Pin::SetAsActiveLow(bool)
000116c8  w    F .text	00000030 Lpc40xxSystemController::SelectMainClockSource(Lpc40xxSystemController::MainClockSource)
000112b4  w    F .text	0000007c Gpio::SetEdgeRising()
0001a984  w    O .text	00000007 Sd::Mount(SdInterface::CardInfo_t*)::file
00013a28  w    F .text	00000030 unsigned char util::Value<TimerInterface::TimerPort, unsigned char>(TimerInterface::TimerPort)
1000045c g     O .data	00000300 pincon
10001278  w    O .bss	00000010 Timer::user_timer_isr
000126cc  w    F .text	00000028 PixelDisplayInterface::Enable()
00018618  w    O .text	00000016 Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)::file
10001238  w    O .bss	00000040 Timer::match
00013ec0  w    F .text	0000004c Uart::Send(unsigned char)::{lambda()#1}::operator()() const
000186e4  w    O .text	0000002c vtable for PixelDisplayInterface
00016858  w    F .text	0000031c Sd::Mount(SdInterface::CardInfo_t*)
100008d4 g     O .data	00000004 __cxxabiv1::__terminate_handler
10000a68 g     O .bss	00000001 pc
000187a8  w    O .text	00000024 vtable for SystemControllerInterface
000187cc  w    O .text	00000048 vtable for Gpio
1000093c g       .data	00000000 _edata
0001964c  w    O .text	00000010 Timer::kPowerbit
00014754  w    F .text	0000003c void Timer::TimerHandler<(TimerInterface::TimerPort)1>()
000104ec  w    F .text	00000074 Pin::EnableHysteresis(bool)
00010b48  w    F .text	00000034 GpioInterface::GpioInterface()
000125d0  w    F .text	00000094 PixelDisplayInterface::Color_t::Color_t(bool, bool, bool, unsigned char, unsigned char, bool)
00014d44  w    F .text	0000006c DebugMonHandler
00010fc0  w    F .text	0000007c Gpio::ValidPortCheck()
00014d44  w    F .text	0000006c Eint2IrqHandler
20008000 g       *ABS*	00000000 __top_RamPeriph32
00011b5c  w    F .text	000000e4 Ssp::Ssp(Ssp::Peripheral)
00014d44  w    F .text	0000006c Timer3IrqHandler
00012744  w    F .text	00000034 PixelDisplayInterface::PixelDisplayInterface()
10000000 g       *ABS*	00000000 __base_RAM
00014d44  w    F .text	0000006c Eint3IrqHandler
00017ace g     F .text	00000008 __cxxabiv1::__terminate(void (*)())
00014efc g     F .text	00000030 _kill
00014d44  w    F .text	0000006c I2c0IrqHandler
00011b08  w    F .text	00000054 Pin::Pin(Pin const&)
00019670  w    O .text	0000000a Timer::Initialize(unsigned long, void (*)(), long)::file
00013890  w    F .text	00000034 SystemTimer::SystemTimerHandler()
0001a98c  w    O .text	00000007 Sd::Mount(SdInterface::CardInfo_t*)::file
0001abbc g     O .text	00000020 __sf_fake_stdout
000109d4  w    F .text	00000100 debug::PrintBacktrace(bool, void*)
0001030c g       .text	00000000 __init_array_start
00017ef0  w    F .text	00000002 .hidden __aeabi_idiv0
0001aa40  w    O .text	0000002c vtable for SdInterface
000167a8  w    F .text	000000b0 Sd::Initialize()
00014ec0 g     F .text	00000018 _exit
000106cc  w    F .text	00000074 Pin::EnableFastMode(bool)
00014958  w    F .text	000000a0 void Timer::ClearInterrupts<(TimerInterface::TimerPort)0>()
00014d44  w    F .text	0000006c Eint0IrqHandler
000138f8  w    F .text	0000009c SystemTimer::StartTimer()
00011e94  w    F .text	00000030 unsigned char util::Value<SspInterface::FrameMode, unsigned char>(SspInterface::FrameMode)
0001019c g     F .text	00000060 InitBssSection()
00010b7c  w    F .text	0000007c Gpio::Gpio(unsigned char, unsigned char)
000145d0 g     F .text	00000040 UptimeRTOS
00012744  w    F .text	00000034 PixelDisplayInterface::PixelDisplayInterface()
0001358c g     F .text	00000048 Uart2Receive()
000132e8  w    F .text	0000004c Graphics::Initialize()
00010830  w    F .text	00000074 Pin::SetAsOpenDrain(bool)
00019714  w    O .text	00000038 vtable for SystemTimer
00014d44  w    F .text	0000006c SpiIrqHandler
0001a9c4  w    O .text	00000007 Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file
00011e08  w    F .text	0000005c Ssp::SetSpiMasterDefault()
10000780  w    O .data	00000040 Uart::pairs
000114a4  w    F .text	00000018 SystemControllerInterface::SystemControllerInterface()
00011664  w    F .text	00000030 Lpc40xxSystemController::PowerDownPeripheral(SystemControllerInterface::PeripheralID const&)
000166d4  w    F .text	00000034 SdInterface::SdInterface()
0001030c g       .text	00000000 __preinit_array_start
00018630  w    O .text	00000016 Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)::file
00011694  w    F .text	00000034 Lpc40xxSystemController::SelectOscillatorSource(Lpc40xxSystemController::OscillatorSource)
10001288  w    O .bss	00000004 guard variable for Timer::match
00011ef4  w    F .text	0000020c Ssp::SetPeripheralMode(SspInterface::MasterSlaveMode, SspInterface::FrameMode, SspInterface::DataSize)
000103f4  w    F .text	00000078 Pin::SetPinFunction(unsigned char)
000131ac  w    F .text	00000074 unsigned long bit::Insert<unsigned long, unsigned char>(unsigned long, unsigned char, unsigned long, unsigned long)
00010368  w    F .text	00000034 PinInterface::PinInterface()
00011570  w    F .text	00000058 Lpc40xxSystemController::SetPeripheralClockDivider(unsigned char)
00010b7c  w    F .text	0000007c Gpio::Gpio(unsigned char, unsigned char)
000147cc  w    F .text	0000003c void Timer::TimerHandler<(TimerInterface::TimerPort)3>()
00017fac g     F .text	00000010 raise
000136a4 g     F .text	000000c0 pinconn::uart2_txd(unsigned char, unsigned char)



Disassembly of section .text:

00010000 <kInterruptVectorTable>:
   10000:	00 00 01 10 e9 46 01 00 45 4d 01 00 19 02 01 00     .....F..EM......
   10010:	45 4d 01 00 45 4d 01 00 45 4d 01 00 ea 81 f7 ef     EM..EM..EM......
	...
   1002c:	61 51 01 00 45 4d 01 00 00 00 00 00 91 51 01 00     aQ..EM.......Q..
   1003c:	45 4d 01 00 45 4d 01 00 45 4d 01 00 45 4d 01 00     EM..EM..EM..EM..
   1004c:	45 4d 01 00 45 4d 01 00 45 4d 01 00 45 4d 01 00     EM..EM..EM..EM..
   1005c:	45 4d 01 00 45 4d 01 00 45 4d 01 00 45 4d 01 00     EM..EM..EM..EM..
   1006c:	45 4d 01 00 45 4d 01 00 00 00 00 00 45 4d 01 00     EM..EM......EM..
   1007c:	45 4d 01 00 45 4d 01 00 45 4d 01 00 45 4d 01 00     EM..EM..EM..EM..
   1008c:	45 4d 01 00 45 4d 01 00 45 4d 01 00 45 4d 01 00     EM..EM..EM..EM..
   1009c:	45 4d 01 00 45 4d 01 00 45 4d 01 00 45 4d 01 00     EM..EM..EM..EM..
   100ac:	45 4d 01 00 45 4d 01 00 45 4d 01 00 45 4d 01 00     EM..EM..EM..EM..
   100bc:	45 4d 01 00 45 4d 01 00 45 4d 01 00 45 4d 01 00     EM..EM..EM..EM..
   100cc:	45 4d 01 00 45 4d 01 00 45 4d 01 00 45 4d 01 00     EM..EM..EM..EM..
   100dc:	45 4d 01 00 45 4d 01 00                             EM..EM..

000100e4 <data_section_table>:
   100e4:	0001abe4 	.word	0x0001abe4
   100e8:	10000000 	.word	0x10000000
   100ec:	0000093c 	.word	0x0000093c
   100f0:	0001abe4 	.word	0x0001abe4
   100f4:	20000000 	.word	0x20000000
   100f8:	00000000 	.word	0x00000000

000100fc <bss_section_table>:
   100fc:	10000940 	.word	0x10000940
   10100:	00000b38 	.word	0x00000b38
   10104:	20000000 	.word	0x20000000
   10108:	00000000 	.word	0x00000000

0001010c <InitDataSection()>:
SJ2_IGNORE_STACK_TRACE(void SystemInit());

// Functions to carry out the initialization of RW and BSS data sections.
SJ2_SECTION(".after_vectors")
void InitDataSection()
{
   1010c:	b086      	sub	sp, #24
  for (int i = 0; &data_section_table[i] < &data_section_table_end; i++)
   1010e:	2300      	movs	r3, #0
   10110:	9305      	str	r3, [sp, #20]
   10112:	9a05      	ldr	r2, [sp, #20]
   10114:	4613      	mov	r3, r2
   10116:	005b      	lsls	r3, r3, #1
   10118:	4413      	add	r3, r2
   1011a:	009b      	lsls	r3, r3, #2
   1011c:	4a1d      	ldr	r2, [pc, #116]	; (10194 <InitDataSection()+0x88>)
   1011e:	4413      	add	r3, r2
   10120:	4a1d      	ldr	r2, [pc, #116]	; (10198 <InitDataSection()+0x8c>)
   10122:	4293      	cmp	r3, r2
   10124:	d233      	bcs.n	1018e <InitDataSection()+0x82>
  {
    uint32_t * rom_location = data_section_table[i].rom_location;
   10126:	491b      	ldr	r1, [pc, #108]	; (10194 <InitDataSection()+0x88>)
   10128:	9a05      	ldr	r2, [sp, #20]
   1012a:	4613      	mov	r3, r2
   1012c:	005b      	lsls	r3, r3, #1
   1012e:	4413      	add	r3, r2
   10130:	009b      	lsls	r3, r3, #2
   10132:	440b      	add	r3, r1
   10134:	681b      	ldr	r3, [r3, #0]
   10136:	9303      	str	r3, [sp, #12]
    uint32_t * ram_location = data_section_table[i].ram_location;
   10138:	4916      	ldr	r1, [pc, #88]	; (10194 <InitDataSection()+0x88>)
   1013a:	9a05      	ldr	r2, [sp, #20]
   1013c:	4613      	mov	r3, r2
   1013e:	005b      	lsls	r3, r3, #1
   10140:	4413      	add	r3, r2
   10142:	009b      	lsls	r3, r3, #2
   10144:	440b      	add	r3, r1
   10146:	685b      	ldr	r3, [r3, #4]
   10148:	9302      	str	r3, [sp, #8]
    uint32_t length         = data_section_table[i].length;
   1014a:	4912      	ldr	r1, [pc, #72]	; (10194 <InitDataSection()+0x88>)
   1014c:	9a05      	ldr	r2, [sp, #20]
   1014e:	4613      	mov	r3, r2
   10150:	005b      	lsls	r3, r3, #1
   10152:	4413      	add	r3, r2
   10154:	009b      	lsls	r3, r3, #2
   10156:	440b      	add	r3, r1
   10158:	3308      	adds	r3, #8
   1015a:	681b      	ldr	r3, [r3, #0]
   1015c:	9301      	str	r3, [sp, #4]
    for (size_t j = 0; j < length; j++)
   1015e:	2300      	movs	r3, #0
   10160:	9304      	str	r3, [sp, #16]
   10162:	9a04      	ldr	r2, [sp, #16]
   10164:	9b01      	ldr	r3, [sp, #4]
   10166:	429a      	cmp	r2, r3
   10168:	d20d      	bcs.n	10186 <InitDataSection()+0x7a>
    {
      ram_location[j] = rom_location[j];
   1016a:	9b04      	ldr	r3, [sp, #16]
   1016c:	009b      	lsls	r3, r3, #2
   1016e:	9a03      	ldr	r2, [sp, #12]
   10170:	441a      	add	r2, r3
   10172:	9b04      	ldr	r3, [sp, #16]
   10174:	009b      	lsls	r3, r3, #2
   10176:	9902      	ldr	r1, [sp, #8]
   10178:	440b      	add	r3, r1
   1017a:	6812      	ldr	r2, [r2, #0]
   1017c:	601a      	str	r2, [r3, #0]
    for (size_t j = 0; j < length; j++)
   1017e:	9b04      	ldr	r3, [sp, #16]
   10180:	3301      	adds	r3, #1
   10182:	9304      	str	r3, [sp, #16]
   10184:	e7ed      	b.n	10162 <InitDataSection()+0x56>
  for (int i = 0; &data_section_table[i] < &data_section_table_end; i++)
   10186:	9b05      	ldr	r3, [sp, #20]
   10188:	3301      	adds	r3, #1
   1018a:	9305      	str	r3, [sp, #20]
   1018c:	e7c1      	b.n	10112 <InitDataSection()+0x6>
    }
  }
}
   1018e:	bf00      	nop
   10190:	b006      	add	sp, #24
   10192:	4770      	bx	lr
   10194:	000100e4 	.word	0x000100e4
   10198:	000100fc 	.word	0x000100fc

0001019c <InitBssSection()>:

// Functions to initialization BSS data sections. This is important because
// the std c libs assume that BSS is set to zero.
SJ2_SECTION(".after_vectors")
void InitBssSection()
{
   1019c:	b084      	sub	sp, #16
  for (int i = 0; &bss_section_table[i] < &bss_section_table_end; i++)
   1019e:	2300      	movs	r3, #0
   101a0:	9303      	str	r3, [sp, #12]
   101a2:	9b03      	ldr	r3, [sp, #12]
   101a4:	00db      	lsls	r3, r3, #3
   101a6:	4a13      	ldr	r2, [pc, #76]	; (101f4 <InitBssSection()+0x58>)
   101a8:	4413      	add	r3, r2
   101aa:	4a13      	ldr	r2, [pc, #76]	; (101f8 <InitBssSection()+0x5c>)
   101ac:	4293      	cmp	r3, r2
   101ae:	d21e      	bcs.n	101ee <InitBssSection()+0x52>
  {
    uint32_t * ram_location = bss_section_table[i].ram_location;
   101b0:	4a10      	ldr	r2, [pc, #64]	; (101f4 <InitBssSection()+0x58>)
   101b2:	9b03      	ldr	r3, [sp, #12]
   101b4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
   101b8:	9301      	str	r3, [sp, #4]
    uint32_t length         = bss_section_table[i].length;
   101ba:	4a0e      	ldr	r2, [pc, #56]	; (101f4 <InitBssSection()+0x58>)
   101bc:	9b03      	ldr	r3, [sp, #12]
   101be:	00db      	lsls	r3, r3, #3
   101c0:	4413      	add	r3, r2
   101c2:	685b      	ldr	r3, [r3, #4]
   101c4:	9300      	str	r3, [sp, #0]
    for (size_t j = 0; j < length; j++)
   101c6:	2300      	movs	r3, #0
   101c8:	9302      	str	r3, [sp, #8]
   101ca:	9a02      	ldr	r2, [sp, #8]
   101cc:	9b00      	ldr	r3, [sp, #0]
   101ce:	429a      	cmp	r2, r3
   101d0:	d209      	bcs.n	101e6 <InitBssSection()+0x4a>
    {
      ram_location[j] = 0;
   101d2:	9b02      	ldr	r3, [sp, #8]
   101d4:	009b      	lsls	r3, r3, #2
   101d6:	9a01      	ldr	r2, [sp, #4]
   101d8:	4413      	add	r3, r2
   101da:	2200      	movs	r2, #0
   101dc:	601a      	str	r2, [r3, #0]
    for (size_t j = 0; j < length; j++)
   101de:	9b02      	ldr	r3, [sp, #8]
   101e0:	3301      	adds	r3, #1
   101e2:	9302      	str	r3, [sp, #8]
   101e4:	e7f1      	b.n	101ca <InitBssSection()+0x2e>
  for (int i = 0; &bss_section_table[i] < &bss_section_table_end; i++)
   101e6:	9b03      	ldr	r3, [sp, #12]
   101e8:	3301      	adds	r3, #1
   101ea:	9303      	str	r3, [sp, #12]
   101ec:	e7d9      	b.n	101a2 <InitBssSection()+0x6>
    }
  }
}
   101ee:	bf00      	nop
   101f0:	b004      	add	sp, #16
   101f2:	4770      	bx	lr
   101f4:	000100fc 	.word	0x000100fc
   101f8:	0001010c 	.word	0x0001010c

000101fc <InitFpu()>:
      // Write back the modified value to the CPACR
      "STR     R1, [R0]\n"
      // Wait for store to complete
      "DSB\n"
      // reset pipeline now the FPU is enabled
      "ISB\n");
   101fc:	f8df 0014 	ldr.w	r0, [pc, #20]	; 10214 <InitFpu()+0x18>
   10200:	6801      	ldr	r1, [r0, #0]
   10202:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   10206:	6001      	str	r1, [r0, #0]
   10208:	f3bf 8f4f 	dsb	sy
   1020c:	f3bf 8f6f 	isb	sy
}
   10210:	bf00      	nop
   10212:	4770      	bx	lr
   10214:	e000ed88 	.word	0xe000ed88

00010218 <HardFaultHandler>:
      " mrseq r0, msp                                       \n"
      " mrsne r0, psp                                       \n"
      " ldr r1, [r0, #24]                                   \n"
      " ldr r2, handler2_address_const                      \n"
      " bx r2                                               \n"
      " handler2_address_const: .word GetRegistersFromStack \n");
   10218:	f01e 0f04 	tst.w	lr, #4
   1021c:	bf0c      	ite	eq
   1021e:	f3ef 8008 	mrseq	r0, MSP
   10222:	f3ef 8009 	mrsne	r0, PSP
   10226:	6981      	ldr	r1, [r0, #24]
   10228:	4a00      	ldr	r2, [pc, #0]	; (1022c <handler2_address_const>)
   1022a:	4710      	bx	r2

0001022c <handler2_address_const>:
   1022c:	00014e0d 	.word	0x00014e0d
#endif
}
   10230:	bf00      	nop
   10232:	4770      	bx	lr
   10234:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   10238:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   1023c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   10240:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   10244:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   10248:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   1024c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   10250:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   10254:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   10258:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   1025c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   10260:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   10264:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   10268:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   1026c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   10270:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   10274:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   10278:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   1027c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   10280:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   10284:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   10288:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   1028c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   10290:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   10294:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   10298:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   1029c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102a0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102a4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102a8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102ac:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102b0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102b4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102b8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102bc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102c0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102c4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102c8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102cc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102d0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102d4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102d8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102dc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102e0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102e4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102e8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102ec:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102f0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102f4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102f8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

000102fc <__CRP_WORD_START__>:
   102fc:	ffffffff 	.word	0xffffffff

00010300 <_init>:
   10300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10302:	bf00      	nop
   10304:	bcf8      	pop	{r3, r4, r5, r6, r7}
   10306:	bc08      	pop	{r3}
   10308:	469e      	mov	lr, r3
   1030a:	4770      	bx	lr

0001030c <__init_array_start>:
   1030c:	0001034d 	.word	0x0001034d
   10310:	00013619 	.word	0x00013619
   10314:	00014cb5 	.word	0x00014cb5
   10318:	00017aa1 	.word	0x00017aa1

0001031c <_fini>:
   1031c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1031e:	bf00      	nop
   10320:	bcf8      	pop	{r3, r4, r5, r6, r7}
   10322:	bc08      	pop	{r3}
   10324:	469e      	mov	lr, r3
   10326:	4770      	bx	lr

00010328 <__do_global_dtors_aux>:
   10328:	b510      	push	{r4, lr}
   1032a:	4c05      	ldr	r4, [pc, #20]	; (10340 <__do_global_dtors_aux+0x18>)
   1032c:	7823      	ldrb	r3, [r4, #0]
   1032e:	b933      	cbnz	r3, 1033e <__do_global_dtors_aux+0x16>
   10330:	4b04      	ldr	r3, [pc, #16]	; (10344 <__do_global_dtors_aux+0x1c>)
   10332:	b113      	cbz	r3, 1033a <__do_global_dtors_aux+0x12>
   10334:	4804      	ldr	r0, [pc, #16]	; (10348 <__do_global_dtors_aux+0x20>)
   10336:	f3af 8000 	nop.w
   1033a:	2301      	movs	r3, #1
   1033c:	7023      	strb	r3, [r4, #0]
   1033e:	bd10      	pop	{r4, pc}
   10340:	10000940 	.word	0x10000940
   10344:	00000000 	.word	0x00000000
   10348:	0001abe4 	.word	0x0001abe4

0001034c <frame_dummy>:
   1034c:	b508      	push	{r3, lr}
   1034e:	4b03      	ldr	r3, [pc, #12]	; (1035c <frame_dummy+0x10>)
   10350:	b11b      	cbz	r3, 1035a <frame_dummy+0xe>
   10352:	4903      	ldr	r1, [pc, #12]	; (10360 <frame_dummy+0x14>)
   10354:	4803      	ldr	r0, [pc, #12]	; (10364 <frame_dummy+0x18>)
   10356:	f3af 8000 	nop.w
   1035a:	bd08      	pop	{r3, pc}
   1035c:	00000000 	.word	0x00000000
   10360:	10000944 	.word	0x10000944
   10364:	0001abe4 	.word	0x0001abe4

00010368 <PinInterface::PinInterface()>:
#include <cstdio>

#include "L0_LowLevel/LPC40xx.h"
#include "utility/macros.hpp"

class PinInterface
   10368:	b530      	push	{r4, r5, lr}
   1036a:	b083      	sub	sp, #12
   1036c:	4675      	mov	r5, lr
   1036e:	9001      	str	r0, [sp, #4]
   10370:	462b      	mov	r3, r5
   10372:	4619      	mov	r1, r3
   10374:	4807      	ldr	r0, [pc, #28]	; (10394 <PinInterface::PinInterface()+0x2c>)
   10376:	f004 fe43 	bl	15000 <__cyg_profile_func_enter>
   1037a:	4a07      	ldr	r2, [pc, #28]	; (10398 <PinInterface::PinInterface()+0x30>)
   1037c:	9b01      	ldr	r3, [sp, #4]
   1037e:	601a      	str	r2, [r3, #0]
   10380:	9c01      	ldr	r4, [sp, #4]
   10382:	462b      	mov	r3, r5
   10384:	4619      	mov	r1, r3
   10386:	4803      	ldr	r0, [pc, #12]	; (10394 <PinInterface::PinInterface()+0x2c>)
   10388:	f004 fe4e 	bl	15028 <__cyg_profile_func_exit>
   1038c:	4623      	mov	r3, r4
   1038e:	4618      	mov	r0, r3
   10390:	b003      	add	sp, #12
   10392:	bd30      	pop	{r4, r5, pc}
   10394:	00010369 	.word	0x00010369
   10398:	000188a0 	.word	0x000188a0

0001039c <Pin::Pin(unsigned char, unsigned char)>:
  // no effect.
  static constexpr Pin CreateInactivePin()
  {
    return Pin(5, 4);
  }
  constexpr Pin(uint8_t port_number, uint8_t pin_number)
   1039c:	b530      	push	{r4, r5, lr}
   1039e:	b083      	sub	sp, #12
   103a0:	4675      	mov	r5, lr
   103a2:	9001      	str	r0, [sp, #4]
   103a4:	460b      	mov	r3, r1
   103a6:	f88d 3003 	strb.w	r3, [sp, #3]
   103aa:	4613      	mov	r3, r2
   103ac:	f88d 3002 	strb.w	r3, [sp, #2]
   103b0:	462b      	mov	r3, r5
   103b2:	4619      	mov	r1, r3
   103b4:	480d      	ldr	r0, [pc, #52]	; (103ec <Pin::Pin(unsigned char, unsigned char)+0x50>)
   103b6:	f004 fe23 	bl	15000 <__cyg_profile_func_enter>
      : port_(port_number), pin_(pin_number)
   103ba:	9b01      	ldr	r3, [sp, #4]
   103bc:	4618      	mov	r0, r3
   103be:	f7ff ffd3 	bl	10368 <PinInterface::PinInterface()>
   103c2:	4a0b      	ldr	r2, [pc, #44]	; (103f0 <Pin::Pin(unsigned char, unsigned char)+0x54>)
   103c4:	9b01      	ldr	r3, [sp, #4]
   103c6:	601a      	str	r2, [r3, #0]
   103c8:	9b01      	ldr	r3, [sp, #4]
   103ca:	f89d 2003 	ldrb.w	r2, [sp, #3]
   103ce:	711a      	strb	r2, [r3, #4]
   103d0:	9b01      	ldr	r3, [sp, #4]
   103d2:	f89d 2002 	ldrb.w	r2, [sp, #2]
   103d6:	715a      	strb	r2, [r3, #5]
  {
  }
   103d8:	9c01      	ldr	r4, [sp, #4]
   103da:	462b      	mov	r3, r5
   103dc:	4619      	mov	r1, r3
   103de:	4803      	ldr	r0, [pc, #12]	; (103ec <Pin::Pin(unsigned char, unsigned char)+0x50>)
   103e0:	f004 fe22 	bl	15028 <__cyg_profile_func_exit>
   103e4:	4623      	mov	r3, r4
   103e6:	4618      	mov	r0, r3
   103e8:	b003      	add	sp, #12
   103ea:	bd30      	pop	{r4, r5, pc}
   103ec:	0001039d 	.word	0x0001039d
   103f0:	00018864 	.word	0x00018864

000103f4 <Pin::SetPinFunction(unsigned char)>:
  void SetPinFunction(uint8_t function) override
   103f4:	b5f0      	push	{r4, r5, r6, r7, lr}
   103f6:	b085      	sub	sp, #20
   103f8:	4677      	mov	r7, lr
   103fa:	9003      	str	r0, [sp, #12]
   103fc:	460b      	mov	r3, r1
   103fe:	f88d 300b 	strb.w	r3, [sp, #11]
   10402:	463b      	mov	r3, r7
   10404:	4619      	mov	r1, r3
   10406:	4817      	ldr	r0, [pc, #92]	; (10464 <Pin::SetPinFunction(unsigned char)+0x70>)
   10408:	f004 fdfa 	bl	15000 <__cyg_profile_func_enter>
  {
    pin_map->_register[port_][pin_] =
        BitPlace(pin_map->_register[port_][pin_], PinBitMap::kFunction,
   1040c:	4b16      	ldr	r3, [pc, #88]	; (10468 <Pin::SetPinFunction(unsigned char)+0x74>)
   1040e:	681b      	ldr	r3, [r3, #0]
   10410:	9a03      	ldr	r2, [sp, #12]
   10412:	7912      	ldrb	r2, [r2, #4]
   10414:	4610      	mov	r0, r2
   10416:	9a03      	ldr	r2, [sp, #12]
   10418:	7952      	ldrb	r2, [r2, #5]
   1041a:	4611      	mov	r1, r2
   1041c:	0142      	lsls	r2, r0, #5
   1041e:	440a      	add	r2, r1
   10420:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
                 function & 0b111, 3);
   10424:	f89d 300b 	ldrb.w	r3, [sp, #11]
        BitPlace(pin_map->_register[port_][pin_], PinBitMap::kFunction,
   10428:	f003 0207 	and.w	r2, r3, #7
    pin_map->_register[port_][pin_] =
   1042c:	4b0e      	ldr	r3, [pc, #56]	; (10468 <Pin::SetPinFunction(unsigned char)+0x74>)
   1042e:	681c      	ldr	r4, [r3, #0]
   10430:	9b03      	ldr	r3, [sp, #12]
   10432:	791b      	ldrb	r3, [r3, #4]
   10434:	461e      	mov	r6, r3
   10436:	9b03      	ldr	r3, [sp, #12]
   10438:	795b      	ldrb	r3, [r3, #5]
   1043a:	461d      	mov	r5, r3
        BitPlace(pin_map->_register[port_][pin_], PinBitMap::kFunction,
   1043c:	2303      	movs	r3, #3
   1043e:	9300      	str	r3, [sp, #0]
   10440:	4613      	mov	r3, r2
   10442:	2200      	movs	r2, #0
   10444:	9803      	ldr	r0, [sp, #12]
   10446:	f000 fa67 	bl	10918 <Pin::BitPlace(unsigned long, unsigned long, unsigned long, unsigned long)>
   1044a:	4602      	mov	r2, r0
    pin_map->_register[port_][pin_] =
   1044c:	0173      	lsls	r3, r6, #5
   1044e:	442b      	add	r3, r5
   10450:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
   10454:	463b      	mov	r3, r7
   10456:	4619      	mov	r1, r3
   10458:	4802      	ldr	r0, [pc, #8]	; (10464 <Pin::SetPinFunction(unsigned char)+0x70>)
   1045a:	f004 fde5 	bl	15028 <__cyg_profile_func_exit>
  }
   1045e:	bf00      	nop
   10460:	b005      	add	sp, #20
   10462:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10464:	000103f5 	.word	0x000103f5
   10468:	10000000 	.word	0x10000000

0001046c <Pin::SetMode(PinInterface::Mode)>:
  void SetMode(PinInterface::Mode mode) override
   1046c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1046e:	b087      	sub	sp, #28
   10470:	4677      	mov	r7, lr
   10472:	9003      	str	r0, [sp, #12]
   10474:	460b      	mov	r3, r1
   10476:	f88d 300b 	strb.w	r3, [sp, #11]
   1047a:	463b      	mov	r3, r7
   1047c:	4619      	mov	r1, r3
   1047e:	4819      	ldr	r0, [pc, #100]	; (104e4 <Pin::SetMode(PinInterface::Mode)+0x78>)
   10480:	f004 fdbe 	bl	15000 <__cyg_profile_func_enter>
  {
    uint8_t ui_mode                 = static_cast<uint8_t>(mode);
   10484:	f89d 300b 	ldrb.w	r3, [sp, #11]
   10488:	f88d 3017 	strb.w	r3, [sp, #23]
    pin_map->_register[port_][pin_] = BitPlace(
   1048c:	4b16      	ldr	r3, [pc, #88]	; (104e8 <Pin::SetMode(PinInterface::Mode)+0x7c>)
   1048e:	681b      	ldr	r3, [r3, #0]
        pin_map->_register[port_][pin_], PinBitMap::kMode, ui_mode & 0b11, 2);
   10490:	9a03      	ldr	r2, [sp, #12]
   10492:	7912      	ldrb	r2, [r2, #4]
   10494:	4610      	mov	r0, r2
   10496:	9a03      	ldr	r2, [sp, #12]
   10498:	7952      	ldrb	r2, [r2, #5]
   1049a:	4611      	mov	r1, r2
    pin_map->_register[port_][pin_] = BitPlace(
   1049c:	0142      	lsls	r2, r0, #5
   1049e:	440a      	add	r2, r1
   104a0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
        pin_map->_register[port_][pin_], PinBitMap::kMode, ui_mode & 0b11, 2);
   104a4:	f89d 3017 	ldrb.w	r3, [sp, #23]
    pin_map->_register[port_][pin_] = BitPlace(
   104a8:	f003 0203 	and.w	r2, r3, #3
   104ac:	4b0e      	ldr	r3, [pc, #56]	; (104e8 <Pin::SetMode(PinInterface::Mode)+0x7c>)
   104ae:	681c      	ldr	r4, [r3, #0]
   104b0:	9b03      	ldr	r3, [sp, #12]
   104b2:	791b      	ldrb	r3, [r3, #4]
   104b4:	461e      	mov	r6, r3
   104b6:	9b03      	ldr	r3, [sp, #12]
   104b8:	795b      	ldrb	r3, [r3, #5]
   104ba:	461d      	mov	r5, r3
   104bc:	2302      	movs	r3, #2
   104be:	9300      	str	r3, [sp, #0]
   104c0:	4613      	mov	r3, r2
   104c2:	2203      	movs	r2, #3
   104c4:	9803      	ldr	r0, [sp, #12]
   104c6:	f000 fa27 	bl	10918 <Pin::BitPlace(unsigned long, unsigned long, unsigned long, unsigned long)>
   104ca:	4602      	mov	r2, r0
   104cc:	0173      	lsls	r3, r6, #5
   104ce:	442b      	add	r3, r5
   104d0:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
   104d4:	463b      	mov	r3, r7
   104d6:	4619      	mov	r1, r3
   104d8:	4802      	ldr	r0, [pc, #8]	; (104e4 <Pin::SetMode(PinInterface::Mode)+0x78>)
   104da:	f004 fda5 	bl	15028 <__cyg_profile_func_exit>
  }
   104de:	bf00      	nop
   104e0:	b007      	add	sp, #28
   104e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   104e4:	0001046d 	.word	0x0001046d
   104e8:	10000000 	.word	0x10000000

000104ec <Pin::EnableHysteresis(bool)>:
  void EnableHysteresis(bool enable_hysteresis = true) override
   104ec:	b5f0      	push	{r4, r5, r6, r7, lr}
   104ee:	b085      	sub	sp, #20
   104f0:	4677      	mov	r7, lr
   104f2:	9003      	str	r0, [sp, #12]
   104f4:	460b      	mov	r3, r1
   104f6:	f88d 300b 	strb.w	r3, [sp, #11]
   104fa:	463b      	mov	r3, r7
   104fc:	4619      	mov	r1, r3
   104fe:	4816      	ldr	r0, [pc, #88]	; (10558 <Pin::EnableHysteresis(bool)+0x6c>)
   10500:	f004 fd7e 	bl	15000 <__cyg_profile_func_enter>
  {
    pin_map->_register[port_][pin_] =
        BitPlace(pin_map->_register[port_][pin_], PinBitMap::kHysteresis,
   10504:	4b15      	ldr	r3, [pc, #84]	; (1055c <Pin::EnableHysteresis(bool)+0x70>)
   10506:	681b      	ldr	r3, [r3, #0]
   10508:	9a03      	ldr	r2, [sp, #12]
   1050a:	7912      	ldrb	r2, [r2, #4]
   1050c:	4610      	mov	r0, r2
   1050e:	9a03      	ldr	r2, [sp, #12]
   10510:	7952      	ldrb	r2, [r2, #5]
   10512:	4611      	mov	r1, r2
   10514:	0142      	lsls	r2, r0, #5
   10516:	440a      	add	r2, r1
   10518:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   1051c:	f89d 200b 	ldrb.w	r2, [sp, #11]
    pin_map->_register[port_][pin_] =
   10520:	4b0e      	ldr	r3, [pc, #56]	; (1055c <Pin::EnableHysteresis(bool)+0x70>)
   10522:	681c      	ldr	r4, [r3, #0]
   10524:	9b03      	ldr	r3, [sp, #12]
   10526:	791b      	ldrb	r3, [r3, #4]
   10528:	461e      	mov	r6, r3
   1052a:	9b03      	ldr	r3, [sp, #12]
   1052c:	795b      	ldrb	r3, [r3, #5]
   1052e:	461d      	mov	r5, r3
        BitPlace(pin_map->_register[port_][pin_], PinBitMap::kHysteresis,
   10530:	2301      	movs	r3, #1
   10532:	9300      	str	r3, [sp, #0]
   10534:	4613      	mov	r3, r2
   10536:	2205      	movs	r2, #5
   10538:	9803      	ldr	r0, [sp, #12]
   1053a:	f000 f9ed 	bl	10918 <Pin::BitPlace(unsigned long, unsigned long, unsigned long, unsigned long)>
   1053e:	4602      	mov	r2, r0
    pin_map->_register[port_][pin_] =
   10540:	0173      	lsls	r3, r6, #5
   10542:	442b      	add	r3, r5
   10544:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
   10548:	463b      	mov	r3, r7
   1054a:	4619      	mov	r1, r3
   1054c:	4802      	ldr	r0, [pc, #8]	; (10558 <Pin::EnableHysteresis(bool)+0x6c>)
   1054e:	f004 fd6b 	bl	15028 <__cyg_profile_func_exit>
                 enable_hysteresis, 1);
  }
   10552:	bf00      	nop
   10554:	b005      	add	sp, #20
   10556:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10558:	000104ed 	.word	0x000104ed
   1055c:	10000000 	.word	0x10000000

00010560 <Pin::SetAsActiveLow(bool)>:
  void SetAsActiveLow(bool set_as_active_low = true) override
   10560:	b5f0      	push	{r4, r5, r6, r7, lr}
   10562:	b085      	sub	sp, #20
   10564:	4677      	mov	r7, lr
   10566:	9003      	str	r0, [sp, #12]
   10568:	460b      	mov	r3, r1
   1056a:	f88d 300b 	strb.w	r3, [sp, #11]
   1056e:	463b      	mov	r3, r7
   10570:	4619      	mov	r1, r3
   10572:	4816      	ldr	r0, [pc, #88]	; (105cc <Pin::SetAsActiveLow(bool)+0x6c>)
   10574:	f004 fd44 	bl	15000 <__cyg_profile_func_enter>
  {
    pin_map->_register[port_][pin_] =
        BitPlace(pin_map->_register[port_][pin_], PinBitMap::kInputInvert,
   10578:	4b15      	ldr	r3, [pc, #84]	; (105d0 <Pin::SetAsActiveLow(bool)+0x70>)
   1057a:	681b      	ldr	r3, [r3, #0]
   1057c:	9a03      	ldr	r2, [sp, #12]
   1057e:	7912      	ldrb	r2, [r2, #4]
   10580:	4610      	mov	r0, r2
   10582:	9a03      	ldr	r2, [sp, #12]
   10584:	7952      	ldrb	r2, [r2, #5]
   10586:	4611      	mov	r1, r2
   10588:	0142      	lsls	r2, r0, #5
   1058a:	440a      	add	r2, r1
   1058c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   10590:	f89d 200b 	ldrb.w	r2, [sp, #11]
    pin_map->_register[port_][pin_] =
   10594:	4b0e      	ldr	r3, [pc, #56]	; (105d0 <Pin::SetAsActiveLow(bool)+0x70>)
   10596:	681c      	ldr	r4, [r3, #0]
   10598:	9b03      	ldr	r3, [sp, #12]
   1059a:	791b      	ldrb	r3, [r3, #4]
   1059c:	461e      	mov	r6, r3
   1059e:	9b03      	ldr	r3, [sp, #12]
   105a0:	795b      	ldrb	r3, [r3, #5]
   105a2:	461d      	mov	r5, r3
        BitPlace(pin_map->_register[port_][pin_], PinBitMap::kInputInvert,
   105a4:	2301      	movs	r3, #1
   105a6:	9300      	str	r3, [sp, #0]
   105a8:	4613      	mov	r3, r2
   105aa:	2206      	movs	r2, #6
   105ac:	9803      	ldr	r0, [sp, #12]
   105ae:	f000 f9b3 	bl	10918 <Pin::BitPlace(unsigned long, unsigned long, unsigned long, unsigned long)>
   105b2:	4602      	mov	r2, r0
    pin_map->_register[port_][pin_] =
   105b4:	0173      	lsls	r3, r6, #5
   105b6:	442b      	add	r3, r5
   105b8:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
   105bc:	463b      	mov	r3, r7
   105be:	4619      	mov	r1, r3
   105c0:	4802      	ldr	r0, [pc, #8]	; (105cc <Pin::SetAsActiveLow(bool)+0x6c>)
   105c2:	f004 fd31 	bl	15028 <__cyg_profile_func_exit>
                 set_as_active_low, 1);
  }
   105c6:	bf00      	nop
   105c8:	b005      	add	sp, #20
   105ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
   105cc:	00010561 	.word	0x00010561
   105d0:	10000000 	.word	0x10000000

000105d4 <Pin::SetAsAnalogMode(bool)>:
  // Set bit to 0 to enable analog mode
  void SetAsAnalogMode(bool set_as_analog = true) override
   105d4:	b5f0      	push	{r4, r5, r6, r7, lr}
   105d6:	b085      	sub	sp, #20
   105d8:	4677      	mov	r7, lr
   105da:	9003      	str	r0, [sp, #12]
   105dc:	460b      	mov	r3, r1
   105de:	f88d 300b 	strb.w	r3, [sp, #11]
   105e2:	463b      	mov	r3, r7
   105e4:	4619      	mov	r1, r3
   105e6:	4818      	ldr	r0, [pc, #96]	; (10648 <Pin::SetAsAnalogMode(bool)+0x74>)
   105e8:	f004 fd0a 	bl	15000 <__cyg_profile_func_enter>
  {
    pin_map->_register[port_][pin_] =
        BitPlace(pin_map->_register[port_][pin_], PinBitMap::kAnalogDigitalMode,
   105ec:	4b17      	ldr	r3, [pc, #92]	; (1064c <Pin::SetAsAnalogMode(bool)+0x78>)
   105ee:	681b      	ldr	r3, [r3, #0]
   105f0:	9a03      	ldr	r2, [sp, #12]
   105f2:	7912      	ldrb	r2, [r2, #4]
   105f4:	4610      	mov	r0, r2
   105f6:	9a03      	ldr	r2, [sp, #12]
   105f8:	7952      	ldrb	r2, [r2, #5]
   105fa:	4611      	mov	r1, r2
   105fc:	0142      	lsls	r2, r0, #5
   105fe:	440a      	add	r2, r1
   10600:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
                 !set_as_analog, 1);
   10604:	f89d 300b 	ldrb.w	r3, [sp, #11]
   10608:	f083 0301 	eor.w	r3, r3, #1
   1060c:	b2db      	uxtb	r3, r3
        BitPlace(pin_map->_register[port_][pin_], PinBitMap::kAnalogDigitalMode,
   1060e:	461a      	mov	r2, r3
    pin_map->_register[port_][pin_] =
   10610:	4b0e      	ldr	r3, [pc, #56]	; (1064c <Pin::SetAsAnalogMode(bool)+0x78>)
   10612:	681c      	ldr	r4, [r3, #0]
   10614:	9b03      	ldr	r3, [sp, #12]
   10616:	791b      	ldrb	r3, [r3, #4]
   10618:	461e      	mov	r6, r3
   1061a:	9b03      	ldr	r3, [sp, #12]
   1061c:	795b      	ldrb	r3, [r3, #5]
   1061e:	461d      	mov	r5, r3
        BitPlace(pin_map->_register[port_][pin_], PinBitMap::kAnalogDigitalMode,
   10620:	2301      	movs	r3, #1
   10622:	9300      	str	r3, [sp, #0]
   10624:	4613      	mov	r3, r2
   10626:	2207      	movs	r2, #7
   10628:	9803      	ldr	r0, [sp, #12]
   1062a:	f000 f975 	bl	10918 <Pin::BitPlace(unsigned long, unsigned long, unsigned long, unsigned long)>
   1062e:	4602      	mov	r2, r0
    pin_map->_register[port_][pin_] =
   10630:	0173      	lsls	r3, r6, #5
   10632:	442b      	add	r3, r5
   10634:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
   10638:	463b      	mov	r3, r7
   1063a:	4619      	mov	r1, r3
   1063c:	4802      	ldr	r0, [pc, #8]	; (10648 <Pin::SetAsAnalogMode(bool)+0x74>)
   1063e:	f004 fcf3 	bl	15028 <__cyg_profile_func_exit>
  }
   10642:	bf00      	nop
   10644:	b005      	add	sp, #20
   10646:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10648:	000105d5 	.word	0x000105d5
   1064c:	10000000 	.word	0x10000000

00010650 <Pin::EnableDigitalFilter(bool)>:
  // Enable by setting bit to 0 to enable digital filter.
  void EnableDigitalFilter(bool enable_digital_filter = true) override
   10650:	b5f0      	push	{r4, r5, r6, r7, lr}
   10652:	b085      	sub	sp, #20
   10654:	4677      	mov	r7, lr
   10656:	9003      	str	r0, [sp, #12]
   10658:	460b      	mov	r3, r1
   1065a:	f88d 300b 	strb.w	r3, [sp, #11]
   1065e:	463b      	mov	r3, r7
   10660:	4619      	mov	r1, r3
   10662:	4818      	ldr	r0, [pc, #96]	; (106c4 <Pin::EnableDigitalFilter(bool)+0x74>)
   10664:	f004 fccc 	bl	15000 <__cyg_profile_func_enter>
  {
    pin_map->_register[port_][pin_] =
        BitPlace(pin_map->_register[port_][pin_], PinBitMap::kDigitalFilter,
   10668:	4b17      	ldr	r3, [pc, #92]	; (106c8 <Pin::EnableDigitalFilter(bool)+0x78>)
   1066a:	681b      	ldr	r3, [r3, #0]
   1066c:	9a03      	ldr	r2, [sp, #12]
   1066e:	7912      	ldrb	r2, [r2, #4]
   10670:	4610      	mov	r0, r2
   10672:	9a03      	ldr	r2, [sp, #12]
   10674:	7952      	ldrb	r2, [r2, #5]
   10676:	4611      	mov	r1, r2
   10678:	0142      	lsls	r2, r0, #5
   1067a:	440a      	add	r2, r1
   1067c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
                 !enable_digital_filter, 1);
   10680:	f89d 300b 	ldrb.w	r3, [sp, #11]
   10684:	f083 0301 	eor.w	r3, r3, #1
   10688:	b2db      	uxtb	r3, r3
        BitPlace(pin_map->_register[port_][pin_], PinBitMap::kDigitalFilter,
   1068a:	461a      	mov	r2, r3
    pin_map->_register[port_][pin_] =
   1068c:	4b0e      	ldr	r3, [pc, #56]	; (106c8 <Pin::EnableDigitalFilter(bool)+0x78>)
   1068e:	681c      	ldr	r4, [r3, #0]
   10690:	9b03      	ldr	r3, [sp, #12]
   10692:	791b      	ldrb	r3, [r3, #4]
   10694:	461e      	mov	r6, r3
   10696:	9b03      	ldr	r3, [sp, #12]
   10698:	795b      	ldrb	r3, [r3, #5]
   1069a:	461d      	mov	r5, r3
        BitPlace(pin_map->_register[port_][pin_], PinBitMap::kDigitalFilter,
   1069c:	2301      	movs	r3, #1
   1069e:	9300      	str	r3, [sp, #0]
   106a0:	4613      	mov	r3, r2
   106a2:	2208      	movs	r2, #8
   106a4:	9803      	ldr	r0, [sp, #12]
   106a6:	f000 f937 	bl	10918 <Pin::BitPlace(unsigned long, unsigned long, unsigned long, unsigned long)>
   106aa:	4602      	mov	r2, r0
    pin_map->_register[port_][pin_] =
   106ac:	0173      	lsls	r3, r6, #5
   106ae:	442b      	add	r3, r5
   106b0:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
   106b4:	463b      	mov	r3, r7
   106b6:	4619      	mov	r1, r3
   106b8:	4802      	ldr	r0, [pc, #8]	; (106c4 <Pin::EnableDigitalFilter(bool)+0x74>)
   106ba:	f004 fcb5 	bl	15028 <__cyg_profile_func_exit>
  }
   106be:	bf00      	nop
   106c0:	b005      	add	sp, #20
   106c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   106c4:	00010651 	.word	0x00010651
   106c8:	10000000 	.word	0x10000000

000106cc <Pin::EnableFastMode(bool)>:
  void EnableFastMode(bool enable_fast_mode = true) override
   106cc:	b5f0      	push	{r4, r5, r6, r7, lr}
   106ce:	b085      	sub	sp, #20
   106d0:	4677      	mov	r7, lr
   106d2:	9003      	str	r0, [sp, #12]
   106d4:	460b      	mov	r3, r1
   106d6:	f88d 300b 	strb.w	r3, [sp, #11]
   106da:	463b      	mov	r3, r7
   106dc:	4619      	mov	r1, r3
   106de:	4816      	ldr	r0, [pc, #88]	; (10738 <Pin::EnableFastMode(bool)+0x6c>)
   106e0:	f004 fc8e 	bl	15000 <__cyg_profile_func_enter>
  {
    pin_map->_register[port_][pin_] = BitPlace(
   106e4:	4b15      	ldr	r3, [pc, #84]	; (1073c <Pin::EnableFastMode(bool)+0x70>)
   106e6:	681b      	ldr	r3, [r3, #0]
        pin_map->_register[port_][pin_], PinBitMap::kSlew, enable_fast_mode, 1);
   106e8:	9a03      	ldr	r2, [sp, #12]
   106ea:	7912      	ldrb	r2, [r2, #4]
   106ec:	4610      	mov	r0, r2
   106ee:	9a03      	ldr	r2, [sp, #12]
   106f0:	7952      	ldrb	r2, [r2, #5]
   106f2:	4611      	mov	r1, r2
    pin_map->_register[port_][pin_] = BitPlace(
   106f4:	0142      	lsls	r2, r0, #5
   106f6:	440a      	add	r2, r1
   106f8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   106fc:	f89d 200b 	ldrb.w	r2, [sp, #11]
   10700:	4b0e      	ldr	r3, [pc, #56]	; (1073c <Pin::EnableFastMode(bool)+0x70>)
   10702:	681c      	ldr	r4, [r3, #0]
   10704:	9b03      	ldr	r3, [sp, #12]
   10706:	791b      	ldrb	r3, [r3, #4]
   10708:	461e      	mov	r6, r3
   1070a:	9b03      	ldr	r3, [sp, #12]
   1070c:	795b      	ldrb	r3, [r3, #5]
   1070e:	461d      	mov	r5, r3
   10710:	2301      	movs	r3, #1
   10712:	9300      	str	r3, [sp, #0]
   10714:	4613      	mov	r3, r2
   10716:	2209      	movs	r2, #9
   10718:	9803      	ldr	r0, [sp, #12]
   1071a:	f000 f8fd 	bl	10918 <Pin::BitPlace(unsigned long, unsigned long, unsigned long, unsigned long)>
   1071e:	4602      	mov	r2, r0
   10720:	0173      	lsls	r3, r6, #5
   10722:	442b      	add	r3, r5
   10724:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
   10728:	463b      	mov	r3, r7
   1072a:	4619      	mov	r1, r3
   1072c:	4802      	ldr	r0, [pc, #8]	; (10738 <Pin::EnableFastMode(bool)+0x6c>)
   1072e:	f004 fc7b 	bl	15028 <__cyg_profile_func_exit>
  }
   10732:	bf00      	nop
   10734:	b005      	add	sp, #20
   10736:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10738:	000106cd 	.word	0x000106cd
   1073c:	10000000 	.word	0x10000000

00010740 <Pin::EnableI2cHighSpeedMode(bool)>:
  // Enable by setting bit to 0 for i2c high speed mode
  void EnableI2cHighSpeedMode(bool enable_high_speed = true) override
   10740:	b5f0      	push	{r4, r5, r6, r7, lr}
   10742:	b085      	sub	sp, #20
   10744:	4677      	mov	r7, lr
   10746:	9003      	str	r0, [sp, #12]
   10748:	460b      	mov	r3, r1
   1074a:	f88d 300b 	strb.w	r3, [sp, #11]
   1074e:	463b      	mov	r3, r7
   10750:	4619      	mov	r1, r3
   10752:	4818      	ldr	r0, [pc, #96]	; (107b4 <Pin::EnableI2cHighSpeedMode(bool)+0x74>)
   10754:	f004 fc54 	bl	15000 <__cyg_profile_func_enter>
  {
    pin_map->_register[port_][pin_] =
        BitPlace(pin_map->_register[port_][pin_], PinBitMap::kI2cHighSpeed,
   10758:	4b17      	ldr	r3, [pc, #92]	; (107b8 <Pin::EnableI2cHighSpeedMode(bool)+0x78>)
   1075a:	681b      	ldr	r3, [r3, #0]
   1075c:	9a03      	ldr	r2, [sp, #12]
   1075e:	7912      	ldrb	r2, [r2, #4]
   10760:	4610      	mov	r0, r2
   10762:	9a03      	ldr	r2, [sp, #12]
   10764:	7952      	ldrb	r2, [r2, #5]
   10766:	4611      	mov	r1, r2
   10768:	0142      	lsls	r2, r0, #5
   1076a:	440a      	add	r2, r1
   1076c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
                 !enable_high_speed, 1);
   10770:	f89d 300b 	ldrb.w	r3, [sp, #11]
   10774:	f083 0301 	eor.w	r3, r3, #1
   10778:	b2db      	uxtb	r3, r3
        BitPlace(pin_map->_register[port_][pin_], PinBitMap::kI2cHighSpeed,
   1077a:	461a      	mov	r2, r3
    pin_map->_register[port_][pin_] =
   1077c:	4b0e      	ldr	r3, [pc, #56]	; (107b8 <Pin::EnableI2cHighSpeedMode(bool)+0x78>)
   1077e:	681c      	ldr	r4, [r3, #0]
   10780:	9b03      	ldr	r3, [sp, #12]
   10782:	791b      	ldrb	r3, [r3, #4]
   10784:	461e      	mov	r6, r3
   10786:	9b03      	ldr	r3, [sp, #12]
   10788:	795b      	ldrb	r3, [r3, #5]
   1078a:	461d      	mov	r5, r3
        BitPlace(pin_map->_register[port_][pin_], PinBitMap::kI2cHighSpeed,
   1078c:	2301      	movs	r3, #1
   1078e:	9300      	str	r3, [sp, #0]
   10790:	4613      	mov	r3, r2
   10792:	2208      	movs	r2, #8
   10794:	9803      	ldr	r0, [sp, #12]
   10796:	f000 f8bf 	bl	10918 <Pin::BitPlace(unsigned long, unsigned long, unsigned long, unsigned long)>
   1079a:	4602      	mov	r2, r0
    pin_map->_register[port_][pin_] =
   1079c:	0173      	lsls	r3, r6, #5
   1079e:	442b      	add	r3, r5
   107a0:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
   107a4:	463b      	mov	r3, r7
   107a6:	4619      	mov	r1, r3
   107a8:	4802      	ldr	r0, [pc, #8]	; (107b4 <Pin::EnableI2cHighSpeedMode(bool)+0x74>)
   107aa:	f004 fc3d 	bl	15028 <__cyg_profile_func_exit>
  }
   107ae:	bf00      	nop
   107b0:	b005      	add	sp, #20
   107b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   107b4:	00010741 	.word	0x00010741
   107b8:	10000000 	.word	0x10000000

000107bc <Pin::EnableI2cHighCurrentDrive(bool)>:
  void EnableI2cHighCurrentDrive(bool enable_high_current = true) override
   107bc:	b5f0      	push	{r4, r5, r6, r7, lr}
   107be:	b085      	sub	sp, #20
   107c0:	4677      	mov	r7, lr
   107c2:	9003      	str	r0, [sp, #12]
   107c4:	460b      	mov	r3, r1
   107c6:	f88d 300b 	strb.w	r3, [sp, #11]
   107ca:	463b      	mov	r3, r7
   107cc:	4619      	mov	r1, r3
   107ce:	4816      	ldr	r0, [pc, #88]	; (10828 <Pin::EnableI2cHighCurrentDrive(bool)+0x6c>)
   107d0:	f004 fc16 	bl	15000 <__cyg_profile_func_enter>
  {
    pin_map->_register[port_][pin_] =
        BitPlace(pin_map->_register[port_][pin_],
   107d4:	4b15      	ldr	r3, [pc, #84]	; (1082c <Pin::EnableI2cHighCurrentDrive(bool)+0x70>)
   107d6:	681b      	ldr	r3, [r3, #0]
   107d8:	9a03      	ldr	r2, [sp, #12]
   107da:	7912      	ldrb	r2, [r2, #4]
   107dc:	4610      	mov	r0, r2
   107de:	9a03      	ldr	r2, [sp, #12]
   107e0:	7952      	ldrb	r2, [r2, #5]
   107e2:	4611      	mov	r1, r2
   107e4:	0142      	lsls	r2, r0, #5
   107e6:	440a      	add	r2, r1
   107e8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   107ec:	f89d 200b 	ldrb.w	r2, [sp, #11]
    pin_map->_register[port_][pin_] =
   107f0:	4b0e      	ldr	r3, [pc, #56]	; (1082c <Pin::EnableI2cHighCurrentDrive(bool)+0x70>)
   107f2:	681c      	ldr	r4, [r3, #0]
   107f4:	9b03      	ldr	r3, [sp, #12]
   107f6:	791b      	ldrb	r3, [r3, #4]
   107f8:	461e      	mov	r6, r3
   107fa:	9b03      	ldr	r3, [sp, #12]
   107fc:	795b      	ldrb	r3, [r3, #5]
   107fe:	461d      	mov	r5, r3
        BitPlace(pin_map->_register[port_][pin_],
   10800:	2301      	movs	r3, #1
   10802:	9300      	str	r3, [sp, #0]
   10804:	4613      	mov	r3, r2
   10806:	2209      	movs	r2, #9
   10808:	9803      	ldr	r0, [sp, #12]
   1080a:	f000 f885 	bl	10918 <Pin::BitPlace(unsigned long, unsigned long, unsigned long, unsigned long)>
   1080e:	4602      	mov	r2, r0
    pin_map->_register[port_][pin_] =
   10810:	0173      	lsls	r3, r6, #5
   10812:	442b      	add	r3, r5
   10814:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
   10818:	463b      	mov	r3, r7
   1081a:	4619      	mov	r1, r3
   1081c:	4802      	ldr	r0, [pc, #8]	; (10828 <Pin::EnableI2cHighCurrentDrive(bool)+0x6c>)
   1081e:	f004 fc03 	bl	15028 <__cyg_profile_func_exit>
                 PinBitMap::kI2cHighCurrentDrive, enable_high_current, 1);
  }
   10822:	bf00      	nop
   10824:	b005      	add	sp, #20
   10826:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10828:	000107bd 	.word	0x000107bd
   1082c:	10000000 	.word	0x10000000

00010830 <Pin::SetAsOpenDrain(bool)>:
  void SetAsOpenDrain(bool set_as_open_drain = true) override
   10830:	b5f0      	push	{r4, r5, r6, r7, lr}
   10832:	b085      	sub	sp, #20
   10834:	4677      	mov	r7, lr
   10836:	9003      	str	r0, [sp, #12]
   10838:	460b      	mov	r3, r1
   1083a:	f88d 300b 	strb.w	r3, [sp, #11]
   1083e:	463b      	mov	r3, r7
   10840:	4619      	mov	r1, r3
   10842:	4816      	ldr	r0, [pc, #88]	; (1089c <Pin::SetAsOpenDrain(bool)+0x6c>)
   10844:	f004 fbdc 	bl	15000 <__cyg_profile_func_enter>
  {
    pin_map->_register[port_][pin_] =
        BitPlace(pin_map->_register[port_][pin_], PinBitMap::kOpenDrain,
   10848:	4b15      	ldr	r3, [pc, #84]	; (108a0 <Pin::SetAsOpenDrain(bool)+0x70>)
   1084a:	681b      	ldr	r3, [r3, #0]
   1084c:	9a03      	ldr	r2, [sp, #12]
   1084e:	7912      	ldrb	r2, [r2, #4]
   10850:	4610      	mov	r0, r2
   10852:	9a03      	ldr	r2, [sp, #12]
   10854:	7952      	ldrb	r2, [r2, #5]
   10856:	4611      	mov	r1, r2
   10858:	0142      	lsls	r2, r0, #5
   1085a:	440a      	add	r2, r1
   1085c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   10860:	f89d 200b 	ldrb.w	r2, [sp, #11]
    pin_map->_register[port_][pin_] =
   10864:	4b0e      	ldr	r3, [pc, #56]	; (108a0 <Pin::SetAsOpenDrain(bool)+0x70>)
   10866:	681c      	ldr	r4, [r3, #0]
   10868:	9b03      	ldr	r3, [sp, #12]
   1086a:	791b      	ldrb	r3, [r3, #4]
   1086c:	461e      	mov	r6, r3
   1086e:	9b03      	ldr	r3, [sp, #12]
   10870:	795b      	ldrb	r3, [r3, #5]
   10872:	461d      	mov	r5, r3
        BitPlace(pin_map->_register[port_][pin_], PinBitMap::kOpenDrain,
   10874:	2301      	movs	r3, #1
   10876:	9300      	str	r3, [sp, #0]
   10878:	4613      	mov	r3, r2
   1087a:	220a      	movs	r2, #10
   1087c:	9803      	ldr	r0, [sp, #12]
   1087e:	f000 f84b 	bl	10918 <Pin::BitPlace(unsigned long, unsigned long, unsigned long, unsigned long)>
   10882:	4602      	mov	r2, r0
    pin_map->_register[port_][pin_] =
   10884:	0173      	lsls	r3, r6, #5
   10886:	442b      	add	r3, r5
   10888:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
   1088c:	463b      	mov	r3, r7
   1088e:	4619      	mov	r1, r3
   10890:	4802      	ldr	r0, [pc, #8]	; (1089c <Pin::SetAsOpenDrain(bool)+0x6c>)
   10892:	f004 fbc9 	bl	15028 <__cyg_profile_func_exit>
                 set_as_open_drain, 1);
  }
   10896:	bf00      	nop
   10898:	b005      	add	sp, #20
   1089a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1089c:	00010831 	.word	0x00010831
   108a0:	10000000 	.word	0x10000000

000108a4 <Pin::EnableDac(bool)>:
  void EnableDac(bool enable_dac = true) override
   108a4:	b5f0      	push	{r4, r5, r6, r7, lr}
   108a6:	b085      	sub	sp, #20
   108a8:	4677      	mov	r7, lr
   108aa:	9003      	str	r0, [sp, #12]
   108ac:	460b      	mov	r3, r1
   108ae:	f88d 300b 	strb.w	r3, [sp, #11]
   108b2:	463b      	mov	r3, r7
   108b4:	4619      	mov	r1, r3
   108b6:	4816      	ldr	r0, [pc, #88]	; (10910 <Pin::EnableDac(bool)+0x6c>)
   108b8:	f004 fba2 	bl	15000 <__cyg_profile_func_enter>
  {
    pin_map->_register[port_][pin_] = BitPlace(
   108bc:	4b15      	ldr	r3, [pc, #84]	; (10914 <Pin::EnableDac(bool)+0x70>)
   108be:	681b      	ldr	r3, [r3, #0]
        pin_map->_register[port_][pin_], PinBitMap::kDacEnable, enable_dac, 1);
   108c0:	9a03      	ldr	r2, [sp, #12]
   108c2:	7912      	ldrb	r2, [r2, #4]
   108c4:	4610      	mov	r0, r2
   108c6:	9a03      	ldr	r2, [sp, #12]
   108c8:	7952      	ldrb	r2, [r2, #5]
   108ca:	4611      	mov	r1, r2
    pin_map->_register[port_][pin_] = BitPlace(
   108cc:	0142      	lsls	r2, r0, #5
   108ce:	440a      	add	r2, r1
   108d0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   108d4:	f89d 200b 	ldrb.w	r2, [sp, #11]
   108d8:	4b0e      	ldr	r3, [pc, #56]	; (10914 <Pin::EnableDac(bool)+0x70>)
   108da:	681c      	ldr	r4, [r3, #0]
   108dc:	9b03      	ldr	r3, [sp, #12]
   108de:	791b      	ldrb	r3, [r3, #4]
   108e0:	461e      	mov	r6, r3
   108e2:	9b03      	ldr	r3, [sp, #12]
   108e4:	795b      	ldrb	r3, [r3, #5]
   108e6:	461d      	mov	r5, r3
   108e8:	2301      	movs	r3, #1
   108ea:	9300      	str	r3, [sp, #0]
   108ec:	4613      	mov	r3, r2
   108ee:	2210      	movs	r2, #16
   108f0:	9803      	ldr	r0, [sp, #12]
   108f2:	f000 f811 	bl	10918 <Pin::BitPlace(unsigned long, unsigned long, unsigned long, unsigned long)>
   108f6:	4602      	mov	r2, r0
   108f8:	0173      	lsls	r3, r6, #5
   108fa:	442b      	add	r3, r5
   108fc:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
   10900:	463b      	mov	r3, r7
   10902:	4619      	mov	r1, r3
   10904:	4802      	ldr	r0, [pc, #8]	; (10910 <Pin::EnableDac(bool)+0x6c>)
   10906:	f004 fb8f 	bl	15028 <__cyg_profile_func_exit>
  }
   1090a:	bf00      	nop
   1090c:	b005      	add	sp, #20
   1090e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10910:	000108a5 	.word	0x000108a5
   10914:	10000000 	.word	0x10000000

00010918 <Pin::BitPlace(unsigned long, unsigned long, unsigned long, unsigned long)>:
  inline uint32_t BitPlace(uint32_t target, uint32_t position, uint32_t value,
   10918:	b530      	push	{r4, r5, lr}
   1091a:	b087      	sub	sp, #28
   1091c:	4675      	mov	r5, lr
   1091e:	9003      	str	r0, [sp, #12]
   10920:	9102      	str	r1, [sp, #8]
   10922:	9201      	str	r2, [sp, #4]
   10924:	9300      	str	r3, [sp, #0]
   10926:	462b      	mov	r3, r5
   10928:	4619      	mov	r1, r3
   1092a:	4813      	ldr	r0, [pc, #76]	; (10978 <Pin::BitPlace(unsigned long, unsigned long, unsigned long, unsigned long)+0x60>)
   1092c:	f004 fb68 	bl	15000 <__cyg_profile_func_enter>
                           uint32_t value_width)
  {
    // Generate mask with all 1s
    uint32_t mask = 0xFFFFFFFF >> (32 - value_width);
   10930:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   10932:	f1c3 0320 	rsb	r3, r3, #32
   10936:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1093a:	fa22 f303 	lsr.w	r3, r2, r3
   1093e:	9305      	str	r3, [sp, #20]
    target &= ~(mask << position);
   10940:	9a05      	ldr	r2, [sp, #20]
   10942:	9b01      	ldr	r3, [sp, #4]
   10944:	fa02 f303 	lsl.w	r3, r2, r3
   10948:	43db      	mvns	r3, r3
   1094a:	9a02      	ldr	r2, [sp, #8]
   1094c:	4013      	ands	r3, r2
   1094e:	9302      	str	r3, [sp, #8]
    target |= (value & mask) << position;
   10950:	9a00      	ldr	r2, [sp, #0]
   10952:	9b05      	ldr	r3, [sp, #20]
   10954:	401a      	ands	r2, r3
   10956:	9b01      	ldr	r3, [sp, #4]
   10958:	fa02 f303 	lsl.w	r3, r2, r3
   1095c:	9a02      	ldr	r2, [sp, #8]
   1095e:	4313      	orrs	r3, r2
   10960:	9302      	str	r3, [sp, #8]
    return target;
   10962:	9c02      	ldr	r4, [sp, #8]
   10964:	462b      	mov	r3, r5
   10966:	4619      	mov	r1, r3
   10968:	4803      	ldr	r0, [pc, #12]	; (10978 <Pin::BitPlace(unsigned long, unsigned long, unsigned long, unsigned long)+0x60>)
   1096a:	f004 fb5d 	bl	15028 <__cyg_profile_func_exit>
   1096e:	4623      	mov	r3, r4
  }
   10970:	4618      	mov	r0, r3
   10972:	b007      	add	sp, #28
   10974:	bd30      	pop	{r4, r5, pc}
   10976:	bf00      	nop
   10978:	00010919 	.word	0x00010919

0001097c <Pin::GetPort() const>:
  uint8_t GetPort() const override
   1097c:	b530      	push	{r4, r5, lr}
   1097e:	b083      	sub	sp, #12
   10980:	4675      	mov	r5, lr
   10982:	9001      	str	r0, [sp, #4]
   10984:	462b      	mov	r3, r5
   10986:	4619      	mov	r1, r3
   10988:	4806      	ldr	r0, [pc, #24]	; (109a4 <Pin::GetPort() const+0x28>)
   1098a:	f004 fb39 	bl	15000 <__cyg_profile_func_enter>
  {
    return port_;
   1098e:	9b01      	ldr	r3, [sp, #4]
   10990:	791c      	ldrb	r4, [r3, #4]
   10992:	462b      	mov	r3, r5
   10994:	4619      	mov	r1, r3
   10996:	4803      	ldr	r0, [pc, #12]	; (109a4 <Pin::GetPort() const+0x28>)
   10998:	f004 fb46 	bl	15028 <__cyg_profile_func_exit>
   1099c:	4623      	mov	r3, r4
  }
   1099e:	4618      	mov	r0, r3
   109a0:	b003      	add	sp, #12
   109a2:	bd30      	pop	{r4, r5, pc}
   109a4:	0001097d 	.word	0x0001097d

000109a8 <Pin::GetPin() const>:
  uint8_t GetPin() const override
   109a8:	b530      	push	{r4, r5, lr}
   109aa:	b083      	sub	sp, #12
   109ac:	4675      	mov	r5, lr
   109ae:	9001      	str	r0, [sp, #4]
   109b0:	462b      	mov	r3, r5
   109b2:	4619      	mov	r1, r3
   109b4:	4806      	ldr	r0, [pc, #24]	; (109d0 <Pin::GetPin() const+0x28>)
   109b6:	f004 fb23 	bl	15000 <__cyg_profile_func_enter>
  {
    return pin_;
   109ba:	9b01      	ldr	r3, [sp, #4]
   109bc:	795c      	ldrb	r4, [r3, #5]
   109be:	462b      	mov	r3, r5
   109c0:	4619      	mov	r1, r3
   109c2:	4803      	ldr	r0, [pc, #12]	; (109d0 <Pin::GetPin() const+0x28>)
   109c4:	f004 fb30 	bl	15028 <__cyg_profile_func_exit>
   109c8:	4623      	mov	r3, r4
  }
   109ca:	4618      	mov	r0, r3
   109cc:	b003      	add	sp, #12
   109ce:	bd30      	pop	{r4, r5, pc}
   109d0:	000109a9 	.word	0x000109a9

000109d4 <debug::PrintBacktrace(bool, void*)>:
}

[[gnu::no_instrument_function]]
inline void PrintBacktrace(bool show_make_command = false,
                           void * final_address   = nullptr)
{
   109d4:	b500      	push	{lr}
   109d6:	b08b      	sub	sp, #44	; 0x2c
   109d8:	4603      	mov	r3, r0
   109da:	9100      	str	r1, [sp, #0]
   109dc:	f88d 3007 	strb.w	r3, [sp, #7]
  printf("Stack Depth = %zd\n", GetStackDepth());
   109e0:	f004 fb44 	bl	1506c <GetStackDepth()>
   109e4:	4603      	mov	r3, r0
   109e6:	4619      	mov	r1, r3
   109e8:	4831      	ldr	r0, [pc, #196]	; (10ab0 <debug::PrintBacktrace(bool, void*)+0xdc>)
   109ea:	f005 fd85 	bl	164f8 <printf>
  // stack_depth-1 to ignore PrintBacktrace()
  // PrintBacktrace shouldn't be ignored in profiling because it causes
  // the exit to still fire, which can result in a negative stack_depth
  void ** list_of_called_functions = GetStackTrace();
   109ee:	f004 fb29 	bl	15044 <GetStackTrace()>
   109f2:	9007      	str	r0, [sp, #28]
  size_t stack_depth               = GetStackDepth();
   109f4:	f004 fb3a 	bl	1506c <GetStackDepth()>
   109f8:	9006      	str	r0, [sp, #24]
  // Ignore the last function as it is the Backtrace function
  for (size_t pos = 0; pos < stack_depth - 1; pos++)
   109fa:	2300      	movs	r3, #0
   109fc:	9309      	str	r3, [sp, #36]	; 0x24
   109fe:	9b06      	ldr	r3, [sp, #24]
   10a00:	3b01      	subs	r3, #1
   10a02:	9a09      	ldr	r2, [sp, #36]	; 0x24
   10a04:	429a      	cmp	r2, r3
   10a06:	d20d      	bcs.n	10a24 <debug::PrintBacktrace(bool, void*)+0x50>
  {
    printf("  #%zu: 0x%p\n", pos, list_of_called_functions[pos]);
   10a08:	9b09      	ldr	r3, [sp, #36]	; 0x24
   10a0a:	009b      	lsls	r3, r3, #2
   10a0c:	9a07      	ldr	r2, [sp, #28]
   10a0e:	4413      	add	r3, r2
   10a10:	681b      	ldr	r3, [r3, #0]
   10a12:	461a      	mov	r2, r3
   10a14:	9909      	ldr	r1, [sp, #36]	; 0x24
   10a16:	4827      	ldr	r0, [pc, #156]	; (10ab4 <debug::PrintBacktrace(bool, void*)+0xe0>)
   10a18:	f005 fd6e 	bl	164f8 <printf>
  for (size_t pos = 0; pos < stack_depth - 1; pos++)
   10a1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   10a1e:	3301      	adds	r3, #1
   10a20:	9309      	str	r3, [sp, #36]	; 0x24
   10a22:	e7ec      	b.n	109fe <debug::PrintBacktrace(bool, void*)+0x2a>
  }
  if (final_address != nullptr)
   10a24:	9b00      	ldr	r3, [sp, #0]
   10a26:	2b00      	cmp	r3, #0
   10a28:	d006      	beq.n	10a38 <debug::PrintBacktrace(bool, void*)+0x64>
  {
    printf("  #%zu: 0x%p\n", stack_depth - 1, final_address);
   10a2a:	9b06      	ldr	r3, [sp, #24]
   10a2c:	3b01      	subs	r3, #1
   10a2e:	9a00      	ldr	r2, [sp, #0]
   10a30:	4619      	mov	r1, r3
   10a32:	4820      	ldr	r0, [pc, #128]	; (10ab4 <debug::PrintBacktrace(bool, void*)+0xe0>)
   10a34:	f005 fd60 	bl	164f8 <printf>
  }
  if (show_make_command)
   10a38:	f89d 3007 	ldrb.w	r3, [sp, #7]
   10a3c:	2b00      	cmp	r3, #0
   10a3e:	d033      	beq.n	10aa8 <debug::PrintBacktrace(bool, void*)+0xd4>
  {
    constexpr const char kBuildType[] =
   10a40:	4a1d      	ldr	r2, [pc, #116]	; (10ab8 <debug::PrintBacktrace(bool, void*)+0xe4>)
   10a42:	ab03      	add	r3, sp, #12
   10a44:	ca07      	ldmia	r2, {r0, r1, r2}
   10a46:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#if defined(APPLICATION)
        "application";
#else
        "bootloader";
#endif
    puts("\nRun: the following command in your project directory");
   10a4a:	481c      	ldr	r0, [pc, #112]	; (10abc <debug::PrintBacktrace(bool, void*)+0xe8>)
   10a4c:	f004 faa8 	bl	14fa0 <puts>
    printf("\n  " SJ2_BOLD_WHITE "make stacktrace-%s TRACES=\"", kBuildType);
   10a50:	ab03      	add	r3, sp, #12
   10a52:	4619      	mov	r1, r3
   10a54:	481a      	ldr	r0, [pc, #104]	; (10ac0 <debug::PrintBacktrace(bool, void*)+0xec>)
   10a56:	f005 fd4f 	bl	164f8 <printf>
    for (size_t pos = 0; pos < stack_depth - 1; pos++)
   10a5a:	2300      	movs	r3, #0
   10a5c:	9308      	str	r3, [sp, #32]
   10a5e:	9b06      	ldr	r3, [sp, #24]
   10a60:	3b01      	subs	r3, #1
   10a62:	9a08      	ldr	r2, [sp, #32]
   10a64:	429a      	cmp	r2, r3
   10a66:	d212      	bcs.n	10a8e <debug::PrintBacktrace(bool, void*)+0xba>
    {
      if (pos != 0)
   10a68:	9b08      	ldr	r3, [sp, #32]
   10a6a:	2b00      	cmp	r3, #0
   10a6c:	d002      	beq.n	10a74 <debug::PrintBacktrace(bool, void*)+0xa0>
      {
        putchar(' ');
   10a6e:	2020      	movs	r0, #32
   10a70:	f004 fa7a 	bl	14f68 <putchar>
      }
      printf("0x%p", list_of_called_functions[pos]);
   10a74:	9b08      	ldr	r3, [sp, #32]
   10a76:	009b      	lsls	r3, r3, #2
   10a78:	9a07      	ldr	r2, [sp, #28]
   10a7a:	4413      	add	r3, r2
   10a7c:	681b      	ldr	r3, [r3, #0]
   10a7e:	4619      	mov	r1, r3
   10a80:	4810      	ldr	r0, [pc, #64]	; (10ac4 <debug::PrintBacktrace(bool, void*)+0xf0>)
   10a82:	f005 fd39 	bl	164f8 <printf>
    for (size_t pos = 0; pos < stack_depth - 1; pos++)
   10a86:	9b08      	ldr	r3, [sp, #32]
   10a88:	3301      	adds	r3, #1
   10a8a:	9308      	str	r3, [sp, #32]
   10a8c:	e7e7      	b.n	10a5e <debug::PrintBacktrace(bool, void*)+0x8a>
    }
    if (final_address != nullptr)
   10a8e:	9b00      	ldr	r3, [sp, #0]
   10a90:	2b00      	cmp	r3, #0
   10a92:	d003      	beq.n	10a9c <debug::PrintBacktrace(bool, void*)+0xc8>
    {
      printf(" 0x%p", final_address);
   10a94:	9900      	ldr	r1, [sp, #0]
   10a96:	480c      	ldr	r0, [pc, #48]	; (10ac8 <debug::PrintBacktrace(bool, void*)+0xf4>)
   10a98:	f005 fd2e 	bl	164f8 <printf>
    }
    puts("\"\n" SJ2_COLOR_RESET);
   10a9c:	480b      	ldr	r0, [pc, #44]	; (10acc <debug::PrintBacktrace(bool, void*)+0xf8>)
   10a9e:	f004 fa7f 	bl	14fa0 <puts>
    puts(
   10aa2:	480b      	ldr	r0, [pc, #44]	; (10ad0 <debug::PrintBacktrace(bool, void*)+0xfc>)
   10aa4:	f004 fa7c 	bl	14fa0 <puts>
        "This will report the file and line number that led to this function "
        "being called.");
  }
}
   10aa8:	bf00      	nop
   10aaa:	b00b      	add	sp, #44	; 0x2c
   10aac:	f85d fb04 	ldr.w	pc, [sp], #4
   10ab0:	00017fe4 	.word	0x00017fe4
   10ab4:	00017ff8 	.word	0x00017ff8
   10ab8:	000180d4 	.word	0x000180d4
   10abc:	00018008 	.word	0x00018008
   10ac0:	00018040 	.word	0x00018040
   10ac4:	00018068 	.word	0x00018068
   10ac8:	00018070 	.word	0x00018070
   10acc:	00018078 	.word	0x00018078
   10ad0:	00018080 	.word	0x00018080

00010ad4 <(anonymous namespace)::DefaultUptime()>:
{
// uptime in nanoseconds
inline uint64_t uptime = 0;
// Returns the system uptime in nanoseconds, do not use this function directly
[[gnu::always_inline]] inline uint64_t DefaultUptime()
{
   10ad4:	b570      	push	{r4, r5, r6, lr}
   10ad6:	4676      	mov	r6, lr
   10ad8:	4633      	mov	r3, r6
   10ada:	4619      	mov	r1, r3
   10adc:	4807      	ldr	r0, [pc, #28]	; (10afc <(anonymous namespace)::DefaultUptime()+0x28>)
   10ade:	f004 fa8f 	bl	15000 <__cyg_profile_func_enter>
  return uptime;
   10ae2:	4b07      	ldr	r3, [pc, #28]	; (10b00 <(anonymous namespace)::DefaultUptime()+0x2c>)
   10ae4:	e9d3 4500 	ldrd	r4, r5, [r3]
   10ae8:	4633      	mov	r3, r6
   10aea:	4619      	mov	r1, r3
   10aec:	4803      	ldr	r0, [pc, #12]	; (10afc <(anonymous namespace)::DefaultUptime()+0x28>)
   10aee:	f004 fa9b 	bl	15028 <__cyg_profile_func_exit>
   10af2:	4623      	mov	r3, r4
   10af4:	462c      	mov	r4, r5
}
   10af6:	4618      	mov	r0, r3
   10af8:	4621      	mov	r1, r4
   10afa:	bd70      	pop	{r4, r5, r6, pc}
   10afc:	00010ad5 	.word	0x00010ad5
   10b00:	10000960 	.word	0x10000960

00010b04 <Milliseconds()>:
{
  Uptime = uptime_function;
}
// Get system uptime in milliseconds as a 64-bit integer
inline uint64_t Milliseconds()
{
   10b04:	b570      	push	{r4, r5, r6, lr}
   10b06:	4674      	mov	r4, lr
   10b08:	4623      	mov	r3, r4
   10b0a:	4619      	mov	r1, r3
   10b0c:	480c      	ldr	r0, [pc, #48]	; (10b40 <Milliseconds()+0x3c>)
   10b0e:	f004 fa77 	bl	15000 <__cyg_profile_func_enter>
  return Uptime() / 1'000;
   10b12:	4b0c      	ldr	r3, [pc, #48]	; (10b44 <Milliseconds()+0x40>)
   10b14:	681b      	ldr	r3, [r3, #0]
   10b16:	4798      	blx	r3
   10b18:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   10b1c:	f04f 0300 	mov.w	r3, #0
   10b20:	f007 f868 	bl	17bf4 <__aeabi_uldivmod>
   10b24:	4602      	mov	r2, r0
   10b26:	460b      	mov	r3, r1
   10b28:	4615      	mov	r5, r2
   10b2a:	461e      	mov	r6, r3
   10b2c:	4623      	mov	r3, r4
   10b2e:	4619      	mov	r1, r3
   10b30:	4803      	ldr	r0, [pc, #12]	; (10b40 <Milliseconds()+0x3c>)
   10b32:	f004 fa79 	bl	15028 <__cyg_profile_func_exit>
   10b36:	462b      	mov	r3, r5
   10b38:	4634      	mov	r4, r6
}
   10b3a:	4618      	mov	r0, r3
   10b3c:	4621      	mov	r1, r4
   10b3e:	bd70      	pop	{r4, r5, r6, pc}
   10b40:	00010b05 	.word	0x00010b05
   10b44:	10000004 	.word	0x10000004

00010b48 <GpioInterface::GpioInterface()>:
#include "L0_LowLevel/LPC40xx.h"
#include "L1_Drivers/pin.hpp"
#include "utility/enum.hpp"
#include "utility/log.hpp"

class GpioInterface
   10b48:	b530      	push	{r4, r5, lr}
   10b4a:	b083      	sub	sp, #12
   10b4c:	4675      	mov	r5, lr
   10b4e:	9001      	str	r0, [sp, #4]
   10b50:	462b      	mov	r3, r5
   10b52:	4619      	mov	r1, r3
   10b54:	4807      	ldr	r0, [pc, #28]	; (10b74 <GpioInterface::GpioInterface()+0x2c>)
   10b56:	f004 fa53 	bl	15000 <__cyg_profile_func_enter>
   10b5a:	4a07      	ldr	r2, [pc, #28]	; (10b78 <GpioInterface::GpioInterface()+0x30>)
   10b5c:	9b01      	ldr	r3, [sp, #4]
   10b5e:	601a      	str	r2, [r3, #0]
   10b60:	9c01      	ldr	r4, [sp, #4]
   10b62:	462b      	mov	r3, r5
   10b64:	4619      	mov	r1, r3
   10b66:	4803      	ldr	r0, [pc, #12]	; (10b74 <GpioInterface::GpioInterface()+0x2c>)
   10b68:	f004 fa5e 	bl	15028 <__cyg_profile_func_exit>
   10b6c:	4623      	mov	r3, r4
   10b6e:	4618      	mov	r0, r3
   10b70:	b003      	add	sp, #12
   10b72:	bd30      	pop	{r4, r5, pc}
   10b74:	00010b49 	.word	0x00010b49
   10b78:	0001881c 	.word	0x0001881c

00010b7c <Gpio::Gpio(unsigned char, unsigned char)>:
  };

  inline static volatile uint32_t * port_status = &(LPC_GPIOINT->IntStatus);

  // For port 0-4, pins 0-31 are available. Port 5 only has pins 0-4 available.
  constexpr Gpio(uint8_t port_number, uint8_t pin_number)
   10b7c:	b530      	push	{r4, r5, lr}
   10b7e:	b083      	sub	sp, #12
   10b80:	4675      	mov	r5, lr
   10b82:	9001      	str	r0, [sp, #4]
   10b84:	460b      	mov	r3, r1
   10b86:	f88d 3003 	strb.w	r3, [sp, #3]
   10b8a:	4613      	mov	r3, r2
   10b8c:	f88d 3002 	strb.w	r3, [sp, #2]
   10b90:	462b      	mov	r3, r5
   10b92:	4619      	mov	r1, r3
   10b94:	4816      	ldr	r0, [pc, #88]	; (10bf0 <Gpio::Gpio(unsigned char, unsigned char)+0x74>)
   10b96:	f004 fa33 	bl	15000 <__cyg_profile_func_enter>
      : interupt_port_(false),
        pin_(&lpc40xx_pin_),
        lpc40xx_pin_(port_number, pin_number)
   10b9a:	9b01      	ldr	r3, [sp, #4]
   10b9c:	4618      	mov	r0, r3
   10b9e:	f7ff ffd3 	bl	10b48 <GpioInterface::GpioInterface()>
   10ba2:	4a14      	ldr	r2, [pc, #80]	; (10bf4 <Gpio::Gpio(unsigned char, unsigned char)+0x78>)
   10ba4:	9b01      	ldr	r3, [sp, #4]
   10ba6:	601a      	str	r2, [r3, #0]
   10ba8:	9b01      	ldr	r3, [sp, #4]
   10baa:	2200      	movs	r2, #0
   10bac:	711a      	strb	r2, [r3, #4]
   10bae:	9b01      	ldr	r3, [sp, #4]
   10bb0:	f103 020c 	add.w	r2, r3, #12
   10bb4:	9b01      	ldr	r3, [sp, #4]
   10bb6:	609a      	str	r2, [r3, #8]
   10bb8:	9b01      	ldr	r3, [sp, #4]
   10bba:	330c      	adds	r3, #12
   10bbc:	f89d 2002 	ldrb.w	r2, [sp, #2]
   10bc0:	f89d 1003 	ldrb.w	r1, [sp, #3]
   10bc4:	4618      	mov	r0, r3
   10bc6:	f7ff fbe9 	bl	1039c <Pin::Pin(unsigned char, unsigned char)>
  {
    interupt_port_ = (port_number == 2) ? 1 : 0;
   10bca:	f89d 3003 	ldrb.w	r3, [sp, #3]
   10bce:	2b02      	cmp	r3, #2
   10bd0:	d101      	bne.n	10bd6 <Gpio::Gpio(unsigned char, unsigned char)+0x5a>
   10bd2:	2201      	movs	r2, #1
   10bd4:	e000      	b.n	10bd8 <Gpio::Gpio(unsigned char, unsigned char)+0x5c>
   10bd6:	2200      	movs	r2, #0
   10bd8:	9b01      	ldr	r3, [sp, #4]
   10bda:	711a      	strb	r2, [r3, #4]
  }
   10bdc:	9c01      	ldr	r4, [sp, #4]
   10bde:	462b      	mov	r3, r5
   10be0:	4619      	mov	r1, r3
   10be2:	4803      	ldr	r0, [pc, #12]	; (10bf0 <Gpio::Gpio(unsigned char, unsigned char)+0x74>)
   10be4:	f004 fa20 	bl	15028 <__cyg_profile_func_exit>
   10be8:	4623      	mov	r3, r4
   10bea:	4618      	mov	r0, r3
   10bec:	b003      	add	sp, #12
   10bee:	bd30      	pop	{r4, r5, pc}
   10bf0:	00010b7d 	.word	0x00010b7d
   10bf4:	000187d4 	.word	0x000187d4

00010bf8 <Gpio::SetAsInput()>:
      : interupt_port_(false), pin_(pin), lpc40xx_pin_(Pin::CreateInactivePin())
  {
    interupt_port_ = pin_->GetPort();
  }
  // Sets the GPIO pin direction as input
  void SetAsInput(void) override
   10bf8:	b530      	push	{r4, r5, lr}
   10bfa:	b083      	sub	sp, #12
   10bfc:	4675      	mov	r5, lr
   10bfe:	9001      	str	r0, [sp, #4]
   10c00:	462b      	mov	r3, r5
   10c02:	4619      	mov	r1, r3
   10c04:	4819      	ldr	r0, [pc, #100]	; (10c6c <Gpio::SetAsInput()+0x74>)
   10c06:	f004 f9fb 	bl	15000 <__cyg_profile_func_enter>
  {
    pin_->SetPinFunction(kGpioFunction);
   10c0a:	9b01      	ldr	r3, [sp, #4]
   10c0c:	689a      	ldr	r2, [r3, #8]
   10c0e:	9b01      	ldr	r3, [sp, #4]
   10c10:	689b      	ldr	r3, [r3, #8]
   10c12:	681b      	ldr	r3, [r3, #0]
   10c14:	681b      	ldr	r3, [r3, #0]
   10c16:	2100      	movs	r1, #0
   10c18:	4610      	mov	r0, r2
   10c1a:	4798      	blx	r3
    gpio_port[pin_->GetPort()]->DIR &= ~(1 << pin_->GetPin());
   10c1c:	9b01      	ldr	r3, [sp, #4]
   10c1e:	689a      	ldr	r2, [r3, #8]
   10c20:	9b01      	ldr	r3, [sp, #4]
   10c22:	689b      	ldr	r3, [r3, #8]
   10c24:	681b      	ldr	r3, [r3, #0]
   10c26:	3330      	adds	r3, #48	; 0x30
   10c28:	681b      	ldr	r3, [r3, #0]
   10c2a:	4610      	mov	r0, r2
   10c2c:	4798      	blx	r3
   10c2e:	4603      	mov	r3, r0
   10c30:	461a      	mov	r2, r3
   10c32:	2301      	movs	r3, #1
   10c34:	4093      	lsls	r3, r2
   10c36:	43dc      	mvns	r4, r3
   10c38:	9b01      	ldr	r3, [sp, #4]
   10c3a:	689a      	ldr	r2, [r3, #8]
   10c3c:	9b01      	ldr	r3, [sp, #4]
   10c3e:	689b      	ldr	r3, [r3, #8]
   10c40:	681b      	ldr	r3, [r3, #0]
   10c42:	332c      	adds	r3, #44	; 0x2c
   10c44:	681b      	ldr	r3, [r3, #0]
   10c46:	4610      	mov	r0, r2
   10c48:	4798      	blx	r3
   10c4a:	4603      	mov	r3, r0
   10c4c:	461a      	mov	r2, r3
   10c4e:	4b08      	ldr	r3, [pc, #32]	; (10c70 <Gpio::SetAsInput()+0x78>)
   10c50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   10c54:	681a      	ldr	r2, [r3, #0]
   10c56:	4621      	mov	r1, r4
   10c58:	400a      	ands	r2, r1
   10c5a:	601a      	str	r2, [r3, #0]
   10c5c:	462b      	mov	r3, r5
   10c5e:	4619      	mov	r1, r3
   10c60:	4802      	ldr	r0, [pc, #8]	; (10c6c <Gpio::SetAsInput()+0x74>)
   10c62:	f004 f9e1 	bl	15028 <__cyg_profile_func_exit>
  }
   10c66:	bf00      	nop
   10c68:	b003      	add	sp, #12
   10c6a:	bd30      	pop	{r4, r5, pc}
   10c6c:	00010bf9 	.word	0x00010bf9
   10c70:	10000008 	.word	0x10000008

00010c74 <Gpio::SetAsOutput()>:
  // Sets the GPIO pin direction as output
  void SetAsOutput(void) override
   10c74:	b530      	push	{r4, r5, lr}
   10c76:	b083      	sub	sp, #12
   10c78:	4675      	mov	r5, lr
   10c7a:	9001      	str	r0, [sp, #4]
   10c7c:	462b      	mov	r3, r5
   10c7e:	4619      	mov	r1, r3
   10c80:	4819      	ldr	r0, [pc, #100]	; (10ce8 <Gpio::SetAsOutput()+0x74>)
   10c82:	f004 f9bd 	bl	15000 <__cyg_profile_func_enter>
  {
    pin_->SetPinFunction(kGpioFunction);
   10c86:	9b01      	ldr	r3, [sp, #4]
   10c88:	689a      	ldr	r2, [r3, #8]
   10c8a:	9b01      	ldr	r3, [sp, #4]
   10c8c:	689b      	ldr	r3, [r3, #8]
   10c8e:	681b      	ldr	r3, [r3, #0]
   10c90:	681b      	ldr	r3, [r3, #0]
   10c92:	2100      	movs	r1, #0
   10c94:	4610      	mov	r0, r2
   10c96:	4798      	blx	r3
    gpio_port[pin_->GetPort()]->DIR |= (1 << pin_->GetPin());
   10c98:	9b01      	ldr	r3, [sp, #4]
   10c9a:	689a      	ldr	r2, [r3, #8]
   10c9c:	9b01      	ldr	r3, [sp, #4]
   10c9e:	689b      	ldr	r3, [r3, #8]
   10ca0:	681b      	ldr	r3, [r3, #0]
   10ca2:	3330      	adds	r3, #48	; 0x30
   10ca4:	681b      	ldr	r3, [r3, #0]
   10ca6:	4610      	mov	r0, r2
   10ca8:	4798      	blx	r3
   10caa:	4603      	mov	r3, r0
   10cac:	461a      	mov	r2, r3
   10cae:	2301      	movs	r3, #1
   10cb0:	fa03 f402 	lsl.w	r4, r3, r2
   10cb4:	9b01      	ldr	r3, [sp, #4]
   10cb6:	689a      	ldr	r2, [r3, #8]
   10cb8:	9b01      	ldr	r3, [sp, #4]
   10cba:	689b      	ldr	r3, [r3, #8]
   10cbc:	681b      	ldr	r3, [r3, #0]
   10cbe:	332c      	adds	r3, #44	; 0x2c
   10cc0:	681b      	ldr	r3, [r3, #0]
   10cc2:	4610      	mov	r0, r2
   10cc4:	4798      	blx	r3
   10cc6:	4603      	mov	r3, r0
   10cc8:	461a      	mov	r2, r3
   10cca:	4b08      	ldr	r3, [pc, #32]	; (10cec <Gpio::SetAsOutput()+0x78>)
   10ccc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   10cd0:	681a      	ldr	r2, [r3, #0]
   10cd2:	4621      	mov	r1, r4
   10cd4:	430a      	orrs	r2, r1
   10cd6:	601a      	str	r2, [r3, #0]
   10cd8:	462b      	mov	r3, r5
   10cda:	4619      	mov	r1, r3
   10cdc:	4802      	ldr	r0, [pc, #8]	; (10ce8 <Gpio::SetAsOutput()+0x74>)
   10cde:	f004 f9a3 	bl	15028 <__cyg_profile_func_exit>
  }
   10ce2:	bf00      	nop
   10ce4:	b003      	add	sp, #12
   10ce6:	bd30      	pop	{r4, r5, pc}
   10ce8:	00010c75 	.word	0x00010c75
   10cec:	10000008 	.word	0x10000008

00010cf0 <Gpio::SetDirection(GpioInterface::Direction)>:
  // Sets the GPIO pin direction as output or input depending on the
  // Direction enum parameter
  inline void SetDirection(Direction direction) override
   10cf0:	b510      	push	{r4, lr}
   10cf2:	b082      	sub	sp, #8
   10cf4:	4674      	mov	r4, lr
   10cf6:	9001      	str	r0, [sp, #4]
   10cf8:	460b      	mov	r3, r1
   10cfa:	f88d 3003 	strb.w	r3, [sp, #3]
   10cfe:	4623      	mov	r3, r4
   10d00:	4619      	mov	r1, r3
   10d02:	480b      	ldr	r0, [pc, #44]	; (10d30 <Gpio::SetDirection(GpioInterface::Direction)+0x40>)
   10d04:	f004 f97c 	bl	15000 <__cyg_profile_func_enter>
  {
    (direction) ? SetAsOutput() : SetAsInput();
   10d08:	f89d 3003 	ldrb.w	r3, [sp, #3]
   10d0c:	2b00      	cmp	r3, #0
   10d0e:	d003      	beq.n	10d18 <Gpio::SetDirection(GpioInterface::Direction)+0x28>
   10d10:	9801      	ldr	r0, [sp, #4]
   10d12:	f7ff ffaf 	bl	10c74 <Gpio::SetAsOutput()>
   10d16:	e002      	b.n	10d1e <Gpio::SetDirection(GpioInterface::Direction)+0x2e>
   10d18:	9801      	ldr	r0, [sp, #4]
   10d1a:	f7ff ff6d 	bl	10bf8 <Gpio::SetAsInput()>
   10d1e:	4623      	mov	r3, r4
   10d20:	4619      	mov	r1, r3
   10d22:	4803      	ldr	r0, [pc, #12]	; (10d30 <Gpio::SetDirection(GpioInterface::Direction)+0x40>)
   10d24:	f004 f980 	bl	15028 <__cyg_profile_func_exit>
  }
   10d28:	bf00      	nop
   10d2a:	b002      	add	sp, #8
   10d2c:	bd10      	pop	{r4, pc}
   10d2e:	bf00      	nop
   10d30:	00010cf1 	.word	0x00010cf1

00010d34 <Gpio::SetHigh()>:
  // Sets the GPIO output pin to high
  void SetHigh(void) override
   10d34:	b530      	push	{r4, r5, lr}
   10d36:	b083      	sub	sp, #12
   10d38:	4675      	mov	r5, lr
   10d3a:	9001      	str	r0, [sp, #4]
   10d3c:	462b      	mov	r3, r5
   10d3e:	4619      	mov	r1, r3
   10d40:	4813      	ldr	r0, [pc, #76]	; (10d90 <Gpio::SetHigh()+0x5c>)
   10d42:	f004 f95d 	bl	15000 <__cyg_profile_func_enter>
  {
    gpio_port[pin_->GetPort()]->SET = (1 << pin_->GetPin());
   10d46:	9b01      	ldr	r3, [sp, #4]
   10d48:	689a      	ldr	r2, [r3, #8]
   10d4a:	9b01      	ldr	r3, [sp, #4]
   10d4c:	689b      	ldr	r3, [r3, #8]
   10d4e:	681b      	ldr	r3, [r3, #0]
   10d50:	3330      	adds	r3, #48	; 0x30
   10d52:	681b      	ldr	r3, [r3, #0]
   10d54:	4610      	mov	r0, r2
   10d56:	4798      	blx	r3
   10d58:	4603      	mov	r3, r0
   10d5a:	461a      	mov	r2, r3
   10d5c:	2301      	movs	r3, #1
   10d5e:	4093      	lsls	r3, r2
   10d60:	461c      	mov	r4, r3
   10d62:	9b01      	ldr	r3, [sp, #4]
   10d64:	689a      	ldr	r2, [r3, #8]
   10d66:	9b01      	ldr	r3, [sp, #4]
   10d68:	689b      	ldr	r3, [r3, #8]
   10d6a:	681b      	ldr	r3, [r3, #0]
   10d6c:	332c      	adds	r3, #44	; 0x2c
   10d6e:	681b      	ldr	r3, [r3, #0]
   10d70:	4610      	mov	r0, r2
   10d72:	4798      	blx	r3
   10d74:	4603      	mov	r3, r0
   10d76:	461a      	mov	r2, r3
   10d78:	4b06      	ldr	r3, [pc, #24]	; (10d94 <Gpio::SetHigh()+0x60>)
   10d7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   10d7e:	619c      	str	r4, [r3, #24]
   10d80:	462b      	mov	r3, r5
   10d82:	4619      	mov	r1, r3
   10d84:	4802      	ldr	r0, [pc, #8]	; (10d90 <Gpio::SetHigh()+0x5c>)
   10d86:	f004 f94f 	bl	15028 <__cyg_profile_func_exit>
  }
   10d8a:	bf00      	nop
   10d8c:	b003      	add	sp, #12
   10d8e:	bd30      	pop	{r4, r5, pc}
   10d90:	00010d35 	.word	0x00010d35
   10d94:	10000008 	.word	0x10000008

00010d98 <Gpio::SetLow()>:
  // Sets the GPIO output pin to low
  void SetLow(void) override
   10d98:	b530      	push	{r4, r5, lr}
   10d9a:	b083      	sub	sp, #12
   10d9c:	4675      	mov	r5, lr
   10d9e:	9001      	str	r0, [sp, #4]
   10da0:	462b      	mov	r3, r5
   10da2:	4619      	mov	r1, r3
   10da4:	4813      	ldr	r0, [pc, #76]	; (10df4 <Gpio::SetLow()+0x5c>)
   10da6:	f004 f92b 	bl	15000 <__cyg_profile_func_enter>
  {
    gpio_port[pin_->GetPort()]->CLR = (1 << pin_->GetPin());
   10daa:	9b01      	ldr	r3, [sp, #4]
   10dac:	689a      	ldr	r2, [r3, #8]
   10dae:	9b01      	ldr	r3, [sp, #4]
   10db0:	689b      	ldr	r3, [r3, #8]
   10db2:	681b      	ldr	r3, [r3, #0]
   10db4:	3330      	adds	r3, #48	; 0x30
   10db6:	681b      	ldr	r3, [r3, #0]
   10db8:	4610      	mov	r0, r2
   10dba:	4798      	blx	r3
   10dbc:	4603      	mov	r3, r0
   10dbe:	461a      	mov	r2, r3
   10dc0:	2301      	movs	r3, #1
   10dc2:	4093      	lsls	r3, r2
   10dc4:	461c      	mov	r4, r3
   10dc6:	9b01      	ldr	r3, [sp, #4]
   10dc8:	689a      	ldr	r2, [r3, #8]
   10dca:	9b01      	ldr	r3, [sp, #4]
   10dcc:	689b      	ldr	r3, [r3, #8]
   10dce:	681b      	ldr	r3, [r3, #0]
   10dd0:	332c      	adds	r3, #44	; 0x2c
   10dd2:	681b      	ldr	r3, [r3, #0]
   10dd4:	4610      	mov	r0, r2
   10dd6:	4798      	blx	r3
   10dd8:	4603      	mov	r3, r0
   10dda:	461a      	mov	r2, r3
   10ddc:	4b06      	ldr	r3, [pc, #24]	; (10df8 <Gpio::SetLow()+0x60>)
   10dde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   10de2:	61dc      	str	r4, [r3, #28]
   10de4:	462b      	mov	r3, r5
   10de6:	4619      	mov	r1, r3
   10de8:	4802      	ldr	r0, [pc, #8]	; (10df4 <Gpio::SetLow()+0x5c>)
   10dea:	f004 f91d 	bl	15028 <__cyg_profile_func_exit>
  }
   10dee:	bf00      	nop
   10df0:	b003      	add	sp, #12
   10df2:	bd30      	pop	{r4, r5, pc}
   10df4:	00010d99 	.word	0x00010d99
   10df8:	10000008 	.word	0x10000008

00010dfc <Gpio::Set(GpioInterface::State)>:
  // Sets the GPIO output pin to high or low depending on the State enum
  // parameter
  void Set(State output = kHigh) override
   10dfc:	b510      	push	{r4, lr}
   10dfe:	b082      	sub	sp, #8
   10e00:	4674      	mov	r4, lr
   10e02:	9001      	str	r0, [sp, #4]
   10e04:	460b      	mov	r3, r1
   10e06:	f88d 3003 	strb.w	r3, [sp, #3]
   10e0a:	4623      	mov	r3, r4
   10e0c:	4619      	mov	r1, r3
   10e0e:	480b      	ldr	r0, [pc, #44]	; (10e3c <Gpio::Set(GpioInterface::State)+0x40>)
   10e10:	f004 f8f6 	bl	15000 <__cyg_profile_func_enter>
  {
    (output) ? SetHigh() : SetLow();
   10e14:	f89d 3003 	ldrb.w	r3, [sp, #3]
   10e18:	2b00      	cmp	r3, #0
   10e1a:	d003      	beq.n	10e24 <Gpio::Set(GpioInterface::State)+0x28>
   10e1c:	9801      	ldr	r0, [sp, #4]
   10e1e:	f7ff ff89 	bl	10d34 <Gpio::SetHigh()>
   10e22:	e002      	b.n	10e2a <Gpio::Set(GpioInterface::State)+0x2e>
   10e24:	9801      	ldr	r0, [sp, #4]
   10e26:	f7ff ffb7 	bl	10d98 <Gpio::SetLow()>
   10e2a:	4623      	mov	r3, r4
   10e2c:	4619      	mov	r1, r3
   10e2e:	4803      	ldr	r0, [pc, #12]	; (10e3c <Gpio::Set(GpioInterface::State)+0x40>)
   10e30:	f004 f8fa 	bl	15028 <__cyg_profile_func_exit>
  }
   10e34:	bf00      	nop
   10e36:	b002      	add	sp, #8
   10e38:	bd10      	pop	{r4, pc}
   10e3a:	bf00      	nop
   10e3c:	00010dfd 	.word	0x00010dfd

00010e40 <Gpio::Toggle()>:
  // Toggle the output of a GPIO output pin
  void Toggle() override
   10e40:	b530      	push	{r4, r5, lr}
   10e42:	b083      	sub	sp, #12
   10e44:	4675      	mov	r5, lr
   10e46:	9001      	str	r0, [sp, #4]
   10e48:	462b      	mov	r3, r5
   10e4a:	4619      	mov	r1, r3
   10e4c:	4815      	ldr	r0, [pc, #84]	; (10ea4 <Gpio::Toggle()+0x64>)
   10e4e:	f004 f8d7 	bl	15000 <__cyg_profile_func_enter>
  {
    gpio_port[pin_->GetPort()]->PIN ^= (1 << pin_->GetPin());
   10e52:	9b01      	ldr	r3, [sp, #4]
   10e54:	689a      	ldr	r2, [r3, #8]
   10e56:	9b01      	ldr	r3, [sp, #4]
   10e58:	689b      	ldr	r3, [r3, #8]
   10e5a:	681b      	ldr	r3, [r3, #0]
   10e5c:	3330      	adds	r3, #48	; 0x30
   10e5e:	681b      	ldr	r3, [r3, #0]
   10e60:	4610      	mov	r0, r2
   10e62:	4798      	blx	r3
   10e64:	4603      	mov	r3, r0
   10e66:	461a      	mov	r2, r3
   10e68:	2301      	movs	r3, #1
   10e6a:	fa03 f402 	lsl.w	r4, r3, r2
   10e6e:	9b01      	ldr	r3, [sp, #4]
   10e70:	689a      	ldr	r2, [r3, #8]
   10e72:	9b01      	ldr	r3, [sp, #4]
   10e74:	689b      	ldr	r3, [r3, #8]
   10e76:	681b      	ldr	r3, [r3, #0]
   10e78:	332c      	adds	r3, #44	; 0x2c
   10e7a:	681b      	ldr	r3, [r3, #0]
   10e7c:	4610      	mov	r0, r2
   10e7e:	4798      	blx	r3
   10e80:	4603      	mov	r3, r0
   10e82:	461a      	mov	r2, r3
   10e84:	4b08      	ldr	r3, [pc, #32]	; (10ea8 <Gpio::Toggle()+0x68>)
   10e86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   10e8a:	695a      	ldr	r2, [r3, #20]
   10e8c:	4621      	mov	r1, r4
   10e8e:	404a      	eors	r2, r1
   10e90:	615a      	str	r2, [r3, #20]
   10e92:	462b      	mov	r3, r5
   10e94:	4619      	mov	r1, r3
   10e96:	4803      	ldr	r0, [pc, #12]	; (10ea4 <Gpio::Toggle()+0x64>)
   10e98:	f004 f8c6 	bl	15028 <__cyg_profile_func_exit>
  }
   10e9c:	bf00      	nop
   10e9e:	b003      	add	sp, #12
   10ea0:	bd30      	pop	{r4, r5, pc}
   10ea2:	bf00      	nop
   10ea4:	00010e41 	.word	0x00010e41
   10ea8:	10000008 	.word	0x10000008

00010eac <Gpio::ReadState()>:
  // Returns the current State state of the pin
  State ReadState(void) override
   10eac:	b530      	push	{r4, r5, lr}
   10eae:	b085      	sub	sp, #20
   10eb0:	4675      	mov	r5, lr
   10eb2:	9001      	str	r0, [sp, #4]
   10eb4:	462b      	mov	r3, r5
   10eb6:	4619      	mov	r1, r3
   10eb8:	4818      	ldr	r0, [pc, #96]	; (10f1c <Gpio::ReadState()+0x70>)
   10eba:	f004 f8a1 	bl	15000 <__cyg_profile_func_enter>
  {
    bool state = (gpio_port[pin_->GetPort()]->PIN >> pin_->GetPin()) & 1;
   10ebe:	9b01      	ldr	r3, [sp, #4]
   10ec0:	689a      	ldr	r2, [r3, #8]
   10ec2:	9b01      	ldr	r3, [sp, #4]
   10ec4:	689b      	ldr	r3, [r3, #8]
   10ec6:	681b      	ldr	r3, [r3, #0]
   10ec8:	332c      	adds	r3, #44	; 0x2c
   10eca:	681b      	ldr	r3, [r3, #0]
   10ecc:	4610      	mov	r0, r2
   10ece:	4798      	blx	r3
   10ed0:	4603      	mov	r3, r0
   10ed2:	461a      	mov	r2, r3
   10ed4:	4b12      	ldr	r3, [pc, #72]	; (10f20 <Gpio::ReadState()+0x74>)
   10ed6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   10eda:	695c      	ldr	r4, [r3, #20]
   10edc:	9b01      	ldr	r3, [sp, #4]
   10ede:	689a      	ldr	r2, [r3, #8]
   10ee0:	9b01      	ldr	r3, [sp, #4]
   10ee2:	689b      	ldr	r3, [r3, #8]
   10ee4:	681b      	ldr	r3, [r3, #0]
   10ee6:	3330      	adds	r3, #48	; 0x30
   10ee8:	681b      	ldr	r3, [r3, #0]
   10eea:	4610      	mov	r0, r2
   10eec:	4798      	blx	r3
   10eee:	4603      	mov	r3, r0
   10ef0:	fa24 f303 	lsr.w	r3, r4, r3
   10ef4:	f003 0301 	and.w	r3, r3, #1
   10ef8:	2b00      	cmp	r3, #0
   10efa:	bf14      	ite	ne
   10efc:	2301      	movne	r3, #1
   10efe:	2300      	moveq	r3, #0
   10f00:	f88d 300f 	strb.w	r3, [sp, #15]
    return static_cast<State>(state);
   10f04:	f89d 400f 	ldrb.w	r4, [sp, #15]
   10f08:	462b      	mov	r3, r5
   10f0a:	4619      	mov	r1, r3
   10f0c:	4803      	ldr	r0, [pc, #12]	; (10f1c <Gpio::ReadState()+0x70>)
   10f0e:	f004 f88b 	bl	15028 <__cyg_profile_func_exit>
   10f12:	4623      	mov	r3, r4
  }
   10f14:	4618      	mov	r0, r3
   10f16:	b005      	add	sp, #20
   10f18:	bd30      	pop	{r4, r5, pc}
   10f1a:	bf00      	nop
   10f1c:	00010ead 	.word	0x00010ead
   10f20:	10000008 	.word	0x10000008

00010f24 <Gpio::Read()>:
  // Returns true if input or output pin is high
  bool Read(void) override
   10f24:	b530      	push	{r4, r5, lr}
   10f26:	b083      	sub	sp, #12
   10f28:	4675      	mov	r5, lr
   10f2a:	9001      	str	r0, [sp, #4]
   10f2c:	462b      	mov	r3, r5
   10f2e:	4619      	mov	r1, r3
   10f30:	4816      	ldr	r0, [pc, #88]	; (10f8c <Gpio::Read()+0x68>)
   10f32:	f004 f865 	bl	15000 <__cyg_profile_func_enter>
  {
    return (gpio_port[pin_->GetPort()]->PIN >> pin_->GetPin()) & 1;
   10f36:	9b01      	ldr	r3, [sp, #4]
   10f38:	689a      	ldr	r2, [r3, #8]
   10f3a:	9b01      	ldr	r3, [sp, #4]
   10f3c:	689b      	ldr	r3, [r3, #8]
   10f3e:	681b      	ldr	r3, [r3, #0]
   10f40:	332c      	adds	r3, #44	; 0x2c
   10f42:	681b      	ldr	r3, [r3, #0]
   10f44:	4610      	mov	r0, r2
   10f46:	4798      	blx	r3
   10f48:	4603      	mov	r3, r0
   10f4a:	461a      	mov	r2, r3
   10f4c:	4b10      	ldr	r3, [pc, #64]	; (10f90 <Gpio::Read()+0x6c>)
   10f4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   10f52:	695c      	ldr	r4, [r3, #20]
   10f54:	9b01      	ldr	r3, [sp, #4]
   10f56:	689a      	ldr	r2, [r3, #8]
   10f58:	9b01      	ldr	r3, [sp, #4]
   10f5a:	689b      	ldr	r3, [r3, #8]
   10f5c:	681b      	ldr	r3, [r3, #0]
   10f5e:	3330      	adds	r3, #48	; 0x30
   10f60:	681b      	ldr	r3, [r3, #0]
   10f62:	4610      	mov	r0, r2
   10f64:	4798      	blx	r3
   10f66:	4603      	mov	r3, r0
   10f68:	fa24 f303 	lsr.w	r3, r4, r3
   10f6c:	f003 0301 	and.w	r3, r3, #1
   10f70:	2b00      	cmp	r3, #0
   10f72:	bf14      	ite	ne
   10f74:	2301      	movne	r3, #1
   10f76:	2300      	moveq	r3, #0
   10f78:	b2dc      	uxtb	r4, r3
   10f7a:	462b      	mov	r3, r5
   10f7c:	4619      	mov	r1, r3
   10f7e:	4803      	ldr	r0, [pc, #12]	; (10f8c <Gpio::Read()+0x68>)
   10f80:	f004 f852 	bl	15028 <__cyg_profile_func_exit>
   10f84:	4623      	mov	r3, r4
  }
   10f86:	4618      	mov	r0, r3
   10f88:	b003      	add	sp, #12
   10f8a:	bd30      	pop	{r4, r5, pc}
   10f8c:	00010f25 	.word	0x00010f25
   10f90:	10000008 	.word	0x10000008

00010f94 <Gpio::GetPin()>:
  PinInterface & GetPin() override
   10f94:	b530      	push	{r4, r5, lr}
   10f96:	b083      	sub	sp, #12
   10f98:	4675      	mov	r5, lr
   10f9a:	9001      	str	r0, [sp, #4]
   10f9c:	462b      	mov	r3, r5
   10f9e:	4619      	mov	r1, r3
   10fa0:	4806      	ldr	r0, [pc, #24]	; (10fbc <Gpio::GetPin()+0x28>)
   10fa2:	f004 f82d 	bl	15000 <__cyg_profile_func_enter>
  {
    return *pin_;
   10fa6:	9b01      	ldr	r3, [sp, #4]
   10fa8:	689c      	ldr	r4, [r3, #8]
   10faa:	462b      	mov	r3, r5
   10fac:	4619      	mov	r1, r3
   10fae:	4803      	ldr	r0, [pc, #12]	; (10fbc <Gpio::GetPin()+0x28>)
   10fb0:	f004 f83a 	bl	15028 <__cyg_profile_func_exit>
   10fb4:	4623      	mov	r3, r4
  }
   10fb6:	4618      	mov	r0, r3
   10fb8:	b003      	add	sp, #12
   10fba:	bd30      	pop	{r4, r5, pc}
   10fbc:	00010f95 	.word	0x00010f95

00010fc0 <Gpio::ValidPortCheck()>:

  // Checks if the selected gpio port is valid for external interrupts.
  bool ValidPortCheck()
   10fc0:	b530      	push	{r4, r5, lr}
   10fc2:	b087      	sub	sp, #28
   10fc4:	4675      	mov	r5, lr
   10fc6:	9003      	str	r0, [sp, #12]
   10fc8:	462b      	mov	r3, r5
   10fca:	4619      	mov	r1, r3
   10fcc:	4817      	ldr	r0, [pc, #92]	; (1102c <Gpio::ValidPortCheck()+0x6c>)
   10fce:	f004 f817 	bl	15000 <__cyg_profile_func_enter>
  {
    bool is_valid = (interupt_port_ <= 1);
   10fd2:	9b03      	ldr	r3, [sp, #12]
   10fd4:	791b      	ldrb	r3, [r3, #4]
   10fd6:	2b01      	cmp	r3, #1
   10fd8:	bf94      	ite	ls
   10fda:	2301      	movls	r3, #1
   10fdc:	2300      	movhi	r3, #0
   10fde:	b2db      	uxtb	r3, r3
   10fe0:	f88d 3017 	strb.w	r3, [sp, #23]
    SJ2_ASSERT_WARNING(is_valid,
   10fe4:	f89d 3017 	ldrb.w	r3, [sp, #23]
   10fe8:	f083 0301 	eor.w	r3, r3, #1
   10fec:	b2db      	uxtb	r3, r3
   10fee:	2b00      	cmp	r3, #0
   10ff0:	d010      	beq.n	11014 <Gpio::ValidPortCheck()+0x54>
   10ff2:	9b03      	ldr	r3, [sp, #12]
   10ff4:	689a      	ldr	r2, [r3, #8]
   10ff6:	9b03      	ldr	r3, [sp, #12]
   10ff8:	689b      	ldr	r3, [r3, #8]
   10ffa:	681b      	ldr	r3, [r3, #0]
   10ffc:	332c      	adds	r3, #44	; 0x2c
   10ffe:	681b      	ldr	r3, [r3, #0]
   11000:	4610      	mov	r0, r2
   11002:	4798      	blx	r3
   11004:	4603      	mov	r3, r0
   11006:	9300      	str	r3, [sp, #0]
   11008:	23a6      	movs	r3, #166	; 0xa6
   1100a:	4a09      	ldr	r2, [pc, #36]	; (11030 <Gpio::ValidPortCheck()+0x70>)
   1100c:	4909      	ldr	r1, [pc, #36]	; (11034 <Gpio::ValidPortCheck()+0x74>)
   1100e:	480a      	ldr	r0, [pc, #40]	; (11038 <Gpio::ValidPortCheck()+0x78>)
   11010:	f005 fa72 	bl	164f8 <printf>
                       "Port %d cannot be used for External Interrupts. Need "
                       "to use GPIO on Port 0 or 2.",
                       pin_->GetPort());
    return is_valid;
   11014:	f89d 4017 	ldrb.w	r4, [sp, #23]
   11018:	462b      	mov	r3, r5
   1101a:	4619      	mov	r1, r3
   1101c:	4803      	ldr	r0, [pc, #12]	; (1102c <Gpio::ValidPortCheck()+0x6c>)
   1101e:	f004 f803 	bl	15028 <__cyg_profile_func_exit>
   11022:	4623      	mov	r3, r4
  }
   11024:	4618      	mov	r0, r3
   11026:	b007      	add	sp, #28
   11028:	bd30      	pop	{r4, r5, pc}
   1102a:	bf00      	nop
   1102c:	00010fc1 	.word	0x00010fc1
   11030:	00018a50 	.word	0x00018a50
   11034:	000185c4 	.word	0x000185c4
   11038:	000180e0 	.word	0x000180e0

0001103c <Gpio::SetInterruptRoutine(void (*)())>:

  // Assigns the developer's ISR function to the port/pin gpio instance.
  void SetInterruptRoutine(IsrPointer function) override
   1103c:	b570      	push	{r4, r5, r6, lr}
   1103e:	b082      	sub	sp, #8
   11040:	4676      	mov	r6, lr
   11042:	9001      	str	r0, [sp, #4]
   11044:	9100      	str	r1, [sp, #0]
   11046:	4633      	mov	r3, r6
   11048:	4619      	mov	r1, r3
   1104a:	4811      	ldr	r0, [pc, #68]	; (11090 <Gpio::SetInterruptRoutine(void (*)())+0x54>)
   1104c:	f003 ffd8 	bl	15000 <__cyg_profile_func_enter>
  {
    ValidPortCheck();
   11050:	9801      	ldr	r0, [sp, #4]
   11052:	f7ff ffb5 	bl	10fc0 <Gpio::ValidPortCheck()>
    interrupthandlers[interupt_port_][pin_->GetPin()] = function;
   11056:	9c00      	ldr	r4, [sp, #0]
   11058:	9b01      	ldr	r3, [sp, #4]
   1105a:	791b      	ldrb	r3, [r3, #4]
   1105c:	461d      	mov	r5, r3
   1105e:	9b01      	ldr	r3, [sp, #4]
   11060:	689a      	ldr	r2, [r3, #8]
   11062:	9b01      	ldr	r3, [sp, #4]
   11064:	689b      	ldr	r3, [r3, #8]
   11066:	681b      	ldr	r3, [r3, #0]
   11068:	3330      	adds	r3, #48	; 0x30
   1106a:	681b      	ldr	r3, [r3, #0]
   1106c:	4610      	mov	r0, r2
   1106e:	4798      	blx	r3
   11070:	4603      	mov	r3, r0
   11072:	4619      	mov	r1, r3
   11074:	4a07      	ldr	r2, [pc, #28]	; (11094 <Gpio::SetInterruptRoutine(void (*)())+0x58>)
   11076:	016b      	lsls	r3, r5, #5
   11078:	440b      	add	r3, r1
   1107a:	f842 4023 	str.w	r4, [r2, r3, lsl #2]
   1107e:	4633      	mov	r3, r6
   11080:	4619      	mov	r1, r3
   11082:	4803      	ldr	r0, [pc, #12]	; (11090 <Gpio::SetInterruptRoutine(void (*)())+0x54>)
   11084:	f003 ffd0 	bl	15028 <__cyg_profile_func_exit>
  }
   11088:	bf00      	nop
   1108a:	b002      	add	sp, #8
   1108c:	bd70      	pop	{r4, r5, r6, pc}
   1108e:	bf00      	nop
   11090:	0001103d 	.word	0x0001103d
   11094:	10000968 	.word	0x10000968

00011098 <Gpio::ClearInterruptRoutine()>:

  // Clears the developers ISR function from the port/pin gio instance.
  void ClearInterruptRoutine() override
   11098:	b530      	push	{r4, r5, lr}
   1109a:	b083      	sub	sp, #12
   1109c:	4675      	mov	r5, lr
   1109e:	9001      	str	r0, [sp, #4]
   110a0:	462b      	mov	r3, r5
   110a2:	4619      	mov	r1, r3
   110a4:	480f      	ldr	r0, [pc, #60]	; (110e4 <Gpio::ClearInterruptRoutine()+0x4c>)
   110a6:	f003 ffab 	bl	15000 <__cyg_profile_func_enter>
  {
    interrupthandlers[interupt_port_][pin_->GetPin()] = nullptr;
   110aa:	9b01      	ldr	r3, [sp, #4]
   110ac:	791b      	ldrb	r3, [r3, #4]
   110ae:	461c      	mov	r4, r3
   110b0:	9b01      	ldr	r3, [sp, #4]
   110b2:	689a      	ldr	r2, [r3, #8]
   110b4:	9b01      	ldr	r3, [sp, #4]
   110b6:	689b      	ldr	r3, [r3, #8]
   110b8:	681b      	ldr	r3, [r3, #0]
   110ba:	3330      	adds	r3, #48	; 0x30
   110bc:	681b      	ldr	r3, [r3, #0]
   110be:	4610      	mov	r0, r2
   110c0:	4798      	blx	r3
   110c2:	4603      	mov	r3, r0
   110c4:	4619      	mov	r1, r3
   110c6:	4a08      	ldr	r2, [pc, #32]	; (110e8 <Gpio::ClearInterruptRoutine()+0x50>)
   110c8:	0163      	lsls	r3, r4, #5
   110ca:	440b      	add	r3, r1
   110cc:	2100      	movs	r1, #0
   110ce:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
   110d2:	462b      	mov	r3, r5
   110d4:	4619      	mov	r1, r3
   110d6:	4803      	ldr	r0, [pc, #12]	; (110e4 <Gpio::ClearInterruptRoutine()+0x4c>)
   110d8:	f003 ffa6 	bl	15028 <__cyg_profile_func_exit>
  }
   110dc:	bf00      	nop
   110de:	b003      	add	sp, #12
   110e0:	bd30      	pop	{r4, r5, pc}
   110e2:	bf00      	nop
   110e4:	00011099 	.word	0x00011099
   110e8:	10000968 	.word	0x10000968

000110ec <unsigned char util::Value<GpioInterface::Edge, unsigned char>(GpioInterface::Edge)>:
//
// @param enum_type_value variable you would like to get the value of.
// @return the value of the enum class type variable of with the underlying
//         type of the enum class.
template <typename Enum, typename Type = typename std::underlying_type_t<Enum>>
constexpr Type Value(Enum enum_type_value)
   110ec:	b530      	push	{r4, r5, lr}
   110ee:	b083      	sub	sp, #12
   110f0:	4675      	mov	r5, lr
   110f2:	4603      	mov	r3, r0
   110f4:	f88d 3007 	strb.w	r3, [sp, #7]
   110f8:	462b      	mov	r3, r5
   110fa:	4619      	mov	r1, r3
   110fc:	4806      	ldr	r0, [pc, #24]	; (11118 <unsigned char util::Value<GpioInterface::Edge, unsigned char>(GpioInterface::Edge)+0x2c>)
   110fe:	f003 ff7f 	bl	15000 <__cyg_profile_func_enter>
{
  return static_cast<Type>(enum_type_value);
   11102:	f89d 4007 	ldrb.w	r4, [sp, #7]
   11106:	462b      	mov	r3, r5
   11108:	4619      	mov	r1, r3
   1110a:	4803      	ldr	r0, [pc, #12]	; (11118 <unsigned char util::Value<GpioInterface::Edge, unsigned char>(GpioInterface::Edge)+0x2c>)
   1110c:	f003 ff8c 	bl	15028 <__cyg_profile_func_exit>
   11110:	4623      	mov	r3, r4
}
   11112:	4618      	mov	r0, r3
   11114:	b003      	add	sp, #12
   11116:	bd30      	pop	{r4, r5, pc}
   11118:	000110ed 	.word	0x000110ed

0001111c <Gpio::SetInterruptEdge(GpioInterface::Edge)>:

  // Sets the selected edge that the gpio interrupt will be triggered on.
  void SetInterruptEdge(Edge edge) override
   1111c:	b510      	push	{r4, lr}
   1111e:	b084      	sub	sp, #16
   11120:	4674      	mov	r4, lr
   11122:	9003      	str	r0, [sp, #12]
   11124:	460b      	mov	r3, r1
   11126:	f88d 300b 	strb.w	r3, [sp, #11]
   1112a:	4623      	mov	r3, r4
   1112c:	4619      	mov	r1, r3
   1112e:	4819      	ldr	r0, [pc, #100]	; (11194 <Gpio::SetInterruptEdge(GpioInterface::Edge)+0x78>)
   11130:	f003 ff66 	bl	15000 <__cyg_profile_func_enter>
  {
    ValidPortCheck();
   11134:	9803      	ldr	r0, [sp, #12]
   11136:	f7ff ff43 	bl	10fc0 <Gpio::ValidPortCheck()>
    switch (edge)
   1113a:	f89d 300b 	ldrb.w	r3, [sp, #11]
   1113e:	2b01      	cmp	r3, #1
   11140:	d008      	beq.n	11154 <Gpio::SetInterruptEdge(GpioInterface::Edge)+0x38>
   11142:	2b01      	cmp	r3, #1
   11144:	d302      	bcc.n	1114c <Gpio::SetInterruptEdge(GpioInterface::Edge)+0x30>
   11146:	2b02      	cmp	r3, #2
   11148:	d008      	beq.n	1115c <Gpio::SetInterruptEdge(GpioInterface::Edge)+0x40>
   1114a:	e00e      	b.n	1116a <Gpio::SetInterruptEdge(GpioInterface::Edge)+0x4e>
    {
      case Edge::kEdgeRising:
      {
        SetEdgeRising();
   1114c:	9803      	ldr	r0, [sp, #12]
   1114e:	f000 f8b1 	bl	112b4 <Gpio::SetEdgeRising()>
        break;
   11152:	e017      	b.n	11184 <Gpio::SetInterruptEdge(GpioInterface::Edge)+0x68>
      }
      case Edge::kEdgeFalling:
      {
        SetEdgeFalling();
   11154:	9803      	ldr	r0, [sp, #12]
   11156:	f000 f8eb 	bl	11330 <Gpio::SetEdgeFalling()>
        break;
   1115a:	e013      	b.n	11184 <Gpio::SetInterruptEdge(GpioInterface::Edge)+0x68>
      }
      case Edge::kEdgeBoth:
      {
        SetEdgeRising();
   1115c:	9803      	ldr	r0, [sp, #12]
   1115e:	f000 f8a9 	bl	112b4 <Gpio::SetEdgeRising()>
        SetEdgeFalling();
   11162:	9803      	ldr	r0, [sp, #12]
   11164:	f000 f8e4 	bl	11330 <Gpio::SetEdgeFalling()>
        break;
   11168:	e00c      	b.n	11184 <Gpio::SetInterruptEdge(GpioInterface::Edge)+0x68>
      }
      default:
      {
        LOG_WARNING(
   1116a:	f89d 300b 	ldrb.w	r3, [sp, #11]
   1116e:	4618      	mov	r0, r3
   11170:	f7ff ffbc 	bl	110ec <unsigned char util::Value<GpioInterface::Edge, unsigned char>(GpioInterface::Edge)>
   11174:	4603      	mov	r3, r0
   11176:	9300      	str	r3, [sp, #0]
   11178:	23d2      	movs	r3, #210	; 0xd2
   1117a:	4a07      	ldr	r2, [pc, #28]	; (11198 <Gpio::SetInterruptEdge(GpioInterface::Edge)+0x7c>)
   1117c:	4907      	ldr	r1, [pc, #28]	; (1119c <Gpio::SetInterruptEdge(GpioInterface::Edge)+0x80>)
   1117e:	4808      	ldr	r0, [pc, #32]	; (111a0 <Gpio::SetInterruptEdge(GpioInterface::Edge)+0x84>)
   11180:	f005 f9ba 	bl	164f8 <printf>
   11184:	4623      	mov	r3, r4
   11186:	4619      	mov	r1, r3
   11188:	4802      	ldr	r0, [pc, #8]	; (11194 <Gpio::SetInterruptEdge(GpioInterface::Edge)+0x78>)
   1118a:	f003 ff4d 	bl	15028 <__cyg_profile_func_exit>
            "Edge %d cannot be used for External Interrupts."
            "Need to use a rising, falling, or both configuration.",
            util::Value(edge));
      }
    }
  }
   1118e:	bf00      	nop
   11190:	b004      	add	sp, #16
   11192:	bd10      	pop	{r4, pc}
   11194:	0001111d 	.word	0x0001111d
   11198:	00018a6c 	.word	0x00018a6c
   1119c:	000185d0 	.word	0x000185d0
   111a0:	00018170 	.word	0x00018170

000111a4 <Gpio::ClearInterruptEdge(GpioInterface::Edge)>:

  // Clears the seleted edge of the gpio interrupt from being triggered.
  void ClearInterruptEdge(Edge edge) override
   111a4:	b510      	push	{r4, lr}
   111a6:	b084      	sub	sp, #16
   111a8:	4674      	mov	r4, lr
   111aa:	9003      	str	r0, [sp, #12]
   111ac:	460b      	mov	r3, r1
   111ae:	f88d 300b 	strb.w	r3, [sp, #11]
   111b2:	4623      	mov	r3, r4
   111b4:	4619      	mov	r1, r3
   111b6:	4819      	ldr	r0, [pc, #100]	; (1121c <Gpio::ClearInterruptEdge(GpioInterface::Edge)+0x78>)
   111b8:	f003 ff22 	bl	15000 <__cyg_profile_func_enter>
  {
    ValidPortCheck();
   111bc:	9803      	ldr	r0, [sp, #12]
   111be:	f7ff feff 	bl	10fc0 <Gpio::ValidPortCheck()>
    switch (edge)
   111c2:	f89d 300b 	ldrb.w	r3, [sp, #11]
   111c6:	2b01      	cmp	r3, #1
   111c8:	d008      	beq.n	111dc <Gpio::ClearInterruptEdge(GpioInterface::Edge)+0x38>
   111ca:	2b01      	cmp	r3, #1
   111cc:	d302      	bcc.n	111d4 <Gpio::ClearInterruptEdge(GpioInterface::Edge)+0x30>
   111ce:	2b02      	cmp	r3, #2
   111d0:	d008      	beq.n	111e4 <Gpio::ClearInterruptEdge(GpioInterface::Edge)+0x40>
   111d2:	e00e      	b.n	111f2 <Gpio::ClearInterruptEdge(GpioInterface::Edge)+0x4e>
    {
      case Edge::kEdgeRising:
      {
        ClearEdgeRising();
   111d4:	9803      	ldr	r0, [sp, #12]
   111d6:	f000 f8e9 	bl	113ac <Gpio::ClearEdgeRising()>
        break;
   111da:	e017      	b.n	1120c <Gpio::ClearInterruptEdge(GpioInterface::Edge)+0x68>
      }
      case Edge::kEdgeFalling:
      {
        ClearEdgeFalling();
   111dc:	9803      	ldr	r0, [sp, #12]
   111de:	f000 f923 	bl	11428 <Gpio::ClearEdgeFalling()>
        break;
   111e2:	e013      	b.n	1120c <Gpio::ClearInterruptEdge(GpioInterface::Edge)+0x68>
      }
      case Edge::kEdgeBoth:
      {
        ClearEdgeRising();
   111e4:	9803      	ldr	r0, [sp, #12]
   111e6:	f000 f8e1 	bl	113ac <Gpio::ClearEdgeRising()>
        ClearEdgeFalling();
   111ea:	9803      	ldr	r0, [sp, #12]
   111ec:	f000 f91c 	bl	11428 <Gpio::ClearEdgeFalling()>
        break;
   111f0:	e00c      	b.n	1120c <Gpio::ClearInterruptEdge(GpioInterface::Edge)+0x68>
      }
      default:
      {
        LOG_WARNING(
   111f2:	f89d 300b 	ldrb.w	r3, [sp, #11]
   111f6:	4618      	mov	r0, r3
   111f8:	f7ff ff78 	bl	110ec <unsigned char util::Value<GpioInterface::Edge, unsigned char>(GpioInterface::Edge)>
   111fc:	4603      	mov	r3, r0
   111fe:	9300      	str	r3, [sp, #0]
   11200:	23f2      	movs	r3, #242	; 0xf2
   11202:	4a07      	ldr	r2, [pc, #28]	; (11220 <Gpio::ClearInterruptEdge(GpioInterface::Edge)+0x7c>)
   11204:	4907      	ldr	r1, [pc, #28]	; (11224 <Gpio::ClearInterruptEdge(GpioInterface::Edge)+0x80>)
   11206:	4808      	ldr	r0, [pc, #32]	; (11228 <Gpio::ClearInterruptEdge(GpioInterface::Edge)+0x84>)
   11208:	f005 f976 	bl	164f8 <printf>
   1120c:	4623      	mov	r3, r4
   1120e:	4619      	mov	r1, r3
   11210:	4802      	ldr	r0, [pc, #8]	; (1121c <Gpio::ClearInterruptEdge(GpioInterface::Edge)+0x78>)
   11212:	f003 ff09 	bl	15028 <__cyg_profile_func_exit>
            "Edge %d cannot be used for External Interrupts."
            "Need to use a rising, falling, or both configuration.",
           util::Value(edge));
      }
    }
  }
   11216:	bf00      	nop
   11218:	b004      	add	sp, #16
   1121a:	bd10      	pop	{r4, pc}
   1121c:	000111a5 	.word	0x000111a5
   11220:	00018a14 	.word	0x00018a14
   11224:	000185dc 	.word	0x000185dc
   11228:	00018170 	.word	0x00018170

0001122c <Gpio::AttachInterrupt(void (*)(), GpioInterface::Edge)>:

  // Assign the developer's ISR and sets the selected edge that the gpio
  // interrupt will be triggered on.
  void AttachInterrupt(IsrPointer function, Edge edge) override
   1122c:	b510      	push	{r4, lr}
   1122e:	b084      	sub	sp, #16
   11230:	4674      	mov	r4, lr
   11232:	9003      	str	r0, [sp, #12]
   11234:	9102      	str	r1, [sp, #8]
   11236:	4613      	mov	r3, r2
   11238:	f88d 3007 	strb.w	r3, [sp, #7]
   1123c:	4623      	mov	r3, r4
   1123e:	4619      	mov	r1, r3
   11240:	480b      	ldr	r0, [pc, #44]	; (11270 <Gpio::AttachInterrupt(void (*)(), GpioInterface::Edge)+0x44>)
   11242:	f003 fedd 	bl	15000 <__cyg_profile_func_enter>
  {
    ValidPortCheck();
   11246:	9803      	ldr	r0, [sp, #12]
   11248:	f7ff feba 	bl	10fc0 <Gpio::ValidPortCheck()>
    SetInterruptRoutine(function);
   1124c:	9902      	ldr	r1, [sp, #8]
   1124e:	9803      	ldr	r0, [sp, #12]
   11250:	f7ff fef4 	bl	1103c <Gpio::SetInterruptRoutine(void (*)())>
    SetInterruptEdge(edge);
   11254:	f89d 3007 	ldrb.w	r3, [sp, #7]
   11258:	4619      	mov	r1, r3
   1125a:	9803      	ldr	r0, [sp, #12]
   1125c:	f7ff ff5e 	bl	1111c <Gpio::SetInterruptEdge(GpioInterface::Edge)>
   11260:	4623      	mov	r3, r4
   11262:	4619      	mov	r1, r3
   11264:	4802      	ldr	r0, [pc, #8]	; (11270 <Gpio::AttachInterrupt(void (*)(), GpioInterface::Edge)+0x44>)
   11266:	f003 fedf 	bl	15028 <__cyg_profile_func_exit>
  }
   1126a:	bf00      	nop
   1126c:	b004      	add	sp, #16
   1126e:	bd10      	pop	{r4, pc}
   11270:	0001122d 	.word	0x0001122d

00011274 <Gpio::DetachInterrupt()>:

  // Removes the developer's ISR and clears the selected edge of the gpio
  // interrupt from being triggered.
  void DetachInterrupt() override
   11274:	b510      	push	{r4, lr}
   11276:	b082      	sub	sp, #8
   11278:	4674      	mov	r4, lr
   1127a:	9001      	str	r0, [sp, #4]
   1127c:	4623      	mov	r3, r4
   1127e:	4619      	mov	r1, r3
   11280:	480b      	ldr	r0, [pc, #44]	; (112b0 <Gpio::DetachInterrupt()+0x3c>)
   11282:	f003 febd 	bl	15000 <__cyg_profile_func_enter>
  {
    ValidPortCheck();
   11286:	9801      	ldr	r0, [sp, #4]
   11288:	f7ff fe9a 	bl	10fc0 <Gpio::ValidPortCheck()>
    ClearInterruptRoutine();
   1128c:	9801      	ldr	r0, [sp, #4]
   1128e:	f7ff ff03 	bl	11098 <Gpio::ClearInterruptRoutine()>
    ClearEdgeRising();
   11292:	9801      	ldr	r0, [sp, #4]
   11294:	f000 f88a 	bl	113ac <Gpio::ClearEdgeRising()>
    ClearEdgeFalling();
   11298:	9801      	ldr	r0, [sp, #4]
   1129a:	f000 f8c5 	bl	11428 <Gpio::ClearEdgeFalling()>
   1129e:	4623      	mov	r3, r4
   112a0:	4619      	mov	r1, r3
   112a2:	4803      	ldr	r0, [pc, #12]	; (112b0 <Gpio::DetachInterrupt()+0x3c>)
   112a4:	f003 fec0 	bl	15028 <__cyg_profile_func_exit>
  }
   112a8:	bf00      	nop
   112aa:	b002      	add	sp, #8
   112ac:	bd10      	pop	{r4, pc}
   112ae:	bf00      	nop
   112b0:	00011275 	.word	0x00011275

000112b4 <Gpio::SetEdgeRising()>:
    *interrupt[triggered_port].clear |= (1 << triggered_pin);
  }

 private:
  // Sets the gpio interrupt to trigger on a rising edge.
  void SetEdgeRising()
   112b4:	b530      	push	{r4, r5, lr}
   112b6:	b083      	sub	sp, #12
   112b8:	4675      	mov	r5, lr
   112ba:	9001      	str	r0, [sp, #4]
   112bc:	462b      	mov	r3, r5
   112be:	4619      	mov	r1, r3
   112c0:	4819      	ldr	r0, [pc, #100]	; (11328 <Gpio::SetEdgeRising()+0x74>)
   112c2:	f003 fe9d 	bl	15000 <__cyg_profile_func_enter>
  {
    *interrupt[interupt_port_].enable_rising_edge |= (1 << pin_->GetPin());
   112c6:	9b01      	ldr	r3, [sp, #4]
   112c8:	689a      	ldr	r2, [r3, #8]
   112ca:	9b01      	ldr	r3, [sp, #4]
   112cc:	689b      	ldr	r3, [r3, #8]
   112ce:	681b      	ldr	r3, [r3, #0]
   112d0:	3330      	adds	r3, #48	; 0x30
   112d2:	681b      	ldr	r3, [r3, #0]
   112d4:	4610      	mov	r0, r2
   112d6:	4798      	blx	r3
   112d8:	4603      	mov	r3, r0
   112da:	461a      	mov	r2, r3
   112dc:	2301      	movs	r3, #1
   112de:	fa03 f002 	lsl.w	r0, r3, r2
   112e2:	9b01      	ldr	r3, [sp, #4]
   112e4:	791b      	ldrb	r3, [r3, #4]
   112e6:	4619      	mov	r1, r3
   112e8:	4a10      	ldr	r2, [pc, #64]	; (1132c <Gpio::SetEdgeRising()+0x78>)
   112ea:	460b      	mov	r3, r1
   112ec:	009b      	lsls	r3, r3, #2
   112ee:	440b      	add	r3, r1
   112f0:	009b      	lsls	r3, r3, #2
   112f2:	4413      	add	r3, r2
   112f4:	330c      	adds	r3, #12
   112f6:	681b      	ldr	r3, [r3, #0]
   112f8:	681a      	ldr	r2, [r3, #0]
   112fa:	4604      	mov	r4, r0
   112fc:	9b01      	ldr	r3, [sp, #4]
   112fe:	791b      	ldrb	r3, [r3, #4]
   11300:	4618      	mov	r0, r3
   11302:	490a      	ldr	r1, [pc, #40]	; (1132c <Gpio::SetEdgeRising()+0x78>)
   11304:	4603      	mov	r3, r0
   11306:	009b      	lsls	r3, r3, #2
   11308:	4403      	add	r3, r0
   1130a:	009b      	lsls	r3, r3, #2
   1130c:	440b      	add	r3, r1
   1130e:	330c      	adds	r3, #12
   11310:	681b      	ldr	r3, [r3, #0]
   11312:	4322      	orrs	r2, r4
   11314:	601a      	str	r2, [r3, #0]
   11316:	462b      	mov	r3, r5
   11318:	4619      	mov	r1, r3
   1131a:	4803      	ldr	r0, [pc, #12]	; (11328 <Gpio::SetEdgeRising()+0x74>)
   1131c:	f003 fe84 	bl	15028 <__cyg_profile_func_exit>
  }
   11320:	bf00      	nop
   11322:	b003      	add	sp, #12
   11324:	bd30      	pop	{r4, r5, pc}
   11326:	bf00      	nop
   11328:	000112b5 	.word	0x000112b5
   1132c:	10000020 	.word	0x10000020

00011330 <Gpio::SetEdgeFalling()>:

  // Sets the gpio interrupt to trigger on a falling edge.
  void SetEdgeFalling()
   11330:	b530      	push	{r4, r5, lr}
   11332:	b083      	sub	sp, #12
   11334:	4675      	mov	r5, lr
   11336:	9001      	str	r0, [sp, #4]
   11338:	462b      	mov	r3, r5
   1133a:	4619      	mov	r1, r3
   1133c:	4819      	ldr	r0, [pc, #100]	; (113a4 <Gpio::SetEdgeFalling()+0x74>)
   1133e:	f003 fe5f 	bl	15000 <__cyg_profile_func_enter>
  {
    *interrupt[interupt_port_].enable_falling_edge |= (1 << pin_->GetPin());
   11342:	9b01      	ldr	r3, [sp, #4]
   11344:	689a      	ldr	r2, [r3, #8]
   11346:	9b01      	ldr	r3, [sp, #4]
   11348:	689b      	ldr	r3, [r3, #8]
   1134a:	681b      	ldr	r3, [r3, #0]
   1134c:	3330      	adds	r3, #48	; 0x30
   1134e:	681b      	ldr	r3, [r3, #0]
   11350:	4610      	mov	r0, r2
   11352:	4798      	blx	r3
   11354:	4603      	mov	r3, r0
   11356:	461a      	mov	r2, r3
   11358:	2301      	movs	r3, #1
   1135a:	fa03 f002 	lsl.w	r0, r3, r2
   1135e:	9b01      	ldr	r3, [sp, #4]
   11360:	791b      	ldrb	r3, [r3, #4]
   11362:	4619      	mov	r1, r3
   11364:	4a10      	ldr	r2, [pc, #64]	; (113a8 <Gpio::SetEdgeFalling()+0x78>)
   11366:	460b      	mov	r3, r1
   11368:	009b      	lsls	r3, r3, #2
   1136a:	440b      	add	r3, r1
   1136c:	009b      	lsls	r3, r3, #2
   1136e:	4413      	add	r3, r2
   11370:	3310      	adds	r3, #16
   11372:	681b      	ldr	r3, [r3, #0]
   11374:	681a      	ldr	r2, [r3, #0]
   11376:	4604      	mov	r4, r0
   11378:	9b01      	ldr	r3, [sp, #4]
   1137a:	791b      	ldrb	r3, [r3, #4]
   1137c:	4618      	mov	r0, r3
   1137e:	490a      	ldr	r1, [pc, #40]	; (113a8 <Gpio::SetEdgeFalling()+0x78>)
   11380:	4603      	mov	r3, r0
   11382:	009b      	lsls	r3, r3, #2
   11384:	4403      	add	r3, r0
   11386:	009b      	lsls	r3, r3, #2
   11388:	440b      	add	r3, r1
   1138a:	3310      	adds	r3, #16
   1138c:	681b      	ldr	r3, [r3, #0]
   1138e:	4322      	orrs	r2, r4
   11390:	601a      	str	r2, [r3, #0]
   11392:	462b      	mov	r3, r5
   11394:	4619      	mov	r1, r3
   11396:	4803      	ldr	r0, [pc, #12]	; (113a4 <Gpio::SetEdgeFalling()+0x74>)
   11398:	f003 fe46 	bl	15028 <__cyg_profile_func_exit>
  }
   1139c:	bf00      	nop
   1139e:	b003      	add	sp, #12
   113a0:	bd30      	pop	{r4, r5, pc}
   113a2:	bf00      	nop
   113a4:	00011331 	.word	0x00011331
   113a8:	10000020 	.word	0x10000020

000113ac <Gpio::ClearEdgeRising()>:

  // Clears the gpio interrupt to no longer trigger on a rising edge.
  void ClearEdgeRising()
   113ac:	b530      	push	{r4, r5, lr}
   113ae:	b083      	sub	sp, #12
   113b0:	4675      	mov	r5, lr
   113b2:	9001      	str	r0, [sp, #4]
   113b4:	462b      	mov	r3, r5
   113b6:	4619      	mov	r1, r3
   113b8:	4819      	ldr	r0, [pc, #100]	; (11420 <Gpio::ClearEdgeRising()+0x74>)
   113ba:	f003 fe21 	bl	15000 <__cyg_profile_func_enter>
  {
    *interrupt[interupt_port_].enable_rising_edge &= ~(1 << pin_->GetPin());
   113be:	9b01      	ldr	r3, [sp, #4]
   113c0:	689a      	ldr	r2, [r3, #8]
   113c2:	9b01      	ldr	r3, [sp, #4]
   113c4:	689b      	ldr	r3, [r3, #8]
   113c6:	681b      	ldr	r3, [r3, #0]
   113c8:	3330      	adds	r3, #48	; 0x30
   113ca:	681b      	ldr	r3, [r3, #0]
   113cc:	4610      	mov	r0, r2
   113ce:	4798      	blx	r3
   113d0:	4603      	mov	r3, r0
   113d2:	461a      	mov	r2, r3
   113d4:	2301      	movs	r3, #1
   113d6:	4093      	lsls	r3, r2
   113d8:	43d8      	mvns	r0, r3
   113da:	9b01      	ldr	r3, [sp, #4]
   113dc:	791b      	ldrb	r3, [r3, #4]
   113de:	4619      	mov	r1, r3
   113e0:	4a10      	ldr	r2, [pc, #64]	; (11424 <Gpio::ClearEdgeRising()+0x78>)
   113e2:	460b      	mov	r3, r1
   113e4:	009b      	lsls	r3, r3, #2
   113e6:	440b      	add	r3, r1
   113e8:	009b      	lsls	r3, r3, #2
   113ea:	4413      	add	r3, r2
   113ec:	330c      	adds	r3, #12
   113ee:	681b      	ldr	r3, [r3, #0]
   113f0:	681a      	ldr	r2, [r3, #0]
   113f2:	4604      	mov	r4, r0
   113f4:	9b01      	ldr	r3, [sp, #4]
   113f6:	791b      	ldrb	r3, [r3, #4]
   113f8:	4618      	mov	r0, r3
   113fa:	490a      	ldr	r1, [pc, #40]	; (11424 <Gpio::ClearEdgeRising()+0x78>)
   113fc:	4603      	mov	r3, r0
   113fe:	009b      	lsls	r3, r3, #2
   11400:	4403      	add	r3, r0
   11402:	009b      	lsls	r3, r3, #2
   11404:	440b      	add	r3, r1
   11406:	330c      	adds	r3, #12
   11408:	681b      	ldr	r3, [r3, #0]
   1140a:	4022      	ands	r2, r4
   1140c:	601a      	str	r2, [r3, #0]
   1140e:	462b      	mov	r3, r5
   11410:	4619      	mov	r1, r3
   11412:	4803      	ldr	r0, [pc, #12]	; (11420 <Gpio::ClearEdgeRising()+0x74>)
   11414:	f003 fe08 	bl	15028 <__cyg_profile_func_exit>
  }
   11418:	bf00      	nop
   1141a:	b003      	add	sp, #12
   1141c:	bd30      	pop	{r4, r5, pc}
   1141e:	bf00      	nop
   11420:	000113ad 	.word	0x000113ad
   11424:	10000020 	.word	0x10000020

00011428 <Gpio::ClearEdgeFalling()>:

  // Clears the gpio interrupt to no longer trigger on a falling edge.
  void ClearEdgeFalling()
   11428:	b530      	push	{r4, r5, lr}
   1142a:	b083      	sub	sp, #12
   1142c:	4675      	mov	r5, lr
   1142e:	9001      	str	r0, [sp, #4]
   11430:	462b      	mov	r3, r5
   11432:	4619      	mov	r1, r3
   11434:	4819      	ldr	r0, [pc, #100]	; (1149c <Gpio::ClearEdgeFalling()+0x74>)
   11436:	f003 fde3 	bl	15000 <__cyg_profile_func_enter>
  {
    *interrupt[interupt_port_].enable_falling_edge &= ~(1 << pin_->GetPin());
   1143a:	9b01      	ldr	r3, [sp, #4]
   1143c:	689a      	ldr	r2, [r3, #8]
   1143e:	9b01      	ldr	r3, [sp, #4]
   11440:	689b      	ldr	r3, [r3, #8]
   11442:	681b      	ldr	r3, [r3, #0]
   11444:	3330      	adds	r3, #48	; 0x30
   11446:	681b      	ldr	r3, [r3, #0]
   11448:	4610      	mov	r0, r2
   1144a:	4798      	blx	r3
   1144c:	4603      	mov	r3, r0
   1144e:	461a      	mov	r2, r3
   11450:	2301      	movs	r3, #1
   11452:	4093      	lsls	r3, r2
   11454:	43d8      	mvns	r0, r3
   11456:	9b01      	ldr	r3, [sp, #4]
   11458:	791b      	ldrb	r3, [r3, #4]
   1145a:	4619      	mov	r1, r3
   1145c:	4a10      	ldr	r2, [pc, #64]	; (114a0 <Gpio::ClearEdgeFalling()+0x78>)
   1145e:	460b      	mov	r3, r1
   11460:	009b      	lsls	r3, r3, #2
   11462:	440b      	add	r3, r1
   11464:	009b      	lsls	r3, r3, #2
   11466:	4413      	add	r3, r2
   11468:	3310      	adds	r3, #16
   1146a:	681b      	ldr	r3, [r3, #0]
   1146c:	681a      	ldr	r2, [r3, #0]
   1146e:	4604      	mov	r4, r0
   11470:	9b01      	ldr	r3, [sp, #4]
   11472:	791b      	ldrb	r3, [r3, #4]
   11474:	4618      	mov	r0, r3
   11476:	490a      	ldr	r1, [pc, #40]	; (114a0 <Gpio::ClearEdgeFalling()+0x78>)
   11478:	4603      	mov	r3, r0
   1147a:	009b      	lsls	r3, r3, #2
   1147c:	4403      	add	r3, r0
   1147e:	009b      	lsls	r3, r3, #2
   11480:	440b      	add	r3, r1
   11482:	3310      	adds	r3, #16
   11484:	681b      	ldr	r3, [r3, #0]
   11486:	4022      	ands	r2, r4
   11488:	601a      	str	r2, [r3, #0]
   1148a:	462b      	mov	r3, r5
   1148c:	4619      	mov	r1, r3
   1148e:	4803      	ldr	r0, [pc, #12]	; (1149c <Gpio::ClearEdgeFalling()+0x74>)
   11490:	f003 fdca 	bl	15028 <__cyg_profile_func_exit>
  }
   11494:	bf00      	nop
   11496:	b003      	add	sp, #12
   11498:	bd30      	pop	{r4, r5, pc}
   1149a:	bf00      	nop
   1149c:	00011429 	.word	0x00011429
   114a0:	10000020 	.word	0x10000020

000114a4 <SystemControllerInterface::SystemControllerInterface()>:
#include "L0_LowLevel/LPC40xx.h"
#include "utility/enum.hpp"
#include "utility/log.hpp"
#include "utility/macros.hpp"

class SystemControllerInterface
   114a4:	b082      	sub	sp, #8
   114a6:	9001      	str	r0, [sp, #4]
   114a8:	4a03      	ldr	r2, [pc, #12]	; (114b8 <SystemControllerInterface::SystemControllerInterface()+0x14>)
   114aa:	9b01      	ldr	r3, [sp, #4]
   114ac:	601a      	str	r2, [r3, #0]
   114ae:	9b01      	ldr	r3, [sp, #4]
   114b0:	4618      	mov	r0, r3
   114b2:	b002      	add	sp, #8
   114b4:	4770      	bx	lr
   114b6:	bf00      	nop
   114b8:	000187b0 	.word	0x000187b0

000114bc <Lpc40xxSystemController::Lpc40xxSystemController()>:
  static constexpr uint32_t kDefaultIRCFrequency    = 12'000'000;
  static constexpr uint32_t kDefaultTimeout         = 1'000;  // ms

  inline static LPC_SC_TypeDef * system_controller = LPC_SC;

  constexpr Lpc40xxSystemController() {}
   114bc:	b500      	push	{lr}
   114be:	b083      	sub	sp, #12
   114c0:	9001      	str	r0, [sp, #4]
   114c2:	9b01      	ldr	r3, [sp, #4]
   114c4:	4618      	mov	r0, r3
   114c6:	f7ff ffed 	bl	114a4 <SystemControllerInterface::SystemControllerInterface()>
   114ca:	4a04      	ldr	r2, [pc, #16]	; (114dc <Lpc40xxSystemController::Lpc40xxSystemController()+0x20>)
   114cc:	9b01      	ldr	r3, [sp, #4]
   114ce:	601a      	str	r2, [r3, #0]
   114d0:	9b01      	ldr	r3, [sp, #4]
   114d2:	4618      	mov	r0, r3
   114d4:	b003      	add	sp, #12
   114d6:	f85d fb04 	ldr.w	pc, [sp], #4
   114da:	bf00      	nop
   114dc:	0001878c 	.word	0x0001878c

000114e0 <Lpc40xxSystemController::SetClockFrequency(unsigned char)>:

  uint32_t SetClockFrequency(uint8_t frequency_in_mhz) override
   114e0:	b500      	push	{lr}
   114e2:	b085      	sub	sp, #20
   114e4:	9001      	str	r0, [sp, #4]
   114e6:	460b      	mov	r3, r1
   114e8:	f88d 3003 	strb.w	r3, [sp, #3]
  {
    uint32_t offset = 0;
   114ec:	2300      	movs	r3, #0
   114ee:	9303      	str	r3, [sp, #12]
    SelectOscillatorSource(OscillatorSource::kIrc);
   114f0:	2100      	movs	r1, #0
   114f2:	9801      	ldr	r0, [sp, #4]
   114f4:	f000 f8ce 	bl	11694 <Lpc40xxSystemController::SelectOscillatorSource(Lpc40xxSystemController::OscillatorSource)>
    if (frequency_in_mhz > 12)
   114f8:	f89d 3003 	ldrb.w	r3, [sp, #3]
   114fc:	2b0c      	cmp	r3, #12
   114fe:	d916      	bls.n	1152e <Lpc40xxSystemController::SetClockFrequency(unsigned char)+0x4e>
    {
      offset = SetMainPll(PllInput::kIrc, frequency_in_mhz);
   11500:	f89d 3003 	ldrb.w	r3, [sp, #3]
   11504:	b29b      	uxth	r3, r3
   11506:	461a      	mov	r2, r3
   11508:	210c      	movs	r1, #12
   1150a:	9801      	ldr	r0, [sp, #4]
   1150c:	f000 f9ac 	bl	11868 <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)>
   11510:	9003      	str	r0, [sp, #12]
      SelectMainClockSource(MainClockSource::kPllClock);
   11512:	f44f 7180 	mov.w	r1, #256	; 0x100
   11516:	9801      	ldr	r0, [sp, #4]
   11518:	f000 f8d6 	bl	116c8 <Lpc40xxSystemController::SelectMainClockSource(Lpc40xxSystemController::MainClockSource)>
      speed_in_hertz = frequency_in_mhz * 1'000'000;
   1151c:	f89d 3003 	ldrb.w	r3, [sp, #3]
   11520:	4a10      	ldr	r2, [pc, #64]	; (11564 <Lpc40xxSystemController::SetClockFrequency(unsigned char)+0x84>)
   11522:	fb02 f303 	mul.w	r3, r2, r3
   11526:	461a      	mov	r2, r3
   11528:	4b0f      	ldr	r3, [pc, #60]	; (11568 <Lpc40xxSystemController::SetClockFrequency(unsigned char)+0x88>)
   1152a:	601a      	str	r2, [r3, #0]
   1152c:	e006      	b.n	1153c <Lpc40xxSystemController::SetClockFrequency(unsigned char)+0x5c>
    }
    else
    {
      SelectMainClockSource(MainClockSource::kBaseClock);
   1152e:	2100      	movs	r1, #0
   11530:	9801      	ldr	r0, [sp, #4]
   11532:	f000 f8c9 	bl	116c8 <Lpc40xxSystemController::SelectMainClockSource(Lpc40xxSystemController::MainClockSource)>
      speed_in_hertz = kDefaultIRCFrequency;
   11536:	4b0c      	ldr	r3, [pc, #48]	; (11568 <Lpc40xxSystemController::SetClockFrequency(unsigned char)+0x88>)
   11538:	4a0c      	ldr	r2, [pc, #48]	; (1156c <Lpc40xxSystemController::SetClockFrequency(unsigned char)+0x8c>)
   1153a:	601a      	str	r2, [r3, #0]
    }
    SetCpuClockDivider(kDivideInputBy1);
   1153c:	2101      	movs	r1, #1
   1153e:	9801      	ldr	r0, [sp, #4]
   11540:	f000 fa4a 	bl	119d8 <Lpc40xxSystemController::SetCpuClockDivider(unsigned char)>
    SetPeripheralClockDivider(kDivideInputBy1);
   11544:	9b01      	ldr	r3, [sp, #4]
   11546:	681b      	ldr	r3, [r3, #0]
   11548:	3304      	adds	r3, #4
   1154a:	681b      	ldr	r3, [r3, #0]
   1154c:	2101      	movs	r1, #1
   1154e:	9801      	ldr	r0, [sp, #4]
   11550:	4798      	blx	r3
    SetEmcClockDivider(EmcDivider::kSameSpeedAsCpu);
   11552:	2100      	movs	r1, #0
   11554:	9801      	ldr	r0, [sp, #4]
   11556:	f000 fa73 	bl	11a40 <Lpc40xxSystemController::SetEmcClockDivider(Lpc40xxSystemController::EmcDivider)>
    return offset;
   1155a:	9b03      	ldr	r3, [sp, #12]
  }
   1155c:	4618      	mov	r0, r3
   1155e:	b005      	add	sp, #20
   11560:	f85d fb04 	ldr.w	pc, [sp], #4
   11564:	000f4240 	.word	0x000f4240
   11568:	1000004c 	.word	0x1000004c
   1156c:	00b71b00 	.word	0x00b71b00

00011570 <Lpc40xxSystemController::SetPeripheralClockDivider(unsigned char)>:

  void SetPeripheralClockDivider(uint8_t peripheral_divider) override
   11570:	b500      	push	{lr}
   11572:	b083      	sub	sp, #12
   11574:	9001      	str	r0, [sp, #4]
   11576:	460b      	mov	r3, r1
   11578:	f88d 3003 	strb.w	r3, [sp, #3]
  {
    SJ2_ASSERT_FATAL(peripheral_divider <= 4, "Divider mustn't exceed 32");
   1157c:	f89d 3003 	ldrb.w	r3, [sp, #3]
   11580:	2b04      	cmp	r3, #4
   11582:	d90d      	bls.n	115a0 <Lpc40xxSystemController::SetPeripheralClockDivider(unsigned char)+0x30>
   11584:	23ae      	movs	r3, #174	; 0xae
   11586:	4a0b      	ldr	r2, [pc, #44]	; (115b4 <Lpc40xxSystemController::SetPeripheralClockDivider(unsigned char)+0x44>)
   11588:	490b      	ldr	r1, [pc, #44]	; (115b8 <Lpc40xxSystemController::SetPeripheralClockDivider(unsigned char)+0x48>)
   1158a:	480c      	ldr	r0, [pc, #48]	; (115bc <Lpc40xxSystemController::SetPeripheralClockDivider(unsigned char)+0x4c>)
   1158c:	f004 ffb4 	bl	164f8 <printf>
   11590:	480b      	ldr	r0, [pc, #44]	; (115c0 <Lpc40xxSystemController::SetPeripheralClockDivider(unsigned char)+0x50>)
   11592:	f003 fd05 	bl	14fa0 <puts>
   11596:	2100      	movs	r1, #0
   11598:	2001      	movs	r0, #1
   1159a:	f7ff fa1b 	bl	109d4 <debug::PrintBacktrace(bool, void*)>
   1159e:	e7fe      	b.n	1159e <Lpc40xxSystemController::SetPeripheralClockDivider(unsigned char)+0x2e>
    system_controller->PCLKSEL = peripheral_divider;
   115a0:	4b08      	ldr	r3, [pc, #32]	; (115c4 <Lpc40xxSystemController::SetPeripheralClockDivider(unsigned char)+0x54>)
   115a2:	681b      	ldr	r3, [r3, #0]
   115a4:	f89d 2003 	ldrb.w	r2, [sp, #3]
   115a8:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
  }
   115ac:	bf00      	nop
   115ae:	b003      	add	sp, #12
   115b0:	f85d fb04 	ldr.w	pc, [sp], #4
   115b4:	000188d4 	.word	0x000188d4
   115b8:	000185e8 	.word	0x000185e8
   115bc:	00018210 	.word	0x00018210
   115c0:	000182b0 	.word	0x000182b0
   115c4:	10000048 	.word	0x10000048

000115c8 <Lpc40xxSystemController::GetPeripheralClockDivider() const>:

  uint32_t GetPeripheralClockDivider() const override
   115c8:	b082      	sub	sp, #8
   115ca:	9001      	str	r0, [sp, #4]
  {
#if defined(HOST_TEST)
    return 1;
#else
    return system_controller->PCLKSEL;
   115cc:	4b03      	ldr	r3, [pc, #12]	; (115dc <Lpc40xxSystemController::GetPeripheralClockDivider() const+0x14>)
   115ce:	681b      	ldr	r3, [r3, #0]
   115d0:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
#endif
  }
   115d4:	4618      	mov	r0, r3
   115d6:	b002      	add	sp, #8
   115d8:	4770      	bx	lr
   115da:	bf00      	nop
   115dc:	10000048 	.word	0x10000048

000115e0 <Lpc40xxSystemController::GetSystemFrequency() const>:

  uint32_t GetSystemFrequency() const override
   115e0:	b082      	sub	sp, #8
   115e2:	9001      	str	r0, [sp, #4]
  {
#if defined(HOST_TEST)
    return config::kSystemClockRate;
#else
    return speed_in_hertz;
   115e4:	4b02      	ldr	r3, [pc, #8]	; (115f0 <Lpc40xxSystemController::GetSystemFrequency() const+0x10>)
   115e6:	681b      	ldr	r3, [r3, #0]
#endif
  }
   115e8:	4618      	mov	r0, r3
   115ea:	b002      	add	sp, #8
   115ec:	4770      	bx	lr
   115ee:	bf00      	nop
   115f0:	1000004c 	.word	0x1000004c

000115f4 <Lpc40xxSystemController::GetPeripheralFrequency() const>:

  uint32_t GetPeripheralFrequency() const override
   115f4:	b500      	push	{lr}
   115f6:	b085      	sub	sp, #20
   115f8:	9001      	str	r0, [sp, #4]
  {
    uint32_t peripheral_clock_divider = GetPeripheralClockDivider();
   115fa:	9b01      	ldr	r3, [sp, #4]
   115fc:	681b      	ldr	r3, [r3, #0]
   115fe:	3308      	adds	r3, #8
   11600:	681b      	ldr	r3, [r3, #0]
   11602:	9801      	ldr	r0, [sp, #4]
   11604:	4798      	blx	r3
   11606:	9002      	str	r0, [sp, #8]
    uint32_t result = 0;  // return 0 if peripheral_clock_divider == 0
   11608:	2300      	movs	r3, #0
   1160a:	9303      	str	r3, [sp, #12]
    if (peripheral_clock_divider != 0)
   1160c:	9b02      	ldr	r3, [sp, #8]
   1160e:	2b00      	cmp	r3, #0
   11610:	d00a      	beq.n	11628 <Lpc40xxSystemController::GetPeripheralFrequency() const+0x34>
    {
      result = GetSystemFrequency() / peripheral_clock_divider;
   11612:	9b01      	ldr	r3, [sp, #4]
   11614:	681b      	ldr	r3, [r3, #0]
   11616:	330c      	adds	r3, #12
   11618:	681b      	ldr	r3, [r3, #0]
   1161a:	9801      	ldr	r0, [sp, #4]
   1161c:	4798      	blx	r3
   1161e:	4602      	mov	r2, r0
   11620:	9b02      	ldr	r3, [sp, #8]
   11622:	fbb2 f3f3 	udiv	r3, r2, r3
   11626:	9303      	str	r3, [sp, #12]
    }
    return result;
   11628:	9b03      	ldr	r3, [sp, #12]
  }
   1162a:	4618      	mov	r0, r3
   1162c:	b005      	add	sp, #20
   1162e:	f85d fb04 	ldr.w	pc, [sp], #4
   11632:	Address 0x0000000000011632 is out of bounds.


00011634 <Lpc40xxSystemController::PowerUpPeripheral(SystemControllerInterface::PeripheralID const&)>:

  void PowerUpPeripheral(const PeripheralID & peripheral_select) override
   11634:	b084      	sub	sp, #16
   11636:	9001      	str	r0, [sp, #4]
   11638:	9100      	str	r1, [sp, #0]
  {
    auto power_connection_with_enabled_peripheral =
        system_controller->PCONP | (1 << peripheral_select.device_id);
   1163a:	4b09      	ldr	r3, [pc, #36]	; (11660 <Lpc40xxSystemController::PowerUpPeripheral(SystemControllerInterface::PeripheralID const&)+0x2c>)
   1163c:	681b      	ldr	r3, [r3, #0]
   1163e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
   11642:	9a00      	ldr	r2, [sp, #0]
   11644:	6812      	ldr	r2, [r2, #0]
   11646:	2101      	movs	r1, #1
   11648:	fa01 f202 	lsl.w	r2, r1, r2
   1164c:	4313      	orrs	r3, r2
   1164e:	9303      	str	r3, [sp, #12]

    system_controller->PCONP = power_connection_with_enabled_peripheral;
   11650:	4b03      	ldr	r3, [pc, #12]	; (11660 <Lpc40xxSystemController::PowerUpPeripheral(SystemControllerInterface::PeripheralID const&)+0x2c>)
   11652:	681b      	ldr	r3, [r3, #0]
   11654:	9a03      	ldr	r2, [sp, #12]
   11656:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  }
   1165a:	bf00      	nop
   1165c:	b004      	add	sp, #16
   1165e:	4770      	bx	lr
   11660:	10000048 	.word	0x10000048

00011664 <Lpc40xxSystemController::PowerDownPeripheral(SystemControllerInterface::PeripheralID const&)>:
  void PowerDownPeripheral(const PeripheralID & peripheral_select) override
   11664:	b084      	sub	sp, #16
   11666:	9001      	str	r0, [sp, #4]
   11668:	9100      	str	r1, [sp, #0]
  {
    auto power_connection_without_enabled_peripheral =
        system_controller->PCONP & (1 << peripheral_select.device_id);
   1166a:	4b09      	ldr	r3, [pc, #36]	; (11690 <Lpc40xxSystemController::PowerDownPeripheral(SystemControllerInterface::PeripheralID const&)+0x2c>)
   1166c:	681b      	ldr	r3, [r3, #0]
   1166e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
   11672:	9a00      	ldr	r2, [sp, #0]
   11674:	6812      	ldr	r2, [r2, #0]
   11676:	2101      	movs	r1, #1
   11678:	fa01 f202 	lsl.w	r2, r1, r2
   1167c:	4013      	ands	r3, r2
   1167e:	9303      	str	r3, [sp, #12]

    system_controller->PCONP = power_connection_without_enabled_peripheral;
   11680:	4b03      	ldr	r3, [pc, #12]	; (11690 <Lpc40xxSystemController::PowerDownPeripheral(SystemControllerInterface::PeripheralID const&)+0x2c>)
   11682:	681b      	ldr	r3, [r3, #0]
   11684:	9a03      	ldr	r2, [sp, #12]
   11686:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  }
   1168a:	bf00      	nop
   1168c:	b004      	add	sp, #16
   1168e:	4770      	bx	lr
   11690:	10000048 	.word	0x10000048

00011694 <Lpc40xxSystemController::SelectOscillatorSource(Lpc40xxSystemController::OscillatorSource)>:

 private:
  void SelectOscillatorSource(OscillatorSource source)
   11694:	b084      	sub	sp, #16
   11696:	9001      	str	r0, [sp, #4]
   11698:	460b      	mov	r3, r1
   1169a:	f8ad 3002 	strh.w	r3, [sp, #2]
  {
    uint32_t source_bit = static_cast<uint32_t>(source);
   1169e:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   116a2:	9303      	str	r3, [sp, #12]
    system_controller->CLKSRCSEL =
        (system_controller->CLKSRCSEL & ~(kOscillatorSelect)) | source_bit;
   116a4:	4b07      	ldr	r3, [pc, #28]	; (116c4 <Lpc40xxSystemController::SelectOscillatorSource(Lpc40xxSystemController::OscillatorSource)+0x30>)
   116a6:	681b      	ldr	r3, [r3, #0]
   116a8:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
   116ac:	f023 0101 	bic.w	r1, r3, #1
    system_controller->CLKSRCSEL =
   116b0:	4b04      	ldr	r3, [pc, #16]	; (116c4 <Lpc40xxSystemController::SelectOscillatorSource(Lpc40xxSystemController::OscillatorSource)+0x30>)
   116b2:	681b      	ldr	r3, [r3, #0]
        (system_controller->CLKSRCSEL & ~(kOscillatorSelect)) | source_bit;
   116b4:	9a03      	ldr	r2, [sp, #12]
   116b6:	430a      	orrs	r2, r1
    system_controller->CLKSRCSEL =
   116b8:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
  }
   116bc:	bf00      	nop
   116be:	b004      	add	sp, #16
   116c0:	4770      	bx	lr
   116c2:	bf00      	nop
   116c4:	10000048 	.word	0x10000048

000116c8 <Lpc40xxSystemController::SelectMainClockSource(Lpc40xxSystemController::MainClockSource)>:

  void SelectMainClockSource(MainClockSource source)
   116c8:	b082      	sub	sp, #8
   116ca:	9001      	str	r0, [sp, #4]
   116cc:	460b      	mov	r3, r1
   116ce:	f8ad 3002 	strh.w	r3, [sp, #2]
  {
    system_controller->CCLKSEL =
        (system_controller->CCLKSEL & ~(kBaseClockSelect)) |
   116d2:	4b08      	ldr	r3, [pc, #32]	; (116f4 <Lpc40xxSystemController::SelectMainClockSource(Lpc40xxSystemController::MainClockSource)+0x2c>)
   116d4:	681b      	ldr	r3, [r3, #0]
   116d6:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   116da:	f423 7180 	bic.w	r1, r3, #256	; 0x100
        static_cast<uint32_t>(source);
   116de:	f8bd 2002 	ldrh.w	r2, [sp, #2]
    system_controller->CCLKSEL =
   116e2:	4b04      	ldr	r3, [pc, #16]	; (116f4 <Lpc40xxSystemController::SelectMainClockSource(Lpc40xxSystemController::MainClockSource)+0x2c>)
   116e4:	681b      	ldr	r3, [r3, #0]
        (system_controller->CCLKSEL & ~(kBaseClockSelect)) |
   116e6:	430a      	orrs	r2, r1
    system_controller->CCLKSEL =
   116e8:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
  }
   116ec:	bf00      	nop
   116ee:	b002      	add	sp, #8
   116f0:	4770      	bx	lr
   116f2:	bf00      	nop
   116f4:	10000048 	.word	0x10000048

000116f8 <Lpc40xxSystemController::SelectUsbClockSource(Lpc40xxSystemController::UsbSource)>:

  void SelectUsbClockSource(UsbSource usb_clock)
   116f8:	b082      	sub	sp, #8
   116fa:	9001      	str	r0, [sp, #4]
   116fc:	460b      	mov	r3, r1
   116fe:	f8ad 3002 	strh.w	r3, [sp, #2]
  {
    system_controller->USBCLKSEL =
        (system_controller->USBCLKSEL & ~(kUsbClockSource)) |
   11702:	4b08      	ldr	r3, [pc, #32]	; (11724 <Lpc40xxSystemController::SelectUsbClockSource(Lpc40xxSystemController::UsbSource)+0x2c>)
   11704:	681b      	ldr	r3, [r3, #0]
   11706:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
   1170a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
        static_cast<uint32_t>(usb_clock);
   1170e:	f8bd 2002 	ldrh.w	r2, [sp, #2]
    system_controller->USBCLKSEL =
   11712:	4b04      	ldr	r3, [pc, #16]	; (11724 <Lpc40xxSystemController::SelectUsbClockSource(Lpc40xxSystemController::UsbSource)+0x2c>)
   11714:	681b      	ldr	r3, [r3, #0]
        (system_controller->USBCLKSEL & ~(kUsbClockSource)) |
   11716:	430a      	orrs	r2, r1
    system_controller->USBCLKSEL =
   11718:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
  }
   1171c:	bf00      	nop
   1171e:	b002      	add	sp, #8
   11720:	4770      	bx	lr
   11722:	bf00      	nop
   11724:	10000048 	.word	0x10000048

00011728 <Lpc40xxSystemController::SelectSpifiClockSource(Lpc40xxSystemController::SpifiSource)>:

  void SelectSpifiClockSource(SpifiSource spifi_clock)
   11728:	b082      	sub	sp, #8
   1172a:	9001      	str	r0, [sp, #4]
   1172c:	460b      	mov	r3, r1
   1172e:	f8ad 3002 	strh.w	r3, [sp, #2]
  {
    system_controller->SPIFISEL =
        (system_controller->SPIFISEL & ~(kSpifiClockSource)) |
   11732:	4b08      	ldr	r3, [pc, #32]	; (11754 <Lpc40xxSystemController::SelectSpifiClockSource(Lpc40xxSystemController::SpifiSource)+0x2c>)
   11734:	681b      	ldr	r3, [r3, #0]
   11736:	f8d3 31b4 	ldr.w	r3, [r3, #436]	; 0x1b4
   1173a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
        static_cast<uint32_t>(spifi_clock);
   1173e:	f8bd 2002 	ldrh.w	r2, [sp, #2]
    system_controller->SPIFISEL =
   11742:	4b04      	ldr	r3, [pc, #16]	; (11754 <Lpc40xxSystemController::SelectSpifiClockSource(Lpc40xxSystemController::SpifiSource)+0x2c>)
   11744:	681b      	ldr	r3, [r3, #0]
        (system_controller->SPIFISEL & ~(kSpifiClockSource)) |
   11746:	430a      	orrs	r2, r1
    system_controller->SPIFISEL =
   11748:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
  }
   1174c:	bf00      	nop
   1174e:	b002      	add	sp, #8
   11750:	4770      	bx	lr
   11752:	bf00      	nop
   11754:	10000048 	.word	0x10000048

00011758 <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)>:

  uint32_t CalculatePll(PllInput input_frequency, uint16_t desired_speed_in_mhz)
   11758:	b500      	push	{lr}
   1175a:	b087      	sub	sp, #28
   1175c:	9001      	str	r0, [sp, #4]
   1175e:	460b      	mov	r3, r1
   11760:	f8ad 3002 	strh.w	r3, [sp, #2]
   11764:	4613      	mov	r3, r2
   11766:	f8ad 3000 	strh.w	r3, [sp]
  {
    SJ2_ASSERT_FATAL(desired_speed_in_mhz < 384 && desired_speed_in_mhz > 12,
   1176a:	f8bd 3000 	ldrh.w	r3, [sp]
   1176e:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
   11772:	d203      	bcs.n	1177c <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)+0x24>
   11774:	f8bd 3000 	ldrh.w	r3, [sp]
   11778:	2b0c      	cmp	r3, #12
   1177a:	d80d      	bhi.n	11798 <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)+0x40>
   1177c:	23ff      	movs	r3, #255	; 0xff
   1177e:	4a34      	ldr	r2, [pc, #208]	; (11850 <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)+0xf8>)
   11780:	4934      	ldr	r1, [pc, #208]	; (11854 <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)+0xfc>)
   11782:	4835      	ldr	r0, [pc, #212]	; (11858 <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)+0x100>)
   11784:	f004 feb8 	bl	164f8 <printf>
   11788:	4834      	ldr	r0, [pc, #208]	; (1185c <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)+0x104>)
   1178a:	f003 fc09 	bl	14fa0 <puts>
   1178e:	2100      	movs	r1, #0
   11790:	2001      	movs	r0, #1
   11792:	f7ff f91f 	bl	109d4 <debug::PrintBacktrace(bool, void*)>
   11796:	e7fe      	b.n	11796 <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)+0x3e>
                     "Frequency must be lower than 384 MHz"
                     "and greater than or equal to 12 MHz");
    bool calculating = true;
   11798:	2301      	movs	r3, #1
   1179a:	f88d 3017 	strb.w	r3, [sp, #23]
    uint32_t multiplier_value;
    if ((desired_speed_in_mhz % static_cast<uint16_t>(input_frequency)) >= 1)
   1179e:	f8bd 3000 	ldrh.w	r3, [sp]
   117a2:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   117a6:	fbb3 f1f2 	udiv	r1, r3, r2
   117aa:	fb02 f201 	mul.w	r2, r2, r1
   117ae:	1a9b      	subs	r3, r3, r2
   117b0:	b29b      	uxth	r3, r3
   117b2:	2b00      	cmp	r3, #0
   117b4:	d009      	beq.n	117ca <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)+0x72>
    {
      multiplier_value = static_cast<uint32_t>(
          (desired_speed_in_mhz / static_cast<uint16_t>(input_frequency)) + 1);
   117b6:	f8bd 2000 	ldrh.w	r2, [sp]
   117ba:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   117be:	fbb2 f3f3 	udiv	r3, r2, r3
   117c2:	b29b      	uxth	r3, r3
   117c4:	3301      	adds	r3, #1
      multiplier_value = static_cast<uint32_t>(
   117c6:	9304      	str	r3, [sp, #16]
   117c8:	e007      	b.n	117da <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)+0x82>
    }
    else
    {
      multiplier_value = static_cast<uint32_t>(
          desired_speed_in_mhz / static_cast<uint16_t>(input_frequency));
   117ca:	f8bd 2000 	ldrh.w	r2, [sp]
   117ce:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   117d2:	fbb2 f3f3 	udiv	r3, r2, r3
   117d6:	b29b      	uxth	r3, r3
      multiplier_value = static_cast<uint32_t>(
   117d8:	9304      	str	r3, [sp, #16]
    }
    uint16_t divider_value = 1;
   117da:	2301      	movs	r3, #1
   117dc:	f8ad 300e 	strh.w	r3, [sp, #14]
    while (calculating)
   117e0:	f89d 3017 	ldrb.w	r3, [sp, #23]
   117e4:	2b00      	cmp	r3, #0
   117e6:	d02e      	beq.n	11846 <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)+0xee>
    {
      uint16_t current_controlled_oscillator_frequency;
      current_controlled_oscillator_frequency = static_cast<uint16_t>(
   117e8:	9b04      	ldr	r3, [sp, #16]
   117ea:	b29b      	uxth	r3, r3
   117ec:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   117f0:	fb12 f303 	smulbb	r3, r2, r3
   117f4:	b29b      	uxth	r3, r3
   117f6:	f8bd 200e 	ldrh.w	r2, [sp, #14]
   117fa:	fb12 f303 	smulbb	r3, r2, r3
   117fe:	b29b      	uxth	r3, r3
   11800:	005b      	lsls	r3, r3, #1
   11802:	f8ad 300c 	strh.w	r3, [sp, #12]
          (static_cast<uint16_t>(input_frequency) * multiplier_value * 2) *
          divider_value);
      if (current_controlled_oscillator_frequency >= 156)
   11806:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   1180a:	2b9b      	cmp	r3, #155	; 0x9b
   1180c:	d903      	bls.n	11816 <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)+0xbe>
      {
        calculating = false;
   1180e:	2300      	movs	r3, #0
   11810:	f88d 3017 	strb.w	r3, [sp, #23]
   11814:	e7e4      	b.n	117e0 <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)+0x88>
      }
      else
      {
        divider_value = static_cast<uint16_t>(divider_value * 2);
   11816:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   1181a:	005b      	lsls	r3, r3, #1
   1181c:	f8ad 300e 	strh.w	r3, [sp, #14]
        SJ2_ASSERT_FATAL(divider_value < 8,
   11820:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   11824:	2b07      	cmp	r3, #7
   11826:	d9db      	bls.n	117e0 <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)+0x88>
   11828:	f240 131b 	movw	r3, #283	; 0x11b
   1182c:	4a08      	ldr	r2, [pc, #32]	; (11850 <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)+0xf8>)
   1182e:	490c      	ldr	r1, [pc, #48]	; (11860 <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)+0x108>)
   11830:	480c      	ldr	r0, [pc, #48]	; (11864 <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)+0x10c>)
   11832:	f004 fe61 	bl	164f8 <printf>
   11836:	4809      	ldr	r0, [pc, #36]	; (1185c <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)+0x104>)
   11838:	f003 fbb2 	bl	14fa0 <puts>
   1183c:	2100      	movs	r1, #0
   1183e:	2001      	movs	r0, #1
   11840:	f7ff f8c8 	bl	109d4 <debug::PrintBacktrace(bool, void*)>
   11844:	e7fe      	b.n	11844 <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)+0xec>
                         "PLL divider value went out of bounds");
      }
    }

    return multiplier_value;
   11846:	9b04      	ldr	r3, [sp, #16]
  }
   11848:	4618      	mov	r0, r3
   1184a:	b007      	add	sp, #28
   1184c:	f85d fb04 	ldr.w	pc, [sp], #4
   11850:	0001897c 	.word	0x0001897c
   11854:	00018600 	.word	0x00018600
   11858:	000182c8 	.word	0x000182c8
   1185c:	000182b0 	.word	0x000182b0
   11860:	00018618 	.word	0x00018618
   11864:	000183b8 	.word	0x000183b8

00011868 <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)>:

  uint32_t SetMainPll(PllInput input_frequency, uint16_t desired_speed_in_mhz)
   11868:	b510      	push	{r4, lr}
   1186a:	b08a      	sub	sp, #40	; 0x28
   1186c:	9001      	str	r0, [sp, #4]
   1186e:	460b      	mov	r3, r1
   11870:	f8ad 3002 	strh.w	r3, [sp, #2]
   11874:	4613      	mov	r3, r2
   11876:	f8ad 3000 	strh.w	r3, [sp]
  {
    uint16_t divider_value = 1;
   1187a:	2301      	movs	r3, #1
   1187c:	f8ad 301a 	strh.w	r3, [sp, #26]
    uint64_t timeout_time  = Milliseconds() + kDefaultTimeout;
   11880:	f7ff f940 	bl	10b04 <Milliseconds()>
   11884:	460a      	mov	r2, r1
   11886:	4601      	mov	r1, r0
   11888:	f511 737a 	adds.w	r3, r1, #1000	; 0x3e8
   1188c:	f142 0400 	adc.w	r4, r2, #0
   11890:	e9cd 3404 	strd	r3, r4, [sp, #16]
    uint64_t current_time  = Milliseconds();
   11894:	f7ff f936 	bl	10b04 <Milliseconds()>
   11898:	e9cd 0108 	strd	r0, r1, [sp, #32]
    uint32_t multiplier_value =
        CalculatePll(input_frequency, desired_speed_in_mhz);
   1189c:	f8bd 2000 	ldrh.w	r2, [sp]
   118a0:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   118a4:	4619      	mov	r1, r3
   118a6:	9801      	ldr	r0, [sp, #4]
   118a8:	f7ff ff56 	bl	11758 <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)>
   118ac:	9003      	str	r0, [sp, #12]
    uint32_t actual_speed =
        static_cast<uint32_t>(input_frequency) * multiplier_value;
   118ae:	f8bd 2002 	ldrh.w	r2, [sp, #2]
    uint32_t actual_speed =
   118b2:	9b03      	ldr	r3, [sp, #12]
   118b4:	fb02 f303 	mul.w	r3, r2, r3
   118b8:	9307      	str	r3, [sp, #28]
    // TO DO: use registers to retreive values
    SelectOscillatorSource(OscillatorSource::kIrc);
   118ba:	2100      	movs	r1, #0
   118bc:	9801      	ldr	r0, [sp, #4]
   118be:	f7ff fee9 	bl	11694 <Lpc40xxSystemController::SelectOscillatorSource(Lpc40xxSystemController::OscillatorSource)>
    SelectMainClockSource(MainClockSource::kBaseClock);
   118c2:	2100      	movs	r1, #0
   118c4:	9801      	ldr	r0, [sp, #4]
   118c6:	f7ff feff 	bl	116c8 <Lpc40xxSystemController::SelectMainClockSource(Lpc40xxSystemController::MainClockSource)>
    SelectUsbClockSource(UsbSource::kBaseClock);
   118ca:	2100      	movs	r1, #0
   118cc:	9801      	ldr	r0, [sp, #4]
   118ce:	f7ff ff13 	bl	116f8 <Lpc40xxSystemController::SelectUsbClockSource(Lpc40xxSystemController::UsbSource)>
    SelectSpifiClockSource(SpifiSource::kBaseClock);
   118d2:	2100      	movs	r1, #0
   118d4:	9801      	ldr	r0, [sp, #4]
   118d6:	f7ff ff27 	bl	11728 <Lpc40xxSystemController::SelectSpifiClockSource(Lpc40xxSystemController::SpifiSource)>
    // must subtract 1 from multiplier value as specified in datasheet
    system_controller->PLL0CFG =
        (system_controller->PLL0CFG & ~kClearPllMultiplier) |
   118da:	4b3a      	ldr	r3, [pc, #232]	; (119c4 <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0x15c>)
   118dc:	681b      	ldr	r3, [r3, #0]
   118de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   118e2:	f023 011f 	bic.w	r1, r3, #31
        (multiplier_value - 1);
   118e6:	9b03      	ldr	r3, [sp, #12]
   118e8:	1e5a      	subs	r2, r3, #1
    system_controller->PLL0CFG =
   118ea:	4b36      	ldr	r3, [pc, #216]	; (119c4 <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0x15c>)
   118ec:	681b      	ldr	r3, [r3, #0]
        (system_controller->PLL0CFG & ~kClearPllMultiplier) |
   118ee:	430a      	orrs	r2, r1
    system_controller->PLL0CFG =
   118f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    system_controller->PLL0CFG =
        (system_controller->PLL0CFG & ~kClearPllDivider) | (divider_value << 5);
   118f4:	4b33      	ldr	r3, [pc, #204]	; (119c4 <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0x15c>)
   118f6:	681b      	ldr	r3, [r3, #0]
   118f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   118fc:	f023 0260 	bic.w	r2, r3, #96	; 0x60
   11900:	f8bd 301a 	ldrh.w	r3, [sp, #26]
   11904:	015b      	lsls	r3, r3, #5
   11906:	4619      	mov	r1, r3
    system_controller->PLL0CFG =
   11908:	4b2e      	ldr	r3, [pc, #184]	; (119c4 <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0x15c>)
   1190a:	681b      	ldr	r3, [r3, #0]
        (system_controller->PLL0CFG & ~kClearPllDivider) | (divider_value << 5);
   1190c:	430a      	orrs	r2, r1
    system_controller->PLL0CFG =
   1190e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    system_controller->PLL0CON |= kEnablePll;
   11912:	4b2c      	ldr	r3, [pc, #176]	; (119c4 <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0x15c>)
   11914:	681b      	ldr	r3, [r3, #0]
   11916:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
   1191a:	4b2a      	ldr	r3, [pc, #168]	; (119c4 <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0x15c>)
   1191c:	681b      	ldr	r3, [r3, #0]
   1191e:	f042 0201 	orr.w	r2, r2, #1
   11922:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    // nessecary feed sequence to ensure the changes are intentional
    system_controller->PLL0FEED = 0xAA;
   11926:	4b27      	ldr	r3, [pc, #156]	; (119c4 <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0x15c>)
   11928:	681b      	ldr	r3, [r3, #0]
   1192a:	22aa      	movs	r2, #170	; 0xaa
   1192c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    system_controller->PLL0FEED = 0x55;
   11930:	4b24      	ldr	r3, [pc, #144]	; (119c4 <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0x15c>)
   11932:	681b      	ldr	r3, [r3, #0]
   11934:	2255      	movs	r2, #85	; 0x55
   11936:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    while (!(system_controller->PLL0STAT >> kPlock & 1) &&
   1193a:	4b22      	ldr	r3, [pc, #136]	; (119c4 <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0x15c>)
   1193c:	681b      	ldr	r3, [r3, #0]
   1193e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   11942:	f403 6380 	and.w	r3, r3, #1024	; 0x400
   11946:	2b00      	cmp	r3, #0
   11948:	d109      	bne.n	1195e <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0xf6>
   1194a:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
   1194e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
   11952:	42a2      	cmp	r2, r4
   11954:	bf08      	it	eq
   11956:	4299      	cmpeq	r1, r3
   11958:	d201      	bcs.n	1195e <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0xf6>
   1195a:	2301      	movs	r3, #1
   1195c:	e000      	b.n	11960 <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0xf8>
   1195e:	2300      	movs	r3, #0
   11960:	2b00      	cmp	r3, #0
   11962:	d004      	beq.n	1196e <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0x106>
           (current_time < timeout_time))
    {
      current_time = Milliseconds();
   11964:	f7ff f8ce 	bl	10b04 <Milliseconds()>
   11968:	e9cd 0108 	strd	r0, r1, [sp, #32]
    while (!(system_controller->PLL0STAT >> kPlock & 1) &&
   1196c:	e7e5      	b.n	1193a <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0xd2>
    }
    if (!(system_controller->PLL0STAT >> kPlock & 1) &&
   1196e:	4b15      	ldr	r3, [pc, #84]	; (119c4 <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0x15c>)
   11970:	681b      	ldr	r3, [r3, #0]
   11972:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   11976:	f403 6380 	and.w	r3, r3, #1024	; 0x400
   1197a:	2b00      	cmp	r3, #0
   1197c:	d109      	bne.n	11992 <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0x12a>
   1197e:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
   11982:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
   11986:	42a2      	cmp	r2, r4
   11988:	bf08      	it	eq
   1198a:	4299      	cmpeq	r1, r3
   1198c:	d301      	bcc.n	11992 <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0x12a>
   1198e:	2301      	movs	r3, #1
   11990:	e000      	b.n	11994 <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0x12c>
   11992:	2300      	movs	r3, #0
   11994:	2b00      	cmp	r3, #0
   11996:	d00e      	beq.n	119b6 <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0x14e>
        (current_time >= timeout_time))
    {
      SJ2_ASSERT_FATAL(false,
   11998:	f240 1343 	movw	r3, #323	; 0x143
   1199c:	4a0a      	ldr	r2, [pc, #40]	; (119c8 <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0x160>)
   1199e:	490b      	ldr	r1, [pc, #44]	; (119cc <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0x164>)
   119a0:	480b      	ldr	r0, [pc, #44]	; (119d0 <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0x168>)
   119a2:	f004 fda9 	bl	164f8 <printf>
   119a6:	480b      	ldr	r0, [pc, #44]	; (119d4 <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0x16c>)
   119a8:	f003 fafa 	bl	14fa0 <puts>
   119ac:	2100      	movs	r1, #0
   119ae:	2001      	movs	r0, #1
   119b0:	f7ff f810 	bl	109d4 <debug::PrintBacktrace(bool, void*)>
   119b4:	e7fe      	b.n	119b4 <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0x14c>
                       "PLL lock could not be established before timeout");
      actual_speed = kDefaultIRCFrequency;
    }
    return (actual_speed - desired_speed_in_mhz);
   119b6:	f8bd 3000 	ldrh.w	r3, [sp]
   119ba:	9a07      	ldr	r2, [sp, #28]
   119bc:	1ad3      	subs	r3, r2, r3
  }
   119be:	4618      	mov	r0, r3
   119c0:	b00a      	add	sp, #40	; 0x28
   119c2:	bd10      	pop	{r4, pc}
   119c4:	10000048 	.word	0x10000048
   119c8:	00018920 	.word	0x00018920
   119cc:	00018630 	.word	0x00018630
   119d0:	00018460 	.word	0x00018460
   119d4:	000182b0 	.word	0x000182b0

000119d8 <Lpc40xxSystemController::SetCpuClockDivider(unsigned char)>:
                       "PLL lock could not be established before timeout");
    }
    return (actual_speed - desired_speed_in_mhz);
  }

  void SetCpuClockDivider(uint8_t cpu_divider)
   119d8:	b500      	push	{lr}
   119da:	b083      	sub	sp, #12
   119dc:	9001      	str	r0, [sp, #4]
   119de:	460b      	mov	r3, r1
   119e0:	f88d 3003 	strb.w	r3, [sp, #3]
  {
    SJ2_ASSERT_FATAL(cpu_divider < 32, "Divider mustn't exceed 32");
   119e4:	f89d 3003 	ldrb.w	r3, [sp, #3]
   119e8:	2b1f      	cmp	r3, #31
   119ea:	d90e      	bls.n	11a0a <Lpc40xxSystemController::SetCpuClockDivider(unsigned char)+0x32>
   119ec:	f240 136f 	movw	r3, #367	; 0x16f
   119f0:	4a0e      	ldr	r2, [pc, #56]	; (11a2c <Lpc40xxSystemController::SetCpuClockDivider(unsigned char)+0x54>)
   119f2:	490f      	ldr	r1, [pc, #60]	; (11a30 <Lpc40xxSystemController::SetCpuClockDivider(unsigned char)+0x58>)
   119f4:	480f      	ldr	r0, [pc, #60]	; (11a34 <Lpc40xxSystemController::SetCpuClockDivider(unsigned char)+0x5c>)
   119f6:	f004 fd7f 	bl	164f8 <printf>
   119fa:	480f      	ldr	r0, [pc, #60]	; (11a38 <Lpc40xxSystemController::SetCpuClockDivider(unsigned char)+0x60>)
   119fc:	f003 fad0 	bl	14fa0 <puts>
   11a00:	2100      	movs	r1, #0
   11a02:	2001      	movs	r0, #1
   11a04:	f7fe ffe6 	bl	109d4 <debug::PrintBacktrace(bool, void*)>
   11a08:	e7fe      	b.n	11a08 <Lpc40xxSystemController::SetCpuClockDivider(unsigned char)+0x30>
    system_controller->CCLKSEL =
        (system_controller->CCLKSEL & ~kClearCpuDivider) | cpu_divider;
   11a0a:	4b0c      	ldr	r3, [pc, #48]	; (11a3c <Lpc40xxSystemController::SetCpuClockDivider(unsigned char)+0x64>)
   11a0c:	681b      	ldr	r3, [r3, #0]
   11a0e:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   11a12:	f023 011f 	bic.w	r1, r3, #31
   11a16:	f89d 2003 	ldrb.w	r2, [sp, #3]
    system_controller->CCLKSEL =
   11a1a:	4b08      	ldr	r3, [pc, #32]	; (11a3c <Lpc40xxSystemController::SetCpuClockDivider(unsigned char)+0x64>)
   11a1c:	681b      	ldr	r3, [r3, #0]
        (system_controller->CCLKSEL & ~kClearCpuDivider) | cpu_divider;
   11a1e:	430a      	orrs	r2, r1
    system_controller->CCLKSEL =
   11a20:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
  }
   11a24:	bf00      	nop
   11a26:	b003      	add	sp, #12
   11a28:	f85d fb04 	ldr.w	pc, [sp], #4
   11a2c:	000189d8 	.word	0x000189d8
   11a30:	00018648 	.word	0x00018648
   11a34:	00018508 	.word	0x00018508
   11a38:	000182b0 	.word	0x000182b0
   11a3c:	10000048 	.word	0x10000048

00011a40 <Lpc40xxSystemController::SetEmcClockDivider(Lpc40xxSystemController::EmcDivider)>:

  void SetEmcClockDivider(EmcDivider emc_divider)
   11a40:	b082      	sub	sp, #8
   11a42:	9001      	str	r0, [sp, #4]
   11a44:	460b      	mov	r3, r1
   11a46:	f88d 3003 	strb.w	r3, [sp, #3]
  {
    system_controller->EMCCLKSEL =
        (system_controller->EMCCLKSEL & ~kClearEmcDivider) |
   11a4a:	4b08      	ldr	r3, [pc, #32]	; (11a6c <Lpc40xxSystemController::SetEmcClockDivider(Lpc40xxSystemController::EmcDivider)+0x2c>)
   11a4c:	681b      	ldr	r3, [r3, #0]
   11a4e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   11a52:	f023 0101 	bic.w	r1, r3, #1
        static_cast<uint8_t>(emc_divider);
   11a56:	f89d 2003 	ldrb.w	r2, [sp, #3]
    system_controller->EMCCLKSEL =
   11a5a:	4b04      	ldr	r3, [pc, #16]	; (11a6c <Lpc40xxSystemController::SetEmcClockDivider(Lpc40xxSystemController::EmcDivider)+0x2c>)
   11a5c:	681b      	ldr	r3, [r3, #0]
        (system_controller->EMCCLKSEL & ~kClearEmcDivider) |
   11a5e:	430a      	orrs	r2, r1
    system_controller->EMCCLKSEL =
   11a60:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }
   11a64:	bf00      	nop
   11a66:	b002      	add	sp, #8
   11a68:	4770      	bx	lr
   11a6a:	bf00      	nop
   11a6c:	10000048 	.word	0x10000048

00011a70 <int util::Value<Ssp::Peripheral, int>(Ssp::Peripheral)>:
constexpr Type Value(Enum enum_type_value)
   11a70:	b530      	push	{r4, r5, lr}
   11a72:	b083      	sub	sp, #12
   11a74:	4675      	mov	r5, lr
   11a76:	9001      	str	r0, [sp, #4]
   11a78:	462b      	mov	r3, r5
   11a7a:	4619      	mov	r1, r3
   11a7c:	4806      	ldr	r0, [pc, #24]	; (11a98 <int util::Value<Ssp::Peripheral, int>(Ssp::Peripheral)+0x28>)
   11a7e:	f003 fabf 	bl	15000 <__cyg_profile_func_enter>
  return static_cast<Type>(enum_type_value);
   11a82:	9c01      	ldr	r4, [sp, #4]
   11a84:	462b      	mov	r3, r5
   11a86:	4619      	mov	r1, r3
   11a88:	4803      	ldr	r0, [pc, #12]	; (11a98 <int util::Value<Ssp::Peripheral, int>(Ssp::Peripheral)+0x28>)
   11a8a:	f003 facd 	bl	15028 <__cyg_profile_func_exit>
   11a8e:	4623      	mov	r3, r4
}
   11a90:	4618      	mov	r0, r3
   11a92:	b003      	add	sp, #12
   11a94:	bd30      	pop	{r4, r5, pc}
   11a96:	bf00      	nop
   11a98:	00011a71 	.word	0x00011a71

00011a9c <SspInterface::SspInterface()>:
#include "L0_LowLevel/system_controller.hpp"
#include "L1_Drivers/pin.hpp"
#include "utility/bit.hpp"
#include "utility/enum.hpp"

class SspInterface
   11a9c:	b530      	push	{r4, r5, lr}
   11a9e:	b083      	sub	sp, #12
   11aa0:	4675      	mov	r5, lr
   11aa2:	9001      	str	r0, [sp, #4]
   11aa4:	462b      	mov	r3, r5
   11aa6:	4619      	mov	r1, r3
   11aa8:	4807      	ldr	r0, [pc, #28]	; (11ac8 <SspInterface::SspInterface()+0x2c>)
   11aaa:	f003 faa9 	bl	15000 <__cyg_profile_func_enter>
   11aae:	4a07      	ldr	r2, [pc, #28]	; (11acc <SspInterface::SspInterface()+0x30>)
   11ab0:	9b01      	ldr	r3, [sp, #4]
   11ab2:	601a      	str	r2, [r3, #0]
   11ab4:	9c01      	ldr	r4, [sp, #4]
   11ab6:	462b      	mov	r3, r5
   11ab8:	4619      	mov	r1, r3
   11aba:	4803      	ldr	r0, [pc, #12]	; (11ac8 <SspInterface::SspInterface()+0x2c>)
   11abc:	f003 fab4 	bl	15028 <__cyg_profile_func_exit>
   11ac0:	4623      	mov	r3, r4
   11ac2:	4618      	mov	r0, r3
   11ac4:	b003      	add	sp, #12
   11ac6:	bd30      	pop	{r4, r5, pc}
   11ac8:	00011a9d 	.word	0x00011a9d
   11acc:	00018764 	.word	0x00018764

00011ad0 <PinInterface::PinInterface(PinInterface const&)>:
class PinInterface
   11ad0:	b530      	push	{r4, r5, lr}
   11ad2:	b083      	sub	sp, #12
   11ad4:	4675      	mov	r5, lr
   11ad6:	9001      	str	r0, [sp, #4]
   11ad8:	9100      	str	r1, [sp, #0]
   11ada:	462b      	mov	r3, r5
   11adc:	4619      	mov	r1, r3
   11ade:	4808      	ldr	r0, [pc, #32]	; (11b00 <PinInterface::PinInterface(PinInterface const&)+0x30>)
   11ae0:	f003 fa8e 	bl	15000 <__cyg_profile_func_enter>
   11ae4:	4a07      	ldr	r2, [pc, #28]	; (11b04 <PinInterface::PinInterface(PinInterface const&)+0x34>)
   11ae6:	9b01      	ldr	r3, [sp, #4]
   11ae8:	601a      	str	r2, [r3, #0]
   11aea:	9c01      	ldr	r4, [sp, #4]
   11aec:	462b      	mov	r3, r5
   11aee:	4619      	mov	r1, r3
   11af0:	4803      	ldr	r0, [pc, #12]	; (11b00 <PinInterface::PinInterface(PinInterface const&)+0x30>)
   11af2:	f003 fa99 	bl	15028 <__cyg_profile_func_exit>
   11af6:	4623      	mov	r3, r4
   11af8:	4618      	mov	r0, r3
   11afa:	b003      	add	sp, #12
   11afc:	bd30      	pop	{r4, r5, pc}
   11afe:	bf00      	nop
   11b00:	00011ad1 	.word	0x00011ad1
   11b04:	000188a0 	.word	0x000188a0

00011b08 <Pin::Pin(Pin const&)>:
class Pin : public PinInterface
   11b08:	b530      	push	{r4, r5, lr}
   11b0a:	b083      	sub	sp, #12
   11b0c:	4675      	mov	r5, lr
   11b0e:	9001      	str	r0, [sp, #4]
   11b10:	9100      	str	r1, [sp, #0]
   11b12:	462b      	mov	r3, r5
   11b14:	4619      	mov	r1, r3
   11b16:	480f      	ldr	r0, [pc, #60]	; (11b54 <Pin::Pin(Pin const&)+0x4c>)
   11b18:	f003 fa72 	bl	15000 <__cyg_profile_func_enter>
   11b1c:	9b01      	ldr	r3, [sp, #4]
   11b1e:	9a00      	ldr	r2, [sp, #0]
   11b20:	4611      	mov	r1, r2
   11b22:	4618      	mov	r0, r3
   11b24:	f7ff ffd4 	bl	11ad0 <PinInterface::PinInterface(PinInterface const&)>
   11b28:	4a0b      	ldr	r2, [pc, #44]	; (11b58 <Pin::Pin(Pin const&)+0x50>)
   11b2a:	9b01      	ldr	r3, [sp, #4]
   11b2c:	601a      	str	r2, [r3, #0]
   11b2e:	9b00      	ldr	r3, [sp, #0]
   11b30:	791a      	ldrb	r2, [r3, #4]
   11b32:	9b01      	ldr	r3, [sp, #4]
   11b34:	711a      	strb	r2, [r3, #4]
   11b36:	9b00      	ldr	r3, [sp, #0]
   11b38:	795a      	ldrb	r2, [r3, #5]
   11b3a:	9b01      	ldr	r3, [sp, #4]
   11b3c:	715a      	strb	r2, [r3, #5]
   11b3e:	9c01      	ldr	r4, [sp, #4]
   11b40:	462b      	mov	r3, r5
   11b42:	4619      	mov	r1, r3
   11b44:	4803      	ldr	r0, [pc, #12]	; (11b54 <Pin::Pin(Pin const&)+0x4c>)
   11b46:	f003 fa6f 	bl	15028 <__cyg_profile_func_exit>
   11b4a:	4623      	mov	r3, r4
   11b4c:	4618      	mov	r0, r3
   11b4e:	b003      	add	sp, #12
   11b50:	bd30      	pop	{r4, r5, pc}
   11b52:	bf00      	nop
   11b54:	00011b09 	.word	0x00011b09
   11b58:	00018864 	.word	0x00018864

00011b5c <Ssp::Ssp(Ssp::Peripheral)>:
        pssp_(Peripheral::kSsp0)
  {
  }

  /// User modified constructor. Must be followed by Set functions.
  explicit constexpr Ssp(Peripheral set_pssp)
   11b5c:	b530      	push	{r4, r5, lr}
   11b5e:	b083      	sub	sp, #12
   11b60:	4675      	mov	r5, lr
   11b62:	9001      	str	r0, [sp, #4]
   11b64:	9100      	str	r1, [sp, #0]
   11b66:	462b      	mov	r3, r5
   11b68:	4619      	mov	r1, r3
   11b6a:	4831      	ldr	r0, [pc, #196]	; (11c30 <Ssp::Ssp(Ssp::Peripheral)+0xd4>)
   11b6c:	f003 fa48 	bl	15000 <__cyg_profile_func_enter>
        miso_(&miso_pin_),
        sck_(&sck_pin_),
        mosi_pin_(kSspPinMatrix[util::Value(set_pssp)][MatrixLookup::kMosi]),
        miso_pin_(kSspPinMatrix[util::Value(set_pssp)][MatrixLookup::kMiso]),
        sck_pin_(kSspPinMatrix[util::Value(set_pssp)][MatrixLookup::kSck]),
        pssp_(set_pssp)
   11b70:	9b01      	ldr	r3, [sp, #4]
   11b72:	4618      	mov	r0, r3
   11b74:	f7ff ff92 	bl	11a9c <SspInterface::SspInterface()>
   11b78:	9b01      	ldr	r3, [sp, #4]
   11b7a:	3304      	adds	r3, #4
   11b7c:	4618      	mov	r0, r3
   11b7e:	f7ff fc9d 	bl	114bc <Lpc40xxSystemController::Lpc40xxSystemController()>
   11b82:	4a2c      	ldr	r2, [pc, #176]	; (11c34 <Ssp::Ssp(Ssp::Peripheral)+0xd8>)
   11b84:	9b01      	ldr	r3, [sp, #4]
   11b86:	601a      	str	r2, [r3, #0]
   11b88:	4a2b      	ldr	r2, [pc, #172]	; (11c38 <Ssp::Ssp(Ssp::Peripheral)+0xdc>)
   11b8a:	9b01      	ldr	r3, [sp, #4]
   11b8c:	605a      	str	r2, [r3, #4]
   11b8e:	9b01      	ldr	r3, [sp, #4]
   11b90:	f103 0214 	add.w	r2, r3, #20
   11b94:	9b01      	ldr	r3, [sp, #4]
   11b96:	609a      	str	r2, [r3, #8]
   11b98:	9b01      	ldr	r3, [sp, #4]
   11b9a:	f103 021c 	add.w	r2, r3, #28
   11b9e:	9b01      	ldr	r3, [sp, #4]
   11ba0:	60da      	str	r2, [r3, #12]
   11ba2:	9b01      	ldr	r3, [sp, #4]
   11ba4:	f103 0224 	add.w	r2, r3, #36	; 0x24
   11ba8:	9b01      	ldr	r3, [sp, #4]
   11baa:	611a      	str	r2, [r3, #16]
   11bac:	9b01      	ldr	r3, [sp, #4]
   11bae:	f103 0414 	add.w	r4, r3, #20
        mosi_pin_(kSspPinMatrix[util::Value(set_pssp)][MatrixLookup::kMosi]),
   11bb2:	9800      	ldr	r0, [sp, #0]
   11bb4:	f7ff ff5c 	bl	11a70 <int util::Value<Ssp::Peripheral, int>(Ssp::Peripheral)>
   11bb8:	4602      	mov	r2, r0
        pssp_(set_pssp)
   11bba:	4613      	mov	r3, r2
   11bbc:	005b      	lsls	r3, r3, #1
   11bbe:	4413      	add	r3, r2
   11bc0:	00db      	lsls	r3, r3, #3
   11bc2:	4a1e      	ldr	r2, [pc, #120]	; (11c3c <Ssp::Ssp(Ssp::Peripheral)+0xe0>)
   11bc4:	4413      	add	r3, r2
   11bc6:	4619      	mov	r1, r3
   11bc8:	4620      	mov	r0, r4
   11bca:	f7ff ff9d 	bl	11b08 <Pin::Pin(Pin const&)>
   11bce:	9b01      	ldr	r3, [sp, #4]
   11bd0:	f103 041c 	add.w	r4, r3, #28
        miso_pin_(kSspPinMatrix[util::Value(set_pssp)][MatrixLookup::kMiso]),
   11bd4:	9800      	ldr	r0, [sp, #0]
   11bd6:	f7ff ff4b 	bl	11a70 <int util::Value<Ssp::Peripheral, int>(Ssp::Peripheral)>
   11bda:	4602      	mov	r2, r0
        pssp_(set_pssp)
   11bdc:	4613      	mov	r3, r2
   11bde:	005b      	lsls	r3, r3, #1
   11be0:	4413      	add	r3, r2
   11be2:	00db      	lsls	r3, r3, #3
   11be4:	3308      	adds	r3, #8
   11be6:	4a15      	ldr	r2, [pc, #84]	; (11c3c <Ssp::Ssp(Ssp::Peripheral)+0xe0>)
   11be8:	4413      	add	r3, r2
   11bea:	4619      	mov	r1, r3
   11bec:	4620      	mov	r0, r4
   11bee:	f7ff ff8b 	bl	11b08 <Pin::Pin(Pin const&)>
   11bf2:	9b01      	ldr	r3, [sp, #4]
   11bf4:	f103 0424 	add.w	r4, r3, #36	; 0x24
        sck_pin_(kSspPinMatrix[util::Value(set_pssp)][MatrixLookup::kSck]),
   11bf8:	9800      	ldr	r0, [sp, #0]
   11bfa:	f7ff ff39 	bl	11a70 <int util::Value<Ssp::Peripheral, int>(Ssp::Peripheral)>
   11bfe:	4602      	mov	r2, r0
        pssp_(set_pssp)
   11c00:	4613      	mov	r3, r2
   11c02:	005b      	lsls	r3, r3, #1
   11c04:	4413      	add	r3, r2
   11c06:	00db      	lsls	r3, r3, #3
   11c08:	3310      	adds	r3, #16
   11c0a:	4a0c      	ldr	r2, [pc, #48]	; (11c3c <Ssp::Ssp(Ssp::Peripheral)+0xe0>)
   11c0c:	4413      	add	r3, r2
   11c0e:	4619      	mov	r1, r3
   11c10:	4620      	mov	r0, r4
   11c12:	f7ff ff79 	bl	11b08 <Pin::Pin(Pin const&)>
   11c16:	9b01      	ldr	r3, [sp, #4]
   11c18:	9a00      	ldr	r2, [sp, #0]
   11c1a:	62da      	str	r2, [r3, #44]	; 0x2c
  {
  }
   11c1c:	9c01      	ldr	r4, [sp, #4]
   11c1e:	462b      	mov	r3, r5
   11c20:	4619      	mov	r1, r3
   11c22:	4803      	ldr	r0, [pc, #12]	; (11c30 <Ssp::Ssp(Ssp::Peripheral)+0xd4>)
   11c24:	f003 fa00 	bl	15028 <__cyg_profile_func_exit>
   11c28:	4623      	mov	r3, r4
   11c2a:	4618      	mov	r0, r3
   11c2c:	b003      	add	sp, #12
   11c2e:	bd30      	pop	{r4, r5, pc}
   11c30:	00011b5d 	.word	0x00011b5d
   11c34:	00018718 	.word	0x00018718
   11c38:	00018740 	.word	0x00018740
   11c3c:	00018664 	.word	0x00018664

00011c40 <Ssp::Initialize()>:
  }

  /// Powers on the peripheral, sets the peripheral clock, format, and data
  /// size, and enables the SSP pins for communication see and more.
  /// See page 601 of user manual UM10562 LPC408x/407x for more details.
  void Initialize() override
   11c40:	b570      	push	{r4, r5, r6, lr}
   11c42:	b086      	sub	sp, #24
   11c44:	4676      	mov	r6, lr
   11c46:	9001      	str	r0, [sp, #4]
   11c48:	4633      	mov	r3, r6
   11c4a:	4619      	mov	r1, r3
   11c4c:	4830      	ldr	r0, [pc, #192]	; (11d10 <Ssp::Initialize()+0xd0>)
   11c4e:	f003 f9d7 	bl	15000 <__cyg_profile_func_enter>
  {
    uint32_t pssp = util::Value(pssp_);
   11c52:	9b01      	ldr	r3, [sp, #4]
   11c54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   11c56:	4618      	mov	r0, r3
   11c58:	f7ff ff0a 	bl	11a70 <int util::Value<Ssp::Peripheral, int>(Ssp::Peripheral)>
   11c5c:	4603      	mov	r3, r0
   11c5e:	9305      	str	r3, [sp, #20]
    // Power up peripheral
    PowerUpPeripheral(kPowerBit[pssp]);
   11c60:	9b01      	ldr	r3, [sp, #4]
   11c62:	1d18      	adds	r0, r3, #4
   11c64:	9b01      	ldr	r3, [sp, #4]
   11c66:	685b      	ldr	r3, [r3, #4]
   11c68:	3314      	adds	r3, #20
   11c6a:	681b      	ldr	r3, [r3, #0]
   11c6c:	9a05      	ldr	r2, [sp, #20]
   11c6e:	0092      	lsls	r2, r2, #2
   11c70:	4928      	ldr	r1, [pc, #160]	; (11d14 <Ssp::Initialize()+0xd4>)
   11c72:	440a      	add	r2, r1
   11c74:	4611      	mov	r1, r2
   11c76:	4798      	blx	r3
    // Enable SSP pins
    mosi_->SetPinFunction(kPinSelect[pssp]);
   11c78:	9b01      	ldr	r3, [sp, #4]
   11c7a:	6898      	ldr	r0, [r3, #8]
   11c7c:	9b01      	ldr	r3, [sp, #4]
   11c7e:	689b      	ldr	r3, [r3, #8]
   11c80:	681b      	ldr	r3, [r3, #0]
   11c82:	681b      	ldr	r3, [r3, #0]
   11c84:	4924      	ldr	r1, [pc, #144]	; (11d18 <Ssp::Initialize()+0xd8>)
   11c86:	9a05      	ldr	r2, [sp, #20]
   11c88:	440a      	add	r2, r1
   11c8a:	7812      	ldrb	r2, [r2, #0]
   11c8c:	4611      	mov	r1, r2
   11c8e:	4798      	blx	r3
    miso_->SetPinFunction(kPinSelect[pssp]);
   11c90:	9b01      	ldr	r3, [sp, #4]
   11c92:	68d8      	ldr	r0, [r3, #12]
   11c94:	9b01      	ldr	r3, [sp, #4]
   11c96:	68db      	ldr	r3, [r3, #12]
   11c98:	681b      	ldr	r3, [r3, #0]
   11c9a:	681b      	ldr	r3, [r3, #0]
   11c9c:	491e      	ldr	r1, [pc, #120]	; (11d18 <Ssp::Initialize()+0xd8>)
   11c9e:	9a05      	ldr	r2, [sp, #20]
   11ca0:	440a      	add	r2, r1
   11ca2:	7812      	ldrb	r2, [r2, #0]
   11ca4:	4611      	mov	r1, r2
   11ca6:	4798      	blx	r3
    sck_->SetPinFunction(kPinSelect[pssp]);
   11ca8:	9b01      	ldr	r3, [sp, #4]
   11caa:	6918      	ldr	r0, [r3, #16]
   11cac:	9b01      	ldr	r3, [sp, #4]
   11cae:	691b      	ldr	r3, [r3, #16]
   11cb0:	681b      	ldr	r3, [r3, #0]
   11cb2:	681b      	ldr	r3, [r3, #0]
   11cb4:	4918      	ldr	r1, [pc, #96]	; (11d18 <Ssp::Initialize()+0xd8>)
   11cb6:	9a05      	ldr	r2, [sp, #20]
   11cb8:	440a      	add	r2, r1
   11cba:	7812      	ldrb	r2, [r2, #0]
   11cbc:	4611      	mov	r1, r2
   11cbe:	4798      	blx	r3
    // Enable SSP
    ssp_registers[pssp]->CR1 = bit::Set(ssp_registers[pssp]->CR1, kSspEnable);
   11cc0:	4a16      	ldr	r2, [pc, #88]	; (11d1c <Ssp::Initialize()+0xdc>)
   11cc2:	9b05      	ldr	r3, [sp, #20]
   11cc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11cc8:	685b      	ldr	r3, [r3, #4]
   11cca:	4914      	ldr	r1, [pc, #80]	; (11d1c <Ssp::Initialize()+0xdc>)
   11ccc:	9a05      	ldr	r2, [sp, #20]
   11cce:	f851 4022 	ldr.w	r4, [r1, r2, lsl #2]
   11cd2:	9304      	str	r3, [sp, #16]
   11cd4:	2301      	movs	r3, #1
   11cd6:	9303      	str	r3, [sp, #12]
   11cd8:	4633      	mov	r3, r6
   11cda:	4619      	mov	r1, r3
   11cdc:	4810      	ldr	r0, [pc, #64]	; (11d20 <Ssp::Initialize()+0xe0>)
   11cde:	f003 f98f 	bl	15000 <__cyg_profile_func_enter>
[[gnu::always_inline]] [[nodiscard]]
constexpr T Set(T target, uint32_t position)
{
  static_assert(std::numeric_limits<T>::is_integer,
                "Set only accepts intergers.");
  return target | (1 << position);
   11ce2:	2201      	movs	r2, #1
   11ce4:	9b03      	ldr	r3, [sp, #12]
   11ce6:	fa02 f303 	lsl.w	r3, r2, r3
   11cea:	461a      	mov	r2, r3
   11cec:	9b04      	ldr	r3, [sp, #16]
   11cee:	ea42 0503 	orr.w	r5, r2, r3
   11cf2:	4633      	mov	r3, r6
   11cf4:	4619      	mov	r1, r3
   11cf6:	480a      	ldr	r0, [pc, #40]	; (11d20 <Ssp::Initialize()+0xe0>)
   11cf8:	f003 f996 	bl	15028 <__cyg_profile_func_exit>
   11cfc:	6065      	str	r5, [r4, #4]
   11cfe:	4633      	mov	r3, r6
   11d00:	4619      	mov	r1, r3
   11d02:	4803      	ldr	r0, [pc, #12]	; (11d10 <Ssp::Initialize()+0xd0>)
   11d04:	f003 f990 	bl	15028 <__cyg_profile_func_exit>
  }
   11d08:	bf00      	nop
   11d0a:	b006      	add	sp, #24
   11d0c:	bd70      	pop	{r4, r5, r6, pc}
   11d0e:	bf00      	nop
   11d10:	00011c41 	.word	0x00011c41
   11d14:	000186ac 	.word	0x000186ac
   11d18:	00018660 	.word	0x00018660
   11d1c:	10000050 	.word	0x10000050
   11d20:	0001312d 	.word	0x0001312d

00011d24 <Ssp::IsTransferRegBusy()>:

  /// Checks if the SSP controller is idle.
  /// @returns true if the controller is sending or receiving a data frame and
  /// false if it is idle.
  bool IsTransferRegBusy() override
   11d24:	b530      	push	{r4, r5, lr}
   11d26:	b085      	sub	sp, #20
   11d28:	4675      	mov	r5, lr
   11d2a:	9001      	str	r0, [sp, #4]
   11d2c:	462b      	mov	r3, r5
   11d2e:	4619      	mov	r1, r3
   11d30:	4817      	ldr	r0, [pc, #92]	; (11d90 <Ssp::IsTransferRegBusy()+0x6c>)
   11d32:	f003 f965 	bl	15000 <__cyg_profile_func_enter>
  {
    return (bit::Read(ssp_registers[util::Value(pssp_)]->SR, kDataLineIdleBit));
   11d36:	9b01      	ldr	r3, [sp, #4]
   11d38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   11d3a:	4618      	mov	r0, r3
   11d3c:	f7ff fe98 	bl	11a70 <int util::Value<Ssp::Peripheral, int>(Ssp::Peripheral)>
   11d40:	4602      	mov	r2, r0
   11d42:	4b14      	ldr	r3, [pc, #80]	; (11d94 <Ssp::IsTransferRegBusy()+0x70>)
   11d44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   11d48:	68db      	ldr	r3, [r3, #12]
   11d4a:	9303      	str	r3, [sp, #12]
   11d4c:	2304      	movs	r3, #4
   11d4e:	9302      	str	r3, [sp, #8]
   11d50:	462b      	mov	r3, r5
   11d52:	4619      	mov	r1, r3
   11d54:	4810      	ldr	r0, [pc, #64]	; (11d98 <Ssp::IsTransferRegBusy()+0x74>)
   11d56:	f003 f953 	bl	15000 <__cyg_profile_func_enter>
[[gnu::always_inline]][[nodiscard]] constexpr bool Read(T target,
                                                        uint32_t position)
{
  static_assert(std::numeric_limits<T>::is_integer,
                "Read only accepts intergers.");
  return static_cast<bool>(target & (1 << position));
   11d5a:	2201      	movs	r2, #1
   11d5c:	9b02      	ldr	r3, [sp, #8]
   11d5e:	fa02 f303 	lsl.w	r3, r2, r3
   11d62:	461a      	mov	r2, r3
   11d64:	9b03      	ldr	r3, [sp, #12]
   11d66:	4013      	ands	r3, r2
   11d68:	2b00      	cmp	r3, #0
   11d6a:	bf14      	ite	ne
   11d6c:	2301      	movne	r3, #1
   11d6e:	2300      	moveq	r3, #0
   11d70:	b2dc      	uxtb	r4, r3
   11d72:	462b      	mov	r3, r5
   11d74:	4619      	mov	r1, r3
   11d76:	4808      	ldr	r0, [pc, #32]	; (11d98 <Ssp::IsTransferRegBusy()+0x74>)
   11d78:	f003 f956 	bl	15028 <__cyg_profile_func_exit>
   11d7c:	462b      	mov	r3, r5
   11d7e:	4619      	mov	r1, r3
   11d80:	4803      	ldr	r0, [pc, #12]	; (11d90 <Ssp::IsTransferRegBusy()+0x6c>)
   11d82:	f003 f951 	bl	15028 <__cyg_profile_func_exit>
   11d86:	4623      	mov	r3, r4
  }
   11d88:	4618      	mov	r0, r3
   11d8a:	b005      	add	sp, #20
   11d8c:	bd30      	pop	{r4, r5, pc}
   11d8e:	bf00      	nop
   11d90:	00011d25 	.word	0x00011d25
   11d94:	10000050 	.word	0x10000050
   11d98:	00013169 	.word	0x00013169

00011d9c <Ssp::Transfer(unsigned short)>:
  /// data register. This functions for both transmitting and
  /// receiving data. It is recommended this region be protected
  /// by a mutex.
  /// @param data - information to be placed in data register
  /// @return - received data from external device
  uint16_t Transfer(uint16_t data) override
   11d9c:	b530      	push	{r4, r5, lr}
   11d9e:	b085      	sub	sp, #20
   11da0:	4675      	mov	r5, lr
   11da2:	9001      	str	r0, [sp, #4]
   11da4:	460b      	mov	r3, r1
   11da6:	f8ad 3002 	strh.w	r3, [sp, #2]
   11daa:	462b      	mov	r3, r5
   11dac:	4619      	mov	r1, r3
   11dae:	4814      	ldr	r0, [pc, #80]	; (11e00 <Ssp::Transfer(unsigned short)+0x64>)
   11db0:	f003 f926 	bl	15000 <__cyg_profile_func_enter>
  {
    uint32_t pssp = util::Value(pssp_);
   11db4:	9b01      	ldr	r3, [sp, #4]
   11db6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   11db8:	4618      	mov	r0, r3
   11dba:	f7ff fe59 	bl	11a70 <int util::Value<Ssp::Peripheral, int>(Ssp::Peripheral)>
   11dbe:	4603      	mov	r3, r0
   11dc0:	9303      	str	r3, [sp, #12]

    ssp_registers[pssp]->DR = data;
   11dc2:	4a10      	ldr	r2, [pc, #64]	; (11e04 <Ssp::Transfer(unsigned short)+0x68>)
   11dc4:	9b03      	ldr	r3, [sp, #12]
   11dc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11dca:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   11dce:	609a      	str	r2, [r3, #8]
    while (IsTransferRegBusy())
   11dd0:	9801      	ldr	r0, [sp, #4]
   11dd2:	f7ff ffa7 	bl	11d24 <Ssp::IsTransferRegBusy()>
   11dd6:	4603      	mov	r3, r0
   11dd8:	2b00      	cmp	r3, #0
   11dda:	d001      	beq.n	11de0 <Ssp::Transfer(unsigned short)+0x44>
    {
      continue;
   11ddc:	bf00      	nop
    while (IsTransferRegBusy())
   11dde:	e7f7      	b.n	11dd0 <Ssp::Transfer(unsigned short)+0x34>
    }
    return static_cast<uint16_t>(ssp_registers[pssp]->DR);
   11de0:	4a08      	ldr	r2, [pc, #32]	; (11e04 <Ssp::Transfer(unsigned short)+0x68>)
   11de2:	9b03      	ldr	r3, [sp, #12]
   11de4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11de8:	689b      	ldr	r3, [r3, #8]
   11dea:	b29c      	uxth	r4, r3
   11dec:	462b      	mov	r3, r5
   11dee:	4619      	mov	r1, r3
   11df0:	4803      	ldr	r0, [pc, #12]	; (11e00 <Ssp::Transfer(unsigned short)+0x64>)
   11df2:	f003 f919 	bl	15028 <__cyg_profile_func_exit>
   11df6:	4623      	mov	r3, r4
  }
   11df8:	4618      	mov	r0, r3
   11dfa:	b005      	add	sp, #20
   11dfc:	bd30      	pop	{r4, r5, pc}
   11dfe:	bf00      	nop
   11e00:	00011d9d 	.word	0x00011d9d
   11e04:	10000050 	.word	0x10000050

00011e08 <Ssp::SetSpiMasterDefault()>:

  /// Sets up SSP peripheral as SPI master
  void SetSpiMasterDefault() override
   11e08:	b510      	push	{r4, lr}
   11e0a:	b086      	sub	sp, #24
   11e0c:	4674      	mov	r4, lr
   11e0e:	9003      	str	r0, [sp, #12]
   11e10:	4623      	mov	r3, r4
   11e12:	4619      	mov	r1, r3
   11e14:	4812      	ldr	r0, [pc, #72]	; (11e60 <Ssp::SetSpiMasterDefault()+0x58>)
   11e16:	f003 f8f3 	bl	15000 <__cyg_profile_func_enter>
  {
    constexpr bool kHighPolarity  = 1;
   11e1a:	2301      	movs	r3, #1
   11e1c:	f88d 3017 	strb.w	r3, [sp, #23]
    constexpr bool kPhase0        = 0;
   11e20:	2300      	movs	r3, #0
   11e22:	f88d 3016 	strb.w	r3, [sp, #22]
    constexpr uint8_t kScrDivider = 0;
   11e26:	2300      	movs	r3, #0
   11e28:	f88d 3015 	strb.w	r3, [sp, #21]
    constexpr uint8_t kPrescaler  = SJ2_SYSTEM_CLOCK_RATE_MHZ;
   11e2c:	2330      	movs	r3, #48	; 0x30
   11e2e:	f88d 3014 	strb.w	r3, [sp, #20]

    SetPeripheralMode(kMaster, kSpi, kEight);
   11e32:	2307      	movs	r3, #7
   11e34:	2200      	movs	r2, #0
   11e36:	2100      	movs	r1, #0
   11e38:	9803      	ldr	r0, [sp, #12]
   11e3a:	f000 f85b 	bl	11ef4 <Ssp::SetPeripheralMode(SspInterface::MasterSlaveMode, SspInterface::FrameMode, SspInterface::DataSize)>
    SetClock(kHighPolarity, kPhase0, kScrDivider, kPrescaler);
   11e3e:	2330      	movs	r3, #48	; 0x30
   11e40:	9300      	str	r3, [sp, #0]
   11e42:	2300      	movs	r3, #0
   11e44:	2200      	movs	r2, #0
   11e46:	2101      	movs	r1, #1
   11e48:	9803      	ldr	r0, [sp, #12]
   11e4a:	f000 fa09 	bl	12260 <Ssp::SetClock(bool, bool, unsigned char, unsigned char)>
   11e4e:	4623      	mov	r3, r4
   11e50:	4619      	mov	r1, r3
   11e52:	4803      	ldr	r0, [pc, #12]	; (11e60 <Ssp::SetSpiMasterDefault()+0x58>)
   11e54:	f003 f8e8 	bl	15028 <__cyg_profile_func_exit>
  }
   11e58:	bf00      	nop
   11e5a:	b006      	add	sp, #24
   11e5c:	bd10      	pop	{r4, pc}
   11e5e:	bf00      	nop
   11e60:	00011e09 	.word	0x00011e09

00011e64 <unsigned char util::Value<SspInterface::DataSize, unsigned char>(SspInterface::DataSize)>:
constexpr Type Value(Enum enum_type_value)
   11e64:	b530      	push	{r4, r5, lr}
   11e66:	b083      	sub	sp, #12
   11e68:	4675      	mov	r5, lr
   11e6a:	4603      	mov	r3, r0
   11e6c:	f88d 3007 	strb.w	r3, [sp, #7]
   11e70:	462b      	mov	r3, r5
   11e72:	4619      	mov	r1, r3
   11e74:	4806      	ldr	r0, [pc, #24]	; (11e90 <unsigned char util::Value<SspInterface::DataSize, unsigned char>(SspInterface::DataSize)+0x2c>)
   11e76:	f003 f8c3 	bl	15000 <__cyg_profile_func_enter>
  return static_cast<Type>(enum_type_value);
   11e7a:	f89d 4007 	ldrb.w	r4, [sp, #7]
   11e7e:	462b      	mov	r3, r5
   11e80:	4619      	mov	r1, r3
   11e82:	4803      	ldr	r0, [pc, #12]	; (11e90 <unsigned char util::Value<SspInterface::DataSize, unsigned char>(SspInterface::DataSize)+0x2c>)
   11e84:	f003 f8d0 	bl	15028 <__cyg_profile_func_exit>
   11e88:	4623      	mov	r3, r4
}
   11e8a:	4618      	mov	r0, r3
   11e8c:	b003      	add	sp, #12
   11e8e:	bd30      	pop	{r4, r5, pc}
   11e90:	00011e65 	.word	0x00011e65

00011e94 <unsigned char util::Value<SspInterface::FrameMode, unsigned char>(SspInterface::FrameMode)>:
constexpr Type Value(Enum enum_type_value)
   11e94:	b530      	push	{r4, r5, lr}
   11e96:	b083      	sub	sp, #12
   11e98:	4675      	mov	r5, lr
   11e9a:	4603      	mov	r3, r0
   11e9c:	f88d 3007 	strb.w	r3, [sp, #7]
   11ea0:	462b      	mov	r3, r5
   11ea2:	4619      	mov	r1, r3
   11ea4:	4806      	ldr	r0, [pc, #24]	; (11ec0 <unsigned char util::Value<SspInterface::FrameMode, unsigned char>(SspInterface::FrameMode)+0x2c>)
   11ea6:	f003 f8ab 	bl	15000 <__cyg_profile_func_enter>
  return static_cast<Type>(enum_type_value);
   11eaa:	f89d 4007 	ldrb.w	r4, [sp, #7]
   11eae:	462b      	mov	r3, r5
   11eb0:	4619      	mov	r1, r3
   11eb2:	4803      	ldr	r0, [pc, #12]	; (11ec0 <unsigned char util::Value<SspInterface::FrameMode, unsigned char>(SspInterface::FrameMode)+0x2c>)
   11eb4:	f003 f8b8 	bl	15028 <__cyg_profile_func_exit>
   11eb8:	4623      	mov	r3, r4
}
   11eba:	4618      	mov	r0, r3
   11ebc:	b003      	add	sp, #12
   11ebe:	bd30      	pop	{r4, r5, pc}
   11ec0:	00011e95 	.word	0x00011e95

00011ec4 <unsigned char util::Value<SspInterface::MasterSlaveMode, unsigned char>(SspInterface::MasterSlaveMode)>:
constexpr Type Value(Enum enum_type_value)
   11ec4:	b530      	push	{r4, r5, lr}
   11ec6:	b083      	sub	sp, #12
   11ec8:	4675      	mov	r5, lr
   11eca:	4603      	mov	r3, r0
   11ecc:	f88d 3007 	strb.w	r3, [sp, #7]
   11ed0:	462b      	mov	r3, r5
   11ed2:	4619      	mov	r1, r3
   11ed4:	4806      	ldr	r0, [pc, #24]	; (11ef0 <unsigned char util::Value<SspInterface::MasterSlaveMode, unsigned char>(SspInterface::MasterSlaveMode)+0x2c>)
   11ed6:	f003 f893 	bl	15000 <__cyg_profile_func_enter>
  return static_cast<Type>(enum_type_value);
   11eda:	f89d 4007 	ldrb.w	r4, [sp, #7]
   11ede:	462b      	mov	r3, r5
   11ee0:	4619      	mov	r1, r3
   11ee2:	4803      	ldr	r0, [pc, #12]	; (11ef0 <unsigned char util::Value<SspInterface::MasterSlaveMode, unsigned char>(SspInterface::MasterSlaveMode)+0x2c>)
   11ee4:	f003 f8a0 	bl	15028 <__cyg_profile_func_exit>
   11ee8:	4623      	mov	r3, r4
}
   11eea:	4618      	mov	r0, r3
   11eec:	b003      	add	sp, #12
   11eee:	bd30      	pop	{r4, r5, pc}
   11ef0:	00011ec5 	.word	0x00011ec5

00011ef4 <Ssp::SetPeripheralMode(SspInterface::MasterSlaveMode, SspInterface::FrameMode, SspInterface::DataSize)>:

  /// Sets the various modes for the Peripheral
  /// @param mode - master or slave mode
  /// @param frame - format for Peripheral data to use
  /// @param size - number of bits per frame
  void SetPeripheralMode(MasterSlaveMode mode, FrameMode frame,
   11ef4:	b570      	push	{r4, r5, r6, lr}
   11ef6:	b098      	sub	sp, #96	; 0x60
   11ef8:	4674      	mov	r4, lr
   11efa:	9001      	str	r0, [sp, #4]
   11efc:	4608      	mov	r0, r1
   11efe:	4611      	mov	r1, r2
   11f00:	461a      	mov	r2, r3
   11f02:	4603      	mov	r3, r0
   11f04:	f88d 3003 	strb.w	r3, [sp, #3]
   11f08:	460b      	mov	r3, r1
   11f0a:	f88d 3002 	strb.w	r3, [sp, #2]
   11f0e:	4613      	mov	r3, r2
   11f10:	f88d 3001 	strb.w	r3, [sp, #1]
   11f14:	4623      	mov	r3, r4
   11f16:	4619      	mov	r1, r3
   11f18:	4875      	ldr	r0, [pc, #468]	; (120f0 <Ssp::SetPeripheralMode(SspInterface::MasterSlaveMode, SspInterface::FrameMode, SspInterface::DataSize)+0x1fc>)
   11f1a:	f003 f871 	bl	15000 <__cyg_profile_func_enter>
                         DataSize size) override
  {
    uint32_t pssp = util::Value(pssp_);
   11f1e:	9b01      	ldr	r3, [sp, #4]
   11f20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   11f22:	4618      	mov	r0, r3
   11f24:	f7ff fda4 	bl	11a70 <int util::Value<Ssp::Peripheral, int>(Ssp::Peripheral)>
   11f28:	4603      	mov	r3, r0
   11f2a:	9317      	str	r3, [sp, #92]	; 0x5c
    // TODO(#371): Find a better alternative to powering up the peripheral for
    // every method.
    Ssp::PowerUpPeripheral(Ssp::kPowerBit[pssp]);
   11f2c:	9b01      	ldr	r3, [sp, #4]
   11f2e:	1d18      	adds	r0, r3, #4
   11f30:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   11f32:	009b      	lsls	r3, r3, #2
   11f34:	4a6f      	ldr	r2, [pc, #444]	; (120f4 <Ssp::SetPeripheralMode(SspInterface::MasterSlaveMode, SspInterface::FrameMode, SspInterface::DataSize)+0x200>)
   11f36:	4413      	add	r3, r2
   11f38:	4619      	mov	r1, r3
   11f3a:	f7ff fb7b 	bl	11634 <Lpc40xxSystemController::PowerUpPeripheral(SystemControllerInterface::PeripheralID const&)>
    if (frame == kMicro)
   11f3e:	f89d 3002 	ldrb.w	r3, [sp, #2]
   11f42:	2b02      	cmp	r3, #2
   11f44:	d102      	bne.n	11f4c <Ssp::SetPeripheralMode(SspInterface::MasterSlaveMode, SspInterface::FrameMode, SspInterface::DataSize)+0x58>
    {
      size = kEight;
   11f46:	2307      	movs	r3, #7
   11f48:	f88d 3001 	strb.w	r3, [sp, #1]
    }
    ssp_registers[pssp]->CR0 =
        bit::Insert(ssp_registers[pssp]->CR0, util::Value(size), kDataBit, 4);
   11f4c:	4a6a      	ldr	r2, [pc, #424]	; (120f8 <Ssp::SetPeripheralMode(SspInterface::MasterSlaveMode, SspInterface::FrameMode, SspInterface::DataSize)+0x204>)
   11f4e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   11f50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11f54:	681e      	ldr	r6, [r3, #0]
   11f56:	f89d 3001 	ldrb.w	r3, [sp, #1]
   11f5a:	4618      	mov	r0, r3
   11f5c:	f7ff ff82 	bl	11e64 <unsigned char util::Value<SspInterface::DataSize, unsigned char>(SspInterface::DataSize)>
   11f60:	4603      	mov	r3, r0
   11f62:	4619      	mov	r1, r3
    ssp_registers[pssp]->CR0 =
   11f64:	4a64      	ldr	r2, [pc, #400]	; (120f8 <Ssp::SetPeripheralMode(SspInterface::MasterSlaveMode, SspInterface::FrameMode, SspInterface::DataSize)+0x204>)
   11f66:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   11f68:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
   11f6c:	9608      	str	r6, [sp, #32]
   11f6e:	460b      	mov	r3, r1
   11f70:	f88d 301f 	strb.w	r3, [sp, #31]
   11f74:	2300      	movs	r3, #0
   11f76:	9306      	str	r3, [sp, #24]
   11f78:	2304      	movs	r3, #4
   11f7a:	9305      	str	r3, [sp, #20]
   11f7c:	4623      	mov	r3, r4
   11f7e:	4619      	mov	r1, r3
   11f80:	485e      	ldr	r0, [pc, #376]	; (120fc <Ssp::SetPeripheralMode(SspInterface::MasterSlaveMode, SspInterface::FrameMode, SspInterface::DataSize)+0x208>)
   11f82:	f003 f83d 	bl	15000 <__cyg_profile_func_enter>
  constexpr UnsignedT kFieldOfOnes = GenerateFieldOfOnes<T>();
   11f86:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   11f8a:	9304      	str	r3, [sp, #16]
  constexpr size_t kTargetWidth     = sizeof(T) * 8;
   11f8c:	2320      	movs	r3, #32
   11f8e:	9303      	str	r3, [sp, #12]
  UnsignedT mask   = kFieldOfOnes >> (kTargetWidth - width);
   11f90:	9b05      	ldr	r3, [sp, #20]
   11f92:	f1c3 0320 	rsb	r3, r3, #32
   11f96:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   11f9a:	fa22 f303 	lsr.w	r3, r2, r3
   11f9e:	9302      	str	r3, [sp, #8]
  target &= ~(mask << position);
   11fa0:	9a02      	ldr	r2, [sp, #8]
   11fa2:	9b06      	ldr	r3, [sp, #24]
   11fa4:	fa02 f303 	lsl.w	r3, r2, r3
   11fa8:	43db      	mvns	r3, r3
   11faa:	9a08      	ldr	r2, [sp, #32]
   11fac:	4013      	ands	r3, r2
   11fae:	9308      	str	r3, [sp, #32]
  target |= (value & mask) << position;
   11fb0:	f89d 201f 	ldrb.w	r2, [sp, #31]
   11fb4:	9b02      	ldr	r3, [sp, #8]
   11fb6:	401a      	ands	r2, r3
   11fb8:	9b06      	ldr	r3, [sp, #24]
   11fba:	fa02 f303 	lsl.w	r3, r2, r3
   11fbe:	9a08      	ldr	r2, [sp, #32]
   11fc0:	4313      	orrs	r3, r2
   11fc2:	9308      	str	r3, [sp, #32]
  return target;
   11fc4:	9e08      	ldr	r6, [sp, #32]
   11fc6:	4623      	mov	r3, r4
   11fc8:	4619      	mov	r1, r3
   11fca:	484c      	ldr	r0, [pc, #304]	; (120fc <Ssp::SetPeripheralMode(SspInterface::MasterSlaveMode, SspInterface::FrameMode, SspInterface::DataSize)+0x208>)
   11fcc:	f003 f82c 	bl	15028 <__cyg_profile_func_exit>
   11fd0:	602e      	str	r6, [r5, #0]
    ssp_registers[pssp]->CR0 =
        bit::Insert(ssp_registers[pssp]->CR0, util::Value(frame), kFrameBit, 2);
   11fd2:	4a49      	ldr	r2, [pc, #292]	; (120f8 <Ssp::SetPeripheralMode(SspInterface::MasterSlaveMode, SspInterface::FrameMode, SspInterface::DataSize)+0x204>)
   11fd4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   11fd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11fda:	681e      	ldr	r6, [r3, #0]
   11fdc:	f89d 3002 	ldrb.w	r3, [sp, #2]
   11fe0:	4618      	mov	r0, r3
   11fe2:	f7ff ff57 	bl	11e94 <unsigned char util::Value<SspInterface::FrameMode, unsigned char>(SspInterface::FrameMode)>
   11fe6:	4603      	mov	r3, r0
   11fe8:	4619      	mov	r1, r3
    ssp_registers[pssp]->CR0 =
   11fea:	4a43      	ldr	r2, [pc, #268]	; (120f8 <Ssp::SetPeripheralMode(SspInterface::MasterSlaveMode, SspInterface::FrameMode, SspInterface::DataSize)+0x204>)
   11fec:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   11fee:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
   11ff2:	960f      	str	r6, [sp, #60]	; 0x3c
   11ff4:	460b      	mov	r3, r1
   11ff6:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
   11ffa:	2304      	movs	r3, #4
   11ffc:	930d      	str	r3, [sp, #52]	; 0x34
   11ffe:	2302      	movs	r3, #2
   12000:	930c      	str	r3, [sp, #48]	; 0x30
   12002:	4623      	mov	r3, r4
   12004:	4619      	mov	r1, r3
   12006:	483d      	ldr	r0, [pc, #244]	; (120fc <Ssp::SetPeripheralMode(SspInterface::MasterSlaveMode, SspInterface::FrameMode, SspInterface::DataSize)+0x208>)
   12008:	f002 fffa 	bl	15000 <__cyg_profile_func_enter>
  constexpr UnsignedT kFieldOfOnes = GenerateFieldOfOnes<T>();
   1200c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   12010:	930b      	str	r3, [sp, #44]	; 0x2c
  constexpr size_t kTargetWidth     = sizeof(T) * 8;
   12012:	2320      	movs	r3, #32
   12014:	930a      	str	r3, [sp, #40]	; 0x28
  UnsignedT mask   = kFieldOfOnes >> (kTargetWidth - width);
   12016:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   12018:	f1c3 0320 	rsb	r3, r3, #32
   1201c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   12020:	fa22 f303 	lsr.w	r3, r2, r3
   12024:	9309      	str	r3, [sp, #36]	; 0x24
  target &= ~(mask << position);
   12026:	9a09      	ldr	r2, [sp, #36]	; 0x24
   12028:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1202a:	fa02 f303 	lsl.w	r3, r2, r3
   1202e:	43db      	mvns	r3, r3
   12030:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   12032:	4013      	ands	r3, r2
   12034:	930f      	str	r3, [sp, #60]	; 0x3c
  target |= (value & mask) << position;
   12036:	f89d 203b 	ldrb.w	r2, [sp, #59]	; 0x3b
   1203a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1203c:	401a      	ands	r2, r3
   1203e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   12040:	fa02 f303 	lsl.w	r3, r2, r3
   12044:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   12046:	4313      	orrs	r3, r2
   12048:	930f      	str	r3, [sp, #60]	; 0x3c
  return target;
   1204a:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
   1204c:	4623      	mov	r3, r4
   1204e:	4619      	mov	r1, r3
   12050:	482a      	ldr	r0, [pc, #168]	; (120fc <Ssp::SetPeripheralMode(SspInterface::MasterSlaveMode, SspInterface::FrameMode, SspInterface::DataSize)+0x208>)
   12052:	f002 ffe9 	bl	15028 <__cyg_profile_func_exit>
   12056:	602e      	str	r6, [r5, #0]
    ssp_registers[pssp]->CR1 = bit::Insert(
        ssp_registers[pssp]->CR1, util::Value(mode), kMasterModeBit, 1);
   12058:	4a27      	ldr	r2, [pc, #156]	; (120f8 <Ssp::SetPeripheralMode(SspInterface::MasterSlaveMode, SspInterface::FrameMode, SspInterface::DataSize)+0x204>)
   1205a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   1205c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12060:	685e      	ldr	r6, [r3, #4]
    ssp_registers[pssp]->CR1 = bit::Insert(
   12062:	f89d 3003 	ldrb.w	r3, [sp, #3]
   12066:	4618      	mov	r0, r3
   12068:	f7ff ff2c 	bl	11ec4 <unsigned char util::Value<SspInterface::MasterSlaveMode, unsigned char>(SspInterface::MasterSlaveMode)>
   1206c:	4603      	mov	r3, r0
   1206e:	4619      	mov	r1, r3
   12070:	4a21      	ldr	r2, [pc, #132]	; (120f8 <Ssp::SetPeripheralMode(SspInterface::MasterSlaveMode, SspInterface::FrameMode, SspInterface::DataSize)+0x204>)
   12072:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   12074:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
   12078:	9616      	str	r6, [sp, #88]	; 0x58
   1207a:	460b      	mov	r3, r1
   1207c:	f88d 3057 	strb.w	r3, [sp, #87]	; 0x57
   12080:	2302      	movs	r3, #2
   12082:	9314      	str	r3, [sp, #80]	; 0x50
   12084:	2301      	movs	r3, #1
   12086:	9313      	str	r3, [sp, #76]	; 0x4c
   12088:	4623      	mov	r3, r4
   1208a:	4619      	mov	r1, r3
   1208c:	481b      	ldr	r0, [pc, #108]	; (120fc <Ssp::SetPeripheralMode(SspInterface::MasterSlaveMode, SspInterface::FrameMode, SspInterface::DataSize)+0x208>)
   1208e:	f002 ffb7 	bl	15000 <__cyg_profile_func_enter>
  constexpr UnsignedT kFieldOfOnes = GenerateFieldOfOnes<T>();
   12092:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   12096:	9312      	str	r3, [sp, #72]	; 0x48
  constexpr size_t kTargetWidth     = sizeof(T) * 8;
   12098:	2320      	movs	r3, #32
   1209a:	9311      	str	r3, [sp, #68]	; 0x44
  UnsignedT mask   = kFieldOfOnes >> (kTargetWidth - width);
   1209c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   1209e:	f1c3 0320 	rsb	r3, r3, #32
   120a2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   120a6:	fa22 f303 	lsr.w	r3, r2, r3
   120aa:	9310      	str	r3, [sp, #64]	; 0x40
  target &= ~(mask << position);
   120ac:	9a10      	ldr	r2, [sp, #64]	; 0x40
   120ae:	9b14      	ldr	r3, [sp, #80]	; 0x50
   120b0:	fa02 f303 	lsl.w	r3, r2, r3
   120b4:	43db      	mvns	r3, r3
   120b6:	9a16      	ldr	r2, [sp, #88]	; 0x58
   120b8:	4013      	ands	r3, r2
   120ba:	9316      	str	r3, [sp, #88]	; 0x58
  target |= (value & mask) << position;
   120bc:	f89d 2057 	ldrb.w	r2, [sp, #87]	; 0x57
   120c0:	9b10      	ldr	r3, [sp, #64]	; 0x40
   120c2:	401a      	ands	r2, r3
   120c4:	9b14      	ldr	r3, [sp, #80]	; 0x50
   120c6:	fa02 f303 	lsl.w	r3, r2, r3
   120ca:	9a16      	ldr	r2, [sp, #88]	; 0x58
   120cc:	4313      	orrs	r3, r2
   120ce:	9316      	str	r3, [sp, #88]	; 0x58
  return target;
   120d0:	9e16      	ldr	r6, [sp, #88]	; 0x58
   120d2:	4623      	mov	r3, r4
   120d4:	4619      	mov	r1, r3
   120d6:	4809      	ldr	r0, [pc, #36]	; (120fc <Ssp::SetPeripheralMode(SspInterface::MasterSlaveMode, SspInterface::FrameMode, SspInterface::DataSize)+0x208>)
   120d8:	f002 ffa6 	bl	15028 <__cyg_profile_func_exit>
   120dc:	606e      	str	r6, [r5, #4]
   120de:	4623      	mov	r3, r4
   120e0:	4619      	mov	r1, r3
   120e2:	4803      	ldr	r0, [pc, #12]	; (120f0 <Ssp::SetPeripheralMode(SspInterface::MasterSlaveMode, SspInterface::FrameMode, SspInterface::DataSize)+0x1fc>)
   120e4:	f002 ffa0 	bl	15028 <__cyg_profile_func_exit>
  }
   120e8:	bf00      	nop
   120ea:	b018      	add	sp, #96	; 0x60
   120ec:	bd70      	pop	{r4, r5, r6, pc}
   120ee:	bf00      	nop
   120f0:	00011ef5 	.word	0x00011ef5
   120f4:	000186ac 	.word	0x000186ac
   120f8:	10000050 	.word	0x10000050
   120fc:	000131ad 	.word	0x000131ad

00012100 <Ssp::GetPeripheralMode()>:
  /// Gets the Peripheral modes from registers
  /// @return - returns a 16-bit value as follows: 0000_000x 0xx0_xxxx
  ///       MasterSlaveMode = 1-bit @ bit 8
  ///       FrameMode       = 2-bit @ bit 5
  ///       DataSize        = 4-bit @ bit 0
  uint16_t GetPeripheralMode() override
   12100:	b570      	push	{r4, r5, r6, lr}
   12102:	b096      	sub	sp, #88	; 0x58
   12104:	4674      	mov	r4, lr
   12106:	9001      	str	r0, [sp, #4]
   12108:	4623      	mov	r3, r4
   1210a:	4619      	mov	r1, r3
   1210c:	4850      	ldr	r0, [pc, #320]	; (12250 <Ssp::GetPeripheralMode()+0x150>)
   1210e:	f002 ff77 	bl	15000 <__cyg_profile_func_enter>
  {
    uint16_t return_val = 0;
   12112:	2300      	movs	r3, #0
   12114:	f8ad 3056 	strh.w	r3, [sp, #86]	; 0x56
    uint32_t pssp       = util::Value(pssp_);
   12118:	9b01      	ldr	r3, [sp, #4]
   1211a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1211c:	4618      	mov	r0, r3
   1211e:	f7ff fca7 	bl	11a70 <int util::Value<Ssp::Peripheral, int>(Ssp::Peripheral)>
   12122:	4603      	mov	r3, r0
   12124:	9314      	str	r3, [sp, #80]	; 0x50
    // TODO(#371): Find a better alternative to powering up the peripheral for
    // every method.
    Ssp::PowerUpPeripheral(Ssp::kPowerBit[pssp]);
   12126:	9b01      	ldr	r3, [sp, #4]
   12128:	1d18      	adds	r0, r3, #4
   1212a:	9b14      	ldr	r3, [sp, #80]	; 0x50
   1212c:	009b      	lsls	r3, r3, #2
   1212e:	4a49      	ldr	r2, [pc, #292]	; (12254 <Ssp::GetPeripheralMode()+0x154>)
   12130:	4413      	add	r3, r2
   12132:	4619      	mov	r1, r3
   12134:	f7ff fa7e 	bl	11634 <Lpc40xxSystemController::PowerUpPeripheral(SystemControllerInterface::PeripheralID const&)>

    return_val = static_cast<uint16_t>(
        (bit::Extract(ssp_registers[pssp]->CR0, kDataBit, 4)) +
   12138:	4a47      	ldr	r2, [pc, #284]	; (12258 <Ssp::GetPeripheralMode()+0x158>)
   1213a:	9b14      	ldr	r3, [sp, #80]	; 0x50
   1213c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12140:	681b      	ldr	r3, [r3, #0]
   12142:	9307      	str	r3, [sp, #28]
   12144:	2300      	movs	r3, #0
   12146:	9306      	str	r3, [sp, #24]
   12148:	2304      	movs	r3, #4
   1214a:	9305      	str	r3, [sp, #20]
   1214c:	4623      	mov	r3, r4
   1214e:	4619      	mov	r1, r3
   12150:	4842      	ldr	r0, [pc, #264]	; (1225c <Ssp::GetPeripheralMode()+0x15c>)
   12152:	f002 ff55 	bl	15000 <__cyg_profile_func_enter>
  constexpr UnsignedT kFieldOfOnes = GenerateFieldOfOnes<T>();
   12156:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1215a:	9304      	str	r3, [sp, #16]
  constexpr size_t kTargetWidth     = sizeof(T) * 8;
   1215c:	2320      	movs	r3, #32
   1215e:	9303      	str	r3, [sp, #12]
  UnsignedT mask   = kFieldOfOnes >> (kTargetWidth - width);
   12160:	9b05      	ldr	r3, [sp, #20]
   12162:	f1c3 0320 	rsb	r3, r3, #32
   12166:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1216a:	fa22 f303 	lsr.w	r3, r2, r3
   1216e:	9302      	str	r3, [sp, #8]
  return (target >> position) & mask;
   12170:	9a07      	ldr	r2, [sp, #28]
   12172:	9b06      	ldr	r3, [sp, #24]
   12174:	40da      	lsrs	r2, r3
   12176:	9b02      	ldr	r3, [sp, #8]
   12178:	ea02 0503 	and.w	r5, r2, r3
   1217c:	4623      	mov	r3, r4
   1217e:	4619      	mov	r1, r3
   12180:	4836      	ldr	r0, [pc, #216]	; (1225c <Ssp::GetPeripheralMode()+0x15c>)
   12182:	f002 ff51 	bl	15028 <__cyg_profile_func_exit>
   12186:	b2ad      	uxth	r5, r5
        ((bit::Extract(ssp_registers[pssp]->CR0, kFrameBit, 2)) << 5) +
   12188:	4a33      	ldr	r2, [pc, #204]	; (12258 <Ssp::GetPeripheralMode()+0x158>)
   1218a:	9b14      	ldr	r3, [sp, #80]	; 0x50
   1218c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12190:	681b      	ldr	r3, [r3, #0]
   12192:	930d      	str	r3, [sp, #52]	; 0x34
   12194:	2304      	movs	r3, #4
   12196:	930c      	str	r3, [sp, #48]	; 0x30
   12198:	2302      	movs	r3, #2
   1219a:	930b      	str	r3, [sp, #44]	; 0x2c
   1219c:	4623      	mov	r3, r4
   1219e:	4619      	mov	r1, r3
   121a0:	482e      	ldr	r0, [pc, #184]	; (1225c <Ssp::GetPeripheralMode()+0x15c>)
   121a2:	f002 ff2d 	bl	15000 <__cyg_profile_func_enter>
  constexpr UnsignedT kFieldOfOnes = GenerateFieldOfOnes<T>();
   121a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   121aa:	930a      	str	r3, [sp, #40]	; 0x28
  constexpr size_t kTargetWidth     = sizeof(T) * 8;
   121ac:	2320      	movs	r3, #32
   121ae:	9309      	str	r3, [sp, #36]	; 0x24
  UnsignedT mask   = kFieldOfOnes >> (kTargetWidth - width);
   121b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   121b2:	f1c3 0320 	rsb	r3, r3, #32
   121b6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   121ba:	fa22 f303 	lsr.w	r3, r2, r3
   121be:	9308      	str	r3, [sp, #32]
  return (target >> position) & mask;
   121c0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   121c2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   121c4:	40da      	lsrs	r2, r3
   121c6:	9b08      	ldr	r3, [sp, #32]
   121c8:	ea02 0603 	and.w	r6, r2, r3
   121cc:	4623      	mov	r3, r4
   121ce:	4619      	mov	r1, r3
   121d0:	4822      	ldr	r0, [pc, #136]	; (1225c <Ssp::GetPeripheralMode()+0x15c>)
   121d2:	f002 ff29 	bl	15028 <__cyg_profile_func_exit>
   121d6:	b2b3      	uxth	r3, r6
   121d8:	015b      	lsls	r3, r3, #5
   121da:	b29b      	uxth	r3, r3
        (bit::Extract(ssp_registers[pssp]->CR0, kDataBit, 4)) +
   121dc:	442b      	add	r3, r5
   121de:	b29d      	uxth	r5, r3
        ((bit::Extract(ssp_registers[pssp]->CR1, kMasterModeBit)) << 8));
   121e0:	4a1d      	ldr	r2, [pc, #116]	; (12258 <Ssp::GetPeripheralMode()+0x158>)
   121e2:	9b14      	ldr	r3, [sp, #80]	; 0x50
   121e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   121e8:	685b      	ldr	r3, [r3, #4]
   121ea:	9313      	str	r3, [sp, #76]	; 0x4c
   121ec:	2302      	movs	r3, #2
   121ee:	9312      	str	r3, [sp, #72]	; 0x48
   121f0:	2301      	movs	r3, #1
   121f2:	9311      	str	r3, [sp, #68]	; 0x44
   121f4:	4623      	mov	r3, r4
   121f6:	4619      	mov	r1, r3
   121f8:	4818      	ldr	r0, [pc, #96]	; (1225c <Ssp::GetPeripheralMode()+0x15c>)
   121fa:	f002 ff01 	bl	15000 <__cyg_profile_func_enter>
  constexpr UnsignedT kFieldOfOnes = GenerateFieldOfOnes<T>();
   121fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   12202:	9310      	str	r3, [sp, #64]	; 0x40
  constexpr size_t kTargetWidth     = sizeof(T) * 8;
   12204:	2320      	movs	r3, #32
   12206:	930f      	str	r3, [sp, #60]	; 0x3c
  UnsignedT mask   = kFieldOfOnes >> (kTargetWidth - width);
   12208:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1220a:	f1c3 0320 	rsb	r3, r3, #32
   1220e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   12212:	fa22 f303 	lsr.w	r3, r2, r3
   12216:	930e      	str	r3, [sp, #56]	; 0x38
  return (target >> position) & mask;
   12218:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   1221a:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1221c:	40da      	lsrs	r2, r3
   1221e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   12220:	ea02 0603 	and.w	r6, r2, r3
   12224:	4623      	mov	r3, r4
   12226:	4619      	mov	r1, r3
   12228:	480c      	ldr	r0, [pc, #48]	; (1225c <Ssp::GetPeripheralMode()+0x15c>)
   1222a:	f002 fefd 	bl	15028 <__cyg_profile_func_exit>
   1222e:	b2b3      	uxth	r3, r6
   12230:	021b      	lsls	r3, r3, #8
   12232:	b29b      	uxth	r3, r3
    return_val = static_cast<uint16_t>(
   12234:	442b      	add	r3, r5
   12236:	f8ad 3056 	strh.w	r3, [sp, #86]	; 0x56
    return return_val;
   1223a:	f8bd 5056 	ldrh.w	r5, [sp, #86]	; 0x56
   1223e:	4623      	mov	r3, r4
   12240:	4619      	mov	r1, r3
   12242:	4803      	ldr	r0, [pc, #12]	; (12250 <Ssp::GetPeripheralMode()+0x150>)
   12244:	f002 fef0 	bl	15028 <__cyg_profile_func_exit>
   12248:	462b      	mov	r3, r5
  }
   1224a:	4618      	mov	r0, r3
   1224c:	b016      	add	sp, #88	; 0x58
   1224e:	bd70      	pop	{r4, r5, r6, pc}
   12250:	00012101 	.word	0x00012101
   12254:	000186ac 	.word	0x000186ac
   12258:	10000050 	.word	0x10000050
   1225c:	00013221 	.word	0x00013221

00012260 <Ssp::SetClock(bool, bool, unsigned char, unsigned char)>:
  /// Sets the clock rate for the Peripheral
  /// @param polarity - maintain bus on clock 0=low or 1=high between frames
  /// @param phase - capture serial data on 0=first or 1=second clock cycle
  /// @param divider - see notes in SSP_Interface above
  /// @param prescaler - divides the PCLK, must be even value between 2-254
  void SetClock(bool polarity, bool phase, uint8_t divider,
   12260:	b570      	push	{r4, r5, r6, lr}
   12262:	b098      	sub	sp, #96	; 0x60
   12264:	4674      	mov	r4, lr
   12266:	9001      	str	r0, [sp, #4]
   12268:	4608      	mov	r0, r1
   1226a:	4611      	mov	r1, r2
   1226c:	461a      	mov	r2, r3
   1226e:	4603      	mov	r3, r0
   12270:	f88d 3003 	strb.w	r3, [sp, #3]
   12274:	460b      	mov	r3, r1
   12276:	f88d 3002 	strb.w	r3, [sp, #2]
   1227a:	4613      	mov	r3, r2
   1227c:	f88d 3001 	strb.w	r3, [sp, #1]
   12280:	4623      	mov	r3, r4
   12282:	4619      	mov	r1, r3
   12284:	486c      	ldr	r0, [pc, #432]	; (12438 <Ssp::SetClock(bool, bool, unsigned char, unsigned char)+0x1d8>)
   12286:	f002 febb 	bl	15000 <__cyg_profile_func_enter>
                uint8_t prescaler) override
  {
    uint32_t pssp = util::Value(pssp_);
   1228a:	9b01      	ldr	r3, [sp, #4]
   1228c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1228e:	4618      	mov	r0, r3
   12290:	f7ff fbee 	bl	11a70 <int util::Value<Ssp::Peripheral, int>(Ssp::Peripheral)>
   12294:	4603      	mov	r3, r0
   12296:	9317      	str	r3, [sp, #92]	; 0x5c
    // TODO(#371): Find a better alternative to powering up the peripheral for
    // every method.
    Ssp::PowerUpPeripheral(Ssp::kPowerBit[pssp]);
   12298:	9b01      	ldr	r3, [sp, #4]
   1229a:	1d18      	adds	r0, r3, #4
   1229c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   1229e:	009b      	lsls	r3, r3, #2
   122a0:	4a66      	ldr	r2, [pc, #408]	; (1243c <Ssp::SetClock(bool, bool, unsigned char, unsigned char)+0x1dc>)
   122a2:	4413      	add	r3, r2
   122a4:	4619      	mov	r1, r3
   122a6:	f7ff f9c5 	bl	11634 <Lpc40xxSystemController::PowerUpPeripheral(SystemControllerInterface::PeripheralID const&)>
    // first clear the appropriate registers
    ssp_registers[pssp]->CR0 =
        bit::Insert(ssp_registers[pssp]->CR0, polarity, kPolarityBit, 1);
   122aa:	4a65      	ldr	r2, [pc, #404]	; (12440 <Ssp::SetClock(bool, bool, unsigned char, unsigned char)+0x1e0>)
   122ac:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   122ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   122b2:	681b      	ldr	r3, [r3, #0]
    ssp_registers[pssp]->CR0 =
   122b4:	4962      	ldr	r1, [pc, #392]	; (12440 <Ssp::SetClock(bool, bool, unsigned char, unsigned char)+0x1e0>)
   122b6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   122b8:	f851 5022 	ldr.w	r5, [r1, r2, lsl #2]
   122bc:	9308      	str	r3, [sp, #32]
   122be:	f89d 3003 	ldrb.w	r3, [sp, #3]
   122c2:	f88d 301f 	strb.w	r3, [sp, #31]
   122c6:	2306      	movs	r3, #6
   122c8:	9306      	str	r3, [sp, #24]
   122ca:	2301      	movs	r3, #1
   122cc:	9305      	str	r3, [sp, #20]
   122ce:	4623      	mov	r3, r4
   122d0:	4619      	mov	r1, r3
   122d2:	485c      	ldr	r0, [pc, #368]	; (12444 <Ssp::SetClock(bool, bool, unsigned char, unsigned char)+0x1e4>)
   122d4:	f002 fe94 	bl	15000 <__cyg_profile_func_enter>
  constexpr UnsignedT kFieldOfOnes = GenerateFieldOfOnes<T>();
   122d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   122dc:	9304      	str	r3, [sp, #16]
  constexpr size_t kTargetWidth     = sizeof(T) * 8;
   122de:	2320      	movs	r3, #32
   122e0:	9303      	str	r3, [sp, #12]
  UnsignedT mask   = kFieldOfOnes >> (kTargetWidth - width);
   122e2:	9b05      	ldr	r3, [sp, #20]
   122e4:	f1c3 0320 	rsb	r3, r3, #32
   122e8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   122ec:	fa22 f303 	lsr.w	r3, r2, r3
   122f0:	9302      	str	r3, [sp, #8]
  target &= ~(mask << position);
   122f2:	9a02      	ldr	r2, [sp, #8]
   122f4:	9b06      	ldr	r3, [sp, #24]
   122f6:	fa02 f303 	lsl.w	r3, r2, r3
   122fa:	43db      	mvns	r3, r3
   122fc:	9a08      	ldr	r2, [sp, #32]
   122fe:	4013      	ands	r3, r2
   12300:	9308      	str	r3, [sp, #32]
  target |= (value & mask) << position;
   12302:	f89d 201f 	ldrb.w	r2, [sp, #31]
   12306:	9b02      	ldr	r3, [sp, #8]
   12308:	401a      	ands	r2, r3
   1230a:	9b06      	ldr	r3, [sp, #24]
   1230c:	fa02 f303 	lsl.w	r3, r2, r3
   12310:	9a08      	ldr	r2, [sp, #32]
   12312:	4313      	orrs	r3, r2
   12314:	9308      	str	r3, [sp, #32]
  return target;
   12316:	9e08      	ldr	r6, [sp, #32]
   12318:	4623      	mov	r3, r4
   1231a:	4619      	mov	r1, r3
   1231c:	4849      	ldr	r0, [pc, #292]	; (12444 <Ssp::SetClock(bool, bool, unsigned char, unsigned char)+0x1e4>)
   1231e:	f002 fe83 	bl	15028 <__cyg_profile_func_exit>
   12322:	602e      	str	r6, [r5, #0]
    ssp_registers[pssp]->CR0 =
        bit::Insert(ssp_registers[pssp]->CR0, phase, kPhaseBit, 1);
   12324:	4a46      	ldr	r2, [pc, #280]	; (12440 <Ssp::SetClock(bool, bool, unsigned char, unsigned char)+0x1e0>)
   12326:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   12328:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1232c:	681b      	ldr	r3, [r3, #0]
    ssp_registers[pssp]->CR0 =
   1232e:	4944      	ldr	r1, [pc, #272]	; (12440 <Ssp::SetClock(bool, bool, unsigned char, unsigned char)+0x1e0>)
   12330:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   12332:	f851 5022 	ldr.w	r5, [r1, r2, lsl #2]
   12336:	930f      	str	r3, [sp, #60]	; 0x3c
   12338:	f89d 3002 	ldrb.w	r3, [sp, #2]
   1233c:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
   12340:	2307      	movs	r3, #7
   12342:	930d      	str	r3, [sp, #52]	; 0x34
   12344:	2301      	movs	r3, #1
   12346:	930c      	str	r3, [sp, #48]	; 0x30
   12348:	4623      	mov	r3, r4
   1234a:	4619      	mov	r1, r3
   1234c:	483d      	ldr	r0, [pc, #244]	; (12444 <Ssp::SetClock(bool, bool, unsigned char, unsigned char)+0x1e4>)
   1234e:	f002 fe57 	bl	15000 <__cyg_profile_func_enter>
  constexpr UnsignedT kFieldOfOnes = GenerateFieldOfOnes<T>();
   12352:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   12356:	930b      	str	r3, [sp, #44]	; 0x2c
  constexpr size_t kTargetWidth     = sizeof(T) * 8;
   12358:	2320      	movs	r3, #32
   1235a:	930a      	str	r3, [sp, #40]	; 0x28
  UnsignedT mask   = kFieldOfOnes >> (kTargetWidth - width);
   1235c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1235e:	f1c3 0320 	rsb	r3, r3, #32
   12362:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   12366:	fa22 f303 	lsr.w	r3, r2, r3
   1236a:	9309      	str	r3, [sp, #36]	; 0x24
  target &= ~(mask << position);
   1236c:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1236e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   12370:	fa02 f303 	lsl.w	r3, r2, r3
   12374:	43db      	mvns	r3, r3
   12376:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   12378:	4013      	ands	r3, r2
   1237a:	930f      	str	r3, [sp, #60]	; 0x3c
  target |= (value & mask) << position;
   1237c:	f89d 203b 	ldrb.w	r2, [sp, #59]	; 0x3b
   12380:	9b09      	ldr	r3, [sp, #36]	; 0x24
   12382:	401a      	ands	r2, r3
   12384:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   12386:	fa02 f303 	lsl.w	r3, r2, r3
   1238a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   1238c:	4313      	orrs	r3, r2
   1238e:	930f      	str	r3, [sp, #60]	; 0x3c
  return target;
   12390:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
   12392:	4623      	mov	r3, r4
   12394:	4619      	mov	r1, r3
   12396:	482b      	ldr	r0, [pc, #172]	; (12444 <Ssp::SetClock(bool, bool, unsigned char, unsigned char)+0x1e4>)
   12398:	f002 fe46 	bl	15028 <__cyg_profile_func_exit>
   1239c:	602e      	str	r6, [r5, #0]
    ssp_registers[pssp]->CR0 =
        bit::Insert(ssp_registers[pssp]->CR0, divider, kDividerBit, 8);
   1239e:	4a28      	ldr	r2, [pc, #160]	; (12440 <Ssp::SetClock(bool, bool, unsigned char, unsigned char)+0x1e0>)
   123a0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   123a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   123a6:	681b      	ldr	r3, [r3, #0]
    ssp_registers[pssp]->CR0 =
   123a8:	4925      	ldr	r1, [pc, #148]	; (12440 <Ssp::SetClock(bool, bool, unsigned char, unsigned char)+0x1e0>)
   123aa:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   123ac:	f851 5022 	ldr.w	r5, [r1, r2, lsl #2]
   123b0:	9316      	str	r3, [sp, #88]	; 0x58
   123b2:	f89d 3001 	ldrb.w	r3, [sp, #1]
   123b6:	f88d 3057 	strb.w	r3, [sp, #87]	; 0x57
   123ba:	2308      	movs	r3, #8
   123bc:	9314      	str	r3, [sp, #80]	; 0x50
   123be:	2308      	movs	r3, #8
   123c0:	9313      	str	r3, [sp, #76]	; 0x4c
   123c2:	4623      	mov	r3, r4
   123c4:	4619      	mov	r1, r3
   123c6:	4820      	ldr	r0, [pc, #128]	; (12448 <Ssp::SetClock(bool, bool, unsigned char, unsigned char)+0x1e8>)
   123c8:	f002 fe1a 	bl	15000 <__cyg_profile_func_enter>
  constexpr UnsignedT kFieldOfOnes = GenerateFieldOfOnes<T>();
   123cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   123d0:	9312      	str	r3, [sp, #72]	; 0x48
  constexpr size_t kTargetWidth     = sizeof(T) * 8;
   123d2:	2320      	movs	r3, #32
   123d4:	9311      	str	r3, [sp, #68]	; 0x44
  UnsignedT mask   = kFieldOfOnes >> (kTargetWidth - width);
   123d6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   123d8:	f1c3 0320 	rsb	r3, r3, #32
   123dc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   123e0:	fa22 f303 	lsr.w	r3, r2, r3
   123e4:	9310      	str	r3, [sp, #64]	; 0x40
  target &= ~(mask << position);
   123e6:	9a10      	ldr	r2, [sp, #64]	; 0x40
   123e8:	9b14      	ldr	r3, [sp, #80]	; 0x50
   123ea:	fa02 f303 	lsl.w	r3, r2, r3
   123ee:	43db      	mvns	r3, r3
   123f0:	9a16      	ldr	r2, [sp, #88]	; 0x58
   123f2:	4013      	ands	r3, r2
   123f4:	9316      	str	r3, [sp, #88]	; 0x58
  target |= (value & mask) << position;
   123f6:	f89d 2057 	ldrb.w	r2, [sp, #87]	; 0x57
   123fa:	9b10      	ldr	r3, [sp, #64]	; 0x40
   123fc:	401a      	ands	r2, r3
   123fe:	9b14      	ldr	r3, [sp, #80]	; 0x50
   12400:	fa02 f303 	lsl.w	r3, r2, r3
   12404:	9a16      	ldr	r2, [sp, #88]	; 0x58
   12406:	4313      	orrs	r3, r2
   12408:	9316      	str	r3, [sp, #88]	; 0x58
  return target;
   1240a:	9e16      	ldr	r6, [sp, #88]	; 0x58
   1240c:	4623      	mov	r3, r4
   1240e:	4619      	mov	r1, r3
   12410:	480d      	ldr	r0, [pc, #52]	; (12448 <Ssp::SetClock(bool, bool, unsigned char, unsigned char)+0x1e8>)
   12412:	f002 fe09 	bl	15028 <__cyg_profile_func_exit>
   12416:	602e      	str	r6, [r5, #0]
    ssp_registers[pssp]->CPSR = prescaler;
   12418:	4a09      	ldr	r2, [pc, #36]	; (12440 <Ssp::SetClock(bool, bool, unsigned char, unsigned char)+0x1e0>)
   1241a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   1241c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12420:	f89d 2070 	ldrb.w	r2, [sp, #112]	; 0x70
   12424:	611a      	str	r2, [r3, #16]
   12426:	4623      	mov	r3, r4
   12428:	4619      	mov	r1, r3
   1242a:	4803      	ldr	r0, [pc, #12]	; (12438 <Ssp::SetClock(bool, bool, unsigned char, unsigned char)+0x1d8>)
   1242c:	f002 fdfc 	bl	15028 <__cyg_profile_func_exit>
  }
   12430:	bf00      	nop
   12432:	b018      	add	sp, #96	; 0x60
   12434:	bd70      	pop	{r4, r5, r6, pc}
   12436:	bf00      	nop
   12438:	00012261 	.word	0x00012261
   1243c:	000186ac 	.word	0x000186ac
   12440:	10000050 	.word	0x10000050
   12444:	00013275 	.word	0x00013275
   12448:	000131ad 	.word	0x000131ad

0001244c <Ssp::GetClock()>:
  ///   0000_0000 0000_0x0x xxxx_xxxx xxxx_xxxx
  ///       polarity    = 1-bit @ bit 18
  ///       phase       = 1-bit @ bit 16
  ///       divider     = 8-bits @ bit 8
  ///       prescaler   = 8-bits @ bit 0
  uint32_t GetClock() override
   1244c:	b570      	push	{r4, r5, r6, lr}
   1244e:	b094      	sub	sp, #80	; 0x50
   12450:	4674      	mov	r4, lr
   12452:	9001      	str	r0, [sp, #4]
   12454:	4623      	mov	r3, r4
   12456:	4619      	mov	r1, r3
   12458:	4858      	ldr	r0, [pc, #352]	; (125bc <Ssp::GetClock()+0x170>)
   1245a:	f002 fdd1 	bl	15000 <__cyg_profile_func_enter>
  {
    uint32_t return_val = 0;
   1245e:	2300      	movs	r3, #0
   12460:	9313      	str	r3, [sp, #76]	; 0x4c
    uint32_t pssp       = util::Value(pssp_);
   12462:	9b01      	ldr	r3, [sp, #4]
   12464:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   12466:	4618      	mov	r0, r3
   12468:	f7ff fb02 	bl	11a70 <int util::Value<Ssp::Peripheral, int>(Ssp::Peripheral)>
   1246c:	4603      	mov	r3, r0
   1246e:	9312      	str	r3, [sp, #72]	; 0x48
    // TODO(#371): Find a better alternative to powering up the peripheral for
    // every method.
    Ssp::PowerUpPeripheral(Ssp::kPowerBit[pssp]);
   12470:	9b01      	ldr	r3, [sp, #4]
   12472:	1d18      	adds	r0, r3, #4
   12474:	9b12      	ldr	r3, [sp, #72]	; 0x48
   12476:	009b      	lsls	r3, r3, #2
   12478:	4a51      	ldr	r2, [pc, #324]	; (125c0 <Ssp::GetClock()+0x174>)
   1247a:	4413      	add	r3, r2
   1247c:	4619      	mov	r1, r3
   1247e:	f7ff f8d9 	bl	11634 <Lpc40xxSystemController::PowerUpPeripheral(SystemControllerInterface::PeripheralID const&)>

    return_val =
        (bit::Extract(ssp_registers[pssp]->CPSR, kPrescalerBit, 8)) +
   12482:	4a50      	ldr	r2, [pc, #320]	; (125c4 <Ssp::GetClock()+0x178>)
   12484:	9b12      	ldr	r3, [sp, #72]	; 0x48
   12486:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1248a:	691b      	ldr	r3, [r3, #16]
   1248c:	9307      	str	r3, [sp, #28]
   1248e:	2300      	movs	r3, #0
   12490:	9306      	str	r3, [sp, #24]
   12492:	2308      	movs	r3, #8
   12494:	9305      	str	r3, [sp, #20]
   12496:	4623      	mov	r3, r4
   12498:	4619      	mov	r1, r3
   1249a:	484b      	ldr	r0, [pc, #300]	; (125c8 <Ssp::GetClock()+0x17c>)
   1249c:	f002 fdb0 	bl	15000 <__cyg_profile_func_enter>
  constexpr UnsignedT kFieldOfOnes = GenerateFieldOfOnes<T>();
   124a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   124a4:	9304      	str	r3, [sp, #16]
  constexpr size_t kTargetWidth     = sizeof(T) * 8;
   124a6:	2320      	movs	r3, #32
   124a8:	9303      	str	r3, [sp, #12]
  UnsignedT mask   = kFieldOfOnes >> (kTargetWidth - width);
   124aa:	9b05      	ldr	r3, [sp, #20]
   124ac:	f1c3 0320 	rsb	r3, r3, #32
   124b0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   124b4:	fa22 f303 	lsr.w	r3, r2, r3
   124b8:	9302      	str	r3, [sp, #8]
  return (target >> position) & mask;
   124ba:	9a07      	ldr	r2, [sp, #28]
   124bc:	9b06      	ldr	r3, [sp, #24]
   124be:	40da      	lsrs	r2, r3
   124c0:	9b02      	ldr	r3, [sp, #8]
   124c2:	ea02 0503 	and.w	r5, r2, r3
   124c6:	4623      	mov	r3, r4
   124c8:	4619      	mov	r1, r3
   124ca:	483f      	ldr	r0, [pc, #252]	; (125c8 <Ssp::GetClock()+0x17c>)
   124cc:	f002 fdac 	bl	15028 <__cyg_profile_func_exit>
        ((bit::Extract(ssp_registers[pssp]->CR0, kDividerBit, 8)) << 8) +
   124d0:	4a3c      	ldr	r2, [pc, #240]	; (125c4 <Ssp::GetClock()+0x178>)
   124d2:	9b12      	ldr	r3, [sp, #72]	; 0x48
   124d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   124d8:	681b      	ldr	r3, [r3, #0]
   124da:	930d      	str	r3, [sp, #52]	; 0x34
   124dc:	2308      	movs	r3, #8
   124de:	930c      	str	r3, [sp, #48]	; 0x30
   124e0:	2308      	movs	r3, #8
   124e2:	930b      	str	r3, [sp, #44]	; 0x2c
   124e4:	4623      	mov	r3, r4
   124e6:	4619      	mov	r1, r3
   124e8:	4837      	ldr	r0, [pc, #220]	; (125c8 <Ssp::GetClock()+0x17c>)
   124ea:	f002 fd89 	bl	15000 <__cyg_profile_func_enter>
  constexpr UnsignedT kFieldOfOnes = GenerateFieldOfOnes<T>();
   124ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   124f2:	930a      	str	r3, [sp, #40]	; 0x28
  constexpr size_t kTargetWidth     = sizeof(T) * 8;
   124f4:	2320      	movs	r3, #32
   124f6:	9309      	str	r3, [sp, #36]	; 0x24
  UnsignedT mask   = kFieldOfOnes >> (kTargetWidth - width);
   124f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   124fa:	f1c3 0320 	rsb	r3, r3, #32
   124fe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   12502:	fa22 f303 	lsr.w	r3, r2, r3
   12506:	9308      	str	r3, [sp, #32]
  return (target >> position) & mask;
   12508:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   1250a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1250c:	40da      	lsrs	r2, r3
   1250e:	9b08      	ldr	r3, [sp, #32]
   12510:	ea02 0603 	and.w	r6, r2, r3
   12514:	4623      	mov	r3, r4
   12516:	4619      	mov	r1, r3
   12518:	482b      	ldr	r0, [pc, #172]	; (125c8 <Ssp::GetClock()+0x17c>)
   1251a:	f002 fd85 	bl	15028 <__cyg_profile_func_exit>
   1251e:	0233      	lsls	r3, r6, #8
        (bit::Extract(ssp_registers[pssp]->CPSR, kPrescalerBit, 8)) +
   12520:	441d      	add	r5, r3
        ((bit::Read(ssp_registers[pssp]->CR0, kPhaseBit)) << 16) +
   12522:	4a28      	ldr	r2, [pc, #160]	; (125c4 <Ssp::GetClock()+0x178>)
   12524:	9b12      	ldr	r3, [sp, #72]	; 0x48
   12526:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1252a:	681b      	ldr	r3, [r3, #0]
   1252c:	930f      	str	r3, [sp, #60]	; 0x3c
   1252e:	2307      	movs	r3, #7
   12530:	930e      	str	r3, [sp, #56]	; 0x38
   12532:	4623      	mov	r3, r4
   12534:	4619      	mov	r1, r3
   12536:	4825      	ldr	r0, [pc, #148]	; (125cc <Ssp::GetClock()+0x180>)
   12538:	f002 fd62 	bl	15000 <__cyg_profile_func_enter>
  return static_cast<bool>(target & (1 << position));
   1253c:	2201      	movs	r2, #1
   1253e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   12540:	fa02 f303 	lsl.w	r3, r2, r3
   12544:	461a      	mov	r2, r3
   12546:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   12548:	4013      	ands	r3, r2
   1254a:	2b00      	cmp	r3, #0
   1254c:	bf14      	ite	ne
   1254e:	2301      	movne	r3, #1
   12550:	2300      	moveq	r3, #0
   12552:	b2de      	uxtb	r6, r3
   12554:	4623      	mov	r3, r4
   12556:	4619      	mov	r1, r3
   12558:	481c      	ldr	r0, [pc, #112]	; (125cc <Ssp::GetClock()+0x180>)
   1255a:	f002 fd65 	bl	15028 <__cyg_profile_func_exit>
   1255e:	4633      	mov	r3, r6
   12560:	041b      	lsls	r3, r3, #16
        ((bit::Extract(ssp_registers[pssp]->CR0, kDividerBit, 8)) << 8) +
   12562:	441d      	add	r5, r3
        ((bit::Read(ssp_registers[pssp]->CR0, kPolarityBit)) << 18);
   12564:	4a17      	ldr	r2, [pc, #92]	; (125c4 <Ssp::GetClock()+0x178>)
   12566:	9b12      	ldr	r3, [sp, #72]	; 0x48
   12568:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1256c:	681b      	ldr	r3, [r3, #0]
   1256e:	9311      	str	r3, [sp, #68]	; 0x44
   12570:	2306      	movs	r3, #6
   12572:	9310      	str	r3, [sp, #64]	; 0x40
   12574:	4623      	mov	r3, r4
   12576:	4619      	mov	r1, r3
   12578:	4814      	ldr	r0, [pc, #80]	; (125cc <Ssp::GetClock()+0x180>)
   1257a:	f002 fd41 	bl	15000 <__cyg_profile_func_enter>
   1257e:	2201      	movs	r2, #1
   12580:	9b10      	ldr	r3, [sp, #64]	; 0x40
   12582:	fa02 f303 	lsl.w	r3, r2, r3
   12586:	461a      	mov	r2, r3
   12588:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1258a:	4013      	ands	r3, r2
   1258c:	2b00      	cmp	r3, #0
   1258e:	bf14      	ite	ne
   12590:	2301      	movne	r3, #1
   12592:	2300      	moveq	r3, #0
   12594:	b2de      	uxtb	r6, r3
   12596:	4623      	mov	r3, r4
   12598:	4619      	mov	r1, r3
   1259a:	480c      	ldr	r0, [pc, #48]	; (125cc <Ssp::GetClock()+0x180>)
   1259c:	f002 fd44 	bl	15028 <__cyg_profile_func_exit>
   125a0:	4633      	mov	r3, r6
   125a2:	049b      	lsls	r3, r3, #18
    return_val =
   125a4:	442b      	add	r3, r5
   125a6:	9313      	str	r3, [sp, #76]	; 0x4c

    return return_val;
   125a8:	9d13      	ldr	r5, [sp, #76]	; 0x4c
   125aa:	4623      	mov	r3, r4
   125ac:	4619      	mov	r1, r3
   125ae:	4803      	ldr	r0, [pc, #12]	; (125bc <Ssp::GetClock()+0x170>)
   125b0:	f002 fd3a 	bl	15028 <__cyg_profile_func_exit>
   125b4:	462b      	mov	r3, r5
  }
   125b6:	4618      	mov	r0, r3
   125b8:	b014      	add	sp, #80	; 0x50
   125ba:	bd70      	pop	{r4, r5, r6, pc}
   125bc:	0001244d 	.word	0x0001244d
   125c0:	000186ac 	.word	0x000186ac
   125c4:	10000050 	.word	0x10000050
   125c8:	00013221 	.word	0x00013221
   125cc:	00013169 	.word	0x00013169

000125d0 <PixelDisplayInterface::Color_t::Color_t(bool, bool, bool, unsigned char, unsigned char, bool)>:
class PixelDisplayInterface
{
 public:
  SJ2_PACKED(struct) Color_t
  {
    Color_t(bool r, bool g, bool b, uint8_t a, uint8_t bits,
   125d0:	b530      	push	{r4, r5, lr}
   125d2:	b083      	sub	sp, #12
   125d4:	4675      	mov	r5, lr
   125d6:	9001      	str	r0, [sp, #4]
   125d8:	4608      	mov	r0, r1
   125da:	4611      	mov	r1, r2
   125dc:	461a      	mov	r2, r3
   125de:	4603      	mov	r3, r0
   125e0:	f88d 3003 	strb.w	r3, [sp, #3]
   125e4:	460b      	mov	r3, r1
   125e6:	f88d 3002 	strb.w	r3, [sp, #2]
   125ea:	4613      	mov	r3, r2
   125ec:	f88d 3001 	strb.w	r3, [sp, #1]
   125f0:	462b      	mov	r3, r5
   125f2:	4619      	mov	r1, r3
   125f4:	481a      	ldr	r0, [pc, #104]	; (12660 <PixelDisplayInterface::Color_t::Color_t(bool, bool, bool, unsigned char, unsigned char, bool)+0x90>)
   125f6:	f002 fd03 	bl	15000 <__cyg_profile_func_enter>
          red(r),
          green(g),
          blue(b),
          padding(0),
          color_bits(bits),
          alpha(a)
   125fa:	9a01      	ldr	r2, [sp, #4]
   125fc:	7813      	ldrb	r3, [r2, #0]
   125fe:	f89d 1020 	ldrb.w	r1, [sp, #32]
   12602:	f361 0300 	bfi	r3, r1, #0, #1
   12606:	7013      	strb	r3, [r2, #0]
   12608:	9a01      	ldr	r2, [sp, #4]
   1260a:	7813      	ldrb	r3, [r2, #0]
   1260c:	f89d 1003 	ldrb.w	r1, [sp, #3]
   12610:	f361 0341 	bfi	r3, r1, #1, #1
   12614:	7013      	strb	r3, [r2, #0]
   12616:	9a01      	ldr	r2, [sp, #4]
   12618:	7813      	ldrb	r3, [r2, #0]
   1261a:	f89d 1002 	ldrb.w	r1, [sp, #2]
   1261e:	f361 0382 	bfi	r3, r1, #2, #1
   12622:	7013      	strb	r3, [r2, #0]
   12624:	9a01      	ldr	r2, [sp, #4]
   12626:	7813      	ldrb	r3, [r2, #0]
   12628:	f89d 1001 	ldrb.w	r1, [sp, #1]
   1262c:	f361 03c3 	bfi	r3, r1, #3, #1
   12630:	7013      	strb	r3, [r2, #0]
   12632:	9a01      	ldr	r2, [sp, #4]
   12634:	7813      	ldrb	r3, [r2, #0]
   12636:	f36f 1307 	bfc	r3, #4, #4
   1263a:	7013      	strb	r3, [r2, #0]
   1263c:	9b01      	ldr	r3, [sp, #4]
   1263e:	f89d 201c 	ldrb.w	r2, [sp, #28]
   12642:	705a      	strb	r2, [r3, #1]
   12644:	9b01      	ldr	r3, [sp, #4]
   12646:	f89d 2018 	ldrb.w	r2, [sp, #24]
   1264a:	709a      	strb	r2, [r3, #2]
    {
    }
   1264c:	9c01      	ldr	r4, [sp, #4]
   1264e:	462b      	mov	r3, r5
   12650:	4619      	mov	r1, r3
   12652:	4803      	ldr	r0, [pc, #12]	; (12660 <PixelDisplayInterface::Color_t::Color_t(bool, bool, bool, unsigned char, unsigned char, bool)+0x90>)
   12654:	f002 fce8 	bl	15028 <__cyg_profile_func_exit>
   12658:	4623      	mov	r3, r4
   1265a:	4618      	mov	r0, r3
   1265c:	b003      	add	sp, #12
   1265e:	bd30      	pop	{r4, r5, pc}
   12660:	000125d1 	.word	0x000125d1

00012664 <PixelDisplayInterface::Color_t::Color_t()>:
    Color_t()
   12664:	b530      	push	{r4, r5, lr}
   12666:	b083      	sub	sp, #12
   12668:	4675      	mov	r5, lr
   1266a:	9001      	str	r0, [sp, #4]
   1266c:	462b      	mov	r3, r5
   1266e:	4619      	mov	r1, r3
   12670:	4815      	ldr	r0, [pc, #84]	; (126c8 <PixelDisplayInterface::Color_t::Color_t()+0x64>)
   12672:	f002 fcc5 	bl	15000 <__cyg_profile_func_enter>
          red(false),
          green(false),
          blue(false),
          padding(0),
          color_bits(0),
          alpha(0)
   12676:	9a01      	ldr	r2, [sp, #4]
   12678:	7813      	ldrb	r3, [r2, #0]
   1267a:	f36f 0300 	bfc	r3, #0, #1
   1267e:	7013      	strb	r3, [r2, #0]
   12680:	9a01      	ldr	r2, [sp, #4]
   12682:	7813      	ldrb	r3, [r2, #0]
   12684:	f36f 0341 	bfc	r3, #1, #1
   12688:	7013      	strb	r3, [r2, #0]
   1268a:	9a01      	ldr	r2, [sp, #4]
   1268c:	7813      	ldrb	r3, [r2, #0]
   1268e:	f36f 0382 	bfc	r3, #2, #1
   12692:	7013      	strb	r3, [r2, #0]
   12694:	9a01      	ldr	r2, [sp, #4]
   12696:	7813      	ldrb	r3, [r2, #0]
   12698:	f36f 03c3 	bfc	r3, #3, #1
   1269c:	7013      	strb	r3, [r2, #0]
   1269e:	9a01      	ldr	r2, [sp, #4]
   126a0:	7813      	ldrb	r3, [r2, #0]
   126a2:	f36f 1307 	bfc	r3, #4, #4
   126a6:	7013      	strb	r3, [r2, #0]
   126a8:	9b01      	ldr	r3, [sp, #4]
   126aa:	2200      	movs	r2, #0
   126ac:	705a      	strb	r2, [r3, #1]
   126ae:	9b01      	ldr	r3, [sp, #4]
   126b0:	2200      	movs	r2, #0
   126b2:	709a      	strb	r2, [r3, #2]
    {
    }
   126b4:	9c01      	ldr	r4, [sp, #4]
   126b6:	462b      	mov	r3, r5
   126b8:	4619      	mov	r1, r3
   126ba:	4803      	ldr	r0, [pc, #12]	; (126c8 <PixelDisplayInterface::Color_t::Color_t()+0x64>)
   126bc:	f002 fcb4 	bl	15028 <__cyg_profile_func_exit>
   126c0:	4623      	mov	r3, r4
   126c2:	4618      	mov	r0, r3
   126c4:	b003      	add	sp, #12
   126c6:	bd30      	pop	{r4, r5, pc}
   126c8:	00012665 	.word	0x00012665

000126cc <PixelDisplayInterface::Enable()>:
  /// @returns a color object with the available colors.
  virtual Color_t AvailableColors() = 0;
  /// Configure hardware peripherals and initialize external display hardware
  virtual void Initialize() = 0;
  /// Optional method to turn on display if applicable
  virtual void Enable() {}
   126cc:	b510      	push	{r4, lr}
   126ce:	b082      	sub	sp, #8
   126d0:	4674      	mov	r4, lr
   126d2:	9001      	str	r0, [sp, #4]
   126d4:	4623      	mov	r3, r4
   126d6:	4619      	mov	r1, r3
   126d8:	4805      	ldr	r0, [pc, #20]	; (126f0 <PixelDisplayInterface::Enable()+0x24>)
   126da:	f002 fc91 	bl	15000 <__cyg_profile_func_enter>
   126de:	4623      	mov	r3, r4
   126e0:	4619      	mov	r1, r3
   126e2:	4803      	ldr	r0, [pc, #12]	; (126f0 <PixelDisplayInterface::Enable()+0x24>)
   126e4:	f002 fca0 	bl	15028 <__cyg_profile_func_exit>
   126e8:	bf00      	nop
   126ea:	b002      	add	sp, #8
   126ec:	bd10      	pop	{r4, pc}
   126ee:	bf00      	nop
   126f0:	000126cd 	.word	0x000126cd

000126f4 <PixelDisplayInterface::Disable()>:
  /// Optional method to turn off display and potentially put it into a low
  /// power mode
  virtual void Disable() {}
   126f4:	b510      	push	{r4, lr}
   126f6:	b082      	sub	sp, #8
   126f8:	4674      	mov	r4, lr
   126fa:	9001      	str	r0, [sp, #4]
   126fc:	4623      	mov	r3, r4
   126fe:	4619      	mov	r1, r3
   12700:	4805      	ldr	r0, [pc, #20]	; (12718 <PixelDisplayInterface::Disable()+0x24>)
   12702:	f002 fc7d 	bl	15000 <__cyg_profile_func_enter>
   12706:	4623      	mov	r3, r4
   12708:	4619      	mov	r1, r3
   1270a:	4803      	ldr	r0, [pc, #12]	; (12718 <PixelDisplayInterface::Disable()+0x24>)
   1270c:	f002 fc8c 	bl	15028 <__cyg_profile_func_exit>
   12710:	bf00      	nop
   12712:	b002      	add	sp, #8
   12714:	bd10      	pop	{r4, pc}
   12716:	bf00      	nop
   12718:	000126f5 	.word	0x000126f5

0001271c <PixelDisplayInterface::Update()>:
  /// @param color the color of the pixel. May be ignored on monochrome screens.
  virtual void DrawPixel(int32_t x, int32_t y, Color_t color) = 0;
  /// Update screen to match framebuffer.
  /// Implementations of this method that do not use a framebuffer, possibly
  /// due to memory constrains, can refrain from implementing this function.
  virtual void Update() {}
   1271c:	b510      	push	{r4, lr}
   1271e:	b082      	sub	sp, #8
   12720:	4674      	mov	r4, lr
   12722:	9001      	str	r0, [sp, #4]
   12724:	4623      	mov	r3, r4
   12726:	4619      	mov	r1, r3
   12728:	4805      	ldr	r0, [pc, #20]	; (12740 <PixelDisplayInterface::Update()+0x24>)
   1272a:	f002 fc69 	bl	15000 <__cyg_profile_func_enter>
   1272e:	4623      	mov	r3, r4
   12730:	4619      	mov	r1, r3
   12732:	4803      	ldr	r0, [pc, #12]	; (12740 <PixelDisplayInterface::Update()+0x24>)
   12734:	f002 fc78 	bl	15028 <__cyg_profile_func_exit>
   12738:	bf00      	nop
   1273a:	b002      	add	sp, #8
   1273c:	bd10      	pop	{r4, pc}
   1273e:	bf00      	nop
   12740:	0001271d 	.word	0x0001271d

00012744 <PixelDisplayInterface::PixelDisplayInterface()>:
class PixelDisplayInterface
   12744:	b530      	push	{r4, r5, lr}
   12746:	b083      	sub	sp, #12
   12748:	4675      	mov	r5, lr
   1274a:	9001      	str	r0, [sp, #4]
   1274c:	462b      	mov	r3, r5
   1274e:	4619      	mov	r1, r3
   12750:	4807      	ldr	r0, [pc, #28]	; (12770 <PixelDisplayInterface::PixelDisplayInterface()+0x2c>)
   12752:	f002 fc55 	bl	15000 <__cyg_profile_func_enter>
   12756:	4a07      	ldr	r2, [pc, #28]	; (12774 <PixelDisplayInterface::PixelDisplayInterface()+0x30>)
   12758:	9b01      	ldr	r3, [sp, #4]
   1275a:	601a      	str	r2, [r3, #0]
   1275c:	9c01      	ldr	r4, [sp, #4]
   1275e:	462b      	mov	r3, r5
   12760:	4619      	mov	r1, r3
   12762:	4803      	ldr	r0, [pc, #12]	; (12770 <PixelDisplayInterface::PixelDisplayInterface()+0x2c>)
   12764:	f002 fc60 	bl	15028 <__cyg_profile_func_exit>
   12768:	4623      	mov	r3, r4
   1276a:	4618      	mov	r0, r3
   1276c:	b003      	add	sp, #12
   1276e:	bd30      	pop	{r4, r5, pc}
   12770:	00012745 	.word	0x00012745
   12774:	000186ec 	.word	0x000186ec

00012778 <Ssd1306::Ssd1306()>:
  {
    kCommand = 0,
    kData    = 1
  };

  constexpr Ssd1306()
   12778:	b530      	push	{r4, r5, lr}
   1277a:	b083      	sub	sp, #12
   1277c:	4675      	mov	r5, lr
   1277e:	9001      	str	r0, [sp, #4]
   12780:	462b      	mov	r3, r5
   12782:	4619      	mov	r1, r3
   12784:	481f      	ldr	r0, [pc, #124]	; (12804 <Ssd1306::Ssd1306()+0x8c>)
   12786:	f002 fc3b 	bl	15000 <__cyg_profile_func_enter>
        cs_(&cs_gpio_),
        dc_(&dc_gpio_),
        ssp1_(Ssp::Peripheral::kSsp1),
        cs_gpio_(1, 22),
        dc_gpio_(1, 25),
        bitmap_{}
   1278a:	9b01      	ldr	r3, [sp, #4]
   1278c:	4618      	mov	r0, r3
   1278e:	f7ff ffd9 	bl	12744 <PixelDisplayInterface::PixelDisplayInterface()>
   12792:	4a1d      	ldr	r2, [pc, #116]	; (12808 <Ssd1306::Ssd1306()+0x90>)
   12794:	9b01      	ldr	r3, [sp, #4]
   12796:	601a      	str	r2, [r3, #0]
      : ssp_(&ssp1_),
   12798:	9b01      	ldr	r3, [sp, #4]
   1279a:	f103 0210 	add.w	r2, r3, #16
        bitmap_{}
   1279e:	9b01      	ldr	r3, [sp, #4]
   127a0:	605a      	str	r2, [r3, #4]
        cs_(&cs_gpio_),
   127a2:	9b01      	ldr	r3, [sp, #4]
   127a4:	f103 0240 	add.w	r2, r3, #64	; 0x40
        bitmap_{}
   127a8:	9b01      	ldr	r3, [sp, #4]
   127aa:	609a      	str	r2, [r3, #8]
        dc_(&dc_gpio_),
   127ac:	9b01      	ldr	r3, [sp, #4]
   127ae:	f103 0254 	add.w	r2, r3, #84	; 0x54
        bitmap_{}
   127b2:	9b01      	ldr	r3, [sp, #4]
   127b4:	60da      	str	r2, [r3, #12]
   127b6:	9b01      	ldr	r3, [sp, #4]
   127b8:	3310      	adds	r3, #16
   127ba:	2101      	movs	r1, #1
   127bc:	4618      	mov	r0, r3
   127be:	f7ff f9cd 	bl	11b5c <Ssp::Ssp(Ssp::Peripheral)>
   127c2:	9b01      	ldr	r3, [sp, #4]
   127c4:	3340      	adds	r3, #64	; 0x40
   127c6:	2216      	movs	r2, #22
   127c8:	2101      	movs	r1, #1
   127ca:	4618      	mov	r0, r3
   127cc:	f7fe f9d6 	bl	10b7c <Gpio::Gpio(unsigned char, unsigned char)>
   127d0:	9b01      	ldr	r3, [sp, #4]
   127d2:	3354      	adds	r3, #84	; 0x54
   127d4:	2219      	movs	r2, #25
   127d6:	2101      	movs	r1, #1
   127d8:	4618      	mov	r0, r3
   127da:	f7fe f9cf 	bl	10b7c <Gpio::Gpio(unsigned char, unsigned char)>
   127de:	9b01      	ldr	r3, [sp, #4]
   127e0:	3368      	adds	r3, #104	; 0x68
   127e2:	f240 62c1 	movw	r2, #1729	; 0x6c1
   127e6:	2100      	movs	r1, #0
   127e8:	4618      	mov	r0, r3
   127ea:	f005 fbaf 	bl	17f4c <memset>
  {
  }
   127ee:	9c01      	ldr	r4, [sp, #4]
   127f0:	462b      	mov	r3, r5
   127f2:	4619      	mov	r1, r3
   127f4:	4803      	ldr	r0, [pc, #12]	; (12804 <Ssd1306::Ssd1306()+0x8c>)
   127f6:	f002 fc17 	bl	15028 <__cyg_profile_func_exit>
   127fa:	4623      	mov	r3, r4
   127fc:	4618      	mov	r0, r3
   127fe:	b003      	add	sp, #12
   12800:	bd30      	pop	{r4, r5, pc}
   12802:	bf00      	nop
   12804:	00012779 	.word	0x00012779
   12808:	000186c0 	.word	0x000186c0

0001280c <Ssd1306::GetWidth()>:
        dc_gpio_(1, 25),
        bitmap_{}
  {
  }

  size_t GetWidth() final override
   1280c:	b530      	push	{r4, r5, lr}
   1280e:	b083      	sub	sp, #12
   12810:	4675      	mov	r5, lr
   12812:	9001      	str	r0, [sp, #4]
   12814:	462b      	mov	r3, r5
   12816:	4619      	mov	r1, r3
   12818:	4806      	ldr	r0, [pc, #24]	; (12834 <Ssd1306::GetWidth()+0x28>)
   1281a:	f002 fbf1 	bl	15000 <__cyg_profile_func_enter>
  {
    return kWidth;
   1281e:	2480      	movs	r4, #128	; 0x80
   12820:	462b      	mov	r3, r5
   12822:	4619      	mov	r1, r3
   12824:	4803      	ldr	r0, [pc, #12]	; (12834 <Ssd1306::GetWidth()+0x28>)
   12826:	f002 fbff 	bl	15028 <__cyg_profile_func_exit>
   1282a:	4623      	mov	r3, r4
  }
   1282c:	4618      	mov	r0, r3
   1282e:	b003      	add	sp, #12
   12830:	bd30      	pop	{r4, r5, pc}
   12832:	bf00      	nop
   12834:	0001280d 	.word	0x0001280d

00012838 <Ssd1306::GetHeight()>:
  size_t GetHeight() final override
   12838:	b530      	push	{r4, r5, lr}
   1283a:	b083      	sub	sp, #12
   1283c:	4675      	mov	r5, lr
   1283e:	9001      	str	r0, [sp, #4]
   12840:	462b      	mov	r3, r5
   12842:	4619      	mov	r1, r3
   12844:	4806      	ldr	r0, [pc, #24]	; (12860 <Ssd1306::GetHeight()+0x28>)
   12846:	f002 fbdb 	bl	15000 <__cyg_profile_func_enter>
  {
    return kHeight;
   1284a:	2440      	movs	r4, #64	; 0x40
   1284c:	462b      	mov	r3, r5
   1284e:	4619      	mov	r1, r3
   12850:	4803      	ldr	r0, [pc, #12]	; (12860 <Ssd1306::GetHeight()+0x28>)
   12852:	f002 fbe9 	bl	15028 <__cyg_profile_func_exit>
   12856:	4623      	mov	r3, r4
  }
   12858:	4618      	mov	r0, r3
   1285a:	b003      	add	sp, #12
   1285c:	bd30      	pop	{r4, r5, pc}
   1285e:	bf00      	nop
   12860:	00012839 	.word	0x00012839

00012864 <Ssd1306::AvailableColors()>:
  Color_t AvailableColors() final override
   12864:	b510      	push	{r4, lr}
   12866:	b088      	sub	sp, #32
   12868:	4674      	mov	r4, lr
   1286a:	9005      	str	r0, [sp, #20]
   1286c:	4623      	mov	r3, r4
   1286e:	4619      	mov	r1, r3
   12870:	4815      	ldr	r0, [pc, #84]	; (128c8 <Ssd1306::AvailableColors()+0x64>)
   12872:	f002 fbc5 	bl	15000 <__cyg_profile_func_enter>
  {
    return Color_t(/* Red        = */ 1,
   12876:	a807      	add	r0, sp, #28
   12878:	2301      	movs	r3, #1
   1287a:	9302      	str	r3, [sp, #8]
   1287c:	2301      	movs	r3, #1
   1287e:	9301      	str	r3, [sp, #4]
   12880:	2301      	movs	r3, #1
   12882:	9300      	str	r3, [sp, #0]
   12884:	2301      	movs	r3, #1
   12886:	2201      	movs	r2, #1
   12888:	2101      	movs	r1, #1
   1288a:	f7ff fea1 	bl	125d0 <PixelDisplayInterface::Color_t::Color_t(bool, bool, bool, unsigned char, unsigned char, bool)>
                   /* Green      = */ 1,
                   /* Blue       = */ 1,
                   /* Alpha      = */ 1,
                   /* Color Bits = */ 1,
                   /* Monochrome = */ true);
   1288e:	ab06      	add	r3, sp, #24
   12890:	aa07      	add	r2, sp, #28
   12892:	6812      	ldr	r2, [r2, #0]
   12894:	4611      	mov	r1, r2
   12896:	8019      	strh	r1, [r3, #0]
   12898:	3302      	adds	r3, #2
   1289a:	0c12      	lsrs	r2, r2, #16
   1289c:	701a      	strb	r2, [r3, #0]
   1289e:	4623      	mov	r3, r4
   128a0:	4619      	mov	r1, r3
   128a2:	4809      	ldr	r0, [pc, #36]	; (128c8 <Ssd1306::AvailableColors()+0x64>)
   128a4:	f002 fbc0 	bl	15028 <__cyg_profile_func_exit>
   128a8:	2300      	movs	r3, #0
   128aa:	f89d 2018 	ldrb.w	r2, [sp, #24]
   128ae:	f362 0307 	bfi	r3, r2, #0, #8
   128b2:	f89d 2019 	ldrb.w	r2, [sp, #25]
   128b6:	f362 230f 	bfi	r3, r2, #8, #8
   128ba:	f89d 201a 	ldrb.w	r2, [sp, #26]
   128be:	f362 4317 	bfi	r3, r2, #16, #8
  }
   128c2:	4618      	mov	r0, r3
   128c4:	b008      	add	sp, #32
   128c6:	bd10      	pop	{r4, pc}
   128c8:	00012865 	.word	0x00012865

000128cc <Ssd1306::Write(unsigned long, Ssd1306::Transaction, unsigned int)>:

  void Write(uint32_t data, Transaction transaction, size_t size = 1)
   128cc:	b510      	push	{r4, lr}
   128ce:	b086      	sub	sp, #24
   128d0:	4674      	mov	r4, lr
   128d2:	9003      	str	r0, [sp, #12]
   128d4:	9102      	str	r1, [sp, #8]
   128d6:	9201      	str	r2, [sp, #4]
   128d8:	9300      	str	r3, [sp, #0]
   128da:	4623      	mov	r3, r4
   128dc:	4619      	mov	r1, r3
   128de:	481e      	ldr	r0, [pc, #120]	; (12958 <Ssd1306::Write(unsigned long, Ssd1306::Transaction, unsigned int)+0x8c>)
   128e0:	f002 fb8e 	bl	15000 <__cyg_profile_func_enter>
  {
    dc_->Set(static_cast<Gpio::State>(transaction));
   128e4:	9b03      	ldr	r3, [sp, #12]
   128e6:	68db      	ldr	r3, [r3, #12]
   128e8:	9a01      	ldr	r2, [sp, #4]
   128ea:	b2d2      	uxtb	r2, r2
   128ec:	4611      	mov	r1, r2
   128ee:	4618      	mov	r0, r3
   128f0:	f7fe fa84 	bl	10dfc <Gpio::Set(GpioInterface::State)>
    cs_->SetLow();
   128f4:	9b03      	ldr	r3, [sp, #12]
   128f6:	689b      	ldr	r3, [r3, #8]
   128f8:	4618      	mov	r0, r3
   128fa:	f7fe fa4d 	bl	10d98 <Gpio::SetLow()>
    for (size_t i = 0; i < size; i++)
   128fe:	2300      	movs	r3, #0
   12900:	9305      	str	r3, [sp, #20]
   12902:	9a05      	ldr	r2, [sp, #20]
   12904:	9b00      	ldr	r3, [sp, #0]
   12906:	429a      	cmp	r2, r3
   12908:	d218      	bcs.n	1293c <Ssd1306::Write(unsigned long, Ssd1306::Transaction, unsigned int)+0x70>
    {
      uint8_t send = static_cast<uint8_t>(data >> (((size - 1) - i) * 8));
   1290a:	9a00      	ldr	r2, [sp, #0]
   1290c:	9b05      	ldr	r3, [sp, #20]
   1290e:	1ad3      	subs	r3, r2, r3
   12910:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
   12914:	3b01      	subs	r3, #1
   12916:	00db      	lsls	r3, r3, #3
   12918:	9a02      	ldr	r2, [sp, #8]
   1291a:	fa22 f303 	lsr.w	r3, r2, r3
   1291e:	f88d 3013 	strb.w	r3, [sp, #19]
      if (transaction == Transaction::kCommand)
      {
        LOG_DEBUG("send = 0x%X", send);
      }
      ssp_->Transfer(send);
   12922:	9b03      	ldr	r3, [sp, #12]
   12924:	685b      	ldr	r3, [r3, #4]
   12926:	f89d 2013 	ldrb.w	r2, [sp, #19]
   1292a:	b292      	uxth	r2, r2
   1292c:	4611      	mov	r1, r2
   1292e:	4618      	mov	r0, r3
   12930:	f7ff fa34 	bl	11d9c <Ssp::Transfer(unsigned short)>
    for (size_t i = 0; i < size; i++)
   12934:	9b05      	ldr	r3, [sp, #20]
   12936:	3301      	adds	r3, #1
   12938:	9305      	str	r3, [sp, #20]
   1293a:	e7e2      	b.n	12902 <Ssd1306::Write(unsigned long, Ssd1306::Transaction, unsigned int)+0x36>
    }
    cs_->SetHigh();
   1293c:	9b03      	ldr	r3, [sp, #12]
   1293e:	689b      	ldr	r3, [r3, #8]
   12940:	4618      	mov	r0, r3
   12942:	f7fe f9f7 	bl	10d34 <Gpio::SetHigh()>
   12946:	4623      	mov	r3, r4
   12948:	4619      	mov	r1, r3
   1294a:	4803      	ldr	r0, [pc, #12]	; (12958 <Ssd1306::Write(unsigned long, Ssd1306::Transaction, unsigned int)+0x8c>)
   1294c:	f002 fb6c 	bl	15028 <__cyg_profile_func_exit>
  }
   12950:	bf00      	nop
   12952:	b006      	add	sp, #24
   12954:	bd10      	pop	{r4, pc}
   12956:	bf00      	nop
   12958:	000128cd 	.word	0x000128cd

0001295c <Ssd1306::InitializationPanel()>:

  void InitializationPanel()
   1295c:	b510      	push	{r4, lr}
   1295e:	b082      	sub	sp, #8
   12960:	4674      	mov	r4, lr
   12962:	9001      	str	r0, [sp, #4]
   12964:	4623      	mov	r3, r4
   12966:	4619      	mov	r1, r3
   12968:	4837      	ldr	r0, [pc, #220]	; (12a48 <Ssd1306::InitializationPanel()+0xec>)
   1296a:	f002 fb49 	bl	15000 <__cyg_profile_func_enter>
  {
    // This sequence of commands was found in:
    //   datasheets/OLED-display/ER-OLED0.96-1_Series_Datasheet.pdf, page 15

    // turn off oled panel
    Write(0xAE, Transaction::kCommand);
   1296e:	2301      	movs	r3, #1
   12970:	2200      	movs	r2, #0
   12972:	21ae      	movs	r1, #174	; 0xae
   12974:	9801      	ldr	r0, [sp, #4]
   12976:	f7ff ffa9 	bl	128cc <Ssd1306::Write(unsigned long, Ssd1306::Transaction, unsigned int)>

    // set display clock divide ratio/oscillator frequency
    // set divide ratio
    Write(0xD5'80, Transaction::kCommand, 2);
   1297a:	2302      	movs	r3, #2
   1297c:	2200      	movs	r2, #0
   1297e:	f24d 5180 	movw	r1, #54656	; 0xd580
   12982:	9801      	ldr	r0, [sp, #4]
   12984:	f7ff ffa2 	bl	128cc <Ssd1306::Write(unsigned long, Ssd1306::Transaction, unsigned int)>

    // set multiplex ratio(1 to 64)
    // 1/64 duty
    Write(0xA8'3F, Transaction::kCommand, 2);
   12988:	2302      	movs	r3, #2
   1298a:	2200      	movs	r2, #0
   1298c:	f64a 013f 	movw	r1, #43071	; 0xa83f
   12990:	9801      	ldr	r0, [sp, #4]
   12992:	f7ff ff9b 	bl	128cc <Ssd1306::Write(unsigned long, Ssd1306::Transaction, unsigned int)>

    // set display offset = not offset
    Write(0xD3'00, Transaction::kCommand, 2);
   12996:	2302      	movs	r3, #2
   12998:	2200      	movs	r2, #0
   1299a:	f44f 4153 	mov.w	r1, #54016	; 0xd300
   1299e:	9801      	ldr	r0, [sp, #4]
   129a0:	f7ff ff94 	bl	128cc <Ssd1306::Write(unsigned long, Ssd1306::Transaction, unsigned int)>

    // Set display start line
    Write(0x40, Transaction::kCommand);
   129a4:	2301      	movs	r3, #1
   129a6:	2200      	movs	r2, #0
   129a8:	2140      	movs	r1, #64	; 0x40
   129aa:	9801      	ldr	r0, [sp, #4]
   129ac:	f7ff ff8e 	bl	128cc <Ssd1306::Write(unsigned long, Ssd1306::Transaction, unsigned int)>

    // Disable Charge Pump
    Write(0x8D'14, Transaction::kCommand, 2);
   129b0:	2302      	movs	r3, #2
   129b2:	2200      	movs	r2, #0
   129b4:	f648 5114 	movw	r1, #36116	; 0x8d14
   129b8:	9801      	ldr	r0, [sp, #4]
   129ba:	f7ff ff87 	bl	128cc <Ssd1306::Write(unsigned long, Ssd1306::Transaction, unsigned int)>

    // set segment re-map 128 to 0
    Write(0xA1, Transaction::kCommand);
   129be:	2301      	movs	r3, #1
   129c0:	2200      	movs	r2, #0
   129c2:	21a1      	movs	r1, #161	; 0xa1
   129c4:	9801      	ldr	r0, [sp, #4]
   129c6:	f7ff ff81 	bl	128cc <Ssd1306::Write(unsigned long, Ssd1306::Transaction, unsigned int)>

    // Set COM Output Scan Direction 64 to 0
    Write(0xC8, Transaction::kCommand);
   129ca:	2301      	movs	r3, #1
   129cc:	2200      	movs	r2, #0
   129ce:	21c8      	movs	r1, #200	; 0xc8
   129d0:	9801      	ldr	r0, [sp, #4]
   129d2:	f7ff ff7b 	bl	128cc <Ssd1306::Write(unsigned long, Ssd1306::Transaction, unsigned int)>

    // set com pins hardware configuration
    Write(0xDA'12, Transaction::kCommand, 2);
   129d6:	2302      	movs	r3, #2
   129d8:	2200      	movs	r2, #0
   129da:	f64d 2112 	movw	r1, #55826	; 0xda12
   129de:	9801      	ldr	r0, [sp, #4]
   129e0:	f7ff ff74 	bl	128cc <Ssd1306::Write(unsigned long, Ssd1306::Transaction, unsigned int)>

    // set contrast control register
    Write(0x81'CF, Transaction::kCommand, 2);
   129e4:	2302      	movs	r3, #2
   129e6:	2200      	movs	r2, #0
   129e8:	f248 11cf 	movw	r1, #33231	; 0x81cf
   129ec:	9801      	ldr	r0, [sp, #4]
   129ee:	f7ff ff6d 	bl	128cc <Ssd1306::Write(unsigned long, Ssd1306::Transaction, unsigned int)>

    // Set pre-charge period
    Write(0xD9'F1, Transaction::kCommand, 2);
   129f2:	2302      	movs	r3, #2
   129f4:	2200      	movs	r2, #0
   129f6:	f64d 11f1 	movw	r1, #55793	; 0xd9f1
   129fa:	9801      	ldr	r0, [sp, #4]
   129fc:	f7ff ff66 	bl	128cc <Ssd1306::Write(unsigned long, Ssd1306::Transaction, unsigned int)>

    // Set Vcomh
    Write(0xDB'40, Transaction::kCommand, 2);
   12a00:	2302      	movs	r3, #2
   12a02:	2200      	movs	r2, #0
   12a04:	f64d 3140 	movw	r1, #56128	; 0xdb40
   12a08:	9801      	ldr	r0, [sp, #4]
   12a0a:	f7ff ff5f 	bl	128cc <Ssd1306::Write(unsigned long, Ssd1306::Transaction, unsigned int)>

    SetHorizontalAddressMode();
   12a0e:	9801      	ldr	r0, [sp, #4]
   12a10:	f000 f85e 	bl	12ad0 <Ssd1306::SetHorizontalAddressMode()>

    // Enable entire display
    Write(0xA4, Transaction::kCommand);
   12a14:	2301      	movs	r3, #1
   12a16:	2200      	movs	r2, #0
   12a18:	21a4      	movs	r1, #164	; 0xa4
   12a1a:	9801      	ldr	r0, [sp, #4]
   12a1c:	f7ff ff56 	bl	128cc <Ssd1306::Write(unsigned long, Ssd1306::Transaction, unsigned int)>

    // Set display to normal colors
    Write(0xA6, Transaction::kCommand);
   12a20:	2301      	movs	r3, #1
   12a22:	2200      	movs	r2, #0
   12a24:	21a6      	movs	r1, #166	; 0xa6
   12a26:	9801      	ldr	r0, [sp, #4]
   12a28:	f7ff ff50 	bl	128cc <Ssd1306::Write(unsigned long, Ssd1306::Transaction, unsigned int)>

    // Set Display On
    Write(0xAF, Transaction::kCommand);
   12a2c:	2301      	movs	r3, #1
   12a2e:	2200      	movs	r2, #0
   12a30:	21af      	movs	r1, #175	; 0xaf
   12a32:	9801      	ldr	r0, [sp, #4]
   12a34:	f7ff ff4a 	bl	128cc <Ssd1306::Write(unsigned long, Ssd1306::Transaction, unsigned int)>
   12a38:	4623      	mov	r3, r4
   12a3a:	4619      	mov	r1, r3
   12a3c:	4802      	ldr	r0, [pc, #8]	; (12a48 <Ssd1306::InitializationPanel()+0xec>)
   12a3e:	f002 faf3 	bl	15028 <__cyg_profile_func_exit>
  }
   12a42:	bf00      	nop
   12a44:	b002      	add	sp, #8
   12a46:	bd10      	pop	{r4, pc}
   12a48:	0001295d 	.word	0x0001295d

00012a4c <Ssd1306::Initialize()>:

  void Initialize() final override
   12a4c:	b510      	push	{r4, lr}
   12a4e:	b084      	sub	sp, #16
   12a50:	4674      	mov	r4, lr
   12a52:	9003      	str	r0, [sp, #12]
   12a54:	4623      	mov	r3, r4
   12a56:	4619      	mov	r1, r3
   12a58:	481c      	ldr	r0, [pc, #112]	; (12acc <Ssd1306::Initialize()+0x80>)
   12a5a:	f002 fad1 	bl	15000 <__cyg_profile_func_enter>
  {
    cs_->SetAsOutput();
   12a5e:	9b03      	ldr	r3, [sp, #12]
   12a60:	689b      	ldr	r3, [r3, #8]
   12a62:	4618      	mov	r0, r3
   12a64:	f7fe f906 	bl	10c74 <Gpio::SetAsOutput()>
    dc_->SetAsOutput();
   12a68:	9b03      	ldr	r3, [sp, #12]
   12a6a:	68db      	ldr	r3, [r3, #12]
   12a6c:	4618      	mov	r0, r3
   12a6e:	f7fe f901 	bl	10c74 <Gpio::SetAsOutput()>
    cs_->SetHigh();
   12a72:	9b03      	ldr	r3, [sp, #12]
   12a74:	689b      	ldr	r3, [r3, #8]
   12a76:	4618      	mov	r0, r3
   12a78:	f7fe f95c 	bl	10d34 <Gpio::SetHigh()>
    dc_->SetHigh();
   12a7c:	9b03      	ldr	r3, [sp, #12]
   12a7e:	68db      	ldr	r3, [r3, #12]
   12a80:	4618      	mov	r0, r3
   12a82:	f7fe f957 	bl	10d34 <Gpio::SetHigh()>

    ssp_->SetPeripheralMode(Ssp::MasterSlaveMode::kMaster, Ssp::FrameMode::kSpi,
   12a86:	9b03      	ldr	r3, [sp, #12]
   12a88:	6858      	ldr	r0, [r3, #4]
   12a8a:	2307      	movs	r3, #7
   12a8c:	2200      	movs	r2, #0
   12a8e:	2100      	movs	r1, #0
   12a90:	f7ff fa30 	bl	11ef4 <Ssp::SetPeripheralMode(SspInterface::MasterSlaveMode, SspInterface::FrameMode, SspInterface::DataSize)>
                            Ssp::DataSize::kEight);
    // Set speed to 1Mhz by dividing by 1 * ClockFrequencyInMHz.
    ssp_->SetClock(false, false, 1, config::kSystemClockRateMhz/3);
   12a94:	9b03      	ldr	r3, [sp, #12]
   12a96:	6858      	ldr	r0, [r3, #4]
   12a98:	2310      	movs	r3, #16
   12a9a:	9300      	str	r3, [sp, #0]
   12a9c:	2301      	movs	r3, #1
   12a9e:	2200      	movs	r2, #0
   12aa0:	2100      	movs	r1, #0
   12aa2:	f7ff fbdd 	bl	12260 <Ssp::SetClock(bool, bool, unsigned char, unsigned char)>
    ssp_->Initialize();
   12aa6:	9b03      	ldr	r3, [sp, #12]
   12aa8:	685b      	ldr	r3, [r3, #4]
   12aaa:	4618      	mov	r0, r3
   12aac:	f7ff f8c8 	bl	11c40 <Ssp::Initialize()>

    Clear();
   12ab0:	9803      	ldr	r0, [sp, #12]
   12ab2:	f000 f837 	bl	12b24 <Ssd1306::Clear()>
    InitializationPanel();
   12ab6:	9803      	ldr	r0, [sp, #12]
   12ab8:	f7ff ff50 	bl	1295c <Ssd1306::InitializationPanel()>
   12abc:	4623      	mov	r3, r4
   12abe:	4619      	mov	r1, r3
   12ac0:	4802      	ldr	r0, [pc, #8]	; (12acc <Ssd1306::Initialize()+0x80>)
   12ac2:	f002 fab1 	bl	15028 <__cyg_profile_func_exit>
  }
   12ac6:	bf00      	nop
   12ac8:	b004      	add	sp, #16
   12aca:	bd10      	pop	{r4, pc}
   12acc:	00012a4d 	.word	0x00012a4d

00012ad0 <Ssd1306::SetHorizontalAddressMode()>:

  void SetHorizontalAddressMode()
   12ad0:	b510      	push	{r4, lr}
   12ad2:	b082      	sub	sp, #8
   12ad4:	4674      	mov	r4, lr
   12ad6:	9001      	str	r0, [sp, #4]
   12ad8:	4623      	mov	r3, r4
   12ada:	4619      	mov	r1, r3
   12adc:	480e      	ldr	r0, [pc, #56]	; (12b18 <Ssd1306::SetHorizontalAddressMode()+0x48>)
   12ade:	f002 fa8f 	bl	15000 <__cyg_profile_func_enter>
  {
    // Set Addressing mode
    // Addressing mode = Horizontal Mode (0b00)
    Write(0x20'00, Transaction::kCommand, 2);
   12ae2:	2302      	movs	r3, #2
   12ae4:	2200      	movs	r2, #0
   12ae6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
   12aea:	9801      	ldr	r0, [sp, #4]
   12aec:	f7ff feee 	bl	128cc <Ssd1306::Write(unsigned long, Ssd1306::Transaction, unsigned int)>
    // Set Column Addresses
    // Set Column Address start = Column 0
    // Set Column Address start = Column 127
    Write(0x21'00'7F, Transaction::kCommand, 3);
   12af0:	2303      	movs	r3, #3
   12af2:	2200      	movs	r2, #0
   12af4:	4909      	ldr	r1, [pc, #36]	; (12b1c <Ssd1306::SetHorizontalAddressMode()+0x4c>)
   12af6:	9801      	ldr	r0, [sp, #4]
   12af8:	f7ff fee8 	bl	128cc <Ssd1306::Write(unsigned long, Ssd1306::Transaction, unsigned int)>
    // Set Page Addresses
    // Set Page Address start = Page 0
    // Set Page Address start = Page 7
    Write(0x22'00'07, Transaction::kCommand, 3);
   12afc:	2303      	movs	r3, #3
   12afe:	2200      	movs	r2, #0
   12b00:	4907      	ldr	r1, [pc, #28]	; (12b20 <Ssd1306::SetHorizontalAddressMode()+0x50>)
   12b02:	9801      	ldr	r0, [sp, #4]
   12b04:	f7ff fee2 	bl	128cc <Ssd1306::Write(unsigned long, Ssd1306::Transaction, unsigned int)>
   12b08:	4623      	mov	r3, r4
   12b0a:	4619      	mov	r1, r3
   12b0c:	4802      	ldr	r0, [pc, #8]	; (12b18 <Ssd1306::SetHorizontalAddressMode()+0x48>)
   12b0e:	f002 fa8b 	bl	15028 <__cyg_profile_func_exit>
  }
   12b12:	bf00      	nop
   12b14:	b002      	add	sp, #8
   12b16:	bd10      	pop	{r4, pc}
   12b18:	00012ad1 	.word	0x00012ad1
   12b1c:	0021007f 	.word	0x0021007f
   12b20:	00220007 	.word	0x00220007

00012b24 <Ssd1306::Clear()>:
  /// Clears the internal bitmap_ to zero (or a user defined clear_value)
  void Clear() final override
   12b24:	b510      	push	{r4, lr}
   12b26:	b082      	sub	sp, #8
   12b28:	4674      	mov	r4, lr
   12b2a:	9001      	str	r0, [sp, #4]
   12b2c:	4623      	mov	r3, r4
   12b2e:	4619      	mov	r1, r3
   12b30:	4809      	ldr	r0, [pc, #36]	; (12b58 <Ssd1306::Clear()+0x34>)
   12b32:	f002 fa65 	bl	15000 <__cyg_profile_func_enter>
  {
    memset(bitmap_, 0x00, sizeof(bitmap_));
   12b36:	9b01      	ldr	r3, [sp, #4]
   12b38:	3368      	adds	r3, #104	; 0x68
   12b3a:	f240 62c1 	movw	r2, #1729	; 0x6c1
   12b3e:	2100      	movs	r1, #0
   12b40:	4618      	mov	r0, r3
   12b42:	f005 fa03 	bl	17f4c <memset>
   12b46:	4623      	mov	r3, r4
   12b48:	4619      	mov	r1, r3
   12b4a:	4803      	ldr	r0, [pc, #12]	; (12b58 <Ssd1306::Clear()+0x34>)
   12b4c:	f002 fa6c 	bl	15028 <__cyg_profile_func_exit>
  }
   12b50:	bf00      	nop
   12b52:	b002      	add	sp, #8
   12b54:	bd10      	pop	{r4, pc}
   12b56:	bf00      	nop
   12b58:	00012b25 	.word	0x00012b25

00012b5c <Ssd1306::DrawPixel(long, long, PixelDisplayInterface::Color_t)>:
  void Fill()
  {
    memset(bitmap_, 0xFF, sizeof(bitmap_));
  }
  void DrawPixel(int32_t x, int32_t y, Color_t color) final override
   12b5c:	b510      	push	{r4, lr}
   12b5e:	b08c      	sub	sp, #48	; 0x30
   12b60:	4674      	mov	r4, lr
   12b62:	9003      	str	r0, [sp, #12]
   12b64:	9102      	str	r1, [sp, #8]
   12b66:	9201      	str	r2, [sp, #4]
   12b68:	9300      	str	r3, [sp, #0]
   12b6a:	4623      	mov	r3, r4
   12b6c:	4619      	mov	r1, r3
   12b6e:	481f      	ldr	r0, [pc, #124]	; (12bec <Ssd1306::DrawPixel(long, long, PixelDisplayInterface::Color_t)+0x90>)
   12b70:	f002 fa46 	bl	15000 <__cyg_profile_func_enter>
  {
    // The 3 least significant bits hold the bit position within the byte
    uint32_t bit_position = y & 0b111;
   12b74:	9b01      	ldr	r3, [sp, #4]
   12b76:	f003 0307 	and.w	r3, r3, #7
   12b7a:	930b      	str	r3, [sp, #44]	; 0x2c
    // Each byte makes up a vertical column.
    // Shifting by 3, which also divides by 8 (the 8-bits of a column), will
    // be the row that we need to edit.
    uint32_t row = y >> 3;
   12b7c:	9b01      	ldr	r3, [sp, #4]
   12b7e:	10db      	asrs	r3, r3, #3
   12b80:	930a      	str	r3, [sp, #40]	; 0x28
    // Mask to clear the bit
    uint32_t clear_mask = ~(1 << bit_position);
   12b82:	2201      	movs	r2, #1
   12b84:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   12b86:	fa02 f303 	lsl.w	r3, r2, r3
   12b8a:	43db      	mvns	r3, r3
   12b8c:	9309      	str	r3, [sp, #36]	; 0x24
    // Mask to set the bit, if color.alpha != 0
    bool pixel_is_on  = (color.alpha != 0);
   12b8e:	f89d 3002 	ldrb.w	r3, [sp, #2]
   12b92:	2b00      	cmp	r3, #0
   12b94:	bf14      	ite	ne
   12b96:	2301      	movne	r3, #1
   12b98:	2300      	moveq	r3, #0
   12b9a:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
    uint32_t set_mask = pixel_is_on << bit_position;
   12b9e:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
   12ba2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   12ba4:	fa02 f303 	lsl.w	r3, r2, r3
   12ba8:	9307      	str	r3, [sp, #28]
    // Address of the pixel column to edit
    uint8_t * pixel_column = &(bitmap_[row][x]);
   12baa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   12bac:	4613      	mov	r3, r2
   12bae:	015b      	lsls	r3, r3, #5
   12bb0:	4413      	add	r3, r2
   12bb2:	009b      	lsls	r3, r3, #2
   12bb4:	4413      	add	r3, r2
   12bb6:	9a02      	ldr	r2, [sp, #8]
   12bb8:	4413      	add	r3, r2
   12bba:	3368      	adds	r3, #104	; 0x68
   12bbc:	9a03      	ldr	r2, [sp, #12]
   12bbe:	4413      	add	r3, r2
   12bc0:	9306      	str	r3, [sp, #24]
    // Read pixel column and update the pixel
    uint32_t result = (*pixel_column & clear_mask) | set_mask;
   12bc2:	9b06      	ldr	r3, [sp, #24]
   12bc4:	781b      	ldrb	r3, [r3, #0]
   12bc6:	461a      	mov	r2, r3
   12bc8:	9b09      	ldr	r3, [sp, #36]	; 0x24
   12bca:	4013      	ands	r3, r2
   12bcc:	9a07      	ldr	r2, [sp, #28]
   12bce:	4313      	orrs	r3, r2
   12bd0:	9305      	str	r3, [sp, #20]
    // Update pixel with the result of this operation
    *pixel_column = static_cast<uint8_t>(result);
   12bd2:	9b05      	ldr	r3, [sp, #20]
   12bd4:	b2da      	uxtb	r2, r3
   12bd6:	9b06      	ldr	r3, [sp, #24]
   12bd8:	701a      	strb	r2, [r3, #0]
   12bda:	4623      	mov	r3, r4
   12bdc:	4619      	mov	r1, r3
   12bde:	4803      	ldr	r0, [pc, #12]	; (12bec <Ssd1306::DrawPixel(long, long, PixelDisplayInterface::Color_t)+0x90>)
   12be0:	f002 fa22 	bl	15028 <__cyg_profile_func_exit>
  }
   12be4:	bf00      	nop
   12be6:	b00c      	add	sp, #48	; 0x30
   12be8:	bd10      	pop	{r4, pc}
   12bea:	bf00      	nop
   12bec:	00012b5d 	.word	0x00012b5d

00012bf0 <Ssd1306::Update()>:
  /// Writes internal bitmap_ to the screen
  void Update() final override
   12bf0:	b510      	push	{r4, lr}
   12bf2:	b084      	sub	sp, #16
   12bf4:	4674      	mov	r4, lr
   12bf6:	9001      	str	r0, [sp, #4]
   12bf8:	4623      	mov	r3, r4
   12bfa:	4619      	mov	r1, r3
   12bfc:	4818      	ldr	r0, [pc, #96]	; (12c60 <Ssd1306::Update()+0x70>)
   12bfe:	f002 f9ff 	bl	15000 <__cyg_profile_func_enter>
  {
    SetHorizontalAddressMode();
   12c02:	9801      	ldr	r0, [sp, #4]
   12c04:	f7ff ff64 	bl	12ad0 <Ssd1306::SetHorizontalAddressMode()>
    for (size_t row = 0; row < kRows; row++)
   12c08:	2300      	movs	r3, #0
   12c0a:	9303      	str	r3, [sp, #12]
   12c0c:	9b03      	ldr	r3, [sp, #12]
   12c0e:	2b07      	cmp	r3, #7
   12c10:	d81e      	bhi.n	12c50 <Ssd1306::Update()+0x60>
    {
      for (size_t column = 0; column < kColumns; column++)
   12c12:	2300      	movs	r3, #0
   12c14:	9302      	str	r3, [sp, #8]
   12c16:	9b02      	ldr	r3, [sp, #8]
   12c18:	2b7f      	cmp	r3, #127	; 0x7f
   12c1a:	d815      	bhi.n	12c48 <Ssd1306::Update()+0x58>
      {
        Write(bitmap_[row][column], Transaction::kData);
   12c1c:	9901      	ldr	r1, [sp, #4]
   12c1e:	9a03      	ldr	r2, [sp, #12]
   12c20:	4613      	mov	r3, r2
   12c22:	015b      	lsls	r3, r3, #5
   12c24:	4413      	add	r3, r2
   12c26:	009b      	lsls	r3, r3, #2
   12c28:	4413      	add	r3, r2
   12c2a:	18ca      	adds	r2, r1, r3
   12c2c:	9b02      	ldr	r3, [sp, #8]
   12c2e:	4413      	add	r3, r2
   12c30:	3368      	adds	r3, #104	; 0x68
   12c32:	781b      	ldrb	r3, [r3, #0]
   12c34:	4619      	mov	r1, r3
   12c36:	2301      	movs	r3, #1
   12c38:	2201      	movs	r2, #1
   12c3a:	9801      	ldr	r0, [sp, #4]
   12c3c:	f7ff fe46 	bl	128cc <Ssd1306::Write(unsigned long, Ssd1306::Transaction, unsigned int)>
      for (size_t column = 0; column < kColumns; column++)
   12c40:	9b02      	ldr	r3, [sp, #8]
   12c42:	3301      	adds	r3, #1
   12c44:	9302      	str	r3, [sp, #8]
   12c46:	e7e6      	b.n	12c16 <Ssd1306::Update()+0x26>
    for (size_t row = 0; row < kRows; row++)
   12c48:	9b03      	ldr	r3, [sp, #12]
   12c4a:	3301      	adds	r3, #1
   12c4c:	9303      	str	r3, [sp, #12]
   12c4e:	e7dd      	b.n	12c0c <Ssd1306::Update()+0x1c>
   12c50:	4623      	mov	r3, r4
   12c52:	4619      	mov	r1, r3
   12c54:	4802      	ldr	r0, [pc, #8]	; (12c60 <Ssd1306::Update()+0x70>)
   12c56:	f002 f9e7 	bl	15028 <__cyg_profile_func_exit>
      }
    }
  }
   12c5a:	bf00      	nop
   12c5c:	b004      	add	sp, #16
   12c5e:	bd10      	pop	{r4, pc}
   12c60:	00012bf1 	.word	0x00012bf1

00012c64 <Graphics::Graphics(PixelDisplayInterface*)>:
#include "utility/log.hpp"

class Graphics
{
 public:
  explicit Graphics(PixelDisplayInterface * display)
   12c64:	b530      	push	{r4, r5, lr}
   12c66:	b083      	sub	sp, #12
   12c68:	4675      	mov	r5, lr
   12c6a:	9001      	str	r0, [sp, #4]
   12c6c:	9100      	str	r1, [sp, #0]
   12c6e:	462b      	mov	r3, r5
   12c70:	4619      	mov	r1, r3
   12c72:	481e      	ldr	r0, [pc, #120]	; (12cec <Graphics::Graphics(PixelDisplayInterface*)+0x88>)
   12c74:	f002 f9c4 	bl	15000 <__cyg_profile_func_enter>
      : display_(display), color_(), width_(0), height_(0)
   12c78:	9b01      	ldr	r3, [sp, #4]
   12c7a:	9a00      	ldr	r2, [sp, #0]
   12c7c:	601a      	str	r2, [r3, #0]
   12c7e:	9b01      	ldr	r3, [sp, #4]
   12c80:	3304      	adds	r3, #4
   12c82:	4618      	mov	r0, r3
   12c84:	f7ff fcee 	bl	12664 <PixelDisplayInterface::Color_t::Color_t()>
   12c88:	9b01      	ldr	r3, [sp, #4]
   12c8a:	2200      	movs	r2, #0
   12c8c:	609a      	str	r2, [r3, #8]
   12c8e:	9b01      	ldr	r3, [sp, #4]
   12c90:	2200      	movs	r2, #0
   12c92:	60da      	str	r2, [r3, #12]
  {
    width_  = display->GetWidth();
   12c94:	9b00      	ldr	r3, [sp, #0]
   12c96:	681b      	ldr	r3, [r3, #0]
   12c98:	681b      	ldr	r3, [r3, #0]
   12c9a:	9800      	ldr	r0, [sp, #0]
   12c9c:	4798      	blx	r3
   12c9e:	4602      	mov	r2, r0
   12ca0:	9b01      	ldr	r3, [sp, #4]
   12ca2:	609a      	str	r2, [r3, #8]
    height_ = display->GetHeight();
   12ca4:	9b00      	ldr	r3, [sp, #0]
   12ca6:	681b      	ldr	r3, [r3, #0]
   12ca8:	3304      	adds	r3, #4
   12caa:	681b      	ldr	r3, [r3, #0]
   12cac:	9800      	ldr	r0, [sp, #0]
   12cae:	4798      	blx	r3
   12cb0:	4602      	mov	r2, r0
   12cb2:	9b01      	ldr	r3, [sp, #4]
   12cb4:	60da      	str	r2, [r3, #12]
    color_  = display->AvailableColors();
   12cb6:	9b00      	ldr	r3, [sp, #0]
   12cb8:	681b      	ldr	r3, [r3, #0]
   12cba:	3308      	adds	r3, #8
   12cbc:	681b      	ldr	r3, [r3, #0]
   12cbe:	9c01      	ldr	r4, [sp, #4]
   12cc0:	9800      	ldr	r0, [sp, #0]
   12cc2:	4798      	blx	r3
   12cc4:	4603      	mov	r3, r0
   12cc6:	461a      	mov	r2, r3
   12cc8:	7122      	strb	r2, [r4, #4]
   12cca:	f3c3 2207 	ubfx	r2, r3, #8, #8
   12cce:	7162      	strb	r2, [r4, #5]
   12cd0:	f3c3 4307 	ubfx	r3, r3, #16, #8
   12cd4:	71a3      	strb	r3, [r4, #6]
  }
   12cd6:	9c01      	ldr	r4, [sp, #4]
   12cd8:	462b      	mov	r3, r5
   12cda:	4619      	mov	r1, r3
   12cdc:	4803      	ldr	r0, [pc, #12]	; (12cec <Graphics::Graphics(PixelDisplayInterface*)+0x88>)
   12cde:	f002 f9a3 	bl	15028 <__cyg_profile_func_exit>
   12ce2:	4623      	mov	r3, r4
   12ce4:	4618      	mov	r0, r3
   12ce6:	b003      	add	sp, #12
   12ce8:	bd30      	pop	{r4, r5, pc}
   12cea:	bf00      	nop
   12cec:	00012c65 	.word	0x00012c65

00012cf0 <Graphics::DrawCharacter(long, long, char, bool)>:
    // |                    |
    // ----------------------
    DrawVerticalLine(x + width, y, height);
  }

  void DrawCharacter(int32_t x0, int32_t y0, char letter,
   12cf0:	b510      	push	{r4, lr}
   12cf2:	b08e      	sub	sp, #56	; 0x38
   12cf4:	4674      	mov	r4, lr
   12cf6:	9007      	str	r0, [sp, #28]
   12cf8:	9106      	str	r1, [sp, #24]
   12cfa:	9205      	str	r2, [sp, #20]
   12cfc:	f88d 3013 	strb.w	r3, [sp, #19]
   12d00:	4623      	mov	r3, r4
   12d02:	4619      	mov	r1, r3
   12d04:	4837      	ldr	r0, [pc, #220]	; (12de4 <Graphics::DrawCharacter(long, long, char, bool)+0xf4>)
   12d06:	f002 f97b 	bl	15000 <__cyg_profile_func_enter>
                     bool fill_background = true)
  {
    int32_t letter_position = static_cast<int32_t>(letter);
   12d0a:	f89d 3013 	ldrb.w	r3, [sp, #19]
   12d0e:	930b      	str	r3, [sp, #44]	; 0x2c

    PixelDisplayInterface::Color_t foreground = color_;
   12d10:	9a07      	ldr	r2, [sp, #28]
   12d12:	ab0a      	add	r3, sp, #40	; 0x28
   12d14:	3204      	adds	r2, #4
   12d16:	6812      	ldr	r2, [r2, #0]
   12d18:	4611      	mov	r1, r2
   12d1a:	8019      	strh	r1, [r3, #0]
   12d1c:	3302      	adds	r3, #2
   12d1e:	0c12      	lsrs	r2, r2, #16
   12d20:	701a      	strb	r2, [r3, #0]
    PixelDisplayInterface::Color_t background =
        PixelDisplayInterface::Color_t(0, 0, 0, 0, 1, true);
   12d22:	a809      	add	r0, sp, #36	; 0x24
   12d24:	2301      	movs	r3, #1
   12d26:	9302      	str	r3, [sp, #8]
   12d28:	2301      	movs	r3, #1
   12d2a:	9301      	str	r3, [sp, #4]
   12d2c:	2300      	movs	r3, #0
   12d2e:	9300      	str	r3, [sp, #0]
   12d30:	2300      	movs	r3, #0
   12d32:	2200      	movs	r2, #0
   12d34:	2100      	movs	r1, #0
   12d36:	f7ff fc4b 	bl	125d0 <PixelDisplayInterface::Color_t::Color_t(bool, bool, bool, unsigned char, unsigned char, bool)>

    for (int32_t y = 0; y < 8; y++)
   12d3a:	2300      	movs	r3, #0
   12d3c:	930d      	str	r3, [sp, #52]	; 0x34
   12d3e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   12d40:	2b07      	cmp	r3, #7
   12d42:	dc3d      	bgt.n	12dc0 <Graphics::DrawCharacter(long, long, char, bool)+0xd0>
    {
      for (int32_t x = 0; x < 8; x++)
   12d44:	2300      	movs	r3, #0
   12d46:	930c      	str	r3, [sp, #48]	; 0x30
   12d48:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   12d4a:	2b07      	cmp	r3, #7
   12d4c:	dc34      	bgt.n	12db8 <Graphics::DrawCharacter(long, long, char, bool)+0xc8>
      {
        if (font8x8_basic[letter_position][y] & (1 << x))
   12d4e:	4a26      	ldr	r2, [pc, #152]	; (12de8 <Graphics::DrawCharacter(long, long, char, bool)+0xf8>)
   12d50:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   12d52:	00db      	lsls	r3, r3, #3
   12d54:	441a      	add	r2, r3
   12d56:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   12d58:	4413      	add	r3, r2
   12d5a:	781b      	ldrb	r3, [r3, #0]
   12d5c:	461a      	mov	r2, r3
   12d5e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   12d60:	fa42 f303 	asr.w	r3, r2, r3
   12d64:	f003 0301 	and.w	r3, r3, #1
   12d68:	2b00      	cmp	r3, #0
   12d6a:	d009      	beq.n	12d80 <Graphics::DrawCharacter(long, long, char, bool)+0x90>
        {
          color_ = foreground;
   12d6c:	9b07      	ldr	r3, [sp, #28]
   12d6e:	3304      	adds	r3, #4
   12d70:	aa0a      	add	r2, sp, #40	; 0x28
   12d72:	6812      	ldr	r2, [r2, #0]
   12d74:	4611      	mov	r1, r2
   12d76:	8019      	strh	r1, [r3, #0]
   12d78:	3302      	adds	r3, #2
   12d7a:	0c12      	lsrs	r2, r2, #16
   12d7c:	701a      	strb	r2, [r3, #0]
   12d7e:	e00c      	b.n	12d9a <Graphics::DrawCharacter(long, long, char, bool)+0xaa>
        }
        else if (fill_background)
   12d80:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
   12d84:	2b00      	cmp	r3, #0
   12d86:	d008      	beq.n	12d9a <Graphics::DrawCharacter(long, long, char, bool)+0xaa>
        {
          color_ = background;
   12d88:	9b07      	ldr	r3, [sp, #28]
   12d8a:	3304      	adds	r3, #4
   12d8c:	aa09      	add	r2, sp, #36	; 0x24
   12d8e:	6812      	ldr	r2, [r2, #0]
   12d90:	4611      	mov	r1, r2
   12d92:	8019      	strh	r1, [r3, #0]
   12d94:	3302      	adds	r3, #2
   12d96:	0c12      	lsrs	r2, r2, #16
   12d98:	701a      	strb	r2, [r3, #0]
        }
        DrawPixel(x0 + x, y0 + y);
   12d9a:	9a06      	ldr	r2, [sp, #24]
   12d9c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   12d9e:	4413      	add	r3, r2
   12da0:	4619      	mov	r1, r3
   12da2:	9a05      	ldr	r2, [sp, #20]
   12da4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   12da6:	4413      	add	r3, r2
   12da8:	461a      	mov	r2, r3
   12daa:	9807      	ldr	r0, [sp, #28]
   12dac:	f000 f81e 	bl	12dec <Graphics::DrawPixel(unsigned long, unsigned long)>
      for (int32_t x = 0; x < 8; x++)
   12db0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   12db2:	3301      	adds	r3, #1
   12db4:	930c      	str	r3, [sp, #48]	; 0x30
   12db6:	e7c7      	b.n	12d48 <Graphics::DrawCharacter(long, long, char, bool)+0x58>
    for (int32_t y = 0; y < 8; y++)
   12db8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   12dba:	3301      	adds	r3, #1
   12dbc:	930d      	str	r3, [sp, #52]	; 0x34
   12dbe:	e7be      	b.n	12d3e <Graphics::DrawCharacter(long, long, char, bool)+0x4e>
      }
    }
    color_ = foreground;
   12dc0:	9b07      	ldr	r3, [sp, #28]
   12dc2:	3304      	adds	r3, #4
   12dc4:	aa0a      	add	r2, sp, #40	; 0x28
   12dc6:	6812      	ldr	r2, [r2, #0]
   12dc8:	4611      	mov	r1, r2
   12dca:	8019      	strh	r1, [r3, #0]
   12dcc:	3302      	adds	r3, #2
   12dce:	0c12      	lsrs	r2, r2, #16
   12dd0:	701a      	strb	r2, [r3, #0]
   12dd2:	4623      	mov	r3, r4
   12dd4:	4619      	mov	r1, r3
   12dd6:	4803      	ldr	r0, [pc, #12]	; (12de4 <Graphics::DrawCharacter(long, long, char, bool)+0xf4>)
   12dd8:	f002 f926 	bl	15028 <__cyg_profile_func_exit>
  }
   12ddc:	bf00      	nop
   12dde:	b00e      	add	sp, #56	; 0x38
   12de0:	bd10      	pop	{r4, pc}
   12de2:	bf00      	nop
   12de4:	00012cf1 	.word	0x00012cf1
   12de8:	1000005c 	.word	0x1000005c

00012dec <Graphics::DrawPixel(unsigned long, unsigned long)>:

  void DrawPixel(uint32_t x, uint32_t y)
   12dec:	b530      	push	{r4, r5, lr}
   12dee:	b085      	sub	sp, #20
   12df0:	4675      	mov	r5, lr
   12df2:	9003      	str	r0, [sp, #12]
   12df4:	9102      	str	r1, [sp, #8]
   12df6:	9201      	str	r2, [sp, #4]
   12df8:	462b      	mov	r3, r5
   12dfa:	4619      	mov	r1, r3
   12dfc:	4810      	ldr	r0, [pc, #64]	; (12e40 <Graphics::DrawPixel(unsigned long, unsigned long)+0x54>)
   12dfe:	f002 f8ff 	bl	15000 <__cyg_profile_func_enter>
  {
    // Pixels outside of the bounds of the screen will not be drawn.
    if (x <= width_ && y <= height_)
   12e02:	9b03      	ldr	r3, [sp, #12]
   12e04:	689b      	ldr	r3, [r3, #8]
   12e06:	9a02      	ldr	r2, [sp, #8]
   12e08:	429a      	cmp	r2, r3
   12e0a:	d810      	bhi.n	12e2e <Graphics::DrawPixel(unsigned long, unsigned long)+0x42>
   12e0c:	9b03      	ldr	r3, [sp, #12]
   12e0e:	68db      	ldr	r3, [r3, #12]
   12e10:	9a01      	ldr	r2, [sp, #4]
   12e12:	429a      	cmp	r2, r3
   12e14:	d80b      	bhi.n	12e2e <Graphics::DrawPixel(unsigned long, unsigned long)+0x42>
    {
      display_->DrawPixel(x, y, color_);
   12e16:	9b03      	ldr	r3, [sp, #12]
   12e18:	6818      	ldr	r0, [r3, #0]
   12e1a:	9b03      	ldr	r3, [sp, #12]
   12e1c:	681b      	ldr	r3, [r3, #0]
   12e1e:	681b      	ldr	r3, [r3, #0]
   12e20:	331c      	adds	r3, #28
   12e22:	681c      	ldr	r4, [r3, #0]
   12e24:	9902      	ldr	r1, [sp, #8]
   12e26:	9a01      	ldr	r2, [sp, #4]
   12e28:	9b03      	ldr	r3, [sp, #12]
   12e2a:	685b      	ldr	r3, [r3, #4]
   12e2c:	47a0      	blx	r4
   12e2e:	462b      	mov	r3, r5
   12e30:	4619      	mov	r1, r3
   12e32:	4803      	ldr	r0, [pc, #12]	; (12e40 <Graphics::DrawPixel(unsigned long, unsigned long)+0x54>)
   12e34:	f002 f8f8 	bl	15028 <__cyg_profile_func_exit>
    }
  }
   12e38:	bf00      	nop
   12e3a:	b005      	add	sp, #20
   12e3c:	bd30      	pop	{r4, r5, pc}
   12e3e:	bf00      	nop
   12e40:	00012ded 	.word	0x00012ded

00012e44 <Graphics::Update()>:
  void Update()
   12e44:	b510      	push	{r4, lr}
   12e46:	b082      	sub	sp, #8
   12e48:	4674      	mov	r4, lr
   12e4a:	9001      	str	r0, [sp, #4]
   12e4c:	4623      	mov	r3, r4
   12e4e:	4619      	mov	r1, r3
   12e50:	4809      	ldr	r0, [pc, #36]	; (12e78 <Graphics::Update()+0x34>)
   12e52:	f002 f8d5 	bl	15000 <__cyg_profile_func_enter>
  {
    display_->Update();
   12e56:	9b01      	ldr	r3, [sp, #4]
   12e58:	681a      	ldr	r2, [r3, #0]
   12e5a:	9b01      	ldr	r3, [sp, #4]
   12e5c:	681b      	ldr	r3, [r3, #0]
   12e5e:	681b      	ldr	r3, [r3, #0]
   12e60:	3320      	adds	r3, #32
   12e62:	681b      	ldr	r3, [r3, #0]
   12e64:	4610      	mov	r0, r2
   12e66:	4798      	blx	r3
   12e68:	4623      	mov	r3, r4
   12e6a:	4619      	mov	r1, r3
   12e6c:	4802      	ldr	r0, [pc, #8]	; (12e78 <Graphics::Update()+0x34>)
   12e6e:	f002 f8db 	bl	15028 <__cyg_profile_func_exit>
  }
   12e72:	bf00      	nop
   12e74:	b002      	add	sp, #8
   12e76:	bd10      	pop	{r4, pc}
   12e78:	00012e45 	.word	0x00012e45

00012e7c <OledTerminal::printf(char const*, ...)>:
    graphics_.Initialize();
    graphics_.Clear();
    graphics_.Update();
  }

  int printf(const char * format, ...)  // NOLINT
   12e7c:	b40e      	push	{r1, r2, r3}
   12e7e:	b530      	push	{r4, r5, lr}
   12e80:	b0c6      	sub	sp, #280	; 0x118
   12e82:	4675      	mov	r5, lr
   12e84:	ab01      	add	r3, sp, #4
   12e86:	6018      	str	r0, [r3, #0]
   12e88:	462b      	mov	r3, r5
   12e8a:	4619      	mov	r1, r3
   12e8c:	4850      	ldr	r0, [pc, #320]	; (12fd0 <OledTerminal::printf(char const*, ...)+0x154>)
   12e8e:	f002 f8b7 	bl	15000 <__cyg_profile_func_enter>
  {
    char buffer[256];

    va_list args;
    va_start(args, format);
   12e92:	aa4a      	add	r2, sp, #296	; 0x128
   12e94:	ab02      	add	r3, sp, #8
   12e96:	601a      	str	r2, [r3, #0]
    size_t characters = vsnprintf(buffer, sizeof(buffer), format, args);
   12e98:	ab02      	add	r3, sp, #8
   12e9a:	a803      	add	r0, sp, #12
   12e9c:	681b      	ldr	r3, [r3, #0]
   12e9e:	9a49      	ldr	r2, [sp, #292]	; 0x124
   12ea0:	f44f 7180 	mov.w	r1, #256	; 0x100
   12ea4:	f003 fb4e 	bl	16544 <vsnprintf>
   12ea8:	4603      	mov	r3, r0
   12eaa:	9344      	str	r3, [sp, #272]	; 0x110
    va_end(args);

    size_t pos = 0;
   12eac:	2300      	movs	r3, #0
   12eae:	9345      	str	r3, [sp, #276]	; 0x114
    for (; pos < characters; pos++)
   12eb0:	9a45      	ldr	r2, [sp, #276]	; 0x114
   12eb2:	9b44      	ldr	r3, [sp, #272]	; 0x110
   12eb4:	429a      	cmp	r2, r3
   12eb6:	d253      	bcs.n	12f60 <OledTerminal::printf(char const*, ...)+0xe4>
    {
      char character = buffer[pos];
   12eb8:	aa03      	add	r2, sp, #12
   12eba:	9b45      	ldr	r3, [sp, #276]	; 0x114
   12ebc:	4413      	add	r3, r2
   12ebe:	781b      	ldrb	r3, [r3, #0]
   12ec0:	f88d 310f 	strb.w	r3, [sp, #271]	; 0x10f
      switch (character)
   12ec4:	f89d 310f 	ldrb.w	r3, [sp, #271]	; 0x10f
   12ec8:	2b0a      	cmp	r3, #10
   12eca:	d10e      	bne.n	12eea <OledTerminal::printf(char const*, ...)+0x6e>
      {
        case '\n':
          column_ = 0;
   12ecc:	ab01      	add	r3, sp, #4
   12ece:	681b      	ldr	r3, [r3, #0]
   12ed0:	2200      	movs	r2, #0
   12ed2:	f8c3 2740 	str.w	r2, [r3, #1856]	; 0x740
          row_++;
   12ed6:	ab01      	add	r3, sp, #4
   12ed8:	681b      	ldr	r3, [r3, #0]
   12eda:	f8d3 373c 	ldr.w	r3, [r3, #1852]	; 0x73c
   12ede:	1c5a      	adds	r2, r3, #1
   12ee0:	ab01      	add	r3, sp, #4
   12ee2:	681b      	ldr	r3, [r3, #0]
   12ee4:	f8c3 273c 	str.w	r2, [r3, #1852]	; 0x73c
          break;
   12ee8:	e036      	b.n	12f58 <OledTerminal::printf(char const*, ...)+0xdc>
        default:
          terminal_[(row_ + row_start_) % kMaxRows][column_] = character;
   12eea:	ab01      	add	r3, sp, #4
   12eec:	681b      	ldr	r3, [r3, #0]
   12eee:	f8d3 273c 	ldr.w	r2, [r3, #1852]	; 0x73c
   12ef2:	ab01      	add	r3, sp, #4
   12ef4:	681b      	ldr	r3, [r3, #0]
   12ef6:	f8d3 3744 	ldr.w	r3, [r3, #1860]	; 0x744
   12efa:	4413      	add	r3, r2
   12efc:	f003 0207 	and.w	r2, r3, #7
   12f00:	ab01      	add	r3, sp, #4
   12f02:	681b      	ldr	r3, [r3, #0]
   12f04:	f8d3 3740 	ldr.w	r3, [r3, #1856]	; 0x740
   12f08:	a901      	add	r1, sp, #4
   12f0a:	6809      	ldr	r1, [r1, #0]
   12f0c:	0112      	lsls	r2, r2, #4
   12f0e:	440a      	add	r2, r1
   12f10:	4413      	add	r3, r2
   12f12:	f503 63e9 	add.w	r3, r3, #1864	; 0x748
   12f16:	f89d 210f 	ldrb.w	r2, [sp, #271]	; 0x10f
   12f1a:	701a      	strb	r2, [r3, #0]
          column_++;
   12f1c:	ab01      	add	r3, sp, #4
   12f1e:	681b      	ldr	r3, [r3, #0]
   12f20:	f8d3 3740 	ldr.w	r3, [r3, #1856]	; 0x740
   12f24:	1c5a      	adds	r2, r3, #1
   12f26:	ab01      	add	r3, sp, #4
   12f28:	681b      	ldr	r3, [r3, #0]
   12f2a:	f8c3 2740 	str.w	r2, [r3, #1856]	; 0x740
          if (column_ >= kMaxColumns)
   12f2e:	ab01      	add	r3, sp, #4
   12f30:	681b      	ldr	r3, [r3, #0]
   12f32:	f8d3 3740 	ldr.w	r3, [r3, #1856]	; 0x740
   12f36:	2b0f      	cmp	r3, #15
   12f38:	d90d      	bls.n	12f56 <OledTerminal::printf(char const*, ...)+0xda>
          {
            column_ = 0;
   12f3a:	ab01      	add	r3, sp, #4
   12f3c:	681b      	ldr	r3, [r3, #0]
   12f3e:	2200      	movs	r2, #0
   12f40:	f8c3 2740 	str.w	r2, [r3, #1856]	; 0x740
            row_++;
   12f44:	ab01      	add	r3, sp, #4
   12f46:	681b      	ldr	r3, [r3, #0]
   12f48:	f8d3 373c 	ldr.w	r3, [r3, #1852]	; 0x73c
   12f4c:	1c5a      	adds	r2, r3, #1
   12f4e:	ab01      	add	r3, sp, #4
   12f50:	681b      	ldr	r3, [r3, #0]
   12f52:	f8c3 273c 	str.w	r2, [r3, #1852]	; 0x73c
          }
          break;
   12f56:	bf00      	nop
    for (; pos < characters; pos++)
   12f58:	9b45      	ldr	r3, [sp, #276]	; 0x114
   12f5a:	3301      	adds	r3, #1
   12f5c:	9345      	str	r3, [sp, #276]	; 0x114
   12f5e:	e7a7      	b.n	12eb0 <OledTerminal::printf(char const*, ...)+0x34>
      }
    }
    Update();
   12f60:	ab01      	add	r3, sp, #4
   12f62:	6818      	ldr	r0, [r3, #0]
   12f64:	f000 f836 	bl	12fd4 <OledTerminal::Update()>
    if (row_ >= kMaxRows)
   12f68:	ab01      	add	r3, sp, #4
   12f6a:	681b      	ldr	r3, [r3, #0]
   12f6c:	f8d3 373c 	ldr.w	r3, [r3, #1852]	; 0x73c
   12f70:	2b07      	cmp	r3, #7
   12f72:	d91f      	bls.n	12fb4 <OledTerminal::printf(char const*, ...)+0x138>
    {
      row_start_ = (row_start_ + 1) % kMaxRows;
   12f74:	ab01      	add	r3, sp, #4
   12f76:	681b      	ldr	r3, [r3, #0]
   12f78:	f8d3 3744 	ldr.w	r3, [r3, #1860]	; 0x744
   12f7c:	3301      	adds	r3, #1
   12f7e:	f003 0207 	and.w	r2, r3, #7
   12f82:	ab01      	add	r3, sp, #4
   12f84:	681b      	ldr	r3, [r3, #0]
   12f86:	f8c3 2744 	str.w	r2, [r3, #1860]	; 0x744
      row_       = kMaxRows - 1;
   12f8a:	ab01      	add	r3, sp, #4
   12f8c:	681b      	ldr	r3, [r3, #0]
   12f8e:	2207      	movs	r2, #7
   12f90:	f8c3 273c 	str.w	r2, [r3, #1852]	; 0x73c
      ClearRow((row_ + row_start_) % kMaxRows);
   12f94:	ab01      	add	r3, sp, #4
   12f96:	681b      	ldr	r3, [r3, #0]
   12f98:	f8d3 273c 	ldr.w	r2, [r3, #1852]	; 0x73c
   12f9c:	ab01      	add	r3, sp, #4
   12f9e:	681b      	ldr	r3, [r3, #0]
   12fa0:	f8d3 3744 	ldr.w	r3, [r3, #1860]	; 0x744
   12fa4:	4413      	add	r3, r2
   12fa6:	f003 0207 	and.w	r2, r3, #7
   12faa:	ab01      	add	r3, sp, #4
   12fac:	4611      	mov	r1, r2
   12fae:	6818      	ldr	r0, [r3, #0]
   12fb0:	f000 f85e 	bl	13070 <OledTerminal::ClearRow(unsigned int)>
    }
    return pos;
   12fb4:	9c45      	ldr	r4, [sp, #276]	; 0x114
   12fb6:	462b      	mov	r3, r5
   12fb8:	4619      	mov	r1, r3
   12fba:	4805      	ldr	r0, [pc, #20]	; (12fd0 <OledTerminal::printf(char const*, ...)+0x154>)
   12fbc:	f002 f834 	bl	15028 <__cyg_profile_func_exit>
   12fc0:	4623      	mov	r3, r4
  }
   12fc2:	4618      	mov	r0, r3
   12fc4:	b046      	add	sp, #280	; 0x118
   12fc6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   12fca:	b003      	add	sp, #12
   12fcc:	4770      	bx	lr
   12fce:	bf00      	nop
   12fd0:	00012e7d 	.word	0x00012e7d

00012fd4 <OledTerminal::Update()>:
  OledTerminal & MoveToLineStart()
  {
    column_ = 0;
    return *this;
  }
  OledTerminal & Update()
   12fd4:	b530      	push	{r4, r5, lr}
   12fd6:	b089      	sub	sp, #36	; 0x24
   12fd8:	4675      	mov	r5, lr
   12fda:	9003      	str	r0, [sp, #12]
   12fdc:	462b      	mov	r3, r5
   12fde:	4619      	mov	r1, r3
   12fe0:	4822      	ldr	r0, [pc, #136]	; (1306c <OledTerminal::Update()+0x98>)
   12fe2:	f002 f80d 	bl	15000 <__cyg_profile_func_enter>
  {
    for (size_t i = 0; i < kMaxRows; i++)
   12fe6:	2300      	movs	r3, #0
   12fe8:	9307      	str	r3, [sp, #28]
   12fea:	9b07      	ldr	r3, [sp, #28]
   12fec:	2b07      	cmp	r3, #7
   12fee:	d82c      	bhi.n	1304a <OledTerminal::Update()+0x76>
    {
      for (size_t j = 0; j < kMaxColumns; j++)
   12ff0:	2300      	movs	r3, #0
   12ff2:	9306      	str	r3, [sp, #24]
   12ff4:	9b06      	ldr	r3, [sp, #24]
   12ff6:	2b0f      	cmp	r3, #15
   12ff8:	d823      	bhi.n	13042 <OledTerminal::Update()+0x6e>
      {
        size_t x = j * kCharacterWidth;
   12ffa:	9b06      	ldr	r3, [sp, #24]
   12ffc:	00db      	lsls	r3, r3, #3
   12ffe:	9305      	str	r3, [sp, #20]
        size_t y = i * kCharacterHeight;
   13000:	9b07      	ldr	r3, [sp, #28]
   13002:	00db      	lsls	r3, r3, #3
   13004:	9304      	str	r3, [sp, #16]
        graphics_.DrawCharacter(x, y,
   13006:	9b03      	ldr	r3, [sp, #12]
   13008:	f203 702c 	addw	r0, r3, #1836	; 0x72c
   1300c:	9905      	ldr	r1, [sp, #20]
   1300e:	9c04      	ldr	r4, [sp, #16]
                                terminal_[(i + row_start_) % kMaxRows][j]);
   13010:	9b03      	ldr	r3, [sp, #12]
   13012:	f8d3 2744 	ldr.w	r2, [r3, #1860]	; 0x744
   13016:	9b07      	ldr	r3, [sp, #28]
   13018:	4413      	add	r3, r2
   1301a:	f003 0307 	and.w	r3, r3, #7
        graphics_.DrawCharacter(x, y,
   1301e:	9a03      	ldr	r2, [sp, #12]
   13020:	011b      	lsls	r3, r3, #4
   13022:	441a      	add	r2, r3
   13024:	9b06      	ldr	r3, [sp, #24]
   13026:	4413      	add	r3, r2
   13028:	f503 63e9 	add.w	r3, r3, #1864	; 0x748
   1302c:	781a      	ldrb	r2, [r3, #0]
   1302e:	2301      	movs	r3, #1
   13030:	9300      	str	r3, [sp, #0]
   13032:	4613      	mov	r3, r2
   13034:	4622      	mov	r2, r4
   13036:	f7ff fe5b 	bl	12cf0 <Graphics::DrawCharacter(long, long, char, bool)>
      for (size_t j = 0; j < kMaxColumns; j++)
   1303a:	9b06      	ldr	r3, [sp, #24]
   1303c:	3301      	adds	r3, #1
   1303e:	9306      	str	r3, [sp, #24]
   13040:	e7d8      	b.n	12ff4 <OledTerminal::Update()+0x20>
    for (size_t i = 0; i < kMaxRows; i++)
   13042:	9b07      	ldr	r3, [sp, #28]
   13044:	3301      	adds	r3, #1
   13046:	9307      	str	r3, [sp, #28]
   13048:	e7cf      	b.n	12fea <OledTerminal::Update()+0x16>
      }
    }
    graphics_.Update();
   1304a:	9b03      	ldr	r3, [sp, #12]
   1304c:	f203 732c 	addw	r3, r3, #1836	; 0x72c
   13050:	4618      	mov	r0, r3
   13052:	f7ff fef7 	bl	12e44 <Graphics::Update()>
    return *this;
   13056:	9c03      	ldr	r4, [sp, #12]
   13058:	462b      	mov	r3, r5
   1305a:	4619      	mov	r1, r3
   1305c:	4803      	ldr	r0, [pc, #12]	; (1306c <OledTerminal::Update()+0x98>)
   1305e:	f001 ffe3 	bl	15028 <__cyg_profile_func_exit>
   13062:	4623      	mov	r3, r4
  }
   13064:	4618      	mov	r0, r3
   13066:	b009      	add	sp, #36	; 0x24
   13068:	bd30      	pop	{r4, r5, pc}
   1306a:	bf00      	nop
   1306c:	00012fd5 	.word	0x00012fd5

00013070 <OledTerminal::ClearRow(unsigned int)>:
  void ClearRow(size_t row_location)
   13070:	b510      	push	{r4, lr}
   13072:	b084      	sub	sp, #16
   13074:	4674      	mov	r4, lr
   13076:	9001      	str	r0, [sp, #4]
   13078:	9100      	str	r1, [sp, #0]
   1307a:	4623      	mov	r3, r4
   1307c:	4619      	mov	r1, r3
   1307e:	480f      	ldr	r0, [pc, #60]	; (130bc <OledTerminal::ClearRow(unsigned int)+0x4c>)
   13080:	f001 ffbe 	bl	15000 <__cyg_profile_func_enter>
  {
    for (size_t i = 0; i < kMaxColumns; i++)
   13084:	2300      	movs	r3, #0
   13086:	9303      	str	r3, [sp, #12]
   13088:	9b03      	ldr	r3, [sp, #12]
   1308a:	2b0f      	cmp	r3, #15
   1308c:	d80d      	bhi.n	130aa <OledTerminal::ClearRow(unsigned int)+0x3a>
    {
      terminal_[row_location][i] = ' ';
   1308e:	9a01      	ldr	r2, [sp, #4]
   13090:	9b00      	ldr	r3, [sp, #0]
   13092:	011b      	lsls	r3, r3, #4
   13094:	441a      	add	r2, r3
   13096:	9b03      	ldr	r3, [sp, #12]
   13098:	4413      	add	r3, r2
   1309a:	f503 63e9 	add.w	r3, r3, #1864	; 0x748
   1309e:	2220      	movs	r2, #32
   130a0:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < kMaxColumns; i++)
   130a2:	9b03      	ldr	r3, [sp, #12]
   130a4:	3301      	adds	r3, #1
   130a6:	9303      	str	r3, [sp, #12]
   130a8:	e7ee      	b.n	13088 <OledTerminal::ClearRow(unsigned int)+0x18>
   130aa:	4623      	mov	r3, r4
   130ac:	4619      	mov	r1, r3
   130ae:	4803      	ldr	r0, [pc, #12]	; (130bc <OledTerminal::ClearRow(unsigned int)+0x4c>)
   130b0:	f001 ffba 	bl	15028 <__cyg_profile_func_exit>
    }
  }
   130b4:	bf00      	nop
   130b6:	b004      	add	sp, #16
   130b8:	bd10      	pop	{r4, pc}
   130ba:	bf00      	nop
   130bc:	00013071 	.word	0x00013071

000130c0 <OledTerminal::OledTerminal()>:
class OledTerminal
   130c0:	b530      	push	{r4, r5, lr}
   130c2:	b083      	sub	sp, #12
   130c4:	4675      	mov	r5, lr
   130c6:	9001      	str	r0, [sp, #4]
   130c8:	462b      	mov	r3, r5
   130ca:	4619      	mov	r1, r3
   130cc:	4816      	ldr	r0, [pc, #88]	; (13128 <OledTerminal::OledTerminal()+0x68>)
   130ce:	f001 ff97 	bl	15000 <__cyg_profile_func_enter>
   130d2:	9b01      	ldr	r3, [sp, #4]
   130d4:	4618      	mov	r0, r3
   130d6:	f7ff fb4f 	bl	12778 <Ssd1306::Ssd1306()>
   130da:	9b01      	ldr	r3, [sp, #4]
   130dc:	f203 732c 	addw	r3, r3, #1836	; 0x72c
   130e0:	9a01      	ldr	r2, [sp, #4]
   130e2:	4611      	mov	r1, r2
   130e4:	4618      	mov	r0, r3
   130e6:	f7ff fdbd 	bl	12c64 <Graphics::Graphics(PixelDisplayInterface*)>
   130ea:	9b01      	ldr	r3, [sp, #4]
   130ec:	2200      	movs	r2, #0
   130ee:	f8c3 273c 	str.w	r2, [r3, #1852]	; 0x73c
   130f2:	9b01      	ldr	r3, [sp, #4]
   130f4:	2200      	movs	r2, #0
   130f6:	f8c3 2740 	str.w	r2, [r3, #1856]	; 0x740
   130fa:	9b01      	ldr	r3, [sp, #4]
   130fc:	2200      	movs	r2, #0
   130fe:	f8c3 2744 	str.w	r2, [r3, #1860]	; 0x744
   13102:	9b01      	ldr	r3, [sp, #4]
   13104:	f503 63e9 	add.w	r3, r3, #1864	; 0x748
   13108:	2280      	movs	r2, #128	; 0x80
   1310a:	2100      	movs	r1, #0
   1310c:	4618      	mov	r0, r3
   1310e:	f004 ff1d 	bl	17f4c <memset>
   13112:	9c01      	ldr	r4, [sp, #4]
   13114:	462b      	mov	r3, r5
   13116:	4619      	mov	r1, r3
   13118:	4803      	ldr	r0, [pc, #12]	; (13128 <OledTerminal::OledTerminal()+0x68>)
   1311a:	f001 ff85 	bl	15028 <__cyg_profile_func_exit>
   1311e:	4623      	mov	r3, r4
   13120:	4618      	mov	r0, r3
   13122:	b003      	add	sp, #12
   13124:	bd30      	pop	{r4, r5, pc}
   13126:	bf00      	nop
   13128:	000130c1 	.word	0x000130c1

0001312c <unsigned long bit::Set<unsigned long>(unsigned long, unsigned long)>:
constexpr T Set(T target, uint32_t position)
   1312c:	b530      	push	{r4, r5, lr}
   1312e:	b083      	sub	sp, #12
   13130:	4675      	mov	r5, lr
   13132:	9001      	str	r0, [sp, #4]
   13134:	9100      	str	r1, [sp, #0]
   13136:	462b      	mov	r3, r5
   13138:	4619      	mov	r1, r3
   1313a:	480a      	ldr	r0, [pc, #40]	; (13164 <unsigned long bit::Set<unsigned long>(unsigned long, unsigned long)+0x38>)
   1313c:	f001 ff60 	bl	15000 <__cyg_profile_func_enter>
  return target | (1 << position);
   13140:	2201      	movs	r2, #1
   13142:	9b00      	ldr	r3, [sp, #0]
   13144:	fa02 f303 	lsl.w	r3, r2, r3
   13148:	461a      	mov	r2, r3
   1314a:	9b01      	ldr	r3, [sp, #4]
   1314c:	ea42 0403 	orr.w	r4, r2, r3
   13150:	462b      	mov	r3, r5
   13152:	4619      	mov	r1, r3
   13154:	4803      	ldr	r0, [pc, #12]	; (13164 <unsigned long bit::Set<unsigned long>(unsigned long, unsigned long)+0x38>)
   13156:	f001 ff67 	bl	15028 <__cyg_profile_func_exit>
   1315a:	4623      	mov	r3, r4
}
   1315c:	4618      	mov	r0, r3
   1315e:	b003      	add	sp, #12
   13160:	bd30      	pop	{r4, r5, pc}
   13162:	bf00      	nop
   13164:	0001312d 	.word	0x0001312d

00013168 <bool bit::Read<unsigned long>(unsigned long, unsigned long)>:
[[gnu::always_inline]][[nodiscard]] constexpr bool Read(T target,
   13168:	b530      	push	{r4, r5, lr}
   1316a:	b083      	sub	sp, #12
   1316c:	4675      	mov	r5, lr
   1316e:	9001      	str	r0, [sp, #4]
   13170:	9100      	str	r1, [sp, #0]
   13172:	462b      	mov	r3, r5
   13174:	4619      	mov	r1, r3
   13176:	480c      	ldr	r0, [pc, #48]	; (131a8 <bool bit::Read<unsigned long>(unsigned long, unsigned long)+0x40>)
   13178:	f001 ff42 	bl	15000 <__cyg_profile_func_enter>
  return static_cast<bool>(target & (1 << position));
   1317c:	2201      	movs	r2, #1
   1317e:	9b00      	ldr	r3, [sp, #0]
   13180:	fa02 f303 	lsl.w	r3, r2, r3
   13184:	461a      	mov	r2, r3
   13186:	9b01      	ldr	r3, [sp, #4]
   13188:	4013      	ands	r3, r2
   1318a:	2b00      	cmp	r3, #0
   1318c:	bf14      	ite	ne
   1318e:	2301      	movne	r3, #1
   13190:	2300      	moveq	r3, #0
   13192:	b2dc      	uxtb	r4, r3
   13194:	462b      	mov	r3, r5
   13196:	4619      	mov	r1, r3
   13198:	4803      	ldr	r0, [pc, #12]	; (131a8 <bool bit::Read<unsigned long>(unsigned long, unsigned long)+0x40>)
   1319a:	f001 ff45 	bl	15028 <__cyg_profile_func_exit>
   1319e:	4623      	mov	r3, r4
}
   131a0:	4618      	mov	r0, r3
   131a2:	b003      	add	sp, #12
   131a4:	bd30      	pop	{r4, r5, pc}
   131a6:	bf00      	nop
   131a8:	00013169 	.word	0x00013169

000131ac <unsigned long bit::Insert<unsigned long, unsigned char>(unsigned long, unsigned char, unsigned long, unsigned long)>:
constexpr T Insert(T target, U value, uint32_t position, uint32_t width = 1)
   131ac:	b530      	push	{r4, r5, lr}
   131ae:	b089      	sub	sp, #36	; 0x24
   131b0:	4675      	mov	r5, lr
   131b2:	9003      	str	r0, [sp, #12]
   131b4:	9201      	str	r2, [sp, #4]
   131b6:	9300      	str	r3, [sp, #0]
   131b8:	460b      	mov	r3, r1
   131ba:	f88d 300b 	strb.w	r3, [sp, #11]
   131be:	462b      	mov	r3, r5
   131c0:	4619      	mov	r1, r3
   131c2:	4816      	ldr	r0, [pc, #88]	; (1321c <unsigned long bit::Insert<unsigned long, unsigned char>(unsigned long, unsigned char, unsigned long, unsigned long)+0x70>)
   131c4:	f001 ff1c 	bl	15000 <__cyg_profile_func_enter>
  constexpr UnsignedT kFieldOfOnes = GenerateFieldOfOnes<T>();
   131c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   131cc:	9307      	str	r3, [sp, #28]
  constexpr size_t kTargetWidth     = sizeof(T) * 8;
   131ce:	2320      	movs	r3, #32
   131d0:	9306      	str	r3, [sp, #24]
  UnsignedT mask   = kFieldOfOnes >> (kTargetWidth - width);
   131d2:	9b00      	ldr	r3, [sp, #0]
   131d4:	f1c3 0320 	rsb	r3, r3, #32
   131d8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   131dc:	fa22 f303 	lsr.w	r3, r2, r3
   131e0:	9305      	str	r3, [sp, #20]
  target &= ~(mask << position);
   131e2:	9a05      	ldr	r2, [sp, #20]
   131e4:	9b01      	ldr	r3, [sp, #4]
   131e6:	fa02 f303 	lsl.w	r3, r2, r3
   131ea:	43db      	mvns	r3, r3
   131ec:	9a03      	ldr	r2, [sp, #12]
   131ee:	4013      	ands	r3, r2
   131f0:	9303      	str	r3, [sp, #12]
  target |= (value & mask) << position;
   131f2:	f89d 200b 	ldrb.w	r2, [sp, #11]
   131f6:	9b05      	ldr	r3, [sp, #20]
   131f8:	401a      	ands	r2, r3
   131fa:	9b01      	ldr	r3, [sp, #4]
   131fc:	fa02 f303 	lsl.w	r3, r2, r3
   13200:	9a03      	ldr	r2, [sp, #12]
   13202:	4313      	orrs	r3, r2
   13204:	9303      	str	r3, [sp, #12]
  return target;
   13206:	9c03      	ldr	r4, [sp, #12]
   13208:	462b      	mov	r3, r5
   1320a:	4619      	mov	r1, r3
   1320c:	4803      	ldr	r0, [pc, #12]	; (1321c <unsigned long bit::Insert<unsigned long, unsigned char>(unsigned long, unsigned char, unsigned long, unsigned long)+0x70>)
   1320e:	f001 ff0b 	bl	15028 <__cyg_profile_func_exit>
   13212:	4623      	mov	r3, r4
}
   13214:	4618      	mov	r0, r3
   13216:	b009      	add	sp, #36	; 0x24
   13218:	bd30      	pop	{r4, r5, pc}
   1321a:	bf00      	nop
   1321c:	000131ad 	.word	0x000131ad

00013220 <unsigned long bit::Extract<unsigned long>(unsigned long, unsigned long, unsigned long)>:
constexpr T Extract(T target, uint32_t position, uint32_t width = 1)
   13220:	b530      	push	{r4, r5, lr}
   13222:	b089      	sub	sp, #36	; 0x24
   13224:	4675      	mov	r5, lr
   13226:	9003      	str	r0, [sp, #12]
   13228:	9102      	str	r1, [sp, #8]
   1322a:	9201      	str	r2, [sp, #4]
   1322c:	462b      	mov	r3, r5
   1322e:	4619      	mov	r1, r3
   13230:	480f      	ldr	r0, [pc, #60]	; (13270 <unsigned long bit::Extract<unsigned long>(unsigned long, unsigned long, unsigned long)+0x50>)
   13232:	f001 fee5 	bl	15000 <__cyg_profile_func_enter>
  constexpr UnsignedT kFieldOfOnes = GenerateFieldOfOnes<T>();
   13236:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1323a:	9307      	str	r3, [sp, #28]
  constexpr size_t kTargetWidth     = sizeof(T) * 8;
   1323c:	2320      	movs	r3, #32
   1323e:	9306      	str	r3, [sp, #24]
  UnsignedT mask   = kFieldOfOnes >> (kTargetWidth - width);
   13240:	9b01      	ldr	r3, [sp, #4]
   13242:	f1c3 0320 	rsb	r3, r3, #32
   13246:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1324a:	fa22 f303 	lsr.w	r3, r2, r3
   1324e:	9305      	str	r3, [sp, #20]
  return (target >> position) & mask;
   13250:	9a03      	ldr	r2, [sp, #12]
   13252:	9b02      	ldr	r3, [sp, #8]
   13254:	40da      	lsrs	r2, r3
   13256:	9b05      	ldr	r3, [sp, #20]
   13258:	ea02 0403 	and.w	r4, r2, r3
   1325c:	462b      	mov	r3, r5
   1325e:	4619      	mov	r1, r3
   13260:	4803      	ldr	r0, [pc, #12]	; (13270 <unsigned long bit::Extract<unsigned long>(unsigned long, unsigned long, unsigned long)+0x50>)
   13262:	f001 fee1 	bl	15028 <__cyg_profile_func_exit>
   13266:	4623      	mov	r3, r4
}
   13268:	4618      	mov	r0, r3
   1326a:	b009      	add	sp, #36	; 0x24
   1326c:	bd30      	pop	{r4, r5, pc}
   1326e:	bf00      	nop
   13270:	00013221 	.word	0x00013221

00013274 <unsigned long bit::Insert<unsigned long, bool>(unsigned long, bool, unsigned long, unsigned long)>:
constexpr T Insert(T target, U value, uint32_t position, uint32_t width = 1)
   13274:	b530      	push	{r4, r5, lr}
   13276:	b089      	sub	sp, #36	; 0x24
   13278:	4675      	mov	r5, lr
   1327a:	9003      	str	r0, [sp, #12]
   1327c:	9201      	str	r2, [sp, #4]
   1327e:	9300      	str	r3, [sp, #0]
   13280:	460b      	mov	r3, r1
   13282:	f88d 300b 	strb.w	r3, [sp, #11]
   13286:	462b      	mov	r3, r5
   13288:	4619      	mov	r1, r3
   1328a:	4816      	ldr	r0, [pc, #88]	; (132e4 <unsigned long bit::Insert<unsigned long, bool>(unsigned long, bool, unsigned long, unsigned long)+0x70>)
   1328c:	f001 feb8 	bl	15000 <__cyg_profile_func_enter>
  constexpr UnsignedT kFieldOfOnes = GenerateFieldOfOnes<T>();
   13290:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   13294:	9307      	str	r3, [sp, #28]
  constexpr size_t kTargetWidth     = sizeof(T) * 8;
   13296:	2320      	movs	r3, #32
   13298:	9306      	str	r3, [sp, #24]
  UnsignedT mask   = kFieldOfOnes >> (kTargetWidth - width);
   1329a:	9b00      	ldr	r3, [sp, #0]
   1329c:	f1c3 0320 	rsb	r3, r3, #32
   132a0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   132a4:	fa22 f303 	lsr.w	r3, r2, r3
   132a8:	9305      	str	r3, [sp, #20]
  target &= ~(mask << position);
   132aa:	9a05      	ldr	r2, [sp, #20]
   132ac:	9b01      	ldr	r3, [sp, #4]
   132ae:	fa02 f303 	lsl.w	r3, r2, r3
   132b2:	43db      	mvns	r3, r3
   132b4:	9a03      	ldr	r2, [sp, #12]
   132b6:	4013      	ands	r3, r2
   132b8:	9303      	str	r3, [sp, #12]
  target |= (value & mask) << position;
   132ba:	f89d 200b 	ldrb.w	r2, [sp, #11]
   132be:	9b05      	ldr	r3, [sp, #20]
   132c0:	401a      	ands	r2, r3
   132c2:	9b01      	ldr	r3, [sp, #4]
   132c4:	fa02 f303 	lsl.w	r3, r2, r3
   132c8:	9a03      	ldr	r2, [sp, #12]
   132ca:	4313      	orrs	r3, r2
   132cc:	9303      	str	r3, [sp, #12]
  return target;
   132ce:	9c03      	ldr	r4, [sp, #12]
   132d0:	462b      	mov	r3, r5
   132d2:	4619      	mov	r1, r3
   132d4:	4803      	ldr	r0, [pc, #12]	; (132e4 <unsigned long bit::Insert<unsigned long, bool>(unsigned long, bool, unsigned long, unsigned long)+0x70>)
   132d6:	f001 fea7 	bl	15028 <__cyg_profile_func_exit>
   132da:	4623      	mov	r3, r4
}
   132dc:	4618      	mov	r0, r3
   132de:	b009      	add	sp, #36	; 0x24
   132e0:	bd30      	pop	{r4, r5, pc}
   132e2:	bf00      	nop
   132e4:	00013275 	.word	0x00013275

000132e8 <Graphics::Initialize()>:
  void Initialize()
   132e8:	b510      	push	{r4, lr}
   132ea:	b082      	sub	sp, #8
   132ec:	4674      	mov	r4, lr
   132ee:	9001      	str	r0, [sp, #4]
   132f0:	4623      	mov	r3, r4
   132f2:	4619      	mov	r1, r3
   132f4:	480e      	ldr	r0, [pc, #56]	; (13330 <Graphics::Initialize()+0x48>)
   132f6:	f001 fe83 	bl	15000 <__cyg_profile_func_enter>
    display_->Initialize();
   132fa:	9b01      	ldr	r3, [sp, #4]
   132fc:	681a      	ldr	r2, [r3, #0]
   132fe:	9b01      	ldr	r3, [sp, #4]
   13300:	681b      	ldr	r3, [r3, #0]
   13302:	681b      	ldr	r3, [r3, #0]
   13304:	330c      	adds	r3, #12
   13306:	681b      	ldr	r3, [r3, #0]
   13308:	4610      	mov	r0, r2
   1330a:	4798      	blx	r3
    display_->Enable();
   1330c:	9b01      	ldr	r3, [sp, #4]
   1330e:	681a      	ldr	r2, [r3, #0]
   13310:	9b01      	ldr	r3, [sp, #4]
   13312:	681b      	ldr	r3, [r3, #0]
   13314:	681b      	ldr	r3, [r3, #0]
   13316:	3310      	adds	r3, #16
   13318:	681b      	ldr	r3, [r3, #0]
   1331a:	4610      	mov	r0, r2
   1331c:	4798      	blx	r3
   1331e:	4623      	mov	r3, r4
   13320:	4619      	mov	r1, r3
   13322:	4803      	ldr	r0, [pc, #12]	; (13330 <Graphics::Initialize()+0x48>)
   13324:	f001 fe80 	bl	15028 <__cyg_profile_func_exit>
  }
   13328:	bf00      	nop
   1332a:	b002      	add	sp, #8
   1332c:	bd10      	pop	{r4, pc}
   1332e:	bf00      	nop
   13330:	000132e9 	.word	0x000132e9

00013334 <Graphics::Clear()>:
  void Clear()
   13334:	b510      	push	{r4, lr}
   13336:	b082      	sub	sp, #8
   13338:	4674      	mov	r4, lr
   1333a:	9001      	str	r0, [sp, #4]
   1333c:	4623      	mov	r3, r4
   1333e:	4619      	mov	r1, r3
   13340:	4809      	ldr	r0, [pc, #36]	; (13368 <Graphics::Clear()+0x34>)
   13342:	f001 fe5d 	bl	15000 <__cyg_profile_func_enter>
  {
    display_->Clear();
   13346:	9b01      	ldr	r3, [sp, #4]
   13348:	681a      	ldr	r2, [r3, #0]
   1334a:	9b01      	ldr	r3, [sp, #4]
   1334c:	681b      	ldr	r3, [r3, #0]
   1334e:	681b      	ldr	r3, [r3, #0]
   13350:	3318      	adds	r3, #24
   13352:	681b      	ldr	r3, [r3, #0]
   13354:	4610      	mov	r0, r2
   13356:	4798      	blx	r3
   13358:	4623      	mov	r3, r4
   1335a:	4619      	mov	r1, r3
   1335c:	4802      	ldr	r0, [pc, #8]	; (13368 <Graphics::Clear()+0x34>)
   1335e:	f001 fe63 	bl	15028 <__cyg_profile_func_exit>
  }
   13362:	bf00      	nop
   13364:	b002      	add	sp, #8
   13366:	bd10      	pop	{r4, pc}
   13368:	00013335 	.word	0x00013335

0001336c <OledTerminal::Initialize()>:
  void Initialize()
   1336c:	b510      	push	{r4, lr}
   1336e:	b082      	sub	sp, #8
   13370:	4674      	mov	r4, lr
   13372:	9001      	str	r0, [sp, #4]
   13374:	4623      	mov	r3, r4
   13376:	4619      	mov	r1, r3
   13378:	480e      	ldr	r0, [pc, #56]	; (133b4 <OledTerminal::Initialize()+0x48>)
   1337a:	f001 fe41 	bl	15000 <__cyg_profile_func_enter>
    graphics_.Initialize();
   1337e:	9b01      	ldr	r3, [sp, #4]
   13380:	f203 732c 	addw	r3, r3, #1836	; 0x72c
   13384:	4618      	mov	r0, r3
   13386:	f7ff ffaf 	bl	132e8 <Graphics::Initialize()>
    graphics_.Clear();
   1338a:	9b01      	ldr	r3, [sp, #4]
   1338c:	f203 732c 	addw	r3, r3, #1836	; 0x72c
   13390:	4618      	mov	r0, r3
   13392:	f7ff ffcf 	bl	13334 <Graphics::Clear()>
    graphics_.Update();
   13396:	9b01      	ldr	r3, [sp, #4]
   13398:	f203 732c 	addw	r3, r3, #1836	; 0x72c
   1339c:	4618      	mov	r0, r3
   1339e:	f7ff fd51 	bl	12e44 <Graphics::Update()>
   133a2:	4623      	mov	r3, r4
   133a4:	4619      	mov	r1, r3
   133a6:	4803      	ldr	r0, [pc, #12]	; (133b4 <OledTerminal::Initialize()+0x48>)
   133a8:	f001 fe3e 	bl	15028 <__cyg_profile_func_exit>
  }
   133ac:	bf00      	nop
   133ae:	b002      	add	sp, #8
   133b0:	bd10      	pop	{r4, pc}
   133b2:	bf00      	nop
   133b4:	0001336d 	.word	0x0001336d

000133b8 <main>:
void InitializeUart2();
void Uart2Send(char num);
void Uart_queue();
void vSendOverUartTask(void * pvParamater);
int main() 
{   char hold = '+';
   133b8:	b530      	push	{r4, r5, lr}
   133ba:	b083      	sub	sp, #12
   133bc:	4675      	mov	r5, lr
   133be:	462b      	mov	r3, r5
   133c0:	4619      	mov	r1, r3
   133c2:	480e      	ldr	r0, [pc, #56]	; (133fc <main+0x44>)
   133c4:	f001 fe1c 	bl	15000 <__cyg_profile_func_enter>
   133c8:	232b      	movs	r3, #43	; 0x2b
   133ca:	f88d 3007 	strb.w	r3, [sp, #7]
 /* LOG_INFO("Start\n");
  q= xQueueCreate(10,sizeof(int));
  Global_Queue_Handle = xQueueCreate(10,sizeof(10));
  xTaskCreate(vReceiveByteOverUartTask,(const char*) "receive", 1024, NULL, 1 , NULL);
  xTaskCreate(vSendOverUartTask,(const char*) "send", 1024, NULL, 1 , NULL);*/
  oled_terminal.Initialize();
   133ce:	480c      	ldr	r0, [pc, #48]	; (13400 <main+0x48>)
   133d0:	f7ff ffcc 	bl	1336c <OledTerminal::Initialize()>
  InitializeUart2();
   133d4:	f000 f816 	bl	13404 <InitializeUart2()>
  //vTaskStartScheduler();
  Uart2Send(hold);
   133d8:	f89d 3007 	ldrb.w	r3, [sp, #7]
   133dc:	4618      	mov	r0, r3
   133de:	f000 f889 	bl	134f4 <Uart2Send(char)>
  Uart2Receive();
   133e2:	f000 f8d3 	bl	1358c <Uart2Receive()>
}
   133e6:	2400      	movs	r4, #0
   133e8:	462b      	mov	r3, r5
   133ea:	4619      	mov	r1, r3
   133ec:	4803      	ldr	r0, [pc, #12]	; (133fc <main+0x44>)
   133ee:	f001 fe1b 	bl	15028 <__cyg_profile_func_exit>
   133f2:	4623      	mov	r3, r4
   133f4:	4618      	mov	r0, r3
   133f6:	b003      	add	sp, #12
   133f8:	bd30      	pop	{r4, r5, pc}
   133fa:	bf00      	nop
   133fc:	000133b9 	.word	0x000133b9
   13400:	10000a6c 	.word	0x10000a6c

00013404 <InitializeUart2()>:
void InitializeUart2()
{   //Power On
   13404:	b510      	push	{r4, lr}
   13406:	4674      	mov	r4, lr
   13408:	4623      	mov	r3, r4
   1340a:	4619      	mov	r1, r3
   1340c:	4835      	ldr	r0, [pc, #212]	; (134e4 <InitializeUart2()+0xe0>)
   1340e:	f001 fdf7 	bl	15000 <__cyg_profile_func_enter>
    LPC_SC->PCONP |= (1<<24); 
   13412:	4b35      	ldr	r3, [pc, #212]	; (134e8 <InitializeUart2()+0xe4>)
   13414:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
   13418:	4a33      	ldr	r2, [pc, #204]	; (134e8 <InitializeUart2()+0xe4>)
   1341a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
   1341e:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
    LPC_UART2->LCR |= (1<<7);
   13422:	4b32      	ldr	r3, [pc, #200]	; (134ec <InitializeUart2()+0xe8>)
   13424:	7b1b      	ldrb	r3, [r3, #12]
   13426:	b2db      	uxtb	r3, r3
   13428:	4a30      	ldr	r2, [pc, #192]	; (134ec <InitializeUart2()+0xe8>)
   1342a:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1342e:	b2db      	uxtb	r3, r3
   13430:	7313      	strb	r3, [r2, #12]
    //Enable FIFO
    LPC_UART2->FCR |= (1<<0);
   13432:	4b2e      	ldr	r3, [pc, #184]	; (134ec <InitializeUart2()+0xe8>)
   13434:	7a1b      	ldrb	r3, [r3, #8]
   13436:	b2db      	uxtb	r3, r3
   13438:	4a2c      	ldr	r2, [pc, #176]	; (134ec <InitializeUart2()+0xe8>)
   1343a:	f043 0301 	orr.w	r3, r3, #1
   1343e:	b2db      	uxtb	r3, r3
   13440:	7213      	strb	r3, [r2, #8]
    //SetBaud Rate
    LPC_UART2->DLL |= 0x38;
   13442:	4b2a      	ldr	r3, [pc, #168]	; (134ec <InitializeUart2()+0xe8>)
   13444:	781b      	ldrb	r3, [r3, #0]
   13446:	b2db      	uxtb	r3, r3
   13448:	4a28      	ldr	r2, [pc, #160]	; (134ec <InitializeUart2()+0xe8>)
   1344a:	f043 0338 	orr.w	r3, r3, #56	; 0x38
   1344e:	b2db      	uxtb	r3, r3
   13450:	7013      	strb	r3, [r2, #0]
    LPC_UART2->DLM |= 0x1;
   13452:	4b26      	ldr	r3, [pc, #152]	; (134ec <InitializeUart2()+0xe8>)
   13454:	791b      	ldrb	r3, [r3, #4]
   13456:	b2db      	uxtb	r3, r3
   13458:	4a24      	ldr	r2, [pc, #144]	; (134ec <InitializeUart2()+0xe8>)
   1345a:	f043 0301 	orr.w	r3, r3, #1
   1345e:	b2db      	uxtb	r3, r3
   13460:	7113      	strb	r3, [r2, #4]
    //Set Pins
    pc.uart2_txd(2,8);
   13462:	2208      	movs	r2, #8
   13464:	2102      	movs	r1, #2
   13466:	4822      	ldr	r0, [pc, #136]	; (134f0 <InitializeUart2()+0xec>)
   13468:	f000 f91c 	bl	136a4 <pinconn::uart2_txd(unsigned char, unsigned char)>
    pc.uart2_rxd(2,9);
   1346c:	2209      	movs	r2, #9
   1346e:	2102      	movs	r1, #2
   13470:	481f      	ldr	r0, [pc, #124]	; (134f0 <InitializeUart2()+0xec>)
   13472:	f000 f977 	bl	13764 <pinconn::uart2_rxd(unsigned char, unsigned char)>
    LPC_UART2->LCR &= ~(0b11 <<2);
   13476:	4b1d      	ldr	r3, [pc, #116]	; (134ec <InitializeUart2()+0xe8>)
   13478:	7b1b      	ldrb	r3, [r3, #12]
   1347a:	b2db      	uxtb	r3, r3
   1347c:	4a1b      	ldr	r2, [pc, #108]	; (134ec <InitializeUart2()+0xe8>)
   1347e:	f023 030c 	bic.w	r3, r3, #12
   13482:	b2db      	uxtb	r3, r3
   13484:	7313      	strb	r3, [r2, #12]
    LPC_UART2->LCR |= (0b11<<0);
   13486:	4b19      	ldr	r3, [pc, #100]	; (134ec <InitializeUart2()+0xe8>)
   13488:	7b1b      	ldrb	r3, [r3, #12]
   1348a:	b2db      	uxtb	r3, r3
   1348c:	4a17      	ldr	r2, [pc, #92]	; (134ec <InitializeUart2()+0xe8>)
   1348e:	f043 0303 	orr.w	r3, r3, #3
   13492:	b2db      	uxtb	r3, r3
   13494:	7313      	strb	r3, [r2, #12]
    // Disable for interrupt
    LPC_UART2->LCR &= ~(1<<7);
   13496:	4b15      	ldr	r3, [pc, #84]	; (134ec <InitializeUart2()+0xe8>)
   13498:	7b1b      	ldrb	r3, [r3, #12]
   1349a:	b2db      	uxtb	r3, r3
   1349c:	4a13      	ldr	r2, [pc, #76]	; (134ec <InitializeUart2()+0xe8>)
   1349e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   134a2:	b2db      	uxtb	r3, r3
   134a4:	7313      	strb	r3, [r2, #12]
    //Reset FIFOs
    LPC_UART2->FCR |= (0b11 << 1);
   134a6:	4b11      	ldr	r3, [pc, #68]	; (134ec <InitializeUart2()+0xe8>)
   134a8:	7a1b      	ldrb	r3, [r3, #8]
   134aa:	b2db      	uxtb	r3, r3
   134ac:	4a0f      	ldr	r2, [pc, #60]	; (134ec <InitializeUart2()+0xe8>)
   134ae:	f043 0306 	orr.w	r3, r3, #6
   134b2:	b2db      	uxtb	r3, r3
   134b4:	7213      	strb	r3, [r2, #8]
    //Set TER
    LPC_UART2->TER |= (0b1<<7);
   134b6:	4b0d      	ldr	r3, [pc, #52]	; (134ec <InitializeUart2()+0xe8>)
   134b8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
   134bc:	b2db      	uxtb	r3, r3
   134be:	4a0b      	ldr	r2, [pc, #44]	; (134ec <InitializeUart2()+0xe8>)
   134c0:	f063 037f 	orn	r3, r3, #127	; 0x7f
   134c4:	b2db      	uxtb	r3, r3
   134c6:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
    //Set Receive Data
    LPC_UART2->IER |= (1 << 0);
   134ca:	4b08      	ldr	r3, [pc, #32]	; (134ec <InitializeUart2()+0xe8>)
   134cc:	685b      	ldr	r3, [r3, #4]
   134ce:	4a07      	ldr	r2, [pc, #28]	; (134ec <InitializeUart2()+0xe8>)
   134d0:	f043 0301 	orr.w	r3, r3, #1
   134d4:	6053      	str	r3, [r2, #4]
   134d6:	4623      	mov	r3, r4
   134d8:	4619      	mov	r1, r3
   134da:	4802      	ldr	r0, [pc, #8]	; (134e4 <InitializeUart2()+0xe0>)
   134dc:	f001 fda4 	bl	15028 <__cyg_profile_func_exit>
  // Init PINSEL, baud rate, frame size, etc. 
    //NVIC_EnableIRQ(UART2_IRQn);
    //RegisterIsr(UART2_IRQn, Uart2Interrupt);

}
   134e0:	bf00      	nop
   134e2:	bd10      	pop	{r4, pc}
   134e4:	00013405 	.word	0x00013405
   134e8:	400fc000 	.word	0x400fc000
   134ec:	40098000 	.word	0x40098000
   134f0:	10000a68 	.word	0x10000a68

000134f4 <Uart2Send(char)>:

void Uart2Send(char num)
{   
   134f4:	b510      	push	{r4, lr}
   134f6:	b084      	sub	sp, #16
   134f8:	4674      	mov	r4, lr
   134fa:	4603      	mov	r3, r0
   134fc:	f88d 3007 	strb.w	r3, [sp, #7]
   13500:	4623      	mov	r3, r4
   13502:	4619      	mov	r1, r3
   13504:	481d      	ldr	r0, [pc, #116]	; (1357c <Uart2Send(char)+0x88>)
   13506:	f001 fd7b 	bl	15000 <__cyg_profile_func_enter>
    
    while(!(LPC_UART2->LSR & (1 << 5) ) );
   1350a:	4b1d      	ldr	r3, [pc, #116]	; (13580 <Uart2Send(char)+0x8c>)
   1350c:	7d1b      	ldrb	r3, [r3, #20]
   1350e:	b2db      	uxtb	r3, r3
   13510:	f003 0320 	and.w	r3, r3, #32
   13514:	2b00      	cmp	r3, #0
   13516:	bf0c      	ite	eq
   13518:	2301      	moveq	r3, #1
   1351a:	2300      	movne	r3, #0
   1351c:	b2db      	uxtb	r3, r3
   1351e:	2b00      	cmp	r3, #0
   13520:	d000      	beq.n	13524 <Uart2Send(char)+0x30>
   13522:	e7f2      	b.n	1350a <Uart2Send(char)+0x16>
        char char_val = 0;
   13524:	2300      	movs	r3, #0
   13526:	f88d 300f 	strb.w	r3, [sp, #15]
        char char_val2 = 0;
   1352a:	2300      	movs	r3, #0
   1352c:	f88d 300e 	strb.w	r3, [sp, #14]
        char_val2 = num;
   13530:	f89d 3007 	ldrb.w	r3, [sp, #7]
   13534:	f88d 300e 	strb.w	r3, [sp, #14]
        char_val = num + '0';
   13538:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1353c:	3330      	adds	r3, #48	; 0x30
   1353e:	f88d 300f 	strb.w	r3, [sp, #15]
        if(char_val >= '0' && char_val <= '9') 
   13542:	f89d 300f 	ldrb.w	r3, [sp, #15]
   13546:	2b2f      	cmp	r3, #47	; 0x2f
   13548:	d908      	bls.n	1355c <Uart2Send(char)+0x68>
   1354a:	f89d 300f 	ldrb.w	r3, [sp, #15]
   1354e:	2b39      	cmp	r3, #57	; 0x39
   13550:	d804      	bhi.n	1355c <Uart2Send(char)+0x68>
        LPC_UART2->THR = char_val;
   13552:	4a0b      	ldr	r2, [pc, #44]	; (13580 <Uart2Send(char)+0x8c>)
   13554:	f89d 300f 	ldrb.w	r3, [sp, #15]
   13558:	7013      	strb	r3, [r2, #0]
   1355a:	e003      	b.n	13564 <Uart2Send(char)+0x70>
        else 
        LPC_UART2->THR = char_val2;
   1355c:	4a08      	ldr	r2, [pc, #32]	; (13580 <Uart2Send(char)+0x8c>)
   1355e:	f89d 300e 	ldrb.w	r3, [sp, #14]
   13562:	7013      	strb	r3, [r2, #0]
       // char temp =  char_val;
       
        oled_terminal.printf("Letter sent\n");
   13564:	4907      	ldr	r1, [pc, #28]	; (13584 <Uart2Send(char)+0x90>)
   13566:	4808      	ldr	r0, [pc, #32]	; (13588 <Uart2Send(char)+0x94>)
   13568:	f7ff fc88 	bl	12e7c <OledTerminal::printf(char const*, ...)>
   1356c:	4623      	mov	r3, r4
   1356e:	4619      	mov	r1, r3
   13570:	4802      	ldr	r0, [pc, #8]	; (1357c <Uart2Send(char)+0x88>)
   13572:	f001 fd59 	bl	15028 <__cyg_profile_func_exit>
   
}
   13576:	bf00      	nop
   13578:	b004      	add	sp, #16
   1357a:	bd10      	pop	{r4, pc}
   1357c:	000134f5 	.word	0x000134f5
   13580:	40098000 	.word	0x40098000
   13584:	00019068 	.word	0x00019068
   13588:	10000a6c 	.word	0x10000a6c

0001358c <Uart2Receive()>:



void Uart2Receive()
{   
   1358c:	b510      	push	{r4, lr}
   1358e:	b082      	sub	sp, #8
   13590:	4674      	mov	r4, lr
   13592:	4623      	mov	r3, r4
   13594:	4619      	mov	r1, r3
   13596:	480b      	ldr	r0, [pc, #44]	; (135c4 <Uart2Receive()+0x38>)
   13598:	f001 fd32 	bl	15000 <__cyg_profile_func_enter>
    //bool RBR = LPC_UART2->LSR & (1<<0); 
    //oled_terminal.printf("RBR: %d\n", RBR);
    char array[1];
    array[0]= LPC_UART2->RBR;
   1359c:	4b0a      	ldr	r3, [pc, #40]	; (135c8 <Uart2Receive()+0x3c>)
   1359e:	781b      	ldrb	r3, [r3, #0]
   135a0:	b2db      	uxtb	r3, r3
   135a2:	f88d 3004 	strb.w	r3, [sp, #4]
    oled_terminal.printf("Data: %c\n",array[0]);
   135a6:	f89d 3004 	ldrb.w	r3, [sp, #4]
   135aa:	461a      	mov	r2, r3
   135ac:	4907      	ldr	r1, [pc, #28]	; (135cc <Uart2Receive()+0x40>)
   135ae:	4808      	ldr	r0, [pc, #32]	; (135d0 <Uart2Receive()+0x44>)
   135b0:	f7ff fc64 	bl	12e7c <OledTerminal::printf(char const*, ...)>
   135b4:	4623      	mov	r3, r4
   135b6:	4619      	mov	r1, r3
   135b8:	4802      	ldr	r0, [pc, #8]	; (135c4 <Uart2Receive()+0x38>)
   135ba:	f001 fd35 	bl	15028 <__cyg_profile_func_exit>
   
   //RBR = LPC_UART2->LSR & (1<<0);
    //oled_terminal.printf("RBR: %d\n", RBR);
}
   135be:	bf00      	nop
   135c0:	b002      	add	sp, #8
   135c2:	bd10      	pop	{r4, pc}
   135c4:	0001358d 	.word	0x0001358d
   135c8:	40098000 	.word	0x40098000
   135cc:	00019078 	.word	0x00019078
   135d0:	10000a6c 	.word	0x10000a6c

000135d4 <__static_initialization_and_destruction_0(int, int)>:
    if (xQueueReceive(Global_Queue_Handle,&x, portMAX_DELAY)) 
    {
      Uart2Receive();
    }
  }
   135d4:	b510      	push	{r4, lr}
   135d6:	b082      	sub	sp, #8
   135d8:	4674      	mov	r4, lr
   135da:	9001      	str	r0, [sp, #4]
   135dc:	9100      	str	r1, [sp, #0]
   135de:	4623      	mov	r3, r4
   135e0:	4619      	mov	r1, r3
   135e2:	480b      	ldr	r0, [pc, #44]	; (13610 <__static_initialization_and_destruction_0(int, int)+0x3c>)
   135e4:	f001 fd0c 	bl	15000 <__cyg_profile_func_enter>
   135e8:	9b01      	ldr	r3, [sp, #4]
   135ea:	2b01      	cmp	r3, #1
   135ec:	d107      	bne.n	135fe <__static_initialization_and_destruction_0(int, int)+0x2a>
   135ee:	9b00      	ldr	r3, [sp, #0]
   135f0:	f64f 72ff 	movw	r2, #65535	; 0xffff
   135f4:	4293      	cmp	r3, r2
   135f6:	d102      	bne.n	135fe <__static_initialization_and_destruction_0(int, int)+0x2a>
OledTerminal oled_terminal;
   135f8:	4806      	ldr	r0, [pc, #24]	; (13614 <__static_initialization_and_destruction_0(int, int)+0x40>)
   135fa:	f7ff fd61 	bl	130c0 <OledTerminal::OledTerminal()>
   135fe:	4623      	mov	r3, r4
   13600:	4619      	mov	r1, r3
   13602:	4803      	ldr	r0, [pc, #12]	; (13610 <__static_initialization_and_destruction_0(int, int)+0x3c>)
   13604:	f001 fd10 	bl	15028 <__cyg_profile_func_exit>
   13608:	bf00      	nop
   1360a:	b002      	add	sp, #8
   1360c:	bd10      	pop	{r4, pc}
   1360e:	bf00      	nop
   13610:	000135d5 	.word	0x000135d5
   13614:	10000a6c 	.word	0x10000a6c

00013618 <_GLOBAL__sub_I_q>:
   13618:	b510      	push	{r4, lr}
   1361a:	4674      	mov	r4, lr
   1361c:	4623      	mov	r3, r4
   1361e:	4619      	mov	r1, r3
   13620:	4806      	ldr	r0, [pc, #24]	; (1363c <_GLOBAL__sub_I_q+0x24>)
   13622:	f001 fced 	bl	15000 <__cyg_profile_func_enter>
   13626:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1362a:	2001      	movs	r0, #1
   1362c:	f7ff ffd2 	bl	135d4 <__static_initialization_and_destruction_0(int, int)>
   13630:	4623      	mov	r3, r4
   13632:	4619      	mov	r1, r3
   13634:	4801      	ldr	r0, [pc, #4]	; (1363c <_GLOBAL__sub_I_q+0x24>)
   13636:	f001 fcf7 	bl	15028 <__cyg_profile_func_exit>
   1363a:	bd10      	pop	{r4, pc}
   1363c:	00013619 	.word	0x00013619

00013640 <pinconn::clear7(unsigned char, unsigned char)>:
    else
    {
        printf("Not a MOSI port");
    }
}
void pinconn::clear7(uint8_t port, uint8_t pin){
   13640:	b510      	push	{r4, lr}
   13642:	b082      	sub	sp, #8
   13644:	4674      	mov	r4, lr
   13646:	9001      	str	r0, [sp, #4]
   13648:	460b      	mov	r3, r1
   1364a:	f88d 3003 	strb.w	r3, [sp, #3]
   1364e:	4613      	mov	r3, r2
   13650:	f88d 3002 	strb.w	r3, [sp, #2]
   13654:	4623      	mov	r3, r4
   13656:	4619      	mov	r1, r3
   13658:	4810      	ldr	r0, [pc, #64]	; (1369c <pinconn::clear7(unsigned char, unsigned char)+0x5c>)
   1365a:	f001 fcd1 	bl	15000 <__cyg_profile_func_enter>
    *pincon[port][pin] &= ~(0x7F<<0);
   1365e:	f89d 2003 	ldrb.w	r2, [sp, #3]
   13662:	f89d 3002 	ldrb.w	r3, [sp, #2]
   13666:	490e      	ldr	r1, [pc, #56]	; (136a0 <pinconn::clear7(unsigned char, unsigned char)+0x60>)
   13668:	0152      	lsls	r2, r2, #5
   1366a:	4413      	add	r3, r2
   1366c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   13670:	681a      	ldr	r2, [r3, #0]
   13672:	f89d 1003 	ldrb.w	r1, [sp, #3]
   13676:	f89d 3002 	ldrb.w	r3, [sp, #2]
   1367a:	4809      	ldr	r0, [pc, #36]	; (136a0 <pinconn::clear7(unsigned char, unsigned char)+0x60>)
   1367c:	0149      	lsls	r1, r1, #5
   1367e:	440b      	add	r3, r1
   13680:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
   13684:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   13688:	601a      	str	r2, [r3, #0]
   1368a:	4623      	mov	r3, r4
   1368c:	4619      	mov	r1, r3
   1368e:	4803      	ldr	r0, [pc, #12]	; (1369c <pinconn::clear7(unsigned char, unsigned char)+0x5c>)
   13690:	f001 fcca 	bl	15028 <__cyg_profile_func_exit>
}
   13694:	bf00      	nop
   13696:	b002      	add	sp, #8
   13698:	bd10      	pop	{r4, pc}
   1369a:	bf00      	nop
   1369c:	00013641 	.word	0x00013641
   136a0:	1000045c 	.word	0x1000045c

000136a4 <pinconn::uart2_txd(unsigned char, unsigned char)>:
void pinconn::uart2_txd(uint8_t port, uint8_t pin){ 
   136a4:	b510      	push	{r4, lr}
   136a6:	b082      	sub	sp, #8
   136a8:	4674      	mov	r4, lr
   136aa:	9001      	str	r0, [sp, #4]
   136ac:	460b      	mov	r3, r1
   136ae:	f88d 3003 	strb.w	r3, [sp, #3]
   136b2:	4613      	mov	r3, r2
   136b4:	f88d 3002 	strb.w	r3, [sp, #2]
   136b8:	4623      	mov	r3, r4
   136ba:	4619      	mov	r1, r3
   136bc:	4827      	ldr	r0, [pc, #156]	; (1375c <pinconn::uart2_txd(unsigned char, unsigned char)+0xb8>)
   136be:	f001 fc9f 	bl	15000 <__cyg_profile_func_enter>
    clear7(port,pin);
   136c2:	f89d 2002 	ldrb.w	r2, [sp, #2]
   136c6:	f89d 3003 	ldrb.w	r3, [sp, #3]
   136ca:	4619      	mov	r1, r3
   136cc:	9801      	ldr	r0, [sp, #4]
   136ce:	f7ff ffb7 	bl	13640 <pinconn::clear7(unsigned char, unsigned char)>
    if(((port == 0) && (pin==10))){
   136d2:	f89d 3003 	ldrb.w	r3, [sp, #3]
   136d6:	2b00      	cmp	r3, #0
   136d8:	d11a      	bne.n	13710 <pinconn::uart2_txd(unsigned char, unsigned char)+0x6c>
   136da:	f89d 3002 	ldrb.w	r3, [sp, #2]
   136de:	2b0a      	cmp	r3, #10
   136e0:	d116      	bne.n	13710 <pinconn::uart2_txd(unsigned char, unsigned char)+0x6c>
        *pincon[port][pin] |= (1<<1);
   136e2:	f89d 2003 	ldrb.w	r2, [sp, #3]
   136e6:	f89d 3002 	ldrb.w	r3, [sp, #2]
   136ea:	491d      	ldr	r1, [pc, #116]	; (13760 <pinconn::uart2_txd(unsigned char, unsigned char)+0xbc>)
   136ec:	0152      	lsls	r2, r2, #5
   136ee:	4413      	add	r3, r2
   136f0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   136f4:	681a      	ldr	r2, [r3, #0]
   136f6:	f89d 1003 	ldrb.w	r1, [sp, #3]
   136fa:	f89d 3002 	ldrb.w	r3, [sp, #2]
   136fe:	4818      	ldr	r0, [pc, #96]	; (13760 <pinconn::uart2_txd(unsigned char, unsigned char)+0xbc>)
   13700:	0149      	lsls	r1, r1, #5
   13702:	440b      	add	r3, r1
   13704:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
   13708:	f042 0202 	orr.w	r2, r2, #2
   1370c:	601a      	str	r2, [r3, #0]
   1370e:	e01d      	b.n	1374c <pinconn::uart2_txd(unsigned char, unsigned char)+0xa8>
    }
    else if ((port == 2) && (pin==8))
   13710:	f89d 3003 	ldrb.w	r3, [sp, #3]
   13714:	2b02      	cmp	r3, #2
   13716:	d119      	bne.n	1374c <pinconn::uart2_txd(unsigned char, unsigned char)+0xa8>
   13718:	f89d 3002 	ldrb.w	r3, [sp, #2]
   1371c:	2b08      	cmp	r3, #8
   1371e:	d115      	bne.n	1374c <pinconn::uart2_txd(unsigned char, unsigned char)+0xa8>
    {
        *pincon[port][pin] |= (0b010);
   13720:	f89d 2003 	ldrb.w	r2, [sp, #3]
   13724:	f89d 3002 	ldrb.w	r3, [sp, #2]
   13728:	490d      	ldr	r1, [pc, #52]	; (13760 <pinconn::uart2_txd(unsigned char, unsigned char)+0xbc>)
   1372a:	0152      	lsls	r2, r2, #5
   1372c:	4413      	add	r3, r2
   1372e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   13732:	681a      	ldr	r2, [r3, #0]
   13734:	f89d 1003 	ldrb.w	r1, [sp, #3]
   13738:	f89d 3002 	ldrb.w	r3, [sp, #2]
   1373c:	4808      	ldr	r0, [pc, #32]	; (13760 <pinconn::uart2_txd(unsigned char, unsigned char)+0xbc>)
   1373e:	0149      	lsls	r1, r1, #5
   13740:	440b      	add	r3, r1
   13742:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
   13746:	f042 0202 	orr.w	r2, r2, #2
   1374a:	601a      	str	r2, [r3, #0]
   1374c:	4623      	mov	r3, r4
   1374e:	4619      	mov	r1, r3
   13750:	4802      	ldr	r0, [pc, #8]	; (1375c <pinconn::uart2_txd(unsigned char, unsigned char)+0xb8>)
   13752:	f001 fc69 	bl	15028 <__cyg_profile_func_exit>
    }
 }    
   13756:	bf00      	nop
   13758:	b002      	add	sp, #8
   1375a:	bd10      	pop	{r4, pc}
   1375c:	000136a5 	.word	0x000136a5
   13760:	1000045c 	.word	0x1000045c

00013764 <pinconn::uart2_rxd(unsigned char, unsigned char)>:
 void pinconn::uart2_rxd(uint8_t port, uint8_t pin){
   13764:	b510      	push	{r4, lr}
   13766:	b082      	sub	sp, #8
   13768:	4674      	mov	r4, lr
   1376a:	9001      	str	r0, [sp, #4]
   1376c:	460b      	mov	r3, r1
   1376e:	f88d 3003 	strb.w	r3, [sp, #3]
   13772:	4613      	mov	r3, r2
   13774:	f88d 3002 	strb.w	r3, [sp, #2]
   13778:	4623      	mov	r3, r4
   1377a:	4619      	mov	r1, r3
   1377c:	4827      	ldr	r0, [pc, #156]	; (1381c <pinconn::uart2_rxd(unsigned char, unsigned char)+0xb8>)
   1377e:	f001 fc3f 	bl	15000 <__cyg_profile_func_enter>
    clear7(port,pin);
   13782:	f89d 2002 	ldrb.w	r2, [sp, #2]
   13786:	f89d 3003 	ldrb.w	r3, [sp, #3]
   1378a:	4619      	mov	r1, r3
   1378c:	9801      	ldr	r0, [sp, #4]
   1378e:	f7ff ff57 	bl	13640 <pinconn::clear7(unsigned char, unsigned char)>
    if(((port == 0) && (pin==11))){
   13792:	f89d 3003 	ldrb.w	r3, [sp, #3]
   13796:	2b00      	cmp	r3, #0
   13798:	d11a      	bne.n	137d0 <pinconn::uart2_rxd(unsigned char, unsigned char)+0x6c>
   1379a:	f89d 3002 	ldrb.w	r3, [sp, #2]
   1379e:	2b0b      	cmp	r3, #11
   137a0:	d116      	bne.n	137d0 <pinconn::uart2_rxd(unsigned char, unsigned char)+0x6c>
    *pincon[port][pin] |= (1<<1);
   137a2:	f89d 2003 	ldrb.w	r2, [sp, #3]
   137a6:	f89d 3002 	ldrb.w	r3, [sp, #2]
   137aa:	491d      	ldr	r1, [pc, #116]	; (13820 <pinconn::uart2_rxd(unsigned char, unsigned char)+0xbc>)
   137ac:	0152      	lsls	r2, r2, #5
   137ae:	4413      	add	r3, r2
   137b0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   137b4:	681a      	ldr	r2, [r3, #0]
   137b6:	f89d 1003 	ldrb.w	r1, [sp, #3]
   137ba:	f89d 3002 	ldrb.w	r3, [sp, #2]
   137be:	4818      	ldr	r0, [pc, #96]	; (13820 <pinconn::uart2_rxd(unsigned char, unsigned char)+0xbc>)
   137c0:	0149      	lsls	r1, r1, #5
   137c2:	440b      	add	r3, r1
   137c4:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
   137c8:	f042 0202 	orr.w	r2, r2, #2
   137cc:	601a      	str	r2, [r3, #0]
   137ce:	e01d      	b.n	1380c <pinconn::uart2_rxd(unsigned char, unsigned char)+0xa8>
    }
    else if ((port == 2) && (pin==9))
   137d0:	f89d 3003 	ldrb.w	r3, [sp, #3]
   137d4:	2b02      	cmp	r3, #2
   137d6:	d119      	bne.n	1380c <pinconn::uart2_rxd(unsigned char, unsigned char)+0xa8>
   137d8:	f89d 3002 	ldrb.w	r3, [sp, #2]
   137dc:	2b09      	cmp	r3, #9
   137de:	d115      	bne.n	1380c <pinconn::uart2_rxd(unsigned char, unsigned char)+0xa8>
    {
        *pincon[port][pin] |= (0b010);
   137e0:	f89d 2003 	ldrb.w	r2, [sp, #3]
   137e4:	f89d 3002 	ldrb.w	r3, [sp, #2]
   137e8:	490d      	ldr	r1, [pc, #52]	; (13820 <pinconn::uart2_rxd(unsigned char, unsigned char)+0xbc>)
   137ea:	0152      	lsls	r2, r2, #5
   137ec:	4413      	add	r3, r2
   137ee:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   137f2:	681a      	ldr	r2, [r3, #0]
   137f4:	f89d 1003 	ldrb.w	r1, [sp, #3]
   137f8:	f89d 3002 	ldrb.w	r3, [sp, #2]
   137fc:	4808      	ldr	r0, [pc, #32]	; (13820 <pinconn::uart2_rxd(unsigned char, unsigned char)+0xbc>)
   137fe:	0149      	lsls	r1, r1, #5
   13800:	440b      	add	r3, r1
   13802:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
   13806:	f042 0202 	orr.w	r2, r2, #2
   1380a:	601a      	str	r2, [r3, #0]
   1380c:	4623      	mov	r3, r4
   1380e:	4619      	mov	r1, r3
   13810:	4802      	ldr	r0, [pc, #8]	; (1381c <pinconn::uart2_rxd(unsigned char, unsigned char)+0xb8>)
   13812:	f001 fc09 	bl	15028 <__cyg_profile_func_exit>
    }
 }
   13816:	bf00      	nop
   13818:	b002      	add	sp, #8
   1381a:	bd10      	pop	{r4, pc}
   1381c:	00013765 	.word	0x00013765
   13820:	1000045c 	.word	0x1000045c

00013824 <SetUptimeFunction(unsigned long long (*)())>:
{
   13824:	b510      	push	{r4, lr}
   13826:	b082      	sub	sp, #8
   13828:	4674      	mov	r4, lr
   1382a:	9001      	str	r0, [sp, #4]
   1382c:	4623      	mov	r3, r4
   1382e:	4619      	mov	r1, r3
   13830:	4806      	ldr	r0, [pc, #24]	; (1384c <SetUptimeFunction(unsigned long long (*)())+0x28>)
   13832:	f001 fbe5 	bl	15000 <__cyg_profile_func_enter>
  Uptime = uptime_function;
   13836:	4a06      	ldr	r2, [pc, #24]	; (13850 <SetUptimeFunction(unsigned long long (*)())+0x2c>)
   13838:	9b01      	ldr	r3, [sp, #4]
   1383a:	6013      	str	r3, [r2, #0]
   1383c:	4623      	mov	r3, r4
   1383e:	4619      	mov	r1, r3
   13840:	4802      	ldr	r0, [pc, #8]	; (1384c <SetUptimeFunction(unsigned long long (*)())+0x28>)
   13842:	f001 fbf1 	bl	15028 <__cyg_profile_func_exit>
}
   13846:	bf00      	nop
   13848:	b002      	add	sp, #8
   1384a:	bd10      	pop	{r4, pc}
   1384c:	00013825 	.word	0x00013825
   13850:	10000004 	.word	0x10000004

00013854 <SystemTimer::DisableTimer()>:
  /// system_timer_isr defaults to nullptr. The actual SystemTickHandler should
  /// check if the isr is set to nullptr, and if it is, turn off the timer, if
  /// set a proper function then execute it.
  inline static IsrPointer system_timer_isr = nullptr;
  /// WARNING: Doing so will most likely disable FreeRTOS
  static void DisableTimer()
   13854:	b510      	push	{r4, lr}
   13856:	4674      	mov	r4, lr
   13858:	4623      	mov	r3, r4
   1385a:	4619      	mov	r1, r3
   1385c:	480a      	ldr	r0, [pc, #40]	; (13888 <SystemTimer::DisableTimer()+0x34>)
   1385e:	f001 fbcf 	bl	15000 <__cyg_profile_func_enter>
  {
    sys_tick->LOAD = 0;
   13862:	4b0a      	ldr	r3, [pc, #40]	; (1388c <SystemTimer::DisableTimer()+0x38>)
   13864:	681b      	ldr	r3, [r3, #0]
   13866:	2200      	movs	r2, #0
   13868:	605a      	str	r2, [r3, #4]
    sys_tick->VAL  = 0;
   1386a:	4b08      	ldr	r3, [pc, #32]	; (1388c <SystemTimer::DisableTimer()+0x38>)
   1386c:	681b      	ldr	r3, [r3, #0]
   1386e:	2200      	movs	r2, #0
   13870:	609a      	str	r2, [r3, #8]
    sys_tick->CTRL = 0;
   13872:	4b06      	ldr	r3, [pc, #24]	; (1388c <SystemTimer::DisableTimer()+0x38>)
   13874:	681b      	ldr	r3, [r3, #0]
   13876:	2200      	movs	r2, #0
   13878:	601a      	str	r2, [r3, #0]
   1387a:	4623      	mov	r3, r4
   1387c:	4619      	mov	r1, r3
   1387e:	4802      	ldr	r0, [pc, #8]	; (13888 <SystemTimer::DisableTimer()+0x34>)
   13880:	f001 fbd2 	bl	15028 <__cyg_profile_func_exit>
  }
   13884:	bf00      	nop
   13886:	bd10      	pop	{r4, pc}
   13888:	00013855 	.word	0x00013855
   1388c:	1000075c 	.word	0x1000075c

00013890 <SystemTimer::SystemTimerHandler()>:
  static void SystemTimerHandler()
   13890:	b510      	push	{r4, lr}
   13892:	4674      	mov	r4, lr
   13894:	4623      	mov	r3, r4
   13896:	4619      	mov	r1, r3
   13898:	4808      	ldr	r0, [pc, #32]	; (138bc <SystemTimer::SystemTimerHandler()+0x2c>)
   1389a:	f001 fbb1 	bl	15000 <__cyg_profile_func_enter>
  {
    // This assumes that SysTickHandler is called every millisecond.
    // Changing that frequency will distort the milliseconds time.
    if (system_timer_isr != nullptr)
   1389e:	4b08      	ldr	r3, [pc, #32]	; (138c0 <SystemTimer::SystemTimerHandler()+0x30>)
   138a0:	681b      	ldr	r3, [r3, #0]
   138a2:	2b00      	cmp	r3, #0
   138a4:	d002      	beq.n	138ac <SystemTimer::SystemTimerHandler()+0x1c>
    {
      system_timer_isr();
   138a6:	4b06      	ldr	r3, [pc, #24]	; (138c0 <SystemTimer::SystemTimerHandler()+0x30>)
   138a8:	681b      	ldr	r3, [r3, #0]
   138aa:	4798      	blx	r3
   138ac:	4623      	mov	r3, r4
   138ae:	4619      	mov	r1, r3
   138b0:	4802      	ldr	r0, [pc, #8]	; (138bc <SystemTimer::SystemTimerHandler()+0x2c>)
   138b2:	f001 fbb9 	bl	15028 <__cyg_profile_func_exit>
    }
  }
   138b6:	bf00      	nop
   138b8:	bd10      	pop	{r4, pc}
   138ba:	bf00      	nop
   138bc:	00013891 	.word	0x00013891
   138c0:	10001234 	.word	0x10001234

000138c4 <SystemTimer::SetIsrFunction(void (*)())>:
  constexpr SystemTimer() {}
  void SetIsrFunction(IsrPointer isr) override
   138c4:	b510      	push	{r4, lr}
   138c6:	b082      	sub	sp, #8
   138c8:	4674      	mov	r4, lr
   138ca:	9001      	str	r0, [sp, #4]
   138cc:	9100      	str	r1, [sp, #0]
   138ce:	4623      	mov	r3, r4
   138d0:	4619      	mov	r1, r3
   138d2:	4807      	ldr	r0, [pc, #28]	; (138f0 <SystemTimer::SetIsrFunction(void (*)())+0x2c>)
   138d4:	f001 fb94 	bl	15000 <__cyg_profile_func_enter>
  {
    system_timer_isr = isr;
   138d8:	4a06      	ldr	r2, [pc, #24]	; (138f4 <SystemTimer::SetIsrFunction(void (*)())+0x30>)
   138da:	9b00      	ldr	r3, [sp, #0]
   138dc:	6013      	str	r3, [r2, #0]
   138de:	4623      	mov	r3, r4
   138e0:	4619      	mov	r1, r3
   138e2:	4803      	ldr	r0, [pc, #12]	; (138f0 <SystemTimer::SetIsrFunction(void (*)())+0x2c>)
   138e4:	f001 fba0 	bl	15028 <__cyg_profile_func_exit>
  }
   138e8:	bf00      	nop
   138ea:	b002      	add	sp, #8
   138ec:	bd10      	pop	{r4, pc}
   138ee:	bf00      	nop
   138f0:	000138c5 	.word	0x000138c5
   138f4:	10001234 	.word	0x10001234

000138f8 <SystemTimer::StartTimer()>:
  bool StartTimer() override
   138f8:	b530      	push	{r4, r5, lr}
   138fa:	b085      	sub	sp, #20
   138fc:	4675      	mov	r5, lr
   138fe:	9001      	str	r0, [sp, #4]
   13900:	462b      	mov	r3, r5
   13902:	4619      	mov	r1, r3
   13904:	4820      	ldr	r0, [pc, #128]	; (13988 <SystemTimer::StartTimer()+0x90>)
   13906:	f001 fb7b 	bl	15000 <__cyg_profile_func_enter>
  {
    bool successful = false;
   1390a:	2300      	movs	r3, #0
   1390c:	f88d 300f 	strb.w	r3, [sp, #15]
    if (sys_tick->LOAD != 0)
   13910:	4b1e      	ldr	r3, [pc, #120]	; (1398c <SystemTimer::StartTimer()+0x94>)
   13912:	681b      	ldr	r3, [r3, #0]
   13914:	685b      	ldr	r3, [r3, #4]
   13916:	2b00      	cmp	r3, #0
   13918:	bf14      	ite	ne
   1391a:	2301      	movne	r3, #1
   1391c:	2300      	moveq	r3, #0
   1391e:	b2db      	uxtb	r3, r3
   13920:	2b00      	cmp	r3, #0
   13922:	d01e      	beq.n	13962 <SystemTimer::StartTimer()+0x6a>
    {
      sys_tick->VAL = 0;
   13924:	4b19      	ldr	r3, [pc, #100]	; (1398c <SystemTimer::StartTimer()+0x94>)
   13926:	681b      	ldr	r3, [r3, #0]
   13928:	2200      	movs	r2, #0
   1392a:	609a      	str	r2, [r3, #8]
      sys_tick->CTRL |= (1 << ControlBitMap::kTickInterupt);
   1392c:	4b17      	ldr	r3, [pc, #92]	; (1398c <SystemTimer::StartTimer()+0x94>)
   1392e:	681b      	ldr	r3, [r3, #0]
   13930:	681a      	ldr	r2, [r3, #0]
   13932:	4b16      	ldr	r3, [pc, #88]	; (1398c <SystemTimer::StartTimer()+0x94>)
   13934:	681b      	ldr	r3, [r3, #0]
   13936:	f042 0202 	orr.w	r2, r2, #2
   1393a:	601a      	str	r2, [r3, #0]
      sys_tick->CTRL |= (1 << ControlBitMap::kEnableCounter);
   1393c:	4b13      	ldr	r3, [pc, #76]	; (1398c <SystemTimer::StartTimer()+0x94>)
   1393e:	681b      	ldr	r3, [r3, #0]
   13940:	681a      	ldr	r2, [r3, #0]
   13942:	4b12      	ldr	r3, [pc, #72]	; (1398c <SystemTimer::StartTimer()+0x94>)
   13944:	681b      	ldr	r3, [r3, #0]
   13946:	f042 0201 	orr.w	r2, r2, #1
   1394a:	601a      	str	r2, [r3, #0]
      sys_tick->CTRL |= (1 << ControlBitMap::kClkSource);
   1394c:	4b0f      	ldr	r3, [pc, #60]	; (1398c <SystemTimer::StartTimer()+0x94>)
   1394e:	681b      	ldr	r3, [r3, #0]
   13950:	681a      	ldr	r2, [r3, #0]
   13952:	4b0e      	ldr	r3, [pc, #56]	; (1398c <SystemTimer::StartTimer()+0x94>)
   13954:	681b      	ldr	r3, [r3, #0]
   13956:	f042 0204 	orr.w	r2, r2, #4
   1395a:	601a      	str	r2, [r3, #0]
      successful = true;
   1395c:	2301      	movs	r3, #1
   1395e:	f88d 300f 	strb.w	r3, [sp, #15]
    }
    RegisterIsr(SysTick_IRQn, SystemTimerHandler);
   13962:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   13966:	2201      	movs	r2, #1
   13968:	4909      	ldr	r1, [pc, #36]	; (13990 <SystemTimer::StartTimer()+0x98>)
   1396a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1396e:	f001 fa1f 	bl	14db0 <RegisterIsr(IRQn, void (*)(), bool, long)>
    return successful;
   13972:	f89d 400f 	ldrb.w	r4, [sp, #15]
   13976:	462b      	mov	r3, r5
   13978:	4619      	mov	r1, r3
   1397a:	4803      	ldr	r0, [pc, #12]	; (13988 <SystemTimer::StartTimer()+0x90>)
   1397c:	f001 fb54 	bl	15028 <__cyg_profile_func_exit>
   13980:	4623      	mov	r3, r4
  }
   13982:	4618      	mov	r0, r3
   13984:	b005      	add	sp, #20
   13986:	bd30      	pop	{r4, r5, pc}
   13988:	000138f9 	.word	0x000138f9
   1398c:	1000075c 	.word	0x1000075c
   13990:	00013891 	.word	0x00013891

00013994 <SystemTimer::SetTickFrequency(unsigned long)>:
  ///          remainder will be returned.
  ///          If the freqency supplied is less then 2Hz, the function will
  ///          return without changing any hardware.
  ///          If the reload value exceeds the SysTick_LOAD_RELOAD_Msk, the
  ///          returned value is the SysTick_LOAD_RELOAD_Msk.
  uint32_t SetTickFrequency(uint32_t frequency) override
   13994:	b530      	push	{r4, r5, lr}
   13996:	b085      	sub	sp, #20
   13998:	4675      	mov	r5, lr
   1399a:	9001      	str	r0, [sp, #4]
   1399c:	9100      	str	r1, [sp, #0]
   1399e:	462b      	mov	r3, r5
   139a0:	4619      	mov	r1, r3
   139a2:	481f      	ldr	r0, [pc, #124]	; (13a20 <SystemTimer::SetTickFrequency(unsigned long)+0x8c>)
   139a4:	f001 fb2c 	bl	15000 <__cyg_profile_func_enter>
  {
    if (frequency <= 1)
   139a8:	9b00      	ldr	r3, [sp, #0]
   139aa:	2b01      	cmp	r3, #1
   139ac:	d801      	bhi.n	139b2 <SystemTimer::SetTickFrequency(unsigned long)+0x1e>
    {
      return 0;
   139ae:	2400      	movs	r4, #0
   139b0:	e02d      	b.n	13a0e <SystemTimer::SetTickFrequency(unsigned long)+0x7a>
    }
    uint32_t reload_value = (GetSystemFrequency() / frequency) - 1;
   139b2:	9b01      	ldr	r3, [sp, #4]
   139b4:	1d1a      	adds	r2, r3, #4
   139b6:	9b01      	ldr	r3, [sp, #4]
   139b8:	685b      	ldr	r3, [r3, #4]
   139ba:	330c      	adds	r3, #12
   139bc:	681b      	ldr	r3, [r3, #0]
   139be:	4610      	mov	r0, r2
   139c0:	4798      	blx	r3
   139c2:	4602      	mov	r2, r0
   139c4:	9b00      	ldr	r3, [sp, #0]
   139c6:	fbb2 f3f3 	udiv	r3, r2, r3
   139ca:	3b01      	subs	r3, #1
   139cc:	9303      	str	r3, [sp, #12]
    int remainder         = (GetSystemFrequency() % frequency);
   139ce:	9b01      	ldr	r3, [sp, #4]
   139d0:	1d1a      	adds	r2, r3, #4
   139d2:	9b01      	ldr	r3, [sp, #4]
   139d4:	685b      	ldr	r3, [r3, #4]
   139d6:	330c      	adds	r3, #12
   139d8:	681b      	ldr	r3, [r3, #0]
   139da:	4610      	mov	r0, r2
   139dc:	4798      	blx	r3
   139de:	4603      	mov	r3, r0
   139e0:	9a00      	ldr	r2, [sp, #0]
   139e2:	fbb3 f2f2 	udiv	r2, r3, r2
   139e6:	9900      	ldr	r1, [sp, #0]
   139e8:	fb01 f202 	mul.w	r2, r1, r2
   139ec:	1a9b      	subs	r3, r3, r2
   139ee:	9302      	str	r3, [sp, #8]
    if (reload_value > SysTick_LOAD_RELOAD_Msk)
   139f0:	9b03      	ldr	r3, [sp, #12]
   139f2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
   139f6:	d305      	bcc.n	13a04 <SystemTimer::SetTickFrequency(unsigned long)+0x70>
    {
      reload_value = SysTick_LOAD_RELOAD_Msk;
   139f8:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
   139fc:	9303      	str	r3, [sp, #12]
      remainder    = SysTick_LOAD_RELOAD_Msk;
   139fe:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
   13a02:	9302      	str	r3, [sp, #8]
    }
    sys_tick->LOAD = reload_value;
   13a04:	4b07      	ldr	r3, [pc, #28]	; (13a24 <SystemTimer::SetTickFrequency(unsigned long)+0x90>)
   13a06:	681b      	ldr	r3, [r3, #0]
   13a08:	9a03      	ldr	r2, [sp, #12]
   13a0a:	605a      	str	r2, [r3, #4]
    return remainder;
   13a0c:	9c02      	ldr	r4, [sp, #8]
   13a0e:	462b      	mov	r3, r5
   13a10:	4619      	mov	r1, r3
   13a12:	4803      	ldr	r0, [pc, #12]	; (13a20 <SystemTimer::SetTickFrequency(unsigned long)+0x8c>)
   13a14:	f001 fb08 	bl	15028 <__cyg_profile_func_exit>
   13a18:	4623      	mov	r3, r4
  }
   13a1a:	4618      	mov	r0, r3
   13a1c:	b005      	add	sp, #20
   13a1e:	bd30      	pop	{r4, r5, pc}
   13a20:	00013995 	.word	0x00013995
   13a24:	1000075c 	.word	0x1000075c

00013a28 <unsigned char util::Value<TimerInterface::TimerPort, unsigned char>(TimerInterface::TimerPort)>:
constexpr Type Value(Enum enum_type_value)
   13a28:	b530      	push	{r4, r5, lr}
   13a2a:	b083      	sub	sp, #12
   13a2c:	4675      	mov	r5, lr
   13a2e:	4603      	mov	r3, r0
   13a30:	f88d 3007 	strb.w	r3, [sp, #7]
   13a34:	462b      	mov	r3, r5
   13a36:	4619      	mov	r1, r3
   13a38:	4806      	ldr	r0, [pc, #24]	; (13a54 <unsigned char util::Value<TimerInterface::TimerPort, unsigned char>(TimerInterface::TimerPort)+0x2c>)
   13a3a:	f001 fae1 	bl	15000 <__cyg_profile_func_enter>
  return static_cast<Type>(enum_type_value);
   13a3e:	f89d 4007 	ldrb.w	r4, [sp, #7]
   13a42:	462b      	mov	r3, r5
   13a44:	4619      	mov	r1, r3
   13a46:	4803      	ldr	r0, [pc, #12]	; (13a54 <unsigned char util::Value<TimerInterface::TimerPort, unsigned char>(TimerInterface::TimerPort)+0x2c>)
   13a48:	f001 faee 	bl	15028 <__cyg_profile_func_exit>
   13a4c:	4623      	mov	r3, r4
}
   13a4e:	4618      	mov	r0, r3
   13a50:	b003      	add	sp, #12
   13a52:	bd30      	pop	{r4, r5, pc}
   13a54:	00013a29 	.word	0x00013a29

00013a58 <Timer::DoNothingIsr()>:
    Lpc40xxSystemController::Peripherals::kTimer3
  };

  static constexpr IRQn kTimerIrq[] = { IRQn::TIMER0_IRQn, IRQn::TIMER1_IRQn,
                                        IRQn::TIMER2_IRQn, IRQn::TIMER3_IRQn };
  static void DoNothingIsr() {}
   13a58:	b510      	push	{r4, lr}
   13a5a:	4674      	mov	r4, lr
   13a5c:	4623      	mov	r3, r4
   13a5e:	4619      	mov	r1, r3
   13a60:	4804      	ldr	r0, [pc, #16]	; (13a74 <Timer::DoNothingIsr()+0x1c>)
   13a62:	f001 facd 	bl	15000 <__cyg_profile_func_enter>
   13a66:	4623      	mov	r3, r4
   13a68:	4619      	mov	r1, r3
   13a6a:	4802      	ldr	r0, [pc, #8]	; (13a74 <Timer::DoNothingIsr()+0x1c>)
   13a6c:	f001 fadc 	bl	15028 <__cyg_profile_func_exit>
   13a70:	bf00      	nop
   13a72:	bd10      	pop	{r4, pc}
   13a74:	00013a59 	.word	0x00013a59

00013a78 <Timer::Initialize(unsigned long, void (*)(), long)>:
  ///                  register will be 10 ms.
  /// @param isr an ISR that will fire when the condition set by SetTimer
  ///            method is achieved.
  /// @param priority sets the Timer interrupt's priority level, defaults to -1
  ///                 which uses the platforms default priority.
  void Initialize(uint32_t frequency, IsrPointer isr = DoNothingIsr,
   13a78:	b510      	push	{r4, lr}
   13a7a:	b086      	sub	sp, #24
   13a7c:	4674      	mov	r4, lr
   13a7e:	9003      	str	r0, [sp, #12]
   13a80:	9102      	str	r1, [sp, #8]
   13a82:	9201      	str	r2, [sp, #4]
   13a84:	9300      	str	r3, [sp, #0]
   13a86:	4623      	mov	r3, r4
   13a88:	4619      	mov	r1, r3
   13a8a:	483e      	ldr	r0, [pc, #248]	; (13b84 <Timer::Initialize(unsigned long, void (*)(), long)+0x10c>)
   13a8c:	f001 fab8 	bl	15000 <__cyg_profile_func_enter>
                  int32_t priority = -1) override final
  {
    PowerUpPeripheral(kPowerbit[channel_]);
   13a90:	9b03      	ldr	r3, [sp, #12]
   13a92:	1d18      	adds	r0, r3, #4
   13a94:	9b03      	ldr	r3, [sp, #12]
   13a96:	685b      	ldr	r3, [r3, #4]
   13a98:	3314      	adds	r3, #20
   13a9a:	681b      	ldr	r3, [r3, #0]
   13a9c:	9a03      	ldr	r2, [sp, #12]
   13a9e:	7a12      	ldrb	r2, [r2, #8]
   13aa0:	0092      	lsls	r2, r2, #2
   13aa2:	4939      	ldr	r1, [pc, #228]	; (13b88 <Timer::Initialize(unsigned long, void (*)(), long)+0x110>)
   13aa4:	440a      	add	r2, r1
   13aa6:	4611      	mov	r1, r2
   13aa8:	4798      	blx	r3
    SJ2_ASSERT_FATAL(
   13aaa:	9b02      	ldr	r3, [sp, #8]
   13aac:	2b00      	cmp	r3, #0
   13aae:	d10d      	bne.n	13acc <Timer::Initialize(unsigned long, void (*)(), long)+0x54>
   13ab0:	2384      	movs	r3, #132	; 0x84
   13ab2:	4a36      	ldr	r2, [pc, #216]	; (13b8c <Timer::Initialize(unsigned long, void (*)(), long)+0x114>)
   13ab4:	4936      	ldr	r1, [pc, #216]	; (13b90 <Timer::Initialize(unsigned long, void (*)(), long)+0x118>)
   13ab6:	4837      	ldr	r0, [pc, #220]	; (13b94 <Timer::Initialize(unsigned long, void (*)(), long)+0x11c>)
   13ab8:	f002 fd1e 	bl	164f8 <printf>
   13abc:	4836      	ldr	r0, [pc, #216]	; (13b98 <Timer::Initialize(unsigned long, void (*)(), long)+0x120>)
   13abe:	f001 fa6f 	bl	14fa0 <puts>
   13ac2:	2100      	movs	r1, #0
   13ac4:	2001      	movs	r0, #1
   13ac6:	f7fc ff85 	bl	109d4 <debug::PrintBacktrace(bool, void*)>
   13aca:	e7fe      	b.n	13aca <Timer::Initialize(unsigned long, void (*)(), long)+0x52>
        frequency != 0,
        "Cannot have zero ticks per microsecond, please choose 1 or more.");
    // Set Prescale register for Prescale Counter to milliseconds
    uint32_t prescaler = GetPeripheralFrequency() / frequency;
   13acc:	9b03      	ldr	r3, [sp, #12]
   13ace:	1d1a      	adds	r2, r3, #4
   13ad0:	9b03      	ldr	r3, [sp, #12]
   13ad2:	685b      	ldr	r3, [r3, #4]
   13ad4:	3310      	adds	r3, #16
   13ad6:	681b      	ldr	r3, [r3, #0]
   13ad8:	4610      	mov	r0, r2
   13ada:	4798      	blx	r3
   13adc:	4602      	mov	r2, r0
   13ade:	9b02      	ldr	r3, [sp, #8]
   13ae0:	fbb2 f3f3 	udiv	r3, r2, r3
   13ae4:	9305      	str	r3, [sp, #20]
    tim_register[channel_]->PR &= ~(kClear << 1);
   13ae6:	9b03      	ldr	r3, [sp, #12]
   13ae8:	7a1b      	ldrb	r3, [r3, #8]
   13aea:	461a      	mov	r2, r3
   13aec:	4b2b      	ldr	r3, [pc, #172]	; (13b9c <Timer::Initialize(unsigned long, void (*)(), long)+0x124>)
   13aee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   13af2:	68da      	ldr	r2, [r3, #12]
   13af4:	9b03      	ldr	r3, [sp, #12]
   13af6:	7a1b      	ldrb	r3, [r3, #8]
   13af8:	4619      	mov	r1, r3
   13afa:	4b28      	ldr	r3, [pc, #160]	; (13b9c <Timer::Initialize(unsigned long, void (*)(), long)+0x124>)
   13afc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   13b00:	f002 0201 	and.w	r2, r2, #1
   13b04:	60da      	str	r2, [r3, #12]
    tim_register[channel_]->PR |= (prescaler << 1);
   13b06:	9b03      	ldr	r3, [sp, #12]
   13b08:	7a1b      	ldrb	r3, [r3, #8]
   13b0a:	461a      	mov	r2, r3
   13b0c:	4b23      	ldr	r3, [pc, #140]	; (13b9c <Timer::Initialize(unsigned long, void (*)(), long)+0x124>)
   13b0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   13b12:	68d9      	ldr	r1, [r3, #12]
   13b14:	9b05      	ldr	r3, [sp, #20]
   13b16:	005a      	lsls	r2, r3, #1
   13b18:	9b03      	ldr	r3, [sp, #12]
   13b1a:	7a1b      	ldrb	r3, [r3, #8]
   13b1c:	4618      	mov	r0, r3
   13b1e:	4b1f      	ldr	r3, [pc, #124]	; (13b9c <Timer::Initialize(unsigned long, void (*)(), long)+0x124>)
   13b20:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   13b24:	430a      	orrs	r2, r1
   13b26:	60da      	str	r2, [r3, #12]
    tim_register[channel_]->TCR |= (1 << 0);
   13b28:	9b03      	ldr	r3, [sp, #12]
   13b2a:	7a1b      	ldrb	r3, [r3, #8]
   13b2c:	461a      	mov	r2, r3
   13b2e:	4b1b      	ldr	r3, [pc, #108]	; (13b9c <Timer::Initialize(unsigned long, void (*)(), long)+0x124>)
   13b30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   13b34:	685a      	ldr	r2, [r3, #4]
   13b36:	9b03      	ldr	r3, [sp, #12]
   13b38:	7a1b      	ldrb	r3, [r3, #8]
   13b3a:	4619      	mov	r1, r3
   13b3c:	4b17      	ldr	r3, [pc, #92]	; (13b9c <Timer::Initialize(unsigned long, void (*)(), long)+0x124>)
   13b3e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   13b42:	f042 0201 	orr.w	r2, r2, #1
   13b46:	605a      	str	r2, [r3, #4]
    user_timer_isr[channel_] = isr;
   13b48:	9b03      	ldr	r3, [sp, #12]
   13b4a:	7a1b      	ldrb	r3, [r3, #8]
   13b4c:	4619      	mov	r1, r3
   13b4e:	4a14      	ldr	r2, [pc, #80]	; (13ba0 <Timer::Initialize(unsigned long, void (*)(), long)+0x128>)
   13b50:	9b01      	ldr	r3, [sp, #4]
   13b52:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
    RegisterIsr(kTimerIrq[channel_], kTimerIsr[channel_], true, priority);
   13b56:	9b03      	ldr	r3, [sp, #12]
   13b58:	7a1b      	ldrb	r3, [r3, #8]
   13b5a:	461a      	mov	r2, r3
   13b5c:	4b11      	ldr	r3, [pc, #68]	; (13ba4 <Timer::Initialize(unsigned long, void (*)(), long)+0x12c>)
   13b5e:	5698      	ldrsb	r0, [r3, r2]
   13b60:	9b03      	ldr	r3, [sp, #12]
   13b62:	7a1b      	ldrb	r3, [r3, #8]
   13b64:	461a      	mov	r2, r3
   13b66:	4b10      	ldr	r3, [pc, #64]	; (13ba8 <Timer::Initialize(unsigned long, void (*)(), long)+0x130>)
   13b68:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   13b6c:	9b00      	ldr	r3, [sp, #0]
   13b6e:	2201      	movs	r2, #1
   13b70:	f001 f91e 	bl	14db0 <RegisterIsr(IRQn, void (*)(), bool, long)>
   13b74:	4623      	mov	r3, r4
   13b76:	4619      	mov	r1, r3
   13b78:	4802      	ldr	r0, [pc, #8]	; (13b84 <Timer::Initialize(unsigned long, void (*)(), long)+0x10c>)
   13b7a:	f001 fa55 	bl	15028 <__cyg_profile_func_exit>
  }
   13b7e:	bf00      	nop
   13b80:	b006      	add	sp, #24
   13b82:	bd10      	pop	{r4, pc}
   13b84:	00013a79 	.word	0x00013a79
   13b88:	0001964c 	.word	0x0001964c
   13b8c:	0001974c 	.word	0x0001974c
   13b90:	00019670 	.word	0x00019670
   13b94:	0001952c 	.word	0x0001952c
   13b98:	00019238 	.word	0x00019238
   13b9c:	10000760 	.word	0x10000760
   13ba0:	10001278 	.word	0x10001278
   13ba4:	0001965c 	.word	0x0001965c
   13ba8:	00019660 	.word	0x00019660

00013bac <unsigned char util::Value<TimerInterface::MatchControlRegister, unsigned char>(TimerInterface::MatchControlRegister)>:
constexpr Type Value(Enum enum_type_value)
   13bac:	b530      	push	{r4, r5, lr}
   13bae:	b083      	sub	sp, #12
   13bb0:	4675      	mov	r5, lr
   13bb2:	4603      	mov	r3, r0
   13bb4:	f88d 3007 	strb.w	r3, [sp, #7]
   13bb8:	462b      	mov	r3, r5
   13bba:	4619      	mov	r1, r3
   13bbc:	4806      	ldr	r0, [pc, #24]	; (13bd8 <unsigned char util::Value<TimerInterface::MatchControlRegister, unsigned char>(TimerInterface::MatchControlRegister)+0x2c>)
   13bbe:	f001 fa1f 	bl	15000 <__cyg_profile_func_enter>
  return static_cast<Type>(enum_type_value);
   13bc2:	f89d 4007 	ldrb.w	r4, [sp, #7]
   13bc6:	462b      	mov	r3, r5
   13bc8:	4619      	mov	r1, r3
   13bca:	4803      	ldr	r0, [pc, #12]	; (13bd8 <unsigned char util::Value<TimerInterface::MatchControlRegister, unsigned char>(TimerInterface::MatchControlRegister)+0x2c>)
   13bcc:	f001 fa2c 	bl	15028 <__cyg_profile_func_exit>
   13bd0:	4623      	mov	r3, r4
}
   13bd2:	4618      	mov	r0, r3
   13bd4:	b003      	add	sp, #12
   13bd6:	bd30      	pop	{r4, r5, pc}
   13bd8:	00013bad 	.word	0x00013bad

00013bdc <Timer::SetTimer(unsigned long, TimerInterface::TimerIsrCondition, TimerInterface::MatchControlRegister)>:
  ///
  /// @param ticks the count of the timer register (TC) to have an ISR fire
  /// @param condition the condition for which a timer interrupt will occur
  /// @param match_register which match register (from 0 to 3) should be used
  ///                       for holding the ticks for the condition.
  void SetTimer(uint32_t ticks, TimerIsrCondition condition,
   13bdc:	b570      	push	{r4, r5, r6, lr}
   13bde:	b086      	sub	sp, #24
   13be0:	4676      	mov	r6, lr
   13be2:	9003      	str	r0, [sp, #12]
   13be4:	9102      	str	r1, [sp, #8]
   13be6:	4611      	mov	r1, r2
   13be8:	461a      	mov	r2, r3
   13bea:	460b      	mov	r3, r1
   13bec:	f88d 3007 	strb.w	r3, [sp, #7]
   13bf0:	4613      	mov	r3, r2
   13bf2:	f88d 3006 	strb.w	r3, [sp, #6]
   13bf6:	4633      	mov	r3, r6
   13bf8:	4619      	mov	r1, r3
   13bfa:	4832      	ldr	r0, [pc, #200]	; (13cc4 <Timer::SetTimer(unsigned long, TimerInterface::TimerIsrCondition, TimerInterface::MatchControlRegister)+0xe8>)
   13bfc:	f001 fa00 	bl	15000 <__cyg_profile_func_enter>
                MatchControlRegister match_register = kMat0) override final
  {
    static constexpr uint8_t kClearMode = 0b0111;

    uint8_t match_value = util::Value(match_register);
   13c00:	f89d 3006 	ldrb.w	r3, [sp, #6]
   13c04:	4618      	mov	r0, r3
   13c06:	f7ff ffd1 	bl	13bac <unsigned char util::Value<TimerInterface::MatchControlRegister, unsigned char>(TimerInterface::MatchControlRegister)>
   13c0a:	4603      	mov	r3, r0
   13c0c:	f88d 3017 	strb.w	r3, [sp, #23]
    tim_register[channel_]->MCR &= ~(kClearMode << match_value);
   13c10:	9b03      	ldr	r3, [sp, #12]
   13c12:	7a1b      	ldrb	r3, [r3, #8]
   13c14:	461a      	mov	r2, r3
   13c16:	4b2c      	ldr	r3, [pc, #176]	; (13cc8 <Timer::SetTimer(unsigned long, TimerInterface::TimerIsrCondition, TimerInterface::MatchControlRegister)+0xec>)
   13c18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   13c1c:	695a      	ldr	r2, [r3, #20]
   13c1e:	f89d 3017 	ldrb.w	r3, [sp, #23]
   13c22:	2107      	movs	r1, #7
   13c24:	fa01 f303 	lsl.w	r3, r1, r3
   13c28:	43db      	mvns	r3, r3
   13c2a:	4619      	mov	r1, r3
   13c2c:	9b03      	ldr	r3, [sp, #12]
   13c2e:	7a1b      	ldrb	r3, [r3, #8]
   13c30:	4618      	mov	r0, r3
   13c32:	4b25      	ldr	r3, [pc, #148]	; (13cc8 <Timer::SetTimer(unsigned long, TimerInterface::TimerIsrCondition, TimerInterface::MatchControlRegister)+0xec>)
   13c34:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   13c38:	400a      	ands	r2, r1
   13c3a:	615a      	str	r2, [r3, #20]
    tim_register[channel_]->MCR |= condition << match_value;
   13c3c:	9b03      	ldr	r3, [sp, #12]
   13c3e:	7a1b      	ldrb	r3, [r3, #8]
   13c40:	461a      	mov	r2, r3
   13c42:	4b21      	ldr	r3, [pc, #132]	; (13cc8 <Timer::SetTimer(unsigned long, TimerInterface::TimerIsrCondition, TimerInterface::MatchControlRegister)+0xec>)
   13c44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   13c48:	695a      	ldr	r2, [r3, #20]
   13c4a:	f89d 1007 	ldrb.w	r1, [sp, #7]
   13c4e:	f89d 3017 	ldrb.w	r3, [sp, #23]
   13c52:	fa01 f303 	lsl.w	r3, r1, r3
   13c56:	4619      	mov	r1, r3
   13c58:	9b03      	ldr	r3, [sp, #12]
   13c5a:	7a1b      	ldrb	r3, [r3, #8]
   13c5c:	4618      	mov	r0, r3
   13c5e:	4b1a      	ldr	r3, [pc, #104]	; (13cc8 <Timer::SetTimer(unsigned long, TimerInterface::TimerIsrCondition, TimerInterface::MatchControlRegister)+0xec>)
   13c60:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   13c64:	430a      	orrs	r2, r1
   13c66:	615a      	str	r2, [r3, #20]
    *match[channel_][match_value / 3] |= (((ticks / 2)) << 0);
   13c68:	9b03      	ldr	r3, [sp, #12]
   13c6a:	7a1b      	ldrb	r3, [r3, #8]
   13c6c:	4618      	mov	r0, r3
   13c6e:	f89d 3017 	ldrb.w	r3, [sp, #23]
   13c72:	4a16      	ldr	r2, [pc, #88]	; (13ccc <Timer::SetTimer(unsigned long, TimerInterface::TimerIsrCondition, TimerInterface::MatchControlRegister)+0xf0>)
   13c74:	fba2 2303 	umull	r2, r3, r2, r3
   13c78:	085b      	lsrs	r3, r3, #1
   13c7a:	b2db      	uxtb	r3, r3
   13c7c:	4619      	mov	r1, r3
   13c7e:	4a14      	ldr	r2, [pc, #80]	; (13cd0 <Timer::SetTimer(unsigned long, TimerInterface::TimerIsrCondition, TimerInterface::MatchControlRegister)+0xf4>)
   13c80:	0083      	lsls	r3, r0, #2
   13c82:	440b      	add	r3, r1
   13c84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13c88:	6819      	ldr	r1, [r3, #0]
   13c8a:	9b02      	ldr	r3, [sp, #8]
   13c8c:	085a      	lsrs	r2, r3, #1
   13c8e:	9b03      	ldr	r3, [sp, #12]
   13c90:	7a1b      	ldrb	r3, [r3, #8]
   13c92:	461d      	mov	r5, r3
   13c94:	f89d 3017 	ldrb.w	r3, [sp, #23]
   13c98:	480c      	ldr	r0, [pc, #48]	; (13ccc <Timer::SetTimer(unsigned long, TimerInterface::TimerIsrCondition, TimerInterface::MatchControlRegister)+0xf0>)
   13c9a:	fba0 0303 	umull	r0, r3, r0, r3
   13c9e:	085b      	lsrs	r3, r3, #1
   13ca0:	b2db      	uxtb	r3, r3
   13ca2:	461c      	mov	r4, r3
   13ca4:	480a      	ldr	r0, [pc, #40]	; (13cd0 <Timer::SetTimer(unsigned long, TimerInterface::TimerIsrCondition, TimerInterface::MatchControlRegister)+0xf4>)
   13ca6:	00ab      	lsls	r3, r5, #2
   13ca8:	4423      	add	r3, r4
   13caa:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
   13cae:	430a      	orrs	r2, r1
   13cb0:	601a      	str	r2, [r3, #0]
   13cb2:	4633      	mov	r3, r6
   13cb4:	4619      	mov	r1, r3
   13cb6:	4803      	ldr	r0, [pc, #12]	; (13cc4 <Timer::SetTimer(unsigned long, TimerInterface::TimerIsrCondition, TimerInterface::MatchControlRegister)+0xe8>)
   13cb8:	f001 f9b6 	bl	15028 <__cyg_profile_func_exit>
  }
   13cbc:	bf00      	nop
   13cbe:	b006      	add	sp, #24
   13cc0:	bd70      	pop	{r4, r5, r6, pc}
   13cc2:	bf00      	nop
   13cc4:	00013bdd 	.word	0x00013bdd
   13cc8:	10000760 	.word	0x10000760
   13ccc:	aaaaaaab 	.word	0xaaaaaaab
   13cd0:	10001238 	.word	0x10001238

00013cd4 <Timer::GetTimer()>:

  [[gnu::always_inline]] uint32_t GetTimer() override final {
   13cd4:	b530      	push	{r4, r5, lr}
   13cd6:	b083      	sub	sp, #12
   13cd8:	4675      	mov	r5, lr
   13cda:	9001      	str	r0, [sp, #4]
   13cdc:	462b      	mov	r3, r5
   13cde:	4619      	mov	r1, r3
   13ce0:	4809      	ldr	r0, [pc, #36]	; (13d08 <Timer::GetTimer()+0x34>)
   13ce2:	f001 f98d 	bl	15000 <__cyg_profile_func_enter>
    return tim_register[channel_]->TC;
   13ce6:	9b01      	ldr	r3, [sp, #4]
   13ce8:	7a1b      	ldrb	r3, [r3, #8]
   13cea:	461a      	mov	r2, r3
   13cec:	4b07      	ldr	r3, [pc, #28]	; (13d0c <Timer::GetTimer()+0x38>)
   13cee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   13cf2:	689c      	ldr	r4, [r3, #8]
   13cf4:	462b      	mov	r3, r5
   13cf6:	4619      	mov	r1, r3
   13cf8:	4803      	ldr	r0, [pc, #12]	; (13d08 <Timer::GetTimer()+0x34>)
   13cfa:	f001 f995 	bl	15028 <__cyg_profile_func_exit>
   13cfe:	4623      	mov	r3, r4
  }
   13d00:	4618      	mov	r0, r3
   13d02:	b003      	add	sp, #12
   13d04:	bd30      	pop	{r4, r5, pc}
   13d06:	bf00      	nop
   13d08:	00013cd5 	.word	0x00013cd5
   13d0c:	10000760 	.word	0x10000760

00013d10 <Uart::SetBaudRate(unsigned long)>:
  constexpr Uart(Channels mode, PinInterface * tx_pin, PinInterface * rx_pin)
      : channel_(static_cast<uint8_t>(mode)), tx_(tx_pin), rx_(rx_pin)
  {
  }

  void SetBaudRate(uint32_t baud_rate) override
   13d10:	b510      	push	{r4, lr}
   13d12:	b088      	sub	sp, #32
   13d14:	4674      	mov	r4, lr
   13d16:	9001      	str	r0, [sp, #4]
   13d18:	9100      	str	r1, [sp, #0]
   13d1a:	4623      	mov	r3, r4
   13d1c:	4619      	mov	r1, r3
   13d1e:	482d      	ldr	r0, [pc, #180]	; (13dd4 <Uart::SetBaudRate(unsigned long)+0xc4>)
   13d20:	f001 f96e 	bl	15000 <__cyg_profile_func_enter>
  {
    constexpr uint8_t kDlabBit = (1 << 7);
   13d24:	2380      	movs	r3, #128	; 0x80
   13d26:	f88d 301f 	strb.w	r3, [sp, #31]
    float baudrate             = static_cast<float>(baud_rate);
   13d2a:	9b00      	ldr	r3, [sp, #0]
   13d2c:	ee07 3a90 	vmov	s15, r3
   13d30:	eef8 7a67 	vcvt.f32.u32	s15, s15
   13d34:	edcd 7a06 	vstr	s15, [sp, #24]
    UartCalibration_t dividers = GenerateUartCalibration(baudrate);
   13d38:	ab02      	add	r3, sp, #8
   13d3a:	ed9d 0a06 	vldr	s0, [sp, #24]
   13d3e:	9901      	ldr	r1, [sp, #4]
   13d40:	4618      	mov	r0, r3
   13d42:	f000 fb2d 	bl	143a0 <Uart::GenerateUartCalibration(float)>

    uint8_t dlm = static_cast<uint8_t>((dividers.divide_latch >> 8) & 0xFF);
   13d46:	9b02      	ldr	r3, [sp, #8]
   13d48:	0a1b      	lsrs	r3, r3, #8
   13d4a:	f88d 3017 	strb.w	r3, [sp, #23]
    uint8_t dll = static_cast<uint8_t>(dividers.divide_latch & 0xFF);
   13d4e:	9b02      	ldr	r3, [sp, #8]
   13d50:	f88d 3016 	strb.w	r3, [sp, #22]
    uint8_t fdr = static_cast<uint8_t>((dividers.multiply & 0xF) << 4 |
   13d54:	9b04      	ldr	r3, [sp, #16]
   13d56:	b2db      	uxtb	r3, r3
   13d58:	011b      	lsls	r3, r3, #4
   13d5a:	b2da      	uxtb	r2, r3
                                       (dividers.divide_add & 0xF));
   13d5c:	9b03      	ldr	r3, [sp, #12]
   13d5e:	b2db      	uxtb	r3, r3
   13d60:	f003 030f 	and.w	r3, r3, #15
   13d64:	b2db      	uxtb	r3, r3
    uint8_t fdr = static_cast<uint8_t>((dividers.multiply & 0xF) << 4 |
   13d66:	4313      	orrs	r3, r2
   13d68:	f88d 3015 	strb.w	r3, [sp, #21]

    // Set baud rate
    uart[channel_]->LCR = kDlabBit;
   13d6c:	9b01      	ldr	r3, [sp, #4]
   13d6e:	7a1b      	ldrb	r3, [r3, #8]
   13d70:	461a      	mov	r2, r3
   13d72:	4b19      	ldr	r3, [pc, #100]	; (13dd8 <Uart::SetBaudRate(unsigned long)+0xc8>)
   13d74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   13d78:	2280      	movs	r2, #128	; 0x80
   13d7a:	731a      	strb	r2, [r3, #12]
    uart[channel_]->DLM = dlm;
   13d7c:	9b01      	ldr	r3, [sp, #4]
   13d7e:	7a1b      	ldrb	r3, [r3, #8]
   13d80:	461a      	mov	r2, r3
   13d82:	4b15      	ldr	r3, [pc, #84]	; (13dd8 <Uart::SetBaudRate(unsigned long)+0xc8>)
   13d84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   13d88:	f89d 2017 	ldrb.w	r2, [sp, #23]
   13d8c:	711a      	strb	r2, [r3, #4]
    uart[channel_]->DLL = dll;
   13d8e:	9b01      	ldr	r3, [sp, #4]
   13d90:	7a1b      	ldrb	r3, [r3, #8]
   13d92:	461a      	mov	r2, r3
   13d94:	4b10      	ldr	r3, [pc, #64]	; (13dd8 <Uart::SetBaudRate(unsigned long)+0xc8>)
   13d96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   13d9a:	f89d 2016 	ldrb.w	r2, [sp, #22]
   13d9e:	701a      	strb	r2, [r3, #0]
    uart[channel_]->FDR = fdr;
   13da0:	9b01      	ldr	r3, [sp, #4]
   13da2:	7a1b      	ldrb	r3, [r3, #8]
   13da4:	461a      	mov	r2, r3
   13da6:	4b0c      	ldr	r3, [pc, #48]	; (13dd8 <Uart::SetBaudRate(unsigned long)+0xc8>)
   13da8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   13dac:	f89d 2015 	ldrb.w	r2, [sp, #21]
   13db0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    uart[channel_]->LCR = kStandardUart;
   13db4:	9b01      	ldr	r3, [sp, #4]
   13db6:	7a1b      	ldrb	r3, [r3, #8]
   13db8:	461a      	mov	r2, r3
   13dba:	4b07      	ldr	r3, [pc, #28]	; (13dd8 <Uart::SetBaudRate(unsigned long)+0xc8>)
   13dbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   13dc0:	2203      	movs	r2, #3
   13dc2:	731a      	strb	r2, [r3, #12]
   13dc4:	4623      	mov	r3, r4
   13dc6:	4619      	mov	r1, r3
   13dc8:	4802      	ldr	r0, [pc, #8]	; (13dd4 <Uart::SetBaudRate(unsigned long)+0xc4>)
   13dca:	f001 f92d 	bl	15028 <__cyg_profile_func_exit>
  }
   13dce:	bf00      	nop
   13dd0:	b008      	add	sp, #32
   13dd2:	bd10      	pop	{r4, pc}
   13dd4:	00013d11 	.word	0x00013d11
   13dd8:	10000770 	.word	0x10000770

00013ddc <Uart::Initialize(unsigned long)>:

  bool Initialize(uint32_t baud_rate) override
   13ddc:	b530      	push	{r4, r5, lr}
   13dde:	b085      	sub	sp, #20
   13de0:	4675      	mov	r5, lr
   13de2:	9001      	str	r0, [sp, #4]
   13de4:	9100      	str	r1, [sp, #0]
   13de6:	462b      	mov	r3, r5
   13de8:	4619      	mov	r1, r3
   13dea:	4830      	ldr	r0, [pc, #192]	; (13eac <Uart::Initialize(unsigned long)+0xd0>)
   13dec:	f001 f908 	bl	15000 <__cyg_profile_func_enter>
  {
    constexpr uint8_t kFIFOEnableAndReset = 0b111;
   13df0:	2307      	movs	r3, #7
   13df2:	f88d 300f 	strb.w	r3, [sp, #15]
    // Powering the port
    PowerUpPeripheral(kPowerbit[channel_]);
   13df6:	9b01      	ldr	r3, [sp, #4]
   13df8:	1d18      	adds	r0, r3, #4
   13dfa:	9b01      	ldr	r3, [sp, #4]
   13dfc:	685b      	ldr	r3, [r3, #4]
   13dfe:	3314      	adds	r3, #20
   13e00:	681b      	ldr	r3, [r3, #0]
   13e02:	9a01      	ldr	r2, [sp, #4]
   13e04:	7a12      	ldrb	r2, [r2, #8]
   13e06:	0092      	lsls	r2, r2, #2
   13e08:	4929      	ldr	r1, [pc, #164]	; (13eb0 <Uart::Initialize(unsigned long)+0xd4>)
   13e0a:	440a      	add	r2, r1
   13e0c:	4611      	mov	r1, r2
   13e0e:	4798      	blx	r3
    // Setting the pin functions and modes
    rx_->SetPinFunction(kRxUartPortFunction[channel_]);
   13e10:	9b01      	ldr	r3, [sp, #4]
   13e12:	6918      	ldr	r0, [r3, #16]
   13e14:	9b01      	ldr	r3, [sp, #4]
   13e16:	691b      	ldr	r3, [r3, #16]
   13e18:	681b      	ldr	r3, [r3, #0]
   13e1a:	681b      	ldr	r3, [r3, #0]
   13e1c:	9a01      	ldr	r2, [sp, #4]
   13e1e:	7a12      	ldrb	r2, [r2, #8]
   13e20:	4611      	mov	r1, r2
   13e22:	4a24      	ldr	r2, [pc, #144]	; (13eb4 <Uart::Initialize(unsigned long)+0xd8>)
   13e24:	5c52      	ldrb	r2, [r2, r1]
   13e26:	4611      	mov	r1, r2
   13e28:	4798      	blx	r3
    tx_->SetPinFunction(kTxUartPortFunction[channel_]);
   13e2a:	9b01      	ldr	r3, [sp, #4]
   13e2c:	68d8      	ldr	r0, [r3, #12]
   13e2e:	9b01      	ldr	r3, [sp, #4]
   13e30:	68db      	ldr	r3, [r3, #12]
   13e32:	681b      	ldr	r3, [r3, #0]
   13e34:	681b      	ldr	r3, [r3, #0]
   13e36:	9a01      	ldr	r2, [sp, #4]
   13e38:	7a12      	ldrb	r2, [r2, #8]
   13e3a:	4611      	mov	r1, r2
   13e3c:	4a1e      	ldr	r2, [pc, #120]	; (13eb8 <Uart::Initialize(unsigned long)+0xdc>)
   13e3e:	5c52      	ldrb	r2, [r2, r1]
   13e40:	4611      	mov	r1, r2
   13e42:	4798      	blx	r3
    rx_->SetMode(PinInterface::Mode::kPullUp);
   13e44:	9b01      	ldr	r3, [sp, #4]
   13e46:	691a      	ldr	r2, [r3, #16]
   13e48:	9b01      	ldr	r3, [sp, #4]
   13e4a:	691b      	ldr	r3, [r3, #16]
   13e4c:	681b      	ldr	r3, [r3, #0]
   13e4e:	3304      	adds	r3, #4
   13e50:	681b      	ldr	r3, [r3, #0]
   13e52:	2102      	movs	r1, #2
   13e54:	4610      	mov	r0, r2
   13e56:	4798      	blx	r3
    tx_->SetMode(PinInterface::Mode::kPullUp);
   13e58:	9b01      	ldr	r3, [sp, #4]
   13e5a:	68da      	ldr	r2, [r3, #12]
   13e5c:	9b01      	ldr	r3, [sp, #4]
   13e5e:	68db      	ldr	r3, [r3, #12]
   13e60:	681b      	ldr	r3, [r3, #0]
   13e62:	3304      	adds	r3, #4
   13e64:	681b      	ldr	r3, [r3, #0]
   13e66:	2102      	movs	r1, #2
   13e68:	4610      	mov	r0, r2
   13e6a:	4798      	blx	r3
    // Baud rate setting
    SetBaudRate(baud_rate);
   13e6c:	9900      	ldr	r1, [sp, #0]
   13e6e:	9801      	ldr	r0, [sp, #4]
   13e70:	f7ff ff4e 	bl	13d10 <Uart::SetBaudRate(unsigned long)>
    uart[channel_]->FCR |= kFIFOEnableAndReset;
   13e74:	9b01      	ldr	r3, [sp, #4]
   13e76:	7a1b      	ldrb	r3, [r3, #8]
   13e78:	461a      	mov	r2, r3
   13e7a:	4b10      	ldr	r3, [pc, #64]	; (13ebc <Uart::Initialize(unsigned long)+0xe0>)
   13e7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   13e80:	7a1b      	ldrb	r3, [r3, #8]
   13e82:	b2da      	uxtb	r2, r3
   13e84:	9b01      	ldr	r3, [sp, #4]
   13e86:	7a1b      	ldrb	r3, [r3, #8]
   13e88:	4619      	mov	r1, r3
   13e8a:	4b0c      	ldr	r3, [pc, #48]	; (13ebc <Uart::Initialize(unsigned long)+0xe0>)
   13e8c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   13e90:	f042 0207 	orr.w	r2, r2, #7
   13e94:	b2d2      	uxtb	r2, r2
   13e96:	721a      	strb	r2, [r3, #8]
    return true;
   13e98:	2401      	movs	r4, #1
   13e9a:	462b      	mov	r3, r5
   13e9c:	4619      	mov	r1, r3
   13e9e:	4803      	ldr	r0, [pc, #12]	; (13eac <Uart::Initialize(unsigned long)+0xd0>)
   13ea0:	f001 f8c2 	bl	15028 <__cyg_profile_func_exit>
   13ea4:	4623      	mov	r3, r4
  }
   13ea6:	4618      	mov	r0, r3
   13ea8:	b005      	add	sp, #20
   13eaa:	bd30      	pop	{r4, r5, pc}
   13eac:	00013ddd 	.word	0x00013ddd
   13eb0:	00019684 	.word	0x00019684
   13eb4:	00019680 	.word	0x00019680
   13eb8:	0001967c 	.word	0x0001967c
   13ebc:	10000770 	.word	0x10000770

00013ec0 <Uart::Send(unsigned char)::{lambda()#1}::operator()() const>:

  void Send(uint8_t data) override
  {
    uart[channel_]->THR              = data;
    auto wait_for_transfer_to_finish = [this]() -> bool {
   13ec0:	b530      	push	{r4, r5, lr}
   13ec2:	b083      	sub	sp, #12
   13ec4:	4675      	mov	r5, lr
   13ec6:	9001      	str	r0, [sp, #4]
   13ec8:	462b      	mov	r3, r5
   13eca:	4619      	mov	r1, r3
   13ecc:	480d      	ldr	r0, [pc, #52]	; (13f04 <Uart::Send(unsigned char)::{lambda()#1}::operator()() const+0x44>)
   13ece:	f001 f897 	bl	15000 <__cyg_profile_func_enter>
   13ed2:	9b01      	ldr	r3, [sp, #4]
   13ed4:	681b      	ldr	r3, [r3, #0]
      return (uart[channel_]->LSR & (1 << 5));
   13ed6:	7a1b      	ldrb	r3, [r3, #8]
   13ed8:	461a      	mov	r2, r3
   13eda:	4b0b      	ldr	r3, [pc, #44]	; (13f08 <Uart::Send(unsigned char)::{lambda()#1}::operator()() const+0x48>)
   13edc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   13ee0:	7d1b      	ldrb	r3, [r3, #20]
   13ee2:	b2db      	uxtb	r3, r3
   13ee4:	f003 0320 	and.w	r3, r3, #32
   13ee8:	2b00      	cmp	r3, #0
   13eea:	bf14      	ite	ne
   13eec:	2301      	movne	r3, #1
   13eee:	2300      	moveq	r3, #0
   13ef0:	b2dc      	uxtb	r4, r3
   13ef2:	462b      	mov	r3, r5
   13ef4:	4619      	mov	r1, r3
   13ef6:	4803      	ldr	r0, [pc, #12]	; (13f04 <Uart::Send(unsigned char)::{lambda()#1}::operator()() const+0x44>)
   13ef8:	f001 f896 	bl	15028 <__cyg_profile_func_exit>
   13efc:	4623      	mov	r3, r4
    };
   13efe:	4618      	mov	r0, r3
   13f00:	b003      	add	sp, #12
   13f02:	bd30      	pop	{r4, r5, pc}
   13f04:	00013ec1 	.word	0x00013ec1
   13f08:	10000770 	.word	0x10000770

00013f0c <Uart::Send(unsigned char)>:
  void Send(uint8_t data) override
   13f0c:	e92d 4830 	stmdb	sp!, {r4, r5, fp, lr}
   13f10:	b08a      	sub	sp, #40	; 0x28
   13f12:	4675      	mov	r5, lr
   13f14:	9001      	str	r0, [sp, #4]
   13f16:	460b      	mov	r3, r1
   13f18:	f88d 3003 	strb.w	r3, [sp, #3]
   13f1c:	462b      	mov	r3, r5
   13f1e:	4619      	mov	r1, r3
   13f20:	4831      	ldr	r0, [pc, #196]	; (13fe8 <Uart::Send(unsigned char)+0xdc>)
   13f22:	f001 f86d 	bl	15000 <__cyg_profile_func_enter>
    uart[channel_]->THR              = data;
   13f26:	9b01      	ldr	r3, [sp, #4]
   13f28:	7a1b      	ldrb	r3, [r3, #8]
   13f2a:	461a      	mov	r2, r3
   13f2c:	4b2f      	ldr	r3, [pc, #188]	; (13fec <Uart::Send(unsigned char)+0xe0>)
   13f2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   13f32:	f89d 2003 	ldrb.w	r2, [sp, #3]
   13f36:	701a      	strb	r2, [r3, #0]
    };
   13f38:	9b01      	ldr	r3, [sp, #4]
   13f3a:	9304      	str	r3, [sp, #16]
   13f3c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   13f40:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   13f44:	e9cd 3408 	strd	r3, r4, [sp, #32]
   13f48:	9b04      	ldr	r3, [sp, #16]
   13f4a:	9303      	str	r3, [sp, #12]
   13f4c:	462b      	mov	r3, r5
   13f4e:	4619      	mov	r1, r3
   13f50:	4827      	ldr	r0, [pc, #156]	; (13ff0 <Uart::Send(unsigned char)+0xe4>)
   13f52:	f001 f855 	bl	15000 <__cyg_profile_func_enter>
template <typename F>
[[gnu::always_inline]] inline Status Wait(uint64_t timeout, F is_done);
template <typename F>
inline Status Wait(uint64_t timeout, F is_done)
{
  uint64_t timeout_time = 0;
   13f56:	f04f 0300 	mov.w	r3, #0
   13f5a:	f04f 0400 	mov.w	r4, #0
   13f5e:	e9cd 3406 	strd	r3, r4, [sp, #24]
  if (timeout == kMaxWait)
   13f62:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   13f66:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
   13f6a:	bf08      	it	eq
   13f6c:	f1b3 3fff 	cmpeq.w	r3, #4294967295	; 0xffffffff
   13f70:	d106      	bne.n	13f80 <Uart::Send(unsigned char)+0x74>
  {
    timeout_time = kMaxWait;
   13f72:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   13f76:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   13f7a:	e9cd 3406 	strd	r3, r4, [sp, #24]
   13f7e:	e00b      	b.n	13f98 <Uart::Send(unsigned char)+0x8c>
  }
  else
  {
    timeout_time = Milliseconds() + timeout;
   13f80:	f7fc fdc0 	bl	10b04 <Milliseconds()>
   13f84:	460a      	mov	r2, r1
   13f86:	4601      	mov	r1, r0
   13f88:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   13f8c:	eb13 0b01 	adds.w	fp, r3, r1
   13f90:	eb44 0c02 	adc.w	ip, r4, r2
   13f94:	e9cd bc06 	strd	fp, ip, [sp, #24]
  }

  Status status = Status::kTimedOut;
   13f98:	2301      	movs	r3, #1
   13f9a:	9305      	str	r3, [sp, #20]
  while (Milliseconds() < timeout_time)
   13f9c:	f7fc fdb2 	bl	10b04 <Milliseconds()>
   13fa0:	460a      	mov	r2, r1
   13fa2:	4601      	mov	r1, r0
   13fa4:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
   13fa8:	42a2      	cmp	r2, r4
   13faa:	bf08      	it	eq
   13fac:	4299      	cmpeq	r1, r3
   13fae:	bf34      	ite	cc
   13fb0:	2301      	movcc	r3, #1
   13fb2:	2300      	movcs	r3, #0
   13fb4:	b2db      	uxtb	r3, r3
   13fb6:	2b00      	cmp	r3, #0
   13fb8:	d008      	beq.n	13fcc <Uart::Send(unsigned char)+0xc0>
  {
    if (is_done())
   13fba:	ab03      	add	r3, sp, #12
   13fbc:	4618      	mov	r0, r3
   13fbe:	f7ff ff7f 	bl	13ec0 <Uart::Send(unsigned char)::{lambda()#1}::operator()() const>
   13fc2:	4603      	mov	r3, r0
   13fc4:	2b00      	cmp	r3, #0
   13fc6:	d0e9      	beq.n	13f9c <Uart::Send(unsigned char)+0x90>
    {
      status = Status::kSuccess;
   13fc8:	2300      	movs	r3, #0
   13fca:	9305      	str	r3, [sp, #20]
   13fcc:	462b      	mov	r3, r5
   13fce:	4619      	mov	r1, r3
   13fd0:	4807      	ldr	r0, [pc, #28]	; (13ff0 <Uart::Send(unsigned char)+0xe4>)
   13fd2:	f001 f829 	bl	15028 <__cyg_profile_func_exit>
   13fd6:	462b      	mov	r3, r5
   13fd8:	4619      	mov	r1, r3
   13fda:	4803      	ldr	r0, [pc, #12]	; (13fe8 <Uart::Send(unsigned char)+0xdc>)
   13fdc:	f001 f824 	bl	15028 <__cyg_profile_func_exit>
    Wait(kMaxWait, wait_for_transfer_to_finish);
  }
   13fe0:	bf00      	nop
   13fe2:	b00a      	add	sp, #40	; 0x28
   13fe4:	e8bd 8830 	ldmia.w	sp!, {r4, r5, fp, pc}
   13fe8:	00013f0d 	.word	0x00013f0d
   13fec:	10000770 	.word	0x10000770
   13ff0:	00014809 	.word	0x00014809

00013ff4 <Uart::Receive(unsigned long)::{lambda()#1}::operator()() const>:

  uint8_t Receive([[maybe_unused]] uint32_t timeout = 0x7FFFFFFF) override
  {
    uint8_t receiver   = '\xFF';
    auto byte_recieved = [this]() -> bool {
   13ff4:	b530      	push	{r4, r5, lr}
   13ff6:	b083      	sub	sp, #12
   13ff8:	4675      	mov	r5, lr
   13ffa:	9001      	str	r0, [sp, #4]
   13ffc:	462b      	mov	r3, r5
   13ffe:	4619      	mov	r1, r3
   14000:	480d      	ldr	r0, [pc, #52]	; (14038 <Uart::Receive(unsigned long)::{lambda()#1}::operator()() const+0x44>)
   14002:	f000 fffd 	bl	15000 <__cyg_profile_func_enter>
   14006:	9b01      	ldr	r3, [sp, #4]
   14008:	681b      	ldr	r3, [r3, #0]
      return (uart[channel_]->LSR & (1 << 0));
   1400a:	7a1b      	ldrb	r3, [r3, #8]
   1400c:	461a      	mov	r2, r3
   1400e:	4b0b      	ldr	r3, [pc, #44]	; (1403c <Uart::Receive(unsigned long)::{lambda()#1}::operator()() const+0x48>)
   14010:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   14014:	7d1b      	ldrb	r3, [r3, #20]
   14016:	b2db      	uxtb	r3, r3
   14018:	f003 0301 	and.w	r3, r3, #1
   1401c:	2b00      	cmp	r3, #0
   1401e:	bf14      	ite	ne
   14020:	2301      	movne	r3, #1
   14022:	2300      	moveq	r3, #0
   14024:	b2dc      	uxtb	r4, r3
   14026:	462b      	mov	r3, r5
   14028:	4619      	mov	r1, r3
   1402a:	4803      	ldr	r0, [pc, #12]	; (14038 <Uart::Receive(unsigned long)::{lambda()#1}::operator()() const+0x44>)
   1402c:	f000 fffc 	bl	15028 <__cyg_profile_func_exit>
   14030:	4623      	mov	r3, r4
    };
   14032:	4618      	mov	r0, r3
   14034:	b003      	add	sp, #12
   14036:	bd30      	pop	{r4, r5, pc}
   14038:	00013ff5 	.word	0x00013ff5
   1403c:	10000770 	.word	0x10000770

00014040 <Uart::Receive(unsigned long)>:
  uint8_t Receive([[maybe_unused]] uint32_t timeout = 0x7FFFFFFF) override
   14040:	e92d 4830 	stmdb	sp!, {r4, r5, fp, lr}
   14044:	b08c      	sub	sp, #48	; 0x30
   14046:	4675      	mov	r5, lr
   14048:	9001      	str	r0, [sp, #4]
   1404a:	9100      	str	r1, [sp, #0]
   1404c:	462b      	mov	r3, r5
   1404e:	4619      	mov	r1, r3
   14050:	4836      	ldr	r0, [pc, #216]	; (1412c <Uart::Receive(unsigned long)+0xec>)
   14052:	f000 ffd5 	bl	15000 <__cyg_profile_func_enter>
    uint8_t receiver   = '\xFF';
   14056:	23ff      	movs	r3, #255	; 0xff
   14058:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
    };
   1405c:	9b01      	ldr	r3, [sp, #4]
   1405e:	9304      	str	r3, [sp, #16]

    Status status = Wait(timeout, byte_recieved);
   14060:	9b00      	ldr	r3, [sp, #0]
   14062:	f04f 0400 	mov.w	r4, #0
   14066:	e9cd 3408 	strd	r3, r4, [sp, #32]
   1406a:	9b04      	ldr	r3, [sp, #16]
   1406c:	9303      	str	r3, [sp, #12]
   1406e:	462b      	mov	r3, r5
   14070:	4619      	mov	r1, r3
   14072:	482f      	ldr	r0, [pc, #188]	; (14130 <Uart::Receive(unsigned long)+0xf0>)
   14074:	f000 ffc4 	bl	15000 <__cyg_profile_func_enter>
  uint64_t timeout_time = 0;
   14078:	f04f 0300 	mov.w	r3, #0
   1407c:	f04f 0400 	mov.w	r4, #0
   14080:	e9cd 3406 	strd	r3, r4, [sp, #24]
  if (timeout == kMaxWait)
   14084:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   14088:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
   1408c:	bf08      	it	eq
   1408e:	f1b3 3fff 	cmpeq.w	r3, #4294967295	; 0xffffffff
   14092:	d106      	bne.n	140a2 <Uart::Receive(unsigned long)+0x62>
    timeout_time = kMaxWait;
   14094:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   14098:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   1409c:	e9cd 3406 	strd	r3, r4, [sp, #24]
   140a0:	e00b      	b.n	140ba <Uart::Receive(unsigned long)+0x7a>
    timeout_time = Milliseconds() + timeout;
   140a2:	f7fc fd2f 	bl	10b04 <Milliseconds()>
   140a6:	460a      	mov	r2, r1
   140a8:	4601      	mov	r1, r0
   140aa:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   140ae:	eb13 0b01 	adds.w	fp, r3, r1
   140b2:	eb44 0c02 	adc.w	ip, r4, r2
   140b6:	e9cd bc06 	strd	fp, ip, [sp, #24]
  Status status = Status::kTimedOut;
   140ba:	2301      	movs	r3, #1
   140bc:	9305      	str	r3, [sp, #20]
  while (Milliseconds() < timeout_time)
   140be:	f7fc fd21 	bl	10b04 <Milliseconds()>
   140c2:	460a      	mov	r2, r1
   140c4:	4601      	mov	r1, r0
   140c6:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
   140ca:	42a2      	cmp	r2, r4
   140cc:	bf08      	it	eq
   140ce:	4299      	cmpeq	r1, r3
   140d0:	bf34      	ite	cc
   140d2:	2301      	movcc	r3, #1
   140d4:	2300      	movcs	r3, #0
   140d6:	b2db      	uxtb	r3, r3
   140d8:	2b00      	cmp	r3, #0
   140da:	d008      	beq.n	140ee <Uart::Receive(unsigned long)+0xae>
    if (is_done())
   140dc:	ab03      	add	r3, sp, #12
   140de:	4618      	mov	r0, r3
   140e0:	f7ff ff88 	bl	13ff4 <Uart::Receive(unsigned long)::{lambda()#1}::operator()() const>
   140e4:	4603      	mov	r3, r0
   140e6:	2b00      	cmp	r3, #0
   140e8:	d0e9      	beq.n	140be <Uart::Receive(unsigned long)+0x7e>
      status = Status::kSuccess;
   140ea:	2300      	movs	r3, #0
   140ec:	9305      	str	r3, [sp, #20]
      break;
    }
  }
  return status;
   140ee:	9c05      	ldr	r4, [sp, #20]
   140f0:	462b      	mov	r3, r5
   140f2:	4619      	mov	r1, r3
   140f4:	480e      	ldr	r0, [pc, #56]	; (14130 <Uart::Receive(unsigned long)+0xf0>)
   140f6:	f000 ff97 	bl	15028 <__cyg_profile_func_exit>
   140fa:	940a      	str	r4, [sp, #40]	; 0x28

    if (status == Status::kSuccess)
   140fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   140fe:	2b00      	cmp	r3, #0
   14100:	d108      	bne.n	14114 <Uart::Receive(unsigned long)+0xd4>
    {
      receiver = static_cast<uint8_t>(uart[channel_]->RBR);
   14102:	9b01      	ldr	r3, [sp, #4]
   14104:	7a1b      	ldrb	r3, [r3, #8]
   14106:	461a      	mov	r2, r3
   14108:	4b0a      	ldr	r3, [pc, #40]	; (14134 <Uart::Receive(unsigned long)+0xf4>)
   1410a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   1410e:	781b      	ldrb	r3, [r3, #0]
   14110:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
    }
    return receiver;
   14114:	f89d 402f 	ldrb.w	r4, [sp, #47]	; 0x2f
   14118:	462b      	mov	r3, r5
   1411a:	4619      	mov	r1, r3
   1411c:	4803      	ldr	r0, [pc, #12]	; (1412c <Uart::Receive(unsigned long)+0xec>)
   1411e:	f000 ff83 	bl	15028 <__cyg_profile_func_exit>
   14122:	4623      	mov	r3, r4
  }
   14124:	4618      	mov	r0, r3
   14126:	b00c      	add	sp, #48	; 0x30
   14128:	e8bd 8830 	ldmia.w	sp!, {r4, r5, fp, pc}
   1412c:	00014041 	.word	0x00014041
   14130:	000148b1 	.word	0x000148b1
   14134:	10000770 	.word	0x10000770

00014138 <Uart::FindClosestFractional(float)>:

 private:
  UartCalibration_t FindClosestFractional(float decimal)
   14138:	b510      	push	{r4, lr}
   1413a:	b08a      	sub	sp, #40	; 0x28
   1413c:	4674      	mov	r4, lr
   1413e:	9003      	str	r0, [sp, #12]
   14140:	9102      	str	r1, [sp, #8]
   14142:	ed8d 0a01 	vstr	s0, [sp, #4]
   14146:	4623      	mov	r3, r4
   14148:	4619      	mov	r1, r3
   1414a:	4838      	ldr	r0, [pc, #224]	; (1422c <Uart::FindClosestFractional(float)+0xf4>)
   1414c:	f000 ff58 	bl	15000 <__cyg_profile_func_enter>
  {
    UartCalibration_t result;
   14150:	9b03      	ldr	r3, [sp, #12]
   14152:	2200      	movs	r2, #0
   14154:	601a      	str	r2, [r3, #0]
   14156:	9b03      	ldr	r3, [sp, #12]
   14158:	2200      	movs	r2, #0
   1415a:	605a      	str	r2, [r3, #4]
   1415c:	9b03      	ldr	r3, [sp, #12]
   1415e:	2201      	movs	r2, #1
   14160:	609a      	str	r2, [r3, #8]
    bool finished = false;
   14162:	2300      	movs	r3, #0
   14164:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    for (int div = 0; div < 15 && !finished; div++)
   14168:	2300      	movs	r3, #0
   1416a:	9308      	str	r3, [sp, #32]
   1416c:	9b08      	ldr	r3, [sp, #32]
   1416e:	2b0e      	cmp	r3, #14
   14170:	dc52      	bgt.n	14218 <Uart::FindClosestFractional(float)+0xe0>
   14172:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   14176:	2b00      	cmp	r3, #0
   14178:	d14e      	bne.n	14218 <Uart::FindClosestFractional(float)+0xe0>
    {
      for (int mul = div + 1; mul < 15 && !finished; mul++)
   1417a:	9b08      	ldr	r3, [sp, #32]
   1417c:	3301      	adds	r3, #1
   1417e:	9307      	str	r3, [sp, #28]
   14180:	9b07      	ldr	r3, [sp, #28]
   14182:	2b0e      	cmp	r3, #14
   14184:	dc44      	bgt.n	14210 <Uart::FindClosestFractional(float)+0xd8>
   14186:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   1418a:	2b00      	cmp	r3, #0
   1418c:	d140      	bne.n	14210 <Uart::FindClosestFractional(float)+0xd8>
      {
        float divf         = static_cast<float>(div);
   1418e:	9b08      	ldr	r3, [sp, #32]
   14190:	ee07 3a90 	vmov	s15, r3
   14194:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   14198:	edcd 7a06 	vstr	s15, [sp, #24]
        float mulf         = static_cast<float>(mul);
   1419c:	9b07      	ldr	r3, [sp, #28]
   1419e:	ee07 3a90 	vmov	s15, r3
   141a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   141a6:	edcd 7a05 	vstr	s15, [sp, #20]
        float test_decimal = 1.0f + divf / mulf;
   141aa:	eddd 6a06 	vldr	s13, [sp, #24]
   141ae:	ed9d 7a05 	vldr	s14, [sp, #20]
   141b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
   141b6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
   141ba:	ee77 7a87 	vadd.f32	s15, s15, s14
   141be:	edcd 7a04 	vstr	s15, [sp, #16]
        if (decimal <= test_decimal + kThreshold &&
   141c2:	eddd 7a04 	vldr	s15, [sp, #16]
   141c6:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 14230 <Uart::FindClosestFractional(float)+0xf8>
   141ca:	ee77 7a87 	vadd.f32	s15, s15, s14
   141ce:	ed9d 7a01 	vldr	s14, [sp, #4]
   141d2:	eeb4 7ae7 	vcmpe.f32	s14, s15
   141d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   141da:	d815      	bhi.n	14208 <Uart::FindClosestFractional(float)+0xd0>
            decimal >= test_decimal - kThreshold)
   141dc:	eddd 7a04 	vldr	s15, [sp, #16]
   141e0:	ed9f 7a13 	vldr	s14, [pc, #76]	; 14230 <Uart::FindClosestFractional(float)+0xf8>
   141e4:	ee77 7ac7 	vsub.f32	s15, s15, s14
        if (decimal <= test_decimal + kThreshold &&
   141e8:	ed9d 7a01 	vldr	s14, [sp, #4]
   141ec:	eeb4 7ae7 	vcmpe.f32	s14, s15
   141f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   141f4:	db08      	blt.n	14208 <Uart::FindClosestFractional(float)+0xd0>
        {
          result.divide_add = div;
   141f6:	9a08      	ldr	r2, [sp, #32]
   141f8:	9b03      	ldr	r3, [sp, #12]
   141fa:	605a      	str	r2, [r3, #4]
          result.multiply   = mul;
   141fc:	9a07      	ldr	r2, [sp, #28]
   141fe:	9b03      	ldr	r3, [sp, #12]
   14200:	609a      	str	r2, [r3, #8]
          finished          = true;
   14202:	2301      	movs	r3, #1
   14204:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
      for (int mul = div + 1; mul < 15 && !finished; mul++)
   14208:	9b07      	ldr	r3, [sp, #28]
   1420a:	3301      	adds	r3, #1
   1420c:	9307      	str	r3, [sp, #28]
   1420e:	e7b7      	b.n	14180 <Uart::FindClosestFractional(float)+0x48>
    for (int div = 0; div < 15 && !finished; div++)
   14210:	9b08      	ldr	r3, [sp, #32]
   14212:	3301      	adds	r3, #1
   14214:	9308      	str	r3, [sp, #32]
   14216:	e7a9      	b.n	1416c <Uart::FindClosestFractional(float)+0x34>
        }
      }
    }
    return result;
   14218:	bf00      	nop
   1421a:	4623      	mov	r3, r4
   1421c:	4619      	mov	r1, r3
   1421e:	4803      	ldr	r0, [pc, #12]	; (1422c <Uart::FindClosestFractional(float)+0xf4>)
   14220:	f000 ff02 	bl	15028 <__cyg_profile_func_exit>
   14224:	bf00      	nop
  }
   14226:	9803      	ldr	r0, [sp, #12]
   14228:	b00a      	add	sp, #40	; 0x28
   1422a:	bd10      	pop	{r4, pc}
   1422c:	00014139 	.word	0x00014139
   14230:	3d4ccccd 	.word	0x3d4ccccd

00014234 <Uart::DividerEstimate(float, float)>:

  float DividerEstimate(float baud_rate, float fraction_estimate = 1)
   14234:	b510      	push	{r4, lr}
   14236:	ed2d 8b02 	vpush	{d8}
   1423a:	b086      	sub	sp, #24
   1423c:	4674      	mov	r4, lr
   1423e:	9003      	str	r0, [sp, #12]
   14240:	ed8d 0a02 	vstr	s0, [sp, #8]
   14244:	edcd 0a01 	vstr	s1, [sp, #4]
   14248:	4623      	mov	r3, r4
   1424a:	4619      	mov	r1, r3
   1424c:	4815      	ldr	r0, [pc, #84]	; (142a4 <Uart::DividerEstimate(float, float)+0x70>)
   1424e:	f000 fed7 	bl	15000 <__cyg_profile_func_enter>
  {
    float clock_frequency = static_cast<float>(GetPeripheralFrequency());
   14252:	9b03      	ldr	r3, [sp, #12]
   14254:	1d1a      	adds	r2, r3, #4
   14256:	9b03      	ldr	r3, [sp, #12]
   14258:	685b      	ldr	r3, [r3, #4]
   1425a:	3310      	adds	r3, #16
   1425c:	681b      	ldr	r3, [r3, #0]
   1425e:	4610      	mov	r0, r2
   14260:	4798      	blx	r3
   14262:	ee07 0a90 	vmov	s15, r0
   14266:	eef8 7a67 	vcvt.f32.u32	s15, s15
   1426a:	edcd 7a05 	vstr	s15, [sp, #20]
    return clock_frequency / (16.0f * baud_rate * fraction_estimate);
   1426e:	eddd 7a02 	vldr	s15, [sp, #8]
   14272:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
   14276:	ee27 7a87 	vmul.f32	s14, s15, s14
   1427a:	eddd 7a01 	vldr	s15, [sp, #4]
   1427e:	ee67 7a27 	vmul.f32	s15, s14, s15
   14282:	ed9d 7a05 	vldr	s14, [sp, #20]
   14286:	ee87 8a27 	vdiv.f32	s16, s14, s15
   1428a:	4623      	mov	r3, r4
   1428c:	4619      	mov	r1, r3
   1428e:	4805      	ldr	r0, [pc, #20]	; (142a4 <Uart::DividerEstimate(float, float)+0x70>)
   14290:	f000 feca 	bl	15028 <__cyg_profile_func_exit>
   14294:	eef0 7a48 	vmov.f32	s15, s16
  }
   14298:	eeb0 0a67 	vmov.f32	s0, s15
   1429c:	b006      	add	sp, #24
   1429e:	ecbd 8b02 	vpop	{d8}
   142a2:	bd10      	pop	{r4, pc}
   142a4:	00014235 	.word	0x00014235

000142a8 <Uart::FractionalEstimate(float, float)>:

  float FractionalEstimate(float baud_rate, float divider)
   142a8:	b510      	push	{r4, lr}
   142aa:	ed2d 8b02 	vpush	{d8}
   142ae:	b086      	sub	sp, #24
   142b0:	4674      	mov	r4, lr
   142b2:	9003      	str	r0, [sp, #12]
   142b4:	ed8d 0a02 	vstr	s0, [sp, #8]
   142b8:	edcd 0a01 	vstr	s1, [sp, #4]
   142bc:	4623      	mov	r3, r4
   142be:	4619      	mov	r1, r3
   142c0:	4815      	ldr	r0, [pc, #84]	; (14318 <Uart::FractionalEstimate(float, float)+0x70>)
   142c2:	f000 fe9d 	bl	15000 <__cyg_profile_func_enter>
  {
    float clock_frequency = static_cast<float>(GetPeripheralFrequency());
   142c6:	9b03      	ldr	r3, [sp, #12]
   142c8:	1d1a      	adds	r2, r3, #4
   142ca:	9b03      	ldr	r3, [sp, #12]
   142cc:	685b      	ldr	r3, [r3, #4]
   142ce:	3310      	adds	r3, #16
   142d0:	681b      	ldr	r3, [r3, #0]
   142d2:	4610      	mov	r0, r2
   142d4:	4798      	blx	r3
   142d6:	ee07 0a90 	vmov	s15, r0
   142da:	eef8 7a67 	vcvt.f32.u32	s15, s15
   142de:	edcd 7a05 	vstr	s15, [sp, #20]
    return clock_frequency / (16.0f * baud_rate * divider);
   142e2:	eddd 7a02 	vldr	s15, [sp, #8]
   142e6:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
   142ea:	ee27 7a87 	vmul.f32	s14, s15, s14
   142ee:	eddd 7a01 	vldr	s15, [sp, #4]
   142f2:	ee67 7a27 	vmul.f32	s15, s14, s15
   142f6:	ed9d 7a05 	vldr	s14, [sp, #20]
   142fa:	ee87 8a27 	vdiv.f32	s16, s14, s15
   142fe:	4623      	mov	r3, r4
   14300:	4619      	mov	r1, r3
   14302:	4805      	ldr	r0, [pc, #20]	; (14318 <Uart::FractionalEstimate(float, float)+0x70>)
   14304:	f000 fe90 	bl	15028 <__cyg_profile_func_exit>
   14308:	eef0 7a48 	vmov.f32	s15, s16
  }
   1430c:	eeb0 0a67 	vmov.f32	s0, s15
   14310:	b006      	add	sp, #24
   14312:	ecbd 8b02 	vpop	{d8}
   14316:	bd10      	pop	{r4, pc}
   14318:	000142a9 	.word	0x000142a9

0001431c <Uart::IsDecmial(float)>:

  bool IsDecmial(float value)
   1431c:	b530      	push	{r4, r5, lr}
   1431e:	b087      	sub	sp, #28
   14320:	4675      	mov	r5, lr
   14322:	9001      	str	r0, [sp, #4]
   14324:	ed8d 0a00 	vstr	s0, [sp]
   14328:	462b      	mov	r3, r5
   1432a:	4619      	mov	r1, r3
   1432c:	4819      	ldr	r0, [pc, #100]	; (14394 <Uart::IsDecmial(float)+0x78>)
   1432e:	f000 fe67 	bl	15000 <__cyg_profile_func_enter>
  {
    bool result         = false;
   14332:	2300      	movs	r3, #0
   14334:	f88d 3017 	strb.w	r3, [sp, #23]
    float rounded_value = roundf(value);
   14338:	ed9d 0a00 	vldr	s0, [sp]
   1433c:	f003 fbda 	bl	17af4 <roundf>
   14340:	ed8d 0a04 	vstr	s0, [sp, #16]
    float error         = value - rounded_value;
   14344:	ed9d 7a00 	vldr	s14, [sp]
   14348:	eddd 7a04 	vldr	s15, [sp, #16]
   1434c:	ee77 7a67 	vsub.f32	s15, s14, s15
   14350:	edcd 7a03 	vstr	s15, [sp, #12]
    if (-kThreshold <= error && error <= kThreshold)
   14354:	eddd 7a03 	vldr	s15, [sp, #12]
   14358:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 14398 <Uart::IsDecmial(float)+0x7c>
   1435c:	eef4 7ac7 	vcmpe.f32	s15, s14
   14360:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   14364:	db0b      	blt.n	1437e <Uart::IsDecmial(float)+0x62>
   14366:	eddd 7a03 	vldr	s15, [sp, #12]
   1436a:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 1439c <Uart::IsDecmial(float)+0x80>
   1436e:	eef4 7ac7 	vcmpe.f32	s15, s14
   14372:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   14376:	d802      	bhi.n	1437e <Uart::IsDecmial(float)+0x62>
    {
      result = true;
   14378:	2301      	movs	r3, #1
   1437a:	f88d 3017 	strb.w	r3, [sp, #23]
    }
    return result;
   1437e:	f89d 4017 	ldrb.w	r4, [sp, #23]
   14382:	462b      	mov	r3, r5
   14384:	4619      	mov	r1, r3
   14386:	4803      	ldr	r0, [pc, #12]	; (14394 <Uart::IsDecmial(float)+0x78>)
   14388:	f000 fe4e 	bl	15028 <__cyg_profile_func_exit>
   1438c:	4623      	mov	r3, r4
  }
   1438e:	4618      	mov	r0, r3
   14390:	b007      	add	sp, #28
   14392:	bd30      	pop	{r4, r5, pc}
   14394:	0001431d 	.word	0x0001431d
   14398:	bd4ccccd 	.word	0xbd4ccccd
   1439c:	3d4ccccd 	.word	0x3d4ccccd

000143a0 <Uart::GenerateUartCalibration(float)>:

  UartCalibration_t GenerateUartCalibration(float baud_rate)
   143a0:	b530      	push	{r4, r5, lr}
   143a2:	b08f      	sub	sp, #60	; 0x3c
   143a4:	4675      	mov	r5, lr
   143a6:	9007      	str	r0, [sp, #28]
   143a8:	9106      	str	r1, [sp, #24]
   143aa:	ed8d 0a05 	vstr	s0, [sp, #20]
   143ae:	462b      	mov	r3, r5
   143b0:	4619      	mov	r1, r3
   143b2:	4874      	ldr	r0, [pc, #464]	; (14584 <Uart::GenerateUartCalibration(float)+0x1e4>)
   143b4:	f000 fe24 	bl	15000 <__cyg_profile_func_enter>
  {
    States state = States::kCalculateIntegerDivideLatch;
   143b8:	2300      	movs	r3, #0
   143ba:	930d      	str	r3, [sp, #52]	; 0x34
    UartCalibration_t uart_calibration;
   143bc:	9b07      	ldr	r3, [sp, #28]
   143be:	2200      	movs	r2, #0
   143c0:	601a      	str	r2, [r3, #0]
   143c2:	9b07      	ldr	r3, [sp, #28]
   143c4:	2200      	movs	r2, #0
   143c6:	605a      	str	r2, [r3, #4]
   143c8:	9b07      	ldr	r3, [sp, #28]
   143ca:	2201      	movs	r2, #1
   143cc:	609a      	str	r2, [r3, #8]
    float divide_estimate = 0;
   143ce:	f04f 0300 	mov.w	r3, #0
   143d2:	930c      	str	r3, [sp, #48]	; 0x30
    float decimal         = 1.5;
   143d4:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
   143d8:	930b      	str	r3, [sp, #44]	; 0x2c
    float div             = 1;
   143da:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
   143de:	930a      	str	r3, [sp, #40]	; 0x28
    float mul             = 2;
   143e0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   143e4:	9309      	str	r3, [sp, #36]	; 0x24
    while (state != States::kDone)
   143e6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   143e8:	2b04      	cmp	r3, #4
   143ea:	f000 80c1 	beq.w	14570 <Uart::GenerateUartCalibration(float)+0x1d0>
    {
      switch (state)
   143ee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   143f0:	2b04      	cmp	r3, #4
   143f2:	f200 80bb 	bhi.w	1456c <Uart::GenerateUartCalibration(float)+0x1cc>
   143f6:	a201      	add	r2, pc, #4	; (adr r2, 143fc <Uart::GenerateUartCalibration(float)+0x5c>)
   143f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   143fc:	00014411 	.word	0x00014411
   14400:	0001446d 	.word	0x0001446d
   14404:	000144cd 	.word	0x000144cd
   14408:	0001453d 	.word	0x0001453d
   1440c:	0001456d 	.word	0x0001456d
      {
        case States::kCalculateIntegerDivideLatch:
        {
          divide_estimate = DividerEstimate(baud_rate);
   14410:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
   14414:	ed9d 0a05 	vldr	s0, [sp, #20]
   14418:	9806      	ldr	r0, [sp, #24]
   1441a:	f7ff ff0b 	bl	14234 <Uart::DividerEstimate(float, float)>
   1441e:	ed8d 0a0c 	vstr	s0, [sp, #48]	; 0x30
          if (divide_estimate < 1.0f)
   14422:	eddd 7a0c 	vldr	s15, [sp, #48]	; 0x30
   14426:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
   1442a:	eef4 7ac7 	vcmpe.f32	s15, s14
   1442e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   14432:	d505      	bpl.n	14440 <Uart::GenerateUartCalibration(float)+0xa0>
          {
            uart_calibration.divide_latch = 0;
   14434:	9b07      	ldr	r3, [sp, #28]
   14436:	2200      	movs	r2, #0
   14438:	601a      	str	r2, [r3, #0]
            state                         = States::kDone;
   1443a:	2304      	movs	r3, #4
   1443c:	930d      	str	r3, [sp, #52]	; 0x34
          }
          else
          {
            state = States::kCalculateDivideLatchWithDecimal;
          }
          break;
   1443e:	e096      	b.n	1456e <Uart::GenerateUartCalibration(float)+0x1ce>
          else if (IsDecmial(divide_estimate))
   14440:	ed9d 0a0c 	vldr	s0, [sp, #48]	; 0x30
   14444:	9806      	ldr	r0, [sp, #24]
   14446:	f7ff ff69 	bl	1431c <Uart::IsDecmial(float)>
   1444a:	4603      	mov	r3, r0
   1444c:	2b00      	cmp	r3, #0
   1444e:	d00a      	beq.n	14466 <Uart::GenerateUartCalibration(float)+0xc6>
                static_cast<uint32_t>(divide_estimate);
   14450:	eddd 7a0c 	vldr	s15, [sp, #48]	; 0x30
   14454:	eefc 7ae7 	vcvt.u32.f32	s15, s15
   14458:	ee17 2a90 	vmov	r2, s15
            uart_calibration.divide_latch =
   1445c:	9b07      	ldr	r3, [sp, #28]
   1445e:	601a      	str	r2, [r3, #0]
            state = States::kDone;
   14460:	2304      	movs	r3, #4
   14462:	930d      	str	r3, [sp, #52]	; 0x34
          break;
   14464:	e083      	b.n	1456e <Uart::GenerateUartCalibration(float)+0x1ce>
            state = States::kCalculateDivideLatchWithDecimal;
   14466:	2301      	movs	r3, #1
   14468:	930d      	str	r3, [sp, #52]	; 0x34
          break;
   1446a:	e080      	b.n	1456e <Uart::GenerateUartCalibration(float)+0x1ce>
        }
        case States::kCalculateDivideLatchWithDecimal:
        {
          divide_estimate = roundf(DividerEstimate(baud_rate, decimal));
   1446c:	eddd 0a0b 	vldr	s1, [sp, #44]	; 0x2c
   14470:	ed9d 0a05 	vldr	s0, [sp, #20]
   14474:	9806      	ldr	r0, [sp, #24]
   14476:	f7ff fedd 	bl	14234 <Uart::DividerEstimate(float, float)>
   1447a:	eef0 7a40 	vmov.f32	s15, s0
   1447e:	eeb0 0a67 	vmov.f32	s0, s15
   14482:	f003 fb37 	bl	17af4 <roundf>
   14486:	ed8d 0a0c 	vstr	s0, [sp, #48]	; 0x30
          decimal         = FractionalEstimate(baud_rate, divide_estimate);
   1448a:	eddd 0a0c 	vldr	s1, [sp, #48]	; 0x30
   1448e:	ed9d 0a05 	vldr	s0, [sp, #20]
   14492:	9806      	ldr	r0, [sp, #24]
   14494:	f7ff ff08 	bl	142a8 <Uart::FractionalEstimate(float, float)>
   14498:	ed8d 0a0b 	vstr	s0, [sp, #44]	; 0x2c
          if (1.1f <= decimal && decimal <= 1.9f)
   1449c:	eddd 7a0b 	vldr	s15, [sp, #44]	; 0x2c
   144a0:	ed9f 7a39 	vldr	s14, [pc, #228]	; 14588 <Uart::GenerateUartCalibration(float)+0x1e8>
   144a4:	eef4 7ac7 	vcmpe.f32	s15, s14
   144a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   144ac:	db0b      	blt.n	144c6 <Uart::GenerateUartCalibration(float)+0x126>
   144ae:	eddd 7a0b 	vldr	s15, [sp, #44]	; 0x2c
   144b2:	ed9f 7a36 	vldr	s14, [pc, #216]	; 1458c <Uart::GenerateUartCalibration(float)+0x1ec>
   144b6:	eef4 7ac7 	vcmpe.f32	s15, s14
   144ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   144be:	d802      	bhi.n	144c6 <Uart::GenerateUartCalibration(float)+0x126>
          {
            state = States::kGenerateFractionFromDecimal;
   144c0:	2303      	movs	r3, #3
   144c2:	930d      	str	r3, [sp, #52]	; 0x34
          }
          else
          {
            state = States::kDecimalFailedGenerateNewDecimal;
          }
          break;
   144c4:	e053      	b.n	1456e <Uart::GenerateUartCalibration(float)+0x1ce>
            state = States::kDecimalFailedGenerateNewDecimal;
   144c6:	2302      	movs	r3, #2
   144c8:	930d      	str	r3, [sp, #52]	; 0x34
          break;
   144ca:	e050      	b.n	1456e <Uart::GenerateUartCalibration(float)+0x1ce>
        }
        case States::kDecimalFailedGenerateNewDecimal:
        {
          mul += 1;
   144cc:	eddd 7a09 	vldr	s15, [sp, #36]	; 0x24
   144d0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
   144d4:	ee77 7a87 	vadd.f32	s15, s15, s14
   144d8:	edcd 7a09 	vstr	s15, [sp, #36]	; 0x24

          if (div > 15)
   144dc:	eddd 7a0a 	vldr	s15, [sp, #40]	; 0x28
   144e0:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
   144e4:	eef4 7ac7 	vcmpe.f32	s15, s14
   144e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   144ec:	dd02      	ble.n	144f4 <Uart::GenerateUartCalibration(float)+0x154>
          {
            state = States::kDone;
   144ee:	2304      	movs	r3, #4
   144f0:	930d      	str	r3, [sp, #52]	; 0x34
            break;
   144f2:	e03c      	b.n	1456e <Uart::GenerateUartCalibration(float)+0x1ce>
          }
          else if (mul > 15)
   144f4:	eddd 7a09 	vldr	s15, [sp, #36]	; 0x24
   144f8:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
   144fc:	eef4 7ac7 	vcmpe.f32	s15, s14
   14500:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   14504:	dd0f      	ble.n	14526 <Uart::GenerateUartCalibration(float)+0x186>
          {
            div += 1;
   14506:	eddd 7a0a 	vldr	s15, [sp, #40]	; 0x28
   1450a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
   1450e:	ee77 7a87 	vadd.f32	s15, s15, s14
   14512:	edcd 7a0a 	vstr	s15, [sp, #40]	; 0x28
            mul = div + 1;
   14516:	eddd 7a0a 	vldr	s15, [sp, #40]	; 0x28
   1451a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
   1451e:	ee77 7a87 	vadd.f32	s15, s15, s14
   14522:	edcd 7a09 	vstr	s15, [sp, #36]	; 0x24
          }
          decimal = div / mul;
   14526:	eddd 6a0a 	vldr	s13, [sp, #40]	; 0x28
   1452a:	ed9d 7a09 	vldr	s14, [sp, #36]	; 0x24
   1452e:	eec6 7a87 	vdiv.f32	s15, s13, s14
   14532:	edcd 7a0b 	vstr	s15, [sp, #44]	; 0x2c
          state   = States::kCalculateDivideLatchWithDecimal;
   14536:	2301      	movs	r3, #1
   14538:	930d      	str	r3, [sp, #52]	; 0x34
          break;
   1453a:	e018      	b.n	1456e <Uart::GenerateUartCalibration(float)+0x1ce>
        }
        case States::kGenerateFractionFromDecimal:
        {
          uart_calibration = FindClosestFractional(decimal);
   1453c:	9c07      	ldr	r4, [sp, #28]
   1453e:	466b      	mov	r3, sp
   14540:	ed9d 0a0b 	vldr	s0, [sp, #44]	; 0x2c
   14544:	9906      	ldr	r1, [sp, #24]
   14546:	4618      	mov	r0, r3
   14548:	f7ff fdf6 	bl	14138 <Uart::FindClosestFractional(float)>
   1454c:	466b      	mov	r3, sp
   1454e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   14552:	e884 0007 	stmia.w	r4, {r0, r1, r2}
          uart_calibration.divide_latch =
              static_cast<uint32_t>(divide_estimate);
   14556:	eddd 7a0c 	vldr	s15, [sp, #48]	; 0x30
   1455a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
   1455e:	ee17 2a90 	vmov	r2, s15
          uart_calibration.divide_latch =
   14562:	9b07      	ldr	r3, [sp, #28]
   14564:	601a      	str	r2, [r3, #0]
          state = States::kDone;
   14566:	2304      	movs	r3, #4
   14568:	930d      	str	r3, [sp, #52]	; 0x34
          break;
   1456a:	e000      	b.n	1456e <Uart::GenerateUartCalibration(float)+0x1ce>
        }
        case States::kDone: { break;
        }
        default: { break;
   1456c:	bf00      	nop
    while (state != States::kDone)
   1456e:	e73a      	b.n	143e6 <Uart::GenerateUartCalibration(float)+0x46>
        }
      }
    }
    return uart_calibration;
   14570:	bf00      	nop
   14572:	462b      	mov	r3, r5
   14574:	4619      	mov	r1, r3
   14576:	4803      	ldr	r0, [pc, #12]	; (14584 <Uart::GenerateUartCalibration(float)+0x1e4>)
   14578:	f000 fd56 	bl	15028 <__cyg_profile_func_exit>
   1457c:	bf00      	nop
  }
   1457e:	9807      	ldr	r0, [sp, #28]
   14580:	b00f      	add	sp, #60	; 0x3c
   14582:	bd30      	pop	{r4, r5, pc}
   14584:	000143a1 	.word	0x000143a1
   14588:	3f8ccccd 	.word	0x3f8ccccd
   1458c:	3ff33333 	.word	0x3ff33333

00014590 <(anonymous namespace)::Lpc40xxUptime()>:
{
   14590:	b538      	push	{r3, r4, r5, lr}
   14592:	4675      	mov	r5, lr
   14594:	462b      	mov	r3, r5
   14596:	4619      	mov	r1, r3
   14598:	480a      	ldr	r0, [pc, #40]	; (145c4 <(anonymous namespace)::Lpc40xxUptime()+0x34>)
   1459a:	f000 fd31 	bl	15000 <__cyg_profile_func_enter>
    return tim_register[channel_]->TC;
   1459e:	4b0a      	ldr	r3, [pc, #40]	; (145c8 <(anonymous namespace)::Lpc40xxUptime()+0x38>)
   145a0:	7a1b      	ldrb	r3, [r3, #8]
   145a2:	461a      	mov	r2, r3
   145a4:	4b09      	ldr	r3, [pc, #36]	; (145cc <(anonymous namespace)::Lpc40xxUptime()+0x3c>)
   145a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   145aa:	689c      	ldr	r4, [r3, #8]
   145ac:	462b      	mov	r3, r5
   145ae:	4619      	mov	r1, r3
   145b0:	4804      	ldr	r0, [pc, #16]	; (145c4 <(anonymous namespace)::Lpc40xxUptime()+0x34>)
   145b2:	f000 fd39 	bl	15028 <__cyg_profile_func_exit>
  return timer0.GetTimer();
   145b6:	4623      	mov	r3, r4
   145b8:	f04f 0400 	mov.w	r4, #0
}
   145bc:	4618      	mov	r0, r3
   145be:	4621      	mov	r1, r4
   145c0:	bd38      	pop	{r3, r4, r5, pc}
   145c2:	bf00      	nop
   145c4:	00013cd5 	.word	0x00013cd5
   145c8:	100007e0 	.word	0x100007e0
   145cc:	10000760 	.word	0x10000760

000145d0 <UptimeRTOS>:
{
   145d0:	b538      	push	{r3, r4, r5, lr}
   145d2:	4675      	mov	r5, lr
   145d4:	462b      	mov	r3, r5
   145d6:	4619      	mov	r1, r3
   145d8:	480a      	ldr	r0, [pc, #40]	; (14604 <UptimeRTOS+0x34>)
   145da:	f000 fd11 	bl	15000 <__cyg_profile_func_enter>
   145de:	4b0a      	ldr	r3, [pc, #40]	; (14608 <UptimeRTOS+0x38>)
   145e0:	7a1b      	ldrb	r3, [r3, #8]
   145e2:	461a      	mov	r2, r3
   145e4:	4b09      	ldr	r3, [pc, #36]	; (1460c <UptimeRTOS+0x3c>)
   145e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   145ea:	689c      	ldr	r4, [r3, #8]
   145ec:	462b      	mov	r3, r5
   145ee:	4619      	mov	r1, r3
   145f0:	4804      	ldr	r0, [pc, #16]	; (14604 <UptimeRTOS+0x34>)
   145f2:	f000 fd19 	bl	15028 <__cyg_profile_func_exit>
  return timer0.GetTimer();
   145f6:	4623      	mov	r3, r4
   145f8:	f04f 0400 	mov.w	r4, #0
}
   145fc:	4618      	mov	r0, r3
   145fe:	4621      	mov	r1, r4
   14600:	bd38      	pop	{r3, r4, r5, pc}
   14602:	bf00      	nop
   14604:	00013cd5 	.word	0x00013cd5
   14608:	100007e0 	.word	0x100007e0
   1460c:	10000760 	.word	0x10000760

00014610 <LowLevelInit()>:

void LowLevelInit()
{
   14610:	b500      	push	{lr}
   14612:	b083      	sub	sp, #12
  // Set the SystemTick frequency to the RTOS tick frequency
  // It is critical that this happens before you set the system_clock, since
  // The system_timer keeps the time that the system_clock uses to delay itself.
  system_timer.SetTickFrequency(config::kRtosFrequency);
   14614:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   14618:	4822      	ldr	r0, [pc, #136]	; (146a4 <LowLevelInit()+0x94>)
   1461a:	f7ff f9bb 	bl	13994 <SystemTimer::SetTickFrequency(unsigned long)>
  bool timer_started_successfully = system_timer.StartTimer();
   1461e:	4821      	ldr	r0, [pc, #132]	; (146a4 <LowLevelInit()+0x94>)
   14620:	f7ff f96a 	bl	138f8 <SystemTimer::StartTimer()>
   14624:	4603      	mov	r3, r0
   14626:	f88d 3007 	strb.w	r3, [sp, #7]
  SJ2_ASSERT_WARNING(timer_started_successfully,
   1462a:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1462e:	f083 0301 	eor.w	r3, r3, #1
   14632:	b2db      	uxtb	r3, r3
   14634:	2b00      	cmp	r3, #0
   14636:	d005      	beq.n	14644 <LowLevelInit()+0x34>
   14638:	23ad      	movs	r3, #173	; 0xad
   1463a:	4a1b      	ldr	r2, [pc, #108]	; (146a8 <LowLevelInit()+0x98>)
   1463c:	491b      	ldr	r1, [pc, #108]	; (146ac <LowLevelInit()+0x9c>)
   1463e:	481c      	ldr	r0, [pc, #112]	; (146b0 <LowLevelInit()+0xa0>)
   14640:	f001 ff5a 	bl	164f8 <printf>
                     "System Timer has FAILED to start!");
  // Set Clock Speed
  // SetClockFrequency will timeout return the offset between desire clockspeed
  // and actual clockspeed if the PLL doesn't get a frequency fix within a
  // defined timeout (see L1/system_clock.hpp:kDefaultTimeout)
  while (system_controller.SetClockFrequency(config::kSystemClockRateMhz) != 0)
   14644:	2130      	movs	r1, #48	; 0x30
   14646:	481b      	ldr	r0, [pc, #108]	; (146b4 <LowLevelInit()+0xa4>)
   14648:	f7fc ff4a 	bl	114e0 <Lpc40xxSystemController::SetClockFrequency(unsigned char)>
   1464c:	4603      	mov	r3, r0
   1464e:	2b00      	cmp	r3, #0
   14650:	bf14      	ite	ne
   14652:	2301      	movne	r3, #1
   14654:	2300      	moveq	r3, #0
   14656:	b2db      	uxtb	r3, r3
   14658:	2b00      	cmp	r3, #0
   1465a:	d001      	beq.n	14660 <LowLevelInit()+0x50>
  {
    // Continually attempt to set the clock frequency to the desired until the
    // delta between desired and actual are 0.
    continue;
   1465c:	bf00      	nop
  while (system_controller.SetClockFrequency(config::kSystemClockRateMhz) != 0)
   1465e:	e7f1      	b.n	14644 <LowLevelInit()+0x34>
  }
  // Enable Peripheral Clock and set its divider to 1 meaning the clock speed
  // fed to all peripherals will be 48Mhz.
  system_controller.SetPeripheralClockDivider(1);
   14660:	2101      	movs	r1, #1
   14662:	4814      	ldr	r0, [pc, #80]	; (146b4 <LowLevelInit()+0xa4>)
   14664:	f7fc ff84 	bl	11570 <Lpc40xxSystemController::SetPeripheralClockDivider(unsigned char)>
  // Set System Timer frequency again, since the clock speed has changed since
  // the last time we ran this.
  system_timer.DisableTimer();
   14668:	f7ff f8f4 	bl	13854 <SystemTimer::DisableTimer()>
  system_timer.SetTickFrequency(config::kRtosFrequency);
   1466c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   14670:	480c      	ldr	r0, [pc, #48]	; (146a4 <LowLevelInit()+0x94>)
   14672:	f7ff f98f 	bl	13994 <SystemTimer::SetTickFrequency(unsigned long)>
  system_timer.StartTimer();
   14676:	480b      	ldr	r0, [pc, #44]	; (146a4 <LowLevelInit()+0x94>)
   14678:	f7ff f93e 	bl	138f8 <SystemTimer::StartTimer()>
  // Set timer0 to 1 MHz (1,000,000 Hz) so that the timer increments every 1
  // micro second.
  timer0.Initialize(1'000'000);
   1467c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   14680:	4a0d      	ldr	r2, [pc, #52]	; (146b8 <LowLevelInit()+0xa8>)
   14682:	490e      	ldr	r1, [pc, #56]	; (146bc <LowLevelInit()+0xac>)
   14684:	480e      	ldr	r0, [pc, #56]	; (146c0 <LowLevelInit()+0xb0>)
   14686:	f7ff f9f7 	bl	13a78 <Timer::Initialize(unsigned long, void (*)(), long)>
  SetUptimeFunction(Lpc40xxUptime);
   1468a:	480e      	ldr	r0, [pc, #56]	; (146c4 <LowLevelInit()+0xb4>)
   1468c:	f7ff f8ca 	bl	13824 <SetUptimeFunction(unsigned long long (*)())>
  // Set UART0 baudrate, which is required for printf and scanf to work properly
  uart0.Initialize(config::kBaudRate);
   14690:	f44f 4116 	mov.w	r1, #38400	; 0x9600
   14694:	480c      	ldr	r0, [pc, #48]	; (146c8 <LowLevelInit()+0xb8>)
   14696:	f7ff fba1 	bl	13ddc <Uart::Initialize(unsigned long)>
}
   1469a:	bf00      	nop
   1469c:	b003      	add	sp, #12
   1469e:	f85d fb04 	ldr.w	pc, [sp], #4
   146a2:	bf00      	nop
   146a4:	100007d4 	.word	0x100007d4
   146a8:	0001978c 	.word	0x0001978c
   146ac:	00019694 	.word	0x00019694
   146b0:	000195ec 	.word	0x000195ec
   146b4:	100007dc 	.word	0x100007dc
   146b8:	00013a59 	.word	0x00013a59
   146bc:	000f4240 	.word	0x000f4240
   146c0:	100007e0 	.word	0x100007e0
   146c4:	00014591 	.word	0x00014591
   146c8:	100007c0 	.word	0x100007c0

000146cc <SystemInit>:

void SystemInit()
{
   146cc:	b508      	push	{r3, lr}
  // Transfer data section values from flash to RAM
  InitDataSection();
   146ce:	f7fb fd1d 	bl	1010c <InitDataSection()>
  // Clear BSS section of RAM
  // This is required because the nano implementation of the standard C/C++
  // libraries assumes that the BSS section is initialized to 0.
  InitBssSection();
   146d2:	f7fb fd63 	bl	1019c <InitBssSection()>
  // Enable FPU (F.loating P.oint U.nit)
  // System will crash if floating point operations occur without
  // Initializing the FPU.
  InitFpu();
   146d6:	f7fb fd91 	bl	101fc <InitFpu()>
  // Initialisation C++ libraries
  __libc_init_array();
   146da:	f003 fc13 	bl	17f04 <__libc_init_array>
  // Run LowLevel System Initialization
  LowLevelInit();
   146de:	f7ff ff97 	bl	14610 <LowLevelInit()>
}
   146e2:	bf00      	nop
   146e4:	bd08      	pop	{r3, pc}
   146e6:	Address 0x00000000000146e6 is out of bounds.


000146e8 <ResetIsr>:
// Sets up a simple runtime environment and initializes the C/C++ library.

extern "C"
{
  void ResetIsr(void)
  {
   146e8:	b580      	push	{r7, lr}
   146ea:	b084      	sub	sp, #16
   146ec:	af00      	add	r7, sp, #0
    // The Hyperload bootloader takes up stack space to execute. The Hyperload
    // bootloader function launches this ISR manually, but it never returns thus
    // it never cleans up the memory it uses. To get that memory back, we have
    // to manually move the stack pointers back to the top of stack.
    const uint32_t kTopOfStack = reinterpret_cast<intptr_t>(&StackTop);
   146ee:	4b09      	ldr	r3, [pc, #36]	; (14714 <ResetIsr+0x2c>)
   146f0:	60fb      	str	r3, [r7, #12]
   146f2:	68fb      	ldr	r3, [r7, #12]
   146f4:	603b      	str	r3, [r7, #0]
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
   146f6:	683b      	ldr	r3, [r7, #0]
   146f8:	f383 8809 	msr	PSP, r3
   146fc:	68fb      	ldr	r3, [r7, #12]
   146fe:	607b      	str	r3, [r7, #4]

    \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0\n" : : "r" (topOfMainStack) : "sp");
   14700:	687b      	ldr	r3, [r7, #4]
   14702:	f383 8808 	msr	MSP, r3
    __set_PSP(kTopOfStack);
    __set_MSP(kTopOfStack);

    SystemInit();
   14706:	f7ff ffe1 	bl	146cc <SystemInit>
// #pragma ignored "-Wpedantic" to suppress main function call warning
#pragma GCC diagnostic push ignored "-Wpedantic"
    [[maybe_unused]] int32_t result = main();
   1470a:	f7fe fe55 	bl	133b8 <main>
   1470e:	60b8      	str	r0, [r7, #8]
   14710:	e7fe      	b.n	14710 <ResetIsr+0x28>
   14712:	bf00      	nop
   14714:	10010000 	.word	0x10010000

00014718 <void Timer::TimerHandler<(TimerInterface::TimerPort)0>()>:
  static void TimerHandler()
   14718:	b510      	push	{r4, lr}
   1471a:	4674      	mov	r4, lr
   1471c:	4623      	mov	r3, r4
   1471e:	4619      	mov	r1, r3
   14720:	480a      	ldr	r0, [pc, #40]	; (1474c <void Timer::TimerHandler<(TimerInterface::TimerPort)0>()+0x34>)
   14722:	f000 fc6d 	bl	15000 <__cyg_profile_func_enter>
      user_timer_isr[util::Value(port)]();
   14726:	2000      	movs	r0, #0
   14728:	f7ff f97e 	bl	13a28 <unsigned char util::Value<TimerInterface::TimerPort, unsigned char>(TimerInterface::TimerPort)>
   1472c:	4603      	mov	r3, r0
   1472e:	461a      	mov	r2, r3
   14730:	4b07      	ldr	r3, [pc, #28]	; (14750 <void Timer::TimerHandler<(TimerInterface::TimerPort)0>()+0x38>)
   14732:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   14736:	4798      	blx	r3
    ClearInterrupts<port>();
   14738:	f000 f90e 	bl	14958 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)0>()>
   1473c:	4623      	mov	r3, r4
   1473e:	4619      	mov	r1, r3
   14740:	4802      	ldr	r0, [pc, #8]	; (1474c <void Timer::TimerHandler<(TimerInterface::TimerPort)0>()+0x34>)
   14742:	f000 fc71 	bl	15028 <__cyg_profile_func_exit>
  }
   14746:	bf00      	nop
   14748:	bd10      	pop	{r4, pc}
   1474a:	bf00      	nop
   1474c:	00014719 	.word	0x00014719
   14750:	10001278 	.word	0x10001278

00014754 <void Timer::TimerHandler<(TimerInterface::TimerPort)1>()>:
  static void TimerHandler()
   14754:	b510      	push	{r4, lr}
   14756:	4674      	mov	r4, lr
   14758:	4623      	mov	r3, r4
   1475a:	4619      	mov	r1, r3
   1475c:	480a      	ldr	r0, [pc, #40]	; (14788 <void Timer::TimerHandler<(TimerInterface::TimerPort)1>()+0x34>)
   1475e:	f000 fc4f 	bl	15000 <__cyg_profile_func_enter>
      user_timer_isr[util::Value(port)]();
   14762:	2001      	movs	r0, #1
   14764:	f7ff f960 	bl	13a28 <unsigned char util::Value<TimerInterface::TimerPort, unsigned char>(TimerInterface::TimerPort)>
   14768:	4603      	mov	r3, r0
   1476a:	461a      	mov	r2, r3
   1476c:	4b07      	ldr	r3, [pc, #28]	; (1478c <void Timer::TimerHandler<(TimerInterface::TimerPort)1>()+0x38>)
   1476e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   14772:	4798      	blx	r3
    ClearInterrupts<port>();
   14774:	f000 f940 	bl	149f8 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)1>()>
   14778:	4623      	mov	r3, r4
   1477a:	4619      	mov	r1, r3
   1477c:	4802      	ldr	r0, [pc, #8]	; (14788 <void Timer::TimerHandler<(TimerInterface::TimerPort)1>()+0x34>)
   1477e:	f000 fc53 	bl	15028 <__cyg_profile_func_exit>
  }
   14782:	bf00      	nop
   14784:	bd10      	pop	{r4, pc}
   14786:	bf00      	nop
   14788:	00014755 	.word	0x00014755
   1478c:	10001278 	.word	0x10001278

00014790 <void Timer::TimerHandler<(TimerInterface::TimerPort)2>()>:
  static void TimerHandler()
   14790:	b510      	push	{r4, lr}
   14792:	4674      	mov	r4, lr
   14794:	4623      	mov	r3, r4
   14796:	4619      	mov	r1, r3
   14798:	480a      	ldr	r0, [pc, #40]	; (147c4 <void Timer::TimerHandler<(TimerInterface::TimerPort)2>()+0x34>)
   1479a:	f000 fc31 	bl	15000 <__cyg_profile_func_enter>
      user_timer_isr[util::Value(port)]();
   1479e:	2002      	movs	r0, #2
   147a0:	f7ff f942 	bl	13a28 <unsigned char util::Value<TimerInterface::TimerPort, unsigned char>(TimerInterface::TimerPort)>
   147a4:	4603      	mov	r3, r0
   147a6:	461a      	mov	r2, r3
   147a8:	4b07      	ldr	r3, [pc, #28]	; (147c8 <void Timer::TimerHandler<(TimerInterface::TimerPort)2>()+0x38>)
   147aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   147ae:	4798      	blx	r3
    ClearInterrupts<port>();
   147b0:	f000 f972 	bl	14a98 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)2>()>
   147b4:	4623      	mov	r3, r4
   147b6:	4619      	mov	r1, r3
   147b8:	4802      	ldr	r0, [pc, #8]	; (147c4 <void Timer::TimerHandler<(TimerInterface::TimerPort)2>()+0x34>)
   147ba:	f000 fc35 	bl	15028 <__cyg_profile_func_exit>
  }
   147be:	bf00      	nop
   147c0:	bd10      	pop	{r4, pc}
   147c2:	bf00      	nop
   147c4:	00014791 	.word	0x00014791
   147c8:	10001278 	.word	0x10001278

000147cc <void Timer::TimerHandler<(TimerInterface::TimerPort)3>()>:
  static void TimerHandler()
   147cc:	b510      	push	{r4, lr}
   147ce:	4674      	mov	r4, lr
   147d0:	4623      	mov	r3, r4
   147d2:	4619      	mov	r1, r3
   147d4:	480a      	ldr	r0, [pc, #40]	; (14800 <void Timer::TimerHandler<(TimerInterface::TimerPort)3>()+0x34>)
   147d6:	f000 fc13 	bl	15000 <__cyg_profile_func_enter>
      user_timer_isr[util::Value(port)]();
   147da:	2003      	movs	r0, #3
   147dc:	f7ff f924 	bl	13a28 <unsigned char util::Value<TimerInterface::TimerPort, unsigned char>(TimerInterface::TimerPort)>
   147e0:	4603      	mov	r3, r0
   147e2:	461a      	mov	r2, r3
   147e4:	4b07      	ldr	r3, [pc, #28]	; (14804 <void Timer::TimerHandler<(TimerInterface::TimerPort)3>()+0x38>)
   147e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   147ea:	4798      	blx	r3
    ClearInterrupts<port>();
   147ec:	f000 f9a4 	bl	14b38 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)3>()>
   147f0:	4623      	mov	r3, r4
   147f2:	4619      	mov	r1, r3
   147f4:	4802      	ldr	r0, [pc, #8]	; (14800 <void Timer::TimerHandler<(TimerInterface::TimerPort)3>()+0x34>)
   147f6:	f000 fc17 	bl	15028 <__cyg_profile_func_exit>
  }
   147fa:	bf00      	nop
   147fc:	bd10      	pop	{r4, pc}
   147fe:	bf00      	nop
   14800:	000147cd 	.word	0x000147cd
   14804:	10001278 	.word	0x10001278

00014808 <Status Wait<Uart::Send(unsigned char)::{lambda()#1}>(unsigned long long, Uart::Send(unsigned char)::{lambda()#1})>:
inline Status Wait(uint64_t timeout, F is_done)
   14808:	e92d 4830 	stmdb	sp!, {r4, r5, fp, lr}
   1480c:	b088      	sub	sp, #32
   1480e:	4675      	mov	r5, lr
   14810:	e9cd 0102 	strd	r0, r1, [sp, #8]
   14814:	9201      	str	r2, [sp, #4]
   14816:	462b      	mov	r3, r5
   14818:	4619      	mov	r1, r3
   1481a:	4824      	ldr	r0, [pc, #144]	; (148ac <Status Wait<Uart::Send(unsigned char)::{lambda()#1}>(unsigned long long, Uart::Send(unsigned char)::{lambda()#1})+0xa4>)
   1481c:	f000 fbf0 	bl	15000 <__cyg_profile_func_enter>
  uint64_t timeout_time = 0;
   14820:	f04f 0300 	mov.w	r3, #0
   14824:	f04f 0400 	mov.w	r4, #0
   14828:	e9cd 3406 	strd	r3, r4, [sp, #24]
  if (timeout == kMaxWait)
   1482c:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
   14830:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
   14834:	bf08      	it	eq
   14836:	f1b3 3fff 	cmpeq.w	r3, #4294967295	; 0xffffffff
   1483a:	d106      	bne.n	1484a <Status Wait<Uart::Send(unsigned char)::{lambda()#1}>(unsigned long long, Uart::Send(unsigned char)::{lambda()#1})+0x42>
    timeout_time = kMaxWait;
   1483c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   14840:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   14844:	e9cd 3406 	strd	r3, r4, [sp, #24]
   14848:	e00b      	b.n	14862 <Status Wait<Uart::Send(unsigned char)::{lambda()#1}>(unsigned long long, Uart::Send(unsigned char)::{lambda()#1})+0x5a>
    timeout_time = Milliseconds() + timeout;
   1484a:	f7fc f95b 	bl	10b04 <Milliseconds()>
   1484e:	460a      	mov	r2, r1
   14850:	4601      	mov	r1, r0
   14852:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
   14856:	eb13 0b01 	adds.w	fp, r3, r1
   1485a:	eb44 0c02 	adc.w	ip, r4, r2
   1485e:	e9cd bc06 	strd	fp, ip, [sp, #24]
  Status status = Status::kTimedOut;
   14862:	2301      	movs	r3, #1
   14864:	9305      	str	r3, [sp, #20]
  while (Milliseconds() < timeout_time)
   14866:	f7fc f94d 	bl	10b04 <Milliseconds()>
   1486a:	460a      	mov	r2, r1
   1486c:	4601      	mov	r1, r0
   1486e:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
   14872:	42a2      	cmp	r2, r4
   14874:	bf08      	it	eq
   14876:	4299      	cmpeq	r1, r3
   14878:	bf34      	ite	cc
   1487a:	2301      	movcc	r3, #1
   1487c:	2300      	movcs	r3, #0
   1487e:	b2db      	uxtb	r3, r3
   14880:	2b00      	cmp	r3, #0
   14882:	d008      	beq.n	14896 <Status Wait<Uart::Send(unsigned char)::{lambda()#1}>(unsigned long long, Uart::Send(unsigned char)::{lambda()#1})+0x8e>
    if (is_done())
   14884:	ab01      	add	r3, sp, #4
   14886:	4618      	mov	r0, r3
   14888:	f7ff fb1a 	bl	13ec0 <Uart::Send(unsigned char)::{lambda()#1}::operator()() const>
   1488c:	4603      	mov	r3, r0
   1488e:	2b00      	cmp	r3, #0
   14890:	d0e9      	beq.n	14866 <Status Wait<Uart::Send(unsigned char)::{lambda()#1}>(unsigned long long, Uart::Send(unsigned char)::{lambda()#1})+0x5e>
      status = Status::kSuccess;
   14892:	2300      	movs	r3, #0
   14894:	9305      	str	r3, [sp, #20]
  return status;
   14896:	9c05      	ldr	r4, [sp, #20]
   14898:	462b      	mov	r3, r5
   1489a:	4619      	mov	r1, r3
   1489c:	4803      	ldr	r0, [pc, #12]	; (148ac <Status Wait<Uart::Send(unsigned char)::{lambda()#1}>(unsigned long long, Uart::Send(unsigned char)::{lambda()#1})+0xa4>)
   1489e:	f000 fbc3 	bl	15028 <__cyg_profile_func_exit>
   148a2:	4623      	mov	r3, r4
}
   148a4:	4618      	mov	r0, r3
   148a6:	b008      	add	sp, #32
   148a8:	e8bd 8830 	ldmia.w	sp!, {r4, r5, fp, pc}
   148ac:	00014809 	.word	0x00014809

000148b0 <Status Wait<Uart::Receive(unsigned long)::{lambda()#1}>(unsigned long long, Uart::Receive(unsigned long)::{lambda()#1})>:
inline Status Wait(uint64_t timeout, F is_done)
   148b0:	e92d 4830 	stmdb	sp!, {r4, r5, fp, lr}
   148b4:	b088      	sub	sp, #32
   148b6:	4675      	mov	r5, lr
   148b8:	e9cd 0102 	strd	r0, r1, [sp, #8]
   148bc:	9201      	str	r2, [sp, #4]
   148be:	462b      	mov	r3, r5
   148c0:	4619      	mov	r1, r3
   148c2:	4824      	ldr	r0, [pc, #144]	; (14954 <Status Wait<Uart::Receive(unsigned long)::{lambda()#1}>(unsigned long long, Uart::Receive(unsigned long)::{lambda()#1})+0xa4>)
   148c4:	f000 fb9c 	bl	15000 <__cyg_profile_func_enter>
  uint64_t timeout_time = 0;
   148c8:	f04f 0300 	mov.w	r3, #0
   148cc:	f04f 0400 	mov.w	r4, #0
   148d0:	e9cd 3406 	strd	r3, r4, [sp, #24]
  if (timeout == kMaxWait)
   148d4:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
   148d8:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
   148dc:	bf08      	it	eq
   148de:	f1b3 3fff 	cmpeq.w	r3, #4294967295	; 0xffffffff
   148e2:	d106      	bne.n	148f2 <Status Wait<Uart::Receive(unsigned long)::{lambda()#1}>(unsigned long long, Uart::Receive(unsigned long)::{lambda()#1})+0x42>
    timeout_time = kMaxWait;
   148e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   148e8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   148ec:	e9cd 3406 	strd	r3, r4, [sp, #24]
   148f0:	e00b      	b.n	1490a <Status Wait<Uart::Receive(unsigned long)::{lambda()#1}>(unsigned long long, Uart::Receive(unsigned long)::{lambda()#1})+0x5a>
    timeout_time = Milliseconds() + timeout;
   148f2:	f7fc f907 	bl	10b04 <Milliseconds()>
   148f6:	460a      	mov	r2, r1
   148f8:	4601      	mov	r1, r0
   148fa:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
   148fe:	eb13 0b01 	adds.w	fp, r3, r1
   14902:	eb44 0c02 	adc.w	ip, r4, r2
   14906:	e9cd bc06 	strd	fp, ip, [sp, #24]
  Status status = Status::kTimedOut;
   1490a:	2301      	movs	r3, #1
   1490c:	9305      	str	r3, [sp, #20]
  while (Milliseconds() < timeout_time)
   1490e:	f7fc f8f9 	bl	10b04 <Milliseconds()>
   14912:	460a      	mov	r2, r1
   14914:	4601      	mov	r1, r0
   14916:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
   1491a:	42a2      	cmp	r2, r4
   1491c:	bf08      	it	eq
   1491e:	4299      	cmpeq	r1, r3
   14920:	bf34      	ite	cc
   14922:	2301      	movcc	r3, #1
   14924:	2300      	movcs	r3, #0
   14926:	b2db      	uxtb	r3, r3
   14928:	2b00      	cmp	r3, #0
   1492a:	d008      	beq.n	1493e <Status Wait<Uart::Receive(unsigned long)::{lambda()#1}>(unsigned long long, Uart::Receive(unsigned long)::{lambda()#1})+0x8e>
    if (is_done())
   1492c:	ab01      	add	r3, sp, #4
   1492e:	4618      	mov	r0, r3
   14930:	f7ff fb60 	bl	13ff4 <Uart::Receive(unsigned long)::{lambda()#1}::operator()() const>
   14934:	4603      	mov	r3, r0
   14936:	2b00      	cmp	r3, #0
   14938:	d0e9      	beq.n	1490e <Status Wait<Uart::Receive(unsigned long)::{lambda()#1}>(unsigned long long, Uart::Receive(unsigned long)::{lambda()#1})+0x5e>
      status = Status::kSuccess;
   1493a:	2300      	movs	r3, #0
   1493c:	9305      	str	r3, [sp, #20]
  return status;
   1493e:	9c05      	ldr	r4, [sp, #20]
   14940:	462b      	mov	r3, r5
   14942:	4619      	mov	r1, r3
   14944:	4803      	ldr	r0, [pc, #12]	; (14954 <Status Wait<Uart::Receive(unsigned long)::{lambda()#1}>(unsigned long long, Uart::Receive(unsigned long)::{lambda()#1})+0xa4>)
   14946:	f000 fb6f 	bl	15028 <__cyg_profile_func_exit>
   1494a:	4623      	mov	r3, r4
}
   1494c:	4618      	mov	r0, r3
   1494e:	b008      	add	sp, #32
   14950:	e8bd 8830 	ldmia.w	sp!, {r4, r5, fp, pc}
   14954:	000148b1 	.word	0x000148b1

00014958 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)0>()>:
  static void ClearInterrupts()
   14958:	b510      	push	{r4, lr}
   1495a:	b082      	sub	sp, #8
   1495c:	4674      	mov	r4, lr
   1495e:	4623      	mov	r3, r4
   14960:	4619      	mov	r1, r3
   14962:	4823      	ldr	r0, [pc, #140]	; (149f0 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)0>()+0x98>)
   14964:	f000 fb4c 	bl	15000 <__cyg_profile_func_enter>
    uint8_t channel = util::Value(port);
   14968:	2300      	movs	r3, #0
   1496a:	f88d 3007 	strb.w	r3, [sp, #7]
    tim_register[channel]->IR |= (1 << kRegMR0);
   1496e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   14972:	4a20      	ldr	r2, [pc, #128]	; (149f4 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)0>()+0x9c>)
   14974:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14978:	681a      	ldr	r2, [r3, #0]
   1497a:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1497e:	491d      	ldr	r1, [pc, #116]	; (149f4 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)0>()+0x9c>)
   14980:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   14984:	f042 0201 	orr.w	r2, r2, #1
   14988:	601a      	str	r2, [r3, #0]
    tim_register[channel]->IR |= (1 << kRegMR1);
   1498a:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1498e:	4a19      	ldr	r2, [pc, #100]	; (149f4 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)0>()+0x9c>)
   14990:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14994:	681a      	ldr	r2, [r3, #0]
   14996:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1499a:	4916      	ldr	r1, [pc, #88]	; (149f4 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)0>()+0x9c>)
   1499c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   149a0:	f042 0202 	orr.w	r2, r2, #2
   149a4:	601a      	str	r2, [r3, #0]
    tim_register[channel]->IR |= (1 << kRegMR2);
   149a6:	f89d 3007 	ldrb.w	r3, [sp, #7]
   149aa:	4a12      	ldr	r2, [pc, #72]	; (149f4 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)0>()+0x9c>)
   149ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   149b0:	681a      	ldr	r2, [r3, #0]
   149b2:	f89d 3007 	ldrb.w	r3, [sp, #7]
   149b6:	490f      	ldr	r1, [pc, #60]	; (149f4 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)0>()+0x9c>)
   149b8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   149bc:	f042 0204 	orr.w	r2, r2, #4
   149c0:	601a      	str	r2, [r3, #0]
    tim_register[channel]->IR |= (1 << kRegMR3);
   149c2:	f89d 3007 	ldrb.w	r3, [sp, #7]
   149c6:	4a0b      	ldr	r2, [pc, #44]	; (149f4 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)0>()+0x9c>)
   149c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   149cc:	681a      	ldr	r2, [r3, #0]
   149ce:	f89d 3007 	ldrb.w	r3, [sp, #7]
   149d2:	4908      	ldr	r1, [pc, #32]	; (149f4 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)0>()+0x9c>)
   149d4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   149d8:	f042 0208 	orr.w	r2, r2, #8
   149dc:	601a      	str	r2, [r3, #0]
   149de:	4623      	mov	r3, r4
   149e0:	4619      	mov	r1, r3
   149e2:	4803      	ldr	r0, [pc, #12]	; (149f0 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)0>()+0x98>)
   149e4:	f000 fb20 	bl	15028 <__cyg_profile_func_exit>
  }
   149e8:	bf00      	nop
   149ea:	b002      	add	sp, #8
   149ec:	bd10      	pop	{r4, pc}
   149ee:	bf00      	nop
   149f0:	00014959 	.word	0x00014959
   149f4:	10000760 	.word	0x10000760

000149f8 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)1>()>:
  static void ClearInterrupts()
   149f8:	b510      	push	{r4, lr}
   149fa:	b082      	sub	sp, #8
   149fc:	4674      	mov	r4, lr
   149fe:	4623      	mov	r3, r4
   14a00:	4619      	mov	r1, r3
   14a02:	4823      	ldr	r0, [pc, #140]	; (14a90 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)1>()+0x98>)
   14a04:	f000 fafc 	bl	15000 <__cyg_profile_func_enter>
    uint8_t channel = util::Value(port);
   14a08:	2301      	movs	r3, #1
   14a0a:	f88d 3007 	strb.w	r3, [sp, #7]
    tim_register[channel]->IR |= (1 << kRegMR0);
   14a0e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   14a12:	4a20      	ldr	r2, [pc, #128]	; (14a94 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)1>()+0x9c>)
   14a14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14a18:	681a      	ldr	r2, [r3, #0]
   14a1a:	f89d 3007 	ldrb.w	r3, [sp, #7]
   14a1e:	491d      	ldr	r1, [pc, #116]	; (14a94 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)1>()+0x9c>)
   14a20:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   14a24:	f042 0201 	orr.w	r2, r2, #1
   14a28:	601a      	str	r2, [r3, #0]
    tim_register[channel]->IR |= (1 << kRegMR1);
   14a2a:	f89d 3007 	ldrb.w	r3, [sp, #7]
   14a2e:	4a19      	ldr	r2, [pc, #100]	; (14a94 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)1>()+0x9c>)
   14a30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14a34:	681a      	ldr	r2, [r3, #0]
   14a36:	f89d 3007 	ldrb.w	r3, [sp, #7]
   14a3a:	4916      	ldr	r1, [pc, #88]	; (14a94 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)1>()+0x9c>)
   14a3c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   14a40:	f042 0202 	orr.w	r2, r2, #2
   14a44:	601a      	str	r2, [r3, #0]
    tim_register[channel]->IR |= (1 << kRegMR2);
   14a46:	f89d 3007 	ldrb.w	r3, [sp, #7]
   14a4a:	4a12      	ldr	r2, [pc, #72]	; (14a94 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)1>()+0x9c>)
   14a4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14a50:	681a      	ldr	r2, [r3, #0]
   14a52:	f89d 3007 	ldrb.w	r3, [sp, #7]
   14a56:	490f      	ldr	r1, [pc, #60]	; (14a94 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)1>()+0x9c>)
   14a58:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   14a5c:	f042 0204 	orr.w	r2, r2, #4
   14a60:	601a      	str	r2, [r3, #0]
    tim_register[channel]->IR |= (1 << kRegMR3);
   14a62:	f89d 3007 	ldrb.w	r3, [sp, #7]
   14a66:	4a0b      	ldr	r2, [pc, #44]	; (14a94 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)1>()+0x9c>)
   14a68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14a6c:	681a      	ldr	r2, [r3, #0]
   14a6e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   14a72:	4908      	ldr	r1, [pc, #32]	; (14a94 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)1>()+0x9c>)
   14a74:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   14a78:	f042 0208 	orr.w	r2, r2, #8
   14a7c:	601a      	str	r2, [r3, #0]
   14a7e:	4623      	mov	r3, r4
   14a80:	4619      	mov	r1, r3
   14a82:	4803      	ldr	r0, [pc, #12]	; (14a90 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)1>()+0x98>)
   14a84:	f000 fad0 	bl	15028 <__cyg_profile_func_exit>
  }
   14a88:	bf00      	nop
   14a8a:	b002      	add	sp, #8
   14a8c:	bd10      	pop	{r4, pc}
   14a8e:	bf00      	nop
   14a90:	000149f9 	.word	0x000149f9
   14a94:	10000760 	.word	0x10000760

00014a98 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)2>()>:
  static void ClearInterrupts()
   14a98:	b510      	push	{r4, lr}
   14a9a:	b082      	sub	sp, #8
   14a9c:	4674      	mov	r4, lr
   14a9e:	4623      	mov	r3, r4
   14aa0:	4619      	mov	r1, r3
   14aa2:	4823      	ldr	r0, [pc, #140]	; (14b30 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)2>()+0x98>)
   14aa4:	f000 faac 	bl	15000 <__cyg_profile_func_enter>
    uint8_t channel = util::Value(port);
   14aa8:	2302      	movs	r3, #2
   14aaa:	f88d 3007 	strb.w	r3, [sp, #7]
    tim_register[channel]->IR |= (1 << kRegMR0);
   14aae:	f89d 3007 	ldrb.w	r3, [sp, #7]
   14ab2:	4a20      	ldr	r2, [pc, #128]	; (14b34 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)2>()+0x9c>)
   14ab4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14ab8:	681a      	ldr	r2, [r3, #0]
   14aba:	f89d 3007 	ldrb.w	r3, [sp, #7]
   14abe:	491d      	ldr	r1, [pc, #116]	; (14b34 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)2>()+0x9c>)
   14ac0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   14ac4:	f042 0201 	orr.w	r2, r2, #1
   14ac8:	601a      	str	r2, [r3, #0]
    tim_register[channel]->IR |= (1 << kRegMR1);
   14aca:	f89d 3007 	ldrb.w	r3, [sp, #7]
   14ace:	4a19      	ldr	r2, [pc, #100]	; (14b34 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)2>()+0x9c>)
   14ad0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14ad4:	681a      	ldr	r2, [r3, #0]
   14ad6:	f89d 3007 	ldrb.w	r3, [sp, #7]
   14ada:	4916      	ldr	r1, [pc, #88]	; (14b34 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)2>()+0x9c>)
   14adc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   14ae0:	f042 0202 	orr.w	r2, r2, #2
   14ae4:	601a      	str	r2, [r3, #0]
    tim_register[channel]->IR |= (1 << kRegMR2);
   14ae6:	f89d 3007 	ldrb.w	r3, [sp, #7]
   14aea:	4a12      	ldr	r2, [pc, #72]	; (14b34 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)2>()+0x9c>)
   14aec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14af0:	681a      	ldr	r2, [r3, #0]
   14af2:	f89d 3007 	ldrb.w	r3, [sp, #7]
   14af6:	490f      	ldr	r1, [pc, #60]	; (14b34 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)2>()+0x9c>)
   14af8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   14afc:	f042 0204 	orr.w	r2, r2, #4
   14b00:	601a      	str	r2, [r3, #0]
    tim_register[channel]->IR |= (1 << kRegMR3);
   14b02:	f89d 3007 	ldrb.w	r3, [sp, #7]
   14b06:	4a0b      	ldr	r2, [pc, #44]	; (14b34 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)2>()+0x9c>)
   14b08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14b0c:	681a      	ldr	r2, [r3, #0]
   14b0e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   14b12:	4908      	ldr	r1, [pc, #32]	; (14b34 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)2>()+0x9c>)
   14b14:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   14b18:	f042 0208 	orr.w	r2, r2, #8
   14b1c:	601a      	str	r2, [r3, #0]
   14b1e:	4623      	mov	r3, r4
   14b20:	4619      	mov	r1, r3
   14b22:	4803      	ldr	r0, [pc, #12]	; (14b30 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)2>()+0x98>)
   14b24:	f000 fa80 	bl	15028 <__cyg_profile_func_exit>
  }
   14b28:	bf00      	nop
   14b2a:	b002      	add	sp, #8
   14b2c:	bd10      	pop	{r4, pc}
   14b2e:	bf00      	nop
   14b30:	00014a99 	.word	0x00014a99
   14b34:	10000760 	.word	0x10000760

00014b38 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)3>()>:
  static void ClearInterrupts()
   14b38:	b510      	push	{r4, lr}
   14b3a:	b082      	sub	sp, #8
   14b3c:	4674      	mov	r4, lr
   14b3e:	4623      	mov	r3, r4
   14b40:	4619      	mov	r1, r3
   14b42:	4823      	ldr	r0, [pc, #140]	; (14bd0 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)3>()+0x98>)
   14b44:	f000 fa5c 	bl	15000 <__cyg_profile_func_enter>
    uint8_t channel = util::Value(port);
   14b48:	2303      	movs	r3, #3
   14b4a:	f88d 3007 	strb.w	r3, [sp, #7]
    tim_register[channel]->IR |= (1 << kRegMR0);
   14b4e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   14b52:	4a20      	ldr	r2, [pc, #128]	; (14bd4 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)3>()+0x9c>)
   14b54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14b58:	681a      	ldr	r2, [r3, #0]
   14b5a:	f89d 3007 	ldrb.w	r3, [sp, #7]
   14b5e:	491d      	ldr	r1, [pc, #116]	; (14bd4 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)3>()+0x9c>)
   14b60:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   14b64:	f042 0201 	orr.w	r2, r2, #1
   14b68:	601a      	str	r2, [r3, #0]
    tim_register[channel]->IR |= (1 << kRegMR1);
   14b6a:	f89d 3007 	ldrb.w	r3, [sp, #7]
   14b6e:	4a19      	ldr	r2, [pc, #100]	; (14bd4 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)3>()+0x9c>)
   14b70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14b74:	681a      	ldr	r2, [r3, #0]
   14b76:	f89d 3007 	ldrb.w	r3, [sp, #7]
   14b7a:	4916      	ldr	r1, [pc, #88]	; (14bd4 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)3>()+0x9c>)
   14b7c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   14b80:	f042 0202 	orr.w	r2, r2, #2
   14b84:	601a      	str	r2, [r3, #0]
    tim_register[channel]->IR |= (1 << kRegMR2);
   14b86:	f89d 3007 	ldrb.w	r3, [sp, #7]
   14b8a:	4a12      	ldr	r2, [pc, #72]	; (14bd4 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)3>()+0x9c>)
   14b8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14b90:	681a      	ldr	r2, [r3, #0]
   14b92:	f89d 3007 	ldrb.w	r3, [sp, #7]
   14b96:	490f      	ldr	r1, [pc, #60]	; (14bd4 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)3>()+0x9c>)
   14b98:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   14b9c:	f042 0204 	orr.w	r2, r2, #4
   14ba0:	601a      	str	r2, [r3, #0]
    tim_register[channel]->IR |= (1 << kRegMR3);
   14ba2:	f89d 3007 	ldrb.w	r3, [sp, #7]
   14ba6:	4a0b      	ldr	r2, [pc, #44]	; (14bd4 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)3>()+0x9c>)
   14ba8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14bac:	681a      	ldr	r2, [r3, #0]
   14bae:	f89d 3007 	ldrb.w	r3, [sp, #7]
   14bb2:	4908      	ldr	r1, [pc, #32]	; (14bd4 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)3>()+0x9c>)
   14bb4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   14bb8:	f042 0208 	orr.w	r2, r2, #8
   14bbc:	601a      	str	r2, [r3, #0]
   14bbe:	4623      	mov	r3, r4
   14bc0:	4619      	mov	r1, r3
   14bc2:	4803      	ldr	r0, [pc, #12]	; (14bd0 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)3>()+0x98>)
   14bc4:	f000 fa30 	bl	15028 <__cyg_profile_func_exit>
  }
   14bc8:	bf00      	nop
   14bca:	b002      	add	sp, #8
   14bcc:	bd10      	pop	{r4, pc}
   14bce:	bf00      	nop
   14bd0:	00014b39 	.word	0x00014b39
   14bd4:	10000760 	.word	0x10000760

00014bd8 <__static_initialization_and_destruction_0(int, int)>:
#pragma GCC diagnostic pop
    // main() shouldn't return, but if it does, we'll just enter an infinite
    // loop
    Halt();
  }
}
   14bd8:	b082      	sub	sp, #8
   14bda:	9001      	str	r0, [sp, #4]
   14bdc:	9100      	str	r1, [sp, #0]
   14bde:	9b01      	ldr	r3, [sp, #4]
   14be0:	2b01      	cmp	r3, #1
   14be2:	d15d      	bne.n	14ca0 <__static_initialization_and_destruction_0(int, int)+0xc8>
   14be4:	9b00      	ldr	r3, [sp, #0]
   14be6:	f64f 72ff 	movw	r2, #65535	; 0xffff
   14bea:	4293      	cmp	r3, r2
   14bec:	d158      	bne.n	14ca0 <__static_initialization_and_destruction_0(int, int)+0xc8>
  inline static volatile uint32_t * match[4][4] = {
   14bee:	4b2e      	ldr	r3, [pc, #184]	; (14ca8 <__static_initialization_and_destruction_0(int, int)+0xd0>)
   14bf0:	681b      	ldr	r3, [r3, #0]
   14bf2:	f003 0301 	and.w	r3, r3, #1
   14bf6:	2b00      	cmp	r3, #0
   14bf8:	d152      	bne.n	14ca0 <__static_initialization_and_destruction_0(int, int)+0xc8>
   14bfa:	4b2b      	ldr	r3, [pc, #172]	; (14ca8 <__static_initialization_and_destruction_0(int, int)+0xd0>)
   14bfc:	2201      	movs	r2, #1
   14bfe:	601a      	str	r2, [r3, #0]
    [kTimer0] = { &tim_register[0]->MR0, &tim_register[0]->MR1,
   14c00:	4b2a      	ldr	r3, [pc, #168]	; (14cac <__static_initialization_and_destruction_0(int, int)+0xd4>)
   14c02:	681b      	ldr	r3, [r3, #0]
   14c04:	3318      	adds	r3, #24
  };
   14c06:	4a2a      	ldr	r2, [pc, #168]	; (14cb0 <__static_initialization_and_destruction_0(int, int)+0xd8>)
   14c08:	6013      	str	r3, [r2, #0]
    [kTimer0] = { &tim_register[0]->MR0, &tim_register[0]->MR1,
   14c0a:	4b28      	ldr	r3, [pc, #160]	; (14cac <__static_initialization_and_destruction_0(int, int)+0xd4>)
   14c0c:	681b      	ldr	r3, [r3, #0]
   14c0e:	331c      	adds	r3, #28
  };
   14c10:	4a27      	ldr	r2, [pc, #156]	; (14cb0 <__static_initialization_and_destruction_0(int, int)+0xd8>)
   14c12:	6053      	str	r3, [r2, #4]
                  &tim_register[0]->MR2, &tim_register[0]->MR3 },
   14c14:	4b25      	ldr	r3, [pc, #148]	; (14cac <__static_initialization_and_destruction_0(int, int)+0xd4>)
   14c16:	681b      	ldr	r3, [r3, #0]
   14c18:	3320      	adds	r3, #32
  };
   14c1a:	4a25      	ldr	r2, [pc, #148]	; (14cb0 <__static_initialization_and_destruction_0(int, int)+0xd8>)
   14c1c:	6093      	str	r3, [r2, #8]
                  &tim_register[0]->MR2, &tim_register[0]->MR3 },
   14c1e:	4b23      	ldr	r3, [pc, #140]	; (14cac <__static_initialization_and_destruction_0(int, int)+0xd4>)
   14c20:	681b      	ldr	r3, [r3, #0]
   14c22:	3324      	adds	r3, #36	; 0x24
  };
   14c24:	4a22      	ldr	r2, [pc, #136]	; (14cb0 <__static_initialization_and_destruction_0(int, int)+0xd8>)
   14c26:	60d3      	str	r3, [r2, #12]
    [kTimer1] = { &tim_register[1]->MR0, &tim_register[1]->MR1,
   14c28:	4b20      	ldr	r3, [pc, #128]	; (14cac <__static_initialization_and_destruction_0(int, int)+0xd4>)
   14c2a:	685b      	ldr	r3, [r3, #4]
   14c2c:	3318      	adds	r3, #24
  };
   14c2e:	4a20      	ldr	r2, [pc, #128]	; (14cb0 <__static_initialization_and_destruction_0(int, int)+0xd8>)
   14c30:	6113      	str	r3, [r2, #16]
    [kTimer1] = { &tim_register[1]->MR0, &tim_register[1]->MR1,
   14c32:	4b1e      	ldr	r3, [pc, #120]	; (14cac <__static_initialization_and_destruction_0(int, int)+0xd4>)
   14c34:	685b      	ldr	r3, [r3, #4]
   14c36:	331c      	adds	r3, #28
  };
   14c38:	4a1d      	ldr	r2, [pc, #116]	; (14cb0 <__static_initialization_and_destruction_0(int, int)+0xd8>)
   14c3a:	6153      	str	r3, [r2, #20]
                  &tim_register[1]->MR2, &tim_register[1]->MR3 },
   14c3c:	4b1b      	ldr	r3, [pc, #108]	; (14cac <__static_initialization_and_destruction_0(int, int)+0xd4>)
   14c3e:	685b      	ldr	r3, [r3, #4]
   14c40:	3320      	adds	r3, #32
  };
   14c42:	4a1b      	ldr	r2, [pc, #108]	; (14cb0 <__static_initialization_and_destruction_0(int, int)+0xd8>)
   14c44:	6193      	str	r3, [r2, #24]
                  &tim_register[1]->MR2, &tim_register[1]->MR3 },
   14c46:	4b19      	ldr	r3, [pc, #100]	; (14cac <__static_initialization_and_destruction_0(int, int)+0xd4>)
   14c48:	685b      	ldr	r3, [r3, #4]
   14c4a:	3324      	adds	r3, #36	; 0x24
  };
   14c4c:	4a18      	ldr	r2, [pc, #96]	; (14cb0 <__static_initialization_and_destruction_0(int, int)+0xd8>)
   14c4e:	61d3      	str	r3, [r2, #28]
    [kTimer2] = { &tim_register[2]->MR0, &tim_register[2]->MR1,
   14c50:	4b16      	ldr	r3, [pc, #88]	; (14cac <__static_initialization_and_destruction_0(int, int)+0xd4>)
   14c52:	689b      	ldr	r3, [r3, #8]
   14c54:	3318      	adds	r3, #24
  };
   14c56:	4a16      	ldr	r2, [pc, #88]	; (14cb0 <__static_initialization_and_destruction_0(int, int)+0xd8>)
   14c58:	6213      	str	r3, [r2, #32]
    [kTimer2] = { &tim_register[2]->MR0, &tim_register[2]->MR1,
   14c5a:	4b14      	ldr	r3, [pc, #80]	; (14cac <__static_initialization_and_destruction_0(int, int)+0xd4>)
   14c5c:	689b      	ldr	r3, [r3, #8]
   14c5e:	331c      	adds	r3, #28
  };
   14c60:	4a13      	ldr	r2, [pc, #76]	; (14cb0 <__static_initialization_and_destruction_0(int, int)+0xd8>)
   14c62:	6253      	str	r3, [r2, #36]	; 0x24
                  &tim_register[2]->MR2, &tim_register[2]->MR3 },
   14c64:	4b11      	ldr	r3, [pc, #68]	; (14cac <__static_initialization_and_destruction_0(int, int)+0xd4>)
   14c66:	689b      	ldr	r3, [r3, #8]
   14c68:	3320      	adds	r3, #32
  };
   14c6a:	4a11      	ldr	r2, [pc, #68]	; (14cb0 <__static_initialization_and_destruction_0(int, int)+0xd8>)
   14c6c:	6293      	str	r3, [r2, #40]	; 0x28
                  &tim_register[2]->MR2, &tim_register[2]->MR3 },
   14c6e:	4b0f      	ldr	r3, [pc, #60]	; (14cac <__static_initialization_and_destruction_0(int, int)+0xd4>)
   14c70:	689b      	ldr	r3, [r3, #8]
   14c72:	3324      	adds	r3, #36	; 0x24
  };
   14c74:	4a0e      	ldr	r2, [pc, #56]	; (14cb0 <__static_initialization_and_destruction_0(int, int)+0xd8>)
   14c76:	62d3      	str	r3, [r2, #44]	; 0x2c
    [kTimer3] = { &tim_register[3]->MR0, &tim_register[3]->MR1,
   14c78:	4b0c      	ldr	r3, [pc, #48]	; (14cac <__static_initialization_and_destruction_0(int, int)+0xd4>)
   14c7a:	68db      	ldr	r3, [r3, #12]
   14c7c:	3318      	adds	r3, #24
  };
   14c7e:	4a0c      	ldr	r2, [pc, #48]	; (14cb0 <__static_initialization_and_destruction_0(int, int)+0xd8>)
   14c80:	6313      	str	r3, [r2, #48]	; 0x30
    [kTimer3] = { &tim_register[3]->MR0, &tim_register[3]->MR1,
   14c82:	4b0a      	ldr	r3, [pc, #40]	; (14cac <__static_initialization_and_destruction_0(int, int)+0xd4>)
   14c84:	68db      	ldr	r3, [r3, #12]
   14c86:	331c      	adds	r3, #28
  };
   14c88:	4a09      	ldr	r2, [pc, #36]	; (14cb0 <__static_initialization_and_destruction_0(int, int)+0xd8>)
   14c8a:	6353      	str	r3, [r2, #52]	; 0x34
                  &tim_register[3]->MR2, &tim_register[3]->MR3 }
   14c8c:	4b07      	ldr	r3, [pc, #28]	; (14cac <__static_initialization_and_destruction_0(int, int)+0xd4>)
   14c8e:	68db      	ldr	r3, [r3, #12]
   14c90:	3320      	adds	r3, #32
  };
   14c92:	4a07      	ldr	r2, [pc, #28]	; (14cb0 <__static_initialization_and_destruction_0(int, int)+0xd8>)
   14c94:	6393      	str	r3, [r2, #56]	; 0x38
                  &tim_register[3]->MR2, &tim_register[3]->MR3 }
   14c96:	4b05      	ldr	r3, [pc, #20]	; (14cac <__static_initialization_and_destruction_0(int, int)+0xd4>)
   14c98:	68db      	ldr	r3, [r3, #12]
   14c9a:	3324      	adds	r3, #36	; 0x24
  };
   14c9c:	4a04      	ldr	r2, [pc, #16]	; (14cb0 <__static_initialization_and_destruction_0(int, int)+0xd8>)
   14c9e:	63d3      	str	r3, [r2, #60]	; 0x3c
   14ca0:	bf00      	nop
   14ca2:	b002      	add	sp, #8
   14ca4:	4770      	bx	lr
   14ca6:	bf00      	nop
   14ca8:	10001288 	.word	0x10001288
   14cac:	10000760 	.word	0x10000760
   14cb0:	10001238 	.word	0x10001238

00014cb4 <_GLOBAL__sub_I_UptimeRTOS>:
   14cb4:	b508      	push	{r3, lr}
   14cb6:	f64f 71ff 	movw	r1, #65535	; 0xffff
   14cba:	2001      	movs	r0, #1
   14cbc:	f7ff ff8c 	bl	14bd8 <__static_initialization_and_destruction_0(int, int)>
   14cc0:	bd08      	pop	{r3, pc}
   14cc2:	Address 0x0000000000014cc2 is out of bounds.


00014cc4 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
   14cc4:	b082      	sub	sp, #8
   14cc6:	4603      	mov	r3, r0
   14cc8:	f88d 3007 	strb.w	r3, [sp, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
   14ccc:	f99d 3007 	ldrsb.w	r3, [sp, #7]
   14cd0:	f003 021f 	and.w	r2, r3, #31
   14cd4:	4905      	ldr	r1, [pc, #20]	; (14cec <NVIC_EnableIRQ+0x28>)
   14cd6:	f99d 3007 	ldrsb.w	r3, [sp, #7]
   14cda:	095b      	lsrs	r3, r3, #5
   14cdc:	2001      	movs	r0, #1
   14cde:	fa00 f202 	lsl.w	r2, r0, r2
   14ce2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   14ce6:	bf00      	nop
   14ce8:	b002      	add	sp, #8
   14cea:	4770      	bx	lr
   14cec:	e000e100 	.word	0xe000e100

00014cf0 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
   14cf0:	b082      	sub	sp, #8
   14cf2:	4603      	mov	r3, r0
   14cf4:	9100      	str	r1, [sp, #0]
   14cf6:	f88d 3007 	strb.w	r3, [sp, #7]
  if ((int32_t)(IRQn) < 0)
   14cfa:	f99d 3007 	ldrsb.w	r3, [sp, #7]
   14cfe:	2b00      	cmp	r3, #0
   14d00:	da0c      	bge.n	14d1c <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   14d02:	9b00      	ldr	r3, [sp, #0]
   14d04:	b2da      	uxtb	r2, r3
   14d06:	490d      	ldr	r1, [pc, #52]	; (14d3c <NVIC_SetPriority+0x4c>)
   14d08:	f99d 3007 	ldrsb.w	r3, [sp, #7]
   14d0c:	f003 030f 	and.w	r3, r3, #15
   14d10:	3b04      	subs	r3, #4
   14d12:	0152      	lsls	r2, r2, #5
   14d14:	b2d2      	uxtb	r2, r2
   14d16:	440b      	add	r3, r1
   14d18:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
   14d1a:	e00b      	b.n	14d34 <NVIC_SetPriority+0x44>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   14d1c:	9b00      	ldr	r3, [sp, #0]
   14d1e:	b2db      	uxtb	r3, r3
   14d20:	4a07      	ldr	r2, [pc, #28]	; (14d40 <NVIC_SetPriority+0x50>)
   14d22:	f99d 1007 	ldrsb.w	r1, [sp, #7]
   14d26:	4608      	mov	r0, r1
   14d28:	015b      	lsls	r3, r3, #5
   14d2a:	b2d9      	uxtb	r1, r3
   14d2c:	1813      	adds	r3, r2, r0
   14d2e:	460a      	mov	r2, r1
   14d30:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
   14d34:	bf00      	nop
   14d36:	b002      	add	sp, #8
   14d38:	4770      	bx	lr
   14d3a:	bf00      	nop
   14d3c:	e000ed00 	.word	0xe000ed00
   14d40:	e000e100 	.word	0xe000e100

00014d44 <InterruptLookupHandler>:
{
   14d44:	b500      	push	{lr}
   14d46:	b085      	sub	sp, #20
  uint8_t active_isr = (SCB->ICSR & 0xFF);
   14d48:	4b12      	ldr	r3, [pc, #72]	; (14d94 <InterruptLookupHandler+0x50>)
   14d4a:	685b      	ldr	r3, [r3, #4]
   14d4c:	f88d 300f 	strb.w	r3, [sp, #15]
  IsrPointer isr     = dynamic_isr_vector_table[active_isr];
   14d50:	f89d 300f 	ldrb.w	r3, [sp, #15]
   14d54:	4a10      	ldr	r2, [pc, #64]	; (14d98 <InterruptLookupHandler+0x54>)
   14d56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14d5a:	9302      	str	r3, [sp, #8]
  SJ2_ASSERT_FATAL(isr != InterruptLookupHandler,
   14d5c:	9b02      	ldr	r3, [sp, #8]
   14d5e:	4a0f      	ldr	r2, [pc, #60]	; (14d9c <InterruptLookupHandler+0x58>)
   14d60:	4293      	cmp	r3, r2
   14d62:	d110      	bne.n	14d86 <InterruptLookupHandler+0x42>
   14d64:	f89d 300f 	ldrb.w	r3, [sp, #15]
   14d68:	9300      	str	r3, [sp, #0]
   14d6a:	23dd      	movs	r3, #221	; 0xdd
   14d6c:	4a0c      	ldr	r2, [pc, #48]	; (14da0 <InterruptLookupHandler+0x5c>)
   14d6e:	490d      	ldr	r1, [pc, #52]	; (14da4 <InterruptLookupHandler+0x60>)
   14d70:	480d      	ldr	r0, [pc, #52]	; (14da8 <InterruptLookupHandler+0x64>)
   14d72:	f001 fbc1 	bl	164f8 <printf>
   14d76:	480d      	ldr	r0, [pc, #52]	; (14dac <InterruptLookupHandler+0x68>)
   14d78:	f000 f912 	bl	14fa0 <puts>
   14d7c:	2100      	movs	r1, #0
   14d7e:	2001      	movs	r0, #1
   14d80:	f7fb fe28 	bl	109d4 <debug::PrintBacktrace(bool, void*)>
   14d84:	e7fe      	b.n	14d84 <InterruptLookupHandler+0x40>
  isr();
   14d86:	9b02      	ldr	r3, [sp, #8]
   14d88:	4798      	blx	r3
}
   14d8a:	bf00      	nop
   14d8c:	b005      	add	sp, #20
   14d8e:	f85d fb04 	ldr.w	pc, [sp], #4
   14d92:	bf00      	nop
   14d94:	e000ed00 	.word	0xe000ed00
   14d98:	100007ec 	.word	0x100007ec
   14d9c:	00014d45 	.word	0x00014d45
   14da0:	00019a08 	.word	0x00019a08
   14da4:	000199f8 	.word	0x000199f8
   14da8:	0001989c 	.word	0x0001989c
   14dac:	00019948 	.word	0x00019948

00014db0 <RegisterIsr(IRQn, void (*)(), bool, long)>:
{
   14db0:	b500      	push	{lr}
   14db2:	b085      	sub	sp, #20
   14db4:	9102      	str	r1, [sp, #8]
   14db6:	9301      	str	r3, [sp, #4]
   14db8:	4603      	mov	r3, r0
   14dba:	f88d 300f 	strb.w	r3, [sp, #15]
   14dbe:	4613      	mov	r3, r2
   14dc0:	f88d 300e 	strb.w	r3, [sp, #14]
  dynamic_isr_vector_table[irq + kIrqOffset] = isr;
   14dc4:	f99d 300f 	ldrsb.w	r3, [sp, #15]
   14dc8:	3310      	adds	r3, #16
   14dca:	490f      	ldr	r1, [pc, #60]	; (14e08 <RegisterIsr(IRQn, void (*)(), bool, long)+0x58>)
   14dcc:	9a02      	ldr	r2, [sp, #8]
   14dce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  if (enable_interrupt && irq >= 0)
   14dd2:	f89d 300e 	ldrb.w	r3, [sp, #14]
   14dd6:	2b00      	cmp	r3, #0
   14dd8:	d008      	beq.n	14dec <RegisterIsr(IRQn, void (*)(), bool, long)+0x3c>
   14dda:	f99d 300f 	ldrsb.w	r3, [sp, #15]
   14dde:	2b00      	cmp	r3, #0
   14de0:	db04      	blt.n	14dec <RegisterIsr(IRQn, void (*)(), bool, long)+0x3c>
    NVIC_EnableIRQ(irq);
   14de2:	f99d 300f 	ldrsb.w	r3, [sp, #15]
   14de6:	4618      	mov	r0, r3
   14de8:	f7ff ff6c 	bl	14cc4 <NVIC_EnableIRQ>
  if (priority > -1)
   14dec:	9b01      	ldr	r3, [sp, #4]
   14dee:	2b00      	cmp	r3, #0
   14df0:	db06      	blt.n	14e00 <RegisterIsr(IRQn, void (*)(), bool, long)+0x50>
    NVIC_SetPriority(irq, priority);
   14df2:	9a01      	ldr	r2, [sp, #4]
   14df4:	f99d 300f 	ldrsb.w	r3, [sp, #15]
   14df8:	4611      	mov	r1, r2
   14dfa:	4618      	mov	r0, r3
   14dfc:	f7ff ff78 	bl	14cf0 <NVIC_SetPriority>
}
   14e00:	bf00      	nop
   14e02:	b005      	add	sp, #20
   14e04:	f85d fb04 	ldr.w	pc, [sp], #4
   14e08:	100007ec 	.word	0x100007ec

00014e0c <GetRegistersFromStack>:
{
   14e0c:	b500      	push	{lr}
   14e0e:	b08d      	sub	sp, #52	; 0x34
   14e10:	9003      	str	r0, [sp, #12]
  volatile uint32_t r0  = fault_stack_address[0];
   14e12:	9b03      	ldr	r3, [sp, #12]
   14e14:	681b      	ldr	r3, [r3, #0]
   14e16:	930b      	str	r3, [sp, #44]	; 0x2c
  volatile uint32_t r1  = fault_stack_address[1];
   14e18:	9b03      	ldr	r3, [sp, #12]
   14e1a:	685b      	ldr	r3, [r3, #4]
   14e1c:	930a      	str	r3, [sp, #40]	; 0x28
  volatile uint32_t r2  = fault_stack_address[2];
   14e1e:	9b03      	ldr	r3, [sp, #12]
   14e20:	689b      	ldr	r3, [r3, #8]
   14e22:	9309      	str	r3, [sp, #36]	; 0x24
  volatile uint32_t r3  = fault_stack_address[3];
   14e24:	9b03      	ldr	r3, [sp, #12]
   14e26:	68db      	ldr	r3, [r3, #12]
   14e28:	9308      	str	r3, [sp, #32]
  volatile uint32_t r12 = fault_stack_address[4];
   14e2a:	9b03      	ldr	r3, [sp, #12]
   14e2c:	691b      	ldr	r3, [r3, #16]
   14e2e:	9307      	str	r3, [sp, #28]
  volatile uint32_t lr = fault_stack_address[5];
   14e30:	9b03      	ldr	r3, [sp, #12]
   14e32:	695b      	ldr	r3, [r3, #20]
   14e34:	9306      	str	r3, [sp, #24]
  volatile uint32_t pc = fault_stack_address[6];
   14e36:	9b03      	ldr	r3, [sp, #12]
   14e38:	699b      	ldr	r3, [r3, #24]
   14e3a:	9305      	str	r3, [sp, #20]
  volatile uint32_t psr = fault_stack_address[7];
   14e3c:	9b03      	ldr	r3, [sp, #12]
   14e3e:	69db      	ldr	r3, [r3, #28]
   14e40:	9304      	str	r3, [sp, #16]
  printf(SJ2_BACKGROUND_RED "Hard Fault Exception Occurred!\n" SJ2_COLOR_RESET);
   14e42:	480d      	ldr	r0, [pc, #52]	; (14e78 <GetRegistersFromStack+0x6c>)
   14e44:	f001 fb58 	bl	164f8 <printf>
  printf("r0: 0x%08" PRIX32 ", r1: 0x%08" PRIX32
   14e48:	990b      	ldr	r1, [sp, #44]	; 0x2c
   14e4a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   14e4c:	9809      	ldr	r0, [sp, #36]	; 0x24
   14e4e:	9b08      	ldr	r3, [sp, #32]
   14e50:	9300      	str	r3, [sp, #0]
   14e52:	4603      	mov	r3, r0
   14e54:	4809      	ldr	r0, [pc, #36]	; (14e7c <GetRegistersFromStack+0x70>)
   14e56:	f001 fb4f 	bl	164f8 <printf>
  printf("r12: 0x%08" PRIX32 ", lr: 0x%08" PRIX32
   14e5a:	9907      	ldr	r1, [sp, #28]
   14e5c:	9a06      	ldr	r2, [sp, #24]
   14e5e:	9805      	ldr	r0, [sp, #20]
   14e60:	9b04      	ldr	r3, [sp, #16]
   14e62:	9300      	str	r3, [sp, #0]
   14e64:	4603      	mov	r3, r0
   14e66:	4806      	ldr	r0, [pc, #24]	; (14e80 <GetRegistersFromStack+0x74>)
   14e68:	f001 fb46 	bl	164f8 <printf>
  debug::PrintBacktrace(true, reinterpret_cast<void *>(pc));
   14e6c:	9b05      	ldr	r3, [sp, #20]
   14e6e:	4619      	mov	r1, r3
   14e70:	2001      	movs	r0, #1
   14e72:	f7fb fdaf 	bl	109d4 <debug::PrintBacktrace(bool, void*)>
   14e76:	e7fe      	b.n	14e76 <GetRegistersFromStack+0x6a>
   14e78:	00019960 	.word	0x00019960
   14e7c:	0001998c 	.word	0x0001998c
   14e80:	000199c0 	.word	0x000199c0

00014e84 <FirmwareStdOut(int)>:
}
Stdout out = HostWrite;
Stdin in   = HostRead;
#else
int FirmwareStdOut(int data)
{
   14e84:	b530      	push	{r4, r5, lr}
   14e86:	b083      	sub	sp, #12
   14e88:	4675      	mov	r5, lr
   14e8a:	9001      	str	r0, [sp, #4]
   14e8c:	462b      	mov	r3, r5
   14e8e:	4619      	mov	r1, r3
   14e90:	4809      	ldr	r0, [pc, #36]	; (14eb8 <FirmwareStdOut(int)+0x34>)
   14e92:	f000 f8b5 	bl	15000 <__cyg_profile_func_enter>
  uart0.Send(static_cast<uint8_t>(data));
   14e96:	9b01      	ldr	r3, [sp, #4]
   14e98:	b2db      	uxtb	r3, r3
   14e9a:	4619      	mov	r1, r3
   14e9c:	4807      	ldr	r0, [pc, #28]	; (14ebc <FirmwareStdOut(int)+0x38>)
   14e9e:	f7ff f835 	bl	13f0c <Uart::Send(unsigned char)>
  return 1;
   14ea2:	2401      	movs	r4, #1
   14ea4:	462b      	mov	r3, r5
   14ea6:	4619      	mov	r1, r3
   14ea8:	4803      	ldr	r0, [pc, #12]	; (14eb8 <FirmwareStdOut(int)+0x34>)
   14eaa:	f000 f8bd 	bl	15028 <__cyg_profile_func_exit>
   14eae:	4623      	mov	r3, r4
}
   14eb0:	4618      	mov	r0, r3
   14eb2:	b003      	add	sp, #12
   14eb4:	bd30      	pop	{r4, r5, pc}
   14eb6:	bf00      	nop
   14eb8:	00014e85 	.word	0x00014e85
   14ebc:	100007c0 	.word	0x100007c0

00014ec0 <_exit>:
  }
  // Dummy implementation of exit with return code placed into
  // Arm register r3
  // NOLINTNEXTLINE(readability-identifier-naming)
  void _exit([[maybe_unused]] int rc)
  {
   14ec0:	b500      	push	{lr}
   14ec2:	b083      	sub	sp, #12
   14ec4:	4673      	mov	r3, lr
   14ec6:	9001      	str	r0, [sp, #4]
   14ec8:	4619      	mov	r1, r3
   14eca:	4802      	ldr	r0, [pc, #8]	; (14ed4 <_exit+0x14>)
   14ecc:	f000 f898 	bl	15000 <__cyg_profile_func_enter>
    while (1)
    {
      continue;
   14ed0:	bf00      	nop
    while (1)
   14ed2:	e7fd      	b.n	14ed0 <_exit+0x10>
   14ed4:	00014ec1 	.word	0x00014ec1

00014ed8 <_getpid>:
    }
  }
  // Dummy implementation of getpid
  // NOLINTNEXTLINE(readability-identifier-naming)
  int _getpid()
  {
   14ed8:	b538      	push	{r3, r4, r5, lr}
   14eda:	4675      	mov	r5, lr
   14edc:	462b      	mov	r3, r5
   14ede:	4619      	mov	r1, r3
   14ee0:	4805      	ldr	r0, [pc, #20]	; (14ef8 <_getpid+0x20>)
   14ee2:	f000 f88d 	bl	15000 <__cyg_profile_func_enter>
    return 1;
   14ee6:	2401      	movs	r4, #1
   14ee8:	462b      	mov	r3, r5
   14eea:	4619      	mov	r1, r3
   14eec:	4802      	ldr	r0, [pc, #8]	; (14ef8 <_getpid+0x20>)
   14eee:	f000 f89b 	bl	15028 <__cyg_profile_func_exit>
   14ef2:	4623      	mov	r3, r4
  }
   14ef4:	4618      	mov	r0, r3
   14ef6:	bd38      	pop	{r3, r4, r5, pc}
   14ef8:	00014ed9 	.word	0x00014ed9

00014efc <_kill>:
  // Dummy implementation of kill
  // NOLINTNEXTLINE(readability-identifier-naming)
  int _kill(int, int)
  {
   14efc:	b530      	push	{r4, r5, lr}
   14efe:	b083      	sub	sp, #12
   14f00:	4675      	mov	r5, lr
   14f02:	9001      	str	r0, [sp, #4]
   14f04:	9100      	str	r1, [sp, #0]
   14f06:	462b      	mov	r3, r5
   14f08:	4619      	mov	r1, r3
   14f0a:	4807      	ldr	r0, [pc, #28]	; (14f28 <_kill+0x2c>)
   14f0c:	f000 f878 	bl	15000 <__cyg_profile_func_enter>
    return -1;
   14f10:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   14f14:	462b      	mov	r3, r5
   14f16:	4619      	mov	r1, r3
   14f18:	4803      	ldr	r0, [pc, #12]	; (14f28 <_kill+0x2c>)
   14f1a:	f000 f885 	bl	15028 <__cyg_profile_func_exit>
   14f1e:	4623      	mov	r3, r4
  }
   14f20:	4618      	mov	r0, r3
   14f22:	b003      	add	sp, #12
   14f24:	bd30      	pop	{r4, r5, pc}
   14f26:	bf00      	nop
   14f28:	00014efd 	.word	0x00014efd

00014f2c <_putchar>:
    }
    return length;
  }
  // Needed by third party printf library
  void _putchar(char character)  // NOLINT
  {
   14f2c:	b510      	push	{r4, lr}
   14f2e:	b082      	sub	sp, #8
   14f30:	4674      	mov	r4, lr
   14f32:	4603      	mov	r3, r0
   14f34:	f88d 3007 	strb.w	r3, [sp, #7]
   14f38:	4623      	mov	r3, r4
   14f3a:	4619      	mov	r1, r3
   14f3c:	4808      	ldr	r0, [pc, #32]	; (14f60 <_putchar+0x34>)
   14f3e:	f000 f85f 	bl	15000 <__cyg_profile_func_enter>
    out(character);
   14f42:	4b08      	ldr	r3, [pc, #32]	; (14f64 <_putchar+0x38>)
   14f44:	681b      	ldr	r3, [r3, #0]
   14f46:	f89d 2007 	ldrb.w	r2, [sp, #7]
   14f4a:	4610      	mov	r0, r2
   14f4c:	4798      	blx	r3
   14f4e:	4623      	mov	r3, r4
   14f50:	4619      	mov	r1, r3
   14f52:	4803      	ldr	r0, [pc, #12]	; (14f60 <_putchar+0x34>)
   14f54:	f000 f868 	bl	15028 <__cyg_profile_func_exit>
  }
   14f58:	bf00      	nop
   14f5a:	b002      	add	sp, #8
   14f5c:	bd10      	pop	{r4, pc}
   14f5e:	bf00      	nop
   14f60:	00014f2d 	.word	0x00014f2d
   14f64:	100008d0 	.word	0x100008d0

00014f68 <putchar>:

  // Overload default libnano putchar() with a more optimal version that does
  // not use dynamic memory
  int putchar(int character)  // NOLINT
  {
   14f68:	b530      	push	{r4, r5, lr}
   14f6a:	b083      	sub	sp, #12
   14f6c:	4674      	mov	r4, lr
   14f6e:	9001      	str	r0, [sp, #4]
   14f70:	4623      	mov	r3, r4
   14f72:	4619      	mov	r1, r3
   14f74:	4808      	ldr	r0, [pc, #32]	; (14f98 <putchar+0x30>)
   14f76:	f000 f843 	bl	15000 <__cyg_profile_func_enter>
    return out(character);
   14f7a:	4b08      	ldr	r3, [pc, #32]	; (14f9c <putchar+0x34>)
   14f7c:	681b      	ldr	r3, [r3, #0]
   14f7e:	9801      	ldr	r0, [sp, #4]
   14f80:	4798      	blx	r3
   14f82:	4605      	mov	r5, r0
   14f84:	4623      	mov	r3, r4
   14f86:	4619      	mov	r1, r3
   14f88:	4803      	ldr	r0, [pc, #12]	; (14f98 <putchar+0x30>)
   14f8a:	f000 f84d 	bl	15028 <__cyg_profile_func_exit>
   14f8e:	462b      	mov	r3, r5
  }
   14f90:	4618      	mov	r0, r3
   14f92:	b003      	add	sp, #12
   14f94:	bd30      	pop	{r4, r5, pc}
   14f96:	bf00      	nop
   14f98:	00014f69 	.word	0x00014f69
   14f9c:	100008d0 	.word	0x100008d0

00014fa0 <puts>:

  // Overload default libnano puts() with a more optimal version that does
  // not use dynamic memory
  int puts(const char * str)  // NOLINT
  {
   14fa0:	b530      	push	{r4, r5, lr}
   14fa2:	b085      	sub	sp, #20
   14fa4:	4675      	mov	r5, lr
   14fa6:	9001      	str	r0, [sp, #4]
   14fa8:	462b      	mov	r3, r5
   14faa:	4619      	mov	r1, r3
   14fac:	4812      	ldr	r0, [pc, #72]	; (14ff8 <puts+0x58>)
   14fae:	f000 f827 	bl	15000 <__cyg_profile_func_enter>
    int i;
    for (i = 0; str[i] != '\0'; i++)
   14fb2:	2300      	movs	r3, #0
   14fb4:	9303      	str	r3, [sp, #12]
   14fb6:	9b03      	ldr	r3, [sp, #12]
   14fb8:	9a01      	ldr	r2, [sp, #4]
   14fba:	4413      	add	r3, r2
   14fbc:	781b      	ldrb	r3, [r3, #0]
   14fbe:	2b00      	cmp	r3, #0
   14fc0:	d00b      	beq.n	14fda <puts+0x3a>
    {
      out(str[i]);
   14fc2:	4b0e      	ldr	r3, [pc, #56]	; (14ffc <puts+0x5c>)
   14fc4:	681b      	ldr	r3, [r3, #0]
   14fc6:	9a03      	ldr	r2, [sp, #12]
   14fc8:	9901      	ldr	r1, [sp, #4]
   14fca:	440a      	add	r2, r1
   14fcc:	7812      	ldrb	r2, [r2, #0]
   14fce:	4610      	mov	r0, r2
   14fd0:	4798      	blx	r3
    for (i = 0; str[i] != '\0'; i++)
   14fd2:	9b03      	ldr	r3, [sp, #12]
   14fd4:	3301      	adds	r3, #1
   14fd6:	9303      	str	r3, [sp, #12]
   14fd8:	e7ed      	b.n	14fb6 <puts+0x16>
    }
    out('\n');
   14fda:	4b08      	ldr	r3, [pc, #32]	; (14ffc <puts+0x5c>)
   14fdc:	681b      	ldr	r3, [r3, #0]
   14fde:	200a      	movs	r0, #10
   14fe0:	4798      	blx	r3
    return i;
   14fe2:	9c03      	ldr	r4, [sp, #12]
   14fe4:	462b      	mov	r3, r5
   14fe6:	4619      	mov	r1, r3
   14fe8:	4803      	ldr	r0, [pc, #12]	; (14ff8 <puts+0x58>)
   14fea:	f000 f81d 	bl	15028 <__cyg_profile_func_exit>
   14fee:	4623      	mov	r3, r4
  }
   14ff0:	4618      	mov	r0, r3
   14ff2:	b005      	add	sp, #20
   14ff4:	bd30      	pop	{r4, r5, pc}
   14ff6:	bf00      	nop
   14ff8:	00014fa1 	.word	0x00014fa1
   14ffc:	100008d0 	.word	0x100008d0

00015000 <__cyg_profile_func_enter>:
  // =============================
  void * stack_trace[config::kBacktraceDepth] = { nullptr };
  size_t stack_depth = 0;

  void __cyg_profile_func_enter(void *, void * call_site)  // NOLINT
  {
   15000:	b082      	sub	sp, #8
   15002:	9001      	str	r0, [sp, #4]
   15004:	9100      	str	r1, [sp, #0]
    stack_trace[stack_depth++] = call_site;
   15006:	9a00      	ldr	r2, [sp, #0]
   15008:	4b05      	ldr	r3, [pc, #20]	; (15020 <__cyg_profile_func_enter+0x20>)
   1500a:	681b      	ldr	r3, [r3, #0]
   1500c:	1c59      	adds	r1, r3, #1
   1500e:	4804      	ldr	r0, [pc, #16]	; (15020 <__cyg_profile_func_enter+0x20>)
   15010:	6001      	str	r1, [r0, #0]
   15012:	4904      	ldr	r1, [pc, #16]	; (15024 <__cyg_profile_func_enter+0x24>)
   15014:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
   15018:	bf00      	nop
   1501a:	b002      	add	sp, #8
   1501c:	4770      	bx	lr
   1501e:	bf00      	nop
   15020:	1000138c 	.word	0x1000138c
   15024:	1000128c 	.word	0x1000128c

00015028 <__cyg_profile_func_exit>:

  void __cyg_profile_func_exit(void *, void *)  // NOLINT
  {
   15028:	b082      	sub	sp, #8
   1502a:	9001      	str	r0, [sp, #4]
   1502c:	9100      	str	r1, [sp, #0]
    stack_depth--;
   1502e:	4b04      	ldr	r3, [pc, #16]	; (15040 <__cyg_profile_func_exit+0x18>)
   15030:	681b      	ldr	r3, [r3, #0]
   15032:	3b01      	subs	r3, #1
   15034:	4a02      	ldr	r2, [pc, #8]	; (15040 <__cyg_profile_func_exit+0x18>)
   15036:	6013      	str	r3, [r2, #0]
  }
   15038:	bf00      	nop
   1503a:	b002      	add	sp, #8
   1503c:	4770      	bx	lr
   1503e:	bf00      	nop
   15040:	1000138c 	.word	0x1000138c

00015044 <GetStackTrace()>:
}

void ** GetStackTrace()
{
   15044:	b538      	push	{r3, r4, r5, lr}
   15046:	4675      	mov	r5, lr
   15048:	462b      	mov	r3, r5
   1504a:	4619      	mov	r1, r3
   1504c:	4805      	ldr	r0, [pc, #20]	; (15064 <GetStackTrace()+0x20>)
   1504e:	f7ff ffd7 	bl	15000 <__cyg_profile_func_enter>
  return stack_trace;
   15052:	4c05      	ldr	r4, [pc, #20]	; (15068 <GetStackTrace()+0x24>)
   15054:	462b      	mov	r3, r5
   15056:	4619      	mov	r1, r3
   15058:	4802      	ldr	r0, [pc, #8]	; (15064 <GetStackTrace()+0x20>)
   1505a:	f7ff ffe5 	bl	15028 <__cyg_profile_func_exit>
   1505e:	4623      	mov	r3, r4
}
   15060:	4618      	mov	r0, r3
   15062:	bd38      	pop	{r3, r4, r5, pc}
   15064:	00015045 	.word	0x00015045
   15068:	1000128c 	.word	0x1000128c

0001506c <GetStackDepth()>:

size_t GetStackDepth()
{
   1506c:	b538      	push	{r3, r4, r5, lr}
   1506e:	4675      	mov	r5, lr
   15070:	462b      	mov	r3, r5
   15072:	4619      	mov	r1, r3
   15074:	4806      	ldr	r0, [pc, #24]	; (15090 <GetStackDepth()+0x24>)
   15076:	f7ff ffc3 	bl	15000 <__cyg_profile_func_enter>
  return stack_depth;
   1507a:	4b06      	ldr	r3, [pc, #24]	; (15094 <GetStackDepth()+0x28>)
   1507c:	681c      	ldr	r4, [r3, #0]
   1507e:	462b      	mov	r3, r5
   15080:	4619      	mov	r1, r3
   15082:	4803      	ldr	r0, [pc, #12]	; (15090 <GetStackDepth()+0x24>)
   15084:	f7ff ffd0 	bl	15028 <__cyg_profile_func_exit>
   15088:	4623      	mov	r3, r4
}
   1508a:	4618      	mov	r0, r3
   1508c:	bd38      	pop	{r3, r4, r5, pc}
   1508e:	bf00      	nop
   15090:	0001506d 	.word	0x0001506d
   15094:	1000138c 	.word	0x1000138c

00015098 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
   15098:	b510      	push	{r4, lr}
   1509a:	b084      	sub	sp, #16
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
   1509c:	4b29      	ldr	r3, [pc, #164]	; (15144 <vTaskSwitchContext+0xac>)
   1509e:	681b      	ldr	r3, [r3, #0]
   150a0:	2b00      	cmp	r3, #0
   150a2:	d003      	beq.n	150ac <vTaskSwitchContext+0x14>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
   150a4:	4b28      	ldr	r3, [pc, #160]	; (15148 <vTaskSwitchContext+0xb0>)
   150a6:	2201      	movs	r2, #1
   150a8:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
   150aa:	e047      	b.n	1513c <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
   150ac:	4b26      	ldr	r3, [pc, #152]	; (15148 <vTaskSwitchContext+0xb0>)
   150ae:	2200      	movs	r2, #0
   150b0:	601a      	str	r2, [r3, #0]
					ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
   150b2:	f7ff fa8d 	bl	145d0 <UptimeRTOS>
   150b6:	4603      	mov	r3, r0
   150b8:	460c      	mov	r4, r1
   150ba:	461a      	mov	r2, r3
   150bc:	4b23      	ldr	r3, [pc, #140]	; (1514c <vTaskSwitchContext+0xb4>)
   150be:	601a      	str	r2, [r3, #0]
				if( ulTotalRunTime > ulTaskSwitchedInTime )
   150c0:	4b22      	ldr	r3, [pc, #136]	; (1514c <vTaskSwitchContext+0xb4>)
   150c2:	681a      	ldr	r2, [r3, #0]
   150c4:	4b22      	ldr	r3, [pc, #136]	; (15150 <vTaskSwitchContext+0xb8>)
   150c6:	681b      	ldr	r3, [r3, #0]
   150c8:	429a      	cmp	r2, r3
   150ca:	d909      	bls.n	150e0 <vTaskSwitchContext+0x48>
					pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
   150cc:	4b21      	ldr	r3, [pc, #132]	; (15154 <vTaskSwitchContext+0xbc>)
   150ce:	681b      	ldr	r3, [r3, #0]
   150d0:	6d59      	ldr	r1, [r3, #84]	; 0x54
   150d2:	4a1e      	ldr	r2, [pc, #120]	; (1514c <vTaskSwitchContext+0xb4>)
   150d4:	6810      	ldr	r0, [r2, #0]
   150d6:	4a1e      	ldr	r2, [pc, #120]	; (15150 <vTaskSwitchContext+0xb8>)
   150d8:	6812      	ldr	r2, [r2, #0]
   150da:	1a82      	subs	r2, r0, r2
   150dc:	440a      	add	r2, r1
   150de:	655a      	str	r2, [r3, #84]	; 0x54
				ulTaskSwitchedInTime = ulTotalRunTime;
   150e0:	4b1a      	ldr	r3, [pc, #104]	; (1514c <vTaskSwitchContext+0xb4>)
   150e2:	681b      	ldr	r3, [r3, #0]
   150e4:	4a1a      	ldr	r2, [pc, #104]	; (15150 <vTaskSwitchContext+0xb8>)
   150e6:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
   150e8:	4b1b      	ldr	r3, [pc, #108]	; (15158 <vTaskSwitchContext+0xc0>)
   150ea:	681b      	ldr	r3, [r3, #0]
   150ec:	9301      	str	r3, [sp, #4]
	/* Generic helper function. */
	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitmap )
	{
	uint8_t ucReturn;

		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
   150ee:	9b01      	ldr	r3, [sp, #4]
   150f0:	fab3 f383 	clz	r3, r3
   150f4:	f88d 3003 	strb.w	r3, [sp, #3]
		return ucReturn;
   150f8:	f89d 3003 	ldrb.w	r3, [sp, #3]
   150fc:	f1c3 031f 	rsb	r3, r3, #31
   15100:	9303      	str	r3, [sp, #12]
   15102:	9a03      	ldr	r2, [sp, #12]
   15104:	4613      	mov	r3, r2
   15106:	009b      	lsls	r3, r3, #2
   15108:	4413      	add	r3, r2
   1510a:	009b      	lsls	r3, r3, #2
   1510c:	4a13      	ldr	r2, [pc, #76]	; (1515c <vTaskSwitchContext+0xc4>)
   1510e:	4413      	add	r3, r2
   15110:	9302      	str	r3, [sp, #8]
   15112:	9b02      	ldr	r3, [sp, #8]
   15114:	685b      	ldr	r3, [r3, #4]
   15116:	685a      	ldr	r2, [r3, #4]
   15118:	9b02      	ldr	r3, [sp, #8]
   1511a:	605a      	str	r2, [r3, #4]
   1511c:	9b02      	ldr	r3, [sp, #8]
   1511e:	685a      	ldr	r2, [r3, #4]
   15120:	9b02      	ldr	r3, [sp, #8]
   15122:	3308      	adds	r3, #8
   15124:	429a      	cmp	r2, r3
   15126:	d104      	bne.n	15132 <vTaskSwitchContext+0x9a>
   15128:	9b02      	ldr	r3, [sp, #8]
   1512a:	685b      	ldr	r3, [r3, #4]
   1512c:	685a      	ldr	r2, [r3, #4]
   1512e:	9b02      	ldr	r3, [sp, #8]
   15130:	605a      	str	r2, [r3, #4]
   15132:	9b02      	ldr	r3, [sp, #8]
   15134:	685b      	ldr	r3, [r3, #4]
   15136:	68db      	ldr	r3, [r3, #12]
   15138:	4a06      	ldr	r2, [pc, #24]	; (15154 <vTaskSwitchContext+0xbc>)
   1513a:	6013      	str	r3, [r2, #0]
}
   1513c:	bf00      	nop
   1513e:	b004      	add	sp, #16
   15140:	bd10      	pop	{r4, pc}
   15142:	bf00      	nop
   15144:	10001400 	.word	0x10001400
   15148:	100013fc 	.word	0x100013fc
   1514c:	10001408 	.word	0x10001408
   15150:	10001404 	.word	0x10001404
   15154:	10001390 	.word	0x10001390
   15158:	100013f8 	.word	0x100013f8
   1515c:	10001394 	.word	0x10001394

00015160 <vPortSVCHandler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
   15160:	4b07      	ldr	r3, [pc, #28]	; (15180 <pxCurrentTCBConst2>)
   15162:	6819      	ldr	r1, [r3, #0]
   15164:	6808      	ldr	r0, [r1, #0]
   15166:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1516a:	f380 8809 	msr	PSP, r0
   1516e:	f3bf 8f6f 	isb	sy
   15172:	f04f 0000 	mov.w	r0, #0
   15176:	f380 8811 	msr	BASEPRI, r0
   1517a:	4770      	bx	lr
   1517c:	f3af 8000 	nop.w

00015180 <pxCurrentTCBConst2>:
   15180:	10001390 	.word	0x10001390
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
   15184:	bf00      	nop
   15186:	bf00      	nop
   15188:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   1518c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

00015190 <xPortPendSVHandler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
   15190:	f3ef 8009 	mrs	r0, PSP
   15194:	f3bf 8f6f 	isb	sy
   15198:	4b15      	ldr	r3, [pc, #84]	; (151f0 <pxCurrentTCBConst>)
   1519a:	681a      	ldr	r2, [r3, #0]
   1519c:	f01e 0f10 	tst.w	lr, #16
   151a0:	bf08      	it	eq
   151a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
   151a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   151aa:	6010      	str	r0, [r2, #0]
   151ac:	e92d 0009 	stmdb	sp!, {r0, r3}
   151b0:	f04f 0028 	mov.w	r0, #40	; 0x28
   151b4:	f380 8811 	msr	BASEPRI, r0
   151b8:	f3bf 8f4f 	dsb	sy
   151bc:	f3bf 8f6f 	isb	sy
   151c0:	f7ff ff6a 	bl	15098 <vTaskSwitchContext>
   151c4:	f04f 0000 	mov.w	r0, #0
   151c8:	f380 8811 	msr	BASEPRI, r0
   151cc:	bc09      	pop	{r0, r3}
   151ce:	6819      	ldr	r1, [r3, #0]
   151d0:	6808      	ldr	r0, [r1, #0]
   151d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   151d6:	f01e 0f10 	tst.w	lr, #16
   151da:	bf08      	it	eq
   151dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
   151e0:	f380 8809 	msr	PSP, r0
   151e4:	f3bf 8f6f 	isb	sy
   151e8:	4770      	bx	lr
   151ea:	bf00      	nop
   151ec:	f3af 8000 	nop.w

000151f0 <pxCurrentTCBConst>:
   151f0:	10001390 	.word	0x10001390
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
   151f4:	bf00      	nop
   151f6:	bf00      	nop

000151f8 <_out_buffer(char, void*, unsigned int, unsigned int)>:
} out_fct_wrap_type;


// internal buffer output
static inline void _out_buffer(char character, void* buffer, size_t idx, size_t maxlen)
{
   151f8:	b510      	push	{r4, lr}
   151fa:	b084      	sub	sp, #16
   151fc:	4674      	mov	r4, lr
   151fe:	9102      	str	r1, [sp, #8]
   15200:	9201      	str	r2, [sp, #4]
   15202:	9300      	str	r3, [sp, #0]
   15204:	4603      	mov	r3, r0
   15206:	f88d 300f 	strb.w	r3, [sp, #15]
   1520a:	4623      	mov	r3, r4
   1520c:	4619      	mov	r1, r3
   1520e:	480a      	ldr	r0, [pc, #40]	; (15238 <_out_buffer(char, void*, unsigned int, unsigned int)+0x40>)
   15210:	f7ff fef6 	bl	15000 <__cyg_profile_func_enter>
  if (idx < maxlen) {
   15214:	9a01      	ldr	r2, [sp, #4]
   15216:	9b00      	ldr	r3, [sp, #0]
   15218:	429a      	cmp	r2, r3
   1521a:	d205      	bcs.n	15228 <_out_buffer(char, void*, unsigned int, unsigned int)+0x30>
    ((char*)buffer)[idx] = character;
   1521c:	9a02      	ldr	r2, [sp, #8]
   1521e:	9b01      	ldr	r3, [sp, #4]
   15220:	4413      	add	r3, r2
   15222:	f89d 200f 	ldrb.w	r2, [sp, #15]
   15226:	701a      	strb	r2, [r3, #0]
   15228:	4623      	mov	r3, r4
   1522a:	4619      	mov	r1, r3
   1522c:	4802      	ldr	r0, [pc, #8]	; (15238 <_out_buffer(char, void*, unsigned int, unsigned int)+0x40>)
   1522e:	f7ff fefb 	bl	15028 <__cyg_profile_func_exit>
  }
}
   15232:	bf00      	nop
   15234:	b004      	add	sp, #16
   15236:	bd10      	pop	{r4, pc}
   15238:	000151f9 	.word	0x000151f9

0001523c <_out_null(char, void*, unsigned int, unsigned int)>:


// internal null output
static inline void _out_null(char character, void* buffer, size_t idx, size_t maxlen)
{
   1523c:	b510      	push	{r4, lr}
   1523e:	b084      	sub	sp, #16
   15240:	4674      	mov	r4, lr
   15242:	9102      	str	r1, [sp, #8]
   15244:	9201      	str	r2, [sp, #4]
   15246:	9300      	str	r3, [sp, #0]
   15248:	4603      	mov	r3, r0
   1524a:	f88d 300f 	strb.w	r3, [sp, #15]
   1524e:	4623      	mov	r3, r4
   15250:	4619      	mov	r1, r3
   15252:	4805      	ldr	r0, [pc, #20]	; (15268 <_out_null(char, void*, unsigned int, unsigned int)+0x2c>)
   15254:	f7ff fed4 	bl	15000 <__cyg_profile_func_enter>
   15258:	4623      	mov	r3, r4
   1525a:	4619      	mov	r1, r3
   1525c:	4802      	ldr	r0, [pc, #8]	; (15268 <_out_null(char, void*, unsigned int, unsigned int)+0x2c>)
   1525e:	f7ff fee3 	bl	15028 <__cyg_profile_func_exit>
  (void)character; (void)buffer; (void)idx; (void)maxlen;
}
   15262:	bf00      	nop
   15264:	b004      	add	sp, #16
   15266:	bd10      	pop	{r4, pc}
   15268:	0001523d 	.word	0x0001523d

0001526c <_out_char(char, void*, unsigned int, unsigned int)>:


// internal _putchar wrapper
static inline void _out_char(char character, void* buffer, size_t idx, size_t maxlen)
{
   1526c:	b510      	push	{r4, lr}
   1526e:	b084      	sub	sp, #16
   15270:	4674      	mov	r4, lr
   15272:	9102      	str	r1, [sp, #8]
   15274:	9201      	str	r2, [sp, #4]
   15276:	9300      	str	r3, [sp, #0]
   15278:	4603      	mov	r3, r0
   1527a:	f88d 300f 	strb.w	r3, [sp, #15]
   1527e:	4623      	mov	r3, r4
   15280:	4619      	mov	r1, r3
   15282:	480a      	ldr	r0, [pc, #40]	; (152ac <_out_char(char, void*, unsigned int, unsigned int)+0x40>)
   15284:	f7ff febc 	bl	15000 <__cyg_profile_func_enter>
  (void)buffer; (void)idx; (void)maxlen;
  if (character) {
   15288:	f89d 300f 	ldrb.w	r3, [sp, #15]
   1528c:	2b00      	cmp	r3, #0
   1528e:	d004      	beq.n	1529a <_out_char(char, void*, unsigned int, unsigned int)+0x2e>
    _putchar(character);
   15290:	f89d 300f 	ldrb.w	r3, [sp, #15]
   15294:	4618      	mov	r0, r3
   15296:	f7ff fe49 	bl	14f2c <_putchar>
   1529a:	4623      	mov	r3, r4
   1529c:	4619      	mov	r1, r3
   1529e:	4803      	ldr	r0, [pc, #12]	; (152ac <_out_char(char, void*, unsigned int, unsigned int)+0x40>)
   152a0:	f7ff fec2 	bl	15028 <__cyg_profile_func_exit>
  }
}
   152a4:	bf00      	nop
   152a6:	b004      	add	sp, #16
   152a8:	bd10      	pop	{r4, pc}
   152aa:	bf00      	nop
   152ac:	0001526d 	.word	0x0001526d

000152b0 <_strlen(char const*)>:


// internal strlen
// \return The length of the string (excluding the terminating 0)
static inline unsigned int _strlen(const char* str)
{
   152b0:	b530      	push	{r4, r5, lr}
   152b2:	b085      	sub	sp, #20
   152b4:	4674      	mov	r4, lr
   152b6:	9001      	str	r0, [sp, #4]
   152b8:	4623      	mov	r3, r4
   152ba:	4619      	mov	r1, r3
   152bc:	480c      	ldr	r0, [pc, #48]	; (152f0 <_strlen(char const*)+0x40>)
   152be:	f7ff fe9f 	bl	15000 <__cyg_profile_func_enter>
  const char* s;
  for (s = str; *s; ++s);
   152c2:	9b01      	ldr	r3, [sp, #4]
   152c4:	9303      	str	r3, [sp, #12]
   152c6:	9b03      	ldr	r3, [sp, #12]
   152c8:	781b      	ldrb	r3, [r3, #0]
   152ca:	2b00      	cmp	r3, #0
   152cc:	d003      	beq.n	152d6 <_strlen(char const*)+0x26>
   152ce:	9b03      	ldr	r3, [sp, #12]
   152d0:	3301      	adds	r3, #1
   152d2:	9303      	str	r3, [sp, #12]
   152d4:	e7f7      	b.n	152c6 <_strlen(char const*)+0x16>
  return (unsigned int)(s - str);
   152d6:	9a03      	ldr	r2, [sp, #12]
   152d8:	9b01      	ldr	r3, [sp, #4]
   152da:	1ad3      	subs	r3, r2, r3
   152dc:	461d      	mov	r5, r3
   152de:	4623      	mov	r3, r4
   152e0:	4619      	mov	r1, r3
   152e2:	4803      	ldr	r0, [pc, #12]	; (152f0 <_strlen(char const*)+0x40>)
   152e4:	f7ff fea0 	bl	15028 <__cyg_profile_func_exit>
   152e8:	462b      	mov	r3, r5
}
   152ea:	4618      	mov	r0, r3
   152ec:	b005      	add	sp, #20
   152ee:	bd30      	pop	{r4, r5, pc}
   152f0:	000152b1 	.word	0x000152b1

000152f4 <_is_digit(char)>:


// internal test if char is a digit (0-9)
// \return true if char is a digit
static inline bool _is_digit(char ch)
{
   152f4:	b530      	push	{r4, r5, lr}
   152f6:	b083      	sub	sp, #12
   152f8:	4675      	mov	r5, lr
   152fa:	4603      	mov	r3, r0
   152fc:	f88d 3007 	strb.w	r3, [sp, #7]
   15300:	462b      	mov	r3, r5
   15302:	4619      	mov	r1, r3
   15304:	480b      	ldr	r0, [pc, #44]	; (15334 <_is_digit(char)+0x40>)
   15306:	f7ff fe7b 	bl	15000 <__cyg_profile_func_enter>
  return (ch >= '0') && (ch <= '9');
   1530a:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1530e:	2b2f      	cmp	r3, #47	; 0x2f
   15310:	d905      	bls.n	1531e <_is_digit(char)+0x2a>
   15312:	f89d 3007 	ldrb.w	r3, [sp, #7]
   15316:	2b39      	cmp	r3, #57	; 0x39
   15318:	d801      	bhi.n	1531e <_is_digit(char)+0x2a>
   1531a:	2401      	movs	r4, #1
   1531c:	e000      	b.n	15320 <_is_digit(char)+0x2c>
   1531e:	2400      	movs	r4, #0
   15320:	462b      	mov	r3, r5
   15322:	4619      	mov	r1, r3
   15324:	4803      	ldr	r0, [pc, #12]	; (15334 <_is_digit(char)+0x40>)
   15326:	f7ff fe7f 	bl	15028 <__cyg_profile_func_exit>
   1532a:	4623      	mov	r3, r4
}
   1532c:	4618      	mov	r0, r3
   1532e:	b003      	add	sp, #12
   15330:	bd30      	pop	{r4, r5, pc}
   15332:	bf00      	nop
   15334:	000152f5 	.word	0x000152f5

00015338 <_atoi(char const**)>:


// internal ASCII string to unsigned int conversion
static unsigned int _atoi(const char** str)
{
   15338:	b530      	push	{r4, r5, lr}
   1533a:	b085      	sub	sp, #20
   1533c:	4675      	mov	r5, lr
   1533e:	9001      	str	r0, [sp, #4]
   15340:	462b      	mov	r3, r5
   15342:	4619      	mov	r1, r3
   15344:	4813      	ldr	r0, [pc, #76]	; (15394 <_atoi(char const**)+0x5c>)
   15346:	f7ff fe5b 	bl	15000 <__cyg_profile_func_enter>
  unsigned int i = 0U;
   1534a:	2300      	movs	r3, #0
   1534c:	9303      	str	r3, [sp, #12]
  while (_is_digit(**str)) {
   1534e:	9b01      	ldr	r3, [sp, #4]
   15350:	681b      	ldr	r3, [r3, #0]
   15352:	781b      	ldrb	r3, [r3, #0]
   15354:	4618      	mov	r0, r3
   15356:	f7ff ffcd 	bl	152f4 <_is_digit(char)>
   1535a:	4603      	mov	r3, r0
   1535c:	2b00      	cmp	r3, #0
   1535e:	d00f      	beq.n	15380 <_atoi(char const**)+0x48>
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
   15360:	9a03      	ldr	r2, [sp, #12]
   15362:	4613      	mov	r3, r2
   15364:	009b      	lsls	r3, r3, #2
   15366:	4413      	add	r3, r2
   15368:	005b      	lsls	r3, r3, #1
   1536a:	4618      	mov	r0, r3
   1536c:	9b01      	ldr	r3, [sp, #4]
   1536e:	681b      	ldr	r3, [r3, #0]
   15370:	1c59      	adds	r1, r3, #1
   15372:	9a01      	ldr	r2, [sp, #4]
   15374:	6011      	str	r1, [r2, #0]
   15376:	781b      	ldrb	r3, [r3, #0]
   15378:	4403      	add	r3, r0
   1537a:	3b30      	subs	r3, #48	; 0x30
   1537c:	9303      	str	r3, [sp, #12]
  while (_is_digit(**str)) {
   1537e:	e7e6      	b.n	1534e <_atoi(char const**)+0x16>
  }
  return i;
   15380:	9c03      	ldr	r4, [sp, #12]
   15382:	462b      	mov	r3, r5
   15384:	4619      	mov	r1, r3
   15386:	4803      	ldr	r0, [pc, #12]	; (15394 <_atoi(char const**)+0x5c>)
   15388:	f7ff fe4e 	bl	15028 <__cyg_profile_func_exit>
   1538c:	4623      	mov	r3, r4
}
   1538e:	4618      	mov	r0, r3
   15390:	b005      	add	sp, #20
   15392:	bd30      	pop	{r4, r5, pc}
   15394:	00015339 	.word	0x00015339

00015398 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)>:


// internal itoa format
static size_t _ntoa_format(out_fct_type out, char* buffer, size_t idx, size_t maxlen, char* buf, size_t len, bool negative, unsigned int base, unsigned int prec, unsigned int width, unsigned int flags)
{
   15398:	b530      	push	{r4, r5, lr}
   1539a:	b089      	sub	sp, #36	; 0x24
   1539c:	4675      	mov	r5, lr
   1539e:	9003      	str	r0, [sp, #12]
   153a0:	9102      	str	r1, [sp, #8]
   153a2:	9201      	str	r2, [sp, #4]
   153a4:	9300      	str	r3, [sp, #0]
   153a6:	462b      	mov	r3, r5
   153a8:	4619      	mov	r1, r3
   153aa:	4891      	ldr	r0, [pc, #580]	; (155f0 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x258>)
   153ac:	f7ff fe28 	bl	15000 <__cyg_profile_func_enter>
  const size_t start_idx = idx;
   153b0:	9b01      	ldr	r3, [sp, #4]
   153b2:	9305      	str	r3, [sp, #20]

  // pad leading zeros
  while (!(flags & FLAGS_LEFT) && (len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
   153b4:	9b12      	ldr	r3, [sp, #72]	; 0x48
   153b6:	f003 0302 	and.w	r3, r3, #2
   153ba:	2b00      	cmp	r3, #0
   153bc:	d10e      	bne.n	153dc <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x44>
   153be:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   153c0:	9b10      	ldr	r3, [sp, #64]	; 0x40
   153c2:	429a      	cmp	r2, r3
   153c4:	d20a      	bcs.n	153dc <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x44>
   153c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   153c8:	2b1f      	cmp	r3, #31
   153ca:	d807      	bhi.n	153dc <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x44>
    buf[len++] = '0';
   153cc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   153ce:	1c5a      	adds	r2, r3, #1
   153d0:	920d      	str	r2, [sp, #52]	; 0x34
   153d2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   153d4:	4413      	add	r3, r2
   153d6:	2230      	movs	r2, #48	; 0x30
   153d8:	701a      	strb	r2, [r3, #0]
  while (!(flags & FLAGS_LEFT) && (len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
   153da:	e7eb      	b.n	153b4 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1c>
  }
  while (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
   153dc:	9b12      	ldr	r3, [sp, #72]	; 0x48
   153de:	f003 0302 	and.w	r3, r3, #2
   153e2:	2b00      	cmp	r3, #0
   153e4:	d113      	bne.n	1540e <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x76>
   153e6:	9b12      	ldr	r3, [sp, #72]	; 0x48
   153e8:	f003 0301 	and.w	r3, r3, #1
   153ec:	2b00      	cmp	r3, #0
   153ee:	d00e      	beq.n	1540e <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x76>
   153f0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   153f2:	9b11      	ldr	r3, [sp, #68]	; 0x44
   153f4:	429a      	cmp	r2, r3
   153f6:	d20a      	bcs.n	1540e <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x76>
   153f8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   153fa:	2b1f      	cmp	r3, #31
   153fc:	d807      	bhi.n	1540e <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x76>
    buf[len++] = '0';
   153fe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   15400:	1c5a      	adds	r2, r3, #1
   15402:	920d      	str	r2, [sp, #52]	; 0x34
   15404:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   15406:	4413      	add	r3, r2
   15408:	2230      	movs	r2, #48	; 0x30
   1540a:	701a      	strb	r2, [r3, #0]
  while (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
   1540c:	e7e6      	b.n	153dc <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x44>
  }

  // handle hash
  if (flags & FLAGS_HASH) {
   1540e:	9b12      	ldr	r3, [sp, #72]	; 0x48
   15410:	f003 0310 	and.w	r3, r3, #16
   15414:	2b00      	cmp	r3, #0
   15416:	d058      	beq.n	154ca <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x132>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
   15418:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1541a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
   1541e:	2b00      	cmp	r3, #0
   15420:	d116      	bne.n	15450 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xb8>
   15422:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   15424:	2b00      	cmp	r3, #0
   15426:	d013      	beq.n	15450 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xb8>
   15428:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   1542a:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1542c:	429a      	cmp	r2, r3
   1542e:	d003      	beq.n	15438 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xa0>
   15430:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   15432:	9b11      	ldr	r3, [sp, #68]	; 0x44
   15434:	429a      	cmp	r2, r3
   15436:	d10b      	bne.n	15450 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xb8>
      len--;
   15438:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1543a:	3b01      	subs	r3, #1
   1543c:	930d      	str	r3, [sp, #52]	; 0x34
      if (len && (base == 16U)) {
   1543e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   15440:	2b00      	cmp	r3, #0
   15442:	d005      	beq.n	15450 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xb8>
   15444:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   15446:	2b10      	cmp	r3, #16
   15448:	d102      	bne.n	15450 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xb8>
        len--;
   1544a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1544c:	3b01      	subs	r3, #1
   1544e:	930d      	str	r3, [sp, #52]	; 0x34
      }
    }
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
   15450:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   15452:	2b10      	cmp	r3, #16
   15454:	d10f      	bne.n	15476 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xde>
   15456:	9b12      	ldr	r3, [sp, #72]	; 0x48
   15458:	f003 0320 	and.w	r3, r3, #32
   1545c:	2b00      	cmp	r3, #0
   1545e:	d10a      	bne.n	15476 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xde>
   15460:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   15462:	2b1f      	cmp	r3, #31
   15464:	d807      	bhi.n	15476 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xde>
      buf[len++] = 'x';
   15466:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   15468:	1c5a      	adds	r2, r3, #1
   1546a:	920d      	str	r2, [sp, #52]	; 0x34
   1546c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1546e:	4413      	add	r3, r2
   15470:	2278      	movs	r2, #120	; 0x78
   15472:	701a      	strb	r2, [r3, #0]
   15474:	e01f      	b.n	154b6 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x11e>
    }
    else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
   15476:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   15478:	2b10      	cmp	r3, #16
   1547a:	d10f      	bne.n	1549c <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x104>
   1547c:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1547e:	f003 0320 	and.w	r3, r3, #32
   15482:	2b00      	cmp	r3, #0
   15484:	d00a      	beq.n	1549c <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x104>
   15486:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   15488:	2b1f      	cmp	r3, #31
   1548a:	d807      	bhi.n	1549c <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x104>
      buf[len++] = 'X';
   1548c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1548e:	1c5a      	adds	r2, r3, #1
   15490:	920d      	str	r2, [sp, #52]	; 0x34
   15492:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   15494:	4413      	add	r3, r2
   15496:	2258      	movs	r2, #88	; 0x58
   15498:	701a      	strb	r2, [r3, #0]
   1549a:	e00c      	b.n	154b6 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x11e>
    }
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
   1549c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1549e:	2b02      	cmp	r3, #2
   154a0:	d109      	bne.n	154b6 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x11e>
   154a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   154a4:	2b1f      	cmp	r3, #31
   154a6:	d806      	bhi.n	154b6 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x11e>
      buf[len++] = 'b';
   154a8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   154aa:	1c5a      	adds	r2, r3, #1
   154ac:	920d      	str	r2, [sp, #52]	; 0x34
   154ae:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   154b0:	4413      	add	r3, r2
   154b2:	2262      	movs	r2, #98	; 0x62
   154b4:	701a      	strb	r2, [r3, #0]
    }
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
   154b6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   154b8:	2b1f      	cmp	r3, #31
   154ba:	d806      	bhi.n	154ca <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x132>
      buf[len++] = '0';
   154bc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   154be:	1c5a      	adds	r2, r3, #1
   154c0:	920d      	str	r2, [sp, #52]	; 0x34
   154c2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   154c4:	4413      	add	r3, r2
   154c6:	2230      	movs	r2, #48	; 0x30
   154c8:	701a      	strb	r2, [r3, #0]
    }
  }

  // handle sign
  if (len && (len == width) && (negative || (flags & FLAGS_PLUS) || (flags & FLAGS_SPACE))) {
   154ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   154cc:	2b00      	cmp	r3, #0
   154ce:	d014      	beq.n	154fa <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x162>
   154d0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   154d2:	9b11      	ldr	r3, [sp, #68]	; 0x44
   154d4:	429a      	cmp	r2, r3
   154d6:	d110      	bne.n	154fa <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x162>
   154d8:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
   154dc:	2b00      	cmp	r3, #0
   154de:	d109      	bne.n	154f4 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x15c>
   154e0:	9b12      	ldr	r3, [sp, #72]	; 0x48
   154e2:	f003 0304 	and.w	r3, r3, #4
   154e6:	2b00      	cmp	r3, #0
   154e8:	d104      	bne.n	154f4 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x15c>
   154ea:	9b12      	ldr	r3, [sp, #72]	; 0x48
   154ec:	f003 0308 	and.w	r3, r3, #8
   154f0:	2b00      	cmp	r3, #0
   154f2:	d002      	beq.n	154fa <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x162>
    len--;
   154f4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   154f6:	3b01      	subs	r3, #1
   154f8:	930d      	str	r3, [sp, #52]	; 0x34
  }
  if (len < PRINTF_NTOA_BUFFER_SIZE) {
   154fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   154fc:	2b1f      	cmp	r3, #31
   154fe:	d824      	bhi.n	1554a <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1b2>
    if (negative) {
   15500:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
   15504:	2b00      	cmp	r3, #0
   15506:	d007      	beq.n	15518 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x180>
      buf[len++] = '-';
   15508:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1550a:	1c5a      	adds	r2, r3, #1
   1550c:	920d      	str	r2, [sp, #52]	; 0x34
   1550e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   15510:	4413      	add	r3, r2
   15512:	222d      	movs	r2, #45	; 0x2d
   15514:	701a      	strb	r2, [r3, #0]
   15516:	e018      	b.n	1554a <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1b2>
    }
    else if (flags & FLAGS_PLUS) {
   15518:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1551a:	f003 0304 	and.w	r3, r3, #4
   1551e:	2b00      	cmp	r3, #0
   15520:	d007      	beq.n	15532 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x19a>
      buf[len++] = '+';  // ignore the space if the '+' exists
   15522:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   15524:	1c5a      	adds	r2, r3, #1
   15526:	920d      	str	r2, [sp, #52]	; 0x34
   15528:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1552a:	4413      	add	r3, r2
   1552c:	222b      	movs	r2, #43	; 0x2b
   1552e:	701a      	strb	r2, [r3, #0]
   15530:	e00b      	b.n	1554a <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1b2>
    }
    else if (flags & FLAGS_SPACE) {
   15532:	9b12      	ldr	r3, [sp, #72]	; 0x48
   15534:	f003 0308 	and.w	r3, r3, #8
   15538:	2b00      	cmp	r3, #0
   1553a:	d006      	beq.n	1554a <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1b2>
      buf[len++] = ' ';
   1553c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1553e:	1c5a      	adds	r2, r3, #1
   15540:	920d      	str	r2, [sp, #52]	; 0x34
   15542:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   15544:	4413      	add	r3, r2
   15546:	2220      	movs	r2, #32
   15548:	701a      	strb	r2, [r3, #0]
    }
  }

  // pad spaces up to given width
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
   1554a:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1554c:	f003 0302 	and.w	r3, r3, #2
   15550:	2b00      	cmp	r3, #0
   15552:	d116      	bne.n	15582 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1ea>
   15554:	9b12      	ldr	r3, [sp, #72]	; 0x48
   15556:	f003 0301 	and.w	r3, r3, #1
   1555a:	2b00      	cmp	r3, #0
   1555c:	d111      	bne.n	15582 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1ea>
    for (size_t i = len; i < width; i++) {
   1555e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   15560:	9307      	str	r3, [sp, #28]
   15562:	9a07      	ldr	r2, [sp, #28]
   15564:	9b11      	ldr	r3, [sp, #68]	; 0x44
   15566:	429a      	cmp	r2, r3
   15568:	d20b      	bcs.n	15582 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1ea>
      out(' ', buffer, idx++, maxlen);
   1556a:	9a01      	ldr	r2, [sp, #4]
   1556c:	1c53      	adds	r3, r2, #1
   1556e:	9301      	str	r3, [sp, #4]
   15570:	9c03      	ldr	r4, [sp, #12]
   15572:	9b00      	ldr	r3, [sp, #0]
   15574:	9902      	ldr	r1, [sp, #8]
   15576:	2020      	movs	r0, #32
   15578:	47a0      	blx	r4
    for (size_t i = len; i < width; i++) {
   1557a:	9b07      	ldr	r3, [sp, #28]
   1557c:	3301      	adds	r3, #1
   1557e:	9307      	str	r3, [sp, #28]
   15580:	e7ef      	b.n	15562 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1ca>
    }
  }

  // reverse string
  for (size_t i = 0U; i < len; i++) {
   15582:	2300      	movs	r3, #0
   15584:	9306      	str	r3, [sp, #24]
   15586:	9a06      	ldr	r2, [sp, #24]
   15588:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1558a:	429a      	cmp	r2, r3
   1558c:	d211      	bcs.n	155b2 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x21a>
    out(buf[len - i - 1U], buffer, idx++, maxlen);
   1558e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   15590:	9b06      	ldr	r3, [sp, #24]
   15592:	1ad3      	subs	r3, r2, r3
   15594:	3b01      	subs	r3, #1
   15596:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   15598:	4413      	add	r3, r2
   1559a:	7818      	ldrb	r0, [r3, #0]
   1559c:	9a01      	ldr	r2, [sp, #4]
   1559e:	1c53      	adds	r3, r2, #1
   155a0:	9301      	str	r3, [sp, #4]
   155a2:	9c03      	ldr	r4, [sp, #12]
   155a4:	9b00      	ldr	r3, [sp, #0]
   155a6:	9902      	ldr	r1, [sp, #8]
   155a8:	47a0      	blx	r4
  for (size_t i = 0U; i < len; i++) {
   155aa:	9b06      	ldr	r3, [sp, #24]
   155ac:	3301      	adds	r3, #1
   155ae:	9306      	str	r3, [sp, #24]
   155b0:	e7e9      	b.n	15586 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1ee>
  }

  // append pad spaces up to given width
  if (flags & FLAGS_LEFT) {
   155b2:	9b12      	ldr	r3, [sp, #72]	; 0x48
   155b4:	f003 0302 	and.w	r3, r3, #2
   155b8:	2b00      	cmp	r3, #0
   155ba:	d00e      	beq.n	155da <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x242>
    while (idx - start_idx < width) {
   155bc:	9a01      	ldr	r2, [sp, #4]
   155be:	9b05      	ldr	r3, [sp, #20]
   155c0:	1ad3      	subs	r3, r2, r3
   155c2:	9a11      	ldr	r2, [sp, #68]	; 0x44
   155c4:	429a      	cmp	r2, r3
   155c6:	d908      	bls.n	155da <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x242>
      out(' ', buffer, idx++, maxlen);
   155c8:	9a01      	ldr	r2, [sp, #4]
   155ca:	1c53      	adds	r3, r2, #1
   155cc:	9301      	str	r3, [sp, #4]
   155ce:	9c03      	ldr	r4, [sp, #12]
   155d0:	9b00      	ldr	r3, [sp, #0]
   155d2:	9902      	ldr	r1, [sp, #8]
   155d4:	2020      	movs	r0, #32
   155d6:	47a0      	blx	r4
    while (idx - start_idx < width) {
   155d8:	e7f0      	b.n	155bc <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x224>
    }
  }

  return idx;
   155da:	9c01      	ldr	r4, [sp, #4]
   155dc:	462b      	mov	r3, r5
   155de:	4619      	mov	r1, r3
   155e0:	4803      	ldr	r0, [pc, #12]	; (155f0 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x258>)
   155e2:	f7ff fd21 	bl	15028 <__cyg_profile_func_exit>
   155e6:	4623      	mov	r3, r4
}
   155e8:	4618      	mov	r0, r3
   155ea:	b009      	add	sp, #36	; 0x24
   155ec:	bd30      	pop	{r4, r5, pc}
   155ee:	bf00      	nop
   155f0:	00015399 	.word	0x00015399

000155f4 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)>:


// internal itoa for 'long' type
static size_t _ntoa_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long value, bool negative, unsigned long base, unsigned int prec, unsigned int width, unsigned int flags)
{
   155f4:	b530      	push	{r4, r5, lr}
   155f6:	b097      	sub	sp, #92	; 0x5c
   155f8:	4674      	mov	r4, lr
   155fa:	900b      	str	r0, [sp, #44]	; 0x2c
   155fc:	910a      	str	r1, [sp, #40]	; 0x28
   155fe:	9209      	str	r2, [sp, #36]	; 0x24
   15600:	9308      	str	r3, [sp, #32]
   15602:	4623      	mov	r3, r4
   15604:	4619      	mov	r1, r3
   15606:	4833      	ldr	r0, [pc, #204]	; (156d4 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0xe0>)
   15608:	f7ff fcfa 	bl	15000 <__cyg_profile_func_enter>
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
   1560c:	2300      	movs	r3, #0
   1560e:	9315      	str	r3, [sp, #84]	; 0x54

  // no hash for 0 values
  if (!value) {
   15610:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   15612:	2b00      	cmp	r3, #0
   15614:	d103      	bne.n	1561e <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x2a>
    flags &= ~FLAGS_HASH;
   15616:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   15618:	f023 0310 	bic.w	r3, r3, #16
   1561c:	931f      	str	r3, [sp, #124]	; 0x7c
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
   1561e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   15620:	f403 6380 	and.w	r3, r3, #1024	; 0x400
   15624:	2b00      	cmp	r3, #0
   15626:	d002      	beq.n	1562e <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x3a>
   15628:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   1562a:	2b00      	cmp	r3, #0
   1562c:	d033      	beq.n	15696 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0xa2>
    do {
      const char digit = (char)(value % base);
   1562e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   15630:	9a1c      	ldr	r2, [sp, #112]	; 0x70
   15632:	fbb3 f2f2 	udiv	r2, r3, r2
   15636:	991c      	ldr	r1, [sp, #112]	; 0x70
   15638:	fb01 f202 	mul.w	r2, r1, r2
   1563c:	1a9b      	subs	r3, r3, r2
   1563e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
   15642:	f89d 3053 	ldrb.w	r3, [sp, #83]	; 0x53
   15646:	2b09      	cmp	r3, #9
   15648:	d804      	bhi.n	15654 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x60>
   1564a:	f89d 3053 	ldrb.w	r3, [sp, #83]	; 0x53
   1564e:	3330      	adds	r3, #48	; 0x30
   15650:	b2da      	uxtb	r2, r3
   15652:	e00d      	b.n	15670 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x7c>
   15654:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   15656:	f003 0320 	and.w	r3, r3, #32
   1565a:	2b00      	cmp	r3, #0
   1565c:	d001      	beq.n	15662 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x6e>
   1565e:	2241      	movs	r2, #65	; 0x41
   15660:	e000      	b.n	15664 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x70>
   15662:	2261      	movs	r2, #97	; 0x61
   15664:	f89d 3053 	ldrb.w	r3, [sp, #83]	; 0x53
   15668:	4413      	add	r3, r2
   1566a:	b2db      	uxtb	r3, r3
   1566c:	3b0a      	subs	r3, #10
   1566e:	b2da      	uxtb	r2, r3
   15670:	9b15      	ldr	r3, [sp, #84]	; 0x54
   15672:	1c59      	adds	r1, r3, #1
   15674:	9115      	str	r1, [sp, #84]	; 0x54
   15676:	a916      	add	r1, sp, #88	; 0x58
   15678:	440b      	add	r3, r1
   1567a:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
   1567e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   15680:	9b1c      	ldr	r3, [sp, #112]	; 0x70
   15682:	fbb2 f3f3 	udiv	r3, r2, r3
   15686:	931a      	str	r3, [sp, #104]	; 0x68
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
   15688:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   1568a:	2b00      	cmp	r3, #0
   1568c:	d003      	beq.n	15696 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0xa2>
   1568e:	9b15      	ldr	r3, [sp, #84]	; 0x54
   15690:	2b1f      	cmp	r3, #31
   15692:	d800      	bhi.n	15696 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0xa2>
    do {
   15694:	e7cb      	b.n	1562e <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x3a>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
   15696:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   15698:	9306      	str	r3, [sp, #24]
   1569a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   1569c:	9305      	str	r3, [sp, #20]
   1569e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   156a0:	9304      	str	r3, [sp, #16]
   156a2:	9b1c      	ldr	r3, [sp, #112]	; 0x70
   156a4:	9303      	str	r3, [sp, #12]
   156a6:	f89d 306c 	ldrb.w	r3, [sp, #108]	; 0x6c
   156aa:	9302      	str	r3, [sp, #8]
   156ac:	9b15      	ldr	r3, [sp, #84]	; 0x54
   156ae:	9301      	str	r3, [sp, #4]
   156b0:	ab0c      	add	r3, sp, #48	; 0x30
   156b2:	9300      	str	r3, [sp, #0]
   156b4:	9b08      	ldr	r3, [sp, #32]
   156b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
   156b8:	990a      	ldr	r1, [sp, #40]	; 0x28
   156ba:	980b      	ldr	r0, [sp, #44]	; 0x2c
   156bc:	f7ff fe6c 	bl	15398 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)>
   156c0:	4605      	mov	r5, r0
   156c2:	4623      	mov	r3, r4
   156c4:	4619      	mov	r1, r3
   156c6:	4803      	ldr	r0, [pc, #12]	; (156d4 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0xe0>)
   156c8:	f7ff fcae 	bl	15028 <__cyg_profile_func_exit>
   156cc:	462b      	mov	r3, r5
}
   156ce:	4618      	mov	r0, r3
   156d0:	b017      	add	sp, #92	; 0x5c
   156d2:	bd30      	pop	{r4, r5, pc}
   156d4:	000155f5 	.word	0x000155f5

000156d8 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)>:


// internal itoa for 'long long' type
#if defined(PRINTF_SUPPORT_LONG_LONG)
static size_t _ntoa_long_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long long value, bool negative, unsigned long long base, unsigned int prec, unsigned int width, unsigned int flags)
{
   156d8:	b530      	push	{r4, r5, lr}
   156da:	b097      	sub	sp, #92	; 0x5c
   156dc:	4675      	mov	r5, lr
   156de:	900b      	str	r0, [sp, #44]	; 0x2c
   156e0:	910a      	str	r1, [sp, #40]	; 0x28
   156e2:	9209      	str	r2, [sp, #36]	; 0x24
   156e4:	9308      	str	r3, [sp, #32]
   156e6:	462b      	mov	r3, r5
   156e8:	4619      	mov	r1, r3
   156ea:	4837      	ldr	r0, [pc, #220]	; (157c8 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0xf0>)
   156ec:	f7ff fc88 	bl	15000 <__cyg_profile_func_enter>
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
   156f0:	2300      	movs	r3, #0
   156f2:	9315      	str	r3, [sp, #84]	; 0x54

  // no hash for 0 values
  if (!value) {
   156f4:	e9dd 341a 	ldrd	r3, r4, [sp, #104]	; 0x68
   156f8:	4323      	orrs	r3, r4
   156fa:	d103      	bne.n	15704 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0x2c>
    flags &= ~FLAGS_HASH;
   156fc:	9b22      	ldr	r3, [sp, #136]	; 0x88
   156fe:	f023 0310 	bic.w	r3, r3, #16
   15702:	9322      	str	r3, [sp, #136]	; 0x88
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
   15704:	9b22      	ldr	r3, [sp, #136]	; 0x88
   15706:	f403 6380 	and.w	r3, r3, #1024	; 0x400
   1570a:	2b00      	cmp	r3, #0
   1570c:	d003      	beq.n	15716 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0x3e>
   1570e:	e9dd 341a 	ldrd	r3, r4, [sp, #104]	; 0x68
   15712:	4323      	orrs	r3, r4
   15714:	d039      	beq.n	1578a <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0xb2>
    do {
      const char digit = (char)(value % base);
   15716:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
   1571a:	e9dd 231e 	ldrd	r2, r3, [sp, #120]	; 0x78
   1571e:	f002 fa69 	bl	17bf4 <__aeabi_uldivmod>
   15722:	461c      	mov	r4, r3
   15724:	4613      	mov	r3, r2
   15726:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
   1572a:	f89d 3053 	ldrb.w	r3, [sp, #83]	; 0x53
   1572e:	2b09      	cmp	r3, #9
   15730:	d804      	bhi.n	1573c <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0x64>
   15732:	f89d 3053 	ldrb.w	r3, [sp, #83]	; 0x53
   15736:	3330      	adds	r3, #48	; 0x30
   15738:	b2da      	uxtb	r2, r3
   1573a:	e00d      	b.n	15758 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0x80>
   1573c:	9b22      	ldr	r3, [sp, #136]	; 0x88
   1573e:	f003 0320 	and.w	r3, r3, #32
   15742:	2b00      	cmp	r3, #0
   15744:	d001      	beq.n	1574a <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0x72>
   15746:	2241      	movs	r2, #65	; 0x41
   15748:	e000      	b.n	1574c <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0x74>
   1574a:	2261      	movs	r2, #97	; 0x61
   1574c:	f89d 3053 	ldrb.w	r3, [sp, #83]	; 0x53
   15750:	4413      	add	r3, r2
   15752:	b2db      	uxtb	r3, r3
   15754:	3b0a      	subs	r3, #10
   15756:	b2da      	uxtb	r2, r3
   15758:	9b15      	ldr	r3, [sp, #84]	; 0x54
   1575a:	1c59      	adds	r1, r3, #1
   1575c:	9115      	str	r1, [sp, #84]	; 0x54
   1575e:	a916      	add	r1, sp, #88	; 0x58
   15760:	440b      	add	r3, r1
   15762:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
   15766:	e9dd 231e 	ldrd	r2, r3, [sp, #120]	; 0x78
   1576a:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
   1576e:	f002 fa41 	bl	17bf4 <__aeabi_uldivmod>
   15772:	4603      	mov	r3, r0
   15774:	460c      	mov	r4, r1
   15776:	e9cd 341a 	strd	r3, r4, [sp, #104]	; 0x68
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
   1577a:	e9dd 341a 	ldrd	r3, r4, [sp, #104]	; 0x68
   1577e:	4323      	orrs	r3, r4
   15780:	d003      	beq.n	1578a <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0xb2>
   15782:	9b15      	ldr	r3, [sp, #84]	; 0x54
   15784:	2b1f      	cmp	r3, #31
   15786:	d800      	bhi.n	1578a <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0xb2>
    do {
   15788:	e7c5      	b.n	15716 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0x3e>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
   1578a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   1578c:	9a22      	ldr	r2, [sp, #136]	; 0x88
   1578e:	9206      	str	r2, [sp, #24]
   15790:	9a21      	ldr	r2, [sp, #132]	; 0x84
   15792:	9205      	str	r2, [sp, #20]
   15794:	9a20      	ldr	r2, [sp, #128]	; 0x80
   15796:	9204      	str	r2, [sp, #16]
   15798:	9303      	str	r3, [sp, #12]
   1579a:	f89d 3070 	ldrb.w	r3, [sp, #112]	; 0x70
   1579e:	9302      	str	r3, [sp, #8]
   157a0:	9b15      	ldr	r3, [sp, #84]	; 0x54
   157a2:	9301      	str	r3, [sp, #4]
   157a4:	ab0c      	add	r3, sp, #48	; 0x30
   157a6:	9300      	str	r3, [sp, #0]
   157a8:	9b08      	ldr	r3, [sp, #32]
   157aa:	9a09      	ldr	r2, [sp, #36]	; 0x24
   157ac:	990a      	ldr	r1, [sp, #40]	; 0x28
   157ae:	980b      	ldr	r0, [sp, #44]	; 0x2c
   157b0:	f7ff fdf2 	bl	15398 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)>
   157b4:	4604      	mov	r4, r0
   157b6:	462b      	mov	r3, r5
   157b8:	4619      	mov	r1, r3
   157ba:	4803      	ldr	r0, [pc, #12]	; (157c8 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0xf0>)
   157bc:	f7ff fc34 	bl	15028 <__cyg_profile_func_exit>
   157c0:	4623      	mov	r3, r4
}
   157c2:	4618      	mov	r0, r3
   157c4:	b017      	add	sp, #92	; 0x5c
   157c6:	bd30      	pop	{r4, r5, pc}
   157c8:	000156d9 	.word	0x000156d9

000157cc <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)>:
#endif  // PRINTF_SUPPORT_LONG_LONG


#if defined(PRINTF_SUPPORT_FLOAT)
static size_t _ftoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value_param, unsigned int prec, unsigned int width, unsigned int flags)
{
   157cc:	b530      	push	{r4, r5, lr}
   157ce:	b09b      	sub	sp, #108	; 0x6c
   157d0:	4675      	mov	r5, lr
   157d2:	9005      	str	r0, [sp, #20]
   157d4:	9104      	str	r1, [sp, #16]
   157d6:	9203      	str	r2, [sp, #12]
   157d8:	9302      	str	r3, [sp, #8]
   157da:	ed8d 0b00 	vstr	d0, [sp]
   157de:	462b      	mov	r3, r5
   157e0:	4619      	mov	r1, r3
   157e2:	48b7      	ldr	r0, [pc, #732]	; (15ac0 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x2f4>)
   157e4:	f7ff fc0c 	bl	15000 <__cyg_profile_func_enter>
  const size_t start_idx = idx;
   157e8:	9b03      	ldr	r3, [sp, #12]
   157ea:	9311      	str	r3, [sp, #68]	; 0x44

  float value = static_cast<float>(value_param);
   157ec:	e9dd 0100 	ldrd	r0, r1, [sp]
   157f0:	f002 f9b0 	bl	17b54 <__aeabi_d2f>
   157f4:	4603      	mov	r3, r0
   157f6:	9319      	str	r3, [sp, #100]	; 0x64

  char buf[PRINTF_FTOA_BUFFER_SIZE];
  size_t len  = 0U;
   157f8:	2300      	movs	r3, #0
   157fa:	9318      	str	r3, [sp, #96]	; 0x60
  float diff = 0.0;
   157fc:	f04f 0300 	mov.w	r3, #0
   15800:	9310      	str	r3, [sp, #64]	; 0x40

  // if input is larger than thres_max, revert to exponential
  const float thres_max = (float)0x7FFFFFFF;
   15802:	f04f 439e 	mov.w	r3, #1325400064	; 0x4f000000
   15806:	930f      	str	r3, [sp, #60]	; 0x3c

  // powers of 10
  static const float pow10[] = { 1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000 };

  // test for negative
  bool negative = false;
   15808:	2300      	movs	r3, #0
   1580a:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
  if (value < 0) {
   1580e:	eddd 7a19 	vldr	s15, [sp, #100]	; 0x64
   15812:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   15816:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1581a:	d50a      	bpl.n	15832 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x66>
    negative = true;
   1581c:	2301      	movs	r3, #1
   1581e:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
    value = 0 - value;
   15822:	ed9f 7aa8 	vldr	s14, [pc, #672]	; 15ac4 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x2f8>
   15826:	eddd 7a19 	vldr	s15, [sp, #100]	; 0x64
   1582a:	ee77 7a67 	vsub.f32	s15, s14, s15
   1582e:	edcd 7a19 	vstr	s15, [sp, #100]	; 0x64
  }

  // set default precision to 6, if not set explicitly
  if (!(flags & FLAGS_PRECISION)) {
   15832:	9b20      	ldr	r3, [sp, #128]	; 0x80
   15834:	f403 6380 	and.w	r3, r3, #1024	; 0x400
   15838:	2b00      	cmp	r3, #0
   1583a:	d101      	bne.n	15840 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x74>
    prec = 6U;
   1583c:	2306      	movs	r3, #6
   1583e:	931e      	str	r3, [sp, #120]	; 0x78
  }
  // limit precision to 9, cause a prec >= 10 can lead to overflow errors
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
   15840:	9b18      	ldr	r3, [sp, #96]	; 0x60
   15842:	2b1f      	cmp	r3, #31
   15844:	d80e      	bhi.n	15864 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x98>
   15846:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   15848:	2b09      	cmp	r3, #9
   1584a:	d90b      	bls.n	15864 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x98>
    buf[len++] = '0';
   1584c:	9b18      	ldr	r3, [sp, #96]	; 0x60
   1584e:	1c5a      	adds	r2, r3, #1
   15850:	9218      	str	r2, [sp, #96]	; 0x60
   15852:	aa1a      	add	r2, sp, #104	; 0x68
   15854:	4413      	add	r3, r2
   15856:	2230      	movs	r2, #48	; 0x30
   15858:	f803 2c50 	strb.w	r2, [r3, #-80]
    prec--;
   1585c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   1585e:	3b01      	subs	r3, #1
   15860:	931e      	str	r3, [sp, #120]	; 0x78
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
   15862:	e7ed      	b.n	15840 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x74>
  }

  int whole = (int)value;
   15864:	eddd 7a19 	vldr	s15, [sp, #100]	; 0x64
   15868:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   1586c:	ee17 3a90 	vmov	r3, s15
   15870:	9316      	str	r3, [sp, #88]	; 0x58
  float tmp = (value - whole) * pow10[prec];
   15872:	9b16      	ldr	r3, [sp, #88]	; 0x58
   15874:	ee07 3a90 	vmov	s15, r3
   15878:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   1587c:	ed9d 7a19 	vldr	s14, [sp, #100]	; 0x64
   15880:	ee37 7a67 	vsub.f32	s14, s14, s15
   15884:	4a90      	ldr	r2, [pc, #576]	; (15ac8 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x2fc>)
   15886:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   15888:	009b      	lsls	r3, r3, #2
   1588a:	4413      	add	r3, r2
   1588c:	edd3 7a00 	vldr	s15, [r3]
   15890:	ee67 7a27 	vmul.f32	s15, s14, s15
   15894:	edcd 7a0e 	vstr	s15, [sp, #56]	; 0x38
  unsigned long frac = (unsigned long)tmp;
   15898:	eddd 7a0e 	vldr	s15, [sp, #56]	; 0x38
   1589c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
   158a0:	ee17 3a90 	vmov	r3, s15
   158a4:	9315      	str	r3, [sp, #84]	; 0x54
  diff = tmp - frac;
   158a6:	9b15      	ldr	r3, [sp, #84]	; 0x54
   158a8:	ee07 3a90 	vmov	s15, r3
   158ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
   158b0:	ed9d 7a0e 	vldr	s14, [sp, #56]	; 0x38
   158b4:	ee77 7a67 	vsub.f32	s15, s14, s15
   158b8:	edcd 7a10 	vstr	s15, [sp, #64]	; 0x40

  if (diff > 0.5) {
   158bc:	eddd 7a10 	vldr	s15, [sp, #64]	; 0x40
   158c0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
   158c4:	eef4 7ac7 	vcmpe.f32	s15, s14
   158c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   158cc:	dd18      	ble.n	15900 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x134>
    ++frac;
   158ce:	9b15      	ldr	r3, [sp, #84]	; 0x54
   158d0:	3301      	adds	r3, #1
   158d2:	9315      	str	r3, [sp, #84]	; 0x54
    // handle rollover, e.g. case 0.99 with prec 1 is 1.0
    if (frac >= pow10[prec]) {
   158d4:	9b15      	ldr	r3, [sp, #84]	; 0x54
   158d6:	ee07 3a90 	vmov	s15, r3
   158da:	eeb8 7a67 	vcvt.f32.u32	s14, s15
   158de:	4a7a      	ldr	r2, [pc, #488]	; (15ac8 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x2fc>)
   158e0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   158e2:	009b      	lsls	r3, r3, #2
   158e4:	4413      	add	r3, r2
   158e6:	edd3 7a00 	vldr	s15, [r3]
   158ea:	eeb4 7ae7 	vcmpe.f32	s14, s15
   158ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   158f2:	db19      	blt.n	15928 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x15c>
      frac = 0;
   158f4:	2300      	movs	r3, #0
   158f6:	9315      	str	r3, [sp, #84]	; 0x54
      ++whole;
   158f8:	9b16      	ldr	r3, [sp, #88]	; 0x58
   158fa:	3301      	adds	r3, #1
   158fc:	9316      	str	r3, [sp, #88]	; 0x58
   158fe:	e013      	b.n	15928 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x15c>
    }
  }
  else if ((diff == 0.5) && ((frac == 0U) || (frac & 1U))) {
   15900:	eddd 7a10 	vldr	s15, [sp, #64]	; 0x40
   15904:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
   15908:	eef4 7a47 	vcmp.f32	s15, s14
   1590c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   15910:	d10a      	bne.n	15928 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x15c>
   15912:	9b15      	ldr	r3, [sp, #84]	; 0x54
   15914:	2b00      	cmp	r3, #0
   15916:	d004      	beq.n	15922 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x156>
   15918:	9b15      	ldr	r3, [sp, #84]	; 0x54
   1591a:	f003 0301 	and.w	r3, r3, #1
   1591e:	2b00      	cmp	r3, #0
   15920:	d002      	beq.n	15928 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x15c>
    // if halfway, round up if odd, OR if last digit is 0
    ++frac;
   15922:	9b15      	ldr	r3, [sp, #84]	; 0x54
   15924:	3301      	adds	r3, #1
   15926:	9315      	str	r3, [sp, #84]	; 0x54
  }

  // TBD: for very large numbers switch back to native sprintf for exponentials. Anyone want to write code to replace this?
  // Normal printf behavior is to print EVERY whole number digit which can be 100s of characters overflowing your buffers == bad
  if (value > thres_max) {
   15928:	eddd 7a19 	vldr	s15, [sp, #100]	; 0x64
   1592c:	ed9f 7a67 	vldr	s14, [pc, #412]	; 15acc <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x300>
   15930:	eef4 7ac7 	vcmpe.f32	s15, s14
   15934:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   15938:	dd01      	ble.n	1593e <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x172>
    return 0U;
   1593a:	2400      	movs	r4, #0
   1593c:	e156      	b.n	15bec <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x420>
  }

  if (prec == 0U) {
   1593e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   15940:	2b00      	cmp	r3, #0
   15942:	d129      	bne.n	15998 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x1cc>
    diff = value - (float)whole;
   15944:	9b16      	ldr	r3, [sp, #88]	; 0x58
   15946:	ee07 3a90 	vmov	s15, r3
   1594a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   1594e:	ed9d 7a19 	vldr	s14, [sp, #100]	; 0x64
   15952:	ee77 7a67 	vsub.f32	s15, s14, s15
   15956:	edcd 7a10 	vstr	s15, [sp, #64]	; 0x40
    if (diff > 0.5) {
   1595a:	eddd 7a10 	vldr	s15, [sp, #64]	; 0x40
   1595e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
   15962:	eef4 7ac7 	vcmpe.f32	s15, s14
   15966:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1596a:	dd03      	ble.n	15974 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x1a8>
      // greater than 0.5, round up, e.g. 1.6 -> 2
      ++whole;
   1596c:	9b16      	ldr	r3, [sp, #88]	; 0x58
   1596e:	3301      	adds	r3, #1
   15970:	9316      	str	r3, [sp, #88]	; 0x58
   15972:	e05f      	b.n	15a34 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x268>
    }
    else if ((diff == 0.5) && (whole & 1)) {
   15974:	eddd 7a10 	vldr	s15, [sp, #64]	; 0x40
   15978:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
   1597c:	eef4 7a47 	vcmp.f32	s15, s14
   15980:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   15984:	d156      	bne.n	15a34 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x268>
   15986:	9b16      	ldr	r3, [sp, #88]	; 0x58
   15988:	f003 0301 	and.w	r3, r3, #1
   1598c:	2b00      	cmp	r3, #0
   1598e:	d051      	beq.n	15a34 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x268>
      // exactly 0.5 and ODD, then round up
      // 1.5 -> 2, but 2.5 -> 2
      ++whole;
   15990:	9b16      	ldr	r3, [sp, #88]	; 0x58
   15992:	3301      	adds	r3, #1
   15994:	9316      	str	r3, [sp, #88]	; 0x58
   15996:	e04d      	b.n	15a34 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x268>
    }
  }
  else {
    unsigned int count = prec;
   15998:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   1599a:	9314      	str	r3, [sp, #80]	; 0x50
    // now do fractional part, as an unsigned number
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
   1599c:	9b18      	ldr	r3, [sp, #96]	; 0x60
   1599e:	2b1f      	cmp	r3, #31
   159a0:	d827      	bhi.n	159f2 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x226>
      --count;
   159a2:	9b14      	ldr	r3, [sp, #80]	; 0x50
   159a4:	3b01      	subs	r3, #1
   159a6:	9314      	str	r3, [sp, #80]	; 0x50
      buf[len++] = (char)(48U + (frac % 10U));
   159a8:	9915      	ldr	r1, [sp, #84]	; 0x54
   159aa:	4b49      	ldr	r3, [pc, #292]	; (15ad0 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x304>)
   159ac:	fba3 2301 	umull	r2, r3, r3, r1
   159b0:	08da      	lsrs	r2, r3, #3
   159b2:	4613      	mov	r3, r2
   159b4:	009b      	lsls	r3, r3, #2
   159b6:	4413      	add	r3, r2
   159b8:	005b      	lsls	r3, r3, #1
   159ba:	1aca      	subs	r2, r1, r3
   159bc:	b2d3      	uxtb	r3, r2
   159be:	3330      	adds	r3, #48	; 0x30
   159c0:	b2d9      	uxtb	r1, r3
   159c2:	9b18      	ldr	r3, [sp, #96]	; 0x60
   159c4:	1c5a      	adds	r2, r3, #1
   159c6:	9218      	str	r2, [sp, #96]	; 0x60
   159c8:	aa1a      	add	r2, sp, #104	; 0x68
   159ca:	4413      	add	r3, r2
   159cc:	460a      	mov	r2, r1
   159ce:	f803 2c50 	strb.w	r2, [r3, #-80]
      if (!(frac /= 10U)) {
   159d2:	9b15      	ldr	r3, [sp, #84]	; 0x54
   159d4:	4a3e      	ldr	r2, [pc, #248]	; (15ad0 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x304>)
   159d6:	fba2 2303 	umull	r2, r3, r2, r3
   159da:	08db      	lsrs	r3, r3, #3
   159dc:	9315      	str	r3, [sp, #84]	; 0x54
   159de:	9b15      	ldr	r3, [sp, #84]	; 0x54
   159e0:	2b00      	cmp	r3, #0
   159e2:	bf0c      	ite	eq
   159e4:	2301      	moveq	r3, #1
   159e6:	2300      	movne	r3, #0
   159e8:	b2db      	uxtb	r3, r3
   159ea:	2b00      	cmp	r3, #0
   159ec:	d100      	bne.n	159f0 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x224>
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
   159ee:	e7d5      	b.n	1599c <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x1d0>
        break;
   159f0:	bf00      	nop
      }
    }
    // add extra 0s
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
   159f2:	9b18      	ldr	r3, [sp, #96]	; 0x60
   159f4:	2b1f      	cmp	r3, #31
   159f6:	d806      	bhi.n	15a06 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x23a>
   159f8:	9b14      	ldr	r3, [sp, #80]	; 0x50
   159fa:	1e5a      	subs	r2, r3, #1
   159fc:	9214      	str	r2, [sp, #80]	; 0x50
   159fe:	2b00      	cmp	r3, #0
   15a00:	d001      	beq.n	15a06 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x23a>
   15a02:	2301      	movs	r3, #1
   15a04:	e000      	b.n	15a08 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x23c>
   15a06:	2300      	movs	r3, #0
   15a08:	2b00      	cmp	r3, #0
   15a0a:	d008      	beq.n	15a1e <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x252>
      buf[len++] = '0';
   15a0c:	9b18      	ldr	r3, [sp, #96]	; 0x60
   15a0e:	1c5a      	adds	r2, r3, #1
   15a10:	9218      	str	r2, [sp, #96]	; 0x60
   15a12:	aa1a      	add	r2, sp, #104	; 0x68
   15a14:	4413      	add	r3, r2
   15a16:	2230      	movs	r2, #48	; 0x30
   15a18:	f803 2c50 	strb.w	r2, [r3, #-80]
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
   15a1c:	e7e9      	b.n	159f2 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x226>
    }
    if (len < PRINTF_FTOA_BUFFER_SIZE) {
   15a1e:	9b18      	ldr	r3, [sp, #96]	; 0x60
   15a20:	2b1f      	cmp	r3, #31
   15a22:	d807      	bhi.n	15a34 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x268>
      // add decimal
      buf[len++] = '.';
   15a24:	9b18      	ldr	r3, [sp, #96]	; 0x60
   15a26:	1c5a      	adds	r2, r3, #1
   15a28:	9218      	str	r2, [sp, #96]	; 0x60
   15a2a:	aa1a      	add	r2, sp, #104	; 0x68
   15a2c:	4413      	add	r3, r2
   15a2e:	222e      	movs	r2, #46	; 0x2e
   15a30:	f803 2c50 	strb.w	r2, [r3, #-80]
    }
  }

  // do whole part, number is reversed
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
   15a34:	9b18      	ldr	r3, [sp, #96]	; 0x60
   15a36:	2b1f      	cmp	r3, #31
   15a38:	d828      	bhi.n	15a8c <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x2c0>
    buf[len++] = (char)(48 + (whole % 10));
   15a3a:	9a16      	ldr	r2, [sp, #88]	; 0x58
   15a3c:	4b25      	ldr	r3, [pc, #148]	; (15ad4 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x308>)
   15a3e:	fb83 1302 	smull	r1, r3, r3, r2
   15a42:	1099      	asrs	r1, r3, #2
   15a44:	17d3      	asrs	r3, r2, #31
   15a46:	1ac9      	subs	r1, r1, r3
   15a48:	460b      	mov	r3, r1
   15a4a:	009b      	lsls	r3, r3, #2
   15a4c:	440b      	add	r3, r1
   15a4e:	005b      	lsls	r3, r3, #1
   15a50:	1ad1      	subs	r1, r2, r3
   15a52:	b2cb      	uxtb	r3, r1
   15a54:	3330      	adds	r3, #48	; 0x30
   15a56:	b2d9      	uxtb	r1, r3
   15a58:	9b18      	ldr	r3, [sp, #96]	; 0x60
   15a5a:	1c5a      	adds	r2, r3, #1
   15a5c:	9218      	str	r2, [sp, #96]	; 0x60
   15a5e:	aa1a      	add	r2, sp, #104	; 0x68
   15a60:	4413      	add	r3, r2
   15a62:	460a      	mov	r2, r1
   15a64:	f803 2c50 	strb.w	r2, [r3, #-80]
    if (!(whole /= 10)) {
   15a68:	9b16      	ldr	r3, [sp, #88]	; 0x58
   15a6a:	4a1a      	ldr	r2, [pc, #104]	; (15ad4 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x308>)
   15a6c:	fb82 1203 	smull	r1, r2, r2, r3
   15a70:	1092      	asrs	r2, r2, #2
   15a72:	17db      	asrs	r3, r3, #31
   15a74:	1ad3      	subs	r3, r2, r3
   15a76:	9316      	str	r3, [sp, #88]	; 0x58
   15a78:	9b16      	ldr	r3, [sp, #88]	; 0x58
   15a7a:	2b00      	cmp	r3, #0
   15a7c:	bf0c      	ite	eq
   15a7e:	2301      	moveq	r3, #1
   15a80:	2300      	movne	r3, #0
   15a82:	b2db      	uxtb	r3, r3
   15a84:	2b00      	cmp	r3, #0
   15a86:	d100      	bne.n	15a8a <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x2be>
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
   15a88:	e7d4      	b.n	15a34 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x268>
      break;
   15a8a:	bf00      	nop
    }
  }

  // pad leading zeros
  while (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
   15a8c:	9b20      	ldr	r3, [sp, #128]	; 0x80
   15a8e:	f003 0302 	and.w	r3, r3, #2
   15a92:	2b00      	cmp	r3, #0
   15a94:	d120      	bne.n	15ad8 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x30c>
   15a96:	9b20      	ldr	r3, [sp, #128]	; 0x80
   15a98:	f003 0301 	and.w	r3, r3, #1
   15a9c:	2b00      	cmp	r3, #0
   15a9e:	d01b      	beq.n	15ad8 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x30c>
   15aa0:	9a18      	ldr	r2, [sp, #96]	; 0x60
   15aa2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   15aa4:	429a      	cmp	r2, r3
   15aa6:	d217      	bcs.n	15ad8 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x30c>
   15aa8:	9b18      	ldr	r3, [sp, #96]	; 0x60
   15aaa:	2b1f      	cmp	r3, #31
   15aac:	d814      	bhi.n	15ad8 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x30c>
    buf[len++] = '0';
   15aae:	9b18      	ldr	r3, [sp, #96]	; 0x60
   15ab0:	1c5a      	adds	r2, r3, #1
   15ab2:	9218      	str	r2, [sp, #96]	; 0x60
   15ab4:	aa1a      	add	r2, sp, #104	; 0x68
   15ab6:	4413      	add	r3, r2
   15ab8:	2230      	movs	r2, #48	; 0x30
   15aba:	f803 2c50 	strb.w	r2, [r3, #-80]
  while (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
   15abe:	e7e5      	b.n	15a8c <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x2c0>
   15ac0:	000157cd 	.word	0x000157cd
   15ac4:	00000000 	.word	0x00000000
   15ac8:	00019a28 	.word	0x00019a28
   15acc:	4f000000 	.word	0x4f000000
   15ad0:	cccccccd 	.word	0xcccccccd
   15ad4:	66666667 	.word	0x66666667
  }

  // handle sign
  if ((len == width) && (negative || (flags & FLAGS_PLUS) || (flags & FLAGS_SPACE))) {
   15ad8:	9a18      	ldr	r2, [sp, #96]	; 0x60
   15ada:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   15adc:	429a      	cmp	r2, r3
   15ade:	d110      	bne.n	15b02 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x336>
   15ae0:	f89d 305f 	ldrb.w	r3, [sp, #95]	; 0x5f
   15ae4:	2b00      	cmp	r3, #0
   15ae6:	d109      	bne.n	15afc <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x330>
   15ae8:	9b20      	ldr	r3, [sp, #128]	; 0x80
   15aea:	f003 0304 	and.w	r3, r3, #4
   15aee:	2b00      	cmp	r3, #0
   15af0:	d104      	bne.n	15afc <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x330>
   15af2:	9b20      	ldr	r3, [sp, #128]	; 0x80
   15af4:	f003 0308 	and.w	r3, r3, #8
   15af8:	2b00      	cmp	r3, #0
   15afa:	d002      	beq.n	15b02 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x336>
    len--;
   15afc:	9b18      	ldr	r3, [sp, #96]	; 0x60
   15afe:	3b01      	subs	r3, #1
   15b00:	9318      	str	r3, [sp, #96]	; 0x60
  }
  if (len < PRINTF_FTOA_BUFFER_SIZE) {
   15b02:	9b18      	ldr	r3, [sp, #96]	; 0x60
   15b04:	2b1f      	cmp	r3, #31
   15b06:	d827      	bhi.n	15b58 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x38c>
    if (negative) {
   15b08:	f89d 305f 	ldrb.w	r3, [sp, #95]	; 0x5f
   15b0c:	2b00      	cmp	r3, #0
   15b0e:	d008      	beq.n	15b22 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x356>
      buf[len++] = '-';
   15b10:	9b18      	ldr	r3, [sp, #96]	; 0x60
   15b12:	1c5a      	adds	r2, r3, #1
   15b14:	9218      	str	r2, [sp, #96]	; 0x60
   15b16:	aa1a      	add	r2, sp, #104	; 0x68
   15b18:	4413      	add	r3, r2
   15b1a:	222d      	movs	r2, #45	; 0x2d
   15b1c:	f803 2c50 	strb.w	r2, [r3, #-80]
   15b20:	e01a      	b.n	15b58 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x38c>
    }
    else if (flags & FLAGS_PLUS) {
   15b22:	9b20      	ldr	r3, [sp, #128]	; 0x80
   15b24:	f003 0304 	and.w	r3, r3, #4
   15b28:	2b00      	cmp	r3, #0
   15b2a:	d008      	beq.n	15b3e <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x372>
      buf[len++] = '+';  // ignore the space if the '+' exists
   15b2c:	9b18      	ldr	r3, [sp, #96]	; 0x60
   15b2e:	1c5a      	adds	r2, r3, #1
   15b30:	9218      	str	r2, [sp, #96]	; 0x60
   15b32:	aa1a      	add	r2, sp, #104	; 0x68
   15b34:	4413      	add	r3, r2
   15b36:	222b      	movs	r2, #43	; 0x2b
   15b38:	f803 2c50 	strb.w	r2, [r3, #-80]
   15b3c:	e00c      	b.n	15b58 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x38c>
    }
    else if (flags & FLAGS_SPACE) {
   15b3e:	9b20      	ldr	r3, [sp, #128]	; 0x80
   15b40:	f003 0308 	and.w	r3, r3, #8
   15b44:	2b00      	cmp	r3, #0
   15b46:	d007      	beq.n	15b58 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x38c>
      buf[len++] = ' ';
   15b48:	9b18      	ldr	r3, [sp, #96]	; 0x60
   15b4a:	1c5a      	adds	r2, r3, #1
   15b4c:	9218      	str	r2, [sp, #96]	; 0x60
   15b4e:	aa1a      	add	r2, sp, #104	; 0x68
   15b50:	4413      	add	r3, r2
   15b52:	2220      	movs	r2, #32
   15b54:	f803 2c50 	strb.w	r2, [r3, #-80]
    }
  }

  // pad spaces up to given width
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
   15b58:	9b20      	ldr	r3, [sp, #128]	; 0x80
   15b5a:	f003 0302 	and.w	r3, r3, #2
   15b5e:	2b00      	cmp	r3, #0
   15b60:	d116      	bne.n	15b90 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x3c4>
   15b62:	9b20      	ldr	r3, [sp, #128]	; 0x80
   15b64:	f003 0301 	and.w	r3, r3, #1
   15b68:	2b00      	cmp	r3, #0
   15b6a:	d111      	bne.n	15b90 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x3c4>
    for (size_t i = len; i < width; i++) {
   15b6c:	9b18      	ldr	r3, [sp, #96]	; 0x60
   15b6e:	9313      	str	r3, [sp, #76]	; 0x4c
   15b70:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   15b72:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   15b74:	429a      	cmp	r2, r3
   15b76:	d20b      	bcs.n	15b90 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x3c4>
      out(' ', buffer, idx++, maxlen);
   15b78:	9a03      	ldr	r2, [sp, #12]
   15b7a:	1c53      	adds	r3, r2, #1
   15b7c:	9303      	str	r3, [sp, #12]
   15b7e:	9c05      	ldr	r4, [sp, #20]
   15b80:	9b02      	ldr	r3, [sp, #8]
   15b82:	9904      	ldr	r1, [sp, #16]
   15b84:	2020      	movs	r0, #32
   15b86:	47a0      	blx	r4
    for (size_t i = len; i < width; i++) {
   15b88:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   15b8a:	3301      	adds	r3, #1
   15b8c:	9313      	str	r3, [sp, #76]	; 0x4c
   15b8e:	e7ef      	b.n	15b70 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x3a4>
    }
  }

  // reverse string
  for (size_t i = 0U; i < len; i++) {
   15b90:	2300      	movs	r3, #0
   15b92:	9312      	str	r3, [sp, #72]	; 0x48
   15b94:	9a12      	ldr	r2, [sp, #72]	; 0x48
   15b96:	9b18      	ldr	r3, [sp, #96]	; 0x60
   15b98:	429a      	cmp	r2, r3
   15b9a:	d212      	bcs.n	15bc2 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x3f6>
    out(buf[len - i - 1U], buffer, idx++, maxlen);
   15b9c:	9a18      	ldr	r2, [sp, #96]	; 0x60
   15b9e:	9b12      	ldr	r3, [sp, #72]	; 0x48
   15ba0:	1ad3      	subs	r3, r2, r3
   15ba2:	3b01      	subs	r3, #1
   15ba4:	aa1a      	add	r2, sp, #104	; 0x68
   15ba6:	4413      	add	r3, r2
   15ba8:	f813 0c50 	ldrb.w	r0, [r3, #-80]
   15bac:	9a03      	ldr	r2, [sp, #12]
   15bae:	1c53      	adds	r3, r2, #1
   15bb0:	9303      	str	r3, [sp, #12]
   15bb2:	9c05      	ldr	r4, [sp, #20]
   15bb4:	9b02      	ldr	r3, [sp, #8]
   15bb6:	9904      	ldr	r1, [sp, #16]
   15bb8:	47a0      	blx	r4
  for (size_t i = 0U; i < len; i++) {
   15bba:	9b12      	ldr	r3, [sp, #72]	; 0x48
   15bbc:	3301      	adds	r3, #1
   15bbe:	9312      	str	r3, [sp, #72]	; 0x48
   15bc0:	e7e8      	b.n	15b94 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x3c8>
  }

  // append pad spaces up to given width
  if (flags & FLAGS_LEFT) {
   15bc2:	9b20      	ldr	r3, [sp, #128]	; 0x80
   15bc4:	f003 0302 	and.w	r3, r3, #2
   15bc8:	2b00      	cmp	r3, #0
   15bca:	d00e      	beq.n	15bea <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x41e>
    while (idx - start_idx < width) {
   15bcc:	9a03      	ldr	r2, [sp, #12]
   15bce:	9b11      	ldr	r3, [sp, #68]	; 0x44
   15bd0:	1ad3      	subs	r3, r2, r3
   15bd2:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   15bd4:	429a      	cmp	r2, r3
   15bd6:	d908      	bls.n	15bea <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x41e>
      out(' ', buffer, idx++, maxlen);
   15bd8:	9a03      	ldr	r2, [sp, #12]
   15bda:	1c53      	adds	r3, r2, #1
   15bdc:	9303      	str	r3, [sp, #12]
   15bde:	9c05      	ldr	r4, [sp, #20]
   15be0:	9b02      	ldr	r3, [sp, #8]
   15be2:	9904      	ldr	r1, [sp, #16]
   15be4:	2020      	movs	r0, #32
   15be6:	47a0      	blx	r4
    while (idx - start_idx < width) {
   15be8:	e7f0      	b.n	15bcc <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x400>
    }
  }

  return idx;
   15bea:	9c03      	ldr	r4, [sp, #12]
   15bec:	462b      	mov	r3, r5
   15bee:	4619      	mov	r1, r3
   15bf0:	4803      	ldr	r0, [pc, #12]	; (15c00 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x434>)
   15bf2:	f7ff fa19 	bl	15028 <__cyg_profile_func_exit>
   15bf6:	4623      	mov	r3, r4
}
   15bf8:	4618      	mov	r0, r3
   15bfa:	b01b      	add	sp, #108	; 0x6c
   15bfc:	bd30      	pop	{r4, r5, pc}
   15bfe:	bf00      	nop
   15c00:	000157cd 	.word	0x000157cd

00015c04 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)>:
#endif  // PRINTF_SUPPORT_FLOAT


// internal vsnprintf
static int _vsnprintf(out_fct_type out, char* buffer, const size_t maxlen, const char* format, va_list va)
{
   15c04:	b570      	push	{r4, r5, r6, lr}
   15c06:	b0a0      	sub	sp, #128	; 0x80
   15c08:	4676      	mov	r6, lr
   15c0a:	900d      	str	r0, [sp, #52]	; 0x34
   15c0c:	910c      	str	r1, [sp, #48]	; 0x30
   15c0e:	920b      	str	r2, [sp, #44]	; 0x2c
   15c10:	930a      	str	r3, [sp, #40]	; 0x28
   15c12:	4633      	mov	r3, r6
   15c14:	4619      	mov	r1, r3
   15c16:	48a7      	ldr	r0, [pc, #668]	; (15eb4 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2b0>)
   15c18:	f7ff f9f2 	bl	15000 <__cyg_profile_func_enter>
  unsigned int flags, width, precision, n;
  size_t idx = 0U;
   15c1c:	2300      	movs	r3, #0
   15c1e:	931b      	str	r3, [sp, #108]	; 0x6c

  if (!buffer) {
   15c20:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   15c22:	2b00      	cmp	r3, #0
   15c24:	d101      	bne.n	15c2a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x26>
    // use null output function
    out = _out_null;
   15c26:	4ba4      	ldr	r3, [pc, #656]	; (15eb8 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2b4>)
   15c28:	930d      	str	r3, [sp, #52]	; 0x34
  }

  while (*format)
   15c2a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   15c2c:	781b      	ldrb	r3, [r3, #0]
   15c2e:	2b00      	cmp	r3, #0
   15c30:	f000 8448 	beq.w	164c4 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8c0>
  {
    // format specifier?  %[flags][width][.precision][length]
    if (*format != '%') {
   15c34:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   15c36:	781b      	ldrb	r3, [r3, #0]
   15c38:	2b25      	cmp	r3, #37	; 0x25
   15c3a:	d00d      	beq.n	15c58 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x54>
      // no
      out(*format, buffer, idx++, maxlen);
   15c3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   15c3e:	7818      	ldrb	r0, [r3, #0]
   15c40:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   15c42:	1c53      	adds	r3, r2, #1
   15c44:	931b      	str	r3, [sp, #108]	; 0x6c
   15c46:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   15c48:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   15c4a:	990c      	ldr	r1, [sp, #48]	; 0x30
   15c4c:	47a0      	blx	r4
      format++;
   15c4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   15c50:	3301      	adds	r3, #1
   15c52:	930a      	str	r3, [sp, #40]	; 0x28
      continue;
   15c54:	f000 bc34 	b.w	164c0 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8bc>
    }
    else {
      // yes, evaluate it
      format++;
   15c58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   15c5a:	3301      	adds	r3, #1
   15c5c:	930a      	str	r3, [sp, #40]	; 0x28
    }

    // evaluate flags
    flags = 0U;
   15c5e:	2300      	movs	r3, #0
   15c60:	931f      	str	r3, [sp, #124]	; 0x7c
    do {
      switch (*format) {
   15c62:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   15c64:	781b      	ldrb	r3, [r3, #0]
   15c66:	3b20      	subs	r3, #32
   15c68:	2b10      	cmp	r3, #16
   15c6a:	d857      	bhi.n	15d1c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x118>
   15c6c:	a201      	add	r2, pc, #4	; (adr r2, 15c74 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x70>)
   15c6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   15c72:	bf00      	nop
   15c74:	00015cf5 	.word	0x00015cf5
   15c78:	00015d1d 	.word	0x00015d1d
   15c7c:	00015d1d 	.word	0x00015d1d
   15c80:	00015d09 	.word	0x00015d09
   15c84:	00015d1d 	.word	0x00015d1d
   15c88:	00015d1d 	.word	0x00015d1d
   15c8c:	00015d1d 	.word	0x00015d1d
   15c90:	00015d1d 	.word	0x00015d1d
   15c94:	00015d1d 	.word	0x00015d1d
   15c98:	00015d1d 	.word	0x00015d1d
   15c9c:	00015d1d 	.word	0x00015d1d
   15ca0:	00015ce1 	.word	0x00015ce1
   15ca4:	00015d1d 	.word	0x00015d1d
   15ca8:	00015ccd 	.word	0x00015ccd
   15cac:	00015d1d 	.word	0x00015d1d
   15cb0:	00015d1d 	.word	0x00015d1d
   15cb4:	00015cb9 	.word	0x00015cb9
        case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
   15cb8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   15cba:	f043 0301 	orr.w	r3, r3, #1
   15cbe:	931f      	str	r3, [sp, #124]	; 0x7c
   15cc0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   15cc2:	3301      	adds	r3, #1
   15cc4:	930a      	str	r3, [sp, #40]	; 0x28
   15cc6:	2301      	movs	r3, #1
   15cc8:	931c      	str	r3, [sp, #112]	; 0x70
   15cca:	e02a      	b.n	15d22 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x11e>
        case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
   15ccc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   15cce:	f043 0302 	orr.w	r3, r3, #2
   15cd2:	931f      	str	r3, [sp, #124]	; 0x7c
   15cd4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   15cd6:	3301      	adds	r3, #1
   15cd8:	930a      	str	r3, [sp, #40]	; 0x28
   15cda:	2301      	movs	r3, #1
   15cdc:	931c      	str	r3, [sp, #112]	; 0x70
   15cde:	e020      	b.n	15d22 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x11e>
        case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
   15ce0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   15ce2:	f043 0304 	orr.w	r3, r3, #4
   15ce6:	931f      	str	r3, [sp, #124]	; 0x7c
   15ce8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   15cea:	3301      	adds	r3, #1
   15cec:	930a      	str	r3, [sp, #40]	; 0x28
   15cee:	2301      	movs	r3, #1
   15cf0:	931c      	str	r3, [sp, #112]	; 0x70
   15cf2:	e016      	b.n	15d22 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x11e>
        case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
   15cf4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   15cf6:	f043 0308 	orr.w	r3, r3, #8
   15cfa:	931f      	str	r3, [sp, #124]	; 0x7c
   15cfc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   15cfe:	3301      	adds	r3, #1
   15d00:	930a      	str	r3, [sp, #40]	; 0x28
   15d02:	2301      	movs	r3, #1
   15d04:	931c      	str	r3, [sp, #112]	; 0x70
   15d06:	e00c      	b.n	15d22 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x11e>
        case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;
   15d08:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   15d0a:	f043 0310 	orr.w	r3, r3, #16
   15d0e:	931f      	str	r3, [sp, #124]	; 0x7c
   15d10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   15d12:	3301      	adds	r3, #1
   15d14:	930a      	str	r3, [sp, #40]	; 0x28
   15d16:	2301      	movs	r3, #1
   15d18:	931c      	str	r3, [sp, #112]	; 0x70
   15d1a:	e002      	b.n	15d22 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x11e>
        default :                                   n = 0U; break;
   15d1c:	2300      	movs	r3, #0
   15d1e:	931c      	str	r3, [sp, #112]	; 0x70
   15d20:	bf00      	nop
      }
    } while (n);
   15d22:	9b1c      	ldr	r3, [sp, #112]	; 0x70
   15d24:	2b00      	cmp	r3, #0
   15d26:	d000      	beq.n	15d2a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x126>
    do {
   15d28:	e79b      	b.n	15c62 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x5e>

    // evaluate width field
    width = 0U;
   15d2a:	2300      	movs	r3, #0
   15d2c:	931e      	str	r3, [sp, #120]	; 0x78
    if (_is_digit(*format)) {
   15d2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   15d30:	781b      	ldrb	r3, [r3, #0]
   15d32:	4618      	mov	r0, r3
   15d34:	f7ff fade 	bl	152f4 <_is_digit(char)>
   15d38:	4603      	mov	r3, r0
   15d3a:	2b00      	cmp	r3, #0
   15d3c:	d005      	beq.n	15d4a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x146>
      width = _atoi(&format);
   15d3e:	ab0a      	add	r3, sp, #40	; 0x28
   15d40:	4618      	mov	r0, r3
   15d42:	f7ff faf9 	bl	15338 <_atoi(char const**)>
   15d46:	901e      	str	r0, [sp, #120]	; 0x78
   15d48:	e018      	b.n	15d7c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x178>
    }
    else if (*format == '*') {
   15d4a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   15d4c:	781b      	ldrb	r3, [r3, #0]
   15d4e:	2b2a      	cmp	r3, #42	; 0x2a
   15d50:	d114      	bne.n	15d7c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x178>
      const int w = va_arg(va, int);
   15d52:	9b24      	ldr	r3, [sp, #144]	; 0x90
   15d54:	1d1a      	adds	r2, r3, #4
   15d56:	9224      	str	r2, [sp, #144]	; 0x90
   15d58:	681b      	ldr	r3, [r3, #0]
   15d5a:	9316      	str	r3, [sp, #88]	; 0x58
      if (w < 0) {
   15d5c:	9b16      	ldr	r3, [sp, #88]	; 0x58
   15d5e:	2b00      	cmp	r3, #0
   15d60:	da07      	bge.n	15d72 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x16e>
        flags |= FLAGS_LEFT;    // reverse padding
   15d62:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   15d64:	f043 0302 	orr.w	r3, r3, #2
   15d68:	931f      	str	r3, [sp, #124]	; 0x7c
        width = (unsigned int)-w;
   15d6a:	9b16      	ldr	r3, [sp, #88]	; 0x58
   15d6c:	425b      	negs	r3, r3
   15d6e:	931e      	str	r3, [sp, #120]	; 0x78
   15d70:	e001      	b.n	15d76 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x172>
      }
      else {
        width = (unsigned int)w;
   15d72:	9b16      	ldr	r3, [sp, #88]	; 0x58
   15d74:	931e      	str	r3, [sp, #120]	; 0x78
      }
      format++;
   15d76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   15d78:	3301      	adds	r3, #1
   15d7a:	930a      	str	r3, [sp, #40]	; 0x28
    }

    // evaluate precision field
    precision = 0U;
   15d7c:	2300      	movs	r3, #0
   15d7e:	931d      	str	r3, [sp, #116]	; 0x74
    if (*format == '.') {
   15d80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   15d82:	781b      	ldrb	r3, [r3, #0]
   15d84:	2b2e      	cmp	r3, #46	; 0x2e
   15d86:	d124      	bne.n	15dd2 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x1ce>
      flags |= FLAGS_PRECISION;
   15d88:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   15d8a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
   15d8e:	931f      	str	r3, [sp, #124]	; 0x7c
      format++;
   15d90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   15d92:	3301      	adds	r3, #1
   15d94:	930a      	str	r3, [sp, #40]	; 0x28
      if (_is_digit(*format)) {
   15d96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   15d98:	781b      	ldrb	r3, [r3, #0]
   15d9a:	4618      	mov	r0, r3
   15d9c:	f7ff faaa 	bl	152f4 <_is_digit(char)>
   15da0:	4603      	mov	r3, r0
   15da2:	2b00      	cmp	r3, #0
   15da4:	d005      	beq.n	15db2 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x1ae>
        precision = _atoi(&format);
   15da6:	ab0a      	add	r3, sp, #40	; 0x28
   15da8:	4618      	mov	r0, r3
   15daa:	f7ff fac5 	bl	15338 <_atoi(char const**)>
   15dae:	901d      	str	r0, [sp, #116]	; 0x74
   15db0:	e00f      	b.n	15dd2 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x1ce>
      }
      else if (*format == '*') {
   15db2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   15db4:	781b      	ldrb	r3, [r3, #0]
   15db6:	2b2a      	cmp	r3, #42	; 0x2a
   15db8:	d10b      	bne.n	15dd2 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x1ce>
        const int prec = (int)va_arg(va, int);
   15dba:	9b24      	ldr	r3, [sp, #144]	; 0x90
   15dbc:	1d1a      	adds	r2, r3, #4
   15dbe:	9224      	str	r2, [sp, #144]	; 0x90
   15dc0:	681b      	ldr	r3, [r3, #0]
   15dc2:	9315      	str	r3, [sp, #84]	; 0x54
        precision = prec > 0 ? (unsigned int)prec : 0U;
   15dc4:	9b15      	ldr	r3, [sp, #84]	; 0x54
   15dc6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   15dca:	931d      	str	r3, [sp, #116]	; 0x74
        format++;
   15dcc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   15dce:	3301      	adds	r3, #1
   15dd0:	930a      	str	r3, [sp, #40]	; 0x28
      }
    }

    // evaluate length field
    switch (*format) {
   15dd2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   15dd4:	781b      	ldrb	r3, [r3, #0]
   15dd6:	3b68      	subs	r3, #104	; 0x68
   15dd8:	2b12      	cmp	r3, #18
   15dda:	d867      	bhi.n	15eac <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2a8>
   15ddc:	a201      	add	r2, pc, #4	; (adr r2, 15de4 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x1e0>)
   15dde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   15de2:	bf00      	nop
   15de4:	00015e57 	.word	0x00015e57
   15de8:	00015ead 	.word	0x00015ead
   15dec:	00015e8d 	.word	0x00015e8d
   15df0:	00015ead 	.word	0x00015ead
   15df4:	00015e31 	.word	0x00015e31
   15df8:	00015ead 	.word	0x00015ead
   15dfc:	00015ead 	.word	0x00015ead
   15e00:	00015ead 	.word	0x00015ead
   15e04:	00015ead 	.word	0x00015ead
   15e08:	00015ead 	.word	0x00015ead
   15e0c:	00015ead 	.word	0x00015ead
   15e10:	00015ead 	.word	0x00015ead
   15e14:	00015e7d 	.word	0x00015e7d
   15e18:	00015ead 	.word	0x00015ead
   15e1c:	00015ead 	.word	0x00015ead
   15e20:	00015ead 	.word	0x00015ead
   15e24:	00015ead 	.word	0x00015ead
   15e28:	00015ead 	.word	0x00015ead
   15e2c:	00015e9d 	.word	0x00015e9d
      case 'l' :
        flags |= FLAGS_LONG;
   15e30:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   15e32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   15e36:	931f      	str	r3, [sp, #124]	; 0x7c
        format++;
   15e38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   15e3a:	3301      	adds	r3, #1
   15e3c:	930a      	str	r3, [sp, #40]	; 0x28
        if (*format == 'l') {
   15e3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   15e40:	781b      	ldrb	r3, [r3, #0]
   15e42:	2b6c      	cmp	r3, #108	; 0x6c
   15e44:	d134      	bne.n	15eb0 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2ac>
          flags |= FLAGS_LONG_LONG;
   15e46:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   15e48:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   15e4c:	931f      	str	r3, [sp, #124]	; 0x7c
          format++;
   15e4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   15e50:	3301      	adds	r3, #1
   15e52:	930a      	str	r3, [sp, #40]	; 0x28
        }
        break;
   15e54:	e02c      	b.n	15eb0 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2ac>
      case 'h' :
        flags |= FLAGS_SHORT;
   15e56:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   15e58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   15e5c:	931f      	str	r3, [sp, #124]	; 0x7c
        format++;
   15e5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   15e60:	3301      	adds	r3, #1
   15e62:	930a      	str	r3, [sp, #40]	; 0x28
        if (*format == 'h') {
   15e64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   15e66:	781b      	ldrb	r3, [r3, #0]
   15e68:	2b68      	cmp	r3, #104	; 0x68
   15e6a:	d127      	bne.n	15ebc <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2b8>
          flags |= FLAGS_CHAR;
   15e6c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   15e6e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   15e72:	931f      	str	r3, [sp, #124]	; 0x7c
          format++;
   15e74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   15e76:	3301      	adds	r3, #1
   15e78:	930a      	str	r3, [sp, #40]	; 0x28
        }
        break;
   15e7a:	e01f      	b.n	15ebc <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2b8>
#if defined(PRINTF_SUPPORT_PTRDIFF_T)
      case 't' :
        flags |= (sizeof(ptrdiff_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
   15e7c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   15e7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   15e82:	931f      	str	r3, [sp, #124]	; 0x7c
        format++;
   15e84:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   15e86:	3301      	adds	r3, #1
   15e88:	930a      	str	r3, [sp, #40]	; 0x28
        break;
   15e8a:	e018      	b.n	15ebe <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2ba>
#endif
      case 'j' :
        flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
   15e8c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   15e8e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   15e92:	931f      	str	r3, [sp, #124]	; 0x7c
        format++;
   15e94:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   15e96:	3301      	adds	r3, #1
   15e98:	930a      	str	r3, [sp, #40]	; 0x28
        break;
   15e9a:	e010      	b.n	15ebe <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2ba>
      case 'z' :
        flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
   15e9c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   15e9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   15ea2:	931f      	str	r3, [sp, #124]	; 0x7c
        format++;
   15ea4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   15ea6:	3301      	adds	r3, #1
   15ea8:	930a      	str	r3, [sp, #40]	; 0x28
        break;
   15eaa:	e008      	b.n	15ebe <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2ba>
      default :
        break;
   15eac:	bf00      	nop
   15eae:	e006      	b.n	15ebe <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2ba>
        break;
   15eb0:	bf00      	nop
   15eb2:	e004      	b.n	15ebe <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2ba>
   15eb4:	00015c05 	.word	0x00015c05
   15eb8:	0001523d 	.word	0x0001523d
        break;
   15ebc:	bf00      	nop
    }

    // evaluate specifier
    switch (*format) {
   15ebe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   15ec0:	781b      	ldrb	r3, [r3, #0]
   15ec2:	3b25      	subs	r3, #37	; 0x25
   15ec4:	2b53      	cmp	r3, #83	; 0x53
   15ec6:	f200 82ee 	bhi.w	164a6 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8a2>
   15eca:	a201      	add	r2, pc, #4	; (adr r2, 15ed0 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2cc>)
   15ecc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   15ed0:	0001648f 	.word	0x0001648f
   15ed4:	000164a7 	.word	0x000164a7
   15ed8:	000164a7 	.word	0x000164a7
   15edc:	000164a7 	.word	0x000164a7
   15ee0:	000164a7 	.word	0x000164a7
   15ee4:	000164a7 	.word	0x000164a7
   15ee8:	000164a7 	.word	0x000164a7
   15eec:	000164a7 	.word	0x000164a7
   15ef0:	000164a7 	.word	0x000164a7
   15ef4:	000164a7 	.word	0x000164a7
   15ef8:	000164a7 	.word	0x000164a7
   15efc:	000164a7 	.word	0x000164a7
   15f00:	000164a7 	.word	0x000164a7
   15f04:	000164a7 	.word	0x000164a7
   15f08:	000164a7 	.word	0x000164a7
   15f0c:	000164a7 	.word	0x000164a7
   15f10:	000164a7 	.word	0x000164a7
   15f14:	000164a7 	.word	0x000164a7
   15f18:	000164a7 	.word	0x000164a7
   15f1c:	000164a7 	.word	0x000164a7
   15f20:	000164a7 	.word	0x000164a7
   15f24:	000164a7 	.word	0x000164a7
   15f28:	000164a7 	.word	0x000164a7
   15f2c:	000164a7 	.word	0x000164a7
   15f30:	000164a7 	.word	0x000164a7
   15f34:	000164a7 	.word	0x000164a7
   15f38:	000164a7 	.word	0x000164a7
   15f3c:	000164a7 	.word	0x000164a7
   15f40:	000164a7 	.word	0x000164a7
   15f44:	000164a7 	.word	0x000164a7
   15f48:	000164a7 	.word	0x000164a7
   15f4c:	000164a7 	.word	0x000164a7
   15f50:	000164a7 	.word	0x000164a7
   15f54:	000162ad 	.word	0x000162ad
   15f58:	000164a7 	.word	0x000164a7
   15f5c:	000164a7 	.word	0x000164a7
   15f60:	000164a7 	.word	0x000164a7
   15f64:	000164a7 	.word	0x000164a7
   15f68:	000164a7 	.word	0x000164a7
   15f6c:	000164a7 	.word	0x000164a7
   15f70:	000164a7 	.word	0x000164a7
   15f74:	000164a7 	.word	0x000164a7
   15f78:	000164a7 	.word	0x000164a7
   15f7c:	000164a7 	.word	0x000164a7
   15f80:	000164a7 	.word	0x000164a7
   15f84:	000164a7 	.word	0x000164a7
   15f88:	000164a7 	.word	0x000164a7
   15f8c:	000164a7 	.word	0x000164a7
   15f90:	000164a7 	.word	0x000164a7
   15f94:	000164a7 	.word	0x000164a7
   15f98:	000164a7 	.word	0x000164a7
   15f9c:	00016021 	.word	0x00016021
   15fa0:	000164a7 	.word	0x000164a7
   15fa4:	000164a7 	.word	0x000164a7
   15fa8:	000164a7 	.word	0x000164a7
   15fac:	000164a7 	.word	0x000164a7
   15fb0:	000164a7 	.word	0x000164a7
   15fb4:	000164a7 	.word	0x000164a7
   15fb8:	000164a7 	.word	0x000164a7
   15fbc:	000164a7 	.word	0x000164a7
   15fc0:	000164a7 	.word	0x000164a7
   15fc4:	00016021 	.word	0x00016021
   15fc8:	000162e9 	.word	0x000162e9
   15fcc:	00016021 	.word	0x00016021
   15fd0:	000164a7 	.word	0x000164a7
   15fd4:	000162ad 	.word	0x000162ad
   15fd8:	000164a7 	.word	0x000164a7
   15fdc:	000164a7 	.word	0x000164a7
   15fe0:	00016021 	.word	0x00016021
   15fe4:	000164a7 	.word	0x000164a7
   15fe8:	000164a7 	.word	0x000164a7
   15fec:	000164a7 	.word	0x000164a7
   15ff0:	000164a7 	.word	0x000164a7
   15ff4:	000164a7 	.word	0x000164a7
   15ff8:	00016021 	.word	0x00016021
   15ffc:	00016447 	.word	0x00016447
   16000:	000164a7 	.word	0x000164a7
   16004:	000164a7 	.word	0x000164a7
   16008:	00016371 	.word	0x00016371
   1600c:	000164a7 	.word	0x000164a7
   16010:	00016021 	.word	0x00016021
   16014:	000164a7 	.word	0x000164a7
   16018:	000164a7 	.word	0x000164a7
   1601c:	00016021 	.word	0x00016021
      case 'X' :
      case 'o' :
      case 'b' : {
        // set the base
        unsigned int base;
        if (*format == 'x' || *format == 'X') {
   16020:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   16022:	781b      	ldrb	r3, [r3, #0]
   16024:	2b78      	cmp	r3, #120	; 0x78
   16026:	d003      	beq.n	16030 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x42c>
   16028:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1602a:	781b      	ldrb	r3, [r3, #0]
   1602c:	2b58      	cmp	r3, #88	; 0x58
   1602e:	d102      	bne.n	16036 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x432>
          base = 16U;
   16030:	2310      	movs	r3, #16
   16032:	931a      	str	r3, [sp, #104]	; 0x68
   16034:	e013      	b.n	1605e <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x45a>
        }
        else if (*format == 'o') {
   16036:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   16038:	781b      	ldrb	r3, [r3, #0]
   1603a:	2b6f      	cmp	r3, #111	; 0x6f
   1603c:	d102      	bne.n	16044 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x440>
          base =  8U;
   1603e:	2308      	movs	r3, #8
   16040:	931a      	str	r3, [sp, #104]	; 0x68
   16042:	e00c      	b.n	1605e <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x45a>
        }
        else if (*format == 'b') {
   16044:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   16046:	781b      	ldrb	r3, [r3, #0]
   16048:	2b62      	cmp	r3, #98	; 0x62
   1604a:	d102      	bne.n	16052 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x44e>
          base =  2U;
   1604c:	2302      	movs	r3, #2
   1604e:	931a      	str	r3, [sp, #104]	; 0x68
   16050:	e005      	b.n	1605e <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x45a>
        }
        else {
          base = 10U;
   16052:	230a      	movs	r3, #10
   16054:	931a      	str	r3, [sp, #104]	; 0x68
          flags &= ~FLAGS_HASH;   // no hash for dec format
   16056:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   16058:	f023 0310 	bic.w	r3, r3, #16
   1605c:	931f      	str	r3, [sp, #124]	; 0x7c
        }
        // uppercase
        if (*format == 'X') {
   1605e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   16060:	781b      	ldrb	r3, [r3, #0]
   16062:	2b58      	cmp	r3, #88	; 0x58
   16064:	d103      	bne.n	1606e <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x46a>
          flags |= FLAGS_UPPERCASE;
   16066:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   16068:	f043 0320 	orr.w	r3, r3, #32
   1606c:	931f      	str	r3, [sp, #124]	; 0x7c
        }

        // no plus or space flag for u, x, X, o, b
        if ((*format != 'i') && (*format != 'd')) {
   1606e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   16070:	781b      	ldrb	r3, [r3, #0]
   16072:	2b69      	cmp	r3, #105	; 0x69
   16074:	d007      	beq.n	16086 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x482>
   16076:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   16078:	781b      	ldrb	r3, [r3, #0]
   1607a:	2b64      	cmp	r3, #100	; 0x64
   1607c:	d003      	beq.n	16086 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x482>
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
   1607e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   16080:	f023 030c 	bic.w	r3, r3, #12
   16084:	931f      	str	r3, [sp, #124]	; 0x7c
        }

        // ignore '0' flag when precision is given
        if (flags & FLAGS_PRECISION) {
   16086:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   16088:	f403 6380 	and.w	r3, r3, #1024	; 0x400
   1608c:	2b00      	cmp	r3, #0
   1608e:	d003      	beq.n	16098 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x494>
          flags &= ~FLAGS_ZEROPAD;
   16090:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   16092:	f023 0301 	bic.w	r3, r3, #1
   16096:	931f      	str	r3, [sp, #124]	; 0x7c
        }

        // convert the integer
        if ((*format == 'i') || (*format == 'd')) {
   16098:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1609a:	781b      	ldrb	r3, [r3, #0]
   1609c:	2b69      	cmp	r3, #105	; 0x69
   1609e:	d004      	beq.n	160aa <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x4a6>
   160a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   160a2:	781b      	ldrb	r3, [r3, #0]
   160a4:	2b64      	cmp	r3, #100	; 0x64
   160a6:	f040 808d 	bne.w	161c4 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x5c0>
          // signed
          if (flags & FLAGS_LONG_LONG) {
   160aa:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   160ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
   160b0:	2b00      	cmp	r3, #0
   160b2:	d02e      	beq.n	16112 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x50e>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            const long long value = va_arg(va, long long);
   160b4:	9b24      	ldr	r3, [sp, #144]	; 0x90
   160b6:	3307      	adds	r3, #7
   160b8:	f023 0307 	bic.w	r3, r3, #7
   160bc:	f103 0208 	add.w	r2, r3, #8
   160c0:	9224      	str	r2, [sp, #144]	; 0x90
   160c2:	e9d3 3400 	ldrd	r3, r4, [r3]
   160c6:	e9cd 340e 	strd	r3, r4, [sp, #56]	; 0x38
            idx = _ntoa_long_long(out, buffer, idx, maxlen, (unsigned long long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
   160ca:	e9dd 340e 	ldrd	r3, r4, [sp, #56]	; 0x38
   160ce:	2b00      	cmp	r3, #0
   160d0:	f174 0200 	sbcs.w	r2, r4, #0
   160d4:	da02      	bge.n	160dc <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x4d8>
   160d6:	425b      	negs	r3, r3
   160d8:	eb64 0444 	sbc.w	r4, r4, r4, lsl #1
   160dc:	4619      	mov	r1, r3
   160de:	4622      	mov	r2, r4
   160e0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   160e2:	0fdb      	lsrs	r3, r3, #31
   160e4:	b2d8      	uxtb	r0, r3
   160e6:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   160e8:	f04f 0400 	mov.w	r4, #0
   160ec:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
   160ee:	9508      	str	r5, [sp, #32]
   160f0:	9d1e      	ldr	r5, [sp, #120]	; 0x78
   160f2:	9507      	str	r5, [sp, #28]
   160f4:	9d1d      	ldr	r5, [sp, #116]	; 0x74
   160f6:	9506      	str	r5, [sp, #24]
   160f8:	e9cd 3404 	strd	r3, r4, [sp, #16]
   160fc:	9002      	str	r0, [sp, #8]
   160fe:	e9cd 1200 	strd	r1, r2, [sp]
   16102:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   16104:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   16106:	990c      	ldr	r1, [sp, #48]	; 0x30
   16108:	980d      	ldr	r0, [sp, #52]	; 0x34
   1610a:	f7ff fae5 	bl	156d8 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)>
   1610e:	901b      	str	r0, [sp, #108]	; 0x6c
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
          }
          else {
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
          }
   16110:	e0c8      	b.n	162a4 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x6a0>
          else if (flags & FLAGS_LONG) {
   16112:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   16114:	f403 7380 	and.w	r3, r3, #256	; 0x100
   16118:	2b00      	cmp	r3, #0
   1611a:	d01e      	beq.n	1615a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x556>
            const long value = va_arg(va, long);
   1611c:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1611e:	1d1a      	adds	r2, r3, #4
   16120:	9224      	str	r2, [sp, #144]	; 0x90
   16122:	681b      	ldr	r3, [r3, #0]
   16124:	9311      	str	r3, [sp, #68]	; 0x44
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
   16126:	9b11      	ldr	r3, [sp, #68]	; 0x44
   16128:	2b00      	cmp	r3, #0
   1612a:	bfb8      	it	lt
   1612c:	425b      	neglt	r3, r3
   1612e:	4619      	mov	r1, r3
   16130:	9b11      	ldr	r3, [sp, #68]	; 0x44
   16132:	0fdb      	lsrs	r3, r3, #31
   16134:	b2db      	uxtb	r3, r3
   16136:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   16138:	9205      	str	r2, [sp, #20]
   1613a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   1613c:	9204      	str	r2, [sp, #16]
   1613e:	9a1d      	ldr	r2, [sp, #116]	; 0x74
   16140:	9203      	str	r2, [sp, #12]
   16142:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   16144:	9202      	str	r2, [sp, #8]
   16146:	9301      	str	r3, [sp, #4]
   16148:	9100      	str	r1, [sp, #0]
   1614a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1614c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   1614e:	990c      	ldr	r1, [sp, #48]	; 0x30
   16150:	980d      	ldr	r0, [sp, #52]	; 0x34
   16152:	f7ff fa4f 	bl	155f4 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)>
   16156:	901b      	str	r0, [sp, #108]	; 0x6c
          }
   16158:	e0a4      	b.n	162a4 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x6a0>
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
   1615a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   1615c:	f003 0340 	and.w	r3, r3, #64	; 0x40
   16160:	2b00      	cmp	r3, #0
   16162:	d005      	beq.n	16170 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x56c>
   16164:	9b24      	ldr	r3, [sp, #144]	; 0x90
   16166:	1d1a      	adds	r2, r3, #4
   16168:	9224      	str	r2, [sp, #144]	; 0x90
   1616a:	681b      	ldr	r3, [r3, #0]
   1616c:	b2db      	uxtb	r3, r3
   1616e:	e00e      	b.n	1618e <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x58a>
   16170:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   16172:	f003 0380 	and.w	r3, r3, #128	; 0x80
   16176:	2b00      	cmp	r3, #0
   16178:	d005      	beq.n	16186 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x582>
   1617a:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1617c:	1d1a      	adds	r2, r3, #4
   1617e:	9224      	str	r2, [sp, #144]	; 0x90
   16180:	681b      	ldr	r3, [r3, #0]
   16182:	b21b      	sxth	r3, r3
   16184:	e003      	b.n	1618e <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x58a>
   16186:	9b24      	ldr	r3, [sp, #144]	; 0x90
   16188:	1d1a      	adds	r2, r3, #4
   1618a:	9224      	str	r2, [sp, #144]	; 0x90
   1618c:	681b      	ldr	r3, [r3, #0]
   1618e:	9312      	str	r3, [sp, #72]	; 0x48
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
   16190:	9b12      	ldr	r3, [sp, #72]	; 0x48
   16192:	2b00      	cmp	r3, #0
   16194:	bfb8      	it	lt
   16196:	425b      	neglt	r3, r3
   16198:	4619      	mov	r1, r3
   1619a:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1619c:	0fdb      	lsrs	r3, r3, #31
   1619e:	b2db      	uxtb	r3, r3
   161a0:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   161a2:	9205      	str	r2, [sp, #20]
   161a4:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   161a6:	9204      	str	r2, [sp, #16]
   161a8:	9a1d      	ldr	r2, [sp, #116]	; 0x74
   161aa:	9203      	str	r2, [sp, #12]
   161ac:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   161ae:	9202      	str	r2, [sp, #8]
   161b0:	9301      	str	r3, [sp, #4]
   161b2:	9100      	str	r1, [sp, #0]
   161b4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   161b6:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   161b8:	990c      	ldr	r1, [sp, #48]	; 0x30
   161ba:	980d      	ldr	r0, [sp, #52]	; 0x34
   161bc:	f7ff fa1a 	bl	155f4 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)>
   161c0:	901b      	str	r0, [sp, #108]	; 0x6c
          }
   161c2:	e06f      	b.n	162a4 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x6a0>
        }
        else {
          // unsigned
          if (flags & FLAGS_LONG_LONG) {
   161c4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   161c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
   161ca:	2b00      	cmp	r3, #0
   161cc:	d020      	beq.n	16210 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x60c>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base, precision, width, flags);
   161ce:	9b24      	ldr	r3, [sp, #144]	; 0x90
   161d0:	3307      	adds	r3, #7
   161d2:	f023 0307 	bic.w	r3, r3, #7
   161d6:	f103 0208 	add.w	r2, r3, #8
   161da:	9224      	str	r2, [sp, #144]	; 0x90
   161dc:	e9d3 3400 	ldrd	r3, r4, [r3]
   161e0:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   161e2:	4611      	mov	r1, r2
   161e4:	f04f 0200 	mov.w	r2, #0
   161e8:	981f      	ldr	r0, [sp, #124]	; 0x7c
   161ea:	9008      	str	r0, [sp, #32]
   161ec:	981e      	ldr	r0, [sp, #120]	; 0x78
   161ee:	9007      	str	r0, [sp, #28]
   161f0:	981d      	ldr	r0, [sp, #116]	; 0x74
   161f2:	9006      	str	r0, [sp, #24]
   161f4:	e9cd 1204 	strd	r1, r2, [sp, #16]
   161f8:	2200      	movs	r2, #0
   161fa:	9202      	str	r2, [sp, #8]
   161fc:	e9cd 3400 	strd	r3, r4, [sp]
   16200:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   16202:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   16204:	990c      	ldr	r1, [sp, #48]	; 0x30
   16206:	980d      	ldr	r0, [sp, #52]	; 0x34
   16208:	f7ff fa66 	bl	156d8 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)>
   1620c:	901b      	str	r0, [sp, #108]	; 0x6c
   1620e:	e049      	b.n	162a4 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x6a0>
#endif
          }
          else if (flags & FLAGS_LONG) {
   16210:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   16212:	f403 7380 	and.w	r3, r3, #256	; 0x100
   16216:	2b00      	cmp	r3, #0
   16218:	d016      	beq.n	16248 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x644>
            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
   1621a:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1621c:	1d1a      	adds	r2, r3, #4
   1621e:	9224      	str	r2, [sp, #144]	; 0x90
   16220:	681b      	ldr	r3, [r3, #0]
   16222:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   16224:	9205      	str	r2, [sp, #20]
   16226:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   16228:	9204      	str	r2, [sp, #16]
   1622a:	9a1d      	ldr	r2, [sp, #116]	; 0x74
   1622c:	9203      	str	r2, [sp, #12]
   1622e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   16230:	9202      	str	r2, [sp, #8]
   16232:	2200      	movs	r2, #0
   16234:	9201      	str	r2, [sp, #4]
   16236:	9300      	str	r3, [sp, #0]
   16238:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1623a:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   1623c:	990c      	ldr	r1, [sp, #48]	; 0x30
   1623e:	980d      	ldr	r0, [sp, #52]	; 0x34
   16240:	f7ff f9d8 	bl	155f4 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)>
   16244:	901b      	str	r0, [sp, #108]	; 0x6c
   16246:	e02d      	b.n	162a4 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x6a0>
          }
          else {
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
   16248:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   1624a:	f003 0340 	and.w	r3, r3, #64	; 0x40
   1624e:	2b00      	cmp	r3, #0
   16250:	d005      	beq.n	1625e <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x65a>
   16252:	9b24      	ldr	r3, [sp, #144]	; 0x90
   16254:	1d1a      	adds	r2, r3, #4
   16256:	9224      	str	r2, [sp, #144]	; 0x90
   16258:	681b      	ldr	r3, [r3, #0]
   1625a:	b2db      	uxtb	r3, r3
   1625c:	e00e      	b.n	1627c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x678>
   1625e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   16260:	f003 0380 	and.w	r3, r3, #128	; 0x80
   16264:	2b00      	cmp	r3, #0
   16266:	d005      	beq.n	16274 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x670>
   16268:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1626a:	1d1a      	adds	r2, r3, #4
   1626c:	9224      	str	r2, [sp, #144]	; 0x90
   1626e:	681b      	ldr	r3, [r3, #0]
   16270:	b29b      	uxth	r3, r3
   16272:	e003      	b.n	1627c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x678>
   16274:	9b24      	ldr	r3, [sp, #144]	; 0x90
   16276:	1d1a      	adds	r2, r3, #4
   16278:	9224      	str	r2, [sp, #144]	; 0x90
   1627a:	681b      	ldr	r3, [r3, #0]
   1627c:	9313      	str	r3, [sp, #76]	; 0x4c
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
   1627e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   16280:	9305      	str	r3, [sp, #20]
   16282:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   16284:	9304      	str	r3, [sp, #16]
   16286:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   16288:	9303      	str	r3, [sp, #12]
   1628a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   1628c:	9302      	str	r3, [sp, #8]
   1628e:	2300      	movs	r3, #0
   16290:	9301      	str	r3, [sp, #4]
   16292:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   16294:	9300      	str	r3, [sp, #0]
   16296:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   16298:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   1629a:	990c      	ldr	r1, [sp, #48]	; 0x30
   1629c:	980d      	ldr	r0, [sp, #52]	; 0x34
   1629e:	f7ff f9a9 	bl	155f4 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)>
   162a2:	901b      	str	r0, [sp, #108]	; 0x6c
          }
        }
        format++;
   162a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   162a6:	3301      	adds	r3, #1
   162a8:	930a      	str	r3, [sp, #40]	; 0x28
        break;
   162aa:	e109      	b.n	164c0 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8bc>
      }
#if defined(PRINTF_SUPPORT_FLOAT)
      case 'f' :
      case 'F' :
        idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
   162ac:	9b24      	ldr	r3, [sp, #144]	; 0x90
   162ae:	3307      	adds	r3, #7
   162b0:	f023 0307 	bic.w	r3, r3, #7
   162b4:	f103 0208 	add.w	r2, r3, #8
   162b8:	9224      	str	r2, [sp, #144]	; 0x90
   162ba:	ed93 7b00 	vldr	d7, [r3]
   162be:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   162c0:	9302      	str	r3, [sp, #8]
   162c2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   162c4:	9301      	str	r3, [sp, #4]
   162c6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   162c8:	9300      	str	r3, [sp, #0]
   162ca:	eeb0 0a47 	vmov.f32	s0, s14
   162ce:	eef0 0a67 	vmov.f32	s1, s15
   162d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   162d4:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   162d6:	990c      	ldr	r1, [sp, #48]	; 0x30
   162d8:	980d      	ldr	r0, [sp, #52]	; 0x34
   162da:	f7ff fa77 	bl	157cc <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)>
   162de:	901b      	str	r0, [sp, #108]	; 0x6c
        format++;
   162e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   162e2:	3301      	adds	r3, #1
   162e4:	930a      	str	r3, [sp, #40]	; 0x28
        break;
   162e6:	e0eb      	b.n	164c0 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8bc>
#endif  // PRINTF_SUPPORT_FLOAT
      case 'c' : {
        unsigned int l = 1U;
   162e8:	2301      	movs	r3, #1
   162ea:	9319      	str	r3, [sp, #100]	; 0x64
        // pre padding
        if (!(flags & FLAGS_LEFT)) {
   162ec:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   162ee:	f003 0302 	and.w	r3, r3, #2
   162f2:	2b00      	cmp	r3, #0
   162f4:	d113      	bne.n	1631e <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x71a>
          while (l++ < width) {
   162f6:	9b19      	ldr	r3, [sp, #100]	; 0x64
   162f8:	1c5a      	adds	r2, r3, #1
   162fa:	9219      	str	r2, [sp, #100]	; 0x64
   162fc:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   162fe:	429a      	cmp	r2, r3
   16300:	bf8c      	ite	hi
   16302:	2301      	movhi	r3, #1
   16304:	2300      	movls	r3, #0
   16306:	b2db      	uxtb	r3, r3
   16308:	2b00      	cmp	r3, #0
   1630a:	d008      	beq.n	1631e <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x71a>
            out(' ', buffer, idx++, maxlen);
   1630c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   1630e:	1c53      	adds	r3, r2, #1
   16310:	931b      	str	r3, [sp, #108]	; 0x6c
   16312:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   16314:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   16316:	990c      	ldr	r1, [sp, #48]	; 0x30
   16318:	2020      	movs	r0, #32
   1631a:	47a0      	blx	r4
          while (l++ < width) {
   1631c:	e7eb      	b.n	162f6 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x6f2>
          }
        }
        // char output
        out((char)va_arg(va, int), buffer, idx++, maxlen);
   1631e:	9b24      	ldr	r3, [sp, #144]	; 0x90
   16320:	1d1a      	adds	r2, r3, #4
   16322:	9224      	str	r2, [sp, #144]	; 0x90
   16324:	681b      	ldr	r3, [r3, #0]
   16326:	b2d8      	uxtb	r0, r3
   16328:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   1632a:	1c53      	adds	r3, r2, #1
   1632c:	931b      	str	r3, [sp, #108]	; 0x6c
   1632e:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   16330:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   16332:	990c      	ldr	r1, [sp, #48]	; 0x30
   16334:	47a0      	blx	r4
        // post padding
        if (flags & FLAGS_LEFT) {
   16336:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   16338:	f003 0302 	and.w	r3, r3, #2
   1633c:	2b00      	cmp	r3, #0
   1633e:	d013      	beq.n	16368 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x764>
          while (l++ < width) {
   16340:	9b19      	ldr	r3, [sp, #100]	; 0x64
   16342:	1c5a      	adds	r2, r3, #1
   16344:	9219      	str	r2, [sp, #100]	; 0x64
   16346:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   16348:	429a      	cmp	r2, r3
   1634a:	bf8c      	ite	hi
   1634c:	2301      	movhi	r3, #1
   1634e:	2300      	movls	r3, #0
   16350:	b2db      	uxtb	r3, r3
   16352:	2b00      	cmp	r3, #0
   16354:	d008      	beq.n	16368 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x764>
            out(' ', buffer, idx++, maxlen);
   16356:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   16358:	1c53      	adds	r3, r2, #1
   1635a:	931b      	str	r3, [sp, #108]	; 0x6c
   1635c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   1635e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   16360:	990c      	ldr	r1, [sp, #48]	; 0x30
   16362:	2020      	movs	r0, #32
   16364:	47a0      	blx	r4
          while (l++ < width) {
   16366:	e7eb      	b.n	16340 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x73c>
          }
        }
        format++;
   16368:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1636a:	3301      	adds	r3, #1
   1636c:	930a      	str	r3, [sp, #40]	; 0x28
        break;
   1636e:	e0a7      	b.n	164c0 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8bc>
      }

      case 's' : {
        char* p = va_arg(va, char*);
   16370:	9b24      	ldr	r3, [sp, #144]	; 0x90
   16372:	1d1a      	adds	r2, r3, #4
   16374:	9224      	str	r2, [sp, #144]	; 0x90
   16376:	681b      	ldr	r3, [r3, #0]
   16378:	9318      	str	r3, [sp, #96]	; 0x60
        unsigned int l = _strlen(p);
   1637a:	9818      	ldr	r0, [sp, #96]	; 0x60
   1637c:	f7fe ff98 	bl	152b0 <_strlen(char const*)>
   16380:	9017      	str	r0, [sp, #92]	; 0x5c
        // pre padding
        if (flags & FLAGS_PRECISION) {
   16382:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   16384:	f403 6380 	and.w	r3, r3, #1024	; 0x400
   16388:	2b00      	cmp	r3, #0
   1638a:	d007      	beq.n	1639c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x798>
          l = (l < precision ? l : precision);
   1638c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   1638e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   16390:	429a      	cmp	r2, r3
   16392:	d201      	bcs.n	16398 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x794>
   16394:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   16396:	e000      	b.n	1639a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x796>
   16398:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   1639a:	9317      	str	r3, [sp, #92]	; 0x5c
        }
        if (!(flags & FLAGS_LEFT)) {
   1639c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   1639e:	f003 0302 	and.w	r3, r3, #2
   163a2:	2b00      	cmp	r3, #0
   163a4:	d113      	bne.n	163ce <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7ca>
          while (l++ < width) {
   163a6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   163a8:	1c5a      	adds	r2, r3, #1
   163aa:	9217      	str	r2, [sp, #92]	; 0x5c
   163ac:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   163ae:	429a      	cmp	r2, r3
   163b0:	bf8c      	ite	hi
   163b2:	2301      	movhi	r3, #1
   163b4:	2300      	movls	r3, #0
   163b6:	b2db      	uxtb	r3, r3
   163b8:	2b00      	cmp	r3, #0
   163ba:	d008      	beq.n	163ce <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7ca>
            out(' ', buffer, idx++, maxlen);
   163bc:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   163be:	1c53      	adds	r3, r2, #1
   163c0:	931b      	str	r3, [sp, #108]	; 0x6c
   163c2:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   163c4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   163c6:	990c      	ldr	r1, [sp, #48]	; 0x30
   163c8:	2020      	movs	r0, #32
   163ca:	47a0      	blx	r4
          while (l++ < width) {
   163cc:	e7eb      	b.n	163a6 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7a2>
          }
        }
        // string output
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
   163ce:	9b18      	ldr	r3, [sp, #96]	; 0x60
   163d0:	781b      	ldrb	r3, [r3, #0]
   163d2:	2b00      	cmp	r3, #0
   163d4:	d00b      	beq.n	163ee <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7ea>
   163d6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   163d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
   163dc:	2b00      	cmp	r3, #0
   163de:	d004      	beq.n	163ea <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7e6>
   163e0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   163e2:	1e5a      	subs	r2, r3, #1
   163e4:	921d      	str	r2, [sp, #116]	; 0x74
   163e6:	2b00      	cmp	r3, #0
   163e8:	d001      	beq.n	163ee <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7ea>
   163ea:	2301      	movs	r3, #1
   163ec:	e000      	b.n	163f0 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7ec>
   163ee:	2300      	movs	r3, #0
   163f0:	2b00      	cmp	r3, #0
   163f2:	d00b      	beq.n	1640c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x808>
          out(*(p++), buffer, idx++, maxlen);
   163f4:	9b18      	ldr	r3, [sp, #96]	; 0x60
   163f6:	1c5a      	adds	r2, r3, #1
   163f8:	9218      	str	r2, [sp, #96]	; 0x60
   163fa:	7818      	ldrb	r0, [r3, #0]
   163fc:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   163fe:	1c53      	adds	r3, r2, #1
   16400:	931b      	str	r3, [sp, #108]	; 0x6c
   16402:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   16404:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   16406:	990c      	ldr	r1, [sp, #48]	; 0x30
   16408:	47a0      	blx	r4
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
   1640a:	e7e0      	b.n	163ce <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7ca>
        }
        // post padding
        if (flags & FLAGS_LEFT) {
   1640c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   1640e:	f003 0302 	and.w	r3, r3, #2
   16412:	2b00      	cmp	r3, #0
   16414:	d013      	beq.n	1643e <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x83a>
          while (l++ < width) {
   16416:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   16418:	1c5a      	adds	r2, r3, #1
   1641a:	9217      	str	r2, [sp, #92]	; 0x5c
   1641c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   1641e:	429a      	cmp	r2, r3
   16420:	bf8c      	ite	hi
   16422:	2301      	movhi	r3, #1
   16424:	2300      	movls	r3, #0
   16426:	b2db      	uxtb	r3, r3
   16428:	2b00      	cmp	r3, #0
   1642a:	d008      	beq.n	1643e <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x83a>
            out(' ', buffer, idx++, maxlen);
   1642c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   1642e:	1c53      	adds	r3, r2, #1
   16430:	931b      	str	r3, [sp, #108]	; 0x6c
   16432:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   16434:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   16436:	990c      	ldr	r1, [sp, #48]	; 0x30
   16438:	2020      	movs	r0, #32
   1643a:	47a0      	blx	r4
          while (l++ < width) {
   1643c:	e7eb      	b.n	16416 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x812>
          }
        }
        format++;
   1643e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   16440:	3301      	adds	r3, #1
   16442:	930a      	str	r3, [sp, #40]	; 0x28
        break;
   16444:	e03c      	b.n	164c0 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8bc>
      }

      case 'p' : {
        width = sizeof(void*) * 2U;
   16446:	2308      	movs	r3, #8
   16448:	931e      	str	r3, [sp, #120]	; 0x78
        flags |= FLAGS_ZEROPAD | FLAGS_UPPERCASE;
   1644a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   1644c:	f043 0321 	orr.w	r3, r3, #33	; 0x21
   16450:	931f      	str	r3, [sp, #124]	; 0x7c
#if defined(PRINTF_SUPPORT_LONG_LONG)
        const bool is_ll = sizeof(uintptr_t) == sizeof(long long);
   16452:	2300      	movs	r3, #0
   16454:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
        if (is_ll) {
          idx = _ntoa_long_long(out, buffer, idx, maxlen, (uintptr_t)va_arg(va, void*), false, 16U, precision, width, flags);
        }
        else {
#endif
          idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void*)), false, 16U, precision, width, flags);
   16458:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1645a:	1d1a      	adds	r2, r3, #4
   1645c:	9224      	str	r2, [sp, #144]	; 0x90
   1645e:	681b      	ldr	r3, [r3, #0]
   16460:	461a      	mov	r2, r3
   16462:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   16464:	9305      	str	r3, [sp, #20]
   16466:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   16468:	9304      	str	r3, [sp, #16]
   1646a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   1646c:	9303      	str	r3, [sp, #12]
   1646e:	2310      	movs	r3, #16
   16470:	9302      	str	r3, [sp, #8]
   16472:	2300      	movs	r3, #0
   16474:	9301      	str	r3, [sp, #4]
   16476:	9200      	str	r2, [sp, #0]
   16478:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1647a:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   1647c:	990c      	ldr	r1, [sp, #48]	; 0x30
   1647e:	980d      	ldr	r0, [sp, #52]	; 0x34
   16480:	f7ff f8b8 	bl	155f4 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)>
   16484:	901b      	str	r0, [sp, #108]	; 0x6c
#if defined(PRINTF_SUPPORT_LONG_LONG)
        }
#endif
        format++;
   16486:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   16488:	3301      	adds	r3, #1
   1648a:	930a      	str	r3, [sp, #40]	; 0x28
        break;
   1648c:	e018      	b.n	164c0 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8bc>
      }

      case '%' :
        out('%', buffer, idx++, maxlen);
   1648e:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   16490:	1c53      	adds	r3, r2, #1
   16492:	931b      	str	r3, [sp, #108]	; 0x6c
   16494:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   16496:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   16498:	990c      	ldr	r1, [sp, #48]	; 0x30
   1649a:	2025      	movs	r0, #37	; 0x25
   1649c:	47a0      	blx	r4
        format++;
   1649e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   164a0:	3301      	adds	r3, #1
   164a2:	930a      	str	r3, [sp, #40]	; 0x28
        break;
   164a4:	e00c      	b.n	164c0 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8bc>

      default :
        out(*format, buffer, idx++, maxlen);
   164a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   164a8:	7818      	ldrb	r0, [r3, #0]
   164aa:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   164ac:	1c53      	adds	r3, r2, #1
   164ae:	931b      	str	r3, [sp, #108]	; 0x6c
   164b0:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   164b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   164b4:	990c      	ldr	r1, [sp, #48]	; 0x30
   164b6:	47a0      	blx	r4
        format++;
   164b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   164ba:	3301      	adds	r3, #1
   164bc:	930a      	str	r3, [sp, #40]	; 0x28
        break;
   164be:	bf00      	nop
  while (*format)
   164c0:	f7ff bbb3 	b.w	15c2a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x26>
    }
  }

  // termination
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
   164c4:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   164c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   164c8:	429a      	cmp	r2, r3
   164ca:	d302      	bcc.n	164d2 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8ce>
   164cc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   164ce:	1e5a      	subs	r2, r3, #1
   164d0:	e000      	b.n	164d4 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8d0>
   164d2:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   164d4:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   164d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   164d8:	990c      	ldr	r1, [sp, #48]	; 0x30
   164da:	2000      	movs	r0, #0
   164dc:	47a0      	blx	r4

  // return written chars without terminating \0
  return (int)idx;
   164de:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
   164e0:	4633      	mov	r3, r6
   164e2:	4619      	mov	r1, r3
   164e4:	4803      	ldr	r0, [pc, #12]	; (164f4 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8f0>)
   164e6:	f7fe fd9f 	bl	15028 <__cyg_profile_func_exit>
   164ea:	4623      	mov	r3, r4
}
   164ec:	4618      	mov	r0, r3
   164ee:	b020      	add	sp, #128	; 0x80
   164f0:	bd70      	pop	{r4, r5, r6, pc}
   164f2:	bf00      	nop
   164f4:	00015c05 	.word	0x00015c05

000164f8 <printf>:

///////////////////////////////////////////////////////////////////////////////


int printf(const char* format, ...)
{
   164f8:	b40f      	push	{r0, r1, r2, r3}
   164fa:	b530      	push	{r4, r5, lr}
   164fc:	b087      	sub	sp, #28
   164fe:	4675      	mov	r5, lr
   16500:	462b      	mov	r3, r5
   16502:	4619      	mov	r1, r3
   16504:	480d      	ldr	r0, [pc, #52]	; (1653c <printf+0x44>)
   16506:	f7fe fd7b 	bl	15000 <__cyg_profile_func_enter>
  va_list va;
  va_start(va, format);
   1650a:	ab0b      	add	r3, sp, #44	; 0x2c
   1650c:	9304      	str	r3, [sp, #16]
  char buffer[1];
  const int ret = _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
   1650e:	a903      	add	r1, sp, #12
   16510:	9b04      	ldr	r3, [sp, #16]
   16512:	9300      	str	r3, [sp, #0]
   16514:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   16516:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1651a:	4809      	ldr	r0, [pc, #36]	; (16540 <printf+0x48>)
   1651c:	f7ff fb72 	bl	15c04 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)>
   16520:	9005      	str	r0, [sp, #20]
  va_end(va);
  return ret;
   16522:	9c05      	ldr	r4, [sp, #20]
   16524:	462b      	mov	r3, r5
   16526:	4619      	mov	r1, r3
   16528:	4804      	ldr	r0, [pc, #16]	; (1653c <printf+0x44>)
   1652a:	f7fe fd7d 	bl	15028 <__cyg_profile_func_exit>
   1652e:	4623      	mov	r3, r4
}
   16530:	4618      	mov	r0, r3
   16532:	b007      	add	sp, #28
   16534:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   16538:	b004      	add	sp, #16
   1653a:	4770      	bx	lr
   1653c:	000164f9 	.word	0x000164f9
   16540:	0001526d 	.word	0x0001526d

00016544 <vsnprintf>:
  return ret;
}


int vsnprintf(char* buffer, size_t count, const char* format, va_list va)
{
   16544:	b530      	push	{r4, r5, lr}
   16546:	b087      	sub	sp, #28
   16548:	4674      	mov	r4, lr
   1654a:	9005      	str	r0, [sp, #20]
   1654c:	9104      	str	r1, [sp, #16]
   1654e:	9203      	str	r2, [sp, #12]
   16550:	9302      	str	r3, [sp, #8]
   16552:	4623      	mov	r3, r4
   16554:	4619      	mov	r1, r3
   16556:	480a      	ldr	r0, [pc, #40]	; (16580 <vsnprintf+0x3c>)
   16558:	f7fe fd52 	bl	15000 <__cyg_profile_func_enter>
  return _vsnprintf(_out_buffer, buffer, count, format, va);
   1655c:	9b02      	ldr	r3, [sp, #8]
   1655e:	9300      	str	r3, [sp, #0]
   16560:	9b03      	ldr	r3, [sp, #12]
   16562:	9a04      	ldr	r2, [sp, #16]
   16564:	9905      	ldr	r1, [sp, #20]
   16566:	4807      	ldr	r0, [pc, #28]	; (16584 <vsnprintf+0x40>)
   16568:	f7ff fb4c 	bl	15c04 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)>
   1656c:	4605      	mov	r5, r0
   1656e:	4623      	mov	r3, r4
   16570:	4619      	mov	r1, r3
   16572:	4803      	ldr	r0, [pc, #12]	; (16580 <vsnprintf+0x3c>)
   16574:	f7fe fd58 	bl	15028 <__cyg_profile_func_exit>
   16578:	462b      	mov	r3, r5
}
   1657a:	4618      	mov	r0, r3
   1657c:	b007      	add	sp, #28
   1657e:	bd30      	pop	{r4, r5, pc}
   16580:	00016545 	.word	0x00016545
   16584:	000151f9 	.word	0x000151f9

00016588 <Wait(unsigned long long)::{lambda()#1}::operator()() const>:

inline Status Wait(uint64_t timeout)
{
  return Wait(timeout, []() -> bool { return false; });
   16588:	b530      	push	{r4, r5, lr}
   1658a:	b083      	sub	sp, #12
   1658c:	4675      	mov	r5, lr
   1658e:	9001      	str	r0, [sp, #4]
   16590:	462b      	mov	r3, r5
   16592:	4619      	mov	r1, r3
   16594:	4806      	ldr	r0, [pc, #24]	; (165b0 <Wait(unsigned long long)::{lambda()#1}::operator()() const+0x28>)
   16596:	f7fe fd33 	bl	15000 <__cyg_profile_func_enter>
   1659a:	2400      	movs	r4, #0
   1659c:	462b      	mov	r3, r5
   1659e:	4619      	mov	r1, r3
   165a0:	4803      	ldr	r0, [pc, #12]	; (165b0 <Wait(unsigned long long)::{lambda()#1}::operator()() const+0x28>)
   165a2:	f7fe fd41 	bl	15028 <__cyg_profile_func_exit>
   165a6:	4623      	mov	r3, r4
   165a8:	4618      	mov	r0, r3
   165aa:	b003      	add	sp, #12
   165ac:	bd30      	pop	{r4, r5, pc}
   165ae:	bf00      	nop
   165b0:	00016589 	.word	0x00016589

000165b4 <Wait(unsigned long long)::{lambda()#1}::_FUN()>:
   165b4:	b538      	push	{r3, r4, r5, lr}
   165b6:	4674      	mov	r4, lr
   165b8:	4623      	mov	r3, r4
   165ba:	4619      	mov	r1, r3
   165bc:	4807      	ldr	r0, [pc, #28]	; (165dc <Wait(unsigned long long)::{lambda()#1}::_FUN()+0x28>)
   165be:	f7fe fd1f 	bl	15000 <__cyg_profile_func_enter>
   165c2:	2000      	movs	r0, #0
   165c4:	f7ff ffe0 	bl	16588 <Wait(unsigned long long)::{lambda()#1}::operator()() const>
   165c8:	4603      	mov	r3, r0
   165ca:	461d      	mov	r5, r3
   165cc:	4623      	mov	r3, r4
   165ce:	4619      	mov	r1, r3
   165d0:	4802      	ldr	r0, [pc, #8]	; (165dc <Wait(unsigned long long)::{lambda()#1}::_FUN()+0x28>)
   165d2:	f7fe fd29 	bl	15028 <__cyg_profile_func_exit>
   165d6:	462b      	mov	r3, r5
   165d8:	4618      	mov	r0, r3
   165da:	bd38      	pop	{r3, r4, r5, pc}
   165dc:	000165b5 	.word	0x000165b5

000165e0 <Wait(unsigned long long)>:
{
   165e0:	b5f0      	push	{r4, r5, r6, r7, lr}
   165e2:	b089      	sub	sp, #36	; 0x24
   165e4:	4675      	mov	r5, lr
   165e6:	e9cd 0100 	strd	r0, r1, [sp]
   165ea:	462b      	mov	r3, r5
   165ec:	4619      	mov	r1, r3
   165ee:	482b      	ldr	r0, [pc, #172]	; (1669c <Wait(unsigned long long)+0xbc>)
   165f0:	f7fe fd06 	bl	15000 <__cyg_profile_func_enter>
   165f4:	e9dd 3400 	ldrd	r3, r4, [sp]
   165f8:	e9cd 3406 	strd	r3, r4, [sp, #24]
   165fc:	f88d 6008 	strb.w	r6, [sp, #8]
   16600:	462b      	mov	r3, r5
   16602:	4619      	mov	r1, r3
   16604:	4826      	ldr	r0, [pc, #152]	; (166a0 <Wait(unsigned long long)+0xc0>)
   16606:	f7fe fcfb 	bl	15000 <__cyg_profile_func_enter>
  uint64_t timeout_time = 0;
   1660a:	f04f 0300 	mov.w	r3, #0
   1660e:	f04f 0400 	mov.w	r4, #0
   16612:	e9cd 3404 	strd	r3, r4, [sp, #16]
  if (timeout == kMaxWait)
   16616:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
   1661a:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
   1661e:	bf08      	it	eq
   16620:	f1b3 3fff 	cmpeq.w	r3, #4294967295	; 0xffffffff
   16624:	d106      	bne.n	16634 <Wait(unsigned long long)+0x54>
    timeout_time = kMaxWait;
   16626:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1662a:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   1662e:	e9cd 3404 	strd	r3, r4, [sp, #16]
   16632:	e00a      	b.n	1664a <Wait(unsigned long long)+0x6a>
    timeout_time = Milliseconds() + timeout;
   16634:	f7fa fa66 	bl	10b04 <Milliseconds()>
   16638:	460a      	mov	r2, r1
   1663a:	4601      	mov	r1, r0
   1663c:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
   16640:	185e      	adds	r6, r3, r1
   16642:	eb44 0702 	adc.w	r7, r4, r2
   16646:	e9cd 6704 	strd	r6, r7, [sp, #16]
  Status status = Status::kTimedOut;
   1664a:	2301      	movs	r3, #1
   1664c:	9303      	str	r3, [sp, #12]
  while (Milliseconds() < timeout_time)
   1664e:	f7fa fa59 	bl	10b04 <Milliseconds()>
   16652:	460a      	mov	r2, r1
   16654:	4601      	mov	r1, r0
   16656:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
   1665a:	42a2      	cmp	r2, r4
   1665c:	bf08      	it	eq
   1665e:	4299      	cmpeq	r1, r3
   16660:	bf34      	ite	cc
   16662:	2301      	movcc	r3, #1
   16664:	2300      	movcs	r3, #0
   16666:	b2db      	uxtb	r3, r3
   16668:	2b00      	cmp	r3, #0
   1666a:	d008      	beq.n	1667e <Wait(unsigned long long)+0x9e>
    if (is_done())
   1666c:	ab02      	add	r3, sp, #8
   1666e:	4618      	mov	r0, r3
   16670:	f7ff ff8a 	bl	16588 <Wait(unsigned long long)::{lambda()#1}::operator()() const>
   16674:	4603      	mov	r3, r0
   16676:	2b00      	cmp	r3, #0
   16678:	d0e9      	beq.n	1664e <Wait(unsigned long long)+0x6e>
      status = Status::kSuccess;
   1667a:	2300      	movs	r3, #0
   1667c:	9303      	str	r3, [sp, #12]
  return status;
   1667e:	9c03      	ldr	r4, [sp, #12]
   16680:	462b      	mov	r3, r5
   16682:	4619      	mov	r1, r3
   16684:	4806      	ldr	r0, [pc, #24]	; (166a0 <Wait(unsigned long long)+0xc0>)
   16686:	f7fe fccf 	bl	15028 <__cyg_profile_func_exit>
   1668a:	462b      	mov	r3, r5
   1668c:	4619      	mov	r1, r3
   1668e:	4803      	ldr	r0, [pc, #12]	; (1669c <Wait(unsigned long long)+0xbc>)
   16690:	f7fe fcca 	bl	15028 <__cyg_profile_func_exit>
  return Wait(timeout, []() -> bool { return false; });
   16694:	4623      	mov	r3, r4
}
   16696:	4618      	mov	r0, r3
   16698:	b009      	add	sp, #36	; 0x24
   1669a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1669c:	000165e1 	.word	0x000165e1
   166a0:	000179a5 	.word	0x000179a5

000166a4 <Delay(unsigned long long)>:

// Delay the system for a duration of time
inline void Delay([[maybe_unused]] uint64_t delay_time_ms)
{
   166a4:	b510      	push	{r4, lr}
   166a6:	b082      	sub	sp, #8
   166a8:	4674      	mov	r4, lr
   166aa:	e9cd 0100 	strd	r0, r1, [sp]
   166ae:	4623      	mov	r3, r4
   166b0:	4619      	mov	r1, r3
   166b2:	4807      	ldr	r0, [pc, #28]	; (166d0 <Delay(unsigned long long)+0x2c>)
   166b4:	f7fe fca4 	bl	15000 <__cyg_profile_func_enter>
#if defined(HOST_TEST)
  return;
#else
  Wait(delay_time_ms);
   166b8:	e9dd 0100 	ldrd	r0, r1, [sp]
   166bc:	f7ff ff90 	bl	165e0 <Wait(unsigned long long)>
   166c0:	4623      	mov	r3, r4
   166c2:	4619      	mov	r1, r3
   166c4:	4802      	ldr	r0, [pc, #8]	; (166d0 <Delay(unsigned long long)+0x2c>)
   166c6:	f7fe fcaf 	bl	15028 <__cyg_profile_func_exit>
#endif  // HOST_TEST
}
   166ca:	bf00      	nop
   166cc:	b002      	add	sp, #8
   166ce:	bd10      	pop	{r4, pc}
   166d0:	000166a5 	.word	0x000166a5

000166d4 <SdInterface::SdInterface()>:
// NOLINTNEXTLINE(readability-identifier-naming)
// Relevant Datasheet:
// https://www.sdcard.org/downloads/pls/pdf/index.php?p=Part1_Physical_Layer_Simplified_Specification_Ver6.00.jpg&f=Part1_Physical_Layer_Simplified_Specification_Ver6.00.pdf&e=EN_SS1
// TODO(#348):  Write a class to represent a single Sd Card Block to make use
//              of block-related functions easier.
class SdInterface
   166d4:	b530      	push	{r4, r5, lr}
   166d6:	b083      	sub	sp, #12
   166d8:	4675      	mov	r5, lr
   166da:	9001      	str	r0, [sp, #4]
   166dc:	462b      	mov	r3, r5
   166de:	4619      	mov	r1, r3
   166e0:	4807      	ldr	r0, [pc, #28]	; (16700 <SdInterface::SdInterface()+0x2c>)
   166e2:	f7fe fc8d 	bl	15000 <__cyg_profile_func_enter>
   166e6:	4a07      	ldr	r2, [pc, #28]	; (16704 <SdInterface::SdInterface()+0x30>)
   166e8:	9b01      	ldr	r3, [sp, #4]
   166ea:	601a      	str	r2, [r3, #0]
   166ec:	9c01      	ldr	r4, [sp, #4]
   166ee:	462b      	mov	r3, r5
   166f0:	4619      	mov	r1, r3
   166f2:	4803      	ldr	r0, [pc, #12]	; (16700 <SdInterface::SdInterface()+0x2c>)
   166f4:	f7fe fc98 	bl	15028 <__cyg_profile_func_exit>
   166f8:	4623      	mov	r3, r4
   166fa:	4618      	mov	r0, r3
   166fc:	b003      	add	sp, #12
   166fe:	bd30      	pop	{r4, r5, pc}
   16700:	000166d5 	.word	0x000166d5
   16704:	0001aa48 	.word	0x0001aa48

00016708 <Sd::Sd(Sd::DebugSdCard_t, unsigned char, unsigned char, unsigned char, unsigned char)>:
  /// port that is broken out through the board's GPIO, allowing you to probe
  /// the chip select manually. To use this version instead of the main version,
  /// instantiate an Sd card instance like so:
  ///
  ///   Sd sdcard(Sd::DebugSdCard_t{});
  constexpr Sd(DebugSdCard_t, uint8_t port = 1, uint8_t pin = 8,
   16708:	b530      	push	{r4, r5, lr}
   1670a:	b083      	sub	sp, #12
   1670c:	4675      	mov	r5, lr
   1670e:	9001      	str	r0, [sp, #4]
   16710:	f88d 1000 	strb.w	r1, [sp]
   16714:	4611      	mov	r1, r2
   16716:	461a      	mov	r2, r3
   16718:	460b      	mov	r3, r1
   1671a:	f88d 3003 	strb.w	r3, [sp, #3]
   1671e:	4613      	mov	r3, r2
   16720:	f88d 3002 	strb.w	r3, [sp, #2]
   16724:	462b      	mov	r3, r5
   16726:	4619      	mov	r1, r3
   16728:	481d      	ldr	r0, [pc, #116]	; (167a0 <Sd::Sd(Sd::DebugSdCard_t, unsigned char, unsigned char, unsigned char, unsigned char)+0x98>)
   1672a:	f7fe fc69 	bl	15000 <__cyg_profile_func_enter>
      : ssp_interface_(&ssp_),
        ssp_(Ssp::Peripheral::kSsp2),
        chip_select_(&chip_select_pin_),
        chip_select_external_(&chip_select_external_pin_),
        chip_select_pin_(port, pin),
        chip_select_external_pin_(extport, extpin)
   1672e:	9b01      	ldr	r3, [sp, #4]
   16730:	4618      	mov	r0, r3
   16732:	f7ff ffcf 	bl	166d4 <SdInterface::SdInterface()>
   16736:	4a1b      	ldr	r2, [pc, #108]	; (167a4 <Sd::Sd(Sd::DebugSdCard_t, unsigned char, unsigned char, unsigned char, unsigned char)+0x9c>)
   16738:	9b01      	ldr	r3, [sp, #4]
   1673a:	601a      	str	r2, [r3, #0]
   1673c:	9b01      	ldr	r3, [sp, #4]
   1673e:	f103 0208 	add.w	r2, r3, #8
   16742:	9b01      	ldr	r3, [sp, #4]
   16744:	605a      	str	r2, [r3, #4]
   16746:	9b01      	ldr	r3, [sp, #4]
   16748:	3308      	adds	r3, #8
   1674a:	2102      	movs	r1, #2
   1674c:	4618      	mov	r0, r3
   1674e:	f7fb fa05 	bl	11b5c <Ssp::Ssp(Ssp::Peripheral)>
   16752:	9b01      	ldr	r3, [sp, #4]
   16754:	f103 0240 	add.w	r2, r3, #64	; 0x40
   16758:	9b01      	ldr	r3, [sp, #4]
   1675a:	639a      	str	r2, [r3, #56]	; 0x38
   1675c:	9b01      	ldr	r3, [sp, #4]
   1675e:	f103 0254 	add.w	r2, r3, #84	; 0x54
   16762:	9b01      	ldr	r3, [sp, #4]
   16764:	63da      	str	r2, [r3, #60]	; 0x3c
   16766:	9b01      	ldr	r3, [sp, #4]
   16768:	3340      	adds	r3, #64	; 0x40
   1676a:	f89d 2002 	ldrb.w	r2, [sp, #2]
   1676e:	f89d 1003 	ldrb.w	r1, [sp, #3]
   16772:	4618      	mov	r0, r3
   16774:	f7fa fa02 	bl	10b7c <Gpio::Gpio(unsigned char, unsigned char)>
   16778:	9b01      	ldr	r3, [sp, #4]
   1677a:	3354      	adds	r3, #84	; 0x54
   1677c:	f89d 201c 	ldrb.w	r2, [sp, #28]
   16780:	f89d 1018 	ldrb.w	r1, [sp, #24]
   16784:	4618      	mov	r0, r3
   16786:	f7fa f9f9 	bl	10b7c <Gpio::Gpio(unsigned char, unsigned char)>
  {
  }
   1678a:	9c01      	ldr	r4, [sp, #4]
   1678c:	462b      	mov	r3, r5
   1678e:	4619      	mov	r1, r3
   16790:	4803      	ldr	r0, [pc, #12]	; (167a0 <Sd::Sd(Sd::DebugSdCard_t, unsigned char, unsigned char, unsigned char, unsigned char)+0x98>)
   16792:	f7fe fc49 	bl	15028 <__cyg_profile_func_exit>
   16796:	4623      	mov	r3, r4
   16798:	4618      	mov	r0, r3
   1679a:	b003      	add	sp, #12
   1679c:	bd30      	pop	{r4, r5, pc}
   1679e:	bf00      	nop
   167a0:	00016709 	.word	0x00016709
   167a4:	0001aa1c 	.word	0x0001aa1c

000167a8 <Sd::Initialize()>:

  void Initialize() override
   167a8:	b530      	push	{r4, r5, lr}
   167aa:	b085      	sub	sp, #20
   167ac:	4675      	mov	r5, lr
   167ae:	9003      	str	r0, [sp, #12]
   167b0:	462b      	mov	r3, r5
   167b2:	4619      	mov	r1, r3
   167b4:	4827      	ldr	r0, [pc, #156]	; (16854 <Sd::Initialize()+0xac>)
   167b6:	f7fe fc23 	bl	15000 <__cyg_profile_func_enter>
  {
    LOG_DEBUG("Begin initialization:");
    LOG_DEBUG("Setting CS as output...");
    chip_select_->SetAsOutput();
   167ba:	9b03      	ldr	r3, [sp, #12]
   167bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   167be:	9b03      	ldr	r3, [sp, #12]
   167c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   167c2:	681b      	ldr	r3, [r3, #0]
   167c4:	3304      	adds	r3, #4
   167c6:	681b      	ldr	r3, [r3, #0]
   167c8:	4610      	mov	r0, r2
   167ca:	4798      	blx	r3
    chip_select_->SetHigh();
   167cc:	9b03      	ldr	r3, [sp, #12]
   167ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   167d0:	9b03      	ldr	r3, [sp, #12]
   167d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   167d4:	681b      	ldr	r3, [r3, #0]
   167d6:	330c      	adds	r3, #12
   167d8:	681b      	ldr	r3, [r3, #0]
   167da:	4610      	mov	r0, r2
   167dc:	4798      	blx	r3
    chip_select_external_->SetAsOutput();
   167de:	9b03      	ldr	r3, [sp, #12]
   167e0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
   167e2:	9b03      	ldr	r3, [sp, #12]
   167e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   167e6:	681b      	ldr	r3, [r3, #0]
   167e8:	3304      	adds	r3, #4
   167ea:	681b      	ldr	r3, [r3, #0]
   167ec:	4610      	mov	r0, r2
   167ee:	4798      	blx	r3
    chip_select_external_->SetHigh();
   167f0:	9b03      	ldr	r3, [sp, #12]
   167f2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
   167f4:	9b03      	ldr	r3, [sp, #12]
   167f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   167f8:	681b      	ldr	r3, [r3, #0]
   167fa:	330c      	adds	r3, #12
   167fc:	681b      	ldr	r3, [r3, #0]
   167fe:	4610      	mov	r0, r2
   16800:	4798      	blx	r3

    LOG_DEBUG("Setting SSP Clock Speed...");
    ssp_interface_->SetClock(false, false, 14, 2);  // 400kHz
   16802:	9b03      	ldr	r3, [sp, #12]
   16804:	6858      	ldr	r0, [r3, #4]
   16806:	9b03      	ldr	r3, [sp, #12]
   16808:	685b      	ldr	r3, [r3, #4]
   1680a:	681b      	ldr	r3, [r3, #0]
   1680c:	3318      	adds	r3, #24
   1680e:	681c      	ldr	r4, [r3, #0]
   16810:	2302      	movs	r3, #2
   16812:	9300      	str	r3, [sp, #0]
   16814:	230e      	movs	r3, #14
   16816:	2200      	movs	r2, #0
   16818:	2100      	movs	r1, #0
   1681a:	47a0      	blx	r4

    LOG_DEBUG("Setting Peripheral Mode...");
    ssp_interface_->SetPeripheralMode(Ssp::MasterSlaveMode::kMaster,
   1681c:	9b03      	ldr	r3, [sp, #12]
   1681e:	6858      	ldr	r0, [r3, #4]
   16820:	9b03      	ldr	r3, [sp, #12]
   16822:	685b      	ldr	r3, [r3, #4]
                                      Ssp::FrameMode::kSpi,
                                      Ssp::DataSize::kEight);
   16824:	681b      	ldr	r3, [r3, #0]
   16826:	3310      	adds	r3, #16
   16828:	681c      	ldr	r4, [r3, #0]
    ssp_interface_->SetPeripheralMode(Ssp::MasterSlaveMode::kMaster,
   1682a:	2307      	movs	r3, #7
   1682c:	2200      	movs	r2, #0
   1682e:	2100      	movs	r1, #0
   16830:	47a0      	blx	r4

    LOG_DEBUG("Starting SSP Peripheral...");
    ssp_interface_->Initialize();
   16832:	9b03      	ldr	r3, [sp, #12]
   16834:	685a      	ldr	r2, [r3, #4]
   16836:	9b03      	ldr	r3, [sp, #12]
   16838:	685b      	ldr	r3, [r3, #4]
   1683a:	681b      	ldr	r3, [r3, #0]
   1683c:	681b      	ldr	r3, [r3, #0]
   1683e:	4610      	mov	r0, r2
   16840:	4798      	blx	r3
   16842:	462b      	mov	r3, r5
   16844:	4619      	mov	r1, r3
   16846:	4803      	ldr	r0, [pc, #12]	; (16854 <Sd::Initialize()+0xac>)
   16848:	f7fe fbee 	bl	15028 <__cyg_profile_func_exit>
  }
   1684c:	bf00      	nop
   1684e:	b005      	add	sp, #20
   16850:	bd30      	pop	{r4, r5, pc}
   16852:	bf00      	nop
   16854:	000167a9 	.word	0x000167a9

00016858 <Sd::Mount(SdInterface::CardInfo_t*)>:

  // Initialize SD Card
  // TODO(#349): Split method into smaller piece with single jobs
  bool Mount(CardInfo_t * sd) override
   16858:	b530      	push	{r4, r5, lr}
   1685a:	b08b      	sub	sp, #44	; 0x2c
   1685c:	4675      	mov	r5, lr
   1685e:	9003      	str	r0, [sp, #12]
   16860:	9102      	str	r1, [sp, #8]
   16862:	462b      	mov	r3, r5
   16864:	4619      	mov	r1, r3
   16866:	48a7      	ldr	r0, [pc, #668]	; (16b04 <Sd::Mount(SdInterface::CardInfo_t*)+0x2ac>)
   16868:	f7fe fbca 	bl	15000 <__cyg_profile_func_enter>
  {
    uint8_t tries     = 0;
   1686c:	2300      	movs	r3, #0
   1686e:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    bool card_is_idle = false;
   16872:	2300      	movs	r3, #0
   16874:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26

    // Reset the card and force it to go to idle state at <400kHz with a
    // CMD0 + (active-low) CS
    LOG_DEBUG("Sending SD Card to Idle State...");
    sd->response.length = SendCmd(Command::kReset, 0x00000000,
                                  sd->response.data.byte, 100, KeepAlive::kYes);
   16878:	9b03      	ldr	r3, [sp, #12]
   1687a:	681b      	ldr	r3, [r3, #0]
   1687c:	681c      	ldr	r4, [r3, #0]
    sd->response.length = SendCmd(Command::kReset, 0x00000000,
   1687e:	9b02      	ldr	r3, [sp, #8]
   16880:	f103 0208 	add.w	r2, r3, #8
   16884:	2301      	movs	r3, #1
   16886:	9301      	str	r3, [sp, #4]
   16888:	2364      	movs	r3, #100	; 0x64
   1688a:	9300      	str	r3, [sp, #0]
   1688c:	4613      	mov	r3, r2
   1688e:	2200      	movs	r2, #0
   16890:	2140      	movs	r1, #64	; 0x40
   16892:	9803      	ldr	r0, [sp, #12]
   16894:	47a0      	blx	r4
   16896:	4602      	mov	r2, r0
   16898:	9b02      	ldr	r3, [sp, #8]
   1689a:	611a      	str	r2, [r3, #16]

    // Reset the card again to trigger SPI mode
    LOG_DEBUG("Initializing SPI mode...");
    do
    {
      tries++;
   1689c:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   168a0:	3301      	adds	r3, #1
   168a2:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
      sd->response.length = SendCmd(
          Command::kReset, 0x00, sd->response.data.byte, 100, KeepAlive::kYes);
   168a6:	9b03      	ldr	r3, [sp, #12]
   168a8:	681b      	ldr	r3, [r3, #0]
   168aa:	681c      	ldr	r4, [r3, #0]
      sd->response.length = SendCmd(
   168ac:	9b02      	ldr	r3, [sp, #8]
   168ae:	f103 0208 	add.w	r2, r3, #8
   168b2:	2301      	movs	r3, #1
   168b4:	9301      	str	r3, [sp, #4]
   168b6:	2364      	movs	r3, #100	; 0x64
   168b8:	9300      	str	r3, [sp, #0]
   168ba:	4613      	mov	r3, r2
   168bc:	2200      	movs	r2, #0
   168be:	2140      	movs	r1, #64	; 0x40
   168c0:	9803      	ldr	r0, [sp, #12]
   168c2:	47a0      	blx	r4
   168c4:	4602      	mov	r2, r0
   168c6:	9b02      	ldr	r3, [sp, #8]
   168c8:	611a      	str	r2, [r3, #16]

      // Check if R1 response frame's bit 1 is set (to ensure that
      // card is in idle state)
      if (sd->response.data.byte[0] != 0xFF &&
   168ca:	9b02      	ldr	r3, [sp, #8]
   168cc:	7a1b      	ldrb	r3, [r3, #8]
   168ce:	2bff      	cmp	r3, #255	; 0xff
   168d0:	d008      	beq.n	168e4 <Sd::Mount(SdInterface::CardInfo_t*)+0x8c>
          (sd->response.data.byte[0] & 0x01) == 0x01)
   168d2:	9b02      	ldr	r3, [sp, #8]
   168d4:	7a1b      	ldrb	r3, [r3, #8]
   168d6:	f003 0301 	and.w	r3, r3, #1
      if (sd->response.data.byte[0] != 0xFF &&
   168da:	2b00      	cmp	r3, #0
   168dc:	d002      	beq.n	168e4 <Sd::Mount(SdInterface::CardInfo_t*)+0x8c>
      {
        // If it is, we can move on; otherwise, keep trying for a set
        // amount of tries
        card_is_idle = true;
   168de:	2301      	movs	r3, #1
   168e0:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
      }
      Delay(10);
   168e4:	f04f 000a 	mov.w	r0, #10
   168e8:	f04f 0100 	mov.w	r1, #0
   168ec:	f7ff feda 	bl	166a4 <Delay(unsigned long long)>
    } while (tries < kBusTimeout && !card_is_idle);
   168f0:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   168f4:	2bf9      	cmp	r3, #249	; 0xf9
   168f6:	d804      	bhi.n	16902 <Sd::Mount(SdInterface::CardInfo_t*)+0xaa>
   168f8:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
   168fc:	2b00      	cmp	r3, #0
   168fe:	d100      	bne.n	16902 <Sd::Mount(SdInterface::CardInfo_t*)+0xaa>
    do
   16900:	e7cc      	b.n	1689c <Sd::Mount(SdInterface::CardInfo_t*)+0x44>
    LOG_DEBUG("%d tries", tries);
    if (tries >= kBusTimeout)
   16902:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   16906:	2bf9      	cmp	r3, #249	; 0xf9
   16908:	d91b      	bls.n	16942 <Sd::Mount(SdInterface::CardInfo_t*)+0xea>
    {
      LOG_ERROR("Failed to initiate SPI mode within timeout. Aborting!");
   1690a:	f240 13ff 	movw	r3, #511	; 0x1ff
   1690e:	4a7e      	ldr	r2, [pc, #504]	; (16b08 <Sd::Mount(SdInterface::CardInfo_t*)+0x2b0>)
   16910:	497e      	ldr	r1, [pc, #504]	; (16b0c <Sd::Mount(SdInterface::CardInfo_t*)+0x2b4>)
   16912:	487f      	ldr	r0, [pc, #508]	; (16b10 <Sd::Mount(SdInterface::CardInfo_t*)+0x2b8>)
   16914:	f7ff fdf0 	bl	164f8 <printf>
      sd->response.length = SendCmd(Command::kGarbage, 0xFFFFFFFF,
                                    sd->response.data.byte, 0, KeepAlive::kNo);
   16918:	9b03      	ldr	r3, [sp, #12]
   1691a:	681b      	ldr	r3, [r3, #0]
   1691c:	681c      	ldr	r4, [r3, #0]
      sd->response.length = SendCmd(Command::kGarbage, 0xFFFFFFFF,
   1691e:	9b02      	ldr	r3, [sp, #8]
   16920:	f103 0208 	add.w	r2, r3, #8
   16924:	2300      	movs	r3, #0
   16926:	9301      	str	r3, [sp, #4]
   16928:	2300      	movs	r3, #0
   1692a:	9300      	str	r3, [sp, #0]
   1692c:	4613      	mov	r3, r2
   1692e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   16932:	21ff      	movs	r1, #255	; 0xff
   16934:	9803      	ldr	r0, [sp, #12]
   16936:	47a0      	blx	r4
   16938:	4602      	mov	r2, r0
   1693a:	9b02      	ldr	r3, [sp, #8]
   1693c:	611a      	str	r2, [r3, #16]
      return false;
   1693e:	2400      	movs	r4, #0
   16940:	e10c      	b.n	16b5c <Sd::Mount(SdInterface::CardInfo_t*)+0x304>
    }

    // Send the host's supported voltage (3.3V) and ask if the card
    // supports it
    LOG_DEBUG("Checking Current SD Card Voltage Level...");
    constexpr uint8_t kCheckPattern = 0xAB;
   16942:	23ab      	movs	r3, #171	; 0xab
   16944:	f88d 301f 	strb.w	r3, [sp, #31]
    uint64_t supported_voltage      = 0x00000001;
   16948:	f04f 0301 	mov.w	r3, #1
   1694c:	f04f 0400 	mov.w	r4, #0
   16950:	e9cd 3404 	strd	r3, r4, [sp, #16]
    sd->response.length =
        SendCmd(Command::kGetOp,
                static_cast<uint32_t>((supported_voltage << 8) | kCheckPattern),
                sd->response.data.byte, 100, KeepAlive::kYes);
   16954:	9b03      	ldr	r3, [sp, #12]
   16956:	681b      	ldr	r3, [r3, #0]
   16958:	681c      	ldr	r4, [r3, #0]
                static_cast<uint32_t>((supported_voltage << 8) | kCheckPattern),
   1695a:	9b04      	ldr	r3, [sp, #16]
   1695c:	021b      	lsls	r3, r3, #8
        SendCmd(Command::kGetOp,
   1695e:	f043 02ab 	orr.w	r2, r3, #171	; 0xab
   16962:	9b02      	ldr	r3, [sp, #8]
   16964:	f103 0108 	add.w	r1, r3, #8
   16968:	2301      	movs	r3, #1
   1696a:	9301      	str	r3, [sp, #4]
   1696c:	2364      	movs	r3, #100	; 0x64
   1696e:	9300      	str	r3, [sp, #0]
   16970:	460b      	mov	r3, r1
   16972:	2148      	movs	r1, #72	; 0x48
   16974:	9803      	ldr	r0, [sp, #12]
   16976:	47a0      	blx	r4
   16978:	4602      	mov	r2, r0
    sd->response.length =
   1697a:	9b02      	ldr	r3, [sp, #8]
   1697c:	611a      	str	r2, [r3, #16]
    if (sd->response.data.byte[4] != kCheckPattern)
   1697e:	9b02      	ldr	r3, [sp, #8]
   16980:	7b1b      	ldrb	r3, [r3, #12]
   16982:	2bab      	cmp	r3, #171	; 0xab
   16984:	d01b      	beq.n	169be <Sd::Mount(SdInterface::CardInfo_t*)+0x166>
    {
      // If the last byte is not an exact echo of the LSB of the kGetOp
      // command's argument, this response is invalid
      LOG_ERROR("Response integrity check failed. Aborting!");
   16986:	f240 2312 	movw	r3, #530	; 0x212
   1698a:	4a5f      	ldr	r2, [pc, #380]	; (16b08 <Sd::Mount(SdInterface::CardInfo_t*)+0x2b0>)
   1698c:	4961      	ldr	r1, [pc, #388]	; (16b14 <Sd::Mount(SdInterface::CardInfo_t*)+0x2bc>)
   1698e:	4862      	ldr	r0, [pc, #392]	; (16b18 <Sd::Mount(SdInterface::CardInfo_t*)+0x2c0>)
   16990:	f7ff fdb2 	bl	164f8 <printf>
      sd->response.length = SendCmd(Command::kGarbage, 0xFFFFFFFF,
                                    sd->response.data.byte, 0, KeepAlive::kNo);
   16994:	9b03      	ldr	r3, [sp, #12]
   16996:	681b      	ldr	r3, [r3, #0]
   16998:	681c      	ldr	r4, [r3, #0]
      sd->response.length = SendCmd(Command::kGarbage, 0xFFFFFFFF,
   1699a:	9b02      	ldr	r3, [sp, #8]
   1699c:	f103 0208 	add.w	r2, r3, #8
   169a0:	2300      	movs	r3, #0
   169a2:	9301      	str	r3, [sp, #4]
   169a4:	2300      	movs	r3, #0
   169a6:	9300      	str	r3, [sp, #0]
   169a8:	4613      	mov	r3, r2
   169aa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   169ae:	21ff      	movs	r1, #255	; 0xff
   169b0:	9803      	ldr	r0, [sp, #12]
   169b2:	47a0      	blx	r4
   169b4:	4602      	mov	r2, r0
   169b6:	9b02      	ldr	r3, [sp, #8]
   169b8:	611a      	str	r2, [r3, #16]
      return false;
   169ba:	2400      	movs	r4, #0
   169bc:	e0ce      	b.n	16b5c <Sd::Mount(SdInterface::CardInfo_t*)+0x304>
    }
    else if (sd->response.data.byte[3] &
   169be:	9b02      	ldr	r3, [sp, #8]
   169c0:	7adb      	ldrb	r3, [r3, #11]
   169c2:	4619      	mov	r1, r3
             (supported_voltage == static_cast<uint64_t>(0x00)))
   169c4:	9a04      	ldr	r2, [sp, #16]
   169c6:	9b05      	ldr	r3, [sp, #20]
   169c8:	4313      	orrs	r3, r2
   169ca:	2b00      	cmp	r3, #0
   169cc:	bf0c      	ite	eq
   169ce:	2301      	moveq	r3, #1
   169d0:	2300      	movne	r3, #0
   169d2:	b2db      	uxtb	r3, r3
    else if (sd->response.data.byte[3] &
   169d4:	400b      	ands	r3, r1
   169d6:	2b00      	cmp	r3, #0
   169d8:	d01b      	beq.n	16a12 <Sd::Mount(SdInterface::CardInfo_t*)+0x1ba>
    {
      // If the 2nd-to-last byte of the reponse AND'ed with our host
      // device's supported voltage range is 0x00, the SD card doesn't
      // support our device's operating voltage
      LOG_ERROR("Unsupported voltage in use. Aborting!");
   169da:	f240 231d 	movw	r3, #541	; 0x21d
   169de:	4a4a      	ldr	r2, [pc, #296]	; (16b08 <Sd::Mount(SdInterface::CardInfo_t*)+0x2b0>)
   169e0:	494e      	ldr	r1, [pc, #312]	; (16b1c <Sd::Mount(SdInterface::CardInfo_t*)+0x2c4>)
   169e2:	484f      	ldr	r0, [pc, #316]	; (16b20 <Sd::Mount(SdInterface::CardInfo_t*)+0x2c8>)
   169e4:	f7ff fd88 	bl	164f8 <printf>
      sd->response.length = SendCmd(Command::kGarbage, 0xFFFFFFFF,
                                    sd->response.data.byte, 0, KeepAlive::kNo);
   169e8:	9b03      	ldr	r3, [sp, #12]
   169ea:	681b      	ldr	r3, [r3, #0]
   169ec:	681c      	ldr	r4, [r3, #0]
      sd->response.length = SendCmd(Command::kGarbage, 0xFFFFFFFF,
   169ee:	9b02      	ldr	r3, [sp, #8]
   169f0:	f103 0208 	add.w	r2, r3, #8
   169f4:	2300      	movs	r3, #0
   169f6:	9301      	str	r3, [sp, #4]
   169f8:	2300      	movs	r3, #0
   169fa:	9300      	str	r3, [sp, #0]
   169fc:	4613      	mov	r3, r2
   169fe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   16a02:	21ff      	movs	r1, #255	; 0xff
   16a04:	9803      	ldr	r0, [sp, #12]
   16a06:	47a0      	blx	r4
   16a08:	4602      	mov	r2, r0
   16a0a:	9b02      	ldr	r3, [sp, #8]
   16a0c:	611a      	str	r2, [r3, #16]
      return false;
   16a0e:	2400      	movs	r4, #0
   16a10:	e0a4      	b.n	16b5c <Sd::Mount(SdInterface::CardInfo_t*)+0x304>
    }

    // Indicate that the host supports SDHC/SDXC and wait for card to
    // shift out of idle state
    LOG_DEBUG("Expressing High-Capacity SD Card Support...");
    tries = 0;
   16a12:	2300      	movs	r3, #0
   16a14:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    do
    {
      // Send host's operating conditions
      sd->response.length =
          SendCmd(Command::kInit, 0x40000000, sd->response.data.byte, 100,
                  KeepAlive::kYes);
   16a18:	9b03      	ldr	r3, [sp, #12]
   16a1a:	681b      	ldr	r3, [r3, #0]
   16a1c:	681c      	ldr	r4, [r3, #0]
          SendCmd(Command::kInit, 0x40000000, sd->response.data.byte, 100,
   16a1e:	9b02      	ldr	r3, [sp, #8]
   16a20:	f103 0208 	add.w	r2, r3, #8
   16a24:	2301      	movs	r3, #1
   16a26:	9301      	str	r3, [sp, #4]
   16a28:	2364      	movs	r3, #100	; 0x64
   16a2a:	9300      	str	r3, [sp, #0]
   16a2c:	4613      	mov	r3, r2
   16a2e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   16a32:	2141      	movs	r1, #65	; 0x41
   16a34:	9803      	ldr	r0, [sp, #12]
   16a36:	47a0      	blx	r4
   16a38:	4602      	mov	r2, r0
      sd->response.length =
   16a3a:	9b02      	ldr	r3, [sp, #8]
   16a3c:	611a      	str	r2, [r3, #16]
      tries++;
   16a3e:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   16a42:	3301      	adds	r3, #1
   16a44:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    } while (tries < kBusTimeout && sd->response.data.byte[0] & 0x01);
   16a48:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   16a4c:	2bf9      	cmp	r3, #249	; 0xf9
   16a4e:	d806      	bhi.n	16a5e <Sd::Mount(SdInterface::CardInfo_t*)+0x206>
   16a50:	9b02      	ldr	r3, [sp, #8]
   16a52:	7a1b      	ldrb	r3, [r3, #8]
   16a54:	f003 0301 	and.w	r3, r3, #1
   16a58:	2b00      	cmp	r3, #0
   16a5a:	d000      	beq.n	16a5e <Sd::Mount(SdInterface::CardInfo_t*)+0x206>
    do
   16a5c:	e7dc      	b.n	16a18 <Sd::Mount(SdInterface::CardInfo_t*)+0x1c0>
    if (tries == kBusTimeout)
   16a5e:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   16a62:	2bfa      	cmp	r3, #250	; 0xfa
   16a64:	d11b      	bne.n	16a9e <Sd::Mount(SdInterface::CardInfo_t*)+0x246>
    {
      LOG_ERROR("SD Card timed out. Aborting!");
   16a66:	f240 2331 	movw	r3, #561	; 0x231
   16a6a:	4a27      	ldr	r2, [pc, #156]	; (16b08 <Sd::Mount(SdInterface::CardInfo_t*)+0x2b0>)
   16a6c:	492d      	ldr	r1, [pc, #180]	; (16b24 <Sd::Mount(SdInterface::CardInfo_t*)+0x2cc>)
   16a6e:	482e      	ldr	r0, [pc, #184]	; (16b28 <Sd::Mount(SdInterface::CardInfo_t*)+0x2d0>)
   16a70:	f7ff fd42 	bl	164f8 <printf>
      sd->response.length = SendCmd(Command::kGarbage, 0xFFFFFFFF,
                                    sd->response.data.byte, 0, KeepAlive::kNo);
   16a74:	9b03      	ldr	r3, [sp, #12]
   16a76:	681b      	ldr	r3, [r3, #0]
   16a78:	681c      	ldr	r4, [r3, #0]
      sd->response.length = SendCmd(Command::kGarbage, 0xFFFFFFFF,
   16a7a:	9b02      	ldr	r3, [sp, #8]
   16a7c:	f103 0208 	add.w	r2, r3, #8
   16a80:	2300      	movs	r3, #0
   16a82:	9301      	str	r3, [sp, #4]
   16a84:	2300      	movs	r3, #0
   16a86:	9300      	str	r3, [sp, #0]
   16a88:	4613      	mov	r3, r2
   16a8a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   16a8e:	21ff      	movs	r1, #255	; 0xff
   16a90:	9803      	ldr	r0, [sp, #12]
   16a92:	47a0      	blx	r4
   16a94:	4602      	mov	r2, r0
   16a96:	9b02      	ldr	r3, [sp, #8]
   16a98:	611a      	str	r2, [r3, #16]
      return false;
   16a9a:	2400      	movs	r4, #0
   16a9c:	e05e      	b.n	16b5c <Sd::Mount(SdInterface::CardInfo_t*)+0x304>
    // After card is ready, acquire card capacity info using kGetOcr a
    // second time
    LOG_DEBUG("Reading Card Capacity Information...");
    // Read CCS
    sd->response.length = SendCmd(Command::kGetOcr, 0x00,
                                  sd->response.data.byte, 100, KeepAlive::kYes);
   16a9e:	9b03      	ldr	r3, [sp, #12]
   16aa0:	681b      	ldr	r3, [r3, #0]
   16aa2:	681c      	ldr	r4, [r3, #0]
    sd->response.length = SendCmd(Command::kGetOcr, 0x00,
   16aa4:	9b02      	ldr	r3, [sp, #8]
   16aa6:	f103 0208 	add.w	r2, r3, #8
   16aaa:	2301      	movs	r3, #1
   16aac:	9301      	str	r3, [sp, #4]
   16aae:	2364      	movs	r3, #100	; 0x64
   16ab0:	9300      	str	r3, [sp, #0]
   16ab2:	4613      	mov	r3, r2
   16ab4:	2200      	movs	r2, #0
   16ab6:	217a      	movs	r1, #122	; 0x7a
   16ab8:	9803      	ldr	r0, [sp, #12]
   16aba:	47a0      	blx	r4
   16abc:	4602      	mov	r2, r0
   16abe:	9b02      	ldr	r3, [sp, #8]
   16ac0:	611a      	str	r2, [r3, #16]
    if (sd->response.data.byte[1] & 0x40)
   16ac2:	9b02      	ldr	r3, [sp, #8]
   16ac4:	7a5b      	ldrb	r3, [r3, #9]
   16ac6:	f003 0340 	and.w	r3, r3, #64	; 0x40
   16aca:	2b00      	cmp	r3, #0
   16acc:	d003      	beq.n	16ad6 <Sd::Mount(SdInterface::CardInfo_t*)+0x27e>
    {
      // The card is either high or extended capacity
      LOG_DEBUG("SD Card is HC/XC");
      sd->type = Type::kSDHC;
   16ace:	9b02      	ldr	r3, [sp, #8]
   16ad0:	2201      	movs	r2, #1
   16ad2:	605a      	str	r2, [r3, #4]
   16ad4:	e002      	b.n	16adc <Sd::Mount(SdInterface::CardInfo_t*)+0x284>
    }
    else
    {
      // The card is standard capacity
      LOG_DEBUG("SD Card is SC");
      sd->type = Type::kSDSC;
   16ad6:	9b02      	ldr	r3, [sp, #8]
   16ad8:	2200      	movs	r2, #0
   16ada:	605a      	str	r2, [r3, #4]
    }

    // Store OCR information
    for (int i = 0; i < 4; i++)
   16adc:	2300      	movs	r3, #0
   16ade:	9308      	str	r3, [sp, #32]
   16ae0:	9b08      	ldr	r3, [sp, #32]
   16ae2:	2b03      	cmp	r3, #3
   16ae4:	dc22      	bgt.n	16b2c <Sd::Mount(SdInterface::CardInfo_t*)+0x2d4>
    {
      // ensure OCR doesn't capture the R1 section of the response
      sd->ocr.byte[i] = sd->response.data.byte[i + 1];
   16ae6:	9b08      	ldr	r3, [sp, #32]
   16ae8:	3301      	adds	r3, #1
   16aea:	9a02      	ldr	r2, [sp, #8]
   16aec:	4413      	add	r3, r2
   16aee:	7a19      	ldrb	r1, [r3, #8]
   16af0:	9a02      	ldr	r2, [sp, #8]
   16af2:	9b08      	ldr	r3, [sp, #32]
   16af4:	4413      	add	r3, r2
   16af6:	460a      	mov	r2, r1
   16af8:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < 4; i++)
   16afa:	9b08      	ldr	r3, [sp, #32]
   16afc:	3301      	adds	r3, #1
   16afe:	9308      	str	r3, [sp, #32]
   16b00:	e7ee      	b.n	16ae0 <Sd::Mount(SdInterface::CardInfo_t*)+0x288>
   16b02:	bf00      	nop
   16b04:	00016859 	.word	0x00016859
   16b08:	0001aa6c 	.word	0x0001aa6c
   16b0c:	0001a97c 	.word	0x0001a97c
   16b10:	0001a010 	.word	0x0001a010
   16b14:	0001a984 	.word	0x0001a984
   16b18:	0001a080 	.word	0x0001a080
   16b1c:	0001a98c 	.word	0x0001a98c
   16b20:	0001a0e4 	.word	0x0001a0e4
   16b24:	0001a994 	.word	0x0001a994
   16b28:	0001a144 	.word	0x0001a144
    }

    // If card is SDSC, manually set its block size
    if (sd->type == Type::kSDSC)
   16b2c:	9b02      	ldr	r3, [sp, #8]
   16b2e:	685b      	ldr	r3, [r3, #4]
   16b30:	2b00      	cmp	r3, #0
   16b32:	d112      	bne.n	16b5a <Sd::Mount(SdInterface::CardInfo_t*)+0x302>
    {
      // Send requested byte size
      sd->response.length =
          SendCmd(Command::kChgBlkLen, static_cast<uint32_t>(kBlockSize),
                  sd->response.data.byte, 0, KeepAlive::kYes);
   16b34:	9b03      	ldr	r3, [sp, #12]
   16b36:	681b      	ldr	r3, [r3, #0]
   16b38:	681c      	ldr	r4, [r3, #0]
          SendCmd(Command::kChgBlkLen, static_cast<uint32_t>(kBlockSize),
   16b3a:	9b02      	ldr	r3, [sp, #8]
   16b3c:	f103 0208 	add.w	r2, r3, #8
   16b40:	2301      	movs	r3, #1
   16b42:	9301      	str	r3, [sp, #4]
   16b44:	2300      	movs	r3, #0
   16b46:	9300      	str	r3, [sp, #0]
   16b48:	4613      	mov	r3, r2
   16b4a:	f44f 7200 	mov.w	r2, #512	; 0x200
   16b4e:	2150      	movs	r1, #80	; 0x50
   16b50:	9803      	ldr	r0, [sp, #12]
   16b52:	47a0      	blx	r4
   16b54:	4602      	mov	r2, r0
      sd->response.length =
   16b56:	9b02      	ldr	r3, [sp, #8]
   16b58:	611a      	str	r2, [r3, #16]
    }

    return true;
   16b5a:	2401      	movs	r4, #1
   16b5c:	462b      	mov	r3, r5
   16b5e:	4619      	mov	r1, r3
   16b60:	4803      	ldr	r0, [pc, #12]	; (16b70 <Sd::Mount(SdInterface::CardInfo_t*)+0x318>)
   16b62:	f7fe fa61 	bl	15028 <__cyg_profile_func_exit>
   16b66:	4623      	mov	r3, r4
  }
   16b68:	4618      	mov	r0, r3
   16b6a:	b00b      	add	sp, #44	; 0x2c
   16b6c:	bd30      	pop	{r4, r5, pc}
   16b6e:	bf00      	nop
   16b70:	00016859 	.word	0x00016859

00016b74 <Sd::ToBool(bool)>:

  // Returns string to represent a boolean value
  const char * ToBool(bool condition)
   16b74:	b530      	push	{r4, r5, lr}
   16b76:	b083      	sub	sp, #12
   16b78:	4675      	mov	r5, lr
   16b7a:	9001      	str	r0, [sp, #4]
   16b7c:	460b      	mov	r3, r1
   16b7e:	f88d 3003 	strb.w	r3, [sp, #3]
   16b82:	462b      	mov	r3, r5
   16b84:	4619      	mov	r1, r3
   16b86:	4809      	ldr	r0, [pc, #36]	; (16bac <Sd::ToBool(bool)+0x38>)
   16b88:	f7fe fa3a 	bl	15000 <__cyg_profile_func_enter>
  {
    return (condition) ? "true" : "false";
   16b8c:	f89d 3003 	ldrb.w	r3, [sp, #3]
   16b90:	2b00      	cmp	r3, #0
   16b92:	d001      	beq.n	16b98 <Sd::ToBool(bool)+0x24>
   16b94:	4c06      	ldr	r4, [pc, #24]	; (16bb0 <Sd::ToBool(bool)+0x3c>)
   16b96:	e000      	b.n	16b9a <Sd::ToBool(bool)+0x26>
   16b98:	4c06      	ldr	r4, [pc, #24]	; (16bb4 <Sd::ToBool(bool)+0x40>)
   16b9a:	462b      	mov	r3, r5
   16b9c:	4619      	mov	r1, r3
   16b9e:	4803      	ldr	r0, [pc, #12]	; (16bac <Sd::ToBool(bool)+0x38>)
   16ba0:	f7fe fa42 	bl	15028 <__cyg_profile_func_exit>
   16ba4:	4623      	mov	r3, r4
  }
   16ba6:	4618      	mov	r0, r3
   16ba8:	b003      	add	sp, #12
   16baa:	bd30      	pop	{r4, r5, pc}
   16bac:	00016b75 	.word	0x00016b75
   16bb0:	0001a19c 	.word	0x0001a19c
   16bb4:	0001a1a4 	.word	0x0001a1a4

00016bb8 <Sd::WaitToReadBlock()>:

  // Waits for the card to respond after a single or multi block read cmd is
  // sent.
  void WaitToReadBlock()
   16bb8:	b510      	push	{r4, lr}
   16bba:	b084      	sub	sp, #16
   16bbc:	4674      	mov	r4, lr
   16bbe:	9001      	str	r0, [sp, #4]
   16bc0:	4623      	mov	r3, r4
   16bc2:	4619      	mov	r1, r3
   16bc4:	4814      	ldr	r0, [pc, #80]	; (16c18 <Sd::WaitToReadBlock()+0x60>)
   16bc6:	f7fe fa1b 	bl	15000 <__cyg_profile_func_enter>
    // Bit 4 -->  If set, card is locked
    // Bit 3 -->  If set, address is out or range
    // Bit 2 -->  If set, card ECC failed
    // Bit 1 -->  If set, CC error occurred
    // Bit 0 -->  If set, a generic error occurred
    uint8_t wait_byte = 0x00;
   16bca:	2300      	movs	r3, #0
   16bcc:	f88d 300f 	strb.w	r3, [sp, #15]
    do
    {
      wait_byte = static_cast<uint8_t>(ssp_interface_->Transfer(0xFF));
   16bd0:	9b01      	ldr	r3, [sp, #4]
   16bd2:	685a      	ldr	r2, [r3, #4]
   16bd4:	9b01      	ldr	r3, [sp, #4]
   16bd6:	685b      	ldr	r3, [r3, #4]
   16bd8:	681b      	ldr	r3, [r3, #0]
   16bda:	3308      	adds	r3, #8
   16bdc:	681b      	ldr	r3, [r3, #0]
   16bde:	21ff      	movs	r1, #255	; 0xff
   16be0:	4610      	mov	r0, r2
   16be2:	4798      	blx	r3
   16be4:	4603      	mov	r3, r0
   16be6:	f88d 300f 	strb.w	r3, [sp, #15]
    } while (wait_byte != 0xFE && (wait_byte & 0xE0) != 0x00);
   16bea:	f89d 300f 	ldrb.w	r3, [sp, #15]
   16bee:	2bfe      	cmp	r3, #254	; 0xfe
   16bf0:	d006      	beq.n	16c00 <Sd::WaitToReadBlock()+0x48>
   16bf2:	f89d 300f 	ldrb.w	r3, [sp, #15]
   16bf6:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
   16bfa:	2b00      	cmp	r3, #0
   16bfc:	d000      	beq.n	16c00 <Sd::WaitToReadBlock()+0x48>
    do
   16bfe:	e7e7      	b.n	16bd0 <Sd::WaitToReadBlock()+0x18>

    // DEBUG: Check the value of the wait byte
    if (wait_byte == 0xFE)
   16c00:	f89d 300f 	ldrb.w	r3, [sp, #15]
   16c04:	2bfe      	cmp	r3, #254	; 0xfe
   16c06:	4623      	mov	r3, r4
   16c08:	4619      	mov	r1, r3
   16c0a:	4803      	ldr	r0, [pc, #12]	; (16c18 <Sd::WaitToReadBlock()+0x60>)
   16c0c:	f7fe fa0c 	bl	15028 <__cyg_profile_func_exit>
      LOG_DEBUG("Addr Out of Range?: %s", ToBool(wait_byte & 0x08));
      LOG_DEBUG("Card ECC Failed?: %s", ToBool(wait_byte & 0x04));
      LOG_DEBUG("CC Error?: %s", ToBool(wait_byte & 0x02));
      LOG_DEBUG("Error?: %s", ToBool(wait_byte & 0x01));
    }
  }
   16c10:	bf00      	nop
   16c12:	b004      	add	sp, #16
   16c14:	bd10      	pop	{r4, pc}
   16c16:	bf00      	nop
   16c18:	00016bb9 	.word	0x00016bb9

00016c1c <Sd::WaitWhileBusy()>:

  // Waits for the card to be ready to receive a new block after one has
  // been written or erased
  void WaitWhileBusy()
   16c1c:	b510      	push	{r4, lr}
   16c1e:	b084      	sub	sp, #16
   16c20:	4674      	mov	r4, lr
   16c22:	9001      	str	r0, [sp, #4]
   16c24:	4623      	mov	r3, r4
   16c26:	4619      	mov	r1, r3
   16c28:	480f      	ldr	r0, [pc, #60]	; (16c68 <Sd::WaitWhileBusy()+0x4c>)
   16c2a:	f7fe f9e9 	bl	15000 <__cyg_profile_func_enter>
  {
    // Wait for the card to finish programming (i.e. when the
    // bytes return to 0xFF)
    uint8_t busy_byte = 0x00;
   16c2e:	2300      	movs	r3, #0
   16c30:	f88d 300f 	strb.w	r3, [sp, #15]
    LOG_DEBUG("Card is busy. Waiting for it to finish...");
    do
    {
      busy_byte = static_cast<uint8_t>(ssp_interface_->Transfer(0xFF));
   16c34:	9b01      	ldr	r3, [sp, #4]
   16c36:	685a      	ldr	r2, [r3, #4]
   16c38:	9b01      	ldr	r3, [sp, #4]
   16c3a:	685b      	ldr	r3, [r3, #4]
   16c3c:	681b      	ldr	r3, [r3, #0]
   16c3e:	3308      	adds	r3, #8
   16c40:	681b      	ldr	r3, [r3, #0]
   16c42:	21ff      	movs	r1, #255	; 0xff
   16c44:	4610      	mov	r0, r2
   16c46:	4798      	blx	r3
   16c48:	4603      	mov	r3, r0
   16c4a:	f88d 300f 	strb.w	r3, [sp, #15]
    } while (busy_byte != 0xFF);
   16c4e:	f89d 300f 	ldrb.w	r3, [sp, #15]
   16c52:	2bff      	cmp	r3, #255	; 0xff
   16c54:	d000      	beq.n	16c58 <Sd::WaitWhileBusy()+0x3c>
    do
   16c56:	e7ed      	b.n	16c34 <Sd::WaitWhileBusy()+0x18>
   16c58:	4623      	mov	r3, r4
   16c5a:	4619      	mov	r1, r3
   16c5c:	4802      	ldr	r0, [pc, #8]	; (16c68 <Sd::WaitWhileBusy()+0x4c>)
   16c5e:	f7fe f9e3 	bl	15028 <__cyg_profile_func_exit>
    LOG_DEBUG("Card finished!");
  }
   16c62:	bf00      	nop
   16c64:	b004      	add	sp, #16
   16c66:	bd10      	pop	{r4, pc}
   16c68:	00016c1d 	.word	0x00016c1d

00016c6c <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)>:

  // Read any number of blocks from the SD card
  uint8_t ReadBlock(uint32_t address, uint8_t * array,
   16c6c:	b530      	push	{r4, r5, lr}
   16c6e:	f5ad 7d13 	sub.w	sp, sp, #588	; 0x24c
   16c72:	4675      	mov	r5, lr
   16c74:	ac05      	add	r4, sp, #20
   16c76:	6020      	str	r0, [r4, #0]
   16c78:	a804      	add	r0, sp, #16
   16c7a:	6001      	str	r1, [r0, #0]
   16c7c:	a903      	add	r1, sp, #12
   16c7e:	600a      	str	r2, [r1, #0]
   16c80:	aa02      	add	r2, sp, #8
   16c82:	6013      	str	r3, [r2, #0]
   16c84:	462b      	mov	r3, r5
   16c86:	4619      	mov	r1, r3
   16c88:	487d      	ldr	r0, [pc, #500]	; (16e80 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x214>)
   16c8a:	f7fe f9b9 	bl	15000 <__cyg_profile_func_enter>
                    uint32_t blocks = 1) override
  {
    LOG_DEBUG("Block %" PRId32 " :: 0x%" PRIX32 " for %" PRId32 " blocks",
              address, address, blocks);
    // Wait for a previous command to finish
    WaitWhileBusy();
   16c8e:	ab05      	add	r3, sp, #20
   16c90:	6818      	ldr	r0, [r3, #0]
   16c92:	f7ff ffc3 	bl	16c1c <Sd::WaitWhileBusy()>

    // Create a temporary storage location to store sd command responses
    Sd::CardInfo_t sd;
    bool payload_had_bad_crc = false;
   16c96:	2300      	movs	r3, #0
   16c98:	f88d 3247 	strb.w	r3, [sp, #583]	; 0x247

    // Create a temporary place to store blocks of 512 bytes (this is now
    // possible because the constructor enforces block size cross-
    // compatibility)
    uint8_t block_store[512] = { 0 };
   16c9c:	ab06      	add	r3, sp, #24
   16c9e:	4618      	mov	r0, r3
   16ca0:	f44f 7300 	mov.w	r3, #512	; 0x200
   16ca4:	461a      	mov	r2, r3
   16ca6:	2100      	movs	r1, #0
   16ca8:	f001 f950 	bl	17f4c <memset>

    // Determine appropriate command to send
    Command read_cmd;
    if (blocks > 1)
   16cac:	ab02      	add	r3, sp, #8
   16cae:	681b      	ldr	r3, [r3, #0]
   16cb0:	2b01      	cmp	r3, #1
   16cb2:	d902      	bls.n	16cba <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x4e>
    {
      read_cmd = Command::kReadMulti;
   16cb4:	2352      	movs	r3, #82	; 0x52
   16cb6:	9390      	str	r3, [sp, #576]	; 0x240
   16cb8:	e001      	b.n	16cbe <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x52>
    }
    else
    {
      read_cmd = Command::kReadSingle;
   16cba:	2351      	movs	r3, #81	; 0x51
   16cbc:	9390      	str	r3, [sp, #576]	; 0x240
    }

    // Send initial read command
    sd.response.length =
        SendCmd(read_cmd, address, sd.response.data.byte, 100, KeepAlive::kYes);
   16cbe:	ab05      	add	r3, sp, #20
   16cc0:	681b      	ldr	r3, [r3, #0]
   16cc2:	681b      	ldr	r3, [r3, #0]
   16cc4:	681c      	ldr	r4, [r3, #0]
   16cc6:	ab86      	add	r3, sp, #536	; 0x218
   16cc8:	f103 0108 	add.w	r1, r3, #8
   16ccc:	aa04      	add	r2, sp, #16
   16cce:	a805      	add	r0, sp, #20
   16cd0:	2301      	movs	r3, #1
   16cd2:	9301      	str	r3, [sp, #4]
   16cd4:	2364      	movs	r3, #100	; 0x64
   16cd6:	9300      	str	r3, [sp, #0]
   16cd8:	460b      	mov	r3, r1
   16cda:	6812      	ldr	r2, [r2, #0]
   16cdc:	9990      	ldr	r1, [sp, #576]	; 0x240
   16cde:	6800      	ldr	r0, [r0, #0]
   16ce0:	47a0      	blx	r4
   16ce2:	4603      	mov	r3, r0
    sd.response.length =
   16ce4:	938a      	str	r3, [sp, #552]	; 0x228
    LOG_DEBUG("Sent Read Cmd");
    LOG_DEBUG("[R1 Response:0x%02X]", sd.response.data.byte[0]);

    // Check if the command was acknowledged properly
    if (sd.response.data.byte[0] == 0x00)
   16ce6:	f89d 3220 	ldrb.w	r3, [sp, #544]	; 0x220
   16cea:	2b00      	cmp	r3, #0
   16cec:	f040 80d8 	bne.w	16ea0 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x234>
    {
      // For every block requested
      uint16_t block_count;
      for (block_count = 0; block_count < blocks; block_count++)
   16cf0:	2300      	movs	r3, #0
   16cf2:	f8ad 323e 	strh.w	r3, [sp, #574]	; 0x23e
   16cf6:	f8bd 323e 	ldrh.w	r3, [sp, #574]	; 0x23e
   16cfa:	aa02      	add	r2, sp, #8
   16cfc:	6812      	ldr	r2, [r2, #0]
   16cfe:	429a      	cmp	r2, r3
   16d00:	f240 8099 	bls.w	16e36 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x1ca>
      {
        // Wait for the card to respond with a ready signal
        WaitToReadBlock();
   16d04:	ab05      	add	r3, sp, #20
   16d06:	6818      	ldr	r0, [r3, #0]
   16d08:	f7ff ff56 	bl	16bb8 <Sd::WaitToReadBlock()>

        // Calculate the block address offset
        uint16_t block_addr_offset =
   16d0c:	f8bd 323e 	ldrh.w	r3, [sp, #574]	; 0x23e
   16d10:	025b      	lsls	r3, r3, #9
   16d12:	f8ad 323a 	strh.w	r3, [sp, #570]	; 0x23a
            static_cast<uint16_t>(block_count * kBlockSize);

        // Read all the bytes of a single block
        for (uint16_t byte_count = 0; byte_count < kBlockSize; byte_count++)
   16d16:	2300      	movs	r3, #0
   16d18:	f8ad 323c 	strh.w	r3, [sp, #572]	; 0x23c
   16d1c:	f8bd 323c 	ldrh.w	r3, [sp, #572]	; 0x23c
   16d20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   16d24:	d22b      	bcs.n	16d7e <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x112>
        {
          // Calculate the current storage index
          uint16_t storage_index =
   16d26:	f8bd 223a 	ldrh.w	r2, [sp, #570]	; 0x23a
   16d2a:	f8bd 323c 	ldrh.w	r3, [sp, #572]	; 0x23c
   16d2e:	4413      	add	r3, r2
   16d30:	f8ad 3238 	strh.w	r3, [sp, #568]	; 0x238
              static_cast<uint16_t>(block_addr_offset + byte_count);

          // Transfer a byte to read a block from the SD card
          array[storage_index] =
              static_cast<uint8_t>(ssp_interface_->Transfer(0xFF));
   16d34:	ab05      	add	r3, sp, #20
   16d36:	681b      	ldr	r3, [r3, #0]
   16d38:	685a      	ldr	r2, [r3, #4]
   16d3a:	ab05      	add	r3, sp, #20
   16d3c:	681b      	ldr	r3, [r3, #0]
   16d3e:	685b      	ldr	r3, [r3, #4]
   16d40:	681b      	ldr	r3, [r3, #0]
   16d42:	3308      	adds	r3, #8
   16d44:	681b      	ldr	r3, [r3, #0]
   16d46:	21ff      	movs	r1, #255	; 0xff
   16d48:	4610      	mov	r0, r2
   16d4a:	4798      	blx	r3
   16d4c:	4603      	mov	r3, r0
   16d4e:	4619      	mov	r1, r3
          array[storage_index] =
   16d50:	f8bd 3238 	ldrh.w	r3, [sp, #568]	; 0x238
   16d54:	aa03      	add	r2, sp, #12
   16d56:	6812      	ldr	r2, [r2, #0]
   16d58:	4413      	add	r3, r2
   16d5a:	b2ca      	uxtb	r2, r1
   16d5c:	701a      	strb	r2, [r3, #0]

          // Copy that byte into our temporary block store
          block_store[byte_count] = array[storage_index];
   16d5e:	f8bd 3238 	ldrh.w	r3, [sp, #568]	; 0x238
   16d62:	aa03      	add	r2, sp, #12
   16d64:	6812      	ldr	r2, [r2, #0]
   16d66:	441a      	add	r2, r3
   16d68:	f8bd 323c 	ldrh.w	r3, [sp, #572]	; 0x23c
   16d6c:	7811      	ldrb	r1, [r2, #0]
   16d6e:	aa06      	add	r2, sp, #24
   16d70:	54d1      	strb	r1, [r2, r3]
        for (uint16_t byte_count = 0; byte_count < kBlockSize; byte_count++)
   16d72:	f8bd 323c 	ldrh.w	r3, [sp, #572]	; 0x23c
   16d76:	3301      	adds	r3, #1
   16d78:	f8ad 323c 	strh.w	r3, [sp, #572]	; 0x23c
   16d7c:	e7ce      	b.n	16d1c <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0xb0>
        }

        // Then read the block's 16-bit CRC (i.e. read two bytes)
        uint16_t block_crc =
            static_cast<uint16_t>((ssp_interface_->Transfer(0xFF) << 8) |
   16d7e:	ab05      	add	r3, sp, #20
   16d80:	681b      	ldr	r3, [r3, #0]
   16d82:	685a      	ldr	r2, [r3, #4]
   16d84:	ab05      	add	r3, sp, #20
   16d86:	681b      	ldr	r3, [r3, #0]
   16d88:	685b      	ldr	r3, [r3, #4]
   16d8a:	681b      	ldr	r3, [r3, #0]
   16d8c:	3308      	adds	r3, #8
   16d8e:	681b      	ldr	r3, [r3, #0]
   16d90:	21ff      	movs	r1, #255	; 0xff
   16d92:	4610      	mov	r0, r2
   16d94:	4798      	blx	r3
   16d96:	4603      	mov	r3, r0
   16d98:	021b      	lsls	r3, r3, #8
   16d9a:	b21c      	sxth	r4, r3
                                  ssp_interface_->Transfer(0xFF));
   16d9c:	ab05      	add	r3, sp, #20
   16d9e:	681b      	ldr	r3, [r3, #0]
   16da0:	685a      	ldr	r2, [r3, #4]
   16da2:	ab05      	add	r3, sp, #20
   16da4:	681b      	ldr	r3, [r3, #0]
   16da6:	685b      	ldr	r3, [r3, #4]
   16da8:	681b      	ldr	r3, [r3, #0]
   16daa:	3308      	adds	r3, #8
   16dac:	681b      	ldr	r3, [r3, #0]
   16dae:	21ff      	movs	r1, #255	; 0xff
   16db0:	4610      	mov	r0, r2
   16db2:	4798      	blx	r3
   16db4:	4603      	mov	r3, r0
   16db6:	b21b      	sxth	r3, r3
            static_cast<uint16_t>((ssp_interface_->Transfer(0xFF) << 8) |
   16db8:	4323      	orrs	r3, r4
   16dba:	b21b      	sxth	r3, r3
                                  ssp_interface_->Transfer(0xFF));
   16dbc:	f8ad 3236 	strh.w	r3, [sp, #566]	; 0x236

        // Run a CRC-16 calculation on the message to determine if the
        // received CRCs match (i.e. checks if the block data is
        // valid).
        uint16_t expected_block_crc = GetCrc16(block_store, 512);
   16dc0:	ab05      	add	r3, sp, #20
   16dc2:	681b      	ldr	r3, [r3, #0]
   16dc4:	681b      	ldr	r3, [r3, #0]
   16dc6:	3320      	adds	r3, #32
   16dc8:	681b      	ldr	r3, [r3, #0]
   16dca:	a906      	add	r1, sp, #24
   16dcc:	a805      	add	r0, sp, #20
   16dce:	f44f 7200 	mov.w	r2, #512	; 0x200
   16dd2:	6800      	ldr	r0, [r0, #0]
   16dd4:	4798      	blx	r3
   16dd6:	4603      	mov	r3, r0
   16dd8:	f8ad 3234 	strh.w	r3, [sp, #564]	; 0x234

        LOG_DEBUG("Block #%d @ 0x%" PRIX32 " acquired", block_count, address);
        LOG_DEBUG("Expecting block crc16 '0x%04X'", expected_block_crc);
        LOG_DEBUG("Got '0x%04X'", block_crc);
        if (expected_block_crc != block_crc)
   16ddc:	f8bd 2234 	ldrh.w	r2, [sp, #564]	; 0x234
   16de0:	f8bd 3236 	ldrh.w	r3, [sp, #566]	; 0x236
   16de4:	429a      	cmp	r2, r3
   16de6:	d020      	beq.n	16e2a <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x1be>
        {
          // If they do not match, set the bad crc status
          payload_had_bad_crc = true;
   16de8:	2301      	movs	r3, #1
   16dea:	f88d 3247 	strb.w	r3, [sp, #583]	; 0x247
          LOG_ERROR("While Reading Block #%d CRC16:", block_count);
   16dee:	f8bd 323e 	ldrh.w	r3, [sp, #574]	; 0x23e
   16df2:	9300      	str	r3, [sp, #0]
   16df4:	f240 23ed 	movw	r3, #749	; 0x2ed
   16df8:	4a22      	ldr	r2, [pc, #136]	; (16e84 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x218>)
   16dfa:	4923      	ldr	r1, [pc, #140]	; (16e88 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x21c>)
   16dfc:	4823      	ldr	r0, [pc, #140]	; (16e8c <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x220>)
   16dfe:	f7ff fb7b 	bl	164f8 <printf>
          LOG_ERROR("Expected '0x%04X'", expected_block_crc);
   16e02:	f8bd 3234 	ldrh.w	r3, [sp, #564]	; 0x234
   16e06:	9300      	str	r3, [sp, #0]
   16e08:	f240 23ee 	movw	r3, #750	; 0x2ee
   16e0c:	4a1d      	ldr	r2, [pc, #116]	; (16e84 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x218>)
   16e0e:	4920      	ldr	r1, [pc, #128]	; (16e90 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x224>)
   16e10:	4820      	ldr	r0, [pc, #128]	; (16e94 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x228>)
   16e12:	f7ff fb71 	bl	164f8 <printf>
          LOG_ERROR("Got '0x%04X'", block_crc);
   16e16:	f8bd 3236 	ldrh.w	r3, [sp, #566]	; 0x236
   16e1a:	9300      	str	r3, [sp, #0]
   16e1c:	f240 23ef 	movw	r3, #751	; 0x2ef
   16e20:	4a18      	ldr	r2, [pc, #96]	; (16e84 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x218>)
   16e22:	491d      	ldr	r1, [pc, #116]	; (16e98 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x22c>)
   16e24:	481d      	ldr	r0, [pc, #116]	; (16e9c <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x230>)
   16e26:	f7ff fb67 	bl	164f8 <printf>
      for (block_count = 0; block_count < blocks; block_count++)
   16e2a:	f8bd 323e 	ldrh.w	r3, [sp, #574]	; 0x23e
   16e2e:	3301      	adds	r3, #1
   16e30:	f8ad 323e 	strh.w	r3, [sp, #574]	; 0x23e
   16e34:	e75f      	b.n	16cf6 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x8a>
        }
      }

      // After reading multiple blocks, send the stop command to terminate the
      // transaction (i.e. no keep-alive)
      if (blocks > 1)
   16e36:	ab02      	add	r3, sp, #8
   16e38:	681b      	ldr	r3, [r3, #0]
   16e3a:	2b01      	cmp	r3, #1
   16e3c:	d913      	bls.n	16e66 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x1fa>
      {
        sd.response.length =
            SendCmd(Command::kStopTrans, 0xFFFFFFFF, sd.response.data.byte, 100,
                    KeepAlive::kNo);
   16e3e:	ab05      	add	r3, sp, #20
   16e40:	681b      	ldr	r3, [r3, #0]
   16e42:	681b      	ldr	r3, [r3, #0]
   16e44:	681c      	ldr	r4, [r3, #0]
            SendCmd(Command::kStopTrans, 0xFFFFFFFF, sd.response.data.byte, 100,
   16e46:	ab86      	add	r3, sp, #536	; 0x218
   16e48:	f103 0208 	add.w	r2, r3, #8
   16e4c:	a805      	add	r0, sp, #20
   16e4e:	2300      	movs	r3, #0
   16e50:	9301      	str	r3, [sp, #4]
   16e52:	2364      	movs	r3, #100	; 0x64
   16e54:	9300      	str	r3, [sp, #0]
   16e56:	4613      	mov	r3, r2
   16e58:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   16e5c:	214c      	movs	r1, #76	; 0x4c
   16e5e:	6800      	ldr	r0, [r0, #0]
   16e60:	47a0      	blx	r4
   16e62:	4603      	mov	r3, r0
        sd.response.length =
   16e64:	938a      	str	r3, [sp, #552]	; 0x228
      LOG_DEBUG("Response Byte");
      LOG_DEBUG("0x%02X", sd.response.data.byte[0]);

      // If there was a bad crc from the payload, manually set the
      // CRC error flag in the command response byte
      if (payload_had_bad_crc)
   16e66:	f89d 3247 	ldrb.w	r3, [sp, #583]	; 0x247
   16e6a:	2b00      	cmp	r3, #0
   16e6c:	f000 80c0 	beq.w	16ff0 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x384>
      {
        sd.response.data.byte[0] |= 0x08;
   16e70:	f89d 3220 	ldrb.w	r3, [sp, #544]	; 0x220
   16e74:	f043 0308 	orr.w	r3, r3, #8
   16e78:	b2db      	uxtb	r3, r3
   16e7a:	f88d 3220 	strb.w	r3, [sp, #544]	; 0x220
   16e7e:	e0b7      	b.n	16ff0 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x384>
   16e80:	00016c6d 	.word	0x00016c6d
   16e84:	0001aaa0 	.word	0x0001aaa0
   16e88:	0001a99c 	.word	0x0001a99c
   16e8c:	0001a1ac 	.word	0x0001a1ac
   16e90:	0001a9a4 	.word	0x0001a9a4
   16e94:	0001a204 	.word	0x0001a204
   16e98:	0001a9ac 	.word	0x0001a9ac
   16e9c:	0001a250 	.word	0x0001a250
      }
    }
    else
    {
      LOG_ERROR("Read Cmd was not acknowledged properly!");
   16ea0:	f240 3309 	movw	r3, #777	; 0x309
   16ea4:	4a65      	ldr	r2, [pc, #404]	; (1703c <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x3d0>)
   16ea6:	4966      	ldr	r1, [pc, #408]	; (17040 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x3d4>)
   16ea8:	4866      	ldr	r0, [pc, #408]	; (17044 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x3d8>)
   16eaa:	f7ff fb25 	bl	164f8 <printf>
      LOG_ERROR("Parameter Err: %s", ToBool(sd.response.data.byte[0] & 0x40));
   16eae:	f89d 3220 	ldrb.w	r3, [sp, #544]	; 0x220
   16eb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
   16eb6:	2b00      	cmp	r3, #0
   16eb8:	bf14      	ite	ne
   16eba:	2301      	movne	r3, #1
   16ebc:	2300      	moveq	r3, #0
   16ebe:	b2da      	uxtb	r2, r3
   16ec0:	ab05      	add	r3, sp, #20
   16ec2:	4611      	mov	r1, r2
   16ec4:	6818      	ldr	r0, [r3, #0]
   16ec6:	f7ff fe55 	bl	16b74 <Sd::ToBool(bool)>
   16eca:	4603      	mov	r3, r0
   16ecc:	9300      	str	r3, [sp, #0]
   16ece:	f240 330a 	movw	r3, #778	; 0x30a
   16ed2:	4a5a      	ldr	r2, [pc, #360]	; (1703c <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x3d0>)
   16ed4:	495c      	ldr	r1, [pc, #368]	; (17048 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x3dc>)
   16ed6:	485d      	ldr	r0, [pc, #372]	; (1704c <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x3e0>)
   16ed8:	f7ff fb0e 	bl	164f8 <printf>
      LOG_ERROR("Addr Err: %s", ToBool(sd.response.data.byte[0] & 0x20));
   16edc:	f89d 3220 	ldrb.w	r3, [sp, #544]	; 0x220
   16ee0:	f003 0320 	and.w	r3, r3, #32
   16ee4:	2b00      	cmp	r3, #0
   16ee6:	bf14      	ite	ne
   16ee8:	2301      	movne	r3, #1
   16eea:	2300      	moveq	r3, #0
   16eec:	b2da      	uxtb	r2, r3
   16eee:	ab05      	add	r3, sp, #20
   16ef0:	4611      	mov	r1, r2
   16ef2:	6818      	ldr	r0, [r3, #0]
   16ef4:	f7ff fe3e 	bl	16b74 <Sd::ToBool(bool)>
   16ef8:	4603      	mov	r3, r0
   16efa:	9300      	str	r3, [sp, #0]
   16efc:	f240 330b 	movw	r3, #779	; 0x30b
   16f00:	4a4e      	ldr	r2, [pc, #312]	; (1703c <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x3d0>)
   16f02:	4953      	ldr	r1, [pc, #332]	; (17050 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x3e4>)
   16f04:	4853      	ldr	r0, [pc, #332]	; (17054 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x3e8>)
   16f06:	f7ff faf7 	bl	164f8 <printf>
      LOG_ERROR("Erase Seq Err: %s", ToBool(sd.response.data.byte[0] & 0x10));
   16f0a:	f89d 3220 	ldrb.w	r3, [sp, #544]	; 0x220
   16f0e:	f003 0310 	and.w	r3, r3, #16
   16f12:	2b00      	cmp	r3, #0
   16f14:	bf14      	ite	ne
   16f16:	2301      	movne	r3, #1
   16f18:	2300      	moveq	r3, #0
   16f1a:	b2da      	uxtb	r2, r3
   16f1c:	ab05      	add	r3, sp, #20
   16f1e:	4611      	mov	r1, r2
   16f20:	6818      	ldr	r0, [r3, #0]
   16f22:	f7ff fe27 	bl	16b74 <Sd::ToBool(bool)>
   16f26:	4603      	mov	r3, r0
   16f28:	9300      	str	r3, [sp, #0]
   16f2a:	f44f 7343 	mov.w	r3, #780	; 0x30c
   16f2e:	4a43      	ldr	r2, [pc, #268]	; (1703c <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x3d0>)
   16f30:	4949      	ldr	r1, [pc, #292]	; (17058 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x3ec>)
   16f32:	484a      	ldr	r0, [pc, #296]	; (1705c <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x3f0>)
   16f34:	f7ff fae0 	bl	164f8 <printf>
      LOG_ERROR("Com CRC Err: %s", ToBool(sd.response.data.byte[0] & 0x08));
   16f38:	f89d 3220 	ldrb.w	r3, [sp, #544]	; 0x220
   16f3c:	f003 0308 	and.w	r3, r3, #8
   16f40:	2b00      	cmp	r3, #0
   16f42:	bf14      	ite	ne
   16f44:	2301      	movne	r3, #1
   16f46:	2300      	moveq	r3, #0
   16f48:	b2da      	uxtb	r2, r3
   16f4a:	ab05      	add	r3, sp, #20
   16f4c:	4611      	mov	r1, r2
   16f4e:	6818      	ldr	r0, [r3, #0]
   16f50:	f7ff fe10 	bl	16b74 <Sd::ToBool(bool)>
   16f54:	4603      	mov	r3, r0
   16f56:	9300      	str	r3, [sp, #0]
   16f58:	f240 330d 	movw	r3, #781	; 0x30d
   16f5c:	4a37      	ldr	r2, [pc, #220]	; (1703c <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x3d0>)
   16f5e:	4940      	ldr	r1, [pc, #256]	; (17060 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x3f4>)
   16f60:	4840      	ldr	r0, [pc, #256]	; (17064 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x3f8>)
   16f62:	f7ff fac9 	bl	164f8 <printf>
      LOG_ERROR("Illegal Cmd Err: %s", ToBool(sd.response.data.byte[0] & 0x04));
   16f66:	f89d 3220 	ldrb.w	r3, [sp, #544]	; 0x220
   16f6a:	f003 0304 	and.w	r3, r3, #4
   16f6e:	2b00      	cmp	r3, #0
   16f70:	bf14      	ite	ne
   16f72:	2301      	movne	r3, #1
   16f74:	2300      	moveq	r3, #0
   16f76:	b2da      	uxtb	r2, r3
   16f78:	ab05      	add	r3, sp, #20
   16f7a:	4611      	mov	r1, r2
   16f7c:	6818      	ldr	r0, [r3, #0]
   16f7e:	f7ff fdf9 	bl	16b74 <Sd::ToBool(bool)>
   16f82:	4603      	mov	r3, r0
   16f84:	9300      	str	r3, [sp, #0]
   16f86:	f240 330e 	movw	r3, #782	; 0x30e
   16f8a:	4a2c      	ldr	r2, [pc, #176]	; (1703c <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x3d0>)
   16f8c:	4936      	ldr	r1, [pc, #216]	; (17068 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x3fc>)
   16f8e:	4837      	ldr	r0, [pc, #220]	; (1706c <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x400>)
   16f90:	f7ff fab2 	bl	164f8 <printf>
      LOG_ERROR("Erase Reset: %s", ToBool(sd.response.data.byte[0] & 0x02));
   16f94:	f89d 3220 	ldrb.w	r3, [sp, #544]	; 0x220
   16f98:	f003 0302 	and.w	r3, r3, #2
   16f9c:	2b00      	cmp	r3, #0
   16f9e:	bf14      	ite	ne
   16fa0:	2301      	movne	r3, #1
   16fa2:	2300      	moveq	r3, #0
   16fa4:	b2da      	uxtb	r2, r3
   16fa6:	ab05      	add	r3, sp, #20
   16fa8:	4611      	mov	r1, r2
   16faa:	6818      	ldr	r0, [r3, #0]
   16fac:	f7ff fde2 	bl	16b74 <Sd::ToBool(bool)>
   16fb0:	4603      	mov	r3, r0
   16fb2:	9300      	str	r3, [sp, #0]
   16fb4:	f240 330f 	movw	r3, #783	; 0x30f
   16fb8:	4a20      	ldr	r2, [pc, #128]	; (1703c <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x3d0>)
   16fba:	492d      	ldr	r1, [pc, #180]	; (17070 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x404>)
   16fbc:	482d      	ldr	r0, [pc, #180]	; (17074 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x408>)
   16fbe:	f7ff fa9b 	bl	164f8 <printf>
      LOG_ERROR("In Idle: %s", ToBool(sd.response.data.byte[0] & 0x01));
   16fc2:	f89d 3220 	ldrb.w	r3, [sp, #544]	; 0x220
   16fc6:	f003 0301 	and.w	r3, r3, #1
   16fca:	2b00      	cmp	r3, #0
   16fcc:	bf14      	ite	ne
   16fce:	2301      	movne	r3, #1
   16fd0:	2300      	moveq	r3, #0
   16fd2:	b2da      	uxtb	r2, r3
   16fd4:	ab05      	add	r3, sp, #20
   16fd6:	4611      	mov	r1, r2
   16fd8:	6818      	ldr	r0, [r3, #0]
   16fda:	f7ff fdcb 	bl	16b74 <Sd::ToBool(bool)>
   16fde:	4603      	mov	r3, r0
   16fe0:	9300      	str	r3, [sp, #0]
   16fe2:	f44f 7344 	mov.w	r3, #784	; 0x310
   16fe6:	4a15      	ldr	r2, [pc, #84]	; (1703c <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x3d0>)
   16fe8:	4923      	ldr	r1, [pc, #140]	; (17078 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x40c>)
   16fea:	4824      	ldr	r0, [pc, #144]	; (1707c <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x410>)
   16fec:	f7ff fa84 	bl	164f8 <printf>
    LOG_DEBUG("Now waiting for SD Card to exit Idle Mode...");
    do
    {
      // Query the status register
      sd.response.length = SendCmd(Command::kGetStatus, 32,
                                   sd.response.data.byte, 0, KeepAlive::kNo);
   16ff0:	ab05      	add	r3, sp, #20
   16ff2:	681b      	ldr	r3, [r3, #0]
   16ff4:	681b      	ldr	r3, [r3, #0]
   16ff6:	681c      	ldr	r4, [r3, #0]
      sd.response.length = SendCmd(Command::kGetStatus, 32,
   16ff8:	ab86      	add	r3, sp, #536	; 0x218
   16ffa:	f103 0208 	add.w	r2, r3, #8
   16ffe:	a805      	add	r0, sp, #20
   17000:	2300      	movs	r3, #0
   17002:	9301      	str	r3, [sp, #4]
   17004:	2300      	movs	r3, #0
   17006:	9300      	str	r3, [sp, #0]
   17008:	4613      	mov	r3, r2
   1700a:	2220      	movs	r2, #32
   1700c:	210d      	movs	r1, #13
   1700e:	6800      	ldr	r0, [r0, #0]
   17010:	47a0      	blx	r4
   17012:	4603      	mov	r3, r0
   17014:	938a      	str	r3, [sp, #552]	; 0x228
    } while (sd.response.data.byte[0] & 0x01);
   17016:	f89d 3220 	ldrb.w	r3, [sp, #544]	; 0x220
   1701a:	f003 0301 	and.w	r3, r3, #1
   1701e:	2b00      	cmp	r3, #0
   17020:	d000      	beq.n	17024 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x3b8>
    do
   17022:	e7e5      	b.n	16ff0 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x384>
    LOG_DEBUG("SD Card is out of Idle Mode!");

    // Return the status
    LOG_DEBUG("Read Complete! [R1 Response: 0x%02X]", sd.response.data.byte[0]);
    return sd.response.data.byte[0];
   17024:	f89d 4220 	ldrb.w	r4, [sp, #544]	; 0x220
   17028:	462b      	mov	r3, r5
   1702a:	4619      	mov	r1, r3
   1702c:	4814      	ldr	r0, [pc, #80]	; (17080 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x414>)
   1702e:	f7fd fffb 	bl	15028 <__cyg_profile_func_exit>
   17032:	4623      	mov	r3, r4
  }
   17034:	4618      	mov	r0, r3
   17036:	f50d 7d13 	add.w	sp, sp, #588	; 0x24c
   1703a:	bd30      	pop	{r4, r5, pc}
   1703c:	0001aaa0 	.word	0x0001aaa0
   17040:	0001a9b4 	.word	0x0001a9b4
   17044:	0001a298 	.word	0x0001a298
   17048:	0001a9bc 	.word	0x0001a9bc
   1704c:	0001a2fc 	.word	0x0001a2fc
   17050:	0001a9c4 	.word	0x0001a9c4
   17054:	0001a348 	.word	0x0001a348
   17058:	0001a9cc 	.word	0x0001a9cc
   1705c:	0001a390 	.word	0x0001a390
   17060:	0001a9d4 	.word	0x0001a9d4
   17064:	0001a3dc 	.word	0x0001a3dc
   17068:	0001a9dc 	.word	0x0001a9dc
   1706c:	0001a428 	.word	0x0001a428
   17070:	0001a9e4 	.word	0x0001a9e4
   17074:	0001a478 	.word	0x0001a478
   17078:	0001a9ec 	.word	0x0001a9ec
   1707c:	0001a4c4 	.word	0x0001a4c4
   17080:	00016c6d 	.word	0x00016c6d

00017084 <Sd::WriteBlock(unsigned long, unsigned char const*, unsigned long)>:

  // Writes any number of 512-byte blocks to the SD Card
  uint8_t WriteBlock(uint32_t address, const uint8_t * array,
   17084:	b530      	push	{r4, r5, lr}
   17086:	b095      	sub	sp, #84	; 0x54
   17088:	4675      	mov	r5, lr
   1708a:	9005      	str	r0, [sp, #20]
   1708c:	9104      	str	r1, [sp, #16]
   1708e:	9203      	str	r2, [sp, #12]
   17090:	9302      	str	r3, [sp, #8]
   17092:	462b      	mov	r3, r5
   17094:	4619      	mov	r1, r3
   17096:	4865      	ldr	r0, [pc, #404]	; (1722c <Sd::WriteBlock(unsigned long, unsigned char const*, unsigned long)+0x1a8>)
   17098:	f7fd ffb2 	bl	15000 <__cyg_profile_func_enter>
                     uint32_t blocks = 1) override
  {
    // Wait for a previous command to finish
    WaitWhileBusy();
   1709c:	9805      	ldr	r0, [sp, #20]
   1709e:	f7ff fdbd 	bl	16c1c <Sd::WaitWhileBusy()>
    Sd::CardInfo_t sd;

    // Determine appropriate command and start token to send
    Command write_cmd;
    uint8_t write_start_tkn;
    if (blocks > 1)
   170a2:	9b02      	ldr	r3, [sp, #8]
   170a4:	2b01      	cmp	r3, #1
   170a6:	d905      	bls.n	170b4 <Sd::WriteBlock(unsigned long, unsigned char const*, unsigned long)+0x30>
    {
      write_cmd       = Command::kWriteMulti;
   170a8:	2359      	movs	r3, #89	; 0x59
   170aa:	9313      	str	r3, [sp, #76]	; 0x4c
      write_start_tkn = 0xFC;
   170ac:	23fc      	movs	r3, #252	; 0xfc
   170ae:	f88d 304b 	strb.w	r3, [sp, #75]	; 0x4b
   170b2:	e004      	b.n	170be <Sd::WriteBlock(unsigned long, unsigned char const*, unsigned long)+0x3a>
    }
    else
    {
      write_cmd       = Command::kWriteSingle;
   170b4:	2358      	movs	r3, #88	; 0x58
   170b6:	9313      	str	r3, [sp, #76]	; 0x4c
      write_start_tkn = 0xFE;
   170b8:	23fe      	movs	r3, #254	; 0xfe
   170ba:	f88d 304b 	strb.w	r3, [sp, #75]	; 0x4b
    }

    // Send initial write command
    sd.response.length = SendCmd(write_cmd, address, sd.response.data.byte, 100,
                                 KeepAlive::kYes);
   170be:	9b05      	ldr	r3, [sp, #20]
   170c0:	681b      	ldr	r3, [r3, #0]
   170c2:	681c      	ldr	r4, [r3, #0]
    sd.response.length = SendCmd(write_cmd, address, sd.response.data.byte, 100,
   170c4:	ab06      	add	r3, sp, #24
   170c6:	f103 0208 	add.w	r2, r3, #8
   170ca:	2301      	movs	r3, #1
   170cc:	9301      	str	r3, [sp, #4]
   170ce:	2364      	movs	r3, #100	; 0x64
   170d0:	9300      	str	r3, [sp, #0]
   170d2:	4613      	mov	r3, r2
   170d4:	9a04      	ldr	r2, [sp, #16]
   170d6:	9913      	ldr	r1, [sp, #76]	; 0x4c
   170d8:	9805      	ldr	r0, [sp, #20]
   170da:	47a0      	blx	r4
   170dc:	4603      	mov	r3, r0
   170de:	930a      	str	r3, [sp, #40]	; 0x28
    LOG_DEBUG("Sent Write Cmd");
    LOG_DEBUG("[R1 Response:0x%02X]", sd.response.data.byte[0]);

    // Check if the response was acknowledged properly
    if (sd.response.data.byte[0] == 0x00)
   170e0:	f89d 3020 	ldrb.w	r3, [sp, #32]
   170e4:	2b00      	cmp	r3, #0
   170e6:	f040 8096 	bne.w	17216 <Sd::WriteBlock(unsigned long, unsigned char const*, unsigned long)+0x192>
    {
      // If no errors, proceed write given block(s) to SD Card
      // For each given block
      for (uint16_t current_block_num = 0; current_block_num < blocks;
   170ea:	2300      	movs	r3, #0
   170ec:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
   170f0:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
   170f4:	9a02      	ldr	r2, [sp, #8]
   170f6:	429a      	cmp	r2, r3
   170f8:	d97a      	bls.n	171f0 <Sd::WriteBlock(unsigned long, unsigned char const*, unsigned long)+0x16c>
           current_block_num++)
      {
        // Calculate array offset
        uint64_t arr_offset = current_block_num * kBlockSize;
   170fa:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
   170fe:	025b      	lsls	r3, r3, #9
   17100:	ea4f 74e3 	mov.w	r4, r3, asr #31
   17104:	e9cd 340e 	strd	r3, r4, [sp, #56]	; 0x38

        // Send the start token for the current block
        ssp_interface_->Transfer(write_start_tkn);
   17108:	9b05      	ldr	r3, [sp, #20]
   1710a:	685a      	ldr	r2, [r3, #4]
   1710c:	9b05      	ldr	r3, [sp, #20]
   1710e:	685b      	ldr	r3, [r3, #4]
   17110:	681b      	ldr	r3, [r3, #0]
   17112:	3308      	adds	r3, #8
   17114:	681b      	ldr	r3, [r3, #0]
   17116:	f89d 104b 	ldrb.w	r1, [sp, #75]	; 0x4b
   1711a:	b289      	uxth	r1, r1
   1711c:	4610      	mov	r0, r2
   1711e:	4798      	blx	r3

        // Write all 512-bytes of the given block
        LOG_DEBUG("Writing block #%d", current_block_num);
        for (uint16_t current_byte = 0; current_byte < kBlockSize;
   17120:	2300      	movs	r3, #0
   17122:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
   17126:	f8bd 3046 	ldrh.w	r3, [sp, #70]	; 0x46
   1712a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   1712e:	d216      	bcs.n	1715e <Sd::WriteBlock(unsigned long, unsigned char const*, unsigned long)+0xda>
             current_byte++)
        {
          ssp_interface_->Transfer(array[arr_offset + current_byte]);
   17130:	9b05      	ldr	r3, [sp, #20]
   17132:	6858      	ldr	r0, [r3, #4]
   17134:	9b05      	ldr	r3, [sp, #20]
   17136:	685b      	ldr	r3, [r3, #4]
   17138:	681b      	ldr	r3, [r3, #0]
   1713a:	3308      	adds	r3, #8
   1713c:	681b      	ldr	r3, [r3, #0]
   1713e:	990e      	ldr	r1, [sp, #56]	; 0x38
   17140:	f8bd 2046 	ldrh.w	r2, [sp, #70]	; 0x46
   17144:	440a      	add	r2, r1
   17146:	9903      	ldr	r1, [sp, #12]
   17148:	440a      	add	r2, r1
   1714a:	7812      	ldrb	r2, [r2, #0]
   1714c:	b292      	uxth	r2, r2
   1714e:	4611      	mov	r1, r2
   17150:	4798      	blx	r3
        for (uint16_t current_byte = 0; current_byte < kBlockSize;
   17152:	f8bd 3046 	ldrh.w	r3, [sp, #70]	; 0x46
   17156:	3301      	adds	r3, #1
   17158:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
   1715c:	e7e3      	b.n	17126 <Sd::WriteBlock(unsigned long, unsigned char const*, unsigned long)+0xa2>
        }

        // Read the data response token after writing the block
        uint8_t data_response_tkn =
            static_cast<uint8_t>(ssp_interface_->Transfer(0xFF));
   1715e:	9b05      	ldr	r3, [sp, #20]
   17160:	685a      	ldr	r2, [r3, #4]
   17162:	9b05      	ldr	r3, [sp, #20]
   17164:	685b      	ldr	r3, [r3, #4]
   17166:	681b      	ldr	r3, [r3, #0]
   17168:	3308      	adds	r3, #8
   1716a:	681b      	ldr	r3, [r3, #0]
   1716c:	21ff      	movs	r1, #255	; 0xff
   1716e:	4610      	mov	r0, r2
   17170:	4798      	blx	r3
   17172:	4603      	mov	r3, r0
   17174:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
                  ToBool(data_response_tkn & 0x0B));
        LOG_DEBUG("Data Rejected (write err)?: %s",
                  ToBool(data_response_tkn & 0x0D));

        // If writing multiple blocks and the previous block was rejected
        if (blocks > 1 && !(data_response_tkn & 0x05))
   17178:	9b02      	ldr	r3, [sp, #8]
   1717a:	2b01      	cmp	r3, #1
   1717c:	d92f      	bls.n	171de <Sd::WriteBlock(unsigned long, unsigned char const*, unsigned long)+0x15a>
   1717e:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
   17182:	f003 0305 	and.w	r3, r3, #5
   17186:	2b00      	cmp	r3, #0
   17188:	d129      	bne.n	171de <Sd::WriteBlock(unsigned long, unsigned char const*, unsigned long)+0x15a>
        {
          // Send an immediate stop (CMD12)
          sd.response.length =
              SendCmd(Command::kStopTrans, 0xFFFFFFFF, sd.response.data.byte,
                      100, KeepAlive::kYes);
   1718a:	9b05      	ldr	r3, [sp, #20]
   1718c:	681b      	ldr	r3, [r3, #0]
   1718e:	681c      	ldr	r4, [r3, #0]
              SendCmd(Command::kStopTrans, 0xFFFFFFFF, sd.response.data.byte,
   17190:	ab06      	add	r3, sp, #24
   17192:	f103 0208 	add.w	r2, r3, #8
   17196:	2301      	movs	r3, #1
   17198:	9301      	str	r3, [sp, #4]
   1719a:	2364      	movs	r3, #100	; 0x64
   1719c:	9300      	str	r3, [sp, #0]
   1719e:	4613      	mov	r3, r2
   171a0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   171a4:	214c      	movs	r1, #76	; 0x4c
   171a6:	9805      	ldr	r0, [sp, #20]
   171a8:	47a0      	blx	r4
   171aa:	4603      	mov	r3, r0
          sd.response.length =
   171ac:	930a      	str	r3, [sp, #40]	; 0x28
          LOG_DEBUG("Stopped Transmission due to rejection...");
          LOG_DEBUG("[R1 Response: 0x%02X]", sd.response.data.byte[0]);

          // In the case of a write error, ask for the reason why
          if (data_response_tkn & 0x0D)
   171ae:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
   171b2:	f003 030d 	and.w	r3, r3, #13
   171b6:	2b00      	cmp	r3, #0
   171b8:	d011      	beq.n	171de <Sd::WriteBlock(unsigned long, unsigned char const*, unsigned long)+0x15a>
          {
            sd.response.length =
                SendCmd(Command::kGetStatus, 0xFFFFFFFF, sd.response.data.byte,
                        100, KeepAlive::kYes);
   171ba:	9b05      	ldr	r3, [sp, #20]
   171bc:	681b      	ldr	r3, [r3, #0]
   171be:	681c      	ldr	r4, [r3, #0]
                SendCmd(Command::kGetStatus, 0xFFFFFFFF, sd.response.data.byte,
   171c0:	ab06      	add	r3, sp, #24
   171c2:	f103 0208 	add.w	r2, r3, #8
   171c6:	2301      	movs	r3, #1
   171c8:	9301      	str	r3, [sp, #4]
   171ca:	2364      	movs	r3, #100	; 0x64
   171cc:	9300      	str	r3, [sp, #0]
   171ce:	4613      	mov	r3, r2
   171d0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   171d4:	210d      	movs	r1, #13
   171d6:	9805      	ldr	r0, [sp, #20]
   171d8:	47a0      	blx	r4
   171da:	4603      	mov	r3, r0
            sd.response.length =
   171dc:	930a      	str	r3, [sp, #40]	; 0x28
                "Checking Status Register to see cause of Write Error...");
            LOG_DEBUG("[R2 Response: 0x%04" PRIX32 "]",
                      sd.response.data.dWord.lo);
          }
        }
        WaitWhileBusy();
   171de:	9805      	ldr	r0, [sp, #20]
   171e0:	f7ff fd1c 	bl	16c1c <Sd::WaitWhileBusy()>
      for (uint16_t current_block_num = 0; current_block_num < blocks;
   171e4:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
   171e8:	3301      	adds	r3, #1
   171ea:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
   171ee:	e77f      	b.n	170f0 <Sd::WriteBlock(unsigned long, unsigned char const*, unsigned long)+0x6c>
      }

      if (blocks > 1)
   171f0:	9b02      	ldr	r3, [sp, #8]
   171f2:	2b01      	cmp	r3, #1
   171f4:	d90f      	bls.n	17216 <Sd::WriteBlock(unsigned long, unsigned char const*, unsigned long)+0x192>
      {
        constexpr uint8_t kStopToken = 0xFD;
   171f6:	23fd      	movs	r3, #253	; 0xfd
   171f8:	f88d 3036 	strb.w	r3, [sp, #54]	; 0x36
        ssp_interface_->Transfer(kStopToken);
   171fc:	9b05      	ldr	r3, [sp, #20]
   171fe:	685a      	ldr	r2, [r3, #4]
   17200:	9b05      	ldr	r3, [sp, #20]
   17202:	685b      	ldr	r3, [r3, #4]
   17204:	681b      	ldr	r3, [r3, #0]
   17206:	3308      	adds	r3, #8
   17208:	681b      	ldr	r3, [r3, #0]
   1720a:	21fd      	movs	r1, #253	; 0xfd
   1720c:	4610      	mov	r0, r2
   1720e:	4798      	blx	r3

        // Wait for the card's programming to complete before
        // reselecting it (i.e. to prevent corruption)
        WaitWhileBusy();
   17210:	9805      	ldr	r0, [sp, #20]
   17212:	f7ff fd03 	bl	16c1c <Sd::WaitWhileBusy()>
      LOG_DEBUG("Illegal Cmd Err: %s", ToBool(sd.response.data.byte[0] & 0x04));
      LOG_DEBUG("Erase Reset: %s", ToBool(sd.response.data.byte[0] & 0x02));
      LOG_DEBUG("In Idle: %s", ToBool(sd.response.data.byte[0] & 0x01));
    }

    return sd.response.data.byte[0];
   17216:	f89d 4020 	ldrb.w	r4, [sp, #32]
   1721a:	462b      	mov	r3, r5
   1721c:	4619      	mov	r1, r3
   1721e:	4803      	ldr	r0, [pc, #12]	; (1722c <Sd::WriteBlock(unsigned long, unsigned char const*, unsigned long)+0x1a8>)
   17220:	f7fd ff02 	bl	15028 <__cyg_profile_func_exit>
   17224:	4623      	mov	r3, r4
  }
   17226:	4618      	mov	r0, r3
   17228:	b015      	add	sp, #84	; 0x54
   1722a:	bd30      	pop	{r4, r5, pc}
   1722c:	00017085 	.word	0x00017085

00017230 <Sd::DeleteBlock(unsigned long, unsigned long)>:

  // Deletes any number of blocks (inclusively) within a range of address.
  uint8_t DeleteBlock(uint32_t start, uint32_t end) override
   17230:	b530      	push	{r4, r5, lr}
   17232:	b08f      	sub	sp, #60	; 0x3c
   17234:	4675      	mov	r5, lr
   17236:	9005      	str	r0, [sp, #20]
   17238:	9104      	str	r1, [sp, #16]
   1723a:	9203      	str	r2, [sp, #12]
   1723c:	462b      	mov	r3, r5
   1723e:	4619      	mov	r1, r3
   17240:	483d      	ldr	r0, [pc, #244]	; (17338 <Sd::DeleteBlock(unsigned long, unsigned long)+0x108>)
   17242:	f7fd fedd 	bl	15000 <__cyg_profile_func_enter>
  {
    // Wait for a previous command to finish
    WaitWhileBusy();
   17246:	9805      	ldr	r0, [sp, #20]
   17248:	f7ff fce8 	bl	16c1c <Sd::WaitWhileBusy()>

    // Create a temporary storage location to store sd command responses
    Sd::CardInfo_t sd;
    bool delete_failed = false;
   1724c:	2300      	movs	r3, #0
   1724e:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37

    // Set the delete start address
    LOG_DEBUG("Setting Delete Start Address...");
    sd.response.length = SendCmd(Command::kDelFrom, start,
                                 sd.response.data.byte, 100, KeepAlive::kYes);
   17252:	9b05      	ldr	r3, [sp, #20]
   17254:	681b      	ldr	r3, [r3, #0]
   17256:	681c      	ldr	r4, [r3, #0]
    sd.response.length = SendCmd(Command::kDelFrom, start,
   17258:	ab06      	add	r3, sp, #24
   1725a:	f103 0208 	add.w	r2, r3, #8
   1725e:	2301      	movs	r3, #1
   17260:	9301      	str	r3, [sp, #4]
   17262:	2364      	movs	r3, #100	; 0x64
   17264:	9300      	str	r3, [sp, #0]
   17266:	4613      	mov	r3, r2
   17268:	9a04      	ldr	r2, [sp, #16]
   1726a:	2160      	movs	r1, #96	; 0x60
   1726c:	9805      	ldr	r0, [sp, #20]
   1726e:	47a0      	blx	r4
   17270:	4603      	mov	r3, r0
   17272:	930a      	str	r3, [sp, #40]	; 0x28

    // Wait while the writing the start address
    WaitWhileBusy();
   17274:	9805      	ldr	r0, [sp, #20]
   17276:	f7ff fcd1 	bl	16c1c <Sd::WaitWhileBusy()>

    // Force return if an error occurred
    if (sd.response.data.byte[0] != 0x00)
   1727a:	f89d 3020 	ldrb.w	r3, [sp, #32]
   1727e:	2b00      	cmp	r3, #0
   17280:	d009      	beq.n	17296 <Sd::DeleteBlock(unsigned long, unsigned long)+0x66>
    {
      LOG_ERROR("Failed to set Start Address!");
   17282:	f44f 736a 	mov.w	r3, #936	; 0x3a8
   17286:	4a2d      	ldr	r2, [pc, #180]	; (1733c <Sd::DeleteBlock(unsigned long, unsigned long)+0x10c>)
   17288:	492d      	ldr	r1, [pc, #180]	; (17340 <Sd::DeleteBlock(unsigned long, unsigned long)+0x110>)
   1728a:	482e      	ldr	r0, [pc, #184]	; (17344 <Sd::DeleteBlock(unsigned long, unsigned long)+0x114>)
   1728c:	f7ff f934 	bl	164f8 <printf>
      delete_failed = true;
   17290:	2301      	movs	r3, #1
   17292:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
    }

    // Set the delete end address
    if (!delete_failed)
   17296:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
   1729a:	f083 0301 	eor.w	r3, r3, #1
   1729e:	b2db      	uxtb	r3, r3
   172a0:	2b00      	cmp	r3, #0
   172a2:	d010      	beq.n	172c6 <Sd::DeleteBlock(unsigned long, unsigned long)+0x96>
    {
      LOG_DEBUG("Setting Delete End Address...");
      sd.response.length = SendCmd(Command::kDelTo, end, sd.response.data.byte,
                                   100, KeepAlive::kYes);
   172a4:	9b05      	ldr	r3, [sp, #20]
   172a6:	681b      	ldr	r3, [r3, #0]
   172a8:	681c      	ldr	r4, [r3, #0]
      sd.response.length = SendCmd(Command::kDelTo, end, sd.response.data.byte,
   172aa:	ab06      	add	r3, sp, #24
   172ac:	f103 0208 	add.w	r2, r3, #8
   172b0:	2301      	movs	r3, #1
   172b2:	9301      	str	r3, [sp, #4]
   172b4:	2364      	movs	r3, #100	; 0x64
   172b6:	9300      	str	r3, [sp, #0]
   172b8:	4613      	mov	r3, r2
   172ba:	9a03      	ldr	r2, [sp, #12]
   172bc:	2161      	movs	r1, #97	; 0x61
   172be:	9805      	ldr	r0, [sp, #20]
   172c0:	47a0      	blx	r4
   172c2:	4603      	mov	r3, r0
   172c4:	930a      	str	r3, [sp, #40]	; 0x28
    }

    // Wait while the writing the end address
    WaitWhileBusy();
   172c6:	9805      	ldr	r0, [sp, #20]
   172c8:	f7ff fca8 	bl	16c1c <Sd::WaitWhileBusy()>

    // Force return if an error occurred
    if (sd.response.data.byte[0] != 0x00)
   172cc:	f89d 3020 	ldrb.w	r3, [sp, #32]
   172d0:	2b00      	cmp	r3, #0
   172d2:	d009      	beq.n	172e8 <Sd::DeleteBlock(unsigned long, unsigned long)+0xb8>
    {
      LOG_ERROR("Failed to set End Address!");
   172d4:	f240 33ba 	movw	r3, #954	; 0x3ba
   172d8:	4a18      	ldr	r2, [pc, #96]	; (1733c <Sd::DeleteBlock(unsigned long, unsigned long)+0x10c>)
   172da:	491b      	ldr	r1, [pc, #108]	; (17348 <Sd::DeleteBlock(unsigned long, unsigned long)+0x118>)
   172dc:	481b      	ldr	r0, [pc, #108]	; (1734c <Sd::DeleteBlock(unsigned long, unsigned long)+0x11c>)
   172de:	f7ff f90b 	bl	164f8 <printf>
      delete_failed = true;
   172e2:	2301      	movs	r3, #1
   172e4:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
    }

    // Finally, attempt a delete
    if (!delete_failed)
   172e8:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
   172ec:	f083 0301 	eor.w	r3, r3, #1
   172f0:	b2db      	uxtb	r3, r3
   172f2:	2b00      	cmp	r3, #0
   172f4:	d014      	beq.n	17320 <Sd::DeleteBlock(unsigned long, unsigned long)+0xf0>
    {
      // Issue the delete command to delete from our from:to range
      LOG_DEBUG("Issuing Delete Command...");
      sd.response.length = SendCmd(Command::kDel, 0xFFFFFFFF,
                                   sd.response.data.byte, 100, KeepAlive::kYes);
   172f6:	9b05      	ldr	r3, [sp, #20]
   172f8:	681b      	ldr	r3, [r3, #0]
   172fa:	681c      	ldr	r4, [r3, #0]
      sd.response.length = SendCmd(Command::kDel, 0xFFFFFFFF,
   172fc:	ab06      	add	r3, sp, #24
   172fe:	f103 0208 	add.w	r2, r3, #8
   17302:	2301      	movs	r3, #1
   17304:	9301      	str	r3, [sp, #4]
   17306:	2364      	movs	r3, #100	; 0x64
   17308:	9300      	str	r3, [sp, #0]
   1730a:	4613      	mov	r3, r2
   1730c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   17310:	2166      	movs	r1, #102	; 0x66
   17312:	9805      	ldr	r0, [sp, #20]
   17314:	47a0      	blx	r4
   17316:	4603      	mov	r3, r0
   17318:	930a      	str	r3, [sp, #40]	; 0x28

      // Wait while the deletion occurs
      WaitWhileBusy();
   1731a:	9805      	ldr	r0, [sp, #20]
   1731c:	f7ff fc7e 	bl	16c1c <Sd::WaitWhileBusy()>
      LOG_DEBUG("[R1 Response: 0x%02X]", sd.response.data.byte[0]);
      LOG_DEBUG("Deletion Complete...");
    }

    // Return status
    return sd.response.data.byte[0];
   17320:	f89d 4020 	ldrb.w	r4, [sp, #32]
   17324:	462b      	mov	r3, r5
   17326:	4619      	mov	r1, r3
   17328:	4803      	ldr	r0, [pc, #12]	; (17338 <Sd::DeleteBlock(unsigned long, unsigned long)+0x108>)
   1732a:	f7fd fe7d 	bl	15028 <__cyg_profile_func_exit>
   1732e:	4623      	mov	r3, r4
  }
   17330:	4618      	mov	r0, r3
   17332:	b00f      	add	sp, #60	; 0x3c
   17334:	bd30      	pop	{r4, r5, pc}
   17336:	bf00      	nop
   17338:	00017231 	.word	0x00017231
   1733c:	0001aadc 	.word	0x0001aadc
   17340:	0001a9f4 	.word	0x0001a9f4
   17344:	0001a50c 	.word	0x0001a50c
   17348:	0001a9fc 	.word	0x0001a9fc
   1734c:	0001a564 	.word	0x0001a564

00017350 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)>:

  // Send a command
  uint32_t SendCmd(Command sdc, uint32_t arg, uint8_t response_buffer[],
   17350:	e92d 49f0 	stmdb	sp!, {r4, r5, r6, r7, r8, fp, lr}
   17354:	b08f      	sub	sp, #60	; 0x3c
   17356:	46f0      	mov	r8, lr
   17358:	9003      	str	r0, [sp, #12]
   1735a:	9102      	str	r1, [sp, #8]
   1735c:	9201      	str	r2, [sp, #4]
   1735e:	9300      	str	r3, [sp, #0]
   17360:	4643      	mov	r3, r8
   17362:	4619      	mov	r1, r3
   17364:	4840      	ldr	r0, [pc, #256]	; (17468 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x118>)
   17366:	f7fd fe4b 	bl	15000 <__cyg_profile_func_enter>
                   uint32_t delay, KeepAlive keep_alive) override
  {
    ResponseType res_type;
    uint8_t res_len    = 0;
   1736a:	2300      	movs	r3, #0
   1736c:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
    uint8_t crc        = 0;
   17370:	2300      	movs	r3, #0
   17372:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
    uint8_t tries      = 0;
   17376:	2300      	movs	r3, #0
   17378:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
    uint8_t bit_offset = 0;  // determines the distance of the response's
   1737c:	2300      	movs	r3, #0
   1737e:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
                             // 0 bit from the MSB place
    uint8_t temp_byte = 0;
   17382:	2300      	movs	r3, #0
   17384:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f

    // Determine the response type of the set command
    switch (sdc)
   17388:	9b02      	ldr	r3, [sp, #8]
   1738a:	2b58      	cmp	r3, #88	; 0x58
   1738c:	d052      	beq.n	17434 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0xe4>
   1738e:	2b58      	cmp	r3, #88	; 0x58
   17390:	dc16      	bgt.n	173c0 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x70>
   17392:	2b48      	cmp	r3, #72	; 0x48
   17394:	d033      	beq.n	173fe <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0xae>
   17396:	2b48      	cmp	r3, #72	; 0x48
   17398:	dc06      	bgt.n	173a8 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x58>
   1739a:	2b40      	cmp	r3, #64	; 0x40
   1739c:	d029      	beq.n	173f2 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0xa2>
   1739e:	2b41      	cmp	r3, #65	; 0x41
   173a0:	d02a      	beq.n	173f8 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0xa8>
   173a2:	2b0d      	cmp	r3, #13
   173a4:	d031      	beq.n	1740a <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0xba>
   173a6:	e054      	b.n	17452 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x102>
   173a8:	2b50      	cmp	r3, #80	; 0x50
   173aa:	d03a      	beq.n	17422 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0xd2>
   173ac:	2b50      	cmp	r3, #80	; 0x50
   173ae:	dc02      	bgt.n	173b6 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x66>
   173b0:	2b4c      	cmp	r3, #76	; 0x4c
   173b2:	d027      	beq.n	17404 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0xb4>
   173b4:	e04d      	b.n	17452 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x102>
   173b6:	2b51      	cmp	r3, #81	; 0x51
   173b8:	d036      	beq.n	17428 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0xd8>
   173ba:	2b52      	cmp	r3, #82	; 0x52
   173bc:	d037      	beq.n	1742e <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0xde>
   173be:	e048      	b.n	17452 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x102>
   173c0:	2b66      	cmp	r3, #102	; 0x66
   173c2:	d043      	beq.n	1744c <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0xfc>
   173c4:	2b66      	cmp	r3, #102	; 0x66
   173c6:	dc06      	bgt.n	173d6 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x86>
   173c8:	2b60      	cmp	r3, #96	; 0x60
   173ca:	d039      	beq.n	17440 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0xf0>
   173cc:	2b61      	cmp	r3, #97	; 0x61
   173ce:	d03a      	beq.n	17446 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0xf6>
   173d0:	2b59      	cmp	r3, #89	; 0x59
   173d2:	d032      	beq.n	1743a <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0xea>
   173d4:	e03d      	b.n	17452 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x102>
   173d6:	2b77      	cmp	r3, #119	; 0x77
   173d8:	d01a      	beq.n	17410 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0xc0>
   173da:	2b77      	cmp	r3, #119	; 0x77
   173dc:	dc02      	bgt.n	173e4 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x94>
   173de:	2b69      	cmp	r3, #105	; 0x69
   173e0:	d019      	beq.n	17416 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0xc6>
   173e2:	e036      	b.n	17452 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x102>
   173e4:	2b7a      	cmp	r3, #122	; 0x7a
   173e6:	d019      	beq.n	1741c <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0xcc>
   173e8:	2bff      	cmp	r3, #255	; 0xff
   173ea:	d132      	bne.n	17452 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x102>
    {
      case Command::kGarbage: res_type = ResponseType::kR1; break;
   173ec:	2300      	movs	r3, #0
   173ee:	930d      	str	r3, [sp, #52]	; 0x34
   173f0:	e042      	b.n	17478 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x128>
      case Command::kReset: res_type = ResponseType::kR1; break;
   173f2:	2300      	movs	r3, #0
   173f4:	930d      	str	r3, [sp, #52]	; 0x34
   173f6:	e03f      	b.n	17478 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x128>
      case Command::kInit: res_type = ResponseType::kR1; break;
   173f8:	2300      	movs	r3, #0
   173fa:	930d      	str	r3, [sp, #52]	; 0x34
   173fc:	e03c      	b.n	17478 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x128>
      case Command::kGetOp: res_type = ResponseType::kR7; break;
   173fe:	2307      	movs	r3, #7
   17400:	930d      	str	r3, [sp, #52]	; 0x34
   17402:	e039      	b.n	17478 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x128>
      case Command::kStopTrans: res_type = ResponseType::kR1; break;
   17404:	2300      	movs	r3, #0
   17406:	930d      	str	r3, [sp, #52]	; 0x34
   17408:	e036      	b.n	17478 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x128>
      case Command::kGetStatus: res_type = ResponseType::kR2; break;
   1740a:	2302      	movs	r3, #2
   1740c:	930d      	str	r3, [sp, #52]	; 0x34
   1740e:	e033      	b.n	17478 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x128>
      case Command::kAcBegin: res_type = ResponseType::kR1; break;
   17410:	2300      	movs	r3, #0
   17412:	930d      	str	r3, [sp, #52]	; 0x34
   17414:	e030      	b.n	17478 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x128>
      case Command::kAcInit: res_type = ResponseType::kR1; break;
   17416:	2300      	movs	r3, #0
   17418:	930d      	str	r3, [sp, #52]	; 0x34
   1741a:	e02d      	b.n	17478 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x128>
      case Command::kGetOcr: res_type = ResponseType::kR3; break;
   1741c:	2303      	movs	r3, #3
   1741e:	930d      	str	r3, [sp, #52]	; 0x34
   17420:	e02a      	b.n	17478 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x128>
      case Command::kChgBlkLen: res_type = ResponseType::kR1; break;
   17422:	2300      	movs	r3, #0
   17424:	930d      	str	r3, [sp, #52]	; 0x34
   17426:	e027      	b.n	17478 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x128>
      case Command::kReadSingle: res_type = ResponseType::kR1; break;
   17428:	2300      	movs	r3, #0
   1742a:	930d      	str	r3, [sp, #52]	; 0x34
   1742c:	e024      	b.n	17478 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x128>
      case Command::kReadMulti: res_type = ResponseType::kR1; break;
   1742e:	2300      	movs	r3, #0
   17430:	930d      	str	r3, [sp, #52]	; 0x34
   17432:	e021      	b.n	17478 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x128>
      case Command::kWriteSingle: res_type = ResponseType::kR1; break;
   17434:	2300      	movs	r3, #0
   17436:	930d      	str	r3, [sp, #52]	; 0x34
   17438:	e01e      	b.n	17478 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x128>
      case Command::kWriteMulti: res_type = ResponseType::kR1; break;
   1743a:	2300      	movs	r3, #0
   1743c:	930d      	str	r3, [sp, #52]	; 0x34
   1743e:	e01b      	b.n	17478 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x128>
      case Command::kDelFrom: res_type = ResponseType::kR1; break;
   17440:	2300      	movs	r3, #0
   17442:	930d      	str	r3, [sp, #52]	; 0x34
   17444:	e018      	b.n	17478 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x128>
      case Command::kDelTo: res_type = ResponseType::kR1; break;
   17446:	2300      	movs	r3, #0
   17448:	930d      	str	r3, [sp, #52]	; 0x34
   1744a:	e015      	b.n	17478 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x128>
      case Command::kDel: res_type = ResponseType::kR1b; break;
   1744c:	2301      	movs	r3, #1
   1744e:	930d      	str	r3, [sp, #52]	; 0x34
   17450:	e012      	b.n	17478 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x128>
      default:
        LOG_ERROR("Unknown response type. Aborting!");
   17452:	f240 33f3 	movw	r3, #1011	; 0x3f3
   17456:	4a05      	ldr	r2, [pc, #20]	; (1746c <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x11c>)
   17458:	4905      	ldr	r1, [pc, #20]	; (17470 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x120>)
   1745a:	4806      	ldr	r0, [pc, #24]	; (17474 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x124>)
   1745c:	f7ff f84c 	bl	164f8 <printf>
        return -1;
   17460:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   17464:	e1b1      	b.n	177ca <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x47a>
   17466:	bf00      	nop
   17468:	00017351 	.word	0x00017351
   1746c:	0001ab10 	.word	0x0001ab10
   17470:	0001aa04 	.word	0x0001aa04
   17474:	0001a5b8 	.word	0x0001a5b8
    // algorithm
    uint8_t msg[5] = { static_cast<uint8_t>(sdc),
                       static_cast<uint8_t>(arg >> 24),
                       static_cast<uint8_t>(arg >> 16),
                       static_cast<uint8_t>(arg >> 8),
                       static_cast<uint8_t>(arg >> 0) };
   17478:	9b02      	ldr	r3, [sp, #8]
   1747a:	b2db      	uxtb	r3, r3
   1747c:	f88d 3010 	strb.w	r3, [sp, #16]
                       static_cast<uint8_t>(arg >> 24),
   17480:	9b01      	ldr	r3, [sp, #4]
   17482:	0e1b      	lsrs	r3, r3, #24
                       static_cast<uint8_t>(arg >> 0) };
   17484:	b2db      	uxtb	r3, r3
   17486:	f88d 3011 	strb.w	r3, [sp, #17]
                       static_cast<uint8_t>(arg >> 16),
   1748a:	9b01      	ldr	r3, [sp, #4]
   1748c:	0c1b      	lsrs	r3, r3, #16
                       static_cast<uint8_t>(arg >> 0) };
   1748e:	b2db      	uxtb	r3, r3
   17490:	f88d 3012 	strb.w	r3, [sp, #18]
                       static_cast<uint8_t>(arg >> 8),
   17494:	9b01      	ldr	r3, [sp, #4]
   17496:	0a1b      	lsrs	r3, r3, #8
                       static_cast<uint8_t>(arg >> 0) };
   17498:	b2db      	uxtb	r3, r3
   1749a:	f88d 3013 	strb.w	r3, [sp, #19]
   1749e:	9b01      	ldr	r3, [sp, #4]
   174a0:	b2db      	uxtb	r3, r3
   174a2:	f88d 3014 	strb.w	r3, [sp, #20]

    crc = GetCrc7(msg, sizeof(msg));
   174a6:	9b03      	ldr	r3, [sp, #12]
   174a8:	681b      	ldr	r3, [r3, #0]
   174aa:	331c      	adds	r3, #28
   174ac:	681b      	ldr	r3, [r3, #0]
   174ae:	a904      	add	r1, sp, #16
   174b0:	2205      	movs	r2, #5
   174b2:	9803      	ldr	r0, [sp, #12]
   174b4:	4798      	blx	r3
   174b6:	4603      	mov	r3, r0
   174b8:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
    if (sdc == Command::kGarbage)
   174bc:	9b02      	ldr	r3, [sp, #8]
   174be:	2bff      	cmp	r3, #255	; 0xff
   174c0:	d102      	bne.n	174c8 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x178>
    {
      crc = 0xFF;
   174c2:	23ff      	movs	r3, #255	; 0xff
   174c4:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
    }

    // Select the SD Card
    chip_select_->SetLow();
   174c8:	9b03      	ldr	r3, [sp, #12]
   174ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   174cc:	9b03      	ldr	r3, [sp, #12]
   174ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   174d0:	681b      	ldr	r3, [r3, #0]
   174d2:	3310      	adds	r3, #16
   174d4:	681b      	ldr	r3, [r3, #0]
   174d6:	4610      	mov	r0, r2
   174d8:	4798      	blx	r3
    chip_select_external_->SetLow();
   174da:	9b03      	ldr	r3, [sp, #12]
   174dc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
   174de:	9b03      	ldr	r3, [sp, #12]
   174e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   174e2:	681b      	ldr	r3, [r3, #0]
   174e4:	3310      	adds	r3, #16
   174e6:	681b      	ldr	r3, [r3, #0]
   174e8:	4610      	mov	r0, r2
   174ea:	4798      	blx	r3

    // If desired, wait a bit before talking
    if (delay > 0)
   174ec:	9b16      	ldr	r3, [sp, #88]	; 0x58
   174ee:	2b00      	cmp	r3, #0
   174f0:	d007      	beq.n	17502 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x1b2>
    {
      Delay(delay);
   174f2:	9b16      	ldr	r3, [sp, #88]	; 0x58
   174f4:	461a      	mov	r2, r3
   174f6:	f04f 0300 	mov.w	r3, #0
   174fa:	4610      	mov	r0, r2
   174fc:	4619      	mov	r1, r3
   174fe:	f7ff f8d1 	bl	166a4 <Delay(unsigned long long)>
    }

    // Send the desired command frame to the SD card board
    // Begin by transfering the command byte
    ssp_interface_->Transfer(static_cast<uint16_t>(sdc));
   17502:	9b03      	ldr	r3, [sp, #12]
   17504:	685a      	ldr	r2, [r3, #4]
   17506:	9b03      	ldr	r3, [sp, #12]
   17508:	685b      	ldr	r3, [r3, #4]
   1750a:	681b      	ldr	r3, [r3, #0]
   1750c:	3308      	adds	r3, #8
   1750e:	681b      	ldr	r3, [r3, #0]
   17510:	9902      	ldr	r1, [sp, #8]
   17512:	b289      	uxth	r1, r1
   17514:	4610      	mov	r0, r2
   17516:	4798      	blx	r3
    // Send arg byte [31:24]
    ssp_interface_->Transfer(static_cast<uint16_t>(arg >> 24) & 0xFF);
   17518:	9b03      	ldr	r3, [sp, #12]
   1751a:	6858      	ldr	r0, [r3, #4]
   1751c:	9b03      	ldr	r3, [sp, #12]
   1751e:	685b      	ldr	r3, [r3, #4]
   17520:	681b      	ldr	r3, [r3, #0]
   17522:	3308      	adds	r3, #8
   17524:	681b      	ldr	r3, [r3, #0]
   17526:	9a01      	ldr	r2, [sp, #4]
   17528:	0e12      	lsrs	r2, r2, #24
   1752a:	b292      	uxth	r2, r2
   1752c:	b2d2      	uxtb	r2, r2
   1752e:	b292      	uxth	r2, r2
   17530:	4611      	mov	r1, r2
   17532:	4798      	blx	r3
    // Send arg byte [23:16]
    ssp_interface_->Transfer(static_cast<uint16_t>(arg >> 16) & 0xFF);
   17534:	9b03      	ldr	r3, [sp, #12]
   17536:	6858      	ldr	r0, [r3, #4]
   17538:	9b03      	ldr	r3, [sp, #12]
   1753a:	685b      	ldr	r3, [r3, #4]
   1753c:	681b      	ldr	r3, [r3, #0]
   1753e:	3308      	adds	r3, #8
   17540:	681b      	ldr	r3, [r3, #0]
   17542:	9a01      	ldr	r2, [sp, #4]
   17544:	0c12      	lsrs	r2, r2, #16
   17546:	b292      	uxth	r2, r2
   17548:	b2d2      	uxtb	r2, r2
   1754a:	b292      	uxth	r2, r2
   1754c:	4611      	mov	r1, r2
   1754e:	4798      	blx	r3
    // Send arg byte [15:8]
    ssp_interface_->Transfer(static_cast<uint16_t>(arg >> 8) & 0xFF);
   17550:	9b03      	ldr	r3, [sp, #12]
   17552:	6858      	ldr	r0, [r3, #4]
   17554:	9b03      	ldr	r3, [sp, #12]
   17556:	685b      	ldr	r3, [r3, #4]
   17558:	681b      	ldr	r3, [r3, #0]
   1755a:	3308      	adds	r3, #8
   1755c:	681b      	ldr	r3, [r3, #0]
   1755e:	9a01      	ldr	r2, [sp, #4]
   17560:	0a12      	lsrs	r2, r2, #8
   17562:	b292      	uxth	r2, r2
   17564:	b2d2      	uxtb	r2, r2
   17566:	b292      	uxth	r2, r2
   17568:	4611      	mov	r1, r2
   1756a:	4798      	blx	r3
    // Send arg byte [7:0]
    ssp_interface_->Transfer(static_cast<uint16_t>(arg >> 0) & 0xFF);
   1756c:	9b03      	ldr	r3, [sp, #12]
   1756e:	685a      	ldr	r2, [r3, #4]
   17570:	9b03      	ldr	r3, [sp, #12]
   17572:	685b      	ldr	r3, [r3, #4]
   17574:	681b      	ldr	r3, [r3, #0]
   17576:	3308      	adds	r3, #8
   17578:	681b      	ldr	r3, [r3, #0]
   1757a:	9901      	ldr	r1, [sp, #4]
   1757c:	b289      	uxth	r1, r1
   1757e:	b2c9      	uxtb	r1, r1
   17580:	b289      	uxth	r1, r1
   17582:	4610      	mov	r0, r2
   17584:	4798      	blx	r3
    // Send 7-bit CRC and LSB stop addr (as b1)
    ssp_interface_->Transfer(static_cast<uint16_t>(crc << 1) | 0x01);
   17586:	9b03      	ldr	r3, [sp, #12]
   17588:	6858      	ldr	r0, [r3, #4]
   1758a:	9b03      	ldr	r3, [sp, #12]
   1758c:	685b      	ldr	r3, [r3, #4]
   1758e:	681b      	ldr	r3, [r3, #0]
   17590:	3308      	adds	r3, #8
   17592:	681b      	ldr	r3, [r3, #0]
   17594:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
   17598:	b292      	uxth	r2, r2
   1759a:	0052      	lsls	r2, r2, #1
   1759c:	b292      	uxth	r2, r2
   1759e:	f042 0201 	orr.w	r2, r2, #1
   175a2:	b292      	uxth	r2, r2
   175a4:	4611      	mov	r1, r2
   175a6:	4798      	blx	r3

    // Write garbage while waiting for a response
    // Send at least 1 byte of garbage before checking for a response
    temp_byte = static_cast<uint8_t>(ssp_interface_->Transfer(0xFF));
   175a8:	9b03      	ldr	r3, [sp, #12]
   175aa:	685a      	ldr	r2, [r3, #4]
   175ac:	9b03      	ldr	r3, [sp, #12]
   175ae:	685b      	ldr	r3, [r3, #4]
   175b0:	681b      	ldr	r3, [r3, #0]
   175b2:	3308      	adds	r3, #8
   175b4:	681b      	ldr	r3, [r3, #0]
   175b6:	21ff      	movs	r1, #255	; 0xff
   175b8:	4610      	mov	r0, r2
   175ba:	4798      	blx	r3
   175bc:	4603      	mov	r3, r0
   175be:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
    while (tries++ < kBusTimeout)
   175c2:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   175c6:	1c5a      	adds	r2, r3, #1
   175c8:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
   175cc:	2bf9      	cmp	r3, #249	; 0xf9
   175ce:	bf94      	ite	ls
   175d0:	2301      	movls	r3, #1
   175d2:	2300      	movhi	r3, #0
   175d4:	b2db      	uxtb	r3, r3
   175d6:	2b00      	cmp	r3, #0
   175d8:	d027      	beq.n	1762a <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x2da>
    {
      temp_byte = static_cast<uint8_t>(ssp_interface_->Transfer(0xFF));
   175da:	9b03      	ldr	r3, [sp, #12]
   175dc:	685a      	ldr	r2, [r3, #4]
   175de:	9b03      	ldr	r3, [sp, #12]
   175e0:	685b      	ldr	r3, [r3, #4]
   175e2:	681b      	ldr	r3, [r3, #0]
   175e4:	3308      	adds	r3, #8
   175e6:	681b      	ldr	r3, [r3, #0]
   175e8:	21ff      	movs	r1, #255	; 0xff
   175ea:	4610      	mov	r0, r2
   175ec:	4798      	blx	r3
   175ee:	4603      	mov	r3, r0
   175f0:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
      if (temp_byte != 0xFF)
   175f4:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
   175f8:	2bff      	cmp	r3, #255	; 0xff
   175fa:	d00f      	beq.n	1761c <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x2cc>
      {
        // Determine the offset, since the first byte of a
        // response will always be 0.
        while (temp_byte & (0x80 >> bit_offset))
   175fc:	f89d 202f 	ldrb.w	r2, [sp, #47]	; 0x2f
   17600:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
   17604:	2180      	movs	r1, #128	; 0x80
   17606:	fa41 f303 	asr.w	r3, r1, r3
   1760a:	4013      	ands	r3, r2
   1760c:	2b00      	cmp	r3, #0
   1760e:	d00b      	beq.n	17628 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x2d8>
        {
          bit_offset++;
   17610:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
   17614:	3301      	adds	r3, #1
   17616:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
        while (temp_byte & (0x80 >> bit_offset))
   1761a:	e7ef      	b.n	175fc <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x2ac>
        }
        break;
      }
      tries++;
   1761c:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   17620:	3301      	adds	r3, #1
   17622:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
    while (tries++ < kBusTimeout)
   17626:	e7cc      	b.n	175c2 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x272>
        break;
   17628:	bf00      	nop
    }

    // Determine response length (in bytes) based on response type
    switch (res_type)
   1762a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1762c:	2b07      	cmp	r3, #7
   1762e:	d827      	bhi.n	17680 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x330>
   17630:	a201      	add	r2, pc, #4	; (adr r2, 17638 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x2e8>)
   17632:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   17636:	bf00      	nop
   17638:	00017659 	.word	0x00017659
   1763c:	00017661 	.word	0x00017661
   17640:	00017669 	.word	0x00017669
   17644:	00017671 	.word	0x00017671
   17648:	00017681 	.word	0x00017681
   1764c:	00017681 	.word	0x00017681
   17650:	00017681 	.word	0x00017681
   17654:	00017679 	.word	0x00017679
    {
      case ResponseType::kR1: res_len = 1; break;
   17658:	2301      	movs	r3, #1
   1765a:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
   1765e:	e019      	b.n	17694 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x344>
      case ResponseType::kR1b: res_len = 1; break;
   17660:	2301      	movs	r3, #1
   17662:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
   17666:	e015      	b.n	17694 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x344>
      case ResponseType::kR2: res_len = 2; break;
   17668:	2302      	movs	r3, #2
   1766a:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
   1766e:	e011      	b.n	17694 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x344>
      case ResponseType::kR3: res_len = 5; break;
   17670:	2305      	movs	r3, #5
   17672:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
   17676:	e00d      	b.n	17694 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x344>
      case ResponseType::kR7: res_len = 5; break;
   17678:	2305      	movs	r3, #5
   1767a:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
   1767e:	e009      	b.n	17694 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x344>
      default:
        LOG_ERROR("Response unsupported in SPI mode. Aborting!");
   17680:	f240 433a 	movw	r3, #1082	; 0x43a
   17684:	4a56      	ldr	r2, [pc, #344]	; (177e0 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x490>)
   17686:	4957      	ldr	r1, [pc, #348]	; (177e4 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x494>)
   17688:	4857      	ldr	r0, [pc, #348]	; (177e8 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x498>)
   1768a:	f7fe ff35 	bl	164f8 <printf>
        return -1;
   1768e:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   17692:	e09a      	b.n	177ca <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x47a>
        break;
    }

    // Acquire the response
    uint64_t temp_response = 0;
   17694:	f04f 0200 	mov.w	r2, #0
   17698:	f04f 0300 	mov.w	r3, #0
   1769c:	e9cd 2308 	strd	r2, r3, [sp, #32]
    // Read an extra 8 bits since the response was offset
    uint8_t bytes_to_read =
   176a0:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
   176a4:	2b00      	cmp	r3, #0
   176a6:	d004      	beq.n	176b2 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x362>
   176a8:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
   176ac:	3301      	adds	r3, #1
   176ae:	b2db      	uxtb	r3, r3
   176b0:	e001      	b.n	176b6 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x366>
   176b2:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
   176b6:	f88d 301f 	strb.w	r3, [sp, #31]
        static_cast<uint8_t>((bit_offset > 0) ? res_len + 1 : res_len);
    while (bytes_to_read-- > 0)
   176ba:	f89d 301f 	ldrb.w	r3, [sp, #31]
   176be:	1e5a      	subs	r2, r3, #1
   176c0:	f88d 201f 	strb.w	r2, [sp, #31]
   176c4:	2b00      	cmp	r3, #0
   176c6:	bf14      	ite	ne
   176c8:	2301      	movne	r3, #1
   176ca:	2300      	moveq	r3, #0
   176cc:	b2db      	uxtb	r3, r3
   176ce:	2b00      	cmp	r3, #0
   176d0:	d025      	beq.n	1771e <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x3ce>
    {
      // Make space for the next byte
      temp_response = temp_response << 8;
   176d2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   176d6:	f04f 0200 	mov.w	r2, #0
   176da:	f04f 0300 	mov.w	r3, #0
   176de:	020b      	lsls	r3, r1, #8
   176e0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
   176e4:	0202      	lsls	r2, r0, #8
   176e6:	e9cd 2308 	strd	r2, r3, [sp, #32]
      temp_response |= temp_byte;
   176ea:	f89d b02f 	ldrb.w	fp, [sp, #47]	; 0x2f
   176ee:	f04f 0c00 	mov.w	ip, #0
   176f2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   176f6:	ea4b 0200 	orr.w	r2, fp, r0
   176fa:	ea4c 0301 	orr.w	r3, ip, r1
   176fe:	e9cd 2308 	strd	r2, r3, [sp, #32]
      temp_byte = static_cast<uint8_t>(ssp_interface_->Transfer(0xFF));
   17702:	9b03      	ldr	r3, [sp, #12]
   17704:	685a      	ldr	r2, [r3, #4]
   17706:	9b03      	ldr	r3, [sp, #12]
   17708:	685b      	ldr	r3, [r3, #4]
   1770a:	681b      	ldr	r3, [r3, #0]
   1770c:	3308      	adds	r3, #8
   1770e:	681b      	ldr	r3, [r3, #0]
   17710:	21ff      	movs	r1, #255	; 0xff
   17712:	4610      	mov	r0, r2
   17714:	4798      	blx	r3
   17716:	4603      	mov	r3, r0
   17718:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
    while (bytes_to_read-- > 0)
   1771c:	e7cd      	b.n	176ba <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x36a>
    }
    // Compensate for the bit offset
    temp_response = temp_response >> bit_offset;
   1771e:	f89d 1030 	ldrb.w	r1, [sp, #48]	; 0x30
   17722:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   17726:	f1c1 0c20 	rsb	ip, r1, #32
   1772a:	f1a1 0020 	sub.w	r0, r1, #32
   1772e:	fa22 f401 	lsr.w	r4, r2, r1
   17732:	fa03 fc0c 	lsl.w	ip, r3, ip
   17736:	ea44 040c 	orr.w	r4, r4, ip
   1773a:	fa23 f000 	lsr.w	r0, r3, r0
   1773e:	4304      	orrs	r4, r0
   17740:	fa23 f501 	lsr.w	r5, r3, r1
   17744:	e9cd 4508 	strd	r4, r5, [sp, #32]

    // Only write to the response buffer if it is provided
    if (response_buffer != nullptr)
   17748:	9b00      	ldr	r3, [sp, #0]
   1774a:	2b00      	cmp	r3, #0
   1774c:	d025      	beq.n	1779a <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x44a>
    {
      for (int i = 0; i < res_len; i++)
   1774e:	2300      	movs	r3, #0
   17750:	9306      	str	r3, [sp, #24]
   17752:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
   17756:	9a06      	ldr	r2, [sp, #24]
   17758:	429a      	cmp	r2, r3
   1775a:	da1e      	bge.n	1779a <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x44a>
      {
        response_buffer[i] =
            static_cast<uint8_t>(temp_response >> 8 * (res_len - 1 - i));
   1775c:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
   17760:	1e5a      	subs	r2, r3, #1
   17762:	9b06      	ldr	r3, [sp, #24]
   17764:	1ad3      	subs	r3, r2, r3
   17766:	00da      	lsls	r2, r3, #3
   17768:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   1776c:	f1c2 0020 	rsb	r0, r2, #32
   17770:	f1a2 0120 	sub.w	r1, r2, #32
   17774:	fa23 f602 	lsr.w	r6, r3, r2
   17778:	fa04 f000 	lsl.w	r0, r4, r0
   1777c:	4306      	orrs	r6, r0
   1777e:	fa24 f101 	lsr.w	r1, r4, r1
   17782:	430e      	orrs	r6, r1
   17784:	fa24 f702 	lsr.w	r7, r4, r2
        response_buffer[i] =
   17788:	9b06      	ldr	r3, [sp, #24]
   1778a:	9a00      	ldr	r2, [sp, #0]
   1778c:	4413      	add	r3, r2
   1778e:	b2f2      	uxtb	r2, r6
   17790:	701a      	strb	r2, [r3, #0]
      for (int i = 0; i < res_len; i++)
   17792:	9b06      	ldr	r3, [sp, #24]
   17794:	3301      	adds	r3, #1
   17796:	9306      	str	r3, [sp, #24]
   17798:	e7db      	b.n	17752 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x402>
      }
    }

    // Only end the transaction if keep_alive isn't requested
    if (keep_alive == KeepAlive::kNo)
   1779a:	f89d 305c 	ldrb.w	r3, [sp, #92]	; 0x5c
   1779e:	2b00      	cmp	r3, #0
   177a0:	d111      	bne.n	177c6 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x476>
    {
      // Deselect the SPI comm board
      chip_select_->SetHigh();
   177a2:	9b03      	ldr	r3, [sp, #12]
   177a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   177a6:	9b03      	ldr	r3, [sp, #12]
   177a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   177aa:	681b      	ldr	r3, [r3, #0]
   177ac:	330c      	adds	r3, #12
   177ae:	681b      	ldr	r3, [r3, #0]
   177b0:	4610      	mov	r0, r2
   177b2:	4798      	blx	r3
      chip_select_external_->SetHigh();
   177b4:	9b03      	ldr	r3, [sp, #12]
   177b6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
   177b8:	9b03      	ldr	r3, [sp, #12]
   177ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   177bc:	681b      	ldr	r3, [r3, #0]
   177be:	330c      	adds	r3, #12
   177c0:	681b      	ldr	r3, [r3, #0]
   177c2:	4610      	mov	r0, r2
   177c4:	4798      	blx	r3
    }
    return res_len;
   177c6:	f89d 4033 	ldrb.w	r4, [sp, #51]	; 0x33
   177ca:	4643      	mov	r3, r8
   177cc:	4619      	mov	r1, r3
   177ce:	4807      	ldr	r0, [pc, #28]	; (177ec <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x49c>)
   177d0:	f7fd fc2a 	bl	15028 <__cyg_profile_func_exit>
   177d4:	4623      	mov	r3, r4
  }
   177d6:	4618      	mov	r0, r3
   177d8:	b00f      	add	sp, #60	; 0x3c
   177da:	e8bd 89f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, fp, pc}
   177de:	bf00      	nop
   177e0:	0001ab10 	.word	0x0001ab10
   177e4:	0001aa0c 	.word	0x0001aa0c
   177e8:	0001a614 	.word	0x0001a614
   177ec:	00017351 	.word	0x00017351

000177f0 <Sd::Crc7Add(unsigned char, unsigned char)>:

  // Adds a message byte to the current CRC-7 to get a the new CRC-7
  uint8_t Crc7Add(uint8_t crc, uint8_t message_byte) override
   177f0:	b530      	push	{r4, r5, lr}
   177f2:	b083      	sub	sp, #12
   177f4:	4675      	mov	r5, lr
   177f6:	9001      	str	r0, [sp, #4]
   177f8:	460b      	mov	r3, r1
   177fa:	f88d 3003 	strb.w	r3, [sp, #3]
   177fe:	4613      	mov	r3, r2
   17800:	f88d 3002 	strb.w	r3, [sp, #2]
   17804:	462b      	mov	r3, r5
   17806:	4619      	mov	r1, r3
   17808:	4809      	ldr	r0, [pc, #36]	; (17830 <Sd::Crc7Add(unsigned char, unsigned char)+0x40>)
   1780a:	f7fd fbf9 	bl	15000 <__cyg_profile_func_enter>
  {
    return kCrcTable8.crc_table[(crc << 1) ^ message_byte];
   1780e:	f89d 3003 	ldrb.w	r3, [sp, #3]
   17812:	005a      	lsls	r2, r3, #1
   17814:	f89d 3002 	ldrb.w	r3, [sp, #2]
   17818:	4053      	eors	r3, r2
   1781a:	4a06      	ldr	r2, [pc, #24]	; (17834 <Sd::Crc7Add(unsigned char, unsigned char)+0x44>)
   1781c:	5cd4      	ldrb	r4, [r2, r3]
   1781e:	462b      	mov	r3, r5
   17820:	4619      	mov	r1, r3
   17822:	4803      	ldr	r0, [pc, #12]	; (17830 <Sd::Crc7Add(unsigned char, unsigned char)+0x40>)
   17824:	f7fd fc00 	bl	15028 <__cyg_profile_func_exit>
   17828:	4623      	mov	r3, r4
  }
   1782a:	4618      	mov	r0, r3
   1782c:	b003      	add	sp, #12
   1782e:	bd30      	pop	{r4, r5, pc}
   17830:	000177f1 	.word	0x000177f1
   17834:	0001a67c 	.word	0x0001a67c

00017838 <Sd::GetCrc7(unsigned char*, unsigned char)>:

  // Returns the CRC-7 for a message of "length" bytes
  uint8_t GetCrc7(uint8_t * message, uint8_t length) override
   17838:	b530      	push	{r4, r5, lr}
   1783a:	b087      	sub	sp, #28
   1783c:	4675      	mov	r5, lr
   1783e:	9003      	str	r0, [sp, #12]
   17840:	9102      	str	r1, [sp, #8]
   17842:	4613      	mov	r3, r2
   17844:	f88d 3007 	strb.w	r3, [sp, #7]
   17848:	462b      	mov	r3, r5
   1784a:	4619      	mov	r1, r3
   1784c:	4815      	ldr	r0, [pc, #84]	; (178a4 <Sd::GetCrc7(unsigned char*, unsigned char)+0x6c>)
   1784e:	f7fd fbd7 	bl	15000 <__cyg_profile_func_enter>
  {
    uint8_t crc = 0;
   17852:	2300      	movs	r3, #0
   17854:	f88d 3017 	strb.w	r3, [sp, #23]
    for (int i = 0; i < length; i++)
   17858:	2300      	movs	r3, #0
   1785a:	9304      	str	r3, [sp, #16]
   1785c:	f89d 3007 	ldrb.w	r3, [sp, #7]
   17860:	9a04      	ldr	r2, [sp, #16]
   17862:	429a      	cmp	r2, r3
   17864:	da12      	bge.n	1788c <Sd::GetCrc7(unsigned char*, unsigned char)+0x54>
    {
      crc = Crc7Add(crc, message[i]);
   17866:	9b03      	ldr	r3, [sp, #12]
   17868:	681b      	ldr	r3, [r3, #0]
   1786a:	3318      	adds	r3, #24
   1786c:	681b      	ldr	r3, [r3, #0]
   1786e:	9a04      	ldr	r2, [sp, #16]
   17870:	9902      	ldr	r1, [sp, #8]
   17872:	440a      	add	r2, r1
   17874:	7812      	ldrb	r2, [r2, #0]
   17876:	f89d 1017 	ldrb.w	r1, [sp, #23]
   1787a:	9803      	ldr	r0, [sp, #12]
   1787c:	4798      	blx	r3
   1787e:	4603      	mov	r3, r0
   17880:	f88d 3017 	strb.w	r3, [sp, #23]
    for (int i = 0; i < length; i++)
   17884:	9b04      	ldr	r3, [sp, #16]
   17886:	3301      	adds	r3, #1
   17888:	9304      	str	r3, [sp, #16]
   1788a:	e7e7      	b.n	1785c <Sd::GetCrc7(unsigned char*, unsigned char)+0x24>
    }
    return crc;
   1788c:	f89d 4017 	ldrb.w	r4, [sp, #23]
   17890:	462b      	mov	r3, r5
   17892:	4619      	mov	r1, r3
   17894:	4803      	ldr	r0, [pc, #12]	; (178a4 <Sd::GetCrc7(unsigned char*, unsigned char)+0x6c>)
   17896:	f7fd fbc7 	bl	15028 <__cyg_profile_func_exit>
   1789a:	4623      	mov	r3, r4
  }
   1789c:	4618      	mov	r0, r3
   1789e:	b007      	add	sp, #28
   178a0:	bd30      	pop	{r4, r5, pc}
   178a2:	bf00      	nop
   178a4:	00017839 	.word	0x00017839

000178a8 <Sd::GetCrc16(unsigned char*, unsigned short)>:

  // Returns CCITT CRC-16 for a message of "length" bytes
  uint16_t GetCrc16(uint8_t * message, uint16_t length) override
   178a8:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
   178ac:	b08c      	sub	sp, #48	; 0x30
   178ae:	4677      	mov	r7, lr
   178b0:	9003      	str	r0, [sp, #12]
   178b2:	9102      	str	r1, [sp, #8]
   178b4:	4613      	mov	r3, r2
   178b6:	f8ad 3006 	strh.w	r3, [sp, #6]
   178ba:	463b      	mov	r3, r7
   178bc:	4619      	mov	r1, r3
   178be:	4837      	ldr	r0, [pc, #220]	; (1799c <Sd::GetCrc16(unsigned char*, unsigned short)+0xf4>)
   178c0:	f7fd fb9e 	bl	15000 <__cyg_profile_func_enter>
  {
    uint64_t crc = 0x0000;
   178c4:	f04f 0300 	mov.w	r3, #0
   178c8:	f04f 0400 	mov.w	r4, #0
   178cc:	e9cd 340a 	strd	r3, r4, [sp, #40]	; 0x28
    uint64_t temp;
    uint64_t final_value = 0;
   178d0:	f04f 0300 	mov.w	r3, #0
   178d4:	f04f 0400 	mov.w	r4, #0
   178d8:	e9cd 3406 	strd	r3, r4, [sp, #24]

    for (uint64_t count = 0; count < length; ++count)
   178dc:	f04f 0300 	mov.w	r3, #0
   178e0:	f04f 0400 	mov.w	r4, #0
   178e4:	e9cd 3408 	strd	r3, r4, [sp, #32]
   178e8:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   178ec:	f04f 0400 	mov.w	r4, #0
   178f0:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
   178f4:	42a2      	cmp	r2, r4
   178f6:	bf08      	it	eq
   178f8:	4299      	cmpeq	r1, r3
   178fa:	d23f      	bcs.n	1797c <Sd::GetCrc16(unsigned char*, unsigned short)+0xd4>
    {
      temp = (*message++ ^ (crc >> 8)) & 0xff;
   178fc:	9b02      	ldr	r3, [sp, #8]
   178fe:	1c5a      	adds	r2, r3, #1
   17900:	9202      	str	r2, [sp, #8]
   17902:	781b      	ldrb	r3, [r3, #0]
   17904:	b2dd      	uxtb	r5, r3
   17906:	f04f 0600 	mov.w	r6, #0
   1790a:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
   1790e:	f04f 0300 	mov.w	r3, #0
   17912:	f04f 0400 	mov.w	r4, #0
   17916:	0a0b      	lsrs	r3, r1, #8
   17918:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
   1791c:	0a14      	lsrs	r4, r2, #8
   1791e:	ea83 0b05 	eor.w	fp, r3, r5
   17922:	ea84 0c06 	eor.w	ip, r4, r6
   17926:	f04f 01ff 	mov.w	r1, #255	; 0xff
   1792a:	f04f 0200 	mov.w	r2, #0
   1792e:	ea0b 0301 	and.w	r3, fp, r1
   17932:	ea0c 0402 	and.w	r4, ip, r2
   17936:	e9cd 3404 	strd	r3, r4, [sp, #16]
      crc  = kCrcTable16.crc_table[temp] ^ (crc << 8);
   1793a:	4a19      	ldr	r2, [pc, #100]	; (179a0 <Sd::GetCrc16(unsigned char*, unsigned short)+0xf8>)
   1793c:	9b04      	ldr	r3, [sp, #16]
   1793e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
   17942:	b29d      	uxth	r5, r3
   17944:	f04f 0600 	mov.w	r6, #0
   17948:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
   1794c:	f04f 0b00 	mov.w	fp, #0
   17950:	f04f 0c00 	mov.w	ip, #0
   17954:	ea4f 2c02 	mov.w	ip, r2, lsl #8
   17958:	ea4c 6c11 	orr.w	ip, ip, r1, lsr #24
   1795c:	ea4f 2b01 	mov.w	fp, r1, lsl #8
   17960:	ea8b 0305 	eor.w	r3, fp, r5
   17964:	ea8c 0406 	eor.w	r4, ip, r6
   17968:	e9cd 340a 	strd	r3, r4, [sp, #40]	; 0x28
    for (uint64_t count = 0; count < length; ++count)
   1796c:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   17970:	1c59      	adds	r1, r3, #1
   17972:	f144 0200 	adc.w	r2, r4, #0
   17976:	e9cd 1208 	strd	r1, r2, [sp, #32]
   1797a:	e7b5      	b.n	178e8 <Sd::GetCrc16(unsigned char*, unsigned short)+0x40>
    }

    return static_cast<uint16_t>(crc ^ final_value);
   1797c:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
   17980:	f8bd 3018 	ldrh.w	r3, [sp, #24]
   17984:	4053      	eors	r3, r2
   17986:	b29c      	uxth	r4, r3
   17988:	463b      	mov	r3, r7
   1798a:	4619      	mov	r1, r3
   1798c:	4803      	ldr	r0, [pc, #12]	; (1799c <Sd::GetCrc16(unsigned char*, unsigned short)+0xf4>)
   1798e:	f7fd fb4b 	bl	15028 <__cyg_profile_func_exit>
   17992:	4623      	mov	r3, r4
  }
   17994:	4618      	mov	r0, r3
   17996:	b00c      	add	sp, #48	; 0x30
   17998:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
   1799c:	000178a9 	.word	0x000178a9
   179a0:	0001a77c 	.word	0x0001a77c

000179a4 <Status Wait<Wait(unsigned long long)::{lambda()#1}>(unsigned long long, Wait(unsigned long long)::{lambda()#1})>:
inline Status Wait(uint64_t timeout, F is_done)
   179a4:	e92d 4830 	stmdb	sp!, {r4, r5, fp, lr}
   179a8:	b088      	sub	sp, #32
   179aa:	4675      	mov	r5, lr
   179ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
   179b0:	f88d 2004 	strb.w	r2, [sp, #4]
   179b4:	462b      	mov	r3, r5
   179b6:	4619      	mov	r1, r3
   179b8:	4824      	ldr	r0, [pc, #144]	; (17a4c <Status Wait<Wait(unsigned long long)::{lambda()#1}>(unsigned long long, Wait(unsigned long long)::{lambda()#1})+0xa8>)
   179ba:	f7fd fb21 	bl	15000 <__cyg_profile_func_enter>
  uint64_t timeout_time = 0;
   179be:	f04f 0300 	mov.w	r3, #0
   179c2:	f04f 0400 	mov.w	r4, #0
   179c6:	e9cd 3406 	strd	r3, r4, [sp, #24]
  if (timeout == kMaxWait)
   179ca:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
   179ce:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
   179d2:	bf08      	it	eq
   179d4:	f1b3 3fff 	cmpeq.w	r3, #4294967295	; 0xffffffff
   179d8:	d106      	bne.n	179e8 <Status Wait<Wait(unsigned long long)::{lambda()#1}>(unsigned long long, Wait(unsigned long long)::{lambda()#1})+0x44>
    timeout_time = kMaxWait;
   179da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   179de:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   179e2:	e9cd 3406 	strd	r3, r4, [sp, #24]
   179e6:	e00b      	b.n	17a00 <Status Wait<Wait(unsigned long long)::{lambda()#1}>(unsigned long long, Wait(unsigned long long)::{lambda()#1})+0x5c>
    timeout_time = Milliseconds() + timeout;
   179e8:	f7f9 f88c 	bl	10b04 <Milliseconds()>
   179ec:	460a      	mov	r2, r1
   179ee:	4601      	mov	r1, r0
   179f0:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
   179f4:	eb13 0b01 	adds.w	fp, r3, r1
   179f8:	eb44 0c02 	adc.w	ip, r4, r2
   179fc:	e9cd bc06 	strd	fp, ip, [sp, #24]
  Status status = Status::kTimedOut;
   17a00:	2301      	movs	r3, #1
   17a02:	9305      	str	r3, [sp, #20]
  while (Milliseconds() < timeout_time)
   17a04:	f7f9 f87e 	bl	10b04 <Milliseconds()>
   17a08:	460a      	mov	r2, r1
   17a0a:	4601      	mov	r1, r0
   17a0c:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
   17a10:	42a2      	cmp	r2, r4
   17a12:	bf08      	it	eq
   17a14:	4299      	cmpeq	r1, r3
   17a16:	bf34      	ite	cc
   17a18:	2301      	movcc	r3, #1
   17a1a:	2300      	movcs	r3, #0
   17a1c:	b2db      	uxtb	r3, r3
   17a1e:	2b00      	cmp	r3, #0
   17a20:	d008      	beq.n	17a34 <Status Wait<Wait(unsigned long long)::{lambda()#1}>(unsigned long long, Wait(unsigned long long)::{lambda()#1})+0x90>
    if (is_done())
   17a22:	ab01      	add	r3, sp, #4
   17a24:	4618      	mov	r0, r3
   17a26:	f7fe fdaf 	bl	16588 <Wait(unsigned long long)::{lambda()#1}::operator()() const>
   17a2a:	4603      	mov	r3, r0
   17a2c:	2b00      	cmp	r3, #0
   17a2e:	d0e9      	beq.n	17a04 <Status Wait<Wait(unsigned long long)::{lambda()#1}>(unsigned long long, Wait(unsigned long long)::{lambda()#1})+0x60>
      status = Status::kSuccess;
   17a30:	2300      	movs	r3, #0
   17a32:	9305      	str	r3, [sp, #20]
  return status;
   17a34:	9c05      	ldr	r4, [sp, #20]
   17a36:	462b      	mov	r3, r5
   17a38:	4619      	mov	r1, r3
   17a3a:	4804      	ldr	r0, [pc, #16]	; (17a4c <Status Wait<Wait(unsigned long long)::{lambda()#1}>(unsigned long long, Wait(unsigned long long)::{lambda()#1})+0xa8>)
   17a3c:	f7fd faf4 	bl	15028 <__cyg_profile_func_exit>
   17a40:	4623      	mov	r3, r4
}
   17a42:	4618      	mov	r0, r3
   17a44:	b008      	add	sp, #32
   17a46:	e8bd 8830 	ldmia.w	sp!, {r4, r5, fp, pc}
   17a4a:	bf00      	nop
   17a4c:	000179a5 	.word	0x000179a5

00017a50 <__static_initialization_and_destruction_0(int, int)>:
extern "C" DRESULT disk_ioctl([[maybe_unused]] BYTE drive_number,
                              [[maybe_unused]] BYTE command,
                              [[maybe_unused]] void * buffer)
{
  return RES_PARERR;
}
   17a50:	b530      	push	{r4, r5, lr}
   17a52:	b085      	sub	sp, #20
   17a54:	4674      	mov	r4, lr
   17a56:	9003      	str	r0, [sp, #12]
   17a58:	9102      	str	r1, [sp, #8]
   17a5a:	4623      	mov	r3, r4
   17a5c:	4619      	mov	r1, r3
   17a5e:	480e      	ldr	r0, [pc, #56]	; (17a98 <__static_initialization_and_destruction_0(int, int)+0x48>)
   17a60:	f7fd face 	bl	15000 <__cyg_profile_func_enter>
   17a64:	9b03      	ldr	r3, [sp, #12]
   17a66:	2b01      	cmp	r3, #1
   17a68:	d10e      	bne.n	17a88 <__static_initialization_and_destruction_0(int, int)+0x38>
   17a6a:	9b02      	ldr	r3, [sp, #8]
   17a6c:	f64f 72ff 	movw	r2, #65535	; 0xffff
   17a70:	4293      	cmp	r3, r2
   17a72:	d109      	bne.n	17a88 <__static_initialization_and_destruction_0(int, int)+0x38>
Sd sd_card(Sd::DebugSdCard_t{});
   17a74:	2306      	movs	r3, #6
   17a76:	9301      	str	r3, [sp, #4]
   17a78:	2300      	movs	r3, #0
   17a7a:	9300      	str	r3, [sp, #0]
   17a7c:	2308      	movs	r3, #8
   17a7e:	2201      	movs	r2, #1
   17a80:	4629      	mov	r1, r5
   17a82:	4806      	ldr	r0, [pc, #24]	; (17a9c <__static_initialization_and_destruction_0(int, int)+0x4c>)
   17a84:	f7fe fe40 	bl	16708 <Sd::Sd(Sd::DebugSdCard_t, unsigned char, unsigned char, unsigned char, unsigned char)>
   17a88:	4623      	mov	r3, r4
   17a8a:	4619      	mov	r1, r3
   17a8c:	4802      	ldr	r0, [pc, #8]	; (17a98 <__static_initialization_and_destruction_0(int, int)+0x48>)
   17a8e:	f7fd facb 	bl	15028 <__cyg_profile_func_exit>
}
   17a92:	bf00      	nop
   17a94:	b005      	add	sp, #20
   17a96:	bd30      	pop	{r4, r5, pc}
   17a98:	00017a51 	.word	0x00017a51
   17a9c:	1000140c 	.word	0x1000140c

00017aa0 <_GLOBAL__sub_I_disk_status>:
   17aa0:	b510      	push	{r4, lr}
   17aa2:	4674      	mov	r4, lr
   17aa4:	4623      	mov	r3, r4
   17aa6:	4619      	mov	r1, r3
   17aa8:	4806      	ldr	r0, [pc, #24]	; (17ac4 <_GLOBAL__sub_I_disk_status+0x24>)
   17aaa:	f7fd faa9 	bl	15000 <__cyg_profile_func_enter>
   17aae:	f64f 71ff 	movw	r1, #65535	; 0xffff
   17ab2:	2001      	movs	r0, #1
   17ab4:	f7ff ffcc 	bl	17a50 <__static_initialization_and_destruction_0(int, int)>
   17ab8:	4623      	mov	r3, r4
   17aba:	4619      	mov	r1, r3
   17abc:	4801      	ldr	r0, [pc, #4]	; (17ac4 <_GLOBAL__sub_I_disk_status+0x24>)
   17abe:	f7fd fab3 	bl	15028 <__cyg_profile_func_exit>
   17ac2:	bd10      	pop	{r4, pc}
   17ac4:	00017aa1 	.word	0x00017aa1

00017ac8 <__cxa_pure_virtual>:
   17ac8:	b508      	push	{r3, lr}
   17aca:	f000 f80d 	bl	17ae8 <std::terminate()>

00017ace <__cxxabiv1::__terminate(void (*)())>:
   17ace:	b508      	push	{r3, lr}
   17ad0:	4780      	blx	r0
   17ad2:	f000 fa0f 	bl	17ef4 <abort>
   17ad6:	Address 0x0000000000017ad6 is out of bounds.


00017ad8 <std::get_terminate()>:
   17ad8:	4b02      	ldr	r3, [pc, #8]	; (17ae4 <std::get_terminate()+0xc>)
   17ada:	6818      	ldr	r0, [r3, #0]
   17adc:	f3bf 8f5b 	dmb	ish
   17ae0:	4770      	bx	lr
   17ae2:	bf00      	nop
   17ae4:	100008d4 	.word	0x100008d4

00017ae8 <std::terminate()>:
   17ae8:	b508      	push	{r3, lr}
   17aea:	f7ff fff5 	bl	17ad8 <std::get_terminate()>
   17aee:	f7ff ffee 	bl	17ace <__cxxabiv1::__terminate(void (*)())>
   17af2:	Address 0x0000000000017af2 is out of bounds.


00017af4 <roundf>:
   17af4:	b082      	sub	sp, #8
   17af6:	ed8d 0a01 	vstr	s0, [sp, #4]
   17afa:	9901      	ldr	r1, [sp, #4]
   17afc:	f3c1 53c7 	ubfx	r3, r1, #23, #8
   17b00:	f1a3 027f 	sub.w	r2, r3, #127	; 0x7f
   17b04:	2a16      	cmp	r2, #22
   17b06:	dc0c      	bgt.n	17b22 <roundf+0x2e>
   17b08:	2a00      	cmp	r2, #0
   17b0a:	db10      	blt.n	17b2e <roundf+0x3a>
   17b0c:	4810      	ldr	r0, [pc, #64]	; (17b50 <roundf+0x5c>)
   17b0e:	4110      	asrs	r0, r2
   17b10:	4201      	tst	r1, r0
   17b12:	d008      	beq.n	17b26 <roundf+0x32>
   17b14:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   17b18:	4113      	asrs	r3, r2
   17b1a:	440b      	add	r3, r1
   17b1c:	ea23 0300 	bic.w	r3, r3, r0
   17b20:	e00b      	b.n	17b3a <roundf+0x46>
   17b22:	2a80      	cmp	r2, #128	; 0x80
   17b24:	d00d      	beq.n	17b42 <roundf+0x4e>
   17b26:	ed9d 0a01 	vldr	s0, [sp, #4]
   17b2a:	b002      	add	sp, #8
   17b2c:	4770      	bx	lr
   17b2e:	3201      	adds	r2, #1
   17b30:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
   17b34:	d101      	bne.n	17b3a <roundf+0x46>
   17b36:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
   17b3a:	ee00 3a10 	vmov	s0, r3
   17b3e:	b002      	add	sp, #8
   17b40:	4770      	bx	lr
   17b42:	eddd 7a01 	vldr	s15, [sp, #4]
   17b46:	ee37 0aa7 	vadd.f32	s0, s15, s15
   17b4a:	b002      	add	sp, #8
   17b4c:	4770      	bx	lr
   17b4e:	bf00      	nop
   17b50:	007fffff 	.word	0x007fffff

00017b54 <__aeabi_d2f>:
   17b54:	ea4f 0241 	mov.w	r2, r1, lsl #1
   17b58:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   17b5c:	bf24      	itt	cs
   17b5e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   17b62:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   17b66:	d90d      	bls.n	17b84 <__aeabi_d2f+0x30>
   17b68:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   17b6c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   17b70:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   17b74:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   17b78:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   17b7c:	bf08      	it	eq
   17b7e:	f020 0001 	biceq.w	r0, r0, #1
   17b82:	4770      	bx	lr
   17b84:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   17b88:	d121      	bne.n	17bce <__aeabi_d2f+0x7a>
   17b8a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   17b8e:	bfbc      	itt	lt
   17b90:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   17b94:	4770      	bxlt	lr
   17b96:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   17b9a:	ea4f 5252 	mov.w	r2, r2, lsr #21
   17b9e:	f1c2 0218 	rsb	r2, r2, #24
   17ba2:	f1c2 0c20 	rsb	ip, r2, #32
   17ba6:	fa10 f30c 	lsls.w	r3, r0, ip
   17baa:	fa20 f002 	lsr.w	r0, r0, r2
   17bae:	bf18      	it	ne
   17bb0:	f040 0001 	orrne.w	r0, r0, #1
   17bb4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   17bb8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   17bbc:	fa03 fc0c 	lsl.w	ip, r3, ip
   17bc0:	ea40 000c 	orr.w	r0, r0, ip
   17bc4:	fa23 f302 	lsr.w	r3, r3, r2
   17bc8:	ea4f 0343 	mov.w	r3, r3, lsl #1
   17bcc:	e7cc      	b.n	17b68 <__aeabi_d2f+0x14>
   17bce:	ea7f 5362 	mvns.w	r3, r2, asr #21
   17bd2:	d107      	bne.n	17be4 <__aeabi_d2f+0x90>
   17bd4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   17bd8:	bf1e      	ittt	ne
   17bda:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   17bde:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   17be2:	4770      	bxne	lr
   17be4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   17be8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   17bec:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   17bf0:	4770      	bx	lr
   17bf2:	bf00      	nop

00017bf4 <__aeabi_uldivmod>:
   17bf4:	b953      	cbnz	r3, 17c0c <__aeabi_uldivmod+0x18>
   17bf6:	b94a      	cbnz	r2, 17c0c <__aeabi_uldivmod+0x18>
   17bf8:	2900      	cmp	r1, #0
   17bfa:	bf08      	it	eq
   17bfc:	2800      	cmpeq	r0, #0
   17bfe:	bf1c      	itt	ne
   17c00:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
   17c04:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   17c08:	f000 b972 	b.w	17ef0 <__aeabi_idiv0>
   17c0c:	f1ad 0c08 	sub.w	ip, sp, #8
   17c10:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   17c14:	f000 f806 	bl	17c24 <__udivmoddi4>
   17c18:	f8dd e004 	ldr.w	lr, [sp, #4]
   17c1c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   17c20:	b004      	add	sp, #16
   17c22:	4770      	bx	lr

00017c24 <__udivmoddi4>:
   17c24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   17c28:	9e08      	ldr	r6, [sp, #32]
   17c2a:	4604      	mov	r4, r0
   17c2c:	4688      	mov	r8, r1
   17c2e:	2b00      	cmp	r3, #0
   17c30:	d14b      	bne.n	17cca <__udivmoddi4+0xa6>
   17c32:	428a      	cmp	r2, r1
   17c34:	4615      	mov	r5, r2
   17c36:	d967      	bls.n	17d08 <__udivmoddi4+0xe4>
   17c38:	fab2 f282 	clz	r2, r2
   17c3c:	b14a      	cbz	r2, 17c52 <__udivmoddi4+0x2e>
   17c3e:	f1c2 0720 	rsb	r7, r2, #32
   17c42:	fa01 f302 	lsl.w	r3, r1, r2
   17c46:	fa20 f707 	lsr.w	r7, r0, r7
   17c4a:	4095      	lsls	r5, r2
   17c4c:	ea47 0803 	orr.w	r8, r7, r3
   17c50:	4094      	lsls	r4, r2
   17c52:	ea4f 4e15 	mov.w	lr, r5, lsr #16
   17c56:	0c23      	lsrs	r3, r4, #16
   17c58:	fbb8 f7fe 	udiv	r7, r8, lr
   17c5c:	fa1f fc85 	uxth.w	ip, r5
   17c60:	fb0e 8817 	mls	r8, lr, r7, r8
   17c64:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
   17c68:	fb07 f10c 	mul.w	r1, r7, ip
   17c6c:	4299      	cmp	r1, r3
   17c6e:	d909      	bls.n	17c84 <__udivmoddi4+0x60>
   17c70:	18eb      	adds	r3, r5, r3
   17c72:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
   17c76:	f080 811b 	bcs.w	17eb0 <__udivmoddi4+0x28c>
   17c7a:	4299      	cmp	r1, r3
   17c7c:	f240 8118 	bls.w	17eb0 <__udivmoddi4+0x28c>
   17c80:	3f02      	subs	r7, #2
   17c82:	442b      	add	r3, r5
   17c84:	1a5b      	subs	r3, r3, r1
   17c86:	b2a4      	uxth	r4, r4
   17c88:	fbb3 f0fe 	udiv	r0, r3, lr
   17c8c:	fb0e 3310 	mls	r3, lr, r0, r3
   17c90:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
   17c94:	fb00 fc0c 	mul.w	ip, r0, ip
   17c98:	45a4      	cmp	ip, r4
   17c9a:	d909      	bls.n	17cb0 <__udivmoddi4+0x8c>
   17c9c:	192c      	adds	r4, r5, r4
   17c9e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   17ca2:	f080 8107 	bcs.w	17eb4 <__udivmoddi4+0x290>
   17ca6:	45a4      	cmp	ip, r4
   17ca8:	f240 8104 	bls.w	17eb4 <__udivmoddi4+0x290>
   17cac:	3802      	subs	r0, #2
   17cae:	442c      	add	r4, r5
   17cb0:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
   17cb4:	eba4 040c 	sub.w	r4, r4, ip
   17cb8:	2700      	movs	r7, #0
   17cba:	b11e      	cbz	r6, 17cc4 <__udivmoddi4+0xa0>
   17cbc:	40d4      	lsrs	r4, r2
   17cbe:	2300      	movs	r3, #0
   17cc0:	e9c6 4300 	strd	r4, r3, [r6]
   17cc4:	4639      	mov	r1, r7
   17cc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   17cca:	428b      	cmp	r3, r1
   17ccc:	d909      	bls.n	17ce2 <__udivmoddi4+0xbe>
   17cce:	2e00      	cmp	r6, #0
   17cd0:	f000 80eb 	beq.w	17eaa <__udivmoddi4+0x286>
   17cd4:	2700      	movs	r7, #0
   17cd6:	e9c6 0100 	strd	r0, r1, [r6]
   17cda:	4638      	mov	r0, r7
   17cdc:	4639      	mov	r1, r7
   17cde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   17ce2:	fab3 f783 	clz	r7, r3
   17ce6:	2f00      	cmp	r7, #0
   17ce8:	d147      	bne.n	17d7a <__udivmoddi4+0x156>
   17cea:	428b      	cmp	r3, r1
   17cec:	d302      	bcc.n	17cf4 <__udivmoddi4+0xd0>
   17cee:	4282      	cmp	r2, r0
   17cf0:	f200 80fa 	bhi.w	17ee8 <__udivmoddi4+0x2c4>
   17cf4:	1a84      	subs	r4, r0, r2
   17cf6:	eb61 0303 	sbc.w	r3, r1, r3
   17cfa:	2001      	movs	r0, #1
   17cfc:	4698      	mov	r8, r3
   17cfe:	2e00      	cmp	r6, #0
   17d00:	d0e0      	beq.n	17cc4 <__udivmoddi4+0xa0>
   17d02:	e9c6 4800 	strd	r4, r8, [r6]
   17d06:	e7dd      	b.n	17cc4 <__udivmoddi4+0xa0>
   17d08:	b902      	cbnz	r2, 17d0c <__udivmoddi4+0xe8>
   17d0a:	deff      	udf	#255	; 0xff
   17d0c:	fab2 f282 	clz	r2, r2
   17d10:	2a00      	cmp	r2, #0
   17d12:	f040 808f 	bne.w	17e34 <__udivmoddi4+0x210>
   17d16:	1b49      	subs	r1, r1, r5
   17d18:	ea4f 4e15 	mov.w	lr, r5, lsr #16
   17d1c:	fa1f f885 	uxth.w	r8, r5
   17d20:	2701      	movs	r7, #1
   17d22:	fbb1 fcfe 	udiv	ip, r1, lr
   17d26:	0c23      	lsrs	r3, r4, #16
   17d28:	fb0e 111c 	mls	r1, lr, ip, r1
   17d2c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   17d30:	fb08 f10c 	mul.w	r1, r8, ip
   17d34:	4299      	cmp	r1, r3
   17d36:	d907      	bls.n	17d48 <__udivmoddi4+0x124>
   17d38:	18eb      	adds	r3, r5, r3
   17d3a:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
   17d3e:	d202      	bcs.n	17d46 <__udivmoddi4+0x122>
   17d40:	4299      	cmp	r1, r3
   17d42:	f200 80cd 	bhi.w	17ee0 <__udivmoddi4+0x2bc>
   17d46:	4684      	mov	ip, r0
   17d48:	1a59      	subs	r1, r3, r1
   17d4a:	b2a3      	uxth	r3, r4
   17d4c:	fbb1 f0fe 	udiv	r0, r1, lr
   17d50:	fb0e 1410 	mls	r4, lr, r0, r1
   17d54:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
   17d58:	fb08 f800 	mul.w	r8, r8, r0
   17d5c:	45a0      	cmp	r8, r4
   17d5e:	d907      	bls.n	17d70 <__udivmoddi4+0x14c>
   17d60:	192c      	adds	r4, r5, r4
   17d62:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   17d66:	d202      	bcs.n	17d6e <__udivmoddi4+0x14a>
   17d68:	45a0      	cmp	r8, r4
   17d6a:	f200 80b6 	bhi.w	17eda <__udivmoddi4+0x2b6>
   17d6e:	4618      	mov	r0, r3
   17d70:	eba4 0408 	sub.w	r4, r4, r8
   17d74:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
   17d78:	e79f      	b.n	17cba <__udivmoddi4+0x96>
   17d7a:	f1c7 0c20 	rsb	ip, r7, #32
   17d7e:	40bb      	lsls	r3, r7
   17d80:	fa22 fe0c 	lsr.w	lr, r2, ip
   17d84:	ea4e 0e03 	orr.w	lr, lr, r3
   17d88:	fa01 f407 	lsl.w	r4, r1, r7
   17d8c:	fa20 f50c 	lsr.w	r5, r0, ip
   17d90:	fa21 f30c 	lsr.w	r3, r1, ip
   17d94:	ea4f 481e 	mov.w	r8, lr, lsr #16
   17d98:	4325      	orrs	r5, r4
   17d9a:	fbb3 f9f8 	udiv	r9, r3, r8
   17d9e:	0c2c      	lsrs	r4, r5, #16
   17da0:	fb08 3319 	mls	r3, r8, r9, r3
   17da4:	fa1f fa8e 	uxth.w	sl, lr
   17da8:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
   17dac:	fb09 f40a 	mul.w	r4, r9, sl
   17db0:	429c      	cmp	r4, r3
   17db2:	fa02 f207 	lsl.w	r2, r2, r7
   17db6:	fa00 f107 	lsl.w	r1, r0, r7
   17dba:	d90b      	bls.n	17dd4 <__udivmoddi4+0x1b0>
   17dbc:	eb1e 0303 	adds.w	r3, lr, r3
   17dc0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
   17dc4:	f080 8087 	bcs.w	17ed6 <__udivmoddi4+0x2b2>
   17dc8:	429c      	cmp	r4, r3
   17dca:	f240 8084 	bls.w	17ed6 <__udivmoddi4+0x2b2>
   17dce:	f1a9 0902 	sub.w	r9, r9, #2
   17dd2:	4473      	add	r3, lr
   17dd4:	1b1b      	subs	r3, r3, r4
   17dd6:	b2ad      	uxth	r5, r5
   17dd8:	fbb3 f0f8 	udiv	r0, r3, r8
   17ddc:	fb08 3310 	mls	r3, r8, r0, r3
   17de0:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
   17de4:	fb00 fa0a 	mul.w	sl, r0, sl
   17de8:	45a2      	cmp	sl, r4
   17dea:	d908      	bls.n	17dfe <__udivmoddi4+0x1da>
   17dec:	eb1e 0404 	adds.w	r4, lr, r4
   17df0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   17df4:	d26b      	bcs.n	17ece <__udivmoddi4+0x2aa>
   17df6:	45a2      	cmp	sl, r4
   17df8:	d969      	bls.n	17ece <__udivmoddi4+0x2aa>
   17dfa:	3802      	subs	r0, #2
   17dfc:	4474      	add	r4, lr
   17dfe:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   17e02:	fba0 8902 	umull	r8, r9, r0, r2
   17e06:	eba4 040a 	sub.w	r4, r4, sl
   17e0a:	454c      	cmp	r4, r9
   17e0c:	46c2      	mov	sl, r8
   17e0e:	464b      	mov	r3, r9
   17e10:	d354      	bcc.n	17ebc <__udivmoddi4+0x298>
   17e12:	d051      	beq.n	17eb8 <__udivmoddi4+0x294>
   17e14:	2e00      	cmp	r6, #0
   17e16:	d069      	beq.n	17eec <__udivmoddi4+0x2c8>
   17e18:	ebb1 050a 	subs.w	r5, r1, sl
   17e1c:	eb64 0403 	sbc.w	r4, r4, r3
   17e20:	fa04 fc0c 	lsl.w	ip, r4, ip
   17e24:	40fd      	lsrs	r5, r7
   17e26:	40fc      	lsrs	r4, r7
   17e28:	ea4c 0505 	orr.w	r5, ip, r5
   17e2c:	e9c6 5400 	strd	r5, r4, [r6]
   17e30:	2700      	movs	r7, #0
   17e32:	e747      	b.n	17cc4 <__udivmoddi4+0xa0>
   17e34:	f1c2 0320 	rsb	r3, r2, #32
   17e38:	fa20 f703 	lsr.w	r7, r0, r3
   17e3c:	4095      	lsls	r5, r2
   17e3e:	fa01 f002 	lsl.w	r0, r1, r2
   17e42:	fa21 f303 	lsr.w	r3, r1, r3
   17e46:	ea4f 4e15 	mov.w	lr, r5, lsr #16
   17e4a:	4338      	orrs	r0, r7
   17e4c:	0c01      	lsrs	r1, r0, #16
   17e4e:	fbb3 f7fe 	udiv	r7, r3, lr
   17e52:	fa1f f885 	uxth.w	r8, r5
   17e56:	fb0e 3317 	mls	r3, lr, r7, r3
   17e5a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   17e5e:	fb07 f308 	mul.w	r3, r7, r8
   17e62:	428b      	cmp	r3, r1
   17e64:	fa04 f402 	lsl.w	r4, r4, r2
   17e68:	d907      	bls.n	17e7a <__udivmoddi4+0x256>
   17e6a:	1869      	adds	r1, r5, r1
   17e6c:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
   17e70:	d22f      	bcs.n	17ed2 <__udivmoddi4+0x2ae>
   17e72:	428b      	cmp	r3, r1
   17e74:	d92d      	bls.n	17ed2 <__udivmoddi4+0x2ae>
   17e76:	3f02      	subs	r7, #2
   17e78:	4429      	add	r1, r5
   17e7a:	1acb      	subs	r3, r1, r3
   17e7c:	b281      	uxth	r1, r0
   17e7e:	fbb3 f0fe 	udiv	r0, r3, lr
   17e82:	fb0e 3310 	mls	r3, lr, r0, r3
   17e86:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   17e8a:	fb00 f308 	mul.w	r3, r0, r8
   17e8e:	428b      	cmp	r3, r1
   17e90:	d907      	bls.n	17ea2 <__udivmoddi4+0x27e>
   17e92:	1869      	adds	r1, r5, r1
   17e94:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
   17e98:	d217      	bcs.n	17eca <__udivmoddi4+0x2a6>
   17e9a:	428b      	cmp	r3, r1
   17e9c:	d915      	bls.n	17eca <__udivmoddi4+0x2a6>
   17e9e:	3802      	subs	r0, #2
   17ea0:	4429      	add	r1, r5
   17ea2:	1ac9      	subs	r1, r1, r3
   17ea4:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
   17ea8:	e73b      	b.n	17d22 <__udivmoddi4+0xfe>
   17eaa:	4637      	mov	r7, r6
   17eac:	4630      	mov	r0, r6
   17eae:	e709      	b.n	17cc4 <__udivmoddi4+0xa0>
   17eb0:	4607      	mov	r7, r0
   17eb2:	e6e7      	b.n	17c84 <__udivmoddi4+0x60>
   17eb4:	4618      	mov	r0, r3
   17eb6:	e6fb      	b.n	17cb0 <__udivmoddi4+0x8c>
   17eb8:	4541      	cmp	r1, r8
   17eba:	d2ab      	bcs.n	17e14 <__udivmoddi4+0x1f0>
   17ebc:	ebb8 0a02 	subs.w	sl, r8, r2
   17ec0:	eb69 020e 	sbc.w	r2, r9, lr
   17ec4:	3801      	subs	r0, #1
   17ec6:	4613      	mov	r3, r2
   17ec8:	e7a4      	b.n	17e14 <__udivmoddi4+0x1f0>
   17eca:	4660      	mov	r0, ip
   17ecc:	e7e9      	b.n	17ea2 <__udivmoddi4+0x27e>
   17ece:	4618      	mov	r0, r3
   17ed0:	e795      	b.n	17dfe <__udivmoddi4+0x1da>
   17ed2:	4667      	mov	r7, ip
   17ed4:	e7d1      	b.n	17e7a <__udivmoddi4+0x256>
   17ed6:	4681      	mov	r9, r0
   17ed8:	e77c      	b.n	17dd4 <__udivmoddi4+0x1b0>
   17eda:	3802      	subs	r0, #2
   17edc:	442c      	add	r4, r5
   17ede:	e747      	b.n	17d70 <__udivmoddi4+0x14c>
   17ee0:	f1ac 0c02 	sub.w	ip, ip, #2
   17ee4:	442b      	add	r3, r5
   17ee6:	e72f      	b.n	17d48 <__udivmoddi4+0x124>
   17ee8:	4638      	mov	r0, r7
   17eea:	e708      	b.n	17cfe <__udivmoddi4+0xda>
   17eec:	4637      	mov	r7, r6
   17eee:	e6e9      	b.n	17cc4 <__udivmoddi4+0xa0>

00017ef0 <__aeabi_idiv0>:
   17ef0:	4770      	bx	lr
   17ef2:	bf00      	nop

00017ef4 <abort>:
   17ef4:	b508      	push	{r3, lr}
   17ef6:	2006      	movs	r0, #6
   17ef8:	f000 f858 	bl	17fac <raise>
   17efc:	2001      	movs	r0, #1
   17efe:	f7fc ffdf 	bl	14ec0 <_exit>
   17f02:	Address 0x0000000000017f02 is out of bounds.


00017f04 <__libc_init_array>:
   17f04:	b570      	push	{r4, r5, r6, lr}
   17f06:	4e0d      	ldr	r6, [pc, #52]	; (17f3c <__libc_init_array+0x38>)
   17f08:	4c0d      	ldr	r4, [pc, #52]	; (17f40 <__libc_init_array+0x3c>)
   17f0a:	1ba4      	subs	r4, r4, r6
   17f0c:	10a4      	asrs	r4, r4, #2
   17f0e:	2500      	movs	r5, #0
   17f10:	42a5      	cmp	r5, r4
   17f12:	d109      	bne.n	17f28 <__libc_init_array+0x24>
   17f14:	4e0b      	ldr	r6, [pc, #44]	; (17f44 <__libc_init_array+0x40>)
   17f16:	4c0c      	ldr	r4, [pc, #48]	; (17f48 <__libc_init_array+0x44>)
   17f18:	f7f8 f9f2 	bl	10300 <_init>
   17f1c:	1ba4      	subs	r4, r4, r6
   17f1e:	10a4      	asrs	r4, r4, #2
   17f20:	2500      	movs	r5, #0
   17f22:	42a5      	cmp	r5, r4
   17f24:	d105      	bne.n	17f32 <__libc_init_array+0x2e>
   17f26:	bd70      	pop	{r4, r5, r6, pc}
   17f28:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   17f2c:	4798      	blx	r3
   17f2e:	3501      	adds	r5, #1
   17f30:	e7ee      	b.n	17f10 <__libc_init_array+0xc>
   17f32:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   17f36:	4798      	blx	r3
   17f38:	3501      	adds	r5, #1
   17f3a:	e7f2      	b.n	17f22 <__libc_init_array+0x1e>
   17f3c:	0001030c 	.word	0x0001030c
   17f40:	0001030c 	.word	0x0001030c
   17f44:	0001030c 	.word	0x0001030c
   17f48:	0001031c 	.word	0x0001031c

00017f4c <memset>:
   17f4c:	4402      	add	r2, r0
   17f4e:	4603      	mov	r3, r0
   17f50:	4293      	cmp	r3, r2
   17f52:	d100      	bne.n	17f56 <memset+0xa>
   17f54:	4770      	bx	lr
   17f56:	f803 1b01 	strb.w	r1, [r3], #1
   17f5a:	e7f9      	b.n	17f50 <memset+0x4>

00017f5c <_raise_r>:
   17f5c:	291f      	cmp	r1, #31
   17f5e:	b538      	push	{r3, r4, r5, lr}
   17f60:	4604      	mov	r4, r0
   17f62:	460d      	mov	r5, r1
   17f64:	d904      	bls.n	17f70 <_raise_r+0x14>
   17f66:	2316      	movs	r3, #22
   17f68:	6003      	str	r3, [r0, #0]
   17f6a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   17f6e:	bd38      	pop	{r3, r4, r5, pc}
   17f70:	6c42      	ldr	r2, [r0, #68]	; 0x44
   17f72:	b112      	cbz	r2, 17f7a <_raise_r+0x1e>
   17f74:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
   17f78:	b94b      	cbnz	r3, 17f8e <_raise_r+0x32>
   17f7a:	4620      	mov	r0, r4
   17f7c:	f000 f830 	bl	17fe0 <_getpid_r>
   17f80:	462a      	mov	r2, r5
   17f82:	4601      	mov	r1, r0
   17f84:	4620      	mov	r0, r4
   17f86:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   17f8a:	f000 b817 	b.w	17fbc <_kill_r>
   17f8e:	2b01      	cmp	r3, #1
   17f90:	d00a      	beq.n	17fa8 <_raise_r+0x4c>
   17f92:	1c59      	adds	r1, r3, #1
   17f94:	d103      	bne.n	17f9e <_raise_r+0x42>
   17f96:	2316      	movs	r3, #22
   17f98:	6003      	str	r3, [r0, #0]
   17f9a:	2001      	movs	r0, #1
   17f9c:	e7e7      	b.n	17f6e <_raise_r+0x12>
   17f9e:	2400      	movs	r4, #0
   17fa0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
   17fa4:	4628      	mov	r0, r5
   17fa6:	4798      	blx	r3
   17fa8:	2000      	movs	r0, #0
   17faa:	e7e0      	b.n	17f6e <_raise_r+0x12>

00017fac <raise>:
   17fac:	4b02      	ldr	r3, [pc, #8]	; (17fb8 <raise+0xc>)
   17fae:	4601      	mov	r1, r0
   17fb0:	6818      	ldr	r0, [r3, #0]
   17fb2:	f7ff bfd3 	b.w	17f5c <_raise_r>
   17fb6:	bf00      	nop
   17fb8:	100008d8 	.word	0x100008d8

00017fbc <_kill_r>:
   17fbc:	b538      	push	{r3, r4, r5, lr}
   17fbe:	4c07      	ldr	r4, [pc, #28]	; (17fdc <_kill_r+0x20>)
   17fc0:	2300      	movs	r3, #0
   17fc2:	4605      	mov	r5, r0
   17fc4:	4608      	mov	r0, r1
   17fc6:	4611      	mov	r1, r2
   17fc8:	6023      	str	r3, [r4, #0]
   17fca:	f7fc ff97 	bl	14efc <_kill>
   17fce:	1c43      	adds	r3, r0, #1
   17fd0:	d102      	bne.n	17fd8 <_kill_r+0x1c>
   17fd2:	6823      	ldr	r3, [r4, #0]
   17fd4:	b103      	cbz	r3, 17fd8 <_kill_r+0x1c>
   17fd6:	602b      	str	r3, [r5, #0]
   17fd8:	bd38      	pop	{r3, r4, r5, pc}
   17fda:	bf00      	nop
   17fdc:	10001474 	.word	0x10001474

00017fe0 <_getpid_r>:
   17fe0:	f7fc bf7a 	b.w	14ed8 <_getpid>
   17fe4:	63617453 	.word	0x63617453
   17fe8:	6544206b 	.word	0x6544206b
   17fec:	20687470 	.word	0x20687470
   17ff0:	7a25203d 	.word	0x7a25203d
   17ff4:	00000a64 	.word	0x00000a64
   17ff8:	25232020 	.word	0x25232020
   17ffc:	203a757a 	.word	0x203a757a
   18000:	70257830 	.word	0x70257830
   18004:	0000000a 	.word	0x0000000a
   18008:	6e75520a 	.word	0x6e75520a
   1800c:	6874203a 	.word	0x6874203a
   18010:	6f662065 	.word	0x6f662065
   18014:	776f6c6c 	.word	0x776f6c6c
   18018:	20676e69 	.word	0x20676e69
   1801c:	6d6d6f63 	.word	0x6d6d6f63
   18020:	20646e61 	.word	0x20646e61
   18024:	79206e69 	.word	0x79206e69
   18028:	2072756f 	.word	0x2072756f
   1802c:	6a6f7270 	.word	0x6a6f7270
   18030:	20746365 	.word	0x20746365
   18034:	65726964 	.word	0x65726964
   18038:	726f7463 	.word	0x726f7463
   1803c:	00000079 	.word	0x00000079
   18040:	1b20200a 	.word	0x1b20200a
   18044:	333b315b 	.word	0x333b315b
   18048:	616d6d37 	.word	0x616d6d37
   1804c:	7320656b 	.word	0x7320656b
   18050:	6b636174 	.word	0x6b636174
   18054:	63617274 	.word	0x63617274
   18058:	73252d65 	.word	0x73252d65
   1805c:	41525420 	.word	0x41525420
   18060:	3d534543 	.word	0x3d534543
   18064:	00000022 	.word	0x00000022
   18068:	70257830 	.word	0x70257830
   1806c:	00000000 	.word	0x00000000
   18070:	25783020 	.word	0x25783020
   18074:	00000070 	.word	0x00000070
   18078:	5b1b0a22 	.word	0x5b1b0a22
   1807c:	00006d30 	.word	0x00006d30
   18080:	73696854 	.word	0x73696854
   18084:	6c697720 	.word	0x6c697720
   18088:	6572206c 	.word	0x6572206c
   1808c:	74726f70 	.word	0x74726f70
   18090:	65687420 	.word	0x65687420
   18094:	6c696620 	.word	0x6c696620
   18098:	6e612065 	.word	0x6e612065
   1809c:	696c2064 	.word	0x696c2064
   180a0:	6e20656e 	.word	0x6e20656e
   180a4:	65626d75 	.word	0x65626d75
   180a8:	68742072 	.word	0x68742072
   180ac:	6c207461 	.word	0x6c207461
   180b0:	74206465 	.word	0x74206465
   180b4:	6874206f 	.word	0x6874206f
   180b8:	66207369 	.word	0x66207369
   180bc:	74636e75 	.word	0x74636e75
   180c0:	206e6f69 	.word	0x206e6f69
   180c4:	6e696562 	.word	0x6e696562
   180c8:	61632067 	.word	0x61632067
   180cc:	64656c6c 	.word	0x64656c6c
   180d0:	0000002e 	.word	0x0000002e
   180d4:	6c707061 	.word	0x6c707061
   180d8:	74616369 	.word	0x74616369
   180dc:	006e6f69 	.word	0x006e6f69
   180e0:	33345b1b 	.word	0x33345b1b
   180e4:	4157206d 	.word	0x4157206d
   180e8:	4e494e52 	.word	0x4e494e52
   180ec:	305b1b47 	.word	0x305b1b47
   180f0:	6d34393b 	.word	0x6d34393b
   180f4:	3a73253a 	.word	0x3a73253a
   180f8:	3b305b1b 	.word	0x3b305b1b
   180fc:	256d3239 	.word	0x256d3239
   18100:	5b1b3a73 	.word	0x5b1b3a73
   18104:	33393b30 	.word	0x33393b30
   18108:	3e64256d 	.word	0x3e64256d
   1810c:	305b1b20 	.word	0x305b1b20
   18110:	6d37333b 	.word	0x6d37333b
   18114:	74726f50 	.word	0x74726f50
   18118:	20642520 	.word	0x20642520
   1811c:	6e6e6163 	.word	0x6e6e6163
   18120:	6220746f 	.word	0x6220746f
   18124:	73752065 	.word	0x73752065
   18128:	66206465 	.word	0x66206465
   1812c:	4520726f 	.word	0x4520726f
   18130:	72657478 	.word	0x72657478
   18134:	206c616e 	.word	0x206c616e
   18138:	65746e49 	.word	0x65746e49
   1813c:	70757272 	.word	0x70757272
   18140:	202e7374 	.word	0x202e7374
   18144:	6465654e 	.word	0x6465654e
   18148:	206f7420 	.word	0x206f7420
   1814c:	20657375 	.word	0x20657375
   18150:	4f495047 	.word	0x4f495047
   18154:	206e6f20 	.word	0x206e6f20
   18158:	74726f50 	.word	0x74726f50
   1815c:	6f203020 	.word	0x6f203020
   18160:	2e322072 	.word	0x2e322072
   18164:	6d305b1b 	.word	0x6d305b1b
   18168:	6d305b1b 	.word	0x6d305b1b
   1816c:	0000000a 	.word	0x0000000a
   18170:	33345b1b 	.word	0x33345b1b
   18174:	4157206d 	.word	0x4157206d
   18178:	4e494e52 	.word	0x4e494e52
   1817c:	305b1b47 	.word	0x305b1b47
   18180:	6d34393b 	.word	0x6d34393b
   18184:	3a73253a 	.word	0x3a73253a
   18188:	3b305b1b 	.word	0x3b305b1b
   1818c:	256d3239 	.word	0x256d3239
   18190:	5b1b3a73 	.word	0x5b1b3a73
   18194:	33393b30 	.word	0x33393b30
   18198:	3e64256d 	.word	0x3e64256d
   1819c:	305b1b20 	.word	0x305b1b20
   181a0:	6d37333b 	.word	0x6d37333b
   181a4:	65676445 	.word	0x65676445
   181a8:	20642520 	.word	0x20642520
   181ac:	6e6e6163 	.word	0x6e6e6163
   181b0:	6220746f 	.word	0x6220746f
   181b4:	73752065 	.word	0x73752065
   181b8:	66206465 	.word	0x66206465
   181bc:	4520726f 	.word	0x4520726f
   181c0:	72657478 	.word	0x72657478
   181c4:	206c616e 	.word	0x206c616e
   181c8:	65746e49 	.word	0x65746e49
   181cc:	70757272 	.word	0x70757272
   181d0:	4e2e7374 	.word	0x4e2e7374
   181d4:	20646565 	.word	0x20646565
   181d8:	75206f74 	.word	0x75206f74
   181dc:	61206573 	.word	0x61206573
   181e0:	73697220 	.word	0x73697220
   181e4:	2c676e69 	.word	0x2c676e69
   181e8:	6c616620 	.word	0x6c616620
   181ec:	676e696c 	.word	0x676e696c
   181f0:	726f202c 	.word	0x726f202c
   181f4:	746f6220 	.word	0x746f6220
   181f8:	6f632068 	.word	0x6f632068
   181fc:	6769666e 	.word	0x6769666e
   18200:	74617275 	.word	0x74617275
   18204:	2e6e6f69 	.word	0x2e6e6f69
   18208:	6d305b1b 	.word	0x6d305b1b
   1820c:	0000000a 	.word	0x0000000a
   18210:	31345b1b 	.word	0x31345b1b
   18214:	4952436d 	.word	0x4952436d
   18218:	41434954 	.word	0x41434954
   1821c:	305b1b4c 	.word	0x305b1b4c
   18220:	6d34393b 	.word	0x6d34393b
   18224:	3a73253a 	.word	0x3a73253a
   18228:	3b305b1b 	.word	0x3b305b1b
   1822c:	256d3239 	.word	0x256d3239
   18230:	5b1b3a73 	.word	0x5b1b3a73
   18234:	33393b30 	.word	0x33393b30
   18238:	3e64256d 	.word	0x3e64256d
   1823c:	305b1b20 	.word	0x305b1b20
   18240:	6d37333b 	.word	0x6d37333b
   18244:	65737341 	.word	0x65737341
   18248:	6f697472 	.word	0x6f697472
   1824c:	6146206e 	.word	0x6146206e
   18250:	72756c69 	.word	0x72756c69
   18254:	43202c65 	.word	0x43202c65
   18258:	69646e6f 	.word	0x69646e6f
   1825c:	6e6f6974 	.word	0x6e6f6974
   18260:	73655420 	.word	0x73655420
   18264:	3a646574 	.word	0x3a646574
   18268:	65702820 	.word	0x65702820
   1826c:	68706972 	.word	0x68706972
   18270:	6c617265 	.word	0x6c617265
   18274:	7669645f 	.word	0x7669645f
   18278:	72656469 	.word	0x72656469
   1827c:	203d3c20 	.word	0x203d3c20
   18280:	200a2934 	.word	0x200a2934
   18284:	20202020 	.word	0x20202020
   18288:	20202020 	.word	0x20202020
   1828c:	76694420 	.word	0x76694420
   18290:	72656469 	.word	0x72656469
   18294:	73756d20 	.word	0x73756d20
   18298:	74276e74 	.word	0x74276e74
   1829c:	63786520 	.word	0x63786520
   182a0:	20646565 	.word	0x20646565
   182a4:	5b1b3233 	.word	0x5b1b3233
   182a8:	5b1b6d30 	.word	0x5b1b6d30
   182ac:	000a6d30 	.word	0x000a6d30
   182b0:	6972500a 	.word	0x6972500a
   182b4:	6e69746e 	.word	0x6e69746e
   182b8:	74532067 	.word	0x74532067
   182bc:	206b6361 	.word	0x206b6361
   182c0:	63617254 	.word	0x63617254
   182c4:	000a3a65 	.word	0x000a3a65
   182c8:	31345b1b 	.word	0x31345b1b
   182cc:	4952436d 	.word	0x4952436d
   182d0:	41434954 	.word	0x41434954
   182d4:	305b1b4c 	.word	0x305b1b4c
   182d8:	6d34393b 	.word	0x6d34393b
   182dc:	3a73253a 	.word	0x3a73253a
   182e0:	3b305b1b 	.word	0x3b305b1b
   182e4:	256d3239 	.word	0x256d3239
   182e8:	5b1b3a73 	.word	0x5b1b3a73
   182ec:	33393b30 	.word	0x33393b30
   182f0:	3e64256d 	.word	0x3e64256d
   182f4:	305b1b20 	.word	0x305b1b20
   182f8:	6d37333b 	.word	0x6d37333b
   182fc:	65737341 	.word	0x65737341
   18300:	6f697472 	.word	0x6f697472
   18304:	6146206e 	.word	0x6146206e
   18308:	72756c69 	.word	0x72756c69
   1830c:	43202c65 	.word	0x43202c65
   18310:	69646e6f 	.word	0x69646e6f
   18314:	6e6f6974 	.word	0x6e6f6974
   18318:	73655420 	.word	0x73655420
   1831c:	3a646574 	.word	0x3a646574
   18320:	65642820 	.word	0x65642820
   18324:	65726973 	.word	0x65726973
   18328:	70735f64 	.word	0x70735f64
   1832c:	5f646565 	.word	0x5f646565
   18330:	6d5f6e69 	.word	0x6d5f6e69
   18334:	3c207a68 	.word	0x3c207a68
   18338:	34383320 	.word	0x34383320
   1833c:	20262620 	.word	0x20262620
   18340:	69736564 	.word	0x69736564
   18344:	5f646572 	.word	0x5f646572
   18348:	65657073 	.word	0x65657073
   1834c:	6e695f64 	.word	0x6e695f64
   18350:	7a686d5f 	.word	0x7a686d5f
   18354:	31203e20 	.word	0x31203e20
   18358:	200a2932 	.word	0x200a2932
   1835c:	20202020 	.word	0x20202020
   18360:	20202020 	.word	0x20202020
   18364:	65724620 	.word	0x65724620
   18368:	6e657571 	.word	0x6e657571
   1836c:	6d207963 	.word	0x6d207963
   18370:	20747375 	.word	0x20747375
   18374:	6c206562 	.word	0x6c206562
   18378:	7265776f 	.word	0x7265776f
   1837c:	61687420 	.word	0x61687420
   18380:	3833206e 	.word	0x3833206e
   18384:	484d2034 	.word	0x484d2034
   18388:	646e617a 	.word	0x646e617a
   1838c:	65726720 	.word	0x65726720
   18390:	72657461 	.word	0x72657461
   18394:	61687420 	.word	0x61687420
   18398:	726f206e 	.word	0x726f206e
   1839c:	75716520 	.word	0x75716520
   183a0:	74206c61 	.word	0x74206c61
   183a4:	3231206f 	.word	0x3231206f
   183a8:	7a484d20 	.word	0x7a484d20
   183ac:	6d305b1b 	.word	0x6d305b1b
   183b0:	6d305b1b 	.word	0x6d305b1b
   183b4:	0000000a 	.word	0x0000000a
   183b8:	31345b1b 	.word	0x31345b1b
   183bc:	4952436d 	.word	0x4952436d
   183c0:	41434954 	.word	0x41434954
   183c4:	305b1b4c 	.word	0x305b1b4c
   183c8:	6d34393b 	.word	0x6d34393b
   183cc:	3a73253a 	.word	0x3a73253a
   183d0:	3b305b1b 	.word	0x3b305b1b
   183d4:	256d3239 	.word	0x256d3239
   183d8:	5b1b3a73 	.word	0x5b1b3a73
   183dc:	33393b30 	.word	0x33393b30
   183e0:	3e64256d 	.word	0x3e64256d
   183e4:	305b1b20 	.word	0x305b1b20
   183e8:	6d37333b 	.word	0x6d37333b
   183ec:	65737341 	.word	0x65737341
   183f0:	6f697472 	.word	0x6f697472
   183f4:	6146206e 	.word	0x6146206e
   183f8:	72756c69 	.word	0x72756c69
   183fc:	43202c65 	.word	0x43202c65
   18400:	69646e6f 	.word	0x69646e6f
   18404:	6e6f6974 	.word	0x6e6f6974
   18408:	73655420 	.word	0x73655420
   1840c:	3a646574 	.word	0x3a646574
   18410:	69642820 	.word	0x69642820
   18414:	65646976 	.word	0x65646976
   18418:	61765f72 	.word	0x61765f72
   1841c:	2065756c 	.word	0x2065756c
   18420:	2938203c 	.word	0x2938203c
   18424:	2020200a 	.word	0x2020200a
   18428:	20202020 	.word	0x20202020
   1842c:	50202020 	.word	0x50202020
   18430:	64204c4c 	.word	0x64204c4c
   18434:	64697669 	.word	0x64697669
   18438:	76207265 	.word	0x76207265
   1843c:	65756c61 	.word	0x65756c61
   18440:	6e657720 	.word	0x6e657720
   18444:	756f2074 	.word	0x756f2074
   18448:	666f2074 	.word	0x666f2074
   1844c:	756f6220 	.word	0x756f6220
   18450:	1b73646e 	.word	0x1b73646e
   18454:	1b6d305b 	.word	0x1b6d305b
   18458:	0a6d305b 	.word	0x0a6d305b
   1845c:	00000000 	.word	0x00000000
   18460:	31345b1b 	.word	0x31345b1b
   18464:	4952436d 	.word	0x4952436d
   18468:	41434954 	.word	0x41434954
   1846c:	305b1b4c 	.word	0x305b1b4c
   18470:	6d34393b 	.word	0x6d34393b
   18474:	3a73253a 	.word	0x3a73253a
   18478:	3b305b1b 	.word	0x3b305b1b
   1847c:	256d3239 	.word	0x256d3239
   18480:	5b1b3a73 	.word	0x5b1b3a73
   18484:	33393b30 	.word	0x33393b30
   18488:	3e64256d 	.word	0x3e64256d
   1848c:	305b1b20 	.word	0x305b1b20
   18490:	6d37333b 	.word	0x6d37333b
   18494:	65737341 	.word	0x65737341
   18498:	6f697472 	.word	0x6f697472
   1849c:	6146206e 	.word	0x6146206e
   184a0:	72756c69 	.word	0x72756c69
   184a4:	43202c65 	.word	0x43202c65
   184a8:	69646e6f 	.word	0x69646e6f
   184ac:	6e6f6974 	.word	0x6e6f6974
   184b0:	73655420 	.word	0x73655420
   184b4:	3a646574 	.word	0x3a646574
   184b8:	61662820 	.word	0x61662820
   184bc:	2965736c 	.word	0x2965736c
   184c0:	2020200a 	.word	0x2020200a
   184c4:	20202020 	.word	0x20202020
   184c8:	50202020 	.word	0x50202020
   184cc:	6c204c4c 	.word	0x6c204c4c
   184d0:	206b636f 	.word	0x206b636f
   184d4:	6c756f63 	.word	0x6c756f63
   184d8:	6f6e2064 	.word	0x6f6e2064
   184dc:	65622074 	.word	0x65622074
   184e0:	74736520 	.word	0x74736520
   184e4:	696c6261 	.word	0x696c6261
   184e8:	64656873 	.word	0x64656873
   184ec:	66656220 	.word	0x66656220
   184f0:	2065726f 	.word	0x2065726f
   184f4:	656d6974 	.word	0x656d6974
   184f8:	1b74756f 	.word	0x1b74756f
   184fc:	1b6d305b 	.word	0x1b6d305b
   18500:	0a6d305b 	.word	0x0a6d305b
   18504:	00000000 	.word	0x00000000
   18508:	31345b1b 	.word	0x31345b1b
   1850c:	4952436d 	.word	0x4952436d
   18510:	41434954 	.word	0x41434954
   18514:	305b1b4c 	.word	0x305b1b4c
   18518:	6d34393b 	.word	0x6d34393b
   1851c:	3a73253a 	.word	0x3a73253a
   18520:	3b305b1b 	.word	0x3b305b1b
   18524:	256d3239 	.word	0x256d3239
   18528:	5b1b3a73 	.word	0x5b1b3a73
   1852c:	33393b30 	.word	0x33393b30
   18530:	3e64256d 	.word	0x3e64256d
   18534:	305b1b20 	.word	0x305b1b20
   18538:	6d37333b 	.word	0x6d37333b
   1853c:	65737341 	.word	0x65737341
   18540:	6f697472 	.word	0x6f697472
   18544:	6146206e 	.word	0x6146206e
   18548:	72756c69 	.word	0x72756c69
   1854c:	43202c65 	.word	0x43202c65
   18550:	69646e6f 	.word	0x69646e6f
   18554:	6e6f6974 	.word	0x6e6f6974
   18558:	73655420 	.word	0x73655420
   1855c:	3a646574 	.word	0x3a646574
   18560:	70632820 	.word	0x70632820
   18564:	69645f75 	.word	0x69645f75
   18568:	65646976 	.word	0x65646976
   1856c:	203c2072 	.word	0x203c2072
   18570:	0a293233 	.word	0x0a293233
   18574:	20202020 	.word	0x20202020
   18578:	20202020 	.word	0x20202020
   1857c:	69442020 	.word	0x69442020
   18580:	65646976 	.word	0x65646976
   18584:	756d2072 	.word	0x756d2072
   18588:	276e7473 	.word	0x276e7473
   1858c:	78652074 	.word	0x78652074
   18590:	64656563 	.word	0x64656563
   18594:	1b323320 	.word	0x1b323320
   18598:	1b6d305b 	.word	0x1b6d305b
   1859c:	0a6d305b 	.word	0x0a6d305b
   185a0:	00000000 	.word	0x00000000
   185a4:	7474654c 	.word	0x7474654c
   185a8:	73207265 	.word	0x73207265
   185ac:	0a746e65 	.word	0x0a746e65
   185b0:	00000000 	.word	0x00000000
   185b4:	75736552 	.word	0x75736552
   185b8:	3d20746c 	.word	0x3d20746c
   185bc:	0a782520 	.word	0x0a782520
   185c0:	ffffff00 	.word	0xffffff00

000185c4 <Gpio::ValidPortCheck()::file>:
   185c4:	6f697067 7070682e ffffff00              gpio.hpp....

000185d0 <Gpio::SetInterruptEdge(GpioInterface::Edge)::file>:
   185d0:	6f697067 7070682e ffffff00              gpio.hpp....

000185dc <Gpio::ClearInterruptEdge(GpioInterface::Edge)::file>:
   185dc:	6f697067 7070682e ffffff00              gpio.hpp....

000185e8 <Lpc40xxSystemController::SetPeripheralClockDivider(unsigned char)::file>:
   185e8:	74737973 635f6d65 72746e6f 656c6c6f     system_controlle
   185f8:	70682e72 ffff0070                       r.hpp...

00018600 <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)::file>:
   18600:	74737973 635f6d65 72746e6f 656c6c6f     system_controlle
   18610:	70682e72 ffff0070                       r.hpp...

00018618 <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)::file>:
   18618:	74737973 635f6d65 72746e6f 656c6c6f     system_controlle
   18628:	70682e72 ffff0070                       r.hpp...

00018630 <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)::file>:
   18630:	74737973 635f6d65 72746e6f 656c6c6f     system_controlle
   18640:	70682e72 ffff0070                       r.hpp...

00018648 <Lpc40xxSystemController::SetCpuClockDivider(unsigned char)::file>:
   18648:	74737973 635f6d65 72746e6f 656c6c6f     system_controlle
   18658:	70682e72 ffff0070                       r.hpp...

00018660 <Ssp::kPinSelect>:
   18660:	ff040202                                ....

00018664 <Ssp::kSspPinMatrix>:
   18664:	00018864 00001200 00018864 00001100     d.......d.......
   18674:	00018864 00000f00 00018864 00000900     d.......d.......
   18684:	00018864 00000800 00018864 00000700     d.......d.......
   18694:	00018864 00000101 00018864 00000401     d.......d.......
   186a4:	00018864 00000001                       d.......

000186ac <Ssp::kPowerBit>:
   186ac:	00000015 0000000a 00000014              ............

000186b8 <vtable for Ssd1306>:
	...
   186c0:	0001280d 00012839 00012865 00012a4d     .(..9(..e(..M*..
   186d0:	000126cd 000126f5 00012b25 00012b5d     .&...&..%+..]+..
   186e0:	00012bf1                                .+..

000186e4 <vtable for PixelDisplayInterface>:
	...
   186ec:	00017ac9 00017ac9 00017ac9 00017ac9     .z...z...z...z..
   186fc:	000126cd 000126f5 00017ac9 00017ac9     .&...&...z...z..
   1870c:	0001271d                                .'..

00018710 <vtable for Ssp>:
	...
   18718:	00011c41 00011d25 00011d9d 00011e09     A...%...........
   18728:	00011ef5 00012101 00012261 0001244d     .....!..a"..M$..
   18738:	fffffffc 00000000 000114e1 00011571     ............q...
   18748:	000115c9 000115e1 000115f5 00011635     ............5...
   18758:	00011665                                e...

0001875c <vtable for SspInterface>:
	...
   18764:	00017ac9 00017ac9 00017ac9 00017ac9     .z...z...z...z..
   18774:	00017ac9 00017ac9 00017ac9 00017ac9     .z...z...z...z..

00018784 <vtable for Lpc40xxSystemController>:
	...
   1878c:	000114e1 00011571 000115c9 000115e1     ....q...........
   1879c:	000115f5 00011635 00011665              ....5...e...

000187a8 <vtable for SystemControllerInterface>:
	...
   187b0:	00017ac9 00017ac9 00017ac9 00017ac9     .z...z...z...z..
   187c0:	00017ac9 00017ac9 00017ac9              .z...z...z..

000187cc <vtable for Gpio>:
	...
   187d4:	00010bf9 00010c75 00010cf1 00010d35     ....u.......5...
   187e4:	00010d99 00010dfd 00010e41 00010ead     ........A.......
   187f4:	00010f25 00010f95 0001122d 00011275     %.......-...u...
   18804:	0001103d 00011099 0001111d 000111a5     =...............

00018814 <vtable for GpioInterface>:
	...
   1881c:	00017ac9 00017ac9 00017ac9 00017ac9     .z...z...z...z..
   1882c:	00017ac9 00017ac9 00017ac9 00017ac9     .z...z...z...z..
   1883c:	00017ac9 00017ac9 00017ac9 00017ac9     .z...z...z...z..
   1884c:	00017ac9 00017ac9 00017ac9 00017ac9     .z...z...z...z..

0001885c <vtable for Pin>:
	...
   18864:	000103f5 0001046d 000104ed 00010561     ....m.......a...
   18874:	000105d5 00010651 000106cd 00010741     ....Q.......A...
   18884:	000107bd 00010831 000108a5 0001097d     ....1.......}...
   18894:	000109a9                                ....

00018898 <vtable for PinInterface>:
	...
   188a0:	00017ac9 00017ac9 00017ac9 00017ac9     .z...z...z...z..
   188b0:	00017ac9 00017ac9 00017ac9 00017ac9     .z...z...z...z..
   188c0:	00017ac9 00017ac9 00017ac9 00017ac9     .z...z...z...z..
   188d0:	00017ac9                                .z..

000188d4 <Lpc40xxSystemController::SetPeripheralClockDivider(unsigned char)::__PRETTY_FUNCTION__>:
   188d4:	74726976 206c6175 64696f76 63704c20     virtual void Lpc
   188e4:	78783034 74737953 6f436d65 6f72746e     40xxSystemContro
   188f4:	72656c6c 65533a3a 72655074 65687069     ller::SetPeriphe
   18904:	436c6172 6b636f6c 69766944 28726564     ralClockDivider(
   18914:	746e6975 29745f38 ffffff00              uint8_t)....

00018920 <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)::__PRETTY_FUNCTION__>:
   18920:	746e6975 745f3233 63704c20 78783034     uint32_t Lpc40xx
   18930:	74737953 6f436d65 6f72746e 72656c6c     SystemController
   18940:	65533a3a 69614d74 6c6c506e 63704c28     ::SetMainPll(Lpc
   18950:	78783034 74737953 6f436d65 6f72746e     40xxSystemContro
   18960:	72656c6c 6c503a3a 706e496c 202c7475     ller::PllInput, 
   18970:	746e6975 745f3631 ffff0029              uint16_t)...

0001897c <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)::__PRETTY_FUNCTION__>:
   1897c:	746e6975 745f3233 63704c20 78783034     uint32_t Lpc40xx
   1898c:	74737953 6f436d65 6f72746e 72656c6c     SystemController
   1899c:	61433a3a 6c75636c 50657461 4c286c6c     ::CalculatePll(L
   189ac:	30346370 79537878 6d657473 746e6f43     pc40xxSystemCont
   189bc:	6c6c6f72 3a3a7265 496c6c50 7475706e     roller::PllInput
   189cc:	6975202c 3631746e 0029745f              , uint16_t).

000189d8 <Lpc40xxSystemController::SetCpuClockDivider(unsigned char)::__PRETTY_FUNCTION__>:
   189d8:	64696f76 63704c20 78783034 74737953     void Lpc40xxSyst
   189e8:	6f436d65 6f72746e 72656c6c 65533a3a     emController::Se
   189f8:	75704374 636f6c43 7669446b 72656469     tCpuClockDivider
   18a08:	6e697528 745f3874 ffff0029              (uint8_t)...

00018a14 <Gpio::ClearInterruptEdge(GpioInterface::Edge)::__PRETTY_FUNCTION__>:
   18a14:	74726976 206c6175 64696f76 69704720     virtual void Gpi
   18a24:	433a3a6f 7261656c 65746e49 70757272     o::ClearInterrup
   18a34:	67644574 70472865 6e496f69 66726574     tEdge(GpioInterf
   18a44:	3a656361 6764453a ff002965              ace::Edge)..

00018a50 <Gpio::ValidPortCheck()::__PRETTY_FUNCTION__>:
   18a50:	6c6f6f62 69704720 563a3a6f 64696c61     bool Gpio::Valid
   18a60:	74726f50 63656843 0029286b              PortCheck().

00018a6c <Gpio::SetInterruptEdge(GpioInterface::Edge)::__PRETTY_FUNCTION__>:
   18a6c:	74726976 206c6175 64696f76 69704720     virtual void Gpi
   18a7c:	533a3a6f 6e497465 72726574 45747075     o::SetInterruptE
   18a8c:	28656764 6f697047 65746e49 63616672     dge(GpioInterfac
   18a9c:	453a3a65 29656764 ffffff00 63617453     e::Edge)....Stac
   18aac:	6544206b 20687470 7a25203d 00000a64     k Depth = %zd...
   18abc:	25232020 203a757a 70257830 0000000a       #%zu: 0x%p....
   18acc:	6e75520a 6874203a 6f662065 776f6c6c     .Run: the follow
   18adc:	20676e69 6d6d6f63 20646e61 79206e69     ing command in y
   18aec:	2072756f 6a6f7270 20746365 65726964     our project dire
   18afc:	726f7463 00000079 1b20200a 333b315b     ctory....  .[1;3
   18b0c:	616d6d37 7320656b 6b636174 63617274     7mmake stacktrac
   18b1c:	73252d65 41525420 3d534543 00000022     e-%s TRACES="...
   18b2c:	70257830 00000000 25783020 00000070     0x%p.... 0x%p...
   18b3c:	5b1b0a22 00006d30 73696854 6c697720     "..[0m..This wil
   18b4c:	6572206c 74726f70 65687420 6c696620     l report the fil
   18b5c:	6e612065 696c2064 6e20656e 65626d75     e and line numbe
   18b6c:	68742072 6c207461 74206465 6874206f     r that led to th
   18b7c:	66207369 74636e75 206e6f69 6e696562     is function bein
   18b8c:	61632067 64656c6c 0000002e 6c707061     g called....appl
   18b9c:	74616369 006e6f69 33345b1b 4157206d     ication..[43m WA
   18bac:	4e494e52 305b1b47 6d34393b 3a73253a     RNING.[0;94m:%s:
   18bbc:	3b305b1b 256d3239 5b1b3a73 33393b30     .[0;92m%s:.[0;93
   18bcc:	3e64256d 305b1b20 6d37333b 74726f50     m%d> .[0;37mPort
   18bdc:	20642520 6e6e6163 6220746f 73752065      %d cannot be us
   18bec:	66206465 4520726f 72657478 206c616e     ed for External 
   18bfc:	65746e49 70757272 202e7374 6465654e     Interrupts. Need
   18c0c:	206f7420 20657375 4f495047 206e6f20      to use GPIO on 
   18c1c:	74726f50 6f203020 2e322072 6d305b1b     Port 0 or 2..[0m
   18c2c:	6d305b1b 0000000a 33345b1b 4157206d     .[0m.....[43m WA
   18c3c:	4e494e52 305b1b47 6d34393b 3a73253a     RNING.[0;94m:%s:
   18c4c:	3b305b1b 256d3239 5b1b3a73 33393b30     .[0;92m%s:.[0;93
   18c5c:	3e64256d 305b1b20 6d37333b 65676445     m%d> .[0;37mEdge
   18c6c:	20642520 6e6e6163 6220746f 73752065      %d cannot be us
   18c7c:	66206465 4520726f 72657478 206c616e     ed for External 
   18c8c:	65746e49 70757272 4e2e7374 20646565     Interrupts.Need 
   18c9c:	75206f74 61206573 73697220 2c676e69     to use a rising,
   18cac:	6c616620 676e696c 726f202c 746f6220      falling, or bot
   18cbc:	6f632068 6769666e 74617275 2e6e6f69     h configuration.
   18ccc:	6d305b1b 0000000a 31345b1b 4952436d     .[0m.....[41mCRI
   18cdc:	41434954 305b1b4c 6d34393b 3a73253a     TICAL.[0;94m:%s:
   18cec:	3b305b1b 256d3239 5b1b3a73 33393b30     .[0;92m%s:.[0;93
   18cfc:	3e64256d 305b1b20 6d37333b 65737341     m%d> .[0;37mAsse
   18d0c:	6f697472 6146206e 72756c69 43202c65     rtion Failure, C
   18d1c:	69646e6f 6e6f6974 73655420 3a646574     ondition Tested:
   18d2c:	65702820 68706972 6c617265 7669645f      (peripheral_div
   18d3c:	72656469 203d3c20 200a2934 20202020     ider <= 4).     
   18d4c:	20202020 76694420 72656469 73756d20          Divider mus
   18d5c:	74276e74 63786520 20646565 5b1b3233     tn't exceed 32.[
   18d6c:	5b1b6d30 000a6d30 6972500a 6e69746e     0m.[0m...Printin
   18d7c:	74532067 206b6361 63617254 000a3a65     g Stack Trace:..
   18d8c:	31345b1b 4952436d 41434954 305b1b4c     .[41mCRITICAL.[0
   18d9c:	6d34393b 3a73253a 3b305b1b 256d3239     ;94m:%s:.[0;92m%
   18dac:	5b1b3a73 33393b30 3e64256d 305b1b20     s:.[0;93m%d> .[0
   18dbc:	6d37333b 65737341 6f697472 6146206e     ;37mAssertion Fa
   18dcc:	72756c69 43202c65 69646e6f 6e6f6974     ilure, Condition
   18ddc:	73655420 3a646574 65642820 65726973      Tested: (desire
   18dec:	70735f64 5f646565 6d5f6e69 3c207a68     d_speed_in_mhz <
   18dfc:	34383320 20262620 69736564 5f646572      384 && desired_
   18e0c:	65657073 6e695f64 7a686d5f 31203e20     speed_in_mhz > 1
   18e1c:	200a2932 20202020 20202020 65724620     2).          Fre
   18e2c:	6e657571 6d207963 20747375 6c206562     quency must be l
   18e3c:	7265776f 61687420 3833206e 484d2034     ower than 384 MH
   18e4c:	646e617a 65726720 72657461 61687420     zand greater tha
   18e5c:	726f206e 75716520 74206c61 3231206f     n or equal to 12
   18e6c:	7a484d20 6d305b1b 6d305b1b 0000000a      MHz.[0m.[0m....
   18e7c:	31345b1b 4952436d 41434954 305b1b4c     .[41mCRITICAL.[0
   18e8c:	6d34393b 3a73253a 3b305b1b 256d3239     ;94m:%s:.[0;92m%
   18e9c:	5b1b3a73 33393b30 3e64256d 305b1b20     s:.[0;93m%d> .[0
   18eac:	6d37333b 65737341 6f697472 6146206e     ;37mAssertion Fa
   18ebc:	72756c69 43202c65 69646e6f 6e6f6974     ilure, Condition
   18ecc:	73655420 3a646574 69642820 65646976      Tested: (divide
   18edc:	61765f72 2065756c 2938203c 2020200a     r_value < 8).   
   18eec:	20202020 50202020 64204c4c 64697669            PLL divid
   18efc:	76207265 65756c61 6e657720 756f2074     er value went ou
   18f0c:	666f2074 756f6220 1b73646e 1b6d305b     t of bounds.[0m.
   18f1c:	0a6d305b 00000000 31345b1b 4952436d     [0m......[41mCRI
   18f2c:	41434954 305b1b4c 6d34393b 3a73253a     TICAL.[0;94m:%s:
   18f3c:	3b305b1b 256d3239 5b1b3a73 33393b30     .[0;92m%s:.[0;93
   18f4c:	3e64256d 305b1b20 6d37333b 65737341     m%d> .[0;37mAsse
   18f5c:	6f697472 6146206e 72756c69 43202c65     rtion Failure, C
   18f6c:	69646e6f 6e6f6974 73655420 3a646574     ondition Tested:
   18f7c:	61662820 2965736c 2020200a 20202020      (false).       
   18f8c:	50202020 6c204c4c 206b636f 6c756f63        PLL lock coul
   18f9c:	6f6e2064 65622074 74736520 696c6261     d not be establi
   18fac:	64656873 66656220 2065726f 656d6974     shed before time
   18fbc:	1b74756f 1b6d305b 0a6d305b 00000000     out.[0m.[0m.....
   18fcc:	31345b1b 4952436d 41434954 305b1b4c     .[41mCRITICAL.[0
   18fdc:	6d34393b 3a73253a 3b305b1b 256d3239     ;94m:%s:.[0;92m%
   18fec:	5b1b3a73 33393b30 3e64256d 305b1b20     s:.[0;93m%d> .[0
   18ffc:	6d37333b 65737341 6f697472 6146206e     ;37mAssertion Fa
   1900c:	72756c69 43202c65 69646e6f 6e6f6974     ilure, Condition
   1901c:	73655420 3a646574 70632820 69645f75      Tested: (cpu_di
   1902c:	65646976 203c2072 0a293233 20202020     vider < 32).    
   1903c:	20202020 69442020 65646976 756d2072           Divider mu
   1904c:	276e7473 78652074 64656563 1b323320     stn't exceed 32.
   1905c:	1b6d305b 0a6d305b 00000000 7474654c     [0m.[0m.....Lett
   1906c:	73207265 0a746e65 00000000 61746144     er sent.....Data
   1907c:	6325203a 0000000a 48206e49 00657265     : %c....In Here.
   1908c:	20646944 20746f6e 646e6573 ffffff00     Did not send....
   1909c:	63617453 6544206b 20687470 7a25203d     Stack Depth = %z
   190ac:	00000a64 25232020 203a757a 70257830     d...  #%zu: 0x%p
   190bc:	0000000a 6e75520a 6874203a 6f662065     .....Run: the fo
   190cc:	776f6c6c 20676e69 6d6d6f63 20646e61     llowing command 
   190dc:	79206e69 2072756f 6a6f7270 20746365     in your project 
   190ec:	65726964 726f7463 00000079 1b20200a     directory....  .
   190fc:	333b315b 616d6d37 7320656b 6b636174     [1;37mmake stack
   1910c:	63617274 73252d65 41525420 3d534543     trace-%s TRACES=
   1911c:	00000022 70257830 00000000 25783020     "...0x%p.... 0x%
   1912c:	00000070 5b1b0a22 00006d30 73696854     p..."..[0m..This
   1913c:	6c697720 6572206c 74726f70 65687420      will report the
   1914c:	6c696620 6e612065 696c2064 6e20656e      file and line n
   1915c:	65626d75 68742072 6c207461 74206465     umber that led t
   1916c:	6874206f 66207369 74636e75 206e6f69     o this function 
   1917c:	6e696562 61632067 64656c6c 0000002e     being called....
   1918c:	6c707061 74616369 006e6f69 31345b1b     application..[41
   1919c:	4952436d 41434954 305b1b4c 6d34393b     mCRITICAL.[0;94m
   191ac:	3a73253a 3b305b1b 256d3239 5b1b3a73     :%s:.[0;92m%s:.[
   191bc:	33393b30 3e64256d 305b1b20 6d37333b     0;93m%d> .[0;37m
   191cc:	65737341 6f697472 6146206e 72756c69     Assertion Failur
   191dc:	43202c65 69646e6f 6e6f6974 73655420     e, Condition Tes
   191ec:	3a646574 65702820 68706972 6c617265     ted: (peripheral
   191fc:	7669645f 72656469 203d3c20 200a2934     _divider <= 4). 
   1920c:	20202020 20202020 76694420 72656469              Divider
   1921c:	73756d20 74276e74 63786520 20646565      mustn't exceed 
   1922c:	5b1b3233 5b1b6d30 000a6d30 6972500a     32.[0m.[0m...Pri
   1923c:	6e69746e 74532067 206b6361 63617254     nting Stack Trac
   1924c:	000a3a65 31345b1b 4952436d 41434954     e:...[41mCRITICA
   1925c:	305b1b4c 6d34393b 3a73253a 3b305b1b     L.[0;94m:%s:.[0;
   1926c:	256d3239 5b1b3a73 33393b30 3e64256d     92m%s:.[0;93m%d>
   1927c:	305b1b20 6d37333b 65737341 6f697472      .[0;37mAssertio
   1928c:	6146206e 72756c69 43202c65 69646e6f     n Failure, Condi
   1929c:	6e6f6974 73655420 3a646574 65642820     tion Tested: (de
   192ac:	65726973 70735f64 5f646565 6d5f6e69     sired_speed_in_m
   192bc:	3c207a68 34383320 20262620 69736564     hz < 384 && desi
   192cc:	5f646572 65657073 6e695f64 7a686d5f     red_speed_in_mhz
   192dc:	31203e20 200a2932 20202020 20202020      > 12).         
   192ec:	65724620 6e657571 6d207963 20747375      Frequency must 
   192fc:	6c206562 7265776f 61687420 3833206e     be lower than 38
   1930c:	484d2034 646e617a 65726720 72657461     4 MHzand greater
   1931c:	61687420 726f206e 75716520 74206c61      than or equal t
   1932c:	3231206f 7a484d20 6d305b1b 6d305b1b     o 12 MHz.[0m.[0m
   1933c:	0000000a 31345b1b 4952436d 41434954     .....[41mCRITICA
   1934c:	305b1b4c 6d34393b 3a73253a 3b305b1b     L.[0;94m:%s:.[0;
   1935c:	256d3239 5b1b3a73 33393b30 3e64256d     92m%s:.[0;93m%d>
   1936c:	305b1b20 6d37333b 65737341 6f697472      .[0;37mAssertio
   1937c:	6146206e 72756c69 43202c65 69646e6f     n Failure, Condi
   1938c:	6e6f6974 73655420 3a646574 69642820     tion Tested: (di
   1939c:	65646976 61765f72 2065756c 2938203c     vider_value < 8)
   193ac:	2020200a 20202020 50202020 64204c4c     .          PLL d
   193bc:	64697669 76207265 65756c61 6e657720     ivider value wen
   193cc:	756f2074 666f2074 756f6220 1b73646e     t out of bounds.
   193dc:	1b6d305b 0a6d305b 00000000 31345b1b     [0m.[0m......[41
   193ec:	4952436d 41434954 305b1b4c 6d34393b     mCRITICAL.[0;94m
   193fc:	3a73253a 3b305b1b 256d3239 5b1b3a73     :%s:.[0;92m%s:.[
   1940c:	33393b30 3e64256d 305b1b20 6d37333b     0;93m%d> .[0;37m
   1941c:	65737341 6f697472 6146206e 72756c69     Assertion Failur
   1942c:	43202c65 69646e6f 6e6f6974 73655420     e, Condition Tes
   1943c:	3a646574 61662820 2965736c 2020200a     ted: (false).   
   1944c:	20202020 50202020 6c204c4c 206b636f            PLL lock 
   1945c:	6c756f63 6f6e2064 65622074 74736520     could not be est
   1946c:	696c6261 64656873 66656220 2065726f     ablished before 
   1947c:	656d6974 1b74756f 1b6d305b 0a6d305b     timeout.[0m.[0m.
   1948c:	00000000 31345b1b 4952436d 41434954     .....[41mCRITICA
   1949c:	305b1b4c 6d34393b 3a73253a 3b305b1b     L.[0;94m:%s:.[0;
   194ac:	256d3239 5b1b3a73 33393b30 3e64256d     92m%s:.[0;93m%d>
   194bc:	305b1b20 6d37333b 65737341 6f697472      .[0;37mAssertio
   194cc:	6146206e 72756c69 43202c65 69646e6f     n Failure, Condi
   194dc:	6e6f6974 73655420 3a646574 70632820     tion Tested: (cp
   194ec:	69645f75 65646976 203c2072 0a293233     u_divider < 32).
   194fc:	20202020 20202020 69442020 65646976               Divide
   1950c:	756d2072 276e7473 78652074 64656563     r mustn't exceed
   1951c:	1b323320 1b6d305b 0a6d305b 00000000      32.[0m.[0m.....
   1952c:	31345b1b 4952436d 41434954 305b1b4c     .[41mCRITICAL.[0
   1953c:	6d34393b 3a73253a 3b305b1b 256d3239     ;94m:%s:.[0;92m%
   1954c:	5b1b3a73 33393b30 3e64256d 305b1b20     s:.[0;93m%d> .[0
   1955c:	6d37333b 65737341 6f697472 6146206e     ;37mAssertion Fa
   1956c:	72756c69 43202c65 69646e6f 6e6f6974     ilure, Condition
   1957c:	73655420 3a646574 72662820 65757165      Tested: (freque
   1958c:	2079636e 30203d21 20200a29 20202020     ncy != 0).      
   1959c:	20202020 6e6e6143 6820746f 20657661         Cannot have 
   195ac:	6f72657a 63697420 7020736b 6d207265     zero ticks per m
   195bc:	6f726369 6f636573 202c646e 61656c70     icrosecond, plea
   195cc:	63206573 736f6f68 20312065 6d20726f     se choose 1 or m
   195dc:	2e65726f 6d305b1b 6d305b1b 0000000a     ore..[0m.[0m....
   195ec:	33345b1b 4157206d 4e494e52 305b1b47     .[43m WARNING.[0
   195fc:	6d34393b 3a73253a 3b305b1b 256d3239     ;94m:%s:.[0;92m%
   1960c:	5b1b3a73 33393b30 3e64256d 305b1b20     s:.[0;93m%d> .[0
   1961c:	6d37333b 74737953 54206d65 72656d69     ;37mSystem Timer
   1962c:	73616820 49414620 2044454c 73206f74      has FAILED to s
   1963c:	74726174 305b1b21 305b1b6d ff000a6d     tart!.[0m.[0m...

0001964c <Timer::kPowerbit>:
   1964c:	00000001 00000002 00000016 00000017     ................

0001965c <Timer::kTimerIrq>:
   1965c:	04030201                                ....

00019660 <Timer::kTimerIsr>:
   19660:	00014719 00014755 00014791 000147cd     .G..UG...G...G..

00019670 <Timer::Initialize(unsigned long, void (*)(), long)::file>:
   19670:	656d6974 70682e72 ffff0070              timer.hpp...

0001967c <Uart::kTxUartPortFunction>:
   1967c:	05020201                                ....

00019680 <Uart::kRxUartPortFunction>:
   19680:	03020201                                ....

00019684 <Uart::kPowerbit>:
   19684:	00000003 00000018 00000019 00000008     ................

00019694 <LowLevelInit()::file>:
   19694:	72617473 2e707574 00707063              startup.cpp.

000196a0 <vtable for Uart>:
	...
   196a8:	00013d11 00013ddd 00013f0d 00014041     .=...=...?..A@..
   196b8:	fffffffc 00000000 000114e1 00011571     ............q...
   196c8:	000115c9 000115e1 000115f5 00011635     ............5...
   196d8:	00011665                                e...

000196dc <vtable for Timer>:
	...
   196e4:	00013a79 00013bdd 00013cd5 fffffffc     y:...;...<......
   196f4:	00000000 000114e1 00011571 000115c9     ........q.......
   19704:	000115e1 000115f5 00011635 00011665     ........5...e...

00019714 <vtable for SystemTimer>:
	...
   1971c:	000138c5 000138f9 00013995 fffffffc     .8...8...9......
   1972c:	00000000 000114e1 00011571 000115c9     ........q.......
   1973c:	000115e1 000115f5 00011635 00011665     ........5...e...

0001974c <Timer::Initialize(unsigned long, void (*)(), long)::__PRETTY_FUNCTION__>:
   1974c:	74726976 206c6175 64696f76 6d695420     virtual void Tim
   1975c:	3a3a7265 74696e49 696c6169 7528657a     er::Initialize(u
   1976c:	33746e69 2c745f32 72734920 6e696f50     int32_t, IsrPoin
   1977c:	2c726574 746e6920 745f3233 ffff0029     ter, int32_t)...

0001978c <LowLevelInit()::__PRETTY_FUNCTION__>:
   1978c:	64696f76 776f4c20 6576654c 696e496c     void LowLevelIni
   1979c:	00292874 63617453 6544206b 20687470     t().Stack Depth 
   197ac:	7a25203d 00000a64 25232020 203a757a     = %zd...  #%zu: 
   197bc:	70257830 0000000a 6e75520a 6874203a     0x%p.....Run: th
   197cc:	6f662065 776f6c6c 20676e69 6d6d6f63     e following comm
   197dc:	20646e61 79206e69 2072756f 6a6f7270     and in your proj
   197ec:	20746365 65726964 726f7463 00000079     ect directory...
   197fc:	1b20200a 333b315b 616d6d37 7320656b     .  .[1;37mmake s
   1980c:	6b636174 63617274 73252d65 41525420     tacktrace-%s TRA
   1981c:	3d534543 00000022 70257830 00000000     CES="...0x%p....
   1982c:	25783020 00000070 5b1b0a22 00006d30      0x%p..."..[0m..
   1983c:	73696854 6c697720 6572206c 74726f70     This will report
   1984c:	65687420 6c696620 6e612065 696c2064      the file and li
   1985c:	6e20656e 65626d75 68742072 6c207461     ne number that l
   1986c:	74206465 6874206f 66207369 74636e75     ed to this funct
   1987c:	206e6f69 6e696562 61632067 64656c6c     ion being called
   1988c:	0000002e 6c707061 74616369 006e6f69     ....application.
   1989c:	31345b1b 4952436d 41434954 305b1b4c     .[41mCRITICAL.[0
   198ac:	6d34393b 3a73253a 3b305b1b 256d3239     ;94m:%s:.[0;92m%
   198bc:	5b1b3a73 33393b30 3e64256d 305b1b20     s:.[0;93m%d> .[0
   198cc:	6d37333b 65737341 6f697472 6146206e     ;37mAssertion Fa
   198dc:	72756c69 43202c65 69646e6f 6e6f6974     ilure, Condition
   198ec:	73655420 3a646574 73692820 3d212072      Tested: (isr !=
   198fc:	746e4920 75727265 6f4c7470 70756b6f      InterruptLookup
   1990c:	646e6148 2972656c 2020200a 20202020     Handler).       
   1991c:	4e202020 5349206f 6f662052 20646e75        No ISR found 
   1992c:	20726f66 20656874 74636576 2520726f     for the vector %
   1993c:	305b1b75 305b1b6d 00000a6d 6972500a     u.[0m.[0m....Pri
   1994c:	6e69746e 74532067 206b6361 63617254     nting Stack Trac
   1995c:	000a3a65 31345b1b 7261486d 61462064     e:...[41mHard Fa
   1996c:	20746c75 65637845 6f697470 634f206e     ult Exception Oc
   1997c:	72727563 0a216465 6d305b1b 00000000     curred!..[0m....
   1998c:	203a3072 30257830 2c586c38 3a317220     r0: 0x%08lX, r1:
   1999c:	25783020 586c3830 3272202c 7830203a      0x%08lX, r2: 0x
   199ac:	6c383025 72202c58 30203a33 38302578     %08lX, r3: 0x%08
   199bc:	000a586c 3a323172 25783020 586c3830     lX..r12: 0x%08lX
   199cc:	726c202c 7830203a 6c383025 70202c58     , lr: 0x%08lX, p
   199dc:	30203a63 38302578 202c586c 3a727370     c: 0x%08lX, psr:
   199ec:	25783020 586c3830 ffff000a               0x%08lX....

000199f8 <InterruptLookupHandler::file>:
   199f8:	65746e69 70757272 70632e74 ffff0070     interrupt.cpp...

00019a08 <InterruptLookupHandler::__PRETTY_FUNCTION__>:
   19a08:	64696f76 746e4920 75727265 6f4c7470     void InterruptLo
   19a18:	70756b6f 646e6148 2872656c ffff0029     okupHandler()...

00019a28 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)::pow10>:
   19a28:	3f800000 41200000 42c80000 447a0000     ...?.. A...B..zD
   19a38:	461c4000 47c35000 49742400 4b189680     .@.F.P.G.$tI...K
   19a48:	4cbebc20 4e6e6b28 63617453 6544206b      ..L(knNStack De
   19a58:	20687470 7a25203d 00000a64 25232020     pth = %zd...  #%
   19a68:	203a757a 70257830 0000000a 6e75520a     zu: 0x%p.....Run
   19a78:	6874203a 6f662065 776f6c6c 20676e69     : the following 
   19a88:	6d6d6f63 20646e61 79206e69 2072756f     command in your 
   19a98:	6a6f7270 20746365 65726964 726f7463     project director
   19aa8:	00000079 1b20200a 333b315b 616d6d37     y....  .[1;37mma
   19ab8:	7320656b 6b636174 63617274 73252d65     ke stacktrace-%s
   19ac8:	41525420 3d534543 00000022 70257830      TRACES="...0x%p
   19ad8:	00000000 25783020 00000070 5b1b0a22     .... 0x%p..."..[
   19ae8:	00006d30 73696854 6c697720 6572206c     0m..This will re
   19af8:	74726f70 65687420 6c696620 6e612065     port the file an
   19b08:	696c2064 6e20656e 65626d75 68742072     d line number th
   19b18:	6c207461 74206465 6874206f 66207369     at led to this f
   19b28:	74636e75 206e6f69 6e696562 61632067     unction being ca
   19b38:	64656c6c 0000002e 6c707061 74616369     lled....applicat
   19b48:	006e6f69 33345b1b 4157206d 4e494e52     ion..[43m WARNIN
   19b58:	305b1b47 6d34393b 3a73253a 3b305b1b     G.[0;94m:%s:.[0;
   19b68:	256d3239 5b1b3a73 33393b30 3e64256d     92m%s:.[0;93m%d>
   19b78:	305b1b20 6d37333b 74726f50 20642520      .[0;37mPort %d 
   19b88:	6e6e6163 6220746f 73752065 66206465     cannot be used f
   19b98:	4520726f 72657478 206c616e 65746e49     or External Inte
   19ba8:	70757272 202e7374 6465654e 206f7420     rrupts. Need to 
   19bb8:	20657375 4f495047 206e6f20 74726f50     use GPIO on Port
   19bc8:	6f203020 2e322072 6d305b1b 6d305b1b      0 or 2..[0m.[0m
   19bd8:	0000000a 33345b1b 4157206d 4e494e52     .....[43m WARNIN
   19be8:	305b1b47 6d34393b 3a73253a 3b305b1b     G.[0;94m:%s:.[0;
   19bf8:	256d3239 5b1b3a73 33393b30 3e64256d     92m%s:.[0;93m%d>
   19c08:	305b1b20 6d37333b 65676445 20642520      .[0;37mEdge %d 
   19c18:	6e6e6163 6220746f 73752065 66206465     cannot be used f
   19c28:	4520726f 72657478 206c616e 65746e49     or External Inte
   19c38:	70757272 4e2e7374 20646565 75206f74     rrupts.Need to u
   19c48:	61206573 73697220 2c676e69 6c616620     se a rising, fal
   19c58:	676e696c 726f202c 746f6220 6f632068     ling, or both co
   19c68:	6769666e 74617275 2e6e6f69 6d305b1b     nfiguration..[0m
   19c78:	0000000a 31345b1b 4952436d 41434954     .....[41mCRITICA
   19c88:	305b1b4c 6d34393b 3a73253a 3b305b1b     L.[0;94m:%s:.[0;
   19c98:	256d3239 5b1b3a73 33393b30 3e64256d     92m%s:.[0;93m%d>
   19ca8:	305b1b20 6d37333b 65737341 6f697472      .[0;37mAssertio
   19cb8:	6146206e 72756c69 43202c65 69646e6f     n Failure, Condi
   19cc8:	6e6f6974 73655420 3a646574 65702820     tion Tested: (pe
   19cd8:	68706972 6c617265 7669645f 72656469     ripheral_divider
   19ce8:	203d3c20 200a2934 20202020 20202020      <= 4).         
   19cf8:	76694420 72656469 73756d20 74276e74      Divider mustn't
   19d08:	63786520 20646565 5b1b3233 5b1b6d30      exceed 32.[0m.[
   19d18:	000a6d30 6972500a 6e69746e 74532067     0m...Printing St
   19d28:	206b6361 63617254 000a3a65 31345b1b     ack Trace:...[41
   19d38:	4952436d 41434954 305b1b4c 6d34393b     mCRITICAL.[0;94m
   19d48:	3a73253a 3b305b1b 256d3239 5b1b3a73     :%s:.[0;92m%s:.[
   19d58:	33393b30 3e64256d 305b1b20 6d37333b     0;93m%d> .[0;37m
   19d68:	65737341 6f697472 6146206e 72756c69     Assertion Failur
   19d78:	43202c65 69646e6f 6e6f6974 73655420     e, Condition Tes
   19d88:	3a646574 65642820 65726973 70735f64     ted: (desired_sp
   19d98:	5f646565 6d5f6e69 3c207a68 34383320     eed_in_mhz < 384
   19da8:	20262620 69736564 5f646572 65657073      && desired_spee
   19db8:	6e695f64 7a686d5f 31203e20 200a2932     d_in_mhz > 12). 
   19dc8:	20202020 20202020 65724620 6e657571              Frequen
   19dd8:	6d207963 20747375 6c206562 7265776f     cy must be lower
   19de8:	61687420 3833206e 484d2034 646e617a      than 384 MHzand
   19df8:	65726720 72657461 61687420 726f206e      greater than or
   19e08:	75716520 74206c61 3231206f 7a484d20      equal to 12 MHz
   19e18:	6d305b1b 6d305b1b 0000000a 31345b1b     .[0m.[0m.....[41
   19e28:	4952436d 41434954 305b1b4c 6d34393b     mCRITICAL.[0;94m
   19e38:	3a73253a 3b305b1b 256d3239 5b1b3a73     :%s:.[0;92m%s:.[
   19e48:	33393b30 3e64256d 305b1b20 6d37333b     0;93m%d> .[0;37m
   19e58:	65737341 6f697472 6146206e 72756c69     Assertion Failur
   19e68:	43202c65 69646e6f 6e6f6974 73655420     e, Condition Tes
   19e78:	3a646574 69642820 65646976 61765f72     ted: (divider_va
   19e88:	2065756c 2938203c 2020200a 20202020     lue < 8).       
   19e98:	50202020 64204c4c 64697669 76207265        PLL divider v
   19ea8:	65756c61 6e657720 756f2074 666f2074     alue went out of
   19eb8:	756f6220 1b73646e 1b6d305b 0a6d305b      bounds.[0m.[0m.
   19ec8:	00000000 31345b1b 4952436d 41434954     .....[41mCRITICA
   19ed8:	305b1b4c 6d34393b 3a73253a 3b305b1b     L.[0;94m:%s:.[0;
   19ee8:	256d3239 5b1b3a73 33393b30 3e64256d     92m%s:.[0;93m%d>
   19ef8:	305b1b20 6d37333b 65737341 6f697472      .[0;37mAssertio
   19f08:	6146206e 72756c69 43202c65 69646e6f     n Failure, Condi
   19f18:	6e6f6974 73655420 3a646574 61662820     tion Tested: (fa
   19f28:	2965736c 2020200a 20202020 50202020     lse).          P
   19f38:	6c204c4c 206b636f 6c756f63 6f6e2064     LL lock could no
   19f48:	65622074 74736520 696c6261 64656873     t be established
   19f58:	66656220 2065726f 656d6974 1b74756f      before timeout.
   19f68:	1b6d305b 0a6d305b 00000000 31345b1b     [0m.[0m......[41
   19f78:	4952436d 41434954 305b1b4c 6d34393b     mCRITICAL.[0;94m
   19f88:	3a73253a 3b305b1b 256d3239 5b1b3a73     :%s:.[0;92m%s:.[
   19f98:	33393b30 3e64256d 305b1b20 6d37333b     0;93m%d> .[0;37m
   19fa8:	65737341 6f697472 6146206e 72756c69     Assertion Failur
   19fb8:	43202c65 69646e6f 6e6f6974 73655420     e, Condition Tes
   19fc8:	3a646574 70632820 69645f75 65646976     ted: (cpu_divide
   19fd8:	203c2072 0a293233 20202020 20202020     r < 32).        
   19fe8:	69442020 65646976 756d2072 276e7473       Divider mustn'
   19ff8:	78652074 64656563 1b323320 1b6d305b     t exceed 32.[0m.
   1a008:	0a6d305b 00000000 35345b1b 2020206d     [0m......[45m   
   1a018:	4f525245 305b1b52 6d34393b 3a73253a     ERROR.[0;94m:%s:
   1a028:	3b305b1b 256d3239 5b1b3a73 33393b30     .[0;92m%s:.[0;93
   1a038:	3e64256d 305b1b20 6d37333b 6c696146     m%d> .[0;37mFail
   1a048:	74206465 6e69206f 61697469 53206574     ed to initiate S
   1a058:	6d204950 2065646f 68746977 74206e69     PI mode within t
   1a068:	6f656d69 202e7475 726f6241 676e6974     imeout. Aborting
   1a078:	305b1b21 00000a6d 35345b1b 2020206d     !.[0m....[45m   
   1a088:	4f525245 305b1b52 6d34393b 3a73253a     ERROR.[0;94m:%s:
   1a098:	3b305b1b 256d3239 5b1b3a73 33393b30     .[0;92m%s:.[0;93
   1a0a8:	3e64256d 305b1b20 6d37333b 70736552     m%d> .[0;37mResp
   1a0b8:	65736e6f 746e6920 69726765 63207974     onse integrity c
   1a0c8:	6b636568 69616620 2e64656c 6f624120     heck failed. Abo
   1a0d8:	6e697472 5b1b2167 000a6d30 35345b1b     rting!.[0m...[45
   1a0e8:	2020206d 4f525245 305b1b52 6d34393b     m   ERROR.[0;94m
   1a0f8:	3a73253a 3b305b1b 256d3239 5b1b3a73     :%s:.[0;92m%s:.[
   1a108:	33393b30 3e64256d 305b1b20 6d37333b     0;93m%d> .[0;37m
   1a118:	75736e55 726f7070 20646574 746c6f76     Unsupported volt
   1a128:	20656761 75206e69 202e6573 726f6241     age in use. Abor
   1a138:	676e6974 305b1b21 00000a6d 35345b1b     ting!.[0m....[45
   1a148:	2020206d 4f525245 305b1b52 6d34393b     m   ERROR.[0;94m
   1a158:	3a73253a 3b305b1b 256d3239 5b1b3a73     :%s:.[0;92m%s:.[
   1a168:	33393b30 3e64256d 305b1b20 6d37333b     0;93m%d> .[0;37m
   1a178:	43204453 20647261 656d6974 756f2064     SD Card timed ou
   1a188:	41202e74 74726f62 21676e69 6d305b1b     t. Aborting!.[0m
   1a198:	0000000a 65757274 00000000 736c6166     ....true....fals
   1a1a8:	00000065 35345b1b 2020206d 4f525245     e....[45m   ERRO
   1a1b8:	305b1b52 6d34393b 3a73253a 3b305b1b     R.[0;94m:%s:.[0;
   1a1c8:	256d3239 5b1b3a73 33393b30 3e64256d     92m%s:.[0;93m%d>
   1a1d8:	305b1b20 6d37333b 6c696857 65522065      .[0;37mWhile Re
   1a1e8:	6e696461 6c422067 206b636f 20642523     ading Block #%d 
   1a1f8:	31435243 5b1b3a36 000a6d30 35345b1b     CRC16:.[0m...[45
   1a208:	2020206d 4f525245 305b1b52 6d34393b     m   ERROR.[0;94m
   1a218:	3a73253a 3b305b1b 256d3239 5b1b3a73     :%s:.[0;92m%s:.[
   1a228:	33393b30 3e64256d 305b1b20 6d37333b     0;93m%d> .[0;37m
   1a238:	65707845 64657463 78302720 58343025     Expected '0x%04X
   1a248:	305b1b27 00000a6d 35345b1b 2020206d     '.[0m....[45m   
   1a258:	4f525245 305b1b52 6d34393b 3a73253a     ERROR.[0;94m:%s:
   1a268:	3b305b1b 256d3239 5b1b3a73 33393b30     .[0;92m%s:.[0;93
   1a278:	3e64256d 305b1b20 6d37333b 20746f47     m%d> .[0;37mGot 
   1a288:	25783027 27583430 6d305b1b 0000000a     '0x%04X'.[0m....
   1a298:	35345b1b 2020206d 4f525245 305b1b52     .[45m   ERROR.[0
   1a2a8:	6d34393b 3a73253a 3b305b1b 256d3239     ;94m:%s:.[0;92m%
   1a2b8:	5b1b3a73 33393b30 3e64256d 305b1b20     s:.[0;93m%d> .[0
   1a2c8:	6d37333b 64616552 646d4320 73617720     ;37mRead Cmd was
   1a2d8:	746f6e20 6b636120 6c776f6e 65676465      not acknowledge
   1a2e8:	72702064 7265706f 1b21796c 0a6d305b     d properly!.[0m.
   1a2f8:	00000000 35345b1b 2020206d 4f525245     .....[45m   ERRO
   1a308:	305b1b52 6d34393b 3a73253a 3b305b1b     R.[0;94m:%s:.[0;
   1a318:	256d3239 5b1b3a73 33393b30 3e64256d     92m%s:.[0;93m%d>
   1a328:	305b1b20 6d37333b 61726150 6574656d      .[0;37mParamete
   1a338:	72452072 25203a72 305b1b73 00000a6d     r Err: %s.[0m...
   1a348:	35345b1b 2020206d 4f525245 305b1b52     .[45m   ERROR.[0
   1a358:	6d34393b 3a73253a 3b305b1b 256d3239     ;94m:%s:.[0;92m%
   1a368:	5b1b3a73 33393b30 3e64256d 305b1b20     s:.[0;93m%d> .[0
   1a378:	6d37333b 72646441 72724520 7325203a     ;37mAddr Err: %s
   1a388:	6d305b1b 0000000a 35345b1b 2020206d     .[0m.....[45m   
   1a398:	4f525245 305b1b52 6d34393b 3a73253a     ERROR.[0;94m:%s:
   1a3a8:	3b305b1b 256d3239 5b1b3a73 33393b30     .[0;92m%s:.[0;93
   1a3b8:	3e64256d 305b1b20 6d37333b 73617245     m%d> .[0;37mEras
   1a3c8:	65532065 72452071 25203a72 305b1b73     e Seq Err: %s.[0
   1a3d8:	00000a6d 35345b1b 2020206d 4f525245     m....[45m   ERRO
   1a3e8:	305b1b52 6d34393b 3a73253a 3b305b1b     R.[0;94m:%s:.[0;
   1a3f8:	256d3239 5b1b3a73 33393b30 3e64256d     92m%s:.[0;93m%d>
   1a408:	305b1b20 6d37333b 206d6f43 20435243      .[0;37mCom CRC 
   1a418:	3a727245 1b732520 0a6d305b 00000000     Err: %s.[0m.....
   1a428:	35345b1b 2020206d 4f525245 305b1b52     .[45m   ERROR.[0
   1a438:	6d34393b 3a73253a 3b305b1b 256d3239     ;94m:%s:.[0;92m%
   1a448:	5b1b3a73 33393b30 3e64256d 305b1b20     s:.[0;93m%d> .[0
   1a458:	6d37333b 656c6c49 206c6167 20646d43     ;37mIllegal Cmd 
   1a468:	3a727245 1b732520 0a6d305b 00000000     Err: %s.[0m.....
   1a478:	35345b1b 2020206d 4f525245 305b1b52     .[45m   ERROR.[0
   1a488:	6d34393b 3a73253a 3b305b1b 256d3239     ;94m:%s:.[0;92m%
   1a498:	5b1b3a73 33393b30 3e64256d 305b1b20     s:.[0;93m%d> .[0
   1a4a8:	6d37333b 73617245 65522065 3a746573     ;37mErase Reset:
   1a4b8:	1b732520 0a6d305b 00000000 35345b1b      %s.[0m......[45
   1a4c8:	2020206d 4f525245 305b1b52 6d34393b     m   ERROR.[0;94m
   1a4d8:	3a73253a 3b305b1b 256d3239 5b1b3a73     :%s:.[0;92m%s:.[
   1a4e8:	33393b30 3e64256d 305b1b20 6d37333b     0;93m%d> .[0;37m
   1a4f8:	49206e49 3a656c64 1b732520 0a6d305b     In Idle: %s.[0m.
   1a508:	00000000 35345b1b 2020206d 4f525245     .....[45m   ERRO
   1a518:	305b1b52 6d34393b 3a73253a 3b305b1b     R.[0;94m:%s:.[0;
   1a528:	256d3239 5b1b3a73 33393b30 3e64256d     92m%s:.[0;93m%d>
   1a538:	305b1b20 6d37333b 6c696146 74206465      .[0;37mFailed t
   1a548:	6573206f 74532074 20747261 72646441     o set Start Addr
   1a558:	21737365 6d305b1b 0000000a 35345b1b     ess!.[0m.....[45
   1a568:	2020206d 4f525245 305b1b52 6d34393b     m   ERROR.[0;94m
   1a578:	3a73253a 3b305b1b 256d3239 5b1b3a73     :%s:.[0;92m%s:.[
   1a588:	33393b30 3e64256d 305b1b20 6d37333b     0;93m%d> .[0;37m
   1a598:	6c696146 74206465 6573206f 6e452074     Failed to set En
   1a5a8:	64412064 73657264 5b1b2173 000a6d30     d Address!.[0m..
   1a5b8:	35345b1b 2020206d 4f525245 305b1b52     .[45m   ERROR.[0
   1a5c8:	6d34393b 3a73253a 3b305b1b 256d3239     ;94m:%s:.[0;92m%
   1a5d8:	5b1b3a73 33393b30 3e64256d 305b1b20     s:.[0;93m%d> .[0
   1a5e8:	6d37333b 6e6b6e55 206e776f 70736572     ;37mUnknown resp
   1a5f8:	65736e6f 70797420 41202e65 74726f62     onse type. Abort
   1a608:	21676e69 6d305b1b 0000000a 35345b1b     ing!.[0m.....[45
   1a618:	2020206d 4f525245 305b1b52 6d34393b     m   ERROR.[0;94m
   1a628:	3a73253a 3b305b1b 256d3239 5b1b3a73     :%s:.[0;92m%s:.[
   1a638:	33393b30 3e64256d 305b1b20 6d37333b     0;93m%d> .[0;37m
   1a648:	70736552 65736e6f 736e7520 6f707075     Response unsuppo
   1a658:	64657472 206e6920 20495053 65646f6d     rted in SPI mode
   1a668:	6241202e 6974726f 1b21676e 0a6d305b     . Aborting!.[0m.
   1a678:	ffffff00                                ....

0001a67c <Sd::kCrcTable8>:
   1a67c:	1b120900 3f362d24 535a4148 777e656c     ....$-6?HAZSle~w
   1a68c:	020b1019 262f343d 4a435851 6e677c75     ....=4/&QXCJu|gn
   1a69c:	29203b32 0d041f16 6168737a 454c575e     2; )....zsha^WLE
   1a6ac:	3039222b 141d060f 78716a63 5c554e47     +"90....cjqxGNU\
   1a6bc:	7f766d64 5b524940 373e252c 131a0108     dmv.@IR[,%>7....
   1a6cc:	666f747d 424b5059 2e273c35 0a031811     }tofYPKB5<'.....
   1a6dc:	4d445f56 69607b72 050c171e 2128333a     V_DMr{`i....:3(!
   1a6ec:	545d464f 7079626b 1c150e07 38312a23     OF]Tkbyp....#*18
   1a6fc:	5a534841 7e776c65 121b0009 363f242d     AHSZelw~....-$?6
   1a70c:	434a5158 676e757c 0b021910 2f263d34     XQJC|ung....4=&/
   1a71c:	68617a73 4c455e57 2029323b 040d161f     szahW^EL;2) ....
   1a72c:	7178636a 555c474e 39302b22 1d140f06     jcxqNG\U"+09....
   1a73c:	3e372c25 1a130801 767f646d 525b4049     %,7>....md.vI@[R
   1a74c:	272e353c 030a1118 6f667d74 4b425950     <5.'....t}foPYBK
   1a75c:	0c051e17 28213a33 444d565f 6069727b     ....3:!(_VMD{ri`
   1a76c:	151c070e 3138232a 5d544f46 00706b62     ....*#81FOT]bkp.

0001a77c <Sd::kCrcTable16>:
   1a77c:	10210000 30632042 50a54084 70e760c6     ..!.B c0.@.P.`.p
   1a78c:	91298108 b16ba14a d1adc18c f1efe1ce     ..).J.k.........
   1a79c:	02101231 22523273 429452b5 62d672f7     1...s2R".R.B.r.b
   1a7ac:	83189339 a35ab37b c39cd3bd e3def3ff     9...{.Z.........
   1a7bc:	34432462 14010420 74c764e6 548544a4     b$C4 ....d.t.D.T
   1a7cc:	b54ba56a 95098528 f5cfe5ee d58dc5ac     j.K.(...........
   1a7dc:	26723653 06301611 66f676d7 46b45695     S6r&..0..v.f.V.F
   1a7ec:	a77ab75b 87389719 e7fef7df c7bcd79d     [.z...8.........
   1a7fc:	58e548c4 78a76886 18610840 38232802     .H.X.h.x@.a..(#8
   1a80c:	d9edc9cc f9afe98e 99698948 b92ba90a     ........H.i...+.
   1a81c:	4ad45af5 6a967ab7 0a501a71 2a123a33     .Z.J.z.jq.P.3:.*
   1a82c:	cbdcdbfd eb9efbbf 8b589b79 ab1abb3b     ........y.X.;...
   1a83c:	7c876ca6 5cc54ce4 3c032c22 1c410c60     .l.|.L.\",.<`.A.
   1a84c:	fd8fedae ddcdcdec bd0bad2a 9d498d68     ........*...h.I.
   1a85c:	6eb67e97 4ef45ed5 2e323e13 0e701e51     .~.n.^.N.>2.Q.p.
   1a86c:	efbeff9f cffcdfdd af3abf1b 8f789f59     ..........:.Y.x.
   1a87c:	81a99188 a1ebb1ca c12dd10c e16ff14e     ..........-.N.o.
   1a88c:	00a11080 20e330c2 40255004 60677046     .....0. .P%@Fpg`
   1a89c:	939883b9 b3daa3fb d31cc33d f35ee37f     ........=.....^.
   1a8ac:	129002b1 32d222f3 52144235 72566277     .....".25B.RwbVr
   1a8bc:	a5cbb5ea 858995a8 e54ff56e c50dd52c     ........n.O.,...
   1a8cc:	24c334e2 048114a0 64477466 44055424     .4.$....ftGd$T.D
   1a8dc:	b7faa7db 97b88799 f77ee75f d73cc71d     ........_.~...<.
   1a8ec:	36f226d3 16b00691 76766657 56344615     .&.6....Wfvv.F4V
   1a8fc:	c96dd94c e92ff90e 89e999c8 a9abb98a     L.m.../.........
   1a90c:	48655844 68277806 08e118c0 28a33882     DXeH.x'h.....8.(
   1a91c:	db5ccb7d fb1eeb3f 9bd88bf9 bb9aabbb     }.\.?...........
   1a92c:	5a544a75 7a166a37 1ad00af1 3a922ab3     uJTZ7j.z.....*.:
   1a93c:	ed0ffd2e cd4ddd6c ad8bbdaa 8dc99de8     ....l.M.........
   1a94c:	6c077c26 4c455c64 2c833ca2 0cc11ce0     &|.ld\EL.<.,....
   1a95c:	ff3eef1f df7ccf5d bfbaaf9b 9ff88fd9     ..>.].|.........
   1a96c:	7e366e17 5e744e55 3eb22e93 1ef00ed1     .n6~UNt^...>....

0001a97c <Sd::Mount(SdInterface::CardInfo_t*)::file>:
   1a97c:	682e6473 ff007070                       sd.hpp..

0001a984 <Sd::Mount(SdInterface::CardInfo_t*)::file>:
   1a984:	682e6473 ff007070                       sd.hpp..

0001a98c <Sd::Mount(SdInterface::CardInfo_t*)::file>:
   1a98c:	682e6473 ff007070                       sd.hpp..

0001a994 <Sd::Mount(SdInterface::CardInfo_t*)::file>:
   1a994:	682e6473 ff007070                       sd.hpp..

0001a99c <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file>:
   1a99c:	682e6473 ff007070                       sd.hpp..

0001a9a4 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file>:
   1a9a4:	682e6473 ff007070                       sd.hpp..

0001a9ac <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file>:
   1a9ac:	682e6473 ff007070                       sd.hpp..

0001a9b4 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file>:
   1a9b4:	682e6473 ff007070                       sd.hpp..

0001a9bc <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file>:
   1a9bc:	682e6473 ff007070                       sd.hpp..

0001a9c4 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file>:
   1a9c4:	682e6473 ff007070                       sd.hpp..

0001a9cc <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file>:
   1a9cc:	682e6473 ff007070                       sd.hpp..

0001a9d4 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file>:
   1a9d4:	682e6473 ff007070                       sd.hpp..

0001a9dc <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file>:
   1a9dc:	682e6473 ff007070                       sd.hpp..

0001a9e4 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file>:
   1a9e4:	682e6473 ff007070                       sd.hpp..

0001a9ec <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file>:
   1a9ec:	682e6473 ff007070                       sd.hpp..

0001a9f4 <Sd::DeleteBlock(unsigned long, unsigned long)::file>:
   1a9f4:	682e6473 ff007070                       sd.hpp..

0001a9fc <Sd::DeleteBlock(unsigned long, unsigned long)::file>:
   1a9fc:	682e6473 ff007070                       sd.hpp..

0001aa04 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)::file>:
   1aa04:	682e6473 ff007070                       sd.hpp..

0001aa0c <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)::file>:
   1aa0c:	682e6473 ff007070                       sd.hpp..

0001aa14 <vtable for Sd>:
	...
   1aa1c:	00017351 000167a9 00016859 00016c6d     Qs...g..Yh..ml..
   1aa2c:	00017085 00017231 000177f1 00017839     .p..1r...w..9x..
   1aa3c:	000178a9                                .x..

0001aa40 <vtable for SdInterface>:
	...
   1aa48:	00017ac9 00017ac9 00017ac9 00017ac9     .z...z...z...z..
   1aa58:	00017ac9 00017ac9 00017ac9 00017ac9     .z...z...z...z..
   1aa68:	00017ac9                                .z..

0001aa6c <Sd::Mount(SdInterface::CardInfo_t*)::__PRETTY_FUNCTION__>:
   1aa6c:	74726976 206c6175 6c6f6f62 3a645320     virtual bool Sd:
   1aa7c:	756f4d3a 5328746e 746e4964 61667265     :Mount(SdInterfa
   1aa8c:	3a3a6563 64726143 6f666e49 292a745f     ce::CardInfo_t*)
   1aa9c:	ffffff00                                ....

0001aaa0 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::__PRETTY_FUNCTION__>:
   1aaa0:	74726976 206c6175 746e6975 20745f38     virtual uint8_t 
   1aab0:	3a3a6453 64616552 636f6c42 6975286b     Sd::ReadBlock(ui
   1aac0:	3233746e 202c745f 746e6975 2a745f38     nt32_t, uint8_t*
   1aad0:	6975202c 3233746e 0029745f              , uint32_t).

0001aadc <Sd::DeleteBlock(unsigned long, unsigned long)::__PRETTY_FUNCTION__>:
   1aadc:	74726976 206c6175 746e6975 20745f38     virtual uint8_t 
   1aaec:	3a3a6453 656c6544 6c426574 286b636f     Sd::DeleteBlock(
   1aafc:	746e6975 745f3233 6975202c 3233746e     uint32_t, uint32
   1ab0c:	0029745f                                _t).

0001ab10 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)::__PRETTY_FUNCTION__>:
   1ab10:	74726976 206c6175 746e6975 745f3233     virtual uint32_t
   1ab20:	3a645320 6e65533a 646d4364 49645328      Sd::SendCmd(SdI
   1ab30:	7265746e 65636166 6f433a3a 6e616d6d     nterface::Comman
   1ab40:	75202c64 33746e69 2c745f32 6e697520     d, uint32_t, uin
   1ab50:	745f3874 75202c2a 33746e69 2c745f32     t8_t*, uint32_t,
   1ab60:	49645320 7265746e 65636166 654b3a3a      SdInterface::Ke
   1ab70:	6c417065 29657669 ffffff00              epAlive)....

0001ab7c <__sf_fake_stderr>:
	...

0001ab9c <__sf_fake_stdin>:
	...

0001abbc <__sf_fake_stdout>:
	...
