
build/application/firmware.elf:     file format elf32-littlearm
build/application/firmware.elf
architecture: arm, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00012715

Program Header:
0x70000001 off    0x0001939c vaddr 0x0001939c paddr 0x0001939c align 2**2
         filesz 0x00000008 memsz 0x00000008 flags r--
    LOAD off    0x00010000 vaddr 0x00010000 paddr 0x00010000 align 2**16
         filesz 0x000093a4 memsz 0x000093a4 flags r-x
    LOAD off    0x00020000 vaddr 0x10000000 paddr 0x000193a4 align 2**16
         filesz 0x00000264 memsz 0x00000264 flags rw-
    LOAD off    0x00020268 vaddr 0x10000268 paddr 0x10000268 align 2**16
         filesz 0x00000000 memsz 0x0000046c flags rw-
private flags = 5000400: [Version5 EABI] [hard-float ABI]

Sections:
Idx Name             Size      VMA       LMA       File off  Algn  Flags
  0 .text            0000939c  00010000  00010000  00010000  2**4  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data            00000264  10000000  000193a4  00020000  2**2  CONTENTS, ALLOC, LOAD, DATA
  2 .data_RAM2       00000000  20000000  20000000  00020264  2**2  CONTENTS
  3 .bss             0000046c  10000268  10000268  00020268  2**3  ALLOC
  4 .ARM.exidx       00000008  0001939c  0001939c  0001939c  2**2  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .uninit_RESERVED 00000000  10000000  10000000  00020264  2**2  CONTENTS
  6 .noinit_RAM2     00000000  20000000  20000000  00020264  2**2  CONTENTS
  7 .noinit          00000000  100006d4  100006d4  00020264  2**2  CONTENTS
  8 .ARM.attributes  00000030  00000000  00000000  00020264  2**0  CONTENTS, READONLY
  9 .comment         0000007e  00000000  00000000  00020294  2**0  CONTENTS, READONLY
 10 .debug_info      00041a61  00000000  00000000  00020312  2**0  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev    0000497f  00000000  00000000  00061d73  2**0  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges   00000d20  00000000  00000000  000666f2  2**0  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges    00000c90  00000000  00000000  00067412  2**0  CONTENTS, READONLY, DEBUGGING
 14 .debug_line      00006959  00000000  00000000  000680a2  2**0  CONTENTS, READONLY, DEBUGGING
 15 .debug_str       0001a1bf  00000000  00000000  0006e9fb  2**0  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame     00003394  00000000  00000000  00088bbc  2**2  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
00010000 l    d  .text	00000000 .text
10000000 l    d  .data	00000000 .data
20000000 l    d  .data_RAM2	00000000 .data_RAM2
10000268 l    d  .bss	00000000 .bss
0001939c l    d  .ARM.exidx	00000000 .ARM.exidx
10000000 l    d  .uninit_RESERVED	00000000 .uninit_RESERVED
20000000 l    d  .noinit_RAM2	00000000 .noinit_RAM2
100006d4 l    d  .noinit	00000000 .noinit
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 interrupt.cpp
00012cf0 l     F .text	0000002c NVIC_EnableIRQ
00012d1c l     F .text	00000054 NVIC_SetPriority
00010000 l     O .text	000000e4 kInterruptVectorTable
00017f44 l     O .text	0000000e InterruptLookupHandler::file
00017f54 l     O .text	0000001e InterruptLookupHandler::__PRETTY_FUNCTION__
0001022c l       .text	00000000 handler2_address_const
00000000 l    df *ABS*	00000000 startup.cpp
00017b58 l     O .text	00000049 Lpc40xxSystemController::SetPeripheralClockDivider(unsigned char)::__PRETTY_FUNCTION__
00017c00 l     O .text	0000005c Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)::__PRETTY_FUNCTION__
00017ba4 l     O .text	0000005a Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)::__PRETTY_FUNCTION__
00017c5c l     O .text	0000003a Lpc40xxSystemController::SetCpuClockDivider(unsigned char)::__PRETTY_FUNCTION__
00017c98 l     O .text	0000003e Timer::Initialize(unsigned long, void (*)(), long)::__PRETTY_FUNCTION__
100000d4 l     O .data	00000008 (anonymous namespace)::system_timer
100000dc l     O .data	00000004 (anonymous namespace)::system_controller
100000e0 l     O .data	0000000c (anonymous namespace)::timer0
000125bc l     F .text	00000040 (anonymous namespace)::Lpc40xxUptime()
00017a40 l     O .text	0000000c LowLevelInit()::file
00017cd8 l     O .text	00000014 LowLevelInit()::__PRETTY_FUNCTION__
000102fc l     O .text	00000004 kCrpWord
00012c04 l     F .text	000000dc __static_initialization_and_destruction_0(int, int)
00012ce0 l     F .text	0000000e _GLOBAL__sub_I_UptimeRTOS
00000000 l    df *ABS*	00000000 /mnt/c/SJSU_Dev2/SJSU-Dev2/tools/gcc-arm-none-eabi-7-2017-q4-major/bin/../lib/gcc/arm-none-eabi/7.2.1/thumb/v7e-m/fpv4-sp/hard/crti.o
00000000 l    df *ABS*	00000000 /mnt/c/SJSU_Dev2/SJSU-Dev2/tools/gcc-arm-none-eabi-7-2017-q4-major/bin/../lib/gcc/arm-none-eabi/7.2.1/thumb/v7e-m/fpv4-sp/hard/crtn.o
00000000 l    df *ABS*	00000000 crtstuff.c
00010324 l     F .text	00000000 __do_global_dtors_aux
10000268 l       .bss	00000001 completed.9929
00010348 l     F .text	00000000 frame_dummy
1000026c l       .bss	00000018 object.9934
0001030c l     O .text	00000000 __frame_dummy_init_array_entry
00000000 l    df *ABS*	00000000 diskio.cpp
000191d4 l     O .text	0000001c Gpio::ValidPortCheck()::__PRETTY_FUNCTION__
000191f0 l     O .text	00000039 Gpio::SetInterruptEdge(GpioInterface::Edge)::__PRETTY_FUNCTION__
00019198 l     O .text	0000003b Gpio::ClearInterruptEdge(GpioInterface::Edge)::__PRETTY_FUNCTION__
0001922c l     O .text	00000031 Sd::Mount(SdInterface::CardInfo_t*)::__PRETTY_FUNCTION__
00019260 l     O .text	0000003c Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::__PRETTY_FUNCTION__
0001929c l     O .text	00000034 Sd::DeleteBlock(unsigned long, unsigned long)::__PRETTY_FUNCTION__
000192d0 l     O .text	00000069 Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)::__PRETTY_FUNCTION__
10000668 l     O .bss	00000068 (anonymous namespace)::sd_card
00016ce0 l     F .text	00000050 __static_initialization_and_destruction_0(int, int)
00016d30 l     F .text	00000028 _GLOBAL__sub_I_disk_status
00000000 l    df *ABS*	00000000 LabGPIO.cpp
10000000 l     O .data	00000028 interrupts
000172cc l     O .text	0000000c LabGPIO::IntEdge(LabGPIO::Edge)::file
000172d8 l     O .text	00000025 LabGPIO::IntEdge(LabGPIO::Edge)::__PRETTY_FUNCTION__
00000000 l    df *ABS*	00000000 main.cpp
10000388 l     O .bss	00000008 (anonymous namespace)::uptime
00010674 l     F .text	00000030 (anonymous namespace)::DefaultUptime()
00017300 l     O .text	00000009 main::file
000173a4 l     O .text	0000000b main::__PRETTY_FUNCTION__
00017398 l     O .text	00000009 GpioInterruptCallback()::file
000173b0 l     O .text	0000001d GpioInterruptCallback()::__PRETTY_FUNCTION__
00000000 l    df *ABS*	00000000 newlib.cpp
00000000 l    df *ABS*	00000000 tasks.c
100004f0 l     O .bss	00000064 pxReadyTasksLists
10000554 l     O .bss	00000004 uxTopReadyPriority
10000558 l     O .bss	00000004 xYieldPending
1000055c l     O .bss	00000004 uxSchedulerSuspended
10000560 l     O .bss	00000004 ulTaskSwitchedInTime
10000564 l     O .bss	00000004 ulTotalRunTime
00000000 l    df *ABS*	00000000 port.c
000131b0 l       .text	00000000 pxCurrentTCBConst2
00013220 l       .text	00000000 pxCurrentTCBConst
00000000 l    df *ABS*	00000000 printf.cpp
00013228 l     F .text	00000030 _out_null(char, void*, unsigned int, unsigned int)
00013258 l     F .text	00000044 _out_char(char, void*, unsigned int, unsigned int)
0001329c l     F .text	00000044 _strlen(char const*)
000132e0 l     F .text	00000044 _is_digit(char)
00013324 l     F .text	00000060 _atoi(char const**)
00013384 l     F .text	0000025c _ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)
000135e0 l     F .text	000000e4 _ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)
000136c4 l     F .text	000000f4 _ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)
00017f74 l     O .text	00000028 _ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)::pow10
000137b8 l     F .text	00000438 _ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)
00013bf0 l     F .text	000008f4 _vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)
00000000 l    df *ABS*	00000000 pure.cc
00000000 l    df *ABS*	00000000 eh_terminate.cc
00000000 l    df *ABS*	00000000 sf_round.c
00000000 l    df *ABS*	00000000 _arm_truncdfsf2.o
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 abort.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 signal.c
00000000 l    df *ABS*	00000000 signalr.c
00000000 l    df *ABS*	00000000 findfp.c
00000000 l    df *ABS*	00000000 eh_term_handler.cc
00000000 l    df *ABS*	00000000 impure.c
10000204 l     O .data	00000060 impure_data
00000000 l    df *ABS*	00000000 reent.c
00010e24  w    F .text	0000003e Lpc40xxSystemController::GetPeripheralFrequency() const
00012f94 g     F .text	00000038 putchar
00012d70  w    F .text	0000006c Pwm0IrqHandler
00018bd4  w    O .text	00000009 Gpio::SetInterruptEdge(GpioInterface::Edge)::file
00010218 g     F .text	0000001c HardFaultHandler
00012f04 g     F .text	00000024 _getpid
00012f58 g     F .text	0000003c _putchar
00012d70  w    F .text	0000006c EepromIrqHandler
00012d70  w    F .text	0000006c Timer2IrqHandler
100000c0  w    O .data	00000014 uart0
00013098 g     F .text	0000002c GetStackDepth()
00018f44  w    O .text	00000007 Sd::Mount(SdInterface::CardInfo_t*)::file
00014e24  w    F .text	00000024 Lpc40xxSystemController::Lpc40xxSystemController()
00017a08  w    O .text	00000004 Timer::kTimerIrq
00018f7c  w    O .text	00000007 Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file
0001724c g     F .text	00000024 _kill_r
0001010c g       .text	00000000 bss_section_table_end
000144e4 g     F .text	0000004c printf
10000058  w    O .data	00000004 SystemTimer::sys_tick
00012d70  w    F .text	0000006c I2c1IrqHandler
000127bc  w    F .text	0000003c void Timer::TimerHandler<(TimerInterface::TimerPort)2>()
10000070  w    O .data	00000010 Uart::uart
00018fac  w    O .text	00000007 Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file
00010000 g       *ABS*	00000000 __vectors_start__
000106a4  w    F .text	00000044 Milliseconds()
00010f88  w    F .text	00000110 Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)
00014e48  w    F .text	00000034 SspInterface::SspInterface()
00012d70  w    F .text	0000006c BusFaultHandler
100003e8 g     O .bss	00000100 stack_trace
1000005c  w    O .data	00000004 Pin::pin_map
00011e08  w    F .text	000000e4 Uart::Initialize(unsigned long)
20000000 g       *ABS*	00000000 __base_RAM2
000193a4 g       .ARM.exidx	00000000 __exidx_end
00014d14  w    F .text	0000007c Gpio::ClearEdgeRising()
00011270  w    F .text	00000030 Lpc40xxSystemController::SetEmcClockDivider(Lpc40xxSystemController::EmcDivider)
00018bc8  w    O .text	00000009 Gpio::ValidPortCheck()::file
00010420 g     F .text	000000d4 LabGPIO::GpioInterruptHandler()
100004ec g     O .bss	00000004 pxCurrentTCB
00014530  w    F .text	00000034 PinInterface::PinInterface()
000104f4 g     F .text	00000034 LabGPIO::EnableInterrupts()
00013054 g     F .text	0000001c __cyg_profile_func_exit
000169b4  w    F .text	00000048 Sd::Crc7Add(unsigned char, unsigned char)
000158cc  w    F .text	000000a0 Sd::Sd(Sd::DebugSdCard_t, unsigned char, unsigned char, unsigned char, unsigned char)
00012a24  w    F .text	000000a0 void Timer::ClearInterrupts<(TimerInterface::TimerPort)1>()
100006d0 g     O .bss	00000004 errno
000193a4 g       .ARM.exidx	00000000 _etext
10000050  w    O .data	00000004 Lpc40xxSystemController::system_controller
00010d10  w    F .text	00000090 Lpc40xxSystemController::SetClockFrequency(unsigned char)
00011bd8  w    F .text	00000030 unsigned char util::Value<TimerInterface::MatchControlRegister, unsigned char>(TimerInterface::MatchControlRegister)
00010e10  w    F .text	00000014 Lpc40xxSystemController::GetSystemFrequency() const
000123cc  w    F .text	000001f0 Uart::GenerateUartCalibration(float)
1000002c  w    O .data	00000018 Gpio::gpio_port
00011c08  w    F .text	000000f8 Timer::SetTimer(unsigned long, TimerInterface::TimerIsrCondition, TimerInterface::MatchControlRegister)
0001263c  w    F .text	000000bc LowLevelInit()
00012d70  w    F .text	0000006c LcdIrqHandler
00018fd4  w    O .text	00000007 Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)::file
00080000 g       *ABS*	00000000 __top_MFlash512
000109e4  w    F .text	0000006c Ssp::Transfer(unsigned short)
0001206c  w    F .text	000000f8 Uart::Receive(unsigned long)
00010f28  w    F .text	00000030 Lpc40xxSystemController::SelectUsbClockSource(Lpc40xxSystemController::UsbSource)
00010804  w    F .text	00000030 Delay(unsigned long long)
00017a30  w    O .text	00000010 Uart::kPowerbit
00012d70  w    F .text	0000006c I2c2IrqHandler
10000390  w    O .bss	00000004 SystemTimer::system_timer_isr
00014bdc  w    F .text	00000040 Gpio::DetachInterrupt()
00012d70  w    F .text	0000006c CanIrqHandler
00011924  w    F .text	00000074 Pin::EnableDac(bool)
00011654  w    F .text	0000007c Pin::SetAsAnalogMode(bool)
00011208  w    F .text	00000068 Lpc40xxSystemController::SetCpuClockDivider(unsigned char)
00016a6c  w    F .text	000000fc Sd::GetCrc16(unsigned char*, unsigned short)
00016e84 g     F .text	00000000 .hidden __aeabi_uldivmod
100006d4 g       .noinit	00000000 _noinit
00012fcc g     F .text	00000060 puts
100000ec g     O .data	000000e4 dynamic_isr_vector_table
000148fc  w    F .text	0000002c Gpio::GetPin()
000149a4  w    F .text	0000005c Gpio::SetInterruptRoutine(void (*)())
000145bc  w    F .text	00000034 GpioInterface::GpioInterface()
00014e48  w    F .text	00000034 SspInterface::SspInterface()
00012d70  w    F .text	0000006c RitIrqHandler
00012d70  w    F .text	0000006c Uart2IrqHandler
00011998  w    F .text	00000064 Pin::BitPlace(unsigned long, unsigned long, unsigned long, unsigned long)
000179e0  w    O .text	00000016 Lpc40xxSystemController::SetCpuClockDivider(unsigned char)::file
00018f64  w    O .text	00000007 Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file
000153c8  w    F .text	00000160 Ssp::GetPeripheralMode()
00012ac4  w    F .text	000000a0 void Timer::ClearInterrupts<(TimerInterface::TimerPort)2>()
00016d84 g     F .text	00000060 roundf
000171ec g     F .text	00000050 _raise_r
00010714  w    F .text	0000002c Wait(unsigned long long)::{lambda()#1}::_FUN()
00010940  w    F .text	0000002c int util::Value<Ssp::Peripheral, int>(Ssp::Peripheral)
00014e7c  w    F .text	00000038 PinInterface::PinInterface(PinInterface const&)
10010000 g       *ABS*	00000000 __top_RAM
00017a2c  w    O .text	00000004 Uart::kRxUartPortFunction
000131c0 g     F .text	00000066 xPortPendSVHandler
00010740  w    F .text	000000c4 Wait(unsigned long long)
00015898  w    F .text	00000034 SdInterface::SdInterface()
00011d00  w    F .text	0000003c Timer::GetTimer()
10000000 g       *ABS*	00000000 __base_RamLoc64
00013070 g     F .text	00000028 GetStackTrace()
100001d0 g     O .data	00000004 out
10000054  w    O .data	00000004 Lpc40xxSystemController::speed_in_hertz
00018fb4  w    O .text	00000007 Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file
00018f9c  w    O .text	00000007 Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file
00017270 g     F .text	00000004 _getpid_r
00000000 g       *ABS*	00000000 __base_MFlash512
00019034  w    O .text	0000004c vtable for Ssp
10010000 g       *ABS*	00000000 StackTop
00015d7c  w    F .text	00000064 Sd::WaitToReadBlock()
00018bec  w    O .text	00000003 Ssp::kPinSelect
00016eb4 g     F .text	000002cc .hidden __udivmoddi4
00012d70  w    F .text	0000006c I2sIrqHandler
000100fc g       .text	00000000 bss_section_table
00010528 g     F .text	0000007c LabGPIO::IntEdge(LabGPIO::Edge)
00010300 g       .text	00000000 __CRP_WORD_END__
20008000 g       *ABS*	00000000 __top_RAM2
00012714 g     F .text	00000030 ResetIsr
00015d38  w    F .text	00000044 Sd::ToBool(bool)
00019080  w    O .text	00000028 vtable for SspInterface
00012d70  w    F .text	0000006c PendSVHandler
0001512c  w    F .text	00000030 unsigned char util::Value<SspInterface::DataSize, unsigned char>(SspInterface::DataSize)
00011310  w    F .text	00000034 SystemTimer::SetIsrFunction(void (*)())
00010b9c  w    F .text	00000044 bool bit::Read<unsigned long>(unsigned long, unsigned long)
0001096c  w    F .text	00000078 Ssp::IsTransferRegBusy()
00012d70  w    F .text	0000006c UsageFaultHandler
20000000 g       *ABS*	00000000 __user_heap_base
0001939c g       .text	00000000 __exidx_start
0001183c  w    F .text	00000074 Pin::EnableI2cHighCurrentDrive(bool)
00012d70  w    F .text	0000006c Uart4IrqHandler
00014a00  w    F .text	00000054 Gpio::ClearInterruptRoutine()
000117c0  w    F .text	0000007c Pin::EnableI2cHighSpeedMode(bool)
000101fc g     F .text	00000018 InitFpu()
000116d0  w    F .text	0000007c Pin::EnableDigitalFilter(bool)
00017194 g     F .text	00000048 __libc_init_array
00012d70 g     F .text	0000006c InterruptLookupHandler
00010f58  w    F .text	00000030 Lpc40xxSystemController::SelectSpifiClockSource(Lpc40xxSystemController::SpifiSource)
00010df8  w    F .text	00000018 Lpc40xxSystemController::GetPeripheralClockDivider() const
10000028  w    O .data	00000004 Uptime
00019114  w    O .text	00000048 vtable for GpioInterface
00011f38  w    F .text	000000e8 Uart::Send(unsigned char)
00017184 g     F .text	0000000e abort
00012d70  w    F .text	0000006c BodIrqHandler
00015714  w    F .text	00000184 Ssp::GetClock()
00010300 g     F .text	00000000 _init
0001010c g       .text	00000000 section_table_end
00012b64  w    F .text	000000a0 void Timer::ClearInterrupts<(TimerInterface::TimerPort)3>()
00016d78 g     F .text	0000000a std::terminate()
00016de4 g     F .text	0000009e .hidden __aeabi_d2f
00014d90  w    F .text	0000007c Gpio::ClearEdgeFalling()
00012d70  w    F .text	0000006c SysTickHandler
000100e4 g       .text	00000000 section_table_start
100006d4 g       .bss	00000000 _ebss
00014c98  w    F .text	0000007c Gpio::SetEdgeFalling()
00018f74  w    O .text	00000007 Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file
00012d70  w    F .text	0000006c RtcIrqHandler
0001488c  w    F .text	00000070 Gpio::Read()
00012834  w    F .text	000000a8 Status Wait<Uart::Send(unsigned char)::{lambda()#1}>(unsigned long long, Uart::Send(unsigned char)::{lambda()#1})
eff8210e g       *ABS*	00000000 ValidUserCodeChecksum
00012d70  w    F .text	0000006c Uart0IrqHandler
00012e38 g     F .text	00000078 GetRegistersFromStack
00016b68  w    F .text	0000003c unsigned long bit::Set<unsigned long>(unsigned long, unsigned long)
0001915c  w    O .text	0000003c vtable for PinInterface
00012d70  w    F .text	0000006c UsbIrqHandler
00012d70  w    F .text	0000006c AdcIrqHandler
00012020  w    F .text	0000004c Uart::Receive(unsigned long)::{lambda()#1}::operator()() const
00010ce0  w    F .text	00000030 SetUptimeFunction(unsigned long long (*)())
00010364 g     F .text	00000058 LabGPIO::LabGPIO(unsigned char, unsigned char)
0001933c g     O .text	00000020 __sf_fake_stderr
00018c44  w    O .text	00000100 Sd::kCrcTable8
00016d68 g     F .text	00000010 std::get_terminate()
000122d4  w    F .text	00000074 Uart::FractionalEstimate(float, float)
00014a84  w    F .text	00000088 Gpio::SetInterruptEdge(GpioInterface::Edge)
00012d70  w    F .text	0000006c EnetIrqHandler
00012d70  w    F .text	0000006c DmaIrqHandler
0001010c g     F .text	00000090 InitDataSection()
00012ddc g     F .text	0000005c RegisterIsr(IRQn, void (*)(), bool, long)
00000000 g       *ABS*	00000000 __base_Flash
00012d70  w    F .text	0000006c Eint1IrqHandler
10000044  w    O .data	0000000c Ssp::ssp_registers
00012d70  w    F .text	0000006c SvcHandler
00012d70  w    F .text	0000006c GpioIrqHandler
00018fc4  w    O .text	00000007 Sd::DeleteBlock(unsigned long, unsigned long)::file
00012d70  w    F .text	0000006c SdioIrqHandler
10010000 g       *ABS*	00000000 __top_RamLoc64
10000268 g       .bss	00000000 _bss
00018f5c  w    O .text	00000007 Sd::Mount(SdInterface::CardInfo_t*)::file
00012d70  w    F .text	0000006c Pll1IrqHandler
00012d70  w    F .text	0000006c MemManageHandler
00016d58 g     F .text	00000006 __cxa_pure_virtual
00012d70  w    F .text	0000006c Pwm1IrqHandler
00014a54  w    F .text	00000030 unsigned char util::Value<GpioInterface::Edge, unsigned char>(GpioInterface::Edge)
00012d70  w    F .text	0000006c Timer0IrqHandler
000128dc  w    F .text	000000a8 Status Wait<Uart::Receive(unsigned long)::{lambda()#1}>(unsigned long long, Uart::Receive(unsigned long)::{lambda()#1})
00080000 g       *ABS*	00000000 __top_Flash
00012348  w    F .text	00000084 Uart::IsDecmial(float)
00015528  w    F .text	000001ec Ssp::SetClock(bool, bool, unsigned char, unsigned char)
100006d4 g       .noinit	00000000 _end_noinit
000112a0  w    F .text	0000003c SystemTimer::DisableTimer()
000163f4  w    F .text	00000120 Sd::DeleteBlock(unsigned long, unsigned long)
000130c4 g     F .text	000000c8 vTaskSwitchContext
00016c18  w    F .text	00000054 unsigned long bit::Extract<unsigned long>(unsigned long, unsigned long, unsigned long)
00014564  w    F .text	00000058 Pin::Pin(unsigned char, unsigned char)
0001518c  w    F .text	00000030 unsigned char util::Value<SspInterface::MasterSlaveMode, unsigned char>(SspInterface::MasterSlaveMode)
00018f84  w    O .text	00000007 Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file
00017a28  w    O .text	00000004 Uart::kTxUartPortFunction
00012d70  w    F .text	0000006c Uart3IrqHandler
00014e0c  w    F .text	00000018 SystemControllerInterface::SystemControllerInterface()
00018fbc  w    O .text	00000007 Sd::DeleteBlock(unsigned long, unsigned long)::file
20000000 g       *ABS*	00000000 __base_RamPeriph32
00018be0  w    O .text	00000009 Gpio::ClearInterruptEdge(GpioInterface::Edge)::file
100004e8 g     O .bss	00000004 stack_depth
000147a8  w    F .text	0000006c Gpio::Toggle()
00018f94  w    O .text	00000007 Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file
00018d44  w    O .text	00000200 Sd::kCrcTable16
10000568  w    O .bss	00000100 Gpio::interrupthandlers
00017180  w    F .text	00000002 .hidden __aeabi_ldiv0
00012d70  w    F .text	0000006c Timer1IrqHandler
00012260  w    F .text	00000074 Uart::DividerEstimate(float, float)
00010834  w    F .text	00000064 Gpio::SetHigh()
0001060c g     F .text	00000068 LabGPIO::setRisingEdge()
00012164  w    F .text	000000fc Uart::FindClosestFractional(float)
00014f08  w    F .text	000000e4 Ssp::Ssp(Ssp::Peripheral)
000100e4 g       .text	00000000 data_section_table
000114ec  w    F .text	00000080 Pin::SetMode(PinInterface::Mode)
00017998  w    O .text	00000016 Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)::file
00015de0  w    F .text	00000050 Sd::WaitWhileBusy()
000113e0  w    F .text	00000094 SystemTimer::SetTickFrequency(unsigned long)
0001935c g     O .text	00000020 __sf_fake_stdin
00016c6c  w    F .text	00000074 unsigned long bit::Insert<unsigned long, bool>(unsigned long, bool, unsigned long, unsigned long)
000102fc g       .text	00000000 __CRP_WORD_START__
00017a0c  w    O .text	00000010 Timer::kTimerIsr
00014b94  w    F .text	00000048 Gpio::AttachInterrupt(void (*)(), GpioInterface::Edge)
00012d70  w    F .text	0000006c Uart1IrqHandler
0001466c  w    F .text	0000007c Gpio::SetAsInput()
0001302c g     F .text	00000028 __cyg_profile_func_enter
000171dc g     F .text	00000010 memset
00010a50 g     F .text	0000004c main
000158cc  w    F .text	000000a0 Sd::Sd(Sd::DebugSdCard_t, unsigned char, unsigned char, unsigned char, unsigned char)
100001d4  w    O .data	00000028 Gpio::interrupt
00011a84  w    F .text	00000020 Timer::DoNothingIsr()
00012d70  w    F .text	0000006c QeiIrqHandler
20000000 g       *ABS*	00000000 heap
00012d70  w    F .text	0000006c Ssp2IrqHandler
000119fc  w    F .text	0000002c Pin::GetPort() const
00016248  w    F .text	000001ac Sd::WriteBlock(unsigned long, unsigned char const*, unsigned long)
00014564  w    F .text	00000058 Pin::Pin(unsigned char, unsigned char)
00016de4 g     F .text	0000009e .hidden __truncdfsf2
00010318 g       .text	00000000 __init_array_end
00013190 g     F .text	00000026 vPortSVCHandler
00012eb0 g     F .text	0000003c FirmwareStdOut(int)
00018fdc  w    O .text	0000002c vtable for Sd
00014b0c  w    F .text	00000088 Gpio::ClearInterruptEdge(GpioInterface::Edge)
00012d70  w    F .text	0000006c Ssp1IrqHandler
00012744  w    F .text	0000003c void Timer::TimerHandler<(TimerInterface::TimerPort)0>()
00018c38  w    O .text	0000000c Ssp::kPowerBit
00010a9c g     F .text	00000054 GpioInterruptCallback()
00011a28  w    F .text	0000002c Pin::GetPin() const
00011d3c  w    F .text	000000cc Uart::SetBaudRate(unsigned long)
00014764  w    F .text	00000044 Gpio::SetDirection(GpioInterface::Direction)
00017a4c  w    O .text	0000003c vtable for Uart
000146e8  w    F .text	0000007c Gpio::SetAsOutput()
00018fa4  w    O .text	00000007 Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file
00011098  w    F .text	00000170 Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)
00010898  w    F .text	00000064 Gpio::SetLow()
00017b34  w    O .text	00000024 vtable for Lpc40xxSystemController
00015e30  w    F .text	00000418 Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)
00018fcc  w    O .text	00000007 Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)::file
00017980  w    O .text	00000016 Lpc40xxSystemController::SetPeripheralClockDivider(unsigned char)::file
000126f8 g     F .text	0000001a SystemInit
00011aa4  w    F .text	00000134 Timer::Initialize(unsigned long, void (*)(), long)
00010e64  w    F .text	00000030 Lpc40xxSystemController::PowerUpPeripheral(SystemControllerInterface::PeripheralID const&)
20008000 g       *ABS*	00000000 heap_end
00014fec  w    F .text	000000e4 Ssp::Initialize()
00017a88  w    O .text	00000038 vtable for Timer
00014e7c  w    F .text	00000038 PinInterface::PinInterface(PinInterface const&)
10000060  w    O .data	00000010 Timer::tim_register
00012d70  w    F .text	0000006c Ssp0IrqHandler
00010364 g     F .text	00000058 LabGPIO::LabGPIO(unsigned char, unsigned char)
00010318 g     F .text	00000000 _fini
00012d70  w    F .text	0000006c UsbactivityIrqHandler
000108fc  w    F .text	00000044 Gpio::Set(GpioInterface::State)
00012d70  w    F .text	0000006c Pll0IrqHandler
00014eb4  w    F .text	00000054 Pin::Pin(Pin const&)
000100fc g       .text	00000000 data_section_table_end
00012d70  w    F .text	0000006c CanactivityIrqHandler
00012d70  w    F .text	0000006c NmiHandler
00018bf0  w    O .text	00000048 Ssp::kSspPinMatrix
00014814  w    F .text	00000078 Gpio::ReadState()
00018f6c  w    O .text	00000007 Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file
000105a4 g     F .text	00000068 LabGPIO::setFallingEdge()
10000200 g     O .data	00000004 _impure_ptr
00010af0  w    F .text	000000ac Status Wait<Wait(unsigned long long)::{lambda()#1}>(unsigned long long, Wait(unsigned long long)::{lambda()#1})
10000000 g       .uninit_RESERVED	00000000 _end_uninit_RESERVED
000169fc  w    F .text	00000070 Sd::GetCrc7(unsigned char*, unsigned char)
00012d70  w    F .text	0000006c McpwmIrqHandler
0001030c g       .text	00000000 __preinit_array_end
00012d70  w    F .text	0000006c WdtIrqHandler
000106e8  w    F .text	0000002c Wait(unsigned long long)::{lambda()#1}::operator()() const
00016514  w    F .text	000004a0 Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)
00014e24  w    F .text	00000024 Lpc40xxSystemController::Lpc40xxSystemController()
00017ac0  w    O .text	0000003c vtable for Pin
10000000 g       .data	00000000 _data
000115e0  w    F .text	00000074 Pin::SetAsActiveLow(bool)
00010ef8  w    F .text	00000030 Lpc40xxSystemController::SelectMainClockSource(Lpc40xxSystemController::MainClockSource)
00014c1c  w    F .text	0000007c Gpio::SetEdgeRising()
00018f4c  w    O .text	00000007 Sd::Mount(SdInterface::CardInfo_t*)::file
00011a54  w    F .text	00000030 unsigned char util::Value<TimerInterface::TimerPort, unsigned char>(TimerInterface::TimerPort)
100003d4  w    O .bss	00000010 Timer::user_timer_isr
000179b0  w    O .text	00000016 Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)::file
10000394  w    O .bss	00000040 Timer::match
00011eec  w    F .text	0000004c Uart::Send(unsigned char)::{lambda()#1}::operator()() const
00015a1c  w    F .text	0000031c Sd::Mount(SdInterface::CardInfo_t*)
100001fc g     O .data	00000004 __cxxabiv1::__terminate_handler
000190a8  w    O .text	00000024 vtable for SystemControllerInterface
000190cc  w    O .text	00000048 vtable for Gpio
10000264 g       .data	00000000 _edata
000179f8  w    O .text	00000010 Timer::kPowerbit
00012780  w    F .text	0000003c void Timer::TimerHandler<(TimerInterface::TimerPort)1>()
0001156c  w    F .text	00000074 Pin::EnableHysteresis(bool)
000145bc  w    F .text	00000034 GpioInterface::GpioInterface()
00012d70  w    F .text	0000006c DebugMonHandler
00014928  w    F .text	0000007c Gpio::ValidPortCheck()
00012d70  w    F .text	0000006c Eint2IrqHandler
20008000 g       *ABS*	00000000 __top_RamPeriph32
00014f08  w    F .text	000000e4 Ssp::Ssp(Ssp::Peripheral)
00012d70  w    F .text	0000006c Timer3IrqHandler
10000000 g       *ABS*	00000000 __base_RAM
00012d70  w    F .text	0000006c Eint3IrqHandler
00016d5e g     F .text	00000008 __cxxabiv1::__terminate(void (*)())
00012f28 g     F .text	00000030 _kill
00012d70  w    F .text	0000006c I2c0IrqHandler
00014eb4  w    F .text	00000054 Pin::Pin(Pin const&)
00017a1c  w    O .text	0000000a Timer::Initialize(unsigned long, void (*)(), long)::file
000112dc  w    F .text	00000034 SystemTimer::SystemTimerHandler()
00018f54  w    O .text	00000007 Sd::Mount(SdInterface::CardInfo_t*)::file
0001937c g     O .text	00000020 __sf_fake_stdout
00010be0  w    F .text	00000100 debug::PrintBacktrace(bool, void*)
0001030c g       .text	00000000 __init_array_start
00017180  w    F .text	00000002 .hidden __aeabi_idiv0
00019008  w    O .text	0000002c vtable for SdInterface
0001596c  w    F .text	000000b0 Sd::Initialize()
00012eec g     F .text	00000018 _exit
0001174c  w    F .text	00000074 Pin::EnableFastMode(bool)
00012984  w    F .text	000000a0 void Timer::ClearInterrupts<(TimerInterface::TimerPort)0>()
00012d70  w    F .text	0000006c Eint0IrqHandler
00011344  w    F .text	0000009c SystemTimer::StartTimer()
0001515c  w    F .text	00000030 unsigned char util::Value<SspInterface::FrameMode, unsigned char>(SspInterface::FrameMode)
0001019c g     F .text	00000060 InitBssSection()
000145f0  w    F .text	0000007c Gpio::Gpio(unsigned char, unsigned char)
000125fc g     F .text	00000040 UptimeRTOS
000118b0  w    F .text	00000074 Pin::SetAsOpenDrain(bool)
10000284 g     O .bss	00000100 LabGPIO::pin_isr_map
00017afc  w    O .text	00000038 vtable for SystemTimer
00012d70  w    F .text	0000006c SpiIrqHandler
00018f8c  w    O .text	00000007 Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file
000150d0  w    F .text	0000005c Ssp::SetSpiMasterDefault()
10000080  w    O .data	00000040 Uart::pairs
00014e0c  w    F .text	00000018 SystemControllerInterface::SystemControllerInterface()
00010e94  w    F .text	00000030 Lpc40xxSystemController::PowerDownPeripheral(SystemControllerInterface::PeripheralID const&)
00015898  w    F .text	00000034 SdInterface::SdInterface()
0001030c g       .text	00000000 __preinit_array_start
000103bc g     F .text	00000064 LabGPIO::AttachInterruptHandler(void (*)(), LabGPIO::Edge)
000179c8  w    O .text	00000016 Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)::file
00010ec4  w    F .text	00000034 Lpc40xxSystemController::SelectOscillatorSource(Lpc40xxSystemController::OscillatorSource)
100003e4  w    O .bss	00000004 guard variable for Timer::match
000151bc  w    F .text	0000020c Ssp::SetPeripheralMode(SspInterface::MasterSlaveMode, SspInterface::FrameMode, SspInterface::DataSize)
00011474  w    F .text	00000078 Pin::SetPinFunction(unsigned char)
00016ba4  w    F .text	00000074 unsigned long bit::Insert<unsigned long, unsigned char>(unsigned long, unsigned char, unsigned long, unsigned long)
00014530  w    F .text	00000034 PinInterface::PinInterface()
00010da0  w    F .text	00000058 Lpc40xxSystemController::SetPeripheralClockDivider(unsigned char)
000145f0  w    F .text	0000007c Gpio::Gpio(unsigned char, unsigned char)
000127f8  w    F .text	0000003c void Timer::TimerHandler<(TimerInterface::TimerPort)3>()
0001723c g     F .text	00000010 raise



Disassembly of section .text:

00010000 <kInterruptVectorTable>:
   10000:	00 00 01 10 15 27 01 00 71 2d 01 00 19 02 01 00     .....'..q-......
   10010:	71 2d 01 00 71 2d 01 00 71 2d 01 00 0e 21 f8 ef     q-..q-..q-...!..
	...
   1002c:	91 31 01 00 71 2d 01 00 00 00 00 00 c1 31 01 00     .1..q-.......1..
   1003c:	71 2d 01 00 71 2d 01 00 71 2d 01 00 71 2d 01 00     q-..q-..q-..q-..
   1004c:	71 2d 01 00 71 2d 01 00 71 2d 01 00 71 2d 01 00     q-..q-..q-..q-..
   1005c:	71 2d 01 00 71 2d 01 00 71 2d 01 00 71 2d 01 00     q-..q-..q-..q-..
   1006c:	71 2d 01 00 71 2d 01 00 00 00 00 00 71 2d 01 00     q-..q-......q-..
   1007c:	71 2d 01 00 71 2d 01 00 71 2d 01 00 71 2d 01 00     q-..q-..q-..q-..
   1008c:	71 2d 01 00 71 2d 01 00 71 2d 01 00 71 2d 01 00     q-..q-..q-..q-..
   1009c:	71 2d 01 00 71 2d 01 00 71 2d 01 00 71 2d 01 00     q-..q-..q-..q-..
   100ac:	71 2d 01 00 71 2d 01 00 71 2d 01 00 71 2d 01 00     q-..q-..q-..q-..
   100bc:	71 2d 01 00 71 2d 01 00 71 2d 01 00 71 2d 01 00     q-..q-..q-..q-..
   100cc:	71 2d 01 00 71 2d 01 00 71 2d 01 00 71 2d 01 00     q-..q-..q-..q-..
   100dc:	71 2d 01 00 71 2d 01 00                             q-..q-..

000100e4 <data_section_table>:
   100e4:	000193a4 	.word	0x000193a4
   100e8:	10000000 	.word	0x10000000
   100ec:	00000264 	.word	0x00000264
   100f0:	000193a4 	.word	0x000193a4
   100f4:	20000000 	.word	0x20000000
   100f8:	00000000 	.word	0x00000000

000100fc <bss_section_table>:
   100fc:	10000268 	.word	0x10000268
   10100:	0000046c 	.word	0x0000046c
   10104:	20000000 	.word	0x20000000
   10108:	00000000 	.word	0x00000000

0001010c <InitDataSection()>:
SJ2_IGNORE_STACK_TRACE(void SystemInit());

// Functions to carry out the initialization of RW and BSS data sections.
SJ2_SECTION(".after_vectors")
void InitDataSection()
{
   1010c:	b086      	sub	sp, #24
  for (int i = 0; &data_section_table[i] < &data_section_table_end; i++)
   1010e:	2300      	movs	r3, #0
   10110:	9305      	str	r3, [sp, #20]
   10112:	9a05      	ldr	r2, [sp, #20]
   10114:	4613      	mov	r3, r2
   10116:	005b      	lsls	r3, r3, #1
   10118:	4413      	add	r3, r2
   1011a:	009b      	lsls	r3, r3, #2
   1011c:	4a1d      	ldr	r2, [pc, #116]	; (10194 <InitDataSection()+0x88>)
   1011e:	4413      	add	r3, r2
   10120:	4a1d      	ldr	r2, [pc, #116]	; (10198 <InitDataSection()+0x8c>)
   10122:	4293      	cmp	r3, r2
   10124:	d233      	bcs.n	1018e <InitDataSection()+0x82>
  {
    uint32_t * rom_location = data_section_table[i].rom_location;
   10126:	491b      	ldr	r1, [pc, #108]	; (10194 <InitDataSection()+0x88>)
   10128:	9a05      	ldr	r2, [sp, #20]
   1012a:	4613      	mov	r3, r2
   1012c:	005b      	lsls	r3, r3, #1
   1012e:	4413      	add	r3, r2
   10130:	009b      	lsls	r3, r3, #2
   10132:	440b      	add	r3, r1
   10134:	681b      	ldr	r3, [r3, #0]
   10136:	9303      	str	r3, [sp, #12]
    uint32_t * ram_location = data_section_table[i].ram_location;
   10138:	4916      	ldr	r1, [pc, #88]	; (10194 <InitDataSection()+0x88>)
   1013a:	9a05      	ldr	r2, [sp, #20]
   1013c:	4613      	mov	r3, r2
   1013e:	005b      	lsls	r3, r3, #1
   10140:	4413      	add	r3, r2
   10142:	009b      	lsls	r3, r3, #2
   10144:	440b      	add	r3, r1
   10146:	685b      	ldr	r3, [r3, #4]
   10148:	9302      	str	r3, [sp, #8]
    uint32_t length         = data_section_table[i].length;
   1014a:	4912      	ldr	r1, [pc, #72]	; (10194 <InitDataSection()+0x88>)
   1014c:	9a05      	ldr	r2, [sp, #20]
   1014e:	4613      	mov	r3, r2
   10150:	005b      	lsls	r3, r3, #1
   10152:	4413      	add	r3, r2
   10154:	009b      	lsls	r3, r3, #2
   10156:	440b      	add	r3, r1
   10158:	3308      	adds	r3, #8
   1015a:	681b      	ldr	r3, [r3, #0]
   1015c:	9301      	str	r3, [sp, #4]
    for (size_t j = 0; j < length; j++)
   1015e:	2300      	movs	r3, #0
   10160:	9304      	str	r3, [sp, #16]
   10162:	9a04      	ldr	r2, [sp, #16]
   10164:	9b01      	ldr	r3, [sp, #4]
   10166:	429a      	cmp	r2, r3
   10168:	d20d      	bcs.n	10186 <InitDataSection()+0x7a>
    {
      ram_location[j] = rom_location[j];
   1016a:	9b04      	ldr	r3, [sp, #16]
   1016c:	009b      	lsls	r3, r3, #2
   1016e:	9a03      	ldr	r2, [sp, #12]
   10170:	441a      	add	r2, r3
   10172:	9b04      	ldr	r3, [sp, #16]
   10174:	009b      	lsls	r3, r3, #2
   10176:	9902      	ldr	r1, [sp, #8]
   10178:	440b      	add	r3, r1
   1017a:	6812      	ldr	r2, [r2, #0]
   1017c:	601a      	str	r2, [r3, #0]
    for (size_t j = 0; j < length; j++)
   1017e:	9b04      	ldr	r3, [sp, #16]
   10180:	3301      	adds	r3, #1
   10182:	9304      	str	r3, [sp, #16]
   10184:	e7ed      	b.n	10162 <InitDataSection()+0x56>
  for (int i = 0; &data_section_table[i] < &data_section_table_end; i++)
   10186:	9b05      	ldr	r3, [sp, #20]
   10188:	3301      	adds	r3, #1
   1018a:	9305      	str	r3, [sp, #20]
   1018c:	e7c1      	b.n	10112 <InitDataSection()+0x6>
    }
  }
}
   1018e:	bf00      	nop
   10190:	b006      	add	sp, #24
   10192:	4770      	bx	lr
   10194:	000100e4 	.word	0x000100e4
   10198:	000100fc 	.word	0x000100fc

0001019c <InitBssSection()>:

// Functions to initialization BSS data sections. This is important because
// the std c libs assume that BSS is set to zero.
SJ2_SECTION(".after_vectors")
void InitBssSection()
{
   1019c:	b084      	sub	sp, #16
  for (int i = 0; &bss_section_table[i] < &bss_section_table_end; i++)
   1019e:	2300      	movs	r3, #0
   101a0:	9303      	str	r3, [sp, #12]
   101a2:	9b03      	ldr	r3, [sp, #12]
   101a4:	00db      	lsls	r3, r3, #3
   101a6:	4a13      	ldr	r2, [pc, #76]	; (101f4 <InitBssSection()+0x58>)
   101a8:	4413      	add	r3, r2
   101aa:	4a13      	ldr	r2, [pc, #76]	; (101f8 <InitBssSection()+0x5c>)
   101ac:	4293      	cmp	r3, r2
   101ae:	d21e      	bcs.n	101ee <InitBssSection()+0x52>
  {
    uint32_t * ram_location = bss_section_table[i].ram_location;
   101b0:	4a10      	ldr	r2, [pc, #64]	; (101f4 <InitBssSection()+0x58>)
   101b2:	9b03      	ldr	r3, [sp, #12]
   101b4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
   101b8:	9301      	str	r3, [sp, #4]
    uint32_t length         = bss_section_table[i].length;
   101ba:	4a0e      	ldr	r2, [pc, #56]	; (101f4 <InitBssSection()+0x58>)
   101bc:	9b03      	ldr	r3, [sp, #12]
   101be:	00db      	lsls	r3, r3, #3
   101c0:	4413      	add	r3, r2
   101c2:	685b      	ldr	r3, [r3, #4]
   101c4:	9300      	str	r3, [sp, #0]
    for (size_t j = 0; j < length; j++)
   101c6:	2300      	movs	r3, #0
   101c8:	9302      	str	r3, [sp, #8]
   101ca:	9a02      	ldr	r2, [sp, #8]
   101cc:	9b00      	ldr	r3, [sp, #0]
   101ce:	429a      	cmp	r2, r3
   101d0:	d209      	bcs.n	101e6 <InitBssSection()+0x4a>
    {
      ram_location[j] = 0;
   101d2:	9b02      	ldr	r3, [sp, #8]
   101d4:	009b      	lsls	r3, r3, #2
   101d6:	9a01      	ldr	r2, [sp, #4]
   101d8:	4413      	add	r3, r2
   101da:	2200      	movs	r2, #0
   101dc:	601a      	str	r2, [r3, #0]
    for (size_t j = 0; j < length; j++)
   101de:	9b02      	ldr	r3, [sp, #8]
   101e0:	3301      	adds	r3, #1
   101e2:	9302      	str	r3, [sp, #8]
   101e4:	e7f1      	b.n	101ca <InitBssSection()+0x2e>
  for (int i = 0; &bss_section_table[i] < &bss_section_table_end; i++)
   101e6:	9b03      	ldr	r3, [sp, #12]
   101e8:	3301      	adds	r3, #1
   101ea:	9303      	str	r3, [sp, #12]
   101ec:	e7d9      	b.n	101a2 <InitBssSection()+0x6>
    }
  }
}
   101ee:	bf00      	nop
   101f0:	b004      	add	sp, #16
   101f2:	4770      	bx	lr
   101f4:	000100fc 	.word	0x000100fc
   101f8:	0001010c 	.word	0x0001010c

000101fc <InitFpu()>:
      // Write back the modified value to the CPACR
      "STR     R1, [R0]\n"
      // Wait for store to complete
      "DSB\n"
      // reset pipeline now the FPU is enabled
      "ISB\n");
   101fc:	f8df 0014 	ldr.w	r0, [pc, #20]	; 10214 <InitFpu()+0x18>
   10200:	6801      	ldr	r1, [r0, #0]
   10202:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   10206:	6001      	str	r1, [r0, #0]
   10208:	f3bf 8f4f 	dsb	sy
   1020c:	f3bf 8f6f 	isb	sy
}
   10210:	bf00      	nop
   10212:	4770      	bx	lr
   10214:	e000ed88 	.word	0xe000ed88

00010218 <HardFaultHandler>:
      " mrseq r0, msp                                       \n"
      " mrsne r0, psp                                       \n"
      " ldr r1, [r0, #24]                                   \n"
      " ldr r2, handler2_address_const                      \n"
      " bx r2                                               \n"
      " handler2_address_const: .word GetRegistersFromStack \n");
   10218:	f01e 0f04 	tst.w	lr, #4
   1021c:	bf0c      	ite	eq
   1021e:	f3ef 8008 	mrseq	r0, MSP
   10222:	f3ef 8009 	mrsne	r0, PSP
   10226:	6981      	ldr	r1, [r0, #24]
   10228:	4a00      	ldr	r2, [pc, #0]	; (1022c <handler2_address_const>)
   1022a:	4710      	bx	r2

0001022c <handler2_address_const>:
   1022c:	00012e39 	.word	0x00012e39
#endif
}
   10230:	bf00      	nop
   10232:	4770      	bx	lr
   10234:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   10238:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   1023c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   10240:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   10244:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   10248:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   1024c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   10250:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   10254:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   10258:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   1025c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   10260:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   10264:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   10268:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   1026c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   10270:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   10274:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   10278:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   1027c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   10280:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   10284:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   10288:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   1028c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   10290:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   10294:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   10298:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   1029c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102a0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102a4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102a8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102ac:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102b0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102b4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102b8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102bc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102c0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102c4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102c8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102cc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102d0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102d4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102d8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102dc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102e0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102e4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102e8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102ec:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102f0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102f4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102f8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

000102fc <__CRP_WORD_START__>:
   102fc:	ffffffff 	.word	0xffffffff

00010300 <_init>:
   10300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10302:	bf00      	nop
   10304:	bcf8      	pop	{r3, r4, r5, r6, r7}
   10306:	bc08      	pop	{r3}
   10308:	469e      	mov	lr, r3
   1030a:	4770      	bx	lr

0001030c <__init_array_start>:
   1030c:	00010349 	.word	0x00010349
   10310:	00012ce1 	.word	0x00012ce1
   10314:	00016d31 	.word	0x00016d31

00010318 <_fini>:
   10318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1031a:	bf00      	nop
   1031c:	bcf8      	pop	{r3, r4, r5, r6, r7}
   1031e:	bc08      	pop	{r3}
   10320:	469e      	mov	lr, r3
   10322:	4770      	bx	lr

00010324 <__do_global_dtors_aux>:
   10324:	b510      	push	{r4, lr}
   10326:	4c05      	ldr	r4, [pc, #20]	; (1033c <__do_global_dtors_aux+0x18>)
   10328:	7823      	ldrb	r3, [r4, #0]
   1032a:	b933      	cbnz	r3, 1033a <__do_global_dtors_aux+0x16>
   1032c:	4b04      	ldr	r3, [pc, #16]	; (10340 <__do_global_dtors_aux+0x1c>)
   1032e:	b113      	cbz	r3, 10336 <__do_global_dtors_aux+0x12>
   10330:	4804      	ldr	r0, [pc, #16]	; (10344 <__do_global_dtors_aux+0x20>)
   10332:	f3af 8000 	nop.w
   10336:	2301      	movs	r3, #1
   10338:	7023      	strb	r3, [r4, #0]
   1033a:	bd10      	pop	{r4, pc}
   1033c:	10000268 	.word	0x10000268
   10340:	00000000 	.word	0x00000000
   10344:	000193a4 	.word	0x000193a4

00010348 <frame_dummy>:
   10348:	b508      	push	{r3, lr}
   1034a:	4b03      	ldr	r3, [pc, #12]	; (10358 <frame_dummy+0x10>)
   1034c:	b11b      	cbz	r3, 10356 <frame_dummy+0xe>
   1034e:	4903      	ldr	r1, [pc, #12]	; (1035c <frame_dummy+0x14>)
   10350:	4803      	ldr	r0, [pc, #12]	; (10360 <frame_dummy+0x18>)
   10352:	f3af 8000 	nop.w
   10356:	bd08      	pop	{r3, pc}
   10358:	00000000 	.word	0x00000000
   1035c:	1000026c 	.word	0x1000026c
   10360:	000193a4 	.word	0x000193a4

00010364 <LabGPIO::LabGPIO(unsigned char, unsigned char)>:
     }};
    //inline static volatile uint32_t *stat= &(LPC_GPIOINT->IntStatus);
    
    IsrPointer LabGPIO::pin_isr_map[kPorts][kPins]={ nullptr};
    
 LabGPIO::LabGPIO(uint8_t port, uint8_t pin){
   10364:	b530      	push	{r4, r5, lr}
   10366:	b083      	sub	sp, #12
   10368:	4675      	mov	r5, lr
   1036a:	9001      	str	r0, [sp, #4]
   1036c:	460b      	mov	r3, r1
   1036e:	f88d 3003 	strb.w	r3, [sp, #3]
   10372:	4613      	mov	r3, r2
   10374:	f88d 3002 	strb.w	r3, [sp, #2]
   10378:	462b      	mov	r3, r5
   1037a:	4619      	mov	r1, r3
   1037c:	480e      	ldr	r0, [pc, #56]	; (103b8 <LabGPIO::LabGPIO(unsigned char, unsigned char)+0x54>)
   1037e:	f002 fe55 	bl	1302c <__cyg_profile_func_enter>
    SelPort = port;
   10382:	9b01      	ldr	r3, [sp, #4]
   10384:	f89d 2003 	ldrb.w	r2, [sp, #3]
   10388:	701a      	strb	r2, [r3, #0]
    SelPin = pin;
   1038a:	9b01      	ldr	r3, [sp, #4]
   1038c:	f89d 2002 	ldrb.w	r2, [sp, #2]
   10390:	705a      	strb	r2, [r3, #1]
    
    interrupt_port = (port == 2) ? 1:0;
   10392:	f89d 3003 	ldrb.w	r3, [sp, #3]
   10396:	2b02      	cmp	r3, #2
   10398:	d101      	bne.n	1039e <LabGPIO::LabGPIO(unsigned char, unsigned char)+0x3a>
   1039a:	2201      	movs	r2, #1
   1039c:	e000      	b.n	103a0 <LabGPIO::LabGPIO(unsigned char, unsigned char)+0x3c>
   1039e:	2200      	movs	r2, #0
   103a0:	9b01      	ldr	r3, [sp, #4]
   103a2:	709a      	strb	r2, [r3, #2]
 }
   103a4:	9c01      	ldr	r4, [sp, #4]
   103a6:	462b      	mov	r3, r5
   103a8:	4619      	mov	r1, r3
   103aa:	4803      	ldr	r0, [pc, #12]	; (103b8 <LabGPIO::LabGPIO(unsigned char, unsigned char)+0x54>)
   103ac:	f002 fe52 	bl	13054 <__cyg_profile_func_exit>
   103b0:	4623      	mov	r3, r4
   103b2:	4618      	mov	r0, r3
   103b4:	b003      	add	sp, #12
   103b6:	bd30      	pop	{r4, r5, pc}
   103b8:	00010365 	.word	0x00010365

000103bc <LabGPIO::AttachInterruptHandler(void (*)(), LabGPIO::Edge)>:
    pc->pc_inactive(SelPort, SelPin);
  }
void LabGPIO::setRepeater(){
   pc->pc_repeater(SelPort, SelPin);
  }
 void LabGPIO::AttachInterruptHandler(IsrPointer isr, Edge edge){
   103bc:	b510      	push	{r4, lr}
   103be:	b084      	sub	sp, #16
   103c0:	4674      	mov	r4, lr
   103c2:	9003      	str	r0, [sp, #12]
   103c4:	9102      	str	r1, [sp, #8]
   103c6:	9201      	str	r2, [sp, #4]
   103c8:	4623      	mov	r3, r4
   103ca:	4619      	mov	r1, r3
   103cc:	4811      	ldr	r0, [pc, #68]	; (10414 <LabGPIO::AttachInterruptHandler(void (*)(), LabGPIO::Edge)+0x58>)
   103ce:	f002 fe2d 	bl	1302c <__cyg_profile_func_enter>
    pin_isr_map[interrupt_port][SelPin]=isr;
   103d2:	9b03      	ldr	r3, [sp, #12]
   103d4:	789b      	ldrb	r3, [r3, #2]
   103d6:	4618      	mov	r0, r3
   103d8:	9b03      	ldr	r3, [sp, #12]
   103da:	785b      	ldrb	r3, [r3, #1]
   103dc:	461a      	mov	r2, r3
   103de:	490e      	ldr	r1, [pc, #56]	; (10418 <LabGPIO::AttachInterruptHandler(void (*)(), LabGPIO::Edge)+0x5c>)
   103e0:	0143      	lsls	r3, r0, #5
   103e2:	4413      	add	r3, r2
   103e4:	9a02      	ldr	r2, [sp, #8]
   103e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    printf("%i %i\n",interrupt_port,SelPin);
   103ea:	9b03      	ldr	r3, [sp, #12]
   103ec:	789b      	ldrb	r3, [r3, #2]
   103ee:	4619      	mov	r1, r3
   103f0:	9b03      	ldr	r3, [sp, #12]
   103f2:	785b      	ldrb	r3, [r3, #1]
   103f4:	461a      	mov	r2, r3
   103f6:	4809      	ldr	r0, [pc, #36]	; (1041c <LabGPIO::AttachInterruptHandler(void (*)(), LabGPIO::Edge)+0x60>)
   103f8:	f004 f874 	bl	144e4 <printf>
    IntEdge(edge);
   103fc:	9901      	ldr	r1, [sp, #4]
   103fe:	9803      	ldr	r0, [sp, #12]
   10400:	f000 f892 	bl	10528 <LabGPIO::IntEdge(LabGPIO::Edge)>
   10404:	4623      	mov	r3, r4
   10406:	4619      	mov	r1, r3
   10408:	4802      	ldr	r0, [pc, #8]	; (10414 <LabGPIO::AttachInterruptHandler(void (*)(), LabGPIO::Edge)+0x58>)
   1040a:	f002 fe23 	bl	13054 <__cyg_profile_func_exit>
  
 }
   1040e:	bf00      	nop
   10410:	b004      	add	sp, #16
   10412:	bd10      	pop	{r4, pc}
   10414:	000103bd 	.word	0x000103bd
   10418:	10000284 	.word	0x10000284
   1041c:	00017274 	.word	0x00017274

00010420 <LabGPIO::GpioInterruptHandler()>:
 void LabGPIO::GpioInterruptHandler(){
   10420:	b510      	push	{r4, lr}
   10422:	b082      	sub	sp, #8
   10424:	4674      	mov	r4, lr
   10426:	4623      	mov	r3, r4
   10428:	4619      	mov	r1, r3
   1042a:	482e      	ldr	r0, [pc, #184]	; (104e4 <LabGPIO::GpioInterruptHandler()+0xc4>)
   1042c:	f002 fdfe 	bl	1302c <__cyg_profile_func_enter>
    uint32_t selPin_local;

  
    if((LPC_GPIOINT->IO0IntStatR) | (LPC_GPIOINT->IO0IntStatF)){
   10430:	4b2d      	ldr	r3, [pc, #180]	; (104e8 <LabGPIO::GpioInterruptHandler()+0xc8>)
   10432:	685a      	ldr	r2, [r3, #4]
   10434:	4b2c      	ldr	r3, [pc, #176]	; (104e8 <LabGPIO::GpioInterruptHandler()+0xc8>)
   10436:	689b      	ldr	r3, [r3, #8]
   10438:	4313      	orrs	r3, r2
   1043a:	2b00      	cmp	r3, #0
   1043c:	bf14      	ite	ne
   1043e:	2301      	movne	r3, #1
   10440:	2300      	moveq	r3, #0
   10442:	b2db      	uxtb	r3, r3
   10444:	2b00      	cmp	r3, #0
   10446:	d01d      	beq.n	10484 <LabGPIO::GpioInterruptHandler()+0x64>
    selPin_local = __builtin_ctz(LPC_GPIOINT->IO0IntStatR | LPC_GPIOINT->IO0IntStatF);
   10448:	4b27      	ldr	r3, [pc, #156]	; (104e8 <LabGPIO::GpioInterruptHandler()+0xc8>)
   1044a:	685a      	ldr	r2, [r3, #4]
   1044c:	4b26      	ldr	r3, [pc, #152]	; (104e8 <LabGPIO::GpioInterruptHandler()+0xc8>)
   1044e:	689b      	ldr	r3, [r3, #8]
   10450:	4313      	orrs	r3, r2
   10452:	fa93 f3a3 	rbit	r3, r3
   10456:	fab3 f383 	clz	r3, r3
   1045a:	9301      	str	r3, [sp, #4]
    printf("%i\n",selPin_local);
   1045c:	9901      	ldr	r1, [sp, #4]
   1045e:	4823      	ldr	r0, [pc, #140]	; (104ec <LabGPIO::GpioInterruptHandler()+0xcc>)
   10460:	f004 f840 	bl	144e4 <printf>
    pin_isr_map[0][selPin_local]();
   10464:	4a22      	ldr	r2, [pc, #136]	; (104f0 <LabGPIO::GpioInterruptHandler()+0xd0>)
   10466:	9b01      	ldr	r3, [sp, #4]
   10468:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1046c:	4798      	blx	r3
    LPC_GPIOINT -> IO0IntClr &= ~(1<< selPin_local);
   1046e:	4b1e      	ldr	r3, [pc, #120]	; (104e8 <LabGPIO::GpioInterruptHandler()+0xc8>)
   10470:	68db      	ldr	r3, [r3, #12]
   10472:	2101      	movs	r1, #1
   10474:	9a01      	ldr	r2, [sp, #4]
   10476:	fa01 f202 	lsl.w	r2, r1, r2
   1047a:	43d2      	mvns	r2, r2
   1047c:	4611      	mov	r1, r2
   1047e:	4a1a      	ldr	r2, [pc, #104]	; (104e8 <LabGPIO::GpioInterruptHandler()+0xc8>)
   10480:	400b      	ands	r3, r1
   10482:	60d3      	str	r3, [r2, #12]
    }
    
   
  
    if((LPC_GPIOINT->IO2IntStatR) | (LPC_GPIOINT->IO2IntStatF)) {
   10484:	4b18      	ldr	r3, [pc, #96]	; (104e8 <LabGPIO::GpioInterruptHandler()+0xc8>)
   10486:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   10488:	4b17      	ldr	r3, [pc, #92]	; (104e8 <LabGPIO::GpioInterruptHandler()+0xc8>)
   1048a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1048c:	4313      	orrs	r3, r2
   1048e:	2b00      	cmp	r3, #0
   10490:	bf14      	ite	ne
   10492:	2301      	movne	r3, #1
   10494:	2300      	moveq	r3, #0
   10496:	b2db      	uxtb	r3, r3
   10498:	2b00      	cmp	r3, #0
   1049a:	d01a      	beq.n	104d2 <LabGPIO::GpioInterruptHandler()+0xb2>
    selPin_local = __builtin_ctz((LPC_GPIOINT->IO2IntStatR)|(LPC_GPIOINT->IO2IntStatF));
   1049c:	4b12      	ldr	r3, [pc, #72]	; (104e8 <LabGPIO::GpioInterruptHandler()+0xc8>)
   1049e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   104a0:	4b11      	ldr	r3, [pc, #68]	; (104e8 <LabGPIO::GpioInterruptHandler()+0xc8>)
   104a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   104a4:	4313      	orrs	r3, r2
   104a6:	fa93 f3a3 	rbit	r3, r3
   104aa:	fab3 f383 	clz	r3, r3
   104ae:	9301      	str	r3, [sp, #4]
    pin_isr_map[1][selPin_local]();
   104b0:	4a0f      	ldr	r2, [pc, #60]	; (104f0 <LabGPIO::GpioInterruptHandler()+0xd0>)
   104b2:	9b01      	ldr	r3, [sp, #4]
   104b4:	3320      	adds	r3, #32
   104b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   104ba:	4798      	blx	r3
    LPC_GPIOINT -> IO2IntClr &= ~(1<< selPin_local);
   104bc:	4b0a      	ldr	r3, [pc, #40]	; (104e8 <LabGPIO::GpioInterruptHandler()+0xc8>)
   104be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   104c0:	2101      	movs	r1, #1
   104c2:	9a01      	ldr	r2, [sp, #4]
   104c4:	fa01 f202 	lsl.w	r2, r1, r2
   104c8:	43d2      	mvns	r2, r2
   104ca:	4611      	mov	r1, r2
   104cc:	4a06      	ldr	r2, [pc, #24]	; (104e8 <LabGPIO::GpioInterruptHandler()+0xc8>)
   104ce:	400b      	ands	r3, r1
   104d0:	62d3      	str	r3, [r2, #44]	; 0x2c
   104d2:	4623      	mov	r3, r4
   104d4:	4619      	mov	r1, r3
   104d6:	4803      	ldr	r0, [pc, #12]	; (104e4 <LabGPIO::GpioInterruptHandler()+0xc4>)
   104d8:	f002 fdbc 	bl	13054 <__cyg_profile_func_exit>
    }
 }
   104dc:	bf00      	nop
   104de:	b002      	add	sp, #8
   104e0:	bd10      	pop	{r4, pc}
   104e2:	bf00      	nop
   104e4:	00010421 	.word	0x00010421
   104e8:	40028080 	.word	0x40028080
   104ec:	0001727c 	.word	0x0001727c
   104f0:	10000284 	.word	0x10000284

000104f4 <LabGPIO::EnableInterrupts()>:
 
void LabGPIO::EnableInterrupts(){
   104f4:	b510      	push	{r4, lr}
   104f6:	4674      	mov	r4, lr
   104f8:	4623      	mov	r3, r4
   104fa:	4619      	mov	r1, r3
   104fc:	4808      	ldr	r0, [pc, #32]	; (10520 <LabGPIO::EnableInterrupts()+0x2c>)
   104fe:	f002 fd95 	bl	1302c <__cyg_profile_func_enter>
  // Register GPIO_IRQn here
        RegisterIsr(GPIO_IRQn, GpioInterruptHandler );
   10502:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   10506:	2201      	movs	r2, #1
   10508:	4906      	ldr	r1, [pc, #24]	; (10524 <LabGPIO::EnableInterrupts()+0x30>)
   1050a:	2026      	movs	r0, #38	; 0x26
   1050c:	f002 fc66 	bl	12ddc <RegisterIsr(IRQn, void (*)(), bool, long)>
   10510:	4623      	mov	r3, r4
   10512:	4619      	mov	r1, r3
   10514:	4802      	ldr	r0, [pc, #8]	; (10520 <LabGPIO::EnableInterrupts()+0x2c>)
   10516:	f002 fd9d 	bl	13054 <__cyg_profile_func_exit>
 }
   1051a:	bf00      	nop
   1051c:	bd10      	pop	{r4, pc}
   1051e:	bf00      	nop
   10520:	000104f5 	.word	0x000104f5
   10524:	00010421 	.word	0x00010421

00010528 <LabGPIO::IntEdge(LabGPIO::Edge)>:
 
 void LabGPIO::IntEdge(Edge edge){
   10528:	b510      	push	{r4, lr}
   1052a:	b082      	sub	sp, #8
   1052c:	4674      	mov	r4, lr
   1052e:	9001      	str	r0, [sp, #4]
   10530:	9100      	str	r1, [sp, #0]
   10532:	4623      	mov	r3, r4
   10534:	4619      	mov	r1, r3
   10536:	4817      	ldr	r0, [pc, #92]	; (10594 <LabGPIO::IntEdge(LabGPIO::Edge)+0x6c>)
   10538:	f002 fd78 	bl	1302c <__cyg_profile_func_enter>
    switch(edge)
   1053c:	9b00      	ldr	r3, [sp, #0]
   1053e:	2b03      	cmp	r3, #3
   10540:	d820      	bhi.n	10584 <LabGPIO::IntEdge(LabGPIO::Edge)+0x5c>
   10542:	a201      	add	r2, pc, #4	; (adr r2, 10548 <LabGPIO::IntEdge(LabGPIO::Edge)+0x20>)
   10544:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   10548:	00010559 	.word	0x00010559
   1054c:	00010567 	.word	0x00010567
   10550:	0001056f 	.word	0x0001056f
   10554:	00010577 	.word	0x00010577
    {   case Edge::kNone:
                LOG_INFO("No edge selected");
   10558:	238a      	movs	r3, #138	; 0x8a
   1055a:	4a0f      	ldr	r2, [pc, #60]	; (10598 <LabGPIO::IntEdge(LabGPIO::Edge)+0x70>)
   1055c:	490f      	ldr	r1, [pc, #60]	; (1059c <LabGPIO::IntEdge(LabGPIO::Edge)+0x74>)
   1055e:	4810      	ldr	r0, [pc, #64]	; (105a0 <LabGPIO::IntEdge(LabGPIO::Edge)+0x78>)
   10560:	f003 ffc0 	bl	144e4 <printf>
                break;
   10564:	e00e      	b.n	10584 <LabGPIO::IntEdge(LabGPIO::Edge)+0x5c>
        case Edge::kRising:
            setRisingEdge();
   10566:	9801      	ldr	r0, [sp, #4]
   10568:	f000 f850 	bl	1060c <LabGPIO::setRisingEdge()>
            break;
   1056c:	e00a      	b.n	10584 <LabGPIO::IntEdge(LabGPIO::Edge)+0x5c>
        case Edge::kFalling:
            setFallingEdge();
   1056e:	9801      	ldr	r0, [sp, #4]
   10570:	f000 f818 	bl	105a4 <LabGPIO::setFallingEdge()>
            break;
   10574:	e006      	b.n	10584 <LabGPIO::IntEdge(LabGPIO::Edge)+0x5c>
        case Edge::kBoth:
            setRisingEdge();
   10576:	9801      	ldr	r0, [sp, #4]
   10578:	f000 f848 	bl	1060c <LabGPIO::setRisingEdge()>
            setFallingEdge();
   1057c:	9801      	ldr	r0, [sp, #4]
   1057e:	f000 f811 	bl	105a4 <LabGPIO::setFallingEdge()>
            break;   
   10582:	bf00      	nop
   10584:	4623      	mov	r3, r4
   10586:	4619      	mov	r1, r3
   10588:	4802      	ldr	r0, [pc, #8]	; (10594 <LabGPIO::IntEdge(LabGPIO::Edge)+0x6c>)
   1058a:	f002 fd63 	bl	13054 <__cyg_profile_func_exit>
    }
 }
   1058e:	bf00      	nop
   10590:	b002      	add	sp, #8
   10592:	bd10      	pop	{r4, pc}
   10594:	00010529 	.word	0x00010529
   10598:	000172d8 	.word	0x000172d8
   1059c:	000172cc 	.word	0x000172cc
   105a0:	00017280 	.word	0x00017280

000105a4 <LabGPIO::setFallingEdge()>:
 void LabGPIO::setFallingEdge(){
   105a4:	b530      	push	{r4, r5, lr}
   105a6:	b083      	sub	sp, #12
   105a8:	4675      	mov	r5, lr
   105aa:	9001      	str	r0, [sp, #4]
   105ac:	462b      	mov	r3, r5
   105ae:	4619      	mov	r1, r3
   105b0:	4814      	ldr	r0, [pc, #80]	; (10604 <LabGPIO::setFallingEdge()+0x60>)
   105b2:	f002 fd3b 	bl	1302c <__cyg_profile_func_enter>
    *interrupts[interrupt_port][4] |= (1<<SelPin);
   105b6:	9b01      	ldr	r3, [sp, #4]
   105b8:	789b      	ldrb	r3, [r3, #2]
   105ba:	4619      	mov	r1, r3
   105bc:	4a12      	ldr	r2, [pc, #72]	; (10608 <LabGPIO::setFallingEdge()+0x64>)
   105be:	460b      	mov	r3, r1
   105c0:	009b      	lsls	r3, r3, #2
   105c2:	440b      	add	r3, r1
   105c4:	009b      	lsls	r3, r3, #2
   105c6:	4413      	add	r3, r2
   105c8:	3310      	adds	r3, #16
   105ca:	681b      	ldr	r3, [r3, #0]
   105cc:	681a      	ldr	r2, [r3, #0]
   105ce:	9b01      	ldr	r3, [sp, #4]
   105d0:	785b      	ldrb	r3, [r3, #1]
   105d2:	4619      	mov	r1, r3
   105d4:	2301      	movs	r3, #1
   105d6:	408b      	lsls	r3, r1
   105d8:	461c      	mov	r4, r3
   105da:	9b01      	ldr	r3, [sp, #4]
   105dc:	789b      	ldrb	r3, [r3, #2]
   105de:	4618      	mov	r0, r3
   105e0:	4909      	ldr	r1, [pc, #36]	; (10608 <LabGPIO::setFallingEdge()+0x64>)
   105e2:	4603      	mov	r3, r0
   105e4:	009b      	lsls	r3, r3, #2
   105e6:	4403      	add	r3, r0
   105e8:	009b      	lsls	r3, r3, #2
   105ea:	440b      	add	r3, r1
   105ec:	3310      	adds	r3, #16
   105ee:	681b      	ldr	r3, [r3, #0]
   105f0:	4322      	orrs	r2, r4
   105f2:	601a      	str	r2, [r3, #0]
   105f4:	462b      	mov	r3, r5
   105f6:	4619      	mov	r1, r3
   105f8:	4802      	ldr	r0, [pc, #8]	; (10604 <LabGPIO::setFallingEdge()+0x60>)
   105fa:	f002 fd2b 	bl	13054 <__cyg_profile_func_exit>
 }
   105fe:	bf00      	nop
   10600:	b003      	add	sp, #12
   10602:	bd30      	pop	{r4, r5, pc}
   10604:	000105a5 	.word	0x000105a5
   10608:	10000000 	.word	0x10000000

0001060c <LabGPIO::setRisingEdge()>:
 void LabGPIO::setRisingEdge(){
   1060c:	b530      	push	{r4, r5, lr}
   1060e:	b083      	sub	sp, #12
   10610:	4675      	mov	r5, lr
   10612:	9001      	str	r0, [sp, #4]
   10614:	462b      	mov	r3, r5
   10616:	4619      	mov	r1, r3
   10618:	4814      	ldr	r0, [pc, #80]	; (1066c <LabGPIO::setRisingEdge()+0x60>)
   1061a:	f002 fd07 	bl	1302c <__cyg_profile_func_enter>
    *interrupts[interrupt_port][3] |= (1<<SelPin);
   1061e:	9b01      	ldr	r3, [sp, #4]
   10620:	789b      	ldrb	r3, [r3, #2]
   10622:	4619      	mov	r1, r3
   10624:	4a12      	ldr	r2, [pc, #72]	; (10670 <LabGPIO::setRisingEdge()+0x64>)
   10626:	460b      	mov	r3, r1
   10628:	009b      	lsls	r3, r3, #2
   1062a:	440b      	add	r3, r1
   1062c:	009b      	lsls	r3, r3, #2
   1062e:	4413      	add	r3, r2
   10630:	330c      	adds	r3, #12
   10632:	681b      	ldr	r3, [r3, #0]
   10634:	681a      	ldr	r2, [r3, #0]
   10636:	9b01      	ldr	r3, [sp, #4]
   10638:	785b      	ldrb	r3, [r3, #1]
   1063a:	4619      	mov	r1, r3
   1063c:	2301      	movs	r3, #1
   1063e:	408b      	lsls	r3, r1
   10640:	461c      	mov	r4, r3
   10642:	9b01      	ldr	r3, [sp, #4]
   10644:	789b      	ldrb	r3, [r3, #2]
   10646:	4618      	mov	r0, r3
   10648:	4909      	ldr	r1, [pc, #36]	; (10670 <LabGPIO::setRisingEdge()+0x64>)
   1064a:	4603      	mov	r3, r0
   1064c:	009b      	lsls	r3, r3, #2
   1064e:	4403      	add	r3, r0
   10650:	009b      	lsls	r3, r3, #2
   10652:	440b      	add	r3, r1
   10654:	330c      	adds	r3, #12
   10656:	681b      	ldr	r3, [r3, #0]
   10658:	4322      	orrs	r2, r4
   1065a:	601a      	str	r2, [r3, #0]
   1065c:	462b      	mov	r3, r5
   1065e:	4619      	mov	r1, r3
   10660:	4802      	ldr	r0, [pc, #8]	; (1066c <LabGPIO::setRisingEdge()+0x60>)
   10662:	f002 fcf7 	bl	13054 <__cyg_profile_func_exit>
 }
   10666:	bf00      	nop
   10668:	b003      	add	sp, #12
   1066a:	bd30      	pop	{r4, r5, pc}
   1066c:	0001060d 	.word	0x0001060d
   10670:	10000000 	.word	0x10000000

00010674 <(anonymous namespace)::DefaultUptime()>:
{
// uptime in nanoseconds
inline uint64_t uptime = 0;
// Returns the system uptime in nanoseconds, do not use this function directly
[[gnu::always_inline]] inline uint64_t DefaultUptime()
{
   10674:	b570      	push	{r4, r5, r6, lr}
   10676:	4676      	mov	r6, lr
   10678:	4633      	mov	r3, r6
   1067a:	4619      	mov	r1, r3
   1067c:	4807      	ldr	r0, [pc, #28]	; (1069c <(anonymous namespace)::DefaultUptime()+0x28>)
   1067e:	f002 fcd5 	bl	1302c <__cyg_profile_func_enter>
  return uptime;
   10682:	4b07      	ldr	r3, [pc, #28]	; (106a0 <(anonymous namespace)::DefaultUptime()+0x2c>)
   10684:	e9d3 4500 	ldrd	r4, r5, [r3]
   10688:	4633      	mov	r3, r6
   1068a:	4619      	mov	r1, r3
   1068c:	4803      	ldr	r0, [pc, #12]	; (1069c <(anonymous namespace)::DefaultUptime()+0x28>)
   1068e:	f002 fce1 	bl	13054 <__cyg_profile_func_exit>
   10692:	4623      	mov	r3, r4
   10694:	462c      	mov	r4, r5
}
   10696:	4618      	mov	r0, r3
   10698:	4621      	mov	r1, r4
   1069a:	bd70      	pop	{r4, r5, r6, pc}
   1069c:	00010675 	.word	0x00010675
   106a0:	10000388 	.word	0x10000388

000106a4 <Milliseconds()>:
{
  Uptime = uptime_function;
}
// Get system uptime in milliseconds as a 64-bit integer
inline uint64_t Milliseconds()
{
   106a4:	b570      	push	{r4, r5, r6, lr}
   106a6:	4674      	mov	r4, lr
   106a8:	4623      	mov	r3, r4
   106aa:	4619      	mov	r1, r3
   106ac:	480c      	ldr	r0, [pc, #48]	; (106e0 <Milliseconds()+0x3c>)
   106ae:	f002 fcbd 	bl	1302c <__cyg_profile_func_enter>
  return Uptime() / 1'000;
   106b2:	4b0c      	ldr	r3, [pc, #48]	; (106e4 <Milliseconds()+0x40>)
   106b4:	681b      	ldr	r3, [r3, #0]
   106b6:	4798      	blx	r3
   106b8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   106bc:	f04f 0300 	mov.w	r3, #0
   106c0:	f006 fbe0 	bl	16e84 <__aeabi_uldivmod>
   106c4:	4602      	mov	r2, r0
   106c6:	460b      	mov	r3, r1
   106c8:	4615      	mov	r5, r2
   106ca:	461e      	mov	r6, r3
   106cc:	4623      	mov	r3, r4
   106ce:	4619      	mov	r1, r3
   106d0:	4803      	ldr	r0, [pc, #12]	; (106e0 <Milliseconds()+0x3c>)
   106d2:	f002 fcbf 	bl	13054 <__cyg_profile_func_exit>
   106d6:	462b      	mov	r3, r5
   106d8:	4634      	mov	r4, r6
}
   106da:	4618      	mov	r0, r3
   106dc:	4621      	mov	r1, r4
   106de:	bd70      	pop	{r4, r5, r6, pc}
   106e0:	000106a5 	.word	0x000106a5
   106e4:	10000028 	.word	0x10000028

000106e8 <Wait(unsigned long long)::{lambda()#1}::operator()() const>:
  return status;
}

inline Status Wait(uint64_t timeout)
{
  return Wait(timeout, []() -> bool { return false; });
   106e8:	b530      	push	{r4, r5, lr}
   106ea:	b083      	sub	sp, #12
   106ec:	4675      	mov	r5, lr
   106ee:	9001      	str	r0, [sp, #4]
   106f0:	462b      	mov	r3, r5
   106f2:	4619      	mov	r1, r3
   106f4:	4806      	ldr	r0, [pc, #24]	; (10710 <Wait(unsigned long long)::{lambda()#1}::operator()() const+0x28>)
   106f6:	f002 fc99 	bl	1302c <__cyg_profile_func_enter>
   106fa:	2400      	movs	r4, #0
   106fc:	462b      	mov	r3, r5
   106fe:	4619      	mov	r1, r3
   10700:	4803      	ldr	r0, [pc, #12]	; (10710 <Wait(unsigned long long)::{lambda()#1}::operator()() const+0x28>)
   10702:	f002 fca7 	bl	13054 <__cyg_profile_func_exit>
   10706:	4623      	mov	r3, r4
   10708:	4618      	mov	r0, r3
   1070a:	b003      	add	sp, #12
   1070c:	bd30      	pop	{r4, r5, pc}
   1070e:	bf00      	nop
   10710:	000106e9 	.word	0x000106e9

00010714 <Wait(unsigned long long)::{lambda()#1}::_FUN()>:
   10714:	b538      	push	{r3, r4, r5, lr}
   10716:	4674      	mov	r4, lr
   10718:	4623      	mov	r3, r4
   1071a:	4619      	mov	r1, r3
   1071c:	4807      	ldr	r0, [pc, #28]	; (1073c <Wait(unsigned long long)::{lambda()#1}::_FUN()+0x28>)
   1071e:	f002 fc85 	bl	1302c <__cyg_profile_func_enter>
   10722:	2000      	movs	r0, #0
   10724:	f7ff ffe0 	bl	106e8 <Wait(unsigned long long)::{lambda()#1}::operator()() const>
   10728:	4603      	mov	r3, r0
   1072a:	461d      	mov	r5, r3
   1072c:	4623      	mov	r3, r4
   1072e:	4619      	mov	r1, r3
   10730:	4802      	ldr	r0, [pc, #8]	; (1073c <Wait(unsigned long long)::{lambda()#1}::_FUN()+0x28>)
   10732:	f002 fc8f 	bl	13054 <__cyg_profile_func_exit>
   10736:	462b      	mov	r3, r5
   10738:	4618      	mov	r0, r3
   1073a:	bd38      	pop	{r3, r4, r5, pc}
   1073c:	00010715 	.word	0x00010715

00010740 <Wait(unsigned long long)>:
{
   10740:	b5f0      	push	{r4, r5, r6, r7, lr}
   10742:	b089      	sub	sp, #36	; 0x24
   10744:	4675      	mov	r5, lr
   10746:	e9cd 0100 	strd	r0, r1, [sp]
   1074a:	462b      	mov	r3, r5
   1074c:	4619      	mov	r1, r3
   1074e:	482b      	ldr	r0, [pc, #172]	; (107fc <Wait(unsigned long long)+0xbc>)
   10750:	f002 fc6c 	bl	1302c <__cyg_profile_func_enter>
   10754:	e9dd 3400 	ldrd	r3, r4, [sp]
   10758:	e9cd 3406 	strd	r3, r4, [sp, #24]
   1075c:	f88d 6008 	strb.w	r6, [sp, #8]
   10760:	462b      	mov	r3, r5
   10762:	4619      	mov	r1, r3
   10764:	4826      	ldr	r0, [pc, #152]	; (10800 <Wait(unsigned long long)+0xc0>)
   10766:	f002 fc61 	bl	1302c <__cyg_profile_func_enter>
  uint64_t timeout_time = 0;
   1076a:	f04f 0300 	mov.w	r3, #0
   1076e:	f04f 0400 	mov.w	r4, #0
   10772:	e9cd 3404 	strd	r3, r4, [sp, #16]
  if (timeout == kMaxWait)
   10776:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
   1077a:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
   1077e:	bf08      	it	eq
   10780:	f1b3 3fff 	cmpeq.w	r3, #4294967295	; 0xffffffff
   10784:	d106      	bne.n	10794 <Wait(unsigned long long)+0x54>
    timeout_time = kMaxWait;
   10786:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1078a:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   1078e:	e9cd 3404 	strd	r3, r4, [sp, #16]
   10792:	e00a      	b.n	107aa <Wait(unsigned long long)+0x6a>
    timeout_time = Milliseconds() + timeout;
   10794:	f7ff ff86 	bl	106a4 <Milliseconds()>
   10798:	460a      	mov	r2, r1
   1079a:	4601      	mov	r1, r0
   1079c:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
   107a0:	185e      	adds	r6, r3, r1
   107a2:	eb44 0702 	adc.w	r7, r4, r2
   107a6:	e9cd 6704 	strd	r6, r7, [sp, #16]
  Status status = Status::kTimedOut;
   107aa:	2301      	movs	r3, #1
   107ac:	9303      	str	r3, [sp, #12]
  while (Milliseconds() < timeout_time)
   107ae:	f7ff ff79 	bl	106a4 <Milliseconds()>
   107b2:	460a      	mov	r2, r1
   107b4:	4601      	mov	r1, r0
   107b6:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
   107ba:	42a2      	cmp	r2, r4
   107bc:	bf08      	it	eq
   107be:	4299      	cmpeq	r1, r3
   107c0:	bf34      	ite	cc
   107c2:	2301      	movcc	r3, #1
   107c4:	2300      	movcs	r3, #0
   107c6:	b2db      	uxtb	r3, r3
   107c8:	2b00      	cmp	r3, #0
   107ca:	d008      	beq.n	107de <Wait(unsigned long long)+0x9e>
    if (is_done())
   107cc:	ab02      	add	r3, sp, #8
   107ce:	4618      	mov	r0, r3
   107d0:	f7ff ff8a 	bl	106e8 <Wait(unsigned long long)::{lambda()#1}::operator()() const>
   107d4:	4603      	mov	r3, r0
   107d6:	2b00      	cmp	r3, #0
   107d8:	d0e9      	beq.n	107ae <Wait(unsigned long long)+0x6e>
      status = Status::kSuccess;
   107da:	2300      	movs	r3, #0
   107dc:	9303      	str	r3, [sp, #12]
  return status;
   107de:	9c03      	ldr	r4, [sp, #12]
   107e0:	462b      	mov	r3, r5
   107e2:	4619      	mov	r1, r3
   107e4:	4806      	ldr	r0, [pc, #24]	; (10800 <Wait(unsigned long long)+0xc0>)
   107e6:	f002 fc35 	bl	13054 <__cyg_profile_func_exit>
   107ea:	462b      	mov	r3, r5
   107ec:	4619      	mov	r1, r3
   107ee:	4803      	ldr	r0, [pc, #12]	; (107fc <Wait(unsigned long long)+0xbc>)
   107f0:	f002 fc30 	bl	13054 <__cyg_profile_func_exit>
  return Wait(timeout, []() -> bool { return false; });
   107f4:	4623      	mov	r3, r4
}
   107f6:	4618      	mov	r0, r3
   107f8:	b009      	add	sp, #36	; 0x24
   107fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
   107fc:	00010741 	.word	0x00010741
   10800:	00010af1 	.word	0x00010af1

00010804 <Delay(unsigned long long)>:

// Delay the system for a duration of time
inline void Delay([[maybe_unused]] uint64_t delay_time_ms)
{
   10804:	b510      	push	{r4, lr}
   10806:	b082      	sub	sp, #8
   10808:	4674      	mov	r4, lr
   1080a:	e9cd 0100 	strd	r0, r1, [sp]
   1080e:	4623      	mov	r3, r4
   10810:	4619      	mov	r1, r3
   10812:	4807      	ldr	r0, [pc, #28]	; (10830 <Delay(unsigned long long)+0x2c>)
   10814:	f002 fc0a 	bl	1302c <__cyg_profile_func_enter>
#if defined(HOST_TEST)
  return;
#else
  Wait(delay_time_ms);
   10818:	e9dd 0100 	ldrd	r0, r1, [sp]
   1081c:	f7ff ff90 	bl	10740 <Wait(unsigned long long)>
   10820:	4623      	mov	r3, r4
   10822:	4619      	mov	r1, r3
   10824:	4802      	ldr	r0, [pc, #8]	; (10830 <Delay(unsigned long long)+0x2c>)
   10826:	f002 fc15 	bl	13054 <__cyg_profile_func_exit>
#endif  // HOST_TEST
}
   1082a:	bf00      	nop
   1082c:	b002      	add	sp, #8
   1082e:	bd10      	pop	{r4, pc}
   10830:	00010805 	.word	0x00010805

00010834 <Gpio::SetHigh()>:
  inline void SetDirection(Direction direction) override
  {
    (direction) ? SetAsOutput() : SetAsInput();
  }
  // Sets the GPIO output pin to high
  void SetHigh(void) override
   10834:	b530      	push	{r4, r5, lr}
   10836:	b083      	sub	sp, #12
   10838:	4675      	mov	r5, lr
   1083a:	9001      	str	r0, [sp, #4]
   1083c:	462b      	mov	r3, r5
   1083e:	4619      	mov	r1, r3
   10840:	4813      	ldr	r0, [pc, #76]	; (10890 <Gpio::SetHigh()+0x5c>)
   10842:	f002 fbf3 	bl	1302c <__cyg_profile_func_enter>
  {
    gpio_port[pin_->GetPort()]->SET = (1 << pin_->GetPin());
   10846:	9b01      	ldr	r3, [sp, #4]
   10848:	689a      	ldr	r2, [r3, #8]
   1084a:	9b01      	ldr	r3, [sp, #4]
   1084c:	689b      	ldr	r3, [r3, #8]
   1084e:	681b      	ldr	r3, [r3, #0]
   10850:	3330      	adds	r3, #48	; 0x30
   10852:	681b      	ldr	r3, [r3, #0]
   10854:	4610      	mov	r0, r2
   10856:	4798      	blx	r3
   10858:	4603      	mov	r3, r0
   1085a:	461a      	mov	r2, r3
   1085c:	2301      	movs	r3, #1
   1085e:	4093      	lsls	r3, r2
   10860:	461c      	mov	r4, r3
   10862:	9b01      	ldr	r3, [sp, #4]
   10864:	689a      	ldr	r2, [r3, #8]
   10866:	9b01      	ldr	r3, [sp, #4]
   10868:	689b      	ldr	r3, [r3, #8]
   1086a:	681b      	ldr	r3, [r3, #0]
   1086c:	332c      	adds	r3, #44	; 0x2c
   1086e:	681b      	ldr	r3, [r3, #0]
   10870:	4610      	mov	r0, r2
   10872:	4798      	blx	r3
   10874:	4603      	mov	r3, r0
   10876:	461a      	mov	r2, r3
   10878:	4b06      	ldr	r3, [pc, #24]	; (10894 <Gpio::SetHigh()+0x60>)
   1087a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   1087e:	619c      	str	r4, [r3, #24]
   10880:	462b      	mov	r3, r5
   10882:	4619      	mov	r1, r3
   10884:	4802      	ldr	r0, [pc, #8]	; (10890 <Gpio::SetHigh()+0x5c>)
   10886:	f002 fbe5 	bl	13054 <__cyg_profile_func_exit>
  }
   1088a:	bf00      	nop
   1088c:	b003      	add	sp, #12
   1088e:	bd30      	pop	{r4, r5, pc}
   10890:	00010835 	.word	0x00010835
   10894:	1000002c 	.word	0x1000002c

00010898 <Gpio::SetLow()>:
  // Sets the GPIO output pin to low
  void SetLow(void) override
   10898:	b530      	push	{r4, r5, lr}
   1089a:	b083      	sub	sp, #12
   1089c:	4675      	mov	r5, lr
   1089e:	9001      	str	r0, [sp, #4]
   108a0:	462b      	mov	r3, r5
   108a2:	4619      	mov	r1, r3
   108a4:	4813      	ldr	r0, [pc, #76]	; (108f4 <Gpio::SetLow()+0x5c>)
   108a6:	f002 fbc1 	bl	1302c <__cyg_profile_func_enter>
  {
    gpio_port[pin_->GetPort()]->CLR = (1 << pin_->GetPin());
   108aa:	9b01      	ldr	r3, [sp, #4]
   108ac:	689a      	ldr	r2, [r3, #8]
   108ae:	9b01      	ldr	r3, [sp, #4]
   108b0:	689b      	ldr	r3, [r3, #8]
   108b2:	681b      	ldr	r3, [r3, #0]
   108b4:	3330      	adds	r3, #48	; 0x30
   108b6:	681b      	ldr	r3, [r3, #0]
   108b8:	4610      	mov	r0, r2
   108ba:	4798      	blx	r3
   108bc:	4603      	mov	r3, r0
   108be:	461a      	mov	r2, r3
   108c0:	2301      	movs	r3, #1
   108c2:	4093      	lsls	r3, r2
   108c4:	461c      	mov	r4, r3
   108c6:	9b01      	ldr	r3, [sp, #4]
   108c8:	689a      	ldr	r2, [r3, #8]
   108ca:	9b01      	ldr	r3, [sp, #4]
   108cc:	689b      	ldr	r3, [r3, #8]
   108ce:	681b      	ldr	r3, [r3, #0]
   108d0:	332c      	adds	r3, #44	; 0x2c
   108d2:	681b      	ldr	r3, [r3, #0]
   108d4:	4610      	mov	r0, r2
   108d6:	4798      	blx	r3
   108d8:	4603      	mov	r3, r0
   108da:	461a      	mov	r2, r3
   108dc:	4b06      	ldr	r3, [pc, #24]	; (108f8 <Gpio::SetLow()+0x60>)
   108de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   108e2:	61dc      	str	r4, [r3, #28]
   108e4:	462b      	mov	r3, r5
   108e6:	4619      	mov	r1, r3
   108e8:	4802      	ldr	r0, [pc, #8]	; (108f4 <Gpio::SetLow()+0x5c>)
   108ea:	f002 fbb3 	bl	13054 <__cyg_profile_func_exit>
  }
   108ee:	bf00      	nop
   108f0:	b003      	add	sp, #12
   108f2:	bd30      	pop	{r4, r5, pc}
   108f4:	00010899 	.word	0x00010899
   108f8:	1000002c 	.word	0x1000002c

000108fc <Gpio::Set(GpioInterface::State)>:
  // Sets the GPIO output pin to high or low depending on the State enum
  // parameter
  void Set(State output = kHigh) override
   108fc:	b510      	push	{r4, lr}
   108fe:	b082      	sub	sp, #8
   10900:	4674      	mov	r4, lr
   10902:	9001      	str	r0, [sp, #4]
   10904:	460b      	mov	r3, r1
   10906:	f88d 3003 	strb.w	r3, [sp, #3]
   1090a:	4623      	mov	r3, r4
   1090c:	4619      	mov	r1, r3
   1090e:	480b      	ldr	r0, [pc, #44]	; (1093c <Gpio::Set(GpioInterface::State)+0x40>)
   10910:	f002 fb8c 	bl	1302c <__cyg_profile_func_enter>
  {
    (output) ? SetHigh() : SetLow();
   10914:	f89d 3003 	ldrb.w	r3, [sp, #3]
   10918:	2b00      	cmp	r3, #0
   1091a:	d003      	beq.n	10924 <Gpio::Set(GpioInterface::State)+0x28>
   1091c:	9801      	ldr	r0, [sp, #4]
   1091e:	f7ff ff89 	bl	10834 <Gpio::SetHigh()>
   10922:	e002      	b.n	1092a <Gpio::Set(GpioInterface::State)+0x2e>
   10924:	9801      	ldr	r0, [sp, #4]
   10926:	f7ff ffb7 	bl	10898 <Gpio::SetLow()>
   1092a:	4623      	mov	r3, r4
   1092c:	4619      	mov	r1, r3
   1092e:	4803      	ldr	r0, [pc, #12]	; (1093c <Gpio::Set(GpioInterface::State)+0x40>)
   10930:	f002 fb90 	bl	13054 <__cyg_profile_func_exit>
  }
   10934:	bf00      	nop
   10936:	b002      	add	sp, #8
   10938:	bd10      	pop	{r4, pc}
   1093a:	bf00      	nop
   1093c:	000108fd 	.word	0x000108fd

00010940 <int util::Value<Ssp::Peripheral, int>(Ssp::Peripheral)>:
//
// @param enum_type_value variable you would like to get the value of.
// @return the value of the enum class type variable of with the underlying
//         type of the enum class.
template <typename Enum, typename Type = typename std::underlying_type_t<Enum>>
constexpr Type Value(Enum enum_type_value)
   10940:	b530      	push	{r4, r5, lr}
   10942:	b083      	sub	sp, #12
   10944:	4675      	mov	r5, lr
   10946:	9001      	str	r0, [sp, #4]
   10948:	462b      	mov	r3, r5
   1094a:	4619      	mov	r1, r3
   1094c:	4806      	ldr	r0, [pc, #24]	; (10968 <int util::Value<Ssp::Peripheral, int>(Ssp::Peripheral)+0x28>)
   1094e:	f002 fb6d 	bl	1302c <__cyg_profile_func_enter>
{
  return static_cast<Type>(enum_type_value);
   10952:	9c01      	ldr	r4, [sp, #4]
   10954:	462b      	mov	r3, r5
   10956:	4619      	mov	r1, r3
   10958:	4803      	ldr	r0, [pc, #12]	; (10968 <int util::Value<Ssp::Peripheral, int>(Ssp::Peripheral)+0x28>)
   1095a:	f002 fb7b 	bl	13054 <__cyg_profile_func_exit>
   1095e:	4623      	mov	r3, r4
}
   10960:	4618      	mov	r0, r3
   10962:	b003      	add	sp, #12
   10964:	bd30      	pop	{r4, r5, pc}
   10966:	bf00      	nop
   10968:	00010941 	.word	0x00010941

0001096c <Ssp::IsTransferRegBusy()>:
  }

  /// Checks if the SSP controller is idle.
  /// @returns true if the controller is sending or receiving a data frame and
  /// false if it is idle.
  bool IsTransferRegBusy() override
   1096c:	b530      	push	{r4, r5, lr}
   1096e:	b085      	sub	sp, #20
   10970:	4675      	mov	r5, lr
   10972:	9001      	str	r0, [sp, #4]
   10974:	462b      	mov	r3, r5
   10976:	4619      	mov	r1, r3
   10978:	4817      	ldr	r0, [pc, #92]	; (109d8 <Ssp::IsTransferRegBusy()+0x6c>)
   1097a:	f002 fb57 	bl	1302c <__cyg_profile_func_enter>
  {
    return (bit::Read(ssp_registers[util::Value(pssp_)]->SR, kDataLineIdleBit));
   1097e:	9b01      	ldr	r3, [sp, #4]
   10980:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   10982:	4618      	mov	r0, r3
   10984:	f7ff ffdc 	bl	10940 <int util::Value<Ssp::Peripheral, int>(Ssp::Peripheral)>
   10988:	4602      	mov	r2, r0
   1098a:	4b14      	ldr	r3, [pc, #80]	; (109dc <Ssp::IsTransferRegBusy()+0x70>)
   1098c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   10990:	68db      	ldr	r3, [r3, #12]
   10992:	9303      	str	r3, [sp, #12]
   10994:	2304      	movs	r3, #4
   10996:	9302      	str	r3, [sp, #8]
   10998:	462b      	mov	r3, r5
   1099a:	4619      	mov	r1, r3
   1099c:	4810      	ldr	r0, [pc, #64]	; (109e0 <Ssp::IsTransferRegBusy()+0x74>)
   1099e:	f002 fb45 	bl	1302c <__cyg_profile_func_enter>
[[gnu::always_inline]][[nodiscard]] constexpr bool Read(T target,
                                                        uint32_t position)
{
  static_assert(std::numeric_limits<T>::is_integer,
                "Read only accepts intergers.");
  return static_cast<bool>(target & (1 << position));
   109a2:	2201      	movs	r2, #1
   109a4:	9b02      	ldr	r3, [sp, #8]
   109a6:	fa02 f303 	lsl.w	r3, r2, r3
   109aa:	461a      	mov	r2, r3
   109ac:	9b03      	ldr	r3, [sp, #12]
   109ae:	4013      	ands	r3, r2
   109b0:	2b00      	cmp	r3, #0
   109b2:	bf14      	ite	ne
   109b4:	2301      	movne	r3, #1
   109b6:	2300      	moveq	r3, #0
   109b8:	b2dc      	uxtb	r4, r3
   109ba:	462b      	mov	r3, r5
   109bc:	4619      	mov	r1, r3
   109be:	4808      	ldr	r0, [pc, #32]	; (109e0 <Ssp::IsTransferRegBusy()+0x74>)
   109c0:	f002 fb48 	bl	13054 <__cyg_profile_func_exit>
   109c4:	462b      	mov	r3, r5
   109c6:	4619      	mov	r1, r3
   109c8:	4803      	ldr	r0, [pc, #12]	; (109d8 <Ssp::IsTransferRegBusy()+0x6c>)
   109ca:	f002 fb43 	bl	13054 <__cyg_profile_func_exit>
   109ce:	4623      	mov	r3, r4
  }
   109d0:	4618      	mov	r0, r3
   109d2:	b005      	add	sp, #20
   109d4:	bd30      	pop	{r4, r5, pc}
   109d6:	bf00      	nop
   109d8:	0001096d 	.word	0x0001096d
   109dc:	10000044 	.word	0x10000044
   109e0:	00010b9d 	.word	0x00010b9d

000109e4 <Ssp::Transfer(unsigned short)>:
  /// data register. This functions for both transmitting and
  /// receiving data. It is recommended this region be protected
  /// by a mutex.
  /// @param data - information to be placed in data register
  /// @return - received data from external device
  uint16_t Transfer(uint16_t data) override
   109e4:	b530      	push	{r4, r5, lr}
   109e6:	b085      	sub	sp, #20
   109e8:	4675      	mov	r5, lr
   109ea:	9001      	str	r0, [sp, #4]
   109ec:	460b      	mov	r3, r1
   109ee:	f8ad 3002 	strh.w	r3, [sp, #2]
   109f2:	462b      	mov	r3, r5
   109f4:	4619      	mov	r1, r3
   109f6:	4814      	ldr	r0, [pc, #80]	; (10a48 <Ssp::Transfer(unsigned short)+0x64>)
   109f8:	f002 fb18 	bl	1302c <__cyg_profile_func_enter>
  {
    uint32_t pssp = util::Value(pssp_);
   109fc:	9b01      	ldr	r3, [sp, #4]
   109fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   10a00:	4618      	mov	r0, r3
   10a02:	f7ff ff9d 	bl	10940 <int util::Value<Ssp::Peripheral, int>(Ssp::Peripheral)>
   10a06:	4603      	mov	r3, r0
   10a08:	9303      	str	r3, [sp, #12]

    ssp_registers[pssp]->DR = data;
   10a0a:	4a10      	ldr	r2, [pc, #64]	; (10a4c <Ssp::Transfer(unsigned short)+0x68>)
   10a0c:	9b03      	ldr	r3, [sp, #12]
   10a0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10a12:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   10a16:	609a      	str	r2, [r3, #8]
    while (IsTransferRegBusy())
   10a18:	9801      	ldr	r0, [sp, #4]
   10a1a:	f7ff ffa7 	bl	1096c <Ssp::IsTransferRegBusy()>
   10a1e:	4603      	mov	r3, r0
   10a20:	2b00      	cmp	r3, #0
   10a22:	d001      	beq.n	10a28 <Ssp::Transfer(unsigned short)+0x44>
    {
      continue;
   10a24:	bf00      	nop
    while (IsTransferRegBusy())
   10a26:	e7f7      	b.n	10a18 <Ssp::Transfer(unsigned short)+0x34>
    }
    return static_cast<uint16_t>(ssp_registers[pssp]->DR);
   10a28:	4a08      	ldr	r2, [pc, #32]	; (10a4c <Ssp::Transfer(unsigned short)+0x68>)
   10a2a:	9b03      	ldr	r3, [sp, #12]
   10a2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10a30:	689b      	ldr	r3, [r3, #8]
   10a32:	b29c      	uxth	r4, r3
   10a34:	462b      	mov	r3, r5
   10a36:	4619      	mov	r1, r3
   10a38:	4803      	ldr	r0, [pc, #12]	; (10a48 <Ssp::Transfer(unsigned short)+0x64>)
   10a3a:	f002 fb0b 	bl	13054 <__cyg_profile_func_exit>
   10a3e:	4623      	mov	r3, r4
  }
   10a40:	4618      	mov	r0, r3
   10a42:	b005      	add	sp, #20
   10a44:	bd30      	pop	{r4, r5, pc}
   10a46:	bf00      	nop
   10a48:	000109e5 	.word	0x000109e5
   10a4c:	10000044 	.word	0x10000044

00010a50 <main>:
#include "utility/time.hpp"
#include "LabGPIO.hpp"
void GpioInterruptCallback();   

int main() 
{ 
   10a50:	b500      	push	{lr}
   10a52:	b083      	sub	sp, #12
   10a54:	4673      	mov	r3, lr
   10a56:	4619      	mov	r1, r3
   10a58:	480b      	ldr	r0, [pc, #44]	; (10a88 <main+0x38>)
   10a5a:	f002 fae7 	bl	1302c <__cyg_profile_func_enter>
  LOG_INFO("Start");
   10a5e:	2312      	movs	r3, #18
   10a60:	4a0a      	ldr	r2, [pc, #40]	; (10a8c <main+0x3c>)
   10a62:	490b      	ldr	r1, [pc, #44]	; (10a90 <main+0x40>)
   10a64:	480b      	ldr	r0, [pc, #44]	; (10a94 <main+0x44>)
   10a66:	f003 fd3d 	bl	144e4 <printf>
  /*LabGPIO Int(0,29);
  Int.SetAsInput();
  LPC_GPIOINT -> IO0IntEnR = (1<<29);
  RegisterIsr(GPIO_IRQn, GpioInterruptCallback);
  */
  LabGPIO gpio(0,29);
   10a6a:	466b      	mov	r3, sp
   10a6c:	221d      	movs	r2, #29
   10a6e:	2100      	movs	r1, #0
   10a70:	4618      	mov	r0, r3
   10a72:	f7ff fc77 	bl	10364 <LabGPIO::LabGPIO(unsigned char, unsigned char)>
  //gpio.SetAsInput();
  gpio.AttachInterruptHandler(&GpioInterruptCallback,LabGPIO::Edge::kRising);
   10a76:	466b      	mov	r3, sp
   10a78:	2201      	movs	r2, #1
   10a7a:	4907      	ldr	r1, [pc, #28]	; (10a98 <main+0x48>)
   10a7c:	4618      	mov	r0, r3
   10a7e:	f7ff fc9d 	bl	103bc <LabGPIO::AttachInterruptHandler(void (*)(), LabGPIO::Edge)>
  gpio.EnableInterrupts();
   10a82:	f7ff fd37 	bl	104f4 <LabGPIO::EnableInterrupts()>
  while(true)
   10a86:	e7fe      	b.n	10a86 <main+0x36>
   10a88:	00010a51 	.word	0x00010a51
   10a8c:	000173a4 	.word	0x000173a4
   10a90:	00017300 	.word	0x00017300
   10a94:	0001730c 	.word	0x0001730c
   10a98:	00010a9d 	.word	0x00010a9d

00010a9c <GpioInterruptCallback()>:
  }
  return 0;
     
}
void GpioInterruptCallback()
{
   10a9c:	b510      	push	{r4, lr}
   10a9e:	4674      	mov	r4, lr
   10aa0:	4623      	mov	r3, r4
   10aa2:	4619      	mov	r1, r3
   10aa4:	480d      	ldr	r0, [pc, #52]	; (10adc <GpioInterruptCallback()+0x40>)
   10aa6:	f002 fac1 	bl	1302c <__cyg_profile_func_enter>
    LOG_INFO("In the interrupt");
   10aaa:	2329      	movs	r3, #41	; 0x29
   10aac:	4a0c      	ldr	r2, [pc, #48]	; (10ae0 <GpioInterruptCallback()+0x44>)
   10aae:	490d      	ldr	r1, [pc, #52]	; (10ae4 <GpioInterruptCallback()+0x48>)
   10ab0:	480d      	ldr	r0, [pc, #52]	; (10ae8 <GpioInterruptCallback()+0x4c>)
   10ab2:	f003 fd17 	bl	144e4 <printf>
    Delay(500);
   10ab6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   10aba:	f04f 0100 	mov.w	r1, #0
   10abe:	f7ff fea1 	bl	10804 <Delay(unsigned long long)>
  // 4) For the callback, do anything such as printf or blink and LED here to test your ISR
  // 5) MUST! Clear the source of the GPIO interrupt
    LPC_GPIOINT->IO0IntClr &= ~(1<<29);
   10ac2:	4b0a      	ldr	r3, [pc, #40]	; (10aec <GpioInterruptCallback()+0x50>)
   10ac4:	68db      	ldr	r3, [r3, #12]
   10ac6:	4a09      	ldr	r2, [pc, #36]	; (10aec <GpioInterruptCallback()+0x50>)
   10ac8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
   10acc:	60d3      	str	r3, [r2, #12]
   10ace:	4623      	mov	r3, r4
   10ad0:	4619      	mov	r1, r3
   10ad2:	4802      	ldr	r0, [pc, #8]	; (10adc <GpioInterruptCallback()+0x40>)
   10ad4:	f002 fabe 	bl	13054 <__cyg_profile_func_exit>
   10ad8:	bf00      	nop
   10ada:	bd10      	pop	{r4, pc}
   10adc:	00010a9d 	.word	0x00010a9d
   10ae0:	000173b0 	.word	0x000173b0
   10ae4:	00017398 	.word	0x00017398
   10ae8:	0001734c 	.word	0x0001734c
   10aec:	40028080 	.word	0x40028080

00010af0 <Status Wait<Wait(unsigned long long)::{lambda()#1}>(unsigned long long, Wait(unsigned long long)::{lambda()#1})>:
inline Status Wait(uint64_t timeout, F is_done)
   10af0:	e92d 4830 	stmdb	sp!, {r4, r5, fp, lr}
   10af4:	b088      	sub	sp, #32
   10af6:	4675      	mov	r5, lr
   10af8:	e9cd 0102 	strd	r0, r1, [sp, #8]
   10afc:	f88d 2004 	strb.w	r2, [sp, #4]
   10b00:	462b      	mov	r3, r5
   10b02:	4619      	mov	r1, r3
   10b04:	4824      	ldr	r0, [pc, #144]	; (10b98 <Status Wait<Wait(unsigned long long)::{lambda()#1}>(unsigned long long, Wait(unsigned long long)::{lambda()#1})+0xa8>)
   10b06:	f002 fa91 	bl	1302c <__cyg_profile_func_enter>
  uint64_t timeout_time = 0;
   10b0a:	f04f 0300 	mov.w	r3, #0
   10b0e:	f04f 0400 	mov.w	r4, #0
   10b12:	e9cd 3406 	strd	r3, r4, [sp, #24]
  if (timeout == kMaxWait)
   10b16:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
   10b1a:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
   10b1e:	bf08      	it	eq
   10b20:	f1b3 3fff 	cmpeq.w	r3, #4294967295	; 0xffffffff
   10b24:	d106      	bne.n	10b34 <Status Wait<Wait(unsigned long long)::{lambda()#1}>(unsigned long long, Wait(unsigned long long)::{lambda()#1})+0x44>
    timeout_time = kMaxWait;
   10b26:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   10b2a:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   10b2e:	e9cd 3406 	strd	r3, r4, [sp, #24]
   10b32:	e00b      	b.n	10b4c <Status Wait<Wait(unsigned long long)::{lambda()#1}>(unsigned long long, Wait(unsigned long long)::{lambda()#1})+0x5c>
    timeout_time = Milliseconds() + timeout;
   10b34:	f7ff fdb6 	bl	106a4 <Milliseconds()>
   10b38:	460a      	mov	r2, r1
   10b3a:	4601      	mov	r1, r0
   10b3c:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
   10b40:	eb13 0b01 	adds.w	fp, r3, r1
   10b44:	eb44 0c02 	adc.w	ip, r4, r2
   10b48:	e9cd bc06 	strd	fp, ip, [sp, #24]
  Status status = Status::kTimedOut;
   10b4c:	2301      	movs	r3, #1
   10b4e:	9305      	str	r3, [sp, #20]
  while (Milliseconds() < timeout_time)
   10b50:	f7ff fda8 	bl	106a4 <Milliseconds()>
   10b54:	460a      	mov	r2, r1
   10b56:	4601      	mov	r1, r0
   10b58:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
   10b5c:	42a2      	cmp	r2, r4
   10b5e:	bf08      	it	eq
   10b60:	4299      	cmpeq	r1, r3
   10b62:	bf34      	ite	cc
   10b64:	2301      	movcc	r3, #1
   10b66:	2300      	movcs	r3, #0
   10b68:	b2db      	uxtb	r3, r3
   10b6a:	2b00      	cmp	r3, #0
   10b6c:	d008      	beq.n	10b80 <Status Wait<Wait(unsigned long long)::{lambda()#1}>(unsigned long long, Wait(unsigned long long)::{lambda()#1})+0x90>
    if (is_done())
   10b6e:	ab01      	add	r3, sp, #4
   10b70:	4618      	mov	r0, r3
   10b72:	f7ff fdb9 	bl	106e8 <Wait(unsigned long long)::{lambda()#1}::operator()() const>
   10b76:	4603      	mov	r3, r0
   10b78:	2b00      	cmp	r3, #0
   10b7a:	d0e9      	beq.n	10b50 <Status Wait<Wait(unsigned long long)::{lambda()#1}>(unsigned long long, Wait(unsigned long long)::{lambda()#1})+0x60>
      status = Status::kSuccess;
   10b7c:	2300      	movs	r3, #0
   10b7e:	9305      	str	r3, [sp, #20]
  return status;
   10b80:	9c05      	ldr	r4, [sp, #20]
   10b82:	462b      	mov	r3, r5
   10b84:	4619      	mov	r1, r3
   10b86:	4804      	ldr	r0, [pc, #16]	; (10b98 <Status Wait<Wait(unsigned long long)::{lambda()#1}>(unsigned long long, Wait(unsigned long long)::{lambda()#1})+0xa8>)
   10b88:	f002 fa64 	bl	13054 <__cyg_profile_func_exit>
   10b8c:	4623      	mov	r3, r4
}
   10b8e:	4618      	mov	r0, r3
   10b90:	b008      	add	sp, #32
   10b92:	e8bd 8830 	ldmia.w	sp!, {r4, r5, fp, pc}
   10b96:	bf00      	nop
   10b98:	00010af1 	.word	0x00010af1

00010b9c <bool bit::Read<unsigned long>(unsigned long, unsigned long)>:
[[gnu::always_inline]][[nodiscard]] constexpr bool Read(T target,
   10b9c:	b530      	push	{r4, r5, lr}
   10b9e:	b083      	sub	sp, #12
   10ba0:	4675      	mov	r5, lr
   10ba2:	9001      	str	r0, [sp, #4]
   10ba4:	9100      	str	r1, [sp, #0]
   10ba6:	462b      	mov	r3, r5
   10ba8:	4619      	mov	r1, r3
   10baa:	480c      	ldr	r0, [pc, #48]	; (10bdc <bool bit::Read<unsigned long>(unsigned long, unsigned long)+0x40>)
   10bac:	f002 fa3e 	bl	1302c <__cyg_profile_func_enter>
  return static_cast<bool>(target & (1 << position));
   10bb0:	2201      	movs	r2, #1
   10bb2:	9b00      	ldr	r3, [sp, #0]
   10bb4:	fa02 f303 	lsl.w	r3, r2, r3
   10bb8:	461a      	mov	r2, r3
   10bba:	9b01      	ldr	r3, [sp, #4]
   10bbc:	4013      	ands	r3, r2
   10bbe:	2b00      	cmp	r3, #0
   10bc0:	bf14      	ite	ne
   10bc2:	2301      	movne	r3, #1
   10bc4:	2300      	moveq	r3, #0
   10bc6:	b2dc      	uxtb	r4, r3
   10bc8:	462b      	mov	r3, r5
   10bca:	4619      	mov	r1, r3
   10bcc:	4803      	ldr	r0, [pc, #12]	; (10bdc <bool bit::Read<unsigned long>(unsigned long, unsigned long)+0x40>)
   10bce:	f002 fa41 	bl	13054 <__cyg_profile_func_exit>
   10bd2:	4623      	mov	r3, r4
}
   10bd4:	4618      	mov	r0, r3
   10bd6:	b003      	add	sp, #12
   10bd8:	bd30      	pop	{r4, r5, pc}
   10bda:	bf00      	nop
   10bdc:	00010b9d 	.word	0x00010b9d

00010be0 <debug::PrintBacktrace(bool, void*)>:
}

[[gnu::no_instrument_function]]
inline void PrintBacktrace(bool show_make_command = false,
                           void * final_address   = nullptr)
{
   10be0:	b500      	push	{lr}
   10be2:	b08b      	sub	sp, #44	; 0x2c
   10be4:	4603      	mov	r3, r0
   10be6:	9100      	str	r1, [sp, #0]
   10be8:	f88d 3007 	strb.w	r3, [sp, #7]
  printf("Stack Depth = %zd\n", GetStackDepth());
   10bec:	f002 fa54 	bl	13098 <GetStackDepth()>
   10bf0:	4603      	mov	r3, r0
   10bf2:	4619      	mov	r1, r3
   10bf4:	4831      	ldr	r0, [pc, #196]	; (10cbc <debug::PrintBacktrace(bool, void*)+0xdc>)
   10bf6:	f003 fc75 	bl	144e4 <printf>
  // stack_depth-1 to ignore PrintBacktrace()
  // PrintBacktrace shouldn't be ignored in profiling because it causes
  // the exit to still fire, which can result in a negative stack_depth
  void ** list_of_called_functions = GetStackTrace();
   10bfa:	f002 fa39 	bl	13070 <GetStackTrace()>
   10bfe:	9007      	str	r0, [sp, #28]
  size_t stack_depth               = GetStackDepth();
   10c00:	f002 fa4a 	bl	13098 <GetStackDepth()>
   10c04:	9006      	str	r0, [sp, #24]
  // Ignore the last function as it is the Backtrace function
  for (size_t pos = 0; pos < stack_depth - 1; pos++)
   10c06:	2300      	movs	r3, #0
   10c08:	9309      	str	r3, [sp, #36]	; 0x24
   10c0a:	9b06      	ldr	r3, [sp, #24]
   10c0c:	3b01      	subs	r3, #1
   10c0e:	9a09      	ldr	r2, [sp, #36]	; 0x24
   10c10:	429a      	cmp	r2, r3
   10c12:	d20d      	bcs.n	10c30 <debug::PrintBacktrace(bool, void*)+0x50>
  {
    printf("  #%zu: 0x%p\n", pos, list_of_called_functions[pos]);
   10c14:	9b09      	ldr	r3, [sp, #36]	; 0x24
   10c16:	009b      	lsls	r3, r3, #2
   10c18:	9a07      	ldr	r2, [sp, #28]
   10c1a:	4413      	add	r3, r2
   10c1c:	681b      	ldr	r3, [r3, #0]
   10c1e:	461a      	mov	r2, r3
   10c20:	9909      	ldr	r1, [sp, #36]	; 0x24
   10c22:	4827      	ldr	r0, [pc, #156]	; (10cc0 <debug::PrintBacktrace(bool, void*)+0xe0>)
   10c24:	f003 fc5e 	bl	144e4 <printf>
  for (size_t pos = 0; pos < stack_depth - 1; pos++)
   10c28:	9b09      	ldr	r3, [sp, #36]	; 0x24
   10c2a:	3301      	adds	r3, #1
   10c2c:	9309      	str	r3, [sp, #36]	; 0x24
   10c2e:	e7ec      	b.n	10c0a <debug::PrintBacktrace(bool, void*)+0x2a>
  }
  if (final_address != nullptr)
   10c30:	9b00      	ldr	r3, [sp, #0]
   10c32:	2b00      	cmp	r3, #0
   10c34:	d006      	beq.n	10c44 <debug::PrintBacktrace(bool, void*)+0x64>
  {
    printf("  #%zu: 0x%p\n", stack_depth - 1, final_address);
   10c36:	9b06      	ldr	r3, [sp, #24]
   10c38:	3b01      	subs	r3, #1
   10c3a:	9a00      	ldr	r2, [sp, #0]
   10c3c:	4619      	mov	r1, r3
   10c3e:	4820      	ldr	r0, [pc, #128]	; (10cc0 <debug::PrintBacktrace(bool, void*)+0xe0>)
   10c40:	f003 fc50 	bl	144e4 <printf>
  }
  if (show_make_command)
   10c44:	f89d 3007 	ldrb.w	r3, [sp, #7]
   10c48:	2b00      	cmp	r3, #0
   10c4a:	d033      	beq.n	10cb4 <debug::PrintBacktrace(bool, void*)+0xd4>
  {
    constexpr const char kBuildType[] =
   10c4c:	4a1d      	ldr	r2, [pc, #116]	; (10cc4 <debug::PrintBacktrace(bool, void*)+0xe4>)
   10c4e:	ab03      	add	r3, sp, #12
   10c50:	ca07      	ldmia	r2, {r0, r1, r2}
   10c52:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#if defined(APPLICATION)
        "application";
#else
        "bootloader";
#endif
    puts("\nRun: the following command in your project directory");
   10c56:	481c      	ldr	r0, [pc, #112]	; (10cc8 <debug::PrintBacktrace(bool, void*)+0xe8>)
   10c58:	f002 f9b8 	bl	12fcc <puts>
    printf("\n  " SJ2_BOLD_WHITE "make stacktrace-%s TRACES=\"", kBuildType);
   10c5c:	ab03      	add	r3, sp, #12
   10c5e:	4619      	mov	r1, r3
   10c60:	481a      	ldr	r0, [pc, #104]	; (10ccc <debug::PrintBacktrace(bool, void*)+0xec>)
   10c62:	f003 fc3f 	bl	144e4 <printf>
    for (size_t pos = 0; pos < stack_depth - 1; pos++)
   10c66:	2300      	movs	r3, #0
   10c68:	9308      	str	r3, [sp, #32]
   10c6a:	9b06      	ldr	r3, [sp, #24]
   10c6c:	3b01      	subs	r3, #1
   10c6e:	9a08      	ldr	r2, [sp, #32]
   10c70:	429a      	cmp	r2, r3
   10c72:	d212      	bcs.n	10c9a <debug::PrintBacktrace(bool, void*)+0xba>
    {
      if (pos != 0)
   10c74:	9b08      	ldr	r3, [sp, #32]
   10c76:	2b00      	cmp	r3, #0
   10c78:	d002      	beq.n	10c80 <debug::PrintBacktrace(bool, void*)+0xa0>
      {
        putchar(' ');
   10c7a:	2020      	movs	r0, #32
   10c7c:	f002 f98a 	bl	12f94 <putchar>
      }
      printf("0x%p", list_of_called_functions[pos]);
   10c80:	9b08      	ldr	r3, [sp, #32]
   10c82:	009b      	lsls	r3, r3, #2
   10c84:	9a07      	ldr	r2, [sp, #28]
   10c86:	4413      	add	r3, r2
   10c88:	681b      	ldr	r3, [r3, #0]
   10c8a:	4619      	mov	r1, r3
   10c8c:	4810      	ldr	r0, [pc, #64]	; (10cd0 <debug::PrintBacktrace(bool, void*)+0xf0>)
   10c8e:	f003 fc29 	bl	144e4 <printf>
    for (size_t pos = 0; pos < stack_depth - 1; pos++)
   10c92:	9b08      	ldr	r3, [sp, #32]
   10c94:	3301      	adds	r3, #1
   10c96:	9308      	str	r3, [sp, #32]
   10c98:	e7e7      	b.n	10c6a <debug::PrintBacktrace(bool, void*)+0x8a>
    }
    if (final_address != nullptr)
   10c9a:	9b00      	ldr	r3, [sp, #0]
   10c9c:	2b00      	cmp	r3, #0
   10c9e:	d003      	beq.n	10ca8 <debug::PrintBacktrace(bool, void*)+0xc8>
    {
      printf(" 0x%p", final_address);
   10ca0:	9900      	ldr	r1, [sp, #0]
   10ca2:	480c      	ldr	r0, [pc, #48]	; (10cd4 <debug::PrintBacktrace(bool, void*)+0xf4>)
   10ca4:	f003 fc1e 	bl	144e4 <printf>
    }
    puts("\"\n" SJ2_COLOR_RESET);
   10ca8:	480b      	ldr	r0, [pc, #44]	; (10cd8 <debug::PrintBacktrace(bool, void*)+0xf8>)
   10caa:	f002 f98f 	bl	12fcc <puts>
    puts(
   10cae:	480b      	ldr	r0, [pc, #44]	; (10cdc <debug::PrintBacktrace(bool, void*)+0xfc>)
   10cb0:	f002 f98c 	bl	12fcc <puts>
        "This will report the file and line number that led to this function "
        "being called.");
  }
}
   10cb4:	bf00      	nop
   10cb6:	b00b      	add	sp, #44	; 0x2c
   10cb8:	f85d fb04 	ldr.w	pc, [sp], #4
   10cbc:	000173d0 	.word	0x000173d0
   10cc0:	000173e4 	.word	0x000173e4
   10cc4:	000174c0 	.word	0x000174c0
   10cc8:	000173f4 	.word	0x000173f4
   10ccc:	0001742c 	.word	0x0001742c
   10cd0:	00017454 	.word	0x00017454
   10cd4:	0001745c 	.word	0x0001745c
   10cd8:	00017464 	.word	0x00017464
   10cdc:	0001746c 	.word	0x0001746c

00010ce0 <SetUptimeFunction(unsigned long long (*)())>:
{
   10ce0:	b510      	push	{r4, lr}
   10ce2:	b082      	sub	sp, #8
   10ce4:	4674      	mov	r4, lr
   10ce6:	9001      	str	r0, [sp, #4]
   10ce8:	4623      	mov	r3, r4
   10cea:	4619      	mov	r1, r3
   10cec:	4806      	ldr	r0, [pc, #24]	; (10d08 <SetUptimeFunction(unsigned long long (*)())+0x28>)
   10cee:	f002 f99d 	bl	1302c <__cyg_profile_func_enter>
  Uptime = uptime_function;
   10cf2:	4a06      	ldr	r2, [pc, #24]	; (10d0c <SetUptimeFunction(unsigned long long (*)())+0x2c>)
   10cf4:	9b01      	ldr	r3, [sp, #4]
   10cf6:	6013      	str	r3, [r2, #0]
   10cf8:	4623      	mov	r3, r4
   10cfa:	4619      	mov	r1, r3
   10cfc:	4802      	ldr	r0, [pc, #8]	; (10d08 <SetUptimeFunction(unsigned long long (*)())+0x28>)
   10cfe:	f002 f9a9 	bl	13054 <__cyg_profile_func_exit>
}
   10d02:	bf00      	nop
   10d04:	b002      	add	sp, #8
   10d06:	bd10      	pop	{r4, pc}
   10d08:	00010ce1 	.word	0x00010ce1
   10d0c:	10000028 	.word	0x10000028

00010d10 <Lpc40xxSystemController::SetClockFrequency(unsigned char)>:

  inline static LPC_SC_TypeDef * system_controller = LPC_SC;

  constexpr Lpc40xxSystemController() {}

  uint32_t SetClockFrequency(uint8_t frequency_in_mhz) override
   10d10:	b500      	push	{lr}
   10d12:	b085      	sub	sp, #20
   10d14:	9001      	str	r0, [sp, #4]
   10d16:	460b      	mov	r3, r1
   10d18:	f88d 3003 	strb.w	r3, [sp, #3]
  {
    uint32_t offset = 0;
   10d1c:	2300      	movs	r3, #0
   10d1e:	9303      	str	r3, [sp, #12]
    SelectOscillatorSource(OscillatorSource::kIrc);
   10d20:	2100      	movs	r1, #0
   10d22:	9801      	ldr	r0, [sp, #4]
   10d24:	f000 f8ce 	bl	10ec4 <Lpc40xxSystemController::SelectOscillatorSource(Lpc40xxSystemController::OscillatorSource)>
    if (frequency_in_mhz > 12)
   10d28:	f89d 3003 	ldrb.w	r3, [sp, #3]
   10d2c:	2b0c      	cmp	r3, #12
   10d2e:	d916      	bls.n	10d5e <Lpc40xxSystemController::SetClockFrequency(unsigned char)+0x4e>
    {
      offset = SetMainPll(PllInput::kIrc, frequency_in_mhz);
   10d30:	f89d 3003 	ldrb.w	r3, [sp, #3]
   10d34:	b29b      	uxth	r3, r3
   10d36:	461a      	mov	r2, r3
   10d38:	210c      	movs	r1, #12
   10d3a:	9801      	ldr	r0, [sp, #4]
   10d3c:	f000 f9ac 	bl	11098 <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)>
   10d40:	9003      	str	r0, [sp, #12]
      SelectMainClockSource(MainClockSource::kPllClock);
   10d42:	f44f 7180 	mov.w	r1, #256	; 0x100
   10d46:	9801      	ldr	r0, [sp, #4]
   10d48:	f000 f8d6 	bl	10ef8 <Lpc40xxSystemController::SelectMainClockSource(Lpc40xxSystemController::MainClockSource)>
      speed_in_hertz = frequency_in_mhz * 1'000'000;
   10d4c:	f89d 3003 	ldrb.w	r3, [sp, #3]
   10d50:	4a10      	ldr	r2, [pc, #64]	; (10d94 <Lpc40xxSystemController::SetClockFrequency(unsigned char)+0x84>)
   10d52:	fb02 f303 	mul.w	r3, r2, r3
   10d56:	461a      	mov	r2, r3
   10d58:	4b0f      	ldr	r3, [pc, #60]	; (10d98 <Lpc40xxSystemController::SetClockFrequency(unsigned char)+0x88>)
   10d5a:	601a      	str	r2, [r3, #0]
   10d5c:	e006      	b.n	10d6c <Lpc40xxSystemController::SetClockFrequency(unsigned char)+0x5c>
    }
    else
    {
      SelectMainClockSource(MainClockSource::kBaseClock);
   10d5e:	2100      	movs	r1, #0
   10d60:	9801      	ldr	r0, [sp, #4]
   10d62:	f000 f8c9 	bl	10ef8 <Lpc40xxSystemController::SelectMainClockSource(Lpc40xxSystemController::MainClockSource)>
      speed_in_hertz = kDefaultIRCFrequency;
   10d66:	4b0c      	ldr	r3, [pc, #48]	; (10d98 <Lpc40xxSystemController::SetClockFrequency(unsigned char)+0x88>)
   10d68:	4a0c      	ldr	r2, [pc, #48]	; (10d9c <Lpc40xxSystemController::SetClockFrequency(unsigned char)+0x8c>)
   10d6a:	601a      	str	r2, [r3, #0]
    }
    SetCpuClockDivider(kDivideInputBy1);
   10d6c:	2101      	movs	r1, #1
   10d6e:	9801      	ldr	r0, [sp, #4]
   10d70:	f000 fa4a 	bl	11208 <Lpc40xxSystemController::SetCpuClockDivider(unsigned char)>
    SetPeripheralClockDivider(kDivideInputBy1);
   10d74:	9b01      	ldr	r3, [sp, #4]
   10d76:	681b      	ldr	r3, [r3, #0]
   10d78:	3304      	adds	r3, #4
   10d7a:	681b      	ldr	r3, [r3, #0]
   10d7c:	2101      	movs	r1, #1
   10d7e:	9801      	ldr	r0, [sp, #4]
   10d80:	4798      	blx	r3
    SetEmcClockDivider(EmcDivider::kSameSpeedAsCpu);
   10d82:	2100      	movs	r1, #0
   10d84:	9801      	ldr	r0, [sp, #4]
   10d86:	f000 fa73 	bl	11270 <Lpc40xxSystemController::SetEmcClockDivider(Lpc40xxSystemController::EmcDivider)>
    return offset;
   10d8a:	9b03      	ldr	r3, [sp, #12]
  }
   10d8c:	4618      	mov	r0, r3
   10d8e:	b005      	add	sp, #20
   10d90:	f85d fb04 	ldr.w	pc, [sp], #4
   10d94:	000f4240 	.word	0x000f4240
   10d98:	10000054 	.word	0x10000054
   10d9c:	00b71b00 	.word	0x00b71b00

00010da0 <Lpc40xxSystemController::SetPeripheralClockDivider(unsigned char)>:

  void SetPeripheralClockDivider(uint8_t peripheral_divider) override
   10da0:	b500      	push	{lr}
   10da2:	b083      	sub	sp, #12
   10da4:	9001      	str	r0, [sp, #4]
   10da6:	460b      	mov	r3, r1
   10da8:	f88d 3003 	strb.w	r3, [sp, #3]
  {
    SJ2_ASSERT_FATAL(peripheral_divider <= 4, "Divider mustn't exceed 32");
   10dac:	f89d 3003 	ldrb.w	r3, [sp, #3]
   10db0:	2b04      	cmp	r3, #4
   10db2:	d90d      	bls.n	10dd0 <Lpc40xxSystemController::SetPeripheralClockDivider(unsigned char)+0x30>
   10db4:	23ae      	movs	r3, #174	; 0xae
   10db6:	4a0b      	ldr	r2, [pc, #44]	; (10de4 <Lpc40xxSystemController::SetPeripheralClockDivider(unsigned char)+0x44>)
   10db8:	490b      	ldr	r1, [pc, #44]	; (10de8 <Lpc40xxSystemController::SetPeripheralClockDivider(unsigned char)+0x48>)
   10dba:	480c      	ldr	r0, [pc, #48]	; (10dec <Lpc40xxSystemController::SetPeripheralClockDivider(unsigned char)+0x4c>)
   10dbc:	f003 fb92 	bl	144e4 <printf>
   10dc0:	480b      	ldr	r0, [pc, #44]	; (10df0 <Lpc40xxSystemController::SetPeripheralClockDivider(unsigned char)+0x50>)
   10dc2:	f002 f903 	bl	12fcc <puts>
   10dc6:	2100      	movs	r1, #0
   10dc8:	2001      	movs	r0, #1
   10dca:	f7ff ff09 	bl	10be0 <debug::PrintBacktrace(bool, void*)>
   10dce:	e7fe      	b.n	10dce <Lpc40xxSystemController::SetPeripheralClockDivider(unsigned char)+0x2e>
    system_controller->PCLKSEL = peripheral_divider;
   10dd0:	4b08      	ldr	r3, [pc, #32]	; (10df4 <Lpc40xxSystemController::SetPeripheralClockDivider(unsigned char)+0x54>)
   10dd2:	681b      	ldr	r3, [r3, #0]
   10dd4:	f89d 2003 	ldrb.w	r2, [sp, #3]
   10dd8:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
  }
   10ddc:	bf00      	nop
   10dde:	b003      	add	sp, #12
   10de0:	f85d fb04 	ldr.w	pc, [sp], #4
   10de4:	00017b58 	.word	0x00017b58
   10de8:	00017980 	.word	0x00017980
   10dec:	000174cc 	.word	0x000174cc
   10df0:	0001756c 	.word	0x0001756c
   10df4:	10000050 	.word	0x10000050

00010df8 <Lpc40xxSystemController::GetPeripheralClockDivider() const>:

  uint32_t GetPeripheralClockDivider() const override
   10df8:	b082      	sub	sp, #8
   10dfa:	9001      	str	r0, [sp, #4]
  {
#if defined(HOST_TEST)
    return 1;
#else
    return system_controller->PCLKSEL;
   10dfc:	4b03      	ldr	r3, [pc, #12]	; (10e0c <Lpc40xxSystemController::GetPeripheralClockDivider() const+0x14>)
   10dfe:	681b      	ldr	r3, [r3, #0]
   10e00:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
#endif
  }
   10e04:	4618      	mov	r0, r3
   10e06:	b002      	add	sp, #8
   10e08:	4770      	bx	lr
   10e0a:	bf00      	nop
   10e0c:	10000050 	.word	0x10000050

00010e10 <Lpc40xxSystemController::GetSystemFrequency() const>:

  uint32_t GetSystemFrequency() const override
   10e10:	b082      	sub	sp, #8
   10e12:	9001      	str	r0, [sp, #4]
  {
#if defined(HOST_TEST)
    return config::kSystemClockRate;
#else
    return speed_in_hertz;
   10e14:	4b02      	ldr	r3, [pc, #8]	; (10e20 <Lpc40xxSystemController::GetSystemFrequency() const+0x10>)
   10e16:	681b      	ldr	r3, [r3, #0]
#endif
  }
   10e18:	4618      	mov	r0, r3
   10e1a:	b002      	add	sp, #8
   10e1c:	4770      	bx	lr
   10e1e:	bf00      	nop
   10e20:	10000054 	.word	0x10000054

00010e24 <Lpc40xxSystemController::GetPeripheralFrequency() const>:

  uint32_t GetPeripheralFrequency() const override
   10e24:	b500      	push	{lr}
   10e26:	b085      	sub	sp, #20
   10e28:	9001      	str	r0, [sp, #4]
  {
    uint32_t peripheral_clock_divider = GetPeripheralClockDivider();
   10e2a:	9b01      	ldr	r3, [sp, #4]
   10e2c:	681b      	ldr	r3, [r3, #0]
   10e2e:	3308      	adds	r3, #8
   10e30:	681b      	ldr	r3, [r3, #0]
   10e32:	9801      	ldr	r0, [sp, #4]
   10e34:	4798      	blx	r3
   10e36:	9002      	str	r0, [sp, #8]
    uint32_t result = 0;  // return 0 if peripheral_clock_divider == 0
   10e38:	2300      	movs	r3, #0
   10e3a:	9303      	str	r3, [sp, #12]
    if (peripheral_clock_divider != 0)
   10e3c:	9b02      	ldr	r3, [sp, #8]
   10e3e:	2b00      	cmp	r3, #0
   10e40:	d00a      	beq.n	10e58 <Lpc40xxSystemController::GetPeripheralFrequency() const+0x34>
    {
      result = GetSystemFrequency() / peripheral_clock_divider;
   10e42:	9b01      	ldr	r3, [sp, #4]
   10e44:	681b      	ldr	r3, [r3, #0]
   10e46:	330c      	adds	r3, #12
   10e48:	681b      	ldr	r3, [r3, #0]
   10e4a:	9801      	ldr	r0, [sp, #4]
   10e4c:	4798      	blx	r3
   10e4e:	4602      	mov	r2, r0
   10e50:	9b02      	ldr	r3, [sp, #8]
   10e52:	fbb2 f3f3 	udiv	r3, r2, r3
   10e56:	9303      	str	r3, [sp, #12]
    }
    return result;
   10e58:	9b03      	ldr	r3, [sp, #12]
  }
   10e5a:	4618      	mov	r0, r3
   10e5c:	b005      	add	sp, #20
   10e5e:	f85d fb04 	ldr.w	pc, [sp], #4
   10e62:	Address 0x0000000000010e62 is out of bounds.


00010e64 <Lpc40xxSystemController::PowerUpPeripheral(SystemControllerInterface::PeripheralID const&)>:

  void PowerUpPeripheral(const PeripheralID & peripheral_select) override
   10e64:	b084      	sub	sp, #16
   10e66:	9001      	str	r0, [sp, #4]
   10e68:	9100      	str	r1, [sp, #0]
  {
    auto power_connection_with_enabled_peripheral =
        system_controller->PCONP | (1 << peripheral_select.device_id);
   10e6a:	4b09      	ldr	r3, [pc, #36]	; (10e90 <Lpc40xxSystemController::PowerUpPeripheral(SystemControllerInterface::PeripheralID const&)+0x2c>)
   10e6c:	681b      	ldr	r3, [r3, #0]
   10e6e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
   10e72:	9a00      	ldr	r2, [sp, #0]
   10e74:	6812      	ldr	r2, [r2, #0]
   10e76:	2101      	movs	r1, #1
   10e78:	fa01 f202 	lsl.w	r2, r1, r2
   10e7c:	4313      	orrs	r3, r2
   10e7e:	9303      	str	r3, [sp, #12]

    system_controller->PCONP = power_connection_with_enabled_peripheral;
   10e80:	4b03      	ldr	r3, [pc, #12]	; (10e90 <Lpc40xxSystemController::PowerUpPeripheral(SystemControllerInterface::PeripheralID const&)+0x2c>)
   10e82:	681b      	ldr	r3, [r3, #0]
   10e84:	9a03      	ldr	r2, [sp, #12]
   10e86:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  }
   10e8a:	bf00      	nop
   10e8c:	b004      	add	sp, #16
   10e8e:	4770      	bx	lr
   10e90:	10000050 	.word	0x10000050

00010e94 <Lpc40xxSystemController::PowerDownPeripheral(SystemControllerInterface::PeripheralID const&)>:
  void PowerDownPeripheral(const PeripheralID & peripheral_select) override
   10e94:	b084      	sub	sp, #16
   10e96:	9001      	str	r0, [sp, #4]
   10e98:	9100      	str	r1, [sp, #0]
  {
    auto power_connection_without_enabled_peripheral =
        system_controller->PCONP & (1 << peripheral_select.device_id);
   10e9a:	4b09      	ldr	r3, [pc, #36]	; (10ec0 <Lpc40xxSystemController::PowerDownPeripheral(SystemControllerInterface::PeripheralID const&)+0x2c>)
   10e9c:	681b      	ldr	r3, [r3, #0]
   10e9e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
   10ea2:	9a00      	ldr	r2, [sp, #0]
   10ea4:	6812      	ldr	r2, [r2, #0]
   10ea6:	2101      	movs	r1, #1
   10ea8:	fa01 f202 	lsl.w	r2, r1, r2
   10eac:	4013      	ands	r3, r2
   10eae:	9303      	str	r3, [sp, #12]

    system_controller->PCONP = power_connection_without_enabled_peripheral;
   10eb0:	4b03      	ldr	r3, [pc, #12]	; (10ec0 <Lpc40xxSystemController::PowerDownPeripheral(SystemControllerInterface::PeripheralID const&)+0x2c>)
   10eb2:	681b      	ldr	r3, [r3, #0]
   10eb4:	9a03      	ldr	r2, [sp, #12]
   10eb6:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  }
   10eba:	bf00      	nop
   10ebc:	b004      	add	sp, #16
   10ebe:	4770      	bx	lr
   10ec0:	10000050 	.word	0x10000050

00010ec4 <Lpc40xxSystemController::SelectOscillatorSource(Lpc40xxSystemController::OscillatorSource)>:

 private:
  void SelectOscillatorSource(OscillatorSource source)
   10ec4:	b084      	sub	sp, #16
   10ec6:	9001      	str	r0, [sp, #4]
   10ec8:	460b      	mov	r3, r1
   10eca:	f8ad 3002 	strh.w	r3, [sp, #2]
  {
    uint32_t source_bit = static_cast<uint32_t>(source);
   10ece:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   10ed2:	9303      	str	r3, [sp, #12]
    system_controller->CLKSRCSEL =
        (system_controller->CLKSRCSEL & ~(kOscillatorSelect)) | source_bit;
   10ed4:	4b07      	ldr	r3, [pc, #28]	; (10ef4 <Lpc40xxSystemController::SelectOscillatorSource(Lpc40xxSystemController::OscillatorSource)+0x30>)
   10ed6:	681b      	ldr	r3, [r3, #0]
   10ed8:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
   10edc:	f023 0101 	bic.w	r1, r3, #1
    system_controller->CLKSRCSEL =
   10ee0:	4b04      	ldr	r3, [pc, #16]	; (10ef4 <Lpc40xxSystemController::SelectOscillatorSource(Lpc40xxSystemController::OscillatorSource)+0x30>)
   10ee2:	681b      	ldr	r3, [r3, #0]
        (system_controller->CLKSRCSEL & ~(kOscillatorSelect)) | source_bit;
   10ee4:	9a03      	ldr	r2, [sp, #12]
   10ee6:	430a      	orrs	r2, r1
    system_controller->CLKSRCSEL =
   10ee8:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
  }
   10eec:	bf00      	nop
   10eee:	b004      	add	sp, #16
   10ef0:	4770      	bx	lr
   10ef2:	bf00      	nop
   10ef4:	10000050 	.word	0x10000050

00010ef8 <Lpc40xxSystemController::SelectMainClockSource(Lpc40xxSystemController::MainClockSource)>:

  void SelectMainClockSource(MainClockSource source)
   10ef8:	b082      	sub	sp, #8
   10efa:	9001      	str	r0, [sp, #4]
   10efc:	460b      	mov	r3, r1
   10efe:	f8ad 3002 	strh.w	r3, [sp, #2]
  {
    system_controller->CCLKSEL =
        (system_controller->CCLKSEL & ~(kBaseClockSelect)) |
   10f02:	4b08      	ldr	r3, [pc, #32]	; (10f24 <Lpc40xxSystemController::SelectMainClockSource(Lpc40xxSystemController::MainClockSource)+0x2c>)
   10f04:	681b      	ldr	r3, [r3, #0]
   10f06:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   10f0a:	f423 7180 	bic.w	r1, r3, #256	; 0x100
        static_cast<uint32_t>(source);
   10f0e:	f8bd 2002 	ldrh.w	r2, [sp, #2]
    system_controller->CCLKSEL =
   10f12:	4b04      	ldr	r3, [pc, #16]	; (10f24 <Lpc40xxSystemController::SelectMainClockSource(Lpc40xxSystemController::MainClockSource)+0x2c>)
   10f14:	681b      	ldr	r3, [r3, #0]
        (system_controller->CCLKSEL & ~(kBaseClockSelect)) |
   10f16:	430a      	orrs	r2, r1
    system_controller->CCLKSEL =
   10f18:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
  }
   10f1c:	bf00      	nop
   10f1e:	b002      	add	sp, #8
   10f20:	4770      	bx	lr
   10f22:	bf00      	nop
   10f24:	10000050 	.word	0x10000050

00010f28 <Lpc40xxSystemController::SelectUsbClockSource(Lpc40xxSystemController::UsbSource)>:

  void SelectUsbClockSource(UsbSource usb_clock)
   10f28:	b082      	sub	sp, #8
   10f2a:	9001      	str	r0, [sp, #4]
   10f2c:	460b      	mov	r3, r1
   10f2e:	f8ad 3002 	strh.w	r3, [sp, #2]
  {
    system_controller->USBCLKSEL =
        (system_controller->USBCLKSEL & ~(kUsbClockSource)) |
   10f32:	4b08      	ldr	r3, [pc, #32]	; (10f54 <Lpc40xxSystemController::SelectUsbClockSource(Lpc40xxSystemController::UsbSource)+0x2c>)
   10f34:	681b      	ldr	r3, [r3, #0]
   10f36:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
   10f3a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
        static_cast<uint32_t>(usb_clock);
   10f3e:	f8bd 2002 	ldrh.w	r2, [sp, #2]
    system_controller->USBCLKSEL =
   10f42:	4b04      	ldr	r3, [pc, #16]	; (10f54 <Lpc40xxSystemController::SelectUsbClockSource(Lpc40xxSystemController::UsbSource)+0x2c>)
   10f44:	681b      	ldr	r3, [r3, #0]
        (system_controller->USBCLKSEL & ~(kUsbClockSource)) |
   10f46:	430a      	orrs	r2, r1
    system_controller->USBCLKSEL =
   10f48:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
  }
   10f4c:	bf00      	nop
   10f4e:	b002      	add	sp, #8
   10f50:	4770      	bx	lr
   10f52:	bf00      	nop
   10f54:	10000050 	.word	0x10000050

00010f58 <Lpc40xxSystemController::SelectSpifiClockSource(Lpc40xxSystemController::SpifiSource)>:

  void SelectSpifiClockSource(SpifiSource spifi_clock)
   10f58:	b082      	sub	sp, #8
   10f5a:	9001      	str	r0, [sp, #4]
   10f5c:	460b      	mov	r3, r1
   10f5e:	f8ad 3002 	strh.w	r3, [sp, #2]
  {
    system_controller->SPIFISEL =
        (system_controller->SPIFISEL & ~(kSpifiClockSource)) |
   10f62:	4b08      	ldr	r3, [pc, #32]	; (10f84 <Lpc40xxSystemController::SelectSpifiClockSource(Lpc40xxSystemController::SpifiSource)+0x2c>)
   10f64:	681b      	ldr	r3, [r3, #0]
   10f66:	f8d3 31b4 	ldr.w	r3, [r3, #436]	; 0x1b4
   10f6a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
        static_cast<uint32_t>(spifi_clock);
   10f6e:	f8bd 2002 	ldrh.w	r2, [sp, #2]
    system_controller->SPIFISEL =
   10f72:	4b04      	ldr	r3, [pc, #16]	; (10f84 <Lpc40xxSystemController::SelectSpifiClockSource(Lpc40xxSystemController::SpifiSource)+0x2c>)
   10f74:	681b      	ldr	r3, [r3, #0]
        (system_controller->SPIFISEL & ~(kSpifiClockSource)) |
   10f76:	430a      	orrs	r2, r1
    system_controller->SPIFISEL =
   10f78:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
  }
   10f7c:	bf00      	nop
   10f7e:	b002      	add	sp, #8
   10f80:	4770      	bx	lr
   10f82:	bf00      	nop
   10f84:	10000050 	.word	0x10000050

00010f88 <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)>:

  uint32_t CalculatePll(PllInput input_frequency, uint16_t desired_speed_in_mhz)
   10f88:	b500      	push	{lr}
   10f8a:	b087      	sub	sp, #28
   10f8c:	9001      	str	r0, [sp, #4]
   10f8e:	460b      	mov	r3, r1
   10f90:	f8ad 3002 	strh.w	r3, [sp, #2]
   10f94:	4613      	mov	r3, r2
   10f96:	f8ad 3000 	strh.w	r3, [sp]
  {
    SJ2_ASSERT_FATAL(desired_speed_in_mhz < 384 && desired_speed_in_mhz > 12,
   10f9a:	f8bd 3000 	ldrh.w	r3, [sp]
   10f9e:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
   10fa2:	d203      	bcs.n	10fac <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)+0x24>
   10fa4:	f8bd 3000 	ldrh.w	r3, [sp]
   10fa8:	2b0c      	cmp	r3, #12
   10faa:	d80d      	bhi.n	10fc8 <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)+0x40>
   10fac:	23ff      	movs	r3, #255	; 0xff
   10fae:	4a34      	ldr	r2, [pc, #208]	; (11080 <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)+0xf8>)
   10fb0:	4934      	ldr	r1, [pc, #208]	; (11084 <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)+0xfc>)
   10fb2:	4835      	ldr	r0, [pc, #212]	; (11088 <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)+0x100>)
   10fb4:	f003 fa96 	bl	144e4 <printf>
   10fb8:	4834      	ldr	r0, [pc, #208]	; (1108c <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)+0x104>)
   10fba:	f002 f807 	bl	12fcc <puts>
   10fbe:	2100      	movs	r1, #0
   10fc0:	2001      	movs	r0, #1
   10fc2:	f7ff fe0d 	bl	10be0 <debug::PrintBacktrace(bool, void*)>
   10fc6:	e7fe      	b.n	10fc6 <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)+0x3e>
                     "Frequency must be lower than 384 MHz"
                     "and greater than or equal to 12 MHz");
    bool calculating = true;
   10fc8:	2301      	movs	r3, #1
   10fca:	f88d 3017 	strb.w	r3, [sp, #23]
    uint32_t multiplier_value;
    if ((desired_speed_in_mhz % static_cast<uint16_t>(input_frequency)) >= 1)
   10fce:	f8bd 3000 	ldrh.w	r3, [sp]
   10fd2:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   10fd6:	fbb3 f1f2 	udiv	r1, r3, r2
   10fda:	fb02 f201 	mul.w	r2, r2, r1
   10fde:	1a9b      	subs	r3, r3, r2
   10fe0:	b29b      	uxth	r3, r3
   10fe2:	2b00      	cmp	r3, #0
   10fe4:	d009      	beq.n	10ffa <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)+0x72>
    {
      multiplier_value = static_cast<uint32_t>(
          (desired_speed_in_mhz / static_cast<uint16_t>(input_frequency)) + 1);
   10fe6:	f8bd 2000 	ldrh.w	r2, [sp]
   10fea:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   10fee:	fbb2 f3f3 	udiv	r3, r2, r3
   10ff2:	b29b      	uxth	r3, r3
   10ff4:	3301      	adds	r3, #1
      multiplier_value = static_cast<uint32_t>(
   10ff6:	9304      	str	r3, [sp, #16]
   10ff8:	e007      	b.n	1100a <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)+0x82>
    }
    else
    {
      multiplier_value = static_cast<uint32_t>(
          desired_speed_in_mhz / static_cast<uint16_t>(input_frequency));
   10ffa:	f8bd 2000 	ldrh.w	r2, [sp]
   10ffe:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   11002:	fbb2 f3f3 	udiv	r3, r2, r3
   11006:	b29b      	uxth	r3, r3
      multiplier_value = static_cast<uint32_t>(
   11008:	9304      	str	r3, [sp, #16]
    }
    uint16_t divider_value = 1;
   1100a:	2301      	movs	r3, #1
   1100c:	f8ad 300e 	strh.w	r3, [sp, #14]
    while (calculating)
   11010:	f89d 3017 	ldrb.w	r3, [sp, #23]
   11014:	2b00      	cmp	r3, #0
   11016:	d02e      	beq.n	11076 <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)+0xee>
    {
      uint16_t current_controlled_oscillator_frequency;
      current_controlled_oscillator_frequency = static_cast<uint16_t>(
   11018:	9b04      	ldr	r3, [sp, #16]
   1101a:	b29b      	uxth	r3, r3
   1101c:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   11020:	fb12 f303 	smulbb	r3, r2, r3
   11024:	b29b      	uxth	r3, r3
   11026:	f8bd 200e 	ldrh.w	r2, [sp, #14]
   1102a:	fb12 f303 	smulbb	r3, r2, r3
   1102e:	b29b      	uxth	r3, r3
   11030:	005b      	lsls	r3, r3, #1
   11032:	f8ad 300c 	strh.w	r3, [sp, #12]
          (static_cast<uint16_t>(input_frequency) * multiplier_value * 2) *
          divider_value);
      if (current_controlled_oscillator_frequency >= 156)
   11036:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   1103a:	2b9b      	cmp	r3, #155	; 0x9b
   1103c:	d903      	bls.n	11046 <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)+0xbe>
      {
        calculating = false;
   1103e:	2300      	movs	r3, #0
   11040:	f88d 3017 	strb.w	r3, [sp, #23]
   11044:	e7e4      	b.n	11010 <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)+0x88>
      }
      else
      {
        divider_value = static_cast<uint16_t>(divider_value * 2);
   11046:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   1104a:	005b      	lsls	r3, r3, #1
   1104c:	f8ad 300e 	strh.w	r3, [sp, #14]
        SJ2_ASSERT_FATAL(divider_value < 8,
   11050:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   11054:	2b07      	cmp	r3, #7
   11056:	d9db      	bls.n	11010 <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)+0x88>
   11058:	f240 131b 	movw	r3, #283	; 0x11b
   1105c:	4a08      	ldr	r2, [pc, #32]	; (11080 <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)+0xf8>)
   1105e:	490c      	ldr	r1, [pc, #48]	; (11090 <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)+0x108>)
   11060:	480c      	ldr	r0, [pc, #48]	; (11094 <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)+0x10c>)
   11062:	f003 fa3f 	bl	144e4 <printf>
   11066:	4809      	ldr	r0, [pc, #36]	; (1108c <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)+0x104>)
   11068:	f001 ffb0 	bl	12fcc <puts>
   1106c:	2100      	movs	r1, #0
   1106e:	2001      	movs	r0, #1
   11070:	f7ff fdb6 	bl	10be0 <debug::PrintBacktrace(bool, void*)>
   11074:	e7fe      	b.n	11074 <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)+0xec>
                         "PLL divider value went out of bounds");
      }
    }

    return multiplier_value;
   11076:	9b04      	ldr	r3, [sp, #16]
  }
   11078:	4618      	mov	r0, r3
   1107a:	b007      	add	sp, #28
   1107c:	f85d fb04 	ldr.w	pc, [sp], #4
   11080:	00017c00 	.word	0x00017c00
   11084:	00017998 	.word	0x00017998
   11088:	00017584 	.word	0x00017584
   1108c:	0001756c 	.word	0x0001756c
   11090:	000179b0 	.word	0x000179b0
   11094:	00017674 	.word	0x00017674

00011098 <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)>:

  uint32_t SetMainPll(PllInput input_frequency, uint16_t desired_speed_in_mhz)
   11098:	b510      	push	{r4, lr}
   1109a:	b08a      	sub	sp, #40	; 0x28
   1109c:	9001      	str	r0, [sp, #4]
   1109e:	460b      	mov	r3, r1
   110a0:	f8ad 3002 	strh.w	r3, [sp, #2]
   110a4:	4613      	mov	r3, r2
   110a6:	f8ad 3000 	strh.w	r3, [sp]
  {
    uint16_t divider_value = 1;
   110aa:	2301      	movs	r3, #1
   110ac:	f8ad 301a 	strh.w	r3, [sp, #26]
    uint64_t timeout_time  = Milliseconds() + kDefaultTimeout;
   110b0:	f7ff faf8 	bl	106a4 <Milliseconds()>
   110b4:	460a      	mov	r2, r1
   110b6:	4601      	mov	r1, r0
   110b8:	f511 737a 	adds.w	r3, r1, #1000	; 0x3e8
   110bc:	f142 0400 	adc.w	r4, r2, #0
   110c0:	e9cd 3404 	strd	r3, r4, [sp, #16]
    uint64_t current_time  = Milliseconds();
   110c4:	f7ff faee 	bl	106a4 <Milliseconds()>
   110c8:	e9cd 0108 	strd	r0, r1, [sp, #32]
    uint32_t multiplier_value =
        CalculatePll(input_frequency, desired_speed_in_mhz);
   110cc:	f8bd 2000 	ldrh.w	r2, [sp]
   110d0:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   110d4:	4619      	mov	r1, r3
   110d6:	9801      	ldr	r0, [sp, #4]
   110d8:	f7ff ff56 	bl	10f88 <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)>
   110dc:	9003      	str	r0, [sp, #12]
    uint32_t actual_speed =
        static_cast<uint32_t>(input_frequency) * multiplier_value;
   110de:	f8bd 2002 	ldrh.w	r2, [sp, #2]
    uint32_t actual_speed =
   110e2:	9b03      	ldr	r3, [sp, #12]
   110e4:	fb02 f303 	mul.w	r3, r2, r3
   110e8:	9307      	str	r3, [sp, #28]
    // TO DO: use registers to retreive values
    SelectOscillatorSource(OscillatorSource::kIrc);
   110ea:	2100      	movs	r1, #0
   110ec:	9801      	ldr	r0, [sp, #4]
   110ee:	f7ff fee9 	bl	10ec4 <Lpc40xxSystemController::SelectOscillatorSource(Lpc40xxSystemController::OscillatorSource)>
    SelectMainClockSource(MainClockSource::kBaseClock);
   110f2:	2100      	movs	r1, #0
   110f4:	9801      	ldr	r0, [sp, #4]
   110f6:	f7ff feff 	bl	10ef8 <Lpc40xxSystemController::SelectMainClockSource(Lpc40xxSystemController::MainClockSource)>
    SelectUsbClockSource(UsbSource::kBaseClock);
   110fa:	2100      	movs	r1, #0
   110fc:	9801      	ldr	r0, [sp, #4]
   110fe:	f7ff ff13 	bl	10f28 <Lpc40xxSystemController::SelectUsbClockSource(Lpc40xxSystemController::UsbSource)>
    SelectSpifiClockSource(SpifiSource::kBaseClock);
   11102:	2100      	movs	r1, #0
   11104:	9801      	ldr	r0, [sp, #4]
   11106:	f7ff ff27 	bl	10f58 <Lpc40xxSystemController::SelectSpifiClockSource(Lpc40xxSystemController::SpifiSource)>
    // must subtract 1 from multiplier value as specified in datasheet
    system_controller->PLL0CFG =
        (system_controller->PLL0CFG & ~kClearPllMultiplier) |
   1110a:	4b3a      	ldr	r3, [pc, #232]	; (111f4 <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0x15c>)
   1110c:	681b      	ldr	r3, [r3, #0]
   1110e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   11112:	f023 011f 	bic.w	r1, r3, #31
        (multiplier_value - 1);
   11116:	9b03      	ldr	r3, [sp, #12]
   11118:	1e5a      	subs	r2, r3, #1
    system_controller->PLL0CFG =
   1111a:	4b36      	ldr	r3, [pc, #216]	; (111f4 <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0x15c>)
   1111c:	681b      	ldr	r3, [r3, #0]
        (system_controller->PLL0CFG & ~kClearPllMultiplier) |
   1111e:	430a      	orrs	r2, r1
    system_controller->PLL0CFG =
   11120:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    system_controller->PLL0CFG =
        (system_controller->PLL0CFG & ~kClearPllDivider) | (divider_value << 5);
   11124:	4b33      	ldr	r3, [pc, #204]	; (111f4 <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0x15c>)
   11126:	681b      	ldr	r3, [r3, #0]
   11128:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   1112c:	f023 0260 	bic.w	r2, r3, #96	; 0x60
   11130:	f8bd 301a 	ldrh.w	r3, [sp, #26]
   11134:	015b      	lsls	r3, r3, #5
   11136:	4619      	mov	r1, r3
    system_controller->PLL0CFG =
   11138:	4b2e      	ldr	r3, [pc, #184]	; (111f4 <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0x15c>)
   1113a:	681b      	ldr	r3, [r3, #0]
        (system_controller->PLL0CFG & ~kClearPllDivider) | (divider_value << 5);
   1113c:	430a      	orrs	r2, r1
    system_controller->PLL0CFG =
   1113e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    system_controller->PLL0CON |= kEnablePll;
   11142:	4b2c      	ldr	r3, [pc, #176]	; (111f4 <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0x15c>)
   11144:	681b      	ldr	r3, [r3, #0]
   11146:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
   1114a:	4b2a      	ldr	r3, [pc, #168]	; (111f4 <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0x15c>)
   1114c:	681b      	ldr	r3, [r3, #0]
   1114e:	f042 0201 	orr.w	r2, r2, #1
   11152:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    // nessecary feed sequence to ensure the changes are intentional
    system_controller->PLL0FEED = 0xAA;
   11156:	4b27      	ldr	r3, [pc, #156]	; (111f4 <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0x15c>)
   11158:	681b      	ldr	r3, [r3, #0]
   1115a:	22aa      	movs	r2, #170	; 0xaa
   1115c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    system_controller->PLL0FEED = 0x55;
   11160:	4b24      	ldr	r3, [pc, #144]	; (111f4 <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0x15c>)
   11162:	681b      	ldr	r3, [r3, #0]
   11164:	2255      	movs	r2, #85	; 0x55
   11166:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    while (!(system_controller->PLL0STAT >> kPlock & 1) &&
   1116a:	4b22      	ldr	r3, [pc, #136]	; (111f4 <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0x15c>)
   1116c:	681b      	ldr	r3, [r3, #0]
   1116e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   11172:	f403 6380 	and.w	r3, r3, #1024	; 0x400
   11176:	2b00      	cmp	r3, #0
   11178:	d109      	bne.n	1118e <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0xf6>
   1117a:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
   1117e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
   11182:	42a2      	cmp	r2, r4
   11184:	bf08      	it	eq
   11186:	4299      	cmpeq	r1, r3
   11188:	d201      	bcs.n	1118e <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0xf6>
   1118a:	2301      	movs	r3, #1
   1118c:	e000      	b.n	11190 <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0xf8>
   1118e:	2300      	movs	r3, #0
   11190:	2b00      	cmp	r3, #0
   11192:	d004      	beq.n	1119e <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0x106>
           (current_time < timeout_time))
    {
      current_time = Milliseconds();
   11194:	f7ff fa86 	bl	106a4 <Milliseconds()>
   11198:	e9cd 0108 	strd	r0, r1, [sp, #32]
    while (!(system_controller->PLL0STAT >> kPlock & 1) &&
   1119c:	e7e5      	b.n	1116a <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0xd2>
    }
    if (!(system_controller->PLL0STAT >> kPlock & 1) &&
   1119e:	4b15      	ldr	r3, [pc, #84]	; (111f4 <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0x15c>)
   111a0:	681b      	ldr	r3, [r3, #0]
   111a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   111a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
   111aa:	2b00      	cmp	r3, #0
   111ac:	d109      	bne.n	111c2 <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0x12a>
   111ae:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
   111b2:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
   111b6:	42a2      	cmp	r2, r4
   111b8:	bf08      	it	eq
   111ba:	4299      	cmpeq	r1, r3
   111bc:	d301      	bcc.n	111c2 <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0x12a>
   111be:	2301      	movs	r3, #1
   111c0:	e000      	b.n	111c4 <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0x12c>
   111c2:	2300      	movs	r3, #0
   111c4:	2b00      	cmp	r3, #0
   111c6:	d00e      	beq.n	111e6 <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0x14e>
        (current_time >= timeout_time))
    {
      SJ2_ASSERT_FATAL(false,
   111c8:	f240 1343 	movw	r3, #323	; 0x143
   111cc:	4a0a      	ldr	r2, [pc, #40]	; (111f8 <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0x160>)
   111ce:	490b      	ldr	r1, [pc, #44]	; (111fc <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0x164>)
   111d0:	480b      	ldr	r0, [pc, #44]	; (11200 <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0x168>)
   111d2:	f003 f987 	bl	144e4 <printf>
   111d6:	480b      	ldr	r0, [pc, #44]	; (11204 <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0x16c>)
   111d8:	f001 fef8 	bl	12fcc <puts>
   111dc:	2100      	movs	r1, #0
   111de:	2001      	movs	r0, #1
   111e0:	f7ff fcfe 	bl	10be0 <debug::PrintBacktrace(bool, void*)>
   111e4:	e7fe      	b.n	111e4 <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0x14c>
                       "PLL lock could not be established before timeout");
      actual_speed = kDefaultIRCFrequency;
    }
    return (actual_speed - desired_speed_in_mhz);
   111e6:	f8bd 3000 	ldrh.w	r3, [sp]
   111ea:	9a07      	ldr	r2, [sp, #28]
   111ec:	1ad3      	subs	r3, r2, r3
  }
   111ee:	4618      	mov	r0, r3
   111f0:	b00a      	add	sp, #40	; 0x28
   111f2:	bd10      	pop	{r4, pc}
   111f4:	10000050 	.word	0x10000050
   111f8:	00017ba4 	.word	0x00017ba4
   111fc:	000179c8 	.word	0x000179c8
   11200:	0001771c 	.word	0x0001771c
   11204:	0001756c 	.word	0x0001756c

00011208 <Lpc40xxSystemController::SetCpuClockDivider(unsigned char)>:
                       "PLL lock could not be established before timeout");
    }
    return (actual_speed - desired_speed_in_mhz);
  }

  void SetCpuClockDivider(uint8_t cpu_divider)
   11208:	b500      	push	{lr}
   1120a:	b083      	sub	sp, #12
   1120c:	9001      	str	r0, [sp, #4]
   1120e:	460b      	mov	r3, r1
   11210:	f88d 3003 	strb.w	r3, [sp, #3]
  {
    SJ2_ASSERT_FATAL(cpu_divider < 32, "Divider mustn't exceed 32");
   11214:	f89d 3003 	ldrb.w	r3, [sp, #3]
   11218:	2b1f      	cmp	r3, #31
   1121a:	d90e      	bls.n	1123a <Lpc40xxSystemController::SetCpuClockDivider(unsigned char)+0x32>
   1121c:	f240 136f 	movw	r3, #367	; 0x16f
   11220:	4a0e      	ldr	r2, [pc, #56]	; (1125c <Lpc40xxSystemController::SetCpuClockDivider(unsigned char)+0x54>)
   11222:	490f      	ldr	r1, [pc, #60]	; (11260 <Lpc40xxSystemController::SetCpuClockDivider(unsigned char)+0x58>)
   11224:	480f      	ldr	r0, [pc, #60]	; (11264 <Lpc40xxSystemController::SetCpuClockDivider(unsigned char)+0x5c>)
   11226:	f003 f95d 	bl	144e4 <printf>
   1122a:	480f      	ldr	r0, [pc, #60]	; (11268 <Lpc40xxSystemController::SetCpuClockDivider(unsigned char)+0x60>)
   1122c:	f001 fece 	bl	12fcc <puts>
   11230:	2100      	movs	r1, #0
   11232:	2001      	movs	r0, #1
   11234:	f7ff fcd4 	bl	10be0 <debug::PrintBacktrace(bool, void*)>
   11238:	e7fe      	b.n	11238 <Lpc40xxSystemController::SetCpuClockDivider(unsigned char)+0x30>
    system_controller->CCLKSEL =
        (system_controller->CCLKSEL & ~kClearCpuDivider) | cpu_divider;
   1123a:	4b0c      	ldr	r3, [pc, #48]	; (1126c <Lpc40xxSystemController::SetCpuClockDivider(unsigned char)+0x64>)
   1123c:	681b      	ldr	r3, [r3, #0]
   1123e:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   11242:	f023 011f 	bic.w	r1, r3, #31
   11246:	f89d 2003 	ldrb.w	r2, [sp, #3]
    system_controller->CCLKSEL =
   1124a:	4b08      	ldr	r3, [pc, #32]	; (1126c <Lpc40xxSystemController::SetCpuClockDivider(unsigned char)+0x64>)
   1124c:	681b      	ldr	r3, [r3, #0]
        (system_controller->CCLKSEL & ~kClearCpuDivider) | cpu_divider;
   1124e:	430a      	orrs	r2, r1
    system_controller->CCLKSEL =
   11250:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
  }
   11254:	bf00      	nop
   11256:	b003      	add	sp, #12
   11258:	f85d fb04 	ldr.w	pc, [sp], #4
   1125c:	00017c5c 	.word	0x00017c5c
   11260:	000179e0 	.word	0x000179e0
   11264:	000177c4 	.word	0x000177c4
   11268:	0001756c 	.word	0x0001756c
   1126c:	10000050 	.word	0x10000050

00011270 <Lpc40xxSystemController::SetEmcClockDivider(Lpc40xxSystemController::EmcDivider)>:

  void SetEmcClockDivider(EmcDivider emc_divider)
   11270:	b082      	sub	sp, #8
   11272:	9001      	str	r0, [sp, #4]
   11274:	460b      	mov	r3, r1
   11276:	f88d 3003 	strb.w	r3, [sp, #3]
  {
    system_controller->EMCCLKSEL =
        (system_controller->EMCCLKSEL & ~kClearEmcDivider) |
   1127a:	4b08      	ldr	r3, [pc, #32]	; (1129c <Lpc40xxSystemController::SetEmcClockDivider(Lpc40xxSystemController::EmcDivider)+0x2c>)
   1127c:	681b      	ldr	r3, [r3, #0]
   1127e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   11282:	f023 0101 	bic.w	r1, r3, #1
        static_cast<uint8_t>(emc_divider);
   11286:	f89d 2003 	ldrb.w	r2, [sp, #3]
    system_controller->EMCCLKSEL =
   1128a:	4b04      	ldr	r3, [pc, #16]	; (1129c <Lpc40xxSystemController::SetEmcClockDivider(Lpc40xxSystemController::EmcDivider)+0x2c>)
   1128c:	681b      	ldr	r3, [r3, #0]
        (system_controller->EMCCLKSEL & ~kClearEmcDivider) |
   1128e:	430a      	orrs	r2, r1
    system_controller->EMCCLKSEL =
   11290:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }
   11294:	bf00      	nop
   11296:	b002      	add	sp, #8
   11298:	4770      	bx	lr
   1129a:	bf00      	nop
   1129c:	10000050 	.word	0x10000050

000112a0 <SystemTimer::DisableTimer()>:
  /// system_timer_isr defaults to nullptr. The actual SystemTickHandler should
  /// check if the isr is set to nullptr, and if it is, turn off the timer, if
  /// set a proper function then execute it.
  inline static IsrPointer system_timer_isr = nullptr;
  /// WARNING: Doing so will most likely disable FreeRTOS
  static void DisableTimer()
   112a0:	b510      	push	{r4, lr}
   112a2:	4674      	mov	r4, lr
   112a4:	4623      	mov	r3, r4
   112a6:	4619      	mov	r1, r3
   112a8:	480a      	ldr	r0, [pc, #40]	; (112d4 <SystemTimer::DisableTimer()+0x34>)
   112aa:	f001 febf 	bl	1302c <__cyg_profile_func_enter>
  {
    sys_tick->LOAD = 0;
   112ae:	4b0a      	ldr	r3, [pc, #40]	; (112d8 <SystemTimer::DisableTimer()+0x38>)
   112b0:	681b      	ldr	r3, [r3, #0]
   112b2:	2200      	movs	r2, #0
   112b4:	605a      	str	r2, [r3, #4]
    sys_tick->VAL  = 0;
   112b6:	4b08      	ldr	r3, [pc, #32]	; (112d8 <SystemTimer::DisableTimer()+0x38>)
   112b8:	681b      	ldr	r3, [r3, #0]
   112ba:	2200      	movs	r2, #0
   112bc:	609a      	str	r2, [r3, #8]
    sys_tick->CTRL = 0;
   112be:	4b06      	ldr	r3, [pc, #24]	; (112d8 <SystemTimer::DisableTimer()+0x38>)
   112c0:	681b      	ldr	r3, [r3, #0]
   112c2:	2200      	movs	r2, #0
   112c4:	601a      	str	r2, [r3, #0]
   112c6:	4623      	mov	r3, r4
   112c8:	4619      	mov	r1, r3
   112ca:	4802      	ldr	r0, [pc, #8]	; (112d4 <SystemTimer::DisableTimer()+0x34>)
   112cc:	f001 fec2 	bl	13054 <__cyg_profile_func_exit>
  }
   112d0:	bf00      	nop
   112d2:	bd10      	pop	{r4, pc}
   112d4:	000112a1 	.word	0x000112a1
   112d8:	10000058 	.word	0x10000058

000112dc <SystemTimer::SystemTimerHandler()>:
  static void SystemTimerHandler()
   112dc:	b510      	push	{r4, lr}
   112de:	4674      	mov	r4, lr
   112e0:	4623      	mov	r3, r4
   112e2:	4619      	mov	r1, r3
   112e4:	4808      	ldr	r0, [pc, #32]	; (11308 <SystemTimer::SystemTimerHandler()+0x2c>)
   112e6:	f001 fea1 	bl	1302c <__cyg_profile_func_enter>
  {
    // This assumes that SysTickHandler is called every millisecond.
    // Changing that frequency will distort the milliseconds time.
    if (system_timer_isr != nullptr)
   112ea:	4b08      	ldr	r3, [pc, #32]	; (1130c <SystemTimer::SystemTimerHandler()+0x30>)
   112ec:	681b      	ldr	r3, [r3, #0]
   112ee:	2b00      	cmp	r3, #0
   112f0:	d002      	beq.n	112f8 <SystemTimer::SystemTimerHandler()+0x1c>
    {
      system_timer_isr();
   112f2:	4b06      	ldr	r3, [pc, #24]	; (1130c <SystemTimer::SystemTimerHandler()+0x30>)
   112f4:	681b      	ldr	r3, [r3, #0]
   112f6:	4798      	blx	r3
   112f8:	4623      	mov	r3, r4
   112fa:	4619      	mov	r1, r3
   112fc:	4802      	ldr	r0, [pc, #8]	; (11308 <SystemTimer::SystemTimerHandler()+0x2c>)
   112fe:	f001 fea9 	bl	13054 <__cyg_profile_func_exit>
    }
  }
   11302:	bf00      	nop
   11304:	bd10      	pop	{r4, pc}
   11306:	bf00      	nop
   11308:	000112dd 	.word	0x000112dd
   1130c:	10000390 	.word	0x10000390

00011310 <SystemTimer::SetIsrFunction(void (*)())>:
  constexpr SystemTimer() {}
  void SetIsrFunction(IsrPointer isr) override
   11310:	b510      	push	{r4, lr}
   11312:	b082      	sub	sp, #8
   11314:	4674      	mov	r4, lr
   11316:	9001      	str	r0, [sp, #4]
   11318:	9100      	str	r1, [sp, #0]
   1131a:	4623      	mov	r3, r4
   1131c:	4619      	mov	r1, r3
   1131e:	4807      	ldr	r0, [pc, #28]	; (1133c <SystemTimer::SetIsrFunction(void (*)())+0x2c>)
   11320:	f001 fe84 	bl	1302c <__cyg_profile_func_enter>
  {
    system_timer_isr = isr;
   11324:	4a06      	ldr	r2, [pc, #24]	; (11340 <SystemTimer::SetIsrFunction(void (*)())+0x30>)
   11326:	9b00      	ldr	r3, [sp, #0]
   11328:	6013      	str	r3, [r2, #0]
   1132a:	4623      	mov	r3, r4
   1132c:	4619      	mov	r1, r3
   1132e:	4803      	ldr	r0, [pc, #12]	; (1133c <SystemTimer::SetIsrFunction(void (*)())+0x2c>)
   11330:	f001 fe90 	bl	13054 <__cyg_profile_func_exit>
  }
   11334:	bf00      	nop
   11336:	b002      	add	sp, #8
   11338:	bd10      	pop	{r4, pc}
   1133a:	bf00      	nop
   1133c:	00011311 	.word	0x00011311
   11340:	10000390 	.word	0x10000390

00011344 <SystemTimer::StartTimer()>:
  bool StartTimer() override
   11344:	b530      	push	{r4, r5, lr}
   11346:	b085      	sub	sp, #20
   11348:	4675      	mov	r5, lr
   1134a:	9001      	str	r0, [sp, #4]
   1134c:	462b      	mov	r3, r5
   1134e:	4619      	mov	r1, r3
   11350:	4820      	ldr	r0, [pc, #128]	; (113d4 <SystemTimer::StartTimer()+0x90>)
   11352:	f001 fe6b 	bl	1302c <__cyg_profile_func_enter>
  {
    bool successful = false;
   11356:	2300      	movs	r3, #0
   11358:	f88d 300f 	strb.w	r3, [sp, #15]
    if (sys_tick->LOAD != 0)
   1135c:	4b1e      	ldr	r3, [pc, #120]	; (113d8 <SystemTimer::StartTimer()+0x94>)
   1135e:	681b      	ldr	r3, [r3, #0]
   11360:	685b      	ldr	r3, [r3, #4]
   11362:	2b00      	cmp	r3, #0
   11364:	bf14      	ite	ne
   11366:	2301      	movne	r3, #1
   11368:	2300      	moveq	r3, #0
   1136a:	b2db      	uxtb	r3, r3
   1136c:	2b00      	cmp	r3, #0
   1136e:	d01e      	beq.n	113ae <SystemTimer::StartTimer()+0x6a>
    {
      sys_tick->VAL = 0;
   11370:	4b19      	ldr	r3, [pc, #100]	; (113d8 <SystemTimer::StartTimer()+0x94>)
   11372:	681b      	ldr	r3, [r3, #0]
   11374:	2200      	movs	r2, #0
   11376:	609a      	str	r2, [r3, #8]
      sys_tick->CTRL |= (1 << ControlBitMap::kTickInterupt);
   11378:	4b17      	ldr	r3, [pc, #92]	; (113d8 <SystemTimer::StartTimer()+0x94>)
   1137a:	681b      	ldr	r3, [r3, #0]
   1137c:	681a      	ldr	r2, [r3, #0]
   1137e:	4b16      	ldr	r3, [pc, #88]	; (113d8 <SystemTimer::StartTimer()+0x94>)
   11380:	681b      	ldr	r3, [r3, #0]
   11382:	f042 0202 	orr.w	r2, r2, #2
   11386:	601a      	str	r2, [r3, #0]
      sys_tick->CTRL |= (1 << ControlBitMap::kEnableCounter);
   11388:	4b13      	ldr	r3, [pc, #76]	; (113d8 <SystemTimer::StartTimer()+0x94>)
   1138a:	681b      	ldr	r3, [r3, #0]
   1138c:	681a      	ldr	r2, [r3, #0]
   1138e:	4b12      	ldr	r3, [pc, #72]	; (113d8 <SystemTimer::StartTimer()+0x94>)
   11390:	681b      	ldr	r3, [r3, #0]
   11392:	f042 0201 	orr.w	r2, r2, #1
   11396:	601a      	str	r2, [r3, #0]
      sys_tick->CTRL |= (1 << ControlBitMap::kClkSource);
   11398:	4b0f      	ldr	r3, [pc, #60]	; (113d8 <SystemTimer::StartTimer()+0x94>)
   1139a:	681b      	ldr	r3, [r3, #0]
   1139c:	681a      	ldr	r2, [r3, #0]
   1139e:	4b0e      	ldr	r3, [pc, #56]	; (113d8 <SystemTimer::StartTimer()+0x94>)
   113a0:	681b      	ldr	r3, [r3, #0]
   113a2:	f042 0204 	orr.w	r2, r2, #4
   113a6:	601a      	str	r2, [r3, #0]
      successful = true;
   113a8:	2301      	movs	r3, #1
   113aa:	f88d 300f 	strb.w	r3, [sp, #15]
    }
    RegisterIsr(SysTick_IRQn, SystemTimerHandler);
   113ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   113b2:	2201      	movs	r2, #1
   113b4:	4909      	ldr	r1, [pc, #36]	; (113dc <SystemTimer::StartTimer()+0x98>)
   113b6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   113ba:	f001 fd0f 	bl	12ddc <RegisterIsr(IRQn, void (*)(), bool, long)>
    return successful;
   113be:	f89d 400f 	ldrb.w	r4, [sp, #15]
   113c2:	462b      	mov	r3, r5
   113c4:	4619      	mov	r1, r3
   113c6:	4803      	ldr	r0, [pc, #12]	; (113d4 <SystemTimer::StartTimer()+0x90>)
   113c8:	f001 fe44 	bl	13054 <__cyg_profile_func_exit>
   113cc:	4623      	mov	r3, r4
  }
   113ce:	4618      	mov	r0, r3
   113d0:	b005      	add	sp, #20
   113d2:	bd30      	pop	{r4, r5, pc}
   113d4:	00011345 	.word	0x00011345
   113d8:	10000058 	.word	0x10000058
   113dc:	000112dd 	.word	0x000112dd

000113e0 <SystemTimer::SetTickFrequency(unsigned long)>:
  ///          remainder will be returned.
  ///          If the freqency supplied is less then 2Hz, the function will
  ///          return without changing any hardware.
  ///          If the reload value exceeds the SysTick_LOAD_RELOAD_Msk, the
  ///          returned value is the SysTick_LOAD_RELOAD_Msk.
  uint32_t SetTickFrequency(uint32_t frequency) override
   113e0:	b530      	push	{r4, r5, lr}
   113e2:	b085      	sub	sp, #20
   113e4:	4675      	mov	r5, lr
   113e6:	9001      	str	r0, [sp, #4]
   113e8:	9100      	str	r1, [sp, #0]
   113ea:	462b      	mov	r3, r5
   113ec:	4619      	mov	r1, r3
   113ee:	481f      	ldr	r0, [pc, #124]	; (1146c <SystemTimer::SetTickFrequency(unsigned long)+0x8c>)
   113f0:	f001 fe1c 	bl	1302c <__cyg_profile_func_enter>
  {
    if (frequency <= 1)
   113f4:	9b00      	ldr	r3, [sp, #0]
   113f6:	2b01      	cmp	r3, #1
   113f8:	d801      	bhi.n	113fe <SystemTimer::SetTickFrequency(unsigned long)+0x1e>
    {
      return 0;
   113fa:	2400      	movs	r4, #0
   113fc:	e02d      	b.n	1145a <SystemTimer::SetTickFrequency(unsigned long)+0x7a>
    }
    uint32_t reload_value = (GetSystemFrequency() / frequency) - 1;
   113fe:	9b01      	ldr	r3, [sp, #4]
   11400:	1d1a      	adds	r2, r3, #4
   11402:	9b01      	ldr	r3, [sp, #4]
   11404:	685b      	ldr	r3, [r3, #4]
   11406:	330c      	adds	r3, #12
   11408:	681b      	ldr	r3, [r3, #0]
   1140a:	4610      	mov	r0, r2
   1140c:	4798      	blx	r3
   1140e:	4602      	mov	r2, r0
   11410:	9b00      	ldr	r3, [sp, #0]
   11412:	fbb2 f3f3 	udiv	r3, r2, r3
   11416:	3b01      	subs	r3, #1
   11418:	9303      	str	r3, [sp, #12]
    int remainder         = (GetSystemFrequency() % frequency);
   1141a:	9b01      	ldr	r3, [sp, #4]
   1141c:	1d1a      	adds	r2, r3, #4
   1141e:	9b01      	ldr	r3, [sp, #4]
   11420:	685b      	ldr	r3, [r3, #4]
   11422:	330c      	adds	r3, #12
   11424:	681b      	ldr	r3, [r3, #0]
   11426:	4610      	mov	r0, r2
   11428:	4798      	blx	r3
   1142a:	4603      	mov	r3, r0
   1142c:	9a00      	ldr	r2, [sp, #0]
   1142e:	fbb3 f2f2 	udiv	r2, r3, r2
   11432:	9900      	ldr	r1, [sp, #0]
   11434:	fb01 f202 	mul.w	r2, r1, r2
   11438:	1a9b      	subs	r3, r3, r2
   1143a:	9302      	str	r3, [sp, #8]
    if (reload_value > SysTick_LOAD_RELOAD_Msk)
   1143c:	9b03      	ldr	r3, [sp, #12]
   1143e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
   11442:	d305      	bcc.n	11450 <SystemTimer::SetTickFrequency(unsigned long)+0x70>
    {
      reload_value = SysTick_LOAD_RELOAD_Msk;
   11444:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
   11448:	9303      	str	r3, [sp, #12]
      remainder    = SysTick_LOAD_RELOAD_Msk;
   1144a:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
   1144e:	9302      	str	r3, [sp, #8]
    }
    sys_tick->LOAD = reload_value;
   11450:	4b07      	ldr	r3, [pc, #28]	; (11470 <SystemTimer::SetTickFrequency(unsigned long)+0x90>)
   11452:	681b      	ldr	r3, [r3, #0]
   11454:	9a03      	ldr	r2, [sp, #12]
   11456:	605a      	str	r2, [r3, #4]
    return remainder;
   11458:	9c02      	ldr	r4, [sp, #8]
   1145a:	462b      	mov	r3, r5
   1145c:	4619      	mov	r1, r3
   1145e:	4803      	ldr	r0, [pc, #12]	; (1146c <SystemTimer::SetTickFrequency(unsigned long)+0x8c>)
   11460:	f001 fdf8 	bl	13054 <__cyg_profile_func_exit>
   11464:	4623      	mov	r3, r4
  }
   11466:	4618      	mov	r0, r3
   11468:	b005      	add	sp, #20
   1146a:	bd30      	pop	{r4, r5, pc}
   1146c:	000113e1 	.word	0x000113e1
   11470:	10000058 	.word	0x10000058

00011474 <Pin::SetPinFunction(unsigned char)>:
  }
  constexpr Pin(uint8_t port_number, uint8_t pin_number)
      : port_(port_number), pin_(pin_number)
  {
  }
  void SetPinFunction(uint8_t function) override
   11474:	b5f0      	push	{r4, r5, r6, r7, lr}
   11476:	b085      	sub	sp, #20
   11478:	4677      	mov	r7, lr
   1147a:	9003      	str	r0, [sp, #12]
   1147c:	460b      	mov	r3, r1
   1147e:	f88d 300b 	strb.w	r3, [sp, #11]
   11482:	463b      	mov	r3, r7
   11484:	4619      	mov	r1, r3
   11486:	4817      	ldr	r0, [pc, #92]	; (114e4 <Pin::SetPinFunction(unsigned char)+0x70>)
   11488:	f001 fdd0 	bl	1302c <__cyg_profile_func_enter>
  {
    pin_map->_register[port_][pin_] =
        BitPlace(pin_map->_register[port_][pin_], PinBitMap::kFunction,
   1148c:	4b16      	ldr	r3, [pc, #88]	; (114e8 <Pin::SetPinFunction(unsigned char)+0x74>)
   1148e:	681b      	ldr	r3, [r3, #0]
   11490:	9a03      	ldr	r2, [sp, #12]
   11492:	7912      	ldrb	r2, [r2, #4]
   11494:	4610      	mov	r0, r2
   11496:	9a03      	ldr	r2, [sp, #12]
   11498:	7952      	ldrb	r2, [r2, #5]
   1149a:	4611      	mov	r1, r2
   1149c:	0142      	lsls	r2, r0, #5
   1149e:	440a      	add	r2, r1
   114a0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
                 function & 0b111, 3);
   114a4:	f89d 300b 	ldrb.w	r3, [sp, #11]
        BitPlace(pin_map->_register[port_][pin_], PinBitMap::kFunction,
   114a8:	f003 0207 	and.w	r2, r3, #7
    pin_map->_register[port_][pin_] =
   114ac:	4b0e      	ldr	r3, [pc, #56]	; (114e8 <Pin::SetPinFunction(unsigned char)+0x74>)
   114ae:	681c      	ldr	r4, [r3, #0]
   114b0:	9b03      	ldr	r3, [sp, #12]
   114b2:	791b      	ldrb	r3, [r3, #4]
   114b4:	461e      	mov	r6, r3
   114b6:	9b03      	ldr	r3, [sp, #12]
   114b8:	795b      	ldrb	r3, [r3, #5]
   114ba:	461d      	mov	r5, r3
        BitPlace(pin_map->_register[port_][pin_], PinBitMap::kFunction,
   114bc:	2303      	movs	r3, #3
   114be:	9300      	str	r3, [sp, #0]
   114c0:	4613      	mov	r3, r2
   114c2:	2200      	movs	r2, #0
   114c4:	9803      	ldr	r0, [sp, #12]
   114c6:	f000 fa67 	bl	11998 <Pin::BitPlace(unsigned long, unsigned long, unsigned long, unsigned long)>
   114ca:	4602      	mov	r2, r0
    pin_map->_register[port_][pin_] =
   114cc:	0173      	lsls	r3, r6, #5
   114ce:	442b      	add	r3, r5
   114d0:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
   114d4:	463b      	mov	r3, r7
   114d6:	4619      	mov	r1, r3
   114d8:	4802      	ldr	r0, [pc, #8]	; (114e4 <Pin::SetPinFunction(unsigned char)+0x70>)
   114da:	f001 fdbb 	bl	13054 <__cyg_profile_func_exit>
  }
   114de:	bf00      	nop
   114e0:	b005      	add	sp, #20
   114e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   114e4:	00011475 	.word	0x00011475
   114e8:	1000005c 	.word	0x1000005c

000114ec <Pin::SetMode(PinInterface::Mode)>:
  void SetMode(PinInterface::Mode mode) override
   114ec:	b5f0      	push	{r4, r5, r6, r7, lr}
   114ee:	b087      	sub	sp, #28
   114f0:	4677      	mov	r7, lr
   114f2:	9003      	str	r0, [sp, #12]
   114f4:	460b      	mov	r3, r1
   114f6:	f88d 300b 	strb.w	r3, [sp, #11]
   114fa:	463b      	mov	r3, r7
   114fc:	4619      	mov	r1, r3
   114fe:	4819      	ldr	r0, [pc, #100]	; (11564 <Pin::SetMode(PinInterface::Mode)+0x78>)
   11500:	f001 fd94 	bl	1302c <__cyg_profile_func_enter>
  {
    uint8_t ui_mode                 = static_cast<uint8_t>(mode);
   11504:	f89d 300b 	ldrb.w	r3, [sp, #11]
   11508:	f88d 3017 	strb.w	r3, [sp, #23]
    pin_map->_register[port_][pin_] = BitPlace(
   1150c:	4b16      	ldr	r3, [pc, #88]	; (11568 <Pin::SetMode(PinInterface::Mode)+0x7c>)
   1150e:	681b      	ldr	r3, [r3, #0]
        pin_map->_register[port_][pin_], PinBitMap::kMode, ui_mode & 0b11, 2);
   11510:	9a03      	ldr	r2, [sp, #12]
   11512:	7912      	ldrb	r2, [r2, #4]
   11514:	4610      	mov	r0, r2
   11516:	9a03      	ldr	r2, [sp, #12]
   11518:	7952      	ldrb	r2, [r2, #5]
   1151a:	4611      	mov	r1, r2
    pin_map->_register[port_][pin_] = BitPlace(
   1151c:	0142      	lsls	r2, r0, #5
   1151e:	440a      	add	r2, r1
   11520:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
        pin_map->_register[port_][pin_], PinBitMap::kMode, ui_mode & 0b11, 2);
   11524:	f89d 3017 	ldrb.w	r3, [sp, #23]
    pin_map->_register[port_][pin_] = BitPlace(
   11528:	f003 0203 	and.w	r2, r3, #3
   1152c:	4b0e      	ldr	r3, [pc, #56]	; (11568 <Pin::SetMode(PinInterface::Mode)+0x7c>)
   1152e:	681c      	ldr	r4, [r3, #0]
   11530:	9b03      	ldr	r3, [sp, #12]
   11532:	791b      	ldrb	r3, [r3, #4]
   11534:	461e      	mov	r6, r3
   11536:	9b03      	ldr	r3, [sp, #12]
   11538:	795b      	ldrb	r3, [r3, #5]
   1153a:	461d      	mov	r5, r3
   1153c:	2302      	movs	r3, #2
   1153e:	9300      	str	r3, [sp, #0]
   11540:	4613      	mov	r3, r2
   11542:	2203      	movs	r2, #3
   11544:	9803      	ldr	r0, [sp, #12]
   11546:	f000 fa27 	bl	11998 <Pin::BitPlace(unsigned long, unsigned long, unsigned long, unsigned long)>
   1154a:	4602      	mov	r2, r0
   1154c:	0173      	lsls	r3, r6, #5
   1154e:	442b      	add	r3, r5
   11550:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
   11554:	463b      	mov	r3, r7
   11556:	4619      	mov	r1, r3
   11558:	4802      	ldr	r0, [pc, #8]	; (11564 <Pin::SetMode(PinInterface::Mode)+0x78>)
   1155a:	f001 fd7b 	bl	13054 <__cyg_profile_func_exit>
  }
   1155e:	bf00      	nop
   11560:	b007      	add	sp, #28
   11562:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11564:	000114ed 	.word	0x000114ed
   11568:	1000005c 	.word	0x1000005c

0001156c <Pin::EnableHysteresis(bool)>:
  void EnableHysteresis(bool enable_hysteresis = true) override
   1156c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1156e:	b085      	sub	sp, #20
   11570:	4677      	mov	r7, lr
   11572:	9003      	str	r0, [sp, #12]
   11574:	460b      	mov	r3, r1
   11576:	f88d 300b 	strb.w	r3, [sp, #11]
   1157a:	463b      	mov	r3, r7
   1157c:	4619      	mov	r1, r3
   1157e:	4816      	ldr	r0, [pc, #88]	; (115d8 <Pin::EnableHysteresis(bool)+0x6c>)
   11580:	f001 fd54 	bl	1302c <__cyg_profile_func_enter>
  {
    pin_map->_register[port_][pin_] =
        BitPlace(pin_map->_register[port_][pin_], PinBitMap::kHysteresis,
   11584:	4b15      	ldr	r3, [pc, #84]	; (115dc <Pin::EnableHysteresis(bool)+0x70>)
   11586:	681b      	ldr	r3, [r3, #0]
   11588:	9a03      	ldr	r2, [sp, #12]
   1158a:	7912      	ldrb	r2, [r2, #4]
   1158c:	4610      	mov	r0, r2
   1158e:	9a03      	ldr	r2, [sp, #12]
   11590:	7952      	ldrb	r2, [r2, #5]
   11592:	4611      	mov	r1, r2
   11594:	0142      	lsls	r2, r0, #5
   11596:	440a      	add	r2, r1
   11598:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   1159c:	f89d 200b 	ldrb.w	r2, [sp, #11]
    pin_map->_register[port_][pin_] =
   115a0:	4b0e      	ldr	r3, [pc, #56]	; (115dc <Pin::EnableHysteresis(bool)+0x70>)
   115a2:	681c      	ldr	r4, [r3, #0]
   115a4:	9b03      	ldr	r3, [sp, #12]
   115a6:	791b      	ldrb	r3, [r3, #4]
   115a8:	461e      	mov	r6, r3
   115aa:	9b03      	ldr	r3, [sp, #12]
   115ac:	795b      	ldrb	r3, [r3, #5]
   115ae:	461d      	mov	r5, r3
        BitPlace(pin_map->_register[port_][pin_], PinBitMap::kHysteresis,
   115b0:	2301      	movs	r3, #1
   115b2:	9300      	str	r3, [sp, #0]
   115b4:	4613      	mov	r3, r2
   115b6:	2205      	movs	r2, #5
   115b8:	9803      	ldr	r0, [sp, #12]
   115ba:	f000 f9ed 	bl	11998 <Pin::BitPlace(unsigned long, unsigned long, unsigned long, unsigned long)>
   115be:	4602      	mov	r2, r0
    pin_map->_register[port_][pin_] =
   115c0:	0173      	lsls	r3, r6, #5
   115c2:	442b      	add	r3, r5
   115c4:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
   115c8:	463b      	mov	r3, r7
   115ca:	4619      	mov	r1, r3
   115cc:	4802      	ldr	r0, [pc, #8]	; (115d8 <Pin::EnableHysteresis(bool)+0x6c>)
   115ce:	f001 fd41 	bl	13054 <__cyg_profile_func_exit>
                 enable_hysteresis, 1);
  }
   115d2:	bf00      	nop
   115d4:	b005      	add	sp, #20
   115d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   115d8:	0001156d 	.word	0x0001156d
   115dc:	1000005c 	.word	0x1000005c

000115e0 <Pin::SetAsActiveLow(bool)>:
  void SetAsActiveLow(bool set_as_active_low = true) override
   115e0:	b5f0      	push	{r4, r5, r6, r7, lr}
   115e2:	b085      	sub	sp, #20
   115e4:	4677      	mov	r7, lr
   115e6:	9003      	str	r0, [sp, #12]
   115e8:	460b      	mov	r3, r1
   115ea:	f88d 300b 	strb.w	r3, [sp, #11]
   115ee:	463b      	mov	r3, r7
   115f0:	4619      	mov	r1, r3
   115f2:	4816      	ldr	r0, [pc, #88]	; (1164c <Pin::SetAsActiveLow(bool)+0x6c>)
   115f4:	f001 fd1a 	bl	1302c <__cyg_profile_func_enter>
  {
    pin_map->_register[port_][pin_] =
        BitPlace(pin_map->_register[port_][pin_], PinBitMap::kInputInvert,
   115f8:	4b15      	ldr	r3, [pc, #84]	; (11650 <Pin::SetAsActiveLow(bool)+0x70>)
   115fa:	681b      	ldr	r3, [r3, #0]
   115fc:	9a03      	ldr	r2, [sp, #12]
   115fe:	7912      	ldrb	r2, [r2, #4]
   11600:	4610      	mov	r0, r2
   11602:	9a03      	ldr	r2, [sp, #12]
   11604:	7952      	ldrb	r2, [r2, #5]
   11606:	4611      	mov	r1, r2
   11608:	0142      	lsls	r2, r0, #5
   1160a:	440a      	add	r2, r1
   1160c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   11610:	f89d 200b 	ldrb.w	r2, [sp, #11]
    pin_map->_register[port_][pin_] =
   11614:	4b0e      	ldr	r3, [pc, #56]	; (11650 <Pin::SetAsActiveLow(bool)+0x70>)
   11616:	681c      	ldr	r4, [r3, #0]
   11618:	9b03      	ldr	r3, [sp, #12]
   1161a:	791b      	ldrb	r3, [r3, #4]
   1161c:	461e      	mov	r6, r3
   1161e:	9b03      	ldr	r3, [sp, #12]
   11620:	795b      	ldrb	r3, [r3, #5]
   11622:	461d      	mov	r5, r3
        BitPlace(pin_map->_register[port_][pin_], PinBitMap::kInputInvert,
   11624:	2301      	movs	r3, #1
   11626:	9300      	str	r3, [sp, #0]
   11628:	4613      	mov	r3, r2
   1162a:	2206      	movs	r2, #6
   1162c:	9803      	ldr	r0, [sp, #12]
   1162e:	f000 f9b3 	bl	11998 <Pin::BitPlace(unsigned long, unsigned long, unsigned long, unsigned long)>
   11632:	4602      	mov	r2, r0
    pin_map->_register[port_][pin_] =
   11634:	0173      	lsls	r3, r6, #5
   11636:	442b      	add	r3, r5
   11638:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
   1163c:	463b      	mov	r3, r7
   1163e:	4619      	mov	r1, r3
   11640:	4802      	ldr	r0, [pc, #8]	; (1164c <Pin::SetAsActiveLow(bool)+0x6c>)
   11642:	f001 fd07 	bl	13054 <__cyg_profile_func_exit>
                 set_as_active_low, 1);
  }
   11646:	bf00      	nop
   11648:	b005      	add	sp, #20
   1164a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1164c:	000115e1 	.word	0x000115e1
   11650:	1000005c 	.word	0x1000005c

00011654 <Pin::SetAsAnalogMode(bool)>:
  // Set bit to 0 to enable analog mode
  void SetAsAnalogMode(bool set_as_analog = true) override
   11654:	b5f0      	push	{r4, r5, r6, r7, lr}
   11656:	b085      	sub	sp, #20
   11658:	4677      	mov	r7, lr
   1165a:	9003      	str	r0, [sp, #12]
   1165c:	460b      	mov	r3, r1
   1165e:	f88d 300b 	strb.w	r3, [sp, #11]
   11662:	463b      	mov	r3, r7
   11664:	4619      	mov	r1, r3
   11666:	4818      	ldr	r0, [pc, #96]	; (116c8 <Pin::SetAsAnalogMode(bool)+0x74>)
   11668:	f001 fce0 	bl	1302c <__cyg_profile_func_enter>
  {
    pin_map->_register[port_][pin_] =
        BitPlace(pin_map->_register[port_][pin_], PinBitMap::kAnalogDigitalMode,
   1166c:	4b17      	ldr	r3, [pc, #92]	; (116cc <Pin::SetAsAnalogMode(bool)+0x78>)
   1166e:	681b      	ldr	r3, [r3, #0]
   11670:	9a03      	ldr	r2, [sp, #12]
   11672:	7912      	ldrb	r2, [r2, #4]
   11674:	4610      	mov	r0, r2
   11676:	9a03      	ldr	r2, [sp, #12]
   11678:	7952      	ldrb	r2, [r2, #5]
   1167a:	4611      	mov	r1, r2
   1167c:	0142      	lsls	r2, r0, #5
   1167e:	440a      	add	r2, r1
   11680:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
                 !set_as_analog, 1);
   11684:	f89d 300b 	ldrb.w	r3, [sp, #11]
   11688:	f083 0301 	eor.w	r3, r3, #1
   1168c:	b2db      	uxtb	r3, r3
        BitPlace(pin_map->_register[port_][pin_], PinBitMap::kAnalogDigitalMode,
   1168e:	461a      	mov	r2, r3
    pin_map->_register[port_][pin_] =
   11690:	4b0e      	ldr	r3, [pc, #56]	; (116cc <Pin::SetAsAnalogMode(bool)+0x78>)
   11692:	681c      	ldr	r4, [r3, #0]
   11694:	9b03      	ldr	r3, [sp, #12]
   11696:	791b      	ldrb	r3, [r3, #4]
   11698:	461e      	mov	r6, r3
   1169a:	9b03      	ldr	r3, [sp, #12]
   1169c:	795b      	ldrb	r3, [r3, #5]
   1169e:	461d      	mov	r5, r3
        BitPlace(pin_map->_register[port_][pin_], PinBitMap::kAnalogDigitalMode,
   116a0:	2301      	movs	r3, #1
   116a2:	9300      	str	r3, [sp, #0]
   116a4:	4613      	mov	r3, r2
   116a6:	2207      	movs	r2, #7
   116a8:	9803      	ldr	r0, [sp, #12]
   116aa:	f000 f975 	bl	11998 <Pin::BitPlace(unsigned long, unsigned long, unsigned long, unsigned long)>
   116ae:	4602      	mov	r2, r0
    pin_map->_register[port_][pin_] =
   116b0:	0173      	lsls	r3, r6, #5
   116b2:	442b      	add	r3, r5
   116b4:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
   116b8:	463b      	mov	r3, r7
   116ba:	4619      	mov	r1, r3
   116bc:	4802      	ldr	r0, [pc, #8]	; (116c8 <Pin::SetAsAnalogMode(bool)+0x74>)
   116be:	f001 fcc9 	bl	13054 <__cyg_profile_func_exit>
  }
   116c2:	bf00      	nop
   116c4:	b005      	add	sp, #20
   116c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   116c8:	00011655 	.word	0x00011655
   116cc:	1000005c 	.word	0x1000005c

000116d0 <Pin::EnableDigitalFilter(bool)>:
  // Enable by setting bit to 0 to enable digital filter.
  void EnableDigitalFilter(bool enable_digital_filter = true) override
   116d0:	b5f0      	push	{r4, r5, r6, r7, lr}
   116d2:	b085      	sub	sp, #20
   116d4:	4677      	mov	r7, lr
   116d6:	9003      	str	r0, [sp, #12]
   116d8:	460b      	mov	r3, r1
   116da:	f88d 300b 	strb.w	r3, [sp, #11]
   116de:	463b      	mov	r3, r7
   116e0:	4619      	mov	r1, r3
   116e2:	4818      	ldr	r0, [pc, #96]	; (11744 <Pin::EnableDigitalFilter(bool)+0x74>)
   116e4:	f001 fca2 	bl	1302c <__cyg_profile_func_enter>
  {
    pin_map->_register[port_][pin_] =
        BitPlace(pin_map->_register[port_][pin_], PinBitMap::kDigitalFilter,
   116e8:	4b17      	ldr	r3, [pc, #92]	; (11748 <Pin::EnableDigitalFilter(bool)+0x78>)
   116ea:	681b      	ldr	r3, [r3, #0]
   116ec:	9a03      	ldr	r2, [sp, #12]
   116ee:	7912      	ldrb	r2, [r2, #4]
   116f0:	4610      	mov	r0, r2
   116f2:	9a03      	ldr	r2, [sp, #12]
   116f4:	7952      	ldrb	r2, [r2, #5]
   116f6:	4611      	mov	r1, r2
   116f8:	0142      	lsls	r2, r0, #5
   116fa:	440a      	add	r2, r1
   116fc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
                 !enable_digital_filter, 1);
   11700:	f89d 300b 	ldrb.w	r3, [sp, #11]
   11704:	f083 0301 	eor.w	r3, r3, #1
   11708:	b2db      	uxtb	r3, r3
        BitPlace(pin_map->_register[port_][pin_], PinBitMap::kDigitalFilter,
   1170a:	461a      	mov	r2, r3
    pin_map->_register[port_][pin_] =
   1170c:	4b0e      	ldr	r3, [pc, #56]	; (11748 <Pin::EnableDigitalFilter(bool)+0x78>)
   1170e:	681c      	ldr	r4, [r3, #0]
   11710:	9b03      	ldr	r3, [sp, #12]
   11712:	791b      	ldrb	r3, [r3, #4]
   11714:	461e      	mov	r6, r3
   11716:	9b03      	ldr	r3, [sp, #12]
   11718:	795b      	ldrb	r3, [r3, #5]
   1171a:	461d      	mov	r5, r3
        BitPlace(pin_map->_register[port_][pin_], PinBitMap::kDigitalFilter,
   1171c:	2301      	movs	r3, #1
   1171e:	9300      	str	r3, [sp, #0]
   11720:	4613      	mov	r3, r2
   11722:	2208      	movs	r2, #8
   11724:	9803      	ldr	r0, [sp, #12]
   11726:	f000 f937 	bl	11998 <Pin::BitPlace(unsigned long, unsigned long, unsigned long, unsigned long)>
   1172a:	4602      	mov	r2, r0
    pin_map->_register[port_][pin_] =
   1172c:	0173      	lsls	r3, r6, #5
   1172e:	442b      	add	r3, r5
   11730:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
   11734:	463b      	mov	r3, r7
   11736:	4619      	mov	r1, r3
   11738:	4802      	ldr	r0, [pc, #8]	; (11744 <Pin::EnableDigitalFilter(bool)+0x74>)
   1173a:	f001 fc8b 	bl	13054 <__cyg_profile_func_exit>
  }
   1173e:	bf00      	nop
   11740:	b005      	add	sp, #20
   11742:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11744:	000116d1 	.word	0x000116d1
   11748:	1000005c 	.word	0x1000005c

0001174c <Pin::EnableFastMode(bool)>:
  void EnableFastMode(bool enable_fast_mode = true) override
   1174c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1174e:	b085      	sub	sp, #20
   11750:	4677      	mov	r7, lr
   11752:	9003      	str	r0, [sp, #12]
   11754:	460b      	mov	r3, r1
   11756:	f88d 300b 	strb.w	r3, [sp, #11]
   1175a:	463b      	mov	r3, r7
   1175c:	4619      	mov	r1, r3
   1175e:	4816      	ldr	r0, [pc, #88]	; (117b8 <Pin::EnableFastMode(bool)+0x6c>)
   11760:	f001 fc64 	bl	1302c <__cyg_profile_func_enter>
  {
    pin_map->_register[port_][pin_] = BitPlace(
   11764:	4b15      	ldr	r3, [pc, #84]	; (117bc <Pin::EnableFastMode(bool)+0x70>)
   11766:	681b      	ldr	r3, [r3, #0]
        pin_map->_register[port_][pin_], PinBitMap::kSlew, enable_fast_mode, 1);
   11768:	9a03      	ldr	r2, [sp, #12]
   1176a:	7912      	ldrb	r2, [r2, #4]
   1176c:	4610      	mov	r0, r2
   1176e:	9a03      	ldr	r2, [sp, #12]
   11770:	7952      	ldrb	r2, [r2, #5]
   11772:	4611      	mov	r1, r2
    pin_map->_register[port_][pin_] = BitPlace(
   11774:	0142      	lsls	r2, r0, #5
   11776:	440a      	add	r2, r1
   11778:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   1177c:	f89d 200b 	ldrb.w	r2, [sp, #11]
   11780:	4b0e      	ldr	r3, [pc, #56]	; (117bc <Pin::EnableFastMode(bool)+0x70>)
   11782:	681c      	ldr	r4, [r3, #0]
   11784:	9b03      	ldr	r3, [sp, #12]
   11786:	791b      	ldrb	r3, [r3, #4]
   11788:	461e      	mov	r6, r3
   1178a:	9b03      	ldr	r3, [sp, #12]
   1178c:	795b      	ldrb	r3, [r3, #5]
   1178e:	461d      	mov	r5, r3
   11790:	2301      	movs	r3, #1
   11792:	9300      	str	r3, [sp, #0]
   11794:	4613      	mov	r3, r2
   11796:	2209      	movs	r2, #9
   11798:	9803      	ldr	r0, [sp, #12]
   1179a:	f000 f8fd 	bl	11998 <Pin::BitPlace(unsigned long, unsigned long, unsigned long, unsigned long)>
   1179e:	4602      	mov	r2, r0
   117a0:	0173      	lsls	r3, r6, #5
   117a2:	442b      	add	r3, r5
   117a4:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
   117a8:	463b      	mov	r3, r7
   117aa:	4619      	mov	r1, r3
   117ac:	4802      	ldr	r0, [pc, #8]	; (117b8 <Pin::EnableFastMode(bool)+0x6c>)
   117ae:	f001 fc51 	bl	13054 <__cyg_profile_func_exit>
  }
   117b2:	bf00      	nop
   117b4:	b005      	add	sp, #20
   117b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   117b8:	0001174d 	.word	0x0001174d
   117bc:	1000005c 	.word	0x1000005c

000117c0 <Pin::EnableI2cHighSpeedMode(bool)>:
  // Enable by setting bit to 0 for i2c high speed mode
  void EnableI2cHighSpeedMode(bool enable_high_speed = true) override
   117c0:	b5f0      	push	{r4, r5, r6, r7, lr}
   117c2:	b085      	sub	sp, #20
   117c4:	4677      	mov	r7, lr
   117c6:	9003      	str	r0, [sp, #12]
   117c8:	460b      	mov	r3, r1
   117ca:	f88d 300b 	strb.w	r3, [sp, #11]
   117ce:	463b      	mov	r3, r7
   117d0:	4619      	mov	r1, r3
   117d2:	4818      	ldr	r0, [pc, #96]	; (11834 <Pin::EnableI2cHighSpeedMode(bool)+0x74>)
   117d4:	f001 fc2a 	bl	1302c <__cyg_profile_func_enter>
  {
    pin_map->_register[port_][pin_] =
        BitPlace(pin_map->_register[port_][pin_], PinBitMap::kI2cHighSpeed,
   117d8:	4b17      	ldr	r3, [pc, #92]	; (11838 <Pin::EnableI2cHighSpeedMode(bool)+0x78>)
   117da:	681b      	ldr	r3, [r3, #0]
   117dc:	9a03      	ldr	r2, [sp, #12]
   117de:	7912      	ldrb	r2, [r2, #4]
   117e0:	4610      	mov	r0, r2
   117e2:	9a03      	ldr	r2, [sp, #12]
   117e4:	7952      	ldrb	r2, [r2, #5]
   117e6:	4611      	mov	r1, r2
   117e8:	0142      	lsls	r2, r0, #5
   117ea:	440a      	add	r2, r1
   117ec:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
                 !enable_high_speed, 1);
   117f0:	f89d 300b 	ldrb.w	r3, [sp, #11]
   117f4:	f083 0301 	eor.w	r3, r3, #1
   117f8:	b2db      	uxtb	r3, r3
        BitPlace(pin_map->_register[port_][pin_], PinBitMap::kI2cHighSpeed,
   117fa:	461a      	mov	r2, r3
    pin_map->_register[port_][pin_] =
   117fc:	4b0e      	ldr	r3, [pc, #56]	; (11838 <Pin::EnableI2cHighSpeedMode(bool)+0x78>)
   117fe:	681c      	ldr	r4, [r3, #0]
   11800:	9b03      	ldr	r3, [sp, #12]
   11802:	791b      	ldrb	r3, [r3, #4]
   11804:	461e      	mov	r6, r3
   11806:	9b03      	ldr	r3, [sp, #12]
   11808:	795b      	ldrb	r3, [r3, #5]
   1180a:	461d      	mov	r5, r3
        BitPlace(pin_map->_register[port_][pin_], PinBitMap::kI2cHighSpeed,
   1180c:	2301      	movs	r3, #1
   1180e:	9300      	str	r3, [sp, #0]
   11810:	4613      	mov	r3, r2
   11812:	2208      	movs	r2, #8
   11814:	9803      	ldr	r0, [sp, #12]
   11816:	f000 f8bf 	bl	11998 <Pin::BitPlace(unsigned long, unsigned long, unsigned long, unsigned long)>
   1181a:	4602      	mov	r2, r0
    pin_map->_register[port_][pin_] =
   1181c:	0173      	lsls	r3, r6, #5
   1181e:	442b      	add	r3, r5
   11820:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
   11824:	463b      	mov	r3, r7
   11826:	4619      	mov	r1, r3
   11828:	4802      	ldr	r0, [pc, #8]	; (11834 <Pin::EnableI2cHighSpeedMode(bool)+0x74>)
   1182a:	f001 fc13 	bl	13054 <__cyg_profile_func_exit>
  }
   1182e:	bf00      	nop
   11830:	b005      	add	sp, #20
   11832:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11834:	000117c1 	.word	0x000117c1
   11838:	1000005c 	.word	0x1000005c

0001183c <Pin::EnableI2cHighCurrentDrive(bool)>:
  void EnableI2cHighCurrentDrive(bool enable_high_current = true) override
   1183c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1183e:	b085      	sub	sp, #20
   11840:	4677      	mov	r7, lr
   11842:	9003      	str	r0, [sp, #12]
   11844:	460b      	mov	r3, r1
   11846:	f88d 300b 	strb.w	r3, [sp, #11]
   1184a:	463b      	mov	r3, r7
   1184c:	4619      	mov	r1, r3
   1184e:	4816      	ldr	r0, [pc, #88]	; (118a8 <Pin::EnableI2cHighCurrentDrive(bool)+0x6c>)
   11850:	f001 fbec 	bl	1302c <__cyg_profile_func_enter>
  {
    pin_map->_register[port_][pin_] =
        BitPlace(pin_map->_register[port_][pin_],
   11854:	4b15      	ldr	r3, [pc, #84]	; (118ac <Pin::EnableI2cHighCurrentDrive(bool)+0x70>)
   11856:	681b      	ldr	r3, [r3, #0]
   11858:	9a03      	ldr	r2, [sp, #12]
   1185a:	7912      	ldrb	r2, [r2, #4]
   1185c:	4610      	mov	r0, r2
   1185e:	9a03      	ldr	r2, [sp, #12]
   11860:	7952      	ldrb	r2, [r2, #5]
   11862:	4611      	mov	r1, r2
   11864:	0142      	lsls	r2, r0, #5
   11866:	440a      	add	r2, r1
   11868:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   1186c:	f89d 200b 	ldrb.w	r2, [sp, #11]
    pin_map->_register[port_][pin_] =
   11870:	4b0e      	ldr	r3, [pc, #56]	; (118ac <Pin::EnableI2cHighCurrentDrive(bool)+0x70>)
   11872:	681c      	ldr	r4, [r3, #0]
   11874:	9b03      	ldr	r3, [sp, #12]
   11876:	791b      	ldrb	r3, [r3, #4]
   11878:	461e      	mov	r6, r3
   1187a:	9b03      	ldr	r3, [sp, #12]
   1187c:	795b      	ldrb	r3, [r3, #5]
   1187e:	461d      	mov	r5, r3
        BitPlace(pin_map->_register[port_][pin_],
   11880:	2301      	movs	r3, #1
   11882:	9300      	str	r3, [sp, #0]
   11884:	4613      	mov	r3, r2
   11886:	2209      	movs	r2, #9
   11888:	9803      	ldr	r0, [sp, #12]
   1188a:	f000 f885 	bl	11998 <Pin::BitPlace(unsigned long, unsigned long, unsigned long, unsigned long)>
   1188e:	4602      	mov	r2, r0
    pin_map->_register[port_][pin_] =
   11890:	0173      	lsls	r3, r6, #5
   11892:	442b      	add	r3, r5
   11894:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
   11898:	463b      	mov	r3, r7
   1189a:	4619      	mov	r1, r3
   1189c:	4802      	ldr	r0, [pc, #8]	; (118a8 <Pin::EnableI2cHighCurrentDrive(bool)+0x6c>)
   1189e:	f001 fbd9 	bl	13054 <__cyg_profile_func_exit>
                 PinBitMap::kI2cHighCurrentDrive, enable_high_current, 1);
  }
   118a2:	bf00      	nop
   118a4:	b005      	add	sp, #20
   118a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   118a8:	0001183d 	.word	0x0001183d
   118ac:	1000005c 	.word	0x1000005c

000118b0 <Pin::SetAsOpenDrain(bool)>:
  void SetAsOpenDrain(bool set_as_open_drain = true) override
   118b0:	b5f0      	push	{r4, r5, r6, r7, lr}
   118b2:	b085      	sub	sp, #20
   118b4:	4677      	mov	r7, lr
   118b6:	9003      	str	r0, [sp, #12]
   118b8:	460b      	mov	r3, r1
   118ba:	f88d 300b 	strb.w	r3, [sp, #11]
   118be:	463b      	mov	r3, r7
   118c0:	4619      	mov	r1, r3
   118c2:	4816      	ldr	r0, [pc, #88]	; (1191c <Pin::SetAsOpenDrain(bool)+0x6c>)
   118c4:	f001 fbb2 	bl	1302c <__cyg_profile_func_enter>
  {
    pin_map->_register[port_][pin_] =
        BitPlace(pin_map->_register[port_][pin_], PinBitMap::kOpenDrain,
   118c8:	4b15      	ldr	r3, [pc, #84]	; (11920 <Pin::SetAsOpenDrain(bool)+0x70>)
   118ca:	681b      	ldr	r3, [r3, #0]
   118cc:	9a03      	ldr	r2, [sp, #12]
   118ce:	7912      	ldrb	r2, [r2, #4]
   118d0:	4610      	mov	r0, r2
   118d2:	9a03      	ldr	r2, [sp, #12]
   118d4:	7952      	ldrb	r2, [r2, #5]
   118d6:	4611      	mov	r1, r2
   118d8:	0142      	lsls	r2, r0, #5
   118da:	440a      	add	r2, r1
   118dc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   118e0:	f89d 200b 	ldrb.w	r2, [sp, #11]
    pin_map->_register[port_][pin_] =
   118e4:	4b0e      	ldr	r3, [pc, #56]	; (11920 <Pin::SetAsOpenDrain(bool)+0x70>)
   118e6:	681c      	ldr	r4, [r3, #0]
   118e8:	9b03      	ldr	r3, [sp, #12]
   118ea:	791b      	ldrb	r3, [r3, #4]
   118ec:	461e      	mov	r6, r3
   118ee:	9b03      	ldr	r3, [sp, #12]
   118f0:	795b      	ldrb	r3, [r3, #5]
   118f2:	461d      	mov	r5, r3
        BitPlace(pin_map->_register[port_][pin_], PinBitMap::kOpenDrain,
   118f4:	2301      	movs	r3, #1
   118f6:	9300      	str	r3, [sp, #0]
   118f8:	4613      	mov	r3, r2
   118fa:	220a      	movs	r2, #10
   118fc:	9803      	ldr	r0, [sp, #12]
   118fe:	f000 f84b 	bl	11998 <Pin::BitPlace(unsigned long, unsigned long, unsigned long, unsigned long)>
   11902:	4602      	mov	r2, r0
    pin_map->_register[port_][pin_] =
   11904:	0173      	lsls	r3, r6, #5
   11906:	442b      	add	r3, r5
   11908:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
   1190c:	463b      	mov	r3, r7
   1190e:	4619      	mov	r1, r3
   11910:	4802      	ldr	r0, [pc, #8]	; (1191c <Pin::SetAsOpenDrain(bool)+0x6c>)
   11912:	f001 fb9f 	bl	13054 <__cyg_profile_func_exit>
                 set_as_open_drain, 1);
  }
   11916:	bf00      	nop
   11918:	b005      	add	sp, #20
   1191a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1191c:	000118b1 	.word	0x000118b1
   11920:	1000005c 	.word	0x1000005c

00011924 <Pin::EnableDac(bool)>:
  void EnableDac(bool enable_dac = true) override
   11924:	b5f0      	push	{r4, r5, r6, r7, lr}
   11926:	b085      	sub	sp, #20
   11928:	4677      	mov	r7, lr
   1192a:	9003      	str	r0, [sp, #12]
   1192c:	460b      	mov	r3, r1
   1192e:	f88d 300b 	strb.w	r3, [sp, #11]
   11932:	463b      	mov	r3, r7
   11934:	4619      	mov	r1, r3
   11936:	4816      	ldr	r0, [pc, #88]	; (11990 <Pin::EnableDac(bool)+0x6c>)
   11938:	f001 fb78 	bl	1302c <__cyg_profile_func_enter>
  {
    pin_map->_register[port_][pin_] = BitPlace(
   1193c:	4b15      	ldr	r3, [pc, #84]	; (11994 <Pin::EnableDac(bool)+0x70>)
   1193e:	681b      	ldr	r3, [r3, #0]
        pin_map->_register[port_][pin_], PinBitMap::kDacEnable, enable_dac, 1);
   11940:	9a03      	ldr	r2, [sp, #12]
   11942:	7912      	ldrb	r2, [r2, #4]
   11944:	4610      	mov	r0, r2
   11946:	9a03      	ldr	r2, [sp, #12]
   11948:	7952      	ldrb	r2, [r2, #5]
   1194a:	4611      	mov	r1, r2
    pin_map->_register[port_][pin_] = BitPlace(
   1194c:	0142      	lsls	r2, r0, #5
   1194e:	440a      	add	r2, r1
   11950:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   11954:	f89d 200b 	ldrb.w	r2, [sp, #11]
   11958:	4b0e      	ldr	r3, [pc, #56]	; (11994 <Pin::EnableDac(bool)+0x70>)
   1195a:	681c      	ldr	r4, [r3, #0]
   1195c:	9b03      	ldr	r3, [sp, #12]
   1195e:	791b      	ldrb	r3, [r3, #4]
   11960:	461e      	mov	r6, r3
   11962:	9b03      	ldr	r3, [sp, #12]
   11964:	795b      	ldrb	r3, [r3, #5]
   11966:	461d      	mov	r5, r3
   11968:	2301      	movs	r3, #1
   1196a:	9300      	str	r3, [sp, #0]
   1196c:	4613      	mov	r3, r2
   1196e:	2210      	movs	r2, #16
   11970:	9803      	ldr	r0, [sp, #12]
   11972:	f000 f811 	bl	11998 <Pin::BitPlace(unsigned long, unsigned long, unsigned long, unsigned long)>
   11976:	4602      	mov	r2, r0
   11978:	0173      	lsls	r3, r6, #5
   1197a:	442b      	add	r3, r5
   1197c:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
   11980:	463b      	mov	r3, r7
   11982:	4619      	mov	r1, r3
   11984:	4802      	ldr	r0, [pc, #8]	; (11990 <Pin::EnableDac(bool)+0x6c>)
   11986:	f001 fb65 	bl	13054 <__cyg_profile_func_exit>
  }
   1198a:	bf00      	nop
   1198c:	b005      	add	sp, #20
   1198e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11990:	00011925 	.word	0x00011925
   11994:	1000005c 	.word	0x1000005c

00011998 <Pin::BitPlace(unsigned long, unsigned long, unsigned long, unsigned long)>:
  inline uint32_t BitPlace(uint32_t target, uint32_t position, uint32_t value,
   11998:	b530      	push	{r4, r5, lr}
   1199a:	b087      	sub	sp, #28
   1199c:	4675      	mov	r5, lr
   1199e:	9003      	str	r0, [sp, #12]
   119a0:	9102      	str	r1, [sp, #8]
   119a2:	9201      	str	r2, [sp, #4]
   119a4:	9300      	str	r3, [sp, #0]
   119a6:	462b      	mov	r3, r5
   119a8:	4619      	mov	r1, r3
   119aa:	4813      	ldr	r0, [pc, #76]	; (119f8 <Pin::BitPlace(unsigned long, unsigned long, unsigned long, unsigned long)+0x60>)
   119ac:	f001 fb3e 	bl	1302c <__cyg_profile_func_enter>
                           uint32_t value_width)
  {
    // Generate mask with all 1s
    uint32_t mask = 0xFFFFFFFF >> (32 - value_width);
   119b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   119b2:	f1c3 0320 	rsb	r3, r3, #32
   119b6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   119ba:	fa22 f303 	lsr.w	r3, r2, r3
   119be:	9305      	str	r3, [sp, #20]
    target &= ~(mask << position);
   119c0:	9a05      	ldr	r2, [sp, #20]
   119c2:	9b01      	ldr	r3, [sp, #4]
   119c4:	fa02 f303 	lsl.w	r3, r2, r3
   119c8:	43db      	mvns	r3, r3
   119ca:	9a02      	ldr	r2, [sp, #8]
   119cc:	4013      	ands	r3, r2
   119ce:	9302      	str	r3, [sp, #8]
    target |= (value & mask) << position;
   119d0:	9a00      	ldr	r2, [sp, #0]
   119d2:	9b05      	ldr	r3, [sp, #20]
   119d4:	401a      	ands	r2, r3
   119d6:	9b01      	ldr	r3, [sp, #4]
   119d8:	fa02 f303 	lsl.w	r3, r2, r3
   119dc:	9a02      	ldr	r2, [sp, #8]
   119de:	4313      	orrs	r3, r2
   119e0:	9302      	str	r3, [sp, #8]
    return target;
   119e2:	9c02      	ldr	r4, [sp, #8]
   119e4:	462b      	mov	r3, r5
   119e6:	4619      	mov	r1, r3
   119e8:	4803      	ldr	r0, [pc, #12]	; (119f8 <Pin::BitPlace(unsigned long, unsigned long, unsigned long, unsigned long)+0x60>)
   119ea:	f001 fb33 	bl	13054 <__cyg_profile_func_exit>
   119ee:	4623      	mov	r3, r4
  }
   119f0:	4618      	mov	r0, r3
   119f2:	b007      	add	sp, #28
   119f4:	bd30      	pop	{r4, r5, pc}
   119f6:	bf00      	nop
   119f8:	00011999 	.word	0x00011999

000119fc <Pin::GetPort() const>:
  uint8_t GetPort() const override
   119fc:	b530      	push	{r4, r5, lr}
   119fe:	b083      	sub	sp, #12
   11a00:	4675      	mov	r5, lr
   11a02:	9001      	str	r0, [sp, #4]
   11a04:	462b      	mov	r3, r5
   11a06:	4619      	mov	r1, r3
   11a08:	4806      	ldr	r0, [pc, #24]	; (11a24 <Pin::GetPort() const+0x28>)
   11a0a:	f001 fb0f 	bl	1302c <__cyg_profile_func_enter>
  {
    return port_;
   11a0e:	9b01      	ldr	r3, [sp, #4]
   11a10:	791c      	ldrb	r4, [r3, #4]
   11a12:	462b      	mov	r3, r5
   11a14:	4619      	mov	r1, r3
   11a16:	4803      	ldr	r0, [pc, #12]	; (11a24 <Pin::GetPort() const+0x28>)
   11a18:	f001 fb1c 	bl	13054 <__cyg_profile_func_exit>
   11a1c:	4623      	mov	r3, r4
  }
   11a1e:	4618      	mov	r0, r3
   11a20:	b003      	add	sp, #12
   11a22:	bd30      	pop	{r4, r5, pc}
   11a24:	000119fd 	.word	0x000119fd

00011a28 <Pin::GetPin() const>:
  uint8_t GetPin() const override
   11a28:	b530      	push	{r4, r5, lr}
   11a2a:	b083      	sub	sp, #12
   11a2c:	4675      	mov	r5, lr
   11a2e:	9001      	str	r0, [sp, #4]
   11a30:	462b      	mov	r3, r5
   11a32:	4619      	mov	r1, r3
   11a34:	4806      	ldr	r0, [pc, #24]	; (11a50 <Pin::GetPin() const+0x28>)
   11a36:	f001 faf9 	bl	1302c <__cyg_profile_func_enter>
  {
    return pin_;
   11a3a:	9b01      	ldr	r3, [sp, #4]
   11a3c:	795c      	ldrb	r4, [r3, #5]
   11a3e:	462b      	mov	r3, r5
   11a40:	4619      	mov	r1, r3
   11a42:	4803      	ldr	r0, [pc, #12]	; (11a50 <Pin::GetPin() const+0x28>)
   11a44:	f001 fb06 	bl	13054 <__cyg_profile_func_exit>
   11a48:	4623      	mov	r3, r4
  }
   11a4a:	4618      	mov	r0, r3
   11a4c:	b003      	add	sp, #12
   11a4e:	bd30      	pop	{r4, r5, pc}
   11a50:	00011a29 	.word	0x00011a29

00011a54 <unsigned char util::Value<TimerInterface::TimerPort, unsigned char>(TimerInterface::TimerPort)>:
constexpr Type Value(Enum enum_type_value)
   11a54:	b530      	push	{r4, r5, lr}
   11a56:	b083      	sub	sp, #12
   11a58:	4675      	mov	r5, lr
   11a5a:	4603      	mov	r3, r0
   11a5c:	f88d 3007 	strb.w	r3, [sp, #7]
   11a60:	462b      	mov	r3, r5
   11a62:	4619      	mov	r1, r3
   11a64:	4806      	ldr	r0, [pc, #24]	; (11a80 <unsigned char util::Value<TimerInterface::TimerPort, unsigned char>(TimerInterface::TimerPort)+0x2c>)
   11a66:	f001 fae1 	bl	1302c <__cyg_profile_func_enter>
  return static_cast<Type>(enum_type_value);
   11a6a:	f89d 4007 	ldrb.w	r4, [sp, #7]
   11a6e:	462b      	mov	r3, r5
   11a70:	4619      	mov	r1, r3
   11a72:	4803      	ldr	r0, [pc, #12]	; (11a80 <unsigned char util::Value<TimerInterface::TimerPort, unsigned char>(TimerInterface::TimerPort)+0x2c>)
   11a74:	f001 faee 	bl	13054 <__cyg_profile_func_exit>
   11a78:	4623      	mov	r3, r4
}
   11a7a:	4618      	mov	r0, r3
   11a7c:	b003      	add	sp, #12
   11a7e:	bd30      	pop	{r4, r5, pc}
   11a80:	00011a55 	.word	0x00011a55

00011a84 <Timer::DoNothingIsr()>:
    Lpc40xxSystemController::Peripherals::kTimer3
  };

  static constexpr IRQn kTimerIrq[] = { IRQn::TIMER0_IRQn, IRQn::TIMER1_IRQn,
                                        IRQn::TIMER2_IRQn, IRQn::TIMER3_IRQn };
  static void DoNothingIsr() {}
   11a84:	b510      	push	{r4, lr}
   11a86:	4674      	mov	r4, lr
   11a88:	4623      	mov	r3, r4
   11a8a:	4619      	mov	r1, r3
   11a8c:	4804      	ldr	r0, [pc, #16]	; (11aa0 <Timer::DoNothingIsr()+0x1c>)
   11a8e:	f001 facd 	bl	1302c <__cyg_profile_func_enter>
   11a92:	4623      	mov	r3, r4
   11a94:	4619      	mov	r1, r3
   11a96:	4802      	ldr	r0, [pc, #8]	; (11aa0 <Timer::DoNothingIsr()+0x1c>)
   11a98:	f001 fadc 	bl	13054 <__cyg_profile_func_exit>
   11a9c:	bf00      	nop
   11a9e:	bd10      	pop	{r4, pc}
   11aa0:	00011a85 	.word	0x00011a85

00011aa4 <Timer::Initialize(unsigned long, void (*)(), long)>:
  ///                  register will be 10 ms.
  /// @param isr an ISR that will fire when the condition set by SetTimer
  ///            method is achieved.
  /// @param priority sets the Timer interrupt's priority level, defaults to -1
  ///                 which uses the platforms default priority.
  void Initialize(uint32_t frequency, IsrPointer isr = DoNothingIsr,
   11aa4:	b510      	push	{r4, lr}
   11aa6:	b086      	sub	sp, #24
   11aa8:	4674      	mov	r4, lr
   11aaa:	9003      	str	r0, [sp, #12]
   11aac:	9102      	str	r1, [sp, #8]
   11aae:	9201      	str	r2, [sp, #4]
   11ab0:	9300      	str	r3, [sp, #0]
   11ab2:	4623      	mov	r3, r4
   11ab4:	4619      	mov	r1, r3
   11ab6:	483e      	ldr	r0, [pc, #248]	; (11bb0 <Timer::Initialize(unsigned long, void (*)(), long)+0x10c>)
   11ab8:	f001 fab8 	bl	1302c <__cyg_profile_func_enter>
                  int32_t priority = -1) override final
  {
    PowerUpPeripheral(kPowerbit[channel_]);
   11abc:	9b03      	ldr	r3, [sp, #12]
   11abe:	1d18      	adds	r0, r3, #4
   11ac0:	9b03      	ldr	r3, [sp, #12]
   11ac2:	685b      	ldr	r3, [r3, #4]
   11ac4:	3314      	adds	r3, #20
   11ac6:	681b      	ldr	r3, [r3, #0]
   11ac8:	9a03      	ldr	r2, [sp, #12]
   11aca:	7a12      	ldrb	r2, [r2, #8]
   11acc:	0092      	lsls	r2, r2, #2
   11ace:	4939      	ldr	r1, [pc, #228]	; (11bb4 <Timer::Initialize(unsigned long, void (*)(), long)+0x110>)
   11ad0:	440a      	add	r2, r1
   11ad2:	4611      	mov	r1, r2
   11ad4:	4798      	blx	r3
    SJ2_ASSERT_FATAL(
   11ad6:	9b02      	ldr	r3, [sp, #8]
   11ad8:	2b00      	cmp	r3, #0
   11ada:	d10d      	bne.n	11af8 <Timer::Initialize(unsigned long, void (*)(), long)+0x54>
   11adc:	2384      	movs	r3, #132	; 0x84
   11ade:	4a36      	ldr	r2, [pc, #216]	; (11bb8 <Timer::Initialize(unsigned long, void (*)(), long)+0x114>)
   11ae0:	4936      	ldr	r1, [pc, #216]	; (11bbc <Timer::Initialize(unsigned long, void (*)(), long)+0x118>)
   11ae2:	4837      	ldr	r0, [pc, #220]	; (11bc0 <Timer::Initialize(unsigned long, void (*)(), long)+0x11c>)
   11ae4:	f002 fcfe 	bl	144e4 <printf>
   11ae8:	4836      	ldr	r0, [pc, #216]	; (11bc4 <Timer::Initialize(unsigned long, void (*)(), long)+0x120>)
   11aea:	f001 fa6f 	bl	12fcc <puts>
   11aee:	2100      	movs	r1, #0
   11af0:	2001      	movs	r0, #1
   11af2:	f7ff f875 	bl	10be0 <debug::PrintBacktrace(bool, void*)>
   11af6:	e7fe      	b.n	11af6 <Timer::Initialize(unsigned long, void (*)(), long)+0x52>
        frequency != 0,
        "Cannot have zero ticks per microsecond, please choose 1 or more.");
    // Set Prescale register for Prescale Counter to milliseconds
    uint32_t prescaler = GetPeripheralFrequency() / frequency;
   11af8:	9b03      	ldr	r3, [sp, #12]
   11afa:	1d1a      	adds	r2, r3, #4
   11afc:	9b03      	ldr	r3, [sp, #12]
   11afe:	685b      	ldr	r3, [r3, #4]
   11b00:	3310      	adds	r3, #16
   11b02:	681b      	ldr	r3, [r3, #0]
   11b04:	4610      	mov	r0, r2
   11b06:	4798      	blx	r3
   11b08:	4602      	mov	r2, r0
   11b0a:	9b02      	ldr	r3, [sp, #8]
   11b0c:	fbb2 f3f3 	udiv	r3, r2, r3
   11b10:	9305      	str	r3, [sp, #20]
    tim_register[channel_]->PR &= ~(kClear << 1);
   11b12:	9b03      	ldr	r3, [sp, #12]
   11b14:	7a1b      	ldrb	r3, [r3, #8]
   11b16:	461a      	mov	r2, r3
   11b18:	4b2b      	ldr	r3, [pc, #172]	; (11bc8 <Timer::Initialize(unsigned long, void (*)(), long)+0x124>)
   11b1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   11b1e:	68da      	ldr	r2, [r3, #12]
   11b20:	9b03      	ldr	r3, [sp, #12]
   11b22:	7a1b      	ldrb	r3, [r3, #8]
   11b24:	4619      	mov	r1, r3
   11b26:	4b28      	ldr	r3, [pc, #160]	; (11bc8 <Timer::Initialize(unsigned long, void (*)(), long)+0x124>)
   11b28:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   11b2c:	f002 0201 	and.w	r2, r2, #1
   11b30:	60da      	str	r2, [r3, #12]
    tim_register[channel_]->PR |= (prescaler << 1);
   11b32:	9b03      	ldr	r3, [sp, #12]
   11b34:	7a1b      	ldrb	r3, [r3, #8]
   11b36:	461a      	mov	r2, r3
   11b38:	4b23      	ldr	r3, [pc, #140]	; (11bc8 <Timer::Initialize(unsigned long, void (*)(), long)+0x124>)
   11b3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   11b3e:	68d9      	ldr	r1, [r3, #12]
   11b40:	9b05      	ldr	r3, [sp, #20]
   11b42:	005a      	lsls	r2, r3, #1
   11b44:	9b03      	ldr	r3, [sp, #12]
   11b46:	7a1b      	ldrb	r3, [r3, #8]
   11b48:	4618      	mov	r0, r3
   11b4a:	4b1f      	ldr	r3, [pc, #124]	; (11bc8 <Timer::Initialize(unsigned long, void (*)(), long)+0x124>)
   11b4c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   11b50:	430a      	orrs	r2, r1
   11b52:	60da      	str	r2, [r3, #12]
    tim_register[channel_]->TCR |= (1 << 0);
   11b54:	9b03      	ldr	r3, [sp, #12]
   11b56:	7a1b      	ldrb	r3, [r3, #8]
   11b58:	461a      	mov	r2, r3
   11b5a:	4b1b      	ldr	r3, [pc, #108]	; (11bc8 <Timer::Initialize(unsigned long, void (*)(), long)+0x124>)
   11b5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   11b60:	685a      	ldr	r2, [r3, #4]
   11b62:	9b03      	ldr	r3, [sp, #12]
   11b64:	7a1b      	ldrb	r3, [r3, #8]
   11b66:	4619      	mov	r1, r3
   11b68:	4b17      	ldr	r3, [pc, #92]	; (11bc8 <Timer::Initialize(unsigned long, void (*)(), long)+0x124>)
   11b6a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   11b6e:	f042 0201 	orr.w	r2, r2, #1
   11b72:	605a      	str	r2, [r3, #4]
    user_timer_isr[channel_] = isr;
   11b74:	9b03      	ldr	r3, [sp, #12]
   11b76:	7a1b      	ldrb	r3, [r3, #8]
   11b78:	4619      	mov	r1, r3
   11b7a:	4a14      	ldr	r2, [pc, #80]	; (11bcc <Timer::Initialize(unsigned long, void (*)(), long)+0x128>)
   11b7c:	9b01      	ldr	r3, [sp, #4]
   11b7e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
    RegisterIsr(kTimerIrq[channel_], kTimerIsr[channel_], true, priority);
   11b82:	9b03      	ldr	r3, [sp, #12]
   11b84:	7a1b      	ldrb	r3, [r3, #8]
   11b86:	461a      	mov	r2, r3
   11b88:	4b11      	ldr	r3, [pc, #68]	; (11bd0 <Timer::Initialize(unsigned long, void (*)(), long)+0x12c>)
   11b8a:	5698      	ldrsb	r0, [r3, r2]
   11b8c:	9b03      	ldr	r3, [sp, #12]
   11b8e:	7a1b      	ldrb	r3, [r3, #8]
   11b90:	461a      	mov	r2, r3
   11b92:	4b10      	ldr	r3, [pc, #64]	; (11bd4 <Timer::Initialize(unsigned long, void (*)(), long)+0x130>)
   11b94:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   11b98:	9b00      	ldr	r3, [sp, #0]
   11b9a:	2201      	movs	r2, #1
   11b9c:	f001 f91e 	bl	12ddc <RegisterIsr(IRQn, void (*)(), bool, long)>
   11ba0:	4623      	mov	r3, r4
   11ba2:	4619      	mov	r1, r3
   11ba4:	4802      	ldr	r0, [pc, #8]	; (11bb0 <Timer::Initialize(unsigned long, void (*)(), long)+0x10c>)
   11ba6:	f001 fa55 	bl	13054 <__cyg_profile_func_exit>
  }
   11baa:	bf00      	nop
   11bac:	b006      	add	sp, #24
   11bae:	bd10      	pop	{r4, pc}
   11bb0:	00011aa5 	.word	0x00011aa5
   11bb4:	000179f8 	.word	0x000179f8
   11bb8:	00017c98 	.word	0x00017c98
   11bbc:	00017a1c 	.word	0x00017a1c
   11bc0:	00017860 	.word	0x00017860
   11bc4:	0001756c 	.word	0x0001756c
   11bc8:	10000060 	.word	0x10000060
   11bcc:	100003d4 	.word	0x100003d4
   11bd0:	00017a08 	.word	0x00017a08
   11bd4:	00017a0c 	.word	0x00017a0c

00011bd8 <unsigned char util::Value<TimerInterface::MatchControlRegister, unsigned char>(TimerInterface::MatchControlRegister)>:
constexpr Type Value(Enum enum_type_value)
   11bd8:	b530      	push	{r4, r5, lr}
   11bda:	b083      	sub	sp, #12
   11bdc:	4675      	mov	r5, lr
   11bde:	4603      	mov	r3, r0
   11be0:	f88d 3007 	strb.w	r3, [sp, #7]
   11be4:	462b      	mov	r3, r5
   11be6:	4619      	mov	r1, r3
   11be8:	4806      	ldr	r0, [pc, #24]	; (11c04 <unsigned char util::Value<TimerInterface::MatchControlRegister, unsigned char>(TimerInterface::MatchControlRegister)+0x2c>)
   11bea:	f001 fa1f 	bl	1302c <__cyg_profile_func_enter>
  return static_cast<Type>(enum_type_value);
   11bee:	f89d 4007 	ldrb.w	r4, [sp, #7]
   11bf2:	462b      	mov	r3, r5
   11bf4:	4619      	mov	r1, r3
   11bf6:	4803      	ldr	r0, [pc, #12]	; (11c04 <unsigned char util::Value<TimerInterface::MatchControlRegister, unsigned char>(TimerInterface::MatchControlRegister)+0x2c>)
   11bf8:	f001 fa2c 	bl	13054 <__cyg_profile_func_exit>
   11bfc:	4623      	mov	r3, r4
}
   11bfe:	4618      	mov	r0, r3
   11c00:	b003      	add	sp, #12
   11c02:	bd30      	pop	{r4, r5, pc}
   11c04:	00011bd9 	.word	0x00011bd9

00011c08 <Timer::SetTimer(unsigned long, TimerInterface::TimerIsrCondition, TimerInterface::MatchControlRegister)>:
  ///
  /// @param ticks the count of the timer register (TC) to have an ISR fire
  /// @param condition the condition for which a timer interrupt will occur
  /// @param match_register which match register (from 0 to 3) should be used
  ///                       for holding the ticks for the condition.
  void SetTimer(uint32_t ticks, TimerIsrCondition condition,
   11c08:	b570      	push	{r4, r5, r6, lr}
   11c0a:	b086      	sub	sp, #24
   11c0c:	4676      	mov	r6, lr
   11c0e:	9003      	str	r0, [sp, #12]
   11c10:	9102      	str	r1, [sp, #8]
   11c12:	4611      	mov	r1, r2
   11c14:	461a      	mov	r2, r3
   11c16:	460b      	mov	r3, r1
   11c18:	f88d 3007 	strb.w	r3, [sp, #7]
   11c1c:	4613      	mov	r3, r2
   11c1e:	f88d 3006 	strb.w	r3, [sp, #6]
   11c22:	4633      	mov	r3, r6
   11c24:	4619      	mov	r1, r3
   11c26:	4832      	ldr	r0, [pc, #200]	; (11cf0 <Timer::SetTimer(unsigned long, TimerInterface::TimerIsrCondition, TimerInterface::MatchControlRegister)+0xe8>)
   11c28:	f001 fa00 	bl	1302c <__cyg_profile_func_enter>
                MatchControlRegister match_register = kMat0) override final
  {
    static constexpr uint8_t kClearMode = 0b0111;

    uint8_t match_value = util::Value(match_register);
   11c2c:	f89d 3006 	ldrb.w	r3, [sp, #6]
   11c30:	4618      	mov	r0, r3
   11c32:	f7ff ffd1 	bl	11bd8 <unsigned char util::Value<TimerInterface::MatchControlRegister, unsigned char>(TimerInterface::MatchControlRegister)>
   11c36:	4603      	mov	r3, r0
   11c38:	f88d 3017 	strb.w	r3, [sp, #23]
    tim_register[channel_]->MCR &= ~(kClearMode << match_value);
   11c3c:	9b03      	ldr	r3, [sp, #12]
   11c3e:	7a1b      	ldrb	r3, [r3, #8]
   11c40:	461a      	mov	r2, r3
   11c42:	4b2c      	ldr	r3, [pc, #176]	; (11cf4 <Timer::SetTimer(unsigned long, TimerInterface::TimerIsrCondition, TimerInterface::MatchControlRegister)+0xec>)
   11c44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   11c48:	695a      	ldr	r2, [r3, #20]
   11c4a:	f89d 3017 	ldrb.w	r3, [sp, #23]
   11c4e:	2107      	movs	r1, #7
   11c50:	fa01 f303 	lsl.w	r3, r1, r3
   11c54:	43db      	mvns	r3, r3
   11c56:	4619      	mov	r1, r3
   11c58:	9b03      	ldr	r3, [sp, #12]
   11c5a:	7a1b      	ldrb	r3, [r3, #8]
   11c5c:	4618      	mov	r0, r3
   11c5e:	4b25      	ldr	r3, [pc, #148]	; (11cf4 <Timer::SetTimer(unsigned long, TimerInterface::TimerIsrCondition, TimerInterface::MatchControlRegister)+0xec>)
   11c60:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   11c64:	400a      	ands	r2, r1
   11c66:	615a      	str	r2, [r3, #20]
    tim_register[channel_]->MCR |= condition << match_value;
   11c68:	9b03      	ldr	r3, [sp, #12]
   11c6a:	7a1b      	ldrb	r3, [r3, #8]
   11c6c:	461a      	mov	r2, r3
   11c6e:	4b21      	ldr	r3, [pc, #132]	; (11cf4 <Timer::SetTimer(unsigned long, TimerInterface::TimerIsrCondition, TimerInterface::MatchControlRegister)+0xec>)
   11c70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   11c74:	695a      	ldr	r2, [r3, #20]
   11c76:	f89d 1007 	ldrb.w	r1, [sp, #7]
   11c7a:	f89d 3017 	ldrb.w	r3, [sp, #23]
   11c7e:	fa01 f303 	lsl.w	r3, r1, r3
   11c82:	4619      	mov	r1, r3
   11c84:	9b03      	ldr	r3, [sp, #12]
   11c86:	7a1b      	ldrb	r3, [r3, #8]
   11c88:	4618      	mov	r0, r3
   11c8a:	4b1a      	ldr	r3, [pc, #104]	; (11cf4 <Timer::SetTimer(unsigned long, TimerInterface::TimerIsrCondition, TimerInterface::MatchControlRegister)+0xec>)
   11c8c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   11c90:	430a      	orrs	r2, r1
   11c92:	615a      	str	r2, [r3, #20]
    *match[channel_][match_value / 3] |= (((ticks / 2)) << 0);
   11c94:	9b03      	ldr	r3, [sp, #12]
   11c96:	7a1b      	ldrb	r3, [r3, #8]
   11c98:	4618      	mov	r0, r3
   11c9a:	f89d 3017 	ldrb.w	r3, [sp, #23]
   11c9e:	4a16      	ldr	r2, [pc, #88]	; (11cf8 <Timer::SetTimer(unsigned long, TimerInterface::TimerIsrCondition, TimerInterface::MatchControlRegister)+0xf0>)
   11ca0:	fba2 2303 	umull	r2, r3, r2, r3
   11ca4:	085b      	lsrs	r3, r3, #1
   11ca6:	b2db      	uxtb	r3, r3
   11ca8:	4619      	mov	r1, r3
   11caa:	4a14      	ldr	r2, [pc, #80]	; (11cfc <Timer::SetTimer(unsigned long, TimerInterface::TimerIsrCondition, TimerInterface::MatchControlRegister)+0xf4>)
   11cac:	0083      	lsls	r3, r0, #2
   11cae:	440b      	add	r3, r1
   11cb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11cb4:	6819      	ldr	r1, [r3, #0]
   11cb6:	9b02      	ldr	r3, [sp, #8]
   11cb8:	085a      	lsrs	r2, r3, #1
   11cba:	9b03      	ldr	r3, [sp, #12]
   11cbc:	7a1b      	ldrb	r3, [r3, #8]
   11cbe:	461d      	mov	r5, r3
   11cc0:	f89d 3017 	ldrb.w	r3, [sp, #23]
   11cc4:	480c      	ldr	r0, [pc, #48]	; (11cf8 <Timer::SetTimer(unsigned long, TimerInterface::TimerIsrCondition, TimerInterface::MatchControlRegister)+0xf0>)
   11cc6:	fba0 0303 	umull	r0, r3, r0, r3
   11cca:	085b      	lsrs	r3, r3, #1
   11ccc:	b2db      	uxtb	r3, r3
   11cce:	461c      	mov	r4, r3
   11cd0:	480a      	ldr	r0, [pc, #40]	; (11cfc <Timer::SetTimer(unsigned long, TimerInterface::TimerIsrCondition, TimerInterface::MatchControlRegister)+0xf4>)
   11cd2:	00ab      	lsls	r3, r5, #2
   11cd4:	4423      	add	r3, r4
   11cd6:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
   11cda:	430a      	orrs	r2, r1
   11cdc:	601a      	str	r2, [r3, #0]
   11cde:	4633      	mov	r3, r6
   11ce0:	4619      	mov	r1, r3
   11ce2:	4803      	ldr	r0, [pc, #12]	; (11cf0 <Timer::SetTimer(unsigned long, TimerInterface::TimerIsrCondition, TimerInterface::MatchControlRegister)+0xe8>)
   11ce4:	f001 f9b6 	bl	13054 <__cyg_profile_func_exit>
  }
   11ce8:	bf00      	nop
   11cea:	b006      	add	sp, #24
   11cec:	bd70      	pop	{r4, r5, r6, pc}
   11cee:	bf00      	nop
   11cf0:	00011c09 	.word	0x00011c09
   11cf4:	10000060 	.word	0x10000060
   11cf8:	aaaaaaab 	.word	0xaaaaaaab
   11cfc:	10000394 	.word	0x10000394

00011d00 <Timer::GetTimer()>:

  [[gnu::always_inline]] uint32_t GetTimer() override final {
   11d00:	b530      	push	{r4, r5, lr}
   11d02:	b083      	sub	sp, #12
   11d04:	4675      	mov	r5, lr
   11d06:	9001      	str	r0, [sp, #4]
   11d08:	462b      	mov	r3, r5
   11d0a:	4619      	mov	r1, r3
   11d0c:	4809      	ldr	r0, [pc, #36]	; (11d34 <Timer::GetTimer()+0x34>)
   11d0e:	f001 f98d 	bl	1302c <__cyg_profile_func_enter>
    return tim_register[channel_]->TC;
   11d12:	9b01      	ldr	r3, [sp, #4]
   11d14:	7a1b      	ldrb	r3, [r3, #8]
   11d16:	461a      	mov	r2, r3
   11d18:	4b07      	ldr	r3, [pc, #28]	; (11d38 <Timer::GetTimer()+0x38>)
   11d1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   11d1e:	689c      	ldr	r4, [r3, #8]
   11d20:	462b      	mov	r3, r5
   11d22:	4619      	mov	r1, r3
   11d24:	4803      	ldr	r0, [pc, #12]	; (11d34 <Timer::GetTimer()+0x34>)
   11d26:	f001 f995 	bl	13054 <__cyg_profile_func_exit>
   11d2a:	4623      	mov	r3, r4
  }
   11d2c:	4618      	mov	r0, r3
   11d2e:	b003      	add	sp, #12
   11d30:	bd30      	pop	{r4, r5, pc}
   11d32:	bf00      	nop
   11d34:	00011d01 	.word	0x00011d01
   11d38:	10000060 	.word	0x10000060

00011d3c <Uart::SetBaudRate(unsigned long)>:
  constexpr Uart(Channels mode, PinInterface * tx_pin, PinInterface * rx_pin)
      : channel_(static_cast<uint8_t>(mode)), tx_(tx_pin), rx_(rx_pin)
  {
  }

  void SetBaudRate(uint32_t baud_rate) override
   11d3c:	b510      	push	{r4, lr}
   11d3e:	b088      	sub	sp, #32
   11d40:	4674      	mov	r4, lr
   11d42:	9001      	str	r0, [sp, #4]
   11d44:	9100      	str	r1, [sp, #0]
   11d46:	4623      	mov	r3, r4
   11d48:	4619      	mov	r1, r3
   11d4a:	482d      	ldr	r0, [pc, #180]	; (11e00 <Uart::SetBaudRate(unsigned long)+0xc4>)
   11d4c:	f001 f96e 	bl	1302c <__cyg_profile_func_enter>
  {
    constexpr uint8_t kDlabBit = (1 << 7);
   11d50:	2380      	movs	r3, #128	; 0x80
   11d52:	f88d 301f 	strb.w	r3, [sp, #31]
    float baudrate             = static_cast<float>(baud_rate);
   11d56:	9b00      	ldr	r3, [sp, #0]
   11d58:	ee07 3a90 	vmov	s15, r3
   11d5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
   11d60:	edcd 7a06 	vstr	s15, [sp, #24]
    UartCalibration_t dividers = GenerateUartCalibration(baudrate);
   11d64:	ab02      	add	r3, sp, #8
   11d66:	ed9d 0a06 	vldr	s0, [sp, #24]
   11d6a:	9901      	ldr	r1, [sp, #4]
   11d6c:	4618      	mov	r0, r3
   11d6e:	f000 fb2d 	bl	123cc <Uart::GenerateUartCalibration(float)>

    uint8_t dlm = static_cast<uint8_t>((dividers.divide_latch >> 8) & 0xFF);
   11d72:	9b02      	ldr	r3, [sp, #8]
   11d74:	0a1b      	lsrs	r3, r3, #8
   11d76:	f88d 3017 	strb.w	r3, [sp, #23]
    uint8_t dll = static_cast<uint8_t>(dividers.divide_latch & 0xFF);
   11d7a:	9b02      	ldr	r3, [sp, #8]
   11d7c:	f88d 3016 	strb.w	r3, [sp, #22]
    uint8_t fdr = static_cast<uint8_t>((dividers.multiply & 0xF) << 4 |
   11d80:	9b04      	ldr	r3, [sp, #16]
   11d82:	b2db      	uxtb	r3, r3
   11d84:	011b      	lsls	r3, r3, #4
   11d86:	b2da      	uxtb	r2, r3
                                       (dividers.divide_add & 0xF));
   11d88:	9b03      	ldr	r3, [sp, #12]
   11d8a:	b2db      	uxtb	r3, r3
   11d8c:	f003 030f 	and.w	r3, r3, #15
   11d90:	b2db      	uxtb	r3, r3
    uint8_t fdr = static_cast<uint8_t>((dividers.multiply & 0xF) << 4 |
   11d92:	4313      	orrs	r3, r2
   11d94:	f88d 3015 	strb.w	r3, [sp, #21]

    // Set baud rate
    uart[channel_]->LCR = kDlabBit;
   11d98:	9b01      	ldr	r3, [sp, #4]
   11d9a:	7a1b      	ldrb	r3, [r3, #8]
   11d9c:	461a      	mov	r2, r3
   11d9e:	4b19      	ldr	r3, [pc, #100]	; (11e04 <Uart::SetBaudRate(unsigned long)+0xc8>)
   11da0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   11da4:	2280      	movs	r2, #128	; 0x80
   11da6:	731a      	strb	r2, [r3, #12]
    uart[channel_]->DLM = dlm;
   11da8:	9b01      	ldr	r3, [sp, #4]
   11daa:	7a1b      	ldrb	r3, [r3, #8]
   11dac:	461a      	mov	r2, r3
   11dae:	4b15      	ldr	r3, [pc, #84]	; (11e04 <Uart::SetBaudRate(unsigned long)+0xc8>)
   11db0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   11db4:	f89d 2017 	ldrb.w	r2, [sp, #23]
   11db8:	711a      	strb	r2, [r3, #4]
    uart[channel_]->DLL = dll;
   11dba:	9b01      	ldr	r3, [sp, #4]
   11dbc:	7a1b      	ldrb	r3, [r3, #8]
   11dbe:	461a      	mov	r2, r3
   11dc0:	4b10      	ldr	r3, [pc, #64]	; (11e04 <Uart::SetBaudRate(unsigned long)+0xc8>)
   11dc2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   11dc6:	f89d 2016 	ldrb.w	r2, [sp, #22]
   11dca:	701a      	strb	r2, [r3, #0]
    uart[channel_]->FDR = fdr;
   11dcc:	9b01      	ldr	r3, [sp, #4]
   11dce:	7a1b      	ldrb	r3, [r3, #8]
   11dd0:	461a      	mov	r2, r3
   11dd2:	4b0c      	ldr	r3, [pc, #48]	; (11e04 <Uart::SetBaudRate(unsigned long)+0xc8>)
   11dd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   11dd8:	f89d 2015 	ldrb.w	r2, [sp, #21]
   11ddc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    uart[channel_]->LCR = kStandardUart;
   11de0:	9b01      	ldr	r3, [sp, #4]
   11de2:	7a1b      	ldrb	r3, [r3, #8]
   11de4:	461a      	mov	r2, r3
   11de6:	4b07      	ldr	r3, [pc, #28]	; (11e04 <Uart::SetBaudRate(unsigned long)+0xc8>)
   11de8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   11dec:	2203      	movs	r2, #3
   11dee:	731a      	strb	r2, [r3, #12]
   11df0:	4623      	mov	r3, r4
   11df2:	4619      	mov	r1, r3
   11df4:	4802      	ldr	r0, [pc, #8]	; (11e00 <Uart::SetBaudRate(unsigned long)+0xc4>)
   11df6:	f001 f92d 	bl	13054 <__cyg_profile_func_exit>
  }
   11dfa:	bf00      	nop
   11dfc:	b008      	add	sp, #32
   11dfe:	bd10      	pop	{r4, pc}
   11e00:	00011d3d 	.word	0x00011d3d
   11e04:	10000070 	.word	0x10000070

00011e08 <Uart::Initialize(unsigned long)>:

  bool Initialize(uint32_t baud_rate) override
   11e08:	b530      	push	{r4, r5, lr}
   11e0a:	b085      	sub	sp, #20
   11e0c:	4675      	mov	r5, lr
   11e0e:	9001      	str	r0, [sp, #4]
   11e10:	9100      	str	r1, [sp, #0]
   11e12:	462b      	mov	r3, r5
   11e14:	4619      	mov	r1, r3
   11e16:	4830      	ldr	r0, [pc, #192]	; (11ed8 <Uart::Initialize(unsigned long)+0xd0>)
   11e18:	f001 f908 	bl	1302c <__cyg_profile_func_enter>
  {
    constexpr uint8_t kFIFOEnableAndReset = 0b111;
   11e1c:	2307      	movs	r3, #7
   11e1e:	f88d 300f 	strb.w	r3, [sp, #15]
    // Powering the port
    PowerUpPeripheral(kPowerbit[channel_]);
   11e22:	9b01      	ldr	r3, [sp, #4]
   11e24:	1d18      	adds	r0, r3, #4
   11e26:	9b01      	ldr	r3, [sp, #4]
   11e28:	685b      	ldr	r3, [r3, #4]
   11e2a:	3314      	adds	r3, #20
   11e2c:	681b      	ldr	r3, [r3, #0]
   11e2e:	9a01      	ldr	r2, [sp, #4]
   11e30:	7a12      	ldrb	r2, [r2, #8]
   11e32:	0092      	lsls	r2, r2, #2
   11e34:	4929      	ldr	r1, [pc, #164]	; (11edc <Uart::Initialize(unsigned long)+0xd4>)
   11e36:	440a      	add	r2, r1
   11e38:	4611      	mov	r1, r2
   11e3a:	4798      	blx	r3
    // Setting the pin functions and modes
    rx_->SetPinFunction(kRxUartPortFunction[channel_]);
   11e3c:	9b01      	ldr	r3, [sp, #4]
   11e3e:	6918      	ldr	r0, [r3, #16]
   11e40:	9b01      	ldr	r3, [sp, #4]
   11e42:	691b      	ldr	r3, [r3, #16]
   11e44:	681b      	ldr	r3, [r3, #0]
   11e46:	681b      	ldr	r3, [r3, #0]
   11e48:	9a01      	ldr	r2, [sp, #4]
   11e4a:	7a12      	ldrb	r2, [r2, #8]
   11e4c:	4611      	mov	r1, r2
   11e4e:	4a24      	ldr	r2, [pc, #144]	; (11ee0 <Uart::Initialize(unsigned long)+0xd8>)
   11e50:	5c52      	ldrb	r2, [r2, r1]
   11e52:	4611      	mov	r1, r2
   11e54:	4798      	blx	r3
    tx_->SetPinFunction(kTxUartPortFunction[channel_]);
   11e56:	9b01      	ldr	r3, [sp, #4]
   11e58:	68d8      	ldr	r0, [r3, #12]
   11e5a:	9b01      	ldr	r3, [sp, #4]
   11e5c:	68db      	ldr	r3, [r3, #12]
   11e5e:	681b      	ldr	r3, [r3, #0]
   11e60:	681b      	ldr	r3, [r3, #0]
   11e62:	9a01      	ldr	r2, [sp, #4]
   11e64:	7a12      	ldrb	r2, [r2, #8]
   11e66:	4611      	mov	r1, r2
   11e68:	4a1e      	ldr	r2, [pc, #120]	; (11ee4 <Uart::Initialize(unsigned long)+0xdc>)
   11e6a:	5c52      	ldrb	r2, [r2, r1]
   11e6c:	4611      	mov	r1, r2
   11e6e:	4798      	blx	r3
    rx_->SetMode(PinInterface::Mode::kPullUp);
   11e70:	9b01      	ldr	r3, [sp, #4]
   11e72:	691a      	ldr	r2, [r3, #16]
   11e74:	9b01      	ldr	r3, [sp, #4]
   11e76:	691b      	ldr	r3, [r3, #16]
   11e78:	681b      	ldr	r3, [r3, #0]
   11e7a:	3304      	adds	r3, #4
   11e7c:	681b      	ldr	r3, [r3, #0]
   11e7e:	2102      	movs	r1, #2
   11e80:	4610      	mov	r0, r2
   11e82:	4798      	blx	r3
    tx_->SetMode(PinInterface::Mode::kPullUp);
   11e84:	9b01      	ldr	r3, [sp, #4]
   11e86:	68da      	ldr	r2, [r3, #12]
   11e88:	9b01      	ldr	r3, [sp, #4]
   11e8a:	68db      	ldr	r3, [r3, #12]
   11e8c:	681b      	ldr	r3, [r3, #0]
   11e8e:	3304      	adds	r3, #4
   11e90:	681b      	ldr	r3, [r3, #0]
   11e92:	2102      	movs	r1, #2
   11e94:	4610      	mov	r0, r2
   11e96:	4798      	blx	r3
    // Baud rate setting
    SetBaudRate(baud_rate);
   11e98:	9900      	ldr	r1, [sp, #0]
   11e9a:	9801      	ldr	r0, [sp, #4]
   11e9c:	f7ff ff4e 	bl	11d3c <Uart::SetBaudRate(unsigned long)>
    uart[channel_]->FCR |= kFIFOEnableAndReset;
   11ea0:	9b01      	ldr	r3, [sp, #4]
   11ea2:	7a1b      	ldrb	r3, [r3, #8]
   11ea4:	461a      	mov	r2, r3
   11ea6:	4b10      	ldr	r3, [pc, #64]	; (11ee8 <Uart::Initialize(unsigned long)+0xe0>)
   11ea8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   11eac:	7a1b      	ldrb	r3, [r3, #8]
   11eae:	b2da      	uxtb	r2, r3
   11eb0:	9b01      	ldr	r3, [sp, #4]
   11eb2:	7a1b      	ldrb	r3, [r3, #8]
   11eb4:	4619      	mov	r1, r3
   11eb6:	4b0c      	ldr	r3, [pc, #48]	; (11ee8 <Uart::Initialize(unsigned long)+0xe0>)
   11eb8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   11ebc:	f042 0207 	orr.w	r2, r2, #7
   11ec0:	b2d2      	uxtb	r2, r2
   11ec2:	721a      	strb	r2, [r3, #8]
    return true;
   11ec4:	2401      	movs	r4, #1
   11ec6:	462b      	mov	r3, r5
   11ec8:	4619      	mov	r1, r3
   11eca:	4803      	ldr	r0, [pc, #12]	; (11ed8 <Uart::Initialize(unsigned long)+0xd0>)
   11ecc:	f001 f8c2 	bl	13054 <__cyg_profile_func_exit>
   11ed0:	4623      	mov	r3, r4
  }
   11ed2:	4618      	mov	r0, r3
   11ed4:	b005      	add	sp, #20
   11ed6:	bd30      	pop	{r4, r5, pc}
   11ed8:	00011e09 	.word	0x00011e09
   11edc:	00017a30 	.word	0x00017a30
   11ee0:	00017a2c 	.word	0x00017a2c
   11ee4:	00017a28 	.word	0x00017a28
   11ee8:	10000070 	.word	0x10000070

00011eec <Uart::Send(unsigned char)::{lambda()#1}::operator()() const>:

  void Send(uint8_t data) override
  {
    uart[channel_]->THR              = data;
    auto wait_for_transfer_to_finish = [this]() -> bool {
   11eec:	b530      	push	{r4, r5, lr}
   11eee:	b083      	sub	sp, #12
   11ef0:	4675      	mov	r5, lr
   11ef2:	9001      	str	r0, [sp, #4]
   11ef4:	462b      	mov	r3, r5
   11ef6:	4619      	mov	r1, r3
   11ef8:	480d      	ldr	r0, [pc, #52]	; (11f30 <Uart::Send(unsigned char)::{lambda()#1}::operator()() const+0x44>)
   11efa:	f001 f897 	bl	1302c <__cyg_profile_func_enter>
   11efe:	9b01      	ldr	r3, [sp, #4]
   11f00:	681b      	ldr	r3, [r3, #0]
      return (uart[channel_]->LSR & (1 << 5));
   11f02:	7a1b      	ldrb	r3, [r3, #8]
   11f04:	461a      	mov	r2, r3
   11f06:	4b0b      	ldr	r3, [pc, #44]	; (11f34 <Uart::Send(unsigned char)::{lambda()#1}::operator()() const+0x48>)
   11f08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   11f0c:	7d1b      	ldrb	r3, [r3, #20]
   11f0e:	b2db      	uxtb	r3, r3
   11f10:	f003 0320 	and.w	r3, r3, #32
   11f14:	2b00      	cmp	r3, #0
   11f16:	bf14      	ite	ne
   11f18:	2301      	movne	r3, #1
   11f1a:	2300      	moveq	r3, #0
   11f1c:	b2dc      	uxtb	r4, r3
   11f1e:	462b      	mov	r3, r5
   11f20:	4619      	mov	r1, r3
   11f22:	4803      	ldr	r0, [pc, #12]	; (11f30 <Uart::Send(unsigned char)::{lambda()#1}::operator()() const+0x44>)
   11f24:	f001 f896 	bl	13054 <__cyg_profile_func_exit>
   11f28:	4623      	mov	r3, r4
    };
   11f2a:	4618      	mov	r0, r3
   11f2c:	b003      	add	sp, #12
   11f2e:	bd30      	pop	{r4, r5, pc}
   11f30:	00011eed 	.word	0x00011eed
   11f34:	10000070 	.word	0x10000070

00011f38 <Uart::Send(unsigned char)>:
  void Send(uint8_t data) override
   11f38:	e92d 4830 	stmdb	sp!, {r4, r5, fp, lr}
   11f3c:	b08a      	sub	sp, #40	; 0x28
   11f3e:	4675      	mov	r5, lr
   11f40:	9001      	str	r0, [sp, #4]
   11f42:	460b      	mov	r3, r1
   11f44:	f88d 3003 	strb.w	r3, [sp, #3]
   11f48:	462b      	mov	r3, r5
   11f4a:	4619      	mov	r1, r3
   11f4c:	4831      	ldr	r0, [pc, #196]	; (12014 <Uart::Send(unsigned char)+0xdc>)
   11f4e:	f001 f86d 	bl	1302c <__cyg_profile_func_enter>
    uart[channel_]->THR              = data;
   11f52:	9b01      	ldr	r3, [sp, #4]
   11f54:	7a1b      	ldrb	r3, [r3, #8]
   11f56:	461a      	mov	r2, r3
   11f58:	4b2f      	ldr	r3, [pc, #188]	; (12018 <Uart::Send(unsigned char)+0xe0>)
   11f5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   11f5e:	f89d 2003 	ldrb.w	r2, [sp, #3]
   11f62:	701a      	strb	r2, [r3, #0]
    };
   11f64:	9b01      	ldr	r3, [sp, #4]
   11f66:	9304      	str	r3, [sp, #16]
   11f68:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   11f6c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   11f70:	e9cd 3408 	strd	r3, r4, [sp, #32]
   11f74:	9b04      	ldr	r3, [sp, #16]
   11f76:	9303      	str	r3, [sp, #12]
   11f78:	462b      	mov	r3, r5
   11f7a:	4619      	mov	r1, r3
   11f7c:	4827      	ldr	r0, [pc, #156]	; (1201c <Uart::Send(unsigned char)+0xe4>)
   11f7e:	f001 f855 	bl	1302c <__cyg_profile_func_enter>
  uint64_t timeout_time = 0;
   11f82:	f04f 0300 	mov.w	r3, #0
   11f86:	f04f 0400 	mov.w	r4, #0
   11f8a:	e9cd 3406 	strd	r3, r4, [sp, #24]
  if (timeout == kMaxWait)
   11f8e:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   11f92:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
   11f96:	bf08      	it	eq
   11f98:	f1b3 3fff 	cmpeq.w	r3, #4294967295	; 0xffffffff
   11f9c:	d106      	bne.n	11fac <Uart::Send(unsigned char)+0x74>
    timeout_time = kMaxWait;
   11f9e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   11fa2:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   11fa6:	e9cd 3406 	strd	r3, r4, [sp, #24]
   11faa:	e00b      	b.n	11fc4 <Uart::Send(unsigned char)+0x8c>
    timeout_time = Milliseconds() + timeout;
   11fac:	f7fe fb7a 	bl	106a4 <Milliseconds()>
   11fb0:	460a      	mov	r2, r1
   11fb2:	4601      	mov	r1, r0
   11fb4:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   11fb8:	eb13 0b01 	adds.w	fp, r3, r1
   11fbc:	eb44 0c02 	adc.w	ip, r4, r2
   11fc0:	e9cd bc06 	strd	fp, ip, [sp, #24]
  Status status = Status::kTimedOut;
   11fc4:	2301      	movs	r3, #1
   11fc6:	9305      	str	r3, [sp, #20]
  while (Milliseconds() < timeout_time)
   11fc8:	f7fe fb6c 	bl	106a4 <Milliseconds()>
   11fcc:	460a      	mov	r2, r1
   11fce:	4601      	mov	r1, r0
   11fd0:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
   11fd4:	42a2      	cmp	r2, r4
   11fd6:	bf08      	it	eq
   11fd8:	4299      	cmpeq	r1, r3
   11fda:	bf34      	ite	cc
   11fdc:	2301      	movcc	r3, #1
   11fde:	2300      	movcs	r3, #0
   11fe0:	b2db      	uxtb	r3, r3
   11fe2:	2b00      	cmp	r3, #0
   11fe4:	d008      	beq.n	11ff8 <Uart::Send(unsigned char)+0xc0>
    if (is_done())
   11fe6:	ab03      	add	r3, sp, #12
   11fe8:	4618      	mov	r0, r3
   11fea:	f7ff ff7f 	bl	11eec <Uart::Send(unsigned char)::{lambda()#1}::operator()() const>
   11fee:	4603      	mov	r3, r0
   11ff0:	2b00      	cmp	r3, #0
   11ff2:	d0e9      	beq.n	11fc8 <Uart::Send(unsigned char)+0x90>
      status = Status::kSuccess;
   11ff4:	2300      	movs	r3, #0
   11ff6:	9305      	str	r3, [sp, #20]
   11ff8:	462b      	mov	r3, r5
   11ffa:	4619      	mov	r1, r3
   11ffc:	4807      	ldr	r0, [pc, #28]	; (1201c <Uart::Send(unsigned char)+0xe4>)
   11ffe:	f001 f829 	bl	13054 <__cyg_profile_func_exit>
   12002:	462b      	mov	r3, r5
   12004:	4619      	mov	r1, r3
   12006:	4803      	ldr	r0, [pc, #12]	; (12014 <Uart::Send(unsigned char)+0xdc>)
   12008:	f001 f824 	bl	13054 <__cyg_profile_func_exit>
    Wait(kMaxWait, wait_for_transfer_to_finish);
  }
   1200c:	bf00      	nop
   1200e:	b00a      	add	sp, #40	; 0x28
   12010:	e8bd 8830 	ldmia.w	sp!, {r4, r5, fp, pc}
   12014:	00011f39 	.word	0x00011f39
   12018:	10000070 	.word	0x10000070
   1201c:	00012835 	.word	0x00012835

00012020 <Uart::Receive(unsigned long)::{lambda()#1}::operator()() const>:

  uint8_t Receive([[maybe_unused]] uint32_t timeout = 0x7FFFFFFF) override
  {
    uint8_t receiver   = '\xFF';
    auto byte_recieved = [this]() -> bool {
   12020:	b530      	push	{r4, r5, lr}
   12022:	b083      	sub	sp, #12
   12024:	4675      	mov	r5, lr
   12026:	9001      	str	r0, [sp, #4]
   12028:	462b      	mov	r3, r5
   1202a:	4619      	mov	r1, r3
   1202c:	480d      	ldr	r0, [pc, #52]	; (12064 <Uart::Receive(unsigned long)::{lambda()#1}::operator()() const+0x44>)
   1202e:	f000 fffd 	bl	1302c <__cyg_profile_func_enter>
   12032:	9b01      	ldr	r3, [sp, #4]
   12034:	681b      	ldr	r3, [r3, #0]
      return (uart[channel_]->LSR & (1 << 0));
   12036:	7a1b      	ldrb	r3, [r3, #8]
   12038:	461a      	mov	r2, r3
   1203a:	4b0b      	ldr	r3, [pc, #44]	; (12068 <Uart::Receive(unsigned long)::{lambda()#1}::operator()() const+0x48>)
   1203c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   12040:	7d1b      	ldrb	r3, [r3, #20]
   12042:	b2db      	uxtb	r3, r3
   12044:	f003 0301 	and.w	r3, r3, #1
   12048:	2b00      	cmp	r3, #0
   1204a:	bf14      	ite	ne
   1204c:	2301      	movne	r3, #1
   1204e:	2300      	moveq	r3, #0
   12050:	b2dc      	uxtb	r4, r3
   12052:	462b      	mov	r3, r5
   12054:	4619      	mov	r1, r3
   12056:	4803      	ldr	r0, [pc, #12]	; (12064 <Uart::Receive(unsigned long)::{lambda()#1}::operator()() const+0x44>)
   12058:	f000 fffc 	bl	13054 <__cyg_profile_func_exit>
   1205c:	4623      	mov	r3, r4
    };
   1205e:	4618      	mov	r0, r3
   12060:	b003      	add	sp, #12
   12062:	bd30      	pop	{r4, r5, pc}
   12064:	00012021 	.word	0x00012021
   12068:	10000070 	.word	0x10000070

0001206c <Uart::Receive(unsigned long)>:
  uint8_t Receive([[maybe_unused]] uint32_t timeout = 0x7FFFFFFF) override
   1206c:	e92d 4830 	stmdb	sp!, {r4, r5, fp, lr}
   12070:	b08c      	sub	sp, #48	; 0x30
   12072:	4675      	mov	r5, lr
   12074:	9001      	str	r0, [sp, #4]
   12076:	9100      	str	r1, [sp, #0]
   12078:	462b      	mov	r3, r5
   1207a:	4619      	mov	r1, r3
   1207c:	4836      	ldr	r0, [pc, #216]	; (12158 <Uart::Receive(unsigned long)+0xec>)
   1207e:	f000 ffd5 	bl	1302c <__cyg_profile_func_enter>
    uint8_t receiver   = '\xFF';
   12082:	23ff      	movs	r3, #255	; 0xff
   12084:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
    };
   12088:	9b01      	ldr	r3, [sp, #4]
   1208a:	9304      	str	r3, [sp, #16]

    Status status = Wait(timeout, byte_recieved);
   1208c:	9b00      	ldr	r3, [sp, #0]
   1208e:	f04f 0400 	mov.w	r4, #0
   12092:	e9cd 3408 	strd	r3, r4, [sp, #32]
   12096:	9b04      	ldr	r3, [sp, #16]
   12098:	9303      	str	r3, [sp, #12]
   1209a:	462b      	mov	r3, r5
   1209c:	4619      	mov	r1, r3
   1209e:	482f      	ldr	r0, [pc, #188]	; (1215c <Uart::Receive(unsigned long)+0xf0>)
   120a0:	f000 ffc4 	bl	1302c <__cyg_profile_func_enter>
  uint64_t timeout_time = 0;
   120a4:	f04f 0300 	mov.w	r3, #0
   120a8:	f04f 0400 	mov.w	r4, #0
   120ac:	e9cd 3406 	strd	r3, r4, [sp, #24]
  if (timeout == kMaxWait)
   120b0:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   120b4:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
   120b8:	bf08      	it	eq
   120ba:	f1b3 3fff 	cmpeq.w	r3, #4294967295	; 0xffffffff
   120be:	d106      	bne.n	120ce <Uart::Receive(unsigned long)+0x62>
    timeout_time = kMaxWait;
   120c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   120c4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   120c8:	e9cd 3406 	strd	r3, r4, [sp, #24]
   120cc:	e00b      	b.n	120e6 <Uart::Receive(unsigned long)+0x7a>
    timeout_time = Milliseconds() + timeout;
   120ce:	f7fe fae9 	bl	106a4 <Milliseconds()>
   120d2:	460a      	mov	r2, r1
   120d4:	4601      	mov	r1, r0
   120d6:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   120da:	eb13 0b01 	adds.w	fp, r3, r1
   120de:	eb44 0c02 	adc.w	ip, r4, r2
   120e2:	e9cd bc06 	strd	fp, ip, [sp, #24]
  Status status = Status::kTimedOut;
   120e6:	2301      	movs	r3, #1
   120e8:	9305      	str	r3, [sp, #20]
  while (Milliseconds() < timeout_time)
   120ea:	f7fe fadb 	bl	106a4 <Milliseconds()>
   120ee:	460a      	mov	r2, r1
   120f0:	4601      	mov	r1, r0
   120f2:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
   120f6:	42a2      	cmp	r2, r4
   120f8:	bf08      	it	eq
   120fa:	4299      	cmpeq	r1, r3
   120fc:	bf34      	ite	cc
   120fe:	2301      	movcc	r3, #1
   12100:	2300      	movcs	r3, #0
   12102:	b2db      	uxtb	r3, r3
   12104:	2b00      	cmp	r3, #0
   12106:	d008      	beq.n	1211a <Uart::Receive(unsigned long)+0xae>
    if (is_done())
   12108:	ab03      	add	r3, sp, #12
   1210a:	4618      	mov	r0, r3
   1210c:	f7ff ff88 	bl	12020 <Uart::Receive(unsigned long)::{lambda()#1}::operator()() const>
   12110:	4603      	mov	r3, r0
   12112:	2b00      	cmp	r3, #0
   12114:	d0e9      	beq.n	120ea <Uart::Receive(unsigned long)+0x7e>
      status = Status::kSuccess;
   12116:	2300      	movs	r3, #0
   12118:	9305      	str	r3, [sp, #20]
  return status;
   1211a:	9c05      	ldr	r4, [sp, #20]
   1211c:	462b      	mov	r3, r5
   1211e:	4619      	mov	r1, r3
   12120:	480e      	ldr	r0, [pc, #56]	; (1215c <Uart::Receive(unsigned long)+0xf0>)
   12122:	f000 ff97 	bl	13054 <__cyg_profile_func_exit>
   12126:	940a      	str	r4, [sp, #40]	; 0x28

    if (status == Status::kSuccess)
   12128:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1212a:	2b00      	cmp	r3, #0
   1212c:	d108      	bne.n	12140 <Uart::Receive(unsigned long)+0xd4>
    {
      receiver = static_cast<uint8_t>(uart[channel_]->RBR);
   1212e:	9b01      	ldr	r3, [sp, #4]
   12130:	7a1b      	ldrb	r3, [r3, #8]
   12132:	461a      	mov	r2, r3
   12134:	4b0a      	ldr	r3, [pc, #40]	; (12160 <Uart::Receive(unsigned long)+0xf4>)
   12136:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   1213a:	781b      	ldrb	r3, [r3, #0]
   1213c:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
    }
    return receiver;
   12140:	f89d 402f 	ldrb.w	r4, [sp, #47]	; 0x2f
   12144:	462b      	mov	r3, r5
   12146:	4619      	mov	r1, r3
   12148:	4803      	ldr	r0, [pc, #12]	; (12158 <Uart::Receive(unsigned long)+0xec>)
   1214a:	f000 ff83 	bl	13054 <__cyg_profile_func_exit>
   1214e:	4623      	mov	r3, r4
  }
   12150:	4618      	mov	r0, r3
   12152:	b00c      	add	sp, #48	; 0x30
   12154:	e8bd 8830 	ldmia.w	sp!, {r4, r5, fp, pc}
   12158:	0001206d 	.word	0x0001206d
   1215c:	000128dd 	.word	0x000128dd
   12160:	10000070 	.word	0x10000070

00012164 <Uart::FindClosestFractional(float)>:

 private:
  UartCalibration_t FindClosestFractional(float decimal)
   12164:	b510      	push	{r4, lr}
   12166:	b08a      	sub	sp, #40	; 0x28
   12168:	4674      	mov	r4, lr
   1216a:	9003      	str	r0, [sp, #12]
   1216c:	9102      	str	r1, [sp, #8]
   1216e:	ed8d 0a01 	vstr	s0, [sp, #4]
   12172:	4623      	mov	r3, r4
   12174:	4619      	mov	r1, r3
   12176:	4838      	ldr	r0, [pc, #224]	; (12258 <Uart::FindClosestFractional(float)+0xf4>)
   12178:	f000 ff58 	bl	1302c <__cyg_profile_func_enter>
  {
    UartCalibration_t result;
   1217c:	9b03      	ldr	r3, [sp, #12]
   1217e:	2200      	movs	r2, #0
   12180:	601a      	str	r2, [r3, #0]
   12182:	9b03      	ldr	r3, [sp, #12]
   12184:	2200      	movs	r2, #0
   12186:	605a      	str	r2, [r3, #4]
   12188:	9b03      	ldr	r3, [sp, #12]
   1218a:	2201      	movs	r2, #1
   1218c:	609a      	str	r2, [r3, #8]
    bool finished = false;
   1218e:	2300      	movs	r3, #0
   12190:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    for (int div = 0; div < 15 && !finished; div++)
   12194:	2300      	movs	r3, #0
   12196:	9308      	str	r3, [sp, #32]
   12198:	9b08      	ldr	r3, [sp, #32]
   1219a:	2b0e      	cmp	r3, #14
   1219c:	dc52      	bgt.n	12244 <Uart::FindClosestFractional(float)+0xe0>
   1219e:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   121a2:	2b00      	cmp	r3, #0
   121a4:	d14e      	bne.n	12244 <Uart::FindClosestFractional(float)+0xe0>
    {
      for (int mul = div + 1; mul < 15 && !finished; mul++)
   121a6:	9b08      	ldr	r3, [sp, #32]
   121a8:	3301      	adds	r3, #1
   121aa:	9307      	str	r3, [sp, #28]
   121ac:	9b07      	ldr	r3, [sp, #28]
   121ae:	2b0e      	cmp	r3, #14
   121b0:	dc44      	bgt.n	1223c <Uart::FindClosestFractional(float)+0xd8>
   121b2:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   121b6:	2b00      	cmp	r3, #0
   121b8:	d140      	bne.n	1223c <Uart::FindClosestFractional(float)+0xd8>
      {
        float divf         = static_cast<float>(div);
   121ba:	9b08      	ldr	r3, [sp, #32]
   121bc:	ee07 3a90 	vmov	s15, r3
   121c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   121c4:	edcd 7a06 	vstr	s15, [sp, #24]
        float mulf         = static_cast<float>(mul);
   121c8:	9b07      	ldr	r3, [sp, #28]
   121ca:	ee07 3a90 	vmov	s15, r3
   121ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   121d2:	edcd 7a05 	vstr	s15, [sp, #20]
        float test_decimal = 1.0f + divf / mulf;
   121d6:	eddd 6a06 	vldr	s13, [sp, #24]
   121da:	ed9d 7a05 	vldr	s14, [sp, #20]
   121de:	eec6 7a87 	vdiv.f32	s15, s13, s14
   121e2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
   121e6:	ee77 7a87 	vadd.f32	s15, s15, s14
   121ea:	edcd 7a04 	vstr	s15, [sp, #16]
        if (decimal <= test_decimal + kThreshold &&
   121ee:	eddd 7a04 	vldr	s15, [sp, #16]
   121f2:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 1225c <Uart::FindClosestFractional(float)+0xf8>
   121f6:	ee77 7a87 	vadd.f32	s15, s15, s14
   121fa:	ed9d 7a01 	vldr	s14, [sp, #4]
   121fe:	eeb4 7ae7 	vcmpe.f32	s14, s15
   12202:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   12206:	d815      	bhi.n	12234 <Uart::FindClosestFractional(float)+0xd0>
            decimal >= test_decimal - kThreshold)
   12208:	eddd 7a04 	vldr	s15, [sp, #16]
   1220c:	ed9f 7a13 	vldr	s14, [pc, #76]	; 1225c <Uart::FindClosestFractional(float)+0xf8>
   12210:	ee77 7ac7 	vsub.f32	s15, s15, s14
        if (decimal <= test_decimal + kThreshold &&
   12214:	ed9d 7a01 	vldr	s14, [sp, #4]
   12218:	eeb4 7ae7 	vcmpe.f32	s14, s15
   1221c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   12220:	db08      	blt.n	12234 <Uart::FindClosestFractional(float)+0xd0>
        {
          result.divide_add = div;
   12222:	9a08      	ldr	r2, [sp, #32]
   12224:	9b03      	ldr	r3, [sp, #12]
   12226:	605a      	str	r2, [r3, #4]
          result.multiply   = mul;
   12228:	9a07      	ldr	r2, [sp, #28]
   1222a:	9b03      	ldr	r3, [sp, #12]
   1222c:	609a      	str	r2, [r3, #8]
          finished          = true;
   1222e:	2301      	movs	r3, #1
   12230:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
      for (int mul = div + 1; mul < 15 && !finished; mul++)
   12234:	9b07      	ldr	r3, [sp, #28]
   12236:	3301      	adds	r3, #1
   12238:	9307      	str	r3, [sp, #28]
   1223a:	e7b7      	b.n	121ac <Uart::FindClosestFractional(float)+0x48>
    for (int div = 0; div < 15 && !finished; div++)
   1223c:	9b08      	ldr	r3, [sp, #32]
   1223e:	3301      	adds	r3, #1
   12240:	9308      	str	r3, [sp, #32]
   12242:	e7a9      	b.n	12198 <Uart::FindClosestFractional(float)+0x34>
        }
      }
    }
    return result;
   12244:	bf00      	nop
   12246:	4623      	mov	r3, r4
   12248:	4619      	mov	r1, r3
   1224a:	4803      	ldr	r0, [pc, #12]	; (12258 <Uart::FindClosestFractional(float)+0xf4>)
   1224c:	f000 ff02 	bl	13054 <__cyg_profile_func_exit>
   12250:	bf00      	nop
  }
   12252:	9803      	ldr	r0, [sp, #12]
   12254:	b00a      	add	sp, #40	; 0x28
   12256:	bd10      	pop	{r4, pc}
   12258:	00012165 	.word	0x00012165
   1225c:	3d4ccccd 	.word	0x3d4ccccd

00012260 <Uart::DividerEstimate(float, float)>:

  float DividerEstimate(float baud_rate, float fraction_estimate = 1)
   12260:	b510      	push	{r4, lr}
   12262:	ed2d 8b02 	vpush	{d8}
   12266:	b086      	sub	sp, #24
   12268:	4674      	mov	r4, lr
   1226a:	9003      	str	r0, [sp, #12]
   1226c:	ed8d 0a02 	vstr	s0, [sp, #8]
   12270:	edcd 0a01 	vstr	s1, [sp, #4]
   12274:	4623      	mov	r3, r4
   12276:	4619      	mov	r1, r3
   12278:	4815      	ldr	r0, [pc, #84]	; (122d0 <Uart::DividerEstimate(float, float)+0x70>)
   1227a:	f000 fed7 	bl	1302c <__cyg_profile_func_enter>
  {
    float clock_frequency = static_cast<float>(GetPeripheralFrequency());
   1227e:	9b03      	ldr	r3, [sp, #12]
   12280:	1d1a      	adds	r2, r3, #4
   12282:	9b03      	ldr	r3, [sp, #12]
   12284:	685b      	ldr	r3, [r3, #4]
   12286:	3310      	adds	r3, #16
   12288:	681b      	ldr	r3, [r3, #0]
   1228a:	4610      	mov	r0, r2
   1228c:	4798      	blx	r3
   1228e:	ee07 0a90 	vmov	s15, r0
   12292:	eef8 7a67 	vcvt.f32.u32	s15, s15
   12296:	edcd 7a05 	vstr	s15, [sp, #20]
    return clock_frequency / (16.0f * baud_rate * fraction_estimate);
   1229a:	eddd 7a02 	vldr	s15, [sp, #8]
   1229e:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
   122a2:	ee27 7a87 	vmul.f32	s14, s15, s14
   122a6:	eddd 7a01 	vldr	s15, [sp, #4]
   122aa:	ee67 7a27 	vmul.f32	s15, s14, s15
   122ae:	ed9d 7a05 	vldr	s14, [sp, #20]
   122b2:	ee87 8a27 	vdiv.f32	s16, s14, s15
   122b6:	4623      	mov	r3, r4
   122b8:	4619      	mov	r1, r3
   122ba:	4805      	ldr	r0, [pc, #20]	; (122d0 <Uart::DividerEstimate(float, float)+0x70>)
   122bc:	f000 feca 	bl	13054 <__cyg_profile_func_exit>
   122c0:	eef0 7a48 	vmov.f32	s15, s16
  }
   122c4:	eeb0 0a67 	vmov.f32	s0, s15
   122c8:	b006      	add	sp, #24
   122ca:	ecbd 8b02 	vpop	{d8}
   122ce:	bd10      	pop	{r4, pc}
   122d0:	00012261 	.word	0x00012261

000122d4 <Uart::FractionalEstimate(float, float)>:

  float FractionalEstimate(float baud_rate, float divider)
   122d4:	b510      	push	{r4, lr}
   122d6:	ed2d 8b02 	vpush	{d8}
   122da:	b086      	sub	sp, #24
   122dc:	4674      	mov	r4, lr
   122de:	9003      	str	r0, [sp, #12]
   122e0:	ed8d 0a02 	vstr	s0, [sp, #8]
   122e4:	edcd 0a01 	vstr	s1, [sp, #4]
   122e8:	4623      	mov	r3, r4
   122ea:	4619      	mov	r1, r3
   122ec:	4815      	ldr	r0, [pc, #84]	; (12344 <Uart::FractionalEstimate(float, float)+0x70>)
   122ee:	f000 fe9d 	bl	1302c <__cyg_profile_func_enter>
  {
    float clock_frequency = static_cast<float>(GetPeripheralFrequency());
   122f2:	9b03      	ldr	r3, [sp, #12]
   122f4:	1d1a      	adds	r2, r3, #4
   122f6:	9b03      	ldr	r3, [sp, #12]
   122f8:	685b      	ldr	r3, [r3, #4]
   122fa:	3310      	adds	r3, #16
   122fc:	681b      	ldr	r3, [r3, #0]
   122fe:	4610      	mov	r0, r2
   12300:	4798      	blx	r3
   12302:	ee07 0a90 	vmov	s15, r0
   12306:	eef8 7a67 	vcvt.f32.u32	s15, s15
   1230a:	edcd 7a05 	vstr	s15, [sp, #20]
    return clock_frequency / (16.0f * baud_rate * divider);
   1230e:	eddd 7a02 	vldr	s15, [sp, #8]
   12312:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
   12316:	ee27 7a87 	vmul.f32	s14, s15, s14
   1231a:	eddd 7a01 	vldr	s15, [sp, #4]
   1231e:	ee67 7a27 	vmul.f32	s15, s14, s15
   12322:	ed9d 7a05 	vldr	s14, [sp, #20]
   12326:	ee87 8a27 	vdiv.f32	s16, s14, s15
   1232a:	4623      	mov	r3, r4
   1232c:	4619      	mov	r1, r3
   1232e:	4805      	ldr	r0, [pc, #20]	; (12344 <Uart::FractionalEstimate(float, float)+0x70>)
   12330:	f000 fe90 	bl	13054 <__cyg_profile_func_exit>
   12334:	eef0 7a48 	vmov.f32	s15, s16
  }
   12338:	eeb0 0a67 	vmov.f32	s0, s15
   1233c:	b006      	add	sp, #24
   1233e:	ecbd 8b02 	vpop	{d8}
   12342:	bd10      	pop	{r4, pc}
   12344:	000122d5 	.word	0x000122d5

00012348 <Uart::IsDecmial(float)>:

  bool IsDecmial(float value)
   12348:	b530      	push	{r4, r5, lr}
   1234a:	b087      	sub	sp, #28
   1234c:	4675      	mov	r5, lr
   1234e:	9001      	str	r0, [sp, #4]
   12350:	ed8d 0a00 	vstr	s0, [sp]
   12354:	462b      	mov	r3, r5
   12356:	4619      	mov	r1, r3
   12358:	4819      	ldr	r0, [pc, #100]	; (123c0 <Uart::IsDecmial(float)+0x78>)
   1235a:	f000 fe67 	bl	1302c <__cyg_profile_func_enter>
  {
    bool result         = false;
   1235e:	2300      	movs	r3, #0
   12360:	f88d 3017 	strb.w	r3, [sp, #23]
    float rounded_value = roundf(value);
   12364:	ed9d 0a00 	vldr	s0, [sp]
   12368:	f004 fd0c 	bl	16d84 <roundf>
   1236c:	ed8d 0a04 	vstr	s0, [sp, #16]
    float error         = value - rounded_value;
   12370:	ed9d 7a00 	vldr	s14, [sp]
   12374:	eddd 7a04 	vldr	s15, [sp, #16]
   12378:	ee77 7a67 	vsub.f32	s15, s14, s15
   1237c:	edcd 7a03 	vstr	s15, [sp, #12]
    if (-kThreshold <= error && error <= kThreshold)
   12380:	eddd 7a03 	vldr	s15, [sp, #12]
   12384:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 123c4 <Uart::IsDecmial(float)+0x7c>
   12388:	eef4 7ac7 	vcmpe.f32	s15, s14
   1238c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   12390:	db0b      	blt.n	123aa <Uart::IsDecmial(float)+0x62>
   12392:	eddd 7a03 	vldr	s15, [sp, #12]
   12396:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 123c8 <Uart::IsDecmial(float)+0x80>
   1239a:	eef4 7ac7 	vcmpe.f32	s15, s14
   1239e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   123a2:	d802      	bhi.n	123aa <Uart::IsDecmial(float)+0x62>
    {
      result = true;
   123a4:	2301      	movs	r3, #1
   123a6:	f88d 3017 	strb.w	r3, [sp, #23]
    }
    return result;
   123aa:	f89d 4017 	ldrb.w	r4, [sp, #23]
   123ae:	462b      	mov	r3, r5
   123b0:	4619      	mov	r1, r3
   123b2:	4803      	ldr	r0, [pc, #12]	; (123c0 <Uart::IsDecmial(float)+0x78>)
   123b4:	f000 fe4e 	bl	13054 <__cyg_profile_func_exit>
   123b8:	4623      	mov	r3, r4
  }
   123ba:	4618      	mov	r0, r3
   123bc:	b007      	add	sp, #28
   123be:	bd30      	pop	{r4, r5, pc}
   123c0:	00012349 	.word	0x00012349
   123c4:	bd4ccccd 	.word	0xbd4ccccd
   123c8:	3d4ccccd 	.word	0x3d4ccccd

000123cc <Uart::GenerateUartCalibration(float)>:

  UartCalibration_t GenerateUartCalibration(float baud_rate)
   123cc:	b530      	push	{r4, r5, lr}
   123ce:	b08f      	sub	sp, #60	; 0x3c
   123d0:	4675      	mov	r5, lr
   123d2:	9007      	str	r0, [sp, #28]
   123d4:	9106      	str	r1, [sp, #24]
   123d6:	ed8d 0a05 	vstr	s0, [sp, #20]
   123da:	462b      	mov	r3, r5
   123dc:	4619      	mov	r1, r3
   123de:	4874      	ldr	r0, [pc, #464]	; (125b0 <Uart::GenerateUartCalibration(float)+0x1e4>)
   123e0:	f000 fe24 	bl	1302c <__cyg_profile_func_enter>
  {
    States state = States::kCalculateIntegerDivideLatch;
   123e4:	2300      	movs	r3, #0
   123e6:	930d      	str	r3, [sp, #52]	; 0x34
    UartCalibration_t uart_calibration;
   123e8:	9b07      	ldr	r3, [sp, #28]
   123ea:	2200      	movs	r2, #0
   123ec:	601a      	str	r2, [r3, #0]
   123ee:	9b07      	ldr	r3, [sp, #28]
   123f0:	2200      	movs	r2, #0
   123f2:	605a      	str	r2, [r3, #4]
   123f4:	9b07      	ldr	r3, [sp, #28]
   123f6:	2201      	movs	r2, #1
   123f8:	609a      	str	r2, [r3, #8]
    float divide_estimate = 0;
   123fa:	f04f 0300 	mov.w	r3, #0
   123fe:	930c      	str	r3, [sp, #48]	; 0x30
    float decimal         = 1.5;
   12400:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
   12404:	930b      	str	r3, [sp, #44]	; 0x2c
    float div             = 1;
   12406:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
   1240a:	930a      	str	r3, [sp, #40]	; 0x28
    float mul             = 2;
   1240c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   12410:	9309      	str	r3, [sp, #36]	; 0x24
    while (state != States::kDone)
   12412:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   12414:	2b04      	cmp	r3, #4
   12416:	f000 80c1 	beq.w	1259c <Uart::GenerateUartCalibration(float)+0x1d0>
    {
      switch (state)
   1241a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1241c:	2b04      	cmp	r3, #4
   1241e:	f200 80bb 	bhi.w	12598 <Uart::GenerateUartCalibration(float)+0x1cc>
   12422:	a201      	add	r2, pc, #4	; (adr r2, 12428 <Uart::GenerateUartCalibration(float)+0x5c>)
   12424:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   12428:	0001243d 	.word	0x0001243d
   1242c:	00012499 	.word	0x00012499
   12430:	000124f9 	.word	0x000124f9
   12434:	00012569 	.word	0x00012569
   12438:	00012599 	.word	0x00012599
      {
        case States::kCalculateIntegerDivideLatch:
        {
          divide_estimate = DividerEstimate(baud_rate);
   1243c:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
   12440:	ed9d 0a05 	vldr	s0, [sp, #20]
   12444:	9806      	ldr	r0, [sp, #24]
   12446:	f7ff ff0b 	bl	12260 <Uart::DividerEstimate(float, float)>
   1244a:	ed8d 0a0c 	vstr	s0, [sp, #48]	; 0x30
          if (divide_estimate < 1.0f)
   1244e:	eddd 7a0c 	vldr	s15, [sp, #48]	; 0x30
   12452:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
   12456:	eef4 7ac7 	vcmpe.f32	s15, s14
   1245a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1245e:	d505      	bpl.n	1246c <Uart::GenerateUartCalibration(float)+0xa0>
          {
            uart_calibration.divide_latch = 0;
   12460:	9b07      	ldr	r3, [sp, #28]
   12462:	2200      	movs	r2, #0
   12464:	601a      	str	r2, [r3, #0]
            state                         = States::kDone;
   12466:	2304      	movs	r3, #4
   12468:	930d      	str	r3, [sp, #52]	; 0x34
          }
          else
          {
            state = States::kCalculateDivideLatchWithDecimal;
          }
          break;
   1246a:	e096      	b.n	1259a <Uart::GenerateUartCalibration(float)+0x1ce>
          else if (IsDecmial(divide_estimate))
   1246c:	ed9d 0a0c 	vldr	s0, [sp, #48]	; 0x30
   12470:	9806      	ldr	r0, [sp, #24]
   12472:	f7ff ff69 	bl	12348 <Uart::IsDecmial(float)>
   12476:	4603      	mov	r3, r0
   12478:	2b00      	cmp	r3, #0
   1247a:	d00a      	beq.n	12492 <Uart::GenerateUartCalibration(float)+0xc6>
                static_cast<uint32_t>(divide_estimate);
   1247c:	eddd 7a0c 	vldr	s15, [sp, #48]	; 0x30
   12480:	eefc 7ae7 	vcvt.u32.f32	s15, s15
   12484:	ee17 2a90 	vmov	r2, s15
            uart_calibration.divide_latch =
   12488:	9b07      	ldr	r3, [sp, #28]
   1248a:	601a      	str	r2, [r3, #0]
            state = States::kDone;
   1248c:	2304      	movs	r3, #4
   1248e:	930d      	str	r3, [sp, #52]	; 0x34
          break;
   12490:	e083      	b.n	1259a <Uart::GenerateUartCalibration(float)+0x1ce>
            state = States::kCalculateDivideLatchWithDecimal;
   12492:	2301      	movs	r3, #1
   12494:	930d      	str	r3, [sp, #52]	; 0x34
          break;
   12496:	e080      	b.n	1259a <Uart::GenerateUartCalibration(float)+0x1ce>
        }
        case States::kCalculateDivideLatchWithDecimal:
        {
          divide_estimate = roundf(DividerEstimate(baud_rate, decimal));
   12498:	eddd 0a0b 	vldr	s1, [sp, #44]	; 0x2c
   1249c:	ed9d 0a05 	vldr	s0, [sp, #20]
   124a0:	9806      	ldr	r0, [sp, #24]
   124a2:	f7ff fedd 	bl	12260 <Uart::DividerEstimate(float, float)>
   124a6:	eef0 7a40 	vmov.f32	s15, s0
   124aa:	eeb0 0a67 	vmov.f32	s0, s15
   124ae:	f004 fc69 	bl	16d84 <roundf>
   124b2:	ed8d 0a0c 	vstr	s0, [sp, #48]	; 0x30
          decimal         = FractionalEstimate(baud_rate, divide_estimate);
   124b6:	eddd 0a0c 	vldr	s1, [sp, #48]	; 0x30
   124ba:	ed9d 0a05 	vldr	s0, [sp, #20]
   124be:	9806      	ldr	r0, [sp, #24]
   124c0:	f7ff ff08 	bl	122d4 <Uart::FractionalEstimate(float, float)>
   124c4:	ed8d 0a0b 	vstr	s0, [sp, #44]	; 0x2c
          if (1.1f <= decimal && decimal <= 1.9f)
   124c8:	eddd 7a0b 	vldr	s15, [sp, #44]	; 0x2c
   124cc:	ed9f 7a39 	vldr	s14, [pc, #228]	; 125b4 <Uart::GenerateUartCalibration(float)+0x1e8>
   124d0:	eef4 7ac7 	vcmpe.f32	s15, s14
   124d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   124d8:	db0b      	blt.n	124f2 <Uart::GenerateUartCalibration(float)+0x126>
   124da:	eddd 7a0b 	vldr	s15, [sp, #44]	; 0x2c
   124de:	ed9f 7a36 	vldr	s14, [pc, #216]	; 125b8 <Uart::GenerateUartCalibration(float)+0x1ec>
   124e2:	eef4 7ac7 	vcmpe.f32	s15, s14
   124e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   124ea:	d802      	bhi.n	124f2 <Uart::GenerateUartCalibration(float)+0x126>
          {
            state = States::kGenerateFractionFromDecimal;
   124ec:	2303      	movs	r3, #3
   124ee:	930d      	str	r3, [sp, #52]	; 0x34
          }
          else
          {
            state = States::kDecimalFailedGenerateNewDecimal;
          }
          break;
   124f0:	e053      	b.n	1259a <Uart::GenerateUartCalibration(float)+0x1ce>
            state = States::kDecimalFailedGenerateNewDecimal;
   124f2:	2302      	movs	r3, #2
   124f4:	930d      	str	r3, [sp, #52]	; 0x34
          break;
   124f6:	e050      	b.n	1259a <Uart::GenerateUartCalibration(float)+0x1ce>
        }
        case States::kDecimalFailedGenerateNewDecimal:
        {
          mul += 1;
   124f8:	eddd 7a09 	vldr	s15, [sp, #36]	; 0x24
   124fc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
   12500:	ee77 7a87 	vadd.f32	s15, s15, s14
   12504:	edcd 7a09 	vstr	s15, [sp, #36]	; 0x24

          if (div > 15)
   12508:	eddd 7a0a 	vldr	s15, [sp, #40]	; 0x28
   1250c:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
   12510:	eef4 7ac7 	vcmpe.f32	s15, s14
   12514:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   12518:	dd02      	ble.n	12520 <Uart::GenerateUartCalibration(float)+0x154>
          {
            state = States::kDone;
   1251a:	2304      	movs	r3, #4
   1251c:	930d      	str	r3, [sp, #52]	; 0x34
            break;
   1251e:	e03c      	b.n	1259a <Uart::GenerateUartCalibration(float)+0x1ce>
          }
          else if (mul > 15)
   12520:	eddd 7a09 	vldr	s15, [sp, #36]	; 0x24
   12524:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
   12528:	eef4 7ac7 	vcmpe.f32	s15, s14
   1252c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   12530:	dd0f      	ble.n	12552 <Uart::GenerateUartCalibration(float)+0x186>
          {
            div += 1;
   12532:	eddd 7a0a 	vldr	s15, [sp, #40]	; 0x28
   12536:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
   1253a:	ee77 7a87 	vadd.f32	s15, s15, s14
   1253e:	edcd 7a0a 	vstr	s15, [sp, #40]	; 0x28
            mul = div + 1;
   12542:	eddd 7a0a 	vldr	s15, [sp, #40]	; 0x28
   12546:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
   1254a:	ee77 7a87 	vadd.f32	s15, s15, s14
   1254e:	edcd 7a09 	vstr	s15, [sp, #36]	; 0x24
          }
          decimal = div / mul;
   12552:	eddd 6a0a 	vldr	s13, [sp, #40]	; 0x28
   12556:	ed9d 7a09 	vldr	s14, [sp, #36]	; 0x24
   1255a:	eec6 7a87 	vdiv.f32	s15, s13, s14
   1255e:	edcd 7a0b 	vstr	s15, [sp, #44]	; 0x2c
          state   = States::kCalculateDivideLatchWithDecimal;
   12562:	2301      	movs	r3, #1
   12564:	930d      	str	r3, [sp, #52]	; 0x34
          break;
   12566:	e018      	b.n	1259a <Uart::GenerateUartCalibration(float)+0x1ce>
        }
        case States::kGenerateFractionFromDecimal:
        {
          uart_calibration = FindClosestFractional(decimal);
   12568:	9c07      	ldr	r4, [sp, #28]
   1256a:	466b      	mov	r3, sp
   1256c:	ed9d 0a0b 	vldr	s0, [sp, #44]	; 0x2c
   12570:	9906      	ldr	r1, [sp, #24]
   12572:	4618      	mov	r0, r3
   12574:	f7ff fdf6 	bl	12164 <Uart::FindClosestFractional(float)>
   12578:	466b      	mov	r3, sp
   1257a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   1257e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
          uart_calibration.divide_latch =
              static_cast<uint32_t>(divide_estimate);
   12582:	eddd 7a0c 	vldr	s15, [sp, #48]	; 0x30
   12586:	eefc 7ae7 	vcvt.u32.f32	s15, s15
   1258a:	ee17 2a90 	vmov	r2, s15
          uart_calibration.divide_latch =
   1258e:	9b07      	ldr	r3, [sp, #28]
   12590:	601a      	str	r2, [r3, #0]
          state = States::kDone;
   12592:	2304      	movs	r3, #4
   12594:	930d      	str	r3, [sp, #52]	; 0x34
          break;
   12596:	e000      	b.n	1259a <Uart::GenerateUartCalibration(float)+0x1ce>
        }
        case States::kDone: { break;
        }
        default: { break;
   12598:	bf00      	nop
    while (state != States::kDone)
   1259a:	e73a      	b.n	12412 <Uart::GenerateUartCalibration(float)+0x46>
        }
      }
    }
    return uart_calibration;
   1259c:	bf00      	nop
   1259e:	462b      	mov	r3, r5
   125a0:	4619      	mov	r1, r3
   125a2:	4803      	ldr	r0, [pc, #12]	; (125b0 <Uart::GenerateUartCalibration(float)+0x1e4>)
   125a4:	f000 fd56 	bl	13054 <__cyg_profile_func_exit>
   125a8:	bf00      	nop
  }
   125aa:	9807      	ldr	r0, [sp, #28]
   125ac:	b00f      	add	sp, #60	; 0x3c
   125ae:	bd30      	pop	{r4, r5, pc}
   125b0:	000123cd 	.word	0x000123cd
   125b4:	3f8ccccd 	.word	0x3f8ccccd
   125b8:	3ff33333 	.word	0x3ff33333

000125bc <(anonymous namespace)::Lpc40xxUptime()>:
{
   125bc:	b538      	push	{r3, r4, r5, lr}
   125be:	4675      	mov	r5, lr
   125c0:	462b      	mov	r3, r5
   125c2:	4619      	mov	r1, r3
   125c4:	480a      	ldr	r0, [pc, #40]	; (125f0 <(anonymous namespace)::Lpc40xxUptime()+0x34>)
   125c6:	f000 fd31 	bl	1302c <__cyg_profile_func_enter>
    return tim_register[channel_]->TC;
   125ca:	4b0a      	ldr	r3, [pc, #40]	; (125f4 <(anonymous namespace)::Lpc40xxUptime()+0x38>)
   125cc:	7a1b      	ldrb	r3, [r3, #8]
   125ce:	461a      	mov	r2, r3
   125d0:	4b09      	ldr	r3, [pc, #36]	; (125f8 <(anonymous namespace)::Lpc40xxUptime()+0x3c>)
   125d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   125d6:	689c      	ldr	r4, [r3, #8]
   125d8:	462b      	mov	r3, r5
   125da:	4619      	mov	r1, r3
   125dc:	4804      	ldr	r0, [pc, #16]	; (125f0 <(anonymous namespace)::Lpc40xxUptime()+0x34>)
   125de:	f000 fd39 	bl	13054 <__cyg_profile_func_exit>
  return timer0.GetTimer();
   125e2:	4623      	mov	r3, r4
   125e4:	f04f 0400 	mov.w	r4, #0
}
   125e8:	4618      	mov	r0, r3
   125ea:	4621      	mov	r1, r4
   125ec:	bd38      	pop	{r3, r4, r5, pc}
   125ee:	bf00      	nop
   125f0:	00011d01 	.word	0x00011d01
   125f4:	100000e0 	.word	0x100000e0
   125f8:	10000060 	.word	0x10000060

000125fc <UptimeRTOS>:
{
   125fc:	b538      	push	{r3, r4, r5, lr}
   125fe:	4675      	mov	r5, lr
   12600:	462b      	mov	r3, r5
   12602:	4619      	mov	r1, r3
   12604:	480a      	ldr	r0, [pc, #40]	; (12630 <UptimeRTOS+0x34>)
   12606:	f000 fd11 	bl	1302c <__cyg_profile_func_enter>
   1260a:	4b0a      	ldr	r3, [pc, #40]	; (12634 <UptimeRTOS+0x38>)
   1260c:	7a1b      	ldrb	r3, [r3, #8]
   1260e:	461a      	mov	r2, r3
   12610:	4b09      	ldr	r3, [pc, #36]	; (12638 <UptimeRTOS+0x3c>)
   12612:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   12616:	689c      	ldr	r4, [r3, #8]
   12618:	462b      	mov	r3, r5
   1261a:	4619      	mov	r1, r3
   1261c:	4804      	ldr	r0, [pc, #16]	; (12630 <UptimeRTOS+0x34>)
   1261e:	f000 fd19 	bl	13054 <__cyg_profile_func_exit>
  return timer0.GetTimer();
   12622:	4623      	mov	r3, r4
   12624:	f04f 0400 	mov.w	r4, #0
}
   12628:	4618      	mov	r0, r3
   1262a:	4621      	mov	r1, r4
   1262c:	bd38      	pop	{r3, r4, r5, pc}
   1262e:	bf00      	nop
   12630:	00011d01 	.word	0x00011d01
   12634:	100000e0 	.word	0x100000e0
   12638:	10000060 	.word	0x10000060

0001263c <LowLevelInit()>:

void LowLevelInit()
{
   1263c:	b500      	push	{lr}
   1263e:	b083      	sub	sp, #12
  // Set the SystemTick frequency to the RTOS tick frequency
  // It is critical that this happens before you set the system_clock, since
  // The system_timer keeps the time that the system_clock uses to delay itself.
  system_timer.SetTickFrequency(config::kRtosFrequency);
   12640:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   12644:	4822      	ldr	r0, [pc, #136]	; (126d0 <LowLevelInit()+0x94>)
   12646:	f7fe fecb 	bl	113e0 <SystemTimer::SetTickFrequency(unsigned long)>
  bool timer_started_successfully = system_timer.StartTimer();
   1264a:	4821      	ldr	r0, [pc, #132]	; (126d0 <LowLevelInit()+0x94>)
   1264c:	f7fe fe7a 	bl	11344 <SystemTimer::StartTimer()>
   12650:	4603      	mov	r3, r0
   12652:	f88d 3007 	strb.w	r3, [sp, #7]
  SJ2_ASSERT_WARNING(timer_started_successfully,
   12656:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1265a:	f083 0301 	eor.w	r3, r3, #1
   1265e:	b2db      	uxtb	r3, r3
   12660:	2b00      	cmp	r3, #0
   12662:	d005      	beq.n	12670 <LowLevelInit()+0x34>
   12664:	23ad      	movs	r3, #173	; 0xad
   12666:	4a1b      	ldr	r2, [pc, #108]	; (126d4 <LowLevelInit()+0x98>)
   12668:	491b      	ldr	r1, [pc, #108]	; (126d8 <LowLevelInit()+0x9c>)
   1266a:	481c      	ldr	r0, [pc, #112]	; (126dc <LowLevelInit()+0xa0>)
   1266c:	f001 ff3a 	bl	144e4 <printf>
                     "System Timer has FAILED to start!");
  // Set Clock Speed
  // SetClockFrequency will timeout return the offset between desire clockspeed
  // and actual clockspeed if the PLL doesn't get a frequency fix within a
  // defined timeout (see L1/system_clock.hpp:kDefaultTimeout)
  while (system_controller.SetClockFrequency(config::kSystemClockRateMhz) != 0)
   12670:	2130      	movs	r1, #48	; 0x30
   12672:	481b      	ldr	r0, [pc, #108]	; (126e0 <LowLevelInit()+0xa4>)
   12674:	f7fe fb4c 	bl	10d10 <Lpc40xxSystemController::SetClockFrequency(unsigned char)>
   12678:	4603      	mov	r3, r0
   1267a:	2b00      	cmp	r3, #0
   1267c:	bf14      	ite	ne
   1267e:	2301      	movne	r3, #1
   12680:	2300      	moveq	r3, #0
   12682:	b2db      	uxtb	r3, r3
   12684:	2b00      	cmp	r3, #0
   12686:	d001      	beq.n	1268c <LowLevelInit()+0x50>
  {
    // Continually attempt to set the clock frequency to the desired until the
    // delta between desired and actual are 0.
    continue;
   12688:	bf00      	nop
  while (system_controller.SetClockFrequency(config::kSystemClockRateMhz) != 0)
   1268a:	e7f1      	b.n	12670 <LowLevelInit()+0x34>
  }
  // Enable Peripheral Clock and set its divider to 1 meaning the clock speed
  // fed to all peripherals will be 48Mhz.
  system_controller.SetPeripheralClockDivider(1);
   1268c:	2101      	movs	r1, #1
   1268e:	4814      	ldr	r0, [pc, #80]	; (126e0 <LowLevelInit()+0xa4>)
   12690:	f7fe fb86 	bl	10da0 <Lpc40xxSystemController::SetPeripheralClockDivider(unsigned char)>
  // Set System Timer frequency again, since the clock speed has changed since
  // the last time we ran this.
  system_timer.DisableTimer();
   12694:	f7fe fe04 	bl	112a0 <SystemTimer::DisableTimer()>
  system_timer.SetTickFrequency(config::kRtosFrequency);
   12698:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   1269c:	480c      	ldr	r0, [pc, #48]	; (126d0 <LowLevelInit()+0x94>)
   1269e:	f7fe fe9f 	bl	113e0 <SystemTimer::SetTickFrequency(unsigned long)>
  system_timer.StartTimer();
   126a2:	480b      	ldr	r0, [pc, #44]	; (126d0 <LowLevelInit()+0x94>)
   126a4:	f7fe fe4e 	bl	11344 <SystemTimer::StartTimer()>
  // Set timer0 to 1 MHz (1,000,000 Hz) so that the timer increments every 1
  // micro second.
  timer0.Initialize(1'000'000);
   126a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   126ac:	4a0d      	ldr	r2, [pc, #52]	; (126e4 <LowLevelInit()+0xa8>)
   126ae:	490e      	ldr	r1, [pc, #56]	; (126e8 <LowLevelInit()+0xac>)
   126b0:	480e      	ldr	r0, [pc, #56]	; (126ec <LowLevelInit()+0xb0>)
   126b2:	f7ff f9f7 	bl	11aa4 <Timer::Initialize(unsigned long, void (*)(), long)>
  SetUptimeFunction(Lpc40xxUptime);
   126b6:	480e      	ldr	r0, [pc, #56]	; (126f0 <LowLevelInit()+0xb4>)
   126b8:	f7fe fb12 	bl	10ce0 <SetUptimeFunction(unsigned long long (*)())>
  // Set UART0 baudrate, which is required for printf and scanf to work properly
  uart0.Initialize(config::kBaudRate);
   126bc:	f44f 4116 	mov.w	r1, #38400	; 0x9600
   126c0:	480c      	ldr	r0, [pc, #48]	; (126f4 <LowLevelInit()+0xb8>)
   126c2:	f7ff fba1 	bl	11e08 <Uart::Initialize(unsigned long)>
}
   126c6:	bf00      	nop
   126c8:	b003      	add	sp, #12
   126ca:	f85d fb04 	ldr.w	pc, [sp], #4
   126ce:	bf00      	nop
   126d0:	100000d4 	.word	0x100000d4
   126d4:	00017cd8 	.word	0x00017cd8
   126d8:	00017a40 	.word	0x00017a40
   126dc:	00017920 	.word	0x00017920
   126e0:	100000dc 	.word	0x100000dc
   126e4:	00011a85 	.word	0x00011a85
   126e8:	000f4240 	.word	0x000f4240
   126ec:	100000e0 	.word	0x100000e0
   126f0:	000125bd 	.word	0x000125bd
   126f4:	100000c0 	.word	0x100000c0

000126f8 <SystemInit>:

void SystemInit()
{
   126f8:	b508      	push	{r3, lr}
  // Transfer data section values from flash to RAM
  InitDataSection();
   126fa:	f7fd fd07 	bl	1010c <InitDataSection()>
  // Clear BSS section of RAM
  // This is required because the nano implementation of the standard C/C++
  // libraries assumes that the BSS section is initialized to 0.
  InitBssSection();
   126fe:	f7fd fd4d 	bl	1019c <InitBssSection()>
  // Enable FPU (F.loating P.oint U.nit)
  // System will crash if floating point operations occur without
  // Initializing the FPU.
  InitFpu();
   12702:	f7fd fd7b 	bl	101fc <InitFpu()>
  // Initialisation C++ libraries
  __libc_init_array();
   12706:	f004 fd45 	bl	17194 <__libc_init_array>
  // Run LowLevel System Initialization
  LowLevelInit();
   1270a:	f7ff ff97 	bl	1263c <LowLevelInit()>
}
   1270e:	bf00      	nop
   12710:	bd08      	pop	{r3, pc}
   12712:	Address 0x0000000000012712 is out of bounds.


00012714 <ResetIsr>:
// Sets up a simple runtime environment and initializes the C/C++ library.

extern "C"
{
  void ResetIsr(void)
  {
   12714:	b580      	push	{r7, lr}
   12716:	b084      	sub	sp, #16
   12718:	af00      	add	r7, sp, #0
    // The Hyperload bootloader takes up stack space to execute. The Hyperload
    // bootloader function launches this ISR manually, but it never returns thus
    // it never cleans up the memory it uses. To get that memory back, we have
    // to manually move the stack pointers back to the top of stack.
    const uint32_t kTopOfStack = reinterpret_cast<intptr_t>(&StackTop);
   1271a:	4b09      	ldr	r3, [pc, #36]	; (12740 <ResetIsr+0x2c>)
   1271c:	60fb      	str	r3, [r7, #12]
   1271e:	68fb      	ldr	r3, [r7, #12]
   12720:	603b      	str	r3, [r7, #0]
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
   12722:	683b      	ldr	r3, [r7, #0]
   12724:	f383 8809 	msr	PSP, r3
   12728:	68fb      	ldr	r3, [r7, #12]
   1272a:	607b      	str	r3, [r7, #4]

    \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0\n" : : "r" (topOfMainStack) : "sp");
   1272c:	687b      	ldr	r3, [r7, #4]
   1272e:	f383 8808 	msr	MSP, r3
    __set_PSP(kTopOfStack);
    __set_MSP(kTopOfStack);

    SystemInit();
   12732:	f7ff ffe1 	bl	126f8 <SystemInit>
// #pragma ignored "-Wpedantic" to suppress main function call warning
#pragma GCC diagnostic push ignored "-Wpedantic"
    [[maybe_unused]] int32_t result = main();
   12736:	f7fe f98b 	bl	10a50 <main>
   1273a:	60b8      	str	r0, [r7, #8]
   1273c:	e7fe      	b.n	1273c <ResetIsr+0x28>
   1273e:	bf00      	nop
   12740:	10010000 	.word	0x10010000

00012744 <void Timer::TimerHandler<(TimerInterface::TimerPort)0>()>:
  static void TimerHandler()
   12744:	b510      	push	{r4, lr}
   12746:	4674      	mov	r4, lr
   12748:	4623      	mov	r3, r4
   1274a:	4619      	mov	r1, r3
   1274c:	480a      	ldr	r0, [pc, #40]	; (12778 <void Timer::TimerHandler<(TimerInterface::TimerPort)0>()+0x34>)
   1274e:	f000 fc6d 	bl	1302c <__cyg_profile_func_enter>
      user_timer_isr[util::Value(port)]();
   12752:	2000      	movs	r0, #0
   12754:	f7ff f97e 	bl	11a54 <unsigned char util::Value<TimerInterface::TimerPort, unsigned char>(TimerInterface::TimerPort)>
   12758:	4603      	mov	r3, r0
   1275a:	461a      	mov	r2, r3
   1275c:	4b07      	ldr	r3, [pc, #28]	; (1277c <void Timer::TimerHandler<(TimerInterface::TimerPort)0>()+0x38>)
   1275e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   12762:	4798      	blx	r3
    ClearInterrupts<port>();
   12764:	f000 f90e 	bl	12984 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)0>()>
   12768:	4623      	mov	r3, r4
   1276a:	4619      	mov	r1, r3
   1276c:	4802      	ldr	r0, [pc, #8]	; (12778 <void Timer::TimerHandler<(TimerInterface::TimerPort)0>()+0x34>)
   1276e:	f000 fc71 	bl	13054 <__cyg_profile_func_exit>
  }
   12772:	bf00      	nop
   12774:	bd10      	pop	{r4, pc}
   12776:	bf00      	nop
   12778:	00012745 	.word	0x00012745
   1277c:	100003d4 	.word	0x100003d4

00012780 <void Timer::TimerHandler<(TimerInterface::TimerPort)1>()>:
  static void TimerHandler()
   12780:	b510      	push	{r4, lr}
   12782:	4674      	mov	r4, lr
   12784:	4623      	mov	r3, r4
   12786:	4619      	mov	r1, r3
   12788:	480a      	ldr	r0, [pc, #40]	; (127b4 <void Timer::TimerHandler<(TimerInterface::TimerPort)1>()+0x34>)
   1278a:	f000 fc4f 	bl	1302c <__cyg_profile_func_enter>
      user_timer_isr[util::Value(port)]();
   1278e:	2001      	movs	r0, #1
   12790:	f7ff f960 	bl	11a54 <unsigned char util::Value<TimerInterface::TimerPort, unsigned char>(TimerInterface::TimerPort)>
   12794:	4603      	mov	r3, r0
   12796:	461a      	mov	r2, r3
   12798:	4b07      	ldr	r3, [pc, #28]	; (127b8 <void Timer::TimerHandler<(TimerInterface::TimerPort)1>()+0x38>)
   1279a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   1279e:	4798      	blx	r3
    ClearInterrupts<port>();
   127a0:	f000 f940 	bl	12a24 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)1>()>
   127a4:	4623      	mov	r3, r4
   127a6:	4619      	mov	r1, r3
   127a8:	4802      	ldr	r0, [pc, #8]	; (127b4 <void Timer::TimerHandler<(TimerInterface::TimerPort)1>()+0x34>)
   127aa:	f000 fc53 	bl	13054 <__cyg_profile_func_exit>
  }
   127ae:	bf00      	nop
   127b0:	bd10      	pop	{r4, pc}
   127b2:	bf00      	nop
   127b4:	00012781 	.word	0x00012781
   127b8:	100003d4 	.word	0x100003d4

000127bc <void Timer::TimerHandler<(TimerInterface::TimerPort)2>()>:
  static void TimerHandler()
   127bc:	b510      	push	{r4, lr}
   127be:	4674      	mov	r4, lr
   127c0:	4623      	mov	r3, r4
   127c2:	4619      	mov	r1, r3
   127c4:	480a      	ldr	r0, [pc, #40]	; (127f0 <void Timer::TimerHandler<(TimerInterface::TimerPort)2>()+0x34>)
   127c6:	f000 fc31 	bl	1302c <__cyg_profile_func_enter>
      user_timer_isr[util::Value(port)]();
   127ca:	2002      	movs	r0, #2
   127cc:	f7ff f942 	bl	11a54 <unsigned char util::Value<TimerInterface::TimerPort, unsigned char>(TimerInterface::TimerPort)>
   127d0:	4603      	mov	r3, r0
   127d2:	461a      	mov	r2, r3
   127d4:	4b07      	ldr	r3, [pc, #28]	; (127f4 <void Timer::TimerHandler<(TimerInterface::TimerPort)2>()+0x38>)
   127d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   127da:	4798      	blx	r3
    ClearInterrupts<port>();
   127dc:	f000 f972 	bl	12ac4 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)2>()>
   127e0:	4623      	mov	r3, r4
   127e2:	4619      	mov	r1, r3
   127e4:	4802      	ldr	r0, [pc, #8]	; (127f0 <void Timer::TimerHandler<(TimerInterface::TimerPort)2>()+0x34>)
   127e6:	f000 fc35 	bl	13054 <__cyg_profile_func_exit>
  }
   127ea:	bf00      	nop
   127ec:	bd10      	pop	{r4, pc}
   127ee:	bf00      	nop
   127f0:	000127bd 	.word	0x000127bd
   127f4:	100003d4 	.word	0x100003d4

000127f8 <void Timer::TimerHandler<(TimerInterface::TimerPort)3>()>:
  static void TimerHandler()
   127f8:	b510      	push	{r4, lr}
   127fa:	4674      	mov	r4, lr
   127fc:	4623      	mov	r3, r4
   127fe:	4619      	mov	r1, r3
   12800:	480a      	ldr	r0, [pc, #40]	; (1282c <void Timer::TimerHandler<(TimerInterface::TimerPort)3>()+0x34>)
   12802:	f000 fc13 	bl	1302c <__cyg_profile_func_enter>
      user_timer_isr[util::Value(port)]();
   12806:	2003      	movs	r0, #3
   12808:	f7ff f924 	bl	11a54 <unsigned char util::Value<TimerInterface::TimerPort, unsigned char>(TimerInterface::TimerPort)>
   1280c:	4603      	mov	r3, r0
   1280e:	461a      	mov	r2, r3
   12810:	4b07      	ldr	r3, [pc, #28]	; (12830 <void Timer::TimerHandler<(TimerInterface::TimerPort)3>()+0x38>)
   12812:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   12816:	4798      	blx	r3
    ClearInterrupts<port>();
   12818:	f000 f9a4 	bl	12b64 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)3>()>
   1281c:	4623      	mov	r3, r4
   1281e:	4619      	mov	r1, r3
   12820:	4802      	ldr	r0, [pc, #8]	; (1282c <void Timer::TimerHandler<(TimerInterface::TimerPort)3>()+0x34>)
   12822:	f000 fc17 	bl	13054 <__cyg_profile_func_exit>
  }
   12826:	bf00      	nop
   12828:	bd10      	pop	{r4, pc}
   1282a:	bf00      	nop
   1282c:	000127f9 	.word	0x000127f9
   12830:	100003d4 	.word	0x100003d4

00012834 <Status Wait<Uart::Send(unsigned char)::{lambda()#1}>(unsigned long long, Uart::Send(unsigned char)::{lambda()#1})>:
inline Status Wait(uint64_t timeout, F is_done)
   12834:	e92d 4830 	stmdb	sp!, {r4, r5, fp, lr}
   12838:	b088      	sub	sp, #32
   1283a:	4675      	mov	r5, lr
   1283c:	e9cd 0102 	strd	r0, r1, [sp, #8]
   12840:	9201      	str	r2, [sp, #4]
   12842:	462b      	mov	r3, r5
   12844:	4619      	mov	r1, r3
   12846:	4824      	ldr	r0, [pc, #144]	; (128d8 <Status Wait<Uart::Send(unsigned char)::{lambda()#1}>(unsigned long long, Uart::Send(unsigned char)::{lambda()#1})+0xa4>)
   12848:	f000 fbf0 	bl	1302c <__cyg_profile_func_enter>
  uint64_t timeout_time = 0;
   1284c:	f04f 0300 	mov.w	r3, #0
   12850:	f04f 0400 	mov.w	r4, #0
   12854:	e9cd 3406 	strd	r3, r4, [sp, #24]
  if (timeout == kMaxWait)
   12858:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
   1285c:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
   12860:	bf08      	it	eq
   12862:	f1b3 3fff 	cmpeq.w	r3, #4294967295	; 0xffffffff
   12866:	d106      	bne.n	12876 <Status Wait<Uart::Send(unsigned char)::{lambda()#1}>(unsigned long long, Uart::Send(unsigned char)::{lambda()#1})+0x42>
    timeout_time = kMaxWait;
   12868:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1286c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   12870:	e9cd 3406 	strd	r3, r4, [sp, #24]
   12874:	e00b      	b.n	1288e <Status Wait<Uart::Send(unsigned char)::{lambda()#1}>(unsigned long long, Uart::Send(unsigned char)::{lambda()#1})+0x5a>
    timeout_time = Milliseconds() + timeout;
   12876:	f7fd ff15 	bl	106a4 <Milliseconds()>
   1287a:	460a      	mov	r2, r1
   1287c:	4601      	mov	r1, r0
   1287e:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
   12882:	eb13 0b01 	adds.w	fp, r3, r1
   12886:	eb44 0c02 	adc.w	ip, r4, r2
   1288a:	e9cd bc06 	strd	fp, ip, [sp, #24]
  Status status = Status::kTimedOut;
   1288e:	2301      	movs	r3, #1
   12890:	9305      	str	r3, [sp, #20]
  while (Milliseconds() < timeout_time)
   12892:	f7fd ff07 	bl	106a4 <Milliseconds()>
   12896:	460a      	mov	r2, r1
   12898:	4601      	mov	r1, r0
   1289a:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
   1289e:	42a2      	cmp	r2, r4
   128a0:	bf08      	it	eq
   128a2:	4299      	cmpeq	r1, r3
   128a4:	bf34      	ite	cc
   128a6:	2301      	movcc	r3, #1
   128a8:	2300      	movcs	r3, #0
   128aa:	b2db      	uxtb	r3, r3
   128ac:	2b00      	cmp	r3, #0
   128ae:	d008      	beq.n	128c2 <Status Wait<Uart::Send(unsigned char)::{lambda()#1}>(unsigned long long, Uart::Send(unsigned char)::{lambda()#1})+0x8e>
    if (is_done())
   128b0:	ab01      	add	r3, sp, #4
   128b2:	4618      	mov	r0, r3
   128b4:	f7ff fb1a 	bl	11eec <Uart::Send(unsigned char)::{lambda()#1}::operator()() const>
   128b8:	4603      	mov	r3, r0
   128ba:	2b00      	cmp	r3, #0
   128bc:	d0e9      	beq.n	12892 <Status Wait<Uart::Send(unsigned char)::{lambda()#1}>(unsigned long long, Uart::Send(unsigned char)::{lambda()#1})+0x5e>
      status = Status::kSuccess;
   128be:	2300      	movs	r3, #0
   128c0:	9305      	str	r3, [sp, #20]
  return status;
   128c2:	9c05      	ldr	r4, [sp, #20]
   128c4:	462b      	mov	r3, r5
   128c6:	4619      	mov	r1, r3
   128c8:	4803      	ldr	r0, [pc, #12]	; (128d8 <Status Wait<Uart::Send(unsigned char)::{lambda()#1}>(unsigned long long, Uart::Send(unsigned char)::{lambda()#1})+0xa4>)
   128ca:	f000 fbc3 	bl	13054 <__cyg_profile_func_exit>
   128ce:	4623      	mov	r3, r4
}
   128d0:	4618      	mov	r0, r3
   128d2:	b008      	add	sp, #32
   128d4:	e8bd 8830 	ldmia.w	sp!, {r4, r5, fp, pc}
   128d8:	00012835 	.word	0x00012835

000128dc <Status Wait<Uart::Receive(unsigned long)::{lambda()#1}>(unsigned long long, Uart::Receive(unsigned long)::{lambda()#1})>:
inline Status Wait(uint64_t timeout, F is_done)
   128dc:	e92d 4830 	stmdb	sp!, {r4, r5, fp, lr}
   128e0:	b088      	sub	sp, #32
   128e2:	4675      	mov	r5, lr
   128e4:	e9cd 0102 	strd	r0, r1, [sp, #8]
   128e8:	9201      	str	r2, [sp, #4]
   128ea:	462b      	mov	r3, r5
   128ec:	4619      	mov	r1, r3
   128ee:	4824      	ldr	r0, [pc, #144]	; (12980 <Status Wait<Uart::Receive(unsigned long)::{lambda()#1}>(unsigned long long, Uart::Receive(unsigned long)::{lambda()#1})+0xa4>)
   128f0:	f000 fb9c 	bl	1302c <__cyg_profile_func_enter>
  uint64_t timeout_time = 0;
   128f4:	f04f 0300 	mov.w	r3, #0
   128f8:	f04f 0400 	mov.w	r4, #0
   128fc:	e9cd 3406 	strd	r3, r4, [sp, #24]
  if (timeout == kMaxWait)
   12900:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
   12904:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
   12908:	bf08      	it	eq
   1290a:	f1b3 3fff 	cmpeq.w	r3, #4294967295	; 0xffffffff
   1290e:	d106      	bne.n	1291e <Status Wait<Uart::Receive(unsigned long)::{lambda()#1}>(unsigned long long, Uart::Receive(unsigned long)::{lambda()#1})+0x42>
    timeout_time = kMaxWait;
   12910:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   12914:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   12918:	e9cd 3406 	strd	r3, r4, [sp, #24]
   1291c:	e00b      	b.n	12936 <Status Wait<Uart::Receive(unsigned long)::{lambda()#1}>(unsigned long long, Uart::Receive(unsigned long)::{lambda()#1})+0x5a>
    timeout_time = Milliseconds() + timeout;
   1291e:	f7fd fec1 	bl	106a4 <Milliseconds()>
   12922:	460a      	mov	r2, r1
   12924:	4601      	mov	r1, r0
   12926:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
   1292a:	eb13 0b01 	adds.w	fp, r3, r1
   1292e:	eb44 0c02 	adc.w	ip, r4, r2
   12932:	e9cd bc06 	strd	fp, ip, [sp, #24]
  Status status = Status::kTimedOut;
   12936:	2301      	movs	r3, #1
   12938:	9305      	str	r3, [sp, #20]
  while (Milliseconds() < timeout_time)
   1293a:	f7fd feb3 	bl	106a4 <Milliseconds()>
   1293e:	460a      	mov	r2, r1
   12940:	4601      	mov	r1, r0
   12942:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
   12946:	42a2      	cmp	r2, r4
   12948:	bf08      	it	eq
   1294a:	4299      	cmpeq	r1, r3
   1294c:	bf34      	ite	cc
   1294e:	2301      	movcc	r3, #1
   12950:	2300      	movcs	r3, #0
   12952:	b2db      	uxtb	r3, r3
   12954:	2b00      	cmp	r3, #0
   12956:	d008      	beq.n	1296a <Status Wait<Uart::Receive(unsigned long)::{lambda()#1}>(unsigned long long, Uart::Receive(unsigned long)::{lambda()#1})+0x8e>
    if (is_done())
   12958:	ab01      	add	r3, sp, #4
   1295a:	4618      	mov	r0, r3
   1295c:	f7ff fb60 	bl	12020 <Uart::Receive(unsigned long)::{lambda()#1}::operator()() const>
   12960:	4603      	mov	r3, r0
   12962:	2b00      	cmp	r3, #0
   12964:	d0e9      	beq.n	1293a <Status Wait<Uart::Receive(unsigned long)::{lambda()#1}>(unsigned long long, Uart::Receive(unsigned long)::{lambda()#1})+0x5e>
      status = Status::kSuccess;
   12966:	2300      	movs	r3, #0
   12968:	9305      	str	r3, [sp, #20]
  return status;
   1296a:	9c05      	ldr	r4, [sp, #20]
   1296c:	462b      	mov	r3, r5
   1296e:	4619      	mov	r1, r3
   12970:	4803      	ldr	r0, [pc, #12]	; (12980 <Status Wait<Uart::Receive(unsigned long)::{lambda()#1}>(unsigned long long, Uart::Receive(unsigned long)::{lambda()#1})+0xa4>)
   12972:	f000 fb6f 	bl	13054 <__cyg_profile_func_exit>
   12976:	4623      	mov	r3, r4
}
   12978:	4618      	mov	r0, r3
   1297a:	b008      	add	sp, #32
   1297c:	e8bd 8830 	ldmia.w	sp!, {r4, r5, fp, pc}
   12980:	000128dd 	.word	0x000128dd

00012984 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)0>()>:
  static void ClearInterrupts()
   12984:	b510      	push	{r4, lr}
   12986:	b082      	sub	sp, #8
   12988:	4674      	mov	r4, lr
   1298a:	4623      	mov	r3, r4
   1298c:	4619      	mov	r1, r3
   1298e:	4823      	ldr	r0, [pc, #140]	; (12a1c <void Timer::ClearInterrupts<(TimerInterface::TimerPort)0>()+0x98>)
   12990:	f000 fb4c 	bl	1302c <__cyg_profile_func_enter>
    uint8_t channel = util::Value(port);
   12994:	2300      	movs	r3, #0
   12996:	f88d 3007 	strb.w	r3, [sp, #7]
    tim_register[channel]->IR |= (1 << kRegMR0);
   1299a:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1299e:	4a20      	ldr	r2, [pc, #128]	; (12a20 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)0>()+0x9c>)
   129a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   129a4:	681a      	ldr	r2, [r3, #0]
   129a6:	f89d 3007 	ldrb.w	r3, [sp, #7]
   129aa:	491d      	ldr	r1, [pc, #116]	; (12a20 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)0>()+0x9c>)
   129ac:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   129b0:	f042 0201 	orr.w	r2, r2, #1
   129b4:	601a      	str	r2, [r3, #0]
    tim_register[channel]->IR |= (1 << kRegMR1);
   129b6:	f89d 3007 	ldrb.w	r3, [sp, #7]
   129ba:	4a19      	ldr	r2, [pc, #100]	; (12a20 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)0>()+0x9c>)
   129bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   129c0:	681a      	ldr	r2, [r3, #0]
   129c2:	f89d 3007 	ldrb.w	r3, [sp, #7]
   129c6:	4916      	ldr	r1, [pc, #88]	; (12a20 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)0>()+0x9c>)
   129c8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   129cc:	f042 0202 	orr.w	r2, r2, #2
   129d0:	601a      	str	r2, [r3, #0]
    tim_register[channel]->IR |= (1 << kRegMR2);
   129d2:	f89d 3007 	ldrb.w	r3, [sp, #7]
   129d6:	4a12      	ldr	r2, [pc, #72]	; (12a20 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)0>()+0x9c>)
   129d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   129dc:	681a      	ldr	r2, [r3, #0]
   129de:	f89d 3007 	ldrb.w	r3, [sp, #7]
   129e2:	490f      	ldr	r1, [pc, #60]	; (12a20 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)0>()+0x9c>)
   129e4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   129e8:	f042 0204 	orr.w	r2, r2, #4
   129ec:	601a      	str	r2, [r3, #0]
    tim_register[channel]->IR |= (1 << kRegMR3);
   129ee:	f89d 3007 	ldrb.w	r3, [sp, #7]
   129f2:	4a0b      	ldr	r2, [pc, #44]	; (12a20 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)0>()+0x9c>)
   129f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   129f8:	681a      	ldr	r2, [r3, #0]
   129fa:	f89d 3007 	ldrb.w	r3, [sp, #7]
   129fe:	4908      	ldr	r1, [pc, #32]	; (12a20 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)0>()+0x9c>)
   12a00:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   12a04:	f042 0208 	orr.w	r2, r2, #8
   12a08:	601a      	str	r2, [r3, #0]
   12a0a:	4623      	mov	r3, r4
   12a0c:	4619      	mov	r1, r3
   12a0e:	4803      	ldr	r0, [pc, #12]	; (12a1c <void Timer::ClearInterrupts<(TimerInterface::TimerPort)0>()+0x98>)
   12a10:	f000 fb20 	bl	13054 <__cyg_profile_func_exit>
  }
   12a14:	bf00      	nop
   12a16:	b002      	add	sp, #8
   12a18:	bd10      	pop	{r4, pc}
   12a1a:	bf00      	nop
   12a1c:	00012985 	.word	0x00012985
   12a20:	10000060 	.word	0x10000060

00012a24 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)1>()>:
  static void ClearInterrupts()
   12a24:	b510      	push	{r4, lr}
   12a26:	b082      	sub	sp, #8
   12a28:	4674      	mov	r4, lr
   12a2a:	4623      	mov	r3, r4
   12a2c:	4619      	mov	r1, r3
   12a2e:	4823      	ldr	r0, [pc, #140]	; (12abc <void Timer::ClearInterrupts<(TimerInterface::TimerPort)1>()+0x98>)
   12a30:	f000 fafc 	bl	1302c <__cyg_profile_func_enter>
    uint8_t channel = util::Value(port);
   12a34:	2301      	movs	r3, #1
   12a36:	f88d 3007 	strb.w	r3, [sp, #7]
    tim_register[channel]->IR |= (1 << kRegMR0);
   12a3a:	f89d 3007 	ldrb.w	r3, [sp, #7]
   12a3e:	4a20      	ldr	r2, [pc, #128]	; (12ac0 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)1>()+0x9c>)
   12a40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12a44:	681a      	ldr	r2, [r3, #0]
   12a46:	f89d 3007 	ldrb.w	r3, [sp, #7]
   12a4a:	491d      	ldr	r1, [pc, #116]	; (12ac0 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)1>()+0x9c>)
   12a4c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   12a50:	f042 0201 	orr.w	r2, r2, #1
   12a54:	601a      	str	r2, [r3, #0]
    tim_register[channel]->IR |= (1 << kRegMR1);
   12a56:	f89d 3007 	ldrb.w	r3, [sp, #7]
   12a5a:	4a19      	ldr	r2, [pc, #100]	; (12ac0 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)1>()+0x9c>)
   12a5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12a60:	681a      	ldr	r2, [r3, #0]
   12a62:	f89d 3007 	ldrb.w	r3, [sp, #7]
   12a66:	4916      	ldr	r1, [pc, #88]	; (12ac0 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)1>()+0x9c>)
   12a68:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   12a6c:	f042 0202 	orr.w	r2, r2, #2
   12a70:	601a      	str	r2, [r3, #0]
    tim_register[channel]->IR |= (1 << kRegMR2);
   12a72:	f89d 3007 	ldrb.w	r3, [sp, #7]
   12a76:	4a12      	ldr	r2, [pc, #72]	; (12ac0 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)1>()+0x9c>)
   12a78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12a7c:	681a      	ldr	r2, [r3, #0]
   12a7e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   12a82:	490f      	ldr	r1, [pc, #60]	; (12ac0 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)1>()+0x9c>)
   12a84:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   12a88:	f042 0204 	orr.w	r2, r2, #4
   12a8c:	601a      	str	r2, [r3, #0]
    tim_register[channel]->IR |= (1 << kRegMR3);
   12a8e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   12a92:	4a0b      	ldr	r2, [pc, #44]	; (12ac0 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)1>()+0x9c>)
   12a94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12a98:	681a      	ldr	r2, [r3, #0]
   12a9a:	f89d 3007 	ldrb.w	r3, [sp, #7]
   12a9e:	4908      	ldr	r1, [pc, #32]	; (12ac0 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)1>()+0x9c>)
   12aa0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   12aa4:	f042 0208 	orr.w	r2, r2, #8
   12aa8:	601a      	str	r2, [r3, #0]
   12aaa:	4623      	mov	r3, r4
   12aac:	4619      	mov	r1, r3
   12aae:	4803      	ldr	r0, [pc, #12]	; (12abc <void Timer::ClearInterrupts<(TimerInterface::TimerPort)1>()+0x98>)
   12ab0:	f000 fad0 	bl	13054 <__cyg_profile_func_exit>
  }
   12ab4:	bf00      	nop
   12ab6:	b002      	add	sp, #8
   12ab8:	bd10      	pop	{r4, pc}
   12aba:	bf00      	nop
   12abc:	00012a25 	.word	0x00012a25
   12ac0:	10000060 	.word	0x10000060

00012ac4 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)2>()>:
  static void ClearInterrupts()
   12ac4:	b510      	push	{r4, lr}
   12ac6:	b082      	sub	sp, #8
   12ac8:	4674      	mov	r4, lr
   12aca:	4623      	mov	r3, r4
   12acc:	4619      	mov	r1, r3
   12ace:	4823      	ldr	r0, [pc, #140]	; (12b5c <void Timer::ClearInterrupts<(TimerInterface::TimerPort)2>()+0x98>)
   12ad0:	f000 faac 	bl	1302c <__cyg_profile_func_enter>
    uint8_t channel = util::Value(port);
   12ad4:	2302      	movs	r3, #2
   12ad6:	f88d 3007 	strb.w	r3, [sp, #7]
    tim_register[channel]->IR |= (1 << kRegMR0);
   12ada:	f89d 3007 	ldrb.w	r3, [sp, #7]
   12ade:	4a20      	ldr	r2, [pc, #128]	; (12b60 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)2>()+0x9c>)
   12ae0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12ae4:	681a      	ldr	r2, [r3, #0]
   12ae6:	f89d 3007 	ldrb.w	r3, [sp, #7]
   12aea:	491d      	ldr	r1, [pc, #116]	; (12b60 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)2>()+0x9c>)
   12aec:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   12af0:	f042 0201 	orr.w	r2, r2, #1
   12af4:	601a      	str	r2, [r3, #0]
    tim_register[channel]->IR |= (1 << kRegMR1);
   12af6:	f89d 3007 	ldrb.w	r3, [sp, #7]
   12afa:	4a19      	ldr	r2, [pc, #100]	; (12b60 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)2>()+0x9c>)
   12afc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12b00:	681a      	ldr	r2, [r3, #0]
   12b02:	f89d 3007 	ldrb.w	r3, [sp, #7]
   12b06:	4916      	ldr	r1, [pc, #88]	; (12b60 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)2>()+0x9c>)
   12b08:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   12b0c:	f042 0202 	orr.w	r2, r2, #2
   12b10:	601a      	str	r2, [r3, #0]
    tim_register[channel]->IR |= (1 << kRegMR2);
   12b12:	f89d 3007 	ldrb.w	r3, [sp, #7]
   12b16:	4a12      	ldr	r2, [pc, #72]	; (12b60 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)2>()+0x9c>)
   12b18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12b1c:	681a      	ldr	r2, [r3, #0]
   12b1e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   12b22:	490f      	ldr	r1, [pc, #60]	; (12b60 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)2>()+0x9c>)
   12b24:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   12b28:	f042 0204 	orr.w	r2, r2, #4
   12b2c:	601a      	str	r2, [r3, #0]
    tim_register[channel]->IR |= (1 << kRegMR3);
   12b2e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   12b32:	4a0b      	ldr	r2, [pc, #44]	; (12b60 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)2>()+0x9c>)
   12b34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12b38:	681a      	ldr	r2, [r3, #0]
   12b3a:	f89d 3007 	ldrb.w	r3, [sp, #7]
   12b3e:	4908      	ldr	r1, [pc, #32]	; (12b60 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)2>()+0x9c>)
   12b40:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   12b44:	f042 0208 	orr.w	r2, r2, #8
   12b48:	601a      	str	r2, [r3, #0]
   12b4a:	4623      	mov	r3, r4
   12b4c:	4619      	mov	r1, r3
   12b4e:	4803      	ldr	r0, [pc, #12]	; (12b5c <void Timer::ClearInterrupts<(TimerInterface::TimerPort)2>()+0x98>)
   12b50:	f000 fa80 	bl	13054 <__cyg_profile_func_exit>
  }
   12b54:	bf00      	nop
   12b56:	b002      	add	sp, #8
   12b58:	bd10      	pop	{r4, pc}
   12b5a:	bf00      	nop
   12b5c:	00012ac5 	.word	0x00012ac5
   12b60:	10000060 	.word	0x10000060

00012b64 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)3>()>:
  static void ClearInterrupts()
   12b64:	b510      	push	{r4, lr}
   12b66:	b082      	sub	sp, #8
   12b68:	4674      	mov	r4, lr
   12b6a:	4623      	mov	r3, r4
   12b6c:	4619      	mov	r1, r3
   12b6e:	4823      	ldr	r0, [pc, #140]	; (12bfc <void Timer::ClearInterrupts<(TimerInterface::TimerPort)3>()+0x98>)
   12b70:	f000 fa5c 	bl	1302c <__cyg_profile_func_enter>
    uint8_t channel = util::Value(port);
   12b74:	2303      	movs	r3, #3
   12b76:	f88d 3007 	strb.w	r3, [sp, #7]
    tim_register[channel]->IR |= (1 << kRegMR0);
   12b7a:	f89d 3007 	ldrb.w	r3, [sp, #7]
   12b7e:	4a20      	ldr	r2, [pc, #128]	; (12c00 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)3>()+0x9c>)
   12b80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12b84:	681a      	ldr	r2, [r3, #0]
   12b86:	f89d 3007 	ldrb.w	r3, [sp, #7]
   12b8a:	491d      	ldr	r1, [pc, #116]	; (12c00 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)3>()+0x9c>)
   12b8c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   12b90:	f042 0201 	orr.w	r2, r2, #1
   12b94:	601a      	str	r2, [r3, #0]
    tim_register[channel]->IR |= (1 << kRegMR1);
   12b96:	f89d 3007 	ldrb.w	r3, [sp, #7]
   12b9a:	4a19      	ldr	r2, [pc, #100]	; (12c00 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)3>()+0x9c>)
   12b9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12ba0:	681a      	ldr	r2, [r3, #0]
   12ba2:	f89d 3007 	ldrb.w	r3, [sp, #7]
   12ba6:	4916      	ldr	r1, [pc, #88]	; (12c00 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)3>()+0x9c>)
   12ba8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   12bac:	f042 0202 	orr.w	r2, r2, #2
   12bb0:	601a      	str	r2, [r3, #0]
    tim_register[channel]->IR |= (1 << kRegMR2);
   12bb2:	f89d 3007 	ldrb.w	r3, [sp, #7]
   12bb6:	4a12      	ldr	r2, [pc, #72]	; (12c00 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)3>()+0x9c>)
   12bb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12bbc:	681a      	ldr	r2, [r3, #0]
   12bbe:	f89d 3007 	ldrb.w	r3, [sp, #7]
   12bc2:	490f      	ldr	r1, [pc, #60]	; (12c00 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)3>()+0x9c>)
   12bc4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   12bc8:	f042 0204 	orr.w	r2, r2, #4
   12bcc:	601a      	str	r2, [r3, #0]
    tim_register[channel]->IR |= (1 << kRegMR3);
   12bce:	f89d 3007 	ldrb.w	r3, [sp, #7]
   12bd2:	4a0b      	ldr	r2, [pc, #44]	; (12c00 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)3>()+0x9c>)
   12bd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12bd8:	681a      	ldr	r2, [r3, #0]
   12bda:	f89d 3007 	ldrb.w	r3, [sp, #7]
   12bde:	4908      	ldr	r1, [pc, #32]	; (12c00 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)3>()+0x9c>)
   12be0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   12be4:	f042 0208 	orr.w	r2, r2, #8
   12be8:	601a      	str	r2, [r3, #0]
   12bea:	4623      	mov	r3, r4
   12bec:	4619      	mov	r1, r3
   12bee:	4803      	ldr	r0, [pc, #12]	; (12bfc <void Timer::ClearInterrupts<(TimerInterface::TimerPort)3>()+0x98>)
   12bf0:	f000 fa30 	bl	13054 <__cyg_profile_func_exit>
  }
   12bf4:	bf00      	nop
   12bf6:	b002      	add	sp, #8
   12bf8:	bd10      	pop	{r4, pc}
   12bfa:	bf00      	nop
   12bfc:	00012b65 	.word	0x00012b65
   12c00:	10000060 	.word	0x10000060

00012c04 <__static_initialization_and_destruction_0(int, int)>:
#pragma GCC diagnostic pop
    // main() shouldn't return, but if it does, we'll just enter an infinite
    // loop
    Halt();
  }
}
   12c04:	b082      	sub	sp, #8
   12c06:	9001      	str	r0, [sp, #4]
   12c08:	9100      	str	r1, [sp, #0]
   12c0a:	9b01      	ldr	r3, [sp, #4]
   12c0c:	2b01      	cmp	r3, #1
   12c0e:	d15d      	bne.n	12ccc <__static_initialization_and_destruction_0(int, int)+0xc8>
   12c10:	9b00      	ldr	r3, [sp, #0]
   12c12:	f64f 72ff 	movw	r2, #65535	; 0xffff
   12c16:	4293      	cmp	r3, r2
   12c18:	d158      	bne.n	12ccc <__static_initialization_and_destruction_0(int, int)+0xc8>
  inline static volatile uint32_t * match[4][4] = {
   12c1a:	4b2e      	ldr	r3, [pc, #184]	; (12cd4 <__static_initialization_and_destruction_0(int, int)+0xd0>)
   12c1c:	681b      	ldr	r3, [r3, #0]
   12c1e:	f003 0301 	and.w	r3, r3, #1
   12c22:	2b00      	cmp	r3, #0
   12c24:	d152      	bne.n	12ccc <__static_initialization_and_destruction_0(int, int)+0xc8>
   12c26:	4b2b      	ldr	r3, [pc, #172]	; (12cd4 <__static_initialization_and_destruction_0(int, int)+0xd0>)
   12c28:	2201      	movs	r2, #1
   12c2a:	601a      	str	r2, [r3, #0]
    [kTimer0] = { &tim_register[0]->MR0, &tim_register[0]->MR1,
   12c2c:	4b2a      	ldr	r3, [pc, #168]	; (12cd8 <__static_initialization_and_destruction_0(int, int)+0xd4>)
   12c2e:	681b      	ldr	r3, [r3, #0]
   12c30:	3318      	adds	r3, #24
  };
   12c32:	4a2a      	ldr	r2, [pc, #168]	; (12cdc <__static_initialization_and_destruction_0(int, int)+0xd8>)
   12c34:	6013      	str	r3, [r2, #0]
    [kTimer0] = { &tim_register[0]->MR0, &tim_register[0]->MR1,
   12c36:	4b28      	ldr	r3, [pc, #160]	; (12cd8 <__static_initialization_and_destruction_0(int, int)+0xd4>)
   12c38:	681b      	ldr	r3, [r3, #0]
   12c3a:	331c      	adds	r3, #28
  };
   12c3c:	4a27      	ldr	r2, [pc, #156]	; (12cdc <__static_initialization_and_destruction_0(int, int)+0xd8>)
   12c3e:	6053      	str	r3, [r2, #4]
                  &tim_register[0]->MR2, &tim_register[0]->MR3 },
   12c40:	4b25      	ldr	r3, [pc, #148]	; (12cd8 <__static_initialization_and_destruction_0(int, int)+0xd4>)
   12c42:	681b      	ldr	r3, [r3, #0]
   12c44:	3320      	adds	r3, #32
  };
   12c46:	4a25      	ldr	r2, [pc, #148]	; (12cdc <__static_initialization_and_destruction_0(int, int)+0xd8>)
   12c48:	6093      	str	r3, [r2, #8]
                  &tim_register[0]->MR2, &tim_register[0]->MR3 },
   12c4a:	4b23      	ldr	r3, [pc, #140]	; (12cd8 <__static_initialization_and_destruction_0(int, int)+0xd4>)
   12c4c:	681b      	ldr	r3, [r3, #0]
   12c4e:	3324      	adds	r3, #36	; 0x24
  };
   12c50:	4a22      	ldr	r2, [pc, #136]	; (12cdc <__static_initialization_and_destruction_0(int, int)+0xd8>)
   12c52:	60d3      	str	r3, [r2, #12]
    [kTimer1] = { &tim_register[1]->MR0, &tim_register[1]->MR1,
   12c54:	4b20      	ldr	r3, [pc, #128]	; (12cd8 <__static_initialization_and_destruction_0(int, int)+0xd4>)
   12c56:	685b      	ldr	r3, [r3, #4]
   12c58:	3318      	adds	r3, #24
  };
   12c5a:	4a20      	ldr	r2, [pc, #128]	; (12cdc <__static_initialization_and_destruction_0(int, int)+0xd8>)
   12c5c:	6113      	str	r3, [r2, #16]
    [kTimer1] = { &tim_register[1]->MR0, &tim_register[1]->MR1,
   12c5e:	4b1e      	ldr	r3, [pc, #120]	; (12cd8 <__static_initialization_and_destruction_0(int, int)+0xd4>)
   12c60:	685b      	ldr	r3, [r3, #4]
   12c62:	331c      	adds	r3, #28
  };
   12c64:	4a1d      	ldr	r2, [pc, #116]	; (12cdc <__static_initialization_and_destruction_0(int, int)+0xd8>)
   12c66:	6153      	str	r3, [r2, #20]
                  &tim_register[1]->MR2, &tim_register[1]->MR3 },
   12c68:	4b1b      	ldr	r3, [pc, #108]	; (12cd8 <__static_initialization_and_destruction_0(int, int)+0xd4>)
   12c6a:	685b      	ldr	r3, [r3, #4]
   12c6c:	3320      	adds	r3, #32
  };
   12c6e:	4a1b      	ldr	r2, [pc, #108]	; (12cdc <__static_initialization_and_destruction_0(int, int)+0xd8>)
   12c70:	6193      	str	r3, [r2, #24]
                  &tim_register[1]->MR2, &tim_register[1]->MR3 },
   12c72:	4b19      	ldr	r3, [pc, #100]	; (12cd8 <__static_initialization_and_destruction_0(int, int)+0xd4>)
   12c74:	685b      	ldr	r3, [r3, #4]
   12c76:	3324      	adds	r3, #36	; 0x24
  };
   12c78:	4a18      	ldr	r2, [pc, #96]	; (12cdc <__static_initialization_and_destruction_0(int, int)+0xd8>)
   12c7a:	61d3      	str	r3, [r2, #28]
    [kTimer2] = { &tim_register[2]->MR0, &tim_register[2]->MR1,
   12c7c:	4b16      	ldr	r3, [pc, #88]	; (12cd8 <__static_initialization_and_destruction_0(int, int)+0xd4>)
   12c7e:	689b      	ldr	r3, [r3, #8]
   12c80:	3318      	adds	r3, #24
  };
   12c82:	4a16      	ldr	r2, [pc, #88]	; (12cdc <__static_initialization_and_destruction_0(int, int)+0xd8>)
   12c84:	6213      	str	r3, [r2, #32]
    [kTimer2] = { &tim_register[2]->MR0, &tim_register[2]->MR1,
   12c86:	4b14      	ldr	r3, [pc, #80]	; (12cd8 <__static_initialization_and_destruction_0(int, int)+0xd4>)
   12c88:	689b      	ldr	r3, [r3, #8]
   12c8a:	331c      	adds	r3, #28
  };
   12c8c:	4a13      	ldr	r2, [pc, #76]	; (12cdc <__static_initialization_and_destruction_0(int, int)+0xd8>)
   12c8e:	6253      	str	r3, [r2, #36]	; 0x24
                  &tim_register[2]->MR2, &tim_register[2]->MR3 },
   12c90:	4b11      	ldr	r3, [pc, #68]	; (12cd8 <__static_initialization_and_destruction_0(int, int)+0xd4>)
   12c92:	689b      	ldr	r3, [r3, #8]
   12c94:	3320      	adds	r3, #32
  };
   12c96:	4a11      	ldr	r2, [pc, #68]	; (12cdc <__static_initialization_and_destruction_0(int, int)+0xd8>)
   12c98:	6293      	str	r3, [r2, #40]	; 0x28
                  &tim_register[2]->MR2, &tim_register[2]->MR3 },
   12c9a:	4b0f      	ldr	r3, [pc, #60]	; (12cd8 <__static_initialization_and_destruction_0(int, int)+0xd4>)
   12c9c:	689b      	ldr	r3, [r3, #8]
   12c9e:	3324      	adds	r3, #36	; 0x24
  };
   12ca0:	4a0e      	ldr	r2, [pc, #56]	; (12cdc <__static_initialization_and_destruction_0(int, int)+0xd8>)
   12ca2:	62d3      	str	r3, [r2, #44]	; 0x2c
    [kTimer3] = { &tim_register[3]->MR0, &tim_register[3]->MR1,
   12ca4:	4b0c      	ldr	r3, [pc, #48]	; (12cd8 <__static_initialization_and_destruction_0(int, int)+0xd4>)
   12ca6:	68db      	ldr	r3, [r3, #12]
   12ca8:	3318      	adds	r3, #24
  };
   12caa:	4a0c      	ldr	r2, [pc, #48]	; (12cdc <__static_initialization_and_destruction_0(int, int)+0xd8>)
   12cac:	6313      	str	r3, [r2, #48]	; 0x30
    [kTimer3] = { &tim_register[3]->MR0, &tim_register[3]->MR1,
   12cae:	4b0a      	ldr	r3, [pc, #40]	; (12cd8 <__static_initialization_and_destruction_0(int, int)+0xd4>)
   12cb0:	68db      	ldr	r3, [r3, #12]
   12cb2:	331c      	adds	r3, #28
  };
   12cb4:	4a09      	ldr	r2, [pc, #36]	; (12cdc <__static_initialization_and_destruction_0(int, int)+0xd8>)
   12cb6:	6353      	str	r3, [r2, #52]	; 0x34
                  &tim_register[3]->MR2, &tim_register[3]->MR3 }
   12cb8:	4b07      	ldr	r3, [pc, #28]	; (12cd8 <__static_initialization_and_destruction_0(int, int)+0xd4>)
   12cba:	68db      	ldr	r3, [r3, #12]
   12cbc:	3320      	adds	r3, #32
  };
   12cbe:	4a07      	ldr	r2, [pc, #28]	; (12cdc <__static_initialization_and_destruction_0(int, int)+0xd8>)
   12cc0:	6393      	str	r3, [r2, #56]	; 0x38
                  &tim_register[3]->MR2, &tim_register[3]->MR3 }
   12cc2:	4b05      	ldr	r3, [pc, #20]	; (12cd8 <__static_initialization_and_destruction_0(int, int)+0xd4>)
   12cc4:	68db      	ldr	r3, [r3, #12]
   12cc6:	3324      	adds	r3, #36	; 0x24
  };
   12cc8:	4a04      	ldr	r2, [pc, #16]	; (12cdc <__static_initialization_and_destruction_0(int, int)+0xd8>)
   12cca:	63d3      	str	r3, [r2, #60]	; 0x3c
   12ccc:	bf00      	nop
   12cce:	b002      	add	sp, #8
   12cd0:	4770      	bx	lr
   12cd2:	bf00      	nop
   12cd4:	100003e4 	.word	0x100003e4
   12cd8:	10000060 	.word	0x10000060
   12cdc:	10000394 	.word	0x10000394

00012ce0 <_GLOBAL__sub_I_UptimeRTOS>:
   12ce0:	b508      	push	{r3, lr}
   12ce2:	f64f 71ff 	movw	r1, #65535	; 0xffff
   12ce6:	2001      	movs	r0, #1
   12ce8:	f7ff ff8c 	bl	12c04 <__static_initialization_and_destruction_0(int, int)>
   12cec:	bd08      	pop	{r3, pc}
   12cee:	Address 0x0000000000012cee is out of bounds.


00012cf0 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
   12cf0:	b082      	sub	sp, #8
   12cf2:	4603      	mov	r3, r0
   12cf4:	f88d 3007 	strb.w	r3, [sp, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
   12cf8:	f99d 3007 	ldrsb.w	r3, [sp, #7]
   12cfc:	f003 021f 	and.w	r2, r3, #31
   12d00:	4905      	ldr	r1, [pc, #20]	; (12d18 <NVIC_EnableIRQ+0x28>)
   12d02:	f99d 3007 	ldrsb.w	r3, [sp, #7]
   12d06:	095b      	lsrs	r3, r3, #5
   12d08:	2001      	movs	r0, #1
   12d0a:	fa00 f202 	lsl.w	r2, r0, r2
   12d0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   12d12:	bf00      	nop
   12d14:	b002      	add	sp, #8
   12d16:	4770      	bx	lr
   12d18:	e000e100 	.word	0xe000e100

00012d1c <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
   12d1c:	b082      	sub	sp, #8
   12d1e:	4603      	mov	r3, r0
   12d20:	9100      	str	r1, [sp, #0]
   12d22:	f88d 3007 	strb.w	r3, [sp, #7]
  if ((int32_t)(IRQn) < 0)
   12d26:	f99d 3007 	ldrsb.w	r3, [sp, #7]
   12d2a:	2b00      	cmp	r3, #0
   12d2c:	da0c      	bge.n	12d48 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   12d2e:	9b00      	ldr	r3, [sp, #0]
   12d30:	b2da      	uxtb	r2, r3
   12d32:	490d      	ldr	r1, [pc, #52]	; (12d68 <NVIC_SetPriority+0x4c>)
   12d34:	f99d 3007 	ldrsb.w	r3, [sp, #7]
   12d38:	f003 030f 	and.w	r3, r3, #15
   12d3c:	3b04      	subs	r3, #4
   12d3e:	0152      	lsls	r2, r2, #5
   12d40:	b2d2      	uxtb	r2, r2
   12d42:	440b      	add	r3, r1
   12d44:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
   12d46:	e00b      	b.n	12d60 <NVIC_SetPriority+0x44>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   12d48:	9b00      	ldr	r3, [sp, #0]
   12d4a:	b2db      	uxtb	r3, r3
   12d4c:	4a07      	ldr	r2, [pc, #28]	; (12d6c <NVIC_SetPriority+0x50>)
   12d4e:	f99d 1007 	ldrsb.w	r1, [sp, #7]
   12d52:	4608      	mov	r0, r1
   12d54:	015b      	lsls	r3, r3, #5
   12d56:	b2d9      	uxtb	r1, r3
   12d58:	1813      	adds	r3, r2, r0
   12d5a:	460a      	mov	r2, r1
   12d5c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
   12d60:	bf00      	nop
   12d62:	b002      	add	sp, #8
   12d64:	4770      	bx	lr
   12d66:	bf00      	nop
   12d68:	e000ed00 	.word	0xe000ed00
   12d6c:	e000e100 	.word	0xe000e100

00012d70 <InterruptLookupHandler>:
{
   12d70:	b500      	push	{lr}
   12d72:	b085      	sub	sp, #20
  uint8_t active_isr = (SCB->ICSR & 0xFF);
   12d74:	4b12      	ldr	r3, [pc, #72]	; (12dc0 <InterruptLookupHandler+0x50>)
   12d76:	685b      	ldr	r3, [r3, #4]
   12d78:	f88d 300f 	strb.w	r3, [sp, #15]
  IsrPointer isr     = dynamic_isr_vector_table[active_isr];
   12d7c:	f89d 300f 	ldrb.w	r3, [sp, #15]
   12d80:	4a10      	ldr	r2, [pc, #64]	; (12dc4 <InterruptLookupHandler+0x54>)
   12d82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12d86:	9302      	str	r3, [sp, #8]
  SJ2_ASSERT_FATAL(isr != InterruptLookupHandler,
   12d88:	9b02      	ldr	r3, [sp, #8]
   12d8a:	4a0f      	ldr	r2, [pc, #60]	; (12dc8 <InterruptLookupHandler+0x58>)
   12d8c:	4293      	cmp	r3, r2
   12d8e:	d110      	bne.n	12db2 <InterruptLookupHandler+0x42>
   12d90:	f89d 300f 	ldrb.w	r3, [sp, #15]
   12d94:	9300      	str	r3, [sp, #0]
   12d96:	23dd      	movs	r3, #221	; 0xdd
   12d98:	4a0c      	ldr	r2, [pc, #48]	; (12dcc <InterruptLookupHandler+0x5c>)
   12d9a:	490d      	ldr	r1, [pc, #52]	; (12dd0 <InterruptLookupHandler+0x60>)
   12d9c:	480d      	ldr	r0, [pc, #52]	; (12dd4 <InterruptLookupHandler+0x64>)
   12d9e:	f001 fba1 	bl	144e4 <printf>
   12da2:	480d      	ldr	r0, [pc, #52]	; (12dd8 <InterruptLookupHandler+0x68>)
   12da4:	f000 f912 	bl	12fcc <puts>
   12da8:	2100      	movs	r1, #0
   12daa:	2001      	movs	r0, #1
   12dac:	f7fd ff18 	bl	10be0 <debug::PrintBacktrace(bool, void*)>
   12db0:	e7fe      	b.n	12db0 <InterruptLookupHandler+0x40>
  isr();
   12db2:	9b02      	ldr	r3, [sp, #8]
   12db4:	4798      	blx	r3
}
   12db6:	bf00      	nop
   12db8:	b005      	add	sp, #20
   12dba:	f85d fb04 	ldr.w	pc, [sp], #4
   12dbe:	bf00      	nop
   12dc0:	e000ed00 	.word	0xe000ed00
   12dc4:	100000ec 	.word	0x100000ec
   12dc8:	00012d71 	.word	0x00012d71
   12dcc:	00017f54 	.word	0x00017f54
   12dd0:	00017f44 	.word	0x00017f44
   12dd4:	00017de8 	.word	0x00017de8
   12dd8:	00017e94 	.word	0x00017e94

00012ddc <RegisterIsr(IRQn, void (*)(), bool, long)>:
{
   12ddc:	b500      	push	{lr}
   12dde:	b085      	sub	sp, #20
   12de0:	9102      	str	r1, [sp, #8]
   12de2:	9301      	str	r3, [sp, #4]
   12de4:	4603      	mov	r3, r0
   12de6:	f88d 300f 	strb.w	r3, [sp, #15]
   12dea:	4613      	mov	r3, r2
   12dec:	f88d 300e 	strb.w	r3, [sp, #14]
  dynamic_isr_vector_table[irq + kIrqOffset] = isr;
   12df0:	f99d 300f 	ldrsb.w	r3, [sp, #15]
   12df4:	3310      	adds	r3, #16
   12df6:	490f      	ldr	r1, [pc, #60]	; (12e34 <RegisterIsr(IRQn, void (*)(), bool, long)+0x58>)
   12df8:	9a02      	ldr	r2, [sp, #8]
   12dfa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  if (enable_interrupt && irq >= 0)
   12dfe:	f89d 300e 	ldrb.w	r3, [sp, #14]
   12e02:	2b00      	cmp	r3, #0
   12e04:	d008      	beq.n	12e18 <RegisterIsr(IRQn, void (*)(), bool, long)+0x3c>
   12e06:	f99d 300f 	ldrsb.w	r3, [sp, #15]
   12e0a:	2b00      	cmp	r3, #0
   12e0c:	db04      	blt.n	12e18 <RegisterIsr(IRQn, void (*)(), bool, long)+0x3c>
    NVIC_EnableIRQ(irq);
   12e0e:	f99d 300f 	ldrsb.w	r3, [sp, #15]
   12e12:	4618      	mov	r0, r3
   12e14:	f7ff ff6c 	bl	12cf0 <NVIC_EnableIRQ>
  if (priority > -1)
   12e18:	9b01      	ldr	r3, [sp, #4]
   12e1a:	2b00      	cmp	r3, #0
   12e1c:	db06      	blt.n	12e2c <RegisterIsr(IRQn, void (*)(), bool, long)+0x50>
    NVIC_SetPriority(irq, priority);
   12e1e:	9a01      	ldr	r2, [sp, #4]
   12e20:	f99d 300f 	ldrsb.w	r3, [sp, #15]
   12e24:	4611      	mov	r1, r2
   12e26:	4618      	mov	r0, r3
   12e28:	f7ff ff78 	bl	12d1c <NVIC_SetPriority>
}
   12e2c:	bf00      	nop
   12e2e:	b005      	add	sp, #20
   12e30:	f85d fb04 	ldr.w	pc, [sp], #4
   12e34:	100000ec 	.word	0x100000ec

00012e38 <GetRegistersFromStack>:
{
   12e38:	b500      	push	{lr}
   12e3a:	b08d      	sub	sp, #52	; 0x34
   12e3c:	9003      	str	r0, [sp, #12]
  volatile uint32_t r0  = fault_stack_address[0];
   12e3e:	9b03      	ldr	r3, [sp, #12]
   12e40:	681b      	ldr	r3, [r3, #0]
   12e42:	930b      	str	r3, [sp, #44]	; 0x2c
  volatile uint32_t r1  = fault_stack_address[1];
   12e44:	9b03      	ldr	r3, [sp, #12]
   12e46:	685b      	ldr	r3, [r3, #4]
   12e48:	930a      	str	r3, [sp, #40]	; 0x28
  volatile uint32_t r2  = fault_stack_address[2];
   12e4a:	9b03      	ldr	r3, [sp, #12]
   12e4c:	689b      	ldr	r3, [r3, #8]
   12e4e:	9309      	str	r3, [sp, #36]	; 0x24
  volatile uint32_t r3  = fault_stack_address[3];
   12e50:	9b03      	ldr	r3, [sp, #12]
   12e52:	68db      	ldr	r3, [r3, #12]
   12e54:	9308      	str	r3, [sp, #32]
  volatile uint32_t r12 = fault_stack_address[4];
   12e56:	9b03      	ldr	r3, [sp, #12]
   12e58:	691b      	ldr	r3, [r3, #16]
   12e5a:	9307      	str	r3, [sp, #28]
  volatile uint32_t lr = fault_stack_address[5];
   12e5c:	9b03      	ldr	r3, [sp, #12]
   12e5e:	695b      	ldr	r3, [r3, #20]
   12e60:	9306      	str	r3, [sp, #24]
  volatile uint32_t pc = fault_stack_address[6];
   12e62:	9b03      	ldr	r3, [sp, #12]
   12e64:	699b      	ldr	r3, [r3, #24]
   12e66:	9305      	str	r3, [sp, #20]
  volatile uint32_t psr = fault_stack_address[7];
   12e68:	9b03      	ldr	r3, [sp, #12]
   12e6a:	69db      	ldr	r3, [r3, #28]
   12e6c:	9304      	str	r3, [sp, #16]
  printf(SJ2_BACKGROUND_RED "Hard Fault Exception Occurred!\n" SJ2_COLOR_RESET);
   12e6e:	480d      	ldr	r0, [pc, #52]	; (12ea4 <GetRegistersFromStack+0x6c>)
   12e70:	f001 fb38 	bl	144e4 <printf>
  printf("r0: 0x%08" PRIX32 ", r1: 0x%08" PRIX32
   12e74:	990b      	ldr	r1, [sp, #44]	; 0x2c
   12e76:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   12e78:	9809      	ldr	r0, [sp, #36]	; 0x24
   12e7a:	9b08      	ldr	r3, [sp, #32]
   12e7c:	9300      	str	r3, [sp, #0]
   12e7e:	4603      	mov	r3, r0
   12e80:	4809      	ldr	r0, [pc, #36]	; (12ea8 <GetRegistersFromStack+0x70>)
   12e82:	f001 fb2f 	bl	144e4 <printf>
  printf("r12: 0x%08" PRIX32 ", lr: 0x%08" PRIX32
   12e86:	9907      	ldr	r1, [sp, #28]
   12e88:	9a06      	ldr	r2, [sp, #24]
   12e8a:	9805      	ldr	r0, [sp, #20]
   12e8c:	9b04      	ldr	r3, [sp, #16]
   12e8e:	9300      	str	r3, [sp, #0]
   12e90:	4603      	mov	r3, r0
   12e92:	4806      	ldr	r0, [pc, #24]	; (12eac <GetRegistersFromStack+0x74>)
   12e94:	f001 fb26 	bl	144e4 <printf>
  debug::PrintBacktrace(true, reinterpret_cast<void *>(pc));
   12e98:	9b05      	ldr	r3, [sp, #20]
   12e9a:	4619      	mov	r1, r3
   12e9c:	2001      	movs	r0, #1
   12e9e:	f7fd fe9f 	bl	10be0 <debug::PrintBacktrace(bool, void*)>
   12ea2:	e7fe      	b.n	12ea2 <GetRegistersFromStack+0x6a>
   12ea4:	00017eac 	.word	0x00017eac
   12ea8:	00017ed8 	.word	0x00017ed8
   12eac:	00017f0c 	.word	0x00017f0c

00012eb0 <FirmwareStdOut(int)>:
}
Stdout out = HostWrite;
Stdin in   = HostRead;
#else
int FirmwareStdOut(int data)
{
   12eb0:	b530      	push	{r4, r5, lr}
   12eb2:	b083      	sub	sp, #12
   12eb4:	4675      	mov	r5, lr
   12eb6:	9001      	str	r0, [sp, #4]
   12eb8:	462b      	mov	r3, r5
   12eba:	4619      	mov	r1, r3
   12ebc:	4809      	ldr	r0, [pc, #36]	; (12ee4 <FirmwareStdOut(int)+0x34>)
   12ebe:	f000 f8b5 	bl	1302c <__cyg_profile_func_enter>
  uart0.Send(static_cast<uint8_t>(data));
   12ec2:	9b01      	ldr	r3, [sp, #4]
   12ec4:	b2db      	uxtb	r3, r3
   12ec6:	4619      	mov	r1, r3
   12ec8:	4807      	ldr	r0, [pc, #28]	; (12ee8 <FirmwareStdOut(int)+0x38>)
   12eca:	f7ff f835 	bl	11f38 <Uart::Send(unsigned char)>
  return 1;
   12ece:	2401      	movs	r4, #1
   12ed0:	462b      	mov	r3, r5
   12ed2:	4619      	mov	r1, r3
   12ed4:	4803      	ldr	r0, [pc, #12]	; (12ee4 <FirmwareStdOut(int)+0x34>)
   12ed6:	f000 f8bd 	bl	13054 <__cyg_profile_func_exit>
   12eda:	4623      	mov	r3, r4
}
   12edc:	4618      	mov	r0, r3
   12ede:	b003      	add	sp, #12
   12ee0:	bd30      	pop	{r4, r5, pc}
   12ee2:	bf00      	nop
   12ee4:	00012eb1 	.word	0x00012eb1
   12ee8:	100000c0 	.word	0x100000c0

00012eec <_exit>:
  }
  // Dummy implementation of exit with return code placed into
  // Arm register r3
  // NOLINTNEXTLINE(readability-identifier-naming)
  void _exit([[maybe_unused]] int rc)
  {
   12eec:	b500      	push	{lr}
   12eee:	b083      	sub	sp, #12
   12ef0:	4673      	mov	r3, lr
   12ef2:	9001      	str	r0, [sp, #4]
   12ef4:	4619      	mov	r1, r3
   12ef6:	4802      	ldr	r0, [pc, #8]	; (12f00 <_exit+0x14>)
   12ef8:	f000 f898 	bl	1302c <__cyg_profile_func_enter>
    while (1)
    {
      continue;
   12efc:	bf00      	nop
    while (1)
   12efe:	e7fd      	b.n	12efc <_exit+0x10>
   12f00:	00012eed 	.word	0x00012eed

00012f04 <_getpid>:
    }
  }
  // Dummy implementation of getpid
  // NOLINTNEXTLINE(readability-identifier-naming)
  int _getpid()
  {
   12f04:	b538      	push	{r3, r4, r5, lr}
   12f06:	4675      	mov	r5, lr
   12f08:	462b      	mov	r3, r5
   12f0a:	4619      	mov	r1, r3
   12f0c:	4805      	ldr	r0, [pc, #20]	; (12f24 <_getpid+0x20>)
   12f0e:	f000 f88d 	bl	1302c <__cyg_profile_func_enter>
    return 1;
   12f12:	2401      	movs	r4, #1
   12f14:	462b      	mov	r3, r5
   12f16:	4619      	mov	r1, r3
   12f18:	4802      	ldr	r0, [pc, #8]	; (12f24 <_getpid+0x20>)
   12f1a:	f000 f89b 	bl	13054 <__cyg_profile_func_exit>
   12f1e:	4623      	mov	r3, r4
  }
   12f20:	4618      	mov	r0, r3
   12f22:	bd38      	pop	{r3, r4, r5, pc}
   12f24:	00012f05 	.word	0x00012f05

00012f28 <_kill>:
  // Dummy implementation of kill
  // NOLINTNEXTLINE(readability-identifier-naming)
  int _kill(int, int)
  {
   12f28:	b530      	push	{r4, r5, lr}
   12f2a:	b083      	sub	sp, #12
   12f2c:	4675      	mov	r5, lr
   12f2e:	9001      	str	r0, [sp, #4]
   12f30:	9100      	str	r1, [sp, #0]
   12f32:	462b      	mov	r3, r5
   12f34:	4619      	mov	r1, r3
   12f36:	4807      	ldr	r0, [pc, #28]	; (12f54 <_kill+0x2c>)
   12f38:	f000 f878 	bl	1302c <__cyg_profile_func_enter>
    return -1;
   12f3c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   12f40:	462b      	mov	r3, r5
   12f42:	4619      	mov	r1, r3
   12f44:	4803      	ldr	r0, [pc, #12]	; (12f54 <_kill+0x2c>)
   12f46:	f000 f885 	bl	13054 <__cyg_profile_func_exit>
   12f4a:	4623      	mov	r3, r4
  }
   12f4c:	4618      	mov	r0, r3
   12f4e:	b003      	add	sp, #12
   12f50:	bd30      	pop	{r4, r5, pc}
   12f52:	bf00      	nop
   12f54:	00012f29 	.word	0x00012f29

00012f58 <_putchar>:
    }
    return length;
  }
  // Needed by third party printf library
  void _putchar(char character)  // NOLINT
  {
   12f58:	b510      	push	{r4, lr}
   12f5a:	b082      	sub	sp, #8
   12f5c:	4674      	mov	r4, lr
   12f5e:	4603      	mov	r3, r0
   12f60:	f88d 3007 	strb.w	r3, [sp, #7]
   12f64:	4623      	mov	r3, r4
   12f66:	4619      	mov	r1, r3
   12f68:	4808      	ldr	r0, [pc, #32]	; (12f8c <_putchar+0x34>)
   12f6a:	f000 f85f 	bl	1302c <__cyg_profile_func_enter>
    out(character);
   12f6e:	4b08      	ldr	r3, [pc, #32]	; (12f90 <_putchar+0x38>)
   12f70:	681b      	ldr	r3, [r3, #0]
   12f72:	f89d 2007 	ldrb.w	r2, [sp, #7]
   12f76:	4610      	mov	r0, r2
   12f78:	4798      	blx	r3
   12f7a:	4623      	mov	r3, r4
   12f7c:	4619      	mov	r1, r3
   12f7e:	4803      	ldr	r0, [pc, #12]	; (12f8c <_putchar+0x34>)
   12f80:	f000 f868 	bl	13054 <__cyg_profile_func_exit>
  }
   12f84:	bf00      	nop
   12f86:	b002      	add	sp, #8
   12f88:	bd10      	pop	{r4, pc}
   12f8a:	bf00      	nop
   12f8c:	00012f59 	.word	0x00012f59
   12f90:	100001d0 	.word	0x100001d0

00012f94 <putchar>:

  // Overload default libnano putchar() with a more optimal version that does
  // not use dynamic memory
  int putchar(int character)  // NOLINT
  {
   12f94:	b530      	push	{r4, r5, lr}
   12f96:	b083      	sub	sp, #12
   12f98:	4674      	mov	r4, lr
   12f9a:	9001      	str	r0, [sp, #4]
   12f9c:	4623      	mov	r3, r4
   12f9e:	4619      	mov	r1, r3
   12fa0:	4808      	ldr	r0, [pc, #32]	; (12fc4 <putchar+0x30>)
   12fa2:	f000 f843 	bl	1302c <__cyg_profile_func_enter>
    return out(character);
   12fa6:	4b08      	ldr	r3, [pc, #32]	; (12fc8 <putchar+0x34>)
   12fa8:	681b      	ldr	r3, [r3, #0]
   12faa:	9801      	ldr	r0, [sp, #4]
   12fac:	4798      	blx	r3
   12fae:	4605      	mov	r5, r0
   12fb0:	4623      	mov	r3, r4
   12fb2:	4619      	mov	r1, r3
   12fb4:	4803      	ldr	r0, [pc, #12]	; (12fc4 <putchar+0x30>)
   12fb6:	f000 f84d 	bl	13054 <__cyg_profile_func_exit>
   12fba:	462b      	mov	r3, r5
  }
   12fbc:	4618      	mov	r0, r3
   12fbe:	b003      	add	sp, #12
   12fc0:	bd30      	pop	{r4, r5, pc}
   12fc2:	bf00      	nop
   12fc4:	00012f95 	.word	0x00012f95
   12fc8:	100001d0 	.word	0x100001d0

00012fcc <puts>:

  // Overload default libnano puts() with a more optimal version that does
  // not use dynamic memory
  int puts(const char * str)  // NOLINT
  {
   12fcc:	b530      	push	{r4, r5, lr}
   12fce:	b085      	sub	sp, #20
   12fd0:	4675      	mov	r5, lr
   12fd2:	9001      	str	r0, [sp, #4]
   12fd4:	462b      	mov	r3, r5
   12fd6:	4619      	mov	r1, r3
   12fd8:	4812      	ldr	r0, [pc, #72]	; (13024 <puts+0x58>)
   12fda:	f000 f827 	bl	1302c <__cyg_profile_func_enter>
    int i;
    for (i = 0; str[i] != '\0'; i++)
   12fde:	2300      	movs	r3, #0
   12fe0:	9303      	str	r3, [sp, #12]
   12fe2:	9b03      	ldr	r3, [sp, #12]
   12fe4:	9a01      	ldr	r2, [sp, #4]
   12fe6:	4413      	add	r3, r2
   12fe8:	781b      	ldrb	r3, [r3, #0]
   12fea:	2b00      	cmp	r3, #0
   12fec:	d00b      	beq.n	13006 <puts+0x3a>
    {
      out(str[i]);
   12fee:	4b0e      	ldr	r3, [pc, #56]	; (13028 <puts+0x5c>)
   12ff0:	681b      	ldr	r3, [r3, #0]
   12ff2:	9a03      	ldr	r2, [sp, #12]
   12ff4:	9901      	ldr	r1, [sp, #4]
   12ff6:	440a      	add	r2, r1
   12ff8:	7812      	ldrb	r2, [r2, #0]
   12ffa:	4610      	mov	r0, r2
   12ffc:	4798      	blx	r3
    for (i = 0; str[i] != '\0'; i++)
   12ffe:	9b03      	ldr	r3, [sp, #12]
   13000:	3301      	adds	r3, #1
   13002:	9303      	str	r3, [sp, #12]
   13004:	e7ed      	b.n	12fe2 <puts+0x16>
    }
    out('\n');
   13006:	4b08      	ldr	r3, [pc, #32]	; (13028 <puts+0x5c>)
   13008:	681b      	ldr	r3, [r3, #0]
   1300a:	200a      	movs	r0, #10
   1300c:	4798      	blx	r3
    return i;
   1300e:	9c03      	ldr	r4, [sp, #12]
   13010:	462b      	mov	r3, r5
   13012:	4619      	mov	r1, r3
   13014:	4803      	ldr	r0, [pc, #12]	; (13024 <puts+0x58>)
   13016:	f000 f81d 	bl	13054 <__cyg_profile_func_exit>
   1301a:	4623      	mov	r3, r4
  }
   1301c:	4618      	mov	r0, r3
   1301e:	b005      	add	sp, #20
   13020:	bd30      	pop	{r4, r5, pc}
   13022:	bf00      	nop
   13024:	00012fcd 	.word	0x00012fcd
   13028:	100001d0 	.word	0x100001d0

0001302c <__cyg_profile_func_enter>:
  // =============================
  void * stack_trace[config::kBacktraceDepth] = { nullptr };
  size_t stack_depth = 0;

  void __cyg_profile_func_enter(void *, void * call_site)  // NOLINT
  {
   1302c:	b082      	sub	sp, #8
   1302e:	9001      	str	r0, [sp, #4]
   13030:	9100      	str	r1, [sp, #0]
    stack_trace[stack_depth++] = call_site;
   13032:	9a00      	ldr	r2, [sp, #0]
   13034:	4b05      	ldr	r3, [pc, #20]	; (1304c <__cyg_profile_func_enter+0x20>)
   13036:	681b      	ldr	r3, [r3, #0]
   13038:	1c59      	adds	r1, r3, #1
   1303a:	4804      	ldr	r0, [pc, #16]	; (1304c <__cyg_profile_func_enter+0x20>)
   1303c:	6001      	str	r1, [r0, #0]
   1303e:	4904      	ldr	r1, [pc, #16]	; (13050 <__cyg_profile_func_enter+0x24>)
   13040:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
   13044:	bf00      	nop
   13046:	b002      	add	sp, #8
   13048:	4770      	bx	lr
   1304a:	bf00      	nop
   1304c:	100004e8 	.word	0x100004e8
   13050:	100003e8 	.word	0x100003e8

00013054 <__cyg_profile_func_exit>:

  void __cyg_profile_func_exit(void *, void *)  // NOLINT
  {
   13054:	b082      	sub	sp, #8
   13056:	9001      	str	r0, [sp, #4]
   13058:	9100      	str	r1, [sp, #0]
    stack_depth--;
   1305a:	4b04      	ldr	r3, [pc, #16]	; (1306c <__cyg_profile_func_exit+0x18>)
   1305c:	681b      	ldr	r3, [r3, #0]
   1305e:	3b01      	subs	r3, #1
   13060:	4a02      	ldr	r2, [pc, #8]	; (1306c <__cyg_profile_func_exit+0x18>)
   13062:	6013      	str	r3, [r2, #0]
  }
   13064:	bf00      	nop
   13066:	b002      	add	sp, #8
   13068:	4770      	bx	lr
   1306a:	bf00      	nop
   1306c:	100004e8 	.word	0x100004e8

00013070 <GetStackTrace()>:
}

void ** GetStackTrace()
{
   13070:	b538      	push	{r3, r4, r5, lr}
   13072:	4675      	mov	r5, lr
   13074:	462b      	mov	r3, r5
   13076:	4619      	mov	r1, r3
   13078:	4805      	ldr	r0, [pc, #20]	; (13090 <GetStackTrace()+0x20>)
   1307a:	f7ff ffd7 	bl	1302c <__cyg_profile_func_enter>
  return stack_trace;
   1307e:	4c05      	ldr	r4, [pc, #20]	; (13094 <GetStackTrace()+0x24>)
   13080:	462b      	mov	r3, r5
   13082:	4619      	mov	r1, r3
   13084:	4802      	ldr	r0, [pc, #8]	; (13090 <GetStackTrace()+0x20>)
   13086:	f7ff ffe5 	bl	13054 <__cyg_profile_func_exit>
   1308a:	4623      	mov	r3, r4
}
   1308c:	4618      	mov	r0, r3
   1308e:	bd38      	pop	{r3, r4, r5, pc}
   13090:	00013071 	.word	0x00013071
   13094:	100003e8 	.word	0x100003e8

00013098 <GetStackDepth()>:

size_t GetStackDepth()
{
   13098:	b538      	push	{r3, r4, r5, lr}
   1309a:	4675      	mov	r5, lr
   1309c:	462b      	mov	r3, r5
   1309e:	4619      	mov	r1, r3
   130a0:	4806      	ldr	r0, [pc, #24]	; (130bc <GetStackDepth()+0x24>)
   130a2:	f7ff ffc3 	bl	1302c <__cyg_profile_func_enter>
  return stack_depth;
   130a6:	4b06      	ldr	r3, [pc, #24]	; (130c0 <GetStackDepth()+0x28>)
   130a8:	681c      	ldr	r4, [r3, #0]
   130aa:	462b      	mov	r3, r5
   130ac:	4619      	mov	r1, r3
   130ae:	4803      	ldr	r0, [pc, #12]	; (130bc <GetStackDepth()+0x24>)
   130b0:	f7ff ffd0 	bl	13054 <__cyg_profile_func_exit>
   130b4:	4623      	mov	r3, r4
}
   130b6:	4618      	mov	r0, r3
   130b8:	bd38      	pop	{r3, r4, r5, pc}
   130ba:	bf00      	nop
   130bc:	00013099 	.word	0x00013099
   130c0:	100004e8 	.word	0x100004e8

000130c4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
   130c4:	b510      	push	{r4, lr}
   130c6:	b084      	sub	sp, #16
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
   130c8:	4b29      	ldr	r3, [pc, #164]	; (13170 <vTaskSwitchContext+0xac>)
   130ca:	681b      	ldr	r3, [r3, #0]
   130cc:	2b00      	cmp	r3, #0
   130ce:	d003      	beq.n	130d8 <vTaskSwitchContext+0x14>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
   130d0:	4b28      	ldr	r3, [pc, #160]	; (13174 <vTaskSwitchContext+0xb0>)
   130d2:	2201      	movs	r2, #1
   130d4:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
   130d6:	e047      	b.n	13168 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
   130d8:	4b26      	ldr	r3, [pc, #152]	; (13174 <vTaskSwitchContext+0xb0>)
   130da:	2200      	movs	r2, #0
   130dc:	601a      	str	r2, [r3, #0]
					ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
   130de:	f7ff fa8d 	bl	125fc <UptimeRTOS>
   130e2:	4603      	mov	r3, r0
   130e4:	460c      	mov	r4, r1
   130e6:	461a      	mov	r2, r3
   130e8:	4b23      	ldr	r3, [pc, #140]	; (13178 <vTaskSwitchContext+0xb4>)
   130ea:	601a      	str	r2, [r3, #0]
				if( ulTotalRunTime > ulTaskSwitchedInTime )
   130ec:	4b22      	ldr	r3, [pc, #136]	; (13178 <vTaskSwitchContext+0xb4>)
   130ee:	681a      	ldr	r2, [r3, #0]
   130f0:	4b22      	ldr	r3, [pc, #136]	; (1317c <vTaskSwitchContext+0xb8>)
   130f2:	681b      	ldr	r3, [r3, #0]
   130f4:	429a      	cmp	r2, r3
   130f6:	d909      	bls.n	1310c <vTaskSwitchContext+0x48>
					pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
   130f8:	4b21      	ldr	r3, [pc, #132]	; (13180 <vTaskSwitchContext+0xbc>)
   130fa:	681b      	ldr	r3, [r3, #0]
   130fc:	6d59      	ldr	r1, [r3, #84]	; 0x54
   130fe:	4a1e      	ldr	r2, [pc, #120]	; (13178 <vTaskSwitchContext+0xb4>)
   13100:	6810      	ldr	r0, [r2, #0]
   13102:	4a1e      	ldr	r2, [pc, #120]	; (1317c <vTaskSwitchContext+0xb8>)
   13104:	6812      	ldr	r2, [r2, #0]
   13106:	1a82      	subs	r2, r0, r2
   13108:	440a      	add	r2, r1
   1310a:	655a      	str	r2, [r3, #84]	; 0x54
				ulTaskSwitchedInTime = ulTotalRunTime;
   1310c:	4b1a      	ldr	r3, [pc, #104]	; (13178 <vTaskSwitchContext+0xb4>)
   1310e:	681b      	ldr	r3, [r3, #0]
   13110:	4a1a      	ldr	r2, [pc, #104]	; (1317c <vTaskSwitchContext+0xb8>)
   13112:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
   13114:	4b1b      	ldr	r3, [pc, #108]	; (13184 <vTaskSwitchContext+0xc0>)
   13116:	681b      	ldr	r3, [r3, #0]
   13118:	9301      	str	r3, [sp, #4]
	/* Generic helper function. */
	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitmap )
	{
	uint8_t ucReturn;

		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
   1311a:	9b01      	ldr	r3, [sp, #4]
   1311c:	fab3 f383 	clz	r3, r3
   13120:	f88d 3003 	strb.w	r3, [sp, #3]
		return ucReturn;
   13124:	f89d 3003 	ldrb.w	r3, [sp, #3]
   13128:	f1c3 031f 	rsb	r3, r3, #31
   1312c:	9303      	str	r3, [sp, #12]
   1312e:	9a03      	ldr	r2, [sp, #12]
   13130:	4613      	mov	r3, r2
   13132:	009b      	lsls	r3, r3, #2
   13134:	4413      	add	r3, r2
   13136:	009b      	lsls	r3, r3, #2
   13138:	4a13      	ldr	r2, [pc, #76]	; (13188 <vTaskSwitchContext+0xc4>)
   1313a:	4413      	add	r3, r2
   1313c:	9302      	str	r3, [sp, #8]
   1313e:	9b02      	ldr	r3, [sp, #8]
   13140:	685b      	ldr	r3, [r3, #4]
   13142:	685a      	ldr	r2, [r3, #4]
   13144:	9b02      	ldr	r3, [sp, #8]
   13146:	605a      	str	r2, [r3, #4]
   13148:	9b02      	ldr	r3, [sp, #8]
   1314a:	685a      	ldr	r2, [r3, #4]
   1314c:	9b02      	ldr	r3, [sp, #8]
   1314e:	3308      	adds	r3, #8
   13150:	429a      	cmp	r2, r3
   13152:	d104      	bne.n	1315e <vTaskSwitchContext+0x9a>
   13154:	9b02      	ldr	r3, [sp, #8]
   13156:	685b      	ldr	r3, [r3, #4]
   13158:	685a      	ldr	r2, [r3, #4]
   1315a:	9b02      	ldr	r3, [sp, #8]
   1315c:	605a      	str	r2, [r3, #4]
   1315e:	9b02      	ldr	r3, [sp, #8]
   13160:	685b      	ldr	r3, [r3, #4]
   13162:	68db      	ldr	r3, [r3, #12]
   13164:	4a06      	ldr	r2, [pc, #24]	; (13180 <vTaskSwitchContext+0xbc>)
   13166:	6013      	str	r3, [r2, #0]
}
   13168:	bf00      	nop
   1316a:	b004      	add	sp, #16
   1316c:	bd10      	pop	{r4, pc}
   1316e:	bf00      	nop
   13170:	1000055c 	.word	0x1000055c
   13174:	10000558 	.word	0x10000558
   13178:	10000564 	.word	0x10000564
   1317c:	10000560 	.word	0x10000560
   13180:	100004ec 	.word	0x100004ec
   13184:	10000554 	.word	0x10000554
   13188:	100004f0 	.word	0x100004f0
   1318c:	ffffffff 	.word	0xffffffff

00013190 <vPortSVCHandler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
   13190:	4b07      	ldr	r3, [pc, #28]	; (131b0 <pxCurrentTCBConst2>)
   13192:	6819      	ldr	r1, [r3, #0]
   13194:	6808      	ldr	r0, [r1, #0]
   13196:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1319a:	f380 8809 	msr	PSP, r0
   1319e:	f3bf 8f6f 	isb	sy
   131a2:	f04f 0000 	mov.w	r0, #0
   131a6:	f380 8811 	msr	BASEPRI, r0
   131aa:	4770      	bx	lr
   131ac:	f3af 8000 	nop.w

000131b0 <pxCurrentTCBConst2>:
   131b0:	100004ec 	.word	0x100004ec
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
   131b4:	bf00      	nop
   131b6:	bf00      	nop
   131b8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   131bc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

000131c0 <xPortPendSVHandler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
   131c0:	f3ef 8009 	mrs	r0, PSP
   131c4:	f3bf 8f6f 	isb	sy
   131c8:	4b15      	ldr	r3, [pc, #84]	; (13220 <pxCurrentTCBConst>)
   131ca:	681a      	ldr	r2, [r3, #0]
   131cc:	f01e 0f10 	tst.w	lr, #16
   131d0:	bf08      	it	eq
   131d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
   131d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   131da:	6010      	str	r0, [r2, #0]
   131dc:	e92d 0009 	stmdb	sp!, {r0, r3}
   131e0:	f04f 0028 	mov.w	r0, #40	; 0x28
   131e4:	f380 8811 	msr	BASEPRI, r0
   131e8:	f3bf 8f4f 	dsb	sy
   131ec:	f3bf 8f6f 	isb	sy
   131f0:	f7ff ff68 	bl	130c4 <vTaskSwitchContext>
   131f4:	f04f 0000 	mov.w	r0, #0
   131f8:	f380 8811 	msr	BASEPRI, r0
   131fc:	bc09      	pop	{r0, r3}
   131fe:	6819      	ldr	r1, [r3, #0]
   13200:	6808      	ldr	r0, [r1, #0]
   13202:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13206:	f01e 0f10 	tst.w	lr, #16
   1320a:	bf08      	it	eq
   1320c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
   13210:	f380 8809 	msr	PSP, r0
   13214:	f3bf 8f6f 	isb	sy
   13218:	4770      	bx	lr
   1321a:	bf00      	nop
   1321c:	f3af 8000 	nop.w

00013220 <pxCurrentTCBConst>:
   13220:	100004ec 	.word	0x100004ec
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
   13224:	bf00      	nop
   13226:	bf00      	nop

00013228 <_out_null(char, void*, unsigned int, unsigned int)>:
}


// internal null output
static inline void _out_null(char character, void* buffer, size_t idx, size_t maxlen)
{
   13228:	b510      	push	{r4, lr}
   1322a:	b084      	sub	sp, #16
   1322c:	4674      	mov	r4, lr
   1322e:	9102      	str	r1, [sp, #8]
   13230:	9201      	str	r2, [sp, #4]
   13232:	9300      	str	r3, [sp, #0]
   13234:	4603      	mov	r3, r0
   13236:	f88d 300f 	strb.w	r3, [sp, #15]
   1323a:	4623      	mov	r3, r4
   1323c:	4619      	mov	r1, r3
   1323e:	4805      	ldr	r0, [pc, #20]	; (13254 <_out_null(char, void*, unsigned int, unsigned int)+0x2c>)
   13240:	f7ff fef4 	bl	1302c <__cyg_profile_func_enter>
   13244:	4623      	mov	r3, r4
   13246:	4619      	mov	r1, r3
   13248:	4802      	ldr	r0, [pc, #8]	; (13254 <_out_null(char, void*, unsigned int, unsigned int)+0x2c>)
   1324a:	f7ff ff03 	bl	13054 <__cyg_profile_func_exit>
  (void)character; (void)buffer; (void)idx; (void)maxlen;
}
   1324e:	bf00      	nop
   13250:	b004      	add	sp, #16
   13252:	bd10      	pop	{r4, pc}
   13254:	00013229 	.word	0x00013229

00013258 <_out_char(char, void*, unsigned int, unsigned int)>:


// internal _putchar wrapper
static inline void _out_char(char character, void* buffer, size_t idx, size_t maxlen)
{
   13258:	b510      	push	{r4, lr}
   1325a:	b084      	sub	sp, #16
   1325c:	4674      	mov	r4, lr
   1325e:	9102      	str	r1, [sp, #8]
   13260:	9201      	str	r2, [sp, #4]
   13262:	9300      	str	r3, [sp, #0]
   13264:	4603      	mov	r3, r0
   13266:	f88d 300f 	strb.w	r3, [sp, #15]
   1326a:	4623      	mov	r3, r4
   1326c:	4619      	mov	r1, r3
   1326e:	480a      	ldr	r0, [pc, #40]	; (13298 <_out_char(char, void*, unsigned int, unsigned int)+0x40>)
   13270:	f7ff fedc 	bl	1302c <__cyg_profile_func_enter>
  (void)buffer; (void)idx; (void)maxlen;
  if (character) {
   13274:	f89d 300f 	ldrb.w	r3, [sp, #15]
   13278:	2b00      	cmp	r3, #0
   1327a:	d004      	beq.n	13286 <_out_char(char, void*, unsigned int, unsigned int)+0x2e>
    _putchar(character);
   1327c:	f89d 300f 	ldrb.w	r3, [sp, #15]
   13280:	4618      	mov	r0, r3
   13282:	f7ff fe69 	bl	12f58 <_putchar>
   13286:	4623      	mov	r3, r4
   13288:	4619      	mov	r1, r3
   1328a:	4803      	ldr	r0, [pc, #12]	; (13298 <_out_char(char, void*, unsigned int, unsigned int)+0x40>)
   1328c:	f7ff fee2 	bl	13054 <__cyg_profile_func_exit>
  }
}
   13290:	bf00      	nop
   13292:	b004      	add	sp, #16
   13294:	bd10      	pop	{r4, pc}
   13296:	bf00      	nop
   13298:	00013259 	.word	0x00013259

0001329c <_strlen(char const*)>:


// internal strlen
// \return The length of the string (excluding the terminating 0)
static inline unsigned int _strlen(const char* str)
{
   1329c:	b530      	push	{r4, r5, lr}
   1329e:	b085      	sub	sp, #20
   132a0:	4674      	mov	r4, lr
   132a2:	9001      	str	r0, [sp, #4]
   132a4:	4623      	mov	r3, r4
   132a6:	4619      	mov	r1, r3
   132a8:	480c      	ldr	r0, [pc, #48]	; (132dc <_strlen(char const*)+0x40>)
   132aa:	f7ff febf 	bl	1302c <__cyg_profile_func_enter>
  const char* s;
  for (s = str; *s; ++s);
   132ae:	9b01      	ldr	r3, [sp, #4]
   132b0:	9303      	str	r3, [sp, #12]
   132b2:	9b03      	ldr	r3, [sp, #12]
   132b4:	781b      	ldrb	r3, [r3, #0]
   132b6:	2b00      	cmp	r3, #0
   132b8:	d003      	beq.n	132c2 <_strlen(char const*)+0x26>
   132ba:	9b03      	ldr	r3, [sp, #12]
   132bc:	3301      	adds	r3, #1
   132be:	9303      	str	r3, [sp, #12]
   132c0:	e7f7      	b.n	132b2 <_strlen(char const*)+0x16>
  return (unsigned int)(s - str);
   132c2:	9a03      	ldr	r2, [sp, #12]
   132c4:	9b01      	ldr	r3, [sp, #4]
   132c6:	1ad3      	subs	r3, r2, r3
   132c8:	461d      	mov	r5, r3
   132ca:	4623      	mov	r3, r4
   132cc:	4619      	mov	r1, r3
   132ce:	4803      	ldr	r0, [pc, #12]	; (132dc <_strlen(char const*)+0x40>)
   132d0:	f7ff fec0 	bl	13054 <__cyg_profile_func_exit>
   132d4:	462b      	mov	r3, r5
}
   132d6:	4618      	mov	r0, r3
   132d8:	b005      	add	sp, #20
   132da:	bd30      	pop	{r4, r5, pc}
   132dc:	0001329d 	.word	0x0001329d

000132e0 <_is_digit(char)>:


// internal test if char is a digit (0-9)
// \return true if char is a digit
static inline bool _is_digit(char ch)
{
   132e0:	b530      	push	{r4, r5, lr}
   132e2:	b083      	sub	sp, #12
   132e4:	4675      	mov	r5, lr
   132e6:	4603      	mov	r3, r0
   132e8:	f88d 3007 	strb.w	r3, [sp, #7]
   132ec:	462b      	mov	r3, r5
   132ee:	4619      	mov	r1, r3
   132f0:	480b      	ldr	r0, [pc, #44]	; (13320 <_is_digit(char)+0x40>)
   132f2:	f7ff fe9b 	bl	1302c <__cyg_profile_func_enter>
  return (ch >= '0') && (ch <= '9');
   132f6:	f89d 3007 	ldrb.w	r3, [sp, #7]
   132fa:	2b2f      	cmp	r3, #47	; 0x2f
   132fc:	d905      	bls.n	1330a <_is_digit(char)+0x2a>
   132fe:	f89d 3007 	ldrb.w	r3, [sp, #7]
   13302:	2b39      	cmp	r3, #57	; 0x39
   13304:	d801      	bhi.n	1330a <_is_digit(char)+0x2a>
   13306:	2401      	movs	r4, #1
   13308:	e000      	b.n	1330c <_is_digit(char)+0x2c>
   1330a:	2400      	movs	r4, #0
   1330c:	462b      	mov	r3, r5
   1330e:	4619      	mov	r1, r3
   13310:	4803      	ldr	r0, [pc, #12]	; (13320 <_is_digit(char)+0x40>)
   13312:	f7ff fe9f 	bl	13054 <__cyg_profile_func_exit>
   13316:	4623      	mov	r3, r4
}
   13318:	4618      	mov	r0, r3
   1331a:	b003      	add	sp, #12
   1331c:	bd30      	pop	{r4, r5, pc}
   1331e:	bf00      	nop
   13320:	000132e1 	.word	0x000132e1

00013324 <_atoi(char const**)>:


// internal ASCII string to unsigned int conversion
static unsigned int _atoi(const char** str)
{
   13324:	b530      	push	{r4, r5, lr}
   13326:	b085      	sub	sp, #20
   13328:	4675      	mov	r5, lr
   1332a:	9001      	str	r0, [sp, #4]
   1332c:	462b      	mov	r3, r5
   1332e:	4619      	mov	r1, r3
   13330:	4813      	ldr	r0, [pc, #76]	; (13380 <_atoi(char const**)+0x5c>)
   13332:	f7ff fe7b 	bl	1302c <__cyg_profile_func_enter>
  unsigned int i = 0U;
   13336:	2300      	movs	r3, #0
   13338:	9303      	str	r3, [sp, #12]
  while (_is_digit(**str)) {
   1333a:	9b01      	ldr	r3, [sp, #4]
   1333c:	681b      	ldr	r3, [r3, #0]
   1333e:	781b      	ldrb	r3, [r3, #0]
   13340:	4618      	mov	r0, r3
   13342:	f7ff ffcd 	bl	132e0 <_is_digit(char)>
   13346:	4603      	mov	r3, r0
   13348:	2b00      	cmp	r3, #0
   1334a:	d00f      	beq.n	1336c <_atoi(char const**)+0x48>
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
   1334c:	9a03      	ldr	r2, [sp, #12]
   1334e:	4613      	mov	r3, r2
   13350:	009b      	lsls	r3, r3, #2
   13352:	4413      	add	r3, r2
   13354:	005b      	lsls	r3, r3, #1
   13356:	4618      	mov	r0, r3
   13358:	9b01      	ldr	r3, [sp, #4]
   1335a:	681b      	ldr	r3, [r3, #0]
   1335c:	1c59      	adds	r1, r3, #1
   1335e:	9a01      	ldr	r2, [sp, #4]
   13360:	6011      	str	r1, [r2, #0]
   13362:	781b      	ldrb	r3, [r3, #0]
   13364:	4403      	add	r3, r0
   13366:	3b30      	subs	r3, #48	; 0x30
   13368:	9303      	str	r3, [sp, #12]
  while (_is_digit(**str)) {
   1336a:	e7e6      	b.n	1333a <_atoi(char const**)+0x16>
  }
  return i;
   1336c:	9c03      	ldr	r4, [sp, #12]
   1336e:	462b      	mov	r3, r5
   13370:	4619      	mov	r1, r3
   13372:	4803      	ldr	r0, [pc, #12]	; (13380 <_atoi(char const**)+0x5c>)
   13374:	f7ff fe6e 	bl	13054 <__cyg_profile_func_exit>
   13378:	4623      	mov	r3, r4
}
   1337a:	4618      	mov	r0, r3
   1337c:	b005      	add	sp, #20
   1337e:	bd30      	pop	{r4, r5, pc}
   13380:	00013325 	.word	0x00013325

00013384 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)>:


// internal itoa format
static size_t _ntoa_format(out_fct_type out, char* buffer, size_t idx, size_t maxlen, char* buf, size_t len, bool negative, unsigned int base, unsigned int prec, unsigned int width, unsigned int flags)
{
   13384:	b530      	push	{r4, r5, lr}
   13386:	b089      	sub	sp, #36	; 0x24
   13388:	4675      	mov	r5, lr
   1338a:	9003      	str	r0, [sp, #12]
   1338c:	9102      	str	r1, [sp, #8]
   1338e:	9201      	str	r2, [sp, #4]
   13390:	9300      	str	r3, [sp, #0]
   13392:	462b      	mov	r3, r5
   13394:	4619      	mov	r1, r3
   13396:	4891      	ldr	r0, [pc, #580]	; (135dc <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x258>)
   13398:	f7ff fe48 	bl	1302c <__cyg_profile_func_enter>
  const size_t start_idx = idx;
   1339c:	9b01      	ldr	r3, [sp, #4]
   1339e:	9305      	str	r3, [sp, #20]

  // pad leading zeros
  while (!(flags & FLAGS_LEFT) && (len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
   133a0:	9b12      	ldr	r3, [sp, #72]	; 0x48
   133a2:	f003 0302 	and.w	r3, r3, #2
   133a6:	2b00      	cmp	r3, #0
   133a8:	d10e      	bne.n	133c8 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x44>
   133aa:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   133ac:	9b10      	ldr	r3, [sp, #64]	; 0x40
   133ae:	429a      	cmp	r2, r3
   133b0:	d20a      	bcs.n	133c8 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x44>
   133b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   133b4:	2b1f      	cmp	r3, #31
   133b6:	d807      	bhi.n	133c8 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x44>
    buf[len++] = '0';
   133b8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   133ba:	1c5a      	adds	r2, r3, #1
   133bc:	920d      	str	r2, [sp, #52]	; 0x34
   133be:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   133c0:	4413      	add	r3, r2
   133c2:	2230      	movs	r2, #48	; 0x30
   133c4:	701a      	strb	r2, [r3, #0]
  while (!(flags & FLAGS_LEFT) && (len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
   133c6:	e7eb      	b.n	133a0 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1c>
  }
  while (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
   133c8:	9b12      	ldr	r3, [sp, #72]	; 0x48
   133ca:	f003 0302 	and.w	r3, r3, #2
   133ce:	2b00      	cmp	r3, #0
   133d0:	d113      	bne.n	133fa <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x76>
   133d2:	9b12      	ldr	r3, [sp, #72]	; 0x48
   133d4:	f003 0301 	and.w	r3, r3, #1
   133d8:	2b00      	cmp	r3, #0
   133da:	d00e      	beq.n	133fa <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x76>
   133dc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   133de:	9b11      	ldr	r3, [sp, #68]	; 0x44
   133e0:	429a      	cmp	r2, r3
   133e2:	d20a      	bcs.n	133fa <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x76>
   133e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   133e6:	2b1f      	cmp	r3, #31
   133e8:	d807      	bhi.n	133fa <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x76>
    buf[len++] = '0';
   133ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   133ec:	1c5a      	adds	r2, r3, #1
   133ee:	920d      	str	r2, [sp, #52]	; 0x34
   133f0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   133f2:	4413      	add	r3, r2
   133f4:	2230      	movs	r2, #48	; 0x30
   133f6:	701a      	strb	r2, [r3, #0]
  while (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
   133f8:	e7e6      	b.n	133c8 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x44>
  }

  // handle hash
  if (flags & FLAGS_HASH) {
   133fa:	9b12      	ldr	r3, [sp, #72]	; 0x48
   133fc:	f003 0310 	and.w	r3, r3, #16
   13400:	2b00      	cmp	r3, #0
   13402:	d058      	beq.n	134b6 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x132>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
   13404:	9b12      	ldr	r3, [sp, #72]	; 0x48
   13406:	f403 6380 	and.w	r3, r3, #1024	; 0x400
   1340a:	2b00      	cmp	r3, #0
   1340c:	d116      	bne.n	1343c <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xb8>
   1340e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   13410:	2b00      	cmp	r3, #0
   13412:	d013      	beq.n	1343c <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xb8>
   13414:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   13416:	9b10      	ldr	r3, [sp, #64]	; 0x40
   13418:	429a      	cmp	r2, r3
   1341a:	d003      	beq.n	13424 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xa0>
   1341c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   1341e:	9b11      	ldr	r3, [sp, #68]	; 0x44
   13420:	429a      	cmp	r2, r3
   13422:	d10b      	bne.n	1343c <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xb8>
      len--;
   13424:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   13426:	3b01      	subs	r3, #1
   13428:	930d      	str	r3, [sp, #52]	; 0x34
      if (len && (base == 16U)) {
   1342a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1342c:	2b00      	cmp	r3, #0
   1342e:	d005      	beq.n	1343c <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xb8>
   13430:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   13432:	2b10      	cmp	r3, #16
   13434:	d102      	bne.n	1343c <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xb8>
        len--;
   13436:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   13438:	3b01      	subs	r3, #1
   1343a:	930d      	str	r3, [sp, #52]	; 0x34
      }
    }
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
   1343c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1343e:	2b10      	cmp	r3, #16
   13440:	d10f      	bne.n	13462 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xde>
   13442:	9b12      	ldr	r3, [sp, #72]	; 0x48
   13444:	f003 0320 	and.w	r3, r3, #32
   13448:	2b00      	cmp	r3, #0
   1344a:	d10a      	bne.n	13462 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xde>
   1344c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1344e:	2b1f      	cmp	r3, #31
   13450:	d807      	bhi.n	13462 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xde>
      buf[len++] = 'x';
   13452:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   13454:	1c5a      	adds	r2, r3, #1
   13456:	920d      	str	r2, [sp, #52]	; 0x34
   13458:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1345a:	4413      	add	r3, r2
   1345c:	2278      	movs	r2, #120	; 0x78
   1345e:	701a      	strb	r2, [r3, #0]
   13460:	e01f      	b.n	134a2 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x11e>
    }
    else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
   13462:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   13464:	2b10      	cmp	r3, #16
   13466:	d10f      	bne.n	13488 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x104>
   13468:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1346a:	f003 0320 	and.w	r3, r3, #32
   1346e:	2b00      	cmp	r3, #0
   13470:	d00a      	beq.n	13488 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x104>
   13472:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   13474:	2b1f      	cmp	r3, #31
   13476:	d807      	bhi.n	13488 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x104>
      buf[len++] = 'X';
   13478:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1347a:	1c5a      	adds	r2, r3, #1
   1347c:	920d      	str	r2, [sp, #52]	; 0x34
   1347e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   13480:	4413      	add	r3, r2
   13482:	2258      	movs	r2, #88	; 0x58
   13484:	701a      	strb	r2, [r3, #0]
   13486:	e00c      	b.n	134a2 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x11e>
    }
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
   13488:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1348a:	2b02      	cmp	r3, #2
   1348c:	d109      	bne.n	134a2 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x11e>
   1348e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   13490:	2b1f      	cmp	r3, #31
   13492:	d806      	bhi.n	134a2 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x11e>
      buf[len++] = 'b';
   13494:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   13496:	1c5a      	adds	r2, r3, #1
   13498:	920d      	str	r2, [sp, #52]	; 0x34
   1349a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1349c:	4413      	add	r3, r2
   1349e:	2262      	movs	r2, #98	; 0x62
   134a0:	701a      	strb	r2, [r3, #0]
    }
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
   134a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   134a4:	2b1f      	cmp	r3, #31
   134a6:	d806      	bhi.n	134b6 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x132>
      buf[len++] = '0';
   134a8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   134aa:	1c5a      	adds	r2, r3, #1
   134ac:	920d      	str	r2, [sp, #52]	; 0x34
   134ae:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   134b0:	4413      	add	r3, r2
   134b2:	2230      	movs	r2, #48	; 0x30
   134b4:	701a      	strb	r2, [r3, #0]
    }
  }

  // handle sign
  if (len && (len == width) && (negative || (flags & FLAGS_PLUS) || (flags & FLAGS_SPACE))) {
   134b6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   134b8:	2b00      	cmp	r3, #0
   134ba:	d014      	beq.n	134e6 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x162>
   134bc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   134be:	9b11      	ldr	r3, [sp, #68]	; 0x44
   134c0:	429a      	cmp	r2, r3
   134c2:	d110      	bne.n	134e6 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x162>
   134c4:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
   134c8:	2b00      	cmp	r3, #0
   134ca:	d109      	bne.n	134e0 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x15c>
   134cc:	9b12      	ldr	r3, [sp, #72]	; 0x48
   134ce:	f003 0304 	and.w	r3, r3, #4
   134d2:	2b00      	cmp	r3, #0
   134d4:	d104      	bne.n	134e0 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x15c>
   134d6:	9b12      	ldr	r3, [sp, #72]	; 0x48
   134d8:	f003 0308 	and.w	r3, r3, #8
   134dc:	2b00      	cmp	r3, #0
   134de:	d002      	beq.n	134e6 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x162>
    len--;
   134e0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   134e2:	3b01      	subs	r3, #1
   134e4:	930d      	str	r3, [sp, #52]	; 0x34
  }
  if (len < PRINTF_NTOA_BUFFER_SIZE) {
   134e6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   134e8:	2b1f      	cmp	r3, #31
   134ea:	d824      	bhi.n	13536 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1b2>
    if (negative) {
   134ec:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
   134f0:	2b00      	cmp	r3, #0
   134f2:	d007      	beq.n	13504 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x180>
      buf[len++] = '-';
   134f4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   134f6:	1c5a      	adds	r2, r3, #1
   134f8:	920d      	str	r2, [sp, #52]	; 0x34
   134fa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   134fc:	4413      	add	r3, r2
   134fe:	222d      	movs	r2, #45	; 0x2d
   13500:	701a      	strb	r2, [r3, #0]
   13502:	e018      	b.n	13536 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1b2>
    }
    else if (flags & FLAGS_PLUS) {
   13504:	9b12      	ldr	r3, [sp, #72]	; 0x48
   13506:	f003 0304 	and.w	r3, r3, #4
   1350a:	2b00      	cmp	r3, #0
   1350c:	d007      	beq.n	1351e <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x19a>
      buf[len++] = '+';  // ignore the space if the '+' exists
   1350e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   13510:	1c5a      	adds	r2, r3, #1
   13512:	920d      	str	r2, [sp, #52]	; 0x34
   13514:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   13516:	4413      	add	r3, r2
   13518:	222b      	movs	r2, #43	; 0x2b
   1351a:	701a      	strb	r2, [r3, #0]
   1351c:	e00b      	b.n	13536 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1b2>
    }
    else if (flags & FLAGS_SPACE) {
   1351e:	9b12      	ldr	r3, [sp, #72]	; 0x48
   13520:	f003 0308 	and.w	r3, r3, #8
   13524:	2b00      	cmp	r3, #0
   13526:	d006      	beq.n	13536 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1b2>
      buf[len++] = ' ';
   13528:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1352a:	1c5a      	adds	r2, r3, #1
   1352c:	920d      	str	r2, [sp, #52]	; 0x34
   1352e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   13530:	4413      	add	r3, r2
   13532:	2220      	movs	r2, #32
   13534:	701a      	strb	r2, [r3, #0]
    }
  }

  // pad spaces up to given width
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
   13536:	9b12      	ldr	r3, [sp, #72]	; 0x48
   13538:	f003 0302 	and.w	r3, r3, #2
   1353c:	2b00      	cmp	r3, #0
   1353e:	d116      	bne.n	1356e <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1ea>
   13540:	9b12      	ldr	r3, [sp, #72]	; 0x48
   13542:	f003 0301 	and.w	r3, r3, #1
   13546:	2b00      	cmp	r3, #0
   13548:	d111      	bne.n	1356e <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1ea>
    for (size_t i = len; i < width; i++) {
   1354a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1354c:	9307      	str	r3, [sp, #28]
   1354e:	9a07      	ldr	r2, [sp, #28]
   13550:	9b11      	ldr	r3, [sp, #68]	; 0x44
   13552:	429a      	cmp	r2, r3
   13554:	d20b      	bcs.n	1356e <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1ea>
      out(' ', buffer, idx++, maxlen);
   13556:	9a01      	ldr	r2, [sp, #4]
   13558:	1c53      	adds	r3, r2, #1
   1355a:	9301      	str	r3, [sp, #4]
   1355c:	9c03      	ldr	r4, [sp, #12]
   1355e:	9b00      	ldr	r3, [sp, #0]
   13560:	9902      	ldr	r1, [sp, #8]
   13562:	2020      	movs	r0, #32
   13564:	47a0      	blx	r4
    for (size_t i = len; i < width; i++) {
   13566:	9b07      	ldr	r3, [sp, #28]
   13568:	3301      	adds	r3, #1
   1356a:	9307      	str	r3, [sp, #28]
   1356c:	e7ef      	b.n	1354e <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1ca>
    }
  }

  // reverse string
  for (size_t i = 0U; i < len; i++) {
   1356e:	2300      	movs	r3, #0
   13570:	9306      	str	r3, [sp, #24]
   13572:	9a06      	ldr	r2, [sp, #24]
   13574:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   13576:	429a      	cmp	r2, r3
   13578:	d211      	bcs.n	1359e <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x21a>
    out(buf[len - i - 1U], buffer, idx++, maxlen);
   1357a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   1357c:	9b06      	ldr	r3, [sp, #24]
   1357e:	1ad3      	subs	r3, r2, r3
   13580:	3b01      	subs	r3, #1
   13582:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   13584:	4413      	add	r3, r2
   13586:	7818      	ldrb	r0, [r3, #0]
   13588:	9a01      	ldr	r2, [sp, #4]
   1358a:	1c53      	adds	r3, r2, #1
   1358c:	9301      	str	r3, [sp, #4]
   1358e:	9c03      	ldr	r4, [sp, #12]
   13590:	9b00      	ldr	r3, [sp, #0]
   13592:	9902      	ldr	r1, [sp, #8]
   13594:	47a0      	blx	r4
  for (size_t i = 0U; i < len; i++) {
   13596:	9b06      	ldr	r3, [sp, #24]
   13598:	3301      	adds	r3, #1
   1359a:	9306      	str	r3, [sp, #24]
   1359c:	e7e9      	b.n	13572 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1ee>
  }

  // append pad spaces up to given width
  if (flags & FLAGS_LEFT) {
   1359e:	9b12      	ldr	r3, [sp, #72]	; 0x48
   135a0:	f003 0302 	and.w	r3, r3, #2
   135a4:	2b00      	cmp	r3, #0
   135a6:	d00e      	beq.n	135c6 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x242>
    while (idx - start_idx < width) {
   135a8:	9a01      	ldr	r2, [sp, #4]
   135aa:	9b05      	ldr	r3, [sp, #20]
   135ac:	1ad3      	subs	r3, r2, r3
   135ae:	9a11      	ldr	r2, [sp, #68]	; 0x44
   135b0:	429a      	cmp	r2, r3
   135b2:	d908      	bls.n	135c6 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x242>
      out(' ', buffer, idx++, maxlen);
   135b4:	9a01      	ldr	r2, [sp, #4]
   135b6:	1c53      	adds	r3, r2, #1
   135b8:	9301      	str	r3, [sp, #4]
   135ba:	9c03      	ldr	r4, [sp, #12]
   135bc:	9b00      	ldr	r3, [sp, #0]
   135be:	9902      	ldr	r1, [sp, #8]
   135c0:	2020      	movs	r0, #32
   135c2:	47a0      	blx	r4
    while (idx - start_idx < width) {
   135c4:	e7f0      	b.n	135a8 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x224>
    }
  }

  return idx;
   135c6:	9c01      	ldr	r4, [sp, #4]
   135c8:	462b      	mov	r3, r5
   135ca:	4619      	mov	r1, r3
   135cc:	4803      	ldr	r0, [pc, #12]	; (135dc <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x258>)
   135ce:	f7ff fd41 	bl	13054 <__cyg_profile_func_exit>
   135d2:	4623      	mov	r3, r4
}
   135d4:	4618      	mov	r0, r3
   135d6:	b009      	add	sp, #36	; 0x24
   135d8:	bd30      	pop	{r4, r5, pc}
   135da:	bf00      	nop
   135dc:	00013385 	.word	0x00013385

000135e0 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)>:


// internal itoa for 'long' type
static size_t _ntoa_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long value, bool negative, unsigned long base, unsigned int prec, unsigned int width, unsigned int flags)
{
   135e0:	b530      	push	{r4, r5, lr}
   135e2:	b097      	sub	sp, #92	; 0x5c
   135e4:	4674      	mov	r4, lr
   135e6:	900b      	str	r0, [sp, #44]	; 0x2c
   135e8:	910a      	str	r1, [sp, #40]	; 0x28
   135ea:	9209      	str	r2, [sp, #36]	; 0x24
   135ec:	9308      	str	r3, [sp, #32]
   135ee:	4623      	mov	r3, r4
   135f0:	4619      	mov	r1, r3
   135f2:	4833      	ldr	r0, [pc, #204]	; (136c0 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0xe0>)
   135f4:	f7ff fd1a 	bl	1302c <__cyg_profile_func_enter>
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
   135f8:	2300      	movs	r3, #0
   135fa:	9315      	str	r3, [sp, #84]	; 0x54

  // no hash for 0 values
  if (!value) {
   135fc:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   135fe:	2b00      	cmp	r3, #0
   13600:	d103      	bne.n	1360a <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x2a>
    flags &= ~FLAGS_HASH;
   13602:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   13604:	f023 0310 	bic.w	r3, r3, #16
   13608:	931f      	str	r3, [sp, #124]	; 0x7c
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
   1360a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   1360c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
   13610:	2b00      	cmp	r3, #0
   13612:	d002      	beq.n	1361a <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x3a>
   13614:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   13616:	2b00      	cmp	r3, #0
   13618:	d033      	beq.n	13682 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0xa2>
    do {
      const char digit = (char)(value % base);
   1361a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   1361c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
   1361e:	fbb3 f2f2 	udiv	r2, r3, r2
   13622:	991c      	ldr	r1, [sp, #112]	; 0x70
   13624:	fb01 f202 	mul.w	r2, r1, r2
   13628:	1a9b      	subs	r3, r3, r2
   1362a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
   1362e:	f89d 3053 	ldrb.w	r3, [sp, #83]	; 0x53
   13632:	2b09      	cmp	r3, #9
   13634:	d804      	bhi.n	13640 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x60>
   13636:	f89d 3053 	ldrb.w	r3, [sp, #83]	; 0x53
   1363a:	3330      	adds	r3, #48	; 0x30
   1363c:	b2da      	uxtb	r2, r3
   1363e:	e00d      	b.n	1365c <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x7c>
   13640:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   13642:	f003 0320 	and.w	r3, r3, #32
   13646:	2b00      	cmp	r3, #0
   13648:	d001      	beq.n	1364e <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x6e>
   1364a:	2241      	movs	r2, #65	; 0x41
   1364c:	e000      	b.n	13650 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x70>
   1364e:	2261      	movs	r2, #97	; 0x61
   13650:	f89d 3053 	ldrb.w	r3, [sp, #83]	; 0x53
   13654:	4413      	add	r3, r2
   13656:	b2db      	uxtb	r3, r3
   13658:	3b0a      	subs	r3, #10
   1365a:	b2da      	uxtb	r2, r3
   1365c:	9b15      	ldr	r3, [sp, #84]	; 0x54
   1365e:	1c59      	adds	r1, r3, #1
   13660:	9115      	str	r1, [sp, #84]	; 0x54
   13662:	a916      	add	r1, sp, #88	; 0x58
   13664:	440b      	add	r3, r1
   13666:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
   1366a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   1366c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
   1366e:	fbb2 f3f3 	udiv	r3, r2, r3
   13672:	931a      	str	r3, [sp, #104]	; 0x68
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
   13674:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   13676:	2b00      	cmp	r3, #0
   13678:	d003      	beq.n	13682 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0xa2>
   1367a:	9b15      	ldr	r3, [sp, #84]	; 0x54
   1367c:	2b1f      	cmp	r3, #31
   1367e:	d800      	bhi.n	13682 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0xa2>
    do {
   13680:	e7cb      	b.n	1361a <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x3a>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
   13682:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   13684:	9306      	str	r3, [sp, #24]
   13686:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   13688:	9305      	str	r3, [sp, #20]
   1368a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   1368c:	9304      	str	r3, [sp, #16]
   1368e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
   13690:	9303      	str	r3, [sp, #12]
   13692:	f89d 306c 	ldrb.w	r3, [sp, #108]	; 0x6c
   13696:	9302      	str	r3, [sp, #8]
   13698:	9b15      	ldr	r3, [sp, #84]	; 0x54
   1369a:	9301      	str	r3, [sp, #4]
   1369c:	ab0c      	add	r3, sp, #48	; 0x30
   1369e:	9300      	str	r3, [sp, #0]
   136a0:	9b08      	ldr	r3, [sp, #32]
   136a2:	9a09      	ldr	r2, [sp, #36]	; 0x24
   136a4:	990a      	ldr	r1, [sp, #40]	; 0x28
   136a6:	980b      	ldr	r0, [sp, #44]	; 0x2c
   136a8:	f7ff fe6c 	bl	13384 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)>
   136ac:	4605      	mov	r5, r0
   136ae:	4623      	mov	r3, r4
   136b0:	4619      	mov	r1, r3
   136b2:	4803      	ldr	r0, [pc, #12]	; (136c0 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0xe0>)
   136b4:	f7ff fcce 	bl	13054 <__cyg_profile_func_exit>
   136b8:	462b      	mov	r3, r5
}
   136ba:	4618      	mov	r0, r3
   136bc:	b017      	add	sp, #92	; 0x5c
   136be:	bd30      	pop	{r4, r5, pc}
   136c0:	000135e1 	.word	0x000135e1

000136c4 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)>:


// internal itoa for 'long long' type
#if defined(PRINTF_SUPPORT_LONG_LONG)
static size_t _ntoa_long_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long long value, bool negative, unsigned long long base, unsigned int prec, unsigned int width, unsigned int flags)
{
   136c4:	b530      	push	{r4, r5, lr}
   136c6:	b097      	sub	sp, #92	; 0x5c
   136c8:	4675      	mov	r5, lr
   136ca:	900b      	str	r0, [sp, #44]	; 0x2c
   136cc:	910a      	str	r1, [sp, #40]	; 0x28
   136ce:	9209      	str	r2, [sp, #36]	; 0x24
   136d0:	9308      	str	r3, [sp, #32]
   136d2:	462b      	mov	r3, r5
   136d4:	4619      	mov	r1, r3
   136d6:	4837      	ldr	r0, [pc, #220]	; (137b4 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0xf0>)
   136d8:	f7ff fca8 	bl	1302c <__cyg_profile_func_enter>
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
   136dc:	2300      	movs	r3, #0
   136de:	9315      	str	r3, [sp, #84]	; 0x54

  // no hash for 0 values
  if (!value) {
   136e0:	e9dd 341a 	ldrd	r3, r4, [sp, #104]	; 0x68
   136e4:	4323      	orrs	r3, r4
   136e6:	d103      	bne.n	136f0 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0x2c>
    flags &= ~FLAGS_HASH;
   136e8:	9b22      	ldr	r3, [sp, #136]	; 0x88
   136ea:	f023 0310 	bic.w	r3, r3, #16
   136ee:	9322      	str	r3, [sp, #136]	; 0x88
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
   136f0:	9b22      	ldr	r3, [sp, #136]	; 0x88
   136f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
   136f6:	2b00      	cmp	r3, #0
   136f8:	d003      	beq.n	13702 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0x3e>
   136fa:	e9dd 341a 	ldrd	r3, r4, [sp, #104]	; 0x68
   136fe:	4323      	orrs	r3, r4
   13700:	d039      	beq.n	13776 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0xb2>
    do {
      const char digit = (char)(value % base);
   13702:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
   13706:	e9dd 231e 	ldrd	r2, r3, [sp, #120]	; 0x78
   1370a:	f003 fbbb 	bl	16e84 <__aeabi_uldivmod>
   1370e:	461c      	mov	r4, r3
   13710:	4613      	mov	r3, r2
   13712:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
   13716:	f89d 3053 	ldrb.w	r3, [sp, #83]	; 0x53
   1371a:	2b09      	cmp	r3, #9
   1371c:	d804      	bhi.n	13728 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0x64>
   1371e:	f89d 3053 	ldrb.w	r3, [sp, #83]	; 0x53
   13722:	3330      	adds	r3, #48	; 0x30
   13724:	b2da      	uxtb	r2, r3
   13726:	e00d      	b.n	13744 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0x80>
   13728:	9b22      	ldr	r3, [sp, #136]	; 0x88
   1372a:	f003 0320 	and.w	r3, r3, #32
   1372e:	2b00      	cmp	r3, #0
   13730:	d001      	beq.n	13736 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0x72>
   13732:	2241      	movs	r2, #65	; 0x41
   13734:	e000      	b.n	13738 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0x74>
   13736:	2261      	movs	r2, #97	; 0x61
   13738:	f89d 3053 	ldrb.w	r3, [sp, #83]	; 0x53
   1373c:	4413      	add	r3, r2
   1373e:	b2db      	uxtb	r3, r3
   13740:	3b0a      	subs	r3, #10
   13742:	b2da      	uxtb	r2, r3
   13744:	9b15      	ldr	r3, [sp, #84]	; 0x54
   13746:	1c59      	adds	r1, r3, #1
   13748:	9115      	str	r1, [sp, #84]	; 0x54
   1374a:	a916      	add	r1, sp, #88	; 0x58
   1374c:	440b      	add	r3, r1
   1374e:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
   13752:	e9dd 231e 	ldrd	r2, r3, [sp, #120]	; 0x78
   13756:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
   1375a:	f003 fb93 	bl	16e84 <__aeabi_uldivmod>
   1375e:	4603      	mov	r3, r0
   13760:	460c      	mov	r4, r1
   13762:	e9cd 341a 	strd	r3, r4, [sp, #104]	; 0x68
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
   13766:	e9dd 341a 	ldrd	r3, r4, [sp, #104]	; 0x68
   1376a:	4323      	orrs	r3, r4
   1376c:	d003      	beq.n	13776 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0xb2>
   1376e:	9b15      	ldr	r3, [sp, #84]	; 0x54
   13770:	2b1f      	cmp	r3, #31
   13772:	d800      	bhi.n	13776 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0xb2>
    do {
   13774:	e7c5      	b.n	13702 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0x3e>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
   13776:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   13778:	9a22      	ldr	r2, [sp, #136]	; 0x88
   1377a:	9206      	str	r2, [sp, #24]
   1377c:	9a21      	ldr	r2, [sp, #132]	; 0x84
   1377e:	9205      	str	r2, [sp, #20]
   13780:	9a20      	ldr	r2, [sp, #128]	; 0x80
   13782:	9204      	str	r2, [sp, #16]
   13784:	9303      	str	r3, [sp, #12]
   13786:	f89d 3070 	ldrb.w	r3, [sp, #112]	; 0x70
   1378a:	9302      	str	r3, [sp, #8]
   1378c:	9b15      	ldr	r3, [sp, #84]	; 0x54
   1378e:	9301      	str	r3, [sp, #4]
   13790:	ab0c      	add	r3, sp, #48	; 0x30
   13792:	9300      	str	r3, [sp, #0]
   13794:	9b08      	ldr	r3, [sp, #32]
   13796:	9a09      	ldr	r2, [sp, #36]	; 0x24
   13798:	990a      	ldr	r1, [sp, #40]	; 0x28
   1379a:	980b      	ldr	r0, [sp, #44]	; 0x2c
   1379c:	f7ff fdf2 	bl	13384 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)>
   137a0:	4604      	mov	r4, r0
   137a2:	462b      	mov	r3, r5
   137a4:	4619      	mov	r1, r3
   137a6:	4803      	ldr	r0, [pc, #12]	; (137b4 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0xf0>)
   137a8:	f7ff fc54 	bl	13054 <__cyg_profile_func_exit>
   137ac:	4623      	mov	r3, r4
}
   137ae:	4618      	mov	r0, r3
   137b0:	b017      	add	sp, #92	; 0x5c
   137b2:	bd30      	pop	{r4, r5, pc}
   137b4:	000136c5 	.word	0x000136c5

000137b8 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)>:
#endif  // PRINTF_SUPPORT_LONG_LONG


#if defined(PRINTF_SUPPORT_FLOAT)
static size_t _ftoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value_param, unsigned int prec, unsigned int width, unsigned int flags)
{
   137b8:	b530      	push	{r4, r5, lr}
   137ba:	b09b      	sub	sp, #108	; 0x6c
   137bc:	4675      	mov	r5, lr
   137be:	9005      	str	r0, [sp, #20]
   137c0:	9104      	str	r1, [sp, #16]
   137c2:	9203      	str	r2, [sp, #12]
   137c4:	9302      	str	r3, [sp, #8]
   137c6:	ed8d 0b00 	vstr	d0, [sp]
   137ca:	462b      	mov	r3, r5
   137cc:	4619      	mov	r1, r3
   137ce:	48b7      	ldr	r0, [pc, #732]	; (13aac <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x2f4>)
   137d0:	f7ff fc2c 	bl	1302c <__cyg_profile_func_enter>
  const size_t start_idx = idx;
   137d4:	9b03      	ldr	r3, [sp, #12]
   137d6:	9311      	str	r3, [sp, #68]	; 0x44

  float value = static_cast<float>(value_param);
   137d8:	e9dd 0100 	ldrd	r0, r1, [sp]
   137dc:	f003 fb02 	bl	16de4 <__aeabi_d2f>
   137e0:	4603      	mov	r3, r0
   137e2:	9319      	str	r3, [sp, #100]	; 0x64

  char buf[PRINTF_FTOA_BUFFER_SIZE];
  size_t len  = 0U;
   137e4:	2300      	movs	r3, #0
   137e6:	9318      	str	r3, [sp, #96]	; 0x60
  float diff = 0.0;
   137e8:	f04f 0300 	mov.w	r3, #0
   137ec:	9310      	str	r3, [sp, #64]	; 0x40

  // if input is larger than thres_max, revert to exponential
  const float thres_max = (float)0x7FFFFFFF;
   137ee:	f04f 439e 	mov.w	r3, #1325400064	; 0x4f000000
   137f2:	930f      	str	r3, [sp, #60]	; 0x3c

  // powers of 10
  static const float pow10[] = { 1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000 };

  // test for negative
  bool negative = false;
   137f4:	2300      	movs	r3, #0
   137f6:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
  if (value < 0) {
   137fa:	eddd 7a19 	vldr	s15, [sp, #100]	; 0x64
   137fe:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   13802:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   13806:	d50a      	bpl.n	1381e <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x66>
    negative = true;
   13808:	2301      	movs	r3, #1
   1380a:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
    value = 0 - value;
   1380e:	ed9f 7aa8 	vldr	s14, [pc, #672]	; 13ab0 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x2f8>
   13812:	eddd 7a19 	vldr	s15, [sp, #100]	; 0x64
   13816:	ee77 7a67 	vsub.f32	s15, s14, s15
   1381a:	edcd 7a19 	vstr	s15, [sp, #100]	; 0x64
  }

  // set default precision to 6, if not set explicitly
  if (!(flags & FLAGS_PRECISION)) {
   1381e:	9b20      	ldr	r3, [sp, #128]	; 0x80
   13820:	f403 6380 	and.w	r3, r3, #1024	; 0x400
   13824:	2b00      	cmp	r3, #0
   13826:	d101      	bne.n	1382c <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x74>
    prec = 6U;
   13828:	2306      	movs	r3, #6
   1382a:	931e      	str	r3, [sp, #120]	; 0x78
  }
  // limit precision to 9, cause a prec >= 10 can lead to overflow errors
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
   1382c:	9b18      	ldr	r3, [sp, #96]	; 0x60
   1382e:	2b1f      	cmp	r3, #31
   13830:	d80e      	bhi.n	13850 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x98>
   13832:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   13834:	2b09      	cmp	r3, #9
   13836:	d90b      	bls.n	13850 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x98>
    buf[len++] = '0';
   13838:	9b18      	ldr	r3, [sp, #96]	; 0x60
   1383a:	1c5a      	adds	r2, r3, #1
   1383c:	9218      	str	r2, [sp, #96]	; 0x60
   1383e:	aa1a      	add	r2, sp, #104	; 0x68
   13840:	4413      	add	r3, r2
   13842:	2230      	movs	r2, #48	; 0x30
   13844:	f803 2c50 	strb.w	r2, [r3, #-80]
    prec--;
   13848:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   1384a:	3b01      	subs	r3, #1
   1384c:	931e      	str	r3, [sp, #120]	; 0x78
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
   1384e:	e7ed      	b.n	1382c <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x74>
  }

  int whole = (int)value;
   13850:	eddd 7a19 	vldr	s15, [sp, #100]	; 0x64
   13854:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   13858:	ee17 3a90 	vmov	r3, s15
   1385c:	9316      	str	r3, [sp, #88]	; 0x58
  float tmp = (value - whole) * pow10[prec];
   1385e:	9b16      	ldr	r3, [sp, #88]	; 0x58
   13860:	ee07 3a90 	vmov	s15, r3
   13864:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   13868:	ed9d 7a19 	vldr	s14, [sp, #100]	; 0x64
   1386c:	ee37 7a67 	vsub.f32	s14, s14, s15
   13870:	4a90      	ldr	r2, [pc, #576]	; (13ab4 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x2fc>)
   13872:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   13874:	009b      	lsls	r3, r3, #2
   13876:	4413      	add	r3, r2
   13878:	edd3 7a00 	vldr	s15, [r3]
   1387c:	ee67 7a27 	vmul.f32	s15, s14, s15
   13880:	edcd 7a0e 	vstr	s15, [sp, #56]	; 0x38
  unsigned long frac = (unsigned long)tmp;
   13884:	eddd 7a0e 	vldr	s15, [sp, #56]	; 0x38
   13888:	eefc 7ae7 	vcvt.u32.f32	s15, s15
   1388c:	ee17 3a90 	vmov	r3, s15
   13890:	9315      	str	r3, [sp, #84]	; 0x54
  diff = tmp - frac;
   13892:	9b15      	ldr	r3, [sp, #84]	; 0x54
   13894:	ee07 3a90 	vmov	s15, r3
   13898:	eef8 7a67 	vcvt.f32.u32	s15, s15
   1389c:	ed9d 7a0e 	vldr	s14, [sp, #56]	; 0x38
   138a0:	ee77 7a67 	vsub.f32	s15, s14, s15
   138a4:	edcd 7a10 	vstr	s15, [sp, #64]	; 0x40

  if (diff > 0.5) {
   138a8:	eddd 7a10 	vldr	s15, [sp, #64]	; 0x40
   138ac:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
   138b0:	eef4 7ac7 	vcmpe.f32	s15, s14
   138b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   138b8:	dd18      	ble.n	138ec <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x134>
    ++frac;
   138ba:	9b15      	ldr	r3, [sp, #84]	; 0x54
   138bc:	3301      	adds	r3, #1
   138be:	9315      	str	r3, [sp, #84]	; 0x54
    // handle rollover, e.g. case 0.99 with prec 1 is 1.0
    if (frac >= pow10[prec]) {
   138c0:	9b15      	ldr	r3, [sp, #84]	; 0x54
   138c2:	ee07 3a90 	vmov	s15, r3
   138c6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
   138ca:	4a7a      	ldr	r2, [pc, #488]	; (13ab4 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x2fc>)
   138cc:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   138ce:	009b      	lsls	r3, r3, #2
   138d0:	4413      	add	r3, r2
   138d2:	edd3 7a00 	vldr	s15, [r3]
   138d6:	eeb4 7ae7 	vcmpe.f32	s14, s15
   138da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   138de:	db19      	blt.n	13914 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x15c>
      frac = 0;
   138e0:	2300      	movs	r3, #0
   138e2:	9315      	str	r3, [sp, #84]	; 0x54
      ++whole;
   138e4:	9b16      	ldr	r3, [sp, #88]	; 0x58
   138e6:	3301      	adds	r3, #1
   138e8:	9316      	str	r3, [sp, #88]	; 0x58
   138ea:	e013      	b.n	13914 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x15c>
    }
  }
  else if ((diff == 0.5) && ((frac == 0U) || (frac & 1U))) {
   138ec:	eddd 7a10 	vldr	s15, [sp, #64]	; 0x40
   138f0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
   138f4:	eef4 7a47 	vcmp.f32	s15, s14
   138f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   138fc:	d10a      	bne.n	13914 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x15c>
   138fe:	9b15      	ldr	r3, [sp, #84]	; 0x54
   13900:	2b00      	cmp	r3, #0
   13902:	d004      	beq.n	1390e <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x156>
   13904:	9b15      	ldr	r3, [sp, #84]	; 0x54
   13906:	f003 0301 	and.w	r3, r3, #1
   1390a:	2b00      	cmp	r3, #0
   1390c:	d002      	beq.n	13914 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x15c>
    // if halfway, round up if odd, OR if last digit is 0
    ++frac;
   1390e:	9b15      	ldr	r3, [sp, #84]	; 0x54
   13910:	3301      	adds	r3, #1
   13912:	9315      	str	r3, [sp, #84]	; 0x54
  }

  // TBD: for very large numbers switch back to native sprintf for exponentials. Anyone want to write code to replace this?
  // Normal printf behavior is to print EVERY whole number digit which can be 100s of characters overflowing your buffers == bad
  if (value > thres_max) {
   13914:	eddd 7a19 	vldr	s15, [sp, #100]	; 0x64
   13918:	ed9f 7a67 	vldr	s14, [pc, #412]	; 13ab8 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x300>
   1391c:	eef4 7ac7 	vcmpe.f32	s15, s14
   13920:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   13924:	dd01      	ble.n	1392a <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x172>
    return 0U;
   13926:	2400      	movs	r4, #0
   13928:	e156      	b.n	13bd8 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x420>
  }

  if (prec == 0U) {
   1392a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   1392c:	2b00      	cmp	r3, #0
   1392e:	d129      	bne.n	13984 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x1cc>
    diff = value - (float)whole;
   13930:	9b16      	ldr	r3, [sp, #88]	; 0x58
   13932:	ee07 3a90 	vmov	s15, r3
   13936:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   1393a:	ed9d 7a19 	vldr	s14, [sp, #100]	; 0x64
   1393e:	ee77 7a67 	vsub.f32	s15, s14, s15
   13942:	edcd 7a10 	vstr	s15, [sp, #64]	; 0x40
    if (diff > 0.5) {
   13946:	eddd 7a10 	vldr	s15, [sp, #64]	; 0x40
   1394a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
   1394e:	eef4 7ac7 	vcmpe.f32	s15, s14
   13952:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   13956:	dd03      	ble.n	13960 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x1a8>
      // greater than 0.5, round up, e.g. 1.6 -> 2
      ++whole;
   13958:	9b16      	ldr	r3, [sp, #88]	; 0x58
   1395a:	3301      	adds	r3, #1
   1395c:	9316      	str	r3, [sp, #88]	; 0x58
   1395e:	e05f      	b.n	13a20 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x268>
    }
    else if ((diff == 0.5) && (whole & 1)) {
   13960:	eddd 7a10 	vldr	s15, [sp, #64]	; 0x40
   13964:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
   13968:	eef4 7a47 	vcmp.f32	s15, s14
   1396c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   13970:	d156      	bne.n	13a20 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x268>
   13972:	9b16      	ldr	r3, [sp, #88]	; 0x58
   13974:	f003 0301 	and.w	r3, r3, #1
   13978:	2b00      	cmp	r3, #0
   1397a:	d051      	beq.n	13a20 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x268>
      // exactly 0.5 and ODD, then round up
      // 1.5 -> 2, but 2.5 -> 2
      ++whole;
   1397c:	9b16      	ldr	r3, [sp, #88]	; 0x58
   1397e:	3301      	adds	r3, #1
   13980:	9316      	str	r3, [sp, #88]	; 0x58
   13982:	e04d      	b.n	13a20 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x268>
    }
  }
  else {
    unsigned int count = prec;
   13984:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   13986:	9314      	str	r3, [sp, #80]	; 0x50
    // now do fractional part, as an unsigned number
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
   13988:	9b18      	ldr	r3, [sp, #96]	; 0x60
   1398a:	2b1f      	cmp	r3, #31
   1398c:	d827      	bhi.n	139de <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x226>
      --count;
   1398e:	9b14      	ldr	r3, [sp, #80]	; 0x50
   13990:	3b01      	subs	r3, #1
   13992:	9314      	str	r3, [sp, #80]	; 0x50
      buf[len++] = (char)(48U + (frac % 10U));
   13994:	9915      	ldr	r1, [sp, #84]	; 0x54
   13996:	4b49      	ldr	r3, [pc, #292]	; (13abc <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x304>)
   13998:	fba3 2301 	umull	r2, r3, r3, r1
   1399c:	08da      	lsrs	r2, r3, #3
   1399e:	4613      	mov	r3, r2
   139a0:	009b      	lsls	r3, r3, #2
   139a2:	4413      	add	r3, r2
   139a4:	005b      	lsls	r3, r3, #1
   139a6:	1aca      	subs	r2, r1, r3
   139a8:	b2d3      	uxtb	r3, r2
   139aa:	3330      	adds	r3, #48	; 0x30
   139ac:	b2d9      	uxtb	r1, r3
   139ae:	9b18      	ldr	r3, [sp, #96]	; 0x60
   139b0:	1c5a      	adds	r2, r3, #1
   139b2:	9218      	str	r2, [sp, #96]	; 0x60
   139b4:	aa1a      	add	r2, sp, #104	; 0x68
   139b6:	4413      	add	r3, r2
   139b8:	460a      	mov	r2, r1
   139ba:	f803 2c50 	strb.w	r2, [r3, #-80]
      if (!(frac /= 10U)) {
   139be:	9b15      	ldr	r3, [sp, #84]	; 0x54
   139c0:	4a3e      	ldr	r2, [pc, #248]	; (13abc <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x304>)
   139c2:	fba2 2303 	umull	r2, r3, r2, r3
   139c6:	08db      	lsrs	r3, r3, #3
   139c8:	9315      	str	r3, [sp, #84]	; 0x54
   139ca:	9b15      	ldr	r3, [sp, #84]	; 0x54
   139cc:	2b00      	cmp	r3, #0
   139ce:	bf0c      	ite	eq
   139d0:	2301      	moveq	r3, #1
   139d2:	2300      	movne	r3, #0
   139d4:	b2db      	uxtb	r3, r3
   139d6:	2b00      	cmp	r3, #0
   139d8:	d100      	bne.n	139dc <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x224>
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
   139da:	e7d5      	b.n	13988 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x1d0>
        break;
   139dc:	bf00      	nop
      }
    }
    // add extra 0s
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
   139de:	9b18      	ldr	r3, [sp, #96]	; 0x60
   139e0:	2b1f      	cmp	r3, #31
   139e2:	d806      	bhi.n	139f2 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x23a>
   139e4:	9b14      	ldr	r3, [sp, #80]	; 0x50
   139e6:	1e5a      	subs	r2, r3, #1
   139e8:	9214      	str	r2, [sp, #80]	; 0x50
   139ea:	2b00      	cmp	r3, #0
   139ec:	d001      	beq.n	139f2 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x23a>
   139ee:	2301      	movs	r3, #1
   139f0:	e000      	b.n	139f4 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x23c>
   139f2:	2300      	movs	r3, #0
   139f4:	2b00      	cmp	r3, #0
   139f6:	d008      	beq.n	13a0a <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x252>
      buf[len++] = '0';
   139f8:	9b18      	ldr	r3, [sp, #96]	; 0x60
   139fa:	1c5a      	adds	r2, r3, #1
   139fc:	9218      	str	r2, [sp, #96]	; 0x60
   139fe:	aa1a      	add	r2, sp, #104	; 0x68
   13a00:	4413      	add	r3, r2
   13a02:	2230      	movs	r2, #48	; 0x30
   13a04:	f803 2c50 	strb.w	r2, [r3, #-80]
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
   13a08:	e7e9      	b.n	139de <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x226>
    }
    if (len < PRINTF_FTOA_BUFFER_SIZE) {
   13a0a:	9b18      	ldr	r3, [sp, #96]	; 0x60
   13a0c:	2b1f      	cmp	r3, #31
   13a0e:	d807      	bhi.n	13a20 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x268>
      // add decimal
      buf[len++] = '.';
   13a10:	9b18      	ldr	r3, [sp, #96]	; 0x60
   13a12:	1c5a      	adds	r2, r3, #1
   13a14:	9218      	str	r2, [sp, #96]	; 0x60
   13a16:	aa1a      	add	r2, sp, #104	; 0x68
   13a18:	4413      	add	r3, r2
   13a1a:	222e      	movs	r2, #46	; 0x2e
   13a1c:	f803 2c50 	strb.w	r2, [r3, #-80]
    }
  }

  // do whole part, number is reversed
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
   13a20:	9b18      	ldr	r3, [sp, #96]	; 0x60
   13a22:	2b1f      	cmp	r3, #31
   13a24:	d828      	bhi.n	13a78 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x2c0>
    buf[len++] = (char)(48 + (whole % 10));
   13a26:	9a16      	ldr	r2, [sp, #88]	; 0x58
   13a28:	4b25      	ldr	r3, [pc, #148]	; (13ac0 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x308>)
   13a2a:	fb83 1302 	smull	r1, r3, r3, r2
   13a2e:	1099      	asrs	r1, r3, #2
   13a30:	17d3      	asrs	r3, r2, #31
   13a32:	1ac9      	subs	r1, r1, r3
   13a34:	460b      	mov	r3, r1
   13a36:	009b      	lsls	r3, r3, #2
   13a38:	440b      	add	r3, r1
   13a3a:	005b      	lsls	r3, r3, #1
   13a3c:	1ad1      	subs	r1, r2, r3
   13a3e:	b2cb      	uxtb	r3, r1
   13a40:	3330      	adds	r3, #48	; 0x30
   13a42:	b2d9      	uxtb	r1, r3
   13a44:	9b18      	ldr	r3, [sp, #96]	; 0x60
   13a46:	1c5a      	adds	r2, r3, #1
   13a48:	9218      	str	r2, [sp, #96]	; 0x60
   13a4a:	aa1a      	add	r2, sp, #104	; 0x68
   13a4c:	4413      	add	r3, r2
   13a4e:	460a      	mov	r2, r1
   13a50:	f803 2c50 	strb.w	r2, [r3, #-80]
    if (!(whole /= 10)) {
   13a54:	9b16      	ldr	r3, [sp, #88]	; 0x58
   13a56:	4a1a      	ldr	r2, [pc, #104]	; (13ac0 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x308>)
   13a58:	fb82 1203 	smull	r1, r2, r2, r3
   13a5c:	1092      	asrs	r2, r2, #2
   13a5e:	17db      	asrs	r3, r3, #31
   13a60:	1ad3      	subs	r3, r2, r3
   13a62:	9316      	str	r3, [sp, #88]	; 0x58
   13a64:	9b16      	ldr	r3, [sp, #88]	; 0x58
   13a66:	2b00      	cmp	r3, #0
   13a68:	bf0c      	ite	eq
   13a6a:	2301      	moveq	r3, #1
   13a6c:	2300      	movne	r3, #0
   13a6e:	b2db      	uxtb	r3, r3
   13a70:	2b00      	cmp	r3, #0
   13a72:	d100      	bne.n	13a76 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x2be>
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
   13a74:	e7d4      	b.n	13a20 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x268>
      break;
   13a76:	bf00      	nop
    }
  }

  // pad leading zeros
  while (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
   13a78:	9b20      	ldr	r3, [sp, #128]	; 0x80
   13a7a:	f003 0302 	and.w	r3, r3, #2
   13a7e:	2b00      	cmp	r3, #0
   13a80:	d120      	bne.n	13ac4 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x30c>
   13a82:	9b20      	ldr	r3, [sp, #128]	; 0x80
   13a84:	f003 0301 	and.w	r3, r3, #1
   13a88:	2b00      	cmp	r3, #0
   13a8a:	d01b      	beq.n	13ac4 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x30c>
   13a8c:	9a18      	ldr	r2, [sp, #96]	; 0x60
   13a8e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   13a90:	429a      	cmp	r2, r3
   13a92:	d217      	bcs.n	13ac4 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x30c>
   13a94:	9b18      	ldr	r3, [sp, #96]	; 0x60
   13a96:	2b1f      	cmp	r3, #31
   13a98:	d814      	bhi.n	13ac4 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x30c>
    buf[len++] = '0';
   13a9a:	9b18      	ldr	r3, [sp, #96]	; 0x60
   13a9c:	1c5a      	adds	r2, r3, #1
   13a9e:	9218      	str	r2, [sp, #96]	; 0x60
   13aa0:	aa1a      	add	r2, sp, #104	; 0x68
   13aa2:	4413      	add	r3, r2
   13aa4:	2230      	movs	r2, #48	; 0x30
   13aa6:	f803 2c50 	strb.w	r2, [r3, #-80]
  while (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
   13aaa:	e7e5      	b.n	13a78 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x2c0>
   13aac:	000137b9 	.word	0x000137b9
   13ab0:	00000000 	.word	0x00000000
   13ab4:	00017f74 	.word	0x00017f74
   13ab8:	4f000000 	.word	0x4f000000
   13abc:	cccccccd 	.word	0xcccccccd
   13ac0:	66666667 	.word	0x66666667
  }

  // handle sign
  if ((len == width) && (negative || (flags & FLAGS_PLUS) || (flags & FLAGS_SPACE))) {
   13ac4:	9a18      	ldr	r2, [sp, #96]	; 0x60
   13ac6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   13ac8:	429a      	cmp	r2, r3
   13aca:	d110      	bne.n	13aee <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x336>
   13acc:	f89d 305f 	ldrb.w	r3, [sp, #95]	; 0x5f
   13ad0:	2b00      	cmp	r3, #0
   13ad2:	d109      	bne.n	13ae8 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x330>
   13ad4:	9b20      	ldr	r3, [sp, #128]	; 0x80
   13ad6:	f003 0304 	and.w	r3, r3, #4
   13ada:	2b00      	cmp	r3, #0
   13adc:	d104      	bne.n	13ae8 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x330>
   13ade:	9b20      	ldr	r3, [sp, #128]	; 0x80
   13ae0:	f003 0308 	and.w	r3, r3, #8
   13ae4:	2b00      	cmp	r3, #0
   13ae6:	d002      	beq.n	13aee <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x336>
    len--;
   13ae8:	9b18      	ldr	r3, [sp, #96]	; 0x60
   13aea:	3b01      	subs	r3, #1
   13aec:	9318      	str	r3, [sp, #96]	; 0x60
  }
  if (len < PRINTF_FTOA_BUFFER_SIZE) {
   13aee:	9b18      	ldr	r3, [sp, #96]	; 0x60
   13af0:	2b1f      	cmp	r3, #31
   13af2:	d827      	bhi.n	13b44 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x38c>
    if (negative) {
   13af4:	f89d 305f 	ldrb.w	r3, [sp, #95]	; 0x5f
   13af8:	2b00      	cmp	r3, #0
   13afa:	d008      	beq.n	13b0e <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x356>
      buf[len++] = '-';
   13afc:	9b18      	ldr	r3, [sp, #96]	; 0x60
   13afe:	1c5a      	adds	r2, r3, #1
   13b00:	9218      	str	r2, [sp, #96]	; 0x60
   13b02:	aa1a      	add	r2, sp, #104	; 0x68
   13b04:	4413      	add	r3, r2
   13b06:	222d      	movs	r2, #45	; 0x2d
   13b08:	f803 2c50 	strb.w	r2, [r3, #-80]
   13b0c:	e01a      	b.n	13b44 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x38c>
    }
    else if (flags & FLAGS_PLUS) {
   13b0e:	9b20      	ldr	r3, [sp, #128]	; 0x80
   13b10:	f003 0304 	and.w	r3, r3, #4
   13b14:	2b00      	cmp	r3, #0
   13b16:	d008      	beq.n	13b2a <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x372>
      buf[len++] = '+';  // ignore the space if the '+' exists
   13b18:	9b18      	ldr	r3, [sp, #96]	; 0x60
   13b1a:	1c5a      	adds	r2, r3, #1
   13b1c:	9218      	str	r2, [sp, #96]	; 0x60
   13b1e:	aa1a      	add	r2, sp, #104	; 0x68
   13b20:	4413      	add	r3, r2
   13b22:	222b      	movs	r2, #43	; 0x2b
   13b24:	f803 2c50 	strb.w	r2, [r3, #-80]
   13b28:	e00c      	b.n	13b44 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x38c>
    }
    else if (flags & FLAGS_SPACE) {
   13b2a:	9b20      	ldr	r3, [sp, #128]	; 0x80
   13b2c:	f003 0308 	and.w	r3, r3, #8
   13b30:	2b00      	cmp	r3, #0
   13b32:	d007      	beq.n	13b44 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x38c>
      buf[len++] = ' ';
   13b34:	9b18      	ldr	r3, [sp, #96]	; 0x60
   13b36:	1c5a      	adds	r2, r3, #1
   13b38:	9218      	str	r2, [sp, #96]	; 0x60
   13b3a:	aa1a      	add	r2, sp, #104	; 0x68
   13b3c:	4413      	add	r3, r2
   13b3e:	2220      	movs	r2, #32
   13b40:	f803 2c50 	strb.w	r2, [r3, #-80]
    }
  }

  // pad spaces up to given width
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
   13b44:	9b20      	ldr	r3, [sp, #128]	; 0x80
   13b46:	f003 0302 	and.w	r3, r3, #2
   13b4a:	2b00      	cmp	r3, #0
   13b4c:	d116      	bne.n	13b7c <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x3c4>
   13b4e:	9b20      	ldr	r3, [sp, #128]	; 0x80
   13b50:	f003 0301 	and.w	r3, r3, #1
   13b54:	2b00      	cmp	r3, #0
   13b56:	d111      	bne.n	13b7c <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x3c4>
    for (size_t i = len; i < width; i++) {
   13b58:	9b18      	ldr	r3, [sp, #96]	; 0x60
   13b5a:	9313      	str	r3, [sp, #76]	; 0x4c
   13b5c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   13b5e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   13b60:	429a      	cmp	r2, r3
   13b62:	d20b      	bcs.n	13b7c <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x3c4>
      out(' ', buffer, idx++, maxlen);
   13b64:	9a03      	ldr	r2, [sp, #12]
   13b66:	1c53      	adds	r3, r2, #1
   13b68:	9303      	str	r3, [sp, #12]
   13b6a:	9c05      	ldr	r4, [sp, #20]
   13b6c:	9b02      	ldr	r3, [sp, #8]
   13b6e:	9904      	ldr	r1, [sp, #16]
   13b70:	2020      	movs	r0, #32
   13b72:	47a0      	blx	r4
    for (size_t i = len; i < width; i++) {
   13b74:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   13b76:	3301      	adds	r3, #1
   13b78:	9313      	str	r3, [sp, #76]	; 0x4c
   13b7a:	e7ef      	b.n	13b5c <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x3a4>
    }
  }

  // reverse string
  for (size_t i = 0U; i < len; i++) {
   13b7c:	2300      	movs	r3, #0
   13b7e:	9312      	str	r3, [sp, #72]	; 0x48
   13b80:	9a12      	ldr	r2, [sp, #72]	; 0x48
   13b82:	9b18      	ldr	r3, [sp, #96]	; 0x60
   13b84:	429a      	cmp	r2, r3
   13b86:	d212      	bcs.n	13bae <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x3f6>
    out(buf[len - i - 1U], buffer, idx++, maxlen);
   13b88:	9a18      	ldr	r2, [sp, #96]	; 0x60
   13b8a:	9b12      	ldr	r3, [sp, #72]	; 0x48
   13b8c:	1ad3      	subs	r3, r2, r3
   13b8e:	3b01      	subs	r3, #1
   13b90:	aa1a      	add	r2, sp, #104	; 0x68
   13b92:	4413      	add	r3, r2
   13b94:	f813 0c50 	ldrb.w	r0, [r3, #-80]
   13b98:	9a03      	ldr	r2, [sp, #12]
   13b9a:	1c53      	adds	r3, r2, #1
   13b9c:	9303      	str	r3, [sp, #12]
   13b9e:	9c05      	ldr	r4, [sp, #20]
   13ba0:	9b02      	ldr	r3, [sp, #8]
   13ba2:	9904      	ldr	r1, [sp, #16]
   13ba4:	47a0      	blx	r4
  for (size_t i = 0U; i < len; i++) {
   13ba6:	9b12      	ldr	r3, [sp, #72]	; 0x48
   13ba8:	3301      	adds	r3, #1
   13baa:	9312      	str	r3, [sp, #72]	; 0x48
   13bac:	e7e8      	b.n	13b80 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x3c8>
  }

  // append pad spaces up to given width
  if (flags & FLAGS_LEFT) {
   13bae:	9b20      	ldr	r3, [sp, #128]	; 0x80
   13bb0:	f003 0302 	and.w	r3, r3, #2
   13bb4:	2b00      	cmp	r3, #0
   13bb6:	d00e      	beq.n	13bd6 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x41e>
    while (idx - start_idx < width) {
   13bb8:	9a03      	ldr	r2, [sp, #12]
   13bba:	9b11      	ldr	r3, [sp, #68]	; 0x44
   13bbc:	1ad3      	subs	r3, r2, r3
   13bbe:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   13bc0:	429a      	cmp	r2, r3
   13bc2:	d908      	bls.n	13bd6 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x41e>
      out(' ', buffer, idx++, maxlen);
   13bc4:	9a03      	ldr	r2, [sp, #12]
   13bc6:	1c53      	adds	r3, r2, #1
   13bc8:	9303      	str	r3, [sp, #12]
   13bca:	9c05      	ldr	r4, [sp, #20]
   13bcc:	9b02      	ldr	r3, [sp, #8]
   13bce:	9904      	ldr	r1, [sp, #16]
   13bd0:	2020      	movs	r0, #32
   13bd2:	47a0      	blx	r4
    while (idx - start_idx < width) {
   13bd4:	e7f0      	b.n	13bb8 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x400>
    }
  }

  return idx;
   13bd6:	9c03      	ldr	r4, [sp, #12]
   13bd8:	462b      	mov	r3, r5
   13bda:	4619      	mov	r1, r3
   13bdc:	4803      	ldr	r0, [pc, #12]	; (13bec <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x434>)
   13bde:	f7ff fa39 	bl	13054 <__cyg_profile_func_exit>
   13be2:	4623      	mov	r3, r4
}
   13be4:	4618      	mov	r0, r3
   13be6:	b01b      	add	sp, #108	; 0x6c
   13be8:	bd30      	pop	{r4, r5, pc}
   13bea:	bf00      	nop
   13bec:	000137b9 	.word	0x000137b9

00013bf0 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)>:
#endif  // PRINTF_SUPPORT_FLOAT


// internal vsnprintf
static int _vsnprintf(out_fct_type out, char* buffer, const size_t maxlen, const char* format, va_list va)
{
   13bf0:	b570      	push	{r4, r5, r6, lr}
   13bf2:	b0a0      	sub	sp, #128	; 0x80
   13bf4:	4676      	mov	r6, lr
   13bf6:	900d      	str	r0, [sp, #52]	; 0x34
   13bf8:	910c      	str	r1, [sp, #48]	; 0x30
   13bfa:	920b      	str	r2, [sp, #44]	; 0x2c
   13bfc:	930a      	str	r3, [sp, #40]	; 0x28
   13bfe:	4633      	mov	r3, r6
   13c00:	4619      	mov	r1, r3
   13c02:	48a7      	ldr	r0, [pc, #668]	; (13ea0 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2b0>)
   13c04:	f7ff fa12 	bl	1302c <__cyg_profile_func_enter>
  unsigned int flags, width, precision, n;
  size_t idx = 0U;
   13c08:	2300      	movs	r3, #0
   13c0a:	931b      	str	r3, [sp, #108]	; 0x6c

  if (!buffer) {
   13c0c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   13c0e:	2b00      	cmp	r3, #0
   13c10:	d101      	bne.n	13c16 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x26>
    // use null output function
    out = _out_null;
   13c12:	4ba4      	ldr	r3, [pc, #656]	; (13ea4 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2b4>)
   13c14:	930d      	str	r3, [sp, #52]	; 0x34
  }

  while (*format)
   13c16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13c18:	781b      	ldrb	r3, [r3, #0]
   13c1a:	2b00      	cmp	r3, #0
   13c1c:	f000 8448 	beq.w	144b0 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8c0>
  {
    // format specifier?  %[flags][width][.precision][length]
    if (*format != '%') {
   13c20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13c22:	781b      	ldrb	r3, [r3, #0]
   13c24:	2b25      	cmp	r3, #37	; 0x25
   13c26:	d00d      	beq.n	13c44 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x54>
      // no
      out(*format, buffer, idx++, maxlen);
   13c28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13c2a:	7818      	ldrb	r0, [r3, #0]
   13c2c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   13c2e:	1c53      	adds	r3, r2, #1
   13c30:	931b      	str	r3, [sp, #108]	; 0x6c
   13c32:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   13c34:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   13c36:	990c      	ldr	r1, [sp, #48]	; 0x30
   13c38:	47a0      	blx	r4
      format++;
   13c3a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13c3c:	3301      	adds	r3, #1
   13c3e:	930a      	str	r3, [sp, #40]	; 0x28
      continue;
   13c40:	f000 bc34 	b.w	144ac <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8bc>
    }
    else {
      // yes, evaluate it
      format++;
   13c44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13c46:	3301      	adds	r3, #1
   13c48:	930a      	str	r3, [sp, #40]	; 0x28
    }

    // evaluate flags
    flags = 0U;
   13c4a:	2300      	movs	r3, #0
   13c4c:	931f      	str	r3, [sp, #124]	; 0x7c
    do {
      switch (*format) {
   13c4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13c50:	781b      	ldrb	r3, [r3, #0]
   13c52:	3b20      	subs	r3, #32
   13c54:	2b10      	cmp	r3, #16
   13c56:	d857      	bhi.n	13d08 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x118>
   13c58:	a201      	add	r2, pc, #4	; (adr r2, 13c60 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x70>)
   13c5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   13c5e:	bf00      	nop
   13c60:	00013ce1 	.word	0x00013ce1
   13c64:	00013d09 	.word	0x00013d09
   13c68:	00013d09 	.word	0x00013d09
   13c6c:	00013cf5 	.word	0x00013cf5
   13c70:	00013d09 	.word	0x00013d09
   13c74:	00013d09 	.word	0x00013d09
   13c78:	00013d09 	.word	0x00013d09
   13c7c:	00013d09 	.word	0x00013d09
   13c80:	00013d09 	.word	0x00013d09
   13c84:	00013d09 	.word	0x00013d09
   13c88:	00013d09 	.word	0x00013d09
   13c8c:	00013ccd 	.word	0x00013ccd
   13c90:	00013d09 	.word	0x00013d09
   13c94:	00013cb9 	.word	0x00013cb9
   13c98:	00013d09 	.word	0x00013d09
   13c9c:	00013d09 	.word	0x00013d09
   13ca0:	00013ca5 	.word	0x00013ca5
        case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
   13ca4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   13ca6:	f043 0301 	orr.w	r3, r3, #1
   13caa:	931f      	str	r3, [sp, #124]	; 0x7c
   13cac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13cae:	3301      	adds	r3, #1
   13cb0:	930a      	str	r3, [sp, #40]	; 0x28
   13cb2:	2301      	movs	r3, #1
   13cb4:	931c      	str	r3, [sp, #112]	; 0x70
   13cb6:	e02a      	b.n	13d0e <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x11e>
        case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
   13cb8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   13cba:	f043 0302 	orr.w	r3, r3, #2
   13cbe:	931f      	str	r3, [sp, #124]	; 0x7c
   13cc0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13cc2:	3301      	adds	r3, #1
   13cc4:	930a      	str	r3, [sp, #40]	; 0x28
   13cc6:	2301      	movs	r3, #1
   13cc8:	931c      	str	r3, [sp, #112]	; 0x70
   13cca:	e020      	b.n	13d0e <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x11e>
        case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
   13ccc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   13cce:	f043 0304 	orr.w	r3, r3, #4
   13cd2:	931f      	str	r3, [sp, #124]	; 0x7c
   13cd4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13cd6:	3301      	adds	r3, #1
   13cd8:	930a      	str	r3, [sp, #40]	; 0x28
   13cda:	2301      	movs	r3, #1
   13cdc:	931c      	str	r3, [sp, #112]	; 0x70
   13cde:	e016      	b.n	13d0e <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x11e>
        case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
   13ce0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   13ce2:	f043 0308 	orr.w	r3, r3, #8
   13ce6:	931f      	str	r3, [sp, #124]	; 0x7c
   13ce8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13cea:	3301      	adds	r3, #1
   13cec:	930a      	str	r3, [sp, #40]	; 0x28
   13cee:	2301      	movs	r3, #1
   13cf0:	931c      	str	r3, [sp, #112]	; 0x70
   13cf2:	e00c      	b.n	13d0e <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x11e>
        case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;
   13cf4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   13cf6:	f043 0310 	orr.w	r3, r3, #16
   13cfa:	931f      	str	r3, [sp, #124]	; 0x7c
   13cfc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13cfe:	3301      	adds	r3, #1
   13d00:	930a      	str	r3, [sp, #40]	; 0x28
   13d02:	2301      	movs	r3, #1
   13d04:	931c      	str	r3, [sp, #112]	; 0x70
   13d06:	e002      	b.n	13d0e <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x11e>
        default :                                   n = 0U; break;
   13d08:	2300      	movs	r3, #0
   13d0a:	931c      	str	r3, [sp, #112]	; 0x70
   13d0c:	bf00      	nop
      }
    } while (n);
   13d0e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
   13d10:	2b00      	cmp	r3, #0
   13d12:	d000      	beq.n	13d16 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x126>
    do {
   13d14:	e79b      	b.n	13c4e <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x5e>

    // evaluate width field
    width = 0U;
   13d16:	2300      	movs	r3, #0
   13d18:	931e      	str	r3, [sp, #120]	; 0x78
    if (_is_digit(*format)) {
   13d1a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13d1c:	781b      	ldrb	r3, [r3, #0]
   13d1e:	4618      	mov	r0, r3
   13d20:	f7ff fade 	bl	132e0 <_is_digit(char)>
   13d24:	4603      	mov	r3, r0
   13d26:	2b00      	cmp	r3, #0
   13d28:	d005      	beq.n	13d36 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x146>
      width = _atoi(&format);
   13d2a:	ab0a      	add	r3, sp, #40	; 0x28
   13d2c:	4618      	mov	r0, r3
   13d2e:	f7ff faf9 	bl	13324 <_atoi(char const**)>
   13d32:	901e      	str	r0, [sp, #120]	; 0x78
   13d34:	e018      	b.n	13d68 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x178>
    }
    else if (*format == '*') {
   13d36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13d38:	781b      	ldrb	r3, [r3, #0]
   13d3a:	2b2a      	cmp	r3, #42	; 0x2a
   13d3c:	d114      	bne.n	13d68 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x178>
      const int w = va_arg(va, int);
   13d3e:	9b24      	ldr	r3, [sp, #144]	; 0x90
   13d40:	1d1a      	adds	r2, r3, #4
   13d42:	9224      	str	r2, [sp, #144]	; 0x90
   13d44:	681b      	ldr	r3, [r3, #0]
   13d46:	9316      	str	r3, [sp, #88]	; 0x58
      if (w < 0) {
   13d48:	9b16      	ldr	r3, [sp, #88]	; 0x58
   13d4a:	2b00      	cmp	r3, #0
   13d4c:	da07      	bge.n	13d5e <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x16e>
        flags |= FLAGS_LEFT;    // reverse padding
   13d4e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   13d50:	f043 0302 	orr.w	r3, r3, #2
   13d54:	931f      	str	r3, [sp, #124]	; 0x7c
        width = (unsigned int)-w;
   13d56:	9b16      	ldr	r3, [sp, #88]	; 0x58
   13d58:	425b      	negs	r3, r3
   13d5a:	931e      	str	r3, [sp, #120]	; 0x78
   13d5c:	e001      	b.n	13d62 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x172>
      }
      else {
        width = (unsigned int)w;
   13d5e:	9b16      	ldr	r3, [sp, #88]	; 0x58
   13d60:	931e      	str	r3, [sp, #120]	; 0x78
      }
      format++;
   13d62:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13d64:	3301      	adds	r3, #1
   13d66:	930a      	str	r3, [sp, #40]	; 0x28
    }

    // evaluate precision field
    precision = 0U;
   13d68:	2300      	movs	r3, #0
   13d6a:	931d      	str	r3, [sp, #116]	; 0x74
    if (*format == '.') {
   13d6c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13d6e:	781b      	ldrb	r3, [r3, #0]
   13d70:	2b2e      	cmp	r3, #46	; 0x2e
   13d72:	d124      	bne.n	13dbe <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x1ce>
      flags |= FLAGS_PRECISION;
   13d74:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   13d76:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
   13d7a:	931f      	str	r3, [sp, #124]	; 0x7c
      format++;
   13d7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13d7e:	3301      	adds	r3, #1
   13d80:	930a      	str	r3, [sp, #40]	; 0x28
      if (_is_digit(*format)) {
   13d82:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13d84:	781b      	ldrb	r3, [r3, #0]
   13d86:	4618      	mov	r0, r3
   13d88:	f7ff faaa 	bl	132e0 <_is_digit(char)>
   13d8c:	4603      	mov	r3, r0
   13d8e:	2b00      	cmp	r3, #0
   13d90:	d005      	beq.n	13d9e <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x1ae>
        precision = _atoi(&format);
   13d92:	ab0a      	add	r3, sp, #40	; 0x28
   13d94:	4618      	mov	r0, r3
   13d96:	f7ff fac5 	bl	13324 <_atoi(char const**)>
   13d9a:	901d      	str	r0, [sp, #116]	; 0x74
   13d9c:	e00f      	b.n	13dbe <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x1ce>
      }
      else if (*format == '*') {
   13d9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13da0:	781b      	ldrb	r3, [r3, #0]
   13da2:	2b2a      	cmp	r3, #42	; 0x2a
   13da4:	d10b      	bne.n	13dbe <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x1ce>
        const int prec = (int)va_arg(va, int);
   13da6:	9b24      	ldr	r3, [sp, #144]	; 0x90
   13da8:	1d1a      	adds	r2, r3, #4
   13daa:	9224      	str	r2, [sp, #144]	; 0x90
   13dac:	681b      	ldr	r3, [r3, #0]
   13dae:	9315      	str	r3, [sp, #84]	; 0x54
        precision = prec > 0 ? (unsigned int)prec : 0U;
   13db0:	9b15      	ldr	r3, [sp, #84]	; 0x54
   13db2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   13db6:	931d      	str	r3, [sp, #116]	; 0x74
        format++;
   13db8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13dba:	3301      	adds	r3, #1
   13dbc:	930a      	str	r3, [sp, #40]	; 0x28
      }
    }

    // evaluate length field
    switch (*format) {
   13dbe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13dc0:	781b      	ldrb	r3, [r3, #0]
   13dc2:	3b68      	subs	r3, #104	; 0x68
   13dc4:	2b12      	cmp	r3, #18
   13dc6:	d867      	bhi.n	13e98 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2a8>
   13dc8:	a201      	add	r2, pc, #4	; (adr r2, 13dd0 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x1e0>)
   13dca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   13dce:	bf00      	nop
   13dd0:	00013e43 	.word	0x00013e43
   13dd4:	00013e99 	.word	0x00013e99
   13dd8:	00013e79 	.word	0x00013e79
   13ddc:	00013e99 	.word	0x00013e99
   13de0:	00013e1d 	.word	0x00013e1d
   13de4:	00013e99 	.word	0x00013e99
   13de8:	00013e99 	.word	0x00013e99
   13dec:	00013e99 	.word	0x00013e99
   13df0:	00013e99 	.word	0x00013e99
   13df4:	00013e99 	.word	0x00013e99
   13df8:	00013e99 	.word	0x00013e99
   13dfc:	00013e99 	.word	0x00013e99
   13e00:	00013e69 	.word	0x00013e69
   13e04:	00013e99 	.word	0x00013e99
   13e08:	00013e99 	.word	0x00013e99
   13e0c:	00013e99 	.word	0x00013e99
   13e10:	00013e99 	.word	0x00013e99
   13e14:	00013e99 	.word	0x00013e99
   13e18:	00013e89 	.word	0x00013e89
      case 'l' :
        flags |= FLAGS_LONG;
   13e1c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   13e1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   13e22:	931f      	str	r3, [sp, #124]	; 0x7c
        format++;
   13e24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13e26:	3301      	adds	r3, #1
   13e28:	930a      	str	r3, [sp, #40]	; 0x28
        if (*format == 'l') {
   13e2a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13e2c:	781b      	ldrb	r3, [r3, #0]
   13e2e:	2b6c      	cmp	r3, #108	; 0x6c
   13e30:	d134      	bne.n	13e9c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2ac>
          flags |= FLAGS_LONG_LONG;
   13e32:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   13e34:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   13e38:	931f      	str	r3, [sp, #124]	; 0x7c
          format++;
   13e3a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13e3c:	3301      	adds	r3, #1
   13e3e:	930a      	str	r3, [sp, #40]	; 0x28
        }
        break;
   13e40:	e02c      	b.n	13e9c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2ac>
      case 'h' :
        flags |= FLAGS_SHORT;
   13e42:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   13e44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   13e48:	931f      	str	r3, [sp, #124]	; 0x7c
        format++;
   13e4a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13e4c:	3301      	adds	r3, #1
   13e4e:	930a      	str	r3, [sp, #40]	; 0x28
        if (*format == 'h') {
   13e50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13e52:	781b      	ldrb	r3, [r3, #0]
   13e54:	2b68      	cmp	r3, #104	; 0x68
   13e56:	d127      	bne.n	13ea8 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2b8>
          flags |= FLAGS_CHAR;
   13e58:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   13e5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   13e5e:	931f      	str	r3, [sp, #124]	; 0x7c
          format++;
   13e60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13e62:	3301      	adds	r3, #1
   13e64:	930a      	str	r3, [sp, #40]	; 0x28
        }
        break;
   13e66:	e01f      	b.n	13ea8 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2b8>
#if defined(PRINTF_SUPPORT_PTRDIFF_T)
      case 't' :
        flags |= (sizeof(ptrdiff_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
   13e68:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   13e6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   13e6e:	931f      	str	r3, [sp, #124]	; 0x7c
        format++;
   13e70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13e72:	3301      	adds	r3, #1
   13e74:	930a      	str	r3, [sp, #40]	; 0x28
        break;
   13e76:	e018      	b.n	13eaa <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2ba>
#endif
      case 'j' :
        flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
   13e78:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   13e7a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   13e7e:	931f      	str	r3, [sp, #124]	; 0x7c
        format++;
   13e80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13e82:	3301      	adds	r3, #1
   13e84:	930a      	str	r3, [sp, #40]	; 0x28
        break;
   13e86:	e010      	b.n	13eaa <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2ba>
      case 'z' :
        flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
   13e88:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   13e8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   13e8e:	931f      	str	r3, [sp, #124]	; 0x7c
        format++;
   13e90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13e92:	3301      	adds	r3, #1
   13e94:	930a      	str	r3, [sp, #40]	; 0x28
        break;
   13e96:	e008      	b.n	13eaa <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2ba>
      default :
        break;
   13e98:	bf00      	nop
   13e9a:	e006      	b.n	13eaa <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2ba>
        break;
   13e9c:	bf00      	nop
   13e9e:	e004      	b.n	13eaa <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2ba>
   13ea0:	00013bf1 	.word	0x00013bf1
   13ea4:	00013229 	.word	0x00013229
        break;
   13ea8:	bf00      	nop
    }

    // evaluate specifier
    switch (*format) {
   13eaa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13eac:	781b      	ldrb	r3, [r3, #0]
   13eae:	3b25      	subs	r3, #37	; 0x25
   13eb0:	2b53      	cmp	r3, #83	; 0x53
   13eb2:	f200 82ee 	bhi.w	14492 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8a2>
   13eb6:	a201      	add	r2, pc, #4	; (adr r2, 13ebc <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2cc>)
   13eb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   13ebc:	0001447b 	.word	0x0001447b
   13ec0:	00014493 	.word	0x00014493
   13ec4:	00014493 	.word	0x00014493
   13ec8:	00014493 	.word	0x00014493
   13ecc:	00014493 	.word	0x00014493
   13ed0:	00014493 	.word	0x00014493
   13ed4:	00014493 	.word	0x00014493
   13ed8:	00014493 	.word	0x00014493
   13edc:	00014493 	.word	0x00014493
   13ee0:	00014493 	.word	0x00014493
   13ee4:	00014493 	.word	0x00014493
   13ee8:	00014493 	.word	0x00014493
   13eec:	00014493 	.word	0x00014493
   13ef0:	00014493 	.word	0x00014493
   13ef4:	00014493 	.word	0x00014493
   13ef8:	00014493 	.word	0x00014493
   13efc:	00014493 	.word	0x00014493
   13f00:	00014493 	.word	0x00014493
   13f04:	00014493 	.word	0x00014493
   13f08:	00014493 	.word	0x00014493
   13f0c:	00014493 	.word	0x00014493
   13f10:	00014493 	.word	0x00014493
   13f14:	00014493 	.word	0x00014493
   13f18:	00014493 	.word	0x00014493
   13f1c:	00014493 	.word	0x00014493
   13f20:	00014493 	.word	0x00014493
   13f24:	00014493 	.word	0x00014493
   13f28:	00014493 	.word	0x00014493
   13f2c:	00014493 	.word	0x00014493
   13f30:	00014493 	.word	0x00014493
   13f34:	00014493 	.word	0x00014493
   13f38:	00014493 	.word	0x00014493
   13f3c:	00014493 	.word	0x00014493
   13f40:	00014299 	.word	0x00014299
   13f44:	00014493 	.word	0x00014493
   13f48:	00014493 	.word	0x00014493
   13f4c:	00014493 	.word	0x00014493
   13f50:	00014493 	.word	0x00014493
   13f54:	00014493 	.word	0x00014493
   13f58:	00014493 	.word	0x00014493
   13f5c:	00014493 	.word	0x00014493
   13f60:	00014493 	.word	0x00014493
   13f64:	00014493 	.word	0x00014493
   13f68:	00014493 	.word	0x00014493
   13f6c:	00014493 	.word	0x00014493
   13f70:	00014493 	.word	0x00014493
   13f74:	00014493 	.word	0x00014493
   13f78:	00014493 	.word	0x00014493
   13f7c:	00014493 	.word	0x00014493
   13f80:	00014493 	.word	0x00014493
   13f84:	00014493 	.word	0x00014493
   13f88:	0001400d 	.word	0x0001400d
   13f8c:	00014493 	.word	0x00014493
   13f90:	00014493 	.word	0x00014493
   13f94:	00014493 	.word	0x00014493
   13f98:	00014493 	.word	0x00014493
   13f9c:	00014493 	.word	0x00014493
   13fa0:	00014493 	.word	0x00014493
   13fa4:	00014493 	.word	0x00014493
   13fa8:	00014493 	.word	0x00014493
   13fac:	00014493 	.word	0x00014493
   13fb0:	0001400d 	.word	0x0001400d
   13fb4:	000142d5 	.word	0x000142d5
   13fb8:	0001400d 	.word	0x0001400d
   13fbc:	00014493 	.word	0x00014493
   13fc0:	00014299 	.word	0x00014299
   13fc4:	00014493 	.word	0x00014493
   13fc8:	00014493 	.word	0x00014493
   13fcc:	0001400d 	.word	0x0001400d
   13fd0:	00014493 	.word	0x00014493
   13fd4:	00014493 	.word	0x00014493
   13fd8:	00014493 	.word	0x00014493
   13fdc:	00014493 	.word	0x00014493
   13fe0:	00014493 	.word	0x00014493
   13fe4:	0001400d 	.word	0x0001400d
   13fe8:	00014433 	.word	0x00014433
   13fec:	00014493 	.word	0x00014493
   13ff0:	00014493 	.word	0x00014493
   13ff4:	0001435d 	.word	0x0001435d
   13ff8:	00014493 	.word	0x00014493
   13ffc:	0001400d 	.word	0x0001400d
   14000:	00014493 	.word	0x00014493
   14004:	00014493 	.word	0x00014493
   14008:	0001400d 	.word	0x0001400d
      case 'X' :
      case 'o' :
      case 'b' : {
        // set the base
        unsigned int base;
        if (*format == 'x' || *format == 'X') {
   1400c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1400e:	781b      	ldrb	r3, [r3, #0]
   14010:	2b78      	cmp	r3, #120	; 0x78
   14012:	d003      	beq.n	1401c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x42c>
   14014:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   14016:	781b      	ldrb	r3, [r3, #0]
   14018:	2b58      	cmp	r3, #88	; 0x58
   1401a:	d102      	bne.n	14022 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x432>
          base = 16U;
   1401c:	2310      	movs	r3, #16
   1401e:	931a      	str	r3, [sp, #104]	; 0x68
   14020:	e013      	b.n	1404a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x45a>
        }
        else if (*format == 'o') {
   14022:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   14024:	781b      	ldrb	r3, [r3, #0]
   14026:	2b6f      	cmp	r3, #111	; 0x6f
   14028:	d102      	bne.n	14030 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x440>
          base =  8U;
   1402a:	2308      	movs	r3, #8
   1402c:	931a      	str	r3, [sp, #104]	; 0x68
   1402e:	e00c      	b.n	1404a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x45a>
        }
        else if (*format == 'b') {
   14030:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   14032:	781b      	ldrb	r3, [r3, #0]
   14034:	2b62      	cmp	r3, #98	; 0x62
   14036:	d102      	bne.n	1403e <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x44e>
          base =  2U;
   14038:	2302      	movs	r3, #2
   1403a:	931a      	str	r3, [sp, #104]	; 0x68
   1403c:	e005      	b.n	1404a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x45a>
        }
        else {
          base = 10U;
   1403e:	230a      	movs	r3, #10
   14040:	931a      	str	r3, [sp, #104]	; 0x68
          flags &= ~FLAGS_HASH;   // no hash for dec format
   14042:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   14044:	f023 0310 	bic.w	r3, r3, #16
   14048:	931f      	str	r3, [sp, #124]	; 0x7c
        }
        // uppercase
        if (*format == 'X') {
   1404a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1404c:	781b      	ldrb	r3, [r3, #0]
   1404e:	2b58      	cmp	r3, #88	; 0x58
   14050:	d103      	bne.n	1405a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x46a>
          flags |= FLAGS_UPPERCASE;
   14052:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   14054:	f043 0320 	orr.w	r3, r3, #32
   14058:	931f      	str	r3, [sp, #124]	; 0x7c
        }

        // no plus or space flag for u, x, X, o, b
        if ((*format != 'i') && (*format != 'd')) {
   1405a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1405c:	781b      	ldrb	r3, [r3, #0]
   1405e:	2b69      	cmp	r3, #105	; 0x69
   14060:	d007      	beq.n	14072 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x482>
   14062:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   14064:	781b      	ldrb	r3, [r3, #0]
   14066:	2b64      	cmp	r3, #100	; 0x64
   14068:	d003      	beq.n	14072 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x482>
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
   1406a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   1406c:	f023 030c 	bic.w	r3, r3, #12
   14070:	931f      	str	r3, [sp, #124]	; 0x7c
        }

        // ignore '0' flag when precision is given
        if (flags & FLAGS_PRECISION) {
   14072:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   14074:	f403 6380 	and.w	r3, r3, #1024	; 0x400
   14078:	2b00      	cmp	r3, #0
   1407a:	d003      	beq.n	14084 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x494>
          flags &= ~FLAGS_ZEROPAD;
   1407c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   1407e:	f023 0301 	bic.w	r3, r3, #1
   14082:	931f      	str	r3, [sp, #124]	; 0x7c
        }

        // convert the integer
        if ((*format == 'i') || (*format == 'd')) {
   14084:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   14086:	781b      	ldrb	r3, [r3, #0]
   14088:	2b69      	cmp	r3, #105	; 0x69
   1408a:	d004      	beq.n	14096 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x4a6>
   1408c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1408e:	781b      	ldrb	r3, [r3, #0]
   14090:	2b64      	cmp	r3, #100	; 0x64
   14092:	f040 808d 	bne.w	141b0 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x5c0>
          // signed
          if (flags & FLAGS_LONG_LONG) {
   14096:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   14098:	f403 7300 	and.w	r3, r3, #512	; 0x200
   1409c:	2b00      	cmp	r3, #0
   1409e:	d02e      	beq.n	140fe <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x50e>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            const long long value = va_arg(va, long long);
   140a0:	9b24      	ldr	r3, [sp, #144]	; 0x90
   140a2:	3307      	adds	r3, #7
   140a4:	f023 0307 	bic.w	r3, r3, #7
   140a8:	f103 0208 	add.w	r2, r3, #8
   140ac:	9224      	str	r2, [sp, #144]	; 0x90
   140ae:	e9d3 3400 	ldrd	r3, r4, [r3]
   140b2:	e9cd 340e 	strd	r3, r4, [sp, #56]	; 0x38
            idx = _ntoa_long_long(out, buffer, idx, maxlen, (unsigned long long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
   140b6:	e9dd 340e 	ldrd	r3, r4, [sp, #56]	; 0x38
   140ba:	2b00      	cmp	r3, #0
   140bc:	f174 0200 	sbcs.w	r2, r4, #0
   140c0:	da02      	bge.n	140c8 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x4d8>
   140c2:	425b      	negs	r3, r3
   140c4:	eb64 0444 	sbc.w	r4, r4, r4, lsl #1
   140c8:	4619      	mov	r1, r3
   140ca:	4622      	mov	r2, r4
   140cc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   140ce:	0fdb      	lsrs	r3, r3, #31
   140d0:	b2d8      	uxtb	r0, r3
   140d2:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   140d4:	f04f 0400 	mov.w	r4, #0
   140d8:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
   140da:	9508      	str	r5, [sp, #32]
   140dc:	9d1e      	ldr	r5, [sp, #120]	; 0x78
   140de:	9507      	str	r5, [sp, #28]
   140e0:	9d1d      	ldr	r5, [sp, #116]	; 0x74
   140e2:	9506      	str	r5, [sp, #24]
   140e4:	e9cd 3404 	strd	r3, r4, [sp, #16]
   140e8:	9002      	str	r0, [sp, #8]
   140ea:	e9cd 1200 	strd	r1, r2, [sp]
   140ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   140f0:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   140f2:	990c      	ldr	r1, [sp, #48]	; 0x30
   140f4:	980d      	ldr	r0, [sp, #52]	; 0x34
   140f6:	f7ff fae5 	bl	136c4 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)>
   140fa:	901b      	str	r0, [sp, #108]	; 0x6c
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
          }
          else {
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
          }
   140fc:	e0c8      	b.n	14290 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x6a0>
          else if (flags & FLAGS_LONG) {
   140fe:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   14100:	f403 7380 	and.w	r3, r3, #256	; 0x100
   14104:	2b00      	cmp	r3, #0
   14106:	d01e      	beq.n	14146 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x556>
            const long value = va_arg(va, long);
   14108:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1410a:	1d1a      	adds	r2, r3, #4
   1410c:	9224      	str	r2, [sp, #144]	; 0x90
   1410e:	681b      	ldr	r3, [r3, #0]
   14110:	9311      	str	r3, [sp, #68]	; 0x44
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
   14112:	9b11      	ldr	r3, [sp, #68]	; 0x44
   14114:	2b00      	cmp	r3, #0
   14116:	bfb8      	it	lt
   14118:	425b      	neglt	r3, r3
   1411a:	4619      	mov	r1, r3
   1411c:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1411e:	0fdb      	lsrs	r3, r3, #31
   14120:	b2db      	uxtb	r3, r3
   14122:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   14124:	9205      	str	r2, [sp, #20]
   14126:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   14128:	9204      	str	r2, [sp, #16]
   1412a:	9a1d      	ldr	r2, [sp, #116]	; 0x74
   1412c:	9203      	str	r2, [sp, #12]
   1412e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   14130:	9202      	str	r2, [sp, #8]
   14132:	9301      	str	r3, [sp, #4]
   14134:	9100      	str	r1, [sp, #0]
   14136:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   14138:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   1413a:	990c      	ldr	r1, [sp, #48]	; 0x30
   1413c:	980d      	ldr	r0, [sp, #52]	; 0x34
   1413e:	f7ff fa4f 	bl	135e0 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)>
   14142:	901b      	str	r0, [sp, #108]	; 0x6c
          }
   14144:	e0a4      	b.n	14290 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x6a0>
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
   14146:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   14148:	f003 0340 	and.w	r3, r3, #64	; 0x40
   1414c:	2b00      	cmp	r3, #0
   1414e:	d005      	beq.n	1415c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x56c>
   14150:	9b24      	ldr	r3, [sp, #144]	; 0x90
   14152:	1d1a      	adds	r2, r3, #4
   14154:	9224      	str	r2, [sp, #144]	; 0x90
   14156:	681b      	ldr	r3, [r3, #0]
   14158:	b2db      	uxtb	r3, r3
   1415a:	e00e      	b.n	1417a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x58a>
   1415c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   1415e:	f003 0380 	and.w	r3, r3, #128	; 0x80
   14162:	2b00      	cmp	r3, #0
   14164:	d005      	beq.n	14172 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x582>
   14166:	9b24      	ldr	r3, [sp, #144]	; 0x90
   14168:	1d1a      	adds	r2, r3, #4
   1416a:	9224      	str	r2, [sp, #144]	; 0x90
   1416c:	681b      	ldr	r3, [r3, #0]
   1416e:	b21b      	sxth	r3, r3
   14170:	e003      	b.n	1417a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x58a>
   14172:	9b24      	ldr	r3, [sp, #144]	; 0x90
   14174:	1d1a      	adds	r2, r3, #4
   14176:	9224      	str	r2, [sp, #144]	; 0x90
   14178:	681b      	ldr	r3, [r3, #0]
   1417a:	9312      	str	r3, [sp, #72]	; 0x48
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
   1417c:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1417e:	2b00      	cmp	r3, #0
   14180:	bfb8      	it	lt
   14182:	425b      	neglt	r3, r3
   14184:	4619      	mov	r1, r3
   14186:	9b12      	ldr	r3, [sp, #72]	; 0x48
   14188:	0fdb      	lsrs	r3, r3, #31
   1418a:	b2db      	uxtb	r3, r3
   1418c:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   1418e:	9205      	str	r2, [sp, #20]
   14190:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   14192:	9204      	str	r2, [sp, #16]
   14194:	9a1d      	ldr	r2, [sp, #116]	; 0x74
   14196:	9203      	str	r2, [sp, #12]
   14198:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   1419a:	9202      	str	r2, [sp, #8]
   1419c:	9301      	str	r3, [sp, #4]
   1419e:	9100      	str	r1, [sp, #0]
   141a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   141a2:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   141a4:	990c      	ldr	r1, [sp, #48]	; 0x30
   141a6:	980d      	ldr	r0, [sp, #52]	; 0x34
   141a8:	f7ff fa1a 	bl	135e0 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)>
   141ac:	901b      	str	r0, [sp, #108]	; 0x6c
          }
   141ae:	e06f      	b.n	14290 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x6a0>
        }
        else {
          // unsigned
          if (flags & FLAGS_LONG_LONG) {
   141b0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   141b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
   141b6:	2b00      	cmp	r3, #0
   141b8:	d020      	beq.n	141fc <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x60c>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base, precision, width, flags);
   141ba:	9b24      	ldr	r3, [sp, #144]	; 0x90
   141bc:	3307      	adds	r3, #7
   141be:	f023 0307 	bic.w	r3, r3, #7
   141c2:	f103 0208 	add.w	r2, r3, #8
   141c6:	9224      	str	r2, [sp, #144]	; 0x90
   141c8:	e9d3 3400 	ldrd	r3, r4, [r3]
   141cc:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   141ce:	4611      	mov	r1, r2
   141d0:	f04f 0200 	mov.w	r2, #0
   141d4:	981f      	ldr	r0, [sp, #124]	; 0x7c
   141d6:	9008      	str	r0, [sp, #32]
   141d8:	981e      	ldr	r0, [sp, #120]	; 0x78
   141da:	9007      	str	r0, [sp, #28]
   141dc:	981d      	ldr	r0, [sp, #116]	; 0x74
   141de:	9006      	str	r0, [sp, #24]
   141e0:	e9cd 1204 	strd	r1, r2, [sp, #16]
   141e4:	2200      	movs	r2, #0
   141e6:	9202      	str	r2, [sp, #8]
   141e8:	e9cd 3400 	strd	r3, r4, [sp]
   141ec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   141ee:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   141f0:	990c      	ldr	r1, [sp, #48]	; 0x30
   141f2:	980d      	ldr	r0, [sp, #52]	; 0x34
   141f4:	f7ff fa66 	bl	136c4 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)>
   141f8:	901b      	str	r0, [sp, #108]	; 0x6c
   141fa:	e049      	b.n	14290 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x6a0>
#endif
          }
          else if (flags & FLAGS_LONG) {
   141fc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   141fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
   14202:	2b00      	cmp	r3, #0
   14204:	d016      	beq.n	14234 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x644>
            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
   14206:	9b24      	ldr	r3, [sp, #144]	; 0x90
   14208:	1d1a      	adds	r2, r3, #4
   1420a:	9224      	str	r2, [sp, #144]	; 0x90
   1420c:	681b      	ldr	r3, [r3, #0]
   1420e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   14210:	9205      	str	r2, [sp, #20]
   14212:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   14214:	9204      	str	r2, [sp, #16]
   14216:	9a1d      	ldr	r2, [sp, #116]	; 0x74
   14218:	9203      	str	r2, [sp, #12]
   1421a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   1421c:	9202      	str	r2, [sp, #8]
   1421e:	2200      	movs	r2, #0
   14220:	9201      	str	r2, [sp, #4]
   14222:	9300      	str	r3, [sp, #0]
   14224:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   14226:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   14228:	990c      	ldr	r1, [sp, #48]	; 0x30
   1422a:	980d      	ldr	r0, [sp, #52]	; 0x34
   1422c:	f7ff f9d8 	bl	135e0 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)>
   14230:	901b      	str	r0, [sp, #108]	; 0x6c
   14232:	e02d      	b.n	14290 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x6a0>
          }
          else {
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
   14234:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   14236:	f003 0340 	and.w	r3, r3, #64	; 0x40
   1423a:	2b00      	cmp	r3, #0
   1423c:	d005      	beq.n	1424a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x65a>
   1423e:	9b24      	ldr	r3, [sp, #144]	; 0x90
   14240:	1d1a      	adds	r2, r3, #4
   14242:	9224      	str	r2, [sp, #144]	; 0x90
   14244:	681b      	ldr	r3, [r3, #0]
   14246:	b2db      	uxtb	r3, r3
   14248:	e00e      	b.n	14268 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x678>
   1424a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   1424c:	f003 0380 	and.w	r3, r3, #128	; 0x80
   14250:	2b00      	cmp	r3, #0
   14252:	d005      	beq.n	14260 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x670>
   14254:	9b24      	ldr	r3, [sp, #144]	; 0x90
   14256:	1d1a      	adds	r2, r3, #4
   14258:	9224      	str	r2, [sp, #144]	; 0x90
   1425a:	681b      	ldr	r3, [r3, #0]
   1425c:	b29b      	uxth	r3, r3
   1425e:	e003      	b.n	14268 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x678>
   14260:	9b24      	ldr	r3, [sp, #144]	; 0x90
   14262:	1d1a      	adds	r2, r3, #4
   14264:	9224      	str	r2, [sp, #144]	; 0x90
   14266:	681b      	ldr	r3, [r3, #0]
   14268:	9313      	str	r3, [sp, #76]	; 0x4c
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
   1426a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   1426c:	9305      	str	r3, [sp, #20]
   1426e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   14270:	9304      	str	r3, [sp, #16]
   14272:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   14274:	9303      	str	r3, [sp, #12]
   14276:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   14278:	9302      	str	r3, [sp, #8]
   1427a:	2300      	movs	r3, #0
   1427c:	9301      	str	r3, [sp, #4]
   1427e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   14280:	9300      	str	r3, [sp, #0]
   14282:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   14284:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   14286:	990c      	ldr	r1, [sp, #48]	; 0x30
   14288:	980d      	ldr	r0, [sp, #52]	; 0x34
   1428a:	f7ff f9a9 	bl	135e0 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)>
   1428e:	901b      	str	r0, [sp, #108]	; 0x6c
          }
        }
        format++;
   14290:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   14292:	3301      	adds	r3, #1
   14294:	930a      	str	r3, [sp, #40]	; 0x28
        break;
   14296:	e109      	b.n	144ac <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8bc>
      }
#if defined(PRINTF_SUPPORT_FLOAT)
      case 'f' :
      case 'F' :
        idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
   14298:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1429a:	3307      	adds	r3, #7
   1429c:	f023 0307 	bic.w	r3, r3, #7
   142a0:	f103 0208 	add.w	r2, r3, #8
   142a4:	9224      	str	r2, [sp, #144]	; 0x90
   142a6:	ed93 7b00 	vldr	d7, [r3]
   142aa:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   142ac:	9302      	str	r3, [sp, #8]
   142ae:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   142b0:	9301      	str	r3, [sp, #4]
   142b2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   142b4:	9300      	str	r3, [sp, #0]
   142b6:	eeb0 0a47 	vmov.f32	s0, s14
   142ba:	eef0 0a67 	vmov.f32	s1, s15
   142be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   142c0:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   142c2:	990c      	ldr	r1, [sp, #48]	; 0x30
   142c4:	980d      	ldr	r0, [sp, #52]	; 0x34
   142c6:	f7ff fa77 	bl	137b8 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)>
   142ca:	901b      	str	r0, [sp, #108]	; 0x6c
        format++;
   142cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   142ce:	3301      	adds	r3, #1
   142d0:	930a      	str	r3, [sp, #40]	; 0x28
        break;
   142d2:	e0eb      	b.n	144ac <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8bc>
#endif  // PRINTF_SUPPORT_FLOAT
      case 'c' : {
        unsigned int l = 1U;
   142d4:	2301      	movs	r3, #1
   142d6:	9319      	str	r3, [sp, #100]	; 0x64
        // pre padding
        if (!(flags & FLAGS_LEFT)) {
   142d8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   142da:	f003 0302 	and.w	r3, r3, #2
   142de:	2b00      	cmp	r3, #0
   142e0:	d113      	bne.n	1430a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x71a>
          while (l++ < width) {
   142e2:	9b19      	ldr	r3, [sp, #100]	; 0x64
   142e4:	1c5a      	adds	r2, r3, #1
   142e6:	9219      	str	r2, [sp, #100]	; 0x64
   142e8:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   142ea:	429a      	cmp	r2, r3
   142ec:	bf8c      	ite	hi
   142ee:	2301      	movhi	r3, #1
   142f0:	2300      	movls	r3, #0
   142f2:	b2db      	uxtb	r3, r3
   142f4:	2b00      	cmp	r3, #0
   142f6:	d008      	beq.n	1430a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x71a>
            out(' ', buffer, idx++, maxlen);
   142f8:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   142fa:	1c53      	adds	r3, r2, #1
   142fc:	931b      	str	r3, [sp, #108]	; 0x6c
   142fe:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   14300:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   14302:	990c      	ldr	r1, [sp, #48]	; 0x30
   14304:	2020      	movs	r0, #32
   14306:	47a0      	blx	r4
          while (l++ < width) {
   14308:	e7eb      	b.n	142e2 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x6f2>
          }
        }
        // char output
        out((char)va_arg(va, int), buffer, idx++, maxlen);
   1430a:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1430c:	1d1a      	adds	r2, r3, #4
   1430e:	9224      	str	r2, [sp, #144]	; 0x90
   14310:	681b      	ldr	r3, [r3, #0]
   14312:	b2d8      	uxtb	r0, r3
   14314:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   14316:	1c53      	adds	r3, r2, #1
   14318:	931b      	str	r3, [sp, #108]	; 0x6c
   1431a:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   1431c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1431e:	990c      	ldr	r1, [sp, #48]	; 0x30
   14320:	47a0      	blx	r4
        // post padding
        if (flags & FLAGS_LEFT) {
   14322:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   14324:	f003 0302 	and.w	r3, r3, #2
   14328:	2b00      	cmp	r3, #0
   1432a:	d013      	beq.n	14354 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x764>
          while (l++ < width) {
   1432c:	9b19      	ldr	r3, [sp, #100]	; 0x64
   1432e:	1c5a      	adds	r2, r3, #1
   14330:	9219      	str	r2, [sp, #100]	; 0x64
   14332:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   14334:	429a      	cmp	r2, r3
   14336:	bf8c      	ite	hi
   14338:	2301      	movhi	r3, #1
   1433a:	2300      	movls	r3, #0
   1433c:	b2db      	uxtb	r3, r3
   1433e:	2b00      	cmp	r3, #0
   14340:	d008      	beq.n	14354 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x764>
            out(' ', buffer, idx++, maxlen);
   14342:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   14344:	1c53      	adds	r3, r2, #1
   14346:	931b      	str	r3, [sp, #108]	; 0x6c
   14348:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   1434a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1434c:	990c      	ldr	r1, [sp, #48]	; 0x30
   1434e:	2020      	movs	r0, #32
   14350:	47a0      	blx	r4
          while (l++ < width) {
   14352:	e7eb      	b.n	1432c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x73c>
          }
        }
        format++;
   14354:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   14356:	3301      	adds	r3, #1
   14358:	930a      	str	r3, [sp, #40]	; 0x28
        break;
   1435a:	e0a7      	b.n	144ac <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8bc>
      }

      case 's' : {
        char* p = va_arg(va, char*);
   1435c:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1435e:	1d1a      	adds	r2, r3, #4
   14360:	9224      	str	r2, [sp, #144]	; 0x90
   14362:	681b      	ldr	r3, [r3, #0]
   14364:	9318      	str	r3, [sp, #96]	; 0x60
        unsigned int l = _strlen(p);
   14366:	9818      	ldr	r0, [sp, #96]	; 0x60
   14368:	f7fe ff98 	bl	1329c <_strlen(char const*)>
   1436c:	9017      	str	r0, [sp, #92]	; 0x5c
        // pre padding
        if (flags & FLAGS_PRECISION) {
   1436e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   14370:	f403 6380 	and.w	r3, r3, #1024	; 0x400
   14374:	2b00      	cmp	r3, #0
   14376:	d007      	beq.n	14388 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x798>
          l = (l < precision ? l : precision);
   14378:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   1437a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   1437c:	429a      	cmp	r2, r3
   1437e:	d201      	bcs.n	14384 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x794>
   14380:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   14382:	e000      	b.n	14386 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x796>
   14384:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   14386:	9317      	str	r3, [sp, #92]	; 0x5c
        }
        if (!(flags & FLAGS_LEFT)) {
   14388:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   1438a:	f003 0302 	and.w	r3, r3, #2
   1438e:	2b00      	cmp	r3, #0
   14390:	d113      	bne.n	143ba <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7ca>
          while (l++ < width) {
   14392:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   14394:	1c5a      	adds	r2, r3, #1
   14396:	9217      	str	r2, [sp, #92]	; 0x5c
   14398:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   1439a:	429a      	cmp	r2, r3
   1439c:	bf8c      	ite	hi
   1439e:	2301      	movhi	r3, #1
   143a0:	2300      	movls	r3, #0
   143a2:	b2db      	uxtb	r3, r3
   143a4:	2b00      	cmp	r3, #0
   143a6:	d008      	beq.n	143ba <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7ca>
            out(' ', buffer, idx++, maxlen);
   143a8:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   143aa:	1c53      	adds	r3, r2, #1
   143ac:	931b      	str	r3, [sp, #108]	; 0x6c
   143ae:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   143b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   143b2:	990c      	ldr	r1, [sp, #48]	; 0x30
   143b4:	2020      	movs	r0, #32
   143b6:	47a0      	blx	r4
          while (l++ < width) {
   143b8:	e7eb      	b.n	14392 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7a2>
          }
        }
        // string output
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
   143ba:	9b18      	ldr	r3, [sp, #96]	; 0x60
   143bc:	781b      	ldrb	r3, [r3, #0]
   143be:	2b00      	cmp	r3, #0
   143c0:	d00b      	beq.n	143da <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7ea>
   143c2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   143c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
   143c8:	2b00      	cmp	r3, #0
   143ca:	d004      	beq.n	143d6 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7e6>
   143cc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   143ce:	1e5a      	subs	r2, r3, #1
   143d0:	921d      	str	r2, [sp, #116]	; 0x74
   143d2:	2b00      	cmp	r3, #0
   143d4:	d001      	beq.n	143da <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7ea>
   143d6:	2301      	movs	r3, #1
   143d8:	e000      	b.n	143dc <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7ec>
   143da:	2300      	movs	r3, #0
   143dc:	2b00      	cmp	r3, #0
   143de:	d00b      	beq.n	143f8 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x808>
          out(*(p++), buffer, idx++, maxlen);
   143e0:	9b18      	ldr	r3, [sp, #96]	; 0x60
   143e2:	1c5a      	adds	r2, r3, #1
   143e4:	9218      	str	r2, [sp, #96]	; 0x60
   143e6:	7818      	ldrb	r0, [r3, #0]
   143e8:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   143ea:	1c53      	adds	r3, r2, #1
   143ec:	931b      	str	r3, [sp, #108]	; 0x6c
   143ee:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   143f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   143f2:	990c      	ldr	r1, [sp, #48]	; 0x30
   143f4:	47a0      	blx	r4
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
   143f6:	e7e0      	b.n	143ba <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7ca>
        }
        // post padding
        if (flags & FLAGS_LEFT) {
   143f8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   143fa:	f003 0302 	and.w	r3, r3, #2
   143fe:	2b00      	cmp	r3, #0
   14400:	d013      	beq.n	1442a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x83a>
          while (l++ < width) {
   14402:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   14404:	1c5a      	adds	r2, r3, #1
   14406:	9217      	str	r2, [sp, #92]	; 0x5c
   14408:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   1440a:	429a      	cmp	r2, r3
   1440c:	bf8c      	ite	hi
   1440e:	2301      	movhi	r3, #1
   14410:	2300      	movls	r3, #0
   14412:	b2db      	uxtb	r3, r3
   14414:	2b00      	cmp	r3, #0
   14416:	d008      	beq.n	1442a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x83a>
            out(' ', buffer, idx++, maxlen);
   14418:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   1441a:	1c53      	adds	r3, r2, #1
   1441c:	931b      	str	r3, [sp, #108]	; 0x6c
   1441e:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   14420:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   14422:	990c      	ldr	r1, [sp, #48]	; 0x30
   14424:	2020      	movs	r0, #32
   14426:	47a0      	blx	r4
          while (l++ < width) {
   14428:	e7eb      	b.n	14402 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x812>
          }
        }
        format++;
   1442a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1442c:	3301      	adds	r3, #1
   1442e:	930a      	str	r3, [sp, #40]	; 0x28
        break;
   14430:	e03c      	b.n	144ac <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8bc>
      }

      case 'p' : {
        width = sizeof(void*) * 2U;
   14432:	2308      	movs	r3, #8
   14434:	931e      	str	r3, [sp, #120]	; 0x78
        flags |= FLAGS_ZEROPAD | FLAGS_UPPERCASE;
   14436:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   14438:	f043 0321 	orr.w	r3, r3, #33	; 0x21
   1443c:	931f      	str	r3, [sp, #124]	; 0x7c
#if defined(PRINTF_SUPPORT_LONG_LONG)
        const bool is_ll = sizeof(uintptr_t) == sizeof(long long);
   1443e:	2300      	movs	r3, #0
   14440:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
        if (is_ll) {
          idx = _ntoa_long_long(out, buffer, idx, maxlen, (uintptr_t)va_arg(va, void*), false, 16U, precision, width, flags);
        }
        else {
#endif
          idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void*)), false, 16U, precision, width, flags);
   14444:	9b24      	ldr	r3, [sp, #144]	; 0x90
   14446:	1d1a      	adds	r2, r3, #4
   14448:	9224      	str	r2, [sp, #144]	; 0x90
   1444a:	681b      	ldr	r3, [r3, #0]
   1444c:	461a      	mov	r2, r3
   1444e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   14450:	9305      	str	r3, [sp, #20]
   14452:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   14454:	9304      	str	r3, [sp, #16]
   14456:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   14458:	9303      	str	r3, [sp, #12]
   1445a:	2310      	movs	r3, #16
   1445c:	9302      	str	r3, [sp, #8]
   1445e:	2300      	movs	r3, #0
   14460:	9301      	str	r3, [sp, #4]
   14462:	9200      	str	r2, [sp, #0]
   14464:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   14466:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   14468:	990c      	ldr	r1, [sp, #48]	; 0x30
   1446a:	980d      	ldr	r0, [sp, #52]	; 0x34
   1446c:	f7ff f8b8 	bl	135e0 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)>
   14470:	901b      	str	r0, [sp, #108]	; 0x6c
#if defined(PRINTF_SUPPORT_LONG_LONG)
        }
#endif
        format++;
   14472:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   14474:	3301      	adds	r3, #1
   14476:	930a      	str	r3, [sp, #40]	; 0x28
        break;
   14478:	e018      	b.n	144ac <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8bc>
      }

      case '%' :
        out('%', buffer, idx++, maxlen);
   1447a:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   1447c:	1c53      	adds	r3, r2, #1
   1447e:	931b      	str	r3, [sp, #108]	; 0x6c
   14480:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   14482:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   14484:	990c      	ldr	r1, [sp, #48]	; 0x30
   14486:	2025      	movs	r0, #37	; 0x25
   14488:	47a0      	blx	r4
        format++;
   1448a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1448c:	3301      	adds	r3, #1
   1448e:	930a      	str	r3, [sp, #40]	; 0x28
        break;
   14490:	e00c      	b.n	144ac <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8bc>

      default :
        out(*format, buffer, idx++, maxlen);
   14492:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   14494:	7818      	ldrb	r0, [r3, #0]
   14496:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   14498:	1c53      	adds	r3, r2, #1
   1449a:	931b      	str	r3, [sp, #108]	; 0x6c
   1449c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   1449e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   144a0:	990c      	ldr	r1, [sp, #48]	; 0x30
   144a2:	47a0      	blx	r4
        format++;
   144a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   144a6:	3301      	adds	r3, #1
   144a8:	930a      	str	r3, [sp, #40]	; 0x28
        break;
   144aa:	bf00      	nop
  while (*format)
   144ac:	f7ff bbb3 	b.w	13c16 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x26>
    }
  }

  // termination
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
   144b0:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   144b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   144b4:	429a      	cmp	r2, r3
   144b6:	d302      	bcc.n	144be <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8ce>
   144b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   144ba:	1e5a      	subs	r2, r3, #1
   144bc:	e000      	b.n	144c0 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8d0>
   144be:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   144c0:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   144c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   144c4:	990c      	ldr	r1, [sp, #48]	; 0x30
   144c6:	2000      	movs	r0, #0
   144c8:	47a0      	blx	r4

  // return written chars without terminating \0
  return (int)idx;
   144ca:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
   144cc:	4633      	mov	r3, r6
   144ce:	4619      	mov	r1, r3
   144d0:	4803      	ldr	r0, [pc, #12]	; (144e0 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8f0>)
   144d2:	f7fe fdbf 	bl	13054 <__cyg_profile_func_exit>
   144d6:	4623      	mov	r3, r4
}
   144d8:	4618      	mov	r0, r3
   144da:	b020      	add	sp, #128	; 0x80
   144dc:	bd70      	pop	{r4, r5, r6, pc}
   144de:	bf00      	nop
   144e0:	00013bf1 	.word	0x00013bf1

000144e4 <printf>:

///////////////////////////////////////////////////////////////////////////////


int printf(const char* format, ...)
{
   144e4:	b40f      	push	{r0, r1, r2, r3}
   144e6:	b530      	push	{r4, r5, lr}
   144e8:	b087      	sub	sp, #28
   144ea:	4675      	mov	r5, lr
   144ec:	462b      	mov	r3, r5
   144ee:	4619      	mov	r1, r3
   144f0:	480d      	ldr	r0, [pc, #52]	; (14528 <printf+0x44>)
   144f2:	f7fe fd9b 	bl	1302c <__cyg_profile_func_enter>
  va_list va;
  va_start(va, format);
   144f6:	ab0b      	add	r3, sp, #44	; 0x2c
   144f8:	9304      	str	r3, [sp, #16]
  char buffer[1];
  const int ret = _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
   144fa:	a903      	add	r1, sp, #12
   144fc:	9b04      	ldr	r3, [sp, #16]
   144fe:	9300      	str	r3, [sp, #0]
   14500:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   14502:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   14506:	4809      	ldr	r0, [pc, #36]	; (1452c <printf+0x48>)
   14508:	f7ff fb72 	bl	13bf0 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)>
   1450c:	9005      	str	r0, [sp, #20]
  va_end(va);
  return ret;
   1450e:	9c05      	ldr	r4, [sp, #20]
   14510:	462b      	mov	r3, r5
   14512:	4619      	mov	r1, r3
   14514:	4804      	ldr	r0, [pc, #16]	; (14528 <printf+0x44>)
   14516:	f7fe fd9d 	bl	13054 <__cyg_profile_func_exit>
   1451a:	4623      	mov	r3, r4
}
   1451c:	4618      	mov	r0, r3
   1451e:	b007      	add	sp, #28
   14520:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   14524:	b004      	add	sp, #16
   14526:	4770      	bx	lr
   14528:	000144e5 	.word	0x000144e5
   1452c:	00013259 	.word	0x00013259

00014530 <PinInterface::PinInterface()>:
class PinInterface
   14530:	b530      	push	{r4, r5, lr}
   14532:	b083      	sub	sp, #12
   14534:	4675      	mov	r5, lr
   14536:	9001      	str	r0, [sp, #4]
   14538:	462b      	mov	r3, r5
   1453a:	4619      	mov	r1, r3
   1453c:	4807      	ldr	r0, [pc, #28]	; (1455c <PinInterface::PinInterface()+0x2c>)
   1453e:	f7fe fd75 	bl	1302c <__cyg_profile_func_enter>
   14542:	4a07      	ldr	r2, [pc, #28]	; (14560 <PinInterface::PinInterface()+0x30>)
   14544:	9b01      	ldr	r3, [sp, #4]
   14546:	601a      	str	r2, [r3, #0]
   14548:	9c01      	ldr	r4, [sp, #4]
   1454a:	462b      	mov	r3, r5
   1454c:	4619      	mov	r1, r3
   1454e:	4803      	ldr	r0, [pc, #12]	; (1455c <PinInterface::PinInterface()+0x2c>)
   14550:	f7fe fd80 	bl	13054 <__cyg_profile_func_exit>
   14554:	4623      	mov	r3, r4
   14556:	4618      	mov	r0, r3
   14558:	b003      	add	sp, #12
   1455a:	bd30      	pop	{r4, r5, pc}
   1455c:	00014531 	.word	0x00014531
   14560:	00019164 	.word	0x00019164

00014564 <Pin::Pin(unsigned char, unsigned char)>:
  constexpr Pin(uint8_t port_number, uint8_t pin_number)
   14564:	b530      	push	{r4, r5, lr}
   14566:	b083      	sub	sp, #12
   14568:	4675      	mov	r5, lr
   1456a:	9001      	str	r0, [sp, #4]
   1456c:	460b      	mov	r3, r1
   1456e:	f88d 3003 	strb.w	r3, [sp, #3]
   14572:	4613      	mov	r3, r2
   14574:	f88d 3002 	strb.w	r3, [sp, #2]
   14578:	462b      	mov	r3, r5
   1457a:	4619      	mov	r1, r3
   1457c:	480d      	ldr	r0, [pc, #52]	; (145b4 <Pin::Pin(unsigned char, unsigned char)+0x50>)
   1457e:	f7fe fd55 	bl	1302c <__cyg_profile_func_enter>
      : port_(port_number), pin_(pin_number)
   14582:	9b01      	ldr	r3, [sp, #4]
   14584:	4618      	mov	r0, r3
   14586:	f7ff ffd3 	bl	14530 <PinInterface::PinInterface()>
   1458a:	4a0b      	ldr	r2, [pc, #44]	; (145b8 <Pin::Pin(unsigned char, unsigned char)+0x54>)
   1458c:	9b01      	ldr	r3, [sp, #4]
   1458e:	601a      	str	r2, [r3, #0]
   14590:	9b01      	ldr	r3, [sp, #4]
   14592:	f89d 2003 	ldrb.w	r2, [sp, #3]
   14596:	711a      	strb	r2, [r3, #4]
   14598:	9b01      	ldr	r3, [sp, #4]
   1459a:	f89d 2002 	ldrb.w	r2, [sp, #2]
   1459e:	715a      	strb	r2, [r3, #5]
  }
   145a0:	9c01      	ldr	r4, [sp, #4]
   145a2:	462b      	mov	r3, r5
   145a4:	4619      	mov	r1, r3
   145a6:	4803      	ldr	r0, [pc, #12]	; (145b4 <Pin::Pin(unsigned char, unsigned char)+0x50>)
   145a8:	f7fe fd54 	bl	13054 <__cyg_profile_func_exit>
   145ac:	4623      	mov	r3, r4
   145ae:	4618      	mov	r0, r3
   145b0:	b003      	add	sp, #12
   145b2:	bd30      	pop	{r4, r5, pc}
   145b4:	00014565 	.word	0x00014565
   145b8:	00017ac8 	.word	0x00017ac8

000145bc <GpioInterface::GpioInterface()>:
class GpioInterface
   145bc:	b530      	push	{r4, r5, lr}
   145be:	b083      	sub	sp, #12
   145c0:	4675      	mov	r5, lr
   145c2:	9001      	str	r0, [sp, #4]
   145c4:	462b      	mov	r3, r5
   145c6:	4619      	mov	r1, r3
   145c8:	4807      	ldr	r0, [pc, #28]	; (145e8 <GpioInterface::GpioInterface()+0x2c>)
   145ca:	f7fe fd2f 	bl	1302c <__cyg_profile_func_enter>
   145ce:	4a07      	ldr	r2, [pc, #28]	; (145ec <GpioInterface::GpioInterface()+0x30>)
   145d0:	9b01      	ldr	r3, [sp, #4]
   145d2:	601a      	str	r2, [r3, #0]
   145d4:	9c01      	ldr	r4, [sp, #4]
   145d6:	462b      	mov	r3, r5
   145d8:	4619      	mov	r1, r3
   145da:	4803      	ldr	r0, [pc, #12]	; (145e8 <GpioInterface::GpioInterface()+0x2c>)
   145dc:	f7fe fd3a 	bl	13054 <__cyg_profile_func_exit>
   145e0:	4623      	mov	r3, r4
   145e2:	4618      	mov	r0, r3
   145e4:	b003      	add	sp, #12
   145e6:	bd30      	pop	{r4, r5, pc}
   145e8:	000145bd 	.word	0x000145bd
   145ec:	0001911c 	.word	0x0001911c

000145f0 <Gpio::Gpio(unsigned char, unsigned char)>:
  constexpr Gpio(uint8_t port_number, uint8_t pin_number)
   145f0:	b530      	push	{r4, r5, lr}
   145f2:	b083      	sub	sp, #12
   145f4:	4675      	mov	r5, lr
   145f6:	9001      	str	r0, [sp, #4]
   145f8:	460b      	mov	r3, r1
   145fa:	f88d 3003 	strb.w	r3, [sp, #3]
   145fe:	4613      	mov	r3, r2
   14600:	f88d 3002 	strb.w	r3, [sp, #2]
   14604:	462b      	mov	r3, r5
   14606:	4619      	mov	r1, r3
   14608:	4816      	ldr	r0, [pc, #88]	; (14664 <Gpio::Gpio(unsigned char, unsigned char)+0x74>)
   1460a:	f7fe fd0f 	bl	1302c <__cyg_profile_func_enter>
        lpc40xx_pin_(port_number, pin_number)
   1460e:	9b01      	ldr	r3, [sp, #4]
   14610:	4618      	mov	r0, r3
   14612:	f7ff ffd3 	bl	145bc <GpioInterface::GpioInterface()>
   14616:	4a14      	ldr	r2, [pc, #80]	; (14668 <Gpio::Gpio(unsigned char, unsigned char)+0x78>)
   14618:	9b01      	ldr	r3, [sp, #4]
   1461a:	601a      	str	r2, [r3, #0]
   1461c:	9b01      	ldr	r3, [sp, #4]
   1461e:	2200      	movs	r2, #0
   14620:	711a      	strb	r2, [r3, #4]
   14622:	9b01      	ldr	r3, [sp, #4]
   14624:	f103 020c 	add.w	r2, r3, #12
   14628:	9b01      	ldr	r3, [sp, #4]
   1462a:	609a      	str	r2, [r3, #8]
   1462c:	9b01      	ldr	r3, [sp, #4]
   1462e:	330c      	adds	r3, #12
   14630:	f89d 2002 	ldrb.w	r2, [sp, #2]
   14634:	f89d 1003 	ldrb.w	r1, [sp, #3]
   14638:	4618      	mov	r0, r3
   1463a:	f7ff ff93 	bl	14564 <Pin::Pin(unsigned char, unsigned char)>
    interupt_port_ = (port_number == 2) ? 1 : 0;
   1463e:	f89d 3003 	ldrb.w	r3, [sp, #3]
   14642:	2b02      	cmp	r3, #2
   14644:	d101      	bne.n	1464a <Gpio::Gpio(unsigned char, unsigned char)+0x5a>
   14646:	2201      	movs	r2, #1
   14648:	e000      	b.n	1464c <Gpio::Gpio(unsigned char, unsigned char)+0x5c>
   1464a:	2200      	movs	r2, #0
   1464c:	9b01      	ldr	r3, [sp, #4]
   1464e:	711a      	strb	r2, [r3, #4]
  }
   14650:	9c01      	ldr	r4, [sp, #4]
   14652:	462b      	mov	r3, r5
   14654:	4619      	mov	r1, r3
   14656:	4803      	ldr	r0, [pc, #12]	; (14664 <Gpio::Gpio(unsigned char, unsigned char)+0x74>)
   14658:	f7fe fcfc 	bl	13054 <__cyg_profile_func_exit>
   1465c:	4623      	mov	r3, r4
   1465e:	4618      	mov	r0, r3
   14660:	b003      	add	sp, #12
   14662:	bd30      	pop	{r4, r5, pc}
   14664:	000145f1 	.word	0x000145f1
   14668:	000190d4 	.word	0x000190d4

0001466c <Gpio::SetAsInput()>:
  void SetAsInput(void) override
   1466c:	b530      	push	{r4, r5, lr}
   1466e:	b083      	sub	sp, #12
   14670:	4675      	mov	r5, lr
   14672:	9001      	str	r0, [sp, #4]
   14674:	462b      	mov	r3, r5
   14676:	4619      	mov	r1, r3
   14678:	4819      	ldr	r0, [pc, #100]	; (146e0 <Gpio::SetAsInput()+0x74>)
   1467a:	f7fe fcd7 	bl	1302c <__cyg_profile_func_enter>
    pin_->SetPinFunction(kGpioFunction);
   1467e:	9b01      	ldr	r3, [sp, #4]
   14680:	689a      	ldr	r2, [r3, #8]
   14682:	9b01      	ldr	r3, [sp, #4]
   14684:	689b      	ldr	r3, [r3, #8]
   14686:	681b      	ldr	r3, [r3, #0]
   14688:	681b      	ldr	r3, [r3, #0]
   1468a:	2100      	movs	r1, #0
   1468c:	4610      	mov	r0, r2
   1468e:	4798      	blx	r3
    gpio_port[pin_->GetPort()]->DIR &= ~(1 << pin_->GetPin());
   14690:	9b01      	ldr	r3, [sp, #4]
   14692:	689a      	ldr	r2, [r3, #8]
   14694:	9b01      	ldr	r3, [sp, #4]
   14696:	689b      	ldr	r3, [r3, #8]
   14698:	681b      	ldr	r3, [r3, #0]
   1469a:	3330      	adds	r3, #48	; 0x30
   1469c:	681b      	ldr	r3, [r3, #0]
   1469e:	4610      	mov	r0, r2
   146a0:	4798      	blx	r3
   146a2:	4603      	mov	r3, r0
   146a4:	461a      	mov	r2, r3
   146a6:	2301      	movs	r3, #1
   146a8:	4093      	lsls	r3, r2
   146aa:	43dc      	mvns	r4, r3
   146ac:	9b01      	ldr	r3, [sp, #4]
   146ae:	689a      	ldr	r2, [r3, #8]
   146b0:	9b01      	ldr	r3, [sp, #4]
   146b2:	689b      	ldr	r3, [r3, #8]
   146b4:	681b      	ldr	r3, [r3, #0]
   146b6:	332c      	adds	r3, #44	; 0x2c
   146b8:	681b      	ldr	r3, [r3, #0]
   146ba:	4610      	mov	r0, r2
   146bc:	4798      	blx	r3
   146be:	4603      	mov	r3, r0
   146c0:	461a      	mov	r2, r3
   146c2:	4b08      	ldr	r3, [pc, #32]	; (146e4 <Gpio::SetAsInput()+0x78>)
   146c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   146c8:	681a      	ldr	r2, [r3, #0]
   146ca:	4621      	mov	r1, r4
   146cc:	400a      	ands	r2, r1
   146ce:	601a      	str	r2, [r3, #0]
   146d0:	462b      	mov	r3, r5
   146d2:	4619      	mov	r1, r3
   146d4:	4802      	ldr	r0, [pc, #8]	; (146e0 <Gpio::SetAsInput()+0x74>)
   146d6:	f7fe fcbd 	bl	13054 <__cyg_profile_func_exit>
  }
   146da:	bf00      	nop
   146dc:	b003      	add	sp, #12
   146de:	bd30      	pop	{r4, r5, pc}
   146e0:	0001466d 	.word	0x0001466d
   146e4:	1000002c 	.word	0x1000002c

000146e8 <Gpio::SetAsOutput()>:
  void SetAsOutput(void) override
   146e8:	b530      	push	{r4, r5, lr}
   146ea:	b083      	sub	sp, #12
   146ec:	4675      	mov	r5, lr
   146ee:	9001      	str	r0, [sp, #4]
   146f0:	462b      	mov	r3, r5
   146f2:	4619      	mov	r1, r3
   146f4:	4819      	ldr	r0, [pc, #100]	; (1475c <Gpio::SetAsOutput()+0x74>)
   146f6:	f7fe fc99 	bl	1302c <__cyg_profile_func_enter>
    pin_->SetPinFunction(kGpioFunction);
   146fa:	9b01      	ldr	r3, [sp, #4]
   146fc:	689a      	ldr	r2, [r3, #8]
   146fe:	9b01      	ldr	r3, [sp, #4]
   14700:	689b      	ldr	r3, [r3, #8]
   14702:	681b      	ldr	r3, [r3, #0]
   14704:	681b      	ldr	r3, [r3, #0]
   14706:	2100      	movs	r1, #0
   14708:	4610      	mov	r0, r2
   1470a:	4798      	blx	r3
    gpio_port[pin_->GetPort()]->DIR |= (1 << pin_->GetPin());
   1470c:	9b01      	ldr	r3, [sp, #4]
   1470e:	689a      	ldr	r2, [r3, #8]
   14710:	9b01      	ldr	r3, [sp, #4]
   14712:	689b      	ldr	r3, [r3, #8]
   14714:	681b      	ldr	r3, [r3, #0]
   14716:	3330      	adds	r3, #48	; 0x30
   14718:	681b      	ldr	r3, [r3, #0]
   1471a:	4610      	mov	r0, r2
   1471c:	4798      	blx	r3
   1471e:	4603      	mov	r3, r0
   14720:	461a      	mov	r2, r3
   14722:	2301      	movs	r3, #1
   14724:	fa03 f402 	lsl.w	r4, r3, r2
   14728:	9b01      	ldr	r3, [sp, #4]
   1472a:	689a      	ldr	r2, [r3, #8]
   1472c:	9b01      	ldr	r3, [sp, #4]
   1472e:	689b      	ldr	r3, [r3, #8]
   14730:	681b      	ldr	r3, [r3, #0]
   14732:	332c      	adds	r3, #44	; 0x2c
   14734:	681b      	ldr	r3, [r3, #0]
   14736:	4610      	mov	r0, r2
   14738:	4798      	blx	r3
   1473a:	4603      	mov	r3, r0
   1473c:	461a      	mov	r2, r3
   1473e:	4b08      	ldr	r3, [pc, #32]	; (14760 <Gpio::SetAsOutput()+0x78>)
   14740:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   14744:	681a      	ldr	r2, [r3, #0]
   14746:	4621      	mov	r1, r4
   14748:	430a      	orrs	r2, r1
   1474a:	601a      	str	r2, [r3, #0]
   1474c:	462b      	mov	r3, r5
   1474e:	4619      	mov	r1, r3
   14750:	4802      	ldr	r0, [pc, #8]	; (1475c <Gpio::SetAsOutput()+0x74>)
   14752:	f7fe fc7f 	bl	13054 <__cyg_profile_func_exit>
  }
   14756:	bf00      	nop
   14758:	b003      	add	sp, #12
   1475a:	bd30      	pop	{r4, r5, pc}
   1475c:	000146e9 	.word	0x000146e9
   14760:	1000002c 	.word	0x1000002c

00014764 <Gpio::SetDirection(GpioInterface::Direction)>:
  inline void SetDirection(Direction direction) override
   14764:	b510      	push	{r4, lr}
   14766:	b082      	sub	sp, #8
   14768:	4674      	mov	r4, lr
   1476a:	9001      	str	r0, [sp, #4]
   1476c:	460b      	mov	r3, r1
   1476e:	f88d 3003 	strb.w	r3, [sp, #3]
   14772:	4623      	mov	r3, r4
   14774:	4619      	mov	r1, r3
   14776:	480b      	ldr	r0, [pc, #44]	; (147a4 <Gpio::SetDirection(GpioInterface::Direction)+0x40>)
   14778:	f7fe fc58 	bl	1302c <__cyg_profile_func_enter>
    (direction) ? SetAsOutput() : SetAsInput();
   1477c:	f89d 3003 	ldrb.w	r3, [sp, #3]
   14780:	2b00      	cmp	r3, #0
   14782:	d003      	beq.n	1478c <Gpio::SetDirection(GpioInterface::Direction)+0x28>
   14784:	9801      	ldr	r0, [sp, #4]
   14786:	f7ff ffaf 	bl	146e8 <Gpio::SetAsOutput()>
   1478a:	e002      	b.n	14792 <Gpio::SetDirection(GpioInterface::Direction)+0x2e>
   1478c:	9801      	ldr	r0, [sp, #4]
   1478e:	f7ff ff6d 	bl	1466c <Gpio::SetAsInput()>
   14792:	4623      	mov	r3, r4
   14794:	4619      	mov	r1, r3
   14796:	4803      	ldr	r0, [pc, #12]	; (147a4 <Gpio::SetDirection(GpioInterface::Direction)+0x40>)
   14798:	f7fe fc5c 	bl	13054 <__cyg_profile_func_exit>
  }
   1479c:	bf00      	nop
   1479e:	b002      	add	sp, #8
   147a0:	bd10      	pop	{r4, pc}
   147a2:	bf00      	nop
   147a4:	00014765 	.word	0x00014765

000147a8 <Gpio::Toggle()>:
  // Toggle the output of a GPIO output pin
  void Toggle() override
   147a8:	b530      	push	{r4, r5, lr}
   147aa:	b083      	sub	sp, #12
   147ac:	4675      	mov	r5, lr
   147ae:	9001      	str	r0, [sp, #4]
   147b0:	462b      	mov	r3, r5
   147b2:	4619      	mov	r1, r3
   147b4:	4815      	ldr	r0, [pc, #84]	; (1480c <Gpio::Toggle()+0x64>)
   147b6:	f7fe fc39 	bl	1302c <__cyg_profile_func_enter>
  {
    gpio_port[pin_->GetPort()]->PIN ^= (1 << pin_->GetPin());
   147ba:	9b01      	ldr	r3, [sp, #4]
   147bc:	689a      	ldr	r2, [r3, #8]
   147be:	9b01      	ldr	r3, [sp, #4]
   147c0:	689b      	ldr	r3, [r3, #8]
   147c2:	681b      	ldr	r3, [r3, #0]
   147c4:	3330      	adds	r3, #48	; 0x30
   147c6:	681b      	ldr	r3, [r3, #0]
   147c8:	4610      	mov	r0, r2
   147ca:	4798      	blx	r3
   147cc:	4603      	mov	r3, r0
   147ce:	461a      	mov	r2, r3
   147d0:	2301      	movs	r3, #1
   147d2:	fa03 f402 	lsl.w	r4, r3, r2
   147d6:	9b01      	ldr	r3, [sp, #4]
   147d8:	689a      	ldr	r2, [r3, #8]
   147da:	9b01      	ldr	r3, [sp, #4]
   147dc:	689b      	ldr	r3, [r3, #8]
   147de:	681b      	ldr	r3, [r3, #0]
   147e0:	332c      	adds	r3, #44	; 0x2c
   147e2:	681b      	ldr	r3, [r3, #0]
   147e4:	4610      	mov	r0, r2
   147e6:	4798      	blx	r3
   147e8:	4603      	mov	r3, r0
   147ea:	461a      	mov	r2, r3
   147ec:	4b08      	ldr	r3, [pc, #32]	; (14810 <Gpio::Toggle()+0x68>)
   147ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   147f2:	695a      	ldr	r2, [r3, #20]
   147f4:	4621      	mov	r1, r4
   147f6:	404a      	eors	r2, r1
   147f8:	615a      	str	r2, [r3, #20]
   147fa:	462b      	mov	r3, r5
   147fc:	4619      	mov	r1, r3
   147fe:	4803      	ldr	r0, [pc, #12]	; (1480c <Gpio::Toggle()+0x64>)
   14800:	f7fe fc28 	bl	13054 <__cyg_profile_func_exit>
  }
   14804:	bf00      	nop
   14806:	b003      	add	sp, #12
   14808:	bd30      	pop	{r4, r5, pc}
   1480a:	bf00      	nop
   1480c:	000147a9 	.word	0x000147a9
   14810:	1000002c 	.word	0x1000002c

00014814 <Gpio::ReadState()>:
  // Returns the current State state of the pin
  State ReadState(void) override
   14814:	b530      	push	{r4, r5, lr}
   14816:	b085      	sub	sp, #20
   14818:	4675      	mov	r5, lr
   1481a:	9001      	str	r0, [sp, #4]
   1481c:	462b      	mov	r3, r5
   1481e:	4619      	mov	r1, r3
   14820:	4818      	ldr	r0, [pc, #96]	; (14884 <Gpio::ReadState()+0x70>)
   14822:	f7fe fc03 	bl	1302c <__cyg_profile_func_enter>
  {
    bool state = (gpio_port[pin_->GetPort()]->PIN >> pin_->GetPin()) & 1;
   14826:	9b01      	ldr	r3, [sp, #4]
   14828:	689a      	ldr	r2, [r3, #8]
   1482a:	9b01      	ldr	r3, [sp, #4]
   1482c:	689b      	ldr	r3, [r3, #8]
   1482e:	681b      	ldr	r3, [r3, #0]
   14830:	332c      	adds	r3, #44	; 0x2c
   14832:	681b      	ldr	r3, [r3, #0]
   14834:	4610      	mov	r0, r2
   14836:	4798      	blx	r3
   14838:	4603      	mov	r3, r0
   1483a:	461a      	mov	r2, r3
   1483c:	4b12      	ldr	r3, [pc, #72]	; (14888 <Gpio::ReadState()+0x74>)
   1483e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   14842:	695c      	ldr	r4, [r3, #20]
   14844:	9b01      	ldr	r3, [sp, #4]
   14846:	689a      	ldr	r2, [r3, #8]
   14848:	9b01      	ldr	r3, [sp, #4]
   1484a:	689b      	ldr	r3, [r3, #8]
   1484c:	681b      	ldr	r3, [r3, #0]
   1484e:	3330      	adds	r3, #48	; 0x30
   14850:	681b      	ldr	r3, [r3, #0]
   14852:	4610      	mov	r0, r2
   14854:	4798      	blx	r3
   14856:	4603      	mov	r3, r0
   14858:	fa24 f303 	lsr.w	r3, r4, r3
   1485c:	f003 0301 	and.w	r3, r3, #1
   14860:	2b00      	cmp	r3, #0
   14862:	bf14      	ite	ne
   14864:	2301      	movne	r3, #1
   14866:	2300      	moveq	r3, #0
   14868:	f88d 300f 	strb.w	r3, [sp, #15]
    return static_cast<State>(state);
   1486c:	f89d 400f 	ldrb.w	r4, [sp, #15]
   14870:	462b      	mov	r3, r5
   14872:	4619      	mov	r1, r3
   14874:	4803      	ldr	r0, [pc, #12]	; (14884 <Gpio::ReadState()+0x70>)
   14876:	f7fe fbed 	bl	13054 <__cyg_profile_func_exit>
   1487a:	4623      	mov	r3, r4
  }
   1487c:	4618      	mov	r0, r3
   1487e:	b005      	add	sp, #20
   14880:	bd30      	pop	{r4, r5, pc}
   14882:	bf00      	nop
   14884:	00014815 	.word	0x00014815
   14888:	1000002c 	.word	0x1000002c

0001488c <Gpio::Read()>:
  // Returns true if input or output pin is high
  bool Read(void) override
   1488c:	b530      	push	{r4, r5, lr}
   1488e:	b083      	sub	sp, #12
   14890:	4675      	mov	r5, lr
   14892:	9001      	str	r0, [sp, #4]
   14894:	462b      	mov	r3, r5
   14896:	4619      	mov	r1, r3
   14898:	4816      	ldr	r0, [pc, #88]	; (148f4 <Gpio::Read()+0x68>)
   1489a:	f7fe fbc7 	bl	1302c <__cyg_profile_func_enter>
  {
    return (gpio_port[pin_->GetPort()]->PIN >> pin_->GetPin()) & 1;
   1489e:	9b01      	ldr	r3, [sp, #4]
   148a0:	689a      	ldr	r2, [r3, #8]
   148a2:	9b01      	ldr	r3, [sp, #4]
   148a4:	689b      	ldr	r3, [r3, #8]
   148a6:	681b      	ldr	r3, [r3, #0]
   148a8:	332c      	adds	r3, #44	; 0x2c
   148aa:	681b      	ldr	r3, [r3, #0]
   148ac:	4610      	mov	r0, r2
   148ae:	4798      	blx	r3
   148b0:	4603      	mov	r3, r0
   148b2:	461a      	mov	r2, r3
   148b4:	4b10      	ldr	r3, [pc, #64]	; (148f8 <Gpio::Read()+0x6c>)
   148b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   148ba:	695c      	ldr	r4, [r3, #20]
   148bc:	9b01      	ldr	r3, [sp, #4]
   148be:	689a      	ldr	r2, [r3, #8]
   148c0:	9b01      	ldr	r3, [sp, #4]
   148c2:	689b      	ldr	r3, [r3, #8]
   148c4:	681b      	ldr	r3, [r3, #0]
   148c6:	3330      	adds	r3, #48	; 0x30
   148c8:	681b      	ldr	r3, [r3, #0]
   148ca:	4610      	mov	r0, r2
   148cc:	4798      	blx	r3
   148ce:	4603      	mov	r3, r0
   148d0:	fa24 f303 	lsr.w	r3, r4, r3
   148d4:	f003 0301 	and.w	r3, r3, #1
   148d8:	2b00      	cmp	r3, #0
   148da:	bf14      	ite	ne
   148dc:	2301      	movne	r3, #1
   148de:	2300      	moveq	r3, #0
   148e0:	b2dc      	uxtb	r4, r3
   148e2:	462b      	mov	r3, r5
   148e4:	4619      	mov	r1, r3
   148e6:	4803      	ldr	r0, [pc, #12]	; (148f4 <Gpio::Read()+0x68>)
   148e8:	f7fe fbb4 	bl	13054 <__cyg_profile_func_exit>
   148ec:	4623      	mov	r3, r4
  }
   148ee:	4618      	mov	r0, r3
   148f0:	b003      	add	sp, #12
   148f2:	bd30      	pop	{r4, r5, pc}
   148f4:	0001488d 	.word	0x0001488d
   148f8:	1000002c 	.word	0x1000002c

000148fc <Gpio::GetPin()>:
  PinInterface & GetPin() override
   148fc:	b530      	push	{r4, r5, lr}
   148fe:	b083      	sub	sp, #12
   14900:	4675      	mov	r5, lr
   14902:	9001      	str	r0, [sp, #4]
   14904:	462b      	mov	r3, r5
   14906:	4619      	mov	r1, r3
   14908:	4806      	ldr	r0, [pc, #24]	; (14924 <Gpio::GetPin()+0x28>)
   1490a:	f7fe fb8f 	bl	1302c <__cyg_profile_func_enter>
  {
    return *pin_;
   1490e:	9b01      	ldr	r3, [sp, #4]
   14910:	689c      	ldr	r4, [r3, #8]
   14912:	462b      	mov	r3, r5
   14914:	4619      	mov	r1, r3
   14916:	4803      	ldr	r0, [pc, #12]	; (14924 <Gpio::GetPin()+0x28>)
   14918:	f7fe fb9c 	bl	13054 <__cyg_profile_func_exit>
   1491c:	4623      	mov	r3, r4
  }
   1491e:	4618      	mov	r0, r3
   14920:	b003      	add	sp, #12
   14922:	bd30      	pop	{r4, r5, pc}
   14924:	000148fd 	.word	0x000148fd

00014928 <Gpio::ValidPortCheck()>:

  // Checks if the selected gpio port is valid for external interrupts.
  bool ValidPortCheck()
   14928:	b530      	push	{r4, r5, lr}
   1492a:	b087      	sub	sp, #28
   1492c:	4675      	mov	r5, lr
   1492e:	9003      	str	r0, [sp, #12]
   14930:	462b      	mov	r3, r5
   14932:	4619      	mov	r1, r3
   14934:	4817      	ldr	r0, [pc, #92]	; (14994 <Gpio::ValidPortCheck()+0x6c>)
   14936:	f7fe fb79 	bl	1302c <__cyg_profile_func_enter>
  {
    bool is_valid = (interupt_port_ <= 1);
   1493a:	9b03      	ldr	r3, [sp, #12]
   1493c:	791b      	ldrb	r3, [r3, #4]
   1493e:	2b01      	cmp	r3, #1
   14940:	bf94      	ite	ls
   14942:	2301      	movls	r3, #1
   14944:	2300      	movhi	r3, #0
   14946:	b2db      	uxtb	r3, r3
   14948:	f88d 3017 	strb.w	r3, [sp, #23]
    SJ2_ASSERT_WARNING(is_valid,
   1494c:	f89d 3017 	ldrb.w	r3, [sp, #23]
   14950:	f083 0301 	eor.w	r3, r3, #1
   14954:	b2db      	uxtb	r3, r3
   14956:	2b00      	cmp	r3, #0
   14958:	d010      	beq.n	1497c <Gpio::ValidPortCheck()+0x54>
   1495a:	9b03      	ldr	r3, [sp, #12]
   1495c:	689a      	ldr	r2, [r3, #8]
   1495e:	9b03      	ldr	r3, [sp, #12]
   14960:	689b      	ldr	r3, [r3, #8]
   14962:	681b      	ldr	r3, [r3, #0]
   14964:	332c      	adds	r3, #44	; 0x2c
   14966:	681b      	ldr	r3, [r3, #0]
   14968:	4610      	mov	r0, r2
   1496a:	4798      	blx	r3
   1496c:	4603      	mov	r3, r0
   1496e:	9300      	str	r3, [sp, #0]
   14970:	23a6      	movs	r3, #166	; 0xa6
   14972:	4a09      	ldr	r2, [pc, #36]	; (14998 <Gpio::ValidPortCheck()+0x70>)
   14974:	4909      	ldr	r1, [pc, #36]	; (1499c <Gpio::ValidPortCheck()+0x74>)
   14976:	480a      	ldr	r0, [pc, #40]	; (149a0 <Gpio::ValidPortCheck()+0x78>)
   14978:	f7ff fdb4 	bl	144e4 <printf>
                       "Port %d cannot be used for External Interrupts. Need "
                       "to use GPIO on Port 0 or 2.",
                       pin_->GetPort());
    return is_valid;
   1497c:	f89d 4017 	ldrb.w	r4, [sp, #23]
   14980:	462b      	mov	r3, r5
   14982:	4619      	mov	r1, r3
   14984:	4803      	ldr	r0, [pc, #12]	; (14994 <Gpio::ValidPortCheck()+0x6c>)
   14986:	f7fe fb65 	bl	13054 <__cyg_profile_func_exit>
   1498a:	4623      	mov	r3, r4
  }
   1498c:	4618      	mov	r0, r3
   1498e:	b007      	add	sp, #28
   14990:	bd30      	pop	{r4, r5, pc}
   14992:	bf00      	nop
   14994:	00014929 	.word	0x00014929
   14998:	000191d4 	.word	0x000191d4
   1499c:	00018bc8 	.word	0x00018bc8
   149a0:	00018098 	.word	0x00018098

000149a4 <Gpio::SetInterruptRoutine(void (*)())>:

  // Assigns the developer's ISR function to the port/pin gpio instance.
  void SetInterruptRoutine(IsrPointer function) override
   149a4:	b570      	push	{r4, r5, r6, lr}
   149a6:	b082      	sub	sp, #8
   149a8:	4676      	mov	r6, lr
   149aa:	9001      	str	r0, [sp, #4]
   149ac:	9100      	str	r1, [sp, #0]
   149ae:	4633      	mov	r3, r6
   149b0:	4619      	mov	r1, r3
   149b2:	4811      	ldr	r0, [pc, #68]	; (149f8 <Gpio::SetInterruptRoutine(void (*)())+0x54>)
   149b4:	f7fe fb3a 	bl	1302c <__cyg_profile_func_enter>
  {
    ValidPortCheck();
   149b8:	9801      	ldr	r0, [sp, #4]
   149ba:	f7ff ffb5 	bl	14928 <Gpio::ValidPortCheck()>
    interrupthandlers[interupt_port_][pin_->GetPin()] = function;
   149be:	9c00      	ldr	r4, [sp, #0]
   149c0:	9b01      	ldr	r3, [sp, #4]
   149c2:	791b      	ldrb	r3, [r3, #4]
   149c4:	461d      	mov	r5, r3
   149c6:	9b01      	ldr	r3, [sp, #4]
   149c8:	689a      	ldr	r2, [r3, #8]
   149ca:	9b01      	ldr	r3, [sp, #4]
   149cc:	689b      	ldr	r3, [r3, #8]
   149ce:	681b      	ldr	r3, [r3, #0]
   149d0:	3330      	adds	r3, #48	; 0x30
   149d2:	681b      	ldr	r3, [r3, #0]
   149d4:	4610      	mov	r0, r2
   149d6:	4798      	blx	r3
   149d8:	4603      	mov	r3, r0
   149da:	4619      	mov	r1, r3
   149dc:	4a07      	ldr	r2, [pc, #28]	; (149fc <Gpio::SetInterruptRoutine(void (*)())+0x58>)
   149de:	016b      	lsls	r3, r5, #5
   149e0:	440b      	add	r3, r1
   149e2:	f842 4023 	str.w	r4, [r2, r3, lsl #2]
   149e6:	4633      	mov	r3, r6
   149e8:	4619      	mov	r1, r3
   149ea:	4803      	ldr	r0, [pc, #12]	; (149f8 <Gpio::SetInterruptRoutine(void (*)())+0x54>)
   149ec:	f7fe fb32 	bl	13054 <__cyg_profile_func_exit>
  }
   149f0:	bf00      	nop
   149f2:	b002      	add	sp, #8
   149f4:	bd70      	pop	{r4, r5, r6, pc}
   149f6:	bf00      	nop
   149f8:	000149a5 	.word	0x000149a5
   149fc:	10000568 	.word	0x10000568

00014a00 <Gpio::ClearInterruptRoutine()>:

  // Clears the developers ISR function from the port/pin gio instance.
  void ClearInterruptRoutine() override
   14a00:	b530      	push	{r4, r5, lr}
   14a02:	b083      	sub	sp, #12
   14a04:	4675      	mov	r5, lr
   14a06:	9001      	str	r0, [sp, #4]
   14a08:	462b      	mov	r3, r5
   14a0a:	4619      	mov	r1, r3
   14a0c:	480f      	ldr	r0, [pc, #60]	; (14a4c <Gpio::ClearInterruptRoutine()+0x4c>)
   14a0e:	f7fe fb0d 	bl	1302c <__cyg_profile_func_enter>
  {
    interrupthandlers[interupt_port_][pin_->GetPin()] = nullptr;
   14a12:	9b01      	ldr	r3, [sp, #4]
   14a14:	791b      	ldrb	r3, [r3, #4]
   14a16:	461c      	mov	r4, r3
   14a18:	9b01      	ldr	r3, [sp, #4]
   14a1a:	689a      	ldr	r2, [r3, #8]
   14a1c:	9b01      	ldr	r3, [sp, #4]
   14a1e:	689b      	ldr	r3, [r3, #8]
   14a20:	681b      	ldr	r3, [r3, #0]
   14a22:	3330      	adds	r3, #48	; 0x30
   14a24:	681b      	ldr	r3, [r3, #0]
   14a26:	4610      	mov	r0, r2
   14a28:	4798      	blx	r3
   14a2a:	4603      	mov	r3, r0
   14a2c:	4619      	mov	r1, r3
   14a2e:	4a08      	ldr	r2, [pc, #32]	; (14a50 <Gpio::ClearInterruptRoutine()+0x50>)
   14a30:	0163      	lsls	r3, r4, #5
   14a32:	440b      	add	r3, r1
   14a34:	2100      	movs	r1, #0
   14a36:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
   14a3a:	462b      	mov	r3, r5
   14a3c:	4619      	mov	r1, r3
   14a3e:	4803      	ldr	r0, [pc, #12]	; (14a4c <Gpio::ClearInterruptRoutine()+0x4c>)
   14a40:	f7fe fb08 	bl	13054 <__cyg_profile_func_exit>
  }
   14a44:	bf00      	nop
   14a46:	b003      	add	sp, #12
   14a48:	bd30      	pop	{r4, r5, pc}
   14a4a:	bf00      	nop
   14a4c:	00014a01 	.word	0x00014a01
   14a50:	10000568 	.word	0x10000568

00014a54 <unsigned char util::Value<GpioInterface::Edge, unsigned char>(GpioInterface::Edge)>:
constexpr Type Value(Enum enum_type_value)
   14a54:	b530      	push	{r4, r5, lr}
   14a56:	b083      	sub	sp, #12
   14a58:	4675      	mov	r5, lr
   14a5a:	4603      	mov	r3, r0
   14a5c:	f88d 3007 	strb.w	r3, [sp, #7]
   14a60:	462b      	mov	r3, r5
   14a62:	4619      	mov	r1, r3
   14a64:	4806      	ldr	r0, [pc, #24]	; (14a80 <unsigned char util::Value<GpioInterface::Edge, unsigned char>(GpioInterface::Edge)+0x2c>)
   14a66:	f7fe fae1 	bl	1302c <__cyg_profile_func_enter>
  return static_cast<Type>(enum_type_value);
   14a6a:	f89d 4007 	ldrb.w	r4, [sp, #7]
   14a6e:	462b      	mov	r3, r5
   14a70:	4619      	mov	r1, r3
   14a72:	4803      	ldr	r0, [pc, #12]	; (14a80 <unsigned char util::Value<GpioInterface::Edge, unsigned char>(GpioInterface::Edge)+0x2c>)
   14a74:	f7fe faee 	bl	13054 <__cyg_profile_func_exit>
   14a78:	4623      	mov	r3, r4
}
   14a7a:	4618      	mov	r0, r3
   14a7c:	b003      	add	sp, #12
   14a7e:	bd30      	pop	{r4, r5, pc}
   14a80:	00014a55 	.word	0x00014a55

00014a84 <Gpio::SetInterruptEdge(GpioInterface::Edge)>:

  // Sets the selected edge that the gpio interrupt will be triggered on.
  void SetInterruptEdge(Edge edge) override
   14a84:	b510      	push	{r4, lr}
   14a86:	b084      	sub	sp, #16
   14a88:	4674      	mov	r4, lr
   14a8a:	9003      	str	r0, [sp, #12]
   14a8c:	460b      	mov	r3, r1
   14a8e:	f88d 300b 	strb.w	r3, [sp, #11]
   14a92:	4623      	mov	r3, r4
   14a94:	4619      	mov	r1, r3
   14a96:	4819      	ldr	r0, [pc, #100]	; (14afc <Gpio::SetInterruptEdge(GpioInterface::Edge)+0x78>)
   14a98:	f7fe fac8 	bl	1302c <__cyg_profile_func_enter>
  {
    ValidPortCheck();
   14a9c:	9803      	ldr	r0, [sp, #12]
   14a9e:	f7ff ff43 	bl	14928 <Gpio::ValidPortCheck()>
    switch (edge)
   14aa2:	f89d 300b 	ldrb.w	r3, [sp, #11]
   14aa6:	2b01      	cmp	r3, #1
   14aa8:	d008      	beq.n	14abc <Gpio::SetInterruptEdge(GpioInterface::Edge)+0x38>
   14aaa:	2b01      	cmp	r3, #1
   14aac:	d302      	bcc.n	14ab4 <Gpio::SetInterruptEdge(GpioInterface::Edge)+0x30>
   14aae:	2b02      	cmp	r3, #2
   14ab0:	d008      	beq.n	14ac4 <Gpio::SetInterruptEdge(GpioInterface::Edge)+0x40>
   14ab2:	e00e      	b.n	14ad2 <Gpio::SetInterruptEdge(GpioInterface::Edge)+0x4e>
    {
      case Edge::kEdgeRising:
      {
        SetEdgeRising();
   14ab4:	9803      	ldr	r0, [sp, #12]
   14ab6:	f000 f8b1 	bl	14c1c <Gpio::SetEdgeRising()>
        break;
   14aba:	e017      	b.n	14aec <Gpio::SetInterruptEdge(GpioInterface::Edge)+0x68>
      }
      case Edge::kEdgeFalling:
      {
        SetEdgeFalling();
   14abc:	9803      	ldr	r0, [sp, #12]
   14abe:	f000 f8eb 	bl	14c98 <Gpio::SetEdgeFalling()>
        break;
   14ac2:	e013      	b.n	14aec <Gpio::SetInterruptEdge(GpioInterface::Edge)+0x68>
      }
      case Edge::kEdgeBoth:
      {
        SetEdgeRising();
   14ac4:	9803      	ldr	r0, [sp, #12]
   14ac6:	f000 f8a9 	bl	14c1c <Gpio::SetEdgeRising()>
        SetEdgeFalling();
   14aca:	9803      	ldr	r0, [sp, #12]
   14acc:	f000 f8e4 	bl	14c98 <Gpio::SetEdgeFalling()>
        break;
   14ad0:	e00c      	b.n	14aec <Gpio::SetInterruptEdge(GpioInterface::Edge)+0x68>
      }
      default:
      {
        LOG_WARNING(
   14ad2:	f89d 300b 	ldrb.w	r3, [sp, #11]
   14ad6:	4618      	mov	r0, r3
   14ad8:	f7ff ffbc 	bl	14a54 <unsigned char util::Value<GpioInterface::Edge, unsigned char>(GpioInterface::Edge)>
   14adc:	4603      	mov	r3, r0
   14ade:	9300      	str	r3, [sp, #0]
   14ae0:	23d2      	movs	r3, #210	; 0xd2
   14ae2:	4a07      	ldr	r2, [pc, #28]	; (14b00 <Gpio::SetInterruptEdge(GpioInterface::Edge)+0x7c>)
   14ae4:	4907      	ldr	r1, [pc, #28]	; (14b04 <Gpio::SetInterruptEdge(GpioInterface::Edge)+0x80>)
   14ae6:	4808      	ldr	r0, [pc, #32]	; (14b08 <Gpio::SetInterruptEdge(GpioInterface::Edge)+0x84>)
   14ae8:	f7ff fcfc 	bl	144e4 <printf>
   14aec:	4623      	mov	r3, r4
   14aee:	4619      	mov	r1, r3
   14af0:	4802      	ldr	r0, [pc, #8]	; (14afc <Gpio::SetInterruptEdge(GpioInterface::Edge)+0x78>)
   14af2:	f7fe faaf 	bl	13054 <__cyg_profile_func_exit>
            "Edge %d cannot be used for External Interrupts."
            "Need to use a rising, falling, or both configuration.",
            util::Value(edge));
      }
    }
  }
   14af6:	bf00      	nop
   14af8:	b004      	add	sp, #16
   14afa:	bd10      	pop	{r4, pc}
   14afc:	00014a85 	.word	0x00014a85
   14b00:	000191f0 	.word	0x000191f0
   14b04:	00018bd4 	.word	0x00018bd4
   14b08:	00018128 	.word	0x00018128

00014b0c <Gpio::ClearInterruptEdge(GpioInterface::Edge)>:

  // Clears the seleted edge of the gpio interrupt from being triggered.
  void ClearInterruptEdge(Edge edge) override
   14b0c:	b510      	push	{r4, lr}
   14b0e:	b084      	sub	sp, #16
   14b10:	4674      	mov	r4, lr
   14b12:	9003      	str	r0, [sp, #12]
   14b14:	460b      	mov	r3, r1
   14b16:	f88d 300b 	strb.w	r3, [sp, #11]
   14b1a:	4623      	mov	r3, r4
   14b1c:	4619      	mov	r1, r3
   14b1e:	4819      	ldr	r0, [pc, #100]	; (14b84 <Gpio::ClearInterruptEdge(GpioInterface::Edge)+0x78>)
   14b20:	f7fe fa84 	bl	1302c <__cyg_profile_func_enter>
  {
    ValidPortCheck();
   14b24:	9803      	ldr	r0, [sp, #12]
   14b26:	f7ff feff 	bl	14928 <Gpio::ValidPortCheck()>
    switch (edge)
   14b2a:	f89d 300b 	ldrb.w	r3, [sp, #11]
   14b2e:	2b01      	cmp	r3, #1
   14b30:	d008      	beq.n	14b44 <Gpio::ClearInterruptEdge(GpioInterface::Edge)+0x38>
   14b32:	2b01      	cmp	r3, #1
   14b34:	d302      	bcc.n	14b3c <Gpio::ClearInterruptEdge(GpioInterface::Edge)+0x30>
   14b36:	2b02      	cmp	r3, #2
   14b38:	d008      	beq.n	14b4c <Gpio::ClearInterruptEdge(GpioInterface::Edge)+0x40>
   14b3a:	e00e      	b.n	14b5a <Gpio::ClearInterruptEdge(GpioInterface::Edge)+0x4e>
    {
      case Edge::kEdgeRising:
      {
        ClearEdgeRising();
   14b3c:	9803      	ldr	r0, [sp, #12]
   14b3e:	f000 f8e9 	bl	14d14 <Gpio::ClearEdgeRising()>
        break;
   14b42:	e017      	b.n	14b74 <Gpio::ClearInterruptEdge(GpioInterface::Edge)+0x68>
      }
      case Edge::kEdgeFalling:
      {
        ClearEdgeFalling();
   14b44:	9803      	ldr	r0, [sp, #12]
   14b46:	f000 f923 	bl	14d90 <Gpio::ClearEdgeFalling()>
        break;
   14b4a:	e013      	b.n	14b74 <Gpio::ClearInterruptEdge(GpioInterface::Edge)+0x68>
      }
      case Edge::kEdgeBoth:
      {
        ClearEdgeRising();
   14b4c:	9803      	ldr	r0, [sp, #12]
   14b4e:	f000 f8e1 	bl	14d14 <Gpio::ClearEdgeRising()>
        ClearEdgeFalling();
   14b52:	9803      	ldr	r0, [sp, #12]
   14b54:	f000 f91c 	bl	14d90 <Gpio::ClearEdgeFalling()>
        break;
   14b58:	e00c      	b.n	14b74 <Gpio::ClearInterruptEdge(GpioInterface::Edge)+0x68>
      }
      default:
      {
        LOG_WARNING(
   14b5a:	f89d 300b 	ldrb.w	r3, [sp, #11]
   14b5e:	4618      	mov	r0, r3
   14b60:	f7ff ff78 	bl	14a54 <unsigned char util::Value<GpioInterface::Edge, unsigned char>(GpioInterface::Edge)>
   14b64:	4603      	mov	r3, r0
   14b66:	9300      	str	r3, [sp, #0]
   14b68:	23f2      	movs	r3, #242	; 0xf2
   14b6a:	4a07      	ldr	r2, [pc, #28]	; (14b88 <Gpio::ClearInterruptEdge(GpioInterface::Edge)+0x7c>)
   14b6c:	4907      	ldr	r1, [pc, #28]	; (14b8c <Gpio::ClearInterruptEdge(GpioInterface::Edge)+0x80>)
   14b6e:	4808      	ldr	r0, [pc, #32]	; (14b90 <Gpio::ClearInterruptEdge(GpioInterface::Edge)+0x84>)
   14b70:	f7ff fcb8 	bl	144e4 <printf>
   14b74:	4623      	mov	r3, r4
   14b76:	4619      	mov	r1, r3
   14b78:	4802      	ldr	r0, [pc, #8]	; (14b84 <Gpio::ClearInterruptEdge(GpioInterface::Edge)+0x78>)
   14b7a:	f7fe fa6b 	bl	13054 <__cyg_profile_func_exit>
            "Edge %d cannot be used for External Interrupts."
            "Need to use a rising, falling, or both configuration.",
           util::Value(edge));
      }
    }
  }
   14b7e:	bf00      	nop
   14b80:	b004      	add	sp, #16
   14b82:	bd10      	pop	{r4, pc}
   14b84:	00014b0d 	.word	0x00014b0d
   14b88:	00019198 	.word	0x00019198
   14b8c:	00018be0 	.word	0x00018be0
   14b90:	00018128 	.word	0x00018128

00014b94 <Gpio::AttachInterrupt(void (*)(), GpioInterface::Edge)>:

  // Assign the developer's ISR and sets the selected edge that the gpio
  // interrupt will be triggered on.
  void AttachInterrupt(IsrPointer function, Edge edge) override
   14b94:	b510      	push	{r4, lr}
   14b96:	b084      	sub	sp, #16
   14b98:	4674      	mov	r4, lr
   14b9a:	9003      	str	r0, [sp, #12]
   14b9c:	9102      	str	r1, [sp, #8]
   14b9e:	4613      	mov	r3, r2
   14ba0:	f88d 3007 	strb.w	r3, [sp, #7]
   14ba4:	4623      	mov	r3, r4
   14ba6:	4619      	mov	r1, r3
   14ba8:	480b      	ldr	r0, [pc, #44]	; (14bd8 <Gpio::AttachInterrupt(void (*)(), GpioInterface::Edge)+0x44>)
   14baa:	f7fe fa3f 	bl	1302c <__cyg_profile_func_enter>
  {
    ValidPortCheck();
   14bae:	9803      	ldr	r0, [sp, #12]
   14bb0:	f7ff feba 	bl	14928 <Gpio::ValidPortCheck()>
    SetInterruptRoutine(function);
   14bb4:	9902      	ldr	r1, [sp, #8]
   14bb6:	9803      	ldr	r0, [sp, #12]
   14bb8:	f7ff fef4 	bl	149a4 <Gpio::SetInterruptRoutine(void (*)())>
    SetInterruptEdge(edge);
   14bbc:	f89d 3007 	ldrb.w	r3, [sp, #7]
   14bc0:	4619      	mov	r1, r3
   14bc2:	9803      	ldr	r0, [sp, #12]
   14bc4:	f7ff ff5e 	bl	14a84 <Gpio::SetInterruptEdge(GpioInterface::Edge)>
   14bc8:	4623      	mov	r3, r4
   14bca:	4619      	mov	r1, r3
   14bcc:	4802      	ldr	r0, [pc, #8]	; (14bd8 <Gpio::AttachInterrupt(void (*)(), GpioInterface::Edge)+0x44>)
   14bce:	f7fe fa41 	bl	13054 <__cyg_profile_func_exit>
  }
   14bd2:	bf00      	nop
   14bd4:	b004      	add	sp, #16
   14bd6:	bd10      	pop	{r4, pc}
   14bd8:	00014b95 	.word	0x00014b95

00014bdc <Gpio::DetachInterrupt()>:

  // Removes the developer's ISR and clears the selected edge of the gpio
  // interrupt from being triggered.
  void DetachInterrupt() override
   14bdc:	b510      	push	{r4, lr}
   14bde:	b082      	sub	sp, #8
   14be0:	4674      	mov	r4, lr
   14be2:	9001      	str	r0, [sp, #4]
   14be4:	4623      	mov	r3, r4
   14be6:	4619      	mov	r1, r3
   14be8:	480b      	ldr	r0, [pc, #44]	; (14c18 <Gpio::DetachInterrupt()+0x3c>)
   14bea:	f7fe fa1f 	bl	1302c <__cyg_profile_func_enter>
  {
    ValidPortCheck();
   14bee:	9801      	ldr	r0, [sp, #4]
   14bf0:	f7ff fe9a 	bl	14928 <Gpio::ValidPortCheck()>
    ClearInterruptRoutine();
   14bf4:	9801      	ldr	r0, [sp, #4]
   14bf6:	f7ff ff03 	bl	14a00 <Gpio::ClearInterruptRoutine()>
    ClearEdgeRising();
   14bfa:	9801      	ldr	r0, [sp, #4]
   14bfc:	f000 f88a 	bl	14d14 <Gpio::ClearEdgeRising()>
    ClearEdgeFalling();
   14c00:	9801      	ldr	r0, [sp, #4]
   14c02:	f000 f8c5 	bl	14d90 <Gpio::ClearEdgeFalling()>
   14c06:	4623      	mov	r3, r4
   14c08:	4619      	mov	r1, r3
   14c0a:	4803      	ldr	r0, [pc, #12]	; (14c18 <Gpio::DetachInterrupt()+0x3c>)
   14c0c:	f7fe fa22 	bl	13054 <__cyg_profile_func_exit>
  }
   14c10:	bf00      	nop
   14c12:	b002      	add	sp, #8
   14c14:	bd10      	pop	{r4, pc}
   14c16:	bf00      	nop
   14c18:	00014bdd 	.word	0x00014bdd

00014c1c <Gpio::SetEdgeRising()>:
    *interrupt[triggered_port].clear |= (1 << triggered_pin);
  }

 private:
  // Sets the gpio interrupt to trigger on a rising edge.
  void SetEdgeRising()
   14c1c:	b530      	push	{r4, r5, lr}
   14c1e:	b083      	sub	sp, #12
   14c20:	4675      	mov	r5, lr
   14c22:	9001      	str	r0, [sp, #4]
   14c24:	462b      	mov	r3, r5
   14c26:	4619      	mov	r1, r3
   14c28:	4819      	ldr	r0, [pc, #100]	; (14c90 <Gpio::SetEdgeRising()+0x74>)
   14c2a:	f7fe f9ff 	bl	1302c <__cyg_profile_func_enter>
  {
    *interrupt[interupt_port_].enable_rising_edge |= (1 << pin_->GetPin());
   14c2e:	9b01      	ldr	r3, [sp, #4]
   14c30:	689a      	ldr	r2, [r3, #8]
   14c32:	9b01      	ldr	r3, [sp, #4]
   14c34:	689b      	ldr	r3, [r3, #8]
   14c36:	681b      	ldr	r3, [r3, #0]
   14c38:	3330      	adds	r3, #48	; 0x30
   14c3a:	681b      	ldr	r3, [r3, #0]
   14c3c:	4610      	mov	r0, r2
   14c3e:	4798      	blx	r3
   14c40:	4603      	mov	r3, r0
   14c42:	461a      	mov	r2, r3
   14c44:	2301      	movs	r3, #1
   14c46:	fa03 f002 	lsl.w	r0, r3, r2
   14c4a:	9b01      	ldr	r3, [sp, #4]
   14c4c:	791b      	ldrb	r3, [r3, #4]
   14c4e:	4619      	mov	r1, r3
   14c50:	4a10      	ldr	r2, [pc, #64]	; (14c94 <Gpio::SetEdgeRising()+0x78>)
   14c52:	460b      	mov	r3, r1
   14c54:	009b      	lsls	r3, r3, #2
   14c56:	440b      	add	r3, r1
   14c58:	009b      	lsls	r3, r3, #2
   14c5a:	4413      	add	r3, r2
   14c5c:	330c      	adds	r3, #12
   14c5e:	681b      	ldr	r3, [r3, #0]
   14c60:	681a      	ldr	r2, [r3, #0]
   14c62:	4604      	mov	r4, r0
   14c64:	9b01      	ldr	r3, [sp, #4]
   14c66:	791b      	ldrb	r3, [r3, #4]
   14c68:	4618      	mov	r0, r3
   14c6a:	490a      	ldr	r1, [pc, #40]	; (14c94 <Gpio::SetEdgeRising()+0x78>)
   14c6c:	4603      	mov	r3, r0
   14c6e:	009b      	lsls	r3, r3, #2
   14c70:	4403      	add	r3, r0
   14c72:	009b      	lsls	r3, r3, #2
   14c74:	440b      	add	r3, r1
   14c76:	330c      	adds	r3, #12
   14c78:	681b      	ldr	r3, [r3, #0]
   14c7a:	4322      	orrs	r2, r4
   14c7c:	601a      	str	r2, [r3, #0]
   14c7e:	462b      	mov	r3, r5
   14c80:	4619      	mov	r1, r3
   14c82:	4803      	ldr	r0, [pc, #12]	; (14c90 <Gpio::SetEdgeRising()+0x74>)
   14c84:	f7fe f9e6 	bl	13054 <__cyg_profile_func_exit>
  }
   14c88:	bf00      	nop
   14c8a:	b003      	add	sp, #12
   14c8c:	bd30      	pop	{r4, r5, pc}
   14c8e:	bf00      	nop
   14c90:	00014c1d 	.word	0x00014c1d
   14c94:	100001d4 	.word	0x100001d4

00014c98 <Gpio::SetEdgeFalling()>:

  // Sets the gpio interrupt to trigger on a falling edge.
  void SetEdgeFalling()
   14c98:	b530      	push	{r4, r5, lr}
   14c9a:	b083      	sub	sp, #12
   14c9c:	4675      	mov	r5, lr
   14c9e:	9001      	str	r0, [sp, #4]
   14ca0:	462b      	mov	r3, r5
   14ca2:	4619      	mov	r1, r3
   14ca4:	4819      	ldr	r0, [pc, #100]	; (14d0c <Gpio::SetEdgeFalling()+0x74>)
   14ca6:	f7fe f9c1 	bl	1302c <__cyg_profile_func_enter>
  {
    *interrupt[interupt_port_].enable_falling_edge |= (1 << pin_->GetPin());
   14caa:	9b01      	ldr	r3, [sp, #4]
   14cac:	689a      	ldr	r2, [r3, #8]
   14cae:	9b01      	ldr	r3, [sp, #4]
   14cb0:	689b      	ldr	r3, [r3, #8]
   14cb2:	681b      	ldr	r3, [r3, #0]
   14cb4:	3330      	adds	r3, #48	; 0x30
   14cb6:	681b      	ldr	r3, [r3, #0]
   14cb8:	4610      	mov	r0, r2
   14cba:	4798      	blx	r3
   14cbc:	4603      	mov	r3, r0
   14cbe:	461a      	mov	r2, r3
   14cc0:	2301      	movs	r3, #1
   14cc2:	fa03 f002 	lsl.w	r0, r3, r2
   14cc6:	9b01      	ldr	r3, [sp, #4]
   14cc8:	791b      	ldrb	r3, [r3, #4]
   14cca:	4619      	mov	r1, r3
   14ccc:	4a10      	ldr	r2, [pc, #64]	; (14d10 <Gpio::SetEdgeFalling()+0x78>)
   14cce:	460b      	mov	r3, r1
   14cd0:	009b      	lsls	r3, r3, #2
   14cd2:	440b      	add	r3, r1
   14cd4:	009b      	lsls	r3, r3, #2
   14cd6:	4413      	add	r3, r2
   14cd8:	3310      	adds	r3, #16
   14cda:	681b      	ldr	r3, [r3, #0]
   14cdc:	681a      	ldr	r2, [r3, #0]
   14cde:	4604      	mov	r4, r0
   14ce0:	9b01      	ldr	r3, [sp, #4]
   14ce2:	791b      	ldrb	r3, [r3, #4]
   14ce4:	4618      	mov	r0, r3
   14ce6:	490a      	ldr	r1, [pc, #40]	; (14d10 <Gpio::SetEdgeFalling()+0x78>)
   14ce8:	4603      	mov	r3, r0
   14cea:	009b      	lsls	r3, r3, #2
   14cec:	4403      	add	r3, r0
   14cee:	009b      	lsls	r3, r3, #2
   14cf0:	440b      	add	r3, r1
   14cf2:	3310      	adds	r3, #16
   14cf4:	681b      	ldr	r3, [r3, #0]
   14cf6:	4322      	orrs	r2, r4
   14cf8:	601a      	str	r2, [r3, #0]
   14cfa:	462b      	mov	r3, r5
   14cfc:	4619      	mov	r1, r3
   14cfe:	4803      	ldr	r0, [pc, #12]	; (14d0c <Gpio::SetEdgeFalling()+0x74>)
   14d00:	f7fe f9a8 	bl	13054 <__cyg_profile_func_exit>
  }
   14d04:	bf00      	nop
   14d06:	b003      	add	sp, #12
   14d08:	bd30      	pop	{r4, r5, pc}
   14d0a:	bf00      	nop
   14d0c:	00014c99 	.word	0x00014c99
   14d10:	100001d4 	.word	0x100001d4

00014d14 <Gpio::ClearEdgeRising()>:

  // Clears the gpio interrupt to no longer trigger on a rising edge.
  void ClearEdgeRising()
   14d14:	b530      	push	{r4, r5, lr}
   14d16:	b083      	sub	sp, #12
   14d18:	4675      	mov	r5, lr
   14d1a:	9001      	str	r0, [sp, #4]
   14d1c:	462b      	mov	r3, r5
   14d1e:	4619      	mov	r1, r3
   14d20:	4819      	ldr	r0, [pc, #100]	; (14d88 <Gpio::ClearEdgeRising()+0x74>)
   14d22:	f7fe f983 	bl	1302c <__cyg_profile_func_enter>
  {
    *interrupt[interupt_port_].enable_rising_edge &= ~(1 << pin_->GetPin());
   14d26:	9b01      	ldr	r3, [sp, #4]
   14d28:	689a      	ldr	r2, [r3, #8]
   14d2a:	9b01      	ldr	r3, [sp, #4]
   14d2c:	689b      	ldr	r3, [r3, #8]
   14d2e:	681b      	ldr	r3, [r3, #0]
   14d30:	3330      	adds	r3, #48	; 0x30
   14d32:	681b      	ldr	r3, [r3, #0]
   14d34:	4610      	mov	r0, r2
   14d36:	4798      	blx	r3
   14d38:	4603      	mov	r3, r0
   14d3a:	461a      	mov	r2, r3
   14d3c:	2301      	movs	r3, #1
   14d3e:	4093      	lsls	r3, r2
   14d40:	43d8      	mvns	r0, r3
   14d42:	9b01      	ldr	r3, [sp, #4]
   14d44:	791b      	ldrb	r3, [r3, #4]
   14d46:	4619      	mov	r1, r3
   14d48:	4a10      	ldr	r2, [pc, #64]	; (14d8c <Gpio::ClearEdgeRising()+0x78>)
   14d4a:	460b      	mov	r3, r1
   14d4c:	009b      	lsls	r3, r3, #2
   14d4e:	440b      	add	r3, r1
   14d50:	009b      	lsls	r3, r3, #2
   14d52:	4413      	add	r3, r2
   14d54:	330c      	adds	r3, #12
   14d56:	681b      	ldr	r3, [r3, #0]
   14d58:	681a      	ldr	r2, [r3, #0]
   14d5a:	4604      	mov	r4, r0
   14d5c:	9b01      	ldr	r3, [sp, #4]
   14d5e:	791b      	ldrb	r3, [r3, #4]
   14d60:	4618      	mov	r0, r3
   14d62:	490a      	ldr	r1, [pc, #40]	; (14d8c <Gpio::ClearEdgeRising()+0x78>)
   14d64:	4603      	mov	r3, r0
   14d66:	009b      	lsls	r3, r3, #2
   14d68:	4403      	add	r3, r0
   14d6a:	009b      	lsls	r3, r3, #2
   14d6c:	440b      	add	r3, r1
   14d6e:	330c      	adds	r3, #12
   14d70:	681b      	ldr	r3, [r3, #0]
   14d72:	4022      	ands	r2, r4
   14d74:	601a      	str	r2, [r3, #0]
   14d76:	462b      	mov	r3, r5
   14d78:	4619      	mov	r1, r3
   14d7a:	4803      	ldr	r0, [pc, #12]	; (14d88 <Gpio::ClearEdgeRising()+0x74>)
   14d7c:	f7fe f96a 	bl	13054 <__cyg_profile_func_exit>
  }
   14d80:	bf00      	nop
   14d82:	b003      	add	sp, #12
   14d84:	bd30      	pop	{r4, r5, pc}
   14d86:	bf00      	nop
   14d88:	00014d15 	.word	0x00014d15
   14d8c:	100001d4 	.word	0x100001d4

00014d90 <Gpio::ClearEdgeFalling()>:

  // Clears the gpio interrupt to no longer trigger on a falling edge.
  void ClearEdgeFalling()
   14d90:	b530      	push	{r4, r5, lr}
   14d92:	b083      	sub	sp, #12
   14d94:	4675      	mov	r5, lr
   14d96:	9001      	str	r0, [sp, #4]
   14d98:	462b      	mov	r3, r5
   14d9a:	4619      	mov	r1, r3
   14d9c:	4819      	ldr	r0, [pc, #100]	; (14e04 <Gpio::ClearEdgeFalling()+0x74>)
   14d9e:	f7fe f945 	bl	1302c <__cyg_profile_func_enter>
  {
    *interrupt[interupt_port_].enable_falling_edge &= ~(1 << pin_->GetPin());
   14da2:	9b01      	ldr	r3, [sp, #4]
   14da4:	689a      	ldr	r2, [r3, #8]
   14da6:	9b01      	ldr	r3, [sp, #4]
   14da8:	689b      	ldr	r3, [r3, #8]
   14daa:	681b      	ldr	r3, [r3, #0]
   14dac:	3330      	adds	r3, #48	; 0x30
   14dae:	681b      	ldr	r3, [r3, #0]
   14db0:	4610      	mov	r0, r2
   14db2:	4798      	blx	r3
   14db4:	4603      	mov	r3, r0
   14db6:	461a      	mov	r2, r3
   14db8:	2301      	movs	r3, #1
   14dba:	4093      	lsls	r3, r2
   14dbc:	43d8      	mvns	r0, r3
   14dbe:	9b01      	ldr	r3, [sp, #4]
   14dc0:	791b      	ldrb	r3, [r3, #4]
   14dc2:	4619      	mov	r1, r3
   14dc4:	4a10      	ldr	r2, [pc, #64]	; (14e08 <Gpio::ClearEdgeFalling()+0x78>)
   14dc6:	460b      	mov	r3, r1
   14dc8:	009b      	lsls	r3, r3, #2
   14dca:	440b      	add	r3, r1
   14dcc:	009b      	lsls	r3, r3, #2
   14dce:	4413      	add	r3, r2
   14dd0:	3310      	adds	r3, #16
   14dd2:	681b      	ldr	r3, [r3, #0]
   14dd4:	681a      	ldr	r2, [r3, #0]
   14dd6:	4604      	mov	r4, r0
   14dd8:	9b01      	ldr	r3, [sp, #4]
   14dda:	791b      	ldrb	r3, [r3, #4]
   14ddc:	4618      	mov	r0, r3
   14dde:	490a      	ldr	r1, [pc, #40]	; (14e08 <Gpio::ClearEdgeFalling()+0x78>)
   14de0:	4603      	mov	r3, r0
   14de2:	009b      	lsls	r3, r3, #2
   14de4:	4403      	add	r3, r0
   14de6:	009b      	lsls	r3, r3, #2
   14de8:	440b      	add	r3, r1
   14dea:	3310      	adds	r3, #16
   14dec:	681b      	ldr	r3, [r3, #0]
   14dee:	4022      	ands	r2, r4
   14df0:	601a      	str	r2, [r3, #0]
   14df2:	462b      	mov	r3, r5
   14df4:	4619      	mov	r1, r3
   14df6:	4803      	ldr	r0, [pc, #12]	; (14e04 <Gpio::ClearEdgeFalling()+0x74>)
   14df8:	f7fe f92c 	bl	13054 <__cyg_profile_func_exit>
  }
   14dfc:	bf00      	nop
   14dfe:	b003      	add	sp, #12
   14e00:	bd30      	pop	{r4, r5, pc}
   14e02:	bf00      	nop
   14e04:	00014d91 	.word	0x00014d91
   14e08:	100001d4 	.word	0x100001d4

00014e0c <SystemControllerInterface::SystemControllerInterface()>:
class SystemControllerInterface
   14e0c:	b082      	sub	sp, #8
   14e0e:	9001      	str	r0, [sp, #4]
   14e10:	4a03      	ldr	r2, [pc, #12]	; (14e20 <SystemControllerInterface::SystemControllerInterface()+0x14>)
   14e12:	9b01      	ldr	r3, [sp, #4]
   14e14:	601a      	str	r2, [r3, #0]
   14e16:	9b01      	ldr	r3, [sp, #4]
   14e18:	4618      	mov	r0, r3
   14e1a:	b002      	add	sp, #8
   14e1c:	4770      	bx	lr
   14e1e:	bf00      	nop
   14e20:	000190b0 	.word	0x000190b0

00014e24 <Lpc40xxSystemController::Lpc40xxSystemController()>:
  constexpr Lpc40xxSystemController() {}
   14e24:	b500      	push	{lr}
   14e26:	b083      	sub	sp, #12
   14e28:	9001      	str	r0, [sp, #4]
   14e2a:	9b01      	ldr	r3, [sp, #4]
   14e2c:	4618      	mov	r0, r3
   14e2e:	f7ff ffed 	bl	14e0c <SystemControllerInterface::SystemControllerInterface()>
   14e32:	4a04      	ldr	r2, [pc, #16]	; (14e44 <Lpc40xxSystemController::Lpc40xxSystemController()+0x20>)
   14e34:	9b01      	ldr	r3, [sp, #4]
   14e36:	601a      	str	r2, [r3, #0]
   14e38:	9b01      	ldr	r3, [sp, #4]
   14e3a:	4618      	mov	r0, r3
   14e3c:	b003      	add	sp, #12
   14e3e:	f85d fb04 	ldr.w	pc, [sp], #4
   14e42:	bf00      	nop
   14e44:	00017b3c 	.word	0x00017b3c

00014e48 <SspInterface::SspInterface()>:
class SspInterface
   14e48:	b530      	push	{r4, r5, lr}
   14e4a:	b083      	sub	sp, #12
   14e4c:	4675      	mov	r5, lr
   14e4e:	9001      	str	r0, [sp, #4]
   14e50:	462b      	mov	r3, r5
   14e52:	4619      	mov	r1, r3
   14e54:	4807      	ldr	r0, [pc, #28]	; (14e74 <SspInterface::SspInterface()+0x2c>)
   14e56:	f7fe f8e9 	bl	1302c <__cyg_profile_func_enter>
   14e5a:	4a07      	ldr	r2, [pc, #28]	; (14e78 <SspInterface::SspInterface()+0x30>)
   14e5c:	9b01      	ldr	r3, [sp, #4]
   14e5e:	601a      	str	r2, [r3, #0]
   14e60:	9c01      	ldr	r4, [sp, #4]
   14e62:	462b      	mov	r3, r5
   14e64:	4619      	mov	r1, r3
   14e66:	4803      	ldr	r0, [pc, #12]	; (14e74 <SspInterface::SspInterface()+0x2c>)
   14e68:	f7fe f8f4 	bl	13054 <__cyg_profile_func_exit>
   14e6c:	4623      	mov	r3, r4
   14e6e:	4618      	mov	r0, r3
   14e70:	b003      	add	sp, #12
   14e72:	bd30      	pop	{r4, r5, pc}
   14e74:	00014e49 	.word	0x00014e49
   14e78:	00019088 	.word	0x00019088

00014e7c <PinInterface::PinInterface(PinInterface const&)>:
class PinInterface
   14e7c:	b530      	push	{r4, r5, lr}
   14e7e:	b083      	sub	sp, #12
   14e80:	4675      	mov	r5, lr
   14e82:	9001      	str	r0, [sp, #4]
   14e84:	9100      	str	r1, [sp, #0]
   14e86:	462b      	mov	r3, r5
   14e88:	4619      	mov	r1, r3
   14e8a:	4808      	ldr	r0, [pc, #32]	; (14eac <PinInterface::PinInterface(PinInterface const&)+0x30>)
   14e8c:	f7fe f8ce 	bl	1302c <__cyg_profile_func_enter>
   14e90:	4a07      	ldr	r2, [pc, #28]	; (14eb0 <PinInterface::PinInterface(PinInterface const&)+0x34>)
   14e92:	9b01      	ldr	r3, [sp, #4]
   14e94:	601a      	str	r2, [r3, #0]
   14e96:	9c01      	ldr	r4, [sp, #4]
   14e98:	462b      	mov	r3, r5
   14e9a:	4619      	mov	r1, r3
   14e9c:	4803      	ldr	r0, [pc, #12]	; (14eac <PinInterface::PinInterface(PinInterface const&)+0x30>)
   14e9e:	f7fe f8d9 	bl	13054 <__cyg_profile_func_exit>
   14ea2:	4623      	mov	r3, r4
   14ea4:	4618      	mov	r0, r3
   14ea6:	b003      	add	sp, #12
   14ea8:	bd30      	pop	{r4, r5, pc}
   14eaa:	bf00      	nop
   14eac:	00014e7d 	.word	0x00014e7d
   14eb0:	00019164 	.word	0x00019164

00014eb4 <Pin::Pin(Pin const&)>:
class Pin : public PinInterface
   14eb4:	b530      	push	{r4, r5, lr}
   14eb6:	b083      	sub	sp, #12
   14eb8:	4675      	mov	r5, lr
   14eba:	9001      	str	r0, [sp, #4]
   14ebc:	9100      	str	r1, [sp, #0]
   14ebe:	462b      	mov	r3, r5
   14ec0:	4619      	mov	r1, r3
   14ec2:	480f      	ldr	r0, [pc, #60]	; (14f00 <Pin::Pin(Pin const&)+0x4c>)
   14ec4:	f7fe f8b2 	bl	1302c <__cyg_profile_func_enter>
   14ec8:	9b01      	ldr	r3, [sp, #4]
   14eca:	9a00      	ldr	r2, [sp, #0]
   14ecc:	4611      	mov	r1, r2
   14ece:	4618      	mov	r0, r3
   14ed0:	f7ff ffd4 	bl	14e7c <PinInterface::PinInterface(PinInterface const&)>
   14ed4:	4a0b      	ldr	r2, [pc, #44]	; (14f04 <Pin::Pin(Pin const&)+0x50>)
   14ed6:	9b01      	ldr	r3, [sp, #4]
   14ed8:	601a      	str	r2, [r3, #0]
   14eda:	9b00      	ldr	r3, [sp, #0]
   14edc:	791a      	ldrb	r2, [r3, #4]
   14ede:	9b01      	ldr	r3, [sp, #4]
   14ee0:	711a      	strb	r2, [r3, #4]
   14ee2:	9b00      	ldr	r3, [sp, #0]
   14ee4:	795a      	ldrb	r2, [r3, #5]
   14ee6:	9b01      	ldr	r3, [sp, #4]
   14ee8:	715a      	strb	r2, [r3, #5]
   14eea:	9c01      	ldr	r4, [sp, #4]
   14eec:	462b      	mov	r3, r5
   14eee:	4619      	mov	r1, r3
   14ef0:	4803      	ldr	r0, [pc, #12]	; (14f00 <Pin::Pin(Pin const&)+0x4c>)
   14ef2:	f7fe f8af 	bl	13054 <__cyg_profile_func_exit>
   14ef6:	4623      	mov	r3, r4
   14ef8:	4618      	mov	r0, r3
   14efa:	b003      	add	sp, #12
   14efc:	bd30      	pop	{r4, r5, pc}
   14efe:	bf00      	nop
   14f00:	00014eb5 	.word	0x00014eb5
   14f04:	00017ac8 	.word	0x00017ac8

00014f08 <Ssp::Ssp(Ssp::Peripheral)>:
  explicit constexpr Ssp(Peripheral set_pssp)
   14f08:	b530      	push	{r4, r5, lr}
   14f0a:	b083      	sub	sp, #12
   14f0c:	4675      	mov	r5, lr
   14f0e:	9001      	str	r0, [sp, #4]
   14f10:	9100      	str	r1, [sp, #0]
   14f12:	462b      	mov	r3, r5
   14f14:	4619      	mov	r1, r3
   14f16:	4831      	ldr	r0, [pc, #196]	; (14fdc <Ssp::Ssp(Ssp::Peripheral)+0xd4>)
   14f18:	f7fe f888 	bl	1302c <__cyg_profile_func_enter>
        pssp_(set_pssp)
   14f1c:	9b01      	ldr	r3, [sp, #4]
   14f1e:	4618      	mov	r0, r3
   14f20:	f7ff ff92 	bl	14e48 <SspInterface::SspInterface()>
   14f24:	9b01      	ldr	r3, [sp, #4]
   14f26:	3304      	adds	r3, #4
   14f28:	4618      	mov	r0, r3
   14f2a:	f7ff ff7b 	bl	14e24 <Lpc40xxSystemController::Lpc40xxSystemController()>
   14f2e:	4a2c      	ldr	r2, [pc, #176]	; (14fe0 <Ssp::Ssp(Ssp::Peripheral)+0xd8>)
   14f30:	9b01      	ldr	r3, [sp, #4]
   14f32:	601a      	str	r2, [r3, #0]
   14f34:	4a2b      	ldr	r2, [pc, #172]	; (14fe4 <Ssp::Ssp(Ssp::Peripheral)+0xdc>)
   14f36:	9b01      	ldr	r3, [sp, #4]
   14f38:	605a      	str	r2, [r3, #4]
   14f3a:	9b01      	ldr	r3, [sp, #4]
   14f3c:	f103 0214 	add.w	r2, r3, #20
   14f40:	9b01      	ldr	r3, [sp, #4]
   14f42:	609a      	str	r2, [r3, #8]
   14f44:	9b01      	ldr	r3, [sp, #4]
   14f46:	f103 021c 	add.w	r2, r3, #28
   14f4a:	9b01      	ldr	r3, [sp, #4]
   14f4c:	60da      	str	r2, [r3, #12]
   14f4e:	9b01      	ldr	r3, [sp, #4]
   14f50:	f103 0224 	add.w	r2, r3, #36	; 0x24
   14f54:	9b01      	ldr	r3, [sp, #4]
   14f56:	611a      	str	r2, [r3, #16]
   14f58:	9b01      	ldr	r3, [sp, #4]
   14f5a:	f103 0414 	add.w	r4, r3, #20
        mosi_pin_(kSspPinMatrix[util::Value(set_pssp)][MatrixLookup::kMosi]),
   14f5e:	9800      	ldr	r0, [sp, #0]
   14f60:	f7fb fcee 	bl	10940 <int util::Value<Ssp::Peripheral, int>(Ssp::Peripheral)>
   14f64:	4602      	mov	r2, r0
        pssp_(set_pssp)
   14f66:	4613      	mov	r3, r2
   14f68:	005b      	lsls	r3, r3, #1
   14f6a:	4413      	add	r3, r2
   14f6c:	00db      	lsls	r3, r3, #3
   14f6e:	4a1e      	ldr	r2, [pc, #120]	; (14fe8 <Ssp::Ssp(Ssp::Peripheral)+0xe0>)
   14f70:	4413      	add	r3, r2
   14f72:	4619      	mov	r1, r3
   14f74:	4620      	mov	r0, r4
   14f76:	f7ff ff9d 	bl	14eb4 <Pin::Pin(Pin const&)>
   14f7a:	9b01      	ldr	r3, [sp, #4]
   14f7c:	f103 041c 	add.w	r4, r3, #28
        miso_pin_(kSspPinMatrix[util::Value(set_pssp)][MatrixLookup::kMiso]),
   14f80:	9800      	ldr	r0, [sp, #0]
   14f82:	f7fb fcdd 	bl	10940 <int util::Value<Ssp::Peripheral, int>(Ssp::Peripheral)>
   14f86:	4602      	mov	r2, r0
        pssp_(set_pssp)
   14f88:	4613      	mov	r3, r2
   14f8a:	005b      	lsls	r3, r3, #1
   14f8c:	4413      	add	r3, r2
   14f8e:	00db      	lsls	r3, r3, #3
   14f90:	3308      	adds	r3, #8
   14f92:	4a15      	ldr	r2, [pc, #84]	; (14fe8 <Ssp::Ssp(Ssp::Peripheral)+0xe0>)
   14f94:	4413      	add	r3, r2
   14f96:	4619      	mov	r1, r3
   14f98:	4620      	mov	r0, r4
   14f9a:	f7ff ff8b 	bl	14eb4 <Pin::Pin(Pin const&)>
   14f9e:	9b01      	ldr	r3, [sp, #4]
   14fa0:	f103 0424 	add.w	r4, r3, #36	; 0x24
        sck_pin_(kSspPinMatrix[util::Value(set_pssp)][MatrixLookup::kSck]),
   14fa4:	9800      	ldr	r0, [sp, #0]
   14fa6:	f7fb fccb 	bl	10940 <int util::Value<Ssp::Peripheral, int>(Ssp::Peripheral)>
   14faa:	4602      	mov	r2, r0
        pssp_(set_pssp)
   14fac:	4613      	mov	r3, r2
   14fae:	005b      	lsls	r3, r3, #1
   14fb0:	4413      	add	r3, r2
   14fb2:	00db      	lsls	r3, r3, #3
   14fb4:	3310      	adds	r3, #16
   14fb6:	4a0c      	ldr	r2, [pc, #48]	; (14fe8 <Ssp::Ssp(Ssp::Peripheral)+0xe0>)
   14fb8:	4413      	add	r3, r2
   14fba:	4619      	mov	r1, r3
   14fbc:	4620      	mov	r0, r4
   14fbe:	f7ff ff79 	bl	14eb4 <Pin::Pin(Pin const&)>
   14fc2:	9b01      	ldr	r3, [sp, #4]
   14fc4:	9a00      	ldr	r2, [sp, #0]
   14fc6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
   14fc8:	9c01      	ldr	r4, [sp, #4]
   14fca:	462b      	mov	r3, r5
   14fcc:	4619      	mov	r1, r3
   14fce:	4803      	ldr	r0, [pc, #12]	; (14fdc <Ssp::Ssp(Ssp::Peripheral)+0xd4>)
   14fd0:	f7fe f840 	bl	13054 <__cyg_profile_func_exit>
   14fd4:	4623      	mov	r3, r4
   14fd6:	4618      	mov	r0, r3
   14fd8:	b003      	add	sp, #12
   14fda:	bd30      	pop	{r4, r5, pc}
   14fdc:	00014f09 	.word	0x00014f09
   14fe0:	0001903c 	.word	0x0001903c
   14fe4:	00019064 	.word	0x00019064
   14fe8:	00018bf0 	.word	0x00018bf0

00014fec <Ssp::Initialize()>:
  void Initialize() override
   14fec:	b570      	push	{r4, r5, r6, lr}
   14fee:	b086      	sub	sp, #24
   14ff0:	4676      	mov	r6, lr
   14ff2:	9001      	str	r0, [sp, #4]
   14ff4:	4633      	mov	r3, r6
   14ff6:	4619      	mov	r1, r3
   14ff8:	4830      	ldr	r0, [pc, #192]	; (150bc <Ssp::Initialize()+0xd0>)
   14ffa:	f7fe f817 	bl	1302c <__cyg_profile_func_enter>
    uint32_t pssp = util::Value(pssp_);
   14ffe:	9b01      	ldr	r3, [sp, #4]
   15000:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   15002:	4618      	mov	r0, r3
   15004:	f7fb fc9c 	bl	10940 <int util::Value<Ssp::Peripheral, int>(Ssp::Peripheral)>
   15008:	4603      	mov	r3, r0
   1500a:	9305      	str	r3, [sp, #20]
    PowerUpPeripheral(kPowerBit[pssp]);
   1500c:	9b01      	ldr	r3, [sp, #4]
   1500e:	1d18      	adds	r0, r3, #4
   15010:	9b01      	ldr	r3, [sp, #4]
   15012:	685b      	ldr	r3, [r3, #4]
   15014:	3314      	adds	r3, #20
   15016:	681b      	ldr	r3, [r3, #0]
   15018:	9a05      	ldr	r2, [sp, #20]
   1501a:	0092      	lsls	r2, r2, #2
   1501c:	4928      	ldr	r1, [pc, #160]	; (150c0 <Ssp::Initialize()+0xd4>)
   1501e:	440a      	add	r2, r1
   15020:	4611      	mov	r1, r2
   15022:	4798      	blx	r3
    mosi_->SetPinFunction(kPinSelect[pssp]);
   15024:	9b01      	ldr	r3, [sp, #4]
   15026:	6898      	ldr	r0, [r3, #8]
   15028:	9b01      	ldr	r3, [sp, #4]
   1502a:	689b      	ldr	r3, [r3, #8]
   1502c:	681b      	ldr	r3, [r3, #0]
   1502e:	681b      	ldr	r3, [r3, #0]
   15030:	4924      	ldr	r1, [pc, #144]	; (150c4 <Ssp::Initialize()+0xd8>)
   15032:	9a05      	ldr	r2, [sp, #20]
   15034:	440a      	add	r2, r1
   15036:	7812      	ldrb	r2, [r2, #0]
   15038:	4611      	mov	r1, r2
   1503a:	4798      	blx	r3
    miso_->SetPinFunction(kPinSelect[pssp]);
   1503c:	9b01      	ldr	r3, [sp, #4]
   1503e:	68d8      	ldr	r0, [r3, #12]
   15040:	9b01      	ldr	r3, [sp, #4]
   15042:	68db      	ldr	r3, [r3, #12]
   15044:	681b      	ldr	r3, [r3, #0]
   15046:	681b      	ldr	r3, [r3, #0]
   15048:	491e      	ldr	r1, [pc, #120]	; (150c4 <Ssp::Initialize()+0xd8>)
   1504a:	9a05      	ldr	r2, [sp, #20]
   1504c:	440a      	add	r2, r1
   1504e:	7812      	ldrb	r2, [r2, #0]
   15050:	4611      	mov	r1, r2
   15052:	4798      	blx	r3
    sck_->SetPinFunction(kPinSelect[pssp]);
   15054:	9b01      	ldr	r3, [sp, #4]
   15056:	6918      	ldr	r0, [r3, #16]
   15058:	9b01      	ldr	r3, [sp, #4]
   1505a:	691b      	ldr	r3, [r3, #16]
   1505c:	681b      	ldr	r3, [r3, #0]
   1505e:	681b      	ldr	r3, [r3, #0]
   15060:	4918      	ldr	r1, [pc, #96]	; (150c4 <Ssp::Initialize()+0xd8>)
   15062:	9a05      	ldr	r2, [sp, #20]
   15064:	440a      	add	r2, r1
   15066:	7812      	ldrb	r2, [r2, #0]
   15068:	4611      	mov	r1, r2
   1506a:	4798      	blx	r3
    ssp_registers[pssp]->CR1 = bit::Set(ssp_registers[pssp]->CR1, kSspEnable);
   1506c:	4a16      	ldr	r2, [pc, #88]	; (150c8 <Ssp::Initialize()+0xdc>)
   1506e:	9b05      	ldr	r3, [sp, #20]
   15070:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15074:	685b      	ldr	r3, [r3, #4]
   15076:	4914      	ldr	r1, [pc, #80]	; (150c8 <Ssp::Initialize()+0xdc>)
   15078:	9a05      	ldr	r2, [sp, #20]
   1507a:	f851 4022 	ldr.w	r4, [r1, r2, lsl #2]
   1507e:	9304      	str	r3, [sp, #16]
   15080:	2301      	movs	r3, #1
   15082:	9303      	str	r3, [sp, #12]
   15084:	4633      	mov	r3, r6
   15086:	4619      	mov	r1, r3
   15088:	4810      	ldr	r0, [pc, #64]	; (150cc <Ssp::Initialize()+0xe0>)
   1508a:	f7fd ffcf 	bl	1302c <__cyg_profile_func_enter>
  return target | (1 << position);
   1508e:	2201      	movs	r2, #1
   15090:	9b03      	ldr	r3, [sp, #12]
   15092:	fa02 f303 	lsl.w	r3, r2, r3
   15096:	461a      	mov	r2, r3
   15098:	9b04      	ldr	r3, [sp, #16]
   1509a:	ea42 0503 	orr.w	r5, r2, r3
   1509e:	4633      	mov	r3, r6
   150a0:	4619      	mov	r1, r3
   150a2:	480a      	ldr	r0, [pc, #40]	; (150cc <Ssp::Initialize()+0xe0>)
   150a4:	f7fd ffd6 	bl	13054 <__cyg_profile_func_exit>
   150a8:	6065      	str	r5, [r4, #4]
   150aa:	4633      	mov	r3, r6
   150ac:	4619      	mov	r1, r3
   150ae:	4803      	ldr	r0, [pc, #12]	; (150bc <Ssp::Initialize()+0xd0>)
   150b0:	f7fd ffd0 	bl	13054 <__cyg_profile_func_exit>
  }
   150b4:	bf00      	nop
   150b6:	b006      	add	sp, #24
   150b8:	bd70      	pop	{r4, r5, r6, pc}
   150ba:	bf00      	nop
   150bc:	00014fed 	.word	0x00014fed
   150c0:	00018c38 	.word	0x00018c38
   150c4:	00018bec 	.word	0x00018bec
   150c8:	10000044 	.word	0x10000044
   150cc:	00016b69 	.word	0x00016b69

000150d0 <Ssp::SetSpiMasterDefault()>:

  /// Sets up SSP peripheral as SPI master
  void SetSpiMasterDefault() override
   150d0:	b510      	push	{r4, lr}
   150d2:	b086      	sub	sp, #24
   150d4:	4674      	mov	r4, lr
   150d6:	9003      	str	r0, [sp, #12]
   150d8:	4623      	mov	r3, r4
   150da:	4619      	mov	r1, r3
   150dc:	4812      	ldr	r0, [pc, #72]	; (15128 <Ssp::SetSpiMasterDefault()+0x58>)
   150de:	f7fd ffa5 	bl	1302c <__cyg_profile_func_enter>
  {
    constexpr bool kHighPolarity  = 1;
   150e2:	2301      	movs	r3, #1
   150e4:	f88d 3017 	strb.w	r3, [sp, #23]
    constexpr bool kPhase0        = 0;
   150e8:	2300      	movs	r3, #0
   150ea:	f88d 3016 	strb.w	r3, [sp, #22]
    constexpr uint8_t kScrDivider = 0;
   150ee:	2300      	movs	r3, #0
   150f0:	f88d 3015 	strb.w	r3, [sp, #21]
    constexpr uint8_t kPrescaler  = SJ2_SYSTEM_CLOCK_RATE_MHZ;
   150f4:	2330      	movs	r3, #48	; 0x30
   150f6:	f88d 3014 	strb.w	r3, [sp, #20]

    SetPeripheralMode(kMaster, kSpi, kEight);
   150fa:	2307      	movs	r3, #7
   150fc:	2200      	movs	r2, #0
   150fe:	2100      	movs	r1, #0
   15100:	9803      	ldr	r0, [sp, #12]
   15102:	f000 f85b 	bl	151bc <Ssp::SetPeripheralMode(SspInterface::MasterSlaveMode, SspInterface::FrameMode, SspInterface::DataSize)>
    SetClock(kHighPolarity, kPhase0, kScrDivider, kPrescaler);
   15106:	2330      	movs	r3, #48	; 0x30
   15108:	9300      	str	r3, [sp, #0]
   1510a:	2300      	movs	r3, #0
   1510c:	2200      	movs	r2, #0
   1510e:	2101      	movs	r1, #1
   15110:	9803      	ldr	r0, [sp, #12]
   15112:	f000 fa09 	bl	15528 <Ssp::SetClock(bool, bool, unsigned char, unsigned char)>
   15116:	4623      	mov	r3, r4
   15118:	4619      	mov	r1, r3
   1511a:	4803      	ldr	r0, [pc, #12]	; (15128 <Ssp::SetSpiMasterDefault()+0x58>)
   1511c:	f7fd ff9a 	bl	13054 <__cyg_profile_func_exit>
  }
   15120:	bf00      	nop
   15122:	b006      	add	sp, #24
   15124:	bd10      	pop	{r4, pc}
   15126:	bf00      	nop
   15128:	000150d1 	.word	0x000150d1

0001512c <unsigned char util::Value<SspInterface::DataSize, unsigned char>(SspInterface::DataSize)>:
constexpr Type Value(Enum enum_type_value)
   1512c:	b530      	push	{r4, r5, lr}
   1512e:	b083      	sub	sp, #12
   15130:	4675      	mov	r5, lr
   15132:	4603      	mov	r3, r0
   15134:	f88d 3007 	strb.w	r3, [sp, #7]
   15138:	462b      	mov	r3, r5
   1513a:	4619      	mov	r1, r3
   1513c:	4806      	ldr	r0, [pc, #24]	; (15158 <unsigned char util::Value<SspInterface::DataSize, unsigned char>(SspInterface::DataSize)+0x2c>)
   1513e:	f7fd ff75 	bl	1302c <__cyg_profile_func_enter>
  return static_cast<Type>(enum_type_value);
   15142:	f89d 4007 	ldrb.w	r4, [sp, #7]
   15146:	462b      	mov	r3, r5
   15148:	4619      	mov	r1, r3
   1514a:	4803      	ldr	r0, [pc, #12]	; (15158 <unsigned char util::Value<SspInterface::DataSize, unsigned char>(SspInterface::DataSize)+0x2c>)
   1514c:	f7fd ff82 	bl	13054 <__cyg_profile_func_exit>
   15150:	4623      	mov	r3, r4
}
   15152:	4618      	mov	r0, r3
   15154:	b003      	add	sp, #12
   15156:	bd30      	pop	{r4, r5, pc}
   15158:	0001512d 	.word	0x0001512d

0001515c <unsigned char util::Value<SspInterface::FrameMode, unsigned char>(SspInterface::FrameMode)>:
constexpr Type Value(Enum enum_type_value)
   1515c:	b530      	push	{r4, r5, lr}
   1515e:	b083      	sub	sp, #12
   15160:	4675      	mov	r5, lr
   15162:	4603      	mov	r3, r0
   15164:	f88d 3007 	strb.w	r3, [sp, #7]
   15168:	462b      	mov	r3, r5
   1516a:	4619      	mov	r1, r3
   1516c:	4806      	ldr	r0, [pc, #24]	; (15188 <unsigned char util::Value<SspInterface::FrameMode, unsigned char>(SspInterface::FrameMode)+0x2c>)
   1516e:	f7fd ff5d 	bl	1302c <__cyg_profile_func_enter>
  return static_cast<Type>(enum_type_value);
   15172:	f89d 4007 	ldrb.w	r4, [sp, #7]
   15176:	462b      	mov	r3, r5
   15178:	4619      	mov	r1, r3
   1517a:	4803      	ldr	r0, [pc, #12]	; (15188 <unsigned char util::Value<SspInterface::FrameMode, unsigned char>(SspInterface::FrameMode)+0x2c>)
   1517c:	f7fd ff6a 	bl	13054 <__cyg_profile_func_exit>
   15180:	4623      	mov	r3, r4
}
   15182:	4618      	mov	r0, r3
   15184:	b003      	add	sp, #12
   15186:	bd30      	pop	{r4, r5, pc}
   15188:	0001515d 	.word	0x0001515d

0001518c <unsigned char util::Value<SspInterface::MasterSlaveMode, unsigned char>(SspInterface::MasterSlaveMode)>:
constexpr Type Value(Enum enum_type_value)
   1518c:	b530      	push	{r4, r5, lr}
   1518e:	b083      	sub	sp, #12
   15190:	4675      	mov	r5, lr
   15192:	4603      	mov	r3, r0
   15194:	f88d 3007 	strb.w	r3, [sp, #7]
   15198:	462b      	mov	r3, r5
   1519a:	4619      	mov	r1, r3
   1519c:	4806      	ldr	r0, [pc, #24]	; (151b8 <unsigned char util::Value<SspInterface::MasterSlaveMode, unsigned char>(SspInterface::MasterSlaveMode)+0x2c>)
   1519e:	f7fd ff45 	bl	1302c <__cyg_profile_func_enter>
  return static_cast<Type>(enum_type_value);
   151a2:	f89d 4007 	ldrb.w	r4, [sp, #7]
   151a6:	462b      	mov	r3, r5
   151a8:	4619      	mov	r1, r3
   151aa:	4803      	ldr	r0, [pc, #12]	; (151b8 <unsigned char util::Value<SspInterface::MasterSlaveMode, unsigned char>(SspInterface::MasterSlaveMode)+0x2c>)
   151ac:	f7fd ff52 	bl	13054 <__cyg_profile_func_exit>
   151b0:	4623      	mov	r3, r4
}
   151b2:	4618      	mov	r0, r3
   151b4:	b003      	add	sp, #12
   151b6:	bd30      	pop	{r4, r5, pc}
   151b8:	0001518d 	.word	0x0001518d

000151bc <Ssp::SetPeripheralMode(SspInterface::MasterSlaveMode, SspInterface::FrameMode, SspInterface::DataSize)>:

  /// Sets the various modes for the Peripheral
  /// @param mode - master or slave mode
  /// @param frame - format for Peripheral data to use
  /// @param size - number of bits per frame
  void SetPeripheralMode(MasterSlaveMode mode, FrameMode frame,
   151bc:	b570      	push	{r4, r5, r6, lr}
   151be:	b098      	sub	sp, #96	; 0x60
   151c0:	4674      	mov	r4, lr
   151c2:	9001      	str	r0, [sp, #4]
   151c4:	4608      	mov	r0, r1
   151c6:	4611      	mov	r1, r2
   151c8:	461a      	mov	r2, r3
   151ca:	4603      	mov	r3, r0
   151cc:	f88d 3003 	strb.w	r3, [sp, #3]
   151d0:	460b      	mov	r3, r1
   151d2:	f88d 3002 	strb.w	r3, [sp, #2]
   151d6:	4613      	mov	r3, r2
   151d8:	f88d 3001 	strb.w	r3, [sp, #1]
   151dc:	4623      	mov	r3, r4
   151de:	4619      	mov	r1, r3
   151e0:	4875      	ldr	r0, [pc, #468]	; (153b8 <Ssp::SetPeripheralMode(SspInterface::MasterSlaveMode, SspInterface::FrameMode, SspInterface::DataSize)+0x1fc>)
   151e2:	f7fd ff23 	bl	1302c <__cyg_profile_func_enter>
                         DataSize size) override
  {
    uint32_t pssp = util::Value(pssp_);
   151e6:	9b01      	ldr	r3, [sp, #4]
   151e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   151ea:	4618      	mov	r0, r3
   151ec:	f7fb fba8 	bl	10940 <int util::Value<Ssp::Peripheral, int>(Ssp::Peripheral)>
   151f0:	4603      	mov	r3, r0
   151f2:	9317      	str	r3, [sp, #92]	; 0x5c
    // TODO(#371): Find a better alternative to powering up the peripheral for
    // every method.
    Ssp::PowerUpPeripheral(Ssp::kPowerBit[pssp]);
   151f4:	9b01      	ldr	r3, [sp, #4]
   151f6:	1d18      	adds	r0, r3, #4
   151f8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   151fa:	009b      	lsls	r3, r3, #2
   151fc:	4a6f      	ldr	r2, [pc, #444]	; (153bc <Ssp::SetPeripheralMode(SspInterface::MasterSlaveMode, SspInterface::FrameMode, SspInterface::DataSize)+0x200>)
   151fe:	4413      	add	r3, r2
   15200:	4619      	mov	r1, r3
   15202:	f7fb fe2f 	bl	10e64 <Lpc40xxSystemController::PowerUpPeripheral(SystemControllerInterface::PeripheralID const&)>
    if (frame == kMicro)
   15206:	f89d 3002 	ldrb.w	r3, [sp, #2]
   1520a:	2b02      	cmp	r3, #2
   1520c:	d102      	bne.n	15214 <Ssp::SetPeripheralMode(SspInterface::MasterSlaveMode, SspInterface::FrameMode, SspInterface::DataSize)+0x58>
    {
      size = kEight;
   1520e:	2307      	movs	r3, #7
   15210:	f88d 3001 	strb.w	r3, [sp, #1]
    }
    ssp_registers[pssp]->CR0 =
        bit::Insert(ssp_registers[pssp]->CR0, util::Value(size), kDataBit, 4);
   15214:	4a6a      	ldr	r2, [pc, #424]	; (153c0 <Ssp::SetPeripheralMode(SspInterface::MasterSlaveMode, SspInterface::FrameMode, SspInterface::DataSize)+0x204>)
   15216:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   15218:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1521c:	681e      	ldr	r6, [r3, #0]
   1521e:	f89d 3001 	ldrb.w	r3, [sp, #1]
   15222:	4618      	mov	r0, r3
   15224:	f7ff ff82 	bl	1512c <unsigned char util::Value<SspInterface::DataSize, unsigned char>(SspInterface::DataSize)>
   15228:	4603      	mov	r3, r0
   1522a:	4619      	mov	r1, r3
    ssp_registers[pssp]->CR0 =
   1522c:	4a64      	ldr	r2, [pc, #400]	; (153c0 <Ssp::SetPeripheralMode(SspInterface::MasterSlaveMode, SspInterface::FrameMode, SspInterface::DataSize)+0x204>)
   1522e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   15230:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
   15234:	9608      	str	r6, [sp, #32]
   15236:	460b      	mov	r3, r1
   15238:	f88d 301f 	strb.w	r3, [sp, #31]
   1523c:	2300      	movs	r3, #0
   1523e:	9306      	str	r3, [sp, #24]
   15240:	2304      	movs	r3, #4
   15242:	9305      	str	r3, [sp, #20]
   15244:	4623      	mov	r3, r4
   15246:	4619      	mov	r1, r3
   15248:	485e      	ldr	r0, [pc, #376]	; (153c4 <Ssp::SetPeripheralMode(SspInterface::MasterSlaveMode, SspInterface::FrameMode, SspInterface::DataSize)+0x208>)
   1524a:	f7fd feef 	bl	1302c <__cyg_profile_func_enter>
  constexpr UnsignedT kFieldOfOnes = GenerateFieldOfOnes<T>();
   1524e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   15252:	9304      	str	r3, [sp, #16]
  constexpr size_t kTargetWidth     = sizeof(T) * 8;
   15254:	2320      	movs	r3, #32
   15256:	9303      	str	r3, [sp, #12]
  UnsignedT mask   = kFieldOfOnes >> (kTargetWidth - width);
   15258:	9b05      	ldr	r3, [sp, #20]
   1525a:	f1c3 0320 	rsb	r3, r3, #32
   1525e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   15262:	fa22 f303 	lsr.w	r3, r2, r3
   15266:	9302      	str	r3, [sp, #8]
  target &= ~(mask << position);
   15268:	9a02      	ldr	r2, [sp, #8]
   1526a:	9b06      	ldr	r3, [sp, #24]
   1526c:	fa02 f303 	lsl.w	r3, r2, r3
   15270:	43db      	mvns	r3, r3
   15272:	9a08      	ldr	r2, [sp, #32]
   15274:	4013      	ands	r3, r2
   15276:	9308      	str	r3, [sp, #32]
  target |= (value & mask) << position;
   15278:	f89d 201f 	ldrb.w	r2, [sp, #31]
   1527c:	9b02      	ldr	r3, [sp, #8]
   1527e:	401a      	ands	r2, r3
   15280:	9b06      	ldr	r3, [sp, #24]
   15282:	fa02 f303 	lsl.w	r3, r2, r3
   15286:	9a08      	ldr	r2, [sp, #32]
   15288:	4313      	orrs	r3, r2
   1528a:	9308      	str	r3, [sp, #32]
  return target;
   1528c:	9e08      	ldr	r6, [sp, #32]
   1528e:	4623      	mov	r3, r4
   15290:	4619      	mov	r1, r3
   15292:	484c      	ldr	r0, [pc, #304]	; (153c4 <Ssp::SetPeripheralMode(SspInterface::MasterSlaveMode, SspInterface::FrameMode, SspInterface::DataSize)+0x208>)
   15294:	f7fd fede 	bl	13054 <__cyg_profile_func_exit>
   15298:	602e      	str	r6, [r5, #0]
    ssp_registers[pssp]->CR0 =
        bit::Insert(ssp_registers[pssp]->CR0, util::Value(frame), kFrameBit, 2);
   1529a:	4a49      	ldr	r2, [pc, #292]	; (153c0 <Ssp::SetPeripheralMode(SspInterface::MasterSlaveMode, SspInterface::FrameMode, SspInterface::DataSize)+0x204>)
   1529c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   1529e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   152a2:	681e      	ldr	r6, [r3, #0]
   152a4:	f89d 3002 	ldrb.w	r3, [sp, #2]
   152a8:	4618      	mov	r0, r3
   152aa:	f7ff ff57 	bl	1515c <unsigned char util::Value<SspInterface::FrameMode, unsigned char>(SspInterface::FrameMode)>
   152ae:	4603      	mov	r3, r0
   152b0:	4619      	mov	r1, r3
    ssp_registers[pssp]->CR0 =
   152b2:	4a43      	ldr	r2, [pc, #268]	; (153c0 <Ssp::SetPeripheralMode(SspInterface::MasterSlaveMode, SspInterface::FrameMode, SspInterface::DataSize)+0x204>)
   152b4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   152b6:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
   152ba:	960f      	str	r6, [sp, #60]	; 0x3c
   152bc:	460b      	mov	r3, r1
   152be:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
   152c2:	2304      	movs	r3, #4
   152c4:	930d      	str	r3, [sp, #52]	; 0x34
   152c6:	2302      	movs	r3, #2
   152c8:	930c      	str	r3, [sp, #48]	; 0x30
   152ca:	4623      	mov	r3, r4
   152cc:	4619      	mov	r1, r3
   152ce:	483d      	ldr	r0, [pc, #244]	; (153c4 <Ssp::SetPeripheralMode(SspInterface::MasterSlaveMode, SspInterface::FrameMode, SspInterface::DataSize)+0x208>)
   152d0:	f7fd feac 	bl	1302c <__cyg_profile_func_enter>
  constexpr UnsignedT kFieldOfOnes = GenerateFieldOfOnes<T>();
   152d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   152d8:	930b      	str	r3, [sp, #44]	; 0x2c
  constexpr size_t kTargetWidth     = sizeof(T) * 8;
   152da:	2320      	movs	r3, #32
   152dc:	930a      	str	r3, [sp, #40]	; 0x28
  UnsignedT mask   = kFieldOfOnes >> (kTargetWidth - width);
   152de:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   152e0:	f1c3 0320 	rsb	r3, r3, #32
   152e4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   152e8:	fa22 f303 	lsr.w	r3, r2, r3
   152ec:	9309      	str	r3, [sp, #36]	; 0x24
  target &= ~(mask << position);
   152ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
   152f0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   152f2:	fa02 f303 	lsl.w	r3, r2, r3
   152f6:	43db      	mvns	r3, r3
   152f8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   152fa:	4013      	ands	r3, r2
   152fc:	930f      	str	r3, [sp, #60]	; 0x3c
  target |= (value & mask) << position;
   152fe:	f89d 203b 	ldrb.w	r2, [sp, #59]	; 0x3b
   15302:	9b09      	ldr	r3, [sp, #36]	; 0x24
   15304:	401a      	ands	r2, r3
   15306:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   15308:	fa02 f303 	lsl.w	r3, r2, r3
   1530c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   1530e:	4313      	orrs	r3, r2
   15310:	930f      	str	r3, [sp, #60]	; 0x3c
  return target;
   15312:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
   15314:	4623      	mov	r3, r4
   15316:	4619      	mov	r1, r3
   15318:	482a      	ldr	r0, [pc, #168]	; (153c4 <Ssp::SetPeripheralMode(SspInterface::MasterSlaveMode, SspInterface::FrameMode, SspInterface::DataSize)+0x208>)
   1531a:	f7fd fe9b 	bl	13054 <__cyg_profile_func_exit>
   1531e:	602e      	str	r6, [r5, #0]
    ssp_registers[pssp]->CR1 = bit::Insert(
        ssp_registers[pssp]->CR1, util::Value(mode), kMasterModeBit, 1);
   15320:	4a27      	ldr	r2, [pc, #156]	; (153c0 <Ssp::SetPeripheralMode(SspInterface::MasterSlaveMode, SspInterface::FrameMode, SspInterface::DataSize)+0x204>)
   15322:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   15324:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15328:	685e      	ldr	r6, [r3, #4]
    ssp_registers[pssp]->CR1 = bit::Insert(
   1532a:	f89d 3003 	ldrb.w	r3, [sp, #3]
   1532e:	4618      	mov	r0, r3
   15330:	f7ff ff2c 	bl	1518c <unsigned char util::Value<SspInterface::MasterSlaveMode, unsigned char>(SspInterface::MasterSlaveMode)>
   15334:	4603      	mov	r3, r0
   15336:	4619      	mov	r1, r3
   15338:	4a21      	ldr	r2, [pc, #132]	; (153c0 <Ssp::SetPeripheralMode(SspInterface::MasterSlaveMode, SspInterface::FrameMode, SspInterface::DataSize)+0x204>)
   1533a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   1533c:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
   15340:	9616      	str	r6, [sp, #88]	; 0x58
   15342:	460b      	mov	r3, r1
   15344:	f88d 3057 	strb.w	r3, [sp, #87]	; 0x57
   15348:	2302      	movs	r3, #2
   1534a:	9314      	str	r3, [sp, #80]	; 0x50
   1534c:	2301      	movs	r3, #1
   1534e:	9313      	str	r3, [sp, #76]	; 0x4c
   15350:	4623      	mov	r3, r4
   15352:	4619      	mov	r1, r3
   15354:	481b      	ldr	r0, [pc, #108]	; (153c4 <Ssp::SetPeripheralMode(SspInterface::MasterSlaveMode, SspInterface::FrameMode, SspInterface::DataSize)+0x208>)
   15356:	f7fd fe69 	bl	1302c <__cyg_profile_func_enter>
  constexpr UnsignedT kFieldOfOnes = GenerateFieldOfOnes<T>();
   1535a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1535e:	9312      	str	r3, [sp, #72]	; 0x48
  constexpr size_t kTargetWidth     = sizeof(T) * 8;
   15360:	2320      	movs	r3, #32
   15362:	9311      	str	r3, [sp, #68]	; 0x44
  UnsignedT mask   = kFieldOfOnes >> (kTargetWidth - width);
   15364:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   15366:	f1c3 0320 	rsb	r3, r3, #32
   1536a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1536e:	fa22 f303 	lsr.w	r3, r2, r3
   15372:	9310      	str	r3, [sp, #64]	; 0x40
  target &= ~(mask << position);
   15374:	9a10      	ldr	r2, [sp, #64]	; 0x40
   15376:	9b14      	ldr	r3, [sp, #80]	; 0x50
   15378:	fa02 f303 	lsl.w	r3, r2, r3
   1537c:	43db      	mvns	r3, r3
   1537e:	9a16      	ldr	r2, [sp, #88]	; 0x58
   15380:	4013      	ands	r3, r2
   15382:	9316      	str	r3, [sp, #88]	; 0x58
  target |= (value & mask) << position;
   15384:	f89d 2057 	ldrb.w	r2, [sp, #87]	; 0x57
   15388:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1538a:	401a      	ands	r2, r3
   1538c:	9b14      	ldr	r3, [sp, #80]	; 0x50
   1538e:	fa02 f303 	lsl.w	r3, r2, r3
   15392:	9a16      	ldr	r2, [sp, #88]	; 0x58
   15394:	4313      	orrs	r3, r2
   15396:	9316      	str	r3, [sp, #88]	; 0x58
  return target;
   15398:	9e16      	ldr	r6, [sp, #88]	; 0x58
   1539a:	4623      	mov	r3, r4
   1539c:	4619      	mov	r1, r3
   1539e:	4809      	ldr	r0, [pc, #36]	; (153c4 <Ssp::SetPeripheralMode(SspInterface::MasterSlaveMode, SspInterface::FrameMode, SspInterface::DataSize)+0x208>)
   153a0:	f7fd fe58 	bl	13054 <__cyg_profile_func_exit>
   153a4:	606e      	str	r6, [r5, #4]
   153a6:	4623      	mov	r3, r4
   153a8:	4619      	mov	r1, r3
   153aa:	4803      	ldr	r0, [pc, #12]	; (153b8 <Ssp::SetPeripheralMode(SspInterface::MasterSlaveMode, SspInterface::FrameMode, SspInterface::DataSize)+0x1fc>)
   153ac:	f7fd fe52 	bl	13054 <__cyg_profile_func_exit>
  }
   153b0:	bf00      	nop
   153b2:	b018      	add	sp, #96	; 0x60
   153b4:	bd70      	pop	{r4, r5, r6, pc}
   153b6:	bf00      	nop
   153b8:	000151bd 	.word	0x000151bd
   153bc:	00018c38 	.word	0x00018c38
   153c0:	10000044 	.word	0x10000044
   153c4:	00016ba5 	.word	0x00016ba5

000153c8 <Ssp::GetPeripheralMode()>:
  /// Gets the Peripheral modes from registers
  /// @return - returns a 16-bit value as follows: 0000_000x 0xx0_xxxx
  ///       MasterSlaveMode = 1-bit @ bit 8
  ///       FrameMode       = 2-bit @ bit 5
  ///       DataSize        = 4-bit @ bit 0
  uint16_t GetPeripheralMode() override
   153c8:	b570      	push	{r4, r5, r6, lr}
   153ca:	b096      	sub	sp, #88	; 0x58
   153cc:	4674      	mov	r4, lr
   153ce:	9001      	str	r0, [sp, #4]
   153d0:	4623      	mov	r3, r4
   153d2:	4619      	mov	r1, r3
   153d4:	4850      	ldr	r0, [pc, #320]	; (15518 <Ssp::GetPeripheralMode()+0x150>)
   153d6:	f7fd fe29 	bl	1302c <__cyg_profile_func_enter>
  {
    uint16_t return_val = 0;
   153da:	2300      	movs	r3, #0
   153dc:	f8ad 3056 	strh.w	r3, [sp, #86]	; 0x56
    uint32_t pssp       = util::Value(pssp_);
   153e0:	9b01      	ldr	r3, [sp, #4]
   153e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   153e4:	4618      	mov	r0, r3
   153e6:	f7fb faab 	bl	10940 <int util::Value<Ssp::Peripheral, int>(Ssp::Peripheral)>
   153ea:	4603      	mov	r3, r0
   153ec:	9314      	str	r3, [sp, #80]	; 0x50
    // TODO(#371): Find a better alternative to powering up the peripheral for
    // every method.
    Ssp::PowerUpPeripheral(Ssp::kPowerBit[pssp]);
   153ee:	9b01      	ldr	r3, [sp, #4]
   153f0:	1d18      	adds	r0, r3, #4
   153f2:	9b14      	ldr	r3, [sp, #80]	; 0x50
   153f4:	009b      	lsls	r3, r3, #2
   153f6:	4a49      	ldr	r2, [pc, #292]	; (1551c <Ssp::GetPeripheralMode()+0x154>)
   153f8:	4413      	add	r3, r2
   153fa:	4619      	mov	r1, r3
   153fc:	f7fb fd32 	bl	10e64 <Lpc40xxSystemController::PowerUpPeripheral(SystemControllerInterface::PeripheralID const&)>

    return_val = static_cast<uint16_t>(
        (bit::Extract(ssp_registers[pssp]->CR0, kDataBit, 4)) +
   15400:	4a47      	ldr	r2, [pc, #284]	; (15520 <Ssp::GetPeripheralMode()+0x158>)
   15402:	9b14      	ldr	r3, [sp, #80]	; 0x50
   15404:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15408:	681b      	ldr	r3, [r3, #0]
   1540a:	9307      	str	r3, [sp, #28]
   1540c:	2300      	movs	r3, #0
   1540e:	9306      	str	r3, [sp, #24]
   15410:	2304      	movs	r3, #4
   15412:	9305      	str	r3, [sp, #20]
   15414:	4623      	mov	r3, r4
   15416:	4619      	mov	r1, r3
   15418:	4842      	ldr	r0, [pc, #264]	; (15524 <Ssp::GetPeripheralMode()+0x15c>)
   1541a:	f7fd fe07 	bl	1302c <__cyg_profile_func_enter>
  constexpr UnsignedT kFieldOfOnes = GenerateFieldOfOnes<T>();
   1541e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   15422:	9304      	str	r3, [sp, #16]
  constexpr size_t kTargetWidth     = sizeof(T) * 8;
   15424:	2320      	movs	r3, #32
   15426:	9303      	str	r3, [sp, #12]
  UnsignedT mask   = kFieldOfOnes >> (kTargetWidth - width);
   15428:	9b05      	ldr	r3, [sp, #20]
   1542a:	f1c3 0320 	rsb	r3, r3, #32
   1542e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   15432:	fa22 f303 	lsr.w	r3, r2, r3
   15436:	9302      	str	r3, [sp, #8]
  return (target >> position) & mask;
   15438:	9a07      	ldr	r2, [sp, #28]
   1543a:	9b06      	ldr	r3, [sp, #24]
   1543c:	40da      	lsrs	r2, r3
   1543e:	9b02      	ldr	r3, [sp, #8]
   15440:	ea02 0503 	and.w	r5, r2, r3
   15444:	4623      	mov	r3, r4
   15446:	4619      	mov	r1, r3
   15448:	4836      	ldr	r0, [pc, #216]	; (15524 <Ssp::GetPeripheralMode()+0x15c>)
   1544a:	f7fd fe03 	bl	13054 <__cyg_profile_func_exit>
   1544e:	b2ad      	uxth	r5, r5
        ((bit::Extract(ssp_registers[pssp]->CR0, kFrameBit, 2)) << 5) +
   15450:	4a33      	ldr	r2, [pc, #204]	; (15520 <Ssp::GetPeripheralMode()+0x158>)
   15452:	9b14      	ldr	r3, [sp, #80]	; 0x50
   15454:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15458:	681b      	ldr	r3, [r3, #0]
   1545a:	930d      	str	r3, [sp, #52]	; 0x34
   1545c:	2304      	movs	r3, #4
   1545e:	930c      	str	r3, [sp, #48]	; 0x30
   15460:	2302      	movs	r3, #2
   15462:	930b      	str	r3, [sp, #44]	; 0x2c
   15464:	4623      	mov	r3, r4
   15466:	4619      	mov	r1, r3
   15468:	482e      	ldr	r0, [pc, #184]	; (15524 <Ssp::GetPeripheralMode()+0x15c>)
   1546a:	f7fd fddf 	bl	1302c <__cyg_profile_func_enter>
  constexpr UnsignedT kFieldOfOnes = GenerateFieldOfOnes<T>();
   1546e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   15472:	930a      	str	r3, [sp, #40]	; 0x28
  constexpr size_t kTargetWidth     = sizeof(T) * 8;
   15474:	2320      	movs	r3, #32
   15476:	9309      	str	r3, [sp, #36]	; 0x24
  UnsignedT mask   = kFieldOfOnes >> (kTargetWidth - width);
   15478:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1547a:	f1c3 0320 	rsb	r3, r3, #32
   1547e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   15482:	fa22 f303 	lsr.w	r3, r2, r3
   15486:	9308      	str	r3, [sp, #32]
  return (target >> position) & mask;
   15488:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   1548a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1548c:	40da      	lsrs	r2, r3
   1548e:	9b08      	ldr	r3, [sp, #32]
   15490:	ea02 0603 	and.w	r6, r2, r3
   15494:	4623      	mov	r3, r4
   15496:	4619      	mov	r1, r3
   15498:	4822      	ldr	r0, [pc, #136]	; (15524 <Ssp::GetPeripheralMode()+0x15c>)
   1549a:	f7fd fddb 	bl	13054 <__cyg_profile_func_exit>
   1549e:	b2b3      	uxth	r3, r6
   154a0:	015b      	lsls	r3, r3, #5
   154a2:	b29b      	uxth	r3, r3
        (bit::Extract(ssp_registers[pssp]->CR0, kDataBit, 4)) +
   154a4:	442b      	add	r3, r5
   154a6:	b29d      	uxth	r5, r3
        ((bit::Extract(ssp_registers[pssp]->CR1, kMasterModeBit)) << 8));
   154a8:	4a1d      	ldr	r2, [pc, #116]	; (15520 <Ssp::GetPeripheralMode()+0x158>)
   154aa:	9b14      	ldr	r3, [sp, #80]	; 0x50
   154ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   154b0:	685b      	ldr	r3, [r3, #4]
   154b2:	9313      	str	r3, [sp, #76]	; 0x4c
   154b4:	2302      	movs	r3, #2
   154b6:	9312      	str	r3, [sp, #72]	; 0x48
   154b8:	2301      	movs	r3, #1
   154ba:	9311      	str	r3, [sp, #68]	; 0x44
   154bc:	4623      	mov	r3, r4
   154be:	4619      	mov	r1, r3
   154c0:	4818      	ldr	r0, [pc, #96]	; (15524 <Ssp::GetPeripheralMode()+0x15c>)
   154c2:	f7fd fdb3 	bl	1302c <__cyg_profile_func_enter>
  constexpr UnsignedT kFieldOfOnes = GenerateFieldOfOnes<T>();
   154c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   154ca:	9310      	str	r3, [sp, #64]	; 0x40
  constexpr size_t kTargetWidth     = sizeof(T) * 8;
   154cc:	2320      	movs	r3, #32
   154ce:	930f      	str	r3, [sp, #60]	; 0x3c
  UnsignedT mask   = kFieldOfOnes >> (kTargetWidth - width);
   154d0:	9b11      	ldr	r3, [sp, #68]	; 0x44
   154d2:	f1c3 0320 	rsb	r3, r3, #32
   154d6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   154da:	fa22 f303 	lsr.w	r3, r2, r3
   154de:	930e      	str	r3, [sp, #56]	; 0x38
  return (target >> position) & mask;
   154e0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   154e2:	9b12      	ldr	r3, [sp, #72]	; 0x48
   154e4:	40da      	lsrs	r2, r3
   154e6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   154e8:	ea02 0603 	and.w	r6, r2, r3
   154ec:	4623      	mov	r3, r4
   154ee:	4619      	mov	r1, r3
   154f0:	480c      	ldr	r0, [pc, #48]	; (15524 <Ssp::GetPeripheralMode()+0x15c>)
   154f2:	f7fd fdaf 	bl	13054 <__cyg_profile_func_exit>
   154f6:	b2b3      	uxth	r3, r6
   154f8:	021b      	lsls	r3, r3, #8
   154fa:	b29b      	uxth	r3, r3
    return_val = static_cast<uint16_t>(
   154fc:	442b      	add	r3, r5
   154fe:	f8ad 3056 	strh.w	r3, [sp, #86]	; 0x56
    return return_val;
   15502:	f8bd 5056 	ldrh.w	r5, [sp, #86]	; 0x56
   15506:	4623      	mov	r3, r4
   15508:	4619      	mov	r1, r3
   1550a:	4803      	ldr	r0, [pc, #12]	; (15518 <Ssp::GetPeripheralMode()+0x150>)
   1550c:	f7fd fda2 	bl	13054 <__cyg_profile_func_exit>
   15510:	462b      	mov	r3, r5
  }
   15512:	4618      	mov	r0, r3
   15514:	b016      	add	sp, #88	; 0x58
   15516:	bd70      	pop	{r4, r5, r6, pc}
   15518:	000153c9 	.word	0x000153c9
   1551c:	00018c38 	.word	0x00018c38
   15520:	10000044 	.word	0x10000044
   15524:	00016c19 	.word	0x00016c19

00015528 <Ssp::SetClock(bool, bool, unsigned char, unsigned char)>:
  /// Sets the clock rate for the Peripheral
  /// @param polarity - maintain bus on clock 0=low or 1=high between frames
  /// @param phase - capture serial data on 0=first or 1=second clock cycle
  /// @param divider - see notes in SSP_Interface above
  /// @param prescaler - divides the PCLK, must be even value between 2-254
  void SetClock(bool polarity, bool phase, uint8_t divider,
   15528:	b570      	push	{r4, r5, r6, lr}
   1552a:	b098      	sub	sp, #96	; 0x60
   1552c:	4674      	mov	r4, lr
   1552e:	9001      	str	r0, [sp, #4]
   15530:	4608      	mov	r0, r1
   15532:	4611      	mov	r1, r2
   15534:	461a      	mov	r2, r3
   15536:	4603      	mov	r3, r0
   15538:	f88d 3003 	strb.w	r3, [sp, #3]
   1553c:	460b      	mov	r3, r1
   1553e:	f88d 3002 	strb.w	r3, [sp, #2]
   15542:	4613      	mov	r3, r2
   15544:	f88d 3001 	strb.w	r3, [sp, #1]
   15548:	4623      	mov	r3, r4
   1554a:	4619      	mov	r1, r3
   1554c:	486c      	ldr	r0, [pc, #432]	; (15700 <Ssp::SetClock(bool, bool, unsigned char, unsigned char)+0x1d8>)
   1554e:	f7fd fd6d 	bl	1302c <__cyg_profile_func_enter>
                uint8_t prescaler) override
  {
    uint32_t pssp = util::Value(pssp_);
   15552:	9b01      	ldr	r3, [sp, #4]
   15554:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   15556:	4618      	mov	r0, r3
   15558:	f7fb f9f2 	bl	10940 <int util::Value<Ssp::Peripheral, int>(Ssp::Peripheral)>
   1555c:	4603      	mov	r3, r0
   1555e:	9317      	str	r3, [sp, #92]	; 0x5c
    // TODO(#371): Find a better alternative to powering up the peripheral for
    // every method.
    Ssp::PowerUpPeripheral(Ssp::kPowerBit[pssp]);
   15560:	9b01      	ldr	r3, [sp, #4]
   15562:	1d18      	adds	r0, r3, #4
   15564:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   15566:	009b      	lsls	r3, r3, #2
   15568:	4a66      	ldr	r2, [pc, #408]	; (15704 <Ssp::SetClock(bool, bool, unsigned char, unsigned char)+0x1dc>)
   1556a:	4413      	add	r3, r2
   1556c:	4619      	mov	r1, r3
   1556e:	f7fb fc79 	bl	10e64 <Lpc40xxSystemController::PowerUpPeripheral(SystemControllerInterface::PeripheralID const&)>
    // first clear the appropriate registers
    ssp_registers[pssp]->CR0 =
        bit::Insert(ssp_registers[pssp]->CR0, polarity, kPolarityBit, 1);
   15572:	4a65      	ldr	r2, [pc, #404]	; (15708 <Ssp::SetClock(bool, bool, unsigned char, unsigned char)+0x1e0>)
   15574:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   15576:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1557a:	681b      	ldr	r3, [r3, #0]
    ssp_registers[pssp]->CR0 =
   1557c:	4962      	ldr	r1, [pc, #392]	; (15708 <Ssp::SetClock(bool, bool, unsigned char, unsigned char)+0x1e0>)
   1557e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   15580:	f851 5022 	ldr.w	r5, [r1, r2, lsl #2]
   15584:	9308      	str	r3, [sp, #32]
   15586:	f89d 3003 	ldrb.w	r3, [sp, #3]
   1558a:	f88d 301f 	strb.w	r3, [sp, #31]
   1558e:	2306      	movs	r3, #6
   15590:	9306      	str	r3, [sp, #24]
   15592:	2301      	movs	r3, #1
   15594:	9305      	str	r3, [sp, #20]
   15596:	4623      	mov	r3, r4
   15598:	4619      	mov	r1, r3
   1559a:	485c      	ldr	r0, [pc, #368]	; (1570c <Ssp::SetClock(bool, bool, unsigned char, unsigned char)+0x1e4>)
   1559c:	f7fd fd46 	bl	1302c <__cyg_profile_func_enter>
  constexpr UnsignedT kFieldOfOnes = GenerateFieldOfOnes<T>();
   155a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   155a4:	9304      	str	r3, [sp, #16]
  constexpr size_t kTargetWidth     = sizeof(T) * 8;
   155a6:	2320      	movs	r3, #32
   155a8:	9303      	str	r3, [sp, #12]
  UnsignedT mask   = kFieldOfOnes >> (kTargetWidth - width);
   155aa:	9b05      	ldr	r3, [sp, #20]
   155ac:	f1c3 0320 	rsb	r3, r3, #32
   155b0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   155b4:	fa22 f303 	lsr.w	r3, r2, r3
   155b8:	9302      	str	r3, [sp, #8]
  target &= ~(mask << position);
   155ba:	9a02      	ldr	r2, [sp, #8]
   155bc:	9b06      	ldr	r3, [sp, #24]
   155be:	fa02 f303 	lsl.w	r3, r2, r3
   155c2:	43db      	mvns	r3, r3
   155c4:	9a08      	ldr	r2, [sp, #32]
   155c6:	4013      	ands	r3, r2
   155c8:	9308      	str	r3, [sp, #32]
  target |= (value & mask) << position;
   155ca:	f89d 201f 	ldrb.w	r2, [sp, #31]
   155ce:	9b02      	ldr	r3, [sp, #8]
   155d0:	401a      	ands	r2, r3
   155d2:	9b06      	ldr	r3, [sp, #24]
   155d4:	fa02 f303 	lsl.w	r3, r2, r3
   155d8:	9a08      	ldr	r2, [sp, #32]
   155da:	4313      	orrs	r3, r2
   155dc:	9308      	str	r3, [sp, #32]
  return target;
   155de:	9e08      	ldr	r6, [sp, #32]
   155e0:	4623      	mov	r3, r4
   155e2:	4619      	mov	r1, r3
   155e4:	4849      	ldr	r0, [pc, #292]	; (1570c <Ssp::SetClock(bool, bool, unsigned char, unsigned char)+0x1e4>)
   155e6:	f7fd fd35 	bl	13054 <__cyg_profile_func_exit>
   155ea:	602e      	str	r6, [r5, #0]
    ssp_registers[pssp]->CR0 =
        bit::Insert(ssp_registers[pssp]->CR0, phase, kPhaseBit, 1);
   155ec:	4a46      	ldr	r2, [pc, #280]	; (15708 <Ssp::SetClock(bool, bool, unsigned char, unsigned char)+0x1e0>)
   155ee:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   155f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   155f4:	681b      	ldr	r3, [r3, #0]
    ssp_registers[pssp]->CR0 =
   155f6:	4944      	ldr	r1, [pc, #272]	; (15708 <Ssp::SetClock(bool, bool, unsigned char, unsigned char)+0x1e0>)
   155f8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   155fa:	f851 5022 	ldr.w	r5, [r1, r2, lsl #2]
   155fe:	930f      	str	r3, [sp, #60]	; 0x3c
   15600:	f89d 3002 	ldrb.w	r3, [sp, #2]
   15604:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
   15608:	2307      	movs	r3, #7
   1560a:	930d      	str	r3, [sp, #52]	; 0x34
   1560c:	2301      	movs	r3, #1
   1560e:	930c      	str	r3, [sp, #48]	; 0x30
   15610:	4623      	mov	r3, r4
   15612:	4619      	mov	r1, r3
   15614:	483d      	ldr	r0, [pc, #244]	; (1570c <Ssp::SetClock(bool, bool, unsigned char, unsigned char)+0x1e4>)
   15616:	f7fd fd09 	bl	1302c <__cyg_profile_func_enter>
  constexpr UnsignedT kFieldOfOnes = GenerateFieldOfOnes<T>();
   1561a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1561e:	930b      	str	r3, [sp, #44]	; 0x2c
  constexpr size_t kTargetWidth     = sizeof(T) * 8;
   15620:	2320      	movs	r3, #32
   15622:	930a      	str	r3, [sp, #40]	; 0x28
  UnsignedT mask   = kFieldOfOnes >> (kTargetWidth - width);
   15624:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   15626:	f1c3 0320 	rsb	r3, r3, #32
   1562a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1562e:	fa22 f303 	lsr.w	r3, r2, r3
   15632:	9309      	str	r3, [sp, #36]	; 0x24
  target &= ~(mask << position);
   15634:	9a09      	ldr	r2, [sp, #36]	; 0x24
   15636:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   15638:	fa02 f303 	lsl.w	r3, r2, r3
   1563c:	43db      	mvns	r3, r3
   1563e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   15640:	4013      	ands	r3, r2
   15642:	930f      	str	r3, [sp, #60]	; 0x3c
  target |= (value & mask) << position;
   15644:	f89d 203b 	ldrb.w	r2, [sp, #59]	; 0x3b
   15648:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1564a:	401a      	ands	r2, r3
   1564c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1564e:	fa02 f303 	lsl.w	r3, r2, r3
   15652:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   15654:	4313      	orrs	r3, r2
   15656:	930f      	str	r3, [sp, #60]	; 0x3c
  return target;
   15658:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
   1565a:	4623      	mov	r3, r4
   1565c:	4619      	mov	r1, r3
   1565e:	482b      	ldr	r0, [pc, #172]	; (1570c <Ssp::SetClock(bool, bool, unsigned char, unsigned char)+0x1e4>)
   15660:	f7fd fcf8 	bl	13054 <__cyg_profile_func_exit>
   15664:	602e      	str	r6, [r5, #0]
    ssp_registers[pssp]->CR0 =
        bit::Insert(ssp_registers[pssp]->CR0, divider, kDividerBit, 8);
   15666:	4a28      	ldr	r2, [pc, #160]	; (15708 <Ssp::SetClock(bool, bool, unsigned char, unsigned char)+0x1e0>)
   15668:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   1566a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1566e:	681b      	ldr	r3, [r3, #0]
    ssp_registers[pssp]->CR0 =
   15670:	4925      	ldr	r1, [pc, #148]	; (15708 <Ssp::SetClock(bool, bool, unsigned char, unsigned char)+0x1e0>)
   15672:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   15674:	f851 5022 	ldr.w	r5, [r1, r2, lsl #2]
   15678:	9316      	str	r3, [sp, #88]	; 0x58
   1567a:	f89d 3001 	ldrb.w	r3, [sp, #1]
   1567e:	f88d 3057 	strb.w	r3, [sp, #87]	; 0x57
   15682:	2308      	movs	r3, #8
   15684:	9314      	str	r3, [sp, #80]	; 0x50
   15686:	2308      	movs	r3, #8
   15688:	9313      	str	r3, [sp, #76]	; 0x4c
   1568a:	4623      	mov	r3, r4
   1568c:	4619      	mov	r1, r3
   1568e:	4820      	ldr	r0, [pc, #128]	; (15710 <Ssp::SetClock(bool, bool, unsigned char, unsigned char)+0x1e8>)
   15690:	f7fd fccc 	bl	1302c <__cyg_profile_func_enter>
  constexpr UnsignedT kFieldOfOnes = GenerateFieldOfOnes<T>();
   15694:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   15698:	9312      	str	r3, [sp, #72]	; 0x48
  constexpr size_t kTargetWidth     = sizeof(T) * 8;
   1569a:	2320      	movs	r3, #32
   1569c:	9311      	str	r3, [sp, #68]	; 0x44
  UnsignedT mask   = kFieldOfOnes >> (kTargetWidth - width);
   1569e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   156a0:	f1c3 0320 	rsb	r3, r3, #32
   156a4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   156a8:	fa22 f303 	lsr.w	r3, r2, r3
   156ac:	9310      	str	r3, [sp, #64]	; 0x40
  target &= ~(mask << position);
   156ae:	9a10      	ldr	r2, [sp, #64]	; 0x40
   156b0:	9b14      	ldr	r3, [sp, #80]	; 0x50
   156b2:	fa02 f303 	lsl.w	r3, r2, r3
   156b6:	43db      	mvns	r3, r3
   156b8:	9a16      	ldr	r2, [sp, #88]	; 0x58
   156ba:	4013      	ands	r3, r2
   156bc:	9316      	str	r3, [sp, #88]	; 0x58
  target |= (value & mask) << position;
   156be:	f89d 2057 	ldrb.w	r2, [sp, #87]	; 0x57
   156c2:	9b10      	ldr	r3, [sp, #64]	; 0x40
   156c4:	401a      	ands	r2, r3
   156c6:	9b14      	ldr	r3, [sp, #80]	; 0x50
   156c8:	fa02 f303 	lsl.w	r3, r2, r3
   156cc:	9a16      	ldr	r2, [sp, #88]	; 0x58
   156ce:	4313      	orrs	r3, r2
   156d0:	9316      	str	r3, [sp, #88]	; 0x58
  return target;
   156d2:	9e16      	ldr	r6, [sp, #88]	; 0x58
   156d4:	4623      	mov	r3, r4
   156d6:	4619      	mov	r1, r3
   156d8:	480d      	ldr	r0, [pc, #52]	; (15710 <Ssp::SetClock(bool, bool, unsigned char, unsigned char)+0x1e8>)
   156da:	f7fd fcbb 	bl	13054 <__cyg_profile_func_exit>
   156de:	602e      	str	r6, [r5, #0]
    ssp_registers[pssp]->CPSR = prescaler;
   156e0:	4a09      	ldr	r2, [pc, #36]	; (15708 <Ssp::SetClock(bool, bool, unsigned char, unsigned char)+0x1e0>)
   156e2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   156e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   156e8:	f89d 2070 	ldrb.w	r2, [sp, #112]	; 0x70
   156ec:	611a      	str	r2, [r3, #16]
   156ee:	4623      	mov	r3, r4
   156f0:	4619      	mov	r1, r3
   156f2:	4803      	ldr	r0, [pc, #12]	; (15700 <Ssp::SetClock(bool, bool, unsigned char, unsigned char)+0x1d8>)
   156f4:	f7fd fcae 	bl	13054 <__cyg_profile_func_exit>
  }
   156f8:	bf00      	nop
   156fa:	b018      	add	sp, #96	; 0x60
   156fc:	bd70      	pop	{r4, r5, r6, pc}
   156fe:	bf00      	nop
   15700:	00015529 	.word	0x00015529
   15704:	00018c38 	.word	0x00018c38
   15708:	10000044 	.word	0x10000044
   1570c:	00016c6d 	.word	0x00016c6d
   15710:	00016ba5 	.word	0x00016ba5

00015714 <Ssp::GetClock()>:
  ///   0000_0000 0000_0x0x xxxx_xxxx xxxx_xxxx
  ///       polarity    = 1-bit @ bit 18
  ///       phase       = 1-bit @ bit 16
  ///       divider     = 8-bits @ bit 8
  ///       prescaler   = 8-bits @ bit 0
  uint32_t GetClock() override
   15714:	b570      	push	{r4, r5, r6, lr}
   15716:	b094      	sub	sp, #80	; 0x50
   15718:	4674      	mov	r4, lr
   1571a:	9001      	str	r0, [sp, #4]
   1571c:	4623      	mov	r3, r4
   1571e:	4619      	mov	r1, r3
   15720:	4858      	ldr	r0, [pc, #352]	; (15884 <Ssp::GetClock()+0x170>)
   15722:	f7fd fc83 	bl	1302c <__cyg_profile_func_enter>
  {
    uint32_t return_val = 0;
   15726:	2300      	movs	r3, #0
   15728:	9313      	str	r3, [sp, #76]	; 0x4c
    uint32_t pssp       = util::Value(pssp_);
   1572a:	9b01      	ldr	r3, [sp, #4]
   1572c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1572e:	4618      	mov	r0, r3
   15730:	f7fb f906 	bl	10940 <int util::Value<Ssp::Peripheral, int>(Ssp::Peripheral)>
   15734:	4603      	mov	r3, r0
   15736:	9312      	str	r3, [sp, #72]	; 0x48
    // TODO(#371): Find a better alternative to powering up the peripheral for
    // every method.
    Ssp::PowerUpPeripheral(Ssp::kPowerBit[pssp]);
   15738:	9b01      	ldr	r3, [sp, #4]
   1573a:	1d18      	adds	r0, r3, #4
   1573c:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1573e:	009b      	lsls	r3, r3, #2
   15740:	4a51      	ldr	r2, [pc, #324]	; (15888 <Ssp::GetClock()+0x174>)
   15742:	4413      	add	r3, r2
   15744:	4619      	mov	r1, r3
   15746:	f7fb fb8d 	bl	10e64 <Lpc40xxSystemController::PowerUpPeripheral(SystemControllerInterface::PeripheralID const&)>

    return_val =
        (bit::Extract(ssp_registers[pssp]->CPSR, kPrescalerBit, 8)) +
   1574a:	4a50      	ldr	r2, [pc, #320]	; (1588c <Ssp::GetClock()+0x178>)
   1574c:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1574e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15752:	691b      	ldr	r3, [r3, #16]
   15754:	9307      	str	r3, [sp, #28]
   15756:	2300      	movs	r3, #0
   15758:	9306      	str	r3, [sp, #24]
   1575a:	2308      	movs	r3, #8
   1575c:	9305      	str	r3, [sp, #20]
   1575e:	4623      	mov	r3, r4
   15760:	4619      	mov	r1, r3
   15762:	484b      	ldr	r0, [pc, #300]	; (15890 <Ssp::GetClock()+0x17c>)
   15764:	f7fd fc62 	bl	1302c <__cyg_profile_func_enter>
  constexpr UnsignedT kFieldOfOnes = GenerateFieldOfOnes<T>();
   15768:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1576c:	9304      	str	r3, [sp, #16]
  constexpr size_t kTargetWidth     = sizeof(T) * 8;
   1576e:	2320      	movs	r3, #32
   15770:	9303      	str	r3, [sp, #12]
  UnsignedT mask   = kFieldOfOnes >> (kTargetWidth - width);
   15772:	9b05      	ldr	r3, [sp, #20]
   15774:	f1c3 0320 	rsb	r3, r3, #32
   15778:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1577c:	fa22 f303 	lsr.w	r3, r2, r3
   15780:	9302      	str	r3, [sp, #8]
  return (target >> position) & mask;
   15782:	9a07      	ldr	r2, [sp, #28]
   15784:	9b06      	ldr	r3, [sp, #24]
   15786:	40da      	lsrs	r2, r3
   15788:	9b02      	ldr	r3, [sp, #8]
   1578a:	ea02 0503 	and.w	r5, r2, r3
   1578e:	4623      	mov	r3, r4
   15790:	4619      	mov	r1, r3
   15792:	483f      	ldr	r0, [pc, #252]	; (15890 <Ssp::GetClock()+0x17c>)
   15794:	f7fd fc5e 	bl	13054 <__cyg_profile_func_exit>
        ((bit::Extract(ssp_registers[pssp]->CR0, kDividerBit, 8)) << 8) +
   15798:	4a3c      	ldr	r2, [pc, #240]	; (1588c <Ssp::GetClock()+0x178>)
   1579a:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1579c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   157a0:	681b      	ldr	r3, [r3, #0]
   157a2:	930d      	str	r3, [sp, #52]	; 0x34
   157a4:	2308      	movs	r3, #8
   157a6:	930c      	str	r3, [sp, #48]	; 0x30
   157a8:	2308      	movs	r3, #8
   157aa:	930b      	str	r3, [sp, #44]	; 0x2c
   157ac:	4623      	mov	r3, r4
   157ae:	4619      	mov	r1, r3
   157b0:	4837      	ldr	r0, [pc, #220]	; (15890 <Ssp::GetClock()+0x17c>)
   157b2:	f7fd fc3b 	bl	1302c <__cyg_profile_func_enter>
  constexpr UnsignedT kFieldOfOnes = GenerateFieldOfOnes<T>();
   157b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   157ba:	930a      	str	r3, [sp, #40]	; 0x28
  constexpr size_t kTargetWidth     = sizeof(T) * 8;
   157bc:	2320      	movs	r3, #32
   157be:	9309      	str	r3, [sp, #36]	; 0x24
  UnsignedT mask   = kFieldOfOnes >> (kTargetWidth - width);
   157c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   157c2:	f1c3 0320 	rsb	r3, r3, #32
   157c6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   157ca:	fa22 f303 	lsr.w	r3, r2, r3
   157ce:	9308      	str	r3, [sp, #32]
  return (target >> position) & mask;
   157d0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   157d2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   157d4:	40da      	lsrs	r2, r3
   157d6:	9b08      	ldr	r3, [sp, #32]
   157d8:	ea02 0603 	and.w	r6, r2, r3
   157dc:	4623      	mov	r3, r4
   157de:	4619      	mov	r1, r3
   157e0:	482b      	ldr	r0, [pc, #172]	; (15890 <Ssp::GetClock()+0x17c>)
   157e2:	f7fd fc37 	bl	13054 <__cyg_profile_func_exit>
   157e6:	0233      	lsls	r3, r6, #8
        (bit::Extract(ssp_registers[pssp]->CPSR, kPrescalerBit, 8)) +
   157e8:	441d      	add	r5, r3
        ((bit::Read(ssp_registers[pssp]->CR0, kPhaseBit)) << 16) +
   157ea:	4a28      	ldr	r2, [pc, #160]	; (1588c <Ssp::GetClock()+0x178>)
   157ec:	9b12      	ldr	r3, [sp, #72]	; 0x48
   157ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   157f2:	681b      	ldr	r3, [r3, #0]
   157f4:	930f      	str	r3, [sp, #60]	; 0x3c
   157f6:	2307      	movs	r3, #7
   157f8:	930e      	str	r3, [sp, #56]	; 0x38
   157fa:	4623      	mov	r3, r4
   157fc:	4619      	mov	r1, r3
   157fe:	4825      	ldr	r0, [pc, #148]	; (15894 <Ssp::GetClock()+0x180>)
   15800:	f7fd fc14 	bl	1302c <__cyg_profile_func_enter>
  return static_cast<bool>(target & (1 << position));
   15804:	2201      	movs	r2, #1
   15806:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   15808:	fa02 f303 	lsl.w	r3, r2, r3
   1580c:	461a      	mov	r2, r3
   1580e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   15810:	4013      	ands	r3, r2
   15812:	2b00      	cmp	r3, #0
   15814:	bf14      	ite	ne
   15816:	2301      	movne	r3, #1
   15818:	2300      	moveq	r3, #0
   1581a:	b2de      	uxtb	r6, r3
   1581c:	4623      	mov	r3, r4
   1581e:	4619      	mov	r1, r3
   15820:	481c      	ldr	r0, [pc, #112]	; (15894 <Ssp::GetClock()+0x180>)
   15822:	f7fd fc17 	bl	13054 <__cyg_profile_func_exit>
   15826:	4633      	mov	r3, r6
   15828:	041b      	lsls	r3, r3, #16
        ((bit::Extract(ssp_registers[pssp]->CR0, kDividerBit, 8)) << 8) +
   1582a:	441d      	add	r5, r3
        ((bit::Read(ssp_registers[pssp]->CR0, kPolarityBit)) << 18);
   1582c:	4a17      	ldr	r2, [pc, #92]	; (1588c <Ssp::GetClock()+0x178>)
   1582e:	9b12      	ldr	r3, [sp, #72]	; 0x48
   15830:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15834:	681b      	ldr	r3, [r3, #0]
   15836:	9311      	str	r3, [sp, #68]	; 0x44
   15838:	2306      	movs	r3, #6
   1583a:	9310      	str	r3, [sp, #64]	; 0x40
   1583c:	4623      	mov	r3, r4
   1583e:	4619      	mov	r1, r3
   15840:	4814      	ldr	r0, [pc, #80]	; (15894 <Ssp::GetClock()+0x180>)
   15842:	f7fd fbf3 	bl	1302c <__cyg_profile_func_enter>
   15846:	2201      	movs	r2, #1
   15848:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1584a:	fa02 f303 	lsl.w	r3, r2, r3
   1584e:	461a      	mov	r2, r3
   15850:	9b11      	ldr	r3, [sp, #68]	; 0x44
   15852:	4013      	ands	r3, r2
   15854:	2b00      	cmp	r3, #0
   15856:	bf14      	ite	ne
   15858:	2301      	movne	r3, #1
   1585a:	2300      	moveq	r3, #0
   1585c:	b2de      	uxtb	r6, r3
   1585e:	4623      	mov	r3, r4
   15860:	4619      	mov	r1, r3
   15862:	480c      	ldr	r0, [pc, #48]	; (15894 <Ssp::GetClock()+0x180>)
   15864:	f7fd fbf6 	bl	13054 <__cyg_profile_func_exit>
   15868:	4633      	mov	r3, r6
   1586a:	049b      	lsls	r3, r3, #18
    return_val =
   1586c:	442b      	add	r3, r5
   1586e:	9313      	str	r3, [sp, #76]	; 0x4c

    return return_val;
   15870:	9d13      	ldr	r5, [sp, #76]	; 0x4c
   15872:	4623      	mov	r3, r4
   15874:	4619      	mov	r1, r3
   15876:	4803      	ldr	r0, [pc, #12]	; (15884 <Ssp::GetClock()+0x170>)
   15878:	f7fd fbec 	bl	13054 <__cyg_profile_func_exit>
   1587c:	462b      	mov	r3, r5
  }
   1587e:	4618      	mov	r0, r3
   15880:	b014      	add	sp, #80	; 0x50
   15882:	bd70      	pop	{r4, r5, r6, pc}
   15884:	00015715 	.word	0x00015715
   15888:	00018c38 	.word	0x00018c38
   1588c:	10000044 	.word	0x10000044
   15890:	00016c19 	.word	0x00016c19
   15894:	00010b9d 	.word	0x00010b9d

00015898 <SdInterface::SdInterface()>:
// NOLINTNEXTLINE(readability-identifier-naming)
// Relevant Datasheet:
// https://www.sdcard.org/downloads/pls/pdf/index.php?p=Part1_Physical_Layer_Simplified_Specification_Ver6.00.jpg&f=Part1_Physical_Layer_Simplified_Specification_Ver6.00.pdf&e=EN_SS1
// TODO(#348):  Write a class to represent a single Sd Card Block to make use
//              of block-related functions easier.
class SdInterface
   15898:	b530      	push	{r4, r5, lr}
   1589a:	b083      	sub	sp, #12
   1589c:	4675      	mov	r5, lr
   1589e:	9001      	str	r0, [sp, #4]
   158a0:	462b      	mov	r3, r5
   158a2:	4619      	mov	r1, r3
   158a4:	4807      	ldr	r0, [pc, #28]	; (158c4 <SdInterface::SdInterface()+0x2c>)
   158a6:	f7fd fbc1 	bl	1302c <__cyg_profile_func_enter>
   158aa:	4a07      	ldr	r2, [pc, #28]	; (158c8 <SdInterface::SdInterface()+0x30>)
   158ac:	9b01      	ldr	r3, [sp, #4]
   158ae:	601a      	str	r2, [r3, #0]
   158b0:	9c01      	ldr	r4, [sp, #4]
   158b2:	462b      	mov	r3, r5
   158b4:	4619      	mov	r1, r3
   158b6:	4803      	ldr	r0, [pc, #12]	; (158c4 <SdInterface::SdInterface()+0x2c>)
   158b8:	f7fd fbcc 	bl	13054 <__cyg_profile_func_exit>
   158bc:	4623      	mov	r3, r4
   158be:	4618      	mov	r0, r3
   158c0:	b003      	add	sp, #12
   158c2:	bd30      	pop	{r4, r5, pc}
   158c4:	00015899 	.word	0x00015899
   158c8:	00019010 	.word	0x00019010

000158cc <Sd::Sd(Sd::DebugSdCard_t, unsigned char, unsigned char, unsigned char, unsigned char)>:
  /// port that is broken out through the board's GPIO, allowing you to probe
  /// the chip select manually. To use this version instead of the main version,
  /// instantiate an Sd card instance like so:
  ///
  ///   Sd sdcard(Sd::DebugSdCard_t{});
  constexpr Sd(DebugSdCard_t, uint8_t port = 1, uint8_t pin = 8,
   158cc:	b530      	push	{r4, r5, lr}
   158ce:	b083      	sub	sp, #12
   158d0:	4675      	mov	r5, lr
   158d2:	9001      	str	r0, [sp, #4]
   158d4:	f88d 1000 	strb.w	r1, [sp]
   158d8:	4611      	mov	r1, r2
   158da:	461a      	mov	r2, r3
   158dc:	460b      	mov	r3, r1
   158de:	f88d 3003 	strb.w	r3, [sp, #3]
   158e2:	4613      	mov	r3, r2
   158e4:	f88d 3002 	strb.w	r3, [sp, #2]
   158e8:	462b      	mov	r3, r5
   158ea:	4619      	mov	r1, r3
   158ec:	481d      	ldr	r0, [pc, #116]	; (15964 <Sd::Sd(Sd::DebugSdCard_t, unsigned char, unsigned char, unsigned char, unsigned char)+0x98>)
   158ee:	f7fd fb9d 	bl	1302c <__cyg_profile_func_enter>
      : ssp_interface_(&ssp_),
        ssp_(Ssp::Peripheral::kSsp2),
        chip_select_(&chip_select_pin_),
        chip_select_external_(&chip_select_external_pin_),
        chip_select_pin_(port, pin),
        chip_select_external_pin_(extport, extpin)
   158f2:	9b01      	ldr	r3, [sp, #4]
   158f4:	4618      	mov	r0, r3
   158f6:	f7ff ffcf 	bl	15898 <SdInterface::SdInterface()>
   158fa:	4a1b      	ldr	r2, [pc, #108]	; (15968 <Sd::Sd(Sd::DebugSdCard_t, unsigned char, unsigned char, unsigned char, unsigned char)+0x9c>)
   158fc:	9b01      	ldr	r3, [sp, #4]
   158fe:	601a      	str	r2, [r3, #0]
   15900:	9b01      	ldr	r3, [sp, #4]
   15902:	f103 0208 	add.w	r2, r3, #8
   15906:	9b01      	ldr	r3, [sp, #4]
   15908:	605a      	str	r2, [r3, #4]
   1590a:	9b01      	ldr	r3, [sp, #4]
   1590c:	3308      	adds	r3, #8
   1590e:	2102      	movs	r1, #2
   15910:	4618      	mov	r0, r3
   15912:	f7ff faf9 	bl	14f08 <Ssp::Ssp(Ssp::Peripheral)>
   15916:	9b01      	ldr	r3, [sp, #4]
   15918:	f103 0240 	add.w	r2, r3, #64	; 0x40
   1591c:	9b01      	ldr	r3, [sp, #4]
   1591e:	639a      	str	r2, [r3, #56]	; 0x38
   15920:	9b01      	ldr	r3, [sp, #4]
   15922:	f103 0254 	add.w	r2, r3, #84	; 0x54
   15926:	9b01      	ldr	r3, [sp, #4]
   15928:	63da      	str	r2, [r3, #60]	; 0x3c
   1592a:	9b01      	ldr	r3, [sp, #4]
   1592c:	3340      	adds	r3, #64	; 0x40
   1592e:	f89d 2002 	ldrb.w	r2, [sp, #2]
   15932:	f89d 1003 	ldrb.w	r1, [sp, #3]
   15936:	4618      	mov	r0, r3
   15938:	f7fe fe5a 	bl	145f0 <Gpio::Gpio(unsigned char, unsigned char)>
   1593c:	9b01      	ldr	r3, [sp, #4]
   1593e:	3354      	adds	r3, #84	; 0x54
   15940:	f89d 201c 	ldrb.w	r2, [sp, #28]
   15944:	f89d 1018 	ldrb.w	r1, [sp, #24]
   15948:	4618      	mov	r0, r3
   1594a:	f7fe fe51 	bl	145f0 <Gpio::Gpio(unsigned char, unsigned char)>
  {
  }
   1594e:	9c01      	ldr	r4, [sp, #4]
   15950:	462b      	mov	r3, r5
   15952:	4619      	mov	r1, r3
   15954:	4803      	ldr	r0, [pc, #12]	; (15964 <Sd::Sd(Sd::DebugSdCard_t, unsigned char, unsigned char, unsigned char, unsigned char)+0x98>)
   15956:	f7fd fb7d 	bl	13054 <__cyg_profile_func_exit>
   1595a:	4623      	mov	r3, r4
   1595c:	4618      	mov	r0, r3
   1595e:	b003      	add	sp, #12
   15960:	bd30      	pop	{r4, r5, pc}
   15962:	bf00      	nop
   15964:	000158cd 	.word	0x000158cd
   15968:	00018fe4 	.word	0x00018fe4

0001596c <Sd::Initialize()>:

  void Initialize() override
   1596c:	b530      	push	{r4, r5, lr}
   1596e:	b085      	sub	sp, #20
   15970:	4675      	mov	r5, lr
   15972:	9003      	str	r0, [sp, #12]
   15974:	462b      	mov	r3, r5
   15976:	4619      	mov	r1, r3
   15978:	4827      	ldr	r0, [pc, #156]	; (15a18 <Sd::Initialize()+0xac>)
   1597a:	f7fd fb57 	bl	1302c <__cyg_profile_func_enter>
  {
    LOG_DEBUG("Begin initialization:");
    LOG_DEBUG("Setting CS as output...");
    chip_select_->SetAsOutput();
   1597e:	9b03      	ldr	r3, [sp, #12]
   15980:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   15982:	9b03      	ldr	r3, [sp, #12]
   15984:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   15986:	681b      	ldr	r3, [r3, #0]
   15988:	3304      	adds	r3, #4
   1598a:	681b      	ldr	r3, [r3, #0]
   1598c:	4610      	mov	r0, r2
   1598e:	4798      	blx	r3
    chip_select_->SetHigh();
   15990:	9b03      	ldr	r3, [sp, #12]
   15992:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   15994:	9b03      	ldr	r3, [sp, #12]
   15996:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   15998:	681b      	ldr	r3, [r3, #0]
   1599a:	330c      	adds	r3, #12
   1599c:	681b      	ldr	r3, [r3, #0]
   1599e:	4610      	mov	r0, r2
   159a0:	4798      	blx	r3
    chip_select_external_->SetAsOutput();
   159a2:	9b03      	ldr	r3, [sp, #12]
   159a4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
   159a6:	9b03      	ldr	r3, [sp, #12]
   159a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   159aa:	681b      	ldr	r3, [r3, #0]
   159ac:	3304      	adds	r3, #4
   159ae:	681b      	ldr	r3, [r3, #0]
   159b0:	4610      	mov	r0, r2
   159b2:	4798      	blx	r3
    chip_select_external_->SetHigh();
   159b4:	9b03      	ldr	r3, [sp, #12]
   159b6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
   159b8:	9b03      	ldr	r3, [sp, #12]
   159ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   159bc:	681b      	ldr	r3, [r3, #0]
   159be:	330c      	adds	r3, #12
   159c0:	681b      	ldr	r3, [r3, #0]
   159c2:	4610      	mov	r0, r2
   159c4:	4798      	blx	r3

    LOG_DEBUG("Setting SSP Clock Speed...");
    ssp_interface_->SetClock(false, false, 14, 2);  // 400kHz
   159c6:	9b03      	ldr	r3, [sp, #12]
   159c8:	6858      	ldr	r0, [r3, #4]
   159ca:	9b03      	ldr	r3, [sp, #12]
   159cc:	685b      	ldr	r3, [r3, #4]
   159ce:	681b      	ldr	r3, [r3, #0]
   159d0:	3318      	adds	r3, #24
   159d2:	681c      	ldr	r4, [r3, #0]
   159d4:	2302      	movs	r3, #2
   159d6:	9300      	str	r3, [sp, #0]
   159d8:	230e      	movs	r3, #14
   159da:	2200      	movs	r2, #0
   159dc:	2100      	movs	r1, #0
   159de:	47a0      	blx	r4

    LOG_DEBUG("Setting Peripheral Mode...");
    ssp_interface_->SetPeripheralMode(Ssp::MasterSlaveMode::kMaster,
   159e0:	9b03      	ldr	r3, [sp, #12]
   159e2:	6858      	ldr	r0, [r3, #4]
   159e4:	9b03      	ldr	r3, [sp, #12]
   159e6:	685b      	ldr	r3, [r3, #4]
                                      Ssp::FrameMode::kSpi,
                                      Ssp::DataSize::kEight);
   159e8:	681b      	ldr	r3, [r3, #0]
   159ea:	3310      	adds	r3, #16
   159ec:	681c      	ldr	r4, [r3, #0]
    ssp_interface_->SetPeripheralMode(Ssp::MasterSlaveMode::kMaster,
   159ee:	2307      	movs	r3, #7
   159f0:	2200      	movs	r2, #0
   159f2:	2100      	movs	r1, #0
   159f4:	47a0      	blx	r4

    LOG_DEBUG("Starting SSP Peripheral...");
    ssp_interface_->Initialize();
   159f6:	9b03      	ldr	r3, [sp, #12]
   159f8:	685a      	ldr	r2, [r3, #4]
   159fa:	9b03      	ldr	r3, [sp, #12]
   159fc:	685b      	ldr	r3, [r3, #4]
   159fe:	681b      	ldr	r3, [r3, #0]
   15a00:	681b      	ldr	r3, [r3, #0]
   15a02:	4610      	mov	r0, r2
   15a04:	4798      	blx	r3
   15a06:	462b      	mov	r3, r5
   15a08:	4619      	mov	r1, r3
   15a0a:	4803      	ldr	r0, [pc, #12]	; (15a18 <Sd::Initialize()+0xac>)
   15a0c:	f7fd fb22 	bl	13054 <__cyg_profile_func_exit>
  }
   15a10:	bf00      	nop
   15a12:	b005      	add	sp, #20
   15a14:	bd30      	pop	{r4, r5, pc}
   15a16:	bf00      	nop
   15a18:	0001596d 	.word	0x0001596d

00015a1c <Sd::Mount(SdInterface::CardInfo_t*)>:

  // Initialize SD Card
  // TODO(#349): Split method into smaller piece with single jobs
  bool Mount(CardInfo_t * sd) override
   15a1c:	b530      	push	{r4, r5, lr}
   15a1e:	b08b      	sub	sp, #44	; 0x2c
   15a20:	4675      	mov	r5, lr
   15a22:	9003      	str	r0, [sp, #12]
   15a24:	9102      	str	r1, [sp, #8]
   15a26:	462b      	mov	r3, r5
   15a28:	4619      	mov	r1, r3
   15a2a:	48a7      	ldr	r0, [pc, #668]	; (15cc8 <Sd::Mount(SdInterface::CardInfo_t*)+0x2ac>)
   15a2c:	f7fd fafe 	bl	1302c <__cyg_profile_func_enter>
  {
    uint8_t tries     = 0;
   15a30:	2300      	movs	r3, #0
   15a32:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    bool card_is_idle = false;
   15a36:	2300      	movs	r3, #0
   15a38:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26

    // Reset the card and force it to go to idle state at <400kHz with a
    // CMD0 + (active-low) CS
    LOG_DEBUG("Sending SD Card to Idle State...");
    sd->response.length = SendCmd(Command::kReset, 0x00000000,
                                  sd->response.data.byte, 100, KeepAlive::kYes);
   15a3c:	9b03      	ldr	r3, [sp, #12]
   15a3e:	681b      	ldr	r3, [r3, #0]
   15a40:	681c      	ldr	r4, [r3, #0]
    sd->response.length = SendCmd(Command::kReset, 0x00000000,
   15a42:	9b02      	ldr	r3, [sp, #8]
   15a44:	f103 0208 	add.w	r2, r3, #8
   15a48:	2301      	movs	r3, #1
   15a4a:	9301      	str	r3, [sp, #4]
   15a4c:	2364      	movs	r3, #100	; 0x64
   15a4e:	9300      	str	r3, [sp, #0]
   15a50:	4613      	mov	r3, r2
   15a52:	2200      	movs	r2, #0
   15a54:	2140      	movs	r1, #64	; 0x40
   15a56:	9803      	ldr	r0, [sp, #12]
   15a58:	47a0      	blx	r4
   15a5a:	4602      	mov	r2, r0
   15a5c:	9b02      	ldr	r3, [sp, #8]
   15a5e:	611a      	str	r2, [r3, #16]

    // Reset the card again to trigger SPI mode
    LOG_DEBUG("Initializing SPI mode...");
    do
    {
      tries++;
   15a60:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   15a64:	3301      	adds	r3, #1
   15a66:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
      sd->response.length = SendCmd(
          Command::kReset, 0x00, sd->response.data.byte, 100, KeepAlive::kYes);
   15a6a:	9b03      	ldr	r3, [sp, #12]
   15a6c:	681b      	ldr	r3, [r3, #0]
   15a6e:	681c      	ldr	r4, [r3, #0]
      sd->response.length = SendCmd(
   15a70:	9b02      	ldr	r3, [sp, #8]
   15a72:	f103 0208 	add.w	r2, r3, #8
   15a76:	2301      	movs	r3, #1
   15a78:	9301      	str	r3, [sp, #4]
   15a7a:	2364      	movs	r3, #100	; 0x64
   15a7c:	9300      	str	r3, [sp, #0]
   15a7e:	4613      	mov	r3, r2
   15a80:	2200      	movs	r2, #0
   15a82:	2140      	movs	r1, #64	; 0x40
   15a84:	9803      	ldr	r0, [sp, #12]
   15a86:	47a0      	blx	r4
   15a88:	4602      	mov	r2, r0
   15a8a:	9b02      	ldr	r3, [sp, #8]
   15a8c:	611a      	str	r2, [r3, #16]

      // Check if R1 response frame's bit 1 is set (to ensure that
      // card is in idle state)
      if (sd->response.data.byte[0] != 0xFF &&
   15a8e:	9b02      	ldr	r3, [sp, #8]
   15a90:	7a1b      	ldrb	r3, [r3, #8]
   15a92:	2bff      	cmp	r3, #255	; 0xff
   15a94:	d008      	beq.n	15aa8 <Sd::Mount(SdInterface::CardInfo_t*)+0x8c>
          (sd->response.data.byte[0] & 0x01) == 0x01)
   15a96:	9b02      	ldr	r3, [sp, #8]
   15a98:	7a1b      	ldrb	r3, [r3, #8]
   15a9a:	f003 0301 	and.w	r3, r3, #1
      if (sd->response.data.byte[0] != 0xFF &&
   15a9e:	2b00      	cmp	r3, #0
   15aa0:	d002      	beq.n	15aa8 <Sd::Mount(SdInterface::CardInfo_t*)+0x8c>
      {
        // If it is, we can move on; otherwise, keep trying for a set
        // amount of tries
        card_is_idle = true;
   15aa2:	2301      	movs	r3, #1
   15aa4:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
      }
      Delay(10);
   15aa8:	f04f 000a 	mov.w	r0, #10
   15aac:	f04f 0100 	mov.w	r1, #0
   15ab0:	f7fa fea8 	bl	10804 <Delay(unsigned long long)>
    } while (tries < kBusTimeout && !card_is_idle);
   15ab4:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   15ab8:	2bf9      	cmp	r3, #249	; 0xf9
   15aba:	d804      	bhi.n	15ac6 <Sd::Mount(SdInterface::CardInfo_t*)+0xaa>
   15abc:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
   15ac0:	2b00      	cmp	r3, #0
   15ac2:	d100      	bne.n	15ac6 <Sd::Mount(SdInterface::CardInfo_t*)+0xaa>
    do
   15ac4:	e7cc      	b.n	15a60 <Sd::Mount(SdInterface::CardInfo_t*)+0x44>
    LOG_DEBUG("%d tries", tries);
    if (tries >= kBusTimeout)
   15ac6:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   15aca:	2bf9      	cmp	r3, #249	; 0xf9
   15acc:	d91b      	bls.n	15b06 <Sd::Mount(SdInterface::CardInfo_t*)+0xea>
    {
      LOG_ERROR("Failed to initiate SPI mode within timeout. Aborting!");
   15ace:	f240 13ff 	movw	r3, #511	; 0x1ff
   15ad2:	4a7e      	ldr	r2, [pc, #504]	; (15ccc <Sd::Mount(SdInterface::CardInfo_t*)+0x2b0>)
   15ad4:	497e      	ldr	r1, [pc, #504]	; (15cd0 <Sd::Mount(SdInterface::CardInfo_t*)+0x2b4>)
   15ad6:	487f      	ldr	r0, [pc, #508]	; (15cd4 <Sd::Mount(SdInterface::CardInfo_t*)+0x2b8>)
   15ad8:	f7fe fd04 	bl	144e4 <printf>
      sd->response.length = SendCmd(Command::kGarbage, 0xFFFFFFFF,
                                    sd->response.data.byte, 0, KeepAlive::kNo);
   15adc:	9b03      	ldr	r3, [sp, #12]
   15ade:	681b      	ldr	r3, [r3, #0]
   15ae0:	681c      	ldr	r4, [r3, #0]
      sd->response.length = SendCmd(Command::kGarbage, 0xFFFFFFFF,
   15ae2:	9b02      	ldr	r3, [sp, #8]
   15ae4:	f103 0208 	add.w	r2, r3, #8
   15ae8:	2300      	movs	r3, #0
   15aea:	9301      	str	r3, [sp, #4]
   15aec:	2300      	movs	r3, #0
   15aee:	9300      	str	r3, [sp, #0]
   15af0:	4613      	mov	r3, r2
   15af2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   15af6:	21ff      	movs	r1, #255	; 0xff
   15af8:	9803      	ldr	r0, [sp, #12]
   15afa:	47a0      	blx	r4
   15afc:	4602      	mov	r2, r0
   15afe:	9b02      	ldr	r3, [sp, #8]
   15b00:	611a      	str	r2, [r3, #16]
      return false;
   15b02:	2400      	movs	r4, #0
   15b04:	e10c      	b.n	15d20 <Sd::Mount(SdInterface::CardInfo_t*)+0x304>
    }

    // Send the host's supported voltage (3.3V) and ask if the card
    // supports it
    LOG_DEBUG("Checking Current SD Card Voltage Level...");
    constexpr uint8_t kCheckPattern = 0xAB;
   15b06:	23ab      	movs	r3, #171	; 0xab
   15b08:	f88d 301f 	strb.w	r3, [sp, #31]
    uint64_t supported_voltage      = 0x00000001;
   15b0c:	f04f 0301 	mov.w	r3, #1
   15b10:	f04f 0400 	mov.w	r4, #0
   15b14:	e9cd 3404 	strd	r3, r4, [sp, #16]
    sd->response.length =
        SendCmd(Command::kGetOp,
                static_cast<uint32_t>((supported_voltage << 8) | kCheckPattern),
                sd->response.data.byte, 100, KeepAlive::kYes);
   15b18:	9b03      	ldr	r3, [sp, #12]
   15b1a:	681b      	ldr	r3, [r3, #0]
   15b1c:	681c      	ldr	r4, [r3, #0]
                static_cast<uint32_t>((supported_voltage << 8) | kCheckPattern),
   15b1e:	9b04      	ldr	r3, [sp, #16]
   15b20:	021b      	lsls	r3, r3, #8
        SendCmd(Command::kGetOp,
   15b22:	f043 02ab 	orr.w	r2, r3, #171	; 0xab
   15b26:	9b02      	ldr	r3, [sp, #8]
   15b28:	f103 0108 	add.w	r1, r3, #8
   15b2c:	2301      	movs	r3, #1
   15b2e:	9301      	str	r3, [sp, #4]
   15b30:	2364      	movs	r3, #100	; 0x64
   15b32:	9300      	str	r3, [sp, #0]
   15b34:	460b      	mov	r3, r1
   15b36:	2148      	movs	r1, #72	; 0x48
   15b38:	9803      	ldr	r0, [sp, #12]
   15b3a:	47a0      	blx	r4
   15b3c:	4602      	mov	r2, r0
    sd->response.length =
   15b3e:	9b02      	ldr	r3, [sp, #8]
   15b40:	611a      	str	r2, [r3, #16]
    if (sd->response.data.byte[4] != kCheckPattern)
   15b42:	9b02      	ldr	r3, [sp, #8]
   15b44:	7b1b      	ldrb	r3, [r3, #12]
   15b46:	2bab      	cmp	r3, #171	; 0xab
   15b48:	d01b      	beq.n	15b82 <Sd::Mount(SdInterface::CardInfo_t*)+0x166>
    {
      // If the last byte is not an exact echo of the LSB of the kGetOp
      // command's argument, this response is invalid
      LOG_ERROR("Response integrity check failed. Aborting!");
   15b4a:	f240 2312 	movw	r3, #530	; 0x212
   15b4e:	4a5f      	ldr	r2, [pc, #380]	; (15ccc <Sd::Mount(SdInterface::CardInfo_t*)+0x2b0>)
   15b50:	4961      	ldr	r1, [pc, #388]	; (15cd8 <Sd::Mount(SdInterface::CardInfo_t*)+0x2bc>)
   15b52:	4862      	ldr	r0, [pc, #392]	; (15cdc <Sd::Mount(SdInterface::CardInfo_t*)+0x2c0>)
   15b54:	f7fe fcc6 	bl	144e4 <printf>
      sd->response.length = SendCmd(Command::kGarbage, 0xFFFFFFFF,
                                    sd->response.data.byte, 0, KeepAlive::kNo);
   15b58:	9b03      	ldr	r3, [sp, #12]
   15b5a:	681b      	ldr	r3, [r3, #0]
   15b5c:	681c      	ldr	r4, [r3, #0]
      sd->response.length = SendCmd(Command::kGarbage, 0xFFFFFFFF,
   15b5e:	9b02      	ldr	r3, [sp, #8]
   15b60:	f103 0208 	add.w	r2, r3, #8
   15b64:	2300      	movs	r3, #0
   15b66:	9301      	str	r3, [sp, #4]
   15b68:	2300      	movs	r3, #0
   15b6a:	9300      	str	r3, [sp, #0]
   15b6c:	4613      	mov	r3, r2
   15b6e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   15b72:	21ff      	movs	r1, #255	; 0xff
   15b74:	9803      	ldr	r0, [sp, #12]
   15b76:	47a0      	blx	r4
   15b78:	4602      	mov	r2, r0
   15b7a:	9b02      	ldr	r3, [sp, #8]
   15b7c:	611a      	str	r2, [r3, #16]
      return false;
   15b7e:	2400      	movs	r4, #0
   15b80:	e0ce      	b.n	15d20 <Sd::Mount(SdInterface::CardInfo_t*)+0x304>
    }
    else if (sd->response.data.byte[3] &
   15b82:	9b02      	ldr	r3, [sp, #8]
   15b84:	7adb      	ldrb	r3, [r3, #11]
   15b86:	4619      	mov	r1, r3
             (supported_voltage == static_cast<uint64_t>(0x00)))
   15b88:	9a04      	ldr	r2, [sp, #16]
   15b8a:	9b05      	ldr	r3, [sp, #20]
   15b8c:	4313      	orrs	r3, r2
   15b8e:	2b00      	cmp	r3, #0
   15b90:	bf0c      	ite	eq
   15b92:	2301      	moveq	r3, #1
   15b94:	2300      	movne	r3, #0
   15b96:	b2db      	uxtb	r3, r3
    else if (sd->response.data.byte[3] &
   15b98:	400b      	ands	r3, r1
   15b9a:	2b00      	cmp	r3, #0
   15b9c:	d01b      	beq.n	15bd6 <Sd::Mount(SdInterface::CardInfo_t*)+0x1ba>
    {
      // If the 2nd-to-last byte of the reponse AND'ed with our host
      // device's supported voltage range is 0x00, the SD card doesn't
      // support our device's operating voltage
      LOG_ERROR("Unsupported voltage in use. Aborting!");
   15b9e:	f240 231d 	movw	r3, #541	; 0x21d
   15ba2:	4a4a      	ldr	r2, [pc, #296]	; (15ccc <Sd::Mount(SdInterface::CardInfo_t*)+0x2b0>)
   15ba4:	494e      	ldr	r1, [pc, #312]	; (15ce0 <Sd::Mount(SdInterface::CardInfo_t*)+0x2c4>)
   15ba6:	484f      	ldr	r0, [pc, #316]	; (15ce4 <Sd::Mount(SdInterface::CardInfo_t*)+0x2c8>)
   15ba8:	f7fe fc9c 	bl	144e4 <printf>
      sd->response.length = SendCmd(Command::kGarbage, 0xFFFFFFFF,
                                    sd->response.data.byte, 0, KeepAlive::kNo);
   15bac:	9b03      	ldr	r3, [sp, #12]
   15bae:	681b      	ldr	r3, [r3, #0]
   15bb0:	681c      	ldr	r4, [r3, #0]
      sd->response.length = SendCmd(Command::kGarbage, 0xFFFFFFFF,
   15bb2:	9b02      	ldr	r3, [sp, #8]
   15bb4:	f103 0208 	add.w	r2, r3, #8
   15bb8:	2300      	movs	r3, #0
   15bba:	9301      	str	r3, [sp, #4]
   15bbc:	2300      	movs	r3, #0
   15bbe:	9300      	str	r3, [sp, #0]
   15bc0:	4613      	mov	r3, r2
   15bc2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   15bc6:	21ff      	movs	r1, #255	; 0xff
   15bc8:	9803      	ldr	r0, [sp, #12]
   15bca:	47a0      	blx	r4
   15bcc:	4602      	mov	r2, r0
   15bce:	9b02      	ldr	r3, [sp, #8]
   15bd0:	611a      	str	r2, [r3, #16]
      return false;
   15bd2:	2400      	movs	r4, #0
   15bd4:	e0a4      	b.n	15d20 <Sd::Mount(SdInterface::CardInfo_t*)+0x304>
    }

    // Indicate that the host supports SDHC/SDXC and wait for card to
    // shift out of idle state
    LOG_DEBUG("Expressing High-Capacity SD Card Support...");
    tries = 0;
   15bd6:	2300      	movs	r3, #0
   15bd8:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    do
    {
      // Send host's operating conditions
      sd->response.length =
          SendCmd(Command::kInit, 0x40000000, sd->response.data.byte, 100,
                  KeepAlive::kYes);
   15bdc:	9b03      	ldr	r3, [sp, #12]
   15bde:	681b      	ldr	r3, [r3, #0]
   15be0:	681c      	ldr	r4, [r3, #0]
          SendCmd(Command::kInit, 0x40000000, sd->response.data.byte, 100,
   15be2:	9b02      	ldr	r3, [sp, #8]
   15be4:	f103 0208 	add.w	r2, r3, #8
   15be8:	2301      	movs	r3, #1
   15bea:	9301      	str	r3, [sp, #4]
   15bec:	2364      	movs	r3, #100	; 0x64
   15bee:	9300      	str	r3, [sp, #0]
   15bf0:	4613      	mov	r3, r2
   15bf2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   15bf6:	2141      	movs	r1, #65	; 0x41
   15bf8:	9803      	ldr	r0, [sp, #12]
   15bfa:	47a0      	blx	r4
   15bfc:	4602      	mov	r2, r0
      sd->response.length =
   15bfe:	9b02      	ldr	r3, [sp, #8]
   15c00:	611a      	str	r2, [r3, #16]
      tries++;
   15c02:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   15c06:	3301      	adds	r3, #1
   15c08:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    } while (tries < kBusTimeout && sd->response.data.byte[0] & 0x01);
   15c0c:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   15c10:	2bf9      	cmp	r3, #249	; 0xf9
   15c12:	d806      	bhi.n	15c22 <Sd::Mount(SdInterface::CardInfo_t*)+0x206>
   15c14:	9b02      	ldr	r3, [sp, #8]
   15c16:	7a1b      	ldrb	r3, [r3, #8]
   15c18:	f003 0301 	and.w	r3, r3, #1
   15c1c:	2b00      	cmp	r3, #0
   15c1e:	d000      	beq.n	15c22 <Sd::Mount(SdInterface::CardInfo_t*)+0x206>
    do
   15c20:	e7dc      	b.n	15bdc <Sd::Mount(SdInterface::CardInfo_t*)+0x1c0>
    if (tries == kBusTimeout)
   15c22:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   15c26:	2bfa      	cmp	r3, #250	; 0xfa
   15c28:	d11b      	bne.n	15c62 <Sd::Mount(SdInterface::CardInfo_t*)+0x246>
    {
      LOG_ERROR("SD Card timed out. Aborting!");
   15c2a:	f240 2331 	movw	r3, #561	; 0x231
   15c2e:	4a27      	ldr	r2, [pc, #156]	; (15ccc <Sd::Mount(SdInterface::CardInfo_t*)+0x2b0>)
   15c30:	492d      	ldr	r1, [pc, #180]	; (15ce8 <Sd::Mount(SdInterface::CardInfo_t*)+0x2cc>)
   15c32:	482e      	ldr	r0, [pc, #184]	; (15cec <Sd::Mount(SdInterface::CardInfo_t*)+0x2d0>)
   15c34:	f7fe fc56 	bl	144e4 <printf>
      sd->response.length = SendCmd(Command::kGarbage, 0xFFFFFFFF,
                                    sd->response.data.byte, 0, KeepAlive::kNo);
   15c38:	9b03      	ldr	r3, [sp, #12]
   15c3a:	681b      	ldr	r3, [r3, #0]
   15c3c:	681c      	ldr	r4, [r3, #0]
      sd->response.length = SendCmd(Command::kGarbage, 0xFFFFFFFF,
   15c3e:	9b02      	ldr	r3, [sp, #8]
   15c40:	f103 0208 	add.w	r2, r3, #8
   15c44:	2300      	movs	r3, #0
   15c46:	9301      	str	r3, [sp, #4]
   15c48:	2300      	movs	r3, #0
   15c4a:	9300      	str	r3, [sp, #0]
   15c4c:	4613      	mov	r3, r2
   15c4e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   15c52:	21ff      	movs	r1, #255	; 0xff
   15c54:	9803      	ldr	r0, [sp, #12]
   15c56:	47a0      	blx	r4
   15c58:	4602      	mov	r2, r0
   15c5a:	9b02      	ldr	r3, [sp, #8]
   15c5c:	611a      	str	r2, [r3, #16]
      return false;
   15c5e:	2400      	movs	r4, #0
   15c60:	e05e      	b.n	15d20 <Sd::Mount(SdInterface::CardInfo_t*)+0x304>
    // After card is ready, acquire card capacity info using kGetOcr a
    // second time
    LOG_DEBUG("Reading Card Capacity Information...");
    // Read CCS
    sd->response.length = SendCmd(Command::kGetOcr, 0x00,
                                  sd->response.data.byte, 100, KeepAlive::kYes);
   15c62:	9b03      	ldr	r3, [sp, #12]
   15c64:	681b      	ldr	r3, [r3, #0]
   15c66:	681c      	ldr	r4, [r3, #0]
    sd->response.length = SendCmd(Command::kGetOcr, 0x00,
   15c68:	9b02      	ldr	r3, [sp, #8]
   15c6a:	f103 0208 	add.w	r2, r3, #8
   15c6e:	2301      	movs	r3, #1
   15c70:	9301      	str	r3, [sp, #4]
   15c72:	2364      	movs	r3, #100	; 0x64
   15c74:	9300      	str	r3, [sp, #0]
   15c76:	4613      	mov	r3, r2
   15c78:	2200      	movs	r2, #0
   15c7a:	217a      	movs	r1, #122	; 0x7a
   15c7c:	9803      	ldr	r0, [sp, #12]
   15c7e:	47a0      	blx	r4
   15c80:	4602      	mov	r2, r0
   15c82:	9b02      	ldr	r3, [sp, #8]
   15c84:	611a      	str	r2, [r3, #16]
    if (sd->response.data.byte[1] & 0x40)
   15c86:	9b02      	ldr	r3, [sp, #8]
   15c88:	7a5b      	ldrb	r3, [r3, #9]
   15c8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
   15c8e:	2b00      	cmp	r3, #0
   15c90:	d003      	beq.n	15c9a <Sd::Mount(SdInterface::CardInfo_t*)+0x27e>
    {
      // The card is either high or extended capacity
      LOG_DEBUG("SD Card is HC/XC");
      sd->type = Type::kSDHC;
   15c92:	9b02      	ldr	r3, [sp, #8]
   15c94:	2201      	movs	r2, #1
   15c96:	605a      	str	r2, [r3, #4]
   15c98:	e002      	b.n	15ca0 <Sd::Mount(SdInterface::CardInfo_t*)+0x284>
    }
    else
    {
      // The card is standard capacity
      LOG_DEBUG("SD Card is SC");
      sd->type = Type::kSDSC;
   15c9a:	9b02      	ldr	r3, [sp, #8]
   15c9c:	2200      	movs	r2, #0
   15c9e:	605a      	str	r2, [r3, #4]
    }

    // Store OCR information
    for (int i = 0; i < 4; i++)
   15ca0:	2300      	movs	r3, #0
   15ca2:	9308      	str	r3, [sp, #32]
   15ca4:	9b08      	ldr	r3, [sp, #32]
   15ca6:	2b03      	cmp	r3, #3
   15ca8:	dc22      	bgt.n	15cf0 <Sd::Mount(SdInterface::CardInfo_t*)+0x2d4>
    {
      // ensure OCR doesn't capture the R1 section of the response
      sd->ocr.byte[i] = sd->response.data.byte[i + 1];
   15caa:	9b08      	ldr	r3, [sp, #32]
   15cac:	3301      	adds	r3, #1
   15cae:	9a02      	ldr	r2, [sp, #8]
   15cb0:	4413      	add	r3, r2
   15cb2:	7a19      	ldrb	r1, [r3, #8]
   15cb4:	9a02      	ldr	r2, [sp, #8]
   15cb6:	9b08      	ldr	r3, [sp, #32]
   15cb8:	4413      	add	r3, r2
   15cba:	460a      	mov	r2, r1
   15cbc:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < 4; i++)
   15cbe:	9b08      	ldr	r3, [sp, #32]
   15cc0:	3301      	adds	r3, #1
   15cc2:	9308      	str	r3, [sp, #32]
   15cc4:	e7ee      	b.n	15ca4 <Sd::Mount(SdInterface::CardInfo_t*)+0x288>
   15cc6:	bf00      	nop
   15cc8:	00015a1d 	.word	0x00015a1d
   15ccc:	0001922c 	.word	0x0001922c
   15cd0:	00018f44 	.word	0x00018f44
   15cd4:	0001855c 	.word	0x0001855c
   15cd8:	00018f4c 	.word	0x00018f4c
   15cdc:	000185cc 	.word	0x000185cc
   15ce0:	00018f54 	.word	0x00018f54
   15ce4:	00018630 	.word	0x00018630
   15ce8:	00018f5c 	.word	0x00018f5c
   15cec:	00018690 	.word	0x00018690
    }

    // If card is SDSC, manually set its block size
    if (sd->type == Type::kSDSC)
   15cf0:	9b02      	ldr	r3, [sp, #8]
   15cf2:	685b      	ldr	r3, [r3, #4]
   15cf4:	2b00      	cmp	r3, #0
   15cf6:	d112      	bne.n	15d1e <Sd::Mount(SdInterface::CardInfo_t*)+0x302>
    {
      // Send requested byte size
      sd->response.length =
          SendCmd(Command::kChgBlkLen, static_cast<uint32_t>(kBlockSize),
                  sd->response.data.byte, 0, KeepAlive::kYes);
   15cf8:	9b03      	ldr	r3, [sp, #12]
   15cfa:	681b      	ldr	r3, [r3, #0]
   15cfc:	681c      	ldr	r4, [r3, #0]
          SendCmd(Command::kChgBlkLen, static_cast<uint32_t>(kBlockSize),
   15cfe:	9b02      	ldr	r3, [sp, #8]
   15d00:	f103 0208 	add.w	r2, r3, #8
   15d04:	2301      	movs	r3, #1
   15d06:	9301      	str	r3, [sp, #4]
   15d08:	2300      	movs	r3, #0
   15d0a:	9300      	str	r3, [sp, #0]
   15d0c:	4613      	mov	r3, r2
   15d0e:	f44f 7200 	mov.w	r2, #512	; 0x200
   15d12:	2150      	movs	r1, #80	; 0x50
   15d14:	9803      	ldr	r0, [sp, #12]
   15d16:	47a0      	blx	r4
   15d18:	4602      	mov	r2, r0
      sd->response.length =
   15d1a:	9b02      	ldr	r3, [sp, #8]
   15d1c:	611a      	str	r2, [r3, #16]
    }

    return true;
   15d1e:	2401      	movs	r4, #1
   15d20:	462b      	mov	r3, r5
   15d22:	4619      	mov	r1, r3
   15d24:	4803      	ldr	r0, [pc, #12]	; (15d34 <Sd::Mount(SdInterface::CardInfo_t*)+0x318>)
   15d26:	f7fd f995 	bl	13054 <__cyg_profile_func_exit>
   15d2a:	4623      	mov	r3, r4
  }
   15d2c:	4618      	mov	r0, r3
   15d2e:	b00b      	add	sp, #44	; 0x2c
   15d30:	bd30      	pop	{r4, r5, pc}
   15d32:	bf00      	nop
   15d34:	00015a1d 	.word	0x00015a1d

00015d38 <Sd::ToBool(bool)>:

  // Returns string to represent a boolean value
  const char * ToBool(bool condition)
   15d38:	b530      	push	{r4, r5, lr}
   15d3a:	b083      	sub	sp, #12
   15d3c:	4675      	mov	r5, lr
   15d3e:	9001      	str	r0, [sp, #4]
   15d40:	460b      	mov	r3, r1
   15d42:	f88d 3003 	strb.w	r3, [sp, #3]
   15d46:	462b      	mov	r3, r5
   15d48:	4619      	mov	r1, r3
   15d4a:	4809      	ldr	r0, [pc, #36]	; (15d70 <Sd::ToBool(bool)+0x38>)
   15d4c:	f7fd f96e 	bl	1302c <__cyg_profile_func_enter>
  {
    return (condition) ? "true" : "false";
   15d50:	f89d 3003 	ldrb.w	r3, [sp, #3]
   15d54:	2b00      	cmp	r3, #0
   15d56:	d001      	beq.n	15d5c <Sd::ToBool(bool)+0x24>
   15d58:	4c06      	ldr	r4, [pc, #24]	; (15d74 <Sd::ToBool(bool)+0x3c>)
   15d5a:	e000      	b.n	15d5e <Sd::ToBool(bool)+0x26>
   15d5c:	4c06      	ldr	r4, [pc, #24]	; (15d78 <Sd::ToBool(bool)+0x40>)
   15d5e:	462b      	mov	r3, r5
   15d60:	4619      	mov	r1, r3
   15d62:	4803      	ldr	r0, [pc, #12]	; (15d70 <Sd::ToBool(bool)+0x38>)
   15d64:	f7fd f976 	bl	13054 <__cyg_profile_func_exit>
   15d68:	4623      	mov	r3, r4
  }
   15d6a:	4618      	mov	r0, r3
   15d6c:	b003      	add	sp, #12
   15d6e:	bd30      	pop	{r4, r5, pc}
   15d70:	00015d39 	.word	0x00015d39
   15d74:	000186e8 	.word	0x000186e8
   15d78:	000186f0 	.word	0x000186f0

00015d7c <Sd::WaitToReadBlock()>:

  // Waits for the card to respond after a single or multi block read cmd is
  // sent.
  void WaitToReadBlock()
   15d7c:	b510      	push	{r4, lr}
   15d7e:	b084      	sub	sp, #16
   15d80:	4674      	mov	r4, lr
   15d82:	9001      	str	r0, [sp, #4]
   15d84:	4623      	mov	r3, r4
   15d86:	4619      	mov	r1, r3
   15d88:	4814      	ldr	r0, [pc, #80]	; (15ddc <Sd::WaitToReadBlock()+0x60>)
   15d8a:	f7fd f94f 	bl	1302c <__cyg_profile_func_enter>
    // Bit 4 -->  If set, card is locked
    // Bit 3 -->  If set, address is out or range
    // Bit 2 -->  If set, card ECC failed
    // Bit 1 -->  If set, CC error occurred
    // Bit 0 -->  If set, a generic error occurred
    uint8_t wait_byte = 0x00;
   15d8e:	2300      	movs	r3, #0
   15d90:	f88d 300f 	strb.w	r3, [sp, #15]
    do
    {
      wait_byte = static_cast<uint8_t>(ssp_interface_->Transfer(0xFF));
   15d94:	9b01      	ldr	r3, [sp, #4]
   15d96:	685a      	ldr	r2, [r3, #4]
   15d98:	9b01      	ldr	r3, [sp, #4]
   15d9a:	685b      	ldr	r3, [r3, #4]
   15d9c:	681b      	ldr	r3, [r3, #0]
   15d9e:	3308      	adds	r3, #8
   15da0:	681b      	ldr	r3, [r3, #0]
   15da2:	21ff      	movs	r1, #255	; 0xff
   15da4:	4610      	mov	r0, r2
   15da6:	4798      	blx	r3
   15da8:	4603      	mov	r3, r0
   15daa:	f88d 300f 	strb.w	r3, [sp, #15]
    } while (wait_byte != 0xFE && (wait_byte & 0xE0) != 0x00);
   15dae:	f89d 300f 	ldrb.w	r3, [sp, #15]
   15db2:	2bfe      	cmp	r3, #254	; 0xfe
   15db4:	d006      	beq.n	15dc4 <Sd::WaitToReadBlock()+0x48>
   15db6:	f89d 300f 	ldrb.w	r3, [sp, #15]
   15dba:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
   15dbe:	2b00      	cmp	r3, #0
   15dc0:	d000      	beq.n	15dc4 <Sd::WaitToReadBlock()+0x48>
    do
   15dc2:	e7e7      	b.n	15d94 <Sd::WaitToReadBlock()+0x18>

    // DEBUG: Check the value of the wait byte
    if (wait_byte == 0xFE)
   15dc4:	f89d 300f 	ldrb.w	r3, [sp, #15]
   15dc8:	2bfe      	cmp	r3, #254	; 0xfe
   15dca:	4623      	mov	r3, r4
   15dcc:	4619      	mov	r1, r3
   15dce:	4803      	ldr	r0, [pc, #12]	; (15ddc <Sd::WaitToReadBlock()+0x60>)
   15dd0:	f7fd f940 	bl	13054 <__cyg_profile_func_exit>
      LOG_DEBUG("Addr Out of Range?: %s", ToBool(wait_byte & 0x08));
      LOG_DEBUG("Card ECC Failed?: %s", ToBool(wait_byte & 0x04));
      LOG_DEBUG("CC Error?: %s", ToBool(wait_byte & 0x02));
      LOG_DEBUG("Error?: %s", ToBool(wait_byte & 0x01));
    }
  }
   15dd4:	bf00      	nop
   15dd6:	b004      	add	sp, #16
   15dd8:	bd10      	pop	{r4, pc}
   15dda:	bf00      	nop
   15ddc:	00015d7d 	.word	0x00015d7d

00015de0 <Sd::WaitWhileBusy()>:

  // Waits for the card to be ready to receive a new block after one has
  // been written or erased
  void WaitWhileBusy()
   15de0:	b510      	push	{r4, lr}
   15de2:	b084      	sub	sp, #16
   15de4:	4674      	mov	r4, lr
   15de6:	9001      	str	r0, [sp, #4]
   15de8:	4623      	mov	r3, r4
   15dea:	4619      	mov	r1, r3
   15dec:	480f      	ldr	r0, [pc, #60]	; (15e2c <Sd::WaitWhileBusy()+0x4c>)
   15dee:	f7fd f91d 	bl	1302c <__cyg_profile_func_enter>
  {
    // Wait for the card to finish programming (i.e. when the
    // bytes return to 0xFF)
    uint8_t busy_byte = 0x00;
   15df2:	2300      	movs	r3, #0
   15df4:	f88d 300f 	strb.w	r3, [sp, #15]
    LOG_DEBUG("Card is busy. Waiting for it to finish...");
    do
    {
      busy_byte = static_cast<uint8_t>(ssp_interface_->Transfer(0xFF));
   15df8:	9b01      	ldr	r3, [sp, #4]
   15dfa:	685a      	ldr	r2, [r3, #4]
   15dfc:	9b01      	ldr	r3, [sp, #4]
   15dfe:	685b      	ldr	r3, [r3, #4]
   15e00:	681b      	ldr	r3, [r3, #0]
   15e02:	3308      	adds	r3, #8
   15e04:	681b      	ldr	r3, [r3, #0]
   15e06:	21ff      	movs	r1, #255	; 0xff
   15e08:	4610      	mov	r0, r2
   15e0a:	4798      	blx	r3
   15e0c:	4603      	mov	r3, r0
   15e0e:	f88d 300f 	strb.w	r3, [sp, #15]
    } while (busy_byte != 0xFF);
   15e12:	f89d 300f 	ldrb.w	r3, [sp, #15]
   15e16:	2bff      	cmp	r3, #255	; 0xff
   15e18:	d000      	beq.n	15e1c <Sd::WaitWhileBusy()+0x3c>
    do
   15e1a:	e7ed      	b.n	15df8 <Sd::WaitWhileBusy()+0x18>
   15e1c:	4623      	mov	r3, r4
   15e1e:	4619      	mov	r1, r3
   15e20:	4802      	ldr	r0, [pc, #8]	; (15e2c <Sd::WaitWhileBusy()+0x4c>)
   15e22:	f7fd f917 	bl	13054 <__cyg_profile_func_exit>
    LOG_DEBUG("Card finished!");
  }
   15e26:	bf00      	nop
   15e28:	b004      	add	sp, #16
   15e2a:	bd10      	pop	{r4, pc}
   15e2c:	00015de1 	.word	0x00015de1

00015e30 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)>:

  // Read any number of blocks from the SD card
  uint8_t ReadBlock(uint32_t address, uint8_t * array,
   15e30:	b530      	push	{r4, r5, lr}
   15e32:	f5ad 7d13 	sub.w	sp, sp, #588	; 0x24c
   15e36:	4675      	mov	r5, lr
   15e38:	ac05      	add	r4, sp, #20
   15e3a:	6020      	str	r0, [r4, #0]
   15e3c:	a804      	add	r0, sp, #16
   15e3e:	6001      	str	r1, [r0, #0]
   15e40:	a903      	add	r1, sp, #12
   15e42:	600a      	str	r2, [r1, #0]
   15e44:	aa02      	add	r2, sp, #8
   15e46:	6013      	str	r3, [r2, #0]
   15e48:	462b      	mov	r3, r5
   15e4a:	4619      	mov	r1, r3
   15e4c:	487d      	ldr	r0, [pc, #500]	; (16044 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x214>)
   15e4e:	f7fd f8ed 	bl	1302c <__cyg_profile_func_enter>
                    uint32_t blocks = 1) override
  {
    LOG_DEBUG("Block %" PRId32 " :: 0x%" PRIX32 " for %" PRId32 " blocks",
              address, address, blocks);
    // Wait for a previous command to finish
    WaitWhileBusy();
   15e52:	ab05      	add	r3, sp, #20
   15e54:	6818      	ldr	r0, [r3, #0]
   15e56:	f7ff ffc3 	bl	15de0 <Sd::WaitWhileBusy()>

    // Create a temporary storage location to store sd command responses
    Sd::CardInfo_t sd;
    bool payload_had_bad_crc = false;
   15e5a:	2300      	movs	r3, #0
   15e5c:	f88d 3247 	strb.w	r3, [sp, #583]	; 0x247

    // Create a temporary place to store blocks of 512 bytes (this is now
    // possible because the constructor enforces block size cross-
    // compatibility)
    uint8_t block_store[512] = { 0 };
   15e60:	ab06      	add	r3, sp, #24
   15e62:	4618      	mov	r0, r3
   15e64:	f44f 7300 	mov.w	r3, #512	; 0x200
   15e68:	461a      	mov	r2, r3
   15e6a:	2100      	movs	r1, #0
   15e6c:	f001 f9b6 	bl	171dc <memset>

    // Determine appropriate command to send
    Command read_cmd;
    if (blocks > 1)
   15e70:	ab02      	add	r3, sp, #8
   15e72:	681b      	ldr	r3, [r3, #0]
   15e74:	2b01      	cmp	r3, #1
   15e76:	d902      	bls.n	15e7e <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x4e>
    {
      read_cmd = Command::kReadMulti;
   15e78:	2352      	movs	r3, #82	; 0x52
   15e7a:	9390      	str	r3, [sp, #576]	; 0x240
   15e7c:	e001      	b.n	15e82 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x52>
    }
    else
    {
      read_cmd = Command::kReadSingle;
   15e7e:	2351      	movs	r3, #81	; 0x51
   15e80:	9390      	str	r3, [sp, #576]	; 0x240
    }

    // Send initial read command
    sd.response.length =
        SendCmd(read_cmd, address, sd.response.data.byte, 100, KeepAlive::kYes);
   15e82:	ab05      	add	r3, sp, #20
   15e84:	681b      	ldr	r3, [r3, #0]
   15e86:	681b      	ldr	r3, [r3, #0]
   15e88:	681c      	ldr	r4, [r3, #0]
   15e8a:	ab86      	add	r3, sp, #536	; 0x218
   15e8c:	f103 0108 	add.w	r1, r3, #8
   15e90:	aa04      	add	r2, sp, #16
   15e92:	a805      	add	r0, sp, #20
   15e94:	2301      	movs	r3, #1
   15e96:	9301      	str	r3, [sp, #4]
   15e98:	2364      	movs	r3, #100	; 0x64
   15e9a:	9300      	str	r3, [sp, #0]
   15e9c:	460b      	mov	r3, r1
   15e9e:	6812      	ldr	r2, [r2, #0]
   15ea0:	9990      	ldr	r1, [sp, #576]	; 0x240
   15ea2:	6800      	ldr	r0, [r0, #0]
   15ea4:	47a0      	blx	r4
   15ea6:	4603      	mov	r3, r0
    sd.response.length =
   15ea8:	938a      	str	r3, [sp, #552]	; 0x228
    LOG_DEBUG("Sent Read Cmd");
    LOG_DEBUG("[R1 Response:0x%02X]", sd.response.data.byte[0]);

    // Check if the command was acknowledged properly
    if (sd.response.data.byte[0] == 0x00)
   15eaa:	f89d 3220 	ldrb.w	r3, [sp, #544]	; 0x220
   15eae:	2b00      	cmp	r3, #0
   15eb0:	f040 80d8 	bne.w	16064 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x234>
    {
      // For every block requested
      uint16_t block_count;
      for (block_count = 0; block_count < blocks; block_count++)
   15eb4:	2300      	movs	r3, #0
   15eb6:	f8ad 323e 	strh.w	r3, [sp, #574]	; 0x23e
   15eba:	f8bd 323e 	ldrh.w	r3, [sp, #574]	; 0x23e
   15ebe:	aa02      	add	r2, sp, #8
   15ec0:	6812      	ldr	r2, [r2, #0]
   15ec2:	429a      	cmp	r2, r3
   15ec4:	f240 8099 	bls.w	15ffa <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x1ca>
      {
        // Wait for the card to respond with a ready signal
        WaitToReadBlock();
   15ec8:	ab05      	add	r3, sp, #20
   15eca:	6818      	ldr	r0, [r3, #0]
   15ecc:	f7ff ff56 	bl	15d7c <Sd::WaitToReadBlock()>

        // Calculate the block address offset
        uint16_t block_addr_offset =
   15ed0:	f8bd 323e 	ldrh.w	r3, [sp, #574]	; 0x23e
   15ed4:	025b      	lsls	r3, r3, #9
   15ed6:	f8ad 323a 	strh.w	r3, [sp, #570]	; 0x23a
            static_cast<uint16_t>(block_count * kBlockSize);

        // Read all the bytes of a single block
        for (uint16_t byte_count = 0; byte_count < kBlockSize; byte_count++)
   15eda:	2300      	movs	r3, #0
   15edc:	f8ad 323c 	strh.w	r3, [sp, #572]	; 0x23c
   15ee0:	f8bd 323c 	ldrh.w	r3, [sp, #572]	; 0x23c
   15ee4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   15ee8:	d22b      	bcs.n	15f42 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x112>
        {
          // Calculate the current storage index
          uint16_t storage_index =
   15eea:	f8bd 223a 	ldrh.w	r2, [sp, #570]	; 0x23a
   15eee:	f8bd 323c 	ldrh.w	r3, [sp, #572]	; 0x23c
   15ef2:	4413      	add	r3, r2
   15ef4:	f8ad 3238 	strh.w	r3, [sp, #568]	; 0x238
              static_cast<uint16_t>(block_addr_offset + byte_count);

          // Transfer a byte to read a block from the SD card
          array[storage_index] =
              static_cast<uint8_t>(ssp_interface_->Transfer(0xFF));
   15ef8:	ab05      	add	r3, sp, #20
   15efa:	681b      	ldr	r3, [r3, #0]
   15efc:	685a      	ldr	r2, [r3, #4]
   15efe:	ab05      	add	r3, sp, #20
   15f00:	681b      	ldr	r3, [r3, #0]
   15f02:	685b      	ldr	r3, [r3, #4]
   15f04:	681b      	ldr	r3, [r3, #0]
   15f06:	3308      	adds	r3, #8
   15f08:	681b      	ldr	r3, [r3, #0]
   15f0a:	21ff      	movs	r1, #255	; 0xff
   15f0c:	4610      	mov	r0, r2
   15f0e:	4798      	blx	r3
   15f10:	4603      	mov	r3, r0
   15f12:	4619      	mov	r1, r3
          array[storage_index] =
   15f14:	f8bd 3238 	ldrh.w	r3, [sp, #568]	; 0x238
   15f18:	aa03      	add	r2, sp, #12
   15f1a:	6812      	ldr	r2, [r2, #0]
   15f1c:	4413      	add	r3, r2
   15f1e:	b2ca      	uxtb	r2, r1
   15f20:	701a      	strb	r2, [r3, #0]

          // Copy that byte into our temporary block store
          block_store[byte_count] = array[storage_index];
   15f22:	f8bd 3238 	ldrh.w	r3, [sp, #568]	; 0x238
   15f26:	aa03      	add	r2, sp, #12
   15f28:	6812      	ldr	r2, [r2, #0]
   15f2a:	441a      	add	r2, r3
   15f2c:	f8bd 323c 	ldrh.w	r3, [sp, #572]	; 0x23c
   15f30:	7811      	ldrb	r1, [r2, #0]
   15f32:	aa06      	add	r2, sp, #24
   15f34:	54d1      	strb	r1, [r2, r3]
        for (uint16_t byte_count = 0; byte_count < kBlockSize; byte_count++)
   15f36:	f8bd 323c 	ldrh.w	r3, [sp, #572]	; 0x23c
   15f3a:	3301      	adds	r3, #1
   15f3c:	f8ad 323c 	strh.w	r3, [sp, #572]	; 0x23c
   15f40:	e7ce      	b.n	15ee0 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0xb0>
        }

        // Then read the block's 16-bit CRC (i.e. read two bytes)
        uint16_t block_crc =
            static_cast<uint16_t>((ssp_interface_->Transfer(0xFF) << 8) |
   15f42:	ab05      	add	r3, sp, #20
   15f44:	681b      	ldr	r3, [r3, #0]
   15f46:	685a      	ldr	r2, [r3, #4]
   15f48:	ab05      	add	r3, sp, #20
   15f4a:	681b      	ldr	r3, [r3, #0]
   15f4c:	685b      	ldr	r3, [r3, #4]
   15f4e:	681b      	ldr	r3, [r3, #0]
   15f50:	3308      	adds	r3, #8
   15f52:	681b      	ldr	r3, [r3, #0]
   15f54:	21ff      	movs	r1, #255	; 0xff
   15f56:	4610      	mov	r0, r2
   15f58:	4798      	blx	r3
   15f5a:	4603      	mov	r3, r0
   15f5c:	021b      	lsls	r3, r3, #8
   15f5e:	b21c      	sxth	r4, r3
                                  ssp_interface_->Transfer(0xFF));
   15f60:	ab05      	add	r3, sp, #20
   15f62:	681b      	ldr	r3, [r3, #0]
   15f64:	685a      	ldr	r2, [r3, #4]
   15f66:	ab05      	add	r3, sp, #20
   15f68:	681b      	ldr	r3, [r3, #0]
   15f6a:	685b      	ldr	r3, [r3, #4]
   15f6c:	681b      	ldr	r3, [r3, #0]
   15f6e:	3308      	adds	r3, #8
   15f70:	681b      	ldr	r3, [r3, #0]
   15f72:	21ff      	movs	r1, #255	; 0xff
   15f74:	4610      	mov	r0, r2
   15f76:	4798      	blx	r3
   15f78:	4603      	mov	r3, r0
   15f7a:	b21b      	sxth	r3, r3
            static_cast<uint16_t>((ssp_interface_->Transfer(0xFF) << 8) |
   15f7c:	4323      	orrs	r3, r4
   15f7e:	b21b      	sxth	r3, r3
                                  ssp_interface_->Transfer(0xFF));
   15f80:	f8ad 3236 	strh.w	r3, [sp, #566]	; 0x236

        // Run a CRC-16 calculation on the message to determine if the
        // received CRCs match (i.e. checks if the block data is
        // valid).
        uint16_t expected_block_crc = GetCrc16(block_store, 512);
   15f84:	ab05      	add	r3, sp, #20
   15f86:	681b      	ldr	r3, [r3, #0]
   15f88:	681b      	ldr	r3, [r3, #0]
   15f8a:	3320      	adds	r3, #32
   15f8c:	681b      	ldr	r3, [r3, #0]
   15f8e:	a906      	add	r1, sp, #24
   15f90:	a805      	add	r0, sp, #20
   15f92:	f44f 7200 	mov.w	r2, #512	; 0x200
   15f96:	6800      	ldr	r0, [r0, #0]
   15f98:	4798      	blx	r3
   15f9a:	4603      	mov	r3, r0
   15f9c:	f8ad 3234 	strh.w	r3, [sp, #564]	; 0x234

        LOG_DEBUG("Block #%d @ 0x%" PRIX32 " acquired", block_count, address);
        LOG_DEBUG("Expecting block crc16 '0x%04X'", expected_block_crc);
        LOG_DEBUG("Got '0x%04X'", block_crc);
        if (expected_block_crc != block_crc)
   15fa0:	f8bd 2234 	ldrh.w	r2, [sp, #564]	; 0x234
   15fa4:	f8bd 3236 	ldrh.w	r3, [sp, #566]	; 0x236
   15fa8:	429a      	cmp	r2, r3
   15faa:	d020      	beq.n	15fee <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x1be>
        {
          // If they do not match, set the bad crc status
          payload_had_bad_crc = true;
   15fac:	2301      	movs	r3, #1
   15fae:	f88d 3247 	strb.w	r3, [sp, #583]	; 0x247
          LOG_ERROR("While Reading Block #%d CRC16:", block_count);
   15fb2:	f8bd 323e 	ldrh.w	r3, [sp, #574]	; 0x23e
   15fb6:	9300      	str	r3, [sp, #0]
   15fb8:	f240 23ed 	movw	r3, #749	; 0x2ed
   15fbc:	4a22      	ldr	r2, [pc, #136]	; (16048 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x218>)
   15fbe:	4923      	ldr	r1, [pc, #140]	; (1604c <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x21c>)
   15fc0:	4823      	ldr	r0, [pc, #140]	; (16050 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x220>)
   15fc2:	f7fe fa8f 	bl	144e4 <printf>
          LOG_ERROR("Expected '0x%04X'", expected_block_crc);
   15fc6:	f8bd 3234 	ldrh.w	r3, [sp, #564]	; 0x234
   15fca:	9300      	str	r3, [sp, #0]
   15fcc:	f240 23ee 	movw	r3, #750	; 0x2ee
   15fd0:	4a1d      	ldr	r2, [pc, #116]	; (16048 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x218>)
   15fd2:	4920      	ldr	r1, [pc, #128]	; (16054 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x224>)
   15fd4:	4820      	ldr	r0, [pc, #128]	; (16058 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x228>)
   15fd6:	f7fe fa85 	bl	144e4 <printf>
          LOG_ERROR("Got '0x%04X'", block_crc);
   15fda:	f8bd 3236 	ldrh.w	r3, [sp, #566]	; 0x236
   15fde:	9300      	str	r3, [sp, #0]
   15fe0:	f240 23ef 	movw	r3, #751	; 0x2ef
   15fe4:	4a18      	ldr	r2, [pc, #96]	; (16048 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x218>)
   15fe6:	491d      	ldr	r1, [pc, #116]	; (1605c <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x22c>)
   15fe8:	481d      	ldr	r0, [pc, #116]	; (16060 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x230>)
   15fea:	f7fe fa7b 	bl	144e4 <printf>
      for (block_count = 0; block_count < blocks; block_count++)
   15fee:	f8bd 323e 	ldrh.w	r3, [sp, #574]	; 0x23e
   15ff2:	3301      	adds	r3, #1
   15ff4:	f8ad 323e 	strh.w	r3, [sp, #574]	; 0x23e
   15ff8:	e75f      	b.n	15eba <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x8a>
        }
      }

      // After reading multiple blocks, send the stop command to terminate the
      // transaction (i.e. no keep-alive)
      if (blocks > 1)
   15ffa:	ab02      	add	r3, sp, #8
   15ffc:	681b      	ldr	r3, [r3, #0]
   15ffe:	2b01      	cmp	r3, #1
   16000:	d913      	bls.n	1602a <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x1fa>
      {
        sd.response.length =
            SendCmd(Command::kStopTrans, 0xFFFFFFFF, sd.response.data.byte, 100,
                    KeepAlive::kNo);
   16002:	ab05      	add	r3, sp, #20
   16004:	681b      	ldr	r3, [r3, #0]
   16006:	681b      	ldr	r3, [r3, #0]
   16008:	681c      	ldr	r4, [r3, #0]
            SendCmd(Command::kStopTrans, 0xFFFFFFFF, sd.response.data.byte, 100,
   1600a:	ab86      	add	r3, sp, #536	; 0x218
   1600c:	f103 0208 	add.w	r2, r3, #8
   16010:	a805      	add	r0, sp, #20
   16012:	2300      	movs	r3, #0
   16014:	9301      	str	r3, [sp, #4]
   16016:	2364      	movs	r3, #100	; 0x64
   16018:	9300      	str	r3, [sp, #0]
   1601a:	4613      	mov	r3, r2
   1601c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   16020:	214c      	movs	r1, #76	; 0x4c
   16022:	6800      	ldr	r0, [r0, #0]
   16024:	47a0      	blx	r4
   16026:	4603      	mov	r3, r0
        sd.response.length =
   16028:	938a      	str	r3, [sp, #552]	; 0x228
      LOG_DEBUG("Response Byte");
      LOG_DEBUG("0x%02X", sd.response.data.byte[0]);

      // If there was a bad crc from the payload, manually set the
      // CRC error flag in the command response byte
      if (payload_had_bad_crc)
   1602a:	f89d 3247 	ldrb.w	r3, [sp, #583]	; 0x247
   1602e:	2b00      	cmp	r3, #0
   16030:	f000 80c0 	beq.w	161b4 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x384>
      {
        sd.response.data.byte[0] |= 0x08;
   16034:	f89d 3220 	ldrb.w	r3, [sp, #544]	; 0x220
   16038:	f043 0308 	orr.w	r3, r3, #8
   1603c:	b2db      	uxtb	r3, r3
   1603e:	f88d 3220 	strb.w	r3, [sp, #544]	; 0x220
   16042:	e0b7      	b.n	161b4 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x384>
   16044:	00015e31 	.word	0x00015e31
   16048:	00019260 	.word	0x00019260
   1604c:	00018f64 	.word	0x00018f64
   16050:	000186f8 	.word	0x000186f8
   16054:	00018f6c 	.word	0x00018f6c
   16058:	00018750 	.word	0x00018750
   1605c:	00018f74 	.word	0x00018f74
   16060:	0001879c 	.word	0x0001879c
      }
    }
    else
    {
      LOG_ERROR("Read Cmd was not acknowledged properly!");
   16064:	f240 3309 	movw	r3, #777	; 0x309
   16068:	4a65      	ldr	r2, [pc, #404]	; (16200 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x3d0>)
   1606a:	4966      	ldr	r1, [pc, #408]	; (16204 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x3d4>)
   1606c:	4866      	ldr	r0, [pc, #408]	; (16208 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x3d8>)
   1606e:	f7fe fa39 	bl	144e4 <printf>
      LOG_ERROR("Parameter Err: %s", ToBool(sd.response.data.byte[0] & 0x40));
   16072:	f89d 3220 	ldrb.w	r3, [sp, #544]	; 0x220
   16076:	f003 0340 	and.w	r3, r3, #64	; 0x40
   1607a:	2b00      	cmp	r3, #0
   1607c:	bf14      	ite	ne
   1607e:	2301      	movne	r3, #1
   16080:	2300      	moveq	r3, #0
   16082:	b2da      	uxtb	r2, r3
   16084:	ab05      	add	r3, sp, #20
   16086:	4611      	mov	r1, r2
   16088:	6818      	ldr	r0, [r3, #0]
   1608a:	f7ff fe55 	bl	15d38 <Sd::ToBool(bool)>
   1608e:	4603      	mov	r3, r0
   16090:	9300      	str	r3, [sp, #0]
   16092:	f240 330a 	movw	r3, #778	; 0x30a
   16096:	4a5a      	ldr	r2, [pc, #360]	; (16200 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x3d0>)
   16098:	495c      	ldr	r1, [pc, #368]	; (1620c <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x3dc>)
   1609a:	485d      	ldr	r0, [pc, #372]	; (16210 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x3e0>)
   1609c:	f7fe fa22 	bl	144e4 <printf>
      LOG_ERROR("Addr Err: %s", ToBool(sd.response.data.byte[0] & 0x20));
   160a0:	f89d 3220 	ldrb.w	r3, [sp, #544]	; 0x220
   160a4:	f003 0320 	and.w	r3, r3, #32
   160a8:	2b00      	cmp	r3, #0
   160aa:	bf14      	ite	ne
   160ac:	2301      	movne	r3, #1
   160ae:	2300      	moveq	r3, #0
   160b0:	b2da      	uxtb	r2, r3
   160b2:	ab05      	add	r3, sp, #20
   160b4:	4611      	mov	r1, r2
   160b6:	6818      	ldr	r0, [r3, #0]
   160b8:	f7ff fe3e 	bl	15d38 <Sd::ToBool(bool)>
   160bc:	4603      	mov	r3, r0
   160be:	9300      	str	r3, [sp, #0]
   160c0:	f240 330b 	movw	r3, #779	; 0x30b
   160c4:	4a4e      	ldr	r2, [pc, #312]	; (16200 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x3d0>)
   160c6:	4953      	ldr	r1, [pc, #332]	; (16214 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x3e4>)
   160c8:	4853      	ldr	r0, [pc, #332]	; (16218 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x3e8>)
   160ca:	f7fe fa0b 	bl	144e4 <printf>
      LOG_ERROR("Erase Seq Err: %s", ToBool(sd.response.data.byte[0] & 0x10));
   160ce:	f89d 3220 	ldrb.w	r3, [sp, #544]	; 0x220
   160d2:	f003 0310 	and.w	r3, r3, #16
   160d6:	2b00      	cmp	r3, #0
   160d8:	bf14      	ite	ne
   160da:	2301      	movne	r3, #1
   160dc:	2300      	moveq	r3, #0
   160de:	b2da      	uxtb	r2, r3
   160e0:	ab05      	add	r3, sp, #20
   160e2:	4611      	mov	r1, r2
   160e4:	6818      	ldr	r0, [r3, #0]
   160e6:	f7ff fe27 	bl	15d38 <Sd::ToBool(bool)>
   160ea:	4603      	mov	r3, r0
   160ec:	9300      	str	r3, [sp, #0]
   160ee:	f44f 7343 	mov.w	r3, #780	; 0x30c
   160f2:	4a43      	ldr	r2, [pc, #268]	; (16200 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x3d0>)
   160f4:	4949      	ldr	r1, [pc, #292]	; (1621c <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x3ec>)
   160f6:	484a      	ldr	r0, [pc, #296]	; (16220 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x3f0>)
   160f8:	f7fe f9f4 	bl	144e4 <printf>
      LOG_ERROR("Com CRC Err: %s", ToBool(sd.response.data.byte[0] & 0x08));
   160fc:	f89d 3220 	ldrb.w	r3, [sp, #544]	; 0x220
   16100:	f003 0308 	and.w	r3, r3, #8
   16104:	2b00      	cmp	r3, #0
   16106:	bf14      	ite	ne
   16108:	2301      	movne	r3, #1
   1610a:	2300      	moveq	r3, #0
   1610c:	b2da      	uxtb	r2, r3
   1610e:	ab05      	add	r3, sp, #20
   16110:	4611      	mov	r1, r2
   16112:	6818      	ldr	r0, [r3, #0]
   16114:	f7ff fe10 	bl	15d38 <Sd::ToBool(bool)>
   16118:	4603      	mov	r3, r0
   1611a:	9300      	str	r3, [sp, #0]
   1611c:	f240 330d 	movw	r3, #781	; 0x30d
   16120:	4a37      	ldr	r2, [pc, #220]	; (16200 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x3d0>)
   16122:	4940      	ldr	r1, [pc, #256]	; (16224 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x3f4>)
   16124:	4840      	ldr	r0, [pc, #256]	; (16228 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x3f8>)
   16126:	f7fe f9dd 	bl	144e4 <printf>
      LOG_ERROR("Illegal Cmd Err: %s", ToBool(sd.response.data.byte[0] & 0x04));
   1612a:	f89d 3220 	ldrb.w	r3, [sp, #544]	; 0x220
   1612e:	f003 0304 	and.w	r3, r3, #4
   16132:	2b00      	cmp	r3, #0
   16134:	bf14      	ite	ne
   16136:	2301      	movne	r3, #1
   16138:	2300      	moveq	r3, #0
   1613a:	b2da      	uxtb	r2, r3
   1613c:	ab05      	add	r3, sp, #20
   1613e:	4611      	mov	r1, r2
   16140:	6818      	ldr	r0, [r3, #0]
   16142:	f7ff fdf9 	bl	15d38 <Sd::ToBool(bool)>
   16146:	4603      	mov	r3, r0
   16148:	9300      	str	r3, [sp, #0]
   1614a:	f240 330e 	movw	r3, #782	; 0x30e
   1614e:	4a2c      	ldr	r2, [pc, #176]	; (16200 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x3d0>)
   16150:	4936      	ldr	r1, [pc, #216]	; (1622c <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x3fc>)
   16152:	4837      	ldr	r0, [pc, #220]	; (16230 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x400>)
   16154:	f7fe f9c6 	bl	144e4 <printf>
      LOG_ERROR("Erase Reset: %s", ToBool(sd.response.data.byte[0] & 0x02));
   16158:	f89d 3220 	ldrb.w	r3, [sp, #544]	; 0x220
   1615c:	f003 0302 	and.w	r3, r3, #2
   16160:	2b00      	cmp	r3, #0
   16162:	bf14      	ite	ne
   16164:	2301      	movne	r3, #1
   16166:	2300      	moveq	r3, #0
   16168:	b2da      	uxtb	r2, r3
   1616a:	ab05      	add	r3, sp, #20
   1616c:	4611      	mov	r1, r2
   1616e:	6818      	ldr	r0, [r3, #0]
   16170:	f7ff fde2 	bl	15d38 <Sd::ToBool(bool)>
   16174:	4603      	mov	r3, r0
   16176:	9300      	str	r3, [sp, #0]
   16178:	f240 330f 	movw	r3, #783	; 0x30f
   1617c:	4a20      	ldr	r2, [pc, #128]	; (16200 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x3d0>)
   1617e:	492d      	ldr	r1, [pc, #180]	; (16234 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x404>)
   16180:	482d      	ldr	r0, [pc, #180]	; (16238 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x408>)
   16182:	f7fe f9af 	bl	144e4 <printf>
      LOG_ERROR("In Idle: %s", ToBool(sd.response.data.byte[0] & 0x01));
   16186:	f89d 3220 	ldrb.w	r3, [sp, #544]	; 0x220
   1618a:	f003 0301 	and.w	r3, r3, #1
   1618e:	2b00      	cmp	r3, #0
   16190:	bf14      	ite	ne
   16192:	2301      	movne	r3, #1
   16194:	2300      	moveq	r3, #0
   16196:	b2da      	uxtb	r2, r3
   16198:	ab05      	add	r3, sp, #20
   1619a:	4611      	mov	r1, r2
   1619c:	6818      	ldr	r0, [r3, #0]
   1619e:	f7ff fdcb 	bl	15d38 <Sd::ToBool(bool)>
   161a2:	4603      	mov	r3, r0
   161a4:	9300      	str	r3, [sp, #0]
   161a6:	f44f 7344 	mov.w	r3, #784	; 0x310
   161aa:	4a15      	ldr	r2, [pc, #84]	; (16200 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x3d0>)
   161ac:	4923      	ldr	r1, [pc, #140]	; (1623c <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x40c>)
   161ae:	4824      	ldr	r0, [pc, #144]	; (16240 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x410>)
   161b0:	f7fe f998 	bl	144e4 <printf>
    LOG_DEBUG("Now waiting for SD Card to exit Idle Mode...");
    do
    {
      // Query the status register
      sd.response.length = SendCmd(Command::kGetStatus, 32,
                                   sd.response.data.byte, 0, KeepAlive::kNo);
   161b4:	ab05      	add	r3, sp, #20
   161b6:	681b      	ldr	r3, [r3, #0]
   161b8:	681b      	ldr	r3, [r3, #0]
   161ba:	681c      	ldr	r4, [r3, #0]
      sd.response.length = SendCmd(Command::kGetStatus, 32,
   161bc:	ab86      	add	r3, sp, #536	; 0x218
   161be:	f103 0208 	add.w	r2, r3, #8
   161c2:	a805      	add	r0, sp, #20
   161c4:	2300      	movs	r3, #0
   161c6:	9301      	str	r3, [sp, #4]
   161c8:	2300      	movs	r3, #0
   161ca:	9300      	str	r3, [sp, #0]
   161cc:	4613      	mov	r3, r2
   161ce:	2220      	movs	r2, #32
   161d0:	210d      	movs	r1, #13
   161d2:	6800      	ldr	r0, [r0, #0]
   161d4:	47a0      	blx	r4
   161d6:	4603      	mov	r3, r0
   161d8:	938a      	str	r3, [sp, #552]	; 0x228
    } while (sd.response.data.byte[0] & 0x01);
   161da:	f89d 3220 	ldrb.w	r3, [sp, #544]	; 0x220
   161de:	f003 0301 	and.w	r3, r3, #1
   161e2:	2b00      	cmp	r3, #0
   161e4:	d000      	beq.n	161e8 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x3b8>
    do
   161e6:	e7e5      	b.n	161b4 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x384>
    LOG_DEBUG("SD Card is out of Idle Mode!");

    // Return the status
    LOG_DEBUG("Read Complete! [R1 Response: 0x%02X]", sd.response.data.byte[0]);
    return sd.response.data.byte[0];
   161e8:	f89d 4220 	ldrb.w	r4, [sp, #544]	; 0x220
   161ec:	462b      	mov	r3, r5
   161ee:	4619      	mov	r1, r3
   161f0:	4814      	ldr	r0, [pc, #80]	; (16244 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x414>)
   161f2:	f7fc ff2f 	bl	13054 <__cyg_profile_func_exit>
   161f6:	4623      	mov	r3, r4
  }
   161f8:	4618      	mov	r0, r3
   161fa:	f50d 7d13 	add.w	sp, sp, #588	; 0x24c
   161fe:	bd30      	pop	{r4, r5, pc}
   16200:	00019260 	.word	0x00019260
   16204:	00018f7c 	.word	0x00018f7c
   16208:	000187e4 	.word	0x000187e4
   1620c:	00018f84 	.word	0x00018f84
   16210:	00018848 	.word	0x00018848
   16214:	00018f8c 	.word	0x00018f8c
   16218:	00018894 	.word	0x00018894
   1621c:	00018f94 	.word	0x00018f94
   16220:	000188dc 	.word	0x000188dc
   16224:	00018f9c 	.word	0x00018f9c
   16228:	00018928 	.word	0x00018928
   1622c:	00018fa4 	.word	0x00018fa4
   16230:	00018974 	.word	0x00018974
   16234:	00018fac 	.word	0x00018fac
   16238:	000189c4 	.word	0x000189c4
   1623c:	00018fb4 	.word	0x00018fb4
   16240:	00018a10 	.word	0x00018a10
   16244:	00015e31 	.word	0x00015e31

00016248 <Sd::WriteBlock(unsigned long, unsigned char const*, unsigned long)>:

  // Writes any number of 512-byte blocks to the SD Card
  uint8_t WriteBlock(uint32_t address, const uint8_t * array,
   16248:	b530      	push	{r4, r5, lr}
   1624a:	b095      	sub	sp, #84	; 0x54
   1624c:	4675      	mov	r5, lr
   1624e:	9005      	str	r0, [sp, #20]
   16250:	9104      	str	r1, [sp, #16]
   16252:	9203      	str	r2, [sp, #12]
   16254:	9302      	str	r3, [sp, #8]
   16256:	462b      	mov	r3, r5
   16258:	4619      	mov	r1, r3
   1625a:	4865      	ldr	r0, [pc, #404]	; (163f0 <Sd::WriteBlock(unsigned long, unsigned char const*, unsigned long)+0x1a8>)
   1625c:	f7fc fee6 	bl	1302c <__cyg_profile_func_enter>
                     uint32_t blocks = 1) override
  {
    // Wait for a previous command to finish
    WaitWhileBusy();
   16260:	9805      	ldr	r0, [sp, #20]
   16262:	f7ff fdbd 	bl	15de0 <Sd::WaitWhileBusy()>
    Sd::CardInfo_t sd;

    // Determine appropriate command and start token to send
    Command write_cmd;
    uint8_t write_start_tkn;
    if (blocks > 1)
   16266:	9b02      	ldr	r3, [sp, #8]
   16268:	2b01      	cmp	r3, #1
   1626a:	d905      	bls.n	16278 <Sd::WriteBlock(unsigned long, unsigned char const*, unsigned long)+0x30>
    {
      write_cmd       = Command::kWriteMulti;
   1626c:	2359      	movs	r3, #89	; 0x59
   1626e:	9313      	str	r3, [sp, #76]	; 0x4c
      write_start_tkn = 0xFC;
   16270:	23fc      	movs	r3, #252	; 0xfc
   16272:	f88d 304b 	strb.w	r3, [sp, #75]	; 0x4b
   16276:	e004      	b.n	16282 <Sd::WriteBlock(unsigned long, unsigned char const*, unsigned long)+0x3a>
    }
    else
    {
      write_cmd       = Command::kWriteSingle;
   16278:	2358      	movs	r3, #88	; 0x58
   1627a:	9313      	str	r3, [sp, #76]	; 0x4c
      write_start_tkn = 0xFE;
   1627c:	23fe      	movs	r3, #254	; 0xfe
   1627e:	f88d 304b 	strb.w	r3, [sp, #75]	; 0x4b
    }

    // Send initial write command
    sd.response.length = SendCmd(write_cmd, address, sd.response.data.byte, 100,
                                 KeepAlive::kYes);
   16282:	9b05      	ldr	r3, [sp, #20]
   16284:	681b      	ldr	r3, [r3, #0]
   16286:	681c      	ldr	r4, [r3, #0]
    sd.response.length = SendCmd(write_cmd, address, sd.response.data.byte, 100,
   16288:	ab06      	add	r3, sp, #24
   1628a:	f103 0208 	add.w	r2, r3, #8
   1628e:	2301      	movs	r3, #1
   16290:	9301      	str	r3, [sp, #4]
   16292:	2364      	movs	r3, #100	; 0x64
   16294:	9300      	str	r3, [sp, #0]
   16296:	4613      	mov	r3, r2
   16298:	9a04      	ldr	r2, [sp, #16]
   1629a:	9913      	ldr	r1, [sp, #76]	; 0x4c
   1629c:	9805      	ldr	r0, [sp, #20]
   1629e:	47a0      	blx	r4
   162a0:	4603      	mov	r3, r0
   162a2:	930a      	str	r3, [sp, #40]	; 0x28
    LOG_DEBUG("Sent Write Cmd");
    LOG_DEBUG("[R1 Response:0x%02X]", sd.response.data.byte[0]);

    // Check if the response was acknowledged properly
    if (sd.response.data.byte[0] == 0x00)
   162a4:	f89d 3020 	ldrb.w	r3, [sp, #32]
   162a8:	2b00      	cmp	r3, #0
   162aa:	f040 8096 	bne.w	163da <Sd::WriteBlock(unsigned long, unsigned char const*, unsigned long)+0x192>
    {
      // If no errors, proceed write given block(s) to SD Card
      // For each given block
      for (uint16_t current_block_num = 0; current_block_num < blocks;
   162ae:	2300      	movs	r3, #0
   162b0:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
   162b4:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
   162b8:	9a02      	ldr	r2, [sp, #8]
   162ba:	429a      	cmp	r2, r3
   162bc:	d97a      	bls.n	163b4 <Sd::WriteBlock(unsigned long, unsigned char const*, unsigned long)+0x16c>
           current_block_num++)
      {
        // Calculate array offset
        uint64_t arr_offset = current_block_num * kBlockSize;
   162be:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
   162c2:	025b      	lsls	r3, r3, #9
   162c4:	ea4f 74e3 	mov.w	r4, r3, asr #31
   162c8:	e9cd 340e 	strd	r3, r4, [sp, #56]	; 0x38

        // Send the start token for the current block
        ssp_interface_->Transfer(write_start_tkn);
   162cc:	9b05      	ldr	r3, [sp, #20]
   162ce:	685a      	ldr	r2, [r3, #4]
   162d0:	9b05      	ldr	r3, [sp, #20]
   162d2:	685b      	ldr	r3, [r3, #4]
   162d4:	681b      	ldr	r3, [r3, #0]
   162d6:	3308      	adds	r3, #8
   162d8:	681b      	ldr	r3, [r3, #0]
   162da:	f89d 104b 	ldrb.w	r1, [sp, #75]	; 0x4b
   162de:	b289      	uxth	r1, r1
   162e0:	4610      	mov	r0, r2
   162e2:	4798      	blx	r3

        // Write all 512-bytes of the given block
        LOG_DEBUG("Writing block #%d", current_block_num);
        for (uint16_t current_byte = 0; current_byte < kBlockSize;
   162e4:	2300      	movs	r3, #0
   162e6:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
   162ea:	f8bd 3046 	ldrh.w	r3, [sp, #70]	; 0x46
   162ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   162f2:	d216      	bcs.n	16322 <Sd::WriteBlock(unsigned long, unsigned char const*, unsigned long)+0xda>
             current_byte++)
        {
          ssp_interface_->Transfer(array[arr_offset + current_byte]);
   162f4:	9b05      	ldr	r3, [sp, #20]
   162f6:	6858      	ldr	r0, [r3, #4]
   162f8:	9b05      	ldr	r3, [sp, #20]
   162fa:	685b      	ldr	r3, [r3, #4]
   162fc:	681b      	ldr	r3, [r3, #0]
   162fe:	3308      	adds	r3, #8
   16300:	681b      	ldr	r3, [r3, #0]
   16302:	990e      	ldr	r1, [sp, #56]	; 0x38
   16304:	f8bd 2046 	ldrh.w	r2, [sp, #70]	; 0x46
   16308:	440a      	add	r2, r1
   1630a:	9903      	ldr	r1, [sp, #12]
   1630c:	440a      	add	r2, r1
   1630e:	7812      	ldrb	r2, [r2, #0]
   16310:	b292      	uxth	r2, r2
   16312:	4611      	mov	r1, r2
   16314:	4798      	blx	r3
        for (uint16_t current_byte = 0; current_byte < kBlockSize;
   16316:	f8bd 3046 	ldrh.w	r3, [sp, #70]	; 0x46
   1631a:	3301      	adds	r3, #1
   1631c:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
   16320:	e7e3      	b.n	162ea <Sd::WriteBlock(unsigned long, unsigned char const*, unsigned long)+0xa2>
        }

        // Read the data response token after writing the block
        uint8_t data_response_tkn =
            static_cast<uint8_t>(ssp_interface_->Transfer(0xFF));
   16322:	9b05      	ldr	r3, [sp, #20]
   16324:	685a      	ldr	r2, [r3, #4]
   16326:	9b05      	ldr	r3, [sp, #20]
   16328:	685b      	ldr	r3, [r3, #4]
   1632a:	681b      	ldr	r3, [r3, #0]
   1632c:	3308      	adds	r3, #8
   1632e:	681b      	ldr	r3, [r3, #0]
   16330:	21ff      	movs	r1, #255	; 0xff
   16332:	4610      	mov	r0, r2
   16334:	4798      	blx	r3
   16336:	4603      	mov	r3, r0
   16338:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
                  ToBool(data_response_tkn & 0x0B));
        LOG_DEBUG("Data Rejected (write err)?: %s",
                  ToBool(data_response_tkn & 0x0D));

        // If writing multiple blocks and the previous block was rejected
        if (blocks > 1 && !(data_response_tkn & 0x05))
   1633c:	9b02      	ldr	r3, [sp, #8]
   1633e:	2b01      	cmp	r3, #1
   16340:	d92f      	bls.n	163a2 <Sd::WriteBlock(unsigned long, unsigned char const*, unsigned long)+0x15a>
   16342:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
   16346:	f003 0305 	and.w	r3, r3, #5
   1634a:	2b00      	cmp	r3, #0
   1634c:	d129      	bne.n	163a2 <Sd::WriteBlock(unsigned long, unsigned char const*, unsigned long)+0x15a>
        {
          // Send an immediate stop (CMD12)
          sd.response.length =
              SendCmd(Command::kStopTrans, 0xFFFFFFFF, sd.response.data.byte,
                      100, KeepAlive::kYes);
   1634e:	9b05      	ldr	r3, [sp, #20]
   16350:	681b      	ldr	r3, [r3, #0]
   16352:	681c      	ldr	r4, [r3, #0]
              SendCmd(Command::kStopTrans, 0xFFFFFFFF, sd.response.data.byte,
   16354:	ab06      	add	r3, sp, #24
   16356:	f103 0208 	add.w	r2, r3, #8
   1635a:	2301      	movs	r3, #1
   1635c:	9301      	str	r3, [sp, #4]
   1635e:	2364      	movs	r3, #100	; 0x64
   16360:	9300      	str	r3, [sp, #0]
   16362:	4613      	mov	r3, r2
   16364:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   16368:	214c      	movs	r1, #76	; 0x4c
   1636a:	9805      	ldr	r0, [sp, #20]
   1636c:	47a0      	blx	r4
   1636e:	4603      	mov	r3, r0
          sd.response.length =
   16370:	930a      	str	r3, [sp, #40]	; 0x28
          LOG_DEBUG("Stopped Transmission due to rejection...");
          LOG_DEBUG("[R1 Response: 0x%02X]", sd.response.data.byte[0]);

          // In the case of a write error, ask for the reason why
          if (data_response_tkn & 0x0D)
   16372:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
   16376:	f003 030d 	and.w	r3, r3, #13
   1637a:	2b00      	cmp	r3, #0
   1637c:	d011      	beq.n	163a2 <Sd::WriteBlock(unsigned long, unsigned char const*, unsigned long)+0x15a>
          {
            sd.response.length =
                SendCmd(Command::kGetStatus, 0xFFFFFFFF, sd.response.data.byte,
                        100, KeepAlive::kYes);
   1637e:	9b05      	ldr	r3, [sp, #20]
   16380:	681b      	ldr	r3, [r3, #0]
   16382:	681c      	ldr	r4, [r3, #0]
                SendCmd(Command::kGetStatus, 0xFFFFFFFF, sd.response.data.byte,
   16384:	ab06      	add	r3, sp, #24
   16386:	f103 0208 	add.w	r2, r3, #8
   1638a:	2301      	movs	r3, #1
   1638c:	9301      	str	r3, [sp, #4]
   1638e:	2364      	movs	r3, #100	; 0x64
   16390:	9300      	str	r3, [sp, #0]
   16392:	4613      	mov	r3, r2
   16394:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   16398:	210d      	movs	r1, #13
   1639a:	9805      	ldr	r0, [sp, #20]
   1639c:	47a0      	blx	r4
   1639e:	4603      	mov	r3, r0
            sd.response.length =
   163a0:	930a      	str	r3, [sp, #40]	; 0x28
                "Checking Status Register to see cause of Write Error...");
            LOG_DEBUG("[R2 Response: 0x%04" PRIX32 "]",
                      sd.response.data.dWord.lo);
          }
        }
        WaitWhileBusy();
   163a2:	9805      	ldr	r0, [sp, #20]
   163a4:	f7ff fd1c 	bl	15de0 <Sd::WaitWhileBusy()>
      for (uint16_t current_block_num = 0; current_block_num < blocks;
   163a8:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
   163ac:	3301      	adds	r3, #1
   163ae:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
   163b2:	e77f      	b.n	162b4 <Sd::WriteBlock(unsigned long, unsigned char const*, unsigned long)+0x6c>
      }

      if (blocks > 1)
   163b4:	9b02      	ldr	r3, [sp, #8]
   163b6:	2b01      	cmp	r3, #1
   163b8:	d90f      	bls.n	163da <Sd::WriteBlock(unsigned long, unsigned char const*, unsigned long)+0x192>
      {
        constexpr uint8_t kStopToken = 0xFD;
   163ba:	23fd      	movs	r3, #253	; 0xfd
   163bc:	f88d 3036 	strb.w	r3, [sp, #54]	; 0x36
        ssp_interface_->Transfer(kStopToken);
   163c0:	9b05      	ldr	r3, [sp, #20]
   163c2:	685a      	ldr	r2, [r3, #4]
   163c4:	9b05      	ldr	r3, [sp, #20]
   163c6:	685b      	ldr	r3, [r3, #4]
   163c8:	681b      	ldr	r3, [r3, #0]
   163ca:	3308      	adds	r3, #8
   163cc:	681b      	ldr	r3, [r3, #0]
   163ce:	21fd      	movs	r1, #253	; 0xfd
   163d0:	4610      	mov	r0, r2
   163d2:	4798      	blx	r3

        // Wait for the card's programming to complete before
        // reselecting it (i.e. to prevent corruption)
        WaitWhileBusy();
   163d4:	9805      	ldr	r0, [sp, #20]
   163d6:	f7ff fd03 	bl	15de0 <Sd::WaitWhileBusy()>
      LOG_DEBUG("Illegal Cmd Err: %s", ToBool(sd.response.data.byte[0] & 0x04));
      LOG_DEBUG("Erase Reset: %s", ToBool(sd.response.data.byte[0] & 0x02));
      LOG_DEBUG("In Idle: %s", ToBool(sd.response.data.byte[0] & 0x01));
    }

    return sd.response.data.byte[0];
   163da:	f89d 4020 	ldrb.w	r4, [sp, #32]
   163de:	462b      	mov	r3, r5
   163e0:	4619      	mov	r1, r3
   163e2:	4803      	ldr	r0, [pc, #12]	; (163f0 <Sd::WriteBlock(unsigned long, unsigned char const*, unsigned long)+0x1a8>)
   163e4:	f7fc fe36 	bl	13054 <__cyg_profile_func_exit>
   163e8:	4623      	mov	r3, r4
  }
   163ea:	4618      	mov	r0, r3
   163ec:	b015      	add	sp, #84	; 0x54
   163ee:	bd30      	pop	{r4, r5, pc}
   163f0:	00016249 	.word	0x00016249

000163f4 <Sd::DeleteBlock(unsigned long, unsigned long)>:

  // Deletes any number of blocks (inclusively) within a range of address.
  uint8_t DeleteBlock(uint32_t start, uint32_t end) override
   163f4:	b530      	push	{r4, r5, lr}
   163f6:	b08f      	sub	sp, #60	; 0x3c
   163f8:	4675      	mov	r5, lr
   163fa:	9005      	str	r0, [sp, #20]
   163fc:	9104      	str	r1, [sp, #16]
   163fe:	9203      	str	r2, [sp, #12]
   16400:	462b      	mov	r3, r5
   16402:	4619      	mov	r1, r3
   16404:	483d      	ldr	r0, [pc, #244]	; (164fc <Sd::DeleteBlock(unsigned long, unsigned long)+0x108>)
   16406:	f7fc fe11 	bl	1302c <__cyg_profile_func_enter>
  {
    // Wait for a previous command to finish
    WaitWhileBusy();
   1640a:	9805      	ldr	r0, [sp, #20]
   1640c:	f7ff fce8 	bl	15de0 <Sd::WaitWhileBusy()>

    // Create a temporary storage location to store sd command responses
    Sd::CardInfo_t sd;
    bool delete_failed = false;
   16410:	2300      	movs	r3, #0
   16412:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37

    // Set the delete start address
    LOG_DEBUG("Setting Delete Start Address...");
    sd.response.length = SendCmd(Command::kDelFrom, start,
                                 sd.response.data.byte, 100, KeepAlive::kYes);
   16416:	9b05      	ldr	r3, [sp, #20]
   16418:	681b      	ldr	r3, [r3, #0]
   1641a:	681c      	ldr	r4, [r3, #0]
    sd.response.length = SendCmd(Command::kDelFrom, start,
   1641c:	ab06      	add	r3, sp, #24
   1641e:	f103 0208 	add.w	r2, r3, #8
   16422:	2301      	movs	r3, #1
   16424:	9301      	str	r3, [sp, #4]
   16426:	2364      	movs	r3, #100	; 0x64
   16428:	9300      	str	r3, [sp, #0]
   1642a:	4613      	mov	r3, r2
   1642c:	9a04      	ldr	r2, [sp, #16]
   1642e:	2160      	movs	r1, #96	; 0x60
   16430:	9805      	ldr	r0, [sp, #20]
   16432:	47a0      	blx	r4
   16434:	4603      	mov	r3, r0
   16436:	930a      	str	r3, [sp, #40]	; 0x28

    // Wait while the writing the start address
    WaitWhileBusy();
   16438:	9805      	ldr	r0, [sp, #20]
   1643a:	f7ff fcd1 	bl	15de0 <Sd::WaitWhileBusy()>

    // Force return if an error occurred
    if (sd.response.data.byte[0] != 0x00)
   1643e:	f89d 3020 	ldrb.w	r3, [sp, #32]
   16442:	2b00      	cmp	r3, #0
   16444:	d009      	beq.n	1645a <Sd::DeleteBlock(unsigned long, unsigned long)+0x66>
    {
      LOG_ERROR("Failed to set Start Address!");
   16446:	f44f 736a 	mov.w	r3, #936	; 0x3a8
   1644a:	4a2d      	ldr	r2, [pc, #180]	; (16500 <Sd::DeleteBlock(unsigned long, unsigned long)+0x10c>)
   1644c:	492d      	ldr	r1, [pc, #180]	; (16504 <Sd::DeleteBlock(unsigned long, unsigned long)+0x110>)
   1644e:	482e      	ldr	r0, [pc, #184]	; (16508 <Sd::DeleteBlock(unsigned long, unsigned long)+0x114>)
   16450:	f7fe f848 	bl	144e4 <printf>
      delete_failed = true;
   16454:	2301      	movs	r3, #1
   16456:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
    }

    // Set the delete end address
    if (!delete_failed)
   1645a:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
   1645e:	f083 0301 	eor.w	r3, r3, #1
   16462:	b2db      	uxtb	r3, r3
   16464:	2b00      	cmp	r3, #0
   16466:	d010      	beq.n	1648a <Sd::DeleteBlock(unsigned long, unsigned long)+0x96>
    {
      LOG_DEBUG("Setting Delete End Address...");
      sd.response.length = SendCmd(Command::kDelTo, end, sd.response.data.byte,
                                   100, KeepAlive::kYes);
   16468:	9b05      	ldr	r3, [sp, #20]
   1646a:	681b      	ldr	r3, [r3, #0]
   1646c:	681c      	ldr	r4, [r3, #0]
      sd.response.length = SendCmd(Command::kDelTo, end, sd.response.data.byte,
   1646e:	ab06      	add	r3, sp, #24
   16470:	f103 0208 	add.w	r2, r3, #8
   16474:	2301      	movs	r3, #1
   16476:	9301      	str	r3, [sp, #4]
   16478:	2364      	movs	r3, #100	; 0x64
   1647a:	9300      	str	r3, [sp, #0]
   1647c:	4613      	mov	r3, r2
   1647e:	9a03      	ldr	r2, [sp, #12]
   16480:	2161      	movs	r1, #97	; 0x61
   16482:	9805      	ldr	r0, [sp, #20]
   16484:	47a0      	blx	r4
   16486:	4603      	mov	r3, r0
   16488:	930a      	str	r3, [sp, #40]	; 0x28
    }

    // Wait while the writing the end address
    WaitWhileBusy();
   1648a:	9805      	ldr	r0, [sp, #20]
   1648c:	f7ff fca8 	bl	15de0 <Sd::WaitWhileBusy()>

    // Force return if an error occurred
    if (sd.response.data.byte[0] != 0x00)
   16490:	f89d 3020 	ldrb.w	r3, [sp, #32]
   16494:	2b00      	cmp	r3, #0
   16496:	d009      	beq.n	164ac <Sd::DeleteBlock(unsigned long, unsigned long)+0xb8>
    {
      LOG_ERROR("Failed to set End Address!");
   16498:	f240 33ba 	movw	r3, #954	; 0x3ba
   1649c:	4a18      	ldr	r2, [pc, #96]	; (16500 <Sd::DeleteBlock(unsigned long, unsigned long)+0x10c>)
   1649e:	491b      	ldr	r1, [pc, #108]	; (1650c <Sd::DeleteBlock(unsigned long, unsigned long)+0x118>)
   164a0:	481b      	ldr	r0, [pc, #108]	; (16510 <Sd::DeleteBlock(unsigned long, unsigned long)+0x11c>)
   164a2:	f7fe f81f 	bl	144e4 <printf>
      delete_failed = true;
   164a6:	2301      	movs	r3, #1
   164a8:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
    }

    // Finally, attempt a delete
    if (!delete_failed)
   164ac:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
   164b0:	f083 0301 	eor.w	r3, r3, #1
   164b4:	b2db      	uxtb	r3, r3
   164b6:	2b00      	cmp	r3, #0
   164b8:	d014      	beq.n	164e4 <Sd::DeleteBlock(unsigned long, unsigned long)+0xf0>
    {
      // Issue the delete command to delete from our from:to range
      LOG_DEBUG("Issuing Delete Command...");
      sd.response.length = SendCmd(Command::kDel, 0xFFFFFFFF,
                                   sd.response.data.byte, 100, KeepAlive::kYes);
   164ba:	9b05      	ldr	r3, [sp, #20]
   164bc:	681b      	ldr	r3, [r3, #0]
   164be:	681c      	ldr	r4, [r3, #0]
      sd.response.length = SendCmd(Command::kDel, 0xFFFFFFFF,
   164c0:	ab06      	add	r3, sp, #24
   164c2:	f103 0208 	add.w	r2, r3, #8
   164c6:	2301      	movs	r3, #1
   164c8:	9301      	str	r3, [sp, #4]
   164ca:	2364      	movs	r3, #100	; 0x64
   164cc:	9300      	str	r3, [sp, #0]
   164ce:	4613      	mov	r3, r2
   164d0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   164d4:	2166      	movs	r1, #102	; 0x66
   164d6:	9805      	ldr	r0, [sp, #20]
   164d8:	47a0      	blx	r4
   164da:	4603      	mov	r3, r0
   164dc:	930a      	str	r3, [sp, #40]	; 0x28

      // Wait while the deletion occurs
      WaitWhileBusy();
   164de:	9805      	ldr	r0, [sp, #20]
   164e0:	f7ff fc7e 	bl	15de0 <Sd::WaitWhileBusy()>
      LOG_DEBUG("[R1 Response: 0x%02X]", sd.response.data.byte[0]);
      LOG_DEBUG("Deletion Complete...");
    }

    // Return status
    return sd.response.data.byte[0];
   164e4:	f89d 4020 	ldrb.w	r4, [sp, #32]
   164e8:	462b      	mov	r3, r5
   164ea:	4619      	mov	r1, r3
   164ec:	4803      	ldr	r0, [pc, #12]	; (164fc <Sd::DeleteBlock(unsigned long, unsigned long)+0x108>)
   164ee:	f7fc fdb1 	bl	13054 <__cyg_profile_func_exit>
   164f2:	4623      	mov	r3, r4
  }
   164f4:	4618      	mov	r0, r3
   164f6:	b00f      	add	sp, #60	; 0x3c
   164f8:	bd30      	pop	{r4, r5, pc}
   164fa:	bf00      	nop
   164fc:	000163f5 	.word	0x000163f5
   16500:	0001929c 	.word	0x0001929c
   16504:	00018fbc 	.word	0x00018fbc
   16508:	00018a58 	.word	0x00018a58
   1650c:	00018fc4 	.word	0x00018fc4
   16510:	00018ab0 	.word	0x00018ab0

00016514 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)>:

  // Send a command
  uint32_t SendCmd(Command sdc, uint32_t arg, uint8_t response_buffer[],
   16514:	e92d 49f0 	stmdb	sp!, {r4, r5, r6, r7, r8, fp, lr}
   16518:	b08f      	sub	sp, #60	; 0x3c
   1651a:	46f0      	mov	r8, lr
   1651c:	9003      	str	r0, [sp, #12]
   1651e:	9102      	str	r1, [sp, #8]
   16520:	9201      	str	r2, [sp, #4]
   16522:	9300      	str	r3, [sp, #0]
   16524:	4643      	mov	r3, r8
   16526:	4619      	mov	r1, r3
   16528:	4840      	ldr	r0, [pc, #256]	; (1662c <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x118>)
   1652a:	f7fc fd7f 	bl	1302c <__cyg_profile_func_enter>
                   uint32_t delay, KeepAlive keep_alive) override
  {
    ResponseType res_type;
    uint8_t res_len    = 0;
   1652e:	2300      	movs	r3, #0
   16530:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
    uint8_t crc        = 0;
   16534:	2300      	movs	r3, #0
   16536:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
    uint8_t tries      = 0;
   1653a:	2300      	movs	r3, #0
   1653c:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
    uint8_t bit_offset = 0;  // determines the distance of the response's
   16540:	2300      	movs	r3, #0
   16542:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
                             // 0 bit from the MSB place
    uint8_t temp_byte = 0;
   16546:	2300      	movs	r3, #0
   16548:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f

    // Determine the response type of the set command
    switch (sdc)
   1654c:	9b02      	ldr	r3, [sp, #8]
   1654e:	2b58      	cmp	r3, #88	; 0x58
   16550:	d052      	beq.n	165f8 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0xe4>
   16552:	2b58      	cmp	r3, #88	; 0x58
   16554:	dc16      	bgt.n	16584 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x70>
   16556:	2b48      	cmp	r3, #72	; 0x48
   16558:	d033      	beq.n	165c2 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0xae>
   1655a:	2b48      	cmp	r3, #72	; 0x48
   1655c:	dc06      	bgt.n	1656c <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x58>
   1655e:	2b40      	cmp	r3, #64	; 0x40
   16560:	d029      	beq.n	165b6 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0xa2>
   16562:	2b41      	cmp	r3, #65	; 0x41
   16564:	d02a      	beq.n	165bc <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0xa8>
   16566:	2b0d      	cmp	r3, #13
   16568:	d031      	beq.n	165ce <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0xba>
   1656a:	e054      	b.n	16616 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x102>
   1656c:	2b50      	cmp	r3, #80	; 0x50
   1656e:	d03a      	beq.n	165e6 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0xd2>
   16570:	2b50      	cmp	r3, #80	; 0x50
   16572:	dc02      	bgt.n	1657a <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x66>
   16574:	2b4c      	cmp	r3, #76	; 0x4c
   16576:	d027      	beq.n	165c8 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0xb4>
   16578:	e04d      	b.n	16616 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x102>
   1657a:	2b51      	cmp	r3, #81	; 0x51
   1657c:	d036      	beq.n	165ec <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0xd8>
   1657e:	2b52      	cmp	r3, #82	; 0x52
   16580:	d037      	beq.n	165f2 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0xde>
   16582:	e048      	b.n	16616 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x102>
   16584:	2b66      	cmp	r3, #102	; 0x66
   16586:	d043      	beq.n	16610 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0xfc>
   16588:	2b66      	cmp	r3, #102	; 0x66
   1658a:	dc06      	bgt.n	1659a <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x86>
   1658c:	2b60      	cmp	r3, #96	; 0x60
   1658e:	d039      	beq.n	16604 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0xf0>
   16590:	2b61      	cmp	r3, #97	; 0x61
   16592:	d03a      	beq.n	1660a <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0xf6>
   16594:	2b59      	cmp	r3, #89	; 0x59
   16596:	d032      	beq.n	165fe <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0xea>
   16598:	e03d      	b.n	16616 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x102>
   1659a:	2b77      	cmp	r3, #119	; 0x77
   1659c:	d01a      	beq.n	165d4 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0xc0>
   1659e:	2b77      	cmp	r3, #119	; 0x77
   165a0:	dc02      	bgt.n	165a8 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x94>
   165a2:	2b69      	cmp	r3, #105	; 0x69
   165a4:	d019      	beq.n	165da <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0xc6>
   165a6:	e036      	b.n	16616 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x102>
   165a8:	2b7a      	cmp	r3, #122	; 0x7a
   165aa:	d019      	beq.n	165e0 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0xcc>
   165ac:	2bff      	cmp	r3, #255	; 0xff
   165ae:	d132      	bne.n	16616 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x102>
    {
      case Command::kGarbage: res_type = ResponseType::kR1; break;
   165b0:	2300      	movs	r3, #0
   165b2:	930d      	str	r3, [sp, #52]	; 0x34
   165b4:	e042      	b.n	1663c <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x128>
      case Command::kReset: res_type = ResponseType::kR1; break;
   165b6:	2300      	movs	r3, #0
   165b8:	930d      	str	r3, [sp, #52]	; 0x34
   165ba:	e03f      	b.n	1663c <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x128>
      case Command::kInit: res_type = ResponseType::kR1; break;
   165bc:	2300      	movs	r3, #0
   165be:	930d      	str	r3, [sp, #52]	; 0x34
   165c0:	e03c      	b.n	1663c <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x128>
      case Command::kGetOp: res_type = ResponseType::kR7; break;
   165c2:	2307      	movs	r3, #7
   165c4:	930d      	str	r3, [sp, #52]	; 0x34
   165c6:	e039      	b.n	1663c <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x128>
      case Command::kStopTrans: res_type = ResponseType::kR1; break;
   165c8:	2300      	movs	r3, #0
   165ca:	930d      	str	r3, [sp, #52]	; 0x34
   165cc:	e036      	b.n	1663c <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x128>
      case Command::kGetStatus: res_type = ResponseType::kR2; break;
   165ce:	2302      	movs	r3, #2
   165d0:	930d      	str	r3, [sp, #52]	; 0x34
   165d2:	e033      	b.n	1663c <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x128>
      case Command::kAcBegin: res_type = ResponseType::kR1; break;
   165d4:	2300      	movs	r3, #0
   165d6:	930d      	str	r3, [sp, #52]	; 0x34
   165d8:	e030      	b.n	1663c <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x128>
      case Command::kAcInit: res_type = ResponseType::kR1; break;
   165da:	2300      	movs	r3, #0
   165dc:	930d      	str	r3, [sp, #52]	; 0x34
   165de:	e02d      	b.n	1663c <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x128>
      case Command::kGetOcr: res_type = ResponseType::kR3; break;
   165e0:	2303      	movs	r3, #3
   165e2:	930d      	str	r3, [sp, #52]	; 0x34
   165e4:	e02a      	b.n	1663c <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x128>
      case Command::kChgBlkLen: res_type = ResponseType::kR1; break;
   165e6:	2300      	movs	r3, #0
   165e8:	930d      	str	r3, [sp, #52]	; 0x34
   165ea:	e027      	b.n	1663c <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x128>
      case Command::kReadSingle: res_type = ResponseType::kR1; break;
   165ec:	2300      	movs	r3, #0
   165ee:	930d      	str	r3, [sp, #52]	; 0x34
   165f0:	e024      	b.n	1663c <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x128>
      case Command::kReadMulti: res_type = ResponseType::kR1; break;
   165f2:	2300      	movs	r3, #0
   165f4:	930d      	str	r3, [sp, #52]	; 0x34
   165f6:	e021      	b.n	1663c <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x128>
      case Command::kWriteSingle: res_type = ResponseType::kR1; break;
   165f8:	2300      	movs	r3, #0
   165fa:	930d      	str	r3, [sp, #52]	; 0x34
   165fc:	e01e      	b.n	1663c <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x128>
      case Command::kWriteMulti: res_type = ResponseType::kR1; break;
   165fe:	2300      	movs	r3, #0
   16600:	930d      	str	r3, [sp, #52]	; 0x34
   16602:	e01b      	b.n	1663c <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x128>
      case Command::kDelFrom: res_type = ResponseType::kR1; break;
   16604:	2300      	movs	r3, #0
   16606:	930d      	str	r3, [sp, #52]	; 0x34
   16608:	e018      	b.n	1663c <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x128>
      case Command::kDelTo: res_type = ResponseType::kR1; break;
   1660a:	2300      	movs	r3, #0
   1660c:	930d      	str	r3, [sp, #52]	; 0x34
   1660e:	e015      	b.n	1663c <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x128>
      case Command::kDel: res_type = ResponseType::kR1b; break;
   16610:	2301      	movs	r3, #1
   16612:	930d      	str	r3, [sp, #52]	; 0x34
   16614:	e012      	b.n	1663c <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x128>
      default:
        LOG_ERROR("Unknown response type. Aborting!");
   16616:	f240 33f3 	movw	r3, #1011	; 0x3f3
   1661a:	4a05      	ldr	r2, [pc, #20]	; (16630 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x11c>)
   1661c:	4905      	ldr	r1, [pc, #20]	; (16634 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x120>)
   1661e:	4806      	ldr	r0, [pc, #24]	; (16638 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x124>)
   16620:	f7fd ff60 	bl	144e4 <printf>
        return -1;
   16624:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   16628:	e1b1      	b.n	1698e <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x47a>
   1662a:	bf00      	nop
   1662c:	00016515 	.word	0x00016515
   16630:	000192d0 	.word	0x000192d0
   16634:	00018fcc 	.word	0x00018fcc
   16638:	00018b04 	.word	0x00018b04
    // algorithm
    uint8_t msg[5] = { static_cast<uint8_t>(sdc),
                       static_cast<uint8_t>(arg >> 24),
                       static_cast<uint8_t>(arg >> 16),
                       static_cast<uint8_t>(arg >> 8),
                       static_cast<uint8_t>(arg >> 0) };
   1663c:	9b02      	ldr	r3, [sp, #8]
   1663e:	b2db      	uxtb	r3, r3
   16640:	f88d 3010 	strb.w	r3, [sp, #16]
                       static_cast<uint8_t>(arg >> 24),
   16644:	9b01      	ldr	r3, [sp, #4]
   16646:	0e1b      	lsrs	r3, r3, #24
                       static_cast<uint8_t>(arg >> 0) };
   16648:	b2db      	uxtb	r3, r3
   1664a:	f88d 3011 	strb.w	r3, [sp, #17]
                       static_cast<uint8_t>(arg >> 16),
   1664e:	9b01      	ldr	r3, [sp, #4]
   16650:	0c1b      	lsrs	r3, r3, #16
                       static_cast<uint8_t>(arg >> 0) };
   16652:	b2db      	uxtb	r3, r3
   16654:	f88d 3012 	strb.w	r3, [sp, #18]
                       static_cast<uint8_t>(arg >> 8),
   16658:	9b01      	ldr	r3, [sp, #4]
   1665a:	0a1b      	lsrs	r3, r3, #8
                       static_cast<uint8_t>(arg >> 0) };
   1665c:	b2db      	uxtb	r3, r3
   1665e:	f88d 3013 	strb.w	r3, [sp, #19]
   16662:	9b01      	ldr	r3, [sp, #4]
   16664:	b2db      	uxtb	r3, r3
   16666:	f88d 3014 	strb.w	r3, [sp, #20]

    crc = GetCrc7(msg, sizeof(msg));
   1666a:	9b03      	ldr	r3, [sp, #12]
   1666c:	681b      	ldr	r3, [r3, #0]
   1666e:	331c      	adds	r3, #28
   16670:	681b      	ldr	r3, [r3, #0]
   16672:	a904      	add	r1, sp, #16
   16674:	2205      	movs	r2, #5
   16676:	9803      	ldr	r0, [sp, #12]
   16678:	4798      	blx	r3
   1667a:	4603      	mov	r3, r0
   1667c:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
    if (sdc == Command::kGarbage)
   16680:	9b02      	ldr	r3, [sp, #8]
   16682:	2bff      	cmp	r3, #255	; 0xff
   16684:	d102      	bne.n	1668c <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x178>
    {
      crc = 0xFF;
   16686:	23ff      	movs	r3, #255	; 0xff
   16688:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
    }

    // Select the SD Card
    chip_select_->SetLow();
   1668c:	9b03      	ldr	r3, [sp, #12]
   1668e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   16690:	9b03      	ldr	r3, [sp, #12]
   16692:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   16694:	681b      	ldr	r3, [r3, #0]
   16696:	3310      	adds	r3, #16
   16698:	681b      	ldr	r3, [r3, #0]
   1669a:	4610      	mov	r0, r2
   1669c:	4798      	blx	r3
    chip_select_external_->SetLow();
   1669e:	9b03      	ldr	r3, [sp, #12]
   166a0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
   166a2:	9b03      	ldr	r3, [sp, #12]
   166a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   166a6:	681b      	ldr	r3, [r3, #0]
   166a8:	3310      	adds	r3, #16
   166aa:	681b      	ldr	r3, [r3, #0]
   166ac:	4610      	mov	r0, r2
   166ae:	4798      	blx	r3

    // If desired, wait a bit before talking
    if (delay > 0)
   166b0:	9b16      	ldr	r3, [sp, #88]	; 0x58
   166b2:	2b00      	cmp	r3, #0
   166b4:	d007      	beq.n	166c6 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x1b2>
    {
      Delay(delay);
   166b6:	9b16      	ldr	r3, [sp, #88]	; 0x58
   166b8:	461a      	mov	r2, r3
   166ba:	f04f 0300 	mov.w	r3, #0
   166be:	4610      	mov	r0, r2
   166c0:	4619      	mov	r1, r3
   166c2:	f7fa f89f 	bl	10804 <Delay(unsigned long long)>
    }

    // Send the desired command frame to the SD card board
    // Begin by transfering the command byte
    ssp_interface_->Transfer(static_cast<uint16_t>(sdc));
   166c6:	9b03      	ldr	r3, [sp, #12]
   166c8:	685a      	ldr	r2, [r3, #4]
   166ca:	9b03      	ldr	r3, [sp, #12]
   166cc:	685b      	ldr	r3, [r3, #4]
   166ce:	681b      	ldr	r3, [r3, #0]
   166d0:	3308      	adds	r3, #8
   166d2:	681b      	ldr	r3, [r3, #0]
   166d4:	9902      	ldr	r1, [sp, #8]
   166d6:	b289      	uxth	r1, r1
   166d8:	4610      	mov	r0, r2
   166da:	4798      	blx	r3
    // Send arg byte [31:24]
    ssp_interface_->Transfer(static_cast<uint16_t>(arg >> 24) & 0xFF);
   166dc:	9b03      	ldr	r3, [sp, #12]
   166de:	6858      	ldr	r0, [r3, #4]
   166e0:	9b03      	ldr	r3, [sp, #12]
   166e2:	685b      	ldr	r3, [r3, #4]
   166e4:	681b      	ldr	r3, [r3, #0]
   166e6:	3308      	adds	r3, #8
   166e8:	681b      	ldr	r3, [r3, #0]
   166ea:	9a01      	ldr	r2, [sp, #4]
   166ec:	0e12      	lsrs	r2, r2, #24
   166ee:	b292      	uxth	r2, r2
   166f0:	b2d2      	uxtb	r2, r2
   166f2:	b292      	uxth	r2, r2
   166f4:	4611      	mov	r1, r2
   166f6:	4798      	blx	r3
    // Send arg byte [23:16]
    ssp_interface_->Transfer(static_cast<uint16_t>(arg >> 16) & 0xFF);
   166f8:	9b03      	ldr	r3, [sp, #12]
   166fa:	6858      	ldr	r0, [r3, #4]
   166fc:	9b03      	ldr	r3, [sp, #12]
   166fe:	685b      	ldr	r3, [r3, #4]
   16700:	681b      	ldr	r3, [r3, #0]
   16702:	3308      	adds	r3, #8
   16704:	681b      	ldr	r3, [r3, #0]
   16706:	9a01      	ldr	r2, [sp, #4]
   16708:	0c12      	lsrs	r2, r2, #16
   1670a:	b292      	uxth	r2, r2
   1670c:	b2d2      	uxtb	r2, r2
   1670e:	b292      	uxth	r2, r2
   16710:	4611      	mov	r1, r2
   16712:	4798      	blx	r3
    // Send arg byte [15:8]
    ssp_interface_->Transfer(static_cast<uint16_t>(arg >> 8) & 0xFF);
   16714:	9b03      	ldr	r3, [sp, #12]
   16716:	6858      	ldr	r0, [r3, #4]
   16718:	9b03      	ldr	r3, [sp, #12]
   1671a:	685b      	ldr	r3, [r3, #4]
   1671c:	681b      	ldr	r3, [r3, #0]
   1671e:	3308      	adds	r3, #8
   16720:	681b      	ldr	r3, [r3, #0]
   16722:	9a01      	ldr	r2, [sp, #4]
   16724:	0a12      	lsrs	r2, r2, #8
   16726:	b292      	uxth	r2, r2
   16728:	b2d2      	uxtb	r2, r2
   1672a:	b292      	uxth	r2, r2
   1672c:	4611      	mov	r1, r2
   1672e:	4798      	blx	r3
    // Send arg byte [7:0]
    ssp_interface_->Transfer(static_cast<uint16_t>(arg >> 0) & 0xFF);
   16730:	9b03      	ldr	r3, [sp, #12]
   16732:	685a      	ldr	r2, [r3, #4]
   16734:	9b03      	ldr	r3, [sp, #12]
   16736:	685b      	ldr	r3, [r3, #4]
   16738:	681b      	ldr	r3, [r3, #0]
   1673a:	3308      	adds	r3, #8
   1673c:	681b      	ldr	r3, [r3, #0]
   1673e:	9901      	ldr	r1, [sp, #4]
   16740:	b289      	uxth	r1, r1
   16742:	b2c9      	uxtb	r1, r1
   16744:	b289      	uxth	r1, r1
   16746:	4610      	mov	r0, r2
   16748:	4798      	blx	r3
    // Send 7-bit CRC and LSB stop addr (as b1)
    ssp_interface_->Transfer(static_cast<uint16_t>(crc << 1) | 0x01);
   1674a:	9b03      	ldr	r3, [sp, #12]
   1674c:	6858      	ldr	r0, [r3, #4]
   1674e:	9b03      	ldr	r3, [sp, #12]
   16750:	685b      	ldr	r3, [r3, #4]
   16752:	681b      	ldr	r3, [r3, #0]
   16754:	3308      	adds	r3, #8
   16756:	681b      	ldr	r3, [r3, #0]
   16758:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
   1675c:	b292      	uxth	r2, r2
   1675e:	0052      	lsls	r2, r2, #1
   16760:	b292      	uxth	r2, r2
   16762:	f042 0201 	orr.w	r2, r2, #1
   16766:	b292      	uxth	r2, r2
   16768:	4611      	mov	r1, r2
   1676a:	4798      	blx	r3

    // Write garbage while waiting for a response
    // Send at least 1 byte of garbage before checking for a response
    temp_byte = static_cast<uint8_t>(ssp_interface_->Transfer(0xFF));
   1676c:	9b03      	ldr	r3, [sp, #12]
   1676e:	685a      	ldr	r2, [r3, #4]
   16770:	9b03      	ldr	r3, [sp, #12]
   16772:	685b      	ldr	r3, [r3, #4]
   16774:	681b      	ldr	r3, [r3, #0]
   16776:	3308      	adds	r3, #8
   16778:	681b      	ldr	r3, [r3, #0]
   1677a:	21ff      	movs	r1, #255	; 0xff
   1677c:	4610      	mov	r0, r2
   1677e:	4798      	blx	r3
   16780:	4603      	mov	r3, r0
   16782:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
    while (tries++ < kBusTimeout)
   16786:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   1678a:	1c5a      	adds	r2, r3, #1
   1678c:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
   16790:	2bf9      	cmp	r3, #249	; 0xf9
   16792:	bf94      	ite	ls
   16794:	2301      	movls	r3, #1
   16796:	2300      	movhi	r3, #0
   16798:	b2db      	uxtb	r3, r3
   1679a:	2b00      	cmp	r3, #0
   1679c:	d027      	beq.n	167ee <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x2da>
    {
      temp_byte = static_cast<uint8_t>(ssp_interface_->Transfer(0xFF));
   1679e:	9b03      	ldr	r3, [sp, #12]
   167a0:	685a      	ldr	r2, [r3, #4]
   167a2:	9b03      	ldr	r3, [sp, #12]
   167a4:	685b      	ldr	r3, [r3, #4]
   167a6:	681b      	ldr	r3, [r3, #0]
   167a8:	3308      	adds	r3, #8
   167aa:	681b      	ldr	r3, [r3, #0]
   167ac:	21ff      	movs	r1, #255	; 0xff
   167ae:	4610      	mov	r0, r2
   167b0:	4798      	blx	r3
   167b2:	4603      	mov	r3, r0
   167b4:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
      if (temp_byte != 0xFF)
   167b8:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
   167bc:	2bff      	cmp	r3, #255	; 0xff
   167be:	d00f      	beq.n	167e0 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x2cc>
      {
        // Determine the offset, since the first byte of a
        // response will always be 0.
        while (temp_byte & (0x80 >> bit_offset))
   167c0:	f89d 202f 	ldrb.w	r2, [sp, #47]	; 0x2f
   167c4:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
   167c8:	2180      	movs	r1, #128	; 0x80
   167ca:	fa41 f303 	asr.w	r3, r1, r3
   167ce:	4013      	ands	r3, r2
   167d0:	2b00      	cmp	r3, #0
   167d2:	d00b      	beq.n	167ec <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x2d8>
        {
          bit_offset++;
   167d4:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
   167d8:	3301      	adds	r3, #1
   167da:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
        while (temp_byte & (0x80 >> bit_offset))
   167de:	e7ef      	b.n	167c0 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x2ac>
        }
        break;
      }
      tries++;
   167e0:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   167e4:	3301      	adds	r3, #1
   167e6:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
    while (tries++ < kBusTimeout)
   167ea:	e7cc      	b.n	16786 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x272>
        break;
   167ec:	bf00      	nop
    }

    // Determine response length (in bytes) based on response type
    switch (res_type)
   167ee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   167f0:	2b07      	cmp	r3, #7
   167f2:	d827      	bhi.n	16844 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x330>
   167f4:	a201      	add	r2, pc, #4	; (adr r2, 167fc <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x2e8>)
   167f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   167fa:	bf00      	nop
   167fc:	0001681d 	.word	0x0001681d
   16800:	00016825 	.word	0x00016825
   16804:	0001682d 	.word	0x0001682d
   16808:	00016835 	.word	0x00016835
   1680c:	00016845 	.word	0x00016845
   16810:	00016845 	.word	0x00016845
   16814:	00016845 	.word	0x00016845
   16818:	0001683d 	.word	0x0001683d
    {
      case ResponseType::kR1: res_len = 1; break;
   1681c:	2301      	movs	r3, #1
   1681e:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
   16822:	e019      	b.n	16858 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x344>
      case ResponseType::kR1b: res_len = 1; break;
   16824:	2301      	movs	r3, #1
   16826:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
   1682a:	e015      	b.n	16858 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x344>
      case ResponseType::kR2: res_len = 2; break;
   1682c:	2302      	movs	r3, #2
   1682e:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
   16832:	e011      	b.n	16858 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x344>
      case ResponseType::kR3: res_len = 5; break;
   16834:	2305      	movs	r3, #5
   16836:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
   1683a:	e00d      	b.n	16858 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x344>
      case ResponseType::kR7: res_len = 5; break;
   1683c:	2305      	movs	r3, #5
   1683e:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
   16842:	e009      	b.n	16858 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x344>
      default:
        LOG_ERROR("Response unsupported in SPI mode. Aborting!");
   16844:	f240 433a 	movw	r3, #1082	; 0x43a
   16848:	4a56      	ldr	r2, [pc, #344]	; (169a4 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x490>)
   1684a:	4957      	ldr	r1, [pc, #348]	; (169a8 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x494>)
   1684c:	4857      	ldr	r0, [pc, #348]	; (169ac <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x498>)
   1684e:	f7fd fe49 	bl	144e4 <printf>
        return -1;
   16852:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   16856:	e09a      	b.n	1698e <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x47a>
        break;
    }

    // Acquire the response
    uint64_t temp_response = 0;
   16858:	f04f 0200 	mov.w	r2, #0
   1685c:	f04f 0300 	mov.w	r3, #0
   16860:	e9cd 2308 	strd	r2, r3, [sp, #32]
    // Read an extra 8 bits since the response was offset
    uint8_t bytes_to_read =
   16864:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
   16868:	2b00      	cmp	r3, #0
   1686a:	d004      	beq.n	16876 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x362>
   1686c:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
   16870:	3301      	adds	r3, #1
   16872:	b2db      	uxtb	r3, r3
   16874:	e001      	b.n	1687a <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x366>
   16876:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
   1687a:	f88d 301f 	strb.w	r3, [sp, #31]
        static_cast<uint8_t>((bit_offset > 0) ? res_len + 1 : res_len);
    while (bytes_to_read-- > 0)
   1687e:	f89d 301f 	ldrb.w	r3, [sp, #31]
   16882:	1e5a      	subs	r2, r3, #1
   16884:	f88d 201f 	strb.w	r2, [sp, #31]
   16888:	2b00      	cmp	r3, #0
   1688a:	bf14      	ite	ne
   1688c:	2301      	movne	r3, #1
   1688e:	2300      	moveq	r3, #0
   16890:	b2db      	uxtb	r3, r3
   16892:	2b00      	cmp	r3, #0
   16894:	d025      	beq.n	168e2 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x3ce>
    {
      // Make space for the next byte
      temp_response = temp_response << 8;
   16896:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   1689a:	f04f 0200 	mov.w	r2, #0
   1689e:	f04f 0300 	mov.w	r3, #0
   168a2:	020b      	lsls	r3, r1, #8
   168a4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
   168a8:	0202      	lsls	r2, r0, #8
   168aa:	e9cd 2308 	strd	r2, r3, [sp, #32]
      temp_response |= temp_byte;
   168ae:	f89d b02f 	ldrb.w	fp, [sp, #47]	; 0x2f
   168b2:	f04f 0c00 	mov.w	ip, #0
   168b6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   168ba:	ea4b 0200 	orr.w	r2, fp, r0
   168be:	ea4c 0301 	orr.w	r3, ip, r1
   168c2:	e9cd 2308 	strd	r2, r3, [sp, #32]
      temp_byte = static_cast<uint8_t>(ssp_interface_->Transfer(0xFF));
   168c6:	9b03      	ldr	r3, [sp, #12]
   168c8:	685a      	ldr	r2, [r3, #4]
   168ca:	9b03      	ldr	r3, [sp, #12]
   168cc:	685b      	ldr	r3, [r3, #4]
   168ce:	681b      	ldr	r3, [r3, #0]
   168d0:	3308      	adds	r3, #8
   168d2:	681b      	ldr	r3, [r3, #0]
   168d4:	21ff      	movs	r1, #255	; 0xff
   168d6:	4610      	mov	r0, r2
   168d8:	4798      	blx	r3
   168da:	4603      	mov	r3, r0
   168dc:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
    while (bytes_to_read-- > 0)
   168e0:	e7cd      	b.n	1687e <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x36a>
    }
    // Compensate for the bit offset
    temp_response = temp_response >> bit_offset;
   168e2:	f89d 1030 	ldrb.w	r1, [sp, #48]	; 0x30
   168e6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   168ea:	f1c1 0c20 	rsb	ip, r1, #32
   168ee:	f1a1 0020 	sub.w	r0, r1, #32
   168f2:	fa22 f401 	lsr.w	r4, r2, r1
   168f6:	fa03 fc0c 	lsl.w	ip, r3, ip
   168fa:	ea44 040c 	orr.w	r4, r4, ip
   168fe:	fa23 f000 	lsr.w	r0, r3, r0
   16902:	4304      	orrs	r4, r0
   16904:	fa23 f501 	lsr.w	r5, r3, r1
   16908:	e9cd 4508 	strd	r4, r5, [sp, #32]

    // Only write to the response buffer if it is provided
    if (response_buffer != nullptr)
   1690c:	9b00      	ldr	r3, [sp, #0]
   1690e:	2b00      	cmp	r3, #0
   16910:	d025      	beq.n	1695e <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x44a>
    {
      for (int i = 0; i < res_len; i++)
   16912:	2300      	movs	r3, #0
   16914:	9306      	str	r3, [sp, #24]
   16916:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
   1691a:	9a06      	ldr	r2, [sp, #24]
   1691c:	429a      	cmp	r2, r3
   1691e:	da1e      	bge.n	1695e <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x44a>
      {
        response_buffer[i] =
            static_cast<uint8_t>(temp_response >> 8 * (res_len - 1 - i));
   16920:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
   16924:	1e5a      	subs	r2, r3, #1
   16926:	9b06      	ldr	r3, [sp, #24]
   16928:	1ad3      	subs	r3, r2, r3
   1692a:	00da      	lsls	r2, r3, #3
   1692c:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   16930:	f1c2 0020 	rsb	r0, r2, #32
   16934:	f1a2 0120 	sub.w	r1, r2, #32
   16938:	fa23 f602 	lsr.w	r6, r3, r2
   1693c:	fa04 f000 	lsl.w	r0, r4, r0
   16940:	4306      	orrs	r6, r0
   16942:	fa24 f101 	lsr.w	r1, r4, r1
   16946:	430e      	orrs	r6, r1
   16948:	fa24 f702 	lsr.w	r7, r4, r2
        response_buffer[i] =
   1694c:	9b06      	ldr	r3, [sp, #24]
   1694e:	9a00      	ldr	r2, [sp, #0]
   16950:	4413      	add	r3, r2
   16952:	b2f2      	uxtb	r2, r6
   16954:	701a      	strb	r2, [r3, #0]
      for (int i = 0; i < res_len; i++)
   16956:	9b06      	ldr	r3, [sp, #24]
   16958:	3301      	adds	r3, #1
   1695a:	9306      	str	r3, [sp, #24]
   1695c:	e7db      	b.n	16916 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x402>
      }
    }

    // Only end the transaction if keep_alive isn't requested
    if (keep_alive == KeepAlive::kNo)
   1695e:	f89d 305c 	ldrb.w	r3, [sp, #92]	; 0x5c
   16962:	2b00      	cmp	r3, #0
   16964:	d111      	bne.n	1698a <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x476>
    {
      // Deselect the SPI comm board
      chip_select_->SetHigh();
   16966:	9b03      	ldr	r3, [sp, #12]
   16968:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1696a:	9b03      	ldr	r3, [sp, #12]
   1696c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1696e:	681b      	ldr	r3, [r3, #0]
   16970:	330c      	adds	r3, #12
   16972:	681b      	ldr	r3, [r3, #0]
   16974:	4610      	mov	r0, r2
   16976:	4798      	blx	r3
      chip_select_external_->SetHigh();
   16978:	9b03      	ldr	r3, [sp, #12]
   1697a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
   1697c:	9b03      	ldr	r3, [sp, #12]
   1697e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   16980:	681b      	ldr	r3, [r3, #0]
   16982:	330c      	adds	r3, #12
   16984:	681b      	ldr	r3, [r3, #0]
   16986:	4610      	mov	r0, r2
   16988:	4798      	blx	r3
    }
    return res_len;
   1698a:	f89d 4033 	ldrb.w	r4, [sp, #51]	; 0x33
   1698e:	4643      	mov	r3, r8
   16990:	4619      	mov	r1, r3
   16992:	4807      	ldr	r0, [pc, #28]	; (169b0 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x49c>)
   16994:	f7fc fb5e 	bl	13054 <__cyg_profile_func_exit>
   16998:	4623      	mov	r3, r4
  }
   1699a:	4618      	mov	r0, r3
   1699c:	b00f      	add	sp, #60	; 0x3c
   1699e:	e8bd 89f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, fp, pc}
   169a2:	bf00      	nop
   169a4:	000192d0 	.word	0x000192d0
   169a8:	00018fd4 	.word	0x00018fd4
   169ac:	00018b60 	.word	0x00018b60
   169b0:	00016515 	.word	0x00016515

000169b4 <Sd::Crc7Add(unsigned char, unsigned char)>:

  // Adds a message byte to the current CRC-7 to get a the new CRC-7
  uint8_t Crc7Add(uint8_t crc, uint8_t message_byte) override
   169b4:	b530      	push	{r4, r5, lr}
   169b6:	b083      	sub	sp, #12
   169b8:	4675      	mov	r5, lr
   169ba:	9001      	str	r0, [sp, #4]
   169bc:	460b      	mov	r3, r1
   169be:	f88d 3003 	strb.w	r3, [sp, #3]
   169c2:	4613      	mov	r3, r2
   169c4:	f88d 3002 	strb.w	r3, [sp, #2]
   169c8:	462b      	mov	r3, r5
   169ca:	4619      	mov	r1, r3
   169cc:	4809      	ldr	r0, [pc, #36]	; (169f4 <Sd::Crc7Add(unsigned char, unsigned char)+0x40>)
   169ce:	f7fc fb2d 	bl	1302c <__cyg_profile_func_enter>
  {
    return kCrcTable8.crc_table[(crc << 1) ^ message_byte];
   169d2:	f89d 3003 	ldrb.w	r3, [sp, #3]
   169d6:	005a      	lsls	r2, r3, #1
   169d8:	f89d 3002 	ldrb.w	r3, [sp, #2]
   169dc:	4053      	eors	r3, r2
   169de:	4a06      	ldr	r2, [pc, #24]	; (169f8 <Sd::Crc7Add(unsigned char, unsigned char)+0x44>)
   169e0:	5cd4      	ldrb	r4, [r2, r3]
   169e2:	462b      	mov	r3, r5
   169e4:	4619      	mov	r1, r3
   169e6:	4803      	ldr	r0, [pc, #12]	; (169f4 <Sd::Crc7Add(unsigned char, unsigned char)+0x40>)
   169e8:	f7fc fb34 	bl	13054 <__cyg_profile_func_exit>
   169ec:	4623      	mov	r3, r4
  }
   169ee:	4618      	mov	r0, r3
   169f0:	b003      	add	sp, #12
   169f2:	bd30      	pop	{r4, r5, pc}
   169f4:	000169b5 	.word	0x000169b5
   169f8:	00018c44 	.word	0x00018c44

000169fc <Sd::GetCrc7(unsigned char*, unsigned char)>:

  // Returns the CRC-7 for a message of "length" bytes
  uint8_t GetCrc7(uint8_t * message, uint8_t length) override
   169fc:	b530      	push	{r4, r5, lr}
   169fe:	b087      	sub	sp, #28
   16a00:	4675      	mov	r5, lr
   16a02:	9003      	str	r0, [sp, #12]
   16a04:	9102      	str	r1, [sp, #8]
   16a06:	4613      	mov	r3, r2
   16a08:	f88d 3007 	strb.w	r3, [sp, #7]
   16a0c:	462b      	mov	r3, r5
   16a0e:	4619      	mov	r1, r3
   16a10:	4815      	ldr	r0, [pc, #84]	; (16a68 <Sd::GetCrc7(unsigned char*, unsigned char)+0x6c>)
   16a12:	f7fc fb0b 	bl	1302c <__cyg_profile_func_enter>
  {
    uint8_t crc = 0;
   16a16:	2300      	movs	r3, #0
   16a18:	f88d 3017 	strb.w	r3, [sp, #23]
    for (int i = 0; i < length; i++)
   16a1c:	2300      	movs	r3, #0
   16a1e:	9304      	str	r3, [sp, #16]
   16a20:	f89d 3007 	ldrb.w	r3, [sp, #7]
   16a24:	9a04      	ldr	r2, [sp, #16]
   16a26:	429a      	cmp	r2, r3
   16a28:	da12      	bge.n	16a50 <Sd::GetCrc7(unsigned char*, unsigned char)+0x54>
    {
      crc = Crc7Add(crc, message[i]);
   16a2a:	9b03      	ldr	r3, [sp, #12]
   16a2c:	681b      	ldr	r3, [r3, #0]
   16a2e:	3318      	adds	r3, #24
   16a30:	681b      	ldr	r3, [r3, #0]
   16a32:	9a04      	ldr	r2, [sp, #16]
   16a34:	9902      	ldr	r1, [sp, #8]
   16a36:	440a      	add	r2, r1
   16a38:	7812      	ldrb	r2, [r2, #0]
   16a3a:	f89d 1017 	ldrb.w	r1, [sp, #23]
   16a3e:	9803      	ldr	r0, [sp, #12]
   16a40:	4798      	blx	r3
   16a42:	4603      	mov	r3, r0
   16a44:	f88d 3017 	strb.w	r3, [sp, #23]
    for (int i = 0; i < length; i++)
   16a48:	9b04      	ldr	r3, [sp, #16]
   16a4a:	3301      	adds	r3, #1
   16a4c:	9304      	str	r3, [sp, #16]
   16a4e:	e7e7      	b.n	16a20 <Sd::GetCrc7(unsigned char*, unsigned char)+0x24>
    }
    return crc;
   16a50:	f89d 4017 	ldrb.w	r4, [sp, #23]
   16a54:	462b      	mov	r3, r5
   16a56:	4619      	mov	r1, r3
   16a58:	4803      	ldr	r0, [pc, #12]	; (16a68 <Sd::GetCrc7(unsigned char*, unsigned char)+0x6c>)
   16a5a:	f7fc fafb 	bl	13054 <__cyg_profile_func_exit>
   16a5e:	4623      	mov	r3, r4
  }
   16a60:	4618      	mov	r0, r3
   16a62:	b007      	add	sp, #28
   16a64:	bd30      	pop	{r4, r5, pc}
   16a66:	bf00      	nop
   16a68:	000169fd 	.word	0x000169fd

00016a6c <Sd::GetCrc16(unsigned char*, unsigned short)>:

  // Returns CCITT CRC-16 for a message of "length" bytes
  uint16_t GetCrc16(uint8_t * message, uint16_t length) override
   16a6c:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
   16a70:	b08c      	sub	sp, #48	; 0x30
   16a72:	4677      	mov	r7, lr
   16a74:	9003      	str	r0, [sp, #12]
   16a76:	9102      	str	r1, [sp, #8]
   16a78:	4613      	mov	r3, r2
   16a7a:	f8ad 3006 	strh.w	r3, [sp, #6]
   16a7e:	463b      	mov	r3, r7
   16a80:	4619      	mov	r1, r3
   16a82:	4837      	ldr	r0, [pc, #220]	; (16b60 <Sd::GetCrc16(unsigned char*, unsigned short)+0xf4>)
   16a84:	f7fc fad2 	bl	1302c <__cyg_profile_func_enter>
  {
    uint64_t crc = 0x0000;
   16a88:	f04f 0300 	mov.w	r3, #0
   16a8c:	f04f 0400 	mov.w	r4, #0
   16a90:	e9cd 340a 	strd	r3, r4, [sp, #40]	; 0x28
    uint64_t temp;
    uint64_t final_value = 0;
   16a94:	f04f 0300 	mov.w	r3, #0
   16a98:	f04f 0400 	mov.w	r4, #0
   16a9c:	e9cd 3406 	strd	r3, r4, [sp, #24]

    for (uint64_t count = 0; count < length; ++count)
   16aa0:	f04f 0300 	mov.w	r3, #0
   16aa4:	f04f 0400 	mov.w	r4, #0
   16aa8:	e9cd 3408 	strd	r3, r4, [sp, #32]
   16aac:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   16ab0:	f04f 0400 	mov.w	r4, #0
   16ab4:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
   16ab8:	42a2      	cmp	r2, r4
   16aba:	bf08      	it	eq
   16abc:	4299      	cmpeq	r1, r3
   16abe:	d23f      	bcs.n	16b40 <Sd::GetCrc16(unsigned char*, unsigned short)+0xd4>
    {
      temp = (*message++ ^ (crc >> 8)) & 0xff;
   16ac0:	9b02      	ldr	r3, [sp, #8]
   16ac2:	1c5a      	adds	r2, r3, #1
   16ac4:	9202      	str	r2, [sp, #8]
   16ac6:	781b      	ldrb	r3, [r3, #0]
   16ac8:	b2dd      	uxtb	r5, r3
   16aca:	f04f 0600 	mov.w	r6, #0
   16ace:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
   16ad2:	f04f 0300 	mov.w	r3, #0
   16ad6:	f04f 0400 	mov.w	r4, #0
   16ada:	0a0b      	lsrs	r3, r1, #8
   16adc:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
   16ae0:	0a14      	lsrs	r4, r2, #8
   16ae2:	ea83 0b05 	eor.w	fp, r3, r5
   16ae6:	ea84 0c06 	eor.w	ip, r4, r6
   16aea:	f04f 01ff 	mov.w	r1, #255	; 0xff
   16aee:	f04f 0200 	mov.w	r2, #0
   16af2:	ea0b 0301 	and.w	r3, fp, r1
   16af6:	ea0c 0402 	and.w	r4, ip, r2
   16afa:	e9cd 3404 	strd	r3, r4, [sp, #16]
      crc  = kCrcTable16.crc_table[temp] ^ (crc << 8);
   16afe:	4a19      	ldr	r2, [pc, #100]	; (16b64 <Sd::GetCrc16(unsigned char*, unsigned short)+0xf8>)
   16b00:	9b04      	ldr	r3, [sp, #16]
   16b02:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
   16b06:	b29d      	uxth	r5, r3
   16b08:	f04f 0600 	mov.w	r6, #0
   16b0c:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
   16b10:	f04f 0b00 	mov.w	fp, #0
   16b14:	f04f 0c00 	mov.w	ip, #0
   16b18:	ea4f 2c02 	mov.w	ip, r2, lsl #8
   16b1c:	ea4c 6c11 	orr.w	ip, ip, r1, lsr #24
   16b20:	ea4f 2b01 	mov.w	fp, r1, lsl #8
   16b24:	ea8b 0305 	eor.w	r3, fp, r5
   16b28:	ea8c 0406 	eor.w	r4, ip, r6
   16b2c:	e9cd 340a 	strd	r3, r4, [sp, #40]	; 0x28
    for (uint64_t count = 0; count < length; ++count)
   16b30:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   16b34:	1c59      	adds	r1, r3, #1
   16b36:	f144 0200 	adc.w	r2, r4, #0
   16b3a:	e9cd 1208 	strd	r1, r2, [sp, #32]
   16b3e:	e7b5      	b.n	16aac <Sd::GetCrc16(unsigned char*, unsigned short)+0x40>
    }

    return static_cast<uint16_t>(crc ^ final_value);
   16b40:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
   16b44:	f8bd 3018 	ldrh.w	r3, [sp, #24]
   16b48:	4053      	eors	r3, r2
   16b4a:	b29c      	uxth	r4, r3
   16b4c:	463b      	mov	r3, r7
   16b4e:	4619      	mov	r1, r3
   16b50:	4803      	ldr	r0, [pc, #12]	; (16b60 <Sd::GetCrc16(unsigned char*, unsigned short)+0xf4>)
   16b52:	f7fc fa7f 	bl	13054 <__cyg_profile_func_exit>
   16b56:	4623      	mov	r3, r4
  }
   16b58:	4618      	mov	r0, r3
   16b5a:	b00c      	add	sp, #48	; 0x30
   16b5c:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
   16b60:	00016a6d 	.word	0x00016a6d
   16b64:	00018d44 	.word	0x00018d44

00016b68 <unsigned long bit::Set<unsigned long>(unsigned long, unsigned long)>:
constexpr T Set(T target, uint32_t position)
   16b68:	b530      	push	{r4, r5, lr}
   16b6a:	b083      	sub	sp, #12
   16b6c:	4675      	mov	r5, lr
   16b6e:	9001      	str	r0, [sp, #4]
   16b70:	9100      	str	r1, [sp, #0]
   16b72:	462b      	mov	r3, r5
   16b74:	4619      	mov	r1, r3
   16b76:	480a      	ldr	r0, [pc, #40]	; (16ba0 <unsigned long bit::Set<unsigned long>(unsigned long, unsigned long)+0x38>)
   16b78:	f7fc fa58 	bl	1302c <__cyg_profile_func_enter>
  return target | (1 << position);
   16b7c:	2201      	movs	r2, #1
   16b7e:	9b00      	ldr	r3, [sp, #0]
   16b80:	fa02 f303 	lsl.w	r3, r2, r3
   16b84:	461a      	mov	r2, r3
   16b86:	9b01      	ldr	r3, [sp, #4]
   16b88:	ea42 0403 	orr.w	r4, r2, r3
   16b8c:	462b      	mov	r3, r5
   16b8e:	4619      	mov	r1, r3
   16b90:	4803      	ldr	r0, [pc, #12]	; (16ba0 <unsigned long bit::Set<unsigned long>(unsigned long, unsigned long)+0x38>)
   16b92:	f7fc fa5f 	bl	13054 <__cyg_profile_func_exit>
   16b96:	4623      	mov	r3, r4
}
   16b98:	4618      	mov	r0, r3
   16b9a:	b003      	add	sp, #12
   16b9c:	bd30      	pop	{r4, r5, pc}
   16b9e:	bf00      	nop
   16ba0:	00016b69 	.word	0x00016b69

00016ba4 <unsigned long bit::Insert<unsigned long, unsigned char>(unsigned long, unsigned char, unsigned long, unsigned long)>:
constexpr T Insert(T target, U value, uint32_t position, uint32_t width = 1)
   16ba4:	b530      	push	{r4, r5, lr}
   16ba6:	b089      	sub	sp, #36	; 0x24
   16ba8:	4675      	mov	r5, lr
   16baa:	9003      	str	r0, [sp, #12]
   16bac:	9201      	str	r2, [sp, #4]
   16bae:	9300      	str	r3, [sp, #0]
   16bb0:	460b      	mov	r3, r1
   16bb2:	f88d 300b 	strb.w	r3, [sp, #11]
   16bb6:	462b      	mov	r3, r5
   16bb8:	4619      	mov	r1, r3
   16bba:	4816      	ldr	r0, [pc, #88]	; (16c14 <unsigned long bit::Insert<unsigned long, unsigned char>(unsigned long, unsigned char, unsigned long, unsigned long)+0x70>)
   16bbc:	f7fc fa36 	bl	1302c <__cyg_profile_func_enter>
  constexpr UnsignedT kFieldOfOnes = GenerateFieldOfOnes<T>();
   16bc0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   16bc4:	9307      	str	r3, [sp, #28]
  constexpr size_t kTargetWidth     = sizeof(T) * 8;
   16bc6:	2320      	movs	r3, #32
   16bc8:	9306      	str	r3, [sp, #24]
  UnsignedT mask   = kFieldOfOnes >> (kTargetWidth - width);
   16bca:	9b00      	ldr	r3, [sp, #0]
   16bcc:	f1c3 0320 	rsb	r3, r3, #32
   16bd0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   16bd4:	fa22 f303 	lsr.w	r3, r2, r3
   16bd8:	9305      	str	r3, [sp, #20]
  target &= ~(mask << position);
   16bda:	9a05      	ldr	r2, [sp, #20]
   16bdc:	9b01      	ldr	r3, [sp, #4]
   16bde:	fa02 f303 	lsl.w	r3, r2, r3
   16be2:	43db      	mvns	r3, r3
   16be4:	9a03      	ldr	r2, [sp, #12]
   16be6:	4013      	ands	r3, r2
   16be8:	9303      	str	r3, [sp, #12]
  target |= (value & mask) << position;
   16bea:	f89d 200b 	ldrb.w	r2, [sp, #11]
   16bee:	9b05      	ldr	r3, [sp, #20]
   16bf0:	401a      	ands	r2, r3
   16bf2:	9b01      	ldr	r3, [sp, #4]
   16bf4:	fa02 f303 	lsl.w	r3, r2, r3
   16bf8:	9a03      	ldr	r2, [sp, #12]
   16bfa:	4313      	orrs	r3, r2
   16bfc:	9303      	str	r3, [sp, #12]
  return target;
   16bfe:	9c03      	ldr	r4, [sp, #12]
   16c00:	462b      	mov	r3, r5
   16c02:	4619      	mov	r1, r3
   16c04:	4803      	ldr	r0, [pc, #12]	; (16c14 <unsigned long bit::Insert<unsigned long, unsigned char>(unsigned long, unsigned char, unsigned long, unsigned long)+0x70>)
   16c06:	f7fc fa25 	bl	13054 <__cyg_profile_func_exit>
   16c0a:	4623      	mov	r3, r4
}
   16c0c:	4618      	mov	r0, r3
   16c0e:	b009      	add	sp, #36	; 0x24
   16c10:	bd30      	pop	{r4, r5, pc}
   16c12:	bf00      	nop
   16c14:	00016ba5 	.word	0x00016ba5

00016c18 <unsigned long bit::Extract<unsigned long>(unsigned long, unsigned long, unsigned long)>:
constexpr T Extract(T target, uint32_t position, uint32_t width = 1)
   16c18:	b530      	push	{r4, r5, lr}
   16c1a:	b089      	sub	sp, #36	; 0x24
   16c1c:	4675      	mov	r5, lr
   16c1e:	9003      	str	r0, [sp, #12]
   16c20:	9102      	str	r1, [sp, #8]
   16c22:	9201      	str	r2, [sp, #4]
   16c24:	462b      	mov	r3, r5
   16c26:	4619      	mov	r1, r3
   16c28:	480f      	ldr	r0, [pc, #60]	; (16c68 <unsigned long bit::Extract<unsigned long>(unsigned long, unsigned long, unsigned long)+0x50>)
   16c2a:	f7fc f9ff 	bl	1302c <__cyg_profile_func_enter>
  constexpr UnsignedT kFieldOfOnes = GenerateFieldOfOnes<T>();
   16c2e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   16c32:	9307      	str	r3, [sp, #28]
  constexpr size_t kTargetWidth     = sizeof(T) * 8;
   16c34:	2320      	movs	r3, #32
   16c36:	9306      	str	r3, [sp, #24]
  UnsignedT mask   = kFieldOfOnes >> (kTargetWidth - width);
   16c38:	9b01      	ldr	r3, [sp, #4]
   16c3a:	f1c3 0320 	rsb	r3, r3, #32
   16c3e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   16c42:	fa22 f303 	lsr.w	r3, r2, r3
   16c46:	9305      	str	r3, [sp, #20]
  return (target >> position) & mask;
   16c48:	9a03      	ldr	r2, [sp, #12]
   16c4a:	9b02      	ldr	r3, [sp, #8]
   16c4c:	40da      	lsrs	r2, r3
   16c4e:	9b05      	ldr	r3, [sp, #20]
   16c50:	ea02 0403 	and.w	r4, r2, r3
   16c54:	462b      	mov	r3, r5
   16c56:	4619      	mov	r1, r3
   16c58:	4803      	ldr	r0, [pc, #12]	; (16c68 <unsigned long bit::Extract<unsigned long>(unsigned long, unsigned long, unsigned long)+0x50>)
   16c5a:	f7fc f9fb 	bl	13054 <__cyg_profile_func_exit>
   16c5e:	4623      	mov	r3, r4
}
   16c60:	4618      	mov	r0, r3
   16c62:	b009      	add	sp, #36	; 0x24
   16c64:	bd30      	pop	{r4, r5, pc}
   16c66:	bf00      	nop
   16c68:	00016c19 	.word	0x00016c19

00016c6c <unsigned long bit::Insert<unsigned long, bool>(unsigned long, bool, unsigned long, unsigned long)>:
constexpr T Insert(T target, U value, uint32_t position, uint32_t width = 1)
   16c6c:	b530      	push	{r4, r5, lr}
   16c6e:	b089      	sub	sp, #36	; 0x24
   16c70:	4675      	mov	r5, lr
   16c72:	9003      	str	r0, [sp, #12]
   16c74:	9201      	str	r2, [sp, #4]
   16c76:	9300      	str	r3, [sp, #0]
   16c78:	460b      	mov	r3, r1
   16c7a:	f88d 300b 	strb.w	r3, [sp, #11]
   16c7e:	462b      	mov	r3, r5
   16c80:	4619      	mov	r1, r3
   16c82:	4816      	ldr	r0, [pc, #88]	; (16cdc <unsigned long bit::Insert<unsigned long, bool>(unsigned long, bool, unsigned long, unsigned long)+0x70>)
   16c84:	f7fc f9d2 	bl	1302c <__cyg_profile_func_enter>
  constexpr UnsignedT kFieldOfOnes = GenerateFieldOfOnes<T>();
   16c88:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   16c8c:	9307      	str	r3, [sp, #28]
  constexpr size_t kTargetWidth     = sizeof(T) * 8;
   16c8e:	2320      	movs	r3, #32
   16c90:	9306      	str	r3, [sp, #24]
  UnsignedT mask   = kFieldOfOnes >> (kTargetWidth - width);
   16c92:	9b00      	ldr	r3, [sp, #0]
   16c94:	f1c3 0320 	rsb	r3, r3, #32
   16c98:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   16c9c:	fa22 f303 	lsr.w	r3, r2, r3
   16ca0:	9305      	str	r3, [sp, #20]
  target &= ~(mask << position);
   16ca2:	9a05      	ldr	r2, [sp, #20]
   16ca4:	9b01      	ldr	r3, [sp, #4]
   16ca6:	fa02 f303 	lsl.w	r3, r2, r3
   16caa:	43db      	mvns	r3, r3
   16cac:	9a03      	ldr	r2, [sp, #12]
   16cae:	4013      	ands	r3, r2
   16cb0:	9303      	str	r3, [sp, #12]
  target |= (value & mask) << position;
   16cb2:	f89d 200b 	ldrb.w	r2, [sp, #11]
   16cb6:	9b05      	ldr	r3, [sp, #20]
   16cb8:	401a      	ands	r2, r3
   16cba:	9b01      	ldr	r3, [sp, #4]
   16cbc:	fa02 f303 	lsl.w	r3, r2, r3
   16cc0:	9a03      	ldr	r2, [sp, #12]
   16cc2:	4313      	orrs	r3, r2
   16cc4:	9303      	str	r3, [sp, #12]
  return target;
   16cc6:	9c03      	ldr	r4, [sp, #12]
   16cc8:	462b      	mov	r3, r5
   16cca:	4619      	mov	r1, r3
   16ccc:	4803      	ldr	r0, [pc, #12]	; (16cdc <unsigned long bit::Insert<unsigned long, bool>(unsigned long, bool, unsigned long, unsigned long)+0x70>)
   16cce:	f7fc f9c1 	bl	13054 <__cyg_profile_func_exit>
   16cd2:	4623      	mov	r3, r4
}
   16cd4:	4618      	mov	r0, r3
   16cd6:	b009      	add	sp, #36	; 0x24
   16cd8:	bd30      	pop	{r4, r5, pc}
   16cda:	bf00      	nop
   16cdc:	00016c6d 	.word	0x00016c6d

00016ce0 <__static_initialization_and_destruction_0(int, int)>:
extern "C" DRESULT disk_ioctl([[maybe_unused]] BYTE drive_number,
                              [[maybe_unused]] BYTE command,
                              [[maybe_unused]] void * buffer)
{
  return RES_PARERR;
}
   16ce0:	b530      	push	{r4, r5, lr}
   16ce2:	b085      	sub	sp, #20
   16ce4:	4674      	mov	r4, lr
   16ce6:	9003      	str	r0, [sp, #12]
   16ce8:	9102      	str	r1, [sp, #8]
   16cea:	4623      	mov	r3, r4
   16cec:	4619      	mov	r1, r3
   16cee:	480e      	ldr	r0, [pc, #56]	; (16d28 <__static_initialization_and_destruction_0(int, int)+0x48>)
   16cf0:	f7fc f99c 	bl	1302c <__cyg_profile_func_enter>
   16cf4:	9b03      	ldr	r3, [sp, #12]
   16cf6:	2b01      	cmp	r3, #1
   16cf8:	d10e      	bne.n	16d18 <__static_initialization_and_destruction_0(int, int)+0x38>
   16cfa:	9b02      	ldr	r3, [sp, #8]
   16cfc:	f64f 72ff 	movw	r2, #65535	; 0xffff
   16d00:	4293      	cmp	r3, r2
   16d02:	d109      	bne.n	16d18 <__static_initialization_and_destruction_0(int, int)+0x38>
Sd sd_card(Sd::DebugSdCard_t{});
   16d04:	2306      	movs	r3, #6
   16d06:	9301      	str	r3, [sp, #4]
   16d08:	2300      	movs	r3, #0
   16d0a:	9300      	str	r3, [sp, #0]
   16d0c:	2308      	movs	r3, #8
   16d0e:	2201      	movs	r2, #1
   16d10:	4629      	mov	r1, r5
   16d12:	4806      	ldr	r0, [pc, #24]	; (16d2c <__static_initialization_and_destruction_0(int, int)+0x4c>)
   16d14:	f7fe fdda 	bl	158cc <Sd::Sd(Sd::DebugSdCard_t, unsigned char, unsigned char, unsigned char, unsigned char)>
   16d18:	4623      	mov	r3, r4
   16d1a:	4619      	mov	r1, r3
   16d1c:	4802      	ldr	r0, [pc, #8]	; (16d28 <__static_initialization_and_destruction_0(int, int)+0x48>)
   16d1e:	f7fc f999 	bl	13054 <__cyg_profile_func_exit>
}
   16d22:	bf00      	nop
   16d24:	b005      	add	sp, #20
   16d26:	bd30      	pop	{r4, r5, pc}
   16d28:	00016ce1 	.word	0x00016ce1
   16d2c:	10000668 	.word	0x10000668

00016d30 <_GLOBAL__sub_I_disk_status>:
   16d30:	b510      	push	{r4, lr}
   16d32:	4674      	mov	r4, lr
   16d34:	4623      	mov	r3, r4
   16d36:	4619      	mov	r1, r3
   16d38:	4806      	ldr	r0, [pc, #24]	; (16d54 <_GLOBAL__sub_I_disk_status+0x24>)
   16d3a:	f7fc f977 	bl	1302c <__cyg_profile_func_enter>
   16d3e:	f64f 71ff 	movw	r1, #65535	; 0xffff
   16d42:	2001      	movs	r0, #1
   16d44:	f7ff ffcc 	bl	16ce0 <__static_initialization_and_destruction_0(int, int)>
   16d48:	4623      	mov	r3, r4
   16d4a:	4619      	mov	r1, r3
   16d4c:	4801      	ldr	r0, [pc, #4]	; (16d54 <_GLOBAL__sub_I_disk_status+0x24>)
   16d4e:	f7fc f981 	bl	13054 <__cyg_profile_func_exit>
   16d52:	bd10      	pop	{r4, pc}
   16d54:	00016d31 	.word	0x00016d31

00016d58 <__cxa_pure_virtual>:
   16d58:	b508      	push	{r3, lr}
   16d5a:	f000 f80d 	bl	16d78 <std::terminate()>

00016d5e <__cxxabiv1::__terminate(void (*)())>:
   16d5e:	b508      	push	{r3, lr}
   16d60:	4780      	blx	r0
   16d62:	f000 fa0f 	bl	17184 <abort>
   16d66:	Address 0x0000000000016d66 is out of bounds.


00016d68 <std::get_terminate()>:
   16d68:	4b02      	ldr	r3, [pc, #8]	; (16d74 <std::get_terminate()+0xc>)
   16d6a:	6818      	ldr	r0, [r3, #0]
   16d6c:	f3bf 8f5b 	dmb	ish
   16d70:	4770      	bx	lr
   16d72:	bf00      	nop
   16d74:	100001fc 	.word	0x100001fc

00016d78 <std::terminate()>:
   16d78:	b508      	push	{r3, lr}
   16d7a:	f7ff fff5 	bl	16d68 <std::get_terminate()>
   16d7e:	f7ff ffee 	bl	16d5e <__cxxabiv1::__terminate(void (*)())>
   16d82:	Address 0x0000000000016d82 is out of bounds.


00016d84 <roundf>:
   16d84:	b082      	sub	sp, #8
   16d86:	ed8d 0a01 	vstr	s0, [sp, #4]
   16d8a:	9901      	ldr	r1, [sp, #4]
   16d8c:	f3c1 53c7 	ubfx	r3, r1, #23, #8
   16d90:	f1a3 027f 	sub.w	r2, r3, #127	; 0x7f
   16d94:	2a16      	cmp	r2, #22
   16d96:	dc0c      	bgt.n	16db2 <roundf+0x2e>
   16d98:	2a00      	cmp	r2, #0
   16d9a:	db10      	blt.n	16dbe <roundf+0x3a>
   16d9c:	4810      	ldr	r0, [pc, #64]	; (16de0 <roundf+0x5c>)
   16d9e:	4110      	asrs	r0, r2
   16da0:	4201      	tst	r1, r0
   16da2:	d008      	beq.n	16db6 <roundf+0x32>
   16da4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   16da8:	4113      	asrs	r3, r2
   16daa:	440b      	add	r3, r1
   16dac:	ea23 0300 	bic.w	r3, r3, r0
   16db0:	e00b      	b.n	16dca <roundf+0x46>
   16db2:	2a80      	cmp	r2, #128	; 0x80
   16db4:	d00d      	beq.n	16dd2 <roundf+0x4e>
   16db6:	ed9d 0a01 	vldr	s0, [sp, #4]
   16dba:	b002      	add	sp, #8
   16dbc:	4770      	bx	lr
   16dbe:	3201      	adds	r2, #1
   16dc0:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
   16dc4:	d101      	bne.n	16dca <roundf+0x46>
   16dc6:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
   16dca:	ee00 3a10 	vmov	s0, r3
   16dce:	b002      	add	sp, #8
   16dd0:	4770      	bx	lr
   16dd2:	eddd 7a01 	vldr	s15, [sp, #4]
   16dd6:	ee37 0aa7 	vadd.f32	s0, s15, s15
   16dda:	b002      	add	sp, #8
   16ddc:	4770      	bx	lr
   16dde:	bf00      	nop
   16de0:	007fffff 	.word	0x007fffff

00016de4 <__aeabi_d2f>:
   16de4:	ea4f 0241 	mov.w	r2, r1, lsl #1
   16de8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   16dec:	bf24      	itt	cs
   16dee:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   16df2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   16df6:	d90d      	bls.n	16e14 <__aeabi_d2f+0x30>
   16df8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   16dfc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   16e00:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   16e04:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   16e08:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   16e0c:	bf08      	it	eq
   16e0e:	f020 0001 	biceq.w	r0, r0, #1
   16e12:	4770      	bx	lr
   16e14:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   16e18:	d121      	bne.n	16e5e <__aeabi_d2f+0x7a>
   16e1a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   16e1e:	bfbc      	itt	lt
   16e20:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   16e24:	4770      	bxlt	lr
   16e26:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   16e2a:	ea4f 5252 	mov.w	r2, r2, lsr #21
   16e2e:	f1c2 0218 	rsb	r2, r2, #24
   16e32:	f1c2 0c20 	rsb	ip, r2, #32
   16e36:	fa10 f30c 	lsls.w	r3, r0, ip
   16e3a:	fa20 f002 	lsr.w	r0, r0, r2
   16e3e:	bf18      	it	ne
   16e40:	f040 0001 	orrne.w	r0, r0, #1
   16e44:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   16e48:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   16e4c:	fa03 fc0c 	lsl.w	ip, r3, ip
   16e50:	ea40 000c 	orr.w	r0, r0, ip
   16e54:	fa23 f302 	lsr.w	r3, r3, r2
   16e58:	ea4f 0343 	mov.w	r3, r3, lsl #1
   16e5c:	e7cc      	b.n	16df8 <__aeabi_d2f+0x14>
   16e5e:	ea7f 5362 	mvns.w	r3, r2, asr #21
   16e62:	d107      	bne.n	16e74 <__aeabi_d2f+0x90>
   16e64:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   16e68:	bf1e      	ittt	ne
   16e6a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   16e6e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   16e72:	4770      	bxne	lr
   16e74:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   16e78:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   16e7c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   16e80:	4770      	bx	lr
   16e82:	bf00      	nop

00016e84 <__aeabi_uldivmod>:
   16e84:	b953      	cbnz	r3, 16e9c <__aeabi_uldivmod+0x18>
   16e86:	b94a      	cbnz	r2, 16e9c <__aeabi_uldivmod+0x18>
   16e88:	2900      	cmp	r1, #0
   16e8a:	bf08      	it	eq
   16e8c:	2800      	cmpeq	r0, #0
   16e8e:	bf1c      	itt	ne
   16e90:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
   16e94:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   16e98:	f000 b972 	b.w	17180 <__aeabi_idiv0>
   16e9c:	f1ad 0c08 	sub.w	ip, sp, #8
   16ea0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   16ea4:	f000 f806 	bl	16eb4 <__udivmoddi4>
   16ea8:	f8dd e004 	ldr.w	lr, [sp, #4]
   16eac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   16eb0:	b004      	add	sp, #16
   16eb2:	4770      	bx	lr

00016eb4 <__udivmoddi4>:
   16eb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16eb8:	9e08      	ldr	r6, [sp, #32]
   16eba:	4604      	mov	r4, r0
   16ebc:	4688      	mov	r8, r1
   16ebe:	2b00      	cmp	r3, #0
   16ec0:	d14b      	bne.n	16f5a <__udivmoddi4+0xa6>
   16ec2:	428a      	cmp	r2, r1
   16ec4:	4615      	mov	r5, r2
   16ec6:	d967      	bls.n	16f98 <__udivmoddi4+0xe4>
   16ec8:	fab2 f282 	clz	r2, r2
   16ecc:	b14a      	cbz	r2, 16ee2 <__udivmoddi4+0x2e>
   16ece:	f1c2 0720 	rsb	r7, r2, #32
   16ed2:	fa01 f302 	lsl.w	r3, r1, r2
   16ed6:	fa20 f707 	lsr.w	r7, r0, r7
   16eda:	4095      	lsls	r5, r2
   16edc:	ea47 0803 	orr.w	r8, r7, r3
   16ee0:	4094      	lsls	r4, r2
   16ee2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
   16ee6:	0c23      	lsrs	r3, r4, #16
   16ee8:	fbb8 f7fe 	udiv	r7, r8, lr
   16eec:	fa1f fc85 	uxth.w	ip, r5
   16ef0:	fb0e 8817 	mls	r8, lr, r7, r8
   16ef4:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
   16ef8:	fb07 f10c 	mul.w	r1, r7, ip
   16efc:	4299      	cmp	r1, r3
   16efe:	d909      	bls.n	16f14 <__udivmoddi4+0x60>
   16f00:	18eb      	adds	r3, r5, r3
   16f02:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
   16f06:	f080 811b 	bcs.w	17140 <__udivmoddi4+0x28c>
   16f0a:	4299      	cmp	r1, r3
   16f0c:	f240 8118 	bls.w	17140 <__udivmoddi4+0x28c>
   16f10:	3f02      	subs	r7, #2
   16f12:	442b      	add	r3, r5
   16f14:	1a5b      	subs	r3, r3, r1
   16f16:	b2a4      	uxth	r4, r4
   16f18:	fbb3 f0fe 	udiv	r0, r3, lr
   16f1c:	fb0e 3310 	mls	r3, lr, r0, r3
   16f20:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
   16f24:	fb00 fc0c 	mul.w	ip, r0, ip
   16f28:	45a4      	cmp	ip, r4
   16f2a:	d909      	bls.n	16f40 <__udivmoddi4+0x8c>
   16f2c:	192c      	adds	r4, r5, r4
   16f2e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   16f32:	f080 8107 	bcs.w	17144 <__udivmoddi4+0x290>
   16f36:	45a4      	cmp	ip, r4
   16f38:	f240 8104 	bls.w	17144 <__udivmoddi4+0x290>
   16f3c:	3802      	subs	r0, #2
   16f3e:	442c      	add	r4, r5
   16f40:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
   16f44:	eba4 040c 	sub.w	r4, r4, ip
   16f48:	2700      	movs	r7, #0
   16f4a:	b11e      	cbz	r6, 16f54 <__udivmoddi4+0xa0>
   16f4c:	40d4      	lsrs	r4, r2
   16f4e:	2300      	movs	r3, #0
   16f50:	e9c6 4300 	strd	r4, r3, [r6]
   16f54:	4639      	mov	r1, r7
   16f56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   16f5a:	428b      	cmp	r3, r1
   16f5c:	d909      	bls.n	16f72 <__udivmoddi4+0xbe>
   16f5e:	2e00      	cmp	r6, #0
   16f60:	f000 80eb 	beq.w	1713a <__udivmoddi4+0x286>
   16f64:	2700      	movs	r7, #0
   16f66:	e9c6 0100 	strd	r0, r1, [r6]
   16f6a:	4638      	mov	r0, r7
   16f6c:	4639      	mov	r1, r7
   16f6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   16f72:	fab3 f783 	clz	r7, r3
   16f76:	2f00      	cmp	r7, #0
   16f78:	d147      	bne.n	1700a <__udivmoddi4+0x156>
   16f7a:	428b      	cmp	r3, r1
   16f7c:	d302      	bcc.n	16f84 <__udivmoddi4+0xd0>
   16f7e:	4282      	cmp	r2, r0
   16f80:	f200 80fa 	bhi.w	17178 <__udivmoddi4+0x2c4>
   16f84:	1a84      	subs	r4, r0, r2
   16f86:	eb61 0303 	sbc.w	r3, r1, r3
   16f8a:	2001      	movs	r0, #1
   16f8c:	4698      	mov	r8, r3
   16f8e:	2e00      	cmp	r6, #0
   16f90:	d0e0      	beq.n	16f54 <__udivmoddi4+0xa0>
   16f92:	e9c6 4800 	strd	r4, r8, [r6]
   16f96:	e7dd      	b.n	16f54 <__udivmoddi4+0xa0>
   16f98:	b902      	cbnz	r2, 16f9c <__udivmoddi4+0xe8>
   16f9a:	deff      	udf	#255	; 0xff
   16f9c:	fab2 f282 	clz	r2, r2
   16fa0:	2a00      	cmp	r2, #0
   16fa2:	f040 808f 	bne.w	170c4 <__udivmoddi4+0x210>
   16fa6:	1b49      	subs	r1, r1, r5
   16fa8:	ea4f 4e15 	mov.w	lr, r5, lsr #16
   16fac:	fa1f f885 	uxth.w	r8, r5
   16fb0:	2701      	movs	r7, #1
   16fb2:	fbb1 fcfe 	udiv	ip, r1, lr
   16fb6:	0c23      	lsrs	r3, r4, #16
   16fb8:	fb0e 111c 	mls	r1, lr, ip, r1
   16fbc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   16fc0:	fb08 f10c 	mul.w	r1, r8, ip
   16fc4:	4299      	cmp	r1, r3
   16fc6:	d907      	bls.n	16fd8 <__udivmoddi4+0x124>
   16fc8:	18eb      	adds	r3, r5, r3
   16fca:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
   16fce:	d202      	bcs.n	16fd6 <__udivmoddi4+0x122>
   16fd0:	4299      	cmp	r1, r3
   16fd2:	f200 80cd 	bhi.w	17170 <__udivmoddi4+0x2bc>
   16fd6:	4684      	mov	ip, r0
   16fd8:	1a59      	subs	r1, r3, r1
   16fda:	b2a3      	uxth	r3, r4
   16fdc:	fbb1 f0fe 	udiv	r0, r1, lr
   16fe0:	fb0e 1410 	mls	r4, lr, r0, r1
   16fe4:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
   16fe8:	fb08 f800 	mul.w	r8, r8, r0
   16fec:	45a0      	cmp	r8, r4
   16fee:	d907      	bls.n	17000 <__udivmoddi4+0x14c>
   16ff0:	192c      	adds	r4, r5, r4
   16ff2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   16ff6:	d202      	bcs.n	16ffe <__udivmoddi4+0x14a>
   16ff8:	45a0      	cmp	r8, r4
   16ffa:	f200 80b6 	bhi.w	1716a <__udivmoddi4+0x2b6>
   16ffe:	4618      	mov	r0, r3
   17000:	eba4 0408 	sub.w	r4, r4, r8
   17004:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
   17008:	e79f      	b.n	16f4a <__udivmoddi4+0x96>
   1700a:	f1c7 0c20 	rsb	ip, r7, #32
   1700e:	40bb      	lsls	r3, r7
   17010:	fa22 fe0c 	lsr.w	lr, r2, ip
   17014:	ea4e 0e03 	orr.w	lr, lr, r3
   17018:	fa01 f407 	lsl.w	r4, r1, r7
   1701c:	fa20 f50c 	lsr.w	r5, r0, ip
   17020:	fa21 f30c 	lsr.w	r3, r1, ip
   17024:	ea4f 481e 	mov.w	r8, lr, lsr #16
   17028:	4325      	orrs	r5, r4
   1702a:	fbb3 f9f8 	udiv	r9, r3, r8
   1702e:	0c2c      	lsrs	r4, r5, #16
   17030:	fb08 3319 	mls	r3, r8, r9, r3
   17034:	fa1f fa8e 	uxth.w	sl, lr
   17038:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
   1703c:	fb09 f40a 	mul.w	r4, r9, sl
   17040:	429c      	cmp	r4, r3
   17042:	fa02 f207 	lsl.w	r2, r2, r7
   17046:	fa00 f107 	lsl.w	r1, r0, r7
   1704a:	d90b      	bls.n	17064 <__udivmoddi4+0x1b0>
   1704c:	eb1e 0303 	adds.w	r3, lr, r3
   17050:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
   17054:	f080 8087 	bcs.w	17166 <__udivmoddi4+0x2b2>
   17058:	429c      	cmp	r4, r3
   1705a:	f240 8084 	bls.w	17166 <__udivmoddi4+0x2b2>
   1705e:	f1a9 0902 	sub.w	r9, r9, #2
   17062:	4473      	add	r3, lr
   17064:	1b1b      	subs	r3, r3, r4
   17066:	b2ad      	uxth	r5, r5
   17068:	fbb3 f0f8 	udiv	r0, r3, r8
   1706c:	fb08 3310 	mls	r3, r8, r0, r3
   17070:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
   17074:	fb00 fa0a 	mul.w	sl, r0, sl
   17078:	45a2      	cmp	sl, r4
   1707a:	d908      	bls.n	1708e <__udivmoddi4+0x1da>
   1707c:	eb1e 0404 	adds.w	r4, lr, r4
   17080:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   17084:	d26b      	bcs.n	1715e <__udivmoddi4+0x2aa>
   17086:	45a2      	cmp	sl, r4
   17088:	d969      	bls.n	1715e <__udivmoddi4+0x2aa>
   1708a:	3802      	subs	r0, #2
   1708c:	4474      	add	r4, lr
   1708e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   17092:	fba0 8902 	umull	r8, r9, r0, r2
   17096:	eba4 040a 	sub.w	r4, r4, sl
   1709a:	454c      	cmp	r4, r9
   1709c:	46c2      	mov	sl, r8
   1709e:	464b      	mov	r3, r9
   170a0:	d354      	bcc.n	1714c <__udivmoddi4+0x298>
   170a2:	d051      	beq.n	17148 <__udivmoddi4+0x294>
   170a4:	2e00      	cmp	r6, #0
   170a6:	d069      	beq.n	1717c <__udivmoddi4+0x2c8>
   170a8:	ebb1 050a 	subs.w	r5, r1, sl
   170ac:	eb64 0403 	sbc.w	r4, r4, r3
   170b0:	fa04 fc0c 	lsl.w	ip, r4, ip
   170b4:	40fd      	lsrs	r5, r7
   170b6:	40fc      	lsrs	r4, r7
   170b8:	ea4c 0505 	orr.w	r5, ip, r5
   170bc:	e9c6 5400 	strd	r5, r4, [r6]
   170c0:	2700      	movs	r7, #0
   170c2:	e747      	b.n	16f54 <__udivmoddi4+0xa0>
   170c4:	f1c2 0320 	rsb	r3, r2, #32
   170c8:	fa20 f703 	lsr.w	r7, r0, r3
   170cc:	4095      	lsls	r5, r2
   170ce:	fa01 f002 	lsl.w	r0, r1, r2
   170d2:	fa21 f303 	lsr.w	r3, r1, r3
   170d6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
   170da:	4338      	orrs	r0, r7
   170dc:	0c01      	lsrs	r1, r0, #16
   170de:	fbb3 f7fe 	udiv	r7, r3, lr
   170e2:	fa1f f885 	uxth.w	r8, r5
   170e6:	fb0e 3317 	mls	r3, lr, r7, r3
   170ea:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   170ee:	fb07 f308 	mul.w	r3, r7, r8
   170f2:	428b      	cmp	r3, r1
   170f4:	fa04 f402 	lsl.w	r4, r4, r2
   170f8:	d907      	bls.n	1710a <__udivmoddi4+0x256>
   170fa:	1869      	adds	r1, r5, r1
   170fc:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
   17100:	d22f      	bcs.n	17162 <__udivmoddi4+0x2ae>
   17102:	428b      	cmp	r3, r1
   17104:	d92d      	bls.n	17162 <__udivmoddi4+0x2ae>
   17106:	3f02      	subs	r7, #2
   17108:	4429      	add	r1, r5
   1710a:	1acb      	subs	r3, r1, r3
   1710c:	b281      	uxth	r1, r0
   1710e:	fbb3 f0fe 	udiv	r0, r3, lr
   17112:	fb0e 3310 	mls	r3, lr, r0, r3
   17116:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   1711a:	fb00 f308 	mul.w	r3, r0, r8
   1711e:	428b      	cmp	r3, r1
   17120:	d907      	bls.n	17132 <__udivmoddi4+0x27e>
   17122:	1869      	adds	r1, r5, r1
   17124:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
   17128:	d217      	bcs.n	1715a <__udivmoddi4+0x2a6>
   1712a:	428b      	cmp	r3, r1
   1712c:	d915      	bls.n	1715a <__udivmoddi4+0x2a6>
   1712e:	3802      	subs	r0, #2
   17130:	4429      	add	r1, r5
   17132:	1ac9      	subs	r1, r1, r3
   17134:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
   17138:	e73b      	b.n	16fb2 <__udivmoddi4+0xfe>
   1713a:	4637      	mov	r7, r6
   1713c:	4630      	mov	r0, r6
   1713e:	e709      	b.n	16f54 <__udivmoddi4+0xa0>
   17140:	4607      	mov	r7, r0
   17142:	e6e7      	b.n	16f14 <__udivmoddi4+0x60>
   17144:	4618      	mov	r0, r3
   17146:	e6fb      	b.n	16f40 <__udivmoddi4+0x8c>
   17148:	4541      	cmp	r1, r8
   1714a:	d2ab      	bcs.n	170a4 <__udivmoddi4+0x1f0>
   1714c:	ebb8 0a02 	subs.w	sl, r8, r2
   17150:	eb69 020e 	sbc.w	r2, r9, lr
   17154:	3801      	subs	r0, #1
   17156:	4613      	mov	r3, r2
   17158:	e7a4      	b.n	170a4 <__udivmoddi4+0x1f0>
   1715a:	4660      	mov	r0, ip
   1715c:	e7e9      	b.n	17132 <__udivmoddi4+0x27e>
   1715e:	4618      	mov	r0, r3
   17160:	e795      	b.n	1708e <__udivmoddi4+0x1da>
   17162:	4667      	mov	r7, ip
   17164:	e7d1      	b.n	1710a <__udivmoddi4+0x256>
   17166:	4681      	mov	r9, r0
   17168:	e77c      	b.n	17064 <__udivmoddi4+0x1b0>
   1716a:	3802      	subs	r0, #2
   1716c:	442c      	add	r4, r5
   1716e:	e747      	b.n	17000 <__udivmoddi4+0x14c>
   17170:	f1ac 0c02 	sub.w	ip, ip, #2
   17174:	442b      	add	r3, r5
   17176:	e72f      	b.n	16fd8 <__udivmoddi4+0x124>
   17178:	4638      	mov	r0, r7
   1717a:	e708      	b.n	16f8e <__udivmoddi4+0xda>
   1717c:	4637      	mov	r7, r6
   1717e:	e6e9      	b.n	16f54 <__udivmoddi4+0xa0>

00017180 <__aeabi_idiv0>:
   17180:	4770      	bx	lr
   17182:	bf00      	nop

00017184 <abort>:
   17184:	b508      	push	{r3, lr}
   17186:	2006      	movs	r0, #6
   17188:	f000 f858 	bl	1723c <raise>
   1718c:	2001      	movs	r0, #1
   1718e:	f7fb fead 	bl	12eec <_exit>
   17192:	Address 0x0000000000017192 is out of bounds.


00017194 <__libc_init_array>:
   17194:	b570      	push	{r4, r5, r6, lr}
   17196:	4e0d      	ldr	r6, [pc, #52]	; (171cc <__libc_init_array+0x38>)
   17198:	4c0d      	ldr	r4, [pc, #52]	; (171d0 <__libc_init_array+0x3c>)
   1719a:	1ba4      	subs	r4, r4, r6
   1719c:	10a4      	asrs	r4, r4, #2
   1719e:	2500      	movs	r5, #0
   171a0:	42a5      	cmp	r5, r4
   171a2:	d109      	bne.n	171b8 <__libc_init_array+0x24>
   171a4:	4e0b      	ldr	r6, [pc, #44]	; (171d4 <__libc_init_array+0x40>)
   171a6:	4c0c      	ldr	r4, [pc, #48]	; (171d8 <__libc_init_array+0x44>)
   171a8:	f7f9 f8aa 	bl	10300 <_init>
   171ac:	1ba4      	subs	r4, r4, r6
   171ae:	10a4      	asrs	r4, r4, #2
   171b0:	2500      	movs	r5, #0
   171b2:	42a5      	cmp	r5, r4
   171b4:	d105      	bne.n	171c2 <__libc_init_array+0x2e>
   171b6:	bd70      	pop	{r4, r5, r6, pc}
   171b8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   171bc:	4798      	blx	r3
   171be:	3501      	adds	r5, #1
   171c0:	e7ee      	b.n	171a0 <__libc_init_array+0xc>
   171c2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   171c6:	4798      	blx	r3
   171c8:	3501      	adds	r5, #1
   171ca:	e7f2      	b.n	171b2 <__libc_init_array+0x1e>
   171cc:	0001030c 	.word	0x0001030c
   171d0:	0001030c 	.word	0x0001030c
   171d4:	0001030c 	.word	0x0001030c
   171d8:	00010318 	.word	0x00010318

000171dc <memset>:
   171dc:	4402      	add	r2, r0
   171de:	4603      	mov	r3, r0
   171e0:	4293      	cmp	r3, r2
   171e2:	d100      	bne.n	171e6 <memset+0xa>
   171e4:	4770      	bx	lr
   171e6:	f803 1b01 	strb.w	r1, [r3], #1
   171ea:	e7f9      	b.n	171e0 <memset+0x4>

000171ec <_raise_r>:
   171ec:	291f      	cmp	r1, #31
   171ee:	b538      	push	{r3, r4, r5, lr}
   171f0:	4604      	mov	r4, r0
   171f2:	460d      	mov	r5, r1
   171f4:	d904      	bls.n	17200 <_raise_r+0x14>
   171f6:	2316      	movs	r3, #22
   171f8:	6003      	str	r3, [r0, #0]
   171fa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   171fe:	bd38      	pop	{r3, r4, r5, pc}
   17200:	6c42      	ldr	r2, [r0, #68]	; 0x44
   17202:	b112      	cbz	r2, 1720a <_raise_r+0x1e>
   17204:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
   17208:	b94b      	cbnz	r3, 1721e <_raise_r+0x32>
   1720a:	4620      	mov	r0, r4
   1720c:	f000 f830 	bl	17270 <_getpid_r>
   17210:	462a      	mov	r2, r5
   17212:	4601      	mov	r1, r0
   17214:	4620      	mov	r0, r4
   17216:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1721a:	f000 b817 	b.w	1724c <_kill_r>
   1721e:	2b01      	cmp	r3, #1
   17220:	d00a      	beq.n	17238 <_raise_r+0x4c>
   17222:	1c59      	adds	r1, r3, #1
   17224:	d103      	bne.n	1722e <_raise_r+0x42>
   17226:	2316      	movs	r3, #22
   17228:	6003      	str	r3, [r0, #0]
   1722a:	2001      	movs	r0, #1
   1722c:	e7e7      	b.n	171fe <_raise_r+0x12>
   1722e:	2400      	movs	r4, #0
   17230:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
   17234:	4628      	mov	r0, r5
   17236:	4798      	blx	r3
   17238:	2000      	movs	r0, #0
   1723a:	e7e0      	b.n	171fe <_raise_r+0x12>

0001723c <raise>:
   1723c:	4b02      	ldr	r3, [pc, #8]	; (17248 <raise+0xc>)
   1723e:	4601      	mov	r1, r0
   17240:	6818      	ldr	r0, [r3, #0]
   17242:	f7ff bfd3 	b.w	171ec <_raise_r>
   17246:	bf00      	nop
   17248:	10000200 	.word	0x10000200

0001724c <_kill_r>:
   1724c:	b538      	push	{r3, r4, r5, lr}
   1724e:	4c07      	ldr	r4, [pc, #28]	; (1726c <_kill_r+0x20>)
   17250:	2300      	movs	r3, #0
   17252:	4605      	mov	r5, r0
   17254:	4608      	mov	r0, r1
   17256:	4611      	mov	r1, r2
   17258:	6023      	str	r3, [r4, #0]
   1725a:	f7fb fe65 	bl	12f28 <_kill>
   1725e:	1c43      	adds	r3, r0, #1
   17260:	d102      	bne.n	17268 <_kill_r+0x1c>
   17262:	6823      	ldr	r3, [r4, #0]
   17264:	b103      	cbz	r3, 17268 <_kill_r+0x1c>
   17266:	602b      	str	r3, [r5, #0]
   17268:	bd38      	pop	{r3, r4, r5, pc}
   1726a:	bf00      	nop
   1726c:	100006d0 	.word	0x100006d0

00017270 <_getpid_r>:
   17270:	f7fb be48 	b.w	12f04 <_getpid>
   17274:	25206925 	.word	0x25206925
   17278:	00000a69 	.word	0x00000a69
   1727c:	000a6925 	.word	0x000a6925
   17280:	32345b1b 	.word	0x32345b1b
   17284:	2020206d 	.word	0x2020206d
   17288:	464e4920 	.word	0x464e4920
   1728c:	305b1b4f 	.word	0x305b1b4f
   17290:	6d34393b 	.word	0x6d34393b
   17294:	3a73253a 	.word	0x3a73253a
   17298:	3b305b1b 	.word	0x3b305b1b
   1729c:	256d3239 	.word	0x256d3239
   172a0:	5b1b3a73 	.word	0x5b1b3a73
   172a4:	33393b30 	.word	0x33393b30
   172a8:	3e64256d 	.word	0x3e64256d
   172ac:	305b1b20 	.word	0x305b1b20
   172b0:	6d37333b 	.word	0x6d37333b
   172b4:	65206f4e 	.word	0x65206f4e
   172b8:	20656764 	.word	0x20656764
   172bc:	656c6573 	.word	0x656c6573
   172c0:	64657463 	.word	0x64657463
   172c4:	6d305b1b 	.word	0x6d305b1b
   172c8:	ffff000a 	.word	0xffff000a

000172cc <LabGPIO::IntEdge(LabGPIO::Edge)::file>:
   172cc:	4762614c 2e4f4950 00707063              LabGPIO.cpp.

000172d8 <LabGPIO::IntEdge(LabGPIO::Edge)::__PRETTY_FUNCTION__>:
   172d8:	64696f76 62614c20 4f495047 6e493a3a     void LabGPIO::In
   172e8:	67644574 614c2865 49504762 453a3a4f     tEdge(LabGPIO::E
   172f8:	29656764 ffffff00                       dge)....

00017300 <main::file>:
   17300:	6e69616d 7070632e ffffff00 32345b1b     main.cpp.....[42
   17310:	2020206d 464e4920 305b1b4f 6d34393b     m    INFO.[0;94m
   17320:	3a73253a 3b305b1b 256d3239 5b1b3a73     :%s:.[0;92m%s:.[
   17330:	33393b30 3e64256d 305b1b20 6d37333b     0;93m%d> .[0;37m
   17340:	72617453 305b1b74 00000a6d 32345b1b     Start.[0m....[42
   17350:	2020206d 464e4920 305b1b4f 6d34393b     m    INFO.[0;94m
   17360:	3a73253a 3b305b1b 256d3239 5b1b3a73     :%s:.[0;92m%s:.[
   17370:	33393b30 3e64256d 305b1b20 6d37333b     0;93m%d> .[0;37m
   17380:	74206e49 69206568 7265746e 74707572     In the interrupt
   17390:	6d305b1b ffff000a                       .[0m....

00017398 <GpioInterruptCallback()::file>:
   17398:	6e69616d 7070632e ffffff00              main.cpp....

000173a4 <main::__PRETTY_FUNCTION__>:
   173a4:	20746e69 6e69616d ff002928              int main()..

000173b0 <GpioInterruptCallback()::__PRETTY_FUNCTION__>:
   173b0:	64696f76 69704720 746e496f 75727265     void GpioInterru
   173c0:	61437470 61626c6c 29286b63 ffffff00     ptCallback()....
   173d0:	63617453 6544206b 20687470 7a25203d     Stack Depth = %z
   173e0:	00000a64 25232020 203a757a 70257830     d...  #%zu: 0x%p
   173f0:	0000000a 6e75520a 6874203a 6f662065     .....Run: the fo
   17400:	776f6c6c 20676e69 6d6d6f63 20646e61     llowing command 
   17410:	79206e69 2072756f 6a6f7270 20746365     in your project 
   17420:	65726964 726f7463 00000079 1b20200a     directory....  .
   17430:	333b315b 616d6d37 7320656b 6b636174     [1;37mmake stack
   17440:	63617274 73252d65 41525420 3d534543     trace-%s TRACES=
   17450:	00000022 70257830 00000000 25783020     "...0x%p.... 0x%
   17460:	00000070 5b1b0a22 00006d30 73696854     p..."..[0m..This
   17470:	6c697720 6572206c 74726f70 65687420      will report the
   17480:	6c696620 6e612065 696c2064 6e20656e      file and line n
   17490:	65626d75 68742072 6c207461 74206465     umber that led t
   174a0:	6874206f 66207369 74636e75 206e6f69     o this function 
   174b0:	6e696562 61632067 64656c6c 0000002e     being called....
   174c0:	6c707061 74616369 006e6f69 31345b1b     application..[41
   174d0:	4952436d 41434954 305b1b4c 6d34393b     mCRITICAL.[0;94m
   174e0:	3a73253a 3b305b1b 256d3239 5b1b3a73     :%s:.[0;92m%s:.[
   174f0:	33393b30 3e64256d 305b1b20 6d37333b     0;93m%d> .[0;37m
   17500:	65737341 6f697472 6146206e 72756c69     Assertion Failur
   17510:	43202c65 69646e6f 6e6f6974 73655420     e, Condition Tes
   17520:	3a646574 65702820 68706972 6c617265     ted: (peripheral
   17530:	7669645f 72656469 203d3c20 200a2934     _divider <= 4). 
   17540:	20202020 20202020 76694420 72656469              Divider
   17550:	73756d20 74276e74 63786520 20646565      mustn't exceed 
   17560:	5b1b3233 5b1b6d30 000a6d30 6972500a     32.[0m.[0m...Pri
   17570:	6e69746e 74532067 206b6361 63617254     nting Stack Trac
   17580:	000a3a65 31345b1b 4952436d 41434954     e:...[41mCRITICA
   17590:	305b1b4c 6d34393b 3a73253a 3b305b1b     L.[0;94m:%s:.[0;
   175a0:	256d3239 5b1b3a73 33393b30 3e64256d     92m%s:.[0;93m%d>
   175b0:	305b1b20 6d37333b 65737341 6f697472      .[0;37mAssertio
   175c0:	6146206e 72756c69 43202c65 69646e6f     n Failure, Condi
   175d0:	6e6f6974 73655420 3a646574 65642820     tion Tested: (de
   175e0:	65726973 70735f64 5f646565 6d5f6e69     sired_speed_in_m
   175f0:	3c207a68 34383320 20262620 69736564     hz < 384 && desi
   17600:	5f646572 65657073 6e695f64 7a686d5f     red_speed_in_mhz
   17610:	31203e20 200a2932 20202020 20202020      > 12).         
   17620:	65724620 6e657571 6d207963 20747375      Frequency must 
   17630:	6c206562 7265776f 61687420 3833206e     be lower than 38
   17640:	484d2034 646e617a 65726720 72657461     4 MHzand greater
   17650:	61687420 726f206e 75716520 74206c61      than or equal t
   17660:	3231206f 7a484d20 6d305b1b 6d305b1b     o 12 MHz.[0m.[0m
   17670:	0000000a 31345b1b 4952436d 41434954     .....[41mCRITICA
   17680:	305b1b4c 6d34393b 3a73253a 3b305b1b     L.[0;94m:%s:.[0;
   17690:	256d3239 5b1b3a73 33393b30 3e64256d     92m%s:.[0;93m%d>
   176a0:	305b1b20 6d37333b 65737341 6f697472      .[0;37mAssertio
   176b0:	6146206e 72756c69 43202c65 69646e6f     n Failure, Condi
   176c0:	6e6f6974 73655420 3a646574 69642820     tion Tested: (di
   176d0:	65646976 61765f72 2065756c 2938203c     vider_value < 8)
   176e0:	2020200a 20202020 50202020 64204c4c     .          PLL d
   176f0:	64697669 76207265 65756c61 6e657720     ivider value wen
   17700:	756f2074 666f2074 756f6220 1b73646e     t out of bounds.
   17710:	1b6d305b 0a6d305b 00000000 31345b1b     [0m.[0m......[41
   17720:	4952436d 41434954 305b1b4c 6d34393b     mCRITICAL.[0;94m
   17730:	3a73253a 3b305b1b 256d3239 5b1b3a73     :%s:.[0;92m%s:.[
   17740:	33393b30 3e64256d 305b1b20 6d37333b     0;93m%d> .[0;37m
   17750:	65737341 6f697472 6146206e 72756c69     Assertion Failur
   17760:	43202c65 69646e6f 6e6f6974 73655420     e, Condition Tes
   17770:	3a646574 61662820 2965736c 2020200a     ted: (false).   
   17780:	20202020 50202020 6c204c4c 206b636f            PLL lock 
   17790:	6c756f63 6f6e2064 65622074 74736520     could not be est
   177a0:	696c6261 64656873 66656220 2065726f     ablished before 
   177b0:	656d6974 1b74756f 1b6d305b 0a6d305b     timeout.[0m.[0m.
   177c0:	00000000 31345b1b 4952436d 41434954     .....[41mCRITICA
   177d0:	305b1b4c 6d34393b 3a73253a 3b305b1b     L.[0;94m:%s:.[0;
   177e0:	256d3239 5b1b3a73 33393b30 3e64256d     92m%s:.[0;93m%d>
   177f0:	305b1b20 6d37333b 65737341 6f697472      .[0;37mAssertio
   17800:	6146206e 72756c69 43202c65 69646e6f     n Failure, Condi
   17810:	6e6f6974 73655420 3a646574 70632820     tion Tested: (cp
   17820:	69645f75 65646976 203c2072 0a293233     u_divider < 32).
   17830:	20202020 20202020 69442020 65646976               Divide
   17840:	756d2072 276e7473 78652074 64656563     r mustn't exceed
   17850:	1b323320 1b6d305b 0a6d305b 00000000      32.[0m.[0m.....
   17860:	31345b1b 4952436d 41434954 305b1b4c     .[41mCRITICAL.[0
   17870:	6d34393b 3a73253a 3b305b1b 256d3239     ;94m:%s:.[0;92m%
   17880:	5b1b3a73 33393b30 3e64256d 305b1b20     s:.[0;93m%d> .[0
   17890:	6d37333b 65737341 6f697472 6146206e     ;37mAssertion Fa
   178a0:	72756c69 43202c65 69646e6f 6e6f6974     ilure, Condition
   178b0:	73655420 3a646574 72662820 65757165      Tested: (freque
   178c0:	2079636e 30203d21 20200a29 20202020     ncy != 0).      
   178d0:	20202020 6e6e6143 6820746f 20657661         Cannot have 
   178e0:	6f72657a 63697420 7020736b 6d207265     zero ticks per m
   178f0:	6f726369 6f636573 202c646e 61656c70     icrosecond, plea
   17900:	63206573 736f6f68 20312065 6d20726f     se choose 1 or m
   17910:	2e65726f 6d305b1b 6d305b1b 0000000a     ore..[0m.[0m....
   17920:	33345b1b 4157206d 4e494e52 305b1b47     .[43m WARNING.[0
   17930:	6d34393b 3a73253a 3b305b1b 256d3239     ;94m:%s:.[0;92m%
   17940:	5b1b3a73 33393b30 3e64256d 305b1b20     s:.[0;93m%d> .[0
   17950:	6d37333b 74737953 54206d65 72656d69     ;37mSystem Timer
   17960:	73616820 49414620 2044454c 73206f74      has FAILED to s
   17970:	74726174 305b1b21 305b1b6d ff000a6d     tart!.[0m.[0m...

00017980 <Lpc40xxSystemController::SetPeripheralClockDivider(unsigned char)::file>:
   17980:	74737973 635f6d65 72746e6f 656c6c6f     system_controlle
   17990:	70682e72 ffff0070                       r.hpp...

00017998 <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)::file>:
   17998:	74737973 635f6d65 72746e6f 656c6c6f     system_controlle
   179a8:	70682e72 ffff0070                       r.hpp...

000179b0 <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)::file>:
   179b0:	74737973 635f6d65 72746e6f 656c6c6f     system_controlle
   179c0:	70682e72 ffff0070                       r.hpp...

000179c8 <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)::file>:
   179c8:	74737973 635f6d65 72746e6f 656c6c6f     system_controlle
   179d8:	70682e72 ffff0070                       r.hpp...

000179e0 <Lpc40xxSystemController::SetCpuClockDivider(unsigned char)::file>:
   179e0:	74737973 635f6d65 72746e6f 656c6c6f     system_controlle
   179f0:	70682e72 ffff0070                       r.hpp...

000179f8 <Timer::kPowerbit>:
   179f8:	00000001 00000002 00000016 00000017     ................

00017a08 <Timer::kTimerIrq>:
   17a08:	04030201                                ....

00017a0c <Timer::kTimerIsr>:
   17a0c:	00012745 00012781 000127bd 000127f9     E'...'...'...'..

00017a1c <Timer::Initialize(unsigned long, void (*)(), long)::file>:
   17a1c:	656d6974 70682e72 ffff0070              timer.hpp...

00017a28 <Uart::kTxUartPortFunction>:
   17a28:	05020201                                ....

00017a2c <Uart::kRxUartPortFunction>:
   17a2c:	03020201                                ....

00017a30 <Uart::kPowerbit>:
   17a30:	00000003 00000018 00000019 00000008     ................

00017a40 <LowLevelInit()::file>:
   17a40:	72617473 2e707574 00707063              startup.cpp.

00017a4c <vtable for Uart>:
	...
   17a54:	00011d3d 00011e09 00011f39 0001206d     =.......9...m ..
   17a64:	fffffffc 00000000 00010d11 00010da1     ................
   17a74:	00010df9 00010e11 00010e25 00010e65     ........%...e...
   17a84:	00010e95                                ....

00017a88 <vtable for Timer>:
	...
   17a90:	00011aa5 00011c09 00011d01 fffffffc     ................
   17aa0:	00000000 00010d11 00010da1 00010df9     ................
   17ab0:	00010e11 00010e25 00010e65 00010e95     ....%...e.......

00017ac0 <vtable for Pin>:
	...
   17ac8:	00011475 000114ed 0001156d 000115e1     u.......m.......
   17ad8:	00011655 000116d1 0001174d 000117c1     U.......M.......
   17ae8:	0001183d 000118b1 00011925 000119fd     =.......%.......
   17af8:	00011a29                                )...

00017afc <vtable for SystemTimer>:
	...
   17b04:	00011311 00011345 000113e1 fffffffc     ....E...........
   17b14:	00000000 00010d11 00010da1 00010df9     ................
   17b24:	00010e11 00010e25 00010e65 00010e95     ....%...e.......

00017b34 <vtable for Lpc40xxSystemController>:
	...
   17b3c:	00010d11 00010da1 00010df9 00010e11     ................
   17b4c:	00010e25 00010e65 00010e95              %...e.......

00017b58 <Lpc40xxSystemController::SetPeripheralClockDivider(unsigned char)::__PRETTY_FUNCTION__>:
   17b58:	74726976 206c6175 64696f76 63704c20     virtual void Lpc
   17b68:	78783034 74737953 6f436d65 6f72746e     40xxSystemContro
   17b78:	72656c6c 65533a3a 72655074 65687069     ller::SetPeriphe
   17b88:	436c6172 6b636f6c 69766944 28726564     ralClockDivider(
   17b98:	746e6975 29745f38 ffffff00              uint8_t)....

00017ba4 <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)::__PRETTY_FUNCTION__>:
   17ba4:	746e6975 745f3233 63704c20 78783034     uint32_t Lpc40xx
   17bb4:	74737953 6f436d65 6f72746e 72656c6c     SystemController
   17bc4:	65533a3a 69614d74 6c6c506e 63704c28     ::SetMainPll(Lpc
   17bd4:	78783034 74737953 6f436d65 6f72746e     40xxSystemContro
   17be4:	72656c6c 6c503a3a 706e496c 202c7475     ller::PllInput, 
   17bf4:	746e6975 745f3631 ffff0029              uint16_t)...

00017c00 <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)::__PRETTY_FUNCTION__>:
   17c00:	746e6975 745f3233 63704c20 78783034     uint32_t Lpc40xx
   17c10:	74737953 6f436d65 6f72746e 72656c6c     SystemController
   17c20:	61433a3a 6c75636c 50657461 4c286c6c     ::CalculatePll(L
   17c30:	30346370 79537878 6d657473 746e6f43     pc40xxSystemCont
   17c40:	6c6c6f72 3a3a7265 496c6c50 7475706e     roller::PllInput
   17c50:	6975202c 3631746e 0029745f              , uint16_t).

00017c5c <Lpc40xxSystemController::SetCpuClockDivider(unsigned char)::__PRETTY_FUNCTION__>:
   17c5c:	64696f76 63704c20 78783034 74737953     void Lpc40xxSyst
   17c6c:	6f436d65 6f72746e 72656c6c 65533a3a     emController::Se
   17c7c:	75704374 636f6c43 7669446b 72656469     tCpuClockDivider
   17c8c:	6e697528 745f3874 ffff0029              (uint8_t)...

00017c98 <Timer::Initialize(unsigned long, void (*)(), long)::__PRETTY_FUNCTION__>:
   17c98:	74726976 206c6175 64696f76 6d695420     virtual void Tim
   17ca8:	3a3a7265 74696e49 696c6169 7528657a     er::Initialize(u
   17cb8:	33746e69 2c745f32 72734920 6e696f50     int32_t, IsrPoin
   17cc8:	2c726574 746e6920 745f3233 ffff0029     ter, int32_t)...

00017cd8 <LowLevelInit()::__PRETTY_FUNCTION__>:
   17cd8:	64696f76 776f4c20 6576654c 696e496c     void LowLevelIni
   17ce8:	00292874 63617453 6544206b 20687470     t().Stack Depth 
   17cf8:	7a25203d 00000a64 25232020 203a757a     = %zd...  #%zu: 
   17d08:	70257830 0000000a 6e75520a 6874203a     0x%p.....Run: th
   17d18:	6f662065 776f6c6c 20676e69 6d6d6f63     e following comm
   17d28:	20646e61 79206e69 2072756f 6a6f7270     and in your proj
   17d38:	20746365 65726964 726f7463 00000079     ect directory...
   17d48:	1b20200a 333b315b 616d6d37 7320656b     .  .[1;37mmake s
   17d58:	6b636174 63617274 73252d65 41525420     tacktrace-%s TRA
   17d68:	3d534543 00000022 70257830 00000000     CES="...0x%p....
   17d78:	25783020 00000070 5b1b0a22 00006d30      0x%p..."..[0m..
   17d88:	73696854 6c697720 6572206c 74726f70     This will report
   17d98:	65687420 6c696620 6e612065 696c2064      the file and li
   17da8:	6e20656e 65626d75 68742072 6c207461     ne number that l
   17db8:	74206465 6874206f 66207369 74636e75     ed to this funct
   17dc8:	206e6f69 6e696562 61632067 64656c6c     ion being called
   17dd8:	0000002e 6c707061 74616369 006e6f69     ....application.
   17de8:	31345b1b 4952436d 41434954 305b1b4c     .[41mCRITICAL.[0
   17df8:	6d34393b 3a73253a 3b305b1b 256d3239     ;94m:%s:.[0;92m%
   17e08:	5b1b3a73 33393b30 3e64256d 305b1b20     s:.[0;93m%d> .[0
   17e18:	6d37333b 65737341 6f697472 6146206e     ;37mAssertion Fa
   17e28:	72756c69 43202c65 69646e6f 6e6f6974     ilure, Condition
   17e38:	73655420 3a646574 73692820 3d212072      Tested: (isr !=
   17e48:	746e4920 75727265 6f4c7470 70756b6f      InterruptLookup
   17e58:	646e6148 2972656c 2020200a 20202020     Handler).       
   17e68:	4e202020 5349206f 6f662052 20646e75        No ISR found 
   17e78:	20726f66 20656874 74636576 2520726f     for the vector %
   17e88:	305b1b75 305b1b6d 00000a6d 6972500a     u.[0m.[0m....Pri
   17e98:	6e69746e 74532067 206b6361 63617254     nting Stack Trac
   17ea8:	000a3a65 31345b1b 7261486d 61462064     e:...[41mHard Fa
   17eb8:	20746c75 65637845 6f697470 634f206e     ult Exception Oc
   17ec8:	72727563 0a216465 6d305b1b 00000000     curred!..[0m....
   17ed8:	203a3072 30257830 2c586c38 3a317220     r0: 0x%08lX, r1:
   17ee8:	25783020 586c3830 3272202c 7830203a      0x%08lX, r2: 0x
   17ef8:	6c383025 72202c58 30203a33 38302578     %08lX, r3: 0x%08
   17f08:	000a586c 3a323172 25783020 586c3830     lX..r12: 0x%08lX
   17f18:	726c202c 7830203a 6c383025 70202c58     , lr: 0x%08lX, p
   17f28:	30203a63 38302578 202c586c 3a727370     c: 0x%08lX, psr:
   17f38:	25783020 586c3830 ffff000a               0x%08lX....

00017f44 <InterruptLookupHandler::file>:
   17f44:	65746e69 70757272 70632e74 ffff0070     interrupt.cpp...

00017f54 <InterruptLookupHandler::__PRETTY_FUNCTION__>:
   17f54:	64696f76 746e4920 75727265 6f4c7470     void InterruptLo
   17f64:	70756b6f 646e6148 2872656c ffff0029     okupHandler()...

00017f74 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)::pow10>:
   17f74:	3f800000 41200000 42c80000 447a0000     ...?.. A...B..zD
   17f84:	461c4000 47c35000 49742400 4b189680     .@.F.P.G.$tI...K
   17f94:	4cbebc20 4e6e6b28 63617453 6544206b      ..L(knNStack De
   17fa4:	20687470 7a25203d 00000a64 25232020     pth = %zd...  #%
   17fb4:	203a757a 70257830 0000000a 6e75520a     zu: 0x%p.....Run
   17fc4:	6874203a 6f662065 776f6c6c 20676e69     : the following 
   17fd4:	6d6d6f63 20646e61 79206e69 2072756f     command in your 
   17fe4:	6a6f7270 20746365 65726964 726f7463     project director
   17ff4:	00000079 1b20200a 333b315b 616d6d37     y....  .[1;37mma
   18004:	7320656b 6b636174 63617274 73252d65     ke stacktrace-%s
   18014:	41525420 3d534543 00000022 70257830      TRACES="...0x%p
   18024:	00000000 25783020 00000070 5b1b0a22     .... 0x%p..."..[
   18034:	00006d30 73696854 6c697720 6572206c     0m..This will re
   18044:	74726f70 65687420 6c696620 6e612065     port the file an
   18054:	696c2064 6e20656e 65626d75 68742072     d line number th
   18064:	6c207461 74206465 6874206f 66207369     at led to this f
   18074:	74636e75 206e6f69 6e696562 61632067     unction being ca
   18084:	64656c6c 0000002e 6c707061 74616369     lled....applicat
   18094:	006e6f69 33345b1b 4157206d 4e494e52     ion..[43m WARNIN
   180a4:	305b1b47 6d34393b 3a73253a 3b305b1b     G.[0;94m:%s:.[0;
   180b4:	256d3239 5b1b3a73 33393b30 3e64256d     92m%s:.[0;93m%d>
   180c4:	305b1b20 6d37333b 74726f50 20642520      .[0;37mPort %d 
   180d4:	6e6e6163 6220746f 73752065 66206465     cannot be used f
   180e4:	4520726f 72657478 206c616e 65746e49     or External Inte
   180f4:	70757272 202e7374 6465654e 206f7420     rrupts. Need to 
   18104:	20657375 4f495047 206e6f20 74726f50     use GPIO on Port
   18114:	6f203020 2e322072 6d305b1b 6d305b1b      0 or 2..[0m.[0m
   18124:	0000000a 33345b1b 4157206d 4e494e52     .....[43m WARNIN
   18134:	305b1b47 6d34393b 3a73253a 3b305b1b     G.[0;94m:%s:.[0;
   18144:	256d3239 5b1b3a73 33393b30 3e64256d     92m%s:.[0;93m%d>
   18154:	305b1b20 6d37333b 65676445 20642520      .[0;37mEdge %d 
   18164:	6e6e6163 6220746f 73752065 66206465     cannot be used f
   18174:	4520726f 72657478 206c616e 65746e49     or External Inte
   18184:	70757272 4e2e7374 20646565 75206f74     rrupts.Need to u
   18194:	61206573 73697220 2c676e69 6c616620     se a rising, fal
   181a4:	676e696c 726f202c 746f6220 6f632068     ling, or both co
   181b4:	6769666e 74617275 2e6e6f69 6d305b1b     nfiguration..[0m
   181c4:	0000000a 31345b1b 4952436d 41434954     .....[41mCRITICA
   181d4:	305b1b4c 6d34393b 3a73253a 3b305b1b     L.[0;94m:%s:.[0;
   181e4:	256d3239 5b1b3a73 33393b30 3e64256d     92m%s:.[0;93m%d>
   181f4:	305b1b20 6d37333b 65737341 6f697472      .[0;37mAssertio
   18204:	6146206e 72756c69 43202c65 69646e6f     n Failure, Condi
   18214:	6e6f6974 73655420 3a646574 65702820     tion Tested: (pe
   18224:	68706972 6c617265 7669645f 72656469     ripheral_divider
   18234:	203d3c20 200a2934 20202020 20202020      <= 4).         
   18244:	76694420 72656469 73756d20 74276e74      Divider mustn't
   18254:	63786520 20646565 5b1b3233 5b1b6d30      exceed 32.[0m.[
   18264:	000a6d30 6972500a 6e69746e 74532067     0m...Printing St
   18274:	206b6361 63617254 000a3a65 31345b1b     ack Trace:...[41
   18284:	4952436d 41434954 305b1b4c 6d34393b     mCRITICAL.[0;94m
   18294:	3a73253a 3b305b1b 256d3239 5b1b3a73     :%s:.[0;92m%s:.[
   182a4:	33393b30 3e64256d 305b1b20 6d37333b     0;93m%d> .[0;37m
   182b4:	65737341 6f697472 6146206e 72756c69     Assertion Failur
   182c4:	43202c65 69646e6f 6e6f6974 73655420     e, Condition Tes
   182d4:	3a646574 65642820 65726973 70735f64     ted: (desired_sp
   182e4:	5f646565 6d5f6e69 3c207a68 34383320     eed_in_mhz < 384
   182f4:	20262620 69736564 5f646572 65657073      && desired_spee
   18304:	6e695f64 7a686d5f 31203e20 200a2932     d_in_mhz > 12). 
   18314:	20202020 20202020 65724620 6e657571              Frequen
   18324:	6d207963 20747375 6c206562 7265776f     cy must be lower
   18334:	61687420 3833206e 484d2034 646e617a      than 384 MHzand
   18344:	65726720 72657461 61687420 726f206e      greater than or
   18354:	75716520 74206c61 3231206f 7a484d20      equal to 12 MHz
   18364:	6d305b1b 6d305b1b 0000000a 31345b1b     .[0m.[0m.....[41
   18374:	4952436d 41434954 305b1b4c 6d34393b     mCRITICAL.[0;94m
   18384:	3a73253a 3b305b1b 256d3239 5b1b3a73     :%s:.[0;92m%s:.[
   18394:	33393b30 3e64256d 305b1b20 6d37333b     0;93m%d> .[0;37m
   183a4:	65737341 6f697472 6146206e 72756c69     Assertion Failur
   183b4:	43202c65 69646e6f 6e6f6974 73655420     e, Condition Tes
   183c4:	3a646574 69642820 65646976 61765f72     ted: (divider_va
   183d4:	2065756c 2938203c 2020200a 20202020     lue < 8).       
   183e4:	50202020 64204c4c 64697669 76207265        PLL divider v
   183f4:	65756c61 6e657720 756f2074 666f2074     alue went out of
   18404:	756f6220 1b73646e 1b6d305b 0a6d305b      bounds.[0m.[0m.
   18414:	00000000 31345b1b 4952436d 41434954     .....[41mCRITICA
   18424:	305b1b4c 6d34393b 3a73253a 3b305b1b     L.[0;94m:%s:.[0;
   18434:	256d3239 5b1b3a73 33393b30 3e64256d     92m%s:.[0;93m%d>
   18444:	305b1b20 6d37333b 65737341 6f697472      .[0;37mAssertio
   18454:	6146206e 72756c69 43202c65 69646e6f     n Failure, Condi
   18464:	6e6f6974 73655420 3a646574 61662820     tion Tested: (fa
   18474:	2965736c 2020200a 20202020 50202020     lse).          P
   18484:	6c204c4c 206b636f 6c756f63 6f6e2064     LL lock could no
   18494:	65622074 74736520 696c6261 64656873     t be established
   184a4:	66656220 2065726f 656d6974 1b74756f      before timeout.
   184b4:	1b6d305b 0a6d305b 00000000 31345b1b     [0m.[0m......[41
   184c4:	4952436d 41434954 305b1b4c 6d34393b     mCRITICAL.[0;94m
   184d4:	3a73253a 3b305b1b 256d3239 5b1b3a73     :%s:.[0;92m%s:.[
   184e4:	33393b30 3e64256d 305b1b20 6d37333b     0;93m%d> .[0;37m
   184f4:	65737341 6f697472 6146206e 72756c69     Assertion Failur
   18504:	43202c65 69646e6f 6e6f6974 73655420     e, Condition Tes
   18514:	3a646574 70632820 69645f75 65646976     ted: (cpu_divide
   18524:	203c2072 0a293233 20202020 20202020     r < 32).        
   18534:	69442020 65646976 756d2072 276e7473       Divider mustn'
   18544:	78652074 64656563 1b323320 1b6d305b     t exceed 32.[0m.
   18554:	0a6d305b 00000000 35345b1b 2020206d     [0m......[45m   
   18564:	4f525245 305b1b52 6d34393b 3a73253a     ERROR.[0;94m:%s:
   18574:	3b305b1b 256d3239 5b1b3a73 33393b30     .[0;92m%s:.[0;93
   18584:	3e64256d 305b1b20 6d37333b 6c696146     m%d> .[0;37mFail
   18594:	74206465 6e69206f 61697469 53206574     ed to initiate S
   185a4:	6d204950 2065646f 68746977 74206e69     PI mode within t
   185b4:	6f656d69 202e7475 726f6241 676e6974     imeout. Aborting
   185c4:	305b1b21 00000a6d 35345b1b 2020206d     !.[0m....[45m   
   185d4:	4f525245 305b1b52 6d34393b 3a73253a     ERROR.[0;94m:%s:
   185e4:	3b305b1b 256d3239 5b1b3a73 33393b30     .[0;92m%s:.[0;93
   185f4:	3e64256d 305b1b20 6d37333b 70736552     m%d> .[0;37mResp
   18604:	65736e6f 746e6920 69726765 63207974     onse integrity c
   18614:	6b636568 69616620 2e64656c 6f624120     heck failed. Abo
   18624:	6e697472 5b1b2167 000a6d30 35345b1b     rting!.[0m...[45
   18634:	2020206d 4f525245 305b1b52 6d34393b     m   ERROR.[0;94m
   18644:	3a73253a 3b305b1b 256d3239 5b1b3a73     :%s:.[0;92m%s:.[
   18654:	33393b30 3e64256d 305b1b20 6d37333b     0;93m%d> .[0;37m
   18664:	75736e55 726f7070 20646574 746c6f76     Unsupported volt
   18674:	20656761 75206e69 202e6573 726f6241     age in use. Abor
   18684:	676e6974 305b1b21 00000a6d 35345b1b     ting!.[0m....[45
   18694:	2020206d 4f525245 305b1b52 6d34393b     m   ERROR.[0;94m
   186a4:	3a73253a 3b305b1b 256d3239 5b1b3a73     :%s:.[0;92m%s:.[
   186b4:	33393b30 3e64256d 305b1b20 6d37333b     0;93m%d> .[0;37m
   186c4:	43204453 20647261 656d6974 756f2064     SD Card timed ou
   186d4:	41202e74 74726f62 21676e69 6d305b1b     t. Aborting!.[0m
   186e4:	0000000a 65757274 00000000 736c6166     ....true....fals
   186f4:	00000065 35345b1b 2020206d 4f525245     e....[45m   ERRO
   18704:	305b1b52 6d34393b 3a73253a 3b305b1b     R.[0;94m:%s:.[0;
   18714:	256d3239 5b1b3a73 33393b30 3e64256d     92m%s:.[0;93m%d>
   18724:	305b1b20 6d37333b 6c696857 65522065      .[0;37mWhile Re
   18734:	6e696461 6c422067 206b636f 20642523     ading Block #%d 
   18744:	31435243 5b1b3a36 000a6d30 35345b1b     CRC16:.[0m...[45
   18754:	2020206d 4f525245 305b1b52 6d34393b     m   ERROR.[0;94m
   18764:	3a73253a 3b305b1b 256d3239 5b1b3a73     :%s:.[0;92m%s:.[
   18774:	33393b30 3e64256d 305b1b20 6d37333b     0;93m%d> .[0;37m
   18784:	65707845 64657463 78302720 58343025     Expected '0x%04X
   18794:	305b1b27 00000a6d 35345b1b 2020206d     '.[0m....[45m   
   187a4:	4f525245 305b1b52 6d34393b 3a73253a     ERROR.[0;94m:%s:
   187b4:	3b305b1b 256d3239 5b1b3a73 33393b30     .[0;92m%s:.[0;93
   187c4:	3e64256d 305b1b20 6d37333b 20746f47     m%d> .[0;37mGot 
   187d4:	25783027 27583430 6d305b1b 0000000a     '0x%04X'.[0m....
   187e4:	35345b1b 2020206d 4f525245 305b1b52     .[45m   ERROR.[0
   187f4:	6d34393b 3a73253a 3b305b1b 256d3239     ;94m:%s:.[0;92m%
   18804:	5b1b3a73 33393b30 3e64256d 305b1b20     s:.[0;93m%d> .[0
   18814:	6d37333b 64616552 646d4320 73617720     ;37mRead Cmd was
   18824:	746f6e20 6b636120 6c776f6e 65676465      not acknowledge
   18834:	72702064 7265706f 1b21796c 0a6d305b     d properly!.[0m.
   18844:	00000000 35345b1b 2020206d 4f525245     .....[45m   ERRO
   18854:	305b1b52 6d34393b 3a73253a 3b305b1b     R.[0;94m:%s:.[0;
   18864:	256d3239 5b1b3a73 33393b30 3e64256d     92m%s:.[0;93m%d>
   18874:	305b1b20 6d37333b 61726150 6574656d      .[0;37mParamete
   18884:	72452072 25203a72 305b1b73 00000a6d     r Err: %s.[0m...
   18894:	35345b1b 2020206d 4f525245 305b1b52     .[45m   ERROR.[0
   188a4:	6d34393b 3a73253a 3b305b1b 256d3239     ;94m:%s:.[0;92m%
   188b4:	5b1b3a73 33393b30 3e64256d 305b1b20     s:.[0;93m%d> .[0
   188c4:	6d37333b 72646441 72724520 7325203a     ;37mAddr Err: %s
   188d4:	6d305b1b 0000000a 35345b1b 2020206d     .[0m.....[45m   
   188e4:	4f525245 305b1b52 6d34393b 3a73253a     ERROR.[0;94m:%s:
   188f4:	3b305b1b 256d3239 5b1b3a73 33393b30     .[0;92m%s:.[0;93
   18904:	3e64256d 305b1b20 6d37333b 73617245     m%d> .[0;37mEras
   18914:	65532065 72452071 25203a72 305b1b73     e Seq Err: %s.[0
   18924:	00000a6d 35345b1b 2020206d 4f525245     m....[45m   ERRO
   18934:	305b1b52 6d34393b 3a73253a 3b305b1b     R.[0;94m:%s:.[0;
   18944:	256d3239 5b1b3a73 33393b30 3e64256d     92m%s:.[0;93m%d>
   18954:	305b1b20 6d37333b 206d6f43 20435243      .[0;37mCom CRC 
   18964:	3a727245 1b732520 0a6d305b 00000000     Err: %s.[0m.....
   18974:	35345b1b 2020206d 4f525245 305b1b52     .[45m   ERROR.[0
   18984:	6d34393b 3a73253a 3b305b1b 256d3239     ;94m:%s:.[0;92m%
   18994:	5b1b3a73 33393b30 3e64256d 305b1b20     s:.[0;93m%d> .[0
   189a4:	6d37333b 656c6c49 206c6167 20646d43     ;37mIllegal Cmd 
   189b4:	3a727245 1b732520 0a6d305b 00000000     Err: %s.[0m.....
   189c4:	35345b1b 2020206d 4f525245 305b1b52     .[45m   ERROR.[0
   189d4:	6d34393b 3a73253a 3b305b1b 256d3239     ;94m:%s:.[0;92m%
   189e4:	5b1b3a73 33393b30 3e64256d 305b1b20     s:.[0;93m%d> .[0
   189f4:	6d37333b 73617245 65522065 3a746573     ;37mErase Reset:
   18a04:	1b732520 0a6d305b 00000000 35345b1b      %s.[0m......[45
   18a14:	2020206d 4f525245 305b1b52 6d34393b     m   ERROR.[0;94m
   18a24:	3a73253a 3b305b1b 256d3239 5b1b3a73     :%s:.[0;92m%s:.[
   18a34:	33393b30 3e64256d 305b1b20 6d37333b     0;93m%d> .[0;37m
   18a44:	49206e49 3a656c64 1b732520 0a6d305b     In Idle: %s.[0m.
   18a54:	00000000 35345b1b 2020206d 4f525245     .....[45m   ERRO
   18a64:	305b1b52 6d34393b 3a73253a 3b305b1b     R.[0;94m:%s:.[0;
   18a74:	256d3239 5b1b3a73 33393b30 3e64256d     92m%s:.[0;93m%d>
   18a84:	305b1b20 6d37333b 6c696146 74206465      .[0;37mFailed t
   18a94:	6573206f 74532074 20747261 72646441     o set Start Addr
   18aa4:	21737365 6d305b1b 0000000a 35345b1b     ess!.[0m.....[45
   18ab4:	2020206d 4f525245 305b1b52 6d34393b     m   ERROR.[0;94m
   18ac4:	3a73253a 3b305b1b 256d3239 5b1b3a73     :%s:.[0;92m%s:.[
   18ad4:	33393b30 3e64256d 305b1b20 6d37333b     0;93m%d> .[0;37m
   18ae4:	6c696146 74206465 6573206f 6e452074     Failed to set En
   18af4:	64412064 73657264 5b1b2173 000a6d30     d Address!.[0m..
   18b04:	35345b1b 2020206d 4f525245 305b1b52     .[45m   ERROR.[0
   18b14:	6d34393b 3a73253a 3b305b1b 256d3239     ;94m:%s:.[0;92m%
   18b24:	5b1b3a73 33393b30 3e64256d 305b1b20     s:.[0;93m%d> .[0
   18b34:	6d37333b 6e6b6e55 206e776f 70736572     ;37mUnknown resp
   18b44:	65736e6f 70797420 41202e65 74726f62     onse type. Abort
   18b54:	21676e69 6d305b1b 0000000a 35345b1b     ing!.[0m.....[45
   18b64:	2020206d 4f525245 305b1b52 6d34393b     m   ERROR.[0;94m
   18b74:	3a73253a 3b305b1b 256d3239 5b1b3a73     :%s:.[0;92m%s:.[
   18b84:	33393b30 3e64256d 305b1b20 6d37333b     0;93m%d> .[0;37m
   18b94:	70736552 65736e6f 736e7520 6f707075     Response unsuppo
   18ba4:	64657472 206e6920 20495053 65646f6d     rted in SPI mode
   18bb4:	6241202e 6974726f 1b21676e 0a6d305b     . Aborting!.[0m.
   18bc4:	ffffff00                                ....

00018bc8 <Gpio::ValidPortCheck()::file>:
   18bc8:	6f697067 7070682e ffffff00              gpio.hpp....

00018bd4 <Gpio::SetInterruptEdge(GpioInterface::Edge)::file>:
   18bd4:	6f697067 7070682e ffffff00              gpio.hpp....

00018be0 <Gpio::ClearInterruptEdge(GpioInterface::Edge)::file>:
   18be0:	6f697067 7070682e ffffff00              gpio.hpp....

00018bec <Ssp::kPinSelect>:
   18bec:	ff040202                                ....

00018bf0 <Ssp::kSspPinMatrix>:
   18bf0:	00017ac8 00001200 00017ac8 00001100     .z.......z......
   18c00:	00017ac8 00000f00 00017ac8 00000900     .z.......z......
   18c10:	00017ac8 00000800 00017ac8 00000700     .z.......z......
   18c20:	00017ac8 00000101 00017ac8 00000401     .z.......z......
   18c30:	00017ac8 00000001                       .z......

00018c38 <Ssp::kPowerBit>:
   18c38:	00000015 0000000a 00000014              ............

00018c44 <Sd::kCrcTable8>:
   18c44:	1b120900 3f362d24 535a4148 777e656c     ....$-6?HAZSle~w
   18c54:	020b1019 262f343d 4a435851 6e677c75     ....=4/&QXCJu|gn
   18c64:	29203b32 0d041f16 6168737a 454c575e     2; )....zsha^WLE
   18c74:	3039222b 141d060f 78716a63 5c554e47     +"90....cjqxGNU\
   18c84:	7f766d64 5b524940 373e252c 131a0108     dmv.@IR[,%>7....
   18c94:	666f747d 424b5059 2e273c35 0a031811     }tofYPKB5<'.....
   18ca4:	4d445f56 69607b72 050c171e 2128333a     V_DMr{`i....:3(!
   18cb4:	545d464f 7079626b 1c150e07 38312a23     OF]Tkbyp....#*18
   18cc4:	5a534841 7e776c65 121b0009 363f242d     AHSZelw~....-$?6
   18cd4:	434a5158 676e757c 0b021910 2f263d34     XQJC|ung....4=&/
   18ce4:	68617a73 4c455e57 2029323b 040d161f     szahW^EL;2) ....
   18cf4:	7178636a 555c474e 39302b22 1d140f06     jcxqNG\U"+09....
   18d04:	3e372c25 1a130801 767f646d 525b4049     %,7>....md.vI@[R
   18d14:	272e353c 030a1118 6f667d74 4b425950     <5.'....t}foPYBK
   18d24:	0c051e17 28213a33 444d565f 6069727b     ....3:!(_VMD{ri`
   18d34:	151c070e 3138232a 5d544f46 00706b62     ....*#81FOT]bkp.

00018d44 <Sd::kCrcTable16>:
   18d44:	10210000 30632042 50a54084 70e760c6     ..!.B c0.@.P.`.p
   18d54:	91298108 b16ba14a d1adc18c f1efe1ce     ..).J.k.........
   18d64:	02101231 22523273 429452b5 62d672f7     1...s2R".R.B.r.b
   18d74:	83189339 a35ab37b c39cd3bd e3def3ff     9...{.Z.........
   18d84:	34432462 14010420 74c764e6 548544a4     b$C4 ....d.t.D.T
   18d94:	b54ba56a 95098528 f5cfe5ee d58dc5ac     j.K.(...........
   18da4:	26723653 06301611 66f676d7 46b45695     S6r&..0..v.f.V.F
   18db4:	a77ab75b 87389719 e7fef7df c7bcd79d     [.z...8.........
   18dc4:	58e548c4 78a76886 18610840 38232802     .H.X.h.x@.a..(#8
   18dd4:	d9edc9cc f9afe98e 99698948 b92ba90a     ........H.i...+.
   18de4:	4ad45af5 6a967ab7 0a501a71 2a123a33     .Z.J.z.jq.P.3:.*
   18df4:	cbdcdbfd eb9efbbf 8b589b79 ab1abb3b     ........y.X.;...
   18e04:	7c876ca6 5cc54ce4 3c032c22 1c410c60     .l.|.L.\",.<`.A.
   18e14:	fd8fedae ddcdcdec bd0bad2a 9d498d68     ........*...h.I.
   18e24:	6eb67e97 4ef45ed5 2e323e13 0e701e51     .~.n.^.N.>2.Q.p.
   18e34:	efbeff9f cffcdfdd af3abf1b 8f789f59     ..........:.Y.x.
   18e44:	81a99188 a1ebb1ca c12dd10c e16ff14e     ..........-.N.o.
   18e54:	00a11080 20e330c2 40255004 60677046     .....0. .P%@Fpg`
   18e64:	939883b9 b3daa3fb d31cc33d f35ee37f     ........=.....^.
   18e74:	129002b1 32d222f3 52144235 72566277     .....".25B.RwbVr
   18e84:	a5cbb5ea 858995a8 e54ff56e c50dd52c     ........n.O.,...
   18e94:	24c334e2 048114a0 64477466 44055424     .4.$....ftGd$T.D
   18ea4:	b7faa7db 97b88799 f77ee75f d73cc71d     ........_.~...<.
   18eb4:	36f226d3 16b00691 76766657 56344615     .&.6....Wfvv.F4V
   18ec4:	c96dd94c e92ff90e 89e999c8 a9abb98a     L.m.../.........
   18ed4:	48655844 68277806 08e118c0 28a33882     DXeH.x'h.....8.(
   18ee4:	db5ccb7d fb1eeb3f 9bd88bf9 bb9aabbb     }.\.?...........
   18ef4:	5a544a75 7a166a37 1ad00af1 3a922ab3     uJTZ7j.z.....*.:
   18f04:	ed0ffd2e cd4ddd6c ad8bbdaa 8dc99de8     ....l.M.........
   18f14:	6c077c26 4c455c64 2c833ca2 0cc11ce0     &|.ld\EL.<.,....
   18f24:	ff3eef1f df7ccf5d bfbaaf9b 9ff88fd9     ..>.].|.........
   18f34:	7e366e17 5e744e55 3eb22e93 1ef00ed1     .n6~UNt^...>....

00018f44 <Sd::Mount(SdInterface::CardInfo_t*)::file>:
   18f44:	682e6473 ff007070                       sd.hpp..

00018f4c <Sd::Mount(SdInterface::CardInfo_t*)::file>:
   18f4c:	682e6473 ff007070                       sd.hpp..

00018f54 <Sd::Mount(SdInterface::CardInfo_t*)::file>:
   18f54:	682e6473 ff007070                       sd.hpp..

00018f5c <Sd::Mount(SdInterface::CardInfo_t*)::file>:
   18f5c:	682e6473 ff007070                       sd.hpp..

00018f64 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file>:
   18f64:	682e6473 ff007070                       sd.hpp..

00018f6c <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file>:
   18f6c:	682e6473 ff007070                       sd.hpp..

00018f74 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file>:
   18f74:	682e6473 ff007070                       sd.hpp..

00018f7c <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file>:
   18f7c:	682e6473 ff007070                       sd.hpp..

00018f84 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file>:
   18f84:	682e6473 ff007070                       sd.hpp..

00018f8c <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file>:
   18f8c:	682e6473 ff007070                       sd.hpp..

00018f94 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file>:
   18f94:	682e6473 ff007070                       sd.hpp..

00018f9c <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file>:
   18f9c:	682e6473 ff007070                       sd.hpp..

00018fa4 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file>:
   18fa4:	682e6473 ff007070                       sd.hpp..

00018fac <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file>:
   18fac:	682e6473 ff007070                       sd.hpp..

00018fb4 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file>:
   18fb4:	682e6473 ff007070                       sd.hpp..

00018fbc <Sd::DeleteBlock(unsigned long, unsigned long)::file>:
   18fbc:	682e6473 ff007070                       sd.hpp..

00018fc4 <Sd::DeleteBlock(unsigned long, unsigned long)::file>:
   18fc4:	682e6473 ff007070                       sd.hpp..

00018fcc <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)::file>:
   18fcc:	682e6473 ff007070                       sd.hpp..

00018fd4 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)::file>:
   18fd4:	682e6473 ff007070                       sd.hpp..

00018fdc <vtable for Sd>:
	...
   18fe4:	00016515 0001596d 00015a1d 00015e31     .e..mY...Z..1^..
   18ff4:	00016249 000163f5 000169b5 000169fd     Ib...c...i...i..
   19004:	00016a6d                                mj..

00019008 <vtable for SdInterface>:
	...
   19010:	00016d59 00016d59 00016d59 00016d59     Ym..Ym..Ym..Ym..
   19020:	00016d59 00016d59 00016d59 00016d59     Ym..Ym..Ym..Ym..
   19030:	00016d59                                Ym..

00019034 <vtable for Ssp>:
	...
   1903c:	00014fed 0001096d 000109e5 000150d1     .O..m........P..
   1904c:	000151bd 000153c9 00015529 00015715     .Q...S..)U...W..
   1905c:	fffffffc 00000000 00010d11 00010da1     ................
   1906c:	00010df9 00010e11 00010e25 00010e65     ........%...e...
   1907c:	00010e95                                ....

00019080 <vtable for SspInterface>:
	...
   19088:	00016d59 00016d59 00016d59 00016d59     Ym..Ym..Ym..Ym..
   19098:	00016d59 00016d59 00016d59 00016d59     Ym..Ym..Ym..Ym..

000190a8 <vtable for SystemControllerInterface>:
	...
   190b0:	00016d59 00016d59 00016d59 00016d59     Ym..Ym..Ym..Ym..
   190c0:	00016d59 00016d59 00016d59              Ym..Ym..Ym..

000190cc <vtable for Gpio>:
	...
   190d4:	0001466d 000146e9 00014765 00010835     mF...F..eG..5...
   190e4:	00010899 000108fd 000147a9 00014815     .........G...H..
   190f4:	0001488d 000148fd 00014b95 00014bdd     .H...H...K...K..
   19104:	000149a5 00014a01 00014a85 00014b0d     .I...J...J...K..

00019114 <vtable for GpioInterface>:
	...
   1911c:	00016d59 00016d59 00016d59 00016d59     Ym..Ym..Ym..Ym..
   1912c:	00016d59 00016d59 00016d59 00016d59     Ym..Ym..Ym..Ym..
   1913c:	00016d59 00016d59 00016d59 00016d59     Ym..Ym..Ym..Ym..
   1914c:	00016d59 00016d59 00016d59 00016d59     Ym..Ym..Ym..Ym..

0001915c <vtable for PinInterface>:
	...
   19164:	00016d59 00016d59 00016d59 00016d59     Ym..Ym..Ym..Ym..
   19174:	00016d59 00016d59 00016d59 00016d59     Ym..Ym..Ym..Ym..
   19184:	00016d59 00016d59 00016d59 00016d59     Ym..Ym..Ym..Ym..
   19194:	00016d59                                Ym..

00019198 <Gpio::ClearInterruptEdge(GpioInterface::Edge)::__PRETTY_FUNCTION__>:
   19198:	74726976 206c6175 64696f76 69704720     virtual void Gpi
   191a8:	433a3a6f 7261656c 65746e49 70757272     o::ClearInterrup
   191b8:	67644574 70472865 6e496f69 66726574     tEdge(GpioInterf
   191c8:	3a656361 6764453a ff002965              ace::Edge)..

000191d4 <Gpio::ValidPortCheck()::__PRETTY_FUNCTION__>:
   191d4:	6c6f6f62 69704720 563a3a6f 64696c61     bool Gpio::Valid
   191e4:	74726f50 63656843 0029286b              PortCheck().

000191f0 <Gpio::SetInterruptEdge(GpioInterface::Edge)::__PRETTY_FUNCTION__>:
   191f0:	74726976 206c6175 64696f76 69704720     virtual void Gpi
   19200:	533a3a6f 6e497465 72726574 45747075     o::SetInterruptE
   19210:	28656764 6f697047 65746e49 63616672     dge(GpioInterfac
   19220:	453a3a65 29656764 ffffff00              e::Edge)....

0001922c <Sd::Mount(SdInterface::CardInfo_t*)::__PRETTY_FUNCTION__>:
   1922c:	74726976 206c6175 6c6f6f62 3a645320     virtual bool Sd:
   1923c:	756f4d3a 5328746e 746e4964 61667265     :Mount(SdInterfa
   1924c:	3a3a6563 64726143 6f666e49 292a745f     ce::CardInfo_t*)
   1925c:	ffffff00                                ....

00019260 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::__PRETTY_FUNCTION__>:
   19260:	74726976 206c6175 746e6975 20745f38     virtual uint8_t 
   19270:	3a3a6453 64616552 636f6c42 6975286b     Sd::ReadBlock(ui
   19280:	3233746e 202c745f 746e6975 2a745f38     nt32_t, uint8_t*
   19290:	6975202c 3233746e 0029745f              , uint32_t).

0001929c <Sd::DeleteBlock(unsigned long, unsigned long)::__PRETTY_FUNCTION__>:
   1929c:	74726976 206c6175 746e6975 20745f38     virtual uint8_t 
   192ac:	3a3a6453 656c6544 6c426574 286b636f     Sd::DeleteBlock(
   192bc:	746e6975 745f3233 6975202c 3233746e     uint32_t, uint32
   192cc:	0029745f                                _t).

000192d0 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)::__PRETTY_FUNCTION__>:
   192d0:	74726976 206c6175 746e6975 745f3233     virtual uint32_t
   192e0:	3a645320 6e65533a 646d4364 49645328      Sd::SendCmd(SdI
   192f0:	7265746e 65636166 6f433a3a 6e616d6d     nterface::Comman
   19300:	75202c64 33746e69 2c745f32 6e697520     d, uint32_t, uin
   19310:	745f3874 75202c2a 33746e69 2c745f32     t8_t*, uint32_t,
   19320:	49645320 7265746e 65636166 654b3a3a      SdInterface::Ke
   19330:	6c417065 29657669 ffffff00              epAlive)....

0001933c <__sf_fake_stderr>:
	...

0001935c <__sf_fake_stdin>:
	...

0001937c <__sf_fake_stdout>:
	...
