
build/application/firmware.elf:     file format elf32-littlearm
build/application/firmware.elf
architecture: arm, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000124a5

Program Header:
0x70000001 off    0x000190a0 vaddr 0x000190a0 paddr 0x000190a0 align 2**2
         filesz 0x00000008 memsz 0x00000008 flags r--
    LOAD off    0x00010000 vaddr 0x00010000 paddr 0x00010000 align 2**16
         filesz 0x000090a8 memsz 0x000090a8 flags r-x
    LOAD off    0x00020000 vaddr 0x10000000 paddr 0x000190a8 align 2**16
         filesz 0x00000254 memsz 0x00000254 flags rw-
    LOAD off    0x00020258 vaddr 0x10000258 paddr 0x10000258 align 2**16
         filesz 0x00000000 memsz 0x0000036c flags rw-
private flags = 5000400: [Version5 EABI] [hard-float ABI]

Sections:
Idx Name             Size      VMA       LMA       File off  Algn  Flags
  0 .text            000090a0  00010000  00010000  00010000  2**4  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data            00000254  10000000  000190a8  00020000  2**2  CONTENTS, ALLOC, LOAD, DATA
  2 .data_RAM2       00000000  20000000  20000000  00020254  2**2  CONTENTS
  3 .bss             0000036c  10000258  10000258  00020258  2**3  ALLOC
  4 .ARM.exidx       00000008  000190a0  000190a0  000190a0  2**2  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .uninit_RESERVED 00000000  10000000  10000000  00020254  2**2  CONTENTS
  6 .noinit_RAM2     00000000  20000000  20000000  00020254  2**2  CONTENTS
  7 .noinit          00000000  100005c4  100005c4  00020254  2**2  CONTENTS
  8 .ARM.attributes  00000030  00000000  00000000  00020254  2**0  CONTENTS, READONLY
  9 .comment         0000007e  00000000  00000000  00020284  2**0  CONTENTS, READONLY
 10 .debug_info      000418b5  00000000  00000000  00020302  2**0  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev    00004936  00000000  00000000  00061bb7  2**0  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges   00000cf8  00000000  00000000  000664ed  2**0  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges    00000c68  00000000  00000000  000671e5  2**0  CONTENTS, READONLY, DEBUGGING
 14 .debug_line      000068ec  00000000  00000000  00067e4d  2**0  CONTENTS, READONLY, DEBUGGING
 15 .debug_str       0001a0eb  00000000  00000000  0006e739  2**0  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame     000032f4  00000000  00000000  00088824  2**2  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
00010000 l    d  .text	00000000 .text
10000000 l    d  .data	00000000 .data
20000000 l    d  .data_RAM2	00000000 .data_RAM2
10000258 l    d  .bss	00000000 .bss
000190a0 l    d  .ARM.exidx	00000000 .ARM.exidx
10000000 l    d  .uninit_RESERVED	00000000 .uninit_RESERVED
20000000 l    d  .noinit_RAM2	00000000 .noinit_RAM2
100005c4 l    d  .noinit	00000000 .noinit
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 interrupt.cpp
00012a80 l     F .text	0000002c NVIC_EnableIRQ
00012aac l     F .text	00000054 NVIC_SetPriority
00010000 l     O .text	000000e4 kInterruptVectorTable
00017c48 l     O .text	0000000e InterruptLookupHandler::file
00017c58 l     O .text	0000001e InterruptLookupHandler::__PRETTY_FUNCTION__
0001022c l       .text	00000000 handler2_address_const
00000000 l    df *ABS*	00000000 startup.cpp
0001785c l     O .text	00000049 Lpc40xxSystemController::SetPeripheralClockDivider(unsigned char)::__PRETTY_FUNCTION__
00017904 l     O .text	0000005c Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)::__PRETTY_FUNCTION__
000178a8 l     O .text	0000005a Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)::__PRETTY_FUNCTION__
00017960 l     O .text	0000003a Lpc40xxSystemController::SetCpuClockDivider(unsigned char)::__PRETTY_FUNCTION__
0001799c l     O .text	0000003e Timer::Initialize(unsigned long, void (*)(), long)::__PRETTY_FUNCTION__
100000c4 l     O .data	00000008 (anonymous namespace)::system_timer
100000cc l     O .data	00000004 (anonymous namespace)::system_controller
100000d0 l     O .data	0000000c (anonymous namespace)::timer0
0001234c l     F .text	00000040 (anonymous namespace)::Lpc40xxUptime()
00017744 l     O .text	0000000c LowLevelInit()::file
000179dc l     O .text	00000014 LowLevelInit()::__PRETTY_FUNCTION__
000102fc l     O .text	00000004 kCrpWord
00012994 l     F .text	000000dc __static_initialization_and_destruction_0(int, int)
00012a70 l     F .text	0000000e _GLOBAL__sub_I_UptimeRTOS
00000000 l    df *ABS*	00000000 /mnt/c/SJSU_Dev2/SJSU-Dev2/tools/gcc-arm-none-eabi-7-2017-q4-major/bin/../lib/gcc/arm-none-eabi/7.2.1/thumb/v7e-m/fpv4-sp/hard/crti.o
00000000 l    df *ABS*	00000000 /mnt/c/SJSU_Dev2/SJSU-Dev2/tools/gcc-arm-none-eabi-7-2017-q4-major/bin/../lib/gcc/arm-none-eabi/7.2.1/thumb/v7e-m/fpv4-sp/hard/crtn.o
00000000 l    df *ABS*	00000000 crtstuff.c
00010324 l     F .text	00000000 __do_global_dtors_aux
10000258 l       .bss	00000001 completed.9929
00010348 l     F .text	00000000 frame_dummy
1000025c l       .bss	00000018 object.9934
0001030c l     O .text	00000000 __frame_dummy_init_array_entry
00000000 l    df *ABS*	00000000 diskio.cpp
00018ed8 l     O .text	0000001c Gpio::ValidPortCheck()::__PRETTY_FUNCTION__
00018ef4 l     O .text	00000039 Gpio::SetInterruptEdge(GpioInterface::Edge)::__PRETTY_FUNCTION__
00018e9c l     O .text	0000003b Gpio::ClearInterruptEdge(GpioInterface::Edge)::__PRETTY_FUNCTION__
00018f30 l     O .text	00000031 Sd::Mount(SdInterface::CardInfo_t*)::__PRETTY_FUNCTION__
00018f64 l     O .text	0000003c Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::__PRETTY_FUNCTION__
00018fa0 l     O .text	00000034 Sd::DeleteBlock(unsigned long, unsigned long)::__PRETTY_FUNCTION__
00018fd4 l     O .text	00000069 Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)::__PRETTY_FUNCTION__
10000558 l     O .bss	00000068 (anonymous namespace)::sd_card
00016a70 l     F .text	00000050 __static_initialization_and_destruction_0(int, int)
00016ac0 l     F .text	00000028 _GLOBAL__sub_I_disk_status
00000000 l    df *ABS*	00000000 LabGPIO.cpp
10000000 l     O .data	00000018 GPIO
00000000 l    df *ABS*	00000000 main.cpp
10000278 l     O .bss	00000008 (anonymous namespace)::uptime
000103f4 l     F .text	00000030 (anonymous namespace)::DefaultUptime()
00017004 l     O .text	00000009 main::file
000170a8 l     O .text	0000000b main::__PRETTY_FUNCTION__
0001709c l     O .text	00000009 GpioInterruptCallback()::file
000170b4 l     O .text	0000001d GpioInterruptCallback()::__PRETTY_FUNCTION__
00000000 l    df *ABS*	00000000 newlib.cpp
00000000 l    df *ABS*	00000000 tasks.c
100003e0 l     O .bss	00000064 pxReadyTasksLists
10000444 l     O .bss	00000004 uxTopReadyPriority
10000448 l     O .bss	00000004 xYieldPending
1000044c l     O .bss	00000004 uxSchedulerSuspended
10000450 l     O .bss	00000004 ulTaskSwitchedInTime
10000454 l     O .bss	00000004 ulTotalRunTime
00000000 l    df *ABS*	00000000 port.c
00012f40 l       .text	00000000 pxCurrentTCBConst2
00012fb0 l       .text	00000000 pxCurrentTCBConst
00000000 l    df *ABS*	00000000 printf.cpp
00012fb8 l     F .text	00000030 _out_null(char, void*, unsigned int, unsigned int)
00012fe8 l     F .text	00000044 _out_char(char, void*, unsigned int, unsigned int)
0001302c l     F .text	00000044 _strlen(char const*)
00013070 l     F .text	00000044 _is_digit(char)
000130b4 l     F .text	00000060 _atoi(char const**)
00013114 l     F .text	0000025c _ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)
00013370 l     F .text	000000e4 _ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)
00013454 l     F .text	000000f4 _ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)
00017c78 l     O .text	00000028 _ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)::pow10
00013548 l     F .text	00000438 _ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)
00013980 l     F .text	000008f4 _vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)
00000000 l    df *ABS*	00000000 pure.cc
00000000 l    df *ABS*	00000000 eh_terminate.cc
00000000 l    df *ABS*	00000000 sf_round.c
00000000 l    df *ABS*	00000000 _arm_truncdfsf2.o
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 abort.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 signal.c
00000000 l    df *ABS*	00000000 signalr.c
00000000 l    df *ABS*	00000000 findfp.c
00000000 l    df *ABS*	00000000 eh_term_handler.cc
00000000 l    df *ABS*	00000000 impure.c
100001f4 l     O .data	00000060 impure_data
00000000 l    df *ABS*	00000000 reent.c
00010bb4  w    F .text	0000003e Lpc40xxSystemController::GetPeripheralFrequency() const
00012d24 g     F .text	00000038 putchar
00012b00  w    F .text	0000006c Pwm0IrqHandler
000188d8  w    O .text	00000009 Gpio::SetInterruptEdge(GpioInterface::Edge)::file
00010218 g     F .text	0000001c HardFaultHandler
00012c94 g     F .text	00000024 _getpid
00012ce8 g     F .text	0000003c _putchar
00012b00  w    F .text	0000006c EepromIrqHandler
00012b00  w    F .text	0000006c Timer2IrqHandler
100000b0  w    O .data	00000014 uart0
00012e28 g     F .text	0000002c GetStackDepth()
00018c48  w    O .text	00000007 Sd::Mount(SdInterface::CardInfo_t*)::file
00014bb4  w    F .text	00000024 Lpc40xxSystemController::Lpc40xxSystemController()
0001770c  w    O .text	00000004 Timer::kTimerIrq
00018c80  w    O .text	00000007 Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file
00016fdc g     F .text	00000024 _kill_r
0001010c g       .text	00000000 bss_section_table_end
00014274 g     F .text	0000004c printf
10000048  w    O .data	00000004 SystemTimer::sys_tick
00012b00  w    F .text	0000006c I2c1IrqHandler
0001254c  w    F .text	0000003c void Timer::TimerHandler<(TimerInterface::TimerPort)2>()
10000060  w    O .data	00000010 Uart::uart
00018cb0  w    O .text	00000007 Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file
00010000 g       *ABS*	00000000 __vectors_start__
00010424  w    F .text	00000044 Milliseconds()
00010d18  w    F .text	00000110 Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)
00014bd8  w    F .text	00000034 SspInterface::SspInterface()
00012b00  w    F .text	0000006c BusFaultHandler
100002d8 g     O .bss	00000100 stack_trace
1000004c  w    O .data	00000004 Pin::pin_map
00011b98  w    F .text	000000e4 Uart::Initialize(unsigned long)
20000000 g       *ABS*	00000000 __base_RAM2
000190a8 g       .ARM.exidx	00000000 __exidx_end
00014aa4  w    F .text	0000007c Gpio::ClearEdgeRising()
00011000  w    F .text	00000030 Lpc40xxSystemController::SetEmcClockDivider(Lpc40xxSystemController::EmcDivider)
000188cc  w    O .text	00000009 Gpio::ValidPortCheck()::file
100003dc g     O .bss	00000004 pxCurrentTCB
000142c0  w    F .text	00000034 PinInterface::PinInterface()
00012de4 g     F .text	0000001c __cyg_profile_func_exit
00016744  w    F .text	00000048 Sd::Crc7Add(unsigned char, unsigned char)
0001565c  w    F .text	000000a0 Sd::Sd(Sd::DebugSdCard_t, unsigned char, unsigned char, unsigned char, unsigned char)
000127b4  w    F .text	000000a0 void Timer::ClearInterrupts<(TimerInterface::TimerPort)1>()
100005c0 g     O .bss	00000004 errno
000190a8 g       .ARM.exidx	00000000 _etext
10000040  w    O .data	00000004 Lpc40xxSystemController::system_controller
00010aa0  w    F .text	00000090 Lpc40xxSystemController::SetClockFrequency(unsigned char)
00011968  w    F .text	00000030 unsigned char util::Value<TimerInterface::MatchControlRegister, unsigned char>(TimerInterface::MatchControlRegister)
00010ba0  w    F .text	00000014 Lpc40xxSystemController::GetSystemFrequency() const
0001215c  w    F .text	000001f0 Uart::GenerateUartCalibration(float)
1000001c  w    O .data	00000018 Gpio::gpio_port
00011998  w    F .text	000000f8 Timer::SetTimer(unsigned long, TimerInterface::TimerIsrCondition, TimerInterface::MatchControlRegister)
000123cc  w    F .text	000000bc LowLevelInit()
00012b00  w    F .text	0000006c LcdIrqHandler
00018cd8  w    O .text	00000007 Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)::file
00080000 g       *ABS*	00000000 __top_MFlash512
00010764  w    F .text	0000006c Ssp::Transfer(unsigned short)
00011dfc  w    F .text	000000f8 Uart::Receive(unsigned long)
00010cb8  w    F .text	00000030 Lpc40xxSystemController::SelectUsbClockSource(Lpc40xxSystemController::UsbSource)
00010584  w    F .text	00000030 Delay(unsigned long long)
00017734  w    O .text	00000010 Uart::kPowerbit
00012b00  w    F .text	0000006c I2c2IrqHandler
10000280  w    O .bss	00000004 SystemTimer::system_timer_isr
0001496c  w    F .text	00000040 Gpio::DetachInterrupt()
00012b00  w    F .text	0000006c CanIrqHandler
000116b4  w    F .text	00000074 Pin::EnableDac(bool)
000113e4  w    F .text	0000007c Pin::SetAsAnalogMode(bool)
00010f98  w    F .text	00000068 Lpc40xxSystemController::SetCpuClockDivider(unsigned char)
000167fc  w    F .text	000000fc Sd::GetCrc16(unsigned char*, unsigned short)
00016c14 g     F .text	00000000 .hidden __aeabi_uldivmod
100005c4 g       .noinit	00000000 _noinit
00012d5c g     F .text	00000060 puts
100000dc g     O .data	000000e4 dynamic_isr_vector_table
0001468c  w    F .text	0000002c Gpio::GetPin()
00014734  w    F .text	0000005c Gpio::SetInterruptRoutine(void (*)())
0001434c  w    F .text	00000034 GpioInterface::GpioInterface()
00014bd8  w    F .text	00000034 SspInterface::SspInterface()
00012b00  w    F .text	0000006c RitIrqHandler
00012b00  w    F .text	0000006c Uart2IrqHandler
00011728  w    F .text	00000064 Pin::BitPlace(unsigned long, unsigned long, unsigned long, unsigned long)
000176e4  w    O .text	00000016 Lpc40xxSystemController::SetCpuClockDivider(unsigned char)::file
00018c68  w    O .text	00000007 Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file
00015158  w    F .text	00000160 Ssp::GetPeripheralMode()
00012854  w    F .text	000000a0 void Timer::ClearInterrupts<(TimerInterface::TimerPort)2>()
00016b14 g     F .text	00000060 roundf
00016f7c g     F .text	00000050 _raise_r
00010494  w    F .text	0000002c Wait(unsigned long long)::{lambda()#1}::_FUN()
000106c0  w    F .text	0000002c int util::Value<Ssp::Peripheral, int>(Ssp::Peripheral)
00014c0c  w    F .text	00000038 PinInterface::PinInterface(PinInterface const&)
10010000 g       *ABS*	00000000 __top_RAM
00017730  w    O .text	00000004 Uart::kRxUartPortFunction
00012f50 g     F .text	00000066 xPortPendSVHandler
000104c0  w    F .text	000000c4 Wait(unsigned long long)
00015628  w    F .text	00000034 SdInterface::SdInterface()
00011a90  w    F .text	0000003c Timer::GetTimer()
10000000 g       *ABS*	00000000 __base_RamLoc64
00012e00 g     F .text	00000028 GetStackTrace()
100001c0 g     O .data	00000004 out
10000044  w    O .data	00000004 Lpc40xxSystemController::speed_in_hertz
00018cb8  w    O .text	00000007 Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file
00018ca0  w    O .text	00000007 Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file
00017000 g     F .text	00000004 _getpid_r
00000000 g       *ABS*	00000000 __base_MFlash512
00018d38  w    O .text	0000004c vtable for Ssp
10010000 g       *ABS*	00000000 StackTop
00015b0c  w    F .text	00000064 Sd::WaitToReadBlock()
000188f0  w    O .text	00000003 Ssp::kPinSelect
00016c44 g     F .text	000002cc .hidden __udivmoddi4
00012b00  w    F .text	0000006c I2sIrqHandler
000100fc g       .text	00000000 bss_section_table
00010300 g       .text	00000000 __CRP_WORD_END__
20008000 g       *ABS*	00000000 __top_RAM2
000124a4 g     F .text	00000030 ResetIsr
00015ac8  w    F .text	00000044 Sd::ToBool(bool)
00018d84  w    O .text	00000028 vtable for SspInterface
00012b00  w    F .text	0000006c PendSVHandler
00014ebc  w    F .text	00000030 unsigned char util::Value<SspInterface::DataSize, unsigned char>(SspInterface::DataSize)
000110a0  w    F .text	00000034 SystemTimer::SetIsrFunction(void (*)())
0001092c  w    F .text	00000044 bool bit::Read<unsigned long>(unsigned long, unsigned long)
000106ec  w    F .text	00000078 Ssp::IsTransferRegBusy()
00012b00  w    F .text	0000006c UsageFaultHandler
20000000 g       *ABS*	00000000 __user_heap_base
000190a0 g       .text	00000000 __exidx_start
000115cc  w    F .text	00000074 Pin::EnableI2cHighCurrentDrive(bool)
00012b00  w    F .text	0000006c Uart4IrqHandler
00014790  w    F .text	00000054 Gpio::ClearInterruptRoutine()
00011550  w    F .text	0000007c Pin::EnableI2cHighSpeedMode(bool)
000101fc g     F .text	00000018 InitFpu()
00011460  w    F .text	0000007c Pin::EnableDigitalFilter(bool)
00016f24 g     F .text	00000048 __libc_init_array
00012b00 g     F .text	0000006c InterruptLookupHandler
00010ce8  w    F .text	00000030 Lpc40xxSystemController::SelectSpifiClockSource(Lpc40xxSystemController::SpifiSource)
00010b88  w    F .text	00000018 Lpc40xxSystemController::GetPeripheralClockDivider() const
10000018  w    O .data	00000004 Uptime
00018e18  w    O .text	00000048 vtable for GpioInterface
00011cc8  w    F .text	000000e8 Uart::Send(unsigned char)
00016f14 g     F .text	0000000e abort
00012b00  w    F .text	0000006c BodIrqHandler
000154a4  w    F .text	00000184 Ssp::GetClock()
00010300 g     F .text	00000000 _init
0001010c g       .text	00000000 section_table_end
000128f4  w    F .text	000000a0 void Timer::ClearInterrupts<(TimerInterface::TimerPort)3>()
00016b08 g     F .text	0000000a std::terminate()
00016b74 g     F .text	0000009e .hidden __aeabi_d2f
00014b20  w    F .text	0000007c Gpio::ClearEdgeFalling()
00012b00  w    F .text	0000006c SysTickHandler
000100e4 g       .text	00000000 section_table_start
100005c4 g       .bss	00000000 _ebss
00014a28  w    F .text	0000007c Gpio::SetEdgeFalling()
00018c78  w    O .text	00000007 Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file
00012b00  w    F .text	0000006c RtcIrqHandler
0001461c  w    F .text	00000070 Gpio::Read()
000125c4  w    F .text	000000a8 Status Wait<Uart::Send(unsigned char)::{lambda()#1}>(unsigned long long, Uart::Send(unsigned char)::{lambda()#1})
eff82d3e g       *ABS*	00000000 ValidUserCodeChecksum
00012b00  w    F .text	0000006c Uart0IrqHandler
00012bc8 g     F .text	00000078 GetRegistersFromStack
000168f8  w    F .text	0000003c unsigned long bit::Set<unsigned long>(unsigned long, unsigned long)
00018e60  w    O .text	0000003c vtable for PinInterface
00012b00  w    F .text	0000006c UsbIrqHandler
00012b00  w    F .text	0000006c AdcIrqHandler
00011db0  w    F .text	0000004c Uart::Receive(unsigned long)::{lambda()#1}::operator()() const
00010a70  w    F .text	00000030 SetUptimeFunction(unsigned long long (*)())
00010364 g     F .text	00000048 LabGPIO::LabGPIO(unsigned char, unsigned char)
00019040 g     O .text	00000020 __sf_fake_stderr
00018948  w    O .text	00000100 Sd::kCrcTable8
00016af8 g     F .text	00000010 std::get_terminate()
00012064  w    F .text	00000074 Uart::FractionalEstimate(float, float)
00014814  w    F .text	00000088 Gpio::SetInterruptEdge(GpioInterface::Edge)
00012b00  w    F .text	0000006c EnetIrqHandler
00012b00  w    F .text	0000006c DmaIrqHandler
0001010c g     F .text	00000090 InitDataSection()
00012b6c g     F .text	0000005c RegisterIsr(IRQn, void (*)(), bool, long)
000103ac g     F .text	00000048 LabGPIO::SetAsInput()
00000000 g       *ABS*	00000000 __base_Flash
00012b00  w    F .text	0000006c Eint1IrqHandler
10000034  w    O .data	0000000c Ssp::ssp_registers
00012b00  w    F .text	0000006c SvcHandler
00012b00  w    F .text	0000006c GpioIrqHandler
00018cc8  w    O .text	00000007 Sd::DeleteBlock(unsigned long, unsigned long)::file
00012b00  w    F .text	0000006c SdioIrqHandler
10010000 g       *ABS*	00000000 __top_RamLoc64
10000258 g       .bss	00000000 _bss
00018c60  w    O .text	00000007 Sd::Mount(SdInterface::CardInfo_t*)::file
00012b00  w    F .text	0000006c Pll1IrqHandler
00012b00  w    F .text	0000006c MemManageHandler
00016ae8 g     F .text	00000006 __cxa_pure_virtual
00012b00  w    F .text	0000006c Pwm1IrqHandler
000147e4  w    F .text	00000030 unsigned char util::Value<GpioInterface::Edge, unsigned char>(GpioInterface::Edge)
00012b00  w    F .text	0000006c Timer0IrqHandler
0001266c  w    F .text	000000a8 Status Wait<Uart::Receive(unsigned long)::{lambda()#1}>(unsigned long long, Uart::Receive(unsigned long)::{lambda()#1})
00080000 g       *ABS*	00000000 __top_Flash
000120d8  w    F .text	00000084 Uart::IsDecmial(float)
000152b8  w    F .text	000001ec Ssp::SetClock(bool, bool, unsigned char, unsigned char)
100005c4 g       .noinit	00000000 _end_noinit
00011030  w    F .text	0000003c SystemTimer::DisableTimer()
00016184  w    F .text	00000120 Sd::DeleteBlock(unsigned long, unsigned long)
00012e54 g     F .text	000000c8 vTaskSwitchContext
000169a8  w    F .text	00000054 unsigned long bit::Extract<unsigned long>(unsigned long, unsigned long, unsigned long)
000142f4  w    F .text	00000058 Pin::Pin(unsigned char, unsigned char)
00014f1c  w    F .text	00000030 unsigned char util::Value<SspInterface::MasterSlaveMode, unsigned char>(SspInterface::MasterSlaveMode)
00018c88  w    O .text	00000007 Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file
0001772c  w    O .text	00000004 Uart::kTxUartPortFunction
00012b00  w    F .text	0000006c Uart3IrqHandler
00014b9c  w    F .text	00000018 SystemControllerInterface::SystemControllerInterface()
00018cc0  w    O .text	00000007 Sd::DeleteBlock(unsigned long, unsigned long)::file
20000000 g       *ABS*	00000000 __base_RamPeriph32
000188e4  w    O .text	00000009 Gpio::ClearInterruptEdge(GpioInterface::Edge)::file
100003d8 g     O .bss	00000004 stack_depth
00014538  w    F .text	0000006c Gpio::Toggle()
00018c98  w    O .text	00000007 Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file
00018a48  w    O .text	00000200 Sd::kCrcTable16
10000458  w    O .bss	00000100 Gpio::interrupthandlers
00016f10  w    F .text	00000002 .hidden __aeabi_ldiv0
00012b00  w    F .text	0000006c Timer1IrqHandler
00011ff0  w    F .text	00000074 Uart::DividerEstimate(float, float)
000105b4  w    F .text	00000064 Gpio::SetHigh()
00011ef4  w    F .text	000000fc Uart::FindClosestFractional(float)
00014c98  w    F .text	000000e4 Ssp::Ssp(Ssp::Peripheral)
000100e4 g       .text	00000000 data_section_table
0001127c  w    F .text	00000080 Pin::SetMode(PinInterface::Mode)
0001769c  w    O .text	00000016 Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)::file
00015b70  w    F .text	00000050 Sd::WaitWhileBusy()
00011170  w    F .text	00000094 SystemTimer::SetTickFrequency(unsigned long)
00019060 g     O .text	00000020 __sf_fake_stdin
000169fc  w    F .text	00000074 unsigned long bit::Insert<unsigned long, bool>(unsigned long, bool, unsigned long, unsigned long)
000102fc g       .text	00000000 __CRP_WORD_START__
00017710  w    O .text	00000010 Timer::kTimerIsr
00014924  w    F .text	00000048 Gpio::AttachInterrupt(void (*)(), GpioInterface::Edge)
00012b00  w    F .text	0000006c Uart1IrqHandler
000143fc  w    F .text	0000007c Gpio::SetAsInput()
00012dbc g     F .text	00000028 __cyg_profile_func_enter
00016f6c g     F .text	00000010 memset
000107d0 g     F .text	00000060 main
0001565c  w    F .text	000000a0 Sd::Sd(Sd::DebugSdCard_t, unsigned char, unsigned char, unsigned char, unsigned char)
100001c4  w    O .data	00000028 Gpio::interrupt
00011814  w    F .text	00000020 Timer::DoNothingIsr()
00012b00  w    F .text	0000006c QeiIrqHandler
20000000 g       *ABS*	00000000 heap
00012b00  w    F .text	0000006c Ssp2IrqHandler
0001178c  w    F .text	0000002c Pin::GetPort() const
00015fd8  w    F .text	000001ac Sd::WriteBlock(unsigned long, unsigned char const*, unsigned long)
000142f4  w    F .text	00000058 Pin::Pin(unsigned char, unsigned char)
00016b74 g     F .text	0000009e .hidden __truncdfsf2
00010318 g       .text	00000000 __init_array_end
00012f20 g     F .text	00000026 vPortSVCHandler
00012c40 g     F .text	0000003c FirmwareStdOut(int)
00018ce0  w    O .text	0000002c vtable for Sd
0001489c  w    F .text	00000088 Gpio::ClearInterruptEdge(GpioInterface::Edge)
00012b00  w    F .text	0000006c Ssp1IrqHandler
000124d4  w    F .text	0000003c void Timer::TimerHandler<(TimerInterface::TimerPort)0>()
0001893c  w    O .text	0000000c Ssp::kPowerBit
00010830 g     F .text	00000050 GpioInterruptCallback()
000117b8  w    F .text	0000002c Pin::GetPin() const
00011acc  w    F .text	000000cc Uart::SetBaudRate(unsigned long)
000144f4  w    F .text	00000044 Gpio::SetDirection(GpioInterface::Direction)
00017750  w    O .text	0000003c vtable for Uart
00014478  w    F .text	0000007c Gpio::SetAsOutput()
00018ca8  w    O .text	00000007 Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file
00010e28  w    F .text	00000170 Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)
00010618  w    F .text	00000064 Gpio::SetLow()
00017838  w    O .text	00000024 vtable for Lpc40xxSystemController
00015bc0  w    F .text	00000418 Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)
00018cd0  w    O .text	00000007 Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)::file
00017684  w    O .text	00000016 Lpc40xxSystemController::SetPeripheralClockDivider(unsigned char)::file
00012488 g     F .text	0000001a SystemInit
00011834  w    F .text	00000134 Timer::Initialize(unsigned long, void (*)(), long)
00010bf4  w    F .text	00000030 Lpc40xxSystemController::PowerUpPeripheral(SystemControllerInterface::PeripheralID const&)
20008000 g       *ABS*	00000000 heap_end
00014d7c  w    F .text	000000e4 Ssp::Initialize()
0001778c  w    O .text	00000038 vtable for Timer
00014c0c  w    F .text	00000038 PinInterface::PinInterface(PinInterface const&)
10000050  w    O .data	00000010 Timer::tim_register
00012b00  w    F .text	0000006c Ssp0IrqHandler
00010364 g     F .text	00000048 LabGPIO::LabGPIO(unsigned char, unsigned char)
00010318 g     F .text	00000000 _fini
00012b00  w    F .text	0000006c UsbactivityIrqHandler
0001067c  w    F .text	00000044 Gpio::Set(GpioInterface::State)
00012b00  w    F .text	0000006c Pll0IrqHandler
00014c44  w    F .text	00000054 Pin::Pin(Pin const&)
000100fc g       .text	00000000 data_section_table_end
00012b00  w    F .text	0000006c CanactivityIrqHandler
00012b00  w    F .text	0000006c NmiHandler
000188f4  w    O .text	00000048 Ssp::kSspPinMatrix
000145a4  w    F .text	00000078 Gpio::ReadState()
00018c70  w    O .text	00000007 Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file
100001f0 g     O .data	00000004 _impure_ptr
00010880  w    F .text	000000ac Status Wait<Wait(unsigned long long)::{lambda()#1}>(unsigned long long, Wait(unsigned long long)::{lambda()#1})
10000000 g       .uninit_RESERVED	00000000 _end_uninit_RESERVED
0001678c  w    F .text	00000070 Sd::GetCrc7(unsigned char*, unsigned char)
00012b00  w    F .text	0000006c McpwmIrqHandler
0001030c g       .text	00000000 __preinit_array_end
00012b00  w    F .text	0000006c WdtIrqHandler
00010468  w    F .text	0000002c Wait(unsigned long long)::{lambda()#1}::operator()() const
000162a4  w    F .text	000004a0 Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)
00014bb4  w    F .text	00000024 Lpc40xxSystemController::Lpc40xxSystemController()
000177c4  w    O .text	0000003c vtable for Pin
10000000 g       .data	00000000 _data
00011370  w    F .text	00000074 Pin::SetAsActiveLow(bool)
00010c88  w    F .text	00000030 Lpc40xxSystemController::SelectMainClockSource(Lpc40xxSystemController::MainClockSource)
000149ac  w    F .text	0000007c Gpio::SetEdgeRising()
00018c50  w    O .text	00000007 Sd::Mount(SdInterface::CardInfo_t*)::file
000117e4  w    F .text	00000030 unsigned char util::Value<TimerInterface::TimerPort, unsigned char>(TimerInterface::TimerPort)
100002c4  w    O .bss	00000010 Timer::user_timer_isr
000176b4  w    O .text	00000016 Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)::file
10000284  w    O .bss	00000040 Timer::match
00011c7c  w    F .text	0000004c Uart::Send(unsigned char)::{lambda()#1}::operator()() const
000157ac  w    F .text	0000031c Sd::Mount(SdInterface::CardInfo_t*)
100001ec g     O .data	00000004 __cxxabiv1::__terminate_handler
00018dac  w    O .text	00000024 vtable for SystemControllerInterface
00018dd0  w    O .text	00000048 vtable for Gpio
10000254 g       .data	00000000 _edata
000176fc  w    O .text	00000010 Timer::kPowerbit
00012510  w    F .text	0000003c void Timer::TimerHandler<(TimerInterface::TimerPort)1>()
000112fc  w    F .text	00000074 Pin::EnableHysteresis(bool)
0001434c  w    F .text	00000034 GpioInterface::GpioInterface()
00012b00  w    F .text	0000006c DebugMonHandler
000146b8  w    F .text	0000007c Gpio::ValidPortCheck()
00012b00  w    F .text	0000006c Eint2IrqHandler
20008000 g       *ABS*	00000000 __top_RamPeriph32
00014c98  w    F .text	000000e4 Ssp::Ssp(Ssp::Peripheral)
00012b00  w    F .text	0000006c Timer3IrqHandler
10000000 g       *ABS*	00000000 __base_RAM
00012b00  w    F .text	0000006c Eint3IrqHandler
00016aee g     F .text	00000008 __cxxabiv1::__terminate(void (*)())
00012cb8 g     F .text	00000030 _kill
00012b00  w    F .text	0000006c I2c0IrqHandler
00014c44  w    F .text	00000054 Pin::Pin(Pin const&)
00017720  w    O .text	0000000a Timer::Initialize(unsigned long, void (*)(), long)::file
0001106c  w    F .text	00000034 SystemTimer::SystemTimerHandler()
00018c58  w    O .text	00000007 Sd::Mount(SdInterface::CardInfo_t*)::file
00019080 g     O .text	00000020 __sf_fake_stdout
00010970  w    F .text	00000100 debug::PrintBacktrace(bool, void*)
0001030c g       .text	00000000 __init_array_start
00016f10  w    F .text	00000002 .hidden __aeabi_idiv0
00018d0c  w    O .text	0000002c vtable for SdInterface
000156fc  w    F .text	000000b0 Sd::Initialize()
00012c7c g     F .text	00000018 _exit
000114dc  w    F .text	00000074 Pin::EnableFastMode(bool)
00012714  w    F .text	000000a0 void Timer::ClearInterrupts<(TimerInterface::TimerPort)0>()
00012b00  w    F .text	0000006c Eint0IrqHandler
000110d4  w    F .text	0000009c SystemTimer::StartTimer()
00014eec  w    F .text	00000030 unsigned char util::Value<SspInterface::FrameMode, unsigned char>(SspInterface::FrameMode)
0001019c g     F .text	00000060 InitBssSection()
00014380  w    F .text	0000007c Gpio::Gpio(unsigned char, unsigned char)
0001238c g     F .text	00000040 UptimeRTOS
00011640  w    F .text	00000074 Pin::SetAsOpenDrain(bool)
00017800  w    O .text	00000038 vtable for SystemTimer
00012b00  w    F .text	0000006c SpiIrqHandler
00018c90  w    O .text	00000007 Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file
00014e60  w    F .text	0000005c Ssp::SetSpiMasterDefault()
10000070  w    O .data	00000040 Uart::pairs
00014b9c  w    F .text	00000018 SystemControllerInterface::SystemControllerInterface()
00010c24  w    F .text	00000030 Lpc40xxSystemController::PowerDownPeripheral(SystemControllerInterface::PeripheralID const&)
00015628  w    F .text	00000034 SdInterface::SdInterface()
0001030c g       .text	00000000 __preinit_array_start
000176cc  w    O .text	00000016 Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)::file
00010c54  w    F .text	00000034 Lpc40xxSystemController::SelectOscillatorSource(Lpc40xxSystemController::OscillatorSource)
100002d4  w    O .bss	00000004 guard variable for Timer::match
00014f4c  w    F .text	0000020c Ssp::SetPeripheralMode(SspInterface::MasterSlaveMode, SspInterface::FrameMode, SspInterface::DataSize)
00011204  w    F .text	00000078 Pin::SetPinFunction(unsigned char)
00016934  w    F .text	00000074 unsigned long bit::Insert<unsigned long, unsigned char>(unsigned long, unsigned char, unsigned long, unsigned long)
000142c0  w    F .text	00000034 PinInterface::PinInterface()
00010b30  w    F .text	00000058 Lpc40xxSystemController::SetPeripheralClockDivider(unsigned char)
00014380  w    F .text	0000007c Gpio::Gpio(unsigned char, unsigned char)
00012588  w    F .text	0000003c void Timer::TimerHandler<(TimerInterface::TimerPort)3>()
00016fcc g     F .text	00000010 raise



Disassembly of section .text:

00010000 <kInterruptVectorTable>:
   10000:	00 00 01 10 a5 24 01 00 01 2b 01 00 19 02 01 00     .....$...+......
   10010:	01 2b 01 00 01 2b 01 00 01 2b 01 00 3e 2d f8 ef     .+...+...+..>-..
	...
   1002c:	21 2f 01 00 01 2b 01 00 00 00 00 00 51 2f 01 00     !/...+......Q/..
   1003c:	01 2b 01 00 01 2b 01 00 01 2b 01 00 01 2b 01 00     .+...+...+...+..
   1004c:	01 2b 01 00 01 2b 01 00 01 2b 01 00 01 2b 01 00     .+...+...+...+..
   1005c:	01 2b 01 00 01 2b 01 00 01 2b 01 00 01 2b 01 00     .+...+...+...+..
   1006c:	01 2b 01 00 01 2b 01 00 00 00 00 00 01 2b 01 00     .+...+.......+..
   1007c:	01 2b 01 00 01 2b 01 00 01 2b 01 00 01 2b 01 00     .+...+...+...+..
   1008c:	01 2b 01 00 01 2b 01 00 01 2b 01 00 01 2b 01 00     .+...+...+...+..
   1009c:	01 2b 01 00 01 2b 01 00 01 2b 01 00 01 2b 01 00     .+...+...+...+..
   100ac:	01 2b 01 00 01 2b 01 00 01 2b 01 00 01 2b 01 00     .+...+...+...+..
   100bc:	01 2b 01 00 01 2b 01 00 01 2b 01 00 01 2b 01 00     .+...+...+...+..
   100cc:	01 2b 01 00 01 2b 01 00 01 2b 01 00 01 2b 01 00     .+...+...+...+..
   100dc:	01 2b 01 00 01 2b 01 00                             .+...+..

000100e4 <data_section_table>:
   100e4:	000190a8 	.word	0x000190a8
   100e8:	10000000 	.word	0x10000000
   100ec:	00000254 	.word	0x00000254
   100f0:	000190a8 	.word	0x000190a8
   100f4:	20000000 	.word	0x20000000
   100f8:	00000000 	.word	0x00000000

000100fc <bss_section_table>:
   100fc:	10000258 	.word	0x10000258
   10100:	0000036c 	.word	0x0000036c
   10104:	20000000 	.word	0x20000000
   10108:	00000000 	.word	0x00000000

0001010c <InitDataSection()>:
SJ2_IGNORE_STACK_TRACE(void SystemInit());

// Functions to carry out the initialization of RW and BSS data sections.
SJ2_SECTION(".after_vectors")
void InitDataSection()
{
   1010c:	b086      	sub	sp, #24
  for (int i = 0; &data_section_table[i] < &data_section_table_end; i++)
   1010e:	2300      	movs	r3, #0
   10110:	9305      	str	r3, [sp, #20]
   10112:	9a05      	ldr	r2, [sp, #20]
   10114:	4613      	mov	r3, r2
   10116:	005b      	lsls	r3, r3, #1
   10118:	4413      	add	r3, r2
   1011a:	009b      	lsls	r3, r3, #2
   1011c:	4a1d      	ldr	r2, [pc, #116]	; (10194 <InitDataSection()+0x88>)
   1011e:	4413      	add	r3, r2
   10120:	4a1d      	ldr	r2, [pc, #116]	; (10198 <InitDataSection()+0x8c>)
   10122:	4293      	cmp	r3, r2
   10124:	d233      	bcs.n	1018e <InitDataSection()+0x82>
  {
    uint32_t * rom_location = data_section_table[i].rom_location;
   10126:	491b      	ldr	r1, [pc, #108]	; (10194 <InitDataSection()+0x88>)
   10128:	9a05      	ldr	r2, [sp, #20]
   1012a:	4613      	mov	r3, r2
   1012c:	005b      	lsls	r3, r3, #1
   1012e:	4413      	add	r3, r2
   10130:	009b      	lsls	r3, r3, #2
   10132:	440b      	add	r3, r1
   10134:	681b      	ldr	r3, [r3, #0]
   10136:	9303      	str	r3, [sp, #12]
    uint32_t * ram_location = data_section_table[i].ram_location;
   10138:	4916      	ldr	r1, [pc, #88]	; (10194 <InitDataSection()+0x88>)
   1013a:	9a05      	ldr	r2, [sp, #20]
   1013c:	4613      	mov	r3, r2
   1013e:	005b      	lsls	r3, r3, #1
   10140:	4413      	add	r3, r2
   10142:	009b      	lsls	r3, r3, #2
   10144:	440b      	add	r3, r1
   10146:	685b      	ldr	r3, [r3, #4]
   10148:	9302      	str	r3, [sp, #8]
    uint32_t length         = data_section_table[i].length;
   1014a:	4912      	ldr	r1, [pc, #72]	; (10194 <InitDataSection()+0x88>)
   1014c:	9a05      	ldr	r2, [sp, #20]
   1014e:	4613      	mov	r3, r2
   10150:	005b      	lsls	r3, r3, #1
   10152:	4413      	add	r3, r2
   10154:	009b      	lsls	r3, r3, #2
   10156:	440b      	add	r3, r1
   10158:	3308      	adds	r3, #8
   1015a:	681b      	ldr	r3, [r3, #0]
   1015c:	9301      	str	r3, [sp, #4]
    for (size_t j = 0; j < length; j++)
   1015e:	2300      	movs	r3, #0
   10160:	9304      	str	r3, [sp, #16]
   10162:	9a04      	ldr	r2, [sp, #16]
   10164:	9b01      	ldr	r3, [sp, #4]
   10166:	429a      	cmp	r2, r3
   10168:	d20d      	bcs.n	10186 <InitDataSection()+0x7a>
    {
      ram_location[j] = rom_location[j];
   1016a:	9b04      	ldr	r3, [sp, #16]
   1016c:	009b      	lsls	r3, r3, #2
   1016e:	9a03      	ldr	r2, [sp, #12]
   10170:	441a      	add	r2, r3
   10172:	9b04      	ldr	r3, [sp, #16]
   10174:	009b      	lsls	r3, r3, #2
   10176:	9902      	ldr	r1, [sp, #8]
   10178:	440b      	add	r3, r1
   1017a:	6812      	ldr	r2, [r2, #0]
   1017c:	601a      	str	r2, [r3, #0]
    for (size_t j = 0; j < length; j++)
   1017e:	9b04      	ldr	r3, [sp, #16]
   10180:	3301      	adds	r3, #1
   10182:	9304      	str	r3, [sp, #16]
   10184:	e7ed      	b.n	10162 <InitDataSection()+0x56>
  for (int i = 0; &data_section_table[i] < &data_section_table_end; i++)
   10186:	9b05      	ldr	r3, [sp, #20]
   10188:	3301      	adds	r3, #1
   1018a:	9305      	str	r3, [sp, #20]
   1018c:	e7c1      	b.n	10112 <InitDataSection()+0x6>
    }
  }
}
   1018e:	bf00      	nop
   10190:	b006      	add	sp, #24
   10192:	4770      	bx	lr
   10194:	000100e4 	.word	0x000100e4
   10198:	000100fc 	.word	0x000100fc

0001019c <InitBssSection()>:

// Functions to initialization BSS data sections. This is important because
// the std c libs assume that BSS is set to zero.
SJ2_SECTION(".after_vectors")
void InitBssSection()
{
   1019c:	b084      	sub	sp, #16
  for (int i = 0; &bss_section_table[i] < &bss_section_table_end; i++)
   1019e:	2300      	movs	r3, #0
   101a0:	9303      	str	r3, [sp, #12]
   101a2:	9b03      	ldr	r3, [sp, #12]
   101a4:	00db      	lsls	r3, r3, #3
   101a6:	4a13      	ldr	r2, [pc, #76]	; (101f4 <InitBssSection()+0x58>)
   101a8:	4413      	add	r3, r2
   101aa:	4a13      	ldr	r2, [pc, #76]	; (101f8 <InitBssSection()+0x5c>)
   101ac:	4293      	cmp	r3, r2
   101ae:	d21e      	bcs.n	101ee <InitBssSection()+0x52>
  {
    uint32_t * ram_location = bss_section_table[i].ram_location;
   101b0:	4a10      	ldr	r2, [pc, #64]	; (101f4 <InitBssSection()+0x58>)
   101b2:	9b03      	ldr	r3, [sp, #12]
   101b4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
   101b8:	9301      	str	r3, [sp, #4]
    uint32_t length         = bss_section_table[i].length;
   101ba:	4a0e      	ldr	r2, [pc, #56]	; (101f4 <InitBssSection()+0x58>)
   101bc:	9b03      	ldr	r3, [sp, #12]
   101be:	00db      	lsls	r3, r3, #3
   101c0:	4413      	add	r3, r2
   101c2:	685b      	ldr	r3, [r3, #4]
   101c4:	9300      	str	r3, [sp, #0]
    for (size_t j = 0; j < length; j++)
   101c6:	2300      	movs	r3, #0
   101c8:	9302      	str	r3, [sp, #8]
   101ca:	9a02      	ldr	r2, [sp, #8]
   101cc:	9b00      	ldr	r3, [sp, #0]
   101ce:	429a      	cmp	r2, r3
   101d0:	d209      	bcs.n	101e6 <InitBssSection()+0x4a>
    {
      ram_location[j] = 0;
   101d2:	9b02      	ldr	r3, [sp, #8]
   101d4:	009b      	lsls	r3, r3, #2
   101d6:	9a01      	ldr	r2, [sp, #4]
   101d8:	4413      	add	r3, r2
   101da:	2200      	movs	r2, #0
   101dc:	601a      	str	r2, [r3, #0]
    for (size_t j = 0; j < length; j++)
   101de:	9b02      	ldr	r3, [sp, #8]
   101e0:	3301      	adds	r3, #1
   101e2:	9302      	str	r3, [sp, #8]
   101e4:	e7f1      	b.n	101ca <InitBssSection()+0x2e>
  for (int i = 0; &bss_section_table[i] < &bss_section_table_end; i++)
   101e6:	9b03      	ldr	r3, [sp, #12]
   101e8:	3301      	adds	r3, #1
   101ea:	9303      	str	r3, [sp, #12]
   101ec:	e7d9      	b.n	101a2 <InitBssSection()+0x6>
    }
  }
}
   101ee:	bf00      	nop
   101f0:	b004      	add	sp, #16
   101f2:	4770      	bx	lr
   101f4:	000100fc 	.word	0x000100fc
   101f8:	0001010c 	.word	0x0001010c

000101fc <InitFpu()>:
      // Write back the modified value to the CPACR
      "STR     R1, [R0]\n"
      // Wait for store to complete
      "DSB\n"
      // reset pipeline now the FPU is enabled
      "ISB\n");
   101fc:	f8df 0014 	ldr.w	r0, [pc, #20]	; 10214 <InitFpu()+0x18>
   10200:	6801      	ldr	r1, [r0, #0]
   10202:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   10206:	6001      	str	r1, [r0, #0]
   10208:	f3bf 8f4f 	dsb	sy
   1020c:	f3bf 8f6f 	isb	sy
}
   10210:	bf00      	nop
   10212:	4770      	bx	lr
   10214:	e000ed88 	.word	0xe000ed88

00010218 <HardFaultHandler>:
      " mrseq r0, msp                                       \n"
      " mrsne r0, psp                                       \n"
      " ldr r1, [r0, #24]                                   \n"
      " ldr r2, handler2_address_const                      \n"
      " bx r2                                               \n"
      " handler2_address_const: .word GetRegistersFromStack \n");
   10218:	f01e 0f04 	tst.w	lr, #4
   1021c:	bf0c      	ite	eq
   1021e:	f3ef 8008 	mrseq	r0, MSP
   10222:	f3ef 8009 	mrsne	r0, PSP
   10226:	6981      	ldr	r1, [r0, #24]
   10228:	4a00      	ldr	r2, [pc, #0]	; (1022c <handler2_address_const>)
   1022a:	4710      	bx	r2

0001022c <handler2_address_const>:
   1022c:	00012bc9 	.word	0x00012bc9
#endif
}
   10230:	bf00      	nop
   10232:	4770      	bx	lr
   10234:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   10238:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   1023c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   10240:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   10244:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   10248:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   1024c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   10250:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   10254:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   10258:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   1025c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   10260:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   10264:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   10268:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   1026c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   10270:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   10274:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   10278:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   1027c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   10280:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   10284:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   10288:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   1028c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   10290:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   10294:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   10298:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   1029c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102a0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102a4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102a8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102ac:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102b0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102b4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102b8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102bc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102c0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102c4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102c8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102cc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102d0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102d4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102d8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102dc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102e0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102e4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102e8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102ec:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102f0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102f4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102f8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

000102fc <__CRP_WORD_START__>:
   102fc:	ffffffff 	.word	0xffffffff

00010300 <_init>:
   10300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10302:	bf00      	nop
   10304:	bcf8      	pop	{r3, r4, r5, r6, r7}
   10306:	bc08      	pop	{r3}
   10308:	469e      	mov	lr, r3
   1030a:	4770      	bx	lr

0001030c <__init_array_start>:
   1030c:	00010349 	.word	0x00010349
   10310:	00012a71 	.word	0x00012a71
   10314:	00016ac1 	.word	0x00016ac1

00010318 <_fini>:
   10318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1031a:	bf00      	nop
   1031c:	bcf8      	pop	{r3, r4, r5, r6, r7}
   1031e:	bc08      	pop	{r3}
   10320:	469e      	mov	lr, r3
   10322:	4770      	bx	lr

00010324 <__do_global_dtors_aux>:
   10324:	b510      	push	{r4, lr}
   10326:	4c05      	ldr	r4, [pc, #20]	; (1033c <__do_global_dtors_aux+0x18>)
   10328:	7823      	ldrb	r3, [r4, #0]
   1032a:	b933      	cbnz	r3, 1033a <__do_global_dtors_aux+0x16>
   1032c:	4b04      	ldr	r3, [pc, #16]	; (10340 <__do_global_dtors_aux+0x1c>)
   1032e:	b113      	cbz	r3, 10336 <__do_global_dtors_aux+0x12>
   10330:	4804      	ldr	r0, [pc, #16]	; (10344 <__do_global_dtors_aux+0x20>)
   10332:	f3af 8000 	nop.w
   10336:	2301      	movs	r3, #1
   10338:	7023      	strb	r3, [r4, #0]
   1033a:	bd10      	pop	{r4, pc}
   1033c:	10000258 	.word	0x10000258
   10340:	00000000 	.word	0x00000000
   10344:	000190a8 	.word	0x000190a8

00010348 <frame_dummy>:
   10348:	b508      	push	{r3, lr}
   1034a:	4b03      	ldr	r3, [pc, #12]	; (10358 <frame_dummy+0x10>)
   1034c:	b11b      	cbz	r3, 10356 <frame_dummy+0xe>
   1034e:	4903      	ldr	r1, [pc, #12]	; (1035c <frame_dummy+0x14>)
   10350:	4803      	ldr	r0, [pc, #12]	; (10360 <frame_dummy+0x18>)
   10352:	f3af 8000 	nop.w
   10356:	bd08      	pop	{r3, pc}
   10358:	00000000 	.word	0x00000000
   1035c:	1000025c 	.word	0x1000025c
   10360:	000190a8 	.word	0x000190a8

00010364 <LabGPIO::LabGPIO(unsigned char, unsigned char)>:
    inline static LPC_GPIO_TypeDef * GPIO[6] = {LPC_GPIO0, LPC_GPIO1, LPC_GPIO2, LPC_GPIO3, LPC_GPIO4, LPC_GPIO5};
    
    
    IsrPointer LabGPIO::pin_isr_map[kPorts][kPins]={ nullptr};
    
 LabGPIO::LabGPIO(uint8_t port, uint8_t pin){
   10364:	b530      	push	{r4, r5, lr}
   10366:	b083      	sub	sp, #12
   10368:	4675      	mov	r5, lr
   1036a:	9001      	str	r0, [sp, #4]
   1036c:	460b      	mov	r3, r1
   1036e:	f88d 3003 	strb.w	r3, [sp, #3]
   10372:	4613      	mov	r3, r2
   10374:	f88d 3002 	strb.w	r3, [sp, #2]
   10378:	462b      	mov	r3, r5
   1037a:	4619      	mov	r1, r3
   1037c:	480a      	ldr	r0, [pc, #40]	; (103a8 <LabGPIO::LabGPIO(unsigned char, unsigned char)+0x44>)
   1037e:	f002 fd1d 	bl	12dbc <__cyg_profile_func_enter>
    SelPort = port;
   10382:	9b01      	ldr	r3, [sp, #4]
   10384:	f89d 2003 	ldrb.w	r2, [sp, #3]
   10388:	701a      	strb	r2, [r3, #0]
    SelPin = pin;
   1038a:	9b01      	ldr	r3, [sp, #4]
   1038c:	f89d 2002 	ldrb.w	r2, [sp, #2]
   10390:	705a      	strb	r2, [r3, #1]
    
  }
   10392:	9c01      	ldr	r4, [sp, #4]
   10394:	462b      	mov	r3, r5
   10396:	4619      	mov	r1, r3
   10398:	4803      	ldr	r0, [pc, #12]	; (103a8 <LabGPIO::LabGPIO(unsigned char, unsigned char)+0x44>)
   1039a:	f002 fd23 	bl	12de4 <__cyg_profile_func_exit>
   1039e:	4623      	mov	r3, r4
   103a0:	4618      	mov	r0, r3
   103a2:	b003      	add	sp, #12
   103a4:	bd30      	pop	{r4, r5, pc}
   103a6:	bf00      	nop
   103a8:	00010365 	.word	0x00010365

000103ac <LabGPIO::SetAsInput()>:
  void LabGPIO::SetAsInput(){
   103ac:	b510      	push	{r4, lr}
   103ae:	b082      	sub	sp, #8
   103b0:	4674      	mov	r4, lr
   103b2:	9001      	str	r0, [sp, #4]
   103b4:	4623      	mov	r3, r4
   103b6:	4619      	mov	r1, r3
   103b8:	480c      	ldr	r0, [pc, #48]	; (103ec <LabGPIO::SetAsInput()+0x40>)
   103ba:	f002 fcff 	bl	12dbc <__cyg_profile_func_enter>
  /// Sets this GPIO as an input
  
  GPIO[SelPort]->DIR &= ~(0<<SelPin);
   103be:	9b01      	ldr	r3, [sp, #4]
   103c0:	781b      	ldrb	r3, [r3, #0]
   103c2:	461a      	mov	r2, r3
   103c4:	4b0a      	ldr	r3, [pc, #40]	; (103f0 <LabGPIO::SetAsInput()+0x44>)
   103c6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   103ca:	9b01      	ldr	r3, [sp, #4]
   103cc:	781b      	ldrb	r3, [r3, #0]
   103ce:	4619      	mov	r1, r3
   103d0:	4b07      	ldr	r3, [pc, #28]	; (103f0 <LabGPIO::SetAsInput()+0x44>)
   103d2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   103d6:	6812      	ldr	r2, [r2, #0]
   103d8:	601a      	str	r2, [r3, #0]
   103da:	4623      	mov	r3, r4
   103dc:	4619      	mov	r1, r3
   103de:	4803      	ldr	r0, [pc, #12]	; (103ec <LabGPIO::SetAsInput()+0x40>)
   103e0:	f002 fd00 	bl	12de4 <__cyg_profile_func_exit>
  
  }
   103e4:	bf00      	nop
   103e6:	b002      	add	sp, #8
   103e8:	bd10      	pop	{r4, pc}
   103ea:	bf00      	nop
   103ec:	000103ad 	.word	0x000103ad
   103f0:	10000000 	.word	0x10000000

000103f4 <(anonymous namespace)::DefaultUptime()>:
{
// uptime in nanoseconds
inline uint64_t uptime = 0;
// Returns the system uptime in nanoseconds, do not use this function directly
[[gnu::always_inline]] inline uint64_t DefaultUptime()
{
   103f4:	b570      	push	{r4, r5, r6, lr}
   103f6:	4676      	mov	r6, lr
   103f8:	4633      	mov	r3, r6
   103fa:	4619      	mov	r1, r3
   103fc:	4807      	ldr	r0, [pc, #28]	; (1041c <(anonymous namespace)::DefaultUptime()+0x28>)
   103fe:	f002 fcdd 	bl	12dbc <__cyg_profile_func_enter>
  return uptime;
   10402:	4b07      	ldr	r3, [pc, #28]	; (10420 <(anonymous namespace)::DefaultUptime()+0x2c>)
   10404:	e9d3 4500 	ldrd	r4, r5, [r3]
   10408:	4633      	mov	r3, r6
   1040a:	4619      	mov	r1, r3
   1040c:	4803      	ldr	r0, [pc, #12]	; (1041c <(anonymous namespace)::DefaultUptime()+0x28>)
   1040e:	f002 fce9 	bl	12de4 <__cyg_profile_func_exit>
   10412:	4623      	mov	r3, r4
   10414:	462c      	mov	r4, r5
}
   10416:	4618      	mov	r0, r3
   10418:	4621      	mov	r1, r4
   1041a:	bd70      	pop	{r4, r5, r6, pc}
   1041c:	000103f5 	.word	0x000103f5
   10420:	10000278 	.word	0x10000278

00010424 <Milliseconds()>:
{
  Uptime = uptime_function;
}
// Get system uptime in milliseconds as a 64-bit integer
inline uint64_t Milliseconds()
{
   10424:	b570      	push	{r4, r5, r6, lr}
   10426:	4674      	mov	r4, lr
   10428:	4623      	mov	r3, r4
   1042a:	4619      	mov	r1, r3
   1042c:	480c      	ldr	r0, [pc, #48]	; (10460 <Milliseconds()+0x3c>)
   1042e:	f002 fcc5 	bl	12dbc <__cyg_profile_func_enter>
  return Uptime() / 1'000;
   10432:	4b0c      	ldr	r3, [pc, #48]	; (10464 <Milliseconds()+0x40>)
   10434:	681b      	ldr	r3, [r3, #0]
   10436:	4798      	blx	r3
   10438:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1043c:	f04f 0300 	mov.w	r3, #0
   10440:	f006 fbe8 	bl	16c14 <__aeabi_uldivmod>
   10444:	4602      	mov	r2, r0
   10446:	460b      	mov	r3, r1
   10448:	4615      	mov	r5, r2
   1044a:	461e      	mov	r6, r3
   1044c:	4623      	mov	r3, r4
   1044e:	4619      	mov	r1, r3
   10450:	4803      	ldr	r0, [pc, #12]	; (10460 <Milliseconds()+0x3c>)
   10452:	f002 fcc7 	bl	12de4 <__cyg_profile_func_exit>
   10456:	462b      	mov	r3, r5
   10458:	4634      	mov	r4, r6
}
   1045a:	4618      	mov	r0, r3
   1045c:	4621      	mov	r1, r4
   1045e:	bd70      	pop	{r4, r5, r6, pc}
   10460:	00010425 	.word	0x00010425
   10464:	10000018 	.word	0x10000018

00010468 <Wait(unsigned long long)::{lambda()#1}::operator()() const>:
  return status;
}

inline Status Wait(uint64_t timeout)
{
  return Wait(timeout, []() -> bool { return false; });
   10468:	b530      	push	{r4, r5, lr}
   1046a:	b083      	sub	sp, #12
   1046c:	4675      	mov	r5, lr
   1046e:	9001      	str	r0, [sp, #4]
   10470:	462b      	mov	r3, r5
   10472:	4619      	mov	r1, r3
   10474:	4806      	ldr	r0, [pc, #24]	; (10490 <Wait(unsigned long long)::{lambda()#1}::operator()() const+0x28>)
   10476:	f002 fca1 	bl	12dbc <__cyg_profile_func_enter>
   1047a:	2400      	movs	r4, #0
   1047c:	462b      	mov	r3, r5
   1047e:	4619      	mov	r1, r3
   10480:	4803      	ldr	r0, [pc, #12]	; (10490 <Wait(unsigned long long)::{lambda()#1}::operator()() const+0x28>)
   10482:	f002 fcaf 	bl	12de4 <__cyg_profile_func_exit>
   10486:	4623      	mov	r3, r4
   10488:	4618      	mov	r0, r3
   1048a:	b003      	add	sp, #12
   1048c:	bd30      	pop	{r4, r5, pc}
   1048e:	bf00      	nop
   10490:	00010469 	.word	0x00010469

00010494 <Wait(unsigned long long)::{lambda()#1}::_FUN()>:
   10494:	b538      	push	{r3, r4, r5, lr}
   10496:	4674      	mov	r4, lr
   10498:	4623      	mov	r3, r4
   1049a:	4619      	mov	r1, r3
   1049c:	4807      	ldr	r0, [pc, #28]	; (104bc <Wait(unsigned long long)::{lambda()#1}::_FUN()+0x28>)
   1049e:	f002 fc8d 	bl	12dbc <__cyg_profile_func_enter>
   104a2:	2000      	movs	r0, #0
   104a4:	f7ff ffe0 	bl	10468 <Wait(unsigned long long)::{lambda()#1}::operator()() const>
   104a8:	4603      	mov	r3, r0
   104aa:	461d      	mov	r5, r3
   104ac:	4623      	mov	r3, r4
   104ae:	4619      	mov	r1, r3
   104b0:	4802      	ldr	r0, [pc, #8]	; (104bc <Wait(unsigned long long)::{lambda()#1}::_FUN()+0x28>)
   104b2:	f002 fc97 	bl	12de4 <__cyg_profile_func_exit>
   104b6:	462b      	mov	r3, r5
   104b8:	4618      	mov	r0, r3
   104ba:	bd38      	pop	{r3, r4, r5, pc}
   104bc:	00010495 	.word	0x00010495

000104c0 <Wait(unsigned long long)>:
{
   104c0:	b5f0      	push	{r4, r5, r6, r7, lr}
   104c2:	b089      	sub	sp, #36	; 0x24
   104c4:	4675      	mov	r5, lr
   104c6:	e9cd 0100 	strd	r0, r1, [sp]
   104ca:	462b      	mov	r3, r5
   104cc:	4619      	mov	r1, r3
   104ce:	482b      	ldr	r0, [pc, #172]	; (1057c <Wait(unsigned long long)+0xbc>)
   104d0:	f002 fc74 	bl	12dbc <__cyg_profile_func_enter>
   104d4:	e9dd 3400 	ldrd	r3, r4, [sp]
   104d8:	e9cd 3406 	strd	r3, r4, [sp, #24]
   104dc:	f88d 6008 	strb.w	r6, [sp, #8]
   104e0:	462b      	mov	r3, r5
   104e2:	4619      	mov	r1, r3
   104e4:	4826      	ldr	r0, [pc, #152]	; (10580 <Wait(unsigned long long)+0xc0>)
   104e6:	f002 fc69 	bl	12dbc <__cyg_profile_func_enter>
  uint64_t timeout_time = 0;
   104ea:	f04f 0300 	mov.w	r3, #0
   104ee:	f04f 0400 	mov.w	r4, #0
   104f2:	e9cd 3404 	strd	r3, r4, [sp, #16]
  if (timeout == kMaxWait)
   104f6:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
   104fa:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
   104fe:	bf08      	it	eq
   10500:	f1b3 3fff 	cmpeq.w	r3, #4294967295	; 0xffffffff
   10504:	d106      	bne.n	10514 <Wait(unsigned long long)+0x54>
    timeout_time = kMaxWait;
   10506:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1050a:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   1050e:	e9cd 3404 	strd	r3, r4, [sp, #16]
   10512:	e00a      	b.n	1052a <Wait(unsigned long long)+0x6a>
    timeout_time = Milliseconds() + timeout;
   10514:	f7ff ff86 	bl	10424 <Milliseconds()>
   10518:	460a      	mov	r2, r1
   1051a:	4601      	mov	r1, r0
   1051c:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
   10520:	185e      	adds	r6, r3, r1
   10522:	eb44 0702 	adc.w	r7, r4, r2
   10526:	e9cd 6704 	strd	r6, r7, [sp, #16]
  Status status = Status::kTimedOut;
   1052a:	2301      	movs	r3, #1
   1052c:	9303      	str	r3, [sp, #12]
  while (Milliseconds() < timeout_time)
   1052e:	f7ff ff79 	bl	10424 <Milliseconds()>
   10532:	460a      	mov	r2, r1
   10534:	4601      	mov	r1, r0
   10536:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
   1053a:	42a2      	cmp	r2, r4
   1053c:	bf08      	it	eq
   1053e:	4299      	cmpeq	r1, r3
   10540:	bf34      	ite	cc
   10542:	2301      	movcc	r3, #1
   10544:	2300      	movcs	r3, #0
   10546:	b2db      	uxtb	r3, r3
   10548:	2b00      	cmp	r3, #0
   1054a:	d008      	beq.n	1055e <Wait(unsigned long long)+0x9e>
    if (is_done())
   1054c:	ab02      	add	r3, sp, #8
   1054e:	4618      	mov	r0, r3
   10550:	f7ff ff8a 	bl	10468 <Wait(unsigned long long)::{lambda()#1}::operator()() const>
   10554:	4603      	mov	r3, r0
   10556:	2b00      	cmp	r3, #0
   10558:	d0e9      	beq.n	1052e <Wait(unsigned long long)+0x6e>
      status = Status::kSuccess;
   1055a:	2300      	movs	r3, #0
   1055c:	9303      	str	r3, [sp, #12]
  return status;
   1055e:	9c03      	ldr	r4, [sp, #12]
   10560:	462b      	mov	r3, r5
   10562:	4619      	mov	r1, r3
   10564:	4806      	ldr	r0, [pc, #24]	; (10580 <Wait(unsigned long long)+0xc0>)
   10566:	f002 fc3d 	bl	12de4 <__cyg_profile_func_exit>
   1056a:	462b      	mov	r3, r5
   1056c:	4619      	mov	r1, r3
   1056e:	4803      	ldr	r0, [pc, #12]	; (1057c <Wait(unsigned long long)+0xbc>)
   10570:	f002 fc38 	bl	12de4 <__cyg_profile_func_exit>
  return Wait(timeout, []() -> bool { return false; });
   10574:	4623      	mov	r3, r4
}
   10576:	4618      	mov	r0, r3
   10578:	b009      	add	sp, #36	; 0x24
   1057a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1057c:	000104c1 	.word	0x000104c1
   10580:	00010881 	.word	0x00010881

00010584 <Delay(unsigned long long)>:

// Delay the system for a duration of time
inline void Delay([[maybe_unused]] uint64_t delay_time_ms)
{
   10584:	b510      	push	{r4, lr}
   10586:	b082      	sub	sp, #8
   10588:	4674      	mov	r4, lr
   1058a:	e9cd 0100 	strd	r0, r1, [sp]
   1058e:	4623      	mov	r3, r4
   10590:	4619      	mov	r1, r3
   10592:	4807      	ldr	r0, [pc, #28]	; (105b0 <Delay(unsigned long long)+0x2c>)
   10594:	f002 fc12 	bl	12dbc <__cyg_profile_func_enter>
#if defined(HOST_TEST)
  return;
#else
  Wait(delay_time_ms);
   10598:	e9dd 0100 	ldrd	r0, r1, [sp]
   1059c:	f7ff ff90 	bl	104c0 <Wait(unsigned long long)>
   105a0:	4623      	mov	r3, r4
   105a2:	4619      	mov	r1, r3
   105a4:	4802      	ldr	r0, [pc, #8]	; (105b0 <Delay(unsigned long long)+0x2c>)
   105a6:	f002 fc1d 	bl	12de4 <__cyg_profile_func_exit>
#endif  // HOST_TEST
}
   105aa:	bf00      	nop
   105ac:	b002      	add	sp, #8
   105ae:	bd10      	pop	{r4, pc}
   105b0:	00010585 	.word	0x00010585

000105b4 <Gpio::SetHigh()>:
  inline void SetDirection(Direction direction) override
  {
    (direction) ? SetAsOutput() : SetAsInput();
  }
  // Sets the GPIO output pin to high
  void SetHigh(void) override
   105b4:	b530      	push	{r4, r5, lr}
   105b6:	b083      	sub	sp, #12
   105b8:	4675      	mov	r5, lr
   105ba:	9001      	str	r0, [sp, #4]
   105bc:	462b      	mov	r3, r5
   105be:	4619      	mov	r1, r3
   105c0:	4813      	ldr	r0, [pc, #76]	; (10610 <Gpio::SetHigh()+0x5c>)
   105c2:	f002 fbfb 	bl	12dbc <__cyg_profile_func_enter>
  {
    gpio_port[pin_->GetPort()]->SET = (1 << pin_->GetPin());
   105c6:	9b01      	ldr	r3, [sp, #4]
   105c8:	689a      	ldr	r2, [r3, #8]
   105ca:	9b01      	ldr	r3, [sp, #4]
   105cc:	689b      	ldr	r3, [r3, #8]
   105ce:	681b      	ldr	r3, [r3, #0]
   105d0:	3330      	adds	r3, #48	; 0x30
   105d2:	681b      	ldr	r3, [r3, #0]
   105d4:	4610      	mov	r0, r2
   105d6:	4798      	blx	r3
   105d8:	4603      	mov	r3, r0
   105da:	461a      	mov	r2, r3
   105dc:	2301      	movs	r3, #1
   105de:	4093      	lsls	r3, r2
   105e0:	461c      	mov	r4, r3
   105e2:	9b01      	ldr	r3, [sp, #4]
   105e4:	689a      	ldr	r2, [r3, #8]
   105e6:	9b01      	ldr	r3, [sp, #4]
   105e8:	689b      	ldr	r3, [r3, #8]
   105ea:	681b      	ldr	r3, [r3, #0]
   105ec:	332c      	adds	r3, #44	; 0x2c
   105ee:	681b      	ldr	r3, [r3, #0]
   105f0:	4610      	mov	r0, r2
   105f2:	4798      	blx	r3
   105f4:	4603      	mov	r3, r0
   105f6:	461a      	mov	r2, r3
   105f8:	4b06      	ldr	r3, [pc, #24]	; (10614 <Gpio::SetHigh()+0x60>)
   105fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   105fe:	619c      	str	r4, [r3, #24]
   10600:	462b      	mov	r3, r5
   10602:	4619      	mov	r1, r3
   10604:	4802      	ldr	r0, [pc, #8]	; (10610 <Gpio::SetHigh()+0x5c>)
   10606:	f002 fbed 	bl	12de4 <__cyg_profile_func_exit>
  }
   1060a:	bf00      	nop
   1060c:	b003      	add	sp, #12
   1060e:	bd30      	pop	{r4, r5, pc}
   10610:	000105b5 	.word	0x000105b5
   10614:	1000001c 	.word	0x1000001c

00010618 <Gpio::SetLow()>:
  // Sets the GPIO output pin to low
  void SetLow(void) override
   10618:	b530      	push	{r4, r5, lr}
   1061a:	b083      	sub	sp, #12
   1061c:	4675      	mov	r5, lr
   1061e:	9001      	str	r0, [sp, #4]
   10620:	462b      	mov	r3, r5
   10622:	4619      	mov	r1, r3
   10624:	4813      	ldr	r0, [pc, #76]	; (10674 <Gpio::SetLow()+0x5c>)
   10626:	f002 fbc9 	bl	12dbc <__cyg_profile_func_enter>
  {
    gpio_port[pin_->GetPort()]->CLR = (1 << pin_->GetPin());
   1062a:	9b01      	ldr	r3, [sp, #4]
   1062c:	689a      	ldr	r2, [r3, #8]
   1062e:	9b01      	ldr	r3, [sp, #4]
   10630:	689b      	ldr	r3, [r3, #8]
   10632:	681b      	ldr	r3, [r3, #0]
   10634:	3330      	adds	r3, #48	; 0x30
   10636:	681b      	ldr	r3, [r3, #0]
   10638:	4610      	mov	r0, r2
   1063a:	4798      	blx	r3
   1063c:	4603      	mov	r3, r0
   1063e:	461a      	mov	r2, r3
   10640:	2301      	movs	r3, #1
   10642:	4093      	lsls	r3, r2
   10644:	461c      	mov	r4, r3
   10646:	9b01      	ldr	r3, [sp, #4]
   10648:	689a      	ldr	r2, [r3, #8]
   1064a:	9b01      	ldr	r3, [sp, #4]
   1064c:	689b      	ldr	r3, [r3, #8]
   1064e:	681b      	ldr	r3, [r3, #0]
   10650:	332c      	adds	r3, #44	; 0x2c
   10652:	681b      	ldr	r3, [r3, #0]
   10654:	4610      	mov	r0, r2
   10656:	4798      	blx	r3
   10658:	4603      	mov	r3, r0
   1065a:	461a      	mov	r2, r3
   1065c:	4b06      	ldr	r3, [pc, #24]	; (10678 <Gpio::SetLow()+0x60>)
   1065e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   10662:	61dc      	str	r4, [r3, #28]
   10664:	462b      	mov	r3, r5
   10666:	4619      	mov	r1, r3
   10668:	4802      	ldr	r0, [pc, #8]	; (10674 <Gpio::SetLow()+0x5c>)
   1066a:	f002 fbbb 	bl	12de4 <__cyg_profile_func_exit>
  }
   1066e:	bf00      	nop
   10670:	b003      	add	sp, #12
   10672:	bd30      	pop	{r4, r5, pc}
   10674:	00010619 	.word	0x00010619
   10678:	1000001c 	.word	0x1000001c

0001067c <Gpio::Set(GpioInterface::State)>:
  // Sets the GPIO output pin to high or low depending on the State enum
  // parameter
  void Set(State output = kHigh) override
   1067c:	b510      	push	{r4, lr}
   1067e:	b082      	sub	sp, #8
   10680:	4674      	mov	r4, lr
   10682:	9001      	str	r0, [sp, #4]
   10684:	460b      	mov	r3, r1
   10686:	f88d 3003 	strb.w	r3, [sp, #3]
   1068a:	4623      	mov	r3, r4
   1068c:	4619      	mov	r1, r3
   1068e:	480b      	ldr	r0, [pc, #44]	; (106bc <Gpio::Set(GpioInterface::State)+0x40>)
   10690:	f002 fb94 	bl	12dbc <__cyg_profile_func_enter>
  {
    (output) ? SetHigh() : SetLow();
   10694:	f89d 3003 	ldrb.w	r3, [sp, #3]
   10698:	2b00      	cmp	r3, #0
   1069a:	d003      	beq.n	106a4 <Gpio::Set(GpioInterface::State)+0x28>
   1069c:	9801      	ldr	r0, [sp, #4]
   1069e:	f7ff ff89 	bl	105b4 <Gpio::SetHigh()>
   106a2:	e002      	b.n	106aa <Gpio::Set(GpioInterface::State)+0x2e>
   106a4:	9801      	ldr	r0, [sp, #4]
   106a6:	f7ff ffb7 	bl	10618 <Gpio::SetLow()>
   106aa:	4623      	mov	r3, r4
   106ac:	4619      	mov	r1, r3
   106ae:	4803      	ldr	r0, [pc, #12]	; (106bc <Gpio::Set(GpioInterface::State)+0x40>)
   106b0:	f002 fb98 	bl	12de4 <__cyg_profile_func_exit>
  }
   106b4:	bf00      	nop
   106b6:	b002      	add	sp, #8
   106b8:	bd10      	pop	{r4, pc}
   106ba:	bf00      	nop
   106bc:	0001067d 	.word	0x0001067d

000106c0 <int util::Value<Ssp::Peripheral, int>(Ssp::Peripheral)>:
//
// @param enum_type_value variable you would like to get the value of.
// @return the value of the enum class type variable of with the underlying
//         type of the enum class.
template <typename Enum, typename Type = typename std::underlying_type_t<Enum>>
constexpr Type Value(Enum enum_type_value)
   106c0:	b530      	push	{r4, r5, lr}
   106c2:	b083      	sub	sp, #12
   106c4:	4675      	mov	r5, lr
   106c6:	9001      	str	r0, [sp, #4]
   106c8:	462b      	mov	r3, r5
   106ca:	4619      	mov	r1, r3
   106cc:	4806      	ldr	r0, [pc, #24]	; (106e8 <int util::Value<Ssp::Peripheral, int>(Ssp::Peripheral)+0x28>)
   106ce:	f002 fb75 	bl	12dbc <__cyg_profile_func_enter>
{
  return static_cast<Type>(enum_type_value);
   106d2:	9c01      	ldr	r4, [sp, #4]
   106d4:	462b      	mov	r3, r5
   106d6:	4619      	mov	r1, r3
   106d8:	4803      	ldr	r0, [pc, #12]	; (106e8 <int util::Value<Ssp::Peripheral, int>(Ssp::Peripheral)+0x28>)
   106da:	f002 fb83 	bl	12de4 <__cyg_profile_func_exit>
   106de:	4623      	mov	r3, r4
}
   106e0:	4618      	mov	r0, r3
   106e2:	b003      	add	sp, #12
   106e4:	bd30      	pop	{r4, r5, pc}
   106e6:	bf00      	nop
   106e8:	000106c1 	.word	0x000106c1

000106ec <Ssp::IsTransferRegBusy()>:
  }

  /// Checks if the SSP controller is idle.
  /// @returns true if the controller is sending or receiving a data frame and
  /// false if it is idle.
  bool IsTransferRegBusy() override
   106ec:	b530      	push	{r4, r5, lr}
   106ee:	b085      	sub	sp, #20
   106f0:	4675      	mov	r5, lr
   106f2:	9001      	str	r0, [sp, #4]
   106f4:	462b      	mov	r3, r5
   106f6:	4619      	mov	r1, r3
   106f8:	4817      	ldr	r0, [pc, #92]	; (10758 <Ssp::IsTransferRegBusy()+0x6c>)
   106fa:	f002 fb5f 	bl	12dbc <__cyg_profile_func_enter>
  {
    return (bit::Read(ssp_registers[util::Value(pssp_)]->SR, kDataLineIdleBit));
   106fe:	9b01      	ldr	r3, [sp, #4]
   10700:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   10702:	4618      	mov	r0, r3
   10704:	f7ff ffdc 	bl	106c0 <int util::Value<Ssp::Peripheral, int>(Ssp::Peripheral)>
   10708:	4602      	mov	r2, r0
   1070a:	4b14      	ldr	r3, [pc, #80]	; (1075c <Ssp::IsTransferRegBusy()+0x70>)
   1070c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   10710:	68db      	ldr	r3, [r3, #12]
   10712:	9303      	str	r3, [sp, #12]
   10714:	2304      	movs	r3, #4
   10716:	9302      	str	r3, [sp, #8]
   10718:	462b      	mov	r3, r5
   1071a:	4619      	mov	r1, r3
   1071c:	4810      	ldr	r0, [pc, #64]	; (10760 <Ssp::IsTransferRegBusy()+0x74>)
   1071e:	f002 fb4d 	bl	12dbc <__cyg_profile_func_enter>
[[gnu::always_inline]][[nodiscard]] constexpr bool Read(T target,
                                                        uint32_t position)
{
  static_assert(std::numeric_limits<T>::is_integer,
                "Read only accepts intergers.");
  return static_cast<bool>(target & (1 << position));
   10722:	2201      	movs	r2, #1
   10724:	9b02      	ldr	r3, [sp, #8]
   10726:	fa02 f303 	lsl.w	r3, r2, r3
   1072a:	461a      	mov	r2, r3
   1072c:	9b03      	ldr	r3, [sp, #12]
   1072e:	4013      	ands	r3, r2
   10730:	2b00      	cmp	r3, #0
   10732:	bf14      	ite	ne
   10734:	2301      	movne	r3, #1
   10736:	2300      	moveq	r3, #0
   10738:	b2dc      	uxtb	r4, r3
   1073a:	462b      	mov	r3, r5
   1073c:	4619      	mov	r1, r3
   1073e:	4808      	ldr	r0, [pc, #32]	; (10760 <Ssp::IsTransferRegBusy()+0x74>)
   10740:	f002 fb50 	bl	12de4 <__cyg_profile_func_exit>
   10744:	462b      	mov	r3, r5
   10746:	4619      	mov	r1, r3
   10748:	4803      	ldr	r0, [pc, #12]	; (10758 <Ssp::IsTransferRegBusy()+0x6c>)
   1074a:	f002 fb4b 	bl	12de4 <__cyg_profile_func_exit>
   1074e:	4623      	mov	r3, r4
  }
   10750:	4618      	mov	r0, r3
   10752:	b005      	add	sp, #20
   10754:	bd30      	pop	{r4, r5, pc}
   10756:	bf00      	nop
   10758:	000106ed 	.word	0x000106ed
   1075c:	10000034 	.word	0x10000034
   10760:	0001092d 	.word	0x0001092d

00010764 <Ssp::Transfer(unsigned short)>:
  /// data register. This functions for both transmitting and
  /// receiving data. It is recommended this region be protected
  /// by a mutex.
  /// @param data - information to be placed in data register
  /// @return - received data from external device
  uint16_t Transfer(uint16_t data) override
   10764:	b530      	push	{r4, r5, lr}
   10766:	b085      	sub	sp, #20
   10768:	4675      	mov	r5, lr
   1076a:	9001      	str	r0, [sp, #4]
   1076c:	460b      	mov	r3, r1
   1076e:	f8ad 3002 	strh.w	r3, [sp, #2]
   10772:	462b      	mov	r3, r5
   10774:	4619      	mov	r1, r3
   10776:	4814      	ldr	r0, [pc, #80]	; (107c8 <Ssp::Transfer(unsigned short)+0x64>)
   10778:	f002 fb20 	bl	12dbc <__cyg_profile_func_enter>
  {
    uint32_t pssp = util::Value(pssp_);
   1077c:	9b01      	ldr	r3, [sp, #4]
   1077e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   10780:	4618      	mov	r0, r3
   10782:	f7ff ff9d 	bl	106c0 <int util::Value<Ssp::Peripheral, int>(Ssp::Peripheral)>
   10786:	4603      	mov	r3, r0
   10788:	9303      	str	r3, [sp, #12]

    ssp_registers[pssp]->DR = data;
   1078a:	4a10      	ldr	r2, [pc, #64]	; (107cc <Ssp::Transfer(unsigned short)+0x68>)
   1078c:	9b03      	ldr	r3, [sp, #12]
   1078e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10792:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   10796:	609a      	str	r2, [r3, #8]
    while (IsTransferRegBusy())
   10798:	9801      	ldr	r0, [sp, #4]
   1079a:	f7ff ffa7 	bl	106ec <Ssp::IsTransferRegBusy()>
   1079e:	4603      	mov	r3, r0
   107a0:	2b00      	cmp	r3, #0
   107a2:	d001      	beq.n	107a8 <Ssp::Transfer(unsigned short)+0x44>
    {
      continue;
   107a4:	bf00      	nop
    while (IsTransferRegBusy())
   107a6:	e7f7      	b.n	10798 <Ssp::Transfer(unsigned short)+0x34>
    }
    return static_cast<uint16_t>(ssp_registers[pssp]->DR);
   107a8:	4a08      	ldr	r2, [pc, #32]	; (107cc <Ssp::Transfer(unsigned short)+0x68>)
   107aa:	9b03      	ldr	r3, [sp, #12]
   107ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   107b0:	689b      	ldr	r3, [r3, #8]
   107b2:	b29c      	uxth	r4, r3
   107b4:	462b      	mov	r3, r5
   107b6:	4619      	mov	r1, r3
   107b8:	4803      	ldr	r0, [pc, #12]	; (107c8 <Ssp::Transfer(unsigned short)+0x64>)
   107ba:	f002 fb13 	bl	12de4 <__cyg_profile_func_exit>
   107be:	4623      	mov	r3, r4
  }
   107c0:	4618      	mov	r0, r3
   107c2:	b005      	add	sp, #20
   107c4:	bd30      	pop	{r4, r5, pc}
   107c6:	bf00      	nop
   107c8:	00010765 	.word	0x00010765
   107cc:	10000034 	.word	0x10000034

000107d0 <main>:
#include "utility/time.hpp"
#include "LabGPIO.hpp"
void GpioInterruptCallback();   

int main() 
{ 
   107d0:	b500      	push	{lr}
   107d2:	b085      	sub	sp, #20
   107d4:	4673      	mov	r3, lr
   107d6:	4619      	mov	r1, r3
   107d8:	480f      	ldr	r0, [pc, #60]	; (10818 <main+0x48>)
   107da:	f002 faef 	bl	12dbc <__cyg_profile_func_enter>
  LOG_INFO("Start");
   107de:	2310      	movs	r3, #16
   107e0:	4a0e      	ldr	r2, [pc, #56]	; (1081c <main+0x4c>)
   107e2:	490f      	ldr	r1, [pc, #60]	; (10820 <main+0x50>)
   107e4:	480f      	ldr	r0, [pc, #60]	; (10824 <main+0x54>)
   107e6:	f003 fd45 	bl	14274 <printf>
  
  // 1) Setup a GPIO on port 2 as an input
  // 2) Configure the GPIO registers to trigger an interrupt on P2.0 rising edge. 
  // 3) Register your callback for the EINT3
  LabGPIO Int(0,29);
   107ea:	ab01      	add	r3, sp, #4
   107ec:	221d      	movs	r2, #29
   107ee:	2100      	movs	r1, #0
   107f0:	4618      	mov	r0, r3
   107f2:	f7ff fdb7 	bl	10364 <LabGPIO::LabGPIO(unsigned char, unsigned char)>
  Int.SetAsInput();
   107f6:	ab01      	add	r3, sp, #4
   107f8:	4618      	mov	r0, r3
   107fa:	f7ff fdd7 	bl	103ac <LabGPIO::SetAsInput()>
  LPC_GPIOINT -> IO0IntEnR = (1<<29);
   107fe:	4b0a      	ldr	r3, [pc, #40]	; (10828 <main+0x58>)
   10800:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   10804:	611a      	str	r2, [r3, #16]
  RegisterIsr(GPIO_IRQn, GpioInterruptCallback);
   10806:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1080a:	2201      	movs	r2, #1
   1080c:	4907      	ldr	r1, [pc, #28]	; (1082c <main+0x5c>)
   1080e:	2026      	movs	r0, #38	; 0x26
   10810:	f002 f9ac 	bl	12b6c <RegisterIsr(IRQn, void (*)(), bool, long)>
  
  while(true)
   10814:	e7fe      	b.n	10814 <main+0x44>
   10816:	bf00      	nop
   10818:	000107d1 	.word	0x000107d1
   1081c:	000170a8 	.word	0x000170a8
   10820:	00017004 	.word	0x00017004
   10824:	00017010 	.word	0x00017010
   10828:	40028080 	.word	0x40028080
   1082c:	00010831 	.word	0x00010831

00010830 <GpioInterruptCallback()>:
  }
  return 0;
     
}
void GpioInterruptCallback()
{
   10830:	b510      	push	{r4, lr}
   10832:	4674      	mov	r4, lr
   10834:	4623      	mov	r3, r4
   10836:	4619      	mov	r1, r3
   10838:	480c      	ldr	r0, [pc, #48]	; (1086c <GpioInterruptCallback()+0x3c>)
   1083a:	f002 fabf 	bl	12dbc <__cyg_profile_func_enter>
    LOG_INFO("In the interrupt");
   1083e:	2323      	movs	r3, #35	; 0x23
   10840:	4a0b      	ldr	r2, [pc, #44]	; (10870 <GpioInterruptCallback()+0x40>)
   10842:	490c      	ldr	r1, [pc, #48]	; (10874 <GpioInterruptCallback()+0x44>)
   10844:	480c      	ldr	r0, [pc, #48]	; (10878 <GpioInterruptCallback()+0x48>)
   10846:	f003 fd15 	bl	14274 <printf>
    Delay(5);
   1084a:	f04f 0005 	mov.w	r0, #5
   1084e:	f04f 0100 	mov.w	r1, #0
   10852:	f7ff fe97 	bl	10584 <Delay(unsigned long long)>
  // 4) For the callback, do anything such as printf or blink and LED here to test your ISR
  // 5) MUST! Clear the source of the GPIO interrupt
    LPC_GPIOINT->IO0IntClr = (1<<29);
   10856:	4b09      	ldr	r3, [pc, #36]	; (1087c <GpioInterruptCallback()+0x4c>)
   10858:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   1085c:	60da      	str	r2, [r3, #12]
   1085e:	4623      	mov	r3, r4
   10860:	4619      	mov	r1, r3
   10862:	4802      	ldr	r0, [pc, #8]	; (1086c <GpioInterruptCallback()+0x3c>)
   10864:	f002 fabe 	bl	12de4 <__cyg_profile_func_exit>
   10868:	bf00      	nop
   1086a:	bd10      	pop	{r4, pc}
   1086c:	00010831 	.word	0x00010831
   10870:	000170b4 	.word	0x000170b4
   10874:	0001709c 	.word	0x0001709c
   10878:	00017050 	.word	0x00017050
   1087c:	40028080 	.word	0x40028080

00010880 <Status Wait<Wait(unsigned long long)::{lambda()#1}>(unsigned long long, Wait(unsigned long long)::{lambda()#1})>:
inline Status Wait(uint64_t timeout, F is_done)
   10880:	e92d 4830 	stmdb	sp!, {r4, r5, fp, lr}
   10884:	b088      	sub	sp, #32
   10886:	4675      	mov	r5, lr
   10888:	e9cd 0102 	strd	r0, r1, [sp, #8]
   1088c:	f88d 2004 	strb.w	r2, [sp, #4]
   10890:	462b      	mov	r3, r5
   10892:	4619      	mov	r1, r3
   10894:	4824      	ldr	r0, [pc, #144]	; (10928 <Status Wait<Wait(unsigned long long)::{lambda()#1}>(unsigned long long, Wait(unsigned long long)::{lambda()#1})+0xa8>)
   10896:	f002 fa91 	bl	12dbc <__cyg_profile_func_enter>
  uint64_t timeout_time = 0;
   1089a:	f04f 0300 	mov.w	r3, #0
   1089e:	f04f 0400 	mov.w	r4, #0
   108a2:	e9cd 3406 	strd	r3, r4, [sp, #24]
  if (timeout == kMaxWait)
   108a6:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
   108aa:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
   108ae:	bf08      	it	eq
   108b0:	f1b3 3fff 	cmpeq.w	r3, #4294967295	; 0xffffffff
   108b4:	d106      	bne.n	108c4 <Status Wait<Wait(unsigned long long)::{lambda()#1}>(unsigned long long, Wait(unsigned long long)::{lambda()#1})+0x44>
    timeout_time = kMaxWait;
   108b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   108ba:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   108be:	e9cd 3406 	strd	r3, r4, [sp, #24]
   108c2:	e00b      	b.n	108dc <Status Wait<Wait(unsigned long long)::{lambda()#1}>(unsigned long long, Wait(unsigned long long)::{lambda()#1})+0x5c>
    timeout_time = Milliseconds() + timeout;
   108c4:	f7ff fdae 	bl	10424 <Milliseconds()>
   108c8:	460a      	mov	r2, r1
   108ca:	4601      	mov	r1, r0
   108cc:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
   108d0:	eb13 0b01 	adds.w	fp, r3, r1
   108d4:	eb44 0c02 	adc.w	ip, r4, r2
   108d8:	e9cd bc06 	strd	fp, ip, [sp, #24]
  Status status = Status::kTimedOut;
   108dc:	2301      	movs	r3, #1
   108de:	9305      	str	r3, [sp, #20]
  while (Milliseconds() < timeout_time)
   108e0:	f7ff fda0 	bl	10424 <Milliseconds()>
   108e4:	460a      	mov	r2, r1
   108e6:	4601      	mov	r1, r0
   108e8:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
   108ec:	42a2      	cmp	r2, r4
   108ee:	bf08      	it	eq
   108f0:	4299      	cmpeq	r1, r3
   108f2:	bf34      	ite	cc
   108f4:	2301      	movcc	r3, #1
   108f6:	2300      	movcs	r3, #0
   108f8:	b2db      	uxtb	r3, r3
   108fa:	2b00      	cmp	r3, #0
   108fc:	d008      	beq.n	10910 <Status Wait<Wait(unsigned long long)::{lambda()#1}>(unsigned long long, Wait(unsigned long long)::{lambda()#1})+0x90>
    if (is_done())
   108fe:	ab01      	add	r3, sp, #4
   10900:	4618      	mov	r0, r3
   10902:	f7ff fdb1 	bl	10468 <Wait(unsigned long long)::{lambda()#1}::operator()() const>
   10906:	4603      	mov	r3, r0
   10908:	2b00      	cmp	r3, #0
   1090a:	d0e9      	beq.n	108e0 <Status Wait<Wait(unsigned long long)::{lambda()#1}>(unsigned long long, Wait(unsigned long long)::{lambda()#1})+0x60>
      status = Status::kSuccess;
   1090c:	2300      	movs	r3, #0
   1090e:	9305      	str	r3, [sp, #20]
  return status;
   10910:	9c05      	ldr	r4, [sp, #20]
   10912:	462b      	mov	r3, r5
   10914:	4619      	mov	r1, r3
   10916:	4804      	ldr	r0, [pc, #16]	; (10928 <Status Wait<Wait(unsigned long long)::{lambda()#1}>(unsigned long long, Wait(unsigned long long)::{lambda()#1})+0xa8>)
   10918:	f002 fa64 	bl	12de4 <__cyg_profile_func_exit>
   1091c:	4623      	mov	r3, r4
}
   1091e:	4618      	mov	r0, r3
   10920:	b008      	add	sp, #32
   10922:	e8bd 8830 	ldmia.w	sp!, {r4, r5, fp, pc}
   10926:	bf00      	nop
   10928:	00010881 	.word	0x00010881

0001092c <bool bit::Read<unsigned long>(unsigned long, unsigned long)>:
[[gnu::always_inline]][[nodiscard]] constexpr bool Read(T target,
   1092c:	b530      	push	{r4, r5, lr}
   1092e:	b083      	sub	sp, #12
   10930:	4675      	mov	r5, lr
   10932:	9001      	str	r0, [sp, #4]
   10934:	9100      	str	r1, [sp, #0]
   10936:	462b      	mov	r3, r5
   10938:	4619      	mov	r1, r3
   1093a:	480c      	ldr	r0, [pc, #48]	; (1096c <bool bit::Read<unsigned long>(unsigned long, unsigned long)+0x40>)
   1093c:	f002 fa3e 	bl	12dbc <__cyg_profile_func_enter>
  return static_cast<bool>(target & (1 << position));
   10940:	2201      	movs	r2, #1
   10942:	9b00      	ldr	r3, [sp, #0]
   10944:	fa02 f303 	lsl.w	r3, r2, r3
   10948:	461a      	mov	r2, r3
   1094a:	9b01      	ldr	r3, [sp, #4]
   1094c:	4013      	ands	r3, r2
   1094e:	2b00      	cmp	r3, #0
   10950:	bf14      	ite	ne
   10952:	2301      	movne	r3, #1
   10954:	2300      	moveq	r3, #0
   10956:	b2dc      	uxtb	r4, r3
   10958:	462b      	mov	r3, r5
   1095a:	4619      	mov	r1, r3
   1095c:	4803      	ldr	r0, [pc, #12]	; (1096c <bool bit::Read<unsigned long>(unsigned long, unsigned long)+0x40>)
   1095e:	f002 fa41 	bl	12de4 <__cyg_profile_func_exit>
   10962:	4623      	mov	r3, r4
}
   10964:	4618      	mov	r0, r3
   10966:	b003      	add	sp, #12
   10968:	bd30      	pop	{r4, r5, pc}
   1096a:	bf00      	nop
   1096c:	0001092d 	.word	0x0001092d

00010970 <debug::PrintBacktrace(bool, void*)>:
}

[[gnu::no_instrument_function]]
inline void PrintBacktrace(bool show_make_command = false,
                           void * final_address   = nullptr)
{
   10970:	b500      	push	{lr}
   10972:	b08b      	sub	sp, #44	; 0x2c
   10974:	4603      	mov	r3, r0
   10976:	9100      	str	r1, [sp, #0]
   10978:	f88d 3007 	strb.w	r3, [sp, #7]
  printf("Stack Depth = %zd\n", GetStackDepth());
   1097c:	f002 fa54 	bl	12e28 <GetStackDepth()>
   10980:	4603      	mov	r3, r0
   10982:	4619      	mov	r1, r3
   10984:	4831      	ldr	r0, [pc, #196]	; (10a4c <debug::PrintBacktrace(bool, void*)+0xdc>)
   10986:	f003 fc75 	bl	14274 <printf>
  // stack_depth-1 to ignore PrintBacktrace()
  // PrintBacktrace shouldn't be ignored in profiling because it causes
  // the exit to still fire, which can result in a negative stack_depth
  void ** list_of_called_functions = GetStackTrace();
   1098a:	f002 fa39 	bl	12e00 <GetStackTrace()>
   1098e:	9007      	str	r0, [sp, #28]
  size_t stack_depth               = GetStackDepth();
   10990:	f002 fa4a 	bl	12e28 <GetStackDepth()>
   10994:	9006      	str	r0, [sp, #24]
  // Ignore the last function as it is the Backtrace function
  for (size_t pos = 0; pos < stack_depth - 1; pos++)
   10996:	2300      	movs	r3, #0
   10998:	9309      	str	r3, [sp, #36]	; 0x24
   1099a:	9b06      	ldr	r3, [sp, #24]
   1099c:	3b01      	subs	r3, #1
   1099e:	9a09      	ldr	r2, [sp, #36]	; 0x24
   109a0:	429a      	cmp	r2, r3
   109a2:	d20d      	bcs.n	109c0 <debug::PrintBacktrace(bool, void*)+0x50>
  {
    printf("  #%zu: 0x%p\n", pos, list_of_called_functions[pos]);
   109a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
   109a6:	009b      	lsls	r3, r3, #2
   109a8:	9a07      	ldr	r2, [sp, #28]
   109aa:	4413      	add	r3, r2
   109ac:	681b      	ldr	r3, [r3, #0]
   109ae:	461a      	mov	r2, r3
   109b0:	9909      	ldr	r1, [sp, #36]	; 0x24
   109b2:	4827      	ldr	r0, [pc, #156]	; (10a50 <debug::PrintBacktrace(bool, void*)+0xe0>)
   109b4:	f003 fc5e 	bl	14274 <printf>
  for (size_t pos = 0; pos < stack_depth - 1; pos++)
   109b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
   109ba:	3301      	adds	r3, #1
   109bc:	9309      	str	r3, [sp, #36]	; 0x24
   109be:	e7ec      	b.n	1099a <debug::PrintBacktrace(bool, void*)+0x2a>
  }
  if (final_address != nullptr)
   109c0:	9b00      	ldr	r3, [sp, #0]
   109c2:	2b00      	cmp	r3, #0
   109c4:	d006      	beq.n	109d4 <debug::PrintBacktrace(bool, void*)+0x64>
  {
    printf("  #%zu: 0x%p\n", stack_depth - 1, final_address);
   109c6:	9b06      	ldr	r3, [sp, #24]
   109c8:	3b01      	subs	r3, #1
   109ca:	9a00      	ldr	r2, [sp, #0]
   109cc:	4619      	mov	r1, r3
   109ce:	4820      	ldr	r0, [pc, #128]	; (10a50 <debug::PrintBacktrace(bool, void*)+0xe0>)
   109d0:	f003 fc50 	bl	14274 <printf>
  }
  if (show_make_command)
   109d4:	f89d 3007 	ldrb.w	r3, [sp, #7]
   109d8:	2b00      	cmp	r3, #0
   109da:	d033      	beq.n	10a44 <debug::PrintBacktrace(bool, void*)+0xd4>
  {
    constexpr const char kBuildType[] =
   109dc:	4a1d      	ldr	r2, [pc, #116]	; (10a54 <debug::PrintBacktrace(bool, void*)+0xe4>)
   109de:	ab03      	add	r3, sp, #12
   109e0:	ca07      	ldmia	r2, {r0, r1, r2}
   109e2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#if defined(APPLICATION)
        "application";
#else
        "bootloader";
#endif
    puts("\nRun: the following command in your project directory");
   109e6:	481c      	ldr	r0, [pc, #112]	; (10a58 <debug::PrintBacktrace(bool, void*)+0xe8>)
   109e8:	f002 f9b8 	bl	12d5c <puts>
    printf("\n  " SJ2_BOLD_WHITE "make stacktrace-%s TRACES=\"", kBuildType);
   109ec:	ab03      	add	r3, sp, #12
   109ee:	4619      	mov	r1, r3
   109f0:	481a      	ldr	r0, [pc, #104]	; (10a5c <debug::PrintBacktrace(bool, void*)+0xec>)
   109f2:	f003 fc3f 	bl	14274 <printf>
    for (size_t pos = 0; pos < stack_depth - 1; pos++)
   109f6:	2300      	movs	r3, #0
   109f8:	9308      	str	r3, [sp, #32]
   109fa:	9b06      	ldr	r3, [sp, #24]
   109fc:	3b01      	subs	r3, #1
   109fe:	9a08      	ldr	r2, [sp, #32]
   10a00:	429a      	cmp	r2, r3
   10a02:	d212      	bcs.n	10a2a <debug::PrintBacktrace(bool, void*)+0xba>
    {
      if (pos != 0)
   10a04:	9b08      	ldr	r3, [sp, #32]
   10a06:	2b00      	cmp	r3, #0
   10a08:	d002      	beq.n	10a10 <debug::PrintBacktrace(bool, void*)+0xa0>
      {
        putchar(' ');
   10a0a:	2020      	movs	r0, #32
   10a0c:	f002 f98a 	bl	12d24 <putchar>
      }
      printf("0x%p", list_of_called_functions[pos]);
   10a10:	9b08      	ldr	r3, [sp, #32]
   10a12:	009b      	lsls	r3, r3, #2
   10a14:	9a07      	ldr	r2, [sp, #28]
   10a16:	4413      	add	r3, r2
   10a18:	681b      	ldr	r3, [r3, #0]
   10a1a:	4619      	mov	r1, r3
   10a1c:	4810      	ldr	r0, [pc, #64]	; (10a60 <debug::PrintBacktrace(bool, void*)+0xf0>)
   10a1e:	f003 fc29 	bl	14274 <printf>
    for (size_t pos = 0; pos < stack_depth - 1; pos++)
   10a22:	9b08      	ldr	r3, [sp, #32]
   10a24:	3301      	adds	r3, #1
   10a26:	9308      	str	r3, [sp, #32]
   10a28:	e7e7      	b.n	109fa <debug::PrintBacktrace(bool, void*)+0x8a>
    }
    if (final_address != nullptr)
   10a2a:	9b00      	ldr	r3, [sp, #0]
   10a2c:	2b00      	cmp	r3, #0
   10a2e:	d003      	beq.n	10a38 <debug::PrintBacktrace(bool, void*)+0xc8>
    {
      printf(" 0x%p", final_address);
   10a30:	9900      	ldr	r1, [sp, #0]
   10a32:	480c      	ldr	r0, [pc, #48]	; (10a64 <debug::PrintBacktrace(bool, void*)+0xf4>)
   10a34:	f003 fc1e 	bl	14274 <printf>
    }
    puts("\"\n" SJ2_COLOR_RESET);
   10a38:	480b      	ldr	r0, [pc, #44]	; (10a68 <debug::PrintBacktrace(bool, void*)+0xf8>)
   10a3a:	f002 f98f 	bl	12d5c <puts>
    puts(
   10a3e:	480b      	ldr	r0, [pc, #44]	; (10a6c <debug::PrintBacktrace(bool, void*)+0xfc>)
   10a40:	f002 f98c 	bl	12d5c <puts>
        "This will report the file and line number that led to this function "
        "being called.");
  }
}
   10a44:	bf00      	nop
   10a46:	b00b      	add	sp, #44	; 0x2c
   10a48:	f85d fb04 	ldr.w	pc, [sp], #4
   10a4c:	000170d4 	.word	0x000170d4
   10a50:	000170e8 	.word	0x000170e8
   10a54:	000171c4 	.word	0x000171c4
   10a58:	000170f8 	.word	0x000170f8
   10a5c:	00017130 	.word	0x00017130
   10a60:	00017158 	.word	0x00017158
   10a64:	00017160 	.word	0x00017160
   10a68:	00017168 	.word	0x00017168
   10a6c:	00017170 	.word	0x00017170

00010a70 <SetUptimeFunction(unsigned long long (*)())>:
{
   10a70:	b510      	push	{r4, lr}
   10a72:	b082      	sub	sp, #8
   10a74:	4674      	mov	r4, lr
   10a76:	9001      	str	r0, [sp, #4]
   10a78:	4623      	mov	r3, r4
   10a7a:	4619      	mov	r1, r3
   10a7c:	4806      	ldr	r0, [pc, #24]	; (10a98 <SetUptimeFunction(unsigned long long (*)())+0x28>)
   10a7e:	f002 f99d 	bl	12dbc <__cyg_profile_func_enter>
  Uptime = uptime_function;
   10a82:	4a06      	ldr	r2, [pc, #24]	; (10a9c <SetUptimeFunction(unsigned long long (*)())+0x2c>)
   10a84:	9b01      	ldr	r3, [sp, #4]
   10a86:	6013      	str	r3, [r2, #0]
   10a88:	4623      	mov	r3, r4
   10a8a:	4619      	mov	r1, r3
   10a8c:	4802      	ldr	r0, [pc, #8]	; (10a98 <SetUptimeFunction(unsigned long long (*)())+0x28>)
   10a8e:	f002 f9a9 	bl	12de4 <__cyg_profile_func_exit>
}
   10a92:	bf00      	nop
   10a94:	b002      	add	sp, #8
   10a96:	bd10      	pop	{r4, pc}
   10a98:	00010a71 	.word	0x00010a71
   10a9c:	10000018 	.word	0x10000018

00010aa0 <Lpc40xxSystemController::SetClockFrequency(unsigned char)>:

  inline static LPC_SC_TypeDef * system_controller = LPC_SC;

  constexpr Lpc40xxSystemController() {}

  uint32_t SetClockFrequency(uint8_t frequency_in_mhz) override
   10aa0:	b500      	push	{lr}
   10aa2:	b085      	sub	sp, #20
   10aa4:	9001      	str	r0, [sp, #4]
   10aa6:	460b      	mov	r3, r1
   10aa8:	f88d 3003 	strb.w	r3, [sp, #3]
  {
    uint32_t offset = 0;
   10aac:	2300      	movs	r3, #0
   10aae:	9303      	str	r3, [sp, #12]
    SelectOscillatorSource(OscillatorSource::kIrc);
   10ab0:	2100      	movs	r1, #0
   10ab2:	9801      	ldr	r0, [sp, #4]
   10ab4:	f000 f8ce 	bl	10c54 <Lpc40xxSystemController::SelectOscillatorSource(Lpc40xxSystemController::OscillatorSource)>
    if (frequency_in_mhz > 12)
   10ab8:	f89d 3003 	ldrb.w	r3, [sp, #3]
   10abc:	2b0c      	cmp	r3, #12
   10abe:	d916      	bls.n	10aee <Lpc40xxSystemController::SetClockFrequency(unsigned char)+0x4e>
    {
      offset = SetMainPll(PllInput::kIrc, frequency_in_mhz);
   10ac0:	f89d 3003 	ldrb.w	r3, [sp, #3]
   10ac4:	b29b      	uxth	r3, r3
   10ac6:	461a      	mov	r2, r3
   10ac8:	210c      	movs	r1, #12
   10aca:	9801      	ldr	r0, [sp, #4]
   10acc:	f000 f9ac 	bl	10e28 <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)>
   10ad0:	9003      	str	r0, [sp, #12]
      SelectMainClockSource(MainClockSource::kPllClock);
   10ad2:	f44f 7180 	mov.w	r1, #256	; 0x100
   10ad6:	9801      	ldr	r0, [sp, #4]
   10ad8:	f000 f8d6 	bl	10c88 <Lpc40xxSystemController::SelectMainClockSource(Lpc40xxSystemController::MainClockSource)>
      speed_in_hertz = frequency_in_mhz * 1'000'000;
   10adc:	f89d 3003 	ldrb.w	r3, [sp, #3]
   10ae0:	4a10      	ldr	r2, [pc, #64]	; (10b24 <Lpc40xxSystemController::SetClockFrequency(unsigned char)+0x84>)
   10ae2:	fb02 f303 	mul.w	r3, r2, r3
   10ae6:	461a      	mov	r2, r3
   10ae8:	4b0f      	ldr	r3, [pc, #60]	; (10b28 <Lpc40xxSystemController::SetClockFrequency(unsigned char)+0x88>)
   10aea:	601a      	str	r2, [r3, #0]
   10aec:	e006      	b.n	10afc <Lpc40xxSystemController::SetClockFrequency(unsigned char)+0x5c>
    }
    else
    {
      SelectMainClockSource(MainClockSource::kBaseClock);
   10aee:	2100      	movs	r1, #0
   10af0:	9801      	ldr	r0, [sp, #4]
   10af2:	f000 f8c9 	bl	10c88 <Lpc40xxSystemController::SelectMainClockSource(Lpc40xxSystemController::MainClockSource)>
      speed_in_hertz = kDefaultIRCFrequency;
   10af6:	4b0c      	ldr	r3, [pc, #48]	; (10b28 <Lpc40xxSystemController::SetClockFrequency(unsigned char)+0x88>)
   10af8:	4a0c      	ldr	r2, [pc, #48]	; (10b2c <Lpc40xxSystemController::SetClockFrequency(unsigned char)+0x8c>)
   10afa:	601a      	str	r2, [r3, #0]
    }
    SetCpuClockDivider(kDivideInputBy1);
   10afc:	2101      	movs	r1, #1
   10afe:	9801      	ldr	r0, [sp, #4]
   10b00:	f000 fa4a 	bl	10f98 <Lpc40xxSystemController::SetCpuClockDivider(unsigned char)>
    SetPeripheralClockDivider(kDivideInputBy1);
   10b04:	9b01      	ldr	r3, [sp, #4]
   10b06:	681b      	ldr	r3, [r3, #0]
   10b08:	3304      	adds	r3, #4
   10b0a:	681b      	ldr	r3, [r3, #0]
   10b0c:	2101      	movs	r1, #1
   10b0e:	9801      	ldr	r0, [sp, #4]
   10b10:	4798      	blx	r3
    SetEmcClockDivider(EmcDivider::kSameSpeedAsCpu);
   10b12:	2100      	movs	r1, #0
   10b14:	9801      	ldr	r0, [sp, #4]
   10b16:	f000 fa73 	bl	11000 <Lpc40xxSystemController::SetEmcClockDivider(Lpc40xxSystemController::EmcDivider)>
    return offset;
   10b1a:	9b03      	ldr	r3, [sp, #12]
  }
   10b1c:	4618      	mov	r0, r3
   10b1e:	b005      	add	sp, #20
   10b20:	f85d fb04 	ldr.w	pc, [sp], #4
   10b24:	000f4240 	.word	0x000f4240
   10b28:	10000044 	.word	0x10000044
   10b2c:	00b71b00 	.word	0x00b71b00

00010b30 <Lpc40xxSystemController::SetPeripheralClockDivider(unsigned char)>:

  void SetPeripheralClockDivider(uint8_t peripheral_divider) override
   10b30:	b500      	push	{lr}
   10b32:	b083      	sub	sp, #12
   10b34:	9001      	str	r0, [sp, #4]
   10b36:	460b      	mov	r3, r1
   10b38:	f88d 3003 	strb.w	r3, [sp, #3]
  {
    SJ2_ASSERT_FATAL(peripheral_divider <= 4, "Divider mustn't exceed 32");
   10b3c:	f89d 3003 	ldrb.w	r3, [sp, #3]
   10b40:	2b04      	cmp	r3, #4
   10b42:	d90d      	bls.n	10b60 <Lpc40xxSystemController::SetPeripheralClockDivider(unsigned char)+0x30>
   10b44:	23ae      	movs	r3, #174	; 0xae
   10b46:	4a0b      	ldr	r2, [pc, #44]	; (10b74 <Lpc40xxSystemController::SetPeripheralClockDivider(unsigned char)+0x44>)
   10b48:	490b      	ldr	r1, [pc, #44]	; (10b78 <Lpc40xxSystemController::SetPeripheralClockDivider(unsigned char)+0x48>)
   10b4a:	480c      	ldr	r0, [pc, #48]	; (10b7c <Lpc40xxSystemController::SetPeripheralClockDivider(unsigned char)+0x4c>)
   10b4c:	f003 fb92 	bl	14274 <printf>
   10b50:	480b      	ldr	r0, [pc, #44]	; (10b80 <Lpc40xxSystemController::SetPeripheralClockDivider(unsigned char)+0x50>)
   10b52:	f002 f903 	bl	12d5c <puts>
   10b56:	2100      	movs	r1, #0
   10b58:	2001      	movs	r0, #1
   10b5a:	f7ff ff09 	bl	10970 <debug::PrintBacktrace(bool, void*)>
   10b5e:	e7fe      	b.n	10b5e <Lpc40xxSystemController::SetPeripheralClockDivider(unsigned char)+0x2e>
    system_controller->PCLKSEL = peripheral_divider;
   10b60:	4b08      	ldr	r3, [pc, #32]	; (10b84 <Lpc40xxSystemController::SetPeripheralClockDivider(unsigned char)+0x54>)
   10b62:	681b      	ldr	r3, [r3, #0]
   10b64:	f89d 2003 	ldrb.w	r2, [sp, #3]
   10b68:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
  }
   10b6c:	bf00      	nop
   10b6e:	b003      	add	sp, #12
   10b70:	f85d fb04 	ldr.w	pc, [sp], #4
   10b74:	0001785c 	.word	0x0001785c
   10b78:	00017684 	.word	0x00017684
   10b7c:	000171d0 	.word	0x000171d0
   10b80:	00017270 	.word	0x00017270
   10b84:	10000040 	.word	0x10000040

00010b88 <Lpc40xxSystemController::GetPeripheralClockDivider() const>:

  uint32_t GetPeripheralClockDivider() const override
   10b88:	b082      	sub	sp, #8
   10b8a:	9001      	str	r0, [sp, #4]
  {
#if defined(HOST_TEST)
    return 1;
#else
    return system_controller->PCLKSEL;
   10b8c:	4b03      	ldr	r3, [pc, #12]	; (10b9c <Lpc40xxSystemController::GetPeripheralClockDivider() const+0x14>)
   10b8e:	681b      	ldr	r3, [r3, #0]
   10b90:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
#endif
  }
   10b94:	4618      	mov	r0, r3
   10b96:	b002      	add	sp, #8
   10b98:	4770      	bx	lr
   10b9a:	bf00      	nop
   10b9c:	10000040 	.word	0x10000040

00010ba0 <Lpc40xxSystemController::GetSystemFrequency() const>:

  uint32_t GetSystemFrequency() const override
   10ba0:	b082      	sub	sp, #8
   10ba2:	9001      	str	r0, [sp, #4]
  {
#if defined(HOST_TEST)
    return config::kSystemClockRate;
#else
    return speed_in_hertz;
   10ba4:	4b02      	ldr	r3, [pc, #8]	; (10bb0 <Lpc40xxSystemController::GetSystemFrequency() const+0x10>)
   10ba6:	681b      	ldr	r3, [r3, #0]
#endif
  }
   10ba8:	4618      	mov	r0, r3
   10baa:	b002      	add	sp, #8
   10bac:	4770      	bx	lr
   10bae:	bf00      	nop
   10bb0:	10000044 	.word	0x10000044

00010bb4 <Lpc40xxSystemController::GetPeripheralFrequency() const>:

  uint32_t GetPeripheralFrequency() const override
   10bb4:	b500      	push	{lr}
   10bb6:	b085      	sub	sp, #20
   10bb8:	9001      	str	r0, [sp, #4]
  {
    uint32_t peripheral_clock_divider = GetPeripheralClockDivider();
   10bba:	9b01      	ldr	r3, [sp, #4]
   10bbc:	681b      	ldr	r3, [r3, #0]
   10bbe:	3308      	adds	r3, #8
   10bc0:	681b      	ldr	r3, [r3, #0]
   10bc2:	9801      	ldr	r0, [sp, #4]
   10bc4:	4798      	blx	r3
   10bc6:	9002      	str	r0, [sp, #8]
    uint32_t result = 0;  // return 0 if peripheral_clock_divider == 0
   10bc8:	2300      	movs	r3, #0
   10bca:	9303      	str	r3, [sp, #12]
    if (peripheral_clock_divider != 0)
   10bcc:	9b02      	ldr	r3, [sp, #8]
   10bce:	2b00      	cmp	r3, #0
   10bd0:	d00a      	beq.n	10be8 <Lpc40xxSystemController::GetPeripheralFrequency() const+0x34>
    {
      result = GetSystemFrequency() / peripheral_clock_divider;
   10bd2:	9b01      	ldr	r3, [sp, #4]
   10bd4:	681b      	ldr	r3, [r3, #0]
   10bd6:	330c      	adds	r3, #12
   10bd8:	681b      	ldr	r3, [r3, #0]
   10bda:	9801      	ldr	r0, [sp, #4]
   10bdc:	4798      	blx	r3
   10bde:	4602      	mov	r2, r0
   10be0:	9b02      	ldr	r3, [sp, #8]
   10be2:	fbb2 f3f3 	udiv	r3, r2, r3
   10be6:	9303      	str	r3, [sp, #12]
    }
    return result;
   10be8:	9b03      	ldr	r3, [sp, #12]
  }
   10bea:	4618      	mov	r0, r3
   10bec:	b005      	add	sp, #20
   10bee:	f85d fb04 	ldr.w	pc, [sp], #4
   10bf2:	Address 0x0000000000010bf2 is out of bounds.


00010bf4 <Lpc40xxSystemController::PowerUpPeripheral(SystemControllerInterface::PeripheralID const&)>:

  void PowerUpPeripheral(const PeripheralID & peripheral_select) override
   10bf4:	b084      	sub	sp, #16
   10bf6:	9001      	str	r0, [sp, #4]
   10bf8:	9100      	str	r1, [sp, #0]
  {
    auto power_connection_with_enabled_peripheral =
        system_controller->PCONP | (1 << peripheral_select.device_id);
   10bfa:	4b09      	ldr	r3, [pc, #36]	; (10c20 <Lpc40xxSystemController::PowerUpPeripheral(SystemControllerInterface::PeripheralID const&)+0x2c>)
   10bfc:	681b      	ldr	r3, [r3, #0]
   10bfe:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
   10c02:	9a00      	ldr	r2, [sp, #0]
   10c04:	6812      	ldr	r2, [r2, #0]
   10c06:	2101      	movs	r1, #1
   10c08:	fa01 f202 	lsl.w	r2, r1, r2
   10c0c:	4313      	orrs	r3, r2
   10c0e:	9303      	str	r3, [sp, #12]

    system_controller->PCONP = power_connection_with_enabled_peripheral;
   10c10:	4b03      	ldr	r3, [pc, #12]	; (10c20 <Lpc40xxSystemController::PowerUpPeripheral(SystemControllerInterface::PeripheralID const&)+0x2c>)
   10c12:	681b      	ldr	r3, [r3, #0]
   10c14:	9a03      	ldr	r2, [sp, #12]
   10c16:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  }
   10c1a:	bf00      	nop
   10c1c:	b004      	add	sp, #16
   10c1e:	4770      	bx	lr
   10c20:	10000040 	.word	0x10000040

00010c24 <Lpc40xxSystemController::PowerDownPeripheral(SystemControllerInterface::PeripheralID const&)>:
  void PowerDownPeripheral(const PeripheralID & peripheral_select) override
   10c24:	b084      	sub	sp, #16
   10c26:	9001      	str	r0, [sp, #4]
   10c28:	9100      	str	r1, [sp, #0]
  {
    auto power_connection_without_enabled_peripheral =
        system_controller->PCONP & (1 << peripheral_select.device_id);
   10c2a:	4b09      	ldr	r3, [pc, #36]	; (10c50 <Lpc40xxSystemController::PowerDownPeripheral(SystemControllerInterface::PeripheralID const&)+0x2c>)
   10c2c:	681b      	ldr	r3, [r3, #0]
   10c2e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
   10c32:	9a00      	ldr	r2, [sp, #0]
   10c34:	6812      	ldr	r2, [r2, #0]
   10c36:	2101      	movs	r1, #1
   10c38:	fa01 f202 	lsl.w	r2, r1, r2
   10c3c:	4013      	ands	r3, r2
   10c3e:	9303      	str	r3, [sp, #12]

    system_controller->PCONP = power_connection_without_enabled_peripheral;
   10c40:	4b03      	ldr	r3, [pc, #12]	; (10c50 <Lpc40xxSystemController::PowerDownPeripheral(SystemControllerInterface::PeripheralID const&)+0x2c>)
   10c42:	681b      	ldr	r3, [r3, #0]
   10c44:	9a03      	ldr	r2, [sp, #12]
   10c46:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  }
   10c4a:	bf00      	nop
   10c4c:	b004      	add	sp, #16
   10c4e:	4770      	bx	lr
   10c50:	10000040 	.word	0x10000040

00010c54 <Lpc40xxSystemController::SelectOscillatorSource(Lpc40xxSystemController::OscillatorSource)>:

 private:
  void SelectOscillatorSource(OscillatorSource source)
   10c54:	b084      	sub	sp, #16
   10c56:	9001      	str	r0, [sp, #4]
   10c58:	460b      	mov	r3, r1
   10c5a:	f8ad 3002 	strh.w	r3, [sp, #2]
  {
    uint32_t source_bit = static_cast<uint32_t>(source);
   10c5e:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   10c62:	9303      	str	r3, [sp, #12]
    system_controller->CLKSRCSEL =
        (system_controller->CLKSRCSEL & ~(kOscillatorSelect)) | source_bit;
   10c64:	4b07      	ldr	r3, [pc, #28]	; (10c84 <Lpc40xxSystemController::SelectOscillatorSource(Lpc40xxSystemController::OscillatorSource)+0x30>)
   10c66:	681b      	ldr	r3, [r3, #0]
   10c68:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
   10c6c:	f023 0101 	bic.w	r1, r3, #1
    system_controller->CLKSRCSEL =
   10c70:	4b04      	ldr	r3, [pc, #16]	; (10c84 <Lpc40xxSystemController::SelectOscillatorSource(Lpc40xxSystemController::OscillatorSource)+0x30>)
   10c72:	681b      	ldr	r3, [r3, #0]
        (system_controller->CLKSRCSEL & ~(kOscillatorSelect)) | source_bit;
   10c74:	9a03      	ldr	r2, [sp, #12]
   10c76:	430a      	orrs	r2, r1
    system_controller->CLKSRCSEL =
   10c78:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
  }
   10c7c:	bf00      	nop
   10c7e:	b004      	add	sp, #16
   10c80:	4770      	bx	lr
   10c82:	bf00      	nop
   10c84:	10000040 	.word	0x10000040

00010c88 <Lpc40xxSystemController::SelectMainClockSource(Lpc40xxSystemController::MainClockSource)>:

  void SelectMainClockSource(MainClockSource source)
   10c88:	b082      	sub	sp, #8
   10c8a:	9001      	str	r0, [sp, #4]
   10c8c:	460b      	mov	r3, r1
   10c8e:	f8ad 3002 	strh.w	r3, [sp, #2]
  {
    system_controller->CCLKSEL =
        (system_controller->CCLKSEL & ~(kBaseClockSelect)) |
   10c92:	4b08      	ldr	r3, [pc, #32]	; (10cb4 <Lpc40xxSystemController::SelectMainClockSource(Lpc40xxSystemController::MainClockSource)+0x2c>)
   10c94:	681b      	ldr	r3, [r3, #0]
   10c96:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   10c9a:	f423 7180 	bic.w	r1, r3, #256	; 0x100
        static_cast<uint32_t>(source);
   10c9e:	f8bd 2002 	ldrh.w	r2, [sp, #2]
    system_controller->CCLKSEL =
   10ca2:	4b04      	ldr	r3, [pc, #16]	; (10cb4 <Lpc40xxSystemController::SelectMainClockSource(Lpc40xxSystemController::MainClockSource)+0x2c>)
   10ca4:	681b      	ldr	r3, [r3, #0]
        (system_controller->CCLKSEL & ~(kBaseClockSelect)) |
   10ca6:	430a      	orrs	r2, r1
    system_controller->CCLKSEL =
   10ca8:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
  }
   10cac:	bf00      	nop
   10cae:	b002      	add	sp, #8
   10cb0:	4770      	bx	lr
   10cb2:	bf00      	nop
   10cb4:	10000040 	.word	0x10000040

00010cb8 <Lpc40xxSystemController::SelectUsbClockSource(Lpc40xxSystemController::UsbSource)>:

  void SelectUsbClockSource(UsbSource usb_clock)
   10cb8:	b082      	sub	sp, #8
   10cba:	9001      	str	r0, [sp, #4]
   10cbc:	460b      	mov	r3, r1
   10cbe:	f8ad 3002 	strh.w	r3, [sp, #2]
  {
    system_controller->USBCLKSEL =
        (system_controller->USBCLKSEL & ~(kUsbClockSource)) |
   10cc2:	4b08      	ldr	r3, [pc, #32]	; (10ce4 <Lpc40xxSystemController::SelectUsbClockSource(Lpc40xxSystemController::UsbSource)+0x2c>)
   10cc4:	681b      	ldr	r3, [r3, #0]
   10cc6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
   10cca:	f423 7140 	bic.w	r1, r3, #768	; 0x300
        static_cast<uint32_t>(usb_clock);
   10cce:	f8bd 2002 	ldrh.w	r2, [sp, #2]
    system_controller->USBCLKSEL =
   10cd2:	4b04      	ldr	r3, [pc, #16]	; (10ce4 <Lpc40xxSystemController::SelectUsbClockSource(Lpc40xxSystemController::UsbSource)+0x2c>)
   10cd4:	681b      	ldr	r3, [r3, #0]
        (system_controller->USBCLKSEL & ~(kUsbClockSource)) |
   10cd6:	430a      	orrs	r2, r1
    system_controller->USBCLKSEL =
   10cd8:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
  }
   10cdc:	bf00      	nop
   10cde:	b002      	add	sp, #8
   10ce0:	4770      	bx	lr
   10ce2:	bf00      	nop
   10ce4:	10000040 	.word	0x10000040

00010ce8 <Lpc40xxSystemController::SelectSpifiClockSource(Lpc40xxSystemController::SpifiSource)>:

  void SelectSpifiClockSource(SpifiSource spifi_clock)
   10ce8:	b082      	sub	sp, #8
   10cea:	9001      	str	r0, [sp, #4]
   10cec:	460b      	mov	r3, r1
   10cee:	f8ad 3002 	strh.w	r3, [sp, #2]
  {
    system_controller->SPIFISEL =
        (system_controller->SPIFISEL & ~(kSpifiClockSource)) |
   10cf2:	4b08      	ldr	r3, [pc, #32]	; (10d14 <Lpc40xxSystemController::SelectSpifiClockSource(Lpc40xxSystemController::SpifiSource)+0x2c>)
   10cf4:	681b      	ldr	r3, [r3, #0]
   10cf6:	f8d3 31b4 	ldr.w	r3, [r3, #436]	; 0x1b4
   10cfa:	f423 7140 	bic.w	r1, r3, #768	; 0x300
        static_cast<uint32_t>(spifi_clock);
   10cfe:	f8bd 2002 	ldrh.w	r2, [sp, #2]
    system_controller->SPIFISEL =
   10d02:	4b04      	ldr	r3, [pc, #16]	; (10d14 <Lpc40xxSystemController::SelectSpifiClockSource(Lpc40xxSystemController::SpifiSource)+0x2c>)
   10d04:	681b      	ldr	r3, [r3, #0]
        (system_controller->SPIFISEL & ~(kSpifiClockSource)) |
   10d06:	430a      	orrs	r2, r1
    system_controller->SPIFISEL =
   10d08:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
  }
   10d0c:	bf00      	nop
   10d0e:	b002      	add	sp, #8
   10d10:	4770      	bx	lr
   10d12:	bf00      	nop
   10d14:	10000040 	.word	0x10000040

00010d18 <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)>:

  uint32_t CalculatePll(PllInput input_frequency, uint16_t desired_speed_in_mhz)
   10d18:	b500      	push	{lr}
   10d1a:	b087      	sub	sp, #28
   10d1c:	9001      	str	r0, [sp, #4]
   10d1e:	460b      	mov	r3, r1
   10d20:	f8ad 3002 	strh.w	r3, [sp, #2]
   10d24:	4613      	mov	r3, r2
   10d26:	f8ad 3000 	strh.w	r3, [sp]
  {
    SJ2_ASSERT_FATAL(desired_speed_in_mhz < 384 && desired_speed_in_mhz > 12,
   10d2a:	f8bd 3000 	ldrh.w	r3, [sp]
   10d2e:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
   10d32:	d203      	bcs.n	10d3c <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)+0x24>
   10d34:	f8bd 3000 	ldrh.w	r3, [sp]
   10d38:	2b0c      	cmp	r3, #12
   10d3a:	d80d      	bhi.n	10d58 <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)+0x40>
   10d3c:	23ff      	movs	r3, #255	; 0xff
   10d3e:	4a34      	ldr	r2, [pc, #208]	; (10e10 <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)+0xf8>)
   10d40:	4934      	ldr	r1, [pc, #208]	; (10e14 <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)+0xfc>)
   10d42:	4835      	ldr	r0, [pc, #212]	; (10e18 <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)+0x100>)
   10d44:	f003 fa96 	bl	14274 <printf>
   10d48:	4834      	ldr	r0, [pc, #208]	; (10e1c <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)+0x104>)
   10d4a:	f002 f807 	bl	12d5c <puts>
   10d4e:	2100      	movs	r1, #0
   10d50:	2001      	movs	r0, #1
   10d52:	f7ff fe0d 	bl	10970 <debug::PrintBacktrace(bool, void*)>
   10d56:	e7fe      	b.n	10d56 <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)+0x3e>
                     "Frequency must be lower than 384 MHz"
                     "and greater than or equal to 12 MHz");
    bool calculating = true;
   10d58:	2301      	movs	r3, #1
   10d5a:	f88d 3017 	strb.w	r3, [sp, #23]
    uint32_t multiplier_value;
    if ((desired_speed_in_mhz % static_cast<uint16_t>(input_frequency)) >= 1)
   10d5e:	f8bd 3000 	ldrh.w	r3, [sp]
   10d62:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   10d66:	fbb3 f1f2 	udiv	r1, r3, r2
   10d6a:	fb02 f201 	mul.w	r2, r2, r1
   10d6e:	1a9b      	subs	r3, r3, r2
   10d70:	b29b      	uxth	r3, r3
   10d72:	2b00      	cmp	r3, #0
   10d74:	d009      	beq.n	10d8a <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)+0x72>
    {
      multiplier_value = static_cast<uint32_t>(
          (desired_speed_in_mhz / static_cast<uint16_t>(input_frequency)) + 1);
   10d76:	f8bd 2000 	ldrh.w	r2, [sp]
   10d7a:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   10d7e:	fbb2 f3f3 	udiv	r3, r2, r3
   10d82:	b29b      	uxth	r3, r3
   10d84:	3301      	adds	r3, #1
      multiplier_value = static_cast<uint32_t>(
   10d86:	9304      	str	r3, [sp, #16]
   10d88:	e007      	b.n	10d9a <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)+0x82>
    }
    else
    {
      multiplier_value = static_cast<uint32_t>(
          desired_speed_in_mhz / static_cast<uint16_t>(input_frequency));
   10d8a:	f8bd 2000 	ldrh.w	r2, [sp]
   10d8e:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   10d92:	fbb2 f3f3 	udiv	r3, r2, r3
   10d96:	b29b      	uxth	r3, r3
      multiplier_value = static_cast<uint32_t>(
   10d98:	9304      	str	r3, [sp, #16]
    }
    uint16_t divider_value = 1;
   10d9a:	2301      	movs	r3, #1
   10d9c:	f8ad 300e 	strh.w	r3, [sp, #14]
    while (calculating)
   10da0:	f89d 3017 	ldrb.w	r3, [sp, #23]
   10da4:	2b00      	cmp	r3, #0
   10da6:	d02e      	beq.n	10e06 <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)+0xee>
    {
      uint16_t current_controlled_oscillator_frequency;
      current_controlled_oscillator_frequency = static_cast<uint16_t>(
   10da8:	9b04      	ldr	r3, [sp, #16]
   10daa:	b29b      	uxth	r3, r3
   10dac:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   10db0:	fb12 f303 	smulbb	r3, r2, r3
   10db4:	b29b      	uxth	r3, r3
   10db6:	f8bd 200e 	ldrh.w	r2, [sp, #14]
   10dba:	fb12 f303 	smulbb	r3, r2, r3
   10dbe:	b29b      	uxth	r3, r3
   10dc0:	005b      	lsls	r3, r3, #1
   10dc2:	f8ad 300c 	strh.w	r3, [sp, #12]
          (static_cast<uint16_t>(input_frequency) * multiplier_value * 2) *
          divider_value);
      if (current_controlled_oscillator_frequency >= 156)
   10dc6:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   10dca:	2b9b      	cmp	r3, #155	; 0x9b
   10dcc:	d903      	bls.n	10dd6 <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)+0xbe>
      {
        calculating = false;
   10dce:	2300      	movs	r3, #0
   10dd0:	f88d 3017 	strb.w	r3, [sp, #23]
   10dd4:	e7e4      	b.n	10da0 <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)+0x88>
      }
      else
      {
        divider_value = static_cast<uint16_t>(divider_value * 2);
   10dd6:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   10dda:	005b      	lsls	r3, r3, #1
   10ddc:	f8ad 300e 	strh.w	r3, [sp, #14]
        SJ2_ASSERT_FATAL(divider_value < 8,
   10de0:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   10de4:	2b07      	cmp	r3, #7
   10de6:	d9db      	bls.n	10da0 <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)+0x88>
   10de8:	f240 131b 	movw	r3, #283	; 0x11b
   10dec:	4a08      	ldr	r2, [pc, #32]	; (10e10 <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)+0xf8>)
   10dee:	490c      	ldr	r1, [pc, #48]	; (10e20 <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)+0x108>)
   10df0:	480c      	ldr	r0, [pc, #48]	; (10e24 <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)+0x10c>)
   10df2:	f003 fa3f 	bl	14274 <printf>
   10df6:	4809      	ldr	r0, [pc, #36]	; (10e1c <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)+0x104>)
   10df8:	f001 ffb0 	bl	12d5c <puts>
   10dfc:	2100      	movs	r1, #0
   10dfe:	2001      	movs	r0, #1
   10e00:	f7ff fdb6 	bl	10970 <debug::PrintBacktrace(bool, void*)>
   10e04:	e7fe      	b.n	10e04 <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)+0xec>
                         "PLL divider value went out of bounds");
      }
    }

    return multiplier_value;
   10e06:	9b04      	ldr	r3, [sp, #16]
  }
   10e08:	4618      	mov	r0, r3
   10e0a:	b007      	add	sp, #28
   10e0c:	f85d fb04 	ldr.w	pc, [sp], #4
   10e10:	00017904 	.word	0x00017904
   10e14:	0001769c 	.word	0x0001769c
   10e18:	00017288 	.word	0x00017288
   10e1c:	00017270 	.word	0x00017270
   10e20:	000176b4 	.word	0x000176b4
   10e24:	00017378 	.word	0x00017378

00010e28 <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)>:

  uint32_t SetMainPll(PllInput input_frequency, uint16_t desired_speed_in_mhz)
   10e28:	b510      	push	{r4, lr}
   10e2a:	b08a      	sub	sp, #40	; 0x28
   10e2c:	9001      	str	r0, [sp, #4]
   10e2e:	460b      	mov	r3, r1
   10e30:	f8ad 3002 	strh.w	r3, [sp, #2]
   10e34:	4613      	mov	r3, r2
   10e36:	f8ad 3000 	strh.w	r3, [sp]
  {
    uint16_t divider_value = 1;
   10e3a:	2301      	movs	r3, #1
   10e3c:	f8ad 301a 	strh.w	r3, [sp, #26]
    uint64_t timeout_time  = Milliseconds() + kDefaultTimeout;
   10e40:	f7ff faf0 	bl	10424 <Milliseconds()>
   10e44:	460a      	mov	r2, r1
   10e46:	4601      	mov	r1, r0
   10e48:	f511 737a 	adds.w	r3, r1, #1000	; 0x3e8
   10e4c:	f142 0400 	adc.w	r4, r2, #0
   10e50:	e9cd 3404 	strd	r3, r4, [sp, #16]
    uint64_t current_time  = Milliseconds();
   10e54:	f7ff fae6 	bl	10424 <Milliseconds()>
   10e58:	e9cd 0108 	strd	r0, r1, [sp, #32]
    uint32_t multiplier_value =
        CalculatePll(input_frequency, desired_speed_in_mhz);
   10e5c:	f8bd 2000 	ldrh.w	r2, [sp]
   10e60:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   10e64:	4619      	mov	r1, r3
   10e66:	9801      	ldr	r0, [sp, #4]
   10e68:	f7ff ff56 	bl	10d18 <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)>
   10e6c:	9003      	str	r0, [sp, #12]
    uint32_t actual_speed =
        static_cast<uint32_t>(input_frequency) * multiplier_value;
   10e6e:	f8bd 2002 	ldrh.w	r2, [sp, #2]
    uint32_t actual_speed =
   10e72:	9b03      	ldr	r3, [sp, #12]
   10e74:	fb02 f303 	mul.w	r3, r2, r3
   10e78:	9307      	str	r3, [sp, #28]
    // TO DO: use registers to retreive values
    SelectOscillatorSource(OscillatorSource::kIrc);
   10e7a:	2100      	movs	r1, #0
   10e7c:	9801      	ldr	r0, [sp, #4]
   10e7e:	f7ff fee9 	bl	10c54 <Lpc40xxSystemController::SelectOscillatorSource(Lpc40xxSystemController::OscillatorSource)>
    SelectMainClockSource(MainClockSource::kBaseClock);
   10e82:	2100      	movs	r1, #0
   10e84:	9801      	ldr	r0, [sp, #4]
   10e86:	f7ff feff 	bl	10c88 <Lpc40xxSystemController::SelectMainClockSource(Lpc40xxSystemController::MainClockSource)>
    SelectUsbClockSource(UsbSource::kBaseClock);
   10e8a:	2100      	movs	r1, #0
   10e8c:	9801      	ldr	r0, [sp, #4]
   10e8e:	f7ff ff13 	bl	10cb8 <Lpc40xxSystemController::SelectUsbClockSource(Lpc40xxSystemController::UsbSource)>
    SelectSpifiClockSource(SpifiSource::kBaseClock);
   10e92:	2100      	movs	r1, #0
   10e94:	9801      	ldr	r0, [sp, #4]
   10e96:	f7ff ff27 	bl	10ce8 <Lpc40xxSystemController::SelectSpifiClockSource(Lpc40xxSystemController::SpifiSource)>
    // must subtract 1 from multiplier value as specified in datasheet
    system_controller->PLL0CFG =
        (system_controller->PLL0CFG & ~kClearPllMultiplier) |
   10e9a:	4b3a      	ldr	r3, [pc, #232]	; (10f84 <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0x15c>)
   10e9c:	681b      	ldr	r3, [r3, #0]
   10e9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   10ea2:	f023 011f 	bic.w	r1, r3, #31
        (multiplier_value - 1);
   10ea6:	9b03      	ldr	r3, [sp, #12]
   10ea8:	1e5a      	subs	r2, r3, #1
    system_controller->PLL0CFG =
   10eaa:	4b36      	ldr	r3, [pc, #216]	; (10f84 <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0x15c>)
   10eac:	681b      	ldr	r3, [r3, #0]
        (system_controller->PLL0CFG & ~kClearPllMultiplier) |
   10eae:	430a      	orrs	r2, r1
    system_controller->PLL0CFG =
   10eb0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    system_controller->PLL0CFG =
        (system_controller->PLL0CFG & ~kClearPllDivider) | (divider_value << 5);
   10eb4:	4b33      	ldr	r3, [pc, #204]	; (10f84 <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0x15c>)
   10eb6:	681b      	ldr	r3, [r3, #0]
   10eb8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   10ebc:	f023 0260 	bic.w	r2, r3, #96	; 0x60
   10ec0:	f8bd 301a 	ldrh.w	r3, [sp, #26]
   10ec4:	015b      	lsls	r3, r3, #5
   10ec6:	4619      	mov	r1, r3
    system_controller->PLL0CFG =
   10ec8:	4b2e      	ldr	r3, [pc, #184]	; (10f84 <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0x15c>)
   10eca:	681b      	ldr	r3, [r3, #0]
        (system_controller->PLL0CFG & ~kClearPllDivider) | (divider_value << 5);
   10ecc:	430a      	orrs	r2, r1
    system_controller->PLL0CFG =
   10ece:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    system_controller->PLL0CON |= kEnablePll;
   10ed2:	4b2c      	ldr	r3, [pc, #176]	; (10f84 <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0x15c>)
   10ed4:	681b      	ldr	r3, [r3, #0]
   10ed6:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
   10eda:	4b2a      	ldr	r3, [pc, #168]	; (10f84 <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0x15c>)
   10edc:	681b      	ldr	r3, [r3, #0]
   10ede:	f042 0201 	orr.w	r2, r2, #1
   10ee2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    // nessecary feed sequence to ensure the changes are intentional
    system_controller->PLL0FEED = 0xAA;
   10ee6:	4b27      	ldr	r3, [pc, #156]	; (10f84 <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0x15c>)
   10ee8:	681b      	ldr	r3, [r3, #0]
   10eea:	22aa      	movs	r2, #170	; 0xaa
   10eec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    system_controller->PLL0FEED = 0x55;
   10ef0:	4b24      	ldr	r3, [pc, #144]	; (10f84 <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0x15c>)
   10ef2:	681b      	ldr	r3, [r3, #0]
   10ef4:	2255      	movs	r2, #85	; 0x55
   10ef6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    while (!(system_controller->PLL0STAT >> kPlock & 1) &&
   10efa:	4b22      	ldr	r3, [pc, #136]	; (10f84 <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0x15c>)
   10efc:	681b      	ldr	r3, [r3, #0]
   10efe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   10f02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
   10f06:	2b00      	cmp	r3, #0
   10f08:	d109      	bne.n	10f1e <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0xf6>
   10f0a:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
   10f0e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
   10f12:	42a2      	cmp	r2, r4
   10f14:	bf08      	it	eq
   10f16:	4299      	cmpeq	r1, r3
   10f18:	d201      	bcs.n	10f1e <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0xf6>
   10f1a:	2301      	movs	r3, #1
   10f1c:	e000      	b.n	10f20 <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0xf8>
   10f1e:	2300      	movs	r3, #0
   10f20:	2b00      	cmp	r3, #0
   10f22:	d004      	beq.n	10f2e <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0x106>
           (current_time < timeout_time))
    {
      current_time = Milliseconds();
   10f24:	f7ff fa7e 	bl	10424 <Milliseconds()>
   10f28:	e9cd 0108 	strd	r0, r1, [sp, #32]
    while (!(system_controller->PLL0STAT >> kPlock & 1) &&
   10f2c:	e7e5      	b.n	10efa <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0xd2>
    }
    if (!(system_controller->PLL0STAT >> kPlock & 1) &&
   10f2e:	4b15      	ldr	r3, [pc, #84]	; (10f84 <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0x15c>)
   10f30:	681b      	ldr	r3, [r3, #0]
   10f32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   10f36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
   10f3a:	2b00      	cmp	r3, #0
   10f3c:	d109      	bne.n	10f52 <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0x12a>
   10f3e:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
   10f42:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
   10f46:	42a2      	cmp	r2, r4
   10f48:	bf08      	it	eq
   10f4a:	4299      	cmpeq	r1, r3
   10f4c:	d301      	bcc.n	10f52 <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0x12a>
   10f4e:	2301      	movs	r3, #1
   10f50:	e000      	b.n	10f54 <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0x12c>
   10f52:	2300      	movs	r3, #0
   10f54:	2b00      	cmp	r3, #0
   10f56:	d00e      	beq.n	10f76 <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0x14e>
        (current_time >= timeout_time))
    {
      SJ2_ASSERT_FATAL(false,
   10f58:	f240 1343 	movw	r3, #323	; 0x143
   10f5c:	4a0a      	ldr	r2, [pc, #40]	; (10f88 <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0x160>)
   10f5e:	490b      	ldr	r1, [pc, #44]	; (10f8c <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0x164>)
   10f60:	480b      	ldr	r0, [pc, #44]	; (10f90 <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0x168>)
   10f62:	f003 f987 	bl	14274 <printf>
   10f66:	480b      	ldr	r0, [pc, #44]	; (10f94 <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0x16c>)
   10f68:	f001 fef8 	bl	12d5c <puts>
   10f6c:	2100      	movs	r1, #0
   10f6e:	2001      	movs	r0, #1
   10f70:	f7ff fcfe 	bl	10970 <debug::PrintBacktrace(bool, void*)>
   10f74:	e7fe      	b.n	10f74 <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0x14c>
                       "PLL lock could not be established before timeout");
      actual_speed = kDefaultIRCFrequency;
    }
    return (actual_speed - desired_speed_in_mhz);
   10f76:	f8bd 3000 	ldrh.w	r3, [sp]
   10f7a:	9a07      	ldr	r2, [sp, #28]
   10f7c:	1ad3      	subs	r3, r2, r3
  }
   10f7e:	4618      	mov	r0, r3
   10f80:	b00a      	add	sp, #40	; 0x28
   10f82:	bd10      	pop	{r4, pc}
   10f84:	10000040 	.word	0x10000040
   10f88:	000178a8 	.word	0x000178a8
   10f8c:	000176cc 	.word	0x000176cc
   10f90:	00017420 	.word	0x00017420
   10f94:	00017270 	.word	0x00017270

00010f98 <Lpc40xxSystemController::SetCpuClockDivider(unsigned char)>:
                       "PLL lock could not be established before timeout");
    }
    return (actual_speed - desired_speed_in_mhz);
  }

  void SetCpuClockDivider(uint8_t cpu_divider)
   10f98:	b500      	push	{lr}
   10f9a:	b083      	sub	sp, #12
   10f9c:	9001      	str	r0, [sp, #4]
   10f9e:	460b      	mov	r3, r1
   10fa0:	f88d 3003 	strb.w	r3, [sp, #3]
  {
    SJ2_ASSERT_FATAL(cpu_divider < 32, "Divider mustn't exceed 32");
   10fa4:	f89d 3003 	ldrb.w	r3, [sp, #3]
   10fa8:	2b1f      	cmp	r3, #31
   10faa:	d90e      	bls.n	10fca <Lpc40xxSystemController::SetCpuClockDivider(unsigned char)+0x32>
   10fac:	f240 136f 	movw	r3, #367	; 0x16f
   10fb0:	4a0e      	ldr	r2, [pc, #56]	; (10fec <Lpc40xxSystemController::SetCpuClockDivider(unsigned char)+0x54>)
   10fb2:	490f      	ldr	r1, [pc, #60]	; (10ff0 <Lpc40xxSystemController::SetCpuClockDivider(unsigned char)+0x58>)
   10fb4:	480f      	ldr	r0, [pc, #60]	; (10ff4 <Lpc40xxSystemController::SetCpuClockDivider(unsigned char)+0x5c>)
   10fb6:	f003 f95d 	bl	14274 <printf>
   10fba:	480f      	ldr	r0, [pc, #60]	; (10ff8 <Lpc40xxSystemController::SetCpuClockDivider(unsigned char)+0x60>)
   10fbc:	f001 fece 	bl	12d5c <puts>
   10fc0:	2100      	movs	r1, #0
   10fc2:	2001      	movs	r0, #1
   10fc4:	f7ff fcd4 	bl	10970 <debug::PrintBacktrace(bool, void*)>
   10fc8:	e7fe      	b.n	10fc8 <Lpc40xxSystemController::SetCpuClockDivider(unsigned char)+0x30>
    system_controller->CCLKSEL =
        (system_controller->CCLKSEL & ~kClearCpuDivider) | cpu_divider;
   10fca:	4b0c      	ldr	r3, [pc, #48]	; (10ffc <Lpc40xxSystemController::SetCpuClockDivider(unsigned char)+0x64>)
   10fcc:	681b      	ldr	r3, [r3, #0]
   10fce:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   10fd2:	f023 011f 	bic.w	r1, r3, #31
   10fd6:	f89d 2003 	ldrb.w	r2, [sp, #3]
    system_controller->CCLKSEL =
   10fda:	4b08      	ldr	r3, [pc, #32]	; (10ffc <Lpc40xxSystemController::SetCpuClockDivider(unsigned char)+0x64>)
   10fdc:	681b      	ldr	r3, [r3, #0]
        (system_controller->CCLKSEL & ~kClearCpuDivider) | cpu_divider;
   10fde:	430a      	orrs	r2, r1
    system_controller->CCLKSEL =
   10fe0:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
  }
   10fe4:	bf00      	nop
   10fe6:	b003      	add	sp, #12
   10fe8:	f85d fb04 	ldr.w	pc, [sp], #4
   10fec:	00017960 	.word	0x00017960
   10ff0:	000176e4 	.word	0x000176e4
   10ff4:	000174c8 	.word	0x000174c8
   10ff8:	00017270 	.word	0x00017270
   10ffc:	10000040 	.word	0x10000040

00011000 <Lpc40xxSystemController::SetEmcClockDivider(Lpc40xxSystemController::EmcDivider)>:

  void SetEmcClockDivider(EmcDivider emc_divider)
   11000:	b082      	sub	sp, #8
   11002:	9001      	str	r0, [sp, #4]
   11004:	460b      	mov	r3, r1
   11006:	f88d 3003 	strb.w	r3, [sp, #3]
  {
    system_controller->EMCCLKSEL =
        (system_controller->EMCCLKSEL & ~kClearEmcDivider) |
   1100a:	4b08      	ldr	r3, [pc, #32]	; (1102c <Lpc40xxSystemController::SetEmcClockDivider(Lpc40xxSystemController::EmcDivider)+0x2c>)
   1100c:	681b      	ldr	r3, [r3, #0]
   1100e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   11012:	f023 0101 	bic.w	r1, r3, #1
        static_cast<uint8_t>(emc_divider);
   11016:	f89d 2003 	ldrb.w	r2, [sp, #3]
    system_controller->EMCCLKSEL =
   1101a:	4b04      	ldr	r3, [pc, #16]	; (1102c <Lpc40xxSystemController::SetEmcClockDivider(Lpc40xxSystemController::EmcDivider)+0x2c>)
   1101c:	681b      	ldr	r3, [r3, #0]
        (system_controller->EMCCLKSEL & ~kClearEmcDivider) |
   1101e:	430a      	orrs	r2, r1
    system_controller->EMCCLKSEL =
   11020:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }
   11024:	bf00      	nop
   11026:	b002      	add	sp, #8
   11028:	4770      	bx	lr
   1102a:	bf00      	nop
   1102c:	10000040 	.word	0x10000040

00011030 <SystemTimer::DisableTimer()>:
  /// system_timer_isr defaults to nullptr. The actual SystemTickHandler should
  /// check if the isr is set to nullptr, and if it is, turn off the timer, if
  /// set a proper function then execute it.
  inline static IsrPointer system_timer_isr = nullptr;
  /// WARNING: Doing so will most likely disable FreeRTOS
  static void DisableTimer()
   11030:	b510      	push	{r4, lr}
   11032:	4674      	mov	r4, lr
   11034:	4623      	mov	r3, r4
   11036:	4619      	mov	r1, r3
   11038:	480a      	ldr	r0, [pc, #40]	; (11064 <SystemTimer::DisableTimer()+0x34>)
   1103a:	f001 febf 	bl	12dbc <__cyg_profile_func_enter>
  {
    sys_tick->LOAD = 0;
   1103e:	4b0a      	ldr	r3, [pc, #40]	; (11068 <SystemTimer::DisableTimer()+0x38>)
   11040:	681b      	ldr	r3, [r3, #0]
   11042:	2200      	movs	r2, #0
   11044:	605a      	str	r2, [r3, #4]
    sys_tick->VAL  = 0;
   11046:	4b08      	ldr	r3, [pc, #32]	; (11068 <SystemTimer::DisableTimer()+0x38>)
   11048:	681b      	ldr	r3, [r3, #0]
   1104a:	2200      	movs	r2, #0
   1104c:	609a      	str	r2, [r3, #8]
    sys_tick->CTRL = 0;
   1104e:	4b06      	ldr	r3, [pc, #24]	; (11068 <SystemTimer::DisableTimer()+0x38>)
   11050:	681b      	ldr	r3, [r3, #0]
   11052:	2200      	movs	r2, #0
   11054:	601a      	str	r2, [r3, #0]
   11056:	4623      	mov	r3, r4
   11058:	4619      	mov	r1, r3
   1105a:	4802      	ldr	r0, [pc, #8]	; (11064 <SystemTimer::DisableTimer()+0x34>)
   1105c:	f001 fec2 	bl	12de4 <__cyg_profile_func_exit>
  }
   11060:	bf00      	nop
   11062:	bd10      	pop	{r4, pc}
   11064:	00011031 	.word	0x00011031
   11068:	10000048 	.word	0x10000048

0001106c <SystemTimer::SystemTimerHandler()>:
  static void SystemTimerHandler()
   1106c:	b510      	push	{r4, lr}
   1106e:	4674      	mov	r4, lr
   11070:	4623      	mov	r3, r4
   11072:	4619      	mov	r1, r3
   11074:	4808      	ldr	r0, [pc, #32]	; (11098 <SystemTimer::SystemTimerHandler()+0x2c>)
   11076:	f001 fea1 	bl	12dbc <__cyg_profile_func_enter>
  {
    // This assumes that SysTickHandler is called every millisecond.
    // Changing that frequency will distort the milliseconds time.
    if (system_timer_isr != nullptr)
   1107a:	4b08      	ldr	r3, [pc, #32]	; (1109c <SystemTimer::SystemTimerHandler()+0x30>)
   1107c:	681b      	ldr	r3, [r3, #0]
   1107e:	2b00      	cmp	r3, #0
   11080:	d002      	beq.n	11088 <SystemTimer::SystemTimerHandler()+0x1c>
    {
      system_timer_isr();
   11082:	4b06      	ldr	r3, [pc, #24]	; (1109c <SystemTimer::SystemTimerHandler()+0x30>)
   11084:	681b      	ldr	r3, [r3, #0]
   11086:	4798      	blx	r3
   11088:	4623      	mov	r3, r4
   1108a:	4619      	mov	r1, r3
   1108c:	4802      	ldr	r0, [pc, #8]	; (11098 <SystemTimer::SystemTimerHandler()+0x2c>)
   1108e:	f001 fea9 	bl	12de4 <__cyg_profile_func_exit>
    }
  }
   11092:	bf00      	nop
   11094:	bd10      	pop	{r4, pc}
   11096:	bf00      	nop
   11098:	0001106d 	.word	0x0001106d
   1109c:	10000280 	.word	0x10000280

000110a0 <SystemTimer::SetIsrFunction(void (*)())>:
  constexpr SystemTimer() {}
  void SetIsrFunction(IsrPointer isr) override
   110a0:	b510      	push	{r4, lr}
   110a2:	b082      	sub	sp, #8
   110a4:	4674      	mov	r4, lr
   110a6:	9001      	str	r0, [sp, #4]
   110a8:	9100      	str	r1, [sp, #0]
   110aa:	4623      	mov	r3, r4
   110ac:	4619      	mov	r1, r3
   110ae:	4807      	ldr	r0, [pc, #28]	; (110cc <SystemTimer::SetIsrFunction(void (*)())+0x2c>)
   110b0:	f001 fe84 	bl	12dbc <__cyg_profile_func_enter>
  {
    system_timer_isr = isr;
   110b4:	4a06      	ldr	r2, [pc, #24]	; (110d0 <SystemTimer::SetIsrFunction(void (*)())+0x30>)
   110b6:	9b00      	ldr	r3, [sp, #0]
   110b8:	6013      	str	r3, [r2, #0]
   110ba:	4623      	mov	r3, r4
   110bc:	4619      	mov	r1, r3
   110be:	4803      	ldr	r0, [pc, #12]	; (110cc <SystemTimer::SetIsrFunction(void (*)())+0x2c>)
   110c0:	f001 fe90 	bl	12de4 <__cyg_profile_func_exit>
  }
   110c4:	bf00      	nop
   110c6:	b002      	add	sp, #8
   110c8:	bd10      	pop	{r4, pc}
   110ca:	bf00      	nop
   110cc:	000110a1 	.word	0x000110a1
   110d0:	10000280 	.word	0x10000280

000110d4 <SystemTimer::StartTimer()>:
  bool StartTimer() override
   110d4:	b530      	push	{r4, r5, lr}
   110d6:	b085      	sub	sp, #20
   110d8:	4675      	mov	r5, lr
   110da:	9001      	str	r0, [sp, #4]
   110dc:	462b      	mov	r3, r5
   110de:	4619      	mov	r1, r3
   110e0:	4820      	ldr	r0, [pc, #128]	; (11164 <SystemTimer::StartTimer()+0x90>)
   110e2:	f001 fe6b 	bl	12dbc <__cyg_profile_func_enter>
  {
    bool successful = false;
   110e6:	2300      	movs	r3, #0
   110e8:	f88d 300f 	strb.w	r3, [sp, #15]
    if (sys_tick->LOAD != 0)
   110ec:	4b1e      	ldr	r3, [pc, #120]	; (11168 <SystemTimer::StartTimer()+0x94>)
   110ee:	681b      	ldr	r3, [r3, #0]
   110f0:	685b      	ldr	r3, [r3, #4]
   110f2:	2b00      	cmp	r3, #0
   110f4:	bf14      	ite	ne
   110f6:	2301      	movne	r3, #1
   110f8:	2300      	moveq	r3, #0
   110fa:	b2db      	uxtb	r3, r3
   110fc:	2b00      	cmp	r3, #0
   110fe:	d01e      	beq.n	1113e <SystemTimer::StartTimer()+0x6a>
    {
      sys_tick->VAL = 0;
   11100:	4b19      	ldr	r3, [pc, #100]	; (11168 <SystemTimer::StartTimer()+0x94>)
   11102:	681b      	ldr	r3, [r3, #0]
   11104:	2200      	movs	r2, #0
   11106:	609a      	str	r2, [r3, #8]
      sys_tick->CTRL |= (1 << ControlBitMap::kTickInterupt);
   11108:	4b17      	ldr	r3, [pc, #92]	; (11168 <SystemTimer::StartTimer()+0x94>)
   1110a:	681b      	ldr	r3, [r3, #0]
   1110c:	681a      	ldr	r2, [r3, #0]
   1110e:	4b16      	ldr	r3, [pc, #88]	; (11168 <SystemTimer::StartTimer()+0x94>)
   11110:	681b      	ldr	r3, [r3, #0]
   11112:	f042 0202 	orr.w	r2, r2, #2
   11116:	601a      	str	r2, [r3, #0]
      sys_tick->CTRL |= (1 << ControlBitMap::kEnableCounter);
   11118:	4b13      	ldr	r3, [pc, #76]	; (11168 <SystemTimer::StartTimer()+0x94>)
   1111a:	681b      	ldr	r3, [r3, #0]
   1111c:	681a      	ldr	r2, [r3, #0]
   1111e:	4b12      	ldr	r3, [pc, #72]	; (11168 <SystemTimer::StartTimer()+0x94>)
   11120:	681b      	ldr	r3, [r3, #0]
   11122:	f042 0201 	orr.w	r2, r2, #1
   11126:	601a      	str	r2, [r3, #0]
      sys_tick->CTRL |= (1 << ControlBitMap::kClkSource);
   11128:	4b0f      	ldr	r3, [pc, #60]	; (11168 <SystemTimer::StartTimer()+0x94>)
   1112a:	681b      	ldr	r3, [r3, #0]
   1112c:	681a      	ldr	r2, [r3, #0]
   1112e:	4b0e      	ldr	r3, [pc, #56]	; (11168 <SystemTimer::StartTimer()+0x94>)
   11130:	681b      	ldr	r3, [r3, #0]
   11132:	f042 0204 	orr.w	r2, r2, #4
   11136:	601a      	str	r2, [r3, #0]
      successful = true;
   11138:	2301      	movs	r3, #1
   1113a:	f88d 300f 	strb.w	r3, [sp, #15]
    }
    RegisterIsr(SysTick_IRQn, SystemTimerHandler);
   1113e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   11142:	2201      	movs	r2, #1
   11144:	4909      	ldr	r1, [pc, #36]	; (1116c <SystemTimer::StartTimer()+0x98>)
   11146:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1114a:	f001 fd0f 	bl	12b6c <RegisterIsr(IRQn, void (*)(), bool, long)>
    return successful;
   1114e:	f89d 400f 	ldrb.w	r4, [sp, #15]
   11152:	462b      	mov	r3, r5
   11154:	4619      	mov	r1, r3
   11156:	4803      	ldr	r0, [pc, #12]	; (11164 <SystemTimer::StartTimer()+0x90>)
   11158:	f001 fe44 	bl	12de4 <__cyg_profile_func_exit>
   1115c:	4623      	mov	r3, r4
  }
   1115e:	4618      	mov	r0, r3
   11160:	b005      	add	sp, #20
   11162:	bd30      	pop	{r4, r5, pc}
   11164:	000110d5 	.word	0x000110d5
   11168:	10000048 	.word	0x10000048
   1116c:	0001106d 	.word	0x0001106d

00011170 <SystemTimer::SetTickFrequency(unsigned long)>:
  ///          remainder will be returned.
  ///          If the freqency supplied is less then 2Hz, the function will
  ///          return without changing any hardware.
  ///          If the reload value exceeds the SysTick_LOAD_RELOAD_Msk, the
  ///          returned value is the SysTick_LOAD_RELOAD_Msk.
  uint32_t SetTickFrequency(uint32_t frequency) override
   11170:	b530      	push	{r4, r5, lr}
   11172:	b085      	sub	sp, #20
   11174:	4675      	mov	r5, lr
   11176:	9001      	str	r0, [sp, #4]
   11178:	9100      	str	r1, [sp, #0]
   1117a:	462b      	mov	r3, r5
   1117c:	4619      	mov	r1, r3
   1117e:	481f      	ldr	r0, [pc, #124]	; (111fc <SystemTimer::SetTickFrequency(unsigned long)+0x8c>)
   11180:	f001 fe1c 	bl	12dbc <__cyg_profile_func_enter>
  {
    if (frequency <= 1)
   11184:	9b00      	ldr	r3, [sp, #0]
   11186:	2b01      	cmp	r3, #1
   11188:	d801      	bhi.n	1118e <SystemTimer::SetTickFrequency(unsigned long)+0x1e>
    {
      return 0;
   1118a:	2400      	movs	r4, #0
   1118c:	e02d      	b.n	111ea <SystemTimer::SetTickFrequency(unsigned long)+0x7a>
    }
    uint32_t reload_value = (GetSystemFrequency() / frequency) - 1;
   1118e:	9b01      	ldr	r3, [sp, #4]
   11190:	1d1a      	adds	r2, r3, #4
   11192:	9b01      	ldr	r3, [sp, #4]
   11194:	685b      	ldr	r3, [r3, #4]
   11196:	330c      	adds	r3, #12
   11198:	681b      	ldr	r3, [r3, #0]
   1119a:	4610      	mov	r0, r2
   1119c:	4798      	blx	r3
   1119e:	4602      	mov	r2, r0
   111a0:	9b00      	ldr	r3, [sp, #0]
   111a2:	fbb2 f3f3 	udiv	r3, r2, r3
   111a6:	3b01      	subs	r3, #1
   111a8:	9303      	str	r3, [sp, #12]
    int remainder         = (GetSystemFrequency() % frequency);
   111aa:	9b01      	ldr	r3, [sp, #4]
   111ac:	1d1a      	adds	r2, r3, #4
   111ae:	9b01      	ldr	r3, [sp, #4]
   111b0:	685b      	ldr	r3, [r3, #4]
   111b2:	330c      	adds	r3, #12
   111b4:	681b      	ldr	r3, [r3, #0]
   111b6:	4610      	mov	r0, r2
   111b8:	4798      	blx	r3
   111ba:	4603      	mov	r3, r0
   111bc:	9a00      	ldr	r2, [sp, #0]
   111be:	fbb3 f2f2 	udiv	r2, r3, r2
   111c2:	9900      	ldr	r1, [sp, #0]
   111c4:	fb01 f202 	mul.w	r2, r1, r2
   111c8:	1a9b      	subs	r3, r3, r2
   111ca:	9302      	str	r3, [sp, #8]
    if (reload_value > SysTick_LOAD_RELOAD_Msk)
   111cc:	9b03      	ldr	r3, [sp, #12]
   111ce:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
   111d2:	d305      	bcc.n	111e0 <SystemTimer::SetTickFrequency(unsigned long)+0x70>
    {
      reload_value = SysTick_LOAD_RELOAD_Msk;
   111d4:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
   111d8:	9303      	str	r3, [sp, #12]
      remainder    = SysTick_LOAD_RELOAD_Msk;
   111da:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
   111de:	9302      	str	r3, [sp, #8]
    }
    sys_tick->LOAD = reload_value;
   111e0:	4b07      	ldr	r3, [pc, #28]	; (11200 <SystemTimer::SetTickFrequency(unsigned long)+0x90>)
   111e2:	681b      	ldr	r3, [r3, #0]
   111e4:	9a03      	ldr	r2, [sp, #12]
   111e6:	605a      	str	r2, [r3, #4]
    return remainder;
   111e8:	9c02      	ldr	r4, [sp, #8]
   111ea:	462b      	mov	r3, r5
   111ec:	4619      	mov	r1, r3
   111ee:	4803      	ldr	r0, [pc, #12]	; (111fc <SystemTimer::SetTickFrequency(unsigned long)+0x8c>)
   111f0:	f001 fdf8 	bl	12de4 <__cyg_profile_func_exit>
   111f4:	4623      	mov	r3, r4
  }
   111f6:	4618      	mov	r0, r3
   111f8:	b005      	add	sp, #20
   111fa:	bd30      	pop	{r4, r5, pc}
   111fc:	00011171 	.word	0x00011171
   11200:	10000048 	.word	0x10000048

00011204 <Pin::SetPinFunction(unsigned char)>:
  }
  constexpr Pin(uint8_t port_number, uint8_t pin_number)
      : port_(port_number), pin_(pin_number)
  {
  }
  void SetPinFunction(uint8_t function) override
   11204:	b5f0      	push	{r4, r5, r6, r7, lr}
   11206:	b085      	sub	sp, #20
   11208:	4677      	mov	r7, lr
   1120a:	9003      	str	r0, [sp, #12]
   1120c:	460b      	mov	r3, r1
   1120e:	f88d 300b 	strb.w	r3, [sp, #11]
   11212:	463b      	mov	r3, r7
   11214:	4619      	mov	r1, r3
   11216:	4817      	ldr	r0, [pc, #92]	; (11274 <Pin::SetPinFunction(unsigned char)+0x70>)
   11218:	f001 fdd0 	bl	12dbc <__cyg_profile_func_enter>
  {
    pin_map->_register[port_][pin_] =
        BitPlace(pin_map->_register[port_][pin_], PinBitMap::kFunction,
   1121c:	4b16      	ldr	r3, [pc, #88]	; (11278 <Pin::SetPinFunction(unsigned char)+0x74>)
   1121e:	681b      	ldr	r3, [r3, #0]
   11220:	9a03      	ldr	r2, [sp, #12]
   11222:	7912      	ldrb	r2, [r2, #4]
   11224:	4610      	mov	r0, r2
   11226:	9a03      	ldr	r2, [sp, #12]
   11228:	7952      	ldrb	r2, [r2, #5]
   1122a:	4611      	mov	r1, r2
   1122c:	0142      	lsls	r2, r0, #5
   1122e:	440a      	add	r2, r1
   11230:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
                 function & 0b111, 3);
   11234:	f89d 300b 	ldrb.w	r3, [sp, #11]
        BitPlace(pin_map->_register[port_][pin_], PinBitMap::kFunction,
   11238:	f003 0207 	and.w	r2, r3, #7
    pin_map->_register[port_][pin_] =
   1123c:	4b0e      	ldr	r3, [pc, #56]	; (11278 <Pin::SetPinFunction(unsigned char)+0x74>)
   1123e:	681c      	ldr	r4, [r3, #0]
   11240:	9b03      	ldr	r3, [sp, #12]
   11242:	791b      	ldrb	r3, [r3, #4]
   11244:	461e      	mov	r6, r3
   11246:	9b03      	ldr	r3, [sp, #12]
   11248:	795b      	ldrb	r3, [r3, #5]
   1124a:	461d      	mov	r5, r3
        BitPlace(pin_map->_register[port_][pin_], PinBitMap::kFunction,
   1124c:	2303      	movs	r3, #3
   1124e:	9300      	str	r3, [sp, #0]
   11250:	4613      	mov	r3, r2
   11252:	2200      	movs	r2, #0
   11254:	9803      	ldr	r0, [sp, #12]
   11256:	f000 fa67 	bl	11728 <Pin::BitPlace(unsigned long, unsigned long, unsigned long, unsigned long)>
   1125a:	4602      	mov	r2, r0
    pin_map->_register[port_][pin_] =
   1125c:	0173      	lsls	r3, r6, #5
   1125e:	442b      	add	r3, r5
   11260:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
   11264:	463b      	mov	r3, r7
   11266:	4619      	mov	r1, r3
   11268:	4802      	ldr	r0, [pc, #8]	; (11274 <Pin::SetPinFunction(unsigned char)+0x70>)
   1126a:	f001 fdbb 	bl	12de4 <__cyg_profile_func_exit>
  }
   1126e:	bf00      	nop
   11270:	b005      	add	sp, #20
   11272:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11274:	00011205 	.word	0x00011205
   11278:	1000004c 	.word	0x1000004c

0001127c <Pin::SetMode(PinInterface::Mode)>:
  void SetMode(PinInterface::Mode mode) override
   1127c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1127e:	b087      	sub	sp, #28
   11280:	4677      	mov	r7, lr
   11282:	9003      	str	r0, [sp, #12]
   11284:	460b      	mov	r3, r1
   11286:	f88d 300b 	strb.w	r3, [sp, #11]
   1128a:	463b      	mov	r3, r7
   1128c:	4619      	mov	r1, r3
   1128e:	4819      	ldr	r0, [pc, #100]	; (112f4 <Pin::SetMode(PinInterface::Mode)+0x78>)
   11290:	f001 fd94 	bl	12dbc <__cyg_profile_func_enter>
  {
    uint8_t ui_mode                 = static_cast<uint8_t>(mode);
   11294:	f89d 300b 	ldrb.w	r3, [sp, #11]
   11298:	f88d 3017 	strb.w	r3, [sp, #23]
    pin_map->_register[port_][pin_] = BitPlace(
   1129c:	4b16      	ldr	r3, [pc, #88]	; (112f8 <Pin::SetMode(PinInterface::Mode)+0x7c>)
   1129e:	681b      	ldr	r3, [r3, #0]
        pin_map->_register[port_][pin_], PinBitMap::kMode, ui_mode & 0b11, 2);
   112a0:	9a03      	ldr	r2, [sp, #12]
   112a2:	7912      	ldrb	r2, [r2, #4]
   112a4:	4610      	mov	r0, r2
   112a6:	9a03      	ldr	r2, [sp, #12]
   112a8:	7952      	ldrb	r2, [r2, #5]
   112aa:	4611      	mov	r1, r2
    pin_map->_register[port_][pin_] = BitPlace(
   112ac:	0142      	lsls	r2, r0, #5
   112ae:	440a      	add	r2, r1
   112b0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
        pin_map->_register[port_][pin_], PinBitMap::kMode, ui_mode & 0b11, 2);
   112b4:	f89d 3017 	ldrb.w	r3, [sp, #23]
    pin_map->_register[port_][pin_] = BitPlace(
   112b8:	f003 0203 	and.w	r2, r3, #3
   112bc:	4b0e      	ldr	r3, [pc, #56]	; (112f8 <Pin::SetMode(PinInterface::Mode)+0x7c>)
   112be:	681c      	ldr	r4, [r3, #0]
   112c0:	9b03      	ldr	r3, [sp, #12]
   112c2:	791b      	ldrb	r3, [r3, #4]
   112c4:	461e      	mov	r6, r3
   112c6:	9b03      	ldr	r3, [sp, #12]
   112c8:	795b      	ldrb	r3, [r3, #5]
   112ca:	461d      	mov	r5, r3
   112cc:	2302      	movs	r3, #2
   112ce:	9300      	str	r3, [sp, #0]
   112d0:	4613      	mov	r3, r2
   112d2:	2203      	movs	r2, #3
   112d4:	9803      	ldr	r0, [sp, #12]
   112d6:	f000 fa27 	bl	11728 <Pin::BitPlace(unsigned long, unsigned long, unsigned long, unsigned long)>
   112da:	4602      	mov	r2, r0
   112dc:	0173      	lsls	r3, r6, #5
   112de:	442b      	add	r3, r5
   112e0:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
   112e4:	463b      	mov	r3, r7
   112e6:	4619      	mov	r1, r3
   112e8:	4802      	ldr	r0, [pc, #8]	; (112f4 <Pin::SetMode(PinInterface::Mode)+0x78>)
   112ea:	f001 fd7b 	bl	12de4 <__cyg_profile_func_exit>
  }
   112ee:	bf00      	nop
   112f0:	b007      	add	sp, #28
   112f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   112f4:	0001127d 	.word	0x0001127d
   112f8:	1000004c 	.word	0x1000004c

000112fc <Pin::EnableHysteresis(bool)>:
  void EnableHysteresis(bool enable_hysteresis = true) override
   112fc:	b5f0      	push	{r4, r5, r6, r7, lr}
   112fe:	b085      	sub	sp, #20
   11300:	4677      	mov	r7, lr
   11302:	9003      	str	r0, [sp, #12]
   11304:	460b      	mov	r3, r1
   11306:	f88d 300b 	strb.w	r3, [sp, #11]
   1130a:	463b      	mov	r3, r7
   1130c:	4619      	mov	r1, r3
   1130e:	4816      	ldr	r0, [pc, #88]	; (11368 <Pin::EnableHysteresis(bool)+0x6c>)
   11310:	f001 fd54 	bl	12dbc <__cyg_profile_func_enter>
  {
    pin_map->_register[port_][pin_] =
        BitPlace(pin_map->_register[port_][pin_], PinBitMap::kHysteresis,
   11314:	4b15      	ldr	r3, [pc, #84]	; (1136c <Pin::EnableHysteresis(bool)+0x70>)
   11316:	681b      	ldr	r3, [r3, #0]
   11318:	9a03      	ldr	r2, [sp, #12]
   1131a:	7912      	ldrb	r2, [r2, #4]
   1131c:	4610      	mov	r0, r2
   1131e:	9a03      	ldr	r2, [sp, #12]
   11320:	7952      	ldrb	r2, [r2, #5]
   11322:	4611      	mov	r1, r2
   11324:	0142      	lsls	r2, r0, #5
   11326:	440a      	add	r2, r1
   11328:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   1132c:	f89d 200b 	ldrb.w	r2, [sp, #11]
    pin_map->_register[port_][pin_] =
   11330:	4b0e      	ldr	r3, [pc, #56]	; (1136c <Pin::EnableHysteresis(bool)+0x70>)
   11332:	681c      	ldr	r4, [r3, #0]
   11334:	9b03      	ldr	r3, [sp, #12]
   11336:	791b      	ldrb	r3, [r3, #4]
   11338:	461e      	mov	r6, r3
   1133a:	9b03      	ldr	r3, [sp, #12]
   1133c:	795b      	ldrb	r3, [r3, #5]
   1133e:	461d      	mov	r5, r3
        BitPlace(pin_map->_register[port_][pin_], PinBitMap::kHysteresis,
   11340:	2301      	movs	r3, #1
   11342:	9300      	str	r3, [sp, #0]
   11344:	4613      	mov	r3, r2
   11346:	2205      	movs	r2, #5
   11348:	9803      	ldr	r0, [sp, #12]
   1134a:	f000 f9ed 	bl	11728 <Pin::BitPlace(unsigned long, unsigned long, unsigned long, unsigned long)>
   1134e:	4602      	mov	r2, r0
    pin_map->_register[port_][pin_] =
   11350:	0173      	lsls	r3, r6, #5
   11352:	442b      	add	r3, r5
   11354:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
   11358:	463b      	mov	r3, r7
   1135a:	4619      	mov	r1, r3
   1135c:	4802      	ldr	r0, [pc, #8]	; (11368 <Pin::EnableHysteresis(bool)+0x6c>)
   1135e:	f001 fd41 	bl	12de4 <__cyg_profile_func_exit>
                 enable_hysteresis, 1);
  }
   11362:	bf00      	nop
   11364:	b005      	add	sp, #20
   11366:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11368:	000112fd 	.word	0x000112fd
   1136c:	1000004c 	.word	0x1000004c

00011370 <Pin::SetAsActiveLow(bool)>:
  void SetAsActiveLow(bool set_as_active_low = true) override
   11370:	b5f0      	push	{r4, r5, r6, r7, lr}
   11372:	b085      	sub	sp, #20
   11374:	4677      	mov	r7, lr
   11376:	9003      	str	r0, [sp, #12]
   11378:	460b      	mov	r3, r1
   1137a:	f88d 300b 	strb.w	r3, [sp, #11]
   1137e:	463b      	mov	r3, r7
   11380:	4619      	mov	r1, r3
   11382:	4816      	ldr	r0, [pc, #88]	; (113dc <Pin::SetAsActiveLow(bool)+0x6c>)
   11384:	f001 fd1a 	bl	12dbc <__cyg_profile_func_enter>
  {
    pin_map->_register[port_][pin_] =
        BitPlace(pin_map->_register[port_][pin_], PinBitMap::kInputInvert,
   11388:	4b15      	ldr	r3, [pc, #84]	; (113e0 <Pin::SetAsActiveLow(bool)+0x70>)
   1138a:	681b      	ldr	r3, [r3, #0]
   1138c:	9a03      	ldr	r2, [sp, #12]
   1138e:	7912      	ldrb	r2, [r2, #4]
   11390:	4610      	mov	r0, r2
   11392:	9a03      	ldr	r2, [sp, #12]
   11394:	7952      	ldrb	r2, [r2, #5]
   11396:	4611      	mov	r1, r2
   11398:	0142      	lsls	r2, r0, #5
   1139a:	440a      	add	r2, r1
   1139c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   113a0:	f89d 200b 	ldrb.w	r2, [sp, #11]
    pin_map->_register[port_][pin_] =
   113a4:	4b0e      	ldr	r3, [pc, #56]	; (113e0 <Pin::SetAsActiveLow(bool)+0x70>)
   113a6:	681c      	ldr	r4, [r3, #0]
   113a8:	9b03      	ldr	r3, [sp, #12]
   113aa:	791b      	ldrb	r3, [r3, #4]
   113ac:	461e      	mov	r6, r3
   113ae:	9b03      	ldr	r3, [sp, #12]
   113b0:	795b      	ldrb	r3, [r3, #5]
   113b2:	461d      	mov	r5, r3
        BitPlace(pin_map->_register[port_][pin_], PinBitMap::kInputInvert,
   113b4:	2301      	movs	r3, #1
   113b6:	9300      	str	r3, [sp, #0]
   113b8:	4613      	mov	r3, r2
   113ba:	2206      	movs	r2, #6
   113bc:	9803      	ldr	r0, [sp, #12]
   113be:	f000 f9b3 	bl	11728 <Pin::BitPlace(unsigned long, unsigned long, unsigned long, unsigned long)>
   113c2:	4602      	mov	r2, r0
    pin_map->_register[port_][pin_] =
   113c4:	0173      	lsls	r3, r6, #5
   113c6:	442b      	add	r3, r5
   113c8:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
   113cc:	463b      	mov	r3, r7
   113ce:	4619      	mov	r1, r3
   113d0:	4802      	ldr	r0, [pc, #8]	; (113dc <Pin::SetAsActiveLow(bool)+0x6c>)
   113d2:	f001 fd07 	bl	12de4 <__cyg_profile_func_exit>
                 set_as_active_low, 1);
  }
   113d6:	bf00      	nop
   113d8:	b005      	add	sp, #20
   113da:	bdf0      	pop	{r4, r5, r6, r7, pc}
   113dc:	00011371 	.word	0x00011371
   113e0:	1000004c 	.word	0x1000004c

000113e4 <Pin::SetAsAnalogMode(bool)>:
  // Set bit to 0 to enable analog mode
  void SetAsAnalogMode(bool set_as_analog = true) override
   113e4:	b5f0      	push	{r4, r5, r6, r7, lr}
   113e6:	b085      	sub	sp, #20
   113e8:	4677      	mov	r7, lr
   113ea:	9003      	str	r0, [sp, #12]
   113ec:	460b      	mov	r3, r1
   113ee:	f88d 300b 	strb.w	r3, [sp, #11]
   113f2:	463b      	mov	r3, r7
   113f4:	4619      	mov	r1, r3
   113f6:	4818      	ldr	r0, [pc, #96]	; (11458 <Pin::SetAsAnalogMode(bool)+0x74>)
   113f8:	f001 fce0 	bl	12dbc <__cyg_profile_func_enter>
  {
    pin_map->_register[port_][pin_] =
        BitPlace(pin_map->_register[port_][pin_], PinBitMap::kAnalogDigitalMode,
   113fc:	4b17      	ldr	r3, [pc, #92]	; (1145c <Pin::SetAsAnalogMode(bool)+0x78>)
   113fe:	681b      	ldr	r3, [r3, #0]
   11400:	9a03      	ldr	r2, [sp, #12]
   11402:	7912      	ldrb	r2, [r2, #4]
   11404:	4610      	mov	r0, r2
   11406:	9a03      	ldr	r2, [sp, #12]
   11408:	7952      	ldrb	r2, [r2, #5]
   1140a:	4611      	mov	r1, r2
   1140c:	0142      	lsls	r2, r0, #5
   1140e:	440a      	add	r2, r1
   11410:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
                 !set_as_analog, 1);
   11414:	f89d 300b 	ldrb.w	r3, [sp, #11]
   11418:	f083 0301 	eor.w	r3, r3, #1
   1141c:	b2db      	uxtb	r3, r3
        BitPlace(pin_map->_register[port_][pin_], PinBitMap::kAnalogDigitalMode,
   1141e:	461a      	mov	r2, r3
    pin_map->_register[port_][pin_] =
   11420:	4b0e      	ldr	r3, [pc, #56]	; (1145c <Pin::SetAsAnalogMode(bool)+0x78>)
   11422:	681c      	ldr	r4, [r3, #0]
   11424:	9b03      	ldr	r3, [sp, #12]
   11426:	791b      	ldrb	r3, [r3, #4]
   11428:	461e      	mov	r6, r3
   1142a:	9b03      	ldr	r3, [sp, #12]
   1142c:	795b      	ldrb	r3, [r3, #5]
   1142e:	461d      	mov	r5, r3
        BitPlace(pin_map->_register[port_][pin_], PinBitMap::kAnalogDigitalMode,
   11430:	2301      	movs	r3, #1
   11432:	9300      	str	r3, [sp, #0]
   11434:	4613      	mov	r3, r2
   11436:	2207      	movs	r2, #7
   11438:	9803      	ldr	r0, [sp, #12]
   1143a:	f000 f975 	bl	11728 <Pin::BitPlace(unsigned long, unsigned long, unsigned long, unsigned long)>
   1143e:	4602      	mov	r2, r0
    pin_map->_register[port_][pin_] =
   11440:	0173      	lsls	r3, r6, #5
   11442:	442b      	add	r3, r5
   11444:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
   11448:	463b      	mov	r3, r7
   1144a:	4619      	mov	r1, r3
   1144c:	4802      	ldr	r0, [pc, #8]	; (11458 <Pin::SetAsAnalogMode(bool)+0x74>)
   1144e:	f001 fcc9 	bl	12de4 <__cyg_profile_func_exit>
  }
   11452:	bf00      	nop
   11454:	b005      	add	sp, #20
   11456:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11458:	000113e5 	.word	0x000113e5
   1145c:	1000004c 	.word	0x1000004c

00011460 <Pin::EnableDigitalFilter(bool)>:
  // Enable by setting bit to 0 to enable digital filter.
  void EnableDigitalFilter(bool enable_digital_filter = true) override
   11460:	b5f0      	push	{r4, r5, r6, r7, lr}
   11462:	b085      	sub	sp, #20
   11464:	4677      	mov	r7, lr
   11466:	9003      	str	r0, [sp, #12]
   11468:	460b      	mov	r3, r1
   1146a:	f88d 300b 	strb.w	r3, [sp, #11]
   1146e:	463b      	mov	r3, r7
   11470:	4619      	mov	r1, r3
   11472:	4818      	ldr	r0, [pc, #96]	; (114d4 <Pin::EnableDigitalFilter(bool)+0x74>)
   11474:	f001 fca2 	bl	12dbc <__cyg_profile_func_enter>
  {
    pin_map->_register[port_][pin_] =
        BitPlace(pin_map->_register[port_][pin_], PinBitMap::kDigitalFilter,
   11478:	4b17      	ldr	r3, [pc, #92]	; (114d8 <Pin::EnableDigitalFilter(bool)+0x78>)
   1147a:	681b      	ldr	r3, [r3, #0]
   1147c:	9a03      	ldr	r2, [sp, #12]
   1147e:	7912      	ldrb	r2, [r2, #4]
   11480:	4610      	mov	r0, r2
   11482:	9a03      	ldr	r2, [sp, #12]
   11484:	7952      	ldrb	r2, [r2, #5]
   11486:	4611      	mov	r1, r2
   11488:	0142      	lsls	r2, r0, #5
   1148a:	440a      	add	r2, r1
   1148c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
                 !enable_digital_filter, 1);
   11490:	f89d 300b 	ldrb.w	r3, [sp, #11]
   11494:	f083 0301 	eor.w	r3, r3, #1
   11498:	b2db      	uxtb	r3, r3
        BitPlace(pin_map->_register[port_][pin_], PinBitMap::kDigitalFilter,
   1149a:	461a      	mov	r2, r3
    pin_map->_register[port_][pin_] =
   1149c:	4b0e      	ldr	r3, [pc, #56]	; (114d8 <Pin::EnableDigitalFilter(bool)+0x78>)
   1149e:	681c      	ldr	r4, [r3, #0]
   114a0:	9b03      	ldr	r3, [sp, #12]
   114a2:	791b      	ldrb	r3, [r3, #4]
   114a4:	461e      	mov	r6, r3
   114a6:	9b03      	ldr	r3, [sp, #12]
   114a8:	795b      	ldrb	r3, [r3, #5]
   114aa:	461d      	mov	r5, r3
        BitPlace(pin_map->_register[port_][pin_], PinBitMap::kDigitalFilter,
   114ac:	2301      	movs	r3, #1
   114ae:	9300      	str	r3, [sp, #0]
   114b0:	4613      	mov	r3, r2
   114b2:	2208      	movs	r2, #8
   114b4:	9803      	ldr	r0, [sp, #12]
   114b6:	f000 f937 	bl	11728 <Pin::BitPlace(unsigned long, unsigned long, unsigned long, unsigned long)>
   114ba:	4602      	mov	r2, r0
    pin_map->_register[port_][pin_] =
   114bc:	0173      	lsls	r3, r6, #5
   114be:	442b      	add	r3, r5
   114c0:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
   114c4:	463b      	mov	r3, r7
   114c6:	4619      	mov	r1, r3
   114c8:	4802      	ldr	r0, [pc, #8]	; (114d4 <Pin::EnableDigitalFilter(bool)+0x74>)
   114ca:	f001 fc8b 	bl	12de4 <__cyg_profile_func_exit>
  }
   114ce:	bf00      	nop
   114d0:	b005      	add	sp, #20
   114d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   114d4:	00011461 	.word	0x00011461
   114d8:	1000004c 	.word	0x1000004c

000114dc <Pin::EnableFastMode(bool)>:
  void EnableFastMode(bool enable_fast_mode = true) override
   114dc:	b5f0      	push	{r4, r5, r6, r7, lr}
   114de:	b085      	sub	sp, #20
   114e0:	4677      	mov	r7, lr
   114e2:	9003      	str	r0, [sp, #12]
   114e4:	460b      	mov	r3, r1
   114e6:	f88d 300b 	strb.w	r3, [sp, #11]
   114ea:	463b      	mov	r3, r7
   114ec:	4619      	mov	r1, r3
   114ee:	4816      	ldr	r0, [pc, #88]	; (11548 <Pin::EnableFastMode(bool)+0x6c>)
   114f0:	f001 fc64 	bl	12dbc <__cyg_profile_func_enter>
  {
    pin_map->_register[port_][pin_] = BitPlace(
   114f4:	4b15      	ldr	r3, [pc, #84]	; (1154c <Pin::EnableFastMode(bool)+0x70>)
   114f6:	681b      	ldr	r3, [r3, #0]
        pin_map->_register[port_][pin_], PinBitMap::kSlew, enable_fast_mode, 1);
   114f8:	9a03      	ldr	r2, [sp, #12]
   114fa:	7912      	ldrb	r2, [r2, #4]
   114fc:	4610      	mov	r0, r2
   114fe:	9a03      	ldr	r2, [sp, #12]
   11500:	7952      	ldrb	r2, [r2, #5]
   11502:	4611      	mov	r1, r2
    pin_map->_register[port_][pin_] = BitPlace(
   11504:	0142      	lsls	r2, r0, #5
   11506:	440a      	add	r2, r1
   11508:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   1150c:	f89d 200b 	ldrb.w	r2, [sp, #11]
   11510:	4b0e      	ldr	r3, [pc, #56]	; (1154c <Pin::EnableFastMode(bool)+0x70>)
   11512:	681c      	ldr	r4, [r3, #0]
   11514:	9b03      	ldr	r3, [sp, #12]
   11516:	791b      	ldrb	r3, [r3, #4]
   11518:	461e      	mov	r6, r3
   1151a:	9b03      	ldr	r3, [sp, #12]
   1151c:	795b      	ldrb	r3, [r3, #5]
   1151e:	461d      	mov	r5, r3
   11520:	2301      	movs	r3, #1
   11522:	9300      	str	r3, [sp, #0]
   11524:	4613      	mov	r3, r2
   11526:	2209      	movs	r2, #9
   11528:	9803      	ldr	r0, [sp, #12]
   1152a:	f000 f8fd 	bl	11728 <Pin::BitPlace(unsigned long, unsigned long, unsigned long, unsigned long)>
   1152e:	4602      	mov	r2, r0
   11530:	0173      	lsls	r3, r6, #5
   11532:	442b      	add	r3, r5
   11534:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
   11538:	463b      	mov	r3, r7
   1153a:	4619      	mov	r1, r3
   1153c:	4802      	ldr	r0, [pc, #8]	; (11548 <Pin::EnableFastMode(bool)+0x6c>)
   1153e:	f001 fc51 	bl	12de4 <__cyg_profile_func_exit>
  }
   11542:	bf00      	nop
   11544:	b005      	add	sp, #20
   11546:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11548:	000114dd 	.word	0x000114dd
   1154c:	1000004c 	.word	0x1000004c

00011550 <Pin::EnableI2cHighSpeedMode(bool)>:
  // Enable by setting bit to 0 for i2c high speed mode
  void EnableI2cHighSpeedMode(bool enable_high_speed = true) override
   11550:	b5f0      	push	{r4, r5, r6, r7, lr}
   11552:	b085      	sub	sp, #20
   11554:	4677      	mov	r7, lr
   11556:	9003      	str	r0, [sp, #12]
   11558:	460b      	mov	r3, r1
   1155a:	f88d 300b 	strb.w	r3, [sp, #11]
   1155e:	463b      	mov	r3, r7
   11560:	4619      	mov	r1, r3
   11562:	4818      	ldr	r0, [pc, #96]	; (115c4 <Pin::EnableI2cHighSpeedMode(bool)+0x74>)
   11564:	f001 fc2a 	bl	12dbc <__cyg_profile_func_enter>
  {
    pin_map->_register[port_][pin_] =
        BitPlace(pin_map->_register[port_][pin_], PinBitMap::kI2cHighSpeed,
   11568:	4b17      	ldr	r3, [pc, #92]	; (115c8 <Pin::EnableI2cHighSpeedMode(bool)+0x78>)
   1156a:	681b      	ldr	r3, [r3, #0]
   1156c:	9a03      	ldr	r2, [sp, #12]
   1156e:	7912      	ldrb	r2, [r2, #4]
   11570:	4610      	mov	r0, r2
   11572:	9a03      	ldr	r2, [sp, #12]
   11574:	7952      	ldrb	r2, [r2, #5]
   11576:	4611      	mov	r1, r2
   11578:	0142      	lsls	r2, r0, #5
   1157a:	440a      	add	r2, r1
   1157c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
                 !enable_high_speed, 1);
   11580:	f89d 300b 	ldrb.w	r3, [sp, #11]
   11584:	f083 0301 	eor.w	r3, r3, #1
   11588:	b2db      	uxtb	r3, r3
        BitPlace(pin_map->_register[port_][pin_], PinBitMap::kI2cHighSpeed,
   1158a:	461a      	mov	r2, r3
    pin_map->_register[port_][pin_] =
   1158c:	4b0e      	ldr	r3, [pc, #56]	; (115c8 <Pin::EnableI2cHighSpeedMode(bool)+0x78>)
   1158e:	681c      	ldr	r4, [r3, #0]
   11590:	9b03      	ldr	r3, [sp, #12]
   11592:	791b      	ldrb	r3, [r3, #4]
   11594:	461e      	mov	r6, r3
   11596:	9b03      	ldr	r3, [sp, #12]
   11598:	795b      	ldrb	r3, [r3, #5]
   1159a:	461d      	mov	r5, r3
        BitPlace(pin_map->_register[port_][pin_], PinBitMap::kI2cHighSpeed,
   1159c:	2301      	movs	r3, #1
   1159e:	9300      	str	r3, [sp, #0]
   115a0:	4613      	mov	r3, r2
   115a2:	2208      	movs	r2, #8
   115a4:	9803      	ldr	r0, [sp, #12]
   115a6:	f000 f8bf 	bl	11728 <Pin::BitPlace(unsigned long, unsigned long, unsigned long, unsigned long)>
   115aa:	4602      	mov	r2, r0
    pin_map->_register[port_][pin_] =
   115ac:	0173      	lsls	r3, r6, #5
   115ae:	442b      	add	r3, r5
   115b0:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
   115b4:	463b      	mov	r3, r7
   115b6:	4619      	mov	r1, r3
   115b8:	4802      	ldr	r0, [pc, #8]	; (115c4 <Pin::EnableI2cHighSpeedMode(bool)+0x74>)
   115ba:	f001 fc13 	bl	12de4 <__cyg_profile_func_exit>
  }
   115be:	bf00      	nop
   115c0:	b005      	add	sp, #20
   115c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   115c4:	00011551 	.word	0x00011551
   115c8:	1000004c 	.word	0x1000004c

000115cc <Pin::EnableI2cHighCurrentDrive(bool)>:
  void EnableI2cHighCurrentDrive(bool enable_high_current = true) override
   115cc:	b5f0      	push	{r4, r5, r6, r7, lr}
   115ce:	b085      	sub	sp, #20
   115d0:	4677      	mov	r7, lr
   115d2:	9003      	str	r0, [sp, #12]
   115d4:	460b      	mov	r3, r1
   115d6:	f88d 300b 	strb.w	r3, [sp, #11]
   115da:	463b      	mov	r3, r7
   115dc:	4619      	mov	r1, r3
   115de:	4816      	ldr	r0, [pc, #88]	; (11638 <Pin::EnableI2cHighCurrentDrive(bool)+0x6c>)
   115e0:	f001 fbec 	bl	12dbc <__cyg_profile_func_enter>
  {
    pin_map->_register[port_][pin_] =
        BitPlace(pin_map->_register[port_][pin_],
   115e4:	4b15      	ldr	r3, [pc, #84]	; (1163c <Pin::EnableI2cHighCurrentDrive(bool)+0x70>)
   115e6:	681b      	ldr	r3, [r3, #0]
   115e8:	9a03      	ldr	r2, [sp, #12]
   115ea:	7912      	ldrb	r2, [r2, #4]
   115ec:	4610      	mov	r0, r2
   115ee:	9a03      	ldr	r2, [sp, #12]
   115f0:	7952      	ldrb	r2, [r2, #5]
   115f2:	4611      	mov	r1, r2
   115f4:	0142      	lsls	r2, r0, #5
   115f6:	440a      	add	r2, r1
   115f8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   115fc:	f89d 200b 	ldrb.w	r2, [sp, #11]
    pin_map->_register[port_][pin_] =
   11600:	4b0e      	ldr	r3, [pc, #56]	; (1163c <Pin::EnableI2cHighCurrentDrive(bool)+0x70>)
   11602:	681c      	ldr	r4, [r3, #0]
   11604:	9b03      	ldr	r3, [sp, #12]
   11606:	791b      	ldrb	r3, [r3, #4]
   11608:	461e      	mov	r6, r3
   1160a:	9b03      	ldr	r3, [sp, #12]
   1160c:	795b      	ldrb	r3, [r3, #5]
   1160e:	461d      	mov	r5, r3
        BitPlace(pin_map->_register[port_][pin_],
   11610:	2301      	movs	r3, #1
   11612:	9300      	str	r3, [sp, #0]
   11614:	4613      	mov	r3, r2
   11616:	2209      	movs	r2, #9
   11618:	9803      	ldr	r0, [sp, #12]
   1161a:	f000 f885 	bl	11728 <Pin::BitPlace(unsigned long, unsigned long, unsigned long, unsigned long)>
   1161e:	4602      	mov	r2, r0
    pin_map->_register[port_][pin_] =
   11620:	0173      	lsls	r3, r6, #5
   11622:	442b      	add	r3, r5
   11624:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
   11628:	463b      	mov	r3, r7
   1162a:	4619      	mov	r1, r3
   1162c:	4802      	ldr	r0, [pc, #8]	; (11638 <Pin::EnableI2cHighCurrentDrive(bool)+0x6c>)
   1162e:	f001 fbd9 	bl	12de4 <__cyg_profile_func_exit>
                 PinBitMap::kI2cHighCurrentDrive, enable_high_current, 1);
  }
   11632:	bf00      	nop
   11634:	b005      	add	sp, #20
   11636:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11638:	000115cd 	.word	0x000115cd
   1163c:	1000004c 	.word	0x1000004c

00011640 <Pin::SetAsOpenDrain(bool)>:
  void SetAsOpenDrain(bool set_as_open_drain = true) override
   11640:	b5f0      	push	{r4, r5, r6, r7, lr}
   11642:	b085      	sub	sp, #20
   11644:	4677      	mov	r7, lr
   11646:	9003      	str	r0, [sp, #12]
   11648:	460b      	mov	r3, r1
   1164a:	f88d 300b 	strb.w	r3, [sp, #11]
   1164e:	463b      	mov	r3, r7
   11650:	4619      	mov	r1, r3
   11652:	4816      	ldr	r0, [pc, #88]	; (116ac <Pin::SetAsOpenDrain(bool)+0x6c>)
   11654:	f001 fbb2 	bl	12dbc <__cyg_profile_func_enter>
  {
    pin_map->_register[port_][pin_] =
        BitPlace(pin_map->_register[port_][pin_], PinBitMap::kOpenDrain,
   11658:	4b15      	ldr	r3, [pc, #84]	; (116b0 <Pin::SetAsOpenDrain(bool)+0x70>)
   1165a:	681b      	ldr	r3, [r3, #0]
   1165c:	9a03      	ldr	r2, [sp, #12]
   1165e:	7912      	ldrb	r2, [r2, #4]
   11660:	4610      	mov	r0, r2
   11662:	9a03      	ldr	r2, [sp, #12]
   11664:	7952      	ldrb	r2, [r2, #5]
   11666:	4611      	mov	r1, r2
   11668:	0142      	lsls	r2, r0, #5
   1166a:	440a      	add	r2, r1
   1166c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   11670:	f89d 200b 	ldrb.w	r2, [sp, #11]
    pin_map->_register[port_][pin_] =
   11674:	4b0e      	ldr	r3, [pc, #56]	; (116b0 <Pin::SetAsOpenDrain(bool)+0x70>)
   11676:	681c      	ldr	r4, [r3, #0]
   11678:	9b03      	ldr	r3, [sp, #12]
   1167a:	791b      	ldrb	r3, [r3, #4]
   1167c:	461e      	mov	r6, r3
   1167e:	9b03      	ldr	r3, [sp, #12]
   11680:	795b      	ldrb	r3, [r3, #5]
   11682:	461d      	mov	r5, r3
        BitPlace(pin_map->_register[port_][pin_], PinBitMap::kOpenDrain,
   11684:	2301      	movs	r3, #1
   11686:	9300      	str	r3, [sp, #0]
   11688:	4613      	mov	r3, r2
   1168a:	220a      	movs	r2, #10
   1168c:	9803      	ldr	r0, [sp, #12]
   1168e:	f000 f84b 	bl	11728 <Pin::BitPlace(unsigned long, unsigned long, unsigned long, unsigned long)>
   11692:	4602      	mov	r2, r0
    pin_map->_register[port_][pin_] =
   11694:	0173      	lsls	r3, r6, #5
   11696:	442b      	add	r3, r5
   11698:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
   1169c:	463b      	mov	r3, r7
   1169e:	4619      	mov	r1, r3
   116a0:	4802      	ldr	r0, [pc, #8]	; (116ac <Pin::SetAsOpenDrain(bool)+0x6c>)
   116a2:	f001 fb9f 	bl	12de4 <__cyg_profile_func_exit>
                 set_as_open_drain, 1);
  }
   116a6:	bf00      	nop
   116a8:	b005      	add	sp, #20
   116aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
   116ac:	00011641 	.word	0x00011641
   116b0:	1000004c 	.word	0x1000004c

000116b4 <Pin::EnableDac(bool)>:
  void EnableDac(bool enable_dac = true) override
   116b4:	b5f0      	push	{r4, r5, r6, r7, lr}
   116b6:	b085      	sub	sp, #20
   116b8:	4677      	mov	r7, lr
   116ba:	9003      	str	r0, [sp, #12]
   116bc:	460b      	mov	r3, r1
   116be:	f88d 300b 	strb.w	r3, [sp, #11]
   116c2:	463b      	mov	r3, r7
   116c4:	4619      	mov	r1, r3
   116c6:	4816      	ldr	r0, [pc, #88]	; (11720 <Pin::EnableDac(bool)+0x6c>)
   116c8:	f001 fb78 	bl	12dbc <__cyg_profile_func_enter>
  {
    pin_map->_register[port_][pin_] = BitPlace(
   116cc:	4b15      	ldr	r3, [pc, #84]	; (11724 <Pin::EnableDac(bool)+0x70>)
   116ce:	681b      	ldr	r3, [r3, #0]
        pin_map->_register[port_][pin_], PinBitMap::kDacEnable, enable_dac, 1);
   116d0:	9a03      	ldr	r2, [sp, #12]
   116d2:	7912      	ldrb	r2, [r2, #4]
   116d4:	4610      	mov	r0, r2
   116d6:	9a03      	ldr	r2, [sp, #12]
   116d8:	7952      	ldrb	r2, [r2, #5]
   116da:	4611      	mov	r1, r2
    pin_map->_register[port_][pin_] = BitPlace(
   116dc:	0142      	lsls	r2, r0, #5
   116de:	440a      	add	r2, r1
   116e0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   116e4:	f89d 200b 	ldrb.w	r2, [sp, #11]
   116e8:	4b0e      	ldr	r3, [pc, #56]	; (11724 <Pin::EnableDac(bool)+0x70>)
   116ea:	681c      	ldr	r4, [r3, #0]
   116ec:	9b03      	ldr	r3, [sp, #12]
   116ee:	791b      	ldrb	r3, [r3, #4]
   116f0:	461e      	mov	r6, r3
   116f2:	9b03      	ldr	r3, [sp, #12]
   116f4:	795b      	ldrb	r3, [r3, #5]
   116f6:	461d      	mov	r5, r3
   116f8:	2301      	movs	r3, #1
   116fa:	9300      	str	r3, [sp, #0]
   116fc:	4613      	mov	r3, r2
   116fe:	2210      	movs	r2, #16
   11700:	9803      	ldr	r0, [sp, #12]
   11702:	f000 f811 	bl	11728 <Pin::BitPlace(unsigned long, unsigned long, unsigned long, unsigned long)>
   11706:	4602      	mov	r2, r0
   11708:	0173      	lsls	r3, r6, #5
   1170a:	442b      	add	r3, r5
   1170c:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
   11710:	463b      	mov	r3, r7
   11712:	4619      	mov	r1, r3
   11714:	4802      	ldr	r0, [pc, #8]	; (11720 <Pin::EnableDac(bool)+0x6c>)
   11716:	f001 fb65 	bl	12de4 <__cyg_profile_func_exit>
  }
   1171a:	bf00      	nop
   1171c:	b005      	add	sp, #20
   1171e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11720:	000116b5 	.word	0x000116b5
   11724:	1000004c 	.word	0x1000004c

00011728 <Pin::BitPlace(unsigned long, unsigned long, unsigned long, unsigned long)>:
  inline uint32_t BitPlace(uint32_t target, uint32_t position, uint32_t value,
   11728:	b530      	push	{r4, r5, lr}
   1172a:	b087      	sub	sp, #28
   1172c:	4675      	mov	r5, lr
   1172e:	9003      	str	r0, [sp, #12]
   11730:	9102      	str	r1, [sp, #8]
   11732:	9201      	str	r2, [sp, #4]
   11734:	9300      	str	r3, [sp, #0]
   11736:	462b      	mov	r3, r5
   11738:	4619      	mov	r1, r3
   1173a:	4813      	ldr	r0, [pc, #76]	; (11788 <Pin::BitPlace(unsigned long, unsigned long, unsigned long, unsigned long)+0x60>)
   1173c:	f001 fb3e 	bl	12dbc <__cyg_profile_func_enter>
                           uint32_t value_width)
  {
    // Generate mask with all 1s
    uint32_t mask = 0xFFFFFFFF >> (32 - value_width);
   11740:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   11742:	f1c3 0320 	rsb	r3, r3, #32
   11746:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1174a:	fa22 f303 	lsr.w	r3, r2, r3
   1174e:	9305      	str	r3, [sp, #20]
    target &= ~(mask << position);
   11750:	9a05      	ldr	r2, [sp, #20]
   11752:	9b01      	ldr	r3, [sp, #4]
   11754:	fa02 f303 	lsl.w	r3, r2, r3
   11758:	43db      	mvns	r3, r3
   1175a:	9a02      	ldr	r2, [sp, #8]
   1175c:	4013      	ands	r3, r2
   1175e:	9302      	str	r3, [sp, #8]
    target |= (value & mask) << position;
   11760:	9a00      	ldr	r2, [sp, #0]
   11762:	9b05      	ldr	r3, [sp, #20]
   11764:	401a      	ands	r2, r3
   11766:	9b01      	ldr	r3, [sp, #4]
   11768:	fa02 f303 	lsl.w	r3, r2, r3
   1176c:	9a02      	ldr	r2, [sp, #8]
   1176e:	4313      	orrs	r3, r2
   11770:	9302      	str	r3, [sp, #8]
    return target;
   11772:	9c02      	ldr	r4, [sp, #8]
   11774:	462b      	mov	r3, r5
   11776:	4619      	mov	r1, r3
   11778:	4803      	ldr	r0, [pc, #12]	; (11788 <Pin::BitPlace(unsigned long, unsigned long, unsigned long, unsigned long)+0x60>)
   1177a:	f001 fb33 	bl	12de4 <__cyg_profile_func_exit>
   1177e:	4623      	mov	r3, r4
  }
   11780:	4618      	mov	r0, r3
   11782:	b007      	add	sp, #28
   11784:	bd30      	pop	{r4, r5, pc}
   11786:	bf00      	nop
   11788:	00011729 	.word	0x00011729

0001178c <Pin::GetPort() const>:
  uint8_t GetPort() const override
   1178c:	b530      	push	{r4, r5, lr}
   1178e:	b083      	sub	sp, #12
   11790:	4675      	mov	r5, lr
   11792:	9001      	str	r0, [sp, #4]
   11794:	462b      	mov	r3, r5
   11796:	4619      	mov	r1, r3
   11798:	4806      	ldr	r0, [pc, #24]	; (117b4 <Pin::GetPort() const+0x28>)
   1179a:	f001 fb0f 	bl	12dbc <__cyg_profile_func_enter>
  {
    return port_;
   1179e:	9b01      	ldr	r3, [sp, #4]
   117a0:	791c      	ldrb	r4, [r3, #4]
   117a2:	462b      	mov	r3, r5
   117a4:	4619      	mov	r1, r3
   117a6:	4803      	ldr	r0, [pc, #12]	; (117b4 <Pin::GetPort() const+0x28>)
   117a8:	f001 fb1c 	bl	12de4 <__cyg_profile_func_exit>
   117ac:	4623      	mov	r3, r4
  }
   117ae:	4618      	mov	r0, r3
   117b0:	b003      	add	sp, #12
   117b2:	bd30      	pop	{r4, r5, pc}
   117b4:	0001178d 	.word	0x0001178d

000117b8 <Pin::GetPin() const>:
  uint8_t GetPin() const override
   117b8:	b530      	push	{r4, r5, lr}
   117ba:	b083      	sub	sp, #12
   117bc:	4675      	mov	r5, lr
   117be:	9001      	str	r0, [sp, #4]
   117c0:	462b      	mov	r3, r5
   117c2:	4619      	mov	r1, r3
   117c4:	4806      	ldr	r0, [pc, #24]	; (117e0 <Pin::GetPin() const+0x28>)
   117c6:	f001 faf9 	bl	12dbc <__cyg_profile_func_enter>
  {
    return pin_;
   117ca:	9b01      	ldr	r3, [sp, #4]
   117cc:	795c      	ldrb	r4, [r3, #5]
   117ce:	462b      	mov	r3, r5
   117d0:	4619      	mov	r1, r3
   117d2:	4803      	ldr	r0, [pc, #12]	; (117e0 <Pin::GetPin() const+0x28>)
   117d4:	f001 fb06 	bl	12de4 <__cyg_profile_func_exit>
   117d8:	4623      	mov	r3, r4
  }
   117da:	4618      	mov	r0, r3
   117dc:	b003      	add	sp, #12
   117de:	bd30      	pop	{r4, r5, pc}
   117e0:	000117b9 	.word	0x000117b9

000117e4 <unsigned char util::Value<TimerInterface::TimerPort, unsigned char>(TimerInterface::TimerPort)>:
constexpr Type Value(Enum enum_type_value)
   117e4:	b530      	push	{r4, r5, lr}
   117e6:	b083      	sub	sp, #12
   117e8:	4675      	mov	r5, lr
   117ea:	4603      	mov	r3, r0
   117ec:	f88d 3007 	strb.w	r3, [sp, #7]
   117f0:	462b      	mov	r3, r5
   117f2:	4619      	mov	r1, r3
   117f4:	4806      	ldr	r0, [pc, #24]	; (11810 <unsigned char util::Value<TimerInterface::TimerPort, unsigned char>(TimerInterface::TimerPort)+0x2c>)
   117f6:	f001 fae1 	bl	12dbc <__cyg_profile_func_enter>
  return static_cast<Type>(enum_type_value);
   117fa:	f89d 4007 	ldrb.w	r4, [sp, #7]
   117fe:	462b      	mov	r3, r5
   11800:	4619      	mov	r1, r3
   11802:	4803      	ldr	r0, [pc, #12]	; (11810 <unsigned char util::Value<TimerInterface::TimerPort, unsigned char>(TimerInterface::TimerPort)+0x2c>)
   11804:	f001 faee 	bl	12de4 <__cyg_profile_func_exit>
   11808:	4623      	mov	r3, r4
}
   1180a:	4618      	mov	r0, r3
   1180c:	b003      	add	sp, #12
   1180e:	bd30      	pop	{r4, r5, pc}
   11810:	000117e5 	.word	0x000117e5

00011814 <Timer::DoNothingIsr()>:
    Lpc40xxSystemController::Peripherals::kTimer3
  };

  static constexpr IRQn kTimerIrq[] = { IRQn::TIMER0_IRQn, IRQn::TIMER1_IRQn,
                                        IRQn::TIMER2_IRQn, IRQn::TIMER3_IRQn };
  static void DoNothingIsr() {}
   11814:	b510      	push	{r4, lr}
   11816:	4674      	mov	r4, lr
   11818:	4623      	mov	r3, r4
   1181a:	4619      	mov	r1, r3
   1181c:	4804      	ldr	r0, [pc, #16]	; (11830 <Timer::DoNothingIsr()+0x1c>)
   1181e:	f001 facd 	bl	12dbc <__cyg_profile_func_enter>
   11822:	4623      	mov	r3, r4
   11824:	4619      	mov	r1, r3
   11826:	4802      	ldr	r0, [pc, #8]	; (11830 <Timer::DoNothingIsr()+0x1c>)
   11828:	f001 fadc 	bl	12de4 <__cyg_profile_func_exit>
   1182c:	bf00      	nop
   1182e:	bd10      	pop	{r4, pc}
   11830:	00011815 	.word	0x00011815

00011834 <Timer::Initialize(unsigned long, void (*)(), long)>:
  ///                  register will be 10 ms.
  /// @param isr an ISR that will fire when the condition set by SetTimer
  ///            method is achieved.
  /// @param priority sets the Timer interrupt's priority level, defaults to -1
  ///                 which uses the platforms default priority.
  void Initialize(uint32_t frequency, IsrPointer isr = DoNothingIsr,
   11834:	b510      	push	{r4, lr}
   11836:	b086      	sub	sp, #24
   11838:	4674      	mov	r4, lr
   1183a:	9003      	str	r0, [sp, #12]
   1183c:	9102      	str	r1, [sp, #8]
   1183e:	9201      	str	r2, [sp, #4]
   11840:	9300      	str	r3, [sp, #0]
   11842:	4623      	mov	r3, r4
   11844:	4619      	mov	r1, r3
   11846:	483e      	ldr	r0, [pc, #248]	; (11940 <Timer::Initialize(unsigned long, void (*)(), long)+0x10c>)
   11848:	f001 fab8 	bl	12dbc <__cyg_profile_func_enter>
                  int32_t priority = -1) override final
  {
    PowerUpPeripheral(kPowerbit[channel_]);
   1184c:	9b03      	ldr	r3, [sp, #12]
   1184e:	1d18      	adds	r0, r3, #4
   11850:	9b03      	ldr	r3, [sp, #12]
   11852:	685b      	ldr	r3, [r3, #4]
   11854:	3314      	adds	r3, #20
   11856:	681b      	ldr	r3, [r3, #0]
   11858:	9a03      	ldr	r2, [sp, #12]
   1185a:	7a12      	ldrb	r2, [r2, #8]
   1185c:	0092      	lsls	r2, r2, #2
   1185e:	4939      	ldr	r1, [pc, #228]	; (11944 <Timer::Initialize(unsigned long, void (*)(), long)+0x110>)
   11860:	440a      	add	r2, r1
   11862:	4611      	mov	r1, r2
   11864:	4798      	blx	r3
    SJ2_ASSERT_FATAL(
   11866:	9b02      	ldr	r3, [sp, #8]
   11868:	2b00      	cmp	r3, #0
   1186a:	d10d      	bne.n	11888 <Timer::Initialize(unsigned long, void (*)(), long)+0x54>
   1186c:	2384      	movs	r3, #132	; 0x84
   1186e:	4a36      	ldr	r2, [pc, #216]	; (11948 <Timer::Initialize(unsigned long, void (*)(), long)+0x114>)
   11870:	4936      	ldr	r1, [pc, #216]	; (1194c <Timer::Initialize(unsigned long, void (*)(), long)+0x118>)
   11872:	4837      	ldr	r0, [pc, #220]	; (11950 <Timer::Initialize(unsigned long, void (*)(), long)+0x11c>)
   11874:	f002 fcfe 	bl	14274 <printf>
   11878:	4836      	ldr	r0, [pc, #216]	; (11954 <Timer::Initialize(unsigned long, void (*)(), long)+0x120>)
   1187a:	f001 fa6f 	bl	12d5c <puts>
   1187e:	2100      	movs	r1, #0
   11880:	2001      	movs	r0, #1
   11882:	f7ff f875 	bl	10970 <debug::PrintBacktrace(bool, void*)>
   11886:	e7fe      	b.n	11886 <Timer::Initialize(unsigned long, void (*)(), long)+0x52>
        frequency != 0,
        "Cannot have zero ticks per microsecond, please choose 1 or more.");
    // Set Prescale register for Prescale Counter to milliseconds
    uint32_t prescaler = GetPeripheralFrequency() / frequency;
   11888:	9b03      	ldr	r3, [sp, #12]
   1188a:	1d1a      	adds	r2, r3, #4
   1188c:	9b03      	ldr	r3, [sp, #12]
   1188e:	685b      	ldr	r3, [r3, #4]
   11890:	3310      	adds	r3, #16
   11892:	681b      	ldr	r3, [r3, #0]
   11894:	4610      	mov	r0, r2
   11896:	4798      	blx	r3
   11898:	4602      	mov	r2, r0
   1189a:	9b02      	ldr	r3, [sp, #8]
   1189c:	fbb2 f3f3 	udiv	r3, r2, r3
   118a0:	9305      	str	r3, [sp, #20]
    tim_register[channel_]->PR &= ~(kClear << 1);
   118a2:	9b03      	ldr	r3, [sp, #12]
   118a4:	7a1b      	ldrb	r3, [r3, #8]
   118a6:	461a      	mov	r2, r3
   118a8:	4b2b      	ldr	r3, [pc, #172]	; (11958 <Timer::Initialize(unsigned long, void (*)(), long)+0x124>)
   118aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   118ae:	68da      	ldr	r2, [r3, #12]
   118b0:	9b03      	ldr	r3, [sp, #12]
   118b2:	7a1b      	ldrb	r3, [r3, #8]
   118b4:	4619      	mov	r1, r3
   118b6:	4b28      	ldr	r3, [pc, #160]	; (11958 <Timer::Initialize(unsigned long, void (*)(), long)+0x124>)
   118b8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   118bc:	f002 0201 	and.w	r2, r2, #1
   118c0:	60da      	str	r2, [r3, #12]
    tim_register[channel_]->PR |= (prescaler << 1);
   118c2:	9b03      	ldr	r3, [sp, #12]
   118c4:	7a1b      	ldrb	r3, [r3, #8]
   118c6:	461a      	mov	r2, r3
   118c8:	4b23      	ldr	r3, [pc, #140]	; (11958 <Timer::Initialize(unsigned long, void (*)(), long)+0x124>)
   118ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   118ce:	68d9      	ldr	r1, [r3, #12]
   118d0:	9b05      	ldr	r3, [sp, #20]
   118d2:	005a      	lsls	r2, r3, #1
   118d4:	9b03      	ldr	r3, [sp, #12]
   118d6:	7a1b      	ldrb	r3, [r3, #8]
   118d8:	4618      	mov	r0, r3
   118da:	4b1f      	ldr	r3, [pc, #124]	; (11958 <Timer::Initialize(unsigned long, void (*)(), long)+0x124>)
   118dc:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   118e0:	430a      	orrs	r2, r1
   118e2:	60da      	str	r2, [r3, #12]
    tim_register[channel_]->TCR |= (1 << 0);
   118e4:	9b03      	ldr	r3, [sp, #12]
   118e6:	7a1b      	ldrb	r3, [r3, #8]
   118e8:	461a      	mov	r2, r3
   118ea:	4b1b      	ldr	r3, [pc, #108]	; (11958 <Timer::Initialize(unsigned long, void (*)(), long)+0x124>)
   118ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   118f0:	685a      	ldr	r2, [r3, #4]
   118f2:	9b03      	ldr	r3, [sp, #12]
   118f4:	7a1b      	ldrb	r3, [r3, #8]
   118f6:	4619      	mov	r1, r3
   118f8:	4b17      	ldr	r3, [pc, #92]	; (11958 <Timer::Initialize(unsigned long, void (*)(), long)+0x124>)
   118fa:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   118fe:	f042 0201 	orr.w	r2, r2, #1
   11902:	605a      	str	r2, [r3, #4]
    user_timer_isr[channel_] = isr;
   11904:	9b03      	ldr	r3, [sp, #12]
   11906:	7a1b      	ldrb	r3, [r3, #8]
   11908:	4619      	mov	r1, r3
   1190a:	4a14      	ldr	r2, [pc, #80]	; (1195c <Timer::Initialize(unsigned long, void (*)(), long)+0x128>)
   1190c:	9b01      	ldr	r3, [sp, #4]
   1190e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
    RegisterIsr(kTimerIrq[channel_], kTimerIsr[channel_], true, priority);
   11912:	9b03      	ldr	r3, [sp, #12]
   11914:	7a1b      	ldrb	r3, [r3, #8]
   11916:	461a      	mov	r2, r3
   11918:	4b11      	ldr	r3, [pc, #68]	; (11960 <Timer::Initialize(unsigned long, void (*)(), long)+0x12c>)
   1191a:	5698      	ldrsb	r0, [r3, r2]
   1191c:	9b03      	ldr	r3, [sp, #12]
   1191e:	7a1b      	ldrb	r3, [r3, #8]
   11920:	461a      	mov	r2, r3
   11922:	4b10      	ldr	r3, [pc, #64]	; (11964 <Timer::Initialize(unsigned long, void (*)(), long)+0x130>)
   11924:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   11928:	9b00      	ldr	r3, [sp, #0]
   1192a:	2201      	movs	r2, #1
   1192c:	f001 f91e 	bl	12b6c <RegisterIsr(IRQn, void (*)(), bool, long)>
   11930:	4623      	mov	r3, r4
   11932:	4619      	mov	r1, r3
   11934:	4802      	ldr	r0, [pc, #8]	; (11940 <Timer::Initialize(unsigned long, void (*)(), long)+0x10c>)
   11936:	f001 fa55 	bl	12de4 <__cyg_profile_func_exit>
  }
   1193a:	bf00      	nop
   1193c:	b006      	add	sp, #24
   1193e:	bd10      	pop	{r4, pc}
   11940:	00011835 	.word	0x00011835
   11944:	000176fc 	.word	0x000176fc
   11948:	0001799c 	.word	0x0001799c
   1194c:	00017720 	.word	0x00017720
   11950:	00017564 	.word	0x00017564
   11954:	00017270 	.word	0x00017270
   11958:	10000050 	.word	0x10000050
   1195c:	100002c4 	.word	0x100002c4
   11960:	0001770c 	.word	0x0001770c
   11964:	00017710 	.word	0x00017710

00011968 <unsigned char util::Value<TimerInterface::MatchControlRegister, unsigned char>(TimerInterface::MatchControlRegister)>:
constexpr Type Value(Enum enum_type_value)
   11968:	b530      	push	{r4, r5, lr}
   1196a:	b083      	sub	sp, #12
   1196c:	4675      	mov	r5, lr
   1196e:	4603      	mov	r3, r0
   11970:	f88d 3007 	strb.w	r3, [sp, #7]
   11974:	462b      	mov	r3, r5
   11976:	4619      	mov	r1, r3
   11978:	4806      	ldr	r0, [pc, #24]	; (11994 <unsigned char util::Value<TimerInterface::MatchControlRegister, unsigned char>(TimerInterface::MatchControlRegister)+0x2c>)
   1197a:	f001 fa1f 	bl	12dbc <__cyg_profile_func_enter>
  return static_cast<Type>(enum_type_value);
   1197e:	f89d 4007 	ldrb.w	r4, [sp, #7]
   11982:	462b      	mov	r3, r5
   11984:	4619      	mov	r1, r3
   11986:	4803      	ldr	r0, [pc, #12]	; (11994 <unsigned char util::Value<TimerInterface::MatchControlRegister, unsigned char>(TimerInterface::MatchControlRegister)+0x2c>)
   11988:	f001 fa2c 	bl	12de4 <__cyg_profile_func_exit>
   1198c:	4623      	mov	r3, r4
}
   1198e:	4618      	mov	r0, r3
   11990:	b003      	add	sp, #12
   11992:	bd30      	pop	{r4, r5, pc}
   11994:	00011969 	.word	0x00011969

00011998 <Timer::SetTimer(unsigned long, TimerInterface::TimerIsrCondition, TimerInterface::MatchControlRegister)>:
  ///
  /// @param ticks the count of the timer register (TC) to have an ISR fire
  /// @param condition the condition for which a timer interrupt will occur
  /// @param match_register which match register (from 0 to 3) should be used
  ///                       for holding the ticks for the condition.
  void SetTimer(uint32_t ticks, TimerIsrCondition condition,
   11998:	b570      	push	{r4, r5, r6, lr}
   1199a:	b086      	sub	sp, #24
   1199c:	4676      	mov	r6, lr
   1199e:	9003      	str	r0, [sp, #12]
   119a0:	9102      	str	r1, [sp, #8]
   119a2:	4611      	mov	r1, r2
   119a4:	461a      	mov	r2, r3
   119a6:	460b      	mov	r3, r1
   119a8:	f88d 3007 	strb.w	r3, [sp, #7]
   119ac:	4613      	mov	r3, r2
   119ae:	f88d 3006 	strb.w	r3, [sp, #6]
   119b2:	4633      	mov	r3, r6
   119b4:	4619      	mov	r1, r3
   119b6:	4832      	ldr	r0, [pc, #200]	; (11a80 <Timer::SetTimer(unsigned long, TimerInterface::TimerIsrCondition, TimerInterface::MatchControlRegister)+0xe8>)
   119b8:	f001 fa00 	bl	12dbc <__cyg_profile_func_enter>
                MatchControlRegister match_register = kMat0) override final
  {
    static constexpr uint8_t kClearMode = 0b0111;

    uint8_t match_value = util::Value(match_register);
   119bc:	f89d 3006 	ldrb.w	r3, [sp, #6]
   119c0:	4618      	mov	r0, r3
   119c2:	f7ff ffd1 	bl	11968 <unsigned char util::Value<TimerInterface::MatchControlRegister, unsigned char>(TimerInterface::MatchControlRegister)>
   119c6:	4603      	mov	r3, r0
   119c8:	f88d 3017 	strb.w	r3, [sp, #23]
    tim_register[channel_]->MCR &= ~(kClearMode << match_value);
   119cc:	9b03      	ldr	r3, [sp, #12]
   119ce:	7a1b      	ldrb	r3, [r3, #8]
   119d0:	461a      	mov	r2, r3
   119d2:	4b2c      	ldr	r3, [pc, #176]	; (11a84 <Timer::SetTimer(unsigned long, TimerInterface::TimerIsrCondition, TimerInterface::MatchControlRegister)+0xec>)
   119d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   119d8:	695a      	ldr	r2, [r3, #20]
   119da:	f89d 3017 	ldrb.w	r3, [sp, #23]
   119de:	2107      	movs	r1, #7
   119e0:	fa01 f303 	lsl.w	r3, r1, r3
   119e4:	43db      	mvns	r3, r3
   119e6:	4619      	mov	r1, r3
   119e8:	9b03      	ldr	r3, [sp, #12]
   119ea:	7a1b      	ldrb	r3, [r3, #8]
   119ec:	4618      	mov	r0, r3
   119ee:	4b25      	ldr	r3, [pc, #148]	; (11a84 <Timer::SetTimer(unsigned long, TimerInterface::TimerIsrCondition, TimerInterface::MatchControlRegister)+0xec>)
   119f0:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   119f4:	400a      	ands	r2, r1
   119f6:	615a      	str	r2, [r3, #20]
    tim_register[channel_]->MCR |= condition << match_value;
   119f8:	9b03      	ldr	r3, [sp, #12]
   119fa:	7a1b      	ldrb	r3, [r3, #8]
   119fc:	461a      	mov	r2, r3
   119fe:	4b21      	ldr	r3, [pc, #132]	; (11a84 <Timer::SetTimer(unsigned long, TimerInterface::TimerIsrCondition, TimerInterface::MatchControlRegister)+0xec>)
   11a00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   11a04:	695a      	ldr	r2, [r3, #20]
   11a06:	f89d 1007 	ldrb.w	r1, [sp, #7]
   11a0a:	f89d 3017 	ldrb.w	r3, [sp, #23]
   11a0e:	fa01 f303 	lsl.w	r3, r1, r3
   11a12:	4619      	mov	r1, r3
   11a14:	9b03      	ldr	r3, [sp, #12]
   11a16:	7a1b      	ldrb	r3, [r3, #8]
   11a18:	4618      	mov	r0, r3
   11a1a:	4b1a      	ldr	r3, [pc, #104]	; (11a84 <Timer::SetTimer(unsigned long, TimerInterface::TimerIsrCondition, TimerInterface::MatchControlRegister)+0xec>)
   11a1c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   11a20:	430a      	orrs	r2, r1
   11a22:	615a      	str	r2, [r3, #20]
    *match[channel_][match_value / 3] |= (((ticks / 2)) << 0);
   11a24:	9b03      	ldr	r3, [sp, #12]
   11a26:	7a1b      	ldrb	r3, [r3, #8]
   11a28:	4618      	mov	r0, r3
   11a2a:	f89d 3017 	ldrb.w	r3, [sp, #23]
   11a2e:	4a16      	ldr	r2, [pc, #88]	; (11a88 <Timer::SetTimer(unsigned long, TimerInterface::TimerIsrCondition, TimerInterface::MatchControlRegister)+0xf0>)
   11a30:	fba2 2303 	umull	r2, r3, r2, r3
   11a34:	085b      	lsrs	r3, r3, #1
   11a36:	b2db      	uxtb	r3, r3
   11a38:	4619      	mov	r1, r3
   11a3a:	4a14      	ldr	r2, [pc, #80]	; (11a8c <Timer::SetTimer(unsigned long, TimerInterface::TimerIsrCondition, TimerInterface::MatchControlRegister)+0xf4>)
   11a3c:	0083      	lsls	r3, r0, #2
   11a3e:	440b      	add	r3, r1
   11a40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11a44:	6819      	ldr	r1, [r3, #0]
   11a46:	9b02      	ldr	r3, [sp, #8]
   11a48:	085a      	lsrs	r2, r3, #1
   11a4a:	9b03      	ldr	r3, [sp, #12]
   11a4c:	7a1b      	ldrb	r3, [r3, #8]
   11a4e:	461d      	mov	r5, r3
   11a50:	f89d 3017 	ldrb.w	r3, [sp, #23]
   11a54:	480c      	ldr	r0, [pc, #48]	; (11a88 <Timer::SetTimer(unsigned long, TimerInterface::TimerIsrCondition, TimerInterface::MatchControlRegister)+0xf0>)
   11a56:	fba0 0303 	umull	r0, r3, r0, r3
   11a5a:	085b      	lsrs	r3, r3, #1
   11a5c:	b2db      	uxtb	r3, r3
   11a5e:	461c      	mov	r4, r3
   11a60:	480a      	ldr	r0, [pc, #40]	; (11a8c <Timer::SetTimer(unsigned long, TimerInterface::TimerIsrCondition, TimerInterface::MatchControlRegister)+0xf4>)
   11a62:	00ab      	lsls	r3, r5, #2
   11a64:	4423      	add	r3, r4
   11a66:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
   11a6a:	430a      	orrs	r2, r1
   11a6c:	601a      	str	r2, [r3, #0]
   11a6e:	4633      	mov	r3, r6
   11a70:	4619      	mov	r1, r3
   11a72:	4803      	ldr	r0, [pc, #12]	; (11a80 <Timer::SetTimer(unsigned long, TimerInterface::TimerIsrCondition, TimerInterface::MatchControlRegister)+0xe8>)
   11a74:	f001 f9b6 	bl	12de4 <__cyg_profile_func_exit>
  }
   11a78:	bf00      	nop
   11a7a:	b006      	add	sp, #24
   11a7c:	bd70      	pop	{r4, r5, r6, pc}
   11a7e:	bf00      	nop
   11a80:	00011999 	.word	0x00011999
   11a84:	10000050 	.word	0x10000050
   11a88:	aaaaaaab 	.word	0xaaaaaaab
   11a8c:	10000284 	.word	0x10000284

00011a90 <Timer::GetTimer()>:

  [[gnu::always_inline]] uint32_t GetTimer() override final {
   11a90:	b530      	push	{r4, r5, lr}
   11a92:	b083      	sub	sp, #12
   11a94:	4675      	mov	r5, lr
   11a96:	9001      	str	r0, [sp, #4]
   11a98:	462b      	mov	r3, r5
   11a9a:	4619      	mov	r1, r3
   11a9c:	4809      	ldr	r0, [pc, #36]	; (11ac4 <Timer::GetTimer()+0x34>)
   11a9e:	f001 f98d 	bl	12dbc <__cyg_profile_func_enter>
    return tim_register[channel_]->TC;
   11aa2:	9b01      	ldr	r3, [sp, #4]
   11aa4:	7a1b      	ldrb	r3, [r3, #8]
   11aa6:	461a      	mov	r2, r3
   11aa8:	4b07      	ldr	r3, [pc, #28]	; (11ac8 <Timer::GetTimer()+0x38>)
   11aaa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   11aae:	689c      	ldr	r4, [r3, #8]
   11ab0:	462b      	mov	r3, r5
   11ab2:	4619      	mov	r1, r3
   11ab4:	4803      	ldr	r0, [pc, #12]	; (11ac4 <Timer::GetTimer()+0x34>)
   11ab6:	f001 f995 	bl	12de4 <__cyg_profile_func_exit>
   11aba:	4623      	mov	r3, r4
  }
   11abc:	4618      	mov	r0, r3
   11abe:	b003      	add	sp, #12
   11ac0:	bd30      	pop	{r4, r5, pc}
   11ac2:	bf00      	nop
   11ac4:	00011a91 	.word	0x00011a91
   11ac8:	10000050 	.word	0x10000050

00011acc <Uart::SetBaudRate(unsigned long)>:
  constexpr Uart(Channels mode, PinInterface * tx_pin, PinInterface * rx_pin)
      : channel_(static_cast<uint8_t>(mode)), tx_(tx_pin), rx_(rx_pin)
  {
  }

  void SetBaudRate(uint32_t baud_rate) override
   11acc:	b510      	push	{r4, lr}
   11ace:	b088      	sub	sp, #32
   11ad0:	4674      	mov	r4, lr
   11ad2:	9001      	str	r0, [sp, #4]
   11ad4:	9100      	str	r1, [sp, #0]
   11ad6:	4623      	mov	r3, r4
   11ad8:	4619      	mov	r1, r3
   11ada:	482d      	ldr	r0, [pc, #180]	; (11b90 <Uart::SetBaudRate(unsigned long)+0xc4>)
   11adc:	f001 f96e 	bl	12dbc <__cyg_profile_func_enter>
  {
    constexpr uint8_t kDlabBit = (1 << 7);
   11ae0:	2380      	movs	r3, #128	; 0x80
   11ae2:	f88d 301f 	strb.w	r3, [sp, #31]
    float baudrate             = static_cast<float>(baud_rate);
   11ae6:	9b00      	ldr	r3, [sp, #0]
   11ae8:	ee07 3a90 	vmov	s15, r3
   11aec:	eef8 7a67 	vcvt.f32.u32	s15, s15
   11af0:	edcd 7a06 	vstr	s15, [sp, #24]
    UartCalibration_t dividers = GenerateUartCalibration(baudrate);
   11af4:	ab02      	add	r3, sp, #8
   11af6:	ed9d 0a06 	vldr	s0, [sp, #24]
   11afa:	9901      	ldr	r1, [sp, #4]
   11afc:	4618      	mov	r0, r3
   11afe:	f000 fb2d 	bl	1215c <Uart::GenerateUartCalibration(float)>

    uint8_t dlm = static_cast<uint8_t>((dividers.divide_latch >> 8) & 0xFF);
   11b02:	9b02      	ldr	r3, [sp, #8]
   11b04:	0a1b      	lsrs	r3, r3, #8
   11b06:	f88d 3017 	strb.w	r3, [sp, #23]
    uint8_t dll = static_cast<uint8_t>(dividers.divide_latch & 0xFF);
   11b0a:	9b02      	ldr	r3, [sp, #8]
   11b0c:	f88d 3016 	strb.w	r3, [sp, #22]
    uint8_t fdr = static_cast<uint8_t>((dividers.multiply & 0xF) << 4 |
   11b10:	9b04      	ldr	r3, [sp, #16]
   11b12:	b2db      	uxtb	r3, r3
   11b14:	011b      	lsls	r3, r3, #4
   11b16:	b2da      	uxtb	r2, r3
                                       (dividers.divide_add & 0xF));
   11b18:	9b03      	ldr	r3, [sp, #12]
   11b1a:	b2db      	uxtb	r3, r3
   11b1c:	f003 030f 	and.w	r3, r3, #15
   11b20:	b2db      	uxtb	r3, r3
    uint8_t fdr = static_cast<uint8_t>((dividers.multiply & 0xF) << 4 |
   11b22:	4313      	orrs	r3, r2
   11b24:	f88d 3015 	strb.w	r3, [sp, #21]

    // Set baud rate
    uart[channel_]->LCR = kDlabBit;
   11b28:	9b01      	ldr	r3, [sp, #4]
   11b2a:	7a1b      	ldrb	r3, [r3, #8]
   11b2c:	461a      	mov	r2, r3
   11b2e:	4b19      	ldr	r3, [pc, #100]	; (11b94 <Uart::SetBaudRate(unsigned long)+0xc8>)
   11b30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   11b34:	2280      	movs	r2, #128	; 0x80
   11b36:	731a      	strb	r2, [r3, #12]
    uart[channel_]->DLM = dlm;
   11b38:	9b01      	ldr	r3, [sp, #4]
   11b3a:	7a1b      	ldrb	r3, [r3, #8]
   11b3c:	461a      	mov	r2, r3
   11b3e:	4b15      	ldr	r3, [pc, #84]	; (11b94 <Uart::SetBaudRate(unsigned long)+0xc8>)
   11b40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   11b44:	f89d 2017 	ldrb.w	r2, [sp, #23]
   11b48:	711a      	strb	r2, [r3, #4]
    uart[channel_]->DLL = dll;
   11b4a:	9b01      	ldr	r3, [sp, #4]
   11b4c:	7a1b      	ldrb	r3, [r3, #8]
   11b4e:	461a      	mov	r2, r3
   11b50:	4b10      	ldr	r3, [pc, #64]	; (11b94 <Uart::SetBaudRate(unsigned long)+0xc8>)
   11b52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   11b56:	f89d 2016 	ldrb.w	r2, [sp, #22]
   11b5a:	701a      	strb	r2, [r3, #0]
    uart[channel_]->FDR = fdr;
   11b5c:	9b01      	ldr	r3, [sp, #4]
   11b5e:	7a1b      	ldrb	r3, [r3, #8]
   11b60:	461a      	mov	r2, r3
   11b62:	4b0c      	ldr	r3, [pc, #48]	; (11b94 <Uart::SetBaudRate(unsigned long)+0xc8>)
   11b64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   11b68:	f89d 2015 	ldrb.w	r2, [sp, #21]
   11b6c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    uart[channel_]->LCR = kStandardUart;
   11b70:	9b01      	ldr	r3, [sp, #4]
   11b72:	7a1b      	ldrb	r3, [r3, #8]
   11b74:	461a      	mov	r2, r3
   11b76:	4b07      	ldr	r3, [pc, #28]	; (11b94 <Uart::SetBaudRate(unsigned long)+0xc8>)
   11b78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   11b7c:	2203      	movs	r2, #3
   11b7e:	731a      	strb	r2, [r3, #12]
   11b80:	4623      	mov	r3, r4
   11b82:	4619      	mov	r1, r3
   11b84:	4802      	ldr	r0, [pc, #8]	; (11b90 <Uart::SetBaudRate(unsigned long)+0xc4>)
   11b86:	f001 f92d 	bl	12de4 <__cyg_profile_func_exit>
  }
   11b8a:	bf00      	nop
   11b8c:	b008      	add	sp, #32
   11b8e:	bd10      	pop	{r4, pc}
   11b90:	00011acd 	.word	0x00011acd
   11b94:	10000060 	.word	0x10000060

00011b98 <Uart::Initialize(unsigned long)>:

  bool Initialize(uint32_t baud_rate) override
   11b98:	b530      	push	{r4, r5, lr}
   11b9a:	b085      	sub	sp, #20
   11b9c:	4675      	mov	r5, lr
   11b9e:	9001      	str	r0, [sp, #4]
   11ba0:	9100      	str	r1, [sp, #0]
   11ba2:	462b      	mov	r3, r5
   11ba4:	4619      	mov	r1, r3
   11ba6:	4830      	ldr	r0, [pc, #192]	; (11c68 <Uart::Initialize(unsigned long)+0xd0>)
   11ba8:	f001 f908 	bl	12dbc <__cyg_profile_func_enter>
  {
    constexpr uint8_t kFIFOEnableAndReset = 0b111;
   11bac:	2307      	movs	r3, #7
   11bae:	f88d 300f 	strb.w	r3, [sp, #15]
    // Powering the port
    PowerUpPeripheral(kPowerbit[channel_]);
   11bb2:	9b01      	ldr	r3, [sp, #4]
   11bb4:	1d18      	adds	r0, r3, #4
   11bb6:	9b01      	ldr	r3, [sp, #4]
   11bb8:	685b      	ldr	r3, [r3, #4]
   11bba:	3314      	adds	r3, #20
   11bbc:	681b      	ldr	r3, [r3, #0]
   11bbe:	9a01      	ldr	r2, [sp, #4]
   11bc0:	7a12      	ldrb	r2, [r2, #8]
   11bc2:	0092      	lsls	r2, r2, #2
   11bc4:	4929      	ldr	r1, [pc, #164]	; (11c6c <Uart::Initialize(unsigned long)+0xd4>)
   11bc6:	440a      	add	r2, r1
   11bc8:	4611      	mov	r1, r2
   11bca:	4798      	blx	r3
    // Setting the pin functions and modes
    rx_->SetPinFunction(kRxUartPortFunction[channel_]);
   11bcc:	9b01      	ldr	r3, [sp, #4]
   11bce:	6918      	ldr	r0, [r3, #16]
   11bd0:	9b01      	ldr	r3, [sp, #4]
   11bd2:	691b      	ldr	r3, [r3, #16]
   11bd4:	681b      	ldr	r3, [r3, #0]
   11bd6:	681b      	ldr	r3, [r3, #0]
   11bd8:	9a01      	ldr	r2, [sp, #4]
   11bda:	7a12      	ldrb	r2, [r2, #8]
   11bdc:	4611      	mov	r1, r2
   11bde:	4a24      	ldr	r2, [pc, #144]	; (11c70 <Uart::Initialize(unsigned long)+0xd8>)
   11be0:	5c52      	ldrb	r2, [r2, r1]
   11be2:	4611      	mov	r1, r2
   11be4:	4798      	blx	r3
    tx_->SetPinFunction(kTxUartPortFunction[channel_]);
   11be6:	9b01      	ldr	r3, [sp, #4]
   11be8:	68d8      	ldr	r0, [r3, #12]
   11bea:	9b01      	ldr	r3, [sp, #4]
   11bec:	68db      	ldr	r3, [r3, #12]
   11bee:	681b      	ldr	r3, [r3, #0]
   11bf0:	681b      	ldr	r3, [r3, #0]
   11bf2:	9a01      	ldr	r2, [sp, #4]
   11bf4:	7a12      	ldrb	r2, [r2, #8]
   11bf6:	4611      	mov	r1, r2
   11bf8:	4a1e      	ldr	r2, [pc, #120]	; (11c74 <Uart::Initialize(unsigned long)+0xdc>)
   11bfa:	5c52      	ldrb	r2, [r2, r1]
   11bfc:	4611      	mov	r1, r2
   11bfe:	4798      	blx	r3
    rx_->SetMode(PinInterface::Mode::kPullUp);
   11c00:	9b01      	ldr	r3, [sp, #4]
   11c02:	691a      	ldr	r2, [r3, #16]
   11c04:	9b01      	ldr	r3, [sp, #4]
   11c06:	691b      	ldr	r3, [r3, #16]
   11c08:	681b      	ldr	r3, [r3, #0]
   11c0a:	3304      	adds	r3, #4
   11c0c:	681b      	ldr	r3, [r3, #0]
   11c0e:	2102      	movs	r1, #2
   11c10:	4610      	mov	r0, r2
   11c12:	4798      	blx	r3
    tx_->SetMode(PinInterface::Mode::kPullUp);
   11c14:	9b01      	ldr	r3, [sp, #4]
   11c16:	68da      	ldr	r2, [r3, #12]
   11c18:	9b01      	ldr	r3, [sp, #4]
   11c1a:	68db      	ldr	r3, [r3, #12]
   11c1c:	681b      	ldr	r3, [r3, #0]
   11c1e:	3304      	adds	r3, #4
   11c20:	681b      	ldr	r3, [r3, #0]
   11c22:	2102      	movs	r1, #2
   11c24:	4610      	mov	r0, r2
   11c26:	4798      	blx	r3
    // Baud rate setting
    SetBaudRate(baud_rate);
   11c28:	9900      	ldr	r1, [sp, #0]
   11c2a:	9801      	ldr	r0, [sp, #4]
   11c2c:	f7ff ff4e 	bl	11acc <Uart::SetBaudRate(unsigned long)>
    uart[channel_]->FCR |= kFIFOEnableAndReset;
   11c30:	9b01      	ldr	r3, [sp, #4]
   11c32:	7a1b      	ldrb	r3, [r3, #8]
   11c34:	461a      	mov	r2, r3
   11c36:	4b10      	ldr	r3, [pc, #64]	; (11c78 <Uart::Initialize(unsigned long)+0xe0>)
   11c38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   11c3c:	7a1b      	ldrb	r3, [r3, #8]
   11c3e:	b2da      	uxtb	r2, r3
   11c40:	9b01      	ldr	r3, [sp, #4]
   11c42:	7a1b      	ldrb	r3, [r3, #8]
   11c44:	4619      	mov	r1, r3
   11c46:	4b0c      	ldr	r3, [pc, #48]	; (11c78 <Uart::Initialize(unsigned long)+0xe0>)
   11c48:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   11c4c:	f042 0207 	orr.w	r2, r2, #7
   11c50:	b2d2      	uxtb	r2, r2
   11c52:	721a      	strb	r2, [r3, #8]
    return true;
   11c54:	2401      	movs	r4, #1
   11c56:	462b      	mov	r3, r5
   11c58:	4619      	mov	r1, r3
   11c5a:	4803      	ldr	r0, [pc, #12]	; (11c68 <Uart::Initialize(unsigned long)+0xd0>)
   11c5c:	f001 f8c2 	bl	12de4 <__cyg_profile_func_exit>
   11c60:	4623      	mov	r3, r4
  }
   11c62:	4618      	mov	r0, r3
   11c64:	b005      	add	sp, #20
   11c66:	bd30      	pop	{r4, r5, pc}
   11c68:	00011b99 	.word	0x00011b99
   11c6c:	00017734 	.word	0x00017734
   11c70:	00017730 	.word	0x00017730
   11c74:	0001772c 	.word	0x0001772c
   11c78:	10000060 	.word	0x10000060

00011c7c <Uart::Send(unsigned char)::{lambda()#1}::operator()() const>:

  void Send(uint8_t data) override
  {
    uart[channel_]->THR              = data;
    auto wait_for_transfer_to_finish = [this]() -> bool {
   11c7c:	b530      	push	{r4, r5, lr}
   11c7e:	b083      	sub	sp, #12
   11c80:	4675      	mov	r5, lr
   11c82:	9001      	str	r0, [sp, #4]
   11c84:	462b      	mov	r3, r5
   11c86:	4619      	mov	r1, r3
   11c88:	480d      	ldr	r0, [pc, #52]	; (11cc0 <Uart::Send(unsigned char)::{lambda()#1}::operator()() const+0x44>)
   11c8a:	f001 f897 	bl	12dbc <__cyg_profile_func_enter>
   11c8e:	9b01      	ldr	r3, [sp, #4]
   11c90:	681b      	ldr	r3, [r3, #0]
      return (uart[channel_]->LSR & (1 << 5));
   11c92:	7a1b      	ldrb	r3, [r3, #8]
   11c94:	461a      	mov	r2, r3
   11c96:	4b0b      	ldr	r3, [pc, #44]	; (11cc4 <Uart::Send(unsigned char)::{lambda()#1}::operator()() const+0x48>)
   11c98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   11c9c:	7d1b      	ldrb	r3, [r3, #20]
   11c9e:	b2db      	uxtb	r3, r3
   11ca0:	f003 0320 	and.w	r3, r3, #32
   11ca4:	2b00      	cmp	r3, #0
   11ca6:	bf14      	ite	ne
   11ca8:	2301      	movne	r3, #1
   11caa:	2300      	moveq	r3, #0
   11cac:	b2dc      	uxtb	r4, r3
   11cae:	462b      	mov	r3, r5
   11cb0:	4619      	mov	r1, r3
   11cb2:	4803      	ldr	r0, [pc, #12]	; (11cc0 <Uart::Send(unsigned char)::{lambda()#1}::operator()() const+0x44>)
   11cb4:	f001 f896 	bl	12de4 <__cyg_profile_func_exit>
   11cb8:	4623      	mov	r3, r4
    };
   11cba:	4618      	mov	r0, r3
   11cbc:	b003      	add	sp, #12
   11cbe:	bd30      	pop	{r4, r5, pc}
   11cc0:	00011c7d 	.word	0x00011c7d
   11cc4:	10000060 	.word	0x10000060

00011cc8 <Uart::Send(unsigned char)>:
  void Send(uint8_t data) override
   11cc8:	e92d 4830 	stmdb	sp!, {r4, r5, fp, lr}
   11ccc:	b08a      	sub	sp, #40	; 0x28
   11cce:	4675      	mov	r5, lr
   11cd0:	9001      	str	r0, [sp, #4]
   11cd2:	460b      	mov	r3, r1
   11cd4:	f88d 3003 	strb.w	r3, [sp, #3]
   11cd8:	462b      	mov	r3, r5
   11cda:	4619      	mov	r1, r3
   11cdc:	4831      	ldr	r0, [pc, #196]	; (11da4 <Uart::Send(unsigned char)+0xdc>)
   11cde:	f001 f86d 	bl	12dbc <__cyg_profile_func_enter>
    uart[channel_]->THR              = data;
   11ce2:	9b01      	ldr	r3, [sp, #4]
   11ce4:	7a1b      	ldrb	r3, [r3, #8]
   11ce6:	461a      	mov	r2, r3
   11ce8:	4b2f      	ldr	r3, [pc, #188]	; (11da8 <Uart::Send(unsigned char)+0xe0>)
   11cea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   11cee:	f89d 2003 	ldrb.w	r2, [sp, #3]
   11cf2:	701a      	strb	r2, [r3, #0]
    };
   11cf4:	9b01      	ldr	r3, [sp, #4]
   11cf6:	9304      	str	r3, [sp, #16]
   11cf8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   11cfc:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   11d00:	e9cd 3408 	strd	r3, r4, [sp, #32]
   11d04:	9b04      	ldr	r3, [sp, #16]
   11d06:	9303      	str	r3, [sp, #12]
   11d08:	462b      	mov	r3, r5
   11d0a:	4619      	mov	r1, r3
   11d0c:	4827      	ldr	r0, [pc, #156]	; (11dac <Uart::Send(unsigned char)+0xe4>)
   11d0e:	f001 f855 	bl	12dbc <__cyg_profile_func_enter>
  uint64_t timeout_time = 0;
   11d12:	f04f 0300 	mov.w	r3, #0
   11d16:	f04f 0400 	mov.w	r4, #0
   11d1a:	e9cd 3406 	strd	r3, r4, [sp, #24]
  if (timeout == kMaxWait)
   11d1e:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   11d22:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
   11d26:	bf08      	it	eq
   11d28:	f1b3 3fff 	cmpeq.w	r3, #4294967295	; 0xffffffff
   11d2c:	d106      	bne.n	11d3c <Uart::Send(unsigned char)+0x74>
    timeout_time = kMaxWait;
   11d2e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   11d32:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   11d36:	e9cd 3406 	strd	r3, r4, [sp, #24]
   11d3a:	e00b      	b.n	11d54 <Uart::Send(unsigned char)+0x8c>
    timeout_time = Milliseconds() + timeout;
   11d3c:	f7fe fb72 	bl	10424 <Milliseconds()>
   11d40:	460a      	mov	r2, r1
   11d42:	4601      	mov	r1, r0
   11d44:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   11d48:	eb13 0b01 	adds.w	fp, r3, r1
   11d4c:	eb44 0c02 	adc.w	ip, r4, r2
   11d50:	e9cd bc06 	strd	fp, ip, [sp, #24]
  Status status = Status::kTimedOut;
   11d54:	2301      	movs	r3, #1
   11d56:	9305      	str	r3, [sp, #20]
  while (Milliseconds() < timeout_time)
   11d58:	f7fe fb64 	bl	10424 <Milliseconds()>
   11d5c:	460a      	mov	r2, r1
   11d5e:	4601      	mov	r1, r0
   11d60:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
   11d64:	42a2      	cmp	r2, r4
   11d66:	bf08      	it	eq
   11d68:	4299      	cmpeq	r1, r3
   11d6a:	bf34      	ite	cc
   11d6c:	2301      	movcc	r3, #1
   11d6e:	2300      	movcs	r3, #0
   11d70:	b2db      	uxtb	r3, r3
   11d72:	2b00      	cmp	r3, #0
   11d74:	d008      	beq.n	11d88 <Uart::Send(unsigned char)+0xc0>
    if (is_done())
   11d76:	ab03      	add	r3, sp, #12
   11d78:	4618      	mov	r0, r3
   11d7a:	f7ff ff7f 	bl	11c7c <Uart::Send(unsigned char)::{lambda()#1}::operator()() const>
   11d7e:	4603      	mov	r3, r0
   11d80:	2b00      	cmp	r3, #0
   11d82:	d0e9      	beq.n	11d58 <Uart::Send(unsigned char)+0x90>
      status = Status::kSuccess;
   11d84:	2300      	movs	r3, #0
   11d86:	9305      	str	r3, [sp, #20]
   11d88:	462b      	mov	r3, r5
   11d8a:	4619      	mov	r1, r3
   11d8c:	4807      	ldr	r0, [pc, #28]	; (11dac <Uart::Send(unsigned char)+0xe4>)
   11d8e:	f001 f829 	bl	12de4 <__cyg_profile_func_exit>
   11d92:	462b      	mov	r3, r5
   11d94:	4619      	mov	r1, r3
   11d96:	4803      	ldr	r0, [pc, #12]	; (11da4 <Uart::Send(unsigned char)+0xdc>)
   11d98:	f001 f824 	bl	12de4 <__cyg_profile_func_exit>
    Wait(kMaxWait, wait_for_transfer_to_finish);
  }
   11d9c:	bf00      	nop
   11d9e:	b00a      	add	sp, #40	; 0x28
   11da0:	e8bd 8830 	ldmia.w	sp!, {r4, r5, fp, pc}
   11da4:	00011cc9 	.word	0x00011cc9
   11da8:	10000060 	.word	0x10000060
   11dac:	000125c5 	.word	0x000125c5

00011db0 <Uart::Receive(unsigned long)::{lambda()#1}::operator()() const>:

  uint8_t Receive([[maybe_unused]] uint32_t timeout = 0x7FFFFFFF) override
  {
    uint8_t receiver   = '\xFF';
    auto byte_recieved = [this]() -> bool {
   11db0:	b530      	push	{r4, r5, lr}
   11db2:	b083      	sub	sp, #12
   11db4:	4675      	mov	r5, lr
   11db6:	9001      	str	r0, [sp, #4]
   11db8:	462b      	mov	r3, r5
   11dba:	4619      	mov	r1, r3
   11dbc:	480d      	ldr	r0, [pc, #52]	; (11df4 <Uart::Receive(unsigned long)::{lambda()#1}::operator()() const+0x44>)
   11dbe:	f000 fffd 	bl	12dbc <__cyg_profile_func_enter>
   11dc2:	9b01      	ldr	r3, [sp, #4]
   11dc4:	681b      	ldr	r3, [r3, #0]
      return (uart[channel_]->LSR & (1 << 0));
   11dc6:	7a1b      	ldrb	r3, [r3, #8]
   11dc8:	461a      	mov	r2, r3
   11dca:	4b0b      	ldr	r3, [pc, #44]	; (11df8 <Uart::Receive(unsigned long)::{lambda()#1}::operator()() const+0x48>)
   11dcc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   11dd0:	7d1b      	ldrb	r3, [r3, #20]
   11dd2:	b2db      	uxtb	r3, r3
   11dd4:	f003 0301 	and.w	r3, r3, #1
   11dd8:	2b00      	cmp	r3, #0
   11dda:	bf14      	ite	ne
   11ddc:	2301      	movne	r3, #1
   11dde:	2300      	moveq	r3, #0
   11de0:	b2dc      	uxtb	r4, r3
   11de2:	462b      	mov	r3, r5
   11de4:	4619      	mov	r1, r3
   11de6:	4803      	ldr	r0, [pc, #12]	; (11df4 <Uart::Receive(unsigned long)::{lambda()#1}::operator()() const+0x44>)
   11de8:	f000 fffc 	bl	12de4 <__cyg_profile_func_exit>
   11dec:	4623      	mov	r3, r4
    };
   11dee:	4618      	mov	r0, r3
   11df0:	b003      	add	sp, #12
   11df2:	bd30      	pop	{r4, r5, pc}
   11df4:	00011db1 	.word	0x00011db1
   11df8:	10000060 	.word	0x10000060

00011dfc <Uart::Receive(unsigned long)>:
  uint8_t Receive([[maybe_unused]] uint32_t timeout = 0x7FFFFFFF) override
   11dfc:	e92d 4830 	stmdb	sp!, {r4, r5, fp, lr}
   11e00:	b08c      	sub	sp, #48	; 0x30
   11e02:	4675      	mov	r5, lr
   11e04:	9001      	str	r0, [sp, #4]
   11e06:	9100      	str	r1, [sp, #0]
   11e08:	462b      	mov	r3, r5
   11e0a:	4619      	mov	r1, r3
   11e0c:	4836      	ldr	r0, [pc, #216]	; (11ee8 <Uart::Receive(unsigned long)+0xec>)
   11e0e:	f000 ffd5 	bl	12dbc <__cyg_profile_func_enter>
    uint8_t receiver   = '\xFF';
   11e12:	23ff      	movs	r3, #255	; 0xff
   11e14:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
    };
   11e18:	9b01      	ldr	r3, [sp, #4]
   11e1a:	9304      	str	r3, [sp, #16]

    Status status = Wait(timeout, byte_recieved);
   11e1c:	9b00      	ldr	r3, [sp, #0]
   11e1e:	f04f 0400 	mov.w	r4, #0
   11e22:	e9cd 3408 	strd	r3, r4, [sp, #32]
   11e26:	9b04      	ldr	r3, [sp, #16]
   11e28:	9303      	str	r3, [sp, #12]
   11e2a:	462b      	mov	r3, r5
   11e2c:	4619      	mov	r1, r3
   11e2e:	482f      	ldr	r0, [pc, #188]	; (11eec <Uart::Receive(unsigned long)+0xf0>)
   11e30:	f000 ffc4 	bl	12dbc <__cyg_profile_func_enter>
  uint64_t timeout_time = 0;
   11e34:	f04f 0300 	mov.w	r3, #0
   11e38:	f04f 0400 	mov.w	r4, #0
   11e3c:	e9cd 3406 	strd	r3, r4, [sp, #24]
  if (timeout == kMaxWait)
   11e40:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   11e44:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
   11e48:	bf08      	it	eq
   11e4a:	f1b3 3fff 	cmpeq.w	r3, #4294967295	; 0xffffffff
   11e4e:	d106      	bne.n	11e5e <Uart::Receive(unsigned long)+0x62>
    timeout_time = kMaxWait;
   11e50:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   11e54:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   11e58:	e9cd 3406 	strd	r3, r4, [sp, #24]
   11e5c:	e00b      	b.n	11e76 <Uart::Receive(unsigned long)+0x7a>
    timeout_time = Milliseconds() + timeout;
   11e5e:	f7fe fae1 	bl	10424 <Milliseconds()>
   11e62:	460a      	mov	r2, r1
   11e64:	4601      	mov	r1, r0
   11e66:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   11e6a:	eb13 0b01 	adds.w	fp, r3, r1
   11e6e:	eb44 0c02 	adc.w	ip, r4, r2
   11e72:	e9cd bc06 	strd	fp, ip, [sp, #24]
  Status status = Status::kTimedOut;
   11e76:	2301      	movs	r3, #1
   11e78:	9305      	str	r3, [sp, #20]
  while (Milliseconds() < timeout_time)
   11e7a:	f7fe fad3 	bl	10424 <Milliseconds()>
   11e7e:	460a      	mov	r2, r1
   11e80:	4601      	mov	r1, r0
   11e82:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
   11e86:	42a2      	cmp	r2, r4
   11e88:	bf08      	it	eq
   11e8a:	4299      	cmpeq	r1, r3
   11e8c:	bf34      	ite	cc
   11e8e:	2301      	movcc	r3, #1
   11e90:	2300      	movcs	r3, #0
   11e92:	b2db      	uxtb	r3, r3
   11e94:	2b00      	cmp	r3, #0
   11e96:	d008      	beq.n	11eaa <Uart::Receive(unsigned long)+0xae>
    if (is_done())
   11e98:	ab03      	add	r3, sp, #12
   11e9a:	4618      	mov	r0, r3
   11e9c:	f7ff ff88 	bl	11db0 <Uart::Receive(unsigned long)::{lambda()#1}::operator()() const>
   11ea0:	4603      	mov	r3, r0
   11ea2:	2b00      	cmp	r3, #0
   11ea4:	d0e9      	beq.n	11e7a <Uart::Receive(unsigned long)+0x7e>
      status = Status::kSuccess;
   11ea6:	2300      	movs	r3, #0
   11ea8:	9305      	str	r3, [sp, #20]
  return status;
   11eaa:	9c05      	ldr	r4, [sp, #20]
   11eac:	462b      	mov	r3, r5
   11eae:	4619      	mov	r1, r3
   11eb0:	480e      	ldr	r0, [pc, #56]	; (11eec <Uart::Receive(unsigned long)+0xf0>)
   11eb2:	f000 ff97 	bl	12de4 <__cyg_profile_func_exit>
   11eb6:	940a      	str	r4, [sp, #40]	; 0x28

    if (status == Status::kSuccess)
   11eb8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   11eba:	2b00      	cmp	r3, #0
   11ebc:	d108      	bne.n	11ed0 <Uart::Receive(unsigned long)+0xd4>
    {
      receiver = static_cast<uint8_t>(uart[channel_]->RBR);
   11ebe:	9b01      	ldr	r3, [sp, #4]
   11ec0:	7a1b      	ldrb	r3, [r3, #8]
   11ec2:	461a      	mov	r2, r3
   11ec4:	4b0a      	ldr	r3, [pc, #40]	; (11ef0 <Uart::Receive(unsigned long)+0xf4>)
   11ec6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   11eca:	781b      	ldrb	r3, [r3, #0]
   11ecc:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
    }
    return receiver;
   11ed0:	f89d 402f 	ldrb.w	r4, [sp, #47]	; 0x2f
   11ed4:	462b      	mov	r3, r5
   11ed6:	4619      	mov	r1, r3
   11ed8:	4803      	ldr	r0, [pc, #12]	; (11ee8 <Uart::Receive(unsigned long)+0xec>)
   11eda:	f000 ff83 	bl	12de4 <__cyg_profile_func_exit>
   11ede:	4623      	mov	r3, r4
  }
   11ee0:	4618      	mov	r0, r3
   11ee2:	b00c      	add	sp, #48	; 0x30
   11ee4:	e8bd 8830 	ldmia.w	sp!, {r4, r5, fp, pc}
   11ee8:	00011dfd 	.word	0x00011dfd
   11eec:	0001266d 	.word	0x0001266d
   11ef0:	10000060 	.word	0x10000060

00011ef4 <Uart::FindClosestFractional(float)>:

 private:
  UartCalibration_t FindClosestFractional(float decimal)
   11ef4:	b510      	push	{r4, lr}
   11ef6:	b08a      	sub	sp, #40	; 0x28
   11ef8:	4674      	mov	r4, lr
   11efa:	9003      	str	r0, [sp, #12]
   11efc:	9102      	str	r1, [sp, #8]
   11efe:	ed8d 0a01 	vstr	s0, [sp, #4]
   11f02:	4623      	mov	r3, r4
   11f04:	4619      	mov	r1, r3
   11f06:	4838      	ldr	r0, [pc, #224]	; (11fe8 <Uart::FindClosestFractional(float)+0xf4>)
   11f08:	f000 ff58 	bl	12dbc <__cyg_profile_func_enter>
  {
    UartCalibration_t result;
   11f0c:	9b03      	ldr	r3, [sp, #12]
   11f0e:	2200      	movs	r2, #0
   11f10:	601a      	str	r2, [r3, #0]
   11f12:	9b03      	ldr	r3, [sp, #12]
   11f14:	2200      	movs	r2, #0
   11f16:	605a      	str	r2, [r3, #4]
   11f18:	9b03      	ldr	r3, [sp, #12]
   11f1a:	2201      	movs	r2, #1
   11f1c:	609a      	str	r2, [r3, #8]
    bool finished = false;
   11f1e:	2300      	movs	r3, #0
   11f20:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    for (int div = 0; div < 15 && !finished; div++)
   11f24:	2300      	movs	r3, #0
   11f26:	9308      	str	r3, [sp, #32]
   11f28:	9b08      	ldr	r3, [sp, #32]
   11f2a:	2b0e      	cmp	r3, #14
   11f2c:	dc52      	bgt.n	11fd4 <Uart::FindClosestFractional(float)+0xe0>
   11f2e:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   11f32:	2b00      	cmp	r3, #0
   11f34:	d14e      	bne.n	11fd4 <Uart::FindClosestFractional(float)+0xe0>
    {
      for (int mul = div + 1; mul < 15 && !finished; mul++)
   11f36:	9b08      	ldr	r3, [sp, #32]
   11f38:	3301      	adds	r3, #1
   11f3a:	9307      	str	r3, [sp, #28]
   11f3c:	9b07      	ldr	r3, [sp, #28]
   11f3e:	2b0e      	cmp	r3, #14
   11f40:	dc44      	bgt.n	11fcc <Uart::FindClosestFractional(float)+0xd8>
   11f42:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   11f46:	2b00      	cmp	r3, #0
   11f48:	d140      	bne.n	11fcc <Uart::FindClosestFractional(float)+0xd8>
      {
        float divf         = static_cast<float>(div);
   11f4a:	9b08      	ldr	r3, [sp, #32]
   11f4c:	ee07 3a90 	vmov	s15, r3
   11f50:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   11f54:	edcd 7a06 	vstr	s15, [sp, #24]
        float mulf         = static_cast<float>(mul);
   11f58:	9b07      	ldr	r3, [sp, #28]
   11f5a:	ee07 3a90 	vmov	s15, r3
   11f5e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   11f62:	edcd 7a05 	vstr	s15, [sp, #20]
        float test_decimal = 1.0f + divf / mulf;
   11f66:	eddd 6a06 	vldr	s13, [sp, #24]
   11f6a:	ed9d 7a05 	vldr	s14, [sp, #20]
   11f6e:	eec6 7a87 	vdiv.f32	s15, s13, s14
   11f72:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
   11f76:	ee77 7a87 	vadd.f32	s15, s15, s14
   11f7a:	edcd 7a04 	vstr	s15, [sp, #16]
        if (decimal <= test_decimal + kThreshold &&
   11f7e:	eddd 7a04 	vldr	s15, [sp, #16]
   11f82:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 11fec <Uart::FindClosestFractional(float)+0xf8>
   11f86:	ee77 7a87 	vadd.f32	s15, s15, s14
   11f8a:	ed9d 7a01 	vldr	s14, [sp, #4]
   11f8e:	eeb4 7ae7 	vcmpe.f32	s14, s15
   11f92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   11f96:	d815      	bhi.n	11fc4 <Uart::FindClosestFractional(float)+0xd0>
            decimal >= test_decimal - kThreshold)
   11f98:	eddd 7a04 	vldr	s15, [sp, #16]
   11f9c:	ed9f 7a13 	vldr	s14, [pc, #76]	; 11fec <Uart::FindClosestFractional(float)+0xf8>
   11fa0:	ee77 7ac7 	vsub.f32	s15, s15, s14
        if (decimal <= test_decimal + kThreshold &&
   11fa4:	ed9d 7a01 	vldr	s14, [sp, #4]
   11fa8:	eeb4 7ae7 	vcmpe.f32	s14, s15
   11fac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   11fb0:	db08      	blt.n	11fc4 <Uart::FindClosestFractional(float)+0xd0>
        {
          result.divide_add = div;
   11fb2:	9a08      	ldr	r2, [sp, #32]
   11fb4:	9b03      	ldr	r3, [sp, #12]
   11fb6:	605a      	str	r2, [r3, #4]
          result.multiply   = mul;
   11fb8:	9a07      	ldr	r2, [sp, #28]
   11fba:	9b03      	ldr	r3, [sp, #12]
   11fbc:	609a      	str	r2, [r3, #8]
          finished          = true;
   11fbe:	2301      	movs	r3, #1
   11fc0:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
      for (int mul = div + 1; mul < 15 && !finished; mul++)
   11fc4:	9b07      	ldr	r3, [sp, #28]
   11fc6:	3301      	adds	r3, #1
   11fc8:	9307      	str	r3, [sp, #28]
   11fca:	e7b7      	b.n	11f3c <Uart::FindClosestFractional(float)+0x48>
    for (int div = 0; div < 15 && !finished; div++)
   11fcc:	9b08      	ldr	r3, [sp, #32]
   11fce:	3301      	adds	r3, #1
   11fd0:	9308      	str	r3, [sp, #32]
   11fd2:	e7a9      	b.n	11f28 <Uart::FindClosestFractional(float)+0x34>
        }
      }
    }
    return result;
   11fd4:	bf00      	nop
   11fd6:	4623      	mov	r3, r4
   11fd8:	4619      	mov	r1, r3
   11fda:	4803      	ldr	r0, [pc, #12]	; (11fe8 <Uart::FindClosestFractional(float)+0xf4>)
   11fdc:	f000 ff02 	bl	12de4 <__cyg_profile_func_exit>
   11fe0:	bf00      	nop
  }
   11fe2:	9803      	ldr	r0, [sp, #12]
   11fe4:	b00a      	add	sp, #40	; 0x28
   11fe6:	bd10      	pop	{r4, pc}
   11fe8:	00011ef5 	.word	0x00011ef5
   11fec:	3d4ccccd 	.word	0x3d4ccccd

00011ff0 <Uart::DividerEstimate(float, float)>:

  float DividerEstimate(float baud_rate, float fraction_estimate = 1)
   11ff0:	b510      	push	{r4, lr}
   11ff2:	ed2d 8b02 	vpush	{d8}
   11ff6:	b086      	sub	sp, #24
   11ff8:	4674      	mov	r4, lr
   11ffa:	9003      	str	r0, [sp, #12]
   11ffc:	ed8d 0a02 	vstr	s0, [sp, #8]
   12000:	edcd 0a01 	vstr	s1, [sp, #4]
   12004:	4623      	mov	r3, r4
   12006:	4619      	mov	r1, r3
   12008:	4815      	ldr	r0, [pc, #84]	; (12060 <Uart::DividerEstimate(float, float)+0x70>)
   1200a:	f000 fed7 	bl	12dbc <__cyg_profile_func_enter>
  {
    float clock_frequency = static_cast<float>(GetPeripheralFrequency());
   1200e:	9b03      	ldr	r3, [sp, #12]
   12010:	1d1a      	adds	r2, r3, #4
   12012:	9b03      	ldr	r3, [sp, #12]
   12014:	685b      	ldr	r3, [r3, #4]
   12016:	3310      	adds	r3, #16
   12018:	681b      	ldr	r3, [r3, #0]
   1201a:	4610      	mov	r0, r2
   1201c:	4798      	blx	r3
   1201e:	ee07 0a90 	vmov	s15, r0
   12022:	eef8 7a67 	vcvt.f32.u32	s15, s15
   12026:	edcd 7a05 	vstr	s15, [sp, #20]
    return clock_frequency / (16.0f * baud_rate * fraction_estimate);
   1202a:	eddd 7a02 	vldr	s15, [sp, #8]
   1202e:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
   12032:	ee27 7a87 	vmul.f32	s14, s15, s14
   12036:	eddd 7a01 	vldr	s15, [sp, #4]
   1203a:	ee67 7a27 	vmul.f32	s15, s14, s15
   1203e:	ed9d 7a05 	vldr	s14, [sp, #20]
   12042:	ee87 8a27 	vdiv.f32	s16, s14, s15
   12046:	4623      	mov	r3, r4
   12048:	4619      	mov	r1, r3
   1204a:	4805      	ldr	r0, [pc, #20]	; (12060 <Uart::DividerEstimate(float, float)+0x70>)
   1204c:	f000 feca 	bl	12de4 <__cyg_profile_func_exit>
   12050:	eef0 7a48 	vmov.f32	s15, s16
  }
   12054:	eeb0 0a67 	vmov.f32	s0, s15
   12058:	b006      	add	sp, #24
   1205a:	ecbd 8b02 	vpop	{d8}
   1205e:	bd10      	pop	{r4, pc}
   12060:	00011ff1 	.word	0x00011ff1

00012064 <Uart::FractionalEstimate(float, float)>:

  float FractionalEstimate(float baud_rate, float divider)
   12064:	b510      	push	{r4, lr}
   12066:	ed2d 8b02 	vpush	{d8}
   1206a:	b086      	sub	sp, #24
   1206c:	4674      	mov	r4, lr
   1206e:	9003      	str	r0, [sp, #12]
   12070:	ed8d 0a02 	vstr	s0, [sp, #8]
   12074:	edcd 0a01 	vstr	s1, [sp, #4]
   12078:	4623      	mov	r3, r4
   1207a:	4619      	mov	r1, r3
   1207c:	4815      	ldr	r0, [pc, #84]	; (120d4 <Uart::FractionalEstimate(float, float)+0x70>)
   1207e:	f000 fe9d 	bl	12dbc <__cyg_profile_func_enter>
  {
    float clock_frequency = static_cast<float>(GetPeripheralFrequency());
   12082:	9b03      	ldr	r3, [sp, #12]
   12084:	1d1a      	adds	r2, r3, #4
   12086:	9b03      	ldr	r3, [sp, #12]
   12088:	685b      	ldr	r3, [r3, #4]
   1208a:	3310      	adds	r3, #16
   1208c:	681b      	ldr	r3, [r3, #0]
   1208e:	4610      	mov	r0, r2
   12090:	4798      	blx	r3
   12092:	ee07 0a90 	vmov	s15, r0
   12096:	eef8 7a67 	vcvt.f32.u32	s15, s15
   1209a:	edcd 7a05 	vstr	s15, [sp, #20]
    return clock_frequency / (16.0f * baud_rate * divider);
   1209e:	eddd 7a02 	vldr	s15, [sp, #8]
   120a2:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
   120a6:	ee27 7a87 	vmul.f32	s14, s15, s14
   120aa:	eddd 7a01 	vldr	s15, [sp, #4]
   120ae:	ee67 7a27 	vmul.f32	s15, s14, s15
   120b2:	ed9d 7a05 	vldr	s14, [sp, #20]
   120b6:	ee87 8a27 	vdiv.f32	s16, s14, s15
   120ba:	4623      	mov	r3, r4
   120bc:	4619      	mov	r1, r3
   120be:	4805      	ldr	r0, [pc, #20]	; (120d4 <Uart::FractionalEstimate(float, float)+0x70>)
   120c0:	f000 fe90 	bl	12de4 <__cyg_profile_func_exit>
   120c4:	eef0 7a48 	vmov.f32	s15, s16
  }
   120c8:	eeb0 0a67 	vmov.f32	s0, s15
   120cc:	b006      	add	sp, #24
   120ce:	ecbd 8b02 	vpop	{d8}
   120d2:	bd10      	pop	{r4, pc}
   120d4:	00012065 	.word	0x00012065

000120d8 <Uart::IsDecmial(float)>:

  bool IsDecmial(float value)
   120d8:	b530      	push	{r4, r5, lr}
   120da:	b087      	sub	sp, #28
   120dc:	4675      	mov	r5, lr
   120de:	9001      	str	r0, [sp, #4]
   120e0:	ed8d 0a00 	vstr	s0, [sp]
   120e4:	462b      	mov	r3, r5
   120e6:	4619      	mov	r1, r3
   120e8:	4819      	ldr	r0, [pc, #100]	; (12150 <Uart::IsDecmial(float)+0x78>)
   120ea:	f000 fe67 	bl	12dbc <__cyg_profile_func_enter>
  {
    bool result         = false;
   120ee:	2300      	movs	r3, #0
   120f0:	f88d 3017 	strb.w	r3, [sp, #23]
    float rounded_value = roundf(value);
   120f4:	ed9d 0a00 	vldr	s0, [sp]
   120f8:	f004 fd0c 	bl	16b14 <roundf>
   120fc:	ed8d 0a04 	vstr	s0, [sp, #16]
    float error         = value - rounded_value;
   12100:	ed9d 7a00 	vldr	s14, [sp]
   12104:	eddd 7a04 	vldr	s15, [sp, #16]
   12108:	ee77 7a67 	vsub.f32	s15, s14, s15
   1210c:	edcd 7a03 	vstr	s15, [sp, #12]
    if (-kThreshold <= error && error <= kThreshold)
   12110:	eddd 7a03 	vldr	s15, [sp, #12]
   12114:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 12154 <Uart::IsDecmial(float)+0x7c>
   12118:	eef4 7ac7 	vcmpe.f32	s15, s14
   1211c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   12120:	db0b      	blt.n	1213a <Uart::IsDecmial(float)+0x62>
   12122:	eddd 7a03 	vldr	s15, [sp, #12]
   12126:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 12158 <Uart::IsDecmial(float)+0x80>
   1212a:	eef4 7ac7 	vcmpe.f32	s15, s14
   1212e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   12132:	d802      	bhi.n	1213a <Uart::IsDecmial(float)+0x62>
    {
      result = true;
   12134:	2301      	movs	r3, #1
   12136:	f88d 3017 	strb.w	r3, [sp, #23]
    }
    return result;
   1213a:	f89d 4017 	ldrb.w	r4, [sp, #23]
   1213e:	462b      	mov	r3, r5
   12140:	4619      	mov	r1, r3
   12142:	4803      	ldr	r0, [pc, #12]	; (12150 <Uart::IsDecmial(float)+0x78>)
   12144:	f000 fe4e 	bl	12de4 <__cyg_profile_func_exit>
   12148:	4623      	mov	r3, r4
  }
   1214a:	4618      	mov	r0, r3
   1214c:	b007      	add	sp, #28
   1214e:	bd30      	pop	{r4, r5, pc}
   12150:	000120d9 	.word	0x000120d9
   12154:	bd4ccccd 	.word	0xbd4ccccd
   12158:	3d4ccccd 	.word	0x3d4ccccd

0001215c <Uart::GenerateUartCalibration(float)>:

  UartCalibration_t GenerateUartCalibration(float baud_rate)
   1215c:	b530      	push	{r4, r5, lr}
   1215e:	b08f      	sub	sp, #60	; 0x3c
   12160:	4675      	mov	r5, lr
   12162:	9007      	str	r0, [sp, #28]
   12164:	9106      	str	r1, [sp, #24]
   12166:	ed8d 0a05 	vstr	s0, [sp, #20]
   1216a:	462b      	mov	r3, r5
   1216c:	4619      	mov	r1, r3
   1216e:	4874      	ldr	r0, [pc, #464]	; (12340 <Uart::GenerateUartCalibration(float)+0x1e4>)
   12170:	f000 fe24 	bl	12dbc <__cyg_profile_func_enter>
  {
    States state = States::kCalculateIntegerDivideLatch;
   12174:	2300      	movs	r3, #0
   12176:	930d      	str	r3, [sp, #52]	; 0x34
    UartCalibration_t uart_calibration;
   12178:	9b07      	ldr	r3, [sp, #28]
   1217a:	2200      	movs	r2, #0
   1217c:	601a      	str	r2, [r3, #0]
   1217e:	9b07      	ldr	r3, [sp, #28]
   12180:	2200      	movs	r2, #0
   12182:	605a      	str	r2, [r3, #4]
   12184:	9b07      	ldr	r3, [sp, #28]
   12186:	2201      	movs	r2, #1
   12188:	609a      	str	r2, [r3, #8]
    float divide_estimate = 0;
   1218a:	f04f 0300 	mov.w	r3, #0
   1218e:	930c      	str	r3, [sp, #48]	; 0x30
    float decimal         = 1.5;
   12190:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
   12194:	930b      	str	r3, [sp, #44]	; 0x2c
    float div             = 1;
   12196:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
   1219a:	930a      	str	r3, [sp, #40]	; 0x28
    float mul             = 2;
   1219c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   121a0:	9309      	str	r3, [sp, #36]	; 0x24
    while (state != States::kDone)
   121a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   121a4:	2b04      	cmp	r3, #4
   121a6:	f000 80c1 	beq.w	1232c <Uart::GenerateUartCalibration(float)+0x1d0>
    {
      switch (state)
   121aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   121ac:	2b04      	cmp	r3, #4
   121ae:	f200 80bb 	bhi.w	12328 <Uart::GenerateUartCalibration(float)+0x1cc>
   121b2:	a201      	add	r2, pc, #4	; (adr r2, 121b8 <Uart::GenerateUartCalibration(float)+0x5c>)
   121b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   121b8:	000121cd 	.word	0x000121cd
   121bc:	00012229 	.word	0x00012229
   121c0:	00012289 	.word	0x00012289
   121c4:	000122f9 	.word	0x000122f9
   121c8:	00012329 	.word	0x00012329
      {
        case States::kCalculateIntegerDivideLatch:
        {
          divide_estimate = DividerEstimate(baud_rate);
   121cc:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
   121d0:	ed9d 0a05 	vldr	s0, [sp, #20]
   121d4:	9806      	ldr	r0, [sp, #24]
   121d6:	f7ff ff0b 	bl	11ff0 <Uart::DividerEstimate(float, float)>
   121da:	ed8d 0a0c 	vstr	s0, [sp, #48]	; 0x30
          if (divide_estimate < 1.0f)
   121de:	eddd 7a0c 	vldr	s15, [sp, #48]	; 0x30
   121e2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
   121e6:	eef4 7ac7 	vcmpe.f32	s15, s14
   121ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   121ee:	d505      	bpl.n	121fc <Uart::GenerateUartCalibration(float)+0xa0>
          {
            uart_calibration.divide_latch = 0;
   121f0:	9b07      	ldr	r3, [sp, #28]
   121f2:	2200      	movs	r2, #0
   121f4:	601a      	str	r2, [r3, #0]
            state                         = States::kDone;
   121f6:	2304      	movs	r3, #4
   121f8:	930d      	str	r3, [sp, #52]	; 0x34
          }
          else
          {
            state = States::kCalculateDivideLatchWithDecimal;
          }
          break;
   121fa:	e096      	b.n	1232a <Uart::GenerateUartCalibration(float)+0x1ce>
          else if (IsDecmial(divide_estimate))
   121fc:	ed9d 0a0c 	vldr	s0, [sp, #48]	; 0x30
   12200:	9806      	ldr	r0, [sp, #24]
   12202:	f7ff ff69 	bl	120d8 <Uart::IsDecmial(float)>
   12206:	4603      	mov	r3, r0
   12208:	2b00      	cmp	r3, #0
   1220a:	d00a      	beq.n	12222 <Uart::GenerateUartCalibration(float)+0xc6>
                static_cast<uint32_t>(divide_estimate);
   1220c:	eddd 7a0c 	vldr	s15, [sp, #48]	; 0x30
   12210:	eefc 7ae7 	vcvt.u32.f32	s15, s15
   12214:	ee17 2a90 	vmov	r2, s15
            uart_calibration.divide_latch =
   12218:	9b07      	ldr	r3, [sp, #28]
   1221a:	601a      	str	r2, [r3, #0]
            state = States::kDone;
   1221c:	2304      	movs	r3, #4
   1221e:	930d      	str	r3, [sp, #52]	; 0x34
          break;
   12220:	e083      	b.n	1232a <Uart::GenerateUartCalibration(float)+0x1ce>
            state = States::kCalculateDivideLatchWithDecimal;
   12222:	2301      	movs	r3, #1
   12224:	930d      	str	r3, [sp, #52]	; 0x34
          break;
   12226:	e080      	b.n	1232a <Uart::GenerateUartCalibration(float)+0x1ce>
        }
        case States::kCalculateDivideLatchWithDecimal:
        {
          divide_estimate = roundf(DividerEstimate(baud_rate, decimal));
   12228:	eddd 0a0b 	vldr	s1, [sp, #44]	; 0x2c
   1222c:	ed9d 0a05 	vldr	s0, [sp, #20]
   12230:	9806      	ldr	r0, [sp, #24]
   12232:	f7ff fedd 	bl	11ff0 <Uart::DividerEstimate(float, float)>
   12236:	eef0 7a40 	vmov.f32	s15, s0
   1223a:	eeb0 0a67 	vmov.f32	s0, s15
   1223e:	f004 fc69 	bl	16b14 <roundf>
   12242:	ed8d 0a0c 	vstr	s0, [sp, #48]	; 0x30
          decimal         = FractionalEstimate(baud_rate, divide_estimate);
   12246:	eddd 0a0c 	vldr	s1, [sp, #48]	; 0x30
   1224a:	ed9d 0a05 	vldr	s0, [sp, #20]
   1224e:	9806      	ldr	r0, [sp, #24]
   12250:	f7ff ff08 	bl	12064 <Uart::FractionalEstimate(float, float)>
   12254:	ed8d 0a0b 	vstr	s0, [sp, #44]	; 0x2c
          if (1.1f <= decimal && decimal <= 1.9f)
   12258:	eddd 7a0b 	vldr	s15, [sp, #44]	; 0x2c
   1225c:	ed9f 7a39 	vldr	s14, [pc, #228]	; 12344 <Uart::GenerateUartCalibration(float)+0x1e8>
   12260:	eef4 7ac7 	vcmpe.f32	s15, s14
   12264:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   12268:	db0b      	blt.n	12282 <Uart::GenerateUartCalibration(float)+0x126>
   1226a:	eddd 7a0b 	vldr	s15, [sp, #44]	; 0x2c
   1226e:	ed9f 7a36 	vldr	s14, [pc, #216]	; 12348 <Uart::GenerateUartCalibration(float)+0x1ec>
   12272:	eef4 7ac7 	vcmpe.f32	s15, s14
   12276:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1227a:	d802      	bhi.n	12282 <Uart::GenerateUartCalibration(float)+0x126>
          {
            state = States::kGenerateFractionFromDecimal;
   1227c:	2303      	movs	r3, #3
   1227e:	930d      	str	r3, [sp, #52]	; 0x34
          }
          else
          {
            state = States::kDecimalFailedGenerateNewDecimal;
          }
          break;
   12280:	e053      	b.n	1232a <Uart::GenerateUartCalibration(float)+0x1ce>
            state = States::kDecimalFailedGenerateNewDecimal;
   12282:	2302      	movs	r3, #2
   12284:	930d      	str	r3, [sp, #52]	; 0x34
          break;
   12286:	e050      	b.n	1232a <Uart::GenerateUartCalibration(float)+0x1ce>
        }
        case States::kDecimalFailedGenerateNewDecimal:
        {
          mul += 1;
   12288:	eddd 7a09 	vldr	s15, [sp, #36]	; 0x24
   1228c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
   12290:	ee77 7a87 	vadd.f32	s15, s15, s14
   12294:	edcd 7a09 	vstr	s15, [sp, #36]	; 0x24

          if (div > 15)
   12298:	eddd 7a0a 	vldr	s15, [sp, #40]	; 0x28
   1229c:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
   122a0:	eef4 7ac7 	vcmpe.f32	s15, s14
   122a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   122a8:	dd02      	ble.n	122b0 <Uart::GenerateUartCalibration(float)+0x154>
          {
            state = States::kDone;
   122aa:	2304      	movs	r3, #4
   122ac:	930d      	str	r3, [sp, #52]	; 0x34
            break;
   122ae:	e03c      	b.n	1232a <Uart::GenerateUartCalibration(float)+0x1ce>
          }
          else if (mul > 15)
   122b0:	eddd 7a09 	vldr	s15, [sp, #36]	; 0x24
   122b4:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
   122b8:	eef4 7ac7 	vcmpe.f32	s15, s14
   122bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   122c0:	dd0f      	ble.n	122e2 <Uart::GenerateUartCalibration(float)+0x186>
          {
            div += 1;
   122c2:	eddd 7a0a 	vldr	s15, [sp, #40]	; 0x28
   122c6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
   122ca:	ee77 7a87 	vadd.f32	s15, s15, s14
   122ce:	edcd 7a0a 	vstr	s15, [sp, #40]	; 0x28
            mul = div + 1;
   122d2:	eddd 7a0a 	vldr	s15, [sp, #40]	; 0x28
   122d6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
   122da:	ee77 7a87 	vadd.f32	s15, s15, s14
   122de:	edcd 7a09 	vstr	s15, [sp, #36]	; 0x24
          }
          decimal = div / mul;
   122e2:	eddd 6a0a 	vldr	s13, [sp, #40]	; 0x28
   122e6:	ed9d 7a09 	vldr	s14, [sp, #36]	; 0x24
   122ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
   122ee:	edcd 7a0b 	vstr	s15, [sp, #44]	; 0x2c
          state   = States::kCalculateDivideLatchWithDecimal;
   122f2:	2301      	movs	r3, #1
   122f4:	930d      	str	r3, [sp, #52]	; 0x34
          break;
   122f6:	e018      	b.n	1232a <Uart::GenerateUartCalibration(float)+0x1ce>
        }
        case States::kGenerateFractionFromDecimal:
        {
          uart_calibration = FindClosestFractional(decimal);
   122f8:	9c07      	ldr	r4, [sp, #28]
   122fa:	466b      	mov	r3, sp
   122fc:	ed9d 0a0b 	vldr	s0, [sp, #44]	; 0x2c
   12300:	9906      	ldr	r1, [sp, #24]
   12302:	4618      	mov	r0, r3
   12304:	f7ff fdf6 	bl	11ef4 <Uart::FindClosestFractional(float)>
   12308:	466b      	mov	r3, sp
   1230a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   1230e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
          uart_calibration.divide_latch =
              static_cast<uint32_t>(divide_estimate);
   12312:	eddd 7a0c 	vldr	s15, [sp, #48]	; 0x30
   12316:	eefc 7ae7 	vcvt.u32.f32	s15, s15
   1231a:	ee17 2a90 	vmov	r2, s15
          uart_calibration.divide_latch =
   1231e:	9b07      	ldr	r3, [sp, #28]
   12320:	601a      	str	r2, [r3, #0]
          state = States::kDone;
   12322:	2304      	movs	r3, #4
   12324:	930d      	str	r3, [sp, #52]	; 0x34
          break;
   12326:	e000      	b.n	1232a <Uart::GenerateUartCalibration(float)+0x1ce>
        }
        case States::kDone: { break;
        }
        default: { break;
   12328:	bf00      	nop
    while (state != States::kDone)
   1232a:	e73a      	b.n	121a2 <Uart::GenerateUartCalibration(float)+0x46>
        }
      }
    }
    return uart_calibration;
   1232c:	bf00      	nop
   1232e:	462b      	mov	r3, r5
   12330:	4619      	mov	r1, r3
   12332:	4803      	ldr	r0, [pc, #12]	; (12340 <Uart::GenerateUartCalibration(float)+0x1e4>)
   12334:	f000 fd56 	bl	12de4 <__cyg_profile_func_exit>
   12338:	bf00      	nop
  }
   1233a:	9807      	ldr	r0, [sp, #28]
   1233c:	b00f      	add	sp, #60	; 0x3c
   1233e:	bd30      	pop	{r4, r5, pc}
   12340:	0001215d 	.word	0x0001215d
   12344:	3f8ccccd 	.word	0x3f8ccccd
   12348:	3ff33333 	.word	0x3ff33333

0001234c <(anonymous namespace)::Lpc40xxUptime()>:
{
   1234c:	b538      	push	{r3, r4, r5, lr}
   1234e:	4675      	mov	r5, lr
   12350:	462b      	mov	r3, r5
   12352:	4619      	mov	r1, r3
   12354:	480a      	ldr	r0, [pc, #40]	; (12380 <(anonymous namespace)::Lpc40xxUptime()+0x34>)
   12356:	f000 fd31 	bl	12dbc <__cyg_profile_func_enter>
    return tim_register[channel_]->TC;
   1235a:	4b0a      	ldr	r3, [pc, #40]	; (12384 <(anonymous namespace)::Lpc40xxUptime()+0x38>)
   1235c:	7a1b      	ldrb	r3, [r3, #8]
   1235e:	461a      	mov	r2, r3
   12360:	4b09      	ldr	r3, [pc, #36]	; (12388 <(anonymous namespace)::Lpc40xxUptime()+0x3c>)
   12362:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   12366:	689c      	ldr	r4, [r3, #8]
   12368:	462b      	mov	r3, r5
   1236a:	4619      	mov	r1, r3
   1236c:	4804      	ldr	r0, [pc, #16]	; (12380 <(anonymous namespace)::Lpc40xxUptime()+0x34>)
   1236e:	f000 fd39 	bl	12de4 <__cyg_profile_func_exit>
  return timer0.GetTimer();
   12372:	4623      	mov	r3, r4
   12374:	f04f 0400 	mov.w	r4, #0
}
   12378:	4618      	mov	r0, r3
   1237a:	4621      	mov	r1, r4
   1237c:	bd38      	pop	{r3, r4, r5, pc}
   1237e:	bf00      	nop
   12380:	00011a91 	.word	0x00011a91
   12384:	100000d0 	.word	0x100000d0
   12388:	10000050 	.word	0x10000050

0001238c <UptimeRTOS>:
{
   1238c:	b538      	push	{r3, r4, r5, lr}
   1238e:	4675      	mov	r5, lr
   12390:	462b      	mov	r3, r5
   12392:	4619      	mov	r1, r3
   12394:	480a      	ldr	r0, [pc, #40]	; (123c0 <UptimeRTOS+0x34>)
   12396:	f000 fd11 	bl	12dbc <__cyg_profile_func_enter>
   1239a:	4b0a      	ldr	r3, [pc, #40]	; (123c4 <UptimeRTOS+0x38>)
   1239c:	7a1b      	ldrb	r3, [r3, #8]
   1239e:	461a      	mov	r2, r3
   123a0:	4b09      	ldr	r3, [pc, #36]	; (123c8 <UptimeRTOS+0x3c>)
   123a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   123a6:	689c      	ldr	r4, [r3, #8]
   123a8:	462b      	mov	r3, r5
   123aa:	4619      	mov	r1, r3
   123ac:	4804      	ldr	r0, [pc, #16]	; (123c0 <UptimeRTOS+0x34>)
   123ae:	f000 fd19 	bl	12de4 <__cyg_profile_func_exit>
  return timer0.GetTimer();
   123b2:	4623      	mov	r3, r4
   123b4:	f04f 0400 	mov.w	r4, #0
}
   123b8:	4618      	mov	r0, r3
   123ba:	4621      	mov	r1, r4
   123bc:	bd38      	pop	{r3, r4, r5, pc}
   123be:	bf00      	nop
   123c0:	00011a91 	.word	0x00011a91
   123c4:	100000d0 	.word	0x100000d0
   123c8:	10000050 	.word	0x10000050

000123cc <LowLevelInit()>:

void LowLevelInit()
{
   123cc:	b500      	push	{lr}
   123ce:	b083      	sub	sp, #12
  // Set the SystemTick frequency to the RTOS tick frequency
  // It is critical that this happens before you set the system_clock, since
  // The system_timer keeps the time that the system_clock uses to delay itself.
  system_timer.SetTickFrequency(config::kRtosFrequency);
   123d0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   123d4:	4822      	ldr	r0, [pc, #136]	; (12460 <LowLevelInit()+0x94>)
   123d6:	f7fe fecb 	bl	11170 <SystemTimer::SetTickFrequency(unsigned long)>
  bool timer_started_successfully = system_timer.StartTimer();
   123da:	4821      	ldr	r0, [pc, #132]	; (12460 <LowLevelInit()+0x94>)
   123dc:	f7fe fe7a 	bl	110d4 <SystemTimer::StartTimer()>
   123e0:	4603      	mov	r3, r0
   123e2:	f88d 3007 	strb.w	r3, [sp, #7]
  SJ2_ASSERT_WARNING(timer_started_successfully,
   123e6:	f89d 3007 	ldrb.w	r3, [sp, #7]
   123ea:	f083 0301 	eor.w	r3, r3, #1
   123ee:	b2db      	uxtb	r3, r3
   123f0:	2b00      	cmp	r3, #0
   123f2:	d005      	beq.n	12400 <LowLevelInit()+0x34>
   123f4:	23ad      	movs	r3, #173	; 0xad
   123f6:	4a1b      	ldr	r2, [pc, #108]	; (12464 <LowLevelInit()+0x98>)
   123f8:	491b      	ldr	r1, [pc, #108]	; (12468 <LowLevelInit()+0x9c>)
   123fa:	481c      	ldr	r0, [pc, #112]	; (1246c <LowLevelInit()+0xa0>)
   123fc:	f001 ff3a 	bl	14274 <printf>
                     "System Timer has FAILED to start!");
  // Set Clock Speed
  // SetClockFrequency will timeout return the offset between desire clockspeed
  // and actual clockspeed if the PLL doesn't get a frequency fix within a
  // defined timeout (see L1/system_clock.hpp:kDefaultTimeout)
  while (system_controller.SetClockFrequency(config::kSystemClockRateMhz) != 0)
   12400:	2130      	movs	r1, #48	; 0x30
   12402:	481b      	ldr	r0, [pc, #108]	; (12470 <LowLevelInit()+0xa4>)
   12404:	f7fe fb4c 	bl	10aa0 <Lpc40xxSystemController::SetClockFrequency(unsigned char)>
   12408:	4603      	mov	r3, r0
   1240a:	2b00      	cmp	r3, #0
   1240c:	bf14      	ite	ne
   1240e:	2301      	movne	r3, #1
   12410:	2300      	moveq	r3, #0
   12412:	b2db      	uxtb	r3, r3
   12414:	2b00      	cmp	r3, #0
   12416:	d001      	beq.n	1241c <LowLevelInit()+0x50>
  {
    // Continually attempt to set the clock frequency to the desired until the
    // delta between desired and actual are 0.
    continue;
   12418:	bf00      	nop
  while (system_controller.SetClockFrequency(config::kSystemClockRateMhz) != 0)
   1241a:	e7f1      	b.n	12400 <LowLevelInit()+0x34>
  }
  // Enable Peripheral Clock and set its divider to 1 meaning the clock speed
  // fed to all peripherals will be 48Mhz.
  system_controller.SetPeripheralClockDivider(1);
   1241c:	2101      	movs	r1, #1
   1241e:	4814      	ldr	r0, [pc, #80]	; (12470 <LowLevelInit()+0xa4>)
   12420:	f7fe fb86 	bl	10b30 <Lpc40xxSystemController::SetPeripheralClockDivider(unsigned char)>
  // Set System Timer frequency again, since the clock speed has changed since
  // the last time we ran this.
  system_timer.DisableTimer();
   12424:	f7fe fe04 	bl	11030 <SystemTimer::DisableTimer()>
  system_timer.SetTickFrequency(config::kRtosFrequency);
   12428:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   1242c:	480c      	ldr	r0, [pc, #48]	; (12460 <LowLevelInit()+0x94>)
   1242e:	f7fe fe9f 	bl	11170 <SystemTimer::SetTickFrequency(unsigned long)>
  system_timer.StartTimer();
   12432:	480b      	ldr	r0, [pc, #44]	; (12460 <LowLevelInit()+0x94>)
   12434:	f7fe fe4e 	bl	110d4 <SystemTimer::StartTimer()>
  // Set timer0 to 1 MHz (1,000,000 Hz) so that the timer increments every 1
  // micro second.
  timer0.Initialize(1'000'000);
   12438:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1243c:	4a0d      	ldr	r2, [pc, #52]	; (12474 <LowLevelInit()+0xa8>)
   1243e:	490e      	ldr	r1, [pc, #56]	; (12478 <LowLevelInit()+0xac>)
   12440:	480e      	ldr	r0, [pc, #56]	; (1247c <LowLevelInit()+0xb0>)
   12442:	f7ff f9f7 	bl	11834 <Timer::Initialize(unsigned long, void (*)(), long)>
  SetUptimeFunction(Lpc40xxUptime);
   12446:	480e      	ldr	r0, [pc, #56]	; (12480 <LowLevelInit()+0xb4>)
   12448:	f7fe fb12 	bl	10a70 <SetUptimeFunction(unsigned long long (*)())>
  // Set UART0 baudrate, which is required for printf and scanf to work properly
  uart0.Initialize(config::kBaudRate);
   1244c:	f44f 4116 	mov.w	r1, #38400	; 0x9600
   12450:	480c      	ldr	r0, [pc, #48]	; (12484 <LowLevelInit()+0xb8>)
   12452:	f7ff fba1 	bl	11b98 <Uart::Initialize(unsigned long)>
}
   12456:	bf00      	nop
   12458:	b003      	add	sp, #12
   1245a:	f85d fb04 	ldr.w	pc, [sp], #4
   1245e:	bf00      	nop
   12460:	100000c4 	.word	0x100000c4
   12464:	000179dc 	.word	0x000179dc
   12468:	00017744 	.word	0x00017744
   1246c:	00017624 	.word	0x00017624
   12470:	100000cc 	.word	0x100000cc
   12474:	00011815 	.word	0x00011815
   12478:	000f4240 	.word	0x000f4240
   1247c:	100000d0 	.word	0x100000d0
   12480:	0001234d 	.word	0x0001234d
   12484:	100000b0 	.word	0x100000b0

00012488 <SystemInit>:

void SystemInit()
{
   12488:	b508      	push	{r3, lr}
  // Transfer data section values from flash to RAM
  InitDataSection();
   1248a:	f7fd fe3f 	bl	1010c <InitDataSection()>
  // Clear BSS section of RAM
  // This is required because the nano implementation of the standard C/C++
  // libraries assumes that the BSS section is initialized to 0.
  InitBssSection();
   1248e:	f7fd fe85 	bl	1019c <InitBssSection()>
  // Enable FPU (F.loating P.oint U.nit)
  // System will crash if floating point operations occur without
  // Initializing the FPU.
  InitFpu();
   12492:	f7fd feb3 	bl	101fc <InitFpu()>
  // Initialisation C++ libraries
  __libc_init_array();
   12496:	f004 fd45 	bl	16f24 <__libc_init_array>
  // Run LowLevel System Initialization
  LowLevelInit();
   1249a:	f7ff ff97 	bl	123cc <LowLevelInit()>
}
   1249e:	bf00      	nop
   124a0:	bd08      	pop	{r3, pc}
   124a2:	Address 0x00000000000124a2 is out of bounds.


000124a4 <ResetIsr>:
// Sets up a simple runtime environment and initializes the C/C++ library.

extern "C"
{
  void ResetIsr(void)
  {
   124a4:	b580      	push	{r7, lr}
   124a6:	b084      	sub	sp, #16
   124a8:	af00      	add	r7, sp, #0
    // The Hyperload bootloader takes up stack space to execute. The Hyperload
    // bootloader function launches this ISR manually, but it never returns thus
    // it never cleans up the memory it uses. To get that memory back, we have
    // to manually move the stack pointers back to the top of stack.
    const uint32_t kTopOfStack = reinterpret_cast<intptr_t>(&StackTop);
   124aa:	4b09      	ldr	r3, [pc, #36]	; (124d0 <ResetIsr+0x2c>)
   124ac:	60fb      	str	r3, [r7, #12]
   124ae:	68fb      	ldr	r3, [r7, #12]
   124b0:	603b      	str	r3, [r7, #0]
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
   124b2:	683b      	ldr	r3, [r7, #0]
   124b4:	f383 8809 	msr	PSP, r3
   124b8:	68fb      	ldr	r3, [r7, #12]
   124ba:	607b      	str	r3, [r7, #4]

    \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0\n" : : "r" (topOfMainStack) : "sp");
   124bc:	687b      	ldr	r3, [r7, #4]
   124be:	f383 8808 	msr	MSP, r3
    __set_PSP(kTopOfStack);
    __set_MSP(kTopOfStack);

    SystemInit();
   124c2:	f7ff ffe1 	bl	12488 <SystemInit>
// #pragma ignored "-Wpedantic" to suppress main function call warning
#pragma GCC diagnostic push ignored "-Wpedantic"
    [[maybe_unused]] int32_t result = main();
   124c6:	f7fe f983 	bl	107d0 <main>
   124ca:	60b8      	str	r0, [r7, #8]
   124cc:	e7fe      	b.n	124cc <ResetIsr+0x28>
   124ce:	bf00      	nop
   124d0:	10010000 	.word	0x10010000

000124d4 <void Timer::TimerHandler<(TimerInterface::TimerPort)0>()>:
  static void TimerHandler()
   124d4:	b510      	push	{r4, lr}
   124d6:	4674      	mov	r4, lr
   124d8:	4623      	mov	r3, r4
   124da:	4619      	mov	r1, r3
   124dc:	480a      	ldr	r0, [pc, #40]	; (12508 <void Timer::TimerHandler<(TimerInterface::TimerPort)0>()+0x34>)
   124de:	f000 fc6d 	bl	12dbc <__cyg_profile_func_enter>
      user_timer_isr[util::Value(port)]();
   124e2:	2000      	movs	r0, #0
   124e4:	f7ff f97e 	bl	117e4 <unsigned char util::Value<TimerInterface::TimerPort, unsigned char>(TimerInterface::TimerPort)>
   124e8:	4603      	mov	r3, r0
   124ea:	461a      	mov	r2, r3
   124ec:	4b07      	ldr	r3, [pc, #28]	; (1250c <void Timer::TimerHandler<(TimerInterface::TimerPort)0>()+0x38>)
   124ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   124f2:	4798      	blx	r3
    ClearInterrupts<port>();
   124f4:	f000 f90e 	bl	12714 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)0>()>
   124f8:	4623      	mov	r3, r4
   124fa:	4619      	mov	r1, r3
   124fc:	4802      	ldr	r0, [pc, #8]	; (12508 <void Timer::TimerHandler<(TimerInterface::TimerPort)0>()+0x34>)
   124fe:	f000 fc71 	bl	12de4 <__cyg_profile_func_exit>
  }
   12502:	bf00      	nop
   12504:	bd10      	pop	{r4, pc}
   12506:	bf00      	nop
   12508:	000124d5 	.word	0x000124d5
   1250c:	100002c4 	.word	0x100002c4

00012510 <void Timer::TimerHandler<(TimerInterface::TimerPort)1>()>:
  static void TimerHandler()
   12510:	b510      	push	{r4, lr}
   12512:	4674      	mov	r4, lr
   12514:	4623      	mov	r3, r4
   12516:	4619      	mov	r1, r3
   12518:	480a      	ldr	r0, [pc, #40]	; (12544 <void Timer::TimerHandler<(TimerInterface::TimerPort)1>()+0x34>)
   1251a:	f000 fc4f 	bl	12dbc <__cyg_profile_func_enter>
      user_timer_isr[util::Value(port)]();
   1251e:	2001      	movs	r0, #1
   12520:	f7ff f960 	bl	117e4 <unsigned char util::Value<TimerInterface::TimerPort, unsigned char>(TimerInterface::TimerPort)>
   12524:	4603      	mov	r3, r0
   12526:	461a      	mov	r2, r3
   12528:	4b07      	ldr	r3, [pc, #28]	; (12548 <void Timer::TimerHandler<(TimerInterface::TimerPort)1>()+0x38>)
   1252a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   1252e:	4798      	blx	r3
    ClearInterrupts<port>();
   12530:	f000 f940 	bl	127b4 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)1>()>
   12534:	4623      	mov	r3, r4
   12536:	4619      	mov	r1, r3
   12538:	4802      	ldr	r0, [pc, #8]	; (12544 <void Timer::TimerHandler<(TimerInterface::TimerPort)1>()+0x34>)
   1253a:	f000 fc53 	bl	12de4 <__cyg_profile_func_exit>
  }
   1253e:	bf00      	nop
   12540:	bd10      	pop	{r4, pc}
   12542:	bf00      	nop
   12544:	00012511 	.word	0x00012511
   12548:	100002c4 	.word	0x100002c4

0001254c <void Timer::TimerHandler<(TimerInterface::TimerPort)2>()>:
  static void TimerHandler()
   1254c:	b510      	push	{r4, lr}
   1254e:	4674      	mov	r4, lr
   12550:	4623      	mov	r3, r4
   12552:	4619      	mov	r1, r3
   12554:	480a      	ldr	r0, [pc, #40]	; (12580 <void Timer::TimerHandler<(TimerInterface::TimerPort)2>()+0x34>)
   12556:	f000 fc31 	bl	12dbc <__cyg_profile_func_enter>
      user_timer_isr[util::Value(port)]();
   1255a:	2002      	movs	r0, #2
   1255c:	f7ff f942 	bl	117e4 <unsigned char util::Value<TimerInterface::TimerPort, unsigned char>(TimerInterface::TimerPort)>
   12560:	4603      	mov	r3, r0
   12562:	461a      	mov	r2, r3
   12564:	4b07      	ldr	r3, [pc, #28]	; (12584 <void Timer::TimerHandler<(TimerInterface::TimerPort)2>()+0x38>)
   12566:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   1256a:	4798      	blx	r3
    ClearInterrupts<port>();
   1256c:	f000 f972 	bl	12854 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)2>()>
   12570:	4623      	mov	r3, r4
   12572:	4619      	mov	r1, r3
   12574:	4802      	ldr	r0, [pc, #8]	; (12580 <void Timer::TimerHandler<(TimerInterface::TimerPort)2>()+0x34>)
   12576:	f000 fc35 	bl	12de4 <__cyg_profile_func_exit>
  }
   1257a:	bf00      	nop
   1257c:	bd10      	pop	{r4, pc}
   1257e:	bf00      	nop
   12580:	0001254d 	.word	0x0001254d
   12584:	100002c4 	.word	0x100002c4

00012588 <void Timer::TimerHandler<(TimerInterface::TimerPort)3>()>:
  static void TimerHandler()
   12588:	b510      	push	{r4, lr}
   1258a:	4674      	mov	r4, lr
   1258c:	4623      	mov	r3, r4
   1258e:	4619      	mov	r1, r3
   12590:	480a      	ldr	r0, [pc, #40]	; (125bc <void Timer::TimerHandler<(TimerInterface::TimerPort)3>()+0x34>)
   12592:	f000 fc13 	bl	12dbc <__cyg_profile_func_enter>
      user_timer_isr[util::Value(port)]();
   12596:	2003      	movs	r0, #3
   12598:	f7ff f924 	bl	117e4 <unsigned char util::Value<TimerInterface::TimerPort, unsigned char>(TimerInterface::TimerPort)>
   1259c:	4603      	mov	r3, r0
   1259e:	461a      	mov	r2, r3
   125a0:	4b07      	ldr	r3, [pc, #28]	; (125c0 <void Timer::TimerHandler<(TimerInterface::TimerPort)3>()+0x38>)
   125a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   125a6:	4798      	blx	r3
    ClearInterrupts<port>();
   125a8:	f000 f9a4 	bl	128f4 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)3>()>
   125ac:	4623      	mov	r3, r4
   125ae:	4619      	mov	r1, r3
   125b0:	4802      	ldr	r0, [pc, #8]	; (125bc <void Timer::TimerHandler<(TimerInterface::TimerPort)3>()+0x34>)
   125b2:	f000 fc17 	bl	12de4 <__cyg_profile_func_exit>
  }
   125b6:	bf00      	nop
   125b8:	bd10      	pop	{r4, pc}
   125ba:	bf00      	nop
   125bc:	00012589 	.word	0x00012589
   125c0:	100002c4 	.word	0x100002c4

000125c4 <Status Wait<Uart::Send(unsigned char)::{lambda()#1}>(unsigned long long, Uart::Send(unsigned char)::{lambda()#1})>:
inline Status Wait(uint64_t timeout, F is_done)
   125c4:	e92d 4830 	stmdb	sp!, {r4, r5, fp, lr}
   125c8:	b088      	sub	sp, #32
   125ca:	4675      	mov	r5, lr
   125cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
   125d0:	9201      	str	r2, [sp, #4]
   125d2:	462b      	mov	r3, r5
   125d4:	4619      	mov	r1, r3
   125d6:	4824      	ldr	r0, [pc, #144]	; (12668 <Status Wait<Uart::Send(unsigned char)::{lambda()#1}>(unsigned long long, Uart::Send(unsigned char)::{lambda()#1})+0xa4>)
   125d8:	f000 fbf0 	bl	12dbc <__cyg_profile_func_enter>
  uint64_t timeout_time = 0;
   125dc:	f04f 0300 	mov.w	r3, #0
   125e0:	f04f 0400 	mov.w	r4, #0
   125e4:	e9cd 3406 	strd	r3, r4, [sp, #24]
  if (timeout == kMaxWait)
   125e8:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
   125ec:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
   125f0:	bf08      	it	eq
   125f2:	f1b3 3fff 	cmpeq.w	r3, #4294967295	; 0xffffffff
   125f6:	d106      	bne.n	12606 <Status Wait<Uart::Send(unsigned char)::{lambda()#1}>(unsigned long long, Uart::Send(unsigned char)::{lambda()#1})+0x42>
    timeout_time = kMaxWait;
   125f8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   125fc:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   12600:	e9cd 3406 	strd	r3, r4, [sp, #24]
   12604:	e00b      	b.n	1261e <Status Wait<Uart::Send(unsigned char)::{lambda()#1}>(unsigned long long, Uart::Send(unsigned char)::{lambda()#1})+0x5a>
    timeout_time = Milliseconds() + timeout;
   12606:	f7fd ff0d 	bl	10424 <Milliseconds()>
   1260a:	460a      	mov	r2, r1
   1260c:	4601      	mov	r1, r0
   1260e:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
   12612:	eb13 0b01 	adds.w	fp, r3, r1
   12616:	eb44 0c02 	adc.w	ip, r4, r2
   1261a:	e9cd bc06 	strd	fp, ip, [sp, #24]
  Status status = Status::kTimedOut;
   1261e:	2301      	movs	r3, #1
   12620:	9305      	str	r3, [sp, #20]
  while (Milliseconds() < timeout_time)
   12622:	f7fd feff 	bl	10424 <Milliseconds()>
   12626:	460a      	mov	r2, r1
   12628:	4601      	mov	r1, r0
   1262a:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
   1262e:	42a2      	cmp	r2, r4
   12630:	bf08      	it	eq
   12632:	4299      	cmpeq	r1, r3
   12634:	bf34      	ite	cc
   12636:	2301      	movcc	r3, #1
   12638:	2300      	movcs	r3, #0
   1263a:	b2db      	uxtb	r3, r3
   1263c:	2b00      	cmp	r3, #0
   1263e:	d008      	beq.n	12652 <Status Wait<Uart::Send(unsigned char)::{lambda()#1}>(unsigned long long, Uart::Send(unsigned char)::{lambda()#1})+0x8e>
    if (is_done())
   12640:	ab01      	add	r3, sp, #4
   12642:	4618      	mov	r0, r3
   12644:	f7ff fb1a 	bl	11c7c <Uart::Send(unsigned char)::{lambda()#1}::operator()() const>
   12648:	4603      	mov	r3, r0
   1264a:	2b00      	cmp	r3, #0
   1264c:	d0e9      	beq.n	12622 <Status Wait<Uart::Send(unsigned char)::{lambda()#1}>(unsigned long long, Uart::Send(unsigned char)::{lambda()#1})+0x5e>
      status = Status::kSuccess;
   1264e:	2300      	movs	r3, #0
   12650:	9305      	str	r3, [sp, #20]
  return status;
   12652:	9c05      	ldr	r4, [sp, #20]
   12654:	462b      	mov	r3, r5
   12656:	4619      	mov	r1, r3
   12658:	4803      	ldr	r0, [pc, #12]	; (12668 <Status Wait<Uart::Send(unsigned char)::{lambda()#1}>(unsigned long long, Uart::Send(unsigned char)::{lambda()#1})+0xa4>)
   1265a:	f000 fbc3 	bl	12de4 <__cyg_profile_func_exit>
   1265e:	4623      	mov	r3, r4
}
   12660:	4618      	mov	r0, r3
   12662:	b008      	add	sp, #32
   12664:	e8bd 8830 	ldmia.w	sp!, {r4, r5, fp, pc}
   12668:	000125c5 	.word	0x000125c5

0001266c <Status Wait<Uart::Receive(unsigned long)::{lambda()#1}>(unsigned long long, Uart::Receive(unsigned long)::{lambda()#1})>:
inline Status Wait(uint64_t timeout, F is_done)
   1266c:	e92d 4830 	stmdb	sp!, {r4, r5, fp, lr}
   12670:	b088      	sub	sp, #32
   12672:	4675      	mov	r5, lr
   12674:	e9cd 0102 	strd	r0, r1, [sp, #8]
   12678:	9201      	str	r2, [sp, #4]
   1267a:	462b      	mov	r3, r5
   1267c:	4619      	mov	r1, r3
   1267e:	4824      	ldr	r0, [pc, #144]	; (12710 <Status Wait<Uart::Receive(unsigned long)::{lambda()#1}>(unsigned long long, Uart::Receive(unsigned long)::{lambda()#1})+0xa4>)
   12680:	f000 fb9c 	bl	12dbc <__cyg_profile_func_enter>
  uint64_t timeout_time = 0;
   12684:	f04f 0300 	mov.w	r3, #0
   12688:	f04f 0400 	mov.w	r4, #0
   1268c:	e9cd 3406 	strd	r3, r4, [sp, #24]
  if (timeout == kMaxWait)
   12690:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
   12694:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
   12698:	bf08      	it	eq
   1269a:	f1b3 3fff 	cmpeq.w	r3, #4294967295	; 0xffffffff
   1269e:	d106      	bne.n	126ae <Status Wait<Uart::Receive(unsigned long)::{lambda()#1}>(unsigned long long, Uart::Receive(unsigned long)::{lambda()#1})+0x42>
    timeout_time = kMaxWait;
   126a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   126a4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   126a8:	e9cd 3406 	strd	r3, r4, [sp, #24]
   126ac:	e00b      	b.n	126c6 <Status Wait<Uart::Receive(unsigned long)::{lambda()#1}>(unsigned long long, Uart::Receive(unsigned long)::{lambda()#1})+0x5a>
    timeout_time = Milliseconds() + timeout;
   126ae:	f7fd feb9 	bl	10424 <Milliseconds()>
   126b2:	460a      	mov	r2, r1
   126b4:	4601      	mov	r1, r0
   126b6:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
   126ba:	eb13 0b01 	adds.w	fp, r3, r1
   126be:	eb44 0c02 	adc.w	ip, r4, r2
   126c2:	e9cd bc06 	strd	fp, ip, [sp, #24]
  Status status = Status::kTimedOut;
   126c6:	2301      	movs	r3, #1
   126c8:	9305      	str	r3, [sp, #20]
  while (Milliseconds() < timeout_time)
   126ca:	f7fd feab 	bl	10424 <Milliseconds()>
   126ce:	460a      	mov	r2, r1
   126d0:	4601      	mov	r1, r0
   126d2:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
   126d6:	42a2      	cmp	r2, r4
   126d8:	bf08      	it	eq
   126da:	4299      	cmpeq	r1, r3
   126dc:	bf34      	ite	cc
   126de:	2301      	movcc	r3, #1
   126e0:	2300      	movcs	r3, #0
   126e2:	b2db      	uxtb	r3, r3
   126e4:	2b00      	cmp	r3, #0
   126e6:	d008      	beq.n	126fa <Status Wait<Uart::Receive(unsigned long)::{lambda()#1}>(unsigned long long, Uart::Receive(unsigned long)::{lambda()#1})+0x8e>
    if (is_done())
   126e8:	ab01      	add	r3, sp, #4
   126ea:	4618      	mov	r0, r3
   126ec:	f7ff fb60 	bl	11db0 <Uart::Receive(unsigned long)::{lambda()#1}::operator()() const>
   126f0:	4603      	mov	r3, r0
   126f2:	2b00      	cmp	r3, #0
   126f4:	d0e9      	beq.n	126ca <Status Wait<Uart::Receive(unsigned long)::{lambda()#1}>(unsigned long long, Uart::Receive(unsigned long)::{lambda()#1})+0x5e>
      status = Status::kSuccess;
   126f6:	2300      	movs	r3, #0
   126f8:	9305      	str	r3, [sp, #20]
  return status;
   126fa:	9c05      	ldr	r4, [sp, #20]
   126fc:	462b      	mov	r3, r5
   126fe:	4619      	mov	r1, r3
   12700:	4803      	ldr	r0, [pc, #12]	; (12710 <Status Wait<Uart::Receive(unsigned long)::{lambda()#1}>(unsigned long long, Uart::Receive(unsigned long)::{lambda()#1})+0xa4>)
   12702:	f000 fb6f 	bl	12de4 <__cyg_profile_func_exit>
   12706:	4623      	mov	r3, r4
}
   12708:	4618      	mov	r0, r3
   1270a:	b008      	add	sp, #32
   1270c:	e8bd 8830 	ldmia.w	sp!, {r4, r5, fp, pc}
   12710:	0001266d 	.word	0x0001266d

00012714 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)0>()>:
  static void ClearInterrupts()
   12714:	b510      	push	{r4, lr}
   12716:	b082      	sub	sp, #8
   12718:	4674      	mov	r4, lr
   1271a:	4623      	mov	r3, r4
   1271c:	4619      	mov	r1, r3
   1271e:	4823      	ldr	r0, [pc, #140]	; (127ac <void Timer::ClearInterrupts<(TimerInterface::TimerPort)0>()+0x98>)
   12720:	f000 fb4c 	bl	12dbc <__cyg_profile_func_enter>
    uint8_t channel = util::Value(port);
   12724:	2300      	movs	r3, #0
   12726:	f88d 3007 	strb.w	r3, [sp, #7]
    tim_register[channel]->IR |= (1 << kRegMR0);
   1272a:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1272e:	4a20      	ldr	r2, [pc, #128]	; (127b0 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)0>()+0x9c>)
   12730:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12734:	681a      	ldr	r2, [r3, #0]
   12736:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1273a:	491d      	ldr	r1, [pc, #116]	; (127b0 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)0>()+0x9c>)
   1273c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   12740:	f042 0201 	orr.w	r2, r2, #1
   12744:	601a      	str	r2, [r3, #0]
    tim_register[channel]->IR |= (1 << kRegMR1);
   12746:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1274a:	4a19      	ldr	r2, [pc, #100]	; (127b0 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)0>()+0x9c>)
   1274c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12750:	681a      	ldr	r2, [r3, #0]
   12752:	f89d 3007 	ldrb.w	r3, [sp, #7]
   12756:	4916      	ldr	r1, [pc, #88]	; (127b0 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)0>()+0x9c>)
   12758:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   1275c:	f042 0202 	orr.w	r2, r2, #2
   12760:	601a      	str	r2, [r3, #0]
    tim_register[channel]->IR |= (1 << kRegMR2);
   12762:	f89d 3007 	ldrb.w	r3, [sp, #7]
   12766:	4a12      	ldr	r2, [pc, #72]	; (127b0 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)0>()+0x9c>)
   12768:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1276c:	681a      	ldr	r2, [r3, #0]
   1276e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   12772:	490f      	ldr	r1, [pc, #60]	; (127b0 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)0>()+0x9c>)
   12774:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   12778:	f042 0204 	orr.w	r2, r2, #4
   1277c:	601a      	str	r2, [r3, #0]
    tim_register[channel]->IR |= (1 << kRegMR3);
   1277e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   12782:	4a0b      	ldr	r2, [pc, #44]	; (127b0 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)0>()+0x9c>)
   12784:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12788:	681a      	ldr	r2, [r3, #0]
   1278a:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1278e:	4908      	ldr	r1, [pc, #32]	; (127b0 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)0>()+0x9c>)
   12790:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   12794:	f042 0208 	orr.w	r2, r2, #8
   12798:	601a      	str	r2, [r3, #0]
   1279a:	4623      	mov	r3, r4
   1279c:	4619      	mov	r1, r3
   1279e:	4803      	ldr	r0, [pc, #12]	; (127ac <void Timer::ClearInterrupts<(TimerInterface::TimerPort)0>()+0x98>)
   127a0:	f000 fb20 	bl	12de4 <__cyg_profile_func_exit>
  }
   127a4:	bf00      	nop
   127a6:	b002      	add	sp, #8
   127a8:	bd10      	pop	{r4, pc}
   127aa:	bf00      	nop
   127ac:	00012715 	.word	0x00012715
   127b0:	10000050 	.word	0x10000050

000127b4 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)1>()>:
  static void ClearInterrupts()
   127b4:	b510      	push	{r4, lr}
   127b6:	b082      	sub	sp, #8
   127b8:	4674      	mov	r4, lr
   127ba:	4623      	mov	r3, r4
   127bc:	4619      	mov	r1, r3
   127be:	4823      	ldr	r0, [pc, #140]	; (1284c <void Timer::ClearInterrupts<(TimerInterface::TimerPort)1>()+0x98>)
   127c0:	f000 fafc 	bl	12dbc <__cyg_profile_func_enter>
    uint8_t channel = util::Value(port);
   127c4:	2301      	movs	r3, #1
   127c6:	f88d 3007 	strb.w	r3, [sp, #7]
    tim_register[channel]->IR |= (1 << kRegMR0);
   127ca:	f89d 3007 	ldrb.w	r3, [sp, #7]
   127ce:	4a20      	ldr	r2, [pc, #128]	; (12850 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)1>()+0x9c>)
   127d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   127d4:	681a      	ldr	r2, [r3, #0]
   127d6:	f89d 3007 	ldrb.w	r3, [sp, #7]
   127da:	491d      	ldr	r1, [pc, #116]	; (12850 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)1>()+0x9c>)
   127dc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   127e0:	f042 0201 	orr.w	r2, r2, #1
   127e4:	601a      	str	r2, [r3, #0]
    tim_register[channel]->IR |= (1 << kRegMR1);
   127e6:	f89d 3007 	ldrb.w	r3, [sp, #7]
   127ea:	4a19      	ldr	r2, [pc, #100]	; (12850 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)1>()+0x9c>)
   127ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   127f0:	681a      	ldr	r2, [r3, #0]
   127f2:	f89d 3007 	ldrb.w	r3, [sp, #7]
   127f6:	4916      	ldr	r1, [pc, #88]	; (12850 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)1>()+0x9c>)
   127f8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   127fc:	f042 0202 	orr.w	r2, r2, #2
   12800:	601a      	str	r2, [r3, #0]
    tim_register[channel]->IR |= (1 << kRegMR2);
   12802:	f89d 3007 	ldrb.w	r3, [sp, #7]
   12806:	4a12      	ldr	r2, [pc, #72]	; (12850 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)1>()+0x9c>)
   12808:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1280c:	681a      	ldr	r2, [r3, #0]
   1280e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   12812:	490f      	ldr	r1, [pc, #60]	; (12850 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)1>()+0x9c>)
   12814:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   12818:	f042 0204 	orr.w	r2, r2, #4
   1281c:	601a      	str	r2, [r3, #0]
    tim_register[channel]->IR |= (1 << kRegMR3);
   1281e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   12822:	4a0b      	ldr	r2, [pc, #44]	; (12850 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)1>()+0x9c>)
   12824:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12828:	681a      	ldr	r2, [r3, #0]
   1282a:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1282e:	4908      	ldr	r1, [pc, #32]	; (12850 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)1>()+0x9c>)
   12830:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   12834:	f042 0208 	orr.w	r2, r2, #8
   12838:	601a      	str	r2, [r3, #0]
   1283a:	4623      	mov	r3, r4
   1283c:	4619      	mov	r1, r3
   1283e:	4803      	ldr	r0, [pc, #12]	; (1284c <void Timer::ClearInterrupts<(TimerInterface::TimerPort)1>()+0x98>)
   12840:	f000 fad0 	bl	12de4 <__cyg_profile_func_exit>
  }
   12844:	bf00      	nop
   12846:	b002      	add	sp, #8
   12848:	bd10      	pop	{r4, pc}
   1284a:	bf00      	nop
   1284c:	000127b5 	.word	0x000127b5
   12850:	10000050 	.word	0x10000050

00012854 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)2>()>:
  static void ClearInterrupts()
   12854:	b510      	push	{r4, lr}
   12856:	b082      	sub	sp, #8
   12858:	4674      	mov	r4, lr
   1285a:	4623      	mov	r3, r4
   1285c:	4619      	mov	r1, r3
   1285e:	4823      	ldr	r0, [pc, #140]	; (128ec <void Timer::ClearInterrupts<(TimerInterface::TimerPort)2>()+0x98>)
   12860:	f000 faac 	bl	12dbc <__cyg_profile_func_enter>
    uint8_t channel = util::Value(port);
   12864:	2302      	movs	r3, #2
   12866:	f88d 3007 	strb.w	r3, [sp, #7]
    tim_register[channel]->IR |= (1 << kRegMR0);
   1286a:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1286e:	4a20      	ldr	r2, [pc, #128]	; (128f0 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)2>()+0x9c>)
   12870:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12874:	681a      	ldr	r2, [r3, #0]
   12876:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1287a:	491d      	ldr	r1, [pc, #116]	; (128f0 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)2>()+0x9c>)
   1287c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   12880:	f042 0201 	orr.w	r2, r2, #1
   12884:	601a      	str	r2, [r3, #0]
    tim_register[channel]->IR |= (1 << kRegMR1);
   12886:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1288a:	4a19      	ldr	r2, [pc, #100]	; (128f0 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)2>()+0x9c>)
   1288c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12890:	681a      	ldr	r2, [r3, #0]
   12892:	f89d 3007 	ldrb.w	r3, [sp, #7]
   12896:	4916      	ldr	r1, [pc, #88]	; (128f0 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)2>()+0x9c>)
   12898:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   1289c:	f042 0202 	orr.w	r2, r2, #2
   128a0:	601a      	str	r2, [r3, #0]
    tim_register[channel]->IR |= (1 << kRegMR2);
   128a2:	f89d 3007 	ldrb.w	r3, [sp, #7]
   128a6:	4a12      	ldr	r2, [pc, #72]	; (128f0 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)2>()+0x9c>)
   128a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   128ac:	681a      	ldr	r2, [r3, #0]
   128ae:	f89d 3007 	ldrb.w	r3, [sp, #7]
   128b2:	490f      	ldr	r1, [pc, #60]	; (128f0 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)2>()+0x9c>)
   128b4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   128b8:	f042 0204 	orr.w	r2, r2, #4
   128bc:	601a      	str	r2, [r3, #0]
    tim_register[channel]->IR |= (1 << kRegMR3);
   128be:	f89d 3007 	ldrb.w	r3, [sp, #7]
   128c2:	4a0b      	ldr	r2, [pc, #44]	; (128f0 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)2>()+0x9c>)
   128c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   128c8:	681a      	ldr	r2, [r3, #0]
   128ca:	f89d 3007 	ldrb.w	r3, [sp, #7]
   128ce:	4908      	ldr	r1, [pc, #32]	; (128f0 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)2>()+0x9c>)
   128d0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   128d4:	f042 0208 	orr.w	r2, r2, #8
   128d8:	601a      	str	r2, [r3, #0]
   128da:	4623      	mov	r3, r4
   128dc:	4619      	mov	r1, r3
   128de:	4803      	ldr	r0, [pc, #12]	; (128ec <void Timer::ClearInterrupts<(TimerInterface::TimerPort)2>()+0x98>)
   128e0:	f000 fa80 	bl	12de4 <__cyg_profile_func_exit>
  }
   128e4:	bf00      	nop
   128e6:	b002      	add	sp, #8
   128e8:	bd10      	pop	{r4, pc}
   128ea:	bf00      	nop
   128ec:	00012855 	.word	0x00012855
   128f0:	10000050 	.word	0x10000050

000128f4 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)3>()>:
  static void ClearInterrupts()
   128f4:	b510      	push	{r4, lr}
   128f6:	b082      	sub	sp, #8
   128f8:	4674      	mov	r4, lr
   128fa:	4623      	mov	r3, r4
   128fc:	4619      	mov	r1, r3
   128fe:	4823      	ldr	r0, [pc, #140]	; (1298c <void Timer::ClearInterrupts<(TimerInterface::TimerPort)3>()+0x98>)
   12900:	f000 fa5c 	bl	12dbc <__cyg_profile_func_enter>
    uint8_t channel = util::Value(port);
   12904:	2303      	movs	r3, #3
   12906:	f88d 3007 	strb.w	r3, [sp, #7]
    tim_register[channel]->IR |= (1 << kRegMR0);
   1290a:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1290e:	4a20      	ldr	r2, [pc, #128]	; (12990 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)3>()+0x9c>)
   12910:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12914:	681a      	ldr	r2, [r3, #0]
   12916:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1291a:	491d      	ldr	r1, [pc, #116]	; (12990 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)3>()+0x9c>)
   1291c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   12920:	f042 0201 	orr.w	r2, r2, #1
   12924:	601a      	str	r2, [r3, #0]
    tim_register[channel]->IR |= (1 << kRegMR1);
   12926:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1292a:	4a19      	ldr	r2, [pc, #100]	; (12990 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)3>()+0x9c>)
   1292c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12930:	681a      	ldr	r2, [r3, #0]
   12932:	f89d 3007 	ldrb.w	r3, [sp, #7]
   12936:	4916      	ldr	r1, [pc, #88]	; (12990 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)3>()+0x9c>)
   12938:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   1293c:	f042 0202 	orr.w	r2, r2, #2
   12940:	601a      	str	r2, [r3, #0]
    tim_register[channel]->IR |= (1 << kRegMR2);
   12942:	f89d 3007 	ldrb.w	r3, [sp, #7]
   12946:	4a12      	ldr	r2, [pc, #72]	; (12990 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)3>()+0x9c>)
   12948:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1294c:	681a      	ldr	r2, [r3, #0]
   1294e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   12952:	490f      	ldr	r1, [pc, #60]	; (12990 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)3>()+0x9c>)
   12954:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   12958:	f042 0204 	orr.w	r2, r2, #4
   1295c:	601a      	str	r2, [r3, #0]
    tim_register[channel]->IR |= (1 << kRegMR3);
   1295e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   12962:	4a0b      	ldr	r2, [pc, #44]	; (12990 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)3>()+0x9c>)
   12964:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12968:	681a      	ldr	r2, [r3, #0]
   1296a:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1296e:	4908      	ldr	r1, [pc, #32]	; (12990 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)3>()+0x9c>)
   12970:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   12974:	f042 0208 	orr.w	r2, r2, #8
   12978:	601a      	str	r2, [r3, #0]
   1297a:	4623      	mov	r3, r4
   1297c:	4619      	mov	r1, r3
   1297e:	4803      	ldr	r0, [pc, #12]	; (1298c <void Timer::ClearInterrupts<(TimerInterface::TimerPort)3>()+0x98>)
   12980:	f000 fa30 	bl	12de4 <__cyg_profile_func_exit>
  }
   12984:	bf00      	nop
   12986:	b002      	add	sp, #8
   12988:	bd10      	pop	{r4, pc}
   1298a:	bf00      	nop
   1298c:	000128f5 	.word	0x000128f5
   12990:	10000050 	.word	0x10000050

00012994 <__static_initialization_and_destruction_0(int, int)>:
#pragma GCC diagnostic pop
    // main() shouldn't return, but if it does, we'll just enter an infinite
    // loop
    Halt();
  }
}
   12994:	b082      	sub	sp, #8
   12996:	9001      	str	r0, [sp, #4]
   12998:	9100      	str	r1, [sp, #0]
   1299a:	9b01      	ldr	r3, [sp, #4]
   1299c:	2b01      	cmp	r3, #1
   1299e:	d15d      	bne.n	12a5c <__static_initialization_and_destruction_0(int, int)+0xc8>
   129a0:	9b00      	ldr	r3, [sp, #0]
   129a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
   129a6:	4293      	cmp	r3, r2
   129a8:	d158      	bne.n	12a5c <__static_initialization_and_destruction_0(int, int)+0xc8>
  inline static volatile uint32_t * match[4][4] = {
   129aa:	4b2e      	ldr	r3, [pc, #184]	; (12a64 <__static_initialization_and_destruction_0(int, int)+0xd0>)
   129ac:	681b      	ldr	r3, [r3, #0]
   129ae:	f003 0301 	and.w	r3, r3, #1
   129b2:	2b00      	cmp	r3, #0
   129b4:	d152      	bne.n	12a5c <__static_initialization_and_destruction_0(int, int)+0xc8>
   129b6:	4b2b      	ldr	r3, [pc, #172]	; (12a64 <__static_initialization_and_destruction_0(int, int)+0xd0>)
   129b8:	2201      	movs	r2, #1
   129ba:	601a      	str	r2, [r3, #0]
    [kTimer0] = { &tim_register[0]->MR0, &tim_register[0]->MR1,
   129bc:	4b2a      	ldr	r3, [pc, #168]	; (12a68 <__static_initialization_and_destruction_0(int, int)+0xd4>)
   129be:	681b      	ldr	r3, [r3, #0]
   129c0:	3318      	adds	r3, #24
  };
   129c2:	4a2a      	ldr	r2, [pc, #168]	; (12a6c <__static_initialization_and_destruction_0(int, int)+0xd8>)
   129c4:	6013      	str	r3, [r2, #0]
    [kTimer0] = { &tim_register[0]->MR0, &tim_register[0]->MR1,
   129c6:	4b28      	ldr	r3, [pc, #160]	; (12a68 <__static_initialization_and_destruction_0(int, int)+0xd4>)
   129c8:	681b      	ldr	r3, [r3, #0]
   129ca:	331c      	adds	r3, #28
  };
   129cc:	4a27      	ldr	r2, [pc, #156]	; (12a6c <__static_initialization_and_destruction_0(int, int)+0xd8>)
   129ce:	6053      	str	r3, [r2, #4]
                  &tim_register[0]->MR2, &tim_register[0]->MR3 },
   129d0:	4b25      	ldr	r3, [pc, #148]	; (12a68 <__static_initialization_and_destruction_0(int, int)+0xd4>)
   129d2:	681b      	ldr	r3, [r3, #0]
   129d4:	3320      	adds	r3, #32
  };
   129d6:	4a25      	ldr	r2, [pc, #148]	; (12a6c <__static_initialization_and_destruction_0(int, int)+0xd8>)
   129d8:	6093      	str	r3, [r2, #8]
                  &tim_register[0]->MR2, &tim_register[0]->MR3 },
   129da:	4b23      	ldr	r3, [pc, #140]	; (12a68 <__static_initialization_and_destruction_0(int, int)+0xd4>)
   129dc:	681b      	ldr	r3, [r3, #0]
   129de:	3324      	adds	r3, #36	; 0x24
  };
   129e0:	4a22      	ldr	r2, [pc, #136]	; (12a6c <__static_initialization_and_destruction_0(int, int)+0xd8>)
   129e2:	60d3      	str	r3, [r2, #12]
    [kTimer1] = { &tim_register[1]->MR0, &tim_register[1]->MR1,
   129e4:	4b20      	ldr	r3, [pc, #128]	; (12a68 <__static_initialization_and_destruction_0(int, int)+0xd4>)
   129e6:	685b      	ldr	r3, [r3, #4]
   129e8:	3318      	adds	r3, #24
  };
   129ea:	4a20      	ldr	r2, [pc, #128]	; (12a6c <__static_initialization_and_destruction_0(int, int)+0xd8>)
   129ec:	6113      	str	r3, [r2, #16]
    [kTimer1] = { &tim_register[1]->MR0, &tim_register[1]->MR1,
   129ee:	4b1e      	ldr	r3, [pc, #120]	; (12a68 <__static_initialization_and_destruction_0(int, int)+0xd4>)
   129f0:	685b      	ldr	r3, [r3, #4]
   129f2:	331c      	adds	r3, #28
  };
   129f4:	4a1d      	ldr	r2, [pc, #116]	; (12a6c <__static_initialization_and_destruction_0(int, int)+0xd8>)
   129f6:	6153      	str	r3, [r2, #20]
                  &tim_register[1]->MR2, &tim_register[1]->MR3 },
   129f8:	4b1b      	ldr	r3, [pc, #108]	; (12a68 <__static_initialization_and_destruction_0(int, int)+0xd4>)
   129fa:	685b      	ldr	r3, [r3, #4]
   129fc:	3320      	adds	r3, #32
  };
   129fe:	4a1b      	ldr	r2, [pc, #108]	; (12a6c <__static_initialization_and_destruction_0(int, int)+0xd8>)
   12a00:	6193      	str	r3, [r2, #24]
                  &tim_register[1]->MR2, &tim_register[1]->MR3 },
   12a02:	4b19      	ldr	r3, [pc, #100]	; (12a68 <__static_initialization_and_destruction_0(int, int)+0xd4>)
   12a04:	685b      	ldr	r3, [r3, #4]
   12a06:	3324      	adds	r3, #36	; 0x24
  };
   12a08:	4a18      	ldr	r2, [pc, #96]	; (12a6c <__static_initialization_and_destruction_0(int, int)+0xd8>)
   12a0a:	61d3      	str	r3, [r2, #28]
    [kTimer2] = { &tim_register[2]->MR0, &tim_register[2]->MR1,
   12a0c:	4b16      	ldr	r3, [pc, #88]	; (12a68 <__static_initialization_and_destruction_0(int, int)+0xd4>)
   12a0e:	689b      	ldr	r3, [r3, #8]
   12a10:	3318      	adds	r3, #24
  };
   12a12:	4a16      	ldr	r2, [pc, #88]	; (12a6c <__static_initialization_and_destruction_0(int, int)+0xd8>)
   12a14:	6213      	str	r3, [r2, #32]
    [kTimer2] = { &tim_register[2]->MR0, &tim_register[2]->MR1,
   12a16:	4b14      	ldr	r3, [pc, #80]	; (12a68 <__static_initialization_and_destruction_0(int, int)+0xd4>)
   12a18:	689b      	ldr	r3, [r3, #8]
   12a1a:	331c      	adds	r3, #28
  };
   12a1c:	4a13      	ldr	r2, [pc, #76]	; (12a6c <__static_initialization_and_destruction_0(int, int)+0xd8>)
   12a1e:	6253      	str	r3, [r2, #36]	; 0x24
                  &tim_register[2]->MR2, &tim_register[2]->MR3 },
   12a20:	4b11      	ldr	r3, [pc, #68]	; (12a68 <__static_initialization_and_destruction_0(int, int)+0xd4>)
   12a22:	689b      	ldr	r3, [r3, #8]
   12a24:	3320      	adds	r3, #32
  };
   12a26:	4a11      	ldr	r2, [pc, #68]	; (12a6c <__static_initialization_and_destruction_0(int, int)+0xd8>)
   12a28:	6293      	str	r3, [r2, #40]	; 0x28
                  &tim_register[2]->MR2, &tim_register[2]->MR3 },
   12a2a:	4b0f      	ldr	r3, [pc, #60]	; (12a68 <__static_initialization_and_destruction_0(int, int)+0xd4>)
   12a2c:	689b      	ldr	r3, [r3, #8]
   12a2e:	3324      	adds	r3, #36	; 0x24
  };
   12a30:	4a0e      	ldr	r2, [pc, #56]	; (12a6c <__static_initialization_and_destruction_0(int, int)+0xd8>)
   12a32:	62d3      	str	r3, [r2, #44]	; 0x2c
    [kTimer3] = { &tim_register[3]->MR0, &tim_register[3]->MR1,
   12a34:	4b0c      	ldr	r3, [pc, #48]	; (12a68 <__static_initialization_and_destruction_0(int, int)+0xd4>)
   12a36:	68db      	ldr	r3, [r3, #12]
   12a38:	3318      	adds	r3, #24
  };
   12a3a:	4a0c      	ldr	r2, [pc, #48]	; (12a6c <__static_initialization_and_destruction_0(int, int)+0xd8>)
   12a3c:	6313      	str	r3, [r2, #48]	; 0x30
    [kTimer3] = { &tim_register[3]->MR0, &tim_register[3]->MR1,
   12a3e:	4b0a      	ldr	r3, [pc, #40]	; (12a68 <__static_initialization_and_destruction_0(int, int)+0xd4>)
   12a40:	68db      	ldr	r3, [r3, #12]
   12a42:	331c      	adds	r3, #28
  };
   12a44:	4a09      	ldr	r2, [pc, #36]	; (12a6c <__static_initialization_and_destruction_0(int, int)+0xd8>)
   12a46:	6353      	str	r3, [r2, #52]	; 0x34
                  &tim_register[3]->MR2, &tim_register[3]->MR3 }
   12a48:	4b07      	ldr	r3, [pc, #28]	; (12a68 <__static_initialization_and_destruction_0(int, int)+0xd4>)
   12a4a:	68db      	ldr	r3, [r3, #12]
   12a4c:	3320      	adds	r3, #32
  };
   12a4e:	4a07      	ldr	r2, [pc, #28]	; (12a6c <__static_initialization_and_destruction_0(int, int)+0xd8>)
   12a50:	6393      	str	r3, [r2, #56]	; 0x38
                  &tim_register[3]->MR2, &tim_register[3]->MR3 }
   12a52:	4b05      	ldr	r3, [pc, #20]	; (12a68 <__static_initialization_and_destruction_0(int, int)+0xd4>)
   12a54:	68db      	ldr	r3, [r3, #12]
   12a56:	3324      	adds	r3, #36	; 0x24
  };
   12a58:	4a04      	ldr	r2, [pc, #16]	; (12a6c <__static_initialization_and_destruction_0(int, int)+0xd8>)
   12a5a:	63d3      	str	r3, [r2, #60]	; 0x3c
   12a5c:	bf00      	nop
   12a5e:	b002      	add	sp, #8
   12a60:	4770      	bx	lr
   12a62:	bf00      	nop
   12a64:	100002d4 	.word	0x100002d4
   12a68:	10000050 	.word	0x10000050
   12a6c:	10000284 	.word	0x10000284

00012a70 <_GLOBAL__sub_I_UptimeRTOS>:
   12a70:	b508      	push	{r3, lr}
   12a72:	f64f 71ff 	movw	r1, #65535	; 0xffff
   12a76:	2001      	movs	r0, #1
   12a78:	f7ff ff8c 	bl	12994 <__static_initialization_and_destruction_0(int, int)>
   12a7c:	bd08      	pop	{r3, pc}
   12a7e:	Address 0x0000000000012a7e is out of bounds.


00012a80 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
   12a80:	b082      	sub	sp, #8
   12a82:	4603      	mov	r3, r0
   12a84:	f88d 3007 	strb.w	r3, [sp, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
   12a88:	f99d 3007 	ldrsb.w	r3, [sp, #7]
   12a8c:	f003 021f 	and.w	r2, r3, #31
   12a90:	4905      	ldr	r1, [pc, #20]	; (12aa8 <NVIC_EnableIRQ+0x28>)
   12a92:	f99d 3007 	ldrsb.w	r3, [sp, #7]
   12a96:	095b      	lsrs	r3, r3, #5
   12a98:	2001      	movs	r0, #1
   12a9a:	fa00 f202 	lsl.w	r2, r0, r2
   12a9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   12aa2:	bf00      	nop
   12aa4:	b002      	add	sp, #8
   12aa6:	4770      	bx	lr
   12aa8:	e000e100 	.word	0xe000e100

00012aac <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
   12aac:	b082      	sub	sp, #8
   12aae:	4603      	mov	r3, r0
   12ab0:	9100      	str	r1, [sp, #0]
   12ab2:	f88d 3007 	strb.w	r3, [sp, #7]
  if ((int32_t)(IRQn) < 0)
   12ab6:	f99d 3007 	ldrsb.w	r3, [sp, #7]
   12aba:	2b00      	cmp	r3, #0
   12abc:	da0c      	bge.n	12ad8 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   12abe:	9b00      	ldr	r3, [sp, #0]
   12ac0:	b2da      	uxtb	r2, r3
   12ac2:	490d      	ldr	r1, [pc, #52]	; (12af8 <NVIC_SetPriority+0x4c>)
   12ac4:	f99d 3007 	ldrsb.w	r3, [sp, #7]
   12ac8:	f003 030f 	and.w	r3, r3, #15
   12acc:	3b04      	subs	r3, #4
   12ace:	0152      	lsls	r2, r2, #5
   12ad0:	b2d2      	uxtb	r2, r2
   12ad2:	440b      	add	r3, r1
   12ad4:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
   12ad6:	e00b      	b.n	12af0 <NVIC_SetPriority+0x44>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   12ad8:	9b00      	ldr	r3, [sp, #0]
   12ada:	b2db      	uxtb	r3, r3
   12adc:	4a07      	ldr	r2, [pc, #28]	; (12afc <NVIC_SetPriority+0x50>)
   12ade:	f99d 1007 	ldrsb.w	r1, [sp, #7]
   12ae2:	4608      	mov	r0, r1
   12ae4:	015b      	lsls	r3, r3, #5
   12ae6:	b2d9      	uxtb	r1, r3
   12ae8:	1813      	adds	r3, r2, r0
   12aea:	460a      	mov	r2, r1
   12aec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
   12af0:	bf00      	nop
   12af2:	b002      	add	sp, #8
   12af4:	4770      	bx	lr
   12af6:	bf00      	nop
   12af8:	e000ed00 	.word	0xe000ed00
   12afc:	e000e100 	.word	0xe000e100

00012b00 <InterruptLookupHandler>:
{
   12b00:	b500      	push	{lr}
   12b02:	b085      	sub	sp, #20
  uint8_t active_isr = (SCB->ICSR & 0xFF);
   12b04:	4b12      	ldr	r3, [pc, #72]	; (12b50 <InterruptLookupHandler+0x50>)
   12b06:	685b      	ldr	r3, [r3, #4]
   12b08:	f88d 300f 	strb.w	r3, [sp, #15]
  IsrPointer isr     = dynamic_isr_vector_table[active_isr];
   12b0c:	f89d 300f 	ldrb.w	r3, [sp, #15]
   12b10:	4a10      	ldr	r2, [pc, #64]	; (12b54 <InterruptLookupHandler+0x54>)
   12b12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12b16:	9302      	str	r3, [sp, #8]
  SJ2_ASSERT_FATAL(isr != InterruptLookupHandler,
   12b18:	9b02      	ldr	r3, [sp, #8]
   12b1a:	4a0f      	ldr	r2, [pc, #60]	; (12b58 <InterruptLookupHandler+0x58>)
   12b1c:	4293      	cmp	r3, r2
   12b1e:	d110      	bne.n	12b42 <InterruptLookupHandler+0x42>
   12b20:	f89d 300f 	ldrb.w	r3, [sp, #15]
   12b24:	9300      	str	r3, [sp, #0]
   12b26:	23dd      	movs	r3, #221	; 0xdd
   12b28:	4a0c      	ldr	r2, [pc, #48]	; (12b5c <InterruptLookupHandler+0x5c>)
   12b2a:	490d      	ldr	r1, [pc, #52]	; (12b60 <InterruptLookupHandler+0x60>)
   12b2c:	480d      	ldr	r0, [pc, #52]	; (12b64 <InterruptLookupHandler+0x64>)
   12b2e:	f001 fba1 	bl	14274 <printf>
   12b32:	480d      	ldr	r0, [pc, #52]	; (12b68 <InterruptLookupHandler+0x68>)
   12b34:	f000 f912 	bl	12d5c <puts>
   12b38:	2100      	movs	r1, #0
   12b3a:	2001      	movs	r0, #1
   12b3c:	f7fd ff18 	bl	10970 <debug::PrintBacktrace(bool, void*)>
   12b40:	e7fe      	b.n	12b40 <InterruptLookupHandler+0x40>
  isr();
   12b42:	9b02      	ldr	r3, [sp, #8]
   12b44:	4798      	blx	r3
}
   12b46:	bf00      	nop
   12b48:	b005      	add	sp, #20
   12b4a:	f85d fb04 	ldr.w	pc, [sp], #4
   12b4e:	bf00      	nop
   12b50:	e000ed00 	.word	0xe000ed00
   12b54:	100000dc 	.word	0x100000dc
   12b58:	00012b01 	.word	0x00012b01
   12b5c:	00017c58 	.word	0x00017c58
   12b60:	00017c48 	.word	0x00017c48
   12b64:	00017aec 	.word	0x00017aec
   12b68:	00017b98 	.word	0x00017b98

00012b6c <RegisterIsr(IRQn, void (*)(), bool, long)>:
{
   12b6c:	b500      	push	{lr}
   12b6e:	b085      	sub	sp, #20
   12b70:	9102      	str	r1, [sp, #8]
   12b72:	9301      	str	r3, [sp, #4]
   12b74:	4603      	mov	r3, r0
   12b76:	f88d 300f 	strb.w	r3, [sp, #15]
   12b7a:	4613      	mov	r3, r2
   12b7c:	f88d 300e 	strb.w	r3, [sp, #14]
  dynamic_isr_vector_table[irq + kIrqOffset] = isr;
   12b80:	f99d 300f 	ldrsb.w	r3, [sp, #15]
   12b84:	3310      	adds	r3, #16
   12b86:	490f      	ldr	r1, [pc, #60]	; (12bc4 <RegisterIsr(IRQn, void (*)(), bool, long)+0x58>)
   12b88:	9a02      	ldr	r2, [sp, #8]
   12b8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  if (enable_interrupt && irq >= 0)
   12b8e:	f89d 300e 	ldrb.w	r3, [sp, #14]
   12b92:	2b00      	cmp	r3, #0
   12b94:	d008      	beq.n	12ba8 <RegisterIsr(IRQn, void (*)(), bool, long)+0x3c>
   12b96:	f99d 300f 	ldrsb.w	r3, [sp, #15]
   12b9a:	2b00      	cmp	r3, #0
   12b9c:	db04      	blt.n	12ba8 <RegisterIsr(IRQn, void (*)(), bool, long)+0x3c>
    NVIC_EnableIRQ(irq);
   12b9e:	f99d 300f 	ldrsb.w	r3, [sp, #15]
   12ba2:	4618      	mov	r0, r3
   12ba4:	f7ff ff6c 	bl	12a80 <NVIC_EnableIRQ>
  if (priority > -1)
   12ba8:	9b01      	ldr	r3, [sp, #4]
   12baa:	2b00      	cmp	r3, #0
   12bac:	db06      	blt.n	12bbc <RegisterIsr(IRQn, void (*)(), bool, long)+0x50>
    NVIC_SetPriority(irq, priority);
   12bae:	9a01      	ldr	r2, [sp, #4]
   12bb0:	f99d 300f 	ldrsb.w	r3, [sp, #15]
   12bb4:	4611      	mov	r1, r2
   12bb6:	4618      	mov	r0, r3
   12bb8:	f7ff ff78 	bl	12aac <NVIC_SetPriority>
}
   12bbc:	bf00      	nop
   12bbe:	b005      	add	sp, #20
   12bc0:	f85d fb04 	ldr.w	pc, [sp], #4
   12bc4:	100000dc 	.word	0x100000dc

00012bc8 <GetRegistersFromStack>:
{
   12bc8:	b500      	push	{lr}
   12bca:	b08d      	sub	sp, #52	; 0x34
   12bcc:	9003      	str	r0, [sp, #12]
  volatile uint32_t r0  = fault_stack_address[0];
   12bce:	9b03      	ldr	r3, [sp, #12]
   12bd0:	681b      	ldr	r3, [r3, #0]
   12bd2:	930b      	str	r3, [sp, #44]	; 0x2c
  volatile uint32_t r1  = fault_stack_address[1];
   12bd4:	9b03      	ldr	r3, [sp, #12]
   12bd6:	685b      	ldr	r3, [r3, #4]
   12bd8:	930a      	str	r3, [sp, #40]	; 0x28
  volatile uint32_t r2  = fault_stack_address[2];
   12bda:	9b03      	ldr	r3, [sp, #12]
   12bdc:	689b      	ldr	r3, [r3, #8]
   12bde:	9309      	str	r3, [sp, #36]	; 0x24
  volatile uint32_t r3  = fault_stack_address[3];
   12be0:	9b03      	ldr	r3, [sp, #12]
   12be2:	68db      	ldr	r3, [r3, #12]
   12be4:	9308      	str	r3, [sp, #32]
  volatile uint32_t r12 = fault_stack_address[4];
   12be6:	9b03      	ldr	r3, [sp, #12]
   12be8:	691b      	ldr	r3, [r3, #16]
   12bea:	9307      	str	r3, [sp, #28]
  volatile uint32_t lr = fault_stack_address[5];
   12bec:	9b03      	ldr	r3, [sp, #12]
   12bee:	695b      	ldr	r3, [r3, #20]
   12bf0:	9306      	str	r3, [sp, #24]
  volatile uint32_t pc = fault_stack_address[6];
   12bf2:	9b03      	ldr	r3, [sp, #12]
   12bf4:	699b      	ldr	r3, [r3, #24]
   12bf6:	9305      	str	r3, [sp, #20]
  volatile uint32_t psr = fault_stack_address[7];
   12bf8:	9b03      	ldr	r3, [sp, #12]
   12bfa:	69db      	ldr	r3, [r3, #28]
   12bfc:	9304      	str	r3, [sp, #16]
  printf(SJ2_BACKGROUND_RED "Hard Fault Exception Occurred!\n" SJ2_COLOR_RESET);
   12bfe:	480d      	ldr	r0, [pc, #52]	; (12c34 <GetRegistersFromStack+0x6c>)
   12c00:	f001 fb38 	bl	14274 <printf>
  printf("r0: 0x%08" PRIX32 ", r1: 0x%08" PRIX32
   12c04:	990b      	ldr	r1, [sp, #44]	; 0x2c
   12c06:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   12c08:	9809      	ldr	r0, [sp, #36]	; 0x24
   12c0a:	9b08      	ldr	r3, [sp, #32]
   12c0c:	9300      	str	r3, [sp, #0]
   12c0e:	4603      	mov	r3, r0
   12c10:	4809      	ldr	r0, [pc, #36]	; (12c38 <GetRegistersFromStack+0x70>)
   12c12:	f001 fb2f 	bl	14274 <printf>
  printf("r12: 0x%08" PRIX32 ", lr: 0x%08" PRIX32
   12c16:	9907      	ldr	r1, [sp, #28]
   12c18:	9a06      	ldr	r2, [sp, #24]
   12c1a:	9805      	ldr	r0, [sp, #20]
   12c1c:	9b04      	ldr	r3, [sp, #16]
   12c1e:	9300      	str	r3, [sp, #0]
   12c20:	4603      	mov	r3, r0
   12c22:	4806      	ldr	r0, [pc, #24]	; (12c3c <GetRegistersFromStack+0x74>)
   12c24:	f001 fb26 	bl	14274 <printf>
  debug::PrintBacktrace(true, reinterpret_cast<void *>(pc));
   12c28:	9b05      	ldr	r3, [sp, #20]
   12c2a:	4619      	mov	r1, r3
   12c2c:	2001      	movs	r0, #1
   12c2e:	f7fd fe9f 	bl	10970 <debug::PrintBacktrace(bool, void*)>
   12c32:	e7fe      	b.n	12c32 <GetRegistersFromStack+0x6a>
   12c34:	00017bb0 	.word	0x00017bb0
   12c38:	00017bdc 	.word	0x00017bdc
   12c3c:	00017c10 	.word	0x00017c10

00012c40 <FirmwareStdOut(int)>:
}
Stdout out = HostWrite;
Stdin in   = HostRead;
#else
int FirmwareStdOut(int data)
{
   12c40:	b530      	push	{r4, r5, lr}
   12c42:	b083      	sub	sp, #12
   12c44:	4675      	mov	r5, lr
   12c46:	9001      	str	r0, [sp, #4]
   12c48:	462b      	mov	r3, r5
   12c4a:	4619      	mov	r1, r3
   12c4c:	4809      	ldr	r0, [pc, #36]	; (12c74 <FirmwareStdOut(int)+0x34>)
   12c4e:	f000 f8b5 	bl	12dbc <__cyg_profile_func_enter>
  uart0.Send(static_cast<uint8_t>(data));
   12c52:	9b01      	ldr	r3, [sp, #4]
   12c54:	b2db      	uxtb	r3, r3
   12c56:	4619      	mov	r1, r3
   12c58:	4807      	ldr	r0, [pc, #28]	; (12c78 <FirmwareStdOut(int)+0x38>)
   12c5a:	f7ff f835 	bl	11cc8 <Uart::Send(unsigned char)>
  return 1;
   12c5e:	2401      	movs	r4, #1
   12c60:	462b      	mov	r3, r5
   12c62:	4619      	mov	r1, r3
   12c64:	4803      	ldr	r0, [pc, #12]	; (12c74 <FirmwareStdOut(int)+0x34>)
   12c66:	f000 f8bd 	bl	12de4 <__cyg_profile_func_exit>
   12c6a:	4623      	mov	r3, r4
}
   12c6c:	4618      	mov	r0, r3
   12c6e:	b003      	add	sp, #12
   12c70:	bd30      	pop	{r4, r5, pc}
   12c72:	bf00      	nop
   12c74:	00012c41 	.word	0x00012c41
   12c78:	100000b0 	.word	0x100000b0

00012c7c <_exit>:
  }
  // Dummy implementation of exit with return code placed into
  // Arm register r3
  // NOLINTNEXTLINE(readability-identifier-naming)
  void _exit([[maybe_unused]] int rc)
  {
   12c7c:	b500      	push	{lr}
   12c7e:	b083      	sub	sp, #12
   12c80:	4673      	mov	r3, lr
   12c82:	9001      	str	r0, [sp, #4]
   12c84:	4619      	mov	r1, r3
   12c86:	4802      	ldr	r0, [pc, #8]	; (12c90 <_exit+0x14>)
   12c88:	f000 f898 	bl	12dbc <__cyg_profile_func_enter>
    while (1)
    {
      continue;
   12c8c:	bf00      	nop
    while (1)
   12c8e:	e7fd      	b.n	12c8c <_exit+0x10>
   12c90:	00012c7d 	.word	0x00012c7d

00012c94 <_getpid>:
    }
  }
  // Dummy implementation of getpid
  // NOLINTNEXTLINE(readability-identifier-naming)
  int _getpid()
  {
   12c94:	b538      	push	{r3, r4, r5, lr}
   12c96:	4675      	mov	r5, lr
   12c98:	462b      	mov	r3, r5
   12c9a:	4619      	mov	r1, r3
   12c9c:	4805      	ldr	r0, [pc, #20]	; (12cb4 <_getpid+0x20>)
   12c9e:	f000 f88d 	bl	12dbc <__cyg_profile_func_enter>
    return 1;
   12ca2:	2401      	movs	r4, #1
   12ca4:	462b      	mov	r3, r5
   12ca6:	4619      	mov	r1, r3
   12ca8:	4802      	ldr	r0, [pc, #8]	; (12cb4 <_getpid+0x20>)
   12caa:	f000 f89b 	bl	12de4 <__cyg_profile_func_exit>
   12cae:	4623      	mov	r3, r4
  }
   12cb0:	4618      	mov	r0, r3
   12cb2:	bd38      	pop	{r3, r4, r5, pc}
   12cb4:	00012c95 	.word	0x00012c95

00012cb8 <_kill>:
  // Dummy implementation of kill
  // NOLINTNEXTLINE(readability-identifier-naming)
  int _kill(int, int)
  {
   12cb8:	b530      	push	{r4, r5, lr}
   12cba:	b083      	sub	sp, #12
   12cbc:	4675      	mov	r5, lr
   12cbe:	9001      	str	r0, [sp, #4]
   12cc0:	9100      	str	r1, [sp, #0]
   12cc2:	462b      	mov	r3, r5
   12cc4:	4619      	mov	r1, r3
   12cc6:	4807      	ldr	r0, [pc, #28]	; (12ce4 <_kill+0x2c>)
   12cc8:	f000 f878 	bl	12dbc <__cyg_profile_func_enter>
    return -1;
   12ccc:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   12cd0:	462b      	mov	r3, r5
   12cd2:	4619      	mov	r1, r3
   12cd4:	4803      	ldr	r0, [pc, #12]	; (12ce4 <_kill+0x2c>)
   12cd6:	f000 f885 	bl	12de4 <__cyg_profile_func_exit>
   12cda:	4623      	mov	r3, r4
  }
   12cdc:	4618      	mov	r0, r3
   12cde:	b003      	add	sp, #12
   12ce0:	bd30      	pop	{r4, r5, pc}
   12ce2:	bf00      	nop
   12ce4:	00012cb9 	.word	0x00012cb9

00012ce8 <_putchar>:
    }
    return length;
  }
  // Needed by third party printf library
  void _putchar(char character)  // NOLINT
  {
   12ce8:	b510      	push	{r4, lr}
   12cea:	b082      	sub	sp, #8
   12cec:	4674      	mov	r4, lr
   12cee:	4603      	mov	r3, r0
   12cf0:	f88d 3007 	strb.w	r3, [sp, #7]
   12cf4:	4623      	mov	r3, r4
   12cf6:	4619      	mov	r1, r3
   12cf8:	4808      	ldr	r0, [pc, #32]	; (12d1c <_putchar+0x34>)
   12cfa:	f000 f85f 	bl	12dbc <__cyg_profile_func_enter>
    out(character);
   12cfe:	4b08      	ldr	r3, [pc, #32]	; (12d20 <_putchar+0x38>)
   12d00:	681b      	ldr	r3, [r3, #0]
   12d02:	f89d 2007 	ldrb.w	r2, [sp, #7]
   12d06:	4610      	mov	r0, r2
   12d08:	4798      	blx	r3
   12d0a:	4623      	mov	r3, r4
   12d0c:	4619      	mov	r1, r3
   12d0e:	4803      	ldr	r0, [pc, #12]	; (12d1c <_putchar+0x34>)
   12d10:	f000 f868 	bl	12de4 <__cyg_profile_func_exit>
  }
   12d14:	bf00      	nop
   12d16:	b002      	add	sp, #8
   12d18:	bd10      	pop	{r4, pc}
   12d1a:	bf00      	nop
   12d1c:	00012ce9 	.word	0x00012ce9
   12d20:	100001c0 	.word	0x100001c0

00012d24 <putchar>:

  // Overload default libnano putchar() with a more optimal version that does
  // not use dynamic memory
  int putchar(int character)  // NOLINT
  {
   12d24:	b530      	push	{r4, r5, lr}
   12d26:	b083      	sub	sp, #12
   12d28:	4674      	mov	r4, lr
   12d2a:	9001      	str	r0, [sp, #4]
   12d2c:	4623      	mov	r3, r4
   12d2e:	4619      	mov	r1, r3
   12d30:	4808      	ldr	r0, [pc, #32]	; (12d54 <putchar+0x30>)
   12d32:	f000 f843 	bl	12dbc <__cyg_profile_func_enter>
    return out(character);
   12d36:	4b08      	ldr	r3, [pc, #32]	; (12d58 <putchar+0x34>)
   12d38:	681b      	ldr	r3, [r3, #0]
   12d3a:	9801      	ldr	r0, [sp, #4]
   12d3c:	4798      	blx	r3
   12d3e:	4605      	mov	r5, r0
   12d40:	4623      	mov	r3, r4
   12d42:	4619      	mov	r1, r3
   12d44:	4803      	ldr	r0, [pc, #12]	; (12d54 <putchar+0x30>)
   12d46:	f000 f84d 	bl	12de4 <__cyg_profile_func_exit>
   12d4a:	462b      	mov	r3, r5
  }
   12d4c:	4618      	mov	r0, r3
   12d4e:	b003      	add	sp, #12
   12d50:	bd30      	pop	{r4, r5, pc}
   12d52:	bf00      	nop
   12d54:	00012d25 	.word	0x00012d25
   12d58:	100001c0 	.word	0x100001c0

00012d5c <puts>:

  // Overload default libnano puts() with a more optimal version that does
  // not use dynamic memory
  int puts(const char * str)  // NOLINT
  {
   12d5c:	b530      	push	{r4, r5, lr}
   12d5e:	b085      	sub	sp, #20
   12d60:	4675      	mov	r5, lr
   12d62:	9001      	str	r0, [sp, #4]
   12d64:	462b      	mov	r3, r5
   12d66:	4619      	mov	r1, r3
   12d68:	4812      	ldr	r0, [pc, #72]	; (12db4 <puts+0x58>)
   12d6a:	f000 f827 	bl	12dbc <__cyg_profile_func_enter>
    int i;
    for (i = 0; str[i] != '\0'; i++)
   12d6e:	2300      	movs	r3, #0
   12d70:	9303      	str	r3, [sp, #12]
   12d72:	9b03      	ldr	r3, [sp, #12]
   12d74:	9a01      	ldr	r2, [sp, #4]
   12d76:	4413      	add	r3, r2
   12d78:	781b      	ldrb	r3, [r3, #0]
   12d7a:	2b00      	cmp	r3, #0
   12d7c:	d00b      	beq.n	12d96 <puts+0x3a>
    {
      out(str[i]);
   12d7e:	4b0e      	ldr	r3, [pc, #56]	; (12db8 <puts+0x5c>)
   12d80:	681b      	ldr	r3, [r3, #0]
   12d82:	9a03      	ldr	r2, [sp, #12]
   12d84:	9901      	ldr	r1, [sp, #4]
   12d86:	440a      	add	r2, r1
   12d88:	7812      	ldrb	r2, [r2, #0]
   12d8a:	4610      	mov	r0, r2
   12d8c:	4798      	blx	r3
    for (i = 0; str[i] != '\0'; i++)
   12d8e:	9b03      	ldr	r3, [sp, #12]
   12d90:	3301      	adds	r3, #1
   12d92:	9303      	str	r3, [sp, #12]
   12d94:	e7ed      	b.n	12d72 <puts+0x16>
    }
    out('\n');
   12d96:	4b08      	ldr	r3, [pc, #32]	; (12db8 <puts+0x5c>)
   12d98:	681b      	ldr	r3, [r3, #0]
   12d9a:	200a      	movs	r0, #10
   12d9c:	4798      	blx	r3
    return i;
   12d9e:	9c03      	ldr	r4, [sp, #12]
   12da0:	462b      	mov	r3, r5
   12da2:	4619      	mov	r1, r3
   12da4:	4803      	ldr	r0, [pc, #12]	; (12db4 <puts+0x58>)
   12da6:	f000 f81d 	bl	12de4 <__cyg_profile_func_exit>
   12daa:	4623      	mov	r3, r4
  }
   12dac:	4618      	mov	r0, r3
   12dae:	b005      	add	sp, #20
   12db0:	bd30      	pop	{r4, r5, pc}
   12db2:	bf00      	nop
   12db4:	00012d5d 	.word	0x00012d5d
   12db8:	100001c0 	.word	0x100001c0

00012dbc <__cyg_profile_func_enter>:
  // =============================
  void * stack_trace[config::kBacktraceDepth] = { nullptr };
  size_t stack_depth = 0;

  void __cyg_profile_func_enter(void *, void * call_site)  // NOLINT
  {
   12dbc:	b082      	sub	sp, #8
   12dbe:	9001      	str	r0, [sp, #4]
   12dc0:	9100      	str	r1, [sp, #0]
    stack_trace[stack_depth++] = call_site;
   12dc2:	9a00      	ldr	r2, [sp, #0]
   12dc4:	4b05      	ldr	r3, [pc, #20]	; (12ddc <__cyg_profile_func_enter+0x20>)
   12dc6:	681b      	ldr	r3, [r3, #0]
   12dc8:	1c59      	adds	r1, r3, #1
   12dca:	4804      	ldr	r0, [pc, #16]	; (12ddc <__cyg_profile_func_enter+0x20>)
   12dcc:	6001      	str	r1, [r0, #0]
   12dce:	4904      	ldr	r1, [pc, #16]	; (12de0 <__cyg_profile_func_enter+0x24>)
   12dd0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
   12dd4:	bf00      	nop
   12dd6:	b002      	add	sp, #8
   12dd8:	4770      	bx	lr
   12dda:	bf00      	nop
   12ddc:	100003d8 	.word	0x100003d8
   12de0:	100002d8 	.word	0x100002d8

00012de4 <__cyg_profile_func_exit>:

  void __cyg_profile_func_exit(void *, void *)  // NOLINT
  {
   12de4:	b082      	sub	sp, #8
   12de6:	9001      	str	r0, [sp, #4]
   12de8:	9100      	str	r1, [sp, #0]
    stack_depth--;
   12dea:	4b04      	ldr	r3, [pc, #16]	; (12dfc <__cyg_profile_func_exit+0x18>)
   12dec:	681b      	ldr	r3, [r3, #0]
   12dee:	3b01      	subs	r3, #1
   12df0:	4a02      	ldr	r2, [pc, #8]	; (12dfc <__cyg_profile_func_exit+0x18>)
   12df2:	6013      	str	r3, [r2, #0]
  }
   12df4:	bf00      	nop
   12df6:	b002      	add	sp, #8
   12df8:	4770      	bx	lr
   12dfa:	bf00      	nop
   12dfc:	100003d8 	.word	0x100003d8

00012e00 <GetStackTrace()>:
}

void ** GetStackTrace()
{
   12e00:	b538      	push	{r3, r4, r5, lr}
   12e02:	4675      	mov	r5, lr
   12e04:	462b      	mov	r3, r5
   12e06:	4619      	mov	r1, r3
   12e08:	4805      	ldr	r0, [pc, #20]	; (12e20 <GetStackTrace()+0x20>)
   12e0a:	f7ff ffd7 	bl	12dbc <__cyg_profile_func_enter>
  return stack_trace;
   12e0e:	4c05      	ldr	r4, [pc, #20]	; (12e24 <GetStackTrace()+0x24>)
   12e10:	462b      	mov	r3, r5
   12e12:	4619      	mov	r1, r3
   12e14:	4802      	ldr	r0, [pc, #8]	; (12e20 <GetStackTrace()+0x20>)
   12e16:	f7ff ffe5 	bl	12de4 <__cyg_profile_func_exit>
   12e1a:	4623      	mov	r3, r4
}
   12e1c:	4618      	mov	r0, r3
   12e1e:	bd38      	pop	{r3, r4, r5, pc}
   12e20:	00012e01 	.word	0x00012e01
   12e24:	100002d8 	.word	0x100002d8

00012e28 <GetStackDepth()>:

size_t GetStackDepth()
{
   12e28:	b538      	push	{r3, r4, r5, lr}
   12e2a:	4675      	mov	r5, lr
   12e2c:	462b      	mov	r3, r5
   12e2e:	4619      	mov	r1, r3
   12e30:	4806      	ldr	r0, [pc, #24]	; (12e4c <GetStackDepth()+0x24>)
   12e32:	f7ff ffc3 	bl	12dbc <__cyg_profile_func_enter>
  return stack_depth;
   12e36:	4b06      	ldr	r3, [pc, #24]	; (12e50 <GetStackDepth()+0x28>)
   12e38:	681c      	ldr	r4, [r3, #0]
   12e3a:	462b      	mov	r3, r5
   12e3c:	4619      	mov	r1, r3
   12e3e:	4803      	ldr	r0, [pc, #12]	; (12e4c <GetStackDepth()+0x24>)
   12e40:	f7ff ffd0 	bl	12de4 <__cyg_profile_func_exit>
   12e44:	4623      	mov	r3, r4
}
   12e46:	4618      	mov	r0, r3
   12e48:	bd38      	pop	{r3, r4, r5, pc}
   12e4a:	bf00      	nop
   12e4c:	00012e29 	.word	0x00012e29
   12e50:	100003d8 	.word	0x100003d8

00012e54 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
   12e54:	b510      	push	{r4, lr}
   12e56:	b084      	sub	sp, #16
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
   12e58:	4b29      	ldr	r3, [pc, #164]	; (12f00 <vTaskSwitchContext+0xac>)
   12e5a:	681b      	ldr	r3, [r3, #0]
   12e5c:	2b00      	cmp	r3, #0
   12e5e:	d003      	beq.n	12e68 <vTaskSwitchContext+0x14>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
   12e60:	4b28      	ldr	r3, [pc, #160]	; (12f04 <vTaskSwitchContext+0xb0>)
   12e62:	2201      	movs	r2, #1
   12e64:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
   12e66:	e047      	b.n	12ef8 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
   12e68:	4b26      	ldr	r3, [pc, #152]	; (12f04 <vTaskSwitchContext+0xb0>)
   12e6a:	2200      	movs	r2, #0
   12e6c:	601a      	str	r2, [r3, #0]
					ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
   12e6e:	f7ff fa8d 	bl	1238c <UptimeRTOS>
   12e72:	4603      	mov	r3, r0
   12e74:	460c      	mov	r4, r1
   12e76:	461a      	mov	r2, r3
   12e78:	4b23      	ldr	r3, [pc, #140]	; (12f08 <vTaskSwitchContext+0xb4>)
   12e7a:	601a      	str	r2, [r3, #0]
				if( ulTotalRunTime > ulTaskSwitchedInTime )
   12e7c:	4b22      	ldr	r3, [pc, #136]	; (12f08 <vTaskSwitchContext+0xb4>)
   12e7e:	681a      	ldr	r2, [r3, #0]
   12e80:	4b22      	ldr	r3, [pc, #136]	; (12f0c <vTaskSwitchContext+0xb8>)
   12e82:	681b      	ldr	r3, [r3, #0]
   12e84:	429a      	cmp	r2, r3
   12e86:	d909      	bls.n	12e9c <vTaskSwitchContext+0x48>
					pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
   12e88:	4b21      	ldr	r3, [pc, #132]	; (12f10 <vTaskSwitchContext+0xbc>)
   12e8a:	681b      	ldr	r3, [r3, #0]
   12e8c:	6d59      	ldr	r1, [r3, #84]	; 0x54
   12e8e:	4a1e      	ldr	r2, [pc, #120]	; (12f08 <vTaskSwitchContext+0xb4>)
   12e90:	6810      	ldr	r0, [r2, #0]
   12e92:	4a1e      	ldr	r2, [pc, #120]	; (12f0c <vTaskSwitchContext+0xb8>)
   12e94:	6812      	ldr	r2, [r2, #0]
   12e96:	1a82      	subs	r2, r0, r2
   12e98:	440a      	add	r2, r1
   12e9a:	655a      	str	r2, [r3, #84]	; 0x54
				ulTaskSwitchedInTime = ulTotalRunTime;
   12e9c:	4b1a      	ldr	r3, [pc, #104]	; (12f08 <vTaskSwitchContext+0xb4>)
   12e9e:	681b      	ldr	r3, [r3, #0]
   12ea0:	4a1a      	ldr	r2, [pc, #104]	; (12f0c <vTaskSwitchContext+0xb8>)
   12ea2:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
   12ea4:	4b1b      	ldr	r3, [pc, #108]	; (12f14 <vTaskSwitchContext+0xc0>)
   12ea6:	681b      	ldr	r3, [r3, #0]
   12ea8:	9301      	str	r3, [sp, #4]
	/* Generic helper function. */
	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitmap )
	{
	uint8_t ucReturn;

		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
   12eaa:	9b01      	ldr	r3, [sp, #4]
   12eac:	fab3 f383 	clz	r3, r3
   12eb0:	f88d 3003 	strb.w	r3, [sp, #3]
		return ucReturn;
   12eb4:	f89d 3003 	ldrb.w	r3, [sp, #3]
   12eb8:	f1c3 031f 	rsb	r3, r3, #31
   12ebc:	9303      	str	r3, [sp, #12]
   12ebe:	9a03      	ldr	r2, [sp, #12]
   12ec0:	4613      	mov	r3, r2
   12ec2:	009b      	lsls	r3, r3, #2
   12ec4:	4413      	add	r3, r2
   12ec6:	009b      	lsls	r3, r3, #2
   12ec8:	4a13      	ldr	r2, [pc, #76]	; (12f18 <vTaskSwitchContext+0xc4>)
   12eca:	4413      	add	r3, r2
   12ecc:	9302      	str	r3, [sp, #8]
   12ece:	9b02      	ldr	r3, [sp, #8]
   12ed0:	685b      	ldr	r3, [r3, #4]
   12ed2:	685a      	ldr	r2, [r3, #4]
   12ed4:	9b02      	ldr	r3, [sp, #8]
   12ed6:	605a      	str	r2, [r3, #4]
   12ed8:	9b02      	ldr	r3, [sp, #8]
   12eda:	685a      	ldr	r2, [r3, #4]
   12edc:	9b02      	ldr	r3, [sp, #8]
   12ede:	3308      	adds	r3, #8
   12ee0:	429a      	cmp	r2, r3
   12ee2:	d104      	bne.n	12eee <vTaskSwitchContext+0x9a>
   12ee4:	9b02      	ldr	r3, [sp, #8]
   12ee6:	685b      	ldr	r3, [r3, #4]
   12ee8:	685a      	ldr	r2, [r3, #4]
   12eea:	9b02      	ldr	r3, [sp, #8]
   12eec:	605a      	str	r2, [r3, #4]
   12eee:	9b02      	ldr	r3, [sp, #8]
   12ef0:	685b      	ldr	r3, [r3, #4]
   12ef2:	68db      	ldr	r3, [r3, #12]
   12ef4:	4a06      	ldr	r2, [pc, #24]	; (12f10 <vTaskSwitchContext+0xbc>)
   12ef6:	6013      	str	r3, [r2, #0]
}
   12ef8:	bf00      	nop
   12efa:	b004      	add	sp, #16
   12efc:	bd10      	pop	{r4, pc}
   12efe:	bf00      	nop
   12f00:	1000044c 	.word	0x1000044c
   12f04:	10000448 	.word	0x10000448
   12f08:	10000454 	.word	0x10000454
   12f0c:	10000450 	.word	0x10000450
   12f10:	100003dc 	.word	0x100003dc
   12f14:	10000444 	.word	0x10000444
   12f18:	100003e0 	.word	0x100003e0
   12f1c:	ffffffff 	.word	0xffffffff

00012f20 <vPortSVCHandler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
   12f20:	4b07      	ldr	r3, [pc, #28]	; (12f40 <pxCurrentTCBConst2>)
   12f22:	6819      	ldr	r1, [r3, #0]
   12f24:	6808      	ldr	r0, [r1, #0]
   12f26:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12f2a:	f380 8809 	msr	PSP, r0
   12f2e:	f3bf 8f6f 	isb	sy
   12f32:	f04f 0000 	mov.w	r0, #0
   12f36:	f380 8811 	msr	BASEPRI, r0
   12f3a:	4770      	bx	lr
   12f3c:	f3af 8000 	nop.w

00012f40 <pxCurrentTCBConst2>:
   12f40:	100003dc 	.word	0x100003dc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
   12f44:	bf00      	nop
   12f46:	bf00      	nop
   12f48:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   12f4c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

00012f50 <xPortPendSVHandler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
   12f50:	f3ef 8009 	mrs	r0, PSP
   12f54:	f3bf 8f6f 	isb	sy
   12f58:	4b15      	ldr	r3, [pc, #84]	; (12fb0 <pxCurrentTCBConst>)
   12f5a:	681a      	ldr	r2, [r3, #0]
   12f5c:	f01e 0f10 	tst.w	lr, #16
   12f60:	bf08      	it	eq
   12f62:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
   12f66:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12f6a:	6010      	str	r0, [r2, #0]
   12f6c:	e92d 0009 	stmdb	sp!, {r0, r3}
   12f70:	f04f 0028 	mov.w	r0, #40	; 0x28
   12f74:	f380 8811 	msr	BASEPRI, r0
   12f78:	f3bf 8f4f 	dsb	sy
   12f7c:	f3bf 8f6f 	isb	sy
   12f80:	f7ff ff68 	bl	12e54 <vTaskSwitchContext>
   12f84:	f04f 0000 	mov.w	r0, #0
   12f88:	f380 8811 	msr	BASEPRI, r0
   12f8c:	bc09      	pop	{r0, r3}
   12f8e:	6819      	ldr	r1, [r3, #0]
   12f90:	6808      	ldr	r0, [r1, #0]
   12f92:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12f96:	f01e 0f10 	tst.w	lr, #16
   12f9a:	bf08      	it	eq
   12f9c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
   12fa0:	f380 8809 	msr	PSP, r0
   12fa4:	f3bf 8f6f 	isb	sy
   12fa8:	4770      	bx	lr
   12faa:	bf00      	nop
   12fac:	f3af 8000 	nop.w

00012fb0 <pxCurrentTCBConst>:
   12fb0:	100003dc 	.word	0x100003dc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
   12fb4:	bf00      	nop
   12fb6:	bf00      	nop

00012fb8 <_out_null(char, void*, unsigned int, unsigned int)>:
}


// internal null output
static inline void _out_null(char character, void* buffer, size_t idx, size_t maxlen)
{
   12fb8:	b510      	push	{r4, lr}
   12fba:	b084      	sub	sp, #16
   12fbc:	4674      	mov	r4, lr
   12fbe:	9102      	str	r1, [sp, #8]
   12fc0:	9201      	str	r2, [sp, #4]
   12fc2:	9300      	str	r3, [sp, #0]
   12fc4:	4603      	mov	r3, r0
   12fc6:	f88d 300f 	strb.w	r3, [sp, #15]
   12fca:	4623      	mov	r3, r4
   12fcc:	4619      	mov	r1, r3
   12fce:	4805      	ldr	r0, [pc, #20]	; (12fe4 <_out_null(char, void*, unsigned int, unsigned int)+0x2c>)
   12fd0:	f7ff fef4 	bl	12dbc <__cyg_profile_func_enter>
   12fd4:	4623      	mov	r3, r4
   12fd6:	4619      	mov	r1, r3
   12fd8:	4802      	ldr	r0, [pc, #8]	; (12fe4 <_out_null(char, void*, unsigned int, unsigned int)+0x2c>)
   12fda:	f7ff ff03 	bl	12de4 <__cyg_profile_func_exit>
  (void)character; (void)buffer; (void)idx; (void)maxlen;
}
   12fde:	bf00      	nop
   12fe0:	b004      	add	sp, #16
   12fe2:	bd10      	pop	{r4, pc}
   12fe4:	00012fb9 	.word	0x00012fb9

00012fe8 <_out_char(char, void*, unsigned int, unsigned int)>:


// internal _putchar wrapper
static inline void _out_char(char character, void* buffer, size_t idx, size_t maxlen)
{
   12fe8:	b510      	push	{r4, lr}
   12fea:	b084      	sub	sp, #16
   12fec:	4674      	mov	r4, lr
   12fee:	9102      	str	r1, [sp, #8]
   12ff0:	9201      	str	r2, [sp, #4]
   12ff2:	9300      	str	r3, [sp, #0]
   12ff4:	4603      	mov	r3, r0
   12ff6:	f88d 300f 	strb.w	r3, [sp, #15]
   12ffa:	4623      	mov	r3, r4
   12ffc:	4619      	mov	r1, r3
   12ffe:	480a      	ldr	r0, [pc, #40]	; (13028 <_out_char(char, void*, unsigned int, unsigned int)+0x40>)
   13000:	f7ff fedc 	bl	12dbc <__cyg_profile_func_enter>
  (void)buffer; (void)idx; (void)maxlen;
  if (character) {
   13004:	f89d 300f 	ldrb.w	r3, [sp, #15]
   13008:	2b00      	cmp	r3, #0
   1300a:	d004      	beq.n	13016 <_out_char(char, void*, unsigned int, unsigned int)+0x2e>
    _putchar(character);
   1300c:	f89d 300f 	ldrb.w	r3, [sp, #15]
   13010:	4618      	mov	r0, r3
   13012:	f7ff fe69 	bl	12ce8 <_putchar>
   13016:	4623      	mov	r3, r4
   13018:	4619      	mov	r1, r3
   1301a:	4803      	ldr	r0, [pc, #12]	; (13028 <_out_char(char, void*, unsigned int, unsigned int)+0x40>)
   1301c:	f7ff fee2 	bl	12de4 <__cyg_profile_func_exit>
  }
}
   13020:	bf00      	nop
   13022:	b004      	add	sp, #16
   13024:	bd10      	pop	{r4, pc}
   13026:	bf00      	nop
   13028:	00012fe9 	.word	0x00012fe9

0001302c <_strlen(char const*)>:


// internal strlen
// \return The length of the string (excluding the terminating 0)
static inline unsigned int _strlen(const char* str)
{
   1302c:	b530      	push	{r4, r5, lr}
   1302e:	b085      	sub	sp, #20
   13030:	4674      	mov	r4, lr
   13032:	9001      	str	r0, [sp, #4]
   13034:	4623      	mov	r3, r4
   13036:	4619      	mov	r1, r3
   13038:	480c      	ldr	r0, [pc, #48]	; (1306c <_strlen(char const*)+0x40>)
   1303a:	f7ff febf 	bl	12dbc <__cyg_profile_func_enter>
  const char* s;
  for (s = str; *s; ++s);
   1303e:	9b01      	ldr	r3, [sp, #4]
   13040:	9303      	str	r3, [sp, #12]
   13042:	9b03      	ldr	r3, [sp, #12]
   13044:	781b      	ldrb	r3, [r3, #0]
   13046:	2b00      	cmp	r3, #0
   13048:	d003      	beq.n	13052 <_strlen(char const*)+0x26>
   1304a:	9b03      	ldr	r3, [sp, #12]
   1304c:	3301      	adds	r3, #1
   1304e:	9303      	str	r3, [sp, #12]
   13050:	e7f7      	b.n	13042 <_strlen(char const*)+0x16>
  return (unsigned int)(s - str);
   13052:	9a03      	ldr	r2, [sp, #12]
   13054:	9b01      	ldr	r3, [sp, #4]
   13056:	1ad3      	subs	r3, r2, r3
   13058:	461d      	mov	r5, r3
   1305a:	4623      	mov	r3, r4
   1305c:	4619      	mov	r1, r3
   1305e:	4803      	ldr	r0, [pc, #12]	; (1306c <_strlen(char const*)+0x40>)
   13060:	f7ff fec0 	bl	12de4 <__cyg_profile_func_exit>
   13064:	462b      	mov	r3, r5
}
   13066:	4618      	mov	r0, r3
   13068:	b005      	add	sp, #20
   1306a:	bd30      	pop	{r4, r5, pc}
   1306c:	0001302d 	.word	0x0001302d

00013070 <_is_digit(char)>:


// internal test if char is a digit (0-9)
// \return true if char is a digit
static inline bool _is_digit(char ch)
{
   13070:	b530      	push	{r4, r5, lr}
   13072:	b083      	sub	sp, #12
   13074:	4675      	mov	r5, lr
   13076:	4603      	mov	r3, r0
   13078:	f88d 3007 	strb.w	r3, [sp, #7]
   1307c:	462b      	mov	r3, r5
   1307e:	4619      	mov	r1, r3
   13080:	480b      	ldr	r0, [pc, #44]	; (130b0 <_is_digit(char)+0x40>)
   13082:	f7ff fe9b 	bl	12dbc <__cyg_profile_func_enter>
  return (ch >= '0') && (ch <= '9');
   13086:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1308a:	2b2f      	cmp	r3, #47	; 0x2f
   1308c:	d905      	bls.n	1309a <_is_digit(char)+0x2a>
   1308e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   13092:	2b39      	cmp	r3, #57	; 0x39
   13094:	d801      	bhi.n	1309a <_is_digit(char)+0x2a>
   13096:	2401      	movs	r4, #1
   13098:	e000      	b.n	1309c <_is_digit(char)+0x2c>
   1309a:	2400      	movs	r4, #0
   1309c:	462b      	mov	r3, r5
   1309e:	4619      	mov	r1, r3
   130a0:	4803      	ldr	r0, [pc, #12]	; (130b0 <_is_digit(char)+0x40>)
   130a2:	f7ff fe9f 	bl	12de4 <__cyg_profile_func_exit>
   130a6:	4623      	mov	r3, r4
}
   130a8:	4618      	mov	r0, r3
   130aa:	b003      	add	sp, #12
   130ac:	bd30      	pop	{r4, r5, pc}
   130ae:	bf00      	nop
   130b0:	00013071 	.word	0x00013071

000130b4 <_atoi(char const**)>:


// internal ASCII string to unsigned int conversion
static unsigned int _atoi(const char** str)
{
   130b4:	b530      	push	{r4, r5, lr}
   130b6:	b085      	sub	sp, #20
   130b8:	4675      	mov	r5, lr
   130ba:	9001      	str	r0, [sp, #4]
   130bc:	462b      	mov	r3, r5
   130be:	4619      	mov	r1, r3
   130c0:	4813      	ldr	r0, [pc, #76]	; (13110 <_atoi(char const**)+0x5c>)
   130c2:	f7ff fe7b 	bl	12dbc <__cyg_profile_func_enter>
  unsigned int i = 0U;
   130c6:	2300      	movs	r3, #0
   130c8:	9303      	str	r3, [sp, #12]
  while (_is_digit(**str)) {
   130ca:	9b01      	ldr	r3, [sp, #4]
   130cc:	681b      	ldr	r3, [r3, #0]
   130ce:	781b      	ldrb	r3, [r3, #0]
   130d0:	4618      	mov	r0, r3
   130d2:	f7ff ffcd 	bl	13070 <_is_digit(char)>
   130d6:	4603      	mov	r3, r0
   130d8:	2b00      	cmp	r3, #0
   130da:	d00f      	beq.n	130fc <_atoi(char const**)+0x48>
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
   130dc:	9a03      	ldr	r2, [sp, #12]
   130de:	4613      	mov	r3, r2
   130e0:	009b      	lsls	r3, r3, #2
   130e2:	4413      	add	r3, r2
   130e4:	005b      	lsls	r3, r3, #1
   130e6:	4618      	mov	r0, r3
   130e8:	9b01      	ldr	r3, [sp, #4]
   130ea:	681b      	ldr	r3, [r3, #0]
   130ec:	1c59      	adds	r1, r3, #1
   130ee:	9a01      	ldr	r2, [sp, #4]
   130f0:	6011      	str	r1, [r2, #0]
   130f2:	781b      	ldrb	r3, [r3, #0]
   130f4:	4403      	add	r3, r0
   130f6:	3b30      	subs	r3, #48	; 0x30
   130f8:	9303      	str	r3, [sp, #12]
  while (_is_digit(**str)) {
   130fa:	e7e6      	b.n	130ca <_atoi(char const**)+0x16>
  }
  return i;
   130fc:	9c03      	ldr	r4, [sp, #12]
   130fe:	462b      	mov	r3, r5
   13100:	4619      	mov	r1, r3
   13102:	4803      	ldr	r0, [pc, #12]	; (13110 <_atoi(char const**)+0x5c>)
   13104:	f7ff fe6e 	bl	12de4 <__cyg_profile_func_exit>
   13108:	4623      	mov	r3, r4
}
   1310a:	4618      	mov	r0, r3
   1310c:	b005      	add	sp, #20
   1310e:	bd30      	pop	{r4, r5, pc}
   13110:	000130b5 	.word	0x000130b5

00013114 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)>:


// internal itoa format
static size_t _ntoa_format(out_fct_type out, char* buffer, size_t idx, size_t maxlen, char* buf, size_t len, bool negative, unsigned int base, unsigned int prec, unsigned int width, unsigned int flags)
{
   13114:	b530      	push	{r4, r5, lr}
   13116:	b089      	sub	sp, #36	; 0x24
   13118:	4675      	mov	r5, lr
   1311a:	9003      	str	r0, [sp, #12]
   1311c:	9102      	str	r1, [sp, #8]
   1311e:	9201      	str	r2, [sp, #4]
   13120:	9300      	str	r3, [sp, #0]
   13122:	462b      	mov	r3, r5
   13124:	4619      	mov	r1, r3
   13126:	4891      	ldr	r0, [pc, #580]	; (1336c <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x258>)
   13128:	f7ff fe48 	bl	12dbc <__cyg_profile_func_enter>
  const size_t start_idx = idx;
   1312c:	9b01      	ldr	r3, [sp, #4]
   1312e:	9305      	str	r3, [sp, #20]

  // pad leading zeros
  while (!(flags & FLAGS_LEFT) && (len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
   13130:	9b12      	ldr	r3, [sp, #72]	; 0x48
   13132:	f003 0302 	and.w	r3, r3, #2
   13136:	2b00      	cmp	r3, #0
   13138:	d10e      	bne.n	13158 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x44>
   1313a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   1313c:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1313e:	429a      	cmp	r2, r3
   13140:	d20a      	bcs.n	13158 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x44>
   13142:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   13144:	2b1f      	cmp	r3, #31
   13146:	d807      	bhi.n	13158 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x44>
    buf[len++] = '0';
   13148:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1314a:	1c5a      	adds	r2, r3, #1
   1314c:	920d      	str	r2, [sp, #52]	; 0x34
   1314e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   13150:	4413      	add	r3, r2
   13152:	2230      	movs	r2, #48	; 0x30
   13154:	701a      	strb	r2, [r3, #0]
  while (!(flags & FLAGS_LEFT) && (len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
   13156:	e7eb      	b.n	13130 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1c>
  }
  while (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
   13158:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1315a:	f003 0302 	and.w	r3, r3, #2
   1315e:	2b00      	cmp	r3, #0
   13160:	d113      	bne.n	1318a <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x76>
   13162:	9b12      	ldr	r3, [sp, #72]	; 0x48
   13164:	f003 0301 	and.w	r3, r3, #1
   13168:	2b00      	cmp	r3, #0
   1316a:	d00e      	beq.n	1318a <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x76>
   1316c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   1316e:	9b11      	ldr	r3, [sp, #68]	; 0x44
   13170:	429a      	cmp	r2, r3
   13172:	d20a      	bcs.n	1318a <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x76>
   13174:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   13176:	2b1f      	cmp	r3, #31
   13178:	d807      	bhi.n	1318a <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x76>
    buf[len++] = '0';
   1317a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1317c:	1c5a      	adds	r2, r3, #1
   1317e:	920d      	str	r2, [sp, #52]	; 0x34
   13180:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   13182:	4413      	add	r3, r2
   13184:	2230      	movs	r2, #48	; 0x30
   13186:	701a      	strb	r2, [r3, #0]
  while (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
   13188:	e7e6      	b.n	13158 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x44>
  }

  // handle hash
  if (flags & FLAGS_HASH) {
   1318a:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1318c:	f003 0310 	and.w	r3, r3, #16
   13190:	2b00      	cmp	r3, #0
   13192:	d058      	beq.n	13246 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x132>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
   13194:	9b12      	ldr	r3, [sp, #72]	; 0x48
   13196:	f403 6380 	and.w	r3, r3, #1024	; 0x400
   1319a:	2b00      	cmp	r3, #0
   1319c:	d116      	bne.n	131cc <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xb8>
   1319e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   131a0:	2b00      	cmp	r3, #0
   131a2:	d013      	beq.n	131cc <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xb8>
   131a4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   131a6:	9b10      	ldr	r3, [sp, #64]	; 0x40
   131a8:	429a      	cmp	r2, r3
   131aa:	d003      	beq.n	131b4 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xa0>
   131ac:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   131ae:	9b11      	ldr	r3, [sp, #68]	; 0x44
   131b0:	429a      	cmp	r2, r3
   131b2:	d10b      	bne.n	131cc <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xb8>
      len--;
   131b4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   131b6:	3b01      	subs	r3, #1
   131b8:	930d      	str	r3, [sp, #52]	; 0x34
      if (len && (base == 16U)) {
   131ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   131bc:	2b00      	cmp	r3, #0
   131be:	d005      	beq.n	131cc <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xb8>
   131c0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   131c2:	2b10      	cmp	r3, #16
   131c4:	d102      	bne.n	131cc <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xb8>
        len--;
   131c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   131c8:	3b01      	subs	r3, #1
   131ca:	930d      	str	r3, [sp, #52]	; 0x34
      }
    }
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
   131cc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   131ce:	2b10      	cmp	r3, #16
   131d0:	d10f      	bne.n	131f2 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xde>
   131d2:	9b12      	ldr	r3, [sp, #72]	; 0x48
   131d4:	f003 0320 	and.w	r3, r3, #32
   131d8:	2b00      	cmp	r3, #0
   131da:	d10a      	bne.n	131f2 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xde>
   131dc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   131de:	2b1f      	cmp	r3, #31
   131e0:	d807      	bhi.n	131f2 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xde>
      buf[len++] = 'x';
   131e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   131e4:	1c5a      	adds	r2, r3, #1
   131e6:	920d      	str	r2, [sp, #52]	; 0x34
   131e8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   131ea:	4413      	add	r3, r2
   131ec:	2278      	movs	r2, #120	; 0x78
   131ee:	701a      	strb	r2, [r3, #0]
   131f0:	e01f      	b.n	13232 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x11e>
    }
    else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
   131f2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   131f4:	2b10      	cmp	r3, #16
   131f6:	d10f      	bne.n	13218 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x104>
   131f8:	9b12      	ldr	r3, [sp, #72]	; 0x48
   131fa:	f003 0320 	and.w	r3, r3, #32
   131fe:	2b00      	cmp	r3, #0
   13200:	d00a      	beq.n	13218 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x104>
   13202:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   13204:	2b1f      	cmp	r3, #31
   13206:	d807      	bhi.n	13218 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x104>
      buf[len++] = 'X';
   13208:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1320a:	1c5a      	adds	r2, r3, #1
   1320c:	920d      	str	r2, [sp, #52]	; 0x34
   1320e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   13210:	4413      	add	r3, r2
   13212:	2258      	movs	r2, #88	; 0x58
   13214:	701a      	strb	r2, [r3, #0]
   13216:	e00c      	b.n	13232 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x11e>
    }
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
   13218:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1321a:	2b02      	cmp	r3, #2
   1321c:	d109      	bne.n	13232 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x11e>
   1321e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   13220:	2b1f      	cmp	r3, #31
   13222:	d806      	bhi.n	13232 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x11e>
      buf[len++] = 'b';
   13224:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   13226:	1c5a      	adds	r2, r3, #1
   13228:	920d      	str	r2, [sp, #52]	; 0x34
   1322a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1322c:	4413      	add	r3, r2
   1322e:	2262      	movs	r2, #98	; 0x62
   13230:	701a      	strb	r2, [r3, #0]
    }
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
   13232:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   13234:	2b1f      	cmp	r3, #31
   13236:	d806      	bhi.n	13246 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x132>
      buf[len++] = '0';
   13238:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1323a:	1c5a      	adds	r2, r3, #1
   1323c:	920d      	str	r2, [sp, #52]	; 0x34
   1323e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   13240:	4413      	add	r3, r2
   13242:	2230      	movs	r2, #48	; 0x30
   13244:	701a      	strb	r2, [r3, #0]
    }
  }

  // handle sign
  if (len && (len == width) && (negative || (flags & FLAGS_PLUS) || (flags & FLAGS_SPACE))) {
   13246:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   13248:	2b00      	cmp	r3, #0
   1324a:	d014      	beq.n	13276 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x162>
   1324c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   1324e:	9b11      	ldr	r3, [sp, #68]	; 0x44
   13250:	429a      	cmp	r2, r3
   13252:	d110      	bne.n	13276 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x162>
   13254:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
   13258:	2b00      	cmp	r3, #0
   1325a:	d109      	bne.n	13270 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x15c>
   1325c:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1325e:	f003 0304 	and.w	r3, r3, #4
   13262:	2b00      	cmp	r3, #0
   13264:	d104      	bne.n	13270 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x15c>
   13266:	9b12      	ldr	r3, [sp, #72]	; 0x48
   13268:	f003 0308 	and.w	r3, r3, #8
   1326c:	2b00      	cmp	r3, #0
   1326e:	d002      	beq.n	13276 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x162>
    len--;
   13270:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   13272:	3b01      	subs	r3, #1
   13274:	930d      	str	r3, [sp, #52]	; 0x34
  }
  if (len < PRINTF_NTOA_BUFFER_SIZE) {
   13276:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   13278:	2b1f      	cmp	r3, #31
   1327a:	d824      	bhi.n	132c6 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1b2>
    if (negative) {
   1327c:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
   13280:	2b00      	cmp	r3, #0
   13282:	d007      	beq.n	13294 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x180>
      buf[len++] = '-';
   13284:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   13286:	1c5a      	adds	r2, r3, #1
   13288:	920d      	str	r2, [sp, #52]	; 0x34
   1328a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1328c:	4413      	add	r3, r2
   1328e:	222d      	movs	r2, #45	; 0x2d
   13290:	701a      	strb	r2, [r3, #0]
   13292:	e018      	b.n	132c6 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1b2>
    }
    else if (flags & FLAGS_PLUS) {
   13294:	9b12      	ldr	r3, [sp, #72]	; 0x48
   13296:	f003 0304 	and.w	r3, r3, #4
   1329a:	2b00      	cmp	r3, #0
   1329c:	d007      	beq.n	132ae <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x19a>
      buf[len++] = '+';  // ignore the space if the '+' exists
   1329e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   132a0:	1c5a      	adds	r2, r3, #1
   132a2:	920d      	str	r2, [sp, #52]	; 0x34
   132a4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   132a6:	4413      	add	r3, r2
   132a8:	222b      	movs	r2, #43	; 0x2b
   132aa:	701a      	strb	r2, [r3, #0]
   132ac:	e00b      	b.n	132c6 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1b2>
    }
    else if (flags & FLAGS_SPACE) {
   132ae:	9b12      	ldr	r3, [sp, #72]	; 0x48
   132b0:	f003 0308 	and.w	r3, r3, #8
   132b4:	2b00      	cmp	r3, #0
   132b6:	d006      	beq.n	132c6 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1b2>
      buf[len++] = ' ';
   132b8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   132ba:	1c5a      	adds	r2, r3, #1
   132bc:	920d      	str	r2, [sp, #52]	; 0x34
   132be:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   132c0:	4413      	add	r3, r2
   132c2:	2220      	movs	r2, #32
   132c4:	701a      	strb	r2, [r3, #0]
    }
  }

  // pad spaces up to given width
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
   132c6:	9b12      	ldr	r3, [sp, #72]	; 0x48
   132c8:	f003 0302 	and.w	r3, r3, #2
   132cc:	2b00      	cmp	r3, #0
   132ce:	d116      	bne.n	132fe <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1ea>
   132d0:	9b12      	ldr	r3, [sp, #72]	; 0x48
   132d2:	f003 0301 	and.w	r3, r3, #1
   132d6:	2b00      	cmp	r3, #0
   132d8:	d111      	bne.n	132fe <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1ea>
    for (size_t i = len; i < width; i++) {
   132da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   132dc:	9307      	str	r3, [sp, #28]
   132de:	9a07      	ldr	r2, [sp, #28]
   132e0:	9b11      	ldr	r3, [sp, #68]	; 0x44
   132e2:	429a      	cmp	r2, r3
   132e4:	d20b      	bcs.n	132fe <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1ea>
      out(' ', buffer, idx++, maxlen);
   132e6:	9a01      	ldr	r2, [sp, #4]
   132e8:	1c53      	adds	r3, r2, #1
   132ea:	9301      	str	r3, [sp, #4]
   132ec:	9c03      	ldr	r4, [sp, #12]
   132ee:	9b00      	ldr	r3, [sp, #0]
   132f0:	9902      	ldr	r1, [sp, #8]
   132f2:	2020      	movs	r0, #32
   132f4:	47a0      	blx	r4
    for (size_t i = len; i < width; i++) {
   132f6:	9b07      	ldr	r3, [sp, #28]
   132f8:	3301      	adds	r3, #1
   132fa:	9307      	str	r3, [sp, #28]
   132fc:	e7ef      	b.n	132de <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1ca>
    }
  }

  // reverse string
  for (size_t i = 0U; i < len; i++) {
   132fe:	2300      	movs	r3, #0
   13300:	9306      	str	r3, [sp, #24]
   13302:	9a06      	ldr	r2, [sp, #24]
   13304:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   13306:	429a      	cmp	r2, r3
   13308:	d211      	bcs.n	1332e <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x21a>
    out(buf[len - i - 1U], buffer, idx++, maxlen);
   1330a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   1330c:	9b06      	ldr	r3, [sp, #24]
   1330e:	1ad3      	subs	r3, r2, r3
   13310:	3b01      	subs	r3, #1
   13312:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   13314:	4413      	add	r3, r2
   13316:	7818      	ldrb	r0, [r3, #0]
   13318:	9a01      	ldr	r2, [sp, #4]
   1331a:	1c53      	adds	r3, r2, #1
   1331c:	9301      	str	r3, [sp, #4]
   1331e:	9c03      	ldr	r4, [sp, #12]
   13320:	9b00      	ldr	r3, [sp, #0]
   13322:	9902      	ldr	r1, [sp, #8]
   13324:	47a0      	blx	r4
  for (size_t i = 0U; i < len; i++) {
   13326:	9b06      	ldr	r3, [sp, #24]
   13328:	3301      	adds	r3, #1
   1332a:	9306      	str	r3, [sp, #24]
   1332c:	e7e9      	b.n	13302 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1ee>
  }

  // append pad spaces up to given width
  if (flags & FLAGS_LEFT) {
   1332e:	9b12      	ldr	r3, [sp, #72]	; 0x48
   13330:	f003 0302 	and.w	r3, r3, #2
   13334:	2b00      	cmp	r3, #0
   13336:	d00e      	beq.n	13356 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x242>
    while (idx - start_idx < width) {
   13338:	9a01      	ldr	r2, [sp, #4]
   1333a:	9b05      	ldr	r3, [sp, #20]
   1333c:	1ad3      	subs	r3, r2, r3
   1333e:	9a11      	ldr	r2, [sp, #68]	; 0x44
   13340:	429a      	cmp	r2, r3
   13342:	d908      	bls.n	13356 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x242>
      out(' ', buffer, idx++, maxlen);
   13344:	9a01      	ldr	r2, [sp, #4]
   13346:	1c53      	adds	r3, r2, #1
   13348:	9301      	str	r3, [sp, #4]
   1334a:	9c03      	ldr	r4, [sp, #12]
   1334c:	9b00      	ldr	r3, [sp, #0]
   1334e:	9902      	ldr	r1, [sp, #8]
   13350:	2020      	movs	r0, #32
   13352:	47a0      	blx	r4
    while (idx - start_idx < width) {
   13354:	e7f0      	b.n	13338 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x224>
    }
  }

  return idx;
   13356:	9c01      	ldr	r4, [sp, #4]
   13358:	462b      	mov	r3, r5
   1335a:	4619      	mov	r1, r3
   1335c:	4803      	ldr	r0, [pc, #12]	; (1336c <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x258>)
   1335e:	f7ff fd41 	bl	12de4 <__cyg_profile_func_exit>
   13362:	4623      	mov	r3, r4
}
   13364:	4618      	mov	r0, r3
   13366:	b009      	add	sp, #36	; 0x24
   13368:	bd30      	pop	{r4, r5, pc}
   1336a:	bf00      	nop
   1336c:	00013115 	.word	0x00013115

00013370 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)>:


// internal itoa for 'long' type
static size_t _ntoa_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long value, bool negative, unsigned long base, unsigned int prec, unsigned int width, unsigned int flags)
{
   13370:	b530      	push	{r4, r5, lr}
   13372:	b097      	sub	sp, #92	; 0x5c
   13374:	4674      	mov	r4, lr
   13376:	900b      	str	r0, [sp, #44]	; 0x2c
   13378:	910a      	str	r1, [sp, #40]	; 0x28
   1337a:	9209      	str	r2, [sp, #36]	; 0x24
   1337c:	9308      	str	r3, [sp, #32]
   1337e:	4623      	mov	r3, r4
   13380:	4619      	mov	r1, r3
   13382:	4833      	ldr	r0, [pc, #204]	; (13450 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0xe0>)
   13384:	f7ff fd1a 	bl	12dbc <__cyg_profile_func_enter>
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
   13388:	2300      	movs	r3, #0
   1338a:	9315      	str	r3, [sp, #84]	; 0x54

  // no hash for 0 values
  if (!value) {
   1338c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   1338e:	2b00      	cmp	r3, #0
   13390:	d103      	bne.n	1339a <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x2a>
    flags &= ~FLAGS_HASH;
   13392:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   13394:	f023 0310 	bic.w	r3, r3, #16
   13398:	931f      	str	r3, [sp, #124]	; 0x7c
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
   1339a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   1339c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
   133a0:	2b00      	cmp	r3, #0
   133a2:	d002      	beq.n	133aa <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x3a>
   133a4:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   133a6:	2b00      	cmp	r3, #0
   133a8:	d033      	beq.n	13412 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0xa2>
    do {
      const char digit = (char)(value % base);
   133aa:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   133ac:	9a1c      	ldr	r2, [sp, #112]	; 0x70
   133ae:	fbb3 f2f2 	udiv	r2, r3, r2
   133b2:	991c      	ldr	r1, [sp, #112]	; 0x70
   133b4:	fb01 f202 	mul.w	r2, r1, r2
   133b8:	1a9b      	subs	r3, r3, r2
   133ba:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
   133be:	f89d 3053 	ldrb.w	r3, [sp, #83]	; 0x53
   133c2:	2b09      	cmp	r3, #9
   133c4:	d804      	bhi.n	133d0 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x60>
   133c6:	f89d 3053 	ldrb.w	r3, [sp, #83]	; 0x53
   133ca:	3330      	adds	r3, #48	; 0x30
   133cc:	b2da      	uxtb	r2, r3
   133ce:	e00d      	b.n	133ec <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x7c>
   133d0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   133d2:	f003 0320 	and.w	r3, r3, #32
   133d6:	2b00      	cmp	r3, #0
   133d8:	d001      	beq.n	133de <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x6e>
   133da:	2241      	movs	r2, #65	; 0x41
   133dc:	e000      	b.n	133e0 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x70>
   133de:	2261      	movs	r2, #97	; 0x61
   133e0:	f89d 3053 	ldrb.w	r3, [sp, #83]	; 0x53
   133e4:	4413      	add	r3, r2
   133e6:	b2db      	uxtb	r3, r3
   133e8:	3b0a      	subs	r3, #10
   133ea:	b2da      	uxtb	r2, r3
   133ec:	9b15      	ldr	r3, [sp, #84]	; 0x54
   133ee:	1c59      	adds	r1, r3, #1
   133f0:	9115      	str	r1, [sp, #84]	; 0x54
   133f2:	a916      	add	r1, sp, #88	; 0x58
   133f4:	440b      	add	r3, r1
   133f6:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
   133fa:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   133fc:	9b1c      	ldr	r3, [sp, #112]	; 0x70
   133fe:	fbb2 f3f3 	udiv	r3, r2, r3
   13402:	931a      	str	r3, [sp, #104]	; 0x68
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
   13404:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   13406:	2b00      	cmp	r3, #0
   13408:	d003      	beq.n	13412 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0xa2>
   1340a:	9b15      	ldr	r3, [sp, #84]	; 0x54
   1340c:	2b1f      	cmp	r3, #31
   1340e:	d800      	bhi.n	13412 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0xa2>
    do {
   13410:	e7cb      	b.n	133aa <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x3a>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
   13412:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   13414:	9306      	str	r3, [sp, #24]
   13416:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   13418:	9305      	str	r3, [sp, #20]
   1341a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   1341c:	9304      	str	r3, [sp, #16]
   1341e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
   13420:	9303      	str	r3, [sp, #12]
   13422:	f89d 306c 	ldrb.w	r3, [sp, #108]	; 0x6c
   13426:	9302      	str	r3, [sp, #8]
   13428:	9b15      	ldr	r3, [sp, #84]	; 0x54
   1342a:	9301      	str	r3, [sp, #4]
   1342c:	ab0c      	add	r3, sp, #48	; 0x30
   1342e:	9300      	str	r3, [sp, #0]
   13430:	9b08      	ldr	r3, [sp, #32]
   13432:	9a09      	ldr	r2, [sp, #36]	; 0x24
   13434:	990a      	ldr	r1, [sp, #40]	; 0x28
   13436:	980b      	ldr	r0, [sp, #44]	; 0x2c
   13438:	f7ff fe6c 	bl	13114 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)>
   1343c:	4605      	mov	r5, r0
   1343e:	4623      	mov	r3, r4
   13440:	4619      	mov	r1, r3
   13442:	4803      	ldr	r0, [pc, #12]	; (13450 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0xe0>)
   13444:	f7ff fcce 	bl	12de4 <__cyg_profile_func_exit>
   13448:	462b      	mov	r3, r5
}
   1344a:	4618      	mov	r0, r3
   1344c:	b017      	add	sp, #92	; 0x5c
   1344e:	bd30      	pop	{r4, r5, pc}
   13450:	00013371 	.word	0x00013371

00013454 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)>:


// internal itoa for 'long long' type
#if defined(PRINTF_SUPPORT_LONG_LONG)
static size_t _ntoa_long_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long long value, bool negative, unsigned long long base, unsigned int prec, unsigned int width, unsigned int flags)
{
   13454:	b530      	push	{r4, r5, lr}
   13456:	b097      	sub	sp, #92	; 0x5c
   13458:	4675      	mov	r5, lr
   1345a:	900b      	str	r0, [sp, #44]	; 0x2c
   1345c:	910a      	str	r1, [sp, #40]	; 0x28
   1345e:	9209      	str	r2, [sp, #36]	; 0x24
   13460:	9308      	str	r3, [sp, #32]
   13462:	462b      	mov	r3, r5
   13464:	4619      	mov	r1, r3
   13466:	4837      	ldr	r0, [pc, #220]	; (13544 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0xf0>)
   13468:	f7ff fca8 	bl	12dbc <__cyg_profile_func_enter>
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
   1346c:	2300      	movs	r3, #0
   1346e:	9315      	str	r3, [sp, #84]	; 0x54

  // no hash for 0 values
  if (!value) {
   13470:	e9dd 341a 	ldrd	r3, r4, [sp, #104]	; 0x68
   13474:	4323      	orrs	r3, r4
   13476:	d103      	bne.n	13480 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0x2c>
    flags &= ~FLAGS_HASH;
   13478:	9b22      	ldr	r3, [sp, #136]	; 0x88
   1347a:	f023 0310 	bic.w	r3, r3, #16
   1347e:	9322      	str	r3, [sp, #136]	; 0x88
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
   13480:	9b22      	ldr	r3, [sp, #136]	; 0x88
   13482:	f403 6380 	and.w	r3, r3, #1024	; 0x400
   13486:	2b00      	cmp	r3, #0
   13488:	d003      	beq.n	13492 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0x3e>
   1348a:	e9dd 341a 	ldrd	r3, r4, [sp, #104]	; 0x68
   1348e:	4323      	orrs	r3, r4
   13490:	d039      	beq.n	13506 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0xb2>
    do {
      const char digit = (char)(value % base);
   13492:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
   13496:	e9dd 231e 	ldrd	r2, r3, [sp, #120]	; 0x78
   1349a:	f003 fbbb 	bl	16c14 <__aeabi_uldivmod>
   1349e:	461c      	mov	r4, r3
   134a0:	4613      	mov	r3, r2
   134a2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
   134a6:	f89d 3053 	ldrb.w	r3, [sp, #83]	; 0x53
   134aa:	2b09      	cmp	r3, #9
   134ac:	d804      	bhi.n	134b8 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0x64>
   134ae:	f89d 3053 	ldrb.w	r3, [sp, #83]	; 0x53
   134b2:	3330      	adds	r3, #48	; 0x30
   134b4:	b2da      	uxtb	r2, r3
   134b6:	e00d      	b.n	134d4 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0x80>
   134b8:	9b22      	ldr	r3, [sp, #136]	; 0x88
   134ba:	f003 0320 	and.w	r3, r3, #32
   134be:	2b00      	cmp	r3, #0
   134c0:	d001      	beq.n	134c6 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0x72>
   134c2:	2241      	movs	r2, #65	; 0x41
   134c4:	e000      	b.n	134c8 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0x74>
   134c6:	2261      	movs	r2, #97	; 0x61
   134c8:	f89d 3053 	ldrb.w	r3, [sp, #83]	; 0x53
   134cc:	4413      	add	r3, r2
   134ce:	b2db      	uxtb	r3, r3
   134d0:	3b0a      	subs	r3, #10
   134d2:	b2da      	uxtb	r2, r3
   134d4:	9b15      	ldr	r3, [sp, #84]	; 0x54
   134d6:	1c59      	adds	r1, r3, #1
   134d8:	9115      	str	r1, [sp, #84]	; 0x54
   134da:	a916      	add	r1, sp, #88	; 0x58
   134dc:	440b      	add	r3, r1
   134de:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
   134e2:	e9dd 231e 	ldrd	r2, r3, [sp, #120]	; 0x78
   134e6:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
   134ea:	f003 fb93 	bl	16c14 <__aeabi_uldivmod>
   134ee:	4603      	mov	r3, r0
   134f0:	460c      	mov	r4, r1
   134f2:	e9cd 341a 	strd	r3, r4, [sp, #104]	; 0x68
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
   134f6:	e9dd 341a 	ldrd	r3, r4, [sp, #104]	; 0x68
   134fa:	4323      	orrs	r3, r4
   134fc:	d003      	beq.n	13506 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0xb2>
   134fe:	9b15      	ldr	r3, [sp, #84]	; 0x54
   13500:	2b1f      	cmp	r3, #31
   13502:	d800      	bhi.n	13506 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0xb2>
    do {
   13504:	e7c5      	b.n	13492 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0x3e>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
   13506:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   13508:	9a22      	ldr	r2, [sp, #136]	; 0x88
   1350a:	9206      	str	r2, [sp, #24]
   1350c:	9a21      	ldr	r2, [sp, #132]	; 0x84
   1350e:	9205      	str	r2, [sp, #20]
   13510:	9a20      	ldr	r2, [sp, #128]	; 0x80
   13512:	9204      	str	r2, [sp, #16]
   13514:	9303      	str	r3, [sp, #12]
   13516:	f89d 3070 	ldrb.w	r3, [sp, #112]	; 0x70
   1351a:	9302      	str	r3, [sp, #8]
   1351c:	9b15      	ldr	r3, [sp, #84]	; 0x54
   1351e:	9301      	str	r3, [sp, #4]
   13520:	ab0c      	add	r3, sp, #48	; 0x30
   13522:	9300      	str	r3, [sp, #0]
   13524:	9b08      	ldr	r3, [sp, #32]
   13526:	9a09      	ldr	r2, [sp, #36]	; 0x24
   13528:	990a      	ldr	r1, [sp, #40]	; 0x28
   1352a:	980b      	ldr	r0, [sp, #44]	; 0x2c
   1352c:	f7ff fdf2 	bl	13114 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)>
   13530:	4604      	mov	r4, r0
   13532:	462b      	mov	r3, r5
   13534:	4619      	mov	r1, r3
   13536:	4803      	ldr	r0, [pc, #12]	; (13544 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0xf0>)
   13538:	f7ff fc54 	bl	12de4 <__cyg_profile_func_exit>
   1353c:	4623      	mov	r3, r4
}
   1353e:	4618      	mov	r0, r3
   13540:	b017      	add	sp, #92	; 0x5c
   13542:	bd30      	pop	{r4, r5, pc}
   13544:	00013455 	.word	0x00013455

00013548 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)>:
#endif  // PRINTF_SUPPORT_LONG_LONG


#if defined(PRINTF_SUPPORT_FLOAT)
static size_t _ftoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value_param, unsigned int prec, unsigned int width, unsigned int flags)
{
   13548:	b530      	push	{r4, r5, lr}
   1354a:	b09b      	sub	sp, #108	; 0x6c
   1354c:	4675      	mov	r5, lr
   1354e:	9005      	str	r0, [sp, #20]
   13550:	9104      	str	r1, [sp, #16]
   13552:	9203      	str	r2, [sp, #12]
   13554:	9302      	str	r3, [sp, #8]
   13556:	ed8d 0b00 	vstr	d0, [sp]
   1355a:	462b      	mov	r3, r5
   1355c:	4619      	mov	r1, r3
   1355e:	48b7      	ldr	r0, [pc, #732]	; (1383c <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x2f4>)
   13560:	f7ff fc2c 	bl	12dbc <__cyg_profile_func_enter>
  const size_t start_idx = idx;
   13564:	9b03      	ldr	r3, [sp, #12]
   13566:	9311      	str	r3, [sp, #68]	; 0x44

  float value = static_cast<float>(value_param);
   13568:	e9dd 0100 	ldrd	r0, r1, [sp]
   1356c:	f003 fb02 	bl	16b74 <__aeabi_d2f>
   13570:	4603      	mov	r3, r0
   13572:	9319      	str	r3, [sp, #100]	; 0x64

  char buf[PRINTF_FTOA_BUFFER_SIZE];
  size_t len  = 0U;
   13574:	2300      	movs	r3, #0
   13576:	9318      	str	r3, [sp, #96]	; 0x60
  float diff = 0.0;
   13578:	f04f 0300 	mov.w	r3, #0
   1357c:	9310      	str	r3, [sp, #64]	; 0x40

  // if input is larger than thres_max, revert to exponential
  const float thres_max = (float)0x7FFFFFFF;
   1357e:	f04f 439e 	mov.w	r3, #1325400064	; 0x4f000000
   13582:	930f      	str	r3, [sp, #60]	; 0x3c

  // powers of 10
  static const float pow10[] = { 1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000 };

  // test for negative
  bool negative = false;
   13584:	2300      	movs	r3, #0
   13586:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
  if (value < 0) {
   1358a:	eddd 7a19 	vldr	s15, [sp, #100]	; 0x64
   1358e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   13592:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   13596:	d50a      	bpl.n	135ae <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x66>
    negative = true;
   13598:	2301      	movs	r3, #1
   1359a:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
    value = 0 - value;
   1359e:	ed9f 7aa8 	vldr	s14, [pc, #672]	; 13840 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x2f8>
   135a2:	eddd 7a19 	vldr	s15, [sp, #100]	; 0x64
   135a6:	ee77 7a67 	vsub.f32	s15, s14, s15
   135aa:	edcd 7a19 	vstr	s15, [sp, #100]	; 0x64
  }

  // set default precision to 6, if not set explicitly
  if (!(flags & FLAGS_PRECISION)) {
   135ae:	9b20      	ldr	r3, [sp, #128]	; 0x80
   135b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
   135b4:	2b00      	cmp	r3, #0
   135b6:	d101      	bne.n	135bc <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x74>
    prec = 6U;
   135b8:	2306      	movs	r3, #6
   135ba:	931e      	str	r3, [sp, #120]	; 0x78
  }
  // limit precision to 9, cause a prec >= 10 can lead to overflow errors
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
   135bc:	9b18      	ldr	r3, [sp, #96]	; 0x60
   135be:	2b1f      	cmp	r3, #31
   135c0:	d80e      	bhi.n	135e0 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x98>
   135c2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   135c4:	2b09      	cmp	r3, #9
   135c6:	d90b      	bls.n	135e0 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x98>
    buf[len++] = '0';
   135c8:	9b18      	ldr	r3, [sp, #96]	; 0x60
   135ca:	1c5a      	adds	r2, r3, #1
   135cc:	9218      	str	r2, [sp, #96]	; 0x60
   135ce:	aa1a      	add	r2, sp, #104	; 0x68
   135d0:	4413      	add	r3, r2
   135d2:	2230      	movs	r2, #48	; 0x30
   135d4:	f803 2c50 	strb.w	r2, [r3, #-80]
    prec--;
   135d8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   135da:	3b01      	subs	r3, #1
   135dc:	931e      	str	r3, [sp, #120]	; 0x78
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
   135de:	e7ed      	b.n	135bc <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x74>
  }

  int whole = (int)value;
   135e0:	eddd 7a19 	vldr	s15, [sp, #100]	; 0x64
   135e4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   135e8:	ee17 3a90 	vmov	r3, s15
   135ec:	9316      	str	r3, [sp, #88]	; 0x58
  float tmp = (value - whole) * pow10[prec];
   135ee:	9b16      	ldr	r3, [sp, #88]	; 0x58
   135f0:	ee07 3a90 	vmov	s15, r3
   135f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   135f8:	ed9d 7a19 	vldr	s14, [sp, #100]	; 0x64
   135fc:	ee37 7a67 	vsub.f32	s14, s14, s15
   13600:	4a90      	ldr	r2, [pc, #576]	; (13844 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x2fc>)
   13602:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   13604:	009b      	lsls	r3, r3, #2
   13606:	4413      	add	r3, r2
   13608:	edd3 7a00 	vldr	s15, [r3]
   1360c:	ee67 7a27 	vmul.f32	s15, s14, s15
   13610:	edcd 7a0e 	vstr	s15, [sp, #56]	; 0x38
  unsigned long frac = (unsigned long)tmp;
   13614:	eddd 7a0e 	vldr	s15, [sp, #56]	; 0x38
   13618:	eefc 7ae7 	vcvt.u32.f32	s15, s15
   1361c:	ee17 3a90 	vmov	r3, s15
   13620:	9315      	str	r3, [sp, #84]	; 0x54
  diff = tmp - frac;
   13622:	9b15      	ldr	r3, [sp, #84]	; 0x54
   13624:	ee07 3a90 	vmov	s15, r3
   13628:	eef8 7a67 	vcvt.f32.u32	s15, s15
   1362c:	ed9d 7a0e 	vldr	s14, [sp, #56]	; 0x38
   13630:	ee77 7a67 	vsub.f32	s15, s14, s15
   13634:	edcd 7a10 	vstr	s15, [sp, #64]	; 0x40

  if (diff > 0.5) {
   13638:	eddd 7a10 	vldr	s15, [sp, #64]	; 0x40
   1363c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
   13640:	eef4 7ac7 	vcmpe.f32	s15, s14
   13644:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   13648:	dd18      	ble.n	1367c <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x134>
    ++frac;
   1364a:	9b15      	ldr	r3, [sp, #84]	; 0x54
   1364c:	3301      	adds	r3, #1
   1364e:	9315      	str	r3, [sp, #84]	; 0x54
    // handle rollover, e.g. case 0.99 with prec 1 is 1.0
    if (frac >= pow10[prec]) {
   13650:	9b15      	ldr	r3, [sp, #84]	; 0x54
   13652:	ee07 3a90 	vmov	s15, r3
   13656:	eeb8 7a67 	vcvt.f32.u32	s14, s15
   1365a:	4a7a      	ldr	r2, [pc, #488]	; (13844 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x2fc>)
   1365c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   1365e:	009b      	lsls	r3, r3, #2
   13660:	4413      	add	r3, r2
   13662:	edd3 7a00 	vldr	s15, [r3]
   13666:	eeb4 7ae7 	vcmpe.f32	s14, s15
   1366a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1366e:	db19      	blt.n	136a4 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x15c>
      frac = 0;
   13670:	2300      	movs	r3, #0
   13672:	9315      	str	r3, [sp, #84]	; 0x54
      ++whole;
   13674:	9b16      	ldr	r3, [sp, #88]	; 0x58
   13676:	3301      	adds	r3, #1
   13678:	9316      	str	r3, [sp, #88]	; 0x58
   1367a:	e013      	b.n	136a4 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x15c>
    }
  }
  else if ((diff == 0.5) && ((frac == 0U) || (frac & 1U))) {
   1367c:	eddd 7a10 	vldr	s15, [sp, #64]	; 0x40
   13680:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
   13684:	eef4 7a47 	vcmp.f32	s15, s14
   13688:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1368c:	d10a      	bne.n	136a4 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x15c>
   1368e:	9b15      	ldr	r3, [sp, #84]	; 0x54
   13690:	2b00      	cmp	r3, #0
   13692:	d004      	beq.n	1369e <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x156>
   13694:	9b15      	ldr	r3, [sp, #84]	; 0x54
   13696:	f003 0301 	and.w	r3, r3, #1
   1369a:	2b00      	cmp	r3, #0
   1369c:	d002      	beq.n	136a4 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x15c>
    // if halfway, round up if odd, OR if last digit is 0
    ++frac;
   1369e:	9b15      	ldr	r3, [sp, #84]	; 0x54
   136a0:	3301      	adds	r3, #1
   136a2:	9315      	str	r3, [sp, #84]	; 0x54
  }

  // TBD: for very large numbers switch back to native sprintf for exponentials. Anyone want to write code to replace this?
  // Normal printf behavior is to print EVERY whole number digit which can be 100s of characters overflowing your buffers == bad
  if (value > thres_max) {
   136a4:	eddd 7a19 	vldr	s15, [sp, #100]	; 0x64
   136a8:	ed9f 7a67 	vldr	s14, [pc, #412]	; 13848 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x300>
   136ac:	eef4 7ac7 	vcmpe.f32	s15, s14
   136b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   136b4:	dd01      	ble.n	136ba <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x172>
    return 0U;
   136b6:	2400      	movs	r4, #0
   136b8:	e156      	b.n	13968 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x420>
  }

  if (prec == 0U) {
   136ba:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   136bc:	2b00      	cmp	r3, #0
   136be:	d129      	bne.n	13714 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x1cc>
    diff = value - (float)whole;
   136c0:	9b16      	ldr	r3, [sp, #88]	; 0x58
   136c2:	ee07 3a90 	vmov	s15, r3
   136c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   136ca:	ed9d 7a19 	vldr	s14, [sp, #100]	; 0x64
   136ce:	ee77 7a67 	vsub.f32	s15, s14, s15
   136d2:	edcd 7a10 	vstr	s15, [sp, #64]	; 0x40
    if (diff > 0.5) {
   136d6:	eddd 7a10 	vldr	s15, [sp, #64]	; 0x40
   136da:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
   136de:	eef4 7ac7 	vcmpe.f32	s15, s14
   136e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   136e6:	dd03      	ble.n	136f0 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x1a8>
      // greater than 0.5, round up, e.g. 1.6 -> 2
      ++whole;
   136e8:	9b16      	ldr	r3, [sp, #88]	; 0x58
   136ea:	3301      	adds	r3, #1
   136ec:	9316      	str	r3, [sp, #88]	; 0x58
   136ee:	e05f      	b.n	137b0 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x268>
    }
    else if ((diff == 0.5) && (whole & 1)) {
   136f0:	eddd 7a10 	vldr	s15, [sp, #64]	; 0x40
   136f4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
   136f8:	eef4 7a47 	vcmp.f32	s15, s14
   136fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   13700:	d156      	bne.n	137b0 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x268>
   13702:	9b16      	ldr	r3, [sp, #88]	; 0x58
   13704:	f003 0301 	and.w	r3, r3, #1
   13708:	2b00      	cmp	r3, #0
   1370a:	d051      	beq.n	137b0 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x268>
      // exactly 0.5 and ODD, then round up
      // 1.5 -> 2, but 2.5 -> 2
      ++whole;
   1370c:	9b16      	ldr	r3, [sp, #88]	; 0x58
   1370e:	3301      	adds	r3, #1
   13710:	9316      	str	r3, [sp, #88]	; 0x58
   13712:	e04d      	b.n	137b0 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x268>
    }
  }
  else {
    unsigned int count = prec;
   13714:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   13716:	9314      	str	r3, [sp, #80]	; 0x50
    // now do fractional part, as an unsigned number
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
   13718:	9b18      	ldr	r3, [sp, #96]	; 0x60
   1371a:	2b1f      	cmp	r3, #31
   1371c:	d827      	bhi.n	1376e <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x226>
      --count;
   1371e:	9b14      	ldr	r3, [sp, #80]	; 0x50
   13720:	3b01      	subs	r3, #1
   13722:	9314      	str	r3, [sp, #80]	; 0x50
      buf[len++] = (char)(48U + (frac % 10U));
   13724:	9915      	ldr	r1, [sp, #84]	; 0x54
   13726:	4b49      	ldr	r3, [pc, #292]	; (1384c <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x304>)
   13728:	fba3 2301 	umull	r2, r3, r3, r1
   1372c:	08da      	lsrs	r2, r3, #3
   1372e:	4613      	mov	r3, r2
   13730:	009b      	lsls	r3, r3, #2
   13732:	4413      	add	r3, r2
   13734:	005b      	lsls	r3, r3, #1
   13736:	1aca      	subs	r2, r1, r3
   13738:	b2d3      	uxtb	r3, r2
   1373a:	3330      	adds	r3, #48	; 0x30
   1373c:	b2d9      	uxtb	r1, r3
   1373e:	9b18      	ldr	r3, [sp, #96]	; 0x60
   13740:	1c5a      	adds	r2, r3, #1
   13742:	9218      	str	r2, [sp, #96]	; 0x60
   13744:	aa1a      	add	r2, sp, #104	; 0x68
   13746:	4413      	add	r3, r2
   13748:	460a      	mov	r2, r1
   1374a:	f803 2c50 	strb.w	r2, [r3, #-80]
      if (!(frac /= 10U)) {
   1374e:	9b15      	ldr	r3, [sp, #84]	; 0x54
   13750:	4a3e      	ldr	r2, [pc, #248]	; (1384c <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x304>)
   13752:	fba2 2303 	umull	r2, r3, r2, r3
   13756:	08db      	lsrs	r3, r3, #3
   13758:	9315      	str	r3, [sp, #84]	; 0x54
   1375a:	9b15      	ldr	r3, [sp, #84]	; 0x54
   1375c:	2b00      	cmp	r3, #0
   1375e:	bf0c      	ite	eq
   13760:	2301      	moveq	r3, #1
   13762:	2300      	movne	r3, #0
   13764:	b2db      	uxtb	r3, r3
   13766:	2b00      	cmp	r3, #0
   13768:	d100      	bne.n	1376c <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x224>
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
   1376a:	e7d5      	b.n	13718 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x1d0>
        break;
   1376c:	bf00      	nop
      }
    }
    // add extra 0s
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
   1376e:	9b18      	ldr	r3, [sp, #96]	; 0x60
   13770:	2b1f      	cmp	r3, #31
   13772:	d806      	bhi.n	13782 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x23a>
   13774:	9b14      	ldr	r3, [sp, #80]	; 0x50
   13776:	1e5a      	subs	r2, r3, #1
   13778:	9214      	str	r2, [sp, #80]	; 0x50
   1377a:	2b00      	cmp	r3, #0
   1377c:	d001      	beq.n	13782 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x23a>
   1377e:	2301      	movs	r3, #1
   13780:	e000      	b.n	13784 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x23c>
   13782:	2300      	movs	r3, #0
   13784:	2b00      	cmp	r3, #0
   13786:	d008      	beq.n	1379a <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x252>
      buf[len++] = '0';
   13788:	9b18      	ldr	r3, [sp, #96]	; 0x60
   1378a:	1c5a      	adds	r2, r3, #1
   1378c:	9218      	str	r2, [sp, #96]	; 0x60
   1378e:	aa1a      	add	r2, sp, #104	; 0x68
   13790:	4413      	add	r3, r2
   13792:	2230      	movs	r2, #48	; 0x30
   13794:	f803 2c50 	strb.w	r2, [r3, #-80]
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
   13798:	e7e9      	b.n	1376e <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x226>
    }
    if (len < PRINTF_FTOA_BUFFER_SIZE) {
   1379a:	9b18      	ldr	r3, [sp, #96]	; 0x60
   1379c:	2b1f      	cmp	r3, #31
   1379e:	d807      	bhi.n	137b0 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x268>
      // add decimal
      buf[len++] = '.';
   137a0:	9b18      	ldr	r3, [sp, #96]	; 0x60
   137a2:	1c5a      	adds	r2, r3, #1
   137a4:	9218      	str	r2, [sp, #96]	; 0x60
   137a6:	aa1a      	add	r2, sp, #104	; 0x68
   137a8:	4413      	add	r3, r2
   137aa:	222e      	movs	r2, #46	; 0x2e
   137ac:	f803 2c50 	strb.w	r2, [r3, #-80]
    }
  }

  // do whole part, number is reversed
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
   137b0:	9b18      	ldr	r3, [sp, #96]	; 0x60
   137b2:	2b1f      	cmp	r3, #31
   137b4:	d828      	bhi.n	13808 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x2c0>
    buf[len++] = (char)(48 + (whole % 10));
   137b6:	9a16      	ldr	r2, [sp, #88]	; 0x58
   137b8:	4b25      	ldr	r3, [pc, #148]	; (13850 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x308>)
   137ba:	fb83 1302 	smull	r1, r3, r3, r2
   137be:	1099      	asrs	r1, r3, #2
   137c0:	17d3      	asrs	r3, r2, #31
   137c2:	1ac9      	subs	r1, r1, r3
   137c4:	460b      	mov	r3, r1
   137c6:	009b      	lsls	r3, r3, #2
   137c8:	440b      	add	r3, r1
   137ca:	005b      	lsls	r3, r3, #1
   137cc:	1ad1      	subs	r1, r2, r3
   137ce:	b2cb      	uxtb	r3, r1
   137d0:	3330      	adds	r3, #48	; 0x30
   137d2:	b2d9      	uxtb	r1, r3
   137d4:	9b18      	ldr	r3, [sp, #96]	; 0x60
   137d6:	1c5a      	adds	r2, r3, #1
   137d8:	9218      	str	r2, [sp, #96]	; 0x60
   137da:	aa1a      	add	r2, sp, #104	; 0x68
   137dc:	4413      	add	r3, r2
   137de:	460a      	mov	r2, r1
   137e0:	f803 2c50 	strb.w	r2, [r3, #-80]
    if (!(whole /= 10)) {
   137e4:	9b16      	ldr	r3, [sp, #88]	; 0x58
   137e6:	4a1a      	ldr	r2, [pc, #104]	; (13850 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x308>)
   137e8:	fb82 1203 	smull	r1, r2, r2, r3
   137ec:	1092      	asrs	r2, r2, #2
   137ee:	17db      	asrs	r3, r3, #31
   137f0:	1ad3      	subs	r3, r2, r3
   137f2:	9316      	str	r3, [sp, #88]	; 0x58
   137f4:	9b16      	ldr	r3, [sp, #88]	; 0x58
   137f6:	2b00      	cmp	r3, #0
   137f8:	bf0c      	ite	eq
   137fa:	2301      	moveq	r3, #1
   137fc:	2300      	movne	r3, #0
   137fe:	b2db      	uxtb	r3, r3
   13800:	2b00      	cmp	r3, #0
   13802:	d100      	bne.n	13806 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x2be>
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
   13804:	e7d4      	b.n	137b0 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x268>
      break;
   13806:	bf00      	nop
    }
  }

  // pad leading zeros
  while (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
   13808:	9b20      	ldr	r3, [sp, #128]	; 0x80
   1380a:	f003 0302 	and.w	r3, r3, #2
   1380e:	2b00      	cmp	r3, #0
   13810:	d120      	bne.n	13854 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x30c>
   13812:	9b20      	ldr	r3, [sp, #128]	; 0x80
   13814:	f003 0301 	and.w	r3, r3, #1
   13818:	2b00      	cmp	r3, #0
   1381a:	d01b      	beq.n	13854 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x30c>
   1381c:	9a18      	ldr	r2, [sp, #96]	; 0x60
   1381e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   13820:	429a      	cmp	r2, r3
   13822:	d217      	bcs.n	13854 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x30c>
   13824:	9b18      	ldr	r3, [sp, #96]	; 0x60
   13826:	2b1f      	cmp	r3, #31
   13828:	d814      	bhi.n	13854 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x30c>
    buf[len++] = '0';
   1382a:	9b18      	ldr	r3, [sp, #96]	; 0x60
   1382c:	1c5a      	adds	r2, r3, #1
   1382e:	9218      	str	r2, [sp, #96]	; 0x60
   13830:	aa1a      	add	r2, sp, #104	; 0x68
   13832:	4413      	add	r3, r2
   13834:	2230      	movs	r2, #48	; 0x30
   13836:	f803 2c50 	strb.w	r2, [r3, #-80]
  while (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
   1383a:	e7e5      	b.n	13808 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x2c0>
   1383c:	00013549 	.word	0x00013549
   13840:	00000000 	.word	0x00000000
   13844:	00017c78 	.word	0x00017c78
   13848:	4f000000 	.word	0x4f000000
   1384c:	cccccccd 	.word	0xcccccccd
   13850:	66666667 	.word	0x66666667
  }

  // handle sign
  if ((len == width) && (negative || (flags & FLAGS_PLUS) || (flags & FLAGS_SPACE))) {
   13854:	9a18      	ldr	r2, [sp, #96]	; 0x60
   13856:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   13858:	429a      	cmp	r2, r3
   1385a:	d110      	bne.n	1387e <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x336>
   1385c:	f89d 305f 	ldrb.w	r3, [sp, #95]	; 0x5f
   13860:	2b00      	cmp	r3, #0
   13862:	d109      	bne.n	13878 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x330>
   13864:	9b20      	ldr	r3, [sp, #128]	; 0x80
   13866:	f003 0304 	and.w	r3, r3, #4
   1386a:	2b00      	cmp	r3, #0
   1386c:	d104      	bne.n	13878 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x330>
   1386e:	9b20      	ldr	r3, [sp, #128]	; 0x80
   13870:	f003 0308 	and.w	r3, r3, #8
   13874:	2b00      	cmp	r3, #0
   13876:	d002      	beq.n	1387e <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x336>
    len--;
   13878:	9b18      	ldr	r3, [sp, #96]	; 0x60
   1387a:	3b01      	subs	r3, #1
   1387c:	9318      	str	r3, [sp, #96]	; 0x60
  }
  if (len < PRINTF_FTOA_BUFFER_SIZE) {
   1387e:	9b18      	ldr	r3, [sp, #96]	; 0x60
   13880:	2b1f      	cmp	r3, #31
   13882:	d827      	bhi.n	138d4 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x38c>
    if (negative) {
   13884:	f89d 305f 	ldrb.w	r3, [sp, #95]	; 0x5f
   13888:	2b00      	cmp	r3, #0
   1388a:	d008      	beq.n	1389e <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x356>
      buf[len++] = '-';
   1388c:	9b18      	ldr	r3, [sp, #96]	; 0x60
   1388e:	1c5a      	adds	r2, r3, #1
   13890:	9218      	str	r2, [sp, #96]	; 0x60
   13892:	aa1a      	add	r2, sp, #104	; 0x68
   13894:	4413      	add	r3, r2
   13896:	222d      	movs	r2, #45	; 0x2d
   13898:	f803 2c50 	strb.w	r2, [r3, #-80]
   1389c:	e01a      	b.n	138d4 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x38c>
    }
    else if (flags & FLAGS_PLUS) {
   1389e:	9b20      	ldr	r3, [sp, #128]	; 0x80
   138a0:	f003 0304 	and.w	r3, r3, #4
   138a4:	2b00      	cmp	r3, #0
   138a6:	d008      	beq.n	138ba <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x372>
      buf[len++] = '+';  // ignore the space if the '+' exists
   138a8:	9b18      	ldr	r3, [sp, #96]	; 0x60
   138aa:	1c5a      	adds	r2, r3, #1
   138ac:	9218      	str	r2, [sp, #96]	; 0x60
   138ae:	aa1a      	add	r2, sp, #104	; 0x68
   138b0:	4413      	add	r3, r2
   138b2:	222b      	movs	r2, #43	; 0x2b
   138b4:	f803 2c50 	strb.w	r2, [r3, #-80]
   138b8:	e00c      	b.n	138d4 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x38c>
    }
    else if (flags & FLAGS_SPACE) {
   138ba:	9b20      	ldr	r3, [sp, #128]	; 0x80
   138bc:	f003 0308 	and.w	r3, r3, #8
   138c0:	2b00      	cmp	r3, #0
   138c2:	d007      	beq.n	138d4 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x38c>
      buf[len++] = ' ';
   138c4:	9b18      	ldr	r3, [sp, #96]	; 0x60
   138c6:	1c5a      	adds	r2, r3, #1
   138c8:	9218      	str	r2, [sp, #96]	; 0x60
   138ca:	aa1a      	add	r2, sp, #104	; 0x68
   138cc:	4413      	add	r3, r2
   138ce:	2220      	movs	r2, #32
   138d0:	f803 2c50 	strb.w	r2, [r3, #-80]
    }
  }

  // pad spaces up to given width
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
   138d4:	9b20      	ldr	r3, [sp, #128]	; 0x80
   138d6:	f003 0302 	and.w	r3, r3, #2
   138da:	2b00      	cmp	r3, #0
   138dc:	d116      	bne.n	1390c <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x3c4>
   138de:	9b20      	ldr	r3, [sp, #128]	; 0x80
   138e0:	f003 0301 	and.w	r3, r3, #1
   138e4:	2b00      	cmp	r3, #0
   138e6:	d111      	bne.n	1390c <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x3c4>
    for (size_t i = len; i < width; i++) {
   138e8:	9b18      	ldr	r3, [sp, #96]	; 0x60
   138ea:	9313      	str	r3, [sp, #76]	; 0x4c
   138ec:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   138ee:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   138f0:	429a      	cmp	r2, r3
   138f2:	d20b      	bcs.n	1390c <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x3c4>
      out(' ', buffer, idx++, maxlen);
   138f4:	9a03      	ldr	r2, [sp, #12]
   138f6:	1c53      	adds	r3, r2, #1
   138f8:	9303      	str	r3, [sp, #12]
   138fa:	9c05      	ldr	r4, [sp, #20]
   138fc:	9b02      	ldr	r3, [sp, #8]
   138fe:	9904      	ldr	r1, [sp, #16]
   13900:	2020      	movs	r0, #32
   13902:	47a0      	blx	r4
    for (size_t i = len; i < width; i++) {
   13904:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   13906:	3301      	adds	r3, #1
   13908:	9313      	str	r3, [sp, #76]	; 0x4c
   1390a:	e7ef      	b.n	138ec <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x3a4>
    }
  }

  // reverse string
  for (size_t i = 0U; i < len; i++) {
   1390c:	2300      	movs	r3, #0
   1390e:	9312      	str	r3, [sp, #72]	; 0x48
   13910:	9a12      	ldr	r2, [sp, #72]	; 0x48
   13912:	9b18      	ldr	r3, [sp, #96]	; 0x60
   13914:	429a      	cmp	r2, r3
   13916:	d212      	bcs.n	1393e <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x3f6>
    out(buf[len - i - 1U], buffer, idx++, maxlen);
   13918:	9a18      	ldr	r2, [sp, #96]	; 0x60
   1391a:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1391c:	1ad3      	subs	r3, r2, r3
   1391e:	3b01      	subs	r3, #1
   13920:	aa1a      	add	r2, sp, #104	; 0x68
   13922:	4413      	add	r3, r2
   13924:	f813 0c50 	ldrb.w	r0, [r3, #-80]
   13928:	9a03      	ldr	r2, [sp, #12]
   1392a:	1c53      	adds	r3, r2, #1
   1392c:	9303      	str	r3, [sp, #12]
   1392e:	9c05      	ldr	r4, [sp, #20]
   13930:	9b02      	ldr	r3, [sp, #8]
   13932:	9904      	ldr	r1, [sp, #16]
   13934:	47a0      	blx	r4
  for (size_t i = 0U; i < len; i++) {
   13936:	9b12      	ldr	r3, [sp, #72]	; 0x48
   13938:	3301      	adds	r3, #1
   1393a:	9312      	str	r3, [sp, #72]	; 0x48
   1393c:	e7e8      	b.n	13910 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x3c8>
  }

  // append pad spaces up to given width
  if (flags & FLAGS_LEFT) {
   1393e:	9b20      	ldr	r3, [sp, #128]	; 0x80
   13940:	f003 0302 	and.w	r3, r3, #2
   13944:	2b00      	cmp	r3, #0
   13946:	d00e      	beq.n	13966 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x41e>
    while (idx - start_idx < width) {
   13948:	9a03      	ldr	r2, [sp, #12]
   1394a:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1394c:	1ad3      	subs	r3, r2, r3
   1394e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   13950:	429a      	cmp	r2, r3
   13952:	d908      	bls.n	13966 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x41e>
      out(' ', buffer, idx++, maxlen);
   13954:	9a03      	ldr	r2, [sp, #12]
   13956:	1c53      	adds	r3, r2, #1
   13958:	9303      	str	r3, [sp, #12]
   1395a:	9c05      	ldr	r4, [sp, #20]
   1395c:	9b02      	ldr	r3, [sp, #8]
   1395e:	9904      	ldr	r1, [sp, #16]
   13960:	2020      	movs	r0, #32
   13962:	47a0      	blx	r4
    while (idx - start_idx < width) {
   13964:	e7f0      	b.n	13948 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x400>
    }
  }

  return idx;
   13966:	9c03      	ldr	r4, [sp, #12]
   13968:	462b      	mov	r3, r5
   1396a:	4619      	mov	r1, r3
   1396c:	4803      	ldr	r0, [pc, #12]	; (1397c <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x434>)
   1396e:	f7ff fa39 	bl	12de4 <__cyg_profile_func_exit>
   13972:	4623      	mov	r3, r4
}
   13974:	4618      	mov	r0, r3
   13976:	b01b      	add	sp, #108	; 0x6c
   13978:	bd30      	pop	{r4, r5, pc}
   1397a:	bf00      	nop
   1397c:	00013549 	.word	0x00013549

00013980 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)>:
#endif  // PRINTF_SUPPORT_FLOAT


// internal vsnprintf
static int _vsnprintf(out_fct_type out, char* buffer, const size_t maxlen, const char* format, va_list va)
{
   13980:	b570      	push	{r4, r5, r6, lr}
   13982:	b0a0      	sub	sp, #128	; 0x80
   13984:	4676      	mov	r6, lr
   13986:	900d      	str	r0, [sp, #52]	; 0x34
   13988:	910c      	str	r1, [sp, #48]	; 0x30
   1398a:	920b      	str	r2, [sp, #44]	; 0x2c
   1398c:	930a      	str	r3, [sp, #40]	; 0x28
   1398e:	4633      	mov	r3, r6
   13990:	4619      	mov	r1, r3
   13992:	48a7      	ldr	r0, [pc, #668]	; (13c30 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2b0>)
   13994:	f7ff fa12 	bl	12dbc <__cyg_profile_func_enter>
  unsigned int flags, width, precision, n;
  size_t idx = 0U;
   13998:	2300      	movs	r3, #0
   1399a:	931b      	str	r3, [sp, #108]	; 0x6c

  if (!buffer) {
   1399c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1399e:	2b00      	cmp	r3, #0
   139a0:	d101      	bne.n	139a6 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x26>
    // use null output function
    out = _out_null;
   139a2:	4ba4      	ldr	r3, [pc, #656]	; (13c34 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2b4>)
   139a4:	930d      	str	r3, [sp, #52]	; 0x34
  }

  while (*format)
   139a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   139a8:	781b      	ldrb	r3, [r3, #0]
   139aa:	2b00      	cmp	r3, #0
   139ac:	f000 8448 	beq.w	14240 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8c0>
  {
    // format specifier?  %[flags][width][.precision][length]
    if (*format != '%') {
   139b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   139b2:	781b      	ldrb	r3, [r3, #0]
   139b4:	2b25      	cmp	r3, #37	; 0x25
   139b6:	d00d      	beq.n	139d4 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x54>
      // no
      out(*format, buffer, idx++, maxlen);
   139b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   139ba:	7818      	ldrb	r0, [r3, #0]
   139bc:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   139be:	1c53      	adds	r3, r2, #1
   139c0:	931b      	str	r3, [sp, #108]	; 0x6c
   139c2:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   139c4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   139c6:	990c      	ldr	r1, [sp, #48]	; 0x30
   139c8:	47a0      	blx	r4
      format++;
   139ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   139cc:	3301      	adds	r3, #1
   139ce:	930a      	str	r3, [sp, #40]	; 0x28
      continue;
   139d0:	f000 bc34 	b.w	1423c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8bc>
    }
    else {
      // yes, evaluate it
      format++;
   139d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   139d6:	3301      	adds	r3, #1
   139d8:	930a      	str	r3, [sp, #40]	; 0x28
    }

    // evaluate flags
    flags = 0U;
   139da:	2300      	movs	r3, #0
   139dc:	931f      	str	r3, [sp, #124]	; 0x7c
    do {
      switch (*format) {
   139de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   139e0:	781b      	ldrb	r3, [r3, #0]
   139e2:	3b20      	subs	r3, #32
   139e4:	2b10      	cmp	r3, #16
   139e6:	d857      	bhi.n	13a98 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x118>
   139e8:	a201      	add	r2, pc, #4	; (adr r2, 139f0 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x70>)
   139ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   139ee:	bf00      	nop
   139f0:	00013a71 	.word	0x00013a71
   139f4:	00013a99 	.word	0x00013a99
   139f8:	00013a99 	.word	0x00013a99
   139fc:	00013a85 	.word	0x00013a85
   13a00:	00013a99 	.word	0x00013a99
   13a04:	00013a99 	.word	0x00013a99
   13a08:	00013a99 	.word	0x00013a99
   13a0c:	00013a99 	.word	0x00013a99
   13a10:	00013a99 	.word	0x00013a99
   13a14:	00013a99 	.word	0x00013a99
   13a18:	00013a99 	.word	0x00013a99
   13a1c:	00013a5d 	.word	0x00013a5d
   13a20:	00013a99 	.word	0x00013a99
   13a24:	00013a49 	.word	0x00013a49
   13a28:	00013a99 	.word	0x00013a99
   13a2c:	00013a99 	.word	0x00013a99
   13a30:	00013a35 	.word	0x00013a35
        case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
   13a34:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   13a36:	f043 0301 	orr.w	r3, r3, #1
   13a3a:	931f      	str	r3, [sp, #124]	; 0x7c
   13a3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13a3e:	3301      	adds	r3, #1
   13a40:	930a      	str	r3, [sp, #40]	; 0x28
   13a42:	2301      	movs	r3, #1
   13a44:	931c      	str	r3, [sp, #112]	; 0x70
   13a46:	e02a      	b.n	13a9e <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x11e>
        case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
   13a48:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   13a4a:	f043 0302 	orr.w	r3, r3, #2
   13a4e:	931f      	str	r3, [sp, #124]	; 0x7c
   13a50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13a52:	3301      	adds	r3, #1
   13a54:	930a      	str	r3, [sp, #40]	; 0x28
   13a56:	2301      	movs	r3, #1
   13a58:	931c      	str	r3, [sp, #112]	; 0x70
   13a5a:	e020      	b.n	13a9e <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x11e>
        case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
   13a5c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   13a5e:	f043 0304 	orr.w	r3, r3, #4
   13a62:	931f      	str	r3, [sp, #124]	; 0x7c
   13a64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13a66:	3301      	adds	r3, #1
   13a68:	930a      	str	r3, [sp, #40]	; 0x28
   13a6a:	2301      	movs	r3, #1
   13a6c:	931c      	str	r3, [sp, #112]	; 0x70
   13a6e:	e016      	b.n	13a9e <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x11e>
        case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
   13a70:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   13a72:	f043 0308 	orr.w	r3, r3, #8
   13a76:	931f      	str	r3, [sp, #124]	; 0x7c
   13a78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13a7a:	3301      	adds	r3, #1
   13a7c:	930a      	str	r3, [sp, #40]	; 0x28
   13a7e:	2301      	movs	r3, #1
   13a80:	931c      	str	r3, [sp, #112]	; 0x70
   13a82:	e00c      	b.n	13a9e <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x11e>
        case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;
   13a84:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   13a86:	f043 0310 	orr.w	r3, r3, #16
   13a8a:	931f      	str	r3, [sp, #124]	; 0x7c
   13a8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13a8e:	3301      	adds	r3, #1
   13a90:	930a      	str	r3, [sp, #40]	; 0x28
   13a92:	2301      	movs	r3, #1
   13a94:	931c      	str	r3, [sp, #112]	; 0x70
   13a96:	e002      	b.n	13a9e <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x11e>
        default :                                   n = 0U; break;
   13a98:	2300      	movs	r3, #0
   13a9a:	931c      	str	r3, [sp, #112]	; 0x70
   13a9c:	bf00      	nop
      }
    } while (n);
   13a9e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
   13aa0:	2b00      	cmp	r3, #0
   13aa2:	d000      	beq.n	13aa6 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x126>
    do {
   13aa4:	e79b      	b.n	139de <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x5e>

    // evaluate width field
    width = 0U;
   13aa6:	2300      	movs	r3, #0
   13aa8:	931e      	str	r3, [sp, #120]	; 0x78
    if (_is_digit(*format)) {
   13aaa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13aac:	781b      	ldrb	r3, [r3, #0]
   13aae:	4618      	mov	r0, r3
   13ab0:	f7ff fade 	bl	13070 <_is_digit(char)>
   13ab4:	4603      	mov	r3, r0
   13ab6:	2b00      	cmp	r3, #0
   13ab8:	d005      	beq.n	13ac6 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x146>
      width = _atoi(&format);
   13aba:	ab0a      	add	r3, sp, #40	; 0x28
   13abc:	4618      	mov	r0, r3
   13abe:	f7ff faf9 	bl	130b4 <_atoi(char const**)>
   13ac2:	901e      	str	r0, [sp, #120]	; 0x78
   13ac4:	e018      	b.n	13af8 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x178>
    }
    else if (*format == '*') {
   13ac6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13ac8:	781b      	ldrb	r3, [r3, #0]
   13aca:	2b2a      	cmp	r3, #42	; 0x2a
   13acc:	d114      	bne.n	13af8 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x178>
      const int w = va_arg(va, int);
   13ace:	9b24      	ldr	r3, [sp, #144]	; 0x90
   13ad0:	1d1a      	adds	r2, r3, #4
   13ad2:	9224      	str	r2, [sp, #144]	; 0x90
   13ad4:	681b      	ldr	r3, [r3, #0]
   13ad6:	9316      	str	r3, [sp, #88]	; 0x58
      if (w < 0) {
   13ad8:	9b16      	ldr	r3, [sp, #88]	; 0x58
   13ada:	2b00      	cmp	r3, #0
   13adc:	da07      	bge.n	13aee <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x16e>
        flags |= FLAGS_LEFT;    // reverse padding
   13ade:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   13ae0:	f043 0302 	orr.w	r3, r3, #2
   13ae4:	931f      	str	r3, [sp, #124]	; 0x7c
        width = (unsigned int)-w;
   13ae6:	9b16      	ldr	r3, [sp, #88]	; 0x58
   13ae8:	425b      	negs	r3, r3
   13aea:	931e      	str	r3, [sp, #120]	; 0x78
   13aec:	e001      	b.n	13af2 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x172>
      }
      else {
        width = (unsigned int)w;
   13aee:	9b16      	ldr	r3, [sp, #88]	; 0x58
   13af0:	931e      	str	r3, [sp, #120]	; 0x78
      }
      format++;
   13af2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13af4:	3301      	adds	r3, #1
   13af6:	930a      	str	r3, [sp, #40]	; 0x28
    }

    // evaluate precision field
    precision = 0U;
   13af8:	2300      	movs	r3, #0
   13afa:	931d      	str	r3, [sp, #116]	; 0x74
    if (*format == '.') {
   13afc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13afe:	781b      	ldrb	r3, [r3, #0]
   13b00:	2b2e      	cmp	r3, #46	; 0x2e
   13b02:	d124      	bne.n	13b4e <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x1ce>
      flags |= FLAGS_PRECISION;
   13b04:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   13b06:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
   13b0a:	931f      	str	r3, [sp, #124]	; 0x7c
      format++;
   13b0c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13b0e:	3301      	adds	r3, #1
   13b10:	930a      	str	r3, [sp, #40]	; 0x28
      if (_is_digit(*format)) {
   13b12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13b14:	781b      	ldrb	r3, [r3, #0]
   13b16:	4618      	mov	r0, r3
   13b18:	f7ff faaa 	bl	13070 <_is_digit(char)>
   13b1c:	4603      	mov	r3, r0
   13b1e:	2b00      	cmp	r3, #0
   13b20:	d005      	beq.n	13b2e <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x1ae>
        precision = _atoi(&format);
   13b22:	ab0a      	add	r3, sp, #40	; 0x28
   13b24:	4618      	mov	r0, r3
   13b26:	f7ff fac5 	bl	130b4 <_atoi(char const**)>
   13b2a:	901d      	str	r0, [sp, #116]	; 0x74
   13b2c:	e00f      	b.n	13b4e <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x1ce>
      }
      else if (*format == '*') {
   13b2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13b30:	781b      	ldrb	r3, [r3, #0]
   13b32:	2b2a      	cmp	r3, #42	; 0x2a
   13b34:	d10b      	bne.n	13b4e <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x1ce>
        const int prec = (int)va_arg(va, int);
   13b36:	9b24      	ldr	r3, [sp, #144]	; 0x90
   13b38:	1d1a      	adds	r2, r3, #4
   13b3a:	9224      	str	r2, [sp, #144]	; 0x90
   13b3c:	681b      	ldr	r3, [r3, #0]
   13b3e:	9315      	str	r3, [sp, #84]	; 0x54
        precision = prec > 0 ? (unsigned int)prec : 0U;
   13b40:	9b15      	ldr	r3, [sp, #84]	; 0x54
   13b42:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   13b46:	931d      	str	r3, [sp, #116]	; 0x74
        format++;
   13b48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13b4a:	3301      	adds	r3, #1
   13b4c:	930a      	str	r3, [sp, #40]	; 0x28
      }
    }

    // evaluate length field
    switch (*format) {
   13b4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13b50:	781b      	ldrb	r3, [r3, #0]
   13b52:	3b68      	subs	r3, #104	; 0x68
   13b54:	2b12      	cmp	r3, #18
   13b56:	d867      	bhi.n	13c28 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2a8>
   13b58:	a201      	add	r2, pc, #4	; (adr r2, 13b60 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x1e0>)
   13b5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   13b5e:	bf00      	nop
   13b60:	00013bd3 	.word	0x00013bd3
   13b64:	00013c29 	.word	0x00013c29
   13b68:	00013c09 	.word	0x00013c09
   13b6c:	00013c29 	.word	0x00013c29
   13b70:	00013bad 	.word	0x00013bad
   13b74:	00013c29 	.word	0x00013c29
   13b78:	00013c29 	.word	0x00013c29
   13b7c:	00013c29 	.word	0x00013c29
   13b80:	00013c29 	.word	0x00013c29
   13b84:	00013c29 	.word	0x00013c29
   13b88:	00013c29 	.word	0x00013c29
   13b8c:	00013c29 	.word	0x00013c29
   13b90:	00013bf9 	.word	0x00013bf9
   13b94:	00013c29 	.word	0x00013c29
   13b98:	00013c29 	.word	0x00013c29
   13b9c:	00013c29 	.word	0x00013c29
   13ba0:	00013c29 	.word	0x00013c29
   13ba4:	00013c29 	.word	0x00013c29
   13ba8:	00013c19 	.word	0x00013c19
      case 'l' :
        flags |= FLAGS_LONG;
   13bac:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   13bae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   13bb2:	931f      	str	r3, [sp, #124]	; 0x7c
        format++;
   13bb4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13bb6:	3301      	adds	r3, #1
   13bb8:	930a      	str	r3, [sp, #40]	; 0x28
        if (*format == 'l') {
   13bba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13bbc:	781b      	ldrb	r3, [r3, #0]
   13bbe:	2b6c      	cmp	r3, #108	; 0x6c
   13bc0:	d134      	bne.n	13c2c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2ac>
          flags |= FLAGS_LONG_LONG;
   13bc2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   13bc4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   13bc8:	931f      	str	r3, [sp, #124]	; 0x7c
          format++;
   13bca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13bcc:	3301      	adds	r3, #1
   13bce:	930a      	str	r3, [sp, #40]	; 0x28
        }
        break;
   13bd0:	e02c      	b.n	13c2c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2ac>
      case 'h' :
        flags |= FLAGS_SHORT;
   13bd2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   13bd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   13bd8:	931f      	str	r3, [sp, #124]	; 0x7c
        format++;
   13bda:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13bdc:	3301      	adds	r3, #1
   13bde:	930a      	str	r3, [sp, #40]	; 0x28
        if (*format == 'h') {
   13be0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13be2:	781b      	ldrb	r3, [r3, #0]
   13be4:	2b68      	cmp	r3, #104	; 0x68
   13be6:	d127      	bne.n	13c38 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2b8>
          flags |= FLAGS_CHAR;
   13be8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   13bea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   13bee:	931f      	str	r3, [sp, #124]	; 0x7c
          format++;
   13bf0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13bf2:	3301      	adds	r3, #1
   13bf4:	930a      	str	r3, [sp, #40]	; 0x28
        }
        break;
   13bf6:	e01f      	b.n	13c38 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2b8>
#if defined(PRINTF_SUPPORT_PTRDIFF_T)
      case 't' :
        flags |= (sizeof(ptrdiff_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
   13bf8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   13bfa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   13bfe:	931f      	str	r3, [sp, #124]	; 0x7c
        format++;
   13c00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13c02:	3301      	adds	r3, #1
   13c04:	930a      	str	r3, [sp, #40]	; 0x28
        break;
   13c06:	e018      	b.n	13c3a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2ba>
#endif
      case 'j' :
        flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
   13c08:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   13c0a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   13c0e:	931f      	str	r3, [sp, #124]	; 0x7c
        format++;
   13c10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13c12:	3301      	adds	r3, #1
   13c14:	930a      	str	r3, [sp, #40]	; 0x28
        break;
   13c16:	e010      	b.n	13c3a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2ba>
      case 'z' :
        flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
   13c18:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   13c1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   13c1e:	931f      	str	r3, [sp, #124]	; 0x7c
        format++;
   13c20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13c22:	3301      	adds	r3, #1
   13c24:	930a      	str	r3, [sp, #40]	; 0x28
        break;
   13c26:	e008      	b.n	13c3a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2ba>
      default :
        break;
   13c28:	bf00      	nop
   13c2a:	e006      	b.n	13c3a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2ba>
        break;
   13c2c:	bf00      	nop
   13c2e:	e004      	b.n	13c3a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2ba>
   13c30:	00013981 	.word	0x00013981
   13c34:	00012fb9 	.word	0x00012fb9
        break;
   13c38:	bf00      	nop
    }

    // evaluate specifier
    switch (*format) {
   13c3a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13c3c:	781b      	ldrb	r3, [r3, #0]
   13c3e:	3b25      	subs	r3, #37	; 0x25
   13c40:	2b53      	cmp	r3, #83	; 0x53
   13c42:	f200 82ee 	bhi.w	14222 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8a2>
   13c46:	a201      	add	r2, pc, #4	; (adr r2, 13c4c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2cc>)
   13c48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   13c4c:	0001420b 	.word	0x0001420b
   13c50:	00014223 	.word	0x00014223
   13c54:	00014223 	.word	0x00014223
   13c58:	00014223 	.word	0x00014223
   13c5c:	00014223 	.word	0x00014223
   13c60:	00014223 	.word	0x00014223
   13c64:	00014223 	.word	0x00014223
   13c68:	00014223 	.word	0x00014223
   13c6c:	00014223 	.word	0x00014223
   13c70:	00014223 	.word	0x00014223
   13c74:	00014223 	.word	0x00014223
   13c78:	00014223 	.word	0x00014223
   13c7c:	00014223 	.word	0x00014223
   13c80:	00014223 	.word	0x00014223
   13c84:	00014223 	.word	0x00014223
   13c88:	00014223 	.word	0x00014223
   13c8c:	00014223 	.word	0x00014223
   13c90:	00014223 	.word	0x00014223
   13c94:	00014223 	.word	0x00014223
   13c98:	00014223 	.word	0x00014223
   13c9c:	00014223 	.word	0x00014223
   13ca0:	00014223 	.word	0x00014223
   13ca4:	00014223 	.word	0x00014223
   13ca8:	00014223 	.word	0x00014223
   13cac:	00014223 	.word	0x00014223
   13cb0:	00014223 	.word	0x00014223
   13cb4:	00014223 	.word	0x00014223
   13cb8:	00014223 	.word	0x00014223
   13cbc:	00014223 	.word	0x00014223
   13cc0:	00014223 	.word	0x00014223
   13cc4:	00014223 	.word	0x00014223
   13cc8:	00014223 	.word	0x00014223
   13ccc:	00014223 	.word	0x00014223
   13cd0:	00014029 	.word	0x00014029
   13cd4:	00014223 	.word	0x00014223
   13cd8:	00014223 	.word	0x00014223
   13cdc:	00014223 	.word	0x00014223
   13ce0:	00014223 	.word	0x00014223
   13ce4:	00014223 	.word	0x00014223
   13ce8:	00014223 	.word	0x00014223
   13cec:	00014223 	.word	0x00014223
   13cf0:	00014223 	.word	0x00014223
   13cf4:	00014223 	.word	0x00014223
   13cf8:	00014223 	.word	0x00014223
   13cfc:	00014223 	.word	0x00014223
   13d00:	00014223 	.word	0x00014223
   13d04:	00014223 	.word	0x00014223
   13d08:	00014223 	.word	0x00014223
   13d0c:	00014223 	.word	0x00014223
   13d10:	00014223 	.word	0x00014223
   13d14:	00014223 	.word	0x00014223
   13d18:	00013d9d 	.word	0x00013d9d
   13d1c:	00014223 	.word	0x00014223
   13d20:	00014223 	.word	0x00014223
   13d24:	00014223 	.word	0x00014223
   13d28:	00014223 	.word	0x00014223
   13d2c:	00014223 	.word	0x00014223
   13d30:	00014223 	.word	0x00014223
   13d34:	00014223 	.word	0x00014223
   13d38:	00014223 	.word	0x00014223
   13d3c:	00014223 	.word	0x00014223
   13d40:	00013d9d 	.word	0x00013d9d
   13d44:	00014065 	.word	0x00014065
   13d48:	00013d9d 	.word	0x00013d9d
   13d4c:	00014223 	.word	0x00014223
   13d50:	00014029 	.word	0x00014029
   13d54:	00014223 	.word	0x00014223
   13d58:	00014223 	.word	0x00014223
   13d5c:	00013d9d 	.word	0x00013d9d
   13d60:	00014223 	.word	0x00014223
   13d64:	00014223 	.word	0x00014223
   13d68:	00014223 	.word	0x00014223
   13d6c:	00014223 	.word	0x00014223
   13d70:	00014223 	.word	0x00014223
   13d74:	00013d9d 	.word	0x00013d9d
   13d78:	000141c3 	.word	0x000141c3
   13d7c:	00014223 	.word	0x00014223
   13d80:	00014223 	.word	0x00014223
   13d84:	000140ed 	.word	0x000140ed
   13d88:	00014223 	.word	0x00014223
   13d8c:	00013d9d 	.word	0x00013d9d
   13d90:	00014223 	.word	0x00014223
   13d94:	00014223 	.word	0x00014223
   13d98:	00013d9d 	.word	0x00013d9d
      case 'X' :
      case 'o' :
      case 'b' : {
        // set the base
        unsigned int base;
        if (*format == 'x' || *format == 'X') {
   13d9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13d9e:	781b      	ldrb	r3, [r3, #0]
   13da0:	2b78      	cmp	r3, #120	; 0x78
   13da2:	d003      	beq.n	13dac <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x42c>
   13da4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13da6:	781b      	ldrb	r3, [r3, #0]
   13da8:	2b58      	cmp	r3, #88	; 0x58
   13daa:	d102      	bne.n	13db2 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x432>
          base = 16U;
   13dac:	2310      	movs	r3, #16
   13dae:	931a      	str	r3, [sp, #104]	; 0x68
   13db0:	e013      	b.n	13dda <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x45a>
        }
        else if (*format == 'o') {
   13db2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13db4:	781b      	ldrb	r3, [r3, #0]
   13db6:	2b6f      	cmp	r3, #111	; 0x6f
   13db8:	d102      	bne.n	13dc0 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x440>
          base =  8U;
   13dba:	2308      	movs	r3, #8
   13dbc:	931a      	str	r3, [sp, #104]	; 0x68
   13dbe:	e00c      	b.n	13dda <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x45a>
        }
        else if (*format == 'b') {
   13dc0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13dc2:	781b      	ldrb	r3, [r3, #0]
   13dc4:	2b62      	cmp	r3, #98	; 0x62
   13dc6:	d102      	bne.n	13dce <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x44e>
          base =  2U;
   13dc8:	2302      	movs	r3, #2
   13dca:	931a      	str	r3, [sp, #104]	; 0x68
   13dcc:	e005      	b.n	13dda <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x45a>
        }
        else {
          base = 10U;
   13dce:	230a      	movs	r3, #10
   13dd0:	931a      	str	r3, [sp, #104]	; 0x68
          flags &= ~FLAGS_HASH;   // no hash for dec format
   13dd2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   13dd4:	f023 0310 	bic.w	r3, r3, #16
   13dd8:	931f      	str	r3, [sp, #124]	; 0x7c
        }
        // uppercase
        if (*format == 'X') {
   13dda:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13ddc:	781b      	ldrb	r3, [r3, #0]
   13dde:	2b58      	cmp	r3, #88	; 0x58
   13de0:	d103      	bne.n	13dea <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x46a>
          flags |= FLAGS_UPPERCASE;
   13de2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   13de4:	f043 0320 	orr.w	r3, r3, #32
   13de8:	931f      	str	r3, [sp, #124]	; 0x7c
        }

        // no plus or space flag for u, x, X, o, b
        if ((*format != 'i') && (*format != 'd')) {
   13dea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13dec:	781b      	ldrb	r3, [r3, #0]
   13dee:	2b69      	cmp	r3, #105	; 0x69
   13df0:	d007      	beq.n	13e02 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x482>
   13df2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13df4:	781b      	ldrb	r3, [r3, #0]
   13df6:	2b64      	cmp	r3, #100	; 0x64
   13df8:	d003      	beq.n	13e02 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x482>
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
   13dfa:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   13dfc:	f023 030c 	bic.w	r3, r3, #12
   13e00:	931f      	str	r3, [sp, #124]	; 0x7c
        }

        // ignore '0' flag when precision is given
        if (flags & FLAGS_PRECISION) {
   13e02:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   13e04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
   13e08:	2b00      	cmp	r3, #0
   13e0a:	d003      	beq.n	13e14 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x494>
          flags &= ~FLAGS_ZEROPAD;
   13e0c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   13e0e:	f023 0301 	bic.w	r3, r3, #1
   13e12:	931f      	str	r3, [sp, #124]	; 0x7c
        }

        // convert the integer
        if ((*format == 'i') || (*format == 'd')) {
   13e14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13e16:	781b      	ldrb	r3, [r3, #0]
   13e18:	2b69      	cmp	r3, #105	; 0x69
   13e1a:	d004      	beq.n	13e26 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x4a6>
   13e1c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13e1e:	781b      	ldrb	r3, [r3, #0]
   13e20:	2b64      	cmp	r3, #100	; 0x64
   13e22:	f040 808d 	bne.w	13f40 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x5c0>
          // signed
          if (flags & FLAGS_LONG_LONG) {
   13e26:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   13e28:	f403 7300 	and.w	r3, r3, #512	; 0x200
   13e2c:	2b00      	cmp	r3, #0
   13e2e:	d02e      	beq.n	13e8e <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x50e>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            const long long value = va_arg(va, long long);
   13e30:	9b24      	ldr	r3, [sp, #144]	; 0x90
   13e32:	3307      	adds	r3, #7
   13e34:	f023 0307 	bic.w	r3, r3, #7
   13e38:	f103 0208 	add.w	r2, r3, #8
   13e3c:	9224      	str	r2, [sp, #144]	; 0x90
   13e3e:	e9d3 3400 	ldrd	r3, r4, [r3]
   13e42:	e9cd 340e 	strd	r3, r4, [sp, #56]	; 0x38
            idx = _ntoa_long_long(out, buffer, idx, maxlen, (unsigned long long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
   13e46:	e9dd 340e 	ldrd	r3, r4, [sp, #56]	; 0x38
   13e4a:	2b00      	cmp	r3, #0
   13e4c:	f174 0200 	sbcs.w	r2, r4, #0
   13e50:	da02      	bge.n	13e58 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x4d8>
   13e52:	425b      	negs	r3, r3
   13e54:	eb64 0444 	sbc.w	r4, r4, r4, lsl #1
   13e58:	4619      	mov	r1, r3
   13e5a:	4622      	mov	r2, r4
   13e5c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   13e5e:	0fdb      	lsrs	r3, r3, #31
   13e60:	b2d8      	uxtb	r0, r3
   13e62:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   13e64:	f04f 0400 	mov.w	r4, #0
   13e68:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
   13e6a:	9508      	str	r5, [sp, #32]
   13e6c:	9d1e      	ldr	r5, [sp, #120]	; 0x78
   13e6e:	9507      	str	r5, [sp, #28]
   13e70:	9d1d      	ldr	r5, [sp, #116]	; 0x74
   13e72:	9506      	str	r5, [sp, #24]
   13e74:	e9cd 3404 	strd	r3, r4, [sp, #16]
   13e78:	9002      	str	r0, [sp, #8]
   13e7a:	e9cd 1200 	strd	r1, r2, [sp]
   13e7e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   13e80:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   13e82:	990c      	ldr	r1, [sp, #48]	; 0x30
   13e84:	980d      	ldr	r0, [sp, #52]	; 0x34
   13e86:	f7ff fae5 	bl	13454 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)>
   13e8a:	901b      	str	r0, [sp, #108]	; 0x6c
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
          }
          else {
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
          }
   13e8c:	e0c8      	b.n	14020 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x6a0>
          else if (flags & FLAGS_LONG) {
   13e8e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   13e90:	f403 7380 	and.w	r3, r3, #256	; 0x100
   13e94:	2b00      	cmp	r3, #0
   13e96:	d01e      	beq.n	13ed6 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x556>
            const long value = va_arg(va, long);
   13e98:	9b24      	ldr	r3, [sp, #144]	; 0x90
   13e9a:	1d1a      	adds	r2, r3, #4
   13e9c:	9224      	str	r2, [sp, #144]	; 0x90
   13e9e:	681b      	ldr	r3, [r3, #0]
   13ea0:	9311      	str	r3, [sp, #68]	; 0x44
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
   13ea2:	9b11      	ldr	r3, [sp, #68]	; 0x44
   13ea4:	2b00      	cmp	r3, #0
   13ea6:	bfb8      	it	lt
   13ea8:	425b      	neglt	r3, r3
   13eaa:	4619      	mov	r1, r3
   13eac:	9b11      	ldr	r3, [sp, #68]	; 0x44
   13eae:	0fdb      	lsrs	r3, r3, #31
   13eb0:	b2db      	uxtb	r3, r3
   13eb2:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   13eb4:	9205      	str	r2, [sp, #20]
   13eb6:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   13eb8:	9204      	str	r2, [sp, #16]
   13eba:	9a1d      	ldr	r2, [sp, #116]	; 0x74
   13ebc:	9203      	str	r2, [sp, #12]
   13ebe:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   13ec0:	9202      	str	r2, [sp, #8]
   13ec2:	9301      	str	r3, [sp, #4]
   13ec4:	9100      	str	r1, [sp, #0]
   13ec6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   13ec8:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   13eca:	990c      	ldr	r1, [sp, #48]	; 0x30
   13ecc:	980d      	ldr	r0, [sp, #52]	; 0x34
   13ece:	f7ff fa4f 	bl	13370 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)>
   13ed2:	901b      	str	r0, [sp, #108]	; 0x6c
          }
   13ed4:	e0a4      	b.n	14020 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x6a0>
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
   13ed6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   13ed8:	f003 0340 	and.w	r3, r3, #64	; 0x40
   13edc:	2b00      	cmp	r3, #0
   13ede:	d005      	beq.n	13eec <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x56c>
   13ee0:	9b24      	ldr	r3, [sp, #144]	; 0x90
   13ee2:	1d1a      	adds	r2, r3, #4
   13ee4:	9224      	str	r2, [sp, #144]	; 0x90
   13ee6:	681b      	ldr	r3, [r3, #0]
   13ee8:	b2db      	uxtb	r3, r3
   13eea:	e00e      	b.n	13f0a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x58a>
   13eec:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   13eee:	f003 0380 	and.w	r3, r3, #128	; 0x80
   13ef2:	2b00      	cmp	r3, #0
   13ef4:	d005      	beq.n	13f02 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x582>
   13ef6:	9b24      	ldr	r3, [sp, #144]	; 0x90
   13ef8:	1d1a      	adds	r2, r3, #4
   13efa:	9224      	str	r2, [sp, #144]	; 0x90
   13efc:	681b      	ldr	r3, [r3, #0]
   13efe:	b21b      	sxth	r3, r3
   13f00:	e003      	b.n	13f0a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x58a>
   13f02:	9b24      	ldr	r3, [sp, #144]	; 0x90
   13f04:	1d1a      	adds	r2, r3, #4
   13f06:	9224      	str	r2, [sp, #144]	; 0x90
   13f08:	681b      	ldr	r3, [r3, #0]
   13f0a:	9312      	str	r3, [sp, #72]	; 0x48
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
   13f0c:	9b12      	ldr	r3, [sp, #72]	; 0x48
   13f0e:	2b00      	cmp	r3, #0
   13f10:	bfb8      	it	lt
   13f12:	425b      	neglt	r3, r3
   13f14:	4619      	mov	r1, r3
   13f16:	9b12      	ldr	r3, [sp, #72]	; 0x48
   13f18:	0fdb      	lsrs	r3, r3, #31
   13f1a:	b2db      	uxtb	r3, r3
   13f1c:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   13f1e:	9205      	str	r2, [sp, #20]
   13f20:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   13f22:	9204      	str	r2, [sp, #16]
   13f24:	9a1d      	ldr	r2, [sp, #116]	; 0x74
   13f26:	9203      	str	r2, [sp, #12]
   13f28:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   13f2a:	9202      	str	r2, [sp, #8]
   13f2c:	9301      	str	r3, [sp, #4]
   13f2e:	9100      	str	r1, [sp, #0]
   13f30:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   13f32:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   13f34:	990c      	ldr	r1, [sp, #48]	; 0x30
   13f36:	980d      	ldr	r0, [sp, #52]	; 0x34
   13f38:	f7ff fa1a 	bl	13370 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)>
   13f3c:	901b      	str	r0, [sp, #108]	; 0x6c
          }
   13f3e:	e06f      	b.n	14020 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x6a0>
        }
        else {
          // unsigned
          if (flags & FLAGS_LONG_LONG) {
   13f40:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   13f42:	f403 7300 	and.w	r3, r3, #512	; 0x200
   13f46:	2b00      	cmp	r3, #0
   13f48:	d020      	beq.n	13f8c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x60c>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base, precision, width, flags);
   13f4a:	9b24      	ldr	r3, [sp, #144]	; 0x90
   13f4c:	3307      	adds	r3, #7
   13f4e:	f023 0307 	bic.w	r3, r3, #7
   13f52:	f103 0208 	add.w	r2, r3, #8
   13f56:	9224      	str	r2, [sp, #144]	; 0x90
   13f58:	e9d3 3400 	ldrd	r3, r4, [r3]
   13f5c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   13f5e:	4611      	mov	r1, r2
   13f60:	f04f 0200 	mov.w	r2, #0
   13f64:	981f      	ldr	r0, [sp, #124]	; 0x7c
   13f66:	9008      	str	r0, [sp, #32]
   13f68:	981e      	ldr	r0, [sp, #120]	; 0x78
   13f6a:	9007      	str	r0, [sp, #28]
   13f6c:	981d      	ldr	r0, [sp, #116]	; 0x74
   13f6e:	9006      	str	r0, [sp, #24]
   13f70:	e9cd 1204 	strd	r1, r2, [sp, #16]
   13f74:	2200      	movs	r2, #0
   13f76:	9202      	str	r2, [sp, #8]
   13f78:	e9cd 3400 	strd	r3, r4, [sp]
   13f7c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   13f7e:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   13f80:	990c      	ldr	r1, [sp, #48]	; 0x30
   13f82:	980d      	ldr	r0, [sp, #52]	; 0x34
   13f84:	f7ff fa66 	bl	13454 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)>
   13f88:	901b      	str	r0, [sp, #108]	; 0x6c
   13f8a:	e049      	b.n	14020 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x6a0>
#endif
          }
          else if (flags & FLAGS_LONG) {
   13f8c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   13f8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
   13f92:	2b00      	cmp	r3, #0
   13f94:	d016      	beq.n	13fc4 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x644>
            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
   13f96:	9b24      	ldr	r3, [sp, #144]	; 0x90
   13f98:	1d1a      	adds	r2, r3, #4
   13f9a:	9224      	str	r2, [sp, #144]	; 0x90
   13f9c:	681b      	ldr	r3, [r3, #0]
   13f9e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   13fa0:	9205      	str	r2, [sp, #20]
   13fa2:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   13fa4:	9204      	str	r2, [sp, #16]
   13fa6:	9a1d      	ldr	r2, [sp, #116]	; 0x74
   13fa8:	9203      	str	r2, [sp, #12]
   13faa:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   13fac:	9202      	str	r2, [sp, #8]
   13fae:	2200      	movs	r2, #0
   13fb0:	9201      	str	r2, [sp, #4]
   13fb2:	9300      	str	r3, [sp, #0]
   13fb4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   13fb6:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   13fb8:	990c      	ldr	r1, [sp, #48]	; 0x30
   13fba:	980d      	ldr	r0, [sp, #52]	; 0x34
   13fbc:	f7ff f9d8 	bl	13370 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)>
   13fc0:	901b      	str	r0, [sp, #108]	; 0x6c
   13fc2:	e02d      	b.n	14020 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x6a0>
          }
          else {
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
   13fc4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   13fc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
   13fca:	2b00      	cmp	r3, #0
   13fcc:	d005      	beq.n	13fda <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x65a>
   13fce:	9b24      	ldr	r3, [sp, #144]	; 0x90
   13fd0:	1d1a      	adds	r2, r3, #4
   13fd2:	9224      	str	r2, [sp, #144]	; 0x90
   13fd4:	681b      	ldr	r3, [r3, #0]
   13fd6:	b2db      	uxtb	r3, r3
   13fd8:	e00e      	b.n	13ff8 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x678>
   13fda:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   13fdc:	f003 0380 	and.w	r3, r3, #128	; 0x80
   13fe0:	2b00      	cmp	r3, #0
   13fe2:	d005      	beq.n	13ff0 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x670>
   13fe4:	9b24      	ldr	r3, [sp, #144]	; 0x90
   13fe6:	1d1a      	adds	r2, r3, #4
   13fe8:	9224      	str	r2, [sp, #144]	; 0x90
   13fea:	681b      	ldr	r3, [r3, #0]
   13fec:	b29b      	uxth	r3, r3
   13fee:	e003      	b.n	13ff8 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x678>
   13ff0:	9b24      	ldr	r3, [sp, #144]	; 0x90
   13ff2:	1d1a      	adds	r2, r3, #4
   13ff4:	9224      	str	r2, [sp, #144]	; 0x90
   13ff6:	681b      	ldr	r3, [r3, #0]
   13ff8:	9313      	str	r3, [sp, #76]	; 0x4c
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
   13ffa:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   13ffc:	9305      	str	r3, [sp, #20]
   13ffe:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   14000:	9304      	str	r3, [sp, #16]
   14002:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   14004:	9303      	str	r3, [sp, #12]
   14006:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   14008:	9302      	str	r3, [sp, #8]
   1400a:	2300      	movs	r3, #0
   1400c:	9301      	str	r3, [sp, #4]
   1400e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   14010:	9300      	str	r3, [sp, #0]
   14012:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   14014:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   14016:	990c      	ldr	r1, [sp, #48]	; 0x30
   14018:	980d      	ldr	r0, [sp, #52]	; 0x34
   1401a:	f7ff f9a9 	bl	13370 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)>
   1401e:	901b      	str	r0, [sp, #108]	; 0x6c
          }
        }
        format++;
   14020:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   14022:	3301      	adds	r3, #1
   14024:	930a      	str	r3, [sp, #40]	; 0x28
        break;
   14026:	e109      	b.n	1423c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8bc>
      }
#if defined(PRINTF_SUPPORT_FLOAT)
      case 'f' :
      case 'F' :
        idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
   14028:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1402a:	3307      	adds	r3, #7
   1402c:	f023 0307 	bic.w	r3, r3, #7
   14030:	f103 0208 	add.w	r2, r3, #8
   14034:	9224      	str	r2, [sp, #144]	; 0x90
   14036:	ed93 7b00 	vldr	d7, [r3]
   1403a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   1403c:	9302      	str	r3, [sp, #8]
   1403e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   14040:	9301      	str	r3, [sp, #4]
   14042:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   14044:	9300      	str	r3, [sp, #0]
   14046:	eeb0 0a47 	vmov.f32	s0, s14
   1404a:	eef0 0a67 	vmov.f32	s1, s15
   1404e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   14050:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   14052:	990c      	ldr	r1, [sp, #48]	; 0x30
   14054:	980d      	ldr	r0, [sp, #52]	; 0x34
   14056:	f7ff fa77 	bl	13548 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)>
   1405a:	901b      	str	r0, [sp, #108]	; 0x6c
        format++;
   1405c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1405e:	3301      	adds	r3, #1
   14060:	930a      	str	r3, [sp, #40]	; 0x28
        break;
   14062:	e0eb      	b.n	1423c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8bc>
#endif  // PRINTF_SUPPORT_FLOAT
      case 'c' : {
        unsigned int l = 1U;
   14064:	2301      	movs	r3, #1
   14066:	9319      	str	r3, [sp, #100]	; 0x64
        // pre padding
        if (!(flags & FLAGS_LEFT)) {
   14068:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   1406a:	f003 0302 	and.w	r3, r3, #2
   1406e:	2b00      	cmp	r3, #0
   14070:	d113      	bne.n	1409a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x71a>
          while (l++ < width) {
   14072:	9b19      	ldr	r3, [sp, #100]	; 0x64
   14074:	1c5a      	adds	r2, r3, #1
   14076:	9219      	str	r2, [sp, #100]	; 0x64
   14078:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   1407a:	429a      	cmp	r2, r3
   1407c:	bf8c      	ite	hi
   1407e:	2301      	movhi	r3, #1
   14080:	2300      	movls	r3, #0
   14082:	b2db      	uxtb	r3, r3
   14084:	2b00      	cmp	r3, #0
   14086:	d008      	beq.n	1409a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x71a>
            out(' ', buffer, idx++, maxlen);
   14088:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   1408a:	1c53      	adds	r3, r2, #1
   1408c:	931b      	str	r3, [sp, #108]	; 0x6c
   1408e:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   14090:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   14092:	990c      	ldr	r1, [sp, #48]	; 0x30
   14094:	2020      	movs	r0, #32
   14096:	47a0      	blx	r4
          while (l++ < width) {
   14098:	e7eb      	b.n	14072 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x6f2>
          }
        }
        // char output
        out((char)va_arg(va, int), buffer, idx++, maxlen);
   1409a:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1409c:	1d1a      	adds	r2, r3, #4
   1409e:	9224      	str	r2, [sp, #144]	; 0x90
   140a0:	681b      	ldr	r3, [r3, #0]
   140a2:	b2d8      	uxtb	r0, r3
   140a4:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   140a6:	1c53      	adds	r3, r2, #1
   140a8:	931b      	str	r3, [sp, #108]	; 0x6c
   140aa:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   140ac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   140ae:	990c      	ldr	r1, [sp, #48]	; 0x30
   140b0:	47a0      	blx	r4
        // post padding
        if (flags & FLAGS_LEFT) {
   140b2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   140b4:	f003 0302 	and.w	r3, r3, #2
   140b8:	2b00      	cmp	r3, #0
   140ba:	d013      	beq.n	140e4 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x764>
          while (l++ < width) {
   140bc:	9b19      	ldr	r3, [sp, #100]	; 0x64
   140be:	1c5a      	adds	r2, r3, #1
   140c0:	9219      	str	r2, [sp, #100]	; 0x64
   140c2:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   140c4:	429a      	cmp	r2, r3
   140c6:	bf8c      	ite	hi
   140c8:	2301      	movhi	r3, #1
   140ca:	2300      	movls	r3, #0
   140cc:	b2db      	uxtb	r3, r3
   140ce:	2b00      	cmp	r3, #0
   140d0:	d008      	beq.n	140e4 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x764>
            out(' ', buffer, idx++, maxlen);
   140d2:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   140d4:	1c53      	adds	r3, r2, #1
   140d6:	931b      	str	r3, [sp, #108]	; 0x6c
   140d8:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   140da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   140dc:	990c      	ldr	r1, [sp, #48]	; 0x30
   140de:	2020      	movs	r0, #32
   140e0:	47a0      	blx	r4
          while (l++ < width) {
   140e2:	e7eb      	b.n	140bc <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x73c>
          }
        }
        format++;
   140e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   140e6:	3301      	adds	r3, #1
   140e8:	930a      	str	r3, [sp, #40]	; 0x28
        break;
   140ea:	e0a7      	b.n	1423c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8bc>
      }

      case 's' : {
        char* p = va_arg(va, char*);
   140ec:	9b24      	ldr	r3, [sp, #144]	; 0x90
   140ee:	1d1a      	adds	r2, r3, #4
   140f0:	9224      	str	r2, [sp, #144]	; 0x90
   140f2:	681b      	ldr	r3, [r3, #0]
   140f4:	9318      	str	r3, [sp, #96]	; 0x60
        unsigned int l = _strlen(p);
   140f6:	9818      	ldr	r0, [sp, #96]	; 0x60
   140f8:	f7fe ff98 	bl	1302c <_strlen(char const*)>
   140fc:	9017      	str	r0, [sp, #92]	; 0x5c
        // pre padding
        if (flags & FLAGS_PRECISION) {
   140fe:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   14100:	f403 6380 	and.w	r3, r3, #1024	; 0x400
   14104:	2b00      	cmp	r3, #0
   14106:	d007      	beq.n	14118 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x798>
          l = (l < precision ? l : precision);
   14108:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   1410a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   1410c:	429a      	cmp	r2, r3
   1410e:	d201      	bcs.n	14114 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x794>
   14110:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   14112:	e000      	b.n	14116 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x796>
   14114:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   14116:	9317      	str	r3, [sp, #92]	; 0x5c
        }
        if (!(flags & FLAGS_LEFT)) {
   14118:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   1411a:	f003 0302 	and.w	r3, r3, #2
   1411e:	2b00      	cmp	r3, #0
   14120:	d113      	bne.n	1414a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7ca>
          while (l++ < width) {
   14122:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   14124:	1c5a      	adds	r2, r3, #1
   14126:	9217      	str	r2, [sp, #92]	; 0x5c
   14128:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   1412a:	429a      	cmp	r2, r3
   1412c:	bf8c      	ite	hi
   1412e:	2301      	movhi	r3, #1
   14130:	2300      	movls	r3, #0
   14132:	b2db      	uxtb	r3, r3
   14134:	2b00      	cmp	r3, #0
   14136:	d008      	beq.n	1414a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7ca>
            out(' ', buffer, idx++, maxlen);
   14138:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   1413a:	1c53      	adds	r3, r2, #1
   1413c:	931b      	str	r3, [sp, #108]	; 0x6c
   1413e:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   14140:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   14142:	990c      	ldr	r1, [sp, #48]	; 0x30
   14144:	2020      	movs	r0, #32
   14146:	47a0      	blx	r4
          while (l++ < width) {
   14148:	e7eb      	b.n	14122 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7a2>
          }
        }
        // string output
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
   1414a:	9b18      	ldr	r3, [sp, #96]	; 0x60
   1414c:	781b      	ldrb	r3, [r3, #0]
   1414e:	2b00      	cmp	r3, #0
   14150:	d00b      	beq.n	1416a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7ea>
   14152:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   14154:	f403 6380 	and.w	r3, r3, #1024	; 0x400
   14158:	2b00      	cmp	r3, #0
   1415a:	d004      	beq.n	14166 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7e6>
   1415c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   1415e:	1e5a      	subs	r2, r3, #1
   14160:	921d      	str	r2, [sp, #116]	; 0x74
   14162:	2b00      	cmp	r3, #0
   14164:	d001      	beq.n	1416a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7ea>
   14166:	2301      	movs	r3, #1
   14168:	e000      	b.n	1416c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7ec>
   1416a:	2300      	movs	r3, #0
   1416c:	2b00      	cmp	r3, #0
   1416e:	d00b      	beq.n	14188 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x808>
          out(*(p++), buffer, idx++, maxlen);
   14170:	9b18      	ldr	r3, [sp, #96]	; 0x60
   14172:	1c5a      	adds	r2, r3, #1
   14174:	9218      	str	r2, [sp, #96]	; 0x60
   14176:	7818      	ldrb	r0, [r3, #0]
   14178:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   1417a:	1c53      	adds	r3, r2, #1
   1417c:	931b      	str	r3, [sp, #108]	; 0x6c
   1417e:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   14180:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   14182:	990c      	ldr	r1, [sp, #48]	; 0x30
   14184:	47a0      	blx	r4
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
   14186:	e7e0      	b.n	1414a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7ca>
        }
        // post padding
        if (flags & FLAGS_LEFT) {
   14188:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   1418a:	f003 0302 	and.w	r3, r3, #2
   1418e:	2b00      	cmp	r3, #0
   14190:	d013      	beq.n	141ba <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x83a>
          while (l++ < width) {
   14192:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   14194:	1c5a      	adds	r2, r3, #1
   14196:	9217      	str	r2, [sp, #92]	; 0x5c
   14198:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   1419a:	429a      	cmp	r2, r3
   1419c:	bf8c      	ite	hi
   1419e:	2301      	movhi	r3, #1
   141a0:	2300      	movls	r3, #0
   141a2:	b2db      	uxtb	r3, r3
   141a4:	2b00      	cmp	r3, #0
   141a6:	d008      	beq.n	141ba <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x83a>
            out(' ', buffer, idx++, maxlen);
   141a8:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   141aa:	1c53      	adds	r3, r2, #1
   141ac:	931b      	str	r3, [sp, #108]	; 0x6c
   141ae:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   141b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   141b2:	990c      	ldr	r1, [sp, #48]	; 0x30
   141b4:	2020      	movs	r0, #32
   141b6:	47a0      	blx	r4
          while (l++ < width) {
   141b8:	e7eb      	b.n	14192 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x812>
          }
        }
        format++;
   141ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   141bc:	3301      	adds	r3, #1
   141be:	930a      	str	r3, [sp, #40]	; 0x28
        break;
   141c0:	e03c      	b.n	1423c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8bc>
      }

      case 'p' : {
        width = sizeof(void*) * 2U;
   141c2:	2308      	movs	r3, #8
   141c4:	931e      	str	r3, [sp, #120]	; 0x78
        flags |= FLAGS_ZEROPAD | FLAGS_UPPERCASE;
   141c6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   141c8:	f043 0321 	orr.w	r3, r3, #33	; 0x21
   141cc:	931f      	str	r3, [sp, #124]	; 0x7c
#if defined(PRINTF_SUPPORT_LONG_LONG)
        const bool is_ll = sizeof(uintptr_t) == sizeof(long long);
   141ce:	2300      	movs	r3, #0
   141d0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
        if (is_ll) {
          idx = _ntoa_long_long(out, buffer, idx, maxlen, (uintptr_t)va_arg(va, void*), false, 16U, precision, width, flags);
        }
        else {
#endif
          idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void*)), false, 16U, precision, width, flags);
   141d4:	9b24      	ldr	r3, [sp, #144]	; 0x90
   141d6:	1d1a      	adds	r2, r3, #4
   141d8:	9224      	str	r2, [sp, #144]	; 0x90
   141da:	681b      	ldr	r3, [r3, #0]
   141dc:	461a      	mov	r2, r3
   141de:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   141e0:	9305      	str	r3, [sp, #20]
   141e2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   141e4:	9304      	str	r3, [sp, #16]
   141e6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   141e8:	9303      	str	r3, [sp, #12]
   141ea:	2310      	movs	r3, #16
   141ec:	9302      	str	r3, [sp, #8]
   141ee:	2300      	movs	r3, #0
   141f0:	9301      	str	r3, [sp, #4]
   141f2:	9200      	str	r2, [sp, #0]
   141f4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   141f6:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   141f8:	990c      	ldr	r1, [sp, #48]	; 0x30
   141fa:	980d      	ldr	r0, [sp, #52]	; 0x34
   141fc:	f7ff f8b8 	bl	13370 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)>
   14200:	901b      	str	r0, [sp, #108]	; 0x6c
#if defined(PRINTF_SUPPORT_LONG_LONG)
        }
#endif
        format++;
   14202:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   14204:	3301      	adds	r3, #1
   14206:	930a      	str	r3, [sp, #40]	; 0x28
        break;
   14208:	e018      	b.n	1423c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8bc>
      }

      case '%' :
        out('%', buffer, idx++, maxlen);
   1420a:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   1420c:	1c53      	adds	r3, r2, #1
   1420e:	931b      	str	r3, [sp, #108]	; 0x6c
   14210:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   14212:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   14214:	990c      	ldr	r1, [sp, #48]	; 0x30
   14216:	2025      	movs	r0, #37	; 0x25
   14218:	47a0      	blx	r4
        format++;
   1421a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1421c:	3301      	adds	r3, #1
   1421e:	930a      	str	r3, [sp, #40]	; 0x28
        break;
   14220:	e00c      	b.n	1423c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8bc>

      default :
        out(*format, buffer, idx++, maxlen);
   14222:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   14224:	7818      	ldrb	r0, [r3, #0]
   14226:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   14228:	1c53      	adds	r3, r2, #1
   1422a:	931b      	str	r3, [sp, #108]	; 0x6c
   1422c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   1422e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   14230:	990c      	ldr	r1, [sp, #48]	; 0x30
   14232:	47a0      	blx	r4
        format++;
   14234:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   14236:	3301      	adds	r3, #1
   14238:	930a      	str	r3, [sp, #40]	; 0x28
        break;
   1423a:	bf00      	nop
  while (*format)
   1423c:	f7ff bbb3 	b.w	139a6 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x26>
    }
  }

  // termination
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
   14240:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   14242:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   14244:	429a      	cmp	r2, r3
   14246:	d302      	bcc.n	1424e <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8ce>
   14248:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1424a:	1e5a      	subs	r2, r3, #1
   1424c:	e000      	b.n	14250 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8d0>
   1424e:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   14250:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   14252:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   14254:	990c      	ldr	r1, [sp, #48]	; 0x30
   14256:	2000      	movs	r0, #0
   14258:	47a0      	blx	r4

  // return written chars without terminating \0
  return (int)idx;
   1425a:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
   1425c:	4633      	mov	r3, r6
   1425e:	4619      	mov	r1, r3
   14260:	4803      	ldr	r0, [pc, #12]	; (14270 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8f0>)
   14262:	f7fe fdbf 	bl	12de4 <__cyg_profile_func_exit>
   14266:	4623      	mov	r3, r4
}
   14268:	4618      	mov	r0, r3
   1426a:	b020      	add	sp, #128	; 0x80
   1426c:	bd70      	pop	{r4, r5, r6, pc}
   1426e:	bf00      	nop
   14270:	00013981 	.word	0x00013981

00014274 <printf>:

///////////////////////////////////////////////////////////////////////////////


int printf(const char* format, ...)
{
   14274:	b40f      	push	{r0, r1, r2, r3}
   14276:	b530      	push	{r4, r5, lr}
   14278:	b087      	sub	sp, #28
   1427a:	4675      	mov	r5, lr
   1427c:	462b      	mov	r3, r5
   1427e:	4619      	mov	r1, r3
   14280:	480d      	ldr	r0, [pc, #52]	; (142b8 <printf+0x44>)
   14282:	f7fe fd9b 	bl	12dbc <__cyg_profile_func_enter>
  va_list va;
  va_start(va, format);
   14286:	ab0b      	add	r3, sp, #44	; 0x2c
   14288:	9304      	str	r3, [sp, #16]
  char buffer[1];
  const int ret = _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
   1428a:	a903      	add	r1, sp, #12
   1428c:	9b04      	ldr	r3, [sp, #16]
   1428e:	9300      	str	r3, [sp, #0]
   14290:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   14292:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   14296:	4809      	ldr	r0, [pc, #36]	; (142bc <printf+0x48>)
   14298:	f7ff fb72 	bl	13980 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)>
   1429c:	9005      	str	r0, [sp, #20]
  va_end(va);
  return ret;
   1429e:	9c05      	ldr	r4, [sp, #20]
   142a0:	462b      	mov	r3, r5
   142a2:	4619      	mov	r1, r3
   142a4:	4804      	ldr	r0, [pc, #16]	; (142b8 <printf+0x44>)
   142a6:	f7fe fd9d 	bl	12de4 <__cyg_profile_func_exit>
   142aa:	4623      	mov	r3, r4
}
   142ac:	4618      	mov	r0, r3
   142ae:	b007      	add	sp, #28
   142b0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   142b4:	b004      	add	sp, #16
   142b6:	4770      	bx	lr
   142b8:	00014275 	.word	0x00014275
   142bc:	00012fe9 	.word	0x00012fe9

000142c0 <PinInterface::PinInterface()>:
class PinInterface
   142c0:	b530      	push	{r4, r5, lr}
   142c2:	b083      	sub	sp, #12
   142c4:	4675      	mov	r5, lr
   142c6:	9001      	str	r0, [sp, #4]
   142c8:	462b      	mov	r3, r5
   142ca:	4619      	mov	r1, r3
   142cc:	4807      	ldr	r0, [pc, #28]	; (142ec <PinInterface::PinInterface()+0x2c>)
   142ce:	f7fe fd75 	bl	12dbc <__cyg_profile_func_enter>
   142d2:	4a07      	ldr	r2, [pc, #28]	; (142f0 <PinInterface::PinInterface()+0x30>)
   142d4:	9b01      	ldr	r3, [sp, #4]
   142d6:	601a      	str	r2, [r3, #0]
   142d8:	9c01      	ldr	r4, [sp, #4]
   142da:	462b      	mov	r3, r5
   142dc:	4619      	mov	r1, r3
   142de:	4803      	ldr	r0, [pc, #12]	; (142ec <PinInterface::PinInterface()+0x2c>)
   142e0:	f7fe fd80 	bl	12de4 <__cyg_profile_func_exit>
   142e4:	4623      	mov	r3, r4
   142e6:	4618      	mov	r0, r3
   142e8:	b003      	add	sp, #12
   142ea:	bd30      	pop	{r4, r5, pc}
   142ec:	000142c1 	.word	0x000142c1
   142f0:	00018e68 	.word	0x00018e68

000142f4 <Pin::Pin(unsigned char, unsigned char)>:
  constexpr Pin(uint8_t port_number, uint8_t pin_number)
   142f4:	b530      	push	{r4, r5, lr}
   142f6:	b083      	sub	sp, #12
   142f8:	4675      	mov	r5, lr
   142fa:	9001      	str	r0, [sp, #4]
   142fc:	460b      	mov	r3, r1
   142fe:	f88d 3003 	strb.w	r3, [sp, #3]
   14302:	4613      	mov	r3, r2
   14304:	f88d 3002 	strb.w	r3, [sp, #2]
   14308:	462b      	mov	r3, r5
   1430a:	4619      	mov	r1, r3
   1430c:	480d      	ldr	r0, [pc, #52]	; (14344 <Pin::Pin(unsigned char, unsigned char)+0x50>)
   1430e:	f7fe fd55 	bl	12dbc <__cyg_profile_func_enter>
      : port_(port_number), pin_(pin_number)
   14312:	9b01      	ldr	r3, [sp, #4]
   14314:	4618      	mov	r0, r3
   14316:	f7ff ffd3 	bl	142c0 <PinInterface::PinInterface()>
   1431a:	4a0b      	ldr	r2, [pc, #44]	; (14348 <Pin::Pin(unsigned char, unsigned char)+0x54>)
   1431c:	9b01      	ldr	r3, [sp, #4]
   1431e:	601a      	str	r2, [r3, #0]
   14320:	9b01      	ldr	r3, [sp, #4]
   14322:	f89d 2003 	ldrb.w	r2, [sp, #3]
   14326:	711a      	strb	r2, [r3, #4]
   14328:	9b01      	ldr	r3, [sp, #4]
   1432a:	f89d 2002 	ldrb.w	r2, [sp, #2]
   1432e:	715a      	strb	r2, [r3, #5]
  }
   14330:	9c01      	ldr	r4, [sp, #4]
   14332:	462b      	mov	r3, r5
   14334:	4619      	mov	r1, r3
   14336:	4803      	ldr	r0, [pc, #12]	; (14344 <Pin::Pin(unsigned char, unsigned char)+0x50>)
   14338:	f7fe fd54 	bl	12de4 <__cyg_profile_func_exit>
   1433c:	4623      	mov	r3, r4
   1433e:	4618      	mov	r0, r3
   14340:	b003      	add	sp, #12
   14342:	bd30      	pop	{r4, r5, pc}
   14344:	000142f5 	.word	0x000142f5
   14348:	000177cc 	.word	0x000177cc

0001434c <GpioInterface::GpioInterface()>:
class GpioInterface
   1434c:	b530      	push	{r4, r5, lr}
   1434e:	b083      	sub	sp, #12
   14350:	4675      	mov	r5, lr
   14352:	9001      	str	r0, [sp, #4]
   14354:	462b      	mov	r3, r5
   14356:	4619      	mov	r1, r3
   14358:	4807      	ldr	r0, [pc, #28]	; (14378 <GpioInterface::GpioInterface()+0x2c>)
   1435a:	f7fe fd2f 	bl	12dbc <__cyg_profile_func_enter>
   1435e:	4a07      	ldr	r2, [pc, #28]	; (1437c <GpioInterface::GpioInterface()+0x30>)
   14360:	9b01      	ldr	r3, [sp, #4]
   14362:	601a      	str	r2, [r3, #0]
   14364:	9c01      	ldr	r4, [sp, #4]
   14366:	462b      	mov	r3, r5
   14368:	4619      	mov	r1, r3
   1436a:	4803      	ldr	r0, [pc, #12]	; (14378 <GpioInterface::GpioInterface()+0x2c>)
   1436c:	f7fe fd3a 	bl	12de4 <__cyg_profile_func_exit>
   14370:	4623      	mov	r3, r4
   14372:	4618      	mov	r0, r3
   14374:	b003      	add	sp, #12
   14376:	bd30      	pop	{r4, r5, pc}
   14378:	0001434d 	.word	0x0001434d
   1437c:	00018e20 	.word	0x00018e20

00014380 <Gpio::Gpio(unsigned char, unsigned char)>:
  constexpr Gpio(uint8_t port_number, uint8_t pin_number)
   14380:	b530      	push	{r4, r5, lr}
   14382:	b083      	sub	sp, #12
   14384:	4675      	mov	r5, lr
   14386:	9001      	str	r0, [sp, #4]
   14388:	460b      	mov	r3, r1
   1438a:	f88d 3003 	strb.w	r3, [sp, #3]
   1438e:	4613      	mov	r3, r2
   14390:	f88d 3002 	strb.w	r3, [sp, #2]
   14394:	462b      	mov	r3, r5
   14396:	4619      	mov	r1, r3
   14398:	4816      	ldr	r0, [pc, #88]	; (143f4 <Gpio::Gpio(unsigned char, unsigned char)+0x74>)
   1439a:	f7fe fd0f 	bl	12dbc <__cyg_profile_func_enter>
        lpc40xx_pin_(port_number, pin_number)
   1439e:	9b01      	ldr	r3, [sp, #4]
   143a0:	4618      	mov	r0, r3
   143a2:	f7ff ffd3 	bl	1434c <GpioInterface::GpioInterface()>
   143a6:	4a14      	ldr	r2, [pc, #80]	; (143f8 <Gpio::Gpio(unsigned char, unsigned char)+0x78>)
   143a8:	9b01      	ldr	r3, [sp, #4]
   143aa:	601a      	str	r2, [r3, #0]
   143ac:	9b01      	ldr	r3, [sp, #4]
   143ae:	2200      	movs	r2, #0
   143b0:	711a      	strb	r2, [r3, #4]
   143b2:	9b01      	ldr	r3, [sp, #4]
   143b4:	f103 020c 	add.w	r2, r3, #12
   143b8:	9b01      	ldr	r3, [sp, #4]
   143ba:	609a      	str	r2, [r3, #8]
   143bc:	9b01      	ldr	r3, [sp, #4]
   143be:	330c      	adds	r3, #12
   143c0:	f89d 2002 	ldrb.w	r2, [sp, #2]
   143c4:	f89d 1003 	ldrb.w	r1, [sp, #3]
   143c8:	4618      	mov	r0, r3
   143ca:	f7ff ff93 	bl	142f4 <Pin::Pin(unsigned char, unsigned char)>
    interupt_port_ = (port_number == 2) ? 1 : 0;
   143ce:	f89d 3003 	ldrb.w	r3, [sp, #3]
   143d2:	2b02      	cmp	r3, #2
   143d4:	d101      	bne.n	143da <Gpio::Gpio(unsigned char, unsigned char)+0x5a>
   143d6:	2201      	movs	r2, #1
   143d8:	e000      	b.n	143dc <Gpio::Gpio(unsigned char, unsigned char)+0x5c>
   143da:	2200      	movs	r2, #0
   143dc:	9b01      	ldr	r3, [sp, #4]
   143de:	711a      	strb	r2, [r3, #4]
  }
   143e0:	9c01      	ldr	r4, [sp, #4]
   143e2:	462b      	mov	r3, r5
   143e4:	4619      	mov	r1, r3
   143e6:	4803      	ldr	r0, [pc, #12]	; (143f4 <Gpio::Gpio(unsigned char, unsigned char)+0x74>)
   143e8:	f7fe fcfc 	bl	12de4 <__cyg_profile_func_exit>
   143ec:	4623      	mov	r3, r4
   143ee:	4618      	mov	r0, r3
   143f0:	b003      	add	sp, #12
   143f2:	bd30      	pop	{r4, r5, pc}
   143f4:	00014381 	.word	0x00014381
   143f8:	00018dd8 	.word	0x00018dd8

000143fc <Gpio::SetAsInput()>:
  void SetAsInput(void) override
   143fc:	b530      	push	{r4, r5, lr}
   143fe:	b083      	sub	sp, #12
   14400:	4675      	mov	r5, lr
   14402:	9001      	str	r0, [sp, #4]
   14404:	462b      	mov	r3, r5
   14406:	4619      	mov	r1, r3
   14408:	4819      	ldr	r0, [pc, #100]	; (14470 <Gpio::SetAsInput()+0x74>)
   1440a:	f7fe fcd7 	bl	12dbc <__cyg_profile_func_enter>
    pin_->SetPinFunction(kGpioFunction);
   1440e:	9b01      	ldr	r3, [sp, #4]
   14410:	689a      	ldr	r2, [r3, #8]
   14412:	9b01      	ldr	r3, [sp, #4]
   14414:	689b      	ldr	r3, [r3, #8]
   14416:	681b      	ldr	r3, [r3, #0]
   14418:	681b      	ldr	r3, [r3, #0]
   1441a:	2100      	movs	r1, #0
   1441c:	4610      	mov	r0, r2
   1441e:	4798      	blx	r3
    gpio_port[pin_->GetPort()]->DIR &= ~(1 << pin_->GetPin());
   14420:	9b01      	ldr	r3, [sp, #4]
   14422:	689a      	ldr	r2, [r3, #8]
   14424:	9b01      	ldr	r3, [sp, #4]
   14426:	689b      	ldr	r3, [r3, #8]
   14428:	681b      	ldr	r3, [r3, #0]
   1442a:	3330      	adds	r3, #48	; 0x30
   1442c:	681b      	ldr	r3, [r3, #0]
   1442e:	4610      	mov	r0, r2
   14430:	4798      	blx	r3
   14432:	4603      	mov	r3, r0
   14434:	461a      	mov	r2, r3
   14436:	2301      	movs	r3, #1
   14438:	4093      	lsls	r3, r2
   1443a:	43dc      	mvns	r4, r3
   1443c:	9b01      	ldr	r3, [sp, #4]
   1443e:	689a      	ldr	r2, [r3, #8]
   14440:	9b01      	ldr	r3, [sp, #4]
   14442:	689b      	ldr	r3, [r3, #8]
   14444:	681b      	ldr	r3, [r3, #0]
   14446:	332c      	adds	r3, #44	; 0x2c
   14448:	681b      	ldr	r3, [r3, #0]
   1444a:	4610      	mov	r0, r2
   1444c:	4798      	blx	r3
   1444e:	4603      	mov	r3, r0
   14450:	461a      	mov	r2, r3
   14452:	4b08      	ldr	r3, [pc, #32]	; (14474 <Gpio::SetAsInput()+0x78>)
   14454:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   14458:	681a      	ldr	r2, [r3, #0]
   1445a:	4621      	mov	r1, r4
   1445c:	400a      	ands	r2, r1
   1445e:	601a      	str	r2, [r3, #0]
   14460:	462b      	mov	r3, r5
   14462:	4619      	mov	r1, r3
   14464:	4802      	ldr	r0, [pc, #8]	; (14470 <Gpio::SetAsInput()+0x74>)
   14466:	f7fe fcbd 	bl	12de4 <__cyg_profile_func_exit>
  }
   1446a:	bf00      	nop
   1446c:	b003      	add	sp, #12
   1446e:	bd30      	pop	{r4, r5, pc}
   14470:	000143fd 	.word	0x000143fd
   14474:	1000001c 	.word	0x1000001c

00014478 <Gpio::SetAsOutput()>:
  void SetAsOutput(void) override
   14478:	b530      	push	{r4, r5, lr}
   1447a:	b083      	sub	sp, #12
   1447c:	4675      	mov	r5, lr
   1447e:	9001      	str	r0, [sp, #4]
   14480:	462b      	mov	r3, r5
   14482:	4619      	mov	r1, r3
   14484:	4819      	ldr	r0, [pc, #100]	; (144ec <Gpio::SetAsOutput()+0x74>)
   14486:	f7fe fc99 	bl	12dbc <__cyg_profile_func_enter>
    pin_->SetPinFunction(kGpioFunction);
   1448a:	9b01      	ldr	r3, [sp, #4]
   1448c:	689a      	ldr	r2, [r3, #8]
   1448e:	9b01      	ldr	r3, [sp, #4]
   14490:	689b      	ldr	r3, [r3, #8]
   14492:	681b      	ldr	r3, [r3, #0]
   14494:	681b      	ldr	r3, [r3, #0]
   14496:	2100      	movs	r1, #0
   14498:	4610      	mov	r0, r2
   1449a:	4798      	blx	r3
    gpio_port[pin_->GetPort()]->DIR |= (1 << pin_->GetPin());
   1449c:	9b01      	ldr	r3, [sp, #4]
   1449e:	689a      	ldr	r2, [r3, #8]
   144a0:	9b01      	ldr	r3, [sp, #4]
   144a2:	689b      	ldr	r3, [r3, #8]
   144a4:	681b      	ldr	r3, [r3, #0]
   144a6:	3330      	adds	r3, #48	; 0x30
   144a8:	681b      	ldr	r3, [r3, #0]
   144aa:	4610      	mov	r0, r2
   144ac:	4798      	blx	r3
   144ae:	4603      	mov	r3, r0
   144b0:	461a      	mov	r2, r3
   144b2:	2301      	movs	r3, #1
   144b4:	fa03 f402 	lsl.w	r4, r3, r2
   144b8:	9b01      	ldr	r3, [sp, #4]
   144ba:	689a      	ldr	r2, [r3, #8]
   144bc:	9b01      	ldr	r3, [sp, #4]
   144be:	689b      	ldr	r3, [r3, #8]
   144c0:	681b      	ldr	r3, [r3, #0]
   144c2:	332c      	adds	r3, #44	; 0x2c
   144c4:	681b      	ldr	r3, [r3, #0]
   144c6:	4610      	mov	r0, r2
   144c8:	4798      	blx	r3
   144ca:	4603      	mov	r3, r0
   144cc:	461a      	mov	r2, r3
   144ce:	4b08      	ldr	r3, [pc, #32]	; (144f0 <Gpio::SetAsOutput()+0x78>)
   144d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   144d4:	681a      	ldr	r2, [r3, #0]
   144d6:	4621      	mov	r1, r4
   144d8:	430a      	orrs	r2, r1
   144da:	601a      	str	r2, [r3, #0]
   144dc:	462b      	mov	r3, r5
   144de:	4619      	mov	r1, r3
   144e0:	4802      	ldr	r0, [pc, #8]	; (144ec <Gpio::SetAsOutput()+0x74>)
   144e2:	f7fe fc7f 	bl	12de4 <__cyg_profile_func_exit>
  }
   144e6:	bf00      	nop
   144e8:	b003      	add	sp, #12
   144ea:	bd30      	pop	{r4, r5, pc}
   144ec:	00014479 	.word	0x00014479
   144f0:	1000001c 	.word	0x1000001c

000144f4 <Gpio::SetDirection(GpioInterface::Direction)>:
  inline void SetDirection(Direction direction) override
   144f4:	b510      	push	{r4, lr}
   144f6:	b082      	sub	sp, #8
   144f8:	4674      	mov	r4, lr
   144fa:	9001      	str	r0, [sp, #4]
   144fc:	460b      	mov	r3, r1
   144fe:	f88d 3003 	strb.w	r3, [sp, #3]
   14502:	4623      	mov	r3, r4
   14504:	4619      	mov	r1, r3
   14506:	480b      	ldr	r0, [pc, #44]	; (14534 <Gpio::SetDirection(GpioInterface::Direction)+0x40>)
   14508:	f7fe fc58 	bl	12dbc <__cyg_profile_func_enter>
    (direction) ? SetAsOutput() : SetAsInput();
   1450c:	f89d 3003 	ldrb.w	r3, [sp, #3]
   14510:	2b00      	cmp	r3, #0
   14512:	d003      	beq.n	1451c <Gpio::SetDirection(GpioInterface::Direction)+0x28>
   14514:	9801      	ldr	r0, [sp, #4]
   14516:	f7ff ffaf 	bl	14478 <Gpio::SetAsOutput()>
   1451a:	e002      	b.n	14522 <Gpio::SetDirection(GpioInterface::Direction)+0x2e>
   1451c:	9801      	ldr	r0, [sp, #4]
   1451e:	f7ff ff6d 	bl	143fc <Gpio::SetAsInput()>
   14522:	4623      	mov	r3, r4
   14524:	4619      	mov	r1, r3
   14526:	4803      	ldr	r0, [pc, #12]	; (14534 <Gpio::SetDirection(GpioInterface::Direction)+0x40>)
   14528:	f7fe fc5c 	bl	12de4 <__cyg_profile_func_exit>
  }
   1452c:	bf00      	nop
   1452e:	b002      	add	sp, #8
   14530:	bd10      	pop	{r4, pc}
   14532:	bf00      	nop
   14534:	000144f5 	.word	0x000144f5

00014538 <Gpio::Toggle()>:
  // Toggle the output of a GPIO output pin
  void Toggle() override
   14538:	b530      	push	{r4, r5, lr}
   1453a:	b083      	sub	sp, #12
   1453c:	4675      	mov	r5, lr
   1453e:	9001      	str	r0, [sp, #4]
   14540:	462b      	mov	r3, r5
   14542:	4619      	mov	r1, r3
   14544:	4815      	ldr	r0, [pc, #84]	; (1459c <Gpio::Toggle()+0x64>)
   14546:	f7fe fc39 	bl	12dbc <__cyg_profile_func_enter>
  {
    gpio_port[pin_->GetPort()]->PIN ^= (1 << pin_->GetPin());
   1454a:	9b01      	ldr	r3, [sp, #4]
   1454c:	689a      	ldr	r2, [r3, #8]
   1454e:	9b01      	ldr	r3, [sp, #4]
   14550:	689b      	ldr	r3, [r3, #8]
   14552:	681b      	ldr	r3, [r3, #0]
   14554:	3330      	adds	r3, #48	; 0x30
   14556:	681b      	ldr	r3, [r3, #0]
   14558:	4610      	mov	r0, r2
   1455a:	4798      	blx	r3
   1455c:	4603      	mov	r3, r0
   1455e:	461a      	mov	r2, r3
   14560:	2301      	movs	r3, #1
   14562:	fa03 f402 	lsl.w	r4, r3, r2
   14566:	9b01      	ldr	r3, [sp, #4]
   14568:	689a      	ldr	r2, [r3, #8]
   1456a:	9b01      	ldr	r3, [sp, #4]
   1456c:	689b      	ldr	r3, [r3, #8]
   1456e:	681b      	ldr	r3, [r3, #0]
   14570:	332c      	adds	r3, #44	; 0x2c
   14572:	681b      	ldr	r3, [r3, #0]
   14574:	4610      	mov	r0, r2
   14576:	4798      	blx	r3
   14578:	4603      	mov	r3, r0
   1457a:	461a      	mov	r2, r3
   1457c:	4b08      	ldr	r3, [pc, #32]	; (145a0 <Gpio::Toggle()+0x68>)
   1457e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   14582:	695a      	ldr	r2, [r3, #20]
   14584:	4621      	mov	r1, r4
   14586:	404a      	eors	r2, r1
   14588:	615a      	str	r2, [r3, #20]
   1458a:	462b      	mov	r3, r5
   1458c:	4619      	mov	r1, r3
   1458e:	4803      	ldr	r0, [pc, #12]	; (1459c <Gpio::Toggle()+0x64>)
   14590:	f7fe fc28 	bl	12de4 <__cyg_profile_func_exit>
  }
   14594:	bf00      	nop
   14596:	b003      	add	sp, #12
   14598:	bd30      	pop	{r4, r5, pc}
   1459a:	bf00      	nop
   1459c:	00014539 	.word	0x00014539
   145a0:	1000001c 	.word	0x1000001c

000145a4 <Gpio::ReadState()>:
  // Returns the current State state of the pin
  State ReadState(void) override
   145a4:	b530      	push	{r4, r5, lr}
   145a6:	b085      	sub	sp, #20
   145a8:	4675      	mov	r5, lr
   145aa:	9001      	str	r0, [sp, #4]
   145ac:	462b      	mov	r3, r5
   145ae:	4619      	mov	r1, r3
   145b0:	4818      	ldr	r0, [pc, #96]	; (14614 <Gpio::ReadState()+0x70>)
   145b2:	f7fe fc03 	bl	12dbc <__cyg_profile_func_enter>
  {
    bool state = (gpio_port[pin_->GetPort()]->PIN >> pin_->GetPin()) & 1;
   145b6:	9b01      	ldr	r3, [sp, #4]
   145b8:	689a      	ldr	r2, [r3, #8]
   145ba:	9b01      	ldr	r3, [sp, #4]
   145bc:	689b      	ldr	r3, [r3, #8]
   145be:	681b      	ldr	r3, [r3, #0]
   145c0:	332c      	adds	r3, #44	; 0x2c
   145c2:	681b      	ldr	r3, [r3, #0]
   145c4:	4610      	mov	r0, r2
   145c6:	4798      	blx	r3
   145c8:	4603      	mov	r3, r0
   145ca:	461a      	mov	r2, r3
   145cc:	4b12      	ldr	r3, [pc, #72]	; (14618 <Gpio::ReadState()+0x74>)
   145ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   145d2:	695c      	ldr	r4, [r3, #20]
   145d4:	9b01      	ldr	r3, [sp, #4]
   145d6:	689a      	ldr	r2, [r3, #8]
   145d8:	9b01      	ldr	r3, [sp, #4]
   145da:	689b      	ldr	r3, [r3, #8]
   145dc:	681b      	ldr	r3, [r3, #0]
   145de:	3330      	adds	r3, #48	; 0x30
   145e0:	681b      	ldr	r3, [r3, #0]
   145e2:	4610      	mov	r0, r2
   145e4:	4798      	blx	r3
   145e6:	4603      	mov	r3, r0
   145e8:	fa24 f303 	lsr.w	r3, r4, r3
   145ec:	f003 0301 	and.w	r3, r3, #1
   145f0:	2b00      	cmp	r3, #0
   145f2:	bf14      	ite	ne
   145f4:	2301      	movne	r3, #1
   145f6:	2300      	moveq	r3, #0
   145f8:	f88d 300f 	strb.w	r3, [sp, #15]
    return static_cast<State>(state);
   145fc:	f89d 400f 	ldrb.w	r4, [sp, #15]
   14600:	462b      	mov	r3, r5
   14602:	4619      	mov	r1, r3
   14604:	4803      	ldr	r0, [pc, #12]	; (14614 <Gpio::ReadState()+0x70>)
   14606:	f7fe fbed 	bl	12de4 <__cyg_profile_func_exit>
   1460a:	4623      	mov	r3, r4
  }
   1460c:	4618      	mov	r0, r3
   1460e:	b005      	add	sp, #20
   14610:	bd30      	pop	{r4, r5, pc}
   14612:	bf00      	nop
   14614:	000145a5 	.word	0x000145a5
   14618:	1000001c 	.word	0x1000001c

0001461c <Gpio::Read()>:
  // Returns true if input or output pin is high
  bool Read(void) override
   1461c:	b530      	push	{r4, r5, lr}
   1461e:	b083      	sub	sp, #12
   14620:	4675      	mov	r5, lr
   14622:	9001      	str	r0, [sp, #4]
   14624:	462b      	mov	r3, r5
   14626:	4619      	mov	r1, r3
   14628:	4816      	ldr	r0, [pc, #88]	; (14684 <Gpio::Read()+0x68>)
   1462a:	f7fe fbc7 	bl	12dbc <__cyg_profile_func_enter>
  {
    return (gpio_port[pin_->GetPort()]->PIN >> pin_->GetPin()) & 1;
   1462e:	9b01      	ldr	r3, [sp, #4]
   14630:	689a      	ldr	r2, [r3, #8]
   14632:	9b01      	ldr	r3, [sp, #4]
   14634:	689b      	ldr	r3, [r3, #8]
   14636:	681b      	ldr	r3, [r3, #0]
   14638:	332c      	adds	r3, #44	; 0x2c
   1463a:	681b      	ldr	r3, [r3, #0]
   1463c:	4610      	mov	r0, r2
   1463e:	4798      	blx	r3
   14640:	4603      	mov	r3, r0
   14642:	461a      	mov	r2, r3
   14644:	4b10      	ldr	r3, [pc, #64]	; (14688 <Gpio::Read()+0x6c>)
   14646:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   1464a:	695c      	ldr	r4, [r3, #20]
   1464c:	9b01      	ldr	r3, [sp, #4]
   1464e:	689a      	ldr	r2, [r3, #8]
   14650:	9b01      	ldr	r3, [sp, #4]
   14652:	689b      	ldr	r3, [r3, #8]
   14654:	681b      	ldr	r3, [r3, #0]
   14656:	3330      	adds	r3, #48	; 0x30
   14658:	681b      	ldr	r3, [r3, #0]
   1465a:	4610      	mov	r0, r2
   1465c:	4798      	blx	r3
   1465e:	4603      	mov	r3, r0
   14660:	fa24 f303 	lsr.w	r3, r4, r3
   14664:	f003 0301 	and.w	r3, r3, #1
   14668:	2b00      	cmp	r3, #0
   1466a:	bf14      	ite	ne
   1466c:	2301      	movne	r3, #1
   1466e:	2300      	moveq	r3, #0
   14670:	b2dc      	uxtb	r4, r3
   14672:	462b      	mov	r3, r5
   14674:	4619      	mov	r1, r3
   14676:	4803      	ldr	r0, [pc, #12]	; (14684 <Gpio::Read()+0x68>)
   14678:	f7fe fbb4 	bl	12de4 <__cyg_profile_func_exit>
   1467c:	4623      	mov	r3, r4
  }
   1467e:	4618      	mov	r0, r3
   14680:	b003      	add	sp, #12
   14682:	bd30      	pop	{r4, r5, pc}
   14684:	0001461d 	.word	0x0001461d
   14688:	1000001c 	.word	0x1000001c

0001468c <Gpio::GetPin()>:
  PinInterface & GetPin() override
   1468c:	b530      	push	{r4, r5, lr}
   1468e:	b083      	sub	sp, #12
   14690:	4675      	mov	r5, lr
   14692:	9001      	str	r0, [sp, #4]
   14694:	462b      	mov	r3, r5
   14696:	4619      	mov	r1, r3
   14698:	4806      	ldr	r0, [pc, #24]	; (146b4 <Gpio::GetPin()+0x28>)
   1469a:	f7fe fb8f 	bl	12dbc <__cyg_profile_func_enter>
  {
    return *pin_;
   1469e:	9b01      	ldr	r3, [sp, #4]
   146a0:	689c      	ldr	r4, [r3, #8]
   146a2:	462b      	mov	r3, r5
   146a4:	4619      	mov	r1, r3
   146a6:	4803      	ldr	r0, [pc, #12]	; (146b4 <Gpio::GetPin()+0x28>)
   146a8:	f7fe fb9c 	bl	12de4 <__cyg_profile_func_exit>
   146ac:	4623      	mov	r3, r4
  }
   146ae:	4618      	mov	r0, r3
   146b0:	b003      	add	sp, #12
   146b2:	bd30      	pop	{r4, r5, pc}
   146b4:	0001468d 	.word	0x0001468d

000146b8 <Gpio::ValidPortCheck()>:

  // Checks if the selected gpio port is valid for external interrupts.
  bool ValidPortCheck()
   146b8:	b530      	push	{r4, r5, lr}
   146ba:	b087      	sub	sp, #28
   146bc:	4675      	mov	r5, lr
   146be:	9003      	str	r0, [sp, #12]
   146c0:	462b      	mov	r3, r5
   146c2:	4619      	mov	r1, r3
   146c4:	4817      	ldr	r0, [pc, #92]	; (14724 <Gpio::ValidPortCheck()+0x6c>)
   146c6:	f7fe fb79 	bl	12dbc <__cyg_profile_func_enter>
  {
    bool is_valid = (interupt_port_ <= 1);
   146ca:	9b03      	ldr	r3, [sp, #12]
   146cc:	791b      	ldrb	r3, [r3, #4]
   146ce:	2b01      	cmp	r3, #1
   146d0:	bf94      	ite	ls
   146d2:	2301      	movls	r3, #1
   146d4:	2300      	movhi	r3, #0
   146d6:	b2db      	uxtb	r3, r3
   146d8:	f88d 3017 	strb.w	r3, [sp, #23]
    SJ2_ASSERT_WARNING(is_valid,
   146dc:	f89d 3017 	ldrb.w	r3, [sp, #23]
   146e0:	f083 0301 	eor.w	r3, r3, #1
   146e4:	b2db      	uxtb	r3, r3
   146e6:	2b00      	cmp	r3, #0
   146e8:	d010      	beq.n	1470c <Gpio::ValidPortCheck()+0x54>
   146ea:	9b03      	ldr	r3, [sp, #12]
   146ec:	689a      	ldr	r2, [r3, #8]
   146ee:	9b03      	ldr	r3, [sp, #12]
   146f0:	689b      	ldr	r3, [r3, #8]
   146f2:	681b      	ldr	r3, [r3, #0]
   146f4:	332c      	adds	r3, #44	; 0x2c
   146f6:	681b      	ldr	r3, [r3, #0]
   146f8:	4610      	mov	r0, r2
   146fa:	4798      	blx	r3
   146fc:	4603      	mov	r3, r0
   146fe:	9300      	str	r3, [sp, #0]
   14700:	23a6      	movs	r3, #166	; 0xa6
   14702:	4a09      	ldr	r2, [pc, #36]	; (14728 <Gpio::ValidPortCheck()+0x70>)
   14704:	4909      	ldr	r1, [pc, #36]	; (1472c <Gpio::ValidPortCheck()+0x74>)
   14706:	480a      	ldr	r0, [pc, #40]	; (14730 <Gpio::ValidPortCheck()+0x78>)
   14708:	f7ff fdb4 	bl	14274 <printf>
                       "Port %d cannot be used for External Interrupts. Need "
                       "to use GPIO on Port 0 or 2.",
                       pin_->GetPort());
    return is_valid;
   1470c:	f89d 4017 	ldrb.w	r4, [sp, #23]
   14710:	462b      	mov	r3, r5
   14712:	4619      	mov	r1, r3
   14714:	4803      	ldr	r0, [pc, #12]	; (14724 <Gpio::ValidPortCheck()+0x6c>)
   14716:	f7fe fb65 	bl	12de4 <__cyg_profile_func_exit>
   1471a:	4623      	mov	r3, r4
  }
   1471c:	4618      	mov	r0, r3
   1471e:	b007      	add	sp, #28
   14720:	bd30      	pop	{r4, r5, pc}
   14722:	bf00      	nop
   14724:	000146b9 	.word	0x000146b9
   14728:	00018ed8 	.word	0x00018ed8
   1472c:	000188cc 	.word	0x000188cc
   14730:	00017d9c 	.word	0x00017d9c

00014734 <Gpio::SetInterruptRoutine(void (*)())>:

  // Assigns the developer's ISR function to the port/pin gpio instance.
  void SetInterruptRoutine(IsrPointer function) override
   14734:	b570      	push	{r4, r5, r6, lr}
   14736:	b082      	sub	sp, #8
   14738:	4676      	mov	r6, lr
   1473a:	9001      	str	r0, [sp, #4]
   1473c:	9100      	str	r1, [sp, #0]
   1473e:	4633      	mov	r3, r6
   14740:	4619      	mov	r1, r3
   14742:	4811      	ldr	r0, [pc, #68]	; (14788 <Gpio::SetInterruptRoutine(void (*)())+0x54>)
   14744:	f7fe fb3a 	bl	12dbc <__cyg_profile_func_enter>
  {
    ValidPortCheck();
   14748:	9801      	ldr	r0, [sp, #4]
   1474a:	f7ff ffb5 	bl	146b8 <Gpio::ValidPortCheck()>
    interrupthandlers[interupt_port_][pin_->GetPin()] = function;
   1474e:	9c00      	ldr	r4, [sp, #0]
   14750:	9b01      	ldr	r3, [sp, #4]
   14752:	791b      	ldrb	r3, [r3, #4]
   14754:	461d      	mov	r5, r3
   14756:	9b01      	ldr	r3, [sp, #4]
   14758:	689a      	ldr	r2, [r3, #8]
   1475a:	9b01      	ldr	r3, [sp, #4]
   1475c:	689b      	ldr	r3, [r3, #8]
   1475e:	681b      	ldr	r3, [r3, #0]
   14760:	3330      	adds	r3, #48	; 0x30
   14762:	681b      	ldr	r3, [r3, #0]
   14764:	4610      	mov	r0, r2
   14766:	4798      	blx	r3
   14768:	4603      	mov	r3, r0
   1476a:	4619      	mov	r1, r3
   1476c:	4a07      	ldr	r2, [pc, #28]	; (1478c <Gpio::SetInterruptRoutine(void (*)())+0x58>)
   1476e:	016b      	lsls	r3, r5, #5
   14770:	440b      	add	r3, r1
   14772:	f842 4023 	str.w	r4, [r2, r3, lsl #2]
   14776:	4633      	mov	r3, r6
   14778:	4619      	mov	r1, r3
   1477a:	4803      	ldr	r0, [pc, #12]	; (14788 <Gpio::SetInterruptRoutine(void (*)())+0x54>)
   1477c:	f7fe fb32 	bl	12de4 <__cyg_profile_func_exit>
  }
   14780:	bf00      	nop
   14782:	b002      	add	sp, #8
   14784:	bd70      	pop	{r4, r5, r6, pc}
   14786:	bf00      	nop
   14788:	00014735 	.word	0x00014735
   1478c:	10000458 	.word	0x10000458

00014790 <Gpio::ClearInterruptRoutine()>:

  // Clears the developers ISR function from the port/pin gio instance.
  void ClearInterruptRoutine() override
   14790:	b530      	push	{r4, r5, lr}
   14792:	b083      	sub	sp, #12
   14794:	4675      	mov	r5, lr
   14796:	9001      	str	r0, [sp, #4]
   14798:	462b      	mov	r3, r5
   1479a:	4619      	mov	r1, r3
   1479c:	480f      	ldr	r0, [pc, #60]	; (147dc <Gpio::ClearInterruptRoutine()+0x4c>)
   1479e:	f7fe fb0d 	bl	12dbc <__cyg_profile_func_enter>
  {
    interrupthandlers[interupt_port_][pin_->GetPin()] = nullptr;
   147a2:	9b01      	ldr	r3, [sp, #4]
   147a4:	791b      	ldrb	r3, [r3, #4]
   147a6:	461c      	mov	r4, r3
   147a8:	9b01      	ldr	r3, [sp, #4]
   147aa:	689a      	ldr	r2, [r3, #8]
   147ac:	9b01      	ldr	r3, [sp, #4]
   147ae:	689b      	ldr	r3, [r3, #8]
   147b0:	681b      	ldr	r3, [r3, #0]
   147b2:	3330      	adds	r3, #48	; 0x30
   147b4:	681b      	ldr	r3, [r3, #0]
   147b6:	4610      	mov	r0, r2
   147b8:	4798      	blx	r3
   147ba:	4603      	mov	r3, r0
   147bc:	4619      	mov	r1, r3
   147be:	4a08      	ldr	r2, [pc, #32]	; (147e0 <Gpio::ClearInterruptRoutine()+0x50>)
   147c0:	0163      	lsls	r3, r4, #5
   147c2:	440b      	add	r3, r1
   147c4:	2100      	movs	r1, #0
   147c6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
   147ca:	462b      	mov	r3, r5
   147cc:	4619      	mov	r1, r3
   147ce:	4803      	ldr	r0, [pc, #12]	; (147dc <Gpio::ClearInterruptRoutine()+0x4c>)
   147d0:	f7fe fb08 	bl	12de4 <__cyg_profile_func_exit>
  }
   147d4:	bf00      	nop
   147d6:	b003      	add	sp, #12
   147d8:	bd30      	pop	{r4, r5, pc}
   147da:	bf00      	nop
   147dc:	00014791 	.word	0x00014791
   147e0:	10000458 	.word	0x10000458

000147e4 <unsigned char util::Value<GpioInterface::Edge, unsigned char>(GpioInterface::Edge)>:
constexpr Type Value(Enum enum_type_value)
   147e4:	b530      	push	{r4, r5, lr}
   147e6:	b083      	sub	sp, #12
   147e8:	4675      	mov	r5, lr
   147ea:	4603      	mov	r3, r0
   147ec:	f88d 3007 	strb.w	r3, [sp, #7]
   147f0:	462b      	mov	r3, r5
   147f2:	4619      	mov	r1, r3
   147f4:	4806      	ldr	r0, [pc, #24]	; (14810 <unsigned char util::Value<GpioInterface::Edge, unsigned char>(GpioInterface::Edge)+0x2c>)
   147f6:	f7fe fae1 	bl	12dbc <__cyg_profile_func_enter>
  return static_cast<Type>(enum_type_value);
   147fa:	f89d 4007 	ldrb.w	r4, [sp, #7]
   147fe:	462b      	mov	r3, r5
   14800:	4619      	mov	r1, r3
   14802:	4803      	ldr	r0, [pc, #12]	; (14810 <unsigned char util::Value<GpioInterface::Edge, unsigned char>(GpioInterface::Edge)+0x2c>)
   14804:	f7fe faee 	bl	12de4 <__cyg_profile_func_exit>
   14808:	4623      	mov	r3, r4
}
   1480a:	4618      	mov	r0, r3
   1480c:	b003      	add	sp, #12
   1480e:	bd30      	pop	{r4, r5, pc}
   14810:	000147e5 	.word	0x000147e5

00014814 <Gpio::SetInterruptEdge(GpioInterface::Edge)>:

  // Sets the selected edge that the gpio interrupt will be triggered on.
  void SetInterruptEdge(Edge edge) override
   14814:	b510      	push	{r4, lr}
   14816:	b084      	sub	sp, #16
   14818:	4674      	mov	r4, lr
   1481a:	9003      	str	r0, [sp, #12]
   1481c:	460b      	mov	r3, r1
   1481e:	f88d 300b 	strb.w	r3, [sp, #11]
   14822:	4623      	mov	r3, r4
   14824:	4619      	mov	r1, r3
   14826:	4819      	ldr	r0, [pc, #100]	; (1488c <Gpio::SetInterruptEdge(GpioInterface::Edge)+0x78>)
   14828:	f7fe fac8 	bl	12dbc <__cyg_profile_func_enter>
  {
    ValidPortCheck();
   1482c:	9803      	ldr	r0, [sp, #12]
   1482e:	f7ff ff43 	bl	146b8 <Gpio::ValidPortCheck()>
    switch (edge)
   14832:	f89d 300b 	ldrb.w	r3, [sp, #11]
   14836:	2b01      	cmp	r3, #1
   14838:	d008      	beq.n	1484c <Gpio::SetInterruptEdge(GpioInterface::Edge)+0x38>
   1483a:	2b01      	cmp	r3, #1
   1483c:	d302      	bcc.n	14844 <Gpio::SetInterruptEdge(GpioInterface::Edge)+0x30>
   1483e:	2b02      	cmp	r3, #2
   14840:	d008      	beq.n	14854 <Gpio::SetInterruptEdge(GpioInterface::Edge)+0x40>
   14842:	e00e      	b.n	14862 <Gpio::SetInterruptEdge(GpioInterface::Edge)+0x4e>
    {
      case Edge::kEdgeRising:
      {
        SetEdgeRising();
   14844:	9803      	ldr	r0, [sp, #12]
   14846:	f000 f8b1 	bl	149ac <Gpio::SetEdgeRising()>
        break;
   1484a:	e017      	b.n	1487c <Gpio::SetInterruptEdge(GpioInterface::Edge)+0x68>
      }
      case Edge::kEdgeFalling:
      {
        SetEdgeFalling();
   1484c:	9803      	ldr	r0, [sp, #12]
   1484e:	f000 f8eb 	bl	14a28 <Gpio::SetEdgeFalling()>
        break;
   14852:	e013      	b.n	1487c <Gpio::SetInterruptEdge(GpioInterface::Edge)+0x68>
      }
      case Edge::kEdgeBoth:
      {
        SetEdgeRising();
   14854:	9803      	ldr	r0, [sp, #12]
   14856:	f000 f8a9 	bl	149ac <Gpio::SetEdgeRising()>
        SetEdgeFalling();
   1485a:	9803      	ldr	r0, [sp, #12]
   1485c:	f000 f8e4 	bl	14a28 <Gpio::SetEdgeFalling()>
        break;
   14860:	e00c      	b.n	1487c <Gpio::SetInterruptEdge(GpioInterface::Edge)+0x68>
      }
      default:
      {
        LOG_WARNING(
   14862:	f89d 300b 	ldrb.w	r3, [sp, #11]
   14866:	4618      	mov	r0, r3
   14868:	f7ff ffbc 	bl	147e4 <unsigned char util::Value<GpioInterface::Edge, unsigned char>(GpioInterface::Edge)>
   1486c:	4603      	mov	r3, r0
   1486e:	9300      	str	r3, [sp, #0]
   14870:	23d2      	movs	r3, #210	; 0xd2
   14872:	4a07      	ldr	r2, [pc, #28]	; (14890 <Gpio::SetInterruptEdge(GpioInterface::Edge)+0x7c>)
   14874:	4907      	ldr	r1, [pc, #28]	; (14894 <Gpio::SetInterruptEdge(GpioInterface::Edge)+0x80>)
   14876:	4808      	ldr	r0, [pc, #32]	; (14898 <Gpio::SetInterruptEdge(GpioInterface::Edge)+0x84>)
   14878:	f7ff fcfc 	bl	14274 <printf>
   1487c:	4623      	mov	r3, r4
   1487e:	4619      	mov	r1, r3
   14880:	4802      	ldr	r0, [pc, #8]	; (1488c <Gpio::SetInterruptEdge(GpioInterface::Edge)+0x78>)
   14882:	f7fe faaf 	bl	12de4 <__cyg_profile_func_exit>
            "Edge %d cannot be used for External Interrupts."
            "Need to use a rising, falling, or both configuration.",
            util::Value(edge));
      }
    }
  }
   14886:	bf00      	nop
   14888:	b004      	add	sp, #16
   1488a:	bd10      	pop	{r4, pc}
   1488c:	00014815 	.word	0x00014815
   14890:	00018ef4 	.word	0x00018ef4
   14894:	000188d8 	.word	0x000188d8
   14898:	00017e2c 	.word	0x00017e2c

0001489c <Gpio::ClearInterruptEdge(GpioInterface::Edge)>:

  // Clears the seleted edge of the gpio interrupt from being triggered.
  void ClearInterruptEdge(Edge edge) override
   1489c:	b510      	push	{r4, lr}
   1489e:	b084      	sub	sp, #16
   148a0:	4674      	mov	r4, lr
   148a2:	9003      	str	r0, [sp, #12]
   148a4:	460b      	mov	r3, r1
   148a6:	f88d 300b 	strb.w	r3, [sp, #11]
   148aa:	4623      	mov	r3, r4
   148ac:	4619      	mov	r1, r3
   148ae:	4819      	ldr	r0, [pc, #100]	; (14914 <Gpio::ClearInterruptEdge(GpioInterface::Edge)+0x78>)
   148b0:	f7fe fa84 	bl	12dbc <__cyg_profile_func_enter>
  {
    ValidPortCheck();
   148b4:	9803      	ldr	r0, [sp, #12]
   148b6:	f7ff feff 	bl	146b8 <Gpio::ValidPortCheck()>
    switch (edge)
   148ba:	f89d 300b 	ldrb.w	r3, [sp, #11]
   148be:	2b01      	cmp	r3, #1
   148c0:	d008      	beq.n	148d4 <Gpio::ClearInterruptEdge(GpioInterface::Edge)+0x38>
   148c2:	2b01      	cmp	r3, #1
   148c4:	d302      	bcc.n	148cc <Gpio::ClearInterruptEdge(GpioInterface::Edge)+0x30>
   148c6:	2b02      	cmp	r3, #2
   148c8:	d008      	beq.n	148dc <Gpio::ClearInterruptEdge(GpioInterface::Edge)+0x40>
   148ca:	e00e      	b.n	148ea <Gpio::ClearInterruptEdge(GpioInterface::Edge)+0x4e>
    {
      case Edge::kEdgeRising:
      {
        ClearEdgeRising();
   148cc:	9803      	ldr	r0, [sp, #12]
   148ce:	f000 f8e9 	bl	14aa4 <Gpio::ClearEdgeRising()>
        break;
   148d2:	e017      	b.n	14904 <Gpio::ClearInterruptEdge(GpioInterface::Edge)+0x68>
      }
      case Edge::kEdgeFalling:
      {
        ClearEdgeFalling();
   148d4:	9803      	ldr	r0, [sp, #12]
   148d6:	f000 f923 	bl	14b20 <Gpio::ClearEdgeFalling()>
        break;
   148da:	e013      	b.n	14904 <Gpio::ClearInterruptEdge(GpioInterface::Edge)+0x68>
      }
      case Edge::kEdgeBoth:
      {
        ClearEdgeRising();
   148dc:	9803      	ldr	r0, [sp, #12]
   148de:	f000 f8e1 	bl	14aa4 <Gpio::ClearEdgeRising()>
        ClearEdgeFalling();
   148e2:	9803      	ldr	r0, [sp, #12]
   148e4:	f000 f91c 	bl	14b20 <Gpio::ClearEdgeFalling()>
        break;
   148e8:	e00c      	b.n	14904 <Gpio::ClearInterruptEdge(GpioInterface::Edge)+0x68>
      }
      default:
      {
        LOG_WARNING(
   148ea:	f89d 300b 	ldrb.w	r3, [sp, #11]
   148ee:	4618      	mov	r0, r3
   148f0:	f7ff ff78 	bl	147e4 <unsigned char util::Value<GpioInterface::Edge, unsigned char>(GpioInterface::Edge)>
   148f4:	4603      	mov	r3, r0
   148f6:	9300      	str	r3, [sp, #0]
   148f8:	23f2      	movs	r3, #242	; 0xf2
   148fa:	4a07      	ldr	r2, [pc, #28]	; (14918 <Gpio::ClearInterruptEdge(GpioInterface::Edge)+0x7c>)
   148fc:	4907      	ldr	r1, [pc, #28]	; (1491c <Gpio::ClearInterruptEdge(GpioInterface::Edge)+0x80>)
   148fe:	4808      	ldr	r0, [pc, #32]	; (14920 <Gpio::ClearInterruptEdge(GpioInterface::Edge)+0x84>)
   14900:	f7ff fcb8 	bl	14274 <printf>
   14904:	4623      	mov	r3, r4
   14906:	4619      	mov	r1, r3
   14908:	4802      	ldr	r0, [pc, #8]	; (14914 <Gpio::ClearInterruptEdge(GpioInterface::Edge)+0x78>)
   1490a:	f7fe fa6b 	bl	12de4 <__cyg_profile_func_exit>
            "Edge %d cannot be used for External Interrupts."
            "Need to use a rising, falling, or both configuration.",
           util::Value(edge));
      }
    }
  }
   1490e:	bf00      	nop
   14910:	b004      	add	sp, #16
   14912:	bd10      	pop	{r4, pc}
   14914:	0001489d 	.word	0x0001489d
   14918:	00018e9c 	.word	0x00018e9c
   1491c:	000188e4 	.word	0x000188e4
   14920:	00017e2c 	.word	0x00017e2c

00014924 <Gpio::AttachInterrupt(void (*)(), GpioInterface::Edge)>:

  // Assign the developer's ISR and sets the selected edge that the gpio
  // interrupt will be triggered on.
  void AttachInterrupt(IsrPointer function, Edge edge) override
   14924:	b510      	push	{r4, lr}
   14926:	b084      	sub	sp, #16
   14928:	4674      	mov	r4, lr
   1492a:	9003      	str	r0, [sp, #12]
   1492c:	9102      	str	r1, [sp, #8]
   1492e:	4613      	mov	r3, r2
   14930:	f88d 3007 	strb.w	r3, [sp, #7]
   14934:	4623      	mov	r3, r4
   14936:	4619      	mov	r1, r3
   14938:	480b      	ldr	r0, [pc, #44]	; (14968 <Gpio::AttachInterrupt(void (*)(), GpioInterface::Edge)+0x44>)
   1493a:	f7fe fa3f 	bl	12dbc <__cyg_profile_func_enter>
  {
    ValidPortCheck();
   1493e:	9803      	ldr	r0, [sp, #12]
   14940:	f7ff feba 	bl	146b8 <Gpio::ValidPortCheck()>
    SetInterruptRoutine(function);
   14944:	9902      	ldr	r1, [sp, #8]
   14946:	9803      	ldr	r0, [sp, #12]
   14948:	f7ff fef4 	bl	14734 <Gpio::SetInterruptRoutine(void (*)())>
    SetInterruptEdge(edge);
   1494c:	f89d 3007 	ldrb.w	r3, [sp, #7]
   14950:	4619      	mov	r1, r3
   14952:	9803      	ldr	r0, [sp, #12]
   14954:	f7ff ff5e 	bl	14814 <Gpio::SetInterruptEdge(GpioInterface::Edge)>
   14958:	4623      	mov	r3, r4
   1495a:	4619      	mov	r1, r3
   1495c:	4802      	ldr	r0, [pc, #8]	; (14968 <Gpio::AttachInterrupt(void (*)(), GpioInterface::Edge)+0x44>)
   1495e:	f7fe fa41 	bl	12de4 <__cyg_profile_func_exit>
  }
   14962:	bf00      	nop
   14964:	b004      	add	sp, #16
   14966:	bd10      	pop	{r4, pc}
   14968:	00014925 	.word	0x00014925

0001496c <Gpio::DetachInterrupt()>:

  // Removes the developer's ISR and clears the selected edge of the gpio
  // interrupt from being triggered.
  void DetachInterrupt() override
   1496c:	b510      	push	{r4, lr}
   1496e:	b082      	sub	sp, #8
   14970:	4674      	mov	r4, lr
   14972:	9001      	str	r0, [sp, #4]
   14974:	4623      	mov	r3, r4
   14976:	4619      	mov	r1, r3
   14978:	480b      	ldr	r0, [pc, #44]	; (149a8 <Gpio::DetachInterrupt()+0x3c>)
   1497a:	f7fe fa1f 	bl	12dbc <__cyg_profile_func_enter>
  {
    ValidPortCheck();
   1497e:	9801      	ldr	r0, [sp, #4]
   14980:	f7ff fe9a 	bl	146b8 <Gpio::ValidPortCheck()>
    ClearInterruptRoutine();
   14984:	9801      	ldr	r0, [sp, #4]
   14986:	f7ff ff03 	bl	14790 <Gpio::ClearInterruptRoutine()>
    ClearEdgeRising();
   1498a:	9801      	ldr	r0, [sp, #4]
   1498c:	f000 f88a 	bl	14aa4 <Gpio::ClearEdgeRising()>
    ClearEdgeFalling();
   14990:	9801      	ldr	r0, [sp, #4]
   14992:	f000 f8c5 	bl	14b20 <Gpio::ClearEdgeFalling()>
   14996:	4623      	mov	r3, r4
   14998:	4619      	mov	r1, r3
   1499a:	4803      	ldr	r0, [pc, #12]	; (149a8 <Gpio::DetachInterrupt()+0x3c>)
   1499c:	f7fe fa22 	bl	12de4 <__cyg_profile_func_exit>
  }
   149a0:	bf00      	nop
   149a2:	b002      	add	sp, #8
   149a4:	bd10      	pop	{r4, pc}
   149a6:	bf00      	nop
   149a8:	0001496d 	.word	0x0001496d

000149ac <Gpio::SetEdgeRising()>:
    *interrupt[triggered_port].clear |= (1 << triggered_pin);
  }

 private:
  // Sets the gpio interrupt to trigger on a rising edge.
  void SetEdgeRising()
   149ac:	b530      	push	{r4, r5, lr}
   149ae:	b083      	sub	sp, #12
   149b0:	4675      	mov	r5, lr
   149b2:	9001      	str	r0, [sp, #4]
   149b4:	462b      	mov	r3, r5
   149b6:	4619      	mov	r1, r3
   149b8:	4819      	ldr	r0, [pc, #100]	; (14a20 <Gpio::SetEdgeRising()+0x74>)
   149ba:	f7fe f9ff 	bl	12dbc <__cyg_profile_func_enter>
  {
    *interrupt[interupt_port_].enable_rising_edge |= (1 << pin_->GetPin());
   149be:	9b01      	ldr	r3, [sp, #4]
   149c0:	689a      	ldr	r2, [r3, #8]
   149c2:	9b01      	ldr	r3, [sp, #4]
   149c4:	689b      	ldr	r3, [r3, #8]
   149c6:	681b      	ldr	r3, [r3, #0]
   149c8:	3330      	adds	r3, #48	; 0x30
   149ca:	681b      	ldr	r3, [r3, #0]
   149cc:	4610      	mov	r0, r2
   149ce:	4798      	blx	r3
   149d0:	4603      	mov	r3, r0
   149d2:	461a      	mov	r2, r3
   149d4:	2301      	movs	r3, #1
   149d6:	fa03 f002 	lsl.w	r0, r3, r2
   149da:	9b01      	ldr	r3, [sp, #4]
   149dc:	791b      	ldrb	r3, [r3, #4]
   149de:	4619      	mov	r1, r3
   149e0:	4a10      	ldr	r2, [pc, #64]	; (14a24 <Gpio::SetEdgeRising()+0x78>)
   149e2:	460b      	mov	r3, r1
   149e4:	009b      	lsls	r3, r3, #2
   149e6:	440b      	add	r3, r1
   149e8:	009b      	lsls	r3, r3, #2
   149ea:	4413      	add	r3, r2
   149ec:	330c      	adds	r3, #12
   149ee:	681b      	ldr	r3, [r3, #0]
   149f0:	681a      	ldr	r2, [r3, #0]
   149f2:	4604      	mov	r4, r0
   149f4:	9b01      	ldr	r3, [sp, #4]
   149f6:	791b      	ldrb	r3, [r3, #4]
   149f8:	4618      	mov	r0, r3
   149fa:	490a      	ldr	r1, [pc, #40]	; (14a24 <Gpio::SetEdgeRising()+0x78>)
   149fc:	4603      	mov	r3, r0
   149fe:	009b      	lsls	r3, r3, #2
   14a00:	4403      	add	r3, r0
   14a02:	009b      	lsls	r3, r3, #2
   14a04:	440b      	add	r3, r1
   14a06:	330c      	adds	r3, #12
   14a08:	681b      	ldr	r3, [r3, #0]
   14a0a:	4322      	orrs	r2, r4
   14a0c:	601a      	str	r2, [r3, #0]
   14a0e:	462b      	mov	r3, r5
   14a10:	4619      	mov	r1, r3
   14a12:	4803      	ldr	r0, [pc, #12]	; (14a20 <Gpio::SetEdgeRising()+0x74>)
   14a14:	f7fe f9e6 	bl	12de4 <__cyg_profile_func_exit>
  }
   14a18:	bf00      	nop
   14a1a:	b003      	add	sp, #12
   14a1c:	bd30      	pop	{r4, r5, pc}
   14a1e:	bf00      	nop
   14a20:	000149ad 	.word	0x000149ad
   14a24:	100001c4 	.word	0x100001c4

00014a28 <Gpio::SetEdgeFalling()>:

  // Sets the gpio interrupt to trigger on a falling edge.
  void SetEdgeFalling()
   14a28:	b530      	push	{r4, r5, lr}
   14a2a:	b083      	sub	sp, #12
   14a2c:	4675      	mov	r5, lr
   14a2e:	9001      	str	r0, [sp, #4]
   14a30:	462b      	mov	r3, r5
   14a32:	4619      	mov	r1, r3
   14a34:	4819      	ldr	r0, [pc, #100]	; (14a9c <Gpio::SetEdgeFalling()+0x74>)
   14a36:	f7fe f9c1 	bl	12dbc <__cyg_profile_func_enter>
  {
    *interrupt[interupt_port_].enable_falling_edge |= (1 << pin_->GetPin());
   14a3a:	9b01      	ldr	r3, [sp, #4]
   14a3c:	689a      	ldr	r2, [r3, #8]
   14a3e:	9b01      	ldr	r3, [sp, #4]
   14a40:	689b      	ldr	r3, [r3, #8]
   14a42:	681b      	ldr	r3, [r3, #0]
   14a44:	3330      	adds	r3, #48	; 0x30
   14a46:	681b      	ldr	r3, [r3, #0]
   14a48:	4610      	mov	r0, r2
   14a4a:	4798      	blx	r3
   14a4c:	4603      	mov	r3, r0
   14a4e:	461a      	mov	r2, r3
   14a50:	2301      	movs	r3, #1
   14a52:	fa03 f002 	lsl.w	r0, r3, r2
   14a56:	9b01      	ldr	r3, [sp, #4]
   14a58:	791b      	ldrb	r3, [r3, #4]
   14a5a:	4619      	mov	r1, r3
   14a5c:	4a10      	ldr	r2, [pc, #64]	; (14aa0 <Gpio::SetEdgeFalling()+0x78>)
   14a5e:	460b      	mov	r3, r1
   14a60:	009b      	lsls	r3, r3, #2
   14a62:	440b      	add	r3, r1
   14a64:	009b      	lsls	r3, r3, #2
   14a66:	4413      	add	r3, r2
   14a68:	3310      	adds	r3, #16
   14a6a:	681b      	ldr	r3, [r3, #0]
   14a6c:	681a      	ldr	r2, [r3, #0]
   14a6e:	4604      	mov	r4, r0
   14a70:	9b01      	ldr	r3, [sp, #4]
   14a72:	791b      	ldrb	r3, [r3, #4]
   14a74:	4618      	mov	r0, r3
   14a76:	490a      	ldr	r1, [pc, #40]	; (14aa0 <Gpio::SetEdgeFalling()+0x78>)
   14a78:	4603      	mov	r3, r0
   14a7a:	009b      	lsls	r3, r3, #2
   14a7c:	4403      	add	r3, r0
   14a7e:	009b      	lsls	r3, r3, #2
   14a80:	440b      	add	r3, r1
   14a82:	3310      	adds	r3, #16
   14a84:	681b      	ldr	r3, [r3, #0]
   14a86:	4322      	orrs	r2, r4
   14a88:	601a      	str	r2, [r3, #0]
   14a8a:	462b      	mov	r3, r5
   14a8c:	4619      	mov	r1, r3
   14a8e:	4803      	ldr	r0, [pc, #12]	; (14a9c <Gpio::SetEdgeFalling()+0x74>)
   14a90:	f7fe f9a8 	bl	12de4 <__cyg_profile_func_exit>
  }
   14a94:	bf00      	nop
   14a96:	b003      	add	sp, #12
   14a98:	bd30      	pop	{r4, r5, pc}
   14a9a:	bf00      	nop
   14a9c:	00014a29 	.word	0x00014a29
   14aa0:	100001c4 	.word	0x100001c4

00014aa4 <Gpio::ClearEdgeRising()>:

  // Clears the gpio interrupt to no longer trigger on a rising edge.
  void ClearEdgeRising()
   14aa4:	b530      	push	{r4, r5, lr}
   14aa6:	b083      	sub	sp, #12
   14aa8:	4675      	mov	r5, lr
   14aaa:	9001      	str	r0, [sp, #4]
   14aac:	462b      	mov	r3, r5
   14aae:	4619      	mov	r1, r3
   14ab0:	4819      	ldr	r0, [pc, #100]	; (14b18 <Gpio::ClearEdgeRising()+0x74>)
   14ab2:	f7fe f983 	bl	12dbc <__cyg_profile_func_enter>
  {
    *interrupt[interupt_port_].enable_rising_edge &= ~(1 << pin_->GetPin());
   14ab6:	9b01      	ldr	r3, [sp, #4]
   14ab8:	689a      	ldr	r2, [r3, #8]
   14aba:	9b01      	ldr	r3, [sp, #4]
   14abc:	689b      	ldr	r3, [r3, #8]
   14abe:	681b      	ldr	r3, [r3, #0]
   14ac0:	3330      	adds	r3, #48	; 0x30
   14ac2:	681b      	ldr	r3, [r3, #0]
   14ac4:	4610      	mov	r0, r2
   14ac6:	4798      	blx	r3
   14ac8:	4603      	mov	r3, r0
   14aca:	461a      	mov	r2, r3
   14acc:	2301      	movs	r3, #1
   14ace:	4093      	lsls	r3, r2
   14ad0:	43d8      	mvns	r0, r3
   14ad2:	9b01      	ldr	r3, [sp, #4]
   14ad4:	791b      	ldrb	r3, [r3, #4]
   14ad6:	4619      	mov	r1, r3
   14ad8:	4a10      	ldr	r2, [pc, #64]	; (14b1c <Gpio::ClearEdgeRising()+0x78>)
   14ada:	460b      	mov	r3, r1
   14adc:	009b      	lsls	r3, r3, #2
   14ade:	440b      	add	r3, r1
   14ae0:	009b      	lsls	r3, r3, #2
   14ae2:	4413      	add	r3, r2
   14ae4:	330c      	adds	r3, #12
   14ae6:	681b      	ldr	r3, [r3, #0]
   14ae8:	681a      	ldr	r2, [r3, #0]
   14aea:	4604      	mov	r4, r0
   14aec:	9b01      	ldr	r3, [sp, #4]
   14aee:	791b      	ldrb	r3, [r3, #4]
   14af0:	4618      	mov	r0, r3
   14af2:	490a      	ldr	r1, [pc, #40]	; (14b1c <Gpio::ClearEdgeRising()+0x78>)
   14af4:	4603      	mov	r3, r0
   14af6:	009b      	lsls	r3, r3, #2
   14af8:	4403      	add	r3, r0
   14afa:	009b      	lsls	r3, r3, #2
   14afc:	440b      	add	r3, r1
   14afe:	330c      	adds	r3, #12
   14b00:	681b      	ldr	r3, [r3, #0]
   14b02:	4022      	ands	r2, r4
   14b04:	601a      	str	r2, [r3, #0]
   14b06:	462b      	mov	r3, r5
   14b08:	4619      	mov	r1, r3
   14b0a:	4803      	ldr	r0, [pc, #12]	; (14b18 <Gpio::ClearEdgeRising()+0x74>)
   14b0c:	f7fe f96a 	bl	12de4 <__cyg_profile_func_exit>
  }
   14b10:	bf00      	nop
   14b12:	b003      	add	sp, #12
   14b14:	bd30      	pop	{r4, r5, pc}
   14b16:	bf00      	nop
   14b18:	00014aa5 	.word	0x00014aa5
   14b1c:	100001c4 	.word	0x100001c4

00014b20 <Gpio::ClearEdgeFalling()>:

  // Clears the gpio interrupt to no longer trigger on a falling edge.
  void ClearEdgeFalling()
   14b20:	b530      	push	{r4, r5, lr}
   14b22:	b083      	sub	sp, #12
   14b24:	4675      	mov	r5, lr
   14b26:	9001      	str	r0, [sp, #4]
   14b28:	462b      	mov	r3, r5
   14b2a:	4619      	mov	r1, r3
   14b2c:	4819      	ldr	r0, [pc, #100]	; (14b94 <Gpio::ClearEdgeFalling()+0x74>)
   14b2e:	f7fe f945 	bl	12dbc <__cyg_profile_func_enter>
  {
    *interrupt[interupt_port_].enable_falling_edge &= ~(1 << pin_->GetPin());
   14b32:	9b01      	ldr	r3, [sp, #4]
   14b34:	689a      	ldr	r2, [r3, #8]
   14b36:	9b01      	ldr	r3, [sp, #4]
   14b38:	689b      	ldr	r3, [r3, #8]
   14b3a:	681b      	ldr	r3, [r3, #0]
   14b3c:	3330      	adds	r3, #48	; 0x30
   14b3e:	681b      	ldr	r3, [r3, #0]
   14b40:	4610      	mov	r0, r2
   14b42:	4798      	blx	r3
   14b44:	4603      	mov	r3, r0
   14b46:	461a      	mov	r2, r3
   14b48:	2301      	movs	r3, #1
   14b4a:	4093      	lsls	r3, r2
   14b4c:	43d8      	mvns	r0, r3
   14b4e:	9b01      	ldr	r3, [sp, #4]
   14b50:	791b      	ldrb	r3, [r3, #4]
   14b52:	4619      	mov	r1, r3
   14b54:	4a10      	ldr	r2, [pc, #64]	; (14b98 <Gpio::ClearEdgeFalling()+0x78>)
   14b56:	460b      	mov	r3, r1
   14b58:	009b      	lsls	r3, r3, #2
   14b5a:	440b      	add	r3, r1
   14b5c:	009b      	lsls	r3, r3, #2
   14b5e:	4413      	add	r3, r2
   14b60:	3310      	adds	r3, #16
   14b62:	681b      	ldr	r3, [r3, #0]
   14b64:	681a      	ldr	r2, [r3, #0]
   14b66:	4604      	mov	r4, r0
   14b68:	9b01      	ldr	r3, [sp, #4]
   14b6a:	791b      	ldrb	r3, [r3, #4]
   14b6c:	4618      	mov	r0, r3
   14b6e:	490a      	ldr	r1, [pc, #40]	; (14b98 <Gpio::ClearEdgeFalling()+0x78>)
   14b70:	4603      	mov	r3, r0
   14b72:	009b      	lsls	r3, r3, #2
   14b74:	4403      	add	r3, r0
   14b76:	009b      	lsls	r3, r3, #2
   14b78:	440b      	add	r3, r1
   14b7a:	3310      	adds	r3, #16
   14b7c:	681b      	ldr	r3, [r3, #0]
   14b7e:	4022      	ands	r2, r4
   14b80:	601a      	str	r2, [r3, #0]
   14b82:	462b      	mov	r3, r5
   14b84:	4619      	mov	r1, r3
   14b86:	4803      	ldr	r0, [pc, #12]	; (14b94 <Gpio::ClearEdgeFalling()+0x74>)
   14b88:	f7fe f92c 	bl	12de4 <__cyg_profile_func_exit>
  }
   14b8c:	bf00      	nop
   14b8e:	b003      	add	sp, #12
   14b90:	bd30      	pop	{r4, r5, pc}
   14b92:	bf00      	nop
   14b94:	00014b21 	.word	0x00014b21
   14b98:	100001c4 	.word	0x100001c4

00014b9c <SystemControllerInterface::SystemControllerInterface()>:
class SystemControllerInterface
   14b9c:	b082      	sub	sp, #8
   14b9e:	9001      	str	r0, [sp, #4]
   14ba0:	4a03      	ldr	r2, [pc, #12]	; (14bb0 <SystemControllerInterface::SystemControllerInterface()+0x14>)
   14ba2:	9b01      	ldr	r3, [sp, #4]
   14ba4:	601a      	str	r2, [r3, #0]
   14ba6:	9b01      	ldr	r3, [sp, #4]
   14ba8:	4618      	mov	r0, r3
   14baa:	b002      	add	sp, #8
   14bac:	4770      	bx	lr
   14bae:	bf00      	nop
   14bb0:	00018db4 	.word	0x00018db4

00014bb4 <Lpc40xxSystemController::Lpc40xxSystemController()>:
  constexpr Lpc40xxSystemController() {}
   14bb4:	b500      	push	{lr}
   14bb6:	b083      	sub	sp, #12
   14bb8:	9001      	str	r0, [sp, #4]
   14bba:	9b01      	ldr	r3, [sp, #4]
   14bbc:	4618      	mov	r0, r3
   14bbe:	f7ff ffed 	bl	14b9c <SystemControllerInterface::SystemControllerInterface()>
   14bc2:	4a04      	ldr	r2, [pc, #16]	; (14bd4 <Lpc40xxSystemController::Lpc40xxSystemController()+0x20>)
   14bc4:	9b01      	ldr	r3, [sp, #4]
   14bc6:	601a      	str	r2, [r3, #0]
   14bc8:	9b01      	ldr	r3, [sp, #4]
   14bca:	4618      	mov	r0, r3
   14bcc:	b003      	add	sp, #12
   14bce:	f85d fb04 	ldr.w	pc, [sp], #4
   14bd2:	bf00      	nop
   14bd4:	00017840 	.word	0x00017840

00014bd8 <SspInterface::SspInterface()>:
class SspInterface
   14bd8:	b530      	push	{r4, r5, lr}
   14bda:	b083      	sub	sp, #12
   14bdc:	4675      	mov	r5, lr
   14bde:	9001      	str	r0, [sp, #4]
   14be0:	462b      	mov	r3, r5
   14be2:	4619      	mov	r1, r3
   14be4:	4807      	ldr	r0, [pc, #28]	; (14c04 <SspInterface::SspInterface()+0x2c>)
   14be6:	f7fe f8e9 	bl	12dbc <__cyg_profile_func_enter>
   14bea:	4a07      	ldr	r2, [pc, #28]	; (14c08 <SspInterface::SspInterface()+0x30>)
   14bec:	9b01      	ldr	r3, [sp, #4]
   14bee:	601a      	str	r2, [r3, #0]
   14bf0:	9c01      	ldr	r4, [sp, #4]
   14bf2:	462b      	mov	r3, r5
   14bf4:	4619      	mov	r1, r3
   14bf6:	4803      	ldr	r0, [pc, #12]	; (14c04 <SspInterface::SspInterface()+0x2c>)
   14bf8:	f7fe f8f4 	bl	12de4 <__cyg_profile_func_exit>
   14bfc:	4623      	mov	r3, r4
   14bfe:	4618      	mov	r0, r3
   14c00:	b003      	add	sp, #12
   14c02:	bd30      	pop	{r4, r5, pc}
   14c04:	00014bd9 	.word	0x00014bd9
   14c08:	00018d8c 	.word	0x00018d8c

00014c0c <PinInterface::PinInterface(PinInterface const&)>:
class PinInterface
   14c0c:	b530      	push	{r4, r5, lr}
   14c0e:	b083      	sub	sp, #12
   14c10:	4675      	mov	r5, lr
   14c12:	9001      	str	r0, [sp, #4]
   14c14:	9100      	str	r1, [sp, #0]
   14c16:	462b      	mov	r3, r5
   14c18:	4619      	mov	r1, r3
   14c1a:	4808      	ldr	r0, [pc, #32]	; (14c3c <PinInterface::PinInterface(PinInterface const&)+0x30>)
   14c1c:	f7fe f8ce 	bl	12dbc <__cyg_profile_func_enter>
   14c20:	4a07      	ldr	r2, [pc, #28]	; (14c40 <PinInterface::PinInterface(PinInterface const&)+0x34>)
   14c22:	9b01      	ldr	r3, [sp, #4]
   14c24:	601a      	str	r2, [r3, #0]
   14c26:	9c01      	ldr	r4, [sp, #4]
   14c28:	462b      	mov	r3, r5
   14c2a:	4619      	mov	r1, r3
   14c2c:	4803      	ldr	r0, [pc, #12]	; (14c3c <PinInterface::PinInterface(PinInterface const&)+0x30>)
   14c2e:	f7fe f8d9 	bl	12de4 <__cyg_profile_func_exit>
   14c32:	4623      	mov	r3, r4
   14c34:	4618      	mov	r0, r3
   14c36:	b003      	add	sp, #12
   14c38:	bd30      	pop	{r4, r5, pc}
   14c3a:	bf00      	nop
   14c3c:	00014c0d 	.word	0x00014c0d
   14c40:	00018e68 	.word	0x00018e68

00014c44 <Pin::Pin(Pin const&)>:
class Pin : public PinInterface
   14c44:	b530      	push	{r4, r5, lr}
   14c46:	b083      	sub	sp, #12
   14c48:	4675      	mov	r5, lr
   14c4a:	9001      	str	r0, [sp, #4]
   14c4c:	9100      	str	r1, [sp, #0]
   14c4e:	462b      	mov	r3, r5
   14c50:	4619      	mov	r1, r3
   14c52:	480f      	ldr	r0, [pc, #60]	; (14c90 <Pin::Pin(Pin const&)+0x4c>)
   14c54:	f7fe f8b2 	bl	12dbc <__cyg_profile_func_enter>
   14c58:	9b01      	ldr	r3, [sp, #4]
   14c5a:	9a00      	ldr	r2, [sp, #0]
   14c5c:	4611      	mov	r1, r2
   14c5e:	4618      	mov	r0, r3
   14c60:	f7ff ffd4 	bl	14c0c <PinInterface::PinInterface(PinInterface const&)>
   14c64:	4a0b      	ldr	r2, [pc, #44]	; (14c94 <Pin::Pin(Pin const&)+0x50>)
   14c66:	9b01      	ldr	r3, [sp, #4]
   14c68:	601a      	str	r2, [r3, #0]
   14c6a:	9b00      	ldr	r3, [sp, #0]
   14c6c:	791a      	ldrb	r2, [r3, #4]
   14c6e:	9b01      	ldr	r3, [sp, #4]
   14c70:	711a      	strb	r2, [r3, #4]
   14c72:	9b00      	ldr	r3, [sp, #0]
   14c74:	795a      	ldrb	r2, [r3, #5]
   14c76:	9b01      	ldr	r3, [sp, #4]
   14c78:	715a      	strb	r2, [r3, #5]
   14c7a:	9c01      	ldr	r4, [sp, #4]
   14c7c:	462b      	mov	r3, r5
   14c7e:	4619      	mov	r1, r3
   14c80:	4803      	ldr	r0, [pc, #12]	; (14c90 <Pin::Pin(Pin const&)+0x4c>)
   14c82:	f7fe f8af 	bl	12de4 <__cyg_profile_func_exit>
   14c86:	4623      	mov	r3, r4
   14c88:	4618      	mov	r0, r3
   14c8a:	b003      	add	sp, #12
   14c8c:	bd30      	pop	{r4, r5, pc}
   14c8e:	bf00      	nop
   14c90:	00014c45 	.word	0x00014c45
   14c94:	000177cc 	.word	0x000177cc

00014c98 <Ssp::Ssp(Ssp::Peripheral)>:
  explicit constexpr Ssp(Peripheral set_pssp)
   14c98:	b530      	push	{r4, r5, lr}
   14c9a:	b083      	sub	sp, #12
   14c9c:	4675      	mov	r5, lr
   14c9e:	9001      	str	r0, [sp, #4]
   14ca0:	9100      	str	r1, [sp, #0]
   14ca2:	462b      	mov	r3, r5
   14ca4:	4619      	mov	r1, r3
   14ca6:	4831      	ldr	r0, [pc, #196]	; (14d6c <Ssp::Ssp(Ssp::Peripheral)+0xd4>)
   14ca8:	f7fe f888 	bl	12dbc <__cyg_profile_func_enter>
        pssp_(set_pssp)
   14cac:	9b01      	ldr	r3, [sp, #4]
   14cae:	4618      	mov	r0, r3
   14cb0:	f7ff ff92 	bl	14bd8 <SspInterface::SspInterface()>
   14cb4:	9b01      	ldr	r3, [sp, #4]
   14cb6:	3304      	adds	r3, #4
   14cb8:	4618      	mov	r0, r3
   14cba:	f7ff ff7b 	bl	14bb4 <Lpc40xxSystemController::Lpc40xxSystemController()>
   14cbe:	4a2c      	ldr	r2, [pc, #176]	; (14d70 <Ssp::Ssp(Ssp::Peripheral)+0xd8>)
   14cc0:	9b01      	ldr	r3, [sp, #4]
   14cc2:	601a      	str	r2, [r3, #0]
   14cc4:	4a2b      	ldr	r2, [pc, #172]	; (14d74 <Ssp::Ssp(Ssp::Peripheral)+0xdc>)
   14cc6:	9b01      	ldr	r3, [sp, #4]
   14cc8:	605a      	str	r2, [r3, #4]
   14cca:	9b01      	ldr	r3, [sp, #4]
   14ccc:	f103 0214 	add.w	r2, r3, #20
   14cd0:	9b01      	ldr	r3, [sp, #4]
   14cd2:	609a      	str	r2, [r3, #8]
   14cd4:	9b01      	ldr	r3, [sp, #4]
   14cd6:	f103 021c 	add.w	r2, r3, #28
   14cda:	9b01      	ldr	r3, [sp, #4]
   14cdc:	60da      	str	r2, [r3, #12]
   14cde:	9b01      	ldr	r3, [sp, #4]
   14ce0:	f103 0224 	add.w	r2, r3, #36	; 0x24
   14ce4:	9b01      	ldr	r3, [sp, #4]
   14ce6:	611a      	str	r2, [r3, #16]
   14ce8:	9b01      	ldr	r3, [sp, #4]
   14cea:	f103 0414 	add.w	r4, r3, #20
        mosi_pin_(kSspPinMatrix[util::Value(set_pssp)][MatrixLookup::kMosi]),
   14cee:	9800      	ldr	r0, [sp, #0]
   14cf0:	f7fb fce6 	bl	106c0 <int util::Value<Ssp::Peripheral, int>(Ssp::Peripheral)>
   14cf4:	4602      	mov	r2, r0
        pssp_(set_pssp)
   14cf6:	4613      	mov	r3, r2
   14cf8:	005b      	lsls	r3, r3, #1
   14cfa:	4413      	add	r3, r2
   14cfc:	00db      	lsls	r3, r3, #3
   14cfe:	4a1e      	ldr	r2, [pc, #120]	; (14d78 <Ssp::Ssp(Ssp::Peripheral)+0xe0>)
   14d00:	4413      	add	r3, r2
   14d02:	4619      	mov	r1, r3
   14d04:	4620      	mov	r0, r4
   14d06:	f7ff ff9d 	bl	14c44 <Pin::Pin(Pin const&)>
   14d0a:	9b01      	ldr	r3, [sp, #4]
   14d0c:	f103 041c 	add.w	r4, r3, #28
        miso_pin_(kSspPinMatrix[util::Value(set_pssp)][MatrixLookup::kMiso]),
   14d10:	9800      	ldr	r0, [sp, #0]
   14d12:	f7fb fcd5 	bl	106c0 <int util::Value<Ssp::Peripheral, int>(Ssp::Peripheral)>
   14d16:	4602      	mov	r2, r0
        pssp_(set_pssp)
   14d18:	4613      	mov	r3, r2
   14d1a:	005b      	lsls	r3, r3, #1
   14d1c:	4413      	add	r3, r2
   14d1e:	00db      	lsls	r3, r3, #3
   14d20:	3308      	adds	r3, #8
   14d22:	4a15      	ldr	r2, [pc, #84]	; (14d78 <Ssp::Ssp(Ssp::Peripheral)+0xe0>)
   14d24:	4413      	add	r3, r2
   14d26:	4619      	mov	r1, r3
   14d28:	4620      	mov	r0, r4
   14d2a:	f7ff ff8b 	bl	14c44 <Pin::Pin(Pin const&)>
   14d2e:	9b01      	ldr	r3, [sp, #4]
   14d30:	f103 0424 	add.w	r4, r3, #36	; 0x24
        sck_pin_(kSspPinMatrix[util::Value(set_pssp)][MatrixLookup::kSck]),
   14d34:	9800      	ldr	r0, [sp, #0]
   14d36:	f7fb fcc3 	bl	106c0 <int util::Value<Ssp::Peripheral, int>(Ssp::Peripheral)>
   14d3a:	4602      	mov	r2, r0
        pssp_(set_pssp)
   14d3c:	4613      	mov	r3, r2
   14d3e:	005b      	lsls	r3, r3, #1
   14d40:	4413      	add	r3, r2
   14d42:	00db      	lsls	r3, r3, #3
   14d44:	3310      	adds	r3, #16
   14d46:	4a0c      	ldr	r2, [pc, #48]	; (14d78 <Ssp::Ssp(Ssp::Peripheral)+0xe0>)
   14d48:	4413      	add	r3, r2
   14d4a:	4619      	mov	r1, r3
   14d4c:	4620      	mov	r0, r4
   14d4e:	f7ff ff79 	bl	14c44 <Pin::Pin(Pin const&)>
   14d52:	9b01      	ldr	r3, [sp, #4]
   14d54:	9a00      	ldr	r2, [sp, #0]
   14d56:	62da      	str	r2, [r3, #44]	; 0x2c
  }
   14d58:	9c01      	ldr	r4, [sp, #4]
   14d5a:	462b      	mov	r3, r5
   14d5c:	4619      	mov	r1, r3
   14d5e:	4803      	ldr	r0, [pc, #12]	; (14d6c <Ssp::Ssp(Ssp::Peripheral)+0xd4>)
   14d60:	f7fe f840 	bl	12de4 <__cyg_profile_func_exit>
   14d64:	4623      	mov	r3, r4
   14d66:	4618      	mov	r0, r3
   14d68:	b003      	add	sp, #12
   14d6a:	bd30      	pop	{r4, r5, pc}
   14d6c:	00014c99 	.word	0x00014c99
   14d70:	00018d40 	.word	0x00018d40
   14d74:	00018d68 	.word	0x00018d68
   14d78:	000188f4 	.word	0x000188f4

00014d7c <Ssp::Initialize()>:
  void Initialize() override
   14d7c:	b570      	push	{r4, r5, r6, lr}
   14d7e:	b086      	sub	sp, #24
   14d80:	4676      	mov	r6, lr
   14d82:	9001      	str	r0, [sp, #4]
   14d84:	4633      	mov	r3, r6
   14d86:	4619      	mov	r1, r3
   14d88:	4830      	ldr	r0, [pc, #192]	; (14e4c <Ssp::Initialize()+0xd0>)
   14d8a:	f7fe f817 	bl	12dbc <__cyg_profile_func_enter>
    uint32_t pssp = util::Value(pssp_);
   14d8e:	9b01      	ldr	r3, [sp, #4]
   14d90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   14d92:	4618      	mov	r0, r3
   14d94:	f7fb fc94 	bl	106c0 <int util::Value<Ssp::Peripheral, int>(Ssp::Peripheral)>
   14d98:	4603      	mov	r3, r0
   14d9a:	9305      	str	r3, [sp, #20]
    PowerUpPeripheral(kPowerBit[pssp]);
   14d9c:	9b01      	ldr	r3, [sp, #4]
   14d9e:	1d18      	adds	r0, r3, #4
   14da0:	9b01      	ldr	r3, [sp, #4]
   14da2:	685b      	ldr	r3, [r3, #4]
   14da4:	3314      	adds	r3, #20
   14da6:	681b      	ldr	r3, [r3, #0]
   14da8:	9a05      	ldr	r2, [sp, #20]
   14daa:	0092      	lsls	r2, r2, #2
   14dac:	4928      	ldr	r1, [pc, #160]	; (14e50 <Ssp::Initialize()+0xd4>)
   14dae:	440a      	add	r2, r1
   14db0:	4611      	mov	r1, r2
   14db2:	4798      	blx	r3
    mosi_->SetPinFunction(kPinSelect[pssp]);
   14db4:	9b01      	ldr	r3, [sp, #4]
   14db6:	6898      	ldr	r0, [r3, #8]
   14db8:	9b01      	ldr	r3, [sp, #4]
   14dba:	689b      	ldr	r3, [r3, #8]
   14dbc:	681b      	ldr	r3, [r3, #0]
   14dbe:	681b      	ldr	r3, [r3, #0]
   14dc0:	4924      	ldr	r1, [pc, #144]	; (14e54 <Ssp::Initialize()+0xd8>)
   14dc2:	9a05      	ldr	r2, [sp, #20]
   14dc4:	440a      	add	r2, r1
   14dc6:	7812      	ldrb	r2, [r2, #0]
   14dc8:	4611      	mov	r1, r2
   14dca:	4798      	blx	r3
    miso_->SetPinFunction(kPinSelect[pssp]);
   14dcc:	9b01      	ldr	r3, [sp, #4]
   14dce:	68d8      	ldr	r0, [r3, #12]
   14dd0:	9b01      	ldr	r3, [sp, #4]
   14dd2:	68db      	ldr	r3, [r3, #12]
   14dd4:	681b      	ldr	r3, [r3, #0]
   14dd6:	681b      	ldr	r3, [r3, #0]
   14dd8:	491e      	ldr	r1, [pc, #120]	; (14e54 <Ssp::Initialize()+0xd8>)
   14dda:	9a05      	ldr	r2, [sp, #20]
   14ddc:	440a      	add	r2, r1
   14dde:	7812      	ldrb	r2, [r2, #0]
   14de0:	4611      	mov	r1, r2
   14de2:	4798      	blx	r3
    sck_->SetPinFunction(kPinSelect[pssp]);
   14de4:	9b01      	ldr	r3, [sp, #4]
   14de6:	6918      	ldr	r0, [r3, #16]
   14de8:	9b01      	ldr	r3, [sp, #4]
   14dea:	691b      	ldr	r3, [r3, #16]
   14dec:	681b      	ldr	r3, [r3, #0]
   14dee:	681b      	ldr	r3, [r3, #0]
   14df0:	4918      	ldr	r1, [pc, #96]	; (14e54 <Ssp::Initialize()+0xd8>)
   14df2:	9a05      	ldr	r2, [sp, #20]
   14df4:	440a      	add	r2, r1
   14df6:	7812      	ldrb	r2, [r2, #0]
   14df8:	4611      	mov	r1, r2
   14dfa:	4798      	blx	r3
    ssp_registers[pssp]->CR1 = bit::Set(ssp_registers[pssp]->CR1, kSspEnable);
   14dfc:	4a16      	ldr	r2, [pc, #88]	; (14e58 <Ssp::Initialize()+0xdc>)
   14dfe:	9b05      	ldr	r3, [sp, #20]
   14e00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14e04:	685b      	ldr	r3, [r3, #4]
   14e06:	4914      	ldr	r1, [pc, #80]	; (14e58 <Ssp::Initialize()+0xdc>)
   14e08:	9a05      	ldr	r2, [sp, #20]
   14e0a:	f851 4022 	ldr.w	r4, [r1, r2, lsl #2]
   14e0e:	9304      	str	r3, [sp, #16]
   14e10:	2301      	movs	r3, #1
   14e12:	9303      	str	r3, [sp, #12]
   14e14:	4633      	mov	r3, r6
   14e16:	4619      	mov	r1, r3
   14e18:	4810      	ldr	r0, [pc, #64]	; (14e5c <Ssp::Initialize()+0xe0>)
   14e1a:	f7fd ffcf 	bl	12dbc <__cyg_profile_func_enter>
  return target | (1 << position);
   14e1e:	2201      	movs	r2, #1
   14e20:	9b03      	ldr	r3, [sp, #12]
   14e22:	fa02 f303 	lsl.w	r3, r2, r3
   14e26:	461a      	mov	r2, r3
   14e28:	9b04      	ldr	r3, [sp, #16]
   14e2a:	ea42 0503 	orr.w	r5, r2, r3
   14e2e:	4633      	mov	r3, r6
   14e30:	4619      	mov	r1, r3
   14e32:	480a      	ldr	r0, [pc, #40]	; (14e5c <Ssp::Initialize()+0xe0>)
   14e34:	f7fd ffd6 	bl	12de4 <__cyg_profile_func_exit>
   14e38:	6065      	str	r5, [r4, #4]
   14e3a:	4633      	mov	r3, r6
   14e3c:	4619      	mov	r1, r3
   14e3e:	4803      	ldr	r0, [pc, #12]	; (14e4c <Ssp::Initialize()+0xd0>)
   14e40:	f7fd ffd0 	bl	12de4 <__cyg_profile_func_exit>
  }
   14e44:	bf00      	nop
   14e46:	b006      	add	sp, #24
   14e48:	bd70      	pop	{r4, r5, r6, pc}
   14e4a:	bf00      	nop
   14e4c:	00014d7d 	.word	0x00014d7d
   14e50:	0001893c 	.word	0x0001893c
   14e54:	000188f0 	.word	0x000188f0
   14e58:	10000034 	.word	0x10000034
   14e5c:	000168f9 	.word	0x000168f9

00014e60 <Ssp::SetSpiMasterDefault()>:

  /// Sets up SSP peripheral as SPI master
  void SetSpiMasterDefault() override
   14e60:	b510      	push	{r4, lr}
   14e62:	b086      	sub	sp, #24
   14e64:	4674      	mov	r4, lr
   14e66:	9003      	str	r0, [sp, #12]
   14e68:	4623      	mov	r3, r4
   14e6a:	4619      	mov	r1, r3
   14e6c:	4812      	ldr	r0, [pc, #72]	; (14eb8 <Ssp::SetSpiMasterDefault()+0x58>)
   14e6e:	f7fd ffa5 	bl	12dbc <__cyg_profile_func_enter>
  {
    constexpr bool kHighPolarity  = 1;
   14e72:	2301      	movs	r3, #1
   14e74:	f88d 3017 	strb.w	r3, [sp, #23]
    constexpr bool kPhase0        = 0;
   14e78:	2300      	movs	r3, #0
   14e7a:	f88d 3016 	strb.w	r3, [sp, #22]
    constexpr uint8_t kScrDivider = 0;
   14e7e:	2300      	movs	r3, #0
   14e80:	f88d 3015 	strb.w	r3, [sp, #21]
    constexpr uint8_t kPrescaler  = SJ2_SYSTEM_CLOCK_RATE_MHZ;
   14e84:	2330      	movs	r3, #48	; 0x30
   14e86:	f88d 3014 	strb.w	r3, [sp, #20]

    SetPeripheralMode(kMaster, kSpi, kEight);
   14e8a:	2307      	movs	r3, #7
   14e8c:	2200      	movs	r2, #0
   14e8e:	2100      	movs	r1, #0
   14e90:	9803      	ldr	r0, [sp, #12]
   14e92:	f000 f85b 	bl	14f4c <Ssp::SetPeripheralMode(SspInterface::MasterSlaveMode, SspInterface::FrameMode, SspInterface::DataSize)>
    SetClock(kHighPolarity, kPhase0, kScrDivider, kPrescaler);
   14e96:	2330      	movs	r3, #48	; 0x30
   14e98:	9300      	str	r3, [sp, #0]
   14e9a:	2300      	movs	r3, #0
   14e9c:	2200      	movs	r2, #0
   14e9e:	2101      	movs	r1, #1
   14ea0:	9803      	ldr	r0, [sp, #12]
   14ea2:	f000 fa09 	bl	152b8 <Ssp::SetClock(bool, bool, unsigned char, unsigned char)>
   14ea6:	4623      	mov	r3, r4
   14ea8:	4619      	mov	r1, r3
   14eaa:	4803      	ldr	r0, [pc, #12]	; (14eb8 <Ssp::SetSpiMasterDefault()+0x58>)
   14eac:	f7fd ff9a 	bl	12de4 <__cyg_profile_func_exit>
  }
   14eb0:	bf00      	nop
   14eb2:	b006      	add	sp, #24
   14eb4:	bd10      	pop	{r4, pc}
   14eb6:	bf00      	nop
   14eb8:	00014e61 	.word	0x00014e61

00014ebc <unsigned char util::Value<SspInterface::DataSize, unsigned char>(SspInterface::DataSize)>:
constexpr Type Value(Enum enum_type_value)
   14ebc:	b530      	push	{r4, r5, lr}
   14ebe:	b083      	sub	sp, #12
   14ec0:	4675      	mov	r5, lr
   14ec2:	4603      	mov	r3, r0
   14ec4:	f88d 3007 	strb.w	r3, [sp, #7]
   14ec8:	462b      	mov	r3, r5
   14eca:	4619      	mov	r1, r3
   14ecc:	4806      	ldr	r0, [pc, #24]	; (14ee8 <unsigned char util::Value<SspInterface::DataSize, unsigned char>(SspInterface::DataSize)+0x2c>)
   14ece:	f7fd ff75 	bl	12dbc <__cyg_profile_func_enter>
  return static_cast<Type>(enum_type_value);
   14ed2:	f89d 4007 	ldrb.w	r4, [sp, #7]
   14ed6:	462b      	mov	r3, r5
   14ed8:	4619      	mov	r1, r3
   14eda:	4803      	ldr	r0, [pc, #12]	; (14ee8 <unsigned char util::Value<SspInterface::DataSize, unsigned char>(SspInterface::DataSize)+0x2c>)
   14edc:	f7fd ff82 	bl	12de4 <__cyg_profile_func_exit>
   14ee0:	4623      	mov	r3, r4
}
   14ee2:	4618      	mov	r0, r3
   14ee4:	b003      	add	sp, #12
   14ee6:	bd30      	pop	{r4, r5, pc}
   14ee8:	00014ebd 	.word	0x00014ebd

00014eec <unsigned char util::Value<SspInterface::FrameMode, unsigned char>(SspInterface::FrameMode)>:
constexpr Type Value(Enum enum_type_value)
   14eec:	b530      	push	{r4, r5, lr}
   14eee:	b083      	sub	sp, #12
   14ef0:	4675      	mov	r5, lr
   14ef2:	4603      	mov	r3, r0
   14ef4:	f88d 3007 	strb.w	r3, [sp, #7]
   14ef8:	462b      	mov	r3, r5
   14efa:	4619      	mov	r1, r3
   14efc:	4806      	ldr	r0, [pc, #24]	; (14f18 <unsigned char util::Value<SspInterface::FrameMode, unsigned char>(SspInterface::FrameMode)+0x2c>)
   14efe:	f7fd ff5d 	bl	12dbc <__cyg_profile_func_enter>
  return static_cast<Type>(enum_type_value);
   14f02:	f89d 4007 	ldrb.w	r4, [sp, #7]
   14f06:	462b      	mov	r3, r5
   14f08:	4619      	mov	r1, r3
   14f0a:	4803      	ldr	r0, [pc, #12]	; (14f18 <unsigned char util::Value<SspInterface::FrameMode, unsigned char>(SspInterface::FrameMode)+0x2c>)
   14f0c:	f7fd ff6a 	bl	12de4 <__cyg_profile_func_exit>
   14f10:	4623      	mov	r3, r4
}
   14f12:	4618      	mov	r0, r3
   14f14:	b003      	add	sp, #12
   14f16:	bd30      	pop	{r4, r5, pc}
   14f18:	00014eed 	.word	0x00014eed

00014f1c <unsigned char util::Value<SspInterface::MasterSlaveMode, unsigned char>(SspInterface::MasterSlaveMode)>:
constexpr Type Value(Enum enum_type_value)
   14f1c:	b530      	push	{r4, r5, lr}
   14f1e:	b083      	sub	sp, #12
   14f20:	4675      	mov	r5, lr
   14f22:	4603      	mov	r3, r0
   14f24:	f88d 3007 	strb.w	r3, [sp, #7]
   14f28:	462b      	mov	r3, r5
   14f2a:	4619      	mov	r1, r3
   14f2c:	4806      	ldr	r0, [pc, #24]	; (14f48 <unsigned char util::Value<SspInterface::MasterSlaveMode, unsigned char>(SspInterface::MasterSlaveMode)+0x2c>)
   14f2e:	f7fd ff45 	bl	12dbc <__cyg_profile_func_enter>
  return static_cast<Type>(enum_type_value);
   14f32:	f89d 4007 	ldrb.w	r4, [sp, #7]
   14f36:	462b      	mov	r3, r5
   14f38:	4619      	mov	r1, r3
   14f3a:	4803      	ldr	r0, [pc, #12]	; (14f48 <unsigned char util::Value<SspInterface::MasterSlaveMode, unsigned char>(SspInterface::MasterSlaveMode)+0x2c>)
   14f3c:	f7fd ff52 	bl	12de4 <__cyg_profile_func_exit>
   14f40:	4623      	mov	r3, r4
}
   14f42:	4618      	mov	r0, r3
   14f44:	b003      	add	sp, #12
   14f46:	bd30      	pop	{r4, r5, pc}
   14f48:	00014f1d 	.word	0x00014f1d

00014f4c <Ssp::SetPeripheralMode(SspInterface::MasterSlaveMode, SspInterface::FrameMode, SspInterface::DataSize)>:

  /// Sets the various modes for the Peripheral
  /// @param mode - master or slave mode
  /// @param frame - format for Peripheral data to use
  /// @param size - number of bits per frame
  void SetPeripheralMode(MasterSlaveMode mode, FrameMode frame,
   14f4c:	b570      	push	{r4, r5, r6, lr}
   14f4e:	b098      	sub	sp, #96	; 0x60
   14f50:	4674      	mov	r4, lr
   14f52:	9001      	str	r0, [sp, #4]
   14f54:	4608      	mov	r0, r1
   14f56:	4611      	mov	r1, r2
   14f58:	461a      	mov	r2, r3
   14f5a:	4603      	mov	r3, r0
   14f5c:	f88d 3003 	strb.w	r3, [sp, #3]
   14f60:	460b      	mov	r3, r1
   14f62:	f88d 3002 	strb.w	r3, [sp, #2]
   14f66:	4613      	mov	r3, r2
   14f68:	f88d 3001 	strb.w	r3, [sp, #1]
   14f6c:	4623      	mov	r3, r4
   14f6e:	4619      	mov	r1, r3
   14f70:	4875      	ldr	r0, [pc, #468]	; (15148 <Ssp::SetPeripheralMode(SspInterface::MasterSlaveMode, SspInterface::FrameMode, SspInterface::DataSize)+0x1fc>)
   14f72:	f7fd ff23 	bl	12dbc <__cyg_profile_func_enter>
                         DataSize size) override
  {
    uint32_t pssp = util::Value(pssp_);
   14f76:	9b01      	ldr	r3, [sp, #4]
   14f78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   14f7a:	4618      	mov	r0, r3
   14f7c:	f7fb fba0 	bl	106c0 <int util::Value<Ssp::Peripheral, int>(Ssp::Peripheral)>
   14f80:	4603      	mov	r3, r0
   14f82:	9317      	str	r3, [sp, #92]	; 0x5c
    // TODO(#371): Find a better alternative to powering up the peripheral for
    // every method.
    Ssp::PowerUpPeripheral(Ssp::kPowerBit[pssp]);
   14f84:	9b01      	ldr	r3, [sp, #4]
   14f86:	1d18      	adds	r0, r3, #4
   14f88:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   14f8a:	009b      	lsls	r3, r3, #2
   14f8c:	4a6f      	ldr	r2, [pc, #444]	; (1514c <Ssp::SetPeripheralMode(SspInterface::MasterSlaveMode, SspInterface::FrameMode, SspInterface::DataSize)+0x200>)
   14f8e:	4413      	add	r3, r2
   14f90:	4619      	mov	r1, r3
   14f92:	f7fb fe2f 	bl	10bf4 <Lpc40xxSystemController::PowerUpPeripheral(SystemControllerInterface::PeripheralID const&)>
    if (frame == kMicro)
   14f96:	f89d 3002 	ldrb.w	r3, [sp, #2]
   14f9a:	2b02      	cmp	r3, #2
   14f9c:	d102      	bne.n	14fa4 <Ssp::SetPeripheralMode(SspInterface::MasterSlaveMode, SspInterface::FrameMode, SspInterface::DataSize)+0x58>
    {
      size = kEight;
   14f9e:	2307      	movs	r3, #7
   14fa0:	f88d 3001 	strb.w	r3, [sp, #1]
    }
    ssp_registers[pssp]->CR0 =
        bit::Insert(ssp_registers[pssp]->CR0, util::Value(size), kDataBit, 4);
   14fa4:	4a6a      	ldr	r2, [pc, #424]	; (15150 <Ssp::SetPeripheralMode(SspInterface::MasterSlaveMode, SspInterface::FrameMode, SspInterface::DataSize)+0x204>)
   14fa6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   14fa8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14fac:	681e      	ldr	r6, [r3, #0]
   14fae:	f89d 3001 	ldrb.w	r3, [sp, #1]
   14fb2:	4618      	mov	r0, r3
   14fb4:	f7ff ff82 	bl	14ebc <unsigned char util::Value<SspInterface::DataSize, unsigned char>(SspInterface::DataSize)>
   14fb8:	4603      	mov	r3, r0
   14fba:	4619      	mov	r1, r3
    ssp_registers[pssp]->CR0 =
   14fbc:	4a64      	ldr	r2, [pc, #400]	; (15150 <Ssp::SetPeripheralMode(SspInterface::MasterSlaveMode, SspInterface::FrameMode, SspInterface::DataSize)+0x204>)
   14fbe:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   14fc0:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
   14fc4:	9608      	str	r6, [sp, #32]
   14fc6:	460b      	mov	r3, r1
   14fc8:	f88d 301f 	strb.w	r3, [sp, #31]
   14fcc:	2300      	movs	r3, #0
   14fce:	9306      	str	r3, [sp, #24]
   14fd0:	2304      	movs	r3, #4
   14fd2:	9305      	str	r3, [sp, #20]
   14fd4:	4623      	mov	r3, r4
   14fd6:	4619      	mov	r1, r3
   14fd8:	485e      	ldr	r0, [pc, #376]	; (15154 <Ssp::SetPeripheralMode(SspInterface::MasterSlaveMode, SspInterface::FrameMode, SspInterface::DataSize)+0x208>)
   14fda:	f7fd feef 	bl	12dbc <__cyg_profile_func_enter>
  constexpr UnsignedT kFieldOfOnes = GenerateFieldOfOnes<T>();
   14fde:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   14fe2:	9304      	str	r3, [sp, #16]
  constexpr size_t kTargetWidth     = sizeof(T) * 8;
   14fe4:	2320      	movs	r3, #32
   14fe6:	9303      	str	r3, [sp, #12]
  UnsignedT mask   = kFieldOfOnes >> (kTargetWidth - width);
   14fe8:	9b05      	ldr	r3, [sp, #20]
   14fea:	f1c3 0320 	rsb	r3, r3, #32
   14fee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   14ff2:	fa22 f303 	lsr.w	r3, r2, r3
   14ff6:	9302      	str	r3, [sp, #8]
  target &= ~(mask << position);
   14ff8:	9a02      	ldr	r2, [sp, #8]
   14ffa:	9b06      	ldr	r3, [sp, #24]
   14ffc:	fa02 f303 	lsl.w	r3, r2, r3
   15000:	43db      	mvns	r3, r3
   15002:	9a08      	ldr	r2, [sp, #32]
   15004:	4013      	ands	r3, r2
   15006:	9308      	str	r3, [sp, #32]
  target |= (value & mask) << position;
   15008:	f89d 201f 	ldrb.w	r2, [sp, #31]
   1500c:	9b02      	ldr	r3, [sp, #8]
   1500e:	401a      	ands	r2, r3
   15010:	9b06      	ldr	r3, [sp, #24]
   15012:	fa02 f303 	lsl.w	r3, r2, r3
   15016:	9a08      	ldr	r2, [sp, #32]
   15018:	4313      	orrs	r3, r2
   1501a:	9308      	str	r3, [sp, #32]
  return target;
   1501c:	9e08      	ldr	r6, [sp, #32]
   1501e:	4623      	mov	r3, r4
   15020:	4619      	mov	r1, r3
   15022:	484c      	ldr	r0, [pc, #304]	; (15154 <Ssp::SetPeripheralMode(SspInterface::MasterSlaveMode, SspInterface::FrameMode, SspInterface::DataSize)+0x208>)
   15024:	f7fd fede 	bl	12de4 <__cyg_profile_func_exit>
   15028:	602e      	str	r6, [r5, #0]
    ssp_registers[pssp]->CR0 =
        bit::Insert(ssp_registers[pssp]->CR0, util::Value(frame), kFrameBit, 2);
   1502a:	4a49      	ldr	r2, [pc, #292]	; (15150 <Ssp::SetPeripheralMode(SspInterface::MasterSlaveMode, SspInterface::FrameMode, SspInterface::DataSize)+0x204>)
   1502c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   1502e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15032:	681e      	ldr	r6, [r3, #0]
   15034:	f89d 3002 	ldrb.w	r3, [sp, #2]
   15038:	4618      	mov	r0, r3
   1503a:	f7ff ff57 	bl	14eec <unsigned char util::Value<SspInterface::FrameMode, unsigned char>(SspInterface::FrameMode)>
   1503e:	4603      	mov	r3, r0
   15040:	4619      	mov	r1, r3
    ssp_registers[pssp]->CR0 =
   15042:	4a43      	ldr	r2, [pc, #268]	; (15150 <Ssp::SetPeripheralMode(SspInterface::MasterSlaveMode, SspInterface::FrameMode, SspInterface::DataSize)+0x204>)
   15044:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   15046:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
   1504a:	960f      	str	r6, [sp, #60]	; 0x3c
   1504c:	460b      	mov	r3, r1
   1504e:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
   15052:	2304      	movs	r3, #4
   15054:	930d      	str	r3, [sp, #52]	; 0x34
   15056:	2302      	movs	r3, #2
   15058:	930c      	str	r3, [sp, #48]	; 0x30
   1505a:	4623      	mov	r3, r4
   1505c:	4619      	mov	r1, r3
   1505e:	483d      	ldr	r0, [pc, #244]	; (15154 <Ssp::SetPeripheralMode(SspInterface::MasterSlaveMode, SspInterface::FrameMode, SspInterface::DataSize)+0x208>)
   15060:	f7fd feac 	bl	12dbc <__cyg_profile_func_enter>
  constexpr UnsignedT kFieldOfOnes = GenerateFieldOfOnes<T>();
   15064:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   15068:	930b      	str	r3, [sp, #44]	; 0x2c
  constexpr size_t kTargetWidth     = sizeof(T) * 8;
   1506a:	2320      	movs	r3, #32
   1506c:	930a      	str	r3, [sp, #40]	; 0x28
  UnsignedT mask   = kFieldOfOnes >> (kTargetWidth - width);
   1506e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   15070:	f1c3 0320 	rsb	r3, r3, #32
   15074:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   15078:	fa22 f303 	lsr.w	r3, r2, r3
   1507c:	9309      	str	r3, [sp, #36]	; 0x24
  target &= ~(mask << position);
   1507e:	9a09      	ldr	r2, [sp, #36]	; 0x24
   15080:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   15082:	fa02 f303 	lsl.w	r3, r2, r3
   15086:	43db      	mvns	r3, r3
   15088:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   1508a:	4013      	ands	r3, r2
   1508c:	930f      	str	r3, [sp, #60]	; 0x3c
  target |= (value & mask) << position;
   1508e:	f89d 203b 	ldrb.w	r2, [sp, #59]	; 0x3b
   15092:	9b09      	ldr	r3, [sp, #36]	; 0x24
   15094:	401a      	ands	r2, r3
   15096:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   15098:	fa02 f303 	lsl.w	r3, r2, r3
   1509c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   1509e:	4313      	orrs	r3, r2
   150a0:	930f      	str	r3, [sp, #60]	; 0x3c
  return target;
   150a2:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
   150a4:	4623      	mov	r3, r4
   150a6:	4619      	mov	r1, r3
   150a8:	482a      	ldr	r0, [pc, #168]	; (15154 <Ssp::SetPeripheralMode(SspInterface::MasterSlaveMode, SspInterface::FrameMode, SspInterface::DataSize)+0x208>)
   150aa:	f7fd fe9b 	bl	12de4 <__cyg_profile_func_exit>
   150ae:	602e      	str	r6, [r5, #0]
    ssp_registers[pssp]->CR1 = bit::Insert(
        ssp_registers[pssp]->CR1, util::Value(mode), kMasterModeBit, 1);
   150b0:	4a27      	ldr	r2, [pc, #156]	; (15150 <Ssp::SetPeripheralMode(SspInterface::MasterSlaveMode, SspInterface::FrameMode, SspInterface::DataSize)+0x204>)
   150b2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   150b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   150b8:	685e      	ldr	r6, [r3, #4]
    ssp_registers[pssp]->CR1 = bit::Insert(
   150ba:	f89d 3003 	ldrb.w	r3, [sp, #3]
   150be:	4618      	mov	r0, r3
   150c0:	f7ff ff2c 	bl	14f1c <unsigned char util::Value<SspInterface::MasterSlaveMode, unsigned char>(SspInterface::MasterSlaveMode)>
   150c4:	4603      	mov	r3, r0
   150c6:	4619      	mov	r1, r3
   150c8:	4a21      	ldr	r2, [pc, #132]	; (15150 <Ssp::SetPeripheralMode(SspInterface::MasterSlaveMode, SspInterface::FrameMode, SspInterface::DataSize)+0x204>)
   150ca:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   150cc:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
   150d0:	9616      	str	r6, [sp, #88]	; 0x58
   150d2:	460b      	mov	r3, r1
   150d4:	f88d 3057 	strb.w	r3, [sp, #87]	; 0x57
   150d8:	2302      	movs	r3, #2
   150da:	9314      	str	r3, [sp, #80]	; 0x50
   150dc:	2301      	movs	r3, #1
   150de:	9313      	str	r3, [sp, #76]	; 0x4c
   150e0:	4623      	mov	r3, r4
   150e2:	4619      	mov	r1, r3
   150e4:	481b      	ldr	r0, [pc, #108]	; (15154 <Ssp::SetPeripheralMode(SspInterface::MasterSlaveMode, SspInterface::FrameMode, SspInterface::DataSize)+0x208>)
   150e6:	f7fd fe69 	bl	12dbc <__cyg_profile_func_enter>
  constexpr UnsignedT kFieldOfOnes = GenerateFieldOfOnes<T>();
   150ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   150ee:	9312      	str	r3, [sp, #72]	; 0x48
  constexpr size_t kTargetWidth     = sizeof(T) * 8;
   150f0:	2320      	movs	r3, #32
   150f2:	9311      	str	r3, [sp, #68]	; 0x44
  UnsignedT mask   = kFieldOfOnes >> (kTargetWidth - width);
   150f4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   150f6:	f1c3 0320 	rsb	r3, r3, #32
   150fa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   150fe:	fa22 f303 	lsr.w	r3, r2, r3
   15102:	9310      	str	r3, [sp, #64]	; 0x40
  target &= ~(mask << position);
   15104:	9a10      	ldr	r2, [sp, #64]	; 0x40
   15106:	9b14      	ldr	r3, [sp, #80]	; 0x50
   15108:	fa02 f303 	lsl.w	r3, r2, r3
   1510c:	43db      	mvns	r3, r3
   1510e:	9a16      	ldr	r2, [sp, #88]	; 0x58
   15110:	4013      	ands	r3, r2
   15112:	9316      	str	r3, [sp, #88]	; 0x58
  target |= (value & mask) << position;
   15114:	f89d 2057 	ldrb.w	r2, [sp, #87]	; 0x57
   15118:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1511a:	401a      	ands	r2, r3
   1511c:	9b14      	ldr	r3, [sp, #80]	; 0x50
   1511e:	fa02 f303 	lsl.w	r3, r2, r3
   15122:	9a16      	ldr	r2, [sp, #88]	; 0x58
   15124:	4313      	orrs	r3, r2
   15126:	9316      	str	r3, [sp, #88]	; 0x58
  return target;
   15128:	9e16      	ldr	r6, [sp, #88]	; 0x58
   1512a:	4623      	mov	r3, r4
   1512c:	4619      	mov	r1, r3
   1512e:	4809      	ldr	r0, [pc, #36]	; (15154 <Ssp::SetPeripheralMode(SspInterface::MasterSlaveMode, SspInterface::FrameMode, SspInterface::DataSize)+0x208>)
   15130:	f7fd fe58 	bl	12de4 <__cyg_profile_func_exit>
   15134:	606e      	str	r6, [r5, #4]
   15136:	4623      	mov	r3, r4
   15138:	4619      	mov	r1, r3
   1513a:	4803      	ldr	r0, [pc, #12]	; (15148 <Ssp::SetPeripheralMode(SspInterface::MasterSlaveMode, SspInterface::FrameMode, SspInterface::DataSize)+0x1fc>)
   1513c:	f7fd fe52 	bl	12de4 <__cyg_profile_func_exit>
  }
   15140:	bf00      	nop
   15142:	b018      	add	sp, #96	; 0x60
   15144:	bd70      	pop	{r4, r5, r6, pc}
   15146:	bf00      	nop
   15148:	00014f4d 	.word	0x00014f4d
   1514c:	0001893c 	.word	0x0001893c
   15150:	10000034 	.word	0x10000034
   15154:	00016935 	.word	0x00016935

00015158 <Ssp::GetPeripheralMode()>:
  /// Gets the Peripheral modes from registers
  /// @return - returns a 16-bit value as follows: 0000_000x 0xx0_xxxx
  ///       MasterSlaveMode = 1-bit @ bit 8
  ///       FrameMode       = 2-bit @ bit 5
  ///       DataSize        = 4-bit @ bit 0
  uint16_t GetPeripheralMode() override
   15158:	b570      	push	{r4, r5, r6, lr}
   1515a:	b096      	sub	sp, #88	; 0x58
   1515c:	4674      	mov	r4, lr
   1515e:	9001      	str	r0, [sp, #4]
   15160:	4623      	mov	r3, r4
   15162:	4619      	mov	r1, r3
   15164:	4850      	ldr	r0, [pc, #320]	; (152a8 <Ssp::GetPeripheralMode()+0x150>)
   15166:	f7fd fe29 	bl	12dbc <__cyg_profile_func_enter>
  {
    uint16_t return_val = 0;
   1516a:	2300      	movs	r3, #0
   1516c:	f8ad 3056 	strh.w	r3, [sp, #86]	; 0x56
    uint32_t pssp       = util::Value(pssp_);
   15170:	9b01      	ldr	r3, [sp, #4]
   15172:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   15174:	4618      	mov	r0, r3
   15176:	f7fb faa3 	bl	106c0 <int util::Value<Ssp::Peripheral, int>(Ssp::Peripheral)>
   1517a:	4603      	mov	r3, r0
   1517c:	9314      	str	r3, [sp, #80]	; 0x50
    // TODO(#371): Find a better alternative to powering up the peripheral for
    // every method.
    Ssp::PowerUpPeripheral(Ssp::kPowerBit[pssp]);
   1517e:	9b01      	ldr	r3, [sp, #4]
   15180:	1d18      	adds	r0, r3, #4
   15182:	9b14      	ldr	r3, [sp, #80]	; 0x50
   15184:	009b      	lsls	r3, r3, #2
   15186:	4a49      	ldr	r2, [pc, #292]	; (152ac <Ssp::GetPeripheralMode()+0x154>)
   15188:	4413      	add	r3, r2
   1518a:	4619      	mov	r1, r3
   1518c:	f7fb fd32 	bl	10bf4 <Lpc40xxSystemController::PowerUpPeripheral(SystemControllerInterface::PeripheralID const&)>

    return_val = static_cast<uint16_t>(
        (bit::Extract(ssp_registers[pssp]->CR0, kDataBit, 4)) +
   15190:	4a47      	ldr	r2, [pc, #284]	; (152b0 <Ssp::GetPeripheralMode()+0x158>)
   15192:	9b14      	ldr	r3, [sp, #80]	; 0x50
   15194:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15198:	681b      	ldr	r3, [r3, #0]
   1519a:	9307      	str	r3, [sp, #28]
   1519c:	2300      	movs	r3, #0
   1519e:	9306      	str	r3, [sp, #24]
   151a0:	2304      	movs	r3, #4
   151a2:	9305      	str	r3, [sp, #20]
   151a4:	4623      	mov	r3, r4
   151a6:	4619      	mov	r1, r3
   151a8:	4842      	ldr	r0, [pc, #264]	; (152b4 <Ssp::GetPeripheralMode()+0x15c>)
   151aa:	f7fd fe07 	bl	12dbc <__cyg_profile_func_enter>
  constexpr UnsignedT kFieldOfOnes = GenerateFieldOfOnes<T>();
   151ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   151b2:	9304      	str	r3, [sp, #16]
  constexpr size_t kTargetWidth     = sizeof(T) * 8;
   151b4:	2320      	movs	r3, #32
   151b6:	9303      	str	r3, [sp, #12]
  UnsignedT mask   = kFieldOfOnes >> (kTargetWidth - width);
   151b8:	9b05      	ldr	r3, [sp, #20]
   151ba:	f1c3 0320 	rsb	r3, r3, #32
   151be:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   151c2:	fa22 f303 	lsr.w	r3, r2, r3
   151c6:	9302      	str	r3, [sp, #8]
  return (target >> position) & mask;
   151c8:	9a07      	ldr	r2, [sp, #28]
   151ca:	9b06      	ldr	r3, [sp, #24]
   151cc:	40da      	lsrs	r2, r3
   151ce:	9b02      	ldr	r3, [sp, #8]
   151d0:	ea02 0503 	and.w	r5, r2, r3
   151d4:	4623      	mov	r3, r4
   151d6:	4619      	mov	r1, r3
   151d8:	4836      	ldr	r0, [pc, #216]	; (152b4 <Ssp::GetPeripheralMode()+0x15c>)
   151da:	f7fd fe03 	bl	12de4 <__cyg_profile_func_exit>
   151de:	b2ad      	uxth	r5, r5
        ((bit::Extract(ssp_registers[pssp]->CR0, kFrameBit, 2)) << 5) +
   151e0:	4a33      	ldr	r2, [pc, #204]	; (152b0 <Ssp::GetPeripheralMode()+0x158>)
   151e2:	9b14      	ldr	r3, [sp, #80]	; 0x50
   151e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   151e8:	681b      	ldr	r3, [r3, #0]
   151ea:	930d      	str	r3, [sp, #52]	; 0x34
   151ec:	2304      	movs	r3, #4
   151ee:	930c      	str	r3, [sp, #48]	; 0x30
   151f0:	2302      	movs	r3, #2
   151f2:	930b      	str	r3, [sp, #44]	; 0x2c
   151f4:	4623      	mov	r3, r4
   151f6:	4619      	mov	r1, r3
   151f8:	482e      	ldr	r0, [pc, #184]	; (152b4 <Ssp::GetPeripheralMode()+0x15c>)
   151fa:	f7fd fddf 	bl	12dbc <__cyg_profile_func_enter>
  constexpr UnsignedT kFieldOfOnes = GenerateFieldOfOnes<T>();
   151fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   15202:	930a      	str	r3, [sp, #40]	; 0x28
  constexpr size_t kTargetWidth     = sizeof(T) * 8;
   15204:	2320      	movs	r3, #32
   15206:	9309      	str	r3, [sp, #36]	; 0x24
  UnsignedT mask   = kFieldOfOnes >> (kTargetWidth - width);
   15208:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1520a:	f1c3 0320 	rsb	r3, r3, #32
   1520e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   15212:	fa22 f303 	lsr.w	r3, r2, r3
   15216:	9308      	str	r3, [sp, #32]
  return (target >> position) & mask;
   15218:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   1521a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1521c:	40da      	lsrs	r2, r3
   1521e:	9b08      	ldr	r3, [sp, #32]
   15220:	ea02 0603 	and.w	r6, r2, r3
   15224:	4623      	mov	r3, r4
   15226:	4619      	mov	r1, r3
   15228:	4822      	ldr	r0, [pc, #136]	; (152b4 <Ssp::GetPeripheralMode()+0x15c>)
   1522a:	f7fd fddb 	bl	12de4 <__cyg_profile_func_exit>
   1522e:	b2b3      	uxth	r3, r6
   15230:	015b      	lsls	r3, r3, #5
   15232:	b29b      	uxth	r3, r3
        (bit::Extract(ssp_registers[pssp]->CR0, kDataBit, 4)) +
   15234:	442b      	add	r3, r5
   15236:	b29d      	uxth	r5, r3
        ((bit::Extract(ssp_registers[pssp]->CR1, kMasterModeBit)) << 8));
   15238:	4a1d      	ldr	r2, [pc, #116]	; (152b0 <Ssp::GetPeripheralMode()+0x158>)
   1523a:	9b14      	ldr	r3, [sp, #80]	; 0x50
   1523c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15240:	685b      	ldr	r3, [r3, #4]
   15242:	9313      	str	r3, [sp, #76]	; 0x4c
   15244:	2302      	movs	r3, #2
   15246:	9312      	str	r3, [sp, #72]	; 0x48
   15248:	2301      	movs	r3, #1
   1524a:	9311      	str	r3, [sp, #68]	; 0x44
   1524c:	4623      	mov	r3, r4
   1524e:	4619      	mov	r1, r3
   15250:	4818      	ldr	r0, [pc, #96]	; (152b4 <Ssp::GetPeripheralMode()+0x15c>)
   15252:	f7fd fdb3 	bl	12dbc <__cyg_profile_func_enter>
  constexpr UnsignedT kFieldOfOnes = GenerateFieldOfOnes<T>();
   15256:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1525a:	9310      	str	r3, [sp, #64]	; 0x40
  constexpr size_t kTargetWidth     = sizeof(T) * 8;
   1525c:	2320      	movs	r3, #32
   1525e:	930f      	str	r3, [sp, #60]	; 0x3c
  UnsignedT mask   = kFieldOfOnes >> (kTargetWidth - width);
   15260:	9b11      	ldr	r3, [sp, #68]	; 0x44
   15262:	f1c3 0320 	rsb	r3, r3, #32
   15266:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1526a:	fa22 f303 	lsr.w	r3, r2, r3
   1526e:	930e      	str	r3, [sp, #56]	; 0x38
  return (target >> position) & mask;
   15270:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   15272:	9b12      	ldr	r3, [sp, #72]	; 0x48
   15274:	40da      	lsrs	r2, r3
   15276:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   15278:	ea02 0603 	and.w	r6, r2, r3
   1527c:	4623      	mov	r3, r4
   1527e:	4619      	mov	r1, r3
   15280:	480c      	ldr	r0, [pc, #48]	; (152b4 <Ssp::GetPeripheralMode()+0x15c>)
   15282:	f7fd fdaf 	bl	12de4 <__cyg_profile_func_exit>
   15286:	b2b3      	uxth	r3, r6
   15288:	021b      	lsls	r3, r3, #8
   1528a:	b29b      	uxth	r3, r3
    return_val = static_cast<uint16_t>(
   1528c:	442b      	add	r3, r5
   1528e:	f8ad 3056 	strh.w	r3, [sp, #86]	; 0x56
    return return_val;
   15292:	f8bd 5056 	ldrh.w	r5, [sp, #86]	; 0x56
   15296:	4623      	mov	r3, r4
   15298:	4619      	mov	r1, r3
   1529a:	4803      	ldr	r0, [pc, #12]	; (152a8 <Ssp::GetPeripheralMode()+0x150>)
   1529c:	f7fd fda2 	bl	12de4 <__cyg_profile_func_exit>
   152a0:	462b      	mov	r3, r5
  }
   152a2:	4618      	mov	r0, r3
   152a4:	b016      	add	sp, #88	; 0x58
   152a6:	bd70      	pop	{r4, r5, r6, pc}
   152a8:	00015159 	.word	0x00015159
   152ac:	0001893c 	.word	0x0001893c
   152b0:	10000034 	.word	0x10000034
   152b4:	000169a9 	.word	0x000169a9

000152b8 <Ssp::SetClock(bool, bool, unsigned char, unsigned char)>:
  /// Sets the clock rate for the Peripheral
  /// @param polarity - maintain bus on clock 0=low or 1=high between frames
  /// @param phase - capture serial data on 0=first or 1=second clock cycle
  /// @param divider - see notes in SSP_Interface above
  /// @param prescaler - divides the PCLK, must be even value between 2-254
  void SetClock(bool polarity, bool phase, uint8_t divider,
   152b8:	b570      	push	{r4, r5, r6, lr}
   152ba:	b098      	sub	sp, #96	; 0x60
   152bc:	4674      	mov	r4, lr
   152be:	9001      	str	r0, [sp, #4]
   152c0:	4608      	mov	r0, r1
   152c2:	4611      	mov	r1, r2
   152c4:	461a      	mov	r2, r3
   152c6:	4603      	mov	r3, r0
   152c8:	f88d 3003 	strb.w	r3, [sp, #3]
   152cc:	460b      	mov	r3, r1
   152ce:	f88d 3002 	strb.w	r3, [sp, #2]
   152d2:	4613      	mov	r3, r2
   152d4:	f88d 3001 	strb.w	r3, [sp, #1]
   152d8:	4623      	mov	r3, r4
   152da:	4619      	mov	r1, r3
   152dc:	486c      	ldr	r0, [pc, #432]	; (15490 <Ssp::SetClock(bool, bool, unsigned char, unsigned char)+0x1d8>)
   152de:	f7fd fd6d 	bl	12dbc <__cyg_profile_func_enter>
                uint8_t prescaler) override
  {
    uint32_t pssp = util::Value(pssp_);
   152e2:	9b01      	ldr	r3, [sp, #4]
   152e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   152e6:	4618      	mov	r0, r3
   152e8:	f7fb f9ea 	bl	106c0 <int util::Value<Ssp::Peripheral, int>(Ssp::Peripheral)>
   152ec:	4603      	mov	r3, r0
   152ee:	9317      	str	r3, [sp, #92]	; 0x5c
    // TODO(#371): Find a better alternative to powering up the peripheral for
    // every method.
    Ssp::PowerUpPeripheral(Ssp::kPowerBit[pssp]);
   152f0:	9b01      	ldr	r3, [sp, #4]
   152f2:	1d18      	adds	r0, r3, #4
   152f4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   152f6:	009b      	lsls	r3, r3, #2
   152f8:	4a66      	ldr	r2, [pc, #408]	; (15494 <Ssp::SetClock(bool, bool, unsigned char, unsigned char)+0x1dc>)
   152fa:	4413      	add	r3, r2
   152fc:	4619      	mov	r1, r3
   152fe:	f7fb fc79 	bl	10bf4 <Lpc40xxSystemController::PowerUpPeripheral(SystemControllerInterface::PeripheralID const&)>
    // first clear the appropriate registers
    ssp_registers[pssp]->CR0 =
        bit::Insert(ssp_registers[pssp]->CR0, polarity, kPolarityBit, 1);
   15302:	4a65      	ldr	r2, [pc, #404]	; (15498 <Ssp::SetClock(bool, bool, unsigned char, unsigned char)+0x1e0>)
   15304:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   15306:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1530a:	681b      	ldr	r3, [r3, #0]
    ssp_registers[pssp]->CR0 =
   1530c:	4962      	ldr	r1, [pc, #392]	; (15498 <Ssp::SetClock(bool, bool, unsigned char, unsigned char)+0x1e0>)
   1530e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   15310:	f851 5022 	ldr.w	r5, [r1, r2, lsl #2]
   15314:	9308      	str	r3, [sp, #32]
   15316:	f89d 3003 	ldrb.w	r3, [sp, #3]
   1531a:	f88d 301f 	strb.w	r3, [sp, #31]
   1531e:	2306      	movs	r3, #6
   15320:	9306      	str	r3, [sp, #24]
   15322:	2301      	movs	r3, #1
   15324:	9305      	str	r3, [sp, #20]
   15326:	4623      	mov	r3, r4
   15328:	4619      	mov	r1, r3
   1532a:	485c      	ldr	r0, [pc, #368]	; (1549c <Ssp::SetClock(bool, bool, unsigned char, unsigned char)+0x1e4>)
   1532c:	f7fd fd46 	bl	12dbc <__cyg_profile_func_enter>
  constexpr UnsignedT kFieldOfOnes = GenerateFieldOfOnes<T>();
   15330:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   15334:	9304      	str	r3, [sp, #16]
  constexpr size_t kTargetWidth     = sizeof(T) * 8;
   15336:	2320      	movs	r3, #32
   15338:	9303      	str	r3, [sp, #12]
  UnsignedT mask   = kFieldOfOnes >> (kTargetWidth - width);
   1533a:	9b05      	ldr	r3, [sp, #20]
   1533c:	f1c3 0320 	rsb	r3, r3, #32
   15340:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   15344:	fa22 f303 	lsr.w	r3, r2, r3
   15348:	9302      	str	r3, [sp, #8]
  target &= ~(mask << position);
   1534a:	9a02      	ldr	r2, [sp, #8]
   1534c:	9b06      	ldr	r3, [sp, #24]
   1534e:	fa02 f303 	lsl.w	r3, r2, r3
   15352:	43db      	mvns	r3, r3
   15354:	9a08      	ldr	r2, [sp, #32]
   15356:	4013      	ands	r3, r2
   15358:	9308      	str	r3, [sp, #32]
  target |= (value & mask) << position;
   1535a:	f89d 201f 	ldrb.w	r2, [sp, #31]
   1535e:	9b02      	ldr	r3, [sp, #8]
   15360:	401a      	ands	r2, r3
   15362:	9b06      	ldr	r3, [sp, #24]
   15364:	fa02 f303 	lsl.w	r3, r2, r3
   15368:	9a08      	ldr	r2, [sp, #32]
   1536a:	4313      	orrs	r3, r2
   1536c:	9308      	str	r3, [sp, #32]
  return target;
   1536e:	9e08      	ldr	r6, [sp, #32]
   15370:	4623      	mov	r3, r4
   15372:	4619      	mov	r1, r3
   15374:	4849      	ldr	r0, [pc, #292]	; (1549c <Ssp::SetClock(bool, bool, unsigned char, unsigned char)+0x1e4>)
   15376:	f7fd fd35 	bl	12de4 <__cyg_profile_func_exit>
   1537a:	602e      	str	r6, [r5, #0]
    ssp_registers[pssp]->CR0 =
        bit::Insert(ssp_registers[pssp]->CR0, phase, kPhaseBit, 1);
   1537c:	4a46      	ldr	r2, [pc, #280]	; (15498 <Ssp::SetClock(bool, bool, unsigned char, unsigned char)+0x1e0>)
   1537e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   15380:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15384:	681b      	ldr	r3, [r3, #0]
    ssp_registers[pssp]->CR0 =
   15386:	4944      	ldr	r1, [pc, #272]	; (15498 <Ssp::SetClock(bool, bool, unsigned char, unsigned char)+0x1e0>)
   15388:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   1538a:	f851 5022 	ldr.w	r5, [r1, r2, lsl #2]
   1538e:	930f      	str	r3, [sp, #60]	; 0x3c
   15390:	f89d 3002 	ldrb.w	r3, [sp, #2]
   15394:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
   15398:	2307      	movs	r3, #7
   1539a:	930d      	str	r3, [sp, #52]	; 0x34
   1539c:	2301      	movs	r3, #1
   1539e:	930c      	str	r3, [sp, #48]	; 0x30
   153a0:	4623      	mov	r3, r4
   153a2:	4619      	mov	r1, r3
   153a4:	483d      	ldr	r0, [pc, #244]	; (1549c <Ssp::SetClock(bool, bool, unsigned char, unsigned char)+0x1e4>)
   153a6:	f7fd fd09 	bl	12dbc <__cyg_profile_func_enter>
  constexpr UnsignedT kFieldOfOnes = GenerateFieldOfOnes<T>();
   153aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   153ae:	930b      	str	r3, [sp, #44]	; 0x2c
  constexpr size_t kTargetWidth     = sizeof(T) * 8;
   153b0:	2320      	movs	r3, #32
   153b2:	930a      	str	r3, [sp, #40]	; 0x28
  UnsignedT mask   = kFieldOfOnes >> (kTargetWidth - width);
   153b4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   153b6:	f1c3 0320 	rsb	r3, r3, #32
   153ba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   153be:	fa22 f303 	lsr.w	r3, r2, r3
   153c2:	9309      	str	r3, [sp, #36]	; 0x24
  target &= ~(mask << position);
   153c4:	9a09      	ldr	r2, [sp, #36]	; 0x24
   153c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   153c8:	fa02 f303 	lsl.w	r3, r2, r3
   153cc:	43db      	mvns	r3, r3
   153ce:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   153d0:	4013      	ands	r3, r2
   153d2:	930f      	str	r3, [sp, #60]	; 0x3c
  target |= (value & mask) << position;
   153d4:	f89d 203b 	ldrb.w	r2, [sp, #59]	; 0x3b
   153d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
   153da:	401a      	ands	r2, r3
   153dc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   153de:	fa02 f303 	lsl.w	r3, r2, r3
   153e2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   153e4:	4313      	orrs	r3, r2
   153e6:	930f      	str	r3, [sp, #60]	; 0x3c
  return target;
   153e8:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
   153ea:	4623      	mov	r3, r4
   153ec:	4619      	mov	r1, r3
   153ee:	482b      	ldr	r0, [pc, #172]	; (1549c <Ssp::SetClock(bool, bool, unsigned char, unsigned char)+0x1e4>)
   153f0:	f7fd fcf8 	bl	12de4 <__cyg_profile_func_exit>
   153f4:	602e      	str	r6, [r5, #0]
    ssp_registers[pssp]->CR0 =
        bit::Insert(ssp_registers[pssp]->CR0, divider, kDividerBit, 8);
   153f6:	4a28      	ldr	r2, [pc, #160]	; (15498 <Ssp::SetClock(bool, bool, unsigned char, unsigned char)+0x1e0>)
   153f8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   153fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   153fe:	681b      	ldr	r3, [r3, #0]
    ssp_registers[pssp]->CR0 =
   15400:	4925      	ldr	r1, [pc, #148]	; (15498 <Ssp::SetClock(bool, bool, unsigned char, unsigned char)+0x1e0>)
   15402:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   15404:	f851 5022 	ldr.w	r5, [r1, r2, lsl #2]
   15408:	9316      	str	r3, [sp, #88]	; 0x58
   1540a:	f89d 3001 	ldrb.w	r3, [sp, #1]
   1540e:	f88d 3057 	strb.w	r3, [sp, #87]	; 0x57
   15412:	2308      	movs	r3, #8
   15414:	9314      	str	r3, [sp, #80]	; 0x50
   15416:	2308      	movs	r3, #8
   15418:	9313      	str	r3, [sp, #76]	; 0x4c
   1541a:	4623      	mov	r3, r4
   1541c:	4619      	mov	r1, r3
   1541e:	4820      	ldr	r0, [pc, #128]	; (154a0 <Ssp::SetClock(bool, bool, unsigned char, unsigned char)+0x1e8>)
   15420:	f7fd fccc 	bl	12dbc <__cyg_profile_func_enter>
  constexpr UnsignedT kFieldOfOnes = GenerateFieldOfOnes<T>();
   15424:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   15428:	9312      	str	r3, [sp, #72]	; 0x48
  constexpr size_t kTargetWidth     = sizeof(T) * 8;
   1542a:	2320      	movs	r3, #32
   1542c:	9311      	str	r3, [sp, #68]	; 0x44
  UnsignedT mask   = kFieldOfOnes >> (kTargetWidth - width);
   1542e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   15430:	f1c3 0320 	rsb	r3, r3, #32
   15434:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   15438:	fa22 f303 	lsr.w	r3, r2, r3
   1543c:	9310      	str	r3, [sp, #64]	; 0x40
  target &= ~(mask << position);
   1543e:	9a10      	ldr	r2, [sp, #64]	; 0x40
   15440:	9b14      	ldr	r3, [sp, #80]	; 0x50
   15442:	fa02 f303 	lsl.w	r3, r2, r3
   15446:	43db      	mvns	r3, r3
   15448:	9a16      	ldr	r2, [sp, #88]	; 0x58
   1544a:	4013      	ands	r3, r2
   1544c:	9316      	str	r3, [sp, #88]	; 0x58
  target |= (value & mask) << position;
   1544e:	f89d 2057 	ldrb.w	r2, [sp, #87]	; 0x57
   15452:	9b10      	ldr	r3, [sp, #64]	; 0x40
   15454:	401a      	ands	r2, r3
   15456:	9b14      	ldr	r3, [sp, #80]	; 0x50
   15458:	fa02 f303 	lsl.w	r3, r2, r3
   1545c:	9a16      	ldr	r2, [sp, #88]	; 0x58
   1545e:	4313      	orrs	r3, r2
   15460:	9316      	str	r3, [sp, #88]	; 0x58
  return target;
   15462:	9e16      	ldr	r6, [sp, #88]	; 0x58
   15464:	4623      	mov	r3, r4
   15466:	4619      	mov	r1, r3
   15468:	480d      	ldr	r0, [pc, #52]	; (154a0 <Ssp::SetClock(bool, bool, unsigned char, unsigned char)+0x1e8>)
   1546a:	f7fd fcbb 	bl	12de4 <__cyg_profile_func_exit>
   1546e:	602e      	str	r6, [r5, #0]
    ssp_registers[pssp]->CPSR = prescaler;
   15470:	4a09      	ldr	r2, [pc, #36]	; (15498 <Ssp::SetClock(bool, bool, unsigned char, unsigned char)+0x1e0>)
   15472:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   15474:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15478:	f89d 2070 	ldrb.w	r2, [sp, #112]	; 0x70
   1547c:	611a      	str	r2, [r3, #16]
   1547e:	4623      	mov	r3, r4
   15480:	4619      	mov	r1, r3
   15482:	4803      	ldr	r0, [pc, #12]	; (15490 <Ssp::SetClock(bool, bool, unsigned char, unsigned char)+0x1d8>)
   15484:	f7fd fcae 	bl	12de4 <__cyg_profile_func_exit>
  }
   15488:	bf00      	nop
   1548a:	b018      	add	sp, #96	; 0x60
   1548c:	bd70      	pop	{r4, r5, r6, pc}
   1548e:	bf00      	nop
   15490:	000152b9 	.word	0x000152b9
   15494:	0001893c 	.word	0x0001893c
   15498:	10000034 	.word	0x10000034
   1549c:	000169fd 	.word	0x000169fd
   154a0:	00016935 	.word	0x00016935

000154a4 <Ssp::GetClock()>:
  ///   0000_0000 0000_0x0x xxxx_xxxx xxxx_xxxx
  ///       polarity    = 1-bit @ bit 18
  ///       phase       = 1-bit @ bit 16
  ///       divider     = 8-bits @ bit 8
  ///       prescaler   = 8-bits @ bit 0
  uint32_t GetClock() override
   154a4:	b570      	push	{r4, r5, r6, lr}
   154a6:	b094      	sub	sp, #80	; 0x50
   154a8:	4674      	mov	r4, lr
   154aa:	9001      	str	r0, [sp, #4]
   154ac:	4623      	mov	r3, r4
   154ae:	4619      	mov	r1, r3
   154b0:	4858      	ldr	r0, [pc, #352]	; (15614 <Ssp::GetClock()+0x170>)
   154b2:	f7fd fc83 	bl	12dbc <__cyg_profile_func_enter>
  {
    uint32_t return_val = 0;
   154b6:	2300      	movs	r3, #0
   154b8:	9313      	str	r3, [sp, #76]	; 0x4c
    uint32_t pssp       = util::Value(pssp_);
   154ba:	9b01      	ldr	r3, [sp, #4]
   154bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   154be:	4618      	mov	r0, r3
   154c0:	f7fb f8fe 	bl	106c0 <int util::Value<Ssp::Peripheral, int>(Ssp::Peripheral)>
   154c4:	4603      	mov	r3, r0
   154c6:	9312      	str	r3, [sp, #72]	; 0x48
    // TODO(#371): Find a better alternative to powering up the peripheral for
    // every method.
    Ssp::PowerUpPeripheral(Ssp::kPowerBit[pssp]);
   154c8:	9b01      	ldr	r3, [sp, #4]
   154ca:	1d18      	adds	r0, r3, #4
   154cc:	9b12      	ldr	r3, [sp, #72]	; 0x48
   154ce:	009b      	lsls	r3, r3, #2
   154d0:	4a51      	ldr	r2, [pc, #324]	; (15618 <Ssp::GetClock()+0x174>)
   154d2:	4413      	add	r3, r2
   154d4:	4619      	mov	r1, r3
   154d6:	f7fb fb8d 	bl	10bf4 <Lpc40xxSystemController::PowerUpPeripheral(SystemControllerInterface::PeripheralID const&)>

    return_val =
        (bit::Extract(ssp_registers[pssp]->CPSR, kPrescalerBit, 8)) +
   154da:	4a50      	ldr	r2, [pc, #320]	; (1561c <Ssp::GetClock()+0x178>)
   154dc:	9b12      	ldr	r3, [sp, #72]	; 0x48
   154de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   154e2:	691b      	ldr	r3, [r3, #16]
   154e4:	9307      	str	r3, [sp, #28]
   154e6:	2300      	movs	r3, #0
   154e8:	9306      	str	r3, [sp, #24]
   154ea:	2308      	movs	r3, #8
   154ec:	9305      	str	r3, [sp, #20]
   154ee:	4623      	mov	r3, r4
   154f0:	4619      	mov	r1, r3
   154f2:	484b      	ldr	r0, [pc, #300]	; (15620 <Ssp::GetClock()+0x17c>)
   154f4:	f7fd fc62 	bl	12dbc <__cyg_profile_func_enter>
  constexpr UnsignedT kFieldOfOnes = GenerateFieldOfOnes<T>();
   154f8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   154fc:	9304      	str	r3, [sp, #16]
  constexpr size_t kTargetWidth     = sizeof(T) * 8;
   154fe:	2320      	movs	r3, #32
   15500:	9303      	str	r3, [sp, #12]
  UnsignedT mask   = kFieldOfOnes >> (kTargetWidth - width);
   15502:	9b05      	ldr	r3, [sp, #20]
   15504:	f1c3 0320 	rsb	r3, r3, #32
   15508:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1550c:	fa22 f303 	lsr.w	r3, r2, r3
   15510:	9302      	str	r3, [sp, #8]
  return (target >> position) & mask;
   15512:	9a07      	ldr	r2, [sp, #28]
   15514:	9b06      	ldr	r3, [sp, #24]
   15516:	40da      	lsrs	r2, r3
   15518:	9b02      	ldr	r3, [sp, #8]
   1551a:	ea02 0503 	and.w	r5, r2, r3
   1551e:	4623      	mov	r3, r4
   15520:	4619      	mov	r1, r3
   15522:	483f      	ldr	r0, [pc, #252]	; (15620 <Ssp::GetClock()+0x17c>)
   15524:	f7fd fc5e 	bl	12de4 <__cyg_profile_func_exit>
        ((bit::Extract(ssp_registers[pssp]->CR0, kDividerBit, 8)) << 8) +
   15528:	4a3c      	ldr	r2, [pc, #240]	; (1561c <Ssp::GetClock()+0x178>)
   1552a:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1552c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15530:	681b      	ldr	r3, [r3, #0]
   15532:	930d      	str	r3, [sp, #52]	; 0x34
   15534:	2308      	movs	r3, #8
   15536:	930c      	str	r3, [sp, #48]	; 0x30
   15538:	2308      	movs	r3, #8
   1553a:	930b      	str	r3, [sp, #44]	; 0x2c
   1553c:	4623      	mov	r3, r4
   1553e:	4619      	mov	r1, r3
   15540:	4837      	ldr	r0, [pc, #220]	; (15620 <Ssp::GetClock()+0x17c>)
   15542:	f7fd fc3b 	bl	12dbc <__cyg_profile_func_enter>
  constexpr UnsignedT kFieldOfOnes = GenerateFieldOfOnes<T>();
   15546:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1554a:	930a      	str	r3, [sp, #40]	; 0x28
  constexpr size_t kTargetWidth     = sizeof(T) * 8;
   1554c:	2320      	movs	r3, #32
   1554e:	9309      	str	r3, [sp, #36]	; 0x24
  UnsignedT mask   = kFieldOfOnes >> (kTargetWidth - width);
   15550:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   15552:	f1c3 0320 	rsb	r3, r3, #32
   15556:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1555a:	fa22 f303 	lsr.w	r3, r2, r3
   1555e:	9308      	str	r3, [sp, #32]
  return (target >> position) & mask;
   15560:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   15562:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   15564:	40da      	lsrs	r2, r3
   15566:	9b08      	ldr	r3, [sp, #32]
   15568:	ea02 0603 	and.w	r6, r2, r3
   1556c:	4623      	mov	r3, r4
   1556e:	4619      	mov	r1, r3
   15570:	482b      	ldr	r0, [pc, #172]	; (15620 <Ssp::GetClock()+0x17c>)
   15572:	f7fd fc37 	bl	12de4 <__cyg_profile_func_exit>
   15576:	0233      	lsls	r3, r6, #8
        (bit::Extract(ssp_registers[pssp]->CPSR, kPrescalerBit, 8)) +
   15578:	441d      	add	r5, r3
        ((bit::Read(ssp_registers[pssp]->CR0, kPhaseBit)) << 16) +
   1557a:	4a28      	ldr	r2, [pc, #160]	; (1561c <Ssp::GetClock()+0x178>)
   1557c:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1557e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15582:	681b      	ldr	r3, [r3, #0]
   15584:	930f      	str	r3, [sp, #60]	; 0x3c
   15586:	2307      	movs	r3, #7
   15588:	930e      	str	r3, [sp, #56]	; 0x38
   1558a:	4623      	mov	r3, r4
   1558c:	4619      	mov	r1, r3
   1558e:	4825      	ldr	r0, [pc, #148]	; (15624 <Ssp::GetClock()+0x180>)
   15590:	f7fd fc14 	bl	12dbc <__cyg_profile_func_enter>
  return static_cast<bool>(target & (1 << position));
   15594:	2201      	movs	r2, #1
   15596:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   15598:	fa02 f303 	lsl.w	r3, r2, r3
   1559c:	461a      	mov	r2, r3
   1559e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   155a0:	4013      	ands	r3, r2
   155a2:	2b00      	cmp	r3, #0
   155a4:	bf14      	ite	ne
   155a6:	2301      	movne	r3, #1
   155a8:	2300      	moveq	r3, #0
   155aa:	b2de      	uxtb	r6, r3
   155ac:	4623      	mov	r3, r4
   155ae:	4619      	mov	r1, r3
   155b0:	481c      	ldr	r0, [pc, #112]	; (15624 <Ssp::GetClock()+0x180>)
   155b2:	f7fd fc17 	bl	12de4 <__cyg_profile_func_exit>
   155b6:	4633      	mov	r3, r6
   155b8:	041b      	lsls	r3, r3, #16
        ((bit::Extract(ssp_registers[pssp]->CR0, kDividerBit, 8)) << 8) +
   155ba:	441d      	add	r5, r3
        ((bit::Read(ssp_registers[pssp]->CR0, kPolarityBit)) << 18);
   155bc:	4a17      	ldr	r2, [pc, #92]	; (1561c <Ssp::GetClock()+0x178>)
   155be:	9b12      	ldr	r3, [sp, #72]	; 0x48
   155c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   155c4:	681b      	ldr	r3, [r3, #0]
   155c6:	9311      	str	r3, [sp, #68]	; 0x44
   155c8:	2306      	movs	r3, #6
   155ca:	9310      	str	r3, [sp, #64]	; 0x40
   155cc:	4623      	mov	r3, r4
   155ce:	4619      	mov	r1, r3
   155d0:	4814      	ldr	r0, [pc, #80]	; (15624 <Ssp::GetClock()+0x180>)
   155d2:	f7fd fbf3 	bl	12dbc <__cyg_profile_func_enter>
   155d6:	2201      	movs	r2, #1
   155d8:	9b10      	ldr	r3, [sp, #64]	; 0x40
   155da:	fa02 f303 	lsl.w	r3, r2, r3
   155de:	461a      	mov	r2, r3
   155e0:	9b11      	ldr	r3, [sp, #68]	; 0x44
   155e2:	4013      	ands	r3, r2
   155e4:	2b00      	cmp	r3, #0
   155e6:	bf14      	ite	ne
   155e8:	2301      	movne	r3, #1
   155ea:	2300      	moveq	r3, #0
   155ec:	b2de      	uxtb	r6, r3
   155ee:	4623      	mov	r3, r4
   155f0:	4619      	mov	r1, r3
   155f2:	480c      	ldr	r0, [pc, #48]	; (15624 <Ssp::GetClock()+0x180>)
   155f4:	f7fd fbf6 	bl	12de4 <__cyg_profile_func_exit>
   155f8:	4633      	mov	r3, r6
   155fa:	049b      	lsls	r3, r3, #18
    return_val =
   155fc:	442b      	add	r3, r5
   155fe:	9313      	str	r3, [sp, #76]	; 0x4c

    return return_val;
   15600:	9d13      	ldr	r5, [sp, #76]	; 0x4c
   15602:	4623      	mov	r3, r4
   15604:	4619      	mov	r1, r3
   15606:	4803      	ldr	r0, [pc, #12]	; (15614 <Ssp::GetClock()+0x170>)
   15608:	f7fd fbec 	bl	12de4 <__cyg_profile_func_exit>
   1560c:	462b      	mov	r3, r5
  }
   1560e:	4618      	mov	r0, r3
   15610:	b014      	add	sp, #80	; 0x50
   15612:	bd70      	pop	{r4, r5, r6, pc}
   15614:	000154a5 	.word	0x000154a5
   15618:	0001893c 	.word	0x0001893c
   1561c:	10000034 	.word	0x10000034
   15620:	000169a9 	.word	0x000169a9
   15624:	0001092d 	.word	0x0001092d

00015628 <SdInterface::SdInterface()>:
// NOLINTNEXTLINE(readability-identifier-naming)
// Relevant Datasheet:
// https://www.sdcard.org/downloads/pls/pdf/index.php?p=Part1_Physical_Layer_Simplified_Specification_Ver6.00.jpg&f=Part1_Physical_Layer_Simplified_Specification_Ver6.00.pdf&e=EN_SS1
// TODO(#348):  Write a class to represent a single Sd Card Block to make use
//              of block-related functions easier.
class SdInterface
   15628:	b530      	push	{r4, r5, lr}
   1562a:	b083      	sub	sp, #12
   1562c:	4675      	mov	r5, lr
   1562e:	9001      	str	r0, [sp, #4]
   15630:	462b      	mov	r3, r5
   15632:	4619      	mov	r1, r3
   15634:	4807      	ldr	r0, [pc, #28]	; (15654 <SdInterface::SdInterface()+0x2c>)
   15636:	f7fd fbc1 	bl	12dbc <__cyg_profile_func_enter>
   1563a:	4a07      	ldr	r2, [pc, #28]	; (15658 <SdInterface::SdInterface()+0x30>)
   1563c:	9b01      	ldr	r3, [sp, #4]
   1563e:	601a      	str	r2, [r3, #0]
   15640:	9c01      	ldr	r4, [sp, #4]
   15642:	462b      	mov	r3, r5
   15644:	4619      	mov	r1, r3
   15646:	4803      	ldr	r0, [pc, #12]	; (15654 <SdInterface::SdInterface()+0x2c>)
   15648:	f7fd fbcc 	bl	12de4 <__cyg_profile_func_exit>
   1564c:	4623      	mov	r3, r4
   1564e:	4618      	mov	r0, r3
   15650:	b003      	add	sp, #12
   15652:	bd30      	pop	{r4, r5, pc}
   15654:	00015629 	.word	0x00015629
   15658:	00018d14 	.word	0x00018d14

0001565c <Sd::Sd(Sd::DebugSdCard_t, unsigned char, unsigned char, unsigned char, unsigned char)>:
  /// port that is broken out through the board's GPIO, allowing you to probe
  /// the chip select manually. To use this version instead of the main version,
  /// instantiate an Sd card instance like so:
  ///
  ///   Sd sdcard(Sd::DebugSdCard_t{});
  constexpr Sd(DebugSdCard_t, uint8_t port = 1, uint8_t pin = 8,
   1565c:	b530      	push	{r4, r5, lr}
   1565e:	b083      	sub	sp, #12
   15660:	4675      	mov	r5, lr
   15662:	9001      	str	r0, [sp, #4]
   15664:	f88d 1000 	strb.w	r1, [sp]
   15668:	4611      	mov	r1, r2
   1566a:	461a      	mov	r2, r3
   1566c:	460b      	mov	r3, r1
   1566e:	f88d 3003 	strb.w	r3, [sp, #3]
   15672:	4613      	mov	r3, r2
   15674:	f88d 3002 	strb.w	r3, [sp, #2]
   15678:	462b      	mov	r3, r5
   1567a:	4619      	mov	r1, r3
   1567c:	481d      	ldr	r0, [pc, #116]	; (156f4 <Sd::Sd(Sd::DebugSdCard_t, unsigned char, unsigned char, unsigned char, unsigned char)+0x98>)
   1567e:	f7fd fb9d 	bl	12dbc <__cyg_profile_func_enter>
      : ssp_interface_(&ssp_),
        ssp_(Ssp::Peripheral::kSsp2),
        chip_select_(&chip_select_pin_),
        chip_select_external_(&chip_select_external_pin_),
        chip_select_pin_(port, pin),
        chip_select_external_pin_(extport, extpin)
   15682:	9b01      	ldr	r3, [sp, #4]
   15684:	4618      	mov	r0, r3
   15686:	f7ff ffcf 	bl	15628 <SdInterface::SdInterface()>
   1568a:	4a1b      	ldr	r2, [pc, #108]	; (156f8 <Sd::Sd(Sd::DebugSdCard_t, unsigned char, unsigned char, unsigned char, unsigned char)+0x9c>)
   1568c:	9b01      	ldr	r3, [sp, #4]
   1568e:	601a      	str	r2, [r3, #0]
   15690:	9b01      	ldr	r3, [sp, #4]
   15692:	f103 0208 	add.w	r2, r3, #8
   15696:	9b01      	ldr	r3, [sp, #4]
   15698:	605a      	str	r2, [r3, #4]
   1569a:	9b01      	ldr	r3, [sp, #4]
   1569c:	3308      	adds	r3, #8
   1569e:	2102      	movs	r1, #2
   156a0:	4618      	mov	r0, r3
   156a2:	f7ff faf9 	bl	14c98 <Ssp::Ssp(Ssp::Peripheral)>
   156a6:	9b01      	ldr	r3, [sp, #4]
   156a8:	f103 0240 	add.w	r2, r3, #64	; 0x40
   156ac:	9b01      	ldr	r3, [sp, #4]
   156ae:	639a      	str	r2, [r3, #56]	; 0x38
   156b0:	9b01      	ldr	r3, [sp, #4]
   156b2:	f103 0254 	add.w	r2, r3, #84	; 0x54
   156b6:	9b01      	ldr	r3, [sp, #4]
   156b8:	63da      	str	r2, [r3, #60]	; 0x3c
   156ba:	9b01      	ldr	r3, [sp, #4]
   156bc:	3340      	adds	r3, #64	; 0x40
   156be:	f89d 2002 	ldrb.w	r2, [sp, #2]
   156c2:	f89d 1003 	ldrb.w	r1, [sp, #3]
   156c6:	4618      	mov	r0, r3
   156c8:	f7fe fe5a 	bl	14380 <Gpio::Gpio(unsigned char, unsigned char)>
   156cc:	9b01      	ldr	r3, [sp, #4]
   156ce:	3354      	adds	r3, #84	; 0x54
   156d0:	f89d 201c 	ldrb.w	r2, [sp, #28]
   156d4:	f89d 1018 	ldrb.w	r1, [sp, #24]
   156d8:	4618      	mov	r0, r3
   156da:	f7fe fe51 	bl	14380 <Gpio::Gpio(unsigned char, unsigned char)>
  {
  }
   156de:	9c01      	ldr	r4, [sp, #4]
   156e0:	462b      	mov	r3, r5
   156e2:	4619      	mov	r1, r3
   156e4:	4803      	ldr	r0, [pc, #12]	; (156f4 <Sd::Sd(Sd::DebugSdCard_t, unsigned char, unsigned char, unsigned char, unsigned char)+0x98>)
   156e6:	f7fd fb7d 	bl	12de4 <__cyg_profile_func_exit>
   156ea:	4623      	mov	r3, r4
   156ec:	4618      	mov	r0, r3
   156ee:	b003      	add	sp, #12
   156f0:	bd30      	pop	{r4, r5, pc}
   156f2:	bf00      	nop
   156f4:	0001565d 	.word	0x0001565d
   156f8:	00018ce8 	.word	0x00018ce8

000156fc <Sd::Initialize()>:

  void Initialize() override
   156fc:	b530      	push	{r4, r5, lr}
   156fe:	b085      	sub	sp, #20
   15700:	4675      	mov	r5, lr
   15702:	9003      	str	r0, [sp, #12]
   15704:	462b      	mov	r3, r5
   15706:	4619      	mov	r1, r3
   15708:	4827      	ldr	r0, [pc, #156]	; (157a8 <Sd::Initialize()+0xac>)
   1570a:	f7fd fb57 	bl	12dbc <__cyg_profile_func_enter>
  {
    LOG_DEBUG("Begin initialization:");
    LOG_DEBUG("Setting CS as output...");
    chip_select_->SetAsOutput();
   1570e:	9b03      	ldr	r3, [sp, #12]
   15710:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   15712:	9b03      	ldr	r3, [sp, #12]
   15714:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   15716:	681b      	ldr	r3, [r3, #0]
   15718:	3304      	adds	r3, #4
   1571a:	681b      	ldr	r3, [r3, #0]
   1571c:	4610      	mov	r0, r2
   1571e:	4798      	blx	r3
    chip_select_->SetHigh();
   15720:	9b03      	ldr	r3, [sp, #12]
   15722:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   15724:	9b03      	ldr	r3, [sp, #12]
   15726:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   15728:	681b      	ldr	r3, [r3, #0]
   1572a:	330c      	adds	r3, #12
   1572c:	681b      	ldr	r3, [r3, #0]
   1572e:	4610      	mov	r0, r2
   15730:	4798      	blx	r3
    chip_select_external_->SetAsOutput();
   15732:	9b03      	ldr	r3, [sp, #12]
   15734:	6bda      	ldr	r2, [r3, #60]	; 0x3c
   15736:	9b03      	ldr	r3, [sp, #12]
   15738:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1573a:	681b      	ldr	r3, [r3, #0]
   1573c:	3304      	adds	r3, #4
   1573e:	681b      	ldr	r3, [r3, #0]
   15740:	4610      	mov	r0, r2
   15742:	4798      	blx	r3
    chip_select_external_->SetHigh();
   15744:	9b03      	ldr	r3, [sp, #12]
   15746:	6bda      	ldr	r2, [r3, #60]	; 0x3c
   15748:	9b03      	ldr	r3, [sp, #12]
   1574a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1574c:	681b      	ldr	r3, [r3, #0]
   1574e:	330c      	adds	r3, #12
   15750:	681b      	ldr	r3, [r3, #0]
   15752:	4610      	mov	r0, r2
   15754:	4798      	blx	r3

    LOG_DEBUG("Setting SSP Clock Speed...");
    ssp_interface_->SetClock(false, false, 14, 2);  // 400kHz
   15756:	9b03      	ldr	r3, [sp, #12]
   15758:	6858      	ldr	r0, [r3, #4]
   1575a:	9b03      	ldr	r3, [sp, #12]
   1575c:	685b      	ldr	r3, [r3, #4]
   1575e:	681b      	ldr	r3, [r3, #0]
   15760:	3318      	adds	r3, #24
   15762:	681c      	ldr	r4, [r3, #0]
   15764:	2302      	movs	r3, #2
   15766:	9300      	str	r3, [sp, #0]
   15768:	230e      	movs	r3, #14
   1576a:	2200      	movs	r2, #0
   1576c:	2100      	movs	r1, #0
   1576e:	47a0      	blx	r4

    LOG_DEBUG("Setting Peripheral Mode...");
    ssp_interface_->SetPeripheralMode(Ssp::MasterSlaveMode::kMaster,
   15770:	9b03      	ldr	r3, [sp, #12]
   15772:	6858      	ldr	r0, [r3, #4]
   15774:	9b03      	ldr	r3, [sp, #12]
   15776:	685b      	ldr	r3, [r3, #4]
                                      Ssp::FrameMode::kSpi,
                                      Ssp::DataSize::kEight);
   15778:	681b      	ldr	r3, [r3, #0]
   1577a:	3310      	adds	r3, #16
   1577c:	681c      	ldr	r4, [r3, #0]
    ssp_interface_->SetPeripheralMode(Ssp::MasterSlaveMode::kMaster,
   1577e:	2307      	movs	r3, #7
   15780:	2200      	movs	r2, #0
   15782:	2100      	movs	r1, #0
   15784:	47a0      	blx	r4

    LOG_DEBUG("Starting SSP Peripheral...");
    ssp_interface_->Initialize();
   15786:	9b03      	ldr	r3, [sp, #12]
   15788:	685a      	ldr	r2, [r3, #4]
   1578a:	9b03      	ldr	r3, [sp, #12]
   1578c:	685b      	ldr	r3, [r3, #4]
   1578e:	681b      	ldr	r3, [r3, #0]
   15790:	681b      	ldr	r3, [r3, #0]
   15792:	4610      	mov	r0, r2
   15794:	4798      	blx	r3
   15796:	462b      	mov	r3, r5
   15798:	4619      	mov	r1, r3
   1579a:	4803      	ldr	r0, [pc, #12]	; (157a8 <Sd::Initialize()+0xac>)
   1579c:	f7fd fb22 	bl	12de4 <__cyg_profile_func_exit>
  }
   157a0:	bf00      	nop
   157a2:	b005      	add	sp, #20
   157a4:	bd30      	pop	{r4, r5, pc}
   157a6:	bf00      	nop
   157a8:	000156fd 	.word	0x000156fd

000157ac <Sd::Mount(SdInterface::CardInfo_t*)>:

  // Initialize SD Card
  // TODO(#349): Split method into smaller piece with single jobs
  bool Mount(CardInfo_t * sd) override
   157ac:	b530      	push	{r4, r5, lr}
   157ae:	b08b      	sub	sp, #44	; 0x2c
   157b0:	4675      	mov	r5, lr
   157b2:	9003      	str	r0, [sp, #12]
   157b4:	9102      	str	r1, [sp, #8]
   157b6:	462b      	mov	r3, r5
   157b8:	4619      	mov	r1, r3
   157ba:	48a7      	ldr	r0, [pc, #668]	; (15a58 <Sd::Mount(SdInterface::CardInfo_t*)+0x2ac>)
   157bc:	f7fd fafe 	bl	12dbc <__cyg_profile_func_enter>
  {
    uint8_t tries     = 0;
   157c0:	2300      	movs	r3, #0
   157c2:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    bool card_is_idle = false;
   157c6:	2300      	movs	r3, #0
   157c8:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26

    // Reset the card and force it to go to idle state at <400kHz with a
    // CMD0 + (active-low) CS
    LOG_DEBUG("Sending SD Card to Idle State...");
    sd->response.length = SendCmd(Command::kReset, 0x00000000,
                                  sd->response.data.byte, 100, KeepAlive::kYes);
   157cc:	9b03      	ldr	r3, [sp, #12]
   157ce:	681b      	ldr	r3, [r3, #0]
   157d0:	681c      	ldr	r4, [r3, #0]
    sd->response.length = SendCmd(Command::kReset, 0x00000000,
   157d2:	9b02      	ldr	r3, [sp, #8]
   157d4:	f103 0208 	add.w	r2, r3, #8
   157d8:	2301      	movs	r3, #1
   157da:	9301      	str	r3, [sp, #4]
   157dc:	2364      	movs	r3, #100	; 0x64
   157de:	9300      	str	r3, [sp, #0]
   157e0:	4613      	mov	r3, r2
   157e2:	2200      	movs	r2, #0
   157e4:	2140      	movs	r1, #64	; 0x40
   157e6:	9803      	ldr	r0, [sp, #12]
   157e8:	47a0      	blx	r4
   157ea:	4602      	mov	r2, r0
   157ec:	9b02      	ldr	r3, [sp, #8]
   157ee:	611a      	str	r2, [r3, #16]

    // Reset the card again to trigger SPI mode
    LOG_DEBUG("Initializing SPI mode...");
    do
    {
      tries++;
   157f0:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   157f4:	3301      	adds	r3, #1
   157f6:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
      sd->response.length = SendCmd(
          Command::kReset, 0x00, sd->response.data.byte, 100, KeepAlive::kYes);
   157fa:	9b03      	ldr	r3, [sp, #12]
   157fc:	681b      	ldr	r3, [r3, #0]
   157fe:	681c      	ldr	r4, [r3, #0]
      sd->response.length = SendCmd(
   15800:	9b02      	ldr	r3, [sp, #8]
   15802:	f103 0208 	add.w	r2, r3, #8
   15806:	2301      	movs	r3, #1
   15808:	9301      	str	r3, [sp, #4]
   1580a:	2364      	movs	r3, #100	; 0x64
   1580c:	9300      	str	r3, [sp, #0]
   1580e:	4613      	mov	r3, r2
   15810:	2200      	movs	r2, #0
   15812:	2140      	movs	r1, #64	; 0x40
   15814:	9803      	ldr	r0, [sp, #12]
   15816:	47a0      	blx	r4
   15818:	4602      	mov	r2, r0
   1581a:	9b02      	ldr	r3, [sp, #8]
   1581c:	611a      	str	r2, [r3, #16]

      // Check if R1 response frame's bit 1 is set (to ensure that
      // card is in idle state)
      if (sd->response.data.byte[0] != 0xFF &&
   1581e:	9b02      	ldr	r3, [sp, #8]
   15820:	7a1b      	ldrb	r3, [r3, #8]
   15822:	2bff      	cmp	r3, #255	; 0xff
   15824:	d008      	beq.n	15838 <Sd::Mount(SdInterface::CardInfo_t*)+0x8c>
          (sd->response.data.byte[0] & 0x01) == 0x01)
   15826:	9b02      	ldr	r3, [sp, #8]
   15828:	7a1b      	ldrb	r3, [r3, #8]
   1582a:	f003 0301 	and.w	r3, r3, #1
      if (sd->response.data.byte[0] != 0xFF &&
   1582e:	2b00      	cmp	r3, #0
   15830:	d002      	beq.n	15838 <Sd::Mount(SdInterface::CardInfo_t*)+0x8c>
      {
        // If it is, we can move on; otherwise, keep trying for a set
        // amount of tries
        card_is_idle = true;
   15832:	2301      	movs	r3, #1
   15834:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
      }
      Delay(10);
   15838:	f04f 000a 	mov.w	r0, #10
   1583c:	f04f 0100 	mov.w	r1, #0
   15840:	f7fa fea0 	bl	10584 <Delay(unsigned long long)>
    } while (tries < kBusTimeout && !card_is_idle);
   15844:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   15848:	2bf9      	cmp	r3, #249	; 0xf9
   1584a:	d804      	bhi.n	15856 <Sd::Mount(SdInterface::CardInfo_t*)+0xaa>
   1584c:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
   15850:	2b00      	cmp	r3, #0
   15852:	d100      	bne.n	15856 <Sd::Mount(SdInterface::CardInfo_t*)+0xaa>
    do
   15854:	e7cc      	b.n	157f0 <Sd::Mount(SdInterface::CardInfo_t*)+0x44>
    LOG_DEBUG("%d tries", tries);
    if (tries >= kBusTimeout)
   15856:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   1585a:	2bf9      	cmp	r3, #249	; 0xf9
   1585c:	d91b      	bls.n	15896 <Sd::Mount(SdInterface::CardInfo_t*)+0xea>
    {
      LOG_ERROR("Failed to initiate SPI mode within timeout. Aborting!");
   1585e:	f240 13ff 	movw	r3, #511	; 0x1ff
   15862:	4a7e      	ldr	r2, [pc, #504]	; (15a5c <Sd::Mount(SdInterface::CardInfo_t*)+0x2b0>)
   15864:	497e      	ldr	r1, [pc, #504]	; (15a60 <Sd::Mount(SdInterface::CardInfo_t*)+0x2b4>)
   15866:	487f      	ldr	r0, [pc, #508]	; (15a64 <Sd::Mount(SdInterface::CardInfo_t*)+0x2b8>)
   15868:	f7fe fd04 	bl	14274 <printf>
      sd->response.length = SendCmd(Command::kGarbage, 0xFFFFFFFF,
                                    sd->response.data.byte, 0, KeepAlive::kNo);
   1586c:	9b03      	ldr	r3, [sp, #12]
   1586e:	681b      	ldr	r3, [r3, #0]
   15870:	681c      	ldr	r4, [r3, #0]
      sd->response.length = SendCmd(Command::kGarbage, 0xFFFFFFFF,
   15872:	9b02      	ldr	r3, [sp, #8]
   15874:	f103 0208 	add.w	r2, r3, #8
   15878:	2300      	movs	r3, #0
   1587a:	9301      	str	r3, [sp, #4]
   1587c:	2300      	movs	r3, #0
   1587e:	9300      	str	r3, [sp, #0]
   15880:	4613      	mov	r3, r2
   15882:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   15886:	21ff      	movs	r1, #255	; 0xff
   15888:	9803      	ldr	r0, [sp, #12]
   1588a:	47a0      	blx	r4
   1588c:	4602      	mov	r2, r0
   1588e:	9b02      	ldr	r3, [sp, #8]
   15890:	611a      	str	r2, [r3, #16]
      return false;
   15892:	2400      	movs	r4, #0
   15894:	e10c      	b.n	15ab0 <Sd::Mount(SdInterface::CardInfo_t*)+0x304>
    }

    // Send the host's supported voltage (3.3V) and ask if the card
    // supports it
    LOG_DEBUG("Checking Current SD Card Voltage Level...");
    constexpr uint8_t kCheckPattern = 0xAB;
   15896:	23ab      	movs	r3, #171	; 0xab
   15898:	f88d 301f 	strb.w	r3, [sp, #31]
    uint64_t supported_voltage      = 0x00000001;
   1589c:	f04f 0301 	mov.w	r3, #1
   158a0:	f04f 0400 	mov.w	r4, #0
   158a4:	e9cd 3404 	strd	r3, r4, [sp, #16]
    sd->response.length =
        SendCmd(Command::kGetOp,
                static_cast<uint32_t>((supported_voltage << 8) | kCheckPattern),
                sd->response.data.byte, 100, KeepAlive::kYes);
   158a8:	9b03      	ldr	r3, [sp, #12]
   158aa:	681b      	ldr	r3, [r3, #0]
   158ac:	681c      	ldr	r4, [r3, #0]
                static_cast<uint32_t>((supported_voltage << 8) | kCheckPattern),
   158ae:	9b04      	ldr	r3, [sp, #16]
   158b0:	021b      	lsls	r3, r3, #8
        SendCmd(Command::kGetOp,
   158b2:	f043 02ab 	orr.w	r2, r3, #171	; 0xab
   158b6:	9b02      	ldr	r3, [sp, #8]
   158b8:	f103 0108 	add.w	r1, r3, #8
   158bc:	2301      	movs	r3, #1
   158be:	9301      	str	r3, [sp, #4]
   158c0:	2364      	movs	r3, #100	; 0x64
   158c2:	9300      	str	r3, [sp, #0]
   158c4:	460b      	mov	r3, r1
   158c6:	2148      	movs	r1, #72	; 0x48
   158c8:	9803      	ldr	r0, [sp, #12]
   158ca:	47a0      	blx	r4
   158cc:	4602      	mov	r2, r0
    sd->response.length =
   158ce:	9b02      	ldr	r3, [sp, #8]
   158d0:	611a      	str	r2, [r3, #16]
    if (sd->response.data.byte[4] != kCheckPattern)
   158d2:	9b02      	ldr	r3, [sp, #8]
   158d4:	7b1b      	ldrb	r3, [r3, #12]
   158d6:	2bab      	cmp	r3, #171	; 0xab
   158d8:	d01b      	beq.n	15912 <Sd::Mount(SdInterface::CardInfo_t*)+0x166>
    {
      // If the last byte is not an exact echo of the LSB of the kGetOp
      // command's argument, this response is invalid
      LOG_ERROR("Response integrity check failed. Aborting!");
   158da:	f240 2312 	movw	r3, #530	; 0x212
   158de:	4a5f      	ldr	r2, [pc, #380]	; (15a5c <Sd::Mount(SdInterface::CardInfo_t*)+0x2b0>)
   158e0:	4961      	ldr	r1, [pc, #388]	; (15a68 <Sd::Mount(SdInterface::CardInfo_t*)+0x2bc>)
   158e2:	4862      	ldr	r0, [pc, #392]	; (15a6c <Sd::Mount(SdInterface::CardInfo_t*)+0x2c0>)
   158e4:	f7fe fcc6 	bl	14274 <printf>
      sd->response.length = SendCmd(Command::kGarbage, 0xFFFFFFFF,
                                    sd->response.data.byte, 0, KeepAlive::kNo);
   158e8:	9b03      	ldr	r3, [sp, #12]
   158ea:	681b      	ldr	r3, [r3, #0]
   158ec:	681c      	ldr	r4, [r3, #0]
      sd->response.length = SendCmd(Command::kGarbage, 0xFFFFFFFF,
   158ee:	9b02      	ldr	r3, [sp, #8]
   158f0:	f103 0208 	add.w	r2, r3, #8
   158f4:	2300      	movs	r3, #0
   158f6:	9301      	str	r3, [sp, #4]
   158f8:	2300      	movs	r3, #0
   158fa:	9300      	str	r3, [sp, #0]
   158fc:	4613      	mov	r3, r2
   158fe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   15902:	21ff      	movs	r1, #255	; 0xff
   15904:	9803      	ldr	r0, [sp, #12]
   15906:	47a0      	blx	r4
   15908:	4602      	mov	r2, r0
   1590a:	9b02      	ldr	r3, [sp, #8]
   1590c:	611a      	str	r2, [r3, #16]
      return false;
   1590e:	2400      	movs	r4, #0
   15910:	e0ce      	b.n	15ab0 <Sd::Mount(SdInterface::CardInfo_t*)+0x304>
    }
    else if (sd->response.data.byte[3] &
   15912:	9b02      	ldr	r3, [sp, #8]
   15914:	7adb      	ldrb	r3, [r3, #11]
   15916:	4619      	mov	r1, r3
             (supported_voltage == static_cast<uint64_t>(0x00)))
   15918:	9a04      	ldr	r2, [sp, #16]
   1591a:	9b05      	ldr	r3, [sp, #20]
   1591c:	4313      	orrs	r3, r2
   1591e:	2b00      	cmp	r3, #0
   15920:	bf0c      	ite	eq
   15922:	2301      	moveq	r3, #1
   15924:	2300      	movne	r3, #0
   15926:	b2db      	uxtb	r3, r3
    else if (sd->response.data.byte[3] &
   15928:	400b      	ands	r3, r1
   1592a:	2b00      	cmp	r3, #0
   1592c:	d01b      	beq.n	15966 <Sd::Mount(SdInterface::CardInfo_t*)+0x1ba>
    {
      // If the 2nd-to-last byte of the reponse AND'ed with our host
      // device's supported voltage range is 0x00, the SD card doesn't
      // support our device's operating voltage
      LOG_ERROR("Unsupported voltage in use. Aborting!");
   1592e:	f240 231d 	movw	r3, #541	; 0x21d
   15932:	4a4a      	ldr	r2, [pc, #296]	; (15a5c <Sd::Mount(SdInterface::CardInfo_t*)+0x2b0>)
   15934:	494e      	ldr	r1, [pc, #312]	; (15a70 <Sd::Mount(SdInterface::CardInfo_t*)+0x2c4>)
   15936:	484f      	ldr	r0, [pc, #316]	; (15a74 <Sd::Mount(SdInterface::CardInfo_t*)+0x2c8>)
   15938:	f7fe fc9c 	bl	14274 <printf>
      sd->response.length = SendCmd(Command::kGarbage, 0xFFFFFFFF,
                                    sd->response.data.byte, 0, KeepAlive::kNo);
   1593c:	9b03      	ldr	r3, [sp, #12]
   1593e:	681b      	ldr	r3, [r3, #0]
   15940:	681c      	ldr	r4, [r3, #0]
      sd->response.length = SendCmd(Command::kGarbage, 0xFFFFFFFF,
   15942:	9b02      	ldr	r3, [sp, #8]
   15944:	f103 0208 	add.w	r2, r3, #8
   15948:	2300      	movs	r3, #0
   1594a:	9301      	str	r3, [sp, #4]
   1594c:	2300      	movs	r3, #0
   1594e:	9300      	str	r3, [sp, #0]
   15950:	4613      	mov	r3, r2
   15952:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   15956:	21ff      	movs	r1, #255	; 0xff
   15958:	9803      	ldr	r0, [sp, #12]
   1595a:	47a0      	blx	r4
   1595c:	4602      	mov	r2, r0
   1595e:	9b02      	ldr	r3, [sp, #8]
   15960:	611a      	str	r2, [r3, #16]
      return false;
   15962:	2400      	movs	r4, #0
   15964:	e0a4      	b.n	15ab0 <Sd::Mount(SdInterface::CardInfo_t*)+0x304>
    }

    // Indicate that the host supports SDHC/SDXC and wait for card to
    // shift out of idle state
    LOG_DEBUG("Expressing High-Capacity SD Card Support...");
    tries = 0;
   15966:	2300      	movs	r3, #0
   15968:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    do
    {
      // Send host's operating conditions
      sd->response.length =
          SendCmd(Command::kInit, 0x40000000, sd->response.data.byte, 100,
                  KeepAlive::kYes);
   1596c:	9b03      	ldr	r3, [sp, #12]
   1596e:	681b      	ldr	r3, [r3, #0]
   15970:	681c      	ldr	r4, [r3, #0]
          SendCmd(Command::kInit, 0x40000000, sd->response.data.byte, 100,
   15972:	9b02      	ldr	r3, [sp, #8]
   15974:	f103 0208 	add.w	r2, r3, #8
   15978:	2301      	movs	r3, #1
   1597a:	9301      	str	r3, [sp, #4]
   1597c:	2364      	movs	r3, #100	; 0x64
   1597e:	9300      	str	r3, [sp, #0]
   15980:	4613      	mov	r3, r2
   15982:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   15986:	2141      	movs	r1, #65	; 0x41
   15988:	9803      	ldr	r0, [sp, #12]
   1598a:	47a0      	blx	r4
   1598c:	4602      	mov	r2, r0
      sd->response.length =
   1598e:	9b02      	ldr	r3, [sp, #8]
   15990:	611a      	str	r2, [r3, #16]
      tries++;
   15992:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   15996:	3301      	adds	r3, #1
   15998:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    } while (tries < kBusTimeout && sd->response.data.byte[0] & 0x01);
   1599c:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   159a0:	2bf9      	cmp	r3, #249	; 0xf9
   159a2:	d806      	bhi.n	159b2 <Sd::Mount(SdInterface::CardInfo_t*)+0x206>
   159a4:	9b02      	ldr	r3, [sp, #8]
   159a6:	7a1b      	ldrb	r3, [r3, #8]
   159a8:	f003 0301 	and.w	r3, r3, #1
   159ac:	2b00      	cmp	r3, #0
   159ae:	d000      	beq.n	159b2 <Sd::Mount(SdInterface::CardInfo_t*)+0x206>
    do
   159b0:	e7dc      	b.n	1596c <Sd::Mount(SdInterface::CardInfo_t*)+0x1c0>
    if (tries == kBusTimeout)
   159b2:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   159b6:	2bfa      	cmp	r3, #250	; 0xfa
   159b8:	d11b      	bne.n	159f2 <Sd::Mount(SdInterface::CardInfo_t*)+0x246>
    {
      LOG_ERROR("SD Card timed out. Aborting!");
   159ba:	f240 2331 	movw	r3, #561	; 0x231
   159be:	4a27      	ldr	r2, [pc, #156]	; (15a5c <Sd::Mount(SdInterface::CardInfo_t*)+0x2b0>)
   159c0:	492d      	ldr	r1, [pc, #180]	; (15a78 <Sd::Mount(SdInterface::CardInfo_t*)+0x2cc>)
   159c2:	482e      	ldr	r0, [pc, #184]	; (15a7c <Sd::Mount(SdInterface::CardInfo_t*)+0x2d0>)
   159c4:	f7fe fc56 	bl	14274 <printf>
      sd->response.length = SendCmd(Command::kGarbage, 0xFFFFFFFF,
                                    sd->response.data.byte, 0, KeepAlive::kNo);
   159c8:	9b03      	ldr	r3, [sp, #12]
   159ca:	681b      	ldr	r3, [r3, #0]
   159cc:	681c      	ldr	r4, [r3, #0]
      sd->response.length = SendCmd(Command::kGarbage, 0xFFFFFFFF,
   159ce:	9b02      	ldr	r3, [sp, #8]
   159d0:	f103 0208 	add.w	r2, r3, #8
   159d4:	2300      	movs	r3, #0
   159d6:	9301      	str	r3, [sp, #4]
   159d8:	2300      	movs	r3, #0
   159da:	9300      	str	r3, [sp, #0]
   159dc:	4613      	mov	r3, r2
   159de:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   159e2:	21ff      	movs	r1, #255	; 0xff
   159e4:	9803      	ldr	r0, [sp, #12]
   159e6:	47a0      	blx	r4
   159e8:	4602      	mov	r2, r0
   159ea:	9b02      	ldr	r3, [sp, #8]
   159ec:	611a      	str	r2, [r3, #16]
      return false;
   159ee:	2400      	movs	r4, #0
   159f0:	e05e      	b.n	15ab0 <Sd::Mount(SdInterface::CardInfo_t*)+0x304>
    // After card is ready, acquire card capacity info using kGetOcr a
    // second time
    LOG_DEBUG("Reading Card Capacity Information...");
    // Read CCS
    sd->response.length = SendCmd(Command::kGetOcr, 0x00,
                                  sd->response.data.byte, 100, KeepAlive::kYes);
   159f2:	9b03      	ldr	r3, [sp, #12]
   159f4:	681b      	ldr	r3, [r3, #0]
   159f6:	681c      	ldr	r4, [r3, #0]
    sd->response.length = SendCmd(Command::kGetOcr, 0x00,
   159f8:	9b02      	ldr	r3, [sp, #8]
   159fa:	f103 0208 	add.w	r2, r3, #8
   159fe:	2301      	movs	r3, #1
   15a00:	9301      	str	r3, [sp, #4]
   15a02:	2364      	movs	r3, #100	; 0x64
   15a04:	9300      	str	r3, [sp, #0]
   15a06:	4613      	mov	r3, r2
   15a08:	2200      	movs	r2, #0
   15a0a:	217a      	movs	r1, #122	; 0x7a
   15a0c:	9803      	ldr	r0, [sp, #12]
   15a0e:	47a0      	blx	r4
   15a10:	4602      	mov	r2, r0
   15a12:	9b02      	ldr	r3, [sp, #8]
   15a14:	611a      	str	r2, [r3, #16]
    if (sd->response.data.byte[1] & 0x40)
   15a16:	9b02      	ldr	r3, [sp, #8]
   15a18:	7a5b      	ldrb	r3, [r3, #9]
   15a1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
   15a1e:	2b00      	cmp	r3, #0
   15a20:	d003      	beq.n	15a2a <Sd::Mount(SdInterface::CardInfo_t*)+0x27e>
    {
      // The card is either high or extended capacity
      LOG_DEBUG("SD Card is HC/XC");
      sd->type = Type::kSDHC;
   15a22:	9b02      	ldr	r3, [sp, #8]
   15a24:	2201      	movs	r2, #1
   15a26:	605a      	str	r2, [r3, #4]
   15a28:	e002      	b.n	15a30 <Sd::Mount(SdInterface::CardInfo_t*)+0x284>
    }
    else
    {
      // The card is standard capacity
      LOG_DEBUG("SD Card is SC");
      sd->type = Type::kSDSC;
   15a2a:	9b02      	ldr	r3, [sp, #8]
   15a2c:	2200      	movs	r2, #0
   15a2e:	605a      	str	r2, [r3, #4]
    }

    // Store OCR information
    for (int i = 0; i < 4; i++)
   15a30:	2300      	movs	r3, #0
   15a32:	9308      	str	r3, [sp, #32]
   15a34:	9b08      	ldr	r3, [sp, #32]
   15a36:	2b03      	cmp	r3, #3
   15a38:	dc22      	bgt.n	15a80 <Sd::Mount(SdInterface::CardInfo_t*)+0x2d4>
    {
      // ensure OCR doesn't capture the R1 section of the response
      sd->ocr.byte[i] = sd->response.data.byte[i + 1];
   15a3a:	9b08      	ldr	r3, [sp, #32]
   15a3c:	3301      	adds	r3, #1
   15a3e:	9a02      	ldr	r2, [sp, #8]
   15a40:	4413      	add	r3, r2
   15a42:	7a19      	ldrb	r1, [r3, #8]
   15a44:	9a02      	ldr	r2, [sp, #8]
   15a46:	9b08      	ldr	r3, [sp, #32]
   15a48:	4413      	add	r3, r2
   15a4a:	460a      	mov	r2, r1
   15a4c:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < 4; i++)
   15a4e:	9b08      	ldr	r3, [sp, #32]
   15a50:	3301      	adds	r3, #1
   15a52:	9308      	str	r3, [sp, #32]
   15a54:	e7ee      	b.n	15a34 <Sd::Mount(SdInterface::CardInfo_t*)+0x288>
   15a56:	bf00      	nop
   15a58:	000157ad 	.word	0x000157ad
   15a5c:	00018f30 	.word	0x00018f30
   15a60:	00018c48 	.word	0x00018c48
   15a64:	00018260 	.word	0x00018260
   15a68:	00018c50 	.word	0x00018c50
   15a6c:	000182d0 	.word	0x000182d0
   15a70:	00018c58 	.word	0x00018c58
   15a74:	00018334 	.word	0x00018334
   15a78:	00018c60 	.word	0x00018c60
   15a7c:	00018394 	.word	0x00018394
    }

    // If card is SDSC, manually set its block size
    if (sd->type == Type::kSDSC)
   15a80:	9b02      	ldr	r3, [sp, #8]
   15a82:	685b      	ldr	r3, [r3, #4]
   15a84:	2b00      	cmp	r3, #0
   15a86:	d112      	bne.n	15aae <Sd::Mount(SdInterface::CardInfo_t*)+0x302>
    {
      // Send requested byte size
      sd->response.length =
          SendCmd(Command::kChgBlkLen, static_cast<uint32_t>(kBlockSize),
                  sd->response.data.byte, 0, KeepAlive::kYes);
   15a88:	9b03      	ldr	r3, [sp, #12]
   15a8a:	681b      	ldr	r3, [r3, #0]
   15a8c:	681c      	ldr	r4, [r3, #0]
          SendCmd(Command::kChgBlkLen, static_cast<uint32_t>(kBlockSize),
   15a8e:	9b02      	ldr	r3, [sp, #8]
   15a90:	f103 0208 	add.w	r2, r3, #8
   15a94:	2301      	movs	r3, #1
   15a96:	9301      	str	r3, [sp, #4]
   15a98:	2300      	movs	r3, #0
   15a9a:	9300      	str	r3, [sp, #0]
   15a9c:	4613      	mov	r3, r2
   15a9e:	f44f 7200 	mov.w	r2, #512	; 0x200
   15aa2:	2150      	movs	r1, #80	; 0x50
   15aa4:	9803      	ldr	r0, [sp, #12]
   15aa6:	47a0      	blx	r4
   15aa8:	4602      	mov	r2, r0
      sd->response.length =
   15aaa:	9b02      	ldr	r3, [sp, #8]
   15aac:	611a      	str	r2, [r3, #16]
    }

    return true;
   15aae:	2401      	movs	r4, #1
   15ab0:	462b      	mov	r3, r5
   15ab2:	4619      	mov	r1, r3
   15ab4:	4803      	ldr	r0, [pc, #12]	; (15ac4 <Sd::Mount(SdInterface::CardInfo_t*)+0x318>)
   15ab6:	f7fd f995 	bl	12de4 <__cyg_profile_func_exit>
   15aba:	4623      	mov	r3, r4
  }
   15abc:	4618      	mov	r0, r3
   15abe:	b00b      	add	sp, #44	; 0x2c
   15ac0:	bd30      	pop	{r4, r5, pc}
   15ac2:	bf00      	nop
   15ac4:	000157ad 	.word	0x000157ad

00015ac8 <Sd::ToBool(bool)>:

  // Returns string to represent a boolean value
  const char * ToBool(bool condition)
   15ac8:	b530      	push	{r4, r5, lr}
   15aca:	b083      	sub	sp, #12
   15acc:	4675      	mov	r5, lr
   15ace:	9001      	str	r0, [sp, #4]
   15ad0:	460b      	mov	r3, r1
   15ad2:	f88d 3003 	strb.w	r3, [sp, #3]
   15ad6:	462b      	mov	r3, r5
   15ad8:	4619      	mov	r1, r3
   15ada:	4809      	ldr	r0, [pc, #36]	; (15b00 <Sd::ToBool(bool)+0x38>)
   15adc:	f7fd f96e 	bl	12dbc <__cyg_profile_func_enter>
  {
    return (condition) ? "true" : "false";
   15ae0:	f89d 3003 	ldrb.w	r3, [sp, #3]
   15ae4:	2b00      	cmp	r3, #0
   15ae6:	d001      	beq.n	15aec <Sd::ToBool(bool)+0x24>
   15ae8:	4c06      	ldr	r4, [pc, #24]	; (15b04 <Sd::ToBool(bool)+0x3c>)
   15aea:	e000      	b.n	15aee <Sd::ToBool(bool)+0x26>
   15aec:	4c06      	ldr	r4, [pc, #24]	; (15b08 <Sd::ToBool(bool)+0x40>)
   15aee:	462b      	mov	r3, r5
   15af0:	4619      	mov	r1, r3
   15af2:	4803      	ldr	r0, [pc, #12]	; (15b00 <Sd::ToBool(bool)+0x38>)
   15af4:	f7fd f976 	bl	12de4 <__cyg_profile_func_exit>
   15af8:	4623      	mov	r3, r4
  }
   15afa:	4618      	mov	r0, r3
   15afc:	b003      	add	sp, #12
   15afe:	bd30      	pop	{r4, r5, pc}
   15b00:	00015ac9 	.word	0x00015ac9
   15b04:	000183ec 	.word	0x000183ec
   15b08:	000183f4 	.word	0x000183f4

00015b0c <Sd::WaitToReadBlock()>:

  // Waits for the card to respond after a single or multi block read cmd is
  // sent.
  void WaitToReadBlock()
   15b0c:	b510      	push	{r4, lr}
   15b0e:	b084      	sub	sp, #16
   15b10:	4674      	mov	r4, lr
   15b12:	9001      	str	r0, [sp, #4]
   15b14:	4623      	mov	r3, r4
   15b16:	4619      	mov	r1, r3
   15b18:	4814      	ldr	r0, [pc, #80]	; (15b6c <Sd::WaitToReadBlock()+0x60>)
   15b1a:	f7fd f94f 	bl	12dbc <__cyg_profile_func_enter>
    // Bit 4 -->  If set, card is locked
    // Bit 3 -->  If set, address is out or range
    // Bit 2 -->  If set, card ECC failed
    // Bit 1 -->  If set, CC error occurred
    // Bit 0 -->  If set, a generic error occurred
    uint8_t wait_byte = 0x00;
   15b1e:	2300      	movs	r3, #0
   15b20:	f88d 300f 	strb.w	r3, [sp, #15]
    do
    {
      wait_byte = static_cast<uint8_t>(ssp_interface_->Transfer(0xFF));
   15b24:	9b01      	ldr	r3, [sp, #4]
   15b26:	685a      	ldr	r2, [r3, #4]
   15b28:	9b01      	ldr	r3, [sp, #4]
   15b2a:	685b      	ldr	r3, [r3, #4]
   15b2c:	681b      	ldr	r3, [r3, #0]
   15b2e:	3308      	adds	r3, #8
   15b30:	681b      	ldr	r3, [r3, #0]
   15b32:	21ff      	movs	r1, #255	; 0xff
   15b34:	4610      	mov	r0, r2
   15b36:	4798      	blx	r3
   15b38:	4603      	mov	r3, r0
   15b3a:	f88d 300f 	strb.w	r3, [sp, #15]
    } while (wait_byte != 0xFE && (wait_byte & 0xE0) != 0x00);
   15b3e:	f89d 300f 	ldrb.w	r3, [sp, #15]
   15b42:	2bfe      	cmp	r3, #254	; 0xfe
   15b44:	d006      	beq.n	15b54 <Sd::WaitToReadBlock()+0x48>
   15b46:	f89d 300f 	ldrb.w	r3, [sp, #15]
   15b4a:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
   15b4e:	2b00      	cmp	r3, #0
   15b50:	d000      	beq.n	15b54 <Sd::WaitToReadBlock()+0x48>
    do
   15b52:	e7e7      	b.n	15b24 <Sd::WaitToReadBlock()+0x18>

    // DEBUG: Check the value of the wait byte
    if (wait_byte == 0xFE)
   15b54:	f89d 300f 	ldrb.w	r3, [sp, #15]
   15b58:	2bfe      	cmp	r3, #254	; 0xfe
   15b5a:	4623      	mov	r3, r4
   15b5c:	4619      	mov	r1, r3
   15b5e:	4803      	ldr	r0, [pc, #12]	; (15b6c <Sd::WaitToReadBlock()+0x60>)
   15b60:	f7fd f940 	bl	12de4 <__cyg_profile_func_exit>
      LOG_DEBUG("Addr Out of Range?: %s", ToBool(wait_byte & 0x08));
      LOG_DEBUG("Card ECC Failed?: %s", ToBool(wait_byte & 0x04));
      LOG_DEBUG("CC Error?: %s", ToBool(wait_byte & 0x02));
      LOG_DEBUG("Error?: %s", ToBool(wait_byte & 0x01));
    }
  }
   15b64:	bf00      	nop
   15b66:	b004      	add	sp, #16
   15b68:	bd10      	pop	{r4, pc}
   15b6a:	bf00      	nop
   15b6c:	00015b0d 	.word	0x00015b0d

00015b70 <Sd::WaitWhileBusy()>:

  // Waits for the card to be ready to receive a new block after one has
  // been written or erased
  void WaitWhileBusy()
   15b70:	b510      	push	{r4, lr}
   15b72:	b084      	sub	sp, #16
   15b74:	4674      	mov	r4, lr
   15b76:	9001      	str	r0, [sp, #4]
   15b78:	4623      	mov	r3, r4
   15b7a:	4619      	mov	r1, r3
   15b7c:	480f      	ldr	r0, [pc, #60]	; (15bbc <Sd::WaitWhileBusy()+0x4c>)
   15b7e:	f7fd f91d 	bl	12dbc <__cyg_profile_func_enter>
  {
    // Wait for the card to finish programming (i.e. when the
    // bytes return to 0xFF)
    uint8_t busy_byte = 0x00;
   15b82:	2300      	movs	r3, #0
   15b84:	f88d 300f 	strb.w	r3, [sp, #15]
    LOG_DEBUG("Card is busy. Waiting for it to finish...");
    do
    {
      busy_byte = static_cast<uint8_t>(ssp_interface_->Transfer(0xFF));
   15b88:	9b01      	ldr	r3, [sp, #4]
   15b8a:	685a      	ldr	r2, [r3, #4]
   15b8c:	9b01      	ldr	r3, [sp, #4]
   15b8e:	685b      	ldr	r3, [r3, #4]
   15b90:	681b      	ldr	r3, [r3, #0]
   15b92:	3308      	adds	r3, #8
   15b94:	681b      	ldr	r3, [r3, #0]
   15b96:	21ff      	movs	r1, #255	; 0xff
   15b98:	4610      	mov	r0, r2
   15b9a:	4798      	blx	r3
   15b9c:	4603      	mov	r3, r0
   15b9e:	f88d 300f 	strb.w	r3, [sp, #15]
    } while (busy_byte != 0xFF);
   15ba2:	f89d 300f 	ldrb.w	r3, [sp, #15]
   15ba6:	2bff      	cmp	r3, #255	; 0xff
   15ba8:	d000      	beq.n	15bac <Sd::WaitWhileBusy()+0x3c>
    do
   15baa:	e7ed      	b.n	15b88 <Sd::WaitWhileBusy()+0x18>
   15bac:	4623      	mov	r3, r4
   15bae:	4619      	mov	r1, r3
   15bb0:	4802      	ldr	r0, [pc, #8]	; (15bbc <Sd::WaitWhileBusy()+0x4c>)
   15bb2:	f7fd f917 	bl	12de4 <__cyg_profile_func_exit>
    LOG_DEBUG("Card finished!");
  }
   15bb6:	bf00      	nop
   15bb8:	b004      	add	sp, #16
   15bba:	bd10      	pop	{r4, pc}
   15bbc:	00015b71 	.word	0x00015b71

00015bc0 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)>:

  // Read any number of blocks from the SD card
  uint8_t ReadBlock(uint32_t address, uint8_t * array,
   15bc0:	b530      	push	{r4, r5, lr}
   15bc2:	f5ad 7d13 	sub.w	sp, sp, #588	; 0x24c
   15bc6:	4675      	mov	r5, lr
   15bc8:	ac05      	add	r4, sp, #20
   15bca:	6020      	str	r0, [r4, #0]
   15bcc:	a804      	add	r0, sp, #16
   15bce:	6001      	str	r1, [r0, #0]
   15bd0:	a903      	add	r1, sp, #12
   15bd2:	600a      	str	r2, [r1, #0]
   15bd4:	aa02      	add	r2, sp, #8
   15bd6:	6013      	str	r3, [r2, #0]
   15bd8:	462b      	mov	r3, r5
   15bda:	4619      	mov	r1, r3
   15bdc:	487d      	ldr	r0, [pc, #500]	; (15dd4 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x214>)
   15bde:	f7fd f8ed 	bl	12dbc <__cyg_profile_func_enter>
                    uint32_t blocks = 1) override
  {
    LOG_DEBUG("Block %" PRId32 " :: 0x%" PRIX32 " for %" PRId32 " blocks",
              address, address, blocks);
    // Wait for a previous command to finish
    WaitWhileBusy();
   15be2:	ab05      	add	r3, sp, #20
   15be4:	6818      	ldr	r0, [r3, #0]
   15be6:	f7ff ffc3 	bl	15b70 <Sd::WaitWhileBusy()>

    // Create a temporary storage location to store sd command responses
    Sd::CardInfo_t sd;
    bool payload_had_bad_crc = false;
   15bea:	2300      	movs	r3, #0
   15bec:	f88d 3247 	strb.w	r3, [sp, #583]	; 0x247

    // Create a temporary place to store blocks of 512 bytes (this is now
    // possible because the constructor enforces block size cross-
    // compatibility)
    uint8_t block_store[512] = { 0 };
   15bf0:	ab06      	add	r3, sp, #24
   15bf2:	4618      	mov	r0, r3
   15bf4:	f44f 7300 	mov.w	r3, #512	; 0x200
   15bf8:	461a      	mov	r2, r3
   15bfa:	2100      	movs	r1, #0
   15bfc:	f001 f9b6 	bl	16f6c <memset>

    // Determine appropriate command to send
    Command read_cmd;
    if (blocks > 1)
   15c00:	ab02      	add	r3, sp, #8
   15c02:	681b      	ldr	r3, [r3, #0]
   15c04:	2b01      	cmp	r3, #1
   15c06:	d902      	bls.n	15c0e <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x4e>
    {
      read_cmd = Command::kReadMulti;
   15c08:	2352      	movs	r3, #82	; 0x52
   15c0a:	9390      	str	r3, [sp, #576]	; 0x240
   15c0c:	e001      	b.n	15c12 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x52>
    }
    else
    {
      read_cmd = Command::kReadSingle;
   15c0e:	2351      	movs	r3, #81	; 0x51
   15c10:	9390      	str	r3, [sp, #576]	; 0x240
    }

    // Send initial read command
    sd.response.length =
        SendCmd(read_cmd, address, sd.response.data.byte, 100, KeepAlive::kYes);
   15c12:	ab05      	add	r3, sp, #20
   15c14:	681b      	ldr	r3, [r3, #0]
   15c16:	681b      	ldr	r3, [r3, #0]
   15c18:	681c      	ldr	r4, [r3, #0]
   15c1a:	ab86      	add	r3, sp, #536	; 0x218
   15c1c:	f103 0108 	add.w	r1, r3, #8
   15c20:	aa04      	add	r2, sp, #16
   15c22:	a805      	add	r0, sp, #20
   15c24:	2301      	movs	r3, #1
   15c26:	9301      	str	r3, [sp, #4]
   15c28:	2364      	movs	r3, #100	; 0x64
   15c2a:	9300      	str	r3, [sp, #0]
   15c2c:	460b      	mov	r3, r1
   15c2e:	6812      	ldr	r2, [r2, #0]
   15c30:	9990      	ldr	r1, [sp, #576]	; 0x240
   15c32:	6800      	ldr	r0, [r0, #0]
   15c34:	47a0      	blx	r4
   15c36:	4603      	mov	r3, r0
    sd.response.length =
   15c38:	938a      	str	r3, [sp, #552]	; 0x228
    LOG_DEBUG("Sent Read Cmd");
    LOG_DEBUG("[R1 Response:0x%02X]", sd.response.data.byte[0]);

    // Check if the command was acknowledged properly
    if (sd.response.data.byte[0] == 0x00)
   15c3a:	f89d 3220 	ldrb.w	r3, [sp, #544]	; 0x220
   15c3e:	2b00      	cmp	r3, #0
   15c40:	f040 80d8 	bne.w	15df4 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x234>
    {
      // For every block requested
      uint16_t block_count;
      for (block_count = 0; block_count < blocks; block_count++)
   15c44:	2300      	movs	r3, #0
   15c46:	f8ad 323e 	strh.w	r3, [sp, #574]	; 0x23e
   15c4a:	f8bd 323e 	ldrh.w	r3, [sp, #574]	; 0x23e
   15c4e:	aa02      	add	r2, sp, #8
   15c50:	6812      	ldr	r2, [r2, #0]
   15c52:	429a      	cmp	r2, r3
   15c54:	f240 8099 	bls.w	15d8a <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x1ca>
      {
        // Wait for the card to respond with a ready signal
        WaitToReadBlock();
   15c58:	ab05      	add	r3, sp, #20
   15c5a:	6818      	ldr	r0, [r3, #0]
   15c5c:	f7ff ff56 	bl	15b0c <Sd::WaitToReadBlock()>

        // Calculate the block address offset
        uint16_t block_addr_offset =
   15c60:	f8bd 323e 	ldrh.w	r3, [sp, #574]	; 0x23e
   15c64:	025b      	lsls	r3, r3, #9
   15c66:	f8ad 323a 	strh.w	r3, [sp, #570]	; 0x23a
            static_cast<uint16_t>(block_count * kBlockSize);

        // Read all the bytes of a single block
        for (uint16_t byte_count = 0; byte_count < kBlockSize; byte_count++)
   15c6a:	2300      	movs	r3, #0
   15c6c:	f8ad 323c 	strh.w	r3, [sp, #572]	; 0x23c
   15c70:	f8bd 323c 	ldrh.w	r3, [sp, #572]	; 0x23c
   15c74:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   15c78:	d22b      	bcs.n	15cd2 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x112>
        {
          // Calculate the current storage index
          uint16_t storage_index =
   15c7a:	f8bd 223a 	ldrh.w	r2, [sp, #570]	; 0x23a
   15c7e:	f8bd 323c 	ldrh.w	r3, [sp, #572]	; 0x23c
   15c82:	4413      	add	r3, r2
   15c84:	f8ad 3238 	strh.w	r3, [sp, #568]	; 0x238
              static_cast<uint16_t>(block_addr_offset + byte_count);

          // Transfer a byte to read a block from the SD card
          array[storage_index] =
              static_cast<uint8_t>(ssp_interface_->Transfer(0xFF));
   15c88:	ab05      	add	r3, sp, #20
   15c8a:	681b      	ldr	r3, [r3, #0]
   15c8c:	685a      	ldr	r2, [r3, #4]
   15c8e:	ab05      	add	r3, sp, #20
   15c90:	681b      	ldr	r3, [r3, #0]
   15c92:	685b      	ldr	r3, [r3, #4]
   15c94:	681b      	ldr	r3, [r3, #0]
   15c96:	3308      	adds	r3, #8
   15c98:	681b      	ldr	r3, [r3, #0]
   15c9a:	21ff      	movs	r1, #255	; 0xff
   15c9c:	4610      	mov	r0, r2
   15c9e:	4798      	blx	r3
   15ca0:	4603      	mov	r3, r0
   15ca2:	4619      	mov	r1, r3
          array[storage_index] =
   15ca4:	f8bd 3238 	ldrh.w	r3, [sp, #568]	; 0x238
   15ca8:	aa03      	add	r2, sp, #12
   15caa:	6812      	ldr	r2, [r2, #0]
   15cac:	4413      	add	r3, r2
   15cae:	b2ca      	uxtb	r2, r1
   15cb0:	701a      	strb	r2, [r3, #0]

          // Copy that byte into our temporary block store
          block_store[byte_count] = array[storage_index];
   15cb2:	f8bd 3238 	ldrh.w	r3, [sp, #568]	; 0x238
   15cb6:	aa03      	add	r2, sp, #12
   15cb8:	6812      	ldr	r2, [r2, #0]
   15cba:	441a      	add	r2, r3
   15cbc:	f8bd 323c 	ldrh.w	r3, [sp, #572]	; 0x23c
   15cc0:	7811      	ldrb	r1, [r2, #0]
   15cc2:	aa06      	add	r2, sp, #24
   15cc4:	54d1      	strb	r1, [r2, r3]
        for (uint16_t byte_count = 0; byte_count < kBlockSize; byte_count++)
   15cc6:	f8bd 323c 	ldrh.w	r3, [sp, #572]	; 0x23c
   15cca:	3301      	adds	r3, #1
   15ccc:	f8ad 323c 	strh.w	r3, [sp, #572]	; 0x23c
   15cd0:	e7ce      	b.n	15c70 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0xb0>
        }

        // Then read the block's 16-bit CRC (i.e. read two bytes)
        uint16_t block_crc =
            static_cast<uint16_t>((ssp_interface_->Transfer(0xFF) << 8) |
   15cd2:	ab05      	add	r3, sp, #20
   15cd4:	681b      	ldr	r3, [r3, #0]
   15cd6:	685a      	ldr	r2, [r3, #4]
   15cd8:	ab05      	add	r3, sp, #20
   15cda:	681b      	ldr	r3, [r3, #0]
   15cdc:	685b      	ldr	r3, [r3, #4]
   15cde:	681b      	ldr	r3, [r3, #0]
   15ce0:	3308      	adds	r3, #8
   15ce2:	681b      	ldr	r3, [r3, #0]
   15ce4:	21ff      	movs	r1, #255	; 0xff
   15ce6:	4610      	mov	r0, r2
   15ce8:	4798      	blx	r3
   15cea:	4603      	mov	r3, r0
   15cec:	021b      	lsls	r3, r3, #8
   15cee:	b21c      	sxth	r4, r3
                                  ssp_interface_->Transfer(0xFF));
   15cf0:	ab05      	add	r3, sp, #20
   15cf2:	681b      	ldr	r3, [r3, #0]
   15cf4:	685a      	ldr	r2, [r3, #4]
   15cf6:	ab05      	add	r3, sp, #20
   15cf8:	681b      	ldr	r3, [r3, #0]
   15cfa:	685b      	ldr	r3, [r3, #4]
   15cfc:	681b      	ldr	r3, [r3, #0]
   15cfe:	3308      	adds	r3, #8
   15d00:	681b      	ldr	r3, [r3, #0]
   15d02:	21ff      	movs	r1, #255	; 0xff
   15d04:	4610      	mov	r0, r2
   15d06:	4798      	blx	r3
   15d08:	4603      	mov	r3, r0
   15d0a:	b21b      	sxth	r3, r3
            static_cast<uint16_t>((ssp_interface_->Transfer(0xFF) << 8) |
   15d0c:	4323      	orrs	r3, r4
   15d0e:	b21b      	sxth	r3, r3
                                  ssp_interface_->Transfer(0xFF));
   15d10:	f8ad 3236 	strh.w	r3, [sp, #566]	; 0x236

        // Run a CRC-16 calculation on the message to determine if the
        // received CRCs match (i.e. checks if the block data is
        // valid).
        uint16_t expected_block_crc = GetCrc16(block_store, 512);
   15d14:	ab05      	add	r3, sp, #20
   15d16:	681b      	ldr	r3, [r3, #0]
   15d18:	681b      	ldr	r3, [r3, #0]
   15d1a:	3320      	adds	r3, #32
   15d1c:	681b      	ldr	r3, [r3, #0]
   15d1e:	a906      	add	r1, sp, #24
   15d20:	a805      	add	r0, sp, #20
   15d22:	f44f 7200 	mov.w	r2, #512	; 0x200
   15d26:	6800      	ldr	r0, [r0, #0]
   15d28:	4798      	blx	r3
   15d2a:	4603      	mov	r3, r0
   15d2c:	f8ad 3234 	strh.w	r3, [sp, #564]	; 0x234

        LOG_DEBUG("Block #%d @ 0x%" PRIX32 " acquired", block_count, address);
        LOG_DEBUG("Expecting block crc16 '0x%04X'", expected_block_crc);
        LOG_DEBUG("Got '0x%04X'", block_crc);
        if (expected_block_crc != block_crc)
   15d30:	f8bd 2234 	ldrh.w	r2, [sp, #564]	; 0x234
   15d34:	f8bd 3236 	ldrh.w	r3, [sp, #566]	; 0x236
   15d38:	429a      	cmp	r2, r3
   15d3a:	d020      	beq.n	15d7e <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x1be>
        {
          // If they do not match, set the bad crc status
          payload_had_bad_crc = true;
   15d3c:	2301      	movs	r3, #1
   15d3e:	f88d 3247 	strb.w	r3, [sp, #583]	; 0x247
          LOG_ERROR("While Reading Block #%d CRC16:", block_count);
   15d42:	f8bd 323e 	ldrh.w	r3, [sp, #574]	; 0x23e
   15d46:	9300      	str	r3, [sp, #0]
   15d48:	f240 23ed 	movw	r3, #749	; 0x2ed
   15d4c:	4a22      	ldr	r2, [pc, #136]	; (15dd8 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x218>)
   15d4e:	4923      	ldr	r1, [pc, #140]	; (15ddc <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x21c>)
   15d50:	4823      	ldr	r0, [pc, #140]	; (15de0 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x220>)
   15d52:	f7fe fa8f 	bl	14274 <printf>
          LOG_ERROR("Expected '0x%04X'", expected_block_crc);
   15d56:	f8bd 3234 	ldrh.w	r3, [sp, #564]	; 0x234
   15d5a:	9300      	str	r3, [sp, #0]
   15d5c:	f240 23ee 	movw	r3, #750	; 0x2ee
   15d60:	4a1d      	ldr	r2, [pc, #116]	; (15dd8 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x218>)
   15d62:	4920      	ldr	r1, [pc, #128]	; (15de4 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x224>)
   15d64:	4820      	ldr	r0, [pc, #128]	; (15de8 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x228>)
   15d66:	f7fe fa85 	bl	14274 <printf>
          LOG_ERROR("Got '0x%04X'", block_crc);
   15d6a:	f8bd 3236 	ldrh.w	r3, [sp, #566]	; 0x236
   15d6e:	9300      	str	r3, [sp, #0]
   15d70:	f240 23ef 	movw	r3, #751	; 0x2ef
   15d74:	4a18      	ldr	r2, [pc, #96]	; (15dd8 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x218>)
   15d76:	491d      	ldr	r1, [pc, #116]	; (15dec <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x22c>)
   15d78:	481d      	ldr	r0, [pc, #116]	; (15df0 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x230>)
   15d7a:	f7fe fa7b 	bl	14274 <printf>
      for (block_count = 0; block_count < blocks; block_count++)
   15d7e:	f8bd 323e 	ldrh.w	r3, [sp, #574]	; 0x23e
   15d82:	3301      	adds	r3, #1
   15d84:	f8ad 323e 	strh.w	r3, [sp, #574]	; 0x23e
   15d88:	e75f      	b.n	15c4a <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x8a>
        }
      }

      // After reading multiple blocks, send the stop command to terminate the
      // transaction (i.e. no keep-alive)
      if (blocks > 1)
   15d8a:	ab02      	add	r3, sp, #8
   15d8c:	681b      	ldr	r3, [r3, #0]
   15d8e:	2b01      	cmp	r3, #1
   15d90:	d913      	bls.n	15dba <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x1fa>
      {
        sd.response.length =
            SendCmd(Command::kStopTrans, 0xFFFFFFFF, sd.response.data.byte, 100,
                    KeepAlive::kNo);
   15d92:	ab05      	add	r3, sp, #20
   15d94:	681b      	ldr	r3, [r3, #0]
   15d96:	681b      	ldr	r3, [r3, #0]
   15d98:	681c      	ldr	r4, [r3, #0]
            SendCmd(Command::kStopTrans, 0xFFFFFFFF, sd.response.data.byte, 100,
   15d9a:	ab86      	add	r3, sp, #536	; 0x218
   15d9c:	f103 0208 	add.w	r2, r3, #8
   15da0:	a805      	add	r0, sp, #20
   15da2:	2300      	movs	r3, #0
   15da4:	9301      	str	r3, [sp, #4]
   15da6:	2364      	movs	r3, #100	; 0x64
   15da8:	9300      	str	r3, [sp, #0]
   15daa:	4613      	mov	r3, r2
   15dac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   15db0:	214c      	movs	r1, #76	; 0x4c
   15db2:	6800      	ldr	r0, [r0, #0]
   15db4:	47a0      	blx	r4
   15db6:	4603      	mov	r3, r0
        sd.response.length =
   15db8:	938a      	str	r3, [sp, #552]	; 0x228
      LOG_DEBUG("Response Byte");
      LOG_DEBUG("0x%02X", sd.response.data.byte[0]);

      // If there was a bad crc from the payload, manually set the
      // CRC error flag in the command response byte
      if (payload_had_bad_crc)
   15dba:	f89d 3247 	ldrb.w	r3, [sp, #583]	; 0x247
   15dbe:	2b00      	cmp	r3, #0
   15dc0:	f000 80c0 	beq.w	15f44 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x384>
      {
        sd.response.data.byte[0] |= 0x08;
   15dc4:	f89d 3220 	ldrb.w	r3, [sp, #544]	; 0x220
   15dc8:	f043 0308 	orr.w	r3, r3, #8
   15dcc:	b2db      	uxtb	r3, r3
   15dce:	f88d 3220 	strb.w	r3, [sp, #544]	; 0x220
   15dd2:	e0b7      	b.n	15f44 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x384>
   15dd4:	00015bc1 	.word	0x00015bc1
   15dd8:	00018f64 	.word	0x00018f64
   15ddc:	00018c68 	.word	0x00018c68
   15de0:	000183fc 	.word	0x000183fc
   15de4:	00018c70 	.word	0x00018c70
   15de8:	00018454 	.word	0x00018454
   15dec:	00018c78 	.word	0x00018c78
   15df0:	000184a0 	.word	0x000184a0
      }
    }
    else
    {
      LOG_ERROR("Read Cmd was not acknowledged properly!");
   15df4:	f240 3309 	movw	r3, #777	; 0x309
   15df8:	4a65      	ldr	r2, [pc, #404]	; (15f90 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x3d0>)
   15dfa:	4966      	ldr	r1, [pc, #408]	; (15f94 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x3d4>)
   15dfc:	4866      	ldr	r0, [pc, #408]	; (15f98 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x3d8>)
   15dfe:	f7fe fa39 	bl	14274 <printf>
      LOG_ERROR("Parameter Err: %s", ToBool(sd.response.data.byte[0] & 0x40));
   15e02:	f89d 3220 	ldrb.w	r3, [sp, #544]	; 0x220
   15e06:	f003 0340 	and.w	r3, r3, #64	; 0x40
   15e0a:	2b00      	cmp	r3, #0
   15e0c:	bf14      	ite	ne
   15e0e:	2301      	movne	r3, #1
   15e10:	2300      	moveq	r3, #0
   15e12:	b2da      	uxtb	r2, r3
   15e14:	ab05      	add	r3, sp, #20
   15e16:	4611      	mov	r1, r2
   15e18:	6818      	ldr	r0, [r3, #0]
   15e1a:	f7ff fe55 	bl	15ac8 <Sd::ToBool(bool)>
   15e1e:	4603      	mov	r3, r0
   15e20:	9300      	str	r3, [sp, #0]
   15e22:	f240 330a 	movw	r3, #778	; 0x30a
   15e26:	4a5a      	ldr	r2, [pc, #360]	; (15f90 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x3d0>)
   15e28:	495c      	ldr	r1, [pc, #368]	; (15f9c <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x3dc>)
   15e2a:	485d      	ldr	r0, [pc, #372]	; (15fa0 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x3e0>)
   15e2c:	f7fe fa22 	bl	14274 <printf>
      LOG_ERROR("Addr Err: %s", ToBool(sd.response.data.byte[0] & 0x20));
   15e30:	f89d 3220 	ldrb.w	r3, [sp, #544]	; 0x220
   15e34:	f003 0320 	and.w	r3, r3, #32
   15e38:	2b00      	cmp	r3, #0
   15e3a:	bf14      	ite	ne
   15e3c:	2301      	movne	r3, #1
   15e3e:	2300      	moveq	r3, #0
   15e40:	b2da      	uxtb	r2, r3
   15e42:	ab05      	add	r3, sp, #20
   15e44:	4611      	mov	r1, r2
   15e46:	6818      	ldr	r0, [r3, #0]
   15e48:	f7ff fe3e 	bl	15ac8 <Sd::ToBool(bool)>
   15e4c:	4603      	mov	r3, r0
   15e4e:	9300      	str	r3, [sp, #0]
   15e50:	f240 330b 	movw	r3, #779	; 0x30b
   15e54:	4a4e      	ldr	r2, [pc, #312]	; (15f90 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x3d0>)
   15e56:	4953      	ldr	r1, [pc, #332]	; (15fa4 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x3e4>)
   15e58:	4853      	ldr	r0, [pc, #332]	; (15fa8 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x3e8>)
   15e5a:	f7fe fa0b 	bl	14274 <printf>
      LOG_ERROR("Erase Seq Err: %s", ToBool(sd.response.data.byte[0] & 0x10));
   15e5e:	f89d 3220 	ldrb.w	r3, [sp, #544]	; 0x220
   15e62:	f003 0310 	and.w	r3, r3, #16
   15e66:	2b00      	cmp	r3, #0
   15e68:	bf14      	ite	ne
   15e6a:	2301      	movne	r3, #1
   15e6c:	2300      	moveq	r3, #0
   15e6e:	b2da      	uxtb	r2, r3
   15e70:	ab05      	add	r3, sp, #20
   15e72:	4611      	mov	r1, r2
   15e74:	6818      	ldr	r0, [r3, #0]
   15e76:	f7ff fe27 	bl	15ac8 <Sd::ToBool(bool)>
   15e7a:	4603      	mov	r3, r0
   15e7c:	9300      	str	r3, [sp, #0]
   15e7e:	f44f 7343 	mov.w	r3, #780	; 0x30c
   15e82:	4a43      	ldr	r2, [pc, #268]	; (15f90 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x3d0>)
   15e84:	4949      	ldr	r1, [pc, #292]	; (15fac <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x3ec>)
   15e86:	484a      	ldr	r0, [pc, #296]	; (15fb0 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x3f0>)
   15e88:	f7fe f9f4 	bl	14274 <printf>
      LOG_ERROR("Com CRC Err: %s", ToBool(sd.response.data.byte[0] & 0x08));
   15e8c:	f89d 3220 	ldrb.w	r3, [sp, #544]	; 0x220
   15e90:	f003 0308 	and.w	r3, r3, #8
   15e94:	2b00      	cmp	r3, #0
   15e96:	bf14      	ite	ne
   15e98:	2301      	movne	r3, #1
   15e9a:	2300      	moveq	r3, #0
   15e9c:	b2da      	uxtb	r2, r3
   15e9e:	ab05      	add	r3, sp, #20
   15ea0:	4611      	mov	r1, r2
   15ea2:	6818      	ldr	r0, [r3, #0]
   15ea4:	f7ff fe10 	bl	15ac8 <Sd::ToBool(bool)>
   15ea8:	4603      	mov	r3, r0
   15eaa:	9300      	str	r3, [sp, #0]
   15eac:	f240 330d 	movw	r3, #781	; 0x30d
   15eb0:	4a37      	ldr	r2, [pc, #220]	; (15f90 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x3d0>)
   15eb2:	4940      	ldr	r1, [pc, #256]	; (15fb4 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x3f4>)
   15eb4:	4840      	ldr	r0, [pc, #256]	; (15fb8 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x3f8>)
   15eb6:	f7fe f9dd 	bl	14274 <printf>
      LOG_ERROR("Illegal Cmd Err: %s", ToBool(sd.response.data.byte[0] & 0x04));
   15eba:	f89d 3220 	ldrb.w	r3, [sp, #544]	; 0x220
   15ebe:	f003 0304 	and.w	r3, r3, #4
   15ec2:	2b00      	cmp	r3, #0
   15ec4:	bf14      	ite	ne
   15ec6:	2301      	movne	r3, #1
   15ec8:	2300      	moveq	r3, #0
   15eca:	b2da      	uxtb	r2, r3
   15ecc:	ab05      	add	r3, sp, #20
   15ece:	4611      	mov	r1, r2
   15ed0:	6818      	ldr	r0, [r3, #0]
   15ed2:	f7ff fdf9 	bl	15ac8 <Sd::ToBool(bool)>
   15ed6:	4603      	mov	r3, r0
   15ed8:	9300      	str	r3, [sp, #0]
   15eda:	f240 330e 	movw	r3, #782	; 0x30e
   15ede:	4a2c      	ldr	r2, [pc, #176]	; (15f90 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x3d0>)
   15ee0:	4936      	ldr	r1, [pc, #216]	; (15fbc <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x3fc>)
   15ee2:	4837      	ldr	r0, [pc, #220]	; (15fc0 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x400>)
   15ee4:	f7fe f9c6 	bl	14274 <printf>
      LOG_ERROR("Erase Reset: %s", ToBool(sd.response.data.byte[0] & 0x02));
   15ee8:	f89d 3220 	ldrb.w	r3, [sp, #544]	; 0x220
   15eec:	f003 0302 	and.w	r3, r3, #2
   15ef0:	2b00      	cmp	r3, #0
   15ef2:	bf14      	ite	ne
   15ef4:	2301      	movne	r3, #1
   15ef6:	2300      	moveq	r3, #0
   15ef8:	b2da      	uxtb	r2, r3
   15efa:	ab05      	add	r3, sp, #20
   15efc:	4611      	mov	r1, r2
   15efe:	6818      	ldr	r0, [r3, #0]
   15f00:	f7ff fde2 	bl	15ac8 <Sd::ToBool(bool)>
   15f04:	4603      	mov	r3, r0
   15f06:	9300      	str	r3, [sp, #0]
   15f08:	f240 330f 	movw	r3, #783	; 0x30f
   15f0c:	4a20      	ldr	r2, [pc, #128]	; (15f90 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x3d0>)
   15f0e:	492d      	ldr	r1, [pc, #180]	; (15fc4 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x404>)
   15f10:	482d      	ldr	r0, [pc, #180]	; (15fc8 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x408>)
   15f12:	f7fe f9af 	bl	14274 <printf>
      LOG_ERROR("In Idle: %s", ToBool(sd.response.data.byte[0] & 0x01));
   15f16:	f89d 3220 	ldrb.w	r3, [sp, #544]	; 0x220
   15f1a:	f003 0301 	and.w	r3, r3, #1
   15f1e:	2b00      	cmp	r3, #0
   15f20:	bf14      	ite	ne
   15f22:	2301      	movne	r3, #1
   15f24:	2300      	moveq	r3, #0
   15f26:	b2da      	uxtb	r2, r3
   15f28:	ab05      	add	r3, sp, #20
   15f2a:	4611      	mov	r1, r2
   15f2c:	6818      	ldr	r0, [r3, #0]
   15f2e:	f7ff fdcb 	bl	15ac8 <Sd::ToBool(bool)>
   15f32:	4603      	mov	r3, r0
   15f34:	9300      	str	r3, [sp, #0]
   15f36:	f44f 7344 	mov.w	r3, #784	; 0x310
   15f3a:	4a15      	ldr	r2, [pc, #84]	; (15f90 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x3d0>)
   15f3c:	4923      	ldr	r1, [pc, #140]	; (15fcc <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x40c>)
   15f3e:	4824      	ldr	r0, [pc, #144]	; (15fd0 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x410>)
   15f40:	f7fe f998 	bl	14274 <printf>
    LOG_DEBUG("Now waiting for SD Card to exit Idle Mode...");
    do
    {
      // Query the status register
      sd.response.length = SendCmd(Command::kGetStatus, 32,
                                   sd.response.data.byte, 0, KeepAlive::kNo);
   15f44:	ab05      	add	r3, sp, #20
   15f46:	681b      	ldr	r3, [r3, #0]
   15f48:	681b      	ldr	r3, [r3, #0]
   15f4a:	681c      	ldr	r4, [r3, #0]
      sd.response.length = SendCmd(Command::kGetStatus, 32,
   15f4c:	ab86      	add	r3, sp, #536	; 0x218
   15f4e:	f103 0208 	add.w	r2, r3, #8
   15f52:	a805      	add	r0, sp, #20
   15f54:	2300      	movs	r3, #0
   15f56:	9301      	str	r3, [sp, #4]
   15f58:	2300      	movs	r3, #0
   15f5a:	9300      	str	r3, [sp, #0]
   15f5c:	4613      	mov	r3, r2
   15f5e:	2220      	movs	r2, #32
   15f60:	210d      	movs	r1, #13
   15f62:	6800      	ldr	r0, [r0, #0]
   15f64:	47a0      	blx	r4
   15f66:	4603      	mov	r3, r0
   15f68:	938a      	str	r3, [sp, #552]	; 0x228
    } while (sd.response.data.byte[0] & 0x01);
   15f6a:	f89d 3220 	ldrb.w	r3, [sp, #544]	; 0x220
   15f6e:	f003 0301 	and.w	r3, r3, #1
   15f72:	2b00      	cmp	r3, #0
   15f74:	d000      	beq.n	15f78 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x3b8>
    do
   15f76:	e7e5      	b.n	15f44 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x384>
    LOG_DEBUG("SD Card is out of Idle Mode!");

    // Return the status
    LOG_DEBUG("Read Complete! [R1 Response: 0x%02X]", sd.response.data.byte[0]);
    return sd.response.data.byte[0];
   15f78:	f89d 4220 	ldrb.w	r4, [sp, #544]	; 0x220
   15f7c:	462b      	mov	r3, r5
   15f7e:	4619      	mov	r1, r3
   15f80:	4814      	ldr	r0, [pc, #80]	; (15fd4 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x414>)
   15f82:	f7fc ff2f 	bl	12de4 <__cyg_profile_func_exit>
   15f86:	4623      	mov	r3, r4
  }
   15f88:	4618      	mov	r0, r3
   15f8a:	f50d 7d13 	add.w	sp, sp, #588	; 0x24c
   15f8e:	bd30      	pop	{r4, r5, pc}
   15f90:	00018f64 	.word	0x00018f64
   15f94:	00018c80 	.word	0x00018c80
   15f98:	000184e8 	.word	0x000184e8
   15f9c:	00018c88 	.word	0x00018c88
   15fa0:	0001854c 	.word	0x0001854c
   15fa4:	00018c90 	.word	0x00018c90
   15fa8:	00018598 	.word	0x00018598
   15fac:	00018c98 	.word	0x00018c98
   15fb0:	000185e0 	.word	0x000185e0
   15fb4:	00018ca0 	.word	0x00018ca0
   15fb8:	0001862c 	.word	0x0001862c
   15fbc:	00018ca8 	.word	0x00018ca8
   15fc0:	00018678 	.word	0x00018678
   15fc4:	00018cb0 	.word	0x00018cb0
   15fc8:	000186c8 	.word	0x000186c8
   15fcc:	00018cb8 	.word	0x00018cb8
   15fd0:	00018714 	.word	0x00018714
   15fd4:	00015bc1 	.word	0x00015bc1

00015fd8 <Sd::WriteBlock(unsigned long, unsigned char const*, unsigned long)>:

  // Writes any number of 512-byte blocks to the SD Card
  uint8_t WriteBlock(uint32_t address, const uint8_t * array,
   15fd8:	b530      	push	{r4, r5, lr}
   15fda:	b095      	sub	sp, #84	; 0x54
   15fdc:	4675      	mov	r5, lr
   15fde:	9005      	str	r0, [sp, #20]
   15fe0:	9104      	str	r1, [sp, #16]
   15fe2:	9203      	str	r2, [sp, #12]
   15fe4:	9302      	str	r3, [sp, #8]
   15fe6:	462b      	mov	r3, r5
   15fe8:	4619      	mov	r1, r3
   15fea:	4865      	ldr	r0, [pc, #404]	; (16180 <Sd::WriteBlock(unsigned long, unsigned char const*, unsigned long)+0x1a8>)
   15fec:	f7fc fee6 	bl	12dbc <__cyg_profile_func_enter>
                     uint32_t blocks = 1) override
  {
    // Wait for a previous command to finish
    WaitWhileBusy();
   15ff0:	9805      	ldr	r0, [sp, #20]
   15ff2:	f7ff fdbd 	bl	15b70 <Sd::WaitWhileBusy()>
    Sd::CardInfo_t sd;

    // Determine appropriate command and start token to send
    Command write_cmd;
    uint8_t write_start_tkn;
    if (blocks > 1)
   15ff6:	9b02      	ldr	r3, [sp, #8]
   15ff8:	2b01      	cmp	r3, #1
   15ffa:	d905      	bls.n	16008 <Sd::WriteBlock(unsigned long, unsigned char const*, unsigned long)+0x30>
    {
      write_cmd       = Command::kWriteMulti;
   15ffc:	2359      	movs	r3, #89	; 0x59
   15ffe:	9313      	str	r3, [sp, #76]	; 0x4c
      write_start_tkn = 0xFC;
   16000:	23fc      	movs	r3, #252	; 0xfc
   16002:	f88d 304b 	strb.w	r3, [sp, #75]	; 0x4b
   16006:	e004      	b.n	16012 <Sd::WriteBlock(unsigned long, unsigned char const*, unsigned long)+0x3a>
    }
    else
    {
      write_cmd       = Command::kWriteSingle;
   16008:	2358      	movs	r3, #88	; 0x58
   1600a:	9313      	str	r3, [sp, #76]	; 0x4c
      write_start_tkn = 0xFE;
   1600c:	23fe      	movs	r3, #254	; 0xfe
   1600e:	f88d 304b 	strb.w	r3, [sp, #75]	; 0x4b
    }

    // Send initial write command
    sd.response.length = SendCmd(write_cmd, address, sd.response.data.byte, 100,
                                 KeepAlive::kYes);
   16012:	9b05      	ldr	r3, [sp, #20]
   16014:	681b      	ldr	r3, [r3, #0]
   16016:	681c      	ldr	r4, [r3, #0]
    sd.response.length = SendCmd(write_cmd, address, sd.response.data.byte, 100,
   16018:	ab06      	add	r3, sp, #24
   1601a:	f103 0208 	add.w	r2, r3, #8
   1601e:	2301      	movs	r3, #1
   16020:	9301      	str	r3, [sp, #4]
   16022:	2364      	movs	r3, #100	; 0x64
   16024:	9300      	str	r3, [sp, #0]
   16026:	4613      	mov	r3, r2
   16028:	9a04      	ldr	r2, [sp, #16]
   1602a:	9913      	ldr	r1, [sp, #76]	; 0x4c
   1602c:	9805      	ldr	r0, [sp, #20]
   1602e:	47a0      	blx	r4
   16030:	4603      	mov	r3, r0
   16032:	930a      	str	r3, [sp, #40]	; 0x28
    LOG_DEBUG("Sent Write Cmd");
    LOG_DEBUG("[R1 Response:0x%02X]", sd.response.data.byte[0]);

    // Check if the response was acknowledged properly
    if (sd.response.data.byte[0] == 0x00)
   16034:	f89d 3020 	ldrb.w	r3, [sp, #32]
   16038:	2b00      	cmp	r3, #0
   1603a:	f040 8096 	bne.w	1616a <Sd::WriteBlock(unsigned long, unsigned char const*, unsigned long)+0x192>
    {
      // If no errors, proceed write given block(s) to SD Card
      // For each given block
      for (uint16_t current_block_num = 0; current_block_num < blocks;
   1603e:	2300      	movs	r3, #0
   16040:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
   16044:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
   16048:	9a02      	ldr	r2, [sp, #8]
   1604a:	429a      	cmp	r2, r3
   1604c:	d97a      	bls.n	16144 <Sd::WriteBlock(unsigned long, unsigned char const*, unsigned long)+0x16c>
           current_block_num++)
      {
        // Calculate array offset
        uint64_t arr_offset = current_block_num * kBlockSize;
   1604e:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
   16052:	025b      	lsls	r3, r3, #9
   16054:	ea4f 74e3 	mov.w	r4, r3, asr #31
   16058:	e9cd 340e 	strd	r3, r4, [sp, #56]	; 0x38

        // Send the start token for the current block
        ssp_interface_->Transfer(write_start_tkn);
   1605c:	9b05      	ldr	r3, [sp, #20]
   1605e:	685a      	ldr	r2, [r3, #4]
   16060:	9b05      	ldr	r3, [sp, #20]
   16062:	685b      	ldr	r3, [r3, #4]
   16064:	681b      	ldr	r3, [r3, #0]
   16066:	3308      	adds	r3, #8
   16068:	681b      	ldr	r3, [r3, #0]
   1606a:	f89d 104b 	ldrb.w	r1, [sp, #75]	; 0x4b
   1606e:	b289      	uxth	r1, r1
   16070:	4610      	mov	r0, r2
   16072:	4798      	blx	r3

        // Write all 512-bytes of the given block
        LOG_DEBUG("Writing block #%d", current_block_num);
        for (uint16_t current_byte = 0; current_byte < kBlockSize;
   16074:	2300      	movs	r3, #0
   16076:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
   1607a:	f8bd 3046 	ldrh.w	r3, [sp, #70]	; 0x46
   1607e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   16082:	d216      	bcs.n	160b2 <Sd::WriteBlock(unsigned long, unsigned char const*, unsigned long)+0xda>
             current_byte++)
        {
          ssp_interface_->Transfer(array[arr_offset + current_byte]);
   16084:	9b05      	ldr	r3, [sp, #20]
   16086:	6858      	ldr	r0, [r3, #4]
   16088:	9b05      	ldr	r3, [sp, #20]
   1608a:	685b      	ldr	r3, [r3, #4]
   1608c:	681b      	ldr	r3, [r3, #0]
   1608e:	3308      	adds	r3, #8
   16090:	681b      	ldr	r3, [r3, #0]
   16092:	990e      	ldr	r1, [sp, #56]	; 0x38
   16094:	f8bd 2046 	ldrh.w	r2, [sp, #70]	; 0x46
   16098:	440a      	add	r2, r1
   1609a:	9903      	ldr	r1, [sp, #12]
   1609c:	440a      	add	r2, r1
   1609e:	7812      	ldrb	r2, [r2, #0]
   160a0:	b292      	uxth	r2, r2
   160a2:	4611      	mov	r1, r2
   160a4:	4798      	blx	r3
        for (uint16_t current_byte = 0; current_byte < kBlockSize;
   160a6:	f8bd 3046 	ldrh.w	r3, [sp, #70]	; 0x46
   160aa:	3301      	adds	r3, #1
   160ac:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
   160b0:	e7e3      	b.n	1607a <Sd::WriteBlock(unsigned long, unsigned char const*, unsigned long)+0xa2>
        }

        // Read the data response token after writing the block
        uint8_t data_response_tkn =
            static_cast<uint8_t>(ssp_interface_->Transfer(0xFF));
   160b2:	9b05      	ldr	r3, [sp, #20]
   160b4:	685a      	ldr	r2, [r3, #4]
   160b6:	9b05      	ldr	r3, [sp, #20]
   160b8:	685b      	ldr	r3, [r3, #4]
   160ba:	681b      	ldr	r3, [r3, #0]
   160bc:	3308      	adds	r3, #8
   160be:	681b      	ldr	r3, [r3, #0]
   160c0:	21ff      	movs	r1, #255	; 0xff
   160c2:	4610      	mov	r0, r2
   160c4:	4798      	blx	r3
   160c6:	4603      	mov	r3, r0
   160c8:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
                  ToBool(data_response_tkn & 0x0B));
        LOG_DEBUG("Data Rejected (write err)?: %s",
                  ToBool(data_response_tkn & 0x0D));

        // If writing multiple blocks and the previous block was rejected
        if (blocks > 1 && !(data_response_tkn & 0x05))
   160cc:	9b02      	ldr	r3, [sp, #8]
   160ce:	2b01      	cmp	r3, #1
   160d0:	d92f      	bls.n	16132 <Sd::WriteBlock(unsigned long, unsigned char const*, unsigned long)+0x15a>
   160d2:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
   160d6:	f003 0305 	and.w	r3, r3, #5
   160da:	2b00      	cmp	r3, #0
   160dc:	d129      	bne.n	16132 <Sd::WriteBlock(unsigned long, unsigned char const*, unsigned long)+0x15a>
        {
          // Send an immediate stop (CMD12)
          sd.response.length =
              SendCmd(Command::kStopTrans, 0xFFFFFFFF, sd.response.data.byte,
                      100, KeepAlive::kYes);
   160de:	9b05      	ldr	r3, [sp, #20]
   160e0:	681b      	ldr	r3, [r3, #0]
   160e2:	681c      	ldr	r4, [r3, #0]
              SendCmd(Command::kStopTrans, 0xFFFFFFFF, sd.response.data.byte,
   160e4:	ab06      	add	r3, sp, #24
   160e6:	f103 0208 	add.w	r2, r3, #8
   160ea:	2301      	movs	r3, #1
   160ec:	9301      	str	r3, [sp, #4]
   160ee:	2364      	movs	r3, #100	; 0x64
   160f0:	9300      	str	r3, [sp, #0]
   160f2:	4613      	mov	r3, r2
   160f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   160f8:	214c      	movs	r1, #76	; 0x4c
   160fa:	9805      	ldr	r0, [sp, #20]
   160fc:	47a0      	blx	r4
   160fe:	4603      	mov	r3, r0
          sd.response.length =
   16100:	930a      	str	r3, [sp, #40]	; 0x28
          LOG_DEBUG("Stopped Transmission due to rejection...");
          LOG_DEBUG("[R1 Response: 0x%02X]", sd.response.data.byte[0]);

          // In the case of a write error, ask for the reason why
          if (data_response_tkn & 0x0D)
   16102:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
   16106:	f003 030d 	and.w	r3, r3, #13
   1610a:	2b00      	cmp	r3, #0
   1610c:	d011      	beq.n	16132 <Sd::WriteBlock(unsigned long, unsigned char const*, unsigned long)+0x15a>
          {
            sd.response.length =
                SendCmd(Command::kGetStatus, 0xFFFFFFFF, sd.response.data.byte,
                        100, KeepAlive::kYes);
   1610e:	9b05      	ldr	r3, [sp, #20]
   16110:	681b      	ldr	r3, [r3, #0]
   16112:	681c      	ldr	r4, [r3, #0]
                SendCmd(Command::kGetStatus, 0xFFFFFFFF, sd.response.data.byte,
   16114:	ab06      	add	r3, sp, #24
   16116:	f103 0208 	add.w	r2, r3, #8
   1611a:	2301      	movs	r3, #1
   1611c:	9301      	str	r3, [sp, #4]
   1611e:	2364      	movs	r3, #100	; 0x64
   16120:	9300      	str	r3, [sp, #0]
   16122:	4613      	mov	r3, r2
   16124:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   16128:	210d      	movs	r1, #13
   1612a:	9805      	ldr	r0, [sp, #20]
   1612c:	47a0      	blx	r4
   1612e:	4603      	mov	r3, r0
            sd.response.length =
   16130:	930a      	str	r3, [sp, #40]	; 0x28
                "Checking Status Register to see cause of Write Error...");
            LOG_DEBUG("[R2 Response: 0x%04" PRIX32 "]",
                      sd.response.data.dWord.lo);
          }
        }
        WaitWhileBusy();
   16132:	9805      	ldr	r0, [sp, #20]
   16134:	f7ff fd1c 	bl	15b70 <Sd::WaitWhileBusy()>
      for (uint16_t current_block_num = 0; current_block_num < blocks;
   16138:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
   1613c:	3301      	adds	r3, #1
   1613e:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
   16142:	e77f      	b.n	16044 <Sd::WriteBlock(unsigned long, unsigned char const*, unsigned long)+0x6c>
      }

      if (blocks > 1)
   16144:	9b02      	ldr	r3, [sp, #8]
   16146:	2b01      	cmp	r3, #1
   16148:	d90f      	bls.n	1616a <Sd::WriteBlock(unsigned long, unsigned char const*, unsigned long)+0x192>
      {
        constexpr uint8_t kStopToken = 0xFD;
   1614a:	23fd      	movs	r3, #253	; 0xfd
   1614c:	f88d 3036 	strb.w	r3, [sp, #54]	; 0x36
        ssp_interface_->Transfer(kStopToken);
   16150:	9b05      	ldr	r3, [sp, #20]
   16152:	685a      	ldr	r2, [r3, #4]
   16154:	9b05      	ldr	r3, [sp, #20]
   16156:	685b      	ldr	r3, [r3, #4]
   16158:	681b      	ldr	r3, [r3, #0]
   1615a:	3308      	adds	r3, #8
   1615c:	681b      	ldr	r3, [r3, #0]
   1615e:	21fd      	movs	r1, #253	; 0xfd
   16160:	4610      	mov	r0, r2
   16162:	4798      	blx	r3

        // Wait for the card's programming to complete before
        // reselecting it (i.e. to prevent corruption)
        WaitWhileBusy();
   16164:	9805      	ldr	r0, [sp, #20]
   16166:	f7ff fd03 	bl	15b70 <Sd::WaitWhileBusy()>
      LOG_DEBUG("Illegal Cmd Err: %s", ToBool(sd.response.data.byte[0] & 0x04));
      LOG_DEBUG("Erase Reset: %s", ToBool(sd.response.data.byte[0] & 0x02));
      LOG_DEBUG("In Idle: %s", ToBool(sd.response.data.byte[0] & 0x01));
    }

    return sd.response.data.byte[0];
   1616a:	f89d 4020 	ldrb.w	r4, [sp, #32]
   1616e:	462b      	mov	r3, r5
   16170:	4619      	mov	r1, r3
   16172:	4803      	ldr	r0, [pc, #12]	; (16180 <Sd::WriteBlock(unsigned long, unsigned char const*, unsigned long)+0x1a8>)
   16174:	f7fc fe36 	bl	12de4 <__cyg_profile_func_exit>
   16178:	4623      	mov	r3, r4
  }
   1617a:	4618      	mov	r0, r3
   1617c:	b015      	add	sp, #84	; 0x54
   1617e:	bd30      	pop	{r4, r5, pc}
   16180:	00015fd9 	.word	0x00015fd9

00016184 <Sd::DeleteBlock(unsigned long, unsigned long)>:

  // Deletes any number of blocks (inclusively) within a range of address.
  uint8_t DeleteBlock(uint32_t start, uint32_t end) override
   16184:	b530      	push	{r4, r5, lr}
   16186:	b08f      	sub	sp, #60	; 0x3c
   16188:	4675      	mov	r5, lr
   1618a:	9005      	str	r0, [sp, #20]
   1618c:	9104      	str	r1, [sp, #16]
   1618e:	9203      	str	r2, [sp, #12]
   16190:	462b      	mov	r3, r5
   16192:	4619      	mov	r1, r3
   16194:	483d      	ldr	r0, [pc, #244]	; (1628c <Sd::DeleteBlock(unsigned long, unsigned long)+0x108>)
   16196:	f7fc fe11 	bl	12dbc <__cyg_profile_func_enter>
  {
    // Wait for a previous command to finish
    WaitWhileBusy();
   1619a:	9805      	ldr	r0, [sp, #20]
   1619c:	f7ff fce8 	bl	15b70 <Sd::WaitWhileBusy()>

    // Create a temporary storage location to store sd command responses
    Sd::CardInfo_t sd;
    bool delete_failed = false;
   161a0:	2300      	movs	r3, #0
   161a2:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37

    // Set the delete start address
    LOG_DEBUG("Setting Delete Start Address...");
    sd.response.length = SendCmd(Command::kDelFrom, start,
                                 sd.response.data.byte, 100, KeepAlive::kYes);
   161a6:	9b05      	ldr	r3, [sp, #20]
   161a8:	681b      	ldr	r3, [r3, #0]
   161aa:	681c      	ldr	r4, [r3, #0]
    sd.response.length = SendCmd(Command::kDelFrom, start,
   161ac:	ab06      	add	r3, sp, #24
   161ae:	f103 0208 	add.w	r2, r3, #8
   161b2:	2301      	movs	r3, #1
   161b4:	9301      	str	r3, [sp, #4]
   161b6:	2364      	movs	r3, #100	; 0x64
   161b8:	9300      	str	r3, [sp, #0]
   161ba:	4613      	mov	r3, r2
   161bc:	9a04      	ldr	r2, [sp, #16]
   161be:	2160      	movs	r1, #96	; 0x60
   161c0:	9805      	ldr	r0, [sp, #20]
   161c2:	47a0      	blx	r4
   161c4:	4603      	mov	r3, r0
   161c6:	930a      	str	r3, [sp, #40]	; 0x28

    // Wait while the writing the start address
    WaitWhileBusy();
   161c8:	9805      	ldr	r0, [sp, #20]
   161ca:	f7ff fcd1 	bl	15b70 <Sd::WaitWhileBusy()>

    // Force return if an error occurred
    if (sd.response.data.byte[0] != 0x00)
   161ce:	f89d 3020 	ldrb.w	r3, [sp, #32]
   161d2:	2b00      	cmp	r3, #0
   161d4:	d009      	beq.n	161ea <Sd::DeleteBlock(unsigned long, unsigned long)+0x66>
    {
      LOG_ERROR("Failed to set Start Address!");
   161d6:	f44f 736a 	mov.w	r3, #936	; 0x3a8
   161da:	4a2d      	ldr	r2, [pc, #180]	; (16290 <Sd::DeleteBlock(unsigned long, unsigned long)+0x10c>)
   161dc:	492d      	ldr	r1, [pc, #180]	; (16294 <Sd::DeleteBlock(unsigned long, unsigned long)+0x110>)
   161de:	482e      	ldr	r0, [pc, #184]	; (16298 <Sd::DeleteBlock(unsigned long, unsigned long)+0x114>)
   161e0:	f7fe f848 	bl	14274 <printf>
      delete_failed = true;
   161e4:	2301      	movs	r3, #1
   161e6:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
    }

    // Set the delete end address
    if (!delete_failed)
   161ea:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
   161ee:	f083 0301 	eor.w	r3, r3, #1
   161f2:	b2db      	uxtb	r3, r3
   161f4:	2b00      	cmp	r3, #0
   161f6:	d010      	beq.n	1621a <Sd::DeleteBlock(unsigned long, unsigned long)+0x96>
    {
      LOG_DEBUG("Setting Delete End Address...");
      sd.response.length = SendCmd(Command::kDelTo, end, sd.response.data.byte,
                                   100, KeepAlive::kYes);
   161f8:	9b05      	ldr	r3, [sp, #20]
   161fa:	681b      	ldr	r3, [r3, #0]
   161fc:	681c      	ldr	r4, [r3, #0]
      sd.response.length = SendCmd(Command::kDelTo, end, sd.response.data.byte,
   161fe:	ab06      	add	r3, sp, #24
   16200:	f103 0208 	add.w	r2, r3, #8
   16204:	2301      	movs	r3, #1
   16206:	9301      	str	r3, [sp, #4]
   16208:	2364      	movs	r3, #100	; 0x64
   1620a:	9300      	str	r3, [sp, #0]
   1620c:	4613      	mov	r3, r2
   1620e:	9a03      	ldr	r2, [sp, #12]
   16210:	2161      	movs	r1, #97	; 0x61
   16212:	9805      	ldr	r0, [sp, #20]
   16214:	47a0      	blx	r4
   16216:	4603      	mov	r3, r0
   16218:	930a      	str	r3, [sp, #40]	; 0x28
    }

    // Wait while the writing the end address
    WaitWhileBusy();
   1621a:	9805      	ldr	r0, [sp, #20]
   1621c:	f7ff fca8 	bl	15b70 <Sd::WaitWhileBusy()>

    // Force return if an error occurred
    if (sd.response.data.byte[0] != 0x00)
   16220:	f89d 3020 	ldrb.w	r3, [sp, #32]
   16224:	2b00      	cmp	r3, #0
   16226:	d009      	beq.n	1623c <Sd::DeleteBlock(unsigned long, unsigned long)+0xb8>
    {
      LOG_ERROR("Failed to set End Address!");
   16228:	f240 33ba 	movw	r3, #954	; 0x3ba
   1622c:	4a18      	ldr	r2, [pc, #96]	; (16290 <Sd::DeleteBlock(unsigned long, unsigned long)+0x10c>)
   1622e:	491b      	ldr	r1, [pc, #108]	; (1629c <Sd::DeleteBlock(unsigned long, unsigned long)+0x118>)
   16230:	481b      	ldr	r0, [pc, #108]	; (162a0 <Sd::DeleteBlock(unsigned long, unsigned long)+0x11c>)
   16232:	f7fe f81f 	bl	14274 <printf>
      delete_failed = true;
   16236:	2301      	movs	r3, #1
   16238:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
    }

    // Finally, attempt a delete
    if (!delete_failed)
   1623c:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
   16240:	f083 0301 	eor.w	r3, r3, #1
   16244:	b2db      	uxtb	r3, r3
   16246:	2b00      	cmp	r3, #0
   16248:	d014      	beq.n	16274 <Sd::DeleteBlock(unsigned long, unsigned long)+0xf0>
    {
      // Issue the delete command to delete from our from:to range
      LOG_DEBUG("Issuing Delete Command...");
      sd.response.length = SendCmd(Command::kDel, 0xFFFFFFFF,
                                   sd.response.data.byte, 100, KeepAlive::kYes);
   1624a:	9b05      	ldr	r3, [sp, #20]
   1624c:	681b      	ldr	r3, [r3, #0]
   1624e:	681c      	ldr	r4, [r3, #0]
      sd.response.length = SendCmd(Command::kDel, 0xFFFFFFFF,
   16250:	ab06      	add	r3, sp, #24
   16252:	f103 0208 	add.w	r2, r3, #8
   16256:	2301      	movs	r3, #1
   16258:	9301      	str	r3, [sp, #4]
   1625a:	2364      	movs	r3, #100	; 0x64
   1625c:	9300      	str	r3, [sp, #0]
   1625e:	4613      	mov	r3, r2
   16260:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   16264:	2166      	movs	r1, #102	; 0x66
   16266:	9805      	ldr	r0, [sp, #20]
   16268:	47a0      	blx	r4
   1626a:	4603      	mov	r3, r0
   1626c:	930a      	str	r3, [sp, #40]	; 0x28

      // Wait while the deletion occurs
      WaitWhileBusy();
   1626e:	9805      	ldr	r0, [sp, #20]
   16270:	f7ff fc7e 	bl	15b70 <Sd::WaitWhileBusy()>
      LOG_DEBUG("[R1 Response: 0x%02X]", sd.response.data.byte[0]);
      LOG_DEBUG("Deletion Complete...");
    }

    // Return status
    return sd.response.data.byte[0];
   16274:	f89d 4020 	ldrb.w	r4, [sp, #32]
   16278:	462b      	mov	r3, r5
   1627a:	4619      	mov	r1, r3
   1627c:	4803      	ldr	r0, [pc, #12]	; (1628c <Sd::DeleteBlock(unsigned long, unsigned long)+0x108>)
   1627e:	f7fc fdb1 	bl	12de4 <__cyg_profile_func_exit>
   16282:	4623      	mov	r3, r4
  }
   16284:	4618      	mov	r0, r3
   16286:	b00f      	add	sp, #60	; 0x3c
   16288:	bd30      	pop	{r4, r5, pc}
   1628a:	bf00      	nop
   1628c:	00016185 	.word	0x00016185
   16290:	00018fa0 	.word	0x00018fa0
   16294:	00018cc0 	.word	0x00018cc0
   16298:	0001875c 	.word	0x0001875c
   1629c:	00018cc8 	.word	0x00018cc8
   162a0:	000187b4 	.word	0x000187b4

000162a4 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)>:

  // Send a command
  uint32_t SendCmd(Command sdc, uint32_t arg, uint8_t response_buffer[],
   162a4:	e92d 49f0 	stmdb	sp!, {r4, r5, r6, r7, r8, fp, lr}
   162a8:	b08f      	sub	sp, #60	; 0x3c
   162aa:	46f0      	mov	r8, lr
   162ac:	9003      	str	r0, [sp, #12]
   162ae:	9102      	str	r1, [sp, #8]
   162b0:	9201      	str	r2, [sp, #4]
   162b2:	9300      	str	r3, [sp, #0]
   162b4:	4643      	mov	r3, r8
   162b6:	4619      	mov	r1, r3
   162b8:	4840      	ldr	r0, [pc, #256]	; (163bc <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x118>)
   162ba:	f7fc fd7f 	bl	12dbc <__cyg_profile_func_enter>
                   uint32_t delay, KeepAlive keep_alive) override
  {
    ResponseType res_type;
    uint8_t res_len    = 0;
   162be:	2300      	movs	r3, #0
   162c0:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
    uint8_t crc        = 0;
   162c4:	2300      	movs	r3, #0
   162c6:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
    uint8_t tries      = 0;
   162ca:	2300      	movs	r3, #0
   162cc:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
    uint8_t bit_offset = 0;  // determines the distance of the response's
   162d0:	2300      	movs	r3, #0
   162d2:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
                             // 0 bit from the MSB place
    uint8_t temp_byte = 0;
   162d6:	2300      	movs	r3, #0
   162d8:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f

    // Determine the response type of the set command
    switch (sdc)
   162dc:	9b02      	ldr	r3, [sp, #8]
   162de:	2b58      	cmp	r3, #88	; 0x58
   162e0:	d052      	beq.n	16388 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0xe4>
   162e2:	2b58      	cmp	r3, #88	; 0x58
   162e4:	dc16      	bgt.n	16314 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x70>
   162e6:	2b48      	cmp	r3, #72	; 0x48
   162e8:	d033      	beq.n	16352 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0xae>
   162ea:	2b48      	cmp	r3, #72	; 0x48
   162ec:	dc06      	bgt.n	162fc <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x58>
   162ee:	2b40      	cmp	r3, #64	; 0x40
   162f0:	d029      	beq.n	16346 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0xa2>
   162f2:	2b41      	cmp	r3, #65	; 0x41
   162f4:	d02a      	beq.n	1634c <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0xa8>
   162f6:	2b0d      	cmp	r3, #13
   162f8:	d031      	beq.n	1635e <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0xba>
   162fa:	e054      	b.n	163a6 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x102>
   162fc:	2b50      	cmp	r3, #80	; 0x50
   162fe:	d03a      	beq.n	16376 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0xd2>
   16300:	2b50      	cmp	r3, #80	; 0x50
   16302:	dc02      	bgt.n	1630a <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x66>
   16304:	2b4c      	cmp	r3, #76	; 0x4c
   16306:	d027      	beq.n	16358 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0xb4>
   16308:	e04d      	b.n	163a6 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x102>
   1630a:	2b51      	cmp	r3, #81	; 0x51
   1630c:	d036      	beq.n	1637c <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0xd8>
   1630e:	2b52      	cmp	r3, #82	; 0x52
   16310:	d037      	beq.n	16382 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0xde>
   16312:	e048      	b.n	163a6 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x102>
   16314:	2b66      	cmp	r3, #102	; 0x66
   16316:	d043      	beq.n	163a0 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0xfc>
   16318:	2b66      	cmp	r3, #102	; 0x66
   1631a:	dc06      	bgt.n	1632a <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x86>
   1631c:	2b60      	cmp	r3, #96	; 0x60
   1631e:	d039      	beq.n	16394 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0xf0>
   16320:	2b61      	cmp	r3, #97	; 0x61
   16322:	d03a      	beq.n	1639a <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0xf6>
   16324:	2b59      	cmp	r3, #89	; 0x59
   16326:	d032      	beq.n	1638e <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0xea>
   16328:	e03d      	b.n	163a6 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x102>
   1632a:	2b77      	cmp	r3, #119	; 0x77
   1632c:	d01a      	beq.n	16364 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0xc0>
   1632e:	2b77      	cmp	r3, #119	; 0x77
   16330:	dc02      	bgt.n	16338 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x94>
   16332:	2b69      	cmp	r3, #105	; 0x69
   16334:	d019      	beq.n	1636a <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0xc6>
   16336:	e036      	b.n	163a6 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x102>
   16338:	2b7a      	cmp	r3, #122	; 0x7a
   1633a:	d019      	beq.n	16370 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0xcc>
   1633c:	2bff      	cmp	r3, #255	; 0xff
   1633e:	d132      	bne.n	163a6 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x102>
    {
      case Command::kGarbage: res_type = ResponseType::kR1; break;
   16340:	2300      	movs	r3, #0
   16342:	930d      	str	r3, [sp, #52]	; 0x34
   16344:	e042      	b.n	163cc <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x128>
      case Command::kReset: res_type = ResponseType::kR1; break;
   16346:	2300      	movs	r3, #0
   16348:	930d      	str	r3, [sp, #52]	; 0x34
   1634a:	e03f      	b.n	163cc <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x128>
      case Command::kInit: res_type = ResponseType::kR1; break;
   1634c:	2300      	movs	r3, #0
   1634e:	930d      	str	r3, [sp, #52]	; 0x34
   16350:	e03c      	b.n	163cc <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x128>
      case Command::kGetOp: res_type = ResponseType::kR7; break;
   16352:	2307      	movs	r3, #7
   16354:	930d      	str	r3, [sp, #52]	; 0x34
   16356:	e039      	b.n	163cc <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x128>
      case Command::kStopTrans: res_type = ResponseType::kR1; break;
   16358:	2300      	movs	r3, #0
   1635a:	930d      	str	r3, [sp, #52]	; 0x34
   1635c:	e036      	b.n	163cc <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x128>
      case Command::kGetStatus: res_type = ResponseType::kR2; break;
   1635e:	2302      	movs	r3, #2
   16360:	930d      	str	r3, [sp, #52]	; 0x34
   16362:	e033      	b.n	163cc <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x128>
      case Command::kAcBegin: res_type = ResponseType::kR1; break;
   16364:	2300      	movs	r3, #0
   16366:	930d      	str	r3, [sp, #52]	; 0x34
   16368:	e030      	b.n	163cc <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x128>
      case Command::kAcInit: res_type = ResponseType::kR1; break;
   1636a:	2300      	movs	r3, #0
   1636c:	930d      	str	r3, [sp, #52]	; 0x34
   1636e:	e02d      	b.n	163cc <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x128>
      case Command::kGetOcr: res_type = ResponseType::kR3; break;
   16370:	2303      	movs	r3, #3
   16372:	930d      	str	r3, [sp, #52]	; 0x34
   16374:	e02a      	b.n	163cc <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x128>
      case Command::kChgBlkLen: res_type = ResponseType::kR1; break;
   16376:	2300      	movs	r3, #0
   16378:	930d      	str	r3, [sp, #52]	; 0x34
   1637a:	e027      	b.n	163cc <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x128>
      case Command::kReadSingle: res_type = ResponseType::kR1; break;
   1637c:	2300      	movs	r3, #0
   1637e:	930d      	str	r3, [sp, #52]	; 0x34
   16380:	e024      	b.n	163cc <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x128>
      case Command::kReadMulti: res_type = ResponseType::kR1; break;
   16382:	2300      	movs	r3, #0
   16384:	930d      	str	r3, [sp, #52]	; 0x34
   16386:	e021      	b.n	163cc <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x128>
      case Command::kWriteSingle: res_type = ResponseType::kR1; break;
   16388:	2300      	movs	r3, #0
   1638a:	930d      	str	r3, [sp, #52]	; 0x34
   1638c:	e01e      	b.n	163cc <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x128>
      case Command::kWriteMulti: res_type = ResponseType::kR1; break;
   1638e:	2300      	movs	r3, #0
   16390:	930d      	str	r3, [sp, #52]	; 0x34
   16392:	e01b      	b.n	163cc <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x128>
      case Command::kDelFrom: res_type = ResponseType::kR1; break;
   16394:	2300      	movs	r3, #0
   16396:	930d      	str	r3, [sp, #52]	; 0x34
   16398:	e018      	b.n	163cc <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x128>
      case Command::kDelTo: res_type = ResponseType::kR1; break;
   1639a:	2300      	movs	r3, #0
   1639c:	930d      	str	r3, [sp, #52]	; 0x34
   1639e:	e015      	b.n	163cc <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x128>
      case Command::kDel: res_type = ResponseType::kR1b; break;
   163a0:	2301      	movs	r3, #1
   163a2:	930d      	str	r3, [sp, #52]	; 0x34
   163a4:	e012      	b.n	163cc <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x128>
      default:
        LOG_ERROR("Unknown response type. Aborting!");
   163a6:	f240 33f3 	movw	r3, #1011	; 0x3f3
   163aa:	4a05      	ldr	r2, [pc, #20]	; (163c0 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x11c>)
   163ac:	4905      	ldr	r1, [pc, #20]	; (163c4 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x120>)
   163ae:	4806      	ldr	r0, [pc, #24]	; (163c8 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x124>)
   163b0:	f7fd ff60 	bl	14274 <printf>
        return -1;
   163b4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   163b8:	e1b1      	b.n	1671e <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x47a>
   163ba:	bf00      	nop
   163bc:	000162a5 	.word	0x000162a5
   163c0:	00018fd4 	.word	0x00018fd4
   163c4:	00018cd0 	.word	0x00018cd0
   163c8:	00018808 	.word	0x00018808
    // algorithm
    uint8_t msg[5] = { static_cast<uint8_t>(sdc),
                       static_cast<uint8_t>(arg >> 24),
                       static_cast<uint8_t>(arg >> 16),
                       static_cast<uint8_t>(arg >> 8),
                       static_cast<uint8_t>(arg >> 0) };
   163cc:	9b02      	ldr	r3, [sp, #8]
   163ce:	b2db      	uxtb	r3, r3
   163d0:	f88d 3010 	strb.w	r3, [sp, #16]
                       static_cast<uint8_t>(arg >> 24),
   163d4:	9b01      	ldr	r3, [sp, #4]
   163d6:	0e1b      	lsrs	r3, r3, #24
                       static_cast<uint8_t>(arg >> 0) };
   163d8:	b2db      	uxtb	r3, r3
   163da:	f88d 3011 	strb.w	r3, [sp, #17]
                       static_cast<uint8_t>(arg >> 16),
   163de:	9b01      	ldr	r3, [sp, #4]
   163e0:	0c1b      	lsrs	r3, r3, #16
                       static_cast<uint8_t>(arg >> 0) };
   163e2:	b2db      	uxtb	r3, r3
   163e4:	f88d 3012 	strb.w	r3, [sp, #18]
                       static_cast<uint8_t>(arg >> 8),
   163e8:	9b01      	ldr	r3, [sp, #4]
   163ea:	0a1b      	lsrs	r3, r3, #8
                       static_cast<uint8_t>(arg >> 0) };
   163ec:	b2db      	uxtb	r3, r3
   163ee:	f88d 3013 	strb.w	r3, [sp, #19]
   163f2:	9b01      	ldr	r3, [sp, #4]
   163f4:	b2db      	uxtb	r3, r3
   163f6:	f88d 3014 	strb.w	r3, [sp, #20]

    crc = GetCrc7(msg, sizeof(msg));
   163fa:	9b03      	ldr	r3, [sp, #12]
   163fc:	681b      	ldr	r3, [r3, #0]
   163fe:	331c      	adds	r3, #28
   16400:	681b      	ldr	r3, [r3, #0]
   16402:	a904      	add	r1, sp, #16
   16404:	2205      	movs	r2, #5
   16406:	9803      	ldr	r0, [sp, #12]
   16408:	4798      	blx	r3
   1640a:	4603      	mov	r3, r0
   1640c:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
    if (sdc == Command::kGarbage)
   16410:	9b02      	ldr	r3, [sp, #8]
   16412:	2bff      	cmp	r3, #255	; 0xff
   16414:	d102      	bne.n	1641c <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x178>
    {
      crc = 0xFF;
   16416:	23ff      	movs	r3, #255	; 0xff
   16418:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
    }

    // Select the SD Card
    chip_select_->SetLow();
   1641c:	9b03      	ldr	r3, [sp, #12]
   1641e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   16420:	9b03      	ldr	r3, [sp, #12]
   16422:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   16424:	681b      	ldr	r3, [r3, #0]
   16426:	3310      	adds	r3, #16
   16428:	681b      	ldr	r3, [r3, #0]
   1642a:	4610      	mov	r0, r2
   1642c:	4798      	blx	r3
    chip_select_external_->SetLow();
   1642e:	9b03      	ldr	r3, [sp, #12]
   16430:	6bda      	ldr	r2, [r3, #60]	; 0x3c
   16432:	9b03      	ldr	r3, [sp, #12]
   16434:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   16436:	681b      	ldr	r3, [r3, #0]
   16438:	3310      	adds	r3, #16
   1643a:	681b      	ldr	r3, [r3, #0]
   1643c:	4610      	mov	r0, r2
   1643e:	4798      	blx	r3

    // If desired, wait a bit before talking
    if (delay > 0)
   16440:	9b16      	ldr	r3, [sp, #88]	; 0x58
   16442:	2b00      	cmp	r3, #0
   16444:	d007      	beq.n	16456 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x1b2>
    {
      Delay(delay);
   16446:	9b16      	ldr	r3, [sp, #88]	; 0x58
   16448:	461a      	mov	r2, r3
   1644a:	f04f 0300 	mov.w	r3, #0
   1644e:	4610      	mov	r0, r2
   16450:	4619      	mov	r1, r3
   16452:	f7fa f897 	bl	10584 <Delay(unsigned long long)>
    }

    // Send the desired command frame to the SD card board
    // Begin by transfering the command byte
    ssp_interface_->Transfer(static_cast<uint16_t>(sdc));
   16456:	9b03      	ldr	r3, [sp, #12]
   16458:	685a      	ldr	r2, [r3, #4]
   1645a:	9b03      	ldr	r3, [sp, #12]
   1645c:	685b      	ldr	r3, [r3, #4]
   1645e:	681b      	ldr	r3, [r3, #0]
   16460:	3308      	adds	r3, #8
   16462:	681b      	ldr	r3, [r3, #0]
   16464:	9902      	ldr	r1, [sp, #8]
   16466:	b289      	uxth	r1, r1
   16468:	4610      	mov	r0, r2
   1646a:	4798      	blx	r3
    // Send arg byte [31:24]
    ssp_interface_->Transfer(static_cast<uint16_t>(arg >> 24) & 0xFF);
   1646c:	9b03      	ldr	r3, [sp, #12]
   1646e:	6858      	ldr	r0, [r3, #4]
   16470:	9b03      	ldr	r3, [sp, #12]
   16472:	685b      	ldr	r3, [r3, #4]
   16474:	681b      	ldr	r3, [r3, #0]
   16476:	3308      	adds	r3, #8
   16478:	681b      	ldr	r3, [r3, #0]
   1647a:	9a01      	ldr	r2, [sp, #4]
   1647c:	0e12      	lsrs	r2, r2, #24
   1647e:	b292      	uxth	r2, r2
   16480:	b2d2      	uxtb	r2, r2
   16482:	b292      	uxth	r2, r2
   16484:	4611      	mov	r1, r2
   16486:	4798      	blx	r3
    // Send arg byte [23:16]
    ssp_interface_->Transfer(static_cast<uint16_t>(arg >> 16) & 0xFF);
   16488:	9b03      	ldr	r3, [sp, #12]
   1648a:	6858      	ldr	r0, [r3, #4]
   1648c:	9b03      	ldr	r3, [sp, #12]
   1648e:	685b      	ldr	r3, [r3, #4]
   16490:	681b      	ldr	r3, [r3, #0]
   16492:	3308      	adds	r3, #8
   16494:	681b      	ldr	r3, [r3, #0]
   16496:	9a01      	ldr	r2, [sp, #4]
   16498:	0c12      	lsrs	r2, r2, #16
   1649a:	b292      	uxth	r2, r2
   1649c:	b2d2      	uxtb	r2, r2
   1649e:	b292      	uxth	r2, r2
   164a0:	4611      	mov	r1, r2
   164a2:	4798      	blx	r3
    // Send arg byte [15:8]
    ssp_interface_->Transfer(static_cast<uint16_t>(arg >> 8) & 0xFF);
   164a4:	9b03      	ldr	r3, [sp, #12]
   164a6:	6858      	ldr	r0, [r3, #4]
   164a8:	9b03      	ldr	r3, [sp, #12]
   164aa:	685b      	ldr	r3, [r3, #4]
   164ac:	681b      	ldr	r3, [r3, #0]
   164ae:	3308      	adds	r3, #8
   164b0:	681b      	ldr	r3, [r3, #0]
   164b2:	9a01      	ldr	r2, [sp, #4]
   164b4:	0a12      	lsrs	r2, r2, #8
   164b6:	b292      	uxth	r2, r2
   164b8:	b2d2      	uxtb	r2, r2
   164ba:	b292      	uxth	r2, r2
   164bc:	4611      	mov	r1, r2
   164be:	4798      	blx	r3
    // Send arg byte [7:0]
    ssp_interface_->Transfer(static_cast<uint16_t>(arg >> 0) & 0xFF);
   164c0:	9b03      	ldr	r3, [sp, #12]
   164c2:	685a      	ldr	r2, [r3, #4]
   164c4:	9b03      	ldr	r3, [sp, #12]
   164c6:	685b      	ldr	r3, [r3, #4]
   164c8:	681b      	ldr	r3, [r3, #0]
   164ca:	3308      	adds	r3, #8
   164cc:	681b      	ldr	r3, [r3, #0]
   164ce:	9901      	ldr	r1, [sp, #4]
   164d0:	b289      	uxth	r1, r1
   164d2:	b2c9      	uxtb	r1, r1
   164d4:	b289      	uxth	r1, r1
   164d6:	4610      	mov	r0, r2
   164d8:	4798      	blx	r3
    // Send 7-bit CRC and LSB stop addr (as b1)
    ssp_interface_->Transfer(static_cast<uint16_t>(crc << 1) | 0x01);
   164da:	9b03      	ldr	r3, [sp, #12]
   164dc:	6858      	ldr	r0, [r3, #4]
   164de:	9b03      	ldr	r3, [sp, #12]
   164e0:	685b      	ldr	r3, [r3, #4]
   164e2:	681b      	ldr	r3, [r3, #0]
   164e4:	3308      	adds	r3, #8
   164e6:	681b      	ldr	r3, [r3, #0]
   164e8:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
   164ec:	b292      	uxth	r2, r2
   164ee:	0052      	lsls	r2, r2, #1
   164f0:	b292      	uxth	r2, r2
   164f2:	f042 0201 	orr.w	r2, r2, #1
   164f6:	b292      	uxth	r2, r2
   164f8:	4611      	mov	r1, r2
   164fa:	4798      	blx	r3

    // Write garbage while waiting for a response
    // Send at least 1 byte of garbage before checking for a response
    temp_byte = static_cast<uint8_t>(ssp_interface_->Transfer(0xFF));
   164fc:	9b03      	ldr	r3, [sp, #12]
   164fe:	685a      	ldr	r2, [r3, #4]
   16500:	9b03      	ldr	r3, [sp, #12]
   16502:	685b      	ldr	r3, [r3, #4]
   16504:	681b      	ldr	r3, [r3, #0]
   16506:	3308      	adds	r3, #8
   16508:	681b      	ldr	r3, [r3, #0]
   1650a:	21ff      	movs	r1, #255	; 0xff
   1650c:	4610      	mov	r0, r2
   1650e:	4798      	blx	r3
   16510:	4603      	mov	r3, r0
   16512:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
    while (tries++ < kBusTimeout)
   16516:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   1651a:	1c5a      	adds	r2, r3, #1
   1651c:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
   16520:	2bf9      	cmp	r3, #249	; 0xf9
   16522:	bf94      	ite	ls
   16524:	2301      	movls	r3, #1
   16526:	2300      	movhi	r3, #0
   16528:	b2db      	uxtb	r3, r3
   1652a:	2b00      	cmp	r3, #0
   1652c:	d027      	beq.n	1657e <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x2da>
    {
      temp_byte = static_cast<uint8_t>(ssp_interface_->Transfer(0xFF));
   1652e:	9b03      	ldr	r3, [sp, #12]
   16530:	685a      	ldr	r2, [r3, #4]
   16532:	9b03      	ldr	r3, [sp, #12]
   16534:	685b      	ldr	r3, [r3, #4]
   16536:	681b      	ldr	r3, [r3, #0]
   16538:	3308      	adds	r3, #8
   1653a:	681b      	ldr	r3, [r3, #0]
   1653c:	21ff      	movs	r1, #255	; 0xff
   1653e:	4610      	mov	r0, r2
   16540:	4798      	blx	r3
   16542:	4603      	mov	r3, r0
   16544:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
      if (temp_byte != 0xFF)
   16548:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
   1654c:	2bff      	cmp	r3, #255	; 0xff
   1654e:	d00f      	beq.n	16570 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x2cc>
      {
        // Determine the offset, since the first byte of a
        // response will always be 0.
        while (temp_byte & (0x80 >> bit_offset))
   16550:	f89d 202f 	ldrb.w	r2, [sp, #47]	; 0x2f
   16554:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
   16558:	2180      	movs	r1, #128	; 0x80
   1655a:	fa41 f303 	asr.w	r3, r1, r3
   1655e:	4013      	ands	r3, r2
   16560:	2b00      	cmp	r3, #0
   16562:	d00b      	beq.n	1657c <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x2d8>
        {
          bit_offset++;
   16564:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
   16568:	3301      	adds	r3, #1
   1656a:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
        while (temp_byte & (0x80 >> bit_offset))
   1656e:	e7ef      	b.n	16550 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x2ac>
        }
        break;
      }
      tries++;
   16570:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   16574:	3301      	adds	r3, #1
   16576:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
    while (tries++ < kBusTimeout)
   1657a:	e7cc      	b.n	16516 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x272>
        break;
   1657c:	bf00      	nop
    }

    // Determine response length (in bytes) based on response type
    switch (res_type)
   1657e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   16580:	2b07      	cmp	r3, #7
   16582:	d827      	bhi.n	165d4 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x330>
   16584:	a201      	add	r2, pc, #4	; (adr r2, 1658c <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x2e8>)
   16586:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1658a:	bf00      	nop
   1658c:	000165ad 	.word	0x000165ad
   16590:	000165b5 	.word	0x000165b5
   16594:	000165bd 	.word	0x000165bd
   16598:	000165c5 	.word	0x000165c5
   1659c:	000165d5 	.word	0x000165d5
   165a0:	000165d5 	.word	0x000165d5
   165a4:	000165d5 	.word	0x000165d5
   165a8:	000165cd 	.word	0x000165cd
    {
      case ResponseType::kR1: res_len = 1; break;
   165ac:	2301      	movs	r3, #1
   165ae:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
   165b2:	e019      	b.n	165e8 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x344>
      case ResponseType::kR1b: res_len = 1; break;
   165b4:	2301      	movs	r3, #1
   165b6:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
   165ba:	e015      	b.n	165e8 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x344>
      case ResponseType::kR2: res_len = 2; break;
   165bc:	2302      	movs	r3, #2
   165be:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
   165c2:	e011      	b.n	165e8 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x344>
      case ResponseType::kR3: res_len = 5; break;
   165c4:	2305      	movs	r3, #5
   165c6:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
   165ca:	e00d      	b.n	165e8 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x344>
      case ResponseType::kR7: res_len = 5; break;
   165cc:	2305      	movs	r3, #5
   165ce:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
   165d2:	e009      	b.n	165e8 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x344>
      default:
        LOG_ERROR("Response unsupported in SPI mode. Aborting!");
   165d4:	f240 433a 	movw	r3, #1082	; 0x43a
   165d8:	4a56      	ldr	r2, [pc, #344]	; (16734 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x490>)
   165da:	4957      	ldr	r1, [pc, #348]	; (16738 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x494>)
   165dc:	4857      	ldr	r0, [pc, #348]	; (1673c <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x498>)
   165de:	f7fd fe49 	bl	14274 <printf>
        return -1;
   165e2:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   165e6:	e09a      	b.n	1671e <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x47a>
        break;
    }

    // Acquire the response
    uint64_t temp_response = 0;
   165e8:	f04f 0200 	mov.w	r2, #0
   165ec:	f04f 0300 	mov.w	r3, #0
   165f0:	e9cd 2308 	strd	r2, r3, [sp, #32]
    // Read an extra 8 bits since the response was offset
    uint8_t bytes_to_read =
   165f4:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
   165f8:	2b00      	cmp	r3, #0
   165fa:	d004      	beq.n	16606 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x362>
   165fc:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
   16600:	3301      	adds	r3, #1
   16602:	b2db      	uxtb	r3, r3
   16604:	e001      	b.n	1660a <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x366>
   16606:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
   1660a:	f88d 301f 	strb.w	r3, [sp, #31]
        static_cast<uint8_t>((bit_offset > 0) ? res_len + 1 : res_len);
    while (bytes_to_read-- > 0)
   1660e:	f89d 301f 	ldrb.w	r3, [sp, #31]
   16612:	1e5a      	subs	r2, r3, #1
   16614:	f88d 201f 	strb.w	r2, [sp, #31]
   16618:	2b00      	cmp	r3, #0
   1661a:	bf14      	ite	ne
   1661c:	2301      	movne	r3, #1
   1661e:	2300      	moveq	r3, #0
   16620:	b2db      	uxtb	r3, r3
   16622:	2b00      	cmp	r3, #0
   16624:	d025      	beq.n	16672 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x3ce>
    {
      // Make space for the next byte
      temp_response = temp_response << 8;
   16626:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   1662a:	f04f 0200 	mov.w	r2, #0
   1662e:	f04f 0300 	mov.w	r3, #0
   16632:	020b      	lsls	r3, r1, #8
   16634:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
   16638:	0202      	lsls	r2, r0, #8
   1663a:	e9cd 2308 	strd	r2, r3, [sp, #32]
      temp_response |= temp_byte;
   1663e:	f89d b02f 	ldrb.w	fp, [sp, #47]	; 0x2f
   16642:	f04f 0c00 	mov.w	ip, #0
   16646:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   1664a:	ea4b 0200 	orr.w	r2, fp, r0
   1664e:	ea4c 0301 	orr.w	r3, ip, r1
   16652:	e9cd 2308 	strd	r2, r3, [sp, #32]
      temp_byte = static_cast<uint8_t>(ssp_interface_->Transfer(0xFF));
   16656:	9b03      	ldr	r3, [sp, #12]
   16658:	685a      	ldr	r2, [r3, #4]
   1665a:	9b03      	ldr	r3, [sp, #12]
   1665c:	685b      	ldr	r3, [r3, #4]
   1665e:	681b      	ldr	r3, [r3, #0]
   16660:	3308      	adds	r3, #8
   16662:	681b      	ldr	r3, [r3, #0]
   16664:	21ff      	movs	r1, #255	; 0xff
   16666:	4610      	mov	r0, r2
   16668:	4798      	blx	r3
   1666a:	4603      	mov	r3, r0
   1666c:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
    while (bytes_to_read-- > 0)
   16670:	e7cd      	b.n	1660e <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x36a>
    }
    // Compensate for the bit offset
    temp_response = temp_response >> bit_offset;
   16672:	f89d 1030 	ldrb.w	r1, [sp, #48]	; 0x30
   16676:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   1667a:	f1c1 0c20 	rsb	ip, r1, #32
   1667e:	f1a1 0020 	sub.w	r0, r1, #32
   16682:	fa22 f401 	lsr.w	r4, r2, r1
   16686:	fa03 fc0c 	lsl.w	ip, r3, ip
   1668a:	ea44 040c 	orr.w	r4, r4, ip
   1668e:	fa23 f000 	lsr.w	r0, r3, r0
   16692:	4304      	orrs	r4, r0
   16694:	fa23 f501 	lsr.w	r5, r3, r1
   16698:	e9cd 4508 	strd	r4, r5, [sp, #32]

    // Only write to the response buffer if it is provided
    if (response_buffer != nullptr)
   1669c:	9b00      	ldr	r3, [sp, #0]
   1669e:	2b00      	cmp	r3, #0
   166a0:	d025      	beq.n	166ee <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x44a>
    {
      for (int i = 0; i < res_len; i++)
   166a2:	2300      	movs	r3, #0
   166a4:	9306      	str	r3, [sp, #24]
   166a6:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
   166aa:	9a06      	ldr	r2, [sp, #24]
   166ac:	429a      	cmp	r2, r3
   166ae:	da1e      	bge.n	166ee <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x44a>
      {
        response_buffer[i] =
            static_cast<uint8_t>(temp_response >> 8 * (res_len - 1 - i));
   166b0:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
   166b4:	1e5a      	subs	r2, r3, #1
   166b6:	9b06      	ldr	r3, [sp, #24]
   166b8:	1ad3      	subs	r3, r2, r3
   166ba:	00da      	lsls	r2, r3, #3
   166bc:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   166c0:	f1c2 0020 	rsb	r0, r2, #32
   166c4:	f1a2 0120 	sub.w	r1, r2, #32
   166c8:	fa23 f602 	lsr.w	r6, r3, r2
   166cc:	fa04 f000 	lsl.w	r0, r4, r0
   166d0:	4306      	orrs	r6, r0
   166d2:	fa24 f101 	lsr.w	r1, r4, r1
   166d6:	430e      	orrs	r6, r1
   166d8:	fa24 f702 	lsr.w	r7, r4, r2
        response_buffer[i] =
   166dc:	9b06      	ldr	r3, [sp, #24]
   166de:	9a00      	ldr	r2, [sp, #0]
   166e0:	4413      	add	r3, r2
   166e2:	b2f2      	uxtb	r2, r6
   166e4:	701a      	strb	r2, [r3, #0]
      for (int i = 0; i < res_len; i++)
   166e6:	9b06      	ldr	r3, [sp, #24]
   166e8:	3301      	adds	r3, #1
   166ea:	9306      	str	r3, [sp, #24]
   166ec:	e7db      	b.n	166a6 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x402>
      }
    }

    // Only end the transaction if keep_alive isn't requested
    if (keep_alive == KeepAlive::kNo)
   166ee:	f89d 305c 	ldrb.w	r3, [sp, #92]	; 0x5c
   166f2:	2b00      	cmp	r3, #0
   166f4:	d111      	bne.n	1671a <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x476>
    {
      // Deselect the SPI comm board
      chip_select_->SetHigh();
   166f6:	9b03      	ldr	r3, [sp, #12]
   166f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   166fa:	9b03      	ldr	r3, [sp, #12]
   166fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   166fe:	681b      	ldr	r3, [r3, #0]
   16700:	330c      	adds	r3, #12
   16702:	681b      	ldr	r3, [r3, #0]
   16704:	4610      	mov	r0, r2
   16706:	4798      	blx	r3
      chip_select_external_->SetHigh();
   16708:	9b03      	ldr	r3, [sp, #12]
   1670a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
   1670c:	9b03      	ldr	r3, [sp, #12]
   1670e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   16710:	681b      	ldr	r3, [r3, #0]
   16712:	330c      	adds	r3, #12
   16714:	681b      	ldr	r3, [r3, #0]
   16716:	4610      	mov	r0, r2
   16718:	4798      	blx	r3
    }
    return res_len;
   1671a:	f89d 4033 	ldrb.w	r4, [sp, #51]	; 0x33
   1671e:	4643      	mov	r3, r8
   16720:	4619      	mov	r1, r3
   16722:	4807      	ldr	r0, [pc, #28]	; (16740 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x49c>)
   16724:	f7fc fb5e 	bl	12de4 <__cyg_profile_func_exit>
   16728:	4623      	mov	r3, r4
  }
   1672a:	4618      	mov	r0, r3
   1672c:	b00f      	add	sp, #60	; 0x3c
   1672e:	e8bd 89f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, fp, pc}
   16732:	bf00      	nop
   16734:	00018fd4 	.word	0x00018fd4
   16738:	00018cd8 	.word	0x00018cd8
   1673c:	00018864 	.word	0x00018864
   16740:	000162a5 	.word	0x000162a5

00016744 <Sd::Crc7Add(unsigned char, unsigned char)>:

  // Adds a message byte to the current CRC-7 to get a the new CRC-7
  uint8_t Crc7Add(uint8_t crc, uint8_t message_byte) override
   16744:	b530      	push	{r4, r5, lr}
   16746:	b083      	sub	sp, #12
   16748:	4675      	mov	r5, lr
   1674a:	9001      	str	r0, [sp, #4]
   1674c:	460b      	mov	r3, r1
   1674e:	f88d 3003 	strb.w	r3, [sp, #3]
   16752:	4613      	mov	r3, r2
   16754:	f88d 3002 	strb.w	r3, [sp, #2]
   16758:	462b      	mov	r3, r5
   1675a:	4619      	mov	r1, r3
   1675c:	4809      	ldr	r0, [pc, #36]	; (16784 <Sd::Crc7Add(unsigned char, unsigned char)+0x40>)
   1675e:	f7fc fb2d 	bl	12dbc <__cyg_profile_func_enter>
  {
    return kCrcTable8.crc_table[(crc << 1) ^ message_byte];
   16762:	f89d 3003 	ldrb.w	r3, [sp, #3]
   16766:	005a      	lsls	r2, r3, #1
   16768:	f89d 3002 	ldrb.w	r3, [sp, #2]
   1676c:	4053      	eors	r3, r2
   1676e:	4a06      	ldr	r2, [pc, #24]	; (16788 <Sd::Crc7Add(unsigned char, unsigned char)+0x44>)
   16770:	5cd4      	ldrb	r4, [r2, r3]
   16772:	462b      	mov	r3, r5
   16774:	4619      	mov	r1, r3
   16776:	4803      	ldr	r0, [pc, #12]	; (16784 <Sd::Crc7Add(unsigned char, unsigned char)+0x40>)
   16778:	f7fc fb34 	bl	12de4 <__cyg_profile_func_exit>
   1677c:	4623      	mov	r3, r4
  }
   1677e:	4618      	mov	r0, r3
   16780:	b003      	add	sp, #12
   16782:	bd30      	pop	{r4, r5, pc}
   16784:	00016745 	.word	0x00016745
   16788:	00018948 	.word	0x00018948

0001678c <Sd::GetCrc7(unsigned char*, unsigned char)>:

  // Returns the CRC-7 for a message of "length" bytes
  uint8_t GetCrc7(uint8_t * message, uint8_t length) override
   1678c:	b530      	push	{r4, r5, lr}
   1678e:	b087      	sub	sp, #28
   16790:	4675      	mov	r5, lr
   16792:	9003      	str	r0, [sp, #12]
   16794:	9102      	str	r1, [sp, #8]
   16796:	4613      	mov	r3, r2
   16798:	f88d 3007 	strb.w	r3, [sp, #7]
   1679c:	462b      	mov	r3, r5
   1679e:	4619      	mov	r1, r3
   167a0:	4815      	ldr	r0, [pc, #84]	; (167f8 <Sd::GetCrc7(unsigned char*, unsigned char)+0x6c>)
   167a2:	f7fc fb0b 	bl	12dbc <__cyg_profile_func_enter>
  {
    uint8_t crc = 0;
   167a6:	2300      	movs	r3, #0
   167a8:	f88d 3017 	strb.w	r3, [sp, #23]
    for (int i = 0; i < length; i++)
   167ac:	2300      	movs	r3, #0
   167ae:	9304      	str	r3, [sp, #16]
   167b0:	f89d 3007 	ldrb.w	r3, [sp, #7]
   167b4:	9a04      	ldr	r2, [sp, #16]
   167b6:	429a      	cmp	r2, r3
   167b8:	da12      	bge.n	167e0 <Sd::GetCrc7(unsigned char*, unsigned char)+0x54>
    {
      crc = Crc7Add(crc, message[i]);
   167ba:	9b03      	ldr	r3, [sp, #12]
   167bc:	681b      	ldr	r3, [r3, #0]
   167be:	3318      	adds	r3, #24
   167c0:	681b      	ldr	r3, [r3, #0]
   167c2:	9a04      	ldr	r2, [sp, #16]
   167c4:	9902      	ldr	r1, [sp, #8]
   167c6:	440a      	add	r2, r1
   167c8:	7812      	ldrb	r2, [r2, #0]
   167ca:	f89d 1017 	ldrb.w	r1, [sp, #23]
   167ce:	9803      	ldr	r0, [sp, #12]
   167d0:	4798      	blx	r3
   167d2:	4603      	mov	r3, r0
   167d4:	f88d 3017 	strb.w	r3, [sp, #23]
    for (int i = 0; i < length; i++)
   167d8:	9b04      	ldr	r3, [sp, #16]
   167da:	3301      	adds	r3, #1
   167dc:	9304      	str	r3, [sp, #16]
   167de:	e7e7      	b.n	167b0 <Sd::GetCrc7(unsigned char*, unsigned char)+0x24>
    }
    return crc;
   167e0:	f89d 4017 	ldrb.w	r4, [sp, #23]
   167e4:	462b      	mov	r3, r5
   167e6:	4619      	mov	r1, r3
   167e8:	4803      	ldr	r0, [pc, #12]	; (167f8 <Sd::GetCrc7(unsigned char*, unsigned char)+0x6c>)
   167ea:	f7fc fafb 	bl	12de4 <__cyg_profile_func_exit>
   167ee:	4623      	mov	r3, r4
  }
   167f0:	4618      	mov	r0, r3
   167f2:	b007      	add	sp, #28
   167f4:	bd30      	pop	{r4, r5, pc}
   167f6:	bf00      	nop
   167f8:	0001678d 	.word	0x0001678d

000167fc <Sd::GetCrc16(unsigned char*, unsigned short)>:

  // Returns CCITT CRC-16 for a message of "length" bytes
  uint16_t GetCrc16(uint8_t * message, uint16_t length) override
   167fc:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
   16800:	b08c      	sub	sp, #48	; 0x30
   16802:	4677      	mov	r7, lr
   16804:	9003      	str	r0, [sp, #12]
   16806:	9102      	str	r1, [sp, #8]
   16808:	4613      	mov	r3, r2
   1680a:	f8ad 3006 	strh.w	r3, [sp, #6]
   1680e:	463b      	mov	r3, r7
   16810:	4619      	mov	r1, r3
   16812:	4837      	ldr	r0, [pc, #220]	; (168f0 <Sd::GetCrc16(unsigned char*, unsigned short)+0xf4>)
   16814:	f7fc fad2 	bl	12dbc <__cyg_profile_func_enter>
  {
    uint64_t crc = 0x0000;
   16818:	f04f 0300 	mov.w	r3, #0
   1681c:	f04f 0400 	mov.w	r4, #0
   16820:	e9cd 340a 	strd	r3, r4, [sp, #40]	; 0x28
    uint64_t temp;
    uint64_t final_value = 0;
   16824:	f04f 0300 	mov.w	r3, #0
   16828:	f04f 0400 	mov.w	r4, #0
   1682c:	e9cd 3406 	strd	r3, r4, [sp, #24]

    for (uint64_t count = 0; count < length; ++count)
   16830:	f04f 0300 	mov.w	r3, #0
   16834:	f04f 0400 	mov.w	r4, #0
   16838:	e9cd 3408 	strd	r3, r4, [sp, #32]
   1683c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   16840:	f04f 0400 	mov.w	r4, #0
   16844:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
   16848:	42a2      	cmp	r2, r4
   1684a:	bf08      	it	eq
   1684c:	4299      	cmpeq	r1, r3
   1684e:	d23f      	bcs.n	168d0 <Sd::GetCrc16(unsigned char*, unsigned short)+0xd4>
    {
      temp = (*message++ ^ (crc >> 8)) & 0xff;
   16850:	9b02      	ldr	r3, [sp, #8]
   16852:	1c5a      	adds	r2, r3, #1
   16854:	9202      	str	r2, [sp, #8]
   16856:	781b      	ldrb	r3, [r3, #0]
   16858:	b2dd      	uxtb	r5, r3
   1685a:	f04f 0600 	mov.w	r6, #0
   1685e:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
   16862:	f04f 0300 	mov.w	r3, #0
   16866:	f04f 0400 	mov.w	r4, #0
   1686a:	0a0b      	lsrs	r3, r1, #8
   1686c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
   16870:	0a14      	lsrs	r4, r2, #8
   16872:	ea83 0b05 	eor.w	fp, r3, r5
   16876:	ea84 0c06 	eor.w	ip, r4, r6
   1687a:	f04f 01ff 	mov.w	r1, #255	; 0xff
   1687e:	f04f 0200 	mov.w	r2, #0
   16882:	ea0b 0301 	and.w	r3, fp, r1
   16886:	ea0c 0402 	and.w	r4, ip, r2
   1688a:	e9cd 3404 	strd	r3, r4, [sp, #16]
      crc  = kCrcTable16.crc_table[temp] ^ (crc << 8);
   1688e:	4a19      	ldr	r2, [pc, #100]	; (168f4 <Sd::GetCrc16(unsigned char*, unsigned short)+0xf8>)
   16890:	9b04      	ldr	r3, [sp, #16]
   16892:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
   16896:	b29d      	uxth	r5, r3
   16898:	f04f 0600 	mov.w	r6, #0
   1689c:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
   168a0:	f04f 0b00 	mov.w	fp, #0
   168a4:	f04f 0c00 	mov.w	ip, #0
   168a8:	ea4f 2c02 	mov.w	ip, r2, lsl #8
   168ac:	ea4c 6c11 	orr.w	ip, ip, r1, lsr #24
   168b0:	ea4f 2b01 	mov.w	fp, r1, lsl #8
   168b4:	ea8b 0305 	eor.w	r3, fp, r5
   168b8:	ea8c 0406 	eor.w	r4, ip, r6
   168bc:	e9cd 340a 	strd	r3, r4, [sp, #40]	; 0x28
    for (uint64_t count = 0; count < length; ++count)
   168c0:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   168c4:	1c59      	adds	r1, r3, #1
   168c6:	f144 0200 	adc.w	r2, r4, #0
   168ca:	e9cd 1208 	strd	r1, r2, [sp, #32]
   168ce:	e7b5      	b.n	1683c <Sd::GetCrc16(unsigned char*, unsigned short)+0x40>
    }

    return static_cast<uint16_t>(crc ^ final_value);
   168d0:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
   168d4:	f8bd 3018 	ldrh.w	r3, [sp, #24]
   168d8:	4053      	eors	r3, r2
   168da:	b29c      	uxth	r4, r3
   168dc:	463b      	mov	r3, r7
   168de:	4619      	mov	r1, r3
   168e0:	4803      	ldr	r0, [pc, #12]	; (168f0 <Sd::GetCrc16(unsigned char*, unsigned short)+0xf4>)
   168e2:	f7fc fa7f 	bl	12de4 <__cyg_profile_func_exit>
   168e6:	4623      	mov	r3, r4
  }
   168e8:	4618      	mov	r0, r3
   168ea:	b00c      	add	sp, #48	; 0x30
   168ec:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
   168f0:	000167fd 	.word	0x000167fd
   168f4:	00018a48 	.word	0x00018a48

000168f8 <unsigned long bit::Set<unsigned long>(unsigned long, unsigned long)>:
constexpr T Set(T target, uint32_t position)
   168f8:	b530      	push	{r4, r5, lr}
   168fa:	b083      	sub	sp, #12
   168fc:	4675      	mov	r5, lr
   168fe:	9001      	str	r0, [sp, #4]
   16900:	9100      	str	r1, [sp, #0]
   16902:	462b      	mov	r3, r5
   16904:	4619      	mov	r1, r3
   16906:	480a      	ldr	r0, [pc, #40]	; (16930 <unsigned long bit::Set<unsigned long>(unsigned long, unsigned long)+0x38>)
   16908:	f7fc fa58 	bl	12dbc <__cyg_profile_func_enter>
  return target | (1 << position);
   1690c:	2201      	movs	r2, #1
   1690e:	9b00      	ldr	r3, [sp, #0]
   16910:	fa02 f303 	lsl.w	r3, r2, r3
   16914:	461a      	mov	r2, r3
   16916:	9b01      	ldr	r3, [sp, #4]
   16918:	ea42 0403 	orr.w	r4, r2, r3
   1691c:	462b      	mov	r3, r5
   1691e:	4619      	mov	r1, r3
   16920:	4803      	ldr	r0, [pc, #12]	; (16930 <unsigned long bit::Set<unsigned long>(unsigned long, unsigned long)+0x38>)
   16922:	f7fc fa5f 	bl	12de4 <__cyg_profile_func_exit>
   16926:	4623      	mov	r3, r4
}
   16928:	4618      	mov	r0, r3
   1692a:	b003      	add	sp, #12
   1692c:	bd30      	pop	{r4, r5, pc}
   1692e:	bf00      	nop
   16930:	000168f9 	.word	0x000168f9

00016934 <unsigned long bit::Insert<unsigned long, unsigned char>(unsigned long, unsigned char, unsigned long, unsigned long)>:
constexpr T Insert(T target, U value, uint32_t position, uint32_t width = 1)
   16934:	b530      	push	{r4, r5, lr}
   16936:	b089      	sub	sp, #36	; 0x24
   16938:	4675      	mov	r5, lr
   1693a:	9003      	str	r0, [sp, #12]
   1693c:	9201      	str	r2, [sp, #4]
   1693e:	9300      	str	r3, [sp, #0]
   16940:	460b      	mov	r3, r1
   16942:	f88d 300b 	strb.w	r3, [sp, #11]
   16946:	462b      	mov	r3, r5
   16948:	4619      	mov	r1, r3
   1694a:	4816      	ldr	r0, [pc, #88]	; (169a4 <unsigned long bit::Insert<unsigned long, unsigned char>(unsigned long, unsigned char, unsigned long, unsigned long)+0x70>)
   1694c:	f7fc fa36 	bl	12dbc <__cyg_profile_func_enter>
  constexpr UnsignedT kFieldOfOnes = GenerateFieldOfOnes<T>();
   16950:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   16954:	9307      	str	r3, [sp, #28]
  constexpr size_t kTargetWidth     = sizeof(T) * 8;
   16956:	2320      	movs	r3, #32
   16958:	9306      	str	r3, [sp, #24]
  UnsignedT mask   = kFieldOfOnes >> (kTargetWidth - width);
   1695a:	9b00      	ldr	r3, [sp, #0]
   1695c:	f1c3 0320 	rsb	r3, r3, #32
   16960:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   16964:	fa22 f303 	lsr.w	r3, r2, r3
   16968:	9305      	str	r3, [sp, #20]
  target &= ~(mask << position);
   1696a:	9a05      	ldr	r2, [sp, #20]
   1696c:	9b01      	ldr	r3, [sp, #4]
   1696e:	fa02 f303 	lsl.w	r3, r2, r3
   16972:	43db      	mvns	r3, r3
   16974:	9a03      	ldr	r2, [sp, #12]
   16976:	4013      	ands	r3, r2
   16978:	9303      	str	r3, [sp, #12]
  target |= (value & mask) << position;
   1697a:	f89d 200b 	ldrb.w	r2, [sp, #11]
   1697e:	9b05      	ldr	r3, [sp, #20]
   16980:	401a      	ands	r2, r3
   16982:	9b01      	ldr	r3, [sp, #4]
   16984:	fa02 f303 	lsl.w	r3, r2, r3
   16988:	9a03      	ldr	r2, [sp, #12]
   1698a:	4313      	orrs	r3, r2
   1698c:	9303      	str	r3, [sp, #12]
  return target;
   1698e:	9c03      	ldr	r4, [sp, #12]
   16990:	462b      	mov	r3, r5
   16992:	4619      	mov	r1, r3
   16994:	4803      	ldr	r0, [pc, #12]	; (169a4 <unsigned long bit::Insert<unsigned long, unsigned char>(unsigned long, unsigned char, unsigned long, unsigned long)+0x70>)
   16996:	f7fc fa25 	bl	12de4 <__cyg_profile_func_exit>
   1699a:	4623      	mov	r3, r4
}
   1699c:	4618      	mov	r0, r3
   1699e:	b009      	add	sp, #36	; 0x24
   169a0:	bd30      	pop	{r4, r5, pc}
   169a2:	bf00      	nop
   169a4:	00016935 	.word	0x00016935

000169a8 <unsigned long bit::Extract<unsigned long>(unsigned long, unsigned long, unsigned long)>:
constexpr T Extract(T target, uint32_t position, uint32_t width = 1)
   169a8:	b530      	push	{r4, r5, lr}
   169aa:	b089      	sub	sp, #36	; 0x24
   169ac:	4675      	mov	r5, lr
   169ae:	9003      	str	r0, [sp, #12]
   169b0:	9102      	str	r1, [sp, #8]
   169b2:	9201      	str	r2, [sp, #4]
   169b4:	462b      	mov	r3, r5
   169b6:	4619      	mov	r1, r3
   169b8:	480f      	ldr	r0, [pc, #60]	; (169f8 <unsigned long bit::Extract<unsigned long>(unsigned long, unsigned long, unsigned long)+0x50>)
   169ba:	f7fc f9ff 	bl	12dbc <__cyg_profile_func_enter>
  constexpr UnsignedT kFieldOfOnes = GenerateFieldOfOnes<T>();
   169be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   169c2:	9307      	str	r3, [sp, #28]
  constexpr size_t kTargetWidth     = sizeof(T) * 8;
   169c4:	2320      	movs	r3, #32
   169c6:	9306      	str	r3, [sp, #24]
  UnsignedT mask   = kFieldOfOnes >> (kTargetWidth - width);
   169c8:	9b01      	ldr	r3, [sp, #4]
   169ca:	f1c3 0320 	rsb	r3, r3, #32
   169ce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   169d2:	fa22 f303 	lsr.w	r3, r2, r3
   169d6:	9305      	str	r3, [sp, #20]
  return (target >> position) & mask;
   169d8:	9a03      	ldr	r2, [sp, #12]
   169da:	9b02      	ldr	r3, [sp, #8]
   169dc:	40da      	lsrs	r2, r3
   169de:	9b05      	ldr	r3, [sp, #20]
   169e0:	ea02 0403 	and.w	r4, r2, r3
   169e4:	462b      	mov	r3, r5
   169e6:	4619      	mov	r1, r3
   169e8:	4803      	ldr	r0, [pc, #12]	; (169f8 <unsigned long bit::Extract<unsigned long>(unsigned long, unsigned long, unsigned long)+0x50>)
   169ea:	f7fc f9fb 	bl	12de4 <__cyg_profile_func_exit>
   169ee:	4623      	mov	r3, r4
}
   169f0:	4618      	mov	r0, r3
   169f2:	b009      	add	sp, #36	; 0x24
   169f4:	bd30      	pop	{r4, r5, pc}
   169f6:	bf00      	nop
   169f8:	000169a9 	.word	0x000169a9

000169fc <unsigned long bit::Insert<unsigned long, bool>(unsigned long, bool, unsigned long, unsigned long)>:
constexpr T Insert(T target, U value, uint32_t position, uint32_t width = 1)
   169fc:	b530      	push	{r4, r5, lr}
   169fe:	b089      	sub	sp, #36	; 0x24
   16a00:	4675      	mov	r5, lr
   16a02:	9003      	str	r0, [sp, #12]
   16a04:	9201      	str	r2, [sp, #4]
   16a06:	9300      	str	r3, [sp, #0]
   16a08:	460b      	mov	r3, r1
   16a0a:	f88d 300b 	strb.w	r3, [sp, #11]
   16a0e:	462b      	mov	r3, r5
   16a10:	4619      	mov	r1, r3
   16a12:	4816      	ldr	r0, [pc, #88]	; (16a6c <unsigned long bit::Insert<unsigned long, bool>(unsigned long, bool, unsigned long, unsigned long)+0x70>)
   16a14:	f7fc f9d2 	bl	12dbc <__cyg_profile_func_enter>
  constexpr UnsignedT kFieldOfOnes = GenerateFieldOfOnes<T>();
   16a18:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   16a1c:	9307      	str	r3, [sp, #28]
  constexpr size_t kTargetWidth     = sizeof(T) * 8;
   16a1e:	2320      	movs	r3, #32
   16a20:	9306      	str	r3, [sp, #24]
  UnsignedT mask   = kFieldOfOnes >> (kTargetWidth - width);
   16a22:	9b00      	ldr	r3, [sp, #0]
   16a24:	f1c3 0320 	rsb	r3, r3, #32
   16a28:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   16a2c:	fa22 f303 	lsr.w	r3, r2, r3
   16a30:	9305      	str	r3, [sp, #20]
  target &= ~(mask << position);
   16a32:	9a05      	ldr	r2, [sp, #20]
   16a34:	9b01      	ldr	r3, [sp, #4]
   16a36:	fa02 f303 	lsl.w	r3, r2, r3
   16a3a:	43db      	mvns	r3, r3
   16a3c:	9a03      	ldr	r2, [sp, #12]
   16a3e:	4013      	ands	r3, r2
   16a40:	9303      	str	r3, [sp, #12]
  target |= (value & mask) << position;
   16a42:	f89d 200b 	ldrb.w	r2, [sp, #11]
   16a46:	9b05      	ldr	r3, [sp, #20]
   16a48:	401a      	ands	r2, r3
   16a4a:	9b01      	ldr	r3, [sp, #4]
   16a4c:	fa02 f303 	lsl.w	r3, r2, r3
   16a50:	9a03      	ldr	r2, [sp, #12]
   16a52:	4313      	orrs	r3, r2
   16a54:	9303      	str	r3, [sp, #12]
  return target;
   16a56:	9c03      	ldr	r4, [sp, #12]
   16a58:	462b      	mov	r3, r5
   16a5a:	4619      	mov	r1, r3
   16a5c:	4803      	ldr	r0, [pc, #12]	; (16a6c <unsigned long bit::Insert<unsigned long, bool>(unsigned long, bool, unsigned long, unsigned long)+0x70>)
   16a5e:	f7fc f9c1 	bl	12de4 <__cyg_profile_func_exit>
   16a62:	4623      	mov	r3, r4
}
   16a64:	4618      	mov	r0, r3
   16a66:	b009      	add	sp, #36	; 0x24
   16a68:	bd30      	pop	{r4, r5, pc}
   16a6a:	bf00      	nop
   16a6c:	000169fd 	.word	0x000169fd

00016a70 <__static_initialization_and_destruction_0(int, int)>:
extern "C" DRESULT disk_ioctl([[maybe_unused]] BYTE drive_number,
                              [[maybe_unused]] BYTE command,
                              [[maybe_unused]] void * buffer)
{
  return RES_PARERR;
}
   16a70:	b530      	push	{r4, r5, lr}
   16a72:	b085      	sub	sp, #20
   16a74:	4674      	mov	r4, lr
   16a76:	9003      	str	r0, [sp, #12]
   16a78:	9102      	str	r1, [sp, #8]
   16a7a:	4623      	mov	r3, r4
   16a7c:	4619      	mov	r1, r3
   16a7e:	480e      	ldr	r0, [pc, #56]	; (16ab8 <__static_initialization_and_destruction_0(int, int)+0x48>)
   16a80:	f7fc f99c 	bl	12dbc <__cyg_profile_func_enter>
   16a84:	9b03      	ldr	r3, [sp, #12]
   16a86:	2b01      	cmp	r3, #1
   16a88:	d10e      	bne.n	16aa8 <__static_initialization_and_destruction_0(int, int)+0x38>
   16a8a:	9b02      	ldr	r3, [sp, #8]
   16a8c:	f64f 72ff 	movw	r2, #65535	; 0xffff
   16a90:	4293      	cmp	r3, r2
   16a92:	d109      	bne.n	16aa8 <__static_initialization_and_destruction_0(int, int)+0x38>
Sd sd_card(Sd::DebugSdCard_t{});
   16a94:	2306      	movs	r3, #6
   16a96:	9301      	str	r3, [sp, #4]
   16a98:	2300      	movs	r3, #0
   16a9a:	9300      	str	r3, [sp, #0]
   16a9c:	2308      	movs	r3, #8
   16a9e:	2201      	movs	r2, #1
   16aa0:	4629      	mov	r1, r5
   16aa2:	4806      	ldr	r0, [pc, #24]	; (16abc <__static_initialization_and_destruction_0(int, int)+0x4c>)
   16aa4:	f7fe fdda 	bl	1565c <Sd::Sd(Sd::DebugSdCard_t, unsigned char, unsigned char, unsigned char, unsigned char)>
   16aa8:	4623      	mov	r3, r4
   16aaa:	4619      	mov	r1, r3
   16aac:	4802      	ldr	r0, [pc, #8]	; (16ab8 <__static_initialization_and_destruction_0(int, int)+0x48>)
   16aae:	f7fc f999 	bl	12de4 <__cyg_profile_func_exit>
}
   16ab2:	bf00      	nop
   16ab4:	b005      	add	sp, #20
   16ab6:	bd30      	pop	{r4, r5, pc}
   16ab8:	00016a71 	.word	0x00016a71
   16abc:	10000558 	.word	0x10000558

00016ac0 <_GLOBAL__sub_I_disk_status>:
   16ac0:	b510      	push	{r4, lr}
   16ac2:	4674      	mov	r4, lr
   16ac4:	4623      	mov	r3, r4
   16ac6:	4619      	mov	r1, r3
   16ac8:	4806      	ldr	r0, [pc, #24]	; (16ae4 <_GLOBAL__sub_I_disk_status+0x24>)
   16aca:	f7fc f977 	bl	12dbc <__cyg_profile_func_enter>
   16ace:	f64f 71ff 	movw	r1, #65535	; 0xffff
   16ad2:	2001      	movs	r0, #1
   16ad4:	f7ff ffcc 	bl	16a70 <__static_initialization_and_destruction_0(int, int)>
   16ad8:	4623      	mov	r3, r4
   16ada:	4619      	mov	r1, r3
   16adc:	4801      	ldr	r0, [pc, #4]	; (16ae4 <_GLOBAL__sub_I_disk_status+0x24>)
   16ade:	f7fc f981 	bl	12de4 <__cyg_profile_func_exit>
   16ae2:	bd10      	pop	{r4, pc}
   16ae4:	00016ac1 	.word	0x00016ac1

00016ae8 <__cxa_pure_virtual>:
   16ae8:	b508      	push	{r3, lr}
   16aea:	f000 f80d 	bl	16b08 <std::terminate()>

00016aee <__cxxabiv1::__terminate(void (*)())>:
   16aee:	b508      	push	{r3, lr}
   16af0:	4780      	blx	r0
   16af2:	f000 fa0f 	bl	16f14 <abort>
   16af6:	Address 0x0000000000016af6 is out of bounds.


00016af8 <std::get_terminate()>:
   16af8:	4b02      	ldr	r3, [pc, #8]	; (16b04 <std::get_terminate()+0xc>)
   16afa:	6818      	ldr	r0, [r3, #0]
   16afc:	f3bf 8f5b 	dmb	ish
   16b00:	4770      	bx	lr
   16b02:	bf00      	nop
   16b04:	100001ec 	.word	0x100001ec

00016b08 <std::terminate()>:
   16b08:	b508      	push	{r3, lr}
   16b0a:	f7ff fff5 	bl	16af8 <std::get_terminate()>
   16b0e:	f7ff ffee 	bl	16aee <__cxxabiv1::__terminate(void (*)())>
   16b12:	Address 0x0000000000016b12 is out of bounds.


00016b14 <roundf>:
   16b14:	b082      	sub	sp, #8
   16b16:	ed8d 0a01 	vstr	s0, [sp, #4]
   16b1a:	9901      	ldr	r1, [sp, #4]
   16b1c:	f3c1 53c7 	ubfx	r3, r1, #23, #8
   16b20:	f1a3 027f 	sub.w	r2, r3, #127	; 0x7f
   16b24:	2a16      	cmp	r2, #22
   16b26:	dc0c      	bgt.n	16b42 <roundf+0x2e>
   16b28:	2a00      	cmp	r2, #0
   16b2a:	db10      	blt.n	16b4e <roundf+0x3a>
   16b2c:	4810      	ldr	r0, [pc, #64]	; (16b70 <roundf+0x5c>)
   16b2e:	4110      	asrs	r0, r2
   16b30:	4201      	tst	r1, r0
   16b32:	d008      	beq.n	16b46 <roundf+0x32>
   16b34:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   16b38:	4113      	asrs	r3, r2
   16b3a:	440b      	add	r3, r1
   16b3c:	ea23 0300 	bic.w	r3, r3, r0
   16b40:	e00b      	b.n	16b5a <roundf+0x46>
   16b42:	2a80      	cmp	r2, #128	; 0x80
   16b44:	d00d      	beq.n	16b62 <roundf+0x4e>
   16b46:	ed9d 0a01 	vldr	s0, [sp, #4]
   16b4a:	b002      	add	sp, #8
   16b4c:	4770      	bx	lr
   16b4e:	3201      	adds	r2, #1
   16b50:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
   16b54:	d101      	bne.n	16b5a <roundf+0x46>
   16b56:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
   16b5a:	ee00 3a10 	vmov	s0, r3
   16b5e:	b002      	add	sp, #8
   16b60:	4770      	bx	lr
   16b62:	eddd 7a01 	vldr	s15, [sp, #4]
   16b66:	ee37 0aa7 	vadd.f32	s0, s15, s15
   16b6a:	b002      	add	sp, #8
   16b6c:	4770      	bx	lr
   16b6e:	bf00      	nop
   16b70:	007fffff 	.word	0x007fffff

00016b74 <__aeabi_d2f>:
   16b74:	ea4f 0241 	mov.w	r2, r1, lsl #1
   16b78:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   16b7c:	bf24      	itt	cs
   16b7e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   16b82:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   16b86:	d90d      	bls.n	16ba4 <__aeabi_d2f+0x30>
   16b88:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   16b8c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   16b90:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   16b94:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   16b98:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   16b9c:	bf08      	it	eq
   16b9e:	f020 0001 	biceq.w	r0, r0, #1
   16ba2:	4770      	bx	lr
   16ba4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   16ba8:	d121      	bne.n	16bee <__aeabi_d2f+0x7a>
   16baa:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   16bae:	bfbc      	itt	lt
   16bb0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   16bb4:	4770      	bxlt	lr
   16bb6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   16bba:	ea4f 5252 	mov.w	r2, r2, lsr #21
   16bbe:	f1c2 0218 	rsb	r2, r2, #24
   16bc2:	f1c2 0c20 	rsb	ip, r2, #32
   16bc6:	fa10 f30c 	lsls.w	r3, r0, ip
   16bca:	fa20 f002 	lsr.w	r0, r0, r2
   16bce:	bf18      	it	ne
   16bd0:	f040 0001 	orrne.w	r0, r0, #1
   16bd4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   16bd8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   16bdc:	fa03 fc0c 	lsl.w	ip, r3, ip
   16be0:	ea40 000c 	orr.w	r0, r0, ip
   16be4:	fa23 f302 	lsr.w	r3, r3, r2
   16be8:	ea4f 0343 	mov.w	r3, r3, lsl #1
   16bec:	e7cc      	b.n	16b88 <__aeabi_d2f+0x14>
   16bee:	ea7f 5362 	mvns.w	r3, r2, asr #21
   16bf2:	d107      	bne.n	16c04 <__aeabi_d2f+0x90>
   16bf4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   16bf8:	bf1e      	ittt	ne
   16bfa:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   16bfe:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   16c02:	4770      	bxne	lr
   16c04:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   16c08:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   16c0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   16c10:	4770      	bx	lr
   16c12:	bf00      	nop

00016c14 <__aeabi_uldivmod>:
   16c14:	b953      	cbnz	r3, 16c2c <__aeabi_uldivmod+0x18>
   16c16:	b94a      	cbnz	r2, 16c2c <__aeabi_uldivmod+0x18>
   16c18:	2900      	cmp	r1, #0
   16c1a:	bf08      	it	eq
   16c1c:	2800      	cmpeq	r0, #0
   16c1e:	bf1c      	itt	ne
   16c20:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
   16c24:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   16c28:	f000 b972 	b.w	16f10 <__aeabi_idiv0>
   16c2c:	f1ad 0c08 	sub.w	ip, sp, #8
   16c30:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   16c34:	f000 f806 	bl	16c44 <__udivmoddi4>
   16c38:	f8dd e004 	ldr.w	lr, [sp, #4]
   16c3c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   16c40:	b004      	add	sp, #16
   16c42:	4770      	bx	lr

00016c44 <__udivmoddi4>:
   16c44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16c48:	9e08      	ldr	r6, [sp, #32]
   16c4a:	4604      	mov	r4, r0
   16c4c:	4688      	mov	r8, r1
   16c4e:	2b00      	cmp	r3, #0
   16c50:	d14b      	bne.n	16cea <__udivmoddi4+0xa6>
   16c52:	428a      	cmp	r2, r1
   16c54:	4615      	mov	r5, r2
   16c56:	d967      	bls.n	16d28 <__udivmoddi4+0xe4>
   16c58:	fab2 f282 	clz	r2, r2
   16c5c:	b14a      	cbz	r2, 16c72 <__udivmoddi4+0x2e>
   16c5e:	f1c2 0720 	rsb	r7, r2, #32
   16c62:	fa01 f302 	lsl.w	r3, r1, r2
   16c66:	fa20 f707 	lsr.w	r7, r0, r7
   16c6a:	4095      	lsls	r5, r2
   16c6c:	ea47 0803 	orr.w	r8, r7, r3
   16c70:	4094      	lsls	r4, r2
   16c72:	ea4f 4e15 	mov.w	lr, r5, lsr #16
   16c76:	0c23      	lsrs	r3, r4, #16
   16c78:	fbb8 f7fe 	udiv	r7, r8, lr
   16c7c:	fa1f fc85 	uxth.w	ip, r5
   16c80:	fb0e 8817 	mls	r8, lr, r7, r8
   16c84:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
   16c88:	fb07 f10c 	mul.w	r1, r7, ip
   16c8c:	4299      	cmp	r1, r3
   16c8e:	d909      	bls.n	16ca4 <__udivmoddi4+0x60>
   16c90:	18eb      	adds	r3, r5, r3
   16c92:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
   16c96:	f080 811b 	bcs.w	16ed0 <__udivmoddi4+0x28c>
   16c9a:	4299      	cmp	r1, r3
   16c9c:	f240 8118 	bls.w	16ed0 <__udivmoddi4+0x28c>
   16ca0:	3f02      	subs	r7, #2
   16ca2:	442b      	add	r3, r5
   16ca4:	1a5b      	subs	r3, r3, r1
   16ca6:	b2a4      	uxth	r4, r4
   16ca8:	fbb3 f0fe 	udiv	r0, r3, lr
   16cac:	fb0e 3310 	mls	r3, lr, r0, r3
   16cb0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
   16cb4:	fb00 fc0c 	mul.w	ip, r0, ip
   16cb8:	45a4      	cmp	ip, r4
   16cba:	d909      	bls.n	16cd0 <__udivmoddi4+0x8c>
   16cbc:	192c      	adds	r4, r5, r4
   16cbe:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   16cc2:	f080 8107 	bcs.w	16ed4 <__udivmoddi4+0x290>
   16cc6:	45a4      	cmp	ip, r4
   16cc8:	f240 8104 	bls.w	16ed4 <__udivmoddi4+0x290>
   16ccc:	3802      	subs	r0, #2
   16cce:	442c      	add	r4, r5
   16cd0:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
   16cd4:	eba4 040c 	sub.w	r4, r4, ip
   16cd8:	2700      	movs	r7, #0
   16cda:	b11e      	cbz	r6, 16ce4 <__udivmoddi4+0xa0>
   16cdc:	40d4      	lsrs	r4, r2
   16cde:	2300      	movs	r3, #0
   16ce0:	e9c6 4300 	strd	r4, r3, [r6]
   16ce4:	4639      	mov	r1, r7
   16ce6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   16cea:	428b      	cmp	r3, r1
   16cec:	d909      	bls.n	16d02 <__udivmoddi4+0xbe>
   16cee:	2e00      	cmp	r6, #0
   16cf0:	f000 80eb 	beq.w	16eca <__udivmoddi4+0x286>
   16cf4:	2700      	movs	r7, #0
   16cf6:	e9c6 0100 	strd	r0, r1, [r6]
   16cfa:	4638      	mov	r0, r7
   16cfc:	4639      	mov	r1, r7
   16cfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   16d02:	fab3 f783 	clz	r7, r3
   16d06:	2f00      	cmp	r7, #0
   16d08:	d147      	bne.n	16d9a <__udivmoddi4+0x156>
   16d0a:	428b      	cmp	r3, r1
   16d0c:	d302      	bcc.n	16d14 <__udivmoddi4+0xd0>
   16d0e:	4282      	cmp	r2, r0
   16d10:	f200 80fa 	bhi.w	16f08 <__udivmoddi4+0x2c4>
   16d14:	1a84      	subs	r4, r0, r2
   16d16:	eb61 0303 	sbc.w	r3, r1, r3
   16d1a:	2001      	movs	r0, #1
   16d1c:	4698      	mov	r8, r3
   16d1e:	2e00      	cmp	r6, #0
   16d20:	d0e0      	beq.n	16ce4 <__udivmoddi4+0xa0>
   16d22:	e9c6 4800 	strd	r4, r8, [r6]
   16d26:	e7dd      	b.n	16ce4 <__udivmoddi4+0xa0>
   16d28:	b902      	cbnz	r2, 16d2c <__udivmoddi4+0xe8>
   16d2a:	deff      	udf	#255	; 0xff
   16d2c:	fab2 f282 	clz	r2, r2
   16d30:	2a00      	cmp	r2, #0
   16d32:	f040 808f 	bne.w	16e54 <__udivmoddi4+0x210>
   16d36:	1b49      	subs	r1, r1, r5
   16d38:	ea4f 4e15 	mov.w	lr, r5, lsr #16
   16d3c:	fa1f f885 	uxth.w	r8, r5
   16d40:	2701      	movs	r7, #1
   16d42:	fbb1 fcfe 	udiv	ip, r1, lr
   16d46:	0c23      	lsrs	r3, r4, #16
   16d48:	fb0e 111c 	mls	r1, lr, ip, r1
   16d4c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   16d50:	fb08 f10c 	mul.w	r1, r8, ip
   16d54:	4299      	cmp	r1, r3
   16d56:	d907      	bls.n	16d68 <__udivmoddi4+0x124>
   16d58:	18eb      	adds	r3, r5, r3
   16d5a:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
   16d5e:	d202      	bcs.n	16d66 <__udivmoddi4+0x122>
   16d60:	4299      	cmp	r1, r3
   16d62:	f200 80cd 	bhi.w	16f00 <__udivmoddi4+0x2bc>
   16d66:	4684      	mov	ip, r0
   16d68:	1a59      	subs	r1, r3, r1
   16d6a:	b2a3      	uxth	r3, r4
   16d6c:	fbb1 f0fe 	udiv	r0, r1, lr
   16d70:	fb0e 1410 	mls	r4, lr, r0, r1
   16d74:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
   16d78:	fb08 f800 	mul.w	r8, r8, r0
   16d7c:	45a0      	cmp	r8, r4
   16d7e:	d907      	bls.n	16d90 <__udivmoddi4+0x14c>
   16d80:	192c      	adds	r4, r5, r4
   16d82:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   16d86:	d202      	bcs.n	16d8e <__udivmoddi4+0x14a>
   16d88:	45a0      	cmp	r8, r4
   16d8a:	f200 80b6 	bhi.w	16efa <__udivmoddi4+0x2b6>
   16d8e:	4618      	mov	r0, r3
   16d90:	eba4 0408 	sub.w	r4, r4, r8
   16d94:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
   16d98:	e79f      	b.n	16cda <__udivmoddi4+0x96>
   16d9a:	f1c7 0c20 	rsb	ip, r7, #32
   16d9e:	40bb      	lsls	r3, r7
   16da0:	fa22 fe0c 	lsr.w	lr, r2, ip
   16da4:	ea4e 0e03 	orr.w	lr, lr, r3
   16da8:	fa01 f407 	lsl.w	r4, r1, r7
   16dac:	fa20 f50c 	lsr.w	r5, r0, ip
   16db0:	fa21 f30c 	lsr.w	r3, r1, ip
   16db4:	ea4f 481e 	mov.w	r8, lr, lsr #16
   16db8:	4325      	orrs	r5, r4
   16dba:	fbb3 f9f8 	udiv	r9, r3, r8
   16dbe:	0c2c      	lsrs	r4, r5, #16
   16dc0:	fb08 3319 	mls	r3, r8, r9, r3
   16dc4:	fa1f fa8e 	uxth.w	sl, lr
   16dc8:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
   16dcc:	fb09 f40a 	mul.w	r4, r9, sl
   16dd0:	429c      	cmp	r4, r3
   16dd2:	fa02 f207 	lsl.w	r2, r2, r7
   16dd6:	fa00 f107 	lsl.w	r1, r0, r7
   16dda:	d90b      	bls.n	16df4 <__udivmoddi4+0x1b0>
   16ddc:	eb1e 0303 	adds.w	r3, lr, r3
   16de0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
   16de4:	f080 8087 	bcs.w	16ef6 <__udivmoddi4+0x2b2>
   16de8:	429c      	cmp	r4, r3
   16dea:	f240 8084 	bls.w	16ef6 <__udivmoddi4+0x2b2>
   16dee:	f1a9 0902 	sub.w	r9, r9, #2
   16df2:	4473      	add	r3, lr
   16df4:	1b1b      	subs	r3, r3, r4
   16df6:	b2ad      	uxth	r5, r5
   16df8:	fbb3 f0f8 	udiv	r0, r3, r8
   16dfc:	fb08 3310 	mls	r3, r8, r0, r3
   16e00:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
   16e04:	fb00 fa0a 	mul.w	sl, r0, sl
   16e08:	45a2      	cmp	sl, r4
   16e0a:	d908      	bls.n	16e1e <__udivmoddi4+0x1da>
   16e0c:	eb1e 0404 	adds.w	r4, lr, r4
   16e10:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   16e14:	d26b      	bcs.n	16eee <__udivmoddi4+0x2aa>
   16e16:	45a2      	cmp	sl, r4
   16e18:	d969      	bls.n	16eee <__udivmoddi4+0x2aa>
   16e1a:	3802      	subs	r0, #2
   16e1c:	4474      	add	r4, lr
   16e1e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   16e22:	fba0 8902 	umull	r8, r9, r0, r2
   16e26:	eba4 040a 	sub.w	r4, r4, sl
   16e2a:	454c      	cmp	r4, r9
   16e2c:	46c2      	mov	sl, r8
   16e2e:	464b      	mov	r3, r9
   16e30:	d354      	bcc.n	16edc <__udivmoddi4+0x298>
   16e32:	d051      	beq.n	16ed8 <__udivmoddi4+0x294>
   16e34:	2e00      	cmp	r6, #0
   16e36:	d069      	beq.n	16f0c <__udivmoddi4+0x2c8>
   16e38:	ebb1 050a 	subs.w	r5, r1, sl
   16e3c:	eb64 0403 	sbc.w	r4, r4, r3
   16e40:	fa04 fc0c 	lsl.w	ip, r4, ip
   16e44:	40fd      	lsrs	r5, r7
   16e46:	40fc      	lsrs	r4, r7
   16e48:	ea4c 0505 	orr.w	r5, ip, r5
   16e4c:	e9c6 5400 	strd	r5, r4, [r6]
   16e50:	2700      	movs	r7, #0
   16e52:	e747      	b.n	16ce4 <__udivmoddi4+0xa0>
   16e54:	f1c2 0320 	rsb	r3, r2, #32
   16e58:	fa20 f703 	lsr.w	r7, r0, r3
   16e5c:	4095      	lsls	r5, r2
   16e5e:	fa01 f002 	lsl.w	r0, r1, r2
   16e62:	fa21 f303 	lsr.w	r3, r1, r3
   16e66:	ea4f 4e15 	mov.w	lr, r5, lsr #16
   16e6a:	4338      	orrs	r0, r7
   16e6c:	0c01      	lsrs	r1, r0, #16
   16e6e:	fbb3 f7fe 	udiv	r7, r3, lr
   16e72:	fa1f f885 	uxth.w	r8, r5
   16e76:	fb0e 3317 	mls	r3, lr, r7, r3
   16e7a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   16e7e:	fb07 f308 	mul.w	r3, r7, r8
   16e82:	428b      	cmp	r3, r1
   16e84:	fa04 f402 	lsl.w	r4, r4, r2
   16e88:	d907      	bls.n	16e9a <__udivmoddi4+0x256>
   16e8a:	1869      	adds	r1, r5, r1
   16e8c:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
   16e90:	d22f      	bcs.n	16ef2 <__udivmoddi4+0x2ae>
   16e92:	428b      	cmp	r3, r1
   16e94:	d92d      	bls.n	16ef2 <__udivmoddi4+0x2ae>
   16e96:	3f02      	subs	r7, #2
   16e98:	4429      	add	r1, r5
   16e9a:	1acb      	subs	r3, r1, r3
   16e9c:	b281      	uxth	r1, r0
   16e9e:	fbb3 f0fe 	udiv	r0, r3, lr
   16ea2:	fb0e 3310 	mls	r3, lr, r0, r3
   16ea6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   16eaa:	fb00 f308 	mul.w	r3, r0, r8
   16eae:	428b      	cmp	r3, r1
   16eb0:	d907      	bls.n	16ec2 <__udivmoddi4+0x27e>
   16eb2:	1869      	adds	r1, r5, r1
   16eb4:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
   16eb8:	d217      	bcs.n	16eea <__udivmoddi4+0x2a6>
   16eba:	428b      	cmp	r3, r1
   16ebc:	d915      	bls.n	16eea <__udivmoddi4+0x2a6>
   16ebe:	3802      	subs	r0, #2
   16ec0:	4429      	add	r1, r5
   16ec2:	1ac9      	subs	r1, r1, r3
   16ec4:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
   16ec8:	e73b      	b.n	16d42 <__udivmoddi4+0xfe>
   16eca:	4637      	mov	r7, r6
   16ecc:	4630      	mov	r0, r6
   16ece:	e709      	b.n	16ce4 <__udivmoddi4+0xa0>
   16ed0:	4607      	mov	r7, r0
   16ed2:	e6e7      	b.n	16ca4 <__udivmoddi4+0x60>
   16ed4:	4618      	mov	r0, r3
   16ed6:	e6fb      	b.n	16cd0 <__udivmoddi4+0x8c>
   16ed8:	4541      	cmp	r1, r8
   16eda:	d2ab      	bcs.n	16e34 <__udivmoddi4+0x1f0>
   16edc:	ebb8 0a02 	subs.w	sl, r8, r2
   16ee0:	eb69 020e 	sbc.w	r2, r9, lr
   16ee4:	3801      	subs	r0, #1
   16ee6:	4613      	mov	r3, r2
   16ee8:	e7a4      	b.n	16e34 <__udivmoddi4+0x1f0>
   16eea:	4660      	mov	r0, ip
   16eec:	e7e9      	b.n	16ec2 <__udivmoddi4+0x27e>
   16eee:	4618      	mov	r0, r3
   16ef0:	e795      	b.n	16e1e <__udivmoddi4+0x1da>
   16ef2:	4667      	mov	r7, ip
   16ef4:	e7d1      	b.n	16e9a <__udivmoddi4+0x256>
   16ef6:	4681      	mov	r9, r0
   16ef8:	e77c      	b.n	16df4 <__udivmoddi4+0x1b0>
   16efa:	3802      	subs	r0, #2
   16efc:	442c      	add	r4, r5
   16efe:	e747      	b.n	16d90 <__udivmoddi4+0x14c>
   16f00:	f1ac 0c02 	sub.w	ip, ip, #2
   16f04:	442b      	add	r3, r5
   16f06:	e72f      	b.n	16d68 <__udivmoddi4+0x124>
   16f08:	4638      	mov	r0, r7
   16f0a:	e708      	b.n	16d1e <__udivmoddi4+0xda>
   16f0c:	4637      	mov	r7, r6
   16f0e:	e6e9      	b.n	16ce4 <__udivmoddi4+0xa0>

00016f10 <__aeabi_idiv0>:
   16f10:	4770      	bx	lr
   16f12:	bf00      	nop

00016f14 <abort>:
   16f14:	b508      	push	{r3, lr}
   16f16:	2006      	movs	r0, #6
   16f18:	f000 f858 	bl	16fcc <raise>
   16f1c:	2001      	movs	r0, #1
   16f1e:	f7fb fead 	bl	12c7c <_exit>
   16f22:	Address 0x0000000000016f22 is out of bounds.


00016f24 <__libc_init_array>:
   16f24:	b570      	push	{r4, r5, r6, lr}
   16f26:	4e0d      	ldr	r6, [pc, #52]	; (16f5c <__libc_init_array+0x38>)
   16f28:	4c0d      	ldr	r4, [pc, #52]	; (16f60 <__libc_init_array+0x3c>)
   16f2a:	1ba4      	subs	r4, r4, r6
   16f2c:	10a4      	asrs	r4, r4, #2
   16f2e:	2500      	movs	r5, #0
   16f30:	42a5      	cmp	r5, r4
   16f32:	d109      	bne.n	16f48 <__libc_init_array+0x24>
   16f34:	4e0b      	ldr	r6, [pc, #44]	; (16f64 <__libc_init_array+0x40>)
   16f36:	4c0c      	ldr	r4, [pc, #48]	; (16f68 <__libc_init_array+0x44>)
   16f38:	f7f9 f9e2 	bl	10300 <_init>
   16f3c:	1ba4      	subs	r4, r4, r6
   16f3e:	10a4      	asrs	r4, r4, #2
   16f40:	2500      	movs	r5, #0
   16f42:	42a5      	cmp	r5, r4
   16f44:	d105      	bne.n	16f52 <__libc_init_array+0x2e>
   16f46:	bd70      	pop	{r4, r5, r6, pc}
   16f48:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   16f4c:	4798      	blx	r3
   16f4e:	3501      	adds	r5, #1
   16f50:	e7ee      	b.n	16f30 <__libc_init_array+0xc>
   16f52:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   16f56:	4798      	blx	r3
   16f58:	3501      	adds	r5, #1
   16f5a:	e7f2      	b.n	16f42 <__libc_init_array+0x1e>
   16f5c:	0001030c 	.word	0x0001030c
   16f60:	0001030c 	.word	0x0001030c
   16f64:	0001030c 	.word	0x0001030c
   16f68:	00010318 	.word	0x00010318

00016f6c <memset>:
   16f6c:	4402      	add	r2, r0
   16f6e:	4603      	mov	r3, r0
   16f70:	4293      	cmp	r3, r2
   16f72:	d100      	bne.n	16f76 <memset+0xa>
   16f74:	4770      	bx	lr
   16f76:	f803 1b01 	strb.w	r1, [r3], #1
   16f7a:	e7f9      	b.n	16f70 <memset+0x4>

00016f7c <_raise_r>:
   16f7c:	291f      	cmp	r1, #31
   16f7e:	b538      	push	{r3, r4, r5, lr}
   16f80:	4604      	mov	r4, r0
   16f82:	460d      	mov	r5, r1
   16f84:	d904      	bls.n	16f90 <_raise_r+0x14>
   16f86:	2316      	movs	r3, #22
   16f88:	6003      	str	r3, [r0, #0]
   16f8a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   16f8e:	bd38      	pop	{r3, r4, r5, pc}
   16f90:	6c42      	ldr	r2, [r0, #68]	; 0x44
   16f92:	b112      	cbz	r2, 16f9a <_raise_r+0x1e>
   16f94:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
   16f98:	b94b      	cbnz	r3, 16fae <_raise_r+0x32>
   16f9a:	4620      	mov	r0, r4
   16f9c:	f000 f830 	bl	17000 <_getpid_r>
   16fa0:	462a      	mov	r2, r5
   16fa2:	4601      	mov	r1, r0
   16fa4:	4620      	mov	r0, r4
   16fa6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   16faa:	f000 b817 	b.w	16fdc <_kill_r>
   16fae:	2b01      	cmp	r3, #1
   16fb0:	d00a      	beq.n	16fc8 <_raise_r+0x4c>
   16fb2:	1c59      	adds	r1, r3, #1
   16fb4:	d103      	bne.n	16fbe <_raise_r+0x42>
   16fb6:	2316      	movs	r3, #22
   16fb8:	6003      	str	r3, [r0, #0]
   16fba:	2001      	movs	r0, #1
   16fbc:	e7e7      	b.n	16f8e <_raise_r+0x12>
   16fbe:	2400      	movs	r4, #0
   16fc0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
   16fc4:	4628      	mov	r0, r5
   16fc6:	4798      	blx	r3
   16fc8:	2000      	movs	r0, #0
   16fca:	e7e0      	b.n	16f8e <_raise_r+0x12>

00016fcc <raise>:
   16fcc:	4b02      	ldr	r3, [pc, #8]	; (16fd8 <raise+0xc>)
   16fce:	4601      	mov	r1, r0
   16fd0:	6818      	ldr	r0, [r3, #0]
   16fd2:	f7ff bfd3 	b.w	16f7c <_raise_r>
   16fd6:	bf00      	nop
   16fd8:	100001f0 	.word	0x100001f0

00016fdc <_kill_r>:
   16fdc:	b538      	push	{r3, r4, r5, lr}
   16fde:	4c07      	ldr	r4, [pc, #28]	; (16ffc <_kill_r+0x20>)
   16fe0:	2300      	movs	r3, #0
   16fe2:	4605      	mov	r5, r0
   16fe4:	4608      	mov	r0, r1
   16fe6:	4611      	mov	r1, r2
   16fe8:	6023      	str	r3, [r4, #0]
   16fea:	f7fb fe65 	bl	12cb8 <_kill>
   16fee:	1c43      	adds	r3, r0, #1
   16ff0:	d102      	bne.n	16ff8 <_kill_r+0x1c>
   16ff2:	6823      	ldr	r3, [r4, #0]
   16ff4:	b103      	cbz	r3, 16ff8 <_kill_r+0x1c>
   16ff6:	602b      	str	r3, [r5, #0]
   16ff8:	bd38      	pop	{r3, r4, r5, pc}
   16ffa:	bf00      	nop
   16ffc:	100005c0 	.word	0x100005c0

00017000 <_getpid_r>:
   17000:	f7fb be48 	b.w	12c94 <_getpid>

00017004 <main::file>:
   17004:	616d 6e69 632e 7070 ff00 ffff 5b1b 3234     main.cpp.....[42
   17014:	206d 2020 4920 464e 1b4f 305b 393b 6d34     m    INFO.[0;94m
   17024:	253a 3a73 5b1b 3b30 3239 256d 3a73 5b1b     :%s:.[0;92m%s:.[
   17034:	3b30 3339 256d 3e64 1b20 305b 333b 6d37     0;93m%d> .[0;37m
   17044:	7453 7261 1b74 305b 0a6d 0000 5b1b 3234     Start.[0m....[42
   17054:	206d 2020 4920 464e 1b4f 305b 393b 6d34     m    INFO.[0;94m
   17064:	253a 3a73 5b1b 3b30 3239 256d 3a73 5b1b     :%s:.[0;92m%s:.[
   17074:	3b30 3339 256d 3e64 1b20 305b 333b 6d37     0;93m%d> .[0;37m
   17084:	6e49 7420 6568 6920 746e 7265 7572 7470     In the interrupt
   17094:	5b1b 6d30 000a ffff                         .[0m....

0001709c <GpioInterruptCallback()::file>:
   1709c:	616d 6e69 632e 7070 ff00 ffff               main.cpp....

000170a8 <main::__PRETTY_FUNCTION__>:
   170a8:	6e69 2074 616d 6e69 2928 ff00               int main()..

000170b4 <GpioInterruptCallback()::__PRETTY_FUNCTION__>:
   170b4:	6f76 6469 4720 6970 496f 746e 7265 7572     void GpioInterru
   170c4:	7470 6143 6c6c 6162 6b63 2928 ff00 ffff     ptCallback()....
   170d4:	7453 6361 206b 6544 7470 2068 203d 7a25     Stack Depth = %z
   170e4:	0a64 0000 2020 2523 757a 203a 7830 7025     d...  #%zu: 0x%p
   170f4:	000a 0000 520a 6e75 203a 6874 2065 6f66     .....Run: the fo
   17104:	6c6c 776f 6e69 2067 6f63 6d6d 6e61 2064     llowing command 
   17114:	6e69 7920 756f 2072 7270 6a6f 6365 2074     in your project 
   17124:	6964 6572 7463 726f 0079 0000 200a 1b20     directory....  .
   17134:	315b 333b 6d37 616d 656b 7320 6174 6b63     [1;37mmake stack
   17144:	7274 6361 2d65 7325 5420 4152 4543 3d53     trace-%s TRACES=
   17154:	0022 0000 7830 7025 0000 0000 3020 2578     "...0x%p.... 0x%
   17164:	0070 0000 0a22 5b1b 6d30 0000 6854 7369     p..."..[0m..This
   17174:	7720 6c69 206c 6572 6f70 7472 7420 6568      will report the
   17184:	6620 6c69 2065 6e61 2064 696c 656e 6e20      file and line n
   17194:	6d75 6562 2072 6874 7461 6c20 6465 7420     umber that led t
   171a4:	206f 6874 7369 6620 6e75 7463 6f69 206e     o this function 
   171b4:	6562 6e69 2067 6163 6c6c 6465 002e 0000     being called....
   171c4:	7061 6c70 6369 7461 6f69 006e 5b1b 3134     application..[41
   171d4:	436d 4952 4954 4143 1b4c 305b 393b 6d34     mCRITICAL.[0;94m
   171e4:	253a 3a73 5b1b 3b30 3239 256d 3a73 5b1b     :%s:.[0;92m%s:.[
   171f4:	3b30 3339 256d 3e64 1b20 305b 333b 6d37     0;93m%d> .[0;37m
   17204:	7341 6573 7472 6f69 206e 6146 6c69 7275     Assertion Failur
   17214:	2c65 4320 6e6f 6964 6974 6e6f 5420 7365     e, Condition Tes
   17224:	6574 3a64 2820 6570 6972 6870 7265 6c61     ted: (peripheral
   17234:	645f 7669 6469 7265 3c20 203d 2934 200a     _divider <= 4). 
   17244:	2020 2020 2020 2020 4420 7669 6469 7265              Divider
   17254:	6d20 7375 6e74 7427 6520 6378 6565 2064      mustn't exceed 
   17264:	3233 5b1b 6d30 5b1b 6d30 000a 500a 6972     32.[0m.[0m...Pri
   17274:	746e 6e69 2067 7453 6361 206b 7254 6361     nting Stack Trac
   17284:	3a65 000a 5b1b 3134 436d 4952 4954 4143     e:...[41mCRITICA
   17294:	1b4c 305b 393b 6d34 253a 3a73 5b1b 3b30     L.[0;94m:%s:.[0;
   172a4:	3239 256d 3a73 5b1b 3b30 3339 256d 3e64     92m%s:.[0;93m%d>
   172b4:	1b20 305b 333b 6d37 7341 6573 7472 6f69      .[0;37mAssertio
   172c4:	206e 6146 6c69 7275 2c65 4320 6e6f 6964     n Failure, Condi
   172d4:	6974 6e6f 5420 7365 6574 3a64 2820 6564     tion Tested: (de
   172e4:	6973 6572 5f64 7073 6565 5f64 6e69 6d5f     sired_speed_in_m
   172f4:	7a68 3c20 3320 3438 2620 2026 6564 6973     hz < 384 && desi
   17304:	6572 5f64 7073 6565 5f64 6e69 6d5f 7a68     red_speed_in_mhz
   17314:	3e20 3120 2932 200a 2020 2020 2020 2020      > 12).         
   17324:	4620 6572 7571 6e65 7963 6d20 7375 2074      Frequency must 
   17334:	6562 6c20 776f 7265 7420 6168 206e 3833     be lower than 38
   17344:	2034 484d 617a 646e 6720 6572 7461 7265     4 MHzand greater
   17354:	7420 6168 206e 726f 6520 7571 6c61 7420      than or equal t
   17364:	206f 3231 4d20 7a48 5b1b 6d30 5b1b 6d30     o 12 MHz.[0m.[0m
   17374:	000a 0000 5b1b 3134 436d 4952 4954 4143     .....[41mCRITICA
   17384:	1b4c 305b 393b 6d34 253a 3a73 5b1b 3b30     L.[0;94m:%s:.[0;
   17394:	3239 256d 3a73 5b1b 3b30 3339 256d 3e64     92m%s:.[0;93m%d>
   173a4:	1b20 305b 333b 6d37 7341 6573 7472 6f69      .[0;37mAssertio
   173b4:	206e 6146 6c69 7275 2c65 4320 6e6f 6964     n Failure, Condi
   173c4:	6974 6e6f 5420 7365 6574 3a64 2820 6964     tion Tested: (di
   173d4:	6976 6564 5f72 6176 756c 2065 203c 2938     vider_value < 8)
   173e4:	200a 2020 2020 2020 2020 5020 4c4c 6420     .          PLL d
   173f4:	7669 6469 7265 7620 6c61 6575 7720 6e65     ivider value wen
   17404:	2074 756f 2074 666f 6220 756f 646e 1b73     t out of bounds.
   17414:	305b 1b6d 305b 0a6d 0000 0000 5b1b 3134     [0m.[0m......[41
   17424:	436d 4952 4954 4143 1b4c 305b 393b 6d34     mCRITICAL.[0;94m
   17434:	253a 3a73 5b1b 3b30 3239 256d 3a73 5b1b     :%s:.[0;92m%s:.[
   17444:	3b30 3339 256d 3e64 1b20 305b 333b 6d37     0;93m%d> .[0;37m
   17454:	7341 6573 7472 6f69 206e 6146 6c69 7275     Assertion Failur
   17464:	2c65 4320 6e6f 6964 6974 6e6f 5420 7365     e, Condition Tes
   17474:	6574 3a64 2820 6166 736c 2965 200a 2020     ted: (false).   
   17484:	2020 2020 2020 5020 4c4c 6c20 636f 206b            PLL lock 
   17494:	6f63 6c75 2064 6f6e 2074 6562 6520 7473     could not be est
   174a4:	6261 696c 6873 6465 6220 6665 726f 2065     ablished before 
   174b4:	6974 656d 756f 1b74 305b 1b6d 305b 0a6d     timeout.[0m.[0m.
   174c4:	0000 0000 5b1b 3134 436d 4952 4954 4143     .....[41mCRITICA
   174d4:	1b4c 305b 393b 6d34 253a 3a73 5b1b 3b30     L.[0;94m:%s:.[0;
   174e4:	3239 256d 3a73 5b1b 3b30 3339 256d 3e64     92m%s:.[0;93m%d>
   174f4:	1b20 305b 333b 6d37 7341 6573 7472 6f69      .[0;37mAssertio
   17504:	206e 6146 6c69 7275 2c65 4320 6e6f 6964     n Failure, Condi
   17514:	6974 6e6f 5420 7365 6574 3a64 2820 7063     tion Tested: (cp
   17524:	5f75 6964 6976 6564 2072 203c 3233 0a29     u_divider < 32).
   17534:	2020 2020 2020 2020 2020 6944 6976 6564               Divide
   17544:	2072 756d 7473 276e 2074 7865 6563 6465     r mustn't exceed
   17554:	3320 1b32 305b 1b6d 305b 0a6d 0000 0000      32.[0m.[0m.....
   17564:	5b1b 3134 436d 4952 4954 4143 1b4c 305b     .[41mCRITICAL.[0
   17574:	393b 6d34 253a 3a73 5b1b 3b30 3239 256d     ;94m:%s:.[0;92m%
   17584:	3a73 5b1b 3b30 3339 256d 3e64 1b20 305b     s:.[0;93m%d> .[0
   17594:	333b 6d37 7341 6573 7472 6f69 206e 6146     ;37mAssertion Fa
   175a4:	6c69 7275 2c65 4320 6e6f 6964 6974 6e6f     ilure, Condition
   175b4:	5420 7365 6574 3a64 2820 7266 7165 6575      Tested: (freque
   175c4:	636e 2079 3d21 3020 0a29 2020 2020 2020     ncy != 0).      
   175d4:	2020 2020 6143 6e6e 746f 6820 7661 2065         Cannot have 
   175e4:	657a 6f72 7420 6369 736b 7020 7265 6d20     zero ticks per m
   175f4:	6369 6f72 6573 6f63 646e 202c 6c70 6165     icrosecond, plea
   17604:	6573 6320 6f68 736f 2065 2031 726f 6d20     se choose 1 or m
   17614:	726f 2e65 5b1b 6d30 5b1b 6d30 000a 0000     ore..[0m.[0m....
   17624:	5b1b 3334 206d 4157 4e52 4e49 1b47 305b     .[43m WARNING.[0
   17634:	393b 6d34 253a 3a73 5b1b 3b30 3239 256d     ;94m:%s:.[0;92m%
   17644:	3a73 5b1b 3b30 3339 256d 3e64 1b20 305b     s:.[0;93m%d> .[0
   17654:	333b 6d37 7953 7473 6d65 5420 6d69 7265     ;37mSystem Timer
   17664:	6820 7361 4620 4941 454c 2044 6f74 7320      has FAILED to s
   17674:	6174 7472 1b21 305b 1b6d 305b 0a6d ff00     tart!.[0m.[0m...

00017684 <Lpc40xxSystemController::SetPeripheralClockDivider(unsigned char)::file>:
   17684:	7973 7473 6d65 635f 6e6f 7274 6c6f 656c     system_controlle
   17694:	2e72 7068 0070 ffff                         r.hpp...

0001769c <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)::file>:
   1769c:	7973 7473 6d65 635f 6e6f 7274 6c6f 656c     system_controlle
   176ac:	2e72 7068 0070 ffff                         r.hpp...

000176b4 <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)::file>:
   176b4:	7973 7473 6d65 635f 6e6f 7274 6c6f 656c     system_controlle
   176c4:	2e72 7068 0070 ffff                         r.hpp...

000176cc <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)::file>:
   176cc:	7973 7473 6d65 635f 6e6f 7274 6c6f 656c     system_controlle
   176dc:	2e72 7068 0070 ffff                         r.hpp...

000176e4 <Lpc40xxSystemController::SetCpuClockDivider(unsigned char)::file>:
   176e4:	7973 7473 6d65 635f 6e6f 7274 6c6f 656c     system_controlle
   176f4:	2e72 7068 0070 ffff                         r.hpp...

000176fc <Timer::kPowerbit>:
   176fc:	0001 0000 0002 0000 0016 0000 0017 0000     ................

0001770c <Timer::kTimerIrq>:
   1770c:	0201 0403                                   ....

00017710 <Timer::kTimerIsr>:
   17710:	24d5 0001 2511 0001 254d 0001 2589 0001     .$...%..M%...%..

00017720 <Timer::Initialize(unsigned long, void (*)(), long)::file>:
   17720:	6974 656d 2e72 7068 0070 ffff               timer.hpp...

0001772c <Uart::kTxUartPortFunction>:
   1772c:	0201 0502                                   ....

00017730 <Uart::kRxUartPortFunction>:
   17730:	0201 0302                                   ....

00017734 <Uart::kPowerbit>:
   17734:	0003 0000 0018 0000 0019 0000 0008 0000     ................

00017744 <LowLevelInit()::file>:
   17744:	7473 7261 7574 2e70 7063 0070               startup.cpp.

00017750 <vtable for Uart>:
	...
   17758:	1acd 0001 1b99 0001 1cc9 0001 1dfd 0001     ................
   17768:	fffc ffff 0000 0000 0aa1 0001 0b31 0001     ............1...
   17778:	0b89 0001 0ba1 0001 0bb5 0001 0bf5 0001     ................
   17788:	0c25 0001                                   %...

0001778c <vtable for Timer>:
	...
   17794:	1835 0001 1999 0001 1a91 0001 fffc ffff     5...............
   177a4:	0000 0000 0aa1 0001 0b31 0001 0b89 0001     ........1.......
   177b4:	0ba1 0001 0bb5 0001 0bf5 0001 0c25 0001     ............%...

000177c4 <vtable for Pin>:
	...
   177cc:	1205 0001 127d 0001 12fd 0001 1371 0001     ....}.......q...
   177dc:	13e5 0001 1461 0001 14dd 0001 1551 0001     ....a.......Q...
   177ec:	15cd 0001 1641 0001 16b5 0001 178d 0001     ....A...........
   177fc:	17b9 0001                                   ....

00017800 <vtable for SystemTimer>:
	...
   17808:	10a1 0001 10d5 0001 1171 0001 fffc ffff     ........q.......
   17818:	0000 0000 0aa1 0001 0b31 0001 0b89 0001     ........1.......
   17828:	0ba1 0001 0bb5 0001 0bf5 0001 0c25 0001     ............%...

00017838 <vtable for Lpc40xxSystemController>:
	...
   17840:	0aa1 0001 0b31 0001 0b89 0001 0ba1 0001     ....1...........
   17850:	0bb5 0001 0bf5 0001 0c25 0001               ........%...

0001785c <Lpc40xxSystemController::SetPeripheralClockDivider(unsigned char)::__PRETTY_FUNCTION__>:
   1785c:	6976 7472 6175 206c 6f76 6469 4c20 6370     virtual void Lpc
   1786c:	3034 7878 7953 7473 6d65 6f43 746e 6f72     40xxSystemContro
   1787c:	6c6c 7265 3a3a 6553 5074 7265 7069 6568     ller::SetPeriphe
   1788c:	6172 436c 6f6c 6b63 6944 6976 6564 2872     ralClockDivider(
   1789c:	6975 746e 5f38 2974 ff00 ffff               uint8_t)....

000178a8 <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)::__PRETTY_FUNCTION__>:
   178a8:	6975 746e 3233 745f 4c20 6370 3034 7878     uint32_t Lpc40xx
   178b8:	7953 7473 6d65 6f43 746e 6f72 6c6c 7265     SystemController
   178c8:	3a3a 6553 4d74 6961 506e 6c6c 4c28 6370     ::SetMainPll(Lpc
   178d8:	3034 7878 7953 7473 6d65 6f43 746e 6f72     40xxSystemContro
   178e8:	6c6c 7265 3a3a 6c50 496c 706e 7475 202c     ller::PllInput, 
   178f8:	6975 746e 3631 745f 0029 ffff               uint16_t)...

00017904 <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)::__PRETTY_FUNCTION__>:
   17904:	6975 746e 3233 745f 4c20 6370 3034 7878     uint32_t Lpc40xx
   17914:	7953 7473 6d65 6f43 746e 6f72 6c6c 7265     SystemController
   17924:	3a3a 6143 636c 6c75 7461 5065 6c6c 4c28     ::CalculatePll(L
   17934:	6370 3034 7878 7953 7473 6d65 6f43 746e     pc40xxSystemCont
   17944:	6f72 6c6c 7265 3a3a 6c50 496c 706e 7475     roller::PllInput
   17954:	202c 6975 746e 3631 745f 0029               , uint16_t).

00017960 <Lpc40xxSystemController::SetCpuClockDivider(unsigned char)::__PRETTY_FUNCTION__>:
   17960:	6f76 6469 4c20 6370 3034 7878 7953 7473     void Lpc40xxSyst
   17970:	6d65 6f43 746e 6f72 6c6c 7265 3a3a 6553     emController::Se
   17980:	4374 7570 6c43 636f 446b 7669 6469 7265     tCpuClockDivider
   17990:	7528 6e69 3874 745f 0029 ffff               (uint8_t)...

0001799c <Timer::Initialize(unsigned long, void (*)(), long)::__PRETTY_FUNCTION__>:
   1799c:	6976 7472 6175 206c 6f76 6469 5420 6d69     virtual void Tim
   179ac:	7265 3a3a 6e49 7469 6169 696c 657a 7528     er::Initialize(u
   179bc:	6e69 3374 5f32 2c74 4920 7273 6f50 6e69     int32_t, IsrPoin
   179cc:	6574 2c72 6920 746e 3233 745f 0029 ffff     ter, int32_t)...

000179dc <LowLevelInit()::__PRETTY_FUNCTION__>:
   179dc:	6f76 6469 4c20 776f 654c 6576 496c 696e     void LowLevelIni
   179ec:	2874 0029 7453 6361 206b 6544 7470 2068     t().Stack Depth 
   179fc:	203d 7a25 0a64 0000 2020 2523 757a 203a     = %zd...  #%zu: 
   17a0c:	7830 7025 000a 0000 520a 6e75 203a 6874     0x%p.....Run: th
   17a1c:	2065 6f66 6c6c 776f 6e69 2067 6f63 6d6d     e following comm
   17a2c:	6e61 2064 6e69 7920 756f 2072 7270 6a6f     and in your proj
   17a3c:	6365 2074 6964 6572 7463 726f 0079 0000     ect directory...
   17a4c:	200a 1b20 315b 333b 6d37 616d 656b 7320     .  .[1;37mmake s
   17a5c:	6174 6b63 7274 6361 2d65 7325 5420 4152     tacktrace-%s TRA
   17a6c:	4543 3d53 0022 0000 7830 7025 0000 0000     CES="...0x%p....
   17a7c:	3020 2578 0070 0000 0a22 5b1b 6d30 0000      0x%p..."..[0m..
   17a8c:	6854 7369 7720 6c69 206c 6572 6f70 7472     This will report
   17a9c:	7420 6568 6620 6c69 2065 6e61 2064 696c      the file and li
   17aac:	656e 6e20 6d75 6562 2072 6874 7461 6c20     ne number that l
   17abc:	6465 7420 206f 6874 7369 6620 6e75 7463     ed to this funct
   17acc:	6f69 206e 6562 6e69 2067 6163 6c6c 6465     ion being called
   17adc:	002e 0000 7061 6c70 6369 7461 6f69 006e     ....application.
   17aec:	5b1b 3134 436d 4952 4954 4143 1b4c 305b     .[41mCRITICAL.[0
   17afc:	393b 6d34 253a 3a73 5b1b 3b30 3239 256d     ;94m:%s:.[0;92m%
   17b0c:	3a73 5b1b 3b30 3339 256d 3e64 1b20 305b     s:.[0;93m%d> .[0
   17b1c:	333b 6d37 7341 6573 7472 6f69 206e 6146     ;37mAssertion Fa
   17b2c:	6c69 7275 2c65 4320 6e6f 6964 6974 6e6f     ilure, Condition
   17b3c:	5420 7365 6574 3a64 2820 7369 2072 3d21      Tested: (isr !=
   17b4c:	4920 746e 7265 7572 7470 6f4c 6b6f 7075      InterruptLookup
   17b5c:	6148 646e 656c 2972 200a 2020 2020 2020     Handler).       
   17b6c:	2020 4e20 206f 5349 2052 6f66 6e75 2064        No ISR found 
   17b7c:	6f66 2072 6874 2065 6576 7463 726f 2520     for the vector %
   17b8c:	1b75 305b 1b6d 305b 0a6d 0000 500a 6972     u.[0m.[0m....Pri
   17b9c:	746e 6e69 2067 7453 6361 206b 7254 6361     nting Stack Trac
   17bac:	3a65 000a 5b1b 3134 486d 7261 2064 6146     e:...[41mHard Fa
   17bbc:	6c75 2074 7845 6563 7470 6f69 206e 634f     ult Exception Oc
   17bcc:	7563 7272 6465 0a21 5b1b 6d30 0000 0000     curred!..[0m....
   17bdc:	3072 203a 7830 3025 6c38 2c58 7220 3a31     r0: 0x%08lX, r1:
   17bec:	3020 2578 3830 586c 202c 3272 203a 7830      0x%08lX, r2: 0x
   17bfc:	3025 6c38 2c58 7220 3a33 3020 2578 3830     %08lX, r3: 0x%08
   17c0c:	586c 000a 3172 3a32 3020 2578 3830 586c     lX..r12: 0x%08lX
   17c1c:	202c 726c 203a 7830 3025 6c38 2c58 7020     , lr: 0x%08lX, p
   17c2c:	3a63 3020 2578 3830 586c 202c 7370 3a72     c: 0x%08lX, psr:
   17c3c:	3020 2578 3830 586c 000a ffff                0x%08lX....

00017c48 <InterruptLookupHandler::file>:
   17c48:	6e69 6574 7272 7075 2e74 7063 0070 ffff     interrupt.cpp...

00017c58 <InterruptLookupHandler::__PRETTY_FUNCTION__>:
   17c58:	6f76 6469 4920 746e 7265 7572 7470 6f4c     void InterruptLo
   17c68:	6b6f 7075 6148 646e 656c 2872 0029 ffff     okupHandler()...

00017c78 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)::pow10>:
   17c78:	0000 3f80 0000 4120 0000 42c8 0000 447a     ...?.. A...B..zD
   17c88:	4000 461c 5000 47c3 2400 4974 9680 4b18     .@.F.P.G.$tI...K
   17c98:	bc20 4cbe 6b28 4e6e 7453 6361 206b 6544      ..L(knNStack De
   17ca8:	7470 2068 203d 7a25 0a64 0000 2020 2523     pth = %zd...  #%
   17cb8:	757a 203a 7830 7025 000a 0000 520a 6e75     zu: 0x%p.....Run
   17cc8:	203a 6874 2065 6f66 6c6c 776f 6e69 2067     : the following 
   17cd8:	6f63 6d6d 6e61 2064 6e69 7920 756f 2072     command in your 
   17ce8:	7270 6a6f 6365 2074 6964 6572 7463 726f     project director
   17cf8:	0079 0000 200a 1b20 315b 333b 6d37 616d     y....  .[1;37mma
   17d08:	656b 7320 6174 6b63 7274 6361 2d65 7325     ke stacktrace-%s
   17d18:	5420 4152 4543 3d53 0022 0000 7830 7025      TRACES="...0x%p
   17d28:	0000 0000 3020 2578 0070 0000 0a22 5b1b     .... 0x%p..."..[
   17d38:	6d30 0000 6854 7369 7720 6c69 206c 6572     0m..This will re
   17d48:	6f70 7472 7420 6568 6620 6c69 2065 6e61     port the file an
   17d58:	2064 696c 656e 6e20 6d75 6562 2072 6874     d line number th
   17d68:	7461 6c20 6465 7420 206f 6874 7369 6620     at led to this f
   17d78:	6e75 7463 6f69 206e 6562 6e69 2067 6163     unction being ca
   17d88:	6c6c 6465 002e 0000 7061 6c70 6369 7461     lled....applicat
   17d98:	6f69 006e 5b1b 3334 206d 4157 4e52 4e49     ion..[43m WARNIN
   17da8:	1b47 305b 393b 6d34 253a 3a73 5b1b 3b30     G.[0;94m:%s:.[0;
   17db8:	3239 256d 3a73 5b1b 3b30 3339 256d 3e64     92m%s:.[0;93m%d>
   17dc8:	1b20 305b 333b 6d37 6f50 7472 2520 2064      .[0;37mPort %d 
   17dd8:	6163 6e6e 746f 6220 2065 7375 6465 6620     cannot be used f
   17de8:	726f 4520 7478 7265 616e 206c 6e49 6574     or External Inte
   17df8:	7272 7075 7374 202e 654e 6465 7420 206f     rrupts. Need to 
   17e08:	7375 2065 5047 4f49 6f20 206e 6f50 7472     use GPIO on Port
   17e18:	3020 6f20 2072 2e32 5b1b 6d30 5b1b 6d30      0 or 2..[0m.[0m
   17e28:	000a 0000 5b1b 3334 206d 4157 4e52 4e49     .....[43m WARNIN
   17e38:	1b47 305b 393b 6d34 253a 3a73 5b1b 3b30     G.[0;94m:%s:.[0;
   17e48:	3239 256d 3a73 5b1b 3b30 3339 256d 3e64     92m%s:.[0;93m%d>
   17e58:	1b20 305b 333b 6d37 6445 6567 2520 2064      .[0;37mEdge %d 
   17e68:	6163 6e6e 746f 6220 2065 7375 6465 6620     cannot be used f
   17e78:	726f 4520 7478 7265 616e 206c 6e49 6574     or External Inte
   17e88:	7272 7075 7374 4e2e 6565 2064 6f74 7520     rrupts.Need to u
   17e98:	6573 6120 7220 7369 6e69 2c67 6620 6c61     se a rising, fal
   17ea8:	696c 676e 202c 726f 6220 746f 2068 6f63     ling, or both co
   17eb8:	666e 6769 7275 7461 6f69 2e6e 5b1b 6d30     nfiguration..[0m
   17ec8:	000a 0000 5b1b 3134 436d 4952 4954 4143     .....[41mCRITICA
   17ed8:	1b4c 305b 393b 6d34 253a 3a73 5b1b 3b30     L.[0;94m:%s:.[0;
   17ee8:	3239 256d 3a73 5b1b 3b30 3339 256d 3e64     92m%s:.[0;93m%d>
   17ef8:	1b20 305b 333b 6d37 7341 6573 7472 6f69      .[0;37mAssertio
   17f08:	206e 6146 6c69 7275 2c65 4320 6e6f 6964     n Failure, Condi
   17f18:	6974 6e6f 5420 7365 6574 3a64 2820 6570     tion Tested: (pe
   17f28:	6972 6870 7265 6c61 645f 7669 6469 7265     ripheral_divider
   17f38:	3c20 203d 2934 200a 2020 2020 2020 2020      <= 4).         
   17f48:	4420 7669 6469 7265 6d20 7375 6e74 7427      Divider mustn't
   17f58:	6520 6378 6565 2064 3233 5b1b 6d30 5b1b      exceed 32.[0m.[
   17f68:	6d30 000a 500a 6972 746e 6e69 2067 7453     0m...Printing St
   17f78:	6361 206b 7254 6361 3a65 000a 5b1b 3134     ack Trace:...[41
   17f88:	436d 4952 4954 4143 1b4c 305b 393b 6d34     mCRITICAL.[0;94m
   17f98:	253a 3a73 5b1b 3b30 3239 256d 3a73 5b1b     :%s:.[0;92m%s:.[
   17fa8:	3b30 3339 256d 3e64 1b20 305b 333b 6d37     0;93m%d> .[0;37m
   17fb8:	7341 6573 7472 6f69 206e 6146 6c69 7275     Assertion Failur
   17fc8:	2c65 4320 6e6f 6964 6974 6e6f 5420 7365     e, Condition Tes
   17fd8:	6574 3a64 2820 6564 6973 6572 5f64 7073     ted: (desired_sp
   17fe8:	6565 5f64 6e69 6d5f 7a68 3c20 3320 3438     eed_in_mhz < 384
   17ff8:	2620 2026 6564 6973 6572 5f64 7073 6565      && desired_spee
   18008:	5f64 6e69 6d5f 7a68 3e20 3120 2932 200a     d_in_mhz > 12). 
   18018:	2020 2020 2020 2020 4620 6572 7571 6e65              Frequen
   18028:	7963 6d20 7375 2074 6562 6c20 776f 7265     cy must be lower
   18038:	7420 6168 206e 3833 2034 484d 617a 646e      than 384 MHzand
   18048:	6720 6572 7461 7265 7420 6168 206e 726f      greater than or
   18058:	6520 7571 6c61 7420 206f 3231 4d20 7a48      equal to 12 MHz
   18068:	5b1b 6d30 5b1b 6d30 000a 0000 5b1b 3134     .[0m.[0m.....[41
   18078:	436d 4952 4954 4143 1b4c 305b 393b 6d34     mCRITICAL.[0;94m
   18088:	253a 3a73 5b1b 3b30 3239 256d 3a73 5b1b     :%s:.[0;92m%s:.[
   18098:	3b30 3339 256d 3e64 1b20 305b 333b 6d37     0;93m%d> .[0;37m
   180a8:	7341 6573 7472 6f69 206e 6146 6c69 7275     Assertion Failur
   180b8:	2c65 4320 6e6f 6964 6974 6e6f 5420 7365     e, Condition Tes
   180c8:	6574 3a64 2820 6964 6976 6564 5f72 6176     ted: (divider_va
   180d8:	756c 2065 203c 2938 200a 2020 2020 2020     lue < 8).       
   180e8:	2020 5020 4c4c 6420 7669 6469 7265 7620        PLL divider v
   180f8:	6c61 6575 7720 6e65 2074 756f 2074 666f     alue went out of
   18108:	6220 756f 646e 1b73 305b 1b6d 305b 0a6d      bounds.[0m.[0m.
   18118:	0000 0000 5b1b 3134 436d 4952 4954 4143     .....[41mCRITICA
   18128:	1b4c 305b 393b 6d34 253a 3a73 5b1b 3b30     L.[0;94m:%s:.[0;
   18138:	3239 256d 3a73 5b1b 3b30 3339 256d 3e64     92m%s:.[0;93m%d>
   18148:	1b20 305b 333b 6d37 7341 6573 7472 6f69      .[0;37mAssertio
   18158:	206e 6146 6c69 7275 2c65 4320 6e6f 6964     n Failure, Condi
   18168:	6974 6e6f 5420 7365 6574 3a64 2820 6166     tion Tested: (fa
   18178:	736c 2965 200a 2020 2020 2020 2020 5020     lse).          P
   18188:	4c4c 6c20 636f 206b 6f63 6c75 2064 6f6e     LL lock could no
   18198:	2074 6562 6520 7473 6261 696c 6873 6465     t be established
   181a8:	6220 6665 726f 2065 6974 656d 756f 1b74      before timeout.
   181b8:	305b 1b6d 305b 0a6d 0000 0000 5b1b 3134     [0m.[0m......[41
   181c8:	436d 4952 4954 4143 1b4c 305b 393b 6d34     mCRITICAL.[0;94m
   181d8:	253a 3a73 5b1b 3b30 3239 256d 3a73 5b1b     :%s:.[0;92m%s:.[
   181e8:	3b30 3339 256d 3e64 1b20 305b 333b 6d37     0;93m%d> .[0;37m
   181f8:	7341 6573 7472 6f69 206e 6146 6c69 7275     Assertion Failur
   18208:	2c65 4320 6e6f 6964 6974 6e6f 5420 7365     e, Condition Tes
   18218:	6574 3a64 2820 7063 5f75 6964 6976 6564     ted: (cpu_divide
   18228:	2072 203c 3233 0a29 2020 2020 2020 2020     r < 32).        
   18238:	2020 6944 6976 6564 2072 756d 7473 276e       Divider mustn'
   18248:	2074 7865 6563 6465 3320 1b32 305b 1b6d     t exceed 32.[0m.
   18258:	305b 0a6d 0000 0000 5b1b 3534 206d 2020     [0m......[45m   
   18268:	5245 4f52 1b52 305b 393b 6d34 253a 3a73     ERROR.[0;94m:%s:
   18278:	5b1b 3b30 3239 256d 3a73 5b1b 3b30 3339     .[0;92m%s:.[0;93
   18288:	256d 3e64 1b20 305b 333b 6d37 6146 6c69     m%d> .[0;37mFail
   18298:	6465 7420 206f 6e69 7469 6169 6574 5320     ed to initiate S
   182a8:	4950 6d20 646f 2065 6977 6874 6e69 7420     PI mode within t
   182b8:	6d69 6f65 7475 202e 6241 726f 6974 676e     imeout. Aborting
   182c8:	1b21 305b 0a6d 0000 5b1b 3534 206d 2020     !.[0m....[45m   
   182d8:	5245 4f52 1b52 305b 393b 6d34 253a 3a73     ERROR.[0;94m:%s:
   182e8:	5b1b 3b30 3239 256d 3a73 5b1b 3b30 3339     .[0;92m%s:.[0;93
   182f8:	256d 3e64 1b20 305b 333b 6d37 6552 7073     m%d> .[0;37mResp
   18308:	6e6f 6573 6920 746e 6765 6972 7974 6320     onse integrity c
   18318:	6568 6b63 6620 6961 656c 2e64 4120 6f62     heck failed. Abo
   18328:	7472 6e69 2167 5b1b 6d30 000a 5b1b 3534     rting!.[0m...[45
   18338:	206d 2020 5245 4f52 1b52 305b 393b 6d34     m   ERROR.[0;94m
   18348:	253a 3a73 5b1b 3b30 3239 256d 3a73 5b1b     :%s:.[0;92m%s:.[
   18358:	3b30 3339 256d 3e64 1b20 305b 333b 6d37     0;93m%d> .[0;37m
   18368:	6e55 7573 7070 726f 6574 2064 6f76 746c     Unsupported volt
   18378:	6761 2065 6e69 7520 6573 202e 6241 726f     age in use. Abor
   18388:	6974 676e 1b21 305b 0a6d 0000 5b1b 3534     ting!.[0m....[45
   18398:	206d 2020 5245 4f52 1b52 305b 393b 6d34     m   ERROR.[0;94m
   183a8:	253a 3a73 5b1b 3b30 3239 256d 3a73 5b1b     :%s:.[0;92m%s:.[
   183b8:	3b30 3339 256d 3e64 1b20 305b 333b 6d37     0;93m%d> .[0;37m
   183c8:	4453 4320 7261 2064 6974 656d 2064 756f     SD Card timed ou
   183d8:	2e74 4120 6f62 7472 6e69 2167 5b1b 6d30     t. Aborting!.[0m
   183e8:	000a 0000 7274 6575 0000 0000 6166 736c     ....true....fals
   183f8:	0065 0000 5b1b 3534 206d 2020 5245 4f52     e....[45m   ERRO
   18408:	1b52 305b 393b 6d34 253a 3a73 5b1b 3b30     R.[0;94m:%s:.[0;
   18418:	3239 256d 3a73 5b1b 3b30 3339 256d 3e64     92m%s:.[0;93m%d>
   18428:	1b20 305b 333b 6d37 6857 6c69 2065 6552      .[0;37mWhile Re
   18438:	6461 6e69 2067 6c42 636f 206b 2523 2064     ading Block #%d 
   18448:	5243 3143 3a36 5b1b 6d30 000a 5b1b 3534     CRC16:.[0m...[45
   18458:	206d 2020 5245 4f52 1b52 305b 393b 6d34     m   ERROR.[0;94m
   18468:	253a 3a73 5b1b 3b30 3239 256d 3a73 5b1b     :%s:.[0;92m%s:.[
   18478:	3b30 3339 256d 3e64 1b20 305b 333b 6d37     0;93m%d> .[0;37m
   18488:	7845 6570 7463 6465 2720 7830 3025 5834     Expected '0x%04X
   18498:	1b27 305b 0a6d 0000 5b1b 3534 206d 2020     '.[0m....[45m   
   184a8:	5245 4f52 1b52 305b 393b 6d34 253a 3a73     ERROR.[0;94m:%s:
   184b8:	5b1b 3b30 3239 256d 3a73 5b1b 3b30 3339     .[0;92m%s:.[0;93
   184c8:	256d 3e64 1b20 305b 333b 6d37 6f47 2074     m%d> .[0;37mGot 
   184d8:	3027 2578 3430 2758 5b1b 6d30 000a 0000     '0x%04X'.[0m....
   184e8:	5b1b 3534 206d 2020 5245 4f52 1b52 305b     .[45m   ERROR.[0
   184f8:	393b 6d34 253a 3a73 5b1b 3b30 3239 256d     ;94m:%s:.[0;92m%
   18508:	3a73 5b1b 3b30 3339 256d 3e64 1b20 305b     s:.[0;93m%d> .[0
   18518:	333b 6d37 6552 6461 4320 646d 7720 7361     ;37mRead Cmd was
   18528:	6e20 746f 6120 6b63 6f6e 6c77 6465 6567      not acknowledge
   18538:	2064 7270 706f 7265 796c 1b21 305b 0a6d     d properly!.[0m.
   18548:	0000 0000 5b1b 3534 206d 2020 5245 4f52     .....[45m   ERRO
   18558:	1b52 305b 393b 6d34 253a 3a73 5b1b 3b30     R.[0;94m:%s:.[0;
   18568:	3239 256d 3a73 5b1b 3b30 3339 256d 3e64     92m%s:.[0;93m%d>
   18578:	1b20 305b 333b 6d37 6150 6172 656d 6574      .[0;37mParamete
   18588:	2072 7245 3a72 2520 1b73 305b 0a6d 0000     r Err: %s.[0m...
   18598:	5b1b 3534 206d 2020 5245 4f52 1b52 305b     .[45m   ERROR.[0
   185a8:	393b 6d34 253a 3a73 5b1b 3b30 3239 256d     ;94m:%s:.[0;92m%
   185b8:	3a73 5b1b 3b30 3339 256d 3e64 1b20 305b     s:.[0;93m%d> .[0
   185c8:	333b 6d37 6441 7264 4520 7272 203a 7325     ;37mAddr Err: %s
   185d8:	5b1b 6d30 000a 0000 5b1b 3534 206d 2020     .[0m.....[45m   
   185e8:	5245 4f52 1b52 305b 393b 6d34 253a 3a73     ERROR.[0;94m:%s:
   185f8:	5b1b 3b30 3239 256d 3a73 5b1b 3b30 3339     .[0;92m%s:.[0;93
   18608:	256d 3e64 1b20 305b 333b 6d37 7245 7361     m%d> .[0;37mEras
   18618:	2065 6553 2071 7245 3a72 2520 1b73 305b     e Seq Err: %s.[0
   18628:	0a6d 0000 5b1b 3534 206d 2020 5245 4f52     m....[45m   ERRO
   18638:	1b52 305b 393b 6d34 253a 3a73 5b1b 3b30     R.[0;94m:%s:.[0;
   18648:	3239 256d 3a73 5b1b 3b30 3339 256d 3e64     92m%s:.[0;93m%d>
   18658:	1b20 305b 333b 6d37 6f43 206d 5243 2043      .[0;37mCom CRC 
   18668:	7245 3a72 2520 1b73 305b 0a6d 0000 0000     Err: %s.[0m.....
   18678:	5b1b 3534 206d 2020 5245 4f52 1b52 305b     .[45m   ERROR.[0
   18688:	393b 6d34 253a 3a73 5b1b 3b30 3239 256d     ;94m:%s:.[0;92m%
   18698:	3a73 5b1b 3b30 3339 256d 3e64 1b20 305b     s:.[0;93m%d> .[0
   186a8:	333b 6d37 6c49 656c 6167 206c 6d43 2064     ;37mIllegal Cmd 
   186b8:	7245 3a72 2520 1b73 305b 0a6d 0000 0000     Err: %s.[0m.....
   186c8:	5b1b 3534 206d 2020 5245 4f52 1b52 305b     .[45m   ERROR.[0
   186d8:	393b 6d34 253a 3a73 5b1b 3b30 3239 256d     ;94m:%s:.[0;92m%
   186e8:	3a73 5b1b 3b30 3339 256d 3e64 1b20 305b     s:.[0;93m%d> .[0
   186f8:	333b 6d37 7245 7361 2065 6552 6573 3a74     ;37mErase Reset:
   18708:	2520 1b73 305b 0a6d 0000 0000 5b1b 3534      %s.[0m......[45
   18718:	206d 2020 5245 4f52 1b52 305b 393b 6d34     m   ERROR.[0;94m
   18728:	253a 3a73 5b1b 3b30 3239 256d 3a73 5b1b     :%s:.[0;92m%s:.[
   18738:	3b30 3339 256d 3e64 1b20 305b 333b 6d37     0;93m%d> .[0;37m
   18748:	6e49 4920 6c64 3a65 2520 1b73 305b 0a6d     In Idle: %s.[0m.
   18758:	0000 0000 5b1b 3534 206d 2020 5245 4f52     .....[45m   ERRO
   18768:	1b52 305b 393b 6d34 253a 3a73 5b1b 3b30     R.[0;94m:%s:.[0;
   18778:	3239 256d 3a73 5b1b 3b30 3339 256d 3e64     92m%s:.[0;93m%d>
   18788:	1b20 305b 333b 6d37 6146 6c69 6465 7420      .[0;37mFailed t
   18798:	206f 6573 2074 7453 7261 2074 6441 7264     o set Start Addr
   187a8:	7365 2173 5b1b 6d30 000a 0000 5b1b 3534     ess!.[0m.....[45
   187b8:	206d 2020 5245 4f52 1b52 305b 393b 6d34     m   ERROR.[0;94m
   187c8:	253a 3a73 5b1b 3b30 3239 256d 3a73 5b1b     :%s:.[0;92m%s:.[
   187d8:	3b30 3339 256d 3e64 1b20 305b 333b 6d37     0;93m%d> .[0;37m
   187e8:	6146 6c69 6465 7420 206f 6573 2074 6e45     Failed to set En
   187f8:	2064 6441 7264 7365 2173 5b1b 6d30 000a     d Address!.[0m..
   18808:	5b1b 3534 206d 2020 5245 4f52 1b52 305b     .[45m   ERROR.[0
   18818:	393b 6d34 253a 3a73 5b1b 3b30 3239 256d     ;94m:%s:.[0;92m%
   18828:	3a73 5b1b 3b30 3339 256d 3e64 1b20 305b     s:.[0;93m%d> .[0
   18838:	333b 6d37 6e55 6e6b 776f 206e 6572 7073     ;37mUnknown resp
   18848:	6e6f 6573 7420 7079 2e65 4120 6f62 7472     onse type. Abort
   18858:	6e69 2167 5b1b 6d30 000a 0000 5b1b 3534     ing!.[0m.....[45
   18868:	206d 2020 5245 4f52 1b52 305b 393b 6d34     m   ERROR.[0;94m
   18878:	253a 3a73 5b1b 3b30 3239 256d 3a73 5b1b     :%s:.[0;92m%s:.[
   18888:	3b30 3339 256d 3e64 1b20 305b 333b 6d37     0;93m%d> .[0;37m
   18898:	6552 7073 6e6f 6573 7520 736e 7075 6f70     Response unsuppo
   188a8:	7472 6465 6920 206e 5053 2049 6f6d 6564     rted in SPI mode
   188b8:	202e 6241 726f 6974 676e 1b21 305b 0a6d     . Aborting!.[0m.
   188c8:	ff00 ffff                                   ....

000188cc <Gpio::ValidPortCheck()::file>:
   188cc:	7067 6f69 682e 7070 ff00 ffff               gpio.hpp....

000188d8 <Gpio::SetInterruptEdge(GpioInterface::Edge)::file>:
   188d8:	7067 6f69 682e 7070 ff00 ffff               gpio.hpp....

000188e4 <Gpio::ClearInterruptEdge(GpioInterface::Edge)::file>:
   188e4:	7067 6f69 682e 7070 ff00 ffff               gpio.hpp....

000188f0 <Ssp::kPinSelect>:
   188f0:	0202 ff04                                   ....

000188f4 <Ssp::kSspPinMatrix>:
   188f4:	77cc 0001 1200 0000 77cc 0001 1100 0000     .w.......w......
   18904:	77cc 0001 0f00 0000 77cc 0001 0900 0000     .w.......w......
   18914:	77cc 0001 0800 0000 77cc 0001 0700 0000     .w.......w......
   18924:	77cc 0001 0101 0000 77cc 0001 0401 0000     .w.......w......
   18934:	77cc 0001 0001 0000                         .w......

0001893c <Ssp::kPowerBit>:
   1893c:	0015 0000 000a 0000 0014 0000               ............

00018948 <Sd::kCrcTable8>:
   18948:	0900 1b12 2d24 3f36 4148 535a 656c 777e     ....$-6?HAZSle~w
   18958:	1019 020b 343d 262f 5851 4a43 7c75 6e67     ....=4/&QXCJu|gn
   18968:	3b32 2920 1f16 0d04 737a 6168 575e 454c     2; )....zsha^WLE
   18978:	222b 3039 060f 141d 6a63 7871 4e47 5c55     +"90....cjqxGNU\
   18988:	6d64 7f76 4940 5b52 252c 373e 0108 131a     dmv.@IR[,%>7....
   18998:	747d 666f 5059 424b 3c35 2e27 1811 0a03     }tofYPKB5<'.....
   189a8:	5f56 4d44 7b72 6960 171e 050c 333a 2128     V_DMr{`i....:3(!
   189b8:	464f 545d 626b 7079 0e07 1c15 2a23 3831     OF]Tkbyp....#*18
   189c8:	4841 5a53 6c65 7e77 0009 121b 242d 363f     AHSZelw~....-$?6
   189d8:	5158 434a 757c 676e 1910 0b02 3d34 2f26     XQJC|ung....4=&/
   189e8:	7a73 6861 5e57 4c45 323b 2029 161f 040d     szahW^EL;2) ....
   189f8:	636a 7178 474e 555c 2b22 3930 0f06 1d14     jcxqNG\U"+09....
   18a08:	2c25 3e37 0801 1a13 646d 767f 4049 525b     %,7>....md.vI@[R
   18a18:	353c 272e 1118 030a 7d74 6f66 5950 4b42     <5.'....t}foPYBK
   18a28:	1e17 0c05 3a33 2821 565f 444d 727b 6069     ....3:!(_VMD{ri`
   18a38:	070e 151c 232a 3138 4f46 5d54 6b62 0070     ....*#81FOT]bkp.

00018a48 <Sd::kCrcTable16>:
   18a48:	0000 1021 2042 3063 4084 50a5 60c6 70e7     ..!.B c0.@.P.`.p
   18a58:	8108 9129 a14a b16b c18c d1ad e1ce f1ef     ..).J.k.........
   18a68:	1231 0210 3273 2252 52b5 4294 72f7 62d6     1...s2R".R.B.r.b
   18a78:	9339 8318 b37b a35a d3bd c39c f3ff e3de     9...{.Z.........
   18a88:	2462 3443 0420 1401 64e6 74c7 44a4 5485     b$C4 ....d.t.D.T
   18a98:	a56a b54b 8528 9509 e5ee f5cf c5ac d58d     j.K.(...........
   18aa8:	3653 2672 1611 0630 76d7 66f6 5695 46b4     S6r&..0..v.f.V.F
   18ab8:	b75b a77a 9719 8738 f7df e7fe d79d c7bc     [.z...8.........
   18ac8:	48c4 58e5 6886 78a7 0840 1861 2802 3823     .H.X.h.x@.a..(#8
   18ad8:	c9cc d9ed e98e f9af 8948 9969 a90a b92b     ........H.i...+.
   18ae8:	5af5 4ad4 7ab7 6a96 1a71 0a50 3a33 2a12     .Z.J.z.jq.P.3:.*
   18af8:	dbfd cbdc fbbf eb9e 9b79 8b58 bb3b ab1a     ........y.X.;...
   18b08:	6ca6 7c87 4ce4 5cc5 2c22 3c03 0c60 1c41     .l.|.L.\",.<`.A.
   18b18:	edae fd8f cdec ddcd ad2a bd0b 8d68 9d49     ........*...h.I.
   18b28:	7e97 6eb6 5ed5 4ef4 3e13 2e32 1e51 0e70     .~.n.^.N.>2.Q.p.
   18b38:	ff9f efbe dfdd cffc bf1b af3a 9f59 8f78     ..........:.Y.x.
   18b48:	9188 81a9 b1ca a1eb d10c c12d f14e e16f     ..........-.N.o.
   18b58:	1080 00a1 30c2 20e3 5004 4025 7046 6067     .....0. .P%@Fpg`
   18b68:	83b9 9398 a3fb b3da c33d d31c e37f f35e     ........=.....^.
   18b78:	02b1 1290 22f3 32d2 4235 5214 6277 7256     .....".25B.RwbVr
   18b88:	b5ea a5cb 95a8 8589 f56e e54f d52c c50d     ........n.O.,...
   18b98:	34e2 24c3 14a0 0481 7466 6447 5424 4405     .4.$....ftGd$T.D
   18ba8:	a7db b7fa 8799 97b8 e75f f77e c71d d73c     ........_.~...<.
   18bb8:	26d3 36f2 0691 16b0 6657 7676 4615 5634     .&.6....Wfvv.F4V
   18bc8:	d94c c96d f90e e92f 99c8 89e9 b98a a9ab     L.m.../.........
   18bd8:	5844 4865 7806 6827 18c0 08e1 3882 28a3     DXeH.x'h.....8.(
   18be8:	cb7d db5c eb3f fb1e 8bf9 9bd8 abbb bb9a     }.\.?...........
   18bf8:	4a75 5a54 6a37 7a16 0af1 1ad0 2ab3 3a92     uJTZ7j.z.....*.:
   18c08:	fd2e ed0f dd6c cd4d bdaa ad8b 9de8 8dc9     ....l.M.........
   18c18:	7c26 6c07 5c64 4c45 3ca2 2c83 1ce0 0cc1     &|.ld\EL.<.,....
   18c28:	ef1f ff3e cf5d df7c af9b bfba 8fd9 9ff8     ..>.].|.........
   18c38:	6e17 7e36 4e55 5e74 2e93 3eb2 0ed1 1ef0     .n6~UNt^...>....

00018c48 <Sd::Mount(SdInterface::CardInfo_t*)::file>:
   18c48:	6473 682e 7070 ff00                         sd.hpp..

00018c50 <Sd::Mount(SdInterface::CardInfo_t*)::file>:
   18c50:	6473 682e 7070 ff00                         sd.hpp..

00018c58 <Sd::Mount(SdInterface::CardInfo_t*)::file>:
   18c58:	6473 682e 7070 ff00                         sd.hpp..

00018c60 <Sd::Mount(SdInterface::CardInfo_t*)::file>:
   18c60:	6473 682e 7070 ff00                         sd.hpp..

00018c68 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file>:
   18c68:	6473 682e 7070 ff00                         sd.hpp..

00018c70 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file>:
   18c70:	6473 682e 7070 ff00                         sd.hpp..

00018c78 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file>:
   18c78:	6473 682e 7070 ff00                         sd.hpp..

00018c80 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file>:
   18c80:	6473 682e 7070 ff00                         sd.hpp..

00018c88 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file>:
   18c88:	6473 682e 7070 ff00                         sd.hpp..

00018c90 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file>:
   18c90:	6473 682e 7070 ff00                         sd.hpp..

00018c98 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file>:
   18c98:	6473 682e 7070 ff00                         sd.hpp..

00018ca0 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file>:
   18ca0:	6473 682e 7070 ff00                         sd.hpp..

00018ca8 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file>:
   18ca8:	6473 682e 7070 ff00                         sd.hpp..

00018cb0 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file>:
   18cb0:	6473 682e 7070 ff00                         sd.hpp..

00018cb8 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file>:
   18cb8:	6473 682e 7070 ff00                         sd.hpp..

00018cc0 <Sd::DeleteBlock(unsigned long, unsigned long)::file>:
   18cc0:	6473 682e 7070 ff00                         sd.hpp..

00018cc8 <Sd::DeleteBlock(unsigned long, unsigned long)::file>:
   18cc8:	6473 682e 7070 ff00                         sd.hpp..

00018cd0 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)::file>:
   18cd0:	6473 682e 7070 ff00                         sd.hpp..

00018cd8 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)::file>:
   18cd8:	6473 682e 7070 ff00                         sd.hpp..

00018ce0 <vtable for Sd>:
	...
   18ce8:	62a5 0001 56fd 0001 57ad 0001 5bc1 0001     .b...V...W...[..
   18cf8:	5fd9 0001 6185 0001 6745 0001 678d 0001     ._...a..Eg...g..
   18d08:	67fd 0001                                   .g..

00018d0c <vtable for SdInterface>:
	...
   18d14:	6ae9 0001 6ae9 0001 6ae9 0001 6ae9 0001     .j...j...j...j..
   18d24:	6ae9 0001 6ae9 0001 6ae9 0001 6ae9 0001     .j...j...j...j..
   18d34:	6ae9 0001                                   .j..

00018d38 <vtable for Ssp>:
	...
   18d40:	4d7d 0001 06ed 0001 0765 0001 4e61 0001     }M......e...aN..
   18d50:	4f4d 0001 5159 0001 52b9 0001 54a5 0001     MO..YQ...R...T..
   18d60:	fffc ffff 0000 0000 0aa1 0001 0b31 0001     ............1...
   18d70:	0b89 0001 0ba1 0001 0bb5 0001 0bf5 0001     ................
   18d80:	0c25 0001                                   %...

00018d84 <vtable for SspInterface>:
	...
   18d8c:	6ae9 0001 6ae9 0001 6ae9 0001 6ae9 0001     .j...j...j...j..
   18d9c:	6ae9 0001 6ae9 0001 6ae9 0001 6ae9 0001     .j...j...j...j..

00018dac <vtable for SystemControllerInterface>:
	...
   18db4:	6ae9 0001 6ae9 0001 6ae9 0001 6ae9 0001     .j...j...j...j..
   18dc4:	6ae9 0001 6ae9 0001 6ae9 0001               .j...j...j..

00018dd0 <vtable for Gpio>:
	...
   18dd8:	43fd 0001 4479 0001 44f5 0001 05b5 0001     .C..yD...D......
   18de8:	0619 0001 067d 0001 4539 0001 45a5 0001     ....}...9E...E..
   18df8:	461d 0001 468d 0001 4925 0001 496d 0001     .F...F..%I..mI..
   18e08:	4735 0001 4791 0001 4815 0001 489d 0001     5G...G...H...H..

00018e18 <vtable for GpioInterface>:
	...
   18e20:	6ae9 0001 6ae9 0001 6ae9 0001 6ae9 0001     .j...j...j...j..
   18e30:	6ae9 0001 6ae9 0001 6ae9 0001 6ae9 0001     .j...j...j...j..
   18e40:	6ae9 0001 6ae9 0001 6ae9 0001 6ae9 0001     .j...j...j...j..
   18e50:	6ae9 0001 6ae9 0001 6ae9 0001 6ae9 0001     .j...j...j...j..

00018e60 <vtable for PinInterface>:
	...
   18e68:	6ae9 0001 6ae9 0001 6ae9 0001 6ae9 0001     .j...j...j...j..
   18e78:	6ae9 0001 6ae9 0001 6ae9 0001 6ae9 0001     .j...j...j...j..
   18e88:	6ae9 0001 6ae9 0001 6ae9 0001 6ae9 0001     .j...j...j...j..
   18e98:	6ae9 0001                                   .j..

00018e9c <Gpio::ClearInterruptEdge(GpioInterface::Edge)::__PRETTY_FUNCTION__>:
   18e9c:	6976 7472 6175 206c 6f76 6469 4720 6970     virtual void Gpi
   18eac:	3a6f 433a 656c 7261 6e49 6574 7272 7075     o::ClearInterrup
   18ebc:	4574 6764 2865 7047 6f69 6e49 6574 6672     tEdge(GpioInterf
   18ecc:	6361 3a65 453a 6764 2965 ff00               ace::Edge)..

00018ed8 <Gpio::ValidPortCheck()::__PRETTY_FUNCTION__>:
   18ed8:	6f62 6c6f 4720 6970 3a6f 563a 6c61 6469     bool Gpio::Valid
   18ee8:	6f50 7472 6843 6365 286b 0029               PortCheck().

00018ef4 <Gpio::SetInterruptEdge(GpioInterface::Edge)::__PRETTY_FUNCTION__>:
   18ef4:	6976 7472 6175 206c 6f76 6469 4720 6970     virtual void Gpi
   18f04:	3a6f 533a 7465 6e49 6574 7272 7075 4574     o::SetInterruptE
   18f14:	6764 2865 7047 6f69 6e49 6574 6672 6361     dge(GpioInterfac
   18f24:	3a65 453a 6764 2965 ff00 ffff               e::Edge)....

00018f30 <Sd::Mount(SdInterface::CardInfo_t*)::__PRETTY_FUNCTION__>:
   18f30:	6976 7472 6175 206c 6f62 6c6f 5320 3a64     virtual bool Sd:
   18f40:	4d3a 756f 746e 5328 4964 746e 7265 6166     :Mount(SdInterfa
   18f50:	6563 3a3a 6143 6472 6e49 6f66 745f 292a     ce::CardInfo_t*)
   18f60:	ff00 ffff                                   ....

00018f64 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::__PRETTY_FUNCTION__>:
   18f64:	6976 7472 6175 206c 6975 746e 5f38 2074     virtual uint8_t 
   18f74:	6453 3a3a 6552 6461 6c42 636f 286b 6975     Sd::ReadBlock(ui
   18f84:	746e 3233 745f 202c 6975 746e 5f38 2a74     nt32_t, uint8_t*
   18f94:	202c 6975 746e 3233 745f 0029               , uint32_t).

00018fa0 <Sd::DeleteBlock(unsigned long, unsigned long)::__PRETTY_FUNCTION__>:
   18fa0:	6976 7472 6175 206c 6975 746e 5f38 2074     virtual uint8_t 
   18fb0:	6453 3a3a 6544 656c 6574 6c42 636f 286b     Sd::DeleteBlock(
   18fc0:	6975 746e 3233 745f 202c 6975 746e 3233     uint32_t, uint32
   18fd0:	745f 0029                                   _t).

00018fd4 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)::__PRETTY_FUNCTION__>:
   18fd4:	6976 7472 6175 206c 6975 746e 3233 745f     virtual uint32_t
   18fe4:	5320 3a64 533a 6e65 4364 646d 5328 4964      Sd::SendCmd(SdI
   18ff4:	746e 7265 6166 6563 3a3a 6f43 6d6d 6e61     nterface::Comman
   19004:	2c64 7520 6e69 3374 5f32 2c74 7520 6e69     d, uint32_t, uin
   19014:	3874 745f 2c2a 7520 6e69 3374 5f32 2c74     t8_t*, uint32_t,
   19024:	5320 4964 746e 7265 6166 6563 3a3a 654b      SdInterface::Ke
   19034:	7065 6c41 7669 2965 ff00 ffff               epAlive)....

00019040 <__sf_fake_stderr>:
	...

00019060 <__sf_fake_stdin>:
	...

00019080 <__sf_fake_stdout>:
	...
