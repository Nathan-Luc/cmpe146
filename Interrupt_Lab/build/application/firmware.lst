
build/application/firmware.elf:     file format elf32-littlearm
build/application/firmware.elf
architecture: arm, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00012559

Program Header:
0x70000001 off    0x00019124 vaddr 0x00019124 paddr 0x00019124 align 2**2
         filesz 0x00000008 memsz 0x00000008 flags r--
    LOAD off    0x00010000 vaddr 0x00010000 paddr 0x00010000 align 2**16
         filesz 0x0000912c memsz 0x0000912c flags r-x
    LOAD off    0x00020000 vaddr 0x10000000 paddr 0x0001912c align 2**16
         filesz 0x0000023c memsz 0x0000023c flags rw-
    LOAD off    0x00020240 vaddr 0x10000240 paddr 0x10000240 align 2**16
         filesz 0x00000000 memsz 0x0000046c flags rw-
private flags = 5000400: [Version5 EABI] [hard-float ABI]

Sections:
Idx Name             Size      VMA       LMA       File off  Algn  Flags
  0 .text            00009124  00010000  00010000  00010000  2**4  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data            0000023c  10000000  0001912c  00020000  2**2  CONTENTS, ALLOC, LOAD, DATA
  2 .data_RAM2       00000000  20000000  20000000  0002023c  2**2  CONTENTS
  3 .bss             0000046c  10000240  10000240  00020240  2**3  ALLOC
  4 .ARM.exidx       00000008  00019124  00019124  00019124  2**2  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .uninit_RESERVED 00000000  10000000  10000000  0002023c  2**2  CONTENTS
  6 .noinit_RAM2     00000000  20000000  20000000  0002023c  2**2  CONTENTS
  7 .noinit          00000000  100006ac  100006ac  0002023c  2**2  CONTENTS
  8 .ARM.attributes  00000030  00000000  00000000  0002023c  2**0  CONTENTS, READONLY
  9 .comment         0000007e  00000000  00000000  0002026c  2**0  CONTENTS, READONLY
 10 .debug_info      00041a6d  00000000  00000000  000202ea  2**0  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev    0000498e  00000000  00000000  00061d57  2**0  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges   00000d20  00000000  00000000  000666e5  2**0  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges    00000c90  00000000  00000000  00067405  2**0  CONTENTS, READONLY, DEBUGGING
 14 .debug_line      00006976  00000000  00000000  00068095  2**0  CONTENTS, READONLY, DEBUGGING
 15 .debug_str       0001a1bf  00000000  00000000  0006ea0b  2**0  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame     00003394  00000000  00000000  00088bcc  2**2  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
00010000 l    d  .text	00000000 .text
10000000 l    d  .data	00000000 .data
20000000 l    d  .data_RAM2	00000000 .data_RAM2
10000240 l    d  .bss	00000000 .bss
00019124 l    d  .ARM.exidx	00000000 .ARM.exidx
10000000 l    d  .uninit_RESERVED	00000000 .uninit_RESERVED
20000000 l    d  .noinit_RAM2	00000000 .noinit_RAM2
100006ac l    d  .noinit	00000000 .noinit
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 interrupt.cpp
00012b34 l     F .text	0000002c NVIC_EnableIRQ
00012b60 l     F .text	00000054 NVIC_SetPriority
00010000 l     O .text	000000e4 kInterruptVectorTable
00017ccc l     O .text	0000000e InterruptLookupHandler::file
00017cdc l     O .text	0000001e InterruptLookupHandler::__PRETTY_FUNCTION__
0001022c l       .text	00000000 handler2_address_const
00000000 l    df *ABS*	00000000 startup.cpp
000178e0 l     O .text	00000049 Lpc40xxSystemController::SetPeripheralClockDivider(unsigned char)::__PRETTY_FUNCTION__
00017988 l     O .text	0000005c Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)::__PRETTY_FUNCTION__
0001792c l     O .text	0000005a Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)::__PRETTY_FUNCTION__
000179e4 l     O .text	0000003a Lpc40xxSystemController::SetCpuClockDivider(unsigned char)::__PRETTY_FUNCTION__
00017a20 l     O .text	0000003e Timer::Initialize(unsigned long, void (*)(), long)::__PRETTY_FUNCTION__
100000ac l     O .data	00000008 (anonymous namespace)::system_timer
100000b4 l     O .data	00000004 (anonymous namespace)::system_controller
100000b8 l     O .data	0000000c (anonymous namespace)::timer0
00012400 l     F .text	00000040 (anonymous namespace)::Lpc40xxUptime()
000177c8 l     O .text	0000000c LowLevelInit()::file
00017a60 l     O .text	00000014 LowLevelInit()::__PRETTY_FUNCTION__
000102fc l     O .text	00000004 kCrpWord
00012a48 l     F .text	000000dc __static_initialization_and_destruction_0(int, int)
00012b24 l     F .text	0000000e _GLOBAL__sub_I_UptimeRTOS
00000000 l    df *ABS*	00000000 /mnt/c/SJSU_Dev2/SJSU-Dev2/tools/gcc-arm-none-eabi-7-2017-q4-major/bin/../lib/gcc/arm-none-eabi/7.2.1/thumb/v7e-m/fpv4-sp/hard/crti.o
00000000 l    df *ABS*	00000000 /mnt/c/SJSU_Dev2/SJSU-Dev2/tools/gcc-arm-none-eabi-7-2017-q4-major/bin/../lib/gcc/arm-none-eabi/7.2.1/thumb/v7e-m/fpv4-sp/hard/crtn.o
00000000 l    df *ABS*	00000000 crtstuff.c
00010324 l     F .text	00000000 __do_global_dtors_aux
10000240 l       .bss	00000001 completed.9929
00010348 l     F .text	00000000 frame_dummy
10000244 l       .bss	00000018 object.9934
0001030c l     O .text	00000000 __frame_dummy_init_array_entry
00000000 l    df *ABS*	00000000 diskio.cpp
00018f5c l     O .text	0000001c Gpio::ValidPortCheck()::__PRETTY_FUNCTION__
00018f78 l     O .text	00000039 Gpio::SetInterruptEdge(GpioInterface::Edge)::__PRETTY_FUNCTION__
00018f20 l     O .text	0000003b Gpio::ClearInterruptEdge(GpioInterface::Edge)::__PRETTY_FUNCTION__
00018fb4 l     O .text	00000031 Sd::Mount(SdInterface::CardInfo_t*)::__PRETTY_FUNCTION__
00018fe8 l     O .text	0000003c Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::__PRETTY_FUNCTION__
00019024 l     O .text	00000034 Sd::DeleteBlock(unsigned long, unsigned long)::__PRETTY_FUNCTION__
00019058 l     O .text	00000069 Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)::__PRETTY_FUNCTION__
10000640 l     O .bss	00000068 (anonymous namespace)::sd_card
00016b20 l     F .text	00000050 __static_initialization_and_destruction_0(int, int)
00016b70 l     F .text	00000028 _GLOBAL__sub_I_disk_status
00000000 l    df *ABS*	00000000 LabGPIO.cpp
00000000 l    df *ABS*	00000000 main.cpp
10000360 l     O .bss	00000008 (anonymous namespace)::uptime
0001051c l     F .text	00000030 (anonymous namespace)::DefaultUptime()
000170b4 l     O .text	00000009 main::file
0001714c l     O .text	0000000b main::__PRETTY_FUNCTION__
00000000 l    df *ABS*	00000000 newlib.cpp
00000000 l    df *ABS*	00000000 tasks.c
100004c8 l     O .bss	00000064 pxReadyTasksLists
1000052c l     O .bss	00000004 uxTopReadyPriority
10000530 l     O .bss	00000004 xYieldPending
10000534 l     O .bss	00000004 uxSchedulerSuspended
10000538 l     O .bss	00000004 ulTaskSwitchedInTime
1000053c l     O .bss	00000004 ulTotalRunTime
00000000 l    df *ABS*	00000000 port.c
00012ff0 l       .text	00000000 pxCurrentTCBConst2
00013060 l       .text	00000000 pxCurrentTCBConst
00000000 l    df *ABS*	00000000 printf.cpp
00013068 l     F .text	00000030 _out_null(char, void*, unsigned int, unsigned int)
00013098 l     F .text	00000044 _out_char(char, void*, unsigned int, unsigned int)
000130dc l     F .text	00000044 _strlen(char const*)
00013120 l     F .text	00000044 _is_digit(char)
00013164 l     F .text	00000060 _atoi(char const**)
000131c4 l     F .text	0000025c _ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)
00013420 l     F .text	000000e4 _ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)
00013504 l     F .text	000000f4 _ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)
00017cfc l     O .text	00000028 _ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)::pow10
000135f8 l     F .text	00000438 _ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)
00013a30 l     F .text	000008f4 _vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)
00000000 l    df *ABS*	00000000 pure.cc
00000000 l    df *ABS*	00000000 eh_terminate.cc
00000000 l    df *ABS*	00000000 sf_round.c
00000000 l    df *ABS*	00000000 _arm_truncdfsf2.o
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 abort.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 signal.c
00000000 l    df *ABS*	00000000 signalr.c
00000000 l    df *ABS*	00000000 findfp.c
00000000 l    df *ABS*	00000000 eh_term_handler.cc
00000000 l    df *ABS*	00000000 impure.c
100001dc l     O .data	00000060 impure_data
00000000 l    df *ABS*	00000000 reent.c
00010c68  w    F .text	0000003e Lpc40xxSystemController::GetPeripheralFrequency() const
00012dd8 g     F .text	00000038 putchar
00012bb4  w    F .text	0000006c Pwm0IrqHandler
0001895c  w    O .text	00000009 Gpio::SetInterruptEdge(GpioInterface::Edge)::file
00010218 g     F .text	0000001c HardFaultHandler
00012d48 g     F .text	00000024 _getpid
00012d9c g     F .text	0000003c _putchar
00012bb4  w    F .text	0000006c EepromIrqHandler
00012bb4  w    F .text	0000006c Timer2IrqHandler
10000098  w    O .data	00000014 uart0
00012edc g     F .text	0000002c GetStackDepth()
00018ccc  w    O .text	00000007 Sd::Mount(SdInterface::CardInfo_t*)::file
00014c64  w    F .text	00000024 Lpc40xxSystemController::Lpc40xxSystemController()
00017790  w    O .text	00000004 Timer::kTimerIrq
00018d04  w    O .text	00000007 Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file
0001708c g     F .text	00000024 _kill_r
0001010c g       .text	00000000 bss_section_table_end
00014324 g     F .text	0000004c printf
10000030  w    O .data	00000004 SystemTimer::sys_tick
00012bb4  w    F .text	0000006c I2c1IrqHandler
00012600  w    F .text	0000003c void Timer::TimerHandler<(TimerInterface::TimerPort)2>()
10000048  w    O .data	00000010 Uart::uart
00018d34  w    O .text	00000007 Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file
00010000 g       *ABS*	00000000 __vectors_start__
0001054c  w    F .text	00000044 Milliseconds()
00010dcc  w    F .text	00000110 Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)
00014c88  w    F .text	00000034 SspInterface::SspInterface()
00012bb4  w    F .text	0000006c BusFaultHandler
100003c0 g     O .bss	00000100 stack_trace
10000034  w    O .data	00000004 Pin::pin_map
00011c4c  w    F .text	000000e4 Uart::Initialize(unsigned long)
20000000 g       *ABS*	00000000 __base_RAM2
0001912c g       .ARM.exidx	00000000 __exidx_end
00014b54  w    F .text	0000007c Gpio::ClearEdgeRising()
000110b4  w    F .text	00000030 Lpc40xxSystemController::SetEmcClockDivider(Lpc40xxSystemController::EmcDivider)
00018950  w    O .text	00000009 Gpio::ValidPortCheck()::file
000103bc g     F .text	0000012c LabGPIO::GpioInterruptHandler()
100004c4 g     O .bss	00000004 pxCurrentTCB
00014370  w    F .text	00000034 PinInterface::PinInterface()
000104e8 g     F .text	00000034 LabGPIO::EnableInterrupts()
00012e98 g     F .text	0000001c __cyg_profile_func_exit
000167f4  w    F .text	00000048 Sd::Crc7Add(unsigned char, unsigned char)
0001570c  w    F .text	000000a0 Sd::Sd(Sd::DebugSdCard_t, unsigned char, unsigned char, unsigned char, unsigned char)
00012868  w    F .text	000000a0 void Timer::ClearInterrupts<(TimerInterface::TimerPort)1>()
100006a8 g     O .bss	00000004 errno
0001912c g       .ARM.exidx	00000000 _etext
10000028  w    O .data	00000004 Lpc40xxSystemController::system_controller
00010b54  w    F .text	00000090 Lpc40xxSystemController::SetClockFrequency(unsigned char)
00011a1c  w    F .text	00000030 unsigned char util::Value<TimerInterface::MatchControlRegister, unsigned char>(TimerInterface::MatchControlRegister)
00010c54  w    F .text	00000014 Lpc40xxSystemController::GetSystemFrequency() const
00012210  w    F .text	000001f0 Uart::GenerateUartCalibration(float)
10000004  w    O .data	00000018 Gpio::gpio_port
00011a4c  w    F .text	000000f8 Timer::SetTimer(unsigned long, TimerInterface::TimerIsrCondition, TimerInterface::MatchControlRegister)
00012480  w    F .text	000000bc LowLevelInit()
00012bb4  w    F .text	0000006c LcdIrqHandler
00018d5c  w    O .text	00000007 Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)::file
00080000 g       *ABS*	00000000 __top_MFlash512
0001088c  w    F .text	0000006c Ssp::Transfer(unsigned short)
00011eb0  w    F .text	000000f8 Uart::Receive(unsigned long)
00010d6c  w    F .text	00000030 Lpc40xxSystemController::SelectUsbClockSource(Lpc40xxSystemController::UsbSource)
000106ac  w    F .text	00000030 Delay(unsigned long long)
000177b8  w    O .text	00000010 Uart::kPowerbit
00012bb4  w    F .text	0000006c I2c2IrqHandler
10000368  w    O .bss	00000004 SystemTimer::system_timer_isr
00014a1c  w    F .text	00000040 Gpio::DetachInterrupt()
00012bb4  w    F .text	0000006c CanIrqHandler
00011768  w    F .text	00000074 Pin::EnableDac(bool)
00011498  w    F .text	0000007c Pin::SetAsAnalogMode(bool)
0001104c  w    F .text	00000068 Lpc40xxSystemController::SetCpuClockDivider(unsigned char)
000168ac  w    F .text	000000fc Sd::GetCrc16(unsigned char*, unsigned short)
00016cc4 g     F .text	00000000 .hidden __aeabi_uldivmod
100006ac g       .noinit	00000000 _noinit
00012e10 g     F .text	00000060 puts
100000c4 g     O .data	000000e4 dynamic_isr_vector_table
0001473c  w    F .text	0000002c Gpio::GetPin()
000147e4  w    F .text	0000005c Gpio::SetInterruptRoutine(void (*)())
000143fc  w    F .text	00000034 GpioInterface::GpioInterface()
00014c88  w    F .text	00000034 SspInterface::SspInterface()
00012bb4  w    F .text	0000006c RitIrqHandler
00012bb4  w    F .text	0000006c Uart2IrqHandler
000117dc  w    F .text	00000064 Pin::BitPlace(unsigned long, unsigned long, unsigned long, unsigned long)
00017768  w    O .text	00000016 Lpc40xxSystemController::SetCpuClockDivider(unsigned char)::file
00018cec  w    O .text	00000007 Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file
00015208  w    F .text	00000160 Ssp::GetPeripheralMode()
00012908  w    F .text	000000a0 void Timer::ClearInterrupts<(TimerInterface::TimerPort)2>()
00016bc4 g     F .text	00000060 roundf
0001702c g     F .text	00000050 _raise_r
000105bc  w    F .text	0000002c Wait(unsigned long long)::{lambda()#1}::_FUN()
000107e8  w    F .text	0000002c int util::Value<Ssp::Peripheral, int>(Ssp::Peripheral)
00014cbc  w    F .text	00000038 PinInterface::PinInterface(PinInterface const&)
10010000 g       *ABS*	00000000 __top_RAM
000177b4  w    O .text	00000004 Uart::kRxUartPortFunction
00013000 g     F .text	00000066 xPortPendSVHandler
000105e8  w    F .text	000000c4 Wait(unsigned long long)
000156d8  w    F .text	00000034 SdInterface::SdInterface()
00011b44  w    F .text	0000003c Timer::GetTimer()
10000000 g       *ABS*	00000000 __base_RamLoc64
00012eb4 g     F .text	00000028 GetStackTrace()
100001a8 g     O .data	00000004 out
1000002c  w    O .data	00000004 Lpc40xxSystemController::speed_in_hertz
00018d3c  w    O .text	00000007 Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file
00018d24  w    O .text	00000007 Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file
000170b0 g     F .text	00000004 _getpid_r
00000000 g       *ABS*	00000000 __base_MFlash512
00018dbc  w    O .text	0000004c vtable for Ssp
10010000 g       *ABS*	00000000 StackTop
00015bbc  w    F .text	00000064 Sd::WaitToReadBlock()
00018974  w    O .text	00000003 Ssp::kPinSelect
00016cf4 g     F .text	000002cc .hidden __udivmoddi4
00012bb4  w    F .text	0000006c I2sIrqHandler
000100fc g       .text	00000000 bss_section_table
00010300 g       .text	00000000 __CRP_WORD_END__
20008000 g       *ABS*	00000000 __top_RAM2
00012558 g     F .text	00000030 ResetIsr
00015b78  w    F .text	00000044 Sd::ToBool(bool)
00018e08  w    O .text	00000028 vtable for SspInterface
00012bb4  w    F .text	0000006c PendSVHandler
00014f6c  w    F .text	00000030 unsigned char util::Value<SspInterface::DataSize, unsigned char>(SspInterface::DataSize)
00011154  w    F .text	00000034 SystemTimer::SetIsrFunction(void (*)())
000109e0  w    F .text	00000044 bool bit::Read<unsigned long>(unsigned long, unsigned long)
00010814  w    F .text	00000078 Ssp::IsTransferRegBusy()
00012bb4  w    F .text	0000006c UsageFaultHandler
20000000 g       *ABS*	00000000 __user_heap_base
00019124 g       .text	00000000 __exidx_start
00011680  w    F .text	00000074 Pin::EnableI2cHighCurrentDrive(bool)
00012bb4  w    F .text	0000006c Uart4IrqHandler
00014840  w    F .text	00000054 Gpio::ClearInterruptRoutine()
00011604  w    F .text	0000007c Pin::EnableI2cHighSpeedMode(bool)
000101fc g     F .text	00000018 InitFpu()
00011514  w    F .text	0000007c Pin::EnableDigitalFilter(bool)
00016fd4 g     F .text	00000048 __libc_init_array
00012bb4 g     F .text	0000006c InterruptLookupHandler
00010d9c  w    F .text	00000030 Lpc40xxSystemController::SelectSpifiClockSource(Lpc40xxSystemController::SpifiSource)
00010c3c  w    F .text	00000018 Lpc40xxSystemController::GetPeripheralClockDivider() const
10000000  w    O .data	00000004 Uptime
00018e9c  w    O .text	00000048 vtable for GpioInterface
00011d7c  w    F .text	000000e8 Uart::Send(unsigned char)
00016fc4 g     F .text	0000000e abort
00012bb4  w    F .text	0000006c BodIrqHandler
00015554  w    F .text	00000184 Ssp::GetClock()
00010300 g     F .text	00000000 _init
0001010c g       .text	00000000 section_table_end
000129a8  w    F .text	000000a0 void Timer::ClearInterrupts<(TimerInterface::TimerPort)3>()
00016bb8 g     F .text	0000000a std::terminate()
00016c24 g     F .text	0000009e .hidden __aeabi_d2f
00014bd0  w    F .text	0000007c Gpio::ClearEdgeFalling()
00012bb4  w    F .text	0000006c SysTickHandler
000100e4 g       .text	00000000 section_table_start
100006ac g       .bss	00000000 _ebss
00014ad8  w    F .text	0000007c Gpio::SetEdgeFalling()
00018cfc  w    O .text	00000007 Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file
00012bb4  w    F .text	0000006c RtcIrqHandler
000146cc  w    F .text	00000070 Gpio::Read()
00012678  w    F .text	000000a8 Status Wait<Uart::Send(unsigned char)::{lambda()#1}>(unsigned long long, Uart::Send(unsigned char)::{lambda()#1})
eff829ba g       *ABS*	00000000 ValidUserCodeChecksum
00012bb4  w    F .text	0000006c Uart0IrqHandler
00012c7c g     F .text	00000078 GetRegistersFromStack
000169a8  w    F .text	0000003c unsigned long bit::Set<unsigned long>(unsigned long, unsigned long)
00018ee4  w    O .text	0000003c vtable for PinInterface
00012bb4  w    F .text	0000006c UsbIrqHandler
00012bb4  w    F .text	0000006c AdcIrqHandler
00011e64  w    F .text	0000004c Uart::Receive(unsigned long)::{lambda()#1}::operator()() const
00010b24  w    F .text	00000030 SetUptimeFunction(unsigned long long (*)())
00010364 g     F .text	00000058 LabGPIO::LabGPIO(unsigned char, unsigned char)
000190c4 g     O .text	00000020 __sf_fake_stderr
000189cc  w    O .text	00000100 Sd::kCrcTable8
00016ba8 g     F .text	00000010 std::get_terminate()
00012118  w    F .text	00000074 Uart::FractionalEstimate(float, float)
000148c4  w    F .text	00000088 Gpio::SetInterruptEdge(GpioInterface::Edge)
00012bb4  w    F .text	0000006c EnetIrqHandler
00012bb4  w    F .text	0000006c DmaIrqHandler
0001010c g     F .text	00000090 InitDataSection()
00012c20 g     F .text	0000005c RegisterIsr(IRQn, void (*)(), bool, long)
00000000 g       *ABS*	00000000 __base_Flash
00012bb4  w    F .text	0000006c Eint1IrqHandler
1000001c  w    O .data	0000000c Ssp::ssp_registers
00012bb4  w    F .text	0000006c SvcHandler
00012bb4  w    F .text	0000006c GpioIrqHandler
00018d4c  w    O .text	00000007 Sd::DeleteBlock(unsigned long, unsigned long)::file
00012bb4  w    F .text	0000006c SdioIrqHandler
10010000 g       *ABS*	00000000 __top_RamLoc64
10000240 g       .bss	00000000 _bss
00018ce4  w    O .text	00000007 Sd::Mount(SdInterface::CardInfo_t*)::file
00012bb4  w    F .text	0000006c Pll1IrqHandler
00012bb4  w    F .text	0000006c MemManageHandler
00016b98 g     F .text	00000006 __cxa_pure_virtual
00012bb4  w    F .text	0000006c Pwm1IrqHandler
00014894  w    F .text	00000030 unsigned char util::Value<GpioInterface::Edge, unsigned char>(GpioInterface::Edge)
00012bb4  w    F .text	0000006c Timer0IrqHandler
00012720  w    F .text	000000a8 Status Wait<Uart::Receive(unsigned long)::{lambda()#1}>(unsigned long long, Uart::Receive(unsigned long)::{lambda()#1})
00080000 g       *ABS*	00000000 __top_Flash
0001218c  w    F .text	00000084 Uart::IsDecmial(float)
00015368  w    F .text	000001ec Ssp::SetClock(bool, bool, unsigned char, unsigned char)
100006ac g       .noinit	00000000 _end_noinit
000110e4  w    F .text	0000003c SystemTimer::DisableTimer()
00016234  w    F .text	00000120 Sd::DeleteBlock(unsigned long, unsigned long)
00012f08 g     F .text	000000c8 vTaskSwitchContext
00016a58  w    F .text	00000054 unsigned long bit::Extract<unsigned long>(unsigned long, unsigned long, unsigned long)
000143a4  w    F .text	00000058 Pin::Pin(unsigned char, unsigned char)
00014fcc  w    F .text	00000030 unsigned char util::Value<SspInterface::MasterSlaveMode, unsigned char>(SspInterface::MasterSlaveMode)
00018d0c  w    O .text	00000007 Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file
000177b0  w    O .text	00000004 Uart::kTxUartPortFunction
00012bb4  w    F .text	0000006c Uart3IrqHandler
00014c4c  w    F .text	00000018 SystemControllerInterface::SystemControllerInterface()
00018d44  w    O .text	00000007 Sd::DeleteBlock(unsigned long, unsigned long)::file
20000000 g       *ABS*	00000000 __base_RamPeriph32
00018968  w    O .text	00000009 Gpio::ClearInterruptEdge(GpioInterface::Edge)::file
100004c0 g     O .bss	00000004 stack_depth
000145e8  w    F .text	0000006c Gpio::Toggle()
00018d1c  w    O .text	00000007 Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file
00018acc  w    O .text	00000200 Sd::kCrcTable16
10000540  w    O .bss	00000100 Gpio::interrupthandlers
00016fc0  w    F .text	00000002 .hidden __aeabi_ldiv0
00012bb4  w    F .text	0000006c Timer1IrqHandler
000120a4  w    F .text	00000074 Uart::DividerEstimate(float, float)
000106dc  w    F .text	00000064 Gpio::SetHigh()
00011fa8  w    F .text	000000fc Uart::FindClosestFractional(float)
00014d48  w    F .text	000000e4 Ssp::Ssp(Ssp::Peripheral)
000100e4 g       .text	00000000 data_section_table
00011330  w    F .text	00000080 Pin::SetMode(PinInterface::Mode)
00017720  w    O .text	00000016 Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)::file
00015c20  w    F .text	00000050 Sd::WaitWhileBusy()
00011224  w    F .text	00000094 SystemTimer::SetTickFrequency(unsigned long)
000190e4 g     O .text	00000020 __sf_fake_stdin
00016aac  w    F .text	00000074 unsigned long bit::Insert<unsigned long, bool>(unsigned long, bool, unsigned long, unsigned long)
000102fc g       .text	00000000 __CRP_WORD_START__
00017794  w    O .text	00000010 Timer::kTimerIsr
000149d4  w    F .text	00000048 Gpio::AttachInterrupt(void (*)(), GpioInterface::Edge)
00012bb4  w    F .text	0000006c Uart1IrqHandler
000144ac  w    F .text	0000007c Gpio::SetAsInput()
00012e70 g     F .text	00000028 __cyg_profile_func_enter
0001701c g     F .text	00000010 memset
000108f8 g     F .text	0000003c main
0001570c  w    F .text	000000a0 Sd::Sd(Sd::DebugSdCard_t, unsigned char, unsigned char, unsigned char, unsigned char)
100001ac  w    O .data	00000028 Gpio::interrupt
000118c8  w    F .text	00000020 Timer::DoNothingIsr()
00012bb4  w    F .text	0000006c QeiIrqHandler
20000000 g       *ABS*	00000000 heap
00012bb4  w    F .text	0000006c Ssp2IrqHandler
00011840  w    F .text	0000002c Pin::GetPort() const
00016088  w    F .text	000001ac Sd::WriteBlock(unsigned long, unsigned char const*, unsigned long)
000143a4  w    F .text	00000058 Pin::Pin(unsigned char, unsigned char)
00016c24 g     F .text	0000009e .hidden __truncdfsf2
00010318 g       .text	00000000 __init_array_end
00012fd0 g     F .text	00000026 vPortSVCHandler
00012cf4 g     F .text	0000003c FirmwareStdOut(int)
00018d64  w    O .text	0000002c vtable for Sd
0001494c  w    F .text	00000088 Gpio::ClearInterruptEdge(GpioInterface::Edge)
00012bb4  w    F .text	0000006c Ssp1IrqHandler
00012588  w    F .text	0000003c void Timer::TimerHandler<(TimerInterface::TimerPort)0>()
000189c0  w    O .text	0000000c Ssp::kPowerBit
0001186c  w    F .text	0000002c Pin::GetPin() const
00011b80  w    F .text	000000cc Uart::SetBaudRate(unsigned long)
000145a4  w    F .text	00000044 Gpio::SetDirection(GpioInterface::Direction)
000177d4  w    O .text	0000003c vtable for Uart
00014528  w    F .text	0000007c Gpio::SetAsOutput()
00018d2c  w    O .text	00000007 Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file
00010edc  w    F .text	00000170 Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)
00010740  w    F .text	00000064 Gpio::SetLow()
000178bc  w    O .text	00000024 vtable for Lpc40xxSystemController
00015c70  w    F .text	00000418 Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)
00018d54  w    O .text	00000007 Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)::file
00017708  w    O .text	00000016 Lpc40xxSystemController::SetPeripheralClockDivider(unsigned char)::file
0001253c g     F .text	0000001a SystemInit
000118e8  w    F .text	00000134 Timer::Initialize(unsigned long, void (*)(), long)
00010ca8  w    F .text	00000030 Lpc40xxSystemController::PowerUpPeripheral(SystemControllerInterface::PeripheralID const&)
20008000 g       *ABS*	00000000 heap_end
00014e2c  w    F .text	000000e4 Ssp::Initialize()
00017810  w    O .text	00000038 vtable for Timer
00014cbc  w    F .text	00000038 PinInterface::PinInterface(PinInterface const&)
10000038  w    O .data	00000010 Timer::tim_register
00012bb4  w    F .text	0000006c Ssp0IrqHandler
00010364 g     F .text	00000058 LabGPIO::LabGPIO(unsigned char, unsigned char)
00010318 g     F .text	00000000 _fini
00012bb4  w    F .text	0000006c UsbactivityIrqHandler
000107a4  w    F .text	00000044 Gpio::Set(GpioInterface::State)
00012bb4  w    F .text	0000006c Pll0IrqHandler
00014cf4  w    F .text	00000054 Pin::Pin(Pin const&)
000100fc g       .text	00000000 data_section_table_end
00012bb4  w    F .text	0000006c CanactivityIrqHandler
00012bb4  w    F .text	0000006c NmiHandler
00018978  w    O .text	00000048 Ssp::kSspPinMatrix
00014654  w    F .text	00000078 Gpio::ReadState()
00018cf4  w    O .text	00000007 Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file
100001d8 g     O .data	00000004 _impure_ptr
00010934  w    F .text	000000ac Status Wait<Wait(unsigned long long)::{lambda()#1}>(unsigned long long, Wait(unsigned long long)::{lambda()#1})
10000000 g       .uninit_RESERVED	00000000 _end_uninit_RESERVED
0001683c  w    F .text	00000070 Sd::GetCrc7(unsigned char*, unsigned char)
00012bb4  w    F .text	0000006c McpwmIrqHandler
0001030c g       .text	00000000 __preinit_array_end
00012bb4  w    F .text	0000006c WdtIrqHandler
00010590  w    F .text	0000002c Wait(unsigned long long)::{lambda()#1}::operator()() const
00016354  w    F .text	000004a0 Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)
00014c64  w    F .text	00000024 Lpc40xxSystemController::Lpc40xxSystemController()
00017848  w    O .text	0000003c vtable for Pin
10000000 g       .data	00000000 _data
00011424  w    F .text	00000074 Pin::SetAsActiveLow(bool)
00010d3c  w    F .text	00000030 Lpc40xxSystemController::SelectMainClockSource(Lpc40xxSystemController::MainClockSource)
00014a5c  w    F .text	0000007c Gpio::SetEdgeRising()
00018cd4  w    O .text	00000007 Sd::Mount(SdInterface::CardInfo_t*)::file
00011898  w    F .text	00000030 unsigned char util::Value<TimerInterface::TimerPort, unsigned char>(TimerInterface::TimerPort)
100003ac  w    O .bss	00000010 Timer::user_timer_isr
00017738  w    O .text	00000016 Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)::file
1000036c  w    O .bss	00000040 Timer::match
00011d30  w    F .text	0000004c Uart::Send(unsigned char)::{lambda()#1}::operator()() const
0001585c  w    F .text	0000031c Sd::Mount(SdInterface::CardInfo_t*)
100001d4 g     O .data	00000004 __cxxabiv1::__terminate_handler
00018e30  w    O .text	00000024 vtable for SystemControllerInterface
00018e54  w    O .text	00000048 vtable for Gpio
1000023c g       .data	00000000 _edata
00017780  w    O .text	00000010 Timer::kPowerbit
000125c4  w    F .text	0000003c void Timer::TimerHandler<(TimerInterface::TimerPort)1>()
000113b0  w    F .text	00000074 Pin::EnableHysteresis(bool)
000143fc  w    F .text	00000034 GpioInterface::GpioInterface()
00012bb4  w    F .text	0000006c DebugMonHandler
00014768  w    F .text	0000007c Gpio::ValidPortCheck()
00012bb4  w    F .text	0000006c Eint2IrqHandler
20008000 g       *ABS*	00000000 __top_RamPeriph32
00014d48  w    F .text	000000e4 Ssp::Ssp(Ssp::Peripheral)
00012bb4  w    F .text	0000006c Timer3IrqHandler
10000000 g       *ABS*	00000000 __base_RAM
00012bb4  w    F .text	0000006c Eint3IrqHandler
00016b9e g     F .text	00000008 __cxxabiv1::__terminate(void (*)())
00012d6c g     F .text	00000030 _kill
00012bb4  w    F .text	0000006c I2c0IrqHandler
00014cf4  w    F .text	00000054 Pin::Pin(Pin const&)
000177a4  w    O .text	0000000a Timer::Initialize(unsigned long, void (*)(), long)::file
00011120  w    F .text	00000034 SystemTimer::SystemTimerHandler()
00018cdc  w    O .text	00000007 Sd::Mount(SdInterface::CardInfo_t*)::file
00019104 g     O .text	00000020 __sf_fake_stdout
00010a24  w    F .text	00000100 debug::PrintBacktrace(bool, void*)
0001030c g       .text	00000000 __init_array_start
00016fc0  w    F .text	00000002 .hidden __aeabi_idiv0
00018d90  w    O .text	0000002c vtable for SdInterface
000157ac  w    F .text	000000b0 Sd::Initialize()
00012d30 g     F .text	00000018 _exit
00011590  w    F .text	00000074 Pin::EnableFastMode(bool)
000127c8  w    F .text	000000a0 void Timer::ClearInterrupts<(TimerInterface::TimerPort)0>()
00012bb4  w    F .text	0000006c Eint0IrqHandler
00011188  w    F .text	0000009c SystemTimer::StartTimer()
00014f9c  w    F .text	00000030 unsigned char util::Value<SspInterface::FrameMode, unsigned char>(SspInterface::FrameMode)
0001019c g     F .text	00000060 InitBssSection()
00014430  w    F .text	0000007c Gpio::Gpio(unsigned char, unsigned char)
00012440 g     F .text	00000040 UptimeRTOS
000116f4  w    F .text	00000074 Pin::SetAsOpenDrain(bool)
1000025c g     O .bss	00000100 LabGPIO::pin_isr_map
00017884  w    O .text	00000038 vtable for SystemTimer
00012bb4  w    F .text	0000006c SpiIrqHandler
00018d14  w    O .text	00000007 Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file
00014f10  w    F .text	0000005c Ssp::SetSpiMasterDefault()
10000058  w    O .data	00000040 Uart::pairs
00014c4c  w    F .text	00000018 SystemControllerInterface::SystemControllerInterface()
00010cd8  w    F .text	00000030 Lpc40xxSystemController::PowerDownPeripheral(SystemControllerInterface::PeripheralID const&)
000156d8  w    F .text	00000034 SdInterface::SdInterface()
0001030c g       .text	00000000 __preinit_array_start
00017750  w    O .text	00000016 Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)::file
00010d08  w    F .text	00000034 Lpc40xxSystemController::SelectOscillatorSource(Lpc40xxSystemController::OscillatorSource)
100003bc  w    O .bss	00000004 guard variable for Timer::match
00014ffc  w    F .text	0000020c Ssp::SetPeripheralMode(SspInterface::MasterSlaveMode, SspInterface::FrameMode, SspInterface::DataSize)
000112b8  w    F .text	00000078 Pin::SetPinFunction(unsigned char)
000169e4  w    F .text	00000074 unsigned long bit::Insert<unsigned long, unsigned char>(unsigned long, unsigned char, unsigned long, unsigned long)
00014370  w    F .text	00000034 PinInterface::PinInterface()
00010be4  w    F .text	00000058 Lpc40xxSystemController::SetPeripheralClockDivider(unsigned char)
00014430  w    F .text	0000007c Gpio::Gpio(unsigned char, unsigned char)
0001263c  w    F .text	0000003c void Timer::TimerHandler<(TimerInterface::TimerPort)3>()
0001707c g     F .text	00000010 raise



Disassembly of section .text:

00010000 <kInterruptVectorTable>:
   10000:	00 00 01 10 59 25 01 00 b5 2b 01 00 19 02 01 00     ....Y%...+......
   10010:	b5 2b 01 00 b5 2b 01 00 b5 2b 01 00 ba 29 f8 ef     .+...+...+...)..
	...
   1002c:	d1 2f 01 00 b5 2b 01 00 00 00 00 00 01 30 01 00     ./...+.......0..
   1003c:	b5 2b 01 00 b5 2b 01 00 b5 2b 01 00 b5 2b 01 00     .+...+...+...+..
   1004c:	b5 2b 01 00 b5 2b 01 00 b5 2b 01 00 b5 2b 01 00     .+...+...+...+..
   1005c:	b5 2b 01 00 b5 2b 01 00 b5 2b 01 00 b5 2b 01 00     .+...+...+...+..
   1006c:	b5 2b 01 00 b5 2b 01 00 00 00 00 00 b5 2b 01 00     .+...+.......+..
   1007c:	b5 2b 01 00 b5 2b 01 00 b5 2b 01 00 b5 2b 01 00     .+...+...+...+..
   1008c:	b5 2b 01 00 b5 2b 01 00 b5 2b 01 00 b5 2b 01 00     .+...+...+...+..
   1009c:	b5 2b 01 00 b5 2b 01 00 b5 2b 01 00 b5 2b 01 00     .+...+...+...+..
   100ac:	b5 2b 01 00 b5 2b 01 00 b5 2b 01 00 b5 2b 01 00     .+...+...+...+..
   100bc:	b5 2b 01 00 b5 2b 01 00 b5 2b 01 00 b5 2b 01 00     .+...+...+...+..
   100cc:	b5 2b 01 00 b5 2b 01 00 b5 2b 01 00 b5 2b 01 00     .+...+...+...+..
   100dc:	b5 2b 01 00 b5 2b 01 00                             .+...+..

000100e4 <data_section_table>:
   100e4:	0001912c 	.word	0x0001912c
   100e8:	10000000 	.word	0x10000000
   100ec:	0000023c 	.word	0x0000023c
   100f0:	0001912c 	.word	0x0001912c
   100f4:	20000000 	.word	0x20000000
   100f8:	00000000 	.word	0x00000000

000100fc <bss_section_table>:
   100fc:	10000240 	.word	0x10000240
   10100:	0000046c 	.word	0x0000046c
   10104:	20000000 	.word	0x20000000
   10108:	00000000 	.word	0x00000000

0001010c <InitDataSection()>:
SJ2_IGNORE_STACK_TRACE(void SystemInit());

// Functions to carry out the initialization of RW and BSS data sections.
SJ2_SECTION(".after_vectors")
void InitDataSection()
{
   1010c:	b086      	sub	sp, #24
  for (int i = 0; &data_section_table[i] < &data_section_table_end; i++)
   1010e:	2300      	movs	r3, #0
   10110:	9305      	str	r3, [sp, #20]
   10112:	9a05      	ldr	r2, [sp, #20]
   10114:	4613      	mov	r3, r2
   10116:	005b      	lsls	r3, r3, #1
   10118:	4413      	add	r3, r2
   1011a:	009b      	lsls	r3, r3, #2
   1011c:	4a1d      	ldr	r2, [pc, #116]	; (10194 <InitDataSection()+0x88>)
   1011e:	4413      	add	r3, r2
   10120:	4a1d      	ldr	r2, [pc, #116]	; (10198 <InitDataSection()+0x8c>)
   10122:	4293      	cmp	r3, r2
   10124:	d233      	bcs.n	1018e <InitDataSection()+0x82>
  {
    uint32_t * rom_location = data_section_table[i].rom_location;
   10126:	491b      	ldr	r1, [pc, #108]	; (10194 <InitDataSection()+0x88>)
   10128:	9a05      	ldr	r2, [sp, #20]
   1012a:	4613      	mov	r3, r2
   1012c:	005b      	lsls	r3, r3, #1
   1012e:	4413      	add	r3, r2
   10130:	009b      	lsls	r3, r3, #2
   10132:	440b      	add	r3, r1
   10134:	681b      	ldr	r3, [r3, #0]
   10136:	9303      	str	r3, [sp, #12]
    uint32_t * ram_location = data_section_table[i].ram_location;
   10138:	4916      	ldr	r1, [pc, #88]	; (10194 <InitDataSection()+0x88>)
   1013a:	9a05      	ldr	r2, [sp, #20]
   1013c:	4613      	mov	r3, r2
   1013e:	005b      	lsls	r3, r3, #1
   10140:	4413      	add	r3, r2
   10142:	009b      	lsls	r3, r3, #2
   10144:	440b      	add	r3, r1
   10146:	685b      	ldr	r3, [r3, #4]
   10148:	9302      	str	r3, [sp, #8]
    uint32_t length         = data_section_table[i].length;
   1014a:	4912      	ldr	r1, [pc, #72]	; (10194 <InitDataSection()+0x88>)
   1014c:	9a05      	ldr	r2, [sp, #20]
   1014e:	4613      	mov	r3, r2
   10150:	005b      	lsls	r3, r3, #1
   10152:	4413      	add	r3, r2
   10154:	009b      	lsls	r3, r3, #2
   10156:	440b      	add	r3, r1
   10158:	3308      	adds	r3, #8
   1015a:	681b      	ldr	r3, [r3, #0]
   1015c:	9301      	str	r3, [sp, #4]
    for (size_t j = 0; j < length; j++)
   1015e:	2300      	movs	r3, #0
   10160:	9304      	str	r3, [sp, #16]
   10162:	9a04      	ldr	r2, [sp, #16]
   10164:	9b01      	ldr	r3, [sp, #4]
   10166:	429a      	cmp	r2, r3
   10168:	d20d      	bcs.n	10186 <InitDataSection()+0x7a>
    {
      ram_location[j] = rom_location[j];
   1016a:	9b04      	ldr	r3, [sp, #16]
   1016c:	009b      	lsls	r3, r3, #2
   1016e:	9a03      	ldr	r2, [sp, #12]
   10170:	441a      	add	r2, r3
   10172:	9b04      	ldr	r3, [sp, #16]
   10174:	009b      	lsls	r3, r3, #2
   10176:	9902      	ldr	r1, [sp, #8]
   10178:	440b      	add	r3, r1
   1017a:	6812      	ldr	r2, [r2, #0]
   1017c:	601a      	str	r2, [r3, #0]
    for (size_t j = 0; j < length; j++)
   1017e:	9b04      	ldr	r3, [sp, #16]
   10180:	3301      	adds	r3, #1
   10182:	9304      	str	r3, [sp, #16]
   10184:	e7ed      	b.n	10162 <InitDataSection()+0x56>
  for (int i = 0; &data_section_table[i] < &data_section_table_end; i++)
   10186:	9b05      	ldr	r3, [sp, #20]
   10188:	3301      	adds	r3, #1
   1018a:	9305      	str	r3, [sp, #20]
   1018c:	e7c1      	b.n	10112 <InitDataSection()+0x6>
    }
  }
}
   1018e:	bf00      	nop
   10190:	b006      	add	sp, #24
   10192:	4770      	bx	lr
   10194:	000100e4 	.word	0x000100e4
   10198:	000100fc 	.word	0x000100fc

0001019c <InitBssSection()>:

// Functions to initialization BSS data sections. This is important because
// the std c libs assume that BSS is set to zero.
SJ2_SECTION(".after_vectors")
void InitBssSection()
{
   1019c:	b084      	sub	sp, #16
  for (int i = 0; &bss_section_table[i] < &bss_section_table_end; i++)
   1019e:	2300      	movs	r3, #0
   101a0:	9303      	str	r3, [sp, #12]
   101a2:	9b03      	ldr	r3, [sp, #12]
   101a4:	00db      	lsls	r3, r3, #3
   101a6:	4a13      	ldr	r2, [pc, #76]	; (101f4 <InitBssSection()+0x58>)
   101a8:	4413      	add	r3, r2
   101aa:	4a13      	ldr	r2, [pc, #76]	; (101f8 <InitBssSection()+0x5c>)
   101ac:	4293      	cmp	r3, r2
   101ae:	d21e      	bcs.n	101ee <InitBssSection()+0x52>
  {
    uint32_t * ram_location = bss_section_table[i].ram_location;
   101b0:	4a10      	ldr	r2, [pc, #64]	; (101f4 <InitBssSection()+0x58>)
   101b2:	9b03      	ldr	r3, [sp, #12]
   101b4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
   101b8:	9301      	str	r3, [sp, #4]
    uint32_t length         = bss_section_table[i].length;
   101ba:	4a0e      	ldr	r2, [pc, #56]	; (101f4 <InitBssSection()+0x58>)
   101bc:	9b03      	ldr	r3, [sp, #12]
   101be:	00db      	lsls	r3, r3, #3
   101c0:	4413      	add	r3, r2
   101c2:	685b      	ldr	r3, [r3, #4]
   101c4:	9300      	str	r3, [sp, #0]
    for (size_t j = 0; j < length; j++)
   101c6:	2300      	movs	r3, #0
   101c8:	9302      	str	r3, [sp, #8]
   101ca:	9a02      	ldr	r2, [sp, #8]
   101cc:	9b00      	ldr	r3, [sp, #0]
   101ce:	429a      	cmp	r2, r3
   101d0:	d209      	bcs.n	101e6 <InitBssSection()+0x4a>
    {
      ram_location[j] = 0;
   101d2:	9b02      	ldr	r3, [sp, #8]
   101d4:	009b      	lsls	r3, r3, #2
   101d6:	9a01      	ldr	r2, [sp, #4]
   101d8:	4413      	add	r3, r2
   101da:	2200      	movs	r2, #0
   101dc:	601a      	str	r2, [r3, #0]
    for (size_t j = 0; j < length; j++)
   101de:	9b02      	ldr	r3, [sp, #8]
   101e0:	3301      	adds	r3, #1
   101e2:	9302      	str	r3, [sp, #8]
   101e4:	e7f1      	b.n	101ca <InitBssSection()+0x2e>
  for (int i = 0; &bss_section_table[i] < &bss_section_table_end; i++)
   101e6:	9b03      	ldr	r3, [sp, #12]
   101e8:	3301      	adds	r3, #1
   101ea:	9303      	str	r3, [sp, #12]
   101ec:	e7d9      	b.n	101a2 <InitBssSection()+0x6>
    }
  }
}
   101ee:	bf00      	nop
   101f0:	b004      	add	sp, #16
   101f2:	4770      	bx	lr
   101f4:	000100fc 	.word	0x000100fc
   101f8:	0001010c 	.word	0x0001010c

000101fc <InitFpu()>:
      // Write back the modified value to the CPACR
      "STR     R1, [R0]\n"
      // Wait for store to complete
      "DSB\n"
      // reset pipeline now the FPU is enabled
      "ISB\n");
   101fc:	f8df 0014 	ldr.w	r0, [pc, #20]	; 10214 <InitFpu()+0x18>
   10200:	6801      	ldr	r1, [r0, #0]
   10202:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   10206:	6001      	str	r1, [r0, #0]
   10208:	f3bf 8f4f 	dsb	sy
   1020c:	f3bf 8f6f 	isb	sy
}
   10210:	bf00      	nop
   10212:	4770      	bx	lr
   10214:	e000ed88 	.word	0xe000ed88

00010218 <HardFaultHandler>:
      " mrseq r0, msp                                       \n"
      " mrsne r0, psp                                       \n"
      " ldr r1, [r0, #24]                                   \n"
      " ldr r2, handler2_address_const                      \n"
      " bx r2                                               \n"
      " handler2_address_const: .word GetRegistersFromStack \n");
   10218:	f01e 0f04 	tst.w	lr, #4
   1021c:	bf0c      	ite	eq
   1021e:	f3ef 8008 	mrseq	r0, MSP
   10222:	f3ef 8009 	mrsne	r0, PSP
   10226:	6981      	ldr	r1, [r0, #24]
   10228:	4a00      	ldr	r2, [pc, #0]	; (1022c <handler2_address_const>)
   1022a:	4710      	bx	r2

0001022c <handler2_address_const>:
   1022c:	00012c7d 	.word	0x00012c7d
#endif
}
   10230:	bf00      	nop
   10232:	4770      	bx	lr
   10234:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   10238:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   1023c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   10240:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   10244:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   10248:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   1024c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   10250:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   10254:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   10258:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   1025c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   10260:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   10264:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   10268:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   1026c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   10270:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   10274:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   10278:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   1027c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   10280:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   10284:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   10288:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   1028c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   10290:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   10294:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   10298:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   1029c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102a0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102a4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102a8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102ac:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102b0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102b4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102b8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102bc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102c0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102c4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102c8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102cc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102d0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102d4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102d8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102dc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102e0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102e4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102e8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102ec:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102f0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102f4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102f8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

000102fc <__CRP_WORD_START__>:
   102fc:	ffffffff 	.word	0xffffffff

00010300 <_init>:
   10300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10302:	bf00      	nop
   10304:	bcf8      	pop	{r3, r4, r5, r6, r7}
   10306:	bc08      	pop	{r3}
   10308:	469e      	mov	lr, r3
   1030a:	4770      	bx	lr

0001030c <__init_array_start>:
   1030c:	00010349 	.word	0x00010349
   10310:	00012b25 	.word	0x00012b25
   10314:	00016b71 	.word	0x00016b71

00010318 <_fini>:
   10318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1031a:	bf00      	nop
   1031c:	bcf8      	pop	{r3, r4, r5, r6, r7}
   1031e:	bc08      	pop	{r3}
   10320:	469e      	mov	lr, r3
   10322:	4770      	bx	lr

00010324 <__do_global_dtors_aux>:
   10324:	b510      	push	{r4, lr}
   10326:	4c05      	ldr	r4, [pc, #20]	; (1033c <__do_global_dtors_aux+0x18>)
   10328:	7823      	ldrb	r3, [r4, #0]
   1032a:	b933      	cbnz	r3, 1033a <__do_global_dtors_aux+0x16>
   1032c:	4b04      	ldr	r3, [pc, #16]	; (10340 <__do_global_dtors_aux+0x1c>)
   1032e:	b113      	cbz	r3, 10336 <__do_global_dtors_aux+0x12>
   10330:	4804      	ldr	r0, [pc, #16]	; (10344 <__do_global_dtors_aux+0x20>)
   10332:	f3af 8000 	nop.w
   10336:	2301      	movs	r3, #1
   10338:	7023      	strb	r3, [r4, #0]
   1033a:	bd10      	pop	{r4, pc}
   1033c:	10000240 	.word	0x10000240
   10340:	00000000 	.word	0x00000000
   10344:	0001912c 	.word	0x0001912c

00010348 <frame_dummy>:
   10348:	b508      	push	{r3, lr}
   1034a:	4b03      	ldr	r3, [pc, #12]	; (10358 <frame_dummy+0x10>)
   1034c:	b11b      	cbz	r3, 10356 <frame_dummy+0xe>
   1034e:	4903      	ldr	r1, [pc, #12]	; (1035c <frame_dummy+0x14>)
   10350:	4803      	ldr	r0, [pc, #12]	; (10360 <frame_dummy+0x18>)
   10352:	f3af 8000 	nop.w
   10356:	bd08      	pop	{r3, pc}
   10358:	00000000 	.word	0x00000000
   1035c:	10000244 	.word	0x10000244
   10360:	0001912c 	.word	0x0001912c

00010364 <LabGPIO::LabGPIO(unsigned char, unsigned char)>:
     }};
    
    
    IsrPointer LabGPIO::pin_isr_map[kPorts][kPins]={ nullptr};
    
 LabGPIO::LabGPIO(uint8_t port, uint8_t pin){
   10364:	b530      	push	{r4, r5, lr}
   10366:	b083      	sub	sp, #12
   10368:	4675      	mov	r5, lr
   1036a:	9001      	str	r0, [sp, #4]
   1036c:	460b      	mov	r3, r1
   1036e:	f88d 3003 	strb.w	r3, [sp, #3]
   10372:	4613      	mov	r3, r2
   10374:	f88d 3002 	strb.w	r3, [sp, #2]
   10378:	462b      	mov	r3, r5
   1037a:	4619      	mov	r1, r3
   1037c:	480e      	ldr	r0, [pc, #56]	; (103b8 <LabGPIO::LabGPIO(unsigned char, unsigned char)+0x54>)
   1037e:	f002 fd77 	bl	12e70 <__cyg_profile_func_enter>
    SelPort = port;
   10382:	9b01      	ldr	r3, [sp, #4]
   10384:	f89d 2003 	ldrb.w	r2, [sp, #3]
   10388:	701a      	strb	r2, [r3, #0]
    SelPin = pin;
   1038a:	9b01      	ldr	r3, [sp, #4]
   1038c:	f89d 2002 	ldrb.w	r2, [sp, #2]
   10390:	705a      	strb	r2, [r3, #1]
    
    interrupt_port = (port == 2) ? 1:0;
   10392:	f89d 3003 	ldrb.w	r3, [sp, #3]
   10396:	2b02      	cmp	r3, #2
   10398:	d101      	bne.n	1039e <LabGPIO::LabGPIO(unsigned char, unsigned char)+0x3a>
   1039a:	2201      	movs	r2, #1
   1039c:	e000      	b.n	103a0 <LabGPIO::LabGPIO(unsigned char, unsigned char)+0x3c>
   1039e:	2200      	movs	r2, #0
   103a0:	9b01      	ldr	r3, [sp, #4]
   103a2:	709a      	strb	r2, [r3, #2]
 }
   103a4:	9c01      	ldr	r4, [sp, #4]
   103a6:	462b      	mov	r3, r5
   103a8:	4619      	mov	r1, r3
   103aa:	4803      	ldr	r0, [pc, #12]	; (103b8 <LabGPIO::LabGPIO(unsigned char, unsigned char)+0x54>)
   103ac:	f002 fd74 	bl	12e98 <__cyg_profile_func_exit>
   103b0:	4623      	mov	r3, r4
   103b2:	4618      	mov	r0, r3
   103b4:	b003      	add	sp, #12
   103b6:	bd30      	pop	{r4, r5, pc}
   103b8:	00010365 	.word	0x00010365

000103bc <LabGPIO::GpioInterruptHandler()>:
 void LabGPIO::AttachInterruptHandler(IsrPointer isr, Edge edge){
    pin_isr_map[interrupt_port][SelPin]=isr;
    IntEdge(edge);
  
 }
 void LabGPIO::GpioInterruptHandler(){
   103bc:	b510      	push	{r4, lr}
   103be:	b082      	sub	sp, #8
   103c0:	4674      	mov	r4, lr
   103c2:	4623      	mov	r3, r4
   103c4:	4619      	mov	r1, r3
   103c6:	4845      	ldr	r0, [pc, #276]	; (104dc <LabGPIO::GpioInterruptHandler()+0x120>)
   103c8:	f002 fd52 	bl	12e70 <__cyg_profile_func_enter>
  uint8_t selPin_local;
  uint8_t i;
  
  if((LPC_GPIOINT->IO0IntStatF | LPC_GPIOINT->IO0IntStatR)){
   103cc:	4b44      	ldr	r3, [pc, #272]	; (104e0 <LabGPIO::GpioInterruptHandler()+0x124>)
   103ce:	689a      	ldr	r2, [r3, #8]
   103d0:	4b43      	ldr	r3, [pc, #268]	; (104e0 <LabGPIO::GpioInterruptHandler()+0x124>)
   103d2:	685b      	ldr	r3, [r3, #4]
   103d4:	4313      	orrs	r3, r2
   103d6:	2b00      	cmp	r3, #0
   103d8:	bf14      	ite	ne
   103da:	2301      	movne	r3, #1
   103dc:	2300      	moveq	r3, #0
   103de:	b2db      	uxtb	r3, r3
   103e0:	2b00      	cmp	r3, #0
   103e2:	d032      	beq.n	1044a <LabGPIO::GpioInterruptHandler()+0x8e>
    for( i = 0; i<32; i++)
   103e4:	2300      	movs	r3, #0
   103e6:	f88d 3006 	strb.w	r3, [sp, #6]
   103ea:	f89d 3006 	ldrb.w	r3, [sp, #6]
   103ee:	2b1f      	cmp	r3, #31
   103f0:	d81f      	bhi.n	10432 <LabGPIO::GpioInterruptHandler()+0x76>
    {
          if(((LPC_GPIOINT -> IO0IntStatF = (1<<i)) | (LPC_GPIOINT -> IO0IntStatR = (1<<i)))==1)
   103f2:	f89d 3006 	ldrb.w	r3, [sp, #6]
   103f6:	2201      	movs	r2, #1
   103f8:	409a      	lsls	r2, r3
   103fa:	4b39      	ldr	r3, [pc, #228]	; (104e0 <LabGPIO::GpioInterruptHandler()+0x124>)
   103fc:	609a      	str	r2, [r3, #8]
   103fe:	f89d 3006 	ldrb.w	r3, [sp, #6]
   10402:	2101      	movs	r1, #1
   10404:	fa01 f303 	lsl.w	r3, r1, r3
   10408:	4935      	ldr	r1, [pc, #212]	; (104e0 <LabGPIO::GpioInterruptHandler()+0x124>)
   1040a:	604b      	str	r3, [r1, #4]
   1040c:	4313      	orrs	r3, r2
   1040e:	2b01      	cmp	r3, #1
   10410:	bf0c      	ite	eq
   10412:	2301      	moveq	r3, #1
   10414:	2300      	movne	r3, #0
   10416:	b2db      	uxtb	r3, r3
   10418:	2b00      	cmp	r3, #0
   1041a:	d004      	beq.n	10426 <LabGPIO::GpioInterruptHandler()+0x6a>
          {
              selPin_local = i;
   1041c:	f89d 3006 	ldrb.w	r3, [sp, #6]
   10420:	f88d 3007 	strb.w	r3, [sp, #7]
              break;
   10424:	e005      	b.n	10432 <LabGPIO::GpioInterruptHandler()+0x76>
    for( i = 0; i<32; i++)
   10426:	f89d 3006 	ldrb.w	r3, [sp, #6]
   1042a:	3301      	adds	r3, #1
   1042c:	f88d 3006 	strb.w	r3, [sp, #6]
   10430:	e7db      	b.n	103ea <LabGPIO::GpioInterruptHandler()+0x2e>
          }
    }
    pin_isr_map[0][selPin_local]();
   10432:	f89d 3007 	ldrb.w	r3, [sp, #7]
   10436:	4a2b      	ldr	r2, [pc, #172]	; (104e4 <LabGPIO::GpioInterruptHandler()+0x128>)
   10438:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1043c:	4798      	blx	r3
    LPC_GPIOINT -> IO0IntClr = (1<< selPin_local);
   1043e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   10442:	2201      	movs	r2, #1
   10444:	409a      	lsls	r2, r3
   10446:	4b26      	ldr	r3, [pc, #152]	; (104e0 <LabGPIO::GpioInterruptHandler()+0x124>)
   10448:	60da      	str	r2, [r3, #12]
  }
    if((LPC_GPIOINT->IO2IntStatF | LPC_GPIOINT->IO2IntStatR) ){
   1044a:	4b25      	ldr	r3, [pc, #148]	; (104e0 <LabGPIO::GpioInterruptHandler()+0x124>)
   1044c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   1044e:	4b24      	ldr	r3, [pc, #144]	; (104e0 <LabGPIO::GpioInterruptHandler()+0x124>)
   10450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   10452:	4313      	orrs	r3, r2
   10454:	2b00      	cmp	r3, #0
   10456:	bf14      	ite	ne
   10458:	2301      	movne	r3, #1
   1045a:	2300      	moveq	r3, #0
   1045c:	b2db      	uxtb	r3, r3
   1045e:	2b00      	cmp	r3, #0
   10460:	d033      	beq.n	104ca <LabGPIO::GpioInterruptHandler()+0x10e>
    for( i = 0; i<32; i++)
   10462:	2300      	movs	r3, #0
   10464:	f88d 3006 	strb.w	r3, [sp, #6]
   10468:	f89d 3006 	ldrb.w	r3, [sp, #6]
   1046c:	2b1f      	cmp	r3, #31
   1046e:	d81f      	bhi.n	104b0 <LabGPIO::GpioInterruptHandler()+0xf4>
    {
          if(((LPC_GPIOINT -> IO2IntStatF = (1<<i)) | (LPC_GPIOINT -> IO2IntStatR = (1<<i)))==1)
   10470:	f89d 3006 	ldrb.w	r3, [sp, #6]
   10474:	2201      	movs	r2, #1
   10476:	409a      	lsls	r2, r3
   10478:	4b19      	ldr	r3, [pc, #100]	; (104e0 <LabGPIO::GpioInterruptHandler()+0x124>)
   1047a:	629a      	str	r2, [r3, #40]	; 0x28
   1047c:	f89d 3006 	ldrb.w	r3, [sp, #6]
   10480:	2101      	movs	r1, #1
   10482:	fa01 f303 	lsl.w	r3, r1, r3
   10486:	4916      	ldr	r1, [pc, #88]	; (104e0 <LabGPIO::GpioInterruptHandler()+0x124>)
   10488:	624b      	str	r3, [r1, #36]	; 0x24
   1048a:	4313      	orrs	r3, r2
   1048c:	2b01      	cmp	r3, #1
   1048e:	bf0c      	ite	eq
   10490:	2301      	moveq	r3, #1
   10492:	2300      	movne	r3, #0
   10494:	b2db      	uxtb	r3, r3
   10496:	2b00      	cmp	r3, #0
   10498:	d004      	beq.n	104a4 <LabGPIO::GpioInterruptHandler()+0xe8>
          {
              selPin_local = i;
   1049a:	f89d 3006 	ldrb.w	r3, [sp, #6]
   1049e:	f88d 3007 	strb.w	r3, [sp, #7]
              break;
   104a2:	e005      	b.n	104b0 <LabGPIO::GpioInterruptHandler()+0xf4>
    for( i = 0; i<32; i++)
   104a4:	f89d 3006 	ldrb.w	r3, [sp, #6]
   104a8:	3301      	adds	r3, #1
   104aa:	f88d 3006 	strb.w	r3, [sp, #6]
   104ae:	e7db      	b.n	10468 <LabGPIO::GpioInterruptHandler()+0xac>
          }
    }
    pin_isr_map[1][selPin_local]();
   104b0:	f89d 3007 	ldrb.w	r3, [sp, #7]
   104b4:	4a0b      	ldr	r2, [pc, #44]	; (104e4 <LabGPIO::GpioInterruptHandler()+0x128>)
   104b6:	3320      	adds	r3, #32
   104b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   104bc:	4798      	blx	r3
    LPC_GPIOINT -> IO2IntClr = (1<< selPin_local);
   104be:	f89d 3007 	ldrb.w	r3, [sp, #7]
   104c2:	2201      	movs	r2, #1
   104c4:	409a      	lsls	r2, r3
   104c6:	4b06      	ldr	r3, [pc, #24]	; (104e0 <LabGPIO::GpioInterruptHandler()+0x124>)
   104c8:	62da      	str	r2, [r3, #44]	; 0x2c
   104ca:	4623      	mov	r3, r4
   104cc:	4619      	mov	r1, r3
   104ce:	4803      	ldr	r0, [pc, #12]	; (104dc <LabGPIO::GpioInterruptHandler()+0x120>)
   104d0:	f002 fce2 	bl	12e98 <__cyg_profile_func_exit>
  }
 }
   104d4:	bf00      	nop
   104d6:	b002      	add	sp, #8
   104d8:	bd10      	pop	{r4, pc}
   104da:	bf00      	nop
   104dc:	000103bd 	.word	0x000103bd
   104e0:	40028080 	.word	0x40028080
   104e4:	1000025c 	.word	0x1000025c

000104e8 <LabGPIO::EnableInterrupts()>:
 
void LabGPIO::EnableInterrupts(){
   104e8:	b510      	push	{r4, lr}
   104ea:	4674      	mov	r4, lr
   104ec:	4623      	mov	r3, r4
   104ee:	4619      	mov	r1, r3
   104f0:	4808      	ldr	r0, [pc, #32]	; (10514 <LabGPIO::EnableInterrupts()+0x2c>)
   104f2:	f002 fcbd 	bl	12e70 <__cyg_profile_func_enter>
  // Register GPIO_IRQn here
        RegisterIsr(GPIO_IRQn, GpioInterruptHandler );
   104f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   104fa:	2201      	movs	r2, #1
   104fc:	4906      	ldr	r1, [pc, #24]	; (10518 <LabGPIO::EnableInterrupts()+0x30>)
   104fe:	2026      	movs	r0, #38	; 0x26
   10500:	f002 fb8e 	bl	12c20 <RegisterIsr(IRQn, void (*)(), bool, long)>
   10504:	4623      	mov	r3, r4
   10506:	4619      	mov	r1, r3
   10508:	4802      	ldr	r0, [pc, #8]	; (10514 <LabGPIO::EnableInterrupts()+0x2c>)
   1050a:	f002 fcc5 	bl	12e98 <__cyg_profile_func_exit>
 }
   1050e:	bf00      	nop
   10510:	bd10      	pop	{r4, pc}
   10512:	bf00      	nop
   10514:	000104e9 	.word	0x000104e9
   10518:	000103bd 	.word	0x000103bd

0001051c <(anonymous namespace)::DefaultUptime()>:
{
// uptime in nanoseconds
inline uint64_t uptime = 0;
// Returns the system uptime in nanoseconds, do not use this function directly
[[gnu::always_inline]] inline uint64_t DefaultUptime()
{
   1051c:	b570      	push	{r4, r5, r6, lr}
   1051e:	4676      	mov	r6, lr
   10520:	4633      	mov	r3, r6
   10522:	4619      	mov	r1, r3
   10524:	4807      	ldr	r0, [pc, #28]	; (10544 <(anonymous namespace)::DefaultUptime()+0x28>)
   10526:	f002 fca3 	bl	12e70 <__cyg_profile_func_enter>
  return uptime;
   1052a:	4b07      	ldr	r3, [pc, #28]	; (10548 <(anonymous namespace)::DefaultUptime()+0x2c>)
   1052c:	e9d3 4500 	ldrd	r4, r5, [r3]
   10530:	4633      	mov	r3, r6
   10532:	4619      	mov	r1, r3
   10534:	4803      	ldr	r0, [pc, #12]	; (10544 <(anonymous namespace)::DefaultUptime()+0x28>)
   10536:	f002 fcaf 	bl	12e98 <__cyg_profile_func_exit>
   1053a:	4623      	mov	r3, r4
   1053c:	462c      	mov	r4, r5
}
   1053e:	4618      	mov	r0, r3
   10540:	4621      	mov	r1, r4
   10542:	bd70      	pop	{r4, r5, r6, pc}
   10544:	0001051d 	.word	0x0001051d
   10548:	10000360 	.word	0x10000360

0001054c <Milliseconds()>:
{
  Uptime = uptime_function;
}
// Get system uptime in milliseconds as a 64-bit integer
inline uint64_t Milliseconds()
{
   1054c:	b570      	push	{r4, r5, r6, lr}
   1054e:	4674      	mov	r4, lr
   10550:	4623      	mov	r3, r4
   10552:	4619      	mov	r1, r3
   10554:	480c      	ldr	r0, [pc, #48]	; (10588 <Milliseconds()+0x3c>)
   10556:	f002 fc8b 	bl	12e70 <__cyg_profile_func_enter>
  return Uptime() / 1'000;
   1055a:	4b0c      	ldr	r3, [pc, #48]	; (1058c <Milliseconds()+0x40>)
   1055c:	681b      	ldr	r3, [r3, #0]
   1055e:	4798      	blx	r3
   10560:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   10564:	f04f 0300 	mov.w	r3, #0
   10568:	f006 fbac 	bl	16cc4 <__aeabi_uldivmod>
   1056c:	4602      	mov	r2, r0
   1056e:	460b      	mov	r3, r1
   10570:	4615      	mov	r5, r2
   10572:	461e      	mov	r6, r3
   10574:	4623      	mov	r3, r4
   10576:	4619      	mov	r1, r3
   10578:	4803      	ldr	r0, [pc, #12]	; (10588 <Milliseconds()+0x3c>)
   1057a:	f002 fc8d 	bl	12e98 <__cyg_profile_func_exit>
   1057e:	462b      	mov	r3, r5
   10580:	4634      	mov	r4, r6
}
   10582:	4618      	mov	r0, r3
   10584:	4621      	mov	r1, r4
   10586:	bd70      	pop	{r4, r5, r6, pc}
   10588:	0001054d 	.word	0x0001054d
   1058c:	10000000 	.word	0x10000000

00010590 <Wait(unsigned long long)::{lambda()#1}::operator()() const>:
  return status;
}

inline Status Wait(uint64_t timeout)
{
  return Wait(timeout, []() -> bool { return false; });
   10590:	b530      	push	{r4, r5, lr}
   10592:	b083      	sub	sp, #12
   10594:	4675      	mov	r5, lr
   10596:	9001      	str	r0, [sp, #4]
   10598:	462b      	mov	r3, r5
   1059a:	4619      	mov	r1, r3
   1059c:	4806      	ldr	r0, [pc, #24]	; (105b8 <Wait(unsigned long long)::{lambda()#1}::operator()() const+0x28>)
   1059e:	f002 fc67 	bl	12e70 <__cyg_profile_func_enter>
   105a2:	2400      	movs	r4, #0
   105a4:	462b      	mov	r3, r5
   105a6:	4619      	mov	r1, r3
   105a8:	4803      	ldr	r0, [pc, #12]	; (105b8 <Wait(unsigned long long)::{lambda()#1}::operator()() const+0x28>)
   105aa:	f002 fc75 	bl	12e98 <__cyg_profile_func_exit>
   105ae:	4623      	mov	r3, r4
   105b0:	4618      	mov	r0, r3
   105b2:	b003      	add	sp, #12
   105b4:	bd30      	pop	{r4, r5, pc}
   105b6:	bf00      	nop
   105b8:	00010591 	.word	0x00010591

000105bc <Wait(unsigned long long)::{lambda()#1}::_FUN()>:
   105bc:	b538      	push	{r3, r4, r5, lr}
   105be:	4674      	mov	r4, lr
   105c0:	4623      	mov	r3, r4
   105c2:	4619      	mov	r1, r3
   105c4:	4807      	ldr	r0, [pc, #28]	; (105e4 <Wait(unsigned long long)::{lambda()#1}::_FUN()+0x28>)
   105c6:	f002 fc53 	bl	12e70 <__cyg_profile_func_enter>
   105ca:	2000      	movs	r0, #0
   105cc:	f7ff ffe0 	bl	10590 <Wait(unsigned long long)::{lambda()#1}::operator()() const>
   105d0:	4603      	mov	r3, r0
   105d2:	461d      	mov	r5, r3
   105d4:	4623      	mov	r3, r4
   105d6:	4619      	mov	r1, r3
   105d8:	4802      	ldr	r0, [pc, #8]	; (105e4 <Wait(unsigned long long)::{lambda()#1}::_FUN()+0x28>)
   105da:	f002 fc5d 	bl	12e98 <__cyg_profile_func_exit>
   105de:	462b      	mov	r3, r5
   105e0:	4618      	mov	r0, r3
   105e2:	bd38      	pop	{r3, r4, r5, pc}
   105e4:	000105bd 	.word	0x000105bd

000105e8 <Wait(unsigned long long)>:
{
   105e8:	b5f0      	push	{r4, r5, r6, r7, lr}
   105ea:	b089      	sub	sp, #36	; 0x24
   105ec:	4675      	mov	r5, lr
   105ee:	e9cd 0100 	strd	r0, r1, [sp]
   105f2:	462b      	mov	r3, r5
   105f4:	4619      	mov	r1, r3
   105f6:	482b      	ldr	r0, [pc, #172]	; (106a4 <Wait(unsigned long long)+0xbc>)
   105f8:	f002 fc3a 	bl	12e70 <__cyg_profile_func_enter>
   105fc:	e9dd 3400 	ldrd	r3, r4, [sp]
   10600:	e9cd 3406 	strd	r3, r4, [sp, #24]
   10604:	f88d 6008 	strb.w	r6, [sp, #8]
   10608:	462b      	mov	r3, r5
   1060a:	4619      	mov	r1, r3
   1060c:	4826      	ldr	r0, [pc, #152]	; (106a8 <Wait(unsigned long long)+0xc0>)
   1060e:	f002 fc2f 	bl	12e70 <__cyg_profile_func_enter>
  uint64_t timeout_time = 0;
   10612:	f04f 0300 	mov.w	r3, #0
   10616:	f04f 0400 	mov.w	r4, #0
   1061a:	e9cd 3404 	strd	r3, r4, [sp, #16]
  if (timeout == kMaxWait)
   1061e:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
   10622:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
   10626:	bf08      	it	eq
   10628:	f1b3 3fff 	cmpeq.w	r3, #4294967295	; 0xffffffff
   1062c:	d106      	bne.n	1063c <Wait(unsigned long long)+0x54>
    timeout_time = kMaxWait;
   1062e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   10632:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   10636:	e9cd 3404 	strd	r3, r4, [sp, #16]
   1063a:	e00a      	b.n	10652 <Wait(unsigned long long)+0x6a>
    timeout_time = Milliseconds() + timeout;
   1063c:	f7ff ff86 	bl	1054c <Milliseconds()>
   10640:	460a      	mov	r2, r1
   10642:	4601      	mov	r1, r0
   10644:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
   10648:	185e      	adds	r6, r3, r1
   1064a:	eb44 0702 	adc.w	r7, r4, r2
   1064e:	e9cd 6704 	strd	r6, r7, [sp, #16]
  Status status = Status::kTimedOut;
   10652:	2301      	movs	r3, #1
   10654:	9303      	str	r3, [sp, #12]
  while (Milliseconds() < timeout_time)
   10656:	f7ff ff79 	bl	1054c <Milliseconds()>
   1065a:	460a      	mov	r2, r1
   1065c:	4601      	mov	r1, r0
   1065e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
   10662:	42a2      	cmp	r2, r4
   10664:	bf08      	it	eq
   10666:	4299      	cmpeq	r1, r3
   10668:	bf34      	ite	cc
   1066a:	2301      	movcc	r3, #1
   1066c:	2300      	movcs	r3, #0
   1066e:	b2db      	uxtb	r3, r3
   10670:	2b00      	cmp	r3, #0
   10672:	d008      	beq.n	10686 <Wait(unsigned long long)+0x9e>
    if (is_done())
   10674:	ab02      	add	r3, sp, #8
   10676:	4618      	mov	r0, r3
   10678:	f7ff ff8a 	bl	10590 <Wait(unsigned long long)::{lambda()#1}::operator()() const>
   1067c:	4603      	mov	r3, r0
   1067e:	2b00      	cmp	r3, #0
   10680:	d0e9      	beq.n	10656 <Wait(unsigned long long)+0x6e>
      status = Status::kSuccess;
   10682:	2300      	movs	r3, #0
   10684:	9303      	str	r3, [sp, #12]
  return status;
   10686:	9c03      	ldr	r4, [sp, #12]
   10688:	462b      	mov	r3, r5
   1068a:	4619      	mov	r1, r3
   1068c:	4806      	ldr	r0, [pc, #24]	; (106a8 <Wait(unsigned long long)+0xc0>)
   1068e:	f002 fc03 	bl	12e98 <__cyg_profile_func_exit>
   10692:	462b      	mov	r3, r5
   10694:	4619      	mov	r1, r3
   10696:	4803      	ldr	r0, [pc, #12]	; (106a4 <Wait(unsigned long long)+0xbc>)
   10698:	f002 fbfe 	bl	12e98 <__cyg_profile_func_exit>
  return Wait(timeout, []() -> bool { return false; });
   1069c:	4623      	mov	r3, r4
}
   1069e:	4618      	mov	r0, r3
   106a0:	b009      	add	sp, #36	; 0x24
   106a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   106a4:	000105e9 	.word	0x000105e9
   106a8:	00010935 	.word	0x00010935

000106ac <Delay(unsigned long long)>:

// Delay the system for a duration of time
inline void Delay([[maybe_unused]] uint64_t delay_time_ms)
{
   106ac:	b510      	push	{r4, lr}
   106ae:	b082      	sub	sp, #8
   106b0:	4674      	mov	r4, lr
   106b2:	e9cd 0100 	strd	r0, r1, [sp]
   106b6:	4623      	mov	r3, r4
   106b8:	4619      	mov	r1, r3
   106ba:	4807      	ldr	r0, [pc, #28]	; (106d8 <Delay(unsigned long long)+0x2c>)
   106bc:	f002 fbd8 	bl	12e70 <__cyg_profile_func_enter>
#if defined(HOST_TEST)
  return;
#else
  Wait(delay_time_ms);
   106c0:	e9dd 0100 	ldrd	r0, r1, [sp]
   106c4:	f7ff ff90 	bl	105e8 <Wait(unsigned long long)>
   106c8:	4623      	mov	r3, r4
   106ca:	4619      	mov	r1, r3
   106cc:	4802      	ldr	r0, [pc, #8]	; (106d8 <Delay(unsigned long long)+0x2c>)
   106ce:	f002 fbe3 	bl	12e98 <__cyg_profile_func_exit>
#endif  // HOST_TEST
}
   106d2:	bf00      	nop
   106d4:	b002      	add	sp, #8
   106d6:	bd10      	pop	{r4, pc}
   106d8:	000106ad 	.word	0x000106ad

000106dc <Gpio::SetHigh()>:
  inline void SetDirection(Direction direction) override
  {
    (direction) ? SetAsOutput() : SetAsInput();
  }
  // Sets the GPIO output pin to high
  void SetHigh(void) override
   106dc:	b530      	push	{r4, r5, lr}
   106de:	b083      	sub	sp, #12
   106e0:	4675      	mov	r5, lr
   106e2:	9001      	str	r0, [sp, #4]
   106e4:	462b      	mov	r3, r5
   106e6:	4619      	mov	r1, r3
   106e8:	4813      	ldr	r0, [pc, #76]	; (10738 <Gpio::SetHigh()+0x5c>)
   106ea:	f002 fbc1 	bl	12e70 <__cyg_profile_func_enter>
  {
    gpio_port[pin_->GetPort()]->SET = (1 << pin_->GetPin());
   106ee:	9b01      	ldr	r3, [sp, #4]
   106f0:	689a      	ldr	r2, [r3, #8]
   106f2:	9b01      	ldr	r3, [sp, #4]
   106f4:	689b      	ldr	r3, [r3, #8]
   106f6:	681b      	ldr	r3, [r3, #0]
   106f8:	3330      	adds	r3, #48	; 0x30
   106fa:	681b      	ldr	r3, [r3, #0]
   106fc:	4610      	mov	r0, r2
   106fe:	4798      	blx	r3
   10700:	4603      	mov	r3, r0
   10702:	461a      	mov	r2, r3
   10704:	2301      	movs	r3, #1
   10706:	4093      	lsls	r3, r2
   10708:	461c      	mov	r4, r3
   1070a:	9b01      	ldr	r3, [sp, #4]
   1070c:	689a      	ldr	r2, [r3, #8]
   1070e:	9b01      	ldr	r3, [sp, #4]
   10710:	689b      	ldr	r3, [r3, #8]
   10712:	681b      	ldr	r3, [r3, #0]
   10714:	332c      	adds	r3, #44	; 0x2c
   10716:	681b      	ldr	r3, [r3, #0]
   10718:	4610      	mov	r0, r2
   1071a:	4798      	blx	r3
   1071c:	4603      	mov	r3, r0
   1071e:	461a      	mov	r2, r3
   10720:	4b06      	ldr	r3, [pc, #24]	; (1073c <Gpio::SetHigh()+0x60>)
   10722:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   10726:	619c      	str	r4, [r3, #24]
   10728:	462b      	mov	r3, r5
   1072a:	4619      	mov	r1, r3
   1072c:	4802      	ldr	r0, [pc, #8]	; (10738 <Gpio::SetHigh()+0x5c>)
   1072e:	f002 fbb3 	bl	12e98 <__cyg_profile_func_exit>
  }
   10732:	bf00      	nop
   10734:	b003      	add	sp, #12
   10736:	bd30      	pop	{r4, r5, pc}
   10738:	000106dd 	.word	0x000106dd
   1073c:	10000004 	.word	0x10000004

00010740 <Gpio::SetLow()>:
  // Sets the GPIO output pin to low
  void SetLow(void) override
   10740:	b530      	push	{r4, r5, lr}
   10742:	b083      	sub	sp, #12
   10744:	4675      	mov	r5, lr
   10746:	9001      	str	r0, [sp, #4]
   10748:	462b      	mov	r3, r5
   1074a:	4619      	mov	r1, r3
   1074c:	4813      	ldr	r0, [pc, #76]	; (1079c <Gpio::SetLow()+0x5c>)
   1074e:	f002 fb8f 	bl	12e70 <__cyg_profile_func_enter>
  {
    gpio_port[pin_->GetPort()]->CLR = (1 << pin_->GetPin());
   10752:	9b01      	ldr	r3, [sp, #4]
   10754:	689a      	ldr	r2, [r3, #8]
   10756:	9b01      	ldr	r3, [sp, #4]
   10758:	689b      	ldr	r3, [r3, #8]
   1075a:	681b      	ldr	r3, [r3, #0]
   1075c:	3330      	adds	r3, #48	; 0x30
   1075e:	681b      	ldr	r3, [r3, #0]
   10760:	4610      	mov	r0, r2
   10762:	4798      	blx	r3
   10764:	4603      	mov	r3, r0
   10766:	461a      	mov	r2, r3
   10768:	2301      	movs	r3, #1
   1076a:	4093      	lsls	r3, r2
   1076c:	461c      	mov	r4, r3
   1076e:	9b01      	ldr	r3, [sp, #4]
   10770:	689a      	ldr	r2, [r3, #8]
   10772:	9b01      	ldr	r3, [sp, #4]
   10774:	689b      	ldr	r3, [r3, #8]
   10776:	681b      	ldr	r3, [r3, #0]
   10778:	332c      	adds	r3, #44	; 0x2c
   1077a:	681b      	ldr	r3, [r3, #0]
   1077c:	4610      	mov	r0, r2
   1077e:	4798      	blx	r3
   10780:	4603      	mov	r3, r0
   10782:	461a      	mov	r2, r3
   10784:	4b06      	ldr	r3, [pc, #24]	; (107a0 <Gpio::SetLow()+0x60>)
   10786:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   1078a:	61dc      	str	r4, [r3, #28]
   1078c:	462b      	mov	r3, r5
   1078e:	4619      	mov	r1, r3
   10790:	4802      	ldr	r0, [pc, #8]	; (1079c <Gpio::SetLow()+0x5c>)
   10792:	f002 fb81 	bl	12e98 <__cyg_profile_func_exit>
  }
   10796:	bf00      	nop
   10798:	b003      	add	sp, #12
   1079a:	bd30      	pop	{r4, r5, pc}
   1079c:	00010741 	.word	0x00010741
   107a0:	10000004 	.word	0x10000004

000107a4 <Gpio::Set(GpioInterface::State)>:
  // Sets the GPIO output pin to high or low depending on the State enum
  // parameter
  void Set(State output = kHigh) override
   107a4:	b510      	push	{r4, lr}
   107a6:	b082      	sub	sp, #8
   107a8:	4674      	mov	r4, lr
   107aa:	9001      	str	r0, [sp, #4]
   107ac:	460b      	mov	r3, r1
   107ae:	f88d 3003 	strb.w	r3, [sp, #3]
   107b2:	4623      	mov	r3, r4
   107b4:	4619      	mov	r1, r3
   107b6:	480b      	ldr	r0, [pc, #44]	; (107e4 <Gpio::Set(GpioInterface::State)+0x40>)
   107b8:	f002 fb5a 	bl	12e70 <__cyg_profile_func_enter>
  {
    (output) ? SetHigh() : SetLow();
   107bc:	f89d 3003 	ldrb.w	r3, [sp, #3]
   107c0:	2b00      	cmp	r3, #0
   107c2:	d003      	beq.n	107cc <Gpio::Set(GpioInterface::State)+0x28>
   107c4:	9801      	ldr	r0, [sp, #4]
   107c6:	f7ff ff89 	bl	106dc <Gpio::SetHigh()>
   107ca:	e002      	b.n	107d2 <Gpio::Set(GpioInterface::State)+0x2e>
   107cc:	9801      	ldr	r0, [sp, #4]
   107ce:	f7ff ffb7 	bl	10740 <Gpio::SetLow()>
   107d2:	4623      	mov	r3, r4
   107d4:	4619      	mov	r1, r3
   107d6:	4803      	ldr	r0, [pc, #12]	; (107e4 <Gpio::Set(GpioInterface::State)+0x40>)
   107d8:	f002 fb5e 	bl	12e98 <__cyg_profile_func_exit>
  }
   107dc:	bf00      	nop
   107de:	b002      	add	sp, #8
   107e0:	bd10      	pop	{r4, pc}
   107e2:	bf00      	nop
   107e4:	000107a5 	.word	0x000107a5

000107e8 <int util::Value<Ssp::Peripheral, int>(Ssp::Peripheral)>:
//
// @param enum_type_value variable you would like to get the value of.
// @return the value of the enum class type variable of with the underlying
//         type of the enum class.
template <typename Enum, typename Type = typename std::underlying_type_t<Enum>>
constexpr Type Value(Enum enum_type_value)
   107e8:	b530      	push	{r4, r5, lr}
   107ea:	b083      	sub	sp, #12
   107ec:	4675      	mov	r5, lr
   107ee:	9001      	str	r0, [sp, #4]
   107f0:	462b      	mov	r3, r5
   107f2:	4619      	mov	r1, r3
   107f4:	4806      	ldr	r0, [pc, #24]	; (10810 <int util::Value<Ssp::Peripheral, int>(Ssp::Peripheral)+0x28>)
   107f6:	f002 fb3b 	bl	12e70 <__cyg_profile_func_enter>
{
  return static_cast<Type>(enum_type_value);
   107fa:	9c01      	ldr	r4, [sp, #4]
   107fc:	462b      	mov	r3, r5
   107fe:	4619      	mov	r1, r3
   10800:	4803      	ldr	r0, [pc, #12]	; (10810 <int util::Value<Ssp::Peripheral, int>(Ssp::Peripheral)+0x28>)
   10802:	f002 fb49 	bl	12e98 <__cyg_profile_func_exit>
   10806:	4623      	mov	r3, r4
}
   10808:	4618      	mov	r0, r3
   1080a:	b003      	add	sp, #12
   1080c:	bd30      	pop	{r4, r5, pc}
   1080e:	bf00      	nop
   10810:	000107e9 	.word	0x000107e9

00010814 <Ssp::IsTransferRegBusy()>:
  }

  /// Checks if the SSP controller is idle.
  /// @returns true if the controller is sending or receiving a data frame and
  /// false if it is idle.
  bool IsTransferRegBusy() override
   10814:	b530      	push	{r4, r5, lr}
   10816:	b085      	sub	sp, #20
   10818:	4675      	mov	r5, lr
   1081a:	9001      	str	r0, [sp, #4]
   1081c:	462b      	mov	r3, r5
   1081e:	4619      	mov	r1, r3
   10820:	4817      	ldr	r0, [pc, #92]	; (10880 <Ssp::IsTransferRegBusy()+0x6c>)
   10822:	f002 fb25 	bl	12e70 <__cyg_profile_func_enter>
  {
    return (bit::Read(ssp_registers[util::Value(pssp_)]->SR, kDataLineIdleBit));
   10826:	9b01      	ldr	r3, [sp, #4]
   10828:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1082a:	4618      	mov	r0, r3
   1082c:	f7ff ffdc 	bl	107e8 <int util::Value<Ssp::Peripheral, int>(Ssp::Peripheral)>
   10830:	4602      	mov	r2, r0
   10832:	4b14      	ldr	r3, [pc, #80]	; (10884 <Ssp::IsTransferRegBusy()+0x70>)
   10834:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   10838:	68db      	ldr	r3, [r3, #12]
   1083a:	9303      	str	r3, [sp, #12]
   1083c:	2304      	movs	r3, #4
   1083e:	9302      	str	r3, [sp, #8]
   10840:	462b      	mov	r3, r5
   10842:	4619      	mov	r1, r3
   10844:	4810      	ldr	r0, [pc, #64]	; (10888 <Ssp::IsTransferRegBusy()+0x74>)
   10846:	f002 fb13 	bl	12e70 <__cyg_profile_func_enter>
[[gnu::always_inline]][[nodiscard]] constexpr bool Read(T target,
                                                        uint32_t position)
{
  static_assert(std::numeric_limits<T>::is_integer,
                "Read only accepts intergers.");
  return static_cast<bool>(target & (1 << position));
   1084a:	2201      	movs	r2, #1
   1084c:	9b02      	ldr	r3, [sp, #8]
   1084e:	fa02 f303 	lsl.w	r3, r2, r3
   10852:	461a      	mov	r2, r3
   10854:	9b03      	ldr	r3, [sp, #12]
   10856:	4013      	ands	r3, r2
   10858:	2b00      	cmp	r3, #0
   1085a:	bf14      	ite	ne
   1085c:	2301      	movne	r3, #1
   1085e:	2300      	moveq	r3, #0
   10860:	b2dc      	uxtb	r4, r3
   10862:	462b      	mov	r3, r5
   10864:	4619      	mov	r1, r3
   10866:	4808      	ldr	r0, [pc, #32]	; (10888 <Ssp::IsTransferRegBusy()+0x74>)
   10868:	f002 fb16 	bl	12e98 <__cyg_profile_func_exit>
   1086c:	462b      	mov	r3, r5
   1086e:	4619      	mov	r1, r3
   10870:	4803      	ldr	r0, [pc, #12]	; (10880 <Ssp::IsTransferRegBusy()+0x6c>)
   10872:	f002 fb11 	bl	12e98 <__cyg_profile_func_exit>
   10876:	4623      	mov	r3, r4
  }
   10878:	4618      	mov	r0, r3
   1087a:	b005      	add	sp, #20
   1087c:	bd30      	pop	{r4, r5, pc}
   1087e:	bf00      	nop
   10880:	00010815 	.word	0x00010815
   10884:	1000001c 	.word	0x1000001c
   10888:	000109e1 	.word	0x000109e1

0001088c <Ssp::Transfer(unsigned short)>:
  /// data register. This functions for both transmitting and
  /// receiving data. It is recommended this region be protected
  /// by a mutex.
  /// @param data - information to be placed in data register
  /// @return - received data from external device
  uint16_t Transfer(uint16_t data) override
   1088c:	b530      	push	{r4, r5, lr}
   1088e:	b085      	sub	sp, #20
   10890:	4675      	mov	r5, lr
   10892:	9001      	str	r0, [sp, #4]
   10894:	460b      	mov	r3, r1
   10896:	f8ad 3002 	strh.w	r3, [sp, #2]
   1089a:	462b      	mov	r3, r5
   1089c:	4619      	mov	r1, r3
   1089e:	4814      	ldr	r0, [pc, #80]	; (108f0 <Ssp::Transfer(unsigned short)+0x64>)
   108a0:	f002 fae6 	bl	12e70 <__cyg_profile_func_enter>
  {
    uint32_t pssp = util::Value(pssp_);
   108a4:	9b01      	ldr	r3, [sp, #4]
   108a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   108a8:	4618      	mov	r0, r3
   108aa:	f7ff ff9d 	bl	107e8 <int util::Value<Ssp::Peripheral, int>(Ssp::Peripheral)>
   108ae:	4603      	mov	r3, r0
   108b0:	9303      	str	r3, [sp, #12]

    ssp_registers[pssp]->DR = data;
   108b2:	4a10      	ldr	r2, [pc, #64]	; (108f4 <Ssp::Transfer(unsigned short)+0x68>)
   108b4:	9b03      	ldr	r3, [sp, #12]
   108b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   108ba:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   108be:	609a      	str	r2, [r3, #8]
    while (IsTransferRegBusy())
   108c0:	9801      	ldr	r0, [sp, #4]
   108c2:	f7ff ffa7 	bl	10814 <Ssp::IsTransferRegBusy()>
   108c6:	4603      	mov	r3, r0
   108c8:	2b00      	cmp	r3, #0
   108ca:	d001      	beq.n	108d0 <Ssp::Transfer(unsigned short)+0x44>
    {
      continue;
   108cc:	bf00      	nop
    while (IsTransferRegBusy())
   108ce:	e7f7      	b.n	108c0 <Ssp::Transfer(unsigned short)+0x34>
    }
    return static_cast<uint16_t>(ssp_registers[pssp]->DR);
   108d0:	4a08      	ldr	r2, [pc, #32]	; (108f4 <Ssp::Transfer(unsigned short)+0x68>)
   108d2:	9b03      	ldr	r3, [sp, #12]
   108d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   108d8:	689b      	ldr	r3, [r3, #8]
   108da:	b29c      	uxth	r4, r3
   108dc:	462b      	mov	r3, r5
   108de:	4619      	mov	r1, r3
   108e0:	4803      	ldr	r0, [pc, #12]	; (108f0 <Ssp::Transfer(unsigned short)+0x64>)
   108e2:	f002 fad9 	bl	12e98 <__cyg_profile_func_exit>
   108e6:	4623      	mov	r3, r4
  }
   108e8:	4618      	mov	r0, r3
   108ea:	b005      	add	sp, #20
   108ec:	bd30      	pop	{r4, r5, pc}
   108ee:	bf00      	nop
   108f0:	0001088d 	.word	0x0001088d
   108f4:	1000001c 	.word	0x1000001c

000108f8 <main>:
#include "utility/time.hpp"
#include "LabGPIO.hpp"
void GpioInterruptCallback();   

int main() 
{ 
   108f8:	b500      	push	{lr}
   108fa:	b083      	sub	sp, #12
   108fc:	4673      	mov	r3, lr
   108fe:	4619      	mov	r1, r3
   10900:	4808      	ldr	r0, [pc, #32]	; (10924 <main+0x2c>)
   10902:	f002 fab5 	bl	12e70 <__cyg_profile_func_enter>
  LOG_INFO("Start");
   10906:	2310      	movs	r3, #16
   10908:	4a07      	ldr	r2, [pc, #28]	; (10928 <main+0x30>)
   1090a:	4908      	ldr	r1, [pc, #32]	; (1092c <main+0x34>)
   1090c:	4808      	ldr	r0, [pc, #32]	; (10930 <main+0x38>)
   1090e:	f003 fd09 	bl	14324 <printf>
  /*LabGPIO Int(0,29);
  Int.SetAsInput();
  LPC_GPIOINT -> IO0IntEnR = (1<<29);
  RegisterIsr(GPIO_IRQn, GpioInterruptCallback);
  */
  LabGPIO gpio(2, 3);
   10912:	466b      	mov	r3, sp
   10914:	2203      	movs	r2, #3
   10916:	2102      	movs	r1, #2
   10918:	4618      	mov	r0, r3
   1091a:	f7ff fd23 	bl	10364 <LabGPIO::LabGPIO(unsigned char, unsigned char)>
   gpio.EnableInterrupts();
   1091e:	f7ff fde3 	bl	104e8 <LabGPIO::EnableInterrupts()>
  while(true)
   10922:	e7fe      	b.n	10922 <main+0x2a>
   10924:	000108f9 	.word	0x000108f9
   10928:	0001714c 	.word	0x0001714c
   1092c:	000170b4 	.word	0x000170b4
   10930:	000170c0 	.word	0x000170c0

00010934 <Status Wait<Wait(unsigned long long)::{lambda()#1}>(unsigned long long, Wait(unsigned long long)::{lambda()#1})>:
inline Status Wait(uint64_t timeout, F is_done)
   10934:	e92d 4830 	stmdb	sp!, {r4, r5, fp, lr}
   10938:	b088      	sub	sp, #32
   1093a:	4675      	mov	r5, lr
   1093c:	e9cd 0102 	strd	r0, r1, [sp, #8]
   10940:	f88d 2004 	strb.w	r2, [sp, #4]
   10944:	462b      	mov	r3, r5
   10946:	4619      	mov	r1, r3
   10948:	4824      	ldr	r0, [pc, #144]	; (109dc <Status Wait<Wait(unsigned long long)::{lambda()#1}>(unsigned long long, Wait(unsigned long long)::{lambda()#1})+0xa8>)
   1094a:	f002 fa91 	bl	12e70 <__cyg_profile_func_enter>
  uint64_t timeout_time = 0;
   1094e:	f04f 0300 	mov.w	r3, #0
   10952:	f04f 0400 	mov.w	r4, #0
   10956:	e9cd 3406 	strd	r3, r4, [sp, #24]
  if (timeout == kMaxWait)
   1095a:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
   1095e:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
   10962:	bf08      	it	eq
   10964:	f1b3 3fff 	cmpeq.w	r3, #4294967295	; 0xffffffff
   10968:	d106      	bne.n	10978 <Status Wait<Wait(unsigned long long)::{lambda()#1}>(unsigned long long, Wait(unsigned long long)::{lambda()#1})+0x44>
    timeout_time = kMaxWait;
   1096a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1096e:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   10972:	e9cd 3406 	strd	r3, r4, [sp, #24]
   10976:	e00b      	b.n	10990 <Status Wait<Wait(unsigned long long)::{lambda()#1}>(unsigned long long, Wait(unsigned long long)::{lambda()#1})+0x5c>
    timeout_time = Milliseconds() + timeout;
   10978:	f7ff fde8 	bl	1054c <Milliseconds()>
   1097c:	460a      	mov	r2, r1
   1097e:	4601      	mov	r1, r0
   10980:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
   10984:	eb13 0b01 	adds.w	fp, r3, r1
   10988:	eb44 0c02 	adc.w	ip, r4, r2
   1098c:	e9cd bc06 	strd	fp, ip, [sp, #24]
  Status status = Status::kTimedOut;
   10990:	2301      	movs	r3, #1
   10992:	9305      	str	r3, [sp, #20]
  while (Milliseconds() < timeout_time)
   10994:	f7ff fdda 	bl	1054c <Milliseconds()>
   10998:	460a      	mov	r2, r1
   1099a:	4601      	mov	r1, r0
   1099c:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
   109a0:	42a2      	cmp	r2, r4
   109a2:	bf08      	it	eq
   109a4:	4299      	cmpeq	r1, r3
   109a6:	bf34      	ite	cc
   109a8:	2301      	movcc	r3, #1
   109aa:	2300      	movcs	r3, #0
   109ac:	b2db      	uxtb	r3, r3
   109ae:	2b00      	cmp	r3, #0
   109b0:	d008      	beq.n	109c4 <Status Wait<Wait(unsigned long long)::{lambda()#1}>(unsigned long long, Wait(unsigned long long)::{lambda()#1})+0x90>
    if (is_done())
   109b2:	ab01      	add	r3, sp, #4
   109b4:	4618      	mov	r0, r3
   109b6:	f7ff fdeb 	bl	10590 <Wait(unsigned long long)::{lambda()#1}::operator()() const>
   109ba:	4603      	mov	r3, r0
   109bc:	2b00      	cmp	r3, #0
   109be:	d0e9      	beq.n	10994 <Status Wait<Wait(unsigned long long)::{lambda()#1}>(unsigned long long, Wait(unsigned long long)::{lambda()#1})+0x60>
      status = Status::kSuccess;
   109c0:	2300      	movs	r3, #0
   109c2:	9305      	str	r3, [sp, #20]
  return status;
   109c4:	9c05      	ldr	r4, [sp, #20]
   109c6:	462b      	mov	r3, r5
   109c8:	4619      	mov	r1, r3
   109ca:	4804      	ldr	r0, [pc, #16]	; (109dc <Status Wait<Wait(unsigned long long)::{lambda()#1}>(unsigned long long, Wait(unsigned long long)::{lambda()#1})+0xa8>)
   109cc:	f002 fa64 	bl	12e98 <__cyg_profile_func_exit>
   109d0:	4623      	mov	r3, r4
}
   109d2:	4618      	mov	r0, r3
   109d4:	b008      	add	sp, #32
   109d6:	e8bd 8830 	ldmia.w	sp!, {r4, r5, fp, pc}
   109da:	bf00      	nop
   109dc:	00010935 	.word	0x00010935

000109e0 <bool bit::Read<unsigned long>(unsigned long, unsigned long)>:
[[gnu::always_inline]][[nodiscard]] constexpr bool Read(T target,
   109e0:	b530      	push	{r4, r5, lr}
   109e2:	b083      	sub	sp, #12
   109e4:	4675      	mov	r5, lr
   109e6:	9001      	str	r0, [sp, #4]
   109e8:	9100      	str	r1, [sp, #0]
   109ea:	462b      	mov	r3, r5
   109ec:	4619      	mov	r1, r3
   109ee:	480c      	ldr	r0, [pc, #48]	; (10a20 <bool bit::Read<unsigned long>(unsigned long, unsigned long)+0x40>)
   109f0:	f002 fa3e 	bl	12e70 <__cyg_profile_func_enter>
  return static_cast<bool>(target & (1 << position));
   109f4:	2201      	movs	r2, #1
   109f6:	9b00      	ldr	r3, [sp, #0]
   109f8:	fa02 f303 	lsl.w	r3, r2, r3
   109fc:	461a      	mov	r2, r3
   109fe:	9b01      	ldr	r3, [sp, #4]
   10a00:	4013      	ands	r3, r2
   10a02:	2b00      	cmp	r3, #0
   10a04:	bf14      	ite	ne
   10a06:	2301      	movne	r3, #1
   10a08:	2300      	moveq	r3, #0
   10a0a:	b2dc      	uxtb	r4, r3
   10a0c:	462b      	mov	r3, r5
   10a0e:	4619      	mov	r1, r3
   10a10:	4803      	ldr	r0, [pc, #12]	; (10a20 <bool bit::Read<unsigned long>(unsigned long, unsigned long)+0x40>)
   10a12:	f002 fa41 	bl	12e98 <__cyg_profile_func_exit>
   10a16:	4623      	mov	r3, r4
}
   10a18:	4618      	mov	r0, r3
   10a1a:	b003      	add	sp, #12
   10a1c:	bd30      	pop	{r4, r5, pc}
   10a1e:	bf00      	nop
   10a20:	000109e1 	.word	0x000109e1

00010a24 <debug::PrintBacktrace(bool, void*)>:
}

[[gnu::no_instrument_function]]
inline void PrintBacktrace(bool show_make_command = false,
                           void * final_address   = nullptr)
{
   10a24:	b500      	push	{lr}
   10a26:	b08b      	sub	sp, #44	; 0x2c
   10a28:	4603      	mov	r3, r0
   10a2a:	9100      	str	r1, [sp, #0]
   10a2c:	f88d 3007 	strb.w	r3, [sp, #7]
  printf("Stack Depth = %zd\n", GetStackDepth());
   10a30:	f002 fa54 	bl	12edc <GetStackDepth()>
   10a34:	4603      	mov	r3, r0
   10a36:	4619      	mov	r1, r3
   10a38:	4831      	ldr	r0, [pc, #196]	; (10b00 <debug::PrintBacktrace(bool, void*)+0xdc>)
   10a3a:	f003 fc73 	bl	14324 <printf>
  // stack_depth-1 to ignore PrintBacktrace()
  // PrintBacktrace shouldn't be ignored in profiling because it causes
  // the exit to still fire, which can result in a negative stack_depth
  void ** list_of_called_functions = GetStackTrace();
   10a3e:	f002 fa39 	bl	12eb4 <GetStackTrace()>
   10a42:	9007      	str	r0, [sp, #28]
  size_t stack_depth               = GetStackDepth();
   10a44:	f002 fa4a 	bl	12edc <GetStackDepth()>
   10a48:	9006      	str	r0, [sp, #24]
  // Ignore the last function as it is the Backtrace function
  for (size_t pos = 0; pos < stack_depth - 1; pos++)
   10a4a:	2300      	movs	r3, #0
   10a4c:	9309      	str	r3, [sp, #36]	; 0x24
   10a4e:	9b06      	ldr	r3, [sp, #24]
   10a50:	3b01      	subs	r3, #1
   10a52:	9a09      	ldr	r2, [sp, #36]	; 0x24
   10a54:	429a      	cmp	r2, r3
   10a56:	d20d      	bcs.n	10a74 <debug::PrintBacktrace(bool, void*)+0x50>
  {
    printf("  #%zu: 0x%p\n", pos, list_of_called_functions[pos]);
   10a58:	9b09      	ldr	r3, [sp, #36]	; 0x24
   10a5a:	009b      	lsls	r3, r3, #2
   10a5c:	9a07      	ldr	r2, [sp, #28]
   10a5e:	4413      	add	r3, r2
   10a60:	681b      	ldr	r3, [r3, #0]
   10a62:	461a      	mov	r2, r3
   10a64:	9909      	ldr	r1, [sp, #36]	; 0x24
   10a66:	4827      	ldr	r0, [pc, #156]	; (10b04 <debug::PrintBacktrace(bool, void*)+0xe0>)
   10a68:	f003 fc5c 	bl	14324 <printf>
  for (size_t pos = 0; pos < stack_depth - 1; pos++)
   10a6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   10a6e:	3301      	adds	r3, #1
   10a70:	9309      	str	r3, [sp, #36]	; 0x24
   10a72:	e7ec      	b.n	10a4e <debug::PrintBacktrace(bool, void*)+0x2a>
  }
  if (final_address != nullptr)
   10a74:	9b00      	ldr	r3, [sp, #0]
   10a76:	2b00      	cmp	r3, #0
   10a78:	d006      	beq.n	10a88 <debug::PrintBacktrace(bool, void*)+0x64>
  {
    printf("  #%zu: 0x%p\n", stack_depth - 1, final_address);
   10a7a:	9b06      	ldr	r3, [sp, #24]
   10a7c:	3b01      	subs	r3, #1
   10a7e:	9a00      	ldr	r2, [sp, #0]
   10a80:	4619      	mov	r1, r3
   10a82:	4820      	ldr	r0, [pc, #128]	; (10b04 <debug::PrintBacktrace(bool, void*)+0xe0>)
   10a84:	f003 fc4e 	bl	14324 <printf>
  }
  if (show_make_command)
   10a88:	f89d 3007 	ldrb.w	r3, [sp, #7]
   10a8c:	2b00      	cmp	r3, #0
   10a8e:	d033      	beq.n	10af8 <debug::PrintBacktrace(bool, void*)+0xd4>
  {
    constexpr const char kBuildType[] =
   10a90:	4a1d      	ldr	r2, [pc, #116]	; (10b08 <debug::PrintBacktrace(bool, void*)+0xe4>)
   10a92:	ab03      	add	r3, sp, #12
   10a94:	ca07      	ldmia	r2, {r0, r1, r2}
   10a96:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#if defined(APPLICATION)
        "application";
#else
        "bootloader";
#endif
    puts("\nRun: the following command in your project directory");
   10a9a:	481c      	ldr	r0, [pc, #112]	; (10b0c <debug::PrintBacktrace(bool, void*)+0xe8>)
   10a9c:	f002 f9b8 	bl	12e10 <puts>
    printf("\n  " SJ2_BOLD_WHITE "make stacktrace-%s TRACES=\"", kBuildType);
   10aa0:	ab03      	add	r3, sp, #12
   10aa2:	4619      	mov	r1, r3
   10aa4:	481a      	ldr	r0, [pc, #104]	; (10b10 <debug::PrintBacktrace(bool, void*)+0xec>)
   10aa6:	f003 fc3d 	bl	14324 <printf>
    for (size_t pos = 0; pos < stack_depth - 1; pos++)
   10aaa:	2300      	movs	r3, #0
   10aac:	9308      	str	r3, [sp, #32]
   10aae:	9b06      	ldr	r3, [sp, #24]
   10ab0:	3b01      	subs	r3, #1
   10ab2:	9a08      	ldr	r2, [sp, #32]
   10ab4:	429a      	cmp	r2, r3
   10ab6:	d212      	bcs.n	10ade <debug::PrintBacktrace(bool, void*)+0xba>
    {
      if (pos != 0)
   10ab8:	9b08      	ldr	r3, [sp, #32]
   10aba:	2b00      	cmp	r3, #0
   10abc:	d002      	beq.n	10ac4 <debug::PrintBacktrace(bool, void*)+0xa0>
      {
        putchar(' ');
   10abe:	2020      	movs	r0, #32
   10ac0:	f002 f98a 	bl	12dd8 <putchar>
      }
      printf("0x%p", list_of_called_functions[pos]);
   10ac4:	9b08      	ldr	r3, [sp, #32]
   10ac6:	009b      	lsls	r3, r3, #2
   10ac8:	9a07      	ldr	r2, [sp, #28]
   10aca:	4413      	add	r3, r2
   10acc:	681b      	ldr	r3, [r3, #0]
   10ace:	4619      	mov	r1, r3
   10ad0:	4810      	ldr	r0, [pc, #64]	; (10b14 <debug::PrintBacktrace(bool, void*)+0xf0>)
   10ad2:	f003 fc27 	bl	14324 <printf>
    for (size_t pos = 0; pos < stack_depth - 1; pos++)
   10ad6:	9b08      	ldr	r3, [sp, #32]
   10ad8:	3301      	adds	r3, #1
   10ada:	9308      	str	r3, [sp, #32]
   10adc:	e7e7      	b.n	10aae <debug::PrintBacktrace(bool, void*)+0x8a>
    }
    if (final_address != nullptr)
   10ade:	9b00      	ldr	r3, [sp, #0]
   10ae0:	2b00      	cmp	r3, #0
   10ae2:	d003      	beq.n	10aec <debug::PrintBacktrace(bool, void*)+0xc8>
    {
      printf(" 0x%p", final_address);
   10ae4:	9900      	ldr	r1, [sp, #0]
   10ae6:	480c      	ldr	r0, [pc, #48]	; (10b18 <debug::PrintBacktrace(bool, void*)+0xf4>)
   10ae8:	f003 fc1c 	bl	14324 <printf>
    }
    puts("\"\n" SJ2_COLOR_RESET);
   10aec:	480b      	ldr	r0, [pc, #44]	; (10b1c <debug::PrintBacktrace(bool, void*)+0xf8>)
   10aee:	f002 f98f 	bl	12e10 <puts>
    puts(
   10af2:	480b      	ldr	r0, [pc, #44]	; (10b20 <debug::PrintBacktrace(bool, void*)+0xfc>)
   10af4:	f002 f98c 	bl	12e10 <puts>
        "This will report the file and line number that led to this function "
        "being called.");
  }
}
   10af8:	bf00      	nop
   10afa:	b00b      	add	sp, #44	; 0x2c
   10afc:	f85d fb04 	ldr.w	pc, [sp], #4
   10b00:	00017158 	.word	0x00017158
   10b04:	0001716c 	.word	0x0001716c
   10b08:	00017248 	.word	0x00017248
   10b0c:	0001717c 	.word	0x0001717c
   10b10:	000171b4 	.word	0x000171b4
   10b14:	000171dc 	.word	0x000171dc
   10b18:	000171e4 	.word	0x000171e4
   10b1c:	000171ec 	.word	0x000171ec
   10b20:	000171f4 	.word	0x000171f4

00010b24 <SetUptimeFunction(unsigned long long (*)())>:
{
   10b24:	b510      	push	{r4, lr}
   10b26:	b082      	sub	sp, #8
   10b28:	4674      	mov	r4, lr
   10b2a:	9001      	str	r0, [sp, #4]
   10b2c:	4623      	mov	r3, r4
   10b2e:	4619      	mov	r1, r3
   10b30:	4806      	ldr	r0, [pc, #24]	; (10b4c <SetUptimeFunction(unsigned long long (*)())+0x28>)
   10b32:	f002 f99d 	bl	12e70 <__cyg_profile_func_enter>
  Uptime = uptime_function;
   10b36:	4a06      	ldr	r2, [pc, #24]	; (10b50 <SetUptimeFunction(unsigned long long (*)())+0x2c>)
   10b38:	9b01      	ldr	r3, [sp, #4]
   10b3a:	6013      	str	r3, [r2, #0]
   10b3c:	4623      	mov	r3, r4
   10b3e:	4619      	mov	r1, r3
   10b40:	4802      	ldr	r0, [pc, #8]	; (10b4c <SetUptimeFunction(unsigned long long (*)())+0x28>)
   10b42:	f002 f9a9 	bl	12e98 <__cyg_profile_func_exit>
}
   10b46:	bf00      	nop
   10b48:	b002      	add	sp, #8
   10b4a:	bd10      	pop	{r4, pc}
   10b4c:	00010b25 	.word	0x00010b25
   10b50:	10000000 	.word	0x10000000

00010b54 <Lpc40xxSystemController::SetClockFrequency(unsigned char)>:

  inline static LPC_SC_TypeDef * system_controller = LPC_SC;

  constexpr Lpc40xxSystemController() {}

  uint32_t SetClockFrequency(uint8_t frequency_in_mhz) override
   10b54:	b500      	push	{lr}
   10b56:	b085      	sub	sp, #20
   10b58:	9001      	str	r0, [sp, #4]
   10b5a:	460b      	mov	r3, r1
   10b5c:	f88d 3003 	strb.w	r3, [sp, #3]
  {
    uint32_t offset = 0;
   10b60:	2300      	movs	r3, #0
   10b62:	9303      	str	r3, [sp, #12]
    SelectOscillatorSource(OscillatorSource::kIrc);
   10b64:	2100      	movs	r1, #0
   10b66:	9801      	ldr	r0, [sp, #4]
   10b68:	f000 f8ce 	bl	10d08 <Lpc40xxSystemController::SelectOscillatorSource(Lpc40xxSystemController::OscillatorSource)>
    if (frequency_in_mhz > 12)
   10b6c:	f89d 3003 	ldrb.w	r3, [sp, #3]
   10b70:	2b0c      	cmp	r3, #12
   10b72:	d916      	bls.n	10ba2 <Lpc40xxSystemController::SetClockFrequency(unsigned char)+0x4e>
    {
      offset = SetMainPll(PllInput::kIrc, frequency_in_mhz);
   10b74:	f89d 3003 	ldrb.w	r3, [sp, #3]
   10b78:	b29b      	uxth	r3, r3
   10b7a:	461a      	mov	r2, r3
   10b7c:	210c      	movs	r1, #12
   10b7e:	9801      	ldr	r0, [sp, #4]
   10b80:	f000 f9ac 	bl	10edc <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)>
   10b84:	9003      	str	r0, [sp, #12]
      SelectMainClockSource(MainClockSource::kPllClock);
   10b86:	f44f 7180 	mov.w	r1, #256	; 0x100
   10b8a:	9801      	ldr	r0, [sp, #4]
   10b8c:	f000 f8d6 	bl	10d3c <Lpc40xxSystemController::SelectMainClockSource(Lpc40xxSystemController::MainClockSource)>
      speed_in_hertz = frequency_in_mhz * 1'000'000;
   10b90:	f89d 3003 	ldrb.w	r3, [sp, #3]
   10b94:	4a10      	ldr	r2, [pc, #64]	; (10bd8 <Lpc40xxSystemController::SetClockFrequency(unsigned char)+0x84>)
   10b96:	fb02 f303 	mul.w	r3, r2, r3
   10b9a:	461a      	mov	r2, r3
   10b9c:	4b0f      	ldr	r3, [pc, #60]	; (10bdc <Lpc40xxSystemController::SetClockFrequency(unsigned char)+0x88>)
   10b9e:	601a      	str	r2, [r3, #0]
   10ba0:	e006      	b.n	10bb0 <Lpc40xxSystemController::SetClockFrequency(unsigned char)+0x5c>
    }
    else
    {
      SelectMainClockSource(MainClockSource::kBaseClock);
   10ba2:	2100      	movs	r1, #0
   10ba4:	9801      	ldr	r0, [sp, #4]
   10ba6:	f000 f8c9 	bl	10d3c <Lpc40xxSystemController::SelectMainClockSource(Lpc40xxSystemController::MainClockSource)>
      speed_in_hertz = kDefaultIRCFrequency;
   10baa:	4b0c      	ldr	r3, [pc, #48]	; (10bdc <Lpc40xxSystemController::SetClockFrequency(unsigned char)+0x88>)
   10bac:	4a0c      	ldr	r2, [pc, #48]	; (10be0 <Lpc40xxSystemController::SetClockFrequency(unsigned char)+0x8c>)
   10bae:	601a      	str	r2, [r3, #0]
    }
    SetCpuClockDivider(kDivideInputBy1);
   10bb0:	2101      	movs	r1, #1
   10bb2:	9801      	ldr	r0, [sp, #4]
   10bb4:	f000 fa4a 	bl	1104c <Lpc40xxSystemController::SetCpuClockDivider(unsigned char)>
    SetPeripheralClockDivider(kDivideInputBy1);
   10bb8:	9b01      	ldr	r3, [sp, #4]
   10bba:	681b      	ldr	r3, [r3, #0]
   10bbc:	3304      	adds	r3, #4
   10bbe:	681b      	ldr	r3, [r3, #0]
   10bc0:	2101      	movs	r1, #1
   10bc2:	9801      	ldr	r0, [sp, #4]
   10bc4:	4798      	blx	r3
    SetEmcClockDivider(EmcDivider::kSameSpeedAsCpu);
   10bc6:	2100      	movs	r1, #0
   10bc8:	9801      	ldr	r0, [sp, #4]
   10bca:	f000 fa73 	bl	110b4 <Lpc40xxSystemController::SetEmcClockDivider(Lpc40xxSystemController::EmcDivider)>
    return offset;
   10bce:	9b03      	ldr	r3, [sp, #12]
  }
   10bd0:	4618      	mov	r0, r3
   10bd2:	b005      	add	sp, #20
   10bd4:	f85d fb04 	ldr.w	pc, [sp], #4
   10bd8:	000f4240 	.word	0x000f4240
   10bdc:	1000002c 	.word	0x1000002c
   10be0:	00b71b00 	.word	0x00b71b00

00010be4 <Lpc40xxSystemController::SetPeripheralClockDivider(unsigned char)>:

  void SetPeripheralClockDivider(uint8_t peripheral_divider) override
   10be4:	b500      	push	{lr}
   10be6:	b083      	sub	sp, #12
   10be8:	9001      	str	r0, [sp, #4]
   10bea:	460b      	mov	r3, r1
   10bec:	f88d 3003 	strb.w	r3, [sp, #3]
  {
    SJ2_ASSERT_FATAL(peripheral_divider <= 4, "Divider mustn't exceed 32");
   10bf0:	f89d 3003 	ldrb.w	r3, [sp, #3]
   10bf4:	2b04      	cmp	r3, #4
   10bf6:	d90d      	bls.n	10c14 <Lpc40xxSystemController::SetPeripheralClockDivider(unsigned char)+0x30>
   10bf8:	23ae      	movs	r3, #174	; 0xae
   10bfa:	4a0b      	ldr	r2, [pc, #44]	; (10c28 <Lpc40xxSystemController::SetPeripheralClockDivider(unsigned char)+0x44>)
   10bfc:	490b      	ldr	r1, [pc, #44]	; (10c2c <Lpc40xxSystemController::SetPeripheralClockDivider(unsigned char)+0x48>)
   10bfe:	480c      	ldr	r0, [pc, #48]	; (10c30 <Lpc40xxSystemController::SetPeripheralClockDivider(unsigned char)+0x4c>)
   10c00:	f003 fb90 	bl	14324 <printf>
   10c04:	480b      	ldr	r0, [pc, #44]	; (10c34 <Lpc40xxSystemController::SetPeripheralClockDivider(unsigned char)+0x50>)
   10c06:	f002 f903 	bl	12e10 <puts>
   10c0a:	2100      	movs	r1, #0
   10c0c:	2001      	movs	r0, #1
   10c0e:	f7ff ff09 	bl	10a24 <debug::PrintBacktrace(bool, void*)>
   10c12:	e7fe      	b.n	10c12 <Lpc40xxSystemController::SetPeripheralClockDivider(unsigned char)+0x2e>
    system_controller->PCLKSEL = peripheral_divider;
   10c14:	4b08      	ldr	r3, [pc, #32]	; (10c38 <Lpc40xxSystemController::SetPeripheralClockDivider(unsigned char)+0x54>)
   10c16:	681b      	ldr	r3, [r3, #0]
   10c18:	f89d 2003 	ldrb.w	r2, [sp, #3]
   10c1c:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
  }
   10c20:	bf00      	nop
   10c22:	b003      	add	sp, #12
   10c24:	f85d fb04 	ldr.w	pc, [sp], #4
   10c28:	000178e0 	.word	0x000178e0
   10c2c:	00017708 	.word	0x00017708
   10c30:	00017254 	.word	0x00017254
   10c34:	000172f4 	.word	0x000172f4
   10c38:	10000028 	.word	0x10000028

00010c3c <Lpc40xxSystemController::GetPeripheralClockDivider() const>:

  uint32_t GetPeripheralClockDivider() const override
   10c3c:	b082      	sub	sp, #8
   10c3e:	9001      	str	r0, [sp, #4]
  {
#if defined(HOST_TEST)
    return 1;
#else
    return system_controller->PCLKSEL;
   10c40:	4b03      	ldr	r3, [pc, #12]	; (10c50 <Lpc40xxSystemController::GetPeripheralClockDivider() const+0x14>)
   10c42:	681b      	ldr	r3, [r3, #0]
   10c44:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
#endif
  }
   10c48:	4618      	mov	r0, r3
   10c4a:	b002      	add	sp, #8
   10c4c:	4770      	bx	lr
   10c4e:	bf00      	nop
   10c50:	10000028 	.word	0x10000028

00010c54 <Lpc40xxSystemController::GetSystemFrequency() const>:

  uint32_t GetSystemFrequency() const override
   10c54:	b082      	sub	sp, #8
   10c56:	9001      	str	r0, [sp, #4]
  {
#if defined(HOST_TEST)
    return config::kSystemClockRate;
#else
    return speed_in_hertz;
   10c58:	4b02      	ldr	r3, [pc, #8]	; (10c64 <Lpc40xxSystemController::GetSystemFrequency() const+0x10>)
   10c5a:	681b      	ldr	r3, [r3, #0]
#endif
  }
   10c5c:	4618      	mov	r0, r3
   10c5e:	b002      	add	sp, #8
   10c60:	4770      	bx	lr
   10c62:	bf00      	nop
   10c64:	1000002c 	.word	0x1000002c

00010c68 <Lpc40xxSystemController::GetPeripheralFrequency() const>:

  uint32_t GetPeripheralFrequency() const override
   10c68:	b500      	push	{lr}
   10c6a:	b085      	sub	sp, #20
   10c6c:	9001      	str	r0, [sp, #4]
  {
    uint32_t peripheral_clock_divider = GetPeripheralClockDivider();
   10c6e:	9b01      	ldr	r3, [sp, #4]
   10c70:	681b      	ldr	r3, [r3, #0]
   10c72:	3308      	adds	r3, #8
   10c74:	681b      	ldr	r3, [r3, #0]
   10c76:	9801      	ldr	r0, [sp, #4]
   10c78:	4798      	blx	r3
   10c7a:	9002      	str	r0, [sp, #8]
    uint32_t result = 0;  // return 0 if peripheral_clock_divider == 0
   10c7c:	2300      	movs	r3, #0
   10c7e:	9303      	str	r3, [sp, #12]
    if (peripheral_clock_divider != 0)
   10c80:	9b02      	ldr	r3, [sp, #8]
   10c82:	2b00      	cmp	r3, #0
   10c84:	d00a      	beq.n	10c9c <Lpc40xxSystemController::GetPeripheralFrequency() const+0x34>
    {
      result = GetSystemFrequency() / peripheral_clock_divider;
   10c86:	9b01      	ldr	r3, [sp, #4]
   10c88:	681b      	ldr	r3, [r3, #0]
   10c8a:	330c      	adds	r3, #12
   10c8c:	681b      	ldr	r3, [r3, #0]
   10c8e:	9801      	ldr	r0, [sp, #4]
   10c90:	4798      	blx	r3
   10c92:	4602      	mov	r2, r0
   10c94:	9b02      	ldr	r3, [sp, #8]
   10c96:	fbb2 f3f3 	udiv	r3, r2, r3
   10c9a:	9303      	str	r3, [sp, #12]
    }
    return result;
   10c9c:	9b03      	ldr	r3, [sp, #12]
  }
   10c9e:	4618      	mov	r0, r3
   10ca0:	b005      	add	sp, #20
   10ca2:	f85d fb04 	ldr.w	pc, [sp], #4
   10ca6:	Address 0x0000000000010ca6 is out of bounds.


00010ca8 <Lpc40xxSystemController::PowerUpPeripheral(SystemControllerInterface::PeripheralID const&)>:

  void PowerUpPeripheral(const PeripheralID & peripheral_select) override
   10ca8:	b084      	sub	sp, #16
   10caa:	9001      	str	r0, [sp, #4]
   10cac:	9100      	str	r1, [sp, #0]
  {
    auto power_connection_with_enabled_peripheral =
        system_controller->PCONP | (1 << peripheral_select.device_id);
   10cae:	4b09      	ldr	r3, [pc, #36]	; (10cd4 <Lpc40xxSystemController::PowerUpPeripheral(SystemControllerInterface::PeripheralID const&)+0x2c>)
   10cb0:	681b      	ldr	r3, [r3, #0]
   10cb2:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
   10cb6:	9a00      	ldr	r2, [sp, #0]
   10cb8:	6812      	ldr	r2, [r2, #0]
   10cba:	2101      	movs	r1, #1
   10cbc:	fa01 f202 	lsl.w	r2, r1, r2
   10cc0:	4313      	orrs	r3, r2
   10cc2:	9303      	str	r3, [sp, #12]

    system_controller->PCONP = power_connection_with_enabled_peripheral;
   10cc4:	4b03      	ldr	r3, [pc, #12]	; (10cd4 <Lpc40xxSystemController::PowerUpPeripheral(SystemControllerInterface::PeripheralID const&)+0x2c>)
   10cc6:	681b      	ldr	r3, [r3, #0]
   10cc8:	9a03      	ldr	r2, [sp, #12]
   10cca:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  }
   10cce:	bf00      	nop
   10cd0:	b004      	add	sp, #16
   10cd2:	4770      	bx	lr
   10cd4:	10000028 	.word	0x10000028

00010cd8 <Lpc40xxSystemController::PowerDownPeripheral(SystemControllerInterface::PeripheralID const&)>:
  void PowerDownPeripheral(const PeripheralID & peripheral_select) override
   10cd8:	b084      	sub	sp, #16
   10cda:	9001      	str	r0, [sp, #4]
   10cdc:	9100      	str	r1, [sp, #0]
  {
    auto power_connection_without_enabled_peripheral =
        system_controller->PCONP & (1 << peripheral_select.device_id);
   10cde:	4b09      	ldr	r3, [pc, #36]	; (10d04 <Lpc40xxSystemController::PowerDownPeripheral(SystemControllerInterface::PeripheralID const&)+0x2c>)
   10ce0:	681b      	ldr	r3, [r3, #0]
   10ce2:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
   10ce6:	9a00      	ldr	r2, [sp, #0]
   10ce8:	6812      	ldr	r2, [r2, #0]
   10cea:	2101      	movs	r1, #1
   10cec:	fa01 f202 	lsl.w	r2, r1, r2
   10cf0:	4013      	ands	r3, r2
   10cf2:	9303      	str	r3, [sp, #12]

    system_controller->PCONP = power_connection_without_enabled_peripheral;
   10cf4:	4b03      	ldr	r3, [pc, #12]	; (10d04 <Lpc40xxSystemController::PowerDownPeripheral(SystemControllerInterface::PeripheralID const&)+0x2c>)
   10cf6:	681b      	ldr	r3, [r3, #0]
   10cf8:	9a03      	ldr	r2, [sp, #12]
   10cfa:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  }
   10cfe:	bf00      	nop
   10d00:	b004      	add	sp, #16
   10d02:	4770      	bx	lr
   10d04:	10000028 	.word	0x10000028

00010d08 <Lpc40xxSystemController::SelectOscillatorSource(Lpc40xxSystemController::OscillatorSource)>:

 private:
  void SelectOscillatorSource(OscillatorSource source)
   10d08:	b084      	sub	sp, #16
   10d0a:	9001      	str	r0, [sp, #4]
   10d0c:	460b      	mov	r3, r1
   10d0e:	f8ad 3002 	strh.w	r3, [sp, #2]
  {
    uint32_t source_bit = static_cast<uint32_t>(source);
   10d12:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   10d16:	9303      	str	r3, [sp, #12]
    system_controller->CLKSRCSEL =
        (system_controller->CLKSRCSEL & ~(kOscillatorSelect)) | source_bit;
   10d18:	4b07      	ldr	r3, [pc, #28]	; (10d38 <Lpc40xxSystemController::SelectOscillatorSource(Lpc40xxSystemController::OscillatorSource)+0x30>)
   10d1a:	681b      	ldr	r3, [r3, #0]
   10d1c:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
   10d20:	f023 0101 	bic.w	r1, r3, #1
    system_controller->CLKSRCSEL =
   10d24:	4b04      	ldr	r3, [pc, #16]	; (10d38 <Lpc40xxSystemController::SelectOscillatorSource(Lpc40xxSystemController::OscillatorSource)+0x30>)
   10d26:	681b      	ldr	r3, [r3, #0]
        (system_controller->CLKSRCSEL & ~(kOscillatorSelect)) | source_bit;
   10d28:	9a03      	ldr	r2, [sp, #12]
   10d2a:	430a      	orrs	r2, r1
    system_controller->CLKSRCSEL =
   10d2c:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
  }
   10d30:	bf00      	nop
   10d32:	b004      	add	sp, #16
   10d34:	4770      	bx	lr
   10d36:	bf00      	nop
   10d38:	10000028 	.word	0x10000028

00010d3c <Lpc40xxSystemController::SelectMainClockSource(Lpc40xxSystemController::MainClockSource)>:

  void SelectMainClockSource(MainClockSource source)
   10d3c:	b082      	sub	sp, #8
   10d3e:	9001      	str	r0, [sp, #4]
   10d40:	460b      	mov	r3, r1
   10d42:	f8ad 3002 	strh.w	r3, [sp, #2]
  {
    system_controller->CCLKSEL =
        (system_controller->CCLKSEL & ~(kBaseClockSelect)) |
   10d46:	4b08      	ldr	r3, [pc, #32]	; (10d68 <Lpc40xxSystemController::SelectMainClockSource(Lpc40xxSystemController::MainClockSource)+0x2c>)
   10d48:	681b      	ldr	r3, [r3, #0]
   10d4a:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   10d4e:	f423 7180 	bic.w	r1, r3, #256	; 0x100
        static_cast<uint32_t>(source);
   10d52:	f8bd 2002 	ldrh.w	r2, [sp, #2]
    system_controller->CCLKSEL =
   10d56:	4b04      	ldr	r3, [pc, #16]	; (10d68 <Lpc40xxSystemController::SelectMainClockSource(Lpc40xxSystemController::MainClockSource)+0x2c>)
   10d58:	681b      	ldr	r3, [r3, #0]
        (system_controller->CCLKSEL & ~(kBaseClockSelect)) |
   10d5a:	430a      	orrs	r2, r1
    system_controller->CCLKSEL =
   10d5c:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
  }
   10d60:	bf00      	nop
   10d62:	b002      	add	sp, #8
   10d64:	4770      	bx	lr
   10d66:	bf00      	nop
   10d68:	10000028 	.word	0x10000028

00010d6c <Lpc40xxSystemController::SelectUsbClockSource(Lpc40xxSystemController::UsbSource)>:

  void SelectUsbClockSource(UsbSource usb_clock)
   10d6c:	b082      	sub	sp, #8
   10d6e:	9001      	str	r0, [sp, #4]
   10d70:	460b      	mov	r3, r1
   10d72:	f8ad 3002 	strh.w	r3, [sp, #2]
  {
    system_controller->USBCLKSEL =
        (system_controller->USBCLKSEL & ~(kUsbClockSource)) |
   10d76:	4b08      	ldr	r3, [pc, #32]	; (10d98 <Lpc40xxSystemController::SelectUsbClockSource(Lpc40xxSystemController::UsbSource)+0x2c>)
   10d78:	681b      	ldr	r3, [r3, #0]
   10d7a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
   10d7e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
        static_cast<uint32_t>(usb_clock);
   10d82:	f8bd 2002 	ldrh.w	r2, [sp, #2]
    system_controller->USBCLKSEL =
   10d86:	4b04      	ldr	r3, [pc, #16]	; (10d98 <Lpc40xxSystemController::SelectUsbClockSource(Lpc40xxSystemController::UsbSource)+0x2c>)
   10d88:	681b      	ldr	r3, [r3, #0]
        (system_controller->USBCLKSEL & ~(kUsbClockSource)) |
   10d8a:	430a      	orrs	r2, r1
    system_controller->USBCLKSEL =
   10d8c:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
  }
   10d90:	bf00      	nop
   10d92:	b002      	add	sp, #8
   10d94:	4770      	bx	lr
   10d96:	bf00      	nop
   10d98:	10000028 	.word	0x10000028

00010d9c <Lpc40xxSystemController::SelectSpifiClockSource(Lpc40xxSystemController::SpifiSource)>:

  void SelectSpifiClockSource(SpifiSource spifi_clock)
   10d9c:	b082      	sub	sp, #8
   10d9e:	9001      	str	r0, [sp, #4]
   10da0:	460b      	mov	r3, r1
   10da2:	f8ad 3002 	strh.w	r3, [sp, #2]
  {
    system_controller->SPIFISEL =
        (system_controller->SPIFISEL & ~(kSpifiClockSource)) |
   10da6:	4b08      	ldr	r3, [pc, #32]	; (10dc8 <Lpc40xxSystemController::SelectSpifiClockSource(Lpc40xxSystemController::SpifiSource)+0x2c>)
   10da8:	681b      	ldr	r3, [r3, #0]
   10daa:	f8d3 31b4 	ldr.w	r3, [r3, #436]	; 0x1b4
   10dae:	f423 7140 	bic.w	r1, r3, #768	; 0x300
        static_cast<uint32_t>(spifi_clock);
   10db2:	f8bd 2002 	ldrh.w	r2, [sp, #2]
    system_controller->SPIFISEL =
   10db6:	4b04      	ldr	r3, [pc, #16]	; (10dc8 <Lpc40xxSystemController::SelectSpifiClockSource(Lpc40xxSystemController::SpifiSource)+0x2c>)
   10db8:	681b      	ldr	r3, [r3, #0]
        (system_controller->SPIFISEL & ~(kSpifiClockSource)) |
   10dba:	430a      	orrs	r2, r1
    system_controller->SPIFISEL =
   10dbc:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
  }
   10dc0:	bf00      	nop
   10dc2:	b002      	add	sp, #8
   10dc4:	4770      	bx	lr
   10dc6:	bf00      	nop
   10dc8:	10000028 	.word	0x10000028

00010dcc <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)>:

  uint32_t CalculatePll(PllInput input_frequency, uint16_t desired_speed_in_mhz)
   10dcc:	b500      	push	{lr}
   10dce:	b087      	sub	sp, #28
   10dd0:	9001      	str	r0, [sp, #4]
   10dd2:	460b      	mov	r3, r1
   10dd4:	f8ad 3002 	strh.w	r3, [sp, #2]
   10dd8:	4613      	mov	r3, r2
   10dda:	f8ad 3000 	strh.w	r3, [sp]
  {
    SJ2_ASSERT_FATAL(desired_speed_in_mhz < 384 && desired_speed_in_mhz > 12,
   10dde:	f8bd 3000 	ldrh.w	r3, [sp]
   10de2:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
   10de6:	d203      	bcs.n	10df0 <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)+0x24>
   10de8:	f8bd 3000 	ldrh.w	r3, [sp]
   10dec:	2b0c      	cmp	r3, #12
   10dee:	d80d      	bhi.n	10e0c <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)+0x40>
   10df0:	23ff      	movs	r3, #255	; 0xff
   10df2:	4a34      	ldr	r2, [pc, #208]	; (10ec4 <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)+0xf8>)
   10df4:	4934      	ldr	r1, [pc, #208]	; (10ec8 <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)+0xfc>)
   10df6:	4835      	ldr	r0, [pc, #212]	; (10ecc <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)+0x100>)
   10df8:	f003 fa94 	bl	14324 <printf>
   10dfc:	4834      	ldr	r0, [pc, #208]	; (10ed0 <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)+0x104>)
   10dfe:	f002 f807 	bl	12e10 <puts>
   10e02:	2100      	movs	r1, #0
   10e04:	2001      	movs	r0, #1
   10e06:	f7ff fe0d 	bl	10a24 <debug::PrintBacktrace(bool, void*)>
   10e0a:	e7fe      	b.n	10e0a <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)+0x3e>
                     "Frequency must be lower than 384 MHz"
                     "and greater than or equal to 12 MHz");
    bool calculating = true;
   10e0c:	2301      	movs	r3, #1
   10e0e:	f88d 3017 	strb.w	r3, [sp, #23]
    uint32_t multiplier_value;
    if ((desired_speed_in_mhz % static_cast<uint16_t>(input_frequency)) >= 1)
   10e12:	f8bd 3000 	ldrh.w	r3, [sp]
   10e16:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   10e1a:	fbb3 f1f2 	udiv	r1, r3, r2
   10e1e:	fb02 f201 	mul.w	r2, r2, r1
   10e22:	1a9b      	subs	r3, r3, r2
   10e24:	b29b      	uxth	r3, r3
   10e26:	2b00      	cmp	r3, #0
   10e28:	d009      	beq.n	10e3e <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)+0x72>
    {
      multiplier_value = static_cast<uint32_t>(
          (desired_speed_in_mhz / static_cast<uint16_t>(input_frequency)) + 1);
   10e2a:	f8bd 2000 	ldrh.w	r2, [sp]
   10e2e:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   10e32:	fbb2 f3f3 	udiv	r3, r2, r3
   10e36:	b29b      	uxth	r3, r3
   10e38:	3301      	adds	r3, #1
      multiplier_value = static_cast<uint32_t>(
   10e3a:	9304      	str	r3, [sp, #16]
   10e3c:	e007      	b.n	10e4e <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)+0x82>
    }
    else
    {
      multiplier_value = static_cast<uint32_t>(
          desired_speed_in_mhz / static_cast<uint16_t>(input_frequency));
   10e3e:	f8bd 2000 	ldrh.w	r2, [sp]
   10e42:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   10e46:	fbb2 f3f3 	udiv	r3, r2, r3
   10e4a:	b29b      	uxth	r3, r3
      multiplier_value = static_cast<uint32_t>(
   10e4c:	9304      	str	r3, [sp, #16]
    }
    uint16_t divider_value = 1;
   10e4e:	2301      	movs	r3, #1
   10e50:	f8ad 300e 	strh.w	r3, [sp, #14]
    while (calculating)
   10e54:	f89d 3017 	ldrb.w	r3, [sp, #23]
   10e58:	2b00      	cmp	r3, #0
   10e5a:	d02e      	beq.n	10eba <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)+0xee>
    {
      uint16_t current_controlled_oscillator_frequency;
      current_controlled_oscillator_frequency = static_cast<uint16_t>(
   10e5c:	9b04      	ldr	r3, [sp, #16]
   10e5e:	b29b      	uxth	r3, r3
   10e60:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   10e64:	fb12 f303 	smulbb	r3, r2, r3
   10e68:	b29b      	uxth	r3, r3
   10e6a:	f8bd 200e 	ldrh.w	r2, [sp, #14]
   10e6e:	fb12 f303 	smulbb	r3, r2, r3
   10e72:	b29b      	uxth	r3, r3
   10e74:	005b      	lsls	r3, r3, #1
   10e76:	f8ad 300c 	strh.w	r3, [sp, #12]
          (static_cast<uint16_t>(input_frequency) * multiplier_value * 2) *
          divider_value);
      if (current_controlled_oscillator_frequency >= 156)
   10e7a:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   10e7e:	2b9b      	cmp	r3, #155	; 0x9b
   10e80:	d903      	bls.n	10e8a <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)+0xbe>
      {
        calculating = false;
   10e82:	2300      	movs	r3, #0
   10e84:	f88d 3017 	strb.w	r3, [sp, #23]
   10e88:	e7e4      	b.n	10e54 <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)+0x88>
      }
      else
      {
        divider_value = static_cast<uint16_t>(divider_value * 2);
   10e8a:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   10e8e:	005b      	lsls	r3, r3, #1
   10e90:	f8ad 300e 	strh.w	r3, [sp, #14]
        SJ2_ASSERT_FATAL(divider_value < 8,
   10e94:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   10e98:	2b07      	cmp	r3, #7
   10e9a:	d9db      	bls.n	10e54 <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)+0x88>
   10e9c:	f240 131b 	movw	r3, #283	; 0x11b
   10ea0:	4a08      	ldr	r2, [pc, #32]	; (10ec4 <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)+0xf8>)
   10ea2:	490c      	ldr	r1, [pc, #48]	; (10ed4 <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)+0x108>)
   10ea4:	480c      	ldr	r0, [pc, #48]	; (10ed8 <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)+0x10c>)
   10ea6:	f003 fa3d 	bl	14324 <printf>
   10eaa:	4809      	ldr	r0, [pc, #36]	; (10ed0 <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)+0x104>)
   10eac:	f001 ffb0 	bl	12e10 <puts>
   10eb0:	2100      	movs	r1, #0
   10eb2:	2001      	movs	r0, #1
   10eb4:	f7ff fdb6 	bl	10a24 <debug::PrintBacktrace(bool, void*)>
   10eb8:	e7fe      	b.n	10eb8 <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)+0xec>
                         "PLL divider value went out of bounds");
      }
    }

    return multiplier_value;
   10eba:	9b04      	ldr	r3, [sp, #16]
  }
   10ebc:	4618      	mov	r0, r3
   10ebe:	b007      	add	sp, #28
   10ec0:	f85d fb04 	ldr.w	pc, [sp], #4
   10ec4:	00017988 	.word	0x00017988
   10ec8:	00017720 	.word	0x00017720
   10ecc:	0001730c 	.word	0x0001730c
   10ed0:	000172f4 	.word	0x000172f4
   10ed4:	00017738 	.word	0x00017738
   10ed8:	000173fc 	.word	0x000173fc

00010edc <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)>:

  uint32_t SetMainPll(PllInput input_frequency, uint16_t desired_speed_in_mhz)
   10edc:	b510      	push	{r4, lr}
   10ede:	b08a      	sub	sp, #40	; 0x28
   10ee0:	9001      	str	r0, [sp, #4]
   10ee2:	460b      	mov	r3, r1
   10ee4:	f8ad 3002 	strh.w	r3, [sp, #2]
   10ee8:	4613      	mov	r3, r2
   10eea:	f8ad 3000 	strh.w	r3, [sp]
  {
    uint16_t divider_value = 1;
   10eee:	2301      	movs	r3, #1
   10ef0:	f8ad 301a 	strh.w	r3, [sp, #26]
    uint64_t timeout_time  = Milliseconds() + kDefaultTimeout;
   10ef4:	f7ff fb2a 	bl	1054c <Milliseconds()>
   10ef8:	460a      	mov	r2, r1
   10efa:	4601      	mov	r1, r0
   10efc:	f511 737a 	adds.w	r3, r1, #1000	; 0x3e8
   10f00:	f142 0400 	adc.w	r4, r2, #0
   10f04:	e9cd 3404 	strd	r3, r4, [sp, #16]
    uint64_t current_time  = Milliseconds();
   10f08:	f7ff fb20 	bl	1054c <Milliseconds()>
   10f0c:	e9cd 0108 	strd	r0, r1, [sp, #32]
    uint32_t multiplier_value =
        CalculatePll(input_frequency, desired_speed_in_mhz);
   10f10:	f8bd 2000 	ldrh.w	r2, [sp]
   10f14:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   10f18:	4619      	mov	r1, r3
   10f1a:	9801      	ldr	r0, [sp, #4]
   10f1c:	f7ff ff56 	bl	10dcc <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)>
   10f20:	9003      	str	r0, [sp, #12]
    uint32_t actual_speed =
        static_cast<uint32_t>(input_frequency) * multiplier_value;
   10f22:	f8bd 2002 	ldrh.w	r2, [sp, #2]
    uint32_t actual_speed =
   10f26:	9b03      	ldr	r3, [sp, #12]
   10f28:	fb02 f303 	mul.w	r3, r2, r3
   10f2c:	9307      	str	r3, [sp, #28]
    // TO DO: use registers to retreive values
    SelectOscillatorSource(OscillatorSource::kIrc);
   10f2e:	2100      	movs	r1, #0
   10f30:	9801      	ldr	r0, [sp, #4]
   10f32:	f7ff fee9 	bl	10d08 <Lpc40xxSystemController::SelectOscillatorSource(Lpc40xxSystemController::OscillatorSource)>
    SelectMainClockSource(MainClockSource::kBaseClock);
   10f36:	2100      	movs	r1, #0
   10f38:	9801      	ldr	r0, [sp, #4]
   10f3a:	f7ff feff 	bl	10d3c <Lpc40xxSystemController::SelectMainClockSource(Lpc40xxSystemController::MainClockSource)>
    SelectUsbClockSource(UsbSource::kBaseClock);
   10f3e:	2100      	movs	r1, #0
   10f40:	9801      	ldr	r0, [sp, #4]
   10f42:	f7ff ff13 	bl	10d6c <Lpc40xxSystemController::SelectUsbClockSource(Lpc40xxSystemController::UsbSource)>
    SelectSpifiClockSource(SpifiSource::kBaseClock);
   10f46:	2100      	movs	r1, #0
   10f48:	9801      	ldr	r0, [sp, #4]
   10f4a:	f7ff ff27 	bl	10d9c <Lpc40xxSystemController::SelectSpifiClockSource(Lpc40xxSystemController::SpifiSource)>
    // must subtract 1 from multiplier value as specified in datasheet
    system_controller->PLL0CFG =
        (system_controller->PLL0CFG & ~kClearPllMultiplier) |
   10f4e:	4b3a      	ldr	r3, [pc, #232]	; (11038 <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0x15c>)
   10f50:	681b      	ldr	r3, [r3, #0]
   10f52:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   10f56:	f023 011f 	bic.w	r1, r3, #31
        (multiplier_value - 1);
   10f5a:	9b03      	ldr	r3, [sp, #12]
   10f5c:	1e5a      	subs	r2, r3, #1
    system_controller->PLL0CFG =
   10f5e:	4b36      	ldr	r3, [pc, #216]	; (11038 <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0x15c>)
   10f60:	681b      	ldr	r3, [r3, #0]
        (system_controller->PLL0CFG & ~kClearPllMultiplier) |
   10f62:	430a      	orrs	r2, r1
    system_controller->PLL0CFG =
   10f64:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    system_controller->PLL0CFG =
        (system_controller->PLL0CFG & ~kClearPllDivider) | (divider_value << 5);
   10f68:	4b33      	ldr	r3, [pc, #204]	; (11038 <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0x15c>)
   10f6a:	681b      	ldr	r3, [r3, #0]
   10f6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   10f70:	f023 0260 	bic.w	r2, r3, #96	; 0x60
   10f74:	f8bd 301a 	ldrh.w	r3, [sp, #26]
   10f78:	015b      	lsls	r3, r3, #5
   10f7a:	4619      	mov	r1, r3
    system_controller->PLL0CFG =
   10f7c:	4b2e      	ldr	r3, [pc, #184]	; (11038 <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0x15c>)
   10f7e:	681b      	ldr	r3, [r3, #0]
        (system_controller->PLL0CFG & ~kClearPllDivider) | (divider_value << 5);
   10f80:	430a      	orrs	r2, r1
    system_controller->PLL0CFG =
   10f82:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    system_controller->PLL0CON |= kEnablePll;
   10f86:	4b2c      	ldr	r3, [pc, #176]	; (11038 <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0x15c>)
   10f88:	681b      	ldr	r3, [r3, #0]
   10f8a:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
   10f8e:	4b2a      	ldr	r3, [pc, #168]	; (11038 <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0x15c>)
   10f90:	681b      	ldr	r3, [r3, #0]
   10f92:	f042 0201 	orr.w	r2, r2, #1
   10f96:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    // nessecary feed sequence to ensure the changes are intentional
    system_controller->PLL0FEED = 0xAA;
   10f9a:	4b27      	ldr	r3, [pc, #156]	; (11038 <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0x15c>)
   10f9c:	681b      	ldr	r3, [r3, #0]
   10f9e:	22aa      	movs	r2, #170	; 0xaa
   10fa0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    system_controller->PLL0FEED = 0x55;
   10fa4:	4b24      	ldr	r3, [pc, #144]	; (11038 <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0x15c>)
   10fa6:	681b      	ldr	r3, [r3, #0]
   10fa8:	2255      	movs	r2, #85	; 0x55
   10faa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    while (!(system_controller->PLL0STAT >> kPlock & 1) &&
   10fae:	4b22      	ldr	r3, [pc, #136]	; (11038 <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0x15c>)
   10fb0:	681b      	ldr	r3, [r3, #0]
   10fb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   10fb6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
   10fba:	2b00      	cmp	r3, #0
   10fbc:	d109      	bne.n	10fd2 <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0xf6>
   10fbe:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
   10fc2:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
   10fc6:	42a2      	cmp	r2, r4
   10fc8:	bf08      	it	eq
   10fca:	4299      	cmpeq	r1, r3
   10fcc:	d201      	bcs.n	10fd2 <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0xf6>
   10fce:	2301      	movs	r3, #1
   10fd0:	e000      	b.n	10fd4 <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0xf8>
   10fd2:	2300      	movs	r3, #0
   10fd4:	2b00      	cmp	r3, #0
   10fd6:	d004      	beq.n	10fe2 <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0x106>
           (current_time < timeout_time))
    {
      current_time = Milliseconds();
   10fd8:	f7ff fab8 	bl	1054c <Milliseconds()>
   10fdc:	e9cd 0108 	strd	r0, r1, [sp, #32]
    while (!(system_controller->PLL0STAT >> kPlock & 1) &&
   10fe0:	e7e5      	b.n	10fae <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0xd2>
    }
    if (!(system_controller->PLL0STAT >> kPlock & 1) &&
   10fe2:	4b15      	ldr	r3, [pc, #84]	; (11038 <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0x15c>)
   10fe4:	681b      	ldr	r3, [r3, #0]
   10fe6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   10fea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
   10fee:	2b00      	cmp	r3, #0
   10ff0:	d109      	bne.n	11006 <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0x12a>
   10ff2:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
   10ff6:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
   10ffa:	42a2      	cmp	r2, r4
   10ffc:	bf08      	it	eq
   10ffe:	4299      	cmpeq	r1, r3
   11000:	d301      	bcc.n	11006 <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0x12a>
   11002:	2301      	movs	r3, #1
   11004:	e000      	b.n	11008 <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0x12c>
   11006:	2300      	movs	r3, #0
   11008:	2b00      	cmp	r3, #0
   1100a:	d00e      	beq.n	1102a <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0x14e>
        (current_time >= timeout_time))
    {
      SJ2_ASSERT_FATAL(false,
   1100c:	f240 1343 	movw	r3, #323	; 0x143
   11010:	4a0a      	ldr	r2, [pc, #40]	; (1103c <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0x160>)
   11012:	490b      	ldr	r1, [pc, #44]	; (11040 <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0x164>)
   11014:	480b      	ldr	r0, [pc, #44]	; (11044 <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0x168>)
   11016:	f003 f985 	bl	14324 <printf>
   1101a:	480b      	ldr	r0, [pc, #44]	; (11048 <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0x16c>)
   1101c:	f001 fef8 	bl	12e10 <puts>
   11020:	2100      	movs	r1, #0
   11022:	2001      	movs	r0, #1
   11024:	f7ff fcfe 	bl	10a24 <debug::PrintBacktrace(bool, void*)>
   11028:	e7fe      	b.n	11028 <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0x14c>
                       "PLL lock could not be established before timeout");
      actual_speed = kDefaultIRCFrequency;
    }
    return (actual_speed - desired_speed_in_mhz);
   1102a:	f8bd 3000 	ldrh.w	r3, [sp]
   1102e:	9a07      	ldr	r2, [sp, #28]
   11030:	1ad3      	subs	r3, r2, r3
  }
   11032:	4618      	mov	r0, r3
   11034:	b00a      	add	sp, #40	; 0x28
   11036:	bd10      	pop	{r4, pc}
   11038:	10000028 	.word	0x10000028
   1103c:	0001792c 	.word	0x0001792c
   11040:	00017750 	.word	0x00017750
   11044:	000174a4 	.word	0x000174a4
   11048:	000172f4 	.word	0x000172f4

0001104c <Lpc40xxSystemController::SetCpuClockDivider(unsigned char)>:
                       "PLL lock could not be established before timeout");
    }
    return (actual_speed - desired_speed_in_mhz);
  }

  void SetCpuClockDivider(uint8_t cpu_divider)
   1104c:	b500      	push	{lr}
   1104e:	b083      	sub	sp, #12
   11050:	9001      	str	r0, [sp, #4]
   11052:	460b      	mov	r3, r1
   11054:	f88d 3003 	strb.w	r3, [sp, #3]
  {
    SJ2_ASSERT_FATAL(cpu_divider < 32, "Divider mustn't exceed 32");
   11058:	f89d 3003 	ldrb.w	r3, [sp, #3]
   1105c:	2b1f      	cmp	r3, #31
   1105e:	d90e      	bls.n	1107e <Lpc40xxSystemController::SetCpuClockDivider(unsigned char)+0x32>
   11060:	f240 136f 	movw	r3, #367	; 0x16f
   11064:	4a0e      	ldr	r2, [pc, #56]	; (110a0 <Lpc40xxSystemController::SetCpuClockDivider(unsigned char)+0x54>)
   11066:	490f      	ldr	r1, [pc, #60]	; (110a4 <Lpc40xxSystemController::SetCpuClockDivider(unsigned char)+0x58>)
   11068:	480f      	ldr	r0, [pc, #60]	; (110a8 <Lpc40xxSystemController::SetCpuClockDivider(unsigned char)+0x5c>)
   1106a:	f003 f95b 	bl	14324 <printf>
   1106e:	480f      	ldr	r0, [pc, #60]	; (110ac <Lpc40xxSystemController::SetCpuClockDivider(unsigned char)+0x60>)
   11070:	f001 fece 	bl	12e10 <puts>
   11074:	2100      	movs	r1, #0
   11076:	2001      	movs	r0, #1
   11078:	f7ff fcd4 	bl	10a24 <debug::PrintBacktrace(bool, void*)>
   1107c:	e7fe      	b.n	1107c <Lpc40xxSystemController::SetCpuClockDivider(unsigned char)+0x30>
    system_controller->CCLKSEL =
        (system_controller->CCLKSEL & ~kClearCpuDivider) | cpu_divider;
   1107e:	4b0c      	ldr	r3, [pc, #48]	; (110b0 <Lpc40xxSystemController::SetCpuClockDivider(unsigned char)+0x64>)
   11080:	681b      	ldr	r3, [r3, #0]
   11082:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   11086:	f023 011f 	bic.w	r1, r3, #31
   1108a:	f89d 2003 	ldrb.w	r2, [sp, #3]
    system_controller->CCLKSEL =
   1108e:	4b08      	ldr	r3, [pc, #32]	; (110b0 <Lpc40xxSystemController::SetCpuClockDivider(unsigned char)+0x64>)
   11090:	681b      	ldr	r3, [r3, #0]
        (system_controller->CCLKSEL & ~kClearCpuDivider) | cpu_divider;
   11092:	430a      	orrs	r2, r1
    system_controller->CCLKSEL =
   11094:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
  }
   11098:	bf00      	nop
   1109a:	b003      	add	sp, #12
   1109c:	f85d fb04 	ldr.w	pc, [sp], #4
   110a0:	000179e4 	.word	0x000179e4
   110a4:	00017768 	.word	0x00017768
   110a8:	0001754c 	.word	0x0001754c
   110ac:	000172f4 	.word	0x000172f4
   110b0:	10000028 	.word	0x10000028

000110b4 <Lpc40xxSystemController::SetEmcClockDivider(Lpc40xxSystemController::EmcDivider)>:

  void SetEmcClockDivider(EmcDivider emc_divider)
   110b4:	b082      	sub	sp, #8
   110b6:	9001      	str	r0, [sp, #4]
   110b8:	460b      	mov	r3, r1
   110ba:	f88d 3003 	strb.w	r3, [sp, #3]
  {
    system_controller->EMCCLKSEL =
        (system_controller->EMCCLKSEL & ~kClearEmcDivider) |
   110be:	4b08      	ldr	r3, [pc, #32]	; (110e0 <Lpc40xxSystemController::SetEmcClockDivider(Lpc40xxSystemController::EmcDivider)+0x2c>)
   110c0:	681b      	ldr	r3, [r3, #0]
   110c2:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   110c6:	f023 0101 	bic.w	r1, r3, #1
        static_cast<uint8_t>(emc_divider);
   110ca:	f89d 2003 	ldrb.w	r2, [sp, #3]
    system_controller->EMCCLKSEL =
   110ce:	4b04      	ldr	r3, [pc, #16]	; (110e0 <Lpc40xxSystemController::SetEmcClockDivider(Lpc40xxSystemController::EmcDivider)+0x2c>)
   110d0:	681b      	ldr	r3, [r3, #0]
        (system_controller->EMCCLKSEL & ~kClearEmcDivider) |
   110d2:	430a      	orrs	r2, r1
    system_controller->EMCCLKSEL =
   110d4:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }
   110d8:	bf00      	nop
   110da:	b002      	add	sp, #8
   110dc:	4770      	bx	lr
   110de:	bf00      	nop
   110e0:	10000028 	.word	0x10000028

000110e4 <SystemTimer::DisableTimer()>:
  /// system_timer_isr defaults to nullptr. The actual SystemTickHandler should
  /// check if the isr is set to nullptr, and if it is, turn off the timer, if
  /// set a proper function then execute it.
  inline static IsrPointer system_timer_isr = nullptr;
  /// WARNING: Doing so will most likely disable FreeRTOS
  static void DisableTimer()
   110e4:	b510      	push	{r4, lr}
   110e6:	4674      	mov	r4, lr
   110e8:	4623      	mov	r3, r4
   110ea:	4619      	mov	r1, r3
   110ec:	480a      	ldr	r0, [pc, #40]	; (11118 <SystemTimer::DisableTimer()+0x34>)
   110ee:	f001 febf 	bl	12e70 <__cyg_profile_func_enter>
  {
    sys_tick->LOAD = 0;
   110f2:	4b0a      	ldr	r3, [pc, #40]	; (1111c <SystemTimer::DisableTimer()+0x38>)
   110f4:	681b      	ldr	r3, [r3, #0]
   110f6:	2200      	movs	r2, #0
   110f8:	605a      	str	r2, [r3, #4]
    sys_tick->VAL  = 0;
   110fa:	4b08      	ldr	r3, [pc, #32]	; (1111c <SystemTimer::DisableTimer()+0x38>)
   110fc:	681b      	ldr	r3, [r3, #0]
   110fe:	2200      	movs	r2, #0
   11100:	609a      	str	r2, [r3, #8]
    sys_tick->CTRL = 0;
   11102:	4b06      	ldr	r3, [pc, #24]	; (1111c <SystemTimer::DisableTimer()+0x38>)
   11104:	681b      	ldr	r3, [r3, #0]
   11106:	2200      	movs	r2, #0
   11108:	601a      	str	r2, [r3, #0]
   1110a:	4623      	mov	r3, r4
   1110c:	4619      	mov	r1, r3
   1110e:	4802      	ldr	r0, [pc, #8]	; (11118 <SystemTimer::DisableTimer()+0x34>)
   11110:	f001 fec2 	bl	12e98 <__cyg_profile_func_exit>
  }
   11114:	bf00      	nop
   11116:	bd10      	pop	{r4, pc}
   11118:	000110e5 	.word	0x000110e5
   1111c:	10000030 	.word	0x10000030

00011120 <SystemTimer::SystemTimerHandler()>:
  static void SystemTimerHandler()
   11120:	b510      	push	{r4, lr}
   11122:	4674      	mov	r4, lr
   11124:	4623      	mov	r3, r4
   11126:	4619      	mov	r1, r3
   11128:	4808      	ldr	r0, [pc, #32]	; (1114c <SystemTimer::SystemTimerHandler()+0x2c>)
   1112a:	f001 fea1 	bl	12e70 <__cyg_profile_func_enter>
  {
    // This assumes that SysTickHandler is called every millisecond.
    // Changing that frequency will distort the milliseconds time.
    if (system_timer_isr != nullptr)
   1112e:	4b08      	ldr	r3, [pc, #32]	; (11150 <SystemTimer::SystemTimerHandler()+0x30>)
   11130:	681b      	ldr	r3, [r3, #0]
   11132:	2b00      	cmp	r3, #0
   11134:	d002      	beq.n	1113c <SystemTimer::SystemTimerHandler()+0x1c>
    {
      system_timer_isr();
   11136:	4b06      	ldr	r3, [pc, #24]	; (11150 <SystemTimer::SystemTimerHandler()+0x30>)
   11138:	681b      	ldr	r3, [r3, #0]
   1113a:	4798      	blx	r3
   1113c:	4623      	mov	r3, r4
   1113e:	4619      	mov	r1, r3
   11140:	4802      	ldr	r0, [pc, #8]	; (1114c <SystemTimer::SystemTimerHandler()+0x2c>)
   11142:	f001 fea9 	bl	12e98 <__cyg_profile_func_exit>
    }
  }
   11146:	bf00      	nop
   11148:	bd10      	pop	{r4, pc}
   1114a:	bf00      	nop
   1114c:	00011121 	.word	0x00011121
   11150:	10000368 	.word	0x10000368

00011154 <SystemTimer::SetIsrFunction(void (*)())>:
  constexpr SystemTimer() {}
  void SetIsrFunction(IsrPointer isr) override
   11154:	b510      	push	{r4, lr}
   11156:	b082      	sub	sp, #8
   11158:	4674      	mov	r4, lr
   1115a:	9001      	str	r0, [sp, #4]
   1115c:	9100      	str	r1, [sp, #0]
   1115e:	4623      	mov	r3, r4
   11160:	4619      	mov	r1, r3
   11162:	4807      	ldr	r0, [pc, #28]	; (11180 <SystemTimer::SetIsrFunction(void (*)())+0x2c>)
   11164:	f001 fe84 	bl	12e70 <__cyg_profile_func_enter>
  {
    system_timer_isr = isr;
   11168:	4a06      	ldr	r2, [pc, #24]	; (11184 <SystemTimer::SetIsrFunction(void (*)())+0x30>)
   1116a:	9b00      	ldr	r3, [sp, #0]
   1116c:	6013      	str	r3, [r2, #0]
   1116e:	4623      	mov	r3, r4
   11170:	4619      	mov	r1, r3
   11172:	4803      	ldr	r0, [pc, #12]	; (11180 <SystemTimer::SetIsrFunction(void (*)())+0x2c>)
   11174:	f001 fe90 	bl	12e98 <__cyg_profile_func_exit>
  }
   11178:	bf00      	nop
   1117a:	b002      	add	sp, #8
   1117c:	bd10      	pop	{r4, pc}
   1117e:	bf00      	nop
   11180:	00011155 	.word	0x00011155
   11184:	10000368 	.word	0x10000368

00011188 <SystemTimer::StartTimer()>:
  bool StartTimer() override
   11188:	b530      	push	{r4, r5, lr}
   1118a:	b085      	sub	sp, #20
   1118c:	4675      	mov	r5, lr
   1118e:	9001      	str	r0, [sp, #4]
   11190:	462b      	mov	r3, r5
   11192:	4619      	mov	r1, r3
   11194:	4820      	ldr	r0, [pc, #128]	; (11218 <SystemTimer::StartTimer()+0x90>)
   11196:	f001 fe6b 	bl	12e70 <__cyg_profile_func_enter>
  {
    bool successful = false;
   1119a:	2300      	movs	r3, #0
   1119c:	f88d 300f 	strb.w	r3, [sp, #15]
    if (sys_tick->LOAD != 0)
   111a0:	4b1e      	ldr	r3, [pc, #120]	; (1121c <SystemTimer::StartTimer()+0x94>)
   111a2:	681b      	ldr	r3, [r3, #0]
   111a4:	685b      	ldr	r3, [r3, #4]
   111a6:	2b00      	cmp	r3, #0
   111a8:	bf14      	ite	ne
   111aa:	2301      	movne	r3, #1
   111ac:	2300      	moveq	r3, #0
   111ae:	b2db      	uxtb	r3, r3
   111b0:	2b00      	cmp	r3, #0
   111b2:	d01e      	beq.n	111f2 <SystemTimer::StartTimer()+0x6a>
    {
      sys_tick->VAL = 0;
   111b4:	4b19      	ldr	r3, [pc, #100]	; (1121c <SystemTimer::StartTimer()+0x94>)
   111b6:	681b      	ldr	r3, [r3, #0]
   111b8:	2200      	movs	r2, #0
   111ba:	609a      	str	r2, [r3, #8]
      sys_tick->CTRL |= (1 << ControlBitMap::kTickInterupt);
   111bc:	4b17      	ldr	r3, [pc, #92]	; (1121c <SystemTimer::StartTimer()+0x94>)
   111be:	681b      	ldr	r3, [r3, #0]
   111c0:	681a      	ldr	r2, [r3, #0]
   111c2:	4b16      	ldr	r3, [pc, #88]	; (1121c <SystemTimer::StartTimer()+0x94>)
   111c4:	681b      	ldr	r3, [r3, #0]
   111c6:	f042 0202 	orr.w	r2, r2, #2
   111ca:	601a      	str	r2, [r3, #0]
      sys_tick->CTRL |= (1 << ControlBitMap::kEnableCounter);
   111cc:	4b13      	ldr	r3, [pc, #76]	; (1121c <SystemTimer::StartTimer()+0x94>)
   111ce:	681b      	ldr	r3, [r3, #0]
   111d0:	681a      	ldr	r2, [r3, #0]
   111d2:	4b12      	ldr	r3, [pc, #72]	; (1121c <SystemTimer::StartTimer()+0x94>)
   111d4:	681b      	ldr	r3, [r3, #0]
   111d6:	f042 0201 	orr.w	r2, r2, #1
   111da:	601a      	str	r2, [r3, #0]
      sys_tick->CTRL |= (1 << ControlBitMap::kClkSource);
   111dc:	4b0f      	ldr	r3, [pc, #60]	; (1121c <SystemTimer::StartTimer()+0x94>)
   111de:	681b      	ldr	r3, [r3, #0]
   111e0:	681a      	ldr	r2, [r3, #0]
   111e2:	4b0e      	ldr	r3, [pc, #56]	; (1121c <SystemTimer::StartTimer()+0x94>)
   111e4:	681b      	ldr	r3, [r3, #0]
   111e6:	f042 0204 	orr.w	r2, r2, #4
   111ea:	601a      	str	r2, [r3, #0]
      successful = true;
   111ec:	2301      	movs	r3, #1
   111ee:	f88d 300f 	strb.w	r3, [sp, #15]
    }
    RegisterIsr(SysTick_IRQn, SystemTimerHandler);
   111f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   111f6:	2201      	movs	r2, #1
   111f8:	4909      	ldr	r1, [pc, #36]	; (11220 <SystemTimer::StartTimer()+0x98>)
   111fa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   111fe:	f001 fd0f 	bl	12c20 <RegisterIsr(IRQn, void (*)(), bool, long)>
    return successful;
   11202:	f89d 400f 	ldrb.w	r4, [sp, #15]
   11206:	462b      	mov	r3, r5
   11208:	4619      	mov	r1, r3
   1120a:	4803      	ldr	r0, [pc, #12]	; (11218 <SystemTimer::StartTimer()+0x90>)
   1120c:	f001 fe44 	bl	12e98 <__cyg_profile_func_exit>
   11210:	4623      	mov	r3, r4
  }
   11212:	4618      	mov	r0, r3
   11214:	b005      	add	sp, #20
   11216:	bd30      	pop	{r4, r5, pc}
   11218:	00011189 	.word	0x00011189
   1121c:	10000030 	.word	0x10000030
   11220:	00011121 	.word	0x00011121

00011224 <SystemTimer::SetTickFrequency(unsigned long)>:
  ///          remainder will be returned.
  ///          If the freqency supplied is less then 2Hz, the function will
  ///          return without changing any hardware.
  ///          If the reload value exceeds the SysTick_LOAD_RELOAD_Msk, the
  ///          returned value is the SysTick_LOAD_RELOAD_Msk.
  uint32_t SetTickFrequency(uint32_t frequency) override
   11224:	b530      	push	{r4, r5, lr}
   11226:	b085      	sub	sp, #20
   11228:	4675      	mov	r5, lr
   1122a:	9001      	str	r0, [sp, #4]
   1122c:	9100      	str	r1, [sp, #0]
   1122e:	462b      	mov	r3, r5
   11230:	4619      	mov	r1, r3
   11232:	481f      	ldr	r0, [pc, #124]	; (112b0 <SystemTimer::SetTickFrequency(unsigned long)+0x8c>)
   11234:	f001 fe1c 	bl	12e70 <__cyg_profile_func_enter>
  {
    if (frequency <= 1)
   11238:	9b00      	ldr	r3, [sp, #0]
   1123a:	2b01      	cmp	r3, #1
   1123c:	d801      	bhi.n	11242 <SystemTimer::SetTickFrequency(unsigned long)+0x1e>
    {
      return 0;
   1123e:	2400      	movs	r4, #0
   11240:	e02d      	b.n	1129e <SystemTimer::SetTickFrequency(unsigned long)+0x7a>
    }
    uint32_t reload_value = (GetSystemFrequency() / frequency) - 1;
   11242:	9b01      	ldr	r3, [sp, #4]
   11244:	1d1a      	adds	r2, r3, #4
   11246:	9b01      	ldr	r3, [sp, #4]
   11248:	685b      	ldr	r3, [r3, #4]
   1124a:	330c      	adds	r3, #12
   1124c:	681b      	ldr	r3, [r3, #0]
   1124e:	4610      	mov	r0, r2
   11250:	4798      	blx	r3
   11252:	4602      	mov	r2, r0
   11254:	9b00      	ldr	r3, [sp, #0]
   11256:	fbb2 f3f3 	udiv	r3, r2, r3
   1125a:	3b01      	subs	r3, #1
   1125c:	9303      	str	r3, [sp, #12]
    int remainder         = (GetSystemFrequency() % frequency);
   1125e:	9b01      	ldr	r3, [sp, #4]
   11260:	1d1a      	adds	r2, r3, #4
   11262:	9b01      	ldr	r3, [sp, #4]
   11264:	685b      	ldr	r3, [r3, #4]
   11266:	330c      	adds	r3, #12
   11268:	681b      	ldr	r3, [r3, #0]
   1126a:	4610      	mov	r0, r2
   1126c:	4798      	blx	r3
   1126e:	4603      	mov	r3, r0
   11270:	9a00      	ldr	r2, [sp, #0]
   11272:	fbb3 f2f2 	udiv	r2, r3, r2
   11276:	9900      	ldr	r1, [sp, #0]
   11278:	fb01 f202 	mul.w	r2, r1, r2
   1127c:	1a9b      	subs	r3, r3, r2
   1127e:	9302      	str	r3, [sp, #8]
    if (reload_value > SysTick_LOAD_RELOAD_Msk)
   11280:	9b03      	ldr	r3, [sp, #12]
   11282:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
   11286:	d305      	bcc.n	11294 <SystemTimer::SetTickFrequency(unsigned long)+0x70>
    {
      reload_value = SysTick_LOAD_RELOAD_Msk;
   11288:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
   1128c:	9303      	str	r3, [sp, #12]
      remainder    = SysTick_LOAD_RELOAD_Msk;
   1128e:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
   11292:	9302      	str	r3, [sp, #8]
    }
    sys_tick->LOAD = reload_value;
   11294:	4b07      	ldr	r3, [pc, #28]	; (112b4 <SystemTimer::SetTickFrequency(unsigned long)+0x90>)
   11296:	681b      	ldr	r3, [r3, #0]
   11298:	9a03      	ldr	r2, [sp, #12]
   1129a:	605a      	str	r2, [r3, #4]
    return remainder;
   1129c:	9c02      	ldr	r4, [sp, #8]
   1129e:	462b      	mov	r3, r5
   112a0:	4619      	mov	r1, r3
   112a2:	4803      	ldr	r0, [pc, #12]	; (112b0 <SystemTimer::SetTickFrequency(unsigned long)+0x8c>)
   112a4:	f001 fdf8 	bl	12e98 <__cyg_profile_func_exit>
   112a8:	4623      	mov	r3, r4
  }
   112aa:	4618      	mov	r0, r3
   112ac:	b005      	add	sp, #20
   112ae:	bd30      	pop	{r4, r5, pc}
   112b0:	00011225 	.word	0x00011225
   112b4:	10000030 	.word	0x10000030

000112b8 <Pin::SetPinFunction(unsigned char)>:
  }
  constexpr Pin(uint8_t port_number, uint8_t pin_number)
      : port_(port_number), pin_(pin_number)
  {
  }
  void SetPinFunction(uint8_t function) override
   112b8:	b5f0      	push	{r4, r5, r6, r7, lr}
   112ba:	b085      	sub	sp, #20
   112bc:	4677      	mov	r7, lr
   112be:	9003      	str	r0, [sp, #12]
   112c0:	460b      	mov	r3, r1
   112c2:	f88d 300b 	strb.w	r3, [sp, #11]
   112c6:	463b      	mov	r3, r7
   112c8:	4619      	mov	r1, r3
   112ca:	4817      	ldr	r0, [pc, #92]	; (11328 <Pin::SetPinFunction(unsigned char)+0x70>)
   112cc:	f001 fdd0 	bl	12e70 <__cyg_profile_func_enter>
  {
    pin_map->_register[port_][pin_] =
        BitPlace(pin_map->_register[port_][pin_], PinBitMap::kFunction,
   112d0:	4b16      	ldr	r3, [pc, #88]	; (1132c <Pin::SetPinFunction(unsigned char)+0x74>)
   112d2:	681b      	ldr	r3, [r3, #0]
   112d4:	9a03      	ldr	r2, [sp, #12]
   112d6:	7912      	ldrb	r2, [r2, #4]
   112d8:	4610      	mov	r0, r2
   112da:	9a03      	ldr	r2, [sp, #12]
   112dc:	7952      	ldrb	r2, [r2, #5]
   112de:	4611      	mov	r1, r2
   112e0:	0142      	lsls	r2, r0, #5
   112e2:	440a      	add	r2, r1
   112e4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
                 function & 0b111, 3);
   112e8:	f89d 300b 	ldrb.w	r3, [sp, #11]
        BitPlace(pin_map->_register[port_][pin_], PinBitMap::kFunction,
   112ec:	f003 0207 	and.w	r2, r3, #7
    pin_map->_register[port_][pin_] =
   112f0:	4b0e      	ldr	r3, [pc, #56]	; (1132c <Pin::SetPinFunction(unsigned char)+0x74>)
   112f2:	681c      	ldr	r4, [r3, #0]
   112f4:	9b03      	ldr	r3, [sp, #12]
   112f6:	791b      	ldrb	r3, [r3, #4]
   112f8:	461e      	mov	r6, r3
   112fa:	9b03      	ldr	r3, [sp, #12]
   112fc:	795b      	ldrb	r3, [r3, #5]
   112fe:	461d      	mov	r5, r3
        BitPlace(pin_map->_register[port_][pin_], PinBitMap::kFunction,
   11300:	2303      	movs	r3, #3
   11302:	9300      	str	r3, [sp, #0]
   11304:	4613      	mov	r3, r2
   11306:	2200      	movs	r2, #0
   11308:	9803      	ldr	r0, [sp, #12]
   1130a:	f000 fa67 	bl	117dc <Pin::BitPlace(unsigned long, unsigned long, unsigned long, unsigned long)>
   1130e:	4602      	mov	r2, r0
    pin_map->_register[port_][pin_] =
   11310:	0173      	lsls	r3, r6, #5
   11312:	442b      	add	r3, r5
   11314:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
   11318:	463b      	mov	r3, r7
   1131a:	4619      	mov	r1, r3
   1131c:	4802      	ldr	r0, [pc, #8]	; (11328 <Pin::SetPinFunction(unsigned char)+0x70>)
   1131e:	f001 fdbb 	bl	12e98 <__cyg_profile_func_exit>
  }
   11322:	bf00      	nop
   11324:	b005      	add	sp, #20
   11326:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11328:	000112b9 	.word	0x000112b9
   1132c:	10000034 	.word	0x10000034

00011330 <Pin::SetMode(PinInterface::Mode)>:
  void SetMode(PinInterface::Mode mode) override
   11330:	b5f0      	push	{r4, r5, r6, r7, lr}
   11332:	b087      	sub	sp, #28
   11334:	4677      	mov	r7, lr
   11336:	9003      	str	r0, [sp, #12]
   11338:	460b      	mov	r3, r1
   1133a:	f88d 300b 	strb.w	r3, [sp, #11]
   1133e:	463b      	mov	r3, r7
   11340:	4619      	mov	r1, r3
   11342:	4819      	ldr	r0, [pc, #100]	; (113a8 <Pin::SetMode(PinInterface::Mode)+0x78>)
   11344:	f001 fd94 	bl	12e70 <__cyg_profile_func_enter>
  {
    uint8_t ui_mode                 = static_cast<uint8_t>(mode);
   11348:	f89d 300b 	ldrb.w	r3, [sp, #11]
   1134c:	f88d 3017 	strb.w	r3, [sp, #23]
    pin_map->_register[port_][pin_] = BitPlace(
   11350:	4b16      	ldr	r3, [pc, #88]	; (113ac <Pin::SetMode(PinInterface::Mode)+0x7c>)
   11352:	681b      	ldr	r3, [r3, #0]
        pin_map->_register[port_][pin_], PinBitMap::kMode, ui_mode & 0b11, 2);
   11354:	9a03      	ldr	r2, [sp, #12]
   11356:	7912      	ldrb	r2, [r2, #4]
   11358:	4610      	mov	r0, r2
   1135a:	9a03      	ldr	r2, [sp, #12]
   1135c:	7952      	ldrb	r2, [r2, #5]
   1135e:	4611      	mov	r1, r2
    pin_map->_register[port_][pin_] = BitPlace(
   11360:	0142      	lsls	r2, r0, #5
   11362:	440a      	add	r2, r1
   11364:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
        pin_map->_register[port_][pin_], PinBitMap::kMode, ui_mode & 0b11, 2);
   11368:	f89d 3017 	ldrb.w	r3, [sp, #23]
    pin_map->_register[port_][pin_] = BitPlace(
   1136c:	f003 0203 	and.w	r2, r3, #3
   11370:	4b0e      	ldr	r3, [pc, #56]	; (113ac <Pin::SetMode(PinInterface::Mode)+0x7c>)
   11372:	681c      	ldr	r4, [r3, #0]
   11374:	9b03      	ldr	r3, [sp, #12]
   11376:	791b      	ldrb	r3, [r3, #4]
   11378:	461e      	mov	r6, r3
   1137a:	9b03      	ldr	r3, [sp, #12]
   1137c:	795b      	ldrb	r3, [r3, #5]
   1137e:	461d      	mov	r5, r3
   11380:	2302      	movs	r3, #2
   11382:	9300      	str	r3, [sp, #0]
   11384:	4613      	mov	r3, r2
   11386:	2203      	movs	r2, #3
   11388:	9803      	ldr	r0, [sp, #12]
   1138a:	f000 fa27 	bl	117dc <Pin::BitPlace(unsigned long, unsigned long, unsigned long, unsigned long)>
   1138e:	4602      	mov	r2, r0
   11390:	0173      	lsls	r3, r6, #5
   11392:	442b      	add	r3, r5
   11394:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
   11398:	463b      	mov	r3, r7
   1139a:	4619      	mov	r1, r3
   1139c:	4802      	ldr	r0, [pc, #8]	; (113a8 <Pin::SetMode(PinInterface::Mode)+0x78>)
   1139e:	f001 fd7b 	bl	12e98 <__cyg_profile_func_exit>
  }
   113a2:	bf00      	nop
   113a4:	b007      	add	sp, #28
   113a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   113a8:	00011331 	.word	0x00011331
   113ac:	10000034 	.word	0x10000034

000113b0 <Pin::EnableHysteresis(bool)>:
  void EnableHysteresis(bool enable_hysteresis = true) override
   113b0:	b5f0      	push	{r4, r5, r6, r7, lr}
   113b2:	b085      	sub	sp, #20
   113b4:	4677      	mov	r7, lr
   113b6:	9003      	str	r0, [sp, #12]
   113b8:	460b      	mov	r3, r1
   113ba:	f88d 300b 	strb.w	r3, [sp, #11]
   113be:	463b      	mov	r3, r7
   113c0:	4619      	mov	r1, r3
   113c2:	4816      	ldr	r0, [pc, #88]	; (1141c <Pin::EnableHysteresis(bool)+0x6c>)
   113c4:	f001 fd54 	bl	12e70 <__cyg_profile_func_enter>
  {
    pin_map->_register[port_][pin_] =
        BitPlace(pin_map->_register[port_][pin_], PinBitMap::kHysteresis,
   113c8:	4b15      	ldr	r3, [pc, #84]	; (11420 <Pin::EnableHysteresis(bool)+0x70>)
   113ca:	681b      	ldr	r3, [r3, #0]
   113cc:	9a03      	ldr	r2, [sp, #12]
   113ce:	7912      	ldrb	r2, [r2, #4]
   113d0:	4610      	mov	r0, r2
   113d2:	9a03      	ldr	r2, [sp, #12]
   113d4:	7952      	ldrb	r2, [r2, #5]
   113d6:	4611      	mov	r1, r2
   113d8:	0142      	lsls	r2, r0, #5
   113da:	440a      	add	r2, r1
   113dc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   113e0:	f89d 200b 	ldrb.w	r2, [sp, #11]
    pin_map->_register[port_][pin_] =
   113e4:	4b0e      	ldr	r3, [pc, #56]	; (11420 <Pin::EnableHysteresis(bool)+0x70>)
   113e6:	681c      	ldr	r4, [r3, #0]
   113e8:	9b03      	ldr	r3, [sp, #12]
   113ea:	791b      	ldrb	r3, [r3, #4]
   113ec:	461e      	mov	r6, r3
   113ee:	9b03      	ldr	r3, [sp, #12]
   113f0:	795b      	ldrb	r3, [r3, #5]
   113f2:	461d      	mov	r5, r3
        BitPlace(pin_map->_register[port_][pin_], PinBitMap::kHysteresis,
   113f4:	2301      	movs	r3, #1
   113f6:	9300      	str	r3, [sp, #0]
   113f8:	4613      	mov	r3, r2
   113fa:	2205      	movs	r2, #5
   113fc:	9803      	ldr	r0, [sp, #12]
   113fe:	f000 f9ed 	bl	117dc <Pin::BitPlace(unsigned long, unsigned long, unsigned long, unsigned long)>
   11402:	4602      	mov	r2, r0
    pin_map->_register[port_][pin_] =
   11404:	0173      	lsls	r3, r6, #5
   11406:	442b      	add	r3, r5
   11408:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
   1140c:	463b      	mov	r3, r7
   1140e:	4619      	mov	r1, r3
   11410:	4802      	ldr	r0, [pc, #8]	; (1141c <Pin::EnableHysteresis(bool)+0x6c>)
   11412:	f001 fd41 	bl	12e98 <__cyg_profile_func_exit>
                 enable_hysteresis, 1);
  }
   11416:	bf00      	nop
   11418:	b005      	add	sp, #20
   1141a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1141c:	000113b1 	.word	0x000113b1
   11420:	10000034 	.word	0x10000034

00011424 <Pin::SetAsActiveLow(bool)>:
  void SetAsActiveLow(bool set_as_active_low = true) override
   11424:	b5f0      	push	{r4, r5, r6, r7, lr}
   11426:	b085      	sub	sp, #20
   11428:	4677      	mov	r7, lr
   1142a:	9003      	str	r0, [sp, #12]
   1142c:	460b      	mov	r3, r1
   1142e:	f88d 300b 	strb.w	r3, [sp, #11]
   11432:	463b      	mov	r3, r7
   11434:	4619      	mov	r1, r3
   11436:	4816      	ldr	r0, [pc, #88]	; (11490 <Pin::SetAsActiveLow(bool)+0x6c>)
   11438:	f001 fd1a 	bl	12e70 <__cyg_profile_func_enter>
  {
    pin_map->_register[port_][pin_] =
        BitPlace(pin_map->_register[port_][pin_], PinBitMap::kInputInvert,
   1143c:	4b15      	ldr	r3, [pc, #84]	; (11494 <Pin::SetAsActiveLow(bool)+0x70>)
   1143e:	681b      	ldr	r3, [r3, #0]
   11440:	9a03      	ldr	r2, [sp, #12]
   11442:	7912      	ldrb	r2, [r2, #4]
   11444:	4610      	mov	r0, r2
   11446:	9a03      	ldr	r2, [sp, #12]
   11448:	7952      	ldrb	r2, [r2, #5]
   1144a:	4611      	mov	r1, r2
   1144c:	0142      	lsls	r2, r0, #5
   1144e:	440a      	add	r2, r1
   11450:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   11454:	f89d 200b 	ldrb.w	r2, [sp, #11]
    pin_map->_register[port_][pin_] =
   11458:	4b0e      	ldr	r3, [pc, #56]	; (11494 <Pin::SetAsActiveLow(bool)+0x70>)
   1145a:	681c      	ldr	r4, [r3, #0]
   1145c:	9b03      	ldr	r3, [sp, #12]
   1145e:	791b      	ldrb	r3, [r3, #4]
   11460:	461e      	mov	r6, r3
   11462:	9b03      	ldr	r3, [sp, #12]
   11464:	795b      	ldrb	r3, [r3, #5]
   11466:	461d      	mov	r5, r3
        BitPlace(pin_map->_register[port_][pin_], PinBitMap::kInputInvert,
   11468:	2301      	movs	r3, #1
   1146a:	9300      	str	r3, [sp, #0]
   1146c:	4613      	mov	r3, r2
   1146e:	2206      	movs	r2, #6
   11470:	9803      	ldr	r0, [sp, #12]
   11472:	f000 f9b3 	bl	117dc <Pin::BitPlace(unsigned long, unsigned long, unsigned long, unsigned long)>
   11476:	4602      	mov	r2, r0
    pin_map->_register[port_][pin_] =
   11478:	0173      	lsls	r3, r6, #5
   1147a:	442b      	add	r3, r5
   1147c:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
   11480:	463b      	mov	r3, r7
   11482:	4619      	mov	r1, r3
   11484:	4802      	ldr	r0, [pc, #8]	; (11490 <Pin::SetAsActiveLow(bool)+0x6c>)
   11486:	f001 fd07 	bl	12e98 <__cyg_profile_func_exit>
                 set_as_active_low, 1);
  }
   1148a:	bf00      	nop
   1148c:	b005      	add	sp, #20
   1148e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11490:	00011425 	.word	0x00011425
   11494:	10000034 	.word	0x10000034

00011498 <Pin::SetAsAnalogMode(bool)>:
  // Set bit to 0 to enable analog mode
  void SetAsAnalogMode(bool set_as_analog = true) override
   11498:	b5f0      	push	{r4, r5, r6, r7, lr}
   1149a:	b085      	sub	sp, #20
   1149c:	4677      	mov	r7, lr
   1149e:	9003      	str	r0, [sp, #12]
   114a0:	460b      	mov	r3, r1
   114a2:	f88d 300b 	strb.w	r3, [sp, #11]
   114a6:	463b      	mov	r3, r7
   114a8:	4619      	mov	r1, r3
   114aa:	4818      	ldr	r0, [pc, #96]	; (1150c <Pin::SetAsAnalogMode(bool)+0x74>)
   114ac:	f001 fce0 	bl	12e70 <__cyg_profile_func_enter>
  {
    pin_map->_register[port_][pin_] =
        BitPlace(pin_map->_register[port_][pin_], PinBitMap::kAnalogDigitalMode,
   114b0:	4b17      	ldr	r3, [pc, #92]	; (11510 <Pin::SetAsAnalogMode(bool)+0x78>)
   114b2:	681b      	ldr	r3, [r3, #0]
   114b4:	9a03      	ldr	r2, [sp, #12]
   114b6:	7912      	ldrb	r2, [r2, #4]
   114b8:	4610      	mov	r0, r2
   114ba:	9a03      	ldr	r2, [sp, #12]
   114bc:	7952      	ldrb	r2, [r2, #5]
   114be:	4611      	mov	r1, r2
   114c0:	0142      	lsls	r2, r0, #5
   114c2:	440a      	add	r2, r1
   114c4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
                 !set_as_analog, 1);
   114c8:	f89d 300b 	ldrb.w	r3, [sp, #11]
   114cc:	f083 0301 	eor.w	r3, r3, #1
   114d0:	b2db      	uxtb	r3, r3
        BitPlace(pin_map->_register[port_][pin_], PinBitMap::kAnalogDigitalMode,
   114d2:	461a      	mov	r2, r3
    pin_map->_register[port_][pin_] =
   114d4:	4b0e      	ldr	r3, [pc, #56]	; (11510 <Pin::SetAsAnalogMode(bool)+0x78>)
   114d6:	681c      	ldr	r4, [r3, #0]
   114d8:	9b03      	ldr	r3, [sp, #12]
   114da:	791b      	ldrb	r3, [r3, #4]
   114dc:	461e      	mov	r6, r3
   114de:	9b03      	ldr	r3, [sp, #12]
   114e0:	795b      	ldrb	r3, [r3, #5]
   114e2:	461d      	mov	r5, r3
        BitPlace(pin_map->_register[port_][pin_], PinBitMap::kAnalogDigitalMode,
   114e4:	2301      	movs	r3, #1
   114e6:	9300      	str	r3, [sp, #0]
   114e8:	4613      	mov	r3, r2
   114ea:	2207      	movs	r2, #7
   114ec:	9803      	ldr	r0, [sp, #12]
   114ee:	f000 f975 	bl	117dc <Pin::BitPlace(unsigned long, unsigned long, unsigned long, unsigned long)>
   114f2:	4602      	mov	r2, r0
    pin_map->_register[port_][pin_] =
   114f4:	0173      	lsls	r3, r6, #5
   114f6:	442b      	add	r3, r5
   114f8:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
   114fc:	463b      	mov	r3, r7
   114fe:	4619      	mov	r1, r3
   11500:	4802      	ldr	r0, [pc, #8]	; (1150c <Pin::SetAsAnalogMode(bool)+0x74>)
   11502:	f001 fcc9 	bl	12e98 <__cyg_profile_func_exit>
  }
   11506:	bf00      	nop
   11508:	b005      	add	sp, #20
   1150a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1150c:	00011499 	.word	0x00011499
   11510:	10000034 	.word	0x10000034

00011514 <Pin::EnableDigitalFilter(bool)>:
  // Enable by setting bit to 0 to enable digital filter.
  void EnableDigitalFilter(bool enable_digital_filter = true) override
   11514:	b5f0      	push	{r4, r5, r6, r7, lr}
   11516:	b085      	sub	sp, #20
   11518:	4677      	mov	r7, lr
   1151a:	9003      	str	r0, [sp, #12]
   1151c:	460b      	mov	r3, r1
   1151e:	f88d 300b 	strb.w	r3, [sp, #11]
   11522:	463b      	mov	r3, r7
   11524:	4619      	mov	r1, r3
   11526:	4818      	ldr	r0, [pc, #96]	; (11588 <Pin::EnableDigitalFilter(bool)+0x74>)
   11528:	f001 fca2 	bl	12e70 <__cyg_profile_func_enter>
  {
    pin_map->_register[port_][pin_] =
        BitPlace(pin_map->_register[port_][pin_], PinBitMap::kDigitalFilter,
   1152c:	4b17      	ldr	r3, [pc, #92]	; (1158c <Pin::EnableDigitalFilter(bool)+0x78>)
   1152e:	681b      	ldr	r3, [r3, #0]
   11530:	9a03      	ldr	r2, [sp, #12]
   11532:	7912      	ldrb	r2, [r2, #4]
   11534:	4610      	mov	r0, r2
   11536:	9a03      	ldr	r2, [sp, #12]
   11538:	7952      	ldrb	r2, [r2, #5]
   1153a:	4611      	mov	r1, r2
   1153c:	0142      	lsls	r2, r0, #5
   1153e:	440a      	add	r2, r1
   11540:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
                 !enable_digital_filter, 1);
   11544:	f89d 300b 	ldrb.w	r3, [sp, #11]
   11548:	f083 0301 	eor.w	r3, r3, #1
   1154c:	b2db      	uxtb	r3, r3
        BitPlace(pin_map->_register[port_][pin_], PinBitMap::kDigitalFilter,
   1154e:	461a      	mov	r2, r3
    pin_map->_register[port_][pin_] =
   11550:	4b0e      	ldr	r3, [pc, #56]	; (1158c <Pin::EnableDigitalFilter(bool)+0x78>)
   11552:	681c      	ldr	r4, [r3, #0]
   11554:	9b03      	ldr	r3, [sp, #12]
   11556:	791b      	ldrb	r3, [r3, #4]
   11558:	461e      	mov	r6, r3
   1155a:	9b03      	ldr	r3, [sp, #12]
   1155c:	795b      	ldrb	r3, [r3, #5]
   1155e:	461d      	mov	r5, r3
        BitPlace(pin_map->_register[port_][pin_], PinBitMap::kDigitalFilter,
   11560:	2301      	movs	r3, #1
   11562:	9300      	str	r3, [sp, #0]
   11564:	4613      	mov	r3, r2
   11566:	2208      	movs	r2, #8
   11568:	9803      	ldr	r0, [sp, #12]
   1156a:	f000 f937 	bl	117dc <Pin::BitPlace(unsigned long, unsigned long, unsigned long, unsigned long)>
   1156e:	4602      	mov	r2, r0
    pin_map->_register[port_][pin_] =
   11570:	0173      	lsls	r3, r6, #5
   11572:	442b      	add	r3, r5
   11574:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
   11578:	463b      	mov	r3, r7
   1157a:	4619      	mov	r1, r3
   1157c:	4802      	ldr	r0, [pc, #8]	; (11588 <Pin::EnableDigitalFilter(bool)+0x74>)
   1157e:	f001 fc8b 	bl	12e98 <__cyg_profile_func_exit>
  }
   11582:	bf00      	nop
   11584:	b005      	add	sp, #20
   11586:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11588:	00011515 	.word	0x00011515
   1158c:	10000034 	.word	0x10000034

00011590 <Pin::EnableFastMode(bool)>:
  void EnableFastMode(bool enable_fast_mode = true) override
   11590:	b5f0      	push	{r4, r5, r6, r7, lr}
   11592:	b085      	sub	sp, #20
   11594:	4677      	mov	r7, lr
   11596:	9003      	str	r0, [sp, #12]
   11598:	460b      	mov	r3, r1
   1159a:	f88d 300b 	strb.w	r3, [sp, #11]
   1159e:	463b      	mov	r3, r7
   115a0:	4619      	mov	r1, r3
   115a2:	4816      	ldr	r0, [pc, #88]	; (115fc <Pin::EnableFastMode(bool)+0x6c>)
   115a4:	f001 fc64 	bl	12e70 <__cyg_profile_func_enter>
  {
    pin_map->_register[port_][pin_] = BitPlace(
   115a8:	4b15      	ldr	r3, [pc, #84]	; (11600 <Pin::EnableFastMode(bool)+0x70>)
   115aa:	681b      	ldr	r3, [r3, #0]
        pin_map->_register[port_][pin_], PinBitMap::kSlew, enable_fast_mode, 1);
   115ac:	9a03      	ldr	r2, [sp, #12]
   115ae:	7912      	ldrb	r2, [r2, #4]
   115b0:	4610      	mov	r0, r2
   115b2:	9a03      	ldr	r2, [sp, #12]
   115b4:	7952      	ldrb	r2, [r2, #5]
   115b6:	4611      	mov	r1, r2
    pin_map->_register[port_][pin_] = BitPlace(
   115b8:	0142      	lsls	r2, r0, #5
   115ba:	440a      	add	r2, r1
   115bc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   115c0:	f89d 200b 	ldrb.w	r2, [sp, #11]
   115c4:	4b0e      	ldr	r3, [pc, #56]	; (11600 <Pin::EnableFastMode(bool)+0x70>)
   115c6:	681c      	ldr	r4, [r3, #0]
   115c8:	9b03      	ldr	r3, [sp, #12]
   115ca:	791b      	ldrb	r3, [r3, #4]
   115cc:	461e      	mov	r6, r3
   115ce:	9b03      	ldr	r3, [sp, #12]
   115d0:	795b      	ldrb	r3, [r3, #5]
   115d2:	461d      	mov	r5, r3
   115d4:	2301      	movs	r3, #1
   115d6:	9300      	str	r3, [sp, #0]
   115d8:	4613      	mov	r3, r2
   115da:	2209      	movs	r2, #9
   115dc:	9803      	ldr	r0, [sp, #12]
   115de:	f000 f8fd 	bl	117dc <Pin::BitPlace(unsigned long, unsigned long, unsigned long, unsigned long)>
   115e2:	4602      	mov	r2, r0
   115e4:	0173      	lsls	r3, r6, #5
   115e6:	442b      	add	r3, r5
   115e8:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
   115ec:	463b      	mov	r3, r7
   115ee:	4619      	mov	r1, r3
   115f0:	4802      	ldr	r0, [pc, #8]	; (115fc <Pin::EnableFastMode(bool)+0x6c>)
   115f2:	f001 fc51 	bl	12e98 <__cyg_profile_func_exit>
  }
   115f6:	bf00      	nop
   115f8:	b005      	add	sp, #20
   115fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
   115fc:	00011591 	.word	0x00011591
   11600:	10000034 	.word	0x10000034

00011604 <Pin::EnableI2cHighSpeedMode(bool)>:
  // Enable by setting bit to 0 for i2c high speed mode
  void EnableI2cHighSpeedMode(bool enable_high_speed = true) override
   11604:	b5f0      	push	{r4, r5, r6, r7, lr}
   11606:	b085      	sub	sp, #20
   11608:	4677      	mov	r7, lr
   1160a:	9003      	str	r0, [sp, #12]
   1160c:	460b      	mov	r3, r1
   1160e:	f88d 300b 	strb.w	r3, [sp, #11]
   11612:	463b      	mov	r3, r7
   11614:	4619      	mov	r1, r3
   11616:	4818      	ldr	r0, [pc, #96]	; (11678 <Pin::EnableI2cHighSpeedMode(bool)+0x74>)
   11618:	f001 fc2a 	bl	12e70 <__cyg_profile_func_enter>
  {
    pin_map->_register[port_][pin_] =
        BitPlace(pin_map->_register[port_][pin_], PinBitMap::kI2cHighSpeed,
   1161c:	4b17      	ldr	r3, [pc, #92]	; (1167c <Pin::EnableI2cHighSpeedMode(bool)+0x78>)
   1161e:	681b      	ldr	r3, [r3, #0]
   11620:	9a03      	ldr	r2, [sp, #12]
   11622:	7912      	ldrb	r2, [r2, #4]
   11624:	4610      	mov	r0, r2
   11626:	9a03      	ldr	r2, [sp, #12]
   11628:	7952      	ldrb	r2, [r2, #5]
   1162a:	4611      	mov	r1, r2
   1162c:	0142      	lsls	r2, r0, #5
   1162e:	440a      	add	r2, r1
   11630:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
                 !enable_high_speed, 1);
   11634:	f89d 300b 	ldrb.w	r3, [sp, #11]
   11638:	f083 0301 	eor.w	r3, r3, #1
   1163c:	b2db      	uxtb	r3, r3
        BitPlace(pin_map->_register[port_][pin_], PinBitMap::kI2cHighSpeed,
   1163e:	461a      	mov	r2, r3
    pin_map->_register[port_][pin_] =
   11640:	4b0e      	ldr	r3, [pc, #56]	; (1167c <Pin::EnableI2cHighSpeedMode(bool)+0x78>)
   11642:	681c      	ldr	r4, [r3, #0]
   11644:	9b03      	ldr	r3, [sp, #12]
   11646:	791b      	ldrb	r3, [r3, #4]
   11648:	461e      	mov	r6, r3
   1164a:	9b03      	ldr	r3, [sp, #12]
   1164c:	795b      	ldrb	r3, [r3, #5]
   1164e:	461d      	mov	r5, r3
        BitPlace(pin_map->_register[port_][pin_], PinBitMap::kI2cHighSpeed,
   11650:	2301      	movs	r3, #1
   11652:	9300      	str	r3, [sp, #0]
   11654:	4613      	mov	r3, r2
   11656:	2208      	movs	r2, #8
   11658:	9803      	ldr	r0, [sp, #12]
   1165a:	f000 f8bf 	bl	117dc <Pin::BitPlace(unsigned long, unsigned long, unsigned long, unsigned long)>
   1165e:	4602      	mov	r2, r0
    pin_map->_register[port_][pin_] =
   11660:	0173      	lsls	r3, r6, #5
   11662:	442b      	add	r3, r5
   11664:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
   11668:	463b      	mov	r3, r7
   1166a:	4619      	mov	r1, r3
   1166c:	4802      	ldr	r0, [pc, #8]	; (11678 <Pin::EnableI2cHighSpeedMode(bool)+0x74>)
   1166e:	f001 fc13 	bl	12e98 <__cyg_profile_func_exit>
  }
   11672:	bf00      	nop
   11674:	b005      	add	sp, #20
   11676:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11678:	00011605 	.word	0x00011605
   1167c:	10000034 	.word	0x10000034

00011680 <Pin::EnableI2cHighCurrentDrive(bool)>:
  void EnableI2cHighCurrentDrive(bool enable_high_current = true) override
   11680:	b5f0      	push	{r4, r5, r6, r7, lr}
   11682:	b085      	sub	sp, #20
   11684:	4677      	mov	r7, lr
   11686:	9003      	str	r0, [sp, #12]
   11688:	460b      	mov	r3, r1
   1168a:	f88d 300b 	strb.w	r3, [sp, #11]
   1168e:	463b      	mov	r3, r7
   11690:	4619      	mov	r1, r3
   11692:	4816      	ldr	r0, [pc, #88]	; (116ec <Pin::EnableI2cHighCurrentDrive(bool)+0x6c>)
   11694:	f001 fbec 	bl	12e70 <__cyg_profile_func_enter>
  {
    pin_map->_register[port_][pin_] =
        BitPlace(pin_map->_register[port_][pin_],
   11698:	4b15      	ldr	r3, [pc, #84]	; (116f0 <Pin::EnableI2cHighCurrentDrive(bool)+0x70>)
   1169a:	681b      	ldr	r3, [r3, #0]
   1169c:	9a03      	ldr	r2, [sp, #12]
   1169e:	7912      	ldrb	r2, [r2, #4]
   116a0:	4610      	mov	r0, r2
   116a2:	9a03      	ldr	r2, [sp, #12]
   116a4:	7952      	ldrb	r2, [r2, #5]
   116a6:	4611      	mov	r1, r2
   116a8:	0142      	lsls	r2, r0, #5
   116aa:	440a      	add	r2, r1
   116ac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   116b0:	f89d 200b 	ldrb.w	r2, [sp, #11]
    pin_map->_register[port_][pin_] =
   116b4:	4b0e      	ldr	r3, [pc, #56]	; (116f0 <Pin::EnableI2cHighCurrentDrive(bool)+0x70>)
   116b6:	681c      	ldr	r4, [r3, #0]
   116b8:	9b03      	ldr	r3, [sp, #12]
   116ba:	791b      	ldrb	r3, [r3, #4]
   116bc:	461e      	mov	r6, r3
   116be:	9b03      	ldr	r3, [sp, #12]
   116c0:	795b      	ldrb	r3, [r3, #5]
   116c2:	461d      	mov	r5, r3
        BitPlace(pin_map->_register[port_][pin_],
   116c4:	2301      	movs	r3, #1
   116c6:	9300      	str	r3, [sp, #0]
   116c8:	4613      	mov	r3, r2
   116ca:	2209      	movs	r2, #9
   116cc:	9803      	ldr	r0, [sp, #12]
   116ce:	f000 f885 	bl	117dc <Pin::BitPlace(unsigned long, unsigned long, unsigned long, unsigned long)>
   116d2:	4602      	mov	r2, r0
    pin_map->_register[port_][pin_] =
   116d4:	0173      	lsls	r3, r6, #5
   116d6:	442b      	add	r3, r5
   116d8:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
   116dc:	463b      	mov	r3, r7
   116de:	4619      	mov	r1, r3
   116e0:	4802      	ldr	r0, [pc, #8]	; (116ec <Pin::EnableI2cHighCurrentDrive(bool)+0x6c>)
   116e2:	f001 fbd9 	bl	12e98 <__cyg_profile_func_exit>
                 PinBitMap::kI2cHighCurrentDrive, enable_high_current, 1);
  }
   116e6:	bf00      	nop
   116e8:	b005      	add	sp, #20
   116ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
   116ec:	00011681 	.word	0x00011681
   116f0:	10000034 	.word	0x10000034

000116f4 <Pin::SetAsOpenDrain(bool)>:
  void SetAsOpenDrain(bool set_as_open_drain = true) override
   116f4:	b5f0      	push	{r4, r5, r6, r7, lr}
   116f6:	b085      	sub	sp, #20
   116f8:	4677      	mov	r7, lr
   116fa:	9003      	str	r0, [sp, #12]
   116fc:	460b      	mov	r3, r1
   116fe:	f88d 300b 	strb.w	r3, [sp, #11]
   11702:	463b      	mov	r3, r7
   11704:	4619      	mov	r1, r3
   11706:	4816      	ldr	r0, [pc, #88]	; (11760 <Pin::SetAsOpenDrain(bool)+0x6c>)
   11708:	f001 fbb2 	bl	12e70 <__cyg_profile_func_enter>
  {
    pin_map->_register[port_][pin_] =
        BitPlace(pin_map->_register[port_][pin_], PinBitMap::kOpenDrain,
   1170c:	4b15      	ldr	r3, [pc, #84]	; (11764 <Pin::SetAsOpenDrain(bool)+0x70>)
   1170e:	681b      	ldr	r3, [r3, #0]
   11710:	9a03      	ldr	r2, [sp, #12]
   11712:	7912      	ldrb	r2, [r2, #4]
   11714:	4610      	mov	r0, r2
   11716:	9a03      	ldr	r2, [sp, #12]
   11718:	7952      	ldrb	r2, [r2, #5]
   1171a:	4611      	mov	r1, r2
   1171c:	0142      	lsls	r2, r0, #5
   1171e:	440a      	add	r2, r1
   11720:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   11724:	f89d 200b 	ldrb.w	r2, [sp, #11]
    pin_map->_register[port_][pin_] =
   11728:	4b0e      	ldr	r3, [pc, #56]	; (11764 <Pin::SetAsOpenDrain(bool)+0x70>)
   1172a:	681c      	ldr	r4, [r3, #0]
   1172c:	9b03      	ldr	r3, [sp, #12]
   1172e:	791b      	ldrb	r3, [r3, #4]
   11730:	461e      	mov	r6, r3
   11732:	9b03      	ldr	r3, [sp, #12]
   11734:	795b      	ldrb	r3, [r3, #5]
   11736:	461d      	mov	r5, r3
        BitPlace(pin_map->_register[port_][pin_], PinBitMap::kOpenDrain,
   11738:	2301      	movs	r3, #1
   1173a:	9300      	str	r3, [sp, #0]
   1173c:	4613      	mov	r3, r2
   1173e:	220a      	movs	r2, #10
   11740:	9803      	ldr	r0, [sp, #12]
   11742:	f000 f84b 	bl	117dc <Pin::BitPlace(unsigned long, unsigned long, unsigned long, unsigned long)>
   11746:	4602      	mov	r2, r0
    pin_map->_register[port_][pin_] =
   11748:	0173      	lsls	r3, r6, #5
   1174a:	442b      	add	r3, r5
   1174c:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
   11750:	463b      	mov	r3, r7
   11752:	4619      	mov	r1, r3
   11754:	4802      	ldr	r0, [pc, #8]	; (11760 <Pin::SetAsOpenDrain(bool)+0x6c>)
   11756:	f001 fb9f 	bl	12e98 <__cyg_profile_func_exit>
                 set_as_open_drain, 1);
  }
   1175a:	bf00      	nop
   1175c:	b005      	add	sp, #20
   1175e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11760:	000116f5 	.word	0x000116f5
   11764:	10000034 	.word	0x10000034

00011768 <Pin::EnableDac(bool)>:
  void EnableDac(bool enable_dac = true) override
   11768:	b5f0      	push	{r4, r5, r6, r7, lr}
   1176a:	b085      	sub	sp, #20
   1176c:	4677      	mov	r7, lr
   1176e:	9003      	str	r0, [sp, #12]
   11770:	460b      	mov	r3, r1
   11772:	f88d 300b 	strb.w	r3, [sp, #11]
   11776:	463b      	mov	r3, r7
   11778:	4619      	mov	r1, r3
   1177a:	4816      	ldr	r0, [pc, #88]	; (117d4 <Pin::EnableDac(bool)+0x6c>)
   1177c:	f001 fb78 	bl	12e70 <__cyg_profile_func_enter>
  {
    pin_map->_register[port_][pin_] = BitPlace(
   11780:	4b15      	ldr	r3, [pc, #84]	; (117d8 <Pin::EnableDac(bool)+0x70>)
   11782:	681b      	ldr	r3, [r3, #0]
        pin_map->_register[port_][pin_], PinBitMap::kDacEnable, enable_dac, 1);
   11784:	9a03      	ldr	r2, [sp, #12]
   11786:	7912      	ldrb	r2, [r2, #4]
   11788:	4610      	mov	r0, r2
   1178a:	9a03      	ldr	r2, [sp, #12]
   1178c:	7952      	ldrb	r2, [r2, #5]
   1178e:	4611      	mov	r1, r2
    pin_map->_register[port_][pin_] = BitPlace(
   11790:	0142      	lsls	r2, r0, #5
   11792:	440a      	add	r2, r1
   11794:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   11798:	f89d 200b 	ldrb.w	r2, [sp, #11]
   1179c:	4b0e      	ldr	r3, [pc, #56]	; (117d8 <Pin::EnableDac(bool)+0x70>)
   1179e:	681c      	ldr	r4, [r3, #0]
   117a0:	9b03      	ldr	r3, [sp, #12]
   117a2:	791b      	ldrb	r3, [r3, #4]
   117a4:	461e      	mov	r6, r3
   117a6:	9b03      	ldr	r3, [sp, #12]
   117a8:	795b      	ldrb	r3, [r3, #5]
   117aa:	461d      	mov	r5, r3
   117ac:	2301      	movs	r3, #1
   117ae:	9300      	str	r3, [sp, #0]
   117b0:	4613      	mov	r3, r2
   117b2:	2210      	movs	r2, #16
   117b4:	9803      	ldr	r0, [sp, #12]
   117b6:	f000 f811 	bl	117dc <Pin::BitPlace(unsigned long, unsigned long, unsigned long, unsigned long)>
   117ba:	4602      	mov	r2, r0
   117bc:	0173      	lsls	r3, r6, #5
   117be:	442b      	add	r3, r5
   117c0:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
   117c4:	463b      	mov	r3, r7
   117c6:	4619      	mov	r1, r3
   117c8:	4802      	ldr	r0, [pc, #8]	; (117d4 <Pin::EnableDac(bool)+0x6c>)
   117ca:	f001 fb65 	bl	12e98 <__cyg_profile_func_exit>
  }
   117ce:	bf00      	nop
   117d0:	b005      	add	sp, #20
   117d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   117d4:	00011769 	.word	0x00011769
   117d8:	10000034 	.word	0x10000034

000117dc <Pin::BitPlace(unsigned long, unsigned long, unsigned long, unsigned long)>:
  inline uint32_t BitPlace(uint32_t target, uint32_t position, uint32_t value,
   117dc:	b530      	push	{r4, r5, lr}
   117de:	b087      	sub	sp, #28
   117e0:	4675      	mov	r5, lr
   117e2:	9003      	str	r0, [sp, #12]
   117e4:	9102      	str	r1, [sp, #8]
   117e6:	9201      	str	r2, [sp, #4]
   117e8:	9300      	str	r3, [sp, #0]
   117ea:	462b      	mov	r3, r5
   117ec:	4619      	mov	r1, r3
   117ee:	4813      	ldr	r0, [pc, #76]	; (1183c <Pin::BitPlace(unsigned long, unsigned long, unsigned long, unsigned long)+0x60>)
   117f0:	f001 fb3e 	bl	12e70 <__cyg_profile_func_enter>
                           uint32_t value_width)
  {
    // Generate mask with all 1s
    uint32_t mask = 0xFFFFFFFF >> (32 - value_width);
   117f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   117f6:	f1c3 0320 	rsb	r3, r3, #32
   117fa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   117fe:	fa22 f303 	lsr.w	r3, r2, r3
   11802:	9305      	str	r3, [sp, #20]
    target &= ~(mask << position);
   11804:	9a05      	ldr	r2, [sp, #20]
   11806:	9b01      	ldr	r3, [sp, #4]
   11808:	fa02 f303 	lsl.w	r3, r2, r3
   1180c:	43db      	mvns	r3, r3
   1180e:	9a02      	ldr	r2, [sp, #8]
   11810:	4013      	ands	r3, r2
   11812:	9302      	str	r3, [sp, #8]
    target |= (value & mask) << position;
   11814:	9a00      	ldr	r2, [sp, #0]
   11816:	9b05      	ldr	r3, [sp, #20]
   11818:	401a      	ands	r2, r3
   1181a:	9b01      	ldr	r3, [sp, #4]
   1181c:	fa02 f303 	lsl.w	r3, r2, r3
   11820:	9a02      	ldr	r2, [sp, #8]
   11822:	4313      	orrs	r3, r2
   11824:	9302      	str	r3, [sp, #8]
    return target;
   11826:	9c02      	ldr	r4, [sp, #8]
   11828:	462b      	mov	r3, r5
   1182a:	4619      	mov	r1, r3
   1182c:	4803      	ldr	r0, [pc, #12]	; (1183c <Pin::BitPlace(unsigned long, unsigned long, unsigned long, unsigned long)+0x60>)
   1182e:	f001 fb33 	bl	12e98 <__cyg_profile_func_exit>
   11832:	4623      	mov	r3, r4
  }
   11834:	4618      	mov	r0, r3
   11836:	b007      	add	sp, #28
   11838:	bd30      	pop	{r4, r5, pc}
   1183a:	bf00      	nop
   1183c:	000117dd 	.word	0x000117dd

00011840 <Pin::GetPort() const>:
  uint8_t GetPort() const override
   11840:	b530      	push	{r4, r5, lr}
   11842:	b083      	sub	sp, #12
   11844:	4675      	mov	r5, lr
   11846:	9001      	str	r0, [sp, #4]
   11848:	462b      	mov	r3, r5
   1184a:	4619      	mov	r1, r3
   1184c:	4806      	ldr	r0, [pc, #24]	; (11868 <Pin::GetPort() const+0x28>)
   1184e:	f001 fb0f 	bl	12e70 <__cyg_profile_func_enter>
  {
    return port_;
   11852:	9b01      	ldr	r3, [sp, #4]
   11854:	791c      	ldrb	r4, [r3, #4]
   11856:	462b      	mov	r3, r5
   11858:	4619      	mov	r1, r3
   1185a:	4803      	ldr	r0, [pc, #12]	; (11868 <Pin::GetPort() const+0x28>)
   1185c:	f001 fb1c 	bl	12e98 <__cyg_profile_func_exit>
   11860:	4623      	mov	r3, r4
  }
   11862:	4618      	mov	r0, r3
   11864:	b003      	add	sp, #12
   11866:	bd30      	pop	{r4, r5, pc}
   11868:	00011841 	.word	0x00011841

0001186c <Pin::GetPin() const>:
  uint8_t GetPin() const override
   1186c:	b530      	push	{r4, r5, lr}
   1186e:	b083      	sub	sp, #12
   11870:	4675      	mov	r5, lr
   11872:	9001      	str	r0, [sp, #4]
   11874:	462b      	mov	r3, r5
   11876:	4619      	mov	r1, r3
   11878:	4806      	ldr	r0, [pc, #24]	; (11894 <Pin::GetPin() const+0x28>)
   1187a:	f001 faf9 	bl	12e70 <__cyg_profile_func_enter>
  {
    return pin_;
   1187e:	9b01      	ldr	r3, [sp, #4]
   11880:	795c      	ldrb	r4, [r3, #5]
   11882:	462b      	mov	r3, r5
   11884:	4619      	mov	r1, r3
   11886:	4803      	ldr	r0, [pc, #12]	; (11894 <Pin::GetPin() const+0x28>)
   11888:	f001 fb06 	bl	12e98 <__cyg_profile_func_exit>
   1188c:	4623      	mov	r3, r4
  }
   1188e:	4618      	mov	r0, r3
   11890:	b003      	add	sp, #12
   11892:	bd30      	pop	{r4, r5, pc}
   11894:	0001186d 	.word	0x0001186d

00011898 <unsigned char util::Value<TimerInterface::TimerPort, unsigned char>(TimerInterface::TimerPort)>:
constexpr Type Value(Enum enum_type_value)
   11898:	b530      	push	{r4, r5, lr}
   1189a:	b083      	sub	sp, #12
   1189c:	4675      	mov	r5, lr
   1189e:	4603      	mov	r3, r0
   118a0:	f88d 3007 	strb.w	r3, [sp, #7]
   118a4:	462b      	mov	r3, r5
   118a6:	4619      	mov	r1, r3
   118a8:	4806      	ldr	r0, [pc, #24]	; (118c4 <unsigned char util::Value<TimerInterface::TimerPort, unsigned char>(TimerInterface::TimerPort)+0x2c>)
   118aa:	f001 fae1 	bl	12e70 <__cyg_profile_func_enter>
  return static_cast<Type>(enum_type_value);
   118ae:	f89d 4007 	ldrb.w	r4, [sp, #7]
   118b2:	462b      	mov	r3, r5
   118b4:	4619      	mov	r1, r3
   118b6:	4803      	ldr	r0, [pc, #12]	; (118c4 <unsigned char util::Value<TimerInterface::TimerPort, unsigned char>(TimerInterface::TimerPort)+0x2c>)
   118b8:	f001 faee 	bl	12e98 <__cyg_profile_func_exit>
   118bc:	4623      	mov	r3, r4
}
   118be:	4618      	mov	r0, r3
   118c0:	b003      	add	sp, #12
   118c2:	bd30      	pop	{r4, r5, pc}
   118c4:	00011899 	.word	0x00011899

000118c8 <Timer::DoNothingIsr()>:
    Lpc40xxSystemController::Peripherals::kTimer3
  };

  static constexpr IRQn kTimerIrq[] = { IRQn::TIMER0_IRQn, IRQn::TIMER1_IRQn,
                                        IRQn::TIMER2_IRQn, IRQn::TIMER3_IRQn };
  static void DoNothingIsr() {}
   118c8:	b510      	push	{r4, lr}
   118ca:	4674      	mov	r4, lr
   118cc:	4623      	mov	r3, r4
   118ce:	4619      	mov	r1, r3
   118d0:	4804      	ldr	r0, [pc, #16]	; (118e4 <Timer::DoNothingIsr()+0x1c>)
   118d2:	f001 facd 	bl	12e70 <__cyg_profile_func_enter>
   118d6:	4623      	mov	r3, r4
   118d8:	4619      	mov	r1, r3
   118da:	4802      	ldr	r0, [pc, #8]	; (118e4 <Timer::DoNothingIsr()+0x1c>)
   118dc:	f001 fadc 	bl	12e98 <__cyg_profile_func_exit>
   118e0:	bf00      	nop
   118e2:	bd10      	pop	{r4, pc}
   118e4:	000118c9 	.word	0x000118c9

000118e8 <Timer::Initialize(unsigned long, void (*)(), long)>:
  ///                  register will be 10 ms.
  /// @param isr an ISR that will fire when the condition set by SetTimer
  ///            method is achieved.
  /// @param priority sets the Timer interrupt's priority level, defaults to -1
  ///                 which uses the platforms default priority.
  void Initialize(uint32_t frequency, IsrPointer isr = DoNothingIsr,
   118e8:	b510      	push	{r4, lr}
   118ea:	b086      	sub	sp, #24
   118ec:	4674      	mov	r4, lr
   118ee:	9003      	str	r0, [sp, #12]
   118f0:	9102      	str	r1, [sp, #8]
   118f2:	9201      	str	r2, [sp, #4]
   118f4:	9300      	str	r3, [sp, #0]
   118f6:	4623      	mov	r3, r4
   118f8:	4619      	mov	r1, r3
   118fa:	483e      	ldr	r0, [pc, #248]	; (119f4 <Timer::Initialize(unsigned long, void (*)(), long)+0x10c>)
   118fc:	f001 fab8 	bl	12e70 <__cyg_profile_func_enter>
                  int32_t priority = -1) override final
  {
    PowerUpPeripheral(kPowerbit[channel_]);
   11900:	9b03      	ldr	r3, [sp, #12]
   11902:	1d18      	adds	r0, r3, #4
   11904:	9b03      	ldr	r3, [sp, #12]
   11906:	685b      	ldr	r3, [r3, #4]
   11908:	3314      	adds	r3, #20
   1190a:	681b      	ldr	r3, [r3, #0]
   1190c:	9a03      	ldr	r2, [sp, #12]
   1190e:	7a12      	ldrb	r2, [r2, #8]
   11910:	0092      	lsls	r2, r2, #2
   11912:	4939      	ldr	r1, [pc, #228]	; (119f8 <Timer::Initialize(unsigned long, void (*)(), long)+0x110>)
   11914:	440a      	add	r2, r1
   11916:	4611      	mov	r1, r2
   11918:	4798      	blx	r3
    SJ2_ASSERT_FATAL(
   1191a:	9b02      	ldr	r3, [sp, #8]
   1191c:	2b00      	cmp	r3, #0
   1191e:	d10d      	bne.n	1193c <Timer::Initialize(unsigned long, void (*)(), long)+0x54>
   11920:	2384      	movs	r3, #132	; 0x84
   11922:	4a36      	ldr	r2, [pc, #216]	; (119fc <Timer::Initialize(unsigned long, void (*)(), long)+0x114>)
   11924:	4936      	ldr	r1, [pc, #216]	; (11a00 <Timer::Initialize(unsigned long, void (*)(), long)+0x118>)
   11926:	4837      	ldr	r0, [pc, #220]	; (11a04 <Timer::Initialize(unsigned long, void (*)(), long)+0x11c>)
   11928:	f002 fcfc 	bl	14324 <printf>
   1192c:	4836      	ldr	r0, [pc, #216]	; (11a08 <Timer::Initialize(unsigned long, void (*)(), long)+0x120>)
   1192e:	f001 fa6f 	bl	12e10 <puts>
   11932:	2100      	movs	r1, #0
   11934:	2001      	movs	r0, #1
   11936:	f7ff f875 	bl	10a24 <debug::PrintBacktrace(bool, void*)>
   1193a:	e7fe      	b.n	1193a <Timer::Initialize(unsigned long, void (*)(), long)+0x52>
        frequency != 0,
        "Cannot have zero ticks per microsecond, please choose 1 or more.");
    // Set Prescale register for Prescale Counter to milliseconds
    uint32_t prescaler = GetPeripheralFrequency() / frequency;
   1193c:	9b03      	ldr	r3, [sp, #12]
   1193e:	1d1a      	adds	r2, r3, #4
   11940:	9b03      	ldr	r3, [sp, #12]
   11942:	685b      	ldr	r3, [r3, #4]
   11944:	3310      	adds	r3, #16
   11946:	681b      	ldr	r3, [r3, #0]
   11948:	4610      	mov	r0, r2
   1194a:	4798      	blx	r3
   1194c:	4602      	mov	r2, r0
   1194e:	9b02      	ldr	r3, [sp, #8]
   11950:	fbb2 f3f3 	udiv	r3, r2, r3
   11954:	9305      	str	r3, [sp, #20]
    tim_register[channel_]->PR &= ~(kClear << 1);
   11956:	9b03      	ldr	r3, [sp, #12]
   11958:	7a1b      	ldrb	r3, [r3, #8]
   1195a:	461a      	mov	r2, r3
   1195c:	4b2b      	ldr	r3, [pc, #172]	; (11a0c <Timer::Initialize(unsigned long, void (*)(), long)+0x124>)
   1195e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   11962:	68da      	ldr	r2, [r3, #12]
   11964:	9b03      	ldr	r3, [sp, #12]
   11966:	7a1b      	ldrb	r3, [r3, #8]
   11968:	4619      	mov	r1, r3
   1196a:	4b28      	ldr	r3, [pc, #160]	; (11a0c <Timer::Initialize(unsigned long, void (*)(), long)+0x124>)
   1196c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   11970:	f002 0201 	and.w	r2, r2, #1
   11974:	60da      	str	r2, [r3, #12]
    tim_register[channel_]->PR |= (prescaler << 1);
   11976:	9b03      	ldr	r3, [sp, #12]
   11978:	7a1b      	ldrb	r3, [r3, #8]
   1197a:	461a      	mov	r2, r3
   1197c:	4b23      	ldr	r3, [pc, #140]	; (11a0c <Timer::Initialize(unsigned long, void (*)(), long)+0x124>)
   1197e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   11982:	68d9      	ldr	r1, [r3, #12]
   11984:	9b05      	ldr	r3, [sp, #20]
   11986:	005a      	lsls	r2, r3, #1
   11988:	9b03      	ldr	r3, [sp, #12]
   1198a:	7a1b      	ldrb	r3, [r3, #8]
   1198c:	4618      	mov	r0, r3
   1198e:	4b1f      	ldr	r3, [pc, #124]	; (11a0c <Timer::Initialize(unsigned long, void (*)(), long)+0x124>)
   11990:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   11994:	430a      	orrs	r2, r1
   11996:	60da      	str	r2, [r3, #12]
    tim_register[channel_]->TCR |= (1 << 0);
   11998:	9b03      	ldr	r3, [sp, #12]
   1199a:	7a1b      	ldrb	r3, [r3, #8]
   1199c:	461a      	mov	r2, r3
   1199e:	4b1b      	ldr	r3, [pc, #108]	; (11a0c <Timer::Initialize(unsigned long, void (*)(), long)+0x124>)
   119a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   119a4:	685a      	ldr	r2, [r3, #4]
   119a6:	9b03      	ldr	r3, [sp, #12]
   119a8:	7a1b      	ldrb	r3, [r3, #8]
   119aa:	4619      	mov	r1, r3
   119ac:	4b17      	ldr	r3, [pc, #92]	; (11a0c <Timer::Initialize(unsigned long, void (*)(), long)+0x124>)
   119ae:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   119b2:	f042 0201 	orr.w	r2, r2, #1
   119b6:	605a      	str	r2, [r3, #4]
    user_timer_isr[channel_] = isr;
   119b8:	9b03      	ldr	r3, [sp, #12]
   119ba:	7a1b      	ldrb	r3, [r3, #8]
   119bc:	4619      	mov	r1, r3
   119be:	4a14      	ldr	r2, [pc, #80]	; (11a10 <Timer::Initialize(unsigned long, void (*)(), long)+0x128>)
   119c0:	9b01      	ldr	r3, [sp, #4]
   119c2:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
    RegisterIsr(kTimerIrq[channel_], kTimerIsr[channel_], true, priority);
   119c6:	9b03      	ldr	r3, [sp, #12]
   119c8:	7a1b      	ldrb	r3, [r3, #8]
   119ca:	461a      	mov	r2, r3
   119cc:	4b11      	ldr	r3, [pc, #68]	; (11a14 <Timer::Initialize(unsigned long, void (*)(), long)+0x12c>)
   119ce:	5698      	ldrsb	r0, [r3, r2]
   119d0:	9b03      	ldr	r3, [sp, #12]
   119d2:	7a1b      	ldrb	r3, [r3, #8]
   119d4:	461a      	mov	r2, r3
   119d6:	4b10      	ldr	r3, [pc, #64]	; (11a18 <Timer::Initialize(unsigned long, void (*)(), long)+0x130>)
   119d8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   119dc:	9b00      	ldr	r3, [sp, #0]
   119de:	2201      	movs	r2, #1
   119e0:	f001 f91e 	bl	12c20 <RegisterIsr(IRQn, void (*)(), bool, long)>
   119e4:	4623      	mov	r3, r4
   119e6:	4619      	mov	r1, r3
   119e8:	4802      	ldr	r0, [pc, #8]	; (119f4 <Timer::Initialize(unsigned long, void (*)(), long)+0x10c>)
   119ea:	f001 fa55 	bl	12e98 <__cyg_profile_func_exit>
  }
   119ee:	bf00      	nop
   119f0:	b006      	add	sp, #24
   119f2:	bd10      	pop	{r4, pc}
   119f4:	000118e9 	.word	0x000118e9
   119f8:	00017780 	.word	0x00017780
   119fc:	00017a20 	.word	0x00017a20
   11a00:	000177a4 	.word	0x000177a4
   11a04:	000175e8 	.word	0x000175e8
   11a08:	000172f4 	.word	0x000172f4
   11a0c:	10000038 	.word	0x10000038
   11a10:	100003ac 	.word	0x100003ac
   11a14:	00017790 	.word	0x00017790
   11a18:	00017794 	.word	0x00017794

00011a1c <unsigned char util::Value<TimerInterface::MatchControlRegister, unsigned char>(TimerInterface::MatchControlRegister)>:
constexpr Type Value(Enum enum_type_value)
   11a1c:	b530      	push	{r4, r5, lr}
   11a1e:	b083      	sub	sp, #12
   11a20:	4675      	mov	r5, lr
   11a22:	4603      	mov	r3, r0
   11a24:	f88d 3007 	strb.w	r3, [sp, #7]
   11a28:	462b      	mov	r3, r5
   11a2a:	4619      	mov	r1, r3
   11a2c:	4806      	ldr	r0, [pc, #24]	; (11a48 <unsigned char util::Value<TimerInterface::MatchControlRegister, unsigned char>(TimerInterface::MatchControlRegister)+0x2c>)
   11a2e:	f001 fa1f 	bl	12e70 <__cyg_profile_func_enter>
  return static_cast<Type>(enum_type_value);
   11a32:	f89d 4007 	ldrb.w	r4, [sp, #7]
   11a36:	462b      	mov	r3, r5
   11a38:	4619      	mov	r1, r3
   11a3a:	4803      	ldr	r0, [pc, #12]	; (11a48 <unsigned char util::Value<TimerInterface::MatchControlRegister, unsigned char>(TimerInterface::MatchControlRegister)+0x2c>)
   11a3c:	f001 fa2c 	bl	12e98 <__cyg_profile_func_exit>
   11a40:	4623      	mov	r3, r4
}
   11a42:	4618      	mov	r0, r3
   11a44:	b003      	add	sp, #12
   11a46:	bd30      	pop	{r4, r5, pc}
   11a48:	00011a1d 	.word	0x00011a1d

00011a4c <Timer::SetTimer(unsigned long, TimerInterface::TimerIsrCondition, TimerInterface::MatchControlRegister)>:
  ///
  /// @param ticks the count of the timer register (TC) to have an ISR fire
  /// @param condition the condition for which a timer interrupt will occur
  /// @param match_register which match register (from 0 to 3) should be used
  ///                       for holding the ticks for the condition.
  void SetTimer(uint32_t ticks, TimerIsrCondition condition,
   11a4c:	b570      	push	{r4, r5, r6, lr}
   11a4e:	b086      	sub	sp, #24
   11a50:	4676      	mov	r6, lr
   11a52:	9003      	str	r0, [sp, #12]
   11a54:	9102      	str	r1, [sp, #8]
   11a56:	4611      	mov	r1, r2
   11a58:	461a      	mov	r2, r3
   11a5a:	460b      	mov	r3, r1
   11a5c:	f88d 3007 	strb.w	r3, [sp, #7]
   11a60:	4613      	mov	r3, r2
   11a62:	f88d 3006 	strb.w	r3, [sp, #6]
   11a66:	4633      	mov	r3, r6
   11a68:	4619      	mov	r1, r3
   11a6a:	4832      	ldr	r0, [pc, #200]	; (11b34 <Timer::SetTimer(unsigned long, TimerInterface::TimerIsrCondition, TimerInterface::MatchControlRegister)+0xe8>)
   11a6c:	f001 fa00 	bl	12e70 <__cyg_profile_func_enter>
                MatchControlRegister match_register = kMat0) override final
  {
    static constexpr uint8_t kClearMode = 0b0111;

    uint8_t match_value = util::Value(match_register);
   11a70:	f89d 3006 	ldrb.w	r3, [sp, #6]
   11a74:	4618      	mov	r0, r3
   11a76:	f7ff ffd1 	bl	11a1c <unsigned char util::Value<TimerInterface::MatchControlRegister, unsigned char>(TimerInterface::MatchControlRegister)>
   11a7a:	4603      	mov	r3, r0
   11a7c:	f88d 3017 	strb.w	r3, [sp, #23]
    tim_register[channel_]->MCR &= ~(kClearMode << match_value);
   11a80:	9b03      	ldr	r3, [sp, #12]
   11a82:	7a1b      	ldrb	r3, [r3, #8]
   11a84:	461a      	mov	r2, r3
   11a86:	4b2c      	ldr	r3, [pc, #176]	; (11b38 <Timer::SetTimer(unsigned long, TimerInterface::TimerIsrCondition, TimerInterface::MatchControlRegister)+0xec>)
   11a88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   11a8c:	695a      	ldr	r2, [r3, #20]
   11a8e:	f89d 3017 	ldrb.w	r3, [sp, #23]
   11a92:	2107      	movs	r1, #7
   11a94:	fa01 f303 	lsl.w	r3, r1, r3
   11a98:	43db      	mvns	r3, r3
   11a9a:	4619      	mov	r1, r3
   11a9c:	9b03      	ldr	r3, [sp, #12]
   11a9e:	7a1b      	ldrb	r3, [r3, #8]
   11aa0:	4618      	mov	r0, r3
   11aa2:	4b25      	ldr	r3, [pc, #148]	; (11b38 <Timer::SetTimer(unsigned long, TimerInterface::TimerIsrCondition, TimerInterface::MatchControlRegister)+0xec>)
   11aa4:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   11aa8:	400a      	ands	r2, r1
   11aaa:	615a      	str	r2, [r3, #20]
    tim_register[channel_]->MCR |= condition << match_value;
   11aac:	9b03      	ldr	r3, [sp, #12]
   11aae:	7a1b      	ldrb	r3, [r3, #8]
   11ab0:	461a      	mov	r2, r3
   11ab2:	4b21      	ldr	r3, [pc, #132]	; (11b38 <Timer::SetTimer(unsigned long, TimerInterface::TimerIsrCondition, TimerInterface::MatchControlRegister)+0xec>)
   11ab4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   11ab8:	695a      	ldr	r2, [r3, #20]
   11aba:	f89d 1007 	ldrb.w	r1, [sp, #7]
   11abe:	f89d 3017 	ldrb.w	r3, [sp, #23]
   11ac2:	fa01 f303 	lsl.w	r3, r1, r3
   11ac6:	4619      	mov	r1, r3
   11ac8:	9b03      	ldr	r3, [sp, #12]
   11aca:	7a1b      	ldrb	r3, [r3, #8]
   11acc:	4618      	mov	r0, r3
   11ace:	4b1a      	ldr	r3, [pc, #104]	; (11b38 <Timer::SetTimer(unsigned long, TimerInterface::TimerIsrCondition, TimerInterface::MatchControlRegister)+0xec>)
   11ad0:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   11ad4:	430a      	orrs	r2, r1
   11ad6:	615a      	str	r2, [r3, #20]
    *match[channel_][match_value / 3] |= (((ticks / 2)) << 0);
   11ad8:	9b03      	ldr	r3, [sp, #12]
   11ada:	7a1b      	ldrb	r3, [r3, #8]
   11adc:	4618      	mov	r0, r3
   11ade:	f89d 3017 	ldrb.w	r3, [sp, #23]
   11ae2:	4a16      	ldr	r2, [pc, #88]	; (11b3c <Timer::SetTimer(unsigned long, TimerInterface::TimerIsrCondition, TimerInterface::MatchControlRegister)+0xf0>)
   11ae4:	fba2 2303 	umull	r2, r3, r2, r3
   11ae8:	085b      	lsrs	r3, r3, #1
   11aea:	b2db      	uxtb	r3, r3
   11aec:	4619      	mov	r1, r3
   11aee:	4a14      	ldr	r2, [pc, #80]	; (11b40 <Timer::SetTimer(unsigned long, TimerInterface::TimerIsrCondition, TimerInterface::MatchControlRegister)+0xf4>)
   11af0:	0083      	lsls	r3, r0, #2
   11af2:	440b      	add	r3, r1
   11af4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11af8:	6819      	ldr	r1, [r3, #0]
   11afa:	9b02      	ldr	r3, [sp, #8]
   11afc:	085a      	lsrs	r2, r3, #1
   11afe:	9b03      	ldr	r3, [sp, #12]
   11b00:	7a1b      	ldrb	r3, [r3, #8]
   11b02:	461d      	mov	r5, r3
   11b04:	f89d 3017 	ldrb.w	r3, [sp, #23]
   11b08:	480c      	ldr	r0, [pc, #48]	; (11b3c <Timer::SetTimer(unsigned long, TimerInterface::TimerIsrCondition, TimerInterface::MatchControlRegister)+0xf0>)
   11b0a:	fba0 0303 	umull	r0, r3, r0, r3
   11b0e:	085b      	lsrs	r3, r3, #1
   11b10:	b2db      	uxtb	r3, r3
   11b12:	461c      	mov	r4, r3
   11b14:	480a      	ldr	r0, [pc, #40]	; (11b40 <Timer::SetTimer(unsigned long, TimerInterface::TimerIsrCondition, TimerInterface::MatchControlRegister)+0xf4>)
   11b16:	00ab      	lsls	r3, r5, #2
   11b18:	4423      	add	r3, r4
   11b1a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
   11b1e:	430a      	orrs	r2, r1
   11b20:	601a      	str	r2, [r3, #0]
   11b22:	4633      	mov	r3, r6
   11b24:	4619      	mov	r1, r3
   11b26:	4803      	ldr	r0, [pc, #12]	; (11b34 <Timer::SetTimer(unsigned long, TimerInterface::TimerIsrCondition, TimerInterface::MatchControlRegister)+0xe8>)
   11b28:	f001 f9b6 	bl	12e98 <__cyg_profile_func_exit>
  }
   11b2c:	bf00      	nop
   11b2e:	b006      	add	sp, #24
   11b30:	bd70      	pop	{r4, r5, r6, pc}
   11b32:	bf00      	nop
   11b34:	00011a4d 	.word	0x00011a4d
   11b38:	10000038 	.word	0x10000038
   11b3c:	aaaaaaab 	.word	0xaaaaaaab
   11b40:	1000036c 	.word	0x1000036c

00011b44 <Timer::GetTimer()>:

  [[gnu::always_inline]] uint32_t GetTimer() override final {
   11b44:	b530      	push	{r4, r5, lr}
   11b46:	b083      	sub	sp, #12
   11b48:	4675      	mov	r5, lr
   11b4a:	9001      	str	r0, [sp, #4]
   11b4c:	462b      	mov	r3, r5
   11b4e:	4619      	mov	r1, r3
   11b50:	4809      	ldr	r0, [pc, #36]	; (11b78 <Timer::GetTimer()+0x34>)
   11b52:	f001 f98d 	bl	12e70 <__cyg_profile_func_enter>
    return tim_register[channel_]->TC;
   11b56:	9b01      	ldr	r3, [sp, #4]
   11b58:	7a1b      	ldrb	r3, [r3, #8]
   11b5a:	461a      	mov	r2, r3
   11b5c:	4b07      	ldr	r3, [pc, #28]	; (11b7c <Timer::GetTimer()+0x38>)
   11b5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   11b62:	689c      	ldr	r4, [r3, #8]
   11b64:	462b      	mov	r3, r5
   11b66:	4619      	mov	r1, r3
   11b68:	4803      	ldr	r0, [pc, #12]	; (11b78 <Timer::GetTimer()+0x34>)
   11b6a:	f001 f995 	bl	12e98 <__cyg_profile_func_exit>
   11b6e:	4623      	mov	r3, r4
  }
   11b70:	4618      	mov	r0, r3
   11b72:	b003      	add	sp, #12
   11b74:	bd30      	pop	{r4, r5, pc}
   11b76:	bf00      	nop
   11b78:	00011b45 	.word	0x00011b45
   11b7c:	10000038 	.word	0x10000038

00011b80 <Uart::SetBaudRate(unsigned long)>:
  constexpr Uart(Channels mode, PinInterface * tx_pin, PinInterface * rx_pin)
      : channel_(static_cast<uint8_t>(mode)), tx_(tx_pin), rx_(rx_pin)
  {
  }

  void SetBaudRate(uint32_t baud_rate) override
   11b80:	b510      	push	{r4, lr}
   11b82:	b088      	sub	sp, #32
   11b84:	4674      	mov	r4, lr
   11b86:	9001      	str	r0, [sp, #4]
   11b88:	9100      	str	r1, [sp, #0]
   11b8a:	4623      	mov	r3, r4
   11b8c:	4619      	mov	r1, r3
   11b8e:	482d      	ldr	r0, [pc, #180]	; (11c44 <Uart::SetBaudRate(unsigned long)+0xc4>)
   11b90:	f001 f96e 	bl	12e70 <__cyg_profile_func_enter>
  {
    constexpr uint8_t kDlabBit = (1 << 7);
   11b94:	2380      	movs	r3, #128	; 0x80
   11b96:	f88d 301f 	strb.w	r3, [sp, #31]
    float baudrate             = static_cast<float>(baud_rate);
   11b9a:	9b00      	ldr	r3, [sp, #0]
   11b9c:	ee07 3a90 	vmov	s15, r3
   11ba0:	eef8 7a67 	vcvt.f32.u32	s15, s15
   11ba4:	edcd 7a06 	vstr	s15, [sp, #24]
    UartCalibration_t dividers = GenerateUartCalibration(baudrate);
   11ba8:	ab02      	add	r3, sp, #8
   11baa:	ed9d 0a06 	vldr	s0, [sp, #24]
   11bae:	9901      	ldr	r1, [sp, #4]
   11bb0:	4618      	mov	r0, r3
   11bb2:	f000 fb2d 	bl	12210 <Uart::GenerateUartCalibration(float)>

    uint8_t dlm = static_cast<uint8_t>((dividers.divide_latch >> 8) & 0xFF);
   11bb6:	9b02      	ldr	r3, [sp, #8]
   11bb8:	0a1b      	lsrs	r3, r3, #8
   11bba:	f88d 3017 	strb.w	r3, [sp, #23]
    uint8_t dll = static_cast<uint8_t>(dividers.divide_latch & 0xFF);
   11bbe:	9b02      	ldr	r3, [sp, #8]
   11bc0:	f88d 3016 	strb.w	r3, [sp, #22]
    uint8_t fdr = static_cast<uint8_t>((dividers.multiply & 0xF) << 4 |
   11bc4:	9b04      	ldr	r3, [sp, #16]
   11bc6:	b2db      	uxtb	r3, r3
   11bc8:	011b      	lsls	r3, r3, #4
   11bca:	b2da      	uxtb	r2, r3
                                       (dividers.divide_add & 0xF));
   11bcc:	9b03      	ldr	r3, [sp, #12]
   11bce:	b2db      	uxtb	r3, r3
   11bd0:	f003 030f 	and.w	r3, r3, #15
   11bd4:	b2db      	uxtb	r3, r3
    uint8_t fdr = static_cast<uint8_t>((dividers.multiply & 0xF) << 4 |
   11bd6:	4313      	orrs	r3, r2
   11bd8:	f88d 3015 	strb.w	r3, [sp, #21]

    // Set baud rate
    uart[channel_]->LCR = kDlabBit;
   11bdc:	9b01      	ldr	r3, [sp, #4]
   11bde:	7a1b      	ldrb	r3, [r3, #8]
   11be0:	461a      	mov	r2, r3
   11be2:	4b19      	ldr	r3, [pc, #100]	; (11c48 <Uart::SetBaudRate(unsigned long)+0xc8>)
   11be4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   11be8:	2280      	movs	r2, #128	; 0x80
   11bea:	731a      	strb	r2, [r3, #12]
    uart[channel_]->DLM = dlm;
   11bec:	9b01      	ldr	r3, [sp, #4]
   11bee:	7a1b      	ldrb	r3, [r3, #8]
   11bf0:	461a      	mov	r2, r3
   11bf2:	4b15      	ldr	r3, [pc, #84]	; (11c48 <Uart::SetBaudRate(unsigned long)+0xc8>)
   11bf4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   11bf8:	f89d 2017 	ldrb.w	r2, [sp, #23]
   11bfc:	711a      	strb	r2, [r3, #4]
    uart[channel_]->DLL = dll;
   11bfe:	9b01      	ldr	r3, [sp, #4]
   11c00:	7a1b      	ldrb	r3, [r3, #8]
   11c02:	461a      	mov	r2, r3
   11c04:	4b10      	ldr	r3, [pc, #64]	; (11c48 <Uart::SetBaudRate(unsigned long)+0xc8>)
   11c06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   11c0a:	f89d 2016 	ldrb.w	r2, [sp, #22]
   11c0e:	701a      	strb	r2, [r3, #0]
    uart[channel_]->FDR = fdr;
   11c10:	9b01      	ldr	r3, [sp, #4]
   11c12:	7a1b      	ldrb	r3, [r3, #8]
   11c14:	461a      	mov	r2, r3
   11c16:	4b0c      	ldr	r3, [pc, #48]	; (11c48 <Uart::SetBaudRate(unsigned long)+0xc8>)
   11c18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   11c1c:	f89d 2015 	ldrb.w	r2, [sp, #21]
   11c20:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    uart[channel_]->LCR = kStandardUart;
   11c24:	9b01      	ldr	r3, [sp, #4]
   11c26:	7a1b      	ldrb	r3, [r3, #8]
   11c28:	461a      	mov	r2, r3
   11c2a:	4b07      	ldr	r3, [pc, #28]	; (11c48 <Uart::SetBaudRate(unsigned long)+0xc8>)
   11c2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   11c30:	2203      	movs	r2, #3
   11c32:	731a      	strb	r2, [r3, #12]
   11c34:	4623      	mov	r3, r4
   11c36:	4619      	mov	r1, r3
   11c38:	4802      	ldr	r0, [pc, #8]	; (11c44 <Uart::SetBaudRate(unsigned long)+0xc4>)
   11c3a:	f001 f92d 	bl	12e98 <__cyg_profile_func_exit>
  }
   11c3e:	bf00      	nop
   11c40:	b008      	add	sp, #32
   11c42:	bd10      	pop	{r4, pc}
   11c44:	00011b81 	.word	0x00011b81
   11c48:	10000048 	.word	0x10000048

00011c4c <Uart::Initialize(unsigned long)>:

  bool Initialize(uint32_t baud_rate) override
   11c4c:	b530      	push	{r4, r5, lr}
   11c4e:	b085      	sub	sp, #20
   11c50:	4675      	mov	r5, lr
   11c52:	9001      	str	r0, [sp, #4]
   11c54:	9100      	str	r1, [sp, #0]
   11c56:	462b      	mov	r3, r5
   11c58:	4619      	mov	r1, r3
   11c5a:	4830      	ldr	r0, [pc, #192]	; (11d1c <Uart::Initialize(unsigned long)+0xd0>)
   11c5c:	f001 f908 	bl	12e70 <__cyg_profile_func_enter>
  {
    constexpr uint8_t kFIFOEnableAndReset = 0b111;
   11c60:	2307      	movs	r3, #7
   11c62:	f88d 300f 	strb.w	r3, [sp, #15]
    // Powering the port
    PowerUpPeripheral(kPowerbit[channel_]);
   11c66:	9b01      	ldr	r3, [sp, #4]
   11c68:	1d18      	adds	r0, r3, #4
   11c6a:	9b01      	ldr	r3, [sp, #4]
   11c6c:	685b      	ldr	r3, [r3, #4]
   11c6e:	3314      	adds	r3, #20
   11c70:	681b      	ldr	r3, [r3, #0]
   11c72:	9a01      	ldr	r2, [sp, #4]
   11c74:	7a12      	ldrb	r2, [r2, #8]
   11c76:	0092      	lsls	r2, r2, #2
   11c78:	4929      	ldr	r1, [pc, #164]	; (11d20 <Uart::Initialize(unsigned long)+0xd4>)
   11c7a:	440a      	add	r2, r1
   11c7c:	4611      	mov	r1, r2
   11c7e:	4798      	blx	r3
    // Setting the pin functions and modes
    rx_->SetPinFunction(kRxUartPortFunction[channel_]);
   11c80:	9b01      	ldr	r3, [sp, #4]
   11c82:	6918      	ldr	r0, [r3, #16]
   11c84:	9b01      	ldr	r3, [sp, #4]
   11c86:	691b      	ldr	r3, [r3, #16]
   11c88:	681b      	ldr	r3, [r3, #0]
   11c8a:	681b      	ldr	r3, [r3, #0]
   11c8c:	9a01      	ldr	r2, [sp, #4]
   11c8e:	7a12      	ldrb	r2, [r2, #8]
   11c90:	4611      	mov	r1, r2
   11c92:	4a24      	ldr	r2, [pc, #144]	; (11d24 <Uart::Initialize(unsigned long)+0xd8>)
   11c94:	5c52      	ldrb	r2, [r2, r1]
   11c96:	4611      	mov	r1, r2
   11c98:	4798      	blx	r3
    tx_->SetPinFunction(kTxUartPortFunction[channel_]);
   11c9a:	9b01      	ldr	r3, [sp, #4]
   11c9c:	68d8      	ldr	r0, [r3, #12]
   11c9e:	9b01      	ldr	r3, [sp, #4]
   11ca0:	68db      	ldr	r3, [r3, #12]
   11ca2:	681b      	ldr	r3, [r3, #0]
   11ca4:	681b      	ldr	r3, [r3, #0]
   11ca6:	9a01      	ldr	r2, [sp, #4]
   11ca8:	7a12      	ldrb	r2, [r2, #8]
   11caa:	4611      	mov	r1, r2
   11cac:	4a1e      	ldr	r2, [pc, #120]	; (11d28 <Uart::Initialize(unsigned long)+0xdc>)
   11cae:	5c52      	ldrb	r2, [r2, r1]
   11cb0:	4611      	mov	r1, r2
   11cb2:	4798      	blx	r3
    rx_->SetMode(PinInterface::Mode::kPullUp);
   11cb4:	9b01      	ldr	r3, [sp, #4]
   11cb6:	691a      	ldr	r2, [r3, #16]
   11cb8:	9b01      	ldr	r3, [sp, #4]
   11cba:	691b      	ldr	r3, [r3, #16]
   11cbc:	681b      	ldr	r3, [r3, #0]
   11cbe:	3304      	adds	r3, #4
   11cc0:	681b      	ldr	r3, [r3, #0]
   11cc2:	2102      	movs	r1, #2
   11cc4:	4610      	mov	r0, r2
   11cc6:	4798      	blx	r3
    tx_->SetMode(PinInterface::Mode::kPullUp);
   11cc8:	9b01      	ldr	r3, [sp, #4]
   11cca:	68da      	ldr	r2, [r3, #12]
   11ccc:	9b01      	ldr	r3, [sp, #4]
   11cce:	68db      	ldr	r3, [r3, #12]
   11cd0:	681b      	ldr	r3, [r3, #0]
   11cd2:	3304      	adds	r3, #4
   11cd4:	681b      	ldr	r3, [r3, #0]
   11cd6:	2102      	movs	r1, #2
   11cd8:	4610      	mov	r0, r2
   11cda:	4798      	blx	r3
    // Baud rate setting
    SetBaudRate(baud_rate);
   11cdc:	9900      	ldr	r1, [sp, #0]
   11cde:	9801      	ldr	r0, [sp, #4]
   11ce0:	f7ff ff4e 	bl	11b80 <Uart::SetBaudRate(unsigned long)>
    uart[channel_]->FCR |= kFIFOEnableAndReset;
   11ce4:	9b01      	ldr	r3, [sp, #4]
   11ce6:	7a1b      	ldrb	r3, [r3, #8]
   11ce8:	461a      	mov	r2, r3
   11cea:	4b10      	ldr	r3, [pc, #64]	; (11d2c <Uart::Initialize(unsigned long)+0xe0>)
   11cec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   11cf0:	7a1b      	ldrb	r3, [r3, #8]
   11cf2:	b2da      	uxtb	r2, r3
   11cf4:	9b01      	ldr	r3, [sp, #4]
   11cf6:	7a1b      	ldrb	r3, [r3, #8]
   11cf8:	4619      	mov	r1, r3
   11cfa:	4b0c      	ldr	r3, [pc, #48]	; (11d2c <Uart::Initialize(unsigned long)+0xe0>)
   11cfc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   11d00:	f042 0207 	orr.w	r2, r2, #7
   11d04:	b2d2      	uxtb	r2, r2
   11d06:	721a      	strb	r2, [r3, #8]
    return true;
   11d08:	2401      	movs	r4, #1
   11d0a:	462b      	mov	r3, r5
   11d0c:	4619      	mov	r1, r3
   11d0e:	4803      	ldr	r0, [pc, #12]	; (11d1c <Uart::Initialize(unsigned long)+0xd0>)
   11d10:	f001 f8c2 	bl	12e98 <__cyg_profile_func_exit>
   11d14:	4623      	mov	r3, r4
  }
   11d16:	4618      	mov	r0, r3
   11d18:	b005      	add	sp, #20
   11d1a:	bd30      	pop	{r4, r5, pc}
   11d1c:	00011c4d 	.word	0x00011c4d
   11d20:	000177b8 	.word	0x000177b8
   11d24:	000177b4 	.word	0x000177b4
   11d28:	000177b0 	.word	0x000177b0
   11d2c:	10000048 	.word	0x10000048

00011d30 <Uart::Send(unsigned char)::{lambda()#1}::operator()() const>:

  void Send(uint8_t data) override
  {
    uart[channel_]->THR              = data;
    auto wait_for_transfer_to_finish = [this]() -> bool {
   11d30:	b530      	push	{r4, r5, lr}
   11d32:	b083      	sub	sp, #12
   11d34:	4675      	mov	r5, lr
   11d36:	9001      	str	r0, [sp, #4]
   11d38:	462b      	mov	r3, r5
   11d3a:	4619      	mov	r1, r3
   11d3c:	480d      	ldr	r0, [pc, #52]	; (11d74 <Uart::Send(unsigned char)::{lambda()#1}::operator()() const+0x44>)
   11d3e:	f001 f897 	bl	12e70 <__cyg_profile_func_enter>
   11d42:	9b01      	ldr	r3, [sp, #4]
   11d44:	681b      	ldr	r3, [r3, #0]
      return (uart[channel_]->LSR & (1 << 5));
   11d46:	7a1b      	ldrb	r3, [r3, #8]
   11d48:	461a      	mov	r2, r3
   11d4a:	4b0b      	ldr	r3, [pc, #44]	; (11d78 <Uart::Send(unsigned char)::{lambda()#1}::operator()() const+0x48>)
   11d4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   11d50:	7d1b      	ldrb	r3, [r3, #20]
   11d52:	b2db      	uxtb	r3, r3
   11d54:	f003 0320 	and.w	r3, r3, #32
   11d58:	2b00      	cmp	r3, #0
   11d5a:	bf14      	ite	ne
   11d5c:	2301      	movne	r3, #1
   11d5e:	2300      	moveq	r3, #0
   11d60:	b2dc      	uxtb	r4, r3
   11d62:	462b      	mov	r3, r5
   11d64:	4619      	mov	r1, r3
   11d66:	4803      	ldr	r0, [pc, #12]	; (11d74 <Uart::Send(unsigned char)::{lambda()#1}::operator()() const+0x44>)
   11d68:	f001 f896 	bl	12e98 <__cyg_profile_func_exit>
   11d6c:	4623      	mov	r3, r4
    };
   11d6e:	4618      	mov	r0, r3
   11d70:	b003      	add	sp, #12
   11d72:	bd30      	pop	{r4, r5, pc}
   11d74:	00011d31 	.word	0x00011d31
   11d78:	10000048 	.word	0x10000048

00011d7c <Uart::Send(unsigned char)>:
  void Send(uint8_t data) override
   11d7c:	e92d 4830 	stmdb	sp!, {r4, r5, fp, lr}
   11d80:	b08a      	sub	sp, #40	; 0x28
   11d82:	4675      	mov	r5, lr
   11d84:	9001      	str	r0, [sp, #4]
   11d86:	460b      	mov	r3, r1
   11d88:	f88d 3003 	strb.w	r3, [sp, #3]
   11d8c:	462b      	mov	r3, r5
   11d8e:	4619      	mov	r1, r3
   11d90:	4831      	ldr	r0, [pc, #196]	; (11e58 <Uart::Send(unsigned char)+0xdc>)
   11d92:	f001 f86d 	bl	12e70 <__cyg_profile_func_enter>
    uart[channel_]->THR              = data;
   11d96:	9b01      	ldr	r3, [sp, #4]
   11d98:	7a1b      	ldrb	r3, [r3, #8]
   11d9a:	461a      	mov	r2, r3
   11d9c:	4b2f      	ldr	r3, [pc, #188]	; (11e5c <Uart::Send(unsigned char)+0xe0>)
   11d9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   11da2:	f89d 2003 	ldrb.w	r2, [sp, #3]
   11da6:	701a      	strb	r2, [r3, #0]
    };
   11da8:	9b01      	ldr	r3, [sp, #4]
   11daa:	9304      	str	r3, [sp, #16]
   11dac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   11db0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   11db4:	e9cd 3408 	strd	r3, r4, [sp, #32]
   11db8:	9b04      	ldr	r3, [sp, #16]
   11dba:	9303      	str	r3, [sp, #12]
   11dbc:	462b      	mov	r3, r5
   11dbe:	4619      	mov	r1, r3
   11dc0:	4827      	ldr	r0, [pc, #156]	; (11e60 <Uart::Send(unsigned char)+0xe4>)
   11dc2:	f001 f855 	bl	12e70 <__cyg_profile_func_enter>
  uint64_t timeout_time = 0;
   11dc6:	f04f 0300 	mov.w	r3, #0
   11dca:	f04f 0400 	mov.w	r4, #0
   11dce:	e9cd 3406 	strd	r3, r4, [sp, #24]
  if (timeout == kMaxWait)
   11dd2:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   11dd6:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
   11dda:	bf08      	it	eq
   11ddc:	f1b3 3fff 	cmpeq.w	r3, #4294967295	; 0xffffffff
   11de0:	d106      	bne.n	11df0 <Uart::Send(unsigned char)+0x74>
    timeout_time = kMaxWait;
   11de2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   11de6:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   11dea:	e9cd 3406 	strd	r3, r4, [sp, #24]
   11dee:	e00b      	b.n	11e08 <Uart::Send(unsigned char)+0x8c>
    timeout_time = Milliseconds() + timeout;
   11df0:	f7fe fbac 	bl	1054c <Milliseconds()>
   11df4:	460a      	mov	r2, r1
   11df6:	4601      	mov	r1, r0
   11df8:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   11dfc:	eb13 0b01 	adds.w	fp, r3, r1
   11e00:	eb44 0c02 	adc.w	ip, r4, r2
   11e04:	e9cd bc06 	strd	fp, ip, [sp, #24]
  Status status = Status::kTimedOut;
   11e08:	2301      	movs	r3, #1
   11e0a:	9305      	str	r3, [sp, #20]
  while (Milliseconds() < timeout_time)
   11e0c:	f7fe fb9e 	bl	1054c <Milliseconds()>
   11e10:	460a      	mov	r2, r1
   11e12:	4601      	mov	r1, r0
   11e14:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
   11e18:	42a2      	cmp	r2, r4
   11e1a:	bf08      	it	eq
   11e1c:	4299      	cmpeq	r1, r3
   11e1e:	bf34      	ite	cc
   11e20:	2301      	movcc	r3, #1
   11e22:	2300      	movcs	r3, #0
   11e24:	b2db      	uxtb	r3, r3
   11e26:	2b00      	cmp	r3, #0
   11e28:	d008      	beq.n	11e3c <Uart::Send(unsigned char)+0xc0>
    if (is_done())
   11e2a:	ab03      	add	r3, sp, #12
   11e2c:	4618      	mov	r0, r3
   11e2e:	f7ff ff7f 	bl	11d30 <Uart::Send(unsigned char)::{lambda()#1}::operator()() const>
   11e32:	4603      	mov	r3, r0
   11e34:	2b00      	cmp	r3, #0
   11e36:	d0e9      	beq.n	11e0c <Uart::Send(unsigned char)+0x90>
      status = Status::kSuccess;
   11e38:	2300      	movs	r3, #0
   11e3a:	9305      	str	r3, [sp, #20]
   11e3c:	462b      	mov	r3, r5
   11e3e:	4619      	mov	r1, r3
   11e40:	4807      	ldr	r0, [pc, #28]	; (11e60 <Uart::Send(unsigned char)+0xe4>)
   11e42:	f001 f829 	bl	12e98 <__cyg_profile_func_exit>
   11e46:	462b      	mov	r3, r5
   11e48:	4619      	mov	r1, r3
   11e4a:	4803      	ldr	r0, [pc, #12]	; (11e58 <Uart::Send(unsigned char)+0xdc>)
   11e4c:	f001 f824 	bl	12e98 <__cyg_profile_func_exit>
    Wait(kMaxWait, wait_for_transfer_to_finish);
  }
   11e50:	bf00      	nop
   11e52:	b00a      	add	sp, #40	; 0x28
   11e54:	e8bd 8830 	ldmia.w	sp!, {r4, r5, fp, pc}
   11e58:	00011d7d 	.word	0x00011d7d
   11e5c:	10000048 	.word	0x10000048
   11e60:	00012679 	.word	0x00012679

00011e64 <Uart::Receive(unsigned long)::{lambda()#1}::operator()() const>:

  uint8_t Receive([[maybe_unused]] uint32_t timeout = 0x7FFFFFFF) override
  {
    uint8_t receiver   = '\xFF';
    auto byte_recieved = [this]() -> bool {
   11e64:	b530      	push	{r4, r5, lr}
   11e66:	b083      	sub	sp, #12
   11e68:	4675      	mov	r5, lr
   11e6a:	9001      	str	r0, [sp, #4]
   11e6c:	462b      	mov	r3, r5
   11e6e:	4619      	mov	r1, r3
   11e70:	480d      	ldr	r0, [pc, #52]	; (11ea8 <Uart::Receive(unsigned long)::{lambda()#1}::operator()() const+0x44>)
   11e72:	f000 fffd 	bl	12e70 <__cyg_profile_func_enter>
   11e76:	9b01      	ldr	r3, [sp, #4]
   11e78:	681b      	ldr	r3, [r3, #0]
      return (uart[channel_]->LSR & (1 << 0));
   11e7a:	7a1b      	ldrb	r3, [r3, #8]
   11e7c:	461a      	mov	r2, r3
   11e7e:	4b0b      	ldr	r3, [pc, #44]	; (11eac <Uart::Receive(unsigned long)::{lambda()#1}::operator()() const+0x48>)
   11e80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   11e84:	7d1b      	ldrb	r3, [r3, #20]
   11e86:	b2db      	uxtb	r3, r3
   11e88:	f003 0301 	and.w	r3, r3, #1
   11e8c:	2b00      	cmp	r3, #0
   11e8e:	bf14      	ite	ne
   11e90:	2301      	movne	r3, #1
   11e92:	2300      	moveq	r3, #0
   11e94:	b2dc      	uxtb	r4, r3
   11e96:	462b      	mov	r3, r5
   11e98:	4619      	mov	r1, r3
   11e9a:	4803      	ldr	r0, [pc, #12]	; (11ea8 <Uart::Receive(unsigned long)::{lambda()#1}::operator()() const+0x44>)
   11e9c:	f000 fffc 	bl	12e98 <__cyg_profile_func_exit>
   11ea0:	4623      	mov	r3, r4
    };
   11ea2:	4618      	mov	r0, r3
   11ea4:	b003      	add	sp, #12
   11ea6:	bd30      	pop	{r4, r5, pc}
   11ea8:	00011e65 	.word	0x00011e65
   11eac:	10000048 	.word	0x10000048

00011eb0 <Uart::Receive(unsigned long)>:
  uint8_t Receive([[maybe_unused]] uint32_t timeout = 0x7FFFFFFF) override
   11eb0:	e92d 4830 	stmdb	sp!, {r4, r5, fp, lr}
   11eb4:	b08c      	sub	sp, #48	; 0x30
   11eb6:	4675      	mov	r5, lr
   11eb8:	9001      	str	r0, [sp, #4]
   11eba:	9100      	str	r1, [sp, #0]
   11ebc:	462b      	mov	r3, r5
   11ebe:	4619      	mov	r1, r3
   11ec0:	4836      	ldr	r0, [pc, #216]	; (11f9c <Uart::Receive(unsigned long)+0xec>)
   11ec2:	f000 ffd5 	bl	12e70 <__cyg_profile_func_enter>
    uint8_t receiver   = '\xFF';
   11ec6:	23ff      	movs	r3, #255	; 0xff
   11ec8:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
    };
   11ecc:	9b01      	ldr	r3, [sp, #4]
   11ece:	9304      	str	r3, [sp, #16]

    Status status = Wait(timeout, byte_recieved);
   11ed0:	9b00      	ldr	r3, [sp, #0]
   11ed2:	f04f 0400 	mov.w	r4, #0
   11ed6:	e9cd 3408 	strd	r3, r4, [sp, #32]
   11eda:	9b04      	ldr	r3, [sp, #16]
   11edc:	9303      	str	r3, [sp, #12]
   11ede:	462b      	mov	r3, r5
   11ee0:	4619      	mov	r1, r3
   11ee2:	482f      	ldr	r0, [pc, #188]	; (11fa0 <Uart::Receive(unsigned long)+0xf0>)
   11ee4:	f000 ffc4 	bl	12e70 <__cyg_profile_func_enter>
  uint64_t timeout_time = 0;
   11ee8:	f04f 0300 	mov.w	r3, #0
   11eec:	f04f 0400 	mov.w	r4, #0
   11ef0:	e9cd 3406 	strd	r3, r4, [sp, #24]
  if (timeout == kMaxWait)
   11ef4:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   11ef8:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
   11efc:	bf08      	it	eq
   11efe:	f1b3 3fff 	cmpeq.w	r3, #4294967295	; 0xffffffff
   11f02:	d106      	bne.n	11f12 <Uart::Receive(unsigned long)+0x62>
    timeout_time = kMaxWait;
   11f04:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   11f08:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   11f0c:	e9cd 3406 	strd	r3, r4, [sp, #24]
   11f10:	e00b      	b.n	11f2a <Uart::Receive(unsigned long)+0x7a>
    timeout_time = Milliseconds() + timeout;
   11f12:	f7fe fb1b 	bl	1054c <Milliseconds()>
   11f16:	460a      	mov	r2, r1
   11f18:	4601      	mov	r1, r0
   11f1a:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   11f1e:	eb13 0b01 	adds.w	fp, r3, r1
   11f22:	eb44 0c02 	adc.w	ip, r4, r2
   11f26:	e9cd bc06 	strd	fp, ip, [sp, #24]
  Status status = Status::kTimedOut;
   11f2a:	2301      	movs	r3, #1
   11f2c:	9305      	str	r3, [sp, #20]
  while (Milliseconds() < timeout_time)
   11f2e:	f7fe fb0d 	bl	1054c <Milliseconds()>
   11f32:	460a      	mov	r2, r1
   11f34:	4601      	mov	r1, r0
   11f36:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
   11f3a:	42a2      	cmp	r2, r4
   11f3c:	bf08      	it	eq
   11f3e:	4299      	cmpeq	r1, r3
   11f40:	bf34      	ite	cc
   11f42:	2301      	movcc	r3, #1
   11f44:	2300      	movcs	r3, #0
   11f46:	b2db      	uxtb	r3, r3
   11f48:	2b00      	cmp	r3, #0
   11f4a:	d008      	beq.n	11f5e <Uart::Receive(unsigned long)+0xae>
    if (is_done())
   11f4c:	ab03      	add	r3, sp, #12
   11f4e:	4618      	mov	r0, r3
   11f50:	f7ff ff88 	bl	11e64 <Uart::Receive(unsigned long)::{lambda()#1}::operator()() const>
   11f54:	4603      	mov	r3, r0
   11f56:	2b00      	cmp	r3, #0
   11f58:	d0e9      	beq.n	11f2e <Uart::Receive(unsigned long)+0x7e>
      status = Status::kSuccess;
   11f5a:	2300      	movs	r3, #0
   11f5c:	9305      	str	r3, [sp, #20]
  return status;
   11f5e:	9c05      	ldr	r4, [sp, #20]
   11f60:	462b      	mov	r3, r5
   11f62:	4619      	mov	r1, r3
   11f64:	480e      	ldr	r0, [pc, #56]	; (11fa0 <Uart::Receive(unsigned long)+0xf0>)
   11f66:	f000 ff97 	bl	12e98 <__cyg_profile_func_exit>
   11f6a:	940a      	str	r4, [sp, #40]	; 0x28

    if (status == Status::kSuccess)
   11f6c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   11f6e:	2b00      	cmp	r3, #0
   11f70:	d108      	bne.n	11f84 <Uart::Receive(unsigned long)+0xd4>
    {
      receiver = static_cast<uint8_t>(uart[channel_]->RBR);
   11f72:	9b01      	ldr	r3, [sp, #4]
   11f74:	7a1b      	ldrb	r3, [r3, #8]
   11f76:	461a      	mov	r2, r3
   11f78:	4b0a      	ldr	r3, [pc, #40]	; (11fa4 <Uart::Receive(unsigned long)+0xf4>)
   11f7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   11f7e:	781b      	ldrb	r3, [r3, #0]
   11f80:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
    }
    return receiver;
   11f84:	f89d 402f 	ldrb.w	r4, [sp, #47]	; 0x2f
   11f88:	462b      	mov	r3, r5
   11f8a:	4619      	mov	r1, r3
   11f8c:	4803      	ldr	r0, [pc, #12]	; (11f9c <Uart::Receive(unsigned long)+0xec>)
   11f8e:	f000 ff83 	bl	12e98 <__cyg_profile_func_exit>
   11f92:	4623      	mov	r3, r4
  }
   11f94:	4618      	mov	r0, r3
   11f96:	b00c      	add	sp, #48	; 0x30
   11f98:	e8bd 8830 	ldmia.w	sp!, {r4, r5, fp, pc}
   11f9c:	00011eb1 	.word	0x00011eb1
   11fa0:	00012721 	.word	0x00012721
   11fa4:	10000048 	.word	0x10000048

00011fa8 <Uart::FindClosestFractional(float)>:

 private:
  UartCalibration_t FindClosestFractional(float decimal)
   11fa8:	b510      	push	{r4, lr}
   11faa:	b08a      	sub	sp, #40	; 0x28
   11fac:	4674      	mov	r4, lr
   11fae:	9003      	str	r0, [sp, #12]
   11fb0:	9102      	str	r1, [sp, #8]
   11fb2:	ed8d 0a01 	vstr	s0, [sp, #4]
   11fb6:	4623      	mov	r3, r4
   11fb8:	4619      	mov	r1, r3
   11fba:	4838      	ldr	r0, [pc, #224]	; (1209c <Uart::FindClosestFractional(float)+0xf4>)
   11fbc:	f000 ff58 	bl	12e70 <__cyg_profile_func_enter>
  {
    UartCalibration_t result;
   11fc0:	9b03      	ldr	r3, [sp, #12]
   11fc2:	2200      	movs	r2, #0
   11fc4:	601a      	str	r2, [r3, #0]
   11fc6:	9b03      	ldr	r3, [sp, #12]
   11fc8:	2200      	movs	r2, #0
   11fca:	605a      	str	r2, [r3, #4]
   11fcc:	9b03      	ldr	r3, [sp, #12]
   11fce:	2201      	movs	r2, #1
   11fd0:	609a      	str	r2, [r3, #8]
    bool finished = false;
   11fd2:	2300      	movs	r3, #0
   11fd4:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    for (int div = 0; div < 15 && !finished; div++)
   11fd8:	2300      	movs	r3, #0
   11fda:	9308      	str	r3, [sp, #32]
   11fdc:	9b08      	ldr	r3, [sp, #32]
   11fde:	2b0e      	cmp	r3, #14
   11fe0:	dc52      	bgt.n	12088 <Uart::FindClosestFractional(float)+0xe0>
   11fe2:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   11fe6:	2b00      	cmp	r3, #0
   11fe8:	d14e      	bne.n	12088 <Uart::FindClosestFractional(float)+0xe0>
    {
      for (int mul = div + 1; mul < 15 && !finished; mul++)
   11fea:	9b08      	ldr	r3, [sp, #32]
   11fec:	3301      	adds	r3, #1
   11fee:	9307      	str	r3, [sp, #28]
   11ff0:	9b07      	ldr	r3, [sp, #28]
   11ff2:	2b0e      	cmp	r3, #14
   11ff4:	dc44      	bgt.n	12080 <Uart::FindClosestFractional(float)+0xd8>
   11ff6:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   11ffa:	2b00      	cmp	r3, #0
   11ffc:	d140      	bne.n	12080 <Uart::FindClosestFractional(float)+0xd8>
      {
        float divf         = static_cast<float>(div);
   11ffe:	9b08      	ldr	r3, [sp, #32]
   12000:	ee07 3a90 	vmov	s15, r3
   12004:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   12008:	edcd 7a06 	vstr	s15, [sp, #24]
        float mulf         = static_cast<float>(mul);
   1200c:	9b07      	ldr	r3, [sp, #28]
   1200e:	ee07 3a90 	vmov	s15, r3
   12012:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   12016:	edcd 7a05 	vstr	s15, [sp, #20]
        float test_decimal = 1.0f + divf / mulf;
   1201a:	eddd 6a06 	vldr	s13, [sp, #24]
   1201e:	ed9d 7a05 	vldr	s14, [sp, #20]
   12022:	eec6 7a87 	vdiv.f32	s15, s13, s14
   12026:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
   1202a:	ee77 7a87 	vadd.f32	s15, s15, s14
   1202e:	edcd 7a04 	vstr	s15, [sp, #16]
        if (decimal <= test_decimal + kThreshold &&
   12032:	eddd 7a04 	vldr	s15, [sp, #16]
   12036:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 120a0 <Uart::FindClosestFractional(float)+0xf8>
   1203a:	ee77 7a87 	vadd.f32	s15, s15, s14
   1203e:	ed9d 7a01 	vldr	s14, [sp, #4]
   12042:	eeb4 7ae7 	vcmpe.f32	s14, s15
   12046:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1204a:	d815      	bhi.n	12078 <Uart::FindClosestFractional(float)+0xd0>
            decimal >= test_decimal - kThreshold)
   1204c:	eddd 7a04 	vldr	s15, [sp, #16]
   12050:	ed9f 7a13 	vldr	s14, [pc, #76]	; 120a0 <Uart::FindClosestFractional(float)+0xf8>
   12054:	ee77 7ac7 	vsub.f32	s15, s15, s14
        if (decimal <= test_decimal + kThreshold &&
   12058:	ed9d 7a01 	vldr	s14, [sp, #4]
   1205c:	eeb4 7ae7 	vcmpe.f32	s14, s15
   12060:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   12064:	db08      	blt.n	12078 <Uart::FindClosestFractional(float)+0xd0>
        {
          result.divide_add = div;
   12066:	9a08      	ldr	r2, [sp, #32]
   12068:	9b03      	ldr	r3, [sp, #12]
   1206a:	605a      	str	r2, [r3, #4]
          result.multiply   = mul;
   1206c:	9a07      	ldr	r2, [sp, #28]
   1206e:	9b03      	ldr	r3, [sp, #12]
   12070:	609a      	str	r2, [r3, #8]
          finished          = true;
   12072:	2301      	movs	r3, #1
   12074:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
      for (int mul = div + 1; mul < 15 && !finished; mul++)
   12078:	9b07      	ldr	r3, [sp, #28]
   1207a:	3301      	adds	r3, #1
   1207c:	9307      	str	r3, [sp, #28]
   1207e:	e7b7      	b.n	11ff0 <Uart::FindClosestFractional(float)+0x48>
    for (int div = 0; div < 15 && !finished; div++)
   12080:	9b08      	ldr	r3, [sp, #32]
   12082:	3301      	adds	r3, #1
   12084:	9308      	str	r3, [sp, #32]
   12086:	e7a9      	b.n	11fdc <Uart::FindClosestFractional(float)+0x34>
        }
      }
    }
    return result;
   12088:	bf00      	nop
   1208a:	4623      	mov	r3, r4
   1208c:	4619      	mov	r1, r3
   1208e:	4803      	ldr	r0, [pc, #12]	; (1209c <Uart::FindClosestFractional(float)+0xf4>)
   12090:	f000 ff02 	bl	12e98 <__cyg_profile_func_exit>
   12094:	bf00      	nop
  }
   12096:	9803      	ldr	r0, [sp, #12]
   12098:	b00a      	add	sp, #40	; 0x28
   1209a:	bd10      	pop	{r4, pc}
   1209c:	00011fa9 	.word	0x00011fa9
   120a0:	3d4ccccd 	.word	0x3d4ccccd

000120a4 <Uart::DividerEstimate(float, float)>:

  float DividerEstimate(float baud_rate, float fraction_estimate = 1)
   120a4:	b510      	push	{r4, lr}
   120a6:	ed2d 8b02 	vpush	{d8}
   120aa:	b086      	sub	sp, #24
   120ac:	4674      	mov	r4, lr
   120ae:	9003      	str	r0, [sp, #12]
   120b0:	ed8d 0a02 	vstr	s0, [sp, #8]
   120b4:	edcd 0a01 	vstr	s1, [sp, #4]
   120b8:	4623      	mov	r3, r4
   120ba:	4619      	mov	r1, r3
   120bc:	4815      	ldr	r0, [pc, #84]	; (12114 <Uart::DividerEstimate(float, float)+0x70>)
   120be:	f000 fed7 	bl	12e70 <__cyg_profile_func_enter>
  {
    float clock_frequency = static_cast<float>(GetPeripheralFrequency());
   120c2:	9b03      	ldr	r3, [sp, #12]
   120c4:	1d1a      	adds	r2, r3, #4
   120c6:	9b03      	ldr	r3, [sp, #12]
   120c8:	685b      	ldr	r3, [r3, #4]
   120ca:	3310      	adds	r3, #16
   120cc:	681b      	ldr	r3, [r3, #0]
   120ce:	4610      	mov	r0, r2
   120d0:	4798      	blx	r3
   120d2:	ee07 0a90 	vmov	s15, r0
   120d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
   120da:	edcd 7a05 	vstr	s15, [sp, #20]
    return clock_frequency / (16.0f * baud_rate * fraction_estimate);
   120de:	eddd 7a02 	vldr	s15, [sp, #8]
   120e2:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
   120e6:	ee27 7a87 	vmul.f32	s14, s15, s14
   120ea:	eddd 7a01 	vldr	s15, [sp, #4]
   120ee:	ee67 7a27 	vmul.f32	s15, s14, s15
   120f2:	ed9d 7a05 	vldr	s14, [sp, #20]
   120f6:	ee87 8a27 	vdiv.f32	s16, s14, s15
   120fa:	4623      	mov	r3, r4
   120fc:	4619      	mov	r1, r3
   120fe:	4805      	ldr	r0, [pc, #20]	; (12114 <Uart::DividerEstimate(float, float)+0x70>)
   12100:	f000 feca 	bl	12e98 <__cyg_profile_func_exit>
   12104:	eef0 7a48 	vmov.f32	s15, s16
  }
   12108:	eeb0 0a67 	vmov.f32	s0, s15
   1210c:	b006      	add	sp, #24
   1210e:	ecbd 8b02 	vpop	{d8}
   12112:	bd10      	pop	{r4, pc}
   12114:	000120a5 	.word	0x000120a5

00012118 <Uart::FractionalEstimate(float, float)>:

  float FractionalEstimate(float baud_rate, float divider)
   12118:	b510      	push	{r4, lr}
   1211a:	ed2d 8b02 	vpush	{d8}
   1211e:	b086      	sub	sp, #24
   12120:	4674      	mov	r4, lr
   12122:	9003      	str	r0, [sp, #12]
   12124:	ed8d 0a02 	vstr	s0, [sp, #8]
   12128:	edcd 0a01 	vstr	s1, [sp, #4]
   1212c:	4623      	mov	r3, r4
   1212e:	4619      	mov	r1, r3
   12130:	4815      	ldr	r0, [pc, #84]	; (12188 <Uart::FractionalEstimate(float, float)+0x70>)
   12132:	f000 fe9d 	bl	12e70 <__cyg_profile_func_enter>
  {
    float clock_frequency = static_cast<float>(GetPeripheralFrequency());
   12136:	9b03      	ldr	r3, [sp, #12]
   12138:	1d1a      	adds	r2, r3, #4
   1213a:	9b03      	ldr	r3, [sp, #12]
   1213c:	685b      	ldr	r3, [r3, #4]
   1213e:	3310      	adds	r3, #16
   12140:	681b      	ldr	r3, [r3, #0]
   12142:	4610      	mov	r0, r2
   12144:	4798      	blx	r3
   12146:	ee07 0a90 	vmov	s15, r0
   1214a:	eef8 7a67 	vcvt.f32.u32	s15, s15
   1214e:	edcd 7a05 	vstr	s15, [sp, #20]
    return clock_frequency / (16.0f * baud_rate * divider);
   12152:	eddd 7a02 	vldr	s15, [sp, #8]
   12156:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
   1215a:	ee27 7a87 	vmul.f32	s14, s15, s14
   1215e:	eddd 7a01 	vldr	s15, [sp, #4]
   12162:	ee67 7a27 	vmul.f32	s15, s14, s15
   12166:	ed9d 7a05 	vldr	s14, [sp, #20]
   1216a:	ee87 8a27 	vdiv.f32	s16, s14, s15
   1216e:	4623      	mov	r3, r4
   12170:	4619      	mov	r1, r3
   12172:	4805      	ldr	r0, [pc, #20]	; (12188 <Uart::FractionalEstimate(float, float)+0x70>)
   12174:	f000 fe90 	bl	12e98 <__cyg_profile_func_exit>
   12178:	eef0 7a48 	vmov.f32	s15, s16
  }
   1217c:	eeb0 0a67 	vmov.f32	s0, s15
   12180:	b006      	add	sp, #24
   12182:	ecbd 8b02 	vpop	{d8}
   12186:	bd10      	pop	{r4, pc}
   12188:	00012119 	.word	0x00012119

0001218c <Uart::IsDecmial(float)>:

  bool IsDecmial(float value)
   1218c:	b530      	push	{r4, r5, lr}
   1218e:	b087      	sub	sp, #28
   12190:	4675      	mov	r5, lr
   12192:	9001      	str	r0, [sp, #4]
   12194:	ed8d 0a00 	vstr	s0, [sp]
   12198:	462b      	mov	r3, r5
   1219a:	4619      	mov	r1, r3
   1219c:	4819      	ldr	r0, [pc, #100]	; (12204 <Uart::IsDecmial(float)+0x78>)
   1219e:	f000 fe67 	bl	12e70 <__cyg_profile_func_enter>
  {
    bool result         = false;
   121a2:	2300      	movs	r3, #0
   121a4:	f88d 3017 	strb.w	r3, [sp, #23]
    float rounded_value = roundf(value);
   121a8:	ed9d 0a00 	vldr	s0, [sp]
   121ac:	f004 fd0a 	bl	16bc4 <roundf>
   121b0:	ed8d 0a04 	vstr	s0, [sp, #16]
    float error         = value - rounded_value;
   121b4:	ed9d 7a00 	vldr	s14, [sp]
   121b8:	eddd 7a04 	vldr	s15, [sp, #16]
   121bc:	ee77 7a67 	vsub.f32	s15, s14, s15
   121c0:	edcd 7a03 	vstr	s15, [sp, #12]
    if (-kThreshold <= error && error <= kThreshold)
   121c4:	eddd 7a03 	vldr	s15, [sp, #12]
   121c8:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 12208 <Uart::IsDecmial(float)+0x7c>
   121cc:	eef4 7ac7 	vcmpe.f32	s15, s14
   121d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   121d4:	db0b      	blt.n	121ee <Uart::IsDecmial(float)+0x62>
   121d6:	eddd 7a03 	vldr	s15, [sp, #12]
   121da:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 1220c <Uart::IsDecmial(float)+0x80>
   121de:	eef4 7ac7 	vcmpe.f32	s15, s14
   121e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   121e6:	d802      	bhi.n	121ee <Uart::IsDecmial(float)+0x62>
    {
      result = true;
   121e8:	2301      	movs	r3, #1
   121ea:	f88d 3017 	strb.w	r3, [sp, #23]
    }
    return result;
   121ee:	f89d 4017 	ldrb.w	r4, [sp, #23]
   121f2:	462b      	mov	r3, r5
   121f4:	4619      	mov	r1, r3
   121f6:	4803      	ldr	r0, [pc, #12]	; (12204 <Uart::IsDecmial(float)+0x78>)
   121f8:	f000 fe4e 	bl	12e98 <__cyg_profile_func_exit>
   121fc:	4623      	mov	r3, r4
  }
   121fe:	4618      	mov	r0, r3
   12200:	b007      	add	sp, #28
   12202:	bd30      	pop	{r4, r5, pc}
   12204:	0001218d 	.word	0x0001218d
   12208:	bd4ccccd 	.word	0xbd4ccccd
   1220c:	3d4ccccd 	.word	0x3d4ccccd

00012210 <Uart::GenerateUartCalibration(float)>:

  UartCalibration_t GenerateUartCalibration(float baud_rate)
   12210:	b530      	push	{r4, r5, lr}
   12212:	b08f      	sub	sp, #60	; 0x3c
   12214:	4675      	mov	r5, lr
   12216:	9007      	str	r0, [sp, #28]
   12218:	9106      	str	r1, [sp, #24]
   1221a:	ed8d 0a05 	vstr	s0, [sp, #20]
   1221e:	462b      	mov	r3, r5
   12220:	4619      	mov	r1, r3
   12222:	4874      	ldr	r0, [pc, #464]	; (123f4 <Uart::GenerateUartCalibration(float)+0x1e4>)
   12224:	f000 fe24 	bl	12e70 <__cyg_profile_func_enter>
  {
    States state = States::kCalculateIntegerDivideLatch;
   12228:	2300      	movs	r3, #0
   1222a:	930d      	str	r3, [sp, #52]	; 0x34
    UartCalibration_t uart_calibration;
   1222c:	9b07      	ldr	r3, [sp, #28]
   1222e:	2200      	movs	r2, #0
   12230:	601a      	str	r2, [r3, #0]
   12232:	9b07      	ldr	r3, [sp, #28]
   12234:	2200      	movs	r2, #0
   12236:	605a      	str	r2, [r3, #4]
   12238:	9b07      	ldr	r3, [sp, #28]
   1223a:	2201      	movs	r2, #1
   1223c:	609a      	str	r2, [r3, #8]
    float divide_estimate = 0;
   1223e:	f04f 0300 	mov.w	r3, #0
   12242:	930c      	str	r3, [sp, #48]	; 0x30
    float decimal         = 1.5;
   12244:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
   12248:	930b      	str	r3, [sp, #44]	; 0x2c
    float div             = 1;
   1224a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
   1224e:	930a      	str	r3, [sp, #40]	; 0x28
    float mul             = 2;
   12250:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   12254:	9309      	str	r3, [sp, #36]	; 0x24
    while (state != States::kDone)
   12256:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   12258:	2b04      	cmp	r3, #4
   1225a:	f000 80c1 	beq.w	123e0 <Uart::GenerateUartCalibration(float)+0x1d0>
    {
      switch (state)
   1225e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   12260:	2b04      	cmp	r3, #4
   12262:	f200 80bb 	bhi.w	123dc <Uart::GenerateUartCalibration(float)+0x1cc>
   12266:	a201      	add	r2, pc, #4	; (adr r2, 1226c <Uart::GenerateUartCalibration(float)+0x5c>)
   12268:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1226c:	00012281 	.word	0x00012281
   12270:	000122dd 	.word	0x000122dd
   12274:	0001233d 	.word	0x0001233d
   12278:	000123ad 	.word	0x000123ad
   1227c:	000123dd 	.word	0x000123dd
      {
        case States::kCalculateIntegerDivideLatch:
        {
          divide_estimate = DividerEstimate(baud_rate);
   12280:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
   12284:	ed9d 0a05 	vldr	s0, [sp, #20]
   12288:	9806      	ldr	r0, [sp, #24]
   1228a:	f7ff ff0b 	bl	120a4 <Uart::DividerEstimate(float, float)>
   1228e:	ed8d 0a0c 	vstr	s0, [sp, #48]	; 0x30
          if (divide_estimate < 1.0f)
   12292:	eddd 7a0c 	vldr	s15, [sp, #48]	; 0x30
   12296:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
   1229a:	eef4 7ac7 	vcmpe.f32	s15, s14
   1229e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   122a2:	d505      	bpl.n	122b0 <Uart::GenerateUartCalibration(float)+0xa0>
          {
            uart_calibration.divide_latch = 0;
   122a4:	9b07      	ldr	r3, [sp, #28]
   122a6:	2200      	movs	r2, #0
   122a8:	601a      	str	r2, [r3, #0]
            state                         = States::kDone;
   122aa:	2304      	movs	r3, #4
   122ac:	930d      	str	r3, [sp, #52]	; 0x34
          }
          else
          {
            state = States::kCalculateDivideLatchWithDecimal;
          }
          break;
   122ae:	e096      	b.n	123de <Uart::GenerateUartCalibration(float)+0x1ce>
          else if (IsDecmial(divide_estimate))
   122b0:	ed9d 0a0c 	vldr	s0, [sp, #48]	; 0x30
   122b4:	9806      	ldr	r0, [sp, #24]
   122b6:	f7ff ff69 	bl	1218c <Uart::IsDecmial(float)>
   122ba:	4603      	mov	r3, r0
   122bc:	2b00      	cmp	r3, #0
   122be:	d00a      	beq.n	122d6 <Uart::GenerateUartCalibration(float)+0xc6>
                static_cast<uint32_t>(divide_estimate);
   122c0:	eddd 7a0c 	vldr	s15, [sp, #48]	; 0x30
   122c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
   122c8:	ee17 2a90 	vmov	r2, s15
            uart_calibration.divide_latch =
   122cc:	9b07      	ldr	r3, [sp, #28]
   122ce:	601a      	str	r2, [r3, #0]
            state = States::kDone;
   122d0:	2304      	movs	r3, #4
   122d2:	930d      	str	r3, [sp, #52]	; 0x34
          break;
   122d4:	e083      	b.n	123de <Uart::GenerateUartCalibration(float)+0x1ce>
            state = States::kCalculateDivideLatchWithDecimal;
   122d6:	2301      	movs	r3, #1
   122d8:	930d      	str	r3, [sp, #52]	; 0x34
          break;
   122da:	e080      	b.n	123de <Uart::GenerateUartCalibration(float)+0x1ce>
        }
        case States::kCalculateDivideLatchWithDecimal:
        {
          divide_estimate = roundf(DividerEstimate(baud_rate, decimal));
   122dc:	eddd 0a0b 	vldr	s1, [sp, #44]	; 0x2c
   122e0:	ed9d 0a05 	vldr	s0, [sp, #20]
   122e4:	9806      	ldr	r0, [sp, #24]
   122e6:	f7ff fedd 	bl	120a4 <Uart::DividerEstimate(float, float)>
   122ea:	eef0 7a40 	vmov.f32	s15, s0
   122ee:	eeb0 0a67 	vmov.f32	s0, s15
   122f2:	f004 fc67 	bl	16bc4 <roundf>
   122f6:	ed8d 0a0c 	vstr	s0, [sp, #48]	; 0x30
          decimal         = FractionalEstimate(baud_rate, divide_estimate);
   122fa:	eddd 0a0c 	vldr	s1, [sp, #48]	; 0x30
   122fe:	ed9d 0a05 	vldr	s0, [sp, #20]
   12302:	9806      	ldr	r0, [sp, #24]
   12304:	f7ff ff08 	bl	12118 <Uart::FractionalEstimate(float, float)>
   12308:	ed8d 0a0b 	vstr	s0, [sp, #44]	; 0x2c
          if (1.1f <= decimal && decimal <= 1.9f)
   1230c:	eddd 7a0b 	vldr	s15, [sp, #44]	; 0x2c
   12310:	ed9f 7a39 	vldr	s14, [pc, #228]	; 123f8 <Uart::GenerateUartCalibration(float)+0x1e8>
   12314:	eef4 7ac7 	vcmpe.f32	s15, s14
   12318:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1231c:	db0b      	blt.n	12336 <Uart::GenerateUartCalibration(float)+0x126>
   1231e:	eddd 7a0b 	vldr	s15, [sp, #44]	; 0x2c
   12322:	ed9f 7a36 	vldr	s14, [pc, #216]	; 123fc <Uart::GenerateUartCalibration(float)+0x1ec>
   12326:	eef4 7ac7 	vcmpe.f32	s15, s14
   1232a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1232e:	d802      	bhi.n	12336 <Uart::GenerateUartCalibration(float)+0x126>
          {
            state = States::kGenerateFractionFromDecimal;
   12330:	2303      	movs	r3, #3
   12332:	930d      	str	r3, [sp, #52]	; 0x34
          }
          else
          {
            state = States::kDecimalFailedGenerateNewDecimal;
          }
          break;
   12334:	e053      	b.n	123de <Uart::GenerateUartCalibration(float)+0x1ce>
            state = States::kDecimalFailedGenerateNewDecimal;
   12336:	2302      	movs	r3, #2
   12338:	930d      	str	r3, [sp, #52]	; 0x34
          break;
   1233a:	e050      	b.n	123de <Uart::GenerateUartCalibration(float)+0x1ce>
        }
        case States::kDecimalFailedGenerateNewDecimal:
        {
          mul += 1;
   1233c:	eddd 7a09 	vldr	s15, [sp, #36]	; 0x24
   12340:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
   12344:	ee77 7a87 	vadd.f32	s15, s15, s14
   12348:	edcd 7a09 	vstr	s15, [sp, #36]	; 0x24

          if (div > 15)
   1234c:	eddd 7a0a 	vldr	s15, [sp, #40]	; 0x28
   12350:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
   12354:	eef4 7ac7 	vcmpe.f32	s15, s14
   12358:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1235c:	dd02      	ble.n	12364 <Uart::GenerateUartCalibration(float)+0x154>
          {
            state = States::kDone;
   1235e:	2304      	movs	r3, #4
   12360:	930d      	str	r3, [sp, #52]	; 0x34
            break;
   12362:	e03c      	b.n	123de <Uart::GenerateUartCalibration(float)+0x1ce>
          }
          else if (mul > 15)
   12364:	eddd 7a09 	vldr	s15, [sp, #36]	; 0x24
   12368:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
   1236c:	eef4 7ac7 	vcmpe.f32	s15, s14
   12370:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   12374:	dd0f      	ble.n	12396 <Uart::GenerateUartCalibration(float)+0x186>
          {
            div += 1;
   12376:	eddd 7a0a 	vldr	s15, [sp, #40]	; 0x28
   1237a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
   1237e:	ee77 7a87 	vadd.f32	s15, s15, s14
   12382:	edcd 7a0a 	vstr	s15, [sp, #40]	; 0x28
            mul = div + 1;
   12386:	eddd 7a0a 	vldr	s15, [sp, #40]	; 0x28
   1238a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
   1238e:	ee77 7a87 	vadd.f32	s15, s15, s14
   12392:	edcd 7a09 	vstr	s15, [sp, #36]	; 0x24
          }
          decimal = div / mul;
   12396:	eddd 6a0a 	vldr	s13, [sp, #40]	; 0x28
   1239a:	ed9d 7a09 	vldr	s14, [sp, #36]	; 0x24
   1239e:	eec6 7a87 	vdiv.f32	s15, s13, s14
   123a2:	edcd 7a0b 	vstr	s15, [sp, #44]	; 0x2c
          state   = States::kCalculateDivideLatchWithDecimal;
   123a6:	2301      	movs	r3, #1
   123a8:	930d      	str	r3, [sp, #52]	; 0x34
          break;
   123aa:	e018      	b.n	123de <Uart::GenerateUartCalibration(float)+0x1ce>
        }
        case States::kGenerateFractionFromDecimal:
        {
          uart_calibration = FindClosestFractional(decimal);
   123ac:	9c07      	ldr	r4, [sp, #28]
   123ae:	466b      	mov	r3, sp
   123b0:	ed9d 0a0b 	vldr	s0, [sp, #44]	; 0x2c
   123b4:	9906      	ldr	r1, [sp, #24]
   123b6:	4618      	mov	r0, r3
   123b8:	f7ff fdf6 	bl	11fa8 <Uart::FindClosestFractional(float)>
   123bc:	466b      	mov	r3, sp
   123be:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   123c2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
          uart_calibration.divide_latch =
              static_cast<uint32_t>(divide_estimate);
   123c6:	eddd 7a0c 	vldr	s15, [sp, #48]	; 0x30
   123ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
   123ce:	ee17 2a90 	vmov	r2, s15
          uart_calibration.divide_latch =
   123d2:	9b07      	ldr	r3, [sp, #28]
   123d4:	601a      	str	r2, [r3, #0]
          state = States::kDone;
   123d6:	2304      	movs	r3, #4
   123d8:	930d      	str	r3, [sp, #52]	; 0x34
          break;
   123da:	e000      	b.n	123de <Uart::GenerateUartCalibration(float)+0x1ce>
        }
        case States::kDone: { break;
        }
        default: { break;
   123dc:	bf00      	nop
    while (state != States::kDone)
   123de:	e73a      	b.n	12256 <Uart::GenerateUartCalibration(float)+0x46>
        }
      }
    }
    return uart_calibration;
   123e0:	bf00      	nop
   123e2:	462b      	mov	r3, r5
   123e4:	4619      	mov	r1, r3
   123e6:	4803      	ldr	r0, [pc, #12]	; (123f4 <Uart::GenerateUartCalibration(float)+0x1e4>)
   123e8:	f000 fd56 	bl	12e98 <__cyg_profile_func_exit>
   123ec:	bf00      	nop
  }
   123ee:	9807      	ldr	r0, [sp, #28]
   123f0:	b00f      	add	sp, #60	; 0x3c
   123f2:	bd30      	pop	{r4, r5, pc}
   123f4:	00012211 	.word	0x00012211
   123f8:	3f8ccccd 	.word	0x3f8ccccd
   123fc:	3ff33333 	.word	0x3ff33333

00012400 <(anonymous namespace)::Lpc40xxUptime()>:
{
   12400:	b538      	push	{r3, r4, r5, lr}
   12402:	4675      	mov	r5, lr
   12404:	462b      	mov	r3, r5
   12406:	4619      	mov	r1, r3
   12408:	480a      	ldr	r0, [pc, #40]	; (12434 <(anonymous namespace)::Lpc40xxUptime()+0x34>)
   1240a:	f000 fd31 	bl	12e70 <__cyg_profile_func_enter>
    return tim_register[channel_]->TC;
   1240e:	4b0a      	ldr	r3, [pc, #40]	; (12438 <(anonymous namespace)::Lpc40xxUptime()+0x38>)
   12410:	7a1b      	ldrb	r3, [r3, #8]
   12412:	461a      	mov	r2, r3
   12414:	4b09      	ldr	r3, [pc, #36]	; (1243c <(anonymous namespace)::Lpc40xxUptime()+0x3c>)
   12416:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   1241a:	689c      	ldr	r4, [r3, #8]
   1241c:	462b      	mov	r3, r5
   1241e:	4619      	mov	r1, r3
   12420:	4804      	ldr	r0, [pc, #16]	; (12434 <(anonymous namespace)::Lpc40xxUptime()+0x34>)
   12422:	f000 fd39 	bl	12e98 <__cyg_profile_func_exit>
  return timer0.GetTimer();
   12426:	4623      	mov	r3, r4
   12428:	f04f 0400 	mov.w	r4, #0
}
   1242c:	4618      	mov	r0, r3
   1242e:	4621      	mov	r1, r4
   12430:	bd38      	pop	{r3, r4, r5, pc}
   12432:	bf00      	nop
   12434:	00011b45 	.word	0x00011b45
   12438:	100000b8 	.word	0x100000b8
   1243c:	10000038 	.word	0x10000038

00012440 <UptimeRTOS>:
{
   12440:	b538      	push	{r3, r4, r5, lr}
   12442:	4675      	mov	r5, lr
   12444:	462b      	mov	r3, r5
   12446:	4619      	mov	r1, r3
   12448:	480a      	ldr	r0, [pc, #40]	; (12474 <UptimeRTOS+0x34>)
   1244a:	f000 fd11 	bl	12e70 <__cyg_profile_func_enter>
   1244e:	4b0a      	ldr	r3, [pc, #40]	; (12478 <UptimeRTOS+0x38>)
   12450:	7a1b      	ldrb	r3, [r3, #8]
   12452:	461a      	mov	r2, r3
   12454:	4b09      	ldr	r3, [pc, #36]	; (1247c <UptimeRTOS+0x3c>)
   12456:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   1245a:	689c      	ldr	r4, [r3, #8]
   1245c:	462b      	mov	r3, r5
   1245e:	4619      	mov	r1, r3
   12460:	4804      	ldr	r0, [pc, #16]	; (12474 <UptimeRTOS+0x34>)
   12462:	f000 fd19 	bl	12e98 <__cyg_profile_func_exit>
  return timer0.GetTimer();
   12466:	4623      	mov	r3, r4
   12468:	f04f 0400 	mov.w	r4, #0
}
   1246c:	4618      	mov	r0, r3
   1246e:	4621      	mov	r1, r4
   12470:	bd38      	pop	{r3, r4, r5, pc}
   12472:	bf00      	nop
   12474:	00011b45 	.word	0x00011b45
   12478:	100000b8 	.word	0x100000b8
   1247c:	10000038 	.word	0x10000038

00012480 <LowLevelInit()>:

void LowLevelInit()
{
   12480:	b500      	push	{lr}
   12482:	b083      	sub	sp, #12
  // Set the SystemTick frequency to the RTOS tick frequency
  // It is critical that this happens before you set the system_clock, since
  // The system_timer keeps the time that the system_clock uses to delay itself.
  system_timer.SetTickFrequency(config::kRtosFrequency);
   12484:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   12488:	4822      	ldr	r0, [pc, #136]	; (12514 <LowLevelInit()+0x94>)
   1248a:	f7fe fecb 	bl	11224 <SystemTimer::SetTickFrequency(unsigned long)>
  bool timer_started_successfully = system_timer.StartTimer();
   1248e:	4821      	ldr	r0, [pc, #132]	; (12514 <LowLevelInit()+0x94>)
   12490:	f7fe fe7a 	bl	11188 <SystemTimer::StartTimer()>
   12494:	4603      	mov	r3, r0
   12496:	f88d 3007 	strb.w	r3, [sp, #7]
  SJ2_ASSERT_WARNING(timer_started_successfully,
   1249a:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1249e:	f083 0301 	eor.w	r3, r3, #1
   124a2:	b2db      	uxtb	r3, r3
   124a4:	2b00      	cmp	r3, #0
   124a6:	d005      	beq.n	124b4 <LowLevelInit()+0x34>
   124a8:	23ad      	movs	r3, #173	; 0xad
   124aa:	4a1b      	ldr	r2, [pc, #108]	; (12518 <LowLevelInit()+0x98>)
   124ac:	491b      	ldr	r1, [pc, #108]	; (1251c <LowLevelInit()+0x9c>)
   124ae:	481c      	ldr	r0, [pc, #112]	; (12520 <LowLevelInit()+0xa0>)
   124b0:	f001 ff38 	bl	14324 <printf>
                     "System Timer has FAILED to start!");
  // Set Clock Speed
  // SetClockFrequency will timeout return the offset between desire clockspeed
  // and actual clockspeed if the PLL doesn't get a frequency fix within a
  // defined timeout (see L1/system_clock.hpp:kDefaultTimeout)
  while (system_controller.SetClockFrequency(config::kSystemClockRateMhz) != 0)
   124b4:	2130      	movs	r1, #48	; 0x30
   124b6:	481b      	ldr	r0, [pc, #108]	; (12524 <LowLevelInit()+0xa4>)
   124b8:	f7fe fb4c 	bl	10b54 <Lpc40xxSystemController::SetClockFrequency(unsigned char)>
   124bc:	4603      	mov	r3, r0
   124be:	2b00      	cmp	r3, #0
   124c0:	bf14      	ite	ne
   124c2:	2301      	movne	r3, #1
   124c4:	2300      	moveq	r3, #0
   124c6:	b2db      	uxtb	r3, r3
   124c8:	2b00      	cmp	r3, #0
   124ca:	d001      	beq.n	124d0 <LowLevelInit()+0x50>
  {
    // Continually attempt to set the clock frequency to the desired until the
    // delta between desired and actual are 0.
    continue;
   124cc:	bf00      	nop
  while (system_controller.SetClockFrequency(config::kSystemClockRateMhz) != 0)
   124ce:	e7f1      	b.n	124b4 <LowLevelInit()+0x34>
  }
  // Enable Peripheral Clock and set its divider to 1 meaning the clock speed
  // fed to all peripherals will be 48Mhz.
  system_controller.SetPeripheralClockDivider(1);
   124d0:	2101      	movs	r1, #1
   124d2:	4814      	ldr	r0, [pc, #80]	; (12524 <LowLevelInit()+0xa4>)
   124d4:	f7fe fb86 	bl	10be4 <Lpc40xxSystemController::SetPeripheralClockDivider(unsigned char)>
  // Set System Timer frequency again, since the clock speed has changed since
  // the last time we ran this.
  system_timer.DisableTimer();
   124d8:	f7fe fe04 	bl	110e4 <SystemTimer::DisableTimer()>
  system_timer.SetTickFrequency(config::kRtosFrequency);
   124dc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   124e0:	480c      	ldr	r0, [pc, #48]	; (12514 <LowLevelInit()+0x94>)
   124e2:	f7fe fe9f 	bl	11224 <SystemTimer::SetTickFrequency(unsigned long)>
  system_timer.StartTimer();
   124e6:	480b      	ldr	r0, [pc, #44]	; (12514 <LowLevelInit()+0x94>)
   124e8:	f7fe fe4e 	bl	11188 <SystemTimer::StartTimer()>
  // Set timer0 to 1 MHz (1,000,000 Hz) so that the timer increments every 1
  // micro second.
  timer0.Initialize(1'000'000);
   124ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   124f0:	4a0d      	ldr	r2, [pc, #52]	; (12528 <LowLevelInit()+0xa8>)
   124f2:	490e      	ldr	r1, [pc, #56]	; (1252c <LowLevelInit()+0xac>)
   124f4:	480e      	ldr	r0, [pc, #56]	; (12530 <LowLevelInit()+0xb0>)
   124f6:	f7ff f9f7 	bl	118e8 <Timer::Initialize(unsigned long, void (*)(), long)>
  SetUptimeFunction(Lpc40xxUptime);
   124fa:	480e      	ldr	r0, [pc, #56]	; (12534 <LowLevelInit()+0xb4>)
   124fc:	f7fe fb12 	bl	10b24 <SetUptimeFunction(unsigned long long (*)())>
  // Set UART0 baudrate, which is required for printf and scanf to work properly
  uart0.Initialize(config::kBaudRate);
   12500:	f44f 4116 	mov.w	r1, #38400	; 0x9600
   12504:	480c      	ldr	r0, [pc, #48]	; (12538 <LowLevelInit()+0xb8>)
   12506:	f7ff fba1 	bl	11c4c <Uart::Initialize(unsigned long)>
}
   1250a:	bf00      	nop
   1250c:	b003      	add	sp, #12
   1250e:	f85d fb04 	ldr.w	pc, [sp], #4
   12512:	bf00      	nop
   12514:	100000ac 	.word	0x100000ac
   12518:	00017a60 	.word	0x00017a60
   1251c:	000177c8 	.word	0x000177c8
   12520:	000176a8 	.word	0x000176a8
   12524:	100000b4 	.word	0x100000b4
   12528:	000118c9 	.word	0x000118c9
   1252c:	000f4240 	.word	0x000f4240
   12530:	100000b8 	.word	0x100000b8
   12534:	00012401 	.word	0x00012401
   12538:	10000098 	.word	0x10000098

0001253c <SystemInit>:

void SystemInit()
{
   1253c:	b508      	push	{r3, lr}
  // Transfer data section values from flash to RAM
  InitDataSection();
   1253e:	f7fd fde5 	bl	1010c <InitDataSection()>
  // Clear BSS section of RAM
  // This is required because the nano implementation of the standard C/C++
  // libraries assumes that the BSS section is initialized to 0.
  InitBssSection();
   12542:	f7fd fe2b 	bl	1019c <InitBssSection()>
  // Enable FPU (F.loating P.oint U.nit)
  // System will crash if floating point operations occur without
  // Initializing the FPU.
  InitFpu();
   12546:	f7fd fe59 	bl	101fc <InitFpu()>
  // Initialisation C++ libraries
  __libc_init_array();
   1254a:	f004 fd43 	bl	16fd4 <__libc_init_array>
  // Run LowLevel System Initialization
  LowLevelInit();
   1254e:	f7ff ff97 	bl	12480 <LowLevelInit()>
}
   12552:	bf00      	nop
   12554:	bd08      	pop	{r3, pc}
   12556:	Address 0x0000000000012556 is out of bounds.


00012558 <ResetIsr>:
// Sets up a simple runtime environment and initializes the C/C++ library.

extern "C"
{
  void ResetIsr(void)
  {
   12558:	b580      	push	{r7, lr}
   1255a:	b084      	sub	sp, #16
   1255c:	af00      	add	r7, sp, #0
    // The Hyperload bootloader takes up stack space to execute. The Hyperload
    // bootloader function launches this ISR manually, but it never returns thus
    // it never cleans up the memory it uses. To get that memory back, we have
    // to manually move the stack pointers back to the top of stack.
    const uint32_t kTopOfStack = reinterpret_cast<intptr_t>(&StackTop);
   1255e:	4b09      	ldr	r3, [pc, #36]	; (12584 <ResetIsr+0x2c>)
   12560:	60fb      	str	r3, [r7, #12]
   12562:	68fb      	ldr	r3, [r7, #12]
   12564:	603b      	str	r3, [r7, #0]
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
   12566:	683b      	ldr	r3, [r7, #0]
   12568:	f383 8809 	msr	PSP, r3
   1256c:	68fb      	ldr	r3, [r7, #12]
   1256e:	607b      	str	r3, [r7, #4]

    \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0\n" : : "r" (topOfMainStack) : "sp");
   12570:	687b      	ldr	r3, [r7, #4]
   12572:	f383 8808 	msr	MSP, r3
    __set_PSP(kTopOfStack);
    __set_MSP(kTopOfStack);

    SystemInit();
   12576:	f7ff ffe1 	bl	1253c <SystemInit>
// #pragma ignored "-Wpedantic" to suppress main function call warning
#pragma GCC diagnostic push ignored "-Wpedantic"
    [[maybe_unused]] int32_t result = main();
   1257a:	f7fe f9bd 	bl	108f8 <main>
   1257e:	60b8      	str	r0, [r7, #8]
   12580:	e7fe      	b.n	12580 <ResetIsr+0x28>
   12582:	bf00      	nop
   12584:	10010000 	.word	0x10010000

00012588 <void Timer::TimerHandler<(TimerInterface::TimerPort)0>()>:
  static void TimerHandler()
   12588:	b510      	push	{r4, lr}
   1258a:	4674      	mov	r4, lr
   1258c:	4623      	mov	r3, r4
   1258e:	4619      	mov	r1, r3
   12590:	480a      	ldr	r0, [pc, #40]	; (125bc <void Timer::TimerHandler<(TimerInterface::TimerPort)0>()+0x34>)
   12592:	f000 fc6d 	bl	12e70 <__cyg_profile_func_enter>
      user_timer_isr[util::Value(port)]();
   12596:	2000      	movs	r0, #0
   12598:	f7ff f97e 	bl	11898 <unsigned char util::Value<TimerInterface::TimerPort, unsigned char>(TimerInterface::TimerPort)>
   1259c:	4603      	mov	r3, r0
   1259e:	461a      	mov	r2, r3
   125a0:	4b07      	ldr	r3, [pc, #28]	; (125c0 <void Timer::TimerHandler<(TimerInterface::TimerPort)0>()+0x38>)
   125a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   125a6:	4798      	blx	r3
    ClearInterrupts<port>();
   125a8:	f000 f90e 	bl	127c8 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)0>()>
   125ac:	4623      	mov	r3, r4
   125ae:	4619      	mov	r1, r3
   125b0:	4802      	ldr	r0, [pc, #8]	; (125bc <void Timer::TimerHandler<(TimerInterface::TimerPort)0>()+0x34>)
   125b2:	f000 fc71 	bl	12e98 <__cyg_profile_func_exit>
  }
   125b6:	bf00      	nop
   125b8:	bd10      	pop	{r4, pc}
   125ba:	bf00      	nop
   125bc:	00012589 	.word	0x00012589
   125c0:	100003ac 	.word	0x100003ac

000125c4 <void Timer::TimerHandler<(TimerInterface::TimerPort)1>()>:
  static void TimerHandler()
   125c4:	b510      	push	{r4, lr}
   125c6:	4674      	mov	r4, lr
   125c8:	4623      	mov	r3, r4
   125ca:	4619      	mov	r1, r3
   125cc:	480a      	ldr	r0, [pc, #40]	; (125f8 <void Timer::TimerHandler<(TimerInterface::TimerPort)1>()+0x34>)
   125ce:	f000 fc4f 	bl	12e70 <__cyg_profile_func_enter>
      user_timer_isr[util::Value(port)]();
   125d2:	2001      	movs	r0, #1
   125d4:	f7ff f960 	bl	11898 <unsigned char util::Value<TimerInterface::TimerPort, unsigned char>(TimerInterface::TimerPort)>
   125d8:	4603      	mov	r3, r0
   125da:	461a      	mov	r2, r3
   125dc:	4b07      	ldr	r3, [pc, #28]	; (125fc <void Timer::TimerHandler<(TimerInterface::TimerPort)1>()+0x38>)
   125de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   125e2:	4798      	blx	r3
    ClearInterrupts<port>();
   125e4:	f000 f940 	bl	12868 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)1>()>
   125e8:	4623      	mov	r3, r4
   125ea:	4619      	mov	r1, r3
   125ec:	4802      	ldr	r0, [pc, #8]	; (125f8 <void Timer::TimerHandler<(TimerInterface::TimerPort)1>()+0x34>)
   125ee:	f000 fc53 	bl	12e98 <__cyg_profile_func_exit>
  }
   125f2:	bf00      	nop
   125f4:	bd10      	pop	{r4, pc}
   125f6:	bf00      	nop
   125f8:	000125c5 	.word	0x000125c5
   125fc:	100003ac 	.word	0x100003ac

00012600 <void Timer::TimerHandler<(TimerInterface::TimerPort)2>()>:
  static void TimerHandler()
   12600:	b510      	push	{r4, lr}
   12602:	4674      	mov	r4, lr
   12604:	4623      	mov	r3, r4
   12606:	4619      	mov	r1, r3
   12608:	480a      	ldr	r0, [pc, #40]	; (12634 <void Timer::TimerHandler<(TimerInterface::TimerPort)2>()+0x34>)
   1260a:	f000 fc31 	bl	12e70 <__cyg_profile_func_enter>
      user_timer_isr[util::Value(port)]();
   1260e:	2002      	movs	r0, #2
   12610:	f7ff f942 	bl	11898 <unsigned char util::Value<TimerInterface::TimerPort, unsigned char>(TimerInterface::TimerPort)>
   12614:	4603      	mov	r3, r0
   12616:	461a      	mov	r2, r3
   12618:	4b07      	ldr	r3, [pc, #28]	; (12638 <void Timer::TimerHandler<(TimerInterface::TimerPort)2>()+0x38>)
   1261a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   1261e:	4798      	blx	r3
    ClearInterrupts<port>();
   12620:	f000 f972 	bl	12908 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)2>()>
   12624:	4623      	mov	r3, r4
   12626:	4619      	mov	r1, r3
   12628:	4802      	ldr	r0, [pc, #8]	; (12634 <void Timer::TimerHandler<(TimerInterface::TimerPort)2>()+0x34>)
   1262a:	f000 fc35 	bl	12e98 <__cyg_profile_func_exit>
  }
   1262e:	bf00      	nop
   12630:	bd10      	pop	{r4, pc}
   12632:	bf00      	nop
   12634:	00012601 	.word	0x00012601
   12638:	100003ac 	.word	0x100003ac

0001263c <void Timer::TimerHandler<(TimerInterface::TimerPort)3>()>:
  static void TimerHandler()
   1263c:	b510      	push	{r4, lr}
   1263e:	4674      	mov	r4, lr
   12640:	4623      	mov	r3, r4
   12642:	4619      	mov	r1, r3
   12644:	480a      	ldr	r0, [pc, #40]	; (12670 <void Timer::TimerHandler<(TimerInterface::TimerPort)3>()+0x34>)
   12646:	f000 fc13 	bl	12e70 <__cyg_profile_func_enter>
      user_timer_isr[util::Value(port)]();
   1264a:	2003      	movs	r0, #3
   1264c:	f7ff f924 	bl	11898 <unsigned char util::Value<TimerInterface::TimerPort, unsigned char>(TimerInterface::TimerPort)>
   12650:	4603      	mov	r3, r0
   12652:	461a      	mov	r2, r3
   12654:	4b07      	ldr	r3, [pc, #28]	; (12674 <void Timer::TimerHandler<(TimerInterface::TimerPort)3>()+0x38>)
   12656:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   1265a:	4798      	blx	r3
    ClearInterrupts<port>();
   1265c:	f000 f9a4 	bl	129a8 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)3>()>
   12660:	4623      	mov	r3, r4
   12662:	4619      	mov	r1, r3
   12664:	4802      	ldr	r0, [pc, #8]	; (12670 <void Timer::TimerHandler<(TimerInterface::TimerPort)3>()+0x34>)
   12666:	f000 fc17 	bl	12e98 <__cyg_profile_func_exit>
  }
   1266a:	bf00      	nop
   1266c:	bd10      	pop	{r4, pc}
   1266e:	bf00      	nop
   12670:	0001263d 	.word	0x0001263d
   12674:	100003ac 	.word	0x100003ac

00012678 <Status Wait<Uart::Send(unsigned char)::{lambda()#1}>(unsigned long long, Uart::Send(unsigned char)::{lambda()#1})>:
inline Status Wait(uint64_t timeout, F is_done)
   12678:	e92d 4830 	stmdb	sp!, {r4, r5, fp, lr}
   1267c:	b088      	sub	sp, #32
   1267e:	4675      	mov	r5, lr
   12680:	e9cd 0102 	strd	r0, r1, [sp, #8]
   12684:	9201      	str	r2, [sp, #4]
   12686:	462b      	mov	r3, r5
   12688:	4619      	mov	r1, r3
   1268a:	4824      	ldr	r0, [pc, #144]	; (1271c <Status Wait<Uart::Send(unsigned char)::{lambda()#1}>(unsigned long long, Uart::Send(unsigned char)::{lambda()#1})+0xa4>)
   1268c:	f000 fbf0 	bl	12e70 <__cyg_profile_func_enter>
  uint64_t timeout_time = 0;
   12690:	f04f 0300 	mov.w	r3, #0
   12694:	f04f 0400 	mov.w	r4, #0
   12698:	e9cd 3406 	strd	r3, r4, [sp, #24]
  if (timeout == kMaxWait)
   1269c:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
   126a0:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
   126a4:	bf08      	it	eq
   126a6:	f1b3 3fff 	cmpeq.w	r3, #4294967295	; 0xffffffff
   126aa:	d106      	bne.n	126ba <Status Wait<Uart::Send(unsigned char)::{lambda()#1}>(unsigned long long, Uart::Send(unsigned char)::{lambda()#1})+0x42>
    timeout_time = kMaxWait;
   126ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   126b0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   126b4:	e9cd 3406 	strd	r3, r4, [sp, #24]
   126b8:	e00b      	b.n	126d2 <Status Wait<Uart::Send(unsigned char)::{lambda()#1}>(unsigned long long, Uart::Send(unsigned char)::{lambda()#1})+0x5a>
    timeout_time = Milliseconds() + timeout;
   126ba:	f7fd ff47 	bl	1054c <Milliseconds()>
   126be:	460a      	mov	r2, r1
   126c0:	4601      	mov	r1, r0
   126c2:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
   126c6:	eb13 0b01 	adds.w	fp, r3, r1
   126ca:	eb44 0c02 	adc.w	ip, r4, r2
   126ce:	e9cd bc06 	strd	fp, ip, [sp, #24]
  Status status = Status::kTimedOut;
   126d2:	2301      	movs	r3, #1
   126d4:	9305      	str	r3, [sp, #20]
  while (Milliseconds() < timeout_time)
   126d6:	f7fd ff39 	bl	1054c <Milliseconds()>
   126da:	460a      	mov	r2, r1
   126dc:	4601      	mov	r1, r0
   126de:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
   126e2:	42a2      	cmp	r2, r4
   126e4:	bf08      	it	eq
   126e6:	4299      	cmpeq	r1, r3
   126e8:	bf34      	ite	cc
   126ea:	2301      	movcc	r3, #1
   126ec:	2300      	movcs	r3, #0
   126ee:	b2db      	uxtb	r3, r3
   126f0:	2b00      	cmp	r3, #0
   126f2:	d008      	beq.n	12706 <Status Wait<Uart::Send(unsigned char)::{lambda()#1}>(unsigned long long, Uart::Send(unsigned char)::{lambda()#1})+0x8e>
    if (is_done())
   126f4:	ab01      	add	r3, sp, #4
   126f6:	4618      	mov	r0, r3
   126f8:	f7ff fb1a 	bl	11d30 <Uart::Send(unsigned char)::{lambda()#1}::operator()() const>
   126fc:	4603      	mov	r3, r0
   126fe:	2b00      	cmp	r3, #0
   12700:	d0e9      	beq.n	126d6 <Status Wait<Uart::Send(unsigned char)::{lambda()#1}>(unsigned long long, Uart::Send(unsigned char)::{lambda()#1})+0x5e>
      status = Status::kSuccess;
   12702:	2300      	movs	r3, #0
   12704:	9305      	str	r3, [sp, #20]
  return status;
   12706:	9c05      	ldr	r4, [sp, #20]
   12708:	462b      	mov	r3, r5
   1270a:	4619      	mov	r1, r3
   1270c:	4803      	ldr	r0, [pc, #12]	; (1271c <Status Wait<Uart::Send(unsigned char)::{lambda()#1}>(unsigned long long, Uart::Send(unsigned char)::{lambda()#1})+0xa4>)
   1270e:	f000 fbc3 	bl	12e98 <__cyg_profile_func_exit>
   12712:	4623      	mov	r3, r4
}
   12714:	4618      	mov	r0, r3
   12716:	b008      	add	sp, #32
   12718:	e8bd 8830 	ldmia.w	sp!, {r4, r5, fp, pc}
   1271c:	00012679 	.word	0x00012679

00012720 <Status Wait<Uart::Receive(unsigned long)::{lambda()#1}>(unsigned long long, Uart::Receive(unsigned long)::{lambda()#1})>:
inline Status Wait(uint64_t timeout, F is_done)
   12720:	e92d 4830 	stmdb	sp!, {r4, r5, fp, lr}
   12724:	b088      	sub	sp, #32
   12726:	4675      	mov	r5, lr
   12728:	e9cd 0102 	strd	r0, r1, [sp, #8]
   1272c:	9201      	str	r2, [sp, #4]
   1272e:	462b      	mov	r3, r5
   12730:	4619      	mov	r1, r3
   12732:	4824      	ldr	r0, [pc, #144]	; (127c4 <Status Wait<Uart::Receive(unsigned long)::{lambda()#1}>(unsigned long long, Uart::Receive(unsigned long)::{lambda()#1})+0xa4>)
   12734:	f000 fb9c 	bl	12e70 <__cyg_profile_func_enter>
  uint64_t timeout_time = 0;
   12738:	f04f 0300 	mov.w	r3, #0
   1273c:	f04f 0400 	mov.w	r4, #0
   12740:	e9cd 3406 	strd	r3, r4, [sp, #24]
  if (timeout == kMaxWait)
   12744:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
   12748:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
   1274c:	bf08      	it	eq
   1274e:	f1b3 3fff 	cmpeq.w	r3, #4294967295	; 0xffffffff
   12752:	d106      	bne.n	12762 <Status Wait<Uart::Receive(unsigned long)::{lambda()#1}>(unsigned long long, Uart::Receive(unsigned long)::{lambda()#1})+0x42>
    timeout_time = kMaxWait;
   12754:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   12758:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   1275c:	e9cd 3406 	strd	r3, r4, [sp, #24]
   12760:	e00b      	b.n	1277a <Status Wait<Uart::Receive(unsigned long)::{lambda()#1}>(unsigned long long, Uart::Receive(unsigned long)::{lambda()#1})+0x5a>
    timeout_time = Milliseconds() + timeout;
   12762:	f7fd fef3 	bl	1054c <Milliseconds()>
   12766:	460a      	mov	r2, r1
   12768:	4601      	mov	r1, r0
   1276a:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
   1276e:	eb13 0b01 	adds.w	fp, r3, r1
   12772:	eb44 0c02 	adc.w	ip, r4, r2
   12776:	e9cd bc06 	strd	fp, ip, [sp, #24]
  Status status = Status::kTimedOut;
   1277a:	2301      	movs	r3, #1
   1277c:	9305      	str	r3, [sp, #20]
  while (Milliseconds() < timeout_time)
   1277e:	f7fd fee5 	bl	1054c <Milliseconds()>
   12782:	460a      	mov	r2, r1
   12784:	4601      	mov	r1, r0
   12786:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
   1278a:	42a2      	cmp	r2, r4
   1278c:	bf08      	it	eq
   1278e:	4299      	cmpeq	r1, r3
   12790:	bf34      	ite	cc
   12792:	2301      	movcc	r3, #1
   12794:	2300      	movcs	r3, #0
   12796:	b2db      	uxtb	r3, r3
   12798:	2b00      	cmp	r3, #0
   1279a:	d008      	beq.n	127ae <Status Wait<Uart::Receive(unsigned long)::{lambda()#1}>(unsigned long long, Uart::Receive(unsigned long)::{lambda()#1})+0x8e>
    if (is_done())
   1279c:	ab01      	add	r3, sp, #4
   1279e:	4618      	mov	r0, r3
   127a0:	f7ff fb60 	bl	11e64 <Uart::Receive(unsigned long)::{lambda()#1}::operator()() const>
   127a4:	4603      	mov	r3, r0
   127a6:	2b00      	cmp	r3, #0
   127a8:	d0e9      	beq.n	1277e <Status Wait<Uart::Receive(unsigned long)::{lambda()#1}>(unsigned long long, Uart::Receive(unsigned long)::{lambda()#1})+0x5e>
      status = Status::kSuccess;
   127aa:	2300      	movs	r3, #0
   127ac:	9305      	str	r3, [sp, #20]
  return status;
   127ae:	9c05      	ldr	r4, [sp, #20]
   127b0:	462b      	mov	r3, r5
   127b2:	4619      	mov	r1, r3
   127b4:	4803      	ldr	r0, [pc, #12]	; (127c4 <Status Wait<Uart::Receive(unsigned long)::{lambda()#1}>(unsigned long long, Uart::Receive(unsigned long)::{lambda()#1})+0xa4>)
   127b6:	f000 fb6f 	bl	12e98 <__cyg_profile_func_exit>
   127ba:	4623      	mov	r3, r4
}
   127bc:	4618      	mov	r0, r3
   127be:	b008      	add	sp, #32
   127c0:	e8bd 8830 	ldmia.w	sp!, {r4, r5, fp, pc}
   127c4:	00012721 	.word	0x00012721

000127c8 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)0>()>:
  static void ClearInterrupts()
   127c8:	b510      	push	{r4, lr}
   127ca:	b082      	sub	sp, #8
   127cc:	4674      	mov	r4, lr
   127ce:	4623      	mov	r3, r4
   127d0:	4619      	mov	r1, r3
   127d2:	4823      	ldr	r0, [pc, #140]	; (12860 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)0>()+0x98>)
   127d4:	f000 fb4c 	bl	12e70 <__cyg_profile_func_enter>
    uint8_t channel = util::Value(port);
   127d8:	2300      	movs	r3, #0
   127da:	f88d 3007 	strb.w	r3, [sp, #7]
    tim_register[channel]->IR |= (1 << kRegMR0);
   127de:	f89d 3007 	ldrb.w	r3, [sp, #7]
   127e2:	4a20      	ldr	r2, [pc, #128]	; (12864 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)0>()+0x9c>)
   127e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   127e8:	681a      	ldr	r2, [r3, #0]
   127ea:	f89d 3007 	ldrb.w	r3, [sp, #7]
   127ee:	491d      	ldr	r1, [pc, #116]	; (12864 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)0>()+0x9c>)
   127f0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   127f4:	f042 0201 	orr.w	r2, r2, #1
   127f8:	601a      	str	r2, [r3, #0]
    tim_register[channel]->IR |= (1 << kRegMR1);
   127fa:	f89d 3007 	ldrb.w	r3, [sp, #7]
   127fe:	4a19      	ldr	r2, [pc, #100]	; (12864 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)0>()+0x9c>)
   12800:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12804:	681a      	ldr	r2, [r3, #0]
   12806:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1280a:	4916      	ldr	r1, [pc, #88]	; (12864 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)0>()+0x9c>)
   1280c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   12810:	f042 0202 	orr.w	r2, r2, #2
   12814:	601a      	str	r2, [r3, #0]
    tim_register[channel]->IR |= (1 << kRegMR2);
   12816:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1281a:	4a12      	ldr	r2, [pc, #72]	; (12864 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)0>()+0x9c>)
   1281c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12820:	681a      	ldr	r2, [r3, #0]
   12822:	f89d 3007 	ldrb.w	r3, [sp, #7]
   12826:	490f      	ldr	r1, [pc, #60]	; (12864 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)0>()+0x9c>)
   12828:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   1282c:	f042 0204 	orr.w	r2, r2, #4
   12830:	601a      	str	r2, [r3, #0]
    tim_register[channel]->IR |= (1 << kRegMR3);
   12832:	f89d 3007 	ldrb.w	r3, [sp, #7]
   12836:	4a0b      	ldr	r2, [pc, #44]	; (12864 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)0>()+0x9c>)
   12838:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1283c:	681a      	ldr	r2, [r3, #0]
   1283e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   12842:	4908      	ldr	r1, [pc, #32]	; (12864 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)0>()+0x9c>)
   12844:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   12848:	f042 0208 	orr.w	r2, r2, #8
   1284c:	601a      	str	r2, [r3, #0]
   1284e:	4623      	mov	r3, r4
   12850:	4619      	mov	r1, r3
   12852:	4803      	ldr	r0, [pc, #12]	; (12860 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)0>()+0x98>)
   12854:	f000 fb20 	bl	12e98 <__cyg_profile_func_exit>
  }
   12858:	bf00      	nop
   1285a:	b002      	add	sp, #8
   1285c:	bd10      	pop	{r4, pc}
   1285e:	bf00      	nop
   12860:	000127c9 	.word	0x000127c9
   12864:	10000038 	.word	0x10000038

00012868 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)1>()>:
  static void ClearInterrupts()
   12868:	b510      	push	{r4, lr}
   1286a:	b082      	sub	sp, #8
   1286c:	4674      	mov	r4, lr
   1286e:	4623      	mov	r3, r4
   12870:	4619      	mov	r1, r3
   12872:	4823      	ldr	r0, [pc, #140]	; (12900 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)1>()+0x98>)
   12874:	f000 fafc 	bl	12e70 <__cyg_profile_func_enter>
    uint8_t channel = util::Value(port);
   12878:	2301      	movs	r3, #1
   1287a:	f88d 3007 	strb.w	r3, [sp, #7]
    tim_register[channel]->IR |= (1 << kRegMR0);
   1287e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   12882:	4a20      	ldr	r2, [pc, #128]	; (12904 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)1>()+0x9c>)
   12884:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12888:	681a      	ldr	r2, [r3, #0]
   1288a:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1288e:	491d      	ldr	r1, [pc, #116]	; (12904 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)1>()+0x9c>)
   12890:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   12894:	f042 0201 	orr.w	r2, r2, #1
   12898:	601a      	str	r2, [r3, #0]
    tim_register[channel]->IR |= (1 << kRegMR1);
   1289a:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1289e:	4a19      	ldr	r2, [pc, #100]	; (12904 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)1>()+0x9c>)
   128a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   128a4:	681a      	ldr	r2, [r3, #0]
   128a6:	f89d 3007 	ldrb.w	r3, [sp, #7]
   128aa:	4916      	ldr	r1, [pc, #88]	; (12904 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)1>()+0x9c>)
   128ac:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   128b0:	f042 0202 	orr.w	r2, r2, #2
   128b4:	601a      	str	r2, [r3, #0]
    tim_register[channel]->IR |= (1 << kRegMR2);
   128b6:	f89d 3007 	ldrb.w	r3, [sp, #7]
   128ba:	4a12      	ldr	r2, [pc, #72]	; (12904 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)1>()+0x9c>)
   128bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   128c0:	681a      	ldr	r2, [r3, #0]
   128c2:	f89d 3007 	ldrb.w	r3, [sp, #7]
   128c6:	490f      	ldr	r1, [pc, #60]	; (12904 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)1>()+0x9c>)
   128c8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   128cc:	f042 0204 	orr.w	r2, r2, #4
   128d0:	601a      	str	r2, [r3, #0]
    tim_register[channel]->IR |= (1 << kRegMR3);
   128d2:	f89d 3007 	ldrb.w	r3, [sp, #7]
   128d6:	4a0b      	ldr	r2, [pc, #44]	; (12904 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)1>()+0x9c>)
   128d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   128dc:	681a      	ldr	r2, [r3, #0]
   128de:	f89d 3007 	ldrb.w	r3, [sp, #7]
   128e2:	4908      	ldr	r1, [pc, #32]	; (12904 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)1>()+0x9c>)
   128e4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   128e8:	f042 0208 	orr.w	r2, r2, #8
   128ec:	601a      	str	r2, [r3, #0]
   128ee:	4623      	mov	r3, r4
   128f0:	4619      	mov	r1, r3
   128f2:	4803      	ldr	r0, [pc, #12]	; (12900 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)1>()+0x98>)
   128f4:	f000 fad0 	bl	12e98 <__cyg_profile_func_exit>
  }
   128f8:	bf00      	nop
   128fa:	b002      	add	sp, #8
   128fc:	bd10      	pop	{r4, pc}
   128fe:	bf00      	nop
   12900:	00012869 	.word	0x00012869
   12904:	10000038 	.word	0x10000038

00012908 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)2>()>:
  static void ClearInterrupts()
   12908:	b510      	push	{r4, lr}
   1290a:	b082      	sub	sp, #8
   1290c:	4674      	mov	r4, lr
   1290e:	4623      	mov	r3, r4
   12910:	4619      	mov	r1, r3
   12912:	4823      	ldr	r0, [pc, #140]	; (129a0 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)2>()+0x98>)
   12914:	f000 faac 	bl	12e70 <__cyg_profile_func_enter>
    uint8_t channel = util::Value(port);
   12918:	2302      	movs	r3, #2
   1291a:	f88d 3007 	strb.w	r3, [sp, #7]
    tim_register[channel]->IR |= (1 << kRegMR0);
   1291e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   12922:	4a20      	ldr	r2, [pc, #128]	; (129a4 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)2>()+0x9c>)
   12924:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12928:	681a      	ldr	r2, [r3, #0]
   1292a:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1292e:	491d      	ldr	r1, [pc, #116]	; (129a4 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)2>()+0x9c>)
   12930:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   12934:	f042 0201 	orr.w	r2, r2, #1
   12938:	601a      	str	r2, [r3, #0]
    tim_register[channel]->IR |= (1 << kRegMR1);
   1293a:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1293e:	4a19      	ldr	r2, [pc, #100]	; (129a4 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)2>()+0x9c>)
   12940:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12944:	681a      	ldr	r2, [r3, #0]
   12946:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1294a:	4916      	ldr	r1, [pc, #88]	; (129a4 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)2>()+0x9c>)
   1294c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   12950:	f042 0202 	orr.w	r2, r2, #2
   12954:	601a      	str	r2, [r3, #0]
    tim_register[channel]->IR |= (1 << kRegMR2);
   12956:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1295a:	4a12      	ldr	r2, [pc, #72]	; (129a4 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)2>()+0x9c>)
   1295c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12960:	681a      	ldr	r2, [r3, #0]
   12962:	f89d 3007 	ldrb.w	r3, [sp, #7]
   12966:	490f      	ldr	r1, [pc, #60]	; (129a4 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)2>()+0x9c>)
   12968:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   1296c:	f042 0204 	orr.w	r2, r2, #4
   12970:	601a      	str	r2, [r3, #0]
    tim_register[channel]->IR |= (1 << kRegMR3);
   12972:	f89d 3007 	ldrb.w	r3, [sp, #7]
   12976:	4a0b      	ldr	r2, [pc, #44]	; (129a4 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)2>()+0x9c>)
   12978:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1297c:	681a      	ldr	r2, [r3, #0]
   1297e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   12982:	4908      	ldr	r1, [pc, #32]	; (129a4 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)2>()+0x9c>)
   12984:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   12988:	f042 0208 	orr.w	r2, r2, #8
   1298c:	601a      	str	r2, [r3, #0]
   1298e:	4623      	mov	r3, r4
   12990:	4619      	mov	r1, r3
   12992:	4803      	ldr	r0, [pc, #12]	; (129a0 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)2>()+0x98>)
   12994:	f000 fa80 	bl	12e98 <__cyg_profile_func_exit>
  }
   12998:	bf00      	nop
   1299a:	b002      	add	sp, #8
   1299c:	bd10      	pop	{r4, pc}
   1299e:	bf00      	nop
   129a0:	00012909 	.word	0x00012909
   129a4:	10000038 	.word	0x10000038

000129a8 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)3>()>:
  static void ClearInterrupts()
   129a8:	b510      	push	{r4, lr}
   129aa:	b082      	sub	sp, #8
   129ac:	4674      	mov	r4, lr
   129ae:	4623      	mov	r3, r4
   129b0:	4619      	mov	r1, r3
   129b2:	4823      	ldr	r0, [pc, #140]	; (12a40 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)3>()+0x98>)
   129b4:	f000 fa5c 	bl	12e70 <__cyg_profile_func_enter>
    uint8_t channel = util::Value(port);
   129b8:	2303      	movs	r3, #3
   129ba:	f88d 3007 	strb.w	r3, [sp, #7]
    tim_register[channel]->IR |= (1 << kRegMR0);
   129be:	f89d 3007 	ldrb.w	r3, [sp, #7]
   129c2:	4a20      	ldr	r2, [pc, #128]	; (12a44 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)3>()+0x9c>)
   129c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   129c8:	681a      	ldr	r2, [r3, #0]
   129ca:	f89d 3007 	ldrb.w	r3, [sp, #7]
   129ce:	491d      	ldr	r1, [pc, #116]	; (12a44 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)3>()+0x9c>)
   129d0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   129d4:	f042 0201 	orr.w	r2, r2, #1
   129d8:	601a      	str	r2, [r3, #0]
    tim_register[channel]->IR |= (1 << kRegMR1);
   129da:	f89d 3007 	ldrb.w	r3, [sp, #7]
   129de:	4a19      	ldr	r2, [pc, #100]	; (12a44 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)3>()+0x9c>)
   129e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   129e4:	681a      	ldr	r2, [r3, #0]
   129e6:	f89d 3007 	ldrb.w	r3, [sp, #7]
   129ea:	4916      	ldr	r1, [pc, #88]	; (12a44 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)3>()+0x9c>)
   129ec:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   129f0:	f042 0202 	orr.w	r2, r2, #2
   129f4:	601a      	str	r2, [r3, #0]
    tim_register[channel]->IR |= (1 << kRegMR2);
   129f6:	f89d 3007 	ldrb.w	r3, [sp, #7]
   129fa:	4a12      	ldr	r2, [pc, #72]	; (12a44 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)3>()+0x9c>)
   129fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12a00:	681a      	ldr	r2, [r3, #0]
   12a02:	f89d 3007 	ldrb.w	r3, [sp, #7]
   12a06:	490f      	ldr	r1, [pc, #60]	; (12a44 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)3>()+0x9c>)
   12a08:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   12a0c:	f042 0204 	orr.w	r2, r2, #4
   12a10:	601a      	str	r2, [r3, #0]
    tim_register[channel]->IR |= (1 << kRegMR3);
   12a12:	f89d 3007 	ldrb.w	r3, [sp, #7]
   12a16:	4a0b      	ldr	r2, [pc, #44]	; (12a44 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)3>()+0x9c>)
   12a18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12a1c:	681a      	ldr	r2, [r3, #0]
   12a1e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   12a22:	4908      	ldr	r1, [pc, #32]	; (12a44 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)3>()+0x9c>)
   12a24:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   12a28:	f042 0208 	orr.w	r2, r2, #8
   12a2c:	601a      	str	r2, [r3, #0]
   12a2e:	4623      	mov	r3, r4
   12a30:	4619      	mov	r1, r3
   12a32:	4803      	ldr	r0, [pc, #12]	; (12a40 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)3>()+0x98>)
   12a34:	f000 fa30 	bl	12e98 <__cyg_profile_func_exit>
  }
   12a38:	bf00      	nop
   12a3a:	b002      	add	sp, #8
   12a3c:	bd10      	pop	{r4, pc}
   12a3e:	bf00      	nop
   12a40:	000129a9 	.word	0x000129a9
   12a44:	10000038 	.word	0x10000038

00012a48 <__static_initialization_and_destruction_0(int, int)>:
#pragma GCC diagnostic pop
    // main() shouldn't return, but if it does, we'll just enter an infinite
    // loop
    Halt();
  }
}
   12a48:	b082      	sub	sp, #8
   12a4a:	9001      	str	r0, [sp, #4]
   12a4c:	9100      	str	r1, [sp, #0]
   12a4e:	9b01      	ldr	r3, [sp, #4]
   12a50:	2b01      	cmp	r3, #1
   12a52:	d15d      	bne.n	12b10 <__static_initialization_and_destruction_0(int, int)+0xc8>
   12a54:	9b00      	ldr	r3, [sp, #0]
   12a56:	f64f 72ff 	movw	r2, #65535	; 0xffff
   12a5a:	4293      	cmp	r3, r2
   12a5c:	d158      	bne.n	12b10 <__static_initialization_and_destruction_0(int, int)+0xc8>
  inline static volatile uint32_t * match[4][4] = {
   12a5e:	4b2e      	ldr	r3, [pc, #184]	; (12b18 <__static_initialization_and_destruction_0(int, int)+0xd0>)
   12a60:	681b      	ldr	r3, [r3, #0]
   12a62:	f003 0301 	and.w	r3, r3, #1
   12a66:	2b00      	cmp	r3, #0
   12a68:	d152      	bne.n	12b10 <__static_initialization_and_destruction_0(int, int)+0xc8>
   12a6a:	4b2b      	ldr	r3, [pc, #172]	; (12b18 <__static_initialization_and_destruction_0(int, int)+0xd0>)
   12a6c:	2201      	movs	r2, #1
   12a6e:	601a      	str	r2, [r3, #0]
    [kTimer0] = { &tim_register[0]->MR0, &tim_register[0]->MR1,
   12a70:	4b2a      	ldr	r3, [pc, #168]	; (12b1c <__static_initialization_and_destruction_0(int, int)+0xd4>)
   12a72:	681b      	ldr	r3, [r3, #0]
   12a74:	3318      	adds	r3, #24
  };
   12a76:	4a2a      	ldr	r2, [pc, #168]	; (12b20 <__static_initialization_and_destruction_0(int, int)+0xd8>)
   12a78:	6013      	str	r3, [r2, #0]
    [kTimer0] = { &tim_register[0]->MR0, &tim_register[0]->MR1,
   12a7a:	4b28      	ldr	r3, [pc, #160]	; (12b1c <__static_initialization_and_destruction_0(int, int)+0xd4>)
   12a7c:	681b      	ldr	r3, [r3, #0]
   12a7e:	331c      	adds	r3, #28
  };
   12a80:	4a27      	ldr	r2, [pc, #156]	; (12b20 <__static_initialization_and_destruction_0(int, int)+0xd8>)
   12a82:	6053      	str	r3, [r2, #4]
                  &tim_register[0]->MR2, &tim_register[0]->MR3 },
   12a84:	4b25      	ldr	r3, [pc, #148]	; (12b1c <__static_initialization_and_destruction_0(int, int)+0xd4>)
   12a86:	681b      	ldr	r3, [r3, #0]
   12a88:	3320      	adds	r3, #32
  };
   12a8a:	4a25      	ldr	r2, [pc, #148]	; (12b20 <__static_initialization_and_destruction_0(int, int)+0xd8>)
   12a8c:	6093      	str	r3, [r2, #8]
                  &tim_register[0]->MR2, &tim_register[0]->MR3 },
   12a8e:	4b23      	ldr	r3, [pc, #140]	; (12b1c <__static_initialization_and_destruction_0(int, int)+0xd4>)
   12a90:	681b      	ldr	r3, [r3, #0]
   12a92:	3324      	adds	r3, #36	; 0x24
  };
   12a94:	4a22      	ldr	r2, [pc, #136]	; (12b20 <__static_initialization_and_destruction_0(int, int)+0xd8>)
   12a96:	60d3      	str	r3, [r2, #12]
    [kTimer1] = { &tim_register[1]->MR0, &tim_register[1]->MR1,
   12a98:	4b20      	ldr	r3, [pc, #128]	; (12b1c <__static_initialization_and_destruction_0(int, int)+0xd4>)
   12a9a:	685b      	ldr	r3, [r3, #4]
   12a9c:	3318      	adds	r3, #24
  };
   12a9e:	4a20      	ldr	r2, [pc, #128]	; (12b20 <__static_initialization_and_destruction_0(int, int)+0xd8>)
   12aa0:	6113      	str	r3, [r2, #16]
    [kTimer1] = { &tim_register[1]->MR0, &tim_register[1]->MR1,
   12aa2:	4b1e      	ldr	r3, [pc, #120]	; (12b1c <__static_initialization_and_destruction_0(int, int)+0xd4>)
   12aa4:	685b      	ldr	r3, [r3, #4]
   12aa6:	331c      	adds	r3, #28
  };
   12aa8:	4a1d      	ldr	r2, [pc, #116]	; (12b20 <__static_initialization_and_destruction_0(int, int)+0xd8>)
   12aaa:	6153      	str	r3, [r2, #20]
                  &tim_register[1]->MR2, &tim_register[1]->MR3 },
   12aac:	4b1b      	ldr	r3, [pc, #108]	; (12b1c <__static_initialization_and_destruction_0(int, int)+0xd4>)
   12aae:	685b      	ldr	r3, [r3, #4]
   12ab0:	3320      	adds	r3, #32
  };
   12ab2:	4a1b      	ldr	r2, [pc, #108]	; (12b20 <__static_initialization_and_destruction_0(int, int)+0xd8>)
   12ab4:	6193      	str	r3, [r2, #24]
                  &tim_register[1]->MR2, &tim_register[1]->MR3 },
   12ab6:	4b19      	ldr	r3, [pc, #100]	; (12b1c <__static_initialization_and_destruction_0(int, int)+0xd4>)
   12ab8:	685b      	ldr	r3, [r3, #4]
   12aba:	3324      	adds	r3, #36	; 0x24
  };
   12abc:	4a18      	ldr	r2, [pc, #96]	; (12b20 <__static_initialization_and_destruction_0(int, int)+0xd8>)
   12abe:	61d3      	str	r3, [r2, #28]
    [kTimer2] = { &tim_register[2]->MR0, &tim_register[2]->MR1,
   12ac0:	4b16      	ldr	r3, [pc, #88]	; (12b1c <__static_initialization_and_destruction_0(int, int)+0xd4>)
   12ac2:	689b      	ldr	r3, [r3, #8]
   12ac4:	3318      	adds	r3, #24
  };
   12ac6:	4a16      	ldr	r2, [pc, #88]	; (12b20 <__static_initialization_and_destruction_0(int, int)+0xd8>)
   12ac8:	6213      	str	r3, [r2, #32]
    [kTimer2] = { &tim_register[2]->MR0, &tim_register[2]->MR1,
   12aca:	4b14      	ldr	r3, [pc, #80]	; (12b1c <__static_initialization_and_destruction_0(int, int)+0xd4>)
   12acc:	689b      	ldr	r3, [r3, #8]
   12ace:	331c      	adds	r3, #28
  };
   12ad0:	4a13      	ldr	r2, [pc, #76]	; (12b20 <__static_initialization_and_destruction_0(int, int)+0xd8>)
   12ad2:	6253      	str	r3, [r2, #36]	; 0x24
                  &tim_register[2]->MR2, &tim_register[2]->MR3 },
   12ad4:	4b11      	ldr	r3, [pc, #68]	; (12b1c <__static_initialization_and_destruction_0(int, int)+0xd4>)
   12ad6:	689b      	ldr	r3, [r3, #8]
   12ad8:	3320      	adds	r3, #32
  };
   12ada:	4a11      	ldr	r2, [pc, #68]	; (12b20 <__static_initialization_and_destruction_0(int, int)+0xd8>)
   12adc:	6293      	str	r3, [r2, #40]	; 0x28
                  &tim_register[2]->MR2, &tim_register[2]->MR3 },
   12ade:	4b0f      	ldr	r3, [pc, #60]	; (12b1c <__static_initialization_and_destruction_0(int, int)+0xd4>)
   12ae0:	689b      	ldr	r3, [r3, #8]
   12ae2:	3324      	adds	r3, #36	; 0x24
  };
   12ae4:	4a0e      	ldr	r2, [pc, #56]	; (12b20 <__static_initialization_and_destruction_0(int, int)+0xd8>)
   12ae6:	62d3      	str	r3, [r2, #44]	; 0x2c
    [kTimer3] = { &tim_register[3]->MR0, &tim_register[3]->MR1,
   12ae8:	4b0c      	ldr	r3, [pc, #48]	; (12b1c <__static_initialization_and_destruction_0(int, int)+0xd4>)
   12aea:	68db      	ldr	r3, [r3, #12]
   12aec:	3318      	adds	r3, #24
  };
   12aee:	4a0c      	ldr	r2, [pc, #48]	; (12b20 <__static_initialization_and_destruction_0(int, int)+0xd8>)
   12af0:	6313      	str	r3, [r2, #48]	; 0x30
    [kTimer3] = { &tim_register[3]->MR0, &tim_register[3]->MR1,
   12af2:	4b0a      	ldr	r3, [pc, #40]	; (12b1c <__static_initialization_and_destruction_0(int, int)+0xd4>)
   12af4:	68db      	ldr	r3, [r3, #12]
   12af6:	331c      	adds	r3, #28
  };
   12af8:	4a09      	ldr	r2, [pc, #36]	; (12b20 <__static_initialization_and_destruction_0(int, int)+0xd8>)
   12afa:	6353      	str	r3, [r2, #52]	; 0x34
                  &tim_register[3]->MR2, &tim_register[3]->MR3 }
   12afc:	4b07      	ldr	r3, [pc, #28]	; (12b1c <__static_initialization_and_destruction_0(int, int)+0xd4>)
   12afe:	68db      	ldr	r3, [r3, #12]
   12b00:	3320      	adds	r3, #32
  };
   12b02:	4a07      	ldr	r2, [pc, #28]	; (12b20 <__static_initialization_and_destruction_0(int, int)+0xd8>)
   12b04:	6393      	str	r3, [r2, #56]	; 0x38
                  &tim_register[3]->MR2, &tim_register[3]->MR3 }
   12b06:	4b05      	ldr	r3, [pc, #20]	; (12b1c <__static_initialization_and_destruction_0(int, int)+0xd4>)
   12b08:	68db      	ldr	r3, [r3, #12]
   12b0a:	3324      	adds	r3, #36	; 0x24
  };
   12b0c:	4a04      	ldr	r2, [pc, #16]	; (12b20 <__static_initialization_and_destruction_0(int, int)+0xd8>)
   12b0e:	63d3      	str	r3, [r2, #60]	; 0x3c
   12b10:	bf00      	nop
   12b12:	b002      	add	sp, #8
   12b14:	4770      	bx	lr
   12b16:	bf00      	nop
   12b18:	100003bc 	.word	0x100003bc
   12b1c:	10000038 	.word	0x10000038
   12b20:	1000036c 	.word	0x1000036c

00012b24 <_GLOBAL__sub_I_UptimeRTOS>:
   12b24:	b508      	push	{r3, lr}
   12b26:	f64f 71ff 	movw	r1, #65535	; 0xffff
   12b2a:	2001      	movs	r0, #1
   12b2c:	f7ff ff8c 	bl	12a48 <__static_initialization_and_destruction_0(int, int)>
   12b30:	bd08      	pop	{r3, pc}
   12b32:	Address 0x0000000000012b32 is out of bounds.


00012b34 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
   12b34:	b082      	sub	sp, #8
   12b36:	4603      	mov	r3, r0
   12b38:	f88d 3007 	strb.w	r3, [sp, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
   12b3c:	f99d 3007 	ldrsb.w	r3, [sp, #7]
   12b40:	f003 021f 	and.w	r2, r3, #31
   12b44:	4905      	ldr	r1, [pc, #20]	; (12b5c <NVIC_EnableIRQ+0x28>)
   12b46:	f99d 3007 	ldrsb.w	r3, [sp, #7]
   12b4a:	095b      	lsrs	r3, r3, #5
   12b4c:	2001      	movs	r0, #1
   12b4e:	fa00 f202 	lsl.w	r2, r0, r2
   12b52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   12b56:	bf00      	nop
   12b58:	b002      	add	sp, #8
   12b5a:	4770      	bx	lr
   12b5c:	e000e100 	.word	0xe000e100

00012b60 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
   12b60:	b082      	sub	sp, #8
   12b62:	4603      	mov	r3, r0
   12b64:	9100      	str	r1, [sp, #0]
   12b66:	f88d 3007 	strb.w	r3, [sp, #7]
  if ((int32_t)(IRQn) < 0)
   12b6a:	f99d 3007 	ldrsb.w	r3, [sp, #7]
   12b6e:	2b00      	cmp	r3, #0
   12b70:	da0c      	bge.n	12b8c <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   12b72:	9b00      	ldr	r3, [sp, #0]
   12b74:	b2da      	uxtb	r2, r3
   12b76:	490d      	ldr	r1, [pc, #52]	; (12bac <NVIC_SetPriority+0x4c>)
   12b78:	f99d 3007 	ldrsb.w	r3, [sp, #7]
   12b7c:	f003 030f 	and.w	r3, r3, #15
   12b80:	3b04      	subs	r3, #4
   12b82:	0152      	lsls	r2, r2, #5
   12b84:	b2d2      	uxtb	r2, r2
   12b86:	440b      	add	r3, r1
   12b88:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
   12b8a:	e00b      	b.n	12ba4 <NVIC_SetPriority+0x44>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   12b8c:	9b00      	ldr	r3, [sp, #0]
   12b8e:	b2db      	uxtb	r3, r3
   12b90:	4a07      	ldr	r2, [pc, #28]	; (12bb0 <NVIC_SetPriority+0x50>)
   12b92:	f99d 1007 	ldrsb.w	r1, [sp, #7]
   12b96:	4608      	mov	r0, r1
   12b98:	015b      	lsls	r3, r3, #5
   12b9a:	b2d9      	uxtb	r1, r3
   12b9c:	1813      	adds	r3, r2, r0
   12b9e:	460a      	mov	r2, r1
   12ba0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
   12ba4:	bf00      	nop
   12ba6:	b002      	add	sp, #8
   12ba8:	4770      	bx	lr
   12baa:	bf00      	nop
   12bac:	e000ed00 	.word	0xe000ed00
   12bb0:	e000e100 	.word	0xe000e100

00012bb4 <InterruptLookupHandler>:
{
   12bb4:	b500      	push	{lr}
   12bb6:	b085      	sub	sp, #20
  uint8_t active_isr = (SCB->ICSR & 0xFF);
   12bb8:	4b12      	ldr	r3, [pc, #72]	; (12c04 <InterruptLookupHandler+0x50>)
   12bba:	685b      	ldr	r3, [r3, #4]
   12bbc:	f88d 300f 	strb.w	r3, [sp, #15]
  IsrPointer isr     = dynamic_isr_vector_table[active_isr];
   12bc0:	f89d 300f 	ldrb.w	r3, [sp, #15]
   12bc4:	4a10      	ldr	r2, [pc, #64]	; (12c08 <InterruptLookupHandler+0x54>)
   12bc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12bca:	9302      	str	r3, [sp, #8]
  SJ2_ASSERT_FATAL(isr != InterruptLookupHandler,
   12bcc:	9b02      	ldr	r3, [sp, #8]
   12bce:	4a0f      	ldr	r2, [pc, #60]	; (12c0c <InterruptLookupHandler+0x58>)
   12bd0:	4293      	cmp	r3, r2
   12bd2:	d110      	bne.n	12bf6 <InterruptLookupHandler+0x42>
   12bd4:	f89d 300f 	ldrb.w	r3, [sp, #15]
   12bd8:	9300      	str	r3, [sp, #0]
   12bda:	23dd      	movs	r3, #221	; 0xdd
   12bdc:	4a0c      	ldr	r2, [pc, #48]	; (12c10 <InterruptLookupHandler+0x5c>)
   12bde:	490d      	ldr	r1, [pc, #52]	; (12c14 <InterruptLookupHandler+0x60>)
   12be0:	480d      	ldr	r0, [pc, #52]	; (12c18 <InterruptLookupHandler+0x64>)
   12be2:	f001 fb9f 	bl	14324 <printf>
   12be6:	480d      	ldr	r0, [pc, #52]	; (12c1c <InterruptLookupHandler+0x68>)
   12be8:	f000 f912 	bl	12e10 <puts>
   12bec:	2100      	movs	r1, #0
   12bee:	2001      	movs	r0, #1
   12bf0:	f7fd ff18 	bl	10a24 <debug::PrintBacktrace(bool, void*)>
   12bf4:	e7fe      	b.n	12bf4 <InterruptLookupHandler+0x40>
  isr();
   12bf6:	9b02      	ldr	r3, [sp, #8]
   12bf8:	4798      	blx	r3
}
   12bfa:	bf00      	nop
   12bfc:	b005      	add	sp, #20
   12bfe:	f85d fb04 	ldr.w	pc, [sp], #4
   12c02:	bf00      	nop
   12c04:	e000ed00 	.word	0xe000ed00
   12c08:	100000c4 	.word	0x100000c4
   12c0c:	00012bb5 	.word	0x00012bb5
   12c10:	00017cdc 	.word	0x00017cdc
   12c14:	00017ccc 	.word	0x00017ccc
   12c18:	00017b70 	.word	0x00017b70
   12c1c:	00017c1c 	.word	0x00017c1c

00012c20 <RegisterIsr(IRQn, void (*)(), bool, long)>:
{
   12c20:	b500      	push	{lr}
   12c22:	b085      	sub	sp, #20
   12c24:	9102      	str	r1, [sp, #8]
   12c26:	9301      	str	r3, [sp, #4]
   12c28:	4603      	mov	r3, r0
   12c2a:	f88d 300f 	strb.w	r3, [sp, #15]
   12c2e:	4613      	mov	r3, r2
   12c30:	f88d 300e 	strb.w	r3, [sp, #14]
  dynamic_isr_vector_table[irq + kIrqOffset] = isr;
   12c34:	f99d 300f 	ldrsb.w	r3, [sp, #15]
   12c38:	3310      	adds	r3, #16
   12c3a:	490f      	ldr	r1, [pc, #60]	; (12c78 <RegisterIsr(IRQn, void (*)(), bool, long)+0x58>)
   12c3c:	9a02      	ldr	r2, [sp, #8]
   12c3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  if (enable_interrupt && irq >= 0)
   12c42:	f89d 300e 	ldrb.w	r3, [sp, #14]
   12c46:	2b00      	cmp	r3, #0
   12c48:	d008      	beq.n	12c5c <RegisterIsr(IRQn, void (*)(), bool, long)+0x3c>
   12c4a:	f99d 300f 	ldrsb.w	r3, [sp, #15]
   12c4e:	2b00      	cmp	r3, #0
   12c50:	db04      	blt.n	12c5c <RegisterIsr(IRQn, void (*)(), bool, long)+0x3c>
    NVIC_EnableIRQ(irq);
   12c52:	f99d 300f 	ldrsb.w	r3, [sp, #15]
   12c56:	4618      	mov	r0, r3
   12c58:	f7ff ff6c 	bl	12b34 <NVIC_EnableIRQ>
  if (priority > -1)
   12c5c:	9b01      	ldr	r3, [sp, #4]
   12c5e:	2b00      	cmp	r3, #0
   12c60:	db06      	blt.n	12c70 <RegisterIsr(IRQn, void (*)(), bool, long)+0x50>
    NVIC_SetPriority(irq, priority);
   12c62:	9a01      	ldr	r2, [sp, #4]
   12c64:	f99d 300f 	ldrsb.w	r3, [sp, #15]
   12c68:	4611      	mov	r1, r2
   12c6a:	4618      	mov	r0, r3
   12c6c:	f7ff ff78 	bl	12b60 <NVIC_SetPriority>
}
   12c70:	bf00      	nop
   12c72:	b005      	add	sp, #20
   12c74:	f85d fb04 	ldr.w	pc, [sp], #4
   12c78:	100000c4 	.word	0x100000c4

00012c7c <GetRegistersFromStack>:
{
   12c7c:	b500      	push	{lr}
   12c7e:	b08d      	sub	sp, #52	; 0x34
   12c80:	9003      	str	r0, [sp, #12]
  volatile uint32_t r0  = fault_stack_address[0];
   12c82:	9b03      	ldr	r3, [sp, #12]
   12c84:	681b      	ldr	r3, [r3, #0]
   12c86:	930b      	str	r3, [sp, #44]	; 0x2c
  volatile uint32_t r1  = fault_stack_address[1];
   12c88:	9b03      	ldr	r3, [sp, #12]
   12c8a:	685b      	ldr	r3, [r3, #4]
   12c8c:	930a      	str	r3, [sp, #40]	; 0x28
  volatile uint32_t r2  = fault_stack_address[2];
   12c8e:	9b03      	ldr	r3, [sp, #12]
   12c90:	689b      	ldr	r3, [r3, #8]
   12c92:	9309      	str	r3, [sp, #36]	; 0x24
  volatile uint32_t r3  = fault_stack_address[3];
   12c94:	9b03      	ldr	r3, [sp, #12]
   12c96:	68db      	ldr	r3, [r3, #12]
   12c98:	9308      	str	r3, [sp, #32]
  volatile uint32_t r12 = fault_stack_address[4];
   12c9a:	9b03      	ldr	r3, [sp, #12]
   12c9c:	691b      	ldr	r3, [r3, #16]
   12c9e:	9307      	str	r3, [sp, #28]
  volatile uint32_t lr = fault_stack_address[5];
   12ca0:	9b03      	ldr	r3, [sp, #12]
   12ca2:	695b      	ldr	r3, [r3, #20]
   12ca4:	9306      	str	r3, [sp, #24]
  volatile uint32_t pc = fault_stack_address[6];
   12ca6:	9b03      	ldr	r3, [sp, #12]
   12ca8:	699b      	ldr	r3, [r3, #24]
   12caa:	9305      	str	r3, [sp, #20]
  volatile uint32_t psr = fault_stack_address[7];
   12cac:	9b03      	ldr	r3, [sp, #12]
   12cae:	69db      	ldr	r3, [r3, #28]
   12cb0:	9304      	str	r3, [sp, #16]
  printf(SJ2_BACKGROUND_RED "Hard Fault Exception Occurred!\n" SJ2_COLOR_RESET);
   12cb2:	480d      	ldr	r0, [pc, #52]	; (12ce8 <GetRegistersFromStack+0x6c>)
   12cb4:	f001 fb36 	bl	14324 <printf>
  printf("r0: 0x%08" PRIX32 ", r1: 0x%08" PRIX32
   12cb8:	990b      	ldr	r1, [sp, #44]	; 0x2c
   12cba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   12cbc:	9809      	ldr	r0, [sp, #36]	; 0x24
   12cbe:	9b08      	ldr	r3, [sp, #32]
   12cc0:	9300      	str	r3, [sp, #0]
   12cc2:	4603      	mov	r3, r0
   12cc4:	4809      	ldr	r0, [pc, #36]	; (12cec <GetRegistersFromStack+0x70>)
   12cc6:	f001 fb2d 	bl	14324 <printf>
  printf("r12: 0x%08" PRIX32 ", lr: 0x%08" PRIX32
   12cca:	9907      	ldr	r1, [sp, #28]
   12ccc:	9a06      	ldr	r2, [sp, #24]
   12cce:	9805      	ldr	r0, [sp, #20]
   12cd0:	9b04      	ldr	r3, [sp, #16]
   12cd2:	9300      	str	r3, [sp, #0]
   12cd4:	4603      	mov	r3, r0
   12cd6:	4806      	ldr	r0, [pc, #24]	; (12cf0 <GetRegistersFromStack+0x74>)
   12cd8:	f001 fb24 	bl	14324 <printf>
  debug::PrintBacktrace(true, reinterpret_cast<void *>(pc));
   12cdc:	9b05      	ldr	r3, [sp, #20]
   12cde:	4619      	mov	r1, r3
   12ce0:	2001      	movs	r0, #1
   12ce2:	f7fd fe9f 	bl	10a24 <debug::PrintBacktrace(bool, void*)>
   12ce6:	e7fe      	b.n	12ce6 <GetRegistersFromStack+0x6a>
   12ce8:	00017c34 	.word	0x00017c34
   12cec:	00017c60 	.word	0x00017c60
   12cf0:	00017c94 	.word	0x00017c94

00012cf4 <FirmwareStdOut(int)>:
}
Stdout out = HostWrite;
Stdin in   = HostRead;
#else
int FirmwareStdOut(int data)
{
   12cf4:	b530      	push	{r4, r5, lr}
   12cf6:	b083      	sub	sp, #12
   12cf8:	4675      	mov	r5, lr
   12cfa:	9001      	str	r0, [sp, #4]
   12cfc:	462b      	mov	r3, r5
   12cfe:	4619      	mov	r1, r3
   12d00:	4809      	ldr	r0, [pc, #36]	; (12d28 <FirmwareStdOut(int)+0x34>)
   12d02:	f000 f8b5 	bl	12e70 <__cyg_profile_func_enter>
  uart0.Send(static_cast<uint8_t>(data));
   12d06:	9b01      	ldr	r3, [sp, #4]
   12d08:	b2db      	uxtb	r3, r3
   12d0a:	4619      	mov	r1, r3
   12d0c:	4807      	ldr	r0, [pc, #28]	; (12d2c <FirmwareStdOut(int)+0x38>)
   12d0e:	f7ff f835 	bl	11d7c <Uart::Send(unsigned char)>
  return 1;
   12d12:	2401      	movs	r4, #1
   12d14:	462b      	mov	r3, r5
   12d16:	4619      	mov	r1, r3
   12d18:	4803      	ldr	r0, [pc, #12]	; (12d28 <FirmwareStdOut(int)+0x34>)
   12d1a:	f000 f8bd 	bl	12e98 <__cyg_profile_func_exit>
   12d1e:	4623      	mov	r3, r4
}
   12d20:	4618      	mov	r0, r3
   12d22:	b003      	add	sp, #12
   12d24:	bd30      	pop	{r4, r5, pc}
   12d26:	bf00      	nop
   12d28:	00012cf5 	.word	0x00012cf5
   12d2c:	10000098 	.word	0x10000098

00012d30 <_exit>:
  }
  // Dummy implementation of exit with return code placed into
  // Arm register r3
  // NOLINTNEXTLINE(readability-identifier-naming)
  void _exit([[maybe_unused]] int rc)
  {
   12d30:	b500      	push	{lr}
   12d32:	b083      	sub	sp, #12
   12d34:	4673      	mov	r3, lr
   12d36:	9001      	str	r0, [sp, #4]
   12d38:	4619      	mov	r1, r3
   12d3a:	4802      	ldr	r0, [pc, #8]	; (12d44 <_exit+0x14>)
   12d3c:	f000 f898 	bl	12e70 <__cyg_profile_func_enter>
    while (1)
    {
      continue;
   12d40:	bf00      	nop
    while (1)
   12d42:	e7fd      	b.n	12d40 <_exit+0x10>
   12d44:	00012d31 	.word	0x00012d31

00012d48 <_getpid>:
    }
  }
  // Dummy implementation of getpid
  // NOLINTNEXTLINE(readability-identifier-naming)
  int _getpid()
  {
   12d48:	b538      	push	{r3, r4, r5, lr}
   12d4a:	4675      	mov	r5, lr
   12d4c:	462b      	mov	r3, r5
   12d4e:	4619      	mov	r1, r3
   12d50:	4805      	ldr	r0, [pc, #20]	; (12d68 <_getpid+0x20>)
   12d52:	f000 f88d 	bl	12e70 <__cyg_profile_func_enter>
    return 1;
   12d56:	2401      	movs	r4, #1
   12d58:	462b      	mov	r3, r5
   12d5a:	4619      	mov	r1, r3
   12d5c:	4802      	ldr	r0, [pc, #8]	; (12d68 <_getpid+0x20>)
   12d5e:	f000 f89b 	bl	12e98 <__cyg_profile_func_exit>
   12d62:	4623      	mov	r3, r4
  }
   12d64:	4618      	mov	r0, r3
   12d66:	bd38      	pop	{r3, r4, r5, pc}
   12d68:	00012d49 	.word	0x00012d49

00012d6c <_kill>:
  // Dummy implementation of kill
  // NOLINTNEXTLINE(readability-identifier-naming)
  int _kill(int, int)
  {
   12d6c:	b530      	push	{r4, r5, lr}
   12d6e:	b083      	sub	sp, #12
   12d70:	4675      	mov	r5, lr
   12d72:	9001      	str	r0, [sp, #4]
   12d74:	9100      	str	r1, [sp, #0]
   12d76:	462b      	mov	r3, r5
   12d78:	4619      	mov	r1, r3
   12d7a:	4807      	ldr	r0, [pc, #28]	; (12d98 <_kill+0x2c>)
   12d7c:	f000 f878 	bl	12e70 <__cyg_profile_func_enter>
    return -1;
   12d80:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   12d84:	462b      	mov	r3, r5
   12d86:	4619      	mov	r1, r3
   12d88:	4803      	ldr	r0, [pc, #12]	; (12d98 <_kill+0x2c>)
   12d8a:	f000 f885 	bl	12e98 <__cyg_profile_func_exit>
   12d8e:	4623      	mov	r3, r4
  }
   12d90:	4618      	mov	r0, r3
   12d92:	b003      	add	sp, #12
   12d94:	bd30      	pop	{r4, r5, pc}
   12d96:	bf00      	nop
   12d98:	00012d6d 	.word	0x00012d6d

00012d9c <_putchar>:
    }
    return length;
  }
  // Needed by third party printf library
  void _putchar(char character)  // NOLINT
  {
   12d9c:	b510      	push	{r4, lr}
   12d9e:	b082      	sub	sp, #8
   12da0:	4674      	mov	r4, lr
   12da2:	4603      	mov	r3, r0
   12da4:	f88d 3007 	strb.w	r3, [sp, #7]
   12da8:	4623      	mov	r3, r4
   12daa:	4619      	mov	r1, r3
   12dac:	4808      	ldr	r0, [pc, #32]	; (12dd0 <_putchar+0x34>)
   12dae:	f000 f85f 	bl	12e70 <__cyg_profile_func_enter>
    out(character);
   12db2:	4b08      	ldr	r3, [pc, #32]	; (12dd4 <_putchar+0x38>)
   12db4:	681b      	ldr	r3, [r3, #0]
   12db6:	f89d 2007 	ldrb.w	r2, [sp, #7]
   12dba:	4610      	mov	r0, r2
   12dbc:	4798      	blx	r3
   12dbe:	4623      	mov	r3, r4
   12dc0:	4619      	mov	r1, r3
   12dc2:	4803      	ldr	r0, [pc, #12]	; (12dd0 <_putchar+0x34>)
   12dc4:	f000 f868 	bl	12e98 <__cyg_profile_func_exit>
  }
   12dc8:	bf00      	nop
   12dca:	b002      	add	sp, #8
   12dcc:	bd10      	pop	{r4, pc}
   12dce:	bf00      	nop
   12dd0:	00012d9d 	.word	0x00012d9d
   12dd4:	100001a8 	.word	0x100001a8

00012dd8 <putchar>:

  // Overload default libnano putchar() with a more optimal version that does
  // not use dynamic memory
  int putchar(int character)  // NOLINT
  {
   12dd8:	b530      	push	{r4, r5, lr}
   12dda:	b083      	sub	sp, #12
   12ddc:	4674      	mov	r4, lr
   12dde:	9001      	str	r0, [sp, #4]
   12de0:	4623      	mov	r3, r4
   12de2:	4619      	mov	r1, r3
   12de4:	4808      	ldr	r0, [pc, #32]	; (12e08 <putchar+0x30>)
   12de6:	f000 f843 	bl	12e70 <__cyg_profile_func_enter>
    return out(character);
   12dea:	4b08      	ldr	r3, [pc, #32]	; (12e0c <putchar+0x34>)
   12dec:	681b      	ldr	r3, [r3, #0]
   12dee:	9801      	ldr	r0, [sp, #4]
   12df0:	4798      	blx	r3
   12df2:	4605      	mov	r5, r0
   12df4:	4623      	mov	r3, r4
   12df6:	4619      	mov	r1, r3
   12df8:	4803      	ldr	r0, [pc, #12]	; (12e08 <putchar+0x30>)
   12dfa:	f000 f84d 	bl	12e98 <__cyg_profile_func_exit>
   12dfe:	462b      	mov	r3, r5
  }
   12e00:	4618      	mov	r0, r3
   12e02:	b003      	add	sp, #12
   12e04:	bd30      	pop	{r4, r5, pc}
   12e06:	bf00      	nop
   12e08:	00012dd9 	.word	0x00012dd9
   12e0c:	100001a8 	.word	0x100001a8

00012e10 <puts>:

  // Overload default libnano puts() with a more optimal version that does
  // not use dynamic memory
  int puts(const char * str)  // NOLINT
  {
   12e10:	b530      	push	{r4, r5, lr}
   12e12:	b085      	sub	sp, #20
   12e14:	4675      	mov	r5, lr
   12e16:	9001      	str	r0, [sp, #4]
   12e18:	462b      	mov	r3, r5
   12e1a:	4619      	mov	r1, r3
   12e1c:	4812      	ldr	r0, [pc, #72]	; (12e68 <puts+0x58>)
   12e1e:	f000 f827 	bl	12e70 <__cyg_profile_func_enter>
    int i;
    for (i = 0; str[i] != '\0'; i++)
   12e22:	2300      	movs	r3, #0
   12e24:	9303      	str	r3, [sp, #12]
   12e26:	9b03      	ldr	r3, [sp, #12]
   12e28:	9a01      	ldr	r2, [sp, #4]
   12e2a:	4413      	add	r3, r2
   12e2c:	781b      	ldrb	r3, [r3, #0]
   12e2e:	2b00      	cmp	r3, #0
   12e30:	d00b      	beq.n	12e4a <puts+0x3a>
    {
      out(str[i]);
   12e32:	4b0e      	ldr	r3, [pc, #56]	; (12e6c <puts+0x5c>)
   12e34:	681b      	ldr	r3, [r3, #0]
   12e36:	9a03      	ldr	r2, [sp, #12]
   12e38:	9901      	ldr	r1, [sp, #4]
   12e3a:	440a      	add	r2, r1
   12e3c:	7812      	ldrb	r2, [r2, #0]
   12e3e:	4610      	mov	r0, r2
   12e40:	4798      	blx	r3
    for (i = 0; str[i] != '\0'; i++)
   12e42:	9b03      	ldr	r3, [sp, #12]
   12e44:	3301      	adds	r3, #1
   12e46:	9303      	str	r3, [sp, #12]
   12e48:	e7ed      	b.n	12e26 <puts+0x16>
    }
    out('\n');
   12e4a:	4b08      	ldr	r3, [pc, #32]	; (12e6c <puts+0x5c>)
   12e4c:	681b      	ldr	r3, [r3, #0]
   12e4e:	200a      	movs	r0, #10
   12e50:	4798      	blx	r3
    return i;
   12e52:	9c03      	ldr	r4, [sp, #12]
   12e54:	462b      	mov	r3, r5
   12e56:	4619      	mov	r1, r3
   12e58:	4803      	ldr	r0, [pc, #12]	; (12e68 <puts+0x58>)
   12e5a:	f000 f81d 	bl	12e98 <__cyg_profile_func_exit>
   12e5e:	4623      	mov	r3, r4
  }
   12e60:	4618      	mov	r0, r3
   12e62:	b005      	add	sp, #20
   12e64:	bd30      	pop	{r4, r5, pc}
   12e66:	bf00      	nop
   12e68:	00012e11 	.word	0x00012e11
   12e6c:	100001a8 	.word	0x100001a8

00012e70 <__cyg_profile_func_enter>:
  // =============================
  void * stack_trace[config::kBacktraceDepth] = { nullptr };
  size_t stack_depth = 0;

  void __cyg_profile_func_enter(void *, void * call_site)  // NOLINT
  {
   12e70:	b082      	sub	sp, #8
   12e72:	9001      	str	r0, [sp, #4]
   12e74:	9100      	str	r1, [sp, #0]
    stack_trace[stack_depth++] = call_site;
   12e76:	9a00      	ldr	r2, [sp, #0]
   12e78:	4b05      	ldr	r3, [pc, #20]	; (12e90 <__cyg_profile_func_enter+0x20>)
   12e7a:	681b      	ldr	r3, [r3, #0]
   12e7c:	1c59      	adds	r1, r3, #1
   12e7e:	4804      	ldr	r0, [pc, #16]	; (12e90 <__cyg_profile_func_enter+0x20>)
   12e80:	6001      	str	r1, [r0, #0]
   12e82:	4904      	ldr	r1, [pc, #16]	; (12e94 <__cyg_profile_func_enter+0x24>)
   12e84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
   12e88:	bf00      	nop
   12e8a:	b002      	add	sp, #8
   12e8c:	4770      	bx	lr
   12e8e:	bf00      	nop
   12e90:	100004c0 	.word	0x100004c0
   12e94:	100003c0 	.word	0x100003c0

00012e98 <__cyg_profile_func_exit>:

  void __cyg_profile_func_exit(void *, void *)  // NOLINT
  {
   12e98:	b082      	sub	sp, #8
   12e9a:	9001      	str	r0, [sp, #4]
   12e9c:	9100      	str	r1, [sp, #0]
    stack_depth--;
   12e9e:	4b04      	ldr	r3, [pc, #16]	; (12eb0 <__cyg_profile_func_exit+0x18>)
   12ea0:	681b      	ldr	r3, [r3, #0]
   12ea2:	3b01      	subs	r3, #1
   12ea4:	4a02      	ldr	r2, [pc, #8]	; (12eb0 <__cyg_profile_func_exit+0x18>)
   12ea6:	6013      	str	r3, [r2, #0]
  }
   12ea8:	bf00      	nop
   12eaa:	b002      	add	sp, #8
   12eac:	4770      	bx	lr
   12eae:	bf00      	nop
   12eb0:	100004c0 	.word	0x100004c0

00012eb4 <GetStackTrace()>:
}

void ** GetStackTrace()
{
   12eb4:	b538      	push	{r3, r4, r5, lr}
   12eb6:	4675      	mov	r5, lr
   12eb8:	462b      	mov	r3, r5
   12eba:	4619      	mov	r1, r3
   12ebc:	4805      	ldr	r0, [pc, #20]	; (12ed4 <GetStackTrace()+0x20>)
   12ebe:	f7ff ffd7 	bl	12e70 <__cyg_profile_func_enter>
  return stack_trace;
   12ec2:	4c05      	ldr	r4, [pc, #20]	; (12ed8 <GetStackTrace()+0x24>)
   12ec4:	462b      	mov	r3, r5
   12ec6:	4619      	mov	r1, r3
   12ec8:	4802      	ldr	r0, [pc, #8]	; (12ed4 <GetStackTrace()+0x20>)
   12eca:	f7ff ffe5 	bl	12e98 <__cyg_profile_func_exit>
   12ece:	4623      	mov	r3, r4
}
   12ed0:	4618      	mov	r0, r3
   12ed2:	bd38      	pop	{r3, r4, r5, pc}
   12ed4:	00012eb5 	.word	0x00012eb5
   12ed8:	100003c0 	.word	0x100003c0

00012edc <GetStackDepth()>:

size_t GetStackDepth()
{
   12edc:	b538      	push	{r3, r4, r5, lr}
   12ede:	4675      	mov	r5, lr
   12ee0:	462b      	mov	r3, r5
   12ee2:	4619      	mov	r1, r3
   12ee4:	4806      	ldr	r0, [pc, #24]	; (12f00 <GetStackDepth()+0x24>)
   12ee6:	f7ff ffc3 	bl	12e70 <__cyg_profile_func_enter>
  return stack_depth;
   12eea:	4b06      	ldr	r3, [pc, #24]	; (12f04 <GetStackDepth()+0x28>)
   12eec:	681c      	ldr	r4, [r3, #0]
   12eee:	462b      	mov	r3, r5
   12ef0:	4619      	mov	r1, r3
   12ef2:	4803      	ldr	r0, [pc, #12]	; (12f00 <GetStackDepth()+0x24>)
   12ef4:	f7ff ffd0 	bl	12e98 <__cyg_profile_func_exit>
   12ef8:	4623      	mov	r3, r4
}
   12efa:	4618      	mov	r0, r3
   12efc:	bd38      	pop	{r3, r4, r5, pc}
   12efe:	bf00      	nop
   12f00:	00012edd 	.word	0x00012edd
   12f04:	100004c0 	.word	0x100004c0

00012f08 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
   12f08:	b510      	push	{r4, lr}
   12f0a:	b084      	sub	sp, #16
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
   12f0c:	4b29      	ldr	r3, [pc, #164]	; (12fb4 <vTaskSwitchContext+0xac>)
   12f0e:	681b      	ldr	r3, [r3, #0]
   12f10:	2b00      	cmp	r3, #0
   12f12:	d003      	beq.n	12f1c <vTaskSwitchContext+0x14>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
   12f14:	4b28      	ldr	r3, [pc, #160]	; (12fb8 <vTaskSwitchContext+0xb0>)
   12f16:	2201      	movs	r2, #1
   12f18:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
   12f1a:	e047      	b.n	12fac <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
   12f1c:	4b26      	ldr	r3, [pc, #152]	; (12fb8 <vTaskSwitchContext+0xb0>)
   12f1e:	2200      	movs	r2, #0
   12f20:	601a      	str	r2, [r3, #0]
					ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
   12f22:	f7ff fa8d 	bl	12440 <UptimeRTOS>
   12f26:	4603      	mov	r3, r0
   12f28:	460c      	mov	r4, r1
   12f2a:	461a      	mov	r2, r3
   12f2c:	4b23      	ldr	r3, [pc, #140]	; (12fbc <vTaskSwitchContext+0xb4>)
   12f2e:	601a      	str	r2, [r3, #0]
				if( ulTotalRunTime > ulTaskSwitchedInTime )
   12f30:	4b22      	ldr	r3, [pc, #136]	; (12fbc <vTaskSwitchContext+0xb4>)
   12f32:	681a      	ldr	r2, [r3, #0]
   12f34:	4b22      	ldr	r3, [pc, #136]	; (12fc0 <vTaskSwitchContext+0xb8>)
   12f36:	681b      	ldr	r3, [r3, #0]
   12f38:	429a      	cmp	r2, r3
   12f3a:	d909      	bls.n	12f50 <vTaskSwitchContext+0x48>
					pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
   12f3c:	4b21      	ldr	r3, [pc, #132]	; (12fc4 <vTaskSwitchContext+0xbc>)
   12f3e:	681b      	ldr	r3, [r3, #0]
   12f40:	6d59      	ldr	r1, [r3, #84]	; 0x54
   12f42:	4a1e      	ldr	r2, [pc, #120]	; (12fbc <vTaskSwitchContext+0xb4>)
   12f44:	6810      	ldr	r0, [r2, #0]
   12f46:	4a1e      	ldr	r2, [pc, #120]	; (12fc0 <vTaskSwitchContext+0xb8>)
   12f48:	6812      	ldr	r2, [r2, #0]
   12f4a:	1a82      	subs	r2, r0, r2
   12f4c:	440a      	add	r2, r1
   12f4e:	655a      	str	r2, [r3, #84]	; 0x54
				ulTaskSwitchedInTime = ulTotalRunTime;
   12f50:	4b1a      	ldr	r3, [pc, #104]	; (12fbc <vTaskSwitchContext+0xb4>)
   12f52:	681b      	ldr	r3, [r3, #0]
   12f54:	4a1a      	ldr	r2, [pc, #104]	; (12fc0 <vTaskSwitchContext+0xb8>)
   12f56:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
   12f58:	4b1b      	ldr	r3, [pc, #108]	; (12fc8 <vTaskSwitchContext+0xc0>)
   12f5a:	681b      	ldr	r3, [r3, #0]
   12f5c:	9301      	str	r3, [sp, #4]
	/* Generic helper function. */
	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitmap )
	{
	uint8_t ucReturn;

		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
   12f5e:	9b01      	ldr	r3, [sp, #4]
   12f60:	fab3 f383 	clz	r3, r3
   12f64:	f88d 3003 	strb.w	r3, [sp, #3]
		return ucReturn;
   12f68:	f89d 3003 	ldrb.w	r3, [sp, #3]
   12f6c:	f1c3 031f 	rsb	r3, r3, #31
   12f70:	9303      	str	r3, [sp, #12]
   12f72:	9a03      	ldr	r2, [sp, #12]
   12f74:	4613      	mov	r3, r2
   12f76:	009b      	lsls	r3, r3, #2
   12f78:	4413      	add	r3, r2
   12f7a:	009b      	lsls	r3, r3, #2
   12f7c:	4a13      	ldr	r2, [pc, #76]	; (12fcc <vTaskSwitchContext+0xc4>)
   12f7e:	4413      	add	r3, r2
   12f80:	9302      	str	r3, [sp, #8]
   12f82:	9b02      	ldr	r3, [sp, #8]
   12f84:	685b      	ldr	r3, [r3, #4]
   12f86:	685a      	ldr	r2, [r3, #4]
   12f88:	9b02      	ldr	r3, [sp, #8]
   12f8a:	605a      	str	r2, [r3, #4]
   12f8c:	9b02      	ldr	r3, [sp, #8]
   12f8e:	685a      	ldr	r2, [r3, #4]
   12f90:	9b02      	ldr	r3, [sp, #8]
   12f92:	3308      	adds	r3, #8
   12f94:	429a      	cmp	r2, r3
   12f96:	d104      	bne.n	12fa2 <vTaskSwitchContext+0x9a>
   12f98:	9b02      	ldr	r3, [sp, #8]
   12f9a:	685b      	ldr	r3, [r3, #4]
   12f9c:	685a      	ldr	r2, [r3, #4]
   12f9e:	9b02      	ldr	r3, [sp, #8]
   12fa0:	605a      	str	r2, [r3, #4]
   12fa2:	9b02      	ldr	r3, [sp, #8]
   12fa4:	685b      	ldr	r3, [r3, #4]
   12fa6:	68db      	ldr	r3, [r3, #12]
   12fa8:	4a06      	ldr	r2, [pc, #24]	; (12fc4 <vTaskSwitchContext+0xbc>)
   12faa:	6013      	str	r3, [r2, #0]
}
   12fac:	bf00      	nop
   12fae:	b004      	add	sp, #16
   12fb0:	bd10      	pop	{r4, pc}
   12fb2:	bf00      	nop
   12fb4:	10000534 	.word	0x10000534
   12fb8:	10000530 	.word	0x10000530
   12fbc:	1000053c 	.word	0x1000053c
   12fc0:	10000538 	.word	0x10000538
   12fc4:	100004c4 	.word	0x100004c4
   12fc8:	1000052c 	.word	0x1000052c
   12fcc:	100004c8 	.word	0x100004c8

00012fd0 <vPortSVCHandler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
   12fd0:	4b07      	ldr	r3, [pc, #28]	; (12ff0 <pxCurrentTCBConst2>)
   12fd2:	6819      	ldr	r1, [r3, #0]
   12fd4:	6808      	ldr	r0, [r1, #0]
   12fd6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12fda:	f380 8809 	msr	PSP, r0
   12fde:	f3bf 8f6f 	isb	sy
   12fe2:	f04f 0000 	mov.w	r0, #0
   12fe6:	f380 8811 	msr	BASEPRI, r0
   12fea:	4770      	bx	lr
   12fec:	f3af 8000 	nop.w

00012ff0 <pxCurrentTCBConst2>:
   12ff0:	100004c4 	.word	0x100004c4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
   12ff4:	bf00      	nop
   12ff6:	bf00      	nop
   12ff8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   12ffc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

00013000 <xPortPendSVHandler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
   13000:	f3ef 8009 	mrs	r0, PSP
   13004:	f3bf 8f6f 	isb	sy
   13008:	4b15      	ldr	r3, [pc, #84]	; (13060 <pxCurrentTCBConst>)
   1300a:	681a      	ldr	r2, [r3, #0]
   1300c:	f01e 0f10 	tst.w	lr, #16
   13010:	bf08      	it	eq
   13012:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
   13016:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1301a:	6010      	str	r0, [r2, #0]
   1301c:	e92d 0009 	stmdb	sp!, {r0, r3}
   13020:	f04f 0028 	mov.w	r0, #40	; 0x28
   13024:	f380 8811 	msr	BASEPRI, r0
   13028:	f3bf 8f4f 	dsb	sy
   1302c:	f3bf 8f6f 	isb	sy
   13030:	f7ff ff6a 	bl	12f08 <vTaskSwitchContext>
   13034:	f04f 0000 	mov.w	r0, #0
   13038:	f380 8811 	msr	BASEPRI, r0
   1303c:	bc09      	pop	{r0, r3}
   1303e:	6819      	ldr	r1, [r3, #0]
   13040:	6808      	ldr	r0, [r1, #0]
   13042:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13046:	f01e 0f10 	tst.w	lr, #16
   1304a:	bf08      	it	eq
   1304c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
   13050:	f380 8809 	msr	PSP, r0
   13054:	f3bf 8f6f 	isb	sy
   13058:	4770      	bx	lr
   1305a:	bf00      	nop
   1305c:	f3af 8000 	nop.w

00013060 <pxCurrentTCBConst>:
   13060:	100004c4 	.word	0x100004c4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
   13064:	bf00      	nop
   13066:	bf00      	nop

00013068 <_out_null(char, void*, unsigned int, unsigned int)>:
}


// internal null output
static inline void _out_null(char character, void* buffer, size_t idx, size_t maxlen)
{
   13068:	b510      	push	{r4, lr}
   1306a:	b084      	sub	sp, #16
   1306c:	4674      	mov	r4, lr
   1306e:	9102      	str	r1, [sp, #8]
   13070:	9201      	str	r2, [sp, #4]
   13072:	9300      	str	r3, [sp, #0]
   13074:	4603      	mov	r3, r0
   13076:	f88d 300f 	strb.w	r3, [sp, #15]
   1307a:	4623      	mov	r3, r4
   1307c:	4619      	mov	r1, r3
   1307e:	4805      	ldr	r0, [pc, #20]	; (13094 <_out_null(char, void*, unsigned int, unsigned int)+0x2c>)
   13080:	f7ff fef6 	bl	12e70 <__cyg_profile_func_enter>
   13084:	4623      	mov	r3, r4
   13086:	4619      	mov	r1, r3
   13088:	4802      	ldr	r0, [pc, #8]	; (13094 <_out_null(char, void*, unsigned int, unsigned int)+0x2c>)
   1308a:	f7ff ff05 	bl	12e98 <__cyg_profile_func_exit>
  (void)character; (void)buffer; (void)idx; (void)maxlen;
}
   1308e:	bf00      	nop
   13090:	b004      	add	sp, #16
   13092:	bd10      	pop	{r4, pc}
   13094:	00013069 	.word	0x00013069

00013098 <_out_char(char, void*, unsigned int, unsigned int)>:


// internal _putchar wrapper
static inline void _out_char(char character, void* buffer, size_t idx, size_t maxlen)
{
   13098:	b510      	push	{r4, lr}
   1309a:	b084      	sub	sp, #16
   1309c:	4674      	mov	r4, lr
   1309e:	9102      	str	r1, [sp, #8]
   130a0:	9201      	str	r2, [sp, #4]
   130a2:	9300      	str	r3, [sp, #0]
   130a4:	4603      	mov	r3, r0
   130a6:	f88d 300f 	strb.w	r3, [sp, #15]
   130aa:	4623      	mov	r3, r4
   130ac:	4619      	mov	r1, r3
   130ae:	480a      	ldr	r0, [pc, #40]	; (130d8 <_out_char(char, void*, unsigned int, unsigned int)+0x40>)
   130b0:	f7ff fede 	bl	12e70 <__cyg_profile_func_enter>
  (void)buffer; (void)idx; (void)maxlen;
  if (character) {
   130b4:	f89d 300f 	ldrb.w	r3, [sp, #15]
   130b8:	2b00      	cmp	r3, #0
   130ba:	d004      	beq.n	130c6 <_out_char(char, void*, unsigned int, unsigned int)+0x2e>
    _putchar(character);
   130bc:	f89d 300f 	ldrb.w	r3, [sp, #15]
   130c0:	4618      	mov	r0, r3
   130c2:	f7ff fe6b 	bl	12d9c <_putchar>
   130c6:	4623      	mov	r3, r4
   130c8:	4619      	mov	r1, r3
   130ca:	4803      	ldr	r0, [pc, #12]	; (130d8 <_out_char(char, void*, unsigned int, unsigned int)+0x40>)
   130cc:	f7ff fee4 	bl	12e98 <__cyg_profile_func_exit>
  }
}
   130d0:	bf00      	nop
   130d2:	b004      	add	sp, #16
   130d4:	bd10      	pop	{r4, pc}
   130d6:	bf00      	nop
   130d8:	00013099 	.word	0x00013099

000130dc <_strlen(char const*)>:


// internal strlen
// \return The length of the string (excluding the terminating 0)
static inline unsigned int _strlen(const char* str)
{
   130dc:	b530      	push	{r4, r5, lr}
   130de:	b085      	sub	sp, #20
   130e0:	4674      	mov	r4, lr
   130e2:	9001      	str	r0, [sp, #4]
   130e4:	4623      	mov	r3, r4
   130e6:	4619      	mov	r1, r3
   130e8:	480c      	ldr	r0, [pc, #48]	; (1311c <_strlen(char const*)+0x40>)
   130ea:	f7ff fec1 	bl	12e70 <__cyg_profile_func_enter>
  const char* s;
  for (s = str; *s; ++s);
   130ee:	9b01      	ldr	r3, [sp, #4]
   130f0:	9303      	str	r3, [sp, #12]
   130f2:	9b03      	ldr	r3, [sp, #12]
   130f4:	781b      	ldrb	r3, [r3, #0]
   130f6:	2b00      	cmp	r3, #0
   130f8:	d003      	beq.n	13102 <_strlen(char const*)+0x26>
   130fa:	9b03      	ldr	r3, [sp, #12]
   130fc:	3301      	adds	r3, #1
   130fe:	9303      	str	r3, [sp, #12]
   13100:	e7f7      	b.n	130f2 <_strlen(char const*)+0x16>
  return (unsigned int)(s - str);
   13102:	9a03      	ldr	r2, [sp, #12]
   13104:	9b01      	ldr	r3, [sp, #4]
   13106:	1ad3      	subs	r3, r2, r3
   13108:	461d      	mov	r5, r3
   1310a:	4623      	mov	r3, r4
   1310c:	4619      	mov	r1, r3
   1310e:	4803      	ldr	r0, [pc, #12]	; (1311c <_strlen(char const*)+0x40>)
   13110:	f7ff fec2 	bl	12e98 <__cyg_profile_func_exit>
   13114:	462b      	mov	r3, r5
}
   13116:	4618      	mov	r0, r3
   13118:	b005      	add	sp, #20
   1311a:	bd30      	pop	{r4, r5, pc}
   1311c:	000130dd 	.word	0x000130dd

00013120 <_is_digit(char)>:


// internal test if char is a digit (0-9)
// \return true if char is a digit
static inline bool _is_digit(char ch)
{
   13120:	b530      	push	{r4, r5, lr}
   13122:	b083      	sub	sp, #12
   13124:	4675      	mov	r5, lr
   13126:	4603      	mov	r3, r0
   13128:	f88d 3007 	strb.w	r3, [sp, #7]
   1312c:	462b      	mov	r3, r5
   1312e:	4619      	mov	r1, r3
   13130:	480b      	ldr	r0, [pc, #44]	; (13160 <_is_digit(char)+0x40>)
   13132:	f7ff fe9d 	bl	12e70 <__cyg_profile_func_enter>
  return (ch >= '0') && (ch <= '9');
   13136:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1313a:	2b2f      	cmp	r3, #47	; 0x2f
   1313c:	d905      	bls.n	1314a <_is_digit(char)+0x2a>
   1313e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   13142:	2b39      	cmp	r3, #57	; 0x39
   13144:	d801      	bhi.n	1314a <_is_digit(char)+0x2a>
   13146:	2401      	movs	r4, #1
   13148:	e000      	b.n	1314c <_is_digit(char)+0x2c>
   1314a:	2400      	movs	r4, #0
   1314c:	462b      	mov	r3, r5
   1314e:	4619      	mov	r1, r3
   13150:	4803      	ldr	r0, [pc, #12]	; (13160 <_is_digit(char)+0x40>)
   13152:	f7ff fea1 	bl	12e98 <__cyg_profile_func_exit>
   13156:	4623      	mov	r3, r4
}
   13158:	4618      	mov	r0, r3
   1315a:	b003      	add	sp, #12
   1315c:	bd30      	pop	{r4, r5, pc}
   1315e:	bf00      	nop
   13160:	00013121 	.word	0x00013121

00013164 <_atoi(char const**)>:


// internal ASCII string to unsigned int conversion
static unsigned int _atoi(const char** str)
{
   13164:	b530      	push	{r4, r5, lr}
   13166:	b085      	sub	sp, #20
   13168:	4675      	mov	r5, lr
   1316a:	9001      	str	r0, [sp, #4]
   1316c:	462b      	mov	r3, r5
   1316e:	4619      	mov	r1, r3
   13170:	4813      	ldr	r0, [pc, #76]	; (131c0 <_atoi(char const**)+0x5c>)
   13172:	f7ff fe7d 	bl	12e70 <__cyg_profile_func_enter>
  unsigned int i = 0U;
   13176:	2300      	movs	r3, #0
   13178:	9303      	str	r3, [sp, #12]
  while (_is_digit(**str)) {
   1317a:	9b01      	ldr	r3, [sp, #4]
   1317c:	681b      	ldr	r3, [r3, #0]
   1317e:	781b      	ldrb	r3, [r3, #0]
   13180:	4618      	mov	r0, r3
   13182:	f7ff ffcd 	bl	13120 <_is_digit(char)>
   13186:	4603      	mov	r3, r0
   13188:	2b00      	cmp	r3, #0
   1318a:	d00f      	beq.n	131ac <_atoi(char const**)+0x48>
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
   1318c:	9a03      	ldr	r2, [sp, #12]
   1318e:	4613      	mov	r3, r2
   13190:	009b      	lsls	r3, r3, #2
   13192:	4413      	add	r3, r2
   13194:	005b      	lsls	r3, r3, #1
   13196:	4618      	mov	r0, r3
   13198:	9b01      	ldr	r3, [sp, #4]
   1319a:	681b      	ldr	r3, [r3, #0]
   1319c:	1c59      	adds	r1, r3, #1
   1319e:	9a01      	ldr	r2, [sp, #4]
   131a0:	6011      	str	r1, [r2, #0]
   131a2:	781b      	ldrb	r3, [r3, #0]
   131a4:	4403      	add	r3, r0
   131a6:	3b30      	subs	r3, #48	; 0x30
   131a8:	9303      	str	r3, [sp, #12]
  while (_is_digit(**str)) {
   131aa:	e7e6      	b.n	1317a <_atoi(char const**)+0x16>
  }
  return i;
   131ac:	9c03      	ldr	r4, [sp, #12]
   131ae:	462b      	mov	r3, r5
   131b0:	4619      	mov	r1, r3
   131b2:	4803      	ldr	r0, [pc, #12]	; (131c0 <_atoi(char const**)+0x5c>)
   131b4:	f7ff fe70 	bl	12e98 <__cyg_profile_func_exit>
   131b8:	4623      	mov	r3, r4
}
   131ba:	4618      	mov	r0, r3
   131bc:	b005      	add	sp, #20
   131be:	bd30      	pop	{r4, r5, pc}
   131c0:	00013165 	.word	0x00013165

000131c4 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)>:


// internal itoa format
static size_t _ntoa_format(out_fct_type out, char* buffer, size_t idx, size_t maxlen, char* buf, size_t len, bool negative, unsigned int base, unsigned int prec, unsigned int width, unsigned int flags)
{
   131c4:	b530      	push	{r4, r5, lr}
   131c6:	b089      	sub	sp, #36	; 0x24
   131c8:	4675      	mov	r5, lr
   131ca:	9003      	str	r0, [sp, #12]
   131cc:	9102      	str	r1, [sp, #8]
   131ce:	9201      	str	r2, [sp, #4]
   131d0:	9300      	str	r3, [sp, #0]
   131d2:	462b      	mov	r3, r5
   131d4:	4619      	mov	r1, r3
   131d6:	4891      	ldr	r0, [pc, #580]	; (1341c <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x258>)
   131d8:	f7ff fe4a 	bl	12e70 <__cyg_profile_func_enter>
  const size_t start_idx = idx;
   131dc:	9b01      	ldr	r3, [sp, #4]
   131de:	9305      	str	r3, [sp, #20]

  // pad leading zeros
  while (!(flags & FLAGS_LEFT) && (len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
   131e0:	9b12      	ldr	r3, [sp, #72]	; 0x48
   131e2:	f003 0302 	and.w	r3, r3, #2
   131e6:	2b00      	cmp	r3, #0
   131e8:	d10e      	bne.n	13208 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x44>
   131ea:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   131ec:	9b10      	ldr	r3, [sp, #64]	; 0x40
   131ee:	429a      	cmp	r2, r3
   131f0:	d20a      	bcs.n	13208 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x44>
   131f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   131f4:	2b1f      	cmp	r3, #31
   131f6:	d807      	bhi.n	13208 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x44>
    buf[len++] = '0';
   131f8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   131fa:	1c5a      	adds	r2, r3, #1
   131fc:	920d      	str	r2, [sp, #52]	; 0x34
   131fe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   13200:	4413      	add	r3, r2
   13202:	2230      	movs	r2, #48	; 0x30
   13204:	701a      	strb	r2, [r3, #0]
  while (!(flags & FLAGS_LEFT) && (len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
   13206:	e7eb      	b.n	131e0 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1c>
  }
  while (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
   13208:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1320a:	f003 0302 	and.w	r3, r3, #2
   1320e:	2b00      	cmp	r3, #0
   13210:	d113      	bne.n	1323a <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x76>
   13212:	9b12      	ldr	r3, [sp, #72]	; 0x48
   13214:	f003 0301 	and.w	r3, r3, #1
   13218:	2b00      	cmp	r3, #0
   1321a:	d00e      	beq.n	1323a <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x76>
   1321c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   1321e:	9b11      	ldr	r3, [sp, #68]	; 0x44
   13220:	429a      	cmp	r2, r3
   13222:	d20a      	bcs.n	1323a <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x76>
   13224:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   13226:	2b1f      	cmp	r3, #31
   13228:	d807      	bhi.n	1323a <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x76>
    buf[len++] = '0';
   1322a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1322c:	1c5a      	adds	r2, r3, #1
   1322e:	920d      	str	r2, [sp, #52]	; 0x34
   13230:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   13232:	4413      	add	r3, r2
   13234:	2230      	movs	r2, #48	; 0x30
   13236:	701a      	strb	r2, [r3, #0]
  while (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
   13238:	e7e6      	b.n	13208 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x44>
  }

  // handle hash
  if (flags & FLAGS_HASH) {
   1323a:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1323c:	f003 0310 	and.w	r3, r3, #16
   13240:	2b00      	cmp	r3, #0
   13242:	d058      	beq.n	132f6 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x132>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
   13244:	9b12      	ldr	r3, [sp, #72]	; 0x48
   13246:	f403 6380 	and.w	r3, r3, #1024	; 0x400
   1324a:	2b00      	cmp	r3, #0
   1324c:	d116      	bne.n	1327c <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xb8>
   1324e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   13250:	2b00      	cmp	r3, #0
   13252:	d013      	beq.n	1327c <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xb8>
   13254:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   13256:	9b10      	ldr	r3, [sp, #64]	; 0x40
   13258:	429a      	cmp	r2, r3
   1325a:	d003      	beq.n	13264 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xa0>
   1325c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   1325e:	9b11      	ldr	r3, [sp, #68]	; 0x44
   13260:	429a      	cmp	r2, r3
   13262:	d10b      	bne.n	1327c <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xb8>
      len--;
   13264:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   13266:	3b01      	subs	r3, #1
   13268:	930d      	str	r3, [sp, #52]	; 0x34
      if (len && (base == 16U)) {
   1326a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1326c:	2b00      	cmp	r3, #0
   1326e:	d005      	beq.n	1327c <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xb8>
   13270:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   13272:	2b10      	cmp	r3, #16
   13274:	d102      	bne.n	1327c <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xb8>
        len--;
   13276:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   13278:	3b01      	subs	r3, #1
   1327a:	930d      	str	r3, [sp, #52]	; 0x34
      }
    }
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
   1327c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1327e:	2b10      	cmp	r3, #16
   13280:	d10f      	bne.n	132a2 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xde>
   13282:	9b12      	ldr	r3, [sp, #72]	; 0x48
   13284:	f003 0320 	and.w	r3, r3, #32
   13288:	2b00      	cmp	r3, #0
   1328a:	d10a      	bne.n	132a2 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xde>
   1328c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1328e:	2b1f      	cmp	r3, #31
   13290:	d807      	bhi.n	132a2 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xde>
      buf[len++] = 'x';
   13292:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   13294:	1c5a      	adds	r2, r3, #1
   13296:	920d      	str	r2, [sp, #52]	; 0x34
   13298:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1329a:	4413      	add	r3, r2
   1329c:	2278      	movs	r2, #120	; 0x78
   1329e:	701a      	strb	r2, [r3, #0]
   132a0:	e01f      	b.n	132e2 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x11e>
    }
    else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
   132a2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   132a4:	2b10      	cmp	r3, #16
   132a6:	d10f      	bne.n	132c8 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x104>
   132a8:	9b12      	ldr	r3, [sp, #72]	; 0x48
   132aa:	f003 0320 	and.w	r3, r3, #32
   132ae:	2b00      	cmp	r3, #0
   132b0:	d00a      	beq.n	132c8 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x104>
   132b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   132b4:	2b1f      	cmp	r3, #31
   132b6:	d807      	bhi.n	132c8 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x104>
      buf[len++] = 'X';
   132b8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   132ba:	1c5a      	adds	r2, r3, #1
   132bc:	920d      	str	r2, [sp, #52]	; 0x34
   132be:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   132c0:	4413      	add	r3, r2
   132c2:	2258      	movs	r2, #88	; 0x58
   132c4:	701a      	strb	r2, [r3, #0]
   132c6:	e00c      	b.n	132e2 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x11e>
    }
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
   132c8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   132ca:	2b02      	cmp	r3, #2
   132cc:	d109      	bne.n	132e2 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x11e>
   132ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   132d0:	2b1f      	cmp	r3, #31
   132d2:	d806      	bhi.n	132e2 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x11e>
      buf[len++] = 'b';
   132d4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   132d6:	1c5a      	adds	r2, r3, #1
   132d8:	920d      	str	r2, [sp, #52]	; 0x34
   132da:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   132dc:	4413      	add	r3, r2
   132de:	2262      	movs	r2, #98	; 0x62
   132e0:	701a      	strb	r2, [r3, #0]
    }
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
   132e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   132e4:	2b1f      	cmp	r3, #31
   132e6:	d806      	bhi.n	132f6 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x132>
      buf[len++] = '0';
   132e8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   132ea:	1c5a      	adds	r2, r3, #1
   132ec:	920d      	str	r2, [sp, #52]	; 0x34
   132ee:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   132f0:	4413      	add	r3, r2
   132f2:	2230      	movs	r2, #48	; 0x30
   132f4:	701a      	strb	r2, [r3, #0]
    }
  }

  // handle sign
  if (len && (len == width) && (negative || (flags & FLAGS_PLUS) || (flags & FLAGS_SPACE))) {
   132f6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   132f8:	2b00      	cmp	r3, #0
   132fa:	d014      	beq.n	13326 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x162>
   132fc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   132fe:	9b11      	ldr	r3, [sp, #68]	; 0x44
   13300:	429a      	cmp	r2, r3
   13302:	d110      	bne.n	13326 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x162>
   13304:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
   13308:	2b00      	cmp	r3, #0
   1330a:	d109      	bne.n	13320 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x15c>
   1330c:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1330e:	f003 0304 	and.w	r3, r3, #4
   13312:	2b00      	cmp	r3, #0
   13314:	d104      	bne.n	13320 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x15c>
   13316:	9b12      	ldr	r3, [sp, #72]	; 0x48
   13318:	f003 0308 	and.w	r3, r3, #8
   1331c:	2b00      	cmp	r3, #0
   1331e:	d002      	beq.n	13326 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x162>
    len--;
   13320:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   13322:	3b01      	subs	r3, #1
   13324:	930d      	str	r3, [sp, #52]	; 0x34
  }
  if (len < PRINTF_NTOA_BUFFER_SIZE) {
   13326:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   13328:	2b1f      	cmp	r3, #31
   1332a:	d824      	bhi.n	13376 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1b2>
    if (negative) {
   1332c:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
   13330:	2b00      	cmp	r3, #0
   13332:	d007      	beq.n	13344 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x180>
      buf[len++] = '-';
   13334:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   13336:	1c5a      	adds	r2, r3, #1
   13338:	920d      	str	r2, [sp, #52]	; 0x34
   1333a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1333c:	4413      	add	r3, r2
   1333e:	222d      	movs	r2, #45	; 0x2d
   13340:	701a      	strb	r2, [r3, #0]
   13342:	e018      	b.n	13376 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1b2>
    }
    else if (flags & FLAGS_PLUS) {
   13344:	9b12      	ldr	r3, [sp, #72]	; 0x48
   13346:	f003 0304 	and.w	r3, r3, #4
   1334a:	2b00      	cmp	r3, #0
   1334c:	d007      	beq.n	1335e <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x19a>
      buf[len++] = '+';  // ignore the space if the '+' exists
   1334e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   13350:	1c5a      	adds	r2, r3, #1
   13352:	920d      	str	r2, [sp, #52]	; 0x34
   13354:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   13356:	4413      	add	r3, r2
   13358:	222b      	movs	r2, #43	; 0x2b
   1335a:	701a      	strb	r2, [r3, #0]
   1335c:	e00b      	b.n	13376 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1b2>
    }
    else if (flags & FLAGS_SPACE) {
   1335e:	9b12      	ldr	r3, [sp, #72]	; 0x48
   13360:	f003 0308 	and.w	r3, r3, #8
   13364:	2b00      	cmp	r3, #0
   13366:	d006      	beq.n	13376 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1b2>
      buf[len++] = ' ';
   13368:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1336a:	1c5a      	adds	r2, r3, #1
   1336c:	920d      	str	r2, [sp, #52]	; 0x34
   1336e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   13370:	4413      	add	r3, r2
   13372:	2220      	movs	r2, #32
   13374:	701a      	strb	r2, [r3, #0]
    }
  }

  // pad spaces up to given width
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
   13376:	9b12      	ldr	r3, [sp, #72]	; 0x48
   13378:	f003 0302 	and.w	r3, r3, #2
   1337c:	2b00      	cmp	r3, #0
   1337e:	d116      	bne.n	133ae <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1ea>
   13380:	9b12      	ldr	r3, [sp, #72]	; 0x48
   13382:	f003 0301 	and.w	r3, r3, #1
   13386:	2b00      	cmp	r3, #0
   13388:	d111      	bne.n	133ae <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1ea>
    for (size_t i = len; i < width; i++) {
   1338a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1338c:	9307      	str	r3, [sp, #28]
   1338e:	9a07      	ldr	r2, [sp, #28]
   13390:	9b11      	ldr	r3, [sp, #68]	; 0x44
   13392:	429a      	cmp	r2, r3
   13394:	d20b      	bcs.n	133ae <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1ea>
      out(' ', buffer, idx++, maxlen);
   13396:	9a01      	ldr	r2, [sp, #4]
   13398:	1c53      	adds	r3, r2, #1
   1339a:	9301      	str	r3, [sp, #4]
   1339c:	9c03      	ldr	r4, [sp, #12]
   1339e:	9b00      	ldr	r3, [sp, #0]
   133a0:	9902      	ldr	r1, [sp, #8]
   133a2:	2020      	movs	r0, #32
   133a4:	47a0      	blx	r4
    for (size_t i = len; i < width; i++) {
   133a6:	9b07      	ldr	r3, [sp, #28]
   133a8:	3301      	adds	r3, #1
   133aa:	9307      	str	r3, [sp, #28]
   133ac:	e7ef      	b.n	1338e <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1ca>
    }
  }

  // reverse string
  for (size_t i = 0U; i < len; i++) {
   133ae:	2300      	movs	r3, #0
   133b0:	9306      	str	r3, [sp, #24]
   133b2:	9a06      	ldr	r2, [sp, #24]
   133b4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   133b6:	429a      	cmp	r2, r3
   133b8:	d211      	bcs.n	133de <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x21a>
    out(buf[len - i - 1U], buffer, idx++, maxlen);
   133ba:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   133bc:	9b06      	ldr	r3, [sp, #24]
   133be:	1ad3      	subs	r3, r2, r3
   133c0:	3b01      	subs	r3, #1
   133c2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   133c4:	4413      	add	r3, r2
   133c6:	7818      	ldrb	r0, [r3, #0]
   133c8:	9a01      	ldr	r2, [sp, #4]
   133ca:	1c53      	adds	r3, r2, #1
   133cc:	9301      	str	r3, [sp, #4]
   133ce:	9c03      	ldr	r4, [sp, #12]
   133d0:	9b00      	ldr	r3, [sp, #0]
   133d2:	9902      	ldr	r1, [sp, #8]
   133d4:	47a0      	blx	r4
  for (size_t i = 0U; i < len; i++) {
   133d6:	9b06      	ldr	r3, [sp, #24]
   133d8:	3301      	adds	r3, #1
   133da:	9306      	str	r3, [sp, #24]
   133dc:	e7e9      	b.n	133b2 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1ee>
  }

  // append pad spaces up to given width
  if (flags & FLAGS_LEFT) {
   133de:	9b12      	ldr	r3, [sp, #72]	; 0x48
   133e0:	f003 0302 	and.w	r3, r3, #2
   133e4:	2b00      	cmp	r3, #0
   133e6:	d00e      	beq.n	13406 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x242>
    while (idx - start_idx < width) {
   133e8:	9a01      	ldr	r2, [sp, #4]
   133ea:	9b05      	ldr	r3, [sp, #20]
   133ec:	1ad3      	subs	r3, r2, r3
   133ee:	9a11      	ldr	r2, [sp, #68]	; 0x44
   133f0:	429a      	cmp	r2, r3
   133f2:	d908      	bls.n	13406 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x242>
      out(' ', buffer, idx++, maxlen);
   133f4:	9a01      	ldr	r2, [sp, #4]
   133f6:	1c53      	adds	r3, r2, #1
   133f8:	9301      	str	r3, [sp, #4]
   133fa:	9c03      	ldr	r4, [sp, #12]
   133fc:	9b00      	ldr	r3, [sp, #0]
   133fe:	9902      	ldr	r1, [sp, #8]
   13400:	2020      	movs	r0, #32
   13402:	47a0      	blx	r4
    while (idx - start_idx < width) {
   13404:	e7f0      	b.n	133e8 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x224>
    }
  }

  return idx;
   13406:	9c01      	ldr	r4, [sp, #4]
   13408:	462b      	mov	r3, r5
   1340a:	4619      	mov	r1, r3
   1340c:	4803      	ldr	r0, [pc, #12]	; (1341c <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x258>)
   1340e:	f7ff fd43 	bl	12e98 <__cyg_profile_func_exit>
   13412:	4623      	mov	r3, r4
}
   13414:	4618      	mov	r0, r3
   13416:	b009      	add	sp, #36	; 0x24
   13418:	bd30      	pop	{r4, r5, pc}
   1341a:	bf00      	nop
   1341c:	000131c5 	.word	0x000131c5

00013420 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)>:


// internal itoa for 'long' type
static size_t _ntoa_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long value, bool negative, unsigned long base, unsigned int prec, unsigned int width, unsigned int flags)
{
   13420:	b530      	push	{r4, r5, lr}
   13422:	b097      	sub	sp, #92	; 0x5c
   13424:	4674      	mov	r4, lr
   13426:	900b      	str	r0, [sp, #44]	; 0x2c
   13428:	910a      	str	r1, [sp, #40]	; 0x28
   1342a:	9209      	str	r2, [sp, #36]	; 0x24
   1342c:	9308      	str	r3, [sp, #32]
   1342e:	4623      	mov	r3, r4
   13430:	4619      	mov	r1, r3
   13432:	4833      	ldr	r0, [pc, #204]	; (13500 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0xe0>)
   13434:	f7ff fd1c 	bl	12e70 <__cyg_profile_func_enter>
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
   13438:	2300      	movs	r3, #0
   1343a:	9315      	str	r3, [sp, #84]	; 0x54

  // no hash for 0 values
  if (!value) {
   1343c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   1343e:	2b00      	cmp	r3, #0
   13440:	d103      	bne.n	1344a <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x2a>
    flags &= ~FLAGS_HASH;
   13442:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   13444:	f023 0310 	bic.w	r3, r3, #16
   13448:	931f      	str	r3, [sp, #124]	; 0x7c
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
   1344a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   1344c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
   13450:	2b00      	cmp	r3, #0
   13452:	d002      	beq.n	1345a <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x3a>
   13454:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   13456:	2b00      	cmp	r3, #0
   13458:	d033      	beq.n	134c2 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0xa2>
    do {
      const char digit = (char)(value % base);
   1345a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   1345c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
   1345e:	fbb3 f2f2 	udiv	r2, r3, r2
   13462:	991c      	ldr	r1, [sp, #112]	; 0x70
   13464:	fb01 f202 	mul.w	r2, r1, r2
   13468:	1a9b      	subs	r3, r3, r2
   1346a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
   1346e:	f89d 3053 	ldrb.w	r3, [sp, #83]	; 0x53
   13472:	2b09      	cmp	r3, #9
   13474:	d804      	bhi.n	13480 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x60>
   13476:	f89d 3053 	ldrb.w	r3, [sp, #83]	; 0x53
   1347a:	3330      	adds	r3, #48	; 0x30
   1347c:	b2da      	uxtb	r2, r3
   1347e:	e00d      	b.n	1349c <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x7c>
   13480:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   13482:	f003 0320 	and.w	r3, r3, #32
   13486:	2b00      	cmp	r3, #0
   13488:	d001      	beq.n	1348e <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x6e>
   1348a:	2241      	movs	r2, #65	; 0x41
   1348c:	e000      	b.n	13490 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x70>
   1348e:	2261      	movs	r2, #97	; 0x61
   13490:	f89d 3053 	ldrb.w	r3, [sp, #83]	; 0x53
   13494:	4413      	add	r3, r2
   13496:	b2db      	uxtb	r3, r3
   13498:	3b0a      	subs	r3, #10
   1349a:	b2da      	uxtb	r2, r3
   1349c:	9b15      	ldr	r3, [sp, #84]	; 0x54
   1349e:	1c59      	adds	r1, r3, #1
   134a0:	9115      	str	r1, [sp, #84]	; 0x54
   134a2:	a916      	add	r1, sp, #88	; 0x58
   134a4:	440b      	add	r3, r1
   134a6:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
   134aa:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   134ac:	9b1c      	ldr	r3, [sp, #112]	; 0x70
   134ae:	fbb2 f3f3 	udiv	r3, r2, r3
   134b2:	931a      	str	r3, [sp, #104]	; 0x68
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
   134b4:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   134b6:	2b00      	cmp	r3, #0
   134b8:	d003      	beq.n	134c2 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0xa2>
   134ba:	9b15      	ldr	r3, [sp, #84]	; 0x54
   134bc:	2b1f      	cmp	r3, #31
   134be:	d800      	bhi.n	134c2 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0xa2>
    do {
   134c0:	e7cb      	b.n	1345a <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x3a>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
   134c2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   134c4:	9306      	str	r3, [sp, #24]
   134c6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   134c8:	9305      	str	r3, [sp, #20]
   134ca:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   134cc:	9304      	str	r3, [sp, #16]
   134ce:	9b1c      	ldr	r3, [sp, #112]	; 0x70
   134d0:	9303      	str	r3, [sp, #12]
   134d2:	f89d 306c 	ldrb.w	r3, [sp, #108]	; 0x6c
   134d6:	9302      	str	r3, [sp, #8]
   134d8:	9b15      	ldr	r3, [sp, #84]	; 0x54
   134da:	9301      	str	r3, [sp, #4]
   134dc:	ab0c      	add	r3, sp, #48	; 0x30
   134de:	9300      	str	r3, [sp, #0]
   134e0:	9b08      	ldr	r3, [sp, #32]
   134e2:	9a09      	ldr	r2, [sp, #36]	; 0x24
   134e4:	990a      	ldr	r1, [sp, #40]	; 0x28
   134e6:	980b      	ldr	r0, [sp, #44]	; 0x2c
   134e8:	f7ff fe6c 	bl	131c4 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)>
   134ec:	4605      	mov	r5, r0
   134ee:	4623      	mov	r3, r4
   134f0:	4619      	mov	r1, r3
   134f2:	4803      	ldr	r0, [pc, #12]	; (13500 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0xe0>)
   134f4:	f7ff fcd0 	bl	12e98 <__cyg_profile_func_exit>
   134f8:	462b      	mov	r3, r5
}
   134fa:	4618      	mov	r0, r3
   134fc:	b017      	add	sp, #92	; 0x5c
   134fe:	bd30      	pop	{r4, r5, pc}
   13500:	00013421 	.word	0x00013421

00013504 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)>:


// internal itoa for 'long long' type
#if defined(PRINTF_SUPPORT_LONG_LONG)
static size_t _ntoa_long_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long long value, bool negative, unsigned long long base, unsigned int prec, unsigned int width, unsigned int flags)
{
   13504:	b530      	push	{r4, r5, lr}
   13506:	b097      	sub	sp, #92	; 0x5c
   13508:	4675      	mov	r5, lr
   1350a:	900b      	str	r0, [sp, #44]	; 0x2c
   1350c:	910a      	str	r1, [sp, #40]	; 0x28
   1350e:	9209      	str	r2, [sp, #36]	; 0x24
   13510:	9308      	str	r3, [sp, #32]
   13512:	462b      	mov	r3, r5
   13514:	4619      	mov	r1, r3
   13516:	4837      	ldr	r0, [pc, #220]	; (135f4 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0xf0>)
   13518:	f7ff fcaa 	bl	12e70 <__cyg_profile_func_enter>
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
   1351c:	2300      	movs	r3, #0
   1351e:	9315      	str	r3, [sp, #84]	; 0x54

  // no hash for 0 values
  if (!value) {
   13520:	e9dd 341a 	ldrd	r3, r4, [sp, #104]	; 0x68
   13524:	4323      	orrs	r3, r4
   13526:	d103      	bne.n	13530 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0x2c>
    flags &= ~FLAGS_HASH;
   13528:	9b22      	ldr	r3, [sp, #136]	; 0x88
   1352a:	f023 0310 	bic.w	r3, r3, #16
   1352e:	9322      	str	r3, [sp, #136]	; 0x88
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
   13530:	9b22      	ldr	r3, [sp, #136]	; 0x88
   13532:	f403 6380 	and.w	r3, r3, #1024	; 0x400
   13536:	2b00      	cmp	r3, #0
   13538:	d003      	beq.n	13542 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0x3e>
   1353a:	e9dd 341a 	ldrd	r3, r4, [sp, #104]	; 0x68
   1353e:	4323      	orrs	r3, r4
   13540:	d039      	beq.n	135b6 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0xb2>
    do {
      const char digit = (char)(value % base);
   13542:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
   13546:	e9dd 231e 	ldrd	r2, r3, [sp, #120]	; 0x78
   1354a:	f003 fbbb 	bl	16cc4 <__aeabi_uldivmod>
   1354e:	461c      	mov	r4, r3
   13550:	4613      	mov	r3, r2
   13552:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
   13556:	f89d 3053 	ldrb.w	r3, [sp, #83]	; 0x53
   1355a:	2b09      	cmp	r3, #9
   1355c:	d804      	bhi.n	13568 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0x64>
   1355e:	f89d 3053 	ldrb.w	r3, [sp, #83]	; 0x53
   13562:	3330      	adds	r3, #48	; 0x30
   13564:	b2da      	uxtb	r2, r3
   13566:	e00d      	b.n	13584 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0x80>
   13568:	9b22      	ldr	r3, [sp, #136]	; 0x88
   1356a:	f003 0320 	and.w	r3, r3, #32
   1356e:	2b00      	cmp	r3, #0
   13570:	d001      	beq.n	13576 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0x72>
   13572:	2241      	movs	r2, #65	; 0x41
   13574:	e000      	b.n	13578 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0x74>
   13576:	2261      	movs	r2, #97	; 0x61
   13578:	f89d 3053 	ldrb.w	r3, [sp, #83]	; 0x53
   1357c:	4413      	add	r3, r2
   1357e:	b2db      	uxtb	r3, r3
   13580:	3b0a      	subs	r3, #10
   13582:	b2da      	uxtb	r2, r3
   13584:	9b15      	ldr	r3, [sp, #84]	; 0x54
   13586:	1c59      	adds	r1, r3, #1
   13588:	9115      	str	r1, [sp, #84]	; 0x54
   1358a:	a916      	add	r1, sp, #88	; 0x58
   1358c:	440b      	add	r3, r1
   1358e:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
   13592:	e9dd 231e 	ldrd	r2, r3, [sp, #120]	; 0x78
   13596:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
   1359a:	f003 fb93 	bl	16cc4 <__aeabi_uldivmod>
   1359e:	4603      	mov	r3, r0
   135a0:	460c      	mov	r4, r1
   135a2:	e9cd 341a 	strd	r3, r4, [sp, #104]	; 0x68
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
   135a6:	e9dd 341a 	ldrd	r3, r4, [sp, #104]	; 0x68
   135aa:	4323      	orrs	r3, r4
   135ac:	d003      	beq.n	135b6 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0xb2>
   135ae:	9b15      	ldr	r3, [sp, #84]	; 0x54
   135b0:	2b1f      	cmp	r3, #31
   135b2:	d800      	bhi.n	135b6 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0xb2>
    do {
   135b4:	e7c5      	b.n	13542 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0x3e>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
   135b6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   135b8:	9a22      	ldr	r2, [sp, #136]	; 0x88
   135ba:	9206      	str	r2, [sp, #24]
   135bc:	9a21      	ldr	r2, [sp, #132]	; 0x84
   135be:	9205      	str	r2, [sp, #20]
   135c0:	9a20      	ldr	r2, [sp, #128]	; 0x80
   135c2:	9204      	str	r2, [sp, #16]
   135c4:	9303      	str	r3, [sp, #12]
   135c6:	f89d 3070 	ldrb.w	r3, [sp, #112]	; 0x70
   135ca:	9302      	str	r3, [sp, #8]
   135cc:	9b15      	ldr	r3, [sp, #84]	; 0x54
   135ce:	9301      	str	r3, [sp, #4]
   135d0:	ab0c      	add	r3, sp, #48	; 0x30
   135d2:	9300      	str	r3, [sp, #0]
   135d4:	9b08      	ldr	r3, [sp, #32]
   135d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
   135d8:	990a      	ldr	r1, [sp, #40]	; 0x28
   135da:	980b      	ldr	r0, [sp, #44]	; 0x2c
   135dc:	f7ff fdf2 	bl	131c4 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)>
   135e0:	4604      	mov	r4, r0
   135e2:	462b      	mov	r3, r5
   135e4:	4619      	mov	r1, r3
   135e6:	4803      	ldr	r0, [pc, #12]	; (135f4 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0xf0>)
   135e8:	f7ff fc56 	bl	12e98 <__cyg_profile_func_exit>
   135ec:	4623      	mov	r3, r4
}
   135ee:	4618      	mov	r0, r3
   135f0:	b017      	add	sp, #92	; 0x5c
   135f2:	bd30      	pop	{r4, r5, pc}
   135f4:	00013505 	.word	0x00013505

000135f8 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)>:
#endif  // PRINTF_SUPPORT_LONG_LONG


#if defined(PRINTF_SUPPORT_FLOAT)
static size_t _ftoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value_param, unsigned int prec, unsigned int width, unsigned int flags)
{
   135f8:	b530      	push	{r4, r5, lr}
   135fa:	b09b      	sub	sp, #108	; 0x6c
   135fc:	4675      	mov	r5, lr
   135fe:	9005      	str	r0, [sp, #20]
   13600:	9104      	str	r1, [sp, #16]
   13602:	9203      	str	r2, [sp, #12]
   13604:	9302      	str	r3, [sp, #8]
   13606:	ed8d 0b00 	vstr	d0, [sp]
   1360a:	462b      	mov	r3, r5
   1360c:	4619      	mov	r1, r3
   1360e:	48b7      	ldr	r0, [pc, #732]	; (138ec <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x2f4>)
   13610:	f7ff fc2e 	bl	12e70 <__cyg_profile_func_enter>
  const size_t start_idx = idx;
   13614:	9b03      	ldr	r3, [sp, #12]
   13616:	9311      	str	r3, [sp, #68]	; 0x44

  float value = static_cast<float>(value_param);
   13618:	e9dd 0100 	ldrd	r0, r1, [sp]
   1361c:	f003 fb02 	bl	16c24 <__aeabi_d2f>
   13620:	4603      	mov	r3, r0
   13622:	9319      	str	r3, [sp, #100]	; 0x64

  char buf[PRINTF_FTOA_BUFFER_SIZE];
  size_t len  = 0U;
   13624:	2300      	movs	r3, #0
   13626:	9318      	str	r3, [sp, #96]	; 0x60
  float diff = 0.0;
   13628:	f04f 0300 	mov.w	r3, #0
   1362c:	9310      	str	r3, [sp, #64]	; 0x40

  // if input is larger than thres_max, revert to exponential
  const float thres_max = (float)0x7FFFFFFF;
   1362e:	f04f 439e 	mov.w	r3, #1325400064	; 0x4f000000
   13632:	930f      	str	r3, [sp, #60]	; 0x3c

  // powers of 10
  static const float pow10[] = { 1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000 };

  // test for negative
  bool negative = false;
   13634:	2300      	movs	r3, #0
   13636:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
  if (value < 0) {
   1363a:	eddd 7a19 	vldr	s15, [sp, #100]	; 0x64
   1363e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   13642:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   13646:	d50a      	bpl.n	1365e <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x66>
    negative = true;
   13648:	2301      	movs	r3, #1
   1364a:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
    value = 0 - value;
   1364e:	ed9f 7aa8 	vldr	s14, [pc, #672]	; 138f0 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x2f8>
   13652:	eddd 7a19 	vldr	s15, [sp, #100]	; 0x64
   13656:	ee77 7a67 	vsub.f32	s15, s14, s15
   1365a:	edcd 7a19 	vstr	s15, [sp, #100]	; 0x64
  }

  // set default precision to 6, if not set explicitly
  if (!(flags & FLAGS_PRECISION)) {
   1365e:	9b20      	ldr	r3, [sp, #128]	; 0x80
   13660:	f403 6380 	and.w	r3, r3, #1024	; 0x400
   13664:	2b00      	cmp	r3, #0
   13666:	d101      	bne.n	1366c <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x74>
    prec = 6U;
   13668:	2306      	movs	r3, #6
   1366a:	931e      	str	r3, [sp, #120]	; 0x78
  }
  // limit precision to 9, cause a prec >= 10 can lead to overflow errors
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
   1366c:	9b18      	ldr	r3, [sp, #96]	; 0x60
   1366e:	2b1f      	cmp	r3, #31
   13670:	d80e      	bhi.n	13690 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x98>
   13672:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   13674:	2b09      	cmp	r3, #9
   13676:	d90b      	bls.n	13690 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x98>
    buf[len++] = '0';
   13678:	9b18      	ldr	r3, [sp, #96]	; 0x60
   1367a:	1c5a      	adds	r2, r3, #1
   1367c:	9218      	str	r2, [sp, #96]	; 0x60
   1367e:	aa1a      	add	r2, sp, #104	; 0x68
   13680:	4413      	add	r3, r2
   13682:	2230      	movs	r2, #48	; 0x30
   13684:	f803 2c50 	strb.w	r2, [r3, #-80]
    prec--;
   13688:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   1368a:	3b01      	subs	r3, #1
   1368c:	931e      	str	r3, [sp, #120]	; 0x78
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
   1368e:	e7ed      	b.n	1366c <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x74>
  }

  int whole = (int)value;
   13690:	eddd 7a19 	vldr	s15, [sp, #100]	; 0x64
   13694:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   13698:	ee17 3a90 	vmov	r3, s15
   1369c:	9316      	str	r3, [sp, #88]	; 0x58
  float tmp = (value - whole) * pow10[prec];
   1369e:	9b16      	ldr	r3, [sp, #88]	; 0x58
   136a0:	ee07 3a90 	vmov	s15, r3
   136a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   136a8:	ed9d 7a19 	vldr	s14, [sp, #100]	; 0x64
   136ac:	ee37 7a67 	vsub.f32	s14, s14, s15
   136b0:	4a90      	ldr	r2, [pc, #576]	; (138f4 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x2fc>)
   136b2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   136b4:	009b      	lsls	r3, r3, #2
   136b6:	4413      	add	r3, r2
   136b8:	edd3 7a00 	vldr	s15, [r3]
   136bc:	ee67 7a27 	vmul.f32	s15, s14, s15
   136c0:	edcd 7a0e 	vstr	s15, [sp, #56]	; 0x38
  unsigned long frac = (unsigned long)tmp;
   136c4:	eddd 7a0e 	vldr	s15, [sp, #56]	; 0x38
   136c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
   136cc:	ee17 3a90 	vmov	r3, s15
   136d0:	9315      	str	r3, [sp, #84]	; 0x54
  diff = tmp - frac;
   136d2:	9b15      	ldr	r3, [sp, #84]	; 0x54
   136d4:	ee07 3a90 	vmov	s15, r3
   136d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
   136dc:	ed9d 7a0e 	vldr	s14, [sp, #56]	; 0x38
   136e0:	ee77 7a67 	vsub.f32	s15, s14, s15
   136e4:	edcd 7a10 	vstr	s15, [sp, #64]	; 0x40

  if (diff > 0.5) {
   136e8:	eddd 7a10 	vldr	s15, [sp, #64]	; 0x40
   136ec:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
   136f0:	eef4 7ac7 	vcmpe.f32	s15, s14
   136f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   136f8:	dd18      	ble.n	1372c <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x134>
    ++frac;
   136fa:	9b15      	ldr	r3, [sp, #84]	; 0x54
   136fc:	3301      	adds	r3, #1
   136fe:	9315      	str	r3, [sp, #84]	; 0x54
    // handle rollover, e.g. case 0.99 with prec 1 is 1.0
    if (frac >= pow10[prec]) {
   13700:	9b15      	ldr	r3, [sp, #84]	; 0x54
   13702:	ee07 3a90 	vmov	s15, r3
   13706:	eeb8 7a67 	vcvt.f32.u32	s14, s15
   1370a:	4a7a      	ldr	r2, [pc, #488]	; (138f4 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x2fc>)
   1370c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   1370e:	009b      	lsls	r3, r3, #2
   13710:	4413      	add	r3, r2
   13712:	edd3 7a00 	vldr	s15, [r3]
   13716:	eeb4 7ae7 	vcmpe.f32	s14, s15
   1371a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1371e:	db19      	blt.n	13754 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x15c>
      frac = 0;
   13720:	2300      	movs	r3, #0
   13722:	9315      	str	r3, [sp, #84]	; 0x54
      ++whole;
   13724:	9b16      	ldr	r3, [sp, #88]	; 0x58
   13726:	3301      	adds	r3, #1
   13728:	9316      	str	r3, [sp, #88]	; 0x58
   1372a:	e013      	b.n	13754 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x15c>
    }
  }
  else if ((diff == 0.5) && ((frac == 0U) || (frac & 1U))) {
   1372c:	eddd 7a10 	vldr	s15, [sp, #64]	; 0x40
   13730:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
   13734:	eef4 7a47 	vcmp.f32	s15, s14
   13738:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1373c:	d10a      	bne.n	13754 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x15c>
   1373e:	9b15      	ldr	r3, [sp, #84]	; 0x54
   13740:	2b00      	cmp	r3, #0
   13742:	d004      	beq.n	1374e <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x156>
   13744:	9b15      	ldr	r3, [sp, #84]	; 0x54
   13746:	f003 0301 	and.w	r3, r3, #1
   1374a:	2b00      	cmp	r3, #0
   1374c:	d002      	beq.n	13754 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x15c>
    // if halfway, round up if odd, OR if last digit is 0
    ++frac;
   1374e:	9b15      	ldr	r3, [sp, #84]	; 0x54
   13750:	3301      	adds	r3, #1
   13752:	9315      	str	r3, [sp, #84]	; 0x54
  }

  // TBD: for very large numbers switch back to native sprintf for exponentials. Anyone want to write code to replace this?
  // Normal printf behavior is to print EVERY whole number digit which can be 100s of characters overflowing your buffers == bad
  if (value > thres_max) {
   13754:	eddd 7a19 	vldr	s15, [sp, #100]	; 0x64
   13758:	ed9f 7a67 	vldr	s14, [pc, #412]	; 138f8 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x300>
   1375c:	eef4 7ac7 	vcmpe.f32	s15, s14
   13760:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   13764:	dd01      	ble.n	1376a <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x172>
    return 0U;
   13766:	2400      	movs	r4, #0
   13768:	e156      	b.n	13a18 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x420>
  }

  if (prec == 0U) {
   1376a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   1376c:	2b00      	cmp	r3, #0
   1376e:	d129      	bne.n	137c4 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x1cc>
    diff = value - (float)whole;
   13770:	9b16      	ldr	r3, [sp, #88]	; 0x58
   13772:	ee07 3a90 	vmov	s15, r3
   13776:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   1377a:	ed9d 7a19 	vldr	s14, [sp, #100]	; 0x64
   1377e:	ee77 7a67 	vsub.f32	s15, s14, s15
   13782:	edcd 7a10 	vstr	s15, [sp, #64]	; 0x40
    if (diff > 0.5) {
   13786:	eddd 7a10 	vldr	s15, [sp, #64]	; 0x40
   1378a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
   1378e:	eef4 7ac7 	vcmpe.f32	s15, s14
   13792:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   13796:	dd03      	ble.n	137a0 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x1a8>
      // greater than 0.5, round up, e.g. 1.6 -> 2
      ++whole;
   13798:	9b16      	ldr	r3, [sp, #88]	; 0x58
   1379a:	3301      	adds	r3, #1
   1379c:	9316      	str	r3, [sp, #88]	; 0x58
   1379e:	e05f      	b.n	13860 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x268>
    }
    else if ((diff == 0.5) && (whole & 1)) {
   137a0:	eddd 7a10 	vldr	s15, [sp, #64]	; 0x40
   137a4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
   137a8:	eef4 7a47 	vcmp.f32	s15, s14
   137ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   137b0:	d156      	bne.n	13860 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x268>
   137b2:	9b16      	ldr	r3, [sp, #88]	; 0x58
   137b4:	f003 0301 	and.w	r3, r3, #1
   137b8:	2b00      	cmp	r3, #0
   137ba:	d051      	beq.n	13860 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x268>
      // exactly 0.5 and ODD, then round up
      // 1.5 -> 2, but 2.5 -> 2
      ++whole;
   137bc:	9b16      	ldr	r3, [sp, #88]	; 0x58
   137be:	3301      	adds	r3, #1
   137c0:	9316      	str	r3, [sp, #88]	; 0x58
   137c2:	e04d      	b.n	13860 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x268>
    }
  }
  else {
    unsigned int count = prec;
   137c4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   137c6:	9314      	str	r3, [sp, #80]	; 0x50
    // now do fractional part, as an unsigned number
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
   137c8:	9b18      	ldr	r3, [sp, #96]	; 0x60
   137ca:	2b1f      	cmp	r3, #31
   137cc:	d827      	bhi.n	1381e <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x226>
      --count;
   137ce:	9b14      	ldr	r3, [sp, #80]	; 0x50
   137d0:	3b01      	subs	r3, #1
   137d2:	9314      	str	r3, [sp, #80]	; 0x50
      buf[len++] = (char)(48U + (frac % 10U));
   137d4:	9915      	ldr	r1, [sp, #84]	; 0x54
   137d6:	4b49      	ldr	r3, [pc, #292]	; (138fc <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x304>)
   137d8:	fba3 2301 	umull	r2, r3, r3, r1
   137dc:	08da      	lsrs	r2, r3, #3
   137de:	4613      	mov	r3, r2
   137e0:	009b      	lsls	r3, r3, #2
   137e2:	4413      	add	r3, r2
   137e4:	005b      	lsls	r3, r3, #1
   137e6:	1aca      	subs	r2, r1, r3
   137e8:	b2d3      	uxtb	r3, r2
   137ea:	3330      	adds	r3, #48	; 0x30
   137ec:	b2d9      	uxtb	r1, r3
   137ee:	9b18      	ldr	r3, [sp, #96]	; 0x60
   137f0:	1c5a      	adds	r2, r3, #1
   137f2:	9218      	str	r2, [sp, #96]	; 0x60
   137f4:	aa1a      	add	r2, sp, #104	; 0x68
   137f6:	4413      	add	r3, r2
   137f8:	460a      	mov	r2, r1
   137fa:	f803 2c50 	strb.w	r2, [r3, #-80]
      if (!(frac /= 10U)) {
   137fe:	9b15      	ldr	r3, [sp, #84]	; 0x54
   13800:	4a3e      	ldr	r2, [pc, #248]	; (138fc <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x304>)
   13802:	fba2 2303 	umull	r2, r3, r2, r3
   13806:	08db      	lsrs	r3, r3, #3
   13808:	9315      	str	r3, [sp, #84]	; 0x54
   1380a:	9b15      	ldr	r3, [sp, #84]	; 0x54
   1380c:	2b00      	cmp	r3, #0
   1380e:	bf0c      	ite	eq
   13810:	2301      	moveq	r3, #1
   13812:	2300      	movne	r3, #0
   13814:	b2db      	uxtb	r3, r3
   13816:	2b00      	cmp	r3, #0
   13818:	d100      	bne.n	1381c <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x224>
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
   1381a:	e7d5      	b.n	137c8 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x1d0>
        break;
   1381c:	bf00      	nop
      }
    }
    // add extra 0s
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
   1381e:	9b18      	ldr	r3, [sp, #96]	; 0x60
   13820:	2b1f      	cmp	r3, #31
   13822:	d806      	bhi.n	13832 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x23a>
   13824:	9b14      	ldr	r3, [sp, #80]	; 0x50
   13826:	1e5a      	subs	r2, r3, #1
   13828:	9214      	str	r2, [sp, #80]	; 0x50
   1382a:	2b00      	cmp	r3, #0
   1382c:	d001      	beq.n	13832 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x23a>
   1382e:	2301      	movs	r3, #1
   13830:	e000      	b.n	13834 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x23c>
   13832:	2300      	movs	r3, #0
   13834:	2b00      	cmp	r3, #0
   13836:	d008      	beq.n	1384a <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x252>
      buf[len++] = '0';
   13838:	9b18      	ldr	r3, [sp, #96]	; 0x60
   1383a:	1c5a      	adds	r2, r3, #1
   1383c:	9218      	str	r2, [sp, #96]	; 0x60
   1383e:	aa1a      	add	r2, sp, #104	; 0x68
   13840:	4413      	add	r3, r2
   13842:	2230      	movs	r2, #48	; 0x30
   13844:	f803 2c50 	strb.w	r2, [r3, #-80]
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
   13848:	e7e9      	b.n	1381e <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x226>
    }
    if (len < PRINTF_FTOA_BUFFER_SIZE) {
   1384a:	9b18      	ldr	r3, [sp, #96]	; 0x60
   1384c:	2b1f      	cmp	r3, #31
   1384e:	d807      	bhi.n	13860 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x268>
      // add decimal
      buf[len++] = '.';
   13850:	9b18      	ldr	r3, [sp, #96]	; 0x60
   13852:	1c5a      	adds	r2, r3, #1
   13854:	9218      	str	r2, [sp, #96]	; 0x60
   13856:	aa1a      	add	r2, sp, #104	; 0x68
   13858:	4413      	add	r3, r2
   1385a:	222e      	movs	r2, #46	; 0x2e
   1385c:	f803 2c50 	strb.w	r2, [r3, #-80]
    }
  }

  // do whole part, number is reversed
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
   13860:	9b18      	ldr	r3, [sp, #96]	; 0x60
   13862:	2b1f      	cmp	r3, #31
   13864:	d828      	bhi.n	138b8 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x2c0>
    buf[len++] = (char)(48 + (whole % 10));
   13866:	9a16      	ldr	r2, [sp, #88]	; 0x58
   13868:	4b25      	ldr	r3, [pc, #148]	; (13900 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x308>)
   1386a:	fb83 1302 	smull	r1, r3, r3, r2
   1386e:	1099      	asrs	r1, r3, #2
   13870:	17d3      	asrs	r3, r2, #31
   13872:	1ac9      	subs	r1, r1, r3
   13874:	460b      	mov	r3, r1
   13876:	009b      	lsls	r3, r3, #2
   13878:	440b      	add	r3, r1
   1387a:	005b      	lsls	r3, r3, #1
   1387c:	1ad1      	subs	r1, r2, r3
   1387e:	b2cb      	uxtb	r3, r1
   13880:	3330      	adds	r3, #48	; 0x30
   13882:	b2d9      	uxtb	r1, r3
   13884:	9b18      	ldr	r3, [sp, #96]	; 0x60
   13886:	1c5a      	adds	r2, r3, #1
   13888:	9218      	str	r2, [sp, #96]	; 0x60
   1388a:	aa1a      	add	r2, sp, #104	; 0x68
   1388c:	4413      	add	r3, r2
   1388e:	460a      	mov	r2, r1
   13890:	f803 2c50 	strb.w	r2, [r3, #-80]
    if (!(whole /= 10)) {
   13894:	9b16      	ldr	r3, [sp, #88]	; 0x58
   13896:	4a1a      	ldr	r2, [pc, #104]	; (13900 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x308>)
   13898:	fb82 1203 	smull	r1, r2, r2, r3
   1389c:	1092      	asrs	r2, r2, #2
   1389e:	17db      	asrs	r3, r3, #31
   138a0:	1ad3      	subs	r3, r2, r3
   138a2:	9316      	str	r3, [sp, #88]	; 0x58
   138a4:	9b16      	ldr	r3, [sp, #88]	; 0x58
   138a6:	2b00      	cmp	r3, #0
   138a8:	bf0c      	ite	eq
   138aa:	2301      	moveq	r3, #1
   138ac:	2300      	movne	r3, #0
   138ae:	b2db      	uxtb	r3, r3
   138b0:	2b00      	cmp	r3, #0
   138b2:	d100      	bne.n	138b6 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x2be>
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
   138b4:	e7d4      	b.n	13860 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x268>
      break;
   138b6:	bf00      	nop
    }
  }

  // pad leading zeros
  while (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
   138b8:	9b20      	ldr	r3, [sp, #128]	; 0x80
   138ba:	f003 0302 	and.w	r3, r3, #2
   138be:	2b00      	cmp	r3, #0
   138c0:	d120      	bne.n	13904 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x30c>
   138c2:	9b20      	ldr	r3, [sp, #128]	; 0x80
   138c4:	f003 0301 	and.w	r3, r3, #1
   138c8:	2b00      	cmp	r3, #0
   138ca:	d01b      	beq.n	13904 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x30c>
   138cc:	9a18      	ldr	r2, [sp, #96]	; 0x60
   138ce:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   138d0:	429a      	cmp	r2, r3
   138d2:	d217      	bcs.n	13904 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x30c>
   138d4:	9b18      	ldr	r3, [sp, #96]	; 0x60
   138d6:	2b1f      	cmp	r3, #31
   138d8:	d814      	bhi.n	13904 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x30c>
    buf[len++] = '0';
   138da:	9b18      	ldr	r3, [sp, #96]	; 0x60
   138dc:	1c5a      	adds	r2, r3, #1
   138de:	9218      	str	r2, [sp, #96]	; 0x60
   138e0:	aa1a      	add	r2, sp, #104	; 0x68
   138e2:	4413      	add	r3, r2
   138e4:	2230      	movs	r2, #48	; 0x30
   138e6:	f803 2c50 	strb.w	r2, [r3, #-80]
  while (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
   138ea:	e7e5      	b.n	138b8 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x2c0>
   138ec:	000135f9 	.word	0x000135f9
   138f0:	00000000 	.word	0x00000000
   138f4:	00017cfc 	.word	0x00017cfc
   138f8:	4f000000 	.word	0x4f000000
   138fc:	cccccccd 	.word	0xcccccccd
   13900:	66666667 	.word	0x66666667
  }

  // handle sign
  if ((len == width) && (negative || (flags & FLAGS_PLUS) || (flags & FLAGS_SPACE))) {
   13904:	9a18      	ldr	r2, [sp, #96]	; 0x60
   13906:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   13908:	429a      	cmp	r2, r3
   1390a:	d110      	bne.n	1392e <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x336>
   1390c:	f89d 305f 	ldrb.w	r3, [sp, #95]	; 0x5f
   13910:	2b00      	cmp	r3, #0
   13912:	d109      	bne.n	13928 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x330>
   13914:	9b20      	ldr	r3, [sp, #128]	; 0x80
   13916:	f003 0304 	and.w	r3, r3, #4
   1391a:	2b00      	cmp	r3, #0
   1391c:	d104      	bne.n	13928 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x330>
   1391e:	9b20      	ldr	r3, [sp, #128]	; 0x80
   13920:	f003 0308 	and.w	r3, r3, #8
   13924:	2b00      	cmp	r3, #0
   13926:	d002      	beq.n	1392e <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x336>
    len--;
   13928:	9b18      	ldr	r3, [sp, #96]	; 0x60
   1392a:	3b01      	subs	r3, #1
   1392c:	9318      	str	r3, [sp, #96]	; 0x60
  }
  if (len < PRINTF_FTOA_BUFFER_SIZE) {
   1392e:	9b18      	ldr	r3, [sp, #96]	; 0x60
   13930:	2b1f      	cmp	r3, #31
   13932:	d827      	bhi.n	13984 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x38c>
    if (negative) {
   13934:	f89d 305f 	ldrb.w	r3, [sp, #95]	; 0x5f
   13938:	2b00      	cmp	r3, #0
   1393a:	d008      	beq.n	1394e <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x356>
      buf[len++] = '-';
   1393c:	9b18      	ldr	r3, [sp, #96]	; 0x60
   1393e:	1c5a      	adds	r2, r3, #1
   13940:	9218      	str	r2, [sp, #96]	; 0x60
   13942:	aa1a      	add	r2, sp, #104	; 0x68
   13944:	4413      	add	r3, r2
   13946:	222d      	movs	r2, #45	; 0x2d
   13948:	f803 2c50 	strb.w	r2, [r3, #-80]
   1394c:	e01a      	b.n	13984 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x38c>
    }
    else if (flags & FLAGS_PLUS) {
   1394e:	9b20      	ldr	r3, [sp, #128]	; 0x80
   13950:	f003 0304 	and.w	r3, r3, #4
   13954:	2b00      	cmp	r3, #0
   13956:	d008      	beq.n	1396a <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x372>
      buf[len++] = '+';  // ignore the space if the '+' exists
   13958:	9b18      	ldr	r3, [sp, #96]	; 0x60
   1395a:	1c5a      	adds	r2, r3, #1
   1395c:	9218      	str	r2, [sp, #96]	; 0x60
   1395e:	aa1a      	add	r2, sp, #104	; 0x68
   13960:	4413      	add	r3, r2
   13962:	222b      	movs	r2, #43	; 0x2b
   13964:	f803 2c50 	strb.w	r2, [r3, #-80]
   13968:	e00c      	b.n	13984 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x38c>
    }
    else if (flags & FLAGS_SPACE) {
   1396a:	9b20      	ldr	r3, [sp, #128]	; 0x80
   1396c:	f003 0308 	and.w	r3, r3, #8
   13970:	2b00      	cmp	r3, #0
   13972:	d007      	beq.n	13984 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x38c>
      buf[len++] = ' ';
   13974:	9b18      	ldr	r3, [sp, #96]	; 0x60
   13976:	1c5a      	adds	r2, r3, #1
   13978:	9218      	str	r2, [sp, #96]	; 0x60
   1397a:	aa1a      	add	r2, sp, #104	; 0x68
   1397c:	4413      	add	r3, r2
   1397e:	2220      	movs	r2, #32
   13980:	f803 2c50 	strb.w	r2, [r3, #-80]
    }
  }

  // pad spaces up to given width
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
   13984:	9b20      	ldr	r3, [sp, #128]	; 0x80
   13986:	f003 0302 	and.w	r3, r3, #2
   1398a:	2b00      	cmp	r3, #0
   1398c:	d116      	bne.n	139bc <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x3c4>
   1398e:	9b20      	ldr	r3, [sp, #128]	; 0x80
   13990:	f003 0301 	and.w	r3, r3, #1
   13994:	2b00      	cmp	r3, #0
   13996:	d111      	bne.n	139bc <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x3c4>
    for (size_t i = len; i < width; i++) {
   13998:	9b18      	ldr	r3, [sp, #96]	; 0x60
   1399a:	9313      	str	r3, [sp, #76]	; 0x4c
   1399c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   1399e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   139a0:	429a      	cmp	r2, r3
   139a2:	d20b      	bcs.n	139bc <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x3c4>
      out(' ', buffer, idx++, maxlen);
   139a4:	9a03      	ldr	r2, [sp, #12]
   139a6:	1c53      	adds	r3, r2, #1
   139a8:	9303      	str	r3, [sp, #12]
   139aa:	9c05      	ldr	r4, [sp, #20]
   139ac:	9b02      	ldr	r3, [sp, #8]
   139ae:	9904      	ldr	r1, [sp, #16]
   139b0:	2020      	movs	r0, #32
   139b2:	47a0      	blx	r4
    for (size_t i = len; i < width; i++) {
   139b4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   139b6:	3301      	adds	r3, #1
   139b8:	9313      	str	r3, [sp, #76]	; 0x4c
   139ba:	e7ef      	b.n	1399c <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x3a4>
    }
  }

  // reverse string
  for (size_t i = 0U; i < len; i++) {
   139bc:	2300      	movs	r3, #0
   139be:	9312      	str	r3, [sp, #72]	; 0x48
   139c0:	9a12      	ldr	r2, [sp, #72]	; 0x48
   139c2:	9b18      	ldr	r3, [sp, #96]	; 0x60
   139c4:	429a      	cmp	r2, r3
   139c6:	d212      	bcs.n	139ee <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x3f6>
    out(buf[len - i - 1U], buffer, idx++, maxlen);
   139c8:	9a18      	ldr	r2, [sp, #96]	; 0x60
   139ca:	9b12      	ldr	r3, [sp, #72]	; 0x48
   139cc:	1ad3      	subs	r3, r2, r3
   139ce:	3b01      	subs	r3, #1
   139d0:	aa1a      	add	r2, sp, #104	; 0x68
   139d2:	4413      	add	r3, r2
   139d4:	f813 0c50 	ldrb.w	r0, [r3, #-80]
   139d8:	9a03      	ldr	r2, [sp, #12]
   139da:	1c53      	adds	r3, r2, #1
   139dc:	9303      	str	r3, [sp, #12]
   139de:	9c05      	ldr	r4, [sp, #20]
   139e0:	9b02      	ldr	r3, [sp, #8]
   139e2:	9904      	ldr	r1, [sp, #16]
   139e4:	47a0      	blx	r4
  for (size_t i = 0U; i < len; i++) {
   139e6:	9b12      	ldr	r3, [sp, #72]	; 0x48
   139e8:	3301      	adds	r3, #1
   139ea:	9312      	str	r3, [sp, #72]	; 0x48
   139ec:	e7e8      	b.n	139c0 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x3c8>
  }

  // append pad spaces up to given width
  if (flags & FLAGS_LEFT) {
   139ee:	9b20      	ldr	r3, [sp, #128]	; 0x80
   139f0:	f003 0302 	and.w	r3, r3, #2
   139f4:	2b00      	cmp	r3, #0
   139f6:	d00e      	beq.n	13a16 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x41e>
    while (idx - start_idx < width) {
   139f8:	9a03      	ldr	r2, [sp, #12]
   139fa:	9b11      	ldr	r3, [sp, #68]	; 0x44
   139fc:	1ad3      	subs	r3, r2, r3
   139fe:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   13a00:	429a      	cmp	r2, r3
   13a02:	d908      	bls.n	13a16 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x41e>
      out(' ', buffer, idx++, maxlen);
   13a04:	9a03      	ldr	r2, [sp, #12]
   13a06:	1c53      	adds	r3, r2, #1
   13a08:	9303      	str	r3, [sp, #12]
   13a0a:	9c05      	ldr	r4, [sp, #20]
   13a0c:	9b02      	ldr	r3, [sp, #8]
   13a0e:	9904      	ldr	r1, [sp, #16]
   13a10:	2020      	movs	r0, #32
   13a12:	47a0      	blx	r4
    while (idx - start_idx < width) {
   13a14:	e7f0      	b.n	139f8 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x400>
    }
  }

  return idx;
   13a16:	9c03      	ldr	r4, [sp, #12]
   13a18:	462b      	mov	r3, r5
   13a1a:	4619      	mov	r1, r3
   13a1c:	4803      	ldr	r0, [pc, #12]	; (13a2c <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x434>)
   13a1e:	f7ff fa3b 	bl	12e98 <__cyg_profile_func_exit>
   13a22:	4623      	mov	r3, r4
}
   13a24:	4618      	mov	r0, r3
   13a26:	b01b      	add	sp, #108	; 0x6c
   13a28:	bd30      	pop	{r4, r5, pc}
   13a2a:	bf00      	nop
   13a2c:	000135f9 	.word	0x000135f9

00013a30 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)>:
#endif  // PRINTF_SUPPORT_FLOAT


// internal vsnprintf
static int _vsnprintf(out_fct_type out, char* buffer, const size_t maxlen, const char* format, va_list va)
{
   13a30:	b570      	push	{r4, r5, r6, lr}
   13a32:	b0a0      	sub	sp, #128	; 0x80
   13a34:	4676      	mov	r6, lr
   13a36:	900d      	str	r0, [sp, #52]	; 0x34
   13a38:	910c      	str	r1, [sp, #48]	; 0x30
   13a3a:	920b      	str	r2, [sp, #44]	; 0x2c
   13a3c:	930a      	str	r3, [sp, #40]	; 0x28
   13a3e:	4633      	mov	r3, r6
   13a40:	4619      	mov	r1, r3
   13a42:	48a7      	ldr	r0, [pc, #668]	; (13ce0 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2b0>)
   13a44:	f7ff fa14 	bl	12e70 <__cyg_profile_func_enter>
  unsigned int flags, width, precision, n;
  size_t idx = 0U;
   13a48:	2300      	movs	r3, #0
   13a4a:	931b      	str	r3, [sp, #108]	; 0x6c

  if (!buffer) {
   13a4c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   13a4e:	2b00      	cmp	r3, #0
   13a50:	d101      	bne.n	13a56 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x26>
    // use null output function
    out = _out_null;
   13a52:	4ba4      	ldr	r3, [pc, #656]	; (13ce4 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2b4>)
   13a54:	930d      	str	r3, [sp, #52]	; 0x34
  }

  while (*format)
   13a56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13a58:	781b      	ldrb	r3, [r3, #0]
   13a5a:	2b00      	cmp	r3, #0
   13a5c:	f000 8448 	beq.w	142f0 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8c0>
  {
    // format specifier?  %[flags][width][.precision][length]
    if (*format != '%') {
   13a60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13a62:	781b      	ldrb	r3, [r3, #0]
   13a64:	2b25      	cmp	r3, #37	; 0x25
   13a66:	d00d      	beq.n	13a84 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x54>
      // no
      out(*format, buffer, idx++, maxlen);
   13a68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13a6a:	7818      	ldrb	r0, [r3, #0]
   13a6c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   13a6e:	1c53      	adds	r3, r2, #1
   13a70:	931b      	str	r3, [sp, #108]	; 0x6c
   13a72:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   13a74:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   13a76:	990c      	ldr	r1, [sp, #48]	; 0x30
   13a78:	47a0      	blx	r4
      format++;
   13a7a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13a7c:	3301      	adds	r3, #1
   13a7e:	930a      	str	r3, [sp, #40]	; 0x28
      continue;
   13a80:	f000 bc34 	b.w	142ec <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8bc>
    }
    else {
      // yes, evaluate it
      format++;
   13a84:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13a86:	3301      	adds	r3, #1
   13a88:	930a      	str	r3, [sp, #40]	; 0x28
    }

    // evaluate flags
    flags = 0U;
   13a8a:	2300      	movs	r3, #0
   13a8c:	931f      	str	r3, [sp, #124]	; 0x7c
    do {
      switch (*format) {
   13a8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13a90:	781b      	ldrb	r3, [r3, #0]
   13a92:	3b20      	subs	r3, #32
   13a94:	2b10      	cmp	r3, #16
   13a96:	d857      	bhi.n	13b48 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x118>
   13a98:	a201      	add	r2, pc, #4	; (adr r2, 13aa0 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x70>)
   13a9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   13a9e:	bf00      	nop
   13aa0:	00013b21 	.word	0x00013b21
   13aa4:	00013b49 	.word	0x00013b49
   13aa8:	00013b49 	.word	0x00013b49
   13aac:	00013b35 	.word	0x00013b35
   13ab0:	00013b49 	.word	0x00013b49
   13ab4:	00013b49 	.word	0x00013b49
   13ab8:	00013b49 	.word	0x00013b49
   13abc:	00013b49 	.word	0x00013b49
   13ac0:	00013b49 	.word	0x00013b49
   13ac4:	00013b49 	.word	0x00013b49
   13ac8:	00013b49 	.word	0x00013b49
   13acc:	00013b0d 	.word	0x00013b0d
   13ad0:	00013b49 	.word	0x00013b49
   13ad4:	00013af9 	.word	0x00013af9
   13ad8:	00013b49 	.word	0x00013b49
   13adc:	00013b49 	.word	0x00013b49
   13ae0:	00013ae5 	.word	0x00013ae5
        case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
   13ae4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   13ae6:	f043 0301 	orr.w	r3, r3, #1
   13aea:	931f      	str	r3, [sp, #124]	; 0x7c
   13aec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13aee:	3301      	adds	r3, #1
   13af0:	930a      	str	r3, [sp, #40]	; 0x28
   13af2:	2301      	movs	r3, #1
   13af4:	931c      	str	r3, [sp, #112]	; 0x70
   13af6:	e02a      	b.n	13b4e <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x11e>
        case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
   13af8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   13afa:	f043 0302 	orr.w	r3, r3, #2
   13afe:	931f      	str	r3, [sp, #124]	; 0x7c
   13b00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13b02:	3301      	adds	r3, #1
   13b04:	930a      	str	r3, [sp, #40]	; 0x28
   13b06:	2301      	movs	r3, #1
   13b08:	931c      	str	r3, [sp, #112]	; 0x70
   13b0a:	e020      	b.n	13b4e <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x11e>
        case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
   13b0c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   13b0e:	f043 0304 	orr.w	r3, r3, #4
   13b12:	931f      	str	r3, [sp, #124]	; 0x7c
   13b14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13b16:	3301      	adds	r3, #1
   13b18:	930a      	str	r3, [sp, #40]	; 0x28
   13b1a:	2301      	movs	r3, #1
   13b1c:	931c      	str	r3, [sp, #112]	; 0x70
   13b1e:	e016      	b.n	13b4e <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x11e>
        case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
   13b20:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   13b22:	f043 0308 	orr.w	r3, r3, #8
   13b26:	931f      	str	r3, [sp, #124]	; 0x7c
   13b28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13b2a:	3301      	adds	r3, #1
   13b2c:	930a      	str	r3, [sp, #40]	; 0x28
   13b2e:	2301      	movs	r3, #1
   13b30:	931c      	str	r3, [sp, #112]	; 0x70
   13b32:	e00c      	b.n	13b4e <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x11e>
        case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;
   13b34:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   13b36:	f043 0310 	orr.w	r3, r3, #16
   13b3a:	931f      	str	r3, [sp, #124]	; 0x7c
   13b3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13b3e:	3301      	adds	r3, #1
   13b40:	930a      	str	r3, [sp, #40]	; 0x28
   13b42:	2301      	movs	r3, #1
   13b44:	931c      	str	r3, [sp, #112]	; 0x70
   13b46:	e002      	b.n	13b4e <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x11e>
        default :                                   n = 0U; break;
   13b48:	2300      	movs	r3, #0
   13b4a:	931c      	str	r3, [sp, #112]	; 0x70
   13b4c:	bf00      	nop
      }
    } while (n);
   13b4e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
   13b50:	2b00      	cmp	r3, #0
   13b52:	d000      	beq.n	13b56 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x126>
    do {
   13b54:	e79b      	b.n	13a8e <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x5e>

    // evaluate width field
    width = 0U;
   13b56:	2300      	movs	r3, #0
   13b58:	931e      	str	r3, [sp, #120]	; 0x78
    if (_is_digit(*format)) {
   13b5a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13b5c:	781b      	ldrb	r3, [r3, #0]
   13b5e:	4618      	mov	r0, r3
   13b60:	f7ff fade 	bl	13120 <_is_digit(char)>
   13b64:	4603      	mov	r3, r0
   13b66:	2b00      	cmp	r3, #0
   13b68:	d005      	beq.n	13b76 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x146>
      width = _atoi(&format);
   13b6a:	ab0a      	add	r3, sp, #40	; 0x28
   13b6c:	4618      	mov	r0, r3
   13b6e:	f7ff faf9 	bl	13164 <_atoi(char const**)>
   13b72:	901e      	str	r0, [sp, #120]	; 0x78
   13b74:	e018      	b.n	13ba8 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x178>
    }
    else if (*format == '*') {
   13b76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13b78:	781b      	ldrb	r3, [r3, #0]
   13b7a:	2b2a      	cmp	r3, #42	; 0x2a
   13b7c:	d114      	bne.n	13ba8 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x178>
      const int w = va_arg(va, int);
   13b7e:	9b24      	ldr	r3, [sp, #144]	; 0x90
   13b80:	1d1a      	adds	r2, r3, #4
   13b82:	9224      	str	r2, [sp, #144]	; 0x90
   13b84:	681b      	ldr	r3, [r3, #0]
   13b86:	9316      	str	r3, [sp, #88]	; 0x58
      if (w < 0) {
   13b88:	9b16      	ldr	r3, [sp, #88]	; 0x58
   13b8a:	2b00      	cmp	r3, #0
   13b8c:	da07      	bge.n	13b9e <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x16e>
        flags |= FLAGS_LEFT;    // reverse padding
   13b8e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   13b90:	f043 0302 	orr.w	r3, r3, #2
   13b94:	931f      	str	r3, [sp, #124]	; 0x7c
        width = (unsigned int)-w;
   13b96:	9b16      	ldr	r3, [sp, #88]	; 0x58
   13b98:	425b      	negs	r3, r3
   13b9a:	931e      	str	r3, [sp, #120]	; 0x78
   13b9c:	e001      	b.n	13ba2 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x172>
      }
      else {
        width = (unsigned int)w;
   13b9e:	9b16      	ldr	r3, [sp, #88]	; 0x58
   13ba0:	931e      	str	r3, [sp, #120]	; 0x78
      }
      format++;
   13ba2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13ba4:	3301      	adds	r3, #1
   13ba6:	930a      	str	r3, [sp, #40]	; 0x28
    }

    // evaluate precision field
    precision = 0U;
   13ba8:	2300      	movs	r3, #0
   13baa:	931d      	str	r3, [sp, #116]	; 0x74
    if (*format == '.') {
   13bac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13bae:	781b      	ldrb	r3, [r3, #0]
   13bb0:	2b2e      	cmp	r3, #46	; 0x2e
   13bb2:	d124      	bne.n	13bfe <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x1ce>
      flags |= FLAGS_PRECISION;
   13bb4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   13bb6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
   13bba:	931f      	str	r3, [sp, #124]	; 0x7c
      format++;
   13bbc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13bbe:	3301      	adds	r3, #1
   13bc0:	930a      	str	r3, [sp, #40]	; 0x28
      if (_is_digit(*format)) {
   13bc2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13bc4:	781b      	ldrb	r3, [r3, #0]
   13bc6:	4618      	mov	r0, r3
   13bc8:	f7ff faaa 	bl	13120 <_is_digit(char)>
   13bcc:	4603      	mov	r3, r0
   13bce:	2b00      	cmp	r3, #0
   13bd0:	d005      	beq.n	13bde <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x1ae>
        precision = _atoi(&format);
   13bd2:	ab0a      	add	r3, sp, #40	; 0x28
   13bd4:	4618      	mov	r0, r3
   13bd6:	f7ff fac5 	bl	13164 <_atoi(char const**)>
   13bda:	901d      	str	r0, [sp, #116]	; 0x74
   13bdc:	e00f      	b.n	13bfe <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x1ce>
      }
      else if (*format == '*') {
   13bde:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13be0:	781b      	ldrb	r3, [r3, #0]
   13be2:	2b2a      	cmp	r3, #42	; 0x2a
   13be4:	d10b      	bne.n	13bfe <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x1ce>
        const int prec = (int)va_arg(va, int);
   13be6:	9b24      	ldr	r3, [sp, #144]	; 0x90
   13be8:	1d1a      	adds	r2, r3, #4
   13bea:	9224      	str	r2, [sp, #144]	; 0x90
   13bec:	681b      	ldr	r3, [r3, #0]
   13bee:	9315      	str	r3, [sp, #84]	; 0x54
        precision = prec > 0 ? (unsigned int)prec : 0U;
   13bf0:	9b15      	ldr	r3, [sp, #84]	; 0x54
   13bf2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   13bf6:	931d      	str	r3, [sp, #116]	; 0x74
        format++;
   13bf8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13bfa:	3301      	adds	r3, #1
   13bfc:	930a      	str	r3, [sp, #40]	; 0x28
      }
    }

    // evaluate length field
    switch (*format) {
   13bfe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13c00:	781b      	ldrb	r3, [r3, #0]
   13c02:	3b68      	subs	r3, #104	; 0x68
   13c04:	2b12      	cmp	r3, #18
   13c06:	d867      	bhi.n	13cd8 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2a8>
   13c08:	a201      	add	r2, pc, #4	; (adr r2, 13c10 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x1e0>)
   13c0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   13c0e:	bf00      	nop
   13c10:	00013c83 	.word	0x00013c83
   13c14:	00013cd9 	.word	0x00013cd9
   13c18:	00013cb9 	.word	0x00013cb9
   13c1c:	00013cd9 	.word	0x00013cd9
   13c20:	00013c5d 	.word	0x00013c5d
   13c24:	00013cd9 	.word	0x00013cd9
   13c28:	00013cd9 	.word	0x00013cd9
   13c2c:	00013cd9 	.word	0x00013cd9
   13c30:	00013cd9 	.word	0x00013cd9
   13c34:	00013cd9 	.word	0x00013cd9
   13c38:	00013cd9 	.word	0x00013cd9
   13c3c:	00013cd9 	.word	0x00013cd9
   13c40:	00013ca9 	.word	0x00013ca9
   13c44:	00013cd9 	.word	0x00013cd9
   13c48:	00013cd9 	.word	0x00013cd9
   13c4c:	00013cd9 	.word	0x00013cd9
   13c50:	00013cd9 	.word	0x00013cd9
   13c54:	00013cd9 	.word	0x00013cd9
   13c58:	00013cc9 	.word	0x00013cc9
      case 'l' :
        flags |= FLAGS_LONG;
   13c5c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   13c5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   13c62:	931f      	str	r3, [sp, #124]	; 0x7c
        format++;
   13c64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13c66:	3301      	adds	r3, #1
   13c68:	930a      	str	r3, [sp, #40]	; 0x28
        if (*format == 'l') {
   13c6a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13c6c:	781b      	ldrb	r3, [r3, #0]
   13c6e:	2b6c      	cmp	r3, #108	; 0x6c
   13c70:	d134      	bne.n	13cdc <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2ac>
          flags |= FLAGS_LONG_LONG;
   13c72:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   13c74:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   13c78:	931f      	str	r3, [sp, #124]	; 0x7c
          format++;
   13c7a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13c7c:	3301      	adds	r3, #1
   13c7e:	930a      	str	r3, [sp, #40]	; 0x28
        }
        break;
   13c80:	e02c      	b.n	13cdc <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2ac>
      case 'h' :
        flags |= FLAGS_SHORT;
   13c82:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   13c84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   13c88:	931f      	str	r3, [sp, #124]	; 0x7c
        format++;
   13c8a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13c8c:	3301      	adds	r3, #1
   13c8e:	930a      	str	r3, [sp, #40]	; 0x28
        if (*format == 'h') {
   13c90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13c92:	781b      	ldrb	r3, [r3, #0]
   13c94:	2b68      	cmp	r3, #104	; 0x68
   13c96:	d127      	bne.n	13ce8 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2b8>
          flags |= FLAGS_CHAR;
   13c98:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   13c9a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   13c9e:	931f      	str	r3, [sp, #124]	; 0x7c
          format++;
   13ca0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13ca2:	3301      	adds	r3, #1
   13ca4:	930a      	str	r3, [sp, #40]	; 0x28
        }
        break;
   13ca6:	e01f      	b.n	13ce8 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2b8>
#if defined(PRINTF_SUPPORT_PTRDIFF_T)
      case 't' :
        flags |= (sizeof(ptrdiff_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
   13ca8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   13caa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   13cae:	931f      	str	r3, [sp, #124]	; 0x7c
        format++;
   13cb0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13cb2:	3301      	adds	r3, #1
   13cb4:	930a      	str	r3, [sp, #40]	; 0x28
        break;
   13cb6:	e018      	b.n	13cea <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2ba>
#endif
      case 'j' :
        flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
   13cb8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   13cba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   13cbe:	931f      	str	r3, [sp, #124]	; 0x7c
        format++;
   13cc0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13cc2:	3301      	adds	r3, #1
   13cc4:	930a      	str	r3, [sp, #40]	; 0x28
        break;
   13cc6:	e010      	b.n	13cea <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2ba>
      case 'z' :
        flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
   13cc8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   13cca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   13cce:	931f      	str	r3, [sp, #124]	; 0x7c
        format++;
   13cd0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13cd2:	3301      	adds	r3, #1
   13cd4:	930a      	str	r3, [sp, #40]	; 0x28
        break;
   13cd6:	e008      	b.n	13cea <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2ba>
      default :
        break;
   13cd8:	bf00      	nop
   13cda:	e006      	b.n	13cea <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2ba>
        break;
   13cdc:	bf00      	nop
   13cde:	e004      	b.n	13cea <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2ba>
   13ce0:	00013a31 	.word	0x00013a31
   13ce4:	00013069 	.word	0x00013069
        break;
   13ce8:	bf00      	nop
    }

    // evaluate specifier
    switch (*format) {
   13cea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13cec:	781b      	ldrb	r3, [r3, #0]
   13cee:	3b25      	subs	r3, #37	; 0x25
   13cf0:	2b53      	cmp	r3, #83	; 0x53
   13cf2:	f200 82ee 	bhi.w	142d2 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8a2>
   13cf6:	a201      	add	r2, pc, #4	; (adr r2, 13cfc <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2cc>)
   13cf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   13cfc:	000142bb 	.word	0x000142bb
   13d00:	000142d3 	.word	0x000142d3
   13d04:	000142d3 	.word	0x000142d3
   13d08:	000142d3 	.word	0x000142d3
   13d0c:	000142d3 	.word	0x000142d3
   13d10:	000142d3 	.word	0x000142d3
   13d14:	000142d3 	.word	0x000142d3
   13d18:	000142d3 	.word	0x000142d3
   13d1c:	000142d3 	.word	0x000142d3
   13d20:	000142d3 	.word	0x000142d3
   13d24:	000142d3 	.word	0x000142d3
   13d28:	000142d3 	.word	0x000142d3
   13d2c:	000142d3 	.word	0x000142d3
   13d30:	000142d3 	.word	0x000142d3
   13d34:	000142d3 	.word	0x000142d3
   13d38:	000142d3 	.word	0x000142d3
   13d3c:	000142d3 	.word	0x000142d3
   13d40:	000142d3 	.word	0x000142d3
   13d44:	000142d3 	.word	0x000142d3
   13d48:	000142d3 	.word	0x000142d3
   13d4c:	000142d3 	.word	0x000142d3
   13d50:	000142d3 	.word	0x000142d3
   13d54:	000142d3 	.word	0x000142d3
   13d58:	000142d3 	.word	0x000142d3
   13d5c:	000142d3 	.word	0x000142d3
   13d60:	000142d3 	.word	0x000142d3
   13d64:	000142d3 	.word	0x000142d3
   13d68:	000142d3 	.word	0x000142d3
   13d6c:	000142d3 	.word	0x000142d3
   13d70:	000142d3 	.word	0x000142d3
   13d74:	000142d3 	.word	0x000142d3
   13d78:	000142d3 	.word	0x000142d3
   13d7c:	000142d3 	.word	0x000142d3
   13d80:	000140d9 	.word	0x000140d9
   13d84:	000142d3 	.word	0x000142d3
   13d88:	000142d3 	.word	0x000142d3
   13d8c:	000142d3 	.word	0x000142d3
   13d90:	000142d3 	.word	0x000142d3
   13d94:	000142d3 	.word	0x000142d3
   13d98:	000142d3 	.word	0x000142d3
   13d9c:	000142d3 	.word	0x000142d3
   13da0:	000142d3 	.word	0x000142d3
   13da4:	000142d3 	.word	0x000142d3
   13da8:	000142d3 	.word	0x000142d3
   13dac:	000142d3 	.word	0x000142d3
   13db0:	000142d3 	.word	0x000142d3
   13db4:	000142d3 	.word	0x000142d3
   13db8:	000142d3 	.word	0x000142d3
   13dbc:	000142d3 	.word	0x000142d3
   13dc0:	000142d3 	.word	0x000142d3
   13dc4:	000142d3 	.word	0x000142d3
   13dc8:	00013e4d 	.word	0x00013e4d
   13dcc:	000142d3 	.word	0x000142d3
   13dd0:	000142d3 	.word	0x000142d3
   13dd4:	000142d3 	.word	0x000142d3
   13dd8:	000142d3 	.word	0x000142d3
   13ddc:	000142d3 	.word	0x000142d3
   13de0:	000142d3 	.word	0x000142d3
   13de4:	000142d3 	.word	0x000142d3
   13de8:	000142d3 	.word	0x000142d3
   13dec:	000142d3 	.word	0x000142d3
   13df0:	00013e4d 	.word	0x00013e4d
   13df4:	00014115 	.word	0x00014115
   13df8:	00013e4d 	.word	0x00013e4d
   13dfc:	000142d3 	.word	0x000142d3
   13e00:	000140d9 	.word	0x000140d9
   13e04:	000142d3 	.word	0x000142d3
   13e08:	000142d3 	.word	0x000142d3
   13e0c:	00013e4d 	.word	0x00013e4d
   13e10:	000142d3 	.word	0x000142d3
   13e14:	000142d3 	.word	0x000142d3
   13e18:	000142d3 	.word	0x000142d3
   13e1c:	000142d3 	.word	0x000142d3
   13e20:	000142d3 	.word	0x000142d3
   13e24:	00013e4d 	.word	0x00013e4d
   13e28:	00014273 	.word	0x00014273
   13e2c:	000142d3 	.word	0x000142d3
   13e30:	000142d3 	.word	0x000142d3
   13e34:	0001419d 	.word	0x0001419d
   13e38:	000142d3 	.word	0x000142d3
   13e3c:	00013e4d 	.word	0x00013e4d
   13e40:	000142d3 	.word	0x000142d3
   13e44:	000142d3 	.word	0x000142d3
   13e48:	00013e4d 	.word	0x00013e4d
      case 'X' :
      case 'o' :
      case 'b' : {
        // set the base
        unsigned int base;
        if (*format == 'x' || *format == 'X') {
   13e4c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13e4e:	781b      	ldrb	r3, [r3, #0]
   13e50:	2b78      	cmp	r3, #120	; 0x78
   13e52:	d003      	beq.n	13e5c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x42c>
   13e54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13e56:	781b      	ldrb	r3, [r3, #0]
   13e58:	2b58      	cmp	r3, #88	; 0x58
   13e5a:	d102      	bne.n	13e62 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x432>
          base = 16U;
   13e5c:	2310      	movs	r3, #16
   13e5e:	931a      	str	r3, [sp, #104]	; 0x68
   13e60:	e013      	b.n	13e8a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x45a>
        }
        else if (*format == 'o') {
   13e62:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13e64:	781b      	ldrb	r3, [r3, #0]
   13e66:	2b6f      	cmp	r3, #111	; 0x6f
   13e68:	d102      	bne.n	13e70 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x440>
          base =  8U;
   13e6a:	2308      	movs	r3, #8
   13e6c:	931a      	str	r3, [sp, #104]	; 0x68
   13e6e:	e00c      	b.n	13e8a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x45a>
        }
        else if (*format == 'b') {
   13e70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13e72:	781b      	ldrb	r3, [r3, #0]
   13e74:	2b62      	cmp	r3, #98	; 0x62
   13e76:	d102      	bne.n	13e7e <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x44e>
          base =  2U;
   13e78:	2302      	movs	r3, #2
   13e7a:	931a      	str	r3, [sp, #104]	; 0x68
   13e7c:	e005      	b.n	13e8a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x45a>
        }
        else {
          base = 10U;
   13e7e:	230a      	movs	r3, #10
   13e80:	931a      	str	r3, [sp, #104]	; 0x68
          flags &= ~FLAGS_HASH;   // no hash for dec format
   13e82:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   13e84:	f023 0310 	bic.w	r3, r3, #16
   13e88:	931f      	str	r3, [sp, #124]	; 0x7c
        }
        // uppercase
        if (*format == 'X') {
   13e8a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13e8c:	781b      	ldrb	r3, [r3, #0]
   13e8e:	2b58      	cmp	r3, #88	; 0x58
   13e90:	d103      	bne.n	13e9a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x46a>
          flags |= FLAGS_UPPERCASE;
   13e92:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   13e94:	f043 0320 	orr.w	r3, r3, #32
   13e98:	931f      	str	r3, [sp, #124]	; 0x7c
        }

        // no plus or space flag for u, x, X, o, b
        if ((*format != 'i') && (*format != 'd')) {
   13e9a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13e9c:	781b      	ldrb	r3, [r3, #0]
   13e9e:	2b69      	cmp	r3, #105	; 0x69
   13ea0:	d007      	beq.n	13eb2 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x482>
   13ea2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13ea4:	781b      	ldrb	r3, [r3, #0]
   13ea6:	2b64      	cmp	r3, #100	; 0x64
   13ea8:	d003      	beq.n	13eb2 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x482>
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
   13eaa:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   13eac:	f023 030c 	bic.w	r3, r3, #12
   13eb0:	931f      	str	r3, [sp, #124]	; 0x7c
        }

        // ignore '0' flag when precision is given
        if (flags & FLAGS_PRECISION) {
   13eb2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   13eb4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
   13eb8:	2b00      	cmp	r3, #0
   13eba:	d003      	beq.n	13ec4 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x494>
          flags &= ~FLAGS_ZEROPAD;
   13ebc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   13ebe:	f023 0301 	bic.w	r3, r3, #1
   13ec2:	931f      	str	r3, [sp, #124]	; 0x7c
        }

        // convert the integer
        if ((*format == 'i') || (*format == 'd')) {
   13ec4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13ec6:	781b      	ldrb	r3, [r3, #0]
   13ec8:	2b69      	cmp	r3, #105	; 0x69
   13eca:	d004      	beq.n	13ed6 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x4a6>
   13ecc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13ece:	781b      	ldrb	r3, [r3, #0]
   13ed0:	2b64      	cmp	r3, #100	; 0x64
   13ed2:	f040 808d 	bne.w	13ff0 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x5c0>
          // signed
          if (flags & FLAGS_LONG_LONG) {
   13ed6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   13ed8:	f403 7300 	and.w	r3, r3, #512	; 0x200
   13edc:	2b00      	cmp	r3, #0
   13ede:	d02e      	beq.n	13f3e <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x50e>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            const long long value = va_arg(va, long long);
   13ee0:	9b24      	ldr	r3, [sp, #144]	; 0x90
   13ee2:	3307      	adds	r3, #7
   13ee4:	f023 0307 	bic.w	r3, r3, #7
   13ee8:	f103 0208 	add.w	r2, r3, #8
   13eec:	9224      	str	r2, [sp, #144]	; 0x90
   13eee:	e9d3 3400 	ldrd	r3, r4, [r3]
   13ef2:	e9cd 340e 	strd	r3, r4, [sp, #56]	; 0x38
            idx = _ntoa_long_long(out, buffer, idx, maxlen, (unsigned long long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
   13ef6:	e9dd 340e 	ldrd	r3, r4, [sp, #56]	; 0x38
   13efa:	2b00      	cmp	r3, #0
   13efc:	f174 0200 	sbcs.w	r2, r4, #0
   13f00:	da02      	bge.n	13f08 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x4d8>
   13f02:	425b      	negs	r3, r3
   13f04:	eb64 0444 	sbc.w	r4, r4, r4, lsl #1
   13f08:	4619      	mov	r1, r3
   13f0a:	4622      	mov	r2, r4
   13f0c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   13f0e:	0fdb      	lsrs	r3, r3, #31
   13f10:	b2d8      	uxtb	r0, r3
   13f12:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   13f14:	f04f 0400 	mov.w	r4, #0
   13f18:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
   13f1a:	9508      	str	r5, [sp, #32]
   13f1c:	9d1e      	ldr	r5, [sp, #120]	; 0x78
   13f1e:	9507      	str	r5, [sp, #28]
   13f20:	9d1d      	ldr	r5, [sp, #116]	; 0x74
   13f22:	9506      	str	r5, [sp, #24]
   13f24:	e9cd 3404 	strd	r3, r4, [sp, #16]
   13f28:	9002      	str	r0, [sp, #8]
   13f2a:	e9cd 1200 	strd	r1, r2, [sp]
   13f2e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   13f30:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   13f32:	990c      	ldr	r1, [sp, #48]	; 0x30
   13f34:	980d      	ldr	r0, [sp, #52]	; 0x34
   13f36:	f7ff fae5 	bl	13504 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)>
   13f3a:	901b      	str	r0, [sp, #108]	; 0x6c
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
          }
          else {
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
          }
   13f3c:	e0c8      	b.n	140d0 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x6a0>
          else if (flags & FLAGS_LONG) {
   13f3e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   13f40:	f403 7380 	and.w	r3, r3, #256	; 0x100
   13f44:	2b00      	cmp	r3, #0
   13f46:	d01e      	beq.n	13f86 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x556>
            const long value = va_arg(va, long);
   13f48:	9b24      	ldr	r3, [sp, #144]	; 0x90
   13f4a:	1d1a      	adds	r2, r3, #4
   13f4c:	9224      	str	r2, [sp, #144]	; 0x90
   13f4e:	681b      	ldr	r3, [r3, #0]
   13f50:	9311      	str	r3, [sp, #68]	; 0x44
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
   13f52:	9b11      	ldr	r3, [sp, #68]	; 0x44
   13f54:	2b00      	cmp	r3, #0
   13f56:	bfb8      	it	lt
   13f58:	425b      	neglt	r3, r3
   13f5a:	4619      	mov	r1, r3
   13f5c:	9b11      	ldr	r3, [sp, #68]	; 0x44
   13f5e:	0fdb      	lsrs	r3, r3, #31
   13f60:	b2db      	uxtb	r3, r3
   13f62:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   13f64:	9205      	str	r2, [sp, #20]
   13f66:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   13f68:	9204      	str	r2, [sp, #16]
   13f6a:	9a1d      	ldr	r2, [sp, #116]	; 0x74
   13f6c:	9203      	str	r2, [sp, #12]
   13f6e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   13f70:	9202      	str	r2, [sp, #8]
   13f72:	9301      	str	r3, [sp, #4]
   13f74:	9100      	str	r1, [sp, #0]
   13f76:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   13f78:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   13f7a:	990c      	ldr	r1, [sp, #48]	; 0x30
   13f7c:	980d      	ldr	r0, [sp, #52]	; 0x34
   13f7e:	f7ff fa4f 	bl	13420 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)>
   13f82:	901b      	str	r0, [sp, #108]	; 0x6c
          }
   13f84:	e0a4      	b.n	140d0 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x6a0>
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
   13f86:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   13f88:	f003 0340 	and.w	r3, r3, #64	; 0x40
   13f8c:	2b00      	cmp	r3, #0
   13f8e:	d005      	beq.n	13f9c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x56c>
   13f90:	9b24      	ldr	r3, [sp, #144]	; 0x90
   13f92:	1d1a      	adds	r2, r3, #4
   13f94:	9224      	str	r2, [sp, #144]	; 0x90
   13f96:	681b      	ldr	r3, [r3, #0]
   13f98:	b2db      	uxtb	r3, r3
   13f9a:	e00e      	b.n	13fba <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x58a>
   13f9c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   13f9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
   13fa2:	2b00      	cmp	r3, #0
   13fa4:	d005      	beq.n	13fb2 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x582>
   13fa6:	9b24      	ldr	r3, [sp, #144]	; 0x90
   13fa8:	1d1a      	adds	r2, r3, #4
   13faa:	9224      	str	r2, [sp, #144]	; 0x90
   13fac:	681b      	ldr	r3, [r3, #0]
   13fae:	b21b      	sxth	r3, r3
   13fb0:	e003      	b.n	13fba <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x58a>
   13fb2:	9b24      	ldr	r3, [sp, #144]	; 0x90
   13fb4:	1d1a      	adds	r2, r3, #4
   13fb6:	9224      	str	r2, [sp, #144]	; 0x90
   13fb8:	681b      	ldr	r3, [r3, #0]
   13fba:	9312      	str	r3, [sp, #72]	; 0x48
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
   13fbc:	9b12      	ldr	r3, [sp, #72]	; 0x48
   13fbe:	2b00      	cmp	r3, #0
   13fc0:	bfb8      	it	lt
   13fc2:	425b      	neglt	r3, r3
   13fc4:	4619      	mov	r1, r3
   13fc6:	9b12      	ldr	r3, [sp, #72]	; 0x48
   13fc8:	0fdb      	lsrs	r3, r3, #31
   13fca:	b2db      	uxtb	r3, r3
   13fcc:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   13fce:	9205      	str	r2, [sp, #20]
   13fd0:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   13fd2:	9204      	str	r2, [sp, #16]
   13fd4:	9a1d      	ldr	r2, [sp, #116]	; 0x74
   13fd6:	9203      	str	r2, [sp, #12]
   13fd8:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   13fda:	9202      	str	r2, [sp, #8]
   13fdc:	9301      	str	r3, [sp, #4]
   13fde:	9100      	str	r1, [sp, #0]
   13fe0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   13fe2:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   13fe4:	990c      	ldr	r1, [sp, #48]	; 0x30
   13fe6:	980d      	ldr	r0, [sp, #52]	; 0x34
   13fe8:	f7ff fa1a 	bl	13420 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)>
   13fec:	901b      	str	r0, [sp, #108]	; 0x6c
          }
   13fee:	e06f      	b.n	140d0 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x6a0>
        }
        else {
          // unsigned
          if (flags & FLAGS_LONG_LONG) {
   13ff0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   13ff2:	f403 7300 	and.w	r3, r3, #512	; 0x200
   13ff6:	2b00      	cmp	r3, #0
   13ff8:	d020      	beq.n	1403c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x60c>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base, precision, width, flags);
   13ffa:	9b24      	ldr	r3, [sp, #144]	; 0x90
   13ffc:	3307      	adds	r3, #7
   13ffe:	f023 0307 	bic.w	r3, r3, #7
   14002:	f103 0208 	add.w	r2, r3, #8
   14006:	9224      	str	r2, [sp, #144]	; 0x90
   14008:	e9d3 3400 	ldrd	r3, r4, [r3]
   1400c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   1400e:	4611      	mov	r1, r2
   14010:	f04f 0200 	mov.w	r2, #0
   14014:	981f      	ldr	r0, [sp, #124]	; 0x7c
   14016:	9008      	str	r0, [sp, #32]
   14018:	981e      	ldr	r0, [sp, #120]	; 0x78
   1401a:	9007      	str	r0, [sp, #28]
   1401c:	981d      	ldr	r0, [sp, #116]	; 0x74
   1401e:	9006      	str	r0, [sp, #24]
   14020:	e9cd 1204 	strd	r1, r2, [sp, #16]
   14024:	2200      	movs	r2, #0
   14026:	9202      	str	r2, [sp, #8]
   14028:	e9cd 3400 	strd	r3, r4, [sp]
   1402c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1402e:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   14030:	990c      	ldr	r1, [sp, #48]	; 0x30
   14032:	980d      	ldr	r0, [sp, #52]	; 0x34
   14034:	f7ff fa66 	bl	13504 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)>
   14038:	901b      	str	r0, [sp, #108]	; 0x6c
   1403a:	e049      	b.n	140d0 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x6a0>
#endif
          }
          else if (flags & FLAGS_LONG) {
   1403c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   1403e:	f403 7380 	and.w	r3, r3, #256	; 0x100
   14042:	2b00      	cmp	r3, #0
   14044:	d016      	beq.n	14074 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x644>
            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
   14046:	9b24      	ldr	r3, [sp, #144]	; 0x90
   14048:	1d1a      	adds	r2, r3, #4
   1404a:	9224      	str	r2, [sp, #144]	; 0x90
   1404c:	681b      	ldr	r3, [r3, #0]
   1404e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   14050:	9205      	str	r2, [sp, #20]
   14052:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   14054:	9204      	str	r2, [sp, #16]
   14056:	9a1d      	ldr	r2, [sp, #116]	; 0x74
   14058:	9203      	str	r2, [sp, #12]
   1405a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   1405c:	9202      	str	r2, [sp, #8]
   1405e:	2200      	movs	r2, #0
   14060:	9201      	str	r2, [sp, #4]
   14062:	9300      	str	r3, [sp, #0]
   14064:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   14066:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   14068:	990c      	ldr	r1, [sp, #48]	; 0x30
   1406a:	980d      	ldr	r0, [sp, #52]	; 0x34
   1406c:	f7ff f9d8 	bl	13420 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)>
   14070:	901b      	str	r0, [sp, #108]	; 0x6c
   14072:	e02d      	b.n	140d0 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x6a0>
          }
          else {
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
   14074:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   14076:	f003 0340 	and.w	r3, r3, #64	; 0x40
   1407a:	2b00      	cmp	r3, #0
   1407c:	d005      	beq.n	1408a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x65a>
   1407e:	9b24      	ldr	r3, [sp, #144]	; 0x90
   14080:	1d1a      	adds	r2, r3, #4
   14082:	9224      	str	r2, [sp, #144]	; 0x90
   14084:	681b      	ldr	r3, [r3, #0]
   14086:	b2db      	uxtb	r3, r3
   14088:	e00e      	b.n	140a8 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x678>
   1408a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   1408c:	f003 0380 	and.w	r3, r3, #128	; 0x80
   14090:	2b00      	cmp	r3, #0
   14092:	d005      	beq.n	140a0 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x670>
   14094:	9b24      	ldr	r3, [sp, #144]	; 0x90
   14096:	1d1a      	adds	r2, r3, #4
   14098:	9224      	str	r2, [sp, #144]	; 0x90
   1409a:	681b      	ldr	r3, [r3, #0]
   1409c:	b29b      	uxth	r3, r3
   1409e:	e003      	b.n	140a8 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x678>
   140a0:	9b24      	ldr	r3, [sp, #144]	; 0x90
   140a2:	1d1a      	adds	r2, r3, #4
   140a4:	9224      	str	r2, [sp, #144]	; 0x90
   140a6:	681b      	ldr	r3, [r3, #0]
   140a8:	9313      	str	r3, [sp, #76]	; 0x4c
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
   140aa:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   140ac:	9305      	str	r3, [sp, #20]
   140ae:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   140b0:	9304      	str	r3, [sp, #16]
   140b2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   140b4:	9303      	str	r3, [sp, #12]
   140b6:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   140b8:	9302      	str	r3, [sp, #8]
   140ba:	2300      	movs	r3, #0
   140bc:	9301      	str	r3, [sp, #4]
   140be:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   140c0:	9300      	str	r3, [sp, #0]
   140c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   140c4:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   140c6:	990c      	ldr	r1, [sp, #48]	; 0x30
   140c8:	980d      	ldr	r0, [sp, #52]	; 0x34
   140ca:	f7ff f9a9 	bl	13420 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)>
   140ce:	901b      	str	r0, [sp, #108]	; 0x6c
          }
        }
        format++;
   140d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   140d2:	3301      	adds	r3, #1
   140d4:	930a      	str	r3, [sp, #40]	; 0x28
        break;
   140d6:	e109      	b.n	142ec <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8bc>
      }
#if defined(PRINTF_SUPPORT_FLOAT)
      case 'f' :
      case 'F' :
        idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
   140d8:	9b24      	ldr	r3, [sp, #144]	; 0x90
   140da:	3307      	adds	r3, #7
   140dc:	f023 0307 	bic.w	r3, r3, #7
   140e0:	f103 0208 	add.w	r2, r3, #8
   140e4:	9224      	str	r2, [sp, #144]	; 0x90
   140e6:	ed93 7b00 	vldr	d7, [r3]
   140ea:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   140ec:	9302      	str	r3, [sp, #8]
   140ee:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   140f0:	9301      	str	r3, [sp, #4]
   140f2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   140f4:	9300      	str	r3, [sp, #0]
   140f6:	eeb0 0a47 	vmov.f32	s0, s14
   140fa:	eef0 0a67 	vmov.f32	s1, s15
   140fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   14100:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   14102:	990c      	ldr	r1, [sp, #48]	; 0x30
   14104:	980d      	ldr	r0, [sp, #52]	; 0x34
   14106:	f7ff fa77 	bl	135f8 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)>
   1410a:	901b      	str	r0, [sp, #108]	; 0x6c
        format++;
   1410c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1410e:	3301      	adds	r3, #1
   14110:	930a      	str	r3, [sp, #40]	; 0x28
        break;
   14112:	e0eb      	b.n	142ec <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8bc>
#endif  // PRINTF_SUPPORT_FLOAT
      case 'c' : {
        unsigned int l = 1U;
   14114:	2301      	movs	r3, #1
   14116:	9319      	str	r3, [sp, #100]	; 0x64
        // pre padding
        if (!(flags & FLAGS_LEFT)) {
   14118:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   1411a:	f003 0302 	and.w	r3, r3, #2
   1411e:	2b00      	cmp	r3, #0
   14120:	d113      	bne.n	1414a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x71a>
          while (l++ < width) {
   14122:	9b19      	ldr	r3, [sp, #100]	; 0x64
   14124:	1c5a      	adds	r2, r3, #1
   14126:	9219      	str	r2, [sp, #100]	; 0x64
   14128:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   1412a:	429a      	cmp	r2, r3
   1412c:	bf8c      	ite	hi
   1412e:	2301      	movhi	r3, #1
   14130:	2300      	movls	r3, #0
   14132:	b2db      	uxtb	r3, r3
   14134:	2b00      	cmp	r3, #0
   14136:	d008      	beq.n	1414a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x71a>
            out(' ', buffer, idx++, maxlen);
   14138:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   1413a:	1c53      	adds	r3, r2, #1
   1413c:	931b      	str	r3, [sp, #108]	; 0x6c
   1413e:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   14140:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   14142:	990c      	ldr	r1, [sp, #48]	; 0x30
   14144:	2020      	movs	r0, #32
   14146:	47a0      	blx	r4
          while (l++ < width) {
   14148:	e7eb      	b.n	14122 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x6f2>
          }
        }
        // char output
        out((char)va_arg(va, int), buffer, idx++, maxlen);
   1414a:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1414c:	1d1a      	adds	r2, r3, #4
   1414e:	9224      	str	r2, [sp, #144]	; 0x90
   14150:	681b      	ldr	r3, [r3, #0]
   14152:	b2d8      	uxtb	r0, r3
   14154:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   14156:	1c53      	adds	r3, r2, #1
   14158:	931b      	str	r3, [sp, #108]	; 0x6c
   1415a:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   1415c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1415e:	990c      	ldr	r1, [sp, #48]	; 0x30
   14160:	47a0      	blx	r4
        // post padding
        if (flags & FLAGS_LEFT) {
   14162:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   14164:	f003 0302 	and.w	r3, r3, #2
   14168:	2b00      	cmp	r3, #0
   1416a:	d013      	beq.n	14194 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x764>
          while (l++ < width) {
   1416c:	9b19      	ldr	r3, [sp, #100]	; 0x64
   1416e:	1c5a      	adds	r2, r3, #1
   14170:	9219      	str	r2, [sp, #100]	; 0x64
   14172:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   14174:	429a      	cmp	r2, r3
   14176:	bf8c      	ite	hi
   14178:	2301      	movhi	r3, #1
   1417a:	2300      	movls	r3, #0
   1417c:	b2db      	uxtb	r3, r3
   1417e:	2b00      	cmp	r3, #0
   14180:	d008      	beq.n	14194 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x764>
            out(' ', buffer, idx++, maxlen);
   14182:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   14184:	1c53      	adds	r3, r2, #1
   14186:	931b      	str	r3, [sp, #108]	; 0x6c
   14188:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   1418a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1418c:	990c      	ldr	r1, [sp, #48]	; 0x30
   1418e:	2020      	movs	r0, #32
   14190:	47a0      	blx	r4
          while (l++ < width) {
   14192:	e7eb      	b.n	1416c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x73c>
          }
        }
        format++;
   14194:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   14196:	3301      	adds	r3, #1
   14198:	930a      	str	r3, [sp, #40]	; 0x28
        break;
   1419a:	e0a7      	b.n	142ec <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8bc>
      }

      case 's' : {
        char* p = va_arg(va, char*);
   1419c:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1419e:	1d1a      	adds	r2, r3, #4
   141a0:	9224      	str	r2, [sp, #144]	; 0x90
   141a2:	681b      	ldr	r3, [r3, #0]
   141a4:	9318      	str	r3, [sp, #96]	; 0x60
        unsigned int l = _strlen(p);
   141a6:	9818      	ldr	r0, [sp, #96]	; 0x60
   141a8:	f7fe ff98 	bl	130dc <_strlen(char const*)>
   141ac:	9017      	str	r0, [sp, #92]	; 0x5c
        // pre padding
        if (flags & FLAGS_PRECISION) {
   141ae:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   141b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
   141b4:	2b00      	cmp	r3, #0
   141b6:	d007      	beq.n	141c8 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x798>
          l = (l < precision ? l : precision);
   141b8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   141ba:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   141bc:	429a      	cmp	r2, r3
   141be:	d201      	bcs.n	141c4 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x794>
   141c0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   141c2:	e000      	b.n	141c6 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x796>
   141c4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   141c6:	9317      	str	r3, [sp, #92]	; 0x5c
        }
        if (!(flags & FLAGS_LEFT)) {
   141c8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   141ca:	f003 0302 	and.w	r3, r3, #2
   141ce:	2b00      	cmp	r3, #0
   141d0:	d113      	bne.n	141fa <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7ca>
          while (l++ < width) {
   141d2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   141d4:	1c5a      	adds	r2, r3, #1
   141d6:	9217      	str	r2, [sp, #92]	; 0x5c
   141d8:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   141da:	429a      	cmp	r2, r3
   141dc:	bf8c      	ite	hi
   141de:	2301      	movhi	r3, #1
   141e0:	2300      	movls	r3, #0
   141e2:	b2db      	uxtb	r3, r3
   141e4:	2b00      	cmp	r3, #0
   141e6:	d008      	beq.n	141fa <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7ca>
            out(' ', buffer, idx++, maxlen);
   141e8:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   141ea:	1c53      	adds	r3, r2, #1
   141ec:	931b      	str	r3, [sp, #108]	; 0x6c
   141ee:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   141f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   141f2:	990c      	ldr	r1, [sp, #48]	; 0x30
   141f4:	2020      	movs	r0, #32
   141f6:	47a0      	blx	r4
          while (l++ < width) {
   141f8:	e7eb      	b.n	141d2 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7a2>
          }
        }
        // string output
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
   141fa:	9b18      	ldr	r3, [sp, #96]	; 0x60
   141fc:	781b      	ldrb	r3, [r3, #0]
   141fe:	2b00      	cmp	r3, #0
   14200:	d00b      	beq.n	1421a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7ea>
   14202:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   14204:	f403 6380 	and.w	r3, r3, #1024	; 0x400
   14208:	2b00      	cmp	r3, #0
   1420a:	d004      	beq.n	14216 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7e6>
   1420c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   1420e:	1e5a      	subs	r2, r3, #1
   14210:	921d      	str	r2, [sp, #116]	; 0x74
   14212:	2b00      	cmp	r3, #0
   14214:	d001      	beq.n	1421a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7ea>
   14216:	2301      	movs	r3, #1
   14218:	e000      	b.n	1421c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7ec>
   1421a:	2300      	movs	r3, #0
   1421c:	2b00      	cmp	r3, #0
   1421e:	d00b      	beq.n	14238 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x808>
          out(*(p++), buffer, idx++, maxlen);
   14220:	9b18      	ldr	r3, [sp, #96]	; 0x60
   14222:	1c5a      	adds	r2, r3, #1
   14224:	9218      	str	r2, [sp, #96]	; 0x60
   14226:	7818      	ldrb	r0, [r3, #0]
   14228:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   1422a:	1c53      	adds	r3, r2, #1
   1422c:	931b      	str	r3, [sp, #108]	; 0x6c
   1422e:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   14230:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   14232:	990c      	ldr	r1, [sp, #48]	; 0x30
   14234:	47a0      	blx	r4
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
   14236:	e7e0      	b.n	141fa <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7ca>
        }
        // post padding
        if (flags & FLAGS_LEFT) {
   14238:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   1423a:	f003 0302 	and.w	r3, r3, #2
   1423e:	2b00      	cmp	r3, #0
   14240:	d013      	beq.n	1426a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x83a>
          while (l++ < width) {
   14242:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   14244:	1c5a      	adds	r2, r3, #1
   14246:	9217      	str	r2, [sp, #92]	; 0x5c
   14248:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   1424a:	429a      	cmp	r2, r3
   1424c:	bf8c      	ite	hi
   1424e:	2301      	movhi	r3, #1
   14250:	2300      	movls	r3, #0
   14252:	b2db      	uxtb	r3, r3
   14254:	2b00      	cmp	r3, #0
   14256:	d008      	beq.n	1426a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x83a>
            out(' ', buffer, idx++, maxlen);
   14258:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   1425a:	1c53      	adds	r3, r2, #1
   1425c:	931b      	str	r3, [sp, #108]	; 0x6c
   1425e:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   14260:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   14262:	990c      	ldr	r1, [sp, #48]	; 0x30
   14264:	2020      	movs	r0, #32
   14266:	47a0      	blx	r4
          while (l++ < width) {
   14268:	e7eb      	b.n	14242 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x812>
          }
        }
        format++;
   1426a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1426c:	3301      	adds	r3, #1
   1426e:	930a      	str	r3, [sp, #40]	; 0x28
        break;
   14270:	e03c      	b.n	142ec <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8bc>
      }

      case 'p' : {
        width = sizeof(void*) * 2U;
   14272:	2308      	movs	r3, #8
   14274:	931e      	str	r3, [sp, #120]	; 0x78
        flags |= FLAGS_ZEROPAD | FLAGS_UPPERCASE;
   14276:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   14278:	f043 0321 	orr.w	r3, r3, #33	; 0x21
   1427c:	931f      	str	r3, [sp, #124]	; 0x7c
#if defined(PRINTF_SUPPORT_LONG_LONG)
        const bool is_ll = sizeof(uintptr_t) == sizeof(long long);
   1427e:	2300      	movs	r3, #0
   14280:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
        if (is_ll) {
          idx = _ntoa_long_long(out, buffer, idx, maxlen, (uintptr_t)va_arg(va, void*), false, 16U, precision, width, flags);
        }
        else {
#endif
          idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void*)), false, 16U, precision, width, flags);
   14284:	9b24      	ldr	r3, [sp, #144]	; 0x90
   14286:	1d1a      	adds	r2, r3, #4
   14288:	9224      	str	r2, [sp, #144]	; 0x90
   1428a:	681b      	ldr	r3, [r3, #0]
   1428c:	461a      	mov	r2, r3
   1428e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   14290:	9305      	str	r3, [sp, #20]
   14292:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   14294:	9304      	str	r3, [sp, #16]
   14296:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   14298:	9303      	str	r3, [sp, #12]
   1429a:	2310      	movs	r3, #16
   1429c:	9302      	str	r3, [sp, #8]
   1429e:	2300      	movs	r3, #0
   142a0:	9301      	str	r3, [sp, #4]
   142a2:	9200      	str	r2, [sp, #0]
   142a4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   142a6:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   142a8:	990c      	ldr	r1, [sp, #48]	; 0x30
   142aa:	980d      	ldr	r0, [sp, #52]	; 0x34
   142ac:	f7ff f8b8 	bl	13420 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)>
   142b0:	901b      	str	r0, [sp, #108]	; 0x6c
#if defined(PRINTF_SUPPORT_LONG_LONG)
        }
#endif
        format++;
   142b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   142b4:	3301      	adds	r3, #1
   142b6:	930a      	str	r3, [sp, #40]	; 0x28
        break;
   142b8:	e018      	b.n	142ec <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8bc>
      }

      case '%' :
        out('%', buffer, idx++, maxlen);
   142ba:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   142bc:	1c53      	adds	r3, r2, #1
   142be:	931b      	str	r3, [sp, #108]	; 0x6c
   142c0:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   142c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   142c4:	990c      	ldr	r1, [sp, #48]	; 0x30
   142c6:	2025      	movs	r0, #37	; 0x25
   142c8:	47a0      	blx	r4
        format++;
   142ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   142cc:	3301      	adds	r3, #1
   142ce:	930a      	str	r3, [sp, #40]	; 0x28
        break;
   142d0:	e00c      	b.n	142ec <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8bc>

      default :
        out(*format, buffer, idx++, maxlen);
   142d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   142d4:	7818      	ldrb	r0, [r3, #0]
   142d6:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   142d8:	1c53      	adds	r3, r2, #1
   142da:	931b      	str	r3, [sp, #108]	; 0x6c
   142dc:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   142de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   142e0:	990c      	ldr	r1, [sp, #48]	; 0x30
   142e2:	47a0      	blx	r4
        format++;
   142e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   142e6:	3301      	adds	r3, #1
   142e8:	930a      	str	r3, [sp, #40]	; 0x28
        break;
   142ea:	bf00      	nop
  while (*format)
   142ec:	f7ff bbb3 	b.w	13a56 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x26>
    }
  }

  // termination
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
   142f0:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   142f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   142f4:	429a      	cmp	r2, r3
   142f6:	d302      	bcc.n	142fe <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8ce>
   142f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   142fa:	1e5a      	subs	r2, r3, #1
   142fc:	e000      	b.n	14300 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8d0>
   142fe:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   14300:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   14302:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   14304:	990c      	ldr	r1, [sp, #48]	; 0x30
   14306:	2000      	movs	r0, #0
   14308:	47a0      	blx	r4

  // return written chars without terminating \0
  return (int)idx;
   1430a:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
   1430c:	4633      	mov	r3, r6
   1430e:	4619      	mov	r1, r3
   14310:	4803      	ldr	r0, [pc, #12]	; (14320 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8f0>)
   14312:	f7fe fdc1 	bl	12e98 <__cyg_profile_func_exit>
   14316:	4623      	mov	r3, r4
}
   14318:	4618      	mov	r0, r3
   1431a:	b020      	add	sp, #128	; 0x80
   1431c:	bd70      	pop	{r4, r5, r6, pc}
   1431e:	bf00      	nop
   14320:	00013a31 	.word	0x00013a31

00014324 <printf>:

///////////////////////////////////////////////////////////////////////////////


int printf(const char* format, ...)
{
   14324:	b40f      	push	{r0, r1, r2, r3}
   14326:	b530      	push	{r4, r5, lr}
   14328:	b087      	sub	sp, #28
   1432a:	4675      	mov	r5, lr
   1432c:	462b      	mov	r3, r5
   1432e:	4619      	mov	r1, r3
   14330:	480d      	ldr	r0, [pc, #52]	; (14368 <printf+0x44>)
   14332:	f7fe fd9d 	bl	12e70 <__cyg_profile_func_enter>
  va_list va;
  va_start(va, format);
   14336:	ab0b      	add	r3, sp, #44	; 0x2c
   14338:	9304      	str	r3, [sp, #16]
  char buffer[1];
  const int ret = _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
   1433a:	a903      	add	r1, sp, #12
   1433c:	9b04      	ldr	r3, [sp, #16]
   1433e:	9300      	str	r3, [sp, #0]
   14340:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   14342:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   14346:	4809      	ldr	r0, [pc, #36]	; (1436c <printf+0x48>)
   14348:	f7ff fb72 	bl	13a30 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)>
   1434c:	9005      	str	r0, [sp, #20]
  va_end(va);
  return ret;
   1434e:	9c05      	ldr	r4, [sp, #20]
   14350:	462b      	mov	r3, r5
   14352:	4619      	mov	r1, r3
   14354:	4804      	ldr	r0, [pc, #16]	; (14368 <printf+0x44>)
   14356:	f7fe fd9f 	bl	12e98 <__cyg_profile_func_exit>
   1435a:	4623      	mov	r3, r4
}
   1435c:	4618      	mov	r0, r3
   1435e:	b007      	add	sp, #28
   14360:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   14364:	b004      	add	sp, #16
   14366:	4770      	bx	lr
   14368:	00014325 	.word	0x00014325
   1436c:	00013099 	.word	0x00013099

00014370 <PinInterface::PinInterface()>:
class PinInterface
   14370:	b530      	push	{r4, r5, lr}
   14372:	b083      	sub	sp, #12
   14374:	4675      	mov	r5, lr
   14376:	9001      	str	r0, [sp, #4]
   14378:	462b      	mov	r3, r5
   1437a:	4619      	mov	r1, r3
   1437c:	4807      	ldr	r0, [pc, #28]	; (1439c <PinInterface::PinInterface()+0x2c>)
   1437e:	f7fe fd77 	bl	12e70 <__cyg_profile_func_enter>
   14382:	4a07      	ldr	r2, [pc, #28]	; (143a0 <PinInterface::PinInterface()+0x30>)
   14384:	9b01      	ldr	r3, [sp, #4]
   14386:	601a      	str	r2, [r3, #0]
   14388:	9c01      	ldr	r4, [sp, #4]
   1438a:	462b      	mov	r3, r5
   1438c:	4619      	mov	r1, r3
   1438e:	4803      	ldr	r0, [pc, #12]	; (1439c <PinInterface::PinInterface()+0x2c>)
   14390:	f7fe fd82 	bl	12e98 <__cyg_profile_func_exit>
   14394:	4623      	mov	r3, r4
   14396:	4618      	mov	r0, r3
   14398:	b003      	add	sp, #12
   1439a:	bd30      	pop	{r4, r5, pc}
   1439c:	00014371 	.word	0x00014371
   143a0:	00018eec 	.word	0x00018eec

000143a4 <Pin::Pin(unsigned char, unsigned char)>:
  constexpr Pin(uint8_t port_number, uint8_t pin_number)
   143a4:	b530      	push	{r4, r5, lr}
   143a6:	b083      	sub	sp, #12
   143a8:	4675      	mov	r5, lr
   143aa:	9001      	str	r0, [sp, #4]
   143ac:	460b      	mov	r3, r1
   143ae:	f88d 3003 	strb.w	r3, [sp, #3]
   143b2:	4613      	mov	r3, r2
   143b4:	f88d 3002 	strb.w	r3, [sp, #2]
   143b8:	462b      	mov	r3, r5
   143ba:	4619      	mov	r1, r3
   143bc:	480d      	ldr	r0, [pc, #52]	; (143f4 <Pin::Pin(unsigned char, unsigned char)+0x50>)
   143be:	f7fe fd57 	bl	12e70 <__cyg_profile_func_enter>
      : port_(port_number), pin_(pin_number)
   143c2:	9b01      	ldr	r3, [sp, #4]
   143c4:	4618      	mov	r0, r3
   143c6:	f7ff ffd3 	bl	14370 <PinInterface::PinInterface()>
   143ca:	4a0b      	ldr	r2, [pc, #44]	; (143f8 <Pin::Pin(unsigned char, unsigned char)+0x54>)
   143cc:	9b01      	ldr	r3, [sp, #4]
   143ce:	601a      	str	r2, [r3, #0]
   143d0:	9b01      	ldr	r3, [sp, #4]
   143d2:	f89d 2003 	ldrb.w	r2, [sp, #3]
   143d6:	711a      	strb	r2, [r3, #4]
   143d8:	9b01      	ldr	r3, [sp, #4]
   143da:	f89d 2002 	ldrb.w	r2, [sp, #2]
   143de:	715a      	strb	r2, [r3, #5]
  }
   143e0:	9c01      	ldr	r4, [sp, #4]
   143e2:	462b      	mov	r3, r5
   143e4:	4619      	mov	r1, r3
   143e6:	4803      	ldr	r0, [pc, #12]	; (143f4 <Pin::Pin(unsigned char, unsigned char)+0x50>)
   143e8:	f7fe fd56 	bl	12e98 <__cyg_profile_func_exit>
   143ec:	4623      	mov	r3, r4
   143ee:	4618      	mov	r0, r3
   143f0:	b003      	add	sp, #12
   143f2:	bd30      	pop	{r4, r5, pc}
   143f4:	000143a5 	.word	0x000143a5
   143f8:	00017850 	.word	0x00017850

000143fc <GpioInterface::GpioInterface()>:
class GpioInterface
   143fc:	b530      	push	{r4, r5, lr}
   143fe:	b083      	sub	sp, #12
   14400:	4675      	mov	r5, lr
   14402:	9001      	str	r0, [sp, #4]
   14404:	462b      	mov	r3, r5
   14406:	4619      	mov	r1, r3
   14408:	4807      	ldr	r0, [pc, #28]	; (14428 <GpioInterface::GpioInterface()+0x2c>)
   1440a:	f7fe fd31 	bl	12e70 <__cyg_profile_func_enter>
   1440e:	4a07      	ldr	r2, [pc, #28]	; (1442c <GpioInterface::GpioInterface()+0x30>)
   14410:	9b01      	ldr	r3, [sp, #4]
   14412:	601a      	str	r2, [r3, #0]
   14414:	9c01      	ldr	r4, [sp, #4]
   14416:	462b      	mov	r3, r5
   14418:	4619      	mov	r1, r3
   1441a:	4803      	ldr	r0, [pc, #12]	; (14428 <GpioInterface::GpioInterface()+0x2c>)
   1441c:	f7fe fd3c 	bl	12e98 <__cyg_profile_func_exit>
   14420:	4623      	mov	r3, r4
   14422:	4618      	mov	r0, r3
   14424:	b003      	add	sp, #12
   14426:	bd30      	pop	{r4, r5, pc}
   14428:	000143fd 	.word	0x000143fd
   1442c:	00018ea4 	.word	0x00018ea4

00014430 <Gpio::Gpio(unsigned char, unsigned char)>:
  constexpr Gpio(uint8_t port_number, uint8_t pin_number)
   14430:	b530      	push	{r4, r5, lr}
   14432:	b083      	sub	sp, #12
   14434:	4675      	mov	r5, lr
   14436:	9001      	str	r0, [sp, #4]
   14438:	460b      	mov	r3, r1
   1443a:	f88d 3003 	strb.w	r3, [sp, #3]
   1443e:	4613      	mov	r3, r2
   14440:	f88d 3002 	strb.w	r3, [sp, #2]
   14444:	462b      	mov	r3, r5
   14446:	4619      	mov	r1, r3
   14448:	4816      	ldr	r0, [pc, #88]	; (144a4 <Gpio::Gpio(unsigned char, unsigned char)+0x74>)
   1444a:	f7fe fd11 	bl	12e70 <__cyg_profile_func_enter>
        lpc40xx_pin_(port_number, pin_number)
   1444e:	9b01      	ldr	r3, [sp, #4]
   14450:	4618      	mov	r0, r3
   14452:	f7ff ffd3 	bl	143fc <GpioInterface::GpioInterface()>
   14456:	4a14      	ldr	r2, [pc, #80]	; (144a8 <Gpio::Gpio(unsigned char, unsigned char)+0x78>)
   14458:	9b01      	ldr	r3, [sp, #4]
   1445a:	601a      	str	r2, [r3, #0]
   1445c:	9b01      	ldr	r3, [sp, #4]
   1445e:	2200      	movs	r2, #0
   14460:	711a      	strb	r2, [r3, #4]
   14462:	9b01      	ldr	r3, [sp, #4]
   14464:	f103 020c 	add.w	r2, r3, #12
   14468:	9b01      	ldr	r3, [sp, #4]
   1446a:	609a      	str	r2, [r3, #8]
   1446c:	9b01      	ldr	r3, [sp, #4]
   1446e:	330c      	adds	r3, #12
   14470:	f89d 2002 	ldrb.w	r2, [sp, #2]
   14474:	f89d 1003 	ldrb.w	r1, [sp, #3]
   14478:	4618      	mov	r0, r3
   1447a:	f7ff ff93 	bl	143a4 <Pin::Pin(unsigned char, unsigned char)>
    interupt_port_ = (port_number == 2) ? 1 : 0;
   1447e:	f89d 3003 	ldrb.w	r3, [sp, #3]
   14482:	2b02      	cmp	r3, #2
   14484:	d101      	bne.n	1448a <Gpio::Gpio(unsigned char, unsigned char)+0x5a>
   14486:	2201      	movs	r2, #1
   14488:	e000      	b.n	1448c <Gpio::Gpio(unsigned char, unsigned char)+0x5c>
   1448a:	2200      	movs	r2, #0
   1448c:	9b01      	ldr	r3, [sp, #4]
   1448e:	711a      	strb	r2, [r3, #4]
  }
   14490:	9c01      	ldr	r4, [sp, #4]
   14492:	462b      	mov	r3, r5
   14494:	4619      	mov	r1, r3
   14496:	4803      	ldr	r0, [pc, #12]	; (144a4 <Gpio::Gpio(unsigned char, unsigned char)+0x74>)
   14498:	f7fe fcfe 	bl	12e98 <__cyg_profile_func_exit>
   1449c:	4623      	mov	r3, r4
   1449e:	4618      	mov	r0, r3
   144a0:	b003      	add	sp, #12
   144a2:	bd30      	pop	{r4, r5, pc}
   144a4:	00014431 	.word	0x00014431
   144a8:	00018e5c 	.word	0x00018e5c

000144ac <Gpio::SetAsInput()>:
  void SetAsInput(void) override
   144ac:	b530      	push	{r4, r5, lr}
   144ae:	b083      	sub	sp, #12
   144b0:	4675      	mov	r5, lr
   144b2:	9001      	str	r0, [sp, #4]
   144b4:	462b      	mov	r3, r5
   144b6:	4619      	mov	r1, r3
   144b8:	4819      	ldr	r0, [pc, #100]	; (14520 <Gpio::SetAsInput()+0x74>)
   144ba:	f7fe fcd9 	bl	12e70 <__cyg_profile_func_enter>
    pin_->SetPinFunction(kGpioFunction);
   144be:	9b01      	ldr	r3, [sp, #4]
   144c0:	689a      	ldr	r2, [r3, #8]
   144c2:	9b01      	ldr	r3, [sp, #4]
   144c4:	689b      	ldr	r3, [r3, #8]
   144c6:	681b      	ldr	r3, [r3, #0]
   144c8:	681b      	ldr	r3, [r3, #0]
   144ca:	2100      	movs	r1, #0
   144cc:	4610      	mov	r0, r2
   144ce:	4798      	blx	r3
    gpio_port[pin_->GetPort()]->DIR &= ~(1 << pin_->GetPin());
   144d0:	9b01      	ldr	r3, [sp, #4]
   144d2:	689a      	ldr	r2, [r3, #8]
   144d4:	9b01      	ldr	r3, [sp, #4]
   144d6:	689b      	ldr	r3, [r3, #8]
   144d8:	681b      	ldr	r3, [r3, #0]
   144da:	3330      	adds	r3, #48	; 0x30
   144dc:	681b      	ldr	r3, [r3, #0]
   144de:	4610      	mov	r0, r2
   144e0:	4798      	blx	r3
   144e2:	4603      	mov	r3, r0
   144e4:	461a      	mov	r2, r3
   144e6:	2301      	movs	r3, #1
   144e8:	4093      	lsls	r3, r2
   144ea:	43dc      	mvns	r4, r3
   144ec:	9b01      	ldr	r3, [sp, #4]
   144ee:	689a      	ldr	r2, [r3, #8]
   144f0:	9b01      	ldr	r3, [sp, #4]
   144f2:	689b      	ldr	r3, [r3, #8]
   144f4:	681b      	ldr	r3, [r3, #0]
   144f6:	332c      	adds	r3, #44	; 0x2c
   144f8:	681b      	ldr	r3, [r3, #0]
   144fa:	4610      	mov	r0, r2
   144fc:	4798      	blx	r3
   144fe:	4603      	mov	r3, r0
   14500:	461a      	mov	r2, r3
   14502:	4b08      	ldr	r3, [pc, #32]	; (14524 <Gpio::SetAsInput()+0x78>)
   14504:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   14508:	681a      	ldr	r2, [r3, #0]
   1450a:	4621      	mov	r1, r4
   1450c:	400a      	ands	r2, r1
   1450e:	601a      	str	r2, [r3, #0]
   14510:	462b      	mov	r3, r5
   14512:	4619      	mov	r1, r3
   14514:	4802      	ldr	r0, [pc, #8]	; (14520 <Gpio::SetAsInput()+0x74>)
   14516:	f7fe fcbf 	bl	12e98 <__cyg_profile_func_exit>
  }
   1451a:	bf00      	nop
   1451c:	b003      	add	sp, #12
   1451e:	bd30      	pop	{r4, r5, pc}
   14520:	000144ad 	.word	0x000144ad
   14524:	10000004 	.word	0x10000004

00014528 <Gpio::SetAsOutput()>:
  void SetAsOutput(void) override
   14528:	b530      	push	{r4, r5, lr}
   1452a:	b083      	sub	sp, #12
   1452c:	4675      	mov	r5, lr
   1452e:	9001      	str	r0, [sp, #4]
   14530:	462b      	mov	r3, r5
   14532:	4619      	mov	r1, r3
   14534:	4819      	ldr	r0, [pc, #100]	; (1459c <Gpio::SetAsOutput()+0x74>)
   14536:	f7fe fc9b 	bl	12e70 <__cyg_profile_func_enter>
    pin_->SetPinFunction(kGpioFunction);
   1453a:	9b01      	ldr	r3, [sp, #4]
   1453c:	689a      	ldr	r2, [r3, #8]
   1453e:	9b01      	ldr	r3, [sp, #4]
   14540:	689b      	ldr	r3, [r3, #8]
   14542:	681b      	ldr	r3, [r3, #0]
   14544:	681b      	ldr	r3, [r3, #0]
   14546:	2100      	movs	r1, #0
   14548:	4610      	mov	r0, r2
   1454a:	4798      	blx	r3
    gpio_port[pin_->GetPort()]->DIR |= (1 << pin_->GetPin());
   1454c:	9b01      	ldr	r3, [sp, #4]
   1454e:	689a      	ldr	r2, [r3, #8]
   14550:	9b01      	ldr	r3, [sp, #4]
   14552:	689b      	ldr	r3, [r3, #8]
   14554:	681b      	ldr	r3, [r3, #0]
   14556:	3330      	adds	r3, #48	; 0x30
   14558:	681b      	ldr	r3, [r3, #0]
   1455a:	4610      	mov	r0, r2
   1455c:	4798      	blx	r3
   1455e:	4603      	mov	r3, r0
   14560:	461a      	mov	r2, r3
   14562:	2301      	movs	r3, #1
   14564:	fa03 f402 	lsl.w	r4, r3, r2
   14568:	9b01      	ldr	r3, [sp, #4]
   1456a:	689a      	ldr	r2, [r3, #8]
   1456c:	9b01      	ldr	r3, [sp, #4]
   1456e:	689b      	ldr	r3, [r3, #8]
   14570:	681b      	ldr	r3, [r3, #0]
   14572:	332c      	adds	r3, #44	; 0x2c
   14574:	681b      	ldr	r3, [r3, #0]
   14576:	4610      	mov	r0, r2
   14578:	4798      	blx	r3
   1457a:	4603      	mov	r3, r0
   1457c:	461a      	mov	r2, r3
   1457e:	4b08      	ldr	r3, [pc, #32]	; (145a0 <Gpio::SetAsOutput()+0x78>)
   14580:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   14584:	681a      	ldr	r2, [r3, #0]
   14586:	4621      	mov	r1, r4
   14588:	430a      	orrs	r2, r1
   1458a:	601a      	str	r2, [r3, #0]
   1458c:	462b      	mov	r3, r5
   1458e:	4619      	mov	r1, r3
   14590:	4802      	ldr	r0, [pc, #8]	; (1459c <Gpio::SetAsOutput()+0x74>)
   14592:	f7fe fc81 	bl	12e98 <__cyg_profile_func_exit>
  }
   14596:	bf00      	nop
   14598:	b003      	add	sp, #12
   1459a:	bd30      	pop	{r4, r5, pc}
   1459c:	00014529 	.word	0x00014529
   145a0:	10000004 	.word	0x10000004

000145a4 <Gpio::SetDirection(GpioInterface::Direction)>:
  inline void SetDirection(Direction direction) override
   145a4:	b510      	push	{r4, lr}
   145a6:	b082      	sub	sp, #8
   145a8:	4674      	mov	r4, lr
   145aa:	9001      	str	r0, [sp, #4]
   145ac:	460b      	mov	r3, r1
   145ae:	f88d 3003 	strb.w	r3, [sp, #3]
   145b2:	4623      	mov	r3, r4
   145b4:	4619      	mov	r1, r3
   145b6:	480b      	ldr	r0, [pc, #44]	; (145e4 <Gpio::SetDirection(GpioInterface::Direction)+0x40>)
   145b8:	f7fe fc5a 	bl	12e70 <__cyg_profile_func_enter>
    (direction) ? SetAsOutput() : SetAsInput();
   145bc:	f89d 3003 	ldrb.w	r3, [sp, #3]
   145c0:	2b00      	cmp	r3, #0
   145c2:	d003      	beq.n	145cc <Gpio::SetDirection(GpioInterface::Direction)+0x28>
   145c4:	9801      	ldr	r0, [sp, #4]
   145c6:	f7ff ffaf 	bl	14528 <Gpio::SetAsOutput()>
   145ca:	e002      	b.n	145d2 <Gpio::SetDirection(GpioInterface::Direction)+0x2e>
   145cc:	9801      	ldr	r0, [sp, #4]
   145ce:	f7ff ff6d 	bl	144ac <Gpio::SetAsInput()>
   145d2:	4623      	mov	r3, r4
   145d4:	4619      	mov	r1, r3
   145d6:	4803      	ldr	r0, [pc, #12]	; (145e4 <Gpio::SetDirection(GpioInterface::Direction)+0x40>)
   145d8:	f7fe fc5e 	bl	12e98 <__cyg_profile_func_exit>
  }
   145dc:	bf00      	nop
   145de:	b002      	add	sp, #8
   145e0:	bd10      	pop	{r4, pc}
   145e2:	bf00      	nop
   145e4:	000145a5 	.word	0x000145a5

000145e8 <Gpio::Toggle()>:
  // Toggle the output of a GPIO output pin
  void Toggle() override
   145e8:	b530      	push	{r4, r5, lr}
   145ea:	b083      	sub	sp, #12
   145ec:	4675      	mov	r5, lr
   145ee:	9001      	str	r0, [sp, #4]
   145f0:	462b      	mov	r3, r5
   145f2:	4619      	mov	r1, r3
   145f4:	4815      	ldr	r0, [pc, #84]	; (1464c <Gpio::Toggle()+0x64>)
   145f6:	f7fe fc3b 	bl	12e70 <__cyg_profile_func_enter>
  {
    gpio_port[pin_->GetPort()]->PIN ^= (1 << pin_->GetPin());
   145fa:	9b01      	ldr	r3, [sp, #4]
   145fc:	689a      	ldr	r2, [r3, #8]
   145fe:	9b01      	ldr	r3, [sp, #4]
   14600:	689b      	ldr	r3, [r3, #8]
   14602:	681b      	ldr	r3, [r3, #0]
   14604:	3330      	adds	r3, #48	; 0x30
   14606:	681b      	ldr	r3, [r3, #0]
   14608:	4610      	mov	r0, r2
   1460a:	4798      	blx	r3
   1460c:	4603      	mov	r3, r0
   1460e:	461a      	mov	r2, r3
   14610:	2301      	movs	r3, #1
   14612:	fa03 f402 	lsl.w	r4, r3, r2
   14616:	9b01      	ldr	r3, [sp, #4]
   14618:	689a      	ldr	r2, [r3, #8]
   1461a:	9b01      	ldr	r3, [sp, #4]
   1461c:	689b      	ldr	r3, [r3, #8]
   1461e:	681b      	ldr	r3, [r3, #0]
   14620:	332c      	adds	r3, #44	; 0x2c
   14622:	681b      	ldr	r3, [r3, #0]
   14624:	4610      	mov	r0, r2
   14626:	4798      	blx	r3
   14628:	4603      	mov	r3, r0
   1462a:	461a      	mov	r2, r3
   1462c:	4b08      	ldr	r3, [pc, #32]	; (14650 <Gpio::Toggle()+0x68>)
   1462e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   14632:	695a      	ldr	r2, [r3, #20]
   14634:	4621      	mov	r1, r4
   14636:	404a      	eors	r2, r1
   14638:	615a      	str	r2, [r3, #20]
   1463a:	462b      	mov	r3, r5
   1463c:	4619      	mov	r1, r3
   1463e:	4803      	ldr	r0, [pc, #12]	; (1464c <Gpio::Toggle()+0x64>)
   14640:	f7fe fc2a 	bl	12e98 <__cyg_profile_func_exit>
  }
   14644:	bf00      	nop
   14646:	b003      	add	sp, #12
   14648:	bd30      	pop	{r4, r5, pc}
   1464a:	bf00      	nop
   1464c:	000145e9 	.word	0x000145e9
   14650:	10000004 	.word	0x10000004

00014654 <Gpio::ReadState()>:
  // Returns the current State state of the pin
  State ReadState(void) override
   14654:	b530      	push	{r4, r5, lr}
   14656:	b085      	sub	sp, #20
   14658:	4675      	mov	r5, lr
   1465a:	9001      	str	r0, [sp, #4]
   1465c:	462b      	mov	r3, r5
   1465e:	4619      	mov	r1, r3
   14660:	4818      	ldr	r0, [pc, #96]	; (146c4 <Gpio::ReadState()+0x70>)
   14662:	f7fe fc05 	bl	12e70 <__cyg_profile_func_enter>
  {
    bool state = (gpio_port[pin_->GetPort()]->PIN >> pin_->GetPin()) & 1;
   14666:	9b01      	ldr	r3, [sp, #4]
   14668:	689a      	ldr	r2, [r3, #8]
   1466a:	9b01      	ldr	r3, [sp, #4]
   1466c:	689b      	ldr	r3, [r3, #8]
   1466e:	681b      	ldr	r3, [r3, #0]
   14670:	332c      	adds	r3, #44	; 0x2c
   14672:	681b      	ldr	r3, [r3, #0]
   14674:	4610      	mov	r0, r2
   14676:	4798      	blx	r3
   14678:	4603      	mov	r3, r0
   1467a:	461a      	mov	r2, r3
   1467c:	4b12      	ldr	r3, [pc, #72]	; (146c8 <Gpio::ReadState()+0x74>)
   1467e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   14682:	695c      	ldr	r4, [r3, #20]
   14684:	9b01      	ldr	r3, [sp, #4]
   14686:	689a      	ldr	r2, [r3, #8]
   14688:	9b01      	ldr	r3, [sp, #4]
   1468a:	689b      	ldr	r3, [r3, #8]
   1468c:	681b      	ldr	r3, [r3, #0]
   1468e:	3330      	adds	r3, #48	; 0x30
   14690:	681b      	ldr	r3, [r3, #0]
   14692:	4610      	mov	r0, r2
   14694:	4798      	blx	r3
   14696:	4603      	mov	r3, r0
   14698:	fa24 f303 	lsr.w	r3, r4, r3
   1469c:	f003 0301 	and.w	r3, r3, #1
   146a0:	2b00      	cmp	r3, #0
   146a2:	bf14      	ite	ne
   146a4:	2301      	movne	r3, #1
   146a6:	2300      	moveq	r3, #0
   146a8:	f88d 300f 	strb.w	r3, [sp, #15]
    return static_cast<State>(state);
   146ac:	f89d 400f 	ldrb.w	r4, [sp, #15]
   146b0:	462b      	mov	r3, r5
   146b2:	4619      	mov	r1, r3
   146b4:	4803      	ldr	r0, [pc, #12]	; (146c4 <Gpio::ReadState()+0x70>)
   146b6:	f7fe fbef 	bl	12e98 <__cyg_profile_func_exit>
   146ba:	4623      	mov	r3, r4
  }
   146bc:	4618      	mov	r0, r3
   146be:	b005      	add	sp, #20
   146c0:	bd30      	pop	{r4, r5, pc}
   146c2:	bf00      	nop
   146c4:	00014655 	.word	0x00014655
   146c8:	10000004 	.word	0x10000004

000146cc <Gpio::Read()>:
  // Returns true if input or output pin is high
  bool Read(void) override
   146cc:	b530      	push	{r4, r5, lr}
   146ce:	b083      	sub	sp, #12
   146d0:	4675      	mov	r5, lr
   146d2:	9001      	str	r0, [sp, #4]
   146d4:	462b      	mov	r3, r5
   146d6:	4619      	mov	r1, r3
   146d8:	4816      	ldr	r0, [pc, #88]	; (14734 <Gpio::Read()+0x68>)
   146da:	f7fe fbc9 	bl	12e70 <__cyg_profile_func_enter>
  {
    return (gpio_port[pin_->GetPort()]->PIN >> pin_->GetPin()) & 1;
   146de:	9b01      	ldr	r3, [sp, #4]
   146e0:	689a      	ldr	r2, [r3, #8]
   146e2:	9b01      	ldr	r3, [sp, #4]
   146e4:	689b      	ldr	r3, [r3, #8]
   146e6:	681b      	ldr	r3, [r3, #0]
   146e8:	332c      	adds	r3, #44	; 0x2c
   146ea:	681b      	ldr	r3, [r3, #0]
   146ec:	4610      	mov	r0, r2
   146ee:	4798      	blx	r3
   146f0:	4603      	mov	r3, r0
   146f2:	461a      	mov	r2, r3
   146f4:	4b10      	ldr	r3, [pc, #64]	; (14738 <Gpio::Read()+0x6c>)
   146f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   146fa:	695c      	ldr	r4, [r3, #20]
   146fc:	9b01      	ldr	r3, [sp, #4]
   146fe:	689a      	ldr	r2, [r3, #8]
   14700:	9b01      	ldr	r3, [sp, #4]
   14702:	689b      	ldr	r3, [r3, #8]
   14704:	681b      	ldr	r3, [r3, #0]
   14706:	3330      	adds	r3, #48	; 0x30
   14708:	681b      	ldr	r3, [r3, #0]
   1470a:	4610      	mov	r0, r2
   1470c:	4798      	blx	r3
   1470e:	4603      	mov	r3, r0
   14710:	fa24 f303 	lsr.w	r3, r4, r3
   14714:	f003 0301 	and.w	r3, r3, #1
   14718:	2b00      	cmp	r3, #0
   1471a:	bf14      	ite	ne
   1471c:	2301      	movne	r3, #1
   1471e:	2300      	moveq	r3, #0
   14720:	b2dc      	uxtb	r4, r3
   14722:	462b      	mov	r3, r5
   14724:	4619      	mov	r1, r3
   14726:	4803      	ldr	r0, [pc, #12]	; (14734 <Gpio::Read()+0x68>)
   14728:	f7fe fbb6 	bl	12e98 <__cyg_profile_func_exit>
   1472c:	4623      	mov	r3, r4
  }
   1472e:	4618      	mov	r0, r3
   14730:	b003      	add	sp, #12
   14732:	bd30      	pop	{r4, r5, pc}
   14734:	000146cd 	.word	0x000146cd
   14738:	10000004 	.word	0x10000004

0001473c <Gpio::GetPin()>:
  PinInterface & GetPin() override
   1473c:	b530      	push	{r4, r5, lr}
   1473e:	b083      	sub	sp, #12
   14740:	4675      	mov	r5, lr
   14742:	9001      	str	r0, [sp, #4]
   14744:	462b      	mov	r3, r5
   14746:	4619      	mov	r1, r3
   14748:	4806      	ldr	r0, [pc, #24]	; (14764 <Gpio::GetPin()+0x28>)
   1474a:	f7fe fb91 	bl	12e70 <__cyg_profile_func_enter>
  {
    return *pin_;
   1474e:	9b01      	ldr	r3, [sp, #4]
   14750:	689c      	ldr	r4, [r3, #8]
   14752:	462b      	mov	r3, r5
   14754:	4619      	mov	r1, r3
   14756:	4803      	ldr	r0, [pc, #12]	; (14764 <Gpio::GetPin()+0x28>)
   14758:	f7fe fb9e 	bl	12e98 <__cyg_profile_func_exit>
   1475c:	4623      	mov	r3, r4
  }
   1475e:	4618      	mov	r0, r3
   14760:	b003      	add	sp, #12
   14762:	bd30      	pop	{r4, r5, pc}
   14764:	0001473d 	.word	0x0001473d

00014768 <Gpio::ValidPortCheck()>:

  // Checks if the selected gpio port is valid for external interrupts.
  bool ValidPortCheck()
   14768:	b530      	push	{r4, r5, lr}
   1476a:	b087      	sub	sp, #28
   1476c:	4675      	mov	r5, lr
   1476e:	9003      	str	r0, [sp, #12]
   14770:	462b      	mov	r3, r5
   14772:	4619      	mov	r1, r3
   14774:	4817      	ldr	r0, [pc, #92]	; (147d4 <Gpio::ValidPortCheck()+0x6c>)
   14776:	f7fe fb7b 	bl	12e70 <__cyg_profile_func_enter>
  {
    bool is_valid = (interupt_port_ <= 1);
   1477a:	9b03      	ldr	r3, [sp, #12]
   1477c:	791b      	ldrb	r3, [r3, #4]
   1477e:	2b01      	cmp	r3, #1
   14780:	bf94      	ite	ls
   14782:	2301      	movls	r3, #1
   14784:	2300      	movhi	r3, #0
   14786:	b2db      	uxtb	r3, r3
   14788:	f88d 3017 	strb.w	r3, [sp, #23]
    SJ2_ASSERT_WARNING(is_valid,
   1478c:	f89d 3017 	ldrb.w	r3, [sp, #23]
   14790:	f083 0301 	eor.w	r3, r3, #1
   14794:	b2db      	uxtb	r3, r3
   14796:	2b00      	cmp	r3, #0
   14798:	d010      	beq.n	147bc <Gpio::ValidPortCheck()+0x54>
   1479a:	9b03      	ldr	r3, [sp, #12]
   1479c:	689a      	ldr	r2, [r3, #8]
   1479e:	9b03      	ldr	r3, [sp, #12]
   147a0:	689b      	ldr	r3, [r3, #8]
   147a2:	681b      	ldr	r3, [r3, #0]
   147a4:	332c      	adds	r3, #44	; 0x2c
   147a6:	681b      	ldr	r3, [r3, #0]
   147a8:	4610      	mov	r0, r2
   147aa:	4798      	blx	r3
   147ac:	4603      	mov	r3, r0
   147ae:	9300      	str	r3, [sp, #0]
   147b0:	23a6      	movs	r3, #166	; 0xa6
   147b2:	4a09      	ldr	r2, [pc, #36]	; (147d8 <Gpio::ValidPortCheck()+0x70>)
   147b4:	4909      	ldr	r1, [pc, #36]	; (147dc <Gpio::ValidPortCheck()+0x74>)
   147b6:	480a      	ldr	r0, [pc, #40]	; (147e0 <Gpio::ValidPortCheck()+0x78>)
   147b8:	f7ff fdb4 	bl	14324 <printf>
                       "Port %d cannot be used for External Interrupts. Need "
                       "to use GPIO on Port 0 or 2.",
                       pin_->GetPort());
    return is_valid;
   147bc:	f89d 4017 	ldrb.w	r4, [sp, #23]
   147c0:	462b      	mov	r3, r5
   147c2:	4619      	mov	r1, r3
   147c4:	4803      	ldr	r0, [pc, #12]	; (147d4 <Gpio::ValidPortCheck()+0x6c>)
   147c6:	f7fe fb67 	bl	12e98 <__cyg_profile_func_exit>
   147ca:	4623      	mov	r3, r4
  }
   147cc:	4618      	mov	r0, r3
   147ce:	b007      	add	sp, #28
   147d0:	bd30      	pop	{r4, r5, pc}
   147d2:	bf00      	nop
   147d4:	00014769 	.word	0x00014769
   147d8:	00018f5c 	.word	0x00018f5c
   147dc:	00018950 	.word	0x00018950
   147e0:	00017e20 	.word	0x00017e20

000147e4 <Gpio::SetInterruptRoutine(void (*)())>:

  // Assigns the developer's ISR function to the port/pin gpio instance.
  void SetInterruptRoutine(IsrPointer function) override
   147e4:	b570      	push	{r4, r5, r6, lr}
   147e6:	b082      	sub	sp, #8
   147e8:	4676      	mov	r6, lr
   147ea:	9001      	str	r0, [sp, #4]
   147ec:	9100      	str	r1, [sp, #0]
   147ee:	4633      	mov	r3, r6
   147f0:	4619      	mov	r1, r3
   147f2:	4811      	ldr	r0, [pc, #68]	; (14838 <Gpio::SetInterruptRoutine(void (*)())+0x54>)
   147f4:	f7fe fb3c 	bl	12e70 <__cyg_profile_func_enter>
  {
    ValidPortCheck();
   147f8:	9801      	ldr	r0, [sp, #4]
   147fa:	f7ff ffb5 	bl	14768 <Gpio::ValidPortCheck()>
    interrupthandlers[interupt_port_][pin_->GetPin()] = function;
   147fe:	9c00      	ldr	r4, [sp, #0]
   14800:	9b01      	ldr	r3, [sp, #4]
   14802:	791b      	ldrb	r3, [r3, #4]
   14804:	461d      	mov	r5, r3
   14806:	9b01      	ldr	r3, [sp, #4]
   14808:	689a      	ldr	r2, [r3, #8]
   1480a:	9b01      	ldr	r3, [sp, #4]
   1480c:	689b      	ldr	r3, [r3, #8]
   1480e:	681b      	ldr	r3, [r3, #0]
   14810:	3330      	adds	r3, #48	; 0x30
   14812:	681b      	ldr	r3, [r3, #0]
   14814:	4610      	mov	r0, r2
   14816:	4798      	blx	r3
   14818:	4603      	mov	r3, r0
   1481a:	4619      	mov	r1, r3
   1481c:	4a07      	ldr	r2, [pc, #28]	; (1483c <Gpio::SetInterruptRoutine(void (*)())+0x58>)
   1481e:	016b      	lsls	r3, r5, #5
   14820:	440b      	add	r3, r1
   14822:	f842 4023 	str.w	r4, [r2, r3, lsl #2]
   14826:	4633      	mov	r3, r6
   14828:	4619      	mov	r1, r3
   1482a:	4803      	ldr	r0, [pc, #12]	; (14838 <Gpio::SetInterruptRoutine(void (*)())+0x54>)
   1482c:	f7fe fb34 	bl	12e98 <__cyg_profile_func_exit>
  }
   14830:	bf00      	nop
   14832:	b002      	add	sp, #8
   14834:	bd70      	pop	{r4, r5, r6, pc}
   14836:	bf00      	nop
   14838:	000147e5 	.word	0x000147e5
   1483c:	10000540 	.word	0x10000540

00014840 <Gpio::ClearInterruptRoutine()>:

  // Clears the developers ISR function from the port/pin gio instance.
  void ClearInterruptRoutine() override
   14840:	b530      	push	{r4, r5, lr}
   14842:	b083      	sub	sp, #12
   14844:	4675      	mov	r5, lr
   14846:	9001      	str	r0, [sp, #4]
   14848:	462b      	mov	r3, r5
   1484a:	4619      	mov	r1, r3
   1484c:	480f      	ldr	r0, [pc, #60]	; (1488c <Gpio::ClearInterruptRoutine()+0x4c>)
   1484e:	f7fe fb0f 	bl	12e70 <__cyg_profile_func_enter>
  {
    interrupthandlers[interupt_port_][pin_->GetPin()] = nullptr;
   14852:	9b01      	ldr	r3, [sp, #4]
   14854:	791b      	ldrb	r3, [r3, #4]
   14856:	461c      	mov	r4, r3
   14858:	9b01      	ldr	r3, [sp, #4]
   1485a:	689a      	ldr	r2, [r3, #8]
   1485c:	9b01      	ldr	r3, [sp, #4]
   1485e:	689b      	ldr	r3, [r3, #8]
   14860:	681b      	ldr	r3, [r3, #0]
   14862:	3330      	adds	r3, #48	; 0x30
   14864:	681b      	ldr	r3, [r3, #0]
   14866:	4610      	mov	r0, r2
   14868:	4798      	blx	r3
   1486a:	4603      	mov	r3, r0
   1486c:	4619      	mov	r1, r3
   1486e:	4a08      	ldr	r2, [pc, #32]	; (14890 <Gpio::ClearInterruptRoutine()+0x50>)
   14870:	0163      	lsls	r3, r4, #5
   14872:	440b      	add	r3, r1
   14874:	2100      	movs	r1, #0
   14876:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
   1487a:	462b      	mov	r3, r5
   1487c:	4619      	mov	r1, r3
   1487e:	4803      	ldr	r0, [pc, #12]	; (1488c <Gpio::ClearInterruptRoutine()+0x4c>)
   14880:	f7fe fb0a 	bl	12e98 <__cyg_profile_func_exit>
  }
   14884:	bf00      	nop
   14886:	b003      	add	sp, #12
   14888:	bd30      	pop	{r4, r5, pc}
   1488a:	bf00      	nop
   1488c:	00014841 	.word	0x00014841
   14890:	10000540 	.word	0x10000540

00014894 <unsigned char util::Value<GpioInterface::Edge, unsigned char>(GpioInterface::Edge)>:
constexpr Type Value(Enum enum_type_value)
   14894:	b530      	push	{r4, r5, lr}
   14896:	b083      	sub	sp, #12
   14898:	4675      	mov	r5, lr
   1489a:	4603      	mov	r3, r0
   1489c:	f88d 3007 	strb.w	r3, [sp, #7]
   148a0:	462b      	mov	r3, r5
   148a2:	4619      	mov	r1, r3
   148a4:	4806      	ldr	r0, [pc, #24]	; (148c0 <unsigned char util::Value<GpioInterface::Edge, unsigned char>(GpioInterface::Edge)+0x2c>)
   148a6:	f7fe fae3 	bl	12e70 <__cyg_profile_func_enter>
  return static_cast<Type>(enum_type_value);
   148aa:	f89d 4007 	ldrb.w	r4, [sp, #7]
   148ae:	462b      	mov	r3, r5
   148b0:	4619      	mov	r1, r3
   148b2:	4803      	ldr	r0, [pc, #12]	; (148c0 <unsigned char util::Value<GpioInterface::Edge, unsigned char>(GpioInterface::Edge)+0x2c>)
   148b4:	f7fe faf0 	bl	12e98 <__cyg_profile_func_exit>
   148b8:	4623      	mov	r3, r4
}
   148ba:	4618      	mov	r0, r3
   148bc:	b003      	add	sp, #12
   148be:	bd30      	pop	{r4, r5, pc}
   148c0:	00014895 	.word	0x00014895

000148c4 <Gpio::SetInterruptEdge(GpioInterface::Edge)>:

  // Sets the selected edge that the gpio interrupt will be triggered on.
  void SetInterruptEdge(Edge edge) override
   148c4:	b510      	push	{r4, lr}
   148c6:	b084      	sub	sp, #16
   148c8:	4674      	mov	r4, lr
   148ca:	9003      	str	r0, [sp, #12]
   148cc:	460b      	mov	r3, r1
   148ce:	f88d 300b 	strb.w	r3, [sp, #11]
   148d2:	4623      	mov	r3, r4
   148d4:	4619      	mov	r1, r3
   148d6:	4819      	ldr	r0, [pc, #100]	; (1493c <Gpio::SetInterruptEdge(GpioInterface::Edge)+0x78>)
   148d8:	f7fe faca 	bl	12e70 <__cyg_profile_func_enter>
  {
    ValidPortCheck();
   148dc:	9803      	ldr	r0, [sp, #12]
   148de:	f7ff ff43 	bl	14768 <Gpio::ValidPortCheck()>
    switch (edge)
   148e2:	f89d 300b 	ldrb.w	r3, [sp, #11]
   148e6:	2b01      	cmp	r3, #1
   148e8:	d008      	beq.n	148fc <Gpio::SetInterruptEdge(GpioInterface::Edge)+0x38>
   148ea:	2b01      	cmp	r3, #1
   148ec:	d302      	bcc.n	148f4 <Gpio::SetInterruptEdge(GpioInterface::Edge)+0x30>
   148ee:	2b02      	cmp	r3, #2
   148f0:	d008      	beq.n	14904 <Gpio::SetInterruptEdge(GpioInterface::Edge)+0x40>
   148f2:	e00e      	b.n	14912 <Gpio::SetInterruptEdge(GpioInterface::Edge)+0x4e>
    {
      case Edge::kEdgeRising:
      {
        SetEdgeRising();
   148f4:	9803      	ldr	r0, [sp, #12]
   148f6:	f000 f8b1 	bl	14a5c <Gpio::SetEdgeRising()>
        break;
   148fa:	e017      	b.n	1492c <Gpio::SetInterruptEdge(GpioInterface::Edge)+0x68>
      }
      case Edge::kEdgeFalling:
      {
        SetEdgeFalling();
   148fc:	9803      	ldr	r0, [sp, #12]
   148fe:	f000 f8eb 	bl	14ad8 <Gpio::SetEdgeFalling()>
        break;
   14902:	e013      	b.n	1492c <Gpio::SetInterruptEdge(GpioInterface::Edge)+0x68>
      }
      case Edge::kEdgeBoth:
      {
        SetEdgeRising();
   14904:	9803      	ldr	r0, [sp, #12]
   14906:	f000 f8a9 	bl	14a5c <Gpio::SetEdgeRising()>
        SetEdgeFalling();
   1490a:	9803      	ldr	r0, [sp, #12]
   1490c:	f000 f8e4 	bl	14ad8 <Gpio::SetEdgeFalling()>
        break;
   14910:	e00c      	b.n	1492c <Gpio::SetInterruptEdge(GpioInterface::Edge)+0x68>
      }
      default:
      {
        LOG_WARNING(
   14912:	f89d 300b 	ldrb.w	r3, [sp, #11]
   14916:	4618      	mov	r0, r3
   14918:	f7ff ffbc 	bl	14894 <unsigned char util::Value<GpioInterface::Edge, unsigned char>(GpioInterface::Edge)>
   1491c:	4603      	mov	r3, r0
   1491e:	9300      	str	r3, [sp, #0]
   14920:	23d2      	movs	r3, #210	; 0xd2
   14922:	4a07      	ldr	r2, [pc, #28]	; (14940 <Gpio::SetInterruptEdge(GpioInterface::Edge)+0x7c>)
   14924:	4907      	ldr	r1, [pc, #28]	; (14944 <Gpio::SetInterruptEdge(GpioInterface::Edge)+0x80>)
   14926:	4808      	ldr	r0, [pc, #32]	; (14948 <Gpio::SetInterruptEdge(GpioInterface::Edge)+0x84>)
   14928:	f7ff fcfc 	bl	14324 <printf>
   1492c:	4623      	mov	r3, r4
   1492e:	4619      	mov	r1, r3
   14930:	4802      	ldr	r0, [pc, #8]	; (1493c <Gpio::SetInterruptEdge(GpioInterface::Edge)+0x78>)
   14932:	f7fe fab1 	bl	12e98 <__cyg_profile_func_exit>
            "Edge %d cannot be used for External Interrupts."
            "Need to use a rising, falling, or both configuration.",
            util::Value(edge));
      }
    }
  }
   14936:	bf00      	nop
   14938:	b004      	add	sp, #16
   1493a:	bd10      	pop	{r4, pc}
   1493c:	000148c5 	.word	0x000148c5
   14940:	00018f78 	.word	0x00018f78
   14944:	0001895c 	.word	0x0001895c
   14948:	00017eb0 	.word	0x00017eb0

0001494c <Gpio::ClearInterruptEdge(GpioInterface::Edge)>:

  // Clears the seleted edge of the gpio interrupt from being triggered.
  void ClearInterruptEdge(Edge edge) override
   1494c:	b510      	push	{r4, lr}
   1494e:	b084      	sub	sp, #16
   14950:	4674      	mov	r4, lr
   14952:	9003      	str	r0, [sp, #12]
   14954:	460b      	mov	r3, r1
   14956:	f88d 300b 	strb.w	r3, [sp, #11]
   1495a:	4623      	mov	r3, r4
   1495c:	4619      	mov	r1, r3
   1495e:	4819      	ldr	r0, [pc, #100]	; (149c4 <Gpio::ClearInterruptEdge(GpioInterface::Edge)+0x78>)
   14960:	f7fe fa86 	bl	12e70 <__cyg_profile_func_enter>
  {
    ValidPortCheck();
   14964:	9803      	ldr	r0, [sp, #12]
   14966:	f7ff feff 	bl	14768 <Gpio::ValidPortCheck()>
    switch (edge)
   1496a:	f89d 300b 	ldrb.w	r3, [sp, #11]
   1496e:	2b01      	cmp	r3, #1
   14970:	d008      	beq.n	14984 <Gpio::ClearInterruptEdge(GpioInterface::Edge)+0x38>
   14972:	2b01      	cmp	r3, #1
   14974:	d302      	bcc.n	1497c <Gpio::ClearInterruptEdge(GpioInterface::Edge)+0x30>
   14976:	2b02      	cmp	r3, #2
   14978:	d008      	beq.n	1498c <Gpio::ClearInterruptEdge(GpioInterface::Edge)+0x40>
   1497a:	e00e      	b.n	1499a <Gpio::ClearInterruptEdge(GpioInterface::Edge)+0x4e>
    {
      case Edge::kEdgeRising:
      {
        ClearEdgeRising();
   1497c:	9803      	ldr	r0, [sp, #12]
   1497e:	f000 f8e9 	bl	14b54 <Gpio::ClearEdgeRising()>
        break;
   14982:	e017      	b.n	149b4 <Gpio::ClearInterruptEdge(GpioInterface::Edge)+0x68>
      }
      case Edge::kEdgeFalling:
      {
        ClearEdgeFalling();
   14984:	9803      	ldr	r0, [sp, #12]
   14986:	f000 f923 	bl	14bd0 <Gpio::ClearEdgeFalling()>
        break;
   1498a:	e013      	b.n	149b4 <Gpio::ClearInterruptEdge(GpioInterface::Edge)+0x68>
      }
      case Edge::kEdgeBoth:
      {
        ClearEdgeRising();
   1498c:	9803      	ldr	r0, [sp, #12]
   1498e:	f000 f8e1 	bl	14b54 <Gpio::ClearEdgeRising()>
        ClearEdgeFalling();
   14992:	9803      	ldr	r0, [sp, #12]
   14994:	f000 f91c 	bl	14bd0 <Gpio::ClearEdgeFalling()>
        break;
   14998:	e00c      	b.n	149b4 <Gpio::ClearInterruptEdge(GpioInterface::Edge)+0x68>
      }
      default:
      {
        LOG_WARNING(
   1499a:	f89d 300b 	ldrb.w	r3, [sp, #11]
   1499e:	4618      	mov	r0, r3
   149a0:	f7ff ff78 	bl	14894 <unsigned char util::Value<GpioInterface::Edge, unsigned char>(GpioInterface::Edge)>
   149a4:	4603      	mov	r3, r0
   149a6:	9300      	str	r3, [sp, #0]
   149a8:	23f2      	movs	r3, #242	; 0xf2
   149aa:	4a07      	ldr	r2, [pc, #28]	; (149c8 <Gpio::ClearInterruptEdge(GpioInterface::Edge)+0x7c>)
   149ac:	4907      	ldr	r1, [pc, #28]	; (149cc <Gpio::ClearInterruptEdge(GpioInterface::Edge)+0x80>)
   149ae:	4808      	ldr	r0, [pc, #32]	; (149d0 <Gpio::ClearInterruptEdge(GpioInterface::Edge)+0x84>)
   149b0:	f7ff fcb8 	bl	14324 <printf>
   149b4:	4623      	mov	r3, r4
   149b6:	4619      	mov	r1, r3
   149b8:	4802      	ldr	r0, [pc, #8]	; (149c4 <Gpio::ClearInterruptEdge(GpioInterface::Edge)+0x78>)
   149ba:	f7fe fa6d 	bl	12e98 <__cyg_profile_func_exit>
            "Edge %d cannot be used for External Interrupts."
            "Need to use a rising, falling, or both configuration.",
           util::Value(edge));
      }
    }
  }
   149be:	bf00      	nop
   149c0:	b004      	add	sp, #16
   149c2:	bd10      	pop	{r4, pc}
   149c4:	0001494d 	.word	0x0001494d
   149c8:	00018f20 	.word	0x00018f20
   149cc:	00018968 	.word	0x00018968
   149d0:	00017eb0 	.word	0x00017eb0

000149d4 <Gpio::AttachInterrupt(void (*)(), GpioInterface::Edge)>:

  // Assign the developer's ISR and sets the selected edge that the gpio
  // interrupt will be triggered on.
  void AttachInterrupt(IsrPointer function, Edge edge) override
   149d4:	b510      	push	{r4, lr}
   149d6:	b084      	sub	sp, #16
   149d8:	4674      	mov	r4, lr
   149da:	9003      	str	r0, [sp, #12]
   149dc:	9102      	str	r1, [sp, #8]
   149de:	4613      	mov	r3, r2
   149e0:	f88d 3007 	strb.w	r3, [sp, #7]
   149e4:	4623      	mov	r3, r4
   149e6:	4619      	mov	r1, r3
   149e8:	480b      	ldr	r0, [pc, #44]	; (14a18 <Gpio::AttachInterrupt(void (*)(), GpioInterface::Edge)+0x44>)
   149ea:	f7fe fa41 	bl	12e70 <__cyg_profile_func_enter>
  {
    ValidPortCheck();
   149ee:	9803      	ldr	r0, [sp, #12]
   149f0:	f7ff feba 	bl	14768 <Gpio::ValidPortCheck()>
    SetInterruptRoutine(function);
   149f4:	9902      	ldr	r1, [sp, #8]
   149f6:	9803      	ldr	r0, [sp, #12]
   149f8:	f7ff fef4 	bl	147e4 <Gpio::SetInterruptRoutine(void (*)())>
    SetInterruptEdge(edge);
   149fc:	f89d 3007 	ldrb.w	r3, [sp, #7]
   14a00:	4619      	mov	r1, r3
   14a02:	9803      	ldr	r0, [sp, #12]
   14a04:	f7ff ff5e 	bl	148c4 <Gpio::SetInterruptEdge(GpioInterface::Edge)>
   14a08:	4623      	mov	r3, r4
   14a0a:	4619      	mov	r1, r3
   14a0c:	4802      	ldr	r0, [pc, #8]	; (14a18 <Gpio::AttachInterrupt(void (*)(), GpioInterface::Edge)+0x44>)
   14a0e:	f7fe fa43 	bl	12e98 <__cyg_profile_func_exit>
  }
   14a12:	bf00      	nop
   14a14:	b004      	add	sp, #16
   14a16:	bd10      	pop	{r4, pc}
   14a18:	000149d5 	.word	0x000149d5

00014a1c <Gpio::DetachInterrupt()>:

  // Removes the developer's ISR and clears the selected edge of the gpio
  // interrupt from being triggered.
  void DetachInterrupt() override
   14a1c:	b510      	push	{r4, lr}
   14a1e:	b082      	sub	sp, #8
   14a20:	4674      	mov	r4, lr
   14a22:	9001      	str	r0, [sp, #4]
   14a24:	4623      	mov	r3, r4
   14a26:	4619      	mov	r1, r3
   14a28:	480b      	ldr	r0, [pc, #44]	; (14a58 <Gpio::DetachInterrupt()+0x3c>)
   14a2a:	f7fe fa21 	bl	12e70 <__cyg_profile_func_enter>
  {
    ValidPortCheck();
   14a2e:	9801      	ldr	r0, [sp, #4]
   14a30:	f7ff fe9a 	bl	14768 <Gpio::ValidPortCheck()>
    ClearInterruptRoutine();
   14a34:	9801      	ldr	r0, [sp, #4]
   14a36:	f7ff ff03 	bl	14840 <Gpio::ClearInterruptRoutine()>
    ClearEdgeRising();
   14a3a:	9801      	ldr	r0, [sp, #4]
   14a3c:	f000 f88a 	bl	14b54 <Gpio::ClearEdgeRising()>
    ClearEdgeFalling();
   14a40:	9801      	ldr	r0, [sp, #4]
   14a42:	f000 f8c5 	bl	14bd0 <Gpio::ClearEdgeFalling()>
   14a46:	4623      	mov	r3, r4
   14a48:	4619      	mov	r1, r3
   14a4a:	4803      	ldr	r0, [pc, #12]	; (14a58 <Gpio::DetachInterrupt()+0x3c>)
   14a4c:	f7fe fa24 	bl	12e98 <__cyg_profile_func_exit>
  }
   14a50:	bf00      	nop
   14a52:	b002      	add	sp, #8
   14a54:	bd10      	pop	{r4, pc}
   14a56:	bf00      	nop
   14a58:	00014a1d 	.word	0x00014a1d

00014a5c <Gpio::SetEdgeRising()>:
    *interrupt[triggered_port].clear |= (1 << triggered_pin);
  }

 private:
  // Sets the gpio interrupt to trigger on a rising edge.
  void SetEdgeRising()
   14a5c:	b530      	push	{r4, r5, lr}
   14a5e:	b083      	sub	sp, #12
   14a60:	4675      	mov	r5, lr
   14a62:	9001      	str	r0, [sp, #4]
   14a64:	462b      	mov	r3, r5
   14a66:	4619      	mov	r1, r3
   14a68:	4819      	ldr	r0, [pc, #100]	; (14ad0 <Gpio::SetEdgeRising()+0x74>)
   14a6a:	f7fe fa01 	bl	12e70 <__cyg_profile_func_enter>
  {
    *interrupt[interupt_port_].enable_rising_edge |= (1 << pin_->GetPin());
   14a6e:	9b01      	ldr	r3, [sp, #4]
   14a70:	689a      	ldr	r2, [r3, #8]
   14a72:	9b01      	ldr	r3, [sp, #4]
   14a74:	689b      	ldr	r3, [r3, #8]
   14a76:	681b      	ldr	r3, [r3, #0]
   14a78:	3330      	adds	r3, #48	; 0x30
   14a7a:	681b      	ldr	r3, [r3, #0]
   14a7c:	4610      	mov	r0, r2
   14a7e:	4798      	blx	r3
   14a80:	4603      	mov	r3, r0
   14a82:	461a      	mov	r2, r3
   14a84:	2301      	movs	r3, #1
   14a86:	fa03 f002 	lsl.w	r0, r3, r2
   14a8a:	9b01      	ldr	r3, [sp, #4]
   14a8c:	791b      	ldrb	r3, [r3, #4]
   14a8e:	4619      	mov	r1, r3
   14a90:	4a10      	ldr	r2, [pc, #64]	; (14ad4 <Gpio::SetEdgeRising()+0x78>)
   14a92:	460b      	mov	r3, r1
   14a94:	009b      	lsls	r3, r3, #2
   14a96:	440b      	add	r3, r1
   14a98:	009b      	lsls	r3, r3, #2
   14a9a:	4413      	add	r3, r2
   14a9c:	330c      	adds	r3, #12
   14a9e:	681b      	ldr	r3, [r3, #0]
   14aa0:	681a      	ldr	r2, [r3, #0]
   14aa2:	4604      	mov	r4, r0
   14aa4:	9b01      	ldr	r3, [sp, #4]
   14aa6:	791b      	ldrb	r3, [r3, #4]
   14aa8:	4618      	mov	r0, r3
   14aaa:	490a      	ldr	r1, [pc, #40]	; (14ad4 <Gpio::SetEdgeRising()+0x78>)
   14aac:	4603      	mov	r3, r0
   14aae:	009b      	lsls	r3, r3, #2
   14ab0:	4403      	add	r3, r0
   14ab2:	009b      	lsls	r3, r3, #2
   14ab4:	440b      	add	r3, r1
   14ab6:	330c      	adds	r3, #12
   14ab8:	681b      	ldr	r3, [r3, #0]
   14aba:	4322      	orrs	r2, r4
   14abc:	601a      	str	r2, [r3, #0]
   14abe:	462b      	mov	r3, r5
   14ac0:	4619      	mov	r1, r3
   14ac2:	4803      	ldr	r0, [pc, #12]	; (14ad0 <Gpio::SetEdgeRising()+0x74>)
   14ac4:	f7fe f9e8 	bl	12e98 <__cyg_profile_func_exit>
  }
   14ac8:	bf00      	nop
   14aca:	b003      	add	sp, #12
   14acc:	bd30      	pop	{r4, r5, pc}
   14ace:	bf00      	nop
   14ad0:	00014a5d 	.word	0x00014a5d
   14ad4:	100001ac 	.word	0x100001ac

00014ad8 <Gpio::SetEdgeFalling()>:

  // Sets the gpio interrupt to trigger on a falling edge.
  void SetEdgeFalling()
   14ad8:	b530      	push	{r4, r5, lr}
   14ada:	b083      	sub	sp, #12
   14adc:	4675      	mov	r5, lr
   14ade:	9001      	str	r0, [sp, #4]
   14ae0:	462b      	mov	r3, r5
   14ae2:	4619      	mov	r1, r3
   14ae4:	4819      	ldr	r0, [pc, #100]	; (14b4c <Gpio::SetEdgeFalling()+0x74>)
   14ae6:	f7fe f9c3 	bl	12e70 <__cyg_profile_func_enter>
  {
    *interrupt[interupt_port_].enable_falling_edge |= (1 << pin_->GetPin());
   14aea:	9b01      	ldr	r3, [sp, #4]
   14aec:	689a      	ldr	r2, [r3, #8]
   14aee:	9b01      	ldr	r3, [sp, #4]
   14af0:	689b      	ldr	r3, [r3, #8]
   14af2:	681b      	ldr	r3, [r3, #0]
   14af4:	3330      	adds	r3, #48	; 0x30
   14af6:	681b      	ldr	r3, [r3, #0]
   14af8:	4610      	mov	r0, r2
   14afa:	4798      	blx	r3
   14afc:	4603      	mov	r3, r0
   14afe:	461a      	mov	r2, r3
   14b00:	2301      	movs	r3, #1
   14b02:	fa03 f002 	lsl.w	r0, r3, r2
   14b06:	9b01      	ldr	r3, [sp, #4]
   14b08:	791b      	ldrb	r3, [r3, #4]
   14b0a:	4619      	mov	r1, r3
   14b0c:	4a10      	ldr	r2, [pc, #64]	; (14b50 <Gpio::SetEdgeFalling()+0x78>)
   14b0e:	460b      	mov	r3, r1
   14b10:	009b      	lsls	r3, r3, #2
   14b12:	440b      	add	r3, r1
   14b14:	009b      	lsls	r3, r3, #2
   14b16:	4413      	add	r3, r2
   14b18:	3310      	adds	r3, #16
   14b1a:	681b      	ldr	r3, [r3, #0]
   14b1c:	681a      	ldr	r2, [r3, #0]
   14b1e:	4604      	mov	r4, r0
   14b20:	9b01      	ldr	r3, [sp, #4]
   14b22:	791b      	ldrb	r3, [r3, #4]
   14b24:	4618      	mov	r0, r3
   14b26:	490a      	ldr	r1, [pc, #40]	; (14b50 <Gpio::SetEdgeFalling()+0x78>)
   14b28:	4603      	mov	r3, r0
   14b2a:	009b      	lsls	r3, r3, #2
   14b2c:	4403      	add	r3, r0
   14b2e:	009b      	lsls	r3, r3, #2
   14b30:	440b      	add	r3, r1
   14b32:	3310      	adds	r3, #16
   14b34:	681b      	ldr	r3, [r3, #0]
   14b36:	4322      	orrs	r2, r4
   14b38:	601a      	str	r2, [r3, #0]
   14b3a:	462b      	mov	r3, r5
   14b3c:	4619      	mov	r1, r3
   14b3e:	4803      	ldr	r0, [pc, #12]	; (14b4c <Gpio::SetEdgeFalling()+0x74>)
   14b40:	f7fe f9aa 	bl	12e98 <__cyg_profile_func_exit>
  }
   14b44:	bf00      	nop
   14b46:	b003      	add	sp, #12
   14b48:	bd30      	pop	{r4, r5, pc}
   14b4a:	bf00      	nop
   14b4c:	00014ad9 	.word	0x00014ad9
   14b50:	100001ac 	.word	0x100001ac

00014b54 <Gpio::ClearEdgeRising()>:

  // Clears the gpio interrupt to no longer trigger on a rising edge.
  void ClearEdgeRising()
   14b54:	b530      	push	{r4, r5, lr}
   14b56:	b083      	sub	sp, #12
   14b58:	4675      	mov	r5, lr
   14b5a:	9001      	str	r0, [sp, #4]
   14b5c:	462b      	mov	r3, r5
   14b5e:	4619      	mov	r1, r3
   14b60:	4819      	ldr	r0, [pc, #100]	; (14bc8 <Gpio::ClearEdgeRising()+0x74>)
   14b62:	f7fe f985 	bl	12e70 <__cyg_profile_func_enter>
  {
    *interrupt[interupt_port_].enable_rising_edge &= ~(1 << pin_->GetPin());
   14b66:	9b01      	ldr	r3, [sp, #4]
   14b68:	689a      	ldr	r2, [r3, #8]
   14b6a:	9b01      	ldr	r3, [sp, #4]
   14b6c:	689b      	ldr	r3, [r3, #8]
   14b6e:	681b      	ldr	r3, [r3, #0]
   14b70:	3330      	adds	r3, #48	; 0x30
   14b72:	681b      	ldr	r3, [r3, #0]
   14b74:	4610      	mov	r0, r2
   14b76:	4798      	blx	r3
   14b78:	4603      	mov	r3, r0
   14b7a:	461a      	mov	r2, r3
   14b7c:	2301      	movs	r3, #1
   14b7e:	4093      	lsls	r3, r2
   14b80:	43d8      	mvns	r0, r3
   14b82:	9b01      	ldr	r3, [sp, #4]
   14b84:	791b      	ldrb	r3, [r3, #4]
   14b86:	4619      	mov	r1, r3
   14b88:	4a10      	ldr	r2, [pc, #64]	; (14bcc <Gpio::ClearEdgeRising()+0x78>)
   14b8a:	460b      	mov	r3, r1
   14b8c:	009b      	lsls	r3, r3, #2
   14b8e:	440b      	add	r3, r1
   14b90:	009b      	lsls	r3, r3, #2
   14b92:	4413      	add	r3, r2
   14b94:	330c      	adds	r3, #12
   14b96:	681b      	ldr	r3, [r3, #0]
   14b98:	681a      	ldr	r2, [r3, #0]
   14b9a:	4604      	mov	r4, r0
   14b9c:	9b01      	ldr	r3, [sp, #4]
   14b9e:	791b      	ldrb	r3, [r3, #4]
   14ba0:	4618      	mov	r0, r3
   14ba2:	490a      	ldr	r1, [pc, #40]	; (14bcc <Gpio::ClearEdgeRising()+0x78>)
   14ba4:	4603      	mov	r3, r0
   14ba6:	009b      	lsls	r3, r3, #2
   14ba8:	4403      	add	r3, r0
   14baa:	009b      	lsls	r3, r3, #2
   14bac:	440b      	add	r3, r1
   14bae:	330c      	adds	r3, #12
   14bb0:	681b      	ldr	r3, [r3, #0]
   14bb2:	4022      	ands	r2, r4
   14bb4:	601a      	str	r2, [r3, #0]
   14bb6:	462b      	mov	r3, r5
   14bb8:	4619      	mov	r1, r3
   14bba:	4803      	ldr	r0, [pc, #12]	; (14bc8 <Gpio::ClearEdgeRising()+0x74>)
   14bbc:	f7fe f96c 	bl	12e98 <__cyg_profile_func_exit>
  }
   14bc0:	bf00      	nop
   14bc2:	b003      	add	sp, #12
   14bc4:	bd30      	pop	{r4, r5, pc}
   14bc6:	bf00      	nop
   14bc8:	00014b55 	.word	0x00014b55
   14bcc:	100001ac 	.word	0x100001ac

00014bd0 <Gpio::ClearEdgeFalling()>:

  // Clears the gpio interrupt to no longer trigger on a falling edge.
  void ClearEdgeFalling()
   14bd0:	b530      	push	{r4, r5, lr}
   14bd2:	b083      	sub	sp, #12
   14bd4:	4675      	mov	r5, lr
   14bd6:	9001      	str	r0, [sp, #4]
   14bd8:	462b      	mov	r3, r5
   14bda:	4619      	mov	r1, r3
   14bdc:	4819      	ldr	r0, [pc, #100]	; (14c44 <Gpio::ClearEdgeFalling()+0x74>)
   14bde:	f7fe f947 	bl	12e70 <__cyg_profile_func_enter>
  {
    *interrupt[interupt_port_].enable_falling_edge &= ~(1 << pin_->GetPin());
   14be2:	9b01      	ldr	r3, [sp, #4]
   14be4:	689a      	ldr	r2, [r3, #8]
   14be6:	9b01      	ldr	r3, [sp, #4]
   14be8:	689b      	ldr	r3, [r3, #8]
   14bea:	681b      	ldr	r3, [r3, #0]
   14bec:	3330      	adds	r3, #48	; 0x30
   14bee:	681b      	ldr	r3, [r3, #0]
   14bf0:	4610      	mov	r0, r2
   14bf2:	4798      	blx	r3
   14bf4:	4603      	mov	r3, r0
   14bf6:	461a      	mov	r2, r3
   14bf8:	2301      	movs	r3, #1
   14bfa:	4093      	lsls	r3, r2
   14bfc:	43d8      	mvns	r0, r3
   14bfe:	9b01      	ldr	r3, [sp, #4]
   14c00:	791b      	ldrb	r3, [r3, #4]
   14c02:	4619      	mov	r1, r3
   14c04:	4a10      	ldr	r2, [pc, #64]	; (14c48 <Gpio::ClearEdgeFalling()+0x78>)
   14c06:	460b      	mov	r3, r1
   14c08:	009b      	lsls	r3, r3, #2
   14c0a:	440b      	add	r3, r1
   14c0c:	009b      	lsls	r3, r3, #2
   14c0e:	4413      	add	r3, r2
   14c10:	3310      	adds	r3, #16
   14c12:	681b      	ldr	r3, [r3, #0]
   14c14:	681a      	ldr	r2, [r3, #0]
   14c16:	4604      	mov	r4, r0
   14c18:	9b01      	ldr	r3, [sp, #4]
   14c1a:	791b      	ldrb	r3, [r3, #4]
   14c1c:	4618      	mov	r0, r3
   14c1e:	490a      	ldr	r1, [pc, #40]	; (14c48 <Gpio::ClearEdgeFalling()+0x78>)
   14c20:	4603      	mov	r3, r0
   14c22:	009b      	lsls	r3, r3, #2
   14c24:	4403      	add	r3, r0
   14c26:	009b      	lsls	r3, r3, #2
   14c28:	440b      	add	r3, r1
   14c2a:	3310      	adds	r3, #16
   14c2c:	681b      	ldr	r3, [r3, #0]
   14c2e:	4022      	ands	r2, r4
   14c30:	601a      	str	r2, [r3, #0]
   14c32:	462b      	mov	r3, r5
   14c34:	4619      	mov	r1, r3
   14c36:	4803      	ldr	r0, [pc, #12]	; (14c44 <Gpio::ClearEdgeFalling()+0x74>)
   14c38:	f7fe f92e 	bl	12e98 <__cyg_profile_func_exit>
  }
   14c3c:	bf00      	nop
   14c3e:	b003      	add	sp, #12
   14c40:	bd30      	pop	{r4, r5, pc}
   14c42:	bf00      	nop
   14c44:	00014bd1 	.word	0x00014bd1
   14c48:	100001ac 	.word	0x100001ac

00014c4c <SystemControllerInterface::SystemControllerInterface()>:
class SystemControllerInterface
   14c4c:	b082      	sub	sp, #8
   14c4e:	9001      	str	r0, [sp, #4]
   14c50:	4a03      	ldr	r2, [pc, #12]	; (14c60 <SystemControllerInterface::SystemControllerInterface()+0x14>)
   14c52:	9b01      	ldr	r3, [sp, #4]
   14c54:	601a      	str	r2, [r3, #0]
   14c56:	9b01      	ldr	r3, [sp, #4]
   14c58:	4618      	mov	r0, r3
   14c5a:	b002      	add	sp, #8
   14c5c:	4770      	bx	lr
   14c5e:	bf00      	nop
   14c60:	00018e38 	.word	0x00018e38

00014c64 <Lpc40xxSystemController::Lpc40xxSystemController()>:
  constexpr Lpc40xxSystemController() {}
   14c64:	b500      	push	{lr}
   14c66:	b083      	sub	sp, #12
   14c68:	9001      	str	r0, [sp, #4]
   14c6a:	9b01      	ldr	r3, [sp, #4]
   14c6c:	4618      	mov	r0, r3
   14c6e:	f7ff ffed 	bl	14c4c <SystemControllerInterface::SystemControllerInterface()>
   14c72:	4a04      	ldr	r2, [pc, #16]	; (14c84 <Lpc40xxSystemController::Lpc40xxSystemController()+0x20>)
   14c74:	9b01      	ldr	r3, [sp, #4]
   14c76:	601a      	str	r2, [r3, #0]
   14c78:	9b01      	ldr	r3, [sp, #4]
   14c7a:	4618      	mov	r0, r3
   14c7c:	b003      	add	sp, #12
   14c7e:	f85d fb04 	ldr.w	pc, [sp], #4
   14c82:	bf00      	nop
   14c84:	000178c4 	.word	0x000178c4

00014c88 <SspInterface::SspInterface()>:
class SspInterface
   14c88:	b530      	push	{r4, r5, lr}
   14c8a:	b083      	sub	sp, #12
   14c8c:	4675      	mov	r5, lr
   14c8e:	9001      	str	r0, [sp, #4]
   14c90:	462b      	mov	r3, r5
   14c92:	4619      	mov	r1, r3
   14c94:	4807      	ldr	r0, [pc, #28]	; (14cb4 <SspInterface::SspInterface()+0x2c>)
   14c96:	f7fe f8eb 	bl	12e70 <__cyg_profile_func_enter>
   14c9a:	4a07      	ldr	r2, [pc, #28]	; (14cb8 <SspInterface::SspInterface()+0x30>)
   14c9c:	9b01      	ldr	r3, [sp, #4]
   14c9e:	601a      	str	r2, [r3, #0]
   14ca0:	9c01      	ldr	r4, [sp, #4]
   14ca2:	462b      	mov	r3, r5
   14ca4:	4619      	mov	r1, r3
   14ca6:	4803      	ldr	r0, [pc, #12]	; (14cb4 <SspInterface::SspInterface()+0x2c>)
   14ca8:	f7fe f8f6 	bl	12e98 <__cyg_profile_func_exit>
   14cac:	4623      	mov	r3, r4
   14cae:	4618      	mov	r0, r3
   14cb0:	b003      	add	sp, #12
   14cb2:	bd30      	pop	{r4, r5, pc}
   14cb4:	00014c89 	.word	0x00014c89
   14cb8:	00018e10 	.word	0x00018e10

00014cbc <PinInterface::PinInterface(PinInterface const&)>:
class PinInterface
   14cbc:	b530      	push	{r4, r5, lr}
   14cbe:	b083      	sub	sp, #12
   14cc0:	4675      	mov	r5, lr
   14cc2:	9001      	str	r0, [sp, #4]
   14cc4:	9100      	str	r1, [sp, #0]
   14cc6:	462b      	mov	r3, r5
   14cc8:	4619      	mov	r1, r3
   14cca:	4808      	ldr	r0, [pc, #32]	; (14cec <PinInterface::PinInterface(PinInterface const&)+0x30>)
   14ccc:	f7fe f8d0 	bl	12e70 <__cyg_profile_func_enter>
   14cd0:	4a07      	ldr	r2, [pc, #28]	; (14cf0 <PinInterface::PinInterface(PinInterface const&)+0x34>)
   14cd2:	9b01      	ldr	r3, [sp, #4]
   14cd4:	601a      	str	r2, [r3, #0]
   14cd6:	9c01      	ldr	r4, [sp, #4]
   14cd8:	462b      	mov	r3, r5
   14cda:	4619      	mov	r1, r3
   14cdc:	4803      	ldr	r0, [pc, #12]	; (14cec <PinInterface::PinInterface(PinInterface const&)+0x30>)
   14cde:	f7fe f8db 	bl	12e98 <__cyg_profile_func_exit>
   14ce2:	4623      	mov	r3, r4
   14ce4:	4618      	mov	r0, r3
   14ce6:	b003      	add	sp, #12
   14ce8:	bd30      	pop	{r4, r5, pc}
   14cea:	bf00      	nop
   14cec:	00014cbd 	.word	0x00014cbd
   14cf0:	00018eec 	.word	0x00018eec

00014cf4 <Pin::Pin(Pin const&)>:
class Pin : public PinInterface
   14cf4:	b530      	push	{r4, r5, lr}
   14cf6:	b083      	sub	sp, #12
   14cf8:	4675      	mov	r5, lr
   14cfa:	9001      	str	r0, [sp, #4]
   14cfc:	9100      	str	r1, [sp, #0]
   14cfe:	462b      	mov	r3, r5
   14d00:	4619      	mov	r1, r3
   14d02:	480f      	ldr	r0, [pc, #60]	; (14d40 <Pin::Pin(Pin const&)+0x4c>)
   14d04:	f7fe f8b4 	bl	12e70 <__cyg_profile_func_enter>
   14d08:	9b01      	ldr	r3, [sp, #4]
   14d0a:	9a00      	ldr	r2, [sp, #0]
   14d0c:	4611      	mov	r1, r2
   14d0e:	4618      	mov	r0, r3
   14d10:	f7ff ffd4 	bl	14cbc <PinInterface::PinInterface(PinInterface const&)>
   14d14:	4a0b      	ldr	r2, [pc, #44]	; (14d44 <Pin::Pin(Pin const&)+0x50>)
   14d16:	9b01      	ldr	r3, [sp, #4]
   14d18:	601a      	str	r2, [r3, #0]
   14d1a:	9b00      	ldr	r3, [sp, #0]
   14d1c:	791a      	ldrb	r2, [r3, #4]
   14d1e:	9b01      	ldr	r3, [sp, #4]
   14d20:	711a      	strb	r2, [r3, #4]
   14d22:	9b00      	ldr	r3, [sp, #0]
   14d24:	795a      	ldrb	r2, [r3, #5]
   14d26:	9b01      	ldr	r3, [sp, #4]
   14d28:	715a      	strb	r2, [r3, #5]
   14d2a:	9c01      	ldr	r4, [sp, #4]
   14d2c:	462b      	mov	r3, r5
   14d2e:	4619      	mov	r1, r3
   14d30:	4803      	ldr	r0, [pc, #12]	; (14d40 <Pin::Pin(Pin const&)+0x4c>)
   14d32:	f7fe f8b1 	bl	12e98 <__cyg_profile_func_exit>
   14d36:	4623      	mov	r3, r4
   14d38:	4618      	mov	r0, r3
   14d3a:	b003      	add	sp, #12
   14d3c:	bd30      	pop	{r4, r5, pc}
   14d3e:	bf00      	nop
   14d40:	00014cf5 	.word	0x00014cf5
   14d44:	00017850 	.word	0x00017850

00014d48 <Ssp::Ssp(Ssp::Peripheral)>:
  explicit constexpr Ssp(Peripheral set_pssp)
   14d48:	b530      	push	{r4, r5, lr}
   14d4a:	b083      	sub	sp, #12
   14d4c:	4675      	mov	r5, lr
   14d4e:	9001      	str	r0, [sp, #4]
   14d50:	9100      	str	r1, [sp, #0]
   14d52:	462b      	mov	r3, r5
   14d54:	4619      	mov	r1, r3
   14d56:	4831      	ldr	r0, [pc, #196]	; (14e1c <Ssp::Ssp(Ssp::Peripheral)+0xd4>)
   14d58:	f7fe f88a 	bl	12e70 <__cyg_profile_func_enter>
        pssp_(set_pssp)
   14d5c:	9b01      	ldr	r3, [sp, #4]
   14d5e:	4618      	mov	r0, r3
   14d60:	f7ff ff92 	bl	14c88 <SspInterface::SspInterface()>
   14d64:	9b01      	ldr	r3, [sp, #4]
   14d66:	3304      	adds	r3, #4
   14d68:	4618      	mov	r0, r3
   14d6a:	f7ff ff7b 	bl	14c64 <Lpc40xxSystemController::Lpc40xxSystemController()>
   14d6e:	4a2c      	ldr	r2, [pc, #176]	; (14e20 <Ssp::Ssp(Ssp::Peripheral)+0xd8>)
   14d70:	9b01      	ldr	r3, [sp, #4]
   14d72:	601a      	str	r2, [r3, #0]
   14d74:	4a2b      	ldr	r2, [pc, #172]	; (14e24 <Ssp::Ssp(Ssp::Peripheral)+0xdc>)
   14d76:	9b01      	ldr	r3, [sp, #4]
   14d78:	605a      	str	r2, [r3, #4]
   14d7a:	9b01      	ldr	r3, [sp, #4]
   14d7c:	f103 0214 	add.w	r2, r3, #20
   14d80:	9b01      	ldr	r3, [sp, #4]
   14d82:	609a      	str	r2, [r3, #8]
   14d84:	9b01      	ldr	r3, [sp, #4]
   14d86:	f103 021c 	add.w	r2, r3, #28
   14d8a:	9b01      	ldr	r3, [sp, #4]
   14d8c:	60da      	str	r2, [r3, #12]
   14d8e:	9b01      	ldr	r3, [sp, #4]
   14d90:	f103 0224 	add.w	r2, r3, #36	; 0x24
   14d94:	9b01      	ldr	r3, [sp, #4]
   14d96:	611a      	str	r2, [r3, #16]
   14d98:	9b01      	ldr	r3, [sp, #4]
   14d9a:	f103 0414 	add.w	r4, r3, #20
        mosi_pin_(kSspPinMatrix[util::Value(set_pssp)][MatrixLookup::kMosi]),
   14d9e:	9800      	ldr	r0, [sp, #0]
   14da0:	f7fb fd22 	bl	107e8 <int util::Value<Ssp::Peripheral, int>(Ssp::Peripheral)>
   14da4:	4602      	mov	r2, r0
        pssp_(set_pssp)
   14da6:	4613      	mov	r3, r2
   14da8:	005b      	lsls	r3, r3, #1
   14daa:	4413      	add	r3, r2
   14dac:	00db      	lsls	r3, r3, #3
   14dae:	4a1e      	ldr	r2, [pc, #120]	; (14e28 <Ssp::Ssp(Ssp::Peripheral)+0xe0>)
   14db0:	4413      	add	r3, r2
   14db2:	4619      	mov	r1, r3
   14db4:	4620      	mov	r0, r4
   14db6:	f7ff ff9d 	bl	14cf4 <Pin::Pin(Pin const&)>
   14dba:	9b01      	ldr	r3, [sp, #4]
   14dbc:	f103 041c 	add.w	r4, r3, #28
        miso_pin_(kSspPinMatrix[util::Value(set_pssp)][MatrixLookup::kMiso]),
   14dc0:	9800      	ldr	r0, [sp, #0]
   14dc2:	f7fb fd11 	bl	107e8 <int util::Value<Ssp::Peripheral, int>(Ssp::Peripheral)>
   14dc6:	4602      	mov	r2, r0
        pssp_(set_pssp)
   14dc8:	4613      	mov	r3, r2
   14dca:	005b      	lsls	r3, r3, #1
   14dcc:	4413      	add	r3, r2
   14dce:	00db      	lsls	r3, r3, #3
   14dd0:	3308      	adds	r3, #8
   14dd2:	4a15      	ldr	r2, [pc, #84]	; (14e28 <Ssp::Ssp(Ssp::Peripheral)+0xe0>)
   14dd4:	4413      	add	r3, r2
   14dd6:	4619      	mov	r1, r3
   14dd8:	4620      	mov	r0, r4
   14dda:	f7ff ff8b 	bl	14cf4 <Pin::Pin(Pin const&)>
   14dde:	9b01      	ldr	r3, [sp, #4]
   14de0:	f103 0424 	add.w	r4, r3, #36	; 0x24
        sck_pin_(kSspPinMatrix[util::Value(set_pssp)][MatrixLookup::kSck]),
   14de4:	9800      	ldr	r0, [sp, #0]
   14de6:	f7fb fcff 	bl	107e8 <int util::Value<Ssp::Peripheral, int>(Ssp::Peripheral)>
   14dea:	4602      	mov	r2, r0
        pssp_(set_pssp)
   14dec:	4613      	mov	r3, r2
   14dee:	005b      	lsls	r3, r3, #1
   14df0:	4413      	add	r3, r2
   14df2:	00db      	lsls	r3, r3, #3
   14df4:	3310      	adds	r3, #16
   14df6:	4a0c      	ldr	r2, [pc, #48]	; (14e28 <Ssp::Ssp(Ssp::Peripheral)+0xe0>)
   14df8:	4413      	add	r3, r2
   14dfa:	4619      	mov	r1, r3
   14dfc:	4620      	mov	r0, r4
   14dfe:	f7ff ff79 	bl	14cf4 <Pin::Pin(Pin const&)>
   14e02:	9b01      	ldr	r3, [sp, #4]
   14e04:	9a00      	ldr	r2, [sp, #0]
   14e06:	62da      	str	r2, [r3, #44]	; 0x2c
  }
   14e08:	9c01      	ldr	r4, [sp, #4]
   14e0a:	462b      	mov	r3, r5
   14e0c:	4619      	mov	r1, r3
   14e0e:	4803      	ldr	r0, [pc, #12]	; (14e1c <Ssp::Ssp(Ssp::Peripheral)+0xd4>)
   14e10:	f7fe f842 	bl	12e98 <__cyg_profile_func_exit>
   14e14:	4623      	mov	r3, r4
   14e16:	4618      	mov	r0, r3
   14e18:	b003      	add	sp, #12
   14e1a:	bd30      	pop	{r4, r5, pc}
   14e1c:	00014d49 	.word	0x00014d49
   14e20:	00018dc4 	.word	0x00018dc4
   14e24:	00018dec 	.word	0x00018dec
   14e28:	00018978 	.word	0x00018978

00014e2c <Ssp::Initialize()>:
  void Initialize() override
   14e2c:	b570      	push	{r4, r5, r6, lr}
   14e2e:	b086      	sub	sp, #24
   14e30:	4676      	mov	r6, lr
   14e32:	9001      	str	r0, [sp, #4]
   14e34:	4633      	mov	r3, r6
   14e36:	4619      	mov	r1, r3
   14e38:	4830      	ldr	r0, [pc, #192]	; (14efc <Ssp::Initialize()+0xd0>)
   14e3a:	f7fe f819 	bl	12e70 <__cyg_profile_func_enter>
    uint32_t pssp = util::Value(pssp_);
   14e3e:	9b01      	ldr	r3, [sp, #4]
   14e40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   14e42:	4618      	mov	r0, r3
   14e44:	f7fb fcd0 	bl	107e8 <int util::Value<Ssp::Peripheral, int>(Ssp::Peripheral)>
   14e48:	4603      	mov	r3, r0
   14e4a:	9305      	str	r3, [sp, #20]
    PowerUpPeripheral(kPowerBit[pssp]);
   14e4c:	9b01      	ldr	r3, [sp, #4]
   14e4e:	1d18      	adds	r0, r3, #4
   14e50:	9b01      	ldr	r3, [sp, #4]
   14e52:	685b      	ldr	r3, [r3, #4]
   14e54:	3314      	adds	r3, #20
   14e56:	681b      	ldr	r3, [r3, #0]
   14e58:	9a05      	ldr	r2, [sp, #20]
   14e5a:	0092      	lsls	r2, r2, #2
   14e5c:	4928      	ldr	r1, [pc, #160]	; (14f00 <Ssp::Initialize()+0xd4>)
   14e5e:	440a      	add	r2, r1
   14e60:	4611      	mov	r1, r2
   14e62:	4798      	blx	r3
    mosi_->SetPinFunction(kPinSelect[pssp]);
   14e64:	9b01      	ldr	r3, [sp, #4]
   14e66:	6898      	ldr	r0, [r3, #8]
   14e68:	9b01      	ldr	r3, [sp, #4]
   14e6a:	689b      	ldr	r3, [r3, #8]
   14e6c:	681b      	ldr	r3, [r3, #0]
   14e6e:	681b      	ldr	r3, [r3, #0]
   14e70:	4924      	ldr	r1, [pc, #144]	; (14f04 <Ssp::Initialize()+0xd8>)
   14e72:	9a05      	ldr	r2, [sp, #20]
   14e74:	440a      	add	r2, r1
   14e76:	7812      	ldrb	r2, [r2, #0]
   14e78:	4611      	mov	r1, r2
   14e7a:	4798      	blx	r3
    miso_->SetPinFunction(kPinSelect[pssp]);
   14e7c:	9b01      	ldr	r3, [sp, #4]
   14e7e:	68d8      	ldr	r0, [r3, #12]
   14e80:	9b01      	ldr	r3, [sp, #4]
   14e82:	68db      	ldr	r3, [r3, #12]
   14e84:	681b      	ldr	r3, [r3, #0]
   14e86:	681b      	ldr	r3, [r3, #0]
   14e88:	491e      	ldr	r1, [pc, #120]	; (14f04 <Ssp::Initialize()+0xd8>)
   14e8a:	9a05      	ldr	r2, [sp, #20]
   14e8c:	440a      	add	r2, r1
   14e8e:	7812      	ldrb	r2, [r2, #0]
   14e90:	4611      	mov	r1, r2
   14e92:	4798      	blx	r3
    sck_->SetPinFunction(kPinSelect[pssp]);
   14e94:	9b01      	ldr	r3, [sp, #4]
   14e96:	6918      	ldr	r0, [r3, #16]
   14e98:	9b01      	ldr	r3, [sp, #4]
   14e9a:	691b      	ldr	r3, [r3, #16]
   14e9c:	681b      	ldr	r3, [r3, #0]
   14e9e:	681b      	ldr	r3, [r3, #0]
   14ea0:	4918      	ldr	r1, [pc, #96]	; (14f04 <Ssp::Initialize()+0xd8>)
   14ea2:	9a05      	ldr	r2, [sp, #20]
   14ea4:	440a      	add	r2, r1
   14ea6:	7812      	ldrb	r2, [r2, #0]
   14ea8:	4611      	mov	r1, r2
   14eaa:	4798      	blx	r3
    ssp_registers[pssp]->CR1 = bit::Set(ssp_registers[pssp]->CR1, kSspEnable);
   14eac:	4a16      	ldr	r2, [pc, #88]	; (14f08 <Ssp::Initialize()+0xdc>)
   14eae:	9b05      	ldr	r3, [sp, #20]
   14eb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14eb4:	685b      	ldr	r3, [r3, #4]
   14eb6:	4914      	ldr	r1, [pc, #80]	; (14f08 <Ssp::Initialize()+0xdc>)
   14eb8:	9a05      	ldr	r2, [sp, #20]
   14eba:	f851 4022 	ldr.w	r4, [r1, r2, lsl #2]
   14ebe:	9304      	str	r3, [sp, #16]
   14ec0:	2301      	movs	r3, #1
   14ec2:	9303      	str	r3, [sp, #12]
   14ec4:	4633      	mov	r3, r6
   14ec6:	4619      	mov	r1, r3
   14ec8:	4810      	ldr	r0, [pc, #64]	; (14f0c <Ssp::Initialize()+0xe0>)
   14eca:	f7fd ffd1 	bl	12e70 <__cyg_profile_func_enter>
  return target | (1 << position);
   14ece:	2201      	movs	r2, #1
   14ed0:	9b03      	ldr	r3, [sp, #12]
   14ed2:	fa02 f303 	lsl.w	r3, r2, r3
   14ed6:	461a      	mov	r2, r3
   14ed8:	9b04      	ldr	r3, [sp, #16]
   14eda:	ea42 0503 	orr.w	r5, r2, r3
   14ede:	4633      	mov	r3, r6
   14ee0:	4619      	mov	r1, r3
   14ee2:	480a      	ldr	r0, [pc, #40]	; (14f0c <Ssp::Initialize()+0xe0>)
   14ee4:	f7fd ffd8 	bl	12e98 <__cyg_profile_func_exit>
   14ee8:	6065      	str	r5, [r4, #4]
   14eea:	4633      	mov	r3, r6
   14eec:	4619      	mov	r1, r3
   14eee:	4803      	ldr	r0, [pc, #12]	; (14efc <Ssp::Initialize()+0xd0>)
   14ef0:	f7fd ffd2 	bl	12e98 <__cyg_profile_func_exit>
  }
   14ef4:	bf00      	nop
   14ef6:	b006      	add	sp, #24
   14ef8:	bd70      	pop	{r4, r5, r6, pc}
   14efa:	bf00      	nop
   14efc:	00014e2d 	.word	0x00014e2d
   14f00:	000189c0 	.word	0x000189c0
   14f04:	00018974 	.word	0x00018974
   14f08:	1000001c 	.word	0x1000001c
   14f0c:	000169a9 	.word	0x000169a9

00014f10 <Ssp::SetSpiMasterDefault()>:

  /// Sets up SSP peripheral as SPI master
  void SetSpiMasterDefault() override
   14f10:	b510      	push	{r4, lr}
   14f12:	b086      	sub	sp, #24
   14f14:	4674      	mov	r4, lr
   14f16:	9003      	str	r0, [sp, #12]
   14f18:	4623      	mov	r3, r4
   14f1a:	4619      	mov	r1, r3
   14f1c:	4812      	ldr	r0, [pc, #72]	; (14f68 <Ssp::SetSpiMasterDefault()+0x58>)
   14f1e:	f7fd ffa7 	bl	12e70 <__cyg_profile_func_enter>
  {
    constexpr bool kHighPolarity  = 1;
   14f22:	2301      	movs	r3, #1
   14f24:	f88d 3017 	strb.w	r3, [sp, #23]
    constexpr bool kPhase0        = 0;
   14f28:	2300      	movs	r3, #0
   14f2a:	f88d 3016 	strb.w	r3, [sp, #22]
    constexpr uint8_t kScrDivider = 0;
   14f2e:	2300      	movs	r3, #0
   14f30:	f88d 3015 	strb.w	r3, [sp, #21]
    constexpr uint8_t kPrescaler  = SJ2_SYSTEM_CLOCK_RATE_MHZ;
   14f34:	2330      	movs	r3, #48	; 0x30
   14f36:	f88d 3014 	strb.w	r3, [sp, #20]

    SetPeripheralMode(kMaster, kSpi, kEight);
   14f3a:	2307      	movs	r3, #7
   14f3c:	2200      	movs	r2, #0
   14f3e:	2100      	movs	r1, #0
   14f40:	9803      	ldr	r0, [sp, #12]
   14f42:	f000 f85b 	bl	14ffc <Ssp::SetPeripheralMode(SspInterface::MasterSlaveMode, SspInterface::FrameMode, SspInterface::DataSize)>
    SetClock(kHighPolarity, kPhase0, kScrDivider, kPrescaler);
   14f46:	2330      	movs	r3, #48	; 0x30
   14f48:	9300      	str	r3, [sp, #0]
   14f4a:	2300      	movs	r3, #0
   14f4c:	2200      	movs	r2, #0
   14f4e:	2101      	movs	r1, #1
   14f50:	9803      	ldr	r0, [sp, #12]
   14f52:	f000 fa09 	bl	15368 <Ssp::SetClock(bool, bool, unsigned char, unsigned char)>
   14f56:	4623      	mov	r3, r4
   14f58:	4619      	mov	r1, r3
   14f5a:	4803      	ldr	r0, [pc, #12]	; (14f68 <Ssp::SetSpiMasterDefault()+0x58>)
   14f5c:	f7fd ff9c 	bl	12e98 <__cyg_profile_func_exit>
  }
   14f60:	bf00      	nop
   14f62:	b006      	add	sp, #24
   14f64:	bd10      	pop	{r4, pc}
   14f66:	bf00      	nop
   14f68:	00014f11 	.word	0x00014f11

00014f6c <unsigned char util::Value<SspInterface::DataSize, unsigned char>(SspInterface::DataSize)>:
constexpr Type Value(Enum enum_type_value)
   14f6c:	b530      	push	{r4, r5, lr}
   14f6e:	b083      	sub	sp, #12
   14f70:	4675      	mov	r5, lr
   14f72:	4603      	mov	r3, r0
   14f74:	f88d 3007 	strb.w	r3, [sp, #7]
   14f78:	462b      	mov	r3, r5
   14f7a:	4619      	mov	r1, r3
   14f7c:	4806      	ldr	r0, [pc, #24]	; (14f98 <unsigned char util::Value<SspInterface::DataSize, unsigned char>(SspInterface::DataSize)+0x2c>)
   14f7e:	f7fd ff77 	bl	12e70 <__cyg_profile_func_enter>
  return static_cast<Type>(enum_type_value);
   14f82:	f89d 4007 	ldrb.w	r4, [sp, #7]
   14f86:	462b      	mov	r3, r5
   14f88:	4619      	mov	r1, r3
   14f8a:	4803      	ldr	r0, [pc, #12]	; (14f98 <unsigned char util::Value<SspInterface::DataSize, unsigned char>(SspInterface::DataSize)+0x2c>)
   14f8c:	f7fd ff84 	bl	12e98 <__cyg_profile_func_exit>
   14f90:	4623      	mov	r3, r4
}
   14f92:	4618      	mov	r0, r3
   14f94:	b003      	add	sp, #12
   14f96:	bd30      	pop	{r4, r5, pc}
   14f98:	00014f6d 	.word	0x00014f6d

00014f9c <unsigned char util::Value<SspInterface::FrameMode, unsigned char>(SspInterface::FrameMode)>:
constexpr Type Value(Enum enum_type_value)
   14f9c:	b530      	push	{r4, r5, lr}
   14f9e:	b083      	sub	sp, #12
   14fa0:	4675      	mov	r5, lr
   14fa2:	4603      	mov	r3, r0
   14fa4:	f88d 3007 	strb.w	r3, [sp, #7]
   14fa8:	462b      	mov	r3, r5
   14faa:	4619      	mov	r1, r3
   14fac:	4806      	ldr	r0, [pc, #24]	; (14fc8 <unsigned char util::Value<SspInterface::FrameMode, unsigned char>(SspInterface::FrameMode)+0x2c>)
   14fae:	f7fd ff5f 	bl	12e70 <__cyg_profile_func_enter>
  return static_cast<Type>(enum_type_value);
   14fb2:	f89d 4007 	ldrb.w	r4, [sp, #7]
   14fb6:	462b      	mov	r3, r5
   14fb8:	4619      	mov	r1, r3
   14fba:	4803      	ldr	r0, [pc, #12]	; (14fc8 <unsigned char util::Value<SspInterface::FrameMode, unsigned char>(SspInterface::FrameMode)+0x2c>)
   14fbc:	f7fd ff6c 	bl	12e98 <__cyg_profile_func_exit>
   14fc0:	4623      	mov	r3, r4
}
   14fc2:	4618      	mov	r0, r3
   14fc4:	b003      	add	sp, #12
   14fc6:	bd30      	pop	{r4, r5, pc}
   14fc8:	00014f9d 	.word	0x00014f9d

00014fcc <unsigned char util::Value<SspInterface::MasterSlaveMode, unsigned char>(SspInterface::MasterSlaveMode)>:
constexpr Type Value(Enum enum_type_value)
   14fcc:	b530      	push	{r4, r5, lr}
   14fce:	b083      	sub	sp, #12
   14fd0:	4675      	mov	r5, lr
   14fd2:	4603      	mov	r3, r0
   14fd4:	f88d 3007 	strb.w	r3, [sp, #7]
   14fd8:	462b      	mov	r3, r5
   14fda:	4619      	mov	r1, r3
   14fdc:	4806      	ldr	r0, [pc, #24]	; (14ff8 <unsigned char util::Value<SspInterface::MasterSlaveMode, unsigned char>(SspInterface::MasterSlaveMode)+0x2c>)
   14fde:	f7fd ff47 	bl	12e70 <__cyg_profile_func_enter>
  return static_cast<Type>(enum_type_value);
   14fe2:	f89d 4007 	ldrb.w	r4, [sp, #7]
   14fe6:	462b      	mov	r3, r5
   14fe8:	4619      	mov	r1, r3
   14fea:	4803      	ldr	r0, [pc, #12]	; (14ff8 <unsigned char util::Value<SspInterface::MasterSlaveMode, unsigned char>(SspInterface::MasterSlaveMode)+0x2c>)
   14fec:	f7fd ff54 	bl	12e98 <__cyg_profile_func_exit>
   14ff0:	4623      	mov	r3, r4
}
   14ff2:	4618      	mov	r0, r3
   14ff4:	b003      	add	sp, #12
   14ff6:	bd30      	pop	{r4, r5, pc}
   14ff8:	00014fcd 	.word	0x00014fcd

00014ffc <Ssp::SetPeripheralMode(SspInterface::MasterSlaveMode, SspInterface::FrameMode, SspInterface::DataSize)>:

  /// Sets the various modes for the Peripheral
  /// @param mode - master or slave mode
  /// @param frame - format for Peripheral data to use
  /// @param size - number of bits per frame
  void SetPeripheralMode(MasterSlaveMode mode, FrameMode frame,
   14ffc:	b570      	push	{r4, r5, r6, lr}
   14ffe:	b098      	sub	sp, #96	; 0x60
   15000:	4674      	mov	r4, lr
   15002:	9001      	str	r0, [sp, #4]
   15004:	4608      	mov	r0, r1
   15006:	4611      	mov	r1, r2
   15008:	461a      	mov	r2, r3
   1500a:	4603      	mov	r3, r0
   1500c:	f88d 3003 	strb.w	r3, [sp, #3]
   15010:	460b      	mov	r3, r1
   15012:	f88d 3002 	strb.w	r3, [sp, #2]
   15016:	4613      	mov	r3, r2
   15018:	f88d 3001 	strb.w	r3, [sp, #1]
   1501c:	4623      	mov	r3, r4
   1501e:	4619      	mov	r1, r3
   15020:	4875      	ldr	r0, [pc, #468]	; (151f8 <Ssp::SetPeripheralMode(SspInterface::MasterSlaveMode, SspInterface::FrameMode, SspInterface::DataSize)+0x1fc>)
   15022:	f7fd ff25 	bl	12e70 <__cyg_profile_func_enter>
                         DataSize size) override
  {
    uint32_t pssp = util::Value(pssp_);
   15026:	9b01      	ldr	r3, [sp, #4]
   15028:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1502a:	4618      	mov	r0, r3
   1502c:	f7fb fbdc 	bl	107e8 <int util::Value<Ssp::Peripheral, int>(Ssp::Peripheral)>
   15030:	4603      	mov	r3, r0
   15032:	9317      	str	r3, [sp, #92]	; 0x5c
    // TODO(#371): Find a better alternative to powering up the peripheral for
    // every method.
    Ssp::PowerUpPeripheral(Ssp::kPowerBit[pssp]);
   15034:	9b01      	ldr	r3, [sp, #4]
   15036:	1d18      	adds	r0, r3, #4
   15038:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   1503a:	009b      	lsls	r3, r3, #2
   1503c:	4a6f      	ldr	r2, [pc, #444]	; (151fc <Ssp::SetPeripheralMode(SspInterface::MasterSlaveMode, SspInterface::FrameMode, SspInterface::DataSize)+0x200>)
   1503e:	4413      	add	r3, r2
   15040:	4619      	mov	r1, r3
   15042:	f7fb fe31 	bl	10ca8 <Lpc40xxSystemController::PowerUpPeripheral(SystemControllerInterface::PeripheralID const&)>
    if (frame == kMicro)
   15046:	f89d 3002 	ldrb.w	r3, [sp, #2]
   1504a:	2b02      	cmp	r3, #2
   1504c:	d102      	bne.n	15054 <Ssp::SetPeripheralMode(SspInterface::MasterSlaveMode, SspInterface::FrameMode, SspInterface::DataSize)+0x58>
    {
      size = kEight;
   1504e:	2307      	movs	r3, #7
   15050:	f88d 3001 	strb.w	r3, [sp, #1]
    }
    ssp_registers[pssp]->CR0 =
        bit::Insert(ssp_registers[pssp]->CR0, util::Value(size), kDataBit, 4);
   15054:	4a6a      	ldr	r2, [pc, #424]	; (15200 <Ssp::SetPeripheralMode(SspInterface::MasterSlaveMode, SspInterface::FrameMode, SspInterface::DataSize)+0x204>)
   15056:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   15058:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1505c:	681e      	ldr	r6, [r3, #0]
   1505e:	f89d 3001 	ldrb.w	r3, [sp, #1]
   15062:	4618      	mov	r0, r3
   15064:	f7ff ff82 	bl	14f6c <unsigned char util::Value<SspInterface::DataSize, unsigned char>(SspInterface::DataSize)>
   15068:	4603      	mov	r3, r0
   1506a:	4619      	mov	r1, r3
    ssp_registers[pssp]->CR0 =
   1506c:	4a64      	ldr	r2, [pc, #400]	; (15200 <Ssp::SetPeripheralMode(SspInterface::MasterSlaveMode, SspInterface::FrameMode, SspInterface::DataSize)+0x204>)
   1506e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   15070:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
   15074:	9608      	str	r6, [sp, #32]
   15076:	460b      	mov	r3, r1
   15078:	f88d 301f 	strb.w	r3, [sp, #31]
   1507c:	2300      	movs	r3, #0
   1507e:	9306      	str	r3, [sp, #24]
   15080:	2304      	movs	r3, #4
   15082:	9305      	str	r3, [sp, #20]
   15084:	4623      	mov	r3, r4
   15086:	4619      	mov	r1, r3
   15088:	485e      	ldr	r0, [pc, #376]	; (15204 <Ssp::SetPeripheralMode(SspInterface::MasterSlaveMode, SspInterface::FrameMode, SspInterface::DataSize)+0x208>)
   1508a:	f7fd fef1 	bl	12e70 <__cyg_profile_func_enter>
  constexpr UnsignedT kFieldOfOnes = GenerateFieldOfOnes<T>();
   1508e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   15092:	9304      	str	r3, [sp, #16]
  constexpr size_t kTargetWidth     = sizeof(T) * 8;
   15094:	2320      	movs	r3, #32
   15096:	9303      	str	r3, [sp, #12]
  UnsignedT mask   = kFieldOfOnes >> (kTargetWidth - width);
   15098:	9b05      	ldr	r3, [sp, #20]
   1509a:	f1c3 0320 	rsb	r3, r3, #32
   1509e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   150a2:	fa22 f303 	lsr.w	r3, r2, r3
   150a6:	9302      	str	r3, [sp, #8]
  target &= ~(mask << position);
   150a8:	9a02      	ldr	r2, [sp, #8]
   150aa:	9b06      	ldr	r3, [sp, #24]
   150ac:	fa02 f303 	lsl.w	r3, r2, r3
   150b0:	43db      	mvns	r3, r3
   150b2:	9a08      	ldr	r2, [sp, #32]
   150b4:	4013      	ands	r3, r2
   150b6:	9308      	str	r3, [sp, #32]
  target |= (value & mask) << position;
   150b8:	f89d 201f 	ldrb.w	r2, [sp, #31]
   150bc:	9b02      	ldr	r3, [sp, #8]
   150be:	401a      	ands	r2, r3
   150c0:	9b06      	ldr	r3, [sp, #24]
   150c2:	fa02 f303 	lsl.w	r3, r2, r3
   150c6:	9a08      	ldr	r2, [sp, #32]
   150c8:	4313      	orrs	r3, r2
   150ca:	9308      	str	r3, [sp, #32]
  return target;
   150cc:	9e08      	ldr	r6, [sp, #32]
   150ce:	4623      	mov	r3, r4
   150d0:	4619      	mov	r1, r3
   150d2:	484c      	ldr	r0, [pc, #304]	; (15204 <Ssp::SetPeripheralMode(SspInterface::MasterSlaveMode, SspInterface::FrameMode, SspInterface::DataSize)+0x208>)
   150d4:	f7fd fee0 	bl	12e98 <__cyg_profile_func_exit>
   150d8:	602e      	str	r6, [r5, #0]
    ssp_registers[pssp]->CR0 =
        bit::Insert(ssp_registers[pssp]->CR0, util::Value(frame), kFrameBit, 2);
   150da:	4a49      	ldr	r2, [pc, #292]	; (15200 <Ssp::SetPeripheralMode(SspInterface::MasterSlaveMode, SspInterface::FrameMode, SspInterface::DataSize)+0x204>)
   150dc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   150de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   150e2:	681e      	ldr	r6, [r3, #0]
   150e4:	f89d 3002 	ldrb.w	r3, [sp, #2]
   150e8:	4618      	mov	r0, r3
   150ea:	f7ff ff57 	bl	14f9c <unsigned char util::Value<SspInterface::FrameMode, unsigned char>(SspInterface::FrameMode)>
   150ee:	4603      	mov	r3, r0
   150f0:	4619      	mov	r1, r3
    ssp_registers[pssp]->CR0 =
   150f2:	4a43      	ldr	r2, [pc, #268]	; (15200 <Ssp::SetPeripheralMode(SspInterface::MasterSlaveMode, SspInterface::FrameMode, SspInterface::DataSize)+0x204>)
   150f4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   150f6:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
   150fa:	960f      	str	r6, [sp, #60]	; 0x3c
   150fc:	460b      	mov	r3, r1
   150fe:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
   15102:	2304      	movs	r3, #4
   15104:	930d      	str	r3, [sp, #52]	; 0x34
   15106:	2302      	movs	r3, #2
   15108:	930c      	str	r3, [sp, #48]	; 0x30
   1510a:	4623      	mov	r3, r4
   1510c:	4619      	mov	r1, r3
   1510e:	483d      	ldr	r0, [pc, #244]	; (15204 <Ssp::SetPeripheralMode(SspInterface::MasterSlaveMode, SspInterface::FrameMode, SspInterface::DataSize)+0x208>)
   15110:	f7fd feae 	bl	12e70 <__cyg_profile_func_enter>
  constexpr UnsignedT kFieldOfOnes = GenerateFieldOfOnes<T>();
   15114:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   15118:	930b      	str	r3, [sp, #44]	; 0x2c
  constexpr size_t kTargetWidth     = sizeof(T) * 8;
   1511a:	2320      	movs	r3, #32
   1511c:	930a      	str	r3, [sp, #40]	; 0x28
  UnsignedT mask   = kFieldOfOnes >> (kTargetWidth - width);
   1511e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   15120:	f1c3 0320 	rsb	r3, r3, #32
   15124:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   15128:	fa22 f303 	lsr.w	r3, r2, r3
   1512c:	9309      	str	r3, [sp, #36]	; 0x24
  target &= ~(mask << position);
   1512e:	9a09      	ldr	r2, [sp, #36]	; 0x24
   15130:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   15132:	fa02 f303 	lsl.w	r3, r2, r3
   15136:	43db      	mvns	r3, r3
   15138:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   1513a:	4013      	ands	r3, r2
   1513c:	930f      	str	r3, [sp, #60]	; 0x3c
  target |= (value & mask) << position;
   1513e:	f89d 203b 	ldrb.w	r2, [sp, #59]	; 0x3b
   15142:	9b09      	ldr	r3, [sp, #36]	; 0x24
   15144:	401a      	ands	r2, r3
   15146:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   15148:	fa02 f303 	lsl.w	r3, r2, r3
   1514c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   1514e:	4313      	orrs	r3, r2
   15150:	930f      	str	r3, [sp, #60]	; 0x3c
  return target;
   15152:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
   15154:	4623      	mov	r3, r4
   15156:	4619      	mov	r1, r3
   15158:	482a      	ldr	r0, [pc, #168]	; (15204 <Ssp::SetPeripheralMode(SspInterface::MasterSlaveMode, SspInterface::FrameMode, SspInterface::DataSize)+0x208>)
   1515a:	f7fd fe9d 	bl	12e98 <__cyg_profile_func_exit>
   1515e:	602e      	str	r6, [r5, #0]
    ssp_registers[pssp]->CR1 = bit::Insert(
        ssp_registers[pssp]->CR1, util::Value(mode), kMasterModeBit, 1);
   15160:	4a27      	ldr	r2, [pc, #156]	; (15200 <Ssp::SetPeripheralMode(SspInterface::MasterSlaveMode, SspInterface::FrameMode, SspInterface::DataSize)+0x204>)
   15162:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   15164:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15168:	685e      	ldr	r6, [r3, #4]
    ssp_registers[pssp]->CR1 = bit::Insert(
   1516a:	f89d 3003 	ldrb.w	r3, [sp, #3]
   1516e:	4618      	mov	r0, r3
   15170:	f7ff ff2c 	bl	14fcc <unsigned char util::Value<SspInterface::MasterSlaveMode, unsigned char>(SspInterface::MasterSlaveMode)>
   15174:	4603      	mov	r3, r0
   15176:	4619      	mov	r1, r3
   15178:	4a21      	ldr	r2, [pc, #132]	; (15200 <Ssp::SetPeripheralMode(SspInterface::MasterSlaveMode, SspInterface::FrameMode, SspInterface::DataSize)+0x204>)
   1517a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   1517c:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
   15180:	9616      	str	r6, [sp, #88]	; 0x58
   15182:	460b      	mov	r3, r1
   15184:	f88d 3057 	strb.w	r3, [sp, #87]	; 0x57
   15188:	2302      	movs	r3, #2
   1518a:	9314      	str	r3, [sp, #80]	; 0x50
   1518c:	2301      	movs	r3, #1
   1518e:	9313      	str	r3, [sp, #76]	; 0x4c
   15190:	4623      	mov	r3, r4
   15192:	4619      	mov	r1, r3
   15194:	481b      	ldr	r0, [pc, #108]	; (15204 <Ssp::SetPeripheralMode(SspInterface::MasterSlaveMode, SspInterface::FrameMode, SspInterface::DataSize)+0x208>)
   15196:	f7fd fe6b 	bl	12e70 <__cyg_profile_func_enter>
  constexpr UnsignedT kFieldOfOnes = GenerateFieldOfOnes<T>();
   1519a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1519e:	9312      	str	r3, [sp, #72]	; 0x48
  constexpr size_t kTargetWidth     = sizeof(T) * 8;
   151a0:	2320      	movs	r3, #32
   151a2:	9311      	str	r3, [sp, #68]	; 0x44
  UnsignedT mask   = kFieldOfOnes >> (kTargetWidth - width);
   151a4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   151a6:	f1c3 0320 	rsb	r3, r3, #32
   151aa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   151ae:	fa22 f303 	lsr.w	r3, r2, r3
   151b2:	9310      	str	r3, [sp, #64]	; 0x40
  target &= ~(mask << position);
   151b4:	9a10      	ldr	r2, [sp, #64]	; 0x40
   151b6:	9b14      	ldr	r3, [sp, #80]	; 0x50
   151b8:	fa02 f303 	lsl.w	r3, r2, r3
   151bc:	43db      	mvns	r3, r3
   151be:	9a16      	ldr	r2, [sp, #88]	; 0x58
   151c0:	4013      	ands	r3, r2
   151c2:	9316      	str	r3, [sp, #88]	; 0x58
  target |= (value & mask) << position;
   151c4:	f89d 2057 	ldrb.w	r2, [sp, #87]	; 0x57
   151c8:	9b10      	ldr	r3, [sp, #64]	; 0x40
   151ca:	401a      	ands	r2, r3
   151cc:	9b14      	ldr	r3, [sp, #80]	; 0x50
   151ce:	fa02 f303 	lsl.w	r3, r2, r3
   151d2:	9a16      	ldr	r2, [sp, #88]	; 0x58
   151d4:	4313      	orrs	r3, r2
   151d6:	9316      	str	r3, [sp, #88]	; 0x58
  return target;
   151d8:	9e16      	ldr	r6, [sp, #88]	; 0x58
   151da:	4623      	mov	r3, r4
   151dc:	4619      	mov	r1, r3
   151de:	4809      	ldr	r0, [pc, #36]	; (15204 <Ssp::SetPeripheralMode(SspInterface::MasterSlaveMode, SspInterface::FrameMode, SspInterface::DataSize)+0x208>)
   151e0:	f7fd fe5a 	bl	12e98 <__cyg_profile_func_exit>
   151e4:	606e      	str	r6, [r5, #4]
   151e6:	4623      	mov	r3, r4
   151e8:	4619      	mov	r1, r3
   151ea:	4803      	ldr	r0, [pc, #12]	; (151f8 <Ssp::SetPeripheralMode(SspInterface::MasterSlaveMode, SspInterface::FrameMode, SspInterface::DataSize)+0x1fc>)
   151ec:	f7fd fe54 	bl	12e98 <__cyg_profile_func_exit>
  }
   151f0:	bf00      	nop
   151f2:	b018      	add	sp, #96	; 0x60
   151f4:	bd70      	pop	{r4, r5, r6, pc}
   151f6:	bf00      	nop
   151f8:	00014ffd 	.word	0x00014ffd
   151fc:	000189c0 	.word	0x000189c0
   15200:	1000001c 	.word	0x1000001c
   15204:	000169e5 	.word	0x000169e5

00015208 <Ssp::GetPeripheralMode()>:
  /// Gets the Peripheral modes from registers
  /// @return - returns a 16-bit value as follows: 0000_000x 0xx0_xxxx
  ///       MasterSlaveMode = 1-bit @ bit 8
  ///       FrameMode       = 2-bit @ bit 5
  ///       DataSize        = 4-bit @ bit 0
  uint16_t GetPeripheralMode() override
   15208:	b570      	push	{r4, r5, r6, lr}
   1520a:	b096      	sub	sp, #88	; 0x58
   1520c:	4674      	mov	r4, lr
   1520e:	9001      	str	r0, [sp, #4]
   15210:	4623      	mov	r3, r4
   15212:	4619      	mov	r1, r3
   15214:	4850      	ldr	r0, [pc, #320]	; (15358 <Ssp::GetPeripheralMode()+0x150>)
   15216:	f7fd fe2b 	bl	12e70 <__cyg_profile_func_enter>
  {
    uint16_t return_val = 0;
   1521a:	2300      	movs	r3, #0
   1521c:	f8ad 3056 	strh.w	r3, [sp, #86]	; 0x56
    uint32_t pssp       = util::Value(pssp_);
   15220:	9b01      	ldr	r3, [sp, #4]
   15222:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   15224:	4618      	mov	r0, r3
   15226:	f7fb fadf 	bl	107e8 <int util::Value<Ssp::Peripheral, int>(Ssp::Peripheral)>
   1522a:	4603      	mov	r3, r0
   1522c:	9314      	str	r3, [sp, #80]	; 0x50
    // TODO(#371): Find a better alternative to powering up the peripheral for
    // every method.
    Ssp::PowerUpPeripheral(Ssp::kPowerBit[pssp]);
   1522e:	9b01      	ldr	r3, [sp, #4]
   15230:	1d18      	adds	r0, r3, #4
   15232:	9b14      	ldr	r3, [sp, #80]	; 0x50
   15234:	009b      	lsls	r3, r3, #2
   15236:	4a49      	ldr	r2, [pc, #292]	; (1535c <Ssp::GetPeripheralMode()+0x154>)
   15238:	4413      	add	r3, r2
   1523a:	4619      	mov	r1, r3
   1523c:	f7fb fd34 	bl	10ca8 <Lpc40xxSystemController::PowerUpPeripheral(SystemControllerInterface::PeripheralID const&)>

    return_val = static_cast<uint16_t>(
        (bit::Extract(ssp_registers[pssp]->CR0, kDataBit, 4)) +
   15240:	4a47      	ldr	r2, [pc, #284]	; (15360 <Ssp::GetPeripheralMode()+0x158>)
   15242:	9b14      	ldr	r3, [sp, #80]	; 0x50
   15244:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15248:	681b      	ldr	r3, [r3, #0]
   1524a:	9307      	str	r3, [sp, #28]
   1524c:	2300      	movs	r3, #0
   1524e:	9306      	str	r3, [sp, #24]
   15250:	2304      	movs	r3, #4
   15252:	9305      	str	r3, [sp, #20]
   15254:	4623      	mov	r3, r4
   15256:	4619      	mov	r1, r3
   15258:	4842      	ldr	r0, [pc, #264]	; (15364 <Ssp::GetPeripheralMode()+0x15c>)
   1525a:	f7fd fe09 	bl	12e70 <__cyg_profile_func_enter>
  constexpr UnsignedT kFieldOfOnes = GenerateFieldOfOnes<T>();
   1525e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   15262:	9304      	str	r3, [sp, #16]
  constexpr size_t kTargetWidth     = sizeof(T) * 8;
   15264:	2320      	movs	r3, #32
   15266:	9303      	str	r3, [sp, #12]
  UnsignedT mask   = kFieldOfOnes >> (kTargetWidth - width);
   15268:	9b05      	ldr	r3, [sp, #20]
   1526a:	f1c3 0320 	rsb	r3, r3, #32
   1526e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   15272:	fa22 f303 	lsr.w	r3, r2, r3
   15276:	9302      	str	r3, [sp, #8]
  return (target >> position) & mask;
   15278:	9a07      	ldr	r2, [sp, #28]
   1527a:	9b06      	ldr	r3, [sp, #24]
   1527c:	40da      	lsrs	r2, r3
   1527e:	9b02      	ldr	r3, [sp, #8]
   15280:	ea02 0503 	and.w	r5, r2, r3
   15284:	4623      	mov	r3, r4
   15286:	4619      	mov	r1, r3
   15288:	4836      	ldr	r0, [pc, #216]	; (15364 <Ssp::GetPeripheralMode()+0x15c>)
   1528a:	f7fd fe05 	bl	12e98 <__cyg_profile_func_exit>
   1528e:	b2ad      	uxth	r5, r5
        ((bit::Extract(ssp_registers[pssp]->CR0, kFrameBit, 2)) << 5) +
   15290:	4a33      	ldr	r2, [pc, #204]	; (15360 <Ssp::GetPeripheralMode()+0x158>)
   15292:	9b14      	ldr	r3, [sp, #80]	; 0x50
   15294:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15298:	681b      	ldr	r3, [r3, #0]
   1529a:	930d      	str	r3, [sp, #52]	; 0x34
   1529c:	2304      	movs	r3, #4
   1529e:	930c      	str	r3, [sp, #48]	; 0x30
   152a0:	2302      	movs	r3, #2
   152a2:	930b      	str	r3, [sp, #44]	; 0x2c
   152a4:	4623      	mov	r3, r4
   152a6:	4619      	mov	r1, r3
   152a8:	482e      	ldr	r0, [pc, #184]	; (15364 <Ssp::GetPeripheralMode()+0x15c>)
   152aa:	f7fd fde1 	bl	12e70 <__cyg_profile_func_enter>
  constexpr UnsignedT kFieldOfOnes = GenerateFieldOfOnes<T>();
   152ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   152b2:	930a      	str	r3, [sp, #40]	; 0x28
  constexpr size_t kTargetWidth     = sizeof(T) * 8;
   152b4:	2320      	movs	r3, #32
   152b6:	9309      	str	r3, [sp, #36]	; 0x24
  UnsignedT mask   = kFieldOfOnes >> (kTargetWidth - width);
   152b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   152ba:	f1c3 0320 	rsb	r3, r3, #32
   152be:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   152c2:	fa22 f303 	lsr.w	r3, r2, r3
   152c6:	9308      	str	r3, [sp, #32]
  return (target >> position) & mask;
   152c8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   152ca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   152cc:	40da      	lsrs	r2, r3
   152ce:	9b08      	ldr	r3, [sp, #32]
   152d0:	ea02 0603 	and.w	r6, r2, r3
   152d4:	4623      	mov	r3, r4
   152d6:	4619      	mov	r1, r3
   152d8:	4822      	ldr	r0, [pc, #136]	; (15364 <Ssp::GetPeripheralMode()+0x15c>)
   152da:	f7fd fddd 	bl	12e98 <__cyg_profile_func_exit>
   152de:	b2b3      	uxth	r3, r6
   152e0:	015b      	lsls	r3, r3, #5
   152e2:	b29b      	uxth	r3, r3
        (bit::Extract(ssp_registers[pssp]->CR0, kDataBit, 4)) +
   152e4:	442b      	add	r3, r5
   152e6:	b29d      	uxth	r5, r3
        ((bit::Extract(ssp_registers[pssp]->CR1, kMasterModeBit)) << 8));
   152e8:	4a1d      	ldr	r2, [pc, #116]	; (15360 <Ssp::GetPeripheralMode()+0x158>)
   152ea:	9b14      	ldr	r3, [sp, #80]	; 0x50
   152ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   152f0:	685b      	ldr	r3, [r3, #4]
   152f2:	9313      	str	r3, [sp, #76]	; 0x4c
   152f4:	2302      	movs	r3, #2
   152f6:	9312      	str	r3, [sp, #72]	; 0x48
   152f8:	2301      	movs	r3, #1
   152fa:	9311      	str	r3, [sp, #68]	; 0x44
   152fc:	4623      	mov	r3, r4
   152fe:	4619      	mov	r1, r3
   15300:	4818      	ldr	r0, [pc, #96]	; (15364 <Ssp::GetPeripheralMode()+0x15c>)
   15302:	f7fd fdb5 	bl	12e70 <__cyg_profile_func_enter>
  constexpr UnsignedT kFieldOfOnes = GenerateFieldOfOnes<T>();
   15306:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1530a:	9310      	str	r3, [sp, #64]	; 0x40
  constexpr size_t kTargetWidth     = sizeof(T) * 8;
   1530c:	2320      	movs	r3, #32
   1530e:	930f      	str	r3, [sp, #60]	; 0x3c
  UnsignedT mask   = kFieldOfOnes >> (kTargetWidth - width);
   15310:	9b11      	ldr	r3, [sp, #68]	; 0x44
   15312:	f1c3 0320 	rsb	r3, r3, #32
   15316:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1531a:	fa22 f303 	lsr.w	r3, r2, r3
   1531e:	930e      	str	r3, [sp, #56]	; 0x38
  return (target >> position) & mask;
   15320:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   15322:	9b12      	ldr	r3, [sp, #72]	; 0x48
   15324:	40da      	lsrs	r2, r3
   15326:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   15328:	ea02 0603 	and.w	r6, r2, r3
   1532c:	4623      	mov	r3, r4
   1532e:	4619      	mov	r1, r3
   15330:	480c      	ldr	r0, [pc, #48]	; (15364 <Ssp::GetPeripheralMode()+0x15c>)
   15332:	f7fd fdb1 	bl	12e98 <__cyg_profile_func_exit>
   15336:	b2b3      	uxth	r3, r6
   15338:	021b      	lsls	r3, r3, #8
   1533a:	b29b      	uxth	r3, r3
    return_val = static_cast<uint16_t>(
   1533c:	442b      	add	r3, r5
   1533e:	f8ad 3056 	strh.w	r3, [sp, #86]	; 0x56
    return return_val;
   15342:	f8bd 5056 	ldrh.w	r5, [sp, #86]	; 0x56
   15346:	4623      	mov	r3, r4
   15348:	4619      	mov	r1, r3
   1534a:	4803      	ldr	r0, [pc, #12]	; (15358 <Ssp::GetPeripheralMode()+0x150>)
   1534c:	f7fd fda4 	bl	12e98 <__cyg_profile_func_exit>
   15350:	462b      	mov	r3, r5
  }
   15352:	4618      	mov	r0, r3
   15354:	b016      	add	sp, #88	; 0x58
   15356:	bd70      	pop	{r4, r5, r6, pc}
   15358:	00015209 	.word	0x00015209
   1535c:	000189c0 	.word	0x000189c0
   15360:	1000001c 	.word	0x1000001c
   15364:	00016a59 	.word	0x00016a59

00015368 <Ssp::SetClock(bool, bool, unsigned char, unsigned char)>:
  /// Sets the clock rate for the Peripheral
  /// @param polarity - maintain bus on clock 0=low or 1=high between frames
  /// @param phase - capture serial data on 0=first or 1=second clock cycle
  /// @param divider - see notes in SSP_Interface above
  /// @param prescaler - divides the PCLK, must be even value between 2-254
  void SetClock(bool polarity, bool phase, uint8_t divider,
   15368:	b570      	push	{r4, r5, r6, lr}
   1536a:	b098      	sub	sp, #96	; 0x60
   1536c:	4674      	mov	r4, lr
   1536e:	9001      	str	r0, [sp, #4]
   15370:	4608      	mov	r0, r1
   15372:	4611      	mov	r1, r2
   15374:	461a      	mov	r2, r3
   15376:	4603      	mov	r3, r0
   15378:	f88d 3003 	strb.w	r3, [sp, #3]
   1537c:	460b      	mov	r3, r1
   1537e:	f88d 3002 	strb.w	r3, [sp, #2]
   15382:	4613      	mov	r3, r2
   15384:	f88d 3001 	strb.w	r3, [sp, #1]
   15388:	4623      	mov	r3, r4
   1538a:	4619      	mov	r1, r3
   1538c:	486c      	ldr	r0, [pc, #432]	; (15540 <Ssp::SetClock(bool, bool, unsigned char, unsigned char)+0x1d8>)
   1538e:	f7fd fd6f 	bl	12e70 <__cyg_profile_func_enter>
                uint8_t prescaler) override
  {
    uint32_t pssp = util::Value(pssp_);
   15392:	9b01      	ldr	r3, [sp, #4]
   15394:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   15396:	4618      	mov	r0, r3
   15398:	f7fb fa26 	bl	107e8 <int util::Value<Ssp::Peripheral, int>(Ssp::Peripheral)>
   1539c:	4603      	mov	r3, r0
   1539e:	9317      	str	r3, [sp, #92]	; 0x5c
    // TODO(#371): Find a better alternative to powering up the peripheral for
    // every method.
    Ssp::PowerUpPeripheral(Ssp::kPowerBit[pssp]);
   153a0:	9b01      	ldr	r3, [sp, #4]
   153a2:	1d18      	adds	r0, r3, #4
   153a4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   153a6:	009b      	lsls	r3, r3, #2
   153a8:	4a66      	ldr	r2, [pc, #408]	; (15544 <Ssp::SetClock(bool, bool, unsigned char, unsigned char)+0x1dc>)
   153aa:	4413      	add	r3, r2
   153ac:	4619      	mov	r1, r3
   153ae:	f7fb fc7b 	bl	10ca8 <Lpc40xxSystemController::PowerUpPeripheral(SystemControllerInterface::PeripheralID const&)>
    // first clear the appropriate registers
    ssp_registers[pssp]->CR0 =
        bit::Insert(ssp_registers[pssp]->CR0, polarity, kPolarityBit, 1);
   153b2:	4a65      	ldr	r2, [pc, #404]	; (15548 <Ssp::SetClock(bool, bool, unsigned char, unsigned char)+0x1e0>)
   153b4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   153b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   153ba:	681b      	ldr	r3, [r3, #0]
    ssp_registers[pssp]->CR0 =
   153bc:	4962      	ldr	r1, [pc, #392]	; (15548 <Ssp::SetClock(bool, bool, unsigned char, unsigned char)+0x1e0>)
   153be:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   153c0:	f851 5022 	ldr.w	r5, [r1, r2, lsl #2]
   153c4:	9308      	str	r3, [sp, #32]
   153c6:	f89d 3003 	ldrb.w	r3, [sp, #3]
   153ca:	f88d 301f 	strb.w	r3, [sp, #31]
   153ce:	2306      	movs	r3, #6
   153d0:	9306      	str	r3, [sp, #24]
   153d2:	2301      	movs	r3, #1
   153d4:	9305      	str	r3, [sp, #20]
   153d6:	4623      	mov	r3, r4
   153d8:	4619      	mov	r1, r3
   153da:	485c      	ldr	r0, [pc, #368]	; (1554c <Ssp::SetClock(bool, bool, unsigned char, unsigned char)+0x1e4>)
   153dc:	f7fd fd48 	bl	12e70 <__cyg_profile_func_enter>
  constexpr UnsignedT kFieldOfOnes = GenerateFieldOfOnes<T>();
   153e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   153e4:	9304      	str	r3, [sp, #16]
  constexpr size_t kTargetWidth     = sizeof(T) * 8;
   153e6:	2320      	movs	r3, #32
   153e8:	9303      	str	r3, [sp, #12]
  UnsignedT mask   = kFieldOfOnes >> (kTargetWidth - width);
   153ea:	9b05      	ldr	r3, [sp, #20]
   153ec:	f1c3 0320 	rsb	r3, r3, #32
   153f0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   153f4:	fa22 f303 	lsr.w	r3, r2, r3
   153f8:	9302      	str	r3, [sp, #8]
  target &= ~(mask << position);
   153fa:	9a02      	ldr	r2, [sp, #8]
   153fc:	9b06      	ldr	r3, [sp, #24]
   153fe:	fa02 f303 	lsl.w	r3, r2, r3
   15402:	43db      	mvns	r3, r3
   15404:	9a08      	ldr	r2, [sp, #32]
   15406:	4013      	ands	r3, r2
   15408:	9308      	str	r3, [sp, #32]
  target |= (value & mask) << position;
   1540a:	f89d 201f 	ldrb.w	r2, [sp, #31]
   1540e:	9b02      	ldr	r3, [sp, #8]
   15410:	401a      	ands	r2, r3
   15412:	9b06      	ldr	r3, [sp, #24]
   15414:	fa02 f303 	lsl.w	r3, r2, r3
   15418:	9a08      	ldr	r2, [sp, #32]
   1541a:	4313      	orrs	r3, r2
   1541c:	9308      	str	r3, [sp, #32]
  return target;
   1541e:	9e08      	ldr	r6, [sp, #32]
   15420:	4623      	mov	r3, r4
   15422:	4619      	mov	r1, r3
   15424:	4849      	ldr	r0, [pc, #292]	; (1554c <Ssp::SetClock(bool, bool, unsigned char, unsigned char)+0x1e4>)
   15426:	f7fd fd37 	bl	12e98 <__cyg_profile_func_exit>
   1542a:	602e      	str	r6, [r5, #0]
    ssp_registers[pssp]->CR0 =
        bit::Insert(ssp_registers[pssp]->CR0, phase, kPhaseBit, 1);
   1542c:	4a46      	ldr	r2, [pc, #280]	; (15548 <Ssp::SetClock(bool, bool, unsigned char, unsigned char)+0x1e0>)
   1542e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   15430:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15434:	681b      	ldr	r3, [r3, #0]
    ssp_registers[pssp]->CR0 =
   15436:	4944      	ldr	r1, [pc, #272]	; (15548 <Ssp::SetClock(bool, bool, unsigned char, unsigned char)+0x1e0>)
   15438:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   1543a:	f851 5022 	ldr.w	r5, [r1, r2, lsl #2]
   1543e:	930f      	str	r3, [sp, #60]	; 0x3c
   15440:	f89d 3002 	ldrb.w	r3, [sp, #2]
   15444:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
   15448:	2307      	movs	r3, #7
   1544a:	930d      	str	r3, [sp, #52]	; 0x34
   1544c:	2301      	movs	r3, #1
   1544e:	930c      	str	r3, [sp, #48]	; 0x30
   15450:	4623      	mov	r3, r4
   15452:	4619      	mov	r1, r3
   15454:	483d      	ldr	r0, [pc, #244]	; (1554c <Ssp::SetClock(bool, bool, unsigned char, unsigned char)+0x1e4>)
   15456:	f7fd fd0b 	bl	12e70 <__cyg_profile_func_enter>
  constexpr UnsignedT kFieldOfOnes = GenerateFieldOfOnes<T>();
   1545a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1545e:	930b      	str	r3, [sp, #44]	; 0x2c
  constexpr size_t kTargetWidth     = sizeof(T) * 8;
   15460:	2320      	movs	r3, #32
   15462:	930a      	str	r3, [sp, #40]	; 0x28
  UnsignedT mask   = kFieldOfOnes >> (kTargetWidth - width);
   15464:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   15466:	f1c3 0320 	rsb	r3, r3, #32
   1546a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1546e:	fa22 f303 	lsr.w	r3, r2, r3
   15472:	9309      	str	r3, [sp, #36]	; 0x24
  target &= ~(mask << position);
   15474:	9a09      	ldr	r2, [sp, #36]	; 0x24
   15476:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   15478:	fa02 f303 	lsl.w	r3, r2, r3
   1547c:	43db      	mvns	r3, r3
   1547e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   15480:	4013      	ands	r3, r2
   15482:	930f      	str	r3, [sp, #60]	; 0x3c
  target |= (value & mask) << position;
   15484:	f89d 203b 	ldrb.w	r2, [sp, #59]	; 0x3b
   15488:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1548a:	401a      	ands	r2, r3
   1548c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1548e:	fa02 f303 	lsl.w	r3, r2, r3
   15492:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   15494:	4313      	orrs	r3, r2
   15496:	930f      	str	r3, [sp, #60]	; 0x3c
  return target;
   15498:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
   1549a:	4623      	mov	r3, r4
   1549c:	4619      	mov	r1, r3
   1549e:	482b      	ldr	r0, [pc, #172]	; (1554c <Ssp::SetClock(bool, bool, unsigned char, unsigned char)+0x1e4>)
   154a0:	f7fd fcfa 	bl	12e98 <__cyg_profile_func_exit>
   154a4:	602e      	str	r6, [r5, #0]
    ssp_registers[pssp]->CR0 =
        bit::Insert(ssp_registers[pssp]->CR0, divider, kDividerBit, 8);
   154a6:	4a28      	ldr	r2, [pc, #160]	; (15548 <Ssp::SetClock(bool, bool, unsigned char, unsigned char)+0x1e0>)
   154a8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   154aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   154ae:	681b      	ldr	r3, [r3, #0]
    ssp_registers[pssp]->CR0 =
   154b0:	4925      	ldr	r1, [pc, #148]	; (15548 <Ssp::SetClock(bool, bool, unsigned char, unsigned char)+0x1e0>)
   154b2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   154b4:	f851 5022 	ldr.w	r5, [r1, r2, lsl #2]
   154b8:	9316      	str	r3, [sp, #88]	; 0x58
   154ba:	f89d 3001 	ldrb.w	r3, [sp, #1]
   154be:	f88d 3057 	strb.w	r3, [sp, #87]	; 0x57
   154c2:	2308      	movs	r3, #8
   154c4:	9314      	str	r3, [sp, #80]	; 0x50
   154c6:	2308      	movs	r3, #8
   154c8:	9313      	str	r3, [sp, #76]	; 0x4c
   154ca:	4623      	mov	r3, r4
   154cc:	4619      	mov	r1, r3
   154ce:	4820      	ldr	r0, [pc, #128]	; (15550 <Ssp::SetClock(bool, bool, unsigned char, unsigned char)+0x1e8>)
   154d0:	f7fd fcce 	bl	12e70 <__cyg_profile_func_enter>
  constexpr UnsignedT kFieldOfOnes = GenerateFieldOfOnes<T>();
   154d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   154d8:	9312      	str	r3, [sp, #72]	; 0x48
  constexpr size_t kTargetWidth     = sizeof(T) * 8;
   154da:	2320      	movs	r3, #32
   154dc:	9311      	str	r3, [sp, #68]	; 0x44
  UnsignedT mask   = kFieldOfOnes >> (kTargetWidth - width);
   154de:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   154e0:	f1c3 0320 	rsb	r3, r3, #32
   154e4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   154e8:	fa22 f303 	lsr.w	r3, r2, r3
   154ec:	9310      	str	r3, [sp, #64]	; 0x40
  target &= ~(mask << position);
   154ee:	9a10      	ldr	r2, [sp, #64]	; 0x40
   154f0:	9b14      	ldr	r3, [sp, #80]	; 0x50
   154f2:	fa02 f303 	lsl.w	r3, r2, r3
   154f6:	43db      	mvns	r3, r3
   154f8:	9a16      	ldr	r2, [sp, #88]	; 0x58
   154fa:	4013      	ands	r3, r2
   154fc:	9316      	str	r3, [sp, #88]	; 0x58
  target |= (value & mask) << position;
   154fe:	f89d 2057 	ldrb.w	r2, [sp, #87]	; 0x57
   15502:	9b10      	ldr	r3, [sp, #64]	; 0x40
   15504:	401a      	ands	r2, r3
   15506:	9b14      	ldr	r3, [sp, #80]	; 0x50
   15508:	fa02 f303 	lsl.w	r3, r2, r3
   1550c:	9a16      	ldr	r2, [sp, #88]	; 0x58
   1550e:	4313      	orrs	r3, r2
   15510:	9316      	str	r3, [sp, #88]	; 0x58
  return target;
   15512:	9e16      	ldr	r6, [sp, #88]	; 0x58
   15514:	4623      	mov	r3, r4
   15516:	4619      	mov	r1, r3
   15518:	480d      	ldr	r0, [pc, #52]	; (15550 <Ssp::SetClock(bool, bool, unsigned char, unsigned char)+0x1e8>)
   1551a:	f7fd fcbd 	bl	12e98 <__cyg_profile_func_exit>
   1551e:	602e      	str	r6, [r5, #0]
    ssp_registers[pssp]->CPSR = prescaler;
   15520:	4a09      	ldr	r2, [pc, #36]	; (15548 <Ssp::SetClock(bool, bool, unsigned char, unsigned char)+0x1e0>)
   15522:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   15524:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15528:	f89d 2070 	ldrb.w	r2, [sp, #112]	; 0x70
   1552c:	611a      	str	r2, [r3, #16]
   1552e:	4623      	mov	r3, r4
   15530:	4619      	mov	r1, r3
   15532:	4803      	ldr	r0, [pc, #12]	; (15540 <Ssp::SetClock(bool, bool, unsigned char, unsigned char)+0x1d8>)
   15534:	f7fd fcb0 	bl	12e98 <__cyg_profile_func_exit>
  }
   15538:	bf00      	nop
   1553a:	b018      	add	sp, #96	; 0x60
   1553c:	bd70      	pop	{r4, r5, r6, pc}
   1553e:	bf00      	nop
   15540:	00015369 	.word	0x00015369
   15544:	000189c0 	.word	0x000189c0
   15548:	1000001c 	.word	0x1000001c
   1554c:	00016aad 	.word	0x00016aad
   15550:	000169e5 	.word	0x000169e5

00015554 <Ssp::GetClock()>:
  ///   0000_0000 0000_0x0x xxxx_xxxx xxxx_xxxx
  ///       polarity    = 1-bit @ bit 18
  ///       phase       = 1-bit @ bit 16
  ///       divider     = 8-bits @ bit 8
  ///       prescaler   = 8-bits @ bit 0
  uint32_t GetClock() override
   15554:	b570      	push	{r4, r5, r6, lr}
   15556:	b094      	sub	sp, #80	; 0x50
   15558:	4674      	mov	r4, lr
   1555a:	9001      	str	r0, [sp, #4]
   1555c:	4623      	mov	r3, r4
   1555e:	4619      	mov	r1, r3
   15560:	4858      	ldr	r0, [pc, #352]	; (156c4 <Ssp::GetClock()+0x170>)
   15562:	f7fd fc85 	bl	12e70 <__cyg_profile_func_enter>
  {
    uint32_t return_val = 0;
   15566:	2300      	movs	r3, #0
   15568:	9313      	str	r3, [sp, #76]	; 0x4c
    uint32_t pssp       = util::Value(pssp_);
   1556a:	9b01      	ldr	r3, [sp, #4]
   1556c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1556e:	4618      	mov	r0, r3
   15570:	f7fb f93a 	bl	107e8 <int util::Value<Ssp::Peripheral, int>(Ssp::Peripheral)>
   15574:	4603      	mov	r3, r0
   15576:	9312      	str	r3, [sp, #72]	; 0x48
    // TODO(#371): Find a better alternative to powering up the peripheral for
    // every method.
    Ssp::PowerUpPeripheral(Ssp::kPowerBit[pssp]);
   15578:	9b01      	ldr	r3, [sp, #4]
   1557a:	1d18      	adds	r0, r3, #4
   1557c:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1557e:	009b      	lsls	r3, r3, #2
   15580:	4a51      	ldr	r2, [pc, #324]	; (156c8 <Ssp::GetClock()+0x174>)
   15582:	4413      	add	r3, r2
   15584:	4619      	mov	r1, r3
   15586:	f7fb fb8f 	bl	10ca8 <Lpc40xxSystemController::PowerUpPeripheral(SystemControllerInterface::PeripheralID const&)>

    return_val =
        (bit::Extract(ssp_registers[pssp]->CPSR, kPrescalerBit, 8)) +
   1558a:	4a50      	ldr	r2, [pc, #320]	; (156cc <Ssp::GetClock()+0x178>)
   1558c:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1558e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15592:	691b      	ldr	r3, [r3, #16]
   15594:	9307      	str	r3, [sp, #28]
   15596:	2300      	movs	r3, #0
   15598:	9306      	str	r3, [sp, #24]
   1559a:	2308      	movs	r3, #8
   1559c:	9305      	str	r3, [sp, #20]
   1559e:	4623      	mov	r3, r4
   155a0:	4619      	mov	r1, r3
   155a2:	484b      	ldr	r0, [pc, #300]	; (156d0 <Ssp::GetClock()+0x17c>)
   155a4:	f7fd fc64 	bl	12e70 <__cyg_profile_func_enter>
  constexpr UnsignedT kFieldOfOnes = GenerateFieldOfOnes<T>();
   155a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   155ac:	9304      	str	r3, [sp, #16]
  constexpr size_t kTargetWidth     = sizeof(T) * 8;
   155ae:	2320      	movs	r3, #32
   155b0:	9303      	str	r3, [sp, #12]
  UnsignedT mask   = kFieldOfOnes >> (kTargetWidth - width);
   155b2:	9b05      	ldr	r3, [sp, #20]
   155b4:	f1c3 0320 	rsb	r3, r3, #32
   155b8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   155bc:	fa22 f303 	lsr.w	r3, r2, r3
   155c0:	9302      	str	r3, [sp, #8]
  return (target >> position) & mask;
   155c2:	9a07      	ldr	r2, [sp, #28]
   155c4:	9b06      	ldr	r3, [sp, #24]
   155c6:	40da      	lsrs	r2, r3
   155c8:	9b02      	ldr	r3, [sp, #8]
   155ca:	ea02 0503 	and.w	r5, r2, r3
   155ce:	4623      	mov	r3, r4
   155d0:	4619      	mov	r1, r3
   155d2:	483f      	ldr	r0, [pc, #252]	; (156d0 <Ssp::GetClock()+0x17c>)
   155d4:	f7fd fc60 	bl	12e98 <__cyg_profile_func_exit>
        ((bit::Extract(ssp_registers[pssp]->CR0, kDividerBit, 8)) << 8) +
   155d8:	4a3c      	ldr	r2, [pc, #240]	; (156cc <Ssp::GetClock()+0x178>)
   155da:	9b12      	ldr	r3, [sp, #72]	; 0x48
   155dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   155e0:	681b      	ldr	r3, [r3, #0]
   155e2:	930d      	str	r3, [sp, #52]	; 0x34
   155e4:	2308      	movs	r3, #8
   155e6:	930c      	str	r3, [sp, #48]	; 0x30
   155e8:	2308      	movs	r3, #8
   155ea:	930b      	str	r3, [sp, #44]	; 0x2c
   155ec:	4623      	mov	r3, r4
   155ee:	4619      	mov	r1, r3
   155f0:	4837      	ldr	r0, [pc, #220]	; (156d0 <Ssp::GetClock()+0x17c>)
   155f2:	f7fd fc3d 	bl	12e70 <__cyg_profile_func_enter>
  constexpr UnsignedT kFieldOfOnes = GenerateFieldOfOnes<T>();
   155f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   155fa:	930a      	str	r3, [sp, #40]	; 0x28
  constexpr size_t kTargetWidth     = sizeof(T) * 8;
   155fc:	2320      	movs	r3, #32
   155fe:	9309      	str	r3, [sp, #36]	; 0x24
  UnsignedT mask   = kFieldOfOnes >> (kTargetWidth - width);
   15600:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   15602:	f1c3 0320 	rsb	r3, r3, #32
   15606:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1560a:	fa22 f303 	lsr.w	r3, r2, r3
   1560e:	9308      	str	r3, [sp, #32]
  return (target >> position) & mask;
   15610:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   15612:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   15614:	40da      	lsrs	r2, r3
   15616:	9b08      	ldr	r3, [sp, #32]
   15618:	ea02 0603 	and.w	r6, r2, r3
   1561c:	4623      	mov	r3, r4
   1561e:	4619      	mov	r1, r3
   15620:	482b      	ldr	r0, [pc, #172]	; (156d0 <Ssp::GetClock()+0x17c>)
   15622:	f7fd fc39 	bl	12e98 <__cyg_profile_func_exit>
   15626:	0233      	lsls	r3, r6, #8
        (bit::Extract(ssp_registers[pssp]->CPSR, kPrescalerBit, 8)) +
   15628:	441d      	add	r5, r3
        ((bit::Read(ssp_registers[pssp]->CR0, kPhaseBit)) << 16) +
   1562a:	4a28      	ldr	r2, [pc, #160]	; (156cc <Ssp::GetClock()+0x178>)
   1562c:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1562e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15632:	681b      	ldr	r3, [r3, #0]
   15634:	930f      	str	r3, [sp, #60]	; 0x3c
   15636:	2307      	movs	r3, #7
   15638:	930e      	str	r3, [sp, #56]	; 0x38
   1563a:	4623      	mov	r3, r4
   1563c:	4619      	mov	r1, r3
   1563e:	4825      	ldr	r0, [pc, #148]	; (156d4 <Ssp::GetClock()+0x180>)
   15640:	f7fd fc16 	bl	12e70 <__cyg_profile_func_enter>
  return static_cast<bool>(target & (1 << position));
   15644:	2201      	movs	r2, #1
   15646:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   15648:	fa02 f303 	lsl.w	r3, r2, r3
   1564c:	461a      	mov	r2, r3
   1564e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   15650:	4013      	ands	r3, r2
   15652:	2b00      	cmp	r3, #0
   15654:	bf14      	ite	ne
   15656:	2301      	movne	r3, #1
   15658:	2300      	moveq	r3, #0
   1565a:	b2de      	uxtb	r6, r3
   1565c:	4623      	mov	r3, r4
   1565e:	4619      	mov	r1, r3
   15660:	481c      	ldr	r0, [pc, #112]	; (156d4 <Ssp::GetClock()+0x180>)
   15662:	f7fd fc19 	bl	12e98 <__cyg_profile_func_exit>
   15666:	4633      	mov	r3, r6
   15668:	041b      	lsls	r3, r3, #16
        ((bit::Extract(ssp_registers[pssp]->CR0, kDividerBit, 8)) << 8) +
   1566a:	441d      	add	r5, r3
        ((bit::Read(ssp_registers[pssp]->CR0, kPolarityBit)) << 18);
   1566c:	4a17      	ldr	r2, [pc, #92]	; (156cc <Ssp::GetClock()+0x178>)
   1566e:	9b12      	ldr	r3, [sp, #72]	; 0x48
   15670:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15674:	681b      	ldr	r3, [r3, #0]
   15676:	9311      	str	r3, [sp, #68]	; 0x44
   15678:	2306      	movs	r3, #6
   1567a:	9310      	str	r3, [sp, #64]	; 0x40
   1567c:	4623      	mov	r3, r4
   1567e:	4619      	mov	r1, r3
   15680:	4814      	ldr	r0, [pc, #80]	; (156d4 <Ssp::GetClock()+0x180>)
   15682:	f7fd fbf5 	bl	12e70 <__cyg_profile_func_enter>
   15686:	2201      	movs	r2, #1
   15688:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1568a:	fa02 f303 	lsl.w	r3, r2, r3
   1568e:	461a      	mov	r2, r3
   15690:	9b11      	ldr	r3, [sp, #68]	; 0x44
   15692:	4013      	ands	r3, r2
   15694:	2b00      	cmp	r3, #0
   15696:	bf14      	ite	ne
   15698:	2301      	movne	r3, #1
   1569a:	2300      	moveq	r3, #0
   1569c:	b2de      	uxtb	r6, r3
   1569e:	4623      	mov	r3, r4
   156a0:	4619      	mov	r1, r3
   156a2:	480c      	ldr	r0, [pc, #48]	; (156d4 <Ssp::GetClock()+0x180>)
   156a4:	f7fd fbf8 	bl	12e98 <__cyg_profile_func_exit>
   156a8:	4633      	mov	r3, r6
   156aa:	049b      	lsls	r3, r3, #18
    return_val =
   156ac:	442b      	add	r3, r5
   156ae:	9313      	str	r3, [sp, #76]	; 0x4c

    return return_val;
   156b0:	9d13      	ldr	r5, [sp, #76]	; 0x4c
   156b2:	4623      	mov	r3, r4
   156b4:	4619      	mov	r1, r3
   156b6:	4803      	ldr	r0, [pc, #12]	; (156c4 <Ssp::GetClock()+0x170>)
   156b8:	f7fd fbee 	bl	12e98 <__cyg_profile_func_exit>
   156bc:	462b      	mov	r3, r5
  }
   156be:	4618      	mov	r0, r3
   156c0:	b014      	add	sp, #80	; 0x50
   156c2:	bd70      	pop	{r4, r5, r6, pc}
   156c4:	00015555 	.word	0x00015555
   156c8:	000189c0 	.word	0x000189c0
   156cc:	1000001c 	.word	0x1000001c
   156d0:	00016a59 	.word	0x00016a59
   156d4:	000109e1 	.word	0x000109e1

000156d8 <SdInterface::SdInterface()>:
// NOLINTNEXTLINE(readability-identifier-naming)
// Relevant Datasheet:
// https://www.sdcard.org/downloads/pls/pdf/index.php?p=Part1_Physical_Layer_Simplified_Specification_Ver6.00.jpg&f=Part1_Physical_Layer_Simplified_Specification_Ver6.00.pdf&e=EN_SS1
// TODO(#348):  Write a class to represent a single Sd Card Block to make use
//              of block-related functions easier.
class SdInterface
   156d8:	b530      	push	{r4, r5, lr}
   156da:	b083      	sub	sp, #12
   156dc:	4675      	mov	r5, lr
   156de:	9001      	str	r0, [sp, #4]
   156e0:	462b      	mov	r3, r5
   156e2:	4619      	mov	r1, r3
   156e4:	4807      	ldr	r0, [pc, #28]	; (15704 <SdInterface::SdInterface()+0x2c>)
   156e6:	f7fd fbc3 	bl	12e70 <__cyg_profile_func_enter>
   156ea:	4a07      	ldr	r2, [pc, #28]	; (15708 <SdInterface::SdInterface()+0x30>)
   156ec:	9b01      	ldr	r3, [sp, #4]
   156ee:	601a      	str	r2, [r3, #0]
   156f0:	9c01      	ldr	r4, [sp, #4]
   156f2:	462b      	mov	r3, r5
   156f4:	4619      	mov	r1, r3
   156f6:	4803      	ldr	r0, [pc, #12]	; (15704 <SdInterface::SdInterface()+0x2c>)
   156f8:	f7fd fbce 	bl	12e98 <__cyg_profile_func_exit>
   156fc:	4623      	mov	r3, r4
   156fe:	4618      	mov	r0, r3
   15700:	b003      	add	sp, #12
   15702:	bd30      	pop	{r4, r5, pc}
   15704:	000156d9 	.word	0x000156d9
   15708:	00018d98 	.word	0x00018d98

0001570c <Sd::Sd(Sd::DebugSdCard_t, unsigned char, unsigned char, unsigned char, unsigned char)>:
  /// port that is broken out through the board's GPIO, allowing you to probe
  /// the chip select manually. To use this version instead of the main version,
  /// instantiate an Sd card instance like so:
  ///
  ///   Sd sdcard(Sd::DebugSdCard_t{});
  constexpr Sd(DebugSdCard_t, uint8_t port = 1, uint8_t pin = 8,
   1570c:	b530      	push	{r4, r5, lr}
   1570e:	b083      	sub	sp, #12
   15710:	4675      	mov	r5, lr
   15712:	9001      	str	r0, [sp, #4]
   15714:	f88d 1000 	strb.w	r1, [sp]
   15718:	4611      	mov	r1, r2
   1571a:	461a      	mov	r2, r3
   1571c:	460b      	mov	r3, r1
   1571e:	f88d 3003 	strb.w	r3, [sp, #3]
   15722:	4613      	mov	r3, r2
   15724:	f88d 3002 	strb.w	r3, [sp, #2]
   15728:	462b      	mov	r3, r5
   1572a:	4619      	mov	r1, r3
   1572c:	481d      	ldr	r0, [pc, #116]	; (157a4 <Sd::Sd(Sd::DebugSdCard_t, unsigned char, unsigned char, unsigned char, unsigned char)+0x98>)
   1572e:	f7fd fb9f 	bl	12e70 <__cyg_profile_func_enter>
      : ssp_interface_(&ssp_),
        ssp_(Ssp::Peripheral::kSsp2),
        chip_select_(&chip_select_pin_),
        chip_select_external_(&chip_select_external_pin_),
        chip_select_pin_(port, pin),
        chip_select_external_pin_(extport, extpin)
   15732:	9b01      	ldr	r3, [sp, #4]
   15734:	4618      	mov	r0, r3
   15736:	f7ff ffcf 	bl	156d8 <SdInterface::SdInterface()>
   1573a:	4a1b      	ldr	r2, [pc, #108]	; (157a8 <Sd::Sd(Sd::DebugSdCard_t, unsigned char, unsigned char, unsigned char, unsigned char)+0x9c>)
   1573c:	9b01      	ldr	r3, [sp, #4]
   1573e:	601a      	str	r2, [r3, #0]
   15740:	9b01      	ldr	r3, [sp, #4]
   15742:	f103 0208 	add.w	r2, r3, #8
   15746:	9b01      	ldr	r3, [sp, #4]
   15748:	605a      	str	r2, [r3, #4]
   1574a:	9b01      	ldr	r3, [sp, #4]
   1574c:	3308      	adds	r3, #8
   1574e:	2102      	movs	r1, #2
   15750:	4618      	mov	r0, r3
   15752:	f7ff faf9 	bl	14d48 <Ssp::Ssp(Ssp::Peripheral)>
   15756:	9b01      	ldr	r3, [sp, #4]
   15758:	f103 0240 	add.w	r2, r3, #64	; 0x40
   1575c:	9b01      	ldr	r3, [sp, #4]
   1575e:	639a      	str	r2, [r3, #56]	; 0x38
   15760:	9b01      	ldr	r3, [sp, #4]
   15762:	f103 0254 	add.w	r2, r3, #84	; 0x54
   15766:	9b01      	ldr	r3, [sp, #4]
   15768:	63da      	str	r2, [r3, #60]	; 0x3c
   1576a:	9b01      	ldr	r3, [sp, #4]
   1576c:	3340      	adds	r3, #64	; 0x40
   1576e:	f89d 2002 	ldrb.w	r2, [sp, #2]
   15772:	f89d 1003 	ldrb.w	r1, [sp, #3]
   15776:	4618      	mov	r0, r3
   15778:	f7fe fe5a 	bl	14430 <Gpio::Gpio(unsigned char, unsigned char)>
   1577c:	9b01      	ldr	r3, [sp, #4]
   1577e:	3354      	adds	r3, #84	; 0x54
   15780:	f89d 201c 	ldrb.w	r2, [sp, #28]
   15784:	f89d 1018 	ldrb.w	r1, [sp, #24]
   15788:	4618      	mov	r0, r3
   1578a:	f7fe fe51 	bl	14430 <Gpio::Gpio(unsigned char, unsigned char)>
  {
  }
   1578e:	9c01      	ldr	r4, [sp, #4]
   15790:	462b      	mov	r3, r5
   15792:	4619      	mov	r1, r3
   15794:	4803      	ldr	r0, [pc, #12]	; (157a4 <Sd::Sd(Sd::DebugSdCard_t, unsigned char, unsigned char, unsigned char, unsigned char)+0x98>)
   15796:	f7fd fb7f 	bl	12e98 <__cyg_profile_func_exit>
   1579a:	4623      	mov	r3, r4
   1579c:	4618      	mov	r0, r3
   1579e:	b003      	add	sp, #12
   157a0:	bd30      	pop	{r4, r5, pc}
   157a2:	bf00      	nop
   157a4:	0001570d 	.word	0x0001570d
   157a8:	00018d6c 	.word	0x00018d6c

000157ac <Sd::Initialize()>:

  void Initialize() override
   157ac:	b530      	push	{r4, r5, lr}
   157ae:	b085      	sub	sp, #20
   157b0:	4675      	mov	r5, lr
   157b2:	9003      	str	r0, [sp, #12]
   157b4:	462b      	mov	r3, r5
   157b6:	4619      	mov	r1, r3
   157b8:	4827      	ldr	r0, [pc, #156]	; (15858 <Sd::Initialize()+0xac>)
   157ba:	f7fd fb59 	bl	12e70 <__cyg_profile_func_enter>
  {
    LOG_DEBUG("Begin initialization:");
    LOG_DEBUG("Setting CS as output...");
    chip_select_->SetAsOutput();
   157be:	9b03      	ldr	r3, [sp, #12]
   157c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   157c2:	9b03      	ldr	r3, [sp, #12]
   157c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   157c6:	681b      	ldr	r3, [r3, #0]
   157c8:	3304      	adds	r3, #4
   157ca:	681b      	ldr	r3, [r3, #0]
   157cc:	4610      	mov	r0, r2
   157ce:	4798      	blx	r3
    chip_select_->SetHigh();
   157d0:	9b03      	ldr	r3, [sp, #12]
   157d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   157d4:	9b03      	ldr	r3, [sp, #12]
   157d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   157d8:	681b      	ldr	r3, [r3, #0]
   157da:	330c      	adds	r3, #12
   157dc:	681b      	ldr	r3, [r3, #0]
   157de:	4610      	mov	r0, r2
   157e0:	4798      	blx	r3
    chip_select_external_->SetAsOutput();
   157e2:	9b03      	ldr	r3, [sp, #12]
   157e4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
   157e6:	9b03      	ldr	r3, [sp, #12]
   157e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   157ea:	681b      	ldr	r3, [r3, #0]
   157ec:	3304      	adds	r3, #4
   157ee:	681b      	ldr	r3, [r3, #0]
   157f0:	4610      	mov	r0, r2
   157f2:	4798      	blx	r3
    chip_select_external_->SetHigh();
   157f4:	9b03      	ldr	r3, [sp, #12]
   157f6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
   157f8:	9b03      	ldr	r3, [sp, #12]
   157fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   157fc:	681b      	ldr	r3, [r3, #0]
   157fe:	330c      	adds	r3, #12
   15800:	681b      	ldr	r3, [r3, #0]
   15802:	4610      	mov	r0, r2
   15804:	4798      	blx	r3

    LOG_DEBUG("Setting SSP Clock Speed...");
    ssp_interface_->SetClock(false, false, 14, 2);  // 400kHz
   15806:	9b03      	ldr	r3, [sp, #12]
   15808:	6858      	ldr	r0, [r3, #4]
   1580a:	9b03      	ldr	r3, [sp, #12]
   1580c:	685b      	ldr	r3, [r3, #4]
   1580e:	681b      	ldr	r3, [r3, #0]
   15810:	3318      	adds	r3, #24
   15812:	681c      	ldr	r4, [r3, #0]
   15814:	2302      	movs	r3, #2
   15816:	9300      	str	r3, [sp, #0]
   15818:	230e      	movs	r3, #14
   1581a:	2200      	movs	r2, #0
   1581c:	2100      	movs	r1, #0
   1581e:	47a0      	blx	r4

    LOG_DEBUG("Setting Peripheral Mode...");
    ssp_interface_->SetPeripheralMode(Ssp::MasterSlaveMode::kMaster,
   15820:	9b03      	ldr	r3, [sp, #12]
   15822:	6858      	ldr	r0, [r3, #4]
   15824:	9b03      	ldr	r3, [sp, #12]
   15826:	685b      	ldr	r3, [r3, #4]
                                      Ssp::FrameMode::kSpi,
                                      Ssp::DataSize::kEight);
   15828:	681b      	ldr	r3, [r3, #0]
   1582a:	3310      	adds	r3, #16
   1582c:	681c      	ldr	r4, [r3, #0]
    ssp_interface_->SetPeripheralMode(Ssp::MasterSlaveMode::kMaster,
   1582e:	2307      	movs	r3, #7
   15830:	2200      	movs	r2, #0
   15832:	2100      	movs	r1, #0
   15834:	47a0      	blx	r4

    LOG_DEBUG("Starting SSP Peripheral...");
    ssp_interface_->Initialize();
   15836:	9b03      	ldr	r3, [sp, #12]
   15838:	685a      	ldr	r2, [r3, #4]
   1583a:	9b03      	ldr	r3, [sp, #12]
   1583c:	685b      	ldr	r3, [r3, #4]
   1583e:	681b      	ldr	r3, [r3, #0]
   15840:	681b      	ldr	r3, [r3, #0]
   15842:	4610      	mov	r0, r2
   15844:	4798      	blx	r3
   15846:	462b      	mov	r3, r5
   15848:	4619      	mov	r1, r3
   1584a:	4803      	ldr	r0, [pc, #12]	; (15858 <Sd::Initialize()+0xac>)
   1584c:	f7fd fb24 	bl	12e98 <__cyg_profile_func_exit>
  }
   15850:	bf00      	nop
   15852:	b005      	add	sp, #20
   15854:	bd30      	pop	{r4, r5, pc}
   15856:	bf00      	nop
   15858:	000157ad 	.word	0x000157ad

0001585c <Sd::Mount(SdInterface::CardInfo_t*)>:

  // Initialize SD Card
  // TODO(#349): Split method into smaller piece with single jobs
  bool Mount(CardInfo_t * sd) override
   1585c:	b530      	push	{r4, r5, lr}
   1585e:	b08b      	sub	sp, #44	; 0x2c
   15860:	4675      	mov	r5, lr
   15862:	9003      	str	r0, [sp, #12]
   15864:	9102      	str	r1, [sp, #8]
   15866:	462b      	mov	r3, r5
   15868:	4619      	mov	r1, r3
   1586a:	48a7      	ldr	r0, [pc, #668]	; (15b08 <Sd::Mount(SdInterface::CardInfo_t*)+0x2ac>)
   1586c:	f7fd fb00 	bl	12e70 <__cyg_profile_func_enter>
  {
    uint8_t tries     = 0;
   15870:	2300      	movs	r3, #0
   15872:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    bool card_is_idle = false;
   15876:	2300      	movs	r3, #0
   15878:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26

    // Reset the card and force it to go to idle state at <400kHz with a
    // CMD0 + (active-low) CS
    LOG_DEBUG("Sending SD Card to Idle State...");
    sd->response.length = SendCmd(Command::kReset, 0x00000000,
                                  sd->response.data.byte, 100, KeepAlive::kYes);
   1587c:	9b03      	ldr	r3, [sp, #12]
   1587e:	681b      	ldr	r3, [r3, #0]
   15880:	681c      	ldr	r4, [r3, #0]
    sd->response.length = SendCmd(Command::kReset, 0x00000000,
   15882:	9b02      	ldr	r3, [sp, #8]
   15884:	f103 0208 	add.w	r2, r3, #8
   15888:	2301      	movs	r3, #1
   1588a:	9301      	str	r3, [sp, #4]
   1588c:	2364      	movs	r3, #100	; 0x64
   1588e:	9300      	str	r3, [sp, #0]
   15890:	4613      	mov	r3, r2
   15892:	2200      	movs	r2, #0
   15894:	2140      	movs	r1, #64	; 0x40
   15896:	9803      	ldr	r0, [sp, #12]
   15898:	47a0      	blx	r4
   1589a:	4602      	mov	r2, r0
   1589c:	9b02      	ldr	r3, [sp, #8]
   1589e:	611a      	str	r2, [r3, #16]

    // Reset the card again to trigger SPI mode
    LOG_DEBUG("Initializing SPI mode...");
    do
    {
      tries++;
   158a0:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   158a4:	3301      	adds	r3, #1
   158a6:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
      sd->response.length = SendCmd(
          Command::kReset, 0x00, sd->response.data.byte, 100, KeepAlive::kYes);
   158aa:	9b03      	ldr	r3, [sp, #12]
   158ac:	681b      	ldr	r3, [r3, #0]
   158ae:	681c      	ldr	r4, [r3, #0]
      sd->response.length = SendCmd(
   158b0:	9b02      	ldr	r3, [sp, #8]
   158b2:	f103 0208 	add.w	r2, r3, #8
   158b6:	2301      	movs	r3, #1
   158b8:	9301      	str	r3, [sp, #4]
   158ba:	2364      	movs	r3, #100	; 0x64
   158bc:	9300      	str	r3, [sp, #0]
   158be:	4613      	mov	r3, r2
   158c0:	2200      	movs	r2, #0
   158c2:	2140      	movs	r1, #64	; 0x40
   158c4:	9803      	ldr	r0, [sp, #12]
   158c6:	47a0      	blx	r4
   158c8:	4602      	mov	r2, r0
   158ca:	9b02      	ldr	r3, [sp, #8]
   158cc:	611a      	str	r2, [r3, #16]

      // Check if R1 response frame's bit 1 is set (to ensure that
      // card is in idle state)
      if (sd->response.data.byte[0] != 0xFF &&
   158ce:	9b02      	ldr	r3, [sp, #8]
   158d0:	7a1b      	ldrb	r3, [r3, #8]
   158d2:	2bff      	cmp	r3, #255	; 0xff
   158d4:	d008      	beq.n	158e8 <Sd::Mount(SdInterface::CardInfo_t*)+0x8c>
          (sd->response.data.byte[0] & 0x01) == 0x01)
   158d6:	9b02      	ldr	r3, [sp, #8]
   158d8:	7a1b      	ldrb	r3, [r3, #8]
   158da:	f003 0301 	and.w	r3, r3, #1
      if (sd->response.data.byte[0] != 0xFF &&
   158de:	2b00      	cmp	r3, #0
   158e0:	d002      	beq.n	158e8 <Sd::Mount(SdInterface::CardInfo_t*)+0x8c>
      {
        // If it is, we can move on; otherwise, keep trying for a set
        // amount of tries
        card_is_idle = true;
   158e2:	2301      	movs	r3, #1
   158e4:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
      }
      Delay(10);
   158e8:	f04f 000a 	mov.w	r0, #10
   158ec:	f04f 0100 	mov.w	r1, #0
   158f0:	f7fa fedc 	bl	106ac <Delay(unsigned long long)>
    } while (tries < kBusTimeout && !card_is_idle);
   158f4:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   158f8:	2bf9      	cmp	r3, #249	; 0xf9
   158fa:	d804      	bhi.n	15906 <Sd::Mount(SdInterface::CardInfo_t*)+0xaa>
   158fc:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
   15900:	2b00      	cmp	r3, #0
   15902:	d100      	bne.n	15906 <Sd::Mount(SdInterface::CardInfo_t*)+0xaa>
    do
   15904:	e7cc      	b.n	158a0 <Sd::Mount(SdInterface::CardInfo_t*)+0x44>
    LOG_DEBUG("%d tries", tries);
    if (tries >= kBusTimeout)
   15906:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   1590a:	2bf9      	cmp	r3, #249	; 0xf9
   1590c:	d91b      	bls.n	15946 <Sd::Mount(SdInterface::CardInfo_t*)+0xea>
    {
      LOG_ERROR("Failed to initiate SPI mode within timeout. Aborting!");
   1590e:	f240 13ff 	movw	r3, #511	; 0x1ff
   15912:	4a7e      	ldr	r2, [pc, #504]	; (15b0c <Sd::Mount(SdInterface::CardInfo_t*)+0x2b0>)
   15914:	497e      	ldr	r1, [pc, #504]	; (15b10 <Sd::Mount(SdInterface::CardInfo_t*)+0x2b4>)
   15916:	487f      	ldr	r0, [pc, #508]	; (15b14 <Sd::Mount(SdInterface::CardInfo_t*)+0x2b8>)
   15918:	f7fe fd04 	bl	14324 <printf>
      sd->response.length = SendCmd(Command::kGarbage, 0xFFFFFFFF,
                                    sd->response.data.byte, 0, KeepAlive::kNo);
   1591c:	9b03      	ldr	r3, [sp, #12]
   1591e:	681b      	ldr	r3, [r3, #0]
   15920:	681c      	ldr	r4, [r3, #0]
      sd->response.length = SendCmd(Command::kGarbage, 0xFFFFFFFF,
   15922:	9b02      	ldr	r3, [sp, #8]
   15924:	f103 0208 	add.w	r2, r3, #8
   15928:	2300      	movs	r3, #0
   1592a:	9301      	str	r3, [sp, #4]
   1592c:	2300      	movs	r3, #0
   1592e:	9300      	str	r3, [sp, #0]
   15930:	4613      	mov	r3, r2
   15932:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   15936:	21ff      	movs	r1, #255	; 0xff
   15938:	9803      	ldr	r0, [sp, #12]
   1593a:	47a0      	blx	r4
   1593c:	4602      	mov	r2, r0
   1593e:	9b02      	ldr	r3, [sp, #8]
   15940:	611a      	str	r2, [r3, #16]
      return false;
   15942:	2400      	movs	r4, #0
   15944:	e10c      	b.n	15b60 <Sd::Mount(SdInterface::CardInfo_t*)+0x304>
    }

    // Send the host's supported voltage (3.3V) and ask if the card
    // supports it
    LOG_DEBUG("Checking Current SD Card Voltage Level...");
    constexpr uint8_t kCheckPattern = 0xAB;
   15946:	23ab      	movs	r3, #171	; 0xab
   15948:	f88d 301f 	strb.w	r3, [sp, #31]
    uint64_t supported_voltage      = 0x00000001;
   1594c:	f04f 0301 	mov.w	r3, #1
   15950:	f04f 0400 	mov.w	r4, #0
   15954:	e9cd 3404 	strd	r3, r4, [sp, #16]
    sd->response.length =
        SendCmd(Command::kGetOp,
                static_cast<uint32_t>((supported_voltage << 8) | kCheckPattern),
                sd->response.data.byte, 100, KeepAlive::kYes);
   15958:	9b03      	ldr	r3, [sp, #12]
   1595a:	681b      	ldr	r3, [r3, #0]
   1595c:	681c      	ldr	r4, [r3, #0]
                static_cast<uint32_t>((supported_voltage << 8) | kCheckPattern),
   1595e:	9b04      	ldr	r3, [sp, #16]
   15960:	021b      	lsls	r3, r3, #8
        SendCmd(Command::kGetOp,
   15962:	f043 02ab 	orr.w	r2, r3, #171	; 0xab
   15966:	9b02      	ldr	r3, [sp, #8]
   15968:	f103 0108 	add.w	r1, r3, #8
   1596c:	2301      	movs	r3, #1
   1596e:	9301      	str	r3, [sp, #4]
   15970:	2364      	movs	r3, #100	; 0x64
   15972:	9300      	str	r3, [sp, #0]
   15974:	460b      	mov	r3, r1
   15976:	2148      	movs	r1, #72	; 0x48
   15978:	9803      	ldr	r0, [sp, #12]
   1597a:	47a0      	blx	r4
   1597c:	4602      	mov	r2, r0
    sd->response.length =
   1597e:	9b02      	ldr	r3, [sp, #8]
   15980:	611a      	str	r2, [r3, #16]
    if (sd->response.data.byte[4] != kCheckPattern)
   15982:	9b02      	ldr	r3, [sp, #8]
   15984:	7b1b      	ldrb	r3, [r3, #12]
   15986:	2bab      	cmp	r3, #171	; 0xab
   15988:	d01b      	beq.n	159c2 <Sd::Mount(SdInterface::CardInfo_t*)+0x166>
    {
      // If the last byte is not an exact echo of the LSB of the kGetOp
      // command's argument, this response is invalid
      LOG_ERROR("Response integrity check failed. Aborting!");
   1598a:	f240 2312 	movw	r3, #530	; 0x212
   1598e:	4a5f      	ldr	r2, [pc, #380]	; (15b0c <Sd::Mount(SdInterface::CardInfo_t*)+0x2b0>)
   15990:	4961      	ldr	r1, [pc, #388]	; (15b18 <Sd::Mount(SdInterface::CardInfo_t*)+0x2bc>)
   15992:	4862      	ldr	r0, [pc, #392]	; (15b1c <Sd::Mount(SdInterface::CardInfo_t*)+0x2c0>)
   15994:	f7fe fcc6 	bl	14324 <printf>
      sd->response.length = SendCmd(Command::kGarbage, 0xFFFFFFFF,
                                    sd->response.data.byte, 0, KeepAlive::kNo);
   15998:	9b03      	ldr	r3, [sp, #12]
   1599a:	681b      	ldr	r3, [r3, #0]
   1599c:	681c      	ldr	r4, [r3, #0]
      sd->response.length = SendCmd(Command::kGarbage, 0xFFFFFFFF,
   1599e:	9b02      	ldr	r3, [sp, #8]
   159a0:	f103 0208 	add.w	r2, r3, #8
   159a4:	2300      	movs	r3, #0
   159a6:	9301      	str	r3, [sp, #4]
   159a8:	2300      	movs	r3, #0
   159aa:	9300      	str	r3, [sp, #0]
   159ac:	4613      	mov	r3, r2
   159ae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   159b2:	21ff      	movs	r1, #255	; 0xff
   159b4:	9803      	ldr	r0, [sp, #12]
   159b6:	47a0      	blx	r4
   159b8:	4602      	mov	r2, r0
   159ba:	9b02      	ldr	r3, [sp, #8]
   159bc:	611a      	str	r2, [r3, #16]
      return false;
   159be:	2400      	movs	r4, #0
   159c0:	e0ce      	b.n	15b60 <Sd::Mount(SdInterface::CardInfo_t*)+0x304>
    }
    else if (sd->response.data.byte[3] &
   159c2:	9b02      	ldr	r3, [sp, #8]
   159c4:	7adb      	ldrb	r3, [r3, #11]
   159c6:	4619      	mov	r1, r3
             (supported_voltage == static_cast<uint64_t>(0x00)))
   159c8:	9a04      	ldr	r2, [sp, #16]
   159ca:	9b05      	ldr	r3, [sp, #20]
   159cc:	4313      	orrs	r3, r2
   159ce:	2b00      	cmp	r3, #0
   159d0:	bf0c      	ite	eq
   159d2:	2301      	moveq	r3, #1
   159d4:	2300      	movne	r3, #0
   159d6:	b2db      	uxtb	r3, r3
    else if (sd->response.data.byte[3] &
   159d8:	400b      	ands	r3, r1
   159da:	2b00      	cmp	r3, #0
   159dc:	d01b      	beq.n	15a16 <Sd::Mount(SdInterface::CardInfo_t*)+0x1ba>
    {
      // If the 2nd-to-last byte of the reponse AND'ed with our host
      // device's supported voltage range is 0x00, the SD card doesn't
      // support our device's operating voltage
      LOG_ERROR("Unsupported voltage in use. Aborting!");
   159de:	f240 231d 	movw	r3, #541	; 0x21d
   159e2:	4a4a      	ldr	r2, [pc, #296]	; (15b0c <Sd::Mount(SdInterface::CardInfo_t*)+0x2b0>)
   159e4:	494e      	ldr	r1, [pc, #312]	; (15b20 <Sd::Mount(SdInterface::CardInfo_t*)+0x2c4>)
   159e6:	484f      	ldr	r0, [pc, #316]	; (15b24 <Sd::Mount(SdInterface::CardInfo_t*)+0x2c8>)
   159e8:	f7fe fc9c 	bl	14324 <printf>
      sd->response.length = SendCmd(Command::kGarbage, 0xFFFFFFFF,
                                    sd->response.data.byte, 0, KeepAlive::kNo);
   159ec:	9b03      	ldr	r3, [sp, #12]
   159ee:	681b      	ldr	r3, [r3, #0]
   159f0:	681c      	ldr	r4, [r3, #0]
      sd->response.length = SendCmd(Command::kGarbage, 0xFFFFFFFF,
   159f2:	9b02      	ldr	r3, [sp, #8]
   159f4:	f103 0208 	add.w	r2, r3, #8
   159f8:	2300      	movs	r3, #0
   159fa:	9301      	str	r3, [sp, #4]
   159fc:	2300      	movs	r3, #0
   159fe:	9300      	str	r3, [sp, #0]
   15a00:	4613      	mov	r3, r2
   15a02:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   15a06:	21ff      	movs	r1, #255	; 0xff
   15a08:	9803      	ldr	r0, [sp, #12]
   15a0a:	47a0      	blx	r4
   15a0c:	4602      	mov	r2, r0
   15a0e:	9b02      	ldr	r3, [sp, #8]
   15a10:	611a      	str	r2, [r3, #16]
      return false;
   15a12:	2400      	movs	r4, #0
   15a14:	e0a4      	b.n	15b60 <Sd::Mount(SdInterface::CardInfo_t*)+0x304>
    }

    // Indicate that the host supports SDHC/SDXC and wait for card to
    // shift out of idle state
    LOG_DEBUG("Expressing High-Capacity SD Card Support...");
    tries = 0;
   15a16:	2300      	movs	r3, #0
   15a18:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    do
    {
      // Send host's operating conditions
      sd->response.length =
          SendCmd(Command::kInit, 0x40000000, sd->response.data.byte, 100,
                  KeepAlive::kYes);
   15a1c:	9b03      	ldr	r3, [sp, #12]
   15a1e:	681b      	ldr	r3, [r3, #0]
   15a20:	681c      	ldr	r4, [r3, #0]
          SendCmd(Command::kInit, 0x40000000, sd->response.data.byte, 100,
   15a22:	9b02      	ldr	r3, [sp, #8]
   15a24:	f103 0208 	add.w	r2, r3, #8
   15a28:	2301      	movs	r3, #1
   15a2a:	9301      	str	r3, [sp, #4]
   15a2c:	2364      	movs	r3, #100	; 0x64
   15a2e:	9300      	str	r3, [sp, #0]
   15a30:	4613      	mov	r3, r2
   15a32:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   15a36:	2141      	movs	r1, #65	; 0x41
   15a38:	9803      	ldr	r0, [sp, #12]
   15a3a:	47a0      	blx	r4
   15a3c:	4602      	mov	r2, r0
      sd->response.length =
   15a3e:	9b02      	ldr	r3, [sp, #8]
   15a40:	611a      	str	r2, [r3, #16]
      tries++;
   15a42:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   15a46:	3301      	adds	r3, #1
   15a48:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    } while (tries < kBusTimeout && sd->response.data.byte[0] & 0x01);
   15a4c:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   15a50:	2bf9      	cmp	r3, #249	; 0xf9
   15a52:	d806      	bhi.n	15a62 <Sd::Mount(SdInterface::CardInfo_t*)+0x206>
   15a54:	9b02      	ldr	r3, [sp, #8]
   15a56:	7a1b      	ldrb	r3, [r3, #8]
   15a58:	f003 0301 	and.w	r3, r3, #1
   15a5c:	2b00      	cmp	r3, #0
   15a5e:	d000      	beq.n	15a62 <Sd::Mount(SdInterface::CardInfo_t*)+0x206>
    do
   15a60:	e7dc      	b.n	15a1c <Sd::Mount(SdInterface::CardInfo_t*)+0x1c0>
    if (tries == kBusTimeout)
   15a62:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   15a66:	2bfa      	cmp	r3, #250	; 0xfa
   15a68:	d11b      	bne.n	15aa2 <Sd::Mount(SdInterface::CardInfo_t*)+0x246>
    {
      LOG_ERROR("SD Card timed out. Aborting!");
   15a6a:	f240 2331 	movw	r3, #561	; 0x231
   15a6e:	4a27      	ldr	r2, [pc, #156]	; (15b0c <Sd::Mount(SdInterface::CardInfo_t*)+0x2b0>)
   15a70:	492d      	ldr	r1, [pc, #180]	; (15b28 <Sd::Mount(SdInterface::CardInfo_t*)+0x2cc>)
   15a72:	482e      	ldr	r0, [pc, #184]	; (15b2c <Sd::Mount(SdInterface::CardInfo_t*)+0x2d0>)
   15a74:	f7fe fc56 	bl	14324 <printf>
      sd->response.length = SendCmd(Command::kGarbage, 0xFFFFFFFF,
                                    sd->response.data.byte, 0, KeepAlive::kNo);
   15a78:	9b03      	ldr	r3, [sp, #12]
   15a7a:	681b      	ldr	r3, [r3, #0]
   15a7c:	681c      	ldr	r4, [r3, #0]
      sd->response.length = SendCmd(Command::kGarbage, 0xFFFFFFFF,
   15a7e:	9b02      	ldr	r3, [sp, #8]
   15a80:	f103 0208 	add.w	r2, r3, #8
   15a84:	2300      	movs	r3, #0
   15a86:	9301      	str	r3, [sp, #4]
   15a88:	2300      	movs	r3, #0
   15a8a:	9300      	str	r3, [sp, #0]
   15a8c:	4613      	mov	r3, r2
   15a8e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   15a92:	21ff      	movs	r1, #255	; 0xff
   15a94:	9803      	ldr	r0, [sp, #12]
   15a96:	47a0      	blx	r4
   15a98:	4602      	mov	r2, r0
   15a9a:	9b02      	ldr	r3, [sp, #8]
   15a9c:	611a      	str	r2, [r3, #16]
      return false;
   15a9e:	2400      	movs	r4, #0
   15aa0:	e05e      	b.n	15b60 <Sd::Mount(SdInterface::CardInfo_t*)+0x304>
    // After card is ready, acquire card capacity info using kGetOcr a
    // second time
    LOG_DEBUG("Reading Card Capacity Information...");
    // Read CCS
    sd->response.length = SendCmd(Command::kGetOcr, 0x00,
                                  sd->response.data.byte, 100, KeepAlive::kYes);
   15aa2:	9b03      	ldr	r3, [sp, #12]
   15aa4:	681b      	ldr	r3, [r3, #0]
   15aa6:	681c      	ldr	r4, [r3, #0]
    sd->response.length = SendCmd(Command::kGetOcr, 0x00,
   15aa8:	9b02      	ldr	r3, [sp, #8]
   15aaa:	f103 0208 	add.w	r2, r3, #8
   15aae:	2301      	movs	r3, #1
   15ab0:	9301      	str	r3, [sp, #4]
   15ab2:	2364      	movs	r3, #100	; 0x64
   15ab4:	9300      	str	r3, [sp, #0]
   15ab6:	4613      	mov	r3, r2
   15ab8:	2200      	movs	r2, #0
   15aba:	217a      	movs	r1, #122	; 0x7a
   15abc:	9803      	ldr	r0, [sp, #12]
   15abe:	47a0      	blx	r4
   15ac0:	4602      	mov	r2, r0
   15ac2:	9b02      	ldr	r3, [sp, #8]
   15ac4:	611a      	str	r2, [r3, #16]
    if (sd->response.data.byte[1] & 0x40)
   15ac6:	9b02      	ldr	r3, [sp, #8]
   15ac8:	7a5b      	ldrb	r3, [r3, #9]
   15aca:	f003 0340 	and.w	r3, r3, #64	; 0x40
   15ace:	2b00      	cmp	r3, #0
   15ad0:	d003      	beq.n	15ada <Sd::Mount(SdInterface::CardInfo_t*)+0x27e>
    {
      // The card is either high or extended capacity
      LOG_DEBUG("SD Card is HC/XC");
      sd->type = Type::kSDHC;
   15ad2:	9b02      	ldr	r3, [sp, #8]
   15ad4:	2201      	movs	r2, #1
   15ad6:	605a      	str	r2, [r3, #4]
   15ad8:	e002      	b.n	15ae0 <Sd::Mount(SdInterface::CardInfo_t*)+0x284>
    }
    else
    {
      // The card is standard capacity
      LOG_DEBUG("SD Card is SC");
      sd->type = Type::kSDSC;
   15ada:	9b02      	ldr	r3, [sp, #8]
   15adc:	2200      	movs	r2, #0
   15ade:	605a      	str	r2, [r3, #4]
    }

    // Store OCR information
    for (int i = 0; i < 4; i++)
   15ae0:	2300      	movs	r3, #0
   15ae2:	9308      	str	r3, [sp, #32]
   15ae4:	9b08      	ldr	r3, [sp, #32]
   15ae6:	2b03      	cmp	r3, #3
   15ae8:	dc22      	bgt.n	15b30 <Sd::Mount(SdInterface::CardInfo_t*)+0x2d4>
    {
      // ensure OCR doesn't capture the R1 section of the response
      sd->ocr.byte[i] = sd->response.data.byte[i + 1];
   15aea:	9b08      	ldr	r3, [sp, #32]
   15aec:	3301      	adds	r3, #1
   15aee:	9a02      	ldr	r2, [sp, #8]
   15af0:	4413      	add	r3, r2
   15af2:	7a19      	ldrb	r1, [r3, #8]
   15af4:	9a02      	ldr	r2, [sp, #8]
   15af6:	9b08      	ldr	r3, [sp, #32]
   15af8:	4413      	add	r3, r2
   15afa:	460a      	mov	r2, r1
   15afc:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < 4; i++)
   15afe:	9b08      	ldr	r3, [sp, #32]
   15b00:	3301      	adds	r3, #1
   15b02:	9308      	str	r3, [sp, #32]
   15b04:	e7ee      	b.n	15ae4 <Sd::Mount(SdInterface::CardInfo_t*)+0x288>
   15b06:	bf00      	nop
   15b08:	0001585d 	.word	0x0001585d
   15b0c:	00018fb4 	.word	0x00018fb4
   15b10:	00018ccc 	.word	0x00018ccc
   15b14:	000182e4 	.word	0x000182e4
   15b18:	00018cd4 	.word	0x00018cd4
   15b1c:	00018354 	.word	0x00018354
   15b20:	00018cdc 	.word	0x00018cdc
   15b24:	000183b8 	.word	0x000183b8
   15b28:	00018ce4 	.word	0x00018ce4
   15b2c:	00018418 	.word	0x00018418
    }

    // If card is SDSC, manually set its block size
    if (sd->type == Type::kSDSC)
   15b30:	9b02      	ldr	r3, [sp, #8]
   15b32:	685b      	ldr	r3, [r3, #4]
   15b34:	2b00      	cmp	r3, #0
   15b36:	d112      	bne.n	15b5e <Sd::Mount(SdInterface::CardInfo_t*)+0x302>
    {
      // Send requested byte size
      sd->response.length =
          SendCmd(Command::kChgBlkLen, static_cast<uint32_t>(kBlockSize),
                  sd->response.data.byte, 0, KeepAlive::kYes);
   15b38:	9b03      	ldr	r3, [sp, #12]
   15b3a:	681b      	ldr	r3, [r3, #0]
   15b3c:	681c      	ldr	r4, [r3, #0]
          SendCmd(Command::kChgBlkLen, static_cast<uint32_t>(kBlockSize),
   15b3e:	9b02      	ldr	r3, [sp, #8]
   15b40:	f103 0208 	add.w	r2, r3, #8
   15b44:	2301      	movs	r3, #1
   15b46:	9301      	str	r3, [sp, #4]
   15b48:	2300      	movs	r3, #0
   15b4a:	9300      	str	r3, [sp, #0]
   15b4c:	4613      	mov	r3, r2
   15b4e:	f44f 7200 	mov.w	r2, #512	; 0x200
   15b52:	2150      	movs	r1, #80	; 0x50
   15b54:	9803      	ldr	r0, [sp, #12]
   15b56:	47a0      	blx	r4
   15b58:	4602      	mov	r2, r0
      sd->response.length =
   15b5a:	9b02      	ldr	r3, [sp, #8]
   15b5c:	611a      	str	r2, [r3, #16]
    }

    return true;
   15b5e:	2401      	movs	r4, #1
   15b60:	462b      	mov	r3, r5
   15b62:	4619      	mov	r1, r3
   15b64:	4803      	ldr	r0, [pc, #12]	; (15b74 <Sd::Mount(SdInterface::CardInfo_t*)+0x318>)
   15b66:	f7fd f997 	bl	12e98 <__cyg_profile_func_exit>
   15b6a:	4623      	mov	r3, r4
  }
   15b6c:	4618      	mov	r0, r3
   15b6e:	b00b      	add	sp, #44	; 0x2c
   15b70:	bd30      	pop	{r4, r5, pc}
   15b72:	bf00      	nop
   15b74:	0001585d 	.word	0x0001585d

00015b78 <Sd::ToBool(bool)>:

  // Returns string to represent a boolean value
  const char * ToBool(bool condition)
   15b78:	b530      	push	{r4, r5, lr}
   15b7a:	b083      	sub	sp, #12
   15b7c:	4675      	mov	r5, lr
   15b7e:	9001      	str	r0, [sp, #4]
   15b80:	460b      	mov	r3, r1
   15b82:	f88d 3003 	strb.w	r3, [sp, #3]
   15b86:	462b      	mov	r3, r5
   15b88:	4619      	mov	r1, r3
   15b8a:	4809      	ldr	r0, [pc, #36]	; (15bb0 <Sd::ToBool(bool)+0x38>)
   15b8c:	f7fd f970 	bl	12e70 <__cyg_profile_func_enter>
  {
    return (condition) ? "true" : "false";
   15b90:	f89d 3003 	ldrb.w	r3, [sp, #3]
   15b94:	2b00      	cmp	r3, #0
   15b96:	d001      	beq.n	15b9c <Sd::ToBool(bool)+0x24>
   15b98:	4c06      	ldr	r4, [pc, #24]	; (15bb4 <Sd::ToBool(bool)+0x3c>)
   15b9a:	e000      	b.n	15b9e <Sd::ToBool(bool)+0x26>
   15b9c:	4c06      	ldr	r4, [pc, #24]	; (15bb8 <Sd::ToBool(bool)+0x40>)
   15b9e:	462b      	mov	r3, r5
   15ba0:	4619      	mov	r1, r3
   15ba2:	4803      	ldr	r0, [pc, #12]	; (15bb0 <Sd::ToBool(bool)+0x38>)
   15ba4:	f7fd f978 	bl	12e98 <__cyg_profile_func_exit>
   15ba8:	4623      	mov	r3, r4
  }
   15baa:	4618      	mov	r0, r3
   15bac:	b003      	add	sp, #12
   15bae:	bd30      	pop	{r4, r5, pc}
   15bb0:	00015b79 	.word	0x00015b79
   15bb4:	00018470 	.word	0x00018470
   15bb8:	00018478 	.word	0x00018478

00015bbc <Sd::WaitToReadBlock()>:

  // Waits for the card to respond after a single or multi block read cmd is
  // sent.
  void WaitToReadBlock()
   15bbc:	b510      	push	{r4, lr}
   15bbe:	b084      	sub	sp, #16
   15bc0:	4674      	mov	r4, lr
   15bc2:	9001      	str	r0, [sp, #4]
   15bc4:	4623      	mov	r3, r4
   15bc6:	4619      	mov	r1, r3
   15bc8:	4814      	ldr	r0, [pc, #80]	; (15c1c <Sd::WaitToReadBlock()+0x60>)
   15bca:	f7fd f951 	bl	12e70 <__cyg_profile_func_enter>
    // Bit 4 -->  If set, card is locked
    // Bit 3 -->  If set, address is out or range
    // Bit 2 -->  If set, card ECC failed
    // Bit 1 -->  If set, CC error occurred
    // Bit 0 -->  If set, a generic error occurred
    uint8_t wait_byte = 0x00;
   15bce:	2300      	movs	r3, #0
   15bd0:	f88d 300f 	strb.w	r3, [sp, #15]
    do
    {
      wait_byte = static_cast<uint8_t>(ssp_interface_->Transfer(0xFF));
   15bd4:	9b01      	ldr	r3, [sp, #4]
   15bd6:	685a      	ldr	r2, [r3, #4]
   15bd8:	9b01      	ldr	r3, [sp, #4]
   15bda:	685b      	ldr	r3, [r3, #4]
   15bdc:	681b      	ldr	r3, [r3, #0]
   15bde:	3308      	adds	r3, #8
   15be0:	681b      	ldr	r3, [r3, #0]
   15be2:	21ff      	movs	r1, #255	; 0xff
   15be4:	4610      	mov	r0, r2
   15be6:	4798      	blx	r3
   15be8:	4603      	mov	r3, r0
   15bea:	f88d 300f 	strb.w	r3, [sp, #15]
    } while (wait_byte != 0xFE && (wait_byte & 0xE0) != 0x00);
   15bee:	f89d 300f 	ldrb.w	r3, [sp, #15]
   15bf2:	2bfe      	cmp	r3, #254	; 0xfe
   15bf4:	d006      	beq.n	15c04 <Sd::WaitToReadBlock()+0x48>
   15bf6:	f89d 300f 	ldrb.w	r3, [sp, #15]
   15bfa:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
   15bfe:	2b00      	cmp	r3, #0
   15c00:	d000      	beq.n	15c04 <Sd::WaitToReadBlock()+0x48>
    do
   15c02:	e7e7      	b.n	15bd4 <Sd::WaitToReadBlock()+0x18>

    // DEBUG: Check the value of the wait byte
    if (wait_byte == 0xFE)
   15c04:	f89d 300f 	ldrb.w	r3, [sp, #15]
   15c08:	2bfe      	cmp	r3, #254	; 0xfe
   15c0a:	4623      	mov	r3, r4
   15c0c:	4619      	mov	r1, r3
   15c0e:	4803      	ldr	r0, [pc, #12]	; (15c1c <Sd::WaitToReadBlock()+0x60>)
   15c10:	f7fd f942 	bl	12e98 <__cyg_profile_func_exit>
      LOG_DEBUG("Addr Out of Range?: %s", ToBool(wait_byte & 0x08));
      LOG_DEBUG("Card ECC Failed?: %s", ToBool(wait_byte & 0x04));
      LOG_DEBUG("CC Error?: %s", ToBool(wait_byte & 0x02));
      LOG_DEBUG("Error?: %s", ToBool(wait_byte & 0x01));
    }
  }
   15c14:	bf00      	nop
   15c16:	b004      	add	sp, #16
   15c18:	bd10      	pop	{r4, pc}
   15c1a:	bf00      	nop
   15c1c:	00015bbd 	.word	0x00015bbd

00015c20 <Sd::WaitWhileBusy()>:

  // Waits for the card to be ready to receive a new block after one has
  // been written or erased
  void WaitWhileBusy()
   15c20:	b510      	push	{r4, lr}
   15c22:	b084      	sub	sp, #16
   15c24:	4674      	mov	r4, lr
   15c26:	9001      	str	r0, [sp, #4]
   15c28:	4623      	mov	r3, r4
   15c2a:	4619      	mov	r1, r3
   15c2c:	480f      	ldr	r0, [pc, #60]	; (15c6c <Sd::WaitWhileBusy()+0x4c>)
   15c2e:	f7fd f91f 	bl	12e70 <__cyg_profile_func_enter>
  {
    // Wait for the card to finish programming (i.e. when the
    // bytes return to 0xFF)
    uint8_t busy_byte = 0x00;
   15c32:	2300      	movs	r3, #0
   15c34:	f88d 300f 	strb.w	r3, [sp, #15]
    LOG_DEBUG("Card is busy. Waiting for it to finish...");
    do
    {
      busy_byte = static_cast<uint8_t>(ssp_interface_->Transfer(0xFF));
   15c38:	9b01      	ldr	r3, [sp, #4]
   15c3a:	685a      	ldr	r2, [r3, #4]
   15c3c:	9b01      	ldr	r3, [sp, #4]
   15c3e:	685b      	ldr	r3, [r3, #4]
   15c40:	681b      	ldr	r3, [r3, #0]
   15c42:	3308      	adds	r3, #8
   15c44:	681b      	ldr	r3, [r3, #0]
   15c46:	21ff      	movs	r1, #255	; 0xff
   15c48:	4610      	mov	r0, r2
   15c4a:	4798      	blx	r3
   15c4c:	4603      	mov	r3, r0
   15c4e:	f88d 300f 	strb.w	r3, [sp, #15]
    } while (busy_byte != 0xFF);
   15c52:	f89d 300f 	ldrb.w	r3, [sp, #15]
   15c56:	2bff      	cmp	r3, #255	; 0xff
   15c58:	d000      	beq.n	15c5c <Sd::WaitWhileBusy()+0x3c>
    do
   15c5a:	e7ed      	b.n	15c38 <Sd::WaitWhileBusy()+0x18>
   15c5c:	4623      	mov	r3, r4
   15c5e:	4619      	mov	r1, r3
   15c60:	4802      	ldr	r0, [pc, #8]	; (15c6c <Sd::WaitWhileBusy()+0x4c>)
   15c62:	f7fd f919 	bl	12e98 <__cyg_profile_func_exit>
    LOG_DEBUG("Card finished!");
  }
   15c66:	bf00      	nop
   15c68:	b004      	add	sp, #16
   15c6a:	bd10      	pop	{r4, pc}
   15c6c:	00015c21 	.word	0x00015c21

00015c70 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)>:

  // Read any number of blocks from the SD card
  uint8_t ReadBlock(uint32_t address, uint8_t * array,
   15c70:	b530      	push	{r4, r5, lr}
   15c72:	f5ad 7d13 	sub.w	sp, sp, #588	; 0x24c
   15c76:	4675      	mov	r5, lr
   15c78:	ac05      	add	r4, sp, #20
   15c7a:	6020      	str	r0, [r4, #0]
   15c7c:	a804      	add	r0, sp, #16
   15c7e:	6001      	str	r1, [r0, #0]
   15c80:	a903      	add	r1, sp, #12
   15c82:	600a      	str	r2, [r1, #0]
   15c84:	aa02      	add	r2, sp, #8
   15c86:	6013      	str	r3, [r2, #0]
   15c88:	462b      	mov	r3, r5
   15c8a:	4619      	mov	r1, r3
   15c8c:	487d      	ldr	r0, [pc, #500]	; (15e84 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x214>)
   15c8e:	f7fd f8ef 	bl	12e70 <__cyg_profile_func_enter>
                    uint32_t blocks = 1) override
  {
    LOG_DEBUG("Block %" PRId32 " :: 0x%" PRIX32 " for %" PRId32 " blocks",
              address, address, blocks);
    // Wait for a previous command to finish
    WaitWhileBusy();
   15c92:	ab05      	add	r3, sp, #20
   15c94:	6818      	ldr	r0, [r3, #0]
   15c96:	f7ff ffc3 	bl	15c20 <Sd::WaitWhileBusy()>

    // Create a temporary storage location to store sd command responses
    Sd::CardInfo_t sd;
    bool payload_had_bad_crc = false;
   15c9a:	2300      	movs	r3, #0
   15c9c:	f88d 3247 	strb.w	r3, [sp, #583]	; 0x247

    // Create a temporary place to store blocks of 512 bytes (this is now
    // possible because the constructor enforces block size cross-
    // compatibility)
    uint8_t block_store[512] = { 0 };
   15ca0:	ab06      	add	r3, sp, #24
   15ca2:	4618      	mov	r0, r3
   15ca4:	f44f 7300 	mov.w	r3, #512	; 0x200
   15ca8:	461a      	mov	r2, r3
   15caa:	2100      	movs	r1, #0
   15cac:	f001 f9b6 	bl	1701c <memset>

    // Determine appropriate command to send
    Command read_cmd;
    if (blocks > 1)
   15cb0:	ab02      	add	r3, sp, #8
   15cb2:	681b      	ldr	r3, [r3, #0]
   15cb4:	2b01      	cmp	r3, #1
   15cb6:	d902      	bls.n	15cbe <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x4e>
    {
      read_cmd = Command::kReadMulti;
   15cb8:	2352      	movs	r3, #82	; 0x52
   15cba:	9390      	str	r3, [sp, #576]	; 0x240
   15cbc:	e001      	b.n	15cc2 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x52>
    }
    else
    {
      read_cmd = Command::kReadSingle;
   15cbe:	2351      	movs	r3, #81	; 0x51
   15cc0:	9390      	str	r3, [sp, #576]	; 0x240
    }

    // Send initial read command
    sd.response.length =
        SendCmd(read_cmd, address, sd.response.data.byte, 100, KeepAlive::kYes);
   15cc2:	ab05      	add	r3, sp, #20
   15cc4:	681b      	ldr	r3, [r3, #0]
   15cc6:	681b      	ldr	r3, [r3, #0]
   15cc8:	681c      	ldr	r4, [r3, #0]
   15cca:	ab86      	add	r3, sp, #536	; 0x218
   15ccc:	f103 0108 	add.w	r1, r3, #8
   15cd0:	aa04      	add	r2, sp, #16
   15cd2:	a805      	add	r0, sp, #20
   15cd4:	2301      	movs	r3, #1
   15cd6:	9301      	str	r3, [sp, #4]
   15cd8:	2364      	movs	r3, #100	; 0x64
   15cda:	9300      	str	r3, [sp, #0]
   15cdc:	460b      	mov	r3, r1
   15cde:	6812      	ldr	r2, [r2, #0]
   15ce0:	9990      	ldr	r1, [sp, #576]	; 0x240
   15ce2:	6800      	ldr	r0, [r0, #0]
   15ce4:	47a0      	blx	r4
   15ce6:	4603      	mov	r3, r0
    sd.response.length =
   15ce8:	938a      	str	r3, [sp, #552]	; 0x228
    LOG_DEBUG("Sent Read Cmd");
    LOG_DEBUG("[R1 Response:0x%02X]", sd.response.data.byte[0]);

    // Check if the command was acknowledged properly
    if (sd.response.data.byte[0] == 0x00)
   15cea:	f89d 3220 	ldrb.w	r3, [sp, #544]	; 0x220
   15cee:	2b00      	cmp	r3, #0
   15cf0:	f040 80d8 	bne.w	15ea4 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x234>
    {
      // For every block requested
      uint16_t block_count;
      for (block_count = 0; block_count < blocks; block_count++)
   15cf4:	2300      	movs	r3, #0
   15cf6:	f8ad 323e 	strh.w	r3, [sp, #574]	; 0x23e
   15cfa:	f8bd 323e 	ldrh.w	r3, [sp, #574]	; 0x23e
   15cfe:	aa02      	add	r2, sp, #8
   15d00:	6812      	ldr	r2, [r2, #0]
   15d02:	429a      	cmp	r2, r3
   15d04:	f240 8099 	bls.w	15e3a <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x1ca>
      {
        // Wait for the card to respond with a ready signal
        WaitToReadBlock();
   15d08:	ab05      	add	r3, sp, #20
   15d0a:	6818      	ldr	r0, [r3, #0]
   15d0c:	f7ff ff56 	bl	15bbc <Sd::WaitToReadBlock()>

        // Calculate the block address offset
        uint16_t block_addr_offset =
   15d10:	f8bd 323e 	ldrh.w	r3, [sp, #574]	; 0x23e
   15d14:	025b      	lsls	r3, r3, #9
   15d16:	f8ad 323a 	strh.w	r3, [sp, #570]	; 0x23a
            static_cast<uint16_t>(block_count * kBlockSize);

        // Read all the bytes of a single block
        for (uint16_t byte_count = 0; byte_count < kBlockSize; byte_count++)
   15d1a:	2300      	movs	r3, #0
   15d1c:	f8ad 323c 	strh.w	r3, [sp, #572]	; 0x23c
   15d20:	f8bd 323c 	ldrh.w	r3, [sp, #572]	; 0x23c
   15d24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   15d28:	d22b      	bcs.n	15d82 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x112>
        {
          // Calculate the current storage index
          uint16_t storage_index =
   15d2a:	f8bd 223a 	ldrh.w	r2, [sp, #570]	; 0x23a
   15d2e:	f8bd 323c 	ldrh.w	r3, [sp, #572]	; 0x23c
   15d32:	4413      	add	r3, r2
   15d34:	f8ad 3238 	strh.w	r3, [sp, #568]	; 0x238
              static_cast<uint16_t>(block_addr_offset + byte_count);

          // Transfer a byte to read a block from the SD card
          array[storage_index] =
              static_cast<uint8_t>(ssp_interface_->Transfer(0xFF));
   15d38:	ab05      	add	r3, sp, #20
   15d3a:	681b      	ldr	r3, [r3, #0]
   15d3c:	685a      	ldr	r2, [r3, #4]
   15d3e:	ab05      	add	r3, sp, #20
   15d40:	681b      	ldr	r3, [r3, #0]
   15d42:	685b      	ldr	r3, [r3, #4]
   15d44:	681b      	ldr	r3, [r3, #0]
   15d46:	3308      	adds	r3, #8
   15d48:	681b      	ldr	r3, [r3, #0]
   15d4a:	21ff      	movs	r1, #255	; 0xff
   15d4c:	4610      	mov	r0, r2
   15d4e:	4798      	blx	r3
   15d50:	4603      	mov	r3, r0
   15d52:	4619      	mov	r1, r3
          array[storage_index] =
   15d54:	f8bd 3238 	ldrh.w	r3, [sp, #568]	; 0x238
   15d58:	aa03      	add	r2, sp, #12
   15d5a:	6812      	ldr	r2, [r2, #0]
   15d5c:	4413      	add	r3, r2
   15d5e:	b2ca      	uxtb	r2, r1
   15d60:	701a      	strb	r2, [r3, #0]

          // Copy that byte into our temporary block store
          block_store[byte_count] = array[storage_index];
   15d62:	f8bd 3238 	ldrh.w	r3, [sp, #568]	; 0x238
   15d66:	aa03      	add	r2, sp, #12
   15d68:	6812      	ldr	r2, [r2, #0]
   15d6a:	441a      	add	r2, r3
   15d6c:	f8bd 323c 	ldrh.w	r3, [sp, #572]	; 0x23c
   15d70:	7811      	ldrb	r1, [r2, #0]
   15d72:	aa06      	add	r2, sp, #24
   15d74:	54d1      	strb	r1, [r2, r3]
        for (uint16_t byte_count = 0; byte_count < kBlockSize; byte_count++)
   15d76:	f8bd 323c 	ldrh.w	r3, [sp, #572]	; 0x23c
   15d7a:	3301      	adds	r3, #1
   15d7c:	f8ad 323c 	strh.w	r3, [sp, #572]	; 0x23c
   15d80:	e7ce      	b.n	15d20 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0xb0>
        }

        // Then read the block's 16-bit CRC (i.e. read two bytes)
        uint16_t block_crc =
            static_cast<uint16_t>((ssp_interface_->Transfer(0xFF) << 8) |
   15d82:	ab05      	add	r3, sp, #20
   15d84:	681b      	ldr	r3, [r3, #0]
   15d86:	685a      	ldr	r2, [r3, #4]
   15d88:	ab05      	add	r3, sp, #20
   15d8a:	681b      	ldr	r3, [r3, #0]
   15d8c:	685b      	ldr	r3, [r3, #4]
   15d8e:	681b      	ldr	r3, [r3, #0]
   15d90:	3308      	adds	r3, #8
   15d92:	681b      	ldr	r3, [r3, #0]
   15d94:	21ff      	movs	r1, #255	; 0xff
   15d96:	4610      	mov	r0, r2
   15d98:	4798      	blx	r3
   15d9a:	4603      	mov	r3, r0
   15d9c:	021b      	lsls	r3, r3, #8
   15d9e:	b21c      	sxth	r4, r3
                                  ssp_interface_->Transfer(0xFF));
   15da0:	ab05      	add	r3, sp, #20
   15da2:	681b      	ldr	r3, [r3, #0]
   15da4:	685a      	ldr	r2, [r3, #4]
   15da6:	ab05      	add	r3, sp, #20
   15da8:	681b      	ldr	r3, [r3, #0]
   15daa:	685b      	ldr	r3, [r3, #4]
   15dac:	681b      	ldr	r3, [r3, #0]
   15dae:	3308      	adds	r3, #8
   15db0:	681b      	ldr	r3, [r3, #0]
   15db2:	21ff      	movs	r1, #255	; 0xff
   15db4:	4610      	mov	r0, r2
   15db6:	4798      	blx	r3
   15db8:	4603      	mov	r3, r0
   15dba:	b21b      	sxth	r3, r3
            static_cast<uint16_t>((ssp_interface_->Transfer(0xFF) << 8) |
   15dbc:	4323      	orrs	r3, r4
   15dbe:	b21b      	sxth	r3, r3
                                  ssp_interface_->Transfer(0xFF));
   15dc0:	f8ad 3236 	strh.w	r3, [sp, #566]	; 0x236

        // Run a CRC-16 calculation on the message to determine if the
        // received CRCs match (i.e. checks if the block data is
        // valid).
        uint16_t expected_block_crc = GetCrc16(block_store, 512);
   15dc4:	ab05      	add	r3, sp, #20
   15dc6:	681b      	ldr	r3, [r3, #0]
   15dc8:	681b      	ldr	r3, [r3, #0]
   15dca:	3320      	adds	r3, #32
   15dcc:	681b      	ldr	r3, [r3, #0]
   15dce:	a906      	add	r1, sp, #24
   15dd0:	a805      	add	r0, sp, #20
   15dd2:	f44f 7200 	mov.w	r2, #512	; 0x200
   15dd6:	6800      	ldr	r0, [r0, #0]
   15dd8:	4798      	blx	r3
   15dda:	4603      	mov	r3, r0
   15ddc:	f8ad 3234 	strh.w	r3, [sp, #564]	; 0x234

        LOG_DEBUG("Block #%d @ 0x%" PRIX32 " acquired", block_count, address);
        LOG_DEBUG("Expecting block crc16 '0x%04X'", expected_block_crc);
        LOG_DEBUG("Got '0x%04X'", block_crc);
        if (expected_block_crc != block_crc)
   15de0:	f8bd 2234 	ldrh.w	r2, [sp, #564]	; 0x234
   15de4:	f8bd 3236 	ldrh.w	r3, [sp, #566]	; 0x236
   15de8:	429a      	cmp	r2, r3
   15dea:	d020      	beq.n	15e2e <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x1be>
        {
          // If they do not match, set the bad crc status
          payload_had_bad_crc = true;
   15dec:	2301      	movs	r3, #1
   15dee:	f88d 3247 	strb.w	r3, [sp, #583]	; 0x247
          LOG_ERROR("While Reading Block #%d CRC16:", block_count);
   15df2:	f8bd 323e 	ldrh.w	r3, [sp, #574]	; 0x23e
   15df6:	9300      	str	r3, [sp, #0]
   15df8:	f240 23ed 	movw	r3, #749	; 0x2ed
   15dfc:	4a22      	ldr	r2, [pc, #136]	; (15e88 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x218>)
   15dfe:	4923      	ldr	r1, [pc, #140]	; (15e8c <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x21c>)
   15e00:	4823      	ldr	r0, [pc, #140]	; (15e90 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x220>)
   15e02:	f7fe fa8f 	bl	14324 <printf>
          LOG_ERROR("Expected '0x%04X'", expected_block_crc);
   15e06:	f8bd 3234 	ldrh.w	r3, [sp, #564]	; 0x234
   15e0a:	9300      	str	r3, [sp, #0]
   15e0c:	f240 23ee 	movw	r3, #750	; 0x2ee
   15e10:	4a1d      	ldr	r2, [pc, #116]	; (15e88 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x218>)
   15e12:	4920      	ldr	r1, [pc, #128]	; (15e94 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x224>)
   15e14:	4820      	ldr	r0, [pc, #128]	; (15e98 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x228>)
   15e16:	f7fe fa85 	bl	14324 <printf>
          LOG_ERROR("Got '0x%04X'", block_crc);
   15e1a:	f8bd 3236 	ldrh.w	r3, [sp, #566]	; 0x236
   15e1e:	9300      	str	r3, [sp, #0]
   15e20:	f240 23ef 	movw	r3, #751	; 0x2ef
   15e24:	4a18      	ldr	r2, [pc, #96]	; (15e88 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x218>)
   15e26:	491d      	ldr	r1, [pc, #116]	; (15e9c <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x22c>)
   15e28:	481d      	ldr	r0, [pc, #116]	; (15ea0 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x230>)
   15e2a:	f7fe fa7b 	bl	14324 <printf>
      for (block_count = 0; block_count < blocks; block_count++)
   15e2e:	f8bd 323e 	ldrh.w	r3, [sp, #574]	; 0x23e
   15e32:	3301      	adds	r3, #1
   15e34:	f8ad 323e 	strh.w	r3, [sp, #574]	; 0x23e
   15e38:	e75f      	b.n	15cfa <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x8a>
        }
      }

      // After reading multiple blocks, send the stop command to terminate the
      // transaction (i.e. no keep-alive)
      if (blocks > 1)
   15e3a:	ab02      	add	r3, sp, #8
   15e3c:	681b      	ldr	r3, [r3, #0]
   15e3e:	2b01      	cmp	r3, #1
   15e40:	d913      	bls.n	15e6a <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x1fa>
      {
        sd.response.length =
            SendCmd(Command::kStopTrans, 0xFFFFFFFF, sd.response.data.byte, 100,
                    KeepAlive::kNo);
   15e42:	ab05      	add	r3, sp, #20
   15e44:	681b      	ldr	r3, [r3, #0]
   15e46:	681b      	ldr	r3, [r3, #0]
   15e48:	681c      	ldr	r4, [r3, #0]
            SendCmd(Command::kStopTrans, 0xFFFFFFFF, sd.response.data.byte, 100,
   15e4a:	ab86      	add	r3, sp, #536	; 0x218
   15e4c:	f103 0208 	add.w	r2, r3, #8
   15e50:	a805      	add	r0, sp, #20
   15e52:	2300      	movs	r3, #0
   15e54:	9301      	str	r3, [sp, #4]
   15e56:	2364      	movs	r3, #100	; 0x64
   15e58:	9300      	str	r3, [sp, #0]
   15e5a:	4613      	mov	r3, r2
   15e5c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   15e60:	214c      	movs	r1, #76	; 0x4c
   15e62:	6800      	ldr	r0, [r0, #0]
   15e64:	47a0      	blx	r4
   15e66:	4603      	mov	r3, r0
        sd.response.length =
   15e68:	938a      	str	r3, [sp, #552]	; 0x228
      LOG_DEBUG("Response Byte");
      LOG_DEBUG("0x%02X", sd.response.data.byte[0]);

      // If there was a bad crc from the payload, manually set the
      // CRC error flag in the command response byte
      if (payload_had_bad_crc)
   15e6a:	f89d 3247 	ldrb.w	r3, [sp, #583]	; 0x247
   15e6e:	2b00      	cmp	r3, #0
   15e70:	f000 80c0 	beq.w	15ff4 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x384>
      {
        sd.response.data.byte[0] |= 0x08;
   15e74:	f89d 3220 	ldrb.w	r3, [sp, #544]	; 0x220
   15e78:	f043 0308 	orr.w	r3, r3, #8
   15e7c:	b2db      	uxtb	r3, r3
   15e7e:	f88d 3220 	strb.w	r3, [sp, #544]	; 0x220
   15e82:	e0b7      	b.n	15ff4 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x384>
   15e84:	00015c71 	.word	0x00015c71
   15e88:	00018fe8 	.word	0x00018fe8
   15e8c:	00018cec 	.word	0x00018cec
   15e90:	00018480 	.word	0x00018480
   15e94:	00018cf4 	.word	0x00018cf4
   15e98:	000184d8 	.word	0x000184d8
   15e9c:	00018cfc 	.word	0x00018cfc
   15ea0:	00018524 	.word	0x00018524
      }
    }
    else
    {
      LOG_ERROR("Read Cmd was not acknowledged properly!");
   15ea4:	f240 3309 	movw	r3, #777	; 0x309
   15ea8:	4a65      	ldr	r2, [pc, #404]	; (16040 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x3d0>)
   15eaa:	4966      	ldr	r1, [pc, #408]	; (16044 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x3d4>)
   15eac:	4866      	ldr	r0, [pc, #408]	; (16048 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x3d8>)
   15eae:	f7fe fa39 	bl	14324 <printf>
      LOG_ERROR("Parameter Err: %s", ToBool(sd.response.data.byte[0] & 0x40));
   15eb2:	f89d 3220 	ldrb.w	r3, [sp, #544]	; 0x220
   15eb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
   15eba:	2b00      	cmp	r3, #0
   15ebc:	bf14      	ite	ne
   15ebe:	2301      	movne	r3, #1
   15ec0:	2300      	moveq	r3, #0
   15ec2:	b2da      	uxtb	r2, r3
   15ec4:	ab05      	add	r3, sp, #20
   15ec6:	4611      	mov	r1, r2
   15ec8:	6818      	ldr	r0, [r3, #0]
   15eca:	f7ff fe55 	bl	15b78 <Sd::ToBool(bool)>
   15ece:	4603      	mov	r3, r0
   15ed0:	9300      	str	r3, [sp, #0]
   15ed2:	f240 330a 	movw	r3, #778	; 0x30a
   15ed6:	4a5a      	ldr	r2, [pc, #360]	; (16040 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x3d0>)
   15ed8:	495c      	ldr	r1, [pc, #368]	; (1604c <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x3dc>)
   15eda:	485d      	ldr	r0, [pc, #372]	; (16050 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x3e0>)
   15edc:	f7fe fa22 	bl	14324 <printf>
      LOG_ERROR("Addr Err: %s", ToBool(sd.response.data.byte[0] & 0x20));
   15ee0:	f89d 3220 	ldrb.w	r3, [sp, #544]	; 0x220
   15ee4:	f003 0320 	and.w	r3, r3, #32
   15ee8:	2b00      	cmp	r3, #0
   15eea:	bf14      	ite	ne
   15eec:	2301      	movne	r3, #1
   15eee:	2300      	moveq	r3, #0
   15ef0:	b2da      	uxtb	r2, r3
   15ef2:	ab05      	add	r3, sp, #20
   15ef4:	4611      	mov	r1, r2
   15ef6:	6818      	ldr	r0, [r3, #0]
   15ef8:	f7ff fe3e 	bl	15b78 <Sd::ToBool(bool)>
   15efc:	4603      	mov	r3, r0
   15efe:	9300      	str	r3, [sp, #0]
   15f00:	f240 330b 	movw	r3, #779	; 0x30b
   15f04:	4a4e      	ldr	r2, [pc, #312]	; (16040 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x3d0>)
   15f06:	4953      	ldr	r1, [pc, #332]	; (16054 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x3e4>)
   15f08:	4853      	ldr	r0, [pc, #332]	; (16058 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x3e8>)
   15f0a:	f7fe fa0b 	bl	14324 <printf>
      LOG_ERROR("Erase Seq Err: %s", ToBool(sd.response.data.byte[0] & 0x10));
   15f0e:	f89d 3220 	ldrb.w	r3, [sp, #544]	; 0x220
   15f12:	f003 0310 	and.w	r3, r3, #16
   15f16:	2b00      	cmp	r3, #0
   15f18:	bf14      	ite	ne
   15f1a:	2301      	movne	r3, #1
   15f1c:	2300      	moveq	r3, #0
   15f1e:	b2da      	uxtb	r2, r3
   15f20:	ab05      	add	r3, sp, #20
   15f22:	4611      	mov	r1, r2
   15f24:	6818      	ldr	r0, [r3, #0]
   15f26:	f7ff fe27 	bl	15b78 <Sd::ToBool(bool)>
   15f2a:	4603      	mov	r3, r0
   15f2c:	9300      	str	r3, [sp, #0]
   15f2e:	f44f 7343 	mov.w	r3, #780	; 0x30c
   15f32:	4a43      	ldr	r2, [pc, #268]	; (16040 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x3d0>)
   15f34:	4949      	ldr	r1, [pc, #292]	; (1605c <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x3ec>)
   15f36:	484a      	ldr	r0, [pc, #296]	; (16060 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x3f0>)
   15f38:	f7fe f9f4 	bl	14324 <printf>
      LOG_ERROR("Com CRC Err: %s", ToBool(sd.response.data.byte[0] & 0x08));
   15f3c:	f89d 3220 	ldrb.w	r3, [sp, #544]	; 0x220
   15f40:	f003 0308 	and.w	r3, r3, #8
   15f44:	2b00      	cmp	r3, #0
   15f46:	bf14      	ite	ne
   15f48:	2301      	movne	r3, #1
   15f4a:	2300      	moveq	r3, #0
   15f4c:	b2da      	uxtb	r2, r3
   15f4e:	ab05      	add	r3, sp, #20
   15f50:	4611      	mov	r1, r2
   15f52:	6818      	ldr	r0, [r3, #0]
   15f54:	f7ff fe10 	bl	15b78 <Sd::ToBool(bool)>
   15f58:	4603      	mov	r3, r0
   15f5a:	9300      	str	r3, [sp, #0]
   15f5c:	f240 330d 	movw	r3, #781	; 0x30d
   15f60:	4a37      	ldr	r2, [pc, #220]	; (16040 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x3d0>)
   15f62:	4940      	ldr	r1, [pc, #256]	; (16064 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x3f4>)
   15f64:	4840      	ldr	r0, [pc, #256]	; (16068 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x3f8>)
   15f66:	f7fe f9dd 	bl	14324 <printf>
      LOG_ERROR("Illegal Cmd Err: %s", ToBool(sd.response.data.byte[0] & 0x04));
   15f6a:	f89d 3220 	ldrb.w	r3, [sp, #544]	; 0x220
   15f6e:	f003 0304 	and.w	r3, r3, #4
   15f72:	2b00      	cmp	r3, #0
   15f74:	bf14      	ite	ne
   15f76:	2301      	movne	r3, #1
   15f78:	2300      	moveq	r3, #0
   15f7a:	b2da      	uxtb	r2, r3
   15f7c:	ab05      	add	r3, sp, #20
   15f7e:	4611      	mov	r1, r2
   15f80:	6818      	ldr	r0, [r3, #0]
   15f82:	f7ff fdf9 	bl	15b78 <Sd::ToBool(bool)>
   15f86:	4603      	mov	r3, r0
   15f88:	9300      	str	r3, [sp, #0]
   15f8a:	f240 330e 	movw	r3, #782	; 0x30e
   15f8e:	4a2c      	ldr	r2, [pc, #176]	; (16040 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x3d0>)
   15f90:	4936      	ldr	r1, [pc, #216]	; (1606c <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x3fc>)
   15f92:	4837      	ldr	r0, [pc, #220]	; (16070 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x400>)
   15f94:	f7fe f9c6 	bl	14324 <printf>
      LOG_ERROR("Erase Reset: %s", ToBool(sd.response.data.byte[0] & 0x02));
   15f98:	f89d 3220 	ldrb.w	r3, [sp, #544]	; 0x220
   15f9c:	f003 0302 	and.w	r3, r3, #2
   15fa0:	2b00      	cmp	r3, #0
   15fa2:	bf14      	ite	ne
   15fa4:	2301      	movne	r3, #1
   15fa6:	2300      	moveq	r3, #0
   15fa8:	b2da      	uxtb	r2, r3
   15faa:	ab05      	add	r3, sp, #20
   15fac:	4611      	mov	r1, r2
   15fae:	6818      	ldr	r0, [r3, #0]
   15fb0:	f7ff fde2 	bl	15b78 <Sd::ToBool(bool)>
   15fb4:	4603      	mov	r3, r0
   15fb6:	9300      	str	r3, [sp, #0]
   15fb8:	f240 330f 	movw	r3, #783	; 0x30f
   15fbc:	4a20      	ldr	r2, [pc, #128]	; (16040 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x3d0>)
   15fbe:	492d      	ldr	r1, [pc, #180]	; (16074 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x404>)
   15fc0:	482d      	ldr	r0, [pc, #180]	; (16078 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x408>)
   15fc2:	f7fe f9af 	bl	14324 <printf>
      LOG_ERROR("In Idle: %s", ToBool(sd.response.data.byte[0] & 0x01));
   15fc6:	f89d 3220 	ldrb.w	r3, [sp, #544]	; 0x220
   15fca:	f003 0301 	and.w	r3, r3, #1
   15fce:	2b00      	cmp	r3, #0
   15fd0:	bf14      	ite	ne
   15fd2:	2301      	movne	r3, #1
   15fd4:	2300      	moveq	r3, #0
   15fd6:	b2da      	uxtb	r2, r3
   15fd8:	ab05      	add	r3, sp, #20
   15fda:	4611      	mov	r1, r2
   15fdc:	6818      	ldr	r0, [r3, #0]
   15fde:	f7ff fdcb 	bl	15b78 <Sd::ToBool(bool)>
   15fe2:	4603      	mov	r3, r0
   15fe4:	9300      	str	r3, [sp, #0]
   15fe6:	f44f 7344 	mov.w	r3, #784	; 0x310
   15fea:	4a15      	ldr	r2, [pc, #84]	; (16040 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x3d0>)
   15fec:	4923      	ldr	r1, [pc, #140]	; (1607c <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x40c>)
   15fee:	4824      	ldr	r0, [pc, #144]	; (16080 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x410>)
   15ff0:	f7fe f998 	bl	14324 <printf>
    LOG_DEBUG("Now waiting for SD Card to exit Idle Mode...");
    do
    {
      // Query the status register
      sd.response.length = SendCmd(Command::kGetStatus, 32,
                                   sd.response.data.byte, 0, KeepAlive::kNo);
   15ff4:	ab05      	add	r3, sp, #20
   15ff6:	681b      	ldr	r3, [r3, #0]
   15ff8:	681b      	ldr	r3, [r3, #0]
   15ffa:	681c      	ldr	r4, [r3, #0]
      sd.response.length = SendCmd(Command::kGetStatus, 32,
   15ffc:	ab86      	add	r3, sp, #536	; 0x218
   15ffe:	f103 0208 	add.w	r2, r3, #8
   16002:	a805      	add	r0, sp, #20
   16004:	2300      	movs	r3, #0
   16006:	9301      	str	r3, [sp, #4]
   16008:	2300      	movs	r3, #0
   1600a:	9300      	str	r3, [sp, #0]
   1600c:	4613      	mov	r3, r2
   1600e:	2220      	movs	r2, #32
   16010:	210d      	movs	r1, #13
   16012:	6800      	ldr	r0, [r0, #0]
   16014:	47a0      	blx	r4
   16016:	4603      	mov	r3, r0
   16018:	938a      	str	r3, [sp, #552]	; 0x228
    } while (sd.response.data.byte[0] & 0x01);
   1601a:	f89d 3220 	ldrb.w	r3, [sp, #544]	; 0x220
   1601e:	f003 0301 	and.w	r3, r3, #1
   16022:	2b00      	cmp	r3, #0
   16024:	d000      	beq.n	16028 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x3b8>
    do
   16026:	e7e5      	b.n	15ff4 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x384>
    LOG_DEBUG("SD Card is out of Idle Mode!");

    // Return the status
    LOG_DEBUG("Read Complete! [R1 Response: 0x%02X]", sd.response.data.byte[0]);
    return sd.response.data.byte[0];
   16028:	f89d 4220 	ldrb.w	r4, [sp, #544]	; 0x220
   1602c:	462b      	mov	r3, r5
   1602e:	4619      	mov	r1, r3
   16030:	4814      	ldr	r0, [pc, #80]	; (16084 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x414>)
   16032:	f7fc ff31 	bl	12e98 <__cyg_profile_func_exit>
   16036:	4623      	mov	r3, r4
  }
   16038:	4618      	mov	r0, r3
   1603a:	f50d 7d13 	add.w	sp, sp, #588	; 0x24c
   1603e:	bd30      	pop	{r4, r5, pc}
   16040:	00018fe8 	.word	0x00018fe8
   16044:	00018d04 	.word	0x00018d04
   16048:	0001856c 	.word	0x0001856c
   1604c:	00018d0c 	.word	0x00018d0c
   16050:	000185d0 	.word	0x000185d0
   16054:	00018d14 	.word	0x00018d14
   16058:	0001861c 	.word	0x0001861c
   1605c:	00018d1c 	.word	0x00018d1c
   16060:	00018664 	.word	0x00018664
   16064:	00018d24 	.word	0x00018d24
   16068:	000186b0 	.word	0x000186b0
   1606c:	00018d2c 	.word	0x00018d2c
   16070:	000186fc 	.word	0x000186fc
   16074:	00018d34 	.word	0x00018d34
   16078:	0001874c 	.word	0x0001874c
   1607c:	00018d3c 	.word	0x00018d3c
   16080:	00018798 	.word	0x00018798
   16084:	00015c71 	.word	0x00015c71

00016088 <Sd::WriteBlock(unsigned long, unsigned char const*, unsigned long)>:

  // Writes any number of 512-byte blocks to the SD Card
  uint8_t WriteBlock(uint32_t address, const uint8_t * array,
   16088:	b530      	push	{r4, r5, lr}
   1608a:	b095      	sub	sp, #84	; 0x54
   1608c:	4675      	mov	r5, lr
   1608e:	9005      	str	r0, [sp, #20]
   16090:	9104      	str	r1, [sp, #16]
   16092:	9203      	str	r2, [sp, #12]
   16094:	9302      	str	r3, [sp, #8]
   16096:	462b      	mov	r3, r5
   16098:	4619      	mov	r1, r3
   1609a:	4865      	ldr	r0, [pc, #404]	; (16230 <Sd::WriteBlock(unsigned long, unsigned char const*, unsigned long)+0x1a8>)
   1609c:	f7fc fee8 	bl	12e70 <__cyg_profile_func_enter>
                     uint32_t blocks = 1) override
  {
    // Wait for a previous command to finish
    WaitWhileBusy();
   160a0:	9805      	ldr	r0, [sp, #20]
   160a2:	f7ff fdbd 	bl	15c20 <Sd::WaitWhileBusy()>
    Sd::CardInfo_t sd;

    // Determine appropriate command and start token to send
    Command write_cmd;
    uint8_t write_start_tkn;
    if (blocks > 1)
   160a6:	9b02      	ldr	r3, [sp, #8]
   160a8:	2b01      	cmp	r3, #1
   160aa:	d905      	bls.n	160b8 <Sd::WriteBlock(unsigned long, unsigned char const*, unsigned long)+0x30>
    {
      write_cmd       = Command::kWriteMulti;
   160ac:	2359      	movs	r3, #89	; 0x59
   160ae:	9313      	str	r3, [sp, #76]	; 0x4c
      write_start_tkn = 0xFC;
   160b0:	23fc      	movs	r3, #252	; 0xfc
   160b2:	f88d 304b 	strb.w	r3, [sp, #75]	; 0x4b
   160b6:	e004      	b.n	160c2 <Sd::WriteBlock(unsigned long, unsigned char const*, unsigned long)+0x3a>
    }
    else
    {
      write_cmd       = Command::kWriteSingle;
   160b8:	2358      	movs	r3, #88	; 0x58
   160ba:	9313      	str	r3, [sp, #76]	; 0x4c
      write_start_tkn = 0xFE;
   160bc:	23fe      	movs	r3, #254	; 0xfe
   160be:	f88d 304b 	strb.w	r3, [sp, #75]	; 0x4b
    }

    // Send initial write command
    sd.response.length = SendCmd(write_cmd, address, sd.response.data.byte, 100,
                                 KeepAlive::kYes);
   160c2:	9b05      	ldr	r3, [sp, #20]
   160c4:	681b      	ldr	r3, [r3, #0]
   160c6:	681c      	ldr	r4, [r3, #0]
    sd.response.length = SendCmd(write_cmd, address, sd.response.data.byte, 100,
   160c8:	ab06      	add	r3, sp, #24
   160ca:	f103 0208 	add.w	r2, r3, #8
   160ce:	2301      	movs	r3, #1
   160d0:	9301      	str	r3, [sp, #4]
   160d2:	2364      	movs	r3, #100	; 0x64
   160d4:	9300      	str	r3, [sp, #0]
   160d6:	4613      	mov	r3, r2
   160d8:	9a04      	ldr	r2, [sp, #16]
   160da:	9913      	ldr	r1, [sp, #76]	; 0x4c
   160dc:	9805      	ldr	r0, [sp, #20]
   160de:	47a0      	blx	r4
   160e0:	4603      	mov	r3, r0
   160e2:	930a      	str	r3, [sp, #40]	; 0x28
    LOG_DEBUG("Sent Write Cmd");
    LOG_DEBUG("[R1 Response:0x%02X]", sd.response.data.byte[0]);

    // Check if the response was acknowledged properly
    if (sd.response.data.byte[0] == 0x00)
   160e4:	f89d 3020 	ldrb.w	r3, [sp, #32]
   160e8:	2b00      	cmp	r3, #0
   160ea:	f040 8096 	bne.w	1621a <Sd::WriteBlock(unsigned long, unsigned char const*, unsigned long)+0x192>
    {
      // If no errors, proceed write given block(s) to SD Card
      // For each given block
      for (uint16_t current_block_num = 0; current_block_num < blocks;
   160ee:	2300      	movs	r3, #0
   160f0:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
   160f4:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
   160f8:	9a02      	ldr	r2, [sp, #8]
   160fa:	429a      	cmp	r2, r3
   160fc:	d97a      	bls.n	161f4 <Sd::WriteBlock(unsigned long, unsigned char const*, unsigned long)+0x16c>
           current_block_num++)
      {
        // Calculate array offset
        uint64_t arr_offset = current_block_num * kBlockSize;
   160fe:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
   16102:	025b      	lsls	r3, r3, #9
   16104:	ea4f 74e3 	mov.w	r4, r3, asr #31
   16108:	e9cd 340e 	strd	r3, r4, [sp, #56]	; 0x38

        // Send the start token for the current block
        ssp_interface_->Transfer(write_start_tkn);
   1610c:	9b05      	ldr	r3, [sp, #20]
   1610e:	685a      	ldr	r2, [r3, #4]
   16110:	9b05      	ldr	r3, [sp, #20]
   16112:	685b      	ldr	r3, [r3, #4]
   16114:	681b      	ldr	r3, [r3, #0]
   16116:	3308      	adds	r3, #8
   16118:	681b      	ldr	r3, [r3, #0]
   1611a:	f89d 104b 	ldrb.w	r1, [sp, #75]	; 0x4b
   1611e:	b289      	uxth	r1, r1
   16120:	4610      	mov	r0, r2
   16122:	4798      	blx	r3

        // Write all 512-bytes of the given block
        LOG_DEBUG("Writing block #%d", current_block_num);
        for (uint16_t current_byte = 0; current_byte < kBlockSize;
   16124:	2300      	movs	r3, #0
   16126:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
   1612a:	f8bd 3046 	ldrh.w	r3, [sp, #70]	; 0x46
   1612e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   16132:	d216      	bcs.n	16162 <Sd::WriteBlock(unsigned long, unsigned char const*, unsigned long)+0xda>
             current_byte++)
        {
          ssp_interface_->Transfer(array[arr_offset + current_byte]);
   16134:	9b05      	ldr	r3, [sp, #20]
   16136:	6858      	ldr	r0, [r3, #4]
   16138:	9b05      	ldr	r3, [sp, #20]
   1613a:	685b      	ldr	r3, [r3, #4]
   1613c:	681b      	ldr	r3, [r3, #0]
   1613e:	3308      	adds	r3, #8
   16140:	681b      	ldr	r3, [r3, #0]
   16142:	990e      	ldr	r1, [sp, #56]	; 0x38
   16144:	f8bd 2046 	ldrh.w	r2, [sp, #70]	; 0x46
   16148:	440a      	add	r2, r1
   1614a:	9903      	ldr	r1, [sp, #12]
   1614c:	440a      	add	r2, r1
   1614e:	7812      	ldrb	r2, [r2, #0]
   16150:	b292      	uxth	r2, r2
   16152:	4611      	mov	r1, r2
   16154:	4798      	blx	r3
        for (uint16_t current_byte = 0; current_byte < kBlockSize;
   16156:	f8bd 3046 	ldrh.w	r3, [sp, #70]	; 0x46
   1615a:	3301      	adds	r3, #1
   1615c:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
   16160:	e7e3      	b.n	1612a <Sd::WriteBlock(unsigned long, unsigned char const*, unsigned long)+0xa2>
        }

        // Read the data response token after writing the block
        uint8_t data_response_tkn =
            static_cast<uint8_t>(ssp_interface_->Transfer(0xFF));
   16162:	9b05      	ldr	r3, [sp, #20]
   16164:	685a      	ldr	r2, [r3, #4]
   16166:	9b05      	ldr	r3, [sp, #20]
   16168:	685b      	ldr	r3, [r3, #4]
   1616a:	681b      	ldr	r3, [r3, #0]
   1616c:	3308      	adds	r3, #8
   1616e:	681b      	ldr	r3, [r3, #0]
   16170:	21ff      	movs	r1, #255	; 0xff
   16172:	4610      	mov	r0, r2
   16174:	4798      	blx	r3
   16176:	4603      	mov	r3, r0
   16178:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
                  ToBool(data_response_tkn & 0x0B));
        LOG_DEBUG("Data Rejected (write err)?: %s",
                  ToBool(data_response_tkn & 0x0D));

        // If writing multiple blocks and the previous block was rejected
        if (blocks > 1 && !(data_response_tkn & 0x05))
   1617c:	9b02      	ldr	r3, [sp, #8]
   1617e:	2b01      	cmp	r3, #1
   16180:	d92f      	bls.n	161e2 <Sd::WriteBlock(unsigned long, unsigned char const*, unsigned long)+0x15a>
   16182:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
   16186:	f003 0305 	and.w	r3, r3, #5
   1618a:	2b00      	cmp	r3, #0
   1618c:	d129      	bne.n	161e2 <Sd::WriteBlock(unsigned long, unsigned char const*, unsigned long)+0x15a>
        {
          // Send an immediate stop (CMD12)
          sd.response.length =
              SendCmd(Command::kStopTrans, 0xFFFFFFFF, sd.response.data.byte,
                      100, KeepAlive::kYes);
   1618e:	9b05      	ldr	r3, [sp, #20]
   16190:	681b      	ldr	r3, [r3, #0]
   16192:	681c      	ldr	r4, [r3, #0]
              SendCmd(Command::kStopTrans, 0xFFFFFFFF, sd.response.data.byte,
   16194:	ab06      	add	r3, sp, #24
   16196:	f103 0208 	add.w	r2, r3, #8
   1619a:	2301      	movs	r3, #1
   1619c:	9301      	str	r3, [sp, #4]
   1619e:	2364      	movs	r3, #100	; 0x64
   161a0:	9300      	str	r3, [sp, #0]
   161a2:	4613      	mov	r3, r2
   161a4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   161a8:	214c      	movs	r1, #76	; 0x4c
   161aa:	9805      	ldr	r0, [sp, #20]
   161ac:	47a0      	blx	r4
   161ae:	4603      	mov	r3, r0
          sd.response.length =
   161b0:	930a      	str	r3, [sp, #40]	; 0x28
          LOG_DEBUG("Stopped Transmission due to rejection...");
          LOG_DEBUG("[R1 Response: 0x%02X]", sd.response.data.byte[0]);

          // In the case of a write error, ask for the reason why
          if (data_response_tkn & 0x0D)
   161b2:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
   161b6:	f003 030d 	and.w	r3, r3, #13
   161ba:	2b00      	cmp	r3, #0
   161bc:	d011      	beq.n	161e2 <Sd::WriteBlock(unsigned long, unsigned char const*, unsigned long)+0x15a>
          {
            sd.response.length =
                SendCmd(Command::kGetStatus, 0xFFFFFFFF, sd.response.data.byte,
                        100, KeepAlive::kYes);
   161be:	9b05      	ldr	r3, [sp, #20]
   161c0:	681b      	ldr	r3, [r3, #0]
   161c2:	681c      	ldr	r4, [r3, #0]
                SendCmd(Command::kGetStatus, 0xFFFFFFFF, sd.response.data.byte,
   161c4:	ab06      	add	r3, sp, #24
   161c6:	f103 0208 	add.w	r2, r3, #8
   161ca:	2301      	movs	r3, #1
   161cc:	9301      	str	r3, [sp, #4]
   161ce:	2364      	movs	r3, #100	; 0x64
   161d0:	9300      	str	r3, [sp, #0]
   161d2:	4613      	mov	r3, r2
   161d4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   161d8:	210d      	movs	r1, #13
   161da:	9805      	ldr	r0, [sp, #20]
   161dc:	47a0      	blx	r4
   161de:	4603      	mov	r3, r0
            sd.response.length =
   161e0:	930a      	str	r3, [sp, #40]	; 0x28
                "Checking Status Register to see cause of Write Error...");
            LOG_DEBUG("[R2 Response: 0x%04" PRIX32 "]",
                      sd.response.data.dWord.lo);
          }
        }
        WaitWhileBusy();
   161e2:	9805      	ldr	r0, [sp, #20]
   161e4:	f7ff fd1c 	bl	15c20 <Sd::WaitWhileBusy()>
      for (uint16_t current_block_num = 0; current_block_num < blocks;
   161e8:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
   161ec:	3301      	adds	r3, #1
   161ee:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
   161f2:	e77f      	b.n	160f4 <Sd::WriteBlock(unsigned long, unsigned char const*, unsigned long)+0x6c>
      }

      if (blocks > 1)
   161f4:	9b02      	ldr	r3, [sp, #8]
   161f6:	2b01      	cmp	r3, #1
   161f8:	d90f      	bls.n	1621a <Sd::WriteBlock(unsigned long, unsigned char const*, unsigned long)+0x192>
      {
        constexpr uint8_t kStopToken = 0xFD;
   161fa:	23fd      	movs	r3, #253	; 0xfd
   161fc:	f88d 3036 	strb.w	r3, [sp, #54]	; 0x36
        ssp_interface_->Transfer(kStopToken);
   16200:	9b05      	ldr	r3, [sp, #20]
   16202:	685a      	ldr	r2, [r3, #4]
   16204:	9b05      	ldr	r3, [sp, #20]
   16206:	685b      	ldr	r3, [r3, #4]
   16208:	681b      	ldr	r3, [r3, #0]
   1620a:	3308      	adds	r3, #8
   1620c:	681b      	ldr	r3, [r3, #0]
   1620e:	21fd      	movs	r1, #253	; 0xfd
   16210:	4610      	mov	r0, r2
   16212:	4798      	blx	r3

        // Wait for the card's programming to complete before
        // reselecting it (i.e. to prevent corruption)
        WaitWhileBusy();
   16214:	9805      	ldr	r0, [sp, #20]
   16216:	f7ff fd03 	bl	15c20 <Sd::WaitWhileBusy()>
      LOG_DEBUG("Illegal Cmd Err: %s", ToBool(sd.response.data.byte[0] & 0x04));
      LOG_DEBUG("Erase Reset: %s", ToBool(sd.response.data.byte[0] & 0x02));
      LOG_DEBUG("In Idle: %s", ToBool(sd.response.data.byte[0] & 0x01));
    }

    return sd.response.data.byte[0];
   1621a:	f89d 4020 	ldrb.w	r4, [sp, #32]
   1621e:	462b      	mov	r3, r5
   16220:	4619      	mov	r1, r3
   16222:	4803      	ldr	r0, [pc, #12]	; (16230 <Sd::WriteBlock(unsigned long, unsigned char const*, unsigned long)+0x1a8>)
   16224:	f7fc fe38 	bl	12e98 <__cyg_profile_func_exit>
   16228:	4623      	mov	r3, r4
  }
   1622a:	4618      	mov	r0, r3
   1622c:	b015      	add	sp, #84	; 0x54
   1622e:	bd30      	pop	{r4, r5, pc}
   16230:	00016089 	.word	0x00016089

00016234 <Sd::DeleteBlock(unsigned long, unsigned long)>:

  // Deletes any number of blocks (inclusively) within a range of address.
  uint8_t DeleteBlock(uint32_t start, uint32_t end) override
   16234:	b530      	push	{r4, r5, lr}
   16236:	b08f      	sub	sp, #60	; 0x3c
   16238:	4675      	mov	r5, lr
   1623a:	9005      	str	r0, [sp, #20]
   1623c:	9104      	str	r1, [sp, #16]
   1623e:	9203      	str	r2, [sp, #12]
   16240:	462b      	mov	r3, r5
   16242:	4619      	mov	r1, r3
   16244:	483d      	ldr	r0, [pc, #244]	; (1633c <Sd::DeleteBlock(unsigned long, unsigned long)+0x108>)
   16246:	f7fc fe13 	bl	12e70 <__cyg_profile_func_enter>
  {
    // Wait for a previous command to finish
    WaitWhileBusy();
   1624a:	9805      	ldr	r0, [sp, #20]
   1624c:	f7ff fce8 	bl	15c20 <Sd::WaitWhileBusy()>

    // Create a temporary storage location to store sd command responses
    Sd::CardInfo_t sd;
    bool delete_failed = false;
   16250:	2300      	movs	r3, #0
   16252:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37

    // Set the delete start address
    LOG_DEBUG("Setting Delete Start Address...");
    sd.response.length = SendCmd(Command::kDelFrom, start,
                                 sd.response.data.byte, 100, KeepAlive::kYes);
   16256:	9b05      	ldr	r3, [sp, #20]
   16258:	681b      	ldr	r3, [r3, #0]
   1625a:	681c      	ldr	r4, [r3, #0]
    sd.response.length = SendCmd(Command::kDelFrom, start,
   1625c:	ab06      	add	r3, sp, #24
   1625e:	f103 0208 	add.w	r2, r3, #8
   16262:	2301      	movs	r3, #1
   16264:	9301      	str	r3, [sp, #4]
   16266:	2364      	movs	r3, #100	; 0x64
   16268:	9300      	str	r3, [sp, #0]
   1626a:	4613      	mov	r3, r2
   1626c:	9a04      	ldr	r2, [sp, #16]
   1626e:	2160      	movs	r1, #96	; 0x60
   16270:	9805      	ldr	r0, [sp, #20]
   16272:	47a0      	blx	r4
   16274:	4603      	mov	r3, r0
   16276:	930a      	str	r3, [sp, #40]	; 0x28

    // Wait while the writing the start address
    WaitWhileBusy();
   16278:	9805      	ldr	r0, [sp, #20]
   1627a:	f7ff fcd1 	bl	15c20 <Sd::WaitWhileBusy()>

    // Force return if an error occurred
    if (sd.response.data.byte[0] != 0x00)
   1627e:	f89d 3020 	ldrb.w	r3, [sp, #32]
   16282:	2b00      	cmp	r3, #0
   16284:	d009      	beq.n	1629a <Sd::DeleteBlock(unsigned long, unsigned long)+0x66>
    {
      LOG_ERROR("Failed to set Start Address!");
   16286:	f44f 736a 	mov.w	r3, #936	; 0x3a8
   1628a:	4a2d      	ldr	r2, [pc, #180]	; (16340 <Sd::DeleteBlock(unsigned long, unsigned long)+0x10c>)
   1628c:	492d      	ldr	r1, [pc, #180]	; (16344 <Sd::DeleteBlock(unsigned long, unsigned long)+0x110>)
   1628e:	482e      	ldr	r0, [pc, #184]	; (16348 <Sd::DeleteBlock(unsigned long, unsigned long)+0x114>)
   16290:	f7fe f848 	bl	14324 <printf>
      delete_failed = true;
   16294:	2301      	movs	r3, #1
   16296:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
    }

    // Set the delete end address
    if (!delete_failed)
   1629a:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
   1629e:	f083 0301 	eor.w	r3, r3, #1
   162a2:	b2db      	uxtb	r3, r3
   162a4:	2b00      	cmp	r3, #0
   162a6:	d010      	beq.n	162ca <Sd::DeleteBlock(unsigned long, unsigned long)+0x96>
    {
      LOG_DEBUG("Setting Delete End Address...");
      sd.response.length = SendCmd(Command::kDelTo, end, sd.response.data.byte,
                                   100, KeepAlive::kYes);
   162a8:	9b05      	ldr	r3, [sp, #20]
   162aa:	681b      	ldr	r3, [r3, #0]
   162ac:	681c      	ldr	r4, [r3, #0]
      sd.response.length = SendCmd(Command::kDelTo, end, sd.response.data.byte,
   162ae:	ab06      	add	r3, sp, #24
   162b0:	f103 0208 	add.w	r2, r3, #8
   162b4:	2301      	movs	r3, #1
   162b6:	9301      	str	r3, [sp, #4]
   162b8:	2364      	movs	r3, #100	; 0x64
   162ba:	9300      	str	r3, [sp, #0]
   162bc:	4613      	mov	r3, r2
   162be:	9a03      	ldr	r2, [sp, #12]
   162c0:	2161      	movs	r1, #97	; 0x61
   162c2:	9805      	ldr	r0, [sp, #20]
   162c4:	47a0      	blx	r4
   162c6:	4603      	mov	r3, r0
   162c8:	930a      	str	r3, [sp, #40]	; 0x28
    }

    // Wait while the writing the end address
    WaitWhileBusy();
   162ca:	9805      	ldr	r0, [sp, #20]
   162cc:	f7ff fca8 	bl	15c20 <Sd::WaitWhileBusy()>

    // Force return if an error occurred
    if (sd.response.data.byte[0] != 0x00)
   162d0:	f89d 3020 	ldrb.w	r3, [sp, #32]
   162d4:	2b00      	cmp	r3, #0
   162d6:	d009      	beq.n	162ec <Sd::DeleteBlock(unsigned long, unsigned long)+0xb8>
    {
      LOG_ERROR("Failed to set End Address!");
   162d8:	f240 33ba 	movw	r3, #954	; 0x3ba
   162dc:	4a18      	ldr	r2, [pc, #96]	; (16340 <Sd::DeleteBlock(unsigned long, unsigned long)+0x10c>)
   162de:	491b      	ldr	r1, [pc, #108]	; (1634c <Sd::DeleteBlock(unsigned long, unsigned long)+0x118>)
   162e0:	481b      	ldr	r0, [pc, #108]	; (16350 <Sd::DeleteBlock(unsigned long, unsigned long)+0x11c>)
   162e2:	f7fe f81f 	bl	14324 <printf>
      delete_failed = true;
   162e6:	2301      	movs	r3, #1
   162e8:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
    }

    // Finally, attempt a delete
    if (!delete_failed)
   162ec:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
   162f0:	f083 0301 	eor.w	r3, r3, #1
   162f4:	b2db      	uxtb	r3, r3
   162f6:	2b00      	cmp	r3, #0
   162f8:	d014      	beq.n	16324 <Sd::DeleteBlock(unsigned long, unsigned long)+0xf0>
    {
      // Issue the delete command to delete from our from:to range
      LOG_DEBUG("Issuing Delete Command...");
      sd.response.length = SendCmd(Command::kDel, 0xFFFFFFFF,
                                   sd.response.data.byte, 100, KeepAlive::kYes);
   162fa:	9b05      	ldr	r3, [sp, #20]
   162fc:	681b      	ldr	r3, [r3, #0]
   162fe:	681c      	ldr	r4, [r3, #0]
      sd.response.length = SendCmd(Command::kDel, 0xFFFFFFFF,
   16300:	ab06      	add	r3, sp, #24
   16302:	f103 0208 	add.w	r2, r3, #8
   16306:	2301      	movs	r3, #1
   16308:	9301      	str	r3, [sp, #4]
   1630a:	2364      	movs	r3, #100	; 0x64
   1630c:	9300      	str	r3, [sp, #0]
   1630e:	4613      	mov	r3, r2
   16310:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   16314:	2166      	movs	r1, #102	; 0x66
   16316:	9805      	ldr	r0, [sp, #20]
   16318:	47a0      	blx	r4
   1631a:	4603      	mov	r3, r0
   1631c:	930a      	str	r3, [sp, #40]	; 0x28

      // Wait while the deletion occurs
      WaitWhileBusy();
   1631e:	9805      	ldr	r0, [sp, #20]
   16320:	f7ff fc7e 	bl	15c20 <Sd::WaitWhileBusy()>
      LOG_DEBUG("[R1 Response: 0x%02X]", sd.response.data.byte[0]);
      LOG_DEBUG("Deletion Complete...");
    }

    // Return status
    return sd.response.data.byte[0];
   16324:	f89d 4020 	ldrb.w	r4, [sp, #32]
   16328:	462b      	mov	r3, r5
   1632a:	4619      	mov	r1, r3
   1632c:	4803      	ldr	r0, [pc, #12]	; (1633c <Sd::DeleteBlock(unsigned long, unsigned long)+0x108>)
   1632e:	f7fc fdb3 	bl	12e98 <__cyg_profile_func_exit>
   16332:	4623      	mov	r3, r4
  }
   16334:	4618      	mov	r0, r3
   16336:	b00f      	add	sp, #60	; 0x3c
   16338:	bd30      	pop	{r4, r5, pc}
   1633a:	bf00      	nop
   1633c:	00016235 	.word	0x00016235
   16340:	00019024 	.word	0x00019024
   16344:	00018d44 	.word	0x00018d44
   16348:	000187e0 	.word	0x000187e0
   1634c:	00018d4c 	.word	0x00018d4c
   16350:	00018838 	.word	0x00018838

00016354 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)>:

  // Send a command
  uint32_t SendCmd(Command sdc, uint32_t arg, uint8_t response_buffer[],
   16354:	e92d 49f0 	stmdb	sp!, {r4, r5, r6, r7, r8, fp, lr}
   16358:	b08f      	sub	sp, #60	; 0x3c
   1635a:	46f0      	mov	r8, lr
   1635c:	9003      	str	r0, [sp, #12]
   1635e:	9102      	str	r1, [sp, #8]
   16360:	9201      	str	r2, [sp, #4]
   16362:	9300      	str	r3, [sp, #0]
   16364:	4643      	mov	r3, r8
   16366:	4619      	mov	r1, r3
   16368:	4840      	ldr	r0, [pc, #256]	; (1646c <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x118>)
   1636a:	f7fc fd81 	bl	12e70 <__cyg_profile_func_enter>
                   uint32_t delay, KeepAlive keep_alive) override
  {
    ResponseType res_type;
    uint8_t res_len    = 0;
   1636e:	2300      	movs	r3, #0
   16370:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
    uint8_t crc        = 0;
   16374:	2300      	movs	r3, #0
   16376:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
    uint8_t tries      = 0;
   1637a:	2300      	movs	r3, #0
   1637c:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
    uint8_t bit_offset = 0;  // determines the distance of the response's
   16380:	2300      	movs	r3, #0
   16382:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
                             // 0 bit from the MSB place
    uint8_t temp_byte = 0;
   16386:	2300      	movs	r3, #0
   16388:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f

    // Determine the response type of the set command
    switch (sdc)
   1638c:	9b02      	ldr	r3, [sp, #8]
   1638e:	2b58      	cmp	r3, #88	; 0x58
   16390:	d052      	beq.n	16438 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0xe4>
   16392:	2b58      	cmp	r3, #88	; 0x58
   16394:	dc16      	bgt.n	163c4 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x70>
   16396:	2b48      	cmp	r3, #72	; 0x48
   16398:	d033      	beq.n	16402 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0xae>
   1639a:	2b48      	cmp	r3, #72	; 0x48
   1639c:	dc06      	bgt.n	163ac <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x58>
   1639e:	2b40      	cmp	r3, #64	; 0x40
   163a0:	d029      	beq.n	163f6 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0xa2>
   163a2:	2b41      	cmp	r3, #65	; 0x41
   163a4:	d02a      	beq.n	163fc <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0xa8>
   163a6:	2b0d      	cmp	r3, #13
   163a8:	d031      	beq.n	1640e <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0xba>
   163aa:	e054      	b.n	16456 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x102>
   163ac:	2b50      	cmp	r3, #80	; 0x50
   163ae:	d03a      	beq.n	16426 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0xd2>
   163b0:	2b50      	cmp	r3, #80	; 0x50
   163b2:	dc02      	bgt.n	163ba <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x66>
   163b4:	2b4c      	cmp	r3, #76	; 0x4c
   163b6:	d027      	beq.n	16408 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0xb4>
   163b8:	e04d      	b.n	16456 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x102>
   163ba:	2b51      	cmp	r3, #81	; 0x51
   163bc:	d036      	beq.n	1642c <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0xd8>
   163be:	2b52      	cmp	r3, #82	; 0x52
   163c0:	d037      	beq.n	16432 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0xde>
   163c2:	e048      	b.n	16456 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x102>
   163c4:	2b66      	cmp	r3, #102	; 0x66
   163c6:	d043      	beq.n	16450 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0xfc>
   163c8:	2b66      	cmp	r3, #102	; 0x66
   163ca:	dc06      	bgt.n	163da <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x86>
   163cc:	2b60      	cmp	r3, #96	; 0x60
   163ce:	d039      	beq.n	16444 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0xf0>
   163d0:	2b61      	cmp	r3, #97	; 0x61
   163d2:	d03a      	beq.n	1644a <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0xf6>
   163d4:	2b59      	cmp	r3, #89	; 0x59
   163d6:	d032      	beq.n	1643e <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0xea>
   163d8:	e03d      	b.n	16456 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x102>
   163da:	2b77      	cmp	r3, #119	; 0x77
   163dc:	d01a      	beq.n	16414 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0xc0>
   163de:	2b77      	cmp	r3, #119	; 0x77
   163e0:	dc02      	bgt.n	163e8 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x94>
   163e2:	2b69      	cmp	r3, #105	; 0x69
   163e4:	d019      	beq.n	1641a <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0xc6>
   163e6:	e036      	b.n	16456 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x102>
   163e8:	2b7a      	cmp	r3, #122	; 0x7a
   163ea:	d019      	beq.n	16420 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0xcc>
   163ec:	2bff      	cmp	r3, #255	; 0xff
   163ee:	d132      	bne.n	16456 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x102>
    {
      case Command::kGarbage: res_type = ResponseType::kR1; break;
   163f0:	2300      	movs	r3, #0
   163f2:	930d      	str	r3, [sp, #52]	; 0x34
   163f4:	e042      	b.n	1647c <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x128>
      case Command::kReset: res_type = ResponseType::kR1; break;
   163f6:	2300      	movs	r3, #0
   163f8:	930d      	str	r3, [sp, #52]	; 0x34
   163fa:	e03f      	b.n	1647c <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x128>
      case Command::kInit: res_type = ResponseType::kR1; break;
   163fc:	2300      	movs	r3, #0
   163fe:	930d      	str	r3, [sp, #52]	; 0x34
   16400:	e03c      	b.n	1647c <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x128>
      case Command::kGetOp: res_type = ResponseType::kR7; break;
   16402:	2307      	movs	r3, #7
   16404:	930d      	str	r3, [sp, #52]	; 0x34
   16406:	e039      	b.n	1647c <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x128>
      case Command::kStopTrans: res_type = ResponseType::kR1; break;
   16408:	2300      	movs	r3, #0
   1640a:	930d      	str	r3, [sp, #52]	; 0x34
   1640c:	e036      	b.n	1647c <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x128>
      case Command::kGetStatus: res_type = ResponseType::kR2; break;
   1640e:	2302      	movs	r3, #2
   16410:	930d      	str	r3, [sp, #52]	; 0x34
   16412:	e033      	b.n	1647c <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x128>
      case Command::kAcBegin: res_type = ResponseType::kR1; break;
   16414:	2300      	movs	r3, #0
   16416:	930d      	str	r3, [sp, #52]	; 0x34
   16418:	e030      	b.n	1647c <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x128>
      case Command::kAcInit: res_type = ResponseType::kR1; break;
   1641a:	2300      	movs	r3, #0
   1641c:	930d      	str	r3, [sp, #52]	; 0x34
   1641e:	e02d      	b.n	1647c <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x128>
      case Command::kGetOcr: res_type = ResponseType::kR3; break;
   16420:	2303      	movs	r3, #3
   16422:	930d      	str	r3, [sp, #52]	; 0x34
   16424:	e02a      	b.n	1647c <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x128>
      case Command::kChgBlkLen: res_type = ResponseType::kR1; break;
   16426:	2300      	movs	r3, #0
   16428:	930d      	str	r3, [sp, #52]	; 0x34
   1642a:	e027      	b.n	1647c <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x128>
      case Command::kReadSingle: res_type = ResponseType::kR1; break;
   1642c:	2300      	movs	r3, #0
   1642e:	930d      	str	r3, [sp, #52]	; 0x34
   16430:	e024      	b.n	1647c <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x128>
      case Command::kReadMulti: res_type = ResponseType::kR1; break;
   16432:	2300      	movs	r3, #0
   16434:	930d      	str	r3, [sp, #52]	; 0x34
   16436:	e021      	b.n	1647c <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x128>
      case Command::kWriteSingle: res_type = ResponseType::kR1; break;
   16438:	2300      	movs	r3, #0
   1643a:	930d      	str	r3, [sp, #52]	; 0x34
   1643c:	e01e      	b.n	1647c <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x128>
      case Command::kWriteMulti: res_type = ResponseType::kR1; break;
   1643e:	2300      	movs	r3, #0
   16440:	930d      	str	r3, [sp, #52]	; 0x34
   16442:	e01b      	b.n	1647c <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x128>
      case Command::kDelFrom: res_type = ResponseType::kR1; break;
   16444:	2300      	movs	r3, #0
   16446:	930d      	str	r3, [sp, #52]	; 0x34
   16448:	e018      	b.n	1647c <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x128>
      case Command::kDelTo: res_type = ResponseType::kR1; break;
   1644a:	2300      	movs	r3, #0
   1644c:	930d      	str	r3, [sp, #52]	; 0x34
   1644e:	e015      	b.n	1647c <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x128>
      case Command::kDel: res_type = ResponseType::kR1b; break;
   16450:	2301      	movs	r3, #1
   16452:	930d      	str	r3, [sp, #52]	; 0x34
   16454:	e012      	b.n	1647c <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x128>
      default:
        LOG_ERROR("Unknown response type. Aborting!");
   16456:	f240 33f3 	movw	r3, #1011	; 0x3f3
   1645a:	4a05      	ldr	r2, [pc, #20]	; (16470 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x11c>)
   1645c:	4905      	ldr	r1, [pc, #20]	; (16474 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x120>)
   1645e:	4806      	ldr	r0, [pc, #24]	; (16478 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x124>)
   16460:	f7fd ff60 	bl	14324 <printf>
        return -1;
   16464:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   16468:	e1b1      	b.n	167ce <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x47a>
   1646a:	bf00      	nop
   1646c:	00016355 	.word	0x00016355
   16470:	00019058 	.word	0x00019058
   16474:	00018d54 	.word	0x00018d54
   16478:	0001888c 	.word	0x0001888c
    // algorithm
    uint8_t msg[5] = { static_cast<uint8_t>(sdc),
                       static_cast<uint8_t>(arg >> 24),
                       static_cast<uint8_t>(arg >> 16),
                       static_cast<uint8_t>(arg >> 8),
                       static_cast<uint8_t>(arg >> 0) };
   1647c:	9b02      	ldr	r3, [sp, #8]
   1647e:	b2db      	uxtb	r3, r3
   16480:	f88d 3010 	strb.w	r3, [sp, #16]
                       static_cast<uint8_t>(arg >> 24),
   16484:	9b01      	ldr	r3, [sp, #4]
   16486:	0e1b      	lsrs	r3, r3, #24
                       static_cast<uint8_t>(arg >> 0) };
   16488:	b2db      	uxtb	r3, r3
   1648a:	f88d 3011 	strb.w	r3, [sp, #17]
                       static_cast<uint8_t>(arg >> 16),
   1648e:	9b01      	ldr	r3, [sp, #4]
   16490:	0c1b      	lsrs	r3, r3, #16
                       static_cast<uint8_t>(arg >> 0) };
   16492:	b2db      	uxtb	r3, r3
   16494:	f88d 3012 	strb.w	r3, [sp, #18]
                       static_cast<uint8_t>(arg >> 8),
   16498:	9b01      	ldr	r3, [sp, #4]
   1649a:	0a1b      	lsrs	r3, r3, #8
                       static_cast<uint8_t>(arg >> 0) };
   1649c:	b2db      	uxtb	r3, r3
   1649e:	f88d 3013 	strb.w	r3, [sp, #19]
   164a2:	9b01      	ldr	r3, [sp, #4]
   164a4:	b2db      	uxtb	r3, r3
   164a6:	f88d 3014 	strb.w	r3, [sp, #20]

    crc = GetCrc7(msg, sizeof(msg));
   164aa:	9b03      	ldr	r3, [sp, #12]
   164ac:	681b      	ldr	r3, [r3, #0]
   164ae:	331c      	adds	r3, #28
   164b0:	681b      	ldr	r3, [r3, #0]
   164b2:	a904      	add	r1, sp, #16
   164b4:	2205      	movs	r2, #5
   164b6:	9803      	ldr	r0, [sp, #12]
   164b8:	4798      	blx	r3
   164ba:	4603      	mov	r3, r0
   164bc:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
    if (sdc == Command::kGarbage)
   164c0:	9b02      	ldr	r3, [sp, #8]
   164c2:	2bff      	cmp	r3, #255	; 0xff
   164c4:	d102      	bne.n	164cc <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x178>
    {
      crc = 0xFF;
   164c6:	23ff      	movs	r3, #255	; 0xff
   164c8:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
    }

    // Select the SD Card
    chip_select_->SetLow();
   164cc:	9b03      	ldr	r3, [sp, #12]
   164ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   164d0:	9b03      	ldr	r3, [sp, #12]
   164d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   164d4:	681b      	ldr	r3, [r3, #0]
   164d6:	3310      	adds	r3, #16
   164d8:	681b      	ldr	r3, [r3, #0]
   164da:	4610      	mov	r0, r2
   164dc:	4798      	blx	r3
    chip_select_external_->SetLow();
   164de:	9b03      	ldr	r3, [sp, #12]
   164e0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
   164e2:	9b03      	ldr	r3, [sp, #12]
   164e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   164e6:	681b      	ldr	r3, [r3, #0]
   164e8:	3310      	adds	r3, #16
   164ea:	681b      	ldr	r3, [r3, #0]
   164ec:	4610      	mov	r0, r2
   164ee:	4798      	blx	r3

    // If desired, wait a bit before talking
    if (delay > 0)
   164f0:	9b16      	ldr	r3, [sp, #88]	; 0x58
   164f2:	2b00      	cmp	r3, #0
   164f4:	d007      	beq.n	16506 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x1b2>
    {
      Delay(delay);
   164f6:	9b16      	ldr	r3, [sp, #88]	; 0x58
   164f8:	461a      	mov	r2, r3
   164fa:	f04f 0300 	mov.w	r3, #0
   164fe:	4610      	mov	r0, r2
   16500:	4619      	mov	r1, r3
   16502:	f7fa f8d3 	bl	106ac <Delay(unsigned long long)>
    }

    // Send the desired command frame to the SD card board
    // Begin by transfering the command byte
    ssp_interface_->Transfer(static_cast<uint16_t>(sdc));
   16506:	9b03      	ldr	r3, [sp, #12]
   16508:	685a      	ldr	r2, [r3, #4]
   1650a:	9b03      	ldr	r3, [sp, #12]
   1650c:	685b      	ldr	r3, [r3, #4]
   1650e:	681b      	ldr	r3, [r3, #0]
   16510:	3308      	adds	r3, #8
   16512:	681b      	ldr	r3, [r3, #0]
   16514:	9902      	ldr	r1, [sp, #8]
   16516:	b289      	uxth	r1, r1
   16518:	4610      	mov	r0, r2
   1651a:	4798      	blx	r3
    // Send arg byte [31:24]
    ssp_interface_->Transfer(static_cast<uint16_t>(arg >> 24) & 0xFF);
   1651c:	9b03      	ldr	r3, [sp, #12]
   1651e:	6858      	ldr	r0, [r3, #4]
   16520:	9b03      	ldr	r3, [sp, #12]
   16522:	685b      	ldr	r3, [r3, #4]
   16524:	681b      	ldr	r3, [r3, #0]
   16526:	3308      	adds	r3, #8
   16528:	681b      	ldr	r3, [r3, #0]
   1652a:	9a01      	ldr	r2, [sp, #4]
   1652c:	0e12      	lsrs	r2, r2, #24
   1652e:	b292      	uxth	r2, r2
   16530:	b2d2      	uxtb	r2, r2
   16532:	b292      	uxth	r2, r2
   16534:	4611      	mov	r1, r2
   16536:	4798      	blx	r3
    // Send arg byte [23:16]
    ssp_interface_->Transfer(static_cast<uint16_t>(arg >> 16) & 0xFF);
   16538:	9b03      	ldr	r3, [sp, #12]
   1653a:	6858      	ldr	r0, [r3, #4]
   1653c:	9b03      	ldr	r3, [sp, #12]
   1653e:	685b      	ldr	r3, [r3, #4]
   16540:	681b      	ldr	r3, [r3, #0]
   16542:	3308      	adds	r3, #8
   16544:	681b      	ldr	r3, [r3, #0]
   16546:	9a01      	ldr	r2, [sp, #4]
   16548:	0c12      	lsrs	r2, r2, #16
   1654a:	b292      	uxth	r2, r2
   1654c:	b2d2      	uxtb	r2, r2
   1654e:	b292      	uxth	r2, r2
   16550:	4611      	mov	r1, r2
   16552:	4798      	blx	r3
    // Send arg byte [15:8]
    ssp_interface_->Transfer(static_cast<uint16_t>(arg >> 8) & 0xFF);
   16554:	9b03      	ldr	r3, [sp, #12]
   16556:	6858      	ldr	r0, [r3, #4]
   16558:	9b03      	ldr	r3, [sp, #12]
   1655a:	685b      	ldr	r3, [r3, #4]
   1655c:	681b      	ldr	r3, [r3, #0]
   1655e:	3308      	adds	r3, #8
   16560:	681b      	ldr	r3, [r3, #0]
   16562:	9a01      	ldr	r2, [sp, #4]
   16564:	0a12      	lsrs	r2, r2, #8
   16566:	b292      	uxth	r2, r2
   16568:	b2d2      	uxtb	r2, r2
   1656a:	b292      	uxth	r2, r2
   1656c:	4611      	mov	r1, r2
   1656e:	4798      	blx	r3
    // Send arg byte [7:0]
    ssp_interface_->Transfer(static_cast<uint16_t>(arg >> 0) & 0xFF);
   16570:	9b03      	ldr	r3, [sp, #12]
   16572:	685a      	ldr	r2, [r3, #4]
   16574:	9b03      	ldr	r3, [sp, #12]
   16576:	685b      	ldr	r3, [r3, #4]
   16578:	681b      	ldr	r3, [r3, #0]
   1657a:	3308      	adds	r3, #8
   1657c:	681b      	ldr	r3, [r3, #0]
   1657e:	9901      	ldr	r1, [sp, #4]
   16580:	b289      	uxth	r1, r1
   16582:	b2c9      	uxtb	r1, r1
   16584:	b289      	uxth	r1, r1
   16586:	4610      	mov	r0, r2
   16588:	4798      	blx	r3
    // Send 7-bit CRC and LSB stop addr (as b1)
    ssp_interface_->Transfer(static_cast<uint16_t>(crc << 1) | 0x01);
   1658a:	9b03      	ldr	r3, [sp, #12]
   1658c:	6858      	ldr	r0, [r3, #4]
   1658e:	9b03      	ldr	r3, [sp, #12]
   16590:	685b      	ldr	r3, [r3, #4]
   16592:	681b      	ldr	r3, [r3, #0]
   16594:	3308      	adds	r3, #8
   16596:	681b      	ldr	r3, [r3, #0]
   16598:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
   1659c:	b292      	uxth	r2, r2
   1659e:	0052      	lsls	r2, r2, #1
   165a0:	b292      	uxth	r2, r2
   165a2:	f042 0201 	orr.w	r2, r2, #1
   165a6:	b292      	uxth	r2, r2
   165a8:	4611      	mov	r1, r2
   165aa:	4798      	blx	r3

    // Write garbage while waiting for a response
    // Send at least 1 byte of garbage before checking for a response
    temp_byte = static_cast<uint8_t>(ssp_interface_->Transfer(0xFF));
   165ac:	9b03      	ldr	r3, [sp, #12]
   165ae:	685a      	ldr	r2, [r3, #4]
   165b0:	9b03      	ldr	r3, [sp, #12]
   165b2:	685b      	ldr	r3, [r3, #4]
   165b4:	681b      	ldr	r3, [r3, #0]
   165b6:	3308      	adds	r3, #8
   165b8:	681b      	ldr	r3, [r3, #0]
   165ba:	21ff      	movs	r1, #255	; 0xff
   165bc:	4610      	mov	r0, r2
   165be:	4798      	blx	r3
   165c0:	4603      	mov	r3, r0
   165c2:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
    while (tries++ < kBusTimeout)
   165c6:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   165ca:	1c5a      	adds	r2, r3, #1
   165cc:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
   165d0:	2bf9      	cmp	r3, #249	; 0xf9
   165d2:	bf94      	ite	ls
   165d4:	2301      	movls	r3, #1
   165d6:	2300      	movhi	r3, #0
   165d8:	b2db      	uxtb	r3, r3
   165da:	2b00      	cmp	r3, #0
   165dc:	d027      	beq.n	1662e <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x2da>
    {
      temp_byte = static_cast<uint8_t>(ssp_interface_->Transfer(0xFF));
   165de:	9b03      	ldr	r3, [sp, #12]
   165e0:	685a      	ldr	r2, [r3, #4]
   165e2:	9b03      	ldr	r3, [sp, #12]
   165e4:	685b      	ldr	r3, [r3, #4]
   165e6:	681b      	ldr	r3, [r3, #0]
   165e8:	3308      	adds	r3, #8
   165ea:	681b      	ldr	r3, [r3, #0]
   165ec:	21ff      	movs	r1, #255	; 0xff
   165ee:	4610      	mov	r0, r2
   165f0:	4798      	blx	r3
   165f2:	4603      	mov	r3, r0
   165f4:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
      if (temp_byte != 0xFF)
   165f8:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
   165fc:	2bff      	cmp	r3, #255	; 0xff
   165fe:	d00f      	beq.n	16620 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x2cc>
      {
        // Determine the offset, since the first byte of a
        // response will always be 0.
        while (temp_byte & (0x80 >> bit_offset))
   16600:	f89d 202f 	ldrb.w	r2, [sp, #47]	; 0x2f
   16604:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
   16608:	2180      	movs	r1, #128	; 0x80
   1660a:	fa41 f303 	asr.w	r3, r1, r3
   1660e:	4013      	ands	r3, r2
   16610:	2b00      	cmp	r3, #0
   16612:	d00b      	beq.n	1662c <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x2d8>
        {
          bit_offset++;
   16614:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
   16618:	3301      	adds	r3, #1
   1661a:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
        while (temp_byte & (0x80 >> bit_offset))
   1661e:	e7ef      	b.n	16600 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x2ac>
        }
        break;
      }
      tries++;
   16620:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   16624:	3301      	adds	r3, #1
   16626:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
    while (tries++ < kBusTimeout)
   1662a:	e7cc      	b.n	165c6 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x272>
        break;
   1662c:	bf00      	nop
    }

    // Determine response length (in bytes) based on response type
    switch (res_type)
   1662e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   16630:	2b07      	cmp	r3, #7
   16632:	d827      	bhi.n	16684 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x330>
   16634:	a201      	add	r2, pc, #4	; (adr r2, 1663c <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x2e8>)
   16636:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1663a:	bf00      	nop
   1663c:	0001665d 	.word	0x0001665d
   16640:	00016665 	.word	0x00016665
   16644:	0001666d 	.word	0x0001666d
   16648:	00016675 	.word	0x00016675
   1664c:	00016685 	.word	0x00016685
   16650:	00016685 	.word	0x00016685
   16654:	00016685 	.word	0x00016685
   16658:	0001667d 	.word	0x0001667d
    {
      case ResponseType::kR1: res_len = 1; break;
   1665c:	2301      	movs	r3, #1
   1665e:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
   16662:	e019      	b.n	16698 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x344>
      case ResponseType::kR1b: res_len = 1; break;
   16664:	2301      	movs	r3, #1
   16666:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
   1666a:	e015      	b.n	16698 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x344>
      case ResponseType::kR2: res_len = 2; break;
   1666c:	2302      	movs	r3, #2
   1666e:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
   16672:	e011      	b.n	16698 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x344>
      case ResponseType::kR3: res_len = 5; break;
   16674:	2305      	movs	r3, #5
   16676:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
   1667a:	e00d      	b.n	16698 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x344>
      case ResponseType::kR7: res_len = 5; break;
   1667c:	2305      	movs	r3, #5
   1667e:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
   16682:	e009      	b.n	16698 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x344>
      default:
        LOG_ERROR("Response unsupported in SPI mode. Aborting!");
   16684:	f240 433a 	movw	r3, #1082	; 0x43a
   16688:	4a56      	ldr	r2, [pc, #344]	; (167e4 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x490>)
   1668a:	4957      	ldr	r1, [pc, #348]	; (167e8 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x494>)
   1668c:	4857      	ldr	r0, [pc, #348]	; (167ec <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x498>)
   1668e:	f7fd fe49 	bl	14324 <printf>
        return -1;
   16692:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   16696:	e09a      	b.n	167ce <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x47a>
        break;
    }

    // Acquire the response
    uint64_t temp_response = 0;
   16698:	f04f 0200 	mov.w	r2, #0
   1669c:	f04f 0300 	mov.w	r3, #0
   166a0:	e9cd 2308 	strd	r2, r3, [sp, #32]
    // Read an extra 8 bits since the response was offset
    uint8_t bytes_to_read =
   166a4:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
   166a8:	2b00      	cmp	r3, #0
   166aa:	d004      	beq.n	166b6 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x362>
   166ac:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
   166b0:	3301      	adds	r3, #1
   166b2:	b2db      	uxtb	r3, r3
   166b4:	e001      	b.n	166ba <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x366>
   166b6:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
   166ba:	f88d 301f 	strb.w	r3, [sp, #31]
        static_cast<uint8_t>((bit_offset > 0) ? res_len + 1 : res_len);
    while (bytes_to_read-- > 0)
   166be:	f89d 301f 	ldrb.w	r3, [sp, #31]
   166c2:	1e5a      	subs	r2, r3, #1
   166c4:	f88d 201f 	strb.w	r2, [sp, #31]
   166c8:	2b00      	cmp	r3, #0
   166ca:	bf14      	ite	ne
   166cc:	2301      	movne	r3, #1
   166ce:	2300      	moveq	r3, #0
   166d0:	b2db      	uxtb	r3, r3
   166d2:	2b00      	cmp	r3, #0
   166d4:	d025      	beq.n	16722 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x3ce>
    {
      // Make space for the next byte
      temp_response = temp_response << 8;
   166d6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   166da:	f04f 0200 	mov.w	r2, #0
   166de:	f04f 0300 	mov.w	r3, #0
   166e2:	020b      	lsls	r3, r1, #8
   166e4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
   166e8:	0202      	lsls	r2, r0, #8
   166ea:	e9cd 2308 	strd	r2, r3, [sp, #32]
      temp_response |= temp_byte;
   166ee:	f89d b02f 	ldrb.w	fp, [sp, #47]	; 0x2f
   166f2:	f04f 0c00 	mov.w	ip, #0
   166f6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   166fa:	ea4b 0200 	orr.w	r2, fp, r0
   166fe:	ea4c 0301 	orr.w	r3, ip, r1
   16702:	e9cd 2308 	strd	r2, r3, [sp, #32]
      temp_byte = static_cast<uint8_t>(ssp_interface_->Transfer(0xFF));
   16706:	9b03      	ldr	r3, [sp, #12]
   16708:	685a      	ldr	r2, [r3, #4]
   1670a:	9b03      	ldr	r3, [sp, #12]
   1670c:	685b      	ldr	r3, [r3, #4]
   1670e:	681b      	ldr	r3, [r3, #0]
   16710:	3308      	adds	r3, #8
   16712:	681b      	ldr	r3, [r3, #0]
   16714:	21ff      	movs	r1, #255	; 0xff
   16716:	4610      	mov	r0, r2
   16718:	4798      	blx	r3
   1671a:	4603      	mov	r3, r0
   1671c:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
    while (bytes_to_read-- > 0)
   16720:	e7cd      	b.n	166be <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x36a>
    }
    // Compensate for the bit offset
    temp_response = temp_response >> bit_offset;
   16722:	f89d 1030 	ldrb.w	r1, [sp, #48]	; 0x30
   16726:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   1672a:	f1c1 0c20 	rsb	ip, r1, #32
   1672e:	f1a1 0020 	sub.w	r0, r1, #32
   16732:	fa22 f401 	lsr.w	r4, r2, r1
   16736:	fa03 fc0c 	lsl.w	ip, r3, ip
   1673a:	ea44 040c 	orr.w	r4, r4, ip
   1673e:	fa23 f000 	lsr.w	r0, r3, r0
   16742:	4304      	orrs	r4, r0
   16744:	fa23 f501 	lsr.w	r5, r3, r1
   16748:	e9cd 4508 	strd	r4, r5, [sp, #32]

    // Only write to the response buffer if it is provided
    if (response_buffer != nullptr)
   1674c:	9b00      	ldr	r3, [sp, #0]
   1674e:	2b00      	cmp	r3, #0
   16750:	d025      	beq.n	1679e <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x44a>
    {
      for (int i = 0; i < res_len; i++)
   16752:	2300      	movs	r3, #0
   16754:	9306      	str	r3, [sp, #24]
   16756:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
   1675a:	9a06      	ldr	r2, [sp, #24]
   1675c:	429a      	cmp	r2, r3
   1675e:	da1e      	bge.n	1679e <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x44a>
      {
        response_buffer[i] =
            static_cast<uint8_t>(temp_response >> 8 * (res_len - 1 - i));
   16760:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
   16764:	1e5a      	subs	r2, r3, #1
   16766:	9b06      	ldr	r3, [sp, #24]
   16768:	1ad3      	subs	r3, r2, r3
   1676a:	00da      	lsls	r2, r3, #3
   1676c:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   16770:	f1c2 0020 	rsb	r0, r2, #32
   16774:	f1a2 0120 	sub.w	r1, r2, #32
   16778:	fa23 f602 	lsr.w	r6, r3, r2
   1677c:	fa04 f000 	lsl.w	r0, r4, r0
   16780:	4306      	orrs	r6, r0
   16782:	fa24 f101 	lsr.w	r1, r4, r1
   16786:	430e      	orrs	r6, r1
   16788:	fa24 f702 	lsr.w	r7, r4, r2
        response_buffer[i] =
   1678c:	9b06      	ldr	r3, [sp, #24]
   1678e:	9a00      	ldr	r2, [sp, #0]
   16790:	4413      	add	r3, r2
   16792:	b2f2      	uxtb	r2, r6
   16794:	701a      	strb	r2, [r3, #0]
      for (int i = 0; i < res_len; i++)
   16796:	9b06      	ldr	r3, [sp, #24]
   16798:	3301      	adds	r3, #1
   1679a:	9306      	str	r3, [sp, #24]
   1679c:	e7db      	b.n	16756 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x402>
      }
    }

    // Only end the transaction if keep_alive isn't requested
    if (keep_alive == KeepAlive::kNo)
   1679e:	f89d 305c 	ldrb.w	r3, [sp, #92]	; 0x5c
   167a2:	2b00      	cmp	r3, #0
   167a4:	d111      	bne.n	167ca <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x476>
    {
      // Deselect the SPI comm board
      chip_select_->SetHigh();
   167a6:	9b03      	ldr	r3, [sp, #12]
   167a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   167aa:	9b03      	ldr	r3, [sp, #12]
   167ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   167ae:	681b      	ldr	r3, [r3, #0]
   167b0:	330c      	adds	r3, #12
   167b2:	681b      	ldr	r3, [r3, #0]
   167b4:	4610      	mov	r0, r2
   167b6:	4798      	blx	r3
      chip_select_external_->SetHigh();
   167b8:	9b03      	ldr	r3, [sp, #12]
   167ba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
   167bc:	9b03      	ldr	r3, [sp, #12]
   167be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   167c0:	681b      	ldr	r3, [r3, #0]
   167c2:	330c      	adds	r3, #12
   167c4:	681b      	ldr	r3, [r3, #0]
   167c6:	4610      	mov	r0, r2
   167c8:	4798      	blx	r3
    }
    return res_len;
   167ca:	f89d 4033 	ldrb.w	r4, [sp, #51]	; 0x33
   167ce:	4643      	mov	r3, r8
   167d0:	4619      	mov	r1, r3
   167d2:	4807      	ldr	r0, [pc, #28]	; (167f0 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x49c>)
   167d4:	f7fc fb60 	bl	12e98 <__cyg_profile_func_exit>
   167d8:	4623      	mov	r3, r4
  }
   167da:	4618      	mov	r0, r3
   167dc:	b00f      	add	sp, #60	; 0x3c
   167de:	e8bd 89f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, fp, pc}
   167e2:	bf00      	nop
   167e4:	00019058 	.word	0x00019058
   167e8:	00018d5c 	.word	0x00018d5c
   167ec:	000188e8 	.word	0x000188e8
   167f0:	00016355 	.word	0x00016355

000167f4 <Sd::Crc7Add(unsigned char, unsigned char)>:

  // Adds a message byte to the current CRC-7 to get a the new CRC-7
  uint8_t Crc7Add(uint8_t crc, uint8_t message_byte) override
   167f4:	b530      	push	{r4, r5, lr}
   167f6:	b083      	sub	sp, #12
   167f8:	4675      	mov	r5, lr
   167fa:	9001      	str	r0, [sp, #4]
   167fc:	460b      	mov	r3, r1
   167fe:	f88d 3003 	strb.w	r3, [sp, #3]
   16802:	4613      	mov	r3, r2
   16804:	f88d 3002 	strb.w	r3, [sp, #2]
   16808:	462b      	mov	r3, r5
   1680a:	4619      	mov	r1, r3
   1680c:	4809      	ldr	r0, [pc, #36]	; (16834 <Sd::Crc7Add(unsigned char, unsigned char)+0x40>)
   1680e:	f7fc fb2f 	bl	12e70 <__cyg_profile_func_enter>
  {
    return kCrcTable8.crc_table[(crc << 1) ^ message_byte];
   16812:	f89d 3003 	ldrb.w	r3, [sp, #3]
   16816:	005a      	lsls	r2, r3, #1
   16818:	f89d 3002 	ldrb.w	r3, [sp, #2]
   1681c:	4053      	eors	r3, r2
   1681e:	4a06      	ldr	r2, [pc, #24]	; (16838 <Sd::Crc7Add(unsigned char, unsigned char)+0x44>)
   16820:	5cd4      	ldrb	r4, [r2, r3]
   16822:	462b      	mov	r3, r5
   16824:	4619      	mov	r1, r3
   16826:	4803      	ldr	r0, [pc, #12]	; (16834 <Sd::Crc7Add(unsigned char, unsigned char)+0x40>)
   16828:	f7fc fb36 	bl	12e98 <__cyg_profile_func_exit>
   1682c:	4623      	mov	r3, r4
  }
   1682e:	4618      	mov	r0, r3
   16830:	b003      	add	sp, #12
   16832:	bd30      	pop	{r4, r5, pc}
   16834:	000167f5 	.word	0x000167f5
   16838:	000189cc 	.word	0x000189cc

0001683c <Sd::GetCrc7(unsigned char*, unsigned char)>:

  // Returns the CRC-7 for a message of "length" bytes
  uint8_t GetCrc7(uint8_t * message, uint8_t length) override
   1683c:	b530      	push	{r4, r5, lr}
   1683e:	b087      	sub	sp, #28
   16840:	4675      	mov	r5, lr
   16842:	9003      	str	r0, [sp, #12]
   16844:	9102      	str	r1, [sp, #8]
   16846:	4613      	mov	r3, r2
   16848:	f88d 3007 	strb.w	r3, [sp, #7]
   1684c:	462b      	mov	r3, r5
   1684e:	4619      	mov	r1, r3
   16850:	4815      	ldr	r0, [pc, #84]	; (168a8 <Sd::GetCrc7(unsigned char*, unsigned char)+0x6c>)
   16852:	f7fc fb0d 	bl	12e70 <__cyg_profile_func_enter>
  {
    uint8_t crc = 0;
   16856:	2300      	movs	r3, #0
   16858:	f88d 3017 	strb.w	r3, [sp, #23]
    for (int i = 0; i < length; i++)
   1685c:	2300      	movs	r3, #0
   1685e:	9304      	str	r3, [sp, #16]
   16860:	f89d 3007 	ldrb.w	r3, [sp, #7]
   16864:	9a04      	ldr	r2, [sp, #16]
   16866:	429a      	cmp	r2, r3
   16868:	da12      	bge.n	16890 <Sd::GetCrc7(unsigned char*, unsigned char)+0x54>
    {
      crc = Crc7Add(crc, message[i]);
   1686a:	9b03      	ldr	r3, [sp, #12]
   1686c:	681b      	ldr	r3, [r3, #0]
   1686e:	3318      	adds	r3, #24
   16870:	681b      	ldr	r3, [r3, #0]
   16872:	9a04      	ldr	r2, [sp, #16]
   16874:	9902      	ldr	r1, [sp, #8]
   16876:	440a      	add	r2, r1
   16878:	7812      	ldrb	r2, [r2, #0]
   1687a:	f89d 1017 	ldrb.w	r1, [sp, #23]
   1687e:	9803      	ldr	r0, [sp, #12]
   16880:	4798      	blx	r3
   16882:	4603      	mov	r3, r0
   16884:	f88d 3017 	strb.w	r3, [sp, #23]
    for (int i = 0; i < length; i++)
   16888:	9b04      	ldr	r3, [sp, #16]
   1688a:	3301      	adds	r3, #1
   1688c:	9304      	str	r3, [sp, #16]
   1688e:	e7e7      	b.n	16860 <Sd::GetCrc7(unsigned char*, unsigned char)+0x24>
    }
    return crc;
   16890:	f89d 4017 	ldrb.w	r4, [sp, #23]
   16894:	462b      	mov	r3, r5
   16896:	4619      	mov	r1, r3
   16898:	4803      	ldr	r0, [pc, #12]	; (168a8 <Sd::GetCrc7(unsigned char*, unsigned char)+0x6c>)
   1689a:	f7fc fafd 	bl	12e98 <__cyg_profile_func_exit>
   1689e:	4623      	mov	r3, r4
  }
   168a0:	4618      	mov	r0, r3
   168a2:	b007      	add	sp, #28
   168a4:	bd30      	pop	{r4, r5, pc}
   168a6:	bf00      	nop
   168a8:	0001683d 	.word	0x0001683d

000168ac <Sd::GetCrc16(unsigned char*, unsigned short)>:

  // Returns CCITT CRC-16 for a message of "length" bytes
  uint16_t GetCrc16(uint8_t * message, uint16_t length) override
   168ac:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
   168b0:	b08c      	sub	sp, #48	; 0x30
   168b2:	4677      	mov	r7, lr
   168b4:	9003      	str	r0, [sp, #12]
   168b6:	9102      	str	r1, [sp, #8]
   168b8:	4613      	mov	r3, r2
   168ba:	f8ad 3006 	strh.w	r3, [sp, #6]
   168be:	463b      	mov	r3, r7
   168c0:	4619      	mov	r1, r3
   168c2:	4837      	ldr	r0, [pc, #220]	; (169a0 <Sd::GetCrc16(unsigned char*, unsigned short)+0xf4>)
   168c4:	f7fc fad4 	bl	12e70 <__cyg_profile_func_enter>
  {
    uint64_t crc = 0x0000;
   168c8:	f04f 0300 	mov.w	r3, #0
   168cc:	f04f 0400 	mov.w	r4, #0
   168d0:	e9cd 340a 	strd	r3, r4, [sp, #40]	; 0x28
    uint64_t temp;
    uint64_t final_value = 0;
   168d4:	f04f 0300 	mov.w	r3, #0
   168d8:	f04f 0400 	mov.w	r4, #0
   168dc:	e9cd 3406 	strd	r3, r4, [sp, #24]

    for (uint64_t count = 0; count < length; ++count)
   168e0:	f04f 0300 	mov.w	r3, #0
   168e4:	f04f 0400 	mov.w	r4, #0
   168e8:	e9cd 3408 	strd	r3, r4, [sp, #32]
   168ec:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   168f0:	f04f 0400 	mov.w	r4, #0
   168f4:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
   168f8:	42a2      	cmp	r2, r4
   168fa:	bf08      	it	eq
   168fc:	4299      	cmpeq	r1, r3
   168fe:	d23f      	bcs.n	16980 <Sd::GetCrc16(unsigned char*, unsigned short)+0xd4>
    {
      temp = (*message++ ^ (crc >> 8)) & 0xff;
   16900:	9b02      	ldr	r3, [sp, #8]
   16902:	1c5a      	adds	r2, r3, #1
   16904:	9202      	str	r2, [sp, #8]
   16906:	781b      	ldrb	r3, [r3, #0]
   16908:	b2dd      	uxtb	r5, r3
   1690a:	f04f 0600 	mov.w	r6, #0
   1690e:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
   16912:	f04f 0300 	mov.w	r3, #0
   16916:	f04f 0400 	mov.w	r4, #0
   1691a:	0a0b      	lsrs	r3, r1, #8
   1691c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
   16920:	0a14      	lsrs	r4, r2, #8
   16922:	ea83 0b05 	eor.w	fp, r3, r5
   16926:	ea84 0c06 	eor.w	ip, r4, r6
   1692a:	f04f 01ff 	mov.w	r1, #255	; 0xff
   1692e:	f04f 0200 	mov.w	r2, #0
   16932:	ea0b 0301 	and.w	r3, fp, r1
   16936:	ea0c 0402 	and.w	r4, ip, r2
   1693a:	e9cd 3404 	strd	r3, r4, [sp, #16]
      crc  = kCrcTable16.crc_table[temp] ^ (crc << 8);
   1693e:	4a19      	ldr	r2, [pc, #100]	; (169a4 <Sd::GetCrc16(unsigned char*, unsigned short)+0xf8>)
   16940:	9b04      	ldr	r3, [sp, #16]
   16942:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
   16946:	b29d      	uxth	r5, r3
   16948:	f04f 0600 	mov.w	r6, #0
   1694c:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
   16950:	f04f 0b00 	mov.w	fp, #0
   16954:	f04f 0c00 	mov.w	ip, #0
   16958:	ea4f 2c02 	mov.w	ip, r2, lsl #8
   1695c:	ea4c 6c11 	orr.w	ip, ip, r1, lsr #24
   16960:	ea4f 2b01 	mov.w	fp, r1, lsl #8
   16964:	ea8b 0305 	eor.w	r3, fp, r5
   16968:	ea8c 0406 	eor.w	r4, ip, r6
   1696c:	e9cd 340a 	strd	r3, r4, [sp, #40]	; 0x28
    for (uint64_t count = 0; count < length; ++count)
   16970:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   16974:	1c59      	adds	r1, r3, #1
   16976:	f144 0200 	adc.w	r2, r4, #0
   1697a:	e9cd 1208 	strd	r1, r2, [sp, #32]
   1697e:	e7b5      	b.n	168ec <Sd::GetCrc16(unsigned char*, unsigned short)+0x40>
    }

    return static_cast<uint16_t>(crc ^ final_value);
   16980:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
   16984:	f8bd 3018 	ldrh.w	r3, [sp, #24]
   16988:	4053      	eors	r3, r2
   1698a:	b29c      	uxth	r4, r3
   1698c:	463b      	mov	r3, r7
   1698e:	4619      	mov	r1, r3
   16990:	4803      	ldr	r0, [pc, #12]	; (169a0 <Sd::GetCrc16(unsigned char*, unsigned short)+0xf4>)
   16992:	f7fc fa81 	bl	12e98 <__cyg_profile_func_exit>
   16996:	4623      	mov	r3, r4
  }
   16998:	4618      	mov	r0, r3
   1699a:	b00c      	add	sp, #48	; 0x30
   1699c:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
   169a0:	000168ad 	.word	0x000168ad
   169a4:	00018acc 	.word	0x00018acc

000169a8 <unsigned long bit::Set<unsigned long>(unsigned long, unsigned long)>:
constexpr T Set(T target, uint32_t position)
   169a8:	b530      	push	{r4, r5, lr}
   169aa:	b083      	sub	sp, #12
   169ac:	4675      	mov	r5, lr
   169ae:	9001      	str	r0, [sp, #4]
   169b0:	9100      	str	r1, [sp, #0]
   169b2:	462b      	mov	r3, r5
   169b4:	4619      	mov	r1, r3
   169b6:	480a      	ldr	r0, [pc, #40]	; (169e0 <unsigned long bit::Set<unsigned long>(unsigned long, unsigned long)+0x38>)
   169b8:	f7fc fa5a 	bl	12e70 <__cyg_profile_func_enter>
  return target | (1 << position);
   169bc:	2201      	movs	r2, #1
   169be:	9b00      	ldr	r3, [sp, #0]
   169c0:	fa02 f303 	lsl.w	r3, r2, r3
   169c4:	461a      	mov	r2, r3
   169c6:	9b01      	ldr	r3, [sp, #4]
   169c8:	ea42 0403 	orr.w	r4, r2, r3
   169cc:	462b      	mov	r3, r5
   169ce:	4619      	mov	r1, r3
   169d0:	4803      	ldr	r0, [pc, #12]	; (169e0 <unsigned long bit::Set<unsigned long>(unsigned long, unsigned long)+0x38>)
   169d2:	f7fc fa61 	bl	12e98 <__cyg_profile_func_exit>
   169d6:	4623      	mov	r3, r4
}
   169d8:	4618      	mov	r0, r3
   169da:	b003      	add	sp, #12
   169dc:	bd30      	pop	{r4, r5, pc}
   169de:	bf00      	nop
   169e0:	000169a9 	.word	0x000169a9

000169e4 <unsigned long bit::Insert<unsigned long, unsigned char>(unsigned long, unsigned char, unsigned long, unsigned long)>:
constexpr T Insert(T target, U value, uint32_t position, uint32_t width = 1)
   169e4:	b530      	push	{r4, r5, lr}
   169e6:	b089      	sub	sp, #36	; 0x24
   169e8:	4675      	mov	r5, lr
   169ea:	9003      	str	r0, [sp, #12]
   169ec:	9201      	str	r2, [sp, #4]
   169ee:	9300      	str	r3, [sp, #0]
   169f0:	460b      	mov	r3, r1
   169f2:	f88d 300b 	strb.w	r3, [sp, #11]
   169f6:	462b      	mov	r3, r5
   169f8:	4619      	mov	r1, r3
   169fa:	4816      	ldr	r0, [pc, #88]	; (16a54 <unsigned long bit::Insert<unsigned long, unsigned char>(unsigned long, unsigned char, unsigned long, unsigned long)+0x70>)
   169fc:	f7fc fa38 	bl	12e70 <__cyg_profile_func_enter>
  constexpr UnsignedT kFieldOfOnes = GenerateFieldOfOnes<T>();
   16a00:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   16a04:	9307      	str	r3, [sp, #28]
  constexpr size_t kTargetWidth     = sizeof(T) * 8;
   16a06:	2320      	movs	r3, #32
   16a08:	9306      	str	r3, [sp, #24]
  UnsignedT mask   = kFieldOfOnes >> (kTargetWidth - width);
   16a0a:	9b00      	ldr	r3, [sp, #0]
   16a0c:	f1c3 0320 	rsb	r3, r3, #32
   16a10:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   16a14:	fa22 f303 	lsr.w	r3, r2, r3
   16a18:	9305      	str	r3, [sp, #20]
  target &= ~(mask << position);
   16a1a:	9a05      	ldr	r2, [sp, #20]
   16a1c:	9b01      	ldr	r3, [sp, #4]
   16a1e:	fa02 f303 	lsl.w	r3, r2, r3
   16a22:	43db      	mvns	r3, r3
   16a24:	9a03      	ldr	r2, [sp, #12]
   16a26:	4013      	ands	r3, r2
   16a28:	9303      	str	r3, [sp, #12]
  target |= (value & mask) << position;
   16a2a:	f89d 200b 	ldrb.w	r2, [sp, #11]
   16a2e:	9b05      	ldr	r3, [sp, #20]
   16a30:	401a      	ands	r2, r3
   16a32:	9b01      	ldr	r3, [sp, #4]
   16a34:	fa02 f303 	lsl.w	r3, r2, r3
   16a38:	9a03      	ldr	r2, [sp, #12]
   16a3a:	4313      	orrs	r3, r2
   16a3c:	9303      	str	r3, [sp, #12]
  return target;
   16a3e:	9c03      	ldr	r4, [sp, #12]
   16a40:	462b      	mov	r3, r5
   16a42:	4619      	mov	r1, r3
   16a44:	4803      	ldr	r0, [pc, #12]	; (16a54 <unsigned long bit::Insert<unsigned long, unsigned char>(unsigned long, unsigned char, unsigned long, unsigned long)+0x70>)
   16a46:	f7fc fa27 	bl	12e98 <__cyg_profile_func_exit>
   16a4a:	4623      	mov	r3, r4
}
   16a4c:	4618      	mov	r0, r3
   16a4e:	b009      	add	sp, #36	; 0x24
   16a50:	bd30      	pop	{r4, r5, pc}
   16a52:	bf00      	nop
   16a54:	000169e5 	.word	0x000169e5

00016a58 <unsigned long bit::Extract<unsigned long>(unsigned long, unsigned long, unsigned long)>:
constexpr T Extract(T target, uint32_t position, uint32_t width = 1)
   16a58:	b530      	push	{r4, r5, lr}
   16a5a:	b089      	sub	sp, #36	; 0x24
   16a5c:	4675      	mov	r5, lr
   16a5e:	9003      	str	r0, [sp, #12]
   16a60:	9102      	str	r1, [sp, #8]
   16a62:	9201      	str	r2, [sp, #4]
   16a64:	462b      	mov	r3, r5
   16a66:	4619      	mov	r1, r3
   16a68:	480f      	ldr	r0, [pc, #60]	; (16aa8 <unsigned long bit::Extract<unsigned long>(unsigned long, unsigned long, unsigned long)+0x50>)
   16a6a:	f7fc fa01 	bl	12e70 <__cyg_profile_func_enter>
  constexpr UnsignedT kFieldOfOnes = GenerateFieldOfOnes<T>();
   16a6e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   16a72:	9307      	str	r3, [sp, #28]
  constexpr size_t kTargetWidth     = sizeof(T) * 8;
   16a74:	2320      	movs	r3, #32
   16a76:	9306      	str	r3, [sp, #24]
  UnsignedT mask   = kFieldOfOnes >> (kTargetWidth - width);
   16a78:	9b01      	ldr	r3, [sp, #4]
   16a7a:	f1c3 0320 	rsb	r3, r3, #32
   16a7e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   16a82:	fa22 f303 	lsr.w	r3, r2, r3
   16a86:	9305      	str	r3, [sp, #20]
  return (target >> position) & mask;
   16a88:	9a03      	ldr	r2, [sp, #12]
   16a8a:	9b02      	ldr	r3, [sp, #8]
   16a8c:	40da      	lsrs	r2, r3
   16a8e:	9b05      	ldr	r3, [sp, #20]
   16a90:	ea02 0403 	and.w	r4, r2, r3
   16a94:	462b      	mov	r3, r5
   16a96:	4619      	mov	r1, r3
   16a98:	4803      	ldr	r0, [pc, #12]	; (16aa8 <unsigned long bit::Extract<unsigned long>(unsigned long, unsigned long, unsigned long)+0x50>)
   16a9a:	f7fc f9fd 	bl	12e98 <__cyg_profile_func_exit>
   16a9e:	4623      	mov	r3, r4
}
   16aa0:	4618      	mov	r0, r3
   16aa2:	b009      	add	sp, #36	; 0x24
   16aa4:	bd30      	pop	{r4, r5, pc}
   16aa6:	bf00      	nop
   16aa8:	00016a59 	.word	0x00016a59

00016aac <unsigned long bit::Insert<unsigned long, bool>(unsigned long, bool, unsigned long, unsigned long)>:
constexpr T Insert(T target, U value, uint32_t position, uint32_t width = 1)
   16aac:	b530      	push	{r4, r5, lr}
   16aae:	b089      	sub	sp, #36	; 0x24
   16ab0:	4675      	mov	r5, lr
   16ab2:	9003      	str	r0, [sp, #12]
   16ab4:	9201      	str	r2, [sp, #4]
   16ab6:	9300      	str	r3, [sp, #0]
   16ab8:	460b      	mov	r3, r1
   16aba:	f88d 300b 	strb.w	r3, [sp, #11]
   16abe:	462b      	mov	r3, r5
   16ac0:	4619      	mov	r1, r3
   16ac2:	4816      	ldr	r0, [pc, #88]	; (16b1c <unsigned long bit::Insert<unsigned long, bool>(unsigned long, bool, unsigned long, unsigned long)+0x70>)
   16ac4:	f7fc f9d4 	bl	12e70 <__cyg_profile_func_enter>
  constexpr UnsignedT kFieldOfOnes = GenerateFieldOfOnes<T>();
   16ac8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   16acc:	9307      	str	r3, [sp, #28]
  constexpr size_t kTargetWidth     = sizeof(T) * 8;
   16ace:	2320      	movs	r3, #32
   16ad0:	9306      	str	r3, [sp, #24]
  UnsignedT mask   = kFieldOfOnes >> (kTargetWidth - width);
   16ad2:	9b00      	ldr	r3, [sp, #0]
   16ad4:	f1c3 0320 	rsb	r3, r3, #32
   16ad8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   16adc:	fa22 f303 	lsr.w	r3, r2, r3
   16ae0:	9305      	str	r3, [sp, #20]
  target &= ~(mask << position);
   16ae2:	9a05      	ldr	r2, [sp, #20]
   16ae4:	9b01      	ldr	r3, [sp, #4]
   16ae6:	fa02 f303 	lsl.w	r3, r2, r3
   16aea:	43db      	mvns	r3, r3
   16aec:	9a03      	ldr	r2, [sp, #12]
   16aee:	4013      	ands	r3, r2
   16af0:	9303      	str	r3, [sp, #12]
  target |= (value & mask) << position;
   16af2:	f89d 200b 	ldrb.w	r2, [sp, #11]
   16af6:	9b05      	ldr	r3, [sp, #20]
   16af8:	401a      	ands	r2, r3
   16afa:	9b01      	ldr	r3, [sp, #4]
   16afc:	fa02 f303 	lsl.w	r3, r2, r3
   16b00:	9a03      	ldr	r2, [sp, #12]
   16b02:	4313      	orrs	r3, r2
   16b04:	9303      	str	r3, [sp, #12]
  return target;
   16b06:	9c03      	ldr	r4, [sp, #12]
   16b08:	462b      	mov	r3, r5
   16b0a:	4619      	mov	r1, r3
   16b0c:	4803      	ldr	r0, [pc, #12]	; (16b1c <unsigned long bit::Insert<unsigned long, bool>(unsigned long, bool, unsigned long, unsigned long)+0x70>)
   16b0e:	f7fc f9c3 	bl	12e98 <__cyg_profile_func_exit>
   16b12:	4623      	mov	r3, r4
}
   16b14:	4618      	mov	r0, r3
   16b16:	b009      	add	sp, #36	; 0x24
   16b18:	bd30      	pop	{r4, r5, pc}
   16b1a:	bf00      	nop
   16b1c:	00016aad 	.word	0x00016aad

00016b20 <__static_initialization_and_destruction_0(int, int)>:
extern "C" DRESULT disk_ioctl([[maybe_unused]] BYTE drive_number,
                              [[maybe_unused]] BYTE command,
                              [[maybe_unused]] void * buffer)
{
  return RES_PARERR;
}
   16b20:	b530      	push	{r4, r5, lr}
   16b22:	b085      	sub	sp, #20
   16b24:	4674      	mov	r4, lr
   16b26:	9003      	str	r0, [sp, #12]
   16b28:	9102      	str	r1, [sp, #8]
   16b2a:	4623      	mov	r3, r4
   16b2c:	4619      	mov	r1, r3
   16b2e:	480e      	ldr	r0, [pc, #56]	; (16b68 <__static_initialization_and_destruction_0(int, int)+0x48>)
   16b30:	f7fc f99e 	bl	12e70 <__cyg_profile_func_enter>
   16b34:	9b03      	ldr	r3, [sp, #12]
   16b36:	2b01      	cmp	r3, #1
   16b38:	d10e      	bne.n	16b58 <__static_initialization_and_destruction_0(int, int)+0x38>
   16b3a:	9b02      	ldr	r3, [sp, #8]
   16b3c:	f64f 72ff 	movw	r2, #65535	; 0xffff
   16b40:	4293      	cmp	r3, r2
   16b42:	d109      	bne.n	16b58 <__static_initialization_and_destruction_0(int, int)+0x38>
Sd sd_card(Sd::DebugSdCard_t{});
   16b44:	2306      	movs	r3, #6
   16b46:	9301      	str	r3, [sp, #4]
   16b48:	2300      	movs	r3, #0
   16b4a:	9300      	str	r3, [sp, #0]
   16b4c:	2308      	movs	r3, #8
   16b4e:	2201      	movs	r2, #1
   16b50:	4629      	mov	r1, r5
   16b52:	4806      	ldr	r0, [pc, #24]	; (16b6c <__static_initialization_and_destruction_0(int, int)+0x4c>)
   16b54:	f7fe fdda 	bl	1570c <Sd::Sd(Sd::DebugSdCard_t, unsigned char, unsigned char, unsigned char, unsigned char)>
   16b58:	4623      	mov	r3, r4
   16b5a:	4619      	mov	r1, r3
   16b5c:	4802      	ldr	r0, [pc, #8]	; (16b68 <__static_initialization_and_destruction_0(int, int)+0x48>)
   16b5e:	f7fc f99b 	bl	12e98 <__cyg_profile_func_exit>
}
   16b62:	bf00      	nop
   16b64:	b005      	add	sp, #20
   16b66:	bd30      	pop	{r4, r5, pc}
   16b68:	00016b21 	.word	0x00016b21
   16b6c:	10000640 	.word	0x10000640

00016b70 <_GLOBAL__sub_I_disk_status>:
   16b70:	b510      	push	{r4, lr}
   16b72:	4674      	mov	r4, lr
   16b74:	4623      	mov	r3, r4
   16b76:	4619      	mov	r1, r3
   16b78:	4806      	ldr	r0, [pc, #24]	; (16b94 <_GLOBAL__sub_I_disk_status+0x24>)
   16b7a:	f7fc f979 	bl	12e70 <__cyg_profile_func_enter>
   16b7e:	f64f 71ff 	movw	r1, #65535	; 0xffff
   16b82:	2001      	movs	r0, #1
   16b84:	f7ff ffcc 	bl	16b20 <__static_initialization_and_destruction_0(int, int)>
   16b88:	4623      	mov	r3, r4
   16b8a:	4619      	mov	r1, r3
   16b8c:	4801      	ldr	r0, [pc, #4]	; (16b94 <_GLOBAL__sub_I_disk_status+0x24>)
   16b8e:	f7fc f983 	bl	12e98 <__cyg_profile_func_exit>
   16b92:	bd10      	pop	{r4, pc}
   16b94:	00016b71 	.word	0x00016b71

00016b98 <__cxa_pure_virtual>:
   16b98:	b508      	push	{r3, lr}
   16b9a:	f000 f80d 	bl	16bb8 <std::terminate()>

00016b9e <__cxxabiv1::__terminate(void (*)())>:
   16b9e:	b508      	push	{r3, lr}
   16ba0:	4780      	blx	r0
   16ba2:	f000 fa0f 	bl	16fc4 <abort>
   16ba6:	Address 0x0000000000016ba6 is out of bounds.


00016ba8 <std::get_terminate()>:
   16ba8:	4b02      	ldr	r3, [pc, #8]	; (16bb4 <std::get_terminate()+0xc>)
   16baa:	6818      	ldr	r0, [r3, #0]
   16bac:	f3bf 8f5b 	dmb	ish
   16bb0:	4770      	bx	lr
   16bb2:	bf00      	nop
   16bb4:	100001d4 	.word	0x100001d4

00016bb8 <std::terminate()>:
   16bb8:	b508      	push	{r3, lr}
   16bba:	f7ff fff5 	bl	16ba8 <std::get_terminate()>
   16bbe:	f7ff ffee 	bl	16b9e <__cxxabiv1::__terminate(void (*)())>
   16bc2:	Address 0x0000000000016bc2 is out of bounds.


00016bc4 <roundf>:
   16bc4:	b082      	sub	sp, #8
   16bc6:	ed8d 0a01 	vstr	s0, [sp, #4]
   16bca:	9901      	ldr	r1, [sp, #4]
   16bcc:	f3c1 53c7 	ubfx	r3, r1, #23, #8
   16bd0:	f1a3 027f 	sub.w	r2, r3, #127	; 0x7f
   16bd4:	2a16      	cmp	r2, #22
   16bd6:	dc0c      	bgt.n	16bf2 <roundf+0x2e>
   16bd8:	2a00      	cmp	r2, #0
   16bda:	db10      	blt.n	16bfe <roundf+0x3a>
   16bdc:	4810      	ldr	r0, [pc, #64]	; (16c20 <roundf+0x5c>)
   16bde:	4110      	asrs	r0, r2
   16be0:	4201      	tst	r1, r0
   16be2:	d008      	beq.n	16bf6 <roundf+0x32>
   16be4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   16be8:	4113      	asrs	r3, r2
   16bea:	440b      	add	r3, r1
   16bec:	ea23 0300 	bic.w	r3, r3, r0
   16bf0:	e00b      	b.n	16c0a <roundf+0x46>
   16bf2:	2a80      	cmp	r2, #128	; 0x80
   16bf4:	d00d      	beq.n	16c12 <roundf+0x4e>
   16bf6:	ed9d 0a01 	vldr	s0, [sp, #4]
   16bfa:	b002      	add	sp, #8
   16bfc:	4770      	bx	lr
   16bfe:	3201      	adds	r2, #1
   16c00:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
   16c04:	d101      	bne.n	16c0a <roundf+0x46>
   16c06:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
   16c0a:	ee00 3a10 	vmov	s0, r3
   16c0e:	b002      	add	sp, #8
   16c10:	4770      	bx	lr
   16c12:	eddd 7a01 	vldr	s15, [sp, #4]
   16c16:	ee37 0aa7 	vadd.f32	s0, s15, s15
   16c1a:	b002      	add	sp, #8
   16c1c:	4770      	bx	lr
   16c1e:	bf00      	nop
   16c20:	007fffff 	.word	0x007fffff

00016c24 <__aeabi_d2f>:
   16c24:	ea4f 0241 	mov.w	r2, r1, lsl #1
   16c28:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   16c2c:	bf24      	itt	cs
   16c2e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   16c32:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   16c36:	d90d      	bls.n	16c54 <__aeabi_d2f+0x30>
   16c38:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   16c3c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   16c40:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   16c44:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   16c48:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   16c4c:	bf08      	it	eq
   16c4e:	f020 0001 	biceq.w	r0, r0, #1
   16c52:	4770      	bx	lr
   16c54:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   16c58:	d121      	bne.n	16c9e <__aeabi_d2f+0x7a>
   16c5a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   16c5e:	bfbc      	itt	lt
   16c60:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   16c64:	4770      	bxlt	lr
   16c66:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   16c6a:	ea4f 5252 	mov.w	r2, r2, lsr #21
   16c6e:	f1c2 0218 	rsb	r2, r2, #24
   16c72:	f1c2 0c20 	rsb	ip, r2, #32
   16c76:	fa10 f30c 	lsls.w	r3, r0, ip
   16c7a:	fa20 f002 	lsr.w	r0, r0, r2
   16c7e:	bf18      	it	ne
   16c80:	f040 0001 	orrne.w	r0, r0, #1
   16c84:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   16c88:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   16c8c:	fa03 fc0c 	lsl.w	ip, r3, ip
   16c90:	ea40 000c 	orr.w	r0, r0, ip
   16c94:	fa23 f302 	lsr.w	r3, r3, r2
   16c98:	ea4f 0343 	mov.w	r3, r3, lsl #1
   16c9c:	e7cc      	b.n	16c38 <__aeabi_d2f+0x14>
   16c9e:	ea7f 5362 	mvns.w	r3, r2, asr #21
   16ca2:	d107      	bne.n	16cb4 <__aeabi_d2f+0x90>
   16ca4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   16ca8:	bf1e      	ittt	ne
   16caa:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   16cae:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   16cb2:	4770      	bxne	lr
   16cb4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   16cb8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   16cbc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   16cc0:	4770      	bx	lr
   16cc2:	bf00      	nop

00016cc4 <__aeabi_uldivmod>:
   16cc4:	b953      	cbnz	r3, 16cdc <__aeabi_uldivmod+0x18>
   16cc6:	b94a      	cbnz	r2, 16cdc <__aeabi_uldivmod+0x18>
   16cc8:	2900      	cmp	r1, #0
   16cca:	bf08      	it	eq
   16ccc:	2800      	cmpeq	r0, #0
   16cce:	bf1c      	itt	ne
   16cd0:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
   16cd4:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   16cd8:	f000 b972 	b.w	16fc0 <__aeabi_idiv0>
   16cdc:	f1ad 0c08 	sub.w	ip, sp, #8
   16ce0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   16ce4:	f000 f806 	bl	16cf4 <__udivmoddi4>
   16ce8:	f8dd e004 	ldr.w	lr, [sp, #4]
   16cec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   16cf0:	b004      	add	sp, #16
   16cf2:	4770      	bx	lr

00016cf4 <__udivmoddi4>:
   16cf4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16cf8:	9e08      	ldr	r6, [sp, #32]
   16cfa:	4604      	mov	r4, r0
   16cfc:	4688      	mov	r8, r1
   16cfe:	2b00      	cmp	r3, #0
   16d00:	d14b      	bne.n	16d9a <__udivmoddi4+0xa6>
   16d02:	428a      	cmp	r2, r1
   16d04:	4615      	mov	r5, r2
   16d06:	d967      	bls.n	16dd8 <__udivmoddi4+0xe4>
   16d08:	fab2 f282 	clz	r2, r2
   16d0c:	b14a      	cbz	r2, 16d22 <__udivmoddi4+0x2e>
   16d0e:	f1c2 0720 	rsb	r7, r2, #32
   16d12:	fa01 f302 	lsl.w	r3, r1, r2
   16d16:	fa20 f707 	lsr.w	r7, r0, r7
   16d1a:	4095      	lsls	r5, r2
   16d1c:	ea47 0803 	orr.w	r8, r7, r3
   16d20:	4094      	lsls	r4, r2
   16d22:	ea4f 4e15 	mov.w	lr, r5, lsr #16
   16d26:	0c23      	lsrs	r3, r4, #16
   16d28:	fbb8 f7fe 	udiv	r7, r8, lr
   16d2c:	fa1f fc85 	uxth.w	ip, r5
   16d30:	fb0e 8817 	mls	r8, lr, r7, r8
   16d34:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
   16d38:	fb07 f10c 	mul.w	r1, r7, ip
   16d3c:	4299      	cmp	r1, r3
   16d3e:	d909      	bls.n	16d54 <__udivmoddi4+0x60>
   16d40:	18eb      	adds	r3, r5, r3
   16d42:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
   16d46:	f080 811b 	bcs.w	16f80 <__udivmoddi4+0x28c>
   16d4a:	4299      	cmp	r1, r3
   16d4c:	f240 8118 	bls.w	16f80 <__udivmoddi4+0x28c>
   16d50:	3f02      	subs	r7, #2
   16d52:	442b      	add	r3, r5
   16d54:	1a5b      	subs	r3, r3, r1
   16d56:	b2a4      	uxth	r4, r4
   16d58:	fbb3 f0fe 	udiv	r0, r3, lr
   16d5c:	fb0e 3310 	mls	r3, lr, r0, r3
   16d60:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
   16d64:	fb00 fc0c 	mul.w	ip, r0, ip
   16d68:	45a4      	cmp	ip, r4
   16d6a:	d909      	bls.n	16d80 <__udivmoddi4+0x8c>
   16d6c:	192c      	adds	r4, r5, r4
   16d6e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   16d72:	f080 8107 	bcs.w	16f84 <__udivmoddi4+0x290>
   16d76:	45a4      	cmp	ip, r4
   16d78:	f240 8104 	bls.w	16f84 <__udivmoddi4+0x290>
   16d7c:	3802      	subs	r0, #2
   16d7e:	442c      	add	r4, r5
   16d80:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
   16d84:	eba4 040c 	sub.w	r4, r4, ip
   16d88:	2700      	movs	r7, #0
   16d8a:	b11e      	cbz	r6, 16d94 <__udivmoddi4+0xa0>
   16d8c:	40d4      	lsrs	r4, r2
   16d8e:	2300      	movs	r3, #0
   16d90:	e9c6 4300 	strd	r4, r3, [r6]
   16d94:	4639      	mov	r1, r7
   16d96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   16d9a:	428b      	cmp	r3, r1
   16d9c:	d909      	bls.n	16db2 <__udivmoddi4+0xbe>
   16d9e:	2e00      	cmp	r6, #0
   16da0:	f000 80eb 	beq.w	16f7a <__udivmoddi4+0x286>
   16da4:	2700      	movs	r7, #0
   16da6:	e9c6 0100 	strd	r0, r1, [r6]
   16daa:	4638      	mov	r0, r7
   16dac:	4639      	mov	r1, r7
   16dae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   16db2:	fab3 f783 	clz	r7, r3
   16db6:	2f00      	cmp	r7, #0
   16db8:	d147      	bne.n	16e4a <__udivmoddi4+0x156>
   16dba:	428b      	cmp	r3, r1
   16dbc:	d302      	bcc.n	16dc4 <__udivmoddi4+0xd0>
   16dbe:	4282      	cmp	r2, r0
   16dc0:	f200 80fa 	bhi.w	16fb8 <__udivmoddi4+0x2c4>
   16dc4:	1a84      	subs	r4, r0, r2
   16dc6:	eb61 0303 	sbc.w	r3, r1, r3
   16dca:	2001      	movs	r0, #1
   16dcc:	4698      	mov	r8, r3
   16dce:	2e00      	cmp	r6, #0
   16dd0:	d0e0      	beq.n	16d94 <__udivmoddi4+0xa0>
   16dd2:	e9c6 4800 	strd	r4, r8, [r6]
   16dd6:	e7dd      	b.n	16d94 <__udivmoddi4+0xa0>
   16dd8:	b902      	cbnz	r2, 16ddc <__udivmoddi4+0xe8>
   16dda:	deff      	udf	#255	; 0xff
   16ddc:	fab2 f282 	clz	r2, r2
   16de0:	2a00      	cmp	r2, #0
   16de2:	f040 808f 	bne.w	16f04 <__udivmoddi4+0x210>
   16de6:	1b49      	subs	r1, r1, r5
   16de8:	ea4f 4e15 	mov.w	lr, r5, lsr #16
   16dec:	fa1f f885 	uxth.w	r8, r5
   16df0:	2701      	movs	r7, #1
   16df2:	fbb1 fcfe 	udiv	ip, r1, lr
   16df6:	0c23      	lsrs	r3, r4, #16
   16df8:	fb0e 111c 	mls	r1, lr, ip, r1
   16dfc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   16e00:	fb08 f10c 	mul.w	r1, r8, ip
   16e04:	4299      	cmp	r1, r3
   16e06:	d907      	bls.n	16e18 <__udivmoddi4+0x124>
   16e08:	18eb      	adds	r3, r5, r3
   16e0a:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
   16e0e:	d202      	bcs.n	16e16 <__udivmoddi4+0x122>
   16e10:	4299      	cmp	r1, r3
   16e12:	f200 80cd 	bhi.w	16fb0 <__udivmoddi4+0x2bc>
   16e16:	4684      	mov	ip, r0
   16e18:	1a59      	subs	r1, r3, r1
   16e1a:	b2a3      	uxth	r3, r4
   16e1c:	fbb1 f0fe 	udiv	r0, r1, lr
   16e20:	fb0e 1410 	mls	r4, lr, r0, r1
   16e24:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
   16e28:	fb08 f800 	mul.w	r8, r8, r0
   16e2c:	45a0      	cmp	r8, r4
   16e2e:	d907      	bls.n	16e40 <__udivmoddi4+0x14c>
   16e30:	192c      	adds	r4, r5, r4
   16e32:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   16e36:	d202      	bcs.n	16e3e <__udivmoddi4+0x14a>
   16e38:	45a0      	cmp	r8, r4
   16e3a:	f200 80b6 	bhi.w	16faa <__udivmoddi4+0x2b6>
   16e3e:	4618      	mov	r0, r3
   16e40:	eba4 0408 	sub.w	r4, r4, r8
   16e44:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
   16e48:	e79f      	b.n	16d8a <__udivmoddi4+0x96>
   16e4a:	f1c7 0c20 	rsb	ip, r7, #32
   16e4e:	40bb      	lsls	r3, r7
   16e50:	fa22 fe0c 	lsr.w	lr, r2, ip
   16e54:	ea4e 0e03 	orr.w	lr, lr, r3
   16e58:	fa01 f407 	lsl.w	r4, r1, r7
   16e5c:	fa20 f50c 	lsr.w	r5, r0, ip
   16e60:	fa21 f30c 	lsr.w	r3, r1, ip
   16e64:	ea4f 481e 	mov.w	r8, lr, lsr #16
   16e68:	4325      	orrs	r5, r4
   16e6a:	fbb3 f9f8 	udiv	r9, r3, r8
   16e6e:	0c2c      	lsrs	r4, r5, #16
   16e70:	fb08 3319 	mls	r3, r8, r9, r3
   16e74:	fa1f fa8e 	uxth.w	sl, lr
   16e78:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
   16e7c:	fb09 f40a 	mul.w	r4, r9, sl
   16e80:	429c      	cmp	r4, r3
   16e82:	fa02 f207 	lsl.w	r2, r2, r7
   16e86:	fa00 f107 	lsl.w	r1, r0, r7
   16e8a:	d90b      	bls.n	16ea4 <__udivmoddi4+0x1b0>
   16e8c:	eb1e 0303 	adds.w	r3, lr, r3
   16e90:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
   16e94:	f080 8087 	bcs.w	16fa6 <__udivmoddi4+0x2b2>
   16e98:	429c      	cmp	r4, r3
   16e9a:	f240 8084 	bls.w	16fa6 <__udivmoddi4+0x2b2>
   16e9e:	f1a9 0902 	sub.w	r9, r9, #2
   16ea2:	4473      	add	r3, lr
   16ea4:	1b1b      	subs	r3, r3, r4
   16ea6:	b2ad      	uxth	r5, r5
   16ea8:	fbb3 f0f8 	udiv	r0, r3, r8
   16eac:	fb08 3310 	mls	r3, r8, r0, r3
   16eb0:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
   16eb4:	fb00 fa0a 	mul.w	sl, r0, sl
   16eb8:	45a2      	cmp	sl, r4
   16eba:	d908      	bls.n	16ece <__udivmoddi4+0x1da>
   16ebc:	eb1e 0404 	adds.w	r4, lr, r4
   16ec0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   16ec4:	d26b      	bcs.n	16f9e <__udivmoddi4+0x2aa>
   16ec6:	45a2      	cmp	sl, r4
   16ec8:	d969      	bls.n	16f9e <__udivmoddi4+0x2aa>
   16eca:	3802      	subs	r0, #2
   16ecc:	4474      	add	r4, lr
   16ece:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   16ed2:	fba0 8902 	umull	r8, r9, r0, r2
   16ed6:	eba4 040a 	sub.w	r4, r4, sl
   16eda:	454c      	cmp	r4, r9
   16edc:	46c2      	mov	sl, r8
   16ede:	464b      	mov	r3, r9
   16ee0:	d354      	bcc.n	16f8c <__udivmoddi4+0x298>
   16ee2:	d051      	beq.n	16f88 <__udivmoddi4+0x294>
   16ee4:	2e00      	cmp	r6, #0
   16ee6:	d069      	beq.n	16fbc <__udivmoddi4+0x2c8>
   16ee8:	ebb1 050a 	subs.w	r5, r1, sl
   16eec:	eb64 0403 	sbc.w	r4, r4, r3
   16ef0:	fa04 fc0c 	lsl.w	ip, r4, ip
   16ef4:	40fd      	lsrs	r5, r7
   16ef6:	40fc      	lsrs	r4, r7
   16ef8:	ea4c 0505 	orr.w	r5, ip, r5
   16efc:	e9c6 5400 	strd	r5, r4, [r6]
   16f00:	2700      	movs	r7, #0
   16f02:	e747      	b.n	16d94 <__udivmoddi4+0xa0>
   16f04:	f1c2 0320 	rsb	r3, r2, #32
   16f08:	fa20 f703 	lsr.w	r7, r0, r3
   16f0c:	4095      	lsls	r5, r2
   16f0e:	fa01 f002 	lsl.w	r0, r1, r2
   16f12:	fa21 f303 	lsr.w	r3, r1, r3
   16f16:	ea4f 4e15 	mov.w	lr, r5, lsr #16
   16f1a:	4338      	orrs	r0, r7
   16f1c:	0c01      	lsrs	r1, r0, #16
   16f1e:	fbb3 f7fe 	udiv	r7, r3, lr
   16f22:	fa1f f885 	uxth.w	r8, r5
   16f26:	fb0e 3317 	mls	r3, lr, r7, r3
   16f2a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   16f2e:	fb07 f308 	mul.w	r3, r7, r8
   16f32:	428b      	cmp	r3, r1
   16f34:	fa04 f402 	lsl.w	r4, r4, r2
   16f38:	d907      	bls.n	16f4a <__udivmoddi4+0x256>
   16f3a:	1869      	adds	r1, r5, r1
   16f3c:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
   16f40:	d22f      	bcs.n	16fa2 <__udivmoddi4+0x2ae>
   16f42:	428b      	cmp	r3, r1
   16f44:	d92d      	bls.n	16fa2 <__udivmoddi4+0x2ae>
   16f46:	3f02      	subs	r7, #2
   16f48:	4429      	add	r1, r5
   16f4a:	1acb      	subs	r3, r1, r3
   16f4c:	b281      	uxth	r1, r0
   16f4e:	fbb3 f0fe 	udiv	r0, r3, lr
   16f52:	fb0e 3310 	mls	r3, lr, r0, r3
   16f56:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   16f5a:	fb00 f308 	mul.w	r3, r0, r8
   16f5e:	428b      	cmp	r3, r1
   16f60:	d907      	bls.n	16f72 <__udivmoddi4+0x27e>
   16f62:	1869      	adds	r1, r5, r1
   16f64:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
   16f68:	d217      	bcs.n	16f9a <__udivmoddi4+0x2a6>
   16f6a:	428b      	cmp	r3, r1
   16f6c:	d915      	bls.n	16f9a <__udivmoddi4+0x2a6>
   16f6e:	3802      	subs	r0, #2
   16f70:	4429      	add	r1, r5
   16f72:	1ac9      	subs	r1, r1, r3
   16f74:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
   16f78:	e73b      	b.n	16df2 <__udivmoddi4+0xfe>
   16f7a:	4637      	mov	r7, r6
   16f7c:	4630      	mov	r0, r6
   16f7e:	e709      	b.n	16d94 <__udivmoddi4+0xa0>
   16f80:	4607      	mov	r7, r0
   16f82:	e6e7      	b.n	16d54 <__udivmoddi4+0x60>
   16f84:	4618      	mov	r0, r3
   16f86:	e6fb      	b.n	16d80 <__udivmoddi4+0x8c>
   16f88:	4541      	cmp	r1, r8
   16f8a:	d2ab      	bcs.n	16ee4 <__udivmoddi4+0x1f0>
   16f8c:	ebb8 0a02 	subs.w	sl, r8, r2
   16f90:	eb69 020e 	sbc.w	r2, r9, lr
   16f94:	3801      	subs	r0, #1
   16f96:	4613      	mov	r3, r2
   16f98:	e7a4      	b.n	16ee4 <__udivmoddi4+0x1f0>
   16f9a:	4660      	mov	r0, ip
   16f9c:	e7e9      	b.n	16f72 <__udivmoddi4+0x27e>
   16f9e:	4618      	mov	r0, r3
   16fa0:	e795      	b.n	16ece <__udivmoddi4+0x1da>
   16fa2:	4667      	mov	r7, ip
   16fa4:	e7d1      	b.n	16f4a <__udivmoddi4+0x256>
   16fa6:	4681      	mov	r9, r0
   16fa8:	e77c      	b.n	16ea4 <__udivmoddi4+0x1b0>
   16faa:	3802      	subs	r0, #2
   16fac:	442c      	add	r4, r5
   16fae:	e747      	b.n	16e40 <__udivmoddi4+0x14c>
   16fb0:	f1ac 0c02 	sub.w	ip, ip, #2
   16fb4:	442b      	add	r3, r5
   16fb6:	e72f      	b.n	16e18 <__udivmoddi4+0x124>
   16fb8:	4638      	mov	r0, r7
   16fba:	e708      	b.n	16dce <__udivmoddi4+0xda>
   16fbc:	4637      	mov	r7, r6
   16fbe:	e6e9      	b.n	16d94 <__udivmoddi4+0xa0>

00016fc0 <__aeabi_idiv0>:
   16fc0:	4770      	bx	lr
   16fc2:	bf00      	nop

00016fc4 <abort>:
   16fc4:	b508      	push	{r3, lr}
   16fc6:	2006      	movs	r0, #6
   16fc8:	f000 f858 	bl	1707c <raise>
   16fcc:	2001      	movs	r0, #1
   16fce:	f7fb feaf 	bl	12d30 <_exit>
   16fd2:	Address 0x0000000000016fd2 is out of bounds.


00016fd4 <__libc_init_array>:
   16fd4:	b570      	push	{r4, r5, r6, lr}
   16fd6:	4e0d      	ldr	r6, [pc, #52]	; (1700c <__libc_init_array+0x38>)
   16fd8:	4c0d      	ldr	r4, [pc, #52]	; (17010 <__libc_init_array+0x3c>)
   16fda:	1ba4      	subs	r4, r4, r6
   16fdc:	10a4      	asrs	r4, r4, #2
   16fde:	2500      	movs	r5, #0
   16fe0:	42a5      	cmp	r5, r4
   16fe2:	d109      	bne.n	16ff8 <__libc_init_array+0x24>
   16fe4:	4e0b      	ldr	r6, [pc, #44]	; (17014 <__libc_init_array+0x40>)
   16fe6:	4c0c      	ldr	r4, [pc, #48]	; (17018 <__libc_init_array+0x44>)
   16fe8:	f7f9 f98a 	bl	10300 <_init>
   16fec:	1ba4      	subs	r4, r4, r6
   16fee:	10a4      	asrs	r4, r4, #2
   16ff0:	2500      	movs	r5, #0
   16ff2:	42a5      	cmp	r5, r4
   16ff4:	d105      	bne.n	17002 <__libc_init_array+0x2e>
   16ff6:	bd70      	pop	{r4, r5, r6, pc}
   16ff8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   16ffc:	4798      	blx	r3
   16ffe:	3501      	adds	r5, #1
   17000:	e7ee      	b.n	16fe0 <__libc_init_array+0xc>
   17002:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   17006:	4798      	blx	r3
   17008:	3501      	adds	r5, #1
   1700a:	e7f2      	b.n	16ff2 <__libc_init_array+0x1e>
   1700c:	0001030c 	.word	0x0001030c
   17010:	0001030c 	.word	0x0001030c
   17014:	0001030c 	.word	0x0001030c
   17018:	00010318 	.word	0x00010318

0001701c <memset>:
   1701c:	4402      	add	r2, r0
   1701e:	4603      	mov	r3, r0
   17020:	4293      	cmp	r3, r2
   17022:	d100      	bne.n	17026 <memset+0xa>
   17024:	4770      	bx	lr
   17026:	f803 1b01 	strb.w	r1, [r3], #1
   1702a:	e7f9      	b.n	17020 <memset+0x4>

0001702c <_raise_r>:
   1702c:	291f      	cmp	r1, #31
   1702e:	b538      	push	{r3, r4, r5, lr}
   17030:	4604      	mov	r4, r0
   17032:	460d      	mov	r5, r1
   17034:	d904      	bls.n	17040 <_raise_r+0x14>
   17036:	2316      	movs	r3, #22
   17038:	6003      	str	r3, [r0, #0]
   1703a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1703e:	bd38      	pop	{r3, r4, r5, pc}
   17040:	6c42      	ldr	r2, [r0, #68]	; 0x44
   17042:	b112      	cbz	r2, 1704a <_raise_r+0x1e>
   17044:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
   17048:	b94b      	cbnz	r3, 1705e <_raise_r+0x32>
   1704a:	4620      	mov	r0, r4
   1704c:	f000 f830 	bl	170b0 <_getpid_r>
   17050:	462a      	mov	r2, r5
   17052:	4601      	mov	r1, r0
   17054:	4620      	mov	r0, r4
   17056:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1705a:	f000 b817 	b.w	1708c <_kill_r>
   1705e:	2b01      	cmp	r3, #1
   17060:	d00a      	beq.n	17078 <_raise_r+0x4c>
   17062:	1c59      	adds	r1, r3, #1
   17064:	d103      	bne.n	1706e <_raise_r+0x42>
   17066:	2316      	movs	r3, #22
   17068:	6003      	str	r3, [r0, #0]
   1706a:	2001      	movs	r0, #1
   1706c:	e7e7      	b.n	1703e <_raise_r+0x12>
   1706e:	2400      	movs	r4, #0
   17070:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
   17074:	4628      	mov	r0, r5
   17076:	4798      	blx	r3
   17078:	2000      	movs	r0, #0
   1707a:	e7e0      	b.n	1703e <_raise_r+0x12>

0001707c <raise>:
   1707c:	4b02      	ldr	r3, [pc, #8]	; (17088 <raise+0xc>)
   1707e:	4601      	mov	r1, r0
   17080:	6818      	ldr	r0, [r3, #0]
   17082:	f7ff bfd3 	b.w	1702c <_raise_r>
   17086:	bf00      	nop
   17088:	100001d8 	.word	0x100001d8

0001708c <_kill_r>:
   1708c:	b538      	push	{r3, r4, r5, lr}
   1708e:	4c07      	ldr	r4, [pc, #28]	; (170ac <_kill_r+0x20>)
   17090:	2300      	movs	r3, #0
   17092:	4605      	mov	r5, r0
   17094:	4608      	mov	r0, r1
   17096:	4611      	mov	r1, r2
   17098:	6023      	str	r3, [r4, #0]
   1709a:	f7fb fe67 	bl	12d6c <_kill>
   1709e:	1c43      	adds	r3, r0, #1
   170a0:	d102      	bne.n	170a8 <_kill_r+0x1c>
   170a2:	6823      	ldr	r3, [r4, #0]
   170a4:	b103      	cbz	r3, 170a8 <_kill_r+0x1c>
   170a6:	602b      	str	r3, [r5, #0]
   170a8:	bd38      	pop	{r3, r4, r5, pc}
   170aa:	bf00      	nop
   170ac:	100006a8 	.word	0x100006a8

000170b0 <_getpid_r>:
   170b0:	f7fb be4a 	b.w	12d48 <_getpid>

000170b4 <main::file>:
   170b4:	616d 6e69 632e 7070 ff00 ffff 5b1b 3234     main.cpp.....[42
   170c4:	206d 2020 4920 464e 1b4f 305b 393b 6d34     m    INFO.[0;94m
   170d4:	253a 3a73 5b1b 3b30 3239 256d 3a73 5b1b     :%s:.[0;92m%s:.[
   170e4:	3b30 3339 256d 3e64 1b20 305b 333b 6d37     0;93m%d> .[0;37m
   170f4:	7453 7261 1b74 305b 0a6d 0000 5b1b 3234     Start.[0m....[42
   17104:	206d 2020 4920 464e 1b4f 305b 393b 6d34     m    INFO.[0;94m
   17114:	253a 3a73 5b1b 3b30 3239 256d 3a73 5b1b     :%s:.[0;92m%s:.[
   17124:	3b30 3339 256d 3e64 1b20 305b 333b 6d37     0;93m%d> .[0;37m
   17134:	6e49 7420 6568 6920 746e 7265 7572 7470     In the interrupt
   17144:	5b1b 6d30 000a ffff                         .[0m....

0001714c <main::__PRETTY_FUNCTION__>:
   1714c:	6e69 2074 616d 6e69 2928 ff00 7453 6361     int main()..Stac
   1715c:	206b 6544 7470 2068 203d 7a25 0a64 0000     k Depth = %zd...
   1716c:	2020 2523 757a 203a 7830 7025 000a 0000       #%zu: 0x%p....
   1717c:	520a 6e75 203a 6874 2065 6f66 6c6c 776f     .Run: the follow
   1718c:	6e69 2067 6f63 6d6d 6e61 2064 6e69 7920     ing command in y
   1719c:	756f 2072 7270 6a6f 6365 2074 6964 6572     our project dire
   171ac:	7463 726f 0079 0000 200a 1b20 315b 333b     ctory....  .[1;3
   171bc:	6d37 616d 656b 7320 6174 6b63 7274 6361     7mmake stacktrac
   171cc:	2d65 7325 5420 4152 4543 3d53 0022 0000     e-%s TRACES="...
   171dc:	7830 7025 0000 0000 3020 2578 0070 0000     0x%p.... 0x%p...
   171ec:	0a22 5b1b 6d30 0000 6854 7369 7720 6c69     "..[0m..This wil
   171fc:	206c 6572 6f70 7472 7420 6568 6620 6c69     l report the fil
   1720c:	2065 6e61 2064 696c 656e 6e20 6d75 6562     e and line numbe
   1721c:	2072 6874 7461 6c20 6465 7420 206f 6874     r that led to th
   1722c:	7369 6620 6e75 7463 6f69 206e 6562 6e69     is function bein
   1723c:	2067 6163 6c6c 6465 002e 0000 7061 6c70     g called....appl
   1724c:	6369 7461 6f69 006e 5b1b 3134 436d 4952     ication..[41mCRI
   1725c:	4954 4143 1b4c 305b 393b 6d34 253a 3a73     TICAL.[0;94m:%s:
   1726c:	5b1b 3b30 3239 256d 3a73 5b1b 3b30 3339     .[0;92m%s:.[0;93
   1727c:	256d 3e64 1b20 305b 333b 6d37 7341 6573     m%d> .[0;37mAsse
   1728c:	7472 6f69 206e 6146 6c69 7275 2c65 4320     rtion Failure, C
   1729c:	6e6f 6964 6974 6e6f 5420 7365 6574 3a64     ondition Tested:
   172ac:	2820 6570 6972 6870 7265 6c61 645f 7669      (peripheral_div
   172bc:	6469 7265 3c20 203d 2934 200a 2020 2020     ider <= 4).     
   172cc:	2020 2020 4420 7669 6469 7265 6d20 7375          Divider mus
   172dc:	6e74 7427 6520 6378 6565 2064 3233 5b1b     tn't exceed 32.[
   172ec:	6d30 5b1b 6d30 000a 500a 6972 746e 6e69     0m.[0m...Printin
   172fc:	2067 7453 6361 206b 7254 6361 3a65 000a     g Stack Trace:..
   1730c:	5b1b 3134 436d 4952 4954 4143 1b4c 305b     .[41mCRITICAL.[0
   1731c:	393b 6d34 253a 3a73 5b1b 3b30 3239 256d     ;94m:%s:.[0;92m%
   1732c:	3a73 5b1b 3b30 3339 256d 3e64 1b20 305b     s:.[0;93m%d> .[0
   1733c:	333b 6d37 7341 6573 7472 6f69 206e 6146     ;37mAssertion Fa
   1734c:	6c69 7275 2c65 4320 6e6f 6964 6974 6e6f     ilure, Condition
   1735c:	5420 7365 6574 3a64 2820 6564 6973 6572      Tested: (desire
   1736c:	5f64 7073 6565 5f64 6e69 6d5f 7a68 3c20     d_speed_in_mhz <
   1737c:	3320 3438 2620 2026 6564 6973 6572 5f64      384 && desired_
   1738c:	7073 6565 5f64 6e69 6d5f 7a68 3e20 3120     speed_in_mhz > 1
   1739c:	2932 200a 2020 2020 2020 2020 4620 6572     2).          Fre
   173ac:	7571 6e65 7963 6d20 7375 2074 6562 6c20     quency must be l
   173bc:	776f 7265 7420 6168 206e 3833 2034 484d     ower than 384 MH
   173cc:	617a 646e 6720 6572 7461 7265 7420 6168     zand greater tha
   173dc:	206e 726f 6520 7571 6c61 7420 206f 3231     n or equal to 12
   173ec:	4d20 7a48 5b1b 6d30 5b1b 6d30 000a 0000      MHz.[0m.[0m....
   173fc:	5b1b 3134 436d 4952 4954 4143 1b4c 305b     .[41mCRITICAL.[0
   1740c:	393b 6d34 253a 3a73 5b1b 3b30 3239 256d     ;94m:%s:.[0;92m%
   1741c:	3a73 5b1b 3b30 3339 256d 3e64 1b20 305b     s:.[0;93m%d> .[0
   1742c:	333b 6d37 7341 6573 7472 6f69 206e 6146     ;37mAssertion Fa
   1743c:	6c69 7275 2c65 4320 6e6f 6964 6974 6e6f     ilure, Condition
   1744c:	5420 7365 6574 3a64 2820 6964 6976 6564      Tested: (divide
   1745c:	5f72 6176 756c 2065 203c 2938 200a 2020     r_value < 8).   
   1746c:	2020 2020 2020 5020 4c4c 6420 7669 6469            PLL divid
   1747c:	7265 7620 6c61 6575 7720 6e65 2074 756f     er value went ou
   1748c:	2074 666f 6220 756f 646e 1b73 305b 1b6d     t of bounds.[0m.
   1749c:	305b 0a6d 0000 0000 5b1b 3134 436d 4952     [0m......[41mCRI
   174ac:	4954 4143 1b4c 305b 393b 6d34 253a 3a73     TICAL.[0;94m:%s:
   174bc:	5b1b 3b30 3239 256d 3a73 5b1b 3b30 3339     .[0;92m%s:.[0;93
   174cc:	256d 3e64 1b20 305b 333b 6d37 7341 6573     m%d> .[0;37mAsse
   174dc:	7472 6f69 206e 6146 6c69 7275 2c65 4320     rtion Failure, C
   174ec:	6e6f 6964 6974 6e6f 5420 7365 6574 3a64     ondition Tested:
   174fc:	2820 6166 736c 2965 200a 2020 2020 2020      (false).       
   1750c:	2020 5020 4c4c 6c20 636f 206b 6f63 6c75        PLL lock coul
   1751c:	2064 6f6e 2074 6562 6520 7473 6261 696c     d not be establi
   1752c:	6873 6465 6220 6665 726f 2065 6974 656d     shed before time
   1753c:	756f 1b74 305b 1b6d 305b 0a6d 0000 0000     out.[0m.[0m.....
   1754c:	5b1b 3134 436d 4952 4954 4143 1b4c 305b     .[41mCRITICAL.[0
   1755c:	393b 6d34 253a 3a73 5b1b 3b30 3239 256d     ;94m:%s:.[0;92m%
   1756c:	3a73 5b1b 3b30 3339 256d 3e64 1b20 305b     s:.[0;93m%d> .[0
   1757c:	333b 6d37 7341 6573 7472 6f69 206e 6146     ;37mAssertion Fa
   1758c:	6c69 7275 2c65 4320 6e6f 6964 6974 6e6f     ilure, Condition
   1759c:	5420 7365 6574 3a64 2820 7063 5f75 6964      Tested: (cpu_di
   175ac:	6976 6564 2072 203c 3233 0a29 2020 2020     vider < 32).    
   175bc:	2020 2020 2020 6944 6976 6564 2072 756d           Divider mu
   175cc:	7473 276e 2074 7865 6563 6465 3320 1b32     stn't exceed 32.
   175dc:	305b 1b6d 305b 0a6d 0000 0000 5b1b 3134     [0m.[0m......[41
   175ec:	436d 4952 4954 4143 1b4c 305b 393b 6d34     mCRITICAL.[0;94m
   175fc:	253a 3a73 5b1b 3b30 3239 256d 3a73 5b1b     :%s:.[0;92m%s:.[
   1760c:	3b30 3339 256d 3e64 1b20 305b 333b 6d37     0;93m%d> .[0;37m
   1761c:	7341 6573 7472 6f69 206e 6146 6c69 7275     Assertion Failur
   1762c:	2c65 4320 6e6f 6964 6974 6e6f 5420 7365     e, Condition Tes
   1763c:	6574 3a64 2820 7266 7165 6575 636e 2079     ted: (frequency 
   1764c:	3d21 3020 0a29 2020 2020 2020 2020 2020     != 0).          
   1765c:	6143 6e6e 746f 6820 7661 2065 657a 6f72     Cannot have zero
   1766c:	7420 6369 736b 7020 7265 6d20 6369 6f72      ticks per micro
   1767c:	6573 6f63 646e 202c 6c70 6165 6573 6320     second, please c
   1768c:	6f68 736f 2065 2031 726f 6d20 726f 2e65     hoose 1 or more.
   1769c:	5b1b 6d30 5b1b 6d30 000a 0000 5b1b 3334     .[0m.[0m.....[43
   176ac:	206d 4157 4e52 4e49 1b47 305b 393b 6d34     m WARNING.[0;94m
   176bc:	253a 3a73 5b1b 3b30 3239 256d 3a73 5b1b     :%s:.[0;92m%s:.[
   176cc:	3b30 3339 256d 3e64 1b20 305b 333b 6d37     0;93m%d> .[0;37m
   176dc:	7953 7473 6d65 5420 6d69 7265 6820 7361     System Timer has
   176ec:	4620 4941 454c 2044 6f74 7320 6174 7472      FAILED to start
   176fc:	1b21 305b 1b6d 305b 0a6d ff00               !.[0m.[0m...

00017708 <Lpc40xxSystemController::SetPeripheralClockDivider(unsigned char)::file>:
   17708:	7973 7473 6d65 635f 6e6f 7274 6c6f 656c     system_controlle
   17718:	2e72 7068 0070 ffff                         r.hpp...

00017720 <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)::file>:
   17720:	7973 7473 6d65 635f 6e6f 7274 6c6f 656c     system_controlle
   17730:	2e72 7068 0070 ffff                         r.hpp...

00017738 <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)::file>:
   17738:	7973 7473 6d65 635f 6e6f 7274 6c6f 656c     system_controlle
   17748:	2e72 7068 0070 ffff                         r.hpp...

00017750 <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)::file>:
   17750:	7973 7473 6d65 635f 6e6f 7274 6c6f 656c     system_controlle
   17760:	2e72 7068 0070 ffff                         r.hpp...

00017768 <Lpc40xxSystemController::SetCpuClockDivider(unsigned char)::file>:
   17768:	7973 7473 6d65 635f 6e6f 7274 6c6f 656c     system_controlle
   17778:	2e72 7068 0070 ffff                         r.hpp...

00017780 <Timer::kPowerbit>:
   17780:	0001 0000 0002 0000 0016 0000 0017 0000     ................

00017790 <Timer::kTimerIrq>:
   17790:	0201 0403                                   ....

00017794 <Timer::kTimerIsr>:
   17794:	2589 0001 25c5 0001 2601 0001 263d 0001     .%...%...&..=&..

000177a4 <Timer::Initialize(unsigned long, void (*)(), long)::file>:
   177a4:	6974 656d 2e72 7068 0070 ffff               timer.hpp...

000177b0 <Uart::kTxUartPortFunction>:
   177b0:	0201 0502                                   ....

000177b4 <Uart::kRxUartPortFunction>:
   177b4:	0201 0302                                   ....

000177b8 <Uart::kPowerbit>:
   177b8:	0003 0000 0018 0000 0019 0000 0008 0000     ................

000177c8 <LowLevelInit()::file>:
   177c8:	7473 7261 7574 2e70 7063 0070               startup.cpp.

000177d4 <vtable for Uart>:
	...
   177dc:	1b81 0001 1c4d 0001 1d7d 0001 1eb1 0001     ....M...}.......
   177ec:	fffc ffff 0000 0000 0b55 0001 0be5 0001     ........U.......
   177fc:	0c3d 0001 0c55 0001 0c69 0001 0ca9 0001     =...U...i.......
   1780c:	0cd9 0001                                   ....

00017810 <vtable for Timer>:
	...
   17818:	18e9 0001 1a4d 0001 1b45 0001 fffc ffff     ....M...E.......
   17828:	0000 0000 0b55 0001 0be5 0001 0c3d 0001     ....U.......=...
   17838:	0c55 0001 0c69 0001 0ca9 0001 0cd9 0001     U...i...........

00017848 <vtable for Pin>:
	...
   17850:	12b9 0001 1331 0001 13b1 0001 1425 0001     ....1.......%...
   17860:	1499 0001 1515 0001 1591 0001 1605 0001     ................
   17870:	1681 0001 16f5 0001 1769 0001 1841 0001     ........i...A...
   17880:	186d 0001                                   m...

00017884 <vtable for SystemTimer>:
	...
   1788c:	1155 0001 1189 0001 1225 0001 fffc ffff     U.......%.......
   1789c:	0000 0000 0b55 0001 0be5 0001 0c3d 0001     ....U.......=...
   178ac:	0c55 0001 0c69 0001 0ca9 0001 0cd9 0001     U...i...........

000178bc <vtable for Lpc40xxSystemController>:
	...
   178c4:	0b55 0001 0be5 0001 0c3d 0001 0c55 0001     U.......=...U...
   178d4:	0c69 0001 0ca9 0001 0cd9 0001               i...........

000178e0 <Lpc40xxSystemController::SetPeripheralClockDivider(unsigned char)::__PRETTY_FUNCTION__>:
   178e0:	6976 7472 6175 206c 6f76 6469 4c20 6370     virtual void Lpc
   178f0:	3034 7878 7953 7473 6d65 6f43 746e 6f72     40xxSystemContro
   17900:	6c6c 7265 3a3a 6553 5074 7265 7069 6568     ller::SetPeriphe
   17910:	6172 436c 6f6c 6b63 6944 6976 6564 2872     ralClockDivider(
   17920:	6975 746e 5f38 2974 ff00 ffff               uint8_t)....

0001792c <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)::__PRETTY_FUNCTION__>:
   1792c:	6975 746e 3233 745f 4c20 6370 3034 7878     uint32_t Lpc40xx
   1793c:	7953 7473 6d65 6f43 746e 6f72 6c6c 7265     SystemController
   1794c:	3a3a 6553 4d74 6961 506e 6c6c 4c28 6370     ::SetMainPll(Lpc
   1795c:	3034 7878 7953 7473 6d65 6f43 746e 6f72     40xxSystemContro
   1796c:	6c6c 7265 3a3a 6c50 496c 706e 7475 202c     ller::PllInput, 
   1797c:	6975 746e 3631 745f 0029 ffff               uint16_t)...

00017988 <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)::__PRETTY_FUNCTION__>:
   17988:	6975 746e 3233 745f 4c20 6370 3034 7878     uint32_t Lpc40xx
   17998:	7953 7473 6d65 6f43 746e 6f72 6c6c 7265     SystemController
   179a8:	3a3a 6143 636c 6c75 7461 5065 6c6c 4c28     ::CalculatePll(L
   179b8:	6370 3034 7878 7953 7473 6d65 6f43 746e     pc40xxSystemCont
   179c8:	6f72 6c6c 7265 3a3a 6c50 496c 706e 7475     roller::PllInput
   179d8:	202c 6975 746e 3631 745f 0029               , uint16_t).

000179e4 <Lpc40xxSystemController::SetCpuClockDivider(unsigned char)::__PRETTY_FUNCTION__>:
   179e4:	6f76 6469 4c20 6370 3034 7878 7953 7473     void Lpc40xxSyst
   179f4:	6d65 6f43 746e 6f72 6c6c 7265 3a3a 6553     emController::Se
   17a04:	4374 7570 6c43 636f 446b 7669 6469 7265     tCpuClockDivider
   17a14:	7528 6e69 3874 745f 0029 ffff               (uint8_t)...

00017a20 <Timer::Initialize(unsigned long, void (*)(), long)::__PRETTY_FUNCTION__>:
   17a20:	6976 7472 6175 206c 6f76 6469 5420 6d69     virtual void Tim
   17a30:	7265 3a3a 6e49 7469 6169 696c 657a 7528     er::Initialize(u
   17a40:	6e69 3374 5f32 2c74 4920 7273 6f50 6e69     int32_t, IsrPoin
   17a50:	6574 2c72 6920 746e 3233 745f 0029 ffff     ter, int32_t)...

00017a60 <LowLevelInit()::__PRETTY_FUNCTION__>:
   17a60:	6f76 6469 4c20 776f 654c 6576 496c 696e     void LowLevelIni
   17a70:	2874 0029 7453 6361 206b 6544 7470 2068     t().Stack Depth 
   17a80:	203d 7a25 0a64 0000 2020 2523 757a 203a     = %zd...  #%zu: 
   17a90:	7830 7025 000a 0000 520a 6e75 203a 6874     0x%p.....Run: th
   17aa0:	2065 6f66 6c6c 776f 6e69 2067 6f63 6d6d     e following comm
   17ab0:	6e61 2064 6e69 7920 756f 2072 7270 6a6f     and in your proj
   17ac0:	6365 2074 6964 6572 7463 726f 0079 0000     ect directory...
   17ad0:	200a 1b20 315b 333b 6d37 616d 656b 7320     .  .[1;37mmake s
   17ae0:	6174 6b63 7274 6361 2d65 7325 5420 4152     tacktrace-%s TRA
   17af0:	4543 3d53 0022 0000 7830 7025 0000 0000     CES="...0x%p....
   17b00:	3020 2578 0070 0000 0a22 5b1b 6d30 0000      0x%p..."..[0m..
   17b10:	6854 7369 7720 6c69 206c 6572 6f70 7472     This will report
   17b20:	7420 6568 6620 6c69 2065 6e61 2064 696c      the file and li
   17b30:	656e 6e20 6d75 6562 2072 6874 7461 6c20     ne number that l
   17b40:	6465 7420 206f 6874 7369 6620 6e75 7463     ed to this funct
   17b50:	6f69 206e 6562 6e69 2067 6163 6c6c 6465     ion being called
   17b60:	002e 0000 7061 6c70 6369 7461 6f69 006e     ....application.
   17b70:	5b1b 3134 436d 4952 4954 4143 1b4c 305b     .[41mCRITICAL.[0
   17b80:	393b 6d34 253a 3a73 5b1b 3b30 3239 256d     ;94m:%s:.[0;92m%
   17b90:	3a73 5b1b 3b30 3339 256d 3e64 1b20 305b     s:.[0;93m%d> .[0
   17ba0:	333b 6d37 7341 6573 7472 6f69 206e 6146     ;37mAssertion Fa
   17bb0:	6c69 7275 2c65 4320 6e6f 6964 6974 6e6f     ilure, Condition
   17bc0:	5420 7365 6574 3a64 2820 7369 2072 3d21      Tested: (isr !=
   17bd0:	4920 746e 7265 7572 7470 6f4c 6b6f 7075      InterruptLookup
   17be0:	6148 646e 656c 2972 200a 2020 2020 2020     Handler).       
   17bf0:	2020 4e20 206f 5349 2052 6f66 6e75 2064        No ISR found 
   17c00:	6f66 2072 6874 2065 6576 7463 726f 2520     for the vector %
   17c10:	1b75 305b 1b6d 305b 0a6d 0000 500a 6972     u.[0m.[0m....Pri
   17c20:	746e 6e69 2067 7453 6361 206b 7254 6361     nting Stack Trac
   17c30:	3a65 000a 5b1b 3134 486d 7261 2064 6146     e:...[41mHard Fa
   17c40:	6c75 2074 7845 6563 7470 6f69 206e 634f     ult Exception Oc
   17c50:	7563 7272 6465 0a21 5b1b 6d30 0000 0000     curred!..[0m....
   17c60:	3072 203a 7830 3025 6c38 2c58 7220 3a31     r0: 0x%08lX, r1:
   17c70:	3020 2578 3830 586c 202c 3272 203a 7830      0x%08lX, r2: 0x
   17c80:	3025 6c38 2c58 7220 3a33 3020 2578 3830     %08lX, r3: 0x%08
   17c90:	586c 000a 3172 3a32 3020 2578 3830 586c     lX..r12: 0x%08lX
   17ca0:	202c 726c 203a 7830 3025 6c38 2c58 7020     , lr: 0x%08lX, p
   17cb0:	3a63 3020 2578 3830 586c 202c 7370 3a72     c: 0x%08lX, psr:
   17cc0:	3020 2578 3830 586c 000a ffff                0x%08lX....

00017ccc <InterruptLookupHandler::file>:
   17ccc:	6e69 6574 7272 7075 2e74 7063 0070 ffff     interrupt.cpp...

00017cdc <InterruptLookupHandler::__PRETTY_FUNCTION__>:
   17cdc:	6f76 6469 4920 746e 7265 7572 7470 6f4c     void InterruptLo
   17cec:	6b6f 7075 6148 646e 656c 2872 0029 ffff     okupHandler()...

00017cfc <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)::pow10>:
   17cfc:	0000 3f80 0000 4120 0000 42c8 0000 447a     ...?.. A...B..zD
   17d0c:	4000 461c 5000 47c3 2400 4974 9680 4b18     .@.F.P.G.$tI...K
   17d1c:	bc20 4cbe 6b28 4e6e 7453 6361 206b 6544      ..L(knNStack De
   17d2c:	7470 2068 203d 7a25 0a64 0000 2020 2523     pth = %zd...  #%
   17d3c:	757a 203a 7830 7025 000a 0000 520a 6e75     zu: 0x%p.....Run
   17d4c:	203a 6874 2065 6f66 6c6c 776f 6e69 2067     : the following 
   17d5c:	6f63 6d6d 6e61 2064 6e69 7920 756f 2072     command in your 
   17d6c:	7270 6a6f 6365 2074 6964 6572 7463 726f     project director
   17d7c:	0079 0000 200a 1b20 315b 333b 6d37 616d     y....  .[1;37mma
   17d8c:	656b 7320 6174 6b63 7274 6361 2d65 7325     ke stacktrace-%s
   17d9c:	5420 4152 4543 3d53 0022 0000 7830 7025      TRACES="...0x%p
   17dac:	0000 0000 3020 2578 0070 0000 0a22 5b1b     .... 0x%p..."..[
   17dbc:	6d30 0000 6854 7369 7720 6c69 206c 6572     0m..This will re
   17dcc:	6f70 7472 7420 6568 6620 6c69 2065 6e61     port the file an
   17ddc:	2064 696c 656e 6e20 6d75 6562 2072 6874     d line number th
   17dec:	7461 6c20 6465 7420 206f 6874 7369 6620     at led to this f
   17dfc:	6e75 7463 6f69 206e 6562 6e69 2067 6163     unction being ca
   17e0c:	6c6c 6465 002e 0000 7061 6c70 6369 7461     lled....applicat
   17e1c:	6f69 006e 5b1b 3334 206d 4157 4e52 4e49     ion..[43m WARNIN
   17e2c:	1b47 305b 393b 6d34 253a 3a73 5b1b 3b30     G.[0;94m:%s:.[0;
   17e3c:	3239 256d 3a73 5b1b 3b30 3339 256d 3e64     92m%s:.[0;93m%d>
   17e4c:	1b20 305b 333b 6d37 6f50 7472 2520 2064      .[0;37mPort %d 
   17e5c:	6163 6e6e 746f 6220 2065 7375 6465 6620     cannot be used f
   17e6c:	726f 4520 7478 7265 616e 206c 6e49 6574     or External Inte
   17e7c:	7272 7075 7374 202e 654e 6465 7420 206f     rrupts. Need to 
   17e8c:	7375 2065 5047 4f49 6f20 206e 6f50 7472     use GPIO on Port
   17e9c:	3020 6f20 2072 2e32 5b1b 6d30 5b1b 6d30      0 or 2..[0m.[0m
   17eac:	000a 0000 5b1b 3334 206d 4157 4e52 4e49     .....[43m WARNIN
   17ebc:	1b47 305b 393b 6d34 253a 3a73 5b1b 3b30     G.[0;94m:%s:.[0;
   17ecc:	3239 256d 3a73 5b1b 3b30 3339 256d 3e64     92m%s:.[0;93m%d>
   17edc:	1b20 305b 333b 6d37 6445 6567 2520 2064      .[0;37mEdge %d 
   17eec:	6163 6e6e 746f 6220 2065 7375 6465 6620     cannot be used f
   17efc:	726f 4520 7478 7265 616e 206c 6e49 6574     or External Inte
   17f0c:	7272 7075 7374 4e2e 6565 2064 6f74 7520     rrupts.Need to u
   17f1c:	6573 6120 7220 7369 6e69 2c67 6620 6c61     se a rising, fal
   17f2c:	696c 676e 202c 726f 6220 746f 2068 6f63     ling, or both co
   17f3c:	666e 6769 7275 7461 6f69 2e6e 5b1b 6d30     nfiguration..[0m
   17f4c:	000a 0000 5b1b 3134 436d 4952 4954 4143     .....[41mCRITICA
   17f5c:	1b4c 305b 393b 6d34 253a 3a73 5b1b 3b30     L.[0;94m:%s:.[0;
   17f6c:	3239 256d 3a73 5b1b 3b30 3339 256d 3e64     92m%s:.[0;93m%d>
   17f7c:	1b20 305b 333b 6d37 7341 6573 7472 6f69      .[0;37mAssertio
   17f8c:	206e 6146 6c69 7275 2c65 4320 6e6f 6964     n Failure, Condi
   17f9c:	6974 6e6f 5420 7365 6574 3a64 2820 6570     tion Tested: (pe
   17fac:	6972 6870 7265 6c61 645f 7669 6469 7265     ripheral_divider
   17fbc:	3c20 203d 2934 200a 2020 2020 2020 2020      <= 4).         
   17fcc:	4420 7669 6469 7265 6d20 7375 6e74 7427      Divider mustn't
   17fdc:	6520 6378 6565 2064 3233 5b1b 6d30 5b1b      exceed 32.[0m.[
   17fec:	6d30 000a 500a 6972 746e 6e69 2067 7453     0m...Printing St
   17ffc:	6361 206b 7254 6361 3a65 000a 5b1b 3134     ack Trace:...[41
   1800c:	436d 4952 4954 4143 1b4c 305b 393b 6d34     mCRITICAL.[0;94m
   1801c:	253a 3a73 5b1b 3b30 3239 256d 3a73 5b1b     :%s:.[0;92m%s:.[
   1802c:	3b30 3339 256d 3e64 1b20 305b 333b 6d37     0;93m%d> .[0;37m
   1803c:	7341 6573 7472 6f69 206e 6146 6c69 7275     Assertion Failur
   1804c:	2c65 4320 6e6f 6964 6974 6e6f 5420 7365     e, Condition Tes
   1805c:	6574 3a64 2820 6564 6973 6572 5f64 7073     ted: (desired_sp
   1806c:	6565 5f64 6e69 6d5f 7a68 3c20 3320 3438     eed_in_mhz < 384
   1807c:	2620 2026 6564 6973 6572 5f64 7073 6565      && desired_spee
   1808c:	5f64 6e69 6d5f 7a68 3e20 3120 2932 200a     d_in_mhz > 12). 
   1809c:	2020 2020 2020 2020 4620 6572 7571 6e65              Frequen
   180ac:	7963 6d20 7375 2074 6562 6c20 776f 7265     cy must be lower
   180bc:	7420 6168 206e 3833 2034 484d 617a 646e      than 384 MHzand
   180cc:	6720 6572 7461 7265 7420 6168 206e 726f      greater than or
   180dc:	6520 7571 6c61 7420 206f 3231 4d20 7a48      equal to 12 MHz
   180ec:	5b1b 6d30 5b1b 6d30 000a 0000 5b1b 3134     .[0m.[0m.....[41
   180fc:	436d 4952 4954 4143 1b4c 305b 393b 6d34     mCRITICAL.[0;94m
   1810c:	253a 3a73 5b1b 3b30 3239 256d 3a73 5b1b     :%s:.[0;92m%s:.[
   1811c:	3b30 3339 256d 3e64 1b20 305b 333b 6d37     0;93m%d> .[0;37m
   1812c:	7341 6573 7472 6f69 206e 6146 6c69 7275     Assertion Failur
   1813c:	2c65 4320 6e6f 6964 6974 6e6f 5420 7365     e, Condition Tes
   1814c:	6574 3a64 2820 6964 6976 6564 5f72 6176     ted: (divider_va
   1815c:	756c 2065 203c 2938 200a 2020 2020 2020     lue < 8).       
   1816c:	2020 5020 4c4c 6420 7669 6469 7265 7620        PLL divider v
   1817c:	6c61 6575 7720 6e65 2074 756f 2074 666f     alue went out of
   1818c:	6220 756f 646e 1b73 305b 1b6d 305b 0a6d      bounds.[0m.[0m.
   1819c:	0000 0000 5b1b 3134 436d 4952 4954 4143     .....[41mCRITICA
   181ac:	1b4c 305b 393b 6d34 253a 3a73 5b1b 3b30     L.[0;94m:%s:.[0;
   181bc:	3239 256d 3a73 5b1b 3b30 3339 256d 3e64     92m%s:.[0;93m%d>
   181cc:	1b20 305b 333b 6d37 7341 6573 7472 6f69      .[0;37mAssertio
   181dc:	206e 6146 6c69 7275 2c65 4320 6e6f 6964     n Failure, Condi
   181ec:	6974 6e6f 5420 7365 6574 3a64 2820 6166     tion Tested: (fa
   181fc:	736c 2965 200a 2020 2020 2020 2020 5020     lse).          P
   1820c:	4c4c 6c20 636f 206b 6f63 6c75 2064 6f6e     LL lock could no
   1821c:	2074 6562 6520 7473 6261 696c 6873 6465     t be established
   1822c:	6220 6665 726f 2065 6974 656d 756f 1b74      before timeout.
   1823c:	305b 1b6d 305b 0a6d 0000 0000 5b1b 3134     [0m.[0m......[41
   1824c:	436d 4952 4954 4143 1b4c 305b 393b 6d34     mCRITICAL.[0;94m
   1825c:	253a 3a73 5b1b 3b30 3239 256d 3a73 5b1b     :%s:.[0;92m%s:.[
   1826c:	3b30 3339 256d 3e64 1b20 305b 333b 6d37     0;93m%d> .[0;37m
   1827c:	7341 6573 7472 6f69 206e 6146 6c69 7275     Assertion Failur
   1828c:	2c65 4320 6e6f 6964 6974 6e6f 5420 7365     e, Condition Tes
   1829c:	6574 3a64 2820 7063 5f75 6964 6976 6564     ted: (cpu_divide
   182ac:	2072 203c 3233 0a29 2020 2020 2020 2020     r < 32).        
   182bc:	2020 6944 6976 6564 2072 756d 7473 276e       Divider mustn'
   182cc:	2074 7865 6563 6465 3320 1b32 305b 1b6d     t exceed 32.[0m.
   182dc:	305b 0a6d 0000 0000 5b1b 3534 206d 2020     [0m......[45m   
   182ec:	5245 4f52 1b52 305b 393b 6d34 253a 3a73     ERROR.[0;94m:%s:
   182fc:	5b1b 3b30 3239 256d 3a73 5b1b 3b30 3339     .[0;92m%s:.[0;93
   1830c:	256d 3e64 1b20 305b 333b 6d37 6146 6c69     m%d> .[0;37mFail
   1831c:	6465 7420 206f 6e69 7469 6169 6574 5320     ed to initiate S
   1832c:	4950 6d20 646f 2065 6977 6874 6e69 7420     PI mode within t
   1833c:	6d69 6f65 7475 202e 6241 726f 6974 676e     imeout. Aborting
   1834c:	1b21 305b 0a6d 0000 5b1b 3534 206d 2020     !.[0m....[45m   
   1835c:	5245 4f52 1b52 305b 393b 6d34 253a 3a73     ERROR.[0;94m:%s:
   1836c:	5b1b 3b30 3239 256d 3a73 5b1b 3b30 3339     .[0;92m%s:.[0;93
   1837c:	256d 3e64 1b20 305b 333b 6d37 6552 7073     m%d> .[0;37mResp
   1838c:	6e6f 6573 6920 746e 6765 6972 7974 6320     onse integrity c
   1839c:	6568 6b63 6620 6961 656c 2e64 4120 6f62     heck failed. Abo
   183ac:	7472 6e69 2167 5b1b 6d30 000a 5b1b 3534     rting!.[0m...[45
   183bc:	206d 2020 5245 4f52 1b52 305b 393b 6d34     m   ERROR.[0;94m
   183cc:	253a 3a73 5b1b 3b30 3239 256d 3a73 5b1b     :%s:.[0;92m%s:.[
   183dc:	3b30 3339 256d 3e64 1b20 305b 333b 6d37     0;93m%d> .[0;37m
   183ec:	6e55 7573 7070 726f 6574 2064 6f76 746c     Unsupported volt
   183fc:	6761 2065 6e69 7520 6573 202e 6241 726f     age in use. Abor
   1840c:	6974 676e 1b21 305b 0a6d 0000 5b1b 3534     ting!.[0m....[45
   1841c:	206d 2020 5245 4f52 1b52 305b 393b 6d34     m   ERROR.[0;94m
   1842c:	253a 3a73 5b1b 3b30 3239 256d 3a73 5b1b     :%s:.[0;92m%s:.[
   1843c:	3b30 3339 256d 3e64 1b20 305b 333b 6d37     0;93m%d> .[0;37m
   1844c:	4453 4320 7261 2064 6974 656d 2064 756f     SD Card timed ou
   1845c:	2e74 4120 6f62 7472 6e69 2167 5b1b 6d30     t. Aborting!.[0m
   1846c:	000a 0000 7274 6575 0000 0000 6166 736c     ....true....fals
   1847c:	0065 0000 5b1b 3534 206d 2020 5245 4f52     e....[45m   ERRO
   1848c:	1b52 305b 393b 6d34 253a 3a73 5b1b 3b30     R.[0;94m:%s:.[0;
   1849c:	3239 256d 3a73 5b1b 3b30 3339 256d 3e64     92m%s:.[0;93m%d>
   184ac:	1b20 305b 333b 6d37 6857 6c69 2065 6552      .[0;37mWhile Re
   184bc:	6461 6e69 2067 6c42 636f 206b 2523 2064     ading Block #%d 
   184cc:	5243 3143 3a36 5b1b 6d30 000a 5b1b 3534     CRC16:.[0m...[45
   184dc:	206d 2020 5245 4f52 1b52 305b 393b 6d34     m   ERROR.[0;94m
   184ec:	253a 3a73 5b1b 3b30 3239 256d 3a73 5b1b     :%s:.[0;92m%s:.[
   184fc:	3b30 3339 256d 3e64 1b20 305b 333b 6d37     0;93m%d> .[0;37m
   1850c:	7845 6570 7463 6465 2720 7830 3025 5834     Expected '0x%04X
   1851c:	1b27 305b 0a6d 0000 5b1b 3534 206d 2020     '.[0m....[45m   
   1852c:	5245 4f52 1b52 305b 393b 6d34 253a 3a73     ERROR.[0;94m:%s:
   1853c:	5b1b 3b30 3239 256d 3a73 5b1b 3b30 3339     .[0;92m%s:.[0;93
   1854c:	256d 3e64 1b20 305b 333b 6d37 6f47 2074     m%d> .[0;37mGot 
   1855c:	3027 2578 3430 2758 5b1b 6d30 000a 0000     '0x%04X'.[0m....
   1856c:	5b1b 3534 206d 2020 5245 4f52 1b52 305b     .[45m   ERROR.[0
   1857c:	393b 6d34 253a 3a73 5b1b 3b30 3239 256d     ;94m:%s:.[0;92m%
   1858c:	3a73 5b1b 3b30 3339 256d 3e64 1b20 305b     s:.[0;93m%d> .[0
   1859c:	333b 6d37 6552 6461 4320 646d 7720 7361     ;37mRead Cmd was
   185ac:	6e20 746f 6120 6b63 6f6e 6c77 6465 6567      not acknowledge
   185bc:	2064 7270 706f 7265 796c 1b21 305b 0a6d     d properly!.[0m.
   185cc:	0000 0000 5b1b 3534 206d 2020 5245 4f52     .....[45m   ERRO
   185dc:	1b52 305b 393b 6d34 253a 3a73 5b1b 3b30     R.[0;94m:%s:.[0;
   185ec:	3239 256d 3a73 5b1b 3b30 3339 256d 3e64     92m%s:.[0;93m%d>
   185fc:	1b20 305b 333b 6d37 6150 6172 656d 6574      .[0;37mParamete
   1860c:	2072 7245 3a72 2520 1b73 305b 0a6d 0000     r Err: %s.[0m...
   1861c:	5b1b 3534 206d 2020 5245 4f52 1b52 305b     .[45m   ERROR.[0
   1862c:	393b 6d34 253a 3a73 5b1b 3b30 3239 256d     ;94m:%s:.[0;92m%
   1863c:	3a73 5b1b 3b30 3339 256d 3e64 1b20 305b     s:.[0;93m%d> .[0
   1864c:	333b 6d37 6441 7264 4520 7272 203a 7325     ;37mAddr Err: %s
   1865c:	5b1b 6d30 000a 0000 5b1b 3534 206d 2020     .[0m.....[45m   
   1866c:	5245 4f52 1b52 305b 393b 6d34 253a 3a73     ERROR.[0;94m:%s:
   1867c:	5b1b 3b30 3239 256d 3a73 5b1b 3b30 3339     .[0;92m%s:.[0;93
   1868c:	256d 3e64 1b20 305b 333b 6d37 7245 7361     m%d> .[0;37mEras
   1869c:	2065 6553 2071 7245 3a72 2520 1b73 305b     e Seq Err: %s.[0
   186ac:	0a6d 0000 5b1b 3534 206d 2020 5245 4f52     m....[45m   ERRO
   186bc:	1b52 305b 393b 6d34 253a 3a73 5b1b 3b30     R.[0;94m:%s:.[0;
   186cc:	3239 256d 3a73 5b1b 3b30 3339 256d 3e64     92m%s:.[0;93m%d>
   186dc:	1b20 305b 333b 6d37 6f43 206d 5243 2043      .[0;37mCom CRC 
   186ec:	7245 3a72 2520 1b73 305b 0a6d 0000 0000     Err: %s.[0m.....
   186fc:	5b1b 3534 206d 2020 5245 4f52 1b52 305b     .[45m   ERROR.[0
   1870c:	393b 6d34 253a 3a73 5b1b 3b30 3239 256d     ;94m:%s:.[0;92m%
   1871c:	3a73 5b1b 3b30 3339 256d 3e64 1b20 305b     s:.[0;93m%d> .[0
   1872c:	333b 6d37 6c49 656c 6167 206c 6d43 2064     ;37mIllegal Cmd 
   1873c:	7245 3a72 2520 1b73 305b 0a6d 0000 0000     Err: %s.[0m.....
   1874c:	5b1b 3534 206d 2020 5245 4f52 1b52 305b     .[45m   ERROR.[0
   1875c:	393b 6d34 253a 3a73 5b1b 3b30 3239 256d     ;94m:%s:.[0;92m%
   1876c:	3a73 5b1b 3b30 3339 256d 3e64 1b20 305b     s:.[0;93m%d> .[0
   1877c:	333b 6d37 7245 7361 2065 6552 6573 3a74     ;37mErase Reset:
   1878c:	2520 1b73 305b 0a6d 0000 0000 5b1b 3534      %s.[0m......[45
   1879c:	206d 2020 5245 4f52 1b52 305b 393b 6d34     m   ERROR.[0;94m
   187ac:	253a 3a73 5b1b 3b30 3239 256d 3a73 5b1b     :%s:.[0;92m%s:.[
   187bc:	3b30 3339 256d 3e64 1b20 305b 333b 6d37     0;93m%d> .[0;37m
   187cc:	6e49 4920 6c64 3a65 2520 1b73 305b 0a6d     In Idle: %s.[0m.
   187dc:	0000 0000 5b1b 3534 206d 2020 5245 4f52     .....[45m   ERRO
   187ec:	1b52 305b 393b 6d34 253a 3a73 5b1b 3b30     R.[0;94m:%s:.[0;
   187fc:	3239 256d 3a73 5b1b 3b30 3339 256d 3e64     92m%s:.[0;93m%d>
   1880c:	1b20 305b 333b 6d37 6146 6c69 6465 7420      .[0;37mFailed t
   1881c:	206f 6573 2074 7453 7261 2074 6441 7264     o set Start Addr
   1882c:	7365 2173 5b1b 6d30 000a 0000 5b1b 3534     ess!.[0m.....[45
   1883c:	206d 2020 5245 4f52 1b52 305b 393b 6d34     m   ERROR.[0;94m
   1884c:	253a 3a73 5b1b 3b30 3239 256d 3a73 5b1b     :%s:.[0;92m%s:.[
   1885c:	3b30 3339 256d 3e64 1b20 305b 333b 6d37     0;93m%d> .[0;37m
   1886c:	6146 6c69 6465 7420 206f 6573 2074 6e45     Failed to set En
   1887c:	2064 6441 7264 7365 2173 5b1b 6d30 000a     d Address!.[0m..
   1888c:	5b1b 3534 206d 2020 5245 4f52 1b52 305b     .[45m   ERROR.[0
   1889c:	393b 6d34 253a 3a73 5b1b 3b30 3239 256d     ;94m:%s:.[0;92m%
   188ac:	3a73 5b1b 3b30 3339 256d 3e64 1b20 305b     s:.[0;93m%d> .[0
   188bc:	333b 6d37 6e55 6e6b 776f 206e 6572 7073     ;37mUnknown resp
   188cc:	6e6f 6573 7420 7079 2e65 4120 6f62 7472     onse type. Abort
   188dc:	6e69 2167 5b1b 6d30 000a 0000 5b1b 3534     ing!.[0m.....[45
   188ec:	206d 2020 5245 4f52 1b52 305b 393b 6d34     m   ERROR.[0;94m
   188fc:	253a 3a73 5b1b 3b30 3239 256d 3a73 5b1b     :%s:.[0;92m%s:.[
   1890c:	3b30 3339 256d 3e64 1b20 305b 333b 6d37     0;93m%d> .[0;37m
   1891c:	6552 7073 6e6f 6573 7520 736e 7075 6f70     Response unsuppo
   1892c:	7472 6465 6920 206e 5053 2049 6f6d 6564     rted in SPI mode
   1893c:	202e 6241 726f 6974 676e 1b21 305b 0a6d     . Aborting!.[0m.
   1894c:	ff00 ffff                                   ....

00018950 <Gpio::ValidPortCheck()::file>:
   18950:	7067 6f69 682e 7070 ff00 ffff               gpio.hpp....

0001895c <Gpio::SetInterruptEdge(GpioInterface::Edge)::file>:
   1895c:	7067 6f69 682e 7070 ff00 ffff               gpio.hpp....

00018968 <Gpio::ClearInterruptEdge(GpioInterface::Edge)::file>:
   18968:	7067 6f69 682e 7070 ff00 ffff               gpio.hpp....

00018974 <Ssp::kPinSelect>:
   18974:	0202 ff04                                   ....

00018978 <Ssp::kSspPinMatrix>:
   18978:	7850 0001 1200 0000 7850 0001 1100 0000     Px......Px......
   18988:	7850 0001 0f00 0000 7850 0001 0900 0000     Px......Px......
   18998:	7850 0001 0800 0000 7850 0001 0700 0000     Px......Px......
   189a8:	7850 0001 0101 0000 7850 0001 0401 0000     Px......Px......
   189b8:	7850 0001 0001 0000                         Px......

000189c0 <Ssp::kPowerBit>:
   189c0:	0015 0000 000a 0000 0014 0000               ............

000189cc <Sd::kCrcTable8>:
   189cc:	0900 1b12 2d24 3f36 4148 535a 656c 777e     ....$-6?HAZSle~w
   189dc:	1019 020b 343d 262f 5851 4a43 7c75 6e67     ....=4/&QXCJu|gn
   189ec:	3b32 2920 1f16 0d04 737a 6168 575e 454c     2; )....zsha^WLE
   189fc:	222b 3039 060f 141d 6a63 7871 4e47 5c55     +"90....cjqxGNU\
   18a0c:	6d64 7f76 4940 5b52 252c 373e 0108 131a     dmv.@IR[,%>7....
   18a1c:	747d 666f 5059 424b 3c35 2e27 1811 0a03     }tofYPKB5<'.....
   18a2c:	5f56 4d44 7b72 6960 171e 050c 333a 2128     V_DMr{`i....:3(!
   18a3c:	464f 545d 626b 7079 0e07 1c15 2a23 3831     OF]Tkbyp....#*18
   18a4c:	4841 5a53 6c65 7e77 0009 121b 242d 363f     AHSZelw~....-$?6
   18a5c:	5158 434a 757c 676e 1910 0b02 3d34 2f26     XQJC|ung....4=&/
   18a6c:	7a73 6861 5e57 4c45 323b 2029 161f 040d     szahW^EL;2) ....
   18a7c:	636a 7178 474e 555c 2b22 3930 0f06 1d14     jcxqNG\U"+09....
   18a8c:	2c25 3e37 0801 1a13 646d 767f 4049 525b     %,7>....md.vI@[R
   18a9c:	353c 272e 1118 030a 7d74 6f66 5950 4b42     <5.'....t}foPYBK
   18aac:	1e17 0c05 3a33 2821 565f 444d 727b 6069     ....3:!(_VMD{ri`
   18abc:	070e 151c 232a 3138 4f46 5d54 6b62 0070     ....*#81FOT]bkp.

00018acc <Sd::kCrcTable16>:
   18acc:	0000 1021 2042 3063 4084 50a5 60c6 70e7     ..!.B c0.@.P.`.p
   18adc:	8108 9129 a14a b16b c18c d1ad e1ce f1ef     ..).J.k.........
   18aec:	1231 0210 3273 2252 52b5 4294 72f7 62d6     1...s2R".R.B.r.b
   18afc:	9339 8318 b37b a35a d3bd c39c f3ff e3de     9...{.Z.........
   18b0c:	2462 3443 0420 1401 64e6 74c7 44a4 5485     b$C4 ....d.t.D.T
   18b1c:	a56a b54b 8528 9509 e5ee f5cf c5ac d58d     j.K.(...........
   18b2c:	3653 2672 1611 0630 76d7 66f6 5695 46b4     S6r&..0..v.f.V.F
   18b3c:	b75b a77a 9719 8738 f7df e7fe d79d c7bc     [.z...8.........
   18b4c:	48c4 58e5 6886 78a7 0840 1861 2802 3823     .H.X.h.x@.a..(#8
   18b5c:	c9cc d9ed e98e f9af 8948 9969 a90a b92b     ........H.i...+.
   18b6c:	5af5 4ad4 7ab7 6a96 1a71 0a50 3a33 2a12     .Z.J.z.jq.P.3:.*
   18b7c:	dbfd cbdc fbbf eb9e 9b79 8b58 bb3b ab1a     ........y.X.;...
   18b8c:	6ca6 7c87 4ce4 5cc5 2c22 3c03 0c60 1c41     .l.|.L.\",.<`.A.
   18b9c:	edae fd8f cdec ddcd ad2a bd0b 8d68 9d49     ........*...h.I.
   18bac:	7e97 6eb6 5ed5 4ef4 3e13 2e32 1e51 0e70     .~.n.^.N.>2.Q.p.
   18bbc:	ff9f efbe dfdd cffc bf1b af3a 9f59 8f78     ..........:.Y.x.
   18bcc:	9188 81a9 b1ca a1eb d10c c12d f14e e16f     ..........-.N.o.
   18bdc:	1080 00a1 30c2 20e3 5004 4025 7046 6067     .....0. .P%@Fpg`
   18bec:	83b9 9398 a3fb b3da c33d d31c e37f f35e     ........=.....^.
   18bfc:	02b1 1290 22f3 32d2 4235 5214 6277 7256     .....".25B.RwbVr
   18c0c:	b5ea a5cb 95a8 8589 f56e e54f d52c c50d     ........n.O.,...
   18c1c:	34e2 24c3 14a0 0481 7466 6447 5424 4405     .4.$....ftGd$T.D
   18c2c:	a7db b7fa 8799 97b8 e75f f77e c71d d73c     ........_.~...<.
   18c3c:	26d3 36f2 0691 16b0 6657 7676 4615 5634     .&.6....Wfvv.F4V
   18c4c:	d94c c96d f90e e92f 99c8 89e9 b98a a9ab     L.m.../.........
   18c5c:	5844 4865 7806 6827 18c0 08e1 3882 28a3     DXeH.x'h.....8.(
   18c6c:	cb7d db5c eb3f fb1e 8bf9 9bd8 abbb bb9a     }.\.?...........
   18c7c:	4a75 5a54 6a37 7a16 0af1 1ad0 2ab3 3a92     uJTZ7j.z.....*.:
   18c8c:	fd2e ed0f dd6c cd4d bdaa ad8b 9de8 8dc9     ....l.M.........
   18c9c:	7c26 6c07 5c64 4c45 3ca2 2c83 1ce0 0cc1     &|.ld\EL.<.,....
   18cac:	ef1f ff3e cf5d df7c af9b bfba 8fd9 9ff8     ..>.].|.........
   18cbc:	6e17 7e36 4e55 5e74 2e93 3eb2 0ed1 1ef0     .n6~UNt^...>....

00018ccc <Sd::Mount(SdInterface::CardInfo_t*)::file>:
   18ccc:	6473 682e 7070 ff00                         sd.hpp..

00018cd4 <Sd::Mount(SdInterface::CardInfo_t*)::file>:
   18cd4:	6473 682e 7070 ff00                         sd.hpp..

00018cdc <Sd::Mount(SdInterface::CardInfo_t*)::file>:
   18cdc:	6473 682e 7070 ff00                         sd.hpp..

00018ce4 <Sd::Mount(SdInterface::CardInfo_t*)::file>:
   18ce4:	6473 682e 7070 ff00                         sd.hpp..

00018cec <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file>:
   18cec:	6473 682e 7070 ff00                         sd.hpp..

00018cf4 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file>:
   18cf4:	6473 682e 7070 ff00                         sd.hpp..

00018cfc <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file>:
   18cfc:	6473 682e 7070 ff00                         sd.hpp..

00018d04 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file>:
   18d04:	6473 682e 7070 ff00                         sd.hpp..

00018d0c <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file>:
   18d0c:	6473 682e 7070 ff00                         sd.hpp..

00018d14 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file>:
   18d14:	6473 682e 7070 ff00                         sd.hpp..

00018d1c <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file>:
   18d1c:	6473 682e 7070 ff00                         sd.hpp..

00018d24 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file>:
   18d24:	6473 682e 7070 ff00                         sd.hpp..

00018d2c <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file>:
   18d2c:	6473 682e 7070 ff00                         sd.hpp..

00018d34 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file>:
   18d34:	6473 682e 7070 ff00                         sd.hpp..

00018d3c <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file>:
   18d3c:	6473 682e 7070 ff00                         sd.hpp..

00018d44 <Sd::DeleteBlock(unsigned long, unsigned long)::file>:
   18d44:	6473 682e 7070 ff00                         sd.hpp..

00018d4c <Sd::DeleteBlock(unsigned long, unsigned long)::file>:
   18d4c:	6473 682e 7070 ff00                         sd.hpp..

00018d54 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)::file>:
   18d54:	6473 682e 7070 ff00                         sd.hpp..

00018d5c <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)::file>:
   18d5c:	6473 682e 7070 ff00                         sd.hpp..

00018d64 <vtable for Sd>:
	...
   18d6c:	6355 0001 57ad 0001 585d 0001 5c71 0001     Uc...W..]X..q\..
   18d7c:	6089 0001 6235 0001 67f5 0001 683d 0001     .`..5b...g..=h..
   18d8c:	68ad 0001                                   .h..

00018d90 <vtable for SdInterface>:
	...
   18d98:	6b99 0001 6b99 0001 6b99 0001 6b99 0001     .k...k...k...k..
   18da8:	6b99 0001 6b99 0001 6b99 0001 6b99 0001     .k...k...k...k..
   18db8:	6b99 0001                                   .k..

00018dbc <vtable for Ssp>:
	...
   18dc4:	4e2d 0001 0815 0001 088d 0001 4f11 0001     -N...........O..
   18dd4:	4ffd 0001 5209 0001 5369 0001 5555 0001     .O...R..iS..UU..
   18de4:	fffc ffff 0000 0000 0b55 0001 0be5 0001     ........U.......
   18df4:	0c3d 0001 0c55 0001 0c69 0001 0ca9 0001     =...U...i.......
   18e04:	0cd9 0001                                   ....

00018e08 <vtable for SspInterface>:
	...
   18e10:	6b99 0001 6b99 0001 6b99 0001 6b99 0001     .k...k...k...k..
   18e20:	6b99 0001 6b99 0001 6b99 0001 6b99 0001     .k...k...k...k..

00018e30 <vtable for SystemControllerInterface>:
	...
   18e38:	6b99 0001 6b99 0001 6b99 0001 6b99 0001     .k...k...k...k..
   18e48:	6b99 0001 6b99 0001 6b99 0001               .k...k...k..

00018e54 <vtable for Gpio>:
	...
   18e5c:	44ad 0001 4529 0001 45a5 0001 06dd 0001     .D..)E...E......
   18e6c:	0741 0001 07a5 0001 45e9 0001 4655 0001     A........E..UF..
   18e7c:	46cd 0001 473d 0001 49d5 0001 4a1d 0001     .F..=G...I...J..
   18e8c:	47e5 0001 4841 0001 48c5 0001 494d 0001     .G..AH...H..MI..

00018e9c <vtable for GpioInterface>:
	...
   18ea4:	6b99 0001 6b99 0001 6b99 0001 6b99 0001     .k...k...k...k..
   18eb4:	6b99 0001 6b99 0001 6b99 0001 6b99 0001     .k...k...k...k..
   18ec4:	6b99 0001 6b99 0001 6b99 0001 6b99 0001     .k...k...k...k..
   18ed4:	6b99 0001 6b99 0001 6b99 0001 6b99 0001     .k...k...k...k..

00018ee4 <vtable for PinInterface>:
	...
   18eec:	6b99 0001 6b99 0001 6b99 0001 6b99 0001     .k...k...k...k..
   18efc:	6b99 0001 6b99 0001 6b99 0001 6b99 0001     .k...k...k...k..
   18f0c:	6b99 0001 6b99 0001 6b99 0001 6b99 0001     .k...k...k...k..
   18f1c:	6b99 0001                                   .k..

00018f20 <Gpio::ClearInterruptEdge(GpioInterface::Edge)::__PRETTY_FUNCTION__>:
   18f20:	6976 7472 6175 206c 6f76 6469 4720 6970     virtual void Gpi
   18f30:	3a6f 433a 656c 7261 6e49 6574 7272 7075     o::ClearInterrup
   18f40:	4574 6764 2865 7047 6f69 6e49 6574 6672     tEdge(GpioInterf
   18f50:	6361 3a65 453a 6764 2965 ff00               ace::Edge)..

00018f5c <Gpio::ValidPortCheck()::__PRETTY_FUNCTION__>:
   18f5c:	6f62 6c6f 4720 6970 3a6f 563a 6c61 6469     bool Gpio::Valid
   18f6c:	6f50 7472 6843 6365 286b 0029               PortCheck().

00018f78 <Gpio::SetInterruptEdge(GpioInterface::Edge)::__PRETTY_FUNCTION__>:
   18f78:	6976 7472 6175 206c 6f76 6469 4720 6970     virtual void Gpi
   18f88:	3a6f 533a 7465 6e49 6574 7272 7075 4574     o::SetInterruptE
   18f98:	6764 2865 7047 6f69 6e49 6574 6672 6361     dge(GpioInterfac
   18fa8:	3a65 453a 6764 2965 ff00 ffff               e::Edge)....

00018fb4 <Sd::Mount(SdInterface::CardInfo_t*)::__PRETTY_FUNCTION__>:
   18fb4:	6976 7472 6175 206c 6f62 6c6f 5320 3a64     virtual bool Sd:
   18fc4:	4d3a 756f 746e 5328 4964 746e 7265 6166     :Mount(SdInterfa
   18fd4:	6563 3a3a 6143 6472 6e49 6f66 745f 292a     ce::CardInfo_t*)
   18fe4:	ff00 ffff                                   ....

00018fe8 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::__PRETTY_FUNCTION__>:
   18fe8:	6976 7472 6175 206c 6975 746e 5f38 2074     virtual uint8_t 
   18ff8:	6453 3a3a 6552 6461 6c42 636f 286b 6975     Sd::ReadBlock(ui
   19008:	746e 3233 745f 202c 6975 746e 5f38 2a74     nt32_t, uint8_t*
   19018:	202c 6975 746e 3233 745f 0029               , uint32_t).

00019024 <Sd::DeleteBlock(unsigned long, unsigned long)::__PRETTY_FUNCTION__>:
   19024:	6976 7472 6175 206c 6975 746e 5f38 2074     virtual uint8_t 
   19034:	6453 3a3a 6544 656c 6574 6c42 636f 286b     Sd::DeleteBlock(
   19044:	6975 746e 3233 745f 202c 6975 746e 3233     uint32_t, uint32
   19054:	745f 0029                                   _t).

00019058 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)::__PRETTY_FUNCTION__>:
   19058:	6976 7472 6175 206c 6975 746e 3233 745f     virtual uint32_t
   19068:	5320 3a64 533a 6e65 4364 646d 5328 4964      Sd::SendCmd(SdI
   19078:	746e 7265 6166 6563 3a3a 6f43 6d6d 6e61     nterface::Comman
   19088:	2c64 7520 6e69 3374 5f32 2c74 7520 6e69     d, uint32_t, uin
   19098:	3874 745f 2c2a 7520 6e69 3374 5f32 2c74     t8_t*, uint32_t,
   190a8:	5320 4964 746e 7265 6166 6563 3a3a 654b      SdInterface::Ke
   190b8:	7065 6c41 7669 2965 ff00 ffff               epAlive)....

000190c4 <__sf_fake_stderr>:
	...

000190e4 <__sf_fake_stdin>:
	...

00019104 <__sf_fake_stdout>:
	...
