
build/application/firmware.elf:     file format elf32-littlearm
build/application/firmware.elf
architecture: arm, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000159b1

Program Header:
0x70000001 off    0x0001b914 vaddr 0x0001b914 paddr 0x0001b914 align 2**2
         filesz 0x00000008 memsz 0x00000008 flags r--
    LOAD off    0x00010000 vaddr 0x00010000 paddr 0x00010000 align 2**16
         filesz 0x0000b91c memsz 0x0000b91c flags r-x
    LOAD off    0x00020000 vaddr 0x10000000 paddr 0x0001b91c align 2**16
         filesz 0x0000065c memsz 0x0000065c flags rw-
    LOAD off    0x00020660 vaddr 0x10000660 paddr 0x10000660 align 2**16
         filesz 0x00000000 memsz 0x00000fb8 flags rw-
private flags = 5000400: [Version5 EABI] [hard-float ABI]

Sections:
Idx Name             Size      VMA       LMA       File off  Algn  Flags
  0 .text            0000b914  00010000  00010000  00010000  2**4  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data            0000065c  10000000  0001b91c  00020000  2**2  CONTENTS, ALLOC, LOAD, DATA
  2 .data_RAM2       00000000  20000000  20000000  0002065c  2**2  CONTENTS
  3 .bss             00000fb8  10000660  10000660  00020660  2**3  ALLOC
  4 .ARM.exidx       00000008  0001b914  0001b914  0001b914  2**2  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .uninit_RESERVED 00000000  10000000  10000000  0002065c  2**2  CONTENTS
  6 .noinit_RAM2     00000000  20000000  20000000  0002065c  2**2  CONTENTS
  7 .noinit          00000000  10001618  10001618  0002065c  2**2  CONTENTS
  8 .ARM.attributes  00000030  00000000  00000000  0002065c  2**0  CONTENTS, READONLY
  9 .comment         0000007e  00000000  00000000  0002068c  2**0  CONTENTS, READONLY
 10 .debug_info      00043440  00000000  00000000  0002070a  2**0  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev    00004855  00000000  00000000  00063b4a  2**0  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges   00001030  00000000  00000000  0006839f  2**0  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges    00000fa0  00000000  00000000  000693cf  2**0  CONTENTS, READONLY, DEBUGGING
 14 .debug_line      0000789f  00000000  00000000  0006a36f  2**0  CONTENTS, READONLY, DEBUGGING
 15 .debug_str       0001a146  00000000  00000000  00071c0e  2**0  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame     00003fac  00000000  00000000  0008bd54  2**2  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
00010000 l    d  .text	00000000 .text
10000000 l    d  .data	00000000 .data
20000000 l    d  .data_RAM2	00000000 .data_RAM2
10000660 l    d  .bss	00000000 .bss
0001b914 l    d  .ARM.exidx	00000000 .ARM.exidx
10000000 l    d  .uninit_RESERVED	00000000 .uninit_RESERVED
20000000 l    d  .noinit_RAM2	00000000 .noinit_RAM2
10001618 l    d  .noinit	00000000 .noinit
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 interrupt.cpp
00015f8c l     F .text	0000002c NVIC_EnableIRQ
00015fb8 l     F .text	00000054 NVIC_SetPriority
00010000 l     O .text	000000e4 kInterruptVectorTable
0001a730 l     O .text	0000000e InterruptLookupHandler::file
0001a740 l     O .text	0000001e InterruptLookupHandler::__PRETTY_FUNCTION__
0001022c l       .text	00000000 handler2_address_const
00000000 l    df *ABS*	00000000 startup.cpp
0001a484 l     O .text	0000003e Timer::Initialize(unsigned long, void (*)(), long)::__PRETTY_FUNCTION__
100004f4 l     O .data	00000008 (anonymous namespace)::system_timer
100004fc l     O .data	00000004 (anonymous namespace)::system_controller
10000500 l     O .data	0000000c (anonymous namespace)::timer0
00015858 l     F .text	00000040 (anonymous namespace)::Lpc40xxUptime()
0001a3cc l     O .text	0000000c LowLevelInit()::file
0001a4c4 l     O .text	00000014 LowLevelInit()::__PRETTY_FUNCTION__
000102fc l     O .text	00000004 kCrpWord
00015ea0 l     F .text	000000dc __static_initialization_and_destruction_0(int, int)
00015f7c l     F .text	0000000e _GLOBAL__sub_I_UptimeRTOS
00000000 l    df *ABS*	00000000 /mnt/c/SJSU_Dev2/SJSU-Dev2/tools/gcc-arm-none-eabi-7-2017-q4-major/bin/../lib/gcc/arm-none-eabi/7.2.1/thumb/v7e-m/fpv4-sp/hard/crti.o
00000000 l    df *ABS*	00000000 /mnt/c/SJSU_Dev2/SJSU-Dev2/tools/gcc-arm-none-eabi-7-2017-q4-major/bin/../lib/gcc/arm-none-eabi/7.2.1/thumb/v7e-m/fpv4-sp/hard/crtn.o
00000000 l    df *ABS*	00000000 crtstuff.c
00010328 l     F .text	00000000 __do_global_dtors_aux
10000660 l       .bss	00000001 completed.9929
0001034c l     F .text	00000000 frame_dummy
10000664 l       .bss	00000018 object.9934
0001030c l     O .text	00000000 __frame_dummy_init_array_entry
00000000 l    df *ABS*	00000000 main.cpp
10000680 l     O .bss	00000008 (anonymous namespace)::uptime
00010dd8 l     F .text	00000030 (anonymous namespace)::DefaultUptime()
00019d7c l     O .text	0000001c Gpio::ValidPortCheck()::__PRETTY_FUNCTION__
00019d98 l     O .text	00000039 Gpio::SetInterruptEdge(GpioInterface::Edge)::__PRETTY_FUNCTION__
00019d40 l     O .text	0000003b Gpio::ClearInterruptEdge(GpioInterface::Edge)::__PRETTY_FUNCTION__
00019c00 l     O .text	00000049 Lpc40xxSystemController::SetPeripheralClockDivider(unsigned char)::__PRETTY_FUNCTION__
00019ca8 l     O .text	0000005c Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)::__PRETTY_FUNCTION__
00019c4c l     O .text	0000005a Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)::__PRETTY_FUNCTION__
00019d04 l     O .text	0000003a Lpc40xxSystemController::SetCpuClockDivider(unsigned char)::__PRETTY_FUNCTION__
00019988 l     O .text	00000009 main::file
00019be0 l     O .text	0000000b main::__PRETTY_FUNCTION__
00019994 l     O .text	00000009 DemoButton()::file
000199a0 l     O .text	00000009 DemoButton()::file
000199ac l     O .text	00000009 DemoButton()::file
000199b8 l     O .text	00000009 DemoButton()::file
00019bec l     O .text	00000012 DemoButton()::__PRETTY_FUNCTION__
00014a10 l     F .text	000000b4 __static_initialization_and_destruction_0(int, int)
00014ac4 l     F .text	00000028 _GLOBAL__sub_I_button3
00000000 l    df *ABS*	00000000 diskio.cpp
0001b7a4 l     O .text	00000031 Sd::Mount(SdInterface::CardInfo_t*)::__PRETTY_FUNCTION__
0001b7d8 l     O .text	0000003c Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::__PRETTY_FUNCTION__
0001b814 l     O .text	00000034 Sd::DeleteBlock(unsigned long, unsigned long)::__PRETTY_FUNCTION__
0001b848 l     O .text	00000069 Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)::__PRETTY_FUNCTION__
100015ac l     O .bss	00000068 (anonymous namespace)::sd_card
00018b28 l     F .text	00000050 __static_initialization_and_destruction_0(int, int)
00018b78 l     F .text	00000028 _GLOBAL__sub_I_disk_status
00000000 l    df *ABS*	00000000 LabGPIO.cpp
10000000 l     O .data	00000018 GPIO
00000000 l    df *ABS*	00000000 newlib.cpp
00000000 l    df *ABS*	00000000 tasks.c
10001534 l     O .bss	00000064 pxReadyTasksLists
10001598 l     O .bss	00000004 uxTopReadyPriority
1000159c l     O .bss	00000004 xYieldPending
100015a0 l     O .bss	00000004 uxSchedulerSuspended
100015a4 l     O .bss	00000004 ulTaskSwitchedInTime
100015a8 l     O .bss	00000004 ulTotalRunTime
00000000 l    df *ABS*	00000000 port.c
00016450 l       .text	00000000 pxCurrentTCBConst2
000164c0 l       .text	00000000 pxCurrentTCBConst
00000000 l    df *ABS*	00000000 printf.cpp
000164c8 l     F .text	00000044 _out_buffer(char, void*, unsigned int, unsigned int)
0001650c l     F .text	00000030 _out_null(char, void*, unsigned int, unsigned int)
0001653c l     F .text	00000044 _out_char(char, void*, unsigned int, unsigned int)
00016580 l     F .text	00000044 _strlen(char const*)
000165c4 l     F .text	00000044 _is_digit(char)
00016608 l     F .text	00000060 _atoi(char const**)
00016668 l     F .text	0000025c _ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)
000168c4 l     F .text	000000e4 _ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)
000169a8 l     F .text	000000f4 _ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)
0001a760 l     O .text	00000028 _ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)::pow10
00016a9c l     F .text	00000438 _ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)
00016ed4 l     F .text	000008f4 _vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)
00000000 l    df *ABS*	00000000 pure.cc
00000000 l    df *ABS*	00000000 eh_terminate.cc
00000000 l    df *ABS*	00000000 sf_round.c
00000000 l    df *ABS*	00000000 _arm_truncdfsf2.o
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 abort.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 signal.c
00000000 l    df *ABS*	00000000 signalr.c
00000000 l    df *ABS*	00000000 findfp.c
00000000 l    df *ABS*	00000000 eh_term_handler.cc
00000000 l    df *ABS*	00000000 impure.c
100005fc l     O .data	00000060 impure_data
00000000 l    df *ABS*	00000000 reent.c
00011a44  w    F .text	0000003e Lpc40xxSystemController::GetPeripheralFrequency() const
00016230 g     F .text	00000038 putchar
0001600c  w    F .text	0000006c Pwm0IrqHandler
000198a0  w    O .text	00000009 Gpio::SetInterruptEdge(GpioInterface::Edge)::file
00010218 g     F .text	0000001c HardFaultHandler
000161a0 g     F .text	00000024 _getpid
000161f4 g     F .text	0000003c _putchar
000137bc g     F .text	0000018c DemoButton()
0001600c  w    F .text	0000006c EepromIrqHandler
0001600c  w    F .text	0000006c Timer2IrqHandler
100004e0  w    O .data	00000014 uart0
00016334 g     F .text	0000002c GetStackDepth()
0001b6b4  w    O .text	00000007 Sd::Mount(SdInterface::CardInfo_t*)::file
0001190c  w    F .text	00000024 Lpc40xxSystemController::Lpc40xxSystemController()
0001a394  w    O .text	00000004 Timer::kTimerIrq
0001b6ec  w    O .text	00000007 Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file
00019094 g     F .text	00000024 _kill_r
0001010c g       .text	00000000 bss_section_table_end
000177c8 g     F .text	0000004c printf
1000047c  w    O .data	00000004 SystemTimer::sys_tick
0001600c  w    F .text	0000006c I2c1IrqHandler
00015a58  w    F .text	0000003c void Timer::TimerHandler<(TimerInterface::TimerPort)2>()
10000490  w    O .data	00000010 Uart::uart
0001b71c  w    O .text	00000007 Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file
00010000 g       *ABS*	00000000 __vectors_start__
00012d1c  w    F .text	00000090 Ssd1306::Write(unsigned long, Ssd1306::Transaction, unsigned int)
00010e08  w    F .text	00000044 Milliseconds()
00011ba8  w    F .text	00000110 Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)
00012bc8  w    F .text	00000094 Ssd1306::Ssd1306()
00011eec  w    F .text	00000034 SspInterface::SspInterface()
0001600c  w    F .text	0000006c BusFaultHandler
1000142c g     O .bss	00000100 stack_trace
10000018  w    O .data	00000004 Pin::pin_map
000150a4  w    F .text	000000e4 Uart::Initialize(unsigned long)
20000000 g       *ABS*	00000000 __base_RAM2
00012bc8  w    F .text	00000094 Ssd1306::Ssd1306()
0001b91c g       .ARM.exidx	00000000 __exidx_end
000117fc  w    F .text	0000007c Gpio::ClearEdgeRising()
00011e90  w    F .text	00000030 Lpc40xxSystemController::SetEmcClockDivider(Lpc40xxSystemController::EmcDivider)
00019894  w    O .text	00000009 Gpio::ValidPortCheck()::file
00013680  w    F .text	0000006c OledTerminal::OledTerminal()
10001530 g     O .bss	00000004 pxCurrentTCB
0001066c  w    F .text	00000034 PinInterface::PinInterface()
000162f0 g     F .text	0000001c __cyg_profile_func_exit
00018974  w    F .text	00000048 Sd::Crc7Add(unsigned char, unsigned char)
0001788c  w    F .text	000000a0 Sd::Sd(Sd::DebugSdCard_t, unsigned char, unsigned char, unsigned char, unsigned char)
00015cc0  w    F .text	000000a0 void Timer::ClearInterrupts<(TimerInterface::TimerPort)1>()
10001614 g     O .bss	00000004 errno
0001b91c g       .ARM.exidx	00000000 _etext
10000060  w    O .data	00000004 Lpc40xxSystemController::system_controller
00011930  w    F .text	00000090 Lpc40xxSystemController::SetClockFrequency(unsigned char)
00014e74  w    F .text	00000030 unsigned char util::Value<TimerInterface::MatchControlRegister, unsigned char>(TimerInterface::MatchControlRegister)
00011a30  w    F .text	00000014 Lpc40xxSystemController::GetSystemFrequency() const
00015668  w    F .text	000001f0 Uart::GenerateUartCalibration(float)
10000020  w    O .data	00000018 Gpio::gpio_port
00014ea4  w    F .text	000000f8 Timer::SetTimer(unsigned long, TimerInterface::TimerIsrCondition, TimerInterface::MatchControlRegister)
000158d8  w    F .text	000000bc LowLevelInit()
0001600c  w    F .text	0000006c LcdIrqHandler
0001b744  w    O .text	00000007 Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)::file
00080000 g       *ABS*	00000000 __top_MFlash512
000121ec  w    F .text	0000006c Ssp::Transfer(unsigned short)
00015308  w    F .text	000000f8 Uart::Receive(unsigned long)
00011b48  w    F .text	00000030 Lpc40xxSystemController::SelectUsbClockSource(Lpc40xxSystemController::UsbSource)
00013628  w    F .text	00000058 OledTerminal::Clear()
00010f68  w    F .text	00000030 Delay(unsigned long long)
0001a3bc  w    O .text	00000010 Uart::kPowerbit
0001600c  w    F .text	0000006c I2c2IrqHandler
100013d4  w    O .bss	00000004 SystemTimer::system_timer_isr
000116c4  w    F .text	00000040 Gpio::DetachInterrupt()
0001600c  w    F .text	0000006c CanIrqHandler
00010ba8  w    F .text	00000074 Pin::EnableDac(bool)
00010438 g     F .text	00000050 LabGPIO::ReadBool()
000134f4  w    F .text	00000048 OledTerminal::SetCursor(unsigned int, unsigned int)
000108d8  w    F .text	0000007c Pin::SetAsAnalogMode(bool)
00011e28  w    F .text	00000068 Lpc40xxSystemController::SetCpuClockDivider(unsigned char)
00018a2c  w    F .text	000000fc Sd::GetCrc16(unsigned char*, unsigned short)
00018ccc g     F .text	00000000 .hidden __aeabi_uldivmod
10001618 g       .noinit	00000000 _noinit
00016268 g     F .text	00000060 puts
1000050c g     O .data	000000e4 dynamic_isr_vector_table
000113e4  w    F .text	0000002c Gpio::GetPin()
0001148c  w    F .text	0000005c Gpio::SetInterruptRoutine(void (*)())
00010f98  w    F .text	00000034 GpioInterface::GpioInterface()
00011eec  w    F .text	00000034 SspInterface::SspInterface()
0001600c  w    F .text	0000006c RitIrqHandler
0001600c  w    F .text	0000006c Uart2IrqHandler
00010c1c  w    F .text	00000064 Pin::BitPlace(unsigned long, unsigned long, unsigned long, unsigned long)
00019918  w    O .text	00000016 Lpc40xxSystemController::SetCpuClockDivider(unsigned char)::file
0001b6d4  w    O .text	00000007 Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file
00012550  w    F .text	00000160 Ssp::GetPeripheralMode()
00015d60  w    F .text	000000a0 void Timer::ClearInterrupts<(TimerInterface::TimerPort)2>()
00018bcc g     F .text	00000060 roundf
00019034 g     F .text	00000050 _raise_r
00010e78  w    F .text	0000002c Wait(unsigned long long)::{lambda()#1}::_FUN()
00011ec0  w    F .text	0000002c int util::Value<Ssp::Peripheral, int>(Ssp::Peripheral)
00011f20  w    F .text	00000038 PinInterface::PinInterface(PinInterface const&)
10010000 g       *ABS*	00000000 __top_RAM
0001a3b8  w    O .text	00000004 Uart::kRxUartPortFunction
00016460 g     F .text	00000066 xPortPendSVHandler
00017814 g     F .text	00000044 vsnprintf
00010ea4  w    F .text	000000c4 Wait(unsigned long long)
00017858  w    F .text	00000034 SdInterface::SdInterface()
00014f9c  w    F .text	0000003c Timer::GetTimer()
10000000 g       *ABS*	00000000 __base_RamLoc64
0001630c g     F .text	00000028 GetStackTrace()
100005f0 g     O .data	00000004 out
10000064  w    O .data	00000004 Lpc40xxSystemController::speed_in_hertz
0001b724  w    O .text	00000007 Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file
0001b70c  w    O .text	00000007 Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file
000190b8 g     F .text	00000004 _getpid_r
00000000 g       *ABS*	00000000 __base_MFlash512
00019a1c  w    O .text	0000004c vtable for Ssp
10010000 g       *ABS*	00000000 StackTop
00017d3c  w    F .text	00000064 Sd::WaitToReadBlock()
00019930  w    O .text	00000003 Ssp::kPinSelect
00013318  w    F .text	00000038 Graphics::Clear()
00012cb4  w    F .text	00000068 Ssd1306::AvailableColors()
00018cfc g     F .text	000002cc .hidden __udivmoddi4
0001600c  w    F .text	0000006c I2sIrqHandler
000100fc g       .text	00000000 bss_section_table
000135d8  w    F .text	00000050 OledTerminal::ClearRow(unsigned int)
00010300 g       .text	00000000 __CRP_WORD_END__
20008000 g       *ABS*	00000000 __top_RAM2
000159b0 g     F .text	00000030 ResetIsr
000199c4  w    O .text	0000002c vtable for Ssd1306
00017cf8  w    F .text	00000044 Sd::ToBool(bool)
00019a68  w    O .text	00000028 vtable for SspInterface
0001600c  w    F .text	0000006c PendSVHandler
10000074  w    O .data	00000400 font8x8_basic
000122b4  w    F .text	00000030 unsigned char util::Value<SspInterface::DataSize, unsigned char>(SspInterface::DataSize)
100007ac g     O .bss	00000004 CB1
00014b8c  w    F .text	00000034 SystemTimer::SetIsrFunction(void (*)())
00014890  w    F .text	00000044 bool bit::Read<unsigned long>(unsigned long, unsigned long)
00012174  w    F .text	00000078 Ssp::IsTransferRegBusy()
0001600c  w    F .text	0000006c UsageFaultHandler
20000000 g       *ABS*	00000000 __user_heap_base
1000079c g     O .bss	00000002 led1
000130b4  w    F .text	0000008c Graphics::Graphics(PixelDisplayInterface*)
0001b914 g       .text	00000000 __exidx_start
00010ac0  w    F .text	00000074 Pin::EnableI2cHighCurrentDrive(bool)
0001600c  w    F .text	0000006c Uart4IrqHandler
000114e8  w    F .text	00000054 Gpio::ClearInterruptRoutine()
00010a44  w    F .text	0000007c Pin::EnableI2cHighSpeedMode(bool)
000101fc g     F .text	00000018 InitFpu()
00010954  w    F .text	0000007c Pin::EnableDigitalFilter(bool)
00012c5c  w    F .text	0000002c Ssd1306::GetWidth()
00018fdc g     F .text	00000048 __libc_init_array
0001600c g     F .text	0000006c InterruptLookupHandler
00011b78  w    F .text	00000030 Lpc40xxSystemController::SelectSpifiClockSource(Lpc40xxSystemController::SpifiSource)
00011a18  w    F .text	00000018 Lpc40xxSystemController::GetPeripheralClockDivider() const
1000001c  w    O .data	00000004 Uptime
00019b20  w    O .text	00000048 vtable for GpioInterface
000151d4  w    F .text	000000e8 Uart::Send(unsigned char)
00018fcc g     F .text	0000000e abort
0001600c  w    F .text	0000006c BodIrqHandler
100007b8 g     O .bss	00000004 increment
0001289c  w    F .text	00000184 Ssp::GetClock()
00010300 g     F .text	00000000 _init
0001010c g       .text	00000000 section_table_end
00015e00  w    F .text	000000a0 void Timer::ClearInterrupts<(TimerInterface::TimerPort)3>()
00018bc0 g     F .text	0000000a std::terminate()
00018c2c g     F .text	0000009e .hidden __aeabi_d2f
00011878  w    F .text	0000007c Gpio::ClearEdgeFalling()
0001600c  w    F .text	0000006c SysTickHandler
000100e4 g       .text	00000000 section_table_start
10001618 g       .bss	00000000 _ebss
00013040  w    F .text	00000074 Ssd1306::Update()
00011780  w    F .text	0000007c Gpio::SetEdgeFalling()
0001b6e4  w    O .text	00000007 Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file
0001600c  w    F .text	0000006c RtcIrqHandler
00011374  w    F .text	00000070 Gpio::Read()
000130b4  w    F .text	0000008c Graphics::Graphics(PixelDisplayInterface*)
00015ad0  w    F .text	000000a8 Status Wait<Uart::Send(unsigned char)::{lambda()#1}>(unsigned long long, Uart::Send(unsigned char)::{lambda()#1})
eff72402 g       *ABS*	00000000 ValidUserCodeChecksum
0001600c  w    F .text	0000006c Uart0IrqHandler
000160d4 g     F .text	00000078 GetRegistersFromStack
000105a0 g     F .text	000000cc LabGPIO::setPulldown()
00014854  w    F .text	0000003c unsigned long bit::Set<unsigned long>(unsigned long, unsigned long)
00013350  w    F .text	0000004c OledTerminal::Initialize()
000132e0  w    F .text	00000038 Graphics::Update()
00019ba4  w    O .text	0000003c vtable for PinInterface
0001600c  w    F .text	0000006c UsbIrqHandler
0001600c  w    F .text	0000006c AdcIrqHandler
000152bc  w    F .text	0000004c Uart::Receive(unsigned long)::{lambda()#1}::operator()() const
00014aec  w    F .text	00000030 SetUptimeFunction(unsigned long long (*)())
00010368 g     F .text	00000048 LabGPIO::LabGPIO(unsigned char, unsigned char)
0001b8b4 g     O .text	00000020 __sf_fake_stderr
00012a20  w    F .text	00000094 PixelDisplayInterface::Color_t::Color_t(bool, bool, bool, unsigned char, unsigned char, bool)
0001b3b4  w    O .text	00000100 Sd::kCrcTable8
00018bb0 g     F .text	00000010 std::get_terminate()
00015570  w    F .text	00000074 Uart::FractionalEstimate(float, float)
0001156c  w    F .text	00000088 Gpio::SetInterruptEdge(GpioInterface::Edge)
10000ba8 g     O .bss	00000064 translated
0001600c  w    F .text	0000006c EnetIrqHandler
0001600c  w    F .text	0000006c DmaIrqHandler
0001010c g     F .text	00000090 InitDataSection()
00016078 g     F .text	0000005c RegisterIsr(IRQn, void (*)(), bool, long)
00000000 g       *ABS*	00000000 __base_Flash
0001600c  w    F .text	0000006c Eint1IrqHandler
10000068  w    O .data	0000000c Ssp::ssp_registers
0001600c  w    F .text	0000006c SvcHandler
0001339c  w    F .text	00000158 OledTerminal::printf(char const*, ...)
0001600c  w    F .text	0000006c GpioIrqHandler
0001b734  w    O .text	00000007 Sd::DeleteBlock(unsigned long, unsigned long)::file
0001600c  w    F .text	0000006c SdioIrqHandler
10010000 g       *ABS*	00000000 __top_RamLoc64
10000660 g       .bss	00000000 _bss
0001b6cc  w    O .text	00000007 Sd::Mount(SdInterface::CardInfo_t*)::file
0001600c  w    F .text	0000006c Pll1IrqHandler
0001600c  w    F .text	0000006c MemManageHandler
00012b44  w    F .text	00000028 PixelDisplayInterface::Disable()
00018ba0 g     F .text	00000006 __cxa_pure_virtual
00013288  w    F .text	00000058 Graphics::DrawPixel(unsigned long, unsigned long)
0001600c  w    F .text	0000006c Pwm1IrqHandler
0001153c  w    F .text	00000030 unsigned char util::Value<GpioInterface::Edge, unsigned char>(GpioInterface::Edge)
0001600c  w    F .text	0000006c Timer0IrqHandler
00015b78  w    F .text	000000a8 Status Wait<Uart::Receive(unsigned long)::{lambda()#1}>(unsigned long long, Uart::Receive(unsigned long)::{lambda()#1})
00012c88  w    F .text	0000002c Ssd1306::GetHeight()
00080000 g       *ABS*	00000000 __top_Flash
000155e4  w    F .text	00000084 Uart::IsDecmial(float)
000126b0  w    F .text	000001ec Ssp::SetClock(bool, bool, unsigned char, unsigned char)
0001353c  w    F .text	0000009c OledTerminal::Update()
00013948 g     F .text	00000224 EC()
10001618 g       .noinit	00000000 _end_noinit
100007b4 g     O .bss	00000004 CB3
00014b1c  w    F .text	0000003c SystemTimer::DisableTimer()
000183b4  w    F .text	00000120 Sd::DeleteBlock(unsigned long, unsigned long)
00016360 g     F .text	000000c8 vTaskSwitchContext
00014948  w    F .text	00000054 unsigned long bit::Extract<unsigned long>(unsigned long, unsigned long, unsigned long)
000106a0  w    F .text	00000058 Pin::Pin(unsigned char, unsigned char)
00012314  w    F .text	00000030 unsigned char util::Value<SspInterface::MasterSlaveMode, unsigned char>(SspInterface::MasterSlaveMode)
0001b6f4  w    O .text	00000007 Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file
0001a3b4  w    O .text	00000004 Uart::kTxUartPortFunction
0001318c  w    F .text	000000fc Graphics::DrawCharacter(long, long, char, bool)
0001600c  w    F .text	0000006c Uart3IrqHandler
000118f4  w    F .text	00000018 SystemControllerInterface::SystemControllerInterface()
0001b72c  w    O .text	00000007 Sd::DeleteBlock(unsigned long, unsigned long)::file
20000000 g       *ABS*	00000000 __base_RamPeriph32
00012fac  w    F .text	00000094 Ssd1306::DrawPixel(long, long, PixelDisplayInterface::Color_t)
000198ac  w    O .text	00000009 Gpio::ClearInterruptEdge(GpioInterface::Edge)::file
1000152c g     O .bss	00000004 stack_depth
00011290  w    F .text	0000006c Gpio::Toggle()
0001b704  w    O .text	00000007 Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file
0001b4b4  w    O .text	00000200 Sd::kCrcTable16
10000688  w    O .bss	00000100 Gpio::interrupthandlers
00018fc8  w    F .text	00000002 .hidden __aeabi_ldiv0
0001600c  w    F .text	0000006c Timer1IrqHandler
00012ab4  w    F .text	00000068 PixelDisplayInterface::Color_t::Color_t()
000154fc  w    F .text	00000074 Uart::DividerEstimate(float, float)
00011184  w    F .text	00000064 Gpio::SetHigh()
10000790 g     O .bss	00000002 button2
00015400  w    F .text	000000fc Uart::FindClosestFractional(float)
00011fac  w    F .text	000000e4 Ssp::Ssp(Ssp::Peripheral)
000100e4 g       .text	00000000 data_section_table
000198d0  w    O .text	00000016 Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)::file
00010770  w    F .text	00000080 Pin::SetMode(PinInterface::Mode)
00017da0  w    F .text	00000050 Sd::WaitWhileBusy()
00014c5c  w    F .text	00000094 SystemTimer::SetTickFrequency(unsigned long)
0001b8d4 g     O .text	00000020 __sf_fake_stdin
0001499c  w    F .text	00000074 unsigned long bit::Insert<unsigned long, bool>(unsigned long, bool, unsigned long, unsigned long)
000102fc g       .text	00000000 __CRP_WORD_START__
0001a398  w    O .text	00000010 Timer::kTimerIsr
00012dac  w    F .text	000000f0 Ssd1306::InitializationPanel()
0001167c  w    F .text	00000048 Gpio::AttachInterrupt(void (*)(), GpioInterface::Edge)
0001600c  w    F .text	0000006c Uart1IrqHandler
00011048  w    F .text	0000007c Gpio::SetAsInput()
000162c8 g     F .text	00000028 __cyg_profile_func_enter
00019024 g     F .text	00000010 memset
000136ec g     F .text	000000d0 main
0001788c  w    F .text	000000a0 Sd::Sd(Sd::DebugSdCard_t, unsigned char, unsigned char, unsigned char, unsigned char)
1000078c g     O .bss	00000002 led3
10000038  w    O .data	00000028 Gpio::interrupt
100007a4 g     O .bss	00000002 led0
00014d20  w    F .text	00000020 Timer::DoNothingIsr()
0001600c  w    F .text	0000006c QeiIrqHandler
20000000 g       *ABS*	00000000 heap
0001600c  w    F .text	0000006c Ssp2IrqHandler
00010c80  w    F .text	0000002c Pin::GetPort() const
00018208  w    F .text	000001ac Sd::WriteBlock(unsigned long, unsigned char const*, unsigned long)
000106a0  w    F .text	00000058 Pin::Pin(unsigned char, unsigned char)
00018c2c g     F .text	0000009e .hidden __truncdfsf2
0001031c g       .text	00000000 __init_array_end
00016430 g     F .text	00000026 vPortSVCHandler
0001614c g     F .text	0000003c FirmwareStdOut(int)
0001b74c  w    O .text	0000002c vtable for Sd
000115f4  w    F .text	00000088 Gpio::ClearInterruptEdge(GpioInterface::Edge)
0001600c  w    F .text	0000006c Ssp1IrqHandler
000159e0  w    F .text	0000003c void Timer::TimerHandler<(TimerInterface::TimerPort)0>()
10000478 g     O .data	00000004 translated_count
0001997c  w    O .text	0000000c Ssp::kPowerBit
10000788 g     O .bss	00000002 button3
00010cac  w    F .text	0000002c Pin::GetPin() const
00014fd8  w    F .text	000000cc Uart::SetBaudRate(unsigned long)
00013b6c g     F .text	00000c3c morse_translate()
0001a3d8  w    O .text	0000003c vtable for Uart
00011140  w    F .text	00000044 Gpio::SetDirection(GpioInterface::Direction)
000110c4  w    F .text	0000007c Gpio::SetAsOutput()
0001b714  w    O .text	00000007 Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file
00011cb8  w    F .text	00000170 Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)
00013680  w    F .text	0000006c OledTerminal::OledTerminal()
000111e8  w    F .text	00000064 Gpio::SetLow()
00019a90  w    O .text	00000024 vtable for Lpc40xxSystemController
00017df0  w    F .text	00000418 Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)
0001b73c  w    O .text	00000007 Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)::file
000198b8  w    O .text	00000016 Lpc40xxSystemController::SetPeripheralClockDivider(unsigned char)::file
00015994 g     F .text	0000001a SystemInit
00014d40  w    F .text	00000134 Timer::Initialize(unsigned long, void (*)(), long)
10000c0c g     O .bss	000007c8 oled_terminal
00011a84  w    F .text	00000030 Lpc40xxSystemController::PowerUpPeripheral(SystemControllerInterface::PeripheralID const&)
20008000 g       *ABS*	00000000 heap_end
00012090  w    F .text	000000e4 Ssp::Initialize()
0001a414  w    O .text	00000038 vtable for Timer
100007bc g     O .bss	00000004 count
00011f20  w    F .text	00000038 PinInterface::PinInterface(PinInterface const&)
10000480  w    O .data	00000010 Timer::tim_register
0001600c  w    F .text	0000006c Ssp0IrqHandler
00010368 g     F .text	00000048 LabGPIO::LabGPIO(unsigned char, unsigned char)
0001031c g     F .text	00000000 _fini
0001600c  w    F .text	0000006c UsbactivityIrqHandler
0001124c  w    F .text	00000044 Gpio::Set(GpioInterface::State)
0001600c  w    F .text	0000006c Pll0IrqHandler
00011f58  w    F .text	00000054 Pin::Pin(Pin const&)
000100fc g       .text	00000000 data_section_table_end
0001600c  w    F .text	0000006c CanactivityIrqHandler
0001600c  w    F .text	0000006c NmiHandler
00012ab4  w    F .text	00000068 PixelDisplayInterface::Color_t::Color_t()
00012b6c  w    F .text	00000028 PixelDisplayInterface::Update()
00019934  w    O .text	00000048 Ssp::kSspPinMatrix
00012f20  w    F .text	00000054 Ssd1306::SetHorizontalAddressMode()
000112fc  w    F .text	00000078 Gpio::ReadState()
0001b6dc  w    O .text	00000007 Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file
100007b0 g     O .bss	00000004 CB2
100005f8 g     O .data	00000004 _impure_ptr
000147a8  w    F .text	000000ac Status Wait<Wait(unsigned long long)::{lambda()#1}>(unsigned long long, Wait(unsigned long long)::{lambda()#1})
10000000 g       .uninit_RESERVED	00000000 _end_uninit_RESERVED
000189bc  w    F .text	00000070 Sd::GetCrc7(unsigned char*, unsigned char)
00012e9c  w    F .text	00000084 Ssd1306::Initialize()
0001600c  w    F .text	0000006c McpwmIrqHandler
0001030c g       .text	00000000 __preinit_array_end
0001600c  w    F .text	0000006c WdtIrqHandler
00010e4c  w    F .text	0000002c Wait(unsigned long long)::{lambda()#1}::operator()() const
000184d4  w    F .text	000004a0 Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)
0001190c  w    F .text	00000024 Lpc40xxSystemController::Lpc40xxSystemController()
00019b68  w    O .text	0000003c vtable for Pin
00012f74  w    F .text	00000038 Ssd1306::Clear()
10000000 g       .data	00000000 _data
00010864  w    F .text	00000074 Pin::SetAsActiveLow(bool)
00011b18  w    F .text	00000030 Lpc40xxSystemController::SelectMainClockSource(Lpc40xxSystemController::MainClockSource)
00011704  w    F .text	0000007c Gpio::SetEdgeRising()
0001b6bc  w    O .text	00000007 Sd::Mount(SdInterface::CardInfo_t*)::file
00014cf0  w    F .text	00000030 unsigned char util::Value<TimerInterface::TimerPort, unsigned char>(TimerInterface::TimerPort)
10001418  w    O .bss	00000010 Timer::user_timer_isr
00012b1c  w    F .text	00000028 PixelDisplayInterface::Enable()
000198e8  w    O .text	00000016 Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)::file
100013d8  w    O .bss	00000040 Timer::match
000103f4 g     F .text	00000044 LabGPIO::SetLow()
00015188  w    F .text	0000004c Uart::Send(unsigned char)::{lambda()#1}::operator()() const
000199f0  w    O .text	0000002c vtable for PixelDisplayInterface
000179dc  w    F .text	0000031c Sd::Mount(SdInterface::CardInfo_t*)
100005f4 g     O .data	00000004 __cxxabiv1::__terminate_handler
10000798 g     O .bss	00000002 button1
00019ab4  w    O .text	00000024 vtable for SystemControllerInterface
00019ad8  w    O .text	00000048 vtable for Gpio
1000065c g       .data	00000000 _edata
0001a384  w    O .text	00000010 Timer::kPowerbit
00015a1c  w    F .text	0000003c void Timer::TimerHandler<(TimerInterface::TimerPort)1>()
000107f0  w    F .text	00000074 Pin::EnableHysteresis(bool)
00010f98  w    F .text	00000034 GpioInterface::GpioInterface()
00010488 g     F .text	00000118 LabGPIO::toggle()
00012a20  w    F .text	00000094 PixelDisplayInterface::Color_t::Color_t(bool, bool, bool, unsigned char, unsigned char, bool)
0001600c  w    F .text	0000006c DebugMonHandler
00011410  w    F .text	0000007c Gpio::ValidPortCheck()
0001600c  w    F .text	0000006c Eint2IrqHandler
20008000 g       *ABS*	00000000 __top_RamPeriph32
00011fac  w    F .text	000000e4 Ssp::Ssp(Ssp::Peripheral)
100007a8 g     O .bss	00000004 CB0
0001600c  w    F .text	0000006c Timer3IrqHandler
000103b0 g     F .text	00000044 LabGPIO::SetHigh()
00012b94  w    F .text	00000034 PixelDisplayInterface::PixelDisplayInterface()
10000000 g       *ABS*	00000000 __base_RAM
0001600c  w    F .text	0000006c Eint3IrqHandler
00018ba6 g     F .text	00000008 __cxxabiv1::__terminate(void (*)())
000161c4 g     F .text	00000030 _kill
0001600c  w    F .text	0000006c I2c0IrqHandler
00011f58  w    F .text	00000054 Pin::Pin(Pin const&)
0001a3a8  w    O .text	0000000a Timer::Initialize(unsigned long, void (*)(), long)::file
00014b58  w    F .text	00000034 SystemTimer::SystemTimerHandler()
0001b6c4  w    O .text	00000007 Sd::Mount(SdInterface::CardInfo_t*)::file
10000474 g     O .data	00000004 word_count
0001b8f4 g     O .text	00000020 __sf_fake_stdout
00010cd8  w    F .text	00000100 debug::PrintBacktrace(bool, void*)
0001030c g       .text	00000000 __init_array_start
00018fc8  w    F .text	00000002 .hidden __aeabi_idiv0
0001b778  w    O .text	0000002c vtable for SdInterface
0001792c  w    F .text	000000b0 Sd::Initialize()
00016188 g     F .text	00000018 _exit
000109d0  w    F .text	00000074 Pin::EnableFastMode(bool)
00015c20  w    F .text	000000a0 void Timer::ClearInterrupts<(TimerInterface::TimerPort)0>()
0001600c  w    F .text	0000006c Eint0IrqHandler
00014bc0  w    F .text	0000009c SystemTimer::StartTimer()
000122e4  w    F .text	00000030 unsigned char util::Value<SspInterface::FrameMode, unsigned char>(SspInterface::FrameMode)
0001019c g     F .text	00000060 InitBssSection()
00010fcc  w    F .text	0000007c Gpio::Gpio(unsigned char, unsigned char)
00015898 g     F .text	00000040 UptimeRTOS
00012b94  w    F .text	00000034 PixelDisplayInterface::PixelDisplayInterface()
00013140  w    F .text	0000004c Graphics::Initialize()
00010b34  w    F .text	00000074 Pin::SetAsOpenDrain(bool)
100007c0 g     O .bss	000003e8 morse
0001a44c  w    O .text	00000038 vtable for SystemTimer
0001600c  w    F .text	0000006c SpiIrqHandler
0001b6fc  w    O .text	00000007 Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file
00012258  w    F .text	0000005c Ssp::SetSpiMasterDefault()
100004a0  w    O .data	00000040 Uart::pairs
000118f4  w    F .text	00000018 SystemControllerInterface::SystemControllerInterface()
00011ab4  w    F .text	00000030 Lpc40xxSystemController::PowerDownPeripheral(SystemControllerInterface::PeripheralID const&)
00017858  w    F .text	00000034 SdInterface::SdInterface()
0001030c g       .text	00000000 __preinit_array_start
00019900  w    O .text	00000016 Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)::file
00011ae4  w    F .text	00000034 Lpc40xxSystemController::SelectOscillatorSource(Lpc40xxSystemController::OscillatorSource)
10001428  w    O .bss	00000004 guard variable for Timer::match
00012344  w    F .text	0000020c Ssp::SetPeripheralMode(SspInterface::MasterSlaveMode, SspInterface::FrameMode, SspInterface::DataSize)
000106f8  w    F .text	00000078 Pin::SetPinFunction(unsigned char)
10000794 g     O .bss	00000002 led2
000148d4  w    F .text	00000074 unsigned long bit::Insert<unsigned long, unsigned char>(unsigned long, unsigned char, unsigned long, unsigned long)
0001066c  w    F .text	00000034 PinInterface::PinInterface()
100007a0 g     O .bss	00000002 button0
000119c0  w    F .text	00000058 Lpc40xxSystemController::SetPeripheralClockDivider(unsigned char)
00010fcc  w    F .text	0000007c Gpio::Gpio(unsigned char, unsigned char)
00015a94  w    F .text	0000003c void Timer::TimerHandler<(TimerInterface::TimerPort)3>()
00019084 g     F .text	00000010 raise



Disassembly of section .text:

00010000 <kInterruptVectorTable>:
   10000:	00 00 01 10 b1 59 01 00 0d 60 01 00 19 02 01 00     .....Y...`......
   10010:	0d 60 01 00 0d 60 01 00 0d 60 01 00 02 24 f7 ef     .`...`...`...$..
	...
   1002c:	31 64 01 00 0d 60 01 00 00 00 00 00 61 64 01 00     1d...`......ad..
   1003c:	0d 60 01 00 0d 60 01 00 0d 60 01 00 0d 60 01 00     .`...`...`...`..
   1004c:	0d 60 01 00 0d 60 01 00 0d 60 01 00 0d 60 01 00     .`...`...`...`..
   1005c:	0d 60 01 00 0d 60 01 00 0d 60 01 00 0d 60 01 00     .`...`...`...`..
   1006c:	0d 60 01 00 0d 60 01 00 00 00 00 00 0d 60 01 00     .`...`.......`..
   1007c:	0d 60 01 00 0d 60 01 00 0d 60 01 00 0d 60 01 00     .`...`...`...`..
   1008c:	0d 60 01 00 0d 60 01 00 0d 60 01 00 0d 60 01 00     .`...`...`...`..
   1009c:	0d 60 01 00 0d 60 01 00 0d 60 01 00 0d 60 01 00     .`...`...`...`..
   100ac:	0d 60 01 00 0d 60 01 00 0d 60 01 00 0d 60 01 00     .`...`...`...`..
   100bc:	0d 60 01 00 0d 60 01 00 0d 60 01 00 0d 60 01 00     .`...`...`...`..
   100cc:	0d 60 01 00 0d 60 01 00 0d 60 01 00 0d 60 01 00     .`...`...`...`..
   100dc:	0d 60 01 00 0d 60 01 00                             .`...`..

000100e4 <data_section_table>:
   100e4:	0001b91c 	.word	0x0001b91c
   100e8:	10000000 	.word	0x10000000
   100ec:	0000065c 	.word	0x0000065c
   100f0:	0001b91c 	.word	0x0001b91c
   100f4:	20000000 	.word	0x20000000
   100f8:	00000000 	.word	0x00000000

000100fc <bss_section_table>:
   100fc:	10000660 	.word	0x10000660
   10100:	00000fb8 	.word	0x00000fb8
   10104:	20000000 	.word	0x20000000
   10108:	00000000 	.word	0x00000000

0001010c <InitDataSection()>:
SJ2_IGNORE_STACK_TRACE(void SystemInit());

// Functions to carry out the initialization of RW and BSS data sections.
SJ2_SECTION(".after_vectors")
void InitDataSection()
{
   1010c:	b086      	sub	sp, #24
  for (int i = 0; &data_section_table[i] < &data_section_table_end; i++)
   1010e:	2300      	movs	r3, #0
   10110:	9305      	str	r3, [sp, #20]
   10112:	9a05      	ldr	r2, [sp, #20]
   10114:	4613      	mov	r3, r2
   10116:	005b      	lsls	r3, r3, #1
   10118:	4413      	add	r3, r2
   1011a:	009b      	lsls	r3, r3, #2
   1011c:	4a1d      	ldr	r2, [pc, #116]	; (10194 <InitDataSection()+0x88>)
   1011e:	4413      	add	r3, r2
   10120:	4a1d      	ldr	r2, [pc, #116]	; (10198 <InitDataSection()+0x8c>)
   10122:	4293      	cmp	r3, r2
   10124:	d233      	bcs.n	1018e <InitDataSection()+0x82>
  {
    uint32_t * rom_location = data_section_table[i].rom_location;
   10126:	491b      	ldr	r1, [pc, #108]	; (10194 <InitDataSection()+0x88>)
   10128:	9a05      	ldr	r2, [sp, #20]
   1012a:	4613      	mov	r3, r2
   1012c:	005b      	lsls	r3, r3, #1
   1012e:	4413      	add	r3, r2
   10130:	009b      	lsls	r3, r3, #2
   10132:	440b      	add	r3, r1
   10134:	681b      	ldr	r3, [r3, #0]
   10136:	9303      	str	r3, [sp, #12]
    uint32_t * ram_location = data_section_table[i].ram_location;
   10138:	4916      	ldr	r1, [pc, #88]	; (10194 <InitDataSection()+0x88>)
   1013a:	9a05      	ldr	r2, [sp, #20]
   1013c:	4613      	mov	r3, r2
   1013e:	005b      	lsls	r3, r3, #1
   10140:	4413      	add	r3, r2
   10142:	009b      	lsls	r3, r3, #2
   10144:	440b      	add	r3, r1
   10146:	685b      	ldr	r3, [r3, #4]
   10148:	9302      	str	r3, [sp, #8]
    uint32_t length         = data_section_table[i].length;
   1014a:	4912      	ldr	r1, [pc, #72]	; (10194 <InitDataSection()+0x88>)
   1014c:	9a05      	ldr	r2, [sp, #20]
   1014e:	4613      	mov	r3, r2
   10150:	005b      	lsls	r3, r3, #1
   10152:	4413      	add	r3, r2
   10154:	009b      	lsls	r3, r3, #2
   10156:	440b      	add	r3, r1
   10158:	3308      	adds	r3, #8
   1015a:	681b      	ldr	r3, [r3, #0]
   1015c:	9301      	str	r3, [sp, #4]
    for (size_t j = 0; j < length; j++)
   1015e:	2300      	movs	r3, #0
   10160:	9304      	str	r3, [sp, #16]
   10162:	9a04      	ldr	r2, [sp, #16]
   10164:	9b01      	ldr	r3, [sp, #4]
   10166:	429a      	cmp	r2, r3
   10168:	d20d      	bcs.n	10186 <InitDataSection()+0x7a>
    {
      ram_location[j] = rom_location[j];
   1016a:	9b04      	ldr	r3, [sp, #16]
   1016c:	009b      	lsls	r3, r3, #2
   1016e:	9a03      	ldr	r2, [sp, #12]
   10170:	441a      	add	r2, r3
   10172:	9b04      	ldr	r3, [sp, #16]
   10174:	009b      	lsls	r3, r3, #2
   10176:	9902      	ldr	r1, [sp, #8]
   10178:	440b      	add	r3, r1
   1017a:	6812      	ldr	r2, [r2, #0]
   1017c:	601a      	str	r2, [r3, #0]
    for (size_t j = 0; j < length; j++)
   1017e:	9b04      	ldr	r3, [sp, #16]
   10180:	3301      	adds	r3, #1
   10182:	9304      	str	r3, [sp, #16]
   10184:	e7ed      	b.n	10162 <InitDataSection()+0x56>
  for (int i = 0; &data_section_table[i] < &data_section_table_end; i++)
   10186:	9b05      	ldr	r3, [sp, #20]
   10188:	3301      	adds	r3, #1
   1018a:	9305      	str	r3, [sp, #20]
   1018c:	e7c1      	b.n	10112 <InitDataSection()+0x6>
    }
  }
}
   1018e:	bf00      	nop
   10190:	b006      	add	sp, #24
   10192:	4770      	bx	lr
   10194:	000100e4 	.word	0x000100e4
   10198:	000100fc 	.word	0x000100fc

0001019c <InitBssSection()>:

// Functions to initialization BSS data sections. This is important because
// the std c libs assume that BSS is set to zero.
SJ2_SECTION(".after_vectors")
void InitBssSection()
{
   1019c:	b084      	sub	sp, #16
  for (int i = 0; &bss_section_table[i] < &bss_section_table_end; i++)
   1019e:	2300      	movs	r3, #0
   101a0:	9303      	str	r3, [sp, #12]
   101a2:	9b03      	ldr	r3, [sp, #12]
   101a4:	00db      	lsls	r3, r3, #3
   101a6:	4a13      	ldr	r2, [pc, #76]	; (101f4 <InitBssSection()+0x58>)
   101a8:	4413      	add	r3, r2
   101aa:	4a13      	ldr	r2, [pc, #76]	; (101f8 <InitBssSection()+0x5c>)
   101ac:	4293      	cmp	r3, r2
   101ae:	d21e      	bcs.n	101ee <InitBssSection()+0x52>
  {
    uint32_t * ram_location = bss_section_table[i].ram_location;
   101b0:	4a10      	ldr	r2, [pc, #64]	; (101f4 <InitBssSection()+0x58>)
   101b2:	9b03      	ldr	r3, [sp, #12]
   101b4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
   101b8:	9301      	str	r3, [sp, #4]
    uint32_t length         = bss_section_table[i].length;
   101ba:	4a0e      	ldr	r2, [pc, #56]	; (101f4 <InitBssSection()+0x58>)
   101bc:	9b03      	ldr	r3, [sp, #12]
   101be:	00db      	lsls	r3, r3, #3
   101c0:	4413      	add	r3, r2
   101c2:	685b      	ldr	r3, [r3, #4]
   101c4:	9300      	str	r3, [sp, #0]
    for (size_t j = 0; j < length; j++)
   101c6:	2300      	movs	r3, #0
   101c8:	9302      	str	r3, [sp, #8]
   101ca:	9a02      	ldr	r2, [sp, #8]
   101cc:	9b00      	ldr	r3, [sp, #0]
   101ce:	429a      	cmp	r2, r3
   101d0:	d209      	bcs.n	101e6 <InitBssSection()+0x4a>
    {
      ram_location[j] = 0;
   101d2:	9b02      	ldr	r3, [sp, #8]
   101d4:	009b      	lsls	r3, r3, #2
   101d6:	9a01      	ldr	r2, [sp, #4]
   101d8:	4413      	add	r3, r2
   101da:	2200      	movs	r2, #0
   101dc:	601a      	str	r2, [r3, #0]
    for (size_t j = 0; j < length; j++)
   101de:	9b02      	ldr	r3, [sp, #8]
   101e0:	3301      	adds	r3, #1
   101e2:	9302      	str	r3, [sp, #8]
   101e4:	e7f1      	b.n	101ca <InitBssSection()+0x2e>
  for (int i = 0; &bss_section_table[i] < &bss_section_table_end; i++)
   101e6:	9b03      	ldr	r3, [sp, #12]
   101e8:	3301      	adds	r3, #1
   101ea:	9303      	str	r3, [sp, #12]
   101ec:	e7d9      	b.n	101a2 <InitBssSection()+0x6>
    }
  }
}
   101ee:	bf00      	nop
   101f0:	b004      	add	sp, #16
   101f2:	4770      	bx	lr
   101f4:	000100fc 	.word	0x000100fc
   101f8:	0001010c 	.word	0x0001010c

000101fc <InitFpu()>:
      // Write back the modified value to the CPACR
      "STR     R1, [R0]\n"
      // Wait for store to complete
      "DSB\n"
      // reset pipeline now the FPU is enabled
      "ISB\n");
   101fc:	f8df 0014 	ldr.w	r0, [pc, #20]	; 10214 <InitFpu()+0x18>
   10200:	6801      	ldr	r1, [r0, #0]
   10202:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   10206:	6001      	str	r1, [r0, #0]
   10208:	f3bf 8f4f 	dsb	sy
   1020c:	f3bf 8f6f 	isb	sy
}
   10210:	bf00      	nop
   10212:	4770      	bx	lr
   10214:	e000ed88 	.word	0xe000ed88

00010218 <HardFaultHandler>:
      " mrseq r0, msp                                       \n"
      " mrsne r0, psp                                       \n"
      " ldr r1, [r0, #24]                                   \n"
      " ldr r2, handler2_address_const                      \n"
      " bx r2                                               \n"
      " handler2_address_const: .word GetRegistersFromStack \n");
   10218:	f01e 0f04 	tst.w	lr, #4
   1021c:	bf0c      	ite	eq
   1021e:	f3ef 8008 	mrseq	r0, MSP
   10222:	f3ef 8009 	mrsne	r0, PSP
   10226:	6981      	ldr	r1, [r0, #24]
   10228:	4a00      	ldr	r2, [pc, #0]	; (1022c <handler2_address_const>)
   1022a:	4710      	bx	r2

0001022c <handler2_address_const>:
   1022c:	000160d5 	.word	0x000160d5
#endif
}
   10230:	bf00      	nop
   10232:	4770      	bx	lr
   10234:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   10238:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   1023c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   10240:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   10244:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   10248:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   1024c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   10250:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   10254:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   10258:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   1025c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   10260:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   10264:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   10268:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   1026c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   10270:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   10274:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   10278:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   1027c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   10280:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   10284:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   10288:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   1028c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   10290:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   10294:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   10298:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   1029c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102a0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102a4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102a8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102ac:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102b0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102b4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102b8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102bc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102c0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102c4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102c8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102cc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102d0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102d4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102d8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102dc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102e0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102e4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102e8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102ec:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102f0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102f4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102f8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

000102fc <__CRP_WORD_START__>:
   102fc:	ffffffff 	.word	0xffffffff

00010300 <_init>:
   10300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10302:	bf00      	nop
   10304:	bcf8      	pop	{r3, r4, r5, r6, r7}
   10306:	bc08      	pop	{r3}
   10308:	469e      	mov	lr, r3
   1030a:	4770      	bx	lr

0001030c <__init_array_start>:
   1030c:	0001034d 	.word	0x0001034d
   10310:	00014ac5 	.word	0x00014ac5
   10314:	00015f7d 	.word	0x00015f7d
   10318:	00018b79 	.word	0x00018b79

0001031c <_fini>:
   1031c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1031e:	bf00      	nop
   10320:	bcf8      	pop	{r3, r4, r5, r6, r7}
   10322:	bc08      	pop	{r3}
   10324:	469e      	mov	lr, r3
   10326:	4770      	bx	lr

00010328 <__do_global_dtors_aux>:
   10328:	b510      	push	{r4, lr}
   1032a:	4c05      	ldr	r4, [pc, #20]	; (10340 <__do_global_dtors_aux+0x18>)
   1032c:	7823      	ldrb	r3, [r4, #0]
   1032e:	b933      	cbnz	r3, 1033e <__do_global_dtors_aux+0x16>
   10330:	4b04      	ldr	r3, [pc, #16]	; (10344 <__do_global_dtors_aux+0x1c>)
   10332:	b113      	cbz	r3, 1033a <__do_global_dtors_aux+0x12>
   10334:	4804      	ldr	r0, [pc, #16]	; (10348 <__do_global_dtors_aux+0x20>)
   10336:	f3af 8000 	nop.w
   1033a:	2301      	movs	r3, #1
   1033c:	7023      	strb	r3, [r4, #0]
   1033e:	bd10      	pop	{r4, pc}
   10340:	10000660 	.word	0x10000660
   10344:	00000000 	.word	0x00000000
   10348:	0001b91c 	.word	0x0001b91c

0001034c <frame_dummy>:
   1034c:	b508      	push	{r3, lr}
   1034e:	4b03      	ldr	r3, [pc, #12]	; (1035c <frame_dummy+0x10>)
   10350:	b11b      	cbz	r3, 1035a <frame_dummy+0xe>
   10352:	4903      	ldr	r1, [pc, #12]	; (10360 <frame_dummy+0x14>)
   10354:	4803      	ldr	r0, [pc, #12]	; (10364 <frame_dummy+0x18>)
   10356:	f3af 8000 	nop.w
   1035a:	bd08      	pop	{r3, pc}
   1035c:	00000000 	.word	0x00000000
   10360:	10000664 	.word	0x10000664
   10364:	0001b91c 	.word	0x0001b91c

00010368 <LabGPIO::LabGPIO(unsigned char, unsigned char)>:
#include "LabGPIO.hpp"

    inline static LPC_GPIO_TypeDef * GPIO[6] = {LPC_GPIO0, LPC_GPIO1, LPC_GPIO2, LPC_GPIO3, LPC_GPIO4, LPC_GPIO5};
 
  LabGPIO::LabGPIO(uint8_t port, uint8_t pin){
   10368:	b530      	push	{r4, r5, lr}
   1036a:	b083      	sub	sp, #12
   1036c:	4675      	mov	r5, lr
   1036e:	9001      	str	r0, [sp, #4]
   10370:	460b      	mov	r3, r1
   10372:	f88d 3003 	strb.w	r3, [sp, #3]
   10376:	4613      	mov	r3, r2
   10378:	f88d 3002 	strb.w	r3, [sp, #2]
   1037c:	462b      	mov	r3, r5
   1037e:	4619      	mov	r1, r3
   10380:	480a      	ldr	r0, [pc, #40]	; (103ac <LabGPIO::LabGPIO(unsigned char, unsigned char)+0x44>)
   10382:	f005 ffa1 	bl	162c8 <__cyg_profile_func_enter>
    SelPort = port;
   10386:	9b01      	ldr	r3, [sp, #4]
   10388:	f89d 2003 	ldrb.w	r2, [sp, #3]
   1038c:	701a      	strb	r2, [r3, #0]
    SelPin = pin;
   1038e:	9b01      	ldr	r3, [sp, #4]
   10390:	f89d 2002 	ldrb.w	r2, [sp, #2]
   10394:	705a      	strb	r2, [r3, #1]
 
  }
   10396:	9c01      	ldr	r4, [sp, #4]
   10398:	462b      	mov	r3, r5
   1039a:	4619      	mov	r1, r3
   1039c:	4803      	ldr	r0, [pc, #12]	; (103ac <LabGPIO::LabGPIO(unsigned char, unsigned char)+0x44>)
   1039e:	f005 ffa7 	bl	162f0 <__cyg_profile_func_exit>
   103a2:	4623      	mov	r3, r4
   103a4:	4618      	mov	r0, r3
   103a6:	b003      	add	sp, #12
   103a8:	bd30      	pop	{r4, r5, pc}
   103aa:	bf00      	nop
   103ac:	00010369 	.word	0x00010369

000103b0 <LabGPIO::SetHigh()>:
    break;
  }
 
  }

  void LabGPIO::SetHigh(){
   103b0:	b510      	push	{r4, lr}
   103b2:	b082      	sub	sp, #8
   103b4:	4674      	mov	r4, lr
   103b6:	9001      	str	r0, [sp, #4]
   103b8:	4623      	mov	r3, r4
   103ba:	4619      	mov	r1, r3
   103bc:	480b      	ldr	r0, [pc, #44]	; (103ec <LabGPIO::SetHigh()+0x3c>)
   103be:	f005 ff83 	bl	162c8 <__cyg_profile_func_enter>
       /// Set voltage of pin to HIGH
        GPIO[SelPort]-> SET = (1<<SelPin);
   103c2:	9b01      	ldr	r3, [sp, #4]
   103c4:	785b      	ldrb	r3, [r3, #1]
   103c6:	461a      	mov	r2, r3
   103c8:	2301      	movs	r3, #1
   103ca:	fa03 f202 	lsl.w	r2, r3, r2
   103ce:	9b01      	ldr	r3, [sp, #4]
   103d0:	781b      	ldrb	r3, [r3, #0]
   103d2:	4619      	mov	r1, r3
   103d4:	4b06      	ldr	r3, [pc, #24]	; (103f0 <LabGPIO::SetHigh()+0x40>)
   103d6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   103da:	619a      	str	r2, [r3, #24]
   103dc:	4623      	mov	r3, r4
   103de:	4619      	mov	r1, r3
   103e0:	4802      	ldr	r0, [pc, #8]	; (103ec <LabGPIO::SetHigh()+0x3c>)
   103e2:	f005 ff85 	bl	162f0 <__cyg_profile_func_exit>
    
  }
   103e6:	bf00      	nop
   103e8:	b002      	add	sp, #8
   103ea:	bd10      	pop	{r4, pc}
   103ec:	000103b1 	.word	0x000103b1
   103f0:	10000000 	.word	0x10000000

000103f4 <LabGPIO::SetLow()>:
  void LabGPIO::SetLow(){
   103f4:	b510      	push	{r4, lr}
   103f6:	b082      	sub	sp, #8
   103f8:	4674      	mov	r4, lr
   103fa:	9001      	str	r0, [sp, #4]
   103fc:	4623      	mov	r3, r4
   103fe:	4619      	mov	r1, r3
   10400:	480b      	ldr	r0, [pc, #44]	; (10430 <LabGPIO::SetLow()+0x3c>)
   10402:	f005 ff61 	bl	162c8 <__cyg_profile_func_enter>
        /// Set voltage of pin to LOW
            GPIO[SelPort]-> CLR = (1<<SelPin);
   10406:	9b01      	ldr	r3, [sp, #4]
   10408:	785b      	ldrb	r3, [r3, #1]
   1040a:	461a      	mov	r2, r3
   1040c:	2301      	movs	r3, #1
   1040e:	fa03 f202 	lsl.w	r2, r3, r2
   10412:	9b01      	ldr	r3, [sp, #4]
   10414:	781b      	ldrb	r3, [r3, #0]
   10416:	4619      	mov	r1, r3
   10418:	4b06      	ldr	r3, [pc, #24]	; (10434 <LabGPIO::SetLow()+0x40>)
   1041a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   1041e:	61da      	str	r2, [r3, #28]
   10420:	4623      	mov	r3, r4
   10422:	4619      	mov	r1, r3
   10424:	4802      	ldr	r0, [pc, #8]	; (10430 <LabGPIO::SetLow()+0x3c>)
   10426:	f005 ff63 	bl	162f0 <__cyg_profile_func_exit>
   
  }
   1042a:	bf00      	nop
   1042c:	b002      	add	sp, #8
   1042e:	bd10      	pop	{r4, pc}
   10430:	000103f5 	.word	0x000103f5
   10434:	10000000 	.word	0x10000000

00010438 <LabGPIO::ReadBool()>:
      /// @return level of pin high => true, low => false
     
     return (GPIO[SelPort]->PIN & (1<<SelPin)) ? State::kHigh : State::kLow;
    
  }
 bool LabGPIO::ReadBool(){
   10438:	b530      	push	{r4, r5, lr}
   1043a:	b083      	sub	sp, #12
   1043c:	4675      	mov	r5, lr
   1043e:	9001      	str	r0, [sp, #4]
   10440:	462b      	mov	r3, r5
   10442:	4619      	mov	r1, r3
   10444:	480e      	ldr	r0, [pc, #56]	; (10480 <LabGPIO::ReadBool()+0x48>)
   10446:	f005 ff3f 	bl	162c8 <__cyg_profile_func_enter>
  /// Should return the state of the pin (input or output, doesn't matter)
  ///
  /// @return level of pin high => true, low => false
  return(GPIO[SelPort]->PIN & (1<<SelPin));
   1044a:	9b01      	ldr	r3, [sp, #4]
   1044c:	781b      	ldrb	r3, [r3, #0]
   1044e:	461a      	mov	r2, r3
   10450:	4b0c      	ldr	r3, [pc, #48]	; (10484 <LabGPIO::ReadBool()+0x4c>)
   10452:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   10456:	695b      	ldr	r3, [r3, #20]
   10458:	9a01      	ldr	r2, [sp, #4]
   1045a:	7852      	ldrb	r2, [r2, #1]
   1045c:	4611      	mov	r1, r2
   1045e:	2201      	movs	r2, #1
   10460:	408a      	lsls	r2, r1
   10462:	4013      	ands	r3, r2
   10464:	2b00      	cmp	r3, #0
   10466:	bf14      	ite	ne
   10468:	2301      	movne	r3, #1
   1046a:	2300      	moveq	r3, #0
   1046c:	b2dc      	uxtb	r4, r3
   1046e:	462b      	mov	r3, r5
   10470:	4619      	mov	r1, r3
   10472:	4803      	ldr	r0, [pc, #12]	; (10480 <LabGPIO::ReadBool()+0x48>)
   10474:	f005 ff3c 	bl	162f0 <__cyg_profile_func_exit>
   10478:	4623      	mov	r3, r4
 
  
  }
   1047a:	4618      	mov	r0, r3
   1047c:	b003      	add	sp, #12
   1047e:	bd30      	pop	{r4, r5, pc}
   10480:	00010439 	.word	0x00010439
   10484:	10000000 	.word	0x10000000

00010488 <LabGPIO::toggle()>:
 void LabGPIO::toggle(){
   10488:	b510      	push	{r4, lr}
   1048a:	b082      	sub	sp, #8
   1048c:	4674      	mov	r4, lr
   1048e:	9001      	str	r0, [sp, #4]
   10490:	4623      	mov	r3, r4
   10492:	4619      	mov	r1, r3
   10494:	4841      	ldr	r0, [pc, #260]	; (1059c <LabGPIO::toggle()+0x114>)
   10496:	f005 ff17 	bl	162c8 <__cyg_profile_func_enter>
       
    switch(SelPort){
   1049a:	9b01      	ldr	r3, [sp, #4]
   1049c:	781b      	ldrb	r3, [r3, #0]
   1049e:	2b05      	cmp	r3, #5
   104a0:	d874      	bhi.n	1058c <LabGPIO::toggle()+0x104>
   104a2:	a201      	add	r2, pc, #4	; (adr r2, 104a8 <LabGPIO::toggle()+0x20>)
   104a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   104a8:	000104c1 	.word	0x000104c1
   104ac:	000104e3 	.word	0x000104e3
   104b0:	00010505 	.word	0x00010505
   104b4:	00010527 	.word	0x00010527
   104b8:	00010549 	.word	0x00010549
   104bc:	0001056b 	.word	0x0001056b
    case 0:
        if(!ReadBool()) //reads the current state and if it is not true which means it is SetLow then SetHigh 
   104c0:	9801      	ldr	r0, [sp, #4]
   104c2:	f7ff ffb9 	bl	10438 <LabGPIO::ReadBool()>
   104c6:	4603      	mov	r3, r0
   104c8:	f083 0301 	eor.w	r3, r3, #1
   104cc:	b2db      	uxtb	r3, r3
   104ce:	2b00      	cmp	r3, #0
   104d0:	d003      	beq.n	104da <LabGPIO::toggle()+0x52>
            SetHigh(); 
   104d2:	9801      	ldr	r0, [sp, #4]
   104d4:	f7ff ff6c 	bl	103b0 <LabGPIO::SetHigh()>
        else SetLow();
        break;
   104d8:	e058      	b.n	1058c <LabGPIO::toggle()+0x104>
        else SetLow();
   104da:	9801      	ldr	r0, [sp, #4]
   104dc:	f7ff ff8a 	bl	103f4 <LabGPIO::SetLow()>
        break;
   104e0:	e054      	b.n	1058c <LabGPIO::toggle()+0x104>
    case 1:
        if(!ReadBool()) //reads the current state and if it is not true which means it is SetLow then SetHigh 
   104e2:	9801      	ldr	r0, [sp, #4]
   104e4:	f7ff ffa8 	bl	10438 <LabGPIO::ReadBool()>
   104e8:	4603      	mov	r3, r0
   104ea:	f083 0301 	eor.w	r3, r3, #1
   104ee:	b2db      	uxtb	r3, r3
   104f0:	2b00      	cmp	r3, #0
   104f2:	d003      	beq.n	104fc <LabGPIO::toggle()+0x74>
            SetHigh(); 
   104f4:	9801      	ldr	r0, [sp, #4]
   104f6:	f7ff ff5b 	bl	103b0 <LabGPIO::SetHigh()>
        else SetLow();
        break;
   104fa:	e047      	b.n	1058c <LabGPIO::toggle()+0x104>
        else SetLow();
   104fc:	9801      	ldr	r0, [sp, #4]
   104fe:	f7ff ff79 	bl	103f4 <LabGPIO::SetLow()>
        break;
   10502:	e043      	b.n	1058c <LabGPIO::toggle()+0x104>
    case 2:
        if(!ReadBool()) //reads the current state and if it is not true which means it is SetLow then SetHigh 
   10504:	9801      	ldr	r0, [sp, #4]
   10506:	f7ff ff97 	bl	10438 <LabGPIO::ReadBool()>
   1050a:	4603      	mov	r3, r0
   1050c:	f083 0301 	eor.w	r3, r3, #1
   10510:	b2db      	uxtb	r3, r3
   10512:	2b00      	cmp	r3, #0
   10514:	d003      	beq.n	1051e <LabGPIO::toggle()+0x96>
            SetHigh(); 
   10516:	9801      	ldr	r0, [sp, #4]
   10518:	f7ff ff4a 	bl	103b0 <LabGPIO::SetHigh()>
        else SetLow();
        break;
   1051c:	e036      	b.n	1058c <LabGPIO::toggle()+0x104>
        else SetLow();
   1051e:	9801      	ldr	r0, [sp, #4]
   10520:	f7ff ff68 	bl	103f4 <LabGPIO::SetLow()>
        break;
   10524:	e032      	b.n	1058c <LabGPIO::toggle()+0x104>
    case 3:
        if(!ReadBool()) //reads the current state and if it is not true which means it is SetLow then SetHigh 
   10526:	9801      	ldr	r0, [sp, #4]
   10528:	f7ff ff86 	bl	10438 <LabGPIO::ReadBool()>
   1052c:	4603      	mov	r3, r0
   1052e:	f083 0301 	eor.w	r3, r3, #1
   10532:	b2db      	uxtb	r3, r3
   10534:	2b00      	cmp	r3, #0
   10536:	d003      	beq.n	10540 <LabGPIO::toggle()+0xb8>
            SetHigh(); 
   10538:	9801      	ldr	r0, [sp, #4]
   1053a:	f7ff ff39 	bl	103b0 <LabGPIO::SetHigh()>
        else SetLow();
        break;
   1053e:	e025      	b.n	1058c <LabGPIO::toggle()+0x104>
        else SetLow();
   10540:	9801      	ldr	r0, [sp, #4]
   10542:	f7ff ff57 	bl	103f4 <LabGPIO::SetLow()>
        break;
   10546:	e021      	b.n	1058c <LabGPIO::toggle()+0x104>
    case 4:
        if(!ReadBool()) //reads the current state and if it is not true which means it is SetLow then SetHigh 
   10548:	9801      	ldr	r0, [sp, #4]
   1054a:	f7ff ff75 	bl	10438 <LabGPIO::ReadBool()>
   1054e:	4603      	mov	r3, r0
   10550:	f083 0301 	eor.w	r3, r3, #1
   10554:	b2db      	uxtb	r3, r3
   10556:	2b00      	cmp	r3, #0
   10558:	d003      	beq.n	10562 <LabGPIO::toggle()+0xda>
            SetHigh(); 
   1055a:	9801      	ldr	r0, [sp, #4]
   1055c:	f7ff ff28 	bl	103b0 <LabGPIO::SetHigh()>
        else SetLow();
        break;
   10560:	e014      	b.n	1058c <LabGPIO::toggle()+0x104>
        else SetLow();
   10562:	9801      	ldr	r0, [sp, #4]
   10564:	f7ff ff46 	bl	103f4 <LabGPIO::SetLow()>
        break;
   10568:	e010      	b.n	1058c <LabGPIO::toggle()+0x104>
    case 5:
        if(!ReadBool()) //reads the current state and if it is not true which means it is SetLow then SetHigh 
   1056a:	9801      	ldr	r0, [sp, #4]
   1056c:	f7ff ff64 	bl	10438 <LabGPIO::ReadBool()>
   10570:	4603      	mov	r3, r0
   10572:	f083 0301 	eor.w	r3, r3, #1
   10576:	b2db      	uxtb	r3, r3
   10578:	2b00      	cmp	r3, #0
   1057a:	d003      	beq.n	10584 <LabGPIO::toggle()+0xfc>
            SetHigh(); 
   1057c:	9801      	ldr	r0, [sp, #4]
   1057e:	f7ff ff17 	bl	103b0 <LabGPIO::SetHigh()>
        else SetLow();
        break;
   10582:	e002      	b.n	1058a <LabGPIO::toggle()+0x102>
        else SetLow();
   10584:	9801      	ldr	r0, [sp, #4]
   10586:	f7ff ff35 	bl	103f4 <LabGPIO::SetLow()>
        break;
   1058a:	bf00      	nop
   1058c:	4623      	mov	r3, r4
   1058e:	4619      	mov	r1, r3
   10590:	4802      	ldr	r0, [pc, #8]	; (1059c <LabGPIO::toggle()+0x114>)
   10592:	f005 fead 	bl	162f0 <__cyg_profile_func_exit>
    }
  }
   10596:	bf00      	nop
   10598:	b002      	add	sp, #8
   1059a:	bd10      	pop	{r4, pc}
   1059c:	00010489 	.word	0x00010489

000105a0 <LabGPIO::setPulldown()>:
  void LabGPIO::setPulldown(){ //this and functions below only work for the 4 switches on the SJ2 board
   105a0:	b510      	push	{r4, lr}
   105a2:	b082      	sub	sp, #8
   105a4:	4674      	mov	r4, lr
   105a6:	9001      	str	r0, [sp, #4]
   105a8:	4623      	mov	r3, r4
   105aa:	4619      	mov	r1, r3
   105ac:	482d      	ldr	r0, [pc, #180]	; (10664 <LabGPIO::setPulldown()+0xc4>)
   105ae:	f005 fe8b 	bl	162c8 <__cyg_profile_func_enter>
   switch(SelPort){
   105b2:	9b01      	ldr	r3, [sp, #4]
   105b4:	781b      	ldrb	r3, [r3, #0]
   105b6:	2b00      	cmp	r3, #0
   105b8:	d002      	beq.n	105c0 <LabGPIO::setPulldown()+0x20>
   105ba:	2b01      	cmp	r3, #1
   105bc:	d021      	beq.n	10602 <LabGPIO::setPulldown()+0x62>
   105be:	e049      	b.n	10654 <LabGPIO::setPulldown()+0xb4>
   case 0:
    if(SelPin == 29)
   105c0:	9b01      	ldr	r3, [sp, #4]
   105c2:	785b      	ldrb	r3, [r3, #1]
   105c4:	2b1d      	cmp	r3, #29
   105c6:	d10c      	bne.n	105e2 <LabGPIO::setPulldown()+0x42>
   {   
       LPC_IOCON->P0_29 &= ~(0b11<<3);
   105c8:	4b27      	ldr	r3, [pc, #156]	; (10668 <LabGPIO::setPulldown()+0xc8>)
   105ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
   105cc:	4a26      	ldr	r2, [pc, #152]	; (10668 <LabGPIO::setPulldown()+0xc8>)
   105ce:	f023 0318 	bic.w	r3, r3, #24
   105d2:	6753      	str	r3, [r2, #116]	; 0x74
       LPC_IOCON->P0_29 |= (0b1<<3);
   105d4:	4b24      	ldr	r3, [pc, #144]	; (10668 <LabGPIO::setPulldown()+0xc8>)
   105d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
   105d8:	4a23      	ldr	r2, [pc, #140]	; (10668 <LabGPIO::setPulldown()+0xc8>)
   105da:	f043 0308 	orr.w	r3, r3, #8
   105de:	6753      	str	r3, [r2, #116]	; 0x74
   105e0:	e00f      	b.n	10602 <LabGPIO::setPulldown()+0x62>
   }
   else if ( SelPin == 30)
   105e2:	9b01      	ldr	r3, [sp, #4]
   105e4:	785b      	ldrb	r3, [r3, #1]
   105e6:	2b1e      	cmp	r3, #30
   105e8:	d10b      	bne.n	10602 <LabGPIO::setPulldown()+0x62>
   {
       LPC_IOCON->P0_30 &= ~(0b11<<3);
   105ea:	4b1f      	ldr	r3, [pc, #124]	; (10668 <LabGPIO::setPulldown()+0xc8>)
   105ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   105ee:	4a1e      	ldr	r2, [pc, #120]	; (10668 <LabGPIO::setPulldown()+0xc8>)
   105f0:	f023 0318 	bic.w	r3, r3, #24
   105f4:	6793      	str	r3, [r2, #120]	; 0x78
       LPC_IOCON->P0_30 |= (0b1<<3);
   105f6:	4b1c      	ldr	r3, [pc, #112]	; (10668 <LabGPIO::setPulldown()+0xc8>)
   105f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   105fa:	4a1b      	ldr	r2, [pc, #108]	; (10668 <LabGPIO::setPulldown()+0xc8>)
   105fc:	f043 0308 	orr.w	r3, r3, #8
   10600:	6793      	str	r3, [r2, #120]	; 0x78
   }
     //fall through
   case 1:   
   if(SelPin == 19)
   10602:	9b01      	ldr	r3, [sp, #4]
   10604:	785b      	ldrb	r3, [r3, #1]
   10606:	2b13      	cmp	r3, #19
   10608:	d110      	bne.n	1062c <LabGPIO::setPulldown()+0x8c>
   {   
       LPC_IOCON->P1_19 &= ~(0b11<<3);
   1060a:	4b17      	ldr	r3, [pc, #92]	; (10668 <LabGPIO::setPulldown()+0xc8>)
   1060c:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
   10610:	4a15      	ldr	r2, [pc, #84]	; (10668 <LabGPIO::setPulldown()+0xc8>)
   10612:	f023 0318 	bic.w	r3, r3, #24
   10616:	f8c2 30cc 	str.w	r3, [r2, #204]	; 0xcc
       LPC_IOCON->P1_19 |= (0b1<<3);
   1061a:	4b13      	ldr	r3, [pc, #76]	; (10668 <LabGPIO::setPulldown()+0xc8>)
   1061c:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
   10620:	4a11      	ldr	r2, [pc, #68]	; (10668 <LabGPIO::setPulldown()+0xc8>)
   10622:	f043 0308 	orr.w	r3, r3, #8
   10626:	f8c2 30cc 	str.w	r3, [r2, #204]	; 0xcc
   1062a:	e013      	b.n	10654 <LabGPIO::setPulldown()+0xb4>
   }
   else if ( SelPin == 15)
   1062c:	9b01      	ldr	r3, [sp, #4]
   1062e:	785b      	ldrb	r3, [r3, #1]
   10630:	2b0f      	cmp	r3, #15
   10632:	d10f      	bne.n	10654 <LabGPIO::setPulldown()+0xb4>
   {
       LPC_IOCON->P1_15 &= ~(0b11<<3);
   10634:	4b0c      	ldr	r3, [pc, #48]	; (10668 <LabGPIO::setPulldown()+0xc8>)
   10636:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
   1063a:	4a0b      	ldr	r2, [pc, #44]	; (10668 <LabGPIO::setPulldown()+0xc8>)
   1063c:	f023 0318 	bic.w	r3, r3, #24
   10640:	f8c2 30bc 	str.w	r3, [r2, #188]	; 0xbc
       LPC_IOCON->P1_15 |= (0b1<<3);
   10644:	4b08      	ldr	r3, [pc, #32]	; (10668 <LabGPIO::setPulldown()+0xc8>)
   10646:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
   1064a:	4a07      	ldr	r2, [pc, #28]	; (10668 <LabGPIO::setPulldown()+0xc8>)
   1064c:	f043 0308 	orr.w	r3, r3, #8
   10650:	f8c2 30bc 	str.w	r3, [r2, #188]	; 0xbc
   10654:	4623      	mov	r3, r4
   10656:	4619      	mov	r1, r3
   10658:	4802      	ldr	r0, [pc, #8]	; (10664 <LabGPIO::setPulldown()+0xc4>)
   1065a:	f005 fe49 	bl	162f0 <__cyg_profile_func_exit>
   }
  
   }
  }
   1065e:	bf00      	nop
   10660:	b002      	add	sp, #8
   10662:	bd10      	pop	{r4, pc}
   10664:	000105a1 	.word	0x000105a1
   10668:	4002c000 	.word	0x4002c000

0001066c <PinInterface::PinInterface()>:
#include <cstdio>

#include "L0_LowLevel/LPC40xx.h"
#include "utility/macros.hpp"

class PinInterface
   1066c:	b530      	push	{r4, r5, lr}
   1066e:	b083      	sub	sp, #12
   10670:	4675      	mov	r5, lr
   10672:	9001      	str	r0, [sp, #4]
   10674:	462b      	mov	r3, r5
   10676:	4619      	mov	r1, r3
   10678:	4807      	ldr	r0, [pc, #28]	; (10698 <PinInterface::PinInterface()+0x2c>)
   1067a:	f005 fe25 	bl	162c8 <__cyg_profile_func_enter>
   1067e:	4a07      	ldr	r2, [pc, #28]	; (1069c <PinInterface::PinInterface()+0x30>)
   10680:	9b01      	ldr	r3, [sp, #4]
   10682:	601a      	str	r2, [r3, #0]
   10684:	9c01      	ldr	r4, [sp, #4]
   10686:	462b      	mov	r3, r5
   10688:	4619      	mov	r1, r3
   1068a:	4803      	ldr	r0, [pc, #12]	; (10698 <PinInterface::PinInterface()+0x2c>)
   1068c:	f005 fe30 	bl	162f0 <__cyg_profile_func_exit>
   10690:	4623      	mov	r3, r4
   10692:	4618      	mov	r0, r3
   10694:	b003      	add	sp, #12
   10696:	bd30      	pop	{r4, r5, pc}
   10698:	0001066d 	.word	0x0001066d
   1069c:	00019bac 	.word	0x00019bac

000106a0 <Pin::Pin(unsigned char, unsigned char)>:
  // no effect.
  static constexpr Pin CreateInactivePin()
  {
    return Pin(5, 4);
  }
  constexpr Pin(uint8_t port_number, uint8_t pin_number)
   106a0:	b530      	push	{r4, r5, lr}
   106a2:	b083      	sub	sp, #12
   106a4:	4675      	mov	r5, lr
   106a6:	9001      	str	r0, [sp, #4]
   106a8:	460b      	mov	r3, r1
   106aa:	f88d 3003 	strb.w	r3, [sp, #3]
   106ae:	4613      	mov	r3, r2
   106b0:	f88d 3002 	strb.w	r3, [sp, #2]
   106b4:	462b      	mov	r3, r5
   106b6:	4619      	mov	r1, r3
   106b8:	480d      	ldr	r0, [pc, #52]	; (106f0 <Pin::Pin(unsigned char, unsigned char)+0x50>)
   106ba:	f005 fe05 	bl	162c8 <__cyg_profile_func_enter>
      : port_(port_number), pin_(pin_number)
   106be:	9b01      	ldr	r3, [sp, #4]
   106c0:	4618      	mov	r0, r3
   106c2:	f7ff ffd3 	bl	1066c <PinInterface::PinInterface()>
   106c6:	4a0b      	ldr	r2, [pc, #44]	; (106f4 <Pin::Pin(unsigned char, unsigned char)+0x54>)
   106c8:	9b01      	ldr	r3, [sp, #4]
   106ca:	601a      	str	r2, [r3, #0]
   106cc:	9b01      	ldr	r3, [sp, #4]
   106ce:	f89d 2003 	ldrb.w	r2, [sp, #3]
   106d2:	711a      	strb	r2, [r3, #4]
   106d4:	9b01      	ldr	r3, [sp, #4]
   106d6:	f89d 2002 	ldrb.w	r2, [sp, #2]
   106da:	715a      	strb	r2, [r3, #5]
  {
  }
   106dc:	9c01      	ldr	r4, [sp, #4]
   106de:	462b      	mov	r3, r5
   106e0:	4619      	mov	r1, r3
   106e2:	4803      	ldr	r0, [pc, #12]	; (106f0 <Pin::Pin(unsigned char, unsigned char)+0x50>)
   106e4:	f005 fe04 	bl	162f0 <__cyg_profile_func_exit>
   106e8:	4623      	mov	r3, r4
   106ea:	4618      	mov	r0, r3
   106ec:	b003      	add	sp, #12
   106ee:	bd30      	pop	{r4, r5, pc}
   106f0:	000106a1 	.word	0x000106a1
   106f4:	00019b70 	.word	0x00019b70

000106f8 <Pin::SetPinFunction(unsigned char)>:
  void SetPinFunction(uint8_t function) override
   106f8:	b5f0      	push	{r4, r5, r6, r7, lr}
   106fa:	b085      	sub	sp, #20
   106fc:	4677      	mov	r7, lr
   106fe:	9003      	str	r0, [sp, #12]
   10700:	460b      	mov	r3, r1
   10702:	f88d 300b 	strb.w	r3, [sp, #11]
   10706:	463b      	mov	r3, r7
   10708:	4619      	mov	r1, r3
   1070a:	4817      	ldr	r0, [pc, #92]	; (10768 <Pin::SetPinFunction(unsigned char)+0x70>)
   1070c:	f005 fddc 	bl	162c8 <__cyg_profile_func_enter>
  {
    pin_map->_register[port_][pin_] =
        BitPlace(pin_map->_register[port_][pin_], PinBitMap::kFunction,
   10710:	4b16      	ldr	r3, [pc, #88]	; (1076c <Pin::SetPinFunction(unsigned char)+0x74>)
   10712:	681b      	ldr	r3, [r3, #0]
   10714:	9a03      	ldr	r2, [sp, #12]
   10716:	7912      	ldrb	r2, [r2, #4]
   10718:	4610      	mov	r0, r2
   1071a:	9a03      	ldr	r2, [sp, #12]
   1071c:	7952      	ldrb	r2, [r2, #5]
   1071e:	4611      	mov	r1, r2
   10720:	0142      	lsls	r2, r0, #5
   10722:	440a      	add	r2, r1
   10724:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
                 function & 0b111, 3);
   10728:	f89d 300b 	ldrb.w	r3, [sp, #11]
        BitPlace(pin_map->_register[port_][pin_], PinBitMap::kFunction,
   1072c:	f003 0207 	and.w	r2, r3, #7
    pin_map->_register[port_][pin_] =
   10730:	4b0e      	ldr	r3, [pc, #56]	; (1076c <Pin::SetPinFunction(unsigned char)+0x74>)
   10732:	681c      	ldr	r4, [r3, #0]
   10734:	9b03      	ldr	r3, [sp, #12]
   10736:	791b      	ldrb	r3, [r3, #4]
   10738:	461e      	mov	r6, r3
   1073a:	9b03      	ldr	r3, [sp, #12]
   1073c:	795b      	ldrb	r3, [r3, #5]
   1073e:	461d      	mov	r5, r3
        BitPlace(pin_map->_register[port_][pin_], PinBitMap::kFunction,
   10740:	2303      	movs	r3, #3
   10742:	9300      	str	r3, [sp, #0]
   10744:	4613      	mov	r3, r2
   10746:	2200      	movs	r2, #0
   10748:	9803      	ldr	r0, [sp, #12]
   1074a:	f000 fa67 	bl	10c1c <Pin::BitPlace(unsigned long, unsigned long, unsigned long, unsigned long)>
   1074e:	4602      	mov	r2, r0
    pin_map->_register[port_][pin_] =
   10750:	0173      	lsls	r3, r6, #5
   10752:	442b      	add	r3, r5
   10754:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
   10758:	463b      	mov	r3, r7
   1075a:	4619      	mov	r1, r3
   1075c:	4802      	ldr	r0, [pc, #8]	; (10768 <Pin::SetPinFunction(unsigned char)+0x70>)
   1075e:	f005 fdc7 	bl	162f0 <__cyg_profile_func_exit>
  }
   10762:	bf00      	nop
   10764:	b005      	add	sp, #20
   10766:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10768:	000106f9 	.word	0x000106f9
   1076c:	10000018 	.word	0x10000018

00010770 <Pin::SetMode(PinInterface::Mode)>:
  void SetMode(PinInterface::Mode mode) override
   10770:	b5f0      	push	{r4, r5, r6, r7, lr}
   10772:	b087      	sub	sp, #28
   10774:	4677      	mov	r7, lr
   10776:	9003      	str	r0, [sp, #12]
   10778:	460b      	mov	r3, r1
   1077a:	f88d 300b 	strb.w	r3, [sp, #11]
   1077e:	463b      	mov	r3, r7
   10780:	4619      	mov	r1, r3
   10782:	4819      	ldr	r0, [pc, #100]	; (107e8 <Pin::SetMode(PinInterface::Mode)+0x78>)
   10784:	f005 fda0 	bl	162c8 <__cyg_profile_func_enter>
  {
    uint8_t ui_mode                 = static_cast<uint8_t>(mode);
   10788:	f89d 300b 	ldrb.w	r3, [sp, #11]
   1078c:	f88d 3017 	strb.w	r3, [sp, #23]
    pin_map->_register[port_][pin_] = BitPlace(
   10790:	4b16      	ldr	r3, [pc, #88]	; (107ec <Pin::SetMode(PinInterface::Mode)+0x7c>)
   10792:	681b      	ldr	r3, [r3, #0]
        pin_map->_register[port_][pin_], PinBitMap::kMode, ui_mode & 0b11, 2);
   10794:	9a03      	ldr	r2, [sp, #12]
   10796:	7912      	ldrb	r2, [r2, #4]
   10798:	4610      	mov	r0, r2
   1079a:	9a03      	ldr	r2, [sp, #12]
   1079c:	7952      	ldrb	r2, [r2, #5]
   1079e:	4611      	mov	r1, r2
    pin_map->_register[port_][pin_] = BitPlace(
   107a0:	0142      	lsls	r2, r0, #5
   107a2:	440a      	add	r2, r1
   107a4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
        pin_map->_register[port_][pin_], PinBitMap::kMode, ui_mode & 0b11, 2);
   107a8:	f89d 3017 	ldrb.w	r3, [sp, #23]
    pin_map->_register[port_][pin_] = BitPlace(
   107ac:	f003 0203 	and.w	r2, r3, #3
   107b0:	4b0e      	ldr	r3, [pc, #56]	; (107ec <Pin::SetMode(PinInterface::Mode)+0x7c>)
   107b2:	681c      	ldr	r4, [r3, #0]
   107b4:	9b03      	ldr	r3, [sp, #12]
   107b6:	791b      	ldrb	r3, [r3, #4]
   107b8:	461e      	mov	r6, r3
   107ba:	9b03      	ldr	r3, [sp, #12]
   107bc:	795b      	ldrb	r3, [r3, #5]
   107be:	461d      	mov	r5, r3
   107c0:	2302      	movs	r3, #2
   107c2:	9300      	str	r3, [sp, #0]
   107c4:	4613      	mov	r3, r2
   107c6:	2203      	movs	r2, #3
   107c8:	9803      	ldr	r0, [sp, #12]
   107ca:	f000 fa27 	bl	10c1c <Pin::BitPlace(unsigned long, unsigned long, unsigned long, unsigned long)>
   107ce:	4602      	mov	r2, r0
   107d0:	0173      	lsls	r3, r6, #5
   107d2:	442b      	add	r3, r5
   107d4:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
   107d8:	463b      	mov	r3, r7
   107da:	4619      	mov	r1, r3
   107dc:	4802      	ldr	r0, [pc, #8]	; (107e8 <Pin::SetMode(PinInterface::Mode)+0x78>)
   107de:	f005 fd87 	bl	162f0 <__cyg_profile_func_exit>
  }
   107e2:	bf00      	nop
   107e4:	b007      	add	sp, #28
   107e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   107e8:	00010771 	.word	0x00010771
   107ec:	10000018 	.word	0x10000018

000107f0 <Pin::EnableHysteresis(bool)>:
  void EnableHysteresis(bool enable_hysteresis = true) override
   107f0:	b5f0      	push	{r4, r5, r6, r7, lr}
   107f2:	b085      	sub	sp, #20
   107f4:	4677      	mov	r7, lr
   107f6:	9003      	str	r0, [sp, #12]
   107f8:	460b      	mov	r3, r1
   107fa:	f88d 300b 	strb.w	r3, [sp, #11]
   107fe:	463b      	mov	r3, r7
   10800:	4619      	mov	r1, r3
   10802:	4816      	ldr	r0, [pc, #88]	; (1085c <Pin::EnableHysteresis(bool)+0x6c>)
   10804:	f005 fd60 	bl	162c8 <__cyg_profile_func_enter>
  {
    pin_map->_register[port_][pin_] =
        BitPlace(pin_map->_register[port_][pin_], PinBitMap::kHysteresis,
   10808:	4b15      	ldr	r3, [pc, #84]	; (10860 <Pin::EnableHysteresis(bool)+0x70>)
   1080a:	681b      	ldr	r3, [r3, #0]
   1080c:	9a03      	ldr	r2, [sp, #12]
   1080e:	7912      	ldrb	r2, [r2, #4]
   10810:	4610      	mov	r0, r2
   10812:	9a03      	ldr	r2, [sp, #12]
   10814:	7952      	ldrb	r2, [r2, #5]
   10816:	4611      	mov	r1, r2
   10818:	0142      	lsls	r2, r0, #5
   1081a:	440a      	add	r2, r1
   1081c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   10820:	f89d 200b 	ldrb.w	r2, [sp, #11]
    pin_map->_register[port_][pin_] =
   10824:	4b0e      	ldr	r3, [pc, #56]	; (10860 <Pin::EnableHysteresis(bool)+0x70>)
   10826:	681c      	ldr	r4, [r3, #0]
   10828:	9b03      	ldr	r3, [sp, #12]
   1082a:	791b      	ldrb	r3, [r3, #4]
   1082c:	461e      	mov	r6, r3
   1082e:	9b03      	ldr	r3, [sp, #12]
   10830:	795b      	ldrb	r3, [r3, #5]
   10832:	461d      	mov	r5, r3
        BitPlace(pin_map->_register[port_][pin_], PinBitMap::kHysteresis,
   10834:	2301      	movs	r3, #1
   10836:	9300      	str	r3, [sp, #0]
   10838:	4613      	mov	r3, r2
   1083a:	2205      	movs	r2, #5
   1083c:	9803      	ldr	r0, [sp, #12]
   1083e:	f000 f9ed 	bl	10c1c <Pin::BitPlace(unsigned long, unsigned long, unsigned long, unsigned long)>
   10842:	4602      	mov	r2, r0
    pin_map->_register[port_][pin_] =
   10844:	0173      	lsls	r3, r6, #5
   10846:	442b      	add	r3, r5
   10848:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
   1084c:	463b      	mov	r3, r7
   1084e:	4619      	mov	r1, r3
   10850:	4802      	ldr	r0, [pc, #8]	; (1085c <Pin::EnableHysteresis(bool)+0x6c>)
   10852:	f005 fd4d 	bl	162f0 <__cyg_profile_func_exit>
                 enable_hysteresis, 1);
  }
   10856:	bf00      	nop
   10858:	b005      	add	sp, #20
   1085a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1085c:	000107f1 	.word	0x000107f1
   10860:	10000018 	.word	0x10000018

00010864 <Pin::SetAsActiveLow(bool)>:
  void SetAsActiveLow(bool set_as_active_low = true) override
   10864:	b5f0      	push	{r4, r5, r6, r7, lr}
   10866:	b085      	sub	sp, #20
   10868:	4677      	mov	r7, lr
   1086a:	9003      	str	r0, [sp, #12]
   1086c:	460b      	mov	r3, r1
   1086e:	f88d 300b 	strb.w	r3, [sp, #11]
   10872:	463b      	mov	r3, r7
   10874:	4619      	mov	r1, r3
   10876:	4816      	ldr	r0, [pc, #88]	; (108d0 <Pin::SetAsActiveLow(bool)+0x6c>)
   10878:	f005 fd26 	bl	162c8 <__cyg_profile_func_enter>
  {
    pin_map->_register[port_][pin_] =
        BitPlace(pin_map->_register[port_][pin_], PinBitMap::kInputInvert,
   1087c:	4b15      	ldr	r3, [pc, #84]	; (108d4 <Pin::SetAsActiveLow(bool)+0x70>)
   1087e:	681b      	ldr	r3, [r3, #0]
   10880:	9a03      	ldr	r2, [sp, #12]
   10882:	7912      	ldrb	r2, [r2, #4]
   10884:	4610      	mov	r0, r2
   10886:	9a03      	ldr	r2, [sp, #12]
   10888:	7952      	ldrb	r2, [r2, #5]
   1088a:	4611      	mov	r1, r2
   1088c:	0142      	lsls	r2, r0, #5
   1088e:	440a      	add	r2, r1
   10890:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   10894:	f89d 200b 	ldrb.w	r2, [sp, #11]
    pin_map->_register[port_][pin_] =
   10898:	4b0e      	ldr	r3, [pc, #56]	; (108d4 <Pin::SetAsActiveLow(bool)+0x70>)
   1089a:	681c      	ldr	r4, [r3, #0]
   1089c:	9b03      	ldr	r3, [sp, #12]
   1089e:	791b      	ldrb	r3, [r3, #4]
   108a0:	461e      	mov	r6, r3
   108a2:	9b03      	ldr	r3, [sp, #12]
   108a4:	795b      	ldrb	r3, [r3, #5]
   108a6:	461d      	mov	r5, r3
        BitPlace(pin_map->_register[port_][pin_], PinBitMap::kInputInvert,
   108a8:	2301      	movs	r3, #1
   108aa:	9300      	str	r3, [sp, #0]
   108ac:	4613      	mov	r3, r2
   108ae:	2206      	movs	r2, #6
   108b0:	9803      	ldr	r0, [sp, #12]
   108b2:	f000 f9b3 	bl	10c1c <Pin::BitPlace(unsigned long, unsigned long, unsigned long, unsigned long)>
   108b6:	4602      	mov	r2, r0
    pin_map->_register[port_][pin_] =
   108b8:	0173      	lsls	r3, r6, #5
   108ba:	442b      	add	r3, r5
   108bc:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
   108c0:	463b      	mov	r3, r7
   108c2:	4619      	mov	r1, r3
   108c4:	4802      	ldr	r0, [pc, #8]	; (108d0 <Pin::SetAsActiveLow(bool)+0x6c>)
   108c6:	f005 fd13 	bl	162f0 <__cyg_profile_func_exit>
                 set_as_active_low, 1);
  }
   108ca:	bf00      	nop
   108cc:	b005      	add	sp, #20
   108ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
   108d0:	00010865 	.word	0x00010865
   108d4:	10000018 	.word	0x10000018

000108d8 <Pin::SetAsAnalogMode(bool)>:
  // Set bit to 0 to enable analog mode
  void SetAsAnalogMode(bool set_as_analog = true) override
   108d8:	b5f0      	push	{r4, r5, r6, r7, lr}
   108da:	b085      	sub	sp, #20
   108dc:	4677      	mov	r7, lr
   108de:	9003      	str	r0, [sp, #12]
   108e0:	460b      	mov	r3, r1
   108e2:	f88d 300b 	strb.w	r3, [sp, #11]
   108e6:	463b      	mov	r3, r7
   108e8:	4619      	mov	r1, r3
   108ea:	4818      	ldr	r0, [pc, #96]	; (1094c <Pin::SetAsAnalogMode(bool)+0x74>)
   108ec:	f005 fcec 	bl	162c8 <__cyg_profile_func_enter>
  {
    pin_map->_register[port_][pin_] =
        BitPlace(pin_map->_register[port_][pin_], PinBitMap::kAnalogDigitalMode,
   108f0:	4b17      	ldr	r3, [pc, #92]	; (10950 <Pin::SetAsAnalogMode(bool)+0x78>)
   108f2:	681b      	ldr	r3, [r3, #0]
   108f4:	9a03      	ldr	r2, [sp, #12]
   108f6:	7912      	ldrb	r2, [r2, #4]
   108f8:	4610      	mov	r0, r2
   108fa:	9a03      	ldr	r2, [sp, #12]
   108fc:	7952      	ldrb	r2, [r2, #5]
   108fe:	4611      	mov	r1, r2
   10900:	0142      	lsls	r2, r0, #5
   10902:	440a      	add	r2, r1
   10904:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
                 !set_as_analog, 1);
   10908:	f89d 300b 	ldrb.w	r3, [sp, #11]
   1090c:	f083 0301 	eor.w	r3, r3, #1
   10910:	b2db      	uxtb	r3, r3
        BitPlace(pin_map->_register[port_][pin_], PinBitMap::kAnalogDigitalMode,
   10912:	461a      	mov	r2, r3
    pin_map->_register[port_][pin_] =
   10914:	4b0e      	ldr	r3, [pc, #56]	; (10950 <Pin::SetAsAnalogMode(bool)+0x78>)
   10916:	681c      	ldr	r4, [r3, #0]
   10918:	9b03      	ldr	r3, [sp, #12]
   1091a:	791b      	ldrb	r3, [r3, #4]
   1091c:	461e      	mov	r6, r3
   1091e:	9b03      	ldr	r3, [sp, #12]
   10920:	795b      	ldrb	r3, [r3, #5]
   10922:	461d      	mov	r5, r3
        BitPlace(pin_map->_register[port_][pin_], PinBitMap::kAnalogDigitalMode,
   10924:	2301      	movs	r3, #1
   10926:	9300      	str	r3, [sp, #0]
   10928:	4613      	mov	r3, r2
   1092a:	2207      	movs	r2, #7
   1092c:	9803      	ldr	r0, [sp, #12]
   1092e:	f000 f975 	bl	10c1c <Pin::BitPlace(unsigned long, unsigned long, unsigned long, unsigned long)>
   10932:	4602      	mov	r2, r0
    pin_map->_register[port_][pin_] =
   10934:	0173      	lsls	r3, r6, #5
   10936:	442b      	add	r3, r5
   10938:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
   1093c:	463b      	mov	r3, r7
   1093e:	4619      	mov	r1, r3
   10940:	4802      	ldr	r0, [pc, #8]	; (1094c <Pin::SetAsAnalogMode(bool)+0x74>)
   10942:	f005 fcd5 	bl	162f0 <__cyg_profile_func_exit>
  }
   10946:	bf00      	nop
   10948:	b005      	add	sp, #20
   1094a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1094c:	000108d9 	.word	0x000108d9
   10950:	10000018 	.word	0x10000018

00010954 <Pin::EnableDigitalFilter(bool)>:
  // Enable by setting bit to 0 to enable digital filter.
  void EnableDigitalFilter(bool enable_digital_filter = true) override
   10954:	b5f0      	push	{r4, r5, r6, r7, lr}
   10956:	b085      	sub	sp, #20
   10958:	4677      	mov	r7, lr
   1095a:	9003      	str	r0, [sp, #12]
   1095c:	460b      	mov	r3, r1
   1095e:	f88d 300b 	strb.w	r3, [sp, #11]
   10962:	463b      	mov	r3, r7
   10964:	4619      	mov	r1, r3
   10966:	4818      	ldr	r0, [pc, #96]	; (109c8 <Pin::EnableDigitalFilter(bool)+0x74>)
   10968:	f005 fcae 	bl	162c8 <__cyg_profile_func_enter>
  {
    pin_map->_register[port_][pin_] =
        BitPlace(pin_map->_register[port_][pin_], PinBitMap::kDigitalFilter,
   1096c:	4b17      	ldr	r3, [pc, #92]	; (109cc <Pin::EnableDigitalFilter(bool)+0x78>)
   1096e:	681b      	ldr	r3, [r3, #0]
   10970:	9a03      	ldr	r2, [sp, #12]
   10972:	7912      	ldrb	r2, [r2, #4]
   10974:	4610      	mov	r0, r2
   10976:	9a03      	ldr	r2, [sp, #12]
   10978:	7952      	ldrb	r2, [r2, #5]
   1097a:	4611      	mov	r1, r2
   1097c:	0142      	lsls	r2, r0, #5
   1097e:	440a      	add	r2, r1
   10980:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
                 !enable_digital_filter, 1);
   10984:	f89d 300b 	ldrb.w	r3, [sp, #11]
   10988:	f083 0301 	eor.w	r3, r3, #1
   1098c:	b2db      	uxtb	r3, r3
        BitPlace(pin_map->_register[port_][pin_], PinBitMap::kDigitalFilter,
   1098e:	461a      	mov	r2, r3
    pin_map->_register[port_][pin_] =
   10990:	4b0e      	ldr	r3, [pc, #56]	; (109cc <Pin::EnableDigitalFilter(bool)+0x78>)
   10992:	681c      	ldr	r4, [r3, #0]
   10994:	9b03      	ldr	r3, [sp, #12]
   10996:	791b      	ldrb	r3, [r3, #4]
   10998:	461e      	mov	r6, r3
   1099a:	9b03      	ldr	r3, [sp, #12]
   1099c:	795b      	ldrb	r3, [r3, #5]
   1099e:	461d      	mov	r5, r3
        BitPlace(pin_map->_register[port_][pin_], PinBitMap::kDigitalFilter,
   109a0:	2301      	movs	r3, #1
   109a2:	9300      	str	r3, [sp, #0]
   109a4:	4613      	mov	r3, r2
   109a6:	2208      	movs	r2, #8
   109a8:	9803      	ldr	r0, [sp, #12]
   109aa:	f000 f937 	bl	10c1c <Pin::BitPlace(unsigned long, unsigned long, unsigned long, unsigned long)>
   109ae:	4602      	mov	r2, r0
    pin_map->_register[port_][pin_] =
   109b0:	0173      	lsls	r3, r6, #5
   109b2:	442b      	add	r3, r5
   109b4:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
   109b8:	463b      	mov	r3, r7
   109ba:	4619      	mov	r1, r3
   109bc:	4802      	ldr	r0, [pc, #8]	; (109c8 <Pin::EnableDigitalFilter(bool)+0x74>)
   109be:	f005 fc97 	bl	162f0 <__cyg_profile_func_exit>
  }
   109c2:	bf00      	nop
   109c4:	b005      	add	sp, #20
   109c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   109c8:	00010955 	.word	0x00010955
   109cc:	10000018 	.word	0x10000018

000109d0 <Pin::EnableFastMode(bool)>:
  void EnableFastMode(bool enable_fast_mode = true) override
   109d0:	b5f0      	push	{r4, r5, r6, r7, lr}
   109d2:	b085      	sub	sp, #20
   109d4:	4677      	mov	r7, lr
   109d6:	9003      	str	r0, [sp, #12]
   109d8:	460b      	mov	r3, r1
   109da:	f88d 300b 	strb.w	r3, [sp, #11]
   109de:	463b      	mov	r3, r7
   109e0:	4619      	mov	r1, r3
   109e2:	4816      	ldr	r0, [pc, #88]	; (10a3c <Pin::EnableFastMode(bool)+0x6c>)
   109e4:	f005 fc70 	bl	162c8 <__cyg_profile_func_enter>
  {
    pin_map->_register[port_][pin_] = BitPlace(
   109e8:	4b15      	ldr	r3, [pc, #84]	; (10a40 <Pin::EnableFastMode(bool)+0x70>)
   109ea:	681b      	ldr	r3, [r3, #0]
        pin_map->_register[port_][pin_], PinBitMap::kSlew, enable_fast_mode, 1);
   109ec:	9a03      	ldr	r2, [sp, #12]
   109ee:	7912      	ldrb	r2, [r2, #4]
   109f0:	4610      	mov	r0, r2
   109f2:	9a03      	ldr	r2, [sp, #12]
   109f4:	7952      	ldrb	r2, [r2, #5]
   109f6:	4611      	mov	r1, r2
    pin_map->_register[port_][pin_] = BitPlace(
   109f8:	0142      	lsls	r2, r0, #5
   109fa:	440a      	add	r2, r1
   109fc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   10a00:	f89d 200b 	ldrb.w	r2, [sp, #11]
   10a04:	4b0e      	ldr	r3, [pc, #56]	; (10a40 <Pin::EnableFastMode(bool)+0x70>)
   10a06:	681c      	ldr	r4, [r3, #0]
   10a08:	9b03      	ldr	r3, [sp, #12]
   10a0a:	791b      	ldrb	r3, [r3, #4]
   10a0c:	461e      	mov	r6, r3
   10a0e:	9b03      	ldr	r3, [sp, #12]
   10a10:	795b      	ldrb	r3, [r3, #5]
   10a12:	461d      	mov	r5, r3
   10a14:	2301      	movs	r3, #1
   10a16:	9300      	str	r3, [sp, #0]
   10a18:	4613      	mov	r3, r2
   10a1a:	2209      	movs	r2, #9
   10a1c:	9803      	ldr	r0, [sp, #12]
   10a1e:	f000 f8fd 	bl	10c1c <Pin::BitPlace(unsigned long, unsigned long, unsigned long, unsigned long)>
   10a22:	4602      	mov	r2, r0
   10a24:	0173      	lsls	r3, r6, #5
   10a26:	442b      	add	r3, r5
   10a28:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
   10a2c:	463b      	mov	r3, r7
   10a2e:	4619      	mov	r1, r3
   10a30:	4802      	ldr	r0, [pc, #8]	; (10a3c <Pin::EnableFastMode(bool)+0x6c>)
   10a32:	f005 fc5d 	bl	162f0 <__cyg_profile_func_exit>
  }
   10a36:	bf00      	nop
   10a38:	b005      	add	sp, #20
   10a3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10a3c:	000109d1 	.word	0x000109d1
   10a40:	10000018 	.word	0x10000018

00010a44 <Pin::EnableI2cHighSpeedMode(bool)>:
  // Enable by setting bit to 0 for i2c high speed mode
  void EnableI2cHighSpeedMode(bool enable_high_speed = true) override
   10a44:	b5f0      	push	{r4, r5, r6, r7, lr}
   10a46:	b085      	sub	sp, #20
   10a48:	4677      	mov	r7, lr
   10a4a:	9003      	str	r0, [sp, #12]
   10a4c:	460b      	mov	r3, r1
   10a4e:	f88d 300b 	strb.w	r3, [sp, #11]
   10a52:	463b      	mov	r3, r7
   10a54:	4619      	mov	r1, r3
   10a56:	4818      	ldr	r0, [pc, #96]	; (10ab8 <Pin::EnableI2cHighSpeedMode(bool)+0x74>)
   10a58:	f005 fc36 	bl	162c8 <__cyg_profile_func_enter>
  {
    pin_map->_register[port_][pin_] =
        BitPlace(pin_map->_register[port_][pin_], PinBitMap::kI2cHighSpeed,
   10a5c:	4b17      	ldr	r3, [pc, #92]	; (10abc <Pin::EnableI2cHighSpeedMode(bool)+0x78>)
   10a5e:	681b      	ldr	r3, [r3, #0]
   10a60:	9a03      	ldr	r2, [sp, #12]
   10a62:	7912      	ldrb	r2, [r2, #4]
   10a64:	4610      	mov	r0, r2
   10a66:	9a03      	ldr	r2, [sp, #12]
   10a68:	7952      	ldrb	r2, [r2, #5]
   10a6a:	4611      	mov	r1, r2
   10a6c:	0142      	lsls	r2, r0, #5
   10a6e:	440a      	add	r2, r1
   10a70:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
                 !enable_high_speed, 1);
   10a74:	f89d 300b 	ldrb.w	r3, [sp, #11]
   10a78:	f083 0301 	eor.w	r3, r3, #1
   10a7c:	b2db      	uxtb	r3, r3
        BitPlace(pin_map->_register[port_][pin_], PinBitMap::kI2cHighSpeed,
   10a7e:	461a      	mov	r2, r3
    pin_map->_register[port_][pin_] =
   10a80:	4b0e      	ldr	r3, [pc, #56]	; (10abc <Pin::EnableI2cHighSpeedMode(bool)+0x78>)
   10a82:	681c      	ldr	r4, [r3, #0]
   10a84:	9b03      	ldr	r3, [sp, #12]
   10a86:	791b      	ldrb	r3, [r3, #4]
   10a88:	461e      	mov	r6, r3
   10a8a:	9b03      	ldr	r3, [sp, #12]
   10a8c:	795b      	ldrb	r3, [r3, #5]
   10a8e:	461d      	mov	r5, r3
        BitPlace(pin_map->_register[port_][pin_], PinBitMap::kI2cHighSpeed,
   10a90:	2301      	movs	r3, #1
   10a92:	9300      	str	r3, [sp, #0]
   10a94:	4613      	mov	r3, r2
   10a96:	2208      	movs	r2, #8
   10a98:	9803      	ldr	r0, [sp, #12]
   10a9a:	f000 f8bf 	bl	10c1c <Pin::BitPlace(unsigned long, unsigned long, unsigned long, unsigned long)>
   10a9e:	4602      	mov	r2, r0
    pin_map->_register[port_][pin_] =
   10aa0:	0173      	lsls	r3, r6, #5
   10aa2:	442b      	add	r3, r5
   10aa4:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
   10aa8:	463b      	mov	r3, r7
   10aaa:	4619      	mov	r1, r3
   10aac:	4802      	ldr	r0, [pc, #8]	; (10ab8 <Pin::EnableI2cHighSpeedMode(bool)+0x74>)
   10aae:	f005 fc1f 	bl	162f0 <__cyg_profile_func_exit>
  }
   10ab2:	bf00      	nop
   10ab4:	b005      	add	sp, #20
   10ab6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10ab8:	00010a45 	.word	0x00010a45
   10abc:	10000018 	.word	0x10000018

00010ac0 <Pin::EnableI2cHighCurrentDrive(bool)>:
  void EnableI2cHighCurrentDrive(bool enable_high_current = true) override
   10ac0:	b5f0      	push	{r4, r5, r6, r7, lr}
   10ac2:	b085      	sub	sp, #20
   10ac4:	4677      	mov	r7, lr
   10ac6:	9003      	str	r0, [sp, #12]
   10ac8:	460b      	mov	r3, r1
   10aca:	f88d 300b 	strb.w	r3, [sp, #11]
   10ace:	463b      	mov	r3, r7
   10ad0:	4619      	mov	r1, r3
   10ad2:	4816      	ldr	r0, [pc, #88]	; (10b2c <Pin::EnableI2cHighCurrentDrive(bool)+0x6c>)
   10ad4:	f005 fbf8 	bl	162c8 <__cyg_profile_func_enter>
  {
    pin_map->_register[port_][pin_] =
        BitPlace(pin_map->_register[port_][pin_],
   10ad8:	4b15      	ldr	r3, [pc, #84]	; (10b30 <Pin::EnableI2cHighCurrentDrive(bool)+0x70>)
   10ada:	681b      	ldr	r3, [r3, #0]
   10adc:	9a03      	ldr	r2, [sp, #12]
   10ade:	7912      	ldrb	r2, [r2, #4]
   10ae0:	4610      	mov	r0, r2
   10ae2:	9a03      	ldr	r2, [sp, #12]
   10ae4:	7952      	ldrb	r2, [r2, #5]
   10ae6:	4611      	mov	r1, r2
   10ae8:	0142      	lsls	r2, r0, #5
   10aea:	440a      	add	r2, r1
   10aec:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   10af0:	f89d 200b 	ldrb.w	r2, [sp, #11]
    pin_map->_register[port_][pin_] =
   10af4:	4b0e      	ldr	r3, [pc, #56]	; (10b30 <Pin::EnableI2cHighCurrentDrive(bool)+0x70>)
   10af6:	681c      	ldr	r4, [r3, #0]
   10af8:	9b03      	ldr	r3, [sp, #12]
   10afa:	791b      	ldrb	r3, [r3, #4]
   10afc:	461e      	mov	r6, r3
   10afe:	9b03      	ldr	r3, [sp, #12]
   10b00:	795b      	ldrb	r3, [r3, #5]
   10b02:	461d      	mov	r5, r3
        BitPlace(pin_map->_register[port_][pin_],
   10b04:	2301      	movs	r3, #1
   10b06:	9300      	str	r3, [sp, #0]
   10b08:	4613      	mov	r3, r2
   10b0a:	2209      	movs	r2, #9
   10b0c:	9803      	ldr	r0, [sp, #12]
   10b0e:	f000 f885 	bl	10c1c <Pin::BitPlace(unsigned long, unsigned long, unsigned long, unsigned long)>
   10b12:	4602      	mov	r2, r0
    pin_map->_register[port_][pin_] =
   10b14:	0173      	lsls	r3, r6, #5
   10b16:	442b      	add	r3, r5
   10b18:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
   10b1c:	463b      	mov	r3, r7
   10b1e:	4619      	mov	r1, r3
   10b20:	4802      	ldr	r0, [pc, #8]	; (10b2c <Pin::EnableI2cHighCurrentDrive(bool)+0x6c>)
   10b22:	f005 fbe5 	bl	162f0 <__cyg_profile_func_exit>
                 PinBitMap::kI2cHighCurrentDrive, enable_high_current, 1);
  }
   10b26:	bf00      	nop
   10b28:	b005      	add	sp, #20
   10b2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10b2c:	00010ac1 	.word	0x00010ac1
   10b30:	10000018 	.word	0x10000018

00010b34 <Pin::SetAsOpenDrain(bool)>:
  void SetAsOpenDrain(bool set_as_open_drain = true) override
   10b34:	b5f0      	push	{r4, r5, r6, r7, lr}
   10b36:	b085      	sub	sp, #20
   10b38:	4677      	mov	r7, lr
   10b3a:	9003      	str	r0, [sp, #12]
   10b3c:	460b      	mov	r3, r1
   10b3e:	f88d 300b 	strb.w	r3, [sp, #11]
   10b42:	463b      	mov	r3, r7
   10b44:	4619      	mov	r1, r3
   10b46:	4816      	ldr	r0, [pc, #88]	; (10ba0 <Pin::SetAsOpenDrain(bool)+0x6c>)
   10b48:	f005 fbbe 	bl	162c8 <__cyg_profile_func_enter>
  {
    pin_map->_register[port_][pin_] =
        BitPlace(pin_map->_register[port_][pin_], PinBitMap::kOpenDrain,
   10b4c:	4b15      	ldr	r3, [pc, #84]	; (10ba4 <Pin::SetAsOpenDrain(bool)+0x70>)
   10b4e:	681b      	ldr	r3, [r3, #0]
   10b50:	9a03      	ldr	r2, [sp, #12]
   10b52:	7912      	ldrb	r2, [r2, #4]
   10b54:	4610      	mov	r0, r2
   10b56:	9a03      	ldr	r2, [sp, #12]
   10b58:	7952      	ldrb	r2, [r2, #5]
   10b5a:	4611      	mov	r1, r2
   10b5c:	0142      	lsls	r2, r0, #5
   10b5e:	440a      	add	r2, r1
   10b60:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   10b64:	f89d 200b 	ldrb.w	r2, [sp, #11]
    pin_map->_register[port_][pin_] =
   10b68:	4b0e      	ldr	r3, [pc, #56]	; (10ba4 <Pin::SetAsOpenDrain(bool)+0x70>)
   10b6a:	681c      	ldr	r4, [r3, #0]
   10b6c:	9b03      	ldr	r3, [sp, #12]
   10b6e:	791b      	ldrb	r3, [r3, #4]
   10b70:	461e      	mov	r6, r3
   10b72:	9b03      	ldr	r3, [sp, #12]
   10b74:	795b      	ldrb	r3, [r3, #5]
   10b76:	461d      	mov	r5, r3
        BitPlace(pin_map->_register[port_][pin_], PinBitMap::kOpenDrain,
   10b78:	2301      	movs	r3, #1
   10b7a:	9300      	str	r3, [sp, #0]
   10b7c:	4613      	mov	r3, r2
   10b7e:	220a      	movs	r2, #10
   10b80:	9803      	ldr	r0, [sp, #12]
   10b82:	f000 f84b 	bl	10c1c <Pin::BitPlace(unsigned long, unsigned long, unsigned long, unsigned long)>
   10b86:	4602      	mov	r2, r0
    pin_map->_register[port_][pin_] =
   10b88:	0173      	lsls	r3, r6, #5
   10b8a:	442b      	add	r3, r5
   10b8c:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
   10b90:	463b      	mov	r3, r7
   10b92:	4619      	mov	r1, r3
   10b94:	4802      	ldr	r0, [pc, #8]	; (10ba0 <Pin::SetAsOpenDrain(bool)+0x6c>)
   10b96:	f005 fbab 	bl	162f0 <__cyg_profile_func_exit>
                 set_as_open_drain, 1);
  }
   10b9a:	bf00      	nop
   10b9c:	b005      	add	sp, #20
   10b9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10ba0:	00010b35 	.word	0x00010b35
   10ba4:	10000018 	.word	0x10000018

00010ba8 <Pin::EnableDac(bool)>:
  void EnableDac(bool enable_dac = true) override
   10ba8:	b5f0      	push	{r4, r5, r6, r7, lr}
   10baa:	b085      	sub	sp, #20
   10bac:	4677      	mov	r7, lr
   10bae:	9003      	str	r0, [sp, #12]
   10bb0:	460b      	mov	r3, r1
   10bb2:	f88d 300b 	strb.w	r3, [sp, #11]
   10bb6:	463b      	mov	r3, r7
   10bb8:	4619      	mov	r1, r3
   10bba:	4816      	ldr	r0, [pc, #88]	; (10c14 <Pin::EnableDac(bool)+0x6c>)
   10bbc:	f005 fb84 	bl	162c8 <__cyg_profile_func_enter>
  {
    pin_map->_register[port_][pin_] = BitPlace(
   10bc0:	4b15      	ldr	r3, [pc, #84]	; (10c18 <Pin::EnableDac(bool)+0x70>)
   10bc2:	681b      	ldr	r3, [r3, #0]
        pin_map->_register[port_][pin_], PinBitMap::kDacEnable, enable_dac, 1);
   10bc4:	9a03      	ldr	r2, [sp, #12]
   10bc6:	7912      	ldrb	r2, [r2, #4]
   10bc8:	4610      	mov	r0, r2
   10bca:	9a03      	ldr	r2, [sp, #12]
   10bcc:	7952      	ldrb	r2, [r2, #5]
   10bce:	4611      	mov	r1, r2
    pin_map->_register[port_][pin_] = BitPlace(
   10bd0:	0142      	lsls	r2, r0, #5
   10bd2:	440a      	add	r2, r1
   10bd4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   10bd8:	f89d 200b 	ldrb.w	r2, [sp, #11]
   10bdc:	4b0e      	ldr	r3, [pc, #56]	; (10c18 <Pin::EnableDac(bool)+0x70>)
   10bde:	681c      	ldr	r4, [r3, #0]
   10be0:	9b03      	ldr	r3, [sp, #12]
   10be2:	791b      	ldrb	r3, [r3, #4]
   10be4:	461e      	mov	r6, r3
   10be6:	9b03      	ldr	r3, [sp, #12]
   10be8:	795b      	ldrb	r3, [r3, #5]
   10bea:	461d      	mov	r5, r3
   10bec:	2301      	movs	r3, #1
   10bee:	9300      	str	r3, [sp, #0]
   10bf0:	4613      	mov	r3, r2
   10bf2:	2210      	movs	r2, #16
   10bf4:	9803      	ldr	r0, [sp, #12]
   10bf6:	f000 f811 	bl	10c1c <Pin::BitPlace(unsigned long, unsigned long, unsigned long, unsigned long)>
   10bfa:	4602      	mov	r2, r0
   10bfc:	0173      	lsls	r3, r6, #5
   10bfe:	442b      	add	r3, r5
   10c00:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
   10c04:	463b      	mov	r3, r7
   10c06:	4619      	mov	r1, r3
   10c08:	4802      	ldr	r0, [pc, #8]	; (10c14 <Pin::EnableDac(bool)+0x6c>)
   10c0a:	f005 fb71 	bl	162f0 <__cyg_profile_func_exit>
  }
   10c0e:	bf00      	nop
   10c10:	b005      	add	sp, #20
   10c12:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10c14:	00010ba9 	.word	0x00010ba9
   10c18:	10000018 	.word	0x10000018

00010c1c <Pin::BitPlace(unsigned long, unsigned long, unsigned long, unsigned long)>:
  inline uint32_t BitPlace(uint32_t target, uint32_t position, uint32_t value,
   10c1c:	b530      	push	{r4, r5, lr}
   10c1e:	b087      	sub	sp, #28
   10c20:	4675      	mov	r5, lr
   10c22:	9003      	str	r0, [sp, #12]
   10c24:	9102      	str	r1, [sp, #8]
   10c26:	9201      	str	r2, [sp, #4]
   10c28:	9300      	str	r3, [sp, #0]
   10c2a:	462b      	mov	r3, r5
   10c2c:	4619      	mov	r1, r3
   10c2e:	4813      	ldr	r0, [pc, #76]	; (10c7c <Pin::BitPlace(unsigned long, unsigned long, unsigned long, unsigned long)+0x60>)
   10c30:	f005 fb4a 	bl	162c8 <__cyg_profile_func_enter>
                           uint32_t value_width)
  {
    // Generate mask with all 1s
    uint32_t mask = 0xFFFFFFFF >> (32 - value_width);
   10c34:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   10c36:	f1c3 0320 	rsb	r3, r3, #32
   10c3a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   10c3e:	fa22 f303 	lsr.w	r3, r2, r3
   10c42:	9305      	str	r3, [sp, #20]
    target &= ~(mask << position);
   10c44:	9a05      	ldr	r2, [sp, #20]
   10c46:	9b01      	ldr	r3, [sp, #4]
   10c48:	fa02 f303 	lsl.w	r3, r2, r3
   10c4c:	43db      	mvns	r3, r3
   10c4e:	9a02      	ldr	r2, [sp, #8]
   10c50:	4013      	ands	r3, r2
   10c52:	9302      	str	r3, [sp, #8]
    target |= (value & mask) << position;
   10c54:	9a00      	ldr	r2, [sp, #0]
   10c56:	9b05      	ldr	r3, [sp, #20]
   10c58:	401a      	ands	r2, r3
   10c5a:	9b01      	ldr	r3, [sp, #4]
   10c5c:	fa02 f303 	lsl.w	r3, r2, r3
   10c60:	9a02      	ldr	r2, [sp, #8]
   10c62:	4313      	orrs	r3, r2
   10c64:	9302      	str	r3, [sp, #8]
    return target;
   10c66:	9c02      	ldr	r4, [sp, #8]
   10c68:	462b      	mov	r3, r5
   10c6a:	4619      	mov	r1, r3
   10c6c:	4803      	ldr	r0, [pc, #12]	; (10c7c <Pin::BitPlace(unsigned long, unsigned long, unsigned long, unsigned long)+0x60>)
   10c6e:	f005 fb3f 	bl	162f0 <__cyg_profile_func_exit>
   10c72:	4623      	mov	r3, r4
  }
   10c74:	4618      	mov	r0, r3
   10c76:	b007      	add	sp, #28
   10c78:	bd30      	pop	{r4, r5, pc}
   10c7a:	bf00      	nop
   10c7c:	00010c1d 	.word	0x00010c1d

00010c80 <Pin::GetPort() const>:
  uint8_t GetPort() const override
   10c80:	b530      	push	{r4, r5, lr}
   10c82:	b083      	sub	sp, #12
   10c84:	4675      	mov	r5, lr
   10c86:	9001      	str	r0, [sp, #4]
   10c88:	462b      	mov	r3, r5
   10c8a:	4619      	mov	r1, r3
   10c8c:	4806      	ldr	r0, [pc, #24]	; (10ca8 <Pin::GetPort() const+0x28>)
   10c8e:	f005 fb1b 	bl	162c8 <__cyg_profile_func_enter>
  {
    return port_;
   10c92:	9b01      	ldr	r3, [sp, #4]
   10c94:	791c      	ldrb	r4, [r3, #4]
   10c96:	462b      	mov	r3, r5
   10c98:	4619      	mov	r1, r3
   10c9a:	4803      	ldr	r0, [pc, #12]	; (10ca8 <Pin::GetPort() const+0x28>)
   10c9c:	f005 fb28 	bl	162f0 <__cyg_profile_func_exit>
   10ca0:	4623      	mov	r3, r4
  }
   10ca2:	4618      	mov	r0, r3
   10ca4:	b003      	add	sp, #12
   10ca6:	bd30      	pop	{r4, r5, pc}
   10ca8:	00010c81 	.word	0x00010c81

00010cac <Pin::GetPin() const>:
  uint8_t GetPin() const override
   10cac:	b530      	push	{r4, r5, lr}
   10cae:	b083      	sub	sp, #12
   10cb0:	4675      	mov	r5, lr
   10cb2:	9001      	str	r0, [sp, #4]
   10cb4:	462b      	mov	r3, r5
   10cb6:	4619      	mov	r1, r3
   10cb8:	4806      	ldr	r0, [pc, #24]	; (10cd4 <Pin::GetPin() const+0x28>)
   10cba:	f005 fb05 	bl	162c8 <__cyg_profile_func_enter>
  {
    return pin_;
   10cbe:	9b01      	ldr	r3, [sp, #4]
   10cc0:	795c      	ldrb	r4, [r3, #5]
   10cc2:	462b      	mov	r3, r5
   10cc4:	4619      	mov	r1, r3
   10cc6:	4803      	ldr	r0, [pc, #12]	; (10cd4 <Pin::GetPin() const+0x28>)
   10cc8:	f005 fb12 	bl	162f0 <__cyg_profile_func_exit>
   10ccc:	4623      	mov	r3, r4
  }
   10cce:	4618      	mov	r0, r3
   10cd0:	b003      	add	sp, #12
   10cd2:	bd30      	pop	{r4, r5, pc}
   10cd4:	00010cad 	.word	0x00010cad

00010cd8 <debug::PrintBacktrace(bool, void*)>:
}

[[gnu::no_instrument_function]]
inline void PrintBacktrace(bool show_make_command = false,
                           void * final_address   = nullptr)
{
   10cd8:	b500      	push	{lr}
   10cda:	b08b      	sub	sp, #44	; 0x2c
   10cdc:	4603      	mov	r3, r0
   10cde:	9100      	str	r1, [sp, #0]
   10ce0:	f88d 3007 	strb.w	r3, [sp, #7]
  printf("Stack Depth = %zd\n", GetStackDepth());
   10ce4:	f005 fb26 	bl	16334 <GetStackDepth()>
   10ce8:	4603      	mov	r3, r0
   10cea:	4619      	mov	r1, r3
   10cec:	4831      	ldr	r0, [pc, #196]	; (10db4 <debug::PrintBacktrace(bool, void*)+0xdc>)
   10cee:	f006 fd6b 	bl	177c8 <printf>
  // stack_depth-1 to ignore PrintBacktrace()
  // PrintBacktrace shouldn't be ignored in profiling because it causes
  // the exit to still fire, which can result in a negative stack_depth
  void ** list_of_called_functions = GetStackTrace();
   10cf2:	f005 fb0b 	bl	1630c <GetStackTrace()>
   10cf6:	9007      	str	r0, [sp, #28]
  size_t stack_depth               = GetStackDepth();
   10cf8:	f005 fb1c 	bl	16334 <GetStackDepth()>
   10cfc:	9006      	str	r0, [sp, #24]
  // Ignore the last function as it is the Backtrace function
  for (size_t pos = 0; pos < stack_depth - 1; pos++)
   10cfe:	2300      	movs	r3, #0
   10d00:	9309      	str	r3, [sp, #36]	; 0x24
   10d02:	9b06      	ldr	r3, [sp, #24]
   10d04:	3b01      	subs	r3, #1
   10d06:	9a09      	ldr	r2, [sp, #36]	; 0x24
   10d08:	429a      	cmp	r2, r3
   10d0a:	d20d      	bcs.n	10d28 <debug::PrintBacktrace(bool, void*)+0x50>
  {
    printf("  #%zu: 0x%p\n", pos, list_of_called_functions[pos]);
   10d0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   10d0e:	009b      	lsls	r3, r3, #2
   10d10:	9a07      	ldr	r2, [sp, #28]
   10d12:	4413      	add	r3, r2
   10d14:	681b      	ldr	r3, [r3, #0]
   10d16:	461a      	mov	r2, r3
   10d18:	9909      	ldr	r1, [sp, #36]	; 0x24
   10d1a:	4827      	ldr	r0, [pc, #156]	; (10db8 <debug::PrintBacktrace(bool, void*)+0xe0>)
   10d1c:	f006 fd54 	bl	177c8 <printf>
  for (size_t pos = 0; pos < stack_depth - 1; pos++)
   10d20:	9b09      	ldr	r3, [sp, #36]	; 0x24
   10d22:	3301      	adds	r3, #1
   10d24:	9309      	str	r3, [sp, #36]	; 0x24
   10d26:	e7ec      	b.n	10d02 <debug::PrintBacktrace(bool, void*)+0x2a>
  }
  if (final_address != nullptr)
   10d28:	9b00      	ldr	r3, [sp, #0]
   10d2a:	2b00      	cmp	r3, #0
   10d2c:	d006      	beq.n	10d3c <debug::PrintBacktrace(bool, void*)+0x64>
  {
    printf("  #%zu: 0x%p\n", stack_depth - 1, final_address);
   10d2e:	9b06      	ldr	r3, [sp, #24]
   10d30:	3b01      	subs	r3, #1
   10d32:	9a00      	ldr	r2, [sp, #0]
   10d34:	4619      	mov	r1, r3
   10d36:	4820      	ldr	r0, [pc, #128]	; (10db8 <debug::PrintBacktrace(bool, void*)+0xe0>)
   10d38:	f006 fd46 	bl	177c8 <printf>
  }
  if (show_make_command)
   10d3c:	f89d 3007 	ldrb.w	r3, [sp, #7]
   10d40:	2b00      	cmp	r3, #0
   10d42:	d033      	beq.n	10dac <debug::PrintBacktrace(bool, void*)+0xd4>
  {
    constexpr const char kBuildType[] =
   10d44:	4a1d      	ldr	r2, [pc, #116]	; (10dbc <debug::PrintBacktrace(bool, void*)+0xe4>)
   10d46:	ab03      	add	r3, sp, #12
   10d48:	ca07      	ldmia	r2, {r0, r1, r2}
   10d4a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#if defined(APPLICATION)
        "application";
#else
        "bootloader";
#endif
    puts("\nRun: the following command in your project directory");
   10d4e:	481c      	ldr	r0, [pc, #112]	; (10dc0 <debug::PrintBacktrace(bool, void*)+0xe8>)
   10d50:	f005 fa8a 	bl	16268 <puts>
    printf("\n  " SJ2_BOLD_WHITE "make stacktrace-%s TRACES=\"", kBuildType);
   10d54:	ab03      	add	r3, sp, #12
   10d56:	4619      	mov	r1, r3
   10d58:	481a      	ldr	r0, [pc, #104]	; (10dc4 <debug::PrintBacktrace(bool, void*)+0xec>)
   10d5a:	f006 fd35 	bl	177c8 <printf>
    for (size_t pos = 0; pos < stack_depth - 1; pos++)
   10d5e:	2300      	movs	r3, #0
   10d60:	9308      	str	r3, [sp, #32]
   10d62:	9b06      	ldr	r3, [sp, #24]
   10d64:	3b01      	subs	r3, #1
   10d66:	9a08      	ldr	r2, [sp, #32]
   10d68:	429a      	cmp	r2, r3
   10d6a:	d212      	bcs.n	10d92 <debug::PrintBacktrace(bool, void*)+0xba>
    {
      if (pos != 0)
   10d6c:	9b08      	ldr	r3, [sp, #32]
   10d6e:	2b00      	cmp	r3, #0
   10d70:	d002      	beq.n	10d78 <debug::PrintBacktrace(bool, void*)+0xa0>
      {
        putchar(' ');
   10d72:	2020      	movs	r0, #32
   10d74:	f005 fa5c 	bl	16230 <putchar>
      }
      printf("0x%p", list_of_called_functions[pos]);
   10d78:	9b08      	ldr	r3, [sp, #32]
   10d7a:	009b      	lsls	r3, r3, #2
   10d7c:	9a07      	ldr	r2, [sp, #28]
   10d7e:	4413      	add	r3, r2
   10d80:	681b      	ldr	r3, [r3, #0]
   10d82:	4619      	mov	r1, r3
   10d84:	4810      	ldr	r0, [pc, #64]	; (10dc8 <debug::PrintBacktrace(bool, void*)+0xf0>)
   10d86:	f006 fd1f 	bl	177c8 <printf>
    for (size_t pos = 0; pos < stack_depth - 1; pos++)
   10d8a:	9b08      	ldr	r3, [sp, #32]
   10d8c:	3301      	adds	r3, #1
   10d8e:	9308      	str	r3, [sp, #32]
   10d90:	e7e7      	b.n	10d62 <debug::PrintBacktrace(bool, void*)+0x8a>
    }
    if (final_address != nullptr)
   10d92:	9b00      	ldr	r3, [sp, #0]
   10d94:	2b00      	cmp	r3, #0
   10d96:	d003      	beq.n	10da0 <debug::PrintBacktrace(bool, void*)+0xc8>
    {
      printf(" 0x%p", final_address);
   10d98:	9900      	ldr	r1, [sp, #0]
   10d9a:	480c      	ldr	r0, [pc, #48]	; (10dcc <debug::PrintBacktrace(bool, void*)+0xf4>)
   10d9c:	f006 fd14 	bl	177c8 <printf>
    }
    puts("\"\n" SJ2_COLOR_RESET);
   10da0:	480b      	ldr	r0, [pc, #44]	; (10dd0 <debug::PrintBacktrace(bool, void*)+0xf8>)
   10da2:	f005 fa61 	bl	16268 <puts>
    puts(
   10da6:	480b      	ldr	r0, [pc, #44]	; (10dd4 <debug::PrintBacktrace(bool, void*)+0xfc>)
   10da8:	f005 fa5e 	bl	16268 <puts>
        "This will report the file and line number that led to this function "
        "being called.");
  }
}
   10dac:	bf00      	nop
   10dae:	b00b      	add	sp, #44	; 0x2c
   10db0:	f85d fb04 	ldr.w	pc, [sp], #4
   10db4:	000190bc 	.word	0x000190bc
   10db8:	000190d0 	.word	0x000190d0
   10dbc:	000191ac 	.word	0x000191ac
   10dc0:	000190e0 	.word	0x000190e0
   10dc4:	00019118 	.word	0x00019118
   10dc8:	00019140 	.word	0x00019140
   10dcc:	00019148 	.word	0x00019148
   10dd0:	00019150 	.word	0x00019150
   10dd4:	00019158 	.word	0x00019158

00010dd8 <(anonymous namespace)::DefaultUptime()>:
{
// uptime in nanoseconds
inline uint64_t uptime = 0;
// Returns the system uptime in nanoseconds, do not use this function directly
[[gnu::always_inline]] inline uint64_t DefaultUptime()
{
   10dd8:	b570      	push	{r4, r5, r6, lr}
   10dda:	4676      	mov	r6, lr
   10ddc:	4633      	mov	r3, r6
   10dde:	4619      	mov	r1, r3
   10de0:	4807      	ldr	r0, [pc, #28]	; (10e00 <(anonymous namespace)::DefaultUptime()+0x28>)
   10de2:	f005 fa71 	bl	162c8 <__cyg_profile_func_enter>
  return uptime;
   10de6:	4b07      	ldr	r3, [pc, #28]	; (10e04 <(anonymous namespace)::DefaultUptime()+0x2c>)
   10de8:	e9d3 4500 	ldrd	r4, r5, [r3]
   10dec:	4633      	mov	r3, r6
   10dee:	4619      	mov	r1, r3
   10df0:	4803      	ldr	r0, [pc, #12]	; (10e00 <(anonymous namespace)::DefaultUptime()+0x28>)
   10df2:	f005 fa7d 	bl	162f0 <__cyg_profile_func_exit>
   10df6:	4623      	mov	r3, r4
   10df8:	462c      	mov	r4, r5
}
   10dfa:	4618      	mov	r0, r3
   10dfc:	4621      	mov	r1, r4
   10dfe:	bd70      	pop	{r4, r5, r6, pc}
   10e00:	00010dd9 	.word	0x00010dd9
   10e04:	10000680 	.word	0x10000680

00010e08 <Milliseconds()>:
{
  Uptime = uptime_function;
}
// Get system uptime in milliseconds as a 64-bit integer
inline uint64_t Milliseconds()
{
   10e08:	b570      	push	{r4, r5, r6, lr}
   10e0a:	4674      	mov	r4, lr
   10e0c:	4623      	mov	r3, r4
   10e0e:	4619      	mov	r1, r3
   10e10:	480c      	ldr	r0, [pc, #48]	; (10e44 <Milliseconds()+0x3c>)
   10e12:	f005 fa59 	bl	162c8 <__cyg_profile_func_enter>
  return Uptime() / 1'000;
   10e16:	4b0c      	ldr	r3, [pc, #48]	; (10e48 <Milliseconds()+0x40>)
   10e18:	681b      	ldr	r3, [r3, #0]
   10e1a:	4798      	blx	r3
   10e1c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   10e20:	f04f 0300 	mov.w	r3, #0
   10e24:	f007 ff52 	bl	18ccc <__aeabi_uldivmod>
   10e28:	4602      	mov	r2, r0
   10e2a:	460b      	mov	r3, r1
   10e2c:	4615      	mov	r5, r2
   10e2e:	461e      	mov	r6, r3
   10e30:	4623      	mov	r3, r4
   10e32:	4619      	mov	r1, r3
   10e34:	4803      	ldr	r0, [pc, #12]	; (10e44 <Milliseconds()+0x3c>)
   10e36:	f005 fa5b 	bl	162f0 <__cyg_profile_func_exit>
   10e3a:	462b      	mov	r3, r5
   10e3c:	4634      	mov	r4, r6
}
   10e3e:	4618      	mov	r0, r3
   10e40:	4621      	mov	r1, r4
   10e42:	bd70      	pop	{r4, r5, r6, pc}
   10e44:	00010e09 	.word	0x00010e09
   10e48:	1000001c 	.word	0x1000001c

00010e4c <Wait(unsigned long long)::{lambda()#1}::operator()() const>:
  return status;
}

inline Status Wait(uint64_t timeout)
{
  return Wait(timeout, []() -> bool { return false; });
   10e4c:	b530      	push	{r4, r5, lr}
   10e4e:	b083      	sub	sp, #12
   10e50:	4675      	mov	r5, lr
   10e52:	9001      	str	r0, [sp, #4]
   10e54:	462b      	mov	r3, r5
   10e56:	4619      	mov	r1, r3
   10e58:	4806      	ldr	r0, [pc, #24]	; (10e74 <Wait(unsigned long long)::{lambda()#1}::operator()() const+0x28>)
   10e5a:	f005 fa35 	bl	162c8 <__cyg_profile_func_enter>
   10e5e:	2400      	movs	r4, #0
   10e60:	462b      	mov	r3, r5
   10e62:	4619      	mov	r1, r3
   10e64:	4803      	ldr	r0, [pc, #12]	; (10e74 <Wait(unsigned long long)::{lambda()#1}::operator()() const+0x28>)
   10e66:	f005 fa43 	bl	162f0 <__cyg_profile_func_exit>
   10e6a:	4623      	mov	r3, r4
   10e6c:	4618      	mov	r0, r3
   10e6e:	b003      	add	sp, #12
   10e70:	bd30      	pop	{r4, r5, pc}
   10e72:	bf00      	nop
   10e74:	00010e4d 	.word	0x00010e4d

00010e78 <Wait(unsigned long long)::{lambda()#1}::_FUN()>:
   10e78:	b538      	push	{r3, r4, r5, lr}
   10e7a:	4674      	mov	r4, lr
   10e7c:	4623      	mov	r3, r4
   10e7e:	4619      	mov	r1, r3
   10e80:	4807      	ldr	r0, [pc, #28]	; (10ea0 <Wait(unsigned long long)::{lambda()#1}::_FUN()+0x28>)
   10e82:	f005 fa21 	bl	162c8 <__cyg_profile_func_enter>
   10e86:	2000      	movs	r0, #0
   10e88:	f7ff ffe0 	bl	10e4c <Wait(unsigned long long)::{lambda()#1}::operator()() const>
   10e8c:	4603      	mov	r3, r0
   10e8e:	461d      	mov	r5, r3
   10e90:	4623      	mov	r3, r4
   10e92:	4619      	mov	r1, r3
   10e94:	4802      	ldr	r0, [pc, #8]	; (10ea0 <Wait(unsigned long long)::{lambda()#1}::_FUN()+0x28>)
   10e96:	f005 fa2b 	bl	162f0 <__cyg_profile_func_exit>
   10e9a:	462b      	mov	r3, r5
   10e9c:	4618      	mov	r0, r3
   10e9e:	bd38      	pop	{r3, r4, r5, pc}
   10ea0:	00010e79 	.word	0x00010e79

00010ea4 <Wait(unsigned long long)>:
{
   10ea4:	b5f0      	push	{r4, r5, r6, r7, lr}
   10ea6:	b089      	sub	sp, #36	; 0x24
   10ea8:	4675      	mov	r5, lr
   10eaa:	e9cd 0100 	strd	r0, r1, [sp]
   10eae:	462b      	mov	r3, r5
   10eb0:	4619      	mov	r1, r3
   10eb2:	482b      	ldr	r0, [pc, #172]	; (10f60 <Wait(unsigned long long)+0xbc>)
   10eb4:	f005 fa08 	bl	162c8 <__cyg_profile_func_enter>
   10eb8:	e9dd 3400 	ldrd	r3, r4, [sp]
   10ebc:	e9cd 3406 	strd	r3, r4, [sp, #24]
   10ec0:	f88d 6008 	strb.w	r6, [sp, #8]
   10ec4:	462b      	mov	r3, r5
   10ec6:	4619      	mov	r1, r3
   10ec8:	4826      	ldr	r0, [pc, #152]	; (10f64 <Wait(unsigned long long)+0xc0>)
   10eca:	f005 f9fd 	bl	162c8 <__cyg_profile_func_enter>
  uint64_t timeout_time = 0;
   10ece:	f04f 0300 	mov.w	r3, #0
   10ed2:	f04f 0400 	mov.w	r4, #0
   10ed6:	e9cd 3404 	strd	r3, r4, [sp, #16]
  if (timeout == kMaxWait)
   10eda:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
   10ede:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
   10ee2:	bf08      	it	eq
   10ee4:	f1b3 3fff 	cmpeq.w	r3, #4294967295	; 0xffffffff
   10ee8:	d106      	bne.n	10ef8 <Wait(unsigned long long)+0x54>
    timeout_time = kMaxWait;
   10eea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   10eee:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   10ef2:	e9cd 3404 	strd	r3, r4, [sp, #16]
   10ef6:	e00a      	b.n	10f0e <Wait(unsigned long long)+0x6a>
    timeout_time = Milliseconds() + timeout;
   10ef8:	f7ff ff86 	bl	10e08 <Milliseconds()>
   10efc:	460a      	mov	r2, r1
   10efe:	4601      	mov	r1, r0
   10f00:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
   10f04:	185e      	adds	r6, r3, r1
   10f06:	eb44 0702 	adc.w	r7, r4, r2
   10f0a:	e9cd 6704 	strd	r6, r7, [sp, #16]
  Status status = Status::kTimedOut;
   10f0e:	2301      	movs	r3, #1
   10f10:	9303      	str	r3, [sp, #12]
  while (Milliseconds() < timeout_time)
   10f12:	f7ff ff79 	bl	10e08 <Milliseconds()>
   10f16:	460a      	mov	r2, r1
   10f18:	4601      	mov	r1, r0
   10f1a:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
   10f1e:	42a2      	cmp	r2, r4
   10f20:	bf08      	it	eq
   10f22:	4299      	cmpeq	r1, r3
   10f24:	bf34      	ite	cc
   10f26:	2301      	movcc	r3, #1
   10f28:	2300      	movcs	r3, #0
   10f2a:	b2db      	uxtb	r3, r3
   10f2c:	2b00      	cmp	r3, #0
   10f2e:	d008      	beq.n	10f42 <Wait(unsigned long long)+0x9e>
    if (is_done())
   10f30:	ab02      	add	r3, sp, #8
   10f32:	4618      	mov	r0, r3
   10f34:	f7ff ff8a 	bl	10e4c <Wait(unsigned long long)::{lambda()#1}::operator()() const>
   10f38:	4603      	mov	r3, r0
   10f3a:	2b00      	cmp	r3, #0
   10f3c:	d0e9      	beq.n	10f12 <Wait(unsigned long long)+0x6e>
      status = Status::kSuccess;
   10f3e:	2300      	movs	r3, #0
   10f40:	9303      	str	r3, [sp, #12]
  return status;
   10f42:	9c03      	ldr	r4, [sp, #12]
   10f44:	462b      	mov	r3, r5
   10f46:	4619      	mov	r1, r3
   10f48:	4806      	ldr	r0, [pc, #24]	; (10f64 <Wait(unsigned long long)+0xc0>)
   10f4a:	f005 f9d1 	bl	162f0 <__cyg_profile_func_exit>
   10f4e:	462b      	mov	r3, r5
   10f50:	4619      	mov	r1, r3
   10f52:	4803      	ldr	r0, [pc, #12]	; (10f60 <Wait(unsigned long long)+0xbc>)
   10f54:	f005 f9cc 	bl	162f0 <__cyg_profile_func_exit>
  return Wait(timeout, []() -> bool { return false; });
   10f58:	4623      	mov	r3, r4
}
   10f5a:	4618      	mov	r0, r3
   10f5c:	b009      	add	sp, #36	; 0x24
   10f5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10f60:	00010ea5 	.word	0x00010ea5
   10f64:	000147a9 	.word	0x000147a9

00010f68 <Delay(unsigned long long)>:

// Delay the system for a duration of time
inline void Delay([[maybe_unused]] uint64_t delay_time_ms)
{
   10f68:	b510      	push	{r4, lr}
   10f6a:	b082      	sub	sp, #8
   10f6c:	4674      	mov	r4, lr
   10f6e:	e9cd 0100 	strd	r0, r1, [sp]
   10f72:	4623      	mov	r3, r4
   10f74:	4619      	mov	r1, r3
   10f76:	4807      	ldr	r0, [pc, #28]	; (10f94 <Delay(unsigned long long)+0x2c>)
   10f78:	f005 f9a6 	bl	162c8 <__cyg_profile_func_enter>
#if defined(HOST_TEST)
  return;
#else
  Wait(delay_time_ms);
   10f7c:	e9dd 0100 	ldrd	r0, r1, [sp]
   10f80:	f7ff ff90 	bl	10ea4 <Wait(unsigned long long)>
   10f84:	4623      	mov	r3, r4
   10f86:	4619      	mov	r1, r3
   10f88:	4802      	ldr	r0, [pc, #8]	; (10f94 <Delay(unsigned long long)+0x2c>)
   10f8a:	f005 f9b1 	bl	162f0 <__cyg_profile_func_exit>
#endif  // HOST_TEST
}
   10f8e:	bf00      	nop
   10f90:	b002      	add	sp, #8
   10f92:	bd10      	pop	{r4, pc}
   10f94:	00010f69 	.word	0x00010f69

00010f98 <GpioInterface::GpioInterface()>:
#include "L0_LowLevel/LPC40xx.h"
#include "L1_Drivers/pin.hpp"
#include "utility/enum.hpp"
#include "utility/log.hpp"

class GpioInterface
   10f98:	b530      	push	{r4, r5, lr}
   10f9a:	b083      	sub	sp, #12
   10f9c:	4675      	mov	r5, lr
   10f9e:	9001      	str	r0, [sp, #4]
   10fa0:	462b      	mov	r3, r5
   10fa2:	4619      	mov	r1, r3
   10fa4:	4807      	ldr	r0, [pc, #28]	; (10fc4 <GpioInterface::GpioInterface()+0x2c>)
   10fa6:	f005 f98f 	bl	162c8 <__cyg_profile_func_enter>
   10faa:	4a07      	ldr	r2, [pc, #28]	; (10fc8 <GpioInterface::GpioInterface()+0x30>)
   10fac:	9b01      	ldr	r3, [sp, #4]
   10fae:	601a      	str	r2, [r3, #0]
   10fb0:	9c01      	ldr	r4, [sp, #4]
   10fb2:	462b      	mov	r3, r5
   10fb4:	4619      	mov	r1, r3
   10fb6:	4803      	ldr	r0, [pc, #12]	; (10fc4 <GpioInterface::GpioInterface()+0x2c>)
   10fb8:	f005 f99a 	bl	162f0 <__cyg_profile_func_exit>
   10fbc:	4623      	mov	r3, r4
   10fbe:	4618      	mov	r0, r3
   10fc0:	b003      	add	sp, #12
   10fc2:	bd30      	pop	{r4, r5, pc}
   10fc4:	00010f99 	.word	0x00010f99
   10fc8:	00019b28 	.word	0x00019b28

00010fcc <Gpio::Gpio(unsigned char, unsigned char)>:
  };

  inline static volatile uint32_t * port_status = &(LPC_GPIOINT->IntStatus);

  // For port 0-4, pins 0-31 are available. Port 5 only has pins 0-4 available.
  constexpr Gpio(uint8_t port_number, uint8_t pin_number)
   10fcc:	b530      	push	{r4, r5, lr}
   10fce:	b083      	sub	sp, #12
   10fd0:	4675      	mov	r5, lr
   10fd2:	9001      	str	r0, [sp, #4]
   10fd4:	460b      	mov	r3, r1
   10fd6:	f88d 3003 	strb.w	r3, [sp, #3]
   10fda:	4613      	mov	r3, r2
   10fdc:	f88d 3002 	strb.w	r3, [sp, #2]
   10fe0:	462b      	mov	r3, r5
   10fe2:	4619      	mov	r1, r3
   10fe4:	4816      	ldr	r0, [pc, #88]	; (11040 <Gpio::Gpio(unsigned char, unsigned char)+0x74>)
   10fe6:	f005 f96f 	bl	162c8 <__cyg_profile_func_enter>
      : interupt_port_(false),
        pin_(&lpc40xx_pin_),
        lpc40xx_pin_(port_number, pin_number)
   10fea:	9b01      	ldr	r3, [sp, #4]
   10fec:	4618      	mov	r0, r3
   10fee:	f7ff ffd3 	bl	10f98 <GpioInterface::GpioInterface()>
   10ff2:	4a14      	ldr	r2, [pc, #80]	; (11044 <Gpio::Gpio(unsigned char, unsigned char)+0x78>)
   10ff4:	9b01      	ldr	r3, [sp, #4]
   10ff6:	601a      	str	r2, [r3, #0]
   10ff8:	9b01      	ldr	r3, [sp, #4]
   10ffa:	2200      	movs	r2, #0
   10ffc:	711a      	strb	r2, [r3, #4]
   10ffe:	9b01      	ldr	r3, [sp, #4]
   11000:	f103 020c 	add.w	r2, r3, #12
   11004:	9b01      	ldr	r3, [sp, #4]
   11006:	609a      	str	r2, [r3, #8]
   11008:	9b01      	ldr	r3, [sp, #4]
   1100a:	330c      	adds	r3, #12
   1100c:	f89d 2002 	ldrb.w	r2, [sp, #2]
   11010:	f89d 1003 	ldrb.w	r1, [sp, #3]
   11014:	4618      	mov	r0, r3
   11016:	f7ff fb43 	bl	106a0 <Pin::Pin(unsigned char, unsigned char)>
  {
    interupt_port_ = (port_number == 2) ? 1 : 0;
   1101a:	f89d 3003 	ldrb.w	r3, [sp, #3]
   1101e:	2b02      	cmp	r3, #2
   11020:	d101      	bne.n	11026 <Gpio::Gpio(unsigned char, unsigned char)+0x5a>
   11022:	2201      	movs	r2, #1
   11024:	e000      	b.n	11028 <Gpio::Gpio(unsigned char, unsigned char)+0x5c>
   11026:	2200      	movs	r2, #0
   11028:	9b01      	ldr	r3, [sp, #4]
   1102a:	711a      	strb	r2, [r3, #4]
  }
   1102c:	9c01      	ldr	r4, [sp, #4]
   1102e:	462b      	mov	r3, r5
   11030:	4619      	mov	r1, r3
   11032:	4803      	ldr	r0, [pc, #12]	; (11040 <Gpio::Gpio(unsigned char, unsigned char)+0x74>)
   11034:	f005 f95c 	bl	162f0 <__cyg_profile_func_exit>
   11038:	4623      	mov	r3, r4
   1103a:	4618      	mov	r0, r3
   1103c:	b003      	add	sp, #12
   1103e:	bd30      	pop	{r4, r5, pc}
   11040:	00010fcd 	.word	0x00010fcd
   11044:	00019ae0 	.word	0x00019ae0

00011048 <Gpio::SetAsInput()>:
      : interupt_port_(false), pin_(pin), lpc40xx_pin_(Pin::CreateInactivePin())
  {
    interupt_port_ = pin_->GetPort();
  }
  // Sets the GPIO pin direction as input
  void SetAsInput(void) override
   11048:	b530      	push	{r4, r5, lr}
   1104a:	b083      	sub	sp, #12
   1104c:	4675      	mov	r5, lr
   1104e:	9001      	str	r0, [sp, #4]
   11050:	462b      	mov	r3, r5
   11052:	4619      	mov	r1, r3
   11054:	4819      	ldr	r0, [pc, #100]	; (110bc <Gpio::SetAsInput()+0x74>)
   11056:	f005 f937 	bl	162c8 <__cyg_profile_func_enter>
  {
    pin_->SetPinFunction(kGpioFunction);
   1105a:	9b01      	ldr	r3, [sp, #4]
   1105c:	689a      	ldr	r2, [r3, #8]
   1105e:	9b01      	ldr	r3, [sp, #4]
   11060:	689b      	ldr	r3, [r3, #8]
   11062:	681b      	ldr	r3, [r3, #0]
   11064:	681b      	ldr	r3, [r3, #0]
   11066:	2100      	movs	r1, #0
   11068:	4610      	mov	r0, r2
   1106a:	4798      	blx	r3
    gpio_port[pin_->GetPort()]->DIR &= ~(1 << pin_->GetPin());
   1106c:	9b01      	ldr	r3, [sp, #4]
   1106e:	689a      	ldr	r2, [r3, #8]
   11070:	9b01      	ldr	r3, [sp, #4]
   11072:	689b      	ldr	r3, [r3, #8]
   11074:	681b      	ldr	r3, [r3, #0]
   11076:	3330      	adds	r3, #48	; 0x30
   11078:	681b      	ldr	r3, [r3, #0]
   1107a:	4610      	mov	r0, r2
   1107c:	4798      	blx	r3
   1107e:	4603      	mov	r3, r0
   11080:	461a      	mov	r2, r3
   11082:	2301      	movs	r3, #1
   11084:	4093      	lsls	r3, r2
   11086:	43dc      	mvns	r4, r3
   11088:	9b01      	ldr	r3, [sp, #4]
   1108a:	689a      	ldr	r2, [r3, #8]
   1108c:	9b01      	ldr	r3, [sp, #4]
   1108e:	689b      	ldr	r3, [r3, #8]
   11090:	681b      	ldr	r3, [r3, #0]
   11092:	332c      	adds	r3, #44	; 0x2c
   11094:	681b      	ldr	r3, [r3, #0]
   11096:	4610      	mov	r0, r2
   11098:	4798      	blx	r3
   1109a:	4603      	mov	r3, r0
   1109c:	461a      	mov	r2, r3
   1109e:	4b08      	ldr	r3, [pc, #32]	; (110c0 <Gpio::SetAsInput()+0x78>)
   110a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   110a4:	681a      	ldr	r2, [r3, #0]
   110a6:	4621      	mov	r1, r4
   110a8:	400a      	ands	r2, r1
   110aa:	601a      	str	r2, [r3, #0]
   110ac:	462b      	mov	r3, r5
   110ae:	4619      	mov	r1, r3
   110b0:	4802      	ldr	r0, [pc, #8]	; (110bc <Gpio::SetAsInput()+0x74>)
   110b2:	f005 f91d 	bl	162f0 <__cyg_profile_func_exit>
  }
   110b6:	bf00      	nop
   110b8:	b003      	add	sp, #12
   110ba:	bd30      	pop	{r4, r5, pc}
   110bc:	00011049 	.word	0x00011049
   110c0:	10000020 	.word	0x10000020

000110c4 <Gpio::SetAsOutput()>:
  // Sets the GPIO pin direction as output
  void SetAsOutput(void) override
   110c4:	b530      	push	{r4, r5, lr}
   110c6:	b083      	sub	sp, #12
   110c8:	4675      	mov	r5, lr
   110ca:	9001      	str	r0, [sp, #4]
   110cc:	462b      	mov	r3, r5
   110ce:	4619      	mov	r1, r3
   110d0:	4819      	ldr	r0, [pc, #100]	; (11138 <Gpio::SetAsOutput()+0x74>)
   110d2:	f005 f8f9 	bl	162c8 <__cyg_profile_func_enter>
  {
    pin_->SetPinFunction(kGpioFunction);
   110d6:	9b01      	ldr	r3, [sp, #4]
   110d8:	689a      	ldr	r2, [r3, #8]
   110da:	9b01      	ldr	r3, [sp, #4]
   110dc:	689b      	ldr	r3, [r3, #8]
   110de:	681b      	ldr	r3, [r3, #0]
   110e0:	681b      	ldr	r3, [r3, #0]
   110e2:	2100      	movs	r1, #0
   110e4:	4610      	mov	r0, r2
   110e6:	4798      	blx	r3
    gpio_port[pin_->GetPort()]->DIR |= (1 << pin_->GetPin());
   110e8:	9b01      	ldr	r3, [sp, #4]
   110ea:	689a      	ldr	r2, [r3, #8]
   110ec:	9b01      	ldr	r3, [sp, #4]
   110ee:	689b      	ldr	r3, [r3, #8]
   110f0:	681b      	ldr	r3, [r3, #0]
   110f2:	3330      	adds	r3, #48	; 0x30
   110f4:	681b      	ldr	r3, [r3, #0]
   110f6:	4610      	mov	r0, r2
   110f8:	4798      	blx	r3
   110fa:	4603      	mov	r3, r0
   110fc:	461a      	mov	r2, r3
   110fe:	2301      	movs	r3, #1
   11100:	fa03 f402 	lsl.w	r4, r3, r2
   11104:	9b01      	ldr	r3, [sp, #4]
   11106:	689a      	ldr	r2, [r3, #8]
   11108:	9b01      	ldr	r3, [sp, #4]
   1110a:	689b      	ldr	r3, [r3, #8]
   1110c:	681b      	ldr	r3, [r3, #0]
   1110e:	332c      	adds	r3, #44	; 0x2c
   11110:	681b      	ldr	r3, [r3, #0]
   11112:	4610      	mov	r0, r2
   11114:	4798      	blx	r3
   11116:	4603      	mov	r3, r0
   11118:	461a      	mov	r2, r3
   1111a:	4b08      	ldr	r3, [pc, #32]	; (1113c <Gpio::SetAsOutput()+0x78>)
   1111c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   11120:	681a      	ldr	r2, [r3, #0]
   11122:	4621      	mov	r1, r4
   11124:	430a      	orrs	r2, r1
   11126:	601a      	str	r2, [r3, #0]
   11128:	462b      	mov	r3, r5
   1112a:	4619      	mov	r1, r3
   1112c:	4802      	ldr	r0, [pc, #8]	; (11138 <Gpio::SetAsOutput()+0x74>)
   1112e:	f005 f8df 	bl	162f0 <__cyg_profile_func_exit>
  }
   11132:	bf00      	nop
   11134:	b003      	add	sp, #12
   11136:	bd30      	pop	{r4, r5, pc}
   11138:	000110c5 	.word	0x000110c5
   1113c:	10000020 	.word	0x10000020

00011140 <Gpio::SetDirection(GpioInterface::Direction)>:
  // Sets the GPIO pin direction as output or input depending on the
  // Direction enum parameter
  inline void SetDirection(Direction direction) override
   11140:	b510      	push	{r4, lr}
   11142:	b082      	sub	sp, #8
   11144:	4674      	mov	r4, lr
   11146:	9001      	str	r0, [sp, #4]
   11148:	460b      	mov	r3, r1
   1114a:	f88d 3003 	strb.w	r3, [sp, #3]
   1114e:	4623      	mov	r3, r4
   11150:	4619      	mov	r1, r3
   11152:	480b      	ldr	r0, [pc, #44]	; (11180 <Gpio::SetDirection(GpioInterface::Direction)+0x40>)
   11154:	f005 f8b8 	bl	162c8 <__cyg_profile_func_enter>
  {
    (direction) ? SetAsOutput() : SetAsInput();
   11158:	f89d 3003 	ldrb.w	r3, [sp, #3]
   1115c:	2b00      	cmp	r3, #0
   1115e:	d003      	beq.n	11168 <Gpio::SetDirection(GpioInterface::Direction)+0x28>
   11160:	9801      	ldr	r0, [sp, #4]
   11162:	f7ff ffaf 	bl	110c4 <Gpio::SetAsOutput()>
   11166:	e002      	b.n	1116e <Gpio::SetDirection(GpioInterface::Direction)+0x2e>
   11168:	9801      	ldr	r0, [sp, #4]
   1116a:	f7ff ff6d 	bl	11048 <Gpio::SetAsInput()>
   1116e:	4623      	mov	r3, r4
   11170:	4619      	mov	r1, r3
   11172:	4803      	ldr	r0, [pc, #12]	; (11180 <Gpio::SetDirection(GpioInterface::Direction)+0x40>)
   11174:	f005 f8bc 	bl	162f0 <__cyg_profile_func_exit>
  }
   11178:	bf00      	nop
   1117a:	b002      	add	sp, #8
   1117c:	bd10      	pop	{r4, pc}
   1117e:	bf00      	nop
   11180:	00011141 	.word	0x00011141

00011184 <Gpio::SetHigh()>:
  // Sets the GPIO output pin to high
  void SetHigh(void) override
   11184:	b530      	push	{r4, r5, lr}
   11186:	b083      	sub	sp, #12
   11188:	4675      	mov	r5, lr
   1118a:	9001      	str	r0, [sp, #4]
   1118c:	462b      	mov	r3, r5
   1118e:	4619      	mov	r1, r3
   11190:	4813      	ldr	r0, [pc, #76]	; (111e0 <Gpio::SetHigh()+0x5c>)
   11192:	f005 f899 	bl	162c8 <__cyg_profile_func_enter>
  {
    gpio_port[pin_->GetPort()]->SET = (1 << pin_->GetPin());
   11196:	9b01      	ldr	r3, [sp, #4]
   11198:	689a      	ldr	r2, [r3, #8]
   1119a:	9b01      	ldr	r3, [sp, #4]
   1119c:	689b      	ldr	r3, [r3, #8]
   1119e:	681b      	ldr	r3, [r3, #0]
   111a0:	3330      	adds	r3, #48	; 0x30
   111a2:	681b      	ldr	r3, [r3, #0]
   111a4:	4610      	mov	r0, r2
   111a6:	4798      	blx	r3
   111a8:	4603      	mov	r3, r0
   111aa:	461a      	mov	r2, r3
   111ac:	2301      	movs	r3, #1
   111ae:	4093      	lsls	r3, r2
   111b0:	461c      	mov	r4, r3
   111b2:	9b01      	ldr	r3, [sp, #4]
   111b4:	689a      	ldr	r2, [r3, #8]
   111b6:	9b01      	ldr	r3, [sp, #4]
   111b8:	689b      	ldr	r3, [r3, #8]
   111ba:	681b      	ldr	r3, [r3, #0]
   111bc:	332c      	adds	r3, #44	; 0x2c
   111be:	681b      	ldr	r3, [r3, #0]
   111c0:	4610      	mov	r0, r2
   111c2:	4798      	blx	r3
   111c4:	4603      	mov	r3, r0
   111c6:	461a      	mov	r2, r3
   111c8:	4b06      	ldr	r3, [pc, #24]	; (111e4 <Gpio::SetHigh()+0x60>)
   111ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   111ce:	619c      	str	r4, [r3, #24]
   111d0:	462b      	mov	r3, r5
   111d2:	4619      	mov	r1, r3
   111d4:	4802      	ldr	r0, [pc, #8]	; (111e0 <Gpio::SetHigh()+0x5c>)
   111d6:	f005 f88b 	bl	162f0 <__cyg_profile_func_exit>
  }
   111da:	bf00      	nop
   111dc:	b003      	add	sp, #12
   111de:	bd30      	pop	{r4, r5, pc}
   111e0:	00011185 	.word	0x00011185
   111e4:	10000020 	.word	0x10000020

000111e8 <Gpio::SetLow()>:
  // Sets the GPIO output pin to low
  void SetLow(void) override
   111e8:	b530      	push	{r4, r5, lr}
   111ea:	b083      	sub	sp, #12
   111ec:	4675      	mov	r5, lr
   111ee:	9001      	str	r0, [sp, #4]
   111f0:	462b      	mov	r3, r5
   111f2:	4619      	mov	r1, r3
   111f4:	4813      	ldr	r0, [pc, #76]	; (11244 <Gpio::SetLow()+0x5c>)
   111f6:	f005 f867 	bl	162c8 <__cyg_profile_func_enter>
  {
    gpio_port[pin_->GetPort()]->CLR = (1 << pin_->GetPin());
   111fa:	9b01      	ldr	r3, [sp, #4]
   111fc:	689a      	ldr	r2, [r3, #8]
   111fe:	9b01      	ldr	r3, [sp, #4]
   11200:	689b      	ldr	r3, [r3, #8]
   11202:	681b      	ldr	r3, [r3, #0]
   11204:	3330      	adds	r3, #48	; 0x30
   11206:	681b      	ldr	r3, [r3, #0]
   11208:	4610      	mov	r0, r2
   1120a:	4798      	blx	r3
   1120c:	4603      	mov	r3, r0
   1120e:	461a      	mov	r2, r3
   11210:	2301      	movs	r3, #1
   11212:	4093      	lsls	r3, r2
   11214:	461c      	mov	r4, r3
   11216:	9b01      	ldr	r3, [sp, #4]
   11218:	689a      	ldr	r2, [r3, #8]
   1121a:	9b01      	ldr	r3, [sp, #4]
   1121c:	689b      	ldr	r3, [r3, #8]
   1121e:	681b      	ldr	r3, [r3, #0]
   11220:	332c      	adds	r3, #44	; 0x2c
   11222:	681b      	ldr	r3, [r3, #0]
   11224:	4610      	mov	r0, r2
   11226:	4798      	blx	r3
   11228:	4603      	mov	r3, r0
   1122a:	461a      	mov	r2, r3
   1122c:	4b06      	ldr	r3, [pc, #24]	; (11248 <Gpio::SetLow()+0x60>)
   1122e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   11232:	61dc      	str	r4, [r3, #28]
   11234:	462b      	mov	r3, r5
   11236:	4619      	mov	r1, r3
   11238:	4802      	ldr	r0, [pc, #8]	; (11244 <Gpio::SetLow()+0x5c>)
   1123a:	f005 f859 	bl	162f0 <__cyg_profile_func_exit>
  }
   1123e:	bf00      	nop
   11240:	b003      	add	sp, #12
   11242:	bd30      	pop	{r4, r5, pc}
   11244:	000111e9 	.word	0x000111e9
   11248:	10000020 	.word	0x10000020

0001124c <Gpio::Set(GpioInterface::State)>:
  // Sets the GPIO output pin to high or low depending on the State enum
  // parameter
  void Set(State output = kHigh) override
   1124c:	b510      	push	{r4, lr}
   1124e:	b082      	sub	sp, #8
   11250:	4674      	mov	r4, lr
   11252:	9001      	str	r0, [sp, #4]
   11254:	460b      	mov	r3, r1
   11256:	f88d 3003 	strb.w	r3, [sp, #3]
   1125a:	4623      	mov	r3, r4
   1125c:	4619      	mov	r1, r3
   1125e:	480b      	ldr	r0, [pc, #44]	; (1128c <Gpio::Set(GpioInterface::State)+0x40>)
   11260:	f005 f832 	bl	162c8 <__cyg_profile_func_enter>
  {
    (output) ? SetHigh() : SetLow();
   11264:	f89d 3003 	ldrb.w	r3, [sp, #3]
   11268:	2b00      	cmp	r3, #0
   1126a:	d003      	beq.n	11274 <Gpio::Set(GpioInterface::State)+0x28>
   1126c:	9801      	ldr	r0, [sp, #4]
   1126e:	f7ff ff89 	bl	11184 <Gpio::SetHigh()>
   11272:	e002      	b.n	1127a <Gpio::Set(GpioInterface::State)+0x2e>
   11274:	9801      	ldr	r0, [sp, #4]
   11276:	f7ff ffb7 	bl	111e8 <Gpio::SetLow()>
   1127a:	4623      	mov	r3, r4
   1127c:	4619      	mov	r1, r3
   1127e:	4803      	ldr	r0, [pc, #12]	; (1128c <Gpio::Set(GpioInterface::State)+0x40>)
   11280:	f005 f836 	bl	162f0 <__cyg_profile_func_exit>
  }
   11284:	bf00      	nop
   11286:	b002      	add	sp, #8
   11288:	bd10      	pop	{r4, pc}
   1128a:	bf00      	nop
   1128c:	0001124d 	.word	0x0001124d

00011290 <Gpio::Toggle()>:
  // Toggle the output of a GPIO output pin
  void Toggle() override
   11290:	b530      	push	{r4, r5, lr}
   11292:	b083      	sub	sp, #12
   11294:	4675      	mov	r5, lr
   11296:	9001      	str	r0, [sp, #4]
   11298:	462b      	mov	r3, r5
   1129a:	4619      	mov	r1, r3
   1129c:	4815      	ldr	r0, [pc, #84]	; (112f4 <Gpio::Toggle()+0x64>)
   1129e:	f005 f813 	bl	162c8 <__cyg_profile_func_enter>
  {
    gpio_port[pin_->GetPort()]->PIN ^= (1 << pin_->GetPin());
   112a2:	9b01      	ldr	r3, [sp, #4]
   112a4:	689a      	ldr	r2, [r3, #8]
   112a6:	9b01      	ldr	r3, [sp, #4]
   112a8:	689b      	ldr	r3, [r3, #8]
   112aa:	681b      	ldr	r3, [r3, #0]
   112ac:	3330      	adds	r3, #48	; 0x30
   112ae:	681b      	ldr	r3, [r3, #0]
   112b0:	4610      	mov	r0, r2
   112b2:	4798      	blx	r3
   112b4:	4603      	mov	r3, r0
   112b6:	461a      	mov	r2, r3
   112b8:	2301      	movs	r3, #1
   112ba:	fa03 f402 	lsl.w	r4, r3, r2
   112be:	9b01      	ldr	r3, [sp, #4]
   112c0:	689a      	ldr	r2, [r3, #8]
   112c2:	9b01      	ldr	r3, [sp, #4]
   112c4:	689b      	ldr	r3, [r3, #8]
   112c6:	681b      	ldr	r3, [r3, #0]
   112c8:	332c      	adds	r3, #44	; 0x2c
   112ca:	681b      	ldr	r3, [r3, #0]
   112cc:	4610      	mov	r0, r2
   112ce:	4798      	blx	r3
   112d0:	4603      	mov	r3, r0
   112d2:	461a      	mov	r2, r3
   112d4:	4b08      	ldr	r3, [pc, #32]	; (112f8 <Gpio::Toggle()+0x68>)
   112d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   112da:	695a      	ldr	r2, [r3, #20]
   112dc:	4621      	mov	r1, r4
   112de:	404a      	eors	r2, r1
   112e0:	615a      	str	r2, [r3, #20]
   112e2:	462b      	mov	r3, r5
   112e4:	4619      	mov	r1, r3
   112e6:	4803      	ldr	r0, [pc, #12]	; (112f4 <Gpio::Toggle()+0x64>)
   112e8:	f005 f802 	bl	162f0 <__cyg_profile_func_exit>
  }
   112ec:	bf00      	nop
   112ee:	b003      	add	sp, #12
   112f0:	bd30      	pop	{r4, r5, pc}
   112f2:	bf00      	nop
   112f4:	00011291 	.word	0x00011291
   112f8:	10000020 	.word	0x10000020

000112fc <Gpio::ReadState()>:
  // Returns the current State state of the pin
  State ReadState(void) override
   112fc:	b530      	push	{r4, r5, lr}
   112fe:	b085      	sub	sp, #20
   11300:	4675      	mov	r5, lr
   11302:	9001      	str	r0, [sp, #4]
   11304:	462b      	mov	r3, r5
   11306:	4619      	mov	r1, r3
   11308:	4818      	ldr	r0, [pc, #96]	; (1136c <Gpio::ReadState()+0x70>)
   1130a:	f004 ffdd 	bl	162c8 <__cyg_profile_func_enter>
  {
    bool state = (gpio_port[pin_->GetPort()]->PIN >> pin_->GetPin()) & 1;
   1130e:	9b01      	ldr	r3, [sp, #4]
   11310:	689a      	ldr	r2, [r3, #8]
   11312:	9b01      	ldr	r3, [sp, #4]
   11314:	689b      	ldr	r3, [r3, #8]
   11316:	681b      	ldr	r3, [r3, #0]
   11318:	332c      	adds	r3, #44	; 0x2c
   1131a:	681b      	ldr	r3, [r3, #0]
   1131c:	4610      	mov	r0, r2
   1131e:	4798      	blx	r3
   11320:	4603      	mov	r3, r0
   11322:	461a      	mov	r2, r3
   11324:	4b12      	ldr	r3, [pc, #72]	; (11370 <Gpio::ReadState()+0x74>)
   11326:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   1132a:	695c      	ldr	r4, [r3, #20]
   1132c:	9b01      	ldr	r3, [sp, #4]
   1132e:	689a      	ldr	r2, [r3, #8]
   11330:	9b01      	ldr	r3, [sp, #4]
   11332:	689b      	ldr	r3, [r3, #8]
   11334:	681b      	ldr	r3, [r3, #0]
   11336:	3330      	adds	r3, #48	; 0x30
   11338:	681b      	ldr	r3, [r3, #0]
   1133a:	4610      	mov	r0, r2
   1133c:	4798      	blx	r3
   1133e:	4603      	mov	r3, r0
   11340:	fa24 f303 	lsr.w	r3, r4, r3
   11344:	f003 0301 	and.w	r3, r3, #1
   11348:	2b00      	cmp	r3, #0
   1134a:	bf14      	ite	ne
   1134c:	2301      	movne	r3, #1
   1134e:	2300      	moveq	r3, #0
   11350:	f88d 300f 	strb.w	r3, [sp, #15]
    return static_cast<State>(state);
   11354:	f89d 400f 	ldrb.w	r4, [sp, #15]
   11358:	462b      	mov	r3, r5
   1135a:	4619      	mov	r1, r3
   1135c:	4803      	ldr	r0, [pc, #12]	; (1136c <Gpio::ReadState()+0x70>)
   1135e:	f004 ffc7 	bl	162f0 <__cyg_profile_func_exit>
   11362:	4623      	mov	r3, r4
  }
   11364:	4618      	mov	r0, r3
   11366:	b005      	add	sp, #20
   11368:	bd30      	pop	{r4, r5, pc}
   1136a:	bf00      	nop
   1136c:	000112fd 	.word	0x000112fd
   11370:	10000020 	.word	0x10000020

00011374 <Gpio::Read()>:
  // Returns true if input or output pin is high
  bool Read(void) override
   11374:	b530      	push	{r4, r5, lr}
   11376:	b083      	sub	sp, #12
   11378:	4675      	mov	r5, lr
   1137a:	9001      	str	r0, [sp, #4]
   1137c:	462b      	mov	r3, r5
   1137e:	4619      	mov	r1, r3
   11380:	4816      	ldr	r0, [pc, #88]	; (113dc <Gpio::Read()+0x68>)
   11382:	f004 ffa1 	bl	162c8 <__cyg_profile_func_enter>
  {
    return (gpio_port[pin_->GetPort()]->PIN >> pin_->GetPin()) & 1;
   11386:	9b01      	ldr	r3, [sp, #4]
   11388:	689a      	ldr	r2, [r3, #8]
   1138a:	9b01      	ldr	r3, [sp, #4]
   1138c:	689b      	ldr	r3, [r3, #8]
   1138e:	681b      	ldr	r3, [r3, #0]
   11390:	332c      	adds	r3, #44	; 0x2c
   11392:	681b      	ldr	r3, [r3, #0]
   11394:	4610      	mov	r0, r2
   11396:	4798      	blx	r3
   11398:	4603      	mov	r3, r0
   1139a:	461a      	mov	r2, r3
   1139c:	4b10      	ldr	r3, [pc, #64]	; (113e0 <Gpio::Read()+0x6c>)
   1139e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   113a2:	695c      	ldr	r4, [r3, #20]
   113a4:	9b01      	ldr	r3, [sp, #4]
   113a6:	689a      	ldr	r2, [r3, #8]
   113a8:	9b01      	ldr	r3, [sp, #4]
   113aa:	689b      	ldr	r3, [r3, #8]
   113ac:	681b      	ldr	r3, [r3, #0]
   113ae:	3330      	adds	r3, #48	; 0x30
   113b0:	681b      	ldr	r3, [r3, #0]
   113b2:	4610      	mov	r0, r2
   113b4:	4798      	blx	r3
   113b6:	4603      	mov	r3, r0
   113b8:	fa24 f303 	lsr.w	r3, r4, r3
   113bc:	f003 0301 	and.w	r3, r3, #1
   113c0:	2b00      	cmp	r3, #0
   113c2:	bf14      	ite	ne
   113c4:	2301      	movne	r3, #1
   113c6:	2300      	moveq	r3, #0
   113c8:	b2dc      	uxtb	r4, r3
   113ca:	462b      	mov	r3, r5
   113cc:	4619      	mov	r1, r3
   113ce:	4803      	ldr	r0, [pc, #12]	; (113dc <Gpio::Read()+0x68>)
   113d0:	f004 ff8e 	bl	162f0 <__cyg_profile_func_exit>
   113d4:	4623      	mov	r3, r4
  }
   113d6:	4618      	mov	r0, r3
   113d8:	b003      	add	sp, #12
   113da:	bd30      	pop	{r4, r5, pc}
   113dc:	00011375 	.word	0x00011375
   113e0:	10000020 	.word	0x10000020

000113e4 <Gpio::GetPin()>:
  PinInterface & GetPin() override
   113e4:	b530      	push	{r4, r5, lr}
   113e6:	b083      	sub	sp, #12
   113e8:	4675      	mov	r5, lr
   113ea:	9001      	str	r0, [sp, #4]
   113ec:	462b      	mov	r3, r5
   113ee:	4619      	mov	r1, r3
   113f0:	4806      	ldr	r0, [pc, #24]	; (1140c <Gpio::GetPin()+0x28>)
   113f2:	f004 ff69 	bl	162c8 <__cyg_profile_func_enter>
  {
    return *pin_;
   113f6:	9b01      	ldr	r3, [sp, #4]
   113f8:	689c      	ldr	r4, [r3, #8]
   113fa:	462b      	mov	r3, r5
   113fc:	4619      	mov	r1, r3
   113fe:	4803      	ldr	r0, [pc, #12]	; (1140c <Gpio::GetPin()+0x28>)
   11400:	f004 ff76 	bl	162f0 <__cyg_profile_func_exit>
   11404:	4623      	mov	r3, r4
  }
   11406:	4618      	mov	r0, r3
   11408:	b003      	add	sp, #12
   1140a:	bd30      	pop	{r4, r5, pc}
   1140c:	000113e5 	.word	0x000113e5

00011410 <Gpio::ValidPortCheck()>:

  // Checks if the selected gpio port is valid for external interrupts.
  bool ValidPortCheck()
   11410:	b530      	push	{r4, r5, lr}
   11412:	b087      	sub	sp, #28
   11414:	4675      	mov	r5, lr
   11416:	9003      	str	r0, [sp, #12]
   11418:	462b      	mov	r3, r5
   1141a:	4619      	mov	r1, r3
   1141c:	4817      	ldr	r0, [pc, #92]	; (1147c <Gpio::ValidPortCheck()+0x6c>)
   1141e:	f004 ff53 	bl	162c8 <__cyg_profile_func_enter>
  {
    bool is_valid = (interupt_port_ <= 1);
   11422:	9b03      	ldr	r3, [sp, #12]
   11424:	791b      	ldrb	r3, [r3, #4]
   11426:	2b01      	cmp	r3, #1
   11428:	bf94      	ite	ls
   1142a:	2301      	movls	r3, #1
   1142c:	2300      	movhi	r3, #0
   1142e:	b2db      	uxtb	r3, r3
   11430:	f88d 3017 	strb.w	r3, [sp, #23]
    SJ2_ASSERT_WARNING(is_valid,
   11434:	f89d 3017 	ldrb.w	r3, [sp, #23]
   11438:	f083 0301 	eor.w	r3, r3, #1
   1143c:	b2db      	uxtb	r3, r3
   1143e:	2b00      	cmp	r3, #0
   11440:	d010      	beq.n	11464 <Gpio::ValidPortCheck()+0x54>
   11442:	9b03      	ldr	r3, [sp, #12]
   11444:	689a      	ldr	r2, [r3, #8]
   11446:	9b03      	ldr	r3, [sp, #12]
   11448:	689b      	ldr	r3, [r3, #8]
   1144a:	681b      	ldr	r3, [r3, #0]
   1144c:	332c      	adds	r3, #44	; 0x2c
   1144e:	681b      	ldr	r3, [r3, #0]
   11450:	4610      	mov	r0, r2
   11452:	4798      	blx	r3
   11454:	4603      	mov	r3, r0
   11456:	9300      	str	r3, [sp, #0]
   11458:	23a6      	movs	r3, #166	; 0xa6
   1145a:	4a09      	ldr	r2, [pc, #36]	; (11480 <Gpio::ValidPortCheck()+0x70>)
   1145c:	4909      	ldr	r1, [pc, #36]	; (11484 <Gpio::ValidPortCheck()+0x74>)
   1145e:	480a      	ldr	r0, [pc, #40]	; (11488 <Gpio::ValidPortCheck()+0x78>)
   11460:	f006 f9b2 	bl	177c8 <printf>
                       "Port %d cannot be used for External Interrupts. Need "
                       "to use GPIO on Port 0 or 2.",
                       pin_->GetPort());
    return is_valid;
   11464:	f89d 4017 	ldrb.w	r4, [sp, #23]
   11468:	462b      	mov	r3, r5
   1146a:	4619      	mov	r1, r3
   1146c:	4803      	ldr	r0, [pc, #12]	; (1147c <Gpio::ValidPortCheck()+0x6c>)
   1146e:	f004 ff3f 	bl	162f0 <__cyg_profile_func_exit>
   11472:	4623      	mov	r3, r4
  }
   11474:	4618      	mov	r0, r3
   11476:	b007      	add	sp, #28
   11478:	bd30      	pop	{r4, r5, pc}
   1147a:	bf00      	nop
   1147c:	00011411 	.word	0x00011411
   11480:	00019d7c 	.word	0x00019d7c
   11484:	00019894 	.word	0x00019894
   11488:	000191b8 	.word	0x000191b8

0001148c <Gpio::SetInterruptRoutine(void (*)())>:

  // Assigns the developer's ISR function to the port/pin gpio instance.
  void SetInterruptRoutine(IsrPointer function) override
   1148c:	b570      	push	{r4, r5, r6, lr}
   1148e:	b082      	sub	sp, #8
   11490:	4676      	mov	r6, lr
   11492:	9001      	str	r0, [sp, #4]
   11494:	9100      	str	r1, [sp, #0]
   11496:	4633      	mov	r3, r6
   11498:	4619      	mov	r1, r3
   1149a:	4811      	ldr	r0, [pc, #68]	; (114e0 <Gpio::SetInterruptRoutine(void (*)())+0x54>)
   1149c:	f004 ff14 	bl	162c8 <__cyg_profile_func_enter>
  {
    ValidPortCheck();
   114a0:	9801      	ldr	r0, [sp, #4]
   114a2:	f7ff ffb5 	bl	11410 <Gpio::ValidPortCheck()>
    interrupthandlers[interupt_port_][pin_->GetPin()] = function;
   114a6:	9c00      	ldr	r4, [sp, #0]
   114a8:	9b01      	ldr	r3, [sp, #4]
   114aa:	791b      	ldrb	r3, [r3, #4]
   114ac:	461d      	mov	r5, r3
   114ae:	9b01      	ldr	r3, [sp, #4]
   114b0:	689a      	ldr	r2, [r3, #8]
   114b2:	9b01      	ldr	r3, [sp, #4]
   114b4:	689b      	ldr	r3, [r3, #8]
   114b6:	681b      	ldr	r3, [r3, #0]
   114b8:	3330      	adds	r3, #48	; 0x30
   114ba:	681b      	ldr	r3, [r3, #0]
   114bc:	4610      	mov	r0, r2
   114be:	4798      	blx	r3
   114c0:	4603      	mov	r3, r0
   114c2:	4619      	mov	r1, r3
   114c4:	4a07      	ldr	r2, [pc, #28]	; (114e4 <Gpio::SetInterruptRoutine(void (*)())+0x58>)
   114c6:	016b      	lsls	r3, r5, #5
   114c8:	440b      	add	r3, r1
   114ca:	f842 4023 	str.w	r4, [r2, r3, lsl #2]
   114ce:	4633      	mov	r3, r6
   114d0:	4619      	mov	r1, r3
   114d2:	4803      	ldr	r0, [pc, #12]	; (114e0 <Gpio::SetInterruptRoutine(void (*)())+0x54>)
   114d4:	f004 ff0c 	bl	162f0 <__cyg_profile_func_exit>
  }
   114d8:	bf00      	nop
   114da:	b002      	add	sp, #8
   114dc:	bd70      	pop	{r4, r5, r6, pc}
   114de:	bf00      	nop
   114e0:	0001148d 	.word	0x0001148d
   114e4:	10000688 	.word	0x10000688

000114e8 <Gpio::ClearInterruptRoutine()>:

  // Clears the developers ISR function from the port/pin gio instance.
  void ClearInterruptRoutine() override
   114e8:	b530      	push	{r4, r5, lr}
   114ea:	b083      	sub	sp, #12
   114ec:	4675      	mov	r5, lr
   114ee:	9001      	str	r0, [sp, #4]
   114f0:	462b      	mov	r3, r5
   114f2:	4619      	mov	r1, r3
   114f4:	480f      	ldr	r0, [pc, #60]	; (11534 <Gpio::ClearInterruptRoutine()+0x4c>)
   114f6:	f004 fee7 	bl	162c8 <__cyg_profile_func_enter>
  {
    interrupthandlers[interupt_port_][pin_->GetPin()] = nullptr;
   114fa:	9b01      	ldr	r3, [sp, #4]
   114fc:	791b      	ldrb	r3, [r3, #4]
   114fe:	461c      	mov	r4, r3
   11500:	9b01      	ldr	r3, [sp, #4]
   11502:	689a      	ldr	r2, [r3, #8]
   11504:	9b01      	ldr	r3, [sp, #4]
   11506:	689b      	ldr	r3, [r3, #8]
   11508:	681b      	ldr	r3, [r3, #0]
   1150a:	3330      	adds	r3, #48	; 0x30
   1150c:	681b      	ldr	r3, [r3, #0]
   1150e:	4610      	mov	r0, r2
   11510:	4798      	blx	r3
   11512:	4603      	mov	r3, r0
   11514:	4619      	mov	r1, r3
   11516:	4a08      	ldr	r2, [pc, #32]	; (11538 <Gpio::ClearInterruptRoutine()+0x50>)
   11518:	0163      	lsls	r3, r4, #5
   1151a:	440b      	add	r3, r1
   1151c:	2100      	movs	r1, #0
   1151e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
   11522:	462b      	mov	r3, r5
   11524:	4619      	mov	r1, r3
   11526:	4803      	ldr	r0, [pc, #12]	; (11534 <Gpio::ClearInterruptRoutine()+0x4c>)
   11528:	f004 fee2 	bl	162f0 <__cyg_profile_func_exit>
  }
   1152c:	bf00      	nop
   1152e:	b003      	add	sp, #12
   11530:	bd30      	pop	{r4, r5, pc}
   11532:	bf00      	nop
   11534:	000114e9 	.word	0x000114e9
   11538:	10000688 	.word	0x10000688

0001153c <unsigned char util::Value<GpioInterface::Edge, unsigned char>(GpioInterface::Edge)>:
//
// @param enum_type_value variable you would like to get the value of.
// @return the value of the enum class type variable of with the underlying
//         type of the enum class.
template <typename Enum, typename Type = typename std::underlying_type_t<Enum>>
constexpr Type Value(Enum enum_type_value)
   1153c:	b530      	push	{r4, r5, lr}
   1153e:	b083      	sub	sp, #12
   11540:	4675      	mov	r5, lr
   11542:	4603      	mov	r3, r0
   11544:	f88d 3007 	strb.w	r3, [sp, #7]
   11548:	462b      	mov	r3, r5
   1154a:	4619      	mov	r1, r3
   1154c:	4806      	ldr	r0, [pc, #24]	; (11568 <unsigned char util::Value<GpioInterface::Edge, unsigned char>(GpioInterface::Edge)+0x2c>)
   1154e:	f004 febb 	bl	162c8 <__cyg_profile_func_enter>
{
  return static_cast<Type>(enum_type_value);
   11552:	f89d 4007 	ldrb.w	r4, [sp, #7]
   11556:	462b      	mov	r3, r5
   11558:	4619      	mov	r1, r3
   1155a:	4803      	ldr	r0, [pc, #12]	; (11568 <unsigned char util::Value<GpioInterface::Edge, unsigned char>(GpioInterface::Edge)+0x2c>)
   1155c:	f004 fec8 	bl	162f0 <__cyg_profile_func_exit>
   11560:	4623      	mov	r3, r4
}
   11562:	4618      	mov	r0, r3
   11564:	b003      	add	sp, #12
   11566:	bd30      	pop	{r4, r5, pc}
   11568:	0001153d 	.word	0x0001153d

0001156c <Gpio::SetInterruptEdge(GpioInterface::Edge)>:

  // Sets the selected edge that the gpio interrupt will be triggered on.
  void SetInterruptEdge(Edge edge) override
   1156c:	b510      	push	{r4, lr}
   1156e:	b084      	sub	sp, #16
   11570:	4674      	mov	r4, lr
   11572:	9003      	str	r0, [sp, #12]
   11574:	460b      	mov	r3, r1
   11576:	f88d 300b 	strb.w	r3, [sp, #11]
   1157a:	4623      	mov	r3, r4
   1157c:	4619      	mov	r1, r3
   1157e:	4819      	ldr	r0, [pc, #100]	; (115e4 <Gpio::SetInterruptEdge(GpioInterface::Edge)+0x78>)
   11580:	f004 fea2 	bl	162c8 <__cyg_profile_func_enter>
  {
    ValidPortCheck();
   11584:	9803      	ldr	r0, [sp, #12]
   11586:	f7ff ff43 	bl	11410 <Gpio::ValidPortCheck()>
    switch (edge)
   1158a:	f89d 300b 	ldrb.w	r3, [sp, #11]
   1158e:	2b01      	cmp	r3, #1
   11590:	d008      	beq.n	115a4 <Gpio::SetInterruptEdge(GpioInterface::Edge)+0x38>
   11592:	2b01      	cmp	r3, #1
   11594:	d302      	bcc.n	1159c <Gpio::SetInterruptEdge(GpioInterface::Edge)+0x30>
   11596:	2b02      	cmp	r3, #2
   11598:	d008      	beq.n	115ac <Gpio::SetInterruptEdge(GpioInterface::Edge)+0x40>
   1159a:	e00e      	b.n	115ba <Gpio::SetInterruptEdge(GpioInterface::Edge)+0x4e>
    {
      case Edge::kEdgeRising:
      {
        SetEdgeRising();
   1159c:	9803      	ldr	r0, [sp, #12]
   1159e:	f000 f8b1 	bl	11704 <Gpio::SetEdgeRising()>
        break;
   115a2:	e017      	b.n	115d4 <Gpio::SetInterruptEdge(GpioInterface::Edge)+0x68>
      }
      case Edge::kEdgeFalling:
      {
        SetEdgeFalling();
   115a4:	9803      	ldr	r0, [sp, #12]
   115a6:	f000 f8eb 	bl	11780 <Gpio::SetEdgeFalling()>
        break;
   115aa:	e013      	b.n	115d4 <Gpio::SetInterruptEdge(GpioInterface::Edge)+0x68>
      }
      case Edge::kEdgeBoth:
      {
        SetEdgeRising();
   115ac:	9803      	ldr	r0, [sp, #12]
   115ae:	f000 f8a9 	bl	11704 <Gpio::SetEdgeRising()>
        SetEdgeFalling();
   115b2:	9803      	ldr	r0, [sp, #12]
   115b4:	f000 f8e4 	bl	11780 <Gpio::SetEdgeFalling()>
        break;
   115b8:	e00c      	b.n	115d4 <Gpio::SetInterruptEdge(GpioInterface::Edge)+0x68>
      }
      default:
      {
        LOG_WARNING(
   115ba:	f89d 300b 	ldrb.w	r3, [sp, #11]
   115be:	4618      	mov	r0, r3
   115c0:	f7ff ffbc 	bl	1153c <unsigned char util::Value<GpioInterface::Edge, unsigned char>(GpioInterface::Edge)>
   115c4:	4603      	mov	r3, r0
   115c6:	9300      	str	r3, [sp, #0]
   115c8:	23d2      	movs	r3, #210	; 0xd2
   115ca:	4a07      	ldr	r2, [pc, #28]	; (115e8 <Gpio::SetInterruptEdge(GpioInterface::Edge)+0x7c>)
   115cc:	4907      	ldr	r1, [pc, #28]	; (115ec <Gpio::SetInterruptEdge(GpioInterface::Edge)+0x80>)
   115ce:	4808      	ldr	r0, [pc, #32]	; (115f0 <Gpio::SetInterruptEdge(GpioInterface::Edge)+0x84>)
   115d0:	f006 f8fa 	bl	177c8 <printf>
   115d4:	4623      	mov	r3, r4
   115d6:	4619      	mov	r1, r3
   115d8:	4802      	ldr	r0, [pc, #8]	; (115e4 <Gpio::SetInterruptEdge(GpioInterface::Edge)+0x78>)
   115da:	f004 fe89 	bl	162f0 <__cyg_profile_func_exit>
            "Edge %d cannot be used for External Interrupts."
            "Need to use a rising, falling, or both configuration.",
            util::Value(edge));
      }
    }
  }
   115de:	bf00      	nop
   115e0:	b004      	add	sp, #16
   115e2:	bd10      	pop	{r4, pc}
   115e4:	0001156d 	.word	0x0001156d
   115e8:	00019d98 	.word	0x00019d98
   115ec:	000198a0 	.word	0x000198a0
   115f0:	00019248 	.word	0x00019248

000115f4 <Gpio::ClearInterruptEdge(GpioInterface::Edge)>:

  // Clears the seleted edge of the gpio interrupt from being triggered.
  void ClearInterruptEdge(Edge edge) override
   115f4:	b510      	push	{r4, lr}
   115f6:	b084      	sub	sp, #16
   115f8:	4674      	mov	r4, lr
   115fa:	9003      	str	r0, [sp, #12]
   115fc:	460b      	mov	r3, r1
   115fe:	f88d 300b 	strb.w	r3, [sp, #11]
   11602:	4623      	mov	r3, r4
   11604:	4619      	mov	r1, r3
   11606:	4819      	ldr	r0, [pc, #100]	; (1166c <Gpio::ClearInterruptEdge(GpioInterface::Edge)+0x78>)
   11608:	f004 fe5e 	bl	162c8 <__cyg_profile_func_enter>
  {
    ValidPortCheck();
   1160c:	9803      	ldr	r0, [sp, #12]
   1160e:	f7ff feff 	bl	11410 <Gpio::ValidPortCheck()>
    switch (edge)
   11612:	f89d 300b 	ldrb.w	r3, [sp, #11]
   11616:	2b01      	cmp	r3, #1
   11618:	d008      	beq.n	1162c <Gpio::ClearInterruptEdge(GpioInterface::Edge)+0x38>
   1161a:	2b01      	cmp	r3, #1
   1161c:	d302      	bcc.n	11624 <Gpio::ClearInterruptEdge(GpioInterface::Edge)+0x30>
   1161e:	2b02      	cmp	r3, #2
   11620:	d008      	beq.n	11634 <Gpio::ClearInterruptEdge(GpioInterface::Edge)+0x40>
   11622:	e00e      	b.n	11642 <Gpio::ClearInterruptEdge(GpioInterface::Edge)+0x4e>
    {
      case Edge::kEdgeRising:
      {
        ClearEdgeRising();
   11624:	9803      	ldr	r0, [sp, #12]
   11626:	f000 f8e9 	bl	117fc <Gpio::ClearEdgeRising()>
        break;
   1162a:	e017      	b.n	1165c <Gpio::ClearInterruptEdge(GpioInterface::Edge)+0x68>
      }
      case Edge::kEdgeFalling:
      {
        ClearEdgeFalling();
   1162c:	9803      	ldr	r0, [sp, #12]
   1162e:	f000 f923 	bl	11878 <Gpio::ClearEdgeFalling()>
        break;
   11632:	e013      	b.n	1165c <Gpio::ClearInterruptEdge(GpioInterface::Edge)+0x68>
      }
      case Edge::kEdgeBoth:
      {
        ClearEdgeRising();
   11634:	9803      	ldr	r0, [sp, #12]
   11636:	f000 f8e1 	bl	117fc <Gpio::ClearEdgeRising()>
        ClearEdgeFalling();
   1163a:	9803      	ldr	r0, [sp, #12]
   1163c:	f000 f91c 	bl	11878 <Gpio::ClearEdgeFalling()>
        break;
   11640:	e00c      	b.n	1165c <Gpio::ClearInterruptEdge(GpioInterface::Edge)+0x68>
      }
      default:
      {
        LOG_WARNING(
   11642:	f89d 300b 	ldrb.w	r3, [sp, #11]
   11646:	4618      	mov	r0, r3
   11648:	f7ff ff78 	bl	1153c <unsigned char util::Value<GpioInterface::Edge, unsigned char>(GpioInterface::Edge)>
   1164c:	4603      	mov	r3, r0
   1164e:	9300      	str	r3, [sp, #0]
   11650:	23f2      	movs	r3, #242	; 0xf2
   11652:	4a07      	ldr	r2, [pc, #28]	; (11670 <Gpio::ClearInterruptEdge(GpioInterface::Edge)+0x7c>)
   11654:	4907      	ldr	r1, [pc, #28]	; (11674 <Gpio::ClearInterruptEdge(GpioInterface::Edge)+0x80>)
   11656:	4808      	ldr	r0, [pc, #32]	; (11678 <Gpio::ClearInterruptEdge(GpioInterface::Edge)+0x84>)
   11658:	f006 f8b6 	bl	177c8 <printf>
   1165c:	4623      	mov	r3, r4
   1165e:	4619      	mov	r1, r3
   11660:	4802      	ldr	r0, [pc, #8]	; (1166c <Gpio::ClearInterruptEdge(GpioInterface::Edge)+0x78>)
   11662:	f004 fe45 	bl	162f0 <__cyg_profile_func_exit>
            "Edge %d cannot be used for External Interrupts."
            "Need to use a rising, falling, or both configuration.",
           util::Value(edge));
      }
    }
  }
   11666:	bf00      	nop
   11668:	b004      	add	sp, #16
   1166a:	bd10      	pop	{r4, pc}
   1166c:	000115f5 	.word	0x000115f5
   11670:	00019d40 	.word	0x00019d40
   11674:	000198ac 	.word	0x000198ac
   11678:	00019248 	.word	0x00019248

0001167c <Gpio::AttachInterrupt(void (*)(), GpioInterface::Edge)>:

  // Assign the developer's ISR and sets the selected edge that the gpio
  // interrupt will be triggered on.
  void AttachInterrupt(IsrPointer function, Edge edge) override
   1167c:	b510      	push	{r4, lr}
   1167e:	b084      	sub	sp, #16
   11680:	4674      	mov	r4, lr
   11682:	9003      	str	r0, [sp, #12]
   11684:	9102      	str	r1, [sp, #8]
   11686:	4613      	mov	r3, r2
   11688:	f88d 3007 	strb.w	r3, [sp, #7]
   1168c:	4623      	mov	r3, r4
   1168e:	4619      	mov	r1, r3
   11690:	480b      	ldr	r0, [pc, #44]	; (116c0 <Gpio::AttachInterrupt(void (*)(), GpioInterface::Edge)+0x44>)
   11692:	f004 fe19 	bl	162c8 <__cyg_profile_func_enter>
  {
    ValidPortCheck();
   11696:	9803      	ldr	r0, [sp, #12]
   11698:	f7ff feba 	bl	11410 <Gpio::ValidPortCheck()>
    SetInterruptRoutine(function);
   1169c:	9902      	ldr	r1, [sp, #8]
   1169e:	9803      	ldr	r0, [sp, #12]
   116a0:	f7ff fef4 	bl	1148c <Gpio::SetInterruptRoutine(void (*)())>
    SetInterruptEdge(edge);
   116a4:	f89d 3007 	ldrb.w	r3, [sp, #7]
   116a8:	4619      	mov	r1, r3
   116aa:	9803      	ldr	r0, [sp, #12]
   116ac:	f7ff ff5e 	bl	1156c <Gpio::SetInterruptEdge(GpioInterface::Edge)>
   116b0:	4623      	mov	r3, r4
   116b2:	4619      	mov	r1, r3
   116b4:	4802      	ldr	r0, [pc, #8]	; (116c0 <Gpio::AttachInterrupt(void (*)(), GpioInterface::Edge)+0x44>)
   116b6:	f004 fe1b 	bl	162f0 <__cyg_profile_func_exit>
  }
   116ba:	bf00      	nop
   116bc:	b004      	add	sp, #16
   116be:	bd10      	pop	{r4, pc}
   116c0:	0001167d 	.word	0x0001167d

000116c4 <Gpio::DetachInterrupt()>:

  // Removes the developer's ISR and clears the selected edge of the gpio
  // interrupt from being triggered.
  void DetachInterrupt() override
   116c4:	b510      	push	{r4, lr}
   116c6:	b082      	sub	sp, #8
   116c8:	4674      	mov	r4, lr
   116ca:	9001      	str	r0, [sp, #4]
   116cc:	4623      	mov	r3, r4
   116ce:	4619      	mov	r1, r3
   116d0:	480b      	ldr	r0, [pc, #44]	; (11700 <Gpio::DetachInterrupt()+0x3c>)
   116d2:	f004 fdf9 	bl	162c8 <__cyg_profile_func_enter>
  {
    ValidPortCheck();
   116d6:	9801      	ldr	r0, [sp, #4]
   116d8:	f7ff fe9a 	bl	11410 <Gpio::ValidPortCheck()>
    ClearInterruptRoutine();
   116dc:	9801      	ldr	r0, [sp, #4]
   116de:	f7ff ff03 	bl	114e8 <Gpio::ClearInterruptRoutine()>
    ClearEdgeRising();
   116e2:	9801      	ldr	r0, [sp, #4]
   116e4:	f000 f88a 	bl	117fc <Gpio::ClearEdgeRising()>
    ClearEdgeFalling();
   116e8:	9801      	ldr	r0, [sp, #4]
   116ea:	f000 f8c5 	bl	11878 <Gpio::ClearEdgeFalling()>
   116ee:	4623      	mov	r3, r4
   116f0:	4619      	mov	r1, r3
   116f2:	4803      	ldr	r0, [pc, #12]	; (11700 <Gpio::DetachInterrupt()+0x3c>)
   116f4:	f004 fdfc 	bl	162f0 <__cyg_profile_func_exit>
  }
   116f8:	bf00      	nop
   116fa:	b002      	add	sp, #8
   116fc:	bd10      	pop	{r4, pc}
   116fe:	bf00      	nop
   11700:	000116c5 	.word	0x000116c5

00011704 <Gpio::SetEdgeRising()>:
    *interrupt[triggered_port].clear |= (1 << triggered_pin);
  }

 private:
  // Sets the gpio interrupt to trigger on a rising edge.
  void SetEdgeRising()
   11704:	b530      	push	{r4, r5, lr}
   11706:	b083      	sub	sp, #12
   11708:	4675      	mov	r5, lr
   1170a:	9001      	str	r0, [sp, #4]
   1170c:	462b      	mov	r3, r5
   1170e:	4619      	mov	r1, r3
   11710:	4819      	ldr	r0, [pc, #100]	; (11778 <Gpio::SetEdgeRising()+0x74>)
   11712:	f004 fdd9 	bl	162c8 <__cyg_profile_func_enter>
  {
    *interrupt[interupt_port_].enable_rising_edge |= (1 << pin_->GetPin());
   11716:	9b01      	ldr	r3, [sp, #4]
   11718:	689a      	ldr	r2, [r3, #8]
   1171a:	9b01      	ldr	r3, [sp, #4]
   1171c:	689b      	ldr	r3, [r3, #8]
   1171e:	681b      	ldr	r3, [r3, #0]
   11720:	3330      	adds	r3, #48	; 0x30
   11722:	681b      	ldr	r3, [r3, #0]
   11724:	4610      	mov	r0, r2
   11726:	4798      	blx	r3
   11728:	4603      	mov	r3, r0
   1172a:	461a      	mov	r2, r3
   1172c:	2301      	movs	r3, #1
   1172e:	fa03 f002 	lsl.w	r0, r3, r2
   11732:	9b01      	ldr	r3, [sp, #4]
   11734:	791b      	ldrb	r3, [r3, #4]
   11736:	4619      	mov	r1, r3
   11738:	4a10      	ldr	r2, [pc, #64]	; (1177c <Gpio::SetEdgeRising()+0x78>)
   1173a:	460b      	mov	r3, r1
   1173c:	009b      	lsls	r3, r3, #2
   1173e:	440b      	add	r3, r1
   11740:	009b      	lsls	r3, r3, #2
   11742:	4413      	add	r3, r2
   11744:	330c      	adds	r3, #12
   11746:	681b      	ldr	r3, [r3, #0]
   11748:	681a      	ldr	r2, [r3, #0]
   1174a:	4604      	mov	r4, r0
   1174c:	9b01      	ldr	r3, [sp, #4]
   1174e:	791b      	ldrb	r3, [r3, #4]
   11750:	4618      	mov	r0, r3
   11752:	490a      	ldr	r1, [pc, #40]	; (1177c <Gpio::SetEdgeRising()+0x78>)
   11754:	4603      	mov	r3, r0
   11756:	009b      	lsls	r3, r3, #2
   11758:	4403      	add	r3, r0
   1175a:	009b      	lsls	r3, r3, #2
   1175c:	440b      	add	r3, r1
   1175e:	330c      	adds	r3, #12
   11760:	681b      	ldr	r3, [r3, #0]
   11762:	4322      	orrs	r2, r4
   11764:	601a      	str	r2, [r3, #0]
   11766:	462b      	mov	r3, r5
   11768:	4619      	mov	r1, r3
   1176a:	4803      	ldr	r0, [pc, #12]	; (11778 <Gpio::SetEdgeRising()+0x74>)
   1176c:	f004 fdc0 	bl	162f0 <__cyg_profile_func_exit>
  }
   11770:	bf00      	nop
   11772:	b003      	add	sp, #12
   11774:	bd30      	pop	{r4, r5, pc}
   11776:	bf00      	nop
   11778:	00011705 	.word	0x00011705
   1177c:	10000038 	.word	0x10000038

00011780 <Gpio::SetEdgeFalling()>:

  // Sets the gpio interrupt to trigger on a falling edge.
  void SetEdgeFalling()
   11780:	b530      	push	{r4, r5, lr}
   11782:	b083      	sub	sp, #12
   11784:	4675      	mov	r5, lr
   11786:	9001      	str	r0, [sp, #4]
   11788:	462b      	mov	r3, r5
   1178a:	4619      	mov	r1, r3
   1178c:	4819      	ldr	r0, [pc, #100]	; (117f4 <Gpio::SetEdgeFalling()+0x74>)
   1178e:	f004 fd9b 	bl	162c8 <__cyg_profile_func_enter>
  {
    *interrupt[interupt_port_].enable_falling_edge |= (1 << pin_->GetPin());
   11792:	9b01      	ldr	r3, [sp, #4]
   11794:	689a      	ldr	r2, [r3, #8]
   11796:	9b01      	ldr	r3, [sp, #4]
   11798:	689b      	ldr	r3, [r3, #8]
   1179a:	681b      	ldr	r3, [r3, #0]
   1179c:	3330      	adds	r3, #48	; 0x30
   1179e:	681b      	ldr	r3, [r3, #0]
   117a0:	4610      	mov	r0, r2
   117a2:	4798      	blx	r3
   117a4:	4603      	mov	r3, r0
   117a6:	461a      	mov	r2, r3
   117a8:	2301      	movs	r3, #1
   117aa:	fa03 f002 	lsl.w	r0, r3, r2
   117ae:	9b01      	ldr	r3, [sp, #4]
   117b0:	791b      	ldrb	r3, [r3, #4]
   117b2:	4619      	mov	r1, r3
   117b4:	4a10      	ldr	r2, [pc, #64]	; (117f8 <Gpio::SetEdgeFalling()+0x78>)
   117b6:	460b      	mov	r3, r1
   117b8:	009b      	lsls	r3, r3, #2
   117ba:	440b      	add	r3, r1
   117bc:	009b      	lsls	r3, r3, #2
   117be:	4413      	add	r3, r2
   117c0:	3310      	adds	r3, #16
   117c2:	681b      	ldr	r3, [r3, #0]
   117c4:	681a      	ldr	r2, [r3, #0]
   117c6:	4604      	mov	r4, r0
   117c8:	9b01      	ldr	r3, [sp, #4]
   117ca:	791b      	ldrb	r3, [r3, #4]
   117cc:	4618      	mov	r0, r3
   117ce:	490a      	ldr	r1, [pc, #40]	; (117f8 <Gpio::SetEdgeFalling()+0x78>)
   117d0:	4603      	mov	r3, r0
   117d2:	009b      	lsls	r3, r3, #2
   117d4:	4403      	add	r3, r0
   117d6:	009b      	lsls	r3, r3, #2
   117d8:	440b      	add	r3, r1
   117da:	3310      	adds	r3, #16
   117dc:	681b      	ldr	r3, [r3, #0]
   117de:	4322      	orrs	r2, r4
   117e0:	601a      	str	r2, [r3, #0]
   117e2:	462b      	mov	r3, r5
   117e4:	4619      	mov	r1, r3
   117e6:	4803      	ldr	r0, [pc, #12]	; (117f4 <Gpio::SetEdgeFalling()+0x74>)
   117e8:	f004 fd82 	bl	162f0 <__cyg_profile_func_exit>
  }
   117ec:	bf00      	nop
   117ee:	b003      	add	sp, #12
   117f0:	bd30      	pop	{r4, r5, pc}
   117f2:	bf00      	nop
   117f4:	00011781 	.word	0x00011781
   117f8:	10000038 	.word	0x10000038

000117fc <Gpio::ClearEdgeRising()>:

  // Clears the gpio interrupt to no longer trigger on a rising edge.
  void ClearEdgeRising()
   117fc:	b530      	push	{r4, r5, lr}
   117fe:	b083      	sub	sp, #12
   11800:	4675      	mov	r5, lr
   11802:	9001      	str	r0, [sp, #4]
   11804:	462b      	mov	r3, r5
   11806:	4619      	mov	r1, r3
   11808:	4819      	ldr	r0, [pc, #100]	; (11870 <Gpio::ClearEdgeRising()+0x74>)
   1180a:	f004 fd5d 	bl	162c8 <__cyg_profile_func_enter>
  {
    *interrupt[interupt_port_].enable_rising_edge &= ~(1 << pin_->GetPin());
   1180e:	9b01      	ldr	r3, [sp, #4]
   11810:	689a      	ldr	r2, [r3, #8]
   11812:	9b01      	ldr	r3, [sp, #4]
   11814:	689b      	ldr	r3, [r3, #8]
   11816:	681b      	ldr	r3, [r3, #0]
   11818:	3330      	adds	r3, #48	; 0x30
   1181a:	681b      	ldr	r3, [r3, #0]
   1181c:	4610      	mov	r0, r2
   1181e:	4798      	blx	r3
   11820:	4603      	mov	r3, r0
   11822:	461a      	mov	r2, r3
   11824:	2301      	movs	r3, #1
   11826:	4093      	lsls	r3, r2
   11828:	43d8      	mvns	r0, r3
   1182a:	9b01      	ldr	r3, [sp, #4]
   1182c:	791b      	ldrb	r3, [r3, #4]
   1182e:	4619      	mov	r1, r3
   11830:	4a10      	ldr	r2, [pc, #64]	; (11874 <Gpio::ClearEdgeRising()+0x78>)
   11832:	460b      	mov	r3, r1
   11834:	009b      	lsls	r3, r3, #2
   11836:	440b      	add	r3, r1
   11838:	009b      	lsls	r3, r3, #2
   1183a:	4413      	add	r3, r2
   1183c:	330c      	adds	r3, #12
   1183e:	681b      	ldr	r3, [r3, #0]
   11840:	681a      	ldr	r2, [r3, #0]
   11842:	4604      	mov	r4, r0
   11844:	9b01      	ldr	r3, [sp, #4]
   11846:	791b      	ldrb	r3, [r3, #4]
   11848:	4618      	mov	r0, r3
   1184a:	490a      	ldr	r1, [pc, #40]	; (11874 <Gpio::ClearEdgeRising()+0x78>)
   1184c:	4603      	mov	r3, r0
   1184e:	009b      	lsls	r3, r3, #2
   11850:	4403      	add	r3, r0
   11852:	009b      	lsls	r3, r3, #2
   11854:	440b      	add	r3, r1
   11856:	330c      	adds	r3, #12
   11858:	681b      	ldr	r3, [r3, #0]
   1185a:	4022      	ands	r2, r4
   1185c:	601a      	str	r2, [r3, #0]
   1185e:	462b      	mov	r3, r5
   11860:	4619      	mov	r1, r3
   11862:	4803      	ldr	r0, [pc, #12]	; (11870 <Gpio::ClearEdgeRising()+0x74>)
   11864:	f004 fd44 	bl	162f0 <__cyg_profile_func_exit>
  }
   11868:	bf00      	nop
   1186a:	b003      	add	sp, #12
   1186c:	bd30      	pop	{r4, r5, pc}
   1186e:	bf00      	nop
   11870:	000117fd 	.word	0x000117fd
   11874:	10000038 	.word	0x10000038

00011878 <Gpio::ClearEdgeFalling()>:

  // Clears the gpio interrupt to no longer trigger on a falling edge.
  void ClearEdgeFalling()
   11878:	b530      	push	{r4, r5, lr}
   1187a:	b083      	sub	sp, #12
   1187c:	4675      	mov	r5, lr
   1187e:	9001      	str	r0, [sp, #4]
   11880:	462b      	mov	r3, r5
   11882:	4619      	mov	r1, r3
   11884:	4819      	ldr	r0, [pc, #100]	; (118ec <Gpio::ClearEdgeFalling()+0x74>)
   11886:	f004 fd1f 	bl	162c8 <__cyg_profile_func_enter>
  {
    *interrupt[interupt_port_].enable_falling_edge &= ~(1 << pin_->GetPin());
   1188a:	9b01      	ldr	r3, [sp, #4]
   1188c:	689a      	ldr	r2, [r3, #8]
   1188e:	9b01      	ldr	r3, [sp, #4]
   11890:	689b      	ldr	r3, [r3, #8]
   11892:	681b      	ldr	r3, [r3, #0]
   11894:	3330      	adds	r3, #48	; 0x30
   11896:	681b      	ldr	r3, [r3, #0]
   11898:	4610      	mov	r0, r2
   1189a:	4798      	blx	r3
   1189c:	4603      	mov	r3, r0
   1189e:	461a      	mov	r2, r3
   118a0:	2301      	movs	r3, #1
   118a2:	4093      	lsls	r3, r2
   118a4:	43d8      	mvns	r0, r3
   118a6:	9b01      	ldr	r3, [sp, #4]
   118a8:	791b      	ldrb	r3, [r3, #4]
   118aa:	4619      	mov	r1, r3
   118ac:	4a10      	ldr	r2, [pc, #64]	; (118f0 <Gpio::ClearEdgeFalling()+0x78>)
   118ae:	460b      	mov	r3, r1
   118b0:	009b      	lsls	r3, r3, #2
   118b2:	440b      	add	r3, r1
   118b4:	009b      	lsls	r3, r3, #2
   118b6:	4413      	add	r3, r2
   118b8:	3310      	adds	r3, #16
   118ba:	681b      	ldr	r3, [r3, #0]
   118bc:	681a      	ldr	r2, [r3, #0]
   118be:	4604      	mov	r4, r0
   118c0:	9b01      	ldr	r3, [sp, #4]
   118c2:	791b      	ldrb	r3, [r3, #4]
   118c4:	4618      	mov	r0, r3
   118c6:	490a      	ldr	r1, [pc, #40]	; (118f0 <Gpio::ClearEdgeFalling()+0x78>)
   118c8:	4603      	mov	r3, r0
   118ca:	009b      	lsls	r3, r3, #2
   118cc:	4403      	add	r3, r0
   118ce:	009b      	lsls	r3, r3, #2
   118d0:	440b      	add	r3, r1
   118d2:	3310      	adds	r3, #16
   118d4:	681b      	ldr	r3, [r3, #0]
   118d6:	4022      	ands	r2, r4
   118d8:	601a      	str	r2, [r3, #0]
   118da:	462b      	mov	r3, r5
   118dc:	4619      	mov	r1, r3
   118de:	4803      	ldr	r0, [pc, #12]	; (118ec <Gpio::ClearEdgeFalling()+0x74>)
   118e0:	f004 fd06 	bl	162f0 <__cyg_profile_func_exit>
  }
   118e4:	bf00      	nop
   118e6:	b003      	add	sp, #12
   118e8:	bd30      	pop	{r4, r5, pc}
   118ea:	bf00      	nop
   118ec:	00011879 	.word	0x00011879
   118f0:	10000038 	.word	0x10000038

000118f4 <SystemControllerInterface::SystemControllerInterface()>:
#include "L0_LowLevel/LPC40xx.h"
#include "utility/enum.hpp"
#include "utility/log.hpp"
#include "utility/macros.hpp"

class SystemControllerInterface
   118f4:	b082      	sub	sp, #8
   118f6:	9001      	str	r0, [sp, #4]
   118f8:	4a03      	ldr	r2, [pc, #12]	; (11908 <SystemControllerInterface::SystemControllerInterface()+0x14>)
   118fa:	9b01      	ldr	r3, [sp, #4]
   118fc:	601a      	str	r2, [r3, #0]
   118fe:	9b01      	ldr	r3, [sp, #4]
   11900:	4618      	mov	r0, r3
   11902:	b002      	add	sp, #8
   11904:	4770      	bx	lr
   11906:	bf00      	nop
   11908:	00019abc 	.word	0x00019abc

0001190c <Lpc40xxSystemController::Lpc40xxSystemController()>:
  static constexpr uint32_t kDefaultIRCFrequency    = 12'000'000;
  static constexpr uint32_t kDefaultTimeout         = 1'000;  // ms

  inline static LPC_SC_TypeDef * system_controller = LPC_SC;

  constexpr Lpc40xxSystemController() {}
   1190c:	b500      	push	{lr}
   1190e:	b083      	sub	sp, #12
   11910:	9001      	str	r0, [sp, #4]
   11912:	9b01      	ldr	r3, [sp, #4]
   11914:	4618      	mov	r0, r3
   11916:	f7ff ffed 	bl	118f4 <SystemControllerInterface::SystemControllerInterface()>
   1191a:	4a04      	ldr	r2, [pc, #16]	; (1192c <Lpc40xxSystemController::Lpc40xxSystemController()+0x20>)
   1191c:	9b01      	ldr	r3, [sp, #4]
   1191e:	601a      	str	r2, [r3, #0]
   11920:	9b01      	ldr	r3, [sp, #4]
   11922:	4618      	mov	r0, r3
   11924:	b003      	add	sp, #12
   11926:	f85d fb04 	ldr.w	pc, [sp], #4
   1192a:	bf00      	nop
   1192c:	00019a98 	.word	0x00019a98

00011930 <Lpc40xxSystemController::SetClockFrequency(unsigned char)>:

  uint32_t SetClockFrequency(uint8_t frequency_in_mhz) override
   11930:	b500      	push	{lr}
   11932:	b085      	sub	sp, #20
   11934:	9001      	str	r0, [sp, #4]
   11936:	460b      	mov	r3, r1
   11938:	f88d 3003 	strb.w	r3, [sp, #3]
  {
    uint32_t offset = 0;
   1193c:	2300      	movs	r3, #0
   1193e:	9303      	str	r3, [sp, #12]
    SelectOscillatorSource(OscillatorSource::kIrc);
   11940:	2100      	movs	r1, #0
   11942:	9801      	ldr	r0, [sp, #4]
   11944:	f000 f8ce 	bl	11ae4 <Lpc40xxSystemController::SelectOscillatorSource(Lpc40xxSystemController::OscillatorSource)>
    if (frequency_in_mhz > 12)
   11948:	f89d 3003 	ldrb.w	r3, [sp, #3]
   1194c:	2b0c      	cmp	r3, #12
   1194e:	d916      	bls.n	1197e <Lpc40xxSystemController::SetClockFrequency(unsigned char)+0x4e>
    {
      offset = SetMainPll(PllInput::kIrc, frequency_in_mhz);
   11950:	f89d 3003 	ldrb.w	r3, [sp, #3]
   11954:	b29b      	uxth	r3, r3
   11956:	461a      	mov	r2, r3
   11958:	210c      	movs	r1, #12
   1195a:	9801      	ldr	r0, [sp, #4]
   1195c:	f000 f9ac 	bl	11cb8 <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)>
   11960:	9003      	str	r0, [sp, #12]
      SelectMainClockSource(MainClockSource::kPllClock);
   11962:	f44f 7180 	mov.w	r1, #256	; 0x100
   11966:	9801      	ldr	r0, [sp, #4]
   11968:	f000 f8d6 	bl	11b18 <Lpc40xxSystemController::SelectMainClockSource(Lpc40xxSystemController::MainClockSource)>
      speed_in_hertz = frequency_in_mhz * 1'000'000;
   1196c:	f89d 3003 	ldrb.w	r3, [sp, #3]
   11970:	4a10      	ldr	r2, [pc, #64]	; (119b4 <Lpc40xxSystemController::SetClockFrequency(unsigned char)+0x84>)
   11972:	fb02 f303 	mul.w	r3, r2, r3
   11976:	461a      	mov	r2, r3
   11978:	4b0f      	ldr	r3, [pc, #60]	; (119b8 <Lpc40xxSystemController::SetClockFrequency(unsigned char)+0x88>)
   1197a:	601a      	str	r2, [r3, #0]
   1197c:	e006      	b.n	1198c <Lpc40xxSystemController::SetClockFrequency(unsigned char)+0x5c>
    }
    else
    {
      SelectMainClockSource(MainClockSource::kBaseClock);
   1197e:	2100      	movs	r1, #0
   11980:	9801      	ldr	r0, [sp, #4]
   11982:	f000 f8c9 	bl	11b18 <Lpc40xxSystemController::SelectMainClockSource(Lpc40xxSystemController::MainClockSource)>
      speed_in_hertz = kDefaultIRCFrequency;
   11986:	4b0c      	ldr	r3, [pc, #48]	; (119b8 <Lpc40xxSystemController::SetClockFrequency(unsigned char)+0x88>)
   11988:	4a0c      	ldr	r2, [pc, #48]	; (119bc <Lpc40xxSystemController::SetClockFrequency(unsigned char)+0x8c>)
   1198a:	601a      	str	r2, [r3, #0]
    }
    SetCpuClockDivider(kDivideInputBy1);
   1198c:	2101      	movs	r1, #1
   1198e:	9801      	ldr	r0, [sp, #4]
   11990:	f000 fa4a 	bl	11e28 <Lpc40xxSystemController::SetCpuClockDivider(unsigned char)>
    SetPeripheralClockDivider(kDivideInputBy1);
   11994:	9b01      	ldr	r3, [sp, #4]
   11996:	681b      	ldr	r3, [r3, #0]
   11998:	3304      	adds	r3, #4
   1199a:	681b      	ldr	r3, [r3, #0]
   1199c:	2101      	movs	r1, #1
   1199e:	9801      	ldr	r0, [sp, #4]
   119a0:	4798      	blx	r3
    SetEmcClockDivider(EmcDivider::kSameSpeedAsCpu);
   119a2:	2100      	movs	r1, #0
   119a4:	9801      	ldr	r0, [sp, #4]
   119a6:	f000 fa73 	bl	11e90 <Lpc40xxSystemController::SetEmcClockDivider(Lpc40xxSystemController::EmcDivider)>
    return offset;
   119aa:	9b03      	ldr	r3, [sp, #12]
  }
   119ac:	4618      	mov	r0, r3
   119ae:	b005      	add	sp, #20
   119b0:	f85d fb04 	ldr.w	pc, [sp], #4
   119b4:	000f4240 	.word	0x000f4240
   119b8:	10000064 	.word	0x10000064
   119bc:	00b71b00 	.word	0x00b71b00

000119c0 <Lpc40xxSystemController::SetPeripheralClockDivider(unsigned char)>:

  void SetPeripheralClockDivider(uint8_t peripheral_divider) override
   119c0:	b500      	push	{lr}
   119c2:	b083      	sub	sp, #12
   119c4:	9001      	str	r0, [sp, #4]
   119c6:	460b      	mov	r3, r1
   119c8:	f88d 3003 	strb.w	r3, [sp, #3]
  {
    SJ2_ASSERT_FATAL(peripheral_divider <= 4, "Divider mustn't exceed 32");
   119cc:	f89d 3003 	ldrb.w	r3, [sp, #3]
   119d0:	2b04      	cmp	r3, #4
   119d2:	d90d      	bls.n	119f0 <Lpc40xxSystemController::SetPeripheralClockDivider(unsigned char)+0x30>
   119d4:	23ae      	movs	r3, #174	; 0xae
   119d6:	4a0b      	ldr	r2, [pc, #44]	; (11a04 <Lpc40xxSystemController::SetPeripheralClockDivider(unsigned char)+0x44>)
   119d8:	490b      	ldr	r1, [pc, #44]	; (11a08 <Lpc40xxSystemController::SetPeripheralClockDivider(unsigned char)+0x48>)
   119da:	480c      	ldr	r0, [pc, #48]	; (11a0c <Lpc40xxSystemController::SetPeripheralClockDivider(unsigned char)+0x4c>)
   119dc:	f005 fef4 	bl	177c8 <printf>
   119e0:	480b      	ldr	r0, [pc, #44]	; (11a10 <Lpc40xxSystemController::SetPeripheralClockDivider(unsigned char)+0x50>)
   119e2:	f004 fc41 	bl	16268 <puts>
   119e6:	2100      	movs	r1, #0
   119e8:	2001      	movs	r0, #1
   119ea:	f7ff f975 	bl	10cd8 <debug::PrintBacktrace(bool, void*)>
   119ee:	e7fe      	b.n	119ee <Lpc40xxSystemController::SetPeripheralClockDivider(unsigned char)+0x2e>
    system_controller->PCLKSEL = peripheral_divider;
   119f0:	4b08      	ldr	r3, [pc, #32]	; (11a14 <Lpc40xxSystemController::SetPeripheralClockDivider(unsigned char)+0x54>)
   119f2:	681b      	ldr	r3, [r3, #0]
   119f4:	f89d 2003 	ldrb.w	r2, [sp, #3]
   119f8:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
  }
   119fc:	bf00      	nop
   119fe:	b003      	add	sp, #12
   11a00:	f85d fb04 	ldr.w	pc, [sp], #4
   11a04:	00019c00 	.word	0x00019c00
   11a08:	000198b8 	.word	0x000198b8
   11a0c:	000192e8 	.word	0x000192e8
   11a10:	00019388 	.word	0x00019388
   11a14:	10000060 	.word	0x10000060

00011a18 <Lpc40xxSystemController::GetPeripheralClockDivider() const>:

  uint32_t GetPeripheralClockDivider() const override
   11a18:	b082      	sub	sp, #8
   11a1a:	9001      	str	r0, [sp, #4]
  {
#if defined(HOST_TEST)
    return 1;
#else
    return system_controller->PCLKSEL;
   11a1c:	4b03      	ldr	r3, [pc, #12]	; (11a2c <Lpc40xxSystemController::GetPeripheralClockDivider() const+0x14>)
   11a1e:	681b      	ldr	r3, [r3, #0]
   11a20:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
#endif
  }
   11a24:	4618      	mov	r0, r3
   11a26:	b002      	add	sp, #8
   11a28:	4770      	bx	lr
   11a2a:	bf00      	nop
   11a2c:	10000060 	.word	0x10000060

00011a30 <Lpc40xxSystemController::GetSystemFrequency() const>:

  uint32_t GetSystemFrequency() const override
   11a30:	b082      	sub	sp, #8
   11a32:	9001      	str	r0, [sp, #4]
  {
#if defined(HOST_TEST)
    return config::kSystemClockRate;
#else
    return speed_in_hertz;
   11a34:	4b02      	ldr	r3, [pc, #8]	; (11a40 <Lpc40xxSystemController::GetSystemFrequency() const+0x10>)
   11a36:	681b      	ldr	r3, [r3, #0]
#endif
  }
   11a38:	4618      	mov	r0, r3
   11a3a:	b002      	add	sp, #8
   11a3c:	4770      	bx	lr
   11a3e:	bf00      	nop
   11a40:	10000064 	.word	0x10000064

00011a44 <Lpc40xxSystemController::GetPeripheralFrequency() const>:

  uint32_t GetPeripheralFrequency() const override
   11a44:	b500      	push	{lr}
   11a46:	b085      	sub	sp, #20
   11a48:	9001      	str	r0, [sp, #4]
  {
    uint32_t peripheral_clock_divider = GetPeripheralClockDivider();
   11a4a:	9b01      	ldr	r3, [sp, #4]
   11a4c:	681b      	ldr	r3, [r3, #0]
   11a4e:	3308      	adds	r3, #8
   11a50:	681b      	ldr	r3, [r3, #0]
   11a52:	9801      	ldr	r0, [sp, #4]
   11a54:	4798      	blx	r3
   11a56:	9002      	str	r0, [sp, #8]
    uint32_t result = 0;  // return 0 if peripheral_clock_divider == 0
   11a58:	2300      	movs	r3, #0
   11a5a:	9303      	str	r3, [sp, #12]
    if (peripheral_clock_divider != 0)
   11a5c:	9b02      	ldr	r3, [sp, #8]
   11a5e:	2b00      	cmp	r3, #0
   11a60:	d00a      	beq.n	11a78 <Lpc40xxSystemController::GetPeripheralFrequency() const+0x34>
    {
      result = GetSystemFrequency() / peripheral_clock_divider;
   11a62:	9b01      	ldr	r3, [sp, #4]
   11a64:	681b      	ldr	r3, [r3, #0]
   11a66:	330c      	adds	r3, #12
   11a68:	681b      	ldr	r3, [r3, #0]
   11a6a:	9801      	ldr	r0, [sp, #4]
   11a6c:	4798      	blx	r3
   11a6e:	4602      	mov	r2, r0
   11a70:	9b02      	ldr	r3, [sp, #8]
   11a72:	fbb2 f3f3 	udiv	r3, r2, r3
   11a76:	9303      	str	r3, [sp, #12]
    }
    return result;
   11a78:	9b03      	ldr	r3, [sp, #12]
  }
   11a7a:	4618      	mov	r0, r3
   11a7c:	b005      	add	sp, #20
   11a7e:	f85d fb04 	ldr.w	pc, [sp], #4
   11a82:	Address 0x0000000000011a82 is out of bounds.


00011a84 <Lpc40xxSystemController::PowerUpPeripheral(SystemControllerInterface::PeripheralID const&)>:

  void PowerUpPeripheral(const PeripheralID & peripheral_select) override
   11a84:	b084      	sub	sp, #16
   11a86:	9001      	str	r0, [sp, #4]
   11a88:	9100      	str	r1, [sp, #0]
  {
    auto power_connection_with_enabled_peripheral =
        system_controller->PCONP | (1 << peripheral_select.device_id);
   11a8a:	4b09      	ldr	r3, [pc, #36]	; (11ab0 <Lpc40xxSystemController::PowerUpPeripheral(SystemControllerInterface::PeripheralID const&)+0x2c>)
   11a8c:	681b      	ldr	r3, [r3, #0]
   11a8e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
   11a92:	9a00      	ldr	r2, [sp, #0]
   11a94:	6812      	ldr	r2, [r2, #0]
   11a96:	2101      	movs	r1, #1
   11a98:	fa01 f202 	lsl.w	r2, r1, r2
   11a9c:	4313      	orrs	r3, r2
   11a9e:	9303      	str	r3, [sp, #12]

    system_controller->PCONP = power_connection_with_enabled_peripheral;
   11aa0:	4b03      	ldr	r3, [pc, #12]	; (11ab0 <Lpc40xxSystemController::PowerUpPeripheral(SystemControllerInterface::PeripheralID const&)+0x2c>)
   11aa2:	681b      	ldr	r3, [r3, #0]
   11aa4:	9a03      	ldr	r2, [sp, #12]
   11aa6:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  }
   11aaa:	bf00      	nop
   11aac:	b004      	add	sp, #16
   11aae:	4770      	bx	lr
   11ab0:	10000060 	.word	0x10000060

00011ab4 <Lpc40xxSystemController::PowerDownPeripheral(SystemControllerInterface::PeripheralID const&)>:
  void PowerDownPeripheral(const PeripheralID & peripheral_select) override
   11ab4:	b084      	sub	sp, #16
   11ab6:	9001      	str	r0, [sp, #4]
   11ab8:	9100      	str	r1, [sp, #0]
  {
    auto power_connection_without_enabled_peripheral =
        system_controller->PCONP & (1 << peripheral_select.device_id);
   11aba:	4b09      	ldr	r3, [pc, #36]	; (11ae0 <Lpc40xxSystemController::PowerDownPeripheral(SystemControllerInterface::PeripheralID const&)+0x2c>)
   11abc:	681b      	ldr	r3, [r3, #0]
   11abe:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
   11ac2:	9a00      	ldr	r2, [sp, #0]
   11ac4:	6812      	ldr	r2, [r2, #0]
   11ac6:	2101      	movs	r1, #1
   11ac8:	fa01 f202 	lsl.w	r2, r1, r2
   11acc:	4013      	ands	r3, r2
   11ace:	9303      	str	r3, [sp, #12]

    system_controller->PCONP = power_connection_without_enabled_peripheral;
   11ad0:	4b03      	ldr	r3, [pc, #12]	; (11ae0 <Lpc40xxSystemController::PowerDownPeripheral(SystemControllerInterface::PeripheralID const&)+0x2c>)
   11ad2:	681b      	ldr	r3, [r3, #0]
   11ad4:	9a03      	ldr	r2, [sp, #12]
   11ad6:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  }
   11ada:	bf00      	nop
   11adc:	b004      	add	sp, #16
   11ade:	4770      	bx	lr
   11ae0:	10000060 	.word	0x10000060

00011ae4 <Lpc40xxSystemController::SelectOscillatorSource(Lpc40xxSystemController::OscillatorSource)>:

 private:
  void SelectOscillatorSource(OscillatorSource source)
   11ae4:	b084      	sub	sp, #16
   11ae6:	9001      	str	r0, [sp, #4]
   11ae8:	460b      	mov	r3, r1
   11aea:	f8ad 3002 	strh.w	r3, [sp, #2]
  {
    uint32_t source_bit = static_cast<uint32_t>(source);
   11aee:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   11af2:	9303      	str	r3, [sp, #12]
    system_controller->CLKSRCSEL =
        (system_controller->CLKSRCSEL & ~(kOscillatorSelect)) | source_bit;
   11af4:	4b07      	ldr	r3, [pc, #28]	; (11b14 <Lpc40xxSystemController::SelectOscillatorSource(Lpc40xxSystemController::OscillatorSource)+0x30>)
   11af6:	681b      	ldr	r3, [r3, #0]
   11af8:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
   11afc:	f023 0101 	bic.w	r1, r3, #1
    system_controller->CLKSRCSEL =
   11b00:	4b04      	ldr	r3, [pc, #16]	; (11b14 <Lpc40xxSystemController::SelectOscillatorSource(Lpc40xxSystemController::OscillatorSource)+0x30>)
   11b02:	681b      	ldr	r3, [r3, #0]
        (system_controller->CLKSRCSEL & ~(kOscillatorSelect)) | source_bit;
   11b04:	9a03      	ldr	r2, [sp, #12]
   11b06:	430a      	orrs	r2, r1
    system_controller->CLKSRCSEL =
   11b08:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
  }
   11b0c:	bf00      	nop
   11b0e:	b004      	add	sp, #16
   11b10:	4770      	bx	lr
   11b12:	bf00      	nop
   11b14:	10000060 	.word	0x10000060

00011b18 <Lpc40xxSystemController::SelectMainClockSource(Lpc40xxSystemController::MainClockSource)>:

  void SelectMainClockSource(MainClockSource source)
   11b18:	b082      	sub	sp, #8
   11b1a:	9001      	str	r0, [sp, #4]
   11b1c:	460b      	mov	r3, r1
   11b1e:	f8ad 3002 	strh.w	r3, [sp, #2]
  {
    system_controller->CCLKSEL =
        (system_controller->CCLKSEL & ~(kBaseClockSelect)) |
   11b22:	4b08      	ldr	r3, [pc, #32]	; (11b44 <Lpc40xxSystemController::SelectMainClockSource(Lpc40xxSystemController::MainClockSource)+0x2c>)
   11b24:	681b      	ldr	r3, [r3, #0]
   11b26:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   11b2a:	f423 7180 	bic.w	r1, r3, #256	; 0x100
        static_cast<uint32_t>(source);
   11b2e:	f8bd 2002 	ldrh.w	r2, [sp, #2]
    system_controller->CCLKSEL =
   11b32:	4b04      	ldr	r3, [pc, #16]	; (11b44 <Lpc40xxSystemController::SelectMainClockSource(Lpc40xxSystemController::MainClockSource)+0x2c>)
   11b34:	681b      	ldr	r3, [r3, #0]
        (system_controller->CCLKSEL & ~(kBaseClockSelect)) |
   11b36:	430a      	orrs	r2, r1
    system_controller->CCLKSEL =
   11b38:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
  }
   11b3c:	bf00      	nop
   11b3e:	b002      	add	sp, #8
   11b40:	4770      	bx	lr
   11b42:	bf00      	nop
   11b44:	10000060 	.word	0x10000060

00011b48 <Lpc40xxSystemController::SelectUsbClockSource(Lpc40xxSystemController::UsbSource)>:

  void SelectUsbClockSource(UsbSource usb_clock)
   11b48:	b082      	sub	sp, #8
   11b4a:	9001      	str	r0, [sp, #4]
   11b4c:	460b      	mov	r3, r1
   11b4e:	f8ad 3002 	strh.w	r3, [sp, #2]
  {
    system_controller->USBCLKSEL =
        (system_controller->USBCLKSEL & ~(kUsbClockSource)) |
   11b52:	4b08      	ldr	r3, [pc, #32]	; (11b74 <Lpc40xxSystemController::SelectUsbClockSource(Lpc40xxSystemController::UsbSource)+0x2c>)
   11b54:	681b      	ldr	r3, [r3, #0]
   11b56:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
   11b5a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
        static_cast<uint32_t>(usb_clock);
   11b5e:	f8bd 2002 	ldrh.w	r2, [sp, #2]
    system_controller->USBCLKSEL =
   11b62:	4b04      	ldr	r3, [pc, #16]	; (11b74 <Lpc40xxSystemController::SelectUsbClockSource(Lpc40xxSystemController::UsbSource)+0x2c>)
   11b64:	681b      	ldr	r3, [r3, #0]
        (system_controller->USBCLKSEL & ~(kUsbClockSource)) |
   11b66:	430a      	orrs	r2, r1
    system_controller->USBCLKSEL =
   11b68:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
  }
   11b6c:	bf00      	nop
   11b6e:	b002      	add	sp, #8
   11b70:	4770      	bx	lr
   11b72:	bf00      	nop
   11b74:	10000060 	.word	0x10000060

00011b78 <Lpc40xxSystemController::SelectSpifiClockSource(Lpc40xxSystemController::SpifiSource)>:

  void SelectSpifiClockSource(SpifiSource spifi_clock)
   11b78:	b082      	sub	sp, #8
   11b7a:	9001      	str	r0, [sp, #4]
   11b7c:	460b      	mov	r3, r1
   11b7e:	f8ad 3002 	strh.w	r3, [sp, #2]
  {
    system_controller->SPIFISEL =
        (system_controller->SPIFISEL & ~(kSpifiClockSource)) |
   11b82:	4b08      	ldr	r3, [pc, #32]	; (11ba4 <Lpc40xxSystemController::SelectSpifiClockSource(Lpc40xxSystemController::SpifiSource)+0x2c>)
   11b84:	681b      	ldr	r3, [r3, #0]
   11b86:	f8d3 31b4 	ldr.w	r3, [r3, #436]	; 0x1b4
   11b8a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
        static_cast<uint32_t>(spifi_clock);
   11b8e:	f8bd 2002 	ldrh.w	r2, [sp, #2]
    system_controller->SPIFISEL =
   11b92:	4b04      	ldr	r3, [pc, #16]	; (11ba4 <Lpc40xxSystemController::SelectSpifiClockSource(Lpc40xxSystemController::SpifiSource)+0x2c>)
   11b94:	681b      	ldr	r3, [r3, #0]
        (system_controller->SPIFISEL & ~(kSpifiClockSource)) |
   11b96:	430a      	orrs	r2, r1
    system_controller->SPIFISEL =
   11b98:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
  }
   11b9c:	bf00      	nop
   11b9e:	b002      	add	sp, #8
   11ba0:	4770      	bx	lr
   11ba2:	bf00      	nop
   11ba4:	10000060 	.word	0x10000060

00011ba8 <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)>:

  uint32_t CalculatePll(PllInput input_frequency, uint16_t desired_speed_in_mhz)
   11ba8:	b500      	push	{lr}
   11baa:	b087      	sub	sp, #28
   11bac:	9001      	str	r0, [sp, #4]
   11bae:	460b      	mov	r3, r1
   11bb0:	f8ad 3002 	strh.w	r3, [sp, #2]
   11bb4:	4613      	mov	r3, r2
   11bb6:	f8ad 3000 	strh.w	r3, [sp]
  {
    SJ2_ASSERT_FATAL(desired_speed_in_mhz < 384 && desired_speed_in_mhz > 12,
   11bba:	f8bd 3000 	ldrh.w	r3, [sp]
   11bbe:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
   11bc2:	d203      	bcs.n	11bcc <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)+0x24>
   11bc4:	f8bd 3000 	ldrh.w	r3, [sp]
   11bc8:	2b0c      	cmp	r3, #12
   11bca:	d80d      	bhi.n	11be8 <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)+0x40>
   11bcc:	23ff      	movs	r3, #255	; 0xff
   11bce:	4a34      	ldr	r2, [pc, #208]	; (11ca0 <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)+0xf8>)
   11bd0:	4934      	ldr	r1, [pc, #208]	; (11ca4 <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)+0xfc>)
   11bd2:	4835      	ldr	r0, [pc, #212]	; (11ca8 <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)+0x100>)
   11bd4:	f005 fdf8 	bl	177c8 <printf>
   11bd8:	4834      	ldr	r0, [pc, #208]	; (11cac <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)+0x104>)
   11bda:	f004 fb45 	bl	16268 <puts>
   11bde:	2100      	movs	r1, #0
   11be0:	2001      	movs	r0, #1
   11be2:	f7ff f879 	bl	10cd8 <debug::PrintBacktrace(bool, void*)>
   11be6:	e7fe      	b.n	11be6 <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)+0x3e>
                     "Frequency must be lower than 384 MHz"
                     "and greater than or equal to 12 MHz");
    bool calculating = true;
   11be8:	2301      	movs	r3, #1
   11bea:	f88d 3017 	strb.w	r3, [sp, #23]
    uint32_t multiplier_value;
    if ((desired_speed_in_mhz % static_cast<uint16_t>(input_frequency)) >= 1)
   11bee:	f8bd 3000 	ldrh.w	r3, [sp]
   11bf2:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   11bf6:	fbb3 f1f2 	udiv	r1, r3, r2
   11bfa:	fb02 f201 	mul.w	r2, r2, r1
   11bfe:	1a9b      	subs	r3, r3, r2
   11c00:	b29b      	uxth	r3, r3
   11c02:	2b00      	cmp	r3, #0
   11c04:	d009      	beq.n	11c1a <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)+0x72>
    {
      multiplier_value = static_cast<uint32_t>(
          (desired_speed_in_mhz / static_cast<uint16_t>(input_frequency)) + 1);
   11c06:	f8bd 2000 	ldrh.w	r2, [sp]
   11c0a:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   11c0e:	fbb2 f3f3 	udiv	r3, r2, r3
   11c12:	b29b      	uxth	r3, r3
   11c14:	3301      	adds	r3, #1
      multiplier_value = static_cast<uint32_t>(
   11c16:	9304      	str	r3, [sp, #16]
   11c18:	e007      	b.n	11c2a <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)+0x82>
    }
    else
    {
      multiplier_value = static_cast<uint32_t>(
          desired_speed_in_mhz / static_cast<uint16_t>(input_frequency));
   11c1a:	f8bd 2000 	ldrh.w	r2, [sp]
   11c1e:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   11c22:	fbb2 f3f3 	udiv	r3, r2, r3
   11c26:	b29b      	uxth	r3, r3
      multiplier_value = static_cast<uint32_t>(
   11c28:	9304      	str	r3, [sp, #16]
    }
    uint16_t divider_value = 1;
   11c2a:	2301      	movs	r3, #1
   11c2c:	f8ad 300e 	strh.w	r3, [sp, #14]
    while (calculating)
   11c30:	f89d 3017 	ldrb.w	r3, [sp, #23]
   11c34:	2b00      	cmp	r3, #0
   11c36:	d02e      	beq.n	11c96 <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)+0xee>
    {
      uint16_t current_controlled_oscillator_frequency;
      current_controlled_oscillator_frequency = static_cast<uint16_t>(
   11c38:	9b04      	ldr	r3, [sp, #16]
   11c3a:	b29b      	uxth	r3, r3
   11c3c:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   11c40:	fb12 f303 	smulbb	r3, r2, r3
   11c44:	b29b      	uxth	r3, r3
   11c46:	f8bd 200e 	ldrh.w	r2, [sp, #14]
   11c4a:	fb12 f303 	smulbb	r3, r2, r3
   11c4e:	b29b      	uxth	r3, r3
   11c50:	005b      	lsls	r3, r3, #1
   11c52:	f8ad 300c 	strh.w	r3, [sp, #12]
          (static_cast<uint16_t>(input_frequency) * multiplier_value * 2) *
          divider_value);
      if (current_controlled_oscillator_frequency >= 156)
   11c56:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   11c5a:	2b9b      	cmp	r3, #155	; 0x9b
   11c5c:	d903      	bls.n	11c66 <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)+0xbe>
      {
        calculating = false;
   11c5e:	2300      	movs	r3, #0
   11c60:	f88d 3017 	strb.w	r3, [sp, #23]
   11c64:	e7e4      	b.n	11c30 <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)+0x88>
      }
      else
      {
        divider_value = static_cast<uint16_t>(divider_value * 2);
   11c66:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   11c6a:	005b      	lsls	r3, r3, #1
   11c6c:	f8ad 300e 	strh.w	r3, [sp, #14]
        SJ2_ASSERT_FATAL(divider_value < 8,
   11c70:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   11c74:	2b07      	cmp	r3, #7
   11c76:	d9db      	bls.n	11c30 <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)+0x88>
   11c78:	f240 131b 	movw	r3, #283	; 0x11b
   11c7c:	4a08      	ldr	r2, [pc, #32]	; (11ca0 <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)+0xf8>)
   11c7e:	490c      	ldr	r1, [pc, #48]	; (11cb0 <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)+0x108>)
   11c80:	480c      	ldr	r0, [pc, #48]	; (11cb4 <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)+0x10c>)
   11c82:	f005 fda1 	bl	177c8 <printf>
   11c86:	4809      	ldr	r0, [pc, #36]	; (11cac <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)+0x104>)
   11c88:	f004 faee 	bl	16268 <puts>
   11c8c:	2100      	movs	r1, #0
   11c8e:	2001      	movs	r0, #1
   11c90:	f7ff f822 	bl	10cd8 <debug::PrintBacktrace(bool, void*)>
   11c94:	e7fe      	b.n	11c94 <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)+0xec>
                         "PLL divider value went out of bounds");
      }
    }

    return multiplier_value;
   11c96:	9b04      	ldr	r3, [sp, #16]
  }
   11c98:	4618      	mov	r0, r3
   11c9a:	b007      	add	sp, #28
   11c9c:	f85d fb04 	ldr.w	pc, [sp], #4
   11ca0:	00019ca8 	.word	0x00019ca8
   11ca4:	000198d0 	.word	0x000198d0
   11ca8:	000193a0 	.word	0x000193a0
   11cac:	00019388 	.word	0x00019388
   11cb0:	000198e8 	.word	0x000198e8
   11cb4:	00019490 	.word	0x00019490

00011cb8 <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)>:

  uint32_t SetMainPll(PllInput input_frequency, uint16_t desired_speed_in_mhz)
   11cb8:	b510      	push	{r4, lr}
   11cba:	b08a      	sub	sp, #40	; 0x28
   11cbc:	9001      	str	r0, [sp, #4]
   11cbe:	460b      	mov	r3, r1
   11cc0:	f8ad 3002 	strh.w	r3, [sp, #2]
   11cc4:	4613      	mov	r3, r2
   11cc6:	f8ad 3000 	strh.w	r3, [sp]
  {
    uint16_t divider_value = 1;
   11cca:	2301      	movs	r3, #1
   11ccc:	f8ad 301a 	strh.w	r3, [sp, #26]
    uint64_t timeout_time  = Milliseconds() + kDefaultTimeout;
   11cd0:	f7ff f89a 	bl	10e08 <Milliseconds()>
   11cd4:	460a      	mov	r2, r1
   11cd6:	4601      	mov	r1, r0
   11cd8:	f511 737a 	adds.w	r3, r1, #1000	; 0x3e8
   11cdc:	f142 0400 	adc.w	r4, r2, #0
   11ce0:	e9cd 3404 	strd	r3, r4, [sp, #16]
    uint64_t current_time  = Milliseconds();
   11ce4:	f7ff f890 	bl	10e08 <Milliseconds()>
   11ce8:	e9cd 0108 	strd	r0, r1, [sp, #32]
    uint32_t multiplier_value =
        CalculatePll(input_frequency, desired_speed_in_mhz);
   11cec:	f8bd 2000 	ldrh.w	r2, [sp]
   11cf0:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   11cf4:	4619      	mov	r1, r3
   11cf6:	9801      	ldr	r0, [sp, #4]
   11cf8:	f7ff ff56 	bl	11ba8 <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)>
   11cfc:	9003      	str	r0, [sp, #12]
    uint32_t actual_speed =
        static_cast<uint32_t>(input_frequency) * multiplier_value;
   11cfe:	f8bd 2002 	ldrh.w	r2, [sp, #2]
    uint32_t actual_speed =
   11d02:	9b03      	ldr	r3, [sp, #12]
   11d04:	fb02 f303 	mul.w	r3, r2, r3
   11d08:	9307      	str	r3, [sp, #28]
    // TO DO: use registers to retreive values
    SelectOscillatorSource(OscillatorSource::kIrc);
   11d0a:	2100      	movs	r1, #0
   11d0c:	9801      	ldr	r0, [sp, #4]
   11d0e:	f7ff fee9 	bl	11ae4 <Lpc40xxSystemController::SelectOscillatorSource(Lpc40xxSystemController::OscillatorSource)>
    SelectMainClockSource(MainClockSource::kBaseClock);
   11d12:	2100      	movs	r1, #0
   11d14:	9801      	ldr	r0, [sp, #4]
   11d16:	f7ff feff 	bl	11b18 <Lpc40xxSystemController::SelectMainClockSource(Lpc40xxSystemController::MainClockSource)>
    SelectUsbClockSource(UsbSource::kBaseClock);
   11d1a:	2100      	movs	r1, #0
   11d1c:	9801      	ldr	r0, [sp, #4]
   11d1e:	f7ff ff13 	bl	11b48 <Lpc40xxSystemController::SelectUsbClockSource(Lpc40xxSystemController::UsbSource)>
    SelectSpifiClockSource(SpifiSource::kBaseClock);
   11d22:	2100      	movs	r1, #0
   11d24:	9801      	ldr	r0, [sp, #4]
   11d26:	f7ff ff27 	bl	11b78 <Lpc40xxSystemController::SelectSpifiClockSource(Lpc40xxSystemController::SpifiSource)>
    // must subtract 1 from multiplier value as specified in datasheet
    system_controller->PLL0CFG =
        (system_controller->PLL0CFG & ~kClearPllMultiplier) |
   11d2a:	4b3a      	ldr	r3, [pc, #232]	; (11e14 <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0x15c>)
   11d2c:	681b      	ldr	r3, [r3, #0]
   11d2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   11d32:	f023 011f 	bic.w	r1, r3, #31
        (multiplier_value - 1);
   11d36:	9b03      	ldr	r3, [sp, #12]
   11d38:	1e5a      	subs	r2, r3, #1
    system_controller->PLL0CFG =
   11d3a:	4b36      	ldr	r3, [pc, #216]	; (11e14 <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0x15c>)
   11d3c:	681b      	ldr	r3, [r3, #0]
        (system_controller->PLL0CFG & ~kClearPllMultiplier) |
   11d3e:	430a      	orrs	r2, r1
    system_controller->PLL0CFG =
   11d40:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    system_controller->PLL0CFG =
        (system_controller->PLL0CFG & ~kClearPllDivider) | (divider_value << 5);
   11d44:	4b33      	ldr	r3, [pc, #204]	; (11e14 <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0x15c>)
   11d46:	681b      	ldr	r3, [r3, #0]
   11d48:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   11d4c:	f023 0260 	bic.w	r2, r3, #96	; 0x60
   11d50:	f8bd 301a 	ldrh.w	r3, [sp, #26]
   11d54:	015b      	lsls	r3, r3, #5
   11d56:	4619      	mov	r1, r3
    system_controller->PLL0CFG =
   11d58:	4b2e      	ldr	r3, [pc, #184]	; (11e14 <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0x15c>)
   11d5a:	681b      	ldr	r3, [r3, #0]
        (system_controller->PLL0CFG & ~kClearPllDivider) | (divider_value << 5);
   11d5c:	430a      	orrs	r2, r1
    system_controller->PLL0CFG =
   11d5e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    system_controller->PLL0CON |= kEnablePll;
   11d62:	4b2c      	ldr	r3, [pc, #176]	; (11e14 <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0x15c>)
   11d64:	681b      	ldr	r3, [r3, #0]
   11d66:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
   11d6a:	4b2a      	ldr	r3, [pc, #168]	; (11e14 <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0x15c>)
   11d6c:	681b      	ldr	r3, [r3, #0]
   11d6e:	f042 0201 	orr.w	r2, r2, #1
   11d72:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    // nessecary feed sequence to ensure the changes are intentional
    system_controller->PLL0FEED = 0xAA;
   11d76:	4b27      	ldr	r3, [pc, #156]	; (11e14 <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0x15c>)
   11d78:	681b      	ldr	r3, [r3, #0]
   11d7a:	22aa      	movs	r2, #170	; 0xaa
   11d7c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    system_controller->PLL0FEED = 0x55;
   11d80:	4b24      	ldr	r3, [pc, #144]	; (11e14 <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0x15c>)
   11d82:	681b      	ldr	r3, [r3, #0]
   11d84:	2255      	movs	r2, #85	; 0x55
   11d86:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    while (!(system_controller->PLL0STAT >> kPlock & 1) &&
   11d8a:	4b22      	ldr	r3, [pc, #136]	; (11e14 <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0x15c>)
   11d8c:	681b      	ldr	r3, [r3, #0]
   11d8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   11d92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
   11d96:	2b00      	cmp	r3, #0
   11d98:	d109      	bne.n	11dae <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0xf6>
   11d9a:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
   11d9e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
   11da2:	42a2      	cmp	r2, r4
   11da4:	bf08      	it	eq
   11da6:	4299      	cmpeq	r1, r3
   11da8:	d201      	bcs.n	11dae <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0xf6>
   11daa:	2301      	movs	r3, #1
   11dac:	e000      	b.n	11db0 <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0xf8>
   11dae:	2300      	movs	r3, #0
   11db0:	2b00      	cmp	r3, #0
   11db2:	d004      	beq.n	11dbe <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0x106>
           (current_time < timeout_time))
    {
      current_time = Milliseconds();
   11db4:	f7ff f828 	bl	10e08 <Milliseconds()>
   11db8:	e9cd 0108 	strd	r0, r1, [sp, #32]
    while (!(system_controller->PLL0STAT >> kPlock & 1) &&
   11dbc:	e7e5      	b.n	11d8a <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0xd2>
    }
    if (!(system_controller->PLL0STAT >> kPlock & 1) &&
   11dbe:	4b15      	ldr	r3, [pc, #84]	; (11e14 <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0x15c>)
   11dc0:	681b      	ldr	r3, [r3, #0]
   11dc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   11dc6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
   11dca:	2b00      	cmp	r3, #0
   11dcc:	d109      	bne.n	11de2 <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0x12a>
   11dce:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
   11dd2:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
   11dd6:	42a2      	cmp	r2, r4
   11dd8:	bf08      	it	eq
   11dda:	4299      	cmpeq	r1, r3
   11ddc:	d301      	bcc.n	11de2 <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0x12a>
   11dde:	2301      	movs	r3, #1
   11de0:	e000      	b.n	11de4 <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0x12c>
   11de2:	2300      	movs	r3, #0
   11de4:	2b00      	cmp	r3, #0
   11de6:	d00e      	beq.n	11e06 <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0x14e>
        (current_time >= timeout_time))
    {
      SJ2_ASSERT_FATAL(false,
   11de8:	f240 1343 	movw	r3, #323	; 0x143
   11dec:	4a0a      	ldr	r2, [pc, #40]	; (11e18 <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0x160>)
   11dee:	490b      	ldr	r1, [pc, #44]	; (11e1c <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0x164>)
   11df0:	480b      	ldr	r0, [pc, #44]	; (11e20 <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0x168>)
   11df2:	f005 fce9 	bl	177c8 <printf>
   11df6:	480b      	ldr	r0, [pc, #44]	; (11e24 <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0x16c>)
   11df8:	f004 fa36 	bl	16268 <puts>
   11dfc:	2100      	movs	r1, #0
   11dfe:	2001      	movs	r0, #1
   11e00:	f7fe ff6a 	bl	10cd8 <debug::PrintBacktrace(bool, void*)>
   11e04:	e7fe      	b.n	11e04 <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0x14c>
                       "PLL lock could not be established before timeout");
      actual_speed = kDefaultIRCFrequency;
    }
    return (actual_speed - desired_speed_in_mhz);
   11e06:	f8bd 3000 	ldrh.w	r3, [sp]
   11e0a:	9a07      	ldr	r2, [sp, #28]
   11e0c:	1ad3      	subs	r3, r2, r3
  }
   11e0e:	4618      	mov	r0, r3
   11e10:	b00a      	add	sp, #40	; 0x28
   11e12:	bd10      	pop	{r4, pc}
   11e14:	10000060 	.word	0x10000060
   11e18:	00019c4c 	.word	0x00019c4c
   11e1c:	00019900 	.word	0x00019900
   11e20:	00019538 	.word	0x00019538
   11e24:	00019388 	.word	0x00019388

00011e28 <Lpc40xxSystemController::SetCpuClockDivider(unsigned char)>:
                       "PLL lock could not be established before timeout");
    }
    return (actual_speed - desired_speed_in_mhz);
  }

  void SetCpuClockDivider(uint8_t cpu_divider)
   11e28:	b500      	push	{lr}
   11e2a:	b083      	sub	sp, #12
   11e2c:	9001      	str	r0, [sp, #4]
   11e2e:	460b      	mov	r3, r1
   11e30:	f88d 3003 	strb.w	r3, [sp, #3]
  {
    SJ2_ASSERT_FATAL(cpu_divider < 32, "Divider mustn't exceed 32");
   11e34:	f89d 3003 	ldrb.w	r3, [sp, #3]
   11e38:	2b1f      	cmp	r3, #31
   11e3a:	d90e      	bls.n	11e5a <Lpc40xxSystemController::SetCpuClockDivider(unsigned char)+0x32>
   11e3c:	f240 136f 	movw	r3, #367	; 0x16f
   11e40:	4a0e      	ldr	r2, [pc, #56]	; (11e7c <Lpc40xxSystemController::SetCpuClockDivider(unsigned char)+0x54>)
   11e42:	490f      	ldr	r1, [pc, #60]	; (11e80 <Lpc40xxSystemController::SetCpuClockDivider(unsigned char)+0x58>)
   11e44:	480f      	ldr	r0, [pc, #60]	; (11e84 <Lpc40xxSystemController::SetCpuClockDivider(unsigned char)+0x5c>)
   11e46:	f005 fcbf 	bl	177c8 <printf>
   11e4a:	480f      	ldr	r0, [pc, #60]	; (11e88 <Lpc40xxSystemController::SetCpuClockDivider(unsigned char)+0x60>)
   11e4c:	f004 fa0c 	bl	16268 <puts>
   11e50:	2100      	movs	r1, #0
   11e52:	2001      	movs	r0, #1
   11e54:	f7fe ff40 	bl	10cd8 <debug::PrintBacktrace(bool, void*)>
   11e58:	e7fe      	b.n	11e58 <Lpc40xxSystemController::SetCpuClockDivider(unsigned char)+0x30>
    system_controller->CCLKSEL =
        (system_controller->CCLKSEL & ~kClearCpuDivider) | cpu_divider;
   11e5a:	4b0c      	ldr	r3, [pc, #48]	; (11e8c <Lpc40xxSystemController::SetCpuClockDivider(unsigned char)+0x64>)
   11e5c:	681b      	ldr	r3, [r3, #0]
   11e5e:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   11e62:	f023 011f 	bic.w	r1, r3, #31
   11e66:	f89d 2003 	ldrb.w	r2, [sp, #3]
    system_controller->CCLKSEL =
   11e6a:	4b08      	ldr	r3, [pc, #32]	; (11e8c <Lpc40xxSystemController::SetCpuClockDivider(unsigned char)+0x64>)
   11e6c:	681b      	ldr	r3, [r3, #0]
        (system_controller->CCLKSEL & ~kClearCpuDivider) | cpu_divider;
   11e6e:	430a      	orrs	r2, r1
    system_controller->CCLKSEL =
   11e70:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
  }
   11e74:	bf00      	nop
   11e76:	b003      	add	sp, #12
   11e78:	f85d fb04 	ldr.w	pc, [sp], #4
   11e7c:	00019d04 	.word	0x00019d04
   11e80:	00019918 	.word	0x00019918
   11e84:	000195e0 	.word	0x000195e0
   11e88:	00019388 	.word	0x00019388
   11e8c:	10000060 	.word	0x10000060

00011e90 <Lpc40xxSystemController::SetEmcClockDivider(Lpc40xxSystemController::EmcDivider)>:

  void SetEmcClockDivider(EmcDivider emc_divider)
   11e90:	b082      	sub	sp, #8
   11e92:	9001      	str	r0, [sp, #4]
   11e94:	460b      	mov	r3, r1
   11e96:	f88d 3003 	strb.w	r3, [sp, #3]
  {
    system_controller->EMCCLKSEL =
        (system_controller->EMCCLKSEL & ~kClearEmcDivider) |
   11e9a:	4b08      	ldr	r3, [pc, #32]	; (11ebc <Lpc40xxSystemController::SetEmcClockDivider(Lpc40xxSystemController::EmcDivider)+0x2c>)
   11e9c:	681b      	ldr	r3, [r3, #0]
   11e9e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   11ea2:	f023 0101 	bic.w	r1, r3, #1
        static_cast<uint8_t>(emc_divider);
   11ea6:	f89d 2003 	ldrb.w	r2, [sp, #3]
    system_controller->EMCCLKSEL =
   11eaa:	4b04      	ldr	r3, [pc, #16]	; (11ebc <Lpc40xxSystemController::SetEmcClockDivider(Lpc40xxSystemController::EmcDivider)+0x2c>)
   11eac:	681b      	ldr	r3, [r3, #0]
        (system_controller->EMCCLKSEL & ~kClearEmcDivider) |
   11eae:	430a      	orrs	r2, r1
    system_controller->EMCCLKSEL =
   11eb0:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }
   11eb4:	bf00      	nop
   11eb6:	b002      	add	sp, #8
   11eb8:	4770      	bx	lr
   11eba:	bf00      	nop
   11ebc:	10000060 	.word	0x10000060

00011ec0 <int util::Value<Ssp::Peripheral, int>(Ssp::Peripheral)>:
constexpr Type Value(Enum enum_type_value)
   11ec0:	b530      	push	{r4, r5, lr}
   11ec2:	b083      	sub	sp, #12
   11ec4:	4675      	mov	r5, lr
   11ec6:	9001      	str	r0, [sp, #4]
   11ec8:	462b      	mov	r3, r5
   11eca:	4619      	mov	r1, r3
   11ecc:	4806      	ldr	r0, [pc, #24]	; (11ee8 <int util::Value<Ssp::Peripheral, int>(Ssp::Peripheral)+0x28>)
   11ece:	f004 f9fb 	bl	162c8 <__cyg_profile_func_enter>
  return static_cast<Type>(enum_type_value);
   11ed2:	9c01      	ldr	r4, [sp, #4]
   11ed4:	462b      	mov	r3, r5
   11ed6:	4619      	mov	r1, r3
   11ed8:	4803      	ldr	r0, [pc, #12]	; (11ee8 <int util::Value<Ssp::Peripheral, int>(Ssp::Peripheral)+0x28>)
   11eda:	f004 fa09 	bl	162f0 <__cyg_profile_func_exit>
   11ede:	4623      	mov	r3, r4
}
   11ee0:	4618      	mov	r0, r3
   11ee2:	b003      	add	sp, #12
   11ee4:	bd30      	pop	{r4, r5, pc}
   11ee6:	bf00      	nop
   11ee8:	00011ec1 	.word	0x00011ec1

00011eec <SspInterface::SspInterface()>:
#include "L0_LowLevel/system_controller.hpp"
#include "L1_Drivers/pin.hpp"
#include "utility/bit.hpp"
#include "utility/enum.hpp"

class SspInterface
   11eec:	b530      	push	{r4, r5, lr}
   11eee:	b083      	sub	sp, #12
   11ef0:	4675      	mov	r5, lr
   11ef2:	9001      	str	r0, [sp, #4]
   11ef4:	462b      	mov	r3, r5
   11ef6:	4619      	mov	r1, r3
   11ef8:	4807      	ldr	r0, [pc, #28]	; (11f18 <SspInterface::SspInterface()+0x2c>)
   11efa:	f004 f9e5 	bl	162c8 <__cyg_profile_func_enter>
   11efe:	4a07      	ldr	r2, [pc, #28]	; (11f1c <SspInterface::SspInterface()+0x30>)
   11f00:	9b01      	ldr	r3, [sp, #4]
   11f02:	601a      	str	r2, [r3, #0]
   11f04:	9c01      	ldr	r4, [sp, #4]
   11f06:	462b      	mov	r3, r5
   11f08:	4619      	mov	r1, r3
   11f0a:	4803      	ldr	r0, [pc, #12]	; (11f18 <SspInterface::SspInterface()+0x2c>)
   11f0c:	f004 f9f0 	bl	162f0 <__cyg_profile_func_exit>
   11f10:	4623      	mov	r3, r4
   11f12:	4618      	mov	r0, r3
   11f14:	b003      	add	sp, #12
   11f16:	bd30      	pop	{r4, r5, pc}
   11f18:	00011eed 	.word	0x00011eed
   11f1c:	00019a70 	.word	0x00019a70

00011f20 <PinInterface::PinInterface(PinInterface const&)>:
class PinInterface
   11f20:	b530      	push	{r4, r5, lr}
   11f22:	b083      	sub	sp, #12
   11f24:	4675      	mov	r5, lr
   11f26:	9001      	str	r0, [sp, #4]
   11f28:	9100      	str	r1, [sp, #0]
   11f2a:	462b      	mov	r3, r5
   11f2c:	4619      	mov	r1, r3
   11f2e:	4808      	ldr	r0, [pc, #32]	; (11f50 <PinInterface::PinInterface(PinInterface const&)+0x30>)
   11f30:	f004 f9ca 	bl	162c8 <__cyg_profile_func_enter>
   11f34:	4a07      	ldr	r2, [pc, #28]	; (11f54 <PinInterface::PinInterface(PinInterface const&)+0x34>)
   11f36:	9b01      	ldr	r3, [sp, #4]
   11f38:	601a      	str	r2, [r3, #0]
   11f3a:	9c01      	ldr	r4, [sp, #4]
   11f3c:	462b      	mov	r3, r5
   11f3e:	4619      	mov	r1, r3
   11f40:	4803      	ldr	r0, [pc, #12]	; (11f50 <PinInterface::PinInterface(PinInterface const&)+0x30>)
   11f42:	f004 f9d5 	bl	162f0 <__cyg_profile_func_exit>
   11f46:	4623      	mov	r3, r4
   11f48:	4618      	mov	r0, r3
   11f4a:	b003      	add	sp, #12
   11f4c:	bd30      	pop	{r4, r5, pc}
   11f4e:	bf00      	nop
   11f50:	00011f21 	.word	0x00011f21
   11f54:	00019bac 	.word	0x00019bac

00011f58 <Pin::Pin(Pin const&)>:
class Pin : public PinInterface
   11f58:	b530      	push	{r4, r5, lr}
   11f5a:	b083      	sub	sp, #12
   11f5c:	4675      	mov	r5, lr
   11f5e:	9001      	str	r0, [sp, #4]
   11f60:	9100      	str	r1, [sp, #0]
   11f62:	462b      	mov	r3, r5
   11f64:	4619      	mov	r1, r3
   11f66:	480f      	ldr	r0, [pc, #60]	; (11fa4 <Pin::Pin(Pin const&)+0x4c>)
   11f68:	f004 f9ae 	bl	162c8 <__cyg_profile_func_enter>
   11f6c:	9b01      	ldr	r3, [sp, #4]
   11f6e:	9a00      	ldr	r2, [sp, #0]
   11f70:	4611      	mov	r1, r2
   11f72:	4618      	mov	r0, r3
   11f74:	f7ff ffd4 	bl	11f20 <PinInterface::PinInterface(PinInterface const&)>
   11f78:	4a0b      	ldr	r2, [pc, #44]	; (11fa8 <Pin::Pin(Pin const&)+0x50>)
   11f7a:	9b01      	ldr	r3, [sp, #4]
   11f7c:	601a      	str	r2, [r3, #0]
   11f7e:	9b00      	ldr	r3, [sp, #0]
   11f80:	791a      	ldrb	r2, [r3, #4]
   11f82:	9b01      	ldr	r3, [sp, #4]
   11f84:	711a      	strb	r2, [r3, #4]
   11f86:	9b00      	ldr	r3, [sp, #0]
   11f88:	795a      	ldrb	r2, [r3, #5]
   11f8a:	9b01      	ldr	r3, [sp, #4]
   11f8c:	715a      	strb	r2, [r3, #5]
   11f8e:	9c01      	ldr	r4, [sp, #4]
   11f90:	462b      	mov	r3, r5
   11f92:	4619      	mov	r1, r3
   11f94:	4803      	ldr	r0, [pc, #12]	; (11fa4 <Pin::Pin(Pin const&)+0x4c>)
   11f96:	f004 f9ab 	bl	162f0 <__cyg_profile_func_exit>
   11f9a:	4623      	mov	r3, r4
   11f9c:	4618      	mov	r0, r3
   11f9e:	b003      	add	sp, #12
   11fa0:	bd30      	pop	{r4, r5, pc}
   11fa2:	bf00      	nop
   11fa4:	00011f59 	.word	0x00011f59
   11fa8:	00019b70 	.word	0x00019b70

00011fac <Ssp::Ssp(Ssp::Peripheral)>:
        pssp_(Peripheral::kSsp0)
  {
  }

  /// User modified constructor. Must be followed by Set functions.
  explicit constexpr Ssp(Peripheral set_pssp)
   11fac:	b530      	push	{r4, r5, lr}
   11fae:	b083      	sub	sp, #12
   11fb0:	4675      	mov	r5, lr
   11fb2:	9001      	str	r0, [sp, #4]
   11fb4:	9100      	str	r1, [sp, #0]
   11fb6:	462b      	mov	r3, r5
   11fb8:	4619      	mov	r1, r3
   11fba:	4831      	ldr	r0, [pc, #196]	; (12080 <Ssp::Ssp(Ssp::Peripheral)+0xd4>)
   11fbc:	f004 f984 	bl	162c8 <__cyg_profile_func_enter>
        miso_(&miso_pin_),
        sck_(&sck_pin_),
        mosi_pin_(kSspPinMatrix[util::Value(set_pssp)][MatrixLookup::kMosi]),
        miso_pin_(kSspPinMatrix[util::Value(set_pssp)][MatrixLookup::kMiso]),
        sck_pin_(kSspPinMatrix[util::Value(set_pssp)][MatrixLookup::kSck]),
        pssp_(set_pssp)
   11fc0:	9b01      	ldr	r3, [sp, #4]
   11fc2:	4618      	mov	r0, r3
   11fc4:	f7ff ff92 	bl	11eec <SspInterface::SspInterface()>
   11fc8:	9b01      	ldr	r3, [sp, #4]
   11fca:	3304      	adds	r3, #4
   11fcc:	4618      	mov	r0, r3
   11fce:	f7ff fc9d 	bl	1190c <Lpc40xxSystemController::Lpc40xxSystemController()>
   11fd2:	4a2c      	ldr	r2, [pc, #176]	; (12084 <Ssp::Ssp(Ssp::Peripheral)+0xd8>)
   11fd4:	9b01      	ldr	r3, [sp, #4]
   11fd6:	601a      	str	r2, [r3, #0]
   11fd8:	4a2b      	ldr	r2, [pc, #172]	; (12088 <Ssp::Ssp(Ssp::Peripheral)+0xdc>)
   11fda:	9b01      	ldr	r3, [sp, #4]
   11fdc:	605a      	str	r2, [r3, #4]
   11fde:	9b01      	ldr	r3, [sp, #4]
   11fe0:	f103 0214 	add.w	r2, r3, #20
   11fe4:	9b01      	ldr	r3, [sp, #4]
   11fe6:	609a      	str	r2, [r3, #8]
   11fe8:	9b01      	ldr	r3, [sp, #4]
   11fea:	f103 021c 	add.w	r2, r3, #28
   11fee:	9b01      	ldr	r3, [sp, #4]
   11ff0:	60da      	str	r2, [r3, #12]
   11ff2:	9b01      	ldr	r3, [sp, #4]
   11ff4:	f103 0224 	add.w	r2, r3, #36	; 0x24
   11ff8:	9b01      	ldr	r3, [sp, #4]
   11ffa:	611a      	str	r2, [r3, #16]
   11ffc:	9b01      	ldr	r3, [sp, #4]
   11ffe:	f103 0414 	add.w	r4, r3, #20
        mosi_pin_(kSspPinMatrix[util::Value(set_pssp)][MatrixLookup::kMosi]),
   12002:	9800      	ldr	r0, [sp, #0]
   12004:	f7ff ff5c 	bl	11ec0 <int util::Value<Ssp::Peripheral, int>(Ssp::Peripheral)>
   12008:	4602      	mov	r2, r0
        pssp_(set_pssp)
   1200a:	4613      	mov	r3, r2
   1200c:	005b      	lsls	r3, r3, #1
   1200e:	4413      	add	r3, r2
   12010:	00db      	lsls	r3, r3, #3
   12012:	4a1e      	ldr	r2, [pc, #120]	; (1208c <Ssp::Ssp(Ssp::Peripheral)+0xe0>)
   12014:	4413      	add	r3, r2
   12016:	4619      	mov	r1, r3
   12018:	4620      	mov	r0, r4
   1201a:	f7ff ff9d 	bl	11f58 <Pin::Pin(Pin const&)>
   1201e:	9b01      	ldr	r3, [sp, #4]
   12020:	f103 041c 	add.w	r4, r3, #28
        miso_pin_(kSspPinMatrix[util::Value(set_pssp)][MatrixLookup::kMiso]),
   12024:	9800      	ldr	r0, [sp, #0]
   12026:	f7ff ff4b 	bl	11ec0 <int util::Value<Ssp::Peripheral, int>(Ssp::Peripheral)>
   1202a:	4602      	mov	r2, r0
        pssp_(set_pssp)
   1202c:	4613      	mov	r3, r2
   1202e:	005b      	lsls	r3, r3, #1
   12030:	4413      	add	r3, r2
   12032:	00db      	lsls	r3, r3, #3
   12034:	3308      	adds	r3, #8
   12036:	4a15      	ldr	r2, [pc, #84]	; (1208c <Ssp::Ssp(Ssp::Peripheral)+0xe0>)
   12038:	4413      	add	r3, r2
   1203a:	4619      	mov	r1, r3
   1203c:	4620      	mov	r0, r4
   1203e:	f7ff ff8b 	bl	11f58 <Pin::Pin(Pin const&)>
   12042:	9b01      	ldr	r3, [sp, #4]
   12044:	f103 0424 	add.w	r4, r3, #36	; 0x24
        sck_pin_(kSspPinMatrix[util::Value(set_pssp)][MatrixLookup::kSck]),
   12048:	9800      	ldr	r0, [sp, #0]
   1204a:	f7ff ff39 	bl	11ec0 <int util::Value<Ssp::Peripheral, int>(Ssp::Peripheral)>
   1204e:	4602      	mov	r2, r0
        pssp_(set_pssp)
   12050:	4613      	mov	r3, r2
   12052:	005b      	lsls	r3, r3, #1
   12054:	4413      	add	r3, r2
   12056:	00db      	lsls	r3, r3, #3
   12058:	3310      	adds	r3, #16
   1205a:	4a0c      	ldr	r2, [pc, #48]	; (1208c <Ssp::Ssp(Ssp::Peripheral)+0xe0>)
   1205c:	4413      	add	r3, r2
   1205e:	4619      	mov	r1, r3
   12060:	4620      	mov	r0, r4
   12062:	f7ff ff79 	bl	11f58 <Pin::Pin(Pin const&)>
   12066:	9b01      	ldr	r3, [sp, #4]
   12068:	9a00      	ldr	r2, [sp, #0]
   1206a:	62da      	str	r2, [r3, #44]	; 0x2c
  {
  }
   1206c:	9c01      	ldr	r4, [sp, #4]
   1206e:	462b      	mov	r3, r5
   12070:	4619      	mov	r1, r3
   12072:	4803      	ldr	r0, [pc, #12]	; (12080 <Ssp::Ssp(Ssp::Peripheral)+0xd4>)
   12074:	f004 f93c 	bl	162f0 <__cyg_profile_func_exit>
   12078:	4623      	mov	r3, r4
   1207a:	4618      	mov	r0, r3
   1207c:	b003      	add	sp, #12
   1207e:	bd30      	pop	{r4, r5, pc}
   12080:	00011fad 	.word	0x00011fad
   12084:	00019a24 	.word	0x00019a24
   12088:	00019a4c 	.word	0x00019a4c
   1208c:	00019934 	.word	0x00019934

00012090 <Ssp::Initialize()>:
  }

  /// Powers on the peripheral, sets the peripheral clock, format, and data
  /// size, and enables the SSP pins for communication see and more.
  /// See page 601 of user manual UM10562 LPC408x/407x for more details.
  void Initialize() override
   12090:	b570      	push	{r4, r5, r6, lr}
   12092:	b086      	sub	sp, #24
   12094:	4676      	mov	r6, lr
   12096:	9001      	str	r0, [sp, #4]
   12098:	4633      	mov	r3, r6
   1209a:	4619      	mov	r1, r3
   1209c:	4830      	ldr	r0, [pc, #192]	; (12160 <Ssp::Initialize()+0xd0>)
   1209e:	f004 f913 	bl	162c8 <__cyg_profile_func_enter>
  {
    uint32_t pssp = util::Value(pssp_);
   120a2:	9b01      	ldr	r3, [sp, #4]
   120a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   120a6:	4618      	mov	r0, r3
   120a8:	f7ff ff0a 	bl	11ec0 <int util::Value<Ssp::Peripheral, int>(Ssp::Peripheral)>
   120ac:	4603      	mov	r3, r0
   120ae:	9305      	str	r3, [sp, #20]
    // Power up peripheral
    PowerUpPeripheral(kPowerBit[pssp]);
   120b0:	9b01      	ldr	r3, [sp, #4]
   120b2:	1d18      	adds	r0, r3, #4
   120b4:	9b01      	ldr	r3, [sp, #4]
   120b6:	685b      	ldr	r3, [r3, #4]
   120b8:	3314      	adds	r3, #20
   120ba:	681b      	ldr	r3, [r3, #0]
   120bc:	9a05      	ldr	r2, [sp, #20]
   120be:	0092      	lsls	r2, r2, #2
   120c0:	4928      	ldr	r1, [pc, #160]	; (12164 <Ssp::Initialize()+0xd4>)
   120c2:	440a      	add	r2, r1
   120c4:	4611      	mov	r1, r2
   120c6:	4798      	blx	r3
    // Enable SSP pins
    mosi_->SetPinFunction(kPinSelect[pssp]);
   120c8:	9b01      	ldr	r3, [sp, #4]
   120ca:	6898      	ldr	r0, [r3, #8]
   120cc:	9b01      	ldr	r3, [sp, #4]
   120ce:	689b      	ldr	r3, [r3, #8]
   120d0:	681b      	ldr	r3, [r3, #0]
   120d2:	681b      	ldr	r3, [r3, #0]
   120d4:	4924      	ldr	r1, [pc, #144]	; (12168 <Ssp::Initialize()+0xd8>)
   120d6:	9a05      	ldr	r2, [sp, #20]
   120d8:	440a      	add	r2, r1
   120da:	7812      	ldrb	r2, [r2, #0]
   120dc:	4611      	mov	r1, r2
   120de:	4798      	blx	r3
    miso_->SetPinFunction(kPinSelect[pssp]);
   120e0:	9b01      	ldr	r3, [sp, #4]
   120e2:	68d8      	ldr	r0, [r3, #12]
   120e4:	9b01      	ldr	r3, [sp, #4]
   120e6:	68db      	ldr	r3, [r3, #12]
   120e8:	681b      	ldr	r3, [r3, #0]
   120ea:	681b      	ldr	r3, [r3, #0]
   120ec:	491e      	ldr	r1, [pc, #120]	; (12168 <Ssp::Initialize()+0xd8>)
   120ee:	9a05      	ldr	r2, [sp, #20]
   120f0:	440a      	add	r2, r1
   120f2:	7812      	ldrb	r2, [r2, #0]
   120f4:	4611      	mov	r1, r2
   120f6:	4798      	blx	r3
    sck_->SetPinFunction(kPinSelect[pssp]);
   120f8:	9b01      	ldr	r3, [sp, #4]
   120fa:	6918      	ldr	r0, [r3, #16]
   120fc:	9b01      	ldr	r3, [sp, #4]
   120fe:	691b      	ldr	r3, [r3, #16]
   12100:	681b      	ldr	r3, [r3, #0]
   12102:	681b      	ldr	r3, [r3, #0]
   12104:	4918      	ldr	r1, [pc, #96]	; (12168 <Ssp::Initialize()+0xd8>)
   12106:	9a05      	ldr	r2, [sp, #20]
   12108:	440a      	add	r2, r1
   1210a:	7812      	ldrb	r2, [r2, #0]
   1210c:	4611      	mov	r1, r2
   1210e:	4798      	blx	r3
    // Enable SSP
    ssp_registers[pssp]->CR1 = bit::Set(ssp_registers[pssp]->CR1, kSspEnable);
   12110:	4a16      	ldr	r2, [pc, #88]	; (1216c <Ssp::Initialize()+0xdc>)
   12112:	9b05      	ldr	r3, [sp, #20]
   12114:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12118:	685b      	ldr	r3, [r3, #4]
   1211a:	4914      	ldr	r1, [pc, #80]	; (1216c <Ssp::Initialize()+0xdc>)
   1211c:	9a05      	ldr	r2, [sp, #20]
   1211e:	f851 4022 	ldr.w	r4, [r1, r2, lsl #2]
   12122:	9304      	str	r3, [sp, #16]
   12124:	2301      	movs	r3, #1
   12126:	9303      	str	r3, [sp, #12]
   12128:	4633      	mov	r3, r6
   1212a:	4619      	mov	r1, r3
   1212c:	4810      	ldr	r0, [pc, #64]	; (12170 <Ssp::Initialize()+0xe0>)
   1212e:	f004 f8cb 	bl	162c8 <__cyg_profile_func_enter>
[[gnu::always_inline]] [[nodiscard]]
constexpr T Set(T target, uint32_t position)
{
  static_assert(std::numeric_limits<T>::is_integer,
                "Set only accepts intergers.");
  return target | (1 << position);
   12132:	2201      	movs	r2, #1
   12134:	9b03      	ldr	r3, [sp, #12]
   12136:	fa02 f303 	lsl.w	r3, r2, r3
   1213a:	461a      	mov	r2, r3
   1213c:	9b04      	ldr	r3, [sp, #16]
   1213e:	ea42 0503 	orr.w	r5, r2, r3
   12142:	4633      	mov	r3, r6
   12144:	4619      	mov	r1, r3
   12146:	480a      	ldr	r0, [pc, #40]	; (12170 <Ssp::Initialize()+0xe0>)
   12148:	f004 f8d2 	bl	162f0 <__cyg_profile_func_exit>
   1214c:	6065      	str	r5, [r4, #4]
   1214e:	4633      	mov	r3, r6
   12150:	4619      	mov	r1, r3
   12152:	4803      	ldr	r0, [pc, #12]	; (12160 <Ssp::Initialize()+0xd0>)
   12154:	f004 f8cc 	bl	162f0 <__cyg_profile_func_exit>
  }
   12158:	bf00      	nop
   1215a:	b006      	add	sp, #24
   1215c:	bd70      	pop	{r4, r5, r6, pc}
   1215e:	bf00      	nop
   12160:	00012091 	.word	0x00012091
   12164:	0001997c 	.word	0x0001997c
   12168:	00019930 	.word	0x00019930
   1216c:	10000068 	.word	0x10000068
   12170:	00014855 	.word	0x00014855

00012174 <Ssp::IsTransferRegBusy()>:

  /// Checks if the SSP controller is idle.
  /// @returns true if the controller is sending or receiving a data frame and
  /// false if it is idle.
  bool IsTransferRegBusy() override
   12174:	b530      	push	{r4, r5, lr}
   12176:	b085      	sub	sp, #20
   12178:	4675      	mov	r5, lr
   1217a:	9001      	str	r0, [sp, #4]
   1217c:	462b      	mov	r3, r5
   1217e:	4619      	mov	r1, r3
   12180:	4817      	ldr	r0, [pc, #92]	; (121e0 <Ssp::IsTransferRegBusy()+0x6c>)
   12182:	f004 f8a1 	bl	162c8 <__cyg_profile_func_enter>
  {
    return (bit::Read(ssp_registers[util::Value(pssp_)]->SR, kDataLineIdleBit));
   12186:	9b01      	ldr	r3, [sp, #4]
   12188:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1218a:	4618      	mov	r0, r3
   1218c:	f7ff fe98 	bl	11ec0 <int util::Value<Ssp::Peripheral, int>(Ssp::Peripheral)>
   12190:	4602      	mov	r2, r0
   12192:	4b14      	ldr	r3, [pc, #80]	; (121e4 <Ssp::IsTransferRegBusy()+0x70>)
   12194:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   12198:	68db      	ldr	r3, [r3, #12]
   1219a:	9303      	str	r3, [sp, #12]
   1219c:	2304      	movs	r3, #4
   1219e:	9302      	str	r3, [sp, #8]
   121a0:	462b      	mov	r3, r5
   121a2:	4619      	mov	r1, r3
   121a4:	4810      	ldr	r0, [pc, #64]	; (121e8 <Ssp::IsTransferRegBusy()+0x74>)
   121a6:	f004 f88f 	bl	162c8 <__cyg_profile_func_enter>
[[gnu::always_inline]][[nodiscard]] constexpr bool Read(T target,
                                                        uint32_t position)
{
  static_assert(std::numeric_limits<T>::is_integer,
                "Read only accepts intergers.");
  return static_cast<bool>(target & (1 << position));
   121aa:	2201      	movs	r2, #1
   121ac:	9b02      	ldr	r3, [sp, #8]
   121ae:	fa02 f303 	lsl.w	r3, r2, r3
   121b2:	461a      	mov	r2, r3
   121b4:	9b03      	ldr	r3, [sp, #12]
   121b6:	4013      	ands	r3, r2
   121b8:	2b00      	cmp	r3, #0
   121ba:	bf14      	ite	ne
   121bc:	2301      	movne	r3, #1
   121be:	2300      	moveq	r3, #0
   121c0:	b2dc      	uxtb	r4, r3
   121c2:	462b      	mov	r3, r5
   121c4:	4619      	mov	r1, r3
   121c6:	4808      	ldr	r0, [pc, #32]	; (121e8 <Ssp::IsTransferRegBusy()+0x74>)
   121c8:	f004 f892 	bl	162f0 <__cyg_profile_func_exit>
   121cc:	462b      	mov	r3, r5
   121ce:	4619      	mov	r1, r3
   121d0:	4803      	ldr	r0, [pc, #12]	; (121e0 <Ssp::IsTransferRegBusy()+0x6c>)
   121d2:	f004 f88d 	bl	162f0 <__cyg_profile_func_exit>
   121d6:	4623      	mov	r3, r4
  }
   121d8:	4618      	mov	r0, r3
   121da:	b005      	add	sp, #20
   121dc:	bd30      	pop	{r4, r5, pc}
   121de:	bf00      	nop
   121e0:	00012175 	.word	0x00012175
   121e4:	10000068 	.word	0x10000068
   121e8:	00014891 	.word	0x00014891

000121ec <Ssp::Transfer(unsigned short)>:
  /// data register. This functions for both transmitting and
  /// receiving data. It is recommended this region be protected
  /// by a mutex.
  /// @param data - information to be placed in data register
  /// @return - received data from external device
  uint16_t Transfer(uint16_t data) override
   121ec:	b530      	push	{r4, r5, lr}
   121ee:	b085      	sub	sp, #20
   121f0:	4675      	mov	r5, lr
   121f2:	9001      	str	r0, [sp, #4]
   121f4:	460b      	mov	r3, r1
   121f6:	f8ad 3002 	strh.w	r3, [sp, #2]
   121fa:	462b      	mov	r3, r5
   121fc:	4619      	mov	r1, r3
   121fe:	4814      	ldr	r0, [pc, #80]	; (12250 <Ssp::Transfer(unsigned short)+0x64>)
   12200:	f004 f862 	bl	162c8 <__cyg_profile_func_enter>
  {
    uint32_t pssp = util::Value(pssp_);
   12204:	9b01      	ldr	r3, [sp, #4]
   12206:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   12208:	4618      	mov	r0, r3
   1220a:	f7ff fe59 	bl	11ec0 <int util::Value<Ssp::Peripheral, int>(Ssp::Peripheral)>
   1220e:	4603      	mov	r3, r0
   12210:	9303      	str	r3, [sp, #12]

    ssp_registers[pssp]->DR = data;
   12212:	4a10      	ldr	r2, [pc, #64]	; (12254 <Ssp::Transfer(unsigned short)+0x68>)
   12214:	9b03      	ldr	r3, [sp, #12]
   12216:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1221a:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   1221e:	609a      	str	r2, [r3, #8]
    while (IsTransferRegBusy())
   12220:	9801      	ldr	r0, [sp, #4]
   12222:	f7ff ffa7 	bl	12174 <Ssp::IsTransferRegBusy()>
   12226:	4603      	mov	r3, r0
   12228:	2b00      	cmp	r3, #0
   1222a:	d001      	beq.n	12230 <Ssp::Transfer(unsigned short)+0x44>
    {
      continue;
   1222c:	bf00      	nop
    while (IsTransferRegBusy())
   1222e:	e7f7      	b.n	12220 <Ssp::Transfer(unsigned short)+0x34>
    }
    return static_cast<uint16_t>(ssp_registers[pssp]->DR);
   12230:	4a08      	ldr	r2, [pc, #32]	; (12254 <Ssp::Transfer(unsigned short)+0x68>)
   12232:	9b03      	ldr	r3, [sp, #12]
   12234:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12238:	689b      	ldr	r3, [r3, #8]
   1223a:	b29c      	uxth	r4, r3
   1223c:	462b      	mov	r3, r5
   1223e:	4619      	mov	r1, r3
   12240:	4803      	ldr	r0, [pc, #12]	; (12250 <Ssp::Transfer(unsigned short)+0x64>)
   12242:	f004 f855 	bl	162f0 <__cyg_profile_func_exit>
   12246:	4623      	mov	r3, r4
  }
   12248:	4618      	mov	r0, r3
   1224a:	b005      	add	sp, #20
   1224c:	bd30      	pop	{r4, r5, pc}
   1224e:	bf00      	nop
   12250:	000121ed 	.word	0x000121ed
   12254:	10000068 	.word	0x10000068

00012258 <Ssp::SetSpiMasterDefault()>:

  /// Sets up SSP peripheral as SPI master
  void SetSpiMasterDefault() override
   12258:	b510      	push	{r4, lr}
   1225a:	b086      	sub	sp, #24
   1225c:	4674      	mov	r4, lr
   1225e:	9003      	str	r0, [sp, #12]
   12260:	4623      	mov	r3, r4
   12262:	4619      	mov	r1, r3
   12264:	4812      	ldr	r0, [pc, #72]	; (122b0 <Ssp::SetSpiMasterDefault()+0x58>)
   12266:	f004 f82f 	bl	162c8 <__cyg_profile_func_enter>
  {
    constexpr bool kHighPolarity  = 1;
   1226a:	2301      	movs	r3, #1
   1226c:	f88d 3017 	strb.w	r3, [sp, #23]
    constexpr bool kPhase0        = 0;
   12270:	2300      	movs	r3, #0
   12272:	f88d 3016 	strb.w	r3, [sp, #22]
    constexpr uint8_t kScrDivider = 0;
   12276:	2300      	movs	r3, #0
   12278:	f88d 3015 	strb.w	r3, [sp, #21]
    constexpr uint8_t kPrescaler  = SJ2_SYSTEM_CLOCK_RATE_MHZ;
   1227c:	2330      	movs	r3, #48	; 0x30
   1227e:	f88d 3014 	strb.w	r3, [sp, #20]

    SetPeripheralMode(kMaster, kSpi, kEight);
   12282:	2307      	movs	r3, #7
   12284:	2200      	movs	r2, #0
   12286:	2100      	movs	r1, #0
   12288:	9803      	ldr	r0, [sp, #12]
   1228a:	f000 f85b 	bl	12344 <Ssp::SetPeripheralMode(SspInterface::MasterSlaveMode, SspInterface::FrameMode, SspInterface::DataSize)>
    SetClock(kHighPolarity, kPhase0, kScrDivider, kPrescaler);
   1228e:	2330      	movs	r3, #48	; 0x30
   12290:	9300      	str	r3, [sp, #0]
   12292:	2300      	movs	r3, #0
   12294:	2200      	movs	r2, #0
   12296:	2101      	movs	r1, #1
   12298:	9803      	ldr	r0, [sp, #12]
   1229a:	f000 fa09 	bl	126b0 <Ssp::SetClock(bool, bool, unsigned char, unsigned char)>
   1229e:	4623      	mov	r3, r4
   122a0:	4619      	mov	r1, r3
   122a2:	4803      	ldr	r0, [pc, #12]	; (122b0 <Ssp::SetSpiMasterDefault()+0x58>)
   122a4:	f004 f824 	bl	162f0 <__cyg_profile_func_exit>
  }
   122a8:	bf00      	nop
   122aa:	b006      	add	sp, #24
   122ac:	bd10      	pop	{r4, pc}
   122ae:	bf00      	nop
   122b0:	00012259 	.word	0x00012259

000122b4 <unsigned char util::Value<SspInterface::DataSize, unsigned char>(SspInterface::DataSize)>:
constexpr Type Value(Enum enum_type_value)
   122b4:	b530      	push	{r4, r5, lr}
   122b6:	b083      	sub	sp, #12
   122b8:	4675      	mov	r5, lr
   122ba:	4603      	mov	r3, r0
   122bc:	f88d 3007 	strb.w	r3, [sp, #7]
   122c0:	462b      	mov	r3, r5
   122c2:	4619      	mov	r1, r3
   122c4:	4806      	ldr	r0, [pc, #24]	; (122e0 <unsigned char util::Value<SspInterface::DataSize, unsigned char>(SspInterface::DataSize)+0x2c>)
   122c6:	f003 ffff 	bl	162c8 <__cyg_profile_func_enter>
  return static_cast<Type>(enum_type_value);
   122ca:	f89d 4007 	ldrb.w	r4, [sp, #7]
   122ce:	462b      	mov	r3, r5
   122d0:	4619      	mov	r1, r3
   122d2:	4803      	ldr	r0, [pc, #12]	; (122e0 <unsigned char util::Value<SspInterface::DataSize, unsigned char>(SspInterface::DataSize)+0x2c>)
   122d4:	f004 f80c 	bl	162f0 <__cyg_profile_func_exit>
   122d8:	4623      	mov	r3, r4
}
   122da:	4618      	mov	r0, r3
   122dc:	b003      	add	sp, #12
   122de:	bd30      	pop	{r4, r5, pc}
   122e0:	000122b5 	.word	0x000122b5

000122e4 <unsigned char util::Value<SspInterface::FrameMode, unsigned char>(SspInterface::FrameMode)>:
constexpr Type Value(Enum enum_type_value)
   122e4:	b530      	push	{r4, r5, lr}
   122e6:	b083      	sub	sp, #12
   122e8:	4675      	mov	r5, lr
   122ea:	4603      	mov	r3, r0
   122ec:	f88d 3007 	strb.w	r3, [sp, #7]
   122f0:	462b      	mov	r3, r5
   122f2:	4619      	mov	r1, r3
   122f4:	4806      	ldr	r0, [pc, #24]	; (12310 <unsigned char util::Value<SspInterface::FrameMode, unsigned char>(SspInterface::FrameMode)+0x2c>)
   122f6:	f003 ffe7 	bl	162c8 <__cyg_profile_func_enter>
  return static_cast<Type>(enum_type_value);
   122fa:	f89d 4007 	ldrb.w	r4, [sp, #7]
   122fe:	462b      	mov	r3, r5
   12300:	4619      	mov	r1, r3
   12302:	4803      	ldr	r0, [pc, #12]	; (12310 <unsigned char util::Value<SspInterface::FrameMode, unsigned char>(SspInterface::FrameMode)+0x2c>)
   12304:	f003 fff4 	bl	162f0 <__cyg_profile_func_exit>
   12308:	4623      	mov	r3, r4
}
   1230a:	4618      	mov	r0, r3
   1230c:	b003      	add	sp, #12
   1230e:	bd30      	pop	{r4, r5, pc}
   12310:	000122e5 	.word	0x000122e5

00012314 <unsigned char util::Value<SspInterface::MasterSlaveMode, unsigned char>(SspInterface::MasterSlaveMode)>:
constexpr Type Value(Enum enum_type_value)
   12314:	b530      	push	{r4, r5, lr}
   12316:	b083      	sub	sp, #12
   12318:	4675      	mov	r5, lr
   1231a:	4603      	mov	r3, r0
   1231c:	f88d 3007 	strb.w	r3, [sp, #7]
   12320:	462b      	mov	r3, r5
   12322:	4619      	mov	r1, r3
   12324:	4806      	ldr	r0, [pc, #24]	; (12340 <unsigned char util::Value<SspInterface::MasterSlaveMode, unsigned char>(SspInterface::MasterSlaveMode)+0x2c>)
   12326:	f003 ffcf 	bl	162c8 <__cyg_profile_func_enter>
  return static_cast<Type>(enum_type_value);
   1232a:	f89d 4007 	ldrb.w	r4, [sp, #7]
   1232e:	462b      	mov	r3, r5
   12330:	4619      	mov	r1, r3
   12332:	4803      	ldr	r0, [pc, #12]	; (12340 <unsigned char util::Value<SspInterface::MasterSlaveMode, unsigned char>(SspInterface::MasterSlaveMode)+0x2c>)
   12334:	f003 ffdc 	bl	162f0 <__cyg_profile_func_exit>
   12338:	4623      	mov	r3, r4
}
   1233a:	4618      	mov	r0, r3
   1233c:	b003      	add	sp, #12
   1233e:	bd30      	pop	{r4, r5, pc}
   12340:	00012315 	.word	0x00012315

00012344 <Ssp::SetPeripheralMode(SspInterface::MasterSlaveMode, SspInterface::FrameMode, SspInterface::DataSize)>:

  /// Sets the various modes for the Peripheral
  /// @param mode - master or slave mode
  /// @param frame - format for Peripheral data to use
  /// @param size - number of bits per frame
  void SetPeripheralMode(MasterSlaveMode mode, FrameMode frame,
   12344:	b570      	push	{r4, r5, r6, lr}
   12346:	b098      	sub	sp, #96	; 0x60
   12348:	4674      	mov	r4, lr
   1234a:	9001      	str	r0, [sp, #4]
   1234c:	4608      	mov	r0, r1
   1234e:	4611      	mov	r1, r2
   12350:	461a      	mov	r2, r3
   12352:	4603      	mov	r3, r0
   12354:	f88d 3003 	strb.w	r3, [sp, #3]
   12358:	460b      	mov	r3, r1
   1235a:	f88d 3002 	strb.w	r3, [sp, #2]
   1235e:	4613      	mov	r3, r2
   12360:	f88d 3001 	strb.w	r3, [sp, #1]
   12364:	4623      	mov	r3, r4
   12366:	4619      	mov	r1, r3
   12368:	4875      	ldr	r0, [pc, #468]	; (12540 <Ssp::SetPeripheralMode(SspInterface::MasterSlaveMode, SspInterface::FrameMode, SspInterface::DataSize)+0x1fc>)
   1236a:	f003 ffad 	bl	162c8 <__cyg_profile_func_enter>
                         DataSize size) override
  {
    uint32_t pssp = util::Value(pssp_);
   1236e:	9b01      	ldr	r3, [sp, #4]
   12370:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   12372:	4618      	mov	r0, r3
   12374:	f7ff fda4 	bl	11ec0 <int util::Value<Ssp::Peripheral, int>(Ssp::Peripheral)>
   12378:	4603      	mov	r3, r0
   1237a:	9317      	str	r3, [sp, #92]	; 0x5c
    // TODO(#371): Find a better alternative to powering up the peripheral for
    // every method.
    Ssp::PowerUpPeripheral(Ssp::kPowerBit[pssp]);
   1237c:	9b01      	ldr	r3, [sp, #4]
   1237e:	1d18      	adds	r0, r3, #4
   12380:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   12382:	009b      	lsls	r3, r3, #2
   12384:	4a6f      	ldr	r2, [pc, #444]	; (12544 <Ssp::SetPeripheralMode(SspInterface::MasterSlaveMode, SspInterface::FrameMode, SspInterface::DataSize)+0x200>)
   12386:	4413      	add	r3, r2
   12388:	4619      	mov	r1, r3
   1238a:	f7ff fb7b 	bl	11a84 <Lpc40xxSystemController::PowerUpPeripheral(SystemControllerInterface::PeripheralID const&)>
    if (frame == kMicro)
   1238e:	f89d 3002 	ldrb.w	r3, [sp, #2]
   12392:	2b02      	cmp	r3, #2
   12394:	d102      	bne.n	1239c <Ssp::SetPeripheralMode(SspInterface::MasterSlaveMode, SspInterface::FrameMode, SspInterface::DataSize)+0x58>
    {
      size = kEight;
   12396:	2307      	movs	r3, #7
   12398:	f88d 3001 	strb.w	r3, [sp, #1]
    }
    ssp_registers[pssp]->CR0 =
        bit::Insert(ssp_registers[pssp]->CR0, util::Value(size), kDataBit, 4);
   1239c:	4a6a      	ldr	r2, [pc, #424]	; (12548 <Ssp::SetPeripheralMode(SspInterface::MasterSlaveMode, SspInterface::FrameMode, SspInterface::DataSize)+0x204>)
   1239e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   123a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   123a4:	681e      	ldr	r6, [r3, #0]
   123a6:	f89d 3001 	ldrb.w	r3, [sp, #1]
   123aa:	4618      	mov	r0, r3
   123ac:	f7ff ff82 	bl	122b4 <unsigned char util::Value<SspInterface::DataSize, unsigned char>(SspInterface::DataSize)>
   123b0:	4603      	mov	r3, r0
   123b2:	4619      	mov	r1, r3
    ssp_registers[pssp]->CR0 =
   123b4:	4a64      	ldr	r2, [pc, #400]	; (12548 <Ssp::SetPeripheralMode(SspInterface::MasterSlaveMode, SspInterface::FrameMode, SspInterface::DataSize)+0x204>)
   123b6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   123b8:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
   123bc:	9608      	str	r6, [sp, #32]
   123be:	460b      	mov	r3, r1
   123c0:	f88d 301f 	strb.w	r3, [sp, #31]
   123c4:	2300      	movs	r3, #0
   123c6:	9306      	str	r3, [sp, #24]
   123c8:	2304      	movs	r3, #4
   123ca:	9305      	str	r3, [sp, #20]
   123cc:	4623      	mov	r3, r4
   123ce:	4619      	mov	r1, r3
   123d0:	485e      	ldr	r0, [pc, #376]	; (1254c <Ssp::SetPeripheralMode(SspInterface::MasterSlaveMode, SspInterface::FrameMode, SspInterface::DataSize)+0x208>)
   123d2:	f003 ff79 	bl	162c8 <__cyg_profile_func_enter>
  constexpr UnsignedT kFieldOfOnes = GenerateFieldOfOnes<T>();
   123d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   123da:	9304      	str	r3, [sp, #16]
  constexpr size_t kTargetWidth     = sizeof(T) * 8;
   123dc:	2320      	movs	r3, #32
   123de:	9303      	str	r3, [sp, #12]
  UnsignedT mask   = kFieldOfOnes >> (kTargetWidth - width);
   123e0:	9b05      	ldr	r3, [sp, #20]
   123e2:	f1c3 0320 	rsb	r3, r3, #32
   123e6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   123ea:	fa22 f303 	lsr.w	r3, r2, r3
   123ee:	9302      	str	r3, [sp, #8]
  target &= ~(mask << position);
   123f0:	9a02      	ldr	r2, [sp, #8]
   123f2:	9b06      	ldr	r3, [sp, #24]
   123f4:	fa02 f303 	lsl.w	r3, r2, r3
   123f8:	43db      	mvns	r3, r3
   123fa:	9a08      	ldr	r2, [sp, #32]
   123fc:	4013      	ands	r3, r2
   123fe:	9308      	str	r3, [sp, #32]
  target |= (value & mask) << position;
   12400:	f89d 201f 	ldrb.w	r2, [sp, #31]
   12404:	9b02      	ldr	r3, [sp, #8]
   12406:	401a      	ands	r2, r3
   12408:	9b06      	ldr	r3, [sp, #24]
   1240a:	fa02 f303 	lsl.w	r3, r2, r3
   1240e:	9a08      	ldr	r2, [sp, #32]
   12410:	4313      	orrs	r3, r2
   12412:	9308      	str	r3, [sp, #32]
  return target;
   12414:	9e08      	ldr	r6, [sp, #32]
   12416:	4623      	mov	r3, r4
   12418:	4619      	mov	r1, r3
   1241a:	484c      	ldr	r0, [pc, #304]	; (1254c <Ssp::SetPeripheralMode(SspInterface::MasterSlaveMode, SspInterface::FrameMode, SspInterface::DataSize)+0x208>)
   1241c:	f003 ff68 	bl	162f0 <__cyg_profile_func_exit>
   12420:	602e      	str	r6, [r5, #0]
    ssp_registers[pssp]->CR0 =
        bit::Insert(ssp_registers[pssp]->CR0, util::Value(frame), kFrameBit, 2);
   12422:	4a49      	ldr	r2, [pc, #292]	; (12548 <Ssp::SetPeripheralMode(SspInterface::MasterSlaveMode, SspInterface::FrameMode, SspInterface::DataSize)+0x204>)
   12424:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   12426:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1242a:	681e      	ldr	r6, [r3, #0]
   1242c:	f89d 3002 	ldrb.w	r3, [sp, #2]
   12430:	4618      	mov	r0, r3
   12432:	f7ff ff57 	bl	122e4 <unsigned char util::Value<SspInterface::FrameMode, unsigned char>(SspInterface::FrameMode)>
   12436:	4603      	mov	r3, r0
   12438:	4619      	mov	r1, r3
    ssp_registers[pssp]->CR0 =
   1243a:	4a43      	ldr	r2, [pc, #268]	; (12548 <Ssp::SetPeripheralMode(SspInterface::MasterSlaveMode, SspInterface::FrameMode, SspInterface::DataSize)+0x204>)
   1243c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   1243e:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
   12442:	960f      	str	r6, [sp, #60]	; 0x3c
   12444:	460b      	mov	r3, r1
   12446:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
   1244a:	2304      	movs	r3, #4
   1244c:	930d      	str	r3, [sp, #52]	; 0x34
   1244e:	2302      	movs	r3, #2
   12450:	930c      	str	r3, [sp, #48]	; 0x30
   12452:	4623      	mov	r3, r4
   12454:	4619      	mov	r1, r3
   12456:	483d      	ldr	r0, [pc, #244]	; (1254c <Ssp::SetPeripheralMode(SspInterface::MasterSlaveMode, SspInterface::FrameMode, SspInterface::DataSize)+0x208>)
   12458:	f003 ff36 	bl	162c8 <__cyg_profile_func_enter>
  constexpr UnsignedT kFieldOfOnes = GenerateFieldOfOnes<T>();
   1245c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   12460:	930b      	str	r3, [sp, #44]	; 0x2c
  constexpr size_t kTargetWidth     = sizeof(T) * 8;
   12462:	2320      	movs	r3, #32
   12464:	930a      	str	r3, [sp, #40]	; 0x28
  UnsignedT mask   = kFieldOfOnes >> (kTargetWidth - width);
   12466:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   12468:	f1c3 0320 	rsb	r3, r3, #32
   1246c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   12470:	fa22 f303 	lsr.w	r3, r2, r3
   12474:	9309      	str	r3, [sp, #36]	; 0x24
  target &= ~(mask << position);
   12476:	9a09      	ldr	r2, [sp, #36]	; 0x24
   12478:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1247a:	fa02 f303 	lsl.w	r3, r2, r3
   1247e:	43db      	mvns	r3, r3
   12480:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   12482:	4013      	ands	r3, r2
   12484:	930f      	str	r3, [sp, #60]	; 0x3c
  target |= (value & mask) << position;
   12486:	f89d 203b 	ldrb.w	r2, [sp, #59]	; 0x3b
   1248a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1248c:	401a      	ands	r2, r3
   1248e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   12490:	fa02 f303 	lsl.w	r3, r2, r3
   12494:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   12496:	4313      	orrs	r3, r2
   12498:	930f      	str	r3, [sp, #60]	; 0x3c
  return target;
   1249a:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
   1249c:	4623      	mov	r3, r4
   1249e:	4619      	mov	r1, r3
   124a0:	482a      	ldr	r0, [pc, #168]	; (1254c <Ssp::SetPeripheralMode(SspInterface::MasterSlaveMode, SspInterface::FrameMode, SspInterface::DataSize)+0x208>)
   124a2:	f003 ff25 	bl	162f0 <__cyg_profile_func_exit>
   124a6:	602e      	str	r6, [r5, #0]
    ssp_registers[pssp]->CR1 = bit::Insert(
        ssp_registers[pssp]->CR1, util::Value(mode), kMasterModeBit, 1);
   124a8:	4a27      	ldr	r2, [pc, #156]	; (12548 <Ssp::SetPeripheralMode(SspInterface::MasterSlaveMode, SspInterface::FrameMode, SspInterface::DataSize)+0x204>)
   124aa:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   124ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   124b0:	685e      	ldr	r6, [r3, #4]
    ssp_registers[pssp]->CR1 = bit::Insert(
   124b2:	f89d 3003 	ldrb.w	r3, [sp, #3]
   124b6:	4618      	mov	r0, r3
   124b8:	f7ff ff2c 	bl	12314 <unsigned char util::Value<SspInterface::MasterSlaveMode, unsigned char>(SspInterface::MasterSlaveMode)>
   124bc:	4603      	mov	r3, r0
   124be:	4619      	mov	r1, r3
   124c0:	4a21      	ldr	r2, [pc, #132]	; (12548 <Ssp::SetPeripheralMode(SspInterface::MasterSlaveMode, SspInterface::FrameMode, SspInterface::DataSize)+0x204>)
   124c2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   124c4:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
   124c8:	9616      	str	r6, [sp, #88]	; 0x58
   124ca:	460b      	mov	r3, r1
   124cc:	f88d 3057 	strb.w	r3, [sp, #87]	; 0x57
   124d0:	2302      	movs	r3, #2
   124d2:	9314      	str	r3, [sp, #80]	; 0x50
   124d4:	2301      	movs	r3, #1
   124d6:	9313      	str	r3, [sp, #76]	; 0x4c
   124d8:	4623      	mov	r3, r4
   124da:	4619      	mov	r1, r3
   124dc:	481b      	ldr	r0, [pc, #108]	; (1254c <Ssp::SetPeripheralMode(SspInterface::MasterSlaveMode, SspInterface::FrameMode, SspInterface::DataSize)+0x208>)
   124de:	f003 fef3 	bl	162c8 <__cyg_profile_func_enter>
  constexpr UnsignedT kFieldOfOnes = GenerateFieldOfOnes<T>();
   124e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   124e6:	9312      	str	r3, [sp, #72]	; 0x48
  constexpr size_t kTargetWidth     = sizeof(T) * 8;
   124e8:	2320      	movs	r3, #32
   124ea:	9311      	str	r3, [sp, #68]	; 0x44
  UnsignedT mask   = kFieldOfOnes >> (kTargetWidth - width);
   124ec:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   124ee:	f1c3 0320 	rsb	r3, r3, #32
   124f2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   124f6:	fa22 f303 	lsr.w	r3, r2, r3
   124fa:	9310      	str	r3, [sp, #64]	; 0x40
  target &= ~(mask << position);
   124fc:	9a10      	ldr	r2, [sp, #64]	; 0x40
   124fe:	9b14      	ldr	r3, [sp, #80]	; 0x50
   12500:	fa02 f303 	lsl.w	r3, r2, r3
   12504:	43db      	mvns	r3, r3
   12506:	9a16      	ldr	r2, [sp, #88]	; 0x58
   12508:	4013      	ands	r3, r2
   1250a:	9316      	str	r3, [sp, #88]	; 0x58
  target |= (value & mask) << position;
   1250c:	f89d 2057 	ldrb.w	r2, [sp, #87]	; 0x57
   12510:	9b10      	ldr	r3, [sp, #64]	; 0x40
   12512:	401a      	ands	r2, r3
   12514:	9b14      	ldr	r3, [sp, #80]	; 0x50
   12516:	fa02 f303 	lsl.w	r3, r2, r3
   1251a:	9a16      	ldr	r2, [sp, #88]	; 0x58
   1251c:	4313      	orrs	r3, r2
   1251e:	9316      	str	r3, [sp, #88]	; 0x58
  return target;
   12520:	9e16      	ldr	r6, [sp, #88]	; 0x58
   12522:	4623      	mov	r3, r4
   12524:	4619      	mov	r1, r3
   12526:	4809      	ldr	r0, [pc, #36]	; (1254c <Ssp::SetPeripheralMode(SspInterface::MasterSlaveMode, SspInterface::FrameMode, SspInterface::DataSize)+0x208>)
   12528:	f003 fee2 	bl	162f0 <__cyg_profile_func_exit>
   1252c:	606e      	str	r6, [r5, #4]
   1252e:	4623      	mov	r3, r4
   12530:	4619      	mov	r1, r3
   12532:	4803      	ldr	r0, [pc, #12]	; (12540 <Ssp::SetPeripheralMode(SspInterface::MasterSlaveMode, SspInterface::FrameMode, SspInterface::DataSize)+0x1fc>)
   12534:	f003 fedc 	bl	162f0 <__cyg_profile_func_exit>
  }
   12538:	bf00      	nop
   1253a:	b018      	add	sp, #96	; 0x60
   1253c:	bd70      	pop	{r4, r5, r6, pc}
   1253e:	bf00      	nop
   12540:	00012345 	.word	0x00012345
   12544:	0001997c 	.word	0x0001997c
   12548:	10000068 	.word	0x10000068
   1254c:	000148d5 	.word	0x000148d5

00012550 <Ssp::GetPeripheralMode()>:
  /// Gets the Peripheral modes from registers
  /// @return - returns a 16-bit value as follows: 0000_000x 0xx0_xxxx
  ///       MasterSlaveMode = 1-bit @ bit 8
  ///       FrameMode       = 2-bit @ bit 5
  ///       DataSize        = 4-bit @ bit 0
  uint16_t GetPeripheralMode() override
   12550:	b570      	push	{r4, r5, r6, lr}
   12552:	b096      	sub	sp, #88	; 0x58
   12554:	4674      	mov	r4, lr
   12556:	9001      	str	r0, [sp, #4]
   12558:	4623      	mov	r3, r4
   1255a:	4619      	mov	r1, r3
   1255c:	4850      	ldr	r0, [pc, #320]	; (126a0 <Ssp::GetPeripheralMode()+0x150>)
   1255e:	f003 feb3 	bl	162c8 <__cyg_profile_func_enter>
  {
    uint16_t return_val = 0;
   12562:	2300      	movs	r3, #0
   12564:	f8ad 3056 	strh.w	r3, [sp, #86]	; 0x56
    uint32_t pssp       = util::Value(pssp_);
   12568:	9b01      	ldr	r3, [sp, #4]
   1256a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1256c:	4618      	mov	r0, r3
   1256e:	f7ff fca7 	bl	11ec0 <int util::Value<Ssp::Peripheral, int>(Ssp::Peripheral)>
   12572:	4603      	mov	r3, r0
   12574:	9314      	str	r3, [sp, #80]	; 0x50
    // TODO(#371): Find a better alternative to powering up the peripheral for
    // every method.
    Ssp::PowerUpPeripheral(Ssp::kPowerBit[pssp]);
   12576:	9b01      	ldr	r3, [sp, #4]
   12578:	1d18      	adds	r0, r3, #4
   1257a:	9b14      	ldr	r3, [sp, #80]	; 0x50
   1257c:	009b      	lsls	r3, r3, #2
   1257e:	4a49      	ldr	r2, [pc, #292]	; (126a4 <Ssp::GetPeripheralMode()+0x154>)
   12580:	4413      	add	r3, r2
   12582:	4619      	mov	r1, r3
   12584:	f7ff fa7e 	bl	11a84 <Lpc40xxSystemController::PowerUpPeripheral(SystemControllerInterface::PeripheralID const&)>

    return_val = static_cast<uint16_t>(
        (bit::Extract(ssp_registers[pssp]->CR0, kDataBit, 4)) +
   12588:	4a47      	ldr	r2, [pc, #284]	; (126a8 <Ssp::GetPeripheralMode()+0x158>)
   1258a:	9b14      	ldr	r3, [sp, #80]	; 0x50
   1258c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12590:	681b      	ldr	r3, [r3, #0]
   12592:	9307      	str	r3, [sp, #28]
   12594:	2300      	movs	r3, #0
   12596:	9306      	str	r3, [sp, #24]
   12598:	2304      	movs	r3, #4
   1259a:	9305      	str	r3, [sp, #20]
   1259c:	4623      	mov	r3, r4
   1259e:	4619      	mov	r1, r3
   125a0:	4842      	ldr	r0, [pc, #264]	; (126ac <Ssp::GetPeripheralMode()+0x15c>)
   125a2:	f003 fe91 	bl	162c8 <__cyg_profile_func_enter>
  constexpr UnsignedT kFieldOfOnes = GenerateFieldOfOnes<T>();
   125a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   125aa:	9304      	str	r3, [sp, #16]
  constexpr size_t kTargetWidth     = sizeof(T) * 8;
   125ac:	2320      	movs	r3, #32
   125ae:	9303      	str	r3, [sp, #12]
  UnsignedT mask   = kFieldOfOnes >> (kTargetWidth - width);
   125b0:	9b05      	ldr	r3, [sp, #20]
   125b2:	f1c3 0320 	rsb	r3, r3, #32
   125b6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   125ba:	fa22 f303 	lsr.w	r3, r2, r3
   125be:	9302      	str	r3, [sp, #8]
  return (target >> position) & mask;
   125c0:	9a07      	ldr	r2, [sp, #28]
   125c2:	9b06      	ldr	r3, [sp, #24]
   125c4:	40da      	lsrs	r2, r3
   125c6:	9b02      	ldr	r3, [sp, #8]
   125c8:	ea02 0503 	and.w	r5, r2, r3
   125cc:	4623      	mov	r3, r4
   125ce:	4619      	mov	r1, r3
   125d0:	4836      	ldr	r0, [pc, #216]	; (126ac <Ssp::GetPeripheralMode()+0x15c>)
   125d2:	f003 fe8d 	bl	162f0 <__cyg_profile_func_exit>
   125d6:	b2ad      	uxth	r5, r5
        ((bit::Extract(ssp_registers[pssp]->CR0, kFrameBit, 2)) << 5) +
   125d8:	4a33      	ldr	r2, [pc, #204]	; (126a8 <Ssp::GetPeripheralMode()+0x158>)
   125da:	9b14      	ldr	r3, [sp, #80]	; 0x50
   125dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   125e0:	681b      	ldr	r3, [r3, #0]
   125e2:	930d      	str	r3, [sp, #52]	; 0x34
   125e4:	2304      	movs	r3, #4
   125e6:	930c      	str	r3, [sp, #48]	; 0x30
   125e8:	2302      	movs	r3, #2
   125ea:	930b      	str	r3, [sp, #44]	; 0x2c
   125ec:	4623      	mov	r3, r4
   125ee:	4619      	mov	r1, r3
   125f0:	482e      	ldr	r0, [pc, #184]	; (126ac <Ssp::GetPeripheralMode()+0x15c>)
   125f2:	f003 fe69 	bl	162c8 <__cyg_profile_func_enter>
  constexpr UnsignedT kFieldOfOnes = GenerateFieldOfOnes<T>();
   125f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   125fa:	930a      	str	r3, [sp, #40]	; 0x28
  constexpr size_t kTargetWidth     = sizeof(T) * 8;
   125fc:	2320      	movs	r3, #32
   125fe:	9309      	str	r3, [sp, #36]	; 0x24
  UnsignedT mask   = kFieldOfOnes >> (kTargetWidth - width);
   12600:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   12602:	f1c3 0320 	rsb	r3, r3, #32
   12606:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1260a:	fa22 f303 	lsr.w	r3, r2, r3
   1260e:	9308      	str	r3, [sp, #32]
  return (target >> position) & mask;
   12610:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   12612:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   12614:	40da      	lsrs	r2, r3
   12616:	9b08      	ldr	r3, [sp, #32]
   12618:	ea02 0603 	and.w	r6, r2, r3
   1261c:	4623      	mov	r3, r4
   1261e:	4619      	mov	r1, r3
   12620:	4822      	ldr	r0, [pc, #136]	; (126ac <Ssp::GetPeripheralMode()+0x15c>)
   12622:	f003 fe65 	bl	162f0 <__cyg_profile_func_exit>
   12626:	b2b3      	uxth	r3, r6
   12628:	015b      	lsls	r3, r3, #5
   1262a:	b29b      	uxth	r3, r3
        (bit::Extract(ssp_registers[pssp]->CR0, kDataBit, 4)) +
   1262c:	442b      	add	r3, r5
   1262e:	b29d      	uxth	r5, r3
        ((bit::Extract(ssp_registers[pssp]->CR1, kMasterModeBit)) << 8));
   12630:	4a1d      	ldr	r2, [pc, #116]	; (126a8 <Ssp::GetPeripheralMode()+0x158>)
   12632:	9b14      	ldr	r3, [sp, #80]	; 0x50
   12634:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12638:	685b      	ldr	r3, [r3, #4]
   1263a:	9313      	str	r3, [sp, #76]	; 0x4c
   1263c:	2302      	movs	r3, #2
   1263e:	9312      	str	r3, [sp, #72]	; 0x48
   12640:	2301      	movs	r3, #1
   12642:	9311      	str	r3, [sp, #68]	; 0x44
   12644:	4623      	mov	r3, r4
   12646:	4619      	mov	r1, r3
   12648:	4818      	ldr	r0, [pc, #96]	; (126ac <Ssp::GetPeripheralMode()+0x15c>)
   1264a:	f003 fe3d 	bl	162c8 <__cyg_profile_func_enter>
  constexpr UnsignedT kFieldOfOnes = GenerateFieldOfOnes<T>();
   1264e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   12652:	9310      	str	r3, [sp, #64]	; 0x40
  constexpr size_t kTargetWidth     = sizeof(T) * 8;
   12654:	2320      	movs	r3, #32
   12656:	930f      	str	r3, [sp, #60]	; 0x3c
  UnsignedT mask   = kFieldOfOnes >> (kTargetWidth - width);
   12658:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1265a:	f1c3 0320 	rsb	r3, r3, #32
   1265e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   12662:	fa22 f303 	lsr.w	r3, r2, r3
   12666:	930e      	str	r3, [sp, #56]	; 0x38
  return (target >> position) & mask;
   12668:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   1266a:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1266c:	40da      	lsrs	r2, r3
   1266e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   12670:	ea02 0603 	and.w	r6, r2, r3
   12674:	4623      	mov	r3, r4
   12676:	4619      	mov	r1, r3
   12678:	480c      	ldr	r0, [pc, #48]	; (126ac <Ssp::GetPeripheralMode()+0x15c>)
   1267a:	f003 fe39 	bl	162f0 <__cyg_profile_func_exit>
   1267e:	b2b3      	uxth	r3, r6
   12680:	021b      	lsls	r3, r3, #8
   12682:	b29b      	uxth	r3, r3
    return_val = static_cast<uint16_t>(
   12684:	442b      	add	r3, r5
   12686:	f8ad 3056 	strh.w	r3, [sp, #86]	; 0x56
    return return_val;
   1268a:	f8bd 5056 	ldrh.w	r5, [sp, #86]	; 0x56
   1268e:	4623      	mov	r3, r4
   12690:	4619      	mov	r1, r3
   12692:	4803      	ldr	r0, [pc, #12]	; (126a0 <Ssp::GetPeripheralMode()+0x150>)
   12694:	f003 fe2c 	bl	162f0 <__cyg_profile_func_exit>
   12698:	462b      	mov	r3, r5
  }
   1269a:	4618      	mov	r0, r3
   1269c:	b016      	add	sp, #88	; 0x58
   1269e:	bd70      	pop	{r4, r5, r6, pc}
   126a0:	00012551 	.word	0x00012551
   126a4:	0001997c 	.word	0x0001997c
   126a8:	10000068 	.word	0x10000068
   126ac:	00014949 	.word	0x00014949

000126b0 <Ssp::SetClock(bool, bool, unsigned char, unsigned char)>:
  /// Sets the clock rate for the Peripheral
  /// @param polarity - maintain bus on clock 0=low or 1=high between frames
  /// @param phase - capture serial data on 0=first or 1=second clock cycle
  /// @param divider - see notes in SSP_Interface above
  /// @param prescaler - divides the PCLK, must be even value between 2-254
  void SetClock(bool polarity, bool phase, uint8_t divider,
   126b0:	b570      	push	{r4, r5, r6, lr}
   126b2:	b098      	sub	sp, #96	; 0x60
   126b4:	4674      	mov	r4, lr
   126b6:	9001      	str	r0, [sp, #4]
   126b8:	4608      	mov	r0, r1
   126ba:	4611      	mov	r1, r2
   126bc:	461a      	mov	r2, r3
   126be:	4603      	mov	r3, r0
   126c0:	f88d 3003 	strb.w	r3, [sp, #3]
   126c4:	460b      	mov	r3, r1
   126c6:	f88d 3002 	strb.w	r3, [sp, #2]
   126ca:	4613      	mov	r3, r2
   126cc:	f88d 3001 	strb.w	r3, [sp, #1]
   126d0:	4623      	mov	r3, r4
   126d2:	4619      	mov	r1, r3
   126d4:	486c      	ldr	r0, [pc, #432]	; (12888 <Ssp::SetClock(bool, bool, unsigned char, unsigned char)+0x1d8>)
   126d6:	f003 fdf7 	bl	162c8 <__cyg_profile_func_enter>
                uint8_t prescaler) override
  {
    uint32_t pssp = util::Value(pssp_);
   126da:	9b01      	ldr	r3, [sp, #4]
   126dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   126de:	4618      	mov	r0, r3
   126e0:	f7ff fbee 	bl	11ec0 <int util::Value<Ssp::Peripheral, int>(Ssp::Peripheral)>
   126e4:	4603      	mov	r3, r0
   126e6:	9317      	str	r3, [sp, #92]	; 0x5c
    // TODO(#371): Find a better alternative to powering up the peripheral for
    // every method.
    Ssp::PowerUpPeripheral(Ssp::kPowerBit[pssp]);
   126e8:	9b01      	ldr	r3, [sp, #4]
   126ea:	1d18      	adds	r0, r3, #4
   126ec:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   126ee:	009b      	lsls	r3, r3, #2
   126f0:	4a66      	ldr	r2, [pc, #408]	; (1288c <Ssp::SetClock(bool, bool, unsigned char, unsigned char)+0x1dc>)
   126f2:	4413      	add	r3, r2
   126f4:	4619      	mov	r1, r3
   126f6:	f7ff f9c5 	bl	11a84 <Lpc40xxSystemController::PowerUpPeripheral(SystemControllerInterface::PeripheralID const&)>
    // first clear the appropriate registers
    ssp_registers[pssp]->CR0 =
        bit::Insert(ssp_registers[pssp]->CR0, polarity, kPolarityBit, 1);
   126fa:	4a65      	ldr	r2, [pc, #404]	; (12890 <Ssp::SetClock(bool, bool, unsigned char, unsigned char)+0x1e0>)
   126fc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   126fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12702:	681b      	ldr	r3, [r3, #0]
    ssp_registers[pssp]->CR0 =
   12704:	4962      	ldr	r1, [pc, #392]	; (12890 <Ssp::SetClock(bool, bool, unsigned char, unsigned char)+0x1e0>)
   12706:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   12708:	f851 5022 	ldr.w	r5, [r1, r2, lsl #2]
   1270c:	9308      	str	r3, [sp, #32]
   1270e:	f89d 3003 	ldrb.w	r3, [sp, #3]
   12712:	f88d 301f 	strb.w	r3, [sp, #31]
   12716:	2306      	movs	r3, #6
   12718:	9306      	str	r3, [sp, #24]
   1271a:	2301      	movs	r3, #1
   1271c:	9305      	str	r3, [sp, #20]
   1271e:	4623      	mov	r3, r4
   12720:	4619      	mov	r1, r3
   12722:	485c      	ldr	r0, [pc, #368]	; (12894 <Ssp::SetClock(bool, bool, unsigned char, unsigned char)+0x1e4>)
   12724:	f003 fdd0 	bl	162c8 <__cyg_profile_func_enter>
  constexpr UnsignedT kFieldOfOnes = GenerateFieldOfOnes<T>();
   12728:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1272c:	9304      	str	r3, [sp, #16]
  constexpr size_t kTargetWidth     = sizeof(T) * 8;
   1272e:	2320      	movs	r3, #32
   12730:	9303      	str	r3, [sp, #12]
  UnsignedT mask   = kFieldOfOnes >> (kTargetWidth - width);
   12732:	9b05      	ldr	r3, [sp, #20]
   12734:	f1c3 0320 	rsb	r3, r3, #32
   12738:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1273c:	fa22 f303 	lsr.w	r3, r2, r3
   12740:	9302      	str	r3, [sp, #8]
  target &= ~(mask << position);
   12742:	9a02      	ldr	r2, [sp, #8]
   12744:	9b06      	ldr	r3, [sp, #24]
   12746:	fa02 f303 	lsl.w	r3, r2, r3
   1274a:	43db      	mvns	r3, r3
   1274c:	9a08      	ldr	r2, [sp, #32]
   1274e:	4013      	ands	r3, r2
   12750:	9308      	str	r3, [sp, #32]
  target |= (value & mask) << position;
   12752:	f89d 201f 	ldrb.w	r2, [sp, #31]
   12756:	9b02      	ldr	r3, [sp, #8]
   12758:	401a      	ands	r2, r3
   1275a:	9b06      	ldr	r3, [sp, #24]
   1275c:	fa02 f303 	lsl.w	r3, r2, r3
   12760:	9a08      	ldr	r2, [sp, #32]
   12762:	4313      	orrs	r3, r2
   12764:	9308      	str	r3, [sp, #32]
  return target;
   12766:	9e08      	ldr	r6, [sp, #32]
   12768:	4623      	mov	r3, r4
   1276a:	4619      	mov	r1, r3
   1276c:	4849      	ldr	r0, [pc, #292]	; (12894 <Ssp::SetClock(bool, bool, unsigned char, unsigned char)+0x1e4>)
   1276e:	f003 fdbf 	bl	162f0 <__cyg_profile_func_exit>
   12772:	602e      	str	r6, [r5, #0]
    ssp_registers[pssp]->CR0 =
        bit::Insert(ssp_registers[pssp]->CR0, phase, kPhaseBit, 1);
   12774:	4a46      	ldr	r2, [pc, #280]	; (12890 <Ssp::SetClock(bool, bool, unsigned char, unsigned char)+0x1e0>)
   12776:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   12778:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1277c:	681b      	ldr	r3, [r3, #0]
    ssp_registers[pssp]->CR0 =
   1277e:	4944      	ldr	r1, [pc, #272]	; (12890 <Ssp::SetClock(bool, bool, unsigned char, unsigned char)+0x1e0>)
   12780:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   12782:	f851 5022 	ldr.w	r5, [r1, r2, lsl #2]
   12786:	930f      	str	r3, [sp, #60]	; 0x3c
   12788:	f89d 3002 	ldrb.w	r3, [sp, #2]
   1278c:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
   12790:	2307      	movs	r3, #7
   12792:	930d      	str	r3, [sp, #52]	; 0x34
   12794:	2301      	movs	r3, #1
   12796:	930c      	str	r3, [sp, #48]	; 0x30
   12798:	4623      	mov	r3, r4
   1279a:	4619      	mov	r1, r3
   1279c:	483d      	ldr	r0, [pc, #244]	; (12894 <Ssp::SetClock(bool, bool, unsigned char, unsigned char)+0x1e4>)
   1279e:	f003 fd93 	bl	162c8 <__cyg_profile_func_enter>
  constexpr UnsignedT kFieldOfOnes = GenerateFieldOfOnes<T>();
   127a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   127a6:	930b      	str	r3, [sp, #44]	; 0x2c
  constexpr size_t kTargetWidth     = sizeof(T) * 8;
   127a8:	2320      	movs	r3, #32
   127aa:	930a      	str	r3, [sp, #40]	; 0x28
  UnsignedT mask   = kFieldOfOnes >> (kTargetWidth - width);
   127ac:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   127ae:	f1c3 0320 	rsb	r3, r3, #32
   127b2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   127b6:	fa22 f303 	lsr.w	r3, r2, r3
   127ba:	9309      	str	r3, [sp, #36]	; 0x24
  target &= ~(mask << position);
   127bc:	9a09      	ldr	r2, [sp, #36]	; 0x24
   127be:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   127c0:	fa02 f303 	lsl.w	r3, r2, r3
   127c4:	43db      	mvns	r3, r3
   127c6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   127c8:	4013      	ands	r3, r2
   127ca:	930f      	str	r3, [sp, #60]	; 0x3c
  target |= (value & mask) << position;
   127cc:	f89d 203b 	ldrb.w	r2, [sp, #59]	; 0x3b
   127d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
   127d2:	401a      	ands	r2, r3
   127d4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   127d6:	fa02 f303 	lsl.w	r3, r2, r3
   127da:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   127dc:	4313      	orrs	r3, r2
   127de:	930f      	str	r3, [sp, #60]	; 0x3c
  return target;
   127e0:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
   127e2:	4623      	mov	r3, r4
   127e4:	4619      	mov	r1, r3
   127e6:	482b      	ldr	r0, [pc, #172]	; (12894 <Ssp::SetClock(bool, bool, unsigned char, unsigned char)+0x1e4>)
   127e8:	f003 fd82 	bl	162f0 <__cyg_profile_func_exit>
   127ec:	602e      	str	r6, [r5, #0]
    ssp_registers[pssp]->CR0 =
        bit::Insert(ssp_registers[pssp]->CR0, divider, kDividerBit, 8);
   127ee:	4a28      	ldr	r2, [pc, #160]	; (12890 <Ssp::SetClock(bool, bool, unsigned char, unsigned char)+0x1e0>)
   127f0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   127f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   127f6:	681b      	ldr	r3, [r3, #0]
    ssp_registers[pssp]->CR0 =
   127f8:	4925      	ldr	r1, [pc, #148]	; (12890 <Ssp::SetClock(bool, bool, unsigned char, unsigned char)+0x1e0>)
   127fa:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   127fc:	f851 5022 	ldr.w	r5, [r1, r2, lsl #2]
   12800:	9316      	str	r3, [sp, #88]	; 0x58
   12802:	f89d 3001 	ldrb.w	r3, [sp, #1]
   12806:	f88d 3057 	strb.w	r3, [sp, #87]	; 0x57
   1280a:	2308      	movs	r3, #8
   1280c:	9314      	str	r3, [sp, #80]	; 0x50
   1280e:	2308      	movs	r3, #8
   12810:	9313      	str	r3, [sp, #76]	; 0x4c
   12812:	4623      	mov	r3, r4
   12814:	4619      	mov	r1, r3
   12816:	4820      	ldr	r0, [pc, #128]	; (12898 <Ssp::SetClock(bool, bool, unsigned char, unsigned char)+0x1e8>)
   12818:	f003 fd56 	bl	162c8 <__cyg_profile_func_enter>
  constexpr UnsignedT kFieldOfOnes = GenerateFieldOfOnes<T>();
   1281c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   12820:	9312      	str	r3, [sp, #72]	; 0x48
  constexpr size_t kTargetWidth     = sizeof(T) * 8;
   12822:	2320      	movs	r3, #32
   12824:	9311      	str	r3, [sp, #68]	; 0x44
  UnsignedT mask   = kFieldOfOnes >> (kTargetWidth - width);
   12826:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   12828:	f1c3 0320 	rsb	r3, r3, #32
   1282c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   12830:	fa22 f303 	lsr.w	r3, r2, r3
   12834:	9310      	str	r3, [sp, #64]	; 0x40
  target &= ~(mask << position);
   12836:	9a10      	ldr	r2, [sp, #64]	; 0x40
   12838:	9b14      	ldr	r3, [sp, #80]	; 0x50
   1283a:	fa02 f303 	lsl.w	r3, r2, r3
   1283e:	43db      	mvns	r3, r3
   12840:	9a16      	ldr	r2, [sp, #88]	; 0x58
   12842:	4013      	ands	r3, r2
   12844:	9316      	str	r3, [sp, #88]	; 0x58
  target |= (value & mask) << position;
   12846:	f89d 2057 	ldrb.w	r2, [sp, #87]	; 0x57
   1284a:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1284c:	401a      	ands	r2, r3
   1284e:	9b14      	ldr	r3, [sp, #80]	; 0x50
   12850:	fa02 f303 	lsl.w	r3, r2, r3
   12854:	9a16      	ldr	r2, [sp, #88]	; 0x58
   12856:	4313      	orrs	r3, r2
   12858:	9316      	str	r3, [sp, #88]	; 0x58
  return target;
   1285a:	9e16      	ldr	r6, [sp, #88]	; 0x58
   1285c:	4623      	mov	r3, r4
   1285e:	4619      	mov	r1, r3
   12860:	480d      	ldr	r0, [pc, #52]	; (12898 <Ssp::SetClock(bool, bool, unsigned char, unsigned char)+0x1e8>)
   12862:	f003 fd45 	bl	162f0 <__cyg_profile_func_exit>
   12866:	602e      	str	r6, [r5, #0]
    ssp_registers[pssp]->CPSR = prescaler;
   12868:	4a09      	ldr	r2, [pc, #36]	; (12890 <Ssp::SetClock(bool, bool, unsigned char, unsigned char)+0x1e0>)
   1286a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   1286c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12870:	f89d 2070 	ldrb.w	r2, [sp, #112]	; 0x70
   12874:	611a      	str	r2, [r3, #16]
   12876:	4623      	mov	r3, r4
   12878:	4619      	mov	r1, r3
   1287a:	4803      	ldr	r0, [pc, #12]	; (12888 <Ssp::SetClock(bool, bool, unsigned char, unsigned char)+0x1d8>)
   1287c:	f003 fd38 	bl	162f0 <__cyg_profile_func_exit>
  }
   12880:	bf00      	nop
   12882:	b018      	add	sp, #96	; 0x60
   12884:	bd70      	pop	{r4, r5, r6, pc}
   12886:	bf00      	nop
   12888:	000126b1 	.word	0x000126b1
   1288c:	0001997c 	.word	0x0001997c
   12890:	10000068 	.word	0x10000068
   12894:	0001499d 	.word	0x0001499d
   12898:	000148d5 	.word	0x000148d5

0001289c <Ssp::GetClock()>:
  ///   0000_0000 0000_0x0x xxxx_xxxx xxxx_xxxx
  ///       polarity    = 1-bit @ bit 18
  ///       phase       = 1-bit @ bit 16
  ///       divider     = 8-bits @ bit 8
  ///       prescaler   = 8-bits @ bit 0
  uint32_t GetClock() override
   1289c:	b570      	push	{r4, r5, r6, lr}
   1289e:	b094      	sub	sp, #80	; 0x50
   128a0:	4674      	mov	r4, lr
   128a2:	9001      	str	r0, [sp, #4]
   128a4:	4623      	mov	r3, r4
   128a6:	4619      	mov	r1, r3
   128a8:	4858      	ldr	r0, [pc, #352]	; (12a0c <Ssp::GetClock()+0x170>)
   128aa:	f003 fd0d 	bl	162c8 <__cyg_profile_func_enter>
  {
    uint32_t return_val = 0;
   128ae:	2300      	movs	r3, #0
   128b0:	9313      	str	r3, [sp, #76]	; 0x4c
    uint32_t pssp       = util::Value(pssp_);
   128b2:	9b01      	ldr	r3, [sp, #4]
   128b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   128b6:	4618      	mov	r0, r3
   128b8:	f7ff fb02 	bl	11ec0 <int util::Value<Ssp::Peripheral, int>(Ssp::Peripheral)>
   128bc:	4603      	mov	r3, r0
   128be:	9312      	str	r3, [sp, #72]	; 0x48
    // TODO(#371): Find a better alternative to powering up the peripheral for
    // every method.
    Ssp::PowerUpPeripheral(Ssp::kPowerBit[pssp]);
   128c0:	9b01      	ldr	r3, [sp, #4]
   128c2:	1d18      	adds	r0, r3, #4
   128c4:	9b12      	ldr	r3, [sp, #72]	; 0x48
   128c6:	009b      	lsls	r3, r3, #2
   128c8:	4a51      	ldr	r2, [pc, #324]	; (12a10 <Ssp::GetClock()+0x174>)
   128ca:	4413      	add	r3, r2
   128cc:	4619      	mov	r1, r3
   128ce:	f7ff f8d9 	bl	11a84 <Lpc40xxSystemController::PowerUpPeripheral(SystemControllerInterface::PeripheralID const&)>

    return_val =
        (bit::Extract(ssp_registers[pssp]->CPSR, kPrescalerBit, 8)) +
   128d2:	4a50      	ldr	r2, [pc, #320]	; (12a14 <Ssp::GetClock()+0x178>)
   128d4:	9b12      	ldr	r3, [sp, #72]	; 0x48
   128d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   128da:	691b      	ldr	r3, [r3, #16]
   128dc:	9307      	str	r3, [sp, #28]
   128de:	2300      	movs	r3, #0
   128e0:	9306      	str	r3, [sp, #24]
   128e2:	2308      	movs	r3, #8
   128e4:	9305      	str	r3, [sp, #20]
   128e6:	4623      	mov	r3, r4
   128e8:	4619      	mov	r1, r3
   128ea:	484b      	ldr	r0, [pc, #300]	; (12a18 <Ssp::GetClock()+0x17c>)
   128ec:	f003 fcec 	bl	162c8 <__cyg_profile_func_enter>
  constexpr UnsignedT kFieldOfOnes = GenerateFieldOfOnes<T>();
   128f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   128f4:	9304      	str	r3, [sp, #16]
  constexpr size_t kTargetWidth     = sizeof(T) * 8;
   128f6:	2320      	movs	r3, #32
   128f8:	9303      	str	r3, [sp, #12]
  UnsignedT mask   = kFieldOfOnes >> (kTargetWidth - width);
   128fa:	9b05      	ldr	r3, [sp, #20]
   128fc:	f1c3 0320 	rsb	r3, r3, #32
   12900:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   12904:	fa22 f303 	lsr.w	r3, r2, r3
   12908:	9302      	str	r3, [sp, #8]
  return (target >> position) & mask;
   1290a:	9a07      	ldr	r2, [sp, #28]
   1290c:	9b06      	ldr	r3, [sp, #24]
   1290e:	40da      	lsrs	r2, r3
   12910:	9b02      	ldr	r3, [sp, #8]
   12912:	ea02 0503 	and.w	r5, r2, r3
   12916:	4623      	mov	r3, r4
   12918:	4619      	mov	r1, r3
   1291a:	483f      	ldr	r0, [pc, #252]	; (12a18 <Ssp::GetClock()+0x17c>)
   1291c:	f003 fce8 	bl	162f0 <__cyg_profile_func_exit>
        ((bit::Extract(ssp_registers[pssp]->CR0, kDividerBit, 8)) << 8) +
   12920:	4a3c      	ldr	r2, [pc, #240]	; (12a14 <Ssp::GetClock()+0x178>)
   12922:	9b12      	ldr	r3, [sp, #72]	; 0x48
   12924:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12928:	681b      	ldr	r3, [r3, #0]
   1292a:	930d      	str	r3, [sp, #52]	; 0x34
   1292c:	2308      	movs	r3, #8
   1292e:	930c      	str	r3, [sp, #48]	; 0x30
   12930:	2308      	movs	r3, #8
   12932:	930b      	str	r3, [sp, #44]	; 0x2c
   12934:	4623      	mov	r3, r4
   12936:	4619      	mov	r1, r3
   12938:	4837      	ldr	r0, [pc, #220]	; (12a18 <Ssp::GetClock()+0x17c>)
   1293a:	f003 fcc5 	bl	162c8 <__cyg_profile_func_enter>
  constexpr UnsignedT kFieldOfOnes = GenerateFieldOfOnes<T>();
   1293e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   12942:	930a      	str	r3, [sp, #40]	; 0x28
  constexpr size_t kTargetWidth     = sizeof(T) * 8;
   12944:	2320      	movs	r3, #32
   12946:	9309      	str	r3, [sp, #36]	; 0x24
  UnsignedT mask   = kFieldOfOnes >> (kTargetWidth - width);
   12948:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1294a:	f1c3 0320 	rsb	r3, r3, #32
   1294e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   12952:	fa22 f303 	lsr.w	r3, r2, r3
   12956:	9308      	str	r3, [sp, #32]
  return (target >> position) & mask;
   12958:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   1295a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1295c:	40da      	lsrs	r2, r3
   1295e:	9b08      	ldr	r3, [sp, #32]
   12960:	ea02 0603 	and.w	r6, r2, r3
   12964:	4623      	mov	r3, r4
   12966:	4619      	mov	r1, r3
   12968:	482b      	ldr	r0, [pc, #172]	; (12a18 <Ssp::GetClock()+0x17c>)
   1296a:	f003 fcc1 	bl	162f0 <__cyg_profile_func_exit>
   1296e:	0233      	lsls	r3, r6, #8
        (bit::Extract(ssp_registers[pssp]->CPSR, kPrescalerBit, 8)) +
   12970:	441d      	add	r5, r3
        ((bit::Read(ssp_registers[pssp]->CR0, kPhaseBit)) << 16) +
   12972:	4a28      	ldr	r2, [pc, #160]	; (12a14 <Ssp::GetClock()+0x178>)
   12974:	9b12      	ldr	r3, [sp, #72]	; 0x48
   12976:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1297a:	681b      	ldr	r3, [r3, #0]
   1297c:	930f      	str	r3, [sp, #60]	; 0x3c
   1297e:	2307      	movs	r3, #7
   12980:	930e      	str	r3, [sp, #56]	; 0x38
   12982:	4623      	mov	r3, r4
   12984:	4619      	mov	r1, r3
   12986:	4825      	ldr	r0, [pc, #148]	; (12a1c <Ssp::GetClock()+0x180>)
   12988:	f003 fc9e 	bl	162c8 <__cyg_profile_func_enter>
  return static_cast<bool>(target & (1 << position));
   1298c:	2201      	movs	r2, #1
   1298e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   12990:	fa02 f303 	lsl.w	r3, r2, r3
   12994:	461a      	mov	r2, r3
   12996:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   12998:	4013      	ands	r3, r2
   1299a:	2b00      	cmp	r3, #0
   1299c:	bf14      	ite	ne
   1299e:	2301      	movne	r3, #1
   129a0:	2300      	moveq	r3, #0
   129a2:	b2de      	uxtb	r6, r3
   129a4:	4623      	mov	r3, r4
   129a6:	4619      	mov	r1, r3
   129a8:	481c      	ldr	r0, [pc, #112]	; (12a1c <Ssp::GetClock()+0x180>)
   129aa:	f003 fca1 	bl	162f0 <__cyg_profile_func_exit>
   129ae:	4633      	mov	r3, r6
   129b0:	041b      	lsls	r3, r3, #16
        ((bit::Extract(ssp_registers[pssp]->CR0, kDividerBit, 8)) << 8) +
   129b2:	441d      	add	r5, r3
        ((bit::Read(ssp_registers[pssp]->CR0, kPolarityBit)) << 18);
   129b4:	4a17      	ldr	r2, [pc, #92]	; (12a14 <Ssp::GetClock()+0x178>)
   129b6:	9b12      	ldr	r3, [sp, #72]	; 0x48
   129b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   129bc:	681b      	ldr	r3, [r3, #0]
   129be:	9311      	str	r3, [sp, #68]	; 0x44
   129c0:	2306      	movs	r3, #6
   129c2:	9310      	str	r3, [sp, #64]	; 0x40
   129c4:	4623      	mov	r3, r4
   129c6:	4619      	mov	r1, r3
   129c8:	4814      	ldr	r0, [pc, #80]	; (12a1c <Ssp::GetClock()+0x180>)
   129ca:	f003 fc7d 	bl	162c8 <__cyg_profile_func_enter>
   129ce:	2201      	movs	r2, #1
   129d0:	9b10      	ldr	r3, [sp, #64]	; 0x40
   129d2:	fa02 f303 	lsl.w	r3, r2, r3
   129d6:	461a      	mov	r2, r3
   129d8:	9b11      	ldr	r3, [sp, #68]	; 0x44
   129da:	4013      	ands	r3, r2
   129dc:	2b00      	cmp	r3, #0
   129de:	bf14      	ite	ne
   129e0:	2301      	movne	r3, #1
   129e2:	2300      	moveq	r3, #0
   129e4:	b2de      	uxtb	r6, r3
   129e6:	4623      	mov	r3, r4
   129e8:	4619      	mov	r1, r3
   129ea:	480c      	ldr	r0, [pc, #48]	; (12a1c <Ssp::GetClock()+0x180>)
   129ec:	f003 fc80 	bl	162f0 <__cyg_profile_func_exit>
   129f0:	4633      	mov	r3, r6
   129f2:	049b      	lsls	r3, r3, #18
    return_val =
   129f4:	442b      	add	r3, r5
   129f6:	9313      	str	r3, [sp, #76]	; 0x4c

    return return_val;
   129f8:	9d13      	ldr	r5, [sp, #76]	; 0x4c
   129fa:	4623      	mov	r3, r4
   129fc:	4619      	mov	r1, r3
   129fe:	4803      	ldr	r0, [pc, #12]	; (12a0c <Ssp::GetClock()+0x170>)
   12a00:	f003 fc76 	bl	162f0 <__cyg_profile_func_exit>
   12a04:	462b      	mov	r3, r5
  }
   12a06:	4618      	mov	r0, r3
   12a08:	b014      	add	sp, #80	; 0x50
   12a0a:	bd70      	pop	{r4, r5, r6, pc}
   12a0c:	0001289d 	.word	0x0001289d
   12a10:	0001997c 	.word	0x0001997c
   12a14:	10000068 	.word	0x10000068
   12a18:	00014949 	.word	0x00014949
   12a1c:	00014891 	.word	0x00014891

00012a20 <PixelDisplayInterface::Color_t::Color_t(bool, bool, bool, unsigned char, unsigned char, bool)>:
class PixelDisplayInterface
{
 public:
  SJ2_PACKED(struct) Color_t
  {
    Color_t(bool r, bool g, bool b, uint8_t a, uint8_t bits,
   12a20:	b530      	push	{r4, r5, lr}
   12a22:	b083      	sub	sp, #12
   12a24:	4675      	mov	r5, lr
   12a26:	9001      	str	r0, [sp, #4]
   12a28:	4608      	mov	r0, r1
   12a2a:	4611      	mov	r1, r2
   12a2c:	461a      	mov	r2, r3
   12a2e:	4603      	mov	r3, r0
   12a30:	f88d 3003 	strb.w	r3, [sp, #3]
   12a34:	460b      	mov	r3, r1
   12a36:	f88d 3002 	strb.w	r3, [sp, #2]
   12a3a:	4613      	mov	r3, r2
   12a3c:	f88d 3001 	strb.w	r3, [sp, #1]
   12a40:	462b      	mov	r3, r5
   12a42:	4619      	mov	r1, r3
   12a44:	481a      	ldr	r0, [pc, #104]	; (12ab0 <PixelDisplayInterface::Color_t::Color_t(bool, bool, bool, unsigned char, unsigned char, bool)+0x90>)
   12a46:	f003 fc3f 	bl	162c8 <__cyg_profile_func_enter>
          red(r),
          green(g),
          blue(b),
          padding(0),
          color_bits(bits),
          alpha(a)
   12a4a:	9a01      	ldr	r2, [sp, #4]
   12a4c:	7813      	ldrb	r3, [r2, #0]
   12a4e:	f89d 1020 	ldrb.w	r1, [sp, #32]
   12a52:	f361 0300 	bfi	r3, r1, #0, #1
   12a56:	7013      	strb	r3, [r2, #0]
   12a58:	9a01      	ldr	r2, [sp, #4]
   12a5a:	7813      	ldrb	r3, [r2, #0]
   12a5c:	f89d 1003 	ldrb.w	r1, [sp, #3]
   12a60:	f361 0341 	bfi	r3, r1, #1, #1
   12a64:	7013      	strb	r3, [r2, #0]
   12a66:	9a01      	ldr	r2, [sp, #4]
   12a68:	7813      	ldrb	r3, [r2, #0]
   12a6a:	f89d 1002 	ldrb.w	r1, [sp, #2]
   12a6e:	f361 0382 	bfi	r3, r1, #2, #1
   12a72:	7013      	strb	r3, [r2, #0]
   12a74:	9a01      	ldr	r2, [sp, #4]
   12a76:	7813      	ldrb	r3, [r2, #0]
   12a78:	f89d 1001 	ldrb.w	r1, [sp, #1]
   12a7c:	f361 03c3 	bfi	r3, r1, #3, #1
   12a80:	7013      	strb	r3, [r2, #0]
   12a82:	9a01      	ldr	r2, [sp, #4]
   12a84:	7813      	ldrb	r3, [r2, #0]
   12a86:	f36f 1307 	bfc	r3, #4, #4
   12a8a:	7013      	strb	r3, [r2, #0]
   12a8c:	9b01      	ldr	r3, [sp, #4]
   12a8e:	f89d 201c 	ldrb.w	r2, [sp, #28]
   12a92:	705a      	strb	r2, [r3, #1]
   12a94:	9b01      	ldr	r3, [sp, #4]
   12a96:	f89d 2018 	ldrb.w	r2, [sp, #24]
   12a9a:	709a      	strb	r2, [r3, #2]
    {
    }
   12a9c:	9c01      	ldr	r4, [sp, #4]
   12a9e:	462b      	mov	r3, r5
   12aa0:	4619      	mov	r1, r3
   12aa2:	4803      	ldr	r0, [pc, #12]	; (12ab0 <PixelDisplayInterface::Color_t::Color_t(bool, bool, bool, unsigned char, unsigned char, bool)+0x90>)
   12aa4:	f003 fc24 	bl	162f0 <__cyg_profile_func_exit>
   12aa8:	4623      	mov	r3, r4
   12aaa:	4618      	mov	r0, r3
   12aac:	b003      	add	sp, #12
   12aae:	bd30      	pop	{r4, r5, pc}
   12ab0:	00012a21 	.word	0x00012a21

00012ab4 <PixelDisplayInterface::Color_t::Color_t()>:
    Color_t()
   12ab4:	b530      	push	{r4, r5, lr}
   12ab6:	b083      	sub	sp, #12
   12ab8:	4675      	mov	r5, lr
   12aba:	9001      	str	r0, [sp, #4]
   12abc:	462b      	mov	r3, r5
   12abe:	4619      	mov	r1, r3
   12ac0:	4815      	ldr	r0, [pc, #84]	; (12b18 <PixelDisplayInterface::Color_t::Color_t()+0x64>)
   12ac2:	f003 fc01 	bl	162c8 <__cyg_profile_func_enter>
          red(false),
          green(false),
          blue(false),
          padding(0),
          color_bits(0),
          alpha(0)
   12ac6:	9a01      	ldr	r2, [sp, #4]
   12ac8:	7813      	ldrb	r3, [r2, #0]
   12aca:	f36f 0300 	bfc	r3, #0, #1
   12ace:	7013      	strb	r3, [r2, #0]
   12ad0:	9a01      	ldr	r2, [sp, #4]
   12ad2:	7813      	ldrb	r3, [r2, #0]
   12ad4:	f36f 0341 	bfc	r3, #1, #1
   12ad8:	7013      	strb	r3, [r2, #0]
   12ada:	9a01      	ldr	r2, [sp, #4]
   12adc:	7813      	ldrb	r3, [r2, #0]
   12ade:	f36f 0382 	bfc	r3, #2, #1
   12ae2:	7013      	strb	r3, [r2, #0]
   12ae4:	9a01      	ldr	r2, [sp, #4]
   12ae6:	7813      	ldrb	r3, [r2, #0]
   12ae8:	f36f 03c3 	bfc	r3, #3, #1
   12aec:	7013      	strb	r3, [r2, #0]
   12aee:	9a01      	ldr	r2, [sp, #4]
   12af0:	7813      	ldrb	r3, [r2, #0]
   12af2:	f36f 1307 	bfc	r3, #4, #4
   12af6:	7013      	strb	r3, [r2, #0]
   12af8:	9b01      	ldr	r3, [sp, #4]
   12afa:	2200      	movs	r2, #0
   12afc:	705a      	strb	r2, [r3, #1]
   12afe:	9b01      	ldr	r3, [sp, #4]
   12b00:	2200      	movs	r2, #0
   12b02:	709a      	strb	r2, [r3, #2]
    {
    }
   12b04:	9c01      	ldr	r4, [sp, #4]
   12b06:	462b      	mov	r3, r5
   12b08:	4619      	mov	r1, r3
   12b0a:	4803      	ldr	r0, [pc, #12]	; (12b18 <PixelDisplayInterface::Color_t::Color_t()+0x64>)
   12b0c:	f003 fbf0 	bl	162f0 <__cyg_profile_func_exit>
   12b10:	4623      	mov	r3, r4
   12b12:	4618      	mov	r0, r3
   12b14:	b003      	add	sp, #12
   12b16:	bd30      	pop	{r4, r5, pc}
   12b18:	00012ab5 	.word	0x00012ab5

00012b1c <PixelDisplayInterface::Enable()>:
  /// @returns a color object with the available colors.
  virtual Color_t AvailableColors() = 0;
  /// Configure hardware peripherals and initialize external display hardware
  virtual void Initialize() = 0;
  /// Optional method to turn on display if applicable
  virtual void Enable() {}
   12b1c:	b510      	push	{r4, lr}
   12b1e:	b082      	sub	sp, #8
   12b20:	4674      	mov	r4, lr
   12b22:	9001      	str	r0, [sp, #4]
   12b24:	4623      	mov	r3, r4
   12b26:	4619      	mov	r1, r3
   12b28:	4805      	ldr	r0, [pc, #20]	; (12b40 <PixelDisplayInterface::Enable()+0x24>)
   12b2a:	f003 fbcd 	bl	162c8 <__cyg_profile_func_enter>
   12b2e:	4623      	mov	r3, r4
   12b30:	4619      	mov	r1, r3
   12b32:	4803      	ldr	r0, [pc, #12]	; (12b40 <PixelDisplayInterface::Enable()+0x24>)
   12b34:	f003 fbdc 	bl	162f0 <__cyg_profile_func_exit>
   12b38:	bf00      	nop
   12b3a:	b002      	add	sp, #8
   12b3c:	bd10      	pop	{r4, pc}
   12b3e:	bf00      	nop
   12b40:	00012b1d 	.word	0x00012b1d

00012b44 <PixelDisplayInterface::Disable()>:
  /// Optional method to turn off display and potentially put it into a low
  /// power mode
  virtual void Disable() {}
   12b44:	b510      	push	{r4, lr}
   12b46:	b082      	sub	sp, #8
   12b48:	4674      	mov	r4, lr
   12b4a:	9001      	str	r0, [sp, #4]
   12b4c:	4623      	mov	r3, r4
   12b4e:	4619      	mov	r1, r3
   12b50:	4805      	ldr	r0, [pc, #20]	; (12b68 <PixelDisplayInterface::Disable()+0x24>)
   12b52:	f003 fbb9 	bl	162c8 <__cyg_profile_func_enter>
   12b56:	4623      	mov	r3, r4
   12b58:	4619      	mov	r1, r3
   12b5a:	4803      	ldr	r0, [pc, #12]	; (12b68 <PixelDisplayInterface::Disable()+0x24>)
   12b5c:	f003 fbc8 	bl	162f0 <__cyg_profile_func_exit>
   12b60:	bf00      	nop
   12b62:	b002      	add	sp, #8
   12b64:	bd10      	pop	{r4, pc}
   12b66:	bf00      	nop
   12b68:	00012b45 	.word	0x00012b45

00012b6c <PixelDisplayInterface::Update()>:
  /// @param color the color of the pixel. May be ignored on monochrome screens.
  virtual void DrawPixel(int32_t x, int32_t y, Color_t color) = 0;
  /// Update screen to match framebuffer.
  /// Implementations of this method that do not use a framebuffer, possibly
  /// due to memory constrains, can refrain from implementing this function.
  virtual void Update() {}
   12b6c:	b510      	push	{r4, lr}
   12b6e:	b082      	sub	sp, #8
   12b70:	4674      	mov	r4, lr
   12b72:	9001      	str	r0, [sp, #4]
   12b74:	4623      	mov	r3, r4
   12b76:	4619      	mov	r1, r3
   12b78:	4805      	ldr	r0, [pc, #20]	; (12b90 <PixelDisplayInterface::Update()+0x24>)
   12b7a:	f003 fba5 	bl	162c8 <__cyg_profile_func_enter>
   12b7e:	4623      	mov	r3, r4
   12b80:	4619      	mov	r1, r3
   12b82:	4803      	ldr	r0, [pc, #12]	; (12b90 <PixelDisplayInterface::Update()+0x24>)
   12b84:	f003 fbb4 	bl	162f0 <__cyg_profile_func_exit>
   12b88:	bf00      	nop
   12b8a:	b002      	add	sp, #8
   12b8c:	bd10      	pop	{r4, pc}
   12b8e:	bf00      	nop
   12b90:	00012b6d 	.word	0x00012b6d

00012b94 <PixelDisplayInterface::PixelDisplayInterface()>:
class PixelDisplayInterface
   12b94:	b530      	push	{r4, r5, lr}
   12b96:	b083      	sub	sp, #12
   12b98:	4675      	mov	r5, lr
   12b9a:	9001      	str	r0, [sp, #4]
   12b9c:	462b      	mov	r3, r5
   12b9e:	4619      	mov	r1, r3
   12ba0:	4807      	ldr	r0, [pc, #28]	; (12bc0 <PixelDisplayInterface::PixelDisplayInterface()+0x2c>)
   12ba2:	f003 fb91 	bl	162c8 <__cyg_profile_func_enter>
   12ba6:	4a07      	ldr	r2, [pc, #28]	; (12bc4 <PixelDisplayInterface::PixelDisplayInterface()+0x30>)
   12ba8:	9b01      	ldr	r3, [sp, #4]
   12baa:	601a      	str	r2, [r3, #0]
   12bac:	9c01      	ldr	r4, [sp, #4]
   12bae:	462b      	mov	r3, r5
   12bb0:	4619      	mov	r1, r3
   12bb2:	4803      	ldr	r0, [pc, #12]	; (12bc0 <PixelDisplayInterface::PixelDisplayInterface()+0x2c>)
   12bb4:	f003 fb9c 	bl	162f0 <__cyg_profile_func_exit>
   12bb8:	4623      	mov	r3, r4
   12bba:	4618      	mov	r0, r3
   12bbc:	b003      	add	sp, #12
   12bbe:	bd30      	pop	{r4, r5, pc}
   12bc0:	00012b95 	.word	0x00012b95
   12bc4:	000199f8 	.word	0x000199f8

00012bc8 <Ssd1306::Ssd1306()>:
  {
    kCommand = 0,
    kData    = 1
  };

  constexpr Ssd1306()
   12bc8:	b530      	push	{r4, r5, lr}
   12bca:	b083      	sub	sp, #12
   12bcc:	4675      	mov	r5, lr
   12bce:	9001      	str	r0, [sp, #4]
   12bd0:	462b      	mov	r3, r5
   12bd2:	4619      	mov	r1, r3
   12bd4:	481f      	ldr	r0, [pc, #124]	; (12c54 <Ssd1306::Ssd1306()+0x8c>)
   12bd6:	f003 fb77 	bl	162c8 <__cyg_profile_func_enter>
        cs_(&cs_gpio_),
        dc_(&dc_gpio_),
        ssp1_(Ssp::Peripheral::kSsp1),
        cs_gpio_(1, 22),
        dc_gpio_(1, 25),
        bitmap_{}
   12bda:	9b01      	ldr	r3, [sp, #4]
   12bdc:	4618      	mov	r0, r3
   12bde:	f7ff ffd9 	bl	12b94 <PixelDisplayInterface::PixelDisplayInterface()>
   12be2:	4a1d      	ldr	r2, [pc, #116]	; (12c58 <Ssd1306::Ssd1306()+0x90>)
   12be4:	9b01      	ldr	r3, [sp, #4]
   12be6:	601a      	str	r2, [r3, #0]
      : ssp_(&ssp1_),
   12be8:	9b01      	ldr	r3, [sp, #4]
   12bea:	f103 0210 	add.w	r2, r3, #16
        bitmap_{}
   12bee:	9b01      	ldr	r3, [sp, #4]
   12bf0:	605a      	str	r2, [r3, #4]
        cs_(&cs_gpio_),
   12bf2:	9b01      	ldr	r3, [sp, #4]
   12bf4:	f103 0240 	add.w	r2, r3, #64	; 0x40
        bitmap_{}
   12bf8:	9b01      	ldr	r3, [sp, #4]
   12bfa:	609a      	str	r2, [r3, #8]
        dc_(&dc_gpio_),
   12bfc:	9b01      	ldr	r3, [sp, #4]
   12bfe:	f103 0254 	add.w	r2, r3, #84	; 0x54
        bitmap_{}
   12c02:	9b01      	ldr	r3, [sp, #4]
   12c04:	60da      	str	r2, [r3, #12]
   12c06:	9b01      	ldr	r3, [sp, #4]
   12c08:	3310      	adds	r3, #16
   12c0a:	2101      	movs	r1, #1
   12c0c:	4618      	mov	r0, r3
   12c0e:	f7ff f9cd 	bl	11fac <Ssp::Ssp(Ssp::Peripheral)>
   12c12:	9b01      	ldr	r3, [sp, #4]
   12c14:	3340      	adds	r3, #64	; 0x40
   12c16:	2216      	movs	r2, #22
   12c18:	2101      	movs	r1, #1
   12c1a:	4618      	mov	r0, r3
   12c1c:	f7fe f9d6 	bl	10fcc <Gpio::Gpio(unsigned char, unsigned char)>
   12c20:	9b01      	ldr	r3, [sp, #4]
   12c22:	3354      	adds	r3, #84	; 0x54
   12c24:	2219      	movs	r2, #25
   12c26:	2101      	movs	r1, #1
   12c28:	4618      	mov	r0, r3
   12c2a:	f7fe f9cf 	bl	10fcc <Gpio::Gpio(unsigned char, unsigned char)>
   12c2e:	9b01      	ldr	r3, [sp, #4]
   12c30:	3368      	adds	r3, #104	; 0x68
   12c32:	f240 62c1 	movw	r2, #1729	; 0x6c1
   12c36:	2100      	movs	r1, #0
   12c38:	4618      	mov	r0, r3
   12c3a:	f006 f9f3 	bl	19024 <memset>
  {
  }
   12c3e:	9c01      	ldr	r4, [sp, #4]
   12c40:	462b      	mov	r3, r5
   12c42:	4619      	mov	r1, r3
   12c44:	4803      	ldr	r0, [pc, #12]	; (12c54 <Ssd1306::Ssd1306()+0x8c>)
   12c46:	f003 fb53 	bl	162f0 <__cyg_profile_func_exit>
   12c4a:	4623      	mov	r3, r4
   12c4c:	4618      	mov	r0, r3
   12c4e:	b003      	add	sp, #12
   12c50:	bd30      	pop	{r4, r5, pc}
   12c52:	bf00      	nop
   12c54:	00012bc9 	.word	0x00012bc9
   12c58:	000199cc 	.word	0x000199cc

00012c5c <Ssd1306::GetWidth()>:
        dc_gpio_(1, 25),
        bitmap_{}
  {
  }

  size_t GetWidth() final override
   12c5c:	b530      	push	{r4, r5, lr}
   12c5e:	b083      	sub	sp, #12
   12c60:	4675      	mov	r5, lr
   12c62:	9001      	str	r0, [sp, #4]
   12c64:	462b      	mov	r3, r5
   12c66:	4619      	mov	r1, r3
   12c68:	4806      	ldr	r0, [pc, #24]	; (12c84 <Ssd1306::GetWidth()+0x28>)
   12c6a:	f003 fb2d 	bl	162c8 <__cyg_profile_func_enter>
  {
    return kWidth;
   12c6e:	2480      	movs	r4, #128	; 0x80
   12c70:	462b      	mov	r3, r5
   12c72:	4619      	mov	r1, r3
   12c74:	4803      	ldr	r0, [pc, #12]	; (12c84 <Ssd1306::GetWidth()+0x28>)
   12c76:	f003 fb3b 	bl	162f0 <__cyg_profile_func_exit>
   12c7a:	4623      	mov	r3, r4
  }
   12c7c:	4618      	mov	r0, r3
   12c7e:	b003      	add	sp, #12
   12c80:	bd30      	pop	{r4, r5, pc}
   12c82:	bf00      	nop
   12c84:	00012c5d 	.word	0x00012c5d

00012c88 <Ssd1306::GetHeight()>:
  size_t GetHeight() final override
   12c88:	b530      	push	{r4, r5, lr}
   12c8a:	b083      	sub	sp, #12
   12c8c:	4675      	mov	r5, lr
   12c8e:	9001      	str	r0, [sp, #4]
   12c90:	462b      	mov	r3, r5
   12c92:	4619      	mov	r1, r3
   12c94:	4806      	ldr	r0, [pc, #24]	; (12cb0 <Ssd1306::GetHeight()+0x28>)
   12c96:	f003 fb17 	bl	162c8 <__cyg_profile_func_enter>
  {
    return kHeight;
   12c9a:	2440      	movs	r4, #64	; 0x40
   12c9c:	462b      	mov	r3, r5
   12c9e:	4619      	mov	r1, r3
   12ca0:	4803      	ldr	r0, [pc, #12]	; (12cb0 <Ssd1306::GetHeight()+0x28>)
   12ca2:	f003 fb25 	bl	162f0 <__cyg_profile_func_exit>
   12ca6:	4623      	mov	r3, r4
  }
   12ca8:	4618      	mov	r0, r3
   12caa:	b003      	add	sp, #12
   12cac:	bd30      	pop	{r4, r5, pc}
   12cae:	bf00      	nop
   12cb0:	00012c89 	.word	0x00012c89

00012cb4 <Ssd1306::AvailableColors()>:
  Color_t AvailableColors() final override
   12cb4:	b510      	push	{r4, lr}
   12cb6:	b088      	sub	sp, #32
   12cb8:	4674      	mov	r4, lr
   12cba:	9005      	str	r0, [sp, #20]
   12cbc:	4623      	mov	r3, r4
   12cbe:	4619      	mov	r1, r3
   12cc0:	4815      	ldr	r0, [pc, #84]	; (12d18 <Ssd1306::AvailableColors()+0x64>)
   12cc2:	f003 fb01 	bl	162c8 <__cyg_profile_func_enter>
  {
    return Color_t(/* Red        = */ 1,
   12cc6:	a807      	add	r0, sp, #28
   12cc8:	2301      	movs	r3, #1
   12cca:	9302      	str	r3, [sp, #8]
   12ccc:	2301      	movs	r3, #1
   12cce:	9301      	str	r3, [sp, #4]
   12cd0:	2301      	movs	r3, #1
   12cd2:	9300      	str	r3, [sp, #0]
   12cd4:	2301      	movs	r3, #1
   12cd6:	2201      	movs	r2, #1
   12cd8:	2101      	movs	r1, #1
   12cda:	f7ff fea1 	bl	12a20 <PixelDisplayInterface::Color_t::Color_t(bool, bool, bool, unsigned char, unsigned char, bool)>
                   /* Green      = */ 1,
                   /* Blue       = */ 1,
                   /* Alpha      = */ 1,
                   /* Color Bits = */ 1,
                   /* Monochrome = */ true);
   12cde:	ab06      	add	r3, sp, #24
   12ce0:	aa07      	add	r2, sp, #28
   12ce2:	6812      	ldr	r2, [r2, #0]
   12ce4:	4611      	mov	r1, r2
   12ce6:	8019      	strh	r1, [r3, #0]
   12ce8:	3302      	adds	r3, #2
   12cea:	0c12      	lsrs	r2, r2, #16
   12cec:	701a      	strb	r2, [r3, #0]
   12cee:	4623      	mov	r3, r4
   12cf0:	4619      	mov	r1, r3
   12cf2:	4809      	ldr	r0, [pc, #36]	; (12d18 <Ssd1306::AvailableColors()+0x64>)
   12cf4:	f003 fafc 	bl	162f0 <__cyg_profile_func_exit>
   12cf8:	2300      	movs	r3, #0
   12cfa:	f89d 2018 	ldrb.w	r2, [sp, #24]
   12cfe:	f362 0307 	bfi	r3, r2, #0, #8
   12d02:	f89d 2019 	ldrb.w	r2, [sp, #25]
   12d06:	f362 230f 	bfi	r3, r2, #8, #8
   12d0a:	f89d 201a 	ldrb.w	r2, [sp, #26]
   12d0e:	f362 4317 	bfi	r3, r2, #16, #8
  }
   12d12:	4618      	mov	r0, r3
   12d14:	b008      	add	sp, #32
   12d16:	bd10      	pop	{r4, pc}
   12d18:	00012cb5 	.word	0x00012cb5

00012d1c <Ssd1306::Write(unsigned long, Ssd1306::Transaction, unsigned int)>:

  void Write(uint32_t data, Transaction transaction, size_t size = 1)
   12d1c:	b510      	push	{r4, lr}
   12d1e:	b086      	sub	sp, #24
   12d20:	4674      	mov	r4, lr
   12d22:	9003      	str	r0, [sp, #12]
   12d24:	9102      	str	r1, [sp, #8]
   12d26:	9201      	str	r2, [sp, #4]
   12d28:	9300      	str	r3, [sp, #0]
   12d2a:	4623      	mov	r3, r4
   12d2c:	4619      	mov	r1, r3
   12d2e:	481e      	ldr	r0, [pc, #120]	; (12da8 <Ssd1306::Write(unsigned long, Ssd1306::Transaction, unsigned int)+0x8c>)
   12d30:	f003 faca 	bl	162c8 <__cyg_profile_func_enter>
  {
    dc_->Set(static_cast<Gpio::State>(transaction));
   12d34:	9b03      	ldr	r3, [sp, #12]
   12d36:	68db      	ldr	r3, [r3, #12]
   12d38:	9a01      	ldr	r2, [sp, #4]
   12d3a:	b2d2      	uxtb	r2, r2
   12d3c:	4611      	mov	r1, r2
   12d3e:	4618      	mov	r0, r3
   12d40:	f7fe fa84 	bl	1124c <Gpio::Set(GpioInterface::State)>
    cs_->SetLow();
   12d44:	9b03      	ldr	r3, [sp, #12]
   12d46:	689b      	ldr	r3, [r3, #8]
   12d48:	4618      	mov	r0, r3
   12d4a:	f7fe fa4d 	bl	111e8 <Gpio::SetLow()>
    for (size_t i = 0; i < size; i++)
   12d4e:	2300      	movs	r3, #0
   12d50:	9305      	str	r3, [sp, #20]
   12d52:	9a05      	ldr	r2, [sp, #20]
   12d54:	9b00      	ldr	r3, [sp, #0]
   12d56:	429a      	cmp	r2, r3
   12d58:	d218      	bcs.n	12d8c <Ssd1306::Write(unsigned long, Ssd1306::Transaction, unsigned int)+0x70>
    {
      uint8_t send = static_cast<uint8_t>(data >> (((size - 1) - i) * 8));
   12d5a:	9a00      	ldr	r2, [sp, #0]
   12d5c:	9b05      	ldr	r3, [sp, #20]
   12d5e:	1ad3      	subs	r3, r2, r3
   12d60:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
   12d64:	3b01      	subs	r3, #1
   12d66:	00db      	lsls	r3, r3, #3
   12d68:	9a02      	ldr	r2, [sp, #8]
   12d6a:	fa22 f303 	lsr.w	r3, r2, r3
   12d6e:	f88d 3013 	strb.w	r3, [sp, #19]
      if (transaction == Transaction::kCommand)
      {
        LOG_DEBUG("send = 0x%X", send);
      }
      ssp_->Transfer(send);
   12d72:	9b03      	ldr	r3, [sp, #12]
   12d74:	685b      	ldr	r3, [r3, #4]
   12d76:	f89d 2013 	ldrb.w	r2, [sp, #19]
   12d7a:	b292      	uxth	r2, r2
   12d7c:	4611      	mov	r1, r2
   12d7e:	4618      	mov	r0, r3
   12d80:	f7ff fa34 	bl	121ec <Ssp::Transfer(unsigned short)>
    for (size_t i = 0; i < size; i++)
   12d84:	9b05      	ldr	r3, [sp, #20]
   12d86:	3301      	adds	r3, #1
   12d88:	9305      	str	r3, [sp, #20]
   12d8a:	e7e2      	b.n	12d52 <Ssd1306::Write(unsigned long, Ssd1306::Transaction, unsigned int)+0x36>
    }
    cs_->SetHigh();
   12d8c:	9b03      	ldr	r3, [sp, #12]
   12d8e:	689b      	ldr	r3, [r3, #8]
   12d90:	4618      	mov	r0, r3
   12d92:	f7fe f9f7 	bl	11184 <Gpio::SetHigh()>
   12d96:	4623      	mov	r3, r4
   12d98:	4619      	mov	r1, r3
   12d9a:	4803      	ldr	r0, [pc, #12]	; (12da8 <Ssd1306::Write(unsigned long, Ssd1306::Transaction, unsigned int)+0x8c>)
   12d9c:	f003 faa8 	bl	162f0 <__cyg_profile_func_exit>
  }
   12da0:	bf00      	nop
   12da2:	b006      	add	sp, #24
   12da4:	bd10      	pop	{r4, pc}
   12da6:	bf00      	nop
   12da8:	00012d1d 	.word	0x00012d1d

00012dac <Ssd1306::InitializationPanel()>:

  void InitializationPanel()
   12dac:	b510      	push	{r4, lr}
   12dae:	b082      	sub	sp, #8
   12db0:	4674      	mov	r4, lr
   12db2:	9001      	str	r0, [sp, #4]
   12db4:	4623      	mov	r3, r4
   12db6:	4619      	mov	r1, r3
   12db8:	4837      	ldr	r0, [pc, #220]	; (12e98 <Ssd1306::InitializationPanel()+0xec>)
   12dba:	f003 fa85 	bl	162c8 <__cyg_profile_func_enter>
  {
    // This sequence of commands was found in:
    //   datasheets/OLED-display/ER-OLED0.96-1_Series_Datasheet.pdf, page 15

    // turn off oled panel
    Write(0xAE, Transaction::kCommand);
   12dbe:	2301      	movs	r3, #1
   12dc0:	2200      	movs	r2, #0
   12dc2:	21ae      	movs	r1, #174	; 0xae
   12dc4:	9801      	ldr	r0, [sp, #4]
   12dc6:	f7ff ffa9 	bl	12d1c <Ssd1306::Write(unsigned long, Ssd1306::Transaction, unsigned int)>

    // set display clock divide ratio/oscillator frequency
    // set divide ratio
    Write(0xD5'80, Transaction::kCommand, 2);
   12dca:	2302      	movs	r3, #2
   12dcc:	2200      	movs	r2, #0
   12dce:	f24d 5180 	movw	r1, #54656	; 0xd580
   12dd2:	9801      	ldr	r0, [sp, #4]
   12dd4:	f7ff ffa2 	bl	12d1c <Ssd1306::Write(unsigned long, Ssd1306::Transaction, unsigned int)>

    // set multiplex ratio(1 to 64)
    // 1/64 duty
    Write(0xA8'3F, Transaction::kCommand, 2);
   12dd8:	2302      	movs	r3, #2
   12dda:	2200      	movs	r2, #0
   12ddc:	f64a 013f 	movw	r1, #43071	; 0xa83f
   12de0:	9801      	ldr	r0, [sp, #4]
   12de2:	f7ff ff9b 	bl	12d1c <Ssd1306::Write(unsigned long, Ssd1306::Transaction, unsigned int)>

    // set display offset = not offset
    Write(0xD3'00, Transaction::kCommand, 2);
   12de6:	2302      	movs	r3, #2
   12de8:	2200      	movs	r2, #0
   12dea:	f44f 4153 	mov.w	r1, #54016	; 0xd300
   12dee:	9801      	ldr	r0, [sp, #4]
   12df0:	f7ff ff94 	bl	12d1c <Ssd1306::Write(unsigned long, Ssd1306::Transaction, unsigned int)>

    // Set display start line
    Write(0x40, Transaction::kCommand);
   12df4:	2301      	movs	r3, #1
   12df6:	2200      	movs	r2, #0
   12df8:	2140      	movs	r1, #64	; 0x40
   12dfa:	9801      	ldr	r0, [sp, #4]
   12dfc:	f7ff ff8e 	bl	12d1c <Ssd1306::Write(unsigned long, Ssd1306::Transaction, unsigned int)>

    // Disable Charge Pump
    Write(0x8D'14, Transaction::kCommand, 2);
   12e00:	2302      	movs	r3, #2
   12e02:	2200      	movs	r2, #0
   12e04:	f648 5114 	movw	r1, #36116	; 0x8d14
   12e08:	9801      	ldr	r0, [sp, #4]
   12e0a:	f7ff ff87 	bl	12d1c <Ssd1306::Write(unsigned long, Ssd1306::Transaction, unsigned int)>

    // set segment re-map 128 to 0
    Write(0xA1, Transaction::kCommand);
   12e0e:	2301      	movs	r3, #1
   12e10:	2200      	movs	r2, #0
   12e12:	21a1      	movs	r1, #161	; 0xa1
   12e14:	9801      	ldr	r0, [sp, #4]
   12e16:	f7ff ff81 	bl	12d1c <Ssd1306::Write(unsigned long, Ssd1306::Transaction, unsigned int)>

    // Set COM Output Scan Direction 64 to 0
    Write(0xC8, Transaction::kCommand);
   12e1a:	2301      	movs	r3, #1
   12e1c:	2200      	movs	r2, #0
   12e1e:	21c8      	movs	r1, #200	; 0xc8
   12e20:	9801      	ldr	r0, [sp, #4]
   12e22:	f7ff ff7b 	bl	12d1c <Ssd1306::Write(unsigned long, Ssd1306::Transaction, unsigned int)>

    // set com pins hardware configuration
    Write(0xDA'12, Transaction::kCommand, 2);
   12e26:	2302      	movs	r3, #2
   12e28:	2200      	movs	r2, #0
   12e2a:	f64d 2112 	movw	r1, #55826	; 0xda12
   12e2e:	9801      	ldr	r0, [sp, #4]
   12e30:	f7ff ff74 	bl	12d1c <Ssd1306::Write(unsigned long, Ssd1306::Transaction, unsigned int)>

    // set contrast control register
    Write(0x81'CF, Transaction::kCommand, 2);
   12e34:	2302      	movs	r3, #2
   12e36:	2200      	movs	r2, #0
   12e38:	f248 11cf 	movw	r1, #33231	; 0x81cf
   12e3c:	9801      	ldr	r0, [sp, #4]
   12e3e:	f7ff ff6d 	bl	12d1c <Ssd1306::Write(unsigned long, Ssd1306::Transaction, unsigned int)>

    // Set pre-charge period
    Write(0xD9'F1, Transaction::kCommand, 2);
   12e42:	2302      	movs	r3, #2
   12e44:	2200      	movs	r2, #0
   12e46:	f64d 11f1 	movw	r1, #55793	; 0xd9f1
   12e4a:	9801      	ldr	r0, [sp, #4]
   12e4c:	f7ff ff66 	bl	12d1c <Ssd1306::Write(unsigned long, Ssd1306::Transaction, unsigned int)>

    // Set Vcomh
    Write(0xDB'40, Transaction::kCommand, 2);
   12e50:	2302      	movs	r3, #2
   12e52:	2200      	movs	r2, #0
   12e54:	f64d 3140 	movw	r1, #56128	; 0xdb40
   12e58:	9801      	ldr	r0, [sp, #4]
   12e5a:	f7ff ff5f 	bl	12d1c <Ssd1306::Write(unsigned long, Ssd1306::Transaction, unsigned int)>

    SetHorizontalAddressMode();
   12e5e:	9801      	ldr	r0, [sp, #4]
   12e60:	f000 f85e 	bl	12f20 <Ssd1306::SetHorizontalAddressMode()>

    // Enable entire display
    Write(0xA4, Transaction::kCommand);
   12e64:	2301      	movs	r3, #1
   12e66:	2200      	movs	r2, #0
   12e68:	21a4      	movs	r1, #164	; 0xa4
   12e6a:	9801      	ldr	r0, [sp, #4]
   12e6c:	f7ff ff56 	bl	12d1c <Ssd1306::Write(unsigned long, Ssd1306::Transaction, unsigned int)>

    // Set display to normal colors
    Write(0xA6, Transaction::kCommand);
   12e70:	2301      	movs	r3, #1
   12e72:	2200      	movs	r2, #0
   12e74:	21a6      	movs	r1, #166	; 0xa6
   12e76:	9801      	ldr	r0, [sp, #4]
   12e78:	f7ff ff50 	bl	12d1c <Ssd1306::Write(unsigned long, Ssd1306::Transaction, unsigned int)>

    // Set Display On
    Write(0xAF, Transaction::kCommand);
   12e7c:	2301      	movs	r3, #1
   12e7e:	2200      	movs	r2, #0
   12e80:	21af      	movs	r1, #175	; 0xaf
   12e82:	9801      	ldr	r0, [sp, #4]
   12e84:	f7ff ff4a 	bl	12d1c <Ssd1306::Write(unsigned long, Ssd1306::Transaction, unsigned int)>
   12e88:	4623      	mov	r3, r4
   12e8a:	4619      	mov	r1, r3
   12e8c:	4802      	ldr	r0, [pc, #8]	; (12e98 <Ssd1306::InitializationPanel()+0xec>)
   12e8e:	f003 fa2f 	bl	162f0 <__cyg_profile_func_exit>
  }
   12e92:	bf00      	nop
   12e94:	b002      	add	sp, #8
   12e96:	bd10      	pop	{r4, pc}
   12e98:	00012dad 	.word	0x00012dad

00012e9c <Ssd1306::Initialize()>:

  void Initialize() final override
   12e9c:	b510      	push	{r4, lr}
   12e9e:	b084      	sub	sp, #16
   12ea0:	4674      	mov	r4, lr
   12ea2:	9003      	str	r0, [sp, #12]
   12ea4:	4623      	mov	r3, r4
   12ea6:	4619      	mov	r1, r3
   12ea8:	481c      	ldr	r0, [pc, #112]	; (12f1c <Ssd1306::Initialize()+0x80>)
   12eaa:	f003 fa0d 	bl	162c8 <__cyg_profile_func_enter>
  {
    cs_->SetAsOutput();
   12eae:	9b03      	ldr	r3, [sp, #12]
   12eb0:	689b      	ldr	r3, [r3, #8]
   12eb2:	4618      	mov	r0, r3
   12eb4:	f7fe f906 	bl	110c4 <Gpio::SetAsOutput()>
    dc_->SetAsOutput();
   12eb8:	9b03      	ldr	r3, [sp, #12]
   12eba:	68db      	ldr	r3, [r3, #12]
   12ebc:	4618      	mov	r0, r3
   12ebe:	f7fe f901 	bl	110c4 <Gpio::SetAsOutput()>
    cs_->SetHigh();
   12ec2:	9b03      	ldr	r3, [sp, #12]
   12ec4:	689b      	ldr	r3, [r3, #8]
   12ec6:	4618      	mov	r0, r3
   12ec8:	f7fe f95c 	bl	11184 <Gpio::SetHigh()>
    dc_->SetHigh();
   12ecc:	9b03      	ldr	r3, [sp, #12]
   12ece:	68db      	ldr	r3, [r3, #12]
   12ed0:	4618      	mov	r0, r3
   12ed2:	f7fe f957 	bl	11184 <Gpio::SetHigh()>

    ssp_->SetPeripheralMode(Ssp::MasterSlaveMode::kMaster, Ssp::FrameMode::kSpi,
   12ed6:	9b03      	ldr	r3, [sp, #12]
   12ed8:	6858      	ldr	r0, [r3, #4]
   12eda:	2307      	movs	r3, #7
   12edc:	2200      	movs	r2, #0
   12ede:	2100      	movs	r1, #0
   12ee0:	f7ff fa30 	bl	12344 <Ssp::SetPeripheralMode(SspInterface::MasterSlaveMode, SspInterface::FrameMode, SspInterface::DataSize)>
                            Ssp::DataSize::kEight);
    // Set speed to 1Mhz by dividing by 1 * ClockFrequencyInMHz.
    ssp_->SetClock(false, false, 1, config::kSystemClockRateMhz/3);
   12ee4:	9b03      	ldr	r3, [sp, #12]
   12ee6:	6858      	ldr	r0, [r3, #4]
   12ee8:	2310      	movs	r3, #16
   12eea:	9300      	str	r3, [sp, #0]
   12eec:	2301      	movs	r3, #1
   12eee:	2200      	movs	r2, #0
   12ef0:	2100      	movs	r1, #0
   12ef2:	f7ff fbdd 	bl	126b0 <Ssp::SetClock(bool, bool, unsigned char, unsigned char)>
    ssp_->Initialize();
   12ef6:	9b03      	ldr	r3, [sp, #12]
   12ef8:	685b      	ldr	r3, [r3, #4]
   12efa:	4618      	mov	r0, r3
   12efc:	f7ff f8c8 	bl	12090 <Ssp::Initialize()>

    Clear();
   12f00:	9803      	ldr	r0, [sp, #12]
   12f02:	f000 f837 	bl	12f74 <Ssd1306::Clear()>
    InitializationPanel();
   12f06:	9803      	ldr	r0, [sp, #12]
   12f08:	f7ff ff50 	bl	12dac <Ssd1306::InitializationPanel()>
   12f0c:	4623      	mov	r3, r4
   12f0e:	4619      	mov	r1, r3
   12f10:	4802      	ldr	r0, [pc, #8]	; (12f1c <Ssd1306::Initialize()+0x80>)
   12f12:	f003 f9ed 	bl	162f0 <__cyg_profile_func_exit>
  }
   12f16:	bf00      	nop
   12f18:	b004      	add	sp, #16
   12f1a:	bd10      	pop	{r4, pc}
   12f1c:	00012e9d 	.word	0x00012e9d

00012f20 <Ssd1306::SetHorizontalAddressMode()>:

  void SetHorizontalAddressMode()
   12f20:	b510      	push	{r4, lr}
   12f22:	b082      	sub	sp, #8
   12f24:	4674      	mov	r4, lr
   12f26:	9001      	str	r0, [sp, #4]
   12f28:	4623      	mov	r3, r4
   12f2a:	4619      	mov	r1, r3
   12f2c:	480e      	ldr	r0, [pc, #56]	; (12f68 <Ssd1306::SetHorizontalAddressMode()+0x48>)
   12f2e:	f003 f9cb 	bl	162c8 <__cyg_profile_func_enter>
  {
    // Set Addressing mode
    // Addressing mode = Horizontal Mode (0b00)
    Write(0x20'00, Transaction::kCommand, 2);
   12f32:	2302      	movs	r3, #2
   12f34:	2200      	movs	r2, #0
   12f36:	f44f 5100 	mov.w	r1, #8192	; 0x2000
   12f3a:	9801      	ldr	r0, [sp, #4]
   12f3c:	f7ff feee 	bl	12d1c <Ssd1306::Write(unsigned long, Ssd1306::Transaction, unsigned int)>
    // Set Column Addresses
    // Set Column Address start = Column 0
    // Set Column Address start = Column 127
    Write(0x21'00'7F, Transaction::kCommand, 3);
   12f40:	2303      	movs	r3, #3
   12f42:	2200      	movs	r2, #0
   12f44:	4909      	ldr	r1, [pc, #36]	; (12f6c <Ssd1306::SetHorizontalAddressMode()+0x4c>)
   12f46:	9801      	ldr	r0, [sp, #4]
   12f48:	f7ff fee8 	bl	12d1c <Ssd1306::Write(unsigned long, Ssd1306::Transaction, unsigned int)>
    // Set Page Addresses
    // Set Page Address start = Page 0
    // Set Page Address start = Page 7
    Write(0x22'00'07, Transaction::kCommand, 3);
   12f4c:	2303      	movs	r3, #3
   12f4e:	2200      	movs	r2, #0
   12f50:	4907      	ldr	r1, [pc, #28]	; (12f70 <Ssd1306::SetHorizontalAddressMode()+0x50>)
   12f52:	9801      	ldr	r0, [sp, #4]
   12f54:	f7ff fee2 	bl	12d1c <Ssd1306::Write(unsigned long, Ssd1306::Transaction, unsigned int)>
   12f58:	4623      	mov	r3, r4
   12f5a:	4619      	mov	r1, r3
   12f5c:	4802      	ldr	r0, [pc, #8]	; (12f68 <Ssd1306::SetHorizontalAddressMode()+0x48>)
   12f5e:	f003 f9c7 	bl	162f0 <__cyg_profile_func_exit>
  }
   12f62:	bf00      	nop
   12f64:	b002      	add	sp, #8
   12f66:	bd10      	pop	{r4, pc}
   12f68:	00012f21 	.word	0x00012f21
   12f6c:	0021007f 	.word	0x0021007f
   12f70:	00220007 	.word	0x00220007

00012f74 <Ssd1306::Clear()>:
  /// Clears the internal bitmap_ to zero (or a user defined clear_value)
  void Clear() final override
   12f74:	b510      	push	{r4, lr}
   12f76:	b082      	sub	sp, #8
   12f78:	4674      	mov	r4, lr
   12f7a:	9001      	str	r0, [sp, #4]
   12f7c:	4623      	mov	r3, r4
   12f7e:	4619      	mov	r1, r3
   12f80:	4809      	ldr	r0, [pc, #36]	; (12fa8 <Ssd1306::Clear()+0x34>)
   12f82:	f003 f9a1 	bl	162c8 <__cyg_profile_func_enter>
  {
    memset(bitmap_, 0x00, sizeof(bitmap_));
   12f86:	9b01      	ldr	r3, [sp, #4]
   12f88:	3368      	adds	r3, #104	; 0x68
   12f8a:	f240 62c1 	movw	r2, #1729	; 0x6c1
   12f8e:	2100      	movs	r1, #0
   12f90:	4618      	mov	r0, r3
   12f92:	f006 f847 	bl	19024 <memset>
   12f96:	4623      	mov	r3, r4
   12f98:	4619      	mov	r1, r3
   12f9a:	4803      	ldr	r0, [pc, #12]	; (12fa8 <Ssd1306::Clear()+0x34>)
   12f9c:	f003 f9a8 	bl	162f0 <__cyg_profile_func_exit>
  }
   12fa0:	bf00      	nop
   12fa2:	b002      	add	sp, #8
   12fa4:	bd10      	pop	{r4, pc}
   12fa6:	bf00      	nop
   12fa8:	00012f75 	.word	0x00012f75

00012fac <Ssd1306::DrawPixel(long, long, PixelDisplayInterface::Color_t)>:
  void Fill()
  {
    memset(bitmap_, 0xFF, sizeof(bitmap_));
  }
  void DrawPixel(int32_t x, int32_t y, Color_t color) final override
   12fac:	b510      	push	{r4, lr}
   12fae:	b08c      	sub	sp, #48	; 0x30
   12fb0:	4674      	mov	r4, lr
   12fb2:	9003      	str	r0, [sp, #12]
   12fb4:	9102      	str	r1, [sp, #8]
   12fb6:	9201      	str	r2, [sp, #4]
   12fb8:	9300      	str	r3, [sp, #0]
   12fba:	4623      	mov	r3, r4
   12fbc:	4619      	mov	r1, r3
   12fbe:	481f      	ldr	r0, [pc, #124]	; (1303c <Ssd1306::DrawPixel(long, long, PixelDisplayInterface::Color_t)+0x90>)
   12fc0:	f003 f982 	bl	162c8 <__cyg_profile_func_enter>
  {
    // The 3 least significant bits hold the bit position within the byte
    uint32_t bit_position = y & 0b111;
   12fc4:	9b01      	ldr	r3, [sp, #4]
   12fc6:	f003 0307 	and.w	r3, r3, #7
   12fca:	930b      	str	r3, [sp, #44]	; 0x2c
    // Each byte makes up a vertical column.
    // Shifting by 3, which also divides by 8 (the 8-bits of a column), will
    // be the row that we need to edit.
    uint32_t row = y >> 3;
   12fcc:	9b01      	ldr	r3, [sp, #4]
   12fce:	10db      	asrs	r3, r3, #3
   12fd0:	930a      	str	r3, [sp, #40]	; 0x28
    // Mask to clear the bit
    uint32_t clear_mask = ~(1 << bit_position);
   12fd2:	2201      	movs	r2, #1
   12fd4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   12fd6:	fa02 f303 	lsl.w	r3, r2, r3
   12fda:	43db      	mvns	r3, r3
   12fdc:	9309      	str	r3, [sp, #36]	; 0x24
    // Mask to set the bit, if color.alpha != 0
    bool pixel_is_on  = (color.alpha != 0);
   12fde:	f89d 3002 	ldrb.w	r3, [sp, #2]
   12fe2:	2b00      	cmp	r3, #0
   12fe4:	bf14      	ite	ne
   12fe6:	2301      	movne	r3, #1
   12fe8:	2300      	moveq	r3, #0
   12fea:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
    uint32_t set_mask = pixel_is_on << bit_position;
   12fee:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
   12ff2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   12ff4:	fa02 f303 	lsl.w	r3, r2, r3
   12ff8:	9307      	str	r3, [sp, #28]
    // Address of the pixel column to edit
    uint8_t * pixel_column = &(bitmap_[row][x]);
   12ffa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   12ffc:	4613      	mov	r3, r2
   12ffe:	015b      	lsls	r3, r3, #5
   13000:	4413      	add	r3, r2
   13002:	009b      	lsls	r3, r3, #2
   13004:	4413      	add	r3, r2
   13006:	9a02      	ldr	r2, [sp, #8]
   13008:	4413      	add	r3, r2
   1300a:	3368      	adds	r3, #104	; 0x68
   1300c:	9a03      	ldr	r2, [sp, #12]
   1300e:	4413      	add	r3, r2
   13010:	9306      	str	r3, [sp, #24]
    // Read pixel column and update the pixel
    uint32_t result = (*pixel_column & clear_mask) | set_mask;
   13012:	9b06      	ldr	r3, [sp, #24]
   13014:	781b      	ldrb	r3, [r3, #0]
   13016:	461a      	mov	r2, r3
   13018:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1301a:	4013      	ands	r3, r2
   1301c:	9a07      	ldr	r2, [sp, #28]
   1301e:	4313      	orrs	r3, r2
   13020:	9305      	str	r3, [sp, #20]
    // Update pixel with the result of this operation
    *pixel_column = static_cast<uint8_t>(result);
   13022:	9b05      	ldr	r3, [sp, #20]
   13024:	b2da      	uxtb	r2, r3
   13026:	9b06      	ldr	r3, [sp, #24]
   13028:	701a      	strb	r2, [r3, #0]
   1302a:	4623      	mov	r3, r4
   1302c:	4619      	mov	r1, r3
   1302e:	4803      	ldr	r0, [pc, #12]	; (1303c <Ssd1306::DrawPixel(long, long, PixelDisplayInterface::Color_t)+0x90>)
   13030:	f003 f95e 	bl	162f0 <__cyg_profile_func_exit>
  }
   13034:	bf00      	nop
   13036:	b00c      	add	sp, #48	; 0x30
   13038:	bd10      	pop	{r4, pc}
   1303a:	bf00      	nop
   1303c:	00012fad 	.word	0x00012fad

00013040 <Ssd1306::Update()>:
  /// Writes internal bitmap_ to the screen
  void Update() final override
   13040:	b510      	push	{r4, lr}
   13042:	b084      	sub	sp, #16
   13044:	4674      	mov	r4, lr
   13046:	9001      	str	r0, [sp, #4]
   13048:	4623      	mov	r3, r4
   1304a:	4619      	mov	r1, r3
   1304c:	4818      	ldr	r0, [pc, #96]	; (130b0 <Ssd1306::Update()+0x70>)
   1304e:	f003 f93b 	bl	162c8 <__cyg_profile_func_enter>
  {
    SetHorizontalAddressMode();
   13052:	9801      	ldr	r0, [sp, #4]
   13054:	f7ff ff64 	bl	12f20 <Ssd1306::SetHorizontalAddressMode()>
    for (size_t row = 0; row < kRows; row++)
   13058:	2300      	movs	r3, #0
   1305a:	9303      	str	r3, [sp, #12]
   1305c:	9b03      	ldr	r3, [sp, #12]
   1305e:	2b07      	cmp	r3, #7
   13060:	d81e      	bhi.n	130a0 <Ssd1306::Update()+0x60>
    {
      for (size_t column = 0; column < kColumns; column++)
   13062:	2300      	movs	r3, #0
   13064:	9302      	str	r3, [sp, #8]
   13066:	9b02      	ldr	r3, [sp, #8]
   13068:	2b7f      	cmp	r3, #127	; 0x7f
   1306a:	d815      	bhi.n	13098 <Ssd1306::Update()+0x58>
      {
        Write(bitmap_[row][column], Transaction::kData);
   1306c:	9901      	ldr	r1, [sp, #4]
   1306e:	9a03      	ldr	r2, [sp, #12]
   13070:	4613      	mov	r3, r2
   13072:	015b      	lsls	r3, r3, #5
   13074:	4413      	add	r3, r2
   13076:	009b      	lsls	r3, r3, #2
   13078:	4413      	add	r3, r2
   1307a:	18ca      	adds	r2, r1, r3
   1307c:	9b02      	ldr	r3, [sp, #8]
   1307e:	4413      	add	r3, r2
   13080:	3368      	adds	r3, #104	; 0x68
   13082:	781b      	ldrb	r3, [r3, #0]
   13084:	4619      	mov	r1, r3
   13086:	2301      	movs	r3, #1
   13088:	2201      	movs	r2, #1
   1308a:	9801      	ldr	r0, [sp, #4]
   1308c:	f7ff fe46 	bl	12d1c <Ssd1306::Write(unsigned long, Ssd1306::Transaction, unsigned int)>
      for (size_t column = 0; column < kColumns; column++)
   13090:	9b02      	ldr	r3, [sp, #8]
   13092:	3301      	adds	r3, #1
   13094:	9302      	str	r3, [sp, #8]
   13096:	e7e6      	b.n	13066 <Ssd1306::Update()+0x26>
    for (size_t row = 0; row < kRows; row++)
   13098:	9b03      	ldr	r3, [sp, #12]
   1309a:	3301      	adds	r3, #1
   1309c:	9303      	str	r3, [sp, #12]
   1309e:	e7dd      	b.n	1305c <Ssd1306::Update()+0x1c>
   130a0:	4623      	mov	r3, r4
   130a2:	4619      	mov	r1, r3
   130a4:	4802      	ldr	r0, [pc, #8]	; (130b0 <Ssd1306::Update()+0x70>)
   130a6:	f003 f923 	bl	162f0 <__cyg_profile_func_exit>
      }
    }
  }
   130aa:	bf00      	nop
   130ac:	b004      	add	sp, #16
   130ae:	bd10      	pop	{r4, pc}
   130b0:	00013041 	.word	0x00013041

000130b4 <Graphics::Graphics(PixelDisplayInterface*)>:
#include "utility/log.hpp"

class Graphics
{
 public:
  explicit Graphics(PixelDisplayInterface * display)
   130b4:	b530      	push	{r4, r5, lr}
   130b6:	b083      	sub	sp, #12
   130b8:	4675      	mov	r5, lr
   130ba:	9001      	str	r0, [sp, #4]
   130bc:	9100      	str	r1, [sp, #0]
   130be:	462b      	mov	r3, r5
   130c0:	4619      	mov	r1, r3
   130c2:	481e      	ldr	r0, [pc, #120]	; (1313c <Graphics::Graphics(PixelDisplayInterface*)+0x88>)
   130c4:	f003 f900 	bl	162c8 <__cyg_profile_func_enter>
      : display_(display), color_(), width_(0), height_(0)
   130c8:	9b01      	ldr	r3, [sp, #4]
   130ca:	9a00      	ldr	r2, [sp, #0]
   130cc:	601a      	str	r2, [r3, #0]
   130ce:	9b01      	ldr	r3, [sp, #4]
   130d0:	3304      	adds	r3, #4
   130d2:	4618      	mov	r0, r3
   130d4:	f7ff fcee 	bl	12ab4 <PixelDisplayInterface::Color_t::Color_t()>
   130d8:	9b01      	ldr	r3, [sp, #4]
   130da:	2200      	movs	r2, #0
   130dc:	609a      	str	r2, [r3, #8]
   130de:	9b01      	ldr	r3, [sp, #4]
   130e0:	2200      	movs	r2, #0
   130e2:	60da      	str	r2, [r3, #12]
  {
    width_  = display->GetWidth();
   130e4:	9b00      	ldr	r3, [sp, #0]
   130e6:	681b      	ldr	r3, [r3, #0]
   130e8:	681b      	ldr	r3, [r3, #0]
   130ea:	9800      	ldr	r0, [sp, #0]
   130ec:	4798      	blx	r3
   130ee:	4602      	mov	r2, r0
   130f0:	9b01      	ldr	r3, [sp, #4]
   130f2:	609a      	str	r2, [r3, #8]
    height_ = display->GetHeight();
   130f4:	9b00      	ldr	r3, [sp, #0]
   130f6:	681b      	ldr	r3, [r3, #0]
   130f8:	3304      	adds	r3, #4
   130fa:	681b      	ldr	r3, [r3, #0]
   130fc:	9800      	ldr	r0, [sp, #0]
   130fe:	4798      	blx	r3
   13100:	4602      	mov	r2, r0
   13102:	9b01      	ldr	r3, [sp, #4]
   13104:	60da      	str	r2, [r3, #12]
    color_  = display->AvailableColors();
   13106:	9b00      	ldr	r3, [sp, #0]
   13108:	681b      	ldr	r3, [r3, #0]
   1310a:	3308      	adds	r3, #8
   1310c:	681b      	ldr	r3, [r3, #0]
   1310e:	9c01      	ldr	r4, [sp, #4]
   13110:	9800      	ldr	r0, [sp, #0]
   13112:	4798      	blx	r3
   13114:	4603      	mov	r3, r0
   13116:	461a      	mov	r2, r3
   13118:	7122      	strb	r2, [r4, #4]
   1311a:	f3c3 2207 	ubfx	r2, r3, #8, #8
   1311e:	7162      	strb	r2, [r4, #5]
   13120:	f3c3 4307 	ubfx	r3, r3, #16, #8
   13124:	71a3      	strb	r3, [r4, #6]
  }
   13126:	9c01      	ldr	r4, [sp, #4]
   13128:	462b      	mov	r3, r5
   1312a:	4619      	mov	r1, r3
   1312c:	4803      	ldr	r0, [pc, #12]	; (1313c <Graphics::Graphics(PixelDisplayInterface*)+0x88>)
   1312e:	f003 f8df 	bl	162f0 <__cyg_profile_func_exit>
   13132:	4623      	mov	r3, r4
   13134:	4618      	mov	r0, r3
   13136:	b003      	add	sp, #12
   13138:	bd30      	pop	{r4, r5, pc}
   1313a:	bf00      	nop
   1313c:	000130b5 	.word	0x000130b5

00013140 <Graphics::Initialize()>:
  void SetColor(PixelDisplayInterface::Color_t color)
  {
    color_ = color;
  }

  void Initialize()
   13140:	b510      	push	{r4, lr}
   13142:	b082      	sub	sp, #8
   13144:	4674      	mov	r4, lr
   13146:	9001      	str	r0, [sp, #4]
   13148:	4623      	mov	r3, r4
   1314a:	4619      	mov	r1, r3
   1314c:	480e      	ldr	r0, [pc, #56]	; (13188 <Graphics::Initialize()+0x48>)
   1314e:	f003 f8bb 	bl	162c8 <__cyg_profile_func_enter>
  {
    display_->Initialize();
   13152:	9b01      	ldr	r3, [sp, #4]
   13154:	681a      	ldr	r2, [r3, #0]
   13156:	9b01      	ldr	r3, [sp, #4]
   13158:	681b      	ldr	r3, [r3, #0]
   1315a:	681b      	ldr	r3, [r3, #0]
   1315c:	330c      	adds	r3, #12
   1315e:	681b      	ldr	r3, [r3, #0]
   13160:	4610      	mov	r0, r2
   13162:	4798      	blx	r3
    display_->Enable();
   13164:	9b01      	ldr	r3, [sp, #4]
   13166:	681a      	ldr	r2, [r3, #0]
   13168:	9b01      	ldr	r3, [sp, #4]
   1316a:	681b      	ldr	r3, [r3, #0]
   1316c:	681b      	ldr	r3, [r3, #0]
   1316e:	3310      	adds	r3, #16
   13170:	681b      	ldr	r3, [r3, #0]
   13172:	4610      	mov	r0, r2
   13174:	4798      	blx	r3
   13176:	4623      	mov	r3, r4
   13178:	4619      	mov	r1, r3
   1317a:	4803      	ldr	r0, [pc, #12]	; (13188 <Graphics::Initialize()+0x48>)
   1317c:	f003 f8b8 	bl	162f0 <__cyg_profile_func_exit>
  }
   13180:	bf00      	nop
   13182:	b002      	add	sp, #8
   13184:	bd10      	pop	{r4, pc}
   13186:	bf00      	nop
   13188:	00013141 	.word	0x00013141

0001318c <Graphics::DrawCharacter(long, long, char, bool)>:
    // |                    |
    // ----------------------
    DrawVerticalLine(x + width, y, height);
  }

  void DrawCharacter(int32_t x0, int32_t y0, char letter,
   1318c:	b510      	push	{r4, lr}
   1318e:	b08e      	sub	sp, #56	; 0x38
   13190:	4674      	mov	r4, lr
   13192:	9007      	str	r0, [sp, #28]
   13194:	9106      	str	r1, [sp, #24]
   13196:	9205      	str	r2, [sp, #20]
   13198:	f88d 3013 	strb.w	r3, [sp, #19]
   1319c:	4623      	mov	r3, r4
   1319e:	4619      	mov	r1, r3
   131a0:	4837      	ldr	r0, [pc, #220]	; (13280 <Graphics::DrawCharacter(long, long, char, bool)+0xf4>)
   131a2:	f003 f891 	bl	162c8 <__cyg_profile_func_enter>
                     bool fill_background = true)
  {
    int32_t letter_position = static_cast<int32_t>(letter);
   131a6:	f89d 3013 	ldrb.w	r3, [sp, #19]
   131aa:	930b      	str	r3, [sp, #44]	; 0x2c

    PixelDisplayInterface::Color_t foreground = color_;
   131ac:	9a07      	ldr	r2, [sp, #28]
   131ae:	ab0a      	add	r3, sp, #40	; 0x28
   131b0:	3204      	adds	r2, #4
   131b2:	6812      	ldr	r2, [r2, #0]
   131b4:	4611      	mov	r1, r2
   131b6:	8019      	strh	r1, [r3, #0]
   131b8:	3302      	adds	r3, #2
   131ba:	0c12      	lsrs	r2, r2, #16
   131bc:	701a      	strb	r2, [r3, #0]
    PixelDisplayInterface::Color_t background =
        PixelDisplayInterface::Color_t(0, 0, 0, 0, 1, true);
   131be:	a809      	add	r0, sp, #36	; 0x24
   131c0:	2301      	movs	r3, #1
   131c2:	9302      	str	r3, [sp, #8]
   131c4:	2301      	movs	r3, #1
   131c6:	9301      	str	r3, [sp, #4]
   131c8:	2300      	movs	r3, #0
   131ca:	9300      	str	r3, [sp, #0]
   131cc:	2300      	movs	r3, #0
   131ce:	2200      	movs	r2, #0
   131d0:	2100      	movs	r1, #0
   131d2:	f7ff fc25 	bl	12a20 <PixelDisplayInterface::Color_t::Color_t(bool, bool, bool, unsigned char, unsigned char, bool)>

    for (int32_t y = 0; y < 8; y++)
   131d6:	2300      	movs	r3, #0
   131d8:	930d      	str	r3, [sp, #52]	; 0x34
   131da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   131dc:	2b07      	cmp	r3, #7
   131de:	dc3d      	bgt.n	1325c <Graphics::DrawCharacter(long, long, char, bool)+0xd0>
    {
      for (int32_t x = 0; x < 8; x++)
   131e0:	2300      	movs	r3, #0
   131e2:	930c      	str	r3, [sp, #48]	; 0x30
   131e4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   131e6:	2b07      	cmp	r3, #7
   131e8:	dc34      	bgt.n	13254 <Graphics::DrawCharacter(long, long, char, bool)+0xc8>
      {
        if (font8x8_basic[letter_position][y] & (1 << x))
   131ea:	4a26      	ldr	r2, [pc, #152]	; (13284 <Graphics::DrawCharacter(long, long, char, bool)+0xf8>)
   131ec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   131ee:	00db      	lsls	r3, r3, #3
   131f0:	441a      	add	r2, r3
   131f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   131f4:	4413      	add	r3, r2
   131f6:	781b      	ldrb	r3, [r3, #0]
   131f8:	461a      	mov	r2, r3
   131fa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   131fc:	fa42 f303 	asr.w	r3, r2, r3
   13200:	f003 0301 	and.w	r3, r3, #1
   13204:	2b00      	cmp	r3, #0
   13206:	d009      	beq.n	1321c <Graphics::DrawCharacter(long, long, char, bool)+0x90>
        {
          color_ = foreground;
   13208:	9b07      	ldr	r3, [sp, #28]
   1320a:	3304      	adds	r3, #4
   1320c:	aa0a      	add	r2, sp, #40	; 0x28
   1320e:	6812      	ldr	r2, [r2, #0]
   13210:	4611      	mov	r1, r2
   13212:	8019      	strh	r1, [r3, #0]
   13214:	3302      	adds	r3, #2
   13216:	0c12      	lsrs	r2, r2, #16
   13218:	701a      	strb	r2, [r3, #0]
   1321a:	e00c      	b.n	13236 <Graphics::DrawCharacter(long, long, char, bool)+0xaa>
        }
        else if (fill_background)
   1321c:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
   13220:	2b00      	cmp	r3, #0
   13222:	d008      	beq.n	13236 <Graphics::DrawCharacter(long, long, char, bool)+0xaa>
        {
          color_ = background;
   13224:	9b07      	ldr	r3, [sp, #28]
   13226:	3304      	adds	r3, #4
   13228:	aa09      	add	r2, sp, #36	; 0x24
   1322a:	6812      	ldr	r2, [r2, #0]
   1322c:	4611      	mov	r1, r2
   1322e:	8019      	strh	r1, [r3, #0]
   13230:	3302      	adds	r3, #2
   13232:	0c12      	lsrs	r2, r2, #16
   13234:	701a      	strb	r2, [r3, #0]
        }
        DrawPixel(x0 + x, y0 + y);
   13236:	9a06      	ldr	r2, [sp, #24]
   13238:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1323a:	4413      	add	r3, r2
   1323c:	4619      	mov	r1, r3
   1323e:	9a05      	ldr	r2, [sp, #20]
   13240:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   13242:	4413      	add	r3, r2
   13244:	461a      	mov	r2, r3
   13246:	9807      	ldr	r0, [sp, #28]
   13248:	f000 f81e 	bl	13288 <Graphics::DrawPixel(unsigned long, unsigned long)>
      for (int32_t x = 0; x < 8; x++)
   1324c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1324e:	3301      	adds	r3, #1
   13250:	930c      	str	r3, [sp, #48]	; 0x30
   13252:	e7c7      	b.n	131e4 <Graphics::DrawCharacter(long, long, char, bool)+0x58>
    for (int32_t y = 0; y < 8; y++)
   13254:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   13256:	3301      	adds	r3, #1
   13258:	930d      	str	r3, [sp, #52]	; 0x34
   1325a:	e7be      	b.n	131da <Graphics::DrawCharacter(long, long, char, bool)+0x4e>
      }
    }
    color_ = foreground;
   1325c:	9b07      	ldr	r3, [sp, #28]
   1325e:	3304      	adds	r3, #4
   13260:	aa0a      	add	r2, sp, #40	; 0x28
   13262:	6812      	ldr	r2, [r2, #0]
   13264:	4611      	mov	r1, r2
   13266:	8019      	strh	r1, [r3, #0]
   13268:	3302      	adds	r3, #2
   1326a:	0c12      	lsrs	r2, r2, #16
   1326c:	701a      	strb	r2, [r3, #0]
   1326e:	4623      	mov	r3, r4
   13270:	4619      	mov	r1, r3
   13272:	4803      	ldr	r0, [pc, #12]	; (13280 <Graphics::DrawCharacter(long, long, char, bool)+0xf4>)
   13274:	f003 f83c 	bl	162f0 <__cyg_profile_func_exit>
  }
   13278:	bf00      	nop
   1327a:	b00e      	add	sp, #56	; 0x38
   1327c:	bd10      	pop	{r4, pc}
   1327e:	bf00      	nop
   13280:	0001318d 	.word	0x0001318d
   13284:	10000074 	.word	0x10000074

00013288 <Graphics::DrawPixel(unsigned long, unsigned long)>:

  void DrawPixel(uint32_t x, uint32_t y)
   13288:	b530      	push	{r4, r5, lr}
   1328a:	b085      	sub	sp, #20
   1328c:	4675      	mov	r5, lr
   1328e:	9003      	str	r0, [sp, #12]
   13290:	9102      	str	r1, [sp, #8]
   13292:	9201      	str	r2, [sp, #4]
   13294:	462b      	mov	r3, r5
   13296:	4619      	mov	r1, r3
   13298:	4810      	ldr	r0, [pc, #64]	; (132dc <Graphics::DrawPixel(unsigned long, unsigned long)+0x54>)
   1329a:	f003 f815 	bl	162c8 <__cyg_profile_func_enter>
  {
    // Pixels outside of the bounds of the screen will not be drawn.
    if (x <= width_ && y <= height_)
   1329e:	9b03      	ldr	r3, [sp, #12]
   132a0:	689b      	ldr	r3, [r3, #8]
   132a2:	9a02      	ldr	r2, [sp, #8]
   132a4:	429a      	cmp	r2, r3
   132a6:	d810      	bhi.n	132ca <Graphics::DrawPixel(unsigned long, unsigned long)+0x42>
   132a8:	9b03      	ldr	r3, [sp, #12]
   132aa:	68db      	ldr	r3, [r3, #12]
   132ac:	9a01      	ldr	r2, [sp, #4]
   132ae:	429a      	cmp	r2, r3
   132b0:	d80b      	bhi.n	132ca <Graphics::DrawPixel(unsigned long, unsigned long)+0x42>
    {
      display_->DrawPixel(x, y, color_);
   132b2:	9b03      	ldr	r3, [sp, #12]
   132b4:	6818      	ldr	r0, [r3, #0]
   132b6:	9b03      	ldr	r3, [sp, #12]
   132b8:	681b      	ldr	r3, [r3, #0]
   132ba:	681b      	ldr	r3, [r3, #0]
   132bc:	331c      	adds	r3, #28
   132be:	681c      	ldr	r4, [r3, #0]
   132c0:	9902      	ldr	r1, [sp, #8]
   132c2:	9a01      	ldr	r2, [sp, #4]
   132c4:	9b03      	ldr	r3, [sp, #12]
   132c6:	685b      	ldr	r3, [r3, #4]
   132c8:	47a0      	blx	r4
   132ca:	462b      	mov	r3, r5
   132cc:	4619      	mov	r1, r3
   132ce:	4803      	ldr	r0, [pc, #12]	; (132dc <Graphics::DrawPixel(unsigned long, unsigned long)+0x54>)
   132d0:	f003 f80e 	bl	162f0 <__cyg_profile_func_exit>
    }
  }
   132d4:	bf00      	nop
   132d6:	b005      	add	sp, #20
   132d8:	bd30      	pop	{r4, r5, pc}
   132da:	bf00      	nop
   132dc:	00013289 	.word	0x00013289

000132e0 <Graphics::Update()>:
  void Update()
   132e0:	b510      	push	{r4, lr}
   132e2:	b082      	sub	sp, #8
   132e4:	4674      	mov	r4, lr
   132e6:	9001      	str	r0, [sp, #4]
   132e8:	4623      	mov	r3, r4
   132ea:	4619      	mov	r1, r3
   132ec:	4809      	ldr	r0, [pc, #36]	; (13314 <Graphics::Update()+0x34>)
   132ee:	f002 ffeb 	bl	162c8 <__cyg_profile_func_enter>
  {
    display_->Update();
   132f2:	9b01      	ldr	r3, [sp, #4]
   132f4:	681a      	ldr	r2, [r3, #0]
   132f6:	9b01      	ldr	r3, [sp, #4]
   132f8:	681b      	ldr	r3, [r3, #0]
   132fa:	681b      	ldr	r3, [r3, #0]
   132fc:	3320      	adds	r3, #32
   132fe:	681b      	ldr	r3, [r3, #0]
   13300:	4610      	mov	r0, r2
   13302:	4798      	blx	r3
   13304:	4623      	mov	r3, r4
   13306:	4619      	mov	r1, r3
   13308:	4802      	ldr	r0, [pc, #8]	; (13314 <Graphics::Update()+0x34>)
   1330a:	f002 fff1 	bl	162f0 <__cyg_profile_func_exit>
  }
   1330e:	bf00      	nop
   13310:	b002      	add	sp, #8
   13312:	bd10      	pop	{r4, pc}
   13314:	000132e1 	.word	0x000132e1

00013318 <Graphics::Clear()>:
  void Clear()
   13318:	b510      	push	{r4, lr}
   1331a:	b082      	sub	sp, #8
   1331c:	4674      	mov	r4, lr
   1331e:	9001      	str	r0, [sp, #4]
   13320:	4623      	mov	r3, r4
   13322:	4619      	mov	r1, r3
   13324:	4809      	ldr	r0, [pc, #36]	; (1334c <Graphics::Clear()+0x34>)
   13326:	f002 ffcf 	bl	162c8 <__cyg_profile_func_enter>
  {
    display_->Clear();
   1332a:	9b01      	ldr	r3, [sp, #4]
   1332c:	681a      	ldr	r2, [r3, #0]
   1332e:	9b01      	ldr	r3, [sp, #4]
   13330:	681b      	ldr	r3, [r3, #0]
   13332:	681b      	ldr	r3, [r3, #0]
   13334:	3318      	adds	r3, #24
   13336:	681b      	ldr	r3, [r3, #0]
   13338:	4610      	mov	r0, r2
   1333a:	4798      	blx	r3
   1333c:	4623      	mov	r3, r4
   1333e:	4619      	mov	r1, r3
   13340:	4802      	ldr	r0, [pc, #8]	; (1334c <Graphics::Clear()+0x34>)
   13342:	f002 ffd5 	bl	162f0 <__cyg_profile_func_exit>
  }
   13346:	bf00      	nop
   13348:	b002      	add	sp, #8
   1334a:	bd10      	pop	{r4, pc}
   1334c:	00013319 	.word	0x00013319

00013350 <OledTerminal::Initialize()>:
  static constexpr size_t kCharacterHeight = 8;
  static constexpr size_t kCharacterWidth  = 8;
  static constexpr size_t kMaxColumns      = Ssd1306::kWidth / kCharacterWidth;
  static constexpr size_t kMaxRows = Ssd1306::kHeight / kCharacterHeight;

  void Initialize()
   13350:	b510      	push	{r4, lr}
   13352:	b082      	sub	sp, #8
   13354:	4674      	mov	r4, lr
   13356:	9001      	str	r0, [sp, #4]
   13358:	4623      	mov	r3, r4
   1335a:	4619      	mov	r1, r3
   1335c:	480e      	ldr	r0, [pc, #56]	; (13398 <OledTerminal::Initialize()+0x48>)
   1335e:	f002 ffb3 	bl	162c8 <__cyg_profile_func_enter>
  {
    graphics_.Initialize();
   13362:	9b01      	ldr	r3, [sp, #4]
   13364:	f203 732c 	addw	r3, r3, #1836	; 0x72c
   13368:	4618      	mov	r0, r3
   1336a:	f7ff fee9 	bl	13140 <Graphics::Initialize()>
    graphics_.Clear();
   1336e:	9b01      	ldr	r3, [sp, #4]
   13370:	f203 732c 	addw	r3, r3, #1836	; 0x72c
   13374:	4618      	mov	r0, r3
   13376:	f7ff ffcf 	bl	13318 <Graphics::Clear()>
    graphics_.Update();
   1337a:	9b01      	ldr	r3, [sp, #4]
   1337c:	f203 732c 	addw	r3, r3, #1836	; 0x72c
   13380:	4618      	mov	r0, r3
   13382:	f7ff ffad 	bl	132e0 <Graphics::Update()>
   13386:	4623      	mov	r3, r4
   13388:	4619      	mov	r1, r3
   1338a:	4803      	ldr	r0, [pc, #12]	; (13398 <OledTerminal::Initialize()+0x48>)
   1338c:	f002 ffb0 	bl	162f0 <__cyg_profile_func_exit>
  }
   13390:	bf00      	nop
   13392:	b002      	add	sp, #8
   13394:	bd10      	pop	{r4, pc}
   13396:	bf00      	nop
   13398:	00013351 	.word	0x00013351

0001339c <OledTerminal::printf(char const*, ...)>:

  int printf(const char * format, ...)  // NOLINT
   1339c:	b40e      	push	{r1, r2, r3}
   1339e:	b530      	push	{r4, r5, lr}
   133a0:	b0c6      	sub	sp, #280	; 0x118
   133a2:	4675      	mov	r5, lr
   133a4:	ab01      	add	r3, sp, #4
   133a6:	6018      	str	r0, [r3, #0]
   133a8:	462b      	mov	r3, r5
   133aa:	4619      	mov	r1, r3
   133ac:	4850      	ldr	r0, [pc, #320]	; (134f0 <OledTerminal::printf(char const*, ...)+0x154>)
   133ae:	f002 ff8b 	bl	162c8 <__cyg_profile_func_enter>
  {
    char buffer[256];

    va_list args;
    va_start(args, format);
   133b2:	aa4a      	add	r2, sp, #296	; 0x128
   133b4:	ab02      	add	r3, sp, #8
   133b6:	601a      	str	r2, [r3, #0]
    size_t characters = vsnprintf(buffer, sizeof(buffer), format, args);
   133b8:	ab02      	add	r3, sp, #8
   133ba:	a803      	add	r0, sp, #12
   133bc:	681b      	ldr	r3, [r3, #0]
   133be:	9a49      	ldr	r2, [sp, #292]	; 0x124
   133c0:	f44f 7180 	mov.w	r1, #256	; 0x100
   133c4:	f004 fa26 	bl	17814 <vsnprintf>
   133c8:	4603      	mov	r3, r0
   133ca:	9344      	str	r3, [sp, #272]	; 0x110
    va_end(args);

    size_t pos = 0;
   133cc:	2300      	movs	r3, #0
   133ce:	9345      	str	r3, [sp, #276]	; 0x114
    for (; pos < characters; pos++)
   133d0:	9a45      	ldr	r2, [sp, #276]	; 0x114
   133d2:	9b44      	ldr	r3, [sp, #272]	; 0x110
   133d4:	429a      	cmp	r2, r3
   133d6:	d253      	bcs.n	13480 <OledTerminal::printf(char const*, ...)+0xe4>
    {
      char character = buffer[pos];
   133d8:	aa03      	add	r2, sp, #12
   133da:	9b45      	ldr	r3, [sp, #276]	; 0x114
   133dc:	4413      	add	r3, r2
   133de:	781b      	ldrb	r3, [r3, #0]
   133e0:	f88d 310f 	strb.w	r3, [sp, #271]	; 0x10f
      switch (character)
   133e4:	f89d 310f 	ldrb.w	r3, [sp, #271]	; 0x10f
   133e8:	2b0a      	cmp	r3, #10
   133ea:	d10e      	bne.n	1340a <OledTerminal::printf(char const*, ...)+0x6e>
      {
        case '\n':
          column_ = 0;
   133ec:	ab01      	add	r3, sp, #4
   133ee:	681b      	ldr	r3, [r3, #0]
   133f0:	2200      	movs	r2, #0
   133f2:	f8c3 2740 	str.w	r2, [r3, #1856]	; 0x740
          row_++;
   133f6:	ab01      	add	r3, sp, #4
   133f8:	681b      	ldr	r3, [r3, #0]
   133fa:	f8d3 373c 	ldr.w	r3, [r3, #1852]	; 0x73c
   133fe:	1c5a      	adds	r2, r3, #1
   13400:	ab01      	add	r3, sp, #4
   13402:	681b      	ldr	r3, [r3, #0]
   13404:	f8c3 273c 	str.w	r2, [r3, #1852]	; 0x73c
          break;
   13408:	e036      	b.n	13478 <OledTerminal::printf(char const*, ...)+0xdc>
        default:
          terminal_[(row_ + row_start_) % kMaxRows][column_] = character;
   1340a:	ab01      	add	r3, sp, #4
   1340c:	681b      	ldr	r3, [r3, #0]
   1340e:	f8d3 273c 	ldr.w	r2, [r3, #1852]	; 0x73c
   13412:	ab01      	add	r3, sp, #4
   13414:	681b      	ldr	r3, [r3, #0]
   13416:	f8d3 3744 	ldr.w	r3, [r3, #1860]	; 0x744
   1341a:	4413      	add	r3, r2
   1341c:	f003 0207 	and.w	r2, r3, #7
   13420:	ab01      	add	r3, sp, #4
   13422:	681b      	ldr	r3, [r3, #0]
   13424:	f8d3 3740 	ldr.w	r3, [r3, #1856]	; 0x740
   13428:	a901      	add	r1, sp, #4
   1342a:	6809      	ldr	r1, [r1, #0]
   1342c:	0112      	lsls	r2, r2, #4
   1342e:	440a      	add	r2, r1
   13430:	4413      	add	r3, r2
   13432:	f503 63e9 	add.w	r3, r3, #1864	; 0x748
   13436:	f89d 210f 	ldrb.w	r2, [sp, #271]	; 0x10f
   1343a:	701a      	strb	r2, [r3, #0]
          column_++;
   1343c:	ab01      	add	r3, sp, #4
   1343e:	681b      	ldr	r3, [r3, #0]
   13440:	f8d3 3740 	ldr.w	r3, [r3, #1856]	; 0x740
   13444:	1c5a      	adds	r2, r3, #1
   13446:	ab01      	add	r3, sp, #4
   13448:	681b      	ldr	r3, [r3, #0]
   1344a:	f8c3 2740 	str.w	r2, [r3, #1856]	; 0x740
          if (column_ >= kMaxColumns)
   1344e:	ab01      	add	r3, sp, #4
   13450:	681b      	ldr	r3, [r3, #0]
   13452:	f8d3 3740 	ldr.w	r3, [r3, #1856]	; 0x740
   13456:	2b0f      	cmp	r3, #15
   13458:	d90d      	bls.n	13476 <OledTerminal::printf(char const*, ...)+0xda>
          {
            column_ = 0;
   1345a:	ab01      	add	r3, sp, #4
   1345c:	681b      	ldr	r3, [r3, #0]
   1345e:	2200      	movs	r2, #0
   13460:	f8c3 2740 	str.w	r2, [r3, #1856]	; 0x740
            row_++;
   13464:	ab01      	add	r3, sp, #4
   13466:	681b      	ldr	r3, [r3, #0]
   13468:	f8d3 373c 	ldr.w	r3, [r3, #1852]	; 0x73c
   1346c:	1c5a      	adds	r2, r3, #1
   1346e:	ab01      	add	r3, sp, #4
   13470:	681b      	ldr	r3, [r3, #0]
   13472:	f8c3 273c 	str.w	r2, [r3, #1852]	; 0x73c
          }
          break;
   13476:	bf00      	nop
    for (; pos < characters; pos++)
   13478:	9b45      	ldr	r3, [sp, #276]	; 0x114
   1347a:	3301      	adds	r3, #1
   1347c:	9345      	str	r3, [sp, #276]	; 0x114
   1347e:	e7a7      	b.n	133d0 <OledTerminal::printf(char const*, ...)+0x34>
      }
    }
    Update();
   13480:	ab01      	add	r3, sp, #4
   13482:	6818      	ldr	r0, [r3, #0]
   13484:	f000 f85a 	bl	1353c <OledTerminal::Update()>
    if (row_ >= kMaxRows)
   13488:	ab01      	add	r3, sp, #4
   1348a:	681b      	ldr	r3, [r3, #0]
   1348c:	f8d3 373c 	ldr.w	r3, [r3, #1852]	; 0x73c
   13490:	2b07      	cmp	r3, #7
   13492:	d91f      	bls.n	134d4 <OledTerminal::printf(char const*, ...)+0x138>
    {
      row_start_ = (row_start_ + 1) % kMaxRows;
   13494:	ab01      	add	r3, sp, #4
   13496:	681b      	ldr	r3, [r3, #0]
   13498:	f8d3 3744 	ldr.w	r3, [r3, #1860]	; 0x744
   1349c:	3301      	adds	r3, #1
   1349e:	f003 0207 	and.w	r2, r3, #7
   134a2:	ab01      	add	r3, sp, #4
   134a4:	681b      	ldr	r3, [r3, #0]
   134a6:	f8c3 2744 	str.w	r2, [r3, #1860]	; 0x744
      row_       = kMaxRows - 1;
   134aa:	ab01      	add	r3, sp, #4
   134ac:	681b      	ldr	r3, [r3, #0]
   134ae:	2207      	movs	r2, #7
   134b0:	f8c3 273c 	str.w	r2, [r3, #1852]	; 0x73c
      ClearRow((row_ + row_start_) % kMaxRows);
   134b4:	ab01      	add	r3, sp, #4
   134b6:	681b      	ldr	r3, [r3, #0]
   134b8:	f8d3 273c 	ldr.w	r2, [r3, #1852]	; 0x73c
   134bc:	ab01      	add	r3, sp, #4
   134be:	681b      	ldr	r3, [r3, #0]
   134c0:	f8d3 3744 	ldr.w	r3, [r3, #1860]	; 0x744
   134c4:	4413      	add	r3, r2
   134c6:	f003 0207 	and.w	r2, r3, #7
   134ca:	ab01      	add	r3, sp, #4
   134cc:	4611      	mov	r1, r2
   134ce:	6818      	ldr	r0, [r3, #0]
   134d0:	f000 f882 	bl	135d8 <OledTerminal::ClearRow(unsigned int)>
    }
    return pos;
   134d4:	9c45      	ldr	r4, [sp, #276]	; 0x114
   134d6:	462b      	mov	r3, r5
   134d8:	4619      	mov	r1, r3
   134da:	4805      	ldr	r0, [pc, #20]	; (134f0 <OledTerminal::printf(char const*, ...)+0x154>)
   134dc:	f002 ff08 	bl	162f0 <__cyg_profile_func_exit>
   134e0:	4623      	mov	r3, r4
  }
   134e2:	4618      	mov	r0, r3
   134e4:	b046      	add	sp, #280	; 0x118
   134e6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   134ea:	b003      	add	sp, #12
   134ec:	4770      	bx	lr
   134ee:	bf00      	nop
   134f0:	0001339d 	.word	0x0001339d

000134f4 <OledTerminal::SetCursor(unsigned int, unsigned int)>:
  OledTerminal & SetCursor(size_t x, size_t y)
   134f4:	b530      	push	{r4, r5, lr}
   134f6:	b085      	sub	sp, #20
   134f8:	4675      	mov	r5, lr
   134fa:	9003      	str	r0, [sp, #12]
   134fc:	9102      	str	r1, [sp, #8]
   134fe:	9201      	str	r2, [sp, #4]
   13500:	462b      	mov	r3, r5
   13502:	4619      	mov	r1, r3
   13504:	480c      	ldr	r0, [pc, #48]	; (13538 <OledTerminal::SetCursor(unsigned int, unsigned int)+0x44>)
   13506:	f002 fedf 	bl	162c8 <__cyg_profile_func_enter>
  {
    column_    = x;
   1350a:	9b03      	ldr	r3, [sp, #12]
   1350c:	9a02      	ldr	r2, [sp, #8]
   1350e:	f8c3 2740 	str.w	r2, [r3, #1856]	; 0x740
    row_       = y;
   13512:	9b03      	ldr	r3, [sp, #12]
   13514:	9a01      	ldr	r2, [sp, #4]
   13516:	f8c3 273c 	str.w	r2, [r3, #1852]	; 0x73c
    row_start_ = 0;
   1351a:	9b03      	ldr	r3, [sp, #12]
   1351c:	2200      	movs	r2, #0
   1351e:	f8c3 2744 	str.w	r2, [r3, #1860]	; 0x744
    return *this;
   13522:	9c03      	ldr	r4, [sp, #12]
   13524:	462b      	mov	r3, r5
   13526:	4619      	mov	r1, r3
   13528:	4803      	ldr	r0, [pc, #12]	; (13538 <OledTerminal::SetCursor(unsigned int, unsigned int)+0x44>)
   1352a:	f002 fee1 	bl	162f0 <__cyg_profile_func_exit>
   1352e:	4623      	mov	r3, r4
  }
   13530:	4618      	mov	r0, r3
   13532:	b005      	add	sp, #20
   13534:	bd30      	pop	{r4, r5, pc}
   13536:	bf00      	nop
   13538:	000134f5 	.word	0x000134f5

0001353c <OledTerminal::Update()>:
  OledTerminal & MoveToLineStart()
  {
    column_ = 0;
    return *this;
  }
  OledTerminal & Update()
   1353c:	b530      	push	{r4, r5, lr}
   1353e:	b089      	sub	sp, #36	; 0x24
   13540:	4675      	mov	r5, lr
   13542:	9003      	str	r0, [sp, #12]
   13544:	462b      	mov	r3, r5
   13546:	4619      	mov	r1, r3
   13548:	4822      	ldr	r0, [pc, #136]	; (135d4 <OledTerminal::Update()+0x98>)
   1354a:	f002 febd 	bl	162c8 <__cyg_profile_func_enter>
  {
    for (size_t i = 0; i < kMaxRows; i++)
   1354e:	2300      	movs	r3, #0
   13550:	9307      	str	r3, [sp, #28]
   13552:	9b07      	ldr	r3, [sp, #28]
   13554:	2b07      	cmp	r3, #7
   13556:	d82c      	bhi.n	135b2 <OledTerminal::Update()+0x76>
    {
      for (size_t j = 0; j < kMaxColumns; j++)
   13558:	2300      	movs	r3, #0
   1355a:	9306      	str	r3, [sp, #24]
   1355c:	9b06      	ldr	r3, [sp, #24]
   1355e:	2b0f      	cmp	r3, #15
   13560:	d823      	bhi.n	135aa <OledTerminal::Update()+0x6e>
      {
        size_t x = j * kCharacterWidth;
   13562:	9b06      	ldr	r3, [sp, #24]
   13564:	00db      	lsls	r3, r3, #3
   13566:	9305      	str	r3, [sp, #20]
        size_t y = i * kCharacterHeight;
   13568:	9b07      	ldr	r3, [sp, #28]
   1356a:	00db      	lsls	r3, r3, #3
   1356c:	9304      	str	r3, [sp, #16]
        graphics_.DrawCharacter(x, y,
   1356e:	9b03      	ldr	r3, [sp, #12]
   13570:	f203 702c 	addw	r0, r3, #1836	; 0x72c
   13574:	9905      	ldr	r1, [sp, #20]
   13576:	9c04      	ldr	r4, [sp, #16]
                                terminal_[(i + row_start_) % kMaxRows][j]);
   13578:	9b03      	ldr	r3, [sp, #12]
   1357a:	f8d3 2744 	ldr.w	r2, [r3, #1860]	; 0x744
   1357e:	9b07      	ldr	r3, [sp, #28]
   13580:	4413      	add	r3, r2
   13582:	f003 0307 	and.w	r3, r3, #7
        graphics_.DrawCharacter(x, y,
   13586:	9a03      	ldr	r2, [sp, #12]
   13588:	011b      	lsls	r3, r3, #4
   1358a:	441a      	add	r2, r3
   1358c:	9b06      	ldr	r3, [sp, #24]
   1358e:	4413      	add	r3, r2
   13590:	f503 63e9 	add.w	r3, r3, #1864	; 0x748
   13594:	781a      	ldrb	r2, [r3, #0]
   13596:	2301      	movs	r3, #1
   13598:	9300      	str	r3, [sp, #0]
   1359a:	4613      	mov	r3, r2
   1359c:	4622      	mov	r2, r4
   1359e:	f7ff fdf5 	bl	1318c <Graphics::DrawCharacter(long, long, char, bool)>
      for (size_t j = 0; j < kMaxColumns; j++)
   135a2:	9b06      	ldr	r3, [sp, #24]
   135a4:	3301      	adds	r3, #1
   135a6:	9306      	str	r3, [sp, #24]
   135a8:	e7d8      	b.n	1355c <OledTerminal::Update()+0x20>
    for (size_t i = 0; i < kMaxRows; i++)
   135aa:	9b07      	ldr	r3, [sp, #28]
   135ac:	3301      	adds	r3, #1
   135ae:	9307      	str	r3, [sp, #28]
   135b0:	e7cf      	b.n	13552 <OledTerminal::Update()+0x16>
      }
    }
    graphics_.Update();
   135b2:	9b03      	ldr	r3, [sp, #12]
   135b4:	f203 732c 	addw	r3, r3, #1836	; 0x72c
   135b8:	4618      	mov	r0, r3
   135ba:	f7ff fe91 	bl	132e0 <Graphics::Update()>
    return *this;
   135be:	9c03      	ldr	r4, [sp, #12]
   135c0:	462b      	mov	r3, r5
   135c2:	4619      	mov	r1, r3
   135c4:	4803      	ldr	r0, [pc, #12]	; (135d4 <OledTerminal::Update()+0x98>)
   135c6:	f002 fe93 	bl	162f0 <__cyg_profile_func_exit>
   135ca:	4623      	mov	r3, r4
  }
   135cc:	4618      	mov	r0, r3
   135ce:	b009      	add	sp, #36	; 0x24
   135d0:	bd30      	pop	{r4, r5, pc}
   135d2:	bf00      	nop
   135d4:	0001353d 	.word	0x0001353d

000135d8 <OledTerminal::ClearRow(unsigned int)>:
  void ClearRow(size_t row_location)
   135d8:	b510      	push	{r4, lr}
   135da:	b084      	sub	sp, #16
   135dc:	4674      	mov	r4, lr
   135de:	9001      	str	r0, [sp, #4]
   135e0:	9100      	str	r1, [sp, #0]
   135e2:	4623      	mov	r3, r4
   135e4:	4619      	mov	r1, r3
   135e6:	480f      	ldr	r0, [pc, #60]	; (13624 <OledTerminal::ClearRow(unsigned int)+0x4c>)
   135e8:	f002 fe6e 	bl	162c8 <__cyg_profile_func_enter>
  {
    for (size_t i = 0; i < kMaxColumns; i++)
   135ec:	2300      	movs	r3, #0
   135ee:	9303      	str	r3, [sp, #12]
   135f0:	9b03      	ldr	r3, [sp, #12]
   135f2:	2b0f      	cmp	r3, #15
   135f4:	d80d      	bhi.n	13612 <OledTerminal::ClearRow(unsigned int)+0x3a>
    {
      terminal_[row_location][i] = ' ';
   135f6:	9a01      	ldr	r2, [sp, #4]
   135f8:	9b00      	ldr	r3, [sp, #0]
   135fa:	011b      	lsls	r3, r3, #4
   135fc:	441a      	add	r2, r3
   135fe:	9b03      	ldr	r3, [sp, #12]
   13600:	4413      	add	r3, r2
   13602:	f503 63e9 	add.w	r3, r3, #1864	; 0x748
   13606:	2220      	movs	r2, #32
   13608:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < kMaxColumns; i++)
   1360a:	9b03      	ldr	r3, [sp, #12]
   1360c:	3301      	adds	r3, #1
   1360e:	9303      	str	r3, [sp, #12]
   13610:	e7ee      	b.n	135f0 <OledTerminal::ClearRow(unsigned int)+0x18>
   13612:	4623      	mov	r3, r4
   13614:	4619      	mov	r1, r3
   13616:	4803      	ldr	r0, [pc, #12]	; (13624 <OledTerminal::ClearRow(unsigned int)+0x4c>)
   13618:	f002 fe6a 	bl	162f0 <__cyg_profile_func_exit>
    }
  }
   1361c:	bf00      	nop
   1361e:	b004      	add	sp, #16
   13620:	bd10      	pop	{r4, pc}
   13622:	bf00      	nop
   13624:	000135d9 	.word	0x000135d9

00013628 <OledTerminal::Clear()>:
  void Clear()
   13628:	b510      	push	{r4, lr}
   1362a:	b082      	sub	sp, #8
   1362c:	4674      	mov	r4, lr
   1362e:	9001      	str	r0, [sp, #4]
   13630:	4623      	mov	r3, r4
   13632:	4619      	mov	r1, r3
   13634:	4811      	ldr	r0, [pc, #68]	; (1367c <OledTerminal::Clear()+0x54>)
   13636:	f002 fe47 	bl	162c8 <__cyg_profile_func_enter>
  {
    graphics_.Clear();
   1363a:	9b01      	ldr	r3, [sp, #4]
   1363c:	f203 732c 	addw	r3, r3, #1836	; 0x72c
   13640:	4618      	mov	r0, r3
   13642:	f7ff fe69 	bl	13318 <Graphics::Clear()>
    memset(terminal_, '\0', sizeof(terminal_));
   13646:	9b01      	ldr	r3, [sp, #4]
   13648:	f503 63e9 	add.w	r3, r3, #1864	; 0x748
   1364c:	2280      	movs	r2, #128	; 0x80
   1364e:	2100      	movs	r1, #0
   13650:	4618      	mov	r0, r3
   13652:	f005 fce7 	bl	19024 <memset>
    SetCursor(0, 0);
   13656:	2200      	movs	r2, #0
   13658:	2100      	movs	r1, #0
   1365a:	9801      	ldr	r0, [sp, #4]
   1365c:	f7ff ff4a 	bl	134f4 <OledTerminal::SetCursor(unsigned int, unsigned int)>
    graphics_.Update();
   13660:	9b01      	ldr	r3, [sp, #4]
   13662:	f203 732c 	addw	r3, r3, #1836	; 0x72c
   13666:	4618      	mov	r0, r3
   13668:	f7ff fe3a 	bl	132e0 <Graphics::Update()>
   1366c:	4623      	mov	r3, r4
   1366e:	4619      	mov	r1, r3
   13670:	4802      	ldr	r0, [pc, #8]	; (1367c <OledTerminal::Clear()+0x54>)
   13672:	f002 fe3d 	bl	162f0 <__cyg_profile_func_exit>
  }
   13676:	bf00      	nop
   13678:	b002      	add	sp, #8
   1367a:	bd10      	pop	{r4, pc}
   1367c:	00013629 	.word	0x00013629

00013680 <OledTerminal::OledTerminal()>:
class OledTerminal
   13680:	b530      	push	{r4, r5, lr}
   13682:	b083      	sub	sp, #12
   13684:	4675      	mov	r5, lr
   13686:	9001      	str	r0, [sp, #4]
   13688:	462b      	mov	r3, r5
   1368a:	4619      	mov	r1, r3
   1368c:	4816      	ldr	r0, [pc, #88]	; (136e8 <OledTerminal::OledTerminal()+0x68>)
   1368e:	f002 fe1b 	bl	162c8 <__cyg_profile_func_enter>
   13692:	9b01      	ldr	r3, [sp, #4]
   13694:	4618      	mov	r0, r3
   13696:	f7ff fa97 	bl	12bc8 <Ssd1306::Ssd1306()>
   1369a:	9b01      	ldr	r3, [sp, #4]
   1369c:	f203 732c 	addw	r3, r3, #1836	; 0x72c
   136a0:	9a01      	ldr	r2, [sp, #4]
   136a2:	4611      	mov	r1, r2
   136a4:	4618      	mov	r0, r3
   136a6:	f7ff fd05 	bl	130b4 <Graphics::Graphics(PixelDisplayInterface*)>
   136aa:	9b01      	ldr	r3, [sp, #4]
   136ac:	2200      	movs	r2, #0
   136ae:	f8c3 273c 	str.w	r2, [r3, #1852]	; 0x73c
   136b2:	9b01      	ldr	r3, [sp, #4]
   136b4:	2200      	movs	r2, #0
   136b6:	f8c3 2740 	str.w	r2, [r3, #1856]	; 0x740
   136ba:	9b01      	ldr	r3, [sp, #4]
   136bc:	2200      	movs	r2, #0
   136be:	f8c3 2744 	str.w	r2, [r3, #1860]	; 0x744
   136c2:	9b01      	ldr	r3, [sp, #4]
   136c4:	f503 63e9 	add.w	r3, r3, #1864	; 0x748
   136c8:	2280      	movs	r2, #128	; 0x80
   136ca:	2100      	movs	r1, #0
   136cc:	4618      	mov	r0, r3
   136ce:	f005 fca9 	bl	19024 <memset>
   136d2:	9c01      	ldr	r4, [sp, #4]
   136d4:	462b      	mov	r3, r5
   136d6:	4619      	mov	r1, r3
   136d8:	4803      	ldr	r0, [pc, #12]	; (136e8 <OledTerminal::OledTerminal()+0x68>)
   136da:	f002 fe09 	bl	162f0 <__cyg_profile_func_exit>
   136de:	4623      	mov	r3, r4
   136e0:	4618      	mov	r0, r3
   136e2:	b003      	add	sp, #12
   136e4:	bd30      	pop	{r4, r5, pc}
   136e6:	bf00      	nop
   136e8:	00013681 	.word	0x00013681

000136ec <main>:
void DemoButton(); //Part 2 of Lab
void EC(); // morse code translator
void morse_translate(); // translate dots and dashes to alphabet

int main() 
{ 
   136ec:	b500      	push	{lr}
   136ee:	b083      	sub	sp, #12
   136f0:	4673      	mov	r3, lr
   136f2:	4619      	mov	r1, r3
   136f4:	4825      	ldr	r0, [pc, #148]	; (1378c <main+0xa0>)
   136f6:	f002 fde7 	bl	162c8 <__cyg_profile_func_enter>
  LOG_INFO("Start");
   136fa:	232f      	movs	r3, #47	; 0x2f
   136fc:	4a24      	ldr	r2, [pc, #144]	; (13790 <main+0xa4>)
   136fe:	4925      	ldr	r1, [pc, #148]	; (13794 <main+0xa8>)
   13700:	4825      	ldr	r0, [pc, #148]	; (13798 <main+0xac>)
   13702:	f004 f861 	bl	177c8 <printf>
  oled_terminal.Initialize(); //turn on screen
   13706:	4825      	ldr	r0, [pc, #148]	; (1379c <main+0xb0>)
   13708:	f7ff fe22 	bl	13350 <OledTerminal::Initialize()>
  button0.setPulldown(); //Have button 0 pull down resistor activated
   1370c:	4824      	ldr	r0, [pc, #144]	; (137a0 <main+0xb4>)
   1370e:	f7fc ff47 	bl	105a0 <LabGPIO::setPulldown()>
  button1.setPulldown();// Have button 1 pull down resistor activated
   13712:	4824      	ldr	r0, [pc, #144]	; (137a4 <main+0xb8>)
   13714:	f7fc ff44 	bl	105a0 <LabGPIO::setPulldown()>
  bool change =true; //used to change between program
   13718:	2301      	movs	r3, #1
   1371a:	f88d 3007 	strb.w	r3, [sp, #7]

  while(true)
  {    
    if(change){ 
   1371e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   13722:	2b00      	cmp	r3, #0
   13724:	d001      	beq.n	1372a <main+0x3e>
    // Logic to read if button has been RELEASED and if so, TOGGLE LED state;
      DemoButton();
   13726:	f000 f849 	bl	137bc <DemoButton()>
    }
    if(CB0%2 == 1 && CB1%6 ==5 && CB2%4 ==0 && CB3%6 ==5) //condition that allows the program to go to extra credit
   1372a:	4b1f      	ldr	r3, [pc, #124]	; (137a8 <main+0xbc>)
   1372c:	681b      	ldr	r3, [r3, #0]
   1372e:	2b00      	cmp	r3, #0
   13730:	f003 0301 	and.w	r3, r3, #1
   13734:	bfb8      	it	lt
   13736:	425b      	neglt	r3, r3
   13738:	2b01      	cmp	r3, #1
   1373a:	d1f0      	bne.n	1371e <main+0x32>
   1373c:	4b1b      	ldr	r3, [pc, #108]	; (137ac <main+0xc0>)
   1373e:	6819      	ldr	r1, [r3, #0]
   13740:	4b1b      	ldr	r3, [pc, #108]	; (137b0 <main+0xc4>)
   13742:	fb83 3201 	smull	r3, r2, r3, r1
   13746:	17cb      	asrs	r3, r1, #31
   13748:	1ad2      	subs	r2, r2, r3
   1374a:	4613      	mov	r3, r2
   1374c:	005b      	lsls	r3, r3, #1
   1374e:	4413      	add	r3, r2
   13750:	005b      	lsls	r3, r3, #1
   13752:	1aca      	subs	r2, r1, r3
   13754:	2a05      	cmp	r2, #5
   13756:	d1e2      	bne.n	1371e <main+0x32>
   13758:	4b16      	ldr	r3, [pc, #88]	; (137b4 <main+0xc8>)
   1375a:	681b      	ldr	r3, [r3, #0]
   1375c:	f003 0303 	and.w	r3, r3, #3
   13760:	2b00      	cmp	r3, #0
   13762:	d1dc      	bne.n	1371e <main+0x32>
   13764:	4b14      	ldr	r3, [pc, #80]	; (137b8 <main+0xcc>)
   13766:	6819      	ldr	r1, [r3, #0]
   13768:	4b11      	ldr	r3, [pc, #68]	; (137b0 <main+0xc4>)
   1376a:	fb83 3201 	smull	r3, r2, r3, r1
   1376e:	17cb      	asrs	r3, r1, #31
   13770:	1ad2      	subs	r2, r2, r3
   13772:	4613      	mov	r3, r2
   13774:	005b      	lsls	r3, r3, #1
   13776:	4413      	add	r3, r2
   13778:	005b      	lsls	r3, r3, #1
   1377a:	1aca      	subs	r2, r1, r3
   1377c:	2a05      	cmp	r2, #5
   1377e:	d1ce      	bne.n	1371e <main+0x32>
    {   change=false; //used to close off the previous program
   13780:	2300      	movs	r3, #0
   13782:	f88d 3007 	strb.w	r3, [sp, #7]
          EC();
   13786:	f000 f8df 	bl	13948 <EC()>
    if(change){ 
   1378a:	e7c8      	b.n	1371e <main+0x32>
   1378c:	000136ed 	.word	0x000136ed
   13790:	00019be0 	.word	0x00019be0
   13794:	00019988 	.word	0x00019988
   13798:	0001967c 	.word	0x0001967c
   1379c:	10000c0c 	.word	0x10000c0c
   137a0:	100007a0 	.word	0x100007a0
   137a4:	10000798 	.word	0x10000798
   137a8:	100007a8 	.word	0x100007a8
   137ac:	100007ac 	.word	0x100007ac
   137b0:	2aaaaaab 	.word	0x2aaaaaab
   137b4:	100007b0 	.word	0x100007b0
   137b8:	100007b4 	.word	0x100007b4

000137bc <DemoButton()>:
    LOG_INFO("Turning LED OFF!");
    Delay(500);
  }
}
void DemoButton()
{
   137bc:	b510      	push	{r4, lr}
   137be:	4674      	mov	r4, lr
   137c0:	4623      	mov	r3, r4
   137c2:	4619      	mov	r1, r3
   137c4:	484a      	ldr	r0, [pc, #296]	; (138f0 <DemoButton()+0x134>)
   137c6:	f002 fd7f 	bl	162c8 <__cyg_profile_func_enter>
   if(button0.ReadBool())
   137ca:	484a      	ldr	r0, [pc, #296]	; (138f4 <DemoButton()+0x138>)
   137cc:	f7fc fe34 	bl	10438 <LabGPIO::ReadBool()>
   137d0:	4603      	mov	r3, r0
   137d2:	2b00      	cmp	r3, #0
   137d4:	d01c      	beq.n	13810 <DemoButton()+0x54>
   {    
      Delay(10); //debounce
   137d6:	f04f 000a 	mov.w	r0, #10
   137da:	f04f 0100 	mov.w	r1, #0
   137de:	f7fd fbc3 	bl	10f68 <Delay(unsigned long long)>
       if(button0.ReadBool() != true)
   137e2:	4844      	ldr	r0, [pc, #272]	; (138f4 <DemoButton()+0x138>)
   137e4:	f7fc fe28 	bl	10438 <LabGPIO::ReadBool()>
   137e8:	4603      	mov	r3, r0
   137ea:	f083 0301 	eor.w	r3, r3, #1
   137ee:	b2db      	uxtb	r3, r3
   137f0:	2b00      	cmp	r3, #0
   137f2:	d00d      	beq.n	13810 <DemoButton()+0x54>
       {
        LOG_INFO("Button 0 pressed!");
   137f4:	235e      	movs	r3, #94	; 0x5e
   137f6:	4a40      	ldr	r2, [pc, #256]	; (138f8 <DemoButton()+0x13c>)
   137f8:	4940      	ldr	r1, [pc, #256]	; (138fc <DemoButton()+0x140>)
   137fa:	4841      	ldr	r0, [pc, #260]	; (13900 <DemoButton()+0x144>)
   137fc:	f003 ffe4 	bl	177c8 <printf>
        led0.toggle();
   13800:	4840      	ldr	r0, [pc, #256]	; (13904 <DemoButton()+0x148>)
   13802:	f7fc fe41 	bl	10488 <LabGPIO::toggle()>
        CB0++;
   13806:	4b40      	ldr	r3, [pc, #256]	; (13908 <DemoButton()+0x14c>)
   13808:	681b      	ldr	r3, [r3, #0]
   1380a:	3301      	adds	r3, #1
   1380c:	4a3e      	ldr	r2, [pc, #248]	; (13908 <DemoButton()+0x14c>)
   1380e:	6013      	str	r3, [r2, #0]
       }           
   }
  
   if(button1.ReadBool())
   13810:	483e      	ldr	r0, [pc, #248]	; (1390c <DemoButton()+0x150>)
   13812:	f7fc fe11 	bl	10438 <LabGPIO::ReadBool()>
   13816:	4603      	mov	r3, r0
   13818:	2b00      	cmp	r3, #0
   1381a:	d01c      	beq.n	13856 <DemoButton()+0x9a>
   {     
      Delay(10); //debounce
   1381c:	f04f 000a 	mov.w	r0, #10
   13820:	f04f 0100 	mov.w	r1, #0
   13824:	f7fd fba0 	bl	10f68 <Delay(unsigned long long)>
       if(button1.ReadBool() != true)
   13828:	4838      	ldr	r0, [pc, #224]	; (1390c <DemoButton()+0x150>)
   1382a:	f7fc fe05 	bl	10438 <LabGPIO::ReadBool()>
   1382e:	4603      	mov	r3, r0
   13830:	f083 0301 	eor.w	r3, r3, #1
   13834:	b2db      	uxtb	r3, r3
   13836:	2b00      	cmp	r3, #0
   13838:	d00d      	beq.n	13856 <DemoButton()+0x9a>
       {
        LOG_INFO("Button 1 pressed!"); 
   1383a:	2369      	movs	r3, #105	; 0x69
   1383c:	4a2e      	ldr	r2, [pc, #184]	; (138f8 <DemoButton()+0x13c>)
   1383e:	4934      	ldr	r1, [pc, #208]	; (13910 <DemoButton()+0x154>)
   13840:	4834      	ldr	r0, [pc, #208]	; (13914 <DemoButton()+0x158>)
   13842:	f003 ffc1 	bl	177c8 <printf>
        led1.toggle();
   13846:	4834      	ldr	r0, [pc, #208]	; (13918 <DemoButton()+0x15c>)
   13848:	f7fc fe1e 	bl	10488 <LabGPIO::toggle()>
        CB1++;
   1384c:	4b33      	ldr	r3, [pc, #204]	; (1391c <DemoButton()+0x160>)
   1384e:	681b      	ldr	r3, [r3, #0]
   13850:	3301      	adds	r3, #1
   13852:	4a32      	ldr	r2, [pc, #200]	; (1391c <DemoButton()+0x160>)
   13854:	6013      	str	r3, [r2, #0]
       }           
   }
       
   if(button2.ReadBool())
   13856:	4832      	ldr	r0, [pc, #200]	; (13920 <DemoButton()+0x164>)
   13858:	f7fc fdee 	bl	10438 <LabGPIO::ReadBool()>
   1385c:	4603      	mov	r3, r0
   1385e:	2b00      	cmp	r3, #0
   13860:	d01c      	beq.n	1389c <DemoButton()+0xe0>
   {        
      Delay(10); //debounce
   13862:	f04f 000a 	mov.w	r0, #10
   13866:	f04f 0100 	mov.w	r1, #0
   1386a:	f7fd fb7d 	bl	10f68 <Delay(unsigned long long)>
       if(button2.ReadBool() != true)
   1386e:	482c      	ldr	r0, [pc, #176]	; (13920 <DemoButton()+0x164>)
   13870:	f7fc fde2 	bl	10438 <LabGPIO::ReadBool()>
   13874:	4603      	mov	r3, r0
   13876:	f083 0301 	eor.w	r3, r3, #1
   1387a:	b2db      	uxtb	r3, r3
   1387c:	2b00      	cmp	r3, #0
   1387e:	d00d      	beq.n	1389c <DemoButton()+0xe0>
       {
        LOG_INFO("Button 2 pressed!");
   13880:	2374      	movs	r3, #116	; 0x74
   13882:	4a1d      	ldr	r2, [pc, #116]	; (138f8 <DemoButton()+0x13c>)
   13884:	4927      	ldr	r1, [pc, #156]	; (13924 <DemoButton()+0x168>)
   13886:	4828      	ldr	r0, [pc, #160]	; (13928 <DemoButton()+0x16c>)
   13888:	f003 ff9e 	bl	177c8 <printf>
        led2.toggle();
   1388c:	4827      	ldr	r0, [pc, #156]	; (1392c <DemoButton()+0x170>)
   1388e:	f7fc fdfb 	bl	10488 <LabGPIO::toggle()>
        CB2++;
   13892:	4b27      	ldr	r3, [pc, #156]	; (13930 <DemoButton()+0x174>)
   13894:	681b      	ldr	r3, [r3, #0]
   13896:	3301      	adds	r3, #1
   13898:	4a25      	ldr	r2, [pc, #148]	; (13930 <DemoButton()+0x174>)
   1389a:	6013      	str	r3, [r2, #0]
       }           
   }
   if(button3.ReadBool())
   1389c:	4825      	ldr	r0, [pc, #148]	; (13934 <DemoButton()+0x178>)
   1389e:	f7fc fdcb 	bl	10438 <LabGPIO::ReadBool()>
   138a2:	4603      	mov	r3, r0
   138a4:	2b00      	cmp	r3, #0
   138a6:	d01c      	beq.n	138e2 <DemoButton()+0x126>
   {     
      Delay(10); //debounce
   138a8:	f04f 000a 	mov.w	r0, #10
   138ac:	f04f 0100 	mov.w	r1, #0
   138b0:	f7fd fb5a 	bl	10f68 <Delay(unsigned long long)>
       if(button3.ReadBool() != true)
   138b4:	481f      	ldr	r0, [pc, #124]	; (13934 <DemoButton()+0x178>)
   138b6:	f7fc fdbf 	bl	10438 <LabGPIO::ReadBool()>
   138ba:	4603      	mov	r3, r0
   138bc:	f083 0301 	eor.w	r3, r3, #1
   138c0:	b2db      	uxtb	r3, r3
   138c2:	2b00      	cmp	r3, #0
   138c4:	d00d      	beq.n	138e2 <DemoButton()+0x126>
       {
        LOG_INFO("Button 3 pressed!");
   138c6:	237e      	movs	r3, #126	; 0x7e
   138c8:	4a0b      	ldr	r2, [pc, #44]	; (138f8 <DemoButton()+0x13c>)
   138ca:	491b      	ldr	r1, [pc, #108]	; (13938 <DemoButton()+0x17c>)
   138cc:	481b      	ldr	r0, [pc, #108]	; (1393c <DemoButton()+0x180>)
   138ce:	f003 ff7b 	bl	177c8 <printf>
        led3.toggle();
   138d2:	481b      	ldr	r0, [pc, #108]	; (13940 <DemoButton()+0x184>)
   138d4:	f7fc fdd8 	bl	10488 <LabGPIO::toggle()>
        CB3++;
   138d8:	4b1a      	ldr	r3, [pc, #104]	; (13944 <DemoButton()+0x188>)
   138da:	681b      	ldr	r3, [r3, #0]
   138dc:	3301      	adds	r3, #1
   138de:	4a19      	ldr	r2, [pc, #100]	; (13944 <DemoButton()+0x188>)
   138e0:	6013      	str	r3, [r2, #0]
   138e2:	4623      	mov	r3, r4
   138e4:	4619      	mov	r1, r3
   138e6:	4802      	ldr	r0, [pc, #8]	; (138f0 <DemoButton()+0x134>)
   138e8:	f002 fd02 	bl	162f0 <__cyg_profile_func_exit>
       }           
     
   }
}
   138ec:	bf00      	nop
   138ee:	bd10      	pop	{r4, pc}
   138f0:	000137bd 	.word	0x000137bd
   138f4:	100007a0 	.word	0x100007a0
   138f8:	00019bec 	.word	0x00019bec
   138fc:	00019994 	.word	0x00019994
   13900:	00019754 	.word	0x00019754
   13904:	100007a4 	.word	0x100007a4
   13908:	100007a8 	.word	0x100007a8
   1390c:	10000798 	.word	0x10000798
   13910:	000199a0 	.word	0x000199a0
   13914:	000197a0 	.word	0x000197a0
   13918:	1000079c 	.word	0x1000079c
   1391c:	100007ac 	.word	0x100007ac
   13920:	10000790 	.word	0x10000790
   13924:	000199ac 	.word	0x000199ac
   13928:	000197ec 	.word	0x000197ec
   1392c:	10000794 	.word	0x10000794
   13930:	100007b0 	.word	0x100007b0
   13934:	10000788 	.word	0x10000788
   13938:	000199b8 	.word	0x000199b8
   1393c:	00019838 	.word	0x00019838
   13940:	1000078c 	.word	0x1000078c
   13944:	100007b4 	.word	0x100007b4

00013948 <EC()>:
  
void EC(){
   13948:	b510      	push	{r4, lr}
   1394a:	4674      	mov	r4, lr
   1394c:	4623      	mov	r3, r4
   1394e:	4619      	mov	r1, r3
   13950:	4876      	ldr	r0, [pc, #472]	; (13b2c <EC()+0x1e4>)
   13952:	f002 fcb9 	bl	162c8 <__cyg_profile_func_enter>
      translated[0]='?'; //used to make the array start at a known variable
   13956:	4b76      	ldr	r3, [pc, #472]	; (13b30 <EC()+0x1e8>)
   13958:	223f      	movs	r2, #63	; 0x3f
   1395a:	701a      	strb	r2, [r3, #0]
      morse[0]='?'; // used to make the array start at a known variable
   1395c:	4b75      	ldr	r3, [pc, #468]	; (13b34 <EC()+0x1ec>)
   1395e:	223f      	movs	r2, #63	; 0x3f
   13960:	701a      	strb	r2, [r3, #0]
      if(button3.ReadBool()){
   13962:	4875      	ldr	r0, [pc, #468]	; (13b38 <EC()+0x1f0>)
   13964:	f7fc fd68 	bl	10438 <LabGPIO::ReadBool()>
   13968:	4603      	mov	r3, r0
   1396a:	2b00      	cmp	r3, #0
   1396c:	d048      	beq.n	13a00 <EC()+0xb8>
          Delay(150); // used to debounce and to increment the count slowly
   1396e:	f04f 0096 	mov.w	r0, #150	; 0x96
   13972:	f04f 0100 	mov.w	r1, #0
   13976:	f7fd faf7 	bl	10f68 <Delay(unsigned long long)>
          count++;
   1397a:	4b70      	ldr	r3, [pc, #448]	; (13b3c <EC()+0x1f4>)
   1397c:	681b      	ldr	r3, [r3, #0]
   1397e:	3301      	adds	r3, #1
   13980:	4a6e      	ldr	r2, [pc, #440]	; (13b3c <EC()+0x1f4>)
   13982:	6013      	str	r3, [r2, #0]
          if(count>2){
   13984:	4b6d      	ldr	r3, [pc, #436]	; (13b3c <EC()+0x1f4>)
   13986:	681b      	ldr	r3, [r3, #0]
   13988:	2b02      	cmp	r3, #2
   1398a:	dd11      	ble.n	139b0 <EC()+0x68>
          oled_terminal.printf("-");
   1398c:	496c      	ldr	r1, [pc, #432]	; (13b40 <EC()+0x1f8>)
   1398e:	486d      	ldr	r0, [pc, #436]	; (13b44 <EC()+0x1fc>)
   13990:	f7ff fd04 	bl	1339c <OledTerminal::printf(char const*, ...)>
          morse[word_count]= '-';
   13994:	4b6c      	ldr	r3, [pc, #432]	; (13b48 <EC()+0x200>)
   13996:	681b      	ldr	r3, [r3, #0]
   13998:	4a66      	ldr	r2, [pc, #408]	; (13b34 <EC()+0x1ec>)
   1399a:	212d      	movs	r1, #45	; 0x2d
   1399c:	54d1      	strb	r1, [r2, r3]
          word_count++;
   1399e:	4b6a      	ldr	r3, [pc, #424]	; (13b48 <EC()+0x200>)
   139a0:	681b      	ldr	r3, [r3, #0]
   139a2:	3301      	adds	r3, #1
   139a4:	4a68      	ldr	r2, [pc, #416]	; (13b48 <EC()+0x200>)
   139a6:	6013      	str	r3, [r2, #0]
           count=-1; //used to prevent a dot to appear after releasing the button
   139a8:	4b64      	ldr	r3, [pc, #400]	; (13b3c <EC()+0x1f4>)
   139aa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   139ae:	601a      	str	r2, [r3, #0]
          }
          if(button3.ReadBool() != true && (count != 0) && (count != -1))
   139b0:	4861      	ldr	r0, [pc, #388]	; (13b38 <EC()+0x1f0>)
   139b2:	f7fc fd41 	bl	10438 <LabGPIO::ReadBool()>
   139b6:	4603      	mov	r3, r0
   139b8:	f083 0301 	eor.w	r3, r3, #1
   139bc:	b2db      	uxtb	r3, r3
   139be:	2b00      	cmp	r3, #0
   139c0:	d00a      	beq.n	139d8 <EC()+0x90>
   139c2:	4b5e      	ldr	r3, [pc, #376]	; (13b3c <EC()+0x1f4>)
   139c4:	681b      	ldr	r3, [r3, #0]
   139c6:	2b00      	cmp	r3, #0
   139c8:	d006      	beq.n	139d8 <EC()+0x90>
   139ca:	4b5c      	ldr	r3, [pc, #368]	; (13b3c <EC()+0x1f4>)
   139cc:	681b      	ldr	r3, [r3, #0]
   139ce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   139d2:	d001      	beq.n	139d8 <EC()+0x90>
   139d4:	2301      	movs	r3, #1
   139d6:	e000      	b.n	139da <EC()+0x92>
   139d8:	2300      	movs	r3, #0
   139da:	2b00      	cmp	r3, #0
   139dc:	d010      	beq.n	13a00 <EC()+0xb8>
          {
          oled_terminal.printf(".");
   139de:	495b      	ldr	r1, [pc, #364]	; (13b4c <EC()+0x204>)
   139e0:	4858      	ldr	r0, [pc, #352]	; (13b44 <EC()+0x1fc>)
   139e2:	f7ff fcdb 	bl	1339c <OledTerminal::printf(char const*, ...)>
          morse[word_count] = '.';
   139e6:	4b58      	ldr	r3, [pc, #352]	; (13b48 <EC()+0x200>)
   139e8:	681b      	ldr	r3, [r3, #0]
   139ea:	4a52      	ldr	r2, [pc, #328]	; (13b34 <EC()+0x1ec>)
   139ec:	212e      	movs	r1, #46	; 0x2e
   139ee:	54d1      	strb	r1, [r2, r3]
          word_count++;
   139f0:	4b55      	ldr	r3, [pc, #340]	; (13b48 <EC()+0x200>)
   139f2:	681b      	ldr	r3, [r3, #0]
   139f4:	3301      	adds	r3, #1
   139f6:	4a54      	ldr	r2, [pc, #336]	; (13b48 <EC()+0x200>)
   139f8:	6013      	str	r3, [r2, #0]
          count = 0; 
   139fa:	4b50      	ldr	r3, [pc, #320]	; (13b3c <EC()+0x1f4>)
   139fc:	2200      	movs	r2, #0
   139fe:	601a      	str	r2, [r3, #0]
       
          }
      }
  if(button2.ReadBool()) // used to display on terminal
   13a00:	4853      	ldr	r0, [pc, #332]	; (13b50 <EC()+0x208>)
   13a02:	f7fc fd19 	bl	10438 <LabGPIO::ReadBool()>
   13a06:	4603      	mov	r3, r0
   13a08:	2b00      	cmp	r3, #0
   13a0a:	d042      	beq.n	13a92 <EC()+0x14a>
  { Delay(10);
   13a0c:	f04f 000a 	mov.w	r0, #10
   13a10:	f04f 0100 	mov.w	r1, #0
   13a14:	f7fd faa8 	bl	10f68 <Delay(unsigned long long)>
      if(button2.ReadBool() != true){
   13a18:	484d      	ldr	r0, [pc, #308]	; (13b50 <EC()+0x208>)
   13a1a:	f7fc fd0d 	bl	10438 <LabGPIO::ReadBool()>
   13a1e:	4603      	mov	r3, r0
   13a20:	f083 0301 	eor.w	r3, r3, #1
   13a24:	b2db      	uxtb	r3, r3
   13a26:	2b00      	cmp	r3, #0
   13a28:	d033      	beq.n	13a92 <EC()+0x14a>
    for(increment =1; increment<=word_count; increment++){
   13a2a:	4b4a      	ldr	r3, [pc, #296]	; (13b54 <EC()+0x20c>)
   13a2c:	2201      	movs	r2, #1
   13a2e:	601a      	str	r2, [r3, #0]
   13a30:	4b48      	ldr	r3, [pc, #288]	; (13b54 <EC()+0x20c>)
   13a32:	681a      	ldr	r2, [r3, #0]
   13a34:	4b44      	ldr	r3, [pc, #272]	; (13b48 <EC()+0x200>)
   13a36:	681b      	ldr	r3, [r3, #0]
   13a38:	429a      	cmp	r2, r3
   13a3a:	dc0e      	bgt.n	13a5a <EC()+0x112>
     printf("%c", morse[increment]);
   13a3c:	4b45      	ldr	r3, [pc, #276]	; (13b54 <EC()+0x20c>)
   13a3e:	681b      	ldr	r3, [r3, #0]
   13a40:	4a3c      	ldr	r2, [pc, #240]	; (13b34 <EC()+0x1ec>)
   13a42:	5cd3      	ldrb	r3, [r2, r3]
   13a44:	4618      	mov	r0, r3
   13a46:	f002 fbf3 	bl	16230 <putchar>
     morse_translate();
   13a4a:	f000 f88f 	bl	13b6c <morse_translate()>
    for(increment =1; increment<=word_count; increment++){
   13a4e:	4b41      	ldr	r3, [pc, #260]	; (13b54 <EC()+0x20c>)
   13a50:	681b      	ldr	r3, [r3, #0]
   13a52:	3301      	adds	r3, #1
   13a54:	4a3f      	ldr	r2, [pc, #252]	; (13b54 <EC()+0x20c>)
   13a56:	6013      	str	r3, [r2, #0]
   13a58:	e7ea      	b.n	13a30 <EC()+0xe8>
    }
    printf("\n");
   13a5a:	200a      	movs	r0, #10
   13a5c:	f002 fbe8 	bl	16230 <putchar>
    for(increment=1; increment<=translated_count;increment++)
   13a60:	4b3c      	ldr	r3, [pc, #240]	; (13b54 <EC()+0x20c>)
   13a62:	2201      	movs	r2, #1
   13a64:	601a      	str	r2, [r3, #0]
   13a66:	4b3b      	ldr	r3, [pc, #236]	; (13b54 <EC()+0x20c>)
   13a68:	681a      	ldr	r2, [r3, #0]
   13a6a:	4b3b      	ldr	r3, [pc, #236]	; (13b58 <EC()+0x210>)
   13a6c:	681b      	ldr	r3, [r3, #0]
   13a6e:	429a      	cmp	r2, r3
   13a70:	dc0c      	bgt.n	13a8c <EC()+0x144>
    {
        printf("%c", translated[increment]);
   13a72:	4b38      	ldr	r3, [pc, #224]	; (13b54 <EC()+0x20c>)
   13a74:	681b      	ldr	r3, [r3, #0]
   13a76:	4a2e      	ldr	r2, [pc, #184]	; (13b30 <EC()+0x1e8>)
   13a78:	5cd3      	ldrb	r3, [r2, r3]
   13a7a:	4618      	mov	r0, r3
   13a7c:	f002 fbd8 	bl	16230 <putchar>
    for(increment=1; increment<=translated_count;increment++)
   13a80:	4b34      	ldr	r3, [pc, #208]	; (13b54 <EC()+0x20c>)
   13a82:	681b      	ldr	r3, [r3, #0]
   13a84:	3301      	adds	r3, #1
   13a86:	4a33      	ldr	r2, [pc, #204]	; (13b54 <EC()+0x20c>)
   13a88:	6013      	str	r3, [r2, #0]
   13a8a:	e7ec      	b.n	13a66 <EC()+0x11e>
    }
    
        oled_terminal.Clear();
   13a8c:	482d      	ldr	r0, [pc, #180]	; (13b44 <EC()+0x1fc>)
   13a8e:	f7ff fdcb 	bl	13628 <OledTerminal::Clear()>
      }
      
  }
    if(button1.ReadBool()) //used to provide space between letters
   13a92:	4832      	ldr	r0, [pc, #200]	; (13b5c <EC()+0x214>)
   13a94:	f7fc fcd0 	bl	10438 <LabGPIO::ReadBool()>
   13a98:	4603      	mov	r3, r0
   13a9a:	2b00      	cmp	r3, #0
   13a9c:	d01c      	beq.n	13ad8 <EC()+0x190>
  { Delay(10);
   13a9e:	f04f 000a 	mov.w	r0, #10
   13aa2:	f04f 0100 	mov.w	r1, #0
   13aa6:	f7fd fa5f 	bl	10f68 <Delay(unsigned long long)>
      if(button1.ReadBool() != true){
   13aaa:	482c      	ldr	r0, [pc, #176]	; (13b5c <EC()+0x214>)
   13aac:	f7fc fcc4 	bl	10438 <LabGPIO::ReadBool()>
   13ab0:	4603      	mov	r3, r0
   13ab2:	f083 0301 	eor.w	r3, r3, #1
   13ab6:	b2db      	uxtb	r3, r3
   13ab8:	2b00      	cmp	r3, #0
   13aba:	d00d      	beq.n	13ad8 <EC()+0x190>
      oled_terminal.printf("&"); 
   13abc:	4928      	ldr	r1, [pc, #160]	; (13b60 <EC()+0x218>)
   13abe:	4821      	ldr	r0, [pc, #132]	; (13b44 <EC()+0x1fc>)
   13ac0:	f7ff fc6c 	bl	1339c <OledTerminal::printf(char const*, ...)>
      morse[word_count] = '&';
   13ac4:	4b20      	ldr	r3, [pc, #128]	; (13b48 <EC()+0x200>)
   13ac6:	681b      	ldr	r3, [r3, #0]
   13ac8:	4a1a      	ldr	r2, [pc, #104]	; (13b34 <EC()+0x1ec>)
   13aca:	2126      	movs	r1, #38	; 0x26
   13acc:	54d1      	strb	r1, [r2, r3]
          word_count++;
   13ace:	4b1e      	ldr	r3, [pc, #120]	; (13b48 <EC()+0x200>)
   13ad0:	681b      	ldr	r3, [r3, #0]
   13ad2:	3301      	adds	r3, #1
   13ad4:	4a1c      	ldr	r2, [pc, #112]	; (13b48 <EC()+0x200>)
   13ad6:	6013      	str	r3, [r2, #0]
      }
      
  }
  if(button0.ReadBool()) //used to provide space between words
   13ad8:	4822      	ldr	r0, [pc, #136]	; (13b64 <EC()+0x21c>)
   13ada:	f7fc fcad 	bl	10438 <LabGPIO::ReadBool()>
   13ade:	4603      	mov	r3, r0
   13ae0:	2b00      	cmp	r3, #0
   13ae2:	d01c      	beq.n	13b1e <EC()+0x1d6>
  { Delay(10);
   13ae4:	f04f 000a 	mov.w	r0, #10
   13ae8:	f04f 0100 	mov.w	r1, #0
   13aec:	f7fd fa3c 	bl	10f68 <Delay(unsigned long long)>
      if(button0.ReadBool() != true){
   13af0:	481c      	ldr	r0, [pc, #112]	; (13b64 <EC()+0x21c>)
   13af2:	f7fc fca1 	bl	10438 <LabGPIO::ReadBool()>
   13af6:	4603      	mov	r3, r0
   13af8:	f083 0301 	eor.w	r3, r3, #1
   13afc:	b2db      	uxtb	r3, r3
   13afe:	2b00      	cmp	r3, #0
   13b00:	d00d      	beq.n	13b1e <EC()+0x1d6>
      oled_terminal.printf("|"); 
   13b02:	4919      	ldr	r1, [pc, #100]	; (13b68 <EC()+0x220>)
   13b04:	480f      	ldr	r0, [pc, #60]	; (13b44 <EC()+0x1fc>)
   13b06:	f7ff fc49 	bl	1339c <OledTerminal::printf(char const*, ...)>
      morse[word_count] = '|';
   13b0a:	4b0f      	ldr	r3, [pc, #60]	; (13b48 <EC()+0x200>)
   13b0c:	681b      	ldr	r3, [r3, #0]
   13b0e:	4a09      	ldr	r2, [pc, #36]	; (13b34 <EC()+0x1ec>)
   13b10:	217c      	movs	r1, #124	; 0x7c
   13b12:	54d1      	strb	r1, [r2, r3]
          word_count++;
   13b14:	4b0c      	ldr	r3, [pc, #48]	; (13b48 <EC()+0x200>)
   13b16:	681b      	ldr	r3, [r3, #0]
   13b18:	3301      	adds	r3, #1
   13b1a:	4a0b      	ldr	r2, [pc, #44]	; (13b48 <EC()+0x200>)
   13b1c:	6013      	str	r3, [r2, #0]
   13b1e:	4623      	mov	r3, r4
   13b20:	4619      	mov	r1, r3
   13b22:	4802      	ldr	r0, [pc, #8]	; (13b2c <EC()+0x1e4>)
   13b24:	f002 fbe4 	bl	162f0 <__cyg_profile_func_exit>
      }
      
  }
   
}
   13b28:	bf00      	nop
   13b2a:	bd10      	pop	{r4, pc}
   13b2c:	00013949 	.word	0x00013949
   13b30:	10000ba8 	.word	0x10000ba8
   13b34:	100007c0 	.word	0x100007c0
   13b38:	10000788 	.word	0x10000788
   13b3c:	100007bc 	.word	0x100007bc
   13b40:	00019884 	.word	0x00019884
   13b44:	10000c0c 	.word	0x10000c0c
   13b48:	10000474 	.word	0x10000474
   13b4c:	00019888 	.word	0x00019888
   13b50:	10000790 	.word	0x10000790
   13b54:	100007b8 	.word	0x100007b8
   13b58:	10000478 	.word	0x10000478
   13b5c:	10000798 	.word	0x10000798
   13b60:	0001988c 	.word	0x0001988c
   13b64:	100007a0 	.word	0x100007a0
   13b68:	00019890 	.word	0x00019890

00013b6c <morse_translate()>:
void morse_translate(){ //translate the morse array into the alphabet
   13b6c:	b510      	push	{r4, lr}
   13b6e:	4674      	mov	r4, lr
   13b70:	4623      	mov	r3, r4
   13b72:	4619      	mov	r1, r3
   13b74:	4893      	ldr	r0, [pc, #588]	; (13dc4 <morse_translate()+0x258>)
   13b76:	f002 fba7 	bl	162c8 <__cyg_profile_func_enter>
if(morse[increment] =='|')
   13b7a:	4b93      	ldr	r3, [pc, #588]	; (13dc8 <morse_translate()+0x25c>)
   13b7c:	681b      	ldr	r3, [r3, #0]
   13b7e:	4a93      	ldr	r2, [pc, #588]	; (13dcc <morse_translate()+0x260>)
   13b80:	5cd3      	ldrb	r3, [r2, r3]
   13b82:	2b7c      	cmp	r3, #124	; 0x7c
   13b84:	d109      	bne.n	13b9a <morse_translate()+0x2e>
     {
         translated[translated_count]=' ';
   13b86:	4b92      	ldr	r3, [pc, #584]	; (13dd0 <morse_translate()+0x264>)
   13b88:	681b      	ldr	r3, [r3, #0]
   13b8a:	4a92      	ldr	r2, [pc, #584]	; (13dd4 <morse_translate()+0x268>)
   13b8c:	2120      	movs	r1, #32
   13b8e:	54d1      	strb	r1, [r2, r3]
         translated_count++;
   13b90:	4b8f      	ldr	r3, [pc, #572]	; (13dd0 <morse_translate()+0x264>)
   13b92:	681b      	ldr	r3, [r3, #0]
   13b94:	3301      	adds	r3, #1
   13b96:	4a8e      	ldr	r2, [pc, #568]	; (13dd0 <morse_translate()+0x264>)
   13b98:	6013      	str	r3, [r2, #0]
     }
    if((morse[increment-3] =='&' || morse[increment-3] == '|' || morse[increment-3] == '?') && morse[increment-2] =='.' && morse[increment-1] == '-' && morse[increment] == '&'){
   13b9a:	4b8b      	ldr	r3, [pc, #556]	; (13dc8 <morse_translate()+0x25c>)
   13b9c:	681b      	ldr	r3, [r3, #0]
   13b9e:	3b03      	subs	r3, #3
   13ba0:	4a8a      	ldr	r2, [pc, #552]	; (13dcc <morse_translate()+0x260>)
   13ba2:	5cd3      	ldrb	r3, [r2, r3]
   13ba4:	2b26      	cmp	r3, #38	; 0x26
   13ba6:	d00d      	beq.n	13bc4 <morse_translate()+0x58>
   13ba8:	4b87      	ldr	r3, [pc, #540]	; (13dc8 <morse_translate()+0x25c>)
   13baa:	681b      	ldr	r3, [r3, #0]
   13bac:	3b03      	subs	r3, #3
   13bae:	4a87      	ldr	r2, [pc, #540]	; (13dcc <morse_translate()+0x260>)
   13bb0:	5cd3      	ldrb	r3, [r2, r3]
   13bb2:	2b7c      	cmp	r3, #124	; 0x7c
   13bb4:	d006      	beq.n	13bc4 <morse_translate()+0x58>
   13bb6:	4b84      	ldr	r3, [pc, #528]	; (13dc8 <morse_translate()+0x25c>)
   13bb8:	681b      	ldr	r3, [r3, #0]
   13bba:	3b03      	subs	r3, #3
   13bbc:	4a83      	ldr	r2, [pc, #524]	; (13dcc <morse_translate()+0x260>)
   13bbe:	5cd3      	ldrb	r3, [r2, r3]
   13bc0:	2b3f      	cmp	r3, #63	; 0x3f
   13bc2:	d11d      	bne.n	13c00 <morse_translate()+0x94>
   13bc4:	4b80      	ldr	r3, [pc, #512]	; (13dc8 <morse_translate()+0x25c>)
   13bc6:	681b      	ldr	r3, [r3, #0]
   13bc8:	3b02      	subs	r3, #2
   13bca:	4a80      	ldr	r2, [pc, #512]	; (13dcc <morse_translate()+0x260>)
   13bcc:	5cd3      	ldrb	r3, [r2, r3]
   13bce:	2b2e      	cmp	r3, #46	; 0x2e
   13bd0:	d116      	bne.n	13c00 <morse_translate()+0x94>
   13bd2:	4b7d      	ldr	r3, [pc, #500]	; (13dc8 <morse_translate()+0x25c>)
   13bd4:	681b      	ldr	r3, [r3, #0]
   13bd6:	3b01      	subs	r3, #1
   13bd8:	4a7c      	ldr	r2, [pc, #496]	; (13dcc <morse_translate()+0x260>)
   13bda:	5cd3      	ldrb	r3, [r2, r3]
   13bdc:	2b2d      	cmp	r3, #45	; 0x2d
   13bde:	d10f      	bne.n	13c00 <morse_translate()+0x94>
   13be0:	4b79      	ldr	r3, [pc, #484]	; (13dc8 <morse_translate()+0x25c>)
   13be2:	681b      	ldr	r3, [r3, #0]
   13be4:	4a79      	ldr	r2, [pc, #484]	; (13dcc <morse_translate()+0x260>)
   13be6:	5cd3      	ldrb	r3, [r2, r3]
   13be8:	2b26      	cmp	r3, #38	; 0x26
   13bea:	d109      	bne.n	13c00 <morse_translate()+0x94>
        translated[translated_count]='a';
   13bec:	4b78      	ldr	r3, [pc, #480]	; (13dd0 <morse_translate()+0x264>)
   13bee:	681b      	ldr	r3, [r3, #0]
   13bf0:	4a78      	ldr	r2, [pc, #480]	; (13dd4 <morse_translate()+0x268>)
   13bf2:	2161      	movs	r1, #97	; 0x61
   13bf4:	54d1      	strb	r1, [r2, r3]
        translated_count++;
   13bf6:	4b76      	ldr	r3, [pc, #472]	; (13dd0 <morse_translate()+0x264>)
   13bf8:	681b      	ldr	r3, [r3, #0]
   13bfa:	3301      	adds	r3, #1
   13bfc:	4a74      	ldr	r2, [pc, #464]	; (13dd0 <morse_translate()+0x264>)
   13bfe:	6013      	str	r3, [r2, #0]
        }
     if((morse[increment-5] =='&' || morse[increment-5] == '|' || morse[increment-5] == '?') && morse[increment-4] =='-' && morse[increment-3] == '.' && morse[increment-2] == '.' && morse[increment-1] == '.'  && morse[increment] == '&'){
   13c00:	4b71      	ldr	r3, [pc, #452]	; (13dc8 <morse_translate()+0x25c>)
   13c02:	681b      	ldr	r3, [r3, #0]
   13c04:	3b05      	subs	r3, #5
   13c06:	4a71      	ldr	r2, [pc, #452]	; (13dcc <morse_translate()+0x260>)
   13c08:	5cd3      	ldrb	r3, [r2, r3]
   13c0a:	2b26      	cmp	r3, #38	; 0x26
   13c0c:	d00d      	beq.n	13c2a <morse_translate()+0xbe>
   13c0e:	4b6e      	ldr	r3, [pc, #440]	; (13dc8 <morse_translate()+0x25c>)
   13c10:	681b      	ldr	r3, [r3, #0]
   13c12:	3b05      	subs	r3, #5
   13c14:	4a6d      	ldr	r2, [pc, #436]	; (13dcc <morse_translate()+0x260>)
   13c16:	5cd3      	ldrb	r3, [r2, r3]
   13c18:	2b7c      	cmp	r3, #124	; 0x7c
   13c1a:	d006      	beq.n	13c2a <morse_translate()+0xbe>
   13c1c:	4b6a      	ldr	r3, [pc, #424]	; (13dc8 <morse_translate()+0x25c>)
   13c1e:	681b      	ldr	r3, [r3, #0]
   13c20:	3b05      	subs	r3, #5
   13c22:	4a6a      	ldr	r2, [pc, #424]	; (13dcc <morse_translate()+0x260>)
   13c24:	5cd3      	ldrb	r3, [r2, r3]
   13c26:	2b3f      	cmp	r3, #63	; 0x3f
   13c28:	d12b      	bne.n	13c82 <morse_translate()+0x116>
   13c2a:	4b67      	ldr	r3, [pc, #412]	; (13dc8 <morse_translate()+0x25c>)
   13c2c:	681b      	ldr	r3, [r3, #0]
   13c2e:	3b04      	subs	r3, #4
   13c30:	4a66      	ldr	r2, [pc, #408]	; (13dcc <morse_translate()+0x260>)
   13c32:	5cd3      	ldrb	r3, [r2, r3]
   13c34:	2b2d      	cmp	r3, #45	; 0x2d
   13c36:	d124      	bne.n	13c82 <morse_translate()+0x116>
   13c38:	4b63      	ldr	r3, [pc, #396]	; (13dc8 <morse_translate()+0x25c>)
   13c3a:	681b      	ldr	r3, [r3, #0]
   13c3c:	3b03      	subs	r3, #3
   13c3e:	4a63      	ldr	r2, [pc, #396]	; (13dcc <morse_translate()+0x260>)
   13c40:	5cd3      	ldrb	r3, [r2, r3]
   13c42:	2b2e      	cmp	r3, #46	; 0x2e
   13c44:	d11d      	bne.n	13c82 <morse_translate()+0x116>
   13c46:	4b60      	ldr	r3, [pc, #384]	; (13dc8 <morse_translate()+0x25c>)
   13c48:	681b      	ldr	r3, [r3, #0]
   13c4a:	3b02      	subs	r3, #2
   13c4c:	4a5f      	ldr	r2, [pc, #380]	; (13dcc <morse_translate()+0x260>)
   13c4e:	5cd3      	ldrb	r3, [r2, r3]
   13c50:	2b2e      	cmp	r3, #46	; 0x2e
   13c52:	d116      	bne.n	13c82 <morse_translate()+0x116>
   13c54:	4b5c      	ldr	r3, [pc, #368]	; (13dc8 <morse_translate()+0x25c>)
   13c56:	681b      	ldr	r3, [r3, #0]
   13c58:	3b01      	subs	r3, #1
   13c5a:	4a5c      	ldr	r2, [pc, #368]	; (13dcc <morse_translate()+0x260>)
   13c5c:	5cd3      	ldrb	r3, [r2, r3]
   13c5e:	2b2e      	cmp	r3, #46	; 0x2e
   13c60:	d10f      	bne.n	13c82 <morse_translate()+0x116>
   13c62:	4b59      	ldr	r3, [pc, #356]	; (13dc8 <morse_translate()+0x25c>)
   13c64:	681b      	ldr	r3, [r3, #0]
   13c66:	4a59      	ldr	r2, [pc, #356]	; (13dcc <morse_translate()+0x260>)
   13c68:	5cd3      	ldrb	r3, [r2, r3]
   13c6a:	2b26      	cmp	r3, #38	; 0x26
   13c6c:	d109      	bne.n	13c82 <morse_translate()+0x116>
        translated[translated_count]='b';
   13c6e:	4b58      	ldr	r3, [pc, #352]	; (13dd0 <morse_translate()+0x264>)
   13c70:	681b      	ldr	r3, [r3, #0]
   13c72:	4a58      	ldr	r2, [pc, #352]	; (13dd4 <morse_translate()+0x268>)
   13c74:	2162      	movs	r1, #98	; 0x62
   13c76:	54d1      	strb	r1, [r2, r3]
        translated_count++;
   13c78:	4b55      	ldr	r3, [pc, #340]	; (13dd0 <morse_translate()+0x264>)
   13c7a:	681b      	ldr	r3, [r3, #0]
   13c7c:	3301      	adds	r3, #1
   13c7e:	4a54      	ldr	r2, [pc, #336]	; (13dd0 <morse_translate()+0x264>)
   13c80:	6013      	str	r3, [r2, #0]
        }
      if((morse[increment-5] =='&' || morse[increment-5] == '|' || morse[increment-5] == '?') && morse[increment-4] =='-' && morse[increment-3] == '.' && morse[increment-2] == '-' && morse[increment-1] == '.'  && morse[increment] == '&'){
   13c82:	4b51      	ldr	r3, [pc, #324]	; (13dc8 <morse_translate()+0x25c>)
   13c84:	681b      	ldr	r3, [r3, #0]
   13c86:	3b05      	subs	r3, #5
   13c88:	4a50      	ldr	r2, [pc, #320]	; (13dcc <morse_translate()+0x260>)
   13c8a:	5cd3      	ldrb	r3, [r2, r3]
   13c8c:	2b26      	cmp	r3, #38	; 0x26
   13c8e:	d00d      	beq.n	13cac <morse_translate()+0x140>
   13c90:	4b4d      	ldr	r3, [pc, #308]	; (13dc8 <morse_translate()+0x25c>)
   13c92:	681b      	ldr	r3, [r3, #0]
   13c94:	3b05      	subs	r3, #5
   13c96:	4a4d      	ldr	r2, [pc, #308]	; (13dcc <morse_translate()+0x260>)
   13c98:	5cd3      	ldrb	r3, [r2, r3]
   13c9a:	2b7c      	cmp	r3, #124	; 0x7c
   13c9c:	d006      	beq.n	13cac <morse_translate()+0x140>
   13c9e:	4b4a      	ldr	r3, [pc, #296]	; (13dc8 <morse_translate()+0x25c>)
   13ca0:	681b      	ldr	r3, [r3, #0]
   13ca2:	3b05      	subs	r3, #5
   13ca4:	4a49      	ldr	r2, [pc, #292]	; (13dcc <morse_translate()+0x260>)
   13ca6:	5cd3      	ldrb	r3, [r2, r3]
   13ca8:	2b3f      	cmp	r3, #63	; 0x3f
   13caa:	d12b      	bne.n	13d04 <morse_translate()+0x198>
   13cac:	4b46      	ldr	r3, [pc, #280]	; (13dc8 <morse_translate()+0x25c>)
   13cae:	681b      	ldr	r3, [r3, #0]
   13cb0:	3b04      	subs	r3, #4
   13cb2:	4a46      	ldr	r2, [pc, #280]	; (13dcc <morse_translate()+0x260>)
   13cb4:	5cd3      	ldrb	r3, [r2, r3]
   13cb6:	2b2d      	cmp	r3, #45	; 0x2d
   13cb8:	d124      	bne.n	13d04 <morse_translate()+0x198>
   13cba:	4b43      	ldr	r3, [pc, #268]	; (13dc8 <morse_translate()+0x25c>)
   13cbc:	681b      	ldr	r3, [r3, #0]
   13cbe:	3b03      	subs	r3, #3
   13cc0:	4a42      	ldr	r2, [pc, #264]	; (13dcc <morse_translate()+0x260>)
   13cc2:	5cd3      	ldrb	r3, [r2, r3]
   13cc4:	2b2e      	cmp	r3, #46	; 0x2e
   13cc6:	d11d      	bne.n	13d04 <morse_translate()+0x198>
   13cc8:	4b3f      	ldr	r3, [pc, #252]	; (13dc8 <morse_translate()+0x25c>)
   13cca:	681b      	ldr	r3, [r3, #0]
   13ccc:	3b02      	subs	r3, #2
   13cce:	4a3f      	ldr	r2, [pc, #252]	; (13dcc <morse_translate()+0x260>)
   13cd0:	5cd3      	ldrb	r3, [r2, r3]
   13cd2:	2b2d      	cmp	r3, #45	; 0x2d
   13cd4:	d116      	bne.n	13d04 <morse_translate()+0x198>
   13cd6:	4b3c      	ldr	r3, [pc, #240]	; (13dc8 <morse_translate()+0x25c>)
   13cd8:	681b      	ldr	r3, [r3, #0]
   13cda:	3b01      	subs	r3, #1
   13cdc:	4a3b      	ldr	r2, [pc, #236]	; (13dcc <morse_translate()+0x260>)
   13cde:	5cd3      	ldrb	r3, [r2, r3]
   13ce0:	2b2e      	cmp	r3, #46	; 0x2e
   13ce2:	d10f      	bne.n	13d04 <morse_translate()+0x198>
   13ce4:	4b38      	ldr	r3, [pc, #224]	; (13dc8 <morse_translate()+0x25c>)
   13ce6:	681b      	ldr	r3, [r3, #0]
   13ce8:	4a38      	ldr	r2, [pc, #224]	; (13dcc <morse_translate()+0x260>)
   13cea:	5cd3      	ldrb	r3, [r2, r3]
   13cec:	2b26      	cmp	r3, #38	; 0x26
   13cee:	d109      	bne.n	13d04 <morse_translate()+0x198>
        translated[translated_count]='c';
   13cf0:	4b37      	ldr	r3, [pc, #220]	; (13dd0 <morse_translate()+0x264>)
   13cf2:	681b      	ldr	r3, [r3, #0]
   13cf4:	4a37      	ldr	r2, [pc, #220]	; (13dd4 <morse_translate()+0x268>)
   13cf6:	2163      	movs	r1, #99	; 0x63
   13cf8:	54d1      	strb	r1, [r2, r3]
        translated_count++;
   13cfa:	4b35      	ldr	r3, [pc, #212]	; (13dd0 <morse_translate()+0x264>)
   13cfc:	681b      	ldr	r3, [r3, #0]
   13cfe:	3301      	adds	r3, #1
   13d00:	4a33      	ldr	r2, [pc, #204]	; (13dd0 <morse_translate()+0x264>)
   13d02:	6013      	str	r3, [r2, #0]
        }
       if((morse[increment-4] =='&' || morse[increment-4] == '|' || morse[increment-4] == '?') &&  morse[increment-3] == '-' && morse[increment-2] == '.' && morse[increment-1] == '.'  && morse[increment] == '&'){
   13d04:	4b30      	ldr	r3, [pc, #192]	; (13dc8 <morse_translate()+0x25c>)
   13d06:	681b      	ldr	r3, [r3, #0]
   13d08:	3b04      	subs	r3, #4
   13d0a:	4a30      	ldr	r2, [pc, #192]	; (13dcc <morse_translate()+0x260>)
   13d0c:	5cd3      	ldrb	r3, [r2, r3]
   13d0e:	2b26      	cmp	r3, #38	; 0x26
   13d10:	d00d      	beq.n	13d2e <morse_translate()+0x1c2>
   13d12:	4b2d      	ldr	r3, [pc, #180]	; (13dc8 <morse_translate()+0x25c>)
   13d14:	681b      	ldr	r3, [r3, #0]
   13d16:	3b04      	subs	r3, #4
   13d18:	4a2c      	ldr	r2, [pc, #176]	; (13dcc <morse_translate()+0x260>)
   13d1a:	5cd3      	ldrb	r3, [r2, r3]
   13d1c:	2b7c      	cmp	r3, #124	; 0x7c
   13d1e:	d006      	beq.n	13d2e <morse_translate()+0x1c2>
   13d20:	4b29      	ldr	r3, [pc, #164]	; (13dc8 <morse_translate()+0x25c>)
   13d22:	681b      	ldr	r3, [r3, #0]
   13d24:	3b04      	subs	r3, #4
   13d26:	4a29      	ldr	r2, [pc, #164]	; (13dcc <morse_translate()+0x260>)
   13d28:	5cd3      	ldrb	r3, [r2, r3]
   13d2a:	2b3f      	cmp	r3, #63	; 0x3f
   13d2c:	d124      	bne.n	13d78 <morse_translate()+0x20c>
   13d2e:	4b26      	ldr	r3, [pc, #152]	; (13dc8 <morse_translate()+0x25c>)
   13d30:	681b      	ldr	r3, [r3, #0]
   13d32:	3b03      	subs	r3, #3
   13d34:	4a25      	ldr	r2, [pc, #148]	; (13dcc <morse_translate()+0x260>)
   13d36:	5cd3      	ldrb	r3, [r2, r3]
   13d38:	2b2d      	cmp	r3, #45	; 0x2d
   13d3a:	d11d      	bne.n	13d78 <morse_translate()+0x20c>
   13d3c:	4b22      	ldr	r3, [pc, #136]	; (13dc8 <morse_translate()+0x25c>)
   13d3e:	681b      	ldr	r3, [r3, #0]
   13d40:	3b02      	subs	r3, #2
   13d42:	4a22      	ldr	r2, [pc, #136]	; (13dcc <morse_translate()+0x260>)
   13d44:	5cd3      	ldrb	r3, [r2, r3]
   13d46:	2b2e      	cmp	r3, #46	; 0x2e
   13d48:	d116      	bne.n	13d78 <morse_translate()+0x20c>
   13d4a:	4b1f      	ldr	r3, [pc, #124]	; (13dc8 <morse_translate()+0x25c>)
   13d4c:	681b      	ldr	r3, [r3, #0]
   13d4e:	3b01      	subs	r3, #1
   13d50:	4a1e      	ldr	r2, [pc, #120]	; (13dcc <morse_translate()+0x260>)
   13d52:	5cd3      	ldrb	r3, [r2, r3]
   13d54:	2b2e      	cmp	r3, #46	; 0x2e
   13d56:	d10f      	bne.n	13d78 <morse_translate()+0x20c>
   13d58:	4b1b      	ldr	r3, [pc, #108]	; (13dc8 <morse_translate()+0x25c>)
   13d5a:	681b      	ldr	r3, [r3, #0]
   13d5c:	4a1b      	ldr	r2, [pc, #108]	; (13dcc <morse_translate()+0x260>)
   13d5e:	5cd3      	ldrb	r3, [r2, r3]
   13d60:	2b26      	cmp	r3, #38	; 0x26
   13d62:	d109      	bne.n	13d78 <morse_translate()+0x20c>
        translated[translated_count]='d';
   13d64:	4b1a      	ldr	r3, [pc, #104]	; (13dd0 <morse_translate()+0x264>)
   13d66:	681b      	ldr	r3, [r3, #0]
   13d68:	4a1a      	ldr	r2, [pc, #104]	; (13dd4 <morse_translate()+0x268>)
   13d6a:	2164      	movs	r1, #100	; 0x64
   13d6c:	54d1      	strb	r1, [r2, r3]
        translated_count++;
   13d6e:	4b18      	ldr	r3, [pc, #96]	; (13dd0 <morse_translate()+0x264>)
   13d70:	681b      	ldr	r3, [r3, #0]
   13d72:	3301      	adds	r3, #1
   13d74:	4a16      	ldr	r2, [pc, #88]	; (13dd0 <morse_translate()+0x264>)
   13d76:	6013      	str	r3, [r2, #0]
        }
        if((morse[increment-2] =='&' || morse[increment-2] == '?' || morse[increment-2] == '|') && morse[increment-1] =='.'&& morse[increment] =='&')
   13d78:	4b13      	ldr	r3, [pc, #76]	; (13dc8 <morse_translate()+0x25c>)
   13d7a:	681b      	ldr	r3, [r3, #0]
   13d7c:	3b02      	subs	r3, #2
   13d7e:	4a13      	ldr	r2, [pc, #76]	; (13dcc <morse_translate()+0x260>)
   13d80:	5cd3      	ldrb	r3, [r2, r3]
   13d82:	2b26      	cmp	r3, #38	; 0x26
   13d84:	d00d      	beq.n	13da2 <morse_translate()+0x236>
   13d86:	4b10      	ldr	r3, [pc, #64]	; (13dc8 <morse_translate()+0x25c>)
   13d88:	681b      	ldr	r3, [r3, #0]
   13d8a:	3b02      	subs	r3, #2
   13d8c:	4a0f      	ldr	r2, [pc, #60]	; (13dcc <morse_translate()+0x260>)
   13d8e:	5cd3      	ldrb	r3, [r2, r3]
   13d90:	2b3f      	cmp	r3, #63	; 0x3f
   13d92:	d006      	beq.n	13da2 <morse_translate()+0x236>
   13d94:	4b0c      	ldr	r3, [pc, #48]	; (13dc8 <morse_translate()+0x25c>)
   13d96:	681b      	ldr	r3, [r3, #0]
   13d98:	3b02      	subs	r3, #2
   13d9a:	4a0c      	ldr	r2, [pc, #48]	; (13dcc <morse_translate()+0x260>)
   13d9c:	5cd3      	ldrb	r3, [r2, r3]
   13d9e:	2b7c      	cmp	r3, #124	; 0x7c
   13da0:	d122      	bne.n	13de8 <morse_translate()+0x27c>
   13da2:	4b09      	ldr	r3, [pc, #36]	; (13dc8 <morse_translate()+0x25c>)
   13da4:	681b      	ldr	r3, [r3, #0]
   13da6:	3b01      	subs	r3, #1
   13da8:	4a08      	ldr	r2, [pc, #32]	; (13dcc <morse_translate()+0x260>)
   13daa:	5cd3      	ldrb	r3, [r2, r3]
   13dac:	2b2e      	cmp	r3, #46	; 0x2e
   13dae:	d11b      	bne.n	13de8 <morse_translate()+0x27c>
   13db0:	4b05      	ldr	r3, [pc, #20]	; (13dc8 <morse_translate()+0x25c>)
   13db2:	681b      	ldr	r3, [r3, #0]
   13db4:	4a05      	ldr	r2, [pc, #20]	; (13dcc <morse_translate()+0x260>)
   13db6:	5cd3      	ldrb	r3, [r2, r3]
   13db8:	2b26      	cmp	r3, #38	; 0x26
   13dba:	d115      	bne.n	13de8 <morse_translate()+0x27c>
        {
         translated[translated_count]='e';
   13dbc:	4b04      	ldr	r3, [pc, #16]	; (13dd0 <morse_translate()+0x264>)
   13dbe:	681b      	ldr	r3, [r3, #0]
   13dc0:	e00a      	b.n	13dd8 <morse_translate()+0x26c>
   13dc2:	bf00      	nop
   13dc4:	00013b6d 	.word	0x00013b6d
   13dc8:	100007b8 	.word	0x100007b8
   13dcc:	100007c0 	.word	0x100007c0
   13dd0:	10000478 	.word	0x10000478
   13dd4:	10000ba8 	.word	0x10000ba8
   13dd8:	4a93      	ldr	r2, [pc, #588]	; (14028 <morse_translate()+0x4bc>)
   13dda:	2165      	movs	r1, #101	; 0x65
   13ddc:	54d1      	strb	r1, [r2, r3]
         translated_count++;
   13dde:	4b93      	ldr	r3, [pc, #588]	; (1402c <morse_translate()+0x4c0>)
   13de0:	681b      	ldr	r3, [r3, #0]
   13de2:	3301      	adds	r3, #1
   13de4:	4a91      	ldr	r2, [pc, #580]	; (1402c <morse_translate()+0x4c0>)
   13de6:	6013      	str	r3, [r2, #0]
        }
        if((morse[increment-5] =='&' || morse[increment-5] == '|' || morse[increment-5] == '?') && morse[increment-4] =='.' && morse[increment-3] == '.' && morse[increment-2] == '-' && morse[increment-1] == '.'  && morse[increment] == '&'){
   13de8:	4b91      	ldr	r3, [pc, #580]	; (14030 <morse_translate()+0x4c4>)
   13dea:	681b      	ldr	r3, [r3, #0]
   13dec:	3b05      	subs	r3, #5
   13dee:	4a91      	ldr	r2, [pc, #580]	; (14034 <morse_translate()+0x4c8>)
   13df0:	5cd3      	ldrb	r3, [r2, r3]
   13df2:	2b26      	cmp	r3, #38	; 0x26
   13df4:	d00d      	beq.n	13e12 <morse_translate()+0x2a6>
   13df6:	4b8e      	ldr	r3, [pc, #568]	; (14030 <morse_translate()+0x4c4>)
   13df8:	681b      	ldr	r3, [r3, #0]
   13dfa:	3b05      	subs	r3, #5
   13dfc:	4a8d      	ldr	r2, [pc, #564]	; (14034 <morse_translate()+0x4c8>)
   13dfe:	5cd3      	ldrb	r3, [r2, r3]
   13e00:	2b7c      	cmp	r3, #124	; 0x7c
   13e02:	d006      	beq.n	13e12 <morse_translate()+0x2a6>
   13e04:	4b8a      	ldr	r3, [pc, #552]	; (14030 <morse_translate()+0x4c4>)
   13e06:	681b      	ldr	r3, [r3, #0]
   13e08:	3b05      	subs	r3, #5
   13e0a:	4a8a      	ldr	r2, [pc, #552]	; (14034 <morse_translate()+0x4c8>)
   13e0c:	5cd3      	ldrb	r3, [r2, r3]
   13e0e:	2b3f      	cmp	r3, #63	; 0x3f
   13e10:	d12b      	bne.n	13e6a <morse_translate()+0x2fe>
   13e12:	4b87      	ldr	r3, [pc, #540]	; (14030 <morse_translate()+0x4c4>)
   13e14:	681b      	ldr	r3, [r3, #0]
   13e16:	3b04      	subs	r3, #4
   13e18:	4a86      	ldr	r2, [pc, #536]	; (14034 <morse_translate()+0x4c8>)
   13e1a:	5cd3      	ldrb	r3, [r2, r3]
   13e1c:	2b2e      	cmp	r3, #46	; 0x2e
   13e1e:	d124      	bne.n	13e6a <morse_translate()+0x2fe>
   13e20:	4b83      	ldr	r3, [pc, #524]	; (14030 <morse_translate()+0x4c4>)
   13e22:	681b      	ldr	r3, [r3, #0]
   13e24:	3b03      	subs	r3, #3
   13e26:	4a83      	ldr	r2, [pc, #524]	; (14034 <morse_translate()+0x4c8>)
   13e28:	5cd3      	ldrb	r3, [r2, r3]
   13e2a:	2b2e      	cmp	r3, #46	; 0x2e
   13e2c:	d11d      	bne.n	13e6a <morse_translate()+0x2fe>
   13e2e:	4b80      	ldr	r3, [pc, #512]	; (14030 <morse_translate()+0x4c4>)
   13e30:	681b      	ldr	r3, [r3, #0]
   13e32:	3b02      	subs	r3, #2
   13e34:	4a7f      	ldr	r2, [pc, #508]	; (14034 <morse_translate()+0x4c8>)
   13e36:	5cd3      	ldrb	r3, [r2, r3]
   13e38:	2b2d      	cmp	r3, #45	; 0x2d
   13e3a:	d116      	bne.n	13e6a <morse_translate()+0x2fe>
   13e3c:	4b7c      	ldr	r3, [pc, #496]	; (14030 <morse_translate()+0x4c4>)
   13e3e:	681b      	ldr	r3, [r3, #0]
   13e40:	3b01      	subs	r3, #1
   13e42:	4a7c      	ldr	r2, [pc, #496]	; (14034 <morse_translate()+0x4c8>)
   13e44:	5cd3      	ldrb	r3, [r2, r3]
   13e46:	2b2e      	cmp	r3, #46	; 0x2e
   13e48:	d10f      	bne.n	13e6a <morse_translate()+0x2fe>
   13e4a:	4b79      	ldr	r3, [pc, #484]	; (14030 <morse_translate()+0x4c4>)
   13e4c:	681b      	ldr	r3, [r3, #0]
   13e4e:	4a79      	ldr	r2, [pc, #484]	; (14034 <morse_translate()+0x4c8>)
   13e50:	5cd3      	ldrb	r3, [r2, r3]
   13e52:	2b26      	cmp	r3, #38	; 0x26
   13e54:	d109      	bne.n	13e6a <morse_translate()+0x2fe>
        translated[translated_count]='f';
   13e56:	4b75      	ldr	r3, [pc, #468]	; (1402c <morse_translate()+0x4c0>)
   13e58:	681b      	ldr	r3, [r3, #0]
   13e5a:	4a73      	ldr	r2, [pc, #460]	; (14028 <morse_translate()+0x4bc>)
   13e5c:	2166      	movs	r1, #102	; 0x66
   13e5e:	54d1      	strb	r1, [r2, r3]
        translated_count++;
   13e60:	4b72      	ldr	r3, [pc, #456]	; (1402c <morse_translate()+0x4c0>)
   13e62:	681b      	ldr	r3, [r3, #0]
   13e64:	3301      	adds	r3, #1
   13e66:	4a71      	ldr	r2, [pc, #452]	; (1402c <morse_translate()+0x4c0>)
   13e68:	6013      	str	r3, [r2, #0]
        }
       if((morse[increment-5] =='&' || morse[increment-5] == '|' || morse[increment-5] == '?') && morse[increment-4] =='.' && morse[increment-3] == '.' && morse[increment-2] == '.' && morse[increment-1] == '.'  && morse[increment] == '&'){
   13e6a:	4b71      	ldr	r3, [pc, #452]	; (14030 <morse_translate()+0x4c4>)
   13e6c:	681b      	ldr	r3, [r3, #0]
   13e6e:	3b05      	subs	r3, #5
   13e70:	4a70      	ldr	r2, [pc, #448]	; (14034 <morse_translate()+0x4c8>)
   13e72:	5cd3      	ldrb	r3, [r2, r3]
   13e74:	2b26      	cmp	r3, #38	; 0x26
   13e76:	d00d      	beq.n	13e94 <morse_translate()+0x328>
   13e78:	4b6d      	ldr	r3, [pc, #436]	; (14030 <morse_translate()+0x4c4>)
   13e7a:	681b      	ldr	r3, [r3, #0]
   13e7c:	3b05      	subs	r3, #5
   13e7e:	4a6d      	ldr	r2, [pc, #436]	; (14034 <morse_translate()+0x4c8>)
   13e80:	5cd3      	ldrb	r3, [r2, r3]
   13e82:	2b7c      	cmp	r3, #124	; 0x7c
   13e84:	d006      	beq.n	13e94 <morse_translate()+0x328>
   13e86:	4b6a      	ldr	r3, [pc, #424]	; (14030 <morse_translate()+0x4c4>)
   13e88:	681b      	ldr	r3, [r3, #0]
   13e8a:	3b05      	subs	r3, #5
   13e8c:	4a69      	ldr	r2, [pc, #420]	; (14034 <morse_translate()+0x4c8>)
   13e8e:	5cd3      	ldrb	r3, [r2, r3]
   13e90:	2b3f      	cmp	r3, #63	; 0x3f
   13e92:	d12b      	bne.n	13eec <morse_translate()+0x380>
   13e94:	4b66      	ldr	r3, [pc, #408]	; (14030 <morse_translate()+0x4c4>)
   13e96:	681b      	ldr	r3, [r3, #0]
   13e98:	3b04      	subs	r3, #4
   13e9a:	4a66      	ldr	r2, [pc, #408]	; (14034 <morse_translate()+0x4c8>)
   13e9c:	5cd3      	ldrb	r3, [r2, r3]
   13e9e:	2b2e      	cmp	r3, #46	; 0x2e
   13ea0:	d124      	bne.n	13eec <morse_translate()+0x380>
   13ea2:	4b63      	ldr	r3, [pc, #396]	; (14030 <morse_translate()+0x4c4>)
   13ea4:	681b      	ldr	r3, [r3, #0]
   13ea6:	3b03      	subs	r3, #3
   13ea8:	4a62      	ldr	r2, [pc, #392]	; (14034 <morse_translate()+0x4c8>)
   13eaa:	5cd3      	ldrb	r3, [r2, r3]
   13eac:	2b2e      	cmp	r3, #46	; 0x2e
   13eae:	d11d      	bne.n	13eec <morse_translate()+0x380>
   13eb0:	4b5f      	ldr	r3, [pc, #380]	; (14030 <morse_translate()+0x4c4>)
   13eb2:	681b      	ldr	r3, [r3, #0]
   13eb4:	3b02      	subs	r3, #2
   13eb6:	4a5f      	ldr	r2, [pc, #380]	; (14034 <morse_translate()+0x4c8>)
   13eb8:	5cd3      	ldrb	r3, [r2, r3]
   13eba:	2b2e      	cmp	r3, #46	; 0x2e
   13ebc:	d116      	bne.n	13eec <morse_translate()+0x380>
   13ebe:	4b5c      	ldr	r3, [pc, #368]	; (14030 <morse_translate()+0x4c4>)
   13ec0:	681b      	ldr	r3, [r3, #0]
   13ec2:	3b01      	subs	r3, #1
   13ec4:	4a5b      	ldr	r2, [pc, #364]	; (14034 <morse_translate()+0x4c8>)
   13ec6:	5cd3      	ldrb	r3, [r2, r3]
   13ec8:	2b2e      	cmp	r3, #46	; 0x2e
   13eca:	d10f      	bne.n	13eec <morse_translate()+0x380>
   13ecc:	4b58      	ldr	r3, [pc, #352]	; (14030 <morse_translate()+0x4c4>)
   13ece:	681b      	ldr	r3, [r3, #0]
   13ed0:	4a58      	ldr	r2, [pc, #352]	; (14034 <morse_translate()+0x4c8>)
   13ed2:	5cd3      	ldrb	r3, [r2, r3]
   13ed4:	2b26      	cmp	r3, #38	; 0x26
   13ed6:	d109      	bne.n	13eec <morse_translate()+0x380>
        translated[translated_count]='h';
   13ed8:	4b54      	ldr	r3, [pc, #336]	; (1402c <morse_translate()+0x4c0>)
   13eda:	681b      	ldr	r3, [r3, #0]
   13edc:	4a52      	ldr	r2, [pc, #328]	; (14028 <morse_translate()+0x4bc>)
   13ede:	2168      	movs	r1, #104	; 0x68
   13ee0:	54d1      	strb	r1, [r2, r3]
        translated_count++;
   13ee2:	4b52      	ldr	r3, [pc, #328]	; (1402c <morse_translate()+0x4c0>)
   13ee4:	681b      	ldr	r3, [r3, #0]
   13ee6:	3301      	adds	r3, #1
   13ee8:	4a50      	ldr	r2, [pc, #320]	; (1402c <morse_translate()+0x4c0>)
   13eea:	6013      	str	r3, [r2, #0]
        }
       if((morse[increment-3] =='&' || morse[increment-3] == '|' || morse[increment-3] == '?') && morse[increment-2] =='.' && morse[increment-1] == '.' && morse[increment] == '&'){
   13eec:	4b50      	ldr	r3, [pc, #320]	; (14030 <morse_translate()+0x4c4>)
   13eee:	681b      	ldr	r3, [r3, #0]
   13ef0:	3b03      	subs	r3, #3
   13ef2:	4a50      	ldr	r2, [pc, #320]	; (14034 <morse_translate()+0x4c8>)
   13ef4:	5cd3      	ldrb	r3, [r2, r3]
   13ef6:	2b26      	cmp	r3, #38	; 0x26
   13ef8:	d00d      	beq.n	13f16 <morse_translate()+0x3aa>
   13efa:	4b4d      	ldr	r3, [pc, #308]	; (14030 <morse_translate()+0x4c4>)
   13efc:	681b      	ldr	r3, [r3, #0]
   13efe:	3b03      	subs	r3, #3
   13f00:	4a4c      	ldr	r2, [pc, #304]	; (14034 <morse_translate()+0x4c8>)
   13f02:	5cd3      	ldrb	r3, [r2, r3]
   13f04:	2b7c      	cmp	r3, #124	; 0x7c
   13f06:	d006      	beq.n	13f16 <morse_translate()+0x3aa>
   13f08:	4b49      	ldr	r3, [pc, #292]	; (14030 <morse_translate()+0x4c4>)
   13f0a:	681b      	ldr	r3, [r3, #0]
   13f0c:	3b03      	subs	r3, #3
   13f0e:	4a49      	ldr	r2, [pc, #292]	; (14034 <morse_translate()+0x4c8>)
   13f10:	5cd3      	ldrb	r3, [r2, r3]
   13f12:	2b3f      	cmp	r3, #63	; 0x3f
   13f14:	d11d      	bne.n	13f52 <morse_translate()+0x3e6>
   13f16:	4b46      	ldr	r3, [pc, #280]	; (14030 <morse_translate()+0x4c4>)
   13f18:	681b      	ldr	r3, [r3, #0]
   13f1a:	3b02      	subs	r3, #2
   13f1c:	4a45      	ldr	r2, [pc, #276]	; (14034 <morse_translate()+0x4c8>)
   13f1e:	5cd3      	ldrb	r3, [r2, r3]
   13f20:	2b2e      	cmp	r3, #46	; 0x2e
   13f22:	d116      	bne.n	13f52 <morse_translate()+0x3e6>
   13f24:	4b42      	ldr	r3, [pc, #264]	; (14030 <morse_translate()+0x4c4>)
   13f26:	681b      	ldr	r3, [r3, #0]
   13f28:	3b01      	subs	r3, #1
   13f2a:	4a42      	ldr	r2, [pc, #264]	; (14034 <morse_translate()+0x4c8>)
   13f2c:	5cd3      	ldrb	r3, [r2, r3]
   13f2e:	2b2e      	cmp	r3, #46	; 0x2e
   13f30:	d10f      	bne.n	13f52 <morse_translate()+0x3e6>
   13f32:	4b3f      	ldr	r3, [pc, #252]	; (14030 <morse_translate()+0x4c4>)
   13f34:	681b      	ldr	r3, [r3, #0]
   13f36:	4a3f      	ldr	r2, [pc, #252]	; (14034 <morse_translate()+0x4c8>)
   13f38:	5cd3      	ldrb	r3, [r2, r3]
   13f3a:	2b26      	cmp	r3, #38	; 0x26
   13f3c:	d109      	bne.n	13f52 <morse_translate()+0x3e6>
        translated[translated_count]='i';
   13f3e:	4b3b      	ldr	r3, [pc, #236]	; (1402c <morse_translate()+0x4c0>)
   13f40:	681b      	ldr	r3, [r3, #0]
   13f42:	4a39      	ldr	r2, [pc, #228]	; (14028 <morse_translate()+0x4bc>)
   13f44:	2169      	movs	r1, #105	; 0x69
   13f46:	54d1      	strb	r1, [r2, r3]
        translated_count++;
   13f48:	4b38      	ldr	r3, [pc, #224]	; (1402c <morse_translate()+0x4c0>)
   13f4a:	681b      	ldr	r3, [r3, #0]
   13f4c:	3301      	adds	r3, #1
   13f4e:	4a37      	ldr	r2, [pc, #220]	; (1402c <morse_translate()+0x4c0>)
   13f50:	6013      	str	r3, [r2, #0]
        }
        if((morse[increment-5] =='&' || morse[increment-5] == '|' || morse[increment-5] == '?') && morse[increment-4] =='.' && morse[increment-3] == '-' && morse[increment-2] == '-' && morse[increment-1] == '-'  && morse[increment] == '&'){
   13f52:	4b37      	ldr	r3, [pc, #220]	; (14030 <morse_translate()+0x4c4>)
   13f54:	681b      	ldr	r3, [r3, #0]
   13f56:	3b05      	subs	r3, #5
   13f58:	4a36      	ldr	r2, [pc, #216]	; (14034 <morse_translate()+0x4c8>)
   13f5a:	5cd3      	ldrb	r3, [r2, r3]
   13f5c:	2b26      	cmp	r3, #38	; 0x26
   13f5e:	d00d      	beq.n	13f7c <morse_translate()+0x410>
   13f60:	4b33      	ldr	r3, [pc, #204]	; (14030 <morse_translate()+0x4c4>)
   13f62:	681b      	ldr	r3, [r3, #0]
   13f64:	3b05      	subs	r3, #5
   13f66:	4a33      	ldr	r2, [pc, #204]	; (14034 <morse_translate()+0x4c8>)
   13f68:	5cd3      	ldrb	r3, [r2, r3]
   13f6a:	2b7c      	cmp	r3, #124	; 0x7c
   13f6c:	d006      	beq.n	13f7c <morse_translate()+0x410>
   13f6e:	4b30      	ldr	r3, [pc, #192]	; (14030 <morse_translate()+0x4c4>)
   13f70:	681b      	ldr	r3, [r3, #0]
   13f72:	3b05      	subs	r3, #5
   13f74:	4a2f      	ldr	r2, [pc, #188]	; (14034 <morse_translate()+0x4c8>)
   13f76:	5cd3      	ldrb	r3, [r2, r3]
   13f78:	2b3f      	cmp	r3, #63	; 0x3f
   13f7a:	d12b      	bne.n	13fd4 <morse_translate()+0x468>
   13f7c:	4b2c      	ldr	r3, [pc, #176]	; (14030 <morse_translate()+0x4c4>)
   13f7e:	681b      	ldr	r3, [r3, #0]
   13f80:	3b04      	subs	r3, #4
   13f82:	4a2c      	ldr	r2, [pc, #176]	; (14034 <morse_translate()+0x4c8>)
   13f84:	5cd3      	ldrb	r3, [r2, r3]
   13f86:	2b2e      	cmp	r3, #46	; 0x2e
   13f88:	d124      	bne.n	13fd4 <morse_translate()+0x468>
   13f8a:	4b29      	ldr	r3, [pc, #164]	; (14030 <morse_translate()+0x4c4>)
   13f8c:	681b      	ldr	r3, [r3, #0]
   13f8e:	3b03      	subs	r3, #3
   13f90:	4a28      	ldr	r2, [pc, #160]	; (14034 <morse_translate()+0x4c8>)
   13f92:	5cd3      	ldrb	r3, [r2, r3]
   13f94:	2b2d      	cmp	r3, #45	; 0x2d
   13f96:	d11d      	bne.n	13fd4 <morse_translate()+0x468>
   13f98:	4b25      	ldr	r3, [pc, #148]	; (14030 <morse_translate()+0x4c4>)
   13f9a:	681b      	ldr	r3, [r3, #0]
   13f9c:	3b02      	subs	r3, #2
   13f9e:	4a25      	ldr	r2, [pc, #148]	; (14034 <morse_translate()+0x4c8>)
   13fa0:	5cd3      	ldrb	r3, [r2, r3]
   13fa2:	2b2d      	cmp	r3, #45	; 0x2d
   13fa4:	d116      	bne.n	13fd4 <morse_translate()+0x468>
   13fa6:	4b22      	ldr	r3, [pc, #136]	; (14030 <morse_translate()+0x4c4>)
   13fa8:	681b      	ldr	r3, [r3, #0]
   13faa:	3b01      	subs	r3, #1
   13fac:	4a21      	ldr	r2, [pc, #132]	; (14034 <morse_translate()+0x4c8>)
   13fae:	5cd3      	ldrb	r3, [r2, r3]
   13fb0:	2b2d      	cmp	r3, #45	; 0x2d
   13fb2:	d10f      	bne.n	13fd4 <morse_translate()+0x468>
   13fb4:	4b1e      	ldr	r3, [pc, #120]	; (14030 <morse_translate()+0x4c4>)
   13fb6:	681b      	ldr	r3, [r3, #0]
   13fb8:	4a1e      	ldr	r2, [pc, #120]	; (14034 <morse_translate()+0x4c8>)
   13fba:	5cd3      	ldrb	r3, [r2, r3]
   13fbc:	2b26      	cmp	r3, #38	; 0x26
   13fbe:	d109      	bne.n	13fd4 <morse_translate()+0x468>
        translated[translated_count]='j';
   13fc0:	4b1a      	ldr	r3, [pc, #104]	; (1402c <morse_translate()+0x4c0>)
   13fc2:	681b      	ldr	r3, [r3, #0]
   13fc4:	4a18      	ldr	r2, [pc, #96]	; (14028 <morse_translate()+0x4bc>)
   13fc6:	216a      	movs	r1, #106	; 0x6a
   13fc8:	54d1      	strb	r1, [r2, r3]
        translated_count++;
   13fca:	4b18      	ldr	r3, [pc, #96]	; (1402c <morse_translate()+0x4c0>)
   13fcc:	681b      	ldr	r3, [r3, #0]
   13fce:	3301      	adds	r3, #1
   13fd0:	4a16      	ldr	r2, [pc, #88]	; (1402c <morse_translate()+0x4c0>)
   13fd2:	6013      	str	r3, [r2, #0]
        }
        if( (morse[increment-4] =='&' || morse[increment-4] == '|' || morse[increment-4] == '?') && morse[increment-3] == '-' && morse[increment-2] == '.' && morse[increment-1] == '-'  && morse[increment] == '&'){
   13fd4:	4b16      	ldr	r3, [pc, #88]	; (14030 <morse_translate()+0x4c4>)
   13fd6:	681b      	ldr	r3, [r3, #0]
   13fd8:	3b04      	subs	r3, #4
   13fda:	4a16      	ldr	r2, [pc, #88]	; (14034 <morse_translate()+0x4c8>)
   13fdc:	5cd3      	ldrb	r3, [r2, r3]
   13fde:	2b26      	cmp	r3, #38	; 0x26
   13fe0:	d00d      	beq.n	13ffe <morse_translate()+0x492>
   13fe2:	4b13      	ldr	r3, [pc, #76]	; (14030 <morse_translate()+0x4c4>)
   13fe4:	681b      	ldr	r3, [r3, #0]
   13fe6:	3b04      	subs	r3, #4
   13fe8:	4a12      	ldr	r2, [pc, #72]	; (14034 <morse_translate()+0x4c8>)
   13fea:	5cd3      	ldrb	r3, [r2, r3]
   13fec:	2b7c      	cmp	r3, #124	; 0x7c
   13fee:	d006      	beq.n	13ffe <morse_translate()+0x492>
   13ff0:	4b0f      	ldr	r3, [pc, #60]	; (14030 <morse_translate()+0x4c4>)
   13ff2:	681b      	ldr	r3, [r3, #0]
   13ff4:	3b04      	subs	r3, #4
   13ff6:	4a0f      	ldr	r2, [pc, #60]	; (14034 <morse_translate()+0x4c8>)
   13ff8:	5cd3      	ldrb	r3, [r2, r3]
   13ffa:	2b3f      	cmp	r3, #63	; 0x3f
   13ffc:	d12d      	bne.n	1405a <morse_translate()+0x4ee>
   13ffe:	4b0c      	ldr	r3, [pc, #48]	; (14030 <morse_translate()+0x4c4>)
   14000:	681b      	ldr	r3, [r3, #0]
   14002:	3b03      	subs	r3, #3
   14004:	4a0b      	ldr	r2, [pc, #44]	; (14034 <morse_translate()+0x4c8>)
   14006:	5cd3      	ldrb	r3, [r2, r3]
   14008:	2b2d      	cmp	r3, #45	; 0x2d
   1400a:	d126      	bne.n	1405a <morse_translate()+0x4ee>
   1400c:	4b08      	ldr	r3, [pc, #32]	; (14030 <morse_translate()+0x4c4>)
   1400e:	681b      	ldr	r3, [r3, #0]
   14010:	3b02      	subs	r3, #2
   14012:	4a08      	ldr	r2, [pc, #32]	; (14034 <morse_translate()+0x4c8>)
   14014:	5cd3      	ldrb	r3, [r2, r3]
   14016:	2b2e      	cmp	r3, #46	; 0x2e
   14018:	d11f      	bne.n	1405a <morse_translate()+0x4ee>
   1401a:	4b05      	ldr	r3, [pc, #20]	; (14030 <morse_translate()+0x4c4>)
   1401c:	681b      	ldr	r3, [r3, #0]
   1401e:	3b01      	subs	r3, #1
   14020:	4a04      	ldr	r2, [pc, #16]	; (14034 <morse_translate()+0x4c8>)
   14022:	5cd3      	ldrb	r3, [r2, r3]
   14024:	2b2d      	cmp	r3, #45	; 0x2d
   14026:	e007      	b.n	14038 <morse_translate()+0x4cc>
   14028:	10000ba8 	.word	0x10000ba8
   1402c:	10000478 	.word	0x10000478
   14030:	100007b8 	.word	0x100007b8
   14034:	100007c0 	.word	0x100007c0
   14038:	d10f      	bne.n	1405a <morse_translate()+0x4ee>
   1403a:	4b93      	ldr	r3, [pc, #588]	; (14288 <morse_translate()+0x71c>)
   1403c:	681b      	ldr	r3, [r3, #0]
   1403e:	4a93      	ldr	r2, [pc, #588]	; (1428c <morse_translate()+0x720>)
   14040:	5cd3      	ldrb	r3, [r2, r3]
   14042:	2b26      	cmp	r3, #38	; 0x26
   14044:	d109      	bne.n	1405a <morse_translate()+0x4ee>
        translated[translated_count]='k';
   14046:	4b92      	ldr	r3, [pc, #584]	; (14290 <morse_translate()+0x724>)
   14048:	681b      	ldr	r3, [r3, #0]
   1404a:	4a92      	ldr	r2, [pc, #584]	; (14294 <morse_translate()+0x728>)
   1404c:	216b      	movs	r1, #107	; 0x6b
   1404e:	54d1      	strb	r1, [r2, r3]
        translated_count++;
   14050:	4b8f      	ldr	r3, [pc, #572]	; (14290 <morse_translate()+0x724>)
   14052:	681b      	ldr	r3, [r3, #0]
   14054:	3301      	adds	r3, #1
   14056:	4a8e      	ldr	r2, [pc, #568]	; (14290 <morse_translate()+0x724>)
   14058:	6013      	str	r3, [r2, #0]
        }
        if((morse[increment-5] =='&' || morse[increment-5] == '|' || morse[increment-5] == '?') && morse[increment-4] =='.' && morse[increment-3] == '-' && morse[increment-2] == '.' && morse[increment-1] == '.'  && morse[increment] == '&'){
   1405a:	4b8b      	ldr	r3, [pc, #556]	; (14288 <morse_translate()+0x71c>)
   1405c:	681b      	ldr	r3, [r3, #0]
   1405e:	3b05      	subs	r3, #5
   14060:	4a8a      	ldr	r2, [pc, #552]	; (1428c <morse_translate()+0x720>)
   14062:	5cd3      	ldrb	r3, [r2, r3]
   14064:	2b26      	cmp	r3, #38	; 0x26
   14066:	d00d      	beq.n	14084 <morse_translate()+0x518>
   14068:	4b87      	ldr	r3, [pc, #540]	; (14288 <morse_translate()+0x71c>)
   1406a:	681b      	ldr	r3, [r3, #0]
   1406c:	3b05      	subs	r3, #5
   1406e:	4a87      	ldr	r2, [pc, #540]	; (1428c <morse_translate()+0x720>)
   14070:	5cd3      	ldrb	r3, [r2, r3]
   14072:	2b7c      	cmp	r3, #124	; 0x7c
   14074:	d006      	beq.n	14084 <morse_translate()+0x518>
   14076:	4b84      	ldr	r3, [pc, #528]	; (14288 <morse_translate()+0x71c>)
   14078:	681b      	ldr	r3, [r3, #0]
   1407a:	3b05      	subs	r3, #5
   1407c:	4a83      	ldr	r2, [pc, #524]	; (1428c <morse_translate()+0x720>)
   1407e:	5cd3      	ldrb	r3, [r2, r3]
   14080:	2b3f      	cmp	r3, #63	; 0x3f
   14082:	d12b      	bne.n	140dc <morse_translate()+0x570>
   14084:	4b80      	ldr	r3, [pc, #512]	; (14288 <morse_translate()+0x71c>)
   14086:	681b      	ldr	r3, [r3, #0]
   14088:	3b04      	subs	r3, #4
   1408a:	4a80      	ldr	r2, [pc, #512]	; (1428c <morse_translate()+0x720>)
   1408c:	5cd3      	ldrb	r3, [r2, r3]
   1408e:	2b2e      	cmp	r3, #46	; 0x2e
   14090:	d124      	bne.n	140dc <morse_translate()+0x570>
   14092:	4b7d      	ldr	r3, [pc, #500]	; (14288 <morse_translate()+0x71c>)
   14094:	681b      	ldr	r3, [r3, #0]
   14096:	3b03      	subs	r3, #3
   14098:	4a7c      	ldr	r2, [pc, #496]	; (1428c <morse_translate()+0x720>)
   1409a:	5cd3      	ldrb	r3, [r2, r3]
   1409c:	2b2d      	cmp	r3, #45	; 0x2d
   1409e:	d11d      	bne.n	140dc <morse_translate()+0x570>
   140a0:	4b79      	ldr	r3, [pc, #484]	; (14288 <morse_translate()+0x71c>)
   140a2:	681b      	ldr	r3, [r3, #0]
   140a4:	3b02      	subs	r3, #2
   140a6:	4a79      	ldr	r2, [pc, #484]	; (1428c <morse_translate()+0x720>)
   140a8:	5cd3      	ldrb	r3, [r2, r3]
   140aa:	2b2e      	cmp	r3, #46	; 0x2e
   140ac:	d116      	bne.n	140dc <morse_translate()+0x570>
   140ae:	4b76      	ldr	r3, [pc, #472]	; (14288 <morse_translate()+0x71c>)
   140b0:	681b      	ldr	r3, [r3, #0]
   140b2:	3b01      	subs	r3, #1
   140b4:	4a75      	ldr	r2, [pc, #468]	; (1428c <morse_translate()+0x720>)
   140b6:	5cd3      	ldrb	r3, [r2, r3]
   140b8:	2b2e      	cmp	r3, #46	; 0x2e
   140ba:	d10f      	bne.n	140dc <morse_translate()+0x570>
   140bc:	4b72      	ldr	r3, [pc, #456]	; (14288 <morse_translate()+0x71c>)
   140be:	681b      	ldr	r3, [r3, #0]
   140c0:	4a72      	ldr	r2, [pc, #456]	; (1428c <morse_translate()+0x720>)
   140c2:	5cd3      	ldrb	r3, [r2, r3]
   140c4:	2b26      	cmp	r3, #38	; 0x26
   140c6:	d109      	bne.n	140dc <morse_translate()+0x570>
        translated[translated_count]='l';
   140c8:	4b71      	ldr	r3, [pc, #452]	; (14290 <morse_translate()+0x724>)
   140ca:	681b      	ldr	r3, [r3, #0]
   140cc:	4a71      	ldr	r2, [pc, #452]	; (14294 <morse_translate()+0x728>)
   140ce:	216c      	movs	r1, #108	; 0x6c
   140d0:	54d1      	strb	r1, [r2, r3]
        translated_count++;
   140d2:	4b6f      	ldr	r3, [pc, #444]	; (14290 <morse_translate()+0x724>)
   140d4:	681b      	ldr	r3, [r3, #0]
   140d6:	3301      	adds	r3, #1
   140d8:	4a6d      	ldr	r2, [pc, #436]	; (14290 <morse_translate()+0x724>)
   140da:	6013      	str	r3, [r2, #0]
        }
        if((morse[increment-3] =='&' || morse[increment-3] == '|' || morse[increment-3] == '?') && morse[increment-2] =='-' && morse[increment-1] == '-' && morse[increment] == '&'){
   140dc:	4b6a      	ldr	r3, [pc, #424]	; (14288 <morse_translate()+0x71c>)
   140de:	681b      	ldr	r3, [r3, #0]
   140e0:	3b03      	subs	r3, #3
   140e2:	4a6a      	ldr	r2, [pc, #424]	; (1428c <morse_translate()+0x720>)
   140e4:	5cd3      	ldrb	r3, [r2, r3]
   140e6:	2b26      	cmp	r3, #38	; 0x26
   140e8:	d00d      	beq.n	14106 <morse_translate()+0x59a>
   140ea:	4b67      	ldr	r3, [pc, #412]	; (14288 <morse_translate()+0x71c>)
   140ec:	681b      	ldr	r3, [r3, #0]
   140ee:	3b03      	subs	r3, #3
   140f0:	4a66      	ldr	r2, [pc, #408]	; (1428c <morse_translate()+0x720>)
   140f2:	5cd3      	ldrb	r3, [r2, r3]
   140f4:	2b7c      	cmp	r3, #124	; 0x7c
   140f6:	d006      	beq.n	14106 <morse_translate()+0x59a>
   140f8:	4b63      	ldr	r3, [pc, #396]	; (14288 <morse_translate()+0x71c>)
   140fa:	681b      	ldr	r3, [r3, #0]
   140fc:	3b03      	subs	r3, #3
   140fe:	4a63      	ldr	r2, [pc, #396]	; (1428c <morse_translate()+0x720>)
   14100:	5cd3      	ldrb	r3, [r2, r3]
   14102:	2b3f      	cmp	r3, #63	; 0x3f
   14104:	d11d      	bne.n	14142 <morse_translate()+0x5d6>
   14106:	4b60      	ldr	r3, [pc, #384]	; (14288 <morse_translate()+0x71c>)
   14108:	681b      	ldr	r3, [r3, #0]
   1410a:	3b02      	subs	r3, #2
   1410c:	4a5f      	ldr	r2, [pc, #380]	; (1428c <morse_translate()+0x720>)
   1410e:	5cd3      	ldrb	r3, [r2, r3]
   14110:	2b2d      	cmp	r3, #45	; 0x2d
   14112:	d116      	bne.n	14142 <morse_translate()+0x5d6>
   14114:	4b5c      	ldr	r3, [pc, #368]	; (14288 <morse_translate()+0x71c>)
   14116:	681b      	ldr	r3, [r3, #0]
   14118:	3b01      	subs	r3, #1
   1411a:	4a5c      	ldr	r2, [pc, #368]	; (1428c <morse_translate()+0x720>)
   1411c:	5cd3      	ldrb	r3, [r2, r3]
   1411e:	2b2d      	cmp	r3, #45	; 0x2d
   14120:	d10f      	bne.n	14142 <morse_translate()+0x5d6>
   14122:	4b59      	ldr	r3, [pc, #356]	; (14288 <morse_translate()+0x71c>)
   14124:	681b      	ldr	r3, [r3, #0]
   14126:	4a59      	ldr	r2, [pc, #356]	; (1428c <morse_translate()+0x720>)
   14128:	5cd3      	ldrb	r3, [r2, r3]
   1412a:	2b26      	cmp	r3, #38	; 0x26
   1412c:	d109      	bne.n	14142 <morse_translate()+0x5d6>
        translated[translated_count]='m';
   1412e:	4b58      	ldr	r3, [pc, #352]	; (14290 <morse_translate()+0x724>)
   14130:	681b      	ldr	r3, [r3, #0]
   14132:	4a58      	ldr	r2, [pc, #352]	; (14294 <morse_translate()+0x728>)
   14134:	216d      	movs	r1, #109	; 0x6d
   14136:	54d1      	strb	r1, [r2, r3]
        translated_count++;
   14138:	4b55      	ldr	r3, [pc, #340]	; (14290 <morse_translate()+0x724>)
   1413a:	681b      	ldr	r3, [r3, #0]
   1413c:	3301      	adds	r3, #1
   1413e:	4a54      	ldr	r2, [pc, #336]	; (14290 <morse_translate()+0x724>)
   14140:	6013      	str	r3, [r2, #0]
        }
        if((morse[increment-3] =='&' || morse[increment-3] == '|' || morse[increment-3] == '?') && morse[increment-2] =='-' && morse[increment-1] == '.' && morse[increment] == '&'){
   14142:	4b51      	ldr	r3, [pc, #324]	; (14288 <morse_translate()+0x71c>)
   14144:	681b      	ldr	r3, [r3, #0]
   14146:	3b03      	subs	r3, #3
   14148:	4a50      	ldr	r2, [pc, #320]	; (1428c <morse_translate()+0x720>)
   1414a:	5cd3      	ldrb	r3, [r2, r3]
   1414c:	2b26      	cmp	r3, #38	; 0x26
   1414e:	d00d      	beq.n	1416c <morse_translate()+0x600>
   14150:	4b4d      	ldr	r3, [pc, #308]	; (14288 <morse_translate()+0x71c>)
   14152:	681b      	ldr	r3, [r3, #0]
   14154:	3b03      	subs	r3, #3
   14156:	4a4d      	ldr	r2, [pc, #308]	; (1428c <morse_translate()+0x720>)
   14158:	5cd3      	ldrb	r3, [r2, r3]
   1415a:	2b7c      	cmp	r3, #124	; 0x7c
   1415c:	d006      	beq.n	1416c <morse_translate()+0x600>
   1415e:	4b4a      	ldr	r3, [pc, #296]	; (14288 <morse_translate()+0x71c>)
   14160:	681b      	ldr	r3, [r3, #0]
   14162:	3b03      	subs	r3, #3
   14164:	4a49      	ldr	r2, [pc, #292]	; (1428c <morse_translate()+0x720>)
   14166:	5cd3      	ldrb	r3, [r2, r3]
   14168:	2b3f      	cmp	r3, #63	; 0x3f
   1416a:	d11d      	bne.n	141a8 <morse_translate()+0x63c>
   1416c:	4b46      	ldr	r3, [pc, #280]	; (14288 <morse_translate()+0x71c>)
   1416e:	681b      	ldr	r3, [r3, #0]
   14170:	3b02      	subs	r3, #2
   14172:	4a46      	ldr	r2, [pc, #280]	; (1428c <morse_translate()+0x720>)
   14174:	5cd3      	ldrb	r3, [r2, r3]
   14176:	2b2d      	cmp	r3, #45	; 0x2d
   14178:	d116      	bne.n	141a8 <morse_translate()+0x63c>
   1417a:	4b43      	ldr	r3, [pc, #268]	; (14288 <morse_translate()+0x71c>)
   1417c:	681b      	ldr	r3, [r3, #0]
   1417e:	3b01      	subs	r3, #1
   14180:	4a42      	ldr	r2, [pc, #264]	; (1428c <morse_translate()+0x720>)
   14182:	5cd3      	ldrb	r3, [r2, r3]
   14184:	2b2e      	cmp	r3, #46	; 0x2e
   14186:	d10f      	bne.n	141a8 <morse_translate()+0x63c>
   14188:	4b3f      	ldr	r3, [pc, #252]	; (14288 <morse_translate()+0x71c>)
   1418a:	681b      	ldr	r3, [r3, #0]
   1418c:	4a3f      	ldr	r2, [pc, #252]	; (1428c <morse_translate()+0x720>)
   1418e:	5cd3      	ldrb	r3, [r2, r3]
   14190:	2b26      	cmp	r3, #38	; 0x26
   14192:	d109      	bne.n	141a8 <morse_translate()+0x63c>
        translated[translated_count]='n';
   14194:	4b3e      	ldr	r3, [pc, #248]	; (14290 <morse_translate()+0x724>)
   14196:	681b      	ldr	r3, [r3, #0]
   14198:	4a3e      	ldr	r2, [pc, #248]	; (14294 <morse_translate()+0x728>)
   1419a:	216e      	movs	r1, #110	; 0x6e
   1419c:	54d1      	strb	r1, [r2, r3]
        translated_count++;
   1419e:	4b3c      	ldr	r3, [pc, #240]	; (14290 <morse_translate()+0x724>)
   141a0:	681b      	ldr	r3, [r3, #0]
   141a2:	3301      	adds	r3, #1
   141a4:	4a3a      	ldr	r2, [pc, #232]	; (14290 <morse_translate()+0x724>)
   141a6:	6013      	str	r3, [r2, #0]
        }
        if((morse[increment-4] =='&' || morse[increment-4] == '|' || morse[increment-4] == '?') && morse[increment-3] == '-' && morse[increment-2] == '-' && morse[increment-1] == '-'  && morse[increment] == '&'){
   141a8:	4b37      	ldr	r3, [pc, #220]	; (14288 <morse_translate()+0x71c>)
   141aa:	681b      	ldr	r3, [r3, #0]
   141ac:	3b04      	subs	r3, #4
   141ae:	4a37      	ldr	r2, [pc, #220]	; (1428c <morse_translate()+0x720>)
   141b0:	5cd3      	ldrb	r3, [r2, r3]
   141b2:	2b26      	cmp	r3, #38	; 0x26
   141b4:	d00d      	beq.n	141d2 <morse_translate()+0x666>
   141b6:	4b34      	ldr	r3, [pc, #208]	; (14288 <morse_translate()+0x71c>)
   141b8:	681b      	ldr	r3, [r3, #0]
   141ba:	3b04      	subs	r3, #4
   141bc:	4a33      	ldr	r2, [pc, #204]	; (1428c <morse_translate()+0x720>)
   141be:	5cd3      	ldrb	r3, [r2, r3]
   141c0:	2b7c      	cmp	r3, #124	; 0x7c
   141c2:	d006      	beq.n	141d2 <morse_translate()+0x666>
   141c4:	4b30      	ldr	r3, [pc, #192]	; (14288 <morse_translate()+0x71c>)
   141c6:	681b      	ldr	r3, [r3, #0]
   141c8:	3b04      	subs	r3, #4
   141ca:	4a30      	ldr	r2, [pc, #192]	; (1428c <morse_translate()+0x720>)
   141cc:	5cd3      	ldrb	r3, [r2, r3]
   141ce:	2b3f      	cmp	r3, #63	; 0x3f
   141d0:	d124      	bne.n	1421c <morse_translate()+0x6b0>
   141d2:	4b2d      	ldr	r3, [pc, #180]	; (14288 <morse_translate()+0x71c>)
   141d4:	681b      	ldr	r3, [r3, #0]
   141d6:	3b03      	subs	r3, #3
   141d8:	4a2c      	ldr	r2, [pc, #176]	; (1428c <morse_translate()+0x720>)
   141da:	5cd3      	ldrb	r3, [r2, r3]
   141dc:	2b2d      	cmp	r3, #45	; 0x2d
   141de:	d11d      	bne.n	1421c <morse_translate()+0x6b0>
   141e0:	4b29      	ldr	r3, [pc, #164]	; (14288 <morse_translate()+0x71c>)
   141e2:	681b      	ldr	r3, [r3, #0]
   141e4:	3b02      	subs	r3, #2
   141e6:	4a29      	ldr	r2, [pc, #164]	; (1428c <morse_translate()+0x720>)
   141e8:	5cd3      	ldrb	r3, [r2, r3]
   141ea:	2b2d      	cmp	r3, #45	; 0x2d
   141ec:	d116      	bne.n	1421c <morse_translate()+0x6b0>
   141ee:	4b26      	ldr	r3, [pc, #152]	; (14288 <morse_translate()+0x71c>)
   141f0:	681b      	ldr	r3, [r3, #0]
   141f2:	3b01      	subs	r3, #1
   141f4:	4a25      	ldr	r2, [pc, #148]	; (1428c <morse_translate()+0x720>)
   141f6:	5cd3      	ldrb	r3, [r2, r3]
   141f8:	2b2d      	cmp	r3, #45	; 0x2d
   141fa:	d10f      	bne.n	1421c <morse_translate()+0x6b0>
   141fc:	4b22      	ldr	r3, [pc, #136]	; (14288 <morse_translate()+0x71c>)
   141fe:	681b      	ldr	r3, [r3, #0]
   14200:	4a22      	ldr	r2, [pc, #136]	; (1428c <morse_translate()+0x720>)
   14202:	5cd3      	ldrb	r3, [r2, r3]
   14204:	2b26      	cmp	r3, #38	; 0x26
   14206:	d109      	bne.n	1421c <morse_translate()+0x6b0>
        translated[translated_count]='o';
   14208:	4b21      	ldr	r3, [pc, #132]	; (14290 <morse_translate()+0x724>)
   1420a:	681b      	ldr	r3, [r3, #0]
   1420c:	4a21      	ldr	r2, [pc, #132]	; (14294 <morse_translate()+0x728>)
   1420e:	216f      	movs	r1, #111	; 0x6f
   14210:	54d1      	strb	r1, [r2, r3]
        translated_count++;
   14212:	4b1f      	ldr	r3, [pc, #124]	; (14290 <morse_translate()+0x724>)
   14214:	681b      	ldr	r3, [r3, #0]
   14216:	3301      	adds	r3, #1
   14218:	4a1d      	ldr	r2, [pc, #116]	; (14290 <morse_translate()+0x724>)
   1421a:	6013      	str	r3, [r2, #0]
        }
           if((morse[increment-5] =='&' || morse[increment-5] == '|' || morse[increment-5] == '?') && morse[increment-4] =='.' && morse[increment-3] == '-' && morse[increment-2] == '-' && morse[increment-1] == '.'  && morse[increment] == '&'){
   1421c:	4b1a      	ldr	r3, [pc, #104]	; (14288 <morse_translate()+0x71c>)
   1421e:	681b      	ldr	r3, [r3, #0]
   14220:	3b05      	subs	r3, #5
   14222:	4a1a      	ldr	r2, [pc, #104]	; (1428c <morse_translate()+0x720>)
   14224:	5cd3      	ldrb	r3, [r2, r3]
   14226:	2b26      	cmp	r3, #38	; 0x26
   14228:	d00d      	beq.n	14246 <morse_translate()+0x6da>
   1422a:	4b17      	ldr	r3, [pc, #92]	; (14288 <morse_translate()+0x71c>)
   1422c:	681b      	ldr	r3, [r3, #0]
   1422e:	3b05      	subs	r3, #5
   14230:	4a16      	ldr	r2, [pc, #88]	; (1428c <morse_translate()+0x720>)
   14232:	5cd3      	ldrb	r3, [r2, r3]
   14234:	2b7c      	cmp	r3, #124	; 0x7c
   14236:	d006      	beq.n	14246 <morse_translate()+0x6da>
   14238:	4b13      	ldr	r3, [pc, #76]	; (14288 <morse_translate()+0x71c>)
   1423a:	681b      	ldr	r3, [r3, #0]
   1423c:	3b05      	subs	r3, #5
   1423e:	4a13      	ldr	r2, [pc, #76]	; (1428c <morse_translate()+0x720>)
   14240:	5cd3      	ldrb	r3, [r2, r3]
   14242:	2b3f      	cmp	r3, #63	; 0x3f
   14244:	d134      	bne.n	142b0 <morse_translate()+0x744>
   14246:	4b10      	ldr	r3, [pc, #64]	; (14288 <morse_translate()+0x71c>)
   14248:	681b      	ldr	r3, [r3, #0]
   1424a:	3b04      	subs	r3, #4
   1424c:	4a0f      	ldr	r2, [pc, #60]	; (1428c <morse_translate()+0x720>)
   1424e:	5cd3      	ldrb	r3, [r2, r3]
   14250:	2b2e      	cmp	r3, #46	; 0x2e
   14252:	d12d      	bne.n	142b0 <morse_translate()+0x744>
   14254:	4b0c      	ldr	r3, [pc, #48]	; (14288 <morse_translate()+0x71c>)
   14256:	681b      	ldr	r3, [r3, #0]
   14258:	3b03      	subs	r3, #3
   1425a:	4a0c      	ldr	r2, [pc, #48]	; (1428c <morse_translate()+0x720>)
   1425c:	5cd3      	ldrb	r3, [r2, r3]
   1425e:	2b2d      	cmp	r3, #45	; 0x2d
   14260:	d126      	bne.n	142b0 <morse_translate()+0x744>
   14262:	4b09      	ldr	r3, [pc, #36]	; (14288 <morse_translate()+0x71c>)
   14264:	681b      	ldr	r3, [r3, #0]
   14266:	3b02      	subs	r3, #2
   14268:	4a08      	ldr	r2, [pc, #32]	; (1428c <morse_translate()+0x720>)
   1426a:	5cd3      	ldrb	r3, [r2, r3]
   1426c:	2b2d      	cmp	r3, #45	; 0x2d
   1426e:	d11f      	bne.n	142b0 <morse_translate()+0x744>
   14270:	4b05      	ldr	r3, [pc, #20]	; (14288 <morse_translate()+0x71c>)
   14272:	681b      	ldr	r3, [r3, #0]
   14274:	3b01      	subs	r3, #1
   14276:	4a05      	ldr	r2, [pc, #20]	; (1428c <morse_translate()+0x720>)
   14278:	5cd3      	ldrb	r3, [r2, r3]
   1427a:	2b2e      	cmp	r3, #46	; 0x2e
   1427c:	d118      	bne.n	142b0 <morse_translate()+0x744>
   1427e:	4b02      	ldr	r3, [pc, #8]	; (14288 <morse_translate()+0x71c>)
   14280:	681b      	ldr	r3, [r3, #0]
   14282:	4a02      	ldr	r2, [pc, #8]	; (1428c <morse_translate()+0x720>)
   14284:	5cd3      	ldrb	r3, [r2, r3]
   14286:	e007      	b.n	14298 <morse_translate()+0x72c>
   14288:	100007b8 	.word	0x100007b8
   1428c:	100007c0 	.word	0x100007c0
   14290:	10000478 	.word	0x10000478
   14294:	10000ba8 	.word	0x10000ba8
   14298:	2b26      	cmp	r3, #38	; 0x26
   1429a:	d109      	bne.n	142b0 <morse_translate()+0x744>
        translated[translated_count]='p';
   1429c:	4b92      	ldr	r3, [pc, #584]	; (144e8 <morse_translate()+0x97c>)
   1429e:	681b      	ldr	r3, [r3, #0]
   142a0:	4a92      	ldr	r2, [pc, #584]	; (144ec <morse_translate()+0x980>)
   142a2:	2170      	movs	r1, #112	; 0x70
   142a4:	54d1      	strb	r1, [r2, r3]
        translated_count++;
   142a6:	4b90      	ldr	r3, [pc, #576]	; (144e8 <morse_translate()+0x97c>)
   142a8:	681b      	ldr	r3, [r3, #0]
   142aa:	3301      	adds	r3, #1
   142ac:	4a8e      	ldr	r2, [pc, #568]	; (144e8 <morse_translate()+0x97c>)
   142ae:	6013      	str	r3, [r2, #0]
        }
          if((morse[increment-5] =='&' || morse[increment-5] == '|' || morse[increment-5] == '?') && morse[increment-4] =='-' && morse[increment-3] == '-' && morse[increment-2] == '.' && morse[increment-1] == '-'  && morse[increment] == '&'){
   142b0:	4b8f      	ldr	r3, [pc, #572]	; (144f0 <morse_translate()+0x984>)
   142b2:	681b      	ldr	r3, [r3, #0]
   142b4:	3b05      	subs	r3, #5
   142b6:	4a8f      	ldr	r2, [pc, #572]	; (144f4 <morse_translate()+0x988>)
   142b8:	5cd3      	ldrb	r3, [r2, r3]
   142ba:	2b26      	cmp	r3, #38	; 0x26
   142bc:	d00d      	beq.n	142da <morse_translate()+0x76e>
   142be:	4b8c      	ldr	r3, [pc, #560]	; (144f0 <morse_translate()+0x984>)
   142c0:	681b      	ldr	r3, [r3, #0]
   142c2:	3b05      	subs	r3, #5
   142c4:	4a8b      	ldr	r2, [pc, #556]	; (144f4 <morse_translate()+0x988>)
   142c6:	5cd3      	ldrb	r3, [r2, r3]
   142c8:	2b7c      	cmp	r3, #124	; 0x7c
   142ca:	d006      	beq.n	142da <morse_translate()+0x76e>
   142cc:	4b88      	ldr	r3, [pc, #544]	; (144f0 <morse_translate()+0x984>)
   142ce:	681b      	ldr	r3, [r3, #0]
   142d0:	3b05      	subs	r3, #5
   142d2:	4a88      	ldr	r2, [pc, #544]	; (144f4 <morse_translate()+0x988>)
   142d4:	5cd3      	ldrb	r3, [r2, r3]
   142d6:	2b3f      	cmp	r3, #63	; 0x3f
   142d8:	d12b      	bne.n	14332 <morse_translate()+0x7c6>
   142da:	4b85      	ldr	r3, [pc, #532]	; (144f0 <morse_translate()+0x984>)
   142dc:	681b      	ldr	r3, [r3, #0]
   142de:	3b04      	subs	r3, #4
   142e0:	4a84      	ldr	r2, [pc, #528]	; (144f4 <morse_translate()+0x988>)
   142e2:	5cd3      	ldrb	r3, [r2, r3]
   142e4:	2b2d      	cmp	r3, #45	; 0x2d
   142e6:	d124      	bne.n	14332 <morse_translate()+0x7c6>
   142e8:	4b81      	ldr	r3, [pc, #516]	; (144f0 <morse_translate()+0x984>)
   142ea:	681b      	ldr	r3, [r3, #0]
   142ec:	3b03      	subs	r3, #3
   142ee:	4a81      	ldr	r2, [pc, #516]	; (144f4 <morse_translate()+0x988>)
   142f0:	5cd3      	ldrb	r3, [r2, r3]
   142f2:	2b2d      	cmp	r3, #45	; 0x2d
   142f4:	d11d      	bne.n	14332 <morse_translate()+0x7c6>
   142f6:	4b7e      	ldr	r3, [pc, #504]	; (144f0 <morse_translate()+0x984>)
   142f8:	681b      	ldr	r3, [r3, #0]
   142fa:	3b02      	subs	r3, #2
   142fc:	4a7d      	ldr	r2, [pc, #500]	; (144f4 <morse_translate()+0x988>)
   142fe:	5cd3      	ldrb	r3, [r2, r3]
   14300:	2b2e      	cmp	r3, #46	; 0x2e
   14302:	d116      	bne.n	14332 <morse_translate()+0x7c6>
   14304:	4b7a      	ldr	r3, [pc, #488]	; (144f0 <morse_translate()+0x984>)
   14306:	681b      	ldr	r3, [r3, #0]
   14308:	3b01      	subs	r3, #1
   1430a:	4a7a      	ldr	r2, [pc, #488]	; (144f4 <morse_translate()+0x988>)
   1430c:	5cd3      	ldrb	r3, [r2, r3]
   1430e:	2b2d      	cmp	r3, #45	; 0x2d
   14310:	d10f      	bne.n	14332 <morse_translate()+0x7c6>
   14312:	4b77      	ldr	r3, [pc, #476]	; (144f0 <morse_translate()+0x984>)
   14314:	681b      	ldr	r3, [r3, #0]
   14316:	4a77      	ldr	r2, [pc, #476]	; (144f4 <morse_translate()+0x988>)
   14318:	5cd3      	ldrb	r3, [r2, r3]
   1431a:	2b26      	cmp	r3, #38	; 0x26
   1431c:	d109      	bne.n	14332 <morse_translate()+0x7c6>
        translated[translated_count]='q';
   1431e:	4b72      	ldr	r3, [pc, #456]	; (144e8 <morse_translate()+0x97c>)
   14320:	681b      	ldr	r3, [r3, #0]
   14322:	4a72      	ldr	r2, [pc, #456]	; (144ec <morse_translate()+0x980>)
   14324:	2171      	movs	r1, #113	; 0x71
   14326:	54d1      	strb	r1, [r2, r3]
        translated_count++;
   14328:	4b6f      	ldr	r3, [pc, #444]	; (144e8 <morse_translate()+0x97c>)
   1432a:	681b      	ldr	r3, [r3, #0]
   1432c:	3301      	adds	r3, #1
   1432e:	4a6e      	ldr	r2, [pc, #440]	; (144e8 <morse_translate()+0x97c>)
   14330:	6013      	str	r3, [r2, #0]
        }
         if((morse[increment-4] =='&' || morse[increment-4] == '|' || morse[increment-4] == '?') && morse[increment-3] == '.' && morse[increment-2] == '-' && morse[increment-1] == '.'  && morse[increment] == '&'){
   14332:	4b6f      	ldr	r3, [pc, #444]	; (144f0 <morse_translate()+0x984>)
   14334:	681b      	ldr	r3, [r3, #0]
   14336:	3b04      	subs	r3, #4
   14338:	4a6e      	ldr	r2, [pc, #440]	; (144f4 <morse_translate()+0x988>)
   1433a:	5cd3      	ldrb	r3, [r2, r3]
   1433c:	2b26      	cmp	r3, #38	; 0x26
   1433e:	d00d      	beq.n	1435c <morse_translate()+0x7f0>
   14340:	4b6b      	ldr	r3, [pc, #428]	; (144f0 <morse_translate()+0x984>)
   14342:	681b      	ldr	r3, [r3, #0]
   14344:	3b04      	subs	r3, #4
   14346:	4a6b      	ldr	r2, [pc, #428]	; (144f4 <morse_translate()+0x988>)
   14348:	5cd3      	ldrb	r3, [r2, r3]
   1434a:	2b7c      	cmp	r3, #124	; 0x7c
   1434c:	d006      	beq.n	1435c <morse_translate()+0x7f0>
   1434e:	4b68      	ldr	r3, [pc, #416]	; (144f0 <morse_translate()+0x984>)
   14350:	681b      	ldr	r3, [r3, #0]
   14352:	3b04      	subs	r3, #4
   14354:	4a67      	ldr	r2, [pc, #412]	; (144f4 <morse_translate()+0x988>)
   14356:	5cd3      	ldrb	r3, [r2, r3]
   14358:	2b3f      	cmp	r3, #63	; 0x3f
   1435a:	d124      	bne.n	143a6 <morse_translate()+0x83a>
   1435c:	4b64      	ldr	r3, [pc, #400]	; (144f0 <morse_translate()+0x984>)
   1435e:	681b      	ldr	r3, [r3, #0]
   14360:	3b03      	subs	r3, #3
   14362:	4a64      	ldr	r2, [pc, #400]	; (144f4 <morse_translate()+0x988>)
   14364:	5cd3      	ldrb	r3, [r2, r3]
   14366:	2b2e      	cmp	r3, #46	; 0x2e
   14368:	d11d      	bne.n	143a6 <morse_translate()+0x83a>
   1436a:	4b61      	ldr	r3, [pc, #388]	; (144f0 <morse_translate()+0x984>)
   1436c:	681b      	ldr	r3, [r3, #0]
   1436e:	3b02      	subs	r3, #2
   14370:	4a60      	ldr	r2, [pc, #384]	; (144f4 <morse_translate()+0x988>)
   14372:	5cd3      	ldrb	r3, [r2, r3]
   14374:	2b2d      	cmp	r3, #45	; 0x2d
   14376:	d116      	bne.n	143a6 <morse_translate()+0x83a>
   14378:	4b5d      	ldr	r3, [pc, #372]	; (144f0 <morse_translate()+0x984>)
   1437a:	681b      	ldr	r3, [r3, #0]
   1437c:	3b01      	subs	r3, #1
   1437e:	4a5d      	ldr	r2, [pc, #372]	; (144f4 <morse_translate()+0x988>)
   14380:	5cd3      	ldrb	r3, [r2, r3]
   14382:	2b2e      	cmp	r3, #46	; 0x2e
   14384:	d10f      	bne.n	143a6 <morse_translate()+0x83a>
   14386:	4b5a      	ldr	r3, [pc, #360]	; (144f0 <morse_translate()+0x984>)
   14388:	681b      	ldr	r3, [r3, #0]
   1438a:	4a5a      	ldr	r2, [pc, #360]	; (144f4 <morse_translate()+0x988>)
   1438c:	5cd3      	ldrb	r3, [r2, r3]
   1438e:	2b26      	cmp	r3, #38	; 0x26
   14390:	d109      	bne.n	143a6 <morse_translate()+0x83a>
        translated[translated_count]='r';
   14392:	4b55      	ldr	r3, [pc, #340]	; (144e8 <morse_translate()+0x97c>)
   14394:	681b      	ldr	r3, [r3, #0]
   14396:	4a55      	ldr	r2, [pc, #340]	; (144ec <morse_translate()+0x980>)
   14398:	2172      	movs	r1, #114	; 0x72
   1439a:	54d1      	strb	r1, [r2, r3]
        translated_count++;
   1439c:	4b52      	ldr	r3, [pc, #328]	; (144e8 <morse_translate()+0x97c>)
   1439e:	681b      	ldr	r3, [r3, #0]
   143a0:	3301      	adds	r3, #1
   143a2:	4a51      	ldr	r2, [pc, #324]	; (144e8 <morse_translate()+0x97c>)
   143a4:	6013      	str	r3, [r2, #0]
        }
         if((morse[increment-4] =='&' || morse[increment-4] == '|' || morse[increment-4] == '?') && morse[increment-3] == '.' && morse[increment-2] == '.' && morse[increment-1] == '.'  && morse[increment] == '&'){
   143a6:	4b52      	ldr	r3, [pc, #328]	; (144f0 <morse_translate()+0x984>)
   143a8:	681b      	ldr	r3, [r3, #0]
   143aa:	3b04      	subs	r3, #4
   143ac:	4a51      	ldr	r2, [pc, #324]	; (144f4 <morse_translate()+0x988>)
   143ae:	5cd3      	ldrb	r3, [r2, r3]
   143b0:	2b26      	cmp	r3, #38	; 0x26
   143b2:	d00d      	beq.n	143d0 <morse_translate()+0x864>
   143b4:	4b4e      	ldr	r3, [pc, #312]	; (144f0 <morse_translate()+0x984>)
   143b6:	681b      	ldr	r3, [r3, #0]
   143b8:	3b04      	subs	r3, #4
   143ba:	4a4e      	ldr	r2, [pc, #312]	; (144f4 <morse_translate()+0x988>)
   143bc:	5cd3      	ldrb	r3, [r2, r3]
   143be:	2b7c      	cmp	r3, #124	; 0x7c
   143c0:	d006      	beq.n	143d0 <morse_translate()+0x864>
   143c2:	4b4b      	ldr	r3, [pc, #300]	; (144f0 <morse_translate()+0x984>)
   143c4:	681b      	ldr	r3, [r3, #0]
   143c6:	3b04      	subs	r3, #4
   143c8:	4a4a      	ldr	r2, [pc, #296]	; (144f4 <morse_translate()+0x988>)
   143ca:	5cd3      	ldrb	r3, [r2, r3]
   143cc:	2b3f      	cmp	r3, #63	; 0x3f
   143ce:	d124      	bne.n	1441a <morse_translate()+0x8ae>
   143d0:	4b47      	ldr	r3, [pc, #284]	; (144f0 <morse_translate()+0x984>)
   143d2:	681b      	ldr	r3, [r3, #0]
   143d4:	3b03      	subs	r3, #3
   143d6:	4a47      	ldr	r2, [pc, #284]	; (144f4 <morse_translate()+0x988>)
   143d8:	5cd3      	ldrb	r3, [r2, r3]
   143da:	2b2e      	cmp	r3, #46	; 0x2e
   143dc:	d11d      	bne.n	1441a <morse_translate()+0x8ae>
   143de:	4b44      	ldr	r3, [pc, #272]	; (144f0 <morse_translate()+0x984>)
   143e0:	681b      	ldr	r3, [r3, #0]
   143e2:	3b02      	subs	r3, #2
   143e4:	4a43      	ldr	r2, [pc, #268]	; (144f4 <morse_translate()+0x988>)
   143e6:	5cd3      	ldrb	r3, [r2, r3]
   143e8:	2b2e      	cmp	r3, #46	; 0x2e
   143ea:	d116      	bne.n	1441a <morse_translate()+0x8ae>
   143ec:	4b40      	ldr	r3, [pc, #256]	; (144f0 <morse_translate()+0x984>)
   143ee:	681b      	ldr	r3, [r3, #0]
   143f0:	3b01      	subs	r3, #1
   143f2:	4a40      	ldr	r2, [pc, #256]	; (144f4 <morse_translate()+0x988>)
   143f4:	5cd3      	ldrb	r3, [r2, r3]
   143f6:	2b2e      	cmp	r3, #46	; 0x2e
   143f8:	d10f      	bne.n	1441a <morse_translate()+0x8ae>
   143fa:	4b3d      	ldr	r3, [pc, #244]	; (144f0 <morse_translate()+0x984>)
   143fc:	681b      	ldr	r3, [r3, #0]
   143fe:	4a3d      	ldr	r2, [pc, #244]	; (144f4 <morse_translate()+0x988>)
   14400:	5cd3      	ldrb	r3, [r2, r3]
   14402:	2b26      	cmp	r3, #38	; 0x26
   14404:	d109      	bne.n	1441a <morse_translate()+0x8ae>
        translated[translated_count]='s';
   14406:	4b38      	ldr	r3, [pc, #224]	; (144e8 <morse_translate()+0x97c>)
   14408:	681b      	ldr	r3, [r3, #0]
   1440a:	4a38      	ldr	r2, [pc, #224]	; (144ec <morse_translate()+0x980>)
   1440c:	2173      	movs	r1, #115	; 0x73
   1440e:	54d1      	strb	r1, [r2, r3]
        translated_count++;
   14410:	4b35      	ldr	r3, [pc, #212]	; (144e8 <morse_translate()+0x97c>)
   14412:	681b      	ldr	r3, [r3, #0]
   14414:	3301      	adds	r3, #1
   14416:	4a34      	ldr	r2, [pc, #208]	; (144e8 <morse_translate()+0x97c>)
   14418:	6013      	str	r3, [r2, #0]
        }
        if((morse[increment-2] =='&' || morse[increment-2] == '?' || morse[increment-2] == '|') && morse[increment-1] =='-'&& morse[increment] =='&')
   1441a:	4b35      	ldr	r3, [pc, #212]	; (144f0 <morse_translate()+0x984>)
   1441c:	681b      	ldr	r3, [r3, #0]
   1441e:	3b02      	subs	r3, #2
   14420:	4a34      	ldr	r2, [pc, #208]	; (144f4 <morse_translate()+0x988>)
   14422:	5cd3      	ldrb	r3, [r2, r3]
   14424:	2b26      	cmp	r3, #38	; 0x26
   14426:	d00d      	beq.n	14444 <morse_translate()+0x8d8>
   14428:	4b31      	ldr	r3, [pc, #196]	; (144f0 <morse_translate()+0x984>)
   1442a:	681b      	ldr	r3, [r3, #0]
   1442c:	3b02      	subs	r3, #2
   1442e:	4a31      	ldr	r2, [pc, #196]	; (144f4 <morse_translate()+0x988>)
   14430:	5cd3      	ldrb	r3, [r2, r3]
   14432:	2b3f      	cmp	r3, #63	; 0x3f
   14434:	d006      	beq.n	14444 <morse_translate()+0x8d8>
   14436:	4b2e      	ldr	r3, [pc, #184]	; (144f0 <morse_translate()+0x984>)
   14438:	681b      	ldr	r3, [r3, #0]
   1443a:	3b02      	subs	r3, #2
   1443c:	4a2d      	ldr	r2, [pc, #180]	; (144f4 <morse_translate()+0x988>)
   1443e:	5cd3      	ldrb	r3, [r2, r3]
   14440:	2b7c      	cmp	r3, #124	; 0x7c
   14442:	d116      	bne.n	14472 <morse_translate()+0x906>
   14444:	4b2a      	ldr	r3, [pc, #168]	; (144f0 <morse_translate()+0x984>)
   14446:	681b      	ldr	r3, [r3, #0]
   14448:	3b01      	subs	r3, #1
   1444a:	4a2a      	ldr	r2, [pc, #168]	; (144f4 <morse_translate()+0x988>)
   1444c:	5cd3      	ldrb	r3, [r2, r3]
   1444e:	2b2d      	cmp	r3, #45	; 0x2d
   14450:	d10f      	bne.n	14472 <morse_translate()+0x906>
   14452:	4b27      	ldr	r3, [pc, #156]	; (144f0 <morse_translate()+0x984>)
   14454:	681b      	ldr	r3, [r3, #0]
   14456:	4a27      	ldr	r2, [pc, #156]	; (144f4 <morse_translate()+0x988>)
   14458:	5cd3      	ldrb	r3, [r2, r3]
   1445a:	2b26      	cmp	r3, #38	; 0x26
   1445c:	d109      	bne.n	14472 <morse_translate()+0x906>
        {
         translated[translated_count]='t';
   1445e:	4b22      	ldr	r3, [pc, #136]	; (144e8 <morse_translate()+0x97c>)
   14460:	681b      	ldr	r3, [r3, #0]
   14462:	4a22      	ldr	r2, [pc, #136]	; (144ec <morse_translate()+0x980>)
   14464:	2174      	movs	r1, #116	; 0x74
   14466:	54d1      	strb	r1, [r2, r3]
         translated_count++;
   14468:	4b1f      	ldr	r3, [pc, #124]	; (144e8 <morse_translate()+0x97c>)
   1446a:	681b      	ldr	r3, [r3, #0]
   1446c:	3301      	adds	r3, #1
   1446e:	4a1e      	ldr	r2, [pc, #120]	; (144e8 <morse_translate()+0x97c>)
   14470:	6013      	str	r3, [r2, #0]
        }
         if((morse[increment-4] =='&' || morse[increment-4] == '|' || morse[increment-4] == '?') && morse[increment-3] == '.' && morse[increment-2] == '.' && morse[increment-1] == '-'  && morse[increment] == '&'){
   14472:	4b1f      	ldr	r3, [pc, #124]	; (144f0 <morse_translate()+0x984>)
   14474:	681b      	ldr	r3, [r3, #0]
   14476:	3b04      	subs	r3, #4
   14478:	4a1e      	ldr	r2, [pc, #120]	; (144f4 <morse_translate()+0x988>)
   1447a:	5cd3      	ldrb	r3, [r2, r3]
   1447c:	2b26      	cmp	r3, #38	; 0x26
   1447e:	d00d      	beq.n	1449c <morse_translate()+0x930>
   14480:	4b1b      	ldr	r3, [pc, #108]	; (144f0 <morse_translate()+0x984>)
   14482:	681b      	ldr	r3, [r3, #0]
   14484:	3b04      	subs	r3, #4
   14486:	4a1b      	ldr	r2, [pc, #108]	; (144f4 <morse_translate()+0x988>)
   14488:	5cd3      	ldrb	r3, [r2, r3]
   1448a:	2b7c      	cmp	r3, #124	; 0x7c
   1448c:	d006      	beq.n	1449c <morse_translate()+0x930>
   1448e:	4b18      	ldr	r3, [pc, #96]	; (144f0 <morse_translate()+0x984>)
   14490:	681b      	ldr	r3, [r3, #0]
   14492:	3b04      	subs	r3, #4
   14494:	4a17      	ldr	r2, [pc, #92]	; (144f4 <morse_translate()+0x988>)
   14496:	5cd3      	ldrb	r3, [r2, r3]
   14498:	2b3f      	cmp	r3, #63	; 0x3f
   1449a:	d12d      	bne.n	144f8 <morse_translate()+0x98c>
   1449c:	4b14      	ldr	r3, [pc, #80]	; (144f0 <morse_translate()+0x984>)
   1449e:	681b      	ldr	r3, [r3, #0]
   144a0:	3b03      	subs	r3, #3
   144a2:	4a14      	ldr	r2, [pc, #80]	; (144f4 <morse_translate()+0x988>)
   144a4:	5cd3      	ldrb	r3, [r2, r3]
   144a6:	2b2e      	cmp	r3, #46	; 0x2e
   144a8:	d126      	bne.n	144f8 <morse_translate()+0x98c>
   144aa:	4b11      	ldr	r3, [pc, #68]	; (144f0 <morse_translate()+0x984>)
   144ac:	681b      	ldr	r3, [r3, #0]
   144ae:	3b02      	subs	r3, #2
   144b0:	4a10      	ldr	r2, [pc, #64]	; (144f4 <morse_translate()+0x988>)
   144b2:	5cd3      	ldrb	r3, [r2, r3]
   144b4:	2b2e      	cmp	r3, #46	; 0x2e
   144b6:	d11f      	bne.n	144f8 <morse_translate()+0x98c>
   144b8:	4b0d      	ldr	r3, [pc, #52]	; (144f0 <morse_translate()+0x984>)
   144ba:	681b      	ldr	r3, [r3, #0]
   144bc:	3b01      	subs	r3, #1
   144be:	4a0d      	ldr	r2, [pc, #52]	; (144f4 <morse_translate()+0x988>)
   144c0:	5cd3      	ldrb	r3, [r2, r3]
   144c2:	2b2d      	cmp	r3, #45	; 0x2d
   144c4:	d118      	bne.n	144f8 <morse_translate()+0x98c>
   144c6:	4b0a      	ldr	r3, [pc, #40]	; (144f0 <morse_translate()+0x984>)
   144c8:	681b      	ldr	r3, [r3, #0]
   144ca:	4a0a      	ldr	r2, [pc, #40]	; (144f4 <morse_translate()+0x988>)
   144cc:	5cd3      	ldrb	r3, [r2, r3]
   144ce:	2b26      	cmp	r3, #38	; 0x26
   144d0:	d112      	bne.n	144f8 <morse_translate()+0x98c>
        translated[translated_count]='u';
   144d2:	4b05      	ldr	r3, [pc, #20]	; (144e8 <morse_translate()+0x97c>)
   144d4:	681b      	ldr	r3, [r3, #0]
   144d6:	4a05      	ldr	r2, [pc, #20]	; (144ec <morse_translate()+0x980>)
   144d8:	2175      	movs	r1, #117	; 0x75
   144da:	54d1      	strb	r1, [r2, r3]
        translated_count++;
   144dc:	4b02      	ldr	r3, [pc, #8]	; (144e8 <morse_translate()+0x97c>)
   144de:	681b      	ldr	r3, [r3, #0]
   144e0:	3301      	adds	r3, #1
   144e2:	4a01      	ldr	r2, [pc, #4]	; (144e8 <morse_translate()+0x97c>)
   144e4:	6013      	str	r3, [r2, #0]
   144e6:	e007      	b.n	144f8 <morse_translate()+0x98c>
   144e8:	10000478 	.word	0x10000478
   144ec:	10000ba8 	.word	0x10000ba8
   144f0:	100007b8 	.word	0x100007b8
   144f4:	100007c0 	.word	0x100007c0
        }
            if((morse[increment-5] =='&' || morse[increment-5] == '|' || morse[increment-5] == '?') && morse[increment-4] =='.' && morse[increment-3] == '.' && morse[increment-2] == '.' && morse[increment-1] == '-'  && morse[increment] == '&'){
   144f8:	4b93      	ldr	r3, [pc, #588]	; (14748 <morse_translate()+0xbdc>)
   144fa:	681b      	ldr	r3, [r3, #0]
   144fc:	3b05      	subs	r3, #5
   144fe:	4a93      	ldr	r2, [pc, #588]	; (1474c <morse_translate()+0xbe0>)
   14500:	5cd3      	ldrb	r3, [r2, r3]
   14502:	2b26      	cmp	r3, #38	; 0x26
   14504:	d00d      	beq.n	14522 <morse_translate()+0x9b6>
   14506:	4b90      	ldr	r3, [pc, #576]	; (14748 <morse_translate()+0xbdc>)
   14508:	681b      	ldr	r3, [r3, #0]
   1450a:	3b05      	subs	r3, #5
   1450c:	4a8f      	ldr	r2, [pc, #572]	; (1474c <morse_translate()+0xbe0>)
   1450e:	5cd3      	ldrb	r3, [r2, r3]
   14510:	2b7c      	cmp	r3, #124	; 0x7c
   14512:	d006      	beq.n	14522 <morse_translate()+0x9b6>
   14514:	4b8c      	ldr	r3, [pc, #560]	; (14748 <morse_translate()+0xbdc>)
   14516:	681b      	ldr	r3, [r3, #0]
   14518:	3b05      	subs	r3, #5
   1451a:	4a8c      	ldr	r2, [pc, #560]	; (1474c <morse_translate()+0xbe0>)
   1451c:	5cd3      	ldrb	r3, [r2, r3]
   1451e:	2b3f      	cmp	r3, #63	; 0x3f
   14520:	d12b      	bne.n	1457a <morse_translate()+0xa0e>
   14522:	4b89      	ldr	r3, [pc, #548]	; (14748 <morse_translate()+0xbdc>)
   14524:	681b      	ldr	r3, [r3, #0]
   14526:	3b04      	subs	r3, #4
   14528:	4a88      	ldr	r2, [pc, #544]	; (1474c <morse_translate()+0xbe0>)
   1452a:	5cd3      	ldrb	r3, [r2, r3]
   1452c:	2b2e      	cmp	r3, #46	; 0x2e
   1452e:	d124      	bne.n	1457a <morse_translate()+0xa0e>
   14530:	4b85      	ldr	r3, [pc, #532]	; (14748 <morse_translate()+0xbdc>)
   14532:	681b      	ldr	r3, [r3, #0]
   14534:	3b03      	subs	r3, #3
   14536:	4a85      	ldr	r2, [pc, #532]	; (1474c <morse_translate()+0xbe0>)
   14538:	5cd3      	ldrb	r3, [r2, r3]
   1453a:	2b2e      	cmp	r3, #46	; 0x2e
   1453c:	d11d      	bne.n	1457a <morse_translate()+0xa0e>
   1453e:	4b82      	ldr	r3, [pc, #520]	; (14748 <morse_translate()+0xbdc>)
   14540:	681b      	ldr	r3, [r3, #0]
   14542:	3b02      	subs	r3, #2
   14544:	4a81      	ldr	r2, [pc, #516]	; (1474c <morse_translate()+0xbe0>)
   14546:	5cd3      	ldrb	r3, [r2, r3]
   14548:	2b2e      	cmp	r3, #46	; 0x2e
   1454a:	d116      	bne.n	1457a <morse_translate()+0xa0e>
   1454c:	4b7e      	ldr	r3, [pc, #504]	; (14748 <morse_translate()+0xbdc>)
   1454e:	681b      	ldr	r3, [r3, #0]
   14550:	3b01      	subs	r3, #1
   14552:	4a7e      	ldr	r2, [pc, #504]	; (1474c <morse_translate()+0xbe0>)
   14554:	5cd3      	ldrb	r3, [r2, r3]
   14556:	2b2d      	cmp	r3, #45	; 0x2d
   14558:	d10f      	bne.n	1457a <morse_translate()+0xa0e>
   1455a:	4b7b      	ldr	r3, [pc, #492]	; (14748 <morse_translate()+0xbdc>)
   1455c:	681b      	ldr	r3, [r3, #0]
   1455e:	4a7b      	ldr	r2, [pc, #492]	; (1474c <morse_translate()+0xbe0>)
   14560:	5cd3      	ldrb	r3, [r2, r3]
   14562:	2b26      	cmp	r3, #38	; 0x26
   14564:	d109      	bne.n	1457a <morse_translate()+0xa0e>
        translated[translated_count]='v';
   14566:	4b7a      	ldr	r3, [pc, #488]	; (14750 <morse_translate()+0xbe4>)
   14568:	681b      	ldr	r3, [r3, #0]
   1456a:	4a7a      	ldr	r2, [pc, #488]	; (14754 <morse_translate()+0xbe8>)
   1456c:	2176      	movs	r1, #118	; 0x76
   1456e:	54d1      	strb	r1, [r2, r3]
        translated_count++;
   14570:	4b77      	ldr	r3, [pc, #476]	; (14750 <morse_translate()+0xbe4>)
   14572:	681b      	ldr	r3, [r3, #0]
   14574:	3301      	adds	r3, #1
   14576:	4a76      	ldr	r2, [pc, #472]	; (14750 <morse_translate()+0xbe4>)
   14578:	6013      	str	r3, [r2, #0]
        }
         if((morse[increment-4] =='&' || morse[increment-4] == '|' || morse[increment-4] == '?') && morse[increment-3] == '.' && morse[increment-2] == '-' && morse[increment-1] == '-'  && morse[increment] == '&'){
   1457a:	4b73      	ldr	r3, [pc, #460]	; (14748 <morse_translate()+0xbdc>)
   1457c:	681b      	ldr	r3, [r3, #0]
   1457e:	3b04      	subs	r3, #4
   14580:	4a72      	ldr	r2, [pc, #456]	; (1474c <morse_translate()+0xbe0>)
   14582:	5cd3      	ldrb	r3, [r2, r3]
   14584:	2b26      	cmp	r3, #38	; 0x26
   14586:	d00d      	beq.n	145a4 <morse_translate()+0xa38>
   14588:	4b6f      	ldr	r3, [pc, #444]	; (14748 <morse_translate()+0xbdc>)
   1458a:	681b      	ldr	r3, [r3, #0]
   1458c:	3b04      	subs	r3, #4
   1458e:	4a6f      	ldr	r2, [pc, #444]	; (1474c <morse_translate()+0xbe0>)
   14590:	5cd3      	ldrb	r3, [r2, r3]
   14592:	2b7c      	cmp	r3, #124	; 0x7c
   14594:	d006      	beq.n	145a4 <morse_translate()+0xa38>
   14596:	4b6c      	ldr	r3, [pc, #432]	; (14748 <morse_translate()+0xbdc>)
   14598:	681b      	ldr	r3, [r3, #0]
   1459a:	3b04      	subs	r3, #4
   1459c:	4a6b      	ldr	r2, [pc, #428]	; (1474c <morse_translate()+0xbe0>)
   1459e:	5cd3      	ldrb	r3, [r2, r3]
   145a0:	2b3f      	cmp	r3, #63	; 0x3f
   145a2:	d124      	bne.n	145ee <morse_translate()+0xa82>
   145a4:	4b68      	ldr	r3, [pc, #416]	; (14748 <morse_translate()+0xbdc>)
   145a6:	681b      	ldr	r3, [r3, #0]
   145a8:	3b03      	subs	r3, #3
   145aa:	4a68      	ldr	r2, [pc, #416]	; (1474c <morse_translate()+0xbe0>)
   145ac:	5cd3      	ldrb	r3, [r2, r3]
   145ae:	2b2e      	cmp	r3, #46	; 0x2e
   145b0:	d11d      	bne.n	145ee <morse_translate()+0xa82>
   145b2:	4b65      	ldr	r3, [pc, #404]	; (14748 <morse_translate()+0xbdc>)
   145b4:	681b      	ldr	r3, [r3, #0]
   145b6:	3b02      	subs	r3, #2
   145b8:	4a64      	ldr	r2, [pc, #400]	; (1474c <morse_translate()+0xbe0>)
   145ba:	5cd3      	ldrb	r3, [r2, r3]
   145bc:	2b2d      	cmp	r3, #45	; 0x2d
   145be:	d116      	bne.n	145ee <morse_translate()+0xa82>
   145c0:	4b61      	ldr	r3, [pc, #388]	; (14748 <morse_translate()+0xbdc>)
   145c2:	681b      	ldr	r3, [r3, #0]
   145c4:	3b01      	subs	r3, #1
   145c6:	4a61      	ldr	r2, [pc, #388]	; (1474c <morse_translate()+0xbe0>)
   145c8:	5cd3      	ldrb	r3, [r2, r3]
   145ca:	2b2d      	cmp	r3, #45	; 0x2d
   145cc:	d10f      	bne.n	145ee <morse_translate()+0xa82>
   145ce:	4b5e      	ldr	r3, [pc, #376]	; (14748 <morse_translate()+0xbdc>)
   145d0:	681b      	ldr	r3, [r3, #0]
   145d2:	4a5e      	ldr	r2, [pc, #376]	; (1474c <morse_translate()+0xbe0>)
   145d4:	5cd3      	ldrb	r3, [r2, r3]
   145d6:	2b26      	cmp	r3, #38	; 0x26
   145d8:	d109      	bne.n	145ee <morse_translate()+0xa82>
        translated[translated_count]='w';
   145da:	4b5d      	ldr	r3, [pc, #372]	; (14750 <morse_translate()+0xbe4>)
   145dc:	681b      	ldr	r3, [r3, #0]
   145de:	4a5d      	ldr	r2, [pc, #372]	; (14754 <morse_translate()+0xbe8>)
   145e0:	2177      	movs	r1, #119	; 0x77
   145e2:	54d1      	strb	r1, [r2, r3]
        translated_count++;
   145e4:	4b5a      	ldr	r3, [pc, #360]	; (14750 <morse_translate()+0xbe4>)
   145e6:	681b      	ldr	r3, [r3, #0]
   145e8:	3301      	adds	r3, #1
   145ea:	4a59      	ldr	r2, [pc, #356]	; (14750 <morse_translate()+0xbe4>)
   145ec:	6013      	str	r3, [r2, #0]
        }
            if((morse[increment-5] =='&' || morse[increment-5] == '|' || morse[increment-5] == '?') && morse[increment-4] =='-' && morse[increment-3] == '.' && morse[increment-2] == '.' && morse[increment-1] == '-'  && morse[increment] == '&'){
   145ee:	4b56      	ldr	r3, [pc, #344]	; (14748 <morse_translate()+0xbdc>)
   145f0:	681b      	ldr	r3, [r3, #0]
   145f2:	3b05      	subs	r3, #5
   145f4:	4a55      	ldr	r2, [pc, #340]	; (1474c <morse_translate()+0xbe0>)
   145f6:	5cd3      	ldrb	r3, [r2, r3]
   145f8:	2b26      	cmp	r3, #38	; 0x26
   145fa:	d00d      	beq.n	14618 <morse_translate()+0xaac>
   145fc:	4b52      	ldr	r3, [pc, #328]	; (14748 <morse_translate()+0xbdc>)
   145fe:	681b      	ldr	r3, [r3, #0]
   14600:	3b05      	subs	r3, #5
   14602:	4a52      	ldr	r2, [pc, #328]	; (1474c <morse_translate()+0xbe0>)
   14604:	5cd3      	ldrb	r3, [r2, r3]
   14606:	2b7c      	cmp	r3, #124	; 0x7c
   14608:	d006      	beq.n	14618 <morse_translate()+0xaac>
   1460a:	4b4f      	ldr	r3, [pc, #316]	; (14748 <morse_translate()+0xbdc>)
   1460c:	681b      	ldr	r3, [r3, #0]
   1460e:	3b05      	subs	r3, #5
   14610:	4a4e      	ldr	r2, [pc, #312]	; (1474c <morse_translate()+0xbe0>)
   14612:	5cd3      	ldrb	r3, [r2, r3]
   14614:	2b3f      	cmp	r3, #63	; 0x3f
   14616:	d12b      	bne.n	14670 <morse_translate()+0xb04>
   14618:	4b4b      	ldr	r3, [pc, #300]	; (14748 <morse_translate()+0xbdc>)
   1461a:	681b      	ldr	r3, [r3, #0]
   1461c:	3b04      	subs	r3, #4
   1461e:	4a4b      	ldr	r2, [pc, #300]	; (1474c <morse_translate()+0xbe0>)
   14620:	5cd3      	ldrb	r3, [r2, r3]
   14622:	2b2d      	cmp	r3, #45	; 0x2d
   14624:	d124      	bne.n	14670 <morse_translate()+0xb04>
   14626:	4b48      	ldr	r3, [pc, #288]	; (14748 <morse_translate()+0xbdc>)
   14628:	681b      	ldr	r3, [r3, #0]
   1462a:	3b03      	subs	r3, #3
   1462c:	4a47      	ldr	r2, [pc, #284]	; (1474c <morse_translate()+0xbe0>)
   1462e:	5cd3      	ldrb	r3, [r2, r3]
   14630:	2b2e      	cmp	r3, #46	; 0x2e
   14632:	d11d      	bne.n	14670 <morse_translate()+0xb04>
   14634:	4b44      	ldr	r3, [pc, #272]	; (14748 <morse_translate()+0xbdc>)
   14636:	681b      	ldr	r3, [r3, #0]
   14638:	3b02      	subs	r3, #2
   1463a:	4a44      	ldr	r2, [pc, #272]	; (1474c <morse_translate()+0xbe0>)
   1463c:	5cd3      	ldrb	r3, [r2, r3]
   1463e:	2b2e      	cmp	r3, #46	; 0x2e
   14640:	d116      	bne.n	14670 <morse_translate()+0xb04>
   14642:	4b41      	ldr	r3, [pc, #260]	; (14748 <morse_translate()+0xbdc>)
   14644:	681b      	ldr	r3, [r3, #0]
   14646:	3b01      	subs	r3, #1
   14648:	4a40      	ldr	r2, [pc, #256]	; (1474c <morse_translate()+0xbe0>)
   1464a:	5cd3      	ldrb	r3, [r2, r3]
   1464c:	2b2d      	cmp	r3, #45	; 0x2d
   1464e:	d10f      	bne.n	14670 <morse_translate()+0xb04>
   14650:	4b3d      	ldr	r3, [pc, #244]	; (14748 <morse_translate()+0xbdc>)
   14652:	681b      	ldr	r3, [r3, #0]
   14654:	4a3d      	ldr	r2, [pc, #244]	; (1474c <morse_translate()+0xbe0>)
   14656:	5cd3      	ldrb	r3, [r2, r3]
   14658:	2b26      	cmp	r3, #38	; 0x26
   1465a:	d109      	bne.n	14670 <morse_translate()+0xb04>
        translated[translated_count]='x';
   1465c:	4b3c      	ldr	r3, [pc, #240]	; (14750 <morse_translate()+0xbe4>)
   1465e:	681b      	ldr	r3, [r3, #0]
   14660:	4a3c      	ldr	r2, [pc, #240]	; (14754 <morse_translate()+0xbe8>)
   14662:	2178      	movs	r1, #120	; 0x78
   14664:	54d1      	strb	r1, [r2, r3]
        translated_count++;
   14666:	4b3a      	ldr	r3, [pc, #232]	; (14750 <morse_translate()+0xbe4>)
   14668:	681b      	ldr	r3, [r3, #0]
   1466a:	3301      	adds	r3, #1
   1466c:	4a38      	ldr	r2, [pc, #224]	; (14750 <morse_translate()+0xbe4>)
   1466e:	6013      	str	r3, [r2, #0]
        }
            if((morse[increment-5] =='&' || morse[increment-5] == '|' || morse[increment-5] == '?') && morse[increment-4] =='-' && morse[increment-3] == '.' && morse[increment-2] == '-' && morse[increment-1] == '-'  && morse[increment] == '&'){
   14670:	4b35      	ldr	r3, [pc, #212]	; (14748 <morse_translate()+0xbdc>)
   14672:	681b      	ldr	r3, [r3, #0]
   14674:	3b05      	subs	r3, #5
   14676:	4a35      	ldr	r2, [pc, #212]	; (1474c <morse_translate()+0xbe0>)
   14678:	5cd3      	ldrb	r3, [r2, r3]
   1467a:	2b26      	cmp	r3, #38	; 0x26
   1467c:	d00d      	beq.n	1469a <morse_translate()+0xb2e>
   1467e:	4b32      	ldr	r3, [pc, #200]	; (14748 <morse_translate()+0xbdc>)
   14680:	681b      	ldr	r3, [r3, #0]
   14682:	3b05      	subs	r3, #5
   14684:	4a31      	ldr	r2, [pc, #196]	; (1474c <morse_translate()+0xbe0>)
   14686:	5cd3      	ldrb	r3, [r2, r3]
   14688:	2b7c      	cmp	r3, #124	; 0x7c
   1468a:	d006      	beq.n	1469a <morse_translate()+0xb2e>
   1468c:	4b2e      	ldr	r3, [pc, #184]	; (14748 <morse_translate()+0xbdc>)
   1468e:	681b      	ldr	r3, [r3, #0]
   14690:	3b05      	subs	r3, #5
   14692:	4a2e      	ldr	r2, [pc, #184]	; (1474c <morse_translate()+0xbe0>)
   14694:	5cd3      	ldrb	r3, [r2, r3]
   14696:	2b3f      	cmp	r3, #63	; 0x3f
   14698:	d12b      	bne.n	146f2 <morse_translate()+0xb86>
   1469a:	4b2b      	ldr	r3, [pc, #172]	; (14748 <morse_translate()+0xbdc>)
   1469c:	681b      	ldr	r3, [r3, #0]
   1469e:	3b04      	subs	r3, #4
   146a0:	4a2a      	ldr	r2, [pc, #168]	; (1474c <morse_translate()+0xbe0>)
   146a2:	5cd3      	ldrb	r3, [r2, r3]
   146a4:	2b2d      	cmp	r3, #45	; 0x2d
   146a6:	d124      	bne.n	146f2 <morse_translate()+0xb86>
   146a8:	4b27      	ldr	r3, [pc, #156]	; (14748 <morse_translate()+0xbdc>)
   146aa:	681b      	ldr	r3, [r3, #0]
   146ac:	3b03      	subs	r3, #3
   146ae:	4a27      	ldr	r2, [pc, #156]	; (1474c <morse_translate()+0xbe0>)
   146b0:	5cd3      	ldrb	r3, [r2, r3]
   146b2:	2b2e      	cmp	r3, #46	; 0x2e
   146b4:	d11d      	bne.n	146f2 <morse_translate()+0xb86>
   146b6:	4b24      	ldr	r3, [pc, #144]	; (14748 <morse_translate()+0xbdc>)
   146b8:	681b      	ldr	r3, [r3, #0]
   146ba:	3b02      	subs	r3, #2
   146bc:	4a23      	ldr	r2, [pc, #140]	; (1474c <morse_translate()+0xbe0>)
   146be:	5cd3      	ldrb	r3, [r2, r3]
   146c0:	2b2d      	cmp	r3, #45	; 0x2d
   146c2:	d116      	bne.n	146f2 <morse_translate()+0xb86>
   146c4:	4b20      	ldr	r3, [pc, #128]	; (14748 <morse_translate()+0xbdc>)
   146c6:	681b      	ldr	r3, [r3, #0]
   146c8:	3b01      	subs	r3, #1
   146ca:	4a20      	ldr	r2, [pc, #128]	; (1474c <morse_translate()+0xbe0>)
   146cc:	5cd3      	ldrb	r3, [r2, r3]
   146ce:	2b2d      	cmp	r3, #45	; 0x2d
   146d0:	d10f      	bne.n	146f2 <morse_translate()+0xb86>
   146d2:	4b1d      	ldr	r3, [pc, #116]	; (14748 <morse_translate()+0xbdc>)
   146d4:	681b      	ldr	r3, [r3, #0]
   146d6:	4a1d      	ldr	r2, [pc, #116]	; (1474c <morse_translate()+0xbe0>)
   146d8:	5cd3      	ldrb	r3, [r2, r3]
   146da:	2b26      	cmp	r3, #38	; 0x26
   146dc:	d109      	bne.n	146f2 <morse_translate()+0xb86>
        translated[translated_count]='y';
   146de:	4b1c      	ldr	r3, [pc, #112]	; (14750 <morse_translate()+0xbe4>)
   146e0:	681b      	ldr	r3, [r3, #0]
   146e2:	4a1c      	ldr	r2, [pc, #112]	; (14754 <morse_translate()+0xbe8>)
   146e4:	2179      	movs	r1, #121	; 0x79
   146e6:	54d1      	strb	r1, [r2, r3]
        translated_count++;
   146e8:	4b19      	ldr	r3, [pc, #100]	; (14750 <morse_translate()+0xbe4>)
   146ea:	681b      	ldr	r3, [r3, #0]
   146ec:	3301      	adds	r3, #1
   146ee:	4a18      	ldr	r2, [pc, #96]	; (14750 <morse_translate()+0xbe4>)
   146f0:	6013      	str	r3, [r2, #0]
        }
            if((morse[increment-5] =='&' || morse[increment-5] == '|' || morse[increment-5] == '?') && morse[increment-4] =='-' && morse[increment-3] == '-' && morse[increment-2] == '.' && morse[increment-1] == '.'  && morse[increment] == '&'){
   146f2:	4b15      	ldr	r3, [pc, #84]	; (14748 <morse_translate()+0xbdc>)
   146f4:	681b      	ldr	r3, [r3, #0]
   146f6:	3b05      	subs	r3, #5
   146f8:	4a14      	ldr	r2, [pc, #80]	; (1474c <morse_translate()+0xbe0>)
   146fa:	5cd3      	ldrb	r3, [r2, r3]
   146fc:	2b26      	cmp	r3, #38	; 0x26
   146fe:	d00d      	beq.n	1471c <morse_translate()+0xbb0>
   14700:	4b11      	ldr	r3, [pc, #68]	; (14748 <morse_translate()+0xbdc>)
   14702:	681b      	ldr	r3, [r3, #0]
   14704:	3b05      	subs	r3, #5
   14706:	4a11      	ldr	r2, [pc, #68]	; (1474c <morse_translate()+0xbe0>)
   14708:	5cd3      	ldrb	r3, [r2, r3]
   1470a:	2b7c      	cmp	r3, #124	; 0x7c
   1470c:	d006      	beq.n	1471c <morse_translate()+0xbb0>
   1470e:	4b0e      	ldr	r3, [pc, #56]	; (14748 <morse_translate()+0xbdc>)
   14710:	681b      	ldr	r3, [r3, #0]
   14712:	3b05      	subs	r3, #5
   14714:	4a0d      	ldr	r2, [pc, #52]	; (1474c <morse_translate()+0xbe0>)
   14716:	5cd3      	ldrb	r3, [r2, r3]
   14718:	2b3f      	cmp	r3, #63	; 0x3f
   1471a:	d134      	bne.n	14786 <morse_translate()+0xc1a>
   1471c:	4b0a      	ldr	r3, [pc, #40]	; (14748 <morse_translate()+0xbdc>)
   1471e:	681b      	ldr	r3, [r3, #0]
   14720:	3b04      	subs	r3, #4
   14722:	4a0a      	ldr	r2, [pc, #40]	; (1474c <morse_translate()+0xbe0>)
   14724:	5cd3      	ldrb	r3, [r2, r3]
   14726:	2b2d      	cmp	r3, #45	; 0x2d
   14728:	d12d      	bne.n	14786 <morse_translate()+0xc1a>
   1472a:	4b07      	ldr	r3, [pc, #28]	; (14748 <morse_translate()+0xbdc>)
   1472c:	681b      	ldr	r3, [r3, #0]
   1472e:	3b03      	subs	r3, #3
   14730:	4a06      	ldr	r2, [pc, #24]	; (1474c <morse_translate()+0xbe0>)
   14732:	5cd3      	ldrb	r3, [r2, r3]
   14734:	2b2d      	cmp	r3, #45	; 0x2d
   14736:	d126      	bne.n	14786 <morse_translate()+0xc1a>
   14738:	4b03      	ldr	r3, [pc, #12]	; (14748 <morse_translate()+0xbdc>)
   1473a:	681b      	ldr	r3, [r3, #0]
   1473c:	3b02      	subs	r3, #2
   1473e:	4a03      	ldr	r2, [pc, #12]	; (1474c <morse_translate()+0xbe0>)
   14740:	5cd3      	ldrb	r3, [r2, r3]
   14742:	2b2e      	cmp	r3, #46	; 0x2e
   14744:	d11f      	bne.n	14786 <morse_translate()+0xc1a>
   14746:	e007      	b.n	14758 <morse_translate()+0xbec>
   14748:	100007b8 	.word	0x100007b8
   1474c:	100007c0 	.word	0x100007c0
   14750:	10000478 	.word	0x10000478
   14754:	10000ba8 	.word	0x10000ba8
   14758:	4b0e      	ldr	r3, [pc, #56]	; (14794 <morse_translate()+0xc28>)
   1475a:	681b      	ldr	r3, [r3, #0]
   1475c:	3b01      	subs	r3, #1
   1475e:	4a0e      	ldr	r2, [pc, #56]	; (14798 <morse_translate()+0xc2c>)
   14760:	5cd3      	ldrb	r3, [r2, r3]
   14762:	2b2e      	cmp	r3, #46	; 0x2e
   14764:	d10f      	bne.n	14786 <morse_translate()+0xc1a>
   14766:	4b0b      	ldr	r3, [pc, #44]	; (14794 <morse_translate()+0xc28>)
   14768:	681b      	ldr	r3, [r3, #0]
   1476a:	4a0b      	ldr	r2, [pc, #44]	; (14798 <morse_translate()+0xc2c>)
   1476c:	5cd3      	ldrb	r3, [r2, r3]
   1476e:	2b26      	cmp	r3, #38	; 0x26
   14770:	d109      	bne.n	14786 <morse_translate()+0xc1a>
        translated[translated_count]='z';
   14772:	4b0a      	ldr	r3, [pc, #40]	; (1479c <morse_translate()+0xc30>)
   14774:	681b      	ldr	r3, [r3, #0]
   14776:	4a0a      	ldr	r2, [pc, #40]	; (147a0 <morse_translate()+0xc34>)
   14778:	217a      	movs	r1, #122	; 0x7a
   1477a:	54d1      	strb	r1, [r2, r3]
        translated_count++;
   1477c:	4b07      	ldr	r3, [pc, #28]	; (1479c <morse_translate()+0xc30>)
   1477e:	681b      	ldr	r3, [r3, #0]
   14780:	3301      	adds	r3, #1
   14782:	4a06      	ldr	r2, [pc, #24]	; (1479c <morse_translate()+0xc30>)
   14784:	6013      	str	r3, [r2, #0]
   14786:	4623      	mov	r3, r4
   14788:	4619      	mov	r1, r3
   1478a:	4806      	ldr	r0, [pc, #24]	; (147a4 <morse_translate()+0xc38>)
   1478c:	f001 fdb0 	bl	162f0 <__cyg_profile_func_exit>
        }
}
   14790:	bf00      	nop
   14792:	bd10      	pop	{r4, pc}
   14794:	100007b8 	.word	0x100007b8
   14798:	100007c0 	.word	0x100007c0
   1479c:	10000478 	.word	0x10000478
   147a0:	10000ba8 	.word	0x10000ba8
   147a4:	00013b6d 	.word	0x00013b6d

000147a8 <Status Wait<Wait(unsigned long long)::{lambda()#1}>(unsigned long long, Wait(unsigned long long)::{lambda()#1})>:
inline Status Wait(uint64_t timeout, F is_done)
   147a8:	e92d 4830 	stmdb	sp!, {r4, r5, fp, lr}
   147ac:	b088      	sub	sp, #32
   147ae:	4675      	mov	r5, lr
   147b0:	e9cd 0102 	strd	r0, r1, [sp, #8]
   147b4:	f88d 2004 	strb.w	r2, [sp, #4]
   147b8:	462b      	mov	r3, r5
   147ba:	4619      	mov	r1, r3
   147bc:	4824      	ldr	r0, [pc, #144]	; (14850 <Status Wait<Wait(unsigned long long)::{lambda()#1}>(unsigned long long, Wait(unsigned long long)::{lambda()#1})+0xa8>)
   147be:	f001 fd83 	bl	162c8 <__cyg_profile_func_enter>
  uint64_t timeout_time = 0;
   147c2:	f04f 0300 	mov.w	r3, #0
   147c6:	f04f 0400 	mov.w	r4, #0
   147ca:	e9cd 3406 	strd	r3, r4, [sp, #24]
  if (timeout == kMaxWait)
   147ce:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
   147d2:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
   147d6:	bf08      	it	eq
   147d8:	f1b3 3fff 	cmpeq.w	r3, #4294967295	; 0xffffffff
   147dc:	d106      	bne.n	147ec <Status Wait<Wait(unsigned long long)::{lambda()#1}>(unsigned long long, Wait(unsigned long long)::{lambda()#1})+0x44>
    timeout_time = kMaxWait;
   147de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   147e2:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   147e6:	e9cd 3406 	strd	r3, r4, [sp, #24]
   147ea:	e00b      	b.n	14804 <Status Wait<Wait(unsigned long long)::{lambda()#1}>(unsigned long long, Wait(unsigned long long)::{lambda()#1})+0x5c>
    timeout_time = Milliseconds() + timeout;
   147ec:	f7fc fb0c 	bl	10e08 <Milliseconds()>
   147f0:	460a      	mov	r2, r1
   147f2:	4601      	mov	r1, r0
   147f4:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
   147f8:	eb13 0b01 	adds.w	fp, r3, r1
   147fc:	eb44 0c02 	adc.w	ip, r4, r2
   14800:	e9cd bc06 	strd	fp, ip, [sp, #24]
  Status status = Status::kTimedOut;
   14804:	2301      	movs	r3, #1
   14806:	9305      	str	r3, [sp, #20]
  while (Milliseconds() < timeout_time)
   14808:	f7fc fafe 	bl	10e08 <Milliseconds()>
   1480c:	460a      	mov	r2, r1
   1480e:	4601      	mov	r1, r0
   14810:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
   14814:	42a2      	cmp	r2, r4
   14816:	bf08      	it	eq
   14818:	4299      	cmpeq	r1, r3
   1481a:	bf34      	ite	cc
   1481c:	2301      	movcc	r3, #1
   1481e:	2300      	movcs	r3, #0
   14820:	b2db      	uxtb	r3, r3
   14822:	2b00      	cmp	r3, #0
   14824:	d008      	beq.n	14838 <Status Wait<Wait(unsigned long long)::{lambda()#1}>(unsigned long long, Wait(unsigned long long)::{lambda()#1})+0x90>
    if (is_done())
   14826:	ab01      	add	r3, sp, #4
   14828:	4618      	mov	r0, r3
   1482a:	f7fc fb0f 	bl	10e4c <Wait(unsigned long long)::{lambda()#1}::operator()() const>
   1482e:	4603      	mov	r3, r0
   14830:	2b00      	cmp	r3, #0
   14832:	d0e9      	beq.n	14808 <Status Wait<Wait(unsigned long long)::{lambda()#1}>(unsigned long long, Wait(unsigned long long)::{lambda()#1})+0x60>
      status = Status::kSuccess;
   14834:	2300      	movs	r3, #0
   14836:	9305      	str	r3, [sp, #20]
  return status;
   14838:	9c05      	ldr	r4, [sp, #20]
   1483a:	462b      	mov	r3, r5
   1483c:	4619      	mov	r1, r3
   1483e:	4804      	ldr	r0, [pc, #16]	; (14850 <Status Wait<Wait(unsigned long long)::{lambda()#1}>(unsigned long long, Wait(unsigned long long)::{lambda()#1})+0xa8>)
   14840:	f001 fd56 	bl	162f0 <__cyg_profile_func_exit>
   14844:	4623      	mov	r3, r4
}
   14846:	4618      	mov	r0, r3
   14848:	b008      	add	sp, #32
   1484a:	e8bd 8830 	ldmia.w	sp!, {r4, r5, fp, pc}
   1484e:	bf00      	nop
   14850:	000147a9 	.word	0x000147a9

00014854 <unsigned long bit::Set<unsigned long>(unsigned long, unsigned long)>:
constexpr T Set(T target, uint32_t position)
   14854:	b530      	push	{r4, r5, lr}
   14856:	b083      	sub	sp, #12
   14858:	4675      	mov	r5, lr
   1485a:	9001      	str	r0, [sp, #4]
   1485c:	9100      	str	r1, [sp, #0]
   1485e:	462b      	mov	r3, r5
   14860:	4619      	mov	r1, r3
   14862:	480a      	ldr	r0, [pc, #40]	; (1488c <unsigned long bit::Set<unsigned long>(unsigned long, unsigned long)+0x38>)
   14864:	f001 fd30 	bl	162c8 <__cyg_profile_func_enter>
  return target | (1 << position);
   14868:	2201      	movs	r2, #1
   1486a:	9b00      	ldr	r3, [sp, #0]
   1486c:	fa02 f303 	lsl.w	r3, r2, r3
   14870:	461a      	mov	r2, r3
   14872:	9b01      	ldr	r3, [sp, #4]
   14874:	ea42 0403 	orr.w	r4, r2, r3
   14878:	462b      	mov	r3, r5
   1487a:	4619      	mov	r1, r3
   1487c:	4803      	ldr	r0, [pc, #12]	; (1488c <unsigned long bit::Set<unsigned long>(unsigned long, unsigned long)+0x38>)
   1487e:	f001 fd37 	bl	162f0 <__cyg_profile_func_exit>
   14882:	4623      	mov	r3, r4
}
   14884:	4618      	mov	r0, r3
   14886:	b003      	add	sp, #12
   14888:	bd30      	pop	{r4, r5, pc}
   1488a:	bf00      	nop
   1488c:	00014855 	.word	0x00014855

00014890 <bool bit::Read<unsigned long>(unsigned long, unsigned long)>:
[[gnu::always_inline]][[nodiscard]] constexpr bool Read(T target,
   14890:	b530      	push	{r4, r5, lr}
   14892:	b083      	sub	sp, #12
   14894:	4675      	mov	r5, lr
   14896:	9001      	str	r0, [sp, #4]
   14898:	9100      	str	r1, [sp, #0]
   1489a:	462b      	mov	r3, r5
   1489c:	4619      	mov	r1, r3
   1489e:	480c      	ldr	r0, [pc, #48]	; (148d0 <bool bit::Read<unsigned long>(unsigned long, unsigned long)+0x40>)
   148a0:	f001 fd12 	bl	162c8 <__cyg_profile_func_enter>
  return static_cast<bool>(target & (1 << position));
   148a4:	2201      	movs	r2, #1
   148a6:	9b00      	ldr	r3, [sp, #0]
   148a8:	fa02 f303 	lsl.w	r3, r2, r3
   148ac:	461a      	mov	r2, r3
   148ae:	9b01      	ldr	r3, [sp, #4]
   148b0:	4013      	ands	r3, r2
   148b2:	2b00      	cmp	r3, #0
   148b4:	bf14      	ite	ne
   148b6:	2301      	movne	r3, #1
   148b8:	2300      	moveq	r3, #0
   148ba:	b2dc      	uxtb	r4, r3
   148bc:	462b      	mov	r3, r5
   148be:	4619      	mov	r1, r3
   148c0:	4803      	ldr	r0, [pc, #12]	; (148d0 <bool bit::Read<unsigned long>(unsigned long, unsigned long)+0x40>)
   148c2:	f001 fd15 	bl	162f0 <__cyg_profile_func_exit>
   148c6:	4623      	mov	r3, r4
}
   148c8:	4618      	mov	r0, r3
   148ca:	b003      	add	sp, #12
   148cc:	bd30      	pop	{r4, r5, pc}
   148ce:	bf00      	nop
   148d0:	00014891 	.word	0x00014891

000148d4 <unsigned long bit::Insert<unsigned long, unsigned char>(unsigned long, unsigned char, unsigned long, unsigned long)>:
constexpr T Insert(T target, U value, uint32_t position, uint32_t width = 1)
   148d4:	b530      	push	{r4, r5, lr}
   148d6:	b089      	sub	sp, #36	; 0x24
   148d8:	4675      	mov	r5, lr
   148da:	9003      	str	r0, [sp, #12]
   148dc:	9201      	str	r2, [sp, #4]
   148de:	9300      	str	r3, [sp, #0]
   148e0:	460b      	mov	r3, r1
   148e2:	f88d 300b 	strb.w	r3, [sp, #11]
   148e6:	462b      	mov	r3, r5
   148e8:	4619      	mov	r1, r3
   148ea:	4816      	ldr	r0, [pc, #88]	; (14944 <unsigned long bit::Insert<unsigned long, unsigned char>(unsigned long, unsigned char, unsigned long, unsigned long)+0x70>)
   148ec:	f001 fcec 	bl	162c8 <__cyg_profile_func_enter>
  constexpr UnsignedT kFieldOfOnes = GenerateFieldOfOnes<T>();
   148f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   148f4:	9307      	str	r3, [sp, #28]
  constexpr size_t kTargetWidth     = sizeof(T) * 8;
   148f6:	2320      	movs	r3, #32
   148f8:	9306      	str	r3, [sp, #24]
  UnsignedT mask   = kFieldOfOnes >> (kTargetWidth - width);
   148fa:	9b00      	ldr	r3, [sp, #0]
   148fc:	f1c3 0320 	rsb	r3, r3, #32
   14900:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   14904:	fa22 f303 	lsr.w	r3, r2, r3
   14908:	9305      	str	r3, [sp, #20]
  target &= ~(mask << position);
   1490a:	9a05      	ldr	r2, [sp, #20]
   1490c:	9b01      	ldr	r3, [sp, #4]
   1490e:	fa02 f303 	lsl.w	r3, r2, r3
   14912:	43db      	mvns	r3, r3
   14914:	9a03      	ldr	r2, [sp, #12]
   14916:	4013      	ands	r3, r2
   14918:	9303      	str	r3, [sp, #12]
  target |= (value & mask) << position;
   1491a:	f89d 200b 	ldrb.w	r2, [sp, #11]
   1491e:	9b05      	ldr	r3, [sp, #20]
   14920:	401a      	ands	r2, r3
   14922:	9b01      	ldr	r3, [sp, #4]
   14924:	fa02 f303 	lsl.w	r3, r2, r3
   14928:	9a03      	ldr	r2, [sp, #12]
   1492a:	4313      	orrs	r3, r2
   1492c:	9303      	str	r3, [sp, #12]
  return target;
   1492e:	9c03      	ldr	r4, [sp, #12]
   14930:	462b      	mov	r3, r5
   14932:	4619      	mov	r1, r3
   14934:	4803      	ldr	r0, [pc, #12]	; (14944 <unsigned long bit::Insert<unsigned long, unsigned char>(unsigned long, unsigned char, unsigned long, unsigned long)+0x70>)
   14936:	f001 fcdb 	bl	162f0 <__cyg_profile_func_exit>
   1493a:	4623      	mov	r3, r4
}
   1493c:	4618      	mov	r0, r3
   1493e:	b009      	add	sp, #36	; 0x24
   14940:	bd30      	pop	{r4, r5, pc}
   14942:	bf00      	nop
   14944:	000148d5 	.word	0x000148d5

00014948 <unsigned long bit::Extract<unsigned long>(unsigned long, unsigned long, unsigned long)>:
constexpr T Extract(T target, uint32_t position, uint32_t width = 1)
   14948:	b530      	push	{r4, r5, lr}
   1494a:	b089      	sub	sp, #36	; 0x24
   1494c:	4675      	mov	r5, lr
   1494e:	9003      	str	r0, [sp, #12]
   14950:	9102      	str	r1, [sp, #8]
   14952:	9201      	str	r2, [sp, #4]
   14954:	462b      	mov	r3, r5
   14956:	4619      	mov	r1, r3
   14958:	480f      	ldr	r0, [pc, #60]	; (14998 <unsigned long bit::Extract<unsigned long>(unsigned long, unsigned long, unsigned long)+0x50>)
   1495a:	f001 fcb5 	bl	162c8 <__cyg_profile_func_enter>
  constexpr UnsignedT kFieldOfOnes = GenerateFieldOfOnes<T>();
   1495e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   14962:	9307      	str	r3, [sp, #28]
  constexpr size_t kTargetWidth     = sizeof(T) * 8;
   14964:	2320      	movs	r3, #32
   14966:	9306      	str	r3, [sp, #24]
  UnsignedT mask   = kFieldOfOnes >> (kTargetWidth - width);
   14968:	9b01      	ldr	r3, [sp, #4]
   1496a:	f1c3 0320 	rsb	r3, r3, #32
   1496e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   14972:	fa22 f303 	lsr.w	r3, r2, r3
   14976:	9305      	str	r3, [sp, #20]
  return (target >> position) & mask;
   14978:	9a03      	ldr	r2, [sp, #12]
   1497a:	9b02      	ldr	r3, [sp, #8]
   1497c:	40da      	lsrs	r2, r3
   1497e:	9b05      	ldr	r3, [sp, #20]
   14980:	ea02 0403 	and.w	r4, r2, r3
   14984:	462b      	mov	r3, r5
   14986:	4619      	mov	r1, r3
   14988:	4803      	ldr	r0, [pc, #12]	; (14998 <unsigned long bit::Extract<unsigned long>(unsigned long, unsigned long, unsigned long)+0x50>)
   1498a:	f001 fcb1 	bl	162f0 <__cyg_profile_func_exit>
   1498e:	4623      	mov	r3, r4
}
   14990:	4618      	mov	r0, r3
   14992:	b009      	add	sp, #36	; 0x24
   14994:	bd30      	pop	{r4, r5, pc}
   14996:	bf00      	nop
   14998:	00014949 	.word	0x00014949

0001499c <unsigned long bit::Insert<unsigned long, bool>(unsigned long, bool, unsigned long, unsigned long)>:
constexpr T Insert(T target, U value, uint32_t position, uint32_t width = 1)
   1499c:	b530      	push	{r4, r5, lr}
   1499e:	b089      	sub	sp, #36	; 0x24
   149a0:	4675      	mov	r5, lr
   149a2:	9003      	str	r0, [sp, #12]
   149a4:	9201      	str	r2, [sp, #4]
   149a6:	9300      	str	r3, [sp, #0]
   149a8:	460b      	mov	r3, r1
   149aa:	f88d 300b 	strb.w	r3, [sp, #11]
   149ae:	462b      	mov	r3, r5
   149b0:	4619      	mov	r1, r3
   149b2:	4816      	ldr	r0, [pc, #88]	; (14a0c <unsigned long bit::Insert<unsigned long, bool>(unsigned long, bool, unsigned long, unsigned long)+0x70>)
   149b4:	f001 fc88 	bl	162c8 <__cyg_profile_func_enter>
  constexpr UnsignedT kFieldOfOnes = GenerateFieldOfOnes<T>();
   149b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   149bc:	9307      	str	r3, [sp, #28]
  constexpr size_t kTargetWidth     = sizeof(T) * 8;
   149be:	2320      	movs	r3, #32
   149c0:	9306      	str	r3, [sp, #24]
  UnsignedT mask   = kFieldOfOnes >> (kTargetWidth - width);
   149c2:	9b00      	ldr	r3, [sp, #0]
   149c4:	f1c3 0320 	rsb	r3, r3, #32
   149c8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   149cc:	fa22 f303 	lsr.w	r3, r2, r3
   149d0:	9305      	str	r3, [sp, #20]
  target &= ~(mask << position);
   149d2:	9a05      	ldr	r2, [sp, #20]
   149d4:	9b01      	ldr	r3, [sp, #4]
   149d6:	fa02 f303 	lsl.w	r3, r2, r3
   149da:	43db      	mvns	r3, r3
   149dc:	9a03      	ldr	r2, [sp, #12]
   149de:	4013      	ands	r3, r2
   149e0:	9303      	str	r3, [sp, #12]
  target |= (value & mask) << position;
   149e2:	f89d 200b 	ldrb.w	r2, [sp, #11]
   149e6:	9b05      	ldr	r3, [sp, #20]
   149e8:	401a      	ands	r2, r3
   149ea:	9b01      	ldr	r3, [sp, #4]
   149ec:	fa02 f303 	lsl.w	r3, r2, r3
   149f0:	9a03      	ldr	r2, [sp, #12]
   149f2:	4313      	orrs	r3, r2
   149f4:	9303      	str	r3, [sp, #12]
  return target;
   149f6:	9c03      	ldr	r4, [sp, #12]
   149f8:	462b      	mov	r3, r5
   149fa:	4619      	mov	r1, r3
   149fc:	4803      	ldr	r0, [pc, #12]	; (14a0c <unsigned long bit::Insert<unsigned long, bool>(unsigned long, bool, unsigned long, unsigned long)+0x70>)
   149fe:	f001 fc77 	bl	162f0 <__cyg_profile_func_exit>
   14a02:	4623      	mov	r3, r4
}
   14a04:	4618      	mov	r0, r3
   14a06:	b009      	add	sp, #36	; 0x24
   14a08:	bd30      	pop	{r4, r5, pc}
   14a0a:	bf00      	nop
   14a0c:	0001499d 	.word	0x0001499d

00014a10 <__static_initialization_and_destruction_0(int, int)>:
   14a10:	b510      	push	{r4, lr}
   14a12:	b082      	sub	sp, #8
   14a14:	4674      	mov	r4, lr
   14a16:	9001      	str	r0, [sp, #4]
   14a18:	9100      	str	r1, [sp, #0]
   14a1a:	4623      	mov	r3, r4
   14a1c:	4619      	mov	r1, r3
   14a1e:	481f      	ldr	r0, [pc, #124]	; (14a9c <__static_initialization_and_destruction_0(int, int)+0x8c>)
   14a20:	f001 fc52 	bl	162c8 <__cyg_profile_func_enter>
   14a24:	9b01      	ldr	r3, [sp, #4]
   14a26:	2b01      	cmp	r3, #1
   14a28:	d12f      	bne.n	14a8a <__static_initialization_and_destruction_0(int, int)+0x7a>
   14a2a:	9b00      	ldr	r3, [sp, #0]
   14a2c:	f64f 72ff 	movw	r2, #65535	; 0xffff
   14a30:	4293      	cmp	r3, r2
   14a32:	d12a      	bne.n	14a8a <__static_initialization_and_destruction_0(int, int)+0x7a>
  LabGPIO button3(0, 29);
   14a34:	221d      	movs	r2, #29
   14a36:	2100      	movs	r1, #0
   14a38:	4819      	ldr	r0, [pc, #100]	; (14aa0 <__static_initialization_and_destruction_0(int, int)+0x90>)
   14a3a:	f7fb fc95 	bl	10368 <LabGPIO::LabGPIO(unsigned char, unsigned char)>
  LabGPIO led3(1, 18);
   14a3e:	2212      	movs	r2, #18
   14a40:	2101      	movs	r1, #1
   14a42:	4818      	ldr	r0, [pc, #96]	; (14aa4 <__static_initialization_and_destruction_0(int, int)+0x94>)
   14a44:	f7fb fc90 	bl	10368 <LabGPIO::LabGPIO(unsigned char, unsigned char)>
  LabGPIO button2(0, 30);
   14a48:	221e      	movs	r2, #30
   14a4a:	2100      	movs	r1, #0
   14a4c:	4816      	ldr	r0, [pc, #88]	; (14aa8 <__static_initialization_and_destruction_0(int, int)+0x98>)
   14a4e:	f7fb fc8b 	bl	10368 <LabGPIO::LabGPIO(unsigned char, unsigned char)>
  LabGPIO led2(1, 24);
   14a52:	2218      	movs	r2, #24
   14a54:	2101      	movs	r1, #1
   14a56:	4815      	ldr	r0, [pc, #84]	; (14aac <__static_initialization_and_destruction_0(int, int)+0x9c>)
   14a58:	f7fb fc86 	bl	10368 <LabGPIO::LabGPIO(unsigned char, unsigned char)>
  LabGPIO button1(1, 15);
   14a5c:	220f      	movs	r2, #15
   14a5e:	2101      	movs	r1, #1
   14a60:	4813      	ldr	r0, [pc, #76]	; (14ab0 <__static_initialization_and_destruction_0(int, int)+0xa0>)
   14a62:	f7fb fc81 	bl	10368 <LabGPIO::LabGPIO(unsigned char, unsigned char)>
  LabGPIO led1(1, 26);
   14a66:	221a      	movs	r2, #26
   14a68:	2101      	movs	r1, #1
   14a6a:	4812      	ldr	r0, [pc, #72]	; (14ab4 <__static_initialization_and_destruction_0(int, int)+0xa4>)
   14a6c:	f7fb fc7c 	bl	10368 <LabGPIO::LabGPIO(unsigned char, unsigned char)>
  LabGPIO button0(1, 19);
   14a70:	2213      	movs	r2, #19
   14a72:	2101      	movs	r1, #1
   14a74:	4810      	ldr	r0, [pc, #64]	; (14ab8 <__static_initialization_and_destruction_0(int, int)+0xa8>)
   14a76:	f7fb fc77 	bl	10368 <LabGPIO::LabGPIO(unsigned char, unsigned char)>
  LabGPIO led0(2, 3);
   14a7a:	2203      	movs	r2, #3
   14a7c:	2102      	movs	r1, #2
   14a7e:	480f      	ldr	r0, [pc, #60]	; (14abc <__static_initialization_and_destruction_0(int, int)+0xac>)
   14a80:	f7fb fc72 	bl	10368 <LabGPIO::LabGPIO(unsigned char, unsigned char)>
  OledTerminal oled_terminal; //make a variable for the Oled display
   14a84:	480e      	ldr	r0, [pc, #56]	; (14ac0 <__static_initialization_and_destruction_0(int, int)+0xb0>)
   14a86:	f7fe fdfb 	bl	13680 <OledTerminal::OledTerminal()>
   14a8a:	4623      	mov	r3, r4
   14a8c:	4619      	mov	r1, r3
   14a8e:	4803      	ldr	r0, [pc, #12]	; (14a9c <__static_initialization_and_destruction_0(int, int)+0x8c>)
   14a90:	f001 fc2e 	bl	162f0 <__cyg_profile_func_exit>
}
   14a94:	bf00      	nop
   14a96:	b002      	add	sp, #8
   14a98:	bd10      	pop	{r4, pc}
   14a9a:	bf00      	nop
   14a9c:	00014a11 	.word	0x00014a11
   14aa0:	10000788 	.word	0x10000788
   14aa4:	1000078c 	.word	0x1000078c
   14aa8:	10000790 	.word	0x10000790
   14aac:	10000794 	.word	0x10000794
   14ab0:	10000798 	.word	0x10000798
   14ab4:	1000079c 	.word	0x1000079c
   14ab8:	100007a0 	.word	0x100007a0
   14abc:	100007a4 	.word	0x100007a4
   14ac0:	10000c0c 	.word	0x10000c0c

00014ac4 <_GLOBAL__sub_I_button3>:
   14ac4:	b510      	push	{r4, lr}
   14ac6:	4674      	mov	r4, lr
   14ac8:	4623      	mov	r3, r4
   14aca:	4619      	mov	r1, r3
   14acc:	4806      	ldr	r0, [pc, #24]	; (14ae8 <_GLOBAL__sub_I_button3+0x24>)
   14ace:	f001 fbfb 	bl	162c8 <__cyg_profile_func_enter>
   14ad2:	f64f 71ff 	movw	r1, #65535	; 0xffff
   14ad6:	2001      	movs	r0, #1
   14ad8:	f7ff ff9a 	bl	14a10 <__static_initialization_and_destruction_0(int, int)>
   14adc:	4623      	mov	r3, r4
   14ade:	4619      	mov	r1, r3
   14ae0:	4801      	ldr	r0, [pc, #4]	; (14ae8 <_GLOBAL__sub_I_button3+0x24>)
   14ae2:	f001 fc05 	bl	162f0 <__cyg_profile_func_exit>
   14ae6:	bd10      	pop	{r4, pc}
   14ae8:	00014ac5 	.word	0x00014ac5

00014aec <SetUptimeFunction(unsigned long long (*)())>:
{
   14aec:	b510      	push	{r4, lr}
   14aee:	b082      	sub	sp, #8
   14af0:	4674      	mov	r4, lr
   14af2:	9001      	str	r0, [sp, #4]
   14af4:	4623      	mov	r3, r4
   14af6:	4619      	mov	r1, r3
   14af8:	4806      	ldr	r0, [pc, #24]	; (14b14 <SetUptimeFunction(unsigned long long (*)())+0x28>)
   14afa:	f001 fbe5 	bl	162c8 <__cyg_profile_func_enter>
  Uptime = uptime_function;
   14afe:	4a06      	ldr	r2, [pc, #24]	; (14b18 <SetUptimeFunction(unsigned long long (*)())+0x2c>)
   14b00:	9b01      	ldr	r3, [sp, #4]
   14b02:	6013      	str	r3, [r2, #0]
   14b04:	4623      	mov	r3, r4
   14b06:	4619      	mov	r1, r3
   14b08:	4802      	ldr	r0, [pc, #8]	; (14b14 <SetUptimeFunction(unsigned long long (*)())+0x28>)
   14b0a:	f001 fbf1 	bl	162f0 <__cyg_profile_func_exit>
}
   14b0e:	bf00      	nop
   14b10:	b002      	add	sp, #8
   14b12:	bd10      	pop	{r4, pc}
   14b14:	00014aed 	.word	0x00014aed
   14b18:	1000001c 	.word	0x1000001c

00014b1c <SystemTimer::DisableTimer()>:
  /// system_timer_isr defaults to nullptr. The actual SystemTickHandler should
  /// check if the isr is set to nullptr, and if it is, turn off the timer, if
  /// set a proper function then execute it.
  inline static IsrPointer system_timer_isr = nullptr;
  /// WARNING: Doing so will most likely disable FreeRTOS
  static void DisableTimer()
   14b1c:	b510      	push	{r4, lr}
   14b1e:	4674      	mov	r4, lr
   14b20:	4623      	mov	r3, r4
   14b22:	4619      	mov	r1, r3
   14b24:	480a      	ldr	r0, [pc, #40]	; (14b50 <SystemTimer::DisableTimer()+0x34>)
   14b26:	f001 fbcf 	bl	162c8 <__cyg_profile_func_enter>
  {
    sys_tick->LOAD = 0;
   14b2a:	4b0a      	ldr	r3, [pc, #40]	; (14b54 <SystemTimer::DisableTimer()+0x38>)
   14b2c:	681b      	ldr	r3, [r3, #0]
   14b2e:	2200      	movs	r2, #0
   14b30:	605a      	str	r2, [r3, #4]
    sys_tick->VAL  = 0;
   14b32:	4b08      	ldr	r3, [pc, #32]	; (14b54 <SystemTimer::DisableTimer()+0x38>)
   14b34:	681b      	ldr	r3, [r3, #0]
   14b36:	2200      	movs	r2, #0
   14b38:	609a      	str	r2, [r3, #8]
    sys_tick->CTRL = 0;
   14b3a:	4b06      	ldr	r3, [pc, #24]	; (14b54 <SystemTimer::DisableTimer()+0x38>)
   14b3c:	681b      	ldr	r3, [r3, #0]
   14b3e:	2200      	movs	r2, #0
   14b40:	601a      	str	r2, [r3, #0]
   14b42:	4623      	mov	r3, r4
   14b44:	4619      	mov	r1, r3
   14b46:	4802      	ldr	r0, [pc, #8]	; (14b50 <SystemTimer::DisableTimer()+0x34>)
   14b48:	f001 fbd2 	bl	162f0 <__cyg_profile_func_exit>
  }
   14b4c:	bf00      	nop
   14b4e:	bd10      	pop	{r4, pc}
   14b50:	00014b1d 	.word	0x00014b1d
   14b54:	1000047c 	.word	0x1000047c

00014b58 <SystemTimer::SystemTimerHandler()>:
  static void SystemTimerHandler()
   14b58:	b510      	push	{r4, lr}
   14b5a:	4674      	mov	r4, lr
   14b5c:	4623      	mov	r3, r4
   14b5e:	4619      	mov	r1, r3
   14b60:	4808      	ldr	r0, [pc, #32]	; (14b84 <SystemTimer::SystemTimerHandler()+0x2c>)
   14b62:	f001 fbb1 	bl	162c8 <__cyg_profile_func_enter>
  {
    // This assumes that SysTickHandler is called every millisecond.
    // Changing that frequency will distort the milliseconds time.
    if (system_timer_isr != nullptr)
   14b66:	4b08      	ldr	r3, [pc, #32]	; (14b88 <SystemTimer::SystemTimerHandler()+0x30>)
   14b68:	681b      	ldr	r3, [r3, #0]
   14b6a:	2b00      	cmp	r3, #0
   14b6c:	d002      	beq.n	14b74 <SystemTimer::SystemTimerHandler()+0x1c>
    {
      system_timer_isr();
   14b6e:	4b06      	ldr	r3, [pc, #24]	; (14b88 <SystemTimer::SystemTimerHandler()+0x30>)
   14b70:	681b      	ldr	r3, [r3, #0]
   14b72:	4798      	blx	r3
   14b74:	4623      	mov	r3, r4
   14b76:	4619      	mov	r1, r3
   14b78:	4802      	ldr	r0, [pc, #8]	; (14b84 <SystemTimer::SystemTimerHandler()+0x2c>)
   14b7a:	f001 fbb9 	bl	162f0 <__cyg_profile_func_exit>
    }
  }
   14b7e:	bf00      	nop
   14b80:	bd10      	pop	{r4, pc}
   14b82:	bf00      	nop
   14b84:	00014b59 	.word	0x00014b59
   14b88:	100013d4 	.word	0x100013d4

00014b8c <SystemTimer::SetIsrFunction(void (*)())>:
  constexpr SystemTimer() {}
  void SetIsrFunction(IsrPointer isr) override
   14b8c:	b510      	push	{r4, lr}
   14b8e:	b082      	sub	sp, #8
   14b90:	4674      	mov	r4, lr
   14b92:	9001      	str	r0, [sp, #4]
   14b94:	9100      	str	r1, [sp, #0]
   14b96:	4623      	mov	r3, r4
   14b98:	4619      	mov	r1, r3
   14b9a:	4807      	ldr	r0, [pc, #28]	; (14bb8 <SystemTimer::SetIsrFunction(void (*)())+0x2c>)
   14b9c:	f001 fb94 	bl	162c8 <__cyg_profile_func_enter>
  {
    system_timer_isr = isr;
   14ba0:	4a06      	ldr	r2, [pc, #24]	; (14bbc <SystemTimer::SetIsrFunction(void (*)())+0x30>)
   14ba2:	9b00      	ldr	r3, [sp, #0]
   14ba4:	6013      	str	r3, [r2, #0]
   14ba6:	4623      	mov	r3, r4
   14ba8:	4619      	mov	r1, r3
   14baa:	4803      	ldr	r0, [pc, #12]	; (14bb8 <SystemTimer::SetIsrFunction(void (*)())+0x2c>)
   14bac:	f001 fba0 	bl	162f0 <__cyg_profile_func_exit>
  }
   14bb0:	bf00      	nop
   14bb2:	b002      	add	sp, #8
   14bb4:	bd10      	pop	{r4, pc}
   14bb6:	bf00      	nop
   14bb8:	00014b8d 	.word	0x00014b8d
   14bbc:	100013d4 	.word	0x100013d4

00014bc0 <SystemTimer::StartTimer()>:
  bool StartTimer() override
   14bc0:	b530      	push	{r4, r5, lr}
   14bc2:	b085      	sub	sp, #20
   14bc4:	4675      	mov	r5, lr
   14bc6:	9001      	str	r0, [sp, #4]
   14bc8:	462b      	mov	r3, r5
   14bca:	4619      	mov	r1, r3
   14bcc:	4820      	ldr	r0, [pc, #128]	; (14c50 <SystemTimer::StartTimer()+0x90>)
   14bce:	f001 fb7b 	bl	162c8 <__cyg_profile_func_enter>
  {
    bool successful = false;
   14bd2:	2300      	movs	r3, #0
   14bd4:	f88d 300f 	strb.w	r3, [sp, #15]
    if (sys_tick->LOAD != 0)
   14bd8:	4b1e      	ldr	r3, [pc, #120]	; (14c54 <SystemTimer::StartTimer()+0x94>)
   14bda:	681b      	ldr	r3, [r3, #0]
   14bdc:	685b      	ldr	r3, [r3, #4]
   14bde:	2b00      	cmp	r3, #0
   14be0:	bf14      	ite	ne
   14be2:	2301      	movne	r3, #1
   14be4:	2300      	moveq	r3, #0
   14be6:	b2db      	uxtb	r3, r3
   14be8:	2b00      	cmp	r3, #0
   14bea:	d01e      	beq.n	14c2a <SystemTimer::StartTimer()+0x6a>
    {
      sys_tick->VAL = 0;
   14bec:	4b19      	ldr	r3, [pc, #100]	; (14c54 <SystemTimer::StartTimer()+0x94>)
   14bee:	681b      	ldr	r3, [r3, #0]
   14bf0:	2200      	movs	r2, #0
   14bf2:	609a      	str	r2, [r3, #8]
      sys_tick->CTRL |= (1 << ControlBitMap::kTickInterupt);
   14bf4:	4b17      	ldr	r3, [pc, #92]	; (14c54 <SystemTimer::StartTimer()+0x94>)
   14bf6:	681b      	ldr	r3, [r3, #0]
   14bf8:	681a      	ldr	r2, [r3, #0]
   14bfa:	4b16      	ldr	r3, [pc, #88]	; (14c54 <SystemTimer::StartTimer()+0x94>)
   14bfc:	681b      	ldr	r3, [r3, #0]
   14bfe:	f042 0202 	orr.w	r2, r2, #2
   14c02:	601a      	str	r2, [r3, #0]
      sys_tick->CTRL |= (1 << ControlBitMap::kEnableCounter);
   14c04:	4b13      	ldr	r3, [pc, #76]	; (14c54 <SystemTimer::StartTimer()+0x94>)
   14c06:	681b      	ldr	r3, [r3, #0]
   14c08:	681a      	ldr	r2, [r3, #0]
   14c0a:	4b12      	ldr	r3, [pc, #72]	; (14c54 <SystemTimer::StartTimer()+0x94>)
   14c0c:	681b      	ldr	r3, [r3, #0]
   14c0e:	f042 0201 	orr.w	r2, r2, #1
   14c12:	601a      	str	r2, [r3, #0]
      sys_tick->CTRL |= (1 << ControlBitMap::kClkSource);
   14c14:	4b0f      	ldr	r3, [pc, #60]	; (14c54 <SystemTimer::StartTimer()+0x94>)
   14c16:	681b      	ldr	r3, [r3, #0]
   14c18:	681a      	ldr	r2, [r3, #0]
   14c1a:	4b0e      	ldr	r3, [pc, #56]	; (14c54 <SystemTimer::StartTimer()+0x94>)
   14c1c:	681b      	ldr	r3, [r3, #0]
   14c1e:	f042 0204 	orr.w	r2, r2, #4
   14c22:	601a      	str	r2, [r3, #0]
      successful = true;
   14c24:	2301      	movs	r3, #1
   14c26:	f88d 300f 	strb.w	r3, [sp, #15]
    }
    RegisterIsr(SysTick_IRQn, SystemTimerHandler);
   14c2a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   14c2e:	2201      	movs	r2, #1
   14c30:	4909      	ldr	r1, [pc, #36]	; (14c58 <SystemTimer::StartTimer()+0x98>)
   14c32:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   14c36:	f001 fa1f 	bl	16078 <RegisterIsr(IRQn, void (*)(), bool, long)>
    return successful;
   14c3a:	f89d 400f 	ldrb.w	r4, [sp, #15]
   14c3e:	462b      	mov	r3, r5
   14c40:	4619      	mov	r1, r3
   14c42:	4803      	ldr	r0, [pc, #12]	; (14c50 <SystemTimer::StartTimer()+0x90>)
   14c44:	f001 fb54 	bl	162f0 <__cyg_profile_func_exit>
   14c48:	4623      	mov	r3, r4
  }
   14c4a:	4618      	mov	r0, r3
   14c4c:	b005      	add	sp, #20
   14c4e:	bd30      	pop	{r4, r5, pc}
   14c50:	00014bc1 	.word	0x00014bc1
   14c54:	1000047c 	.word	0x1000047c
   14c58:	00014b59 	.word	0x00014b59

00014c5c <SystemTimer::SetTickFrequency(unsigned long)>:
  ///          remainder will be returned.
  ///          If the freqency supplied is less then 2Hz, the function will
  ///          return without changing any hardware.
  ///          If the reload value exceeds the SysTick_LOAD_RELOAD_Msk, the
  ///          returned value is the SysTick_LOAD_RELOAD_Msk.
  uint32_t SetTickFrequency(uint32_t frequency) override
   14c5c:	b530      	push	{r4, r5, lr}
   14c5e:	b085      	sub	sp, #20
   14c60:	4675      	mov	r5, lr
   14c62:	9001      	str	r0, [sp, #4]
   14c64:	9100      	str	r1, [sp, #0]
   14c66:	462b      	mov	r3, r5
   14c68:	4619      	mov	r1, r3
   14c6a:	481f      	ldr	r0, [pc, #124]	; (14ce8 <SystemTimer::SetTickFrequency(unsigned long)+0x8c>)
   14c6c:	f001 fb2c 	bl	162c8 <__cyg_profile_func_enter>
  {
    if (frequency <= 1)
   14c70:	9b00      	ldr	r3, [sp, #0]
   14c72:	2b01      	cmp	r3, #1
   14c74:	d801      	bhi.n	14c7a <SystemTimer::SetTickFrequency(unsigned long)+0x1e>
    {
      return 0;
   14c76:	2400      	movs	r4, #0
   14c78:	e02d      	b.n	14cd6 <SystemTimer::SetTickFrequency(unsigned long)+0x7a>
    }
    uint32_t reload_value = (GetSystemFrequency() / frequency) - 1;
   14c7a:	9b01      	ldr	r3, [sp, #4]
   14c7c:	1d1a      	adds	r2, r3, #4
   14c7e:	9b01      	ldr	r3, [sp, #4]
   14c80:	685b      	ldr	r3, [r3, #4]
   14c82:	330c      	adds	r3, #12
   14c84:	681b      	ldr	r3, [r3, #0]
   14c86:	4610      	mov	r0, r2
   14c88:	4798      	blx	r3
   14c8a:	4602      	mov	r2, r0
   14c8c:	9b00      	ldr	r3, [sp, #0]
   14c8e:	fbb2 f3f3 	udiv	r3, r2, r3
   14c92:	3b01      	subs	r3, #1
   14c94:	9303      	str	r3, [sp, #12]
    int remainder         = (GetSystemFrequency() % frequency);
   14c96:	9b01      	ldr	r3, [sp, #4]
   14c98:	1d1a      	adds	r2, r3, #4
   14c9a:	9b01      	ldr	r3, [sp, #4]
   14c9c:	685b      	ldr	r3, [r3, #4]
   14c9e:	330c      	adds	r3, #12
   14ca0:	681b      	ldr	r3, [r3, #0]
   14ca2:	4610      	mov	r0, r2
   14ca4:	4798      	blx	r3
   14ca6:	4603      	mov	r3, r0
   14ca8:	9a00      	ldr	r2, [sp, #0]
   14caa:	fbb3 f2f2 	udiv	r2, r3, r2
   14cae:	9900      	ldr	r1, [sp, #0]
   14cb0:	fb01 f202 	mul.w	r2, r1, r2
   14cb4:	1a9b      	subs	r3, r3, r2
   14cb6:	9302      	str	r3, [sp, #8]
    if (reload_value > SysTick_LOAD_RELOAD_Msk)
   14cb8:	9b03      	ldr	r3, [sp, #12]
   14cba:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
   14cbe:	d305      	bcc.n	14ccc <SystemTimer::SetTickFrequency(unsigned long)+0x70>
    {
      reload_value = SysTick_LOAD_RELOAD_Msk;
   14cc0:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
   14cc4:	9303      	str	r3, [sp, #12]
      remainder    = SysTick_LOAD_RELOAD_Msk;
   14cc6:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
   14cca:	9302      	str	r3, [sp, #8]
    }
    sys_tick->LOAD = reload_value;
   14ccc:	4b07      	ldr	r3, [pc, #28]	; (14cec <SystemTimer::SetTickFrequency(unsigned long)+0x90>)
   14cce:	681b      	ldr	r3, [r3, #0]
   14cd0:	9a03      	ldr	r2, [sp, #12]
   14cd2:	605a      	str	r2, [r3, #4]
    return remainder;
   14cd4:	9c02      	ldr	r4, [sp, #8]
   14cd6:	462b      	mov	r3, r5
   14cd8:	4619      	mov	r1, r3
   14cda:	4803      	ldr	r0, [pc, #12]	; (14ce8 <SystemTimer::SetTickFrequency(unsigned long)+0x8c>)
   14cdc:	f001 fb08 	bl	162f0 <__cyg_profile_func_exit>
   14ce0:	4623      	mov	r3, r4
  }
   14ce2:	4618      	mov	r0, r3
   14ce4:	b005      	add	sp, #20
   14ce6:	bd30      	pop	{r4, r5, pc}
   14ce8:	00014c5d 	.word	0x00014c5d
   14cec:	1000047c 	.word	0x1000047c

00014cf0 <unsigned char util::Value<TimerInterface::TimerPort, unsigned char>(TimerInterface::TimerPort)>:
constexpr Type Value(Enum enum_type_value)
   14cf0:	b530      	push	{r4, r5, lr}
   14cf2:	b083      	sub	sp, #12
   14cf4:	4675      	mov	r5, lr
   14cf6:	4603      	mov	r3, r0
   14cf8:	f88d 3007 	strb.w	r3, [sp, #7]
   14cfc:	462b      	mov	r3, r5
   14cfe:	4619      	mov	r1, r3
   14d00:	4806      	ldr	r0, [pc, #24]	; (14d1c <unsigned char util::Value<TimerInterface::TimerPort, unsigned char>(TimerInterface::TimerPort)+0x2c>)
   14d02:	f001 fae1 	bl	162c8 <__cyg_profile_func_enter>
  return static_cast<Type>(enum_type_value);
   14d06:	f89d 4007 	ldrb.w	r4, [sp, #7]
   14d0a:	462b      	mov	r3, r5
   14d0c:	4619      	mov	r1, r3
   14d0e:	4803      	ldr	r0, [pc, #12]	; (14d1c <unsigned char util::Value<TimerInterface::TimerPort, unsigned char>(TimerInterface::TimerPort)+0x2c>)
   14d10:	f001 faee 	bl	162f0 <__cyg_profile_func_exit>
   14d14:	4623      	mov	r3, r4
}
   14d16:	4618      	mov	r0, r3
   14d18:	b003      	add	sp, #12
   14d1a:	bd30      	pop	{r4, r5, pc}
   14d1c:	00014cf1 	.word	0x00014cf1

00014d20 <Timer::DoNothingIsr()>:
    Lpc40xxSystemController::Peripherals::kTimer3
  };

  static constexpr IRQn kTimerIrq[] = { IRQn::TIMER0_IRQn, IRQn::TIMER1_IRQn,
                                        IRQn::TIMER2_IRQn, IRQn::TIMER3_IRQn };
  static void DoNothingIsr() {}
   14d20:	b510      	push	{r4, lr}
   14d22:	4674      	mov	r4, lr
   14d24:	4623      	mov	r3, r4
   14d26:	4619      	mov	r1, r3
   14d28:	4804      	ldr	r0, [pc, #16]	; (14d3c <Timer::DoNothingIsr()+0x1c>)
   14d2a:	f001 facd 	bl	162c8 <__cyg_profile_func_enter>
   14d2e:	4623      	mov	r3, r4
   14d30:	4619      	mov	r1, r3
   14d32:	4802      	ldr	r0, [pc, #8]	; (14d3c <Timer::DoNothingIsr()+0x1c>)
   14d34:	f001 fadc 	bl	162f0 <__cyg_profile_func_exit>
   14d38:	bf00      	nop
   14d3a:	bd10      	pop	{r4, pc}
   14d3c:	00014d21 	.word	0x00014d21

00014d40 <Timer::Initialize(unsigned long, void (*)(), long)>:
  ///                  register will be 10 ms.
  /// @param isr an ISR that will fire when the condition set by SetTimer
  ///            method is achieved.
  /// @param priority sets the Timer interrupt's priority level, defaults to -1
  ///                 which uses the platforms default priority.
  void Initialize(uint32_t frequency, IsrPointer isr = DoNothingIsr,
   14d40:	b510      	push	{r4, lr}
   14d42:	b086      	sub	sp, #24
   14d44:	4674      	mov	r4, lr
   14d46:	9003      	str	r0, [sp, #12]
   14d48:	9102      	str	r1, [sp, #8]
   14d4a:	9201      	str	r2, [sp, #4]
   14d4c:	9300      	str	r3, [sp, #0]
   14d4e:	4623      	mov	r3, r4
   14d50:	4619      	mov	r1, r3
   14d52:	483e      	ldr	r0, [pc, #248]	; (14e4c <Timer::Initialize(unsigned long, void (*)(), long)+0x10c>)
   14d54:	f001 fab8 	bl	162c8 <__cyg_profile_func_enter>
                  int32_t priority = -1) override final
  {
    PowerUpPeripheral(kPowerbit[channel_]);
   14d58:	9b03      	ldr	r3, [sp, #12]
   14d5a:	1d18      	adds	r0, r3, #4
   14d5c:	9b03      	ldr	r3, [sp, #12]
   14d5e:	685b      	ldr	r3, [r3, #4]
   14d60:	3314      	adds	r3, #20
   14d62:	681b      	ldr	r3, [r3, #0]
   14d64:	9a03      	ldr	r2, [sp, #12]
   14d66:	7a12      	ldrb	r2, [r2, #8]
   14d68:	0092      	lsls	r2, r2, #2
   14d6a:	4939      	ldr	r1, [pc, #228]	; (14e50 <Timer::Initialize(unsigned long, void (*)(), long)+0x110>)
   14d6c:	440a      	add	r2, r1
   14d6e:	4611      	mov	r1, r2
   14d70:	4798      	blx	r3
    SJ2_ASSERT_FATAL(
   14d72:	9b02      	ldr	r3, [sp, #8]
   14d74:	2b00      	cmp	r3, #0
   14d76:	d10d      	bne.n	14d94 <Timer::Initialize(unsigned long, void (*)(), long)+0x54>
   14d78:	2384      	movs	r3, #132	; 0x84
   14d7a:	4a36      	ldr	r2, [pc, #216]	; (14e54 <Timer::Initialize(unsigned long, void (*)(), long)+0x114>)
   14d7c:	4936      	ldr	r1, [pc, #216]	; (14e58 <Timer::Initialize(unsigned long, void (*)(), long)+0x118>)
   14d7e:	4837      	ldr	r0, [pc, #220]	; (14e5c <Timer::Initialize(unsigned long, void (*)(), long)+0x11c>)
   14d80:	f002 fd22 	bl	177c8 <printf>
   14d84:	4836      	ldr	r0, [pc, #216]	; (14e60 <Timer::Initialize(unsigned long, void (*)(), long)+0x120>)
   14d86:	f001 fa6f 	bl	16268 <puts>
   14d8a:	2100      	movs	r1, #0
   14d8c:	2001      	movs	r0, #1
   14d8e:	f7fb ffa3 	bl	10cd8 <debug::PrintBacktrace(bool, void*)>
   14d92:	e7fe      	b.n	14d92 <Timer::Initialize(unsigned long, void (*)(), long)+0x52>
        frequency != 0,
        "Cannot have zero ticks per microsecond, please choose 1 or more.");
    // Set Prescale register for Prescale Counter to milliseconds
    uint32_t prescaler = GetPeripheralFrequency() / frequency;
   14d94:	9b03      	ldr	r3, [sp, #12]
   14d96:	1d1a      	adds	r2, r3, #4
   14d98:	9b03      	ldr	r3, [sp, #12]
   14d9a:	685b      	ldr	r3, [r3, #4]
   14d9c:	3310      	adds	r3, #16
   14d9e:	681b      	ldr	r3, [r3, #0]
   14da0:	4610      	mov	r0, r2
   14da2:	4798      	blx	r3
   14da4:	4602      	mov	r2, r0
   14da6:	9b02      	ldr	r3, [sp, #8]
   14da8:	fbb2 f3f3 	udiv	r3, r2, r3
   14dac:	9305      	str	r3, [sp, #20]
    tim_register[channel_]->PR &= ~(kClear << 1);
   14dae:	9b03      	ldr	r3, [sp, #12]
   14db0:	7a1b      	ldrb	r3, [r3, #8]
   14db2:	461a      	mov	r2, r3
   14db4:	4b2b      	ldr	r3, [pc, #172]	; (14e64 <Timer::Initialize(unsigned long, void (*)(), long)+0x124>)
   14db6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   14dba:	68da      	ldr	r2, [r3, #12]
   14dbc:	9b03      	ldr	r3, [sp, #12]
   14dbe:	7a1b      	ldrb	r3, [r3, #8]
   14dc0:	4619      	mov	r1, r3
   14dc2:	4b28      	ldr	r3, [pc, #160]	; (14e64 <Timer::Initialize(unsigned long, void (*)(), long)+0x124>)
   14dc4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   14dc8:	f002 0201 	and.w	r2, r2, #1
   14dcc:	60da      	str	r2, [r3, #12]
    tim_register[channel_]->PR |= (prescaler << 1);
   14dce:	9b03      	ldr	r3, [sp, #12]
   14dd0:	7a1b      	ldrb	r3, [r3, #8]
   14dd2:	461a      	mov	r2, r3
   14dd4:	4b23      	ldr	r3, [pc, #140]	; (14e64 <Timer::Initialize(unsigned long, void (*)(), long)+0x124>)
   14dd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   14dda:	68d9      	ldr	r1, [r3, #12]
   14ddc:	9b05      	ldr	r3, [sp, #20]
   14dde:	005a      	lsls	r2, r3, #1
   14de0:	9b03      	ldr	r3, [sp, #12]
   14de2:	7a1b      	ldrb	r3, [r3, #8]
   14de4:	4618      	mov	r0, r3
   14de6:	4b1f      	ldr	r3, [pc, #124]	; (14e64 <Timer::Initialize(unsigned long, void (*)(), long)+0x124>)
   14de8:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   14dec:	430a      	orrs	r2, r1
   14dee:	60da      	str	r2, [r3, #12]
    tim_register[channel_]->TCR |= (1 << 0);
   14df0:	9b03      	ldr	r3, [sp, #12]
   14df2:	7a1b      	ldrb	r3, [r3, #8]
   14df4:	461a      	mov	r2, r3
   14df6:	4b1b      	ldr	r3, [pc, #108]	; (14e64 <Timer::Initialize(unsigned long, void (*)(), long)+0x124>)
   14df8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   14dfc:	685a      	ldr	r2, [r3, #4]
   14dfe:	9b03      	ldr	r3, [sp, #12]
   14e00:	7a1b      	ldrb	r3, [r3, #8]
   14e02:	4619      	mov	r1, r3
   14e04:	4b17      	ldr	r3, [pc, #92]	; (14e64 <Timer::Initialize(unsigned long, void (*)(), long)+0x124>)
   14e06:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   14e0a:	f042 0201 	orr.w	r2, r2, #1
   14e0e:	605a      	str	r2, [r3, #4]
    user_timer_isr[channel_] = isr;
   14e10:	9b03      	ldr	r3, [sp, #12]
   14e12:	7a1b      	ldrb	r3, [r3, #8]
   14e14:	4619      	mov	r1, r3
   14e16:	4a14      	ldr	r2, [pc, #80]	; (14e68 <Timer::Initialize(unsigned long, void (*)(), long)+0x128>)
   14e18:	9b01      	ldr	r3, [sp, #4]
   14e1a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
    RegisterIsr(kTimerIrq[channel_], kTimerIsr[channel_], true, priority);
   14e1e:	9b03      	ldr	r3, [sp, #12]
   14e20:	7a1b      	ldrb	r3, [r3, #8]
   14e22:	461a      	mov	r2, r3
   14e24:	4b11      	ldr	r3, [pc, #68]	; (14e6c <Timer::Initialize(unsigned long, void (*)(), long)+0x12c>)
   14e26:	5698      	ldrsb	r0, [r3, r2]
   14e28:	9b03      	ldr	r3, [sp, #12]
   14e2a:	7a1b      	ldrb	r3, [r3, #8]
   14e2c:	461a      	mov	r2, r3
   14e2e:	4b10      	ldr	r3, [pc, #64]	; (14e70 <Timer::Initialize(unsigned long, void (*)(), long)+0x130>)
   14e30:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   14e34:	9b00      	ldr	r3, [sp, #0]
   14e36:	2201      	movs	r2, #1
   14e38:	f001 f91e 	bl	16078 <RegisterIsr(IRQn, void (*)(), bool, long)>
   14e3c:	4623      	mov	r3, r4
   14e3e:	4619      	mov	r1, r3
   14e40:	4802      	ldr	r0, [pc, #8]	; (14e4c <Timer::Initialize(unsigned long, void (*)(), long)+0x10c>)
   14e42:	f001 fa55 	bl	162f0 <__cyg_profile_func_exit>
  }
   14e46:	bf00      	nop
   14e48:	b006      	add	sp, #24
   14e4a:	bd10      	pop	{r4, pc}
   14e4c:	00014d41 	.word	0x00014d41
   14e50:	0001a384 	.word	0x0001a384
   14e54:	0001a484 	.word	0x0001a484
   14e58:	0001a3a8 	.word	0x0001a3a8
   14e5c:	0001a264 	.word	0x0001a264
   14e60:	00019f70 	.word	0x00019f70
   14e64:	10000480 	.word	0x10000480
   14e68:	10001418 	.word	0x10001418
   14e6c:	0001a394 	.word	0x0001a394
   14e70:	0001a398 	.word	0x0001a398

00014e74 <unsigned char util::Value<TimerInterface::MatchControlRegister, unsigned char>(TimerInterface::MatchControlRegister)>:
constexpr Type Value(Enum enum_type_value)
   14e74:	b530      	push	{r4, r5, lr}
   14e76:	b083      	sub	sp, #12
   14e78:	4675      	mov	r5, lr
   14e7a:	4603      	mov	r3, r0
   14e7c:	f88d 3007 	strb.w	r3, [sp, #7]
   14e80:	462b      	mov	r3, r5
   14e82:	4619      	mov	r1, r3
   14e84:	4806      	ldr	r0, [pc, #24]	; (14ea0 <unsigned char util::Value<TimerInterface::MatchControlRegister, unsigned char>(TimerInterface::MatchControlRegister)+0x2c>)
   14e86:	f001 fa1f 	bl	162c8 <__cyg_profile_func_enter>
  return static_cast<Type>(enum_type_value);
   14e8a:	f89d 4007 	ldrb.w	r4, [sp, #7]
   14e8e:	462b      	mov	r3, r5
   14e90:	4619      	mov	r1, r3
   14e92:	4803      	ldr	r0, [pc, #12]	; (14ea0 <unsigned char util::Value<TimerInterface::MatchControlRegister, unsigned char>(TimerInterface::MatchControlRegister)+0x2c>)
   14e94:	f001 fa2c 	bl	162f0 <__cyg_profile_func_exit>
   14e98:	4623      	mov	r3, r4
}
   14e9a:	4618      	mov	r0, r3
   14e9c:	b003      	add	sp, #12
   14e9e:	bd30      	pop	{r4, r5, pc}
   14ea0:	00014e75 	.word	0x00014e75

00014ea4 <Timer::SetTimer(unsigned long, TimerInterface::TimerIsrCondition, TimerInterface::MatchControlRegister)>:
  ///
  /// @param ticks the count of the timer register (TC) to have an ISR fire
  /// @param condition the condition for which a timer interrupt will occur
  /// @param match_register which match register (from 0 to 3) should be used
  ///                       for holding the ticks for the condition.
  void SetTimer(uint32_t ticks, TimerIsrCondition condition,
   14ea4:	b570      	push	{r4, r5, r6, lr}
   14ea6:	b086      	sub	sp, #24
   14ea8:	4676      	mov	r6, lr
   14eaa:	9003      	str	r0, [sp, #12]
   14eac:	9102      	str	r1, [sp, #8]
   14eae:	4611      	mov	r1, r2
   14eb0:	461a      	mov	r2, r3
   14eb2:	460b      	mov	r3, r1
   14eb4:	f88d 3007 	strb.w	r3, [sp, #7]
   14eb8:	4613      	mov	r3, r2
   14eba:	f88d 3006 	strb.w	r3, [sp, #6]
   14ebe:	4633      	mov	r3, r6
   14ec0:	4619      	mov	r1, r3
   14ec2:	4832      	ldr	r0, [pc, #200]	; (14f8c <Timer::SetTimer(unsigned long, TimerInterface::TimerIsrCondition, TimerInterface::MatchControlRegister)+0xe8>)
   14ec4:	f001 fa00 	bl	162c8 <__cyg_profile_func_enter>
                MatchControlRegister match_register = kMat0) override final
  {
    static constexpr uint8_t kClearMode = 0b0111;

    uint8_t match_value = util::Value(match_register);
   14ec8:	f89d 3006 	ldrb.w	r3, [sp, #6]
   14ecc:	4618      	mov	r0, r3
   14ece:	f7ff ffd1 	bl	14e74 <unsigned char util::Value<TimerInterface::MatchControlRegister, unsigned char>(TimerInterface::MatchControlRegister)>
   14ed2:	4603      	mov	r3, r0
   14ed4:	f88d 3017 	strb.w	r3, [sp, #23]
    tim_register[channel_]->MCR &= ~(kClearMode << match_value);
   14ed8:	9b03      	ldr	r3, [sp, #12]
   14eda:	7a1b      	ldrb	r3, [r3, #8]
   14edc:	461a      	mov	r2, r3
   14ede:	4b2c      	ldr	r3, [pc, #176]	; (14f90 <Timer::SetTimer(unsigned long, TimerInterface::TimerIsrCondition, TimerInterface::MatchControlRegister)+0xec>)
   14ee0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   14ee4:	695a      	ldr	r2, [r3, #20]
   14ee6:	f89d 3017 	ldrb.w	r3, [sp, #23]
   14eea:	2107      	movs	r1, #7
   14eec:	fa01 f303 	lsl.w	r3, r1, r3
   14ef0:	43db      	mvns	r3, r3
   14ef2:	4619      	mov	r1, r3
   14ef4:	9b03      	ldr	r3, [sp, #12]
   14ef6:	7a1b      	ldrb	r3, [r3, #8]
   14ef8:	4618      	mov	r0, r3
   14efa:	4b25      	ldr	r3, [pc, #148]	; (14f90 <Timer::SetTimer(unsigned long, TimerInterface::TimerIsrCondition, TimerInterface::MatchControlRegister)+0xec>)
   14efc:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   14f00:	400a      	ands	r2, r1
   14f02:	615a      	str	r2, [r3, #20]
    tim_register[channel_]->MCR |= condition << match_value;
   14f04:	9b03      	ldr	r3, [sp, #12]
   14f06:	7a1b      	ldrb	r3, [r3, #8]
   14f08:	461a      	mov	r2, r3
   14f0a:	4b21      	ldr	r3, [pc, #132]	; (14f90 <Timer::SetTimer(unsigned long, TimerInterface::TimerIsrCondition, TimerInterface::MatchControlRegister)+0xec>)
   14f0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   14f10:	695a      	ldr	r2, [r3, #20]
   14f12:	f89d 1007 	ldrb.w	r1, [sp, #7]
   14f16:	f89d 3017 	ldrb.w	r3, [sp, #23]
   14f1a:	fa01 f303 	lsl.w	r3, r1, r3
   14f1e:	4619      	mov	r1, r3
   14f20:	9b03      	ldr	r3, [sp, #12]
   14f22:	7a1b      	ldrb	r3, [r3, #8]
   14f24:	4618      	mov	r0, r3
   14f26:	4b1a      	ldr	r3, [pc, #104]	; (14f90 <Timer::SetTimer(unsigned long, TimerInterface::TimerIsrCondition, TimerInterface::MatchControlRegister)+0xec>)
   14f28:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   14f2c:	430a      	orrs	r2, r1
   14f2e:	615a      	str	r2, [r3, #20]
    *match[channel_][match_value / 3] |= (((ticks / 2)) << 0);
   14f30:	9b03      	ldr	r3, [sp, #12]
   14f32:	7a1b      	ldrb	r3, [r3, #8]
   14f34:	4618      	mov	r0, r3
   14f36:	f89d 3017 	ldrb.w	r3, [sp, #23]
   14f3a:	4a16      	ldr	r2, [pc, #88]	; (14f94 <Timer::SetTimer(unsigned long, TimerInterface::TimerIsrCondition, TimerInterface::MatchControlRegister)+0xf0>)
   14f3c:	fba2 2303 	umull	r2, r3, r2, r3
   14f40:	085b      	lsrs	r3, r3, #1
   14f42:	b2db      	uxtb	r3, r3
   14f44:	4619      	mov	r1, r3
   14f46:	4a14      	ldr	r2, [pc, #80]	; (14f98 <Timer::SetTimer(unsigned long, TimerInterface::TimerIsrCondition, TimerInterface::MatchControlRegister)+0xf4>)
   14f48:	0083      	lsls	r3, r0, #2
   14f4a:	440b      	add	r3, r1
   14f4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14f50:	6819      	ldr	r1, [r3, #0]
   14f52:	9b02      	ldr	r3, [sp, #8]
   14f54:	085a      	lsrs	r2, r3, #1
   14f56:	9b03      	ldr	r3, [sp, #12]
   14f58:	7a1b      	ldrb	r3, [r3, #8]
   14f5a:	461d      	mov	r5, r3
   14f5c:	f89d 3017 	ldrb.w	r3, [sp, #23]
   14f60:	480c      	ldr	r0, [pc, #48]	; (14f94 <Timer::SetTimer(unsigned long, TimerInterface::TimerIsrCondition, TimerInterface::MatchControlRegister)+0xf0>)
   14f62:	fba0 0303 	umull	r0, r3, r0, r3
   14f66:	085b      	lsrs	r3, r3, #1
   14f68:	b2db      	uxtb	r3, r3
   14f6a:	461c      	mov	r4, r3
   14f6c:	480a      	ldr	r0, [pc, #40]	; (14f98 <Timer::SetTimer(unsigned long, TimerInterface::TimerIsrCondition, TimerInterface::MatchControlRegister)+0xf4>)
   14f6e:	00ab      	lsls	r3, r5, #2
   14f70:	4423      	add	r3, r4
   14f72:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
   14f76:	430a      	orrs	r2, r1
   14f78:	601a      	str	r2, [r3, #0]
   14f7a:	4633      	mov	r3, r6
   14f7c:	4619      	mov	r1, r3
   14f7e:	4803      	ldr	r0, [pc, #12]	; (14f8c <Timer::SetTimer(unsigned long, TimerInterface::TimerIsrCondition, TimerInterface::MatchControlRegister)+0xe8>)
   14f80:	f001 f9b6 	bl	162f0 <__cyg_profile_func_exit>
  }
   14f84:	bf00      	nop
   14f86:	b006      	add	sp, #24
   14f88:	bd70      	pop	{r4, r5, r6, pc}
   14f8a:	bf00      	nop
   14f8c:	00014ea5 	.word	0x00014ea5
   14f90:	10000480 	.word	0x10000480
   14f94:	aaaaaaab 	.word	0xaaaaaaab
   14f98:	100013d8 	.word	0x100013d8

00014f9c <Timer::GetTimer()>:

  [[gnu::always_inline]] uint32_t GetTimer() override final {
   14f9c:	b530      	push	{r4, r5, lr}
   14f9e:	b083      	sub	sp, #12
   14fa0:	4675      	mov	r5, lr
   14fa2:	9001      	str	r0, [sp, #4]
   14fa4:	462b      	mov	r3, r5
   14fa6:	4619      	mov	r1, r3
   14fa8:	4809      	ldr	r0, [pc, #36]	; (14fd0 <Timer::GetTimer()+0x34>)
   14faa:	f001 f98d 	bl	162c8 <__cyg_profile_func_enter>
    return tim_register[channel_]->TC;
   14fae:	9b01      	ldr	r3, [sp, #4]
   14fb0:	7a1b      	ldrb	r3, [r3, #8]
   14fb2:	461a      	mov	r2, r3
   14fb4:	4b07      	ldr	r3, [pc, #28]	; (14fd4 <Timer::GetTimer()+0x38>)
   14fb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   14fba:	689c      	ldr	r4, [r3, #8]
   14fbc:	462b      	mov	r3, r5
   14fbe:	4619      	mov	r1, r3
   14fc0:	4803      	ldr	r0, [pc, #12]	; (14fd0 <Timer::GetTimer()+0x34>)
   14fc2:	f001 f995 	bl	162f0 <__cyg_profile_func_exit>
   14fc6:	4623      	mov	r3, r4
  }
   14fc8:	4618      	mov	r0, r3
   14fca:	b003      	add	sp, #12
   14fcc:	bd30      	pop	{r4, r5, pc}
   14fce:	bf00      	nop
   14fd0:	00014f9d 	.word	0x00014f9d
   14fd4:	10000480 	.word	0x10000480

00014fd8 <Uart::SetBaudRate(unsigned long)>:
  constexpr Uart(Channels mode, PinInterface * tx_pin, PinInterface * rx_pin)
      : channel_(static_cast<uint8_t>(mode)), tx_(tx_pin), rx_(rx_pin)
  {
  }

  void SetBaudRate(uint32_t baud_rate) override
   14fd8:	b510      	push	{r4, lr}
   14fda:	b088      	sub	sp, #32
   14fdc:	4674      	mov	r4, lr
   14fde:	9001      	str	r0, [sp, #4]
   14fe0:	9100      	str	r1, [sp, #0]
   14fe2:	4623      	mov	r3, r4
   14fe4:	4619      	mov	r1, r3
   14fe6:	482d      	ldr	r0, [pc, #180]	; (1509c <Uart::SetBaudRate(unsigned long)+0xc4>)
   14fe8:	f001 f96e 	bl	162c8 <__cyg_profile_func_enter>
  {
    constexpr uint8_t kDlabBit = (1 << 7);
   14fec:	2380      	movs	r3, #128	; 0x80
   14fee:	f88d 301f 	strb.w	r3, [sp, #31]
    float baudrate             = static_cast<float>(baud_rate);
   14ff2:	9b00      	ldr	r3, [sp, #0]
   14ff4:	ee07 3a90 	vmov	s15, r3
   14ff8:	eef8 7a67 	vcvt.f32.u32	s15, s15
   14ffc:	edcd 7a06 	vstr	s15, [sp, #24]
    UartCalibration_t dividers = GenerateUartCalibration(baudrate);
   15000:	ab02      	add	r3, sp, #8
   15002:	ed9d 0a06 	vldr	s0, [sp, #24]
   15006:	9901      	ldr	r1, [sp, #4]
   15008:	4618      	mov	r0, r3
   1500a:	f000 fb2d 	bl	15668 <Uart::GenerateUartCalibration(float)>

    uint8_t dlm = static_cast<uint8_t>((dividers.divide_latch >> 8) & 0xFF);
   1500e:	9b02      	ldr	r3, [sp, #8]
   15010:	0a1b      	lsrs	r3, r3, #8
   15012:	f88d 3017 	strb.w	r3, [sp, #23]
    uint8_t dll = static_cast<uint8_t>(dividers.divide_latch & 0xFF);
   15016:	9b02      	ldr	r3, [sp, #8]
   15018:	f88d 3016 	strb.w	r3, [sp, #22]
    uint8_t fdr = static_cast<uint8_t>((dividers.multiply & 0xF) << 4 |
   1501c:	9b04      	ldr	r3, [sp, #16]
   1501e:	b2db      	uxtb	r3, r3
   15020:	011b      	lsls	r3, r3, #4
   15022:	b2da      	uxtb	r2, r3
                                       (dividers.divide_add & 0xF));
   15024:	9b03      	ldr	r3, [sp, #12]
   15026:	b2db      	uxtb	r3, r3
   15028:	f003 030f 	and.w	r3, r3, #15
   1502c:	b2db      	uxtb	r3, r3
    uint8_t fdr = static_cast<uint8_t>((dividers.multiply & 0xF) << 4 |
   1502e:	4313      	orrs	r3, r2
   15030:	f88d 3015 	strb.w	r3, [sp, #21]

    // Set baud rate
    uart[channel_]->LCR = kDlabBit;
   15034:	9b01      	ldr	r3, [sp, #4]
   15036:	7a1b      	ldrb	r3, [r3, #8]
   15038:	461a      	mov	r2, r3
   1503a:	4b19      	ldr	r3, [pc, #100]	; (150a0 <Uart::SetBaudRate(unsigned long)+0xc8>)
   1503c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   15040:	2280      	movs	r2, #128	; 0x80
   15042:	731a      	strb	r2, [r3, #12]
    uart[channel_]->DLM = dlm;
   15044:	9b01      	ldr	r3, [sp, #4]
   15046:	7a1b      	ldrb	r3, [r3, #8]
   15048:	461a      	mov	r2, r3
   1504a:	4b15      	ldr	r3, [pc, #84]	; (150a0 <Uart::SetBaudRate(unsigned long)+0xc8>)
   1504c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   15050:	f89d 2017 	ldrb.w	r2, [sp, #23]
   15054:	711a      	strb	r2, [r3, #4]
    uart[channel_]->DLL = dll;
   15056:	9b01      	ldr	r3, [sp, #4]
   15058:	7a1b      	ldrb	r3, [r3, #8]
   1505a:	461a      	mov	r2, r3
   1505c:	4b10      	ldr	r3, [pc, #64]	; (150a0 <Uart::SetBaudRate(unsigned long)+0xc8>)
   1505e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   15062:	f89d 2016 	ldrb.w	r2, [sp, #22]
   15066:	701a      	strb	r2, [r3, #0]
    uart[channel_]->FDR = fdr;
   15068:	9b01      	ldr	r3, [sp, #4]
   1506a:	7a1b      	ldrb	r3, [r3, #8]
   1506c:	461a      	mov	r2, r3
   1506e:	4b0c      	ldr	r3, [pc, #48]	; (150a0 <Uart::SetBaudRate(unsigned long)+0xc8>)
   15070:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   15074:	f89d 2015 	ldrb.w	r2, [sp, #21]
   15078:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    uart[channel_]->LCR = kStandardUart;
   1507c:	9b01      	ldr	r3, [sp, #4]
   1507e:	7a1b      	ldrb	r3, [r3, #8]
   15080:	461a      	mov	r2, r3
   15082:	4b07      	ldr	r3, [pc, #28]	; (150a0 <Uart::SetBaudRate(unsigned long)+0xc8>)
   15084:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   15088:	2203      	movs	r2, #3
   1508a:	731a      	strb	r2, [r3, #12]
   1508c:	4623      	mov	r3, r4
   1508e:	4619      	mov	r1, r3
   15090:	4802      	ldr	r0, [pc, #8]	; (1509c <Uart::SetBaudRate(unsigned long)+0xc4>)
   15092:	f001 f92d 	bl	162f0 <__cyg_profile_func_exit>
  }
   15096:	bf00      	nop
   15098:	b008      	add	sp, #32
   1509a:	bd10      	pop	{r4, pc}
   1509c:	00014fd9 	.word	0x00014fd9
   150a0:	10000490 	.word	0x10000490

000150a4 <Uart::Initialize(unsigned long)>:

  bool Initialize(uint32_t baud_rate) override
   150a4:	b530      	push	{r4, r5, lr}
   150a6:	b085      	sub	sp, #20
   150a8:	4675      	mov	r5, lr
   150aa:	9001      	str	r0, [sp, #4]
   150ac:	9100      	str	r1, [sp, #0]
   150ae:	462b      	mov	r3, r5
   150b0:	4619      	mov	r1, r3
   150b2:	4830      	ldr	r0, [pc, #192]	; (15174 <Uart::Initialize(unsigned long)+0xd0>)
   150b4:	f001 f908 	bl	162c8 <__cyg_profile_func_enter>
  {
    constexpr uint8_t kFIFOEnableAndReset = 0b111;
   150b8:	2307      	movs	r3, #7
   150ba:	f88d 300f 	strb.w	r3, [sp, #15]
    // Powering the port
    PowerUpPeripheral(kPowerbit[channel_]);
   150be:	9b01      	ldr	r3, [sp, #4]
   150c0:	1d18      	adds	r0, r3, #4
   150c2:	9b01      	ldr	r3, [sp, #4]
   150c4:	685b      	ldr	r3, [r3, #4]
   150c6:	3314      	adds	r3, #20
   150c8:	681b      	ldr	r3, [r3, #0]
   150ca:	9a01      	ldr	r2, [sp, #4]
   150cc:	7a12      	ldrb	r2, [r2, #8]
   150ce:	0092      	lsls	r2, r2, #2
   150d0:	4929      	ldr	r1, [pc, #164]	; (15178 <Uart::Initialize(unsigned long)+0xd4>)
   150d2:	440a      	add	r2, r1
   150d4:	4611      	mov	r1, r2
   150d6:	4798      	blx	r3
    // Setting the pin functions and modes
    rx_->SetPinFunction(kRxUartPortFunction[channel_]);
   150d8:	9b01      	ldr	r3, [sp, #4]
   150da:	6918      	ldr	r0, [r3, #16]
   150dc:	9b01      	ldr	r3, [sp, #4]
   150de:	691b      	ldr	r3, [r3, #16]
   150e0:	681b      	ldr	r3, [r3, #0]
   150e2:	681b      	ldr	r3, [r3, #0]
   150e4:	9a01      	ldr	r2, [sp, #4]
   150e6:	7a12      	ldrb	r2, [r2, #8]
   150e8:	4611      	mov	r1, r2
   150ea:	4a24      	ldr	r2, [pc, #144]	; (1517c <Uart::Initialize(unsigned long)+0xd8>)
   150ec:	5c52      	ldrb	r2, [r2, r1]
   150ee:	4611      	mov	r1, r2
   150f0:	4798      	blx	r3
    tx_->SetPinFunction(kTxUartPortFunction[channel_]);
   150f2:	9b01      	ldr	r3, [sp, #4]
   150f4:	68d8      	ldr	r0, [r3, #12]
   150f6:	9b01      	ldr	r3, [sp, #4]
   150f8:	68db      	ldr	r3, [r3, #12]
   150fa:	681b      	ldr	r3, [r3, #0]
   150fc:	681b      	ldr	r3, [r3, #0]
   150fe:	9a01      	ldr	r2, [sp, #4]
   15100:	7a12      	ldrb	r2, [r2, #8]
   15102:	4611      	mov	r1, r2
   15104:	4a1e      	ldr	r2, [pc, #120]	; (15180 <Uart::Initialize(unsigned long)+0xdc>)
   15106:	5c52      	ldrb	r2, [r2, r1]
   15108:	4611      	mov	r1, r2
   1510a:	4798      	blx	r3
    rx_->SetMode(PinInterface::Mode::kPullUp);
   1510c:	9b01      	ldr	r3, [sp, #4]
   1510e:	691a      	ldr	r2, [r3, #16]
   15110:	9b01      	ldr	r3, [sp, #4]
   15112:	691b      	ldr	r3, [r3, #16]
   15114:	681b      	ldr	r3, [r3, #0]
   15116:	3304      	adds	r3, #4
   15118:	681b      	ldr	r3, [r3, #0]
   1511a:	2102      	movs	r1, #2
   1511c:	4610      	mov	r0, r2
   1511e:	4798      	blx	r3
    tx_->SetMode(PinInterface::Mode::kPullUp);
   15120:	9b01      	ldr	r3, [sp, #4]
   15122:	68da      	ldr	r2, [r3, #12]
   15124:	9b01      	ldr	r3, [sp, #4]
   15126:	68db      	ldr	r3, [r3, #12]
   15128:	681b      	ldr	r3, [r3, #0]
   1512a:	3304      	adds	r3, #4
   1512c:	681b      	ldr	r3, [r3, #0]
   1512e:	2102      	movs	r1, #2
   15130:	4610      	mov	r0, r2
   15132:	4798      	blx	r3
    // Baud rate setting
    SetBaudRate(baud_rate);
   15134:	9900      	ldr	r1, [sp, #0]
   15136:	9801      	ldr	r0, [sp, #4]
   15138:	f7ff ff4e 	bl	14fd8 <Uart::SetBaudRate(unsigned long)>
    uart[channel_]->FCR |= kFIFOEnableAndReset;
   1513c:	9b01      	ldr	r3, [sp, #4]
   1513e:	7a1b      	ldrb	r3, [r3, #8]
   15140:	461a      	mov	r2, r3
   15142:	4b10      	ldr	r3, [pc, #64]	; (15184 <Uart::Initialize(unsigned long)+0xe0>)
   15144:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   15148:	7a1b      	ldrb	r3, [r3, #8]
   1514a:	b2da      	uxtb	r2, r3
   1514c:	9b01      	ldr	r3, [sp, #4]
   1514e:	7a1b      	ldrb	r3, [r3, #8]
   15150:	4619      	mov	r1, r3
   15152:	4b0c      	ldr	r3, [pc, #48]	; (15184 <Uart::Initialize(unsigned long)+0xe0>)
   15154:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   15158:	f042 0207 	orr.w	r2, r2, #7
   1515c:	b2d2      	uxtb	r2, r2
   1515e:	721a      	strb	r2, [r3, #8]
    return true;
   15160:	2401      	movs	r4, #1
   15162:	462b      	mov	r3, r5
   15164:	4619      	mov	r1, r3
   15166:	4803      	ldr	r0, [pc, #12]	; (15174 <Uart::Initialize(unsigned long)+0xd0>)
   15168:	f001 f8c2 	bl	162f0 <__cyg_profile_func_exit>
   1516c:	4623      	mov	r3, r4
  }
   1516e:	4618      	mov	r0, r3
   15170:	b005      	add	sp, #20
   15172:	bd30      	pop	{r4, r5, pc}
   15174:	000150a5 	.word	0x000150a5
   15178:	0001a3bc 	.word	0x0001a3bc
   1517c:	0001a3b8 	.word	0x0001a3b8
   15180:	0001a3b4 	.word	0x0001a3b4
   15184:	10000490 	.word	0x10000490

00015188 <Uart::Send(unsigned char)::{lambda()#1}::operator()() const>:

  void Send(uint8_t data) override
  {
    uart[channel_]->THR              = data;
    auto wait_for_transfer_to_finish = [this]() -> bool {
   15188:	b530      	push	{r4, r5, lr}
   1518a:	b083      	sub	sp, #12
   1518c:	4675      	mov	r5, lr
   1518e:	9001      	str	r0, [sp, #4]
   15190:	462b      	mov	r3, r5
   15192:	4619      	mov	r1, r3
   15194:	480d      	ldr	r0, [pc, #52]	; (151cc <Uart::Send(unsigned char)::{lambda()#1}::operator()() const+0x44>)
   15196:	f001 f897 	bl	162c8 <__cyg_profile_func_enter>
   1519a:	9b01      	ldr	r3, [sp, #4]
   1519c:	681b      	ldr	r3, [r3, #0]
      return (uart[channel_]->LSR & (1 << 5));
   1519e:	7a1b      	ldrb	r3, [r3, #8]
   151a0:	461a      	mov	r2, r3
   151a2:	4b0b      	ldr	r3, [pc, #44]	; (151d0 <Uart::Send(unsigned char)::{lambda()#1}::operator()() const+0x48>)
   151a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   151a8:	7d1b      	ldrb	r3, [r3, #20]
   151aa:	b2db      	uxtb	r3, r3
   151ac:	f003 0320 	and.w	r3, r3, #32
   151b0:	2b00      	cmp	r3, #0
   151b2:	bf14      	ite	ne
   151b4:	2301      	movne	r3, #1
   151b6:	2300      	moveq	r3, #0
   151b8:	b2dc      	uxtb	r4, r3
   151ba:	462b      	mov	r3, r5
   151bc:	4619      	mov	r1, r3
   151be:	4803      	ldr	r0, [pc, #12]	; (151cc <Uart::Send(unsigned char)::{lambda()#1}::operator()() const+0x44>)
   151c0:	f001 f896 	bl	162f0 <__cyg_profile_func_exit>
   151c4:	4623      	mov	r3, r4
    };
   151c6:	4618      	mov	r0, r3
   151c8:	b003      	add	sp, #12
   151ca:	bd30      	pop	{r4, r5, pc}
   151cc:	00015189 	.word	0x00015189
   151d0:	10000490 	.word	0x10000490

000151d4 <Uart::Send(unsigned char)>:
  void Send(uint8_t data) override
   151d4:	e92d 4830 	stmdb	sp!, {r4, r5, fp, lr}
   151d8:	b08a      	sub	sp, #40	; 0x28
   151da:	4675      	mov	r5, lr
   151dc:	9001      	str	r0, [sp, #4]
   151de:	460b      	mov	r3, r1
   151e0:	f88d 3003 	strb.w	r3, [sp, #3]
   151e4:	462b      	mov	r3, r5
   151e6:	4619      	mov	r1, r3
   151e8:	4831      	ldr	r0, [pc, #196]	; (152b0 <Uart::Send(unsigned char)+0xdc>)
   151ea:	f001 f86d 	bl	162c8 <__cyg_profile_func_enter>
    uart[channel_]->THR              = data;
   151ee:	9b01      	ldr	r3, [sp, #4]
   151f0:	7a1b      	ldrb	r3, [r3, #8]
   151f2:	461a      	mov	r2, r3
   151f4:	4b2f      	ldr	r3, [pc, #188]	; (152b4 <Uart::Send(unsigned char)+0xe0>)
   151f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   151fa:	f89d 2003 	ldrb.w	r2, [sp, #3]
   151fe:	701a      	strb	r2, [r3, #0]
    };
   15200:	9b01      	ldr	r3, [sp, #4]
   15202:	9304      	str	r3, [sp, #16]
   15204:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   15208:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   1520c:	e9cd 3408 	strd	r3, r4, [sp, #32]
   15210:	9b04      	ldr	r3, [sp, #16]
   15212:	9303      	str	r3, [sp, #12]
   15214:	462b      	mov	r3, r5
   15216:	4619      	mov	r1, r3
   15218:	4827      	ldr	r0, [pc, #156]	; (152b8 <Uart::Send(unsigned char)+0xe4>)
   1521a:	f001 f855 	bl	162c8 <__cyg_profile_func_enter>
  uint64_t timeout_time = 0;
   1521e:	f04f 0300 	mov.w	r3, #0
   15222:	f04f 0400 	mov.w	r4, #0
   15226:	e9cd 3406 	strd	r3, r4, [sp, #24]
  if (timeout == kMaxWait)
   1522a:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   1522e:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
   15232:	bf08      	it	eq
   15234:	f1b3 3fff 	cmpeq.w	r3, #4294967295	; 0xffffffff
   15238:	d106      	bne.n	15248 <Uart::Send(unsigned char)+0x74>
    timeout_time = kMaxWait;
   1523a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1523e:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   15242:	e9cd 3406 	strd	r3, r4, [sp, #24]
   15246:	e00b      	b.n	15260 <Uart::Send(unsigned char)+0x8c>
    timeout_time = Milliseconds() + timeout;
   15248:	f7fb fdde 	bl	10e08 <Milliseconds()>
   1524c:	460a      	mov	r2, r1
   1524e:	4601      	mov	r1, r0
   15250:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   15254:	eb13 0b01 	adds.w	fp, r3, r1
   15258:	eb44 0c02 	adc.w	ip, r4, r2
   1525c:	e9cd bc06 	strd	fp, ip, [sp, #24]
  Status status = Status::kTimedOut;
   15260:	2301      	movs	r3, #1
   15262:	9305      	str	r3, [sp, #20]
  while (Milliseconds() < timeout_time)
   15264:	f7fb fdd0 	bl	10e08 <Milliseconds()>
   15268:	460a      	mov	r2, r1
   1526a:	4601      	mov	r1, r0
   1526c:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
   15270:	42a2      	cmp	r2, r4
   15272:	bf08      	it	eq
   15274:	4299      	cmpeq	r1, r3
   15276:	bf34      	ite	cc
   15278:	2301      	movcc	r3, #1
   1527a:	2300      	movcs	r3, #0
   1527c:	b2db      	uxtb	r3, r3
   1527e:	2b00      	cmp	r3, #0
   15280:	d008      	beq.n	15294 <Uart::Send(unsigned char)+0xc0>
    if (is_done())
   15282:	ab03      	add	r3, sp, #12
   15284:	4618      	mov	r0, r3
   15286:	f7ff ff7f 	bl	15188 <Uart::Send(unsigned char)::{lambda()#1}::operator()() const>
   1528a:	4603      	mov	r3, r0
   1528c:	2b00      	cmp	r3, #0
   1528e:	d0e9      	beq.n	15264 <Uart::Send(unsigned char)+0x90>
      status = Status::kSuccess;
   15290:	2300      	movs	r3, #0
   15292:	9305      	str	r3, [sp, #20]
   15294:	462b      	mov	r3, r5
   15296:	4619      	mov	r1, r3
   15298:	4807      	ldr	r0, [pc, #28]	; (152b8 <Uart::Send(unsigned char)+0xe4>)
   1529a:	f001 f829 	bl	162f0 <__cyg_profile_func_exit>
   1529e:	462b      	mov	r3, r5
   152a0:	4619      	mov	r1, r3
   152a2:	4803      	ldr	r0, [pc, #12]	; (152b0 <Uart::Send(unsigned char)+0xdc>)
   152a4:	f001 f824 	bl	162f0 <__cyg_profile_func_exit>
    Wait(kMaxWait, wait_for_transfer_to_finish);
  }
   152a8:	bf00      	nop
   152aa:	b00a      	add	sp, #40	; 0x28
   152ac:	e8bd 8830 	ldmia.w	sp!, {r4, r5, fp, pc}
   152b0:	000151d5 	.word	0x000151d5
   152b4:	10000490 	.word	0x10000490
   152b8:	00015ad1 	.word	0x00015ad1

000152bc <Uart::Receive(unsigned long)::{lambda()#1}::operator()() const>:

  uint8_t Receive([[maybe_unused]] uint32_t timeout = 0x7FFFFFFF) override
  {
    uint8_t receiver   = '\xFF';
    auto byte_recieved = [this]() -> bool {
   152bc:	b530      	push	{r4, r5, lr}
   152be:	b083      	sub	sp, #12
   152c0:	4675      	mov	r5, lr
   152c2:	9001      	str	r0, [sp, #4]
   152c4:	462b      	mov	r3, r5
   152c6:	4619      	mov	r1, r3
   152c8:	480d      	ldr	r0, [pc, #52]	; (15300 <Uart::Receive(unsigned long)::{lambda()#1}::operator()() const+0x44>)
   152ca:	f000 fffd 	bl	162c8 <__cyg_profile_func_enter>
   152ce:	9b01      	ldr	r3, [sp, #4]
   152d0:	681b      	ldr	r3, [r3, #0]
      return (uart[channel_]->LSR & (1 << 0));
   152d2:	7a1b      	ldrb	r3, [r3, #8]
   152d4:	461a      	mov	r2, r3
   152d6:	4b0b      	ldr	r3, [pc, #44]	; (15304 <Uart::Receive(unsigned long)::{lambda()#1}::operator()() const+0x48>)
   152d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   152dc:	7d1b      	ldrb	r3, [r3, #20]
   152de:	b2db      	uxtb	r3, r3
   152e0:	f003 0301 	and.w	r3, r3, #1
   152e4:	2b00      	cmp	r3, #0
   152e6:	bf14      	ite	ne
   152e8:	2301      	movne	r3, #1
   152ea:	2300      	moveq	r3, #0
   152ec:	b2dc      	uxtb	r4, r3
   152ee:	462b      	mov	r3, r5
   152f0:	4619      	mov	r1, r3
   152f2:	4803      	ldr	r0, [pc, #12]	; (15300 <Uart::Receive(unsigned long)::{lambda()#1}::operator()() const+0x44>)
   152f4:	f000 fffc 	bl	162f0 <__cyg_profile_func_exit>
   152f8:	4623      	mov	r3, r4
    };
   152fa:	4618      	mov	r0, r3
   152fc:	b003      	add	sp, #12
   152fe:	bd30      	pop	{r4, r5, pc}
   15300:	000152bd 	.word	0x000152bd
   15304:	10000490 	.word	0x10000490

00015308 <Uart::Receive(unsigned long)>:
  uint8_t Receive([[maybe_unused]] uint32_t timeout = 0x7FFFFFFF) override
   15308:	e92d 4830 	stmdb	sp!, {r4, r5, fp, lr}
   1530c:	b08c      	sub	sp, #48	; 0x30
   1530e:	4675      	mov	r5, lr
   15310:	9001      	str	r0, [sp, #4]
   15312:	9100      	str	r1, [sp, #0]
   15314:	462b      	mov	r3, r5
   15316:	4619      	mov	r1, r3
   15318:	4836      	ldr	r0, [pc, #216]	; (153f4 <Uart::Receive(unsigned long)+0xec>)
   1531a:	f000 ffd5 	bl	162c8 <__cyg_profile_func_enter>
    uint8_t receiver   = '\xFF';
   1531e:	23ff      	movs	r3, #255	; 0xff
   15320:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
    };
   15324:	9b01      	ldr	r3, [sp, #4]
   15326:	9304      	str	r3, [sp, #16]

    Status status = Wait(timeout, byte_recieved);
   15328:	9b00      	ldr	r3, [sp, #0]
   1532a:	f04f 0400 	mov.w	r4, #0
   1532e:	e9cd 3408 	strd	r3, r4, [sp, #32]
   15332:	9b04      	ldr	r3, [sp, #16]
   15334:	9303      	str	r3, [sp, #12]
   15336:	462b      	mov	r3, r5
   15338:	4619      	mov	r1, r3
   1533a:	482f      	ldr	r0, [pc, #188]	; (153f8 <Uart::Receive(unsigned long)+0xf0>)
   1533c:	f000 ffc4 	bl	162c8 <__cyg_profile_func_enter>
  uint64_t timeout_time = 0;
   15340:	f04f 0300 	mov.w	r3, #0
   15344:	f04f 0400 	mov.w	r4, #0
   15348:	e9cd 3406 	strd	r3, r4, [sp, #24]
  if (timeout == kMaxWait)
   1534c:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   15350:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
   15354:	bf08      	it	eq
   15356:	f1b3 3fff 	cmpeq.w	r3, #4294967295	; 0xffffffff
   1535a:	d106      	bne.n	1536a <Uart::Receive(unsigned long)+0x62>
    timeout_time = kMaxWait;
   1535c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   15360:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   15364:	e9cd 3406 	strd	r3, r4, [sp, #24]
   15368:	e00b      	b.n	15382 <Uart::Receive(unsigned long)+0x7a>
    timeout_time = Milliseconds() + timeout;
   1536a:	f7fb fd4d 	bl	10e08 <Milliseconds()>
   1536e:	460a      	mov	r2, r1
   15370:	4601      	mov	r1, r0
   15372:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   15376:	eb13 0b01 	adds.w	fp, r3, r1
   1537a:	eb44 0c02 	adc.w	ip, r4, r2
   1537e:	e9cd bc06 	strd	fp, ip, [sp, #24]
  Status status = Status::kTimedOut;
   15382:	2301      	movs	r3, #1
   15384:	9305      	str	r3, [sp, #20]
  while (Milliseconds() < timeout_time)
   15386:	f7fb fd3f 	bl	10e08 <Milliseconds()>
   1538a:	460a      	mov	r2, r1
   1538c:	4601      	mov	r1, r0
   1538e:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
   15392:	42a2      	cmp	r2, r4
   15394:	bf08      	it	eq
   15396:	4299      	cmpeq	r1, r3
   15398:	bf34      	ite	cc
   1539a:	2301      	movcc	r3, #1
   1539c:	2300      	movcs	r3, #0
   1539e:	b2db      	uxtb	r3, r3
   153a0:	2b00      	cmp	r3, #0
   153a2:	d008      	beq.n	153b6 <Uart::Receive(unsigned long)+0xae>
    if (is_done())
   153a4:	ab03      	add	r3, sp, #12
   153a6:	4618      	mov	r0, r3
   153a8:	f7ff ff88 	bl	152bc <Uart::Receive(unsigned long)::{lambda()#1}::operator()() const>
   153ac:	4603      	mov	r3, r0
   153ae:	2b00      	cmp	r3, #0
   153b0:	d0e9      	beq.n	15386 <Uart::Receive(unsigned long)+0x7e>
      status = Status::kSuccess;
   153b2:	2300      	movs	r3, #0
   153b4:	9305      	str	r3, [sp, #20]
  return status;
   153b6:	9c05      	ldr	r4, [sp, #20]
   153b8:	462b      	mov	r3, r5
   153ba:	4619      	mov	r1, r3
   153bc:	480e      	ldr	r0, [pc, #56]	; (153f8 <Uart::Receive(unsigned long)+0xf0>)
   153be:	f000 ff97 	bl	162f0 <__cyg_profile_func_exit>
   153c2:	940a      	str	r4, [sp, #40]	; 0x28

    if (status == Status::kSuccess)
   153c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   153c6:	2b00      	cmp	r3, #0
   153c8:	d108      	bne.n	153dc <Uart::Receive(unsigned long)+0xd4>
    {
      receiver = static_cast<uint8_t>(uart[channel_]->RBR);
   153ca:	9b01      	ldr	r3, [sp, #4]
   153cc:	7a1b      	ldrb	r3, [r3, #8]
   153ce:	461a      	mov	r2, r3
   153d0:	4b0a      	ldr	r3, [pc, #40]	; (153fc <Uart::Receive(unsigned long)+0xf4>)
   153d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   153d6:	781b      	ldrb	r3, [r3, #0]
   153d8:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
    }
    return receiver;
   153dc:	f89d 402f 	ldrb.w	r4, [sp, #47]	; 0x2f
   153e0:	462b      	mov	r3, r5
   153e2:	4619      	mov	r1, r3
   153e4:	4803      	ldr	r0, [pc, #12]	; (153f4 <Uart::Receive(unsigned long)+0xec>)
   153e6:	f000 ff83 	bl	162f0 <__cyg_profile_func_exit>
   153ea:	4623      	mov	r3, r4
  }
   153ec:	4618      	mov	r0, r3
   153ee:	b00c      	add	sp, #48	; 0x30
   153f0:	e8bd 8830 	ldmia.w	sp!, {r4, r5, fp, pc}
   153f4:	00015309 	.word	0x00015309
   153f8:	00015b79 	.word	0x00015b79
   153fc:	10000490 	.word	0x10000490

00015400 <Uart::FindClosestFractional(float)>:

 private:
  UartCalibration_t FindClosestFractional(float decimal)
   15400:	b510      	push	{r4, lr}
   15402:	b08a      	sub	sp, #40	; 0x28
   15404:	4674      	mov	r4, lr
   15406:	9003      	str	r0, [sp, #12]
   15408:	9102      	str	r1, [sp, #8]
   1540a:	ed8d 0a01 	vstr	s0, [sp, #4]
   1540e:	4623      	mov	r3, r4
   15410:	4619      	mov	r1, r3
   15412:	4838      	ldr	r0, [pc, #224]	; (154f4 <Uart::FindClosestFractional(float)+0xf4>)
   15414:	f000 ff58 	bl	162c8 <__cyg_profile_func_enter>
  {
    UartCalibration_t result;
   15418:	9b03      	ldr	r3, [sp, #12]
   1541a:	2200      	movs	r2, #0
   1541c:	601a      	str	r2, [r3, #0]
   1541e:	9b03      	ldr	r3, [sp, #12]
   15420:	2200      	movs	r2, #0
   15422:	605a      	str	r2, [r3, #4]
   15424:	9b03      	ldr	r3, [sp, #12]
   15426:	2201      	movs	r2, #1
   15428:	609a      	str	r2, [r3, #8]
    bool finished = false;
   1542a:	2300      	movs	r3, #0
   1542c:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    for (int div = 0; div < 15 && !finished; div++)
   15430:	2300      	movs	r3, #0
   15432:	9308      	str	r3, [sp, #32]
   15434:	9b08      	ldr	r3, [sp, #32]
   15436:	2b0e      	cmp	r3, #14
   15438:	dc52      	bgt.n	154e0 <Uart::FindClosestFractional(float)+0xe0>
   1543a:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   1543e:	2b00      	cmp	r3, #0
   15440:	d14e      	bne.n	154e0 <Uart::FindClosestFractional(float)+0xe0>
    {
      for (int mul = div + 1; mul < 15 && !finished; mul++)
   15442:	9b08      	ldr	r3, [sp, #32]
   15444:	3301      	adds	r3, #1
   15446:	9307      	str	r3, [sp, #28]
   15448:	9b07      	ldr	r3, [sp, #28]
   1544a:	2b0e      	cmp	r3, #14
   1544c:	dc44      	bgt.n	154d8 <Uart::FindClosestFractional(float)+0xd8>
   1544e:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   15452:	2b00      	cmp	r3, #0
   15454:	d140      	bne.n	154d8 <Uart::FindClosestFractional(float)+0xd8>
      {
        float divf         = static_cast<float>(div);
   15456:	9b08      	ldr	r3, [sp, #32]
   15458:	ee07 3a90 	vmov	s15, r3
   1545c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   15460:	edcd 7a06 	vstr	s15, [sp, #24]
        float mulf         = static_cast<float>(mul);
   15464:	9b07      	ldr	r3, [sp, #28]
   15466:	ee07 3a90 	vmov	s15, r3
   1546a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   1546e:	edcd 7a05 	vstr	s15, [sp, #20]
        float test_decimal = 1.0f + divf / mulf;
   15472:	eddd 6a06 	vldr	s13, [sp, #24]
   15476:	ed9d 7a05 	vldr	s14, [sp, #20]
   1547a:	eec6 7a87 	vdiv.f32	s15, s13, s14
   1547e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
   15482:	ee77 7a87 	vadd.f32	s15, s15, s14
   15486:	edcd 7a04 	vstr	s15, [sp, #16]
        if (decimal <= test_decimal + kThreshold &&
   1548a:	eddd 7a04 	vldr	s15, [sp, #16]
   1548e:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 154f8 <Uart::FindClosestFractional(float)+0xf8>
   15492:	ee77 7a87 	vadd.f32	s15, s15, s14
   15496:	ed9d 7a01 	vldr	s14, [sp, #4]
   1549a:	eeb4 7ae7 	vcmpe.f32	s14, s15
   1549e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   154a2:	d815      	bhi.n	154d0 <Uart::FindClosestFractional(float)+0xd0>
            decimal >= test_decimal - kThreshold)
   154a4:	eddd 7a04 	vldr	s15, [sp, #16]
   154a8:	ed9f 7a13 	vldr	s14, [pc, #76]	; 154f8 <Uart::FindClosestFractional(float)+0xf8>
   154ac:	ee77 7ac7 	vsub.f32	s15, s15, s14
        if (decimal <= test_decimal + kThreshold &&
   154b0:	ed9d 7a01 	vldr	s14, [sp, #4]
   154b4:	eeb4 7ae7 	vcmpe.f32	s14, s15
   154b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   154bc:	db08      	blt.n	154d0 <Uart::FindClosestFractional(float)+0xd0>
        {
          result.divide_add = div;
   154be:	9a08      	ldr	r2, [sp, #32]
   154c0:	9b03      	ldr	r3, [sp, #12]
   154c2:	605a      	str	r2, [r3, #4]
          result.multiply   = mul;
   154c4:	9a07      	ldr	r2, [sp, #28]
   154c6:	9b03      	ldr	r3, [sp, #12]
   154c8:	609a      	str	r2, [r3, #8]
          finished          = true;
   154ca:	2301      	movs	r3, #1
   154cc:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
      for (int mul = div + 1; mul < 15 && !finished; mul++)
   154d0:	9b07      	ldr	r3, [sp, #28]
   154d2:	3301      	adds	r3, #1
   154d4:	9307      	str	r3, [sp, #28]
   154d6:	e7b7      	b.n	15448 <Uart::FindClosestFractional(float)+0x48>
    for (int div = 0; div < 15 && !finished; div++)
   154d8:	9b08      	ldr	r3, [sp, #32]
   154da:	3301      	adds	r3, #1
   154dc:	9308      	str	r3, [sp, #32]
   154de:	e7a9      	b.n	15434 <Uart::FindClosestFractional(float)+0x34>
        }
      }
    }
    return result;
   154e0:	bf00      	nop
   154e2:	4623      	mov	r3, r4
   154e4:	4619      	mov	r1, r3
   154e6:	4803      	ldr	r0, [pc, #12]	; (154f4 <Uart::FindClosestFractional(float)+0xf4>)
   154e8:	f000 ff02 	bl	162f0 <__cyg_profile_func_exit>
   154ec:	bf00      	nop
  }
   154ee:	9803      	ldr	r0, [sp, #12]
   154f0:	b00a      	add	sp, #40	; 0x28
   154f2:	bd10      	pop	{r4, pc}
   154f4:	00015401 	.word	0x00015401
   154f8:	3d4ccccd 	.word	0x3d4ccccd

000154fc <Uart::DividerEstimate(float, float)>:

  float DividerEstimate(float baud_rate, float fraction_estimate = 1)
   154fc:	b510      	push	{r4, lr}
   154fe:	ed2d 8b02 	vpush	{d8}
   15502:	b086      	sub	sp, #24
   15504:	4674      	mov	r4, lr
   15506:	9003      	str	r0, [sp, #12]
   15508:	ed8d 0a02 	vstr	s0, [sp, #8]
   1550c:	edcd 0a01 	vstr	s1, [sp, #4]
   15510:	4623      	mov	r3, r4
   15512:	4619      	mov	r1, r3
   15514:	4815      	ldr	r0, [pc, #84]	; (1556c <Uart::DividerEstimate(float, float)+0x70>)
   15516:	f000 fed7 	bl	162c8 <__cyg_profile_func_enter>
  {
    float clock_frequency = static_cast<float>(GetPeripheralFrequency());
   1551a:	9b03      	ldr	r3, [sp, #12]
   1551c:	1d1a      	adds	r2, r3, #4
   1551e:	9b03      	ldr	r3, [sp, #12]
   15520:	685b      	ldr	r3, [r3, #4]
   15522:	3310      	adds	r3, #16
   15524:	681b      	ldr	r3, [r3, #0]
   15526:	4610      	mov	r0, r2
   15528:	4798      	blx	r3
   1552a:	ee07 0a90 	vmov	s15, r0
   1552e:	eef8 7a67 	vcvt.f32.u32	s15, s15
   15532:	edcd 7a05 	vstr	s15, [sp, #20]
    return clock_frequency / (16.0f * baud_rate * fraction_estimate);
   15536:	eddd 7a02 	vldr	s15, [sp, #8]
   1553a:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
   1553e:	ee27 7a87 	vmul.f32	s14, s15, s14
   15542:	eddd 7a01 	vldr	s15, [sp, #4]
   15546:	ee67 7a27 	vmul.f32	s15, s14, s15
   1554a:	ed9d 7a05 	vldr	s14, [sp, #20]
   1554e:	ee87 8a27 	vdiv.f32	s16, s14, s15
   15552:	4623      	mov	r3, r4
   15554:	4619      	mov	r1, r3
   15556:	4805      	ldr	r0, [pc, #20]	; (1556c <Uart::DividerEstimate(float, float)+0x70>)
   15558:	f000 feca 	bl	162f0 <__cyg_profile_func_exit>
   1555c:	eef0 7a48 	vmov.f32	s15, s16
  }
   15560:	eeb0 0a67 	vmov.f32	s0, s15
   15564:	b006      	add	sp, #24
   15566:	ecbd 8b02 	vpop	{d8}
   1556a:	bd10      	pop	{r4, pc}
   1556c:	000154fd 	.word	0x000154fd

00015570 <Uart::FractionalEstimate(float, float)>:

  float FractionalEstimate(float baud_rate, float divider)
   15570:	b510      	push	{r4, lr}
   15572:	ed2d 8b02 	vpush	{d8}
   15576:	b086      	sub	sp, #24
   15578:	4674      	mov	r4, lr
   1557a:	9003      	str	r0, [sp, #12]
   1557c:	ed8d 0a02 	vstr	s0, [sp, #8]
   15580:	edcd 0a01 	vstr	s1, [sp, #4]
   15584:	4623      	mov	r3, r4
   15586:	4619      	mov	r1, r3
   15588:	4815      	ldr	r0, [pc, #84]	; (155e0 <Uart::FractionalEstimate(float, float)+0x70>)
   1558a:	f000 fe9d 	bl	162c8 <__cyg_profile_func_enter>
  {
    float clock_frequency = static_cast<float>(GetPeripheralFrequency());
   1558e:	9b03      	ldr	r3, [sp, #12]
   15590:	1d1a      	adds	r2, r3, #4
   15592:	9b03      	ldr	r3, [sp, #12]
   15594:	685b      	ldr	r3, [r3, #4]
   15596:	3310      	adds	r3, #16
   15598:	681b      	ldr	r3, [r3, #0]
   1559a:	4610      	mov	r0, r2
   1559c:	4798      	blx	r3
   1559e:	ee07 0a90 	vmov	s15, r0
   155a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
   155a6:	edcd 7a05 	vstr	s15, [sp, #20]
    return clock_frequency / (16.0f * baud_rate * divider);
   155aa:	eddd 7a02 	vldr	s15, [sp, #8]
   155ae:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
   155b2:	ee27 7a87 	vmul.f32	s14, s15, s14
   155b6:	eddd 7a01 	vldr	s15, [sp, #4]
   155ba:	ee67 7a27 	vmul.f32	s15, s14, s15
   155be:	ed9d 7a05 	vldr	s14, [sp, #20]
   155c2:	ee87 8a27 	vdiv.f32	s16, s14, s15
   155c6:	4623      	mov	r3, r4
   155c8:	4619      	mov	r1, r3
   155ca:	4805      	ldr	r0, [pc, #20]	; (155e0 <Uart::FractionalEstimate(float, float)+0x70>)
   155cc:	f000 fe90 	bl	162f0 <__cyg_profile_func_exit>
   155d0:	eef0 7a48 	vmov.f32	s15, s16
  }
   155d4:	eeb0 0a67 	vmov.f32	s0, s15
   155d8:	b006      	add	sp, #24
   155da:	ecbd 8b02 	vpop	{d8}
   155de:	bd10      	pop	{r4, pc}
   155e0:	00015571 	.word	0x00015571

000155e4 <Uart::IsDecmial(float)>:

  bool IsDecmial(float value)
   155e4:	b530      	push	{r4, r5, lr}
   155e6:	b087      	sub	sp, #28
   155e8:	4675      	mov	r5, lr
   155ea:	9001      	str	r0, [sp, #4]
   155ec:	ed8d 0a00 	vstr	s0, [sp]
   155f0:	462b      	mov	r3, r5
   155f2:	4619      	mov	r1, r3
   155f4:	4819      	ldr	r0, [pc, #100]	; (1565c <Uart::IsDecmial(float)+0x78>)
   155f6:	f000 fe67 	bl	162c8 <__cyg_profile_func_enter>
  {
    bool result         = false;
   155fa:	2300      	movs	r3, #0
   155fc:	f88d 3017 	strb.w	r3, [sp, #23]
    float rounded_value = roundf(value);
   15600:	ed9d 0a00 	vldr	s0, [sp]
   15604:	f003 fae2 	bl	18bcc <roundf>
   15608:	ed8d 0a04 	vstr	s0, [sp, #16]
    float error         = value - rounded_value;
   1560c:	ed9d 7a00 	vldr	s14, [sp]
   15610:	eddd 7a04 	vldr	s15, [sp, #16]
   15614:	ee77 7a67 	vsub.f32	s15, s14, s15
   15618:	edcd 7a03 	vstr	s15, [sp, #12]
    if (-kThreshold <= error && error <= kThreshold)
   1561c:	eddd 7a03 	vldr	s15, [sp, #12]
   15620:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 15660 <Uart::IsDecmial(float)+0x7c>
   15624:	eef4 7ac7 	vcmpe.f32	s15, s14
   15628:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1562c:	db0b      	blt.n	15646 <Uart::IsDecmial(float)+0x62>
   1562e:	eddd 7a03 	vldr	s15, [sp, #12]
   15632:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 15664 <Uart::IsDecmial(float)+0x80>
   15636:	eef4 7ac7 	vcmpe.f32	s15, s14
   1563a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1563e:	d802      	bhi.n	15646 <Uart::IsDecmial(float)+0x62>
    {
      result = true;
   15640:	2301      	movs	r3, #1
   15642:	f88d 3017 	strb.w	r3, [sp, #23]
    }
    return result;
   15646:	f89d 4017 	ldrb.w	r4, [sp, #23]
   1564a:	462b      	mov	r3, r5
   1564c:	4619      	mov	r1, r3
   1564e:	4803      	ldr	r0, [pc, #12]	; (1565c <Uart::IsDecmial(float)+0x78>)
   15650:	f000 fe4e 	bl	162f0 <__cyg_profile_func_exit>
   15654:	4623      	mov	r3, r4
  }
   15656:	4618      	mov	r0, r3
   15658:	b007      	add	sp, #28
   1565a:	bd30      	pop	{r4, r5, pc}
   1565c:	000155e5 	.word	0x000155e5
   15660:	bd4ccccd 	.word	0xbd4ccccd
   15664:	3d4ccccd 	.word	0x3d4ccccd

00015668 <Uart::GenerateUartCalibration(float)>:

  UartCalibration_t GenerateUartCalibration(float baud_rate)
   15668:	b530      	push	{r4, r5, lr}
   1566a:	b08f      	sub	sp, #60	; 0x3c
   1566c:	4675      	mov	r5, lr
   1566e:	9007      	str	r0, [sp, #28]
   15670:	9106      	str	r1, [sp, #24]
   15672:	ed8d 0a05 	vstr	s0, [sp, #20]
   15676:	462b      	mov	r3, r5
   15678:	4619      	mov	r1, r3
   1567a:	4874      	ldr	r0, [pc, #464]	; (1584c <Uart::GenerateUartCalibration(float)+0x1e4>)
   1567c:	f000 fe24 	bl	162c8 <__cyg_profile_func_enter>
  {
    States state = States::kCalculateIntegerDivideLatch;
   15680:	2300      	movs	r3, #0
   15682:	930d      	str	r3, [sp, #52]	; 0x34
    UartCalibration_t uart_calibration;
   15684:	9b07      	ldr	r3, [sp, #28]
   15686:	2200      	movs	r2, #0
   15688:	601a      	str	r2, [r3, #0]
   1568a:	9b07      	ldr	r3, [sp, #28]
   1568c:	2200      	movs	r2, #0
   1568e:	605a      	str	r2, [r3, #4]
   15690:	9b07      	ldr	r3, [sp, #28]
   15692:	2201      	movs	r2, #1
   15694:	609a      	str	r2, [r3, #8]
    float divide_estimate = 0;
   15696:	f04f 0300 	mov.w	r3, #0
   1569a:	930c      	str	r3, [sp, #48]	; 0x30
    float decimal         = 1.5;
   1569c:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
   156a0:	930b      	str	r3, [sp, #44]	; 0x2c
    float div             = 1;
   156a2:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
   156a6:	930a      	str	r3, [sp, #40]	; 0x28
    float mul             = 2;
   156a8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   156ac:	9309      	str	r3, [sp, #36]	; 0x24
    while (state != States::kDone)
   156ae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   156b0:	2b04      	cmp	r3, #4
   156b2:	f000 80c1 	beq.w	15838 <Uart::GenerateUartCalibration(float)+0x1d0>
    {
      switch (state)
   156b6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   156b8:	2b04      	cmp	r3, #4
   156ba:	f200 80bb 	bhi.w	15834 <Uart::GenerateUartCalibration(float)+0x1cc>
   156be:	a201      	add	r2, pc, #4	; (adr r2, 156c4 <Uart::GenerateUartCalibration(float)+0x5c>)
   156c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   156c4:	000156d9 	.word	0x000156d9
   156c8:	00015735 	.word	0x00015735
   156cc:	00015795 	.word	0x00015795
   156d0:	00015805 	.word	0x00015805
   156d4:	00015835 	.word	0x00015835
      {
        case States::kCalculateIntegerDivideLatch:
        {
          divide_estimate = DividerEstimate(baud_rate);
   156d8:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
   156dc:	ed9d 0a05 	vldr	s0, [sp, #20]
   156e0:	9806      	ldr	r0, [sp, #24]
   156e2:	f7ff ff0b 	bl	154fc <Uart::DividerEstimate(float, float)>
   156e6:	ed8d 0a0c 	vstr	s0, [sp, #48]	; 0x30
          if (divide_estimate < 1.0f)
   156ea:	eddd 7a0c 	vldr	s15, [sp, #48]	; 0x30
   156ee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
   156f2:	eef4 7ac7 	vcmpe.f32	s15, s14
   156f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   156fa:	d505      	bpl.n	15708 <Uart::GenerateUartCalibration(float)+0xa0>
          {
            uart_calibration.divide_latch = 0;
   156fc:	9b07      	ldr	r3, [sp, #28]
   156fe:	2200      	movs	r2, #0
   15700:	601a      	str	r2, [r3, #0]
            state                         = States::kDone;
   15702:	2304      	movs	r3, #4
   15704:	930d      	str	r3, [sp, #52]	; 0x34
          }
          else
          {
            state = States::kCalculateDivideLatchWithDecimal;
          }
          break;
   15706:	e096      	b.n	15836 <Uart::GenerateUartCalibration(float)+0x1ce>
          else if (IsDecmial(divide_estimate))
   15708:	ed9d 0a0c 	vldr	s0, [sp, #48]	; 0x30
   1570c:	9806      	ldr	r0, [sp, #24]
   1570e:	f7ff ff69 	bl	155e4 <Uart::IsDecmial(float)>
   15712:	4603      	mov	r3, r0
   15714:	2b00      	cmp	r3, #0
   15716:	d00a      	beq.n	1572e <Uart::GenerateUartCalibration(float)+0xc6>
                static_cast<uint32_t>(divide_estimate);
   15718:	eddd 7a0c 	vldr	s15, [sp, #48]	; 0x30
   1571c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
   15720:	ee17 2a90 	vmov	r2, s15
            uart_calibration.divide_latch =
   15724:	9b07      	ldr	r3, [sp, #28]
   15726:	601a      	str	r2, [r3, #0]
            state = States::kDone;
   15728:	2304      	movs	r3, #4
   1572a:	930d      	str	r3, [sp, #52]	; 0x34
          break;
   1572c:	e083      	b.n	15836 <Uart::GenerateUartCalibration(float)+0x1ce>
            state = States::kCalculateDivideLatchWithDecimal;
   1572e:	2301      	movs	r3, #1
   15730:	930d      	str	r3, [sp, #52]	; 0x34
          break;
   15732:	e080      	b.n	15836 <Uart::GenerateUartCalibration(float)+0x1ce>
        }
        case States::kCalculateDivideLatchWithDecimal:
        {
          divide_estimate = roundf(DividerEstimate(baud_rate, decimal));
   15734:	eddd 0a0b 	vldr	s1, [sp, #44]	; 0x2c
   15738:	ed9d 0a05 	vldr	s0, [sp, #20]
   1573c:	9806      	ldr	r0, [sp, #24]
   1573e:	f7ff fedd 	bl	154fc <Uart::DividerEstimate(float, float)>
   15742:	eef0 7a40 	vmov.f32	s15, s0
   15746:	eeb0 0a67 	vmov.f32	s0, s15
   1574a:	f003 fa3f 	bl	18bcc <roundf>
   1574e:	ed8d 0a0c 	vstr	s0, [sp, #48]	; 0x30
          decimal         = FractionalEstimate(baud_rate, divide_estimate);
   15752:	eddd 0a0c 	vldr	s1, [sp, #48]	; 0x30
   15756:	ed9d 0a05 	vldr	s0, [sp, #20]
   1575a:	9806      	ldr	r0, [sp, #24]
   1575c:	f7ff ff08 	bl	15570 <Uart::FractionalEstimate(float, float)>
   15760:	ed8d 0a0b 	vstr	s0, [sp, #44]	; 0x2c
          if (1.1f <= decimal && decimal <= 1.9f)
   15764:	eddd 7a0b 	vldr	s15, [sp, #44]	; 0x2c
   15768:	ed9f 7a39 	vldr	s14, [pc, #228]	; 15850 <Uart::GenerateUartCalibration(float)+0x1e8>
   1576c:	eef4 7ac7 	vcmpe.f32	s15, s14
   15770:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   15774:	db0b      	blt.n	1578e <Uart::GenerateUartCalibration(float)+0x126>
   15776:	eddd 7a0b 	vldr	s15, [sp, #44]	; 0x2c
   1577a:	ed9f 7a36 	vldr	s14, [pc, #216]	; 15854 <Uart::GenerateUartCalibration(float)+0x1ec>
   1577e:	eef4 7ac7 	vcmpe.f32	s15, s14
   15782:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   15786:	d802      	bhi.n	1578e <Uart::GenerateUartCalibration(float)+0x126>
          {
            state = States::kGenerateFractionFromDecimal;
   15788:	2303      	movs	r3, #3
   1578a:	930d      	str	r3, [sp, #52]	; 0x34
          }
          else
          {
            state = States::kDecimalFailedGenerateNewDecimal;
          }
          break;
   1578c:	e053      	b.n	15836 <Uart::GenerateUartCalibration(float)+0x1ce>
            state = States::kDecimalFailedGenerateNewDecimal;
   1578e:	2302      	movs	r3, #2
   15790:	930d      	str	r3, [sp, #52]	; 0x34
          break;
   15792:	e050      	b.n	15836 <Uart::GenerateUartCalibration(float)+0x1ce>
        }
        case States::kDecimalFailedGenerateNewDecimal:
        {
          mul += 1;
   15794:	eddd 7a09 	vldr	s15, [sp, #36]	; 0x24
   15798:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
   1579c:	ee77 7a87 	vadd.f32	s15, s15, s14
   157a0:	edcd 7a09 	vstr	s15, [sp, #36]	; 0x24

          if (div > 15)
   157a4:	eddd 7a0a 	vldr	s15, [sp, #40]	; 0x28
   157a8:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
   157ac:	eef4 7ac7 	vcmpe.f32	s15, s14
   157b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   157b4:	dd02      	ble.n	157bc <Uart::GenerateUartCalibration(float)+0x154>
          {
            state = States::kDone;
   157b6:	2304      	movs	r3, #4
   157b8:	930d      	str	r3, [sp, #52]	; 0x34
            break;
   157ba:	e03c      	b.n	15836 <Uart::GenerateUartCalibration(float)+0x1ce>
          }
          else if (mul > 15)
   157bc:	eddd 7a09 	vldr	s15, [sp, #36]	; 0x24
   157c0:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
   157c4:	eef4 7ac7 	vcmpe.f32	s15, s14
   157c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   157cc:	dd0f      	ble.n	157ee <Uart::GenerateUartCalibration(float)+0x186>
          {
            div += 1;
   157ce:	eddd 7a0a 	vldr	s15, [sp, #40]	; 0x28
   157d2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
   157d6:	ee77 7a87 	vadd.f32	s15, s15, s14
   157da:	edcd 7a0a 	vstr	s15, [sp, #40]	; 0x28
            mul = div + 1;
   157de:	eddd 7a0a 	vldr	s15, [sp, #40]	; 0x28
   157e2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
   157e6:	ee77 7a87 	vadd.f32	s15, s15, s14
   157ea:	edcd 7a09 	vstr	s15, [sp, #36]	; 0x24
          }
          decimal = div / mul;
   157ee:	eddd 6a0a 	vldr	s13, [sp, #40]	; 0x28
   157f2:	ed9d 7a09 	vldr	s14, [sp, #36]	; 0x24
   157f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
   157fa:	edcd 7a0b 	vstr	s15, [sp, #44]	; 0x2c
          state   = States::kCalculateDivideLatchWithDecimal;
   157fe:	2301      	movs	r3, #1
   15800:	930d      	str	r3, [sp, #52]	; 0x34
          break;
   15802:	e018      	b.n	15836 <Uart::GenerateUartCalibration(float)+0x1ce>
        }
        case States::kGenerateFractionFromDecimal:
        {
          uart_calibration = FindClosestFractional(decimal);
   15804:	9c07      	ldr	r4, [sp, #28]
   15806:	466b      	mov	r3, sp
   15808:	ed9d 0a0b 	vldr	s0, [sp, #44]	; 0x2c
   1580c:	9906      	ldr	r1, [sp, #24]
   1580e:	4618      	mov	r0, r3
   15810:	f7ff fdf6 	bl	15400 <Uart::FindClosestFractional(float)>
   15814:	466b      	mov	r3, sp
   15816:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   1581a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
          uart_calibration.divide_latch =
              static_cast<uint32_t>(divide_estimate);
   1581e:	eddd 7a0c 	vldr	s15, [sp, #48]	; 0x30
   15822:	eefc 7ae7 	vcvt.u32.f32	s15, s15
   15826:	ee17 2a90 	vmov	r2, s15
          uart_calibration.divide_latch =
   1582a:	9b07      	ldr	r3, [sp, #28]
   1582c:	601a      	str	r2, [r3, #0]
          state = States::kDone;
   1582e:	2304      	movs	r3, #4
   15830:	930d      	str	r3, [sp, #52]	; 0x34
          break;
   15832:	e000      	b.n	15836 <Uart::GenerateUartCalibration(float)+0x1ce>
        }
        case States::kDone: { break;
        }
        default: { break;
   15834:	bf00      	nop
    while (state != States::kDone)
   15836:	e73a      	b.n	156ae <Uart::GenerateUartCalibration(float)+0x46>
        }
      }
    }
    return uart_calibration;
   15838:	bf00      	nop
   1583a:	462b      	mov	r3, r5
   1583c:	4619      	mov	r1, r3
   1583e:	4803      	ldr	r0, [pc, #12]	; (1584c <Uart::GenerateUartCalibration(float)+0x1e4>)
   15840:	f000 fd56 	bl	162f0 <__cyg_profile_func_exit>
   15844:	bf00      	nop
  }
   15846:	9807      	ldr	r0, [sp, #28]
   15848:	b00f      	add	sp, #60	; 0x3c
   1584a:	bd30      	pop	{r4, r5, pc}
   1584c:	00015669 	.word	0x00015669
   15850:	3f8ccccd 	.word	0x3f8ccccd
   15854:	3ff33333 	.word	0x3ff33333

00015858 <(anonymous namespace)::Lpc40xxUptime()>:
{
   15858:	b538      	push	{r3, r4, r5, lr}
   1585a:	4675      	mov	r5, lr
   1585c:	462b      	mov	r3, r5
   1585e:	4619      	mov	r1, r3
   15860:	480a      	ldr	r0, [pc, #40]	; (1588c <(anonymous namespace)::Lpc40xxUptime()+0x34>)
   15862:	f000 fd31 	bl	162c8 <__cyg_profile_func_enter>
    return tim_register[channel_]->TC;
   15866:	4b0a      	ldr	r3, [pc, #40]	; (15890 <(anonymous namespace)::Lpc40xxUptime()+0x38>)
   15868:	7a1b      	ldrb	r3, [r3, #8]
   1586a:	461a      	mov	r2, r3
   1586c:	4b09      	ldr	r3, [pc, #36]	; (15894 <(anonymous namespace)::Lpc40xxUptime()+0x3c>)
   1586e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   15872:	689c      	ldr	r4, [r3, #8]
   15874:	462b      	mov	r3, r5
   15876:	4619      	mov	r1, r3
   15878:	4804      	ldr	r0, [pc, #16]	; (1588c <(anonymous namespace)::Lpc40xxUptime()+0x34>)
   1587a:	f000 fd39 	bl	162f0 <__cyg_profile_func_exit>
  return timer0.GetTimer();
   1587e:	4623      	mov	r3, r4
   15880:	f04f 0400 	mov.w	r4, #0
}
   15884:	4618      	mov	r0, r3
   15886:	4621      	mov	r1, r4
   15888:	bd38      	pop	{r3, r4, r5, pc}
   1588a:	bf00      	nop
   1588c:	00014f9d 	.word	0x00014f9d
   15890:	10000500 	.word	0x10000500
   15894:	10000480 	.word	0x10000480

00015898 <UptimeRTOS>:
{
   15898:	b538      	push	{r3, r4, r5, lr}
   1589a:	4675      	mov	r5, lr
   1589c:	462b      	mov	r3, r5
   1589e:	4619      	mov	r1, r3
   158a0:	480a      	ldr	r0, [pc, #40]	; (158cc <UptimeRTOS+0x34>)
   158a2:	f000 fd11 	bl	162c8 <__cyg_profile_func_enter>
   158a6:	4b0a      	ldr	r3, [pc, #40]	; (158d0 <UptimeRTOS+0x38>)
   158a8:	7a1b      	ldrb	r3, [r3, #8]
   158aa:	461a      	mov	r2, r3
   158ac:	4b09      	ldr	r3, [pc, #36]	; (158d4 <UptimeRTOS+0x3c>)
   158ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   158b2:	689c      	ldr	r4, [r3, #8]
   158b4:	462b      	mov	r3, r5
   158b6:	4619      	mov	r1, r3
   158b8:	4804      	ldr	r0, [pc, #16]	; (158cc <UptimeRTOS+0x34>)
   158ba:	f000 fd19 	bl	162f0 <__cyg_profile_func_exit>
  return timer0.GetTimer();
   158be:	4623      	mov	r3, r4
   158c0:	f04f 0400 	mov.w	r4, #0
}
   158c4:	4618      	mov	r0, r3
   158c6:	4621      	mov	r1, r4
   158c8:	bd38      	pop	{r3, r4, r5, pc}
   158ca:	bf00      	nop
   158cc:	00014f9d 	.word	0x00014f9d
   158d0:	10000500 	.word	0x10000500
   158d4:	10000480 	.word	0x10000480

000158d8 <LowLevelInit()>:

void LowLevelInit()
{
   158d8:	b500      	push	{lr}
   158da:	b083      	sub	sp, #12
  // Set the SystemTick frequency to the RTOS tick frequency
  // It is critical that this happens before you set the system_clock, since
  // The system_timer keeps the time that the system_clock uses to delay itself.
  system_timer.SetTickFrequency(config::kRtosFrequency);
   158dc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   158e0:	4822      	ldr	r0, [pc, #136]	; (1596c <LowLevelInit()+0x94>)
   158e2:	f7ff f9bb 	bl	14c5c <SystemTimer::SetTickFrequency(unsigned long)>
  bool timer_started_successfully = system_timer.StartTimer();
   158e6:	4821      	ldr	r0, [pc, #132]	; (1596c <LowLevelInit()+0x94>)
   158e8:	f7ff f96a 	bl	14bc0 <SystemTimer::StartTimer()>
   158ec:	4603      	mov	r3, r0
   158ee:	f88d 3007 	strb.w	r3, [sp, #7]
  SJ2_ASSERT_WARNING(timer_started_successfully,
   158f2:	f89d 3007 	ldrb.w	r3, [sp, #7]
   158f6:	f083 0301 	eor.w	r3, r3, #1
   158fa:	b2db      	uxtb	r3, r3
   158fc:	2b00      	cmp	r3, #0
   158fe:	d005      	beq.n	1590c <LowLevelInit()+0x34>
   15900:	23ad      	movs	r3, #173	; 0xad
   15902:	4a1b      	ldr	r2, [pc, #108]	; (15970 <LowLevelInit()+0x98>)
   15904:	491b      	ldr	r1, [pc, #108]	; (15974 <LowLevelInit()+0x9c>)
   15906:	481c      	ldr	r0, [pc, #112]	; (15978 <LowLevelInit()+0xa0>)
   15908:	f001 ff5e 	bl	177c8 <printf>
                     "System Timer has FAILED to start!");
  // Set Clock Speed
  // SetClockFrequency will timeout return the offset between desire clockspeed
  // and actual clockspeed if the PLL doesn't get a frequency fix within a
  // defined timeout (see L1/system_clock.hpp:kDefaultTimeout)
  while (system_controller.SetClockFrequency(config::kSystemClockRateMhz) != 0)
   1590c:	2130      	movs	r1, #48	; 0x30
   1590e:	481b      	ldr	r0, [pc, #108]	; (1597c <LowLevelInit()+0xa4>)
   15910:	f7fc f80e 	bl	11930 <Lpc40xxSystemController::SetClockFrequency(unsigned char)>
   15914:	4603      	mov	r3, r0
   15916:	2b00      	cmp	r3, #0
   15918:	bf14      	ite	ne
   1591a:	2301      	movne	r3, #1
   1591c:	2300      	moveq	r3, #0
   1591e:	b2db      	uxtb	r3, r3
   15920:	2b00      	cmp	r3, #0
   15922:	d001      	beq.n	15928 <LowLevelInit()+0x50>
  {
    // Continually attempt to set the clock frequency to the desired until the
    // delta between desired and actual are 0.
    continue;
   15924:	bf00      	nop
  while (system_controller.SetClockFrequency(config::kSystemClockRateMhz) != 0)
   15926:	e7f1      	b.n	1590c <LowLevelInit()+0x34>
  }
  // Enable Peripheral Clock and set its divider to 1 meaning the clock speed
  // fed to all peripherals will be 48Mhz.
  system_controller.SetPeripheralClockDivider(1);
   15928:	2101      	movs	r1, #1
   1592a:	4814      	ldr	r0, [pc, #80]	; (1597c <LowLevelInit()+0xa4>)
   1592c:	f7fc f848 	bl	119c0 <Lpc40xxSystemController::SetPeripheralClockDivider(unsigned char)>
  // Set System Timer frequency again, since the clock speed has changed since
  // the last time we ran this.
  system_timer.DisableTimer();
   15930:	f7ff f8f4 	bl	14b1c <SystemTimer::DisableTimer()>
  system_timer.SetTickFrequency(config::kRtosFrequency);
   15934:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   15938:	480c      	ldr	r0, [pc, #48]	; (1596c <LowLevelInit()+0x94>)
   1593a:	f7ff f98f 	bl	14c5c <SystemTimer::SetTickFrequency(unsigned long)>
  system_timer.StartTimer();
   1593e:	480b      	ldr	r0, [pc, #44]	; (1596c <LowLevelInit()+0x94>)
   15940:	f7ff f93e 	bl	14bc0 <SystemTimer::StartTimer()>
  // Set timer0 to 1 MHz (1,000,000 Hz) so that the timer increments every 1
  // micro second.
  timer0.Initialize(1'000'000);
   15944:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   15948:	4a0d      	ldr	r2, [pc, #52]	; (15980 <LowLevelInit()+0xa8>)
   1594a:	490e      	ldr	r1, [pc, #56]	; (15984 <LowLevelInit()+0xac>)
   1594c:	480e      	ldr	r0, [pc, #56]	; (15988 <LowLevelInit()+0xb0>)
   1594e:	f7ff f9f7 	bl	14d40 <Timer::Initialize(unsigned long, void (*)(), long)>
  SetUptimeFunction(Lpc40xxUptime);
   15952:	480e      	ldr	r0, [pc, #56]	; (1598c <LowLevelInit()+0xb4>)
   15954:	f7ff f8ca 	bl	14aec <SetUptimeFunction(unsigned long long (*)())>
  // Set UART0 baudrate, which is required for printf and scanf to work properly
  uart0.Initialize(config::kBaudRate);
   15958:	f44f 4116 	mov.w	r1, #38400	; 0x9600
   1595c:	480c      	ldr	r0, [pc, #48]	; (15990 <LowLevelInit()+0xb8>)
   1595e:	f7ff fba1 	bl	150a4 <Uart::Initialize(unsigned long)>
}
   15962:	bf00      	nop
   15964:	b003      	add	sp, #12
   15966:	f85d fb04 	ldr.w	pc, [sp], #4
   1596a:	bf00      	nop
   1596c:	100004f4 	.word	0x100004f4
   15970:	0001a4c4 	.word	0x0001a4c4
   15974:	0001a3cc 	.word	0x0001a3cc
   15978:	0001a324 	.word	0x0001a324
   1597c:	100004fc 	.word	0x100004fc
   15980:	00014d21 	.word	0x00014d21
   15984:	000f4240 	.word	0x000f4240
   15988:	10000500 	.word	0x10000500
   1598c:	00015859 	.word	0x00015859
   15990:	100004e0 	.word	0x100004e0

00015994 <SystemInit>:

void SystemInit()
{
   15994:	b508      	push	{r3, lr}
  // Transfer data section values from flash to RAM
  InitDataSection();
   15996:	f7fa fbb9 	bl	1010c <InitDataSection()>
  // Clear BSS section of RAM
  // This is required because the nano implementation of the standard C/C++
  // libraries assumes that the BSS section is initialized to 0.
  InitBssSection();
   1599a:	f7fa fbff 	bl	1019c <InitBssSection()>
  // Enable FPU (F.loating P.oint U.nit)
  // System will crash if floating point operations occur without
  // Initializing the FPU.
  InitFpu();
   1599e:	f7fa fc2d 	bl	101fc <InitFpu()>
  // Initialisation C++ libraries
  __libc_init_array();
   159a2:	f003 fb1b 	bl	18fdc <__libc_init_array>
  // Run LowLevel System Initialization
  LowLevelInit();
   159a6:	f7ff ff97 	bl	158d8 <LowLevelInit()>
}
   159aa:	bf00      	nop
   159ac:	bd08      	pop	{r3, pc}
   159ae:	Address 0x00000000000159ae is out of bounds.


000159b0 <ResetIsr>:
// Sets up a simple runtime environment and initializes the C/C++ library.

extern "C"
{
  void ResetIsr(void)
  {
   159b0:	b580      	push	{r7, lr}
   159b2:	b084      	sub	sp, #16
   159b4:	af00      	add	r7, sp, #0
    // The Hyperload bootloader takes up stack space to execute. The Hyperload
    // bootloader function launches this ISR manually, but it never returns thus
    // it never cleans up the memory it uses. To get that memory back, we have
    // to manually move the stack pointers back to the top of stack.
    const uint32_t kTopOfStack = reinterpret_cast<intptr_t>(&StackTop);
   159b6:	4b09      	ldr	r3, [pc, #36]	; (159dc <ResetIsr+0x2c>)
   159b8:	60fb      	str	r3, [r7, #12]
   159ba:	68fb      	ldr	r3, [r7, #12]
   159bc:	603b      	str	r3, [r7, #0]
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
   159be:	683b      	ldr	r3, [r7, #0]
   159c0:	f383 8809 	msr	PSP, r3
   159c4:	68fb      	ldr	r3, [r7, #12]
   159c6:	607b      	str	r3, [r7, #4]

    \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0\n" : : "r" (topOfMainStack) : "sp");
   159c8:	687b      	ldr	r3, [r7, #4]
   159ca:	f383 8808 	msr	MSP, r3
    __set_PSP(kTopOfStack);
    __set_MSP(kTopOfStack);

    SystemInit();
   159ce:	f7ff ffe1 	bl	15994 <SystemInit>
// #pragma ignored "-Wpedantic" to suppress main function call warning
#pragma GCC diagnostic push ignored "-Wpedantic"
    [[maybe_unused]] int32_t result = main();
   159d2:	f7fd fe8b 	bl	136ec <main>
   159d6:	60b8      	str	r0, [r7, #8]
   159d8:	e7fe      	b.n	159d8 <ResetIsr+0x28>
   159da:	bf00      	nop
   159dc:	10010000 	.word	0x10010000

000159e0 <void Timer::TimerHandler<(TimerInterface::TimerPort)0>()>:
  static void TimerHandler()
   159e0:	b510      	push	{r4, lr}
   159e2:	4674      	mov	r4, lr
   159e4:	4623      	mov	r3, r4
   159e6:	4619      	mov	r1, r3
   159e8:	480a      	ldr	r0, [pc, #40]	; (15a14 <void Timer::TimerHandler<(TimerInterface::TimerPort)0>()+0x34>)
   159ea:	f000 fc6d 	bl	162c8 <__cyg_profile_func_enter>
      user_timer_isr[util::Value(port)]();
   159ee:	2000      	movs	r0, #0
   159f0:	f7ff f97e 	bl	14cf0 <unsigned char util::Value<TimerInterface::TimerPort, unsigned char>(TimerInterface::TimerPort)>
   159f4:	4603      	mov	r3, r0
   159f6:	461a      	mov	r2, r3
   159f8:	4b07      	ldr	r3, [pc, #28]	; (15a18 <void Timer::TimerHandler<(TimerInterface::TimerPort)0>()+0x38>)
   159fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   159fe:	4798      	blx	r3
    ClearInterrupts<port>();
   15a00:	f000 f90e 	bl	15c20 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)0>()>
   15a04:	4623      	mov	r3, r4
   15a06:	4619      	mov	r1, r3
   15a08:	4802      	ldr	r0, [pc, #8]	; (15a14 <void Timer::TimerHandler<(TimerInterface::TimerPort)0>()+0x34>)
   15a0a:	f000 fc71 	bl	162f0 <__cyg_profile_func_exit>
  }
   15a0e:	bf00      	nop
   15a10:	bd10      	pop	{r4, pc}
   15a12:	bf00      	nop
   15a14:	000159e1 	.word	0x000159e1
   15a18:	10001418 	.word	0x10001418

00015a1c <void Timer::TimerHandler<(TimerInterface::TimerPort)1>()>:
  static void TimerHandler()
   15a1c:	b510      	push	{r4, lr}
   15a1e:	4674      	mov	r4, lr
   15a20:	4623      	mov	r3, r4
   15a22:	4619      	mov	r1, r3
   15a24:	480a      	ldr	r0, [pc, #40]	; (15a50 <void Timer::TimerHandler<(TimerInterface::TimerPort)1>()+0x34>)
   15a26:	f000 fc4f 	bl	162c8 <__cyg_profile_func_enter>
      user_timer_isr[util::Value(port)]();
   15a2a:	2001      	movs	r0, #1
   15a2c:	f7ff f960 	bl	14cf0 <unsigned char util::Value<TimerInterface::TimerPort, unsigned char>(TimerInterface::TimerPort)>
   15a30:	4603      	mov	r3, r0
   15a32:	461a      	mov	r2, r3
   15a34:	4b07      	ldr	r3, [pc, #28]	; (15a54 <void Timer::TimerHandler<(TimerInterface::TimerPort)1>()+0x38>)
   15a36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   15a3a:	4798      	blx	r3
    ClearInterrupts<port>();
   15a3c:	f000 f940 	bl	15cc0 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)1>()>
   15a40:	4623      	mov	r3, r4
   15a42:	4619      	mov	r1, r3
   15a44:	4802      	ldr	r0, [pc, #8]	; (15a50 <void Timer::TimerHandler<(TimerInterface::TimerPort)1>()+0x34>)
   15a46:	f000 fc53 	bl	162f0 <__cyg_profile_func_exit>
  }
   15a4a:	bf00      	nop
   15a4c:	bd10      	pop	{r4, pc}
   15a4e:	bf00      	nop
   15a50:	00015a1d 	.word	0x00015a1d
   15a54:	10001418 	.word	0x10001418

00015a58 <void Timer::TimerHandler<(TimerInterface::TimerPort)2>()>:
  static void TimerHandler()
   15a58:	b510      	push	{r4, lr}
   15a5a:	4674      	mov	r4, lr
   15a5c:	4623      	mov	r3, r4
   15a5e:	4619      	mov	r1, r3
   15a60:	480a      	ldr	r0, [pc, #40]	; (15a8c <void Timer::TimerHandler<(TimerInterface::TimerPort)2>()+0x34>)
   15a62:	f000 fc31 	bl	162c8 <__cyg_profile_func_enter>
      user_timer_isr[util::Value(port)]();
   15a66:	2002      	movs	r0, #2
   15a68:	f7ff f942 	bl	14cf0 <unsigned char util::Value<TimerInterface::TimerPort, unsigned char>(TimerInterface::TimerPort)>
   15a6c:	4603      	mov	r3, r0
   15a6e:	461a      	mov	r2, r3
   15a70:	4b07      	ldr	r3, [pc, #28]	; (15a90 <void Timer::TimerHandler<(TimerInterface::TimerPort)2>()+0x38>)
   15a72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   15a76:	4798      	blx	r3
    ClearInterrupts<port>();
   15a78:	f000 f972 	bl	15d60 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)2>()>
   15a7c:	4623      	mov	r3, r4
   15a7e:	4619      	mov	r1, r3
   15a80:	4802      	ldr	r0, [pc, #8]	; (15a8c <void Timer::TimerHandler<(TimerInterface::TimerPort)2>()+0x34>)
   15a82:	f000 fc35 	bl	162f0 <__cyg_profile_func_exit>
  }
   15a86:	bf00      	nop
   15a88:	bd10      	pop	{r4, pc}
   15a8a:	bf00      	nop
   15a8c:	00015a59 	.word	0x00015a59
   15a90:	10001418 	.word	0x10001418

00015a94 <void Timer::TimerHandler<(TimerInterface::TimerPort)3>()>:
  static void TimerHandler()
   15a94:	b510      	push	{r4, lr}
   15a96:	4674      	mov	r4, lr
   15a98:	4623      	mov	r3, r4
   15a9a:	4619      	mov	r1, r3
   15a9c:	480a      	ldr	r0, [pc, #40]	; (15ac8 <void Timer::TimerHandler<(TimerInterface::TimerPort)3>()+0x34>)
   15a9e:	f000 fc13 	bl	162c8 <__cyg_profile_func_enter>
      user_timer_isr[util::Value(port)]();
   15aa2:	2003      	movs	r0, #3
   15aa4:	f7ff f924 	bl	14cf0 <unsigned char util::Value<TimerInterface::TimerPort, unsigned char>(TimerInterface::TimerPort)>
   15aa8:	4603      	mov	r3, r0
   15aaa:	461a      	mov	r2, r3
   15aac:	4b07      	ldr	r3, [pc, #28]	; (15acc <void Timer::TimerHandler<(TimerInterface::TimerPort)3>()+0x38>)
   15aae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   15ab2:	4798      	blx	r3
    ClearInterrupts<port>();
   15ab4:	f000 f9a4 	bl	15e00 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)3>()>
   15ab8:	4623      	mov	r3, r4
   15aba:	4619      	mov	r1, r3
   15abc:	4802      	ldr	r0, [pc, #8]	; (15ac8 <void Timer::TimerHandler<(TimerInterface::TimerPort)3>()+0x34>)
   15abe:	f000 fc17 	bl	162f0 <__cyg_profile_func_exit>
  }
   15ac2:	bf00      	nop
   15ac4:	bd10      	pop	{r4, pc}
   15ac6:	bf00      	nop
   15ac8:	00015a95 	.word	0x00015a95
   15acc:	10001418 	.word	0x10001418

00015ad0 <Status Wait<Uart::Send(unsigned char)::{lambda()#1}>(unsigned long long, Uart::Send(unsigned char)::{lambda()#1})>:
inline Status Wait(uint64_t timeout, F is_done)
   15ad0:	e92d 4830 	stmdb	sp!, {r4, r5, fp, lr}
   15ad4:	b088      	sub	sp, #32
   15ad6:	4675      	mov	r5, lr
   15ad8:	e9cd 0102 	strd	r0, r1, [sp, #8]
   15adc:	9201      	str	r2, [sp, #4]
   15ade:	462b      	mov	r3, r5
   15ae0:	4619      	mov	r1, r3
   15ae2:	4824      	ldr	r0, [pc, #144]	; (15b74 <Status Wait<Uart::Send(unsigned char)::{lambda()#1}>(unsigned long long, Uart::Send(unsigned char)::{lambda()#1})+0xa4>)
   15ae4:	f000 fbf0 	bl	162c8 <__cyg_profile_func_enter>
  uint64_t timeout_time = 0;
   15ae8:	f04f 0300 	mov.w	r3, #0
   15aec:	f04f 0400 	mov.w	r4, #0
   15af0:	e9cd 3406 	strd	r3, r4, [sp, #24]
  if (timeout == kMaxWait)
   15af4:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
   15af8:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
   15afc:	bf08      	it	eq
   15afe:	f1b3 3fff 	cmpeq.w	r3, #4294967295	; 0xffffffff
   15b02:	d106      	bne.n	15b12 <Status Wait<Uart::Send(unsigned char)::{lambda()#1}>(unsigned long long, Uart::Send(unsigned char)::{lambda()#1})+0x42>
    timeout_time = kMaxWait;
   15b04:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   15b08:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   15b0c:	e9cd 3406 	strd	r3, r4, [sp, #24]
   15b10:	e00b      	b.n	15b2a <Status Wait<Uart::Send(unsigned char)::{lambda()#1}>(unsigned long long, Uart::Send(unsigned char)::{lambda()#1})+0x5a>
    timeout_time = Milliseconds() + timeout;
   15b12:	f7fb f979 	bl	10e08 <Milliseconds()>
   15b16:	460a      	mov	r2, r1
   15b18:	4601      	mov	r1, r0
   15b1a:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
   15b1e:	eb13 0b01 	adds.w	fp, r3, r1
   15b22:	eb44 0c02 	adc.w	ip, r4, r2
   15b26:	e9cd bc06 	strd	fp, ip, [sp, #24]
  Status status = Status::kTimedOut;
   15b2a:	2301      	movs	r3, #1
   15b2c:	9305      	str	r3, [sp, #20]
  while (Milliseconds() < timeout_time)
   15b2e:	f7fb f96b 	bl	10e08 <Milliseconds()>
   15b32:	460a      	mov	r2, r1
   15b34:	4601      	mov	r1, r0
   15b36:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
   15b3a:	42a2      	cmp	r2, r4
   15b3c:	bf08      	it	eq
   15b3e:	4299      	cmpeq	r1, r3
   15b40:	bf34      	ite	cc
   15b42:	2301      	movcc	r3, #1
   15b44:	2300      	movcs	r3, #0
   15b46:	b2db      	uxtb	r3, r3
   15b48:	2b00      	cmp	r3, #0
   15b4a:	d008      	beq.n	15b5e <Status Wait<Uart::Send(unsigned char)::{lambda()#1}>(unsigned long long, Uart::Send(unsigned char)::{lambda()#1})+0x8e>
    if (is_done())
   15b4c:	ab01      	add	r3, sp, #4
   15b4e:	4618      	mov	r0, r3
   15b50:	f7ff fb1a 	bl	15188 <Uart::Send(unsigned char)::{lambda()#1}::operator()() const>
   15b54:	4603      	mov	r3, r0
   15b56:	2b00      	cmp	r3, #0
   15b58:	d0e9      	beq.n	15b2e <Status Wait<Uart::Send(unsigned char)::{lambda()#1}>(unsigned long long, Uart::Send(unsigned char)::{lambda()#1})+0x5e>
      status = Status::kSuccess;
   15b5a:	2300      	movs	r3, #0
   15b5c:	9305      	str	r3, [sp, #20]
  return status;
   15b5e:	9c05      	ldr	r4, [sp, #20]
   15b60:	462b      	mov	r3, r5
   15b62:	4619      	mov	r1, r3
   15b64:	4803      	ldr	r0, [pc, #12]	; (15b74 <Status Wait<Uart::Send(unsigned char)::{lambda()#1}>(unsigned long long, Uart::Send(unsigned char)::{lambda()#1})+0xa4>)
   15b66:	f000 fbc3 	bl	162f0 <__cyg_profile_func_exit>
   15b6a:	4623      	mov	r3, r4
}
   15b6c:	4618      	mov	r0, r3
   15b6e:	b008      	add	sp, #32
   15b70:	e8bd 8830 	ldmia.w	sp!, {r4, r5, fp, pc}
   15b74:	00015ad1 	.word	0x00015ad1

00015b78 <Status Wait<Uart::Receive(unsigned long)::{lambda()#1}>(unsigned long long, Uart::Receive(unsigned long)::{lambda()#1})>:
inline Status Wait(uint64_t timeout, F is_done)
   15b78:	e92d 4830 	stmdb	sp!, {r4, r5, fp, lr}
   15b7c:	b088      	sub	sp, #32
   15b7e:	4675      	mov	r5, lr
   15b80:	e9cd 0102 	strd	r0, r1, [sp, #8]
   15b84:	9201      	str	r2, [sp, #4]
   15b86:	462b      	mov	r3, r5
   15b88:	4619      	mov	r1, r3
   15b8a:	4824      	ldr	r0, [pc, #144]	; (15c1c <Status Wait<Uart::Receive(unsigned long)::{lambda()#1}>(unsigned long long, Uart::Receive(unsigned long)::{lambda()#1})+0xa4>)
   15b8c:	f000 fb9c 	bl	162c8 <__cyg_profile_func_enter>
  uint64_t timeout_time = 0;
   15b90:	f04f 0300 	mov.w	r3, #0
   15b94:	f04f 0400 	mov.w	r4, #0
   15b98:	e9cd 3406 	strd	r3, r4, [sp, #24]
  if (timeout == kMaxWait)
   15b9c:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
   15ba0:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
   15ba4:	bf08      	it	eq
   15ba6:	f1b3 3fff 	cmpeq.w	r3, #4294967295	; 0xffffffff
   15baa:	d106      	bne.n	15bba <Status Wait<Uart::Receive(unsigned long)::{lambda()#1}>(unsigned long long, Uart::Receive(unsigned long)::{lambda()#1})+0x42>
    timeout_time = kMaxWait;
   15bac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   15bb0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   15bb4:	e9cd 3406 	strd	r3, r4, [sp, #24]
   15bb8:	e00b      	b.n	15bd2 <Status Wait<Uart::Receive(unsigned long)::{lambda()#1}>(unsigned long long, Uart::Receive(unsigned long)::{lambda()#1})+0x5a>
    timeout_time = Milliseconds() + timeout;
   15bba:	f7fb f925 	bl	10e08 <Milliseconds()>
   15bbe:	460a      	mov	r2, r1
   15bc0:	4601      	mov	r1, r0
   15bc2:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
   15bc6:	eb13 0b01 	adds.w	fp, r3, r1
   15bca:	eb44 0c02 	adc.w	ip, r4, r2
   15bce:	e9cd bc06 	strd	fp, ip, [sp, #24]
  Status status = Status::kTimedOut;
   15bd2:	2301      	movs	r3, #1
   15bd4:	9305      	str	r3, [sp, #20]
  while (Milliseconds() < timeout_time)
   15bd6:	f7fb f917 	bl	10e08 <Milliseconds()>
   15bda:	460a      	mov	r2, r1
   15bdc:	4601      	mov	r1, r0
   15bde:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
   15be2:	42a2      	cmp	r2, r4
   15be4:	bf08      	it	eq
   15be6:	4299      	cmpeq	r1, r3
   15be8:	bf34      	ite	cc
   15bea:	2301      	movcc	r3, #1
   15bec:	2300      	movcs	r3, #0
   15bee:	b2db      	uxtb	r3, r3
   15bf0:	2b00      	cmp	r3, #0
   15bf2:	d008      	beq.n	15c06 <Status Wait<Uart::Receive(unsigned long)::{lambda()#1}>(unsigned long long, Uart::Receive(unsigned long)::{lambda()#1})+0x8e>
    if (is_done())
   15bf4:	ab01      	add	r3, sp, #4
   15bf6:	4618      	mov	r0, r3
   15bf8:	f7ff fb60 	bl	152bc <Uart::Receive(unsigned long)::{lambda()#1}::operator()() const>
   15bfc:	4603      	mov	r3, r0
   15bfe:	2b00      	cmp	r3, #0
   15c00:	d0e9      	beq.n	15bd6 <Status Wait<Uart::Receive(unsigned long)::{lambda()#1}>(unsigned long long, Uart::Receive(unsigned long)::{lambda()#1})+0x5e>
      status = Status::kSuccess;
   15c02:	2300      	movs	r3, #0
   15c04:	9305      	str	r3, [sp, #20]
  return status;
   15c06:	9c05      	ldr	r4, [sp, #20]
   15c08:	462b      	mov	r3, r5
   15c0a:	4619      	mov	r1, r3
   15c0c:	4803      	ldr	r0, [pc, #12]	; (15c1c <Status Wait<Uart::Receive(unsigned long)::{lambda()#1}>(unsigned long long, Uart::Receive(unsigned long)::{lambda()#1})+0xa4>)
   15c0e:	f000 fb6f 	bl	162f0 <__cyg_profile_func_exit>
   15c12:	4623      	mov	r3, r4
}
   15c14:	4618      	mov	r0, r3
   15c16:	b008      	add	sp, #32
   15c18:	e8bd 8830 	ldmia.w	sp!, {r4, r5, fp, pc}
   15c1c:	00015b79 	.word	0x00015b79

00015c20 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)0>()>:
  static void ClearInterrupts()
   15c20:	b510      	push	{r4, lr}
   15c22:	b082      	sub	sp, #8
   15c24:	4674      	mov	r4, lr
   15c26:	4623      	mov	r3, r4
   15c28:	4619      	mov	r1, r3
   15c2a:	4823      	ldr	r0, [pc, #140]	; (15cb8 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)0>()+0x98>)
   15c2c:	f000 fb4c 	bl	162c8 <__cyg_profile_func_enter>
    uint8_t channel = util::Value(port);
   15c30:	2300      	movs	r3, #0
   15c32:	f88d 3007 	strb.w	r3, [sp, #7]
    tim_register[channel]->IR |= (1 << kRegMR0);
   15c36:	f89d 3007 	ldrb.w	r3, [sp, #7]
   15c3a:	4a20      	ldr	r2, [pc, #128]	; (15cbc <void Timer::ClearInterrupts<(TimerInterface::TimerPort)0>()+0x9c>)
   15c3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15c40:	681a      	ldr	r2, [r3, #0]
   15c42:	f89d 3007 	ldrb.w	r3, [sp, #7]
   15c46:	491d      	ldr	r1, [pc, #116]	; (15cbc <void Timer::ClearInterrupts<(TimerInterface::TimerPort)0>()+0x9c>)
   15c48:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   15c4c:	f042 0201 	orr.w	r2, r2, #1
   15c50:	601a      	str	r2, [r3, #0]
    tim_register[channel]->IR |= (1 << kRegMR1);
   15c52:	f89d 3007 	ldrb.w	r3, [sp, #7]
   15c56:	4a19      	ldr	r2, [pc, #100]	; (15cbc <void Timer::ClearInterrupts<(TimerInterface::TimerPort)0>()+0x9c>)
   15c58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15c5c:	681a      	ldr	r2, [r3, #0]
   15c5e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   15c62:	4916      	ldr	r1, [pc, #88]	; (15cbc <void Timer::ClearInterrupts<(TimerInterface::TimerPort)0>()+0x9c>)
   15c64:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   15c68:	f042 0202 	orr.w	r2, r2, #2
   15c6c:	601a      	str	r2, [r3, #0]
    tim_register[channel]->IR |= (1 << kRegMR2);
   15c6e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   15c72:	4a12      	ldr	r2, [pc, #72]	; (15cbc <void Timer::ClearInterrupts<(TimerInterface::TimerPort)0>()+0x9c>)
   15c74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15c78:	681a      	ldr	r2, [r3, #0]
   15c7a:	f89d 3007 	ldrb.w	r3, [sp, #7]
   15c7e:	490f      	ldr	r1, [pc, #60]	; (15cbc <void Timer::ClearInterrupts<(TimerInterface::TimerPort)0>()+0x9c>)
   15c80:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   15c84:	f042 0204 	orr.w	r2, r2, #4
   15c88:	601a      	str	r2, [r3, #0]
    tim_register[channel]->IR |= (1 << kRegMR3);
   15c8a:	f89d 3007 	ldrb.w	r3, [sp, #7]
   15c8e:	4a0b      	ldr	r2, [pc, #44]	; (15cbc <void Timer::ClearInterrupts<(TimerInterface::TimerPort)0>()+0x9c>)
   15c90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15c94:	681a      	ldr	r2, [r3, #0]
   15c96:	f89d 3007 	ldrb.w	r3, [sp, #7]
   15c9a:	4908      	ldr	r1, [pc, #32]	; (15cbc <void Timer::ClearInterrupts<(TimerInterface::TimerPort)0>()+0x9c>)
   15c9c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   15ca0:	f042 0208 	orr.w	r2, r2, #8
   15ca4:	601a      	str	r2, [r3, #0]
   15ca6:	4623      	mov	r3, r4
   15ca8:	4619      	mov	r1, r3
   15caa:	4803      	ldr	r0, [pc, #12]	; (15cb8 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)0>()+0x98>)
   15cac:	f000 fb20 	bl	162f0 <__cyg_profile_func_exit>
  }
   15cb0:	bf00      	nop
   15cb2:	b002      	add	sp, #8
   15cb4:	bd10      	pop	{r4, pc}
   15cb6:	bf00      	nop
   15cb8:	00015c21 	.word	0x00015c21
   15cbc:	10000480 	.word	0x10000480

00015cc0 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)1>()>:
  static void ClearInterrupts()
   15cc0:	b510      	push	{r4, lr}
   15cc2:	b082      	sub	sp, #8
   15cc4:	4674      	mov	r4, lr
   15cc6:	4623      	mov	r3, r4
   15cc8:	4619      	mov	r1, r3
   15cca:	4823      	ldr	r0, [pc, #140]	; (15d58 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)1>()+0x98>)
   15ccc:	f000 fafc 	bl	162c8 <__cyg_profile_func_enter>
    uint8_t channel = util::Value(port);
   15cd0:	2301      	movs	r3, #1
   15cd2:	f88d 3007 	strb.w	r3, [sp, #7]
    tim_register[channel]->IR |= (1 << kRegMR0);
   15cd6:	f89d 3007 	ldrb.w	r3, [sp, #7]
   15cda:	4a20      	ldr	r2, [pc, #128]	; (15d5c <void Timer::ClearInterrupts<(TimerInterface::TimerPort)1>()+0x9c>)
   15cdc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15ce0:	681a      	ldr	r2, [r3, #0]
   15ce2:	f89d 3007 	ldrb.w	r3, [sp, #7]
   15ce6:	491d      	ldr	r1, [pc, #116]	; (15d5c <void Timer::ClearInterrupts<(TimerInterface::TimerPort)1>()+0x9c>)
   15ce8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   15cec:	f042 0201 	orr.w	r2, r2, #1
   15cf0:	601a      	str	r2, [r3, #0]
    tim_register[channel]->IR |= (1 << kRegMR1);
   15cf2:	f89d 3007 	ldrb.w	r3, [sp, #7]
   15cf6:	4a19      	ldr	r2, [pc, #100]	; (15d5c <void Timer::ClearInterrupts<(TimerInterface::TimerPort)1>()+0x9c>)
   15cf8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15cfc:	681a      	ldr	r2, [r3, #0]
   15cfe:	f89d 3007 	ldrb.w	r3, [sp, #7]
   15d02:	4916      	ldr	r1, [pc, #88]	; (15d5c <void Timer::ClearInterrupts<(TimerInterface::TimerPort)1>()+0x9c>)
   15d04:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   15d08:	f042 0202 	orr.w	r2, r2, #2
   15d0c:	601a      	str	r2, [r3, #0]
    tim_register[channel]->IR |= (1 << kRegMR2);
   15d0e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   15d12:	4a12      	ldr	r2, [pc, #72]	; (15d5c <void Timer::ClearInterrupts<(TimerInterface::TimerPort)1>()+0x9c>)
   15d14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15d18:	681a      	ldr	r2, [r3, #0]
   15d1a:	f89d 3007 	ldrb.w	r3, [sp, #7]
   15d1e:	490f      	ldr	r1, [pc, #60]	; (15d5c <void Timer::ClearInterrupts<(TimerInterface::TimerPort)1>()+0x9c>)
   15d20:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   15d24:	f042 0204 	orr.w	r2, r2, #4
   15d28:	601a      	str	r2, [r3, #0]
    tim_register[channel]->IR |= (1 << kRegMR3);
   15d2a:	f89d 3007 	ldrb.w	r3, [sp, #7]
   15d2e:	4a0b      	ldr	r2, [pc, #44]	; (15d5c <void Timer::ClearInterrupts<(TimerInterface::TimerPort)1>()+0x9c>)
   15d30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15d34:	681a      	ldr	r2, [r3, #0]
   15d36:	f89d 3007 	ldrb.w	r3, [sp, #7]
   15d3a:	4908      	ldr	r1, [pc, #32]	; (15d5c <void Timer::ClearInterrupts<(TimerInterface::TimerPort)1>()+0x9c>)
   15d3c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   15d40:	f042 0208 	orr.w	r2, r2, #8
   15d44:	601a      	str	r2, [r3, #0]
   15d46:	4623      	mov	r3, r4
   15d48:	4619      	mov	r1, r3
   15d4a:	4803      	ldr	r0, [pc, #12]	; (15d58 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)1>()+0x98>)
   15d4c:	f000 fad0 	bl	162f0 <__cyg_profile_func_exit>
  }
   15d50:	bf00      	nop
   15d52:	b002      	add	sp, #8
   15d54:	bd10      	pop	{r4, pc}
   15d56:	bf00      	nop
   15d58:	00015cc1 	.word	0x00015cc1
   15d5c:	10000480 	.word	0x10000480

00015d60 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)2>()>:
  static void ClearInterrupts()
   15d60:	b510      	push	{r4, lr}
   15d62:	b082      	sub	sp, #8
   15d64:	4674      	mov	r4, lr
   15d66:	4623      	mov	r3, r4
   15d68:	4619      	mov	r1, r3
   15d6a:	4823      	ldr	r0, [pc, #140]	; (15df8 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)2>()+0x98>)
   15d6c:	f000 faac 	bl	162c8 <__cyg_profile_func_enter>
    uint8_t channel = util::Value(port);
   15d70:	2302      	movs	r3, #2
   15d72:	f88d 3007 	strb.w	r3, [sp, #7]
    tim_register[channel]->IR |= (1 << kRegMR0);
   15d76:	f89d 3007 	ldrb.w	r3, [sp, #7]
   15d7a:	4a20      	ldr	r2, [pc, #128]	; (15dfc <void Timer::ClearInterrupts<(TimerInterface::TimerPort)2>()+0x9c>)
   15d7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15d80:	681a      	ldr	r2, [r3, #0]
   15d82:	f89d 3007 	ldrb.w	r3, [sp, #7]
   15d86:	491d      	ldr	r1, [pc, #116]	; (15dfc <void Timer::ClearInterrupts<(TimerInterface::TimerPort)2>()+0x9c>)
   15d88:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   15d8c:	f042 0201 	orr.w	r2, r2, #1
   15d90:	601a      	str	r2, [r3, #0]
    tim_register[channel]->IR |= (1 << kRegMR1);
   15d92:	f89d 3007 	ldrb.w	r3, [sp, #7]
   15d96:	4a19      	ldr	r2, [pc, #100]	; (15dfc <void Timer::ClearInterrupts<(TimerInterface::TimerPort)2>()+0x9c>)
   15d98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15d9c:	681a      	ldr	r2, [r3, #0]
   15d9e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   15da2:	4916      	ldr	r1, [pc, #88]	; (15dfc <void Timer::ClearInterrupts<(TimerInterface::TimerPort)2>()+0x9c>)
   15da4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   15da8:	f042 0202 	orr.w	r2, r2, #2
   15dac:	601a      	str	r2, [r3, #0]
    tim_register[channel]->IR |= (1 << kRegMR2);
   15dae:	f89d 3007 	ldrb.w	r3, [sp, #7]
   15db2:	4a12      	ldr	r2, [pc, #72]	; (15dfc <void Timer::ClearInterrupts<(TimerInterface::TimerPort)2>()+0x9c>)
   15db4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15db8:	681a      	ldr	r2, [r3, #0]
   15dba:	f89d 3007 	ldrb.w	r3, [sp, #7]
   15dbe:	490f      	ldr	r1, [pc, #60]	; (15dfc <void Timer::ClearInterrupts<(TimerInterface::TimerPort)2>()+0x9c>)
   15dc0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   15dc4:	f042 0204 	orr.w	r2, r2, #4
   15dc8:	601a      	str	r2, [r3, #0]
    tim_register[channel]->IR |= (1 << kRegMR3);
   15dca:	f89d 3007 	ldrb.w	r3, [sp, #7]
   15dce:	4a0b      	ldr	r2, [pc, #44]	; (15dfc <void Timer::ClearInterrupts<(TimerInterface::TimerPort)2>()+0x9c>)
   15dd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15dd4:	681a      	ldr	r2, [r3, #0]
   15dd6:	f89d 3007 	ldrb.w	r3, [sp, #7]
   15dda:	4908      	ldr	r1, [pc, #32]	; (15dfc <void Timer::ClearInterrupts<(TimerInterface::TimerPort)2>()+0x9c>)
   15ddc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   15de0:	f042 0208 	orr.w	r2, r2, #8
   15de4:	601a      	str	r2, [r3, #0]
   15de6:	4623      	mov	r3, r4
   15de8:	4619      	mov	r1, r3
   15dea:	4803      	ldr	r0, [pc, #12]	; (15df8 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)2>()+0x98>)
   15dec:	f000 fa80 	bl	162f0 <__cyg_profile_func_exit>
  }
   15df0:	bf00      	nop
   15df2:	b002      	add	sp, #8
   15df4:	bd10      	pop	{r4, pc}
   15df6:	bf00      	nop
   15df8:	00015d61 	.word	0x00015d61
   15dfc:	10000480 	.word	0x10000480

00015e00 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)3>()>:
  static void ClearInterrupts()
   15e00:	b510      	push	{r4, lr}
   15e02:	b082      	sub	sp, #8
   15e04:	4674      	mov	r4, lr
   15e06:	4623      	mov	r3, r4
   15e08:	4619      	mov	r1, r3
   15e0a:	4823      	ldr	r0, [pc, #140]	; (15e98 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)3>()+0x98>)
   15e0c:	f000 fa5c 	bl	162c8 <__cyg_profile_func_enter>
    uint8_t channel = util::Value(port);
   15e10:	2303      	movs	r3, #3
   15e12:	f88d 3007 	strb.w	r3, [sp, #7]
    tim_register[channel]->IR |= (1 << kRegMR0);
   15e16:	f89d 3007 	ldrb.w	r3, [sp, #7]
   15e1a:	4a20      	ldr	r2, [pc, #128]	; (15e9c <void Timer::ClearInterrupts<(TimerInterface::TimerPort)3>()+0x9c>)
   15e1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15e20:	681a      	ldr	r2, [r3, #0]
   15e22:	f89d 3007 	ldrb.w	r3, [sp, #7]
   15e26:	491d      	ldr	r1, [pc, #116]	; (15e9c <void Timer::ClearInterrupts<(TimerInterface::TimerPort)3>()+0x9c>)
   15e28:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   15e2c:	f042 0201 	orr.w	r2, r2, #1
   15e30:	601a      	str	r2, [r3, #0]
    tim_register[channel]->IR |= (1 << kRegMR1);
   15e32:	f89d 3007 	ldrb.w	r3, [sp, #7]
   15e36:	4a19      	ldr	r2, [pc, #100]	; (15e9c <void Timer::ClearInterrupts<(TimerInterface::TimerPort)3>()+0x9c>)
   15e38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15e3c:	681a      	ldr	r2, [r3, #0]
   15e3e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   15e42:	4916      	ldr	r1, [pc, #88]	; (15e9c <void Timer::ClearInterrupts<(TimerInterface::TimerPort)3>()+0x9c>)
   15e44:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   15e48:	f042 0202 	orr.w	r2, r2, #2
   15e4c:	601a      	str	r2, [r3, #0]
    tim_register[channel]->IR |= (1 << kRegMR2);
   15e4e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   15e52:	4a12      	ldr	r2, [pc, #72]	; (15e9c <void Timer::ClearInterrupts<(TimerInterface::TimerPort)3>()+0x9c>)
   15e54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15e58:	681a      	ldr	r2, [r3, #0]
   15e5a:	f89d 3007 	ldrb.w	r3, [sp, #7]
   15e5e:	490f      	ldr	r1, [pc, #60]	; (15e9c <void Timer::ClearInterrupts<(TimerInterface::TimerPort)3>()+0x9c>)
   15e60:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   15e64:	f042 0204 	orr.w	r2, r2, #4
   15e68:	601a      	str	r2, [r3, #0]
    tim_register[channel]->IR |= (1 << kRegMR3);
   15e6a:	f89d 3007 	ldrb.w	r3, [sp, #7]
   15e6e:	4a0b      	ldr	r2, [pc, #44]	; (15e9c <void Timer::ClearInterrupts<(TimerInterface::TimerPort)3>()+0x9c>)
   15e70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15e74:	681a      	ldr	r2, [r3, #0]
   15e76:	f89d 3007 	ldrb.w	r3, [sp, #7]
   15e7a:	4908      	ldr	r1, [pc, #32]	; (15e9c <void Timer::ClearInterrupts<(TimerInterface::TimerPort)3>()+0x9c>)
   15e7c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   15e80:	f042 0208 	orr.w	r2, r2, #8
   15e84:	601a      	str	r2, [r3, #0]
   15e86:	4623      	mov	r3, r4
   15e88:	4619      	mov	r1, r3
   15e8a:	4803      	ldr	r0, [pc, #12]	; (15e98 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)3>()+0x98>)
   15e8c:	f000 fa30 	bl	162f0 <__cyg_profile_func_exit>
  }
   15e90:	bf00      	nop
   15e92:	b002      	add	sp, #8
   15e94:	bd10      	pop	{r4, pc}
   15e96:	bf00      	nop
   15e98:	00015e01 	.word	0x00015e01
   15e9c:	10000480 	.word	0x10000480

00015ea0 <__static_initialization_and_destruction_0(int, int)>:
#pragma GCC diagnostic pop
    // main() shouldn't return, but if it does, we'll just enter an infinite
    // loop
    Halt();
  }
}
   15ea0:	b082      	sub	sp, #8
   15ea2:	9001      	str	r0, [sp, #4]
   15ea4:	9100      	str	r1, [sp, #0]
   15ea6:	9b01      	ldr	r3, [sp, #4]
   15ea8:	2b01      	cmp	r3, #1
   15eaa:	d15d      	bne.n	15f68 <__static_initialization_and_destruction_0(int, int)+0xc8>
   15eac:	9b00      	ldr	r3, [sp, #0]
   15eae:	f64f 72ff 	movw	r2, #65535	; 0xffff
   15eb2:	4293      	cmp	r3, r2
   15eb4:	d158      	bne.n	15f68 <__static_initialization_and_destruction_0(int, int)+0xc8>
  inline static volatile uint32_t * match[4][4] = {
   15eb6:	4b2e      	ldr	r3, [pc, #184]	; (15f70 <__static_initialization_and_destruction_0(int, int)+0xd0>)
   15eb8:	681b      	ldr	r3, [r3, #0]
   15eba:	f003 0301 	and.w	r3, r3, #1
   15ebe:	2b00      	cmp	r3, #0
   15ec0:	d152      	bne.n	15f68 <__static_initialization_and_destruction_0(int, int)+0xc8>
   15ec2:	4b2b      	ldr	r3, [pc, #172]	; (15f70 <__static_initialization_and_destruction_0(int, int)+0xd0>)
   15ec4:	2201      	movs	r2, #1
   15ec6:	601a      	str	r2, [r3, #0]
    [kTimer0] = { &tim_register[0]->MR0, &tim_register[0]->MR1,
   15ec8:	4b2a      	ldr	r3, [pc, #168]	; (15f74 <__static_initialization_and_destruction_0(int, int)+0xd4>)
   15eca:	681b      	ldr	r3, [r3, #0]
   15ecc:	3318      	adds	r3, #24
  };
   15ece:	4a2a      	ldr	r2, [pc, #168]	; (15f78 <__static_initialization_and_destruction_0(int, int)+0xd8>)
   15ed0:	6013      	str	r3, [r2, #0]
    [kTimer0] = { &tim_register[0]->MR0, &tim_register[0]->MR1,
   15ed2:	4b28      	ldr	r3, [pc, #160]	; (15f74 <__static_initialization_and_destruction_0(int, int)+0xd4>)
   15ed4:	681b      	ldr	r3, [r3, #0]
   15ed6:	331c      	adds	r3, #28
  };
   15ed8:	4a27      	ldr	r2, [pc, #156]	; (15f78 <__static_initialization_and_destruction_0(int, int)+0xd8>)
   15eda:	6053      	str	r3, [r2, #4]
                  &tim_register[0]->MR2, &tim_register[0]->MR3 },
   15edc:	4b25      	ldr	r3, [pc, #148]	; (15f74 <__static_initialization_and_destruction_0(int, int)+0xd4>)
   15ede:	681b      	ldr	r3, [r3, #0]
   15ee0:	3320      	adds	r3, #32
  };
   15ee2:	4a25      	ldr	r2, [pc, #148]	; (15f78 <__static_initialization_and_destruction_0(int, int)+0xd8>)
   15ee4:	6093      	str	r3, [r2, #8]
                  &tim_register[0]->MR2, &tim_register[0]->MR3 },
   15ee6:	4b23      	ldr	r3, [pc, #140]	; (15f74 <__static_initialization_and_destruction_0(int, int)+0xd4>)
   15ee8:	681b      	ldr	r3, [r3, #0]
   15eea:	3324      	adds	r3, #36	; 0x24
  };
   15eec:	4a22      	ldr	r2, [pc, #136]	; (15f78 <__static_initialization_and_destruction_0(int, int)+0xd8>)
   15eee:	60d3      	str	r3, [r2, #12]
    [kTimer1] = { &tim_register[1]->MR0, &tim_register[1]->MR1,
   15ef0:	4b20      	ldr	r3, [pc, #128]	; (15f74 <__static_initialization_and_destruction_0(int, int)+0xd4>)
   15ef2:	685b      	ldr	r3, [r3, #4]
   15ef4:	3318      	adds	r3, #24
  };
   15ef6:	4a20      	ldr	r2, [pc, #128]	; (15f78 <__static_initialization_and_destruction_0(int, int)+0xd8>)
   15ef8:	6113      	str	r3, [r2, #16]
    [kTimer1] = { &tim_register[1]->MR0, &tim_register[1]->MR1,
   15efa:	4b1e      	ldr	r3, [pc, #120]	; (15f74 <__static_initialization_and_destruction_0(int, int)+0xd4>)
   15efc:	685b      	ldr	r3, [r3, #4]
   15efe:	331c      	adds	r3, #28
  };
   15f00:	4a1d      	ldr	r2, [pc, #116]	; (15f78 <__static_initialization_and_destruction_0(int, int)+0xd8>)
   15f02:	6153      	str	r3, [r2, #20]
                  &tim_register[1]->MR2, &tim_register[1]->MR3 },
   15f04:	4b1b      	ldr	r3, [pc, #108]	; (15f74 <__static_initialization_and_destruction_0(int, int)+0xd4>)
   15f06:	685b      	ldr	r3, [r3, #4]
   15f08:	3320      	adds	r3, #32
  };
   15f0a:	4a1b      	ldr	r2, [pc, #108]	; (15f78 <__static_initialization_and_destruction_0(int, int)+0xd8>)
   15f0c:	6193      	str	r3, [r2, #24]
                  &tim_register[1]->MR2, &tim_register[1]->MR3 },
   15f0e:	4b19      	ldr	r3, [pc, #100]	; (15f74 <__static_initialization_and_destruction_0(int, int)+0xd4>)
   15f10:	685b      	ldr	r3, [r3, #4]
   15f12:	3324      	adds	r3, #36	; 0x24
  };
   15f14:	4a18      	ldr	r2, [pc, #96]	; (15f78 <__static_initialization_and_destruction_0(int, int)+0xd8>)
   15f16:	61d3      	str	r3, [r2, #28]
    [kTimer2] = { &tim_register[2]->MR0, &tim_register[2]->MR1,
   15f18:	4b16      	ldr	r3, [pc, #88]	; (15f74 <__static_initialization_and_destruction_0(int, int)+0xd4>)
   15f1a:	689b      	ldr	r3, [r3, #8]
   15f1c:	3318      	adds	r3, #24
  };
   15f1e:	4a16      	ldr	r2, [pc, #88]	; (15f78 <__static_initialization_and_destruction_0(int, int)+0xd8>)
   15f20:	6213      	str	r3, [r2, #32]
    [kTimer2] = { &tim_register[2]->MR0, &tim_register[2]->MR1,
   15f22:	4b14      	ldr	r3, [pc, #80]	; (15f74 <__static_initialization_and_destruction_0(int, int)+0xd4>)
   15f24:	689b      	ldr	r3, [r3, #8]
   15f26:	331c      	adds	r3, #28
  };
   15f28:	4a13      	ldr	r2, [pc, #76]	; (15f78 <__static_initialization_and_destruction_0(int, int)+0xd8>)
   15f2a:	6253      	str	r3, [r2, #36]	; 0x24
                  &tim_register[2]->MR2, &tim_register[2]->MR3 },
   15f2c:	4b11      	ldr	r3, [pc, #68]	; (15f74 <__static_initialization_and_destruction_0(int, int)+0xd4>)
   15f2e:	689b      	ldr	r3, [r3, #8]
   15f30:	3320      	adds	r3, #32
  };
   15f32:	4a11      	ldr	r2, [pc, #68]	; (15f78 <__static_initialization_and_destruction_0(int, int)+0xd8>)
   15f34:	6293      	str	r3, [r2, #40]	; 0x28
                  &tim_register[2]->MR2, &tim_register[2]->MR3 },
   15f36:	4b0f      	ldr	r3, [pc, #60]	; (15f74 <__static_initialization_and_destruction_0(int, int)+0xd4>)
   15f38:	689b      	ldr	r3, [r3, #8]
   15f3a:	3324      	adds	r3, #36	; 0x24
  };
   15f3c:	4a0e      	ldr	r2, [pc, #56]	; (15f78 <__static_initialization_and_destruction_0(int, int)+0xd8>)
   15f3e:	62d3      	str	r3, [r2, #44]	; 0x2c
    [kTimer3] = { &tim_register[3]->MR0, &tim_register[3]->MR1,
   15f40:	4b0c      	ldr	r3, [pc, #48]	; (15f74 <__static_initialization_and_destruction_0(int, int)+0xd4>)
   15f42:	68db      	ldr	r3, [r3, #12]
   15f44:	3318      	adds	r3, #24
  };
   15f46:	4a0c      	ldr	r2, [pc, #48]	; (15f78 <__static_initialization_and_destruction_0(int, int)+0xd8>)
   15f48:	6313      	str	r3, [r2, #48]	; 0x30
    [kTimer3] = { &tim_register[3]->MR0, &tim_register[3]->MR1,
   15f4a:	4b0a      	ldr	r3, [pc, #40]	; (15f74 <__static_initialization_and_destruction_0(int, int)+0xd4>)
   15f4c:	68db      	ldr	r3, [r3, #12]
   15f4e:	331c      	adds	r3, #28
  };
   15f50:	4a09      	ldr	r2, [pc, #36]	; (15f78 <__static_initialization_and_destruction_0(int, int)+0xd8>)
   15f52:	6353      	str	r3, [r2, #52]	; 0x34
                  &tim_register[3]->MR2, &tim_register[3]->MR3 }
   15f54:	4b07      	ldr	r3, [pc, #28]	; (15f74 <__static_initialization_and_destruction_0(int, int)+0xd4>)
   15f56:	68db      	ldr	r3, [r3, #12]
   15f58:	3320      	adds	r3, #32
  };
   15f5a:	4a07      	ldr	r2, [pc, #28]	; (15f78 <__static_initialization_and_destruction_0(int, int)+0xd8>)
   15f5c:	6393      	str	r3, [r2, #56]	; 0x38
                  &tim_register[3]->MR2, &tim_register[3]->MR3 }
   15f5e:	4b05      	ldr	r3, [pc, #20]	; (15f74 <__static_initialization_and_destruction_0(int, int)+0xd4>)
   15f60:	68db      	ldr	r3, [r3, #12]
   15f62:	3324      	adds	r3, #36	; 0x24
  };
   15f64:	4a04      	ldr	r2, [pc, #16]	; (15f78 <__static_initialization_and_destruction_0(int, int)+0xd8>)
   15f66:	63d3      	str	r3, [r2, #60]	; 0x3c
   15f68:	bf00      	nop
   15f6a:	b002      	add	sp, #8
   15f6c:	4770      	bx	lr
   15f6e:	bf00      	nop
   15f70:	10001428 	.word	0x10001428
   15f74:	10000480 	.word	0x10000480
   15f78:	100013d8 	.word	0x100013d8

00015f7c <_GLOBAL__sub_I_UptimeRTOS>:
   15f7c:	b508      	push	{r3, lr}
   15f7e:	f64f 71ff 	movw	r1, #65535	; 0xffff
   15f82:	2001      	movs	r0, #1
   15f84:	f7ff ff8c 	bl	15ea0 <__static_initialization_and_destruction_0(int, int)>
   15f88:	bd08      	pop	{r3, pc}
   15f8a:	Address 0x0000000000015f8a is out of bounds.


00015f8c <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
   15f8c:	b082      	sub	sp, #8
   15f8e:	4603      	mov	r3, r0
   15f90:	f88d 3007 	strb.w	r3, [sp, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
   15f94:	f99d 3007 	ldrsb.w	r3, [sp, #7]
   15f98:	f003 021f 	and.w	r2, r3, #31
   15f9c:	4905      	ldr	r1, [pc, #20]	; (15fb4 <NVIC_EnableIRQ+0x28>)
   15f9e:	f99d 3007 	ldrsb.w	r3, [sp, #7]
   15fa2:	095b      	lsrs	r3, r3, #5
   15fa4:	2001      	movs	r0, #1
   15fa6:	fa00 f202 	lsl.w	r2, r0, r2
   15faa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   15fae:	bf00      	nop
   15fb0:	b002      	add	sp, #8
   15fb2:	4770      	bx	lr
   15fb4:	e000e100 	.word	0xe000e100

00015fb8 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
   15fb8:	b082      	sub	sp, #8
   15fba:	4603      	mov	r3, r0
   15fbc:	9100      	str	r1, [sp, #0]
   15fbe:	f88d 3007 	strb.w	r3, [sp, #7]
  if ((int32_t)(IRQn) < 0)
   15fc2:	f99d 3007 	ldrsb.w	r3, [sp, #7]
   15fc6:	2b00      	cmp	r3, #0
   15fc8:	da0c      	bge.n	15fe4 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   15fca:	9b00      	ldr	r3, [sp, #0]
   15fcc:	b2da      	uxtb	r2, r3
   15fce:	490d      	ldr	r1, [pc, #52]	; (16004 <NVIC_SetPriority+0x4c>)
   15fd0:	f99d 3007 	ldrsb.w	r3, [sp, #7]
   15fd4:	f003 030f 	and.w	r3, r3, #15
   15fd8:	3b04      	subs	r3, #4
   15fda:	0152      	lsls	r2, r2, #5
   15fdc:	b2d2      	uxtb	r2, r2
   15fde:	440b      	add	r3, r1
   15fe0:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
   15fe2:	e00b      	b.n	15ffc <NVIC_SetPriority+0x44>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   15fe4:	9b00      	ldr	r3, [sp, #0]
   15fe6:	b2db      	uxtb	r3, r3
   15fe8:	4a07      	ldr	r2, [pc, #28]	; (16008 <NVIC_SetPriority+0x50>)
   15fea:	f99d 1007 	ldrsb.w	r1, [sp, #7]
   15fee:	4608      	mov	r0, r1
   15ff0:	015b      	lsls	r3, r3, #5
   15ff2:	b2d9      	uxtb	r1, r3
   15ff4:	1813      	adds	r3, r2, r0
   15ff6:	460a      	mov	r2, r1
   15ff8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
   15ffc:	bf00      	nop
   15ffe:	b002      	add	sp, #8
   16000:	4770      	bx	lr
   16002:	bf00      	nop
   16004:	e000ed00 	.word	0xe000ed00
   16008:	e000e100 	.word	0xe000e100

0001600c <InterruptLookupHandler>:
{
   1600c:	b500      	push	{lr}
   1600e:	b085      	sub	sp, #20
  uint8_t active_isr = (SCB->ICSR & 0xFF);
   16010:	4b12      	ldr	r3, [pc, #72]	; (1605c <InterruptLookupHandler+0x50>)
   16012:	685b      	ldr	r3, [r3, #4]
   16014:	f88d 300f 	strb.w	r3, [sp, #15]
  IsrPointer isr     = dynamic_isr_vector_table[active_isr];
   16018:	f89d 300f 	ldrb.w	r3, [sp, #15]
   1601c:	4a10      	ldr	r2, [pc, #64]	; (16060 <InterruptLookupHandler+0x54>)
   1601e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16022:	9302      	str	r3, [sp, #8]
  SJ2_ASSERT_FATAL(isr != InterruptLookupHandler,
   16024:	9b02      	ldr	r3, [sp, #8]
   16026:	4a0f      	ldr	r2, [pc, #60]	; (16064 <InterruptLookupHandler+0x58>)
   16028:	4293      	cmp	r3, r2
   1602a:	d110      	bne.n	1604e <InterruptLookupHandler+0x42>
   1602c:	f89d 300f 	ldrb.w	r3, [sp, #15]
   16030:	9300      	str	r3, [sp, #0]
   16032:	23dd      	movs	r3, #221	; 0xdd
   16034:	4a0c      	ldr	r2, [pc, #48]	; (16068 <InterruptLookupHandler+0x5c>)
   16036:	490d      	ldr	r1, [pc, #52]	; (1606c <InterruptLookupHandler+0x60>)
   16038:	480d      	ldr	r0, [pc, #52]	; (16070 <InterruptLookupHandler+0x64>)
   1603a:	f001 fbc5 	bl	177c8 <printf>
   1603e:	480d      	ldr	r0, [pc, #52]	; (16074 <InterruptLookupHandler+0x68>)
   16040:	f000 f912 	bl	16268 <puts>
   16044:	2100      	movs	r1, #0
   16046:	2001      	movs	r0, #1
   16048:	f7fa fe46 	bl	10cd8 <debug::PrintBacktrace(bool, void*)>
   1604c:	e7fe      	b.n	1604c <InterruptLookupHandler+0x40>
  isr();
   1604e:	9b02      	ldr	r3, [sp, #8]
   16050:	4798      	blx	r3
}
   16052:	bf00      	nop
   16054:	b005      	add	sp, #20
   16056:	f85d fb04 	ldr.w	pc, [sp], #4
   1605a:	bf00      	nop
   1605c:	e000ed00 	.word	0xe000ed00
   16060:	1000050c 	.word	0x1000050c
   16064:	0001600d 	.word	0x0001600d
   16068:	0001a740 	.word	0x0001a740
   1606c:	0001a730 	.word	0x0001a730
   16070:	0001a5d4 	.word	0x0001a5d4
   16074:	0001a680 	.word	0x0001a680

00016078 <RegisterIsr(IRQn, void (*)(), bool, long)>:
{
   16078:	b500      	push	{lr}
   1607a:	b085      	sub	sp, #20
   1607c:	9102      	str	r1, [sp, #8]
   1607e:	9301      	str	r3, [sp, #4]
   16080:	4603      	mov	r3, r0
   16082:	f88d 300f 	strb.w	r3, [sp, #15]
   16086:	4613      	mov	r3, r2
   16088:	f88d 300e 	strb.w	r3, [sp, #14]
  dynamic_isr_vector_table[irq + kIrqOffset] = isr;
   1608c:	f99d 300f 	ldrsb.w	r3, [sp, #15]
   16090:	3310      	adds	r3, #16
   16092:	490f      	ldr	r1, [pc, #60]	; (160d0 <RegisterIsr(IRQn, void (*)(), bool, long)+0x58>)
   16094:	9a02      	ldr	r2, [sp, #8]
   16096:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  if (enable_interrupt && irq >= 0)
   1609a:	f89d 300e 	ldrb.w	r3, [sp, #14]
   1609e:	2b00      	cmp	r3, #0
   160a0:	d008      	beq.n	160b4 <RegisterIsr(IRQn, void (*)(), bool, long)+0x3c>
   160a2:	f99d 300f 	ldrsb.w	r3, [sp, #15]
   160a6:	2b00      	cmp	r3, #0
   160a8:	db04      	blt.n	160b4 <RegisterIsr(IRQn, void (*)(), bool, long)+0x3c>
    NVIC_EnableIRQ(irq);
   160aa:	f99d 300f 	ldrsb.w	r3, [sp, #15]
   160ae:	4618      	mov	r0, r3
   160b0:	f7ff ff6c 	bl	15f8c <NVIC_EnableIRQ>
  if (priority > -1)
   160b4:	9b01      	ldr	r3, [sp, #4]
   160b6:	2b00      	cmp	r3, #0
   160b8:	db06      	blt.n	160c8 <RegisterIsr(IRQn, void (*)(), bool, long)+0x50>
    NVIC_SetPriority(irq, priority);
   160ba:	9a01      	ldr	r2, [sp, #4]
   160bc:	f99d 300f 	ldrsb.w	r3, [sp, #15]
   160c0:	4611      	mov	r1, r2
   160c2:	4618      	mov	r0, r3
   160c4:	f7ff ff78 	bl	15fb8 <NVIC_SetPriority>
}
   160c8:	bf00      	nop
   160ca:	b005      	add	sp, #20
   160cc:	f85d fb04 	ldr.w	pc, [sp], #4
   160d0:	1000050c 	.word	0x1000050c

000160d4 <GetRegistersFromStack>:
{
   160d4:	b500      	push	{lr}
   160d6:	b08d      	sub	sp, #52	; 0x34
   160d8:	9003      	str	r0, [sp, #12]
  volatile uint32_t r0  = fault_stack_address[0];
   160da:	9b03      	ldr	r3, [sp, #12]
   160dc:	681b      	ldr	r3, [r3, #0]
   160de:	930b      	str	r3, [sp, #44]	; 0x2c
  volatile uint32_t r1  = fault_stack_address[1];
   160e0:	9b03      	ldr	r3, [sp, #12]
   160e2:	685b      	ldr	r3, [r3, #4]
   160e4:	930a      	str	r3, [sp, #40]	; 0x28
  volatile uint32_t r2  = fault_stack_address[2];
   160e6:	9b03      	ldr	r3, [sp, #12]
   160e8:	689b      	ldr	r3, [r3, #8]
   160ea:	9309      	str	r3, [sp, #36]	; 0x24
  volatile uint32_t r3  = fault_stack_address[3];
   160ec:	9b03      	ldr	r3, [sp, #12]
   160ee:	68db      	ldr	r3, [r3, #12]
   160f0:	9308      	str	r3, [sp, #32]
  volatile uint32_t r12 = fault_stack_address[4];
   160f2:	9b03      	ldr	r3, [sp, #12]
   160f4:	691b      	ldr	r3, [r3, #16]
   160f6:	9307      	str	r3, [sp, #28]
  volatile uint32_t lr = fault_stack_address[5];
   160f8:	9b03      	ldr	r3, [sp, #12]
   160fa:	695b      	ldr	r3, [r3, #20]
   160fc:	9306      	str	r3, [sp, #24]
  volatile uint32_t pc = fault_stack_address[6];
   160fe:	9b03      	ldr	r3, [sp, #12]
   16100:	699b      	ldr	r3, [r3, #24]
   16102:	9305      	str	r3, [sp, #20]
  volatile uint32_t psr = fault_stack_address[7];
   16104:	9b03      	ldr	r3, [sp, #12]
   16106:	69db      	ldr	r3, [r3, #28]
   16108:	9304      	str	r3, [sp, #16]
  printf(SJ2_BACKGROUND_RED "Hard Fault Exception Occurred!\n" SJ2_COLOR_RESET);
   1610a:	480d      	ldr	r0, [pc, #52]	; (16140 <GetRegistersFromStack+0x6c>)
   1610c:	f001 fb5c 	bl	177c8 <printf>
  printf("r0: 0x%08" PRIX32 ", r1: 0x%08" PRIX32
   16110:	990b      	ldr	r1, [sp, #44]	; 0x2c
   16112:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   16114:	9809      	ldr	r0, [sp, #36]	; 0x24
   16116:	9b08      	ldr	r3, [sp, #32]
   16118:	9300      	str	r3, [sp, #0]
   1611a:	4603      	mov	r3, r0
   1611c:	4809      	ldr	r0, [pc, #36]	; (16144 <GetRegistersFromStack+0x70>)
   1611e:	f001 fb53 	bl	177c8 <printf>
  printf("r12: 0x%08" PRIX32 ", lr: 0x%08" PRIX32
   16122:	9907      	ldr	r1, [sp, #28]
   16124:	9a06      	ldr	r2, [sp, #24]
   16126:	9805      	ldr	r0, [sp, #20]
   16128:	9b04      	ldr	r3, [sp, #16]
   1612a:	9300      	str	r3, [sp, #0]
   1612c:	4603      	mov	r3, r0
   1612e:	4806      	ldr	r0, [pc, #24]	; (16148 <GetRegistersFromStack+0x74>)
   16130:	f001 fb4a 	bl	177c8 <printf>
  debug::PrintBacktrace(true, reinterpret_cast<void *>(pc));
   16134:	9b05      	ldr	r3, [sp, #20]
   16136:	4619      	mov	r1, r3
   16138:	2001      	movs	r0, #1
   1613a:	f7fa fdcd 	bl	10cd8 <debug::PrintBacktrace(bool, void*)>
   1613e:	e7fe      	b.n	1613e <GetRegistersFromStack+0x6a>
   16140:	0001a698 	.word	0x0001a698
   16144:	0001a6c4 	.word	0x0001a6c4
   16148:	0001a6f8 	.word	0x0001a6f8

0001614c <FirmwareStdOut(int)>:
}
Stdout out = HostWrite;
Stdin in   = HostRead;
#else
int FirmwareStdOut(int data)
{
   1614c:	b530      	push	{r4, r5, lr}
   1614e:	b083      	sub	sp, #12
   16150:	4675      	mov	r5, lr
   16152:	9001      	str	r0, [sp, #4]
   16154:	462b      	mov	r3, r5
   16156:	4619      	mov	r1, r3
   16158:	4809      	ldr	r0, [pc, #36]	; (16180 <FirmwareStdOut(int)+0x34>)
   1615a:	f000 f8b5 	bl	162c8 <__cyg_profile_func_enter>
  uart0.Send(static_cast<uint8_t>(data));
   1615e:	9b01      	ldr	r3, [sp, #4]
   16160:	b2db      	uxtb	r3, r3
   16162:	4619      	mov	r1, r3
   16164:	4807      	ldr	r0, [pc, #28]	; (16184 <FirmwareStdOut(int)+0x38>)
   16166:	f7ff f835 	bl	151d4 <Uart::Send(unsigned char)>
  return 1;
   1616a:	2401      	movs	r4, #1
   1616c:	462b      	mov	r3, r5
   1616e:	4619      	mov	r1, r3
   16170:	4803      	ldr	r0, [pc, #12]	; (16180 <FirmwareStdOut(int)+0x34>)
   16172:	f000 f8bd 	bl	162f0 <__cyg_profile_func_exit>
   16176:	4623      	mov	r3, r4
}
   16178:	4618      	mov	r0, r3
   1617a:	b003      	add	sp, #12
   1617c:	bd30      	pop	{r4, r5, pc}
   1617e:	bf00      	nop
   16180:	0001614d 	.word	0x0001614d
   16184:	100004e0 	.word	0x100004e0

00016188 <_exit>:
  }
  // Dummy implementation of exit with return code placed into
  // Arm register r3
  // NOLINTNEXTLINE(readability-identifier-naming)
  void _exit([[maybe_unused]] int rc)
  {
   16188:	b500      	push	{lr}
   1618a:	b083      	sub	sp, #12
   1618c:	4673      	mov	r3, lr
   1618e:	9001      	str	r0, [sp, #4]
   16190:	4619      	mov	r1, r3
   16192:	4802      	ldr	r0, [pc, #8]	; (1619c <_exit+0x14>)
   16194:	f000 f898 	bl	162c8 <__cyg_profile_func_enter>
    while (1)
    {
      continue;
   16198:	bf00      	nop
    while (1)
   1619a:	e7fd      	b.n	16198 <_exit+0x10>
   1619c:	00016189 	.word	0x00016189

000161a0 <_getpid>:
    }
  }
  // Dummy implementation of getpid
  // NOLINTNEXTLINE(readability-identifier-naming)
  int _getpid()
  {
   161a0:	b538      	push	{r3, r4, r5, lr}
   161a2:	4675      	mov	r5, lr
   161a4:	462b      	mov	r3, r5
   161a6:	4619      	mov	r1, r3
   161a8:	4805      	ldr	r0, [pc, #20]	; (161c0 <_getpid+0x20>)
   161aa:	f000 f88d 	bl	162c8 <__cyg_profile_func_enter>
    return 1;
   161ae:	2401      	movs	r4, #1
   161b0:	462b      	mov	r3, r5
   161b2:	4619      	mov	r1, r3
   161b4:	4802      	ldr	r0, [pc, #8]	; (161c0 <_getpid+0x20>)
   161b6:	f000 f89b 	bl	162f0 <__cyg_profile_func_exit>
   161ba:	4623      	mov	r3, r4
  }
   161bc:	4618      	mov	r0, r3
   161be:	bd38      	pop	{r3, r4, r5, pc}
   161c0:	000161a1 	.word	0x000161a1

000161c4 <_kill>:
  // Dummy implementation of kill
  // NOLINTNEXTLINE(readability-identifier-naming)
  int _kill(int, int)
  {
   161c4:	b530      	push	{r4, r5, lr}
   161c6:	b083      	sub	sp, #12
   161c8:	4675      	mov	r5, lr
   161ca:	9001      	str	r0, [sp, #4]
   161cc:	9100      	str	r1, [sp, #0]
   161ce:	462b      	mov	r3, r5
   161d0:	4619      	mov	r1, r3
   161d2:	4807      	ldr	r0, [pc, #28]	; (161f0 <_kill+0x2c>)
   161d4:	f000 f878 	bl	162c8 <__cyg_profile_func_enter>
    return -1;
   161d8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   161dc:	462b      	mov	r3, r5
   161de:	4619      	mov	r1, r3
   161e0:	4803      	ldr	r0, [pc, #12]	; (161f0 <_kill+0x2c>)
   161e2:	f000 f885 	bl	162f0 <__cyg_profile_func_exit>
   161e6:	4623      	mov	r3, r4
  }
   161e8:	4618      	mov	r0, r3
   161ea:	b003      	add	sp, #12
   161ec:	bd30      	pop	{r4, r5, pc}
   161ee:	bf00      	nop
   161f0:	000161c5 	.word	0x000161c5

000161f4 <_putchar>:
    }
    return length;
  }
  // Needed by third party printf library
  void _putchar(char character)  // NOLINT
  {
   161f4:	b510      	push	{r4, lr}
   161f6:	b082      	sub	sp, #8
   161f8:	4674      	mov	r4, lr
   161fa:	4603      	mov	r3, r0
   161fc:	f88d 3007 	strb.w	r3, [sp, #7]
   16200:	4623      	mov	r3, r4
   16202:	4619      	mov	r1, r3
   16204:	4808      	ldr	r0, [pc, #32]	; (16228 <_putchar+0x34>)
   16206:	f000 f85f 	bl	162c8 <__cyg_profile_func_enter>
    out(character);
   1620a:	4b08      	ldr	r3, [pc, #32]	; (1622c <_putchar+0x38>)
   1620c:	681b      	ldr	r3, [r3, #0]
   1620e:	f89d 2007 	ldrb.w	r2, [sp, #7]
   16212:	4610      	mov	r0, r2
   16214:	4798      	blx	r3
   16216:	4623      	mov	r3, r4
   16218:	4619      	mov	r1, r3
   1621a:	4803      	ldr	r0, [pc, #12]	; (16228 <_putchar+0x34>)
   1621c:	f000 f868 	bl	162f0 <__cyg_profile_func_exit>
  }
   16220:	bf00      	nop
   16222:	b002      	add	sp, #8
   16224:	bd10      	pop	{r4, pc}
   16226:	bf00      	nop
   16228:	000161f5 	.word	0x000161f5
   1622c:	100005f0 	.word	0x100005f0

00016230 <putchar>:

  // Overload default libnano putchar() with a more optimal version that does
  // not use dynamic memory
  int putchar(int character)  // NOLINT
  {
   16230:	b530      	push	{r4, r5, lr}
   16232:	b083      	sub	sp, #12
   16234:	4674      	mov	r4, lr
   16236:	9001      	str	r0, [sp, #4]
   16238:	4623      	mov	r3, r4
   1623a:	4619      	mov	r1, r3
   1623c:	4808      	ldr	r0, [pc, #32]	; (16260 <putchar+0x30>)
   1623e:	f000 f843 	bl	162c8 <__cyg_profile_func_enter>
    return out(character);
   16242:	4b08      	ldr	r3, [pc, #32]	; (16264 <putchar+0x34>)
   16244:	681b      	ldr	r3, [r3, #0]
   16246:	9801      	ldr	r0, [sp, #4]
   16248:	4798      	blx	r3
   1624a:	4605      	mov	r5, r0
   1624c:	4623      	mov	r3, r4
   1624e:	4619      	mov	r1, r3
   16250:	4803      	ldr	r0, [pc, #12]	; (16260 <putchar+0x30>)
   16252:	f000 f84d 	bl	162f0 <__cyg_profile_func_exit>
   16256:	462b      	mov	r3, r5
  }
   16258:	4618      	mov	r0, r3
   1625a:	b003      	add	sp, #12
   1625c:	bd30      	pop	{r4, r5, pc}
   1625e:	bf00      	nop
   16260:	00016231 	.word	0x00016231
   16264:	100005f0 	.word	0x100005f0

00016268 <puts>:

  // Overload default libnano puts() with a more optimal version that does
  // not use dynamic memory
  int puts(const char * str)  // NOLINT
  {
   16268:	b530      	push	{r4, r5, lr}
   1626a:	b085      	sub	sp, #20
   1626c:	4675      	mov	r5, lr
   1626e:	9001      	str	r0, [sp, #4]
   16270:	462b      	mov	r3, r5
   16272:	4619      	mov	r1, r3
   16274:	4812      	ldr	r0, [pc, #72]	; (162c0 <puts+0x58>)
   16276:	f000 f827 	bl	162c8 <__cyg_profile_func_enter>
    int i;
    for (i = 0; str[i] != '\0'; i++)
   1627a:	2300      	movs	r3, #0
   1627c:	9303      	str	r3, [sp, #12]
   1627e:	9b03      	ldr	r3, [sp, #12]
   16280:	9a01      	ldr	r2, [sp, #4]
   16282:	4413      	add	r3, r2
   16284:	781b      	ldrb	r3, [r3, #0]
   16286:	2b00      	cmp	r3, #0
   16288:	d00b      	beq.n	162a2 <puts+0x3a>
    {
      out(str[i]);
   1628a:	4b0e      	ldr	r3, [pc, #56]	; (162c4 <puts+0x5c>)
   1628c:	681b      	ldr	r3, [r3, #0]
   1628e:	9a03      	ldr	r2, [sp, #12]
   16290:	9901      	ldr	r1, [sp, #4]
   16292:	440a      	add	r2, r1
   16294:	7812      	ldrb	r2, [r2, #0]
   16296:	4610      	mov	r0, r2
   16298:	4798      	blx	r3
    for (i = 0; str[i] != '\0'; i++)
   1629a:	9b03      	ldr	r3, [sp, #12]
   1629c:	3301      	adds	r3, #1
   1629e:	9303      	str	r3, [sp, #12]
   162a0:	e7ed      	b.n	1627e <puts+0x16>
    }
    out('\n');
   162a2:	4b08      	ldr	r3, [pc, #32]	; (162c4 <puts+0x5c>)
   162a4:	681b      	ldr	r3, [r3, #0]
   162a6:	200a      	movs	r0, #10
   162a8:	4798      	blx	r3
    return i;
   162aa:	9c03      	ldr	r4, [sp, #12]
   162ac:	462b      	mov	r3, r5
   162ae:	4619      	mov	r1, r3
   162b0:	4803      	ldr	r0, [pc, #12]	; (162c0 <puts+0x58>)
   162b2:	f000 f81d 	bl	162f0 <__cyg_profile_func_exit>
   162b6:	4623      	mov	r3, r4
  }
   162b8:	4618      	mov	r0, r3
   162ba:	b005      	add	sp, #20
   162bc:	bd30      	pop	{r4, r5, pc}
   162be:	bf00      	nop
   162c0:	00016269 	.word	0x00016269
   162c4:	100005f0 	.word	0x100005f0

000162c8 <__cyg_profile_func_enter>:
  // =============================
  void * stack_trace[config::kBacktraceDepth] = { nullptr };
  size_t stack_depth = 0;

  void __cyg_profile_func_enter(void *, void * call_site)  // NOLINT
  {
   162c8:	b082      	sub	sp, #8
   162ca:	9001      	str	r0, [sp, #4]
   162cc:	9100      	str	r1, [sp, #0]
    stack_trace[stack_depth++] = call_site;
   162ce:	9a00      	ldr	r2, [sp, #0]
   162d0:	4b05      	ldr	r3, [pc, #20]	; (162e8 <__cyg_profile_func_enter+0x20>)
   162d2:	681b      	ldr	r3, [r3, #0]
   162d4:	1c59      	adds	r1, r3, #1
   162d6:	4804      	ldr	r0, [pc, #16]	; (162e8 <__cyg_profile_func_enter+0x20>)
   162d8:	6001      	str	r1, [r0, #0]
   162da:	4904      	ldr	r1, [pc, #16]	; (162ec <__cyg_profile_func_enter+0x24>)
   162dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
   162e0:	bf00      	nop
   162e2:	b002      	add	sp, #8
   162e4:	4770      	bx	lr
   162e6:	bf00      	nop
   162e8:	1000152c 	.word	0x1000152c
   162ec:	1000142c 	.word	0x1000142c

000162f0 <__cyg_profile_func_exit>:

  void __cyg_profile_func_exit(void *, void *)  // NOLINT
  {
   162f0:	b082      	sub	sp, #8
   162f2:	9001      	str	r0, [sp, #4]
   162f4:	9100      	str	r1, [sp, #0]
    stack_depth--;
   162f6:	4b04      	ldr	r3, [pc, #16]	; (16308 <__cyg_profile_func_exit+0x18>)
   162f8:	681b      	ldr	r3, [r3, #0]
   162fa:	3b01      	subs	r3, #1
   162fc:	4a02      	ldr	r2, [pc, #8]	; (16308 <__cyg_profile_func_exit+0x18>)
   162fe:	6013      	str	r3, [r2, #0]
  }
   16300:	bf00      	nop
   16302:	b002      	add	sp, #8
   16304:	4770      	bx	lr
   16306:	bf00      	nop
   16308:	1000152c 	.word	0x1000152c

0001630c <GetStackTrace()>:
}

void ** GetStackTrace()
{
   1630c:	b538      	push	{r3, r4, r5, lr}
   1630e:	4675      	mov	r5, lr
   16310:	462b      	mov	r3, r5
   16312:	4619      	mov	r1, r3
   16314:	4805      	ldr	r0, [pc, #20]	; (1632c <GetStackTrace()+0x20>)
   16316:	f7ff ffd7 	bl	162c8 <__cyg_profile_func_enter>
  return stack_trace;
   1631a:	4c05      	ldr	r4, [pc, #20]	; (16330 <GetStackTrace()+0x24>)
   1631c:	462b      	mov	r3, r5
   1631e:	4619      	mov	r1, r3
   16320:	4802      	ldr	r0, [pc, #8]	; (1632c <GetStackTrace()+0x20>)
   16322:	f7ff ffe5 	bl	162f0 <__cyg_profile_func_exit>
   16326:	4623      	mov	r3, r4
}
   16328:	4618      	mov	r0, r3
   1632a:	bd38      	pop	{r3, r4, r5, pc}
   1632c:	0001630d 	.word	0x0001630d
   16330:	1000142c 	.word	0x1000142c

00016334 <GetStackDepth()>:

size_t GetStackDepth()
{
   16334:	b538      	push	{r3, r4, r5, lr}
   16336:	4675      	mov	r5, lr
   16338:	462b      	mov	r3, r5
   1633a:	4619      	mov	r1, r3
   1633c:	4806      	ldr	r0, [pc, #24]	; (16358 <GetStackDepth()+0x24>)
   1633e:	f7ff ffc3 	bl	162c8 <__cyg_profile_func_enter>
  return stack_depth;
   16342:	4b06      	ldr	r3, [pc, #24]	; (1635c <GetStackDepth()+0x28>)
   16344:	681c      	ldr	r4, [r3, #0]
   16346:	462b      	mov	r3, r5
   16348:	4619      	mov	r1, r3
   1634a:	4803      	ldr	r0, [pc, #12]	; (16358 <GetStackDepth()+0x24>)
   1634c:	f7ff ffd0 	bl	162f0 <__cyg_profile_func_exit>
   16350:	4623      	mov	r3, r4
}
   16352:	4618      	mov	r0, r3
   16354:	bd38      	pop	{r3, r4, r5, pc}
   16356:	bf00      	nop
   16358:	00016335 	.word	0x00016335
   1635c:	1000152c 	.word	0x1000152c

00016360 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
   16360:	b510      	push	{r4, lr}
   16362:	b084      	sub	sp, #16
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
   16364:	4b29      	ldr	r3, [pc, #164]	; (1640c <vTaskSwitchContext+0xac>)
   16366:	681b      	ldr	r3, [r3, #0]
   16368:	2b00      	cmp	r3, #0
   1636a:	d003      	beq.n	16374 <vTaskSwitchContext+0x14>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
   1636c:	4b28      	ldr	r3, [pc, #160]	; (16410 <vTaskSwitchContext+0xb0>)
   1636e:	2201      	movs	r2, #1
   16370:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
   16372:	e047      	b.n	16404 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
   16374:	4b26      	ldr	r3, [pc, #152]	; (16410 <vTaskSwitchContext+0xb0>)
   16376:	2200      	movs	r2, #0
   16378:	601a      	str	r2, [r3, #0]
					ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
   1637a:	f7ff fa8d 	bl	15898 <UptimeRTOS>
   1637e:	4603      	mov	r3, r0
   16380:	460c      	mov	r4, r1
   16382:	461a      	mov	r2, r3
   16384:	4b23      	ldr	r3, [pc, #140]	; (16414 <vTaskSwitchContext+0xb4>)
   16386:	601a      	str	r2, [r3, #0]
				if( ulTotalRunTime > ulTaskSwitchedInTime )
   16388:	4b22      	ldr	r3, [pc, #136]	; (16414 <vTaskSwitchContext+0xb4>)
   1638a:	681a      	ldr	r2, [r3, #0]
   1638c:	4b22      	ldr	r3, [pc, #136]	; (16418 <vTaskSwitchContext+0xb8>)
   1638e:	681b      	ldr	r3, [r3, #0]
   16390:	429a      	cmp	r2, r3
   16392:	d909      	bls.n	163a8 <vTaskSwitchContext+0x48>
					pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
   16394:	4b21      	ldr	r3, [pc, #132]	; (1641c <vTaskSwitchContext+0xbc>)
   16396:	681b      	ldr	r3, [r3, #0]
   16398:	6d59      	ldr	r1, [r3, #84]	; 0x54
   1639a:	4a1e      	ldr	r2, [pc, #120]	; (16414 <vTaskSwitchContext+0xb4>)
   1639c:	6810      	ldr	r0, [r2, #0]
   1639e:	4a1e      	ldr	r2, [pc, #120]	; (16418 <vTaskSwitchContext+0xb8>)
   163a0:	6812      	ldr	r2, [r2, #0]
   163a2:	1a82      	subs	r2, r0, r2
   163a4:	440a      	add	r2, r1
   163a6:	655a      	str	r2, [r3, #84]	; 0x54
				ulTaskSwitchedInTime = ulTotalRunTime;
   163a8:	4b1a      	ldr	r3, [pc, #104]	; (16414 <vTaskSwitchContext+0xb4>)
   163aa:	681b      	ldr	r3, [r3, #0]
   163ac:	4a1a      	ldr	r2, [pc, #104]	; (16418 <vTaskSwitchContext+0xb8>)
   163ae:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
   163b0:	4b1b      	ldr	r3, [pc, #108]	; (16420 <vTaskSwitchContext+0xc0>)
   163b2:	681b      	ldr	r3, [r3, #0]
   163b4:	9301      	str	r3, [sp, #4]
	/* Generic helper function. */
	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitmap )
	{
	uint8_t ucReturn;

		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
   163b6:	9b01      	ldr	r3, [sp, #4]
   163b8:	fab3 f383 	clz	r3, r3
   163bc:	f88d 3003 	strb.w	r3, [sp, #3]
		return ucReturn;
   163c0:	f89d 3003 	ldrb.w	r3, [sp, #3]
   163c4:	f1c3 031f 	rsb	r3, r3, #31
   163c8:	9303      	str	r3, [sp, #12]
   163ca:	9a03      	ldr	r2, [sp, #12]
   163cc:	4613      	mov	r3, r2
   163ce:	009b      	lsls	r3, r3, #2
   163d0:	4413      	add	r3, r2
   163d2:	009b      	lsls	r3, r3, #2
   163d4:	4a13      	ldr	r2, [pc, #76]	; (16424 <vTaskSwitchContext+0xc4>)
   163d6:	4413      	add	r3, r2
   163d8:	9302      	str	r3, [sp, #8]
   163da:	9b02      	ldr	r3, [sp, #8]
   163dc:	685b      	ldr	r3, [r3, #4]
   163de:	685a      	ldr	r2, [r3, #4]
   163e0:	9b02      	ldr	r3, [sp, #8]
   163e2:	605a      	str	r2, [r3, #4]
   163e4:	9b02      	ldr	r3, [sp, #8]
   163e6:	685a      	ldr	r2, [r3, #4]
   163e8:	9b02      	ldr	r3, [sp, #8]
   163ea:	3308      	adds	r3, #8
   163ec:	429a      	cmp	r2, r3
   163ee:	d104      	bne.n	163fa <vTaskSwitchContext+0x9a>
   163f0:	9b02      	ldr	r3, [sp, #8]
   163f2:	685b      	ldr	r3, [r3, #4]
   163f4:	685a      	ldr	r2, [r3, #4]
   163f6:	9b02      	ldr	r3, [sp, #8]
   163f8:	605a      	str	r2, [r3, #4]
   163fa:	9b02      	ldr	r3, [sp, #8]
   163fc:	685b      	ldr	r3, [r3, #4]
   163fe:	68db      	ldr	r3, [r3, #12]
   16400:	4a06      	ldr	r2, [pc, #24]	; (1641c <vTaskSwitchContext+0xbc>)
   16402:	6013      	str	r3, [r2, #0]
}
   16404:	bf00      	nop
   16406:	b004      	add	sp, #16
   16408:	bd10      	pop	{r4, pc}
   1640a:	bf00      	nop
   1640c:	100015a0 	.word	0x100015a0
   16410:	1000159c 	.word	0x1000159c
   16414:	100015a8 	.word	0x100015a8
   16418:	100015a4 	.word	0x100015a4
   1641c:	10001530 	.word	0x10001530
   16420:	10001598 	.word	0x10001598
   16424:	10001534 	.word	0x10001534
   16428:	ffffffff 	.word	0xffffffff
   1642c:	ffffffff 	.word	0xffffffff

00016430 <vPortSVCHandler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
   16430:	4b07      	ldr	r3, [pc, #28]	; (16450 <pxCurrentTCBConst2>)
   16432:	6819      	ldr	r1, [r3, #0]
   16434:	6808      	ldr	r0, [r1, #0]
   16436:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1643a:	f380 8809 	msr	PSP, r0
   1643e:	f3bf 8f6f 	isb	sy
   16442:	f04f 0000 	mov.w	r0, #0
   16446:	f380 8811 	msr	BASEPRI, r0
   1644a:	4770      	bx	lr
   1644c:	f3af 8000 	nop.w

00016450 <pxCurrentTCBConst2>:
   16450:	10001530 	.word	0x10001530
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
   16454:	bf00      	nop
   16456:	bf00      	nop
   16458:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   1645c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

00016460 <xPortPendSVHandler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
   16460:	f3ef 8009 	mrs	r0, PSP
   16464:	f3bf 8f6f 	isb	sy
   16468:	4b15      	ldr	r3, [pc, #84]	; (164c0 <pxCurrentTCBConst>)
   1646a:	681a      	ldr	r2, [r3, #0]
   1646c:	f01e 0f10 	tst.w	lr, #16
   16470:	bf08      	it	eq
   16472:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
   16476:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1647a:	6010      	str	r0, [r2, #0]
   1647c:	e92d 0009 	stmdb	sp!, {r0, r3}
   16480:	f04f 0028 	mov.w	r0, #40	; 0x28
   16484:	f380 8811 	msr	BASEPRI, r0
   16488:	f3bf 8f4f 	dsb	sy
   1648c:	f3bf 8f6f 	isb	sy
   16490:	f7ff ff66 	bl	16360 <vTaskSwitchContext>
   16494:	f04f 0000 	mov.w	r0, #0
   16498:	f380 8811 	msr	BASEPRI, r0
   1649c:	bc09      	pop	{r0, r3}
   1649e:	6819      	ldr	r1, [r3, #0]
   164a0:	6808      	ldr	r0, [r1, #0]
   164a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   164a6:	f01e 0f10 	tst.w	lr, #16
   164aa:	bf08      	it	eq
   164ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
   164b0:	f380 8809 	msr	PSP, r0
   164b4:	f3bf 8f6f 	isb	sy
   164b8:	4770      	bx	lr
   164ba:	bf00      	nop
   164bc:	f3af 8000 	nop.w

000164c0 <pxCurrentTCBConst>:
   164c0:	10001530 	.word	0x10001530
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
   164c4:	bf00      	nop
   164c6:	bf00      	nop

000164c8 <_out_buffer(char, void*, unsigned int, unsigned int)>:
} out_fct_wrap_type;


// internal buffer output
static inline void _out_buffer(char character, void* buffer, size_t idx, size_t maxlen)
{
   164c8:	b510      	push	{r4, lr}
   164ca:	b084      	sub	sp, #16
   164cc:	4674      	mov	r4, lr
   164ce:	9102      	str	r1, [sp, #8]
   164d0:	9201      	str	r2, [sp, #4]
   164d2:	9300      	str	r3, [sp, #0]
   164d4:	4603      	mov	r3, r0
   164d6:	f88d 300f 	strb.w	r3, [sp, #15]
   164da:	4623      	mov	r3, r4
   164dc:	4619      	mov	r1, r3
   164de:	480a      	ldr	r0, [pc, #40]	; (16508 <_out_buffer(char, void*, unsigned int, unsigned int)+0x40>)
   164e0:	f7ff fef2 	bl	162c8 <__cyg_profile_func_enter>
  if (idx < maxlen) {
   164e4:	9a01      	ldr	r2, [sp, #4]
   164e6:	9b00      	ldr	r3, [sp, #0]
   164e8:	429a      	cmp	r2, r3
   164ea:	d205      	bcs.n	164f8 <_out_buffer(char, void*, unsigned int, unsigned int)+0x30>
    ((char*)buffer)[idx] = character;
   164ec:	9a02      	ldr	r2, [sp, #8]
   164ee:	9b01      	ldr	r3, [sp, #4]
   164f0:	4413      	add	r3, r2
   164f2:	f89d 200f 	ldrb.w	r2, [sp, #15]
   164f6:	701a      	strb	r2, [r3, #0]
   164f8:	4623      	mov	r3, r4
   164fa:	4619      	mov	r1, r3
   164fc:	4802      	ldr	r0, [pc, #8]	; (16508 <_out_buffer(char, void*, unsigned int, unsigned int)+0x40>)
   164fe:	f7ff fef7 	bl	162f0 <__cyg_profile_func_exit>
  }
}
   16502:	bf00      	nop
   16504:	b004      	add	sp, #16
   16506:	bd10      	pop	{r4, pc}
   16508:	000164c9 	.word	0x000164c9

0001650c <_out_null(char, void*, unsigned int, unsigned int)>:


// internal null output
static inline void _out_null(char character, void* buffer, size_t idx, size_t maxlen)
{
   1650c:	b510      	push	{r4, lr}
   1650e:	b084      	sub	sp, #16
   16510:	4674      	mov	r4, lr
   16512:	9102      	str	r1, [sp, #8]
   16514:	9201      	str	r2, [sp, #4]
   16516:	9300      	str	r3, [sp, #0]
   16518:	4603      	mov	r3, r0
   1651a:	f88d 300f 	strb.w	r3, [sp, #15]
   1651e:	4623      	mov	r3, r4
   16520:	4619      	mov	r1, r3
   16522:	4805      	ldr	r0, [pc, #20]	; (16538 <_out_null(char, void*, unsigned int, unsigned int)+0x2c>)
   16524:	f7ff fed0 	bl	162c8 <__cyg_profile_func_enter>
   16528:	4623      	mov	r3, r4
   1652a:	4619      	mov	r1, r3
   1652c:	4802      	ldr	r0, [pc, #8]	; (16538 <_out_null(char, void*, unsigned int, unsigned int)+0x2c>)
   1652e:	f7ff fedf 	bl	162f0 <__cyg_profile_func_exit>
  (void)character; (void)buffer; (void)idx; (void)maxlen;
}
   16532:	bf00      	nop
   16534:	b004      	add	sp, #16
   16536:	bd10      	pop	{r4, pc}
   16538:	0001650d 	.word	0x0001650d

0001653c <_out_char(char, void*, unsigned int, unsigned int)>:


// internal _putchar wrapper
static inline void _out_char(char character, void* buffer, size_t idx, size_t maxlen)
{
   1653c:	b510      	push	{r4, lr}
   1653e:	b084      	sub	sp, #16
   16540:	4674      	mov	r4, lr
   16542:	9102      	str	r1, [sp, #8]
   16544:	9201      	str	r2, [sp, #4]
   16546:	9300      	str	r3, [sp, #0]
   16548:	4603      	mov	r3, r0
   1654a:	f88d 300f 	strb.w	r3, [sp, #15]
   1654e:	4623      	mov	r3, r4
   16550:	4619      	mov	r1, r3
   16552:	480a      	ldr	r0, [pc, #40]	; (1657c <_out_char(char, void*, unsigned int, unsigned int)+0x40>)
   16554:	f7ff feb8 	bl	162c8 <__cyg_profile_func_enter>
  (void)buffer; (void)idx; (void)maxlen;
  if (character) {
   16558:	f89d 300f 	ldrb.w	r3, [sp, #15]
   1655c:	2b00      	cmp	r3, #0
   1655e:	d004      	beq.n	1656a <_out_char(char, void*, unsigned int, unsigned int)+0x2e>
    _putchar(character);
   16560:	f89d 300f 	ldrb.w	r3, [sp, #15]
   16564:	4618      	mov	r0, r3
   16566:	f7ff fe45 	bl	161f4 <_putchar>
   1656a:	4623      	mov	r3, r4
   1656c:	4619      	mov	r1, r3
   1656e:	4803      	ldr	r0, [pc, #12]	; (1657c <_out_char(char, void*, unsigned int, unsigned int)+0x40>)
   16570:	f7ff febe 	bl	162f0 <__cyg_profile_func_exit>
  }
}
   16574:	bf00      	nop
   16576:	b004      	add	sp, #16
   16578:	bd10      	pop	{r4, pc}
   1657a:	bf00      	nop
   1657c:	0001653d 	.word	0x0001653d

00016580 <_strlen(char const*)>:


// internal strlen
// \return The length of the string (excluding the terminating 0)
static inline unsigned int _strlen(const char* str)
{
   16580:	b530      	push	{r4, r5, lr}
   16582:	b085      	sub	sp, #20
   16584:	4674      	mov	r4, lr
   16586:	9001      	str	r0, [sp, #4]
   16588:	4623      	mov	r3, r4
   1658a:	4619      	mov	r1, r3
   1658c:	480c      	ldr	r0, [pc, #48]	; (165c0 <_strlen(char const*)+0x40>)
   1658e:	f7ff fe9b 	bl	162c8 <__cyg_profile_func_enter>
  const char* s;
  for (s = str; *s; ++s);
   16592:	9b01      	ldr	r3, [sp, #4]
   16594:	9303      	str	r3, [sp, #12]
   16596:	9b03      	ldr	r3, [sp, #12]
   16598:	781b      	ldrb	r3, [r3, #0]
   1659a:	2b00      	cmp	r3, #0
   1659c:	d003      	beq.n	165a6 <_strlen(char const*)+0x26>
   1659e:	9b03      	ldr	r3, [sp, #12]
   165a0:	3301      	adds	r3, #1
   165a2:	9303      	str	r3, [sp, #12]
   165a4:	e7f7      	b.n	16596 <_strlen(char const*)+0x16>
  return (unsigned int)(s - str);
   165a6:	9a03      	ldr	r2, [sp, #12]
   165a8:	9b01      	ldr	r3, [sp, #4]
   165aa:	1ad3      	subs	r3, r2, r3
   165ac:	461d      	mov	r5, r3
   165ae:	4623      	mov	r3, r4
   165b0:	4619      	mov	r1, r3
   165b2:	4803      	ldr	r0, [pc, #12]	; (165c0 <_strlen(char const*)+0x40>)
   165b4:	f7ff fe9c 	bl	162f0 <__cyg_profile_func_exit>
   165b8:	462b      	mov	r3, r5
}
   165ba:	4618      	mov	r0, r3
   165bc:	b005      	add	sp, #20
   165be:	bd30      	pop	{r4, r5, pc}
   165c0:	00016581 	.word	0x00016581

000165c4 <_is_digit(char)>:


// internal test if char is a digit (0-9)
// \return true if char is a digit
static inline bool _is_digit(char ch)
{
   165c4:	b530      	push	{r4, r5, lr}
   165c6:	b083      	sub	sp, #12
   165c8:	4675      	mov	r5, lr
   165ca:	4603      	mov	r3, r0
   165cc:	f88d 3007 	strb.w	r3, [sp, #7]
   165d0:	462b      	mov	r3, r5
   165d2:	4619      	mov	r1, r3
   165d4:	480b      	ldr	r0, [pc, #44]	; (16604 <_is_digit(char)+0x40>)
   165d6:	f7ff fe77 	bl	162c8 <__cyg_profile_func_enter>
  return (ch >= '0') && (ch <= '9');
   165da:	f89d 3007 	ldrb.w	r3, [sp, #7]
   165de:	2b2f      	cmp	r3, #47	; 0x2f
   165e0:	d905      	bls.n	165ee <_is_digit(char)+0x2a>
   165e2:	f89d 3007 	ldrb.w	r3, [sp, #7]
   165e6:	2b39      	cmp	r3, #57	; 0x39
   165e8:	d801      	bhi.n	165ee <_is_digit(char)+0x2a>
   165ea:	2401      	movs	r4, #1
   165ec:	e000      	b.n	165f0 <_is_digit(char)+0x2c>
   165ee:	2400      	movs	r4, #0
   165f0:	462b      	mov	r3, r5
   165f2:	4619      	mov	r1, r3
   165f4:	4803      	ldr	r0, [pc, #12]	; (16604 <_is_digit(char)+0x40>)
   165f6:	f7ff fe7b 	bl	162f0 <__cyg_profile_func_exit>
   165fa:	4623      	mov	r3, r4
}
   165fc:	4618      	mov	r0, r3
   165fe:	b003      	add	sp, #12
   16600:	bd30      	pop	{r4, r5, pc}
   16602:	bf00      	nop
   16604:	000165c5 	.word	0x000165c5

00016608 <_atoi(char const**)>:


// internal ASCII string to unsigned int conversion
static unsigned int _atoi(const char** str)
{
   16608:	b530      	push	{r4, r5, lr}
   1660a:	b085      	sub	sp, #20
   1660c:	4675      	mov	r5, lr
   1660e:	9001      	str	r0, [sp, #4]
   16610:	462b      	mov	r3, r5
   16612:	4619      	mov	r1, r3
   16614:	4813      	ldr	r0, [pc, #76]	; (16664 <_atoi(char const**)+0x5c>)
   16616:	f7ff fe57 	bl	162c8 <__cyg_profile_func_enter>
  unsigned int i = 0U;
   1661a:	2300      	movs	r3, #0
   1661c:	9303      	str	r3, [sp, #12]
  while (_is_digit(**str)) {
   1661e:	9b01      	ldr	r3, [sp, #4]
   16620:	681b      	ldr	r3, [r3, #0]
   16622:	781b      	ldrb	r3, [r3, #0]
   16624:	4618      	mov	r0, r3
   16626:	f7ff ffcd 	bl	165c4 <_is_digit(char)>
   1662a:	4603      	mov	r3, r0
   1662c:	2b00      	cmp	r3, #0
   1662e:	d00f      	beq.n	16650 <_atoi(char const**)+0x48>
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
   16630:	9a03      	ldr	r2, [sp, #12]
   16632:	4613      	mov	r3, r2
   16634:	009b      	lsls	r3, r3, #2
   16636:	4413      	add	r3, r2
   16638:	005b      	lsls	r3, r3, #1
   1663a:	4618      	mov	r0, r3
   1663c:	9b01      	ldr	r3, [sp, #4]
   1663e:	681b      	ldr	r3, [r3, #0]
   16640:	1c59      	adds	r1, r3, #1
   16642:	9a01      	ldr	r2, [sp, #4]
   16644:	6011      	str	r1, [r2, #0]
   16646:	781b      	ldrb	r3, [r3, #0]
   16648:	4403      	add	r3, r0
   1664a:	3b30      	subs	r3, #48	; 0x30
   1664c:	9303      	str	r3, [sp, #12]
  while (_is_digit(**str)) {
   1664e:	e7e6      	b.n	1661e <_atoi(char const**)+0x16>
  }
  return i;
   16650:	9c03      	ldr	r4, [sp, #12]
   16652:	462b      	mov	r3, r5
   16654:	4619      	mov	r1, r3
   16656:	4803      	ldr	r0, [pc, #12]	; (16664 <_atoi(char const**)+0x5c>)
   16658:	f7ff fe4a 	bl	162f0 <__cyg_profile_func_exit>
   1665c:	4623      	mov	r3, r4
}
   1665e:	4618      	mov	r0, r3
   16660:	b005      	add	sp, #20
   16662:	bd30      	pop	{r4, r5, pc}
   16664:	00016609 	.word	0x00016609

00016668 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)>:


// internal itoa format
static size_t _ntoa_format(out_fct_type out, char* buffer, size_t idx, size_t maxlen, char* buf, size_t len, bool negative, unsigned int base, unsigned int prec, unsigned int width, unsigned int flags)
{
   16668:	b530      	push	{r4, r5, lr}
   1666a:	b089      	sub	sp, #36	; 0x24
   1666c:	4675      	mov	r5, lr
   1666e:	9003      	str	r0, [sp, #12]
   16670:	9102      	str	r1, [sp, #8]
   16672:	9201      	str	r2, [sp, #4]
   16674:	9300      	str	r3, [sp, #0]
   16676:	462b      	mov	r3, r5
   16678:	4619      	mov	r1, r3
   1667a:	4891      	ldr	r0, [pc, #580]	; (168c0 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x258>)
   1667c:	f7ff fe24 	bl	162c8 <__cyg_profile_func_enter>
  const size_t start_idx = idx;
   16680:	9b01      	ldr	r3, [sp, #4]
   16682:	9305      	str	r3, [sp, #20]

  // pad leading zeros
  while (!(flags & FLAGS_LEFT) && (len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
   16684:	9b12      	ldr	r3, [sp, #72]	; 0x48
   16686:	f003 0302 	and.w	r3, r3, #2
   1668a:	2b00      	cmp	r3, #0
   1668c:	d10e      	bne.n	166ac <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x44>
   1668e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   16690:	9b10      	ldr	r3, [sp, #64]	; 0x40
   16692:	429a      	cmp	r2, r3
   16694:	d20a      	bcs.n	166ac <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x44>
   16696:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   16698:	2b1f      	cmp	r3, #31
   1669a:	d807      	bhi.n	166ac <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x44>
    buf[len++] = '0';
   1669c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1669e:	1c5a      	adds	r2, r3, #1
   166a0:	920d      	str	r2, [sp, #52]	; 0x34
   166a2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   166a4:	4413      	add	r3, r2
   166a6:	2230      	movs	r2, #48	; 0x30
   166a8:	701a      	strb	r2, [r3, #0]
  while (!(flags & FLAGS_LEFT) && (len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
   166aa:	e7eb      	b.n	16684 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1c>
  }
  while (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
   166ac:	9b12      	ldr	r3, [sp, #72]	; 0x48
   166ae:	f003 0302 	and.w	r3, r3, #2
   166b2:	2b00      	cmp	r3, #0
   166b4:	d113      	bne.n	166de <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x76>
   166b6:	9b12      	ldr	r3, [sp, #72]	; 0x48
   166b8:	f003 0301 	and.w	r3, r3, #1
   166bc:	2b00      	cmp	r3, #0
   166be:	d00e      	beq.n	166de <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x76>
   166c0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   166c2:	9b11      	ldr	r3, [sp, #68]	; 0x44
   166c4:	429a      	cmp	r2, r3
   166c6:	d20a      	bcs.n	166de <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x76>
   166c8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   166ca:	2b1f      	cmp	r3, #31
   166cc:	d807      	bhi.n	166de <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x76>
    buf[len++] = '0';
   166ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   166d0:	1c5a      	adds	r2, r3, #1
   166d2:	920d      	str	r2, [sp, #52]	; 0x34
   166d4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   166d6:	4413      	add	r3, r2
   166d8:	2230      	movs	r2, #48	; 0x30
   166da:	701a      	strb	r2, [r3, #0]
  while (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
   166dc:	e7e6      	b.n	166ac <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x44>
  }

  // handle hash
  if (flags & FLAGS_HASH) {
   166de:	9b12      	ldr	r3, [sp, #72]	; 0x48
   166e0:	f003 0310 	and.w	r3, r3, #16
   166e4:	2b00      	cmp	r3, #0
   166e6:	d058      	beq.n	1679a <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x132>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
   166e8:	9b12      	ldr	r3, [sp, #72]	; 0x48
   166ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
   166ee:	2b00      	cmp	r3, #0
   166f0:	d116      	bne.n	16720 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xb8>
   166f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   166f4:	2b00      	cmp	r3, #0
   166f6:	d013      	beq.n	16720 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xb8>
   166f8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   166fa:	9b10      	ldr	r3, [sp, #64]	; 0x40
   166fc:	429a      	cmp	r2, r3
   166fe:	d003      	beq.n	16708 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xa0>
   16700:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   16702:	9b11      	ldr	r3, [sp, #68]	; 0x44
   16704:	429a      	cmp	r2, r3
   16706:	d10b      	bne.n	16720 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xb8>
      len--;
   16708:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1670a:	3b01      	subs	r3, #1
   1670c:	930d      	str	r3, [sp, #52]	; 0x34
      if (len && (base == 16U)) {
   1670e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   16710:	2b00      	cmp	r3, #0
   16712:	d005      	beq.n	16720 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xb8>
   16714:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   16716:	2b10      	cmp	r3, #16
   16718:	d102      	bne.n	16720 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xb8>
        len--;
   1671a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1671c:	3b01      	subs	r3, #1
   1671e:	930d      	str	r3, [sp, #52]	; 0x34
      }
    }
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
   16720:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   16722:	2b10      	cmp	r3, #16
   16724:	d10f      	bne.n	16746 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xde>
   16726:	9b12      	ldr	r3, [sp, #72]	; 0x48
   16728:	f003 0320 	and.w	r3, r3, #32
   1672c:	2b00      	cmp	r3, #0
   1672e:	d10a      	bne.n	16746 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xde>
   16730:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   16732:	2b1f      	cmp	r3, #31
   16734:	d807      	bhi.n	16746 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xde>
      buf[len++] = 'x';
   16736:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   16738:	1c5a      	adds	r2, r3, #1
   1673a:	920d      	str	r2, [sp, #52]	; 0x34
   1673c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1673e:	4413      	add	r3, r2
   16740:	2278      	movs	r2, #120	; 0x78
   16742:	701a      	strb	r2, [r3, #0]
   16744:	e01f      	b.n	16786 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x11e>
    }
    else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
   16746:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   16748:	2b10      	cmp	r3, #16
   1674a:	d10f      	bne.n	1676c <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x104>
   1674c:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1674e:	f003 0320 	and.w	r3, r3, #32
   16752:	2b00      	cmp	r3, #0
   16754:	d00a      	beq.n	1676c <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x104>
   16756:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   16758:	2b1f      	cmp	r3, #31
   1675a:	d807      	bhi.n	1676c <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x104>
      buf[len++] = 'X';
   1675c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1675e:	1c5a      	adds	r2, r3, #1
   16760:	920d      	str	r2, [sp, #52]	; 0x34
   16762:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   16764:	4413      	add	r3, r2
   16766:	2258      	movs	r2, #88	; 0x58
   16768:	701a      	strb	r2, [r3, #0]
   1676a:	e00c      	b.n	16786 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x11e>
    }
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
   1676c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1676e:	2b02      	cmp	r3, #2
   16770:	d109      	bne.n	16786 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x11e>
   16772:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   16774:	2b1f      	cmp	r3, #31
   16776:	d806      	bhi.n	16786 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x11e>
      buf[len++] = 'b';
   16778:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1677a:	1c5a      	adds	r2, r3, #1
   1677c:	920d      	str	r2, [sp, #52]	; 0x34
   1677e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   16780:	4413      	add	r3, r2
   16782:	2262      	movs	r2, #98	; 0x62
   16784:	701a      	strb	r2, [r3, #0]
    }
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
   16786:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   16788:	2b1f      	cmp	r3, #31
   1678a:	d806      	bhi.n	1679a <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x132>
      buf[len++] = '0';
   1678c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1678e:	1c5a      	adds	r2, r3, #1
   16790:	920d      	str	r2, [sp, #52]	; 0x34
   16792:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   16794:	4413      	add	r3, r2
   16796:	2230      	movs	r2, #48	; 0x30
   16798:	701a      	strb	r2, [r3, #0]
    }
  }

  // handle sign
  if (len && (len == width) && (negative || (flags & FLAGS_PLUS) || (flags & FLAGS_SPACE))) {
   1679a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1679c:	2b00      	cmp	r3, #0
   1679e:	d014      	beq.n	167ca <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x162>
   167a0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   167a2:	9b11      	ldr	r3, [sp, #68]	; 0x44
   167a4:	429a      	cmp	r2, r3
   167a6:	d110      	bne.n	167ca <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x162>
   167a8:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
   167ac:	2b00      	cmp	r3, #0
   167ae:	d109      	bne.n	167c4 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x15c>
   167b0:	9b12      	ldr	r3, [sp, #72]	; 0x48
   167b2:	f003 0304 	and.w	r3, r3, #4
   167b6:	2b00      	cmp	r3, #0
   167b8:	d104      	bne.n	167c4 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x15c>
   167ba:	9b12      	ldr	r3, [sp, #72]	; 0x48
   167bc:	f003 0308 	and.w	r3, r3, #8
   167c0:	2b00      	cmp	r3, #0
   167c2:	d002      	beq.n	167ca <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x162>
    len--;
   167c4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   167c6:	3b01      	subs	r3, #1
   167c8:	930d      	str	r3, [sp, #52]	; 0x34
  }
  if (len < PRINTF_NTOA_BUFFER_SIZE) {
   167ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   167cc:	2b1f      	cmp	r3, #31
   167ce:	d824      	bhi.n	1681a <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1b2>
    if (negative) {
   167d0:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
   167d4:	2b00      	cmp	r3, #0
   167d6:	d007      	beq.n	167e8 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x180>
      buf[len++] = '-';
   167d8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   167da:	1c5a      	adds	r2, r3, #1
   167dc:	920d      	str	r2, [sp, #52]	; 0x34
   167de:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   167e0:	4413      	add	r3, r2
   167e2:	222d      	movs	r2, #45	; 0x2d
   167e4:	701a      	strb	r2, [r3, #0]
   167e6:	e018      	b.n	1681a <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1b2>
    }
    else if (flags & FLAGS_PLUS) {
   167e8:	9b12      	ldr	r3, [sp, #72]	; 0x48
   167ea:	f003 0304 	and.w	r3, r3, #4
   167ee:	2b00      	cmp	r3, #0
   167f0:	d007      	beq.n	16802 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x19a>
      buf[len++] = '+';  // ignore the space if the '+' exists
   167f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   167f4:	1c5a      	adds	r2, r3, #1
   167f6:	920d      	str	r2, [sp, #52]	; 0x34
   167f8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   167fa:	4413      	add	r3, r2
   167fc:	222b      	movs	r2, #43	; 0x2b
   167fe:	701a      	strb	r2, [r3, #0]
   16800:	e00b      	b.n	1681a <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1b2>
    }
    else if (flags & FLAGS_SPACE) {
   16802:	9b12      	ldr	r3, [sp, #72]	; 0x48
   16804:	f003 0308 	and.w	r3, r3, #8
   16808:	2b00      	cmp	r3, #0
   1680a:	d006      	beq.n	1681a <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1b2>
      buf[len++] = ' ';
   1680c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1680e:	1c5a      	adds	r2, r3, #1
   16810:	920d      	str	r2, [sp, #52]	; 0x34
   16812:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   16814:	4413      	add	r3, r2
   16816:	2220      	movs	r2, #32
   16818:	701a      	strb	r2, [r3, #0]
    }
  }

  // pad spaces up to given width
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
   1681a:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1681c:	f003 0302 	and.w	r3, r3, #2
   16820:	2b00      	cmp	r3, #0
   16822:	d116      	bne.n	16852 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1ea>
   16824:	9b12      	ldr	r3, [sp, #72]	; 0x48
   16826:	f003 0301 	and.w	r3, r3, #1
   1682a:	2b00      	cmp	r3, #0
   1682c:	d111      	bne.n	16852 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1ea>
    for (size_t i = len; i < width; i++) {
   1682e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   16830:	9307      	str	r3, [sp, #28]
   16832:	9a07      	ldr	r2, [sp, #28]
   16834:	9b11      	ldr	r3, [sp, #68]	; 0x44
   16836:	429a      	cmp	r2, r3
   16838:	d20b      	bcs.n	16852 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1ea>
      out(' ', buffer, idx++, maxlen);
   1683a:	9a01      	ldr	r2, [sp, #4]
   1683c:	1c53      	adds	r3, r2, #1
   1683e:	9301      	str	r3, [sp, #4]
   16840:	9c03      	ldr	r4, [sp, #12]
   16842:	9b00      	ldr	r3, [sp, #0]
   16844:	9902      	ldr	r1, [sp, #8]
   16846:	2020      	movs	r0, #32
   16848:	47a0      	blx	r4
    for (size_t i = len; i < width; i++) {
   1684a:	9b07      	ldr	r3, [sp, #28]
   1684c:	3301      	adds	r3, #1
   1684e:	9307      	str	r3, [sp, #28]
   16850:	e7ef      	b.n	16832 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1ca>
    }
  }

  // reverse string
  for (size_t i = 0U; i < len; i++) {
   16852:	2300      	movs	r3, #0
   16854:	9306      	str	r3, [sp, #24]
   16856:	9a06      	ldr	r2, [sp, #24]
   16858:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1685a:	429a      	cmp	r2, r3
   1685c:	d211      	bcs.n	16882 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x21a>
    out(buf[len - i - 1U], buffer, idx++, maxlen);
   1685e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   16860:	9b06      	ldr	r3, [sp, #24]
   16862:	1ad3      	subs	r3, r2, r3
   16864:	3b01      	subs	r3, #1
   16866:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   16868:	4413      	add	r3, r2
   1686a:	7818      	ldrb	r0, [r3, #0]
   1686c:	9a01      	ldr	r2, [sp, #4]
   1686e:	1c53      	adds	r3, r2, #1
   16870:	9301      	str	r3, [sp, #4]
   16872:	9c03      	ldr	r4, [sp, #12]
   16874:	9b00      	ldr	r3, [sp, #0]
   16876:	9902      	ldr	r1, [sp, #8]
   16878:	47a0      	blx	r4
  for (size_t i = 0U; i < len; i++) {
   1687a:	9b06      	ldr	r3, [sp, #24]
   1687c:	3301      	adds	r3, #1
   1687e:	9306      	str	r3, [sp, #24]
   16880:	e7e9      	b.n	16856 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1ee>
  }

  // append pad spaces up to given width
  if (flags & FLAGS_LEFT) {
   16882:	9b12      	ldr	r3, [sp, #72]	; 0x48
   16884:	f003 0302 	and.w	r3, r3, #2
   16888:	2b00      	cmp	r3, #0
   1688a:	d00e      	beq.n	168aa <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x242>
    while (idx - start_idx < width) {
   1688c:	9a01      	ldr	r2, [sp, #4]
   1688e:	9b05      	ldr	r3, [sp, #20]
   16890:	1ad3      	subs	r3, r2, r3
   16892:	9a11      	ldr	r2, [sp, #68]	; 0x44
   16894:	429a      	cmp	r2, r3
   16896:	d908      	bls.n	168aa <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x242>
      out(' ', buffer, idx++, maxlen);
   16898:	9a01      	ldr	r2, [sp, #4]
   1689a:	1c53      	adds	r3, r2, #1
   1689c:	9301      	str	r3, [sp, #4]
   1689e:	9c03      	ldr	r4, [sp, #12]
   168a0:	9b00      	ldr	r3, [sp, #0]
   168a2:	9902      	ldr	r1, [sp, #8]
   168a4:	2020      	movs	r0, #32
   168a6:	47a0      	blx	r4
    while (idx - start_idx < width) {
   168a8:	e7f0      	b.n	1688c <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x224>
    }
  }

  return idx;
   168aa:	9c01      	ldr	r4, [sp, #4]
   168ac:	462b      	mov	r3, r5
   168ae:	4619      	mov	r1, r3
   168b0:	4803      	ldr	r0, [pc, #12]	; (168c0 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x258>)
   168b2:	f7ff fd1d 	bl	162f0 <__cyg_profile_func_exit>
   168b6:	4623      	mov	r3, r4
}
   168b8:	4618      	mov	r0, r3
   168ba:	b009      	add	sp, #36	; 0x24
   168bc:	bd30      	pop	{r4, r5, pc}
   168be:	bf00      	nop
   168c0:	00016669 	.word	0x00016669

000168c4 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)>:


// internal itoa for 'long' type
static size_t _ntoa_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long value, bool negative, unsigned long base, unsigned int prec, unsigned int width, unsigned int flags)
{
   168c4:	b530      	push	{r4, r5, lr}
   168c6:	b097      	sub	sp, #92	; 0x5c
   168c8:	4674      	mov	r4, lr
   168ca:	900b      	str	r0, [sp, #44]	; 0x2c
   168cc:	910a      	str	r1, [sp, #40]	; 0x28
   168ce:	9209      	str	r2, [sp, #36]	; 0x24
   168d0:	9308      	str	r3, [sp, #32]
   168d2:	4623      	mov	r3, r4
   168d4:	4619      	mov	r1, r3
   168d6:	4833      	ldr	r0, [pc, #204]	; (169a4 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0xe0>)
   168d8:	f7ff fcf6 	bl	162c8 <__cyg_profile_func_enter>
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
   168dc:	2300      	movs	r3, #0
   168de:	9315      	str	r3, [sp, #84]	; 0x54

  // no hash for 0 values
  if (!value) {
   168e0:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   168e2:	2b00      	cmp	r3, #0
   168e4:	d103      	bne.n	168ee <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x2a>
    flags &= ~FLAGS_HASH;
   168e6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   168e8:	f023 0310 	bic.w	r3, r3, #16
   168ec:	931f      	str	r3, [sp, #124]	; 0x7c
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
   168ee:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   168f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
   168f4:	2b00      	cmp	r3, #0
   168f6:	d002      	beq.n	168fe <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x3a>
   168f8:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   168fa:	2b00      	cmp	r3, #0
   168fc:	d033      	beq.n	16966 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0xa2>
    do {
      const char digit = (char)(value % base);
   168fe:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   16900:	9a1c      	ldr	r2, [sp, #112]	; 0x70
   16902:	fbb3 f2f2 	udiv	r2, r3, r2
   16906:	991c      	ldr	r1, [sp, #112]	; 0x70
   16908:	fb01 f202 	mul.w	r2, r1, r2
   1690c:	1a9b      	subs	r3, r3, r2
   1690e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
   16912:	f89d 3053 	ldrb.w	r3, [sp, #83]	; 0x53
   16916:	2b09      	cmp	r3, #9
   16918:	d804      	bhi.n	16924 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x60>
   1691a:	f89d 3053 	ldrb.w	r3, [sp, #83]	; 0x53
   1691e:	3330      	adds	r3, #48	; 0x30
   16920:	b2da      	uxtb	r2, r3
   16922:	e00d      	b.n	16940 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x7c>
   16924:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   16926:	f003 0320 	and.w	r3, r3, #32
   1692a:	2b00      	cmp	r3, #0
   1692c:	d001      	beq.n	16932 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x6e>
   1692e:	2241      	movs	r2, #65	; 0x41
   16930:	e000      	b.n	16934 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x70>
   16932:	2261      	movs	r2, #97	; 0x61
   16934:	f89d 3053 	ldrb.w	r3, [sp, #83]	; 0x53
   16938:	4413      	add	r3, r2
   1693a:	b2db      	uxtb	r3, r3
   1693c:	3b0a      	subs	r3, #10
   1693e:	b2da      	uxtb	r2, r3
   16940:	9b15      	ldr	r3, [sp, #84]	; 0x54
   16942:	1c59      	adds	r1, r3, #1
   16944:	9115      	str	r1, [sp, #84]	; 0x54
   16946:	a916      	add	r1, sp, #88	; 0x58
   16948:	440b      	add	r3, r1
   1694a:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
   1694e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   16950:	9b1c      	ldr	r3, [sp, #112]	; 0x70
   16952:	fbb2 f3f3 	udiv	r3, r2, r3
   16956:	931a      	str	r3, [sp, #104]	; 0x68
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
   16958:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   1695a:	2b00      	cmp	r3, #0
   1695c:	d003      	beq.n	16966 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0xa2>
   1695e:	9b15      	ldr	r3, [sp, #84]	; 0x54
   16960:	2b1f      	cmp	r3, #31
   16962:	d800      	bhi.n	16966 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0xa2>
    do {
   16964:	e7cb      	b.n	168fe <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x3a>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
   16966:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   16968:	9306      	str	r3, [sp, #24]
   1696a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   1696c:	9305      	str	r3, [sp, #20]
   1696e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   16970:	9304      	str	r3, [sp, #16]
   16972:	9b1c      	ldr	r3, [sp, #112]	; 0x70
   16974:	9303      	str	r3, [sp, #12]
   16976:	f89d 306c 	ldrb.w	r3, [sp, #108]	; 0x6c
   1697a:	9302      	str	r3, [sp, #8]
   1697c:	9b15      	ldr	r3, [sp, #84]	; 0x54
   1697e:	9301      	str	r3, [sp, #4]
   16980:	ab0c      	add	r3, sp, #48	; 0x30
   16982:	9300      	str	r3, [sp, #0]
   16984:	9b08      	ldr	r3, [sp, #32]
   16986:	9a09      	ldr	r2, [sp, #36]	; 0x24
   16988:	990a      	ldr	r1, [sp, #40]	; 0x28
   1698a:	980b      	ldr	r0, [sp, #44]	; 0x2c
   1698c:	f7ff fe6c 	bl	16668 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)>
   16990:	4605      	mov	r5, r0
   16992:	4623      	mov	r3, r4
   16994:	4619      	mov	r1, r3
   16996:	4803      	ldr	r0, [pc, #12]	; (169a4 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0xe0>)
   16998:	f7ff fcaa 	bl	162f0 <__cyg_profile_func_exit>
   1699c:	462b      	mov	r3, r5
}
   1699e:	4618      	mov	r0, r3
   169a0:	b017      	add	sp, #92	; 0x5c
   169a2:	bd30      	pop	{r4, r5, pc}
   169a4:	000168c5 	.word	0x000168c5

000169a8 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)>:


// internal itoa for 'long long' type
#if defined(PRINTF_SUPPORT_LONG_LONG)
static size_t _ntoa_long_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long long value, bool negative, unsigned long long base, unsigned int prec, unsigned int width, unsigned int flags)
{
   169a8:	b530      	push	{r4, r5, lr}
   169aa:	b097      	sub	sp, #92	; 0x5c
   169ac:	4675      	mov	r5, lr
   169ae:	900b      	str	r0, [sp, #44]	; 0x2c
   169b0:	910a      	str	r1, [sp, #40]	; 0x28
   169b2:	9209      	str	r2, [sp, #36]	; 0x24
   169b4:	9308      	str	r3, [sp, #32]
   169b6:	462b      	mov	r3, r5
   169b8:	4619      	mov	r1, r3
   169ba:	4837      	ldr	r0, [pc, #220]	; (16a98 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0xf0>)
   169bc:	f7ff fc84 	bl	162c8 <__cyg_profile_func_enter>
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
   169c0:	2300      	movs	r3, #0
   169c2:	9315      	str	r3, [sp, #84]	; 0x54

  // no hash for 0 values
  if (!value) {
   169c4:	e9dd 341a 	ldrd	r3, r4, [sp, #104]	; 0x68
   169c8:	4323      	orrs	r3, r4
   169ca:	d103      	bne.n	169d4 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0x2c>
    flags &= ~FLAGS_HASH;
   169cc:	9b22      	ldr	r3, [sp, #136]	; 0x88
   169ce:	f023 0310 	bic.w	r3, r3, #16
   169d2:	9322      	str	r3, [sp, #136]	; 0x88
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
   169d4:	9b22      	ldr	r3, [sp, #136]	; 0x88
   169d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
   169da:	2b00      	cmp	r3, #0
   169dc:	d003      	beq.n	169e6 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0x3e>
   169de:	e9dd 341a 	ldrd	r3, r4, [sp, #104]	; 0x68
   169e2:	4323      	orrs	r3, r4
   169e4:	d039      	beq.n	16a5a <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0xb2>
    do {
      const char digit = (char)(value % base);
   169e6:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
   169ea:	e9dd 231e 	ldrd	r2, r3, [sp, #120]	; 0x78
   169ee:	f002 f96d 	bl	18ccc <__aeabi_uldivmod>
   169f2:	461c      	mov	r4, r3
   169f4:	4613      	mov	r3, r2
   169f6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
   169fa:	f89d 3053 	ldrb.w	r3, [sp, #83]	; 0x53
   169fe:	2b09      	cmp	r3, #9
   16a00:	d804      	bhi.n	16a0c <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0x64>
   16a02:	f89d 3053 	ldrb.w	r3, [sp, #83]	; 0x53
   16a06:	3330      	adds	r3, #48	; 0x30
   16a08:	b2da      	uxtb	r2, r3
   16a0a:	e00d      	b.n	16a28 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0x80>
   16a0c:	9b22      	ldr	r3, [sp, #136]	; 0x88
   16a0e:	f003 0320 	and.w	r3, r3, #32
   16a12:	2b00      	cmp	r3, #0
   16a14:	d001      	beq.n	16a1a <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0x72>
   16a16:	2241      	movs	r2, #65	; 0x41
   16a18:	e000      	b.n	16a1c <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0x74>
   16a1a:	2261      	movs	r2, #97	; 0x61
   16a1c:	f89d 3053 	ldrb.w	r3, [sp, #83]	; 0x53
   16a20:	4413      	add	r3, r2
   16a22:	b2db      	uxtb	r3, r3
   16a24:	3b0a      	subs	r3, #10
   16a26:	b2da      	uxtb	r2, r3
   16a28:	9b15      	ldr	r3, [sp, #84]	; 0x54
   16a2a:	1c59      	adds	r1, r3, #1
   16a2c:	9115      	str	r1, [sp, #84]	; 0x54
   16a2e:	a916      	add	r1, sp, #88	; 0x58
   16a30:	440b      	add	r3, r1
   16a32:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
   16a36:	e9dd 231e 	ldrd	r2, r3, [sp, #120]	; 0x78
   16a3a:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
   16a3e:	f002 f945 	bl	18ccc <__aeabi_uldivmod>
   16a42:	4603      	mov	r3, r0
   16a44:	460c      	mov	r4, r1
   16a46:	e9cd 341a 	strd	r3, r4, [sp, #104]	; 0x68
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
   16a4a:	e9dd 341a 	ldrd	r3, r4, [sp, #104]	; 0x68
   16a4e:	4323      	orrs	r3, r4
   16a50:	d003      	beq.n	16a5a <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0xb2>
   16a52:	9b15      	ldr	r3, [sp, #84]	; 0x54
   16a54:	2b1f      	cmp	r3, #31
   16a56:	d800      	bhi.n	16a5a <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0xb2>
    do {
   16a58:	e7c5      	b.n	169e6 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0x3e>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
   16a5a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   16a5c:	9a22      	ldr	r2, [sp, #136]	; 0x88
   16a5e:	9206      	str	r2, [sp, #24]
   16a60:	9a21      	ldr	r2, [sp, #132]	; 0x84
   16a62:	9205      	str	r2, [sp, #20]
   16a64:	9a20      	ldr	r2, [sp, #128]	; 0x80
   16a66:	9204      	str	r2, [sp, #16]
   16a68:	9303      	str	r3, [sp, #12]
   16a6a:	f89d 3070 	ldrb.w	r3, [sp, #112]	; 0x70
   16a6e:	9302      	str	r3, [sp, #8]
   16a70:	9b15      	ldr	r3, [sp, #84]	; 0x54
   16a72:	9301      	str	r3, [sp, #4]
   16a74:	ab0c      	add	r3, sp, #48	; 0x30
   16a76:	9300      	str	r3, [sp, #0]
   16a78:	9b08      	ldr	r3, [sp, #32]
   16a7a:	9a09      	ldr	r2, [sp, #36]	; 0x24
   16a7c:	990a      	ldr	r1, [sp, #40]	; 0x28
   16a7e:	980b      	ldr	r0, [sp, #44]	; 0x2c
   16a80:	f7ff fdf2 	bl	16668 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)>
   16a84:	4604      	mov	r4, r0
   16a86:	462b      	mov	r3, r5
   16a88:	4619      	mov	r1, r3
   16a8a:	4803      	ldr	r0, [pc, #12]	; (16a98 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0xf0>)
   16a8c:	f7ff fc30 	bl	162f0 <__cyg_profile_func_exit>
   16a90:	4623      	mov	r3, r4
}
   16a92:	4618      	mov	r0, r3
   16a94:	b017      	add	sp, #92	; 0x5c
   16a96:	bd30      	pop	{r4, r5, pc}
   16a98:	000169a9 	.word	0x000169a9

00016a9c <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)>:
#endif  // PRINTF_SUPPORT_LONG_LONG


#if defined(PRINTF_SUPPORT_FLOAT)
static size_t _ftoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value_param, unsigned int prec, unsigned int width, unsigned int flags)
{
   16a9c:	b530      	push	{r4, r5, lr}
   16a9e:	b09b      	sub	sp, #108	; 0x6c
   16aa0:	4675      	mov	r5, lr
   16aa2:	9005      	str	r0, [sp, #20]
   16aa4:	9104      	str	r1, [sp, #16]
   16aa6:	9203      	str	r2, [sp, #12]
   16aa8:	9302      	str	r3, [sp, #8]
   16aaa:	ed8d 0b00 	vstr	d0, [sp]
   16aae:	462b      	mov	r3, r5
   16ab0:	4619      	mov	r1, r3
   16ab2:	48b7      	ldr	r0, [pc, #732]	; (16d90 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x2f4>)
   16ab4:	f7ff fc08 	bl	162c8 <__cyg_profile_func_enter>
  const size_t start_idx = idx;
   16ab8:	9b03      	ldr	r3, [sp, #12]
   16aba:	9311      	str	r3, [sp, #68]	; 0x44

  float value = static_cast<float>(value_param);
   16abc:	e9dd 0100 	ldrd	r0, r1, [sp]
   16ac0:	f002 f8b4 	bl	18c2c <__aeabi_d2f>
   16ac4:	4603      	mov	r3, r0
   16ac6:	9319      	str	r3, [sp, #100]	; 0x64

  char buf[PRINTF_FTOA_BUFFER_SIZE];
  size_t len  = 0U;
   16ac8:	2300      	movs	r3, #0
   16aca:	9318      	str	r3, [sp, #96]	; 0x60
  float diff = 0.0;
   16acc:	f04f 0300 	mov.w	r3, #0
   16ad0:	9310      	str	r3, [sp, #64]	; 0x40

  // if input is larger than thres_max, revert to exponential
  const float thres_max = (float)0x7FFFFFFF;
   16ad2:	f04f 439e 	mov.w	r3, #1325400064	; 0x4f000000
   16ad6:	930f      	str	r3, [sp, #60]	; 0x3c

  // powers of 10
  static const float pow10[] = { 1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000 };

  // test for negative
  bool negative = false;
   16ad8:	2300      	movs	r3, #0
   16ada:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
  if (value < 0) {
   16ade:	eddd 7a19 	vldr	s15, [sp, #100]	; 0x64
   16ae2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   16ae6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   16aea:	d50a      	bpl.n	16b02 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x66>
    negative = true;
   16aec:	2301      	movs	r3, #1
   16aee:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
    value = 0 - value;
   16af2:	ed9f 7aa8 	vldr	s14, [pc, #672]	; 16d94 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x2f8>
   16af6:	eddd 7a19 	vldr	s15, [sp, #100]	; 0x64
   16afa:	ee77 7a67 	vsub.f32	s15, s14, s15
   16afe:	edcd 7a19 	vstr	s15, [sp, #100]	; 0x64
  }

  // set default precision to 6, if not set explicitly
  if (!(flags & FLAGS_PRECISION)) {
   16b02:	9b20      	ldr	r3, [sp, #128]	; 0x80
   16b04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
   16b08:	2b00      	cmp	r3, #0
   16b0a:	d101      	bne.n	16b10 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x74>
    prec = 6U;
   16b0c:	2306      	movs	r3, #6
   16b0e:	931e      	str	r3, [sp, #120]	; 0x78
  }
  // limit precision to 9, cause a prec >= 10 can lead to overflow errors
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
   16b10:	9b18      	ldr	r3, [sp, #96]	; 0x60
   16b12:	2b1f      	cmp	r3, #31
   16b14:	d80e      	bhi.n	16b34 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x98>
   16b16:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   16b18:	2b09      	cmp	r3, #9
   16b1a:	d90b      	bls.n	16b34 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x98>
    buf[len++] = '0';
   16b1c:	9b18      	ldr	r3, [sp, #96]	; 0x60
   16b1e:	1c5a      	adds	r2, r3, #1
   16b20:	9218      	str	r2, [sp, #96]	; 0x60
   16b22:	aa1a      	add	r2, sp, #104	; 0x68
   16b24:	4413      	add	r3, r2
   16b26:	2230      	movs	r2, #48	; 0x30
   16b28:	f803 2c50 	strb.w	r2, [r3, #-80]
    prec--;
   16b2c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   16b2e:	3b01      	subs	r3, #1
   16b30:	931e      	str	r3, [sp, #120]	; 0x78
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
   16b32:	e7ed      	b.n	16b10 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x74>
  }

  int whole = (int)value;
   16b34:	eddd 7a19 	vldr	s15, [sp, #100]	; 0x64
   16b38:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   16b3c:	ee17 3a90 	vmov	r3, s15
   16b40:	9316      	str	r3, [sp, #88]	; 0x58
  float tmp = (value - whole) * pow10[prec];
   16b42:	9b16      	ldr	r3, [sp, #88]	; 0x58
   16b44:	ee07 3a90 	vmov	s15, r3
   16b48:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   16b4c:	ed9d 7a19 	vldr	s14, [sp, #100]	; 0x64
   16b50:	ee37 7a67 	vsub.f32	s14, s14, s15
   16b54:	4a90      	ldr	r2, [pc, #576]	; (16d98 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x2fc>)
   16b56:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   16b58:	009b      	lsls	r3, r3, #2
   16b5a:	4413      	add	r3, r2
   16b5c:	edd3 7a00 	vldr	s15, [r3]
   16b60:	ee67 7a27 	vmul.f32	s15, s14, s15
   16b64:	edcd 7a0e 	vstr	s15, [sp, #56]	; 0x38
  unsigned long frac = (unsigned long)tmp;
   16b68:	eddd 7a0e 	vldr	s15, [sp, #56]	; 0x38
   16b6c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
   16b70:	ee17 3a90 	vmov	r3, s15
   16b74:	9315      	str	r3, [sp, #84]	; 0x54
  diff = tmp - frac;
   16b76:	9b15      	ldr	r3, [sp, #84]	; 0x54
   16b78:	ee07 3a90 	vmov	s15, r3
   16b7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
   16b80:	ed9d 7a0e 	vldr	s14, [sp, #56]	; 0x38
   16b84:	ee77 7a67 	vsub.f32	s15, s14, s15
   16b88:	edcd 7a10 	vstr	s15, [sp, #64]	; 0x40

  if (diff > 0.5) {
   16b8c:	eddd 7a10 	vldr	s15, [sp, #64]	; 0x40
   16b90:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
   16b94:	eef4 7ac7 	vcmpe.f32	s15, s14
   16b98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   16b9c:	dd18      	ble.n	16bd0 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x134>
    ++frac;
   16b9e:	9b15      	ldr	r3, [sp, #84]	; 0x54
   16ba0:	3301      	adds	r3, #1
   16ba2:	9315      	str	r3, [sp, #84]	; 0x54
    // handle rollover, e.g. case 0.99 with prec 1 is 1.0
    if (frac >= pow10[prec]) {
   16ba4:	9b15      	ldr	r3, [sp, #84]	; 0x54
   16ba6:	ee07 3a90 	vmov	s15, r3
   16baa:	eeb8 7a67 	vcvt.f32.u32	s14, s15
   16bae:	4a7a      	ldr	r2, [pc, #488]	; (16d98 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x2fc>)
   16bb0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   16bb2:	009b      	lsls	r3, r3, #2
   16bb4:	4413      	add	r3, r2
   16bb6:	edd3 7a00 	vldr	s15, [r3]
   16bba:	eeb4 7ae7 	vcmpe.f32	s14, s15
   16bbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   16bc2:	db19      	blt.n	16bf8 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x15c>
      frac = 0;
   16bc4:	2300      	movs	r3, #0
   16bc6:	9315      	str	r3, [sp, #84]	; 0x54
      ++whole;
   16bc8:	9b16      	ldr	r3, [sp, #88]	; 0x58
   16bca:	3301      	adds	r3, #1
   16bcc:	9316      	str	r3, [sp, #88]	; 0x58
   16bce:	e013      	b.n	16bf8 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x15c>
    }
  }
  else if ((diff == 0.5) && ((frac == 0U) || (frac & 1U))) {
   16bd0:	eddd 7a10 	vldr	s15, [sp, #64]	; 0x40
   16bd4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
   16bd8:	eef4 7a47 	vcmp.f32	s15, s14
   16bdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   16be0:	d10a      	bne.n	16bf8 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x15c>
   16be2:	9b15      	ldr	r3, [sp, #84]	; 0x54
   16be4:	2b00      	cmp	r3, #0
   16be6:	d004      	beq.n	16bf2 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x156>
   16be8:	9b15      	ldr	r3, [sp, #84]	; 0x54
   16bea:	f003 0301 	and.w	r3, r3, #1
   16bee:	2b00      	cmp	r3, #0
   16bf0:	d002      	beq.n	16bf8 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x15c>
    // if halfway, round up if odd, OR if last digit is 0
    ++frac;
   16bf2:	9b15      	ldr	r3, [sp, #84]	; 0x54
   16bf4:	3301      	adds	r3, #1
   16bf6:	9315      	str	r3, [sp, #84]	; 0x54
  }

  // TBD: for very large numbers switch back to native sprintf for exponentials. Anyone want to write code to replace this?
  // Normal printf behavior is to print EVERY whole number digit which can be 100s of characters overflowing your buffers == bad
  if (value > thres_max) {
   16bf8:	eddd 7a19 	vldr	s15, [sp, #100]	; 0x64
   16bfc:	ed9f 7a67 	vldr	s14, [pc, #412]	; 16d9c <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x300>
   16c00:	eef4 7ac7 	vcmpe.f32	s15, s14
   16c04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   16c08:	dd01      	ble.n	16c0e <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x172>
    return 0U;
   16c0a:	2400      	movs	r4, #0
   16c0c:	e156      	b.n	16ebc <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x420>
  }

  if (prec == 0U) {
   16c0e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   16c10:	2b00      	cmp	r3, #0
   16c12:	d129      	bne.n	16c68 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x1cc>
    diff = value - (float)whole;
   16c14:	9b16      	ldr	r3, [sp, #88]	; 0x58
   16c16:	ee07 3a90 	vmov	s15, r3
   16c1a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   16c1e:	ed9d 7a19 	vldr	s14, [sp, #100]	; 0x64
   16c22:	ee77 7a67 	vsub.f32	s15, s14, s15
   16c26:	edcd 7a10 	vstr	s15, [sp, #64]	; 0x40
    if (diff > 0.5) {
   16c2a:	eddd 7a10 	vldr	s15, [sp, #64]	; 0x40
   16c2e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
   16c32:	eef4 7ac7 	vcmpe.f32	s15, s14
   16c36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   16c3a:	dd03      	ble.n	16c44 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x1a8>
      // greater than 0.5, round up, e.g. 1.6 -> 2
      ++whole;
   16c3c:	9b16      	ldr	r3, [sp, #88]	; 0x58
   16c3e:	3301      	adds	r3, #1
   16c40:	9316      	str	r3, [sp, #88]	; 0x58
   16c42:	e05f      	b.n	16d04 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x268>
    }
    else if ((diff == 0.5) && (whole & 1)) {
   16c44:	eddd 7a10 	vldr	s15, [sp, #64]	; 0x40
   16c48:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
   16c4c:	eef4 7a47 	vcmp.f32	s15, s14
   16c50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   16c54:	d156      	bne.n	16d04 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x268>
   16c56:	9b16      	ldr	r3, [sp, #88]	; 0x58
   16c58:	f003 0301 	and.w	r3, r3, #1
   16c5c:	2b00      	cmp	r3, #0
   16c5e:	d051      	beq.n	16d04 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x268>
      // exactly 0.5 and ODD, then round up
      // 1.5 -> 2, but 2.5 -> 2
      ++whole;
   16c60:	9b16      	ldr	r3, [sp, #88]	; 0x58
   16c62:	3301      	adds	r3, #1
   16c64:	9316      	str	r3, [sp, #88]	; 0x58
   16c66:	e04d      	b.n	16d04 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x268>
    }
  }
  else {
    unsigned int count = prec;
   16c68:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   16c6a:	9314      	str	r3, [sp, #80]	; 0x50
    // now do fractional part, as an unsigned number
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
   16c6c:	9b18      	ldr	r3, [sp, #96]	; 0x60
   16c6e:	2b1f      	cmp	r3, #31
   16c70:	d827      	bhi.n	16cc2 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x226>
      --count;
   16c72:	9b14      	ldr	r3, [sp, #80]	; 0x50
   16c74:	3b01      	subs	r3, #1
   16c76:	9314      	str	r3, [sp, #80]	; 0x50
      buf[len++] = (char)(48U + (frac % 10U));
   16c78:	9915      	ldr	r1, [sp, #84]	; 0x54
   16c7a:	4b49      	ldr	r3, [pc, #292]	; (16da0 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x304>)
   16c7c:	fba3 2301 	umull	r2, r3, r3, r1
   16c80:	08da      	lsrs	r2, r3, #3
   16c82:	4613      	mov	r3, r2
   16c84:	009b      	lsls	r3, r3, #2
   16c86:	4413      	add	r3, r2
   16c88:	005b      	lsls	r3, r3, #1
   16c8a:	1aca      	subs	r2, r1, r3
   16c8c:	b2d3      	uxtb	r3, r2
   16c8e:	3330      	adds	r3, #48	; 0x30
   16c90:	b2d9      	uxtb	r1, r3
   16c92:	9b18      	ldr	r3, [sp, #96]	; 0x60
   16c94:	1c5a      	adds	r2, r3, #1
   16c96:	9218      	str	r2, [sp, #96]	; 0x60
   16c98:	aa1a      	add	r2, sp, #104	; 0x68
   16c9a:	4413      	add	r3, r2
   16c9c:	460a      	mov	r2, r1
   16c9e:	f803 2c50 	strb.w	r2, [r3, #-80]
      if (!(frac /= 10U)) {
   16ca2:	9b15      	ldr	r3, [sp, #84]	; 0x54
   16ca4:	4a3e      	ldr	r2, [pc, #248]	; (16da0 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x304>)
   16ca6:	fba2 2303 	umull	r2, r3, r2, r3
   16caa:	08db      	lsrs	r3, r3, #3
   16cac:	9315      	str	r3, [sp, #84]	; 0x54
   16cae:	9b15      	ldr	r3, [sp, #84]	; 0x54
   16cb0:	2b00      	cmp	r3, #0
   16cb2:	bf0c      	ite	eq
   16cb4:	2301      	moveq	r3, #1
   16cb6:	2300      	movne	r3, #0
   16cb8:	b2db      	uxtb	r3, r3
   16cba:	2b00      	cmp	r3, #0
   16cbc:	d100      	bne.n	16cc0 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x224>
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
   16cbe:	e7d5      	b.n	16c6c <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x1d0>
        break;
   16cc0:	bf00      	nop
      }
    }
    // add extra 0s
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
   16cc2:	9b18      	ldr	r3, [sp, #96]	; 0x60
   16cc4:	2b1f      	cmp	r3, #31
   16cc6:	d806      	bhi.n	16cd6 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x23a>
   16cc8:	9b14      	ldr	r3, [sp, #80]	; 0x50
   16cca:	1e5a      	subs	r2, r3, #1
   16ccc:	9214      	str	r2, [sp, #80]	; 0x50
   16cce:	2b00      	cmp	r3, #0
   16cd0:	d001      	beq.n	16cd6 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x23a>
   16cd2:	2301      	movs	r3, #1
   16cd4:	e000      	b.n	16cd8 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x23c>
   16cd6:	2300      	movs	r3, #0
   16cd8:	2b00      	cmp	r3, #0
   16cda:	d008      	beq.n	16cee <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x252>
      buf[len++] = '0';
   16cdc:	9b18      	ldr	r3, [sp, #96]	; 0x60
   16cde:	1c5a      	adds	r2, r3, #1
   16ce0:	9218      	str	r2, [sp, #96]	; 0x60
   16ce2:	aa1a      	add	r2, sp, #104	; 0x68
   16ce4:	4413      	add	r3, r2
   16ce6:	2230      	movs	r2, #48	; 0x30
   16ce8:	f803 2c50 	strb.w	r2, [r3, #-80]
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
   16cec:	e7e9      	b.n	16cc2 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x226>
    }
    if (len < PRINTF_FTOA_BUFFER_SIZE) {
   16cee:	9b18      	ldr	r3, [sp, #96]	; 0x60
   16cf0:	2b1f      	cmp	r3, #31
   16cf2:	d807      	bhi.n	16d04 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x268>
      // add decimal
      buf[len++] = '.';
   16cf4:	9b18      	ldr	r3, [sp, #96]	; 0x60
   16cf6:	1c5a      	adds	r2, r3, #1
   16cf8:	9218      	str	r2, [sp, #96]	; 0x60
   16cfa:	aa1a      	add	r2, sp, #104	; 0x68
   16cfc:	4413      	add	r3, r2
   16cfe:	222e      	movs	r2, #46	; 0x2e
   16d00:	f803 2c50 	strb.w	r2, [r3, #-80]
    }
  }

  // do whole part, number is reversed
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
   16d04:	9b18      	ldr	r3, [sp, #96]	; 0x60
   16d06:	2b1f      	cmp	r3, #31
   16d08:	d828      	bhi.n	16d5c <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x2c0>
    buf[len++] = (char)(48 + (whole % 10));
   16d0a:	9a16      	ldr	r2, [sp, #88]	; 0x58
   16d0c:	4b25      	ldr	r3, [pc, #148]	; (16da4 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x308>)
   16d0e:	fb83 1302 	smull	r1, r3, r3, r2
   16d12:	1099      	asrs	r1, r3, #2
   16d14:	17d3      	asrs	r3, r2, #31
   16d16:	1ac9      	subs	r1, r1, r3
   16d18:	460b      	mov	r3, r1
   16d1a:	009b      	lsls	r3, r3, #2
   16d1c:	440b      	add	r3, r1
   16d1e:	005b      	lsls	r3, r3, #1
   16d20:	1ad1      	subs	r1, r2, r3
   16d22:	b2cb      	uxtb	r3, r1
   16d24:	3330      	adds	r3, #48	; 0x30
   16d26:	b2d9      	uxtb	r1, r3
   16d28:	9b18      	ldr	r3, [sp, #96]	; 0x60
   16d2a:	1c5a      	adds	r2, r3, #1
   16d2c:	9218      	str	r2, [sp, #96]	; 0x60
   16d2e:	aa1a      	add	r2, sp, #104	; 0x68
   16d30:	4413      	add	r3, r2
   16d32:	460a      	mov	r2, r1
   16d34:	f803 2c50 	strb.w	r2, [r3, #-80]
    if (!(whole /= 10)) {
   16d38:	9b16      	ldr	r3, [sp, #88]	; 0x58
   16d3a:	4a1a      	ldr	r2, [pc, #104]	; (16da4 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x308>)
   16d3c:	fb82 1203 	smull	r1, r2, r2, r3
   16d40:	1092      	asrs	r2, r2, #2
   16d42:	17db      	asrs	r3, r3, #31
   16d44:	1ad3      	subs	r3, r2, r3
   16d46:	9316      	str	r3, [sp, #88]	; 0x58
   16d48:	9b16      	ldr	r3, [sp, #88]	; 0x58
   16d4a:	2b00      	cmp	r3, #0
   16d4c:	bf0c      	ite	eq
   16d4e:	2301      	moveq	r3, #1
   16d50:	2300      	movne	r3, #0
   16d52:	b2db      	uxtb	r3, r3
   16d54:	2b00      	cmp	r3, #0
   16d56:	d100      	bne.n	16d5a <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x2be>
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
   16d58:	e7d4      	b.n	16d04 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x268>
      break;
   16d5a:	bf00      	nop
    }
  }

  // pad leading zeros
  while (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
   16d5c:	9b20      	ldr	r3, [sp, #128]	; 0x80
   16d5e:	f003 0302 	and.w	r3, r3, #2
   16d62:	2b00      	cmp	r3, #0
   16d64:	d120      	bne.n	16da8 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x30c>
   16d66:	9b20      	ldr	r3, [sp, #128]	; 0x80
   16d68:	f003 0301 	and.w	r3, r3, #1
   16d6c:	2b00      	cmp	r3, #0
   16d6e:	d01b      	beq.n	16da8 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x30c>
   16d70:	9a18      	ldr	r2, [sp, #96]	; 0x60
   16d72:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   16d74:	429a      	cmp	r2, r3
   16d76:	d217      	bcs.n	16da8 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x30c>
   16d78:	9b18      	ldr	r3, [sp, #96]	; 0x60
   16d7a:	2b1f      	cmp	r3, #31
   16d7c:	d814      	bhi.n	16da8 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x30c>
    buf[len++] = '0';
   16d7e:	9b18      	ldr	r3, [sp, #96]	; 0x60
   16d80:	1c5a      	adds	r2, r3, #1
   16d82:	9218      	str	r2, [sp, #96]	; 0x60
   16d84:	aa1a      	add	r2, sp, #104	; 0x68
   16d86:	4413      	add	r3, r2
   16d88:	2230      	movs	r2, #48	; 0x30
   16d8a:	f803 2c50 	strb.w	r2, [r3, #-80]
  while (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
   16d8e:	e7e5      	b.n	16d5c <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x2c0>
   16d90:	00016a9d 	.word	0x00016a9d
   16d94:	00000000 	.word	0x00000000
   16d98:	0001a760 	.word	0x0001a760
   16d9c:	4f000000 	.word	0x4f000000
   16da0:	cccccccd 	.word	0xcccccccd
   16da4:	66666667 	.word	0x66666667
  }

  // handle sign
  if ((len == width) && (negative || (flags & FLAGS_PLUS) || (flags & FLAGS_SPACE))) {
   16da8:	9a18      	ldr	r2, [sp, #96]	; 0x60
   16daa:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   16dac:	429a      	cmp	r2, r3
   16dae:	d110      	bne.n	16dd2 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x336>
   16db0:	f89d 305f 	ldrb.w	r3, [sp, #95]	; 0x5f
   16db4:	2b00      	cmp	r3, #0
   16db6:	d109      	bne.n	16dcc <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x330>
   16db8:	9b20      	ldr	r3, [sp, #128]	; 0x80
   16dba:	f003 0304 	and.w	r3, r3, #4
   16dbe:	2b00      	cmp	r3, #0
   16dc0:	d104      	bne.n	16dcc <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x330>
   16dc2:	9b20      	ldr	r3, [sp, #128]	; 0x80
   16dc4:	f003 0308 	and.w	r3, r3, #8
   16dc8:	2b00      	cmp	r3, #0
   16dca:	d002      	beq.n	16dd2 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x336>
    len--;
   16dcc:	9b18      	ldr	r3, [sp, #96]	; 0x60
   16dce:	3b01      	subs	r3, #1
   16dd0:	9318      	str	r3, [sp, #96]	; 0x60
  }
  if (len < PRINTF_FTOA_BUFFER_SIZE) {
   16dd2:	9b18      	ldr	r3, [sp, #96]	; 0x60
   16dd4:	2b1f      	cmp	r3, #31
   16dd6:	d827      	bhi.n	16e28 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x38c>
    if (negative) {
   16dd8:	f89d 305f 	ldrb.w	r3, [sp, #95]	; 0x5f
   16ddc:	2b00      	cmp	r3, #0
   16dde:	d008      	beq.n	16df2 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x356>
      buf[len++] = '-';
   16de0:	9b18      	ldr	r3, [sp, #96]	; 0x60
   16de2:	1c5a      	adds	r2, r3, #1
   16de4:	9218      	str	r2, [sp, #96]	; 0x60
   16de6:	aa1a      	add	r2, sp, #104	; 0x68
   16de8:	4413      	add	r3, r2
   16dea:	222d      	movs	r2, #45	; 0x2d
   16dec:	f803 2c50 	strb.w	r2, [r3, #-80]
   16df0:	e01a      	b.n	16e28 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x38c>
    }
    else if (flags & FLAGS_PLUS) {
   16df2:	9b20      	ldr	r3, [sp, #128]	; 0x80
   16df4:	f003 0304 	and.w	r3, r3, #4
   16df8:	2b00      	cmp	r3, #0
   16dfa:	d008      	beq.n	16e0e <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x372>
      buf[len++] = '+';  // ignore the space if the '+' exists
   16dfc:	9b18      	ldr	r3, [sp, #96]	; 0x60
   16dfe:	1c5a      	adds	r2, r3, #1
   16e00:	9218      	str	r2, [sp, #96]	; 0x60
   16e02:	aa1a      	add	r2, sp, #104	; 0x68
   16e04:	4413      	add	r3, r2
   16e06:	222b      	movs	r2, #43	; 0x2b
   16e08:	f803 2c50 	strb.w	r2, [r3, #-80]
   16e0c:	e00c      	b.n	16e28 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x38c>
    }
    else if (flags & FLAGS_SPACE) {
   16e0e:	9b20      	ldr	r3, [sp, #128]	; 0x80
   16e10:	f003 0308 	and.w	r3, r3, #8
   16e14:	2b00      	cmp	r3, #0
   16e16:	d007      	beq.n	16e28 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x38c>
      buf[len++] = ' ';
   16e18:	9b18      	ldr	r3, [sp, #96]	; 0x60
   16e1a:	1c5a      	adds	r2, r3, #1
   16e1c:	9218      	str	r2, [sp, #96]	; 0x60
   16e1e:	aa1a      	add	r2, sp, #104	; 0x68
   16e20:	4413      	add	r3, r2
   16e22:	2220      	movs	r2, #32
   16e24:	f803 2c50 	strb.w	r2, [r3, #-80]
    }
  }

  // pad spaces up to given width
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
   16e28:	9b20      	ldr	r3, [sp, #128]	; 0x80
   16e2a:	f003 0302 	and.w	r3, r3, #2
   16e2e:	2b00      	cmp	r3, #0
   16e30:	d116      	bne.n	16e60 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x3c4>
   16e32:	9b20      	ldr	r3, [sp, #128]	; 0x80
   16e34:	f003 0301 	and.w	r3, r3, #1
   16e38:	2b00      	cmp	r3, #0
   16e3a:	d111      	bne.n	16e60 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x3c4>
    for (size_t i = len; i < width; i++) {
   16e3c:	9b18      	ldr	r3, [sp, #96]	; 0x60
   16e3e:	9313      	str	r3, [sp, #76]	; 0x4c
   16e40:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   16e42:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   16e44:	429a      	cmp	r2, r3
   16e46:	d20b      	bcs.n	16e60 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x3c4>
      out(' ', buffer, idx++, maxlen);
   16e48:	9a03      	ldr	r2, [sp, #12]
   16e4a:	1c53      	adds	r3, r2, #1
   16e4c:	9303      	str	r3, [sp, #12]
   16e4e:	9c05      	ldr	r4, [sp, #20]
   16e50:	9b02      	ldr	r3, [sp, #8]
   16e52:	9904      	ldr	r1, [sp, #16]
   16e54:	2020      	movs	r0, #32
   16e56:	47a0      	blx	r4
    for (size_t i = len; i < width; i++) {
   16e58:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   16e5a:	3301      	adds	r3, #1
   16e5c:	9313      	str	r3, [sp, #76]	; 0x4c
   16e5e:	e7ef      	b.n	16e40 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x3a4>
    }
  }

  // reverse string
  for (size_t i = 0U; i < len; i++) {
   16e60:	2300      	movs	r3, #0
   16e62:	9312      	str	r3, [sp, #72]	; 0x48
   16e64:	9a12      	ldr	r2, [sp, #72]	; 0x48
   16e66:	9b18      	ldr	r3, [sp, #96]	; 0x60
   16e68:	429a      	cmp	r2, r3
   16e6a:	d212      	bcs.n	16e92 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x3f6>
    out(buf[len - i - 1U], buffer, idx++, maxlen);
   16e6c:	9a18      	ldr	r2, [sp, #96]	; 0x60
   16e6e:	9b12      	ldr	r3, [sp, #72]	; 0x48
   16e70:	1ad3      	subs	r3, r2, r3
   16e72:	3b01      	subs	r3, #1
   16e74:	aa1a      	add	r2, sp, #104	; 0x68
   16e76:	4413      	add	r3, r2
   16e78:	f813 0c50 	ldrb.w	r0, [r3, #-80]
   16e7c:	9a03      	ldr	r2, [sp, #12]
   16e7e:	1c53      	adds	r3, r2, #1
   16e80:	9303      	str	r3, [sp, #12]
   16e82:	9c05      	ldr	r4, [sp, #20]
   16e84:	9b02      	ldr	r3, [sp, #8]
   16e86:	9904      	ldr	r1, [sp, #16]
   16e88:	47a0      	blx	r4
  for (size_t i = 0U; i < len; i++) {
   16e8a:	9b12      	ldr	r3, [sp, #72]	; 0x48
   16e8c:	3301      	adds	r3, #1
   16e8e:	9312      	str	r3, [sp, #72]	; 0x48
   16e90:	e7e8      	b.n	16e64 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x3c8>
  }

  // append pad spaces up to given width
  if (flags & FLAGS_LEFT) {
   16e92:	9b20      	ldr	r3, [sp, #128]	; 0x80
   16e94:	f003 0302 	and.w	r3, r3, #2
   16e98:	2b00      	cmp	r3, #0
   16e9a:	d00e      	beq.n	16eba <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x41e>
    while (idx - start_idx < width) {
   16e9c:	9a03      	ldr	r2, [sp, #12]
   16e9e:	9b11      	ldr	r3, [sp, #68]	; 0x44
   16ea0:	1ad3      	subs	r3, r2, r3
   16ea2:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   16ea4:	429a      	cmp	r2, r3
   16ea6:	d908      	bls.n	16eba <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x41e>
      out(' ', buffer, idx++, maxlen);
   16ea8:	9a03      	ldr	r2, [sp, #12]
   16eaa:	1c53      	adds	r3, r2, #1
   16eac:	9303      	str	r3, [sp, #12]
   16eae:	9c05      	ldr	r4, [sp, #20]
   16eb0:	9b02      	ldr	r3, [sp, #8]
   16eb2:	9904      	ldr	r1, [sp, #16]
   16eb4:	2020      	movs	r0, #32
   16eb6:	47a0      	blx	r4
    while (idx - start_idx < width) {
   16eb8:	e7f0      	b.n	16e9c <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x400>
    }
  }

  return idx;
   16eba:	9c03      	ldr	r4, [sp, #12]
   16ebc:	462b      	mov	r3, r5
   16ebe:	4619      	mov	r1, r3
   16ec0:	4803      	ldr	r0, [pc, #12]	; (16ed0 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x434>)
   16ec2:	f7ff fa15 	bl	162f0 <__cyg_profile_func_exit>
   16ec6:	4623      	mov	r3, r4
}
   16ec8:	4618      	mov	r0, r3
   16eca:	b01b      	add	sp, #108	; 0x6c
   16ecc:	bd30      	pop	{r4, r5, pc}
   16ece:	bf00      	nop
   16ed0:	00016a9d 	.word	0x00016a9d

00016ed4 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)>:
#endif  // PRINTF_SUPPORT_FLOAT


// internal vsnprintf
static int _vsnprintf(out_fct_type out, char* buffer, const size_t maxlen, const char* format, va_list va)
{
   16ed4:	b570      	push	{r4, r5, r6, lr}
   16ed6:	b0a0      	sub	sp, #128	; 0x80
   16ed8:	4676      	mov	r6, lr
   16eda:	900d      	str	r0, [sp, #52]	; 0x34
   16edc:	910c      	str	r1, [sp, #48]	; 0x30
   16ede:	920b      	str	r2, [sp, #44]	; 0x2c
   16ee0:	930a      	str	r3, [sp, #40]	; 0x28
   16ee2:	4633      	mov	r3, r6
   16ee4:	4619      	mov	r1, r3
   16ee6:	48a7      	ldr	r0, [pc, #668]	; (17184 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2b0>)
   16ee8:	f7ff f9ee 	bl	162c8 <__cyg_profile_func_enter>
  unsigned int flags, width, precision, n;
  size_t idx = 0U;
   16eec:	2300      	movs	r3, #0
   16eee:	931b      	str	r3, [sp, #108]	; 0x6c

  if (!buffer) {
   16ef0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   16ef2:	2b00      	cmp	r3, #0
   16ef4:	d101      	bne.n	16efa <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x26>
    // use null output function
    out = _out_null;
   16ef6:	4ba4      	ldr	r3, [pc, #656]	; (17188 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2b4>)
   16ef8:	930d      	str	r3, [sp, #52]	; 0x34
  }

  while (*format)
   16efa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   16efc:	781b      	ldrb	r3, [r3, #0]
   16efe:	2b00      	cmp	r3, #0
   16f00:	f000 8448 	beq.w	17794 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8c0>
  {
    // format specifier?  %[flags][width][.precision][length]
    if (*format != '%') {
   16f04:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   16f06:	781b      	ldrb	r3, [r3, #0]
   16f08:	2b25      	cmp	r3, #37	; 0x25
   16f0a:	d00d      	beq.n	16f28 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x54>
      // no
      out(*format, buffer, idx++, maxlen);
   16f0c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   16f0e:	7818      	ldrb	r0, [r3, #0]
   16f10:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   16f12:	1c53      	adds	r3, r2, #1
   16f14:	931b      	str	r3, [sp, #108]	; 0x6c
   16f16:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   16f18:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   16f1a:	990c      	ldr	r1, [sp, #48]	; 0x30
   16f1c:	47a0      	blx	r4
      format++;
   16f1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   16f20:	3301      	adds	r3, #1
   16f22:	930a      	str	r3, [sp, #40]	; 0x28
      continue;
   16f24:	f000 bc34 	b.w	17790 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8bc>
    }
    else {
      // yes, evaluate it
      format++;
   16f28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   16f2a:	3301      	adds	r3, #1
   16f2c:	930a      	str	r3, [sp, #40]	; 0x28
    }

    // evaluate flags
    flags = 0U;
   16f2e:	2300      	movs	r3, #0
   16f30:	931f      	str	r3, [sp, #124]	; 0x7c
    do {
      switch (*format) {
   16f32:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   16f34:	781b      	ldrb	r3, [r3, #0]
   16f36:	3b20      	subs	r3, #32
   16f38:	2b10      	cmp	r3, #16
   16f3a:	d857      	bhi.n	16fec <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x118>
   16f3c:	a201      	add	r2, pc, #4	; (adr r2, 16f44 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x70>)
   16f3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   16f42:	bf00      	nop
   16f44:	00016fc5 	.word	0x00016fc5
   16f48:	00016fed 	.word	0x00016fed
   16f4c:	00016fed 	.word	0x00016fed
   16f50:	00016fd9 	.word	0x00016fd9
   16f54:	00016fed 	.word	0x00016fed
   16f58:	00016fed 	.word	0x00016fed
   16f5c:	00016fed 	.word	0x00016fed
   16f60:	00016fed 	.word	0x00016fed
   16f64:	00016fed 	.word	0x00016fed
   16f68:	00016fed 	.word	0x00016fed
   16f6c:	00016fed 	.word	0x00016fed
   16f70:	00016fb1 	.word	0x00016fb1
   16f74:	00016fed 	.word	0x00016fed
   16f78:	00016f9d 	.word	0x00016f9d
   16f7c:	00016fed 	.word	0x00016fed
   16f80:	00016fed 	.word	0x00016fed
   16f84:	00016f89 	.word	0x00016f89
        case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
   16f88:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   16f8a:	f043 0301 	orr.w	r3, r3, #1
   16f8e:	931f      	str	r3, [sp, #124]	; 0x7c
   16f90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   16f92:	3301      	adds	r3, #1
   16f94:	930a      	str	r3, [sp, #40]	; 0x28
   16f96:	2301      	movs	r3, #1
   16f98:	931c      	str	r3, [sp, #112]	; 0x70
   16f9a:	e02a      	b.n	16ff2 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x11e>
        case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
   16f9c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   16f9e:	f043 0302 	orr.w	r3, r3, #2
   16fa2:	931f      	str	r3, [sp, #124]	; 0x7c
   16fa4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   16fa6:	3301      	adds	r3, #1
   16fa8:	930a      	str	r3, [sp, #40]	; 0x28
   16faa:	2301      	movs	r3, #1
   16fac:	931c      	str	r3, [sp, #112]	; 0x70
   16fae:	e020      	b.n	16ff2 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x11e>
        case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
   16fb0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   16fb2:	f043 0304 	orr.w	r3, r3, #4
   16fb6:	931f      	str	r3, [sp, #124]	; 0x7c
   16fb8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   16fba:	3301      	adds	r3, #1
   16fbc:	930a      	str	r3, [sp, #40]	; 0x28
   16fbe:	2301      	movs	r3, #1
   16fc0:	931c      	str	r3, [sp, #112]	; 0x70
   16fc2:	e016      	b.n	16ff2 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x11e>
        case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
   16fc4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   16fc6:	f043 0308 	orr.w	r3, r3, #8
   16fca:	931f      	str	r3, [sp, #124]	; 0x7c
   16fcc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   16fce:	3301      	adds	r3, #1
   16fd0:	930a      	str	r3, [sp, #40]	; 0x28
   16fd2:	2301      	movs	r3, #1
   16fd4:	931c      	str	r3, [sp, #112]	; 0x70
   16fd6:	e00c      	b.n	16ff2 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x11e>
        case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;
   16fd8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   16fda:	f043 0310 	orr.w	r3, r3, #16
   16fde:	931f      	str	r3, [sp, #124]	; 0x7c
   16fe0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   16fe2:	3301      	adds	r3, #1
   16fe4:	930a      	str	r3, [sp, #40]	; 0x28
   16fe6:	2301      	movs	r3, #1
   16fe8:	931c      	str	r3, [sp, #112]	; 0x70
   16fea:	e002      	b.n	16ff2 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x11e>
        default :                                   n = 0U; break;
   16fec:	2300      	movs	r3, #0
   16fee:	931c      	str	r3, [sp, #112]	; 0x70
   16ff0:	bf00      	nop
      }
    } while (n);
   16ff2:	9b1c      	ldr	r3, [sp, #112]	; 0x70
   16ff4:	2b00      	cmp	r3, #0
   16ff6:	d000      	beq.n	16ffa <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x126>
    do {
   16ff8:	e79b      	b.n	16f32 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x5e>

    // evaluate width field
    width = 0U;
   16ffa:	2300      	movs	r3, #0
   16ffc:	931e      	str	r3, [sp, #120]	; 0x78
    if (_is_digit(*format)) {
   16ffe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   17000:	781b      	ldrb	r3, [r3, #0]
   17002:	4618      	mov	r0, r3
   17004:	f7ff fade 	bl	165c4 <_is_digit(char)>
   17008:	4603      	mov	r3, r0
   1700a:	2b00      	cmp	r3, #0
   1700c:	d005      	beq.n	1701a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x146>
      width = _atoi(&format);
   1700e:	ab0a      	add	r3, sp, #40	; 0x28
   17010:	4618      	mov	r0, r3
   17012:	f7ff faf9 	bl	16608 <_atoi(char const**)>
   17016:	901e      	str	r0, [sp, #120]	; 0x78
   17018:	e018      	b.n	1704c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x178>
    }
    else if (*format == '*') {
   1701a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1701c:	781b      	ldrb	r3, [r3, #0]
   1701e:	2b2a      	cmp	r3, #42	; 0x2a
   17020:	d114      	bne.n	1704c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x178>
      const int w = va_arg(va, int);
   17022:	9b24      	ldr	r3, [sp, #144]	; 0x90
   17024:	1d1a      	adds	r2, r3, #4
   17026:	9224      	str	r2, [sp, #144]	; 0x90
   17028:	681b      	ldr	r3, [r3, #0]
   1702a:	9316      	str	r3, [sp, #88]	; 0x58
      if (w < 0) {
   1702c:	9b16      	ldr	r3, [sp, #88]	; 0x58
   1702e:	2b00      	cmp	r3, #0
   17030:	da07      	bge.n	17042 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x16e>
        flags |= FLAGS_LEFT;    // reverse padding
   17032:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   17034:	f043 0302 	orr.w	r3, r3, #2
   17038:	931f      	str	r3, [sp, #124]	; 0x7c
        width = (unsigned int)-w;
   1703a:	9b16      	ldr	r3, [sp, #88]	; 0x58
   1703c:	425b      	negs	r3, r3
   1703e:	931e      	str	r3, [sp, #120]	; 0x78
   17040:	e001      	b.n	17046 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x172>
      }
      else {
        width = (unsigned int)w;
   17042:	9b16      	ldr	r3, [sp, #88]	; 0x58
   17044:	931e      	str	r3, [sp, #120]	; 0x78
      }
      format++;
   17046:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   17048:	3301      	adds	r3, #1
   1704a:	930a      	str	r3, [sp, #40]	; 0x28
    }

    // evaluate precision field
    precision = 0U;
   1704c:	2300      	movs	r3, #0
   1704e:	931d      	str	r3, [sp, #116]	; 0x74
    if (*format == '.') {
   17050:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   17052:	781b      	ldrb	r3, [r3, #0]
   17054:	2b2e      	cmp	r3, #46	; 0x2e
   17056:	d124      	bne.n	170a2 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x1ce>
      flags |= FLAGS_PRECISION;
   17058:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   1705a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
   1705e:	931f      	str	r3, [sp, #124]	; 0x7c
      format++;
   17060:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   17062:	3301      	adds	r3, #1
   17064:	930a      	str	r3, [sp, #40]	; 0x28
      if (_is_digit(*format)) {
   17066:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   17068:	781b      	ldrb	r3, [r3, #0]
   1706a:	4618      	mov	r0, r3
   1706c:	f7ff faaa 	bl	165c4 <_is_digit(char)>
   17070:	4603      	mov	r3, r0
   17072:	2b00      	cmp	r3, #0
   17074:	d005      	beq.n	17082 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x1ae>
        precision = _atoi(&format);
   17076:	ab0a      	add	r3, sp, #40	; 0x28
   17078:	4618      	mov	r0, r3
   1707a:	f7ff fac5 	bl	16608 <_atoi(char const**)>
   1707e:	901d      	str	r0, [sp, #116]	; 0x74
   17080:	e00f      	b.n	170a2 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x1ce>
      }
      else if (*format == '*') {
   17082:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   17084:	781b      	ldrb	r3, [r3, #0]
   17086:	2b2a      	cmp	r3, #42	; 0x2a
   17088:	d10b      	bne.n	170a2 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x1ce>
        const int prec = (int)va_arg(va, int);
   1708a:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1708c:	1d1a      	adds	r2, r3, #4
   1708e:	9224      	str	r2, [sp, #144]	; 0x90
   17090:	681b      	ldr	r3, [r3, #0]
   17092:	9315      	str	r3, [sp, #84]	; 0x54
        precision = prec > 0 ? (unsigned int)prec : 0U;
   17094:	9b15      	ldr	r3, [sp, #84]	; 0x54
   17096:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   1709a:	931d      	str	r3, [sp, #116]	; 0x74
        format++;
   1709c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1709e:	3301      	adds	r3, #1
   170a0:	930a      	str	r3, [sp, #40]	; 0x28
      }
    }

    // evaluate length field
    switch (*format) {
   170a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   170a4:	781b      	ldrb	r3, [r3, #0]
   170a6:	3b68      	subs	r3, #104	; 0x68
   170a8:	2b12      	cmp	r3, #18
   170aa:	d867      	bhi.n	1717c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2a8>
   170ac:	a201      	add	r2, pc, #4	; (adr r2, 170b4 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x1e0>)
   170ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   170b2:	bf00      	nop
   170b4:	00017127 	.word	0x00017127
   170b8:	0001717d 	.word	0x0001717d
   170bc:	0001715d 	.word	0x0001715d
   170c0:	0001717d 	.word	0x0001717d
   170c4:	00017101 	.word	0x00017101
   170c8:	0001717d 	.word	0x0001717d
   170cc:	0001717d 	.word	0x0001717d
   170d0:	0001717d 	.word	0x0001717d
   170d4:	0001717d 	.word	0x0001717d
   170d8:	0001717d 	.word	0x0001717d
   170dc:	0001717d 	.word	0x0001717d
   170e0:	0001717d 	.word	0x0001717d
   170e4:	0001714d 	.word	0x0001714d
   170e8:	0001717d 	.word	0x0001717d
   170ec:	0001717d 	.word	0x0001717d
   170f0:	0001717d 	.word	0x0001717d
   170f4:	0001717d 	.word	0x0001717d
   170f8:	0001717d 	.word	0x0001717d
   170fc:	0001716d 	.word	0x0001716d
      case 'l' :
        flags |= FLAGS_LONG;
   17100:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   17102:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   17106:	931f      	str	r3, [sp, #124]	; 0x7c
        format++;
   17108:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1710a:	3301      	adds	r3, #1
   1710c:	930a      	str	r3, [sp, #40]	; 0x28
        if (*format == 'l') {
   1710e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   17110:	781b      	ldrb	r3, [r3, #0]
   17112:	2b6c      	cmp	r3, #108	; 0x6c
   17114:	d134      	bne.n	17180 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2ac>
          flags |= FLAGS_LONG_LONG;
   17116:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   17118:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   1711c:	931f      	str	r3, [sp, #124]	; 0x7c
          format++;
   1711e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   17120:	3301      	adds	r3, #1
   17122:	930a      	str	r3, [sp, #40]	; 0x28
        }
        break;
   17124:	e02c      	b.n	17180 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2ac>
      case 'h' :
        flags |= FLAGS_SHORT;
   17126:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   17128:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   1712c:	931f      	str	r3, [sp, #124]	; 0x7c
        format++;
   1712e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   17130:	3301      	adds	r3, #1
   17132:	930a      	str	r3, [sp, #40]	; 0x28
        if (*format == 'h') {
   17134:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   17136:	781b      	ldrb	r3, [r3, #0]
   17138:	2b68      	cmp	r3, #104	; 0x68
   1713a:	d127      	bne.n	1718c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2b8>
          flags |= FLAGS_CHAR;
   1713c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   1713e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   17142:	931f      	str	r3, [sp, #124]	; 0x7c
          format++;
   17144:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   17146:	3301      	adds	r3, #1
   17148:	930a      	str	r3, [sp, #40]	; 0x28
        }
        break;
   1714a:	e01f      	b.n	1718c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2b8>
#if defined(PRINTF_SUPPORT_PTRDIFF_T)
      case 't' :
        flags |= (sizeof(ptrdiff_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
   1714c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   1714e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   17152:	931f      	str	r3, [sp, #124]	; 0x7c
        format++;
   17154:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   17156:	3301      	adds	r3, #1
   17158:	930a      	str	r3, [sp, #40]	; 0x28
        break;
   1715a:	e018      	b.n	1718e <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2ba>
#endif
      case 'j' :
        flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
   1715c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   1715e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   17162:	931f      	str	r3, [sp, #124]	; 0x7c
        format++;
   17164:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   17166:	3301      	adds	r3, #1
   17168:	930a      	str	r3, [sp, #40]	; 0x28
        break;
   1716a:	e010      	b.n	1718e <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2ba>
      case 'z' :
        flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
   1716c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   1716e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   17172:	931f      	str	r3, [sp, #124]	; 0x7c
        format++;
   17174:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   17176:	3301      	adds	r3, #1
   17178:	930a      	str	r3, [sp, #40]	; 0x28
        break;
   1717a:	e008      	b.n	1718e <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2ba>
      default :
        break;
   1717c:	bf00      	nop
   1717e:	e006      	b.n	1718e <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2ba>
        break;
   17180:	bf00      	nop
   17182:	e004      	b.n	1718e <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2ba>
   17184:	00016ed5 	.word	0x00016ed5
   17188:	0001650d 	.word	0x0001650d
        break;
   1718c:	bf00      	nop
    }

    // evaluate specifier
    switch (*format) {
   1718e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   17190:	781b      	ldrb	r3, [r3, #0]
   17192:	3b25      	subs	r3, #37	; 0x25
   17194:	2b53      	cmp	r3, #83	; 0x53
   17196:	f200 82ee 	bhi.w	17776 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8a2>
   1719a:	a201      	add	r2, pc, #4	; (adr r2, 171a0 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2cc>)
   1719c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   171a0:	0001775f 	.word	0x0001775f
   171a4:	00017777 	.word	0x00017777
   171a8:	00017777 	.word	0x00017777
   171ac:	00017777 	.word	0x00017777
   171b0:	00017777 	.word	0x00017777
   171b4:	00017777 	.word	0x00017777
   171b8:	00017777 	.word	0x00017777
   171bc:	00017777 	.word	0x00017777
   171c0:	00017777 	.word	0x00017777
   171c4:	00017777 	.word	0x00017777
   171c8:	00017777 	.word	0x00017777
   171cc:	00017777 	.word	0x00017777
   171d0:	00017777 	.word	0x00017777
   171d4:	00017777 	.word	0x00017777
   171d8:	00017777 	.word	0x00017777
   171dc:	00017777 	.word	0x00017777
   171e0:	00017777 	.word	0x00017777
   171e4:	00017777 	.word	0x00017777
   171e8:	00017777 	.word	0x00017777
   171ec:	00017777 	.word	0x00017777
   171f0:	00017777 	.word	0x00017777
   171f4:	00017777 	.word	0x00017777
   171f8:	00017777 	.word	0x00017777
   171fc:	00017777 	.word	0x00017777
   17200:	00017777 	.word	0x00017777
   17204:	00017777 	.word	0x00017777
   17208:	00017777 	.word	0x00017777
   1720c:	00017777 	.word	0x00017777
   17210:	00017777 	.word	0x00017777
   17214:	00017777 	.word	0x00017777
   17218:	00017777 	.word	0x00017777
   1721c:	00017777 	.word	0x00017777
   17220:	00017777 	.word	0x00017777
   17224:	0001757d 	.word	0x0001757d
   17228:	00017777 	.word	0x00017777
   1722c:	00017777 	.word	0x00017777
   17230:	00017777 	.word	0x00017777
   17234:	00017777 	.word	0x00017777
   17238:	00017777 	.word	0x00017777
   1723c:	00017777 	.word	0x00017777
   17240:	00017777 	.word	0x00017777
   17244:	00017777 	.word	0x00017777
   17248:	00017777 	.word	0x00017777
   1724c:	00017777 	.word	0x00017777
   17250:	00017777 	.word	0x00017777
   17254:	00017777 	.word	0x00017777
   17258:	00017777 	.word	0x00017777
   1725c:	00017777 	.word	0x00017777
   17260:	00017777 	.word	0x00017777
   17264:	00017777 	.word	0x00017777
   17268:	00017777 	.word	0x00017777
   1726c:	000172f1 	.word	0x000172f1
   17270:	00017777 	.word	0x00017777
   17274:	00017777 	.word	0x00017777
   17278:	00017777 	.word	0x00017777
   1727c:	00017777 	.word	0x00017777
   17280:	00017777 	.word	0x00017777
   17284:	00017777 	.word	0x00017777
   17288:	00017777 	.word	0x00017777
   1728c:	00017777 	.word	0x00017777
   17290:	00017777 	.word	0x00017777
   17294:	000172f1 	.word	0x000172f1
   17298:	000175b9 	.word	0x000175b9
   1729c:	000172f1 	.word	0x000172f1
   172a0:	00017777 	.word	0x00017777
   172a4:	0001757d 	.word	0x0001757d
   172a8:	00017777 	.word	0x00017777
   172ac:	00017777 	.word	0x00017777
   172b0:	000172f1 	.word	0x000172f1
   172b4:	00017777 	.word	0x00017777
   172b8:	00017777 	.word	0x00017777
   172bc:	00017777 	.word	0x00017777
   172c0:	00017777 	.word	0x00017777
   172c4:	00017777 	.word	0x00017777
   172c8:	000172f1 	.word	0x000172f1
   172cc:	00017717 	.word	0x00017717
   172d0:	00017777 	.word	0x00017777
   172d4:	00017777 	.word	0x00017777
   172d8:	00017641 	.word	0x00017641
   172dc:	00017777 	.word	0x00017777
   172e0:	000172f1 	.word	0x000172f1
   172e4:	00017777 	.word	0x00017777
   172e8:	00017777 	.word	0x00017777
   172ec:	000172f1 	.word	0x000172f1
      case 'X' :
      case 'o' :
      case 'b' : {
        // set the base
        unsigned int base;
        if (*format == 'x' || *format == 'X') {
   172f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   172f2:	781b      	ldrb	r3, [r3, #0]
   172f4:	2b78      	cmp	r3, #120	; 0x78
   172f6:	d003      	beq.n	17300 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x42c>
   172f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   172fa:	781b      	ldrb	r3, [r3, #0]
   172fc:	2b58      	cmp	r3, #88	; 0x58
   172fe:	d102      	bne.n	17306 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x432>
          base = 16U;
   17300:	2310      	movs	r3, #16
   17302:	931a      	str	r3, [sp, #104]	; 0x68
   17304:	e013      	b.n	1732e <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x45a>
        }
        else if (*format == 'o') {
   17306:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   17308:	781b      	ldrb	r3, [r3, #0]
   1730a:	2b6f      	cmp	r3, #111	; 0x6f
   1730c:	d102      	bne.n	17314 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x440>
          base =  8U;
   1730e:	2308      	movs	r3, #8
   17310:	931a      	str	r3, [sp, #104]	; 0x68
   17312:	e00c      	b.n	1732e <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x45a>
        }
        else if (*format == 'b') {
   17314:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   17316:	781b      	ldrb	r3, [r3, #0]
   17318:	2b62      	cmp	r3, #98	; 0x62
   1731a:	d102      	bne.n	17322 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x44e>
          base =  2U;
   1731c:	2302      	movs	r3, #2
   1731e:	931a      	str	r3, [sp, #104]	; 0x68
   17320:	e005      	b.n	1732e <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x45a>
        }
        else {
          base = 10U;
   17322:	230a      	movs	r3, #10
   17324:	931a      	str	r3, [sp, #104]	; 0x68
          flags &= ~FLAGS_HASH;   // no hash for dec format
   17326:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   17328:	f023 0310 	bic.w	r3, r3, #16
   1732c:	931f      	str	r3, [sp, #124]	; 0x7c
        }
        // uppercase
        if (*format == 'X') {
   1732e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   17330:	781b      	ldrb	r3, [r3, #0]
   17332:	2b58      	cmp	r3, #88	; 0x58
   17334:	d103      	bne.n	1733e <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x46a>
          flags |= FLAGS_UPPERCASE;
   17336:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   17338:	f043 0320 	orr.w	r3, r3, #32
   1733c:	931f      	str	r3, [sp, #124]	; 0x7c
        }

        // no plus or space flag for u, x, X, o, b
        if ((*format != 'i') && (*format != 'd')) {
   1733e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   17340:	781b      	ldrb	r3, [r3, #0]
   17342:	2b69      	cmp	r3, #105	; 0x69
   17344:	d007      	beq.n	17356 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x482>
   17346:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   17348:	781b      	ldrb	r3, [r3, #0]
   1734a:	2b64      	cmp	r3, #100	; 0x64
   1734c:	d003      	beq.n	17356 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x482>
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
   1734e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   17350:	f023 030c 	bic.w	r3, r3, #12
   17354:	931f      	str	r3, [sp, #124]	; 0x7c
        }

        // ignore '0' flag when precision is given
        if (flags & FLAGS_PRECISION) {
   17356:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   17358:	f403 6380 	and.w	r3, r3, #1024	; 0x400
   1735c:	2b00      	cmp	r3, #0
   1735e:	d003      	beq.n	17368 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x494>
          flags &= ~FLAGS_ZEROPAD;
   17360:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   17362:	f023 0301 	bic.w	r3, r3, #1
   17366:	931f      	str	r3, [sp, #124]	; 0x7c
        }

        // convert the integer
        if ((*format == 'i') || (*format == 'd')) {
   17368:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1736a:	781b      	ldrb	r3, [r3, #0]
   1736c:	2b69      	cmp	r3, #105	; 0x69
   1736e:	d004      	beq.n	1737a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x4a6>
   17370:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   17372:	781b      	ldrb	r3, [r3, #0]
   17374:	2b64      	cmp	r3, #100	; 0x64
   17376:	f040 808d 	bne.w	17494 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x5c0>
          // signed
          if (flags & FLAGS_LONG_LONG) {
   1737a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   1737c:	f403 7300 	and.w	r3, r3, #512	; 0x200
   17380:	2b00      	cmp	r3, #0
   17382:	d02e      	beq.n	173e2 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x50e>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            const long long value = va_arg(va, long long);
   17384:	9b24      	ldr	r3, [sp, #144]	; 0x90
   17386:	3307      	adds	r3, #7
   17388:	f023 0307 	bic.w	r3, r3, #7
   1738c:	f103 0208 	add.w	r2, r3, #8
   17390:	9224      	str	r2, [sp, #144]	; 0x90
   17392:	e9d3 3400 	ldrd	r3, r4, [r3]
   17396:	e9cd 340e 	strd	r3, r4, [sp, #56]	; 0x38
            idx = _ntoa_long_long(out, buffer, idx, maxlen, (unsigned long long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
   1739a:	e9dd 340e 	ldrd	r3, r4, [sp, #56]	; 0x38
   1739e:	2b00      	cmp	r3, #0
   173a0:	f174 0200 	sbcs.w	r2, r4, #0
   173a4:	da02      	bge.n	173ac <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x4d8>
   173a6:	425b      	negs	r3, r3
   173a8:	eb64 0444 	sbc.w	r4, r4, r4, lsl #1
   173ac:	4619      	mov	r1, r3
   173ae:	4622      	mov	r2, r4
   173b0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   173b2:	0fdb      	lsrs	r3, r3, #31
   173b4:	b2d8      	uxtb	r0, r3
   173b6:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   173b8:	f04f 0400 	mov.w	r4, #0
   173bc:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
   173be:	9508      	str	r5, [sp, #32]
   173c0:	9d1e      	ldr	r5, [sp, #120]	; 0x78
   173c2:	9507      	str	r5, [sp, #28]
   173c4:	9d1d      	ldr	r5, [sp, #116]	; 0x74
   173c6:	9506      	str	r5, [sp, #24]
   173c8:	e9cd 3404 	strd	r3, r4, [sp, #16]
   173cc:	9002      	str	r0, [sp, #8]
   173ce:	e9cd 1200 	strd	r1, r2, [sp]
   173d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   173d4:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   173d6:	990c      	ldr	r1, [sp, #48]	; 0x30
   173d8:	980d      	ldr	r0, [sp, #52]	; 0x34
   173da:	f7ff fae5 	bl	169a8 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)>
   173de:	901b      	str	r0, [sp, #108]	; 0x6c
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
          }
          else {
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
          }
   173e0:	e0c8      	b.n	17574 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x6a0>
          else if (flags & FLAGS_LONG) {
   173e2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   173e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
   173e8:	2b00      	cmp	r3, #0
   173ea:	d01e      	beq.n	1742a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x556>
            const long value = va_arg(va, long);
   173ec:	9b24      	ldr	r3, [sp, #144]	; 0x90
   173ee:	1d1a      	adds	r2, r3, #4
   173f0:	9224      	str	r2, [sp, #144]	; 0x90
   173f2:	681b      	ldr	r3, [r3, #0]
   173f4:	9311      	str	r3, [sp, #68]	; 0x44
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
   173f6:	9b11      	ldr	r3, [sp, #68]	; 0x44
   173f8:	2b00      	cmp	r3, #0
   173fa:	bfb8      	it	lt
   173fc:	425b      	neglt	r3, r3
   173fe:	4619      	mov	r1, r3
   17400:	9b11      	ldr	r3, [sp, #68]	; 0x44
   17402:	0fdb      	lsrs	r3, r3, #31
   17404:	b2db      	uxtb	r3, r3
   17406:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   17408:	9205      	str	r2, [sp, #20]
   1740a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   1740c:	9204      	str	r2, [sp, #16]
   1740e:	9a1d      	ldr	r2, [sp, #116]	; 0x74
   17410:	9203      	str	r2, [sp, #12]
   17412:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   17414:	9202      	str	r2, [sp, #8]
   17416:	9301      	str	r3, [sp, #4]
   17418:	9100      	str	r1, [sp, #0]
   1741a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1741c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   1741e:	990c      	ldr	r1, [sp, #48]	; 0x30
   17420:	980d      	ldr	r0, [sp, #52]	; 0x34
   17422:	f7ff fa4f 	bl	168c4 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)>
   17426:	901b      	str	r0, [sp, #108]	; 0x6c
          }
   17428:	e0a4      	b.n	17574 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x6a0>
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
   1742a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   1742c:	f003 0340 	and.w	r3, r3, #64	; 0x40
   17430:	2b00      	cmp	r3, #0
   17432:	d005      	beq.n	17440 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x56c>
   17434:	9b24      	ldr	r3, [sp, #144]	; 0x90
   17436:	1d1a      	adds	r2, r3, #4
   17438:	9224      	str	r2, [sp, #144]	; 0x90
   1743a:	681b      	ldr	r3, [r3, #0]
   1743c:	b2db      	uxtb	r3, r3
   1743e:	e00e      	b.n	1745e <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x58a>
   17440:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   17442:	f003 0380 	and.w	r3, r3, #128	; 0x80
   17446:	2b00      	cmp	r3, #0
   17448:	d005      	beq.n	17456 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x582>
   1744a:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1744c:	1d1a      	adds	r2, r3, #4
   1744e:	9224      	str	r2, [sp, #144]	; 0x90
   17450:	681b      	ldr	r3, [r3, #0]
   17452:	b21b      	sxth	r3, r3
   17454:	e003      	b.n	1745e <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x58a>
   17456:	9b24      	ldr	r3, [sp, #144]	; 0x90
   17458:	1d1a      	adds	r2, r3, #4
   1745a:	9224      	str	r2, [sp, #144]	; 0x90
   1745c:	681b      	ldr	r3, [r3, #0]
   1745e:	9312      	str	r3, [sp, #72]	; 0x48
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
   17460:	9b12      	ldr	r3, [sp, #72]	; 0x48
   17462:	2b00      	cmp	r3, #0
   17464:	bfb8      	it	lt
   17466:	425b      	neglt	r3, r3
   17468:	4619      	mov	r1, r3
   1746a:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1746c:	0fdb      	lsrs	r3, r3, #31
   1746e:	b2db      	uxtb	r3, r3
   17470:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   17472:	9205      	str	r2, [sp, #20]
   17474:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   17476:	9204      	str	r2, [sp, #16]
   17478:	9a1d      	ldr	r2, [sp, #116]	; 0x74
   1747a:	9203      	str	r2, [sp, #12]
   1747c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   1747e:	9202      	str	r2, [sp, #8]
   17480:	9301      	str	r3, [sp, #4]
   17482:	9100      	str	r1, [sp, #0]
   17484:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   17486:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   17488:	990c      	ldr	r1, [sp, #48]	; 0x30
   1748a:	980d      	ldr	r0, [sp, #52]	; 0x34
   1748c:	f7ff fa1a 	bl	168c4 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)>
   17490:	901b      	str	r0, [sp, #108]	; 0x6c
          }
   17492:	e06f      	b.n	17574 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x6a0>
        }
        else {
          // unsigned
          if (flags & FLAGS_LONG_LONG) {
   17494:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   17496:	f403 7300 	and.w	r3, r3, #512	; 0x200
   1749a:	2b00      	cmp	r3, #0
   1749c:	d020      	beq.n	174e0 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x60c>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base, precision, width, flags);
   1749e:	9b24      	ldr	r3, [sp, #144]	; 0x90
   174a0:	3307      	adds	r3, #7
   174a2:	f023 0307 	bic.w	r3, r3, #7
   174a6:	f103 0208 	add.w	r2, r3, #8
   174aa:	9224      	str	r2, [sp, #144]	; 0x90
   174ac:	e9d3 3400 	ldrd	r3, r4, [r3]
   174b0:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   174b2:	4611      	mov	r1, r2
   174b4:	f04f 0200 	mov.w	r2, #0
   174b8:	981f      	ldr	r0, [sp, #124]	; 0x7c
   174ba:	9008      	str	r0, [sp, #32]
   174bc:	981e      	ldr	r0, [sp, #120]	; 0x78
   174be:	9007      	str	r0, [sp, #28]
   174c0:	981d      	ldr	r0, [sp, #116]	; 0x74
   174c2:	9006      	str	r0, [sp, #24]
   174c4:	e9cd 1204 	strd	r1, r2, [sp, #16]
   174c8:	2200      	movs	r2, #0
   174ca:	9202      	str	r2, [sp, #8]
   174cc:	e9cd 3400 	strd	r3, r4, [sp]
   174d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   174d2:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   174d4:	990c      	ldr	r1, [sp, #48]	; 0x30
   174d6:	980d      	ldr	r0, [sp, #52]	; 0x34
   174d8:	f7ff fa66 	bl	169a8 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)>
   174dc:	901b      	str	r0, [sp, #108]	; 0x6c
   174de:	e049      	b.n	17574 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x6a0>
#endif
          }
          else if (flags & FLAGS_LONG) {
   174e0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   174e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
   174e6:	2b00      	cmp	r3, #0
   174e8:	d016      	beq.n	17518 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x644>
            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
   174ea:	9b24      	ldr	r3, [sp, #144]	; 0x90
   174ec:	1d1a      	adds	r2, r3, #4
   174ee:	9224      	str	r2, [sp, #144]	; 0x90
   174f0:	681b      	ldr	r3, [r3, #0]
   174f2:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   174f4:	9205      	str	r2, [sp, #20]
   174f6:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   174f8:	9204      	str	r2, [sp, #16]
   174fa:	9a1d      	ldr	r2, [sp, #116]	; 0x74
   174fc:	9203      	str	r2, [sp, #12]
   174fe:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   17500:	9202      	str	r2, [sp, #8]
   17502:	2200      	movs	r2, #0
   17504:	9201      	str	r2, [sp, #4]
   17506:	9300      	str	r3, [sp, #0]
   17508:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1750a:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   1750c:	990c      	ldr	r1, [sp, #48]	; 0x30
   1750e:	980d      	ldr	r0, [sp, #52]	; 0x34
   17510:	f7ff f9d8 	bl	168c4 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)>
   17514:	901b      	str	r0, [sp, #108]	; 0x6c
   17516:	e02d      	b.n	17574 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x6a0>
          }
          else {
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
   17518:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   1751a:	f003 0340 	and.w	r3, r3, #64	; 0x40
   1751e:	2b00      	cmp	r3, #0
   17520:	d005      	beq.n	1752e <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x65a>
   17522:	9b24      	ldr	r3, [sp, #144]	; 0x90
   17524:	1d1a      	adds	r2, r3, #4
   17526:	9224      	str	r2, [sp, #144]	; 0x90
   17528:	681b      	ldr	r3, [r3, #0]
   1752a:	b2db      	uxtb	r3, r3
   1752c:	e00e      	b.n	1754c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x678>
   1752e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   17530:	f003 0380 	and.w	r3, r3, #128	; 0x80
   17534:	2b00      	cmp	r3, #0
   17536:	d005      	beq.n	17544 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x670>
   17538:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1753a:	1d1a      	adds	r2, r3, #4
   1753c:	9224      	str	r2, [sp, #144]	; 0x90
   1753e:	681b      	ldr	r3, [r3, #0]
   17540:	b29b      	uxth	r3, r3
   17542:	e003      	b.n	1754c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x678>
   17544:	9b24      	ldr	r3, [sp, #144]	; 0x90
   17546:	1d1a      	adds	r2, r3, #4
   17548:	9224      	str	r2, [sp, #144]	; 0x90
   1754a:	681b      	ldr	r3, [r3, #0]
   1754c:	9313      	str	r3, [sp, #76]	; 0x4c
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
   1754e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   17550:	9305      	str	r3, [sp, #20]
   17552:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   17554:	9304      	str	r3, [sp, #16]
   17556:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   17558:	9303      	str	r3, [sp, #12]
   1755a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   1755c:	9302      	str	r3, [sp, #8]
   1755e:	2300      	movs	r3, #0
   17560:	9301      	str	r3, [sp, #4]
   17562:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   17564:	9300      	str	r3, [sp, #0]
   17566:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   17568:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   1756a:	990c      	ldr	r1, [sp, #48]	; 0x30
   1756c:	980d      	ldr	r0, [sp, #52]	; 0x34
   1756e:	f7ff f9a9 	bl	168c4 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)>
   17572:	901b      	str	r0, [sp, #108]	; 0x6c
          }
        }
        format++;
   17574:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   17576:	3301      	adds	r3, #1
   17578:	930a      	str	r3, [sp, #40]	; 0x28
        break;
   1757a:	e109      	b.n	17790 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8bc>
      }
#if defined(PRINTF_SUPPORT_FLOAT)
      case 'f' :
      case 'F' :
        idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
   1757c:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1757e:	3307      	adds	r3, #7
   17580:	f023 0307 	bic.w	r3, r3, #7
   17584:	f103 0208 	add.w	r2, r3, #8
   17588:	9224      	str	r2, [sp, #144]	; 0x90
   1758a:	ed93 7b00 	vldr	d7, [r3]
   1758e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   17590:	9302      	str	r3, [sp, #8]
   17592:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   17594:	9301      	str	r3, [sp, #4]
   17596:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   17598:	9300      	str	r3, [sp, #0]
   1759a:	eeb0 0a47 	vmov.f32	s0, s14
   1759e:	eef0 0a67 	vmov.f32	s1, s15
   175a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   175a4:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   175a6:	990c      	ldr	r1, [sp, #48]	; 0x30
   175a8:	980d      	ldr	r0, [sp, #52]	; 0x34
   175aa:	f7ff fa77 	bl	16a9c <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)>
   175ae:	901b      	str	r0, [sp, #108]	; 0x6c
        format++;
   175b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   175b2:	3301      	adds	r3, #1
   175b4:	930a      	str	r3, [sp, #40]	; 0x28
        break;
   175b6:	e0eb      	b.n	17790 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8bc>
#endif  // PRINTF_SUPPORT_FLOAT
      case 'c' : {
        unsigned int l = 1U;
   175b8:	2301      	movs	r3, #1
   175ba:	9319      	str	r3, [sp, #100]	; 0x64
        // pre padding
        if (!(flags & FLAGS_LEFT)) {
   175bc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   175be:	f003 0302 	and.w	r3, r3, #2
   175c2:	2b00      	cmp	r3, #0
   175c4:	d113      	bne.n	175ee <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x71a>
          while (l++ < width) {
   175c6:	9b19      	ldr	r3, [sp, #100]	; 0x64
   175c8:	1c5a      	adds	r2, r3, #1
   175ca:	9219      	str	r2, [sp, #100]	; 0x64
   175cc:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   175ce:	429a      	cmp	r2, r3
   175d0:	bf8c      	ite	hi
   175d2:	2301      	movhi	r3, #1
   175d4:	2300      	movls	r3, #0
   175d6:	b2db      	uxtb	r3, r3
   175d8:	2b00      	cmp	r3, #0
   175da:	d008      	beq.n	175ee <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x71a>
            out(' ', buffer, idx++, maxlen);
   175dc:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   175de:	1c53      	adds	r3, r2, #1
   175e0:	931b      	str	r3, [sp, #108]	; 0x6c
   175e2:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   175e4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   175e6:	990c      	ldr	r1, [sp, #48]	; 0x30
   175e8:	2020      	movs	r0, #32
   175ea:	47a0      	blx	r4
          while (l++ < width) {
   175ec:	e7eb      	b.n	175c6 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x6f2>
          }
        }
        // char output
        out((char)va_arg(va, int), buffer, idx++, maxlen);
   175ee:	9b24      	ldr	r3, [sp, #144]	; 0x90
   175f0:	1d1a      	adds	r2, r3, #4
   175f2:	9224      	str	r2, [sp, #144]	; 0x90
   175f4:	681b      	ldr	r3, [r3, #0]
   175f6:	b2d8      	uxtb	r0, r3
   175f8:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   175fa:	1c53      	adds	r3, r2, #1
   175fc:	931b      	str	r3, [sp, #108]	; 0x6c
   175fe:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   17600:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   17602:	990c      	ldr	r1, [sp, #48]	; 0x30
   17604:	47a0      	blx	r4
        // post padding
        if (flags & FLAGS_LEFT) {
   17606:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   17608:	f003 0302 	and.w	r3, r3, #2
   1760c:	2b00      	cmp	r3, #0
   1760e:	d013      	beq.n	17638 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x764>
          while (l++ < width) {
   17610:	9b19      	ldr	r3, [sp, #100]	; 0x64
   17612:	1c5a      	adds	r2, r3, #1
   17614:	9219      	str	r2, [sp, #100]	; 0x64
   17616:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   17618:	429a      	cmp	r2, r3
   1761a:	bf8c      	ite	hi
   1761c:	2301      	movhi	r3, #1
   1761e:	2300      	movls	r3, #0
   17620:	b2db      	uxtb	r3, r3
   17622:	2b00      	cmp	r3, #0
   17624:	d008      	beq.n	17638 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x764>
            out(' ', buffer, idx++, maxlen);
   17626:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   17628:	1c53      	adds	r3, r2, #1
   1762a:	931b      	str	r3, [sp, #108]	; 0x6c
   1762c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   1762e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   17630:	990c      	ldr	r1, [sp, #48]	; 0x30
   17632:	2020      	movs	r0, #32
   17634:	47a0      	blx	r4
          while (l++ < width) {
   17636:	e7eb      	b.n	17610 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x73c>
          }
        }
        format++;
   17638:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1763a:	3301      	adds	r3, #1
   1763c:	930a      	str	r3, [sp, #40]	; 0x28
        break;
   1763e:	e0a7      	b.n	17790 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8bc>
      }

      case 's' : {
        char* p = va_arg(va, char*);
   17640:	9b24      	ldr	r3, [sp, #144]	; 0x90
   17642:	1d1a      	adds	r2, r3, #4
   17644:	9224      	str	r2, [sp, #144]	; 0x90
   17646:	681b      	ldr	r3, [r3, #0]
   17648:	9318      	str	r3, [sp, #96]	; 0x60
        unsigned int l = _strlen(p);
   1764a:	9818      	ldr	r0, [sp, #96]	; 0x60
   1764c:	f7fe ff98 	bl	16580 <_strlen(char const*)>
   17650:	9017      	str	r0, [sp, #92]	; 0x5c
        // pre padding
        if (flags & FLAGS_PRECISION) {
   17652:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   17654:	f403 6380 	and.w	r3, r3, #1024	; 0x400
   17658:	2b00      	cmp	r3, #0
   1765a:	d007      	beq.n	1766c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x798>
          l = (l < precision ? l : precision);
   1765c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   1765e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   17660:	429a      	cmp	r2, r3
   17662:	d201      	bcs.n	17668 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x794>
   17664:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   17666:	e000      	b.n	1766a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x796>
   17668:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   1766a:	9317      	str	r3, [sp, #92]	; 0x5c
        }
        if (!(flags & FLAGS_LEFT)) {
   1766c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   1766e:	f003 0302 	and.w	r3, r3, #2
   17672:	2b00      	cmp	r3, #0
   17674:	d113      	bne.n	1769e <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7ca>
          while (l++ < width) {
   17676:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   17678:	1c5a      	adds	r2, r3, #1
   1767a:	9217      	str	r2, [sp, #92]	; 0x5c
   1767c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   1767e:	429a      	cmp	r2, r3
   17680:	bf8c      	ite	hi
   17682:	2301      	movhi	r3, #1
   17684:	2300      	movls	r3, #0
   17686:	b2db      	uxtb	r3, r3
   17688:	2b00      	cmp	r3, #0
   1768a:	d008      	beq.n	1769e <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7ca>
            out(' ', buffer, idx++, maxlen);
   1768c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   1768e:	1c53      	adds	r3, r2, #1
   17690:	931b      	str	r3, [sp, #108]	; 0x6c
   17692:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   17694:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   17696:	990c      	ldr	r1, [sp, #48]	; 0x30
   17698:	2020      	movs	r0, #32
   1769a:	47a0      	blx	r4
          while (l++ < width) {
   1769c:	e7eb      	b.n	17676 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7a2>
          }
        }
        // string output
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
   1769e:	9b18      	ldr	r3, [sp, #96]	; 0x60
   176a0:	781b      	ldrb	r3, [r3, #0]
   176a2:	2b00      	cmp	r3, #0
   176a4:	d00b      	beq.n	176be <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7ea>
   176a6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   176a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
   176ac:	2b00      	cmp	r3, #0
   176ae:	d004      	beq.n	176ba <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7e6>
   176b0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   176b2:	1e5a      	subs	r2, r3, #1
   176b4:	921d      	str	r2, [sp, #116]	; 0x74
   176b6:	2b00      	cmp	r3, #0
   176b8:	d001      	beq.n	176be <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7ea>
   176ba:	2301      	movs	r3, #1
   176bc:	e000      	b.n	176c0 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7ec>
   176be:	2300      	movs	r3, #0
   176c0:	2b00      	cmp	r3, #0
   176c2:	d00b      	beq.n	176dc <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x808>
          out(*(p++), buffer, idx++, maxlen);
   176c4:	9b18      	ldr	r3, [sp, #96]	; 0x60
   176c6:	1c5a      	adds	r2, r3, #1
   176c8:	9218      	str	r2, [sp, #96]	; 0x60
   176ca:	7818      	ldrb	r0, [r3, #0]
   176cc:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   176ce:	1c53      	adds	r3, r2, #1
   176d0:	931b      	str	r3, [sp, #108]	; 0x6c
   176d2:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   176d4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   176d6:	990c      	ldr	r1, [sp, #48]	; 0x30
   176d8:	47a0      	blx	r4
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
   176da:	e7e0      	b.n	1769e <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7ca>
        }
        // post padding
        if (flags & FLAGS_LEFT) {
   176dc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   176de:	f003 0302 	and.w	r3, r3, #2
   176e2:	2b00      	cmp	r3, #0
   176e4:	d013      	beq.n	1770e <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x83a>
          while (l++ < width) {
   176e6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   176e8:	1c5a      	adds	r2, r3, #1
   176ea:	9217      	str	r2, [sp, #92]	; 0x5c
   176ec:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   176ee:	429a      	cmp	r2, r3
   176f0:	bf8c      	ite	hi
   176f2:	2301      	movhi	r3, #1
   176f4:	2300      	movls	r3, #0
   176f6:	b2db      	uxtb	r3, r3
   176f8:	2b00      	cmp	r3, #0
   176fa:	d008      	beq.n	1770e <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x83a>
            out(' ', buffer, idx++, maxlen);
   176fc:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   176fe:	1c53      	adds	r3, r2, #1
   17700:	931b      	str	r3, [sp, #108]	; 0x6c
   17702:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   17704:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   17706:	990c      	ldr	r1, [sp, #48]	; 0x30
   17708:	2020      	movs	r0, #32
   1770a:	47a0      	blx	r4
          while (l++ < width) {
   1770c:	e7eb      	b.n	176e6 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x812>
          }
        }
        format++;
   1770e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   17710:	3301      	adds	r3, #1
   17712:	930a      	str	r3, [sp, #40]	; 0x28
        break;
   17714:	e03c      	b.n	17790 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8bc>
      }

      case 'p' : {
        width = sizeof(void*) * 2U;
   17716:	2308      	movs	r3, #8
   17718:	931e      	str	r3, [sp, #120]	; 0x78
        flags |= FLAGS_ZEROPAD | FLAGS_UPPERCASE;
   1771a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   1771c:	f043 0321 	orr.w	r3, r3, #33	; 0x21
   17720:	931f      	str	r3, [sp, #124]	; 0x7c
#if defined(PRINTF_SUPPORT_LONG_LONG)
        const bool is_ll = sizeof(uintptr_t) == sizeof(long long);
   17722:	2300      	movs	r3, #0
   17724:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
        if (is_ll) {
          idx = _ntoa_long_long(out, buffer, idx, maxlen, (uintptr_t)va_arg(va, void*), false, 16U, precision, width, flags);
        }
        else {
#endif
          idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void*)), false, 16U, precision, width, flags);
   17728:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1772a:	1d1a      	adds	r2, r3, #4
   1772c:	9224      	str	r2, [sp, #144]	; 0x90
   1772e:	681b      	ldr	r3, [r3, #0]
   17730:	461a      	mov	r2, r3
   17732:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   17734:	9305      	str	r3, [sp, #20]
   17736:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   17738:	9304      	str	r3, [sp, #16]
   1773a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   1773c:	9303      	str	r3, [sp, #12]
   1773e:	2310      	movs	r3, #16
   17740:	9302      	str	r3, [sp, #8]
   17742:	2300      	movs	r3, #0
   17744:	9301      	str	r3, [sp, #4]
   17746:	9200      	str	r2, [sp, #0]
   17748:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1774a:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   1774c:	990c      	ldr	r1, [sp, #48]	; 0x30
   1774e:	980d      	ldr	r0, [sp, #52]	; 0x34
   17750:	f7ff f8b8 	bl	168c4 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)>
   17754:	901b      	str	r0, [sp, #108]	; 0x6c
#if defined(PRINTF_SUPPORT_LONG_LONG)
        }
#endif
        format++;
   17756:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   17758:	3301      	adds	r3, #1
   1775a:	930a      	str	r3, [sp, #40]	; 0x28
        break;
   1775c:	e018      	b.n	17790 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8bc>
      }

      case '%' :
        out('%', buffer, idx++, maxlen);
   1775e:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   17760:	1c53      	adds	r3, r2, #1
   17762:	931b      	str	r3, [sp, #108]	; 0x6c
   17764:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   17766:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   17768:	990c      	ldr	r1, [sp, #48]	; 0x30
   1776a:	2025      	movs	r0, #37	; 0x25
   1776c:	47a0      	blx	r4
        format++;
   1776e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   17770:	3301      	adds	r3, #1
   17772:	930a      	str	r3, [sp, #40]	; 0x28
        break;
   17774:	e00c      	b.n	17790 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8bc>

      default :
        out(*format, buffer, idx++, maxlen);
   17776:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   17778:	7818      	ldrb	r0, [r3, #0]
   1777a:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   1777c:	1c53      	adds	r3, r2, #1
   1777e:	931b      	str	r3, [sp, #108]	; 0x6c
   17780:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   17782:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   17784:	990c      	ldr	r1, [sp, #48]	; 0x30
   17786:	47a0      	blx	r4
        format++;
   17788:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1778a:	3301      	adds	r3, #1
   1778c:	930a      	str	r3, [sp, #40]	; 0x28
        break;
   1778e:	bf00      	nop
  while (*format)
   17790:	f7ff bbb3 	b.w	16efa <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x26>
    }
  }

  // termination
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
   17794:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   17796:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   17798:	429a      	cmp	r2, r3
   1779a:	d302      	bcc.n	177a2 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8ce>
   1779c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1779e:	1e5a      	subs	r2, r3, #1
   177a0:	e000      	b.n	177a4 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8d0>
   177a2:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   177a4:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   177a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   177a8:	990c      	ldr	r1, [sp, #48]	; 0x30
   177aa:	2000      	movs	r0, #0
   177ac:	47a0      	blx	r4

  // return written chars without terminating \0
  return (int)idx;
   177ae:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
   177b0:	4633      	mov	r3, r6
   177b2:	4619      	mov	r1, r3
   177b4:	4803      	ldr	r0, [pc, #12]	; (177c4 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8f0>)
   177b6:	f7fe fd9b 	bl	162f0 <__cyg_profile_func_exit>
   177ba:	4623      	mov	r3, r4
}
   177bc:	4618      	mov	r0, r3
   177be:	b020      	add	sp, #128	; 0x80
   177c0:	bd70      	pop	{r4, r5, r6, pc}
   177c2:	bf00      	nop
   177c4:	00016ed5 	.word	0x00016ed5

000177c8 <printf>:

///////////////////////////////////////////////////////////////////////////////


int printf(const char* format, ...)
{
   177c8:	b40f      	push	{r0, r1, r2, r3}
   177ca:	b530      	push	{r4, r5, lr}
   177cc:	b087      	sub	sp, #28
   177ce:	4675      	mov	r5, lr
   177d0:	462b      	mov	r3, r5
   177d2:	4619      	mov	r1, r3
   177d4:	480d      	ldr	r0, [pc, #52]	; (1780c <printf+0x44>)
   177d6:	f7fe fd77 	bl	162c8 <__cyg_profile_func_enter>
  va_list va;
  va_start(va, format);
   177da:	ab0b      	add	r3, sp, #44	; 0x2c
   177dc:	9304      	str	r3, [sp, #16]
  char buffer[1];
  const int ret = _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
   177de:	a903      	add	r1, sp, #12
   177e0:	9b04      	ldr	r3, [sp, #16]
   177e2:	9300      	str	r3, [sp, #0]
   177e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   177e6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   177ea:	4809      	ldr	r0, [pc, #36]	; (17810 <printf+0x48>)
   177ec:	f7ff fb72 	bl	16ed4 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)>
   177f0:	9005      	str	r0, [sp, #20]
  va_end(va);
  return ret;
   177f2:	9c05      	ldr	r4, [sp, #20]
   177f4:	462b      	mov	r3, r5
   177f6:	4619      	mov	r1, r3
   177f8:	4804      	ldr	r0, [pc, #16]	; (1780c <printf+0x44>)
   177fa:	f7fe fd79 	bl	162f0 <__cyg_profile_func_exit>
   177fe:	4623      	mov	r3, r4
}
   17800:	4618      	mov	r0, r3
   17802:	b007      	add	sp, #28
   17804:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   17808:	b004      	add	sp, #16
   1780a:	4770      	bx	lr
   1780c:	000177c9 	.word	0x000177c9
   17810:	0001653d 	.word	0x0001653d

00017814 <vsnprintf>:
  return ret;
}


int vsnprintf(char* buffer, size_t count, const char* format, va_list va)
{
   17814:	b530      	push	{r4, r5, lr}
   17816:	b087      	sub	sp, #28
   17818:	4674      	mov	r4, lr
   1781a:	9005      	str	r0, [sp, #20]
   1781c:	9104      	str	r1, [sp, #16]
   1781e:	9203      	str	r2, [sp, #12]
   17820:	9302      	str	r3, [sp, #8]
   17822:	4623      	mov	r3, r4
   17824:	4619      	mov	r1, r3
   17826:	480a      	ldr	r0, [pc, #40]	; (17850 <vsnprintf+0x3c>)
   17828:	f7fe fd4e 	bl	162c8 <__cyg_profile_func_enter>
  return _vsnprintf(_out_buffer, buffer, count, format, va);
   1782c:	9b02      	ldr	r3, [sp, #8]
   1782e:	9300      	str	r3, [sp, #0]
   17830:	9b03      	ldr	r3, [sp, #12]
   17832:	9a04      	ldr	r2, [sp, #16]
   17834:	9905      	ldr	r1, [sp, #20]
   17836:	4807      	ldr	r0, [pc, #28]	; (17854 <vsnprintf+0x40>)
   17838:	f7ff fb4c 	bl	16ed4 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)>
   1783c:	4605      	mov	r5, r0
   1783e:	4623      	mov	r3, r4
   17840:	4619      	mov	r1, r3
   17842:	4803      	ldr	r0, [pc, #12]	; (17850 <vsnprintf+0x3c>)
   17844:	f7fe fd54 	bl	162f0 <__cyg_profile_func_exit>
   17848:	462b      	mov	r3, r5
}
   1784a:	4618      	mov	r0, r3
   1784c:	b007      	add	sp, #28
   1784e:	bd30      	pop	{r4, r5, pc}
   17850:	00017815 	.word	0x00017815
   17854:	000164c9 	.word	0x000164c9

00017858 <SdInterface::SdInterface()>:
// NOLINTNEXTLINE(readability-identifier-naming)
// Relevant Datasheet:
// https://www.sdcard.org/downloads/pls/pdf/index.php?p=Part1_Physical_Layer_Simplified_Specification_Ver6.00.jpg&f=Part1_Physical_Layer_Simplified_Specification_Ver6.00.pdf&e=EN_SS1
// TODO(#348):  Write a class to represent a single Sd Card Block to make use
//              of block-related functions easier.
class SdInterface
   17858:	b530      	push	{r4, r5, lr}
   1785a:	b083      	sub	sp, #12
   1785c:	4675      	mov	r5, lr
   1785e:	9001      	str	r0, [sp, #4]
   17860:	462b      	mov	r3, r5
   17862:	4619      	mov	r1, r3
   17864:	4807      	ldr	r0, [pc, #28]	; (17884 <SdInterface::SdInterface()+0x2c>)
   17866:	f7fe fd2f 	bl	162c8 <__cyg_profile_func_enter>
   1786a:	4a07      	ldr	r2, [pc, #28]	; (17888 <SdInterface::SdInterface()+0x30>)
   1786c:	9b01      	ldr	r3, [sp, #4]
   1786e:	601a      	str	r2, [r3, #0]
   17870:	9c01      	ldr	r4, [sp, #4]
   17872:	462b      	mov	r3, r5
   17874:	4619      	mov	r1, r3
   17876:	4803      	ldr	r0, [pc, #12]	; (17884 <SdInterface::SdInterface()+0x2c>)
   17878:	f7fe fd3a 	bl	162f0 <__cyg_profile_func_exit>
   1787c:	4623      	mov	r3, r4
   1787e:	4618      	mov	r0, r3
   17880:	b003      	add	sp, #12
   17882:	bd30      	pop	{r4, r5, pc}
   17884:	00017859 	.word	0x00017859
   17888:	0001b780 	.word	0x0001b780

0001788c <Sd::Sd(Sd::DebugSdCard_t, unsigned char, unsigned char, unsigned char, unsigned char)>:
  /// port that is broken out through the board's GPIO, allowing you to probe
  /// the chip select manually. To use this version instead of the main version,
  /// instantiate an Sd card instance like so:
  ///
  ///   Sd sdcard(Sd::DebugSdCard_t{});
  constexpr Sd(DebugSdCard_t, uint8_t port = 1, uint8_t pin = 8,
   1788c:	b530      	push	{r4, r5, lr}
   1788e:	b083      	sub	sp, #12
   17890:	4675      	mov	r5, lr
   17892:	9001      	str	r0, [sp, #4]
   17894:	f88d 1000 	strb.w	r1, [sp]
   17898:	4611      	mov	r1, r2
   1789a:	461a      	mov	r2, r3
   1789c:	460b      	mov	r3, r1
   1789e:	f88d 3003 	strb.w	r3, [sp, #3]
   178a2:	4613      	mov	r3, r2
   178a4:	f88d 3002 	strb.w	r3, [sp, #2]
   178a8:	462b      	mov	r3, r5
   178aa:	4619      	mov	r1, r3
   178ac:	481d      	ldr	r0, [pc, #116]	; (17924 <Sd::Sd(Sd::DebugSdCard_t, unsigned char, unsigned char, unsigned char, unsigned char)+0x98>)
   178ae:	f7fe fd0b 	bl	162c8 <__cyg_profile_func_enter>
      : ssp_interface_(&ssp_),
        ssp_(Ssp::Peripheral::kSsp2),
        chip_select_(&chip_select_pin_),
        chip_select_external_(&chip_select_external_pin_),
        chip_select_pin_(port, pin),
        chip_select_external_pin_(extport, extpin)
   178b2:	9b01      	ldr	r3, [sp, #4]
   178b4:	4618      	mov	r0, r3
   178b6:	f7ff ffcf 	bl	17858 <SdInterface::SdInterface()>
   178ba:	4a1b      	ldr	r2, [pc, #108]	; (17928 <Sd::Sd(Sd::DebugSdCard_t, unsigned char, unsigned char, unsigned char, unsigned char)+0x9c>)
   178bc:	9b01      	ldr	r3, [sp, #4]
   178be:	601a      	str	r2, [r3, #0]
   178c0:	9b01      	ldr	r3, [sp, #4]
   178c2:	f103 0208 	add.w	r2, r3, #8
   178c6:	9b01      	ldr	r3, [sp, #4]
   178c8:	605a      	str	r2, [r3, #4]
   178ca:	9b01      	ldr	r3, [sp, #4]
   178cc:	3308      	adds	r3, #8
   178ce:	2102      	movs	r1, #2
   178d0:	4618      	mov	r0, r3
   178d2:	f7fa fb6b 	bl	11fac <Ssp::Ssp(Ssp::Peripheral)>
   178d6:	9b01      	ldr	r3, [sp, #4]
   178d8:	f103 0240 	add.w	r2, r3, #64	; 0x40
   178dc:	9b01      	ldr	r3, [sp, #4]
   178de:	639a      	str	r2, [r3, #56]	; 0x38
   178e0:	9b01      	ldr	r3, [sp, #4]
   178e2:	f103 0254 	add.w	r2, r3, #84	; 0x54
   178e6:	9b01      	ldr	r3, [sp, #4]
   178e8:	63da      	str	r2, [r3, #60]	; 0x3c
   178ea:	9b01      	ldr	r3, [sp, #4]
   178ec:	3340      	adds	r3, #64	; 0x40
   178ee:	f89d 2002 	ldrb.w	r2, [sp, #2]
   178f2:	f89d 1003 	ldrb.w	r1, [sp, #3]
   178f6:	4618      	mov	r0, r3
   178f8:	f7f9 fb68 	bl	10fcc <Gpio::Gpio(unsigned char, unsigned char)>
   178fc:	9b01      	ldr	r3, [sp, #4]
   178fe:	3354      	adds	r3, #84	; 0x54
   17900:	f89d 201c 	ldrb.w	r2, [sp, #28]
   17904:	f89d 1018 	ldrb.w	r1, [sp, #24]
   17908:	4618      	mov	r0, r3
   1790a:	f7f9 fb5f 	bl	10fcc <Gpio::Gpio(unsigned char, unsigned char)>
  {
  }
   1790e:	9c01      	ldr	r4, [sp, #4]
   17910:	462b      	mov	r3, r5
   17912:	4619      	mov	r1, r3
   17914:	4803      	ldr	r0, [pc, #12]	; (17924 <Sd::Sd(Sd::DebugSdCard_t, unsigned char, unsigned char, unsigned char, unsigned char)+0x98>)
   17916:	f7fe fceb 	bl	162f0 <__cyg_profile_func_exit>
   1791a:	4623      	mov	r3, r4
   1791c:	4618      	mov	r0, r3
   1791e:	b003      	add	sp, #12
   17920:	bd30      	pop	{r4, r5, pc}
   17922:	bf00      	nop
   17924:	0001788d 	.word	0x0001788d
   17928:	0001b754 	.word	0x0001b754

0001792c <Sd::Initialize()>:

  void Initialize() override
   1792c:	b530      	push	{r4, r5, lr}
   1792e:	b085      	sub	sp, #20
   17930:	4675      	mov	r5, lr
   17932:	9003      	str	r0, [sp, #12]
   17934:	462b      	mov	r3, r5
   17936:	4619      	mov	r1, r3
   17938:	4827      	ldr	r0, [pc, #156]	; (179d8 <Sd::Initialize()+0xac>)
   1793a:	f7fe fcc5 	bl	162c8 <__cyg_profile_func_enter>
  {
    LOG_DEBUG("Begin initialization:");
    LOG_DEBUG("Setting CS as output...");
    chip_select_->SetAsOutput();
   1793e:	9b03      	ldr	r3, [sp, #12]
   17940:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   17942:	9b03      	ldr	r3, [sp, #12]
   17944:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   17946:	681b      	ldr	r3, [r3, #0]
   17948:	3304      	adds	r3, #4
   1794a:	681b      	ldr	r3, [r3, #0]
   1794c:	4610      	mov	r0, r2
   1794e:	4798      	blx	r3
    chip_select_->SetHigh();
   17950:	9b03      	ldr	r3, [sp, #12]
   17952:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   17954:	9b03      	ldr	r3, [sp, #12]
   17956:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   17958:	681b      	ldr	r3, [r3, #0]
   1795a:	330c      	adds	r3, #12
   1795c:	681b      	ldr	r3, [r3, #0]
   1795e:	4610      	mov	r0, r2
   17960:	4798      	blx	r3
    chip_select_external_->SetAsOutput();
   17962:	9b03      	ldr	r3, [sp, #12]
   17964:	6bda      	ldr	r2, [r3, #60]	; 0x3c
   17966:	9b03      	ldr	r3, [sp, #12]
   17968:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1796a:	681b      	ldr	r3, [r3, #0]
   1796c:	3304      	adds	r3, #4
   1796e:	681b      	ldr	r3, [r3, #0]
   17970:	4610      	mov	r0, r2
   17972:	4798      	blx	r3
    chip_select_external_->SetHigh();
   17974:	9b03      	ldr	r3, [sp, #12]
   17976:	6bda      	ldr	r2, [r3, #60]	; 0x3c
   17978:	9b03      	ldr	r3, [sp, #12]
   1797a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1797c:	681b      	ldr	r3, [r3, #0]
   1797e:	330c      	adds	r3, #12
   17980:	681b      	ldr	r3, [r3, #0]
   17982:	4610      	mov	r0, r2
   17984:	4798      	blx	r3

    LOG_DEBUG("Setting SSP Clock Speed...");
    ssp_interface_->SetClock(false, false, 14, 2);  // 400kHz
   17986:	9b03      	ldr	r3, [sp, #12]
   17988:	6858      	ldr	r0, [r3, #4]
   1798a:	9b03      	ldr	r3, [sp, #12]
   1798c:	685b      	ldr	r3, [r3, #4]
   1798e:	681b      	ldr	r3, [r3, #0]
   17990:	3318      	adds	r3, #24
   17992:	681c      	ldr	r4, [r3, #0]
   17994:	2302      	movs	r3, #2
   17996:	9300      	str	r3, [sp, #0]
   17998:	230e      	movs	r3, #14
   1799a:	2200      	movs	r2, #0
   1799c:	2100      	movs	r1, #0
   1799e:	47a0      	blx	r4

    LOG_DEBUG("Setting Peripheral Mode...");
    ssp_interface_->SetPeripheralMode(Ssp::MasterSlaveMode::kMaster,
   179a0:	9b03      	ldr	r3, [sp, #12]
   179a2:	6858      	ldr	r0, [r3, #4]
   179a4:	9b03      	ldr	r3, [sp, #12]
   179a6:	685b      	ldr	r3, [r3, #4]
                                      Ssp::FrameMode::kSpi,
                                      Ssp::DataSize::kEight);
   179a8:	681b      	ldr	r3, [r3, #0]
   179aa:	3310      	adds	r3, #16
   179ac:	681c      	ldr	r4, [r3, #0]
    ssp_interface_->SetPeripheralMode(Ssp::MasterSlaveMode::kMaster,
   179ae:	2307      	movs	r3, #7
   179b0:	2200      	movs	r2, #0
   179b2:	2100      	movs	r1, #0
   179b4:	47a0      	blx	r4

    LOG_DEBUG("Starting SSP Peripheral...");
    ssp_interface_->Initialize();
   179b6:	9b03      	ldr	r3, [sp, #12]
   179b8:	685a      	ldr	r2, [r3, #4]
   179ba:	9b03      	ldr	r3, [sp, #12]
   179bc:	685b      	ldr	r3, [r3, #4]
   179be:	681b      	ldr	r3, [r3, #0]
   179c0:	681b      	ldr	r3, [r3, #0]
   179c2:	4610      	mov	r0, r2
   179c4:	4798      	blx	r3
   179c6:	462b      	mov	r3, r5
   179c8:	4619      	mov	r1, r3
   179ca:	4803      	ldr	r0, [pc, #12]	; (179d8 <Sd::Initialize()+0xac>)
   179cc:	f7fe fc90 	bl	162f0 <__cyg_profile_func_exit>
  }
   179d0:	bf00      	nop
   179d2:	b005      	add	sp, #20
   179d4:	bd30      	pop	{r4, r5, pc}
   179d6:	bf00      	nop
   179d8:	0001792d 	.word	0x0001792d

000179dc <Sd::Mount(SdInterface::CardInfo_t*)>:

  // Initialize SD Card
  // TODO(#349): Split method into smaller piece with single jobs
  bool Mount(CardInfo_t * sd) override
   179dc:	b530      	push	{r4, r5, lr}
   179de:	b08b      	sub	sp, #44	; 0x2c
   179e0:	4675      	mov	r5, lr
   179e2:	9003      	str	r0, [sp, #12]
   179e4:	9102      	str	r1, [sp, #8]
   179e6:	462b      	mov	r3, r5
   179e8:	4619      	mov	r1, r3
   179ea:	48a7      	ldr	r0, [pc, #668]	; (17c88 <Sd::Mount(SdInterface::CardInfo_t*)+0x2ac>)
   179ec:	f7fe fc6c 	bl	162c8 <__cyg_profile_func_enter>
  {
    uint8_t tries     = 0;
   179f0:	2300      	movs	r3, #0
   179f2:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    bool card_is_idle = false;
   179f6:	2300      	movs	r3, #0
   179f8:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26

    // Reset the card and force it to go to idle state at <400kHz with a
    // CMD0 + (active-low) CS
    LOG_DEBUG("Sending SD Card to Idle State...");
    sd->response.length = SendCmd(Command::kReset, 0x00000000,
                                  sd->response.data.byte, 100, KeepAlive::kYes);
   179fc:	9b03      	ldr	r3, [sp, #12]
   179fe:	681b      	ldr	r3, [r3, #0]
   17a00:	681c      	ldr	r4, [r3, #0]
    sd->response.length = SendCmd(Command::kReset, 0x00000000,
   17a02:	9b02      	ldr	r3, [sp, #8]
   17a04:	f103 0208 	add.w	r2, r3, #8
   17a08:	2301      	movs	r3, #1
   17a0a:	9301      	str	r3, [sp, #4]
   17a0c:	2364      	movs	r3, #100	; 0x64
   17a0e:	9300      	str	r3, [sp, #0]
   17a10:	4613      	mov	r3, r2
   17a12:	2200      	movs	r2, #0
   17a14:	2140      	movs	r1, #64	; 0x40
   17a16:	9803      	ldr	r0, [sp, #12]
   17a18:	47a0      	blx	r4
   17a1a:	4602      	mov	r2, r0
   17a1c:	9b02      	ldr	r3, [sp, #8]
   17a1e:	611a      	str	r2, [r3, #16]

    // Reset the card again to trigger SPI mode
    LOG_DEBUG("Initializing SPI mode...");
    do
    {
      tries++;
   17a20:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   17a24:	3301      	adds	r3, #1
   17a26:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
      sd->response.length = SendCmd(
          Command::kReset, 0x00, sd->response.data.byte, 100, KeepAlive::kYes);
   17a2a:	9b03      	ldr	r3, [sp, #12]
   17a2c:	681b      	ldr	r3, [r3, #0]
   17a2e:	681c      	ldr	r4, [r3, #0]
      sd->response.length = SendCmd(
   17a30:	9b02      	ldr	r3, [sp, #8]
   17a32:	f103 0208 	add.w	r2, r3, #8
   17a36:	2301      	movs	r3, #1
   17a38:	9301      	str	r3, [sp, #4]
   17a3a:	2364      	movs	r3, #100	; 0x64
   17a3c:	9300      	str	r3, [sp, #0]
   17a3e:	4613      	mov	r3, r2
   17a40:	2200      	movs	r2, #0
   17a42:	2140      	movs	r1, #64	; 0x40
   17a44:	9803      	ldr	r0, [sp, #12]
   17a46:	47a0      	blx	r4
   17a48:	4602      	mov	r2, r0
   17a4a:	9b02      	ldr	r3, [sp, #8]
   17a4c:	611a      	str	r2, [r3, #16]

      // Check if R1 response frame's bit 1 is set (to ensure that
      // card is in idle state)
      if (sd->response.data.byte[0] != 0xFF &&
   17a4e:	9b02      	ldr	r3, [sp, #8]
   17a50:	7a1b      	ldrb	r3, [r3, #8]
   17a52:	2bff      	cmp	r3, #255	; 0xff
   17a54:	d008      	beq.n	17a68 <Sd::Mount(SdInterface::CardInfo_t*)+0x8c>
          (sd->response.data.byte[0] & 0x01) == 0x01)
   17a56:	9b02      	ldr	r3, [sp, #8]
   17a58:	7a1b      	ldrb	r3, [r3, #8]
   17a5a:	f003 0301 	and.w	r3, r3, #1
      if (sd->response.data.byte[0] != 0xFF &&
   17a5e:	2b00      	cmp	r3, #0
   17a60:	d002      	beq.n	17a68 <Sd::Mount(SdInterface::CardInfo_t*)+0x8c>
      {
        // If it is, we can move on; otherwise, keep trying for a set
        // amount of tries
        card_is_idle = true;
   17a62:	2301      	movs	r3, #1
   17a64:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
      }
      Delay(10);
   17a68:	f04f 000a 	mov.w	r0, #10
   17a6c:	f04f 0100 	mov.w	r1, #0
   17a70:	f7f9 fa7a 	bl	10f68 <Delay(unsigned long long)>
    } while (tries < kBusTimeout && !card_is_idle);
   17a74:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   17a78:	2bf9      	cmp	r3, #249	; 0xf9
   17a7a:	d804      	bhi.n	17a86 <Sd::Mount(SdInterface::CardInfo_t*)+0xaa>
   17a7c:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
   17a80:	2b00      	cmp	r3, #0
   17a82:	d100      	bne.n	17a86 <Sd::Mount(SdInterface::CardInfo_t*)+0xaa>
    do
   17a84:	e7cc      	b.n	17a20 <Sd::Mount(SdInterface::CardInfo_t*)+0x44>
    LOG_DEBUG("%d tries", tries);
    if (tries >= kBusTimeout)
   17a86:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   17a8a:	2bf9      	cmp	r3, #249	; 0xf9
   17a8c:	d91b      	bls.n	17ac6 <Sd::Mount(SdInterface::CardInfo_t*)+0xea>
    {
      LOG_ERROR("Failed to initiate SPI mode within timeout. Aborting!");
   17a8e:	f240 13ff 	movw	r3, #511	; 0x1ff
   17a92:	4a7e      	ldr	r2, [pc, #504]	; (17c8c <Sd::Mount(SdInterface::CardInfo_t*)+0x2b0>)
   17a94:	497e      	ldr	r1, [pc, #504]	; (17c90 <Sd::Mount(SdInterface::CardInfo_t*)+0x2b4>)
   17a96:	487f      	ldr	r0, [pc, #508]	; (17c94 <Sd::Mount(SdInterface::CardInfo_t*)+0x2b8>)
   17a98:	f7ff fe96 	bl	177c8 <printf>
      sd->response.length = SendCmd(Command::kGarbage, 0xFFFFFFFF,
                                    sd->response.data.byte, 0, KeepAlive::kNo);
   17a9c:	9b03      	ldr	r3, [sp, #12]
   17a9e:	681b      	ldr	r3, [r3, #0]
   17aa0:	681c      	ldr	r4, [r3, #0]
      sd->response.length = SendCmd(Command::kGarbage, 0xFFFFFFFF,
   17aa2:	9b02      	ldr	r3, [sp, #8]
   17aa4:	f103 0208 	add.w	r2, r3, #8
   17aa8:	2300      	movs	r3, #0
   17aaa:	9301      	str	r3, [sp, #4]
   17aac:	2300      	movs	r3, #0
   17aae:	9300      	str	r3, [sp, #0]
   17ab0:	4613      	mov	r3, r2
   17ab2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   17ab6:	21ff      	movs	r1, #255	; 0xff
   17ab8:	9803      	ldr	r0, [sp, #12]
   17aba:	47a0      	blx	r4
   17abc:	4602      	mov	r2, r0
   17abe:	9b02      	ldr	r3, [sp, #8]
   17ac0:	611a      	str	r2, [r3, #16]
      return false;
   17ac2:	2400      	movs	r4, #0
   17ac4:	e10c      	b.n	17ce0 <Sd::Mount(SdInterface::CardInfo_t*)+0x304>
    }

    // Send the host's supported voltage (3.3V) and ask if the card
    // supports it
    LOG_DEBUG("Checking Current SD Card Voltage Level...");
    constexpr uint8_t kCheckPattern = 0xAB;
   17ac6:	23ab      	movs	r3, #171	; 0xab
   17ac8:	f88d 301f 	strb.w	r3, [sp, #31]
    uint64_t supported_voltage      = 0x00000001;
   17acc:	f04f 0301 	mov.w	r3, #1
   17ad0:	f04f 0400 	mov.w	r4, #0
   17ad4:	e9cd 3404 	strd	r3, r4, [sp, #16]
    sd->response.length =
        SendCmd(Command::kGetOp,
                static_cast<uint32_t>((supported_voltage << 8) | kCheckPattern),
                sd->response.data.byte, 100, KeepAlive::kYes);
   17ad8:	9b03      	ldr	r3, [sp, #12]
   17ada:	681b      	ldr	r3, [r3, #0]
   17adc:	681c      	ldr	r4, [r3, #0]
                static_cast<uint32_t>((supported_voltage << 8) | kCheckPattern),
   17ade:	9b04      	ldr	r3, [sp, #16]
   17ae0:	021b      	lsls	r3, r3, #8
        SendCmd(Command::kGetOp,
   17ae2:	f043 02ab 	orr.w	r2, r3, #171	; 0xab
   17ae6:	9b02      	ldr	r3, [sp, #8]
   17ae8:	f103 0108 	add.w	r1, r3, #8
   17aec:	2301      	movs	r3, #1
   17aee:	9301      	str	r3, [sp, #4]
   17af0:	2364      	movs	r3, #100	; 0x64
   17af2:	9300      	str	r3, [sp, #0]
   17af4:	460b      	mov	r3, r1
   17af6:	2148      	movs	r1, #72	; 0x48
   17af8:	9803      	ldr	r0, [sp, #12]
   17afa:	47a0      	blx	r4
   17afc:	4602      	mov	r2, r0
    sd->response.length =
   17afe:	9b02      	ldr	r3, [sp, #8]
   17b00:	611a      	str	r2, [r3, #16]
    if (sd->response.data.byte[4] != kCheckPattern)
   17b02:	9b02      	ldr	r3, [sp, #8]
   17b04:	7b1b      	ldrb	r3, [r3, #12]
   17b06:	2bab      	cmp	r3, #171	; 0xab
   17b08:	d01b      	beq.n	17b42 <Sd::Mount(SdInterface::CardInfo_t*)+0x166>
    {
      // If the last byte is not an exact echo of the LSB of the kGetOp
      // command's argument, this response is invalid
      LOG_ERROR("Response integrity check failed. Aborting!");
   17b0a:	f240 2312 	movw	r3, #530	; 0x212
   17b0e:	4a5f      	ldr	r2, [pc, #380]	; (17c8c <Sd::Mount(SdInterface::CardInfo_t*)+0x2b0>)
   17b10:	4961      	ldr	r1, [pc, #388]	; (17c98 <Sd::Mount(SdInterface::CardInfo_t*)+0x2bc>)
   17b12:	4862      	ldr	r0, [pc, #392]	; (17c9c <Sd::Mount(SdInterface::CardInfo_t*)+0x2c0>)
   17b14:	f7ff fe58 	bl	177c8 <printf>
      sd->response.length = SendCmd(Command::kGarbage, 0xFFFFFFFF,
                                    sd->response.data.byte, 0, KeepAlive::kNo);
   17b18:	9b03      	ldr	r3, [sp, #12]
   17b1a:	681b      	ldr	r3, [r3, #0]
   17b1c:	681c      	ldr	r4, [r3, #0]
      sd->response.length = SendCmd(Command::kGarbage, 0xFFFFFFFF,
   17b1e:	9b02      	ldr	r3, [sp, #8]
   17b20:	f103 0208 	add.w	r2, r3, #8
   17b24:	2300      	movs	r3, #0
   17b26:	9301      	str	r3, [sp, #4]
   17b28:	2300      	movs	r3, #0
   17b2a:	9300      	str	r3, [sp, #0]
   17b2c:	4613      	mov	r3, r2
   17b2e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   17b32:	21ff      	movs	r1, #255	; 0xff
   17b34:	9803      	ldr	r0, [sp, #12]
   17b36:	47a0      	blx	r4
   17b38:	4602      	mov	r2, r0
   17b3a:	9b02      	ldr	r3, [sp, #8]
   17b3c:	611a      	str	r2, [r3, #16]
      return false;
   17b3e:	2400      	movs	r4, #0
   17b40:	e0ce      	b.n	17ce0 <Sd::Mount(SdInterface::CardInfo_t*)+0x304>
    }
    else if (sd->response.data.byte[3] &
   17b42:	9b02      	ldr	r3, [sp, #8]
   17b44:	7adb      	ldrb	r3, [r3, #11]
   17b46:	4619      	mov	r1, r3
             (supported_voltage == static_cast<uint64_t>(0x00)))
   17b48:	9a04      	ldr	r2, [sp, #16]
   17b4a:	9b05      	ldr	r3, [sp, #20]
   17b4c:	4313      	orrs	r3, r2
   17b4e:	2b00      	cmp	r3, #0
   17b50:	bf0c      	ite	eq
   17b52:	2301      	moveq	r3, #1
   17b54:	2300      	movne	r3, #0
   17b56:	b2db      	uxtb	r3, r3
    else if (sd->response.data.byte[3] &
   17b58:	400b      	ands	r3, r1
   17b5a:	2b00      	cmp	r3, #0
   17b5c:	d01b      	beq.n	17b96 <Sd::Mount(SdInterface::CardInfo_t*)+0x1ba>
    {
      // If the 2nd-to-last byte of the reponse AND'ed with our host
      // device's supported voltage range is 0x00, the SD card doesn't
      // support our device's operating voltage
      LOG_ERROR("Unsupported voltage in use. Aborting!");
   17b5e:	f240 231d 	movw	r3, #541	; 0x21d
   17b62:	4a4a      	ldr	r2, [pc, #296]	; (17c8c <Sd::Mount(SdInterface::CardInfo_t*)+0x2b0>)
   17b64:	494e      	ldr	r1, [pc, #312]	; (17ca0 <Sd::Mount(SdInterface::CardInfo_t*)+0x2c4>)
   17b66:	484f      	ldr	r0, [pc, #316]	; (17ca4 <Sd::Mount(SdInterface::CardInfo_t*)+0x2c8>)
   17b68:	f7ff fe2e 	bl	177c8 <printf>
      sd->response.length = SendCmd(Command::kGarbage, 0xFFFFFFFF,
                                    sd->response.data.byte, 0, KeepAlive::kNo);
   17b6c:	9b03      	ldr	r3, [sp, #12]
   17b6e:	681b      	ldr	r3, [r3, #0]
   17b70:	681c      	ldr	r4, [r3, #0]
      sd->response.length = SendCmd(Command::kGarbage, 0xFFFFFFFF,
   17b72:	9b02      	ldr	r3, [sp, #8]
   17b74:	f103 0208 	add.w	r2, r3, #8
   17b78:	2300      	movs	r3, #0
   17b7a:	9301      	str	r3, [sp, #4]
   17b7c:	2300      	movs	r3, #0
   17b7e:	9300      	str	r3, [sp, #0]
   17b80:	4613      	mov	r3, r2
   17b82:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   17b86:	21ff      	movs	r1, #255	; 0xff
   17b88:	9803      	ldr	r0, [sp, #12]
   17b8a:	47a0      	blx	r4
   17b8c:	4602      	mov	r2, r0
   17b8e:	9b02      	ldr	r3, [sp, #8]
   17b90:	611a      	str	r2, [r3, #16]
      return false;
   17b92:	2400      	movs	r4, #0
   17b94:	e0a4      	b.n	17ce0 <Sd::Mount(SdInterface::CardInfo_t*)+0x304>
    }

    // Indicate that the host supports SDHC/SDXC and wait for card to
    // shift out of idle state
    LOG_DEBUG("Expressing High-Capacity SD Card Support...");
    tries = 0;
   17b96:	2300      	movs	r3, #0
   17b98:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    do
    {
      // Send host's operating conditions
      sd->response.length =
          SendCmd(Command::kInit, 0x40000000, sd->response.data.byte, 100,
                  KeepAlive::kYes);
   17b9c:	9b03      	ldr	r3, [sp, #12]
   17b9e:	681b      	ldr	r3, [r3, #0]
   17ba0:	681c      	ldr	r4, [r3, #0]
          SendCmd(Command::kInit, 0x40000000, sd->response.data.byte, 100,
   17ba2:	9b02      	ldr	r3, [sp, #8]
   17ba4:	f103 0208 	add.w	r2, r3, #8
   17ba8:	2301      	movs	r3, #1
   17baa:	9301      	str	r3, [sp, #4]
   17bac:	2364      	movs	r3, #100	; 0x64
   17bae:	9300      	str	r3, [sp, #0]
   17bb0:	4613      	mov	r3, r2
   17bb2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   17bb6:	2141      	movs	r1, #65	; 0x41
   17bb8:	9803      	ldr	r0, [sp, #12]
   17bba:	47a0      	blx	r4
   17bbc:	4602      	mov	r2, r0
      sd->response.length =
   17bbe:	9b02      	ldr	r3, [sp, #8]
   17bc0:	611a      	str	r2, [r3, #16]
      tries++;
   17bc2:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   17bc6:	3301      	adds	r3, #1
   17bc8:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    } while (tries < kBusTimeout && sd->response.data.byte[0] & 0x01);
   17bcc:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   17bd0:	2bf9      	cmp	r3, #249	; 0xf9
   17bd2:	d806      	bhi.n	17be2 <Sd::Mount(SdInterface::CardInfo_t*)+0x206>
   17bd4:	9b02      	ldr	r3, [sp, #8]
   17bd6:	7a1b      	ldrb	r3, [r3, #8]
   17bd8:	f003 0301 	and.w	r3, r3, #1
   17bdc:	2b00      	cmp	r3, #0
   17bde:	d000      	beq.n	17be2 <Sd::Mount(SdInterface::CardInfo_t*)+0x206>
    do
   17be0:	e7dc      	b.n	17b9c <Sd::Mount(SdInterface::CardInfo_t*)+0x1c0>
    if (tries == kBusTimeout)
   17be2:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   17be6:	2bfa      	cmp	r3, #250	; 0xfa
   17be8:	d11b      	bne.n	17c22 <Sd::Mount(SdInterface::CardInfo_t*)+0x246>
    {
      LOG_ERROR("SD Card timed out. Aborting!");
   17bea:	f240 2331 	movw	r3, #561	; 0x231
   17bee:	4a27      	ldr	r2, [pc, #156]	; (17c8c <Sd::Mount(SdInterface::CardInfo_t*)+0x2b0>)
   17bf0:	492d      	ldr	r1, [pc, #180]	; (17ca8 <Sd::Mount(SdInterface::CardInfo_t*)+0x2cc>)
   17bf2:	482e      	ldr	r0, [pc, #184]	; (17cac <Sd::Mount(SdInterface::CardInfo_t*)+0x2d0>)
   17bf4:	f7ff fde8 	bl	177c8 <printf>
      sd->response.length = SendCmd(Command::kGarbage, 0xFFFFFFFF,
                                    sd->response.data.byte, 0, KeepAlive::kNo);
   17bf8:	9b03      	ldr	r3, [sp, #12]
   17bfa:	681b      	ldr	r3, [r3, #0]
   17bfc:	681c      	ldr	r4, [r3, #0]
      sd->response.length = SendCmd(Command::kGarbage, 0xFFFFFFFF,
   17bfe:	9b02      	ldr	r3, [sp, #8]
   17c00:	f103 0208 	add.w	r2, r3, #8
   17c04:	2300      	movs	r3, #0
   17c06:	9301      	str	r3, [sp, #4]
   17c08:	2300      	movs	r3, #0
   17c0a:	9300      	str	r3, [sp, #0]
   17c0c:	4613      	mov	r3, r2
   17c0e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   17c12:	21ff      	movs	r1, #255	; 0xff
   17c14:	9803      	ldr	r0, [sp, #12]
   17c16:	47a0      	blx	r4
   17c18:	4602      	mov	r2, r0
   17c1a:	9b02      	ldr	r3, [sp, #8]
   17c1c:	611a      	str	r2, [r3, #16]
      return false;
   17c1e:	2400      	movs	r4, #0
   17c20:	e05e      	b.n	17ce0 <Sd::Mount(SdInterface::CardInfo_t*)+0x304>
    // After card is ready, acquire card capacity info using kGetOcr a
    // second time
    LOG_DEBUG("Reading Card Capacity Information...");
    // Read CCS
    sd->response.length = SendCmd(Command::kGetOcr, 0x00,
                                  sd->response.data.byte, 100, KeepAlive::kYes);
   17c22:	9b03      	ldr	r3, [sp, #12]
   17c24:	681b      	ldr	r3, [r3, #0]
   17c26:	681c      	ldr	r4, [r3, #0]
    sd->response.length = SendCmd(Command::kGetOcr, 0x00,
   17c28:	9b02      	ldr	r3, [sp, #8]
   17c2a:	f103 0208 	add.w	r2, r3, #8
   17c2e:	2301      	movs	r3, #1
   17c30:	9301      	str	r3, [sp, #4]
   17c32:	2364      	movs	r3, #100	; 0x64
   17c34:	9300      	str	r3, [sp, #0]
   17c36:	4613      	mov	r3, r2
   17c38:	2200      	movs	r2, #0
   17c3a:	217a      	movs	r1, #122	; 0x7a
   17c3c:	9803      	ldr	r0, [sp, #12]
   17c3e:	47a0      	blx	r4
   17c40:	4602      	mov	r2, r0
   17c42:	9b02      	ldr	r3, [sp, #8]
   17c44:	611a      	str	r2, [r3, #16]
    if (sd->response.data.byte[1] & 0x40)
   17c46:	9b02      	ldr	r3, [sp, #8]
   17c48:	7a5b      	ldrb	r3, [r3, #9]
   17c4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
   17c4e:	2b00      	cmp	r3, #0
   17c50:	d003      	beq.n	17c5a <Sd::Mount(SdInterface::CardInfo_t*)+0x27e>
    {
      // The card is either high or extended capacity
      LOG_DEBUG("SD Card is HC/XC");
      sd->type = Type::kSDHC;
   17c52:	9b02      	ldr	r3, [sp, #8]
   17c54:	2201      	movs	r2, #1
   17c56:	605a      	str	r2, [r3, #4]
   17c58:	e002      	b.n	17c60 <Sd::Mount(SdInterface::CardInfo_t*)+0x284>
    }
    else
    {
      // The card is standard capacity
      LOG_DEBUG("SD Card is SC");
      sd->type = Type::kSDSC;
   17c5a:	9b02      	ldr	r3, [sp, #8]
   17c5c:	2200      	movs	r2, #0
   17c5e:	605a      	str	r2, [r3, #4]
    }

    // Store OCR information
    for (int i = 0; i < 4; i++)
   17c60:	2300      	movs	r3, #0
   17c62:	9308      	str	r3, [sp, #32]
   17c64:	9b08      	ldr	r3, [sp, #32]
   17c66:	2b03      	cmp	r3, #3
   17c68:	dc22      	bgt.n	17cb0 <Sd::Mount(SdInterface::CardInfo_t*)+0x2d4>
    {
      // ensure OCR doesn't capture the R1 section of the response
      sd->ocr.byte[i] = sd->response.data.byte[i + 1];
   17c6a:	9b08      	ldr	r3, [sp, #32]
   17c6c:	3301      	adds	r3, #1
   17c6e:	9a02      	ldr	r2, [sp, #8]
   17c70:	4413      	add	r3, r2
   17c72:	7a19      	ldrb	r1, [r3, #8]
   17c74:	9a02      	ldr	r2, [sp, #8]
   17c76:	9b08      	ldr	r3, [sp, #32]
   17c78:	4413      	add	r3, r2
   17c7a:	460a      	mov	r2, r1
   17c7c:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < 4; i++)
   17c7e:	9b08      	ldr	r3, [sp, #32]
   17c80:	3301      	adds	r3, #1
   17c82:	9308      	str	r3, [sp, #32]
   17c84:	e7ee      	b.n	17c64 <Sd::Mount(SdInterface::CardInfo_t*)+0x288>
   17c86:	bf00      	nop
   17c88:	000179dd 	.word	0x000179dd
   17c8c:	0001b7a4 	.word	0x0001b7a4
   17c90:	0001b6b4 	.word	0x0001b6b4
   17c94:	0001ad48 	.word	0x0001ad48
   17c98:	0001b6bc 	.word	0x0001b6bc
   17c9c:	0001adb8 	.word	0x0001adb8
   17ca0:	0001b6c4 	.word	0x0001b6c4
   17ca4:	0001ae1c 	.word	0x0001ae1c
   17ca8:	0001b6cc 	.word	0x0001b6cc
   17cac:	0001ae7c 	.word	0x0001ae7c
    }

    // If card is SDSC, manually set its block size
    if (sd->type == Type::kSDSC)
   17cb0:	9b02      	ldr	r3, [sp, #8]
   17cb2:	685b      	ldr	r3, [r3, #4]
   17cb4:	2b00      	cmp	r3, #0
   17cb6:	d112      	bne.n	17cde <Sd::Mount(SdInterface::CardInfo_t*)+0x302>
    {
      // Send requested byte size
      sd->response.length =
          SendCmd(Command::kChgBlkLen, static_cast<uint32_t>(kBlockSize),
                  sd->response.data.byte, 0, KeepAlive::kYes);
   17cb8:	9b03      	ldr	r3, [sp, #12]
   17cba:	681b      	ldr	r3, [r3, #0]
   17cbc:	681c      	ldr	r4, [r3, #0]
          SendCmd(Command::kChgBlkLen, static_cast<uint32_t>(kBlockSize),
   17cbe:	9b02      	ldr	r3, [sp, #8]
   17cc0:	f103 0208 	add.w	r2, r3, #8
   17cc4:	2301      	movs	r3, #1
   17cc6:	9301      	str	r3, [sp, #4]
   17cc8:	2300      	movs	r3, #0
   17cca:	9300      	str	r3, [sp, #0]
   17ccc:	4613      	mov	r3, r2
   17cce:	f44f 7200 	mov.w	r2, #512	; 0x200
   17cd2:	2150      	movs	r1, #80	; 0x50
   17cd4:	9803      	ldr	r0, [sp, #12]
   17cd6:	47a0      	blx	r4
   17cd8:	4602      	mov	r2, r0
      sd->response.length =
   17cda:	9b02      	ldr	r3, [sp, #8]
   17cdc:	611a      	str	r2, [r3, #16]
    }

    return true;
   17cde:	2401      	movs	r4, #1
   17ce0:	462b      	mov	r3, r5
   17ce2:	4619      	mov	r1, r3
   17ce4:	4803      	ldr	r0, [pc, #12]	; (17cf4 <Sd::Mount(SdInterface::CardInfo_t*)+0x318>)
   17ce6:	f7fe fb03 	bl	162f0 <__cyg_profile_func_exit>
   17cea:	4623      	mov	r3, r4
  }
   17cec:	4618      	mov	r0, r3
   17cee:	b00b      	add	sp, #44	; 0x2c
   17cf0:	bd30      	pop	{r4, r5, pc}
   17cf2:	bf00      	nop
   17cf4:	000179dd 	.word	0x000179dd

00017cf8 <Sd::ToBool(bool)>:

  // Returns string to represent a boolean value
  const char * ToBool(bool condition)
   17cf8:	b530      	push	{r4, r5, lr}
   17cfa:	b083      	sub	sp, #12
   17cfc:	4675      	mov	r5, lr
   17cfe:	9001      	str	r0, [sp, #4]
   17d00:	460b      	mov	r3, r1
   17d02:	f88d 3003 	strb.w	r3, [sp, #3]
   17d06:	462b      	mov	r3, r5
   17d08:	4619      	mov	r1, r3
   17d0a:	4809      	ldr	r0, [pc, #36]	; (17d30 <Sd::ToBool(bool)+0x38>)
   17d0c:	f7fe fadc 	bl	162c8 <__cyg_profile_func_enter>
  {
    return (condition) ? "true" : "false";
   17d10:	f89d 3003 	ldrb.w	r3, [sp, #3]
   17d14:	2b00      	cmp	r3, #0
   17d16:	d001      	beq.n	17d1c <Sd::ToBool(bool)+0x24>
   17d18:	4c06      	ldr	r4, [pc, #24]	; (17d34 <Sd::ToBool(bool)+0x3c>)
   17d1a:	e000      	b.n	17d1e <Sd::ToBool(bool)+0x26>
   17d1c:	4c06      	ldr	r4, [pc, #24]	; (17d38 <Sd::ToBool(bool)+0x40>)
   17d1e:	462b      	mov	r3, r5
   17d20:	4619      	mov	r1, r3
   17d22:	4803      	ldr	r0, [pc, #12]	; (17d30 <Sd::ToBool(bool)+0x38>)
   17d24:	f7fe fae4 	bl	162f0 <__cyg_profile_func_exit>
   17d28:	4623      	mov	r3, r4
  }
   17d2a:	4618      	mov	r0, r3
   17d2c:	b003      	add	sp, #12
   17d2e:	bd30      	pop	{r4, r5, pc}
   17d30:	00017cf9 	.word	0x00017cf9
   17d34:	0001aed4 	.word	0x0001aed4
   17d38:	0001aedc 	.word	0x0001aedc

00017d3c <Sd::WaitToReadBlock()>:

  // Waits for the card to respond after a single or multi block read cmd is
  // sent.
  void WaitToReadBlock()
   17d3c:	b510      	push	{r4, lr}
   17d3e:	b084      	sub	sp, #16
   17d40:	4674      	mov	r4, lr
   17d42:	9001      	str	r0, [sp, #4]
   17d44:	4623      	mov	r3, r4
   17d46:	4619      	mov	r1, r3
   17d48:	4814      	ldr	r0, [pc, #80]	; (17d9c <Sd::WaitToReadBlock()+0x60>)
   17d4a:	f7fe fabd 	bl	162c8 <__cyg_profile_func_enter>
    // Bit 4 -->  If set, card is locked
    // Bit 3 -->  If set, address is out or range
    // Bit 2 -->  If set, card ECC failed
    // Bit 1 -->  If set, CC error occurred
    // Bit 0 -->  If set, a generic error occurred
    uint8_t wait_byte = 0x00;
   17d4e:	2300      	movs	r3, #0
   17d50:	f88d 300f 	strb.w	r3, [sp, #15]
    do
    {
      wait_byte = static_cast<uint8_t>(ssp_interface_->Transfer(0xFF));
   17d54:	9b01      	ldr	r3, [sp, #4]
   17d56:	685a      	ldr	r2, [r3, #4]
   17d58:	9b01      	ldr	r3, [sp, #4]
   17d5a:	685b      	ldr	r3, [r3, #4]
   17d5c:	681b      	ldr	r3, [r3, #0]
   17d5e:	3308      	adds	r3, #8
   17d60:	681b      	ldr	r3, [r3, #0]
   17d62:	21ff      	movs	r1, #255	; 0xff
   17d64:	4610      	mov	r0, r2
   17d66:	4798      	blx	r3
   17d68:	4603      	mov	r3, r0
   17d6a:	f88d 300f 	strb.w	r3, [sp, #15]
    } while (wait_byte != 0xFE && (wait_byte & 0xE0) != 0x00);
   17d6e:	f89d 300f 	ldrb.w	r3, [sp, #15]
   17d72:	2bfe      	cmp	r3, #254	; 0xfe
   17d74:	d006      	beq.n	17d84 <Sd::WaitToReadBlock()+0x48>
   17d76:	f89d 300f 	ldrb.w	r3, [sp, #15]
   17d7a:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
   17d7e:	2b00      	cmp	r3, #0
   17d80:	d000      	beq.n	17d84 <Sd::WaitToReadBlock()+0x48>
    do
   17d82:	e7e7      	b.n	17d54 <Sd::WaitToReadBlock()+0x18>

    // DEBUG: Check the value of the wait byte
    if (wait_byte == 0xFE)
   17d84:	f89d 300f 	ldrb.w	r3, [sp, #15]
   17d88:	2bfe      	cmp	r3, #254	; 0xfe
   17d8a:	4623      	mov	r3, r4
   17d8c:	4619      	mov	r1, r3
   17d8e:	4803      	ldr	r0, [pc, #12]	; (17d9c <Sd::WaitToReadBlock()+0x60>)
   17d90:	f7fe faae 	bl	162f0 <__cyg_profile_func_exit>
      LOG_DEBUG("Addr Out of Range?: %s", ToBool(wait_byte & 0x08));
      LOG_DEBUG("Card ECC Failed?: %s", ToBool(wait_byte & 0x04));
      LOG_DEBUG("CC Error?: %s", ToBool(wait_byte & 0x02));
      LOG_DEBUG("Error?: %s", ToBool(wait_byte & 0x01));
    }
  }
   17d94:	bf00      	nop
   17d96:	b004      	add	sp, #16
   17d98:	bd10      	pop	{r4, pc}
   17d9a:	bf00      	nop
   17d9c:	00017d3d 	.word	0x00017d3d

00017da0 <Sd::WaitWhileBusy()>:

  // Waits for the card to be ready to receive a new block after one has
  // been written or erased
  void WaitWhileBusy()
   17da0:	b510      	push	{r4, lr}
   17da2:	b084      	sub	sp, #16
   17da4:	4674      	mov	r4, lr
   17da6:	9001      	str	r0, [sp, #4]
   17da8:	4623      	mov	r3, r4
   17daa:	4619      	mov	r1, r3
   17dac:	480f      	ldr	r0, [pc, #60]	; (17dec <Sd::WaitWhileBusy()+0x4c>)
   17dae:	f7fe fa8b 	bl	162c8 <__cyg_profile_func_enter>
  {
    // Wait for the card to finish programming (i.e. when the
    // bytes return to 0xFF)
    uint8_t busy_byte = 0x00;
   17db2:	2300      	movs	r3, #0
   17db4:	f88d 300f 	strb.w	r3, [sp, #15]
    LOG_DEBUG("Card is busy. Waiting for it to finish...");
    do
    {
      busy_byte = static_cast<uint8_t>(ssp_interface_->Transfer(0xFF));
   17db8:	9b01      	ldr	r3, [sp, #4]
   17dba:	685a      	ldr	r2, [r3, #4]
   17dbc:	9b01      	ldr	r3, [sp, #4]
   17dbe:	685b      	ldr	r3, [r3, #4]
   17dc0:	681b      	ldr	r3, [r3, #0]
   17dc2:	3308      	adds	r3, #8
   17dc4:	681b      	ldr	r3, [r3, #0]
   17dc6:	21ff      	movs	r1, #255	; 0xff
   17dc8:	4610      	mov	r0, r2
   17dca:	4798      	blx	r3
   17dcc:	4603      	mov	r3, r0
   17dce:	f88d 300f 	strb.w	r3, [sp, #15]
    } while (busy_byte != 0xFF);
   17dd2:	f89d 300f 	ldrb.w	r3, [sp, #15]
   17dd6:	2bff      	cmp	r3, #255	; 0xff
   17dd8:	d000      	beq.n	17ddc <Sd::WaitWhileBusy()+0x3c>
    do
   17dda:	e7ed      	b.n	17db8 <Sd::WaitWhileBusy()+0x18>
   17ddc:	4623      	mov	r3, r4
   17dde:	4619      	mov	r1, r3
   17de0:	4802      	ldr	r0, [pc, #8]	; (17dec <Sd::WaitWhileBusy()+0x4c>)
   17de2:	f7fe fa85 	bl	162f0 <__cyg_profile_func_exit>
    LOG_DEBUG("Card finished!");
  }
   17de6:	bf00      	nop
   17de8:	b004      	add	sp, #16
   17dea:	bd10      	pop	{r4, pc}
   17dec:	00017da1 	.word	0x00017da1

00017df0 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)>:

  // Read any number of blocks from the SD card
  uint8_t ReadBlock(uint32_t address, uint8_t * array,
   17df0:	b530      	push	{r4, r5, lr}
   17df2:	f5ad 7d13 	sub.w	sp, sp, #588	; 0x24c
   17df6:	4675      	mov	r5, lr
   17df8:	ac05      	add	r4, sp, #20
   17dfa:	6020      	str	r0, [r4, #0]
   17dfc:	a804      	add	r0, sp, #16
   17dfe:	6001      	str	r1, [r0, #0]
   17e00:	a903      	add	r1, sp, #12
   17e02:	600a      	str	r2, [r1, #0]
   17e04:	aa02      	add	r2, sp, #8
   17e06:	6013      	str	r3, [r2, #0]
   17e08:	462b      	mov	r3, r5
   17e0a:	4619      	mov	r1, r3
   17e0c:	487d      	ldr	r0, [pc, #500]	; (18004 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x214>)
   17e0e:	f7fe fa5b 	bl	162c8 <__cyg_profile_func_enter>
                    uint32_t blocks = 1) override
  {
    LOG_DEBUG("Block %" PRId32 " :: 0x%" PRIX32 " for %" PRId32 " blocks",
              address, address, blocks);
    // Wait for a previous command to finish
    WaitWhileBusy();
   17e12:	ab05      	add	r3, sp, #20
   17e14:	6818      	ldr	r0, [r3, #0]
   17e16:	f7ff ffc3 	bl	17da0 <Sd::WaitWhileBusy()>

    // Create a temporary storage location to store sd command responses
    Sd::CardInfo_t sd;
    bool payload_had_bad_crc = false;
   17e1a:	2300      	movs	r3, #0
   17e1c:	f88d 3247 	strb.w	r3, [sp, #583]	; 0x247

    // Create a temporary place to store blocks of 512 bytes (this is now
    // possible because the constructor enforces block size cross-
    // compatibility)
    uint8_t block_store[512] = { 0 };
   17e20:	ab06      	add	r3, sp, #24
   17e22:	4618      	mov	r0, r3
   17e24:	f44f 7300 	mov.w	r3, #512	; 0x200
   17e28:	461a      	mov	r2, r3
   17e2a:	2100      	movs	r1, #0
   17e2c:	f001 f8fa 	bl	19024 <memset>

    // Determine appropriate command to send
    Command read_cmd;
    if (blocks > 1)
   17e30:	ab02      	add	r3, sp, #8
   17e32:	681b      	ldr	r3, [r3, #0]
   17e34:	2b01      	cmp	r3, #1
   17e36:	d902      	bls.n	17e3e <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x4e>
    {
      read_cmd = Command::kReadMulti;
   17e38:	2352      	movs	r3, #82	; 0x52
   17e3a:	9390      	str	r3, [sp, #576]	; 0x240
   17e3c:	e001      	b.n	17e42 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x52>
    }
    else
    {
      read_cmd = Command::kReadSingle;
   17e3e:	2351      	movs	r3, #81	; 0x51
   17e40:	9390      	str	r3, [sp, #576]	; 0x240
    }

    // Send initial read command
    sd.response.length =
        SendCmd(read_cmd, address, sd.response.data.byte, 100, KeepAlive::kYes);
   17e42:	ab05      	add	r3, sp, #20
   17e44:	681b      	ldr	r3, [r3, #0]
   17e46:	681b      	ldr	r3, [r3, #0]
   17e48:	681c      	ldr	r4, [r3, #0]
   17e4a:	ab86      	add	r3, sp, #536	; 0x218
   17e4c:	f103 0108 	add.w	r1, r3, #8
   17e50:	aa04      	add	r2, sp, #16
   17e52:	a805      	add	r0, sp, #20
   17e54:	2301      	movs	r3, #1
   17e56:	9301      	str	r3, [sp, #4]
   17e58:	2364      	movs	r3, #100	; 0x64
   17e5a:	9300      	str	r3, [sp, #0]
   17e5c:	460b      	mov	r3, r1
   17e5e:	6812      	ldr	r2, [r2, #0]
   17e60:	9990      	ldr	r1, [sp, #576]	; 0x240
   17e62:	6800      	ldr	r0, [r0, #0]
   17e64:	47a0      	blx	r4
   17e66:	4603      	mov	r3, r0
    sd.response.length =
   17e68:	938a      	str	r3, [sp, #552]	; 0x228
    LOG_DEBUG("Sent Read Cmd");
    LOG_DEBUG("[R1 Response:0x%02X]", sd.response.data.byte[0]);

    // Check if the command was acknowledged properly
    if (sd.response.data.byte[0] == 0x00)
   17e6a:	f89d 3220 	ldrb.w	r3, [sp, #544]	; 0x220
   17e6e:	2b00      	cmp	r3, #0
   17e70:	f040 80d8 	bne.w	18024 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x234>
    {
      // For every block requested
      uint16_t block_count;
      for (block_count = 0; block_count < blocks; block_count++)
   17e74:	2300      	movs	r3, #0
   17e76:	f8ad 323e 	strh.w	r3, [sp, #574]	; 0x23e
   17e7a:	f8bd 323e 	ldrh.w	r3, [sp, #574]	; 0x23e
   17e7e:	aa02      	add	r2, sp, #8
   17e80:	6812      	ldr	r2, [r2, #0]
   17e82:	429a      	cmp	r2, r3
   17e84:	f240 8099 	bls.w	17fba <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x1ca>
      {
        // Wait for the card to respond with a ready signal
        WaitToReadBlock();
   17e88:	ab05      	add	r3, sp, #20
   17e8a:	6818      	ldr	r0, [r3, #0]
   17e8c:	f7ff ff56 	bl	17d3c <Sd::WaitToReadBlock()>

        // Calculate the block address offset
        uint16_t block_addr_offset =
   17e90:	f8bd 323e 	ldrh.w	r3, [sp, #574]	; 0x23e
   17e94:	025b      	lsls	r3, r3, #9
   17e96:	f8ad 323a 	strh.w	r3, [sp, #570]	; 0x23a
            static_cast<uint16_t>(block_count * kBlockSize);

        // Read all the bytes of a single block
        for (uint16_t byte_count = 0; byte_count < kBlockSize; byte_count++)
   17e9a:	2300      	movs	r3, #0
   17e9c:	f8ad 323c 	strh.w	r3, [sp, #572]	; 0x23c
   17ea0:	f8bd 323c 	ldrh.w	r3, [sp, #572]	; 0x23c
   17ea4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   17ea8:	d22b      	bcs.n	17f02 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x112>
        {
          // Calculate the current storage index
          uint16_t storage_index =
   17eaa:	f8bd 223a 	ldrh.w	r2, [sp, #570]	; 0x23a
   17eae:	f8bd 323c 	ldrh.w	r3, [sp, #572]	; 0x23c
   17eb2:	4413      	add	r3, r2
   17eb4:	f8ad 3238 	strh.w	r3, [sp, #568]	; 0x238
              static_cast<uint16_t>(block_addr_offset + byte_count);

          // Transfer a byte to read a block from the SD card
          array[storage_index] =
              static_cast<uint8_t>(ssp_interface_->Transfer(0xFF));
   17eb8:	ab05      	add	r3, sp, #20
   17eba:	681b      	ldr	r3, [r3, #0]
   17ebc:	685a      	ldr	r2, [r3, #4]
   17ebe:	ab05      	add	r3, sp, #20
   17ec0:	681b      	ldr	r3, [r3, #0]
   17ec2:	685b      	ldr	r3, [r3, #4]
   17ec4:	681b      	ldr	r3, [r3, #0]
   17ec6:	3308      	adds	r3, #8
   17ec8:	681b      	ldr	r3, [r3, #0]
   17eca:	21ff      	movs	r1, #255	; 0xff
   17ecc:	4610      	mov	r0, r2
   17ece:	4798      	blx	r3
   17ed0:	4603      	mov	r3, r0
   17ed2:	4619      	mov	r1, r3
          array[storage_index] =
   17ed4:	f8bd 3238 	ldrh.w	r3, [sp, #568]	; 0x238
   17ed8:	aa03      	add	r2, sp, #12
   17eda:	6812      	ldr	r2, [r2, #0]
   17edc:	4413      	add	r3, r2
   17ede:	b2ca      	uxtb	r2, r1
   17ee0:	701a      	strb	r2, [r3, #0]

          // Copy that byte into our temporary block store
          block_store[byte_count] = array[storage_index];
   17ee2:	f8bd 3238 	ldrh.w	r3, [sp, #568]	; 0x238
   17ee6:	aa03      	add	r2, sp, #12
   17ee8:	6812      	ldr	r2, [r2, #0]
   17eea:	441a      	add	r2, r3
   17eec:	f8bd 323c 	ldrh.w	r3, [sp, #572]	; 0x23c
   17ef0:	7811      	ldrb	r1, [r2, #0]
   17ef2:	aa06      	add	r2, sp, #24
   17ef4:	54d1      	strb	r1, [r2, r3]
        for (uint16_t byte_count = 0; byte_count < kBlockSize; byte_count++)
   17ef6:	f8bd 323c 	ldrh.w	r3, [sp, #572]	; 0x23c
   17efa:	3301      	adds	r3, #1
   17efc:	f8ad 323c 	strh.w	r3, [sp, #572]	; 0x23c
   17f00:	e7ce      	b.n	17ea0 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0xb0>
        }

        // Then read the block's 16-bit CRC (i.e. read two bytes)
        uint16_t block_crc =
            static_cast<uint16_t>((ssp_interface_->Transfer(0xFF) << 8) |
   17f02:	ab05      	add	r3, sp, #20
   17f04:	681b      	ldr	r3, [r3, #0]
   17f06:	685a      	ldr	r2, [r3, #4]
   17f08:	ab05      	add	r3, sp, #20
   17f0a:	681b      	ldr	r3, [r3, #0]
   17f0c:	685b      	ldr	r3, [r3, #4]
   17f0e:	681b      	ldr	r3, [r3, #0]
   17f10:	3308      	adds	r3, #8
   17f12:	681b      	ldr	r3, [r3, #0]
   17f14:	21ff      	movs	r1, #255	; 0xff
   17f16:	4610      	mov	r0, r2
   17f18:	4798      	blx	r3
   17f1a:	4603      	mov	r3, r0
   17f1c:	021b      	lsls	r3, r3, #8
   17f1e:	b21c      	sxth	r4, r3
                                  ssp_interface_->Transfer(0xFF));
   17f20:	ab05      	add	r3, sp, #20
   17f22:	681b      	ldr	r3, [r3, #0]
   17f24:	685a      	ldr	r2, [r3, #4]
   17f26:	ab05      	add	r3, sp, #20
   17f28:	681b      	ldr	r3, [r3, #0]
   17f2a:	685b      	ldr	r3, [r3, #4]
   17f2c:	681b      	ldr	r3, [r3, #0]
   17f2e:	3308      	adds	r3, #8
   17f30:	681b      	ldr	r3, [r3, #0]
   17f32:	21ff      	movs	r1, #255	; 0xff
   17f34:	4610      	mov	r0, r2
   17f36:	4798      	blx	r3
   17f38:	4603      	mov	r3, r0
   17f3a:	b21b      	sxth	r3, r3
            static_cast<uint16_t>((ssp_interface_->Transfer(0xFF) << 8) |
   17f3c:	4323      	orrs	r3, r4
   17f3e:	b21b      	sxth	r3, r3
                                  ssp_interface_->Transfer(0xFF));
   17f40:	f8ad 3236 	strh.w	r3, [sp, #566]	; 0x236

        // Run a CRC-16 calculation on the message to determine if the
        // received CRCs match (i.e. checks if the block data is
        // valid).
        uint16_t expected_block_crc = GetCrc16(block_store, 512);
   17f44:	ab05      	add	r3, sp, #20
   17f46:	681b      	ldr	r3, [r3, #0]
   17f48:	681b      	ldr	r3, [r3, #0]
   17f4a:	3320      	adds	r3, #32
   17f4c:	681b      	ldr	r3, [r3, #0]
   17f4e:	a906      	add	r1, sp, #24
   17f50:	a805      	add	r0, sp, #20
   17f52:	f44f 7200 	mov.w	r2, #512	; 0x200
   17f56:	6800      	ldr	r0, [r0, #0]
   17f58:	4798      	blx	r3
   17f5a:	4603      	mov	r3, r0
   17f5c:	f8ad 3234 	strh.w	r3, [sp, #564]	; 0x234

        LOG_DEBUG("Block #%d @ 0x%" PRIX32 " acquired", block_count, address);
        LOG_DEBUG("Expecting block crc16 '0x%04X'", expected_block_crc);
        LOG_DEBUG("Got '0x%04X'", block_crc);
        if (expected_block_crc != block_crc)
   17f60:	f8bd 2234 	ldrh.w	r2, [sp, #564]	; 0x234
   17f64:	f8bd 3236 	ldrh.w	r3, [sp, #566]	; 0x236
   17f68:	429a      	cmp	r2, r3
   17f6a:	d020      	beq.n	17fae <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x1be>
        {
          // If they do not match, set the bad crc status
          payload_had_bad_crc = true;
   17f6c:	2301      	movs	r3, #1
   17f6e:	f88d 3247 	strb.w	r3, [sp, #583]	; 0x247
          LOG_ERROR("While Reading Block #%d CRC16:", block_count);
   17f72:	f8bd 323e 	ldrh.w	r3, [sp, #574]	; 0x23e
   17f76:	9300      	str	r3, [sp, #0]
   17f78:	f240 23ed 	movw	r3, #749	; 0x2ed
   17f7c:	4a22      	ldr	r2, [pc, #136]	; (18008 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x218>)
   17f7e:	4923      	ldr	r1, [pc, #140]	; (1800c <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x21c>)
   17f80:	4823      	ldr	r0, [pc, #140]	; (18010 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x220>)
   17f82:	f7ff fc21 	bl	177c8 <printf>
          LOG_ERROR("Expected '0x%04X'", expected_block_crc);
   17f86:	f8bd 3234 	ldrh.w	r3, [sp, #564]	; 0x234
   17f8a:	9300      	str	r3, [sp, #0]
   17f8c:	f240 23ee 	movw	r3, #750	; 0x2ee
   17f90:	4a1d      	ldr	r2, [pc, #116]	; (18008 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x218>)
   17f92:	4920      	ldr	r1, [pc, #128]	; (18014 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x224>)
   17f94:	4820      	ldr	r0, [pc, #128]	; (18018 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x228>)
   17f96:	f7ff fc17 	bl	177c8 <printf>
          LOG_ERROR("Got '0x%04X'", block_crc);
   17f9a:	f8bd 3236 	ldrh.w	r3, [sp, #566]	; 0x236
   17f9e:	9300      	str	r3, [sp, #0]
   17fa0:	f240 23ef 	movw	r3, #751	; 0x2ef
   17fa4:	4a18      	ldr	r2, [pc, #96]	; (18008 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x218>)
   17fa6:	491d      	ldr	r1, [pc, #116]	; (1801c <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x22c>)
   17fa8:	481d      	ldr	r0, [pc, #116]	; (18020 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x230>)
   17faa:	f7ff fc0d 	bl	177c8 <printf>
      for (block_count = 0; block_count < blocks; block_count++)
   17fae:	f8bd 323e 	ldrh.w	r3, [sp, #574]	; 0x23e
   17fb2:	3301      	adds	r3, #1
   17fb4:	f8ad 323e 	strh.w	r3, [sp, #574]	; 0x23e
   17fb8:	e75f      	b.n	17e7a <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x8a>
        }
      }

      // After reading multiple blocks, send the stop command to terminate the
      // transaction (i.e. no keep-alive)
      if (blocks > 1)
   17fba:	ab02      	add	r3, sp, #8
   17fbc:	681b      	ldr	r3, [r3, #0]
   17fbe:	2b01      	cmp	r3, #1
   17fc0:	d913      	bls.n	17fea <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x1fa>
      {
        sd.response.length =
            SendCmd(Command::kStopTrans, 0xFFFFFFFF, sd.response.data.byte, 100,
                    KeepAlive::kNo);
   17fc2:	ab05      	add	r3, sp, #20
   17fc4:	681b      	ldr	r3, [r3, #0]
   17fc6:	681b      	ldr	r3, [r3, #0]
   17fc8:	681c      	ldr	r4, [r3, #0]
            SendCmd(Command::kStopTrans, 0xFFFFFFFF, sd.response.data.byte, 100,
   17fca:	ab86      	add	r3, sp, #536	; 0x218
   17fcc:	f103 0208 	add.w	r2, r3, #8
   17fd0:	a805      	add	r0, sp, #20
   17fd2:	2300      	movs	r3, #0
   17fd4:	9301      	str	r3, [sp, #4]
   17fd6:	2364      	movs	r3, #100	; 0x64
   17fd8:	9300      	str	r3, [sp, #0]
   17fda:	4613      	mov	r3, r2
   17fdc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   17fe0:	214c      	movs	r1, #76	; 0x4c
   17fe2:	6800      	ldr	r0, [r0, #0]
   17fe4:	47a0      	blx	r4
   17fe6:	4603      	mov	r3, r0
        sd.response.length =
   17fe8:	938a      	str	r3, [sp, #552]	; 0x228
      LOG_DEBUG("Response Byte");
      LOG_DEBUG("0x%02X", sd.response.data.byte[0]);

      // If there was a bad crc from the payload, manually set the
      // CRC error flag in the command response byte
      if (payload_had_bad_crc)
   17fea:	f89d 3247 	ldrb.w	r3, [sp, #583]	; 0x247
   17fee:	2b00      	cmp	r3, #0
   17ff0:	f000 80c0 	beq.w	18174 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x384>
      {
        sd.response.data.byte[0] |= 0x08;
   17ff4:	f89d 3220 	ldrb.w	r3, [sp, #544]	; 0x220
   17ff8:	f043 0308 	orr.w	r3, r3, #8
   17ffc:	b2db      	uxtb	r3, r3
   17ffe:	f88d 3220 	strb.w	r3, [sp, #544]	; 0x220
   18002:	e0b7      	b.n	18174 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x384>
   18004:	00017df1 	.word	0x00017df1
   18008:	0001b7d8 	.word	0x0001b7d8
   1800c:	0001b6d4 	.word	0x0001b6d4
   18010:	0001aee4 	.word	0x0001aee4
   18014:	0001b6dc 	.word	0x0001b6dc
   18018:	0001af3c 	.word	0x0001af3c
   1801c:	0001b6e4 	.word	0x0001b6e4
   18020:	0001af88 	.word	0x0001af88
      }
    }
    else
    {
      LOG_ERROR("Read Cmd was not acknowledged properly!");
   18024:	f240 3309 	movw	r3, #777	; 0x309
   18028:	4a65      	ldr	r2, [pc, #404]	; (181c0 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x3d0>)
   1802a:	4966      	ldr	r1, [pc, #408]	; (181c4 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x3d4>)
   1802c:	4866      	ldr	r0, [pc, #408]	; (181c8 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x3d8>)
   1802e:	f7ff fbcb 	bl	177c8 <printf>
      LOG_ERROR("Parameter Err: %s", ToBool(sd.response.data.byte[0] & 0x40));
   18032:	f89d 3220 	ldrb.w	r3, [sp, #544]	; 0x220
   18036:	f003 0340 	and.w	r3, r3, #64	; 0x40
   1803a:	2b00      	cmp	r3, #0
   1803c:	bf14      	ite	ne
   1803e:	2301      	movne	r3, #1
   18040:	2300      	moveq	r3, #0
   18042:	b2da      	uxtb	r2, r3
   18044:	ab05      	add	r3, sp, #20
   18046:	4611      	mov	r1, r2
   18048:	6818      	ldr	r0, [r3, #0]
   1804a:	f7ff fe55 	bl	17cf8 <Sd::ToBool(bool)>
   1804e:	4603      	mov	r3, r0
   18050:	9300      	str	r3, [sp, #0]
   18052:	f240 330a 	movw	r3, #778	; 0x30a
   18056:	4a5a      	ldr	r2, [pc, #360]	; (181c0 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x3d0>)
   18058:	495c      	ldr	r1, [pc, #368]	; (181cc <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x3dc>)
   1805a:	485d      	ldr	r0, [pc, #372]	; (181d0 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x3e0>)
   1805c:	f7ff fbb4 	bl	177c8 <printf>
      LOG_ERROR("Addr Err: %s", ToBool(sd.response.data.byte[0] & 0x20));
   18060:	f89d 3220 	ldrb.w	r3, [sp, #544]	; 0x220
   18064:	f003 0320 	and.w	r3, r3, #32
   18068:	2b00      	cmp	r3, #0
   1806a:	bf14      	ite	ne
   1806c:	2301      	movne	r3, #1
   1806e:	2300      	moveq	r3, #0
   18070:	b2da      	uxtb	r2, r3
   18072:	ab05      	add	r3, sp, #20
   18074:	4611      	mov	r1, r2
   18076:	6818      	ldr	r0, [r3, #0]
   18078:	f7ff fe3e 	bl	17cf8 <Sd::ToBool(bool)>
   1807c:	4603      	mov	r3, r0
   1807e:	9300      	str	r3, [sp, #0]
   18080:	f240 330b 	movw	r3, #779	; 0x30b
   18084:	4a4e      	ldr	r2, [pc, #312]	; (181c0 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x3d0>)
   18086:	4953      	ldr	r1, [pc, #332]	; (181d4 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x3e4>)
   18088:	4853      	ldr	r0, [pc, #332]	; (181d8 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x3e8>)
   1808a:	f7ff fb9d 	bl	177c8 <printf>
      LOG_ERROR("Erase Seq Err: %s", ToBool(sd.response.data.byte[0] & 0x10));
   1808e:	f89d 3220 	ldrb.w	r3, [sp, #544]	; 0x220
   18092:	f003 0310 	and.w	r3, r3, #16
   18096:	2b00      	cmp	r3, #0
   18098:	bf14      	ite	ne
   1809a:	2301      	movne	r3, #1
   1809c:	2300      	moveq	r3, #0
   1809e:	b2da      	uxtb	r2, r3
   180a0:	ab05      	add	r3, sp, #20
   180a2:	4611      	mov	r1, r2
   180a4:	6818      	ldr	r0, [r3, #0]
   180a6:	f7ff fe27 	bl	17cf8 <Sd::ToBool(bool)>
   180aa:	4603      	mov	r3, r0
   180ac:	9300      	str	r3, [sp, #0]
   180ae:	f44f 7343 	mov.w	r3, #780	; 0x30c
   180b2:	4a43      	ldr	r2, [pc, #268]	; (181c0 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x3d0>)
   180b4:	4949      	ldr	r1, [pc, #292]	; (181dc <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x3ec>)
   180b6:	484a      	ldr	r0, [pc, #296]	; (181e0 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x3f0>)
   180b8:	f7ff fb86 	bl	177c8 <printf>
      LOG_ERROR("Com CRC Err: %s", ToBool(sd.response.data.byte[0] & 0x08));
   180bc:	f89d 3220 	ldrb.w	r3, [sp, #544]	; 0x220
   180c0:	f003 0308 	and.w	r3, r3, #8
   180c4:	2b00      	cmp	r3, #0
   180c6:	bf14      	ite	ne
   180c8:	2301      	movne	r3, #1
   180ca:	2300      	moveq	r3, #0
   180cc:	b2da      	uxtb	r2, r3
   180ce:	ab05      	add	r3, sp, #20
   180d0:	4611      	mov	r1, r2
   180d2:	6818      	ldr	r0, [r3, #0]
   180d4:	f7ff fe10 	bl	17cf8 <Sd::ToBool(bool)>
   180d8:	4603      	mov	r3, r0
   180da:	9300      	str	r3, [sp, #0]
   180dc:	f240 330d 	movw	r3, #781	; 0x30d
   180e0:	4a37      	ldr	r2, [pc, #220]	; (181c0 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x3d0>)
   180e2:	4940      	ldr	r1, [pc, #256]	; (181e4 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x3f4>)
   180e4:	4840      	ldr	r0, [pc, #256]	; (181e8 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x3f8>)
   180e6:	f7ff fb6f 	bl	177c8 <printf>
      LOG_ERROR("Illegal Cmd Err: %s", ToBool(sd.response.data.byte[0] & 0x04));
   180ea:	f89d 3220 	ldrb.w	r3, [sp, #544]	; 0x220
   180ee:	f003 0304 	and.w	r3, r3, #4
   180f2:	2b00      	cmp	r3, #0
   180f4:	bf14      	ite	ne
   180f6:	2301      	movne	r3, #1
   180f8:	2300      	moveq	r3, #0
   180fa:	b2da      	uxtb	r2, r3
   180fc:	ab05      	add	r3, sp, #20
   180fe:	4611      	mov	r1, r2
   18100:	6818      	ldr	r0, [r3, #0]
   18102:	f7ff fdf9 	bl	17cf8 <Sd::ToBool(bool)>
   18106:	4603      	mov	r3, r0
   18108:	9300      	str	r3, [sp, #0]
   1810a:	f240 330e 	movw	r3, #782	; 0x30e
   1810e:	4a2c      	ldr	r2, [pc, #176]	; (181c0 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x3d0>)
   18110:	4936      	ldr	r1, [pc, #216]	; (181ec <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x3fc>)
   18112:	4837      	ldr	r0, [pc, #220]	; (181f0 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x400>)
   18114:	f7ff fb58 	bl	177c8 <printf>
      LOG_ERROR("Erase Reset: %s", ToBool(sd.response.data.byte[0] & 0x02));
   18118:	f89d 3220 	ldrb.w	r3, [sp, #544]	; 0x220
   1811c:	f003 0302 	and.w	r3, r3, #2
   18120:	2b00      	cmp	r3, #0
   18122:	bf14      	ite	ne
   18124:	2301      	movne	r3, #1
   18126:	2300      	moveq	r3, #0
   18128:	b2da      	uxtb	r2, r3
   1812a:	ab05      	add	r3, sp, #20
   1812c:	4611      	mov	r1, r2
   1812e:	6818      	ldr	r0, [r3, #0]
   18130:	f7ff fde2 	bl	17cf8 <Sd::ToBool(bool)>
   18134:	4603      	mov	r3, r0
   18136:	9300      	str	r3, [sp, #0]
   18138:	f240 330f 	movw	r3, #783	; 0x30f
   1813c:	4a20      	ldr	r2, [pc, #128]	; (181c0 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x3d0>)
   1813e:	492d      	ldr	r1, [pc, #180]	; (181f4 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x404>)
   18140:	482d      	ldr	r0, [pc, #180]	; (181f8 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x408>)
   18142:	f7ff fb41 	bl	177c8 <printf>
      LOG_ERROR("In Idle: %s", ToBool(sd.response.data.byte[0] & 0x01));
   18146:	f89d 3220 	ldrb.w	r3, [sp, #544]	; 0x220
   1814a:	f003 0301 	and.w	r3, r3, #1
   1814e:	2b00      	cmp	r3, #0
   18150:	bf14      	ite	ne
   18152:	2301      	movne	r3, #1
   18154:	2300      	moveq	r3, #0
   18156:	b2da      	uxtb	r2, r3
   18158:	ab05      	add	r3, sp, #20
   1815a:	4611      	mov	r1, r2
   1815c:	6818      	ldr	r0, [r3, #0]
   1815e:	f7ff fdcb 	bl	17cf8 <Sd::ToBool(bool)>
   18162:	4603      	mov	r3, r0
   18164:	9300      	str	r3, [sp, #0]
   18166:	f44f 7344 	mov.w	r3, #784	; 0x310
   1816a:	4a15      	ldr	r2, [pc, #84]	; (181c0 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x3d0>)
   1816c:	4923      	ldr	r1, [pc, #140]	; (181fc <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x40c>)
   1816e:	4824      	ldr	r0, [pc, #144]	; (18200 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x410>)
   18170:	f7ff fb2a 	bl	177c8 <printf>
    LOG_DEBUG("Now waiting for SD Card to exit Idle Mode...");
    do
    {
      // Query the status register
      sd.response.length = SendCmd(Command::kGetStatus, 32,
                                   sd.response.data.byte, 0, KeepAlive::kNo);
   18174:	ab05      	add	r3, sp, #20
   18176:	681b      	ldr	r3, [r3, #0]
   18178:	681b      	ldr	r3, [r3, #0]
   1817a:	681c      	ldr	r4, [r3, #0]
      sd.response.length = SendCmd(Command::kGetStatus, 32,
   1817c:	ab86      	add	r3, sp, #536	; 0x218
   1817e:	f103 0208 	add.w	r2, r3, #8
   18182:	a805      	add	r0, sp, #20
   18184:	2300      	movs	r3, #0
   18186:	9301      	str	r3, [sp, #4]
   18188:	2300      	movs	r3, #0
   1818a:	9300      	str	r3, [sp, #0]
   1818c:	4613      	mov	r3, r2
   1818e:	2220      	movs	r2, #32
   18190:	210d      	movs	r1, #13
   18192:	6800      	ldr	r0, [r0, #0]
   18194:	47a0      	blx	r4
   18196:	4603      	mov	r3, r0
   18198:	938a      	str	r3, [sp, #552]	; 0x228
    } while (sd.response.data.byte[0] & 0x01);
   1819a:	f89d 3220 	ldrb.w	r3, [sp, #544]	; 0x220
   1819e:	f003 0301 	and.w	r3, r3, #1
   181a2:	2b00      	cmp	r3, #0
   181a4:	d000      	beq.n	181a8 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x3b8>
    do
   181a6:	e7e5      	b.n	18174 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x384>
    LOG_DEBUG("SD Card is out of Idle Mode!");

    // Return the status
    LOG_DEBUG("Read Complete! [R1 Response: 0x%02X]", sd.response.data.byte[0]);
    return sd.response.data.byte[0];
   181a8:	f89d 4220 	ldrb.w	r4, [sp, #544]	; 0x220
   181ac:	462b      	mov	r3, r5
   181ae:	4619      	mov	r1, r3
   181b0:	4814      	ldr	r0, [pc, #80]	; (18204 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x414>)
   181b2:	f7fe f89d 	bl	162f0 <__cyg_profile_func_exit>
   181b6:	4623      	mov	r3, r4
  }
   181b8:	4618      	mov	r0, r3
   181ba:	f50d 7d13 	add.w	sp, sp, #588	; 0x24c
   181be:	bd30      	pop	{r4, r5, pc}
   181c0:	0001b7d8 	.word	0x0001b7d8
   181c4:	0001b6ec 	.word	0x0001b6ec
   181c8:	0001afd0 	.word	0x0001afd0
   181cc:	0001b6f4 	.word	0x0001b6f4
   181d0:	0001b034 	.word	0x0001b034
   181d4:	0001b6fc 	.word	0x0001b6fc
   181d8:	0001b080 	.word	0x0001b080
   181dc:	0001b704 	.word	0x0001b704
   181e0:	0001b0c8 	.word	0x0001b0c8
   181e4:	0001b70c 	.word	0x0001b70c
   181e8:	0001b114 	.word	0x0001b114
   181ec:	0001b714 	.word	0x0001b714
   181f0:	0001b160 	.word	0x0001b160
   181f4:	0001b71c 	.word	0x0001b71c
   181f8:	0001b1b0 	.word	0x0001b1b0
   181fc:	0001b724 	.word	0x0001b724
   18200:	0001b1fc 	.word	0x0001b1fc
   18204:	00017df1 	.word	0x00017df1

00018208 <Sd::WriteBlock(unsigned long, unsigned char const*, unsigned long)>:

  // Writes any number of 512-byte blocks to the SD Card
  uint8_t WriteBlock(uint32_t address, const uint8_t * array,
   18208:	b530      	push	{r4, r5, lr}
   1820a:	b095      	sub	sp, #84	; 0x54
   1820c:	4675      	mov	r5, lr
   1820e:	9005      	str	r0, [sp, #20]
   18210:	9104      	str	r1, [sp, #16]
   18212:	9203      	str	r2, [sp, #12]
   18214:	9302      	str	r3, [sp, #8]
   18216:	462b      	mov	r3, r5
   18218:	4619      	mov	r1, r3
   1821a:	4865      	ldr	r0, [pc, #404]	; (183b0 <Sd::WriteBlock(unsigned long, unsigned char const*, unsigned long)+0x1a8>)
   1821c:	f7fe f854 	bl	162c8 <__cyg_profile_func_enter>
                     uint32_t blocks = 1) override
  {
    // Wait for a previous command to finish
    WaitWhileBusy();
   18220:	9805      	ldr	r0, [sp, #20]
   18222:	f7ff fdbd 	bl	17da0 <Sd::WaitWhileBusy()>
    Sd::CardInfo_t sd;

    // Determine appropriate command and start token to send
    Command write_cmd;
    uint8_t write_start_tkn;
    if (blocks > 1)
   18226:	9b02      	ldr	r3, [sp, #8]
   18228:	2b01      	cmp	r3, #1
   1822a:	d905      	bls.n	18238 <Sd::WriteBlock(unsigned long, unsigned char const*, unsigned long)+0x30>
    {
      write_cmd       = Command::kWriteMulti;
   1822c:	2359      	movs	r3, #89	; 0x59
   1822e:	9313      	str	r3, [sp, #76]	; 0x4c
      write_start_tkn = 0xFC;
   18230:	23fc      	movs	r3, #252	; 0xfc
   18232:	f88d 304b 	strb.w	r3, [sp, #75]	; 0x4b
   18236:	e004      	b.n	18242 <Sd::WriteBlock(unsigned long, unsigned char const*, unsigned long)+0x3a>
    }
    else
    {
      write_cmd       = Command::kWriteSingle;
   18238:	2358      	movs	r3, #88	; 0x58
   1823a:	9313      	str	r3, [sp, #76]	; 0x4c
      write_start_tkn = 0xFE;
   1823c:	23fe      	movs	r3, #254	; 0xfe
   1823e:	f88d 304b 	strb.w	r3, [sp, #75]	; 0x4b
    }

    // Send initial write command
    sd.response.length = SendCmd(write_cmd, address, sd.response.data.byte, 100,
                                 KeepAlive::kYes);
   18242:	9b05      	ldr	r3, [sp, #20]
   18244:	681b      	ldr	r3, [r3, #0]
   18246:	681c      	ldr	r4, [r3, #0]
    sd.response.length = SendCmd(write_cmd, address, sd.response.data.byte, 100,
   18248:	ab06      	add	r3, sp, #24
   1824a:	f103 0208 	add.w	r2, r3, #8
   1824e:	2301      	movs	r3, #1
   18250:	9301      	str	r3, [sp, #4]
   18252:	2364      	movs	r3, #100	; 0x64
   18254:	9300      	str	r3, [sp, #0]
   18256:	4613      	mov	r3, r2
   18258:	9a04      	ldr	r2, [sp, #16]
   1825a:	9913      	ldr	r1, [sp, #76]	; 0x4c
   1825c:	9805      	ldr	r0, [sp, #20]
   1825e:	47a0      	blx	r4
   18260:	4603      	mov	r3, r0
   18262:	930a      	str	r3, [sp, #40]	; 0x28
    LOG_DEBUG("Sent Write Cmd");
    LOG_DEBUG("[R1 Response:0x%02X]", sd.response.data.byte[0]);

    // Check if the response was acknowledged properly
    if (sd.response.data.byte[0] == 0x00)
   18264:	f89d 3020 	ldrb.w	r3, [sp, #32]
   18268:	2b00      	cmp	r3, #0
   1826a:	f040 8096 	bne.w	1839a <Sd::WriteBlock(unsigned long, unsigned char const*, unsigned long)+0x192>
    {
      // If no errors, proceed write given block(s) to SD Card
      // For each given block
      for (uint16_t current_block_num = 0; current_block_num < blocks;
   1826e:	2300      	movs	r3, #0
   18270:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
   18274:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
   18278:	9a02      	ldr	r2, [sp, #8]
   1827a:	429a      	cmp	r2, r3
   1827c:	d97a      	bls.n	18374 <Sd::WriteBlock(unsigned long, unsigned char const*, unsigned long)+0x16c>
           current_block_num++)
      {
        // Calculate array offset
        uint64_t arr_offset = current_block_num * kBlockSize;
   1827e:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
   18282:	025b      	lsls	r3, r3, #9
   18284:	ea4f 74e3 	mov.w	r4, r3, asr #31
   18288:	e9cd 340e 	strd	r3, r4, [sp, #56]	; 0x38

        // Send the start token for the current block
        ssp_interface_->Transfer(write_start_tkn);
   1828c:	9b05      	ldr	r3, [sp, #20]
   1828e:	685a      	ldr	r2, [r3, #4]
   18290:	9b05      	ldr	r3, [sp, #20]
   18292:	685b      	ldr	r3, [r3, #4]
   18294:	681b      	ldr	r3, [r3, #0]
   18296:	3308      	adds	r3, #8
   18298:	681b      	ldr	r3, [r3, #0]
   1829a:	f89d 104b 	ldrb.w	r1, [sp, #75]	; 0x4b
   1829e:	b289      	uxth	r1, r1
   182a0:	4610      	mov	r0, r2
   182a2:	4798      	blx	r3

        // Write all 512-bytes of the given block
        LOG_DEBUG("Writing block #%d", current_block_num);
        for (uint16_t current_byte = 0; current_byte < kBlockSize;
   182a4:	2300      	movs	r3, #0
   182a6:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
   182aa:	f8bd 3046 	ldrh.w	r3, [sp, #70]	; 0x46
   182ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   182b2:	d216      	bcs.n	182e2 <Sd::WriteBlock(unsigned long, unsigned char const*, unsigned long)+0xda>
             current_byte++)
        {
          ssp_interface_->Transfer(array[arr_offset + current_byte]);
   182b4:	9b05      	ldr	r3, [sp, #20]
   182b6:	6858      	ldr	r0, [r3, #4]
   182b8:	9b05      	ldr	r3, [sp, #20]
   182ba:	685b      	ldr	r3, [r3, #4]
   182bc:	681b      	ldr	r3, [r3, #0]
   182be:	3308      	adds	r3, #8
   182c0:	681b      	ldr	r3, [r3, #0]
   182c2:	990e      	ldr	r1, [sp, #56]	; 0x38
   182c4:	f8bd 2046 	ldrh.w	r2, [sp, #70]	; 0x46
   182c8:	440a      	add	r2, r1
   182ca:	9903      	ldr	r1, [sp, #12]
   182cc:	440a      	add	r2, r1
   182ce:	7812      	ldrb	r2, [r2, #0]
   182d0:	b292      	uxth	r2, r2
   182d2:	4611      	mov	r1, r2
   182d4:	4798      	blx	r3
        for (uint16_t current_byte = 0; current_byte < kBlockSize;
   182d6:	f8bd 3046 	ldrh.w	r3, [sp, #70]	; 0x46
   182da:	3301      	adds	r3, #1
   182dc:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
   182e0:	e7e3      	b.n	182aa <Sd::WriteBlock(unsigned long, unsigned char const*, unsigned long)+0xa2>
        }

        // Read the data response token after writing the block
        uint8_t data_response_tkn =
            static_cast<uint8_t>(ssp_interface_->Transfer(0xFF));
   182e2:	9b05      	ldr	r3, [sp, #20]
   182e4:	685a      	ldr	r2, [r3, #4]
   182e6:	9b05      	ldr	r3, [sp, #20]
   182e8:	685b      	ldr	r3, [r3, #4]
   182ea:	681b      	ldr	r3, [r3, #0]
   182ec:	3308      	adds	r3, #8
   182ee:	681b      	ldr	r3, [r3, #0]
   182f0:	21ff      	movs	r1, #255	; 0xff
   182f2:	4610      	mov	r0, r2
   182f4:	4798      	blx	r3
   182f6:	4603      	mov	r3, r0
   182f8:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
                  ToBool(data_response_tkn & 0x0B));
        LOG_DEBUG("Data Rejected (write err)?: %s",
                  ToBool(data_response_tkn & 0x0D));

        // If writing multiple blocks and the previous block was rejected
        if (blocks > 1 && !(data_response_tkn & 0x05))
   182fc:	9b02      	ldr	r3, [sp, #8]
   182fe:	2b01      	cmp	r3, #1
   18300:	d92f      	bls.n	18362 <Sd::WriteBlock(unsigned long, unsigned char const*, unsigned long)+0x15a>
   18302:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
   18306:	f003 0305 	and.w	r3, r3, #5
   1830a:	2b00      	cmp	r3, #0
   1830c:	d129      	bne.n	18362 <Sd::WriteBlock(unsigned long, unsigned char const*, unsigned long)+0x15a>
        {
          // Send an immediate stop (CMD12)
          sd.response.length =
              SendCmd(Command::kStopTrans, 0xFFFFFFFF, sd.response.data.byte,
                      100, KeepAlive::kYes);
   1830e:	9b05      	ldr	r3, [sp, #20]
   18310:	681b      	ldr	r3, [r3, #0]
   18312:	681c      	ldr	r4, [r3, #0]
              SendCmd(Command::kStopTrans, 0xFFFFFFFF, sd.response.data.byte,
   18314:	ab06      	add	r3, sp, #24
   18316:	f103 0208 	add.w	r2, r3, #8
   1831a:	2301      	movs	r3, #1
   1831c:	9301      	str	r3, [sp, #4]
   1831e:	2364      	movs	r3, #100	; 0x64
   18320:	9300      	str	r3, [sp, #0]
   18322:	4613      	mov	r3, r2
   18324:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   18328:	214c      	movs	r1, #76	; 0x4c
   1832a:	9805      	ldr	r0, [sp, #20]
   1832c:	47a0      	blx	r4
   1832e:	4603      	mov	r3, r0
          sd.response.length =
   18330:	930a      	str	r3, [sp, #40]	; 0x28
          LOG_DEBUG("Stopped Transmission due to rejection...");
          LOG_DEBUG("[R1 Response: 0x%02X]", sd.response.data.byte[0]);

          // In the case of a write error, ask for the reason why
          if (data_response_tkn & 0x0D)
   18332:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
   18336:	f003 030d 	and.w	r3, r3, #13
   1833a:	2b00      	cmp	r3, #0
   1833c:	d011      	beq.n	18362 <Sd::WriteBlock(unsigned long, unsigned char const*, unsigned long)+0x15a>
          {
            sd.response.length =
                SendCmd(Command::kGetStatus, 0xFFFFFFFF, sd.response.data.byte,
                        100, KeepAlive::kYes);
   1833e:	9b05      	ldr	r3, [sp, #20]
   18340:	681b      	ldr	r3, [r3, #0]
   18342:	681c      	ldr	r4, [r3, #0]
                SendCmd(Command::kGetStatus, 0xFFFFFFFF, sd.response.data.byte,
   18344:	ab06      	add	r3, sp, #24
   18346:	f103 0208 	add.w	r2, r3, #8
   1834a:	2301      	movs	r3, #1
   1834c:	9301      	str	r3, [sp, #4]
   1834e:	2364      	movs	r3, #100	; 0x64
   18350:	9300      	str	r3, [sp, #0]
   18352:	4613      	mov	r3, r2
   18354:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   18358:	210d      	movs	r1, #13
   1835a:	9805      	ldr	r0, [sp, #20]
   1835c:	47a0      	blx	r4
   1835e:	4603      	mov	r3, r0
            sd.response.length =
   18360:	930a      	str	r3, [sp, #40]	; 0x28
                "Checking Status Register to see cause of Write Error...");
            LOG_DEBUG("[R2 Response: 0x%04" PRIX32 "]",
                      sd.response.data.dWord.lo);
          }
        }
        WaitWhileBusy();
   18362:	9805      	ldr	r0, [sp, #20]
   18364:	f7ff fd1c 	bl	17da0 <Sd::WaitWhileBusy()>
      for (uint16_t current_block_num = 0; current_block_num < blocks;
   18368:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
   1836c:	3301      	adds	r3, #1
   1836e:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
   18372:	e77f      	b.n	18274 <Sd::WriteBlock(unsigned long, unsigned char const*, unsigned long)+0x6c>
      }

      if (blocks > 1)
   18374:	9b02      	ldr	r3, [sp, #8]
   18376:	2b01      	cmp	r3, #1
   18378:	d90f      	bls.n	1839a <Sd::WriteBlock(unsigned long, unsigned char const*, unsigned long)+0x192>
      {
        constexpr uint8_t kStopToken = 0xFD;
   1837a:	23fd      	movs	r3, #253	; 0xfd
   1837c:	f88d 3036 	strb.w	r3, [sp, #54]	; 0x36
        ssp_interface_->Transfer(kStopToken);
   18380:	9b05      	ldr	r3, [sp, #20]
   18382:	685a      	ldr	r2, [r3, #4]
   18384:	9b05      	ldr	r3, [sp, #20]
   18386:	685b      	ldr	r3, [r3, #4]
   18388:	681b      	ldr	r3, [r3, #0]
   1838a:	3308      	adds	r3, #8
   1838c:	681b      	ldr	r3, [r3, #0]
   1838e:	21fd      	movs	r1, #253	; 0xfd
   18390:	4610      	mov	r0, r2
   18392:	4798      	blx	r3

        // Wait for the card's programming to complete before
        // reselecting it (i.e. to prevent corruption)
        WaitWhileBusy();
   18394:	9805      	ldr	r0, [sp, #20]
   18396:	f7ff fd03 	bl	17da0 <Sd::WaitWhileBusy()>
      LOG_DEBUG("Illegal Cmd Err: %s", ToBool(sd.response.data.byte[0] & 0x04));
      LOG_DEBUG("Erase Reset: %s", ToBool(sd.response.data.byte[0] & 0x02));
      LOG_DEBUG("In Idle: %s", ToBool(sd.response.data.byte[0] & 0x01));
    }

    return sd.response.data.byte[0];
   1839a:	f89d 4020 	ldrb.w	r4, [sp, #32]
   1839e:	462b      	mov	r3, r5
   183a0:	4619      	mov	r1, r3
   183a2:	4803      	ldr	r0, [pc, #12]	; (183b0 <Sd::WriteBlock(unsigned long, unsigned char const*, unsigned long)+0x1a8>)
   183a4:	f7fd ffa4 	bl	162f0 <__cyg_profile_func_exit>
   183a8:	4623      	mov	r3, r4
  }
   183aa:	4618      	mov	r0, r3
   183ac:	b015      	add	sp, #84	; 0x54
   183ae:	bd30      	pop	{r4, r5, pc}
   183b0:	00018209 	.word	0x00018209

000183b4 <Sd::DeleteBlock(unsigned long, unsigned long)>:

  // Deletes any number of blocks (inclusively) within a range of address.
  uint8_t DeleteBlock(uint32_t start, uint32_t end) override
   183b4:	b530      	push	{r4, r5, lr}
   183b6:	b08f      	sub	sp, #60	; 0x3c
   183b8:	4675      	mov	r5, lr
   183ba:	9005      	str	r0, [sp, #20]
   183bc:	9104      	str	r1, [sp, #16]
   183be:	9203      	str	r2, [sp, #12]
   183c0:	462b      	mov	r3, r5
   183c2:	4619      	mov	r1, r3
   183c4:	483d      	ldr	r0, [pc, #244]	; (184bc <Sd::DeleteBlock(unsigned long, unsigned long)+0x108>)
   183c6:	f7fd ff7f 	bl	162c8 <__cyg_profile_func_enter>
  {
    // Wait for a previous command to finish
    WaitWhileBusy();
   183ca:	9805      	ldr	r0, [sp, #20]
   183cc:	f7ff fce8 	bl	17da0 <Sd::WaitWhileBusy()>

    // Create a temporary storage location to store sd command responses
    Sd::CardInfo_t sd;
    bool delete_failed = false;
   183d0:	2300      	movs	r3, #0
   183d2:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37

    // Set the delete start address
    LOG_DEBUG("Setting Delete Start Address...");
    sd.response.length = SendCmd(Command::kDelFrom, start,
                                 sd.response.data.byte, 100, KeepAlive::kYes);
   183d6:	9b05      	ldr	r3, [sp, #20]
   183d8:	681b      	ldr	r3, [r3, #0]
   183da:	681c      	ldr	r4, [r3, #0]
    sd.response.length = SendCmd(Command::kDelFrom, start,
   183dc:	ab06      	add	r3, sp, #24
   183de:	f103 0208 	add.w	r2, r3, #8
   183e2:	2301      	movs	r3, #1
   183e4:	9301      	str	r3, [sp, #4]
   183e6:	2364      	movs	r3, #100	; 0x64
   183e8:	9300      	str	r3, [sp, #0]
   183ea:	4613      	mov	r3, r2
   183ec:	9a04      	ldr	r2, [sp, #16]
   183ee:	2160      	movs	r1, #96	; 0x60
   183f0:	9805      	ldr	r0, [sp, #20]
   183f2:	47a0      	blx	r4
   183f4:	4603      	mov	r3, r0
   183f6:	930a      	str	r3, [sp, #40]	; 0x28

    // Wait while the writing the start address
    WaitWhileBusy();
   183f8:	9805      	ldr	r0, [sp, #20]
   183fa:	f7ff fcd1 	bl	17da0 <Sd::WaitWhileBusy()>

    // Force return if an error occurred
    if (sd.response.data.byte[0] != 0x00)
   183fe:	f89d 3020 	ldrb.w	r3, [sp, #32]
   18402:	2b00      	cmp	r3, #0
   18404:	d009      	beq.n	1841a <Sd::DeleteBlock(unsigned long, unsigned long)+0x66>
    {
      LOG_ERROR("Failed to set Start Address!");
   18406:	f44f 736a 	mov.w	r3, #936	; 0x3a8
   1840a:	4a2d      	ldr	r2, [pc, #180]	; (184c0 <Sd::DeleteBlock(unsigned long, unsigned long)+0x10c>)
   1840c:	492d      	ldr	r1, [pc, #180]	; (184c4 <Sd::DeleteBlock(unsigned long, unsigned long)+0x110>)
   1840e:	482e      	ldr	r0, [pc, #184]	; (184c8 <Sd::DeleteBlock(unsigned long, unsigned long)+0x114>)
   18410:	f7ff f9da 	bl	177c8 <printf>
      delete_failed = true;
   18414:	2301      	movs	r3, #1
   18416:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
    }

    // Set the delete end address
    if (!delete_failed)
   1841a:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
   1841e:	f083 0301 	eor.w	r3, r3, #1
   18422:	b2db      	uxtb	r3, r3
   18424:	2b00      	cmp	r3, #0
   18426:	d010      	beq.n	1844a <Sd::DeleteBlock(unsigned long, unsigned long)+0x96>
    {
      LOG_DEBUG("Setting Delete End Address...");
      sd.response.length = SendCmd(Command::kDelTo, end, sd.response.data.byte,
                                   100, KeepAlive::kYes);
   18428:	9b05      	ldr	r3, [sp, #20]
   1842a:	681b      	ldr	r3, [r3, #0]
   1842c:	681c      	ldr	r4, [r3, #0]
      sd.response.length = SendCmd(Command::kDelTo, end, sd.response.data.byte,
   1842e:	ab06      	add	r3, sp, #24
   18430:	f103 0208 	add.w	r2, r3, #8
   18434:	2301      	movs	r3, #1
   18436:	9301      	str	r3, [sp, #4]
   18438:	2364      	movs	r3, #100	; 0x64
   1843a:	9300      	str	r3, [sp, #0]
   1843c:	4613      	mov	r3, r2
   1843e:	9a03      	ldr	r2, [sp, #12]
   18440:	2161      	movs	r1, #97	; 0x61
   18442:	9805      	ldr	r0, [sp, #20]
   18444:	47a0      	blx	r4
   18446:	4603      	mov	r3, r0
   18448:	930a      	str	r3, [sp, #40]	; 0x28
    }

    // Wait while the writing the end address
    WaitWhileBusy();
   1844a:	9805      	ldr	r0, [sp, #20]
   1844c:	f7ff fca8 	bl	17da0 <Sd::WaitWhileBusy()>

    // Force return if an error occurred
    if (sd.response.data.byte[0] != 0x00)
   18450:	f89d 3020 	ldrb.w	r3, [sp, #32]
   18454:	2b00      	cmp	r3, #0
   18456:	d009      	beq.n	1846c <Sd::DeleteBlock(unsigned long, unsigned long)+0xb8>
    {
      LOG_ERROR("Failed to set End Address!");
   18458:	f240 33ba 	movw	r3, #954	; 0x3ba
   1845c:	4a18      	ldr	r2, [pc, #96]	; (184c0 <Sd::DeleteBlock(unsigned long, unsigned long)+0x10c>)
   1845e:	491b      	ldr	r1, [pc, #108]	; (184cc <Sd::DeleteBlock(unsigned long, unsigned long)+0x118>)
   18460:	481b      	ldr	r0, [pc, #108]	; (184d0 <Sd::DeleteBlock(unsigned long, unsigned long)+0x11c>)
   18462:	f7ff f9b1 	bl	177c8 <printf>
      delete_failed = true;
   18466:	2301      	movs	r3, #1
   18468:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
    }

    // Finally, attempt a delete
    if (!delete_failed)
   1846c:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
   18470:	f083 0301 	eor.w	r3, r3, #1
   18474:	b2db      	uxtb	r3, r3
   18476:	2b00      	cmp	r3, #0
   18478:	d014      	beq.n	184a4 <Sd::DeleteBlock(unsigned long, unsigned long)+0xf0>
    {
      // Issue the delete command to delete from our from:to range
      LOG_DEBUG("Issuing Delete Command...");
      sd.response.length = SendCmd(Command::kDel, 0xFFFFFFFF,
                                   sd.response.data.byte, 100, KeepAlive::kYes);
   1847a:	9b05      	ldr	r3, [sp, #20]
   1847c:	681b      	ldr	r3, [r3, #0]
   1847e:	681c      	ldr	r4, [r3, #0]
      sd.response.length = SendCmd(Command::kDel, 0xFFFFFFFF,
   18480:	ab06      	add	r3, sp, #24
   18482:	f103 0208 	add.w	r2, r3, #8
   18486:	2301      	movs	r3, #1
   18488:	9301      	str	r3, [sp, #4]
   1848a:	2364      	movs	r3, #100	; 0x64
   1848c:	9300      	str	r3, [sp, #0]
   1848e:	4613      	mov	r3, r2
   18490:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   18494:	2166      	movs	r1, #102	; 0x66
   18496:	9805      	ldr	r0, [sp, #20]
   18498:	47a0      	blx	r4
   1849a:	4603      	mov	r3, r0
   1849c:	930a      	str	r3, [sp, #40]	; 0x28

      // Wait while the deletion occurs
      WaitWhileBusy();
   1849e:	9805      	ldr	r0, [sp, #20]
   184a0:	f7ff fc7e 	bl	17da0 <Sd::WaitWhileBusy()>
      LOG_DEBUG("[R1 Response: 0x%02X]", sd.response.data.byte[0]);
      LOG_DEBUG("Deletion Complete...");
    }

    // Return status
    return sd.response.data.byte[0];
   184a4:	f89d 4020 	ldrb.w	r4, [sp, #32]
   184a8:	462b      	mov	r3, r5
   184aa:	4619      	mov	r1, r3
   184ac:	4803      	ldr	r0, [pc, #12]	; (184bc <Sd::DeleteBlock(unsigned long, unsigned long)+0x108>)
   184ae:	f7fd ff1f 	bl	162f0 <__cyg_profile_func_exit>
   184b2:	4623      	mov	r3, r4
  }
   184b4:	4618      	mov	r0, r3
   184b6:	b00f      	add	sp, #60	; 0x3c
   184b8:	bd30      	pop	{r4, r5, pc}
   184ba:	bf00      	nop
   184bc:	000183b5 	.word	0x000183b5
   184c0:	0001b814 	.word	0x0001b814
   184c4:	0001b72c 	.word	0x0001b72c
   184c8:	0001b244 	.word	0x0001b244
   184cc:	0001b734 	.word	0x0001b734
   184d0:	0001b29c 	.word	0x0001b29c

000184d4 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)>:

  // Send a command
  uint32_t SendCmd(Command sdc, uint32_t arg, uint8_t response_buffer[],
   184d4:	e92d 49f0 	stmdb	sp!, {r4, r5, r6, r7, r8, fp, lr}
   184d8:	b08f      	sub	sp, #60	; 0x3c
   184da:	46f0      	mov	r8, lr
   184dc:	9003      	str	r0, [sp, #12]
   184de:	9102      	str	r1, [sp, #8]
   184e0:	9201      	str	r2, [sp, #4]
   184e2:	9300      	str	r3, [sp, #0]
   184e4:	4643      	mov	r3, r8
   184e6:	4619      	mov	r1, r3
   184e8:	4840      	ldr	r0, [pc, #256]	; (185ec <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x118>)
   184ea:	f7fd feed 	bl	162c8 <__cyg_profile_func_enter>
                   uint32_t delay, KeepAlive keep_alive) override
  {
    ResponseType res_type;
    uint8_t res_len    = 0;
   184ee:	2300      	movs	r3, #0
   184f0:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
    uint8_t crc        = 0;
   184f4:	2300      	movs	r3, #0
   184f6:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
    uint8_t tries      = 0;
   184fa:	2300      	movs	r3, #0
   184fc:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
    uint8_t bit_offset = 0;  // determines the distance of the response's
   18500:	2300      	movs	r3, #0
   18502:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
                             // 0 bit from the MSB place
    uint8_t temp_byte = 0;
   18506:	2300      	movs	r3, #0
   18508:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f

    // Determine the response type of the set command
    switch (sdc)
   1850c:	9b02      	ldr	r3, [sp, #8]
   1850e:	2b58      	cmp	r3, #88	; 0x58
   18510:	d052      	beq.n	185b8 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0xe4>
   18512:	2b58      	cmp	r3, #88	; 0x58
   18514:	dc16      	bgt.n	18544 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x70>
   18516:	2b48      	cmp	r3, #72	; 0x48
   18518:	d033      	beq.n	18582 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0xae>
   1851a:	2b48      	cmp	r3, #72	; 0x48
   1851c:	dc06      	bgt.n	1852c <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x58>
   1851e:	2b40      	cmp	r3, #64	; 0x40
   18520:	d029      	beq.n	18576 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0xa2>
   18522:	2b41      	cmp	r3, #65	; 0x41
   18524:	d02a      	beq.n	1857c <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0xa8>
   18526:	2b0d      	cmp	r3, #13
   18528:	d031      	beq.n	1858e <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0xba>
   1852a:	e054      	b.n	185d6 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x102>
   1852c:	2b50      	cmp	r3, #80	; 0x50
   1852e:	d03a      	beq.n	185a6 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0xd2>
   18530:	2b50      	cmp	r3, #80	; 0x50
   18532:	dc02      	bgt.n	1853a <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x66>
   18534:	2b4c      	cmp	r3, #76	; 0x4c
   18536:	d027      	beq.n	18588 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0xb4>
   18538:	e04d      	b.n	185d6 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x102>
   1853a:	2b51      	cmp	r3, #81	; 0x51
   1853c:	d036      	beq.n	185ac <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0xd8>
   1853e:	2b52      	cmp	r3, #82	; 0x52
   18540:	d037      	beq.n	185b2 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0xde>
   18542:	e048      	b.n	185d6 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x102>
   18544:	2b66      	cmp	r3, #102	; 0x66
   18546:	d043      	beq.n	185d0 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0xfc>
   18548:	2b66      	cmp	r3, #102	; 0x66
   1854a:	dc06      	bgt.n	1855a <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x86>
   1854c:	2b60      	cmp	r3, #96	; 0x60
   1854e:	d039      	beq.n	185c4 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0xf0>
   18550:	2b61      	cmp	r3, #97	; 0x61
   18552:	d03a      	beq.n	185ca <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0xf6>
   18554:	2b59      	cmp	r3, #89	; 0x59
   18556:	d032      	beq.n	185be <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0xea>
   18558:	e03d      	b.n	185d6 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x102>
   1855a:	2b77      	cmp	r3, #119	; 0x77
   1855c:	d01a      	beq.n	18594 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0xc0>
   1855e:	2b77      	cmp	r3, #119	; 0x77
   18560:	dc02      	bgt.n	18568 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x94>
   18562:	2b69      	cmp	r3, #105	; 0x69
   18564:	d019      	beq.n	1859a <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0xc6>
   18566:	e036      	b.n	185d6 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x102>
   18568:	2b7a      	cmp	r3, #122	; 0x7a
   1856a:	d019      	beq.n	185a0 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0xcc>
   1856c:	2bff      	cmp	r3, #255	; 0xff
   1856e:	d132      	bne.n	185d6 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x102>
    {
      case Command::kGarbage: res_type = ResponseType::kR1; break;
   18570:	2300      	movs	r3, #0
   18572:	930d      	str	r3, [sp, #52]	; 0x34
   18574:	e042      	b.n	185fc <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x128>
      case Command::kReset: res_type = ResponseType::kR1; break;
   18576:	2300      	movs	r3, #0
   18578:	930d      	str	r3, [sp, #52]	; 0x34
   1857a:	e03f      	b.n	185fc <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x128>
      case Command::kInit: res_type = ResponseType::kR1; break;
   1857c:	2300      	movs	r3, #0
   1857e:	930d      	str	r3, [sp, #52]	; 0x34
   18580:	e03c      	b.n	185fc <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x128>
      case Command::kGetOp: res_type = ResponseType::kR7; break;
   18582:	2307      	movs	r3, #7
   18584:	930d      	str	r3, [sp, #52]	; 0x34
   18586:	e039      	b.n	185fc <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x128>
      case Command::kStopTrans: res_type = ResponseType::kR1; break;
   18588:	2300      	movs	r3, #0
   1858a:	930d      	str	r3, [sp, #52]	; 0x34
   1858c:	e036      	b.n	185fc <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x128>
      case Command::kGetStatus: res_type = ResponseType::kR2; break;
   1858e:	2302      	movs	r3, #2
   18590:	930d      	str	r3, [sp, #52]	; 0x34
   18592:	e033      	b.n	185fc <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x128>
      case Command::kAcBegin: res_type = ResponseType::kR1; break;
   18594:	2300      	movs	r3, #0
   18596:	930d      	str	r3, [sp, #52]	; 0x34
   18598:	e030      	b.n	185fc <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x128>
      case Command::kAcInit: res_type = ResponseType::kR1; break;
   1859a:	2300      	movs	r3, #0
   1859c:	930d      	str	r3, [sp, #52]	; 0x34
   1859e:	e02d      	b.n	185fc <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x128>
      case Command::kGetOcr: res_type = ResponseType::kR3; break;
   185a0:	2303      	movs	r3, #3
   185a2:	930d      	str	r3, [sp, #52]	; 0x34
   185a4:	e02a      	b.n	185fc <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x128>
      case Command::kChgBlkLen: res_type = ResponseType::kR1; break;
   185a6:	2300      	movs	r3, #0
   185a8:	930d      	str	r3, [sp, #52]	; 0x34
   185aa:	e027      	b.n	185fc <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x128>
      case Command::kReadSingle: res_type = ResponseType::kR1; break;
   185ac:	2300      	movs	r3, #0
   185ae:	930d      	str	r3, [sp, #52]	; 0x34
   185b0:	e024      	b.n	185fc <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x128>
      case Command::kReadMulti: res_type = ResponseType::kR1; break;
   185b2:	2300      	movs	r3, #0
   185b4:	930d      	str	r3, [sp, #52]	; 0x34
   185b6:	e021      	b.n	185fc <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x128>
      case Command::kWriteSingle: res_type = ResponseType::kR1; break;
   185b8:	2300      	movs	r3, #0
   185ba:	930d      	str	r3, [sp, #52]	; 0x34
   185bc:	e01e      	b.n	185fc <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x128>
      case Command::kWriteMulti: res_type = ResponseType::kR1; break;
   185be:	2300      	movs	r3, #0
   185c0:	930d      	str	r3, [sp, #52]	; 0x34
   185c2:	e01b      	b.n	185fc <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x128>
      case Command::kDelFrom: res_type = ResponseType::kR1; break;
   185c4:	2300      	movs	r3, #0
   185c6:	930d      	str	r3, [sp, #52]	; 0x34
   185c8:	e018      	b.n	185fc <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x128>
      case Command::kDelTo: res_type = ResponseType::kR1; break;
   185ca:	2300      	movs	r3, #0
   185cc:	930d      	str	r3, [sp, #52]	; 0x34
   185ce:	e015      	b.n	185fc <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x128>
      case Command::kDel: res_type = ResponseType::kR1b; break;
   185d0:	2301      	movs	r3, #1
   185d2:	930d      	str	r3, [sp, #52]	; 0x34
   185d4:	e012      	b.n	185fc <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x128>
      default:
        LOG_ERROR("Unknown response type. Aborting!");
   185d6:	f240 33f3 	movw	r3, #1011	; 0x3f3
   185da:	4a05      	ldr	r2, [pc, #20]	; (185f0 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x11c>)
   185dc:	4905      	ldr	r1, [pc, #20]	; (185f4 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x120>)
   185de:	4806      	ldr	r0, [pc, #24]	; (185f8 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x124>)
   185e0:	f7ff f8f2 	bl	177c8 <printf>
        return -1;
   185e4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   185e8:	e1b1      	b.n	1894e <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x47a>
   185ea:	bf00      	nop
   185ec:	000184d5 	.word	0x000184d5
   185f0:	0001b848 	.word	0x0001b848
   185f4:	0001b73c 	.word	0x0001b73c
   185f8:	0001b2f0 	.word	0x0001b2f0
    // algorithm
    uint8_t msg[5] = { static_cast<uint8_t>(sdc),
                       static_cast<uint8_t>(arg >> 24),
                       static_cast<uint8_t>(arg >> 16),
                       static_cast<uint8_t>(arg >> 8),
                       static_cast<uint8_t>(arg >> 0) };
   185fc:	9b02      	ldr	r3, [sp, #8]
   185fe:	b2db      	uxtb	r3, r3
   18600:	f88d 3010 	strb.w	r3, [sp, #16]
                       static_cast<uint8_t>(arg >> 24),
   18604:	9b01      	ldr	r3, [sp, #4]
   18606:	0e1b      	lsrs	r3, r3, #24
                       static_cast<uint8_t>(arg >> 0) };
   18608:	b2db      	uxtb	r3, r3
   1860a:	f88d 3011 	strb.w	r3, [sp, #17]
                       static_cast<uint8_t>(arg >> 16),
   1860e:	9b01      	ldr	r3, [sp, #4]
   18610:	0c1b      	lsrs	r3, r3, #16
                       static_cast<uint8_t>(arg >> 0) };
   18612:	b2db      	uxtb	r3, r3
   18614:	f88d 3012 	strb.w	r3, [sp, #18]
                       static_cast<uint8_t>(arg >> 8),
   18618:	9b01      	ldr	r3, [sp, #4]
   1861a:	0a1b      	lsrs	r3, r3, #8
                       static_cast<uint8_t>(arg >> 0) };
   1861c:	b2db      	uxtb	r3, r3
   1861e:	f88d 3013 	strb.w	r3, [sp, #19]
   18622:	9b01      	ldr	r3, [sp, #4]
   18624:	b2db      	uxtb	r3, r3
   18626:	f88d 3014 	strb.w	r3, [sp, #20]

    crc = GetCrc7(msg, sizeof(msg));
   1862a:	9b03      	ldr	r3, [sp, #12]
   1862c:	681b      	ldr	r3, [r3, #0]
   1862e:	331c      	adds	r3, #28
   18630:	681b      	ldr	r3, [r3, #0]
   18632:	a904      	add	r1, sp, #16
   18634:	2205      	movs	r2, #5
   18636:	9803      	ldr	r0, [sp, #12]
   18638:	4798      	blx	r3
   1863a:	4603      	mov	r3, r0
   1863c:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
    if (sdc == Command::kGarbage)
   18640:	9b02      	ldr	r3, [sp, #8]
   18642:	2bff      	cmp	r3, #255	; 0xff
   18644:	d102      	bne.n	1864c <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x178>
    {
      crc = 0xFF;
   18646:	23ff      	movs	r3, #255	; 0xff
   18648:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
    }

    // Select the SD Card
    chip_select_->SetLow();
   1864c:	9b03      	ldr	r3, [sp, #12]
   1864e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   18650:	9b03      	ldr	r3, [sp, #12]
   18652:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   18654:	681b      	ldr	r3, [r3, #0]
   18656:	3310      	adds	r3, #16
   18658:	681b      	ldr	r3, [r3, #0]
   1865a:	4610      	mov	r0, r2
   1865c:	4798      	blx	r3
    chip_select_external_->SetLow();
   1865e:	9b03      	ldr	r3, [sp, #12]
   18660:	6bda      	ldr	r2, [r3, #60]	; 0x3c
   18662:	9b03      	ldr	r3, [sp, #12]
   18664:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   18666:	681b      	ldr	r3, [r3, #0]
   18668:	3310      	adds	r3, #16
   1866a:	681b      	ldr	r3, [r3, #0]
   1866c:	4610      	mov	r0, r2
   1866e:	4798      	blx	r3

    // If desired, wait a bit before talking
    if (delay > 0)
   18670:	9b16      	ldr	r3, [sp, #88]	; 0x58
   18672:	2b00      	cmp	r3, #0
   18674:	d007      	beq.n	18686 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x1b2>
    {
      Delay(delay);
   18676:	9b16      	ldr	r3, [sp, #88]	; 0x58
   18678:	461a      	mov	r2, r3
   1867a:	f04f 0300 	mov.w	r3, #0
   1867e:	4610      	mov	r0, r2
   18680:	4619      	mov	r1, r3
   18682:	f7f8 fc71 	bl	10f68 <Delay(unsigned long long)>
    }

    // Send the desired command frame to the SD card board
    // Begin by transfering the command byte
    ssp_interface_->Transfer(static_cast<uint16_t>(sdc));
   18686:	9b03      	ldr	r3, [sp, #12]
   18688:	685a      	ldr	r2, [r3, #4]
   1868a:	9b03      	ldr	r3, [sp, #12]
   1868c:	685b      	ldr	r3, [r3, #4]
   1868e:	681b      	ldr	r3, [r3, #0]
   18690:	3308      	adds	r3, #8
   18692:	681b      	ldr	r3, [r3, #0]
   18694:	9902      	ldr	r1, [sp, #8]
   18696:	b289      	uxth	r1, r1
   18698:	4610      	mov	r0, r2
   1869a:	4798      	blx	r3
    // Send arg byte [31:24]
    ssp_interface_->Transfer(static_cast<uint16_t>(arg >> 24) & 0xFF);
   1869c:	9b03      	ldr	r3, [sp, #12]
   1869e:	6858      	ldr	r0, [r3, #4]
   186a0:	9b03      	ldr	r3, [sp, #12]
   186a2:	685b      	ldr	r3, [r3, #4]
   186a4:	681b      	ldr	r3, [r3, #0]
   186a6:	3308      	adds	r3, #8
   186a8:	681b      	ldr	r3, [r3, #0]
   186aa:	9a01      	ldr	r2, [sp, #4]
   186ac:	0e12      	lsrs	r2, r2, #24
   186ae:	b292      	uxth	r2, r2
   186b0:	b2d2      	uxtb	r2, r2
   186b2:	b292      	uxth	r2, r2
   186b4:	4611      	mov	r1, r2
   186b6:	4798      	blx	r3
    // Send arg byte [23:16]
    ssp_interface_->Transfer(static_cast<uint16_t>(arg >> 16) & 0xFF);
   186b8:	9b03      	ldr	r3, [sp, #12]
   186ba:	6858      	ldr	r0, [r3, #4]
   186bc:	9b03      	ldr	r3, [sp, #12]
   186be:	685b      	ldr	r3, [r3, #4]
   186c0:	681b      	ldr	r3, [r3, #0]
   186c2:	3308      	adds	r3, #8
   186c4:	681b      	ldr	r3, [r3, #0]
   186c6:	9a01      	ldr	r2, [sp, #4]
   186c8:	0c12      	lsrs	r2, r2, #16
   186ca:	b292      	uxth	r2, r2
   186cc:	b2d2      	uxtb	r2, r2
   186ce:	b292      	uxth	r2, r2
   186d0:	4611      	mov	r1, r2
   186d2:	4798      	blx	r3
    // Send arg byte [15:8]
    ssp_interface_->Transfer(static_cast<uint16_t>(arg >> 8) & 0xFF);
   186d4:	9b03      	ldr	r3, [sp, #12]
   186d6:	6858      	ldr	r0, [r3, #4]
   186d8:	9b03      	ldr	r3, [sp, #12]
   186da:	685b      	ldr	r3, [r3, #4]
   186dc:	681b      	ldr	r3, [r3, #0]
   186de:	3308      	adds	r3, #8
   186e0:	681b      	ldr	r3, [r3, #0]
   186e2:	9a01      	ldr	r2, [sp, #4]
   186e4:	0a12      	lsrs	r2, r2, #8
   186e6:	b292      	uxth	r2, r2
   186e8:	b2d2      	uxtb	r2, r2
   186ea:	b292      	uxth	r2, r2
   186ec:	4611      	mov	r1, r2
   186ee:	4798      	blx	r3
    // Send arg byte [7:0]
    ssp_interface_->Transfer(static_cast<uint16_t>(arg >> 0) & 0xFF);
   186f0:	9b03      	ldr	r3, [sp, #12]
   186f2:	685a      	ldr	r2, [r3, #4]
   186f4:	9b03      	ldr	r3, [sp, #12]
   186f6:	685b      	ldr	r3, [r3, #4]
   186f8:	681b      	ldr	r3, [r3, #0]
   186fa:	3308      	adds	r3, #8
   186fc:	681b      	ldr	r3, [r3, #0]
   186fe:	9901      	ldr	r1, [sp, #4]
   18700:	b289      	uxth	r1, r1
   18702:	b2c9      	uxtb	r1, r1
   18704:	b289      	uxth	r1, r1
   18706:	4610      	mov	r0, r2
   18708:	4798      	blx	r3
    // Send 7-bit CRC and LSB stop addr (as b1)
    ssp_interface_->Transfer(static_cast<uint16_t>(crc << 1) | 0x01);
   1870a:	9b03      	ldr	r3, [sp, #12]
   1870c:	6858      	ldr	r0, [r3, #4]
   1870e:	9b03      	ldr	r3, [sp, #12]
   18710:	685b      	ldr	r3, [r3, #4]
   18712:	681b      	ldr	r3, [r3, #0]
   18714:	3308      	adds	r3, #8
   18716:	681b      	ldr	r3, [r3, #0]
   18718:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
   1871c:	b292      	uxth	r2, r2
   1871e:	0052      	lsls	r2, r2, #1
   18720:	b292      	uxth	r2, r2
   18722:	f042 0201 	orr.w	r2, r2, #1
   18726:	b292      	uxth	r2, r2
   18728:	4611      	mov	r1, r2
   1872a:	4798      	blx	r3

    // Write garbage while waiting for a response
    // Send at least 1 byte of garbage before checking for a response
    temp_byte = static_cast<uint8_t>(ssp_interface_->Transfer(0xFF));
   1872c:	9b03      	ldr	r3, [sp, #12]
   1872e:	685a      	ldr	r2, [r3, #4]
   18730:	9b03      	ldr	r3, [sp, #12]
   18732:	685b      	ldr	r3, [r3, #4]
   18734:	681b      	ldr	r3, [r3, #0]
   18736:	3308      	adds	r3, #8
   18738:	681b      	ldr	r3, [r3, #0]
   1873a:	21ff      	movs	r1, #255	; 0xff
   1873c:	4610      	mov	r0, r2
   1873e:	4798      	blx	r3
   18740:	4603      	mov	r3, r0
   18742:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
    while (tries++ < kBusTimeout)
   18746:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   1874a:	1c5a      	adds	r2, r3, #1
   1874c:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
   18750:	2bf9      	cmp	r3, #249	; 0xf9
   18752:	bf94      	ite	ls
   18754:	2301      	movls	r3, #1
   18756:	2300      	movhi	r3, #0
   18758:	b2db      	uxtb	r3, r3
   1875a:	2b00      	cmp	r3, #0
   1875c:	d027      	beq.n	187ae <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x2da>
    {
      temp_byte = static_cast<uint8_t>(ssp_interface_->Transfer(0xFF));
   1875e:	9b03      	ldr	r3, [sp, #12]
   18760:	685a      	ldr	r2, [r3, #4]
   18762:	9b03      	ldr	r3, [sp, #12]
   18764:	685b      	ldr	r3, [r3, #4]
   18766:	681b      	ldr	r3, [r3, #0]
   18768:	3308      	adds	r3, #8
   1876a:	681b      	ldr	r3, [r3, #0]
   1876c:	21ff      	movs	r1, #255	; 0xff
   1876e:	4610      	mov	r0, r2
   18770:	4798      	blx	r3
   18772:	4603      	mov	r3, r0
   18774:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
      if (temp_byte != 0xFF)
   18778:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
   1877c:	2bff      	cmp	r3, #255	; 0xff
   1877e:	d00f      	beq.n	187a0 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x2cc>
      {
        // Determine the offset, since the first byte of a
        // response will always be 0.
        while (temp_byte & (0x80 >> bit_offset))
   18780:	f89d 202f 	ldrb.w	r2, [sp, #47]	; 0x2f
   18784:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
   18788:	2180      	movs	r1, #128	; 0x80
   1878a:	fa41 f303 	asr.w	r3, r1, r3
   1878e:	4013      	ands	r3, r2
   18790:	2b00      	cmp	r3, #0
   18792:	d00b      	beq.n	187ac <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x2d8>
        {
          bit_offset++;
   18794:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
   18798:	3301      	adds	r3, #1
   1879a:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
        while (temp_byte & (0x80 >> bit_offset))
   1879e:	e7ef      	b.n	18780 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x2ac>
        }
        break;
      }
      tries++;
   187a0:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   187a4:	3301      	adds	r3, #1
   187a6:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
    while (tries++ < kBusTimeout)
   187aa:	e7cc      	b.n	18746 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x272>
        break;
   187ac:	bf00      	nop
    }

    // Determine response length (in bytes) based on response type
    switch (res_type)
   187ae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   187b0:	2b07      	cmp	r3, #7
   187b2:	d827      	bhi.n	18804 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x330>
   187b4:	a201      	add	r2, pc, #4	; (adr r2, 187bc <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x2e8>)
   187b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   187ba:	bf00      	nop
   187bc:	000187dd 	.word	0x000187dd
   187c0:	000187e5 	.word	0x000187e5
   187c4:	000187ed 	.word	0x000187ed
   187c8:	000187f5 	.word	0x000187f5
   187cc:	00018805 	.word	0x00018805
   187d0:	00018805 	.word	0x00018805
   187d4:	00018805 	.word	0x00018805
   187d8:	000187fd 	.word	0x000187fd
    {
      case ResponseType::kR1: res_len = 1; break;
   187dc:	2301      	movs	r3, #1
   187de:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
   187e2:	e019      	b.n	18818 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x344>
      case ResponseType::kR1b: res_len = 1; break;
   187e4:	2301      	movs	r3, #1
   187e6:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
   187ea:	e015      	b.n	18818 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x344>
      case ResponseType::kR2: res_len = 2; break;
   187ec:	2302      	movs	r3, #2
   187ee:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
   187f2:	e011      	b.n	18818 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x344>
      case ResponseType::kR3: res_len = 5; break;
   187f4:	2305      	movs	r3, #5
   187f6:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
   187fa:	e00d      	b.n	18818 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x344>
      case ResponseType::kR7: res_len = 5; break;
   187fc:	2305      	movs	r3, #5
   187fe:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
   18802:	e009      	b.n	18818 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x344>
      default:
        LOG_ERROR("Response unsupported in SPI mode. Aborting!");
   18804:	f240 433a 	movw	r3, #1082	; 0x43a
   18808:	4a56      	ldr	r2, [pc, #344]	; (18964 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x490>)
   1880a:	4957      	ldr	r1, [pc, #348]	; (18968 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x494>)
   1880c:	4857      	ldr	r0, [pc, #348]	; (1896c <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x498>)
   1880e:	f7fe ffdb 	bl	177c8 <printf>
        return -1;
   18812:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   18816:	e09a      	b.n	1894e <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x47a>
        break;
    }

    // Acquire the response
    uint64_t temp_response = 0;
   18818:	f04f 0200 	mov.w	r2, #0
   1881c:	f04f 0300 	mov.w	r3, #0
   18820:	e9cd 2308 	strd	r2, r3, [sp, #32]
    // Read an extra 8 bits since the response was offset
    uint8_t bytes_to_read =
   18824:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
   18828:	2b00      	cmp	r3, #0
   1882a:	d004      	beq.n	18836 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x362>
   1882c:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
   18830:	3301      	adds	r3, #1
   18832:	b2db      	uxtb	r3, r3
   18834:	e001      	b.n	1883a <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x366>
   18836:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
   1883a:	f88d 301f 	strb.w	r3, [sp, #31]
        static_cast<uint8_t>((bit_offset > 0) ? res_len + 1 : res_len);
    while (bytes_to_read-- > 0)
   1883e:	f89d 301f 	ldrb.w	r3, [sp, #31]
   18842:	1e5a      	subs	r2, r3, #1
   18844:	f88d 201f 	strb.w	r2, [sp, #31]
   18848:	2b00      	cmp	r3, #0
   1884a:	bf14      	ite	ne
   1884c:	2301      	movne	r3, #1
   1884e:	2300      	moveq	r3, #0
   18850:	b2db      	uxtb	r3, r3
   18852:	2b00      	cmp	r3, #0
   18854:	d025      	beq.n	188a2 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x3ce>
    {
      // Make space for the next byte
      temp_response = temp_response << 8;
   18856:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   1885a:	f04f 0200 	mov.w	r2, #0
   1885e:	f04f 0300 	mov.w	r3, #0
   18862:	020b      	lsls	r3, r1, #8
   18864:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
   18868:	0202      	lsls	r2, r0, #8
   1886a:	e9cd 2308 	strd	r2, r3, [sp, #32]
      temp_response |= temp_byte;
   1886e:	f89d b02f 	ldrb.w	fp, [sp, #47]	; 0x2f
   18872:	f04f 0c00 	mov.w	ip, #0
   18876:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   1887a:	ea4b 0200 	orr.w	r2, fp, r0
   1887e:	ea4c 0301 	orr.w	r3, ip, r1
   18882:	e9cd 2308 	strd	r2, r3, [sp, #32]
      temp_byte = static_cast<uint8_t>(ssp_interface_->Transfer(0xFF));
   18886:	9b03      	ldr	r3, [sp, #12]
   18888:	685a      	ldr	r2, [r3, #4]
   1888a:	9b03      	ldr	r3, [sp, #12]
   1888c:	685b      	ldr	r3, [r3, #4]
   1888e:	681b      	ldr	r3, [r3, #0]
   18890:	3308      	adds	r3, #8
   18892:	681b      	ldr	r3, [r3, #0]
   18894:	21ff      	movs	r1, #255	; 0xff
   18896:	4610      	mov	r0, r2
   18898:	4798      	blx	r3
   1889a:	4603      	mov	r3, r0
   1889c:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
    while (bytes_to_read-- > 0)
   188a0:	e7cd      	b.n	1883e <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x36a>
    }
    // Compensate for the bit offset
    temp_response = temp_response >> bit_offset;
   188a2:	f89d 1030 	ldrb.w	r1, [sp, #48]	; 0x30
   188a6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   188aa:	f1c1 0c20 	rsb	ip, r1, #32
   188ae:	f1a1 0020 	sub.w	r0, r1, #32
   188b2:	fa22 f401 	lsr.w	r4, r2, r1
   188b6:	fa03 fc0c 	lsl.w	ip, r3, ip
   188ba:	ea44 040c 	orr.w	r4, r4, ip
   188be:	fa23 f000 	lsr.w	r0, r3, r0
   188c2:	4304      	orrs	r4, r0
   188c4:	fa23 f501 	lsr.w	r5, r3, r1
   188c8:	e9cd 4508 	strd	r4, r5, [sp, #32]

    // Only write to the response buffer if it is provided
    if (response_buffer != nullptr)
   188cc:	9b00      	ldr	r3, [sp, #0]
   188ce:	2b00      	cmp	r3, #0
   188d0:	d025      	beq.n	1891e <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x44a>
    {
      for (int i = 0; i < res_len; i++)
   188d2:	2300      	movs	r3, #0
   188d4:	9306      	str	r3, [sp, #24]
   188d6:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
   188da:	9a06      	ldr	r2, [sp, #24]
   188dc:	429a      	cmp	r2, r3
   188de:	da1e      	bge.n	1891e <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x44a>
      {
        response_buffer[i] =
            static_cast<uint8_t>(temp_response >> 8 * (res_len - 1 - i));
   188e0:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
   188e4:	1e5a      	subs	r2, r3, #1
   188e6:	9b06      	ldr	r3, [sp, #24]
   188e8:	1ad3      	subs	r3, r2, r3
   188ea:	00da      	lsls	r2, r3, #3
   188ec:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   188f0:	f1c2 0020 	rsb	r0, r2, #32
   188f4:	f1a2 0120 	sub.w	r1, r2, #32
   188f8:	fa23 f602 	lsr.w	r6, r3, r2
   188fc:	fa04 f000 	lsl.w	r0, r4, r0
   18900:	4306      	orrs	r6, r0
   18902:	fa24 f101 	lsr.w	r1, r4, r1
   18906:	430e      	orrs	r6, r1
   18908:	fa24 f702 	lsr.w	r7, r4, r2
        response_buffer[i] =
   1890c:	9b06      	ldr	r3, [sp, #24]
   1890e:	9a00      	ldr	r2, [sp, #0]
   18910:	4413      	add	r3, r2
   18912:	b2f2      	uxtb	r2, r6
   18914:	701a      	strb	r2, [r3, #0]
      for (int i = 0; i < res_len; i++)
   18916:	9b06      	ldr	r3, [sp, #24]
   18918:	3301      	adds	r3, #1
   1891a:	9306      	str	r3, [sp, #24]
   1891c:	e7db      	b.n	188d6 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x402>
      }
    }

    // Only end the transaction if keep_alive isn't requested
    if (keep_alive == KeepAlive::kNo)
   1891e:	f89d 305c 	ldrb.w	r3, [sp, #92]	; 0x5c
   18922:	2b00      	cmp	r3, #0
   18924:	d111      	bne.n	1894a <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x476>
    {
      // Deselect the SPI comm board
      chip_select_->SetHigh();
   18926:	9b03      	ldr	r3, [sp, #12]
   18928:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1892a:	9b03      	ldr	r3, [sp, #12]
   1892c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1892e:	681b      	ldr	r3, [r3, #0]
   18930:	330c      	adds	r3, #12
   18932:	681b      	ldr	r3, [r3, #0]
   18934:	4610      	mov	r0, r2
   18936:	4798      	blx	r3
      chip_select_external_->SetHigh();
   18938:	9b03      	ldr	r3, [sp, #12]
   1893a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
   1893c:	9b03      	ldr	r3, [sp, #12]
   1893e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   18940:	681b      	ldr	r3, [r3, #0]
   18942:	330c      	adds	r3, #12
   18944:	681b      	ldr	r3, [r3, #0]
   18946:	4610      	mov	r0, r2
   18948:	4798      	blx	r3
    }
    return res_len;
   1894a:	f89d 4033 	ldrb.w	r4, [sp, #51]	; 0x33
   1894e:	4643      	mov	r3, r8
   18950:	4619      	mov	r1, r3
   18952:	4807      	ldr	r0, [pc, #28]	; (18970 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x49c>)
   18954:	f7fd fccc 	bl	162f0 <__cyg_profile_func_exit>
   18958:	4623      	mov	r3, r4
  }
   1895a:	4618      	mov	r0, r3
   1895c:	b00f      	add	sp, #60	; 0x3c
   1895e:	e8bd 89f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, fp, pc}
   18962:	bf00      	nop
   18964:	0001b848 	.word	0x0001b848
   18968:	0001b744 	.word	0x0001b744
   1896c:	0001b34c 	.word	0x0001b34c
   18970:	000184d5 	.word	0x000184d5

00018974 <Sd::Crc7Add(unsigned char, unsigned char)>:

  // Adds a message byte to the current CRC-7 to get a the new CRC-7
  uint8_t Crc7Add(uint8_t crc, uint8_t message_byte) override
   18974:	b530      	push	{r4, r5, lr}
   18976:	b083      	sub	sp, #12
   18978:	4675      	mov	r5, lr
   1897a:	9001      	str	r0, [sp, #4]
   1897c:	460b      	mov	r3, r1
   1897e:	f88d 3003 	strb.w	r3, [sp, #3]
   18982:	4613      	mov	r3, r2
   18984:	f88d 3002 	strb.w	r3, [sp, #2]
   18988:	462b      	mov	r3, r5
   1898a:	4619      	mov	r1, r3
   1898c:	4809      	ldr	r0, [pc, #36]	; (189b4 <Sd::Crc7Add(unsigned char, unsigned char)+0x40>)
   1898e:	f7fd fc9b 	bl	162c8 <__cyg_profile_func_enter>
  {
    return kCrcTable8.crc_table[(crc << 1) ^ message_byte];
   18992:	f89d 3003 	ldrb.w	r3, [sp, #3]
   18996:	005a      	lsls	r2, r3, #1
   18998:	f89d 3002 	ldrb.w	r3, [sp, #2]
   1899c:	4053      	eors	r3, r2
   1899e:	4a06      	ldr	r2, [pc, #24]	; (189b8 <Sd::Crc7Add(unsigned char, unsigned char)+0x44>)
   189a0:	5cd4      	ldrb	r4, [r2, r3]
   189a2:	462b      	mov	r3, r5
   189a4:	4619      	mov	r1, r3
   189a6:	4803      	ldr	r0, [pc, #12]	; (189b4 <Sd::Crc7Add(unsigned char, unsigned char)+0x40>)
   189a8:	f7fd fca2 	bl	162f0 <__cyg_profile_func_exit>
   189ac:	4623      	mov	r3, r4
  }
   189ae:	4618      	mov	r0, r3
   189b0:	b003      	add	sp, #12
   189b2:	bd30      	pop	{r4, r5, pc}
   189b4:	00018975 	.word	0x00018975
   189b8:	0001b3b4 	.word	0x0001b3b4

000189bc <Sd::GetCrc7(unsigned char*, unsigned char)>:

  // Returns the CRC-7 for a message of "length" bytes
  uint8_t GetCrc7(uint8_t * message, uint8_t length) override
   189bc:	b530      	push	{r4, r5, lr}
   189be:	b087      	sub	sp, #28
   189c0:	4675      	mov	r5, lr
   189c2:	9003      	str	r0, [sp, #12]
   189c4:	9102      	str	r1, [sp, #8]
   189c6:	4613      	mov	r3, r2
   189c8:	f88d 3007 	strb.w	r3, [sp, #7]
   189cc:	462b      	mov	r3, r5
   189ce:	4619      	mov	r1, r3
   189d0:	4815      	ldr	r0, [pc, #84]	; (18a28 <Sd::GetCrc7(unsigned char*, unsigned char)+0x6c>)
   189d2:	f7fd fc79 	bl	162c8 <__cyg_profile_func_enter>
  {
    uint8_t crc = 0;
   189d6:	2300      	movs	r3, #0
   189d8:	f88d 3017 	strb.w	r3, [sp, #23]
    for (int i = 0; i < length; i++)
   189dc:	2300      	movs	r3, #0
   189de:	9304      	str	r3, [sp, #16]
   189e0:	f89d 3007 	ldrb.w	r3, [sp, #7]
   189e4:	9a04      	ldr	r2, [sp, #16]
   189e6:	429a      	cmp	r2, r3
   189e8:	da12      	bge.n	18a10 <Sd::GetCrc7(unsigned char*, unsigned char)+0x54>
    {
      crc = Crc7Add(crc, message[i]);
   189ea:	9b03      	ldr	r3, [sp, #12]
   189ec:	681b      	ldr	r3, [r3, #0]
   189ee:	3318      	adds	r3, #24
   189f0:	681b      	ldr	r3, [r3, #0]
   189f2:	9a04      	ldr	r2, [sp, #16]
   189f4:	9902      	ldr	r1, [sp, #8]
   189f6:	440a      	add	r2, r1
   189f8:	7812      	ldrb	r2, [r2, #0]
   189fa:	f89d 1017 	ldrb.w	r1, [sp, #23]
   189fe:	9803      	ldr	r0, [sp, #12]
   18a00:	4798      	blx	r3
   18a02:	4603      	mov	r3, r0
   18a04:	f88d 3017 	strb.w	r3, [sp, #23]
    for (int i = 0; i < length; i++)
   18a08:	9b04      	ldr	r3, [sp, #16]
   18a0a:	3301      	adds	r3, #1
   18a0c:	9304      	str	r3, [sp, #16]
   18a0e:	e7e7      	b.n	189e0 <Sd::GetCrc7(unsigned char*, unsigned char)+0x24>
    }
    return crc;
   18a10:	f89d 4017 	ldrb.w	r4, [sp, #23]
   18a14:	462b      	mov	r3, r5
   18a16:	4619      	mov	r1, r3
   18a18:	4803      	ldr	r0, [pc, #12]	; (18a28 <Sd::GetCrc7(unsigned char*, unsigned char)+0x6c>)
   18a1a:	f7fd fc69 	bl	162f0 <__cyg_profile_func_exit>
   18a1e:	4623      	mov	r3, r4
  }
   18a20:	4618      	mov	r0, r3
   18a22:	b007      	add	sp, #28
   18a24:	bd30      	pop	{r4, r5, pc}
   18a26:	bf00      	nop
   18a28:	000189bd 	.word	0x000189bd

00018a2c <Sd::GetCrc16(unsigned char*, unsigned short)>:

  // Returns CCITT CRC-16 for a message of "length" bytes
  uint16_t GetCrc16(uint8_t * message, uint16_t length) override
   18a2c:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
   18a30:	b08c      	sub	sp, #48	; 0x30
   18a32:	4677      	mov	r7, lr
   18a34:	9003      	str	r0, [sp, #12]
   18a36:	9102      	str	r1, [sp, #8]
   18a38:	4613      	mov	r3, r2
   18a3a:	f8ad 3006 	strh.w	r3, [sp, #6]
   18a3e:	463b      	mov	r3, r7
   18a40:	4619      	mov	r1, r3
   18a42:	4837      	ldr	r0, [pc, #220]	; (18b20 <Sd::GetCrc16(unsigned char*, unsigned short)+0xf4>)
   18a44:	f7fd fc40 	bl	162c8 <__cyg_profile_func_enter>
  {
    uint64_t crc = 0x0000;
   18a48:	f04f 0300 	mov.w	r3, #0
   18a4c:	f04f 0400 	mov.w	r4, #0
   18a50:	e9cd 340a 	strd	r3, r4, [sp, #40]	; 0x28
    uint64_t temp;
    uint64_t final_value = 0;
   18a54:	f04f 0300 	mov.w	r3, #0
   18a58:	f04f 0400 	mov.w	r4, #0
   18a5c:	e9cd 3406 	strd	r3, r4, [sp, #24]

    for (uint64_t count = 0; count < length; ++count)
   18a60:	f04f 0300 	mov.w	r3, #0
   18a64:	f04f 0400 	mov.w	r4, #0
   18a68:	e9cd 3408 	strd	r3, r4, [sp, #32]
   18a6c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   18a70:	f04f 0400 	mov.w	r4, #0
   18a74:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
   18a78:	42a2      	cmp	r2, r4
   18a7a:	bf08      	it	eq
   18a7c:	4299      	cmpeq	r1, r3
   18a7e:	d23f      	bcs.n	18b00 <Sd::GetCrc16(unsigned char*, unsigned short)+0xd4>
    {
      temp = (*message++ ^ (crc >> 8)) & 0xff;
   18a80:	9b02      	ldr	r3, [sp, #8]
   18a82:	1c5a      	adds	r2, r3, #1
   18a84:	9202      	str	r2, [sp, #8]
   18a86:	781b      	ldrb	r3, [r3, #0]
   18a88:	b2dd      	uxtb	r5, r3
   18a8a:	f04f 0600 	mov.w	r6, #0
   18a8e:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
   18a92:	f04f 0300 	mov.w	r3, #0
   18a96:	f04f 0400 	mov.w	r4, #0
   18a9a:	0a0b      	lsrs	r3, r1, #8
   18a9c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
   18aa0:	0a14      	lsrs	r4, r2, #8
   18aa2:	ea83 0b05 	eor.w	fp, r3, r5
   18aa6:	ea84 0c06 	eor.w	ip, r4, r6
   18aaa:	f04f 01ff 	mov.w	r1, #255	; 0xff
   18aae:	f04f 0200 	mov.w	r2, #0
   18ab2:	ea0b 0301 	and.w	r3, fp, r1
   18ab6:	ea0c 0402 	and.w	r4, ip, r2
   18aba:	e9cd 3404 	strd	r3, r4, [sp, #16]
      crc  = kCrcTable16.crc_table[temp] ^ (crc << 8);
   18abe:	4a19      	ldr	r2, [pc, #100]	; (18b24 <Sd::GetCrc16(unsigned char*, unsigned short)+0xf8>)
   18ac0:	9b04      	ldr	r3, [sp, #16]
   18ac2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
   18ac6:	b29d      	uxth	r5, r3
   18ac8:	f04f 0600 	mov.w	r6, #0
   18acc:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
   18ad0:	f04f 0b00 	mov.w	fp, #0
   18ad4:	f04f 0c00 	mov.w	ip, #0
   18ad8:	ea4f 2c02 	mov.w	ip, r2, lsl #8
   18adc:	ea4c 6c11 	orr.w	ip, ip, r1, lsr #24
   18ae0:	ea4f 2b01 	mov.w	fp, r1, lsl #8
   18ae4:	ea8b 0305 	eor.w	r3, fp, r5
   18ae8:	ea8c 0406 	eor.w	r4, ip, r6
   18aec:	e9cd 340a 	strd	r3, r4, [sp, #40]	; 0x28
    for (uint64_t count = 0; count < length; ++count)
   18af0:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   18af4:	1c59      	adds	r1, r3, #1
   18af6:	f144 0200 	adc.w	r2, r4, #0
   18afa:	e9cd 1208 	strd	r1, r2, [sp, #32]
   18afe:	e7b5      	b.n	18a6c <Sd::GetCrc16(unsigned char*, unsigned short)+0x40>
    }

    return static_cast<uint16_t>(crc ^ final_value);
   18b00:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
   18b04:	f8bd 3018 	ldrh.w	r3, [sp, #24]
   18b08:	4053      	eors	r3, r2
   18b0a:	b29c      	uxth	r4, r3
   18b0c:	463b      	mov	r3, r7
   18b0e:	4619      	mov	r1, r3
   18b10:	4803      	ldr	r0, [pc, #12]	; (18b20 <Sd::GetCrc16(unsigned char*, unsigned short)+0xf4>)
   18b12:	f7fd fbed 	bl	162f0 <__cyg_profile_func_exit>
   18b16:	4623      	mov	r3, r4
  }
   18b18:	4618      	mov	r0, r3
   18b1a:	b00c      	add	sp, #48	; 0x30
   18b1c:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
   18b20:	00018a2d 	.word	0x00018a2d
   18b24:	0001b4b4 	.word	0x0001b4b4

00018b28 <__static_initialization_and_destruction_0(int, int)>:
extern "C" DRESULT disk_ioctl([[maybe_unused]] BYTE drive_number,
                              [[maybe_unused]] BYTE command,
                              [[maybe_unused]] void * buffer)
{
  return RES_PARERR;
}
   18b28:	b530      	push	{r4, r5, lr}
   18b2a:	b085      	sub	sp, #20
   18b2c:	4674      	mov	r4, lr
   18b2e:	9003      	str	r0, [sp, #12]
   18b30:	9102      	str	r1, [sp, #8]
   18b32:	4623      	mov	r3, r4
   18b34:	4619      	mov	r1, r3
   18b36:	480e      	ldr	r0, [pc, #56]	; (18b70 <__static_initialization_and_destruction_0(int, int)+0x48>)
   18b38:	f7fd fbc6 	bl	162c8 <__cyg_profile_func_enter>
   18b3c:	9b03      	ldr	r3, [sp, #12]
   18b3e:	2b01      	cmp	r3, #1
   18b40:	d10e      	bne.n	18b60 <__static_initialization_and_destruction_0(int, int)+0x38>
   18b42:	9b02      	ldr	r3, [sp, #8]
   18b44:	f64f 72ff 	movw	r2, #65535	; 0xffff
   18b48:	4293      	cmp	r3, r2
   18b4a:	d109      	bne.n	18b60 <__static_initialization_and_destruction_0(int, int)+0x38>
Sd sd_card(Sd::DebugSdCard_t{});
   18b4c:	2306      	movs	r3, #6
   18b4e:	9301      	str	r3, [sp, #4]
   18b50:	2300      	movs	r3, #0
   18b52:	9300      	str	r3, [sp, #0]
   18b54:	2308      	movs	r3, #8
   18b56:	2201      	movs	r2, #1
   18b58:	4629      	mov	r1, r5
   18b5a:	4806      	ldr	r0, [pc, #24]	; (18b74 <__static_initialization_and_destruction_0(int, int)+0x4c>)
   18b5c:	f7fe fe96 	bl	1788c <Sd::Sd(Sd::DebugSdCard_t, unsigned char, unsigned char, unsigned char, unsigned char)>
   18b60:	4623      	mov	r3, r4
   18b62:	4619      	mov	r1, r3
   18b64:	4802      	ldr	r0, [pc, #8]	; (18b70 <__static_initialization_and_destruction_0(int, int)+0x48>)
   18b66:	f7fd fbc3 	bl	162f0 <__cyg_profile_func_exit>
}
   18b6a:	bf00      	nop
   18b6c:	b005      	add	sp, #20
   18b6e:	bd30      	pop	{r4, r5, pc}
   18b70:	00018b29 	.word	0x00018b29
   18b74:	100015ac 	.word	0x100015ac

00018b78 <_GLOBAL__sub_I_disk_status>:
   18b78:	b510      	push	{r4, lr}
   18b7a:	4674      	mov	r4, lr
   18b7c:	4623      	mov	r3, r4
   18b7e:	4619      	mov	r1, r3
   18b80:	4806      	ldr	r0, [pc, #24]	; (18b9c <_GLOBAL__sub_I_disk_status+0x24>)
   18b82:	f7fd fba1 	bl	162c8 <__cyg_profile_func_enter>
   18b86:	f64f 71ff 	movw	r1, #65535	; 0xffff
   18b8a:	2001      	movs	r0, #1
   18b8c:	f7ff ffcc 	bl	18b28 <__static_initialization_and_destruction_0(int, int)>
   18b90:	4623      	mov	r3, r4
   18b92:	4619      	mov	r1, r3
   18b94:	4801      	ldr	r0, [pc, #4]	; (18b9c <_GLOBAL__sub_I_disk_status+0x24>)
   18b96:	f7fd fbab 	bl	162f0 <__cyg_profile_func_exit>
   18b9a:	bd10      	pop	{r4, pc}
   18b9c:	00018b79 	.word	0x00018b79

00018ba0 <__cxa_pure_virtual>:
   18ba0:	b508      	push	{r3, lr}
   18ba2:	f000 f80d 	bl	18bc0 <std::terminate()>

00018ba6 <__cxxabiv1::__terminate(void (*)())>:
   18ba6:	b508      	push	{r3, lr}
   18ba8:	4780      	blx	r0
   18baa:	f000 fa0f 	bl	18fcc <abort>
   18bae:	Address 0x0000000000018bae is out of bounds.


00018bb0 <std::get_terminate()>:
   18bb0:	4b02      	ldr	r3, [pc, #8]	; (18bbc <std::get_terminate()+0xc>)
   18bb2:	6818      	ldr	r0, [r3, #0]
   18bb4:	f3bf 8f5b 	dmb	ish
   18bb8:	4770      	bx	lr
   18bba:	bf00      	nop
   18bbc:	100005f4 	.word	0x100005f4

00018bc0 <std::terminate()>:
   18bc0:	b508      	push	{r3, lr}
   18bc2:	f7ff fff5 	bl	18bb0 <std::get_terminate()>
   18bc6:	f7ff ffee 	bl	18ba6 <__cxxabiv1::__terminate(void (*)())>
   18bca:	Address 0x0000000000018bca is out of bounds.


00018bcc <roundf>:
   18bcc:	b082      	sub	sp, #8
   18bce:	ed8d 0a01 	vstr	s0, [sp, #4]
   18bd2:	9901      	ldr	r1, [sp, #4]
   18bd4:	f3c1 53c7 	ubfx	r3, r1, #23, #8
   18bd8:	f1a3 027f 	sub.w	r2, r3, #127	; 0x7f
   18bdc:	2a16      	cmp	r2, #22
   18bde:	dc0c      	bgt.n	18bfa <roundf+0x2e>
   18be0:	2a00      	cmp	r2, #0
   18be2:	db10      	blt.n	18c06 <roundf+0x3a>
   18be4:	4810      	ldr	r0, [pc, #64]	; (18c28 <roundf+0x5c>)
   18be6:	4110      	asrs	r0, r2
   18be8:	4201      	tst	r1, r0
   18bea:	d008      	beq.n	18bfe <roundf+0x32>
   18bec:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   18bf0:	4113      	asrs	r3, r2
   18bf2:	440b      	add	r3, r1
   18bf4:	ea23 0300 	bic.w	r3, r3, r0
   18bf8:	e00b      	b.n	18c12 <roundf+0x46>
   18bfa:	2a80      	cmp	r2, #128	; 0x80
   18bfc:	d00d      	beq.n	18c1a <roundf+0x4e>
   18bfe:	ed9d 0a01 	vldr	s0, [sp, #4]
   18c02:	b002      	add	sp, #8
   18c04:	4770      	bx	lr
   18c06:	3201      	adds	r2, #1
   18c08:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
   18c0c:	d101      	bne.n	18c12 <roundf+0x46>
   18c0e:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
   18c12:	ee00 3a10 	vmov	s0, r3
   18c16:	b002      	add	sp, #8
   18c18:	4770      	bx	lr
   18c1a:	eddd 7a01 	vldr	s15, [sp, #4]
   18c1e:	ee37 0aa7 	vadd.f32	s0, s15, s15
   18c22:	b002      	add	sp, #8
   18c24:	4770      	bx	lr
   18c26:	bf00      	nop
   18c28:	007fffff 	.word	0x007fffff

00018c2c <__aeabi_d2f>:
   18c2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
   18c30:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   18c34:	bf24      	itt	cs
   18c36:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   18c3a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   18c3e:	d90d      	bls.n	18c5c <__aeabi_d2f+0x30>
   18c40:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   18c44:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   18c48:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   18c4c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   18c50:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   18c54:	bf08      	it	eq
   18c56:	f020 0001 	biceq.w	r0, r0, #1
   18c5a:	4770      	bx	lr
   18c5c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   18c60:	d121      	bne.n	18ca6 <__aeabi_d2f+0x7a>
   18c62:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   18c66:	bfbc      	itt	lt
   18c68:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   18c6c:	4770      	bxlt	lr
   18c6e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   18c72:	ea4f 5252 	mov.w	r2, r2, lsr #21
   18c76:	f1c2 0218 	rsb	r2, r2, #24
   18c7a:	f1c2 0c20 	rsb	ip, r2, #32
   18c7e:	fa10 f30c 	lsls.w	r3, r0, ip
   18c82:	fa20 f002 	lsr.w	r0, r0, r2
   18c86:	bf18      	it	ne
   18c88:	f040 0001 	orrne.w	r0, r0, #1
   18c8c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   18c90:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   18c94:	fa03 fc0c 	lsl.w	ip, r3, ip
   18c98:	ea40 000c 	orr.w	r0, r0, ip
   18c9c:	fa23 f302 	lsr.w	r3, r3, r2
   18ca0:	ea4f 0343 	mov.w	r3, r3, lsl #1
   18ca4:	e7cc      	b.n	18c40 <__aeabi_d2f+0x14>
   18ca6:	ea7f 5362 	mvns.w	r3, r2, asr #21
   18caa:	d107      	bne.n	18cbc <__aeabi_d2f+0x90>
   18cac:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   18cb0:	bf1e      	ittt	ne
   18cb2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   18cb6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   18cba:	4770      	bxne	lr
   18cbc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   18cc0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   18cc4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   18cc8:	4770      	bx	lr
   18cca:	bf00      	nop

00018ccc <__aeabi_uldivmod>:
   18ccc:	b953      	cbnz	r3, 18ce4 <__aeabi_uldivmod+0x18>
   18cce:	b94a      	cbnz	r2, 18ce4 <__aeabi_uldivmod+0x18>
   18cd0:	2900      	cmp	r1, #0
   18cd2:	bf08      	it	eq
   18cd4:	2800      	cmpeq	r0, #0
   18cd6:	bf1c      	itt	ne
   18cd8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
   18cdc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   18ce0:	f000 b972 	b.w	18fc8 <__aeabi_idiv0>
   18ce4:	f1ad 0c08 	sub.w	ip, sp, #8
   18ce8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   18cec:	f000 f806 	bl	18cfc <__udivmoddi4>
   18cf0:	f8dd e004 	ldr.w	lr, [sp, #4]
   18cf4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   18cf8:	b004      	add	sp, #16
   18cfa:	4770      	bx	lr

00018cfc <__udivmoddi4>:
   18cfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   18d00:	9e08      	ldr	r6, [sp, #32]
   18d02:	4604      	mov	r4, r0
   18d04:	4688      	mov	r8, r1
   18d06:	2b00      	cmp	r3, #0
   18d08:	d14b      	bne.n	18da2 <__udivmoddi4+0xa6>
   18d0a:	428a      	cmp	r2, r1
   18d0c:	4615      	mov	r5, r2
   18d0e:	d967      	bls.n	18de0 <__udivmoddi4+0xe4>
   18d10:	fab2 f282 	clz	r2, r2
   18d14:	b14a      	cbz	r2, 18d2a <__udivmoddi4+0x2e>
   18d16:	f1c2 0720 	rsb	r7, r2, #32
   18d1a:	fa01 f302 	lsl.w	r3, r1, r2
   18d1e:	fa20 f707 	lsr.w	r7, r0, r7
   18d22:	4095      	lsls	r5, r2
   18d24:	ea47 0803 	orr.w	r8, r7, r3
   18d28:	4094      	lsls	r4, r2
   18d2a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
   18d2e:	0c23      	lsrs	r3, r4, #16
   18d30:	fbb8 f7fe 	udiv	r7, r8, lr
   18d34:	fa1f fc85 	uxth.w	ip, r5
   18d38:	fb0e 8817 	mls	r8, lr, r7, r8
   18d3c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
   18d40:	fb07 f10c 	mul.w	r1, r7, ip
   18d44:	4299      	cmp	r1, r3
   18d46:	d909      	bls.n	18d5c <__udivmoddi4+0x60>
   18d48:	18eb      	adds	r3, r5, r3
   18d4a:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
   18d4e:	f080 811b 	bcs.w	18f88 <__udivmoddi4+0x28c>
   18d52:	4299      	cmp	r1, r3
   18d54:	f240 8118 	bls.w	18f88 <__udivmoddi4+0x28c>
   18d58:	3f02      	subs	r7, #2
   18d5a:	442b      	add	r3, r5
   18d5c:	1a5b      	subs	r3, r3, r1
   18d5e:	b2a4      	uxth	r4, r4
   18d60:	fbb3 f0fe 	udiv	r0, r3, lr
   18d64:	fb0e 3310 	mls	r3, lr, r0, r3
   18d68:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
   18d6c:	fb00 fc0c 	mul.w	ip, r0, ip
   18d70:	45a4      	cmp	ip, r4
   18d72:	d909      	bls.n	18d88 <__udivmoddi4+0x8c>
   18d74:	192c      	adds	r4, r5, r4
   18d76:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   18d7a:	f080 8107 	bcs.w	18f8c <__udivmoddi4+0x290>
   18d7e:	45a4      	cmp	ip, r4
   18d80:	f240 8104 	bls.w	18f8c <__udivmoddi4+0x290>
   18d84:	3802      	subs	r0, #2
   18d86:	442c      	add	r4, r5
   18d88:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
   18d8c:	eba4 040c 	sub.w	r4, r4, ip
   18d90:	2700      	movs	r7, #0
   18d92:	b11e      	cbz	r6, 18d9c <__udivmoddi4+0xa0>
   18d94:	40d4      	lsrs	r4, r2
   18d96:	2300      	movs	r3, #0
   18d98:	e9c6 4300 	strd	r4, r3, [r6]
   18d9c:	4639      	mov	r1, r7
   18d9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   18da2:	428b      	cmp	r3, r1
   18da4:	d909      	bls.n	18dba <__udivmoddi4+0xbe>
   18da6:	2e00      	cmp	r6, #0
   18da8:	f000 80eb 	beq.w	18f82 <__udivmoddi4+0x286>
   18dac:	2700      	movs	r7, #0
   18dae:	e9c6 0100 	strd	r0, r1, [r6]
   18db2:	4638      	mov	r0, r7
   18db4:	4639      	mov	r1, r7
   18db6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   18dba:	fab3 f783 	clz	r7, r3
   18dbe:	2f00      	cmp	r7, #0
   18dc0:	d147      	bne.n	18e52 <__udivmoddi4+0x156>
   18dc2:	428b      	cmp	r3, r1
   18dc4:	d302      	bcc.n	18dcc <__udivmoddi4+0xd0>
   18dc6:	4282      	cmp	r2, r0
   18dc8:	f200 80fa 	bhi.w	18fc0 <__udivmoddi4+0x2c4>
   18dcc:	1a84      	subs	r4, r0, r2
   18dce:	eb61 0303 	sbc.w	r3, r1, r3
   18dd2:	2001      	movs	r0, #1
   18dd4:	4698      	mov	r8, r3
   18dd6:	2e00      	cmp	r6, #0
   18dd8:	d0e0      	beq.n	18d9c <__udivmoddi4+0xa0>
   18dda:	e9c6 4800 	strd	r4, r8, [r6]
   18dde:	e7dd      	b.n	18d9c <__udivmoddi4+0xa0>
   18de0:	b902      	cbnz	r2, 18de4 <__udivmoddi4+0xe8>
   18de2:	deff      	udf	#255	; 0xff
   18de4:	fab2 f282 	clz	r2, r2
   18de8:	2a00      	cmp	r2, #0
   18dea:	f040 808f 	bne.w	18f0c <__udivmoddi4+0x210>
   18dee:	1b49      	subs	r1, r1, r5
   18df0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
   18df4:	fa1f f885 	uxth.w	r8, r5
   18df8:	2701      	movs	r7, #1
   18dfa:	fbb1 fcfe 	udiv	ip, r1, lr
   18dfe:	0c23      	lsrs	r3, r4, #16
   18e00:	fb0e 111c 	mls	r1, lr, ip, r1
   18e04:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   18e08:	fb08 f10c 	mul.w	r1, r8, ip
   18e0c:	4299      	cmp	r1, r3
   18e0e:	d907      	bls.n	18e20 <__udivmoddi4+0x124>
   18e10:	18eb      	adds	r3, r5, r3
   18e12:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
   18e16:	d202      	bcs.n	18e1e <__udivmoddi4+0x122>
   18e18:	4299      	cmp	r1, r3
   18e1a:	f200 80cd 	bhi.w	18fb8 <__udivmoddi4+0x2bc>
   18e1e:	4684      	mov	ip, r0
   18e20:	1a59      	subs	r1, r3, r1
   18e22:	b2a3      	uxth	r3, r4
   18e24:	fbb1 f0fe 	udiv	r0, r1, lr
   18e28:	fb0e 1410 	mls	r4, lr, r0, r1
   18e2c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
   18e30:	fb08 f800 	mul.w	r8, r8, r0
   18e34:	45a0      	cmp	r8, r4
   18e36:	d907      	bls.n	18e48 <__udivmoddi4+0x14c>
   18e38:	192c      	adds	r4, r5, r4
   18e3a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   18e3e:	d202      	bcs.n	18e46 <__udivmoddi4+0x14a>
   18e40:	45a0      	cmp	r8, r4
   18e42:	f200 80b6 	bhi.w	18fb2 <__udivmoddi4+0x2b6>
   18e46:	4618      	mov	r0, r3
   18e48:	eba4 0408 	sub.w	r4, r4, r8
   18e4c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
   18e50:	e79f      	b.n	18d92 <__udivmoddi4+0x96>
   18e52:	f1c7 0c20 	rsb	ip, r7, #32
   18e56:	40bb      	lsls	r3, r7
   18e58:	fa22 fe0c 	lsr.w	lr, r2, ip
   18e5c:	ea4e 0e03 	orr.w	lr, lr, r3
   18e60:	fa01 f407 	lsl.w	r4, r1, r7
   18e64:	fa20 f50c 	lsr.w	r5, r0, ip
   18e68:	fa21 f30c 	lsr.w	r3, r1, ip
   18e6c:	ea4f 481e 	mov.w	r8, lr, lsr #16
   18e70:	4325      	orrs	r5, r4
   18e72:	fbb3 f9f8 	udiv	r9, r3, r8
   18e76:	0c2c      	lsrs	r4, r5, #16
   18e78:	fb08 3319 	mls	r3, r8, r9, r3
   18e7c:	fa1f fa8e 	uxth.w	sl, lr
   18e80:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
   18e84:	fb09 f40a 	mul.w	r4, r9, sl
   18e88:	429c      	cmp	r4, r3
   18e8a:	fa02 f207 	lsl.w	r2, r2, r7
   18e8e:	fa00 f107 	lsl.w	r1, r0, r7
   18e92:	d90b      	bls.n	18eac <__udivmoddi4+0x1b0>
   18e94:	eb1e 0303 	adds.w	r3, lr, r3
   18e98:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
   18e9c:	f080 8087 	bcs.w	18fae <__udivmoddi4+0x2b2>
   18ea0:	429c      	cmp	r4, r3
   18ea2:	f240 8084 	bls.w	18fae <__udivmoddi4+0x2b2>
   18ea6:	f1a9 0902 	sub.w	r9, r9, #2
   18eaa:	4473      	add	r3, lr
   18eac:	1b1b      	subs	r3, r3, r4
   18eae:	b2ad      	uxth	r5, r5
   18eb0:	fbb3 f0f8 	udiv	r0, r3, r8
   18eb4:	fb08 3310 	mls	r3, r8, r0, r3
   18eb8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
   18ebc:	fb00 fa0a 	mul.w	sl, r0, sl
   18ec0:	45a2      	cmp	sl, r4
   18ec2:	d908      	bls.n	18ed6 <__udivmoddi4+0x1da>
   18ec4:	eb1e 0404 	adds.w	r4, lr, r4
   18ec8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   18ecc:	d26b      	bcs.n	18fa6 <__udivmoddi4+0x2aa>
   18ece:	45a2      	cmp	sl, r4
   18ed0:	d969      	bls.n	18fa6 <__udivmoddi4+0x2aa>
   18ed2:	3802      	subs	r0, #2
   18ed4:	4474      	add	r4, lr
   18ed6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   18eda:	fba0 8902 	umull	r8, r9, r0, r2
   18ede:	eba4 040a 	sub.w	r4, r4, sl
   18ee2:	454c      	cmp	r4, r9
   18ee4:	46c2      	mov	sl, r8
   18ee6:	464b      	mov	r3, r9
   18ee8:	d354      	bcc.n	18f94 <__udivmoddi4+0x298>
   18eea:	d051      	beq.n	18f90 <__udivmoddi4+0x294>
   18eec:	2e00      	cmp	r6, #0
   18eee:	d069      	beq.n	18fc4 <__udivmoddi4+0x2c8>
   18ef0:	ebb1 050a 	subs.w	r5, r1, sl
   18ef4:	eb64 0403 	sbc.w	r4, r4, r3
   18ef8:	fa04 fc0c 	lsl.w	ip, r4, ip
   18efc:	40fd      	lsrs	r5, r7
   18efe:	40fc      	lsrs	r4, r7
   18f00:	ea4c 0505 	orr.w	r5, ip, r5
   18f04:	e9c6 5400 	strd	r5, r4, [r6]
   18f08:	2700      	movs	r7, #0
   18f0a:	e747      	b.n	18d9c <__udivmoddi4+0xa0>
   18f0c:	f1c2 0320 	rsb	r3, r2, #32
   18f10:	fa20 f703 	lsr.w	r7, r0, r3
   18f14:	4095      	lsls	r5, r2
   18f16:	fa01 f002 	lsl.w	r0, r1, r2
   18f1a:	fa21 f303 	lsr.w	r3, r1, r3
   18f1e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
   18f22:	4338      	orrs	r0, r7
   18f24:	0c01      	lsrs	r1, r0, #16
   18f26:	fbb3 f7fe 	udiv	r7, r3, lr
   18f2a:	fa1f f885 	uxth.w	r8, r5
   18f2e:	fb0e 3317 	mls	r3, lr, r7, r3
   18f32:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   18f36:	fb07 f308 	mul.w	r3, r7, r8
   18f3a:	428b      	cmp	r3, r1
   18f3c:	fa04 f402 	lsl.w	r4, r4, r2
   18f40:	d907      	bls.n	18f52 <__udivmoddi4+0x256>
   18f42:	1869      	adds	r1, r5, r1
   18f44:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
   18f48:	d22f      	bcs.n	18faa <__udivmoddi4+0x2ae>
   18f4a:	428b      	cmp	r3, r1
   18f4c:	d92d      	bls.n	18faa <__udivmoddi4+0x2ae>
   18f4e:	3f02      	subs	r7, #2
   18f50:	4429      	add	r1, r5
   18f52:	1acb      	subs	r3, r1, r3
   18f54:	b281      	uxth	r1, r0
   18f56:	fbb3 f0fe 	udiv	r0, r3, lr
   18f5a:	fb0e 3310 	mls	r3, lr, r0, r3
   18f5e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   18f62:	fb00 f308 	mul.w	r3, r0, r8
   18f66:	428b      	cmp	r3, r1
   18f68:	d907      	bls.n	18f7a <__udivmoddi4+0x27e>
   18f6a:	1869      	adds	r1, r5, r1
   18f6c:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
   18f70:	d217      	bcs.n	18fa2 <__udivmoddi4+0x2a6>
   18f72:	428b      	cmp	r3, r1
   18f74:	d915      	bls.n	18fa2 <__udivmoddi4+0x2a6>
   18f76:	3802      	subs	r0, #2
   18f78:	4429      	add	r1, r5
   18f7a:	1ac9      	subs	r1, r1, r3
   18f7c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
   18f80:	e73b      	b.n	18dfa <__udivmoddi4+0xfe>
   18f82:	4637      	mov	r7, r6
   18f84:	4630      	mov	r0, r6
   18f86:	e709      	b.n	18d9c <__udivmoddi4+0xa0>
   18f88:	4607      	mov	r7, r0
   18f8a:	e6e7      	b.n	18d5c <__udivmoddi4+0x60>
   18f8c:	4618      	mov	r0, r3
   18f8e:	e6fb      	b.n	18d88 <__udivmoddi4+0x8c>
   18f90:	4541      	cmp	r1, r8
   18f92:	d2ab      	bcs.n	18eec <__udivmoddi4+0x1f0>
   18f94:	ebb8 0a02 	subs.w	sl, r8, r2
   18f98:	eb69 020e 	sbc.w	r2, r9, lr
   18f9c:	3801      	subs	r0, #1
   18f9e:	4613      	mov	r3, r2
   18fa0:	e7a4      	b.n	18eec <__udivmoddi4+0x1f0>
   18fa2:	4660      	mov	r0, ip
   18fa4:	e7e9      	b.n	18f7a <__udivmoddi4+0x27e>
   18fa6:	4618      	mov	r0, r3
   18fa8:	e795      	b.n	18ed6 <__udivmoddi4+0x1da>
   18faa:	4667      	mov	r7, ip
   18fac:	e7d1      	b.n	18f52 <__udivmoddi4+0x256>
   18fae:	4681      	mov	r9, r0
   18fb0:	e77c      	b.n	18eac <__udivmoddi4+0x1b0>
   18fb2:	3802      	subs	r0, #2
   18fb4:	442c      	add	r4, r5
   18fb6:	e747      	b.n	18e48 <__udivmoddi4+0x14c>
   18fb8:	f1ac 0c02 	sub.w	ip, ip, #2
   18fbc:	442b      	add	r3, r5
   18fbe:	e72f      	b.n	18e20 <__udivmoddi4+0x124>
   18fc0:	4638      	mov	r0, r7
   18fc2:	e708      	b.n	18dd6 <__udivmoddi4+0xda>
   18fc4:	4637      	mov	r7, r6
   18fc6:	e6e9      	b.n	18d9c <__udivmoddi4+0xa0>

00018fc8 <__aeabi_idiv0>:
   18fc8:	4770      	bx	lr
   18fca:	bf00      	nop

00018fcc <abort>:
   18fcc:	b508      	push	{r3, lr}
   18fce:	2006      	movs	r0, #6
   18fd0:	f000 f858 	bl	19084 <raise>
   18fd4:	2001      	movs	r0, #1
   18fd6:	f7fd f8d7 	bl	16188 <_exit>
   18fda:	Address 0x0000000000018fda is out of bounds.


00018fdc <__libc_init_array>:
   18fdc:	b570      	push	{r4, r5, r6, lr}
   18fde:	4e0d      	ldr	r6, [pc, #52]	; (19014 <__libc_init_array+0x38>)
   18fe0:	4c0d      	ldr	r4, [pc, #52]	; (19018 <__libc_init_array+0x3c>)
   18fe2:	1ba4      	subs	r4, r4, r6
   18fe4:	10a4      	asrs	r4, r4, #2
   18fe6:	2500      	movs	r5, #0
   18fe8:	42a5      	cmp	r5, r4
   18fea:	d109      	bne.n	19000 <__libc_init_array+0x24>
   18fec:	4e0b      	ldr	r6, [pc, #44]	; (1901c <__libc_init_array+0x40>)
   18fee:	4c0c      	ldr	r4, [pc, #48]	; (19020 <__libc_init_array+0x44>)
   18ff0:	f7f7 f986 	bl	10300 <_init>
   18ff4:	1ba4      	subs	r4, r4, r6
   18ff6:	10a4      	asrs	r4, r4, #2
   18ff8:	2500      	movs	r5, #0
   18ffa:	42a5      	cmp	r5, r4
   18ffc:	d105      	bne.n	1900a <__libc_init_array+0x2e>
   18ffe:	bd70      	pop	{r4, r5, r6, pc}
   19000:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   19004:	4798      	blx	r3
   19006:	3501      	adds	r5, #1
   19008:	e7ee      	b.n	18fe8 <__libc_init_array+0xc>
   1900a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   1900e:	4798      	blx	r3
   19010:	3501      	adds	r5, #1
   19012:	e7f2      	b.n	18ffa <__libc_init_array+0x1e>
   19014:	0001030c 	.word	0x0001030c
   19018:	0001030c 	.word	0x0001030c
   1901c:	0001030c 	.word	0x0001030c
   19020:	0001031c 	.word	0x0001031c

00019024 <memset>:
   19024:	4402      	add	r2, r0
   19026:	4603      	mov	r3, r0
   19028:	4293      	cmp	r3, r2
   1902a:	d100      	bne.n	1902e <memset+0xa>
   1902c:	4770      	bx	lr
   1902e:	f803 1b01 	strb.w	r1, [r3], #1
   19032:	e7f9      	b.n	19028 <memset+0x4>

00019034 <_raise_r>:
   19034:	291f      	cmp	r1, #31
   19036:	b538      	push	{r3, r4, r5, lr}
   19038:	4604      	mov	r4, r0
   1903a:	460d      	mov	r5, r1
   1903c:	d904      	bls.n	19048 <_raise_r+0x14>
   1903e:	2316      	movs	r3, #22
   19040:	6003      	str	r3, [r0, #0]
   19042:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   19046:	bd38      	pop	{r3, r4, r5, pc}
   19048:	6c42      	ldr	r2, [r0, #68]	; 0x44
   1904a:	b112      	cbz	r2, 19052 <_raise_r+0x1e>
   1904c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
   19050:	b94b      	cbnz	r3, 19066 <_raise_r+0x32>
   19052:	4620      	mov	r0, r4
   19054:	f000 f830 	bl	190b8 <_getpid_r>
   19058:	462a      	mov	r2, r5
   1905a:	4601      	mov	r1, r0
   1905c:	4620      	mov	r0, r4
   1905e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   19062:	f000 b817 	b.w	19094 <_kill_r>
   19066:	2b01      	cmp	r3, #1
   19068:	d00a      	beq.n	19080 <_raise_r+0x4c>
   1906a:	1c59      	adds	r1, r3, #1
   1906c:	d103      	bne.n	19076 <_raise_r+0x42>
   1906e:	2316      	movs	r3, #22
   19070:	6003      	str	r3, [r0, #0]
   19072:	2001      	movs	r0, #1
   19074:	e7e7      	b.n	19046 <_raise_r+0x12>
   19076:	2400      	movs	r4, #0
   19078:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
   1907c:	4628      	mov	r0, r5
   1907e:	4798      	blx	r3
   19080:	2000      	movs	r0, #0
   19082:	e7e0      	b.n	19046 <_raise_r+0x12>

00019084 <raise>:
   19084:	4b02      	ldr	r3, [pc, #8]	; (19090 <raise+0xc>)
   19086:	4601      	mov	r1, r0
   19088:	6818      	ldr	r0, [r3, #0]
   1908a:	f7ff bfd3 	b.w	19034 <_raise_r>
   1908e:	bf00      	nop
   19090:	100005f8 	.word	0x100005f8

00019094 <_kill_r>:
   19094:	b538      	push	{r3, r4, r5, lr}
   19096:	4c07      	ldr	r4, [pc, #28]	; (190b4 <_kill_r+0x20>)
   19098:	2300      	movs	r3, #0
   1909a:	4605      	mov	r5, r0
   1909c:	4608      	mov	r0, r1
   1909e:	4611      	mov	r1, r2
   190a0:	6023      	str	r3, [r4, #0]
   190a2:	f7fd f88f 	bl	161c4 <_kill>
   190a6:	1c43      	adds	r3, r0, #1
   190a8:	d102      	bne.n	190b0 <_kill_r+0x1c>
   190aa:	6823      	ldr	r3, [r4, #0]
   190ac:	b103      	cbz	r3, 190b0 <_kill_r+0x1c>
   190ae:	602b      	str	r3, [r5, #0]
   190b0:	bd38      	pop	{r3, r4, r5, pc}
   190b2:	bf00      	nop
   190b4:	10001614 	.word	0x10001614

000190b8 <_getpid_r>:
   190b8:	f7fd b872 	b.w	161a0 <_getpid>
   190bc:	63617453 	.word	0x63617453
   190c0:	6544206b 	.word	0x6544206b
   190c4:	20687470 	.word	0x20687470
   190c8:	7a25203d 	.word	0x7a25203d
   190cc:	00000a64 	.word	0x00000a64
   190d0:	25232020 	.word	0x25232020
   190d4:	203a757a 	.word	0x203a757a
   190d8:	70257830 	.word	0x70257830
   190dc:	0000000a 	.word	0x0000000a
   190e0:	6e75520a 	.word	0x6e75520a
   190e4:	6874203a 	.word	0x6874203a
   190e8:	6f662065 	.word	0x6f662065
   190ec:	776f6c6c 	.word	0x776f6c6c
   190f0:	20676e69 	.word	0x20676e69
   190f4:	6d6d6f63 	.word	0x6d6d6f63
   190f8:	20646e61 	.word	0x20646e61
   190fc:	79206e69 	.word	0x79206e69
   19100:	2072756f 	.word	0x2072756f
   19104:	6a6f7270 	.word	0x6a6f7270
   19108:	20746365 	.word	0x20746365
   1910c:	65726964 	.word	0x65726964
   19110:	726f7463 	.word	0x726f7463
   19114:	00000079 	.word	0x00000079
   19118:	1b20200a 	.word	0x1b20200a
   1911c:	333b315b 	.word	0x333b315b
   19120:	616d6d37 	.word	0x616d6d37
   19124:	7320656b 	.word	0x7320656b
   19128:	6b636174 	.word	0x6b636174
   1912c:	63617274 	.word	0x63617274
   19130:	73252d65 	.word	0x73252d65
   19134:	41525420 	.word	0x41525420
   19138:	3d534543 	.word	0x3d534543
   1913c:	00000022 	.word	0x00000022
   19140:	70257830 	.word	0x70257830
   19144:	00000000 	.word	0x00000000
   19148:	25783020 	.word	0x25783020
   1914c:	00000070 	.word	0x00000070
   19150:	5b1b0a22 	.word	0x5b1b0a22
   19154:	00006d30 	.word	0x00006d30
   19158:	73696854 	.word	0x73696854
   1915c:	6c697720 	.word	0x6c697720
   19160:	6572206c 	.word	0x6572206c
   19164:	74726f70 	.word	0x74726f70
   19168:	65687420 	.word	0x65687420
   1916c:	6c696620 	.word	0x6c696620
   19170:	6e612065 	.word	0x6e612065
   19174:	696c2064 	.word	0x696c2064
   19178:	6e20656e 	.word	0x6e20656e
   1917c:	65626d75 	.word	0x65626d75
   19180:	68742072 	.word	0x68742072
   19184:	6c207461 	.word	0x6c207461
   19188:	74206465 	.word	0x74206465
   1918c:	6874206f 	.word	0x6874206f
   19190:	66207369 	.word	0x66207369
   19194:	74636e75 	.word	0x74636e75
   19198:	206e6f69 	.word	0x206e6f69
   1919c:	6e696562 	.word	0x6e696562
   191a0:	61632067 	.word	0x61632067
   191a4:	64656c6c 	.word	0x64656c6c
   191a8:	0000002e 	.word	0x0000002e
   191ac:	6c707061 	.word	0x6c707061
   191b0:	74616369 	.word	0x74616369
   191b4:	006e6f69 	.word	0x006e6f69
   191b8:	33345b1b 	.word	0x33345b1b
   191bc:	4157206d 	.word	0x4157206d
   191c0:	4e494e52 	.word	0x4e494e52
   191c4:	305b1b47 	.word	0x305b1b47
   191c8:	6d34393b 	.word	0x6d34393b
   191cc:	3a73253a 	.word	0x3a73253a
   191d0:	3b305b1b 	.word	0x3b305b1b
   191d4:	256d3239 	.word	0x256d3239
   191d8:	5b1b3a73 	.word	0x5b1b3a73
   191dc:	33393b30 	.word	0x33393b30
   191e0:	3e64256d 	.word	0x3e64256d
   191e4:	305b1b20 	.word	0x305b1b20
   191e8:	6d37333b 	.word	0x6d37333b
   191ec:	74726f50 	.word	0x74726f50
   191f0:	20642520 	.word	0x20642520
   191f4:	6e6e6163 	.word	0x6e6e6163
   191f8:	6220746f 	.word	0x6220746f
   191fc:	73752065 	.word	0x73752065
   19200:	66206465 	.word	0x66206465
   19204:	4520726f 	.word	0x4520726f
   19208:	72657478 	.word	0x72657478
   1920c:	206c616e 	.word	0x206c616e
   19210:	65746e49 	.word	0x65746e49
   19214:	70757272 	.word	0x70757272
   19218:	202e7374 	.word	0x202e7374
   1921c:	6465654e 	.word	0x6465654e
   19220:	206f7420 	.word	0x206f7420
   19224:	20657375 	.word	0x20657375
   19228:	4f495047 	.word	0x4f495047
   1922c:	206e6f20 	.word	0x206e6f20
   19230:	74726f50 	.word	0x74726f50
   19234:	6f203020 	.word	0x6f203020
   19238:	2e322072 	.word	0x2e322072
   1923c:	6d305b1b 	.word	0x6d305b1b
   19240:	6d305b1b 	.word	0x6d305b1b
   19244:	0000000a 	.word	0x0000000a
   19248:	33345b1b 	.word	0x33345b1b
   1924c:	4157206d 	.word	0x4157206d
   19250:	4e494e52 	.word	0x4e494e52
   19254:	305b1b47 	.word	0x305b1b47
   19258:	6d34393b 	.word	0x6d34393b
   1925c:	3a73253a 	.word	0x3a73253a
   19260:	3b305b1b 	.word	0x3b305b1b
   19264:	256d3239 	.word	0x256d3239
   19268:	5b1b3a73 	.word	0x5b1b3a73
   1926c:	33393b30 	.word	0x33393b30
   19270:	3e64256d 	.word	0x3e64256d
   19274:	305b1b20 	.word	0x305b1b20
   19278:	6d37333b 	.word	0x6d37333b
   1927c:	65676445 	.word	0x65676445
   19280:	20642520 	.word	0x20642520
   19284:	6e6e6163 	.word	0x6e6e6163
   19288:	6220746f 	.word	0x6220746f
   1928c:	73752065 	.word	0x73752065
   19290:	66206465 	.word	0x66206465
   19294:	4520726f 	.word	0x4520726f
   19298:	72657478 	.word	0x72657478
   1929c:	206c616e 	.word	0x206c616e
   192a0:	65746e49 	.word	0x65746e49
   192a4:	70757272 	.word	0x70757272
   192a8:	4e2e7374 	.word	0x4e2e7374
   192ac:	20646565 	.word	0x20646565
   192b0:	75206f74 	.word	0x75206f74
   192b4:	61206573 	.word	0x61206573
   192b8:	73697220 	.word	0x73697220
   192bc:	2c676e69 	.word	0x2c676e69
   192c0:	6c616620 	.word	0x6c616620
   192c4:	676e696c 	.word	0x676e696c
   192c8:	726f202c 	.word	0x726f202c
   192cc:	746f6220 	.word	0x746f6220
   192d0:	6f632068 	.word	0x6f632068
   192d4:	6769666e 	.word	0x6769666e
   192d8:	74617275 	.word	0x74617275
   192dc:	2e6e6f69 	.word	0x2e6e6f69
   192e0:	6d305b1b 	.word	0x6d305b1b
   192e4:	0000000a 	.word	0x0000000a
   192e8:	31345b1b 	.word	0x31345b1b
   192ec:	4952436d 	.word	0x4952436d
   192f0:	41434954 	.word	0x41434954
   192f4:	305b1b4c 	.word	0x305b1b4c
   192f8:	6d34393b 	.word	0x6d34393b
   192fc:	3a73253a 	.word	0x3a73253a
   19300:	3b305b1b 	.word	0x3b305b1b
   19304:	256d3239 	.word	0x256d3239
   19308:	5b1b3a73 	.word	0x5b1b3a73
   1930c:	33393b30 	.word	0x33393b30
   19310:	3e64256d 	.word	0x3e64256d
   19314:	305b1b20 	.word	0x305b1b20
   19318:	6d37333b 	.word	0x6d37333b
   1931c:	65737341 	.word	0x65737341
   19320:	6f697472 	.word	0x6f697472
   19324:	6146206e 	.word	0x6146206e
   19328:	72756c69 	.word	0x72756c69
   1932c:	43202c65 	.word	0x43202c65
   19330:	69646e6f 	.word	0x69646e6f
   19334:	6e6f6974 	.word	0x6e6f6974
   19338:	73655420 	.word	0x73655420
   1933c:	3a646574 	.word	0x3a646574
   19340:	65702820 	.word	0x65702820
   19344:	68706972 	.word	0x68706972
   19348:	6c617265 	.word	0x6c617265
   1934c:	7669645f 	.word	0x7669645f
   19350:	72656469 	.word	0x72656469
   19354:	203d3c20 	.word	0x203d3c20
   19358:	200a2934 	.word	0x200a2934
   1935c:	20202020 	.word	0x20202020
   19360:	20202020 	.word	0x20202020
   19364:	76694420 	.word	0x76694420
   19368:	72656469 	.word	0x72656469
   1936c:	73756d20 	.word	0x73756d20
   19370:	74276e74 	.word	0x74276e74
   19374:	63786520 	.word	0x63786520
   19378:	20646565 	.word	0x20646565
   1937c:	5b1b3233 	.word	0x5b1b3233
   19380:	5b1b6d30 	.word	0x5b1b6d30
   19384:	000a6d30 	.word	0x000a6d30
   19388:	6972500a 	.word	0x6972500a
   1938c:	6e69746e 	.word	0x6e69746e
   19390:	74532067 	.word	0x74532067
   19394:	206b6361 	.word	0x206b6361
   19398:	63617254 	.word	0x63617254
   1939c:	000a3a65 	.word	0x000a3a65
   193a0:	31345b1b 	.word	0x31345b1b
   193a4:	4952436d 	.word	0x4952436d
   193a8:	41434954 	.word	0x41434954
   193ac:	305b1b4c 	.word	0x305b1b4c
   193b0:	6d34393b 	.word	0x6d34393b
   193b4:	3a73253a 	.word	0x3a73253a
   193b8:	3b305b1b 	.word	0x3b305b1b
   193bc:	256d3239 	.word	0x256d3239
   193c0:	5b1b3a73 	.word	0x5b1b3a73
   193c4:	33393b30 	.word	0x33393b30
   193c8:	3e64256d 	.word	0x3e64256d
   193cc:	305b1b20 	.word	0x305b1b20
   193d0:	6d37333b 	.word	0x6d37333b
   193d4:	65737341 	.word	0x65737341
   193d8:	6f697472 	.word	0x6f697472
   193dc:	6146206e 	.word	0x6146206e
   193e0:	72756c69 	.word	0x72756c69
   193e4:	43202c65 	.word	0x43202c65
   193e8:	69646e6f 	.word	0x69646e6f
   193ec:	6e6f6974 	.word	0x6e6f6974
   193f0:	73655420 	.word	0x73655420
   193f4:	3a646574 	.word	0x3a646574
   193f8:	65642820 	.word	0x65642820
   193fc:	65726973 	.word	0x65726973
   19400:	70735f64 	.word	0x70735f64
   19404:	5f646565 	.word	0x5f646565
   19408:	6d5f6e69 	.word	0x6d5f6e69
   1940c:	3c207a68 	.word	0x3c207a68
   19410:	34383320 	.word	0x34383320
   19414:	20262620 	.word	0x20262620
   19418:	69736564 	.word	0x69736564
   1941c:	5f646572 	.word	0x5f646572
   19420:	65657073 	.word	0x65657073
   19424:	6e695f64 	.word	0x6e695f64
   19428:	7a686d5f 	.word	0x7a686d5f
   1942c:	31203e20 	.word	0x31203e20
   19430:	200a2932 	.word	0x200a2932
   19434:	20202020 	.word	0x20202020
   19438:	20202020 	.word	0x20202020
   1943c:	65724620 	.word	0x65724620
   19440:	6e657571 	.word	0x6e657571
   19444:	6d207963 	.word	0x6d207963
   19448:	20747375 	.word	0x20747375
   1944c:	6c206562 	.word	0x6c206562
   19450:	7265776f 	.word	0x7265776f
   19454:	61687420 	.word	0x61687420
   19458:	3833206e 	.word	0x3833206e
   1945c:	484d2034 	.word	0x484d2034
   19460:	646e617a 	.word	0x646e617a
   19464:	65726720 	.word	0x65726720
   19468:	72657461 	.word	0x72657461
   1946c:	61687420 	.word	0x61687420
   19470:	726f206e 	.word	0x726f206e
   19474:	75716520 	.word	0x75716520
   19478:	74206c61 	.word	0x74206c61
   1947c:	3231206f 	.word	0x3231206f
   19480:	7a484d20 	.word	0x7a484d20
   19484:	6d305b1b 	.word	0x6d305b1b
   19488:	6d305b1b 	.word	0x6d305b1b
   1948c:	0000000a 	.word	0x0000000a
   19490:	31345b1b 	.word	0x31345b1b
   19494:	4952436d 	.word	0x4952436d
   19498:	41434954 	.word	0x41434954
   1949c:	305b1b4c 	.word	0x305b1b4c
   194a0:	6d34393b 	.word	0x6d34393b
   194a4:	3a73253a 	.word	0x3a73253a
   194a8:	3b305b1b 	.word	0x3b305b1b
   194ac:	256d3239 	.word	0x256d3239
   194b0:	5b1b3a73 	.word	0x5b1b3a73
   194b4:	33393b30 	.word	0x33393b30
   194b8:	3e64256d 	.word	0x3e64256d
   194bc:	305b1b20 	.word	0x305b1b20
   194c0:	6d37333b 	.word	0x6d37333b
   194c4:	65737341 	.word	0x65737341
   194c8:	6f697472 	.word	0x6f697472
   194cc:	6146206e 	.word	0x6146206e
   194d0:	72756c69 	.word	0x72756c69
   194d4:	43202c65 	.word	0x43202c65
   194d8:	69646e6f 	.word	0x69646e6f
   194dc:	6e6f6974 	.word	0x6e6f6974
   194e0:	73655420 	.word	0x73655420
   194e4:	3a646574 	.word	0x3a646574
   194e8:	69642820 	.word	0x69642820
   194ec:	65646976 	.word	0x65646976
   194f0:	61765f72 	.word	0x61765f72
   194f4:	2065756c 	.word	0x2065756c
   194f8:	2938203c 	.word	0x2938203c
   194fc:	2020200a 	.word	0x2020200a
   19500:	20202020 	.word	0x20202020
   19504:	50202020 	.word	0x50202020
   19508:	64204c4c 	.word	0x64204c4c
   1950c:	64697669 	.word	0x64697669
   19510:	76207265 	.word	0x76207265
   19514:	65756c61 	.word	0x65756c61
   19518:	6e657720 	.word	0x6e657720
   1951c:	756f2074 	.word	0x756f2074
   19520:	666f2074 	.word	0x666f2074
   19524:	756f6220 	.word	0x756f6220
   19528:	1b73646e 	.word	0x1b73646e
   1952c:	1b6d305b 	.word	0x1b6d305b
   19530:	0a6d305b 	.word	0x0a6d305b
   19534:	00000000 	.word	0x00000000
   19538:	31345b1b 	.word	0x31345b1b
   1953c:	4952436d 	.word	0x4952436d
   19540:	41434954 	.word	0x41434954
   19544:	305b1b4c 	.word	0x305b1b4c
   19548:	6d34393b 	.word	0x6d34393b
   1954c:	3a73253a 	.word	0x3a73253a
   19550:	3b305b1b 	.word	0x3b305b1b
   19554:	256d3239 	.word	0x256d3239
   19558:	5b1b3a73 	.word	0x5b1b3a73
   1955c:	33393b30 	.word	0x33393b30
   19560:	3e64256d 	.word	0x3e64256d
   19564:	305b1b20 	.word	0x305b1b20
   19568:	6d37333b 	.word	0x6d37333b
   1956c:	65737341 	.word	0x65737341
   19570:	6f697472 	.word	0x6f697472
   19574:	6146206e 	.word	0x6146206e
   19578:	72756c69 	.word	0x72756c69
   1957c:	43202c65 	.word	0x43202c65
   19580:	69646e6f 	.word	0x69646e6f
   19584:	6e6f6974 	.word	0x6e6f6974
   19588:	73655420 	.word	0x73655420
   1958c:	3a646574 	.word	0x3a646574
   19590:	61662820 	.word	0x61662820
   19594:	2965736c 	.word	0x2965736c
   19598:	2020200a 	.word	0x2020200a
   1959c:	20202020 	.word	0x20202020
   195a0:	50202020 	.word	0x50202020
   195a4:	6c204c4c 	.word	0x6c204c4c
   195a8:	206b636f 	.word	0x206b636f
   195ac:	6c756f63 	.word	0x6c756f63
   195b0:	6f6e2064 	.word	0x6f6e2064
   195b4:	65622074 	.word	0x65622074
   195b8:	74736520 	.word	0x74736520
   195bc:	696c6261 	.word	0x696c6261
   195c0:	64656873 	.word	0x64656873
   195c4:	66656220 	.word	0x66656220
   195c8:	2065726f 	.word	0x2065726f
   195cc:	656d6974 	.word	0x656d6974
   195d0:	1b74756f 	.word	0x1b74756f
   195d4:	1b6d305b 	.word	0x1b6d305b
   195d8:	0a6d305b 	.word	0x0a6d305b
   195dc:	00000000 	.word	0x00000000
   195e0:	31345b1b 	.word	0x31345b1b
   195e4:	4952436d 	.word	0x4952436d
   195e8:	41434954 	.word	0x41434954
   195ec:	305b1b4c 	.word	0x305b1b4c
   195f0:	6d34393b 	.word	0x6d34393b
   195f4:	3a73253a 	.word	0x3a73253a
   195f8:	3b305b1b 	.word	0x3b305b1b
   195fc:	256d3239 	.word	0x256d3239
   19600:	5b1b3a73 	.word	0x5b1b3a73
   19604:	33393b30 	.word	0x33393b30
   19608:	3e64256d 	.word	0x3e64256d
   1960c:	305b1b20 	.word	0x305b1b20
   19610:	6d37333b 	.word	0x6d37333b
   19614:	65737341 	.word	0x65737341
   19618:	6f697472 	.word	0x6f697472
   1961c:	6146206e 	.word	0x6146206e
   19620:	72756c69 	.word	0x72756c69
   19624:	43202c65 	.word	0x43202c65
   19628:	69646e6f 	.word	0x69646e6f
   1962c:	6e6f6974 	.word	0x6e6f6974
   19630:	73655420 	.word	0x73655420
   19634:	3a646574 	.word	0x3a646574
   19638:	70632820 	.word	0x70632820
   1963c:	69645f75 	.word	0x69645f75
   19640:	65646976 	.word	0x65646976
   19644:	203c2072 	.word	0x203c2072
   19648:	0a293233 	.word	0x0a293233
   1964c:	20202020 	.word	0x20202020
   19650:	20202020 	.word	0x20202020
   19654:	69442020 	.word	0x69442020
   19658:	65646976 	.word	0x65646976
   1965c:	756d2072 	.word	0x756d2072
   19660:	276e7473 	.word	0x276e7473
   19664:	78652074 	.word	0x78652074
   19668:	64656563 	.word	0x64656563
   1966c:	1b323320 	.word	0x1b323320
   19670:	1b6d305b 	.word	0x1b6d305b
   19674:	0a6d305b 	.word	0x0a6d305b
   19678:	00000000 	.word	0x00000000
   1967c:	32345b1b 	.word	0x32345b1b
   19680:	2020206d 	.word	0x2020206d
   19684:	464e4920 	.word	0x464e4920
   19688:	305b1b4f 	.word	0x305b1b4f
   1968c:	6d34393b 	.word	0x6d34393b
   19690:	3a73253a 	.word	0x3a73253a
   19694:	3b305b1b 	.word	0x3b305b1b
   19698:	256d3239 	.word	0x256d3239
   1969c:	5b1b3a73 	.word	0x5b1b3a73
   196a0:	33393b30 	.word	0x33393b30
   196a4:	3e64256d 	.word	0x3e64256d
   196a8:	305b1b20 	.word	0x305b1b20
   196ac:	6d37333b 	.word	0x6d37333b
   196b0:	72617453 	.word	0x72617453
   196b4:	305b1b74 	.word	0x305b1b74
   196b8:	00000a6d 	.word	0x00000a6d
   196bc:	32345b1b 	.word	0x32345b1b
   196c0:	2020206d 	.word	0x2020206d
   196c4:	464e4920 	.word	0x464e4920
   196c8:	305b1b4f 	.word	0x305b1b4f
   196cc:	6d34393b 	.word	0x6d34393b
   196d0:	3a73253a 	.word	0x3a73253a
   196d4:	3b305b1b 	.word	0x3b305b1b
   196d8:	256d3239 	.word	0x256d3239
   196dc:	5b1b3a73 	.word	0x5b1b3a73
   196e0:	33393b30 	.word	0x33393b30
   196e4:	3e64256d 	.word	0x3e64256d
   196e8:	305b1b20 	.word	0x305b1b20
   196ec:	6d37333b 	.word	0x6d37333b
   196f0:	6e727554 	.word	0x6e727554
   196f4:	20676e69 	.word	0x20676e69
   196f8:	2044454c 	.word	0x2044454c
   196fc:	1b214e4f 	.word	0x1b214e4f
   19700:	0a6d305b 	.word	0x0a6d305b
   19704:	00000000 	.word	0x00000000
   19708:	32345b1b 	.word	0x32345b1b
   1970c:	2020206d 	.word	0x2020206d
   19710:	464e4920 	.word	0x464e4920
   19714:	305b1b4f 	.word	0x305b1b4f
   19718:	6d34393b 	.word	0x6d34393b
   1971c:	3a73253a 	.word	0x3a73253a
   19720:	3b305b1b 	.word	0x3b305b1b
   19724:	256d3239 	.word	0x256d3239
   19728:	5b1b3a73 	.word	0x5b1b3a73
   1972c:	33393b30 	.word	0x33393b30
   19730:	3e64256d 	.word	0x3e64256d
   19734:	305b1b20 	.word	0x305b1b20
   19738:	6d37333b 	.word	0x6d37333b
   1973c:	6e727554 	.word	0x6e727554
   19740:	20676e69 	.word	0x20676e69
   19744:	2044454c 	.word	0x2044454c
   19748:	2146464f 	.word	0x2146464f
   1974c:	6d305b1b 	.word	0x6d305b1b
   19750:	0000000a 	.word	0x0000000a
   19754:	32345b1b 	.word	0x32345b1b
   19758:	2020206d 	.word	0x2020206d
   1975c:	464e4920 	.word	0x464e4920
   19760:	305b1b4f 	.word	0x305b1b4f
   19764:	6d34393b 	.word	0x6d34393b
   19768:	3a73253a 	.word	0x3a73253a
   1976c:	3b305b1b 	.word	0x3b305b1b
   19770:	256d3239 	.word	0x256d3239
   19774:	5b1b3a73 	.word	0x5b1b3a73
   19778:	33393b30 	.word	0x33393b30
   1977c:	3e64256d 	.word	0x3e64256d
   19780:	305b1b20 	.word	0x305b1b20
   19784:	6d37333b 	.word	0x6d37333b
   19788:	74747542 	.word	0x74747542
   1978c:	30206e6f 	.word	0x30206e6f
   19790:	65727020 	.word	0x65727020
   19794:	64657373 	.word	0x64657373
   19798:	305b1b21 	.word	0x305b1b21
   1979c:	00000a6d 	.word	0x00000a6d
   197a0:	32345b1b 	.word	0x32345b1b
   197a4:	2020206d 	.word	0x2020206d
   197a8:	464e4920 	.word	0x464e4920
   197ac:	305b1b4f 	.word	0x305b1b4f
   197b0:	6d34393b 	.word	0x6d34393b
   197b4:	3a73253a 	.word	0x3a73253a
   197b8:	3b305b1b 	.word	0x3b305b1b
   197bc:	256d3239 	.word	0x256d3239
   197c0:	5b1b3a73 	.word	0x5b1b3a73
   197c4:	33393b30 	.word	0x33393b30
   197c8:	3e64256d 	.word	0x3e64256d
   197cc:	305b1b20 	.word	0x305b1b20
   197d0:	6d37333b 	.word	0x6d37333b
   197d4:	74747542 	.word	0x74747542
   197d8:	31206e6f 	.word	0x31206e6f
   197dc:	65727020 	.word	0x65727020
   197e0:	64657373 	.word	0x64657373
   197e4:	305b1b21 	.word	0x305b1b21
   197e8:	00000a6d 	.word	0x00000a6d
   197ec:	32345b1b 	.word	0x32345b1b
   197f0:	2020206d 	.word	0x2020206d
   197f4:	464e4920 	.word	0x464e4920
   197f8:	305b1b4f 	.word	0x305b1b4f
   197fc:	6d34393b 	.word	0x6d34393b
   19800:	3a73253a 	.word	0x3a73253a
   19804:	3b305b1b 	.word	0x3b305b1b
   19808:	256d3239 	.word	0x256d3239
   1980c:	5b1b3a73 	.word	0x5b1b3a73
   19810:	33393b30 	.word	0x33393b30
   19814:	3e64256d 	.word	0x3e64256d
   19818:	305b1b20 	.word	0x305b1b20
   1981c:	6d37333b 	.word	0x6d37333b
   19820:	74747542 	.word	0x74747542
   19824:	32206e6f 	.word	0x32206e6f
   19828:	65727020 	.word	0x65727020
   1982c:	64657373 	.word	0x64657373
   19830:	305b1b21 	.word	0x305b1b21
   19834:	00000a6d 	.word	0x00000a6d
   19838:	32345b1b 	.word	0x32345b1b
   1983c:	2020206d 	.word	0x2020206d
   19840:	464e4920 	.word	0x464e4920
   19844:	305b1b4f 	.word	0x305b1b4f
   19848:	6d34393b 	.word	0x6d34393b
   1984c:	3a73253a 	.word	0x3a73253a
   19850:	3b305b1b 	.word	0x3b305b1b
   19854:	256d3239 	.word	0x256d3239
   19858:	5b1b3a73 	.word	0x5b1b3a73
   1985c:	33393b30 	.word	0x33393b30
   19860:	3e64256d 	.word	0x3e64256d
   19864:	305b1b20 	.word	0x305b1b20
   19868:	6d37333b 	.word	0x6d37333b
   1986c:	74747542 	.word	0x74747542
   19870:	33206e6f 	.word	0x33206e6f
   19874:	65727020 	.word	0x65727020
   19878:	64657373 	.word	0x64657373
   1987c:	305b1b21 	.word	0x305b1b21
   19880:	00000a6d 	.word	0x00000a6d
   19884:	0000002d 	.word	0x0000002d
   19888:	0000002e 	.word	0x0000002e
   1988c:	00000026 	.word	0x00000026
   19890:	ffff007c 	.word	0xffff007c

00019894 <Gpio::ValidPortCheck()::file>:
   19894:	6f697067 7070682e ffffff00              gpio.hpp....

000198a0 <Gpio::SetInterruptEdge(GpioInterface::Edge)::file>:
   198a0:	6f697067 7070682e ffffff00              gpio.hpp....

000198ac <Gpio::ClearInterruptEdge(GpioInterface::Edge)::file>:
   198ac:	6f697067 7070682e ffffff00              gpio.hpp....

000198b8 <Lpc40xxSystemController::SetPeripheralClockDivider(unsigned char)::file>:
   198b8:	74737973 635f6d65 72746e6f 656c6c6f     system_controlle
   198c8:	70682e72 ffff0070                       r.hpp...

000198d0 <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)::file>:
   198d0:	74737973 635f6d65 72746e6f 656c6c6f     system_controlle
   198e0:	70682e72 ffff0070                       r.hpp...

000198e8 <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)::file>:
   198e8:	74737973 635f6d65 72746e6f 656c6c6f     system_controlle
   198f8:	70682e72 ffff0070                       r.hpp...

00019900 <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)::file>:
   19900:	74737973 635f6d65 72746e6f 656c6c6f     system_controlle
   19910:	70682e72 ffff0070                       r.hpp...

00019918 <Lpc40xxSystemController::SetCpuClockDivider(unsigned char)::file>:
   19918:	74737973 635f6d65 72746e6f 656c6c6f     system_controlle
   19928:	70682e72 ffff0070                       r.hpp...

00019930 <Ssp::kPinSelect>:
   19930:	ff040202                                ....

00019934 <Ssp::kSspPinMatrix>:
   19934:	00019b70 00001200 00019b70 00001100     p.......p.......
   19944:	00019b70 00000f00 00019b70 00000900     p.......p.......
   19954:	00019b70 00000800 00019b70 00000700     p.......p.......
   19964:	00019b70 00000101 00019b70 00000401     p.......p.......
   19974:	00019b70 00000001                       p.......

0001997c <Ssp::kPowerBit>:
   1997c:	00000015 0000000a 00000014              ............

00019988 <main::file>:
   19988:	6e69616d 7070632e ffffff00              main.cpp....

00019994 <DemoButton()::file>:
   19994:	6e69616d 7070632e ffffff00              main.cpp....

000199a0 <DemoButton()::file>:
   199a0:	6e69616d 7070632e ffffff00              main.cpp....

000199ac <DemoButton()::file>:
   199ac:	6e69616d 7070632e ffffff00              main.cpp....

000199b8 <DemoButton()::file>:
   199b8:	6e69616d 7070632e ffffff00              main.cpp....

000199c4 <vtable for Ssd1306>:
	...
   199cc:	00012c5d 00012c89 00012cb5 00012e9d     ],...,...,......
   199dc:	00012b1d 00012b45 00012f75 00012fad     .+..E+..u/.../..
   199ec:	00013041                                A0..

000199f0 <vtable for PixelDisplayInterface>:
	...
   199f8:	00018ba1 00018ba1 00018ba1 00018ba1     ................
   19a08:	00012b1d 00012b45 00018ba1 00018ba1     .+..E+..........
   19a18:	00012b6d                                m+..

00019a1c <vtable for Ssp>:
	...
   19a24:	00012091 00012175 000121ed 00012259     . ..u!...!..Y"..
   19a34:	00012345 00012551 000126b1 0001289d     E#..Q%...&...(..
   19a44:	fffffffc 00000000 00011931 000119c1     ........1.......
   19a54:	00011a19 00011a31 00011a45 00011a85     ....1...E.......
   19a64:	00011ab5                                ....

00019a68 <vtable for SspInterface>:
	...
   19a70:	00018ba1 00018ba1 00018ba1 00018ba1     ................
   19a80:	00018ba1 00018ba1 00018ba1 00018ba1     ................

00019a90 <vtable for Lpc40xxSystemController>:
	...
   19a98:	00011931 000119c1 00011a19 00011a31     1...........1...
   19aa8:	00011a45 00011a85 00011ab5              E...........

00019ab4 <vtable for SystemControllerInterface>:
	...
   19abc:	00018ba1 00018ba1 00018ba1 00018ba1     ................
   19acc:	00018ba1 00018ba1 00018ba1              ............

00019ad8 <vtable for Gpio>:
	...
   19ae0:	00011049 000110c5 00011141 00011185     I.......A.......
   19af0:	000111e9 0001124d 00011291 000112fd     ....M...........
   19b00:	00011375 000113e5 0001167d 000116c5     u.......}.......
   19b10:	0001148d 000114e9 0001156d 000115f5     ........m.......

00019b20 <vtable for GpioInterface>:
	...
   19b28:	00018ba1 00018ba1 00018ba1 00018ba1     ................
   19b38:	00018ba1 00018ba1 00018ba1 00018ba1     ................
   19b48:	00018ba1 00018ba1 00018ba1 00018ba1     ................
   19b58:	00018ba1 00018ba1 00018ba1 00018ba1     ................

00019b68 <vtable for Pin>:
	...
   19b70:	000106f9 00010771 000107f1 00010865     ....q.......e...
   19b80:	000108d9 00010955 000109d1 00010a45     ....U.......E...
   19b90:	00010ac1 00010b35 00010ba9 00010c81     ....5...........
   19ba0:	00010cad                                ....

00019ba4 <vtable for PinInterface>:
	...
   19bac:	00018ba1 00018ba1 00018ba1 00018ba1     ................
   19bbc:	00018ba1 00018ba1 00018ba1 00018ba1     ................
   19bcc:	00018ba1 00018ba1 00018ba1 00018ba1     ................
   19bdc:	00018ba1                                ....

00019be0 <main::__PRETTY_FUNCTION__>:
   19be0:	20746e69 6e69616d ff002928              int main()..

00019bec <DemoButton()::__PRETTY_FUNCTION__>:
   19bec:	64696f76 6d654420 7475426f 286e6f74     void DemoButton(
   19bfc:	ffff0029                                )...

00019c00 <Lpc40xxSystemController::SetPeripheralClockDivider(unsigned char)::__PRETTY_FUNCTION__>:
   19c00:	74726976 206c6175 64696f76 63704c20     virtual void Lpc
   19c10:	78783034 74737953 6f436d65 6f72746e     40xxSystemContro
   19c20:	72656c6c 65533a3a 72655074 65687069     ller::SetPeriphe
   19c30:	436c6172 6b636f6c 69766944 28726564     ralClockDivider(
   19c40:	746e6975 29745f38 ffffff00              uint8_t)....

00019c4c <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)::__PRETTY_FUNCTION__>:
   19c4c:	746e6975 745f3233 63704c20 78783034     uint32_t Lpc40xx
   19c5c:	74737953 6f436d65 6f72746e 72656c6c     SystemController
   19c6c:	65533a3a 69614d74 6c6c506e 63704c28     ::SetMainPll(Lpc
   19c7c:	78783034 74737953 6f436d65 6f72746e     40xxSystemContro
   19c8c:	72656c6c 6c503a3a 706e496c 202c7475     ller::PllInput, 
   19c9c:	746e6975 745f3631 ffff0029              uint16_t)...

00019ca8 <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)::__PRETTY_FUNCTION__>:
   19ca8:	746e6975 745f3233 63704c20 78783034     uint32_t Lpc40xx
   19cb8:	74737953 6f436d65 6f72746e 72656c6c     SystemController
   19cc8:	61433a3a 6c75636c 50657461 4c286c6c     ::CalculatePll(L
   19cd8:	30346370 79537878 6d657473 746e6f43     pc40xxSystemCont
   19ce8:	6c6c6f72 3a3a7265 496c6c50 7475706e     roller::PllInput
   19cf8:	6975202c 3631746e 0029745f              , uint16_t).

00019d04 <Lpc40xxSystemController::SetCpuClockDivider(unsigned char)::__PRETTY_FUNCTION__>:
   19d04:	64696f76 63704c20 78783034 74737953     void Lpc40xxSyst
   19d14:	6f436d65 6f72746e 72656c6c 65533a3a     emController::Se
   19d24:	75704374 636f6c43 7669446b 72656469     tCpuClockDivider
   19d34:	6e697528 745f3874 ffff0029              (uint8_t)...

00019d40 <Gpio::ClearInterruptEdge(GpioInterface::Edge)::__PRETTY_FUNCTION__>:
   19d40:	74726976 206c6175 64696f76 69704720     virtual void Gpi
   19d50:	433a3a6f 7261656c 65746e49 70757272     o::ClearInterrup
   19d60:	67644574 70472865 6e496f69 66726574     tEdge(GpioInterf
   19d70:	3a656361 6764453a ff002965              ace::Edge)..

00019d7c <Gpio::ValidPortCheck()::__PRETTY_FUNCTION__>:
   19d7c:	6c6f6f62 69704720 563a3a6f 64696c61     bool Gpio::Valid
   19d8c:	74726f50 63656843 0029286b              PortCheck().

00019d98 <Gpio::SetInterruptEdge(GpioInterface::Edge)::__PRETTY_FUNCTION__>:
   19d98:	74726976 206c6175 64696f76 69704720     virtual void Gpi
   19da8:	533a3a6f 6e497465 72726574 45747075     o::SetInterruptE
   19db8:	28656764 6f697047 65746e49 63616672     dge(GpioInterfac
   19dc8:	453a3a65 29656764 ffffff00 63617453     e::Edge)....Stac
   19dd8:	6544206b 20687470 7a25203d 00000a64     k Depth = %zd...
   19de8:	25232020 203a757a 70257830 0000000a       #%zu: 0x%p....
   19df8:	6e75520a 6874203a 6f662065 776f6c6c     .Run: the follow
   19e08:	20676e69 6d6d6f63 20646e61 79206e69     ing command in y
   19e18:	2072756f 6a6f7270 20746365 65726964     our project dire
   19e28:	726f7463 00000079 1b20200a 333b315b     ctory....  .[1;3
   19e38:	616d6d37 7320656b 6b636174 63617274     7mmake stacktrac
   19e48:	73252d65 41525420 3d534543 00000022     e-%s TRACES="...
   19e58:	70257830 00000000 25783020 00000070     0x%p.... 0x%p...
   19e68:	5b1b0a22 00006d30 73696854 6c697720     "..[0m..This wil
   19e78:	6572206c 74726f70 65687420 6c696620     l report the fil
   19e88:	6e612065 696c2064 6e20656e 65626d75     e and line numbe
   19e98:	68742072 6c207461 74206465 6874206f     r that led to th
   19ea8:	66207369 74636e75 206e6f69 6e696562     is function bein
   19eb8:	61632067 64656c6c 0000002e 6c707061     g called....appl
   19ec8:	74616369 006e6f69 31345b1b 4952436d     ication..[41mCRI
   19ed8:	41434954 305b1b4c 6d34393b 3a73253a     TICAL.[0;94m:%s:
   19ee8:	3b305b1b 256d3239 5b1b3a73 33393b30     .[0;92m%s:.[0;93
   19ef8:	3e64256d 305b1b20 6d37333b 65737341     m%d> .[0;37mAsse
   19f08:	6f697472 6146206e 72756c69 43202c65     rtion Failure, C
   19f18:	69646e6f 6e6f6974 73655420 3a646574     ondition Tested:
   19f28:	65702820 68706972 6c617265 7669645f      (peripheral_div
   19f38:	72656469 203d3c20 200a2934 20202020     ider <= 4).     
   19f48:	20202020 76694420 72656469 73756d20          Divider mus
   19f58:	74276e74 63786520 20646565 5b1b3233     tn't exceed 32.[
   19f68:	5b1b6d30 000a6d30 6972500a 6e69746e     0m.[0m...Printin
   19f78:	74532067 206b6361 63617254 000a3a65     g Stack Trace:..
   19f88:	31345b1b 4952436d 41434954 305b1b4c     .[41mCRITICAL.[0
   19f98:	6d34393b 3a73253a 3b305b1b 256d3239     ;94m:%s:.[0;92m%
   19fa8:	5b1b3a73 33393b30 3e64256d 305b1b20     s:.[0;93m%d> .[0
   19fb8:	6d37333b 65737341 6f697472 6146206e     ;37mAssertion Fa
   19fc8:	72756c69 43202c65 69646e6f 6e6f6974     ilure, Condition
   19fd8:	73655420 3a646574 65642820 65726973      Tested: (desire
   19fe8:	70735f64 5f646565 6d5f6e69 3c207a68     d_speed_in_mhz <
   19ff8:	34383320 20262620 69736564 5f646572      384 && desired_
   1a008:	65657073 6e695f64 7a686d5f 31203e20     speed_in_mhz > 1
   1a018:	200a2932 20202020 20202020 65724620     2).          Fre
   1a028:	6e657571 6d207963 20747375 6c206562     quency must be l
   1a038:	7265776f 61687420 3833206e 484d2034     ower than 384 MH
   1a048:	646e617a 65726720 72657461 61687420     zand greater tha
   1a058:	726f206e 75716520 74206c61 3231206f     n or equal to 12
   1a068:	7a484d20 6d305b1b 6d305b1b 0000000a      MHz.[0m.[0m....
   1a078:	31345b1b 4952436d 41434954 305b1b4c     .[41mCRITICAL.[0
   1a088:	6d34393b 3a73253a 3b305b1b 256d3239     ;94m:%s:.[0;92m%
   1a098:	5b1b3a73 33393b30 3e64256d 305b1b20     s:.[0;93m%d> .[0
   1a0a8:	6d37333b 65737341 6f697472 6146206e     ;37mAssertion Fa
   1a0b8:	72756c69 43202c65 69646e6f 6e6f6974     ilure, Condition
   1a0c8:	73655420 3a646574 69642820 65646976      Tested: (divide
   1a0d8:	61765f72 2065756c 2938203c 2020200a     r_value < 8).   
   1a0e8:	20202020 50202020 64204c4c 64697669            PLL divid
   1a0f8:	76207265 65756c61 6e657720 756f2074     er value went ou
   1a108:	666f2074 756f6220 1b73646e 1b6d305b     t of bounds.[0m.
   1a118:	0a6d305b 00000000 31345b1b 4952436d     [0m......[41mCRI
   1a128:	41434954 305b1b4c 6d34393b 3a73253a     TICAL.[0;94m:%s:
   1a138:	3b305b1b 256d3239 5b1b3a73 33393b30     .[0;92m%s:.[0;93
   1a148:	3e64256d 305b1b20 6d37333b 65737341     m%d> .[0;37mAsse
   1a158:	6f697472 6146206e 72756c69 43202c65     rtion Failure, C
   1a168:	69646e6f 6e6f6974 73655420 3a646574     ondition Tested:
   1a178:	61662820 2965736c 2020200a 20202020      (false).       
   1a188:	50202020 6c204c4c 206b636f 6c756f63        PLL lock coul
   1a198:	6f6e2064 65622074 74736520 696c6261     d not be establi
   1a1a8:	64656873 66656220 2065726f 656d6974     shed before time
   1a1b8:	1b74756f 1b6d305b 0a6d305b 00000000     out.[0m.[0m.....
   1a1c8:	31345b1b 4952436d 41434954 305b1b4c     .[41mCRITICAL.[0
   1a1d8:	6d34393b 3a73253a 3b305b1b 256d3239     ;94m:%s:.[0;92m%
   1a1e8:	5b1b3a73 33393b30 3e64256d 305b1b20     s:.[0;93m%d> .[0
   1a1f8:	6d37333b 65737341 6f697472 6146206e     ;37mAssertion Fa
   1a208:	72756c69 43202c65 69646e6f 6e6f6974     ilure, Condition
   1a218:	73655420 3a646574 70632820 69645f75      Tested: (cpu_di
   1a228:	65646976 203c2072 0a293233 20202020     vider < 32).    
   1a238:	20202020 69442020 65646976 756d2072           Divider mu
   1a248:	276e7473 78652074 64656563 1b323320     stn't exceed 32.
   1a258:	1b6d305b 0a6d305b 00000000 31345b1b     [0m.[0m......[41
   1a268:	4952436d 41434954 305b1b4c 6d34393b     mCRITICAL.[0;94m
   1a278:	3a73253a 3b305b1b 256d3239 5b1b3a73     :%s:.[0;92m%s:.[
   1a288:	33393b30 3e64256d 305b1b20 6d37333b     0;93m%d> .[0;37m
   1a298:	65737341 6f697472 6146206e 72756c69     Assertion Failur
   1a2a8:	43202c65 69646e6f 6e6f6974 73655420     e, Condition Tes
   1a2b8:	3a646574 72662820 65757165 2079636e     ted: (frequency 
   1a2c8:	30203d21 20200a29 20202020 20202020     != 0).          
   1a2d8:	6e6e6143 6820746f 20657661 6f72657a     Cannot have zero
   1a2e8:	63697420 7020736b 6d207265 6f726369      ticks per micro
   1a2f8:	6f636573 202c646e 61656c70 63206573     second, please c
   1a308:	736f6f68 20312065 6d20726f 2e65726f     hoose 1 or more.
   1a318:	6d305b1b 6d305b1b 0000000a 33345b1b     .[0m.[0m.....[43
   1a328:	4157206d 4e494e52 305b1b47 6d34393b     m WARNING.[0;94m
   1a338:	3a73253a 3b305b1b 256d3239 5b1b3a73     :%s:.[0;92m%s:.[
   1a348:	33393b30 3e64256d 305b1b20 6d37333b     0;93m%d> .[0;37m
   1a358:	74737953 54206d65 72656d69 73616820     System Timer has
   1a368:	49414620 2044454c 73206f74 74726174      FAILED to start
   1a378:	305b1b21 305b1b6d ff000a6d              !.[0m.[0m...

0001a384 <Timer::kPowerbit>:
   1a384:	00000001 00000002 00000016 00000017     ................

0001a394 <Timer::kTimerIrq>:
   1a394:	04030201                                ....

0001a398 <Timer::kTimerIsr>:
   1a398:	000159e1 00015a1d 00015a59 00015a95     .Y...Z..YZ...Z..

0001a3a8 <Timer::Initialize(unsigned long, void (*)(), long)::file>:
   1a3a8:	656d6974 70682e72 ffff0070              timer.hpp...

0001a3b4 <Uart::kTxUartPortFunction>:
   1a3b4:	05020201                                ....

0001a3b8 <Uart::kRxUartPortFunction>:
   1a3b8:	03020201                                ....

0001a3bc <Uart::kPowerbit>:
   1a3bc:	00000003 00000018 00000019 00000008     ................

0001a3cc <LowLevelInit()::file>:
   1a3cc:	72617473 2e707574 00707063              startup.cpp.

0001a3d8 <vtable for Uart>:
	...
   1a3e0:	00014fd9 000150a5 000151d5 00015309     .O...P...Q...S..
   1a3f0:	fffffffc 00000000 00011931 000119c1     ........1.......
   1a400:	00011a19 00011a31 00011a45 00011a85     ....1...E.......
   1a410:	00011ab5                                ....

0001a414 <vtable for Timer>:
	...
   1a41c:	00014d41 00014ea5 00014f9d fffffffc     AM...N...O......
   1a42c:	00000000 00011931 000119c1 00011a19     ....1...........
   1a43c:	00011a31 00011a45 00011a85 00011ab5     1...E...........

0001a44c <vtable for SystemTimer>:
	...
   1a454:	00014b8d 00014bc1 00014c5d fffffffc     .K...K..]L......
   1a464:	00000000 00011931 000119c1 00011a19     ....1...........
   1a474:	00011a31 00011a45 00011a85 00011ab5     1...E...........

0001a484 <Timer::Initialize(unsigned long, void (*)(), long)::__PRETTY_FUNCTION__>:
   1a484:	74726976 206c6175 64696f76 6d695420     virtual void Tim
   1a494:	3a3a7265 74696e49 696c6169 7528657a     er::Initialize(u
   1a4a4:	33746e69 2c745f32 72734920 6e696f50     int32_t, IsrPoin
   1a4b4:	2c726574 746e6920 745f3233 ffff0029     ter, int32_t)...

0001a4c4 <LowLevelInit()::__PRETTY_FUNCTION__>:
   1a4c4:	64696f76 776f4c20 6576654c 696e496c     void LowLevelIni
   1a4d4:	00292874 63617453 6544206b 20687470     t().Stack Depth 
   1a4e4:	7a25203d 00000a64 25232020 203a757a     = %zd...  #%zu: 
   1a4f4:	70257830 0000000a 6e75520a 6874203a     0x%p.....Run: th
   1a504:	6f662065 776f6c6c 20676e69 6d6d6f63     e following comm
   1a514:	20646e61 79206e69 2072756f 6a6f7270     and in your proj
   1a524:	20746365 65726964 726f7463 00000079     ect directory...
   1a534:	1b20200a 333b315b 616d6d37 7320656b     .  .[1;37mmake s
   1a544:	6b636174 63617274 73252d65 41525420     tacktrace-%s TRA
   1a554:	3d534543 00000022 70257830 00000000     CES="...0x%p....
   1a564:	25783020 00000070 5b1b0a22 00006d30      0x%p..."..[0m..
   1a574:	73696854 6c697720 6572206c 74726f70     This will report
   1a584:	65687420 6c696620 6e612065 696c2064      the file and li
   1a594:	6e20656e 65626d75 68742072 6c207461     ne number that l
   1a5a4:	74206465 6874206f 66207369 74636e75     ed to this funct
   1a5b4:	206e6f69 6e696562 61632067 64656c6c     ion being called
   1a5c4:	0000002e 6c707061 74616369 006e6f69     ....application.
   1a5d4:	31345b1b 4952436d 41434954 305b1b4c     .[41mCRITICAL.[0
   1a5e4:	6d34393b 3a73253a 3b305b1b 256d3239     ;94m:%s:.[0;92m%
   1a5f4:	5b1b3a73 33393b30 3e64256d 305b1b20     s:.[0;93m%d> .[0
   1a604:	6d37333b 65737341 6f697472 6146206e     ;37mAssertion Fa
   1a614:	72756c69 43202c65 69646e6f 6e6f6974     ilure, Condition
   1a624:	73655420 3a646574 73692820 3d212072      Tested: (isr !=
   1a634:	746e4920 75727265 6f4c7470 70756b6f      InterruptLookup
   1a644:	646e6148 2972656c 2020200a 20202020     Handler).       
   1a654:	4e202020 5349206f 6f662052 20646e75        No ISR found 
   1a664:	20726f66 20656874 74636576 2520726f     for the vector %
   1a674:	305b1b75 305b1b6d 00000a6d 6972500a     u.[0m.[0m....Pri
   1a684:	6e69746e 74532067 206b6361 63617254     nting Stack Trac
   1a694:	000a3a65 31345b1b 7261486d 61462064     e:...[41mHard Fa
   1a6a4:	20746c75 65637845 6f697470 634f206e     ult Exception Oc
   1a6b4:	72727563 0a216465 6d305b1b 00000000     curred!..[0m....
   1a6c4:	203a3072 30257830 2c586c38 3a317220     r0: 0x%08lX, r1:
   1a6d4:	25783020 586c3830 3272202c 7830203a      0x%08lX, r2: 0x
   1a6e4:	6c383025 72202c58 30203a33 38302578     %08lX, r3: 0x%08
   1a6f4:	000a586c 3a323172 25783020 586c3830     lX..r12: 0x%08lX
   1a704:	726c202c 7830203a 6c383025 70202c58     , lr: 0x%08lX, p
   1a714:	30203a63 38302578 202c586c 3a727370     c: 0x%08lX, psr:
   1a724:	25783020 586c3830 ffff000a               0x%08lX....

0001a730 <InterruptLookupHandler::file>:
   1a730:	65746e69 70757272 70632e74 ffff0070     interrupt.cpp...

0001a740 <InterruptLookupHandler::__PRETTY_FUNCTION__>:
   1a740:	64696f76 746e4920 75727265 6f4c7470     void InterruptLo
   1a750:	70756b6f 646e6148 2872656c ffff0029     okupHandler()...

0001a760 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)::pow10>:
   1a760:	3f800000 41200000 42c80000 447a0000     ...?.. A...B..zD
   1a770:	461c4000 47c35000 49742400 4b189680     .@.F.P.G.$tI...K
   1a780:	4cbebc20 4e6e6b28 63617453 6544206b      ..L(knNStack De
   1a790:	20687470 7a25203d 00000a64 25232020     pth = %zd...  #%
   1a7a0:	203a757a 70257830 0000000a 6e75520a     zu: 0x%p.....Run
   1a7b0:	6874203a 6f662065 776f6c6c 20676e69     : the following 
   1a7c0:	6d6d6f63 20646e61 79206e69 2072756f     command in your 
   1a7d0:	6a6f7270 20746365 65726964 726f7463     project director
   1a7e0:	00000079 1b20200a 333b315b 616d6d37     y....  .[1;37mma
   1a7f0:	7320656b 6b636174 63617274 73252d65     ke stacktrace-%s
   1a800:	41525420 3d534543 00000022 70257830      TRACES="...0x%p
   1a810:	00000000 25783020 00000070 5b1b0a22     .... 0x%p..."..[
   1a820:	00006d30 73696854 6c697720 6572206c     0m..This will re
   1a830:	74726f70 65687420 6c696620 6e612065     port the file an
   1a840:	696c2064 6e20656e 65626d75 68742072     d line number th
   1a850:	6c207461 74206465 6874206f 66207369     at led to this f
   1a860:	74636e75 206e6f69 6e696562 61632067     unction being ca
   1a870:	64656c6c 0000002e 6c707061 74616369     lled....applicat
   1a880:	006e6f69 33345b1b 4157206d 4e494e52     ion..[43m WARNIN
   1a890:	305b1b47 6d34393b 3a73253a 3b305b1b     G.[0;94m:%s:.[0;
   1a8a0:	256d3239 5b1b3a73 33393b30 3e64256d     92m%s:.[0;93m%d>
   1a8b0:	305b1b20 6d37333b 74726f50 20642520      .[0;37mPort %d 
   1a8c0:	6e6e6163 6220746f 73752065 66206465     cannot be used f
   1a8d0:	4520726f 72657478 206c616e 65746e49     or External Inte
   1a8e0:	70757272 202e7374 6465654e 206f7420     rrupts. Need to 
   1a8f0:	20657375 4f495047 206e6f20 74726f50     use GPIO on Port
   1a900:	6f203020 2e322072 6d305b1b 6d305b1b      0 or 2..[0m.[0m
   1a910:	0000000a 33345b1b 4157206d 4e494e52     .....[43m WARNIN
   1a920:	305b1b47 6d34393b 3a73253a 3b305b1b     G.[0;94m:%s:.[0;
   1a930:	256d3239 5b1b3a73 33393b30 3e64256d     92m%s:.[0;93m%d>
   1a940:	305b1b20 6d37333b 65676445 20642520      .[0;37mEdge %d 
   1a950:	6e6e6163 6220746f 73752065 66206465     cannot be used f
   1a960:	4520726f 72657478 206c616e 65746e49     or External Inte
   1a970:	70757272 4e2e7374 20646565 75206f74     rrupts.Need to u
   1a980:	61206573 73697220 2c676e69 6c616620     se a rising, fal
   1a990:	676e696c 726f202c 746f6220 6f632068     ling, or both co
   1a9a0:	6769666e 74617275 2e6e6f69 6d305b1b     nfiguration..[0m
   1a9b0:	0000000a 31345b1b 4952436d 41434954     .....[41mCRITICA
   1a9c0:	305b1b4c 6d34393b 3a73253a 3b305b1b     L.[0;94m:%s:.[0;
   1a9d0:	256d3239 5b1b3a73 33393b30 3e64256d     92m%s:.[0;93m%d>
   1a9e0:	305b1b20 6d37333b 65737341 6f697472      .[0;37mAssertio
   1a9f0:	6146206e 72756c69 43202c65 69646e6f     n Failure, Condi
   1aa00:	6e6f6974 73655420 3a646574 65702820     tion Tested: (pe
   1aa10:	68706972 6c617265 7669645f 72656469     ripheral_divider
   1aa20:	203d3c20 200a2934 20202020 20202020      <= 4).         
   1aa30:	76694420 72656469 73756d20 74276e74      Divider mustn't
   1aa40:	63786520 20646565 5b1b3233 5b1b6d30      exceed 32.[0m.[
   1aa50:	000a6d30 6972500a 6e69746e 74532067     0m...Printing St
   1aa60:	206b6361 63617254 000a3a65 31345b1b     ack Trace:...[41
   1aa70:	4952436d 41434954 305b1b4c 6d34393b     mCRITICAL.[0;94m
   1aa80:	3a73253a 3b305b1b 256d3239 5b1b3a73     :%s:.[0;92m%s:.[
   1aa90:	33393b30 3e64256d 305b1b20 6d37333b     0;93m%d> .[0;37m
   1aaa0:	65737341 6f697472 6146206e 72756c69     Assertion Failur
   1aab0:	43202c65 69646e6f 6e6f6974 73655420     e, Condition Tes
   1aac0:	3a646574 65642820 65726973 70735f64     ted: (desired_sp
   1aad0:	5f646565 6d5f6e69 3c207a68 34383320     eed_in_mhz < 384
   1aae0:	20262620 69736564 5f646572 65657073      && desired_spee
   1aaf0:	6e695f64 7a686d5f 31203e20 200a2932     d_in_mhz > 12). 
   1ab00:	20202020 20202020 65724620 6e657571              Frequen
   1ab10:	6d207963 20747375 6c206562 7265776f     cy must be lower
   1ab20:	61687420 3833206e 484d2034 646e617a      than 384 MHzand
   1ab30:	65726720 72657461 61687420 726f206e      greater than or
   1ab40:	75716520 74206c61 3231206f 7a484d20      equal to 12 MHz
   1ab50:	6d305b1b 6d305b1b 0000000a 31345b1b     .[0m.[0m.....[41
   1ab60:	4952436d 41434954 305b1b4c 6d34393b     mCRITICAL.[0;94m
   1ab70:	3a73253a 3b305b1b 256d3239 5b1b3a73     :%s:.[0;92m%s:.[
   1ab80:	33393b30 3e64256d 305b1b20 6d37333b     0;93m%d> .[0;37m
   1ab90:	65737341 6f697472 6146206e 72756c69     Assertion Failur
   1aba0:	43202c65 69646e6f 6e6f6974 73655420     e, Condition Tes
   1abb0:	3a646574 69642820 65646976 61765f72     ted: (divider_va
   1abc0:	2065756c 2938203c 2020200a 20202020     lue < 8).       
   1abd0:	50202020 64204c4c 64697669 76207265        PLL divider v
   1abe0:	65756c61 6e657720 756f2074 666f2074     alue went out of
   1abf0:	756f6220 1b73646e 1b6d305b 0a6d305b      bounds.[0m.[0m.
   1ac00:	00000000 31345b1b 4952436d 41434954     .....[41mCRITICA
   1ac10:	305b1b4c 6d34393b 3a73253a 3b305b1b     L.[0;94m:%s:.[0;
   1ac20:	256d3239 5b1b3a73 33393b30 3e64256d     92m%s:.[0;93m%d>
   1ac30:	305b1b20 6d37333b 65737341 6f697472      .[0;37mAssertio
   1ac40:	6146206e 72756c69 43202c65 69646e6f     n Failure, Condi
   1ac50:	6e6f6974 73655420 3a646574 61662820     tion Tested: (fa
   1ac60:	2965736c 2020200a 20202020 50202020     lse).          P
   1ac70:	6c204c4c 206b636f 6c756f63 6f6e2064     LL lock could no
   1ac80:	65622074 74736520 696c6261 64656873     t be established
   1ac90:	66656220 2065726f 656d6974 1b74756f      before timeout.
   1aca0:	1b6d305b 0a6d305b 00000000 31345b1b     [0m.[0m......[41
   1acb0:	4952436d 41434954 305b1b4c 6d34393b     mCRITICAL.[0;94m
   1acc0:	3a73253a 3b305b1b 256d3239 5b1b3a73     :%s:.[0;92m%s:.[
   1acd0:	33393b30 3e64256d 305b1b20 6d37333b     0;93m%d> .[0;37m
   1ace0:	65737341 6f697472 6146206e 72756c69     Assertion Failur
   1acf0:	43202c65 69646e6f 6e6f6974 73655420     e, Condition Tes
   1ad00:	3a646574 70632820 69645f75 65646976     ted: (cpu_divide
   1ad10:	203c2072 0a293233 20202020 20202020     r < 32).        
   1ad20:	69442020 65646976 756d2072 276e7473       Divider mustn'
   1ad30:	78652074 64656563 1b323320 1b6d305b     t exceed 32.[0m.
   1ad40:	0a6d305b 00000000 35345b1b 2020206d     [0m......[45m   
   1ad50:	4f525245 305b1b52 6d34393b 3a73253a     ERROR.[0;94m:%s:
   1ad60:	3b305b1b 256d3239 5b1b3a73 33393b30     .[0;92m%s:.[0;93
   1ad70:	3e64256d 305b1b20 6d37333b 6c696146     m%d> .[0;37mFail
   1ad80:	74206465 6e69206f 61697469 53206574     ed to initiate S
   1ad90:	6d204950 2065646f 68746977 74206e69     PI mode within t
   1ada0:	6f656d69 202e7475 726f6241 676e6974     imeout. Aborting
   1adb0:	305b1b21 00000a6d 35345b1b 2020206d     !.[0m....[45m   
   1adc0:	4f525245 305b1b52 6d34393b 3a73253a     ERROR.[0;94m:%s:
   1add0:	3b305b1b 256d3239 5b1b3a73 33393b30     .[0;92m%s:.[0;93
   1ade0:	3e64256d 305b1b20 6d37333b 70736552     m%d> .[0;37mResp
   1adf0:	65736e6f 746e6920 69726765 63207974     onse integrity c
   1ae00:	6b636568 69616620 2e64656c 6f624120     heck failed. Abo
   1ae10:	6e697472 5b1b2167 000a6d30 35345b1b     rting!.[0m...[45
   1ae20:	2020206d 4f525245 305b1b52 6d34393b     m   ERROR.[0;94m
   1ae30:	3a73253a 3b305b1b 256d3239 5b1b3a73     :%s:.[0;92m%s:.[
   1ae40:	33393b30 3e64256d 305b1b20 6d37333b     0;93m%d> .[0;37m
   1ae50:	75736e55 726f7070 20646574 746c6f76     Unsupported volt
   1ae60:	20656761 75206e69 202e6573 726f6241     age in use. Abor
   1ae70:	676e6974 305b1b21 00000a6d 35345b1b     ting!.[0m....[45
   1ae80:	2020206d 4f525245 305b1b52 6d34393b     m   ERROR.[0;94m
   1ae90:	3a73253a 3b305b1b 256d3239 5b1b3a73     :%s:.[0;92m%s:.[
   1aea0:	33393b30 3e64256d 305b1b20 6d37333b     0;93m%d> .[0;37m
   1aeb0:	43204453 20647261 656d6974 756f2064     SD Card timed ou
   1aec0:	41202e74 74726f62 21676e69 6d305b1b     t. Aborting!.[0m
   1aed0:	0000000a 65757274 00000000 736c6166     ....true....fals
   1aee0:	00000065 35345b1b 2020206d 4f525245     e....[45m   ERRO
   1aef0:	305b1b52 6d34393b 3a73253a 3b305b1b     R.[0;94m:%s:.[0;
   1af00:	256d3239 5b1b3a73 33393b30 3e64256d     92m%s:.[0;93m%d>
   1af10:	305b1b20 6d37333b 6c696857 65522065      .[0;37mWhile Re
   1af20:	6e696461 6c422067 206b636f 20642523     ading Block #%d 
   1af30:	31435243 5b1b3a36 000a6d30 35345b1b     CRC16:.[0m...[45
   1af40:	2020206d 4f525245 305b1b52 6d34393b     m   ERROR.[0;94m
   1af50:	3a73253a 3b305b1b 256d3239 5b1b3a73     :%s:.[0;92m%s:.[
   1af60:	33393b30 3e64256d 305b1b20 6d37333b     0;93m%d> .[0;37m
   1af70:	65707845 64657463 78302720 58343025     Expected '0x%04X
   1af80:	305b1b27 00000a6d 35345b1b 2020206d     '.[0m....[45m   
   1af90:	4f525245 305b1b52 6d34393b 3a73253a     ERROR.[0;94m:%s:
   1afa0:	3b305b1b 256d3239 5b1b3a73 33393b30     .[0;92m%s:.[0;93
   1afb0:	3e64256d 305b1b20 6d37333b 20746f47     m%d> .[0;37mGot 
   1afc0:	25783027 27583430 6d305b1b 0000000a     '0x%04X'.[0m....
   1afd0:	35345b1b 2020206d 4f525245 305b1b52     .[45m   ERROR.[0
   1afe0:	6d34393b 3a73253a 3b305b1b 256d3239     ;94m:%s:.[0;92m%
   1aff0:	5b1b3a73 33393b30 3e64256d 305b1b20     s:.[0;93m%d> .[0
   1b000:	6d37333b 64616552 646d4320 73617720     ;37mRead Cmd was
   1b010:	746f6e20 6b636120 6c776f6e 65676465      not acknowledge
   1b020:	72702064 7265706f 1b21796c 0a6d305b     d properly!.[0m.
   1b030:	00000000 35345b1b 2020206d 4f525245     .....[45m   ERRO
   1b040:	305b1b52 6d34393b 3a73253a 3b305b1b     R.[0;94m:%s:.[0;
   1b050:	256d3239 5b1b3a73 33393b30 3e64256d     92m%s:.[0;93m%d>
   1b060:	305b1b20 6d37333b 61726150 6574656d      .[0;37mParamete
   1b070:	72452072 25203a72 305b1b73 00000a6d     r Err: %s.[0m...
   1b080:	35345b1b 2020206d 4f525245 305b1b52     .[45m   ERROR.[0
   1b090:	6d34393b 3a73253a 3b305b1b 256d3239     ;94m:%s:.[0;92m%
   1b0a0:	5b1b3a73 33393b30 3e64256d 305b1b20     s:.[0;93m%d> .[0
   1b0b0:	6d37333b 72646441 72724520 7325203a     ;37mAddr Err: %s
   1b0c0:	6d305b1b 0000000a 35345b1b 2020206d     .[0m.....[45m   
   1b0d0:	4f525245 305b1b52 6d34393b 3a73253a     ERROR.[0;94m:%s:
   1b0e0:	3b305b1b 256d3239 5b1b3a73 33393b30     .[0;92m%s:.[0;93
   1b0f0:	3e64256d 305b1b20 6d37333b 73617245     m%d> .[0;37mEras
   1b100:	65532065 72452071 25203a72 305b1b73     e Seq Err: %s.[0
   1b110:	00000a6d 35345b1b 2020206d 4f525245     m....[45m   ERRO
   1b120:	305b1b52 6d34393b 3a73253a 3b305b1b     R.[0;94m:%s:.[0;
   1b130:	256d3239 5b1b3a73 33393b30 3e64256d     92m%s:.[0;93m%d>
   1b140:	305b1b20 6d37333b 206d6f43 20435243      .[0;37mCom CRC 
   1b150:	3a727245 1b732520 0a6d305b 00000000     Err: %s.[0m.....
   1b160:	35345b1b 2020206d 4f525245 305b1b52     .[45m   ERROR.[0
   1b170:	6d34393b 3a73253a 3b305b1b 256d3239     ;94m:%s:.[0;92m%
   1b180:	5b1b3a73 33393b30 3e64256d 305b1b20     s:.[0;93m%d> .[0
   1b190:	6d37333b 656c6c49 206c6167 20646d43     ;37mIllegal Cmd 
   1b1a0:	3a727245 1b732520 0a6d305b 00000000     Err: %s.[0m.....
   1b1b0:	35345b1b 2020206d 4f525245 305b1b52     .[45m   ERROR.[0
   1b1c0:	6d34393b 3a73253a 3b305b1b 256d3239     ;94m:%s:.[0;92m%
   1b1d0:	5b1b3a73 33393b30 3e64256d 305b1b20     s:.[0;93m%d> .[0
   1b1e0:	6d37333b 73617245 65522065 3a746573     ;37mErase Reset:
   1b1f0:	1b732520 0a6d305b 00000000 35345b1b      %s.[0m......[45
   1b200:	2020206d 4f525245 305b1b52 6d34393b     m   ERROR.[0;94m
   1b210:	3a73253a 3b305b1b 256d3239 5b1b3a73     :%s:.[0;92m%s:.[
   1b220:	33393b30 3e64256d 305b1b20 6d37333b     0;93m%d> .[0;37m
   1b230:	49206e49 3a656c64 1b732520 0a6d305b     In Idle: %s.[0m.
   1b240:	00000000 35345b1b 2020206d 4f525245     .....[45m   ERRO
   1b250:	305b1b52 6d34393b 3a73253a 3b305b1b     R.[0;94m:%s:.[0;
   1b260:	256d3239 5b1b3a73 33393b30 3e64256d     92m%s:.[0;93m%d>
   1b270:	305b1b20 6d37333b 6c696146 74206465      .[0;37mFailed t
   1b280:	6573206f 74532074 20747261 72646441     o set Start Addr
   1b290:	21737365 6d305b1b 0000000a 35345b1b     ess!.[0m.....[45
   1b2a0:	2020206d 4f525245 305b1b52 6d34393b     m   ERROR.[0;94m
   1b2b0:	3a73253a 3b305b1b 256d3239 5b1b3a73     :%s:.[0;92m%s:.[
   1b2c0:	33393b30 3e64256d 305b1b20 6d37333b     0;93m%d> .[0;37m
   1b2d0:	6c696146 74206465 6573206f 6e452074     Failed to set En
   1b2e0:	64412064 73657264 5b1b2173 000a6d30     d Address!.[0m..
   1b2f0:	35345b1b 2020206d 4f525245 305b1b52     .[45m   ERROR.[0
   1b300:	6d34393b 3a73253a 3b305b1b 256d3239     ;94m:%s:.[0;92m%
   1b310:	5b1b3a73 33393b30 3e64256d 305b1b20     s:.[0;93m%d> .[0
   1b320:	6d37333b 6e6b6e55 206e776f 70736572     ;37mUnknown resp
   1b330:	65736e6f 70797420 41202e65 74726f62     onse type. Abort
   1b340:	21676e69 6d305b1b 0000000a 35345b1b     ing!.[0m.....[45
   1b350:	2020206d 4f525245 305b1b52 6d34393b     m   ERROR.[0;94m
   1b360:	3a73253a 3b305b1b 256d3239 5b1b3a73     :%s:.[0;92m%s:.[
   1b370:	33393b30 3e64256d 305b1b20 6d37333b     0;93m%d> .[0;37m
   1b380:	70736552 65736e6f 736e7520 6f707075     Response unsuppo
   1b390:	64657472 206e6920 20495053 65646f6d     rted in SPI mode
   1b3a0:	6241202e 6974726f 1b21676e 0a6d305b     . Aborting!.[0m.
   1b3b0:	ffffff00                                ....

0001b3b4 <Sd::kCrcTable8>:
   1b3b4:	1b120900 3f362d24 535a4148 777e656c     ....$-6?HAZSle~w
   1b3c4:	020b1019 262f343d 4a435851 6e677c75     ....=4/&QXCJu|gn
   1b3d4:	29203b32 0d041f16 6168737a 454c575e     2; )....zsha^WLE
   1b3e4:	3039222b 141d060f 78716a63 5c554e47     +"90....cjqxGNU\
   1b3f4:	7f766d64 5b524940 373e252c 131a0108     dmv.@IR[,%>7....
   1b404:	666f747d 424b5059 2e273c35 0a031811     }tofYPKB5<'.....
   1b414:	4d445f56 69607b72 050c171e 2128333a     V_DMr{`i....:3(!
   1b424:	545d464f 7079626b 1c150e07 38312a23     OF]Tkbyp....#*18
   1b434:	5a534841 7e776c65 121b0009 363f242d     AHSZelw~....-$?6
   1b444:	434a5158 676e757c 0b021910 2f263d34     XQJC|ung....4=&/
   1b454:	68617a73 4c455e57 2029323b 040d161f     szahW^EL;2) ....
   1b464:	7178636a 555c474e 39302b22 1d140f06     jcxqNG\U"+09....
   1b474:	3e372c25 1a130801 767f646d 525b4049     %,7>....md.vI@[R
   1b484:	272e353c 030a1118 6f667d74 4b425950     <5.'....t}foPYBK
   1b494:	0c051e17 28213a33 444d565f 6069727b     ....3:!(_VMD{ri`
   1b4a4:	151c070e 3138232a 5d544f46 00706b62     ....*#81FOT]bkp.

0001b4b4 <Sd::kCrcTable16>:
   1b4b4:	10210000 30632042 50a54084 70e760c6     ..!.B c0.@.P.`.p
   1b4c4:	91298108 b16ba14a d1adc18c f1efe1ce     ..).J.k.........
   1b4d4:	02101231 22523273 429452b5 62d672f7     1...s2R".R.B.r.b
   1b4e4:	83189339 a35ab37b c39cd3bd e3def3ff     9...{.Z.........
   1b4f4:	34432462 14010420 74c764e6 548544a4     b$C4 ....d.t.D.T
   1b504:	b54ba56a 95098528 f5cfe5ee d58dc5ac     j.K.(...........
   1b514:	26723653 06301611 66f676d7 46b45695     S6r&..0..v.f.V.F
   1b524:	a77ab75b 87389719 e7fef7df c7bcd79d     [.z...8.........
   1b534:	58e548c4 78a76886 18610840 38232802     .H.X.h.x@.a..(#8
   1b544:	d9edc9cc f9afe98e 99698948 b92ba90a     ........H.i...+.
   1b554:	4ad45af5 6a967ab7 0a501a71 2a123a33     .Z.J.z.jq.P.3:.*
   1b564:	cbdcdbfd eb9efbbf 8b589b79 ab1abb3b     ........y.X.;...
   1b574:	7c876ca6 5cc54ce4 3c032c22 1c410c60     .l.|.L.\",.<`.A.
   1b584:	fd8fedae ddcdcdec bd0bad2a 9d498d68     ........*...h.I.
   1b594:	6eb67e97 4ef45ed5 2e323e13 0e701e51     .~.n.^.N.>2.Q.p.
   1b5a4:	efbeff9f cffcdfdd af3abf1b 8f789f59     ..........:.Y.x.
   1b5b4:	81a99188 a1ebb1ca c12dd10c e16ff14e     ..........-.N.o.
   1b5c4:	00a11080 20e330c2 40255004 60677046     .....0. .P%@Fpg`
   1b5d4:	939883b9 b3daa3fb d31cc33d f35ee37f     ........=.....^.
   1b5e4:	129002b1 32d222f3 52144235 72566277     .....".25B.RwbVr
   1b5f4:	a5cbb5ea 858995a8 e54ff56e c50dd52c     ........n.O.,...
   1b604:	24c334e2 048114a0 64477466 44055424     .4.$....ftGd$T.D
   1b614:	b7faa7db 97b88799 f77ee75f d73cc71d     ........_.~...<.
   1b624:	36f226d3 16b00691 76766657 56344615     .&.6....Wfvv.F4V
   1b634:	c96dd94c e92ff90e 89e999c8 a9abb98a     L.m.../.........
   1b644:	48655844 68277806 08e118c0 28a33882     DXeH.x'h.....8.(
   1b654:	db5ccb7d fb1eeb3f 9bd88bf9 bb9aabbb     }.\.?...........
   1b664:	5a544a75 7a166a37 1ad00af1 3a922ab3     uJTZ7j.z.....*.:
   1b674:	ed0ffd2e cd4ddd6c ad8bbdaa 8dc99de8     ....l.M.........
   1b684:	6c077c26 4c455c64 2c833ca2 0cc11ce0     &|.ld\EL.<.,....
   1b694:	ff3eef1f df7ccf5d bfbaaf9b 9ff88fd9     ..>.].|.........
   1b6a4:	7e366e17 5e744e55 3eb22e93 1ef00ed1     .n6~UNt^...>....

0001b6b4 <Sd::Mount(SdInterface::CardInfo_t*)::file>:
   1b6b4:	682e6473 ff007070                       sd.hpp..

0001b6bc <Sd::Mount(SdInterface::CardInfo_t*)::file>:
   1b6bc:	682e6473 ff007070                       sd.hpp..

0001b6c4 <Sd::Mount(SdInterface::CardInfo_t*)::file>:
   1b6c4:	682e6473 ff007070                       sd.hpp..

0001b6cc <Sd::Mount(SdInterface::CardInfo_t*)::file>:
   1b6cc:	682e6473 ff007070                       sd.hpp..

0001b6d4 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file>:
   1b6d4:	682e6473 ff007070                       sd.hpp..

0001b6dc <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file>:
   1b6dc:	682e6473 ff007070                       sd.hpp..

0001b6e4 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file>:
   1b6e4:	682e6473 ff007070                       sd.hpp..

0001b6ec <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file>:
   1b6ec:	682e6473 ff007070                       sd.hpp..

0001b6f4 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file>:
   1b6f4:	682e6473 ff007070                       sd.hpp..

0001b6fc <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file>:
   1b6fc:	682e6473 ff007070                       sd.hpp..

0001b704 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file>:
   1b704:	682e6473 ff007070                       sd.hpp..

0001b70c <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file>:
   1b70c:	682e6473 ff007070                       sd.hpp..

0001b714 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file>:
   1b714:	682e6473 ff007070                       sd.hpp..

0001b71c <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file>:
   1b71c:	682e6473 ff007070                       sd.hpp..

0001b724 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file>:
   1b724:	682e6473 ff007070                       sd.hpp..

0001b72c <Sd::DeleteBlock(unsigned long, unsigned long)::file>:
   1b72c:	682e6473 ff007070                       sd.hpp..

0001b734 <Sd::DeleteBlock(unsigned long, unsigned long)::file>:
   1b734:	682e6473 ff007070                       sd.hpp..

0001b73c <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)::file>:
   1b73c:	682e6473 ff007070                       sd.hpp..

0001b744 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)::file>:
   1b744:	682e6473 ff007070                       sd.hpp..

0001b74c <vtable for Sd>:
	...
   1b754:	000184d5 0001792d 000179dd 00017df1     ....-y...y...}..
   1b764:	00018209 000183b5 00018975 000189bd     ........u.......
   1b774:	00018a2d                                -...

0001b778 <vtable for SdInterface>:
	...
   1b780:	00018ba1 00018ba1 00018ba1 00018ba1     ................
   1b790:	00018ba1 00018ba1 00018ba1 00018ba1     ................
   1b7a0:	00018ba1                                ....

0001b7a4 <Sd::Mount(SdInterface::CardInfo_t*)::__PRETTY_FUNCTION__>:
   1b7a4:	74726976 206c6175 6c6f6f62 3a645320     virtual bool Sd:
   1b7b4:	756f4d3a 5328746e 746e4964 61667265     :Mount(SdInterfa
   1b7c4:	3a3a6563 64726143 6f666e49 292a745f     ce::CardInfo_t*)
   1b7d4:	ffffff00                                ....

0001b7d8 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::__PRETTY_FUNCTION__>:
   1b7d8:	74726976 206c6175 746e6975 20745f38     virtual uint8_t 
   1b7e8:	3a3a6453 64616552 636f6c42 6975286b     Sd::ReadBlock(ui
   1b7f8:	3233746e 202c745f 746e6975 2a745f38     nt32_t, uint8_t*
   1b808:	6975202c 3233746e 0029745f              , uint32_t).

0001b814 <Sd::DeleteBlock(unsigned long, unsigned long)::__PRETTY_FUNCTION__>:
   1b814:	74726976 206c6175 746e6975 20745f38     virtual uint8_t 
   1b824:	3a3a6453 656c6544 6c426574 286b636f     Sd::DeleteBlock(
   1b834:	746e6975 745f3233 6975202c 3233746e     uint32_t, uint32
   1b844:	0029745f                                _t).

0001b848 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)::__PRETTY_FUNCTION__>:
   1b848:	74726976 206c6175 746e6975 745f3233     virtual uint32_t
   1b858:	3a645320 6e65533a 646d4364 49645328      Sd::SendCmd(SdI
   1b868:	7265746e 65636166 6f433a3a 6e616d6d     nterface::Comman
   1b878:	75202c64 33746e69 2c745f32 6e697520     d, uint32_t, uin
   1b888:	745f3874 75202c2a 33746e69 2c745f32     t8_t*, uint32_t,
   1b898:	49645320 7265746e 65636166 654b3a3a      SdInterface::Ke
   1b8a8:	6c417065 29657669 ffffff00              epAlive)....

0001b8b4 <__sf_fake_stderr>:
	...

0001b8d4 <__sf_fake_stdin>:
	...

0001b8f4 <__sf_fake_stdout>:
	...
