
build/application/firmware.elf:     file format elf32-littlearm
build/application/firmware.elf
architecture: arm, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00014bb9

Program Header:
0x70000001 off    0x0001a964 vaddr 0x0001a964 paddr 0x0001a964 align 2**2
         filesz 0x00000008 memsz 0x00000008 flags r--
    LOAD off    0x00010000 vaddr 0x00010000 paddr 0x00010000 align 2**16
         filesz 0x0000a96c memsz 0x0000a96c flags r-x
    LOAD off    0x00020000 vaddr 0x10000000 paddr 0x0001a96c align 2**16
         filesz 0x00000560 memsz 0x00000560 flags rw-
    LOAD off    0x00020560 vaddr 0x10000560 paddr 0x10000560 align 2**16
         filesz 0x00000000 memsz 0x00000b54 flags rw-
private flags = 5000400: [Version5 EABI] [hard-float ABI]

Sections:
Idx Name             Size      VMA       LMA       File off  Algn  Flags
  0 .text            0000a964  00010000  00010000  00010000  2**4  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data            00000560  10000000  0001a96c  00020000  2**2  CONTENTS, ALLOC, LOAD, DATA
  2 .data_RAM2       00000000  20000000  20000000  00020560  2**2  CONTENTS
  3 .bss             00000b54  10000560  10000560  00020560  2**3  ALLOC
  4 .ARM.exidx       00000008  0001a964  0001a964  0001a964  2**2  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .uninit_RESERVED 00000000  10000000  10000000  00020560  2**2  CONTENTS
  6 .noinit_RAM2     00000000  20000000  20000000  00020560  2**2  CONTENTS
  7 .noinit          00000000  100010b4  100010b4  00020560  2**2  CONTENTS
  8 .ARM.attributes  00000030  00000000  00000000  00020560  2**0  CONTENTS, READONLY
  9 .comment         0000007e  00000000  00000000  00020590  2**0  CONTENTS, READONLY
 10 .debug_info      0005f4fb  00000000  00000000  0002060e  2**0  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev    00005dcf  00000000  00000000  0007fb09  2**0  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges   00001118  00000000  00000000  000858d8  2**0  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges    00001068  00000000  00000000  000869f0  2**0  CONTENTS, READONLY, DEBUGGING
 14 .debug_line      00008801  00000000  00000000  00087a58  2**0  CONTENTS, READONLY, DEBUGGING
 15 .debug_str       0001a5e1  00000000  00000000  00090259  2**0  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame     000042c8  00000000  00000000  000aa83c  2**2  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
00010000 l    d  .text	00000000 .text
10000000 l    d  .data	00000000 .data
20000000 l    d  .data_RAM2	00000000 .data_RAM2
10000560 l    d  .bss	00000000 .bss
0001a964 l    d  .ARM.exidx	00000000 .ARM.exidx
10000000 l    d  .uninit_RESERVED	00000000 .uninit_RESERVED
20000000 l    d  .noinit_RAM2	00000000 .noinit_RAM2
100010b4 l    d  .noinit	00000000 .noinit
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 interrupt.cpp
00015194 l     F .text	0000002c NVIC_EnableIRQ
000151c0 l     F .text	00000054 NVIC_SetPriority
00010000 l     O .text	000000e4 kInterruptVectorTable
00019780 l     O .text	0000000e InterruptLookupHandler::file
00019790 l     O .text	0000001e InterruptLookupHandler::__PRETTY_FUNCTION__
0001022c l       .text	00000000 handler2_address_const
00000000 l    df *ABS*	00000000 startup.cpp
000194d4 l     O .text	0000003e Timer::Initialize(unsigned long, void (*)(), long)::__PRETTY_FUNCTION__
100003f8 l     O .data	00000008 (anonymous namespace)::system_timer
10000400 l     O .data	00000004 (anonymous namespace)::system_controller
10000404 l     O .data	0000000c (anonymous namespace)::timer0
00014a60 l     F .text	00000040 (anonymous namespace)::Lpc40xxUptime()
0001941c l     O .text	0000000c LowLevelInit()::file
00019514 l     O .text	00000014 LowLevelInit()::__PRETTY_FUNCTION__
000102fc l     O .text	00000004 kCrpWord
000150a8 l     F .text	000000dc __static_initialization_and_destruction_0(int, int)
00015184 l     F .text	0000000e _GLOBAL__sub_I_UptimeRTOS
00000000 l    df *ABS*	00000000 /mnt/c/SJSU_Dev2/SJSU-Dev2/tools/gcc-arm-none-eabi-7-2017-q4-major/bin/../lib/gcc/arm-none-eabi/7.2.1/thumb/v7e-m/fpv4-sp/hard/crti.o
00000000 l    df *ABS*	00000000 /mnt/c/SJSU_Dev2/SJSU-Dev2/tools/gcc-arm-none-eabi-7-2017-q4-major/bin/../lib/gcc/arm-none-eabi/7.2.1/thumb/v7e-m/fpv4-sp/hard/crtn.o
00000000 l    df *ABS*	00000000 crtstuff.c
00010328 l     F .text	00000000 __do_global_dtors_aux
10000560 l       .bss	00000001 completed.9929
0001034c l     F .text	00000000 frame_dummy
10000564 l       .bss	00000018 object.9934
0001030c l     O .text	00000000 __frame_dummy_init_array_entry
00000000 l    df *ABS*	00000000 main.cpp
00018d98 l     O .text	0000001c Gpio::ValidPortCheck()::__PRETTY_FUNCTION__
00018db4 l     O .text	00000039 Gpio::SetInterruptEdge(GpioInterface::Edge)::__PRETTY_FUNCTION__
00018d5c l     O .text	0000003b Gpio::ClearInterruptEdge(GpioInterface::Edge)::__PRETTY_FUNCTION__
00018c1c l     O .text	00000049 Lpc40xxSystemController::SetPeripheralClockDivider(unsigned char)::__PRETTY_FUNCTION__
00018cc4 l     O .text	0000005c Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)::__PRETTY_FUNCTION__
00018c68 l     O .text	0000005a Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)::__PRETTY_FUNCTION__
00018d20 l     O .text	0000003a Lpc40xxSystemController::SetCpuClockDivider(unsigned char)::__PRETTY_FUNCTION__
000189e8 l     O .text	00000009 main::file
00018c10 l     O .text	0000000b main::__PRETTY_FUNCTION__
00013988 l     F .text	0000007c __static_initialization_and_destruction_0(int, int)
00013a04 l     F .text	00000028 _GLOBAL__sub_I_P1_10
00000000 l    df *ABS*	00000000 diskio.cpp
0001a7f4 l     O .text	00000031 Sd::Mount(SdInterface::CardInfo_t*)::__PRETTY_FUNCTION__
0001a828 l     O .text	0000003c Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::__PRETTY_FUNCTION__
0001a864 l     O .text	00000034 Sd::DeleteBlock(unsigned long, unsigned long)::__PRETTY_FUNCTION__
0001a898 l     O .text	00000069 Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)::__PRETTY_FUNCTION__
10001048 l     O .bss	00000068 (anonymous namespace)::sd_card
00017ca0 l     F .text	00000050 __static_initialization_and_destruction_0(int, int)
00017cf0 l     F .text	00000028 _GLOBAL__sub_I_disk_status
00000000 l    df *ABS*	00000000 LabGPIO.cpp
10000000 l     O .data	00000018 GPIO
00000000 l    df *ABS*	00000000 LabSPI.cpp
10000580 l     O .bss	00000008 (anonymous namespace)::uptime
0001049c l     F .text	00000030 (anonymous namespace)::DefaultUptime()
1000001c l     O .data	0000000c SSP
00000000 l    df *ABS*	00000000 pinconn.cpp
00000000 l    df *ABS*	00000000 newlib.cpp
00000000 l    df *ABS*	00000000 tasks.c
10000fd0 l     O .bss	00000064 pxReadyTasksLists
10001034 l     O .bss	00000004 uxTopReadyPriority
10001038 l     O .bss	00000004 xYieldPending
1000103c l     O .bss	00000004 uxSchedulerSuspended
10001040 l     O .bss	00000004 ulTaskSwitchedInTime
10001044 l     O .bss	00000004 ulTotalRunTime
00000000 l    df *ABS*	00000000 port.c
00015650 l       .text	00000000 pxCurrentTCBConst2
000156c0 l       .text	00000000 pxCurrentTCBConst
00000000 l    df *ABS*	00000000 printf.cpp
000156c8 l     F .text	00000030 _out_null(char, void*, unsigned int, unsigned int)
000156f8 l     F .text	00000044 _out_char(char, void*, unsigned int, unsigned int)
0001573c l     F .text	00000044 _strlen(char const*)
00015780 l     F .text	00000044 _is_digit(char)
000157c4 l     F .text	00000060 _atoi(char const**)
00015824 l     F .text	0000025c _ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)
00015a80 l     F .text	000000e4 _ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)
00015b64 l     F .text	000000f4 _ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)
000197b0 l     O .text	00000028 _ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)::pow10
00015c58 l     F .text	00000438 _ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)
00016090 l     F .text	000008f4 _vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)
00000000 l    df *ABS*	00000000 pure.cc
00000000 l    df *ABS*	00000000 eh_terminate.cc
00000000 l    df *ABS*	00000000 sf_round.c
00000000 l    df *ABS*	00000000 _arm_truncdfsf2.o
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 abort.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 signal.c
00000000 l    df *ABS*	00000000 signalr.c
00000000 l    df *ABS*	00000000 findfp.c
00000000 l    df *ABS*	00000000 eh_term_handler.cc
00000000 l    df *ABS*	00000000 impure.c
10000500 l     O .data	00000060 impure_data
00000000 l    df *ABS*	00000000 reent.c
00012000  w    F .text	0000003e Lpc40xxSystemController::GetPeripheralFrequency() const
00015438 g     F .text	00000038 putchar
00015214  w    F .text	0000006c Pwm0IrqHandler
00018900  w    O .text	00000009 Gpio::SetInterruptEdge(GpioInterface::Edge)::file
00010218 g     F .text	0000001c HardFaultHandler
000153a8 g     F .text	00000024 _getpid
000153fc g     F .text	0000003c _putchar
00010bdc g     F .text	000000cc LabSpi::Transfer(unsigned char)
00015214  w    F .text	0000006c EepromIrqHandler
00015214  w    F .text	0000006c Timer2IrqHandler
100003e4  w    O .data	00000014 uart0
0001553c g     F .text	0000002c GetStackDepth()
0001a704  w    O .text	00000007 Sd::Mount(SdInterface::CardInfo_t*)::file
00011ec8  w    F .text	00000024 Lpc40xxSystemController::Lpc40xxSystemController()
000193e4  w    O .text	00000004 Timer::kTimerIrq
0001a73c  w    O .text	00000007 Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file
0001820c g     F .text	00000024 _kill_r
0001010c g       .text	00000000 bss_section_table_end
00010694 g     F .text	0000029c LabSpi::Initialize(unsigned char, LabSpi::FrameModes, unsigned char, LabSpi::Master_Slave)
00016984 g     F .text	0000004c printf
10000380  w    O .data	00000004 SystemTimer::sys_tick
00015214  w    F .text	0000006c I2c1IrqHandler
00014c60  w    F .text	0000003c void Timer::TimerHandler<(TimerInterface::TimerPort)2>()
10000394  w    O .data	00000010 Uart::uart
0001a76c  w    O .text	00000007 Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file
00010b20 g     F .text	000000bc LabSpi::chip_set()
00010000 g       *ABS*	00000000 __vectors_start__
000132d8  w    F .text	00000090 Ssd1306::Write(unsigned long, Ssd1306::Transaction, unsigned int)
000104cc  w    F .text	00000044 Milliseconds()
00012164  w    F .text	00000110 Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)
00013184  w    F .text	00000094 Ssd1306::Ssd1306()
000124a8  w    F .text	00000034 SspInterface::SspInterface()
00015214  w    F .text	0000006c BusFaultHandler
10000ec8 g     O .bss	00000100 stack_trace
10000028  w    O .data	00000004 Pin::pin_map
000142ac  w    F .text	000000e4 Uart::Initialize(unsigned long)
20000000 g       *ABS*	00000000 __base_RAM2
00013184  w    F .text	00000094 Ssd1306::Ssd1306()
0001a96c g       .ARM.exidx	00000000 __exidx_end
00011db8  w    F .text	0000007c Gpio::ClearEdgeRising()
0001244c  w    F .text	00000030 Lpc40xxSystemController::SetEmcClockDivider(Lpc40xxSystemController::EmcDivider)
00013a90 g     F .text	000000cc pinconn::ssp_clk(unsigned char, unsigned char)
000188f4  w    O .text	00000009 Gpio::ValidPortCheck()::file
000136fc  w    F .text	0000006c OledTerminal::OledTerminal()
10000fcc g     O .bss	00000004 pxCurrentTCB
00010ee8  w    F .text	00000034 PinInterface::PinInterface()
000154f8 g     F .text	0000001c __cyg_profile_func_exit
00017aec  w    F .text	00000048 Sd::Crc7Add(unsigned char, unsigned char)
00016a04  w    F .text	000000a0 Sd::Sd(Sd::DebugSdCard_t, unsigned char, unsigned char, unsigned char, unsigned char)
00014ec8  w    F .text	000000a0 void Timer::ClearInterrupts<(TimerInterface::TimerPort)1>()
100010b0 g     O .bss	00000004 errno
0001a96c g       .ARM.exidx	00000000 _etext
1000006c  w    O .data	00000004 Lpc40xxSystemController::system_controller
00011eec  w    F .text	00000090 Lpc40xxSystemController::SetClockFrequency(unsigned char)
0001407c  w    F .text	00000030 unsigned char util::Value<TimerInterface::MatchControlRegister, unsigned char>(TimerInterface::MatchControlRegister)
00011fec  w    F .text	00000014 Lpc40xxSystemController::GetSystemFrequency() const
00014870  w    F .text	000001f0 Uart::GenerateUartCalibration(float)
1000002c  w    O .data	00000018 Gpio::gpio_port
000140ac  w    F .text	000000f8 Timer::SetTimer(unsigned long, TimerInterface::TimerIsrCondition, TimerInterface::MatchControlRegister)
00014ae0  w    F .text	000000bc LowLevelInit()
00015214  w    F .text	0000006c LcdIrqHandler
0001a794  w    O .text	00000007 Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)::file
00080000 g       *ABS*	00000000 __top_MFlash512
000127a8  w    F .text	0000006c Ssp::Transfer(unsigned short)
00014510  w    F .text	000000f8 Uart::Receive(unsigned long)
00012104  w    F .text	00000030 Lpc40xxSystemController::SelectUsbClockSource(Lpc40xxSystemController::UsbSource)
0001062c  w    F .text	00000030 Delay(unsigned long long)
0001940c  w    O .text	00000010 Uart::kPowerbit
00015214  w    F .text	0000006c I2c2IrqHandler
10000e70  w    O .bss	00000004 SystemTimer::system_timer_isr
00011c80  w    F .text	00000040 Gpio::DetachInterrupt()
00015214  w    F .text	0000006c CanIrqHandler
00011424  w    F .text	00000074 Pin::EnableDac(bool)
00011154  w    F .text	0000007c Pin::SetAsAnalogMode(bool)
000123e4  w    F .text	00000068 Lpc40xxSystemController::SetCpuClockDivider(unsigned char)
00017ba4  w    F .text	000000fc Sd::GetCrc16(unsigned char*, unsigned short)
00017e44 g     F .text	00000000 .hidden __aeabi_uldivmod
100010b4 g       .noinit	00000000 _noinit
00015470 g     F .text	00000060 puts
10000410 g     O .data	000000e4 dynamic_isr_vector_table
000119a0  w    F .text	0000002c Gpio::GetPin()
00011a48  w    F .text	0000005c Gpio::SetInterruptRoutine(void (*)())
00011554  w    F .text	00000034 GpioInterface::GpioInterface()
000124a8  w    F .text	00000034 SspInterface::SspInterface()
00015214  w    F .text	0000006c RitIrqHandler
00015214  w    F .text	0000006c Uart2IrqHandler
00011498  w    F .text	00000064 Pin::BitPlace(unsigned long, unsigned long, unsigned long, unsigned long)
00018978  w    O .text	00000016 Lpc40xxSystemController::SetCpuClockDivider(unsigned char)::file
0001a724  w    O .text	00000007 Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file
00012b0c  w    F .text	00000160 Ssp::GetPeripheralMode()
00014f68  w    F .text	000000a0 void Timer::ClearInterrupts<(TimerInterface::TimerPort)2>()
00017d44 g     F .text	00000060 roundf
000181ac g     F .text	00000050 _raise_r
0001053c  w    F .text	0000002c Wait(unsigned long long)::{lambda()#1}::_FUN()
0001247c  w    F .text	0000002c int util::Value<Ssp::Peripheral, int>(Ssp::Peripheral)
000124dc  w    F .text	00000038 PinInterface::PinInterface(PinInterface const&)
10010000 g       *ABS*	00000000 __top_RAM
00019408  w    O .text	00000004 Uart::kRxUartPortFunction
00015660 g     F .text	00000066 xPortPendSVHandler
00010568  w    F .text	000000c4 Wait(unsigned long long)
000169d0  w    F .text	00000034 SdInterface::SdInterface()
000141a4  w    F .text	0000003c Timer::GetTimer()
10000000 g       *ABS*	00000000 __base_RamLoc64
00015514 g     F .text	00000028 GetStackTrace()
100004f4 g     O .data	00000004 out
10000070  w    O .data	00000004 Lpc40xxSystemController::speed_in_hertz
0001a774  w    O .text	00000007 Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file
0001a75c  w    O .text	00000007 Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file
00018230 g     F .text	00000004 _getpid_r
00000000 g       *ABS*	00000000 __base_MFlash512
00018a4c  w    O .text	0000004c vtable for Ssp
10010000 g       *ABS*	00000000 StackTop
00016eb4  w    F .text	00000064 Sd::WaitToReadBlock()
00018990  w    O .text	00000003 Ssp::kPinSelect
00013270  w    F .text	00000068 Ssd1306::AvailableColors()
00017e74 g     F .text	000002cc .hidden __udivmoddi4
00015214  w    F .text	0000006c I2sIrqHandler
0001065c g     F .text	00000038 LabSpi::LabSpi(LabSpi::Peripheral)
000100fc g       .text	00000000 bss_section_table
00010300 g       .text	00000000 __CRP_WORD_END__
20008000 g       *ABS*	00000000 __top_RAM2
00014bb8 g     F .text	00000030 ResetIsr
000189f4  w    O .text	0000002c vtable for Ssd1306
00016e70  w    F .text	00000044 Sd::ToBool(bool)
00018a98  w    O .text	00000028 vtable for SspInterface
00015214  w    F .text	0000006c PendSVHandler
00012870  w    F .text	00000030 unsigned char util::Value<SspInterface::DataSize, unsigned char>(SspInterface::DataSize)
00013d94  w    F .text	00000034 SystemTimer::SetIsrFunction(void (*)())
00013808  w    F .text	00000044 bool bit::Read<unsigned long>(unsigned long, unsigned long)
00012730  w    F .text	00000078 Ssp::IsTransferRegBusy()
00015214  w    F .text	0000006c UsageFaultHandler
0001065c g     F .text	00000038 LabSpi::LabSpi(LabSpi::Peripheral)
20000000 g       *ABS*	00000000 __user_heap_base
00013670  w    F .text	0000008c Graphics::Graphics(PixelDisplayInterface*)
0001a964 g       .text	00000000 __exidx_start
00013b5c g     F .text	000000cc pinconn::ssp_miso(unsigned char, unsigned char)
0001133c  w    F .text	00000074 Pin::EnableI2cHighCurrentDrive(bool)
00015214  w    F .text	0000006c Uart4IrqHandler
00011aa4  w    F .text	00000054 Gpio::ClearInterruptRoutine()
000112c0  w    F .text	0000007c Pin::EnableI2cHighSpeedMode(bool)
000101fc g     F .text	00000018 InitFpu()
000111d0  w    F .text	0000007c Pin::EnableDigitalFilter(bool)
00013218  w    F .text	0000002c Ssd1306::GetWidth()
00018154 g     F .text	00000048 __libc_init_array
00015214 g     F .text	0000006c InterruptLookupHandler
00012134  w    F .text	00000030 Lpc40xxSystemController::SelectSpifiClockSource(Lpc40xxSystemController::SpifiSource)
00011fd4  w    F .text	00000018 Lpc40xxSystemController::GetPeripheralClockDivider() const
10000018  w    O .data	00000004 Uptime
00018b50  w    O .text	00000048 vtable for GpioInterface
000143dc  w    F .text	000000e8 Uart::Send(unsigned char)
00018144 g     F .text	0000000e abort
00015214  w    F .text	0000006c BodIrqHandler
10000698 g     O .bss	00000008 P1_00
00012e58  w    F .text	00000184 Ssp::GetClock()
00010300 g     F .text	00000000 _init
0001010c g       .text	00000000 section_table_end
00015008  w    F .text	000000a0 void Timer::ClearInterrupts<(TimerInterface::TimerPort)3>()
00013c28 g     F .text	000000cc pinconn::ssp_mosi(unsigned char, unsigned char)
00017d38 g     F .text	0000000a std::terminate()
00017da4 g     F .text	0000009e .hidden __aeabi_d2f
00011e34  w    F .text	0000007c Gpio::ClearEdgeFalling()
00015214  w    F .text	0000006c SysTickHandler
000100e4 g       .text	00000000 section_table_start
100010b4 g       .bss	00000000 _ebss
000135fc  w    F .text	00000074 Ssd1306::Update()
00011d3c  w    F .text	0000007c Gpio::SetEdgeFalling()
0001a734  w    O .text	00000007 Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file
00015214  w    F .text	0000006c RtcIrqHandler
00011930  w    F .text	00000070 Gpio::Read()
00013670  w    F .text	0000008c Graphics::Graphics(PixelDisplayInterface*)
00014cd8  w    F .text	000000a8 Status Wait<Uart::Send(unsigned char)::{lambda()#1}>(unsigned long long, Uart::Send(unsigned char)::{lambda()#1})
eff769da g       *ABS*	00000000 ValidUserCodeChecksum
00015214  w    F .text	0000006c Uart0IrqHandler
000152dc g     F .text	00000078 GetRegistersFromStack
10000688 g     O .bss	00000008 P1_10
000137cc  w    F .text	0000003c unsigned long bit::Set<unsigned long>(unsigned long, unsigned long)
00018bd4  w    O .text	0000003c vtable for PinInterface
00015214  w    F .text	0000006c UsbIrqHandler
00015214  w    F .text	0000006c AdcIrqHandler
000144c4  w    F .text	0000004c Uart::Receive(unsigned long)::{lambda()#1}::operator()() const
00013cf4  w    F .text	00000030 SetUptimeFunction(unsigned long long (*)())
00010368 g     F .text	00000058 LabGPIO::LabGPIO(unsigned char, unsigned char)
0001a904 g     O .text	00000020 __sf_fake_stderr
00012fdc  w    F .text	00000094 PixelDisplayInterface::Color_t::Color_t(bool, bool, bool, unsigned char, unsigned char, bool)
0001a404  w    O .text	00000100 Sd::kCrcTable8
00017d28 g     F .text	00000010 std::get_terminate()
00014778  w    F .text	00000074 Uart::FractionalEstimate(float, float)
00011b28  w    F .text	00000088 Gpio::SetInterruptEdge(GpioInterface::Edge)
00015214  w    F .text	0000006c EnetIrqHandler
00015214  w    F .text	0000006c DmaIrqHandler
0001010c g     F .text	00000090 InitDataSection()
00015280 g     F .text	0000005c RegisterIsr(IRQn, void (*)(), bool, long)
00000000 g       *ABS*	00000000 __base_Flash
00015214  w    F .text	0000006c Eint1IrqHandler
10000074  w    O .data	0000000c Ssp::ssp_registers
00010a38 g     F .text	000000e8 LabSpi::chip_deselect()
00015214  w    F .text	0000006c SvcHandler
00015214  w    F .text	0000006c GpioIrqHandler
0001a784  w    O .text	00000007 Sd::DeleteBlock(unsigned long, unsigned long)::file
00015214  w    F .text	0000006c SdioIrqHandler
10010000 g       *ABS*	00000000 __top_RamLoc64
10000560 g       .bss	00000000 _bss
0001a71c  w    O .text	00000007 Sd::Mount(SdInterface::CardInfo_t*)::file
00015214  w    F .text	0000006c Pll1IrqHandler
00015214  w    F .text	0000006c MemManageHandler
00013100  w    F .text	00000028 PixelDisplayInterface::Disable()
000103c0 g     F .text	00000054 LabGPIO::SetAsOutput()
00017d18 g     F .text	00000006 __cxa_pure_virtual
00015214  w    F .text	0000006c Pwm1IrqHandler
00011af8  w    F .text	00000030 unsigned char util::Value<GpioInterface::Edge, unsigned char>(GpioInterface::Edge)
00015214  w    F .text	0000006c Timer0IrqHandler
10000690 g     O .bss	00000008 P1_04
00014d80  w    F .text	000000a8 Status Wait<Uart::Receive(unsigned long)::{lambda()#1}>(unsigned long long, Uart::Receive(unsigned long)::{lambda()#1})
00013244  w    F .text	0000002c Ssd1306::GetHeight()
00080000 g       *ABS*	00000000 __top_Flash
000147ec  w    F .text	00000084 Uart::IsDecmial(float)
00012c6c  w    F .text	000001ec Ssp::SetClock(bool, bool, unsigned char, unsigned char)
100010b4 g       .noinit	00000000 _end_noinit
00013d24  w    F .text	0000003c SystemTimer::DisableTimer()
0001752c  w    F .text	00000120 Sd::DeleteBlock(unsigned long, unsigned long)
00015568 g     F .text	000000c8 vTaskSwitchContext
000138c0  w    F .text	00000054 unsigned long bit::Extract<unsigned long>(unsigned long, unsigned long, unsigned long)
00010f1c  w    F .text	00000058 Pin::Pin(unsigned char, unsigned char)
000128d0  w    F .text	00000030 unsigned char util::Value<SspInterface::MasterSlaveMode, unsigned char>(SspInterface::MasterSlaveMode)
00010930 g     F .text	00000108 LabSpi::chip_select()
0001a744  w    O .text	00000007 Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file
00019404  w    O .text	00000004 Uart::kTxUartPortFunction
00015214  w    F .text	0000006c Uart3IrqHandler
00011eb0  w    F .text	00000018 SystemControllerInterface::SystemControllerInterface()
0001a77c  w    O .text	00000007 Sd::DeleteBlock(unsigned long, unsigned long)::file
20000000 g       *ABS*	00000000 __base_RamPeriph32
00013568  w    F .text	00000094 Ssd1306::DrawPixel(long, long, PixelDisplayInterface::Color_t)
0001890c  w    O .text	00000009 Gpio::ClearInterruptEdge(GpioInterface::Edge)::file
10000fc8 g     O .bss	00000004 stack_depth
0001184c  w    F .text	0000006c Gpio::Toggle()
0001a754  w    O .text	00000007 Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file
0001a504  w    O .text	00000200 Sd::kCrcTable16
10000588  w    O .bss	00000100 Gpio::interrupthandlers
00018140  w    F .text	00000002 .hidden __aeabi_ldiv0
00015214  w    F .text	0000006c Timer1IrqHandler
00013070  w    F .text	00000068 PixelDisplayInterface::Color_t::Color_t()
00014704  w    F .text	00000074 Uart::DividerEstimate(float, float)
00011740  w    F .text	00000064 Gpio::SetHigh()
00014608  w    F .text	000000fc Uart::FindClosestFractional(float)
00012568  w    F .text	000000e4 Ssp::Ssp(Ssp::Peripheral)
000100e4 g       .text	00000000 data_section_table
00018930  w    O .text	00000016 Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)::file
00010fec  w    F .text	00000080 Pin::SetMode(PinInterface::Mode)
00016f18  w    F .text	00000050 Sd::WaitWhileBusy()
00013e64  w    F .text	00000094 SystemTimer::SetTickFrequency(unsigned long)
0001a924 g     O .text	00000020 __sf_fake_stdin
00013914  w    F .text	00000074 unsigned long bit::Insert<unsigned long, bool>(unsigned long, bool, unsigned long, unsigned long)
000102fc g       .text	00000000 __CRP_WORD_START__
000193e8  w    O .text	00000010 Timer::kTimerIsr
00013368  w    F .text	000000f0 Ssd1306::InitializationPanel()
00011c38  w    F .text	00000048 Gpio::AttachInterrupt(void (*)(), GpioInterface::Edge)
00015214  w    F .text	0000006c Uart1IrqHandler
00011604  w    F .text	0000007c Gpio::SetAsInput()
000154d0 g     F .text	00000028 __cyg_profile_func_enter
0001819c g     F .text	00000010 memset
00013768 g     F .text	00000064 main
00016a04  w    F .text	000000a0 Sd::Sd(Sd::DebugSdCard_t, unsigned char, unsigned char, unsigned char, unsigned char)
10000044  w    O .data	00000028 Gpio::interrupt
00013f28  w    F .text	00000020 Timer::DoNothingIsr()
00015214  w    F .text	0000006c QeiIrqHandler
20000000 g       *ABS*	00000000 heap
00015214  w    F .text	0000006c Ssp2IrqHandler
000114fc  w    F .text	0000002c Pin::GetPort() const
00017380  w    F .text	000001ac Sd::WriteBlock(unsigned long, unsigned char const*, unsigned long)
00010f1c  w    F .text	00000058 Pin::Pin(unsigned char, unsigned char)
100006a0 g     O .bss	00000008 P1_01
00017da4 g     F .text	0000009e .hidden __truncdfsf2
0001031c g       .text	00000000 __init_array_end
00015630 g     F .text	00000026 vPortSVCHandler
00015354 g     F .text	0000003c FirmwareStdOut(int)
0001a79c  w    O .text	0000002c vtable for Sd
00011bb0  w    F .text	00000088 Gpio::ClearInterruptEdge(GpioInterface::Edge)
00015214  w    F .text	0000006c Ssp1IrqHandler
00014be8  w    F .text	0000003c void Timer::TimerHandler<(TimerInterface::TimerPort)0>()
000189dc  w    O .text	0000000c Ssp::kPowerBit
00011528  w    F .text	0000002c Pin::GetPin() const
000141e0  w    F .text	000000cc Uart::SetBaudRate(unsigned long)
00019428  w    O .text	0000003c vtable for Uart
000116fc  w    F .text	00000044 Gpio::SetDirection(GpioInterface::Direction)
00011680  w    F .text	0000007c Gpio::SetAsOutput()
0001a764  w    O .text	00000007 Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file
00012274  w    F .text	00000170 Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)
000136fc  w    F .text	0000006c OledTerminal::OledTerminal()
000117a4  w    F .text	00000064 Gpio::SetLow()
00018ac0  w    O .text	00000024 vtable for Lpc40xxSystemController
00016f68  w    F .text	00000418 Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)
0001a78c  w    O .text	00000007 Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)::file
00018918  w    O .text	00000016 Lpc40xxSystemController::SetPeripheralClockDivider(unsigned char)::file
00014b9c g     F .text	0000001a SystemInit
00013f48  w    F .text	00000134 Timer::Initialize(unsigned long, void (*)(), long)
100006a8 g     O .bss	000007c8 oled_terminal
00012040  w    F .text	00000030 Lpc40xxSystemController::PowerUpPeripheral(SystemControllerInterface::PeripheralID const&)
20008000 g       *ABS*	00000000 heap_end
0001264c  w    F .text	000000e4 Ssp::Initialize()
00019464  w    O .text	00000038 vtable for Timer
000124dc  w    F .text	00000038 PinInterface::PinInterface(PinInterface const&)
10000384  w    O .data	00000010 Timer::tim_register
00015214  w    F .text	0000006c Ssp0IrqHandler
00010368 g     F .text	00000058 LabGPIO::LabGPIO(unsigned char, unsigned char)
0001031c g     F .text	00000000 _fini
00015214  w    F .text	0000006c UsbactivityIrqHandler
00011808  w    F .text	00000044 Gpio::Set(GpioInterface::State)
00015214  w    F .text	0000006c Pll0IrqHandler
00012514  w    F .text	00000054 Pin::Pin(Pin const&)
000100fc g       .text	00000000 data_section_table_end
00015214  w    F .text	0000006c CanactivityIrqHandler
00015214  w    F .text	0000006c NmiHandler
00013070  w    F .text	00000068 PixelDisplayInterface::Color_t::Color_t()
00013128  w    F .text	00000028 PixelDisplayInterface::Update()
00018994  w    O .text	00000048 Ssp::kSspPinMatrix
000134dc  w    F .text	00000054 Ssd1306::SetHorizontalAddressMode()
000118b8  w    F .text	00000078 Gpio::ReadState()
00010ca8 g     F .text	00000094 LabSpi::read()
0001a72c  w    O .text	00000007 Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file
100004fc g     O .data	00000004 _impure_ptr
00010d3c  w    F .text	000000ac Status Wait<Wait(unsigned long long)::{lambda()#1}>(unsigned long long, Wait(unsigned long long)::{lambda()#1})
10000000 g       .uninit_RESERVED	00000000 _end_uninit_RESERVED
00017b34  w    F .text	00000070 Sd::GetCrc7(unsigned char*, unsigned char)
00013458  w    F .text	00000084 Ssd1306::Initialize()
00015214  w    F .text	0000006c McpwmIrqHandler
0001030c g       .text	00000000 __preinit_array_end
00015214  w    F .text	0000006c WdtIrqHandler
00010510  w    F .text	0000002c Wait(unsigned long long)::{lambda()#1}::operator()() const
0001764c  w    F .text	000004a0 Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)
00011ec8  w    F .text	00000024 Lpc40xxSystemController::Lpc40xxSystemController()
00018b98  w    O .text	0000003c vtable for Pin
00013530  w    F .text	00000038 Ssd1306::Clear()
10000000 g       .data	00000000 _data
000110e0  w    F .text	00000074 Pin::SetAsActiveLow(bool)
000120d4  w    F .text	00000030 Lpc40xxSystemController::SelectMainClockSource(Lpc40xxSystemController::MainClockSource)
00011cc0  w    F .text	0000007c Gpio::SetEdgeRising()
0001a70c  w    O .text	00000007 Sd::Mount(SdInterface::CardInfo_t*)::file
00013ef8  w    F .text	00000030 unsigned char util::Value<TimerInterface::TimerPort, unsigned char>(TimerInterface::TimerPort)
10000080 g     O .data	00000300 pincon
10000eb4  w    O .bss	00000010 Timer::user_timer_isr
000130d8  w    F .text	00000028 PixelDisplayInterface::Enable()
00018948  w    O .text	00000016 Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)::file
10000e74  w    O .bss	00000040 Timer::match
00010458 g     F .text	00000044 LabGPIO::SetLow()
00014390  w    F .text	0000004c Uart::Send(unsigned char)::{lambda()#1}::operator()() const
00018a20  w    O .text	0000002c vtable for PixelDisplayInterface
00016b54  w    F .text	0000031c Sd::Mount(SdInterface::CardInfo_t*)
100004f8 g     O .data	00000004 __cxxabiv1::__terminate_handler
00018ae4  w    O .text	00000024 vtable for SystemControllerInterface
00018b08  w    O .text	00000048 vtable for Gpio
10000560 g       .data	00000000 _edata
000193d4  w    O .text	00000010 Timer::kPowerbit
00014c24  w    F .text	0000003c void Timer::TimerHandler<(TimerInterface::TimerPort)1>()
0001106c  w    F .text	00000074 Pin::EnableHysteresis(bool)
00011554  w    F .text	00000034 GpioInterface::GpioInterface()
00012fdc  w    F .text	00000094 PixelDisplayInterface::Color_t::Color_t(bool, bool, bool, unsigned char, unsigned char, bool)
00015214  w    F .text	0000006c DebugMonHandler
000119cc  w    F .text	0000007c Gpio::ValidPortCheck()
00015214  w    F .text	0000006c Eint2IrqHandler
20008000 g       *ABS*	00000000 __top_RamPeriph32
00012568  w    F .text	000000e4 Ssp::Ssp(Ssp::Peripheral)
00015214  w    F .text	0000006c Timer3IrqHandler
00013a2c g     F .text	00000064 pinconn::clearF4(unsigned char, unsigned char)
00010414 g     F .text	00000044 LabGPIO::SetHigh()
00013150  w    F .text	00000034 PixelDisplayInterface::PixelDisplayInterface()
10000000 g       *ABS*	00000000 __base_RAM
00015214  w    F .text	0000006c Eint3IrqHandler
00017d1e g     F .text	00000008 __cxxabiv1::__terminate(void (*)())
000153cc g     F .text	00000030 _kill
00015214  w    F .text	0000006c I2c0IrqHandler
00012514  w    F .text	00000054 Pin::Pin(Pin const&)
000193f8  w    O .text	0000000a Timer::Initialize(unsigned long, void (*)(), long)::file
00013d60  w    F .text	00000034 SystemTimer::SystemTimerHandler()
0001a714  w    O .text	00000007 Sd::Mount(SdInterface::CardInfo_t*)::file
0001a944 g     O .text	00000020 __sf_fake_stdout
00010de8  w    F .text	00000100 debug::PrintBacktrace(bool, void*)
0001030c g       .text	00000000 __init_array_start
00018140  w    F .text	00000002 .hidden __aeabi_idiv0
0001a7c8  w    O .text	0000002c vtable for SdInterface
00016aa4  w    F .text	000000b0 Sd::Initialize()
00015390 g     F .text	00000018 _exit
0001124c  w    F .text	00000074 Pin::EnableFastMode(bool)
00014e28  w    F .text	000000a0 void Timer::ClearInterrupts<(TimerInterface::TimerPort)0>()
00015214  w    F .text	0000006c Eint0IrqHandler
00013dc8  w    F .text	0000009c SystemTimer::StartTimer()
000128a0  w    F .text	00000030 unsigned char util::Value<SspInterface::FrameMode, unsigned char>(SspInterface::FrameMode)
0001019c g     F .text	00000060 InitBssSection()
00011588  w    F .text	0000007c Gpio::Gpio(unsigned char, unsigned char)
00014aa0 g     F .text	00000040 UptimeRTOS
00013150  w    F .text	00000034 PixelDisplayInterface::PixelDisplayInterface()
000113b0  w    F .text	00000074 Pin::SetAsOpenDrain(bool)
0001949c  w    O .text	00000038 vtable for SystemTimer
00015214  w    F .text	0000006c SpiIrqHandler
0001a74c  w    O .text	00000007 Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file
00012814  w    F .text	0000005c Ssp::SetSpiMasterDefault()
100003a4  w    O .data	00000040 Uart::pairs
00011eb0  w    F .text	00000018 SystemControllerInterface::SystemControllerInterface()
00012070  w    F .text	00000030 Lpc40xxSystemController::PowerDownPeripheral(SystemControllerInterface::PeripheralID const&)
000169d0  w    F .text	00000034 SdInterface::SdInterface()
0001030c g       .text	00000000 __preinit_array_start
00018960  w    O .text	00000016 Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)::file
000120a0  w    F .text	00000034 Lpc40xxSystemController::SelectOscillatorSource(Lpc40xxSystemController::OscillatorSource)
10000ec4  w    O .bss	00000004 guard variable for Timer::match
00012900  w    F .text	0000020c Ssp::SetPeripheralMode(SspInterface::MasterSlaveMode, SspInterface::FrameMode, SspInterface::DataSize)
00010f74  w    F .text	00000078 Pin::SetPinFunction(unsigned char)
0001384c  w    F .text	00000074 unsigned long bit::Insert<unsigned long, unsigned char>(unsigned long, unsigned char, unsigned long, unsigned long)
00010ee8  w    F .text	00000034 PinInterface::PinInterface()
00011f7c  w    F .text	00000058 Lpc40xxSystemController::SetPeripheralClockDivider(unsigned char)
00011588  w    F .text	0000007c Gpio::Gpio(unsigned char, unsigned char)
00014c9c  w    F .text	0000003c void Timer::TimerHandler<(TimerInterface::TimerPort)3>()
000181fc g     F .text	00000010 raise



Disassembly of section .text:

00010000 <kInterruptVectorTable>:
   10000:	00 00 01 10 b9 4b 01 00 15 52 01 00 19 02 01 00     .....K...R......
   10010:	15 52 01 00 15 52 01 00 15 52 01 00 da 69 f7 ef     .R...R...R...i..
	...
   1002c:	31 56 01 00 15 52 01 00 00 00 00 00 61 56 01 00     1V...R......aV..
   1003c:	15 52 01 00 15 52 01 00 15 52 01 00 15 52 01 00     .R...R...R...R..
   1004c:	15 52 01 00 15 52 01 00 15 52 01 00 15 52 01 00     .R...R...R...R..
   1005c:	15 52 01 00 15 52 01 00 15 52 01 00 15 52 01 00     .R...R...R...R..
   1006c:	15 52 01 00 15 52 01 00 00 00 00 00 15 52 01 00     .R...R.......R..
   1007c:	15 52 01 00 15 52 01 00 15 52 01 00 15 52 01 00     .R...R...R...R..
   1008c:	15 52 01 00 15 52 01 00 15 52 01 00 15 52 01 00     .R...R...R...R..
   1009c:	15 52 01 00 15 52 01 00 15 52 01 00 15 52 01 00     .R...R...R...R..
   100ac:	15 52 01 00 15 52 01 00 15 52 01 00 15 52 01 00     .R...R...R...R..
   100bc:	15 52 01 00 15 52 01 00 15 52 01 00 15 52 01 00     .R...R...R...R..
   100cc:	15 52 01 00 15 52 01 00 15 52 01 00 15 52 01 00     .R...R...R...R..
   100dc:	15 52 01 00 15 52 01 00                             .R...R..

000100e4 <data_section_table>:
   100e4:	0001a96c 	.word	0x0001a96c
   100e8:	10000000 	.word	0x10000000
   100ec:	00000560 	.word	0x00000560
   100f0:	0001a96c 	.word	0x0001a96c
   100f4:	20000000 	.word	0x20000000
   100f8:	00000000 	.word	0x00000000

000100fc <bss_section_table>:
   100fc:	10000560 	.word	0x10000560
   10100:	00000b54 	.word	0x00000b54
   10104:	20000000 	.word	0x20000000
   10108:	00000000 	.word	0x00000000

0001010c <InitDataSection()>:
SJ2_IGNORE_STACK_TRACE(void SystemInit());

// Functions to carry out the initialization of RW and BSS data sections.
SJ2_SECTION(".after_vectors")
void InitDataSection()
{
   1010c:	b086      	sub	sp, #24
  for (int i = 0; &data_section_table[i] < &data_section_table_end; i++)
   1010e:	2300      	movs	r3, #0
   10110:	9305      	str	r3, [sp, #20]
   10112:	9a05      	ldr	r2, [sp, #20]
   10114:	4613      	mov	r3, r2
   10116:	005b      	lsls	r3, r3, #1
   10118:	4413      	add	r3, r2
   1011a:	009b      	lsls	r3, r3, #2
   1011c:	4a1d      	ldr	r2, [pc, #116]	; (10194 <InitDataSection()+0x88>)
   1011e:	4413      	add	r3, r2
   10120:	4a1d      	ldr	r2, [pc, #116]	; (10198 <InitDataSection()+0x8c>)
   10122:	4293      	cmp	r3, r2
   10124:	d233      	bcs.n	1018e <InitDataSection()+0x82>
  {
    uint32_t * rom_location = data_section_table[i].rom_location;
   10126:	491b      	ldr	r1, [pc, #108]	; (10194 <InitDataSection()+0x88>)
   10128:	9a05      	ldr	r2, [sp, #20]
   1012a:	4613      	mov	r3, r2
   1012c:	005b      	lsls	r3, r3, #1
   1012e:	4413      	add	r3, r2
   10130:	009b      	lsls	r3, r3, #2
   10132:	440b      	add	r3, r1
   10134:	681b      	ldr	r3, [r3, #0]
   10136:	9303      	str	r3, [sp, #12]
    uint32_t * ram_location = data_section_table[i].ram_location;
   10138:	4916      	ldr	r1, [pc, #88]	; (10194 <InitDataSection()+0x88>)
   1013a:	9a05      	ldr	r2, [sp, #20]
   1013c:	4613      	mov	r3, r2
   1013e:	005b      	lsls	r3, r3, #1
   10140:	4413      	add	r3, r2
   10142:	009b      	lsls	r3, r3, #2
   10144:	440b      	add	r3, r1
   10146:	685b      	ldr	r3, [r3, #4]
   10148:	9302      	str	r3, [sp, #8]
    uint32_t length         = data_section_table[i].length;
   1014a:	4912      	ldr	r1, [pc, #72]	; (10194 <InitDataSection()+0x88>)
   1014c:	9a05      	ldr	r2, [sp, #20]
   1014e:	4613      	mov	r3, r2
   10150:	005b      	lsls	r3, r3, #1
   10152:	4413      	add	r3, r2
   10154:	009b      	lsls	r3, r3, #2
   10156:	440b      	add	r3, r1
   10158:	3308      	adds	r3, #8
   1015a:	681b      	ldr	r3, [r3, #0]
   1015c:	9301      	str	r3, [sp, #4]
    for (size_t j = 0; j < length; j++)
   1015e:	2300      	movs	r3, #0
   10160:	9304      	str	r3, [sp, #16]
   10162:	9a04      	ldr	r2, [sp, #16]
   10164:	9b01      	ldr	r3, [sp, #4]
   10166:	429a      	cmp	r2, r3
   10168:	d20d      	bcs.n	10186 <InitDataSection()+0x7a>
    {
      ram_location[j] = rom_location[j];
   1016a:	9b04      	ldr	r3, [sp, #16]
   1016c:	009b      	lsls	r3, r3, #2
   1016e:	9a03      	ldr	r2, [sp, #12]
   10170:	441a      	add	r2, r3
   10172:	9b04      	ldr	r3, [sp, #16]
   10174:	009b      	lsls	r3, r3, #2
   10176:	9902      	ldr	r1, [sp, #8]
   10178:	440b      	add	r3, r1
   1017a:	6812      	ldr	r2, [r2, #0]
   1017c:	601a      	str	r2, [r3, #0]
    for (size_t j = 0; j < length; j++)
   1017e:	9b04      	ldr	r3, [sp, #16]
   10180:	3301      	adds	r3, #1
   10182:	9304      	str	r3, [sp, #16]
   10184:	e7ed      	b.n	10162 <InitDataSection()+0x56>
  for (int i = 0; &data_section_table[i] < &data_section_table_end; i++)
   10186:	9b05      	ldr	r3, [sp, #20]
   10188:	3301      	adds	r3, #1
   1018a:	9305      	str	r3, [sp, #20]
   1018c:	e7c1      	b.n	10112 <InitDataSection()+0x6>
    }
  }
}
   1018e:	bf00      	nop
   10190:	b006      	add	sp, #24
   10192:	4770      	bx	lr
   10194:	000100e4 	.word	0x000100e4
   10198:	000100fc 	.word	0x000100fc

0001019c <InitBssSection()>:

// Functions to initialization BSS data sections. This is important because
// the std c libs assume that BSS is set to zero.
SJ2_SECTION(".after_vectors")
void InitBssSection()
{
   1019c:	b084      	sub	sp, #16
  for (int i = 0; &bss_section_table[i] < &bss_section_table_end; i++)
   1019e:	2300      	movs	r3, #0
   101a0:	9303      	str	r3, [sp, #12]
   101a2:	9b03      	ldr	r3, [sp, #12]
   101a4:	00db      	lsls	r3, r3, #3
   101a6:	4a13      	ldr	r2, [pc, #76]	; (101f4 <InitBssSection()+0x58>)
   101a8:	4413      	add	r3, r2
   101aa:	4a13      	ldr	r2, [pc, #76]	; (101f8 <InitBssSection()+0x5c>)
   101ac:	4293      	cmp	r3, r2
   101ae:	d21e      	bcs.n	101ee <InitBssSection()+0x52>
  {
    uint32_t * ram_location = bss_section_table[i].ram_location;
   101b0:	4a10      	ldr	r2, [pc, #64]	; (101f4 <InitBssSection()+0x58>)
   101b2:	9b03      	ldr	r3, [sp, #12]
   101b4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
   101b8:	9301      	str	r3, [sp, #4]
    uint32_t length         = bss_section_table[i].length;
   101ba:	4a0e      	ldr	r2, [pc, #56]	; (101f4 <InitBssSection()+0x58>)
   101bc:	9b03      	ldr	r3, [sp, #12]
   101be:	00db      	lsls	r3, r3, #3
   101c0:	4413      	add	r3, r2
   101c2:	685b      	ldr	r3, [r3, #4]
   101c4:	9300      	str	r3, [sp, #0]
    for (size_t j = 0; j < length; j++)
   101c6:	2300      	movs	r3, #0
   101c8:	9302      	str	r3, [sp, #8]
   101ca:	9a02      	ldr	r2, [sp, #8]
   101cc:	9b00      	ldr	r3, [sp, #0]
   101ce:	429a      	cmp	r2, r3
   101d0:	d209      	bcs.n	101e6 <InitBssSection()+0x4a>
    {
      ram_location[j] = 0;
   101d2:	9b02      	ldr	r3, [sp, #8]
   101d4:	009b      	lsls	r3, r3, #2
   101d6:	9a01      	ldr	r2, [sp, #4]
   101d8:	4413      	add	r3, r2
   101da:	2200      	movs	r2, #0
   101dc:	601a      	str	r2, [r3, #0]
    for (size_t j = 0; j < length; j++)
   101de:	9b02      	ldr	r3, [sp, #8]
   101e0:	3301      	adds	r3, #1
   101e2:	9302      	str	r3, [sp, #8]
   101e4:	e7f1      	b.n	101ca <InitBssSection()+0x2e>
  for (int i = 0; &bss_section_table[i] < &bss_section_table_end; i++)
   101e6:	9b03      	ldr	r3, [sp, #12]
   101e8:	3301      	adds	r3, #1
   101ea:	9303      	str	r3, [sp, #12]
   101ec:	e7d9      	b.n	101a2 <InitBssSection()+0x6>
    }
  }
}
   101ee:	bf00      	nop
   101f0:	b004      	add	sp, #16
   101f2:	4770      	bx	lr
   101f4:	000100fc 	.word	0x000100fc
   101f8:	0001010c 	.word	0x0001010c

000101fc <InitFpu()>:
      // Write back the modified value to the CPACR
      "STR     R1, [R0]\n"
      // Wait for store to complete
      "DSB\n"
      // reset pipeline now the FPU is enabled
      "ISB\n");
   101fc:	f8df 0014 	ldr.w	r0, [pc, #20]	; 10214 <InitFpu()+0x18>
   10200:	6801      	ldr	r1, [r0, #0]
   10202:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   10206:	6001      	str	r1, [r0, #0]
   10208:	f3bf 8f4f 	dsb	sy
   1020c:	f3bf 8f6f 	isb	sy
}
   10210:	bf00      	nop
   10212:	4770      	bx	lr
   10214:	e000ed88 	.word	0xe000ed88

00010218 <HardFaultHandler>:
      " mrseq r0, msp                                       \n"
      " mrsne r0, psp                                       \n"
      " ldr r1, [r0, #24]                                   \n"
      " ldr r2, handler2_address_const                      \n"
      " bx r2                                               \n"
      " handler2_address_const: .word GetRegistersFromStack \n");
   10218:	f01e 0f04 	tst.w	lr, #4
   1021c:	bf0c      	ite	eq
   1021e:	f3ef 8008 	mrseq	r0, MSP
   10222:	f3ef 8009 	mrsne	r0, PSP
   10226:	6981      	ldr	r1, [r0, #24]
   10228:	4a00      	ldr	r2, [pc, #0]	; (1022c <handler2_address_const>)
   1022a:	4710      	bx	r2

0001022c <handler2_address_const>:
   1022c:	000152dd 	.word	0x000152dd
#endif
}
   10230:	bf00      	nop
   10232:	4770      	bx	lr
   10234:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   10238:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   1023c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   10240:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   10244:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   10248:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   1024c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   10250:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   10254:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   10258:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   1025c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   10260:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   10264:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   10268:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   1026c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   10270:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   10274:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   10278:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   1027c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   10280:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   10284:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   10288:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   1028c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   10290:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   10294:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   10298:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   1029c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102a0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102a4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102a8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102ac:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102b0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102b4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102b8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102bc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102c0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102c4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102c8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102cc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102d0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102d4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102d8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102dc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102e0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102e4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102e8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102ec:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102f0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102f4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102f8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

000102fc <__CRP_WORD_START__>:
   102fc:	ffffffff 	.word	0xffffffff

00010300 <_init>:
   10300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10302:	bf00      	nop
   10304:	bcf8      	pop	{r3, r4, r5, r6, r7}
   10306:	bc08      	pop	{r3}
   10308:	469e      	mov	lr, r3
   1030a:	4770      	bx	lr

0001030c <__init_array_start>:
   1030c:	0001034d 	.word	0x0001034d
   10310:	00013a05 	.word	0x00013a05
   10314:	00015185 	.word	0x00015185
   10318:	00017cf1 	.word	0x00017cf1

0001031c <_fini>:
   1031c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1031e:	bf00      	nop
   10320:	bcf8      	pop	{r3, r4, r5, r6, r7}
   10322:	bc08      	pop	{r3}
   10324:	469e      	mov	lr, r3
   10326:	4770      	bx	lr

00010328 <__do_global_dtors_aux>:
   10328:	b510      	push	{r4, lr}
   1032a:	4c05      	ldr	r4, [pc, #20]	; (10340 <__do_global_dtors_aux+0x18>)
   1032c:	7823      	ldrb	r3, [r4, #0]
   1032e:	b933      	cbnz	r3, 1033e <__do_global_dtors_aux+0x16>
   10330:	4b04      	ldr	r3, [pc, #16]	; (10344 <__do_global_dtors_aux+0x1c>)
   10332:	b113      	cbz	r3, 1033a <__do_global_dtors_aux+0x12>
   10334:	4804      	ldr	r0, [pc, #16]	; (10348 <__do_global_dtors_aux+0x20>)
   10336:	f3af 8000 	nop.w
   1033a:	2301      	movs	r3, #1
   1033c:	7023      	strb	r3, [r4, #0]
   1033e:	bd10      	pop	{r4, pc}
   10340:	10000560 	.word	0x10000560
   10344:	00000000 	.word	0x00000000
   10348:	0001a96c 	.word	0x0001a96c

0001034c <frame_dummy>:
   1034c:	b508      	push	{r3, lr}
   1034e:	4b03      	ldr	r3, [pc, #12]	; (1035c <frame_dummy+0x10>)
   10350:	b11b      	cbz	r3, 1035a <frame_dummy+0xe>
   10352:	4903      	ldr	r1, [pc, #12]	; (10360 <frame_dummy+0x14>)
   10354:	4803      	ldr	r0, [pc, #12]	; (10364 <frame_dummy+0x18>)
   10356:	f3af 8000 	nop.w
   1035a:	bd08      	pop	{r3, pc}
   1035c:	00000000 	.word	0x00000000
   10360:	10000564 	.word	0x10000564
   10364:	0001a96c 	.word	0x0001a96c

00010368 <LabGPIO::LabGPIO(unsigned char, unsigned char)>:
     }};
    //inline static volatile uint32_t *stat= &(LPC_GPIOINT->IntStatus);
    
    IsrPointer LabGPIO::pin_isr_map[kPorts][kPins]={ nullptr};
    
 LabGPIO::LabGPIO(uint8_t port, uint8_t pin){
   10368:	b530      	push	{r4, r5, lr}
   1036a:	b083      	sub	sp, #12
   1036c:	4675      	mov	r5, lr
   1036e:	9001      	str	r0, [sp, #4]
   10370:	460b      	mov	r3, r1
   10372:	f88d 3003 	strb.w	r3, [sp, #3]
   10376:	4613      	mov	r3, r2
   10378:	f88d 3002 	strb.w	r3, [sp, #2]
   1037c:	462b      	mov	r3, r5
   1037e:	4619      	mov	r1, r3
   10380:	480e      	ldr	r0, [pc, #56]	; (103bc <LabGPIO::LabGPIO(unsigned char, unsigned char)+0x54>)
   10382:	f005 f8a5 	bl	154d0 <__cyg_profile_func_enter>
    SelPort = port;
   10386:	9b01      	ldr	r3, [sp, #4]
   10388:	f89d 2003 	ldrb.w	r2, [sp, #3]
   1038c:	701a      	strb	r2, [r3, #0]
    SelPin = pin;
   1038e:	9b01      	ldr	r3, [sp, #4]
   10390:	f89d 2002 	ldrb.w	r2, [sp, #2]
   10394:	705a      	strb	r2, [r3, #1]
    
    interrupt_port = (port == 2) ? 1:0;
   10396:	f89d 3003 	ldrb.w	r3, [sp, #3]
   1039a:	2b02      	cmp	r3, #2
   1039c:	d101      	bne.n	103a2 <LabGPIO::LabGPIO(unsigned char, unsigned char)+0x3a>
   1039e:	2201      	movs	r2, #1
   103a0:	e000      	b.n	103a4 <LabGPIO::LabGPIO(unsigned char, unsigned char)+0x3c>
   103a2:	2200      	movs	r2, #0
   103a4:	9b01      	ldr	r3, [sp, #4]
   103a6:	709a      	strb	r2, [r3, #2]
 }
   103a8:	9c01      	ldr	r4, [sp, #4]
   103aa:	462b      	mov	r3, r5
   103ac:	4619      	mov	r1, r3
   103ae:	4803      	ldr	r0, [pc, #12]	; (103bc <LabGPIO::LabGPIO(unsigned char, unsigned char)+0x54>)
   103b0:	f005 f8a2 	bl	154f8 <__cyg_profile_func_exit>
   103b4:	4623      	mov	r3, r4
   103b6:	4618      	mov	r0, r3
   103b8:	b003      	add	sp, #12
   103ba:	bd30      	pop	{r4, r5, pc}
   103bc:	00010369 	.word	0x00010369

000103c0 <LabGPIO::SetAsOutput()>:
  
  GPIO[SelPort]->DIR &= ~(0<<SelPin);
  
  }

  void LabGPIO::SetAsOutput(){
   103c0:	b510      	push	{r4, lr}
   103c2:	b082      	sub	sp, #8
   103c4:	4674      	mov	r4, lr
   103c6:	9001      	str	r0, [sp, #4]
   103c8:	4623      	mov	r3, r4
   103ca:	4619      	mov	r1, r3
   103cc:	480f      	ldr	r0, [pc, #60]	; (1040c <LabGPIO::SetAsOutput()+0x4c>)
   103ce:	f005 f87f 	bl	154d0 <__cyg_profile_func_enter>
    /// Sets this GPIO as an output
       GPIO[SelPort]-> DIR |= (1<<SelPin);
   103d2:	9b01      	ldr	r3, [sp, #4]
   103d4:	781b      	ldrb	r3, [r3, #0]
   103d6:	461a      	mov	r2, r3
   103d8:	4b0d      	ldr	r3, [pc, #52]	; (10410 <LabGPIO::SetAsOutput()+0x50>)
   103da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   103de:	681a      	ldr	r2, [r3, #0]
   103e0:	9b01      	ldr	r3, [sp, #4]
   103e2:	785b      	ldrb	r3, [r3, #1]
   103e4:	4619      	mov	r1, r3
   103e6:	2301      	movs	r3, #1
   103e8:	408b      	lsls	r3, r1
   103ea:	4619      	mov	r1, r3
   103ec:	9b01      	ldr	r3, [sp, #4]
   103ee:	781b      	ldrb	r3, [r3, #0]
   103f0:	4618      	mov	r0, r3
   103f2:	4b07      	ldr	r3, [pc, #28]	; (10410 <LabGPIO::SetAsOutput()+0x50>)
   103f4:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   103f8:	430a      	orrs	r2, r1
   103fa:	601a      	str	r2, [r3, #0]
   103fc:	4623      	mov	r3, r4
   103fe:	4619      	mov	r1, r3
   10400:	4802      	ldr	r0, [pc, #8]	; (1040c <LabGPIO::SetAsOutput()+0x4c>)
   10402:	f005 f879 	bl	154f8 <__cyg_profile_func_exit>
     
  }
   10406:	bf00      	nop
   10408:	b002      	add	sp, #8
   1040a:	bd10      	pop	{r4, pc}
   1040c:	000103c1 	.word	0x000103c1
   10410:	10000000 	.word	0x10000000

00010414 <LabGPIO::SetHigh()>:
    if(direction == Direction::kOutput) SetAsOutput();
    else SetAsInput();
   }
  

  void LabGPIO::SetHigh(){
   10414:	b510      	push	{r4, lr}
   10416:	b082      	sub	sp, #8
   10418:	4674      	mov	r4, lr
   1041a:	9001      	str	r0, [sp, #4]
   1041c:	4623      	mov	r3, r4
   1041e:	4619      	mov	r1, r3
   10420:	480b      	ldr	r0, [pc, #44]	; (10450 <LabGPIO::SetHigh()+0x3c>)
   10422:	f005 f855 	bl	154d0 <__cyg_profile_func_enter>
       /// Set voltage of pin to HIGH
        GPIO[SelPort]-> SET = (1<<SelPin);
   10426:	9b01      	ldr	r3, [sp, #4]
   10428:	785b      	ldrb	r3, [r3, #1]
   1042a:	461a      	mov	r2, r3
   1042c:	2301      	movs	r3, #1
   1042e:	fa03 f202 	lsl.w	r2, r3, r2
   10432:	9b01      	ldr	r3, [sp, #4]
   10434:	781b      	ldrb	r3, [r3, #0]
   10436:	4619      	mov	r1, r3
   10438:	4b06      	ldr	r3, [pc, #24]	; (10454 <LabGPIO::SetHigh()+0x40>)
   1043a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   1043e:	619a      	str	r2, [r3, #24]
   10440:	4623      	mov	r3, r4
   10442:	4619      	mov	r1, r3
   10444:	4802      	ldr	r0, [pc, #8]	; (10450 <LabGPIO::SetHigh()+0x3c>)
   10446:	f005 f857 	bl	154f8 <__cyg_profile_func_exit>
    
  }
   1044a:	bf00      	nop
   1044c:	b002      	add	sp, #8
   1044e:	bd10      	pop	{r4, pc}
   10450:	00010415 	.word	0x00010415
   10454:	10000000 	.word	0x10000000

00010458 <LabGPIO::SetLow()>:
  void LabGPIO::SetLow(){
   10458:	b510      	push	{r4, lr}
   1045a:	b082      	sub	sp, #8
   1045c:	4674      	mov	r4, lr
   1045e:	9001      	str	r0, [sp, #4]
   10460:	4623      	mov	r3, r4
   10462:	4619      	mov	r1, r3
   10464:	480b      	ldr	r0, [pc, #44]	; (10494 <LabGPIO::SetLow()+0x3c>)
   10466:	f005 f833 	bl	154d0 <__cyg_profile_func_enter>
        /// Set voltage of pin to LOW
            GPIO[SelPort]-> CLR = (1<<SelPin);
   1046a:	9b01      	ldr	r3, [sp, #4]
   1046c:	785b      	ldrb	r3, [r3, #1]
   1046e:	461a      	mov	r2, r3
   10470:	2301      	movs	r3, #1
   10472:	fa03 f202 	lsl.w	r2, r3, r2
   10476:	9b01      	ldr	r3, [sp, #4]
   10478:	781b      	ldrb	r3, [r3, #0]
   1047a:	4619      	mov	r1, r3
   1047c:	4b06      	ldr	r3, [pc, #24]	; (10498 <LabGPIO::SetLow()+0x40>)
   1047e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   10482:	61da      	str	r2, [r3, #28]
   10484:	4623      	mov	r3, r4
   10486:	4619      	mov	r1, r3
   10488:	4802      	ldr	r0, [pc, #8]	; (10494 <LabGPIO::SetLow()+0x3c>)
   1048a:	f005 f835 	bl	154f8 <__cyg_profile_func_exit>
   
  }
   1048e:	bf00      	nop
   10490:	b002      	add	sp, #8
   10492:	bd10      	pop	{r4, pc}
   10494:	00010459 	.word	0x00010459
   10498:	10000000 	.word	0x10000000

0001049c <(anonymous namespace)::DefaultUptime()>:
{
// uptime in nanoseconds
inline uint64_t uptime = 0;
// Returns the system uptime in nanoseconds, do not use this function directly
[[gnu::always_inline]] inline uint64_t DefaultUptime()
{
   1049c:	b570      	push	{r4, r5, r6, lr}
   1049e:	4676      	mov	r6, lr
   104a0:	4633      	mov	r3, r6
   104a2:	4619      	mov	r1, r3
   104a4:	4807      	ldr	r0, [pc, #28]	; (104c4 <(anonymous namespace)::DefaultUptime()+0x28>)
   104a6:	f005 f813 	bl	154d0 <__cyg_profile_func_enter>
  return uptime;
   104aa:	4b07      	ldr	r3, [pc, #28]	; (104c8 <(anonymous namespace)::DefaultUptime()+0x2c>)
   104ac:	e9d3 4500 	ldrd	r4, r5, [r3]
   104b0:	4633      	mov	r3, r6
   104b2:	4619      	mov	r1, r3
   104b4:	4803      	ldr	r0, [pc, #12]	; (104c4 <(anonymous namespace)::DefaultUptime()+0x28>)
   104b6:	f005 f81f 	bl	154f8 <__cyg_profile_func_exit>
   104ba:	4623      	mov	r3, r4
   104bc:	462c      	mov	r4, r5
}
   104be:	4618      	mov	r0, r3
   104c0:	4621      	mov	r1, r4
   104c2:	bd70      	pop	{r4, r5, r6, pc}
   104c4:	0001049d 	.word	0x0001049d
   104c8:	10000580 	.word	0x10000580

000104cc <Milliseconds()>:
{
  Uptime = uptime_function;
}
// Get system uptime in milliseconds as a 64-bit integer
inline uint64_t Milliseconds()
{
   104cc:	b570      	push	{r4, r5, r6, lr}
   104ce:	4674      	mov	r4, lr
   104d0:	4623      	mov	r3, r4
   104d2:	4619      	mov	r1, r3
   104d4:	480c      	ldr	r0, [pc, #48]	; (10508 <Milliseconds()+0x3c>)
   104d6:	f004 fffb 	bl	154d0 <__cyg_profile_func_enter>
  return Uptime() / 1'000;
   104da:	4b0c      	ldr	r3, [pc, #48]	; (1050c <Milliseconds()+0x40>)
   104dc:	681b      	ldr	r3, [r3, #0]
   104de:	4798      	blx	r3
   104e0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   104e4:	f04f 0300 	mov.w	r3, #0
   104e8:	f007 fcac 	bl	17e44 <__aeabi_uldivmod>
   104ec:	4602      	mov	r2, r0
   104ee:	460b      	mov	r3, r1
   104f0:	4615      	mov	r5, r2
   104f2:	461e      	mov	r6, r3
   104f4:	4623      	mov	r3, r4
   104f6:	4619      	mov	r1, r3
   104f8:	4803      	ldr	r0, [pc, #12]	; (10508 <Milliseconds()+0x3c>)
   104fa:	f004 fffd 	bl	154f8 <__cyg_profile_func_exit>
   104fe:	462b      	mov	r3, r5
   10500:	4634      	mov	r4, r6
}
   10502:	4618      	mov	r0, r3
   10504:	4621      	mov	r1, r4
   10506:	bd70      	pop	{r4, r5, r6, pc}
   10508:	000104cd 	.word	0x000104cd
   1050c:	10000018 	.word	0x10000018

00010510 <Wait(unsigned long long)::{lambda()#1}::operator()() const>:
  return status;
}

inline Status Wait(uint64_t timeout)
{
  return Wait(timeout, []() -> bool { return false; });
   10510:	b530      	push	{r4, r5, lr}
   10512:	b083      	sub	sp, #12
   10514:	4675      	mov	r5, lr
   10516:	9001      	str	r0, [sp, #4]
   10518:	462b      	mov	r3, r5
   1051a:	4619      	mov	r1, r3
   1051c:	4806      	ldr	r0, [pc, #24]	; (10538 <Wait(unsigned long long)::{lambda()#1}::operator()() const+0x28>)
   1051e:	f004 ffd7 	bl	154d0 <__cyg_profile_func_enter>
   10522:	2400      	movs	r4, #0
   10524:	462b      	mov	r3, r5
   10526:	4619      	mov	r1, r3
   10528:	4803      	ldr	r0, [pc, #12]	; (10538 <Wait(unsigned long long)::{lambda()#1}::operator()() const+0x28>)
   1052a:	f004 ffe5 	bl	154f8 <__cyg_profile_func_exit>
   1052e:	4623      	mov	r3, r4
   10530:	4618      	mov	r0, r3
   10532:	b003      	add	sp, #12
   10534:	bd30      	pop	{r4, r5, pc}
   10536:	bf00      	nop
   10538:	00010511 	.word	0x00010511

0001053c <Wait(unsigned long long)::{lambda()#1}::_FUN()>:
   1053c:	b538      	push	{r3, r4, r5, lr}
   1053e:	4674      	mov	r4, lr
   10540:	4623      	mov	r3, r4
   10542:	4619      	mov	r1, r3
   10544:	4807      	ldr	r0, [pc, #28]	; (10564 <Wait(unsigned long long)::{lambda()#1}::_FUN()+0x28>)
   10546:	f004 ffc3 	bl	154d0 <__cyg_profile_func_enter>
   1054a:	2000      	movs	r0, #0
   1054c:	f7ff ffe0 	bl	10510 <Wait(unsigned long long)::{lambda()#1}::operator()() const>
   10550:	4603      	mov	r3, r0
   10552:	461d      	mov	r5, r3
   10554:	4623      	mov	r3, r4
   10556:	4619      	mov	r1, r3
   10558:	4802      	ldr	r0, [pc, #8]	; (10564 <Wait(unsigned long long)::{lambda()#1}::_FUN()+0x28>)
   1055a:	f004 ffcd 	bl	154f8 <__cyg_profile_func_exit>
   1055e:	462b      	mov	r3, r5
   10560:	4618      	mov	r0, r3
   10562:	bd38      	pop	{r3, r4, r5, pc}
   10564:	0001053d 	.word	0x0001053d

00010568 <Wait(unsigned long long)>:
{
   10568:	b5f0      	push	{r4, r5, r6, r7, lr}
   1056a:	b089      	sub	sp, #36	; 0x24
   1056c:	4675      	mov	r5, lr
   1056e:	e9cd 0100 	strd	r0, r1, [sp]
   10572:	462b      	mov	r3, r5
   10574:	4619      	mov	r1, r3
   10576:	482b      	ldr	r0, [pc, #172]	; (10624 <Wait(unsigned long long)+0xbc>)
   10578:	f004 ffaa 	bl	154d0 <__cyg_profile_func_enter>
   1057c:	e9dd 3400 	ldrd	r3, r4, [sp]
   10580:	e9cd 3406 	strd	r3, r4, [sp, #24]
   10584:	f88d 6008 	strb.w	r6, [sp, #8]
   10588:	462b      	mov	r3, r5
   1058a:	4619      	mov	r1, r3
   1058c:	4826      	ldr	r0, [pc, #152]	; (10628 <Wait(unsigned long long)+0xc0>)
   1058e:	f004 ff9f 	bl	154d0 <__cyg_profile_func_enter>
  uint64_t timeout_time = 0;
   10592:	f04f 0300 	mov.w	r3, #0
   10596:	f04f 0400 	mov.w	r4, #0
   1059a:	e9cd 3404 	strd	r3, r4, [sp, #16]
  if (timeout == kMaxWait)
   1059e:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
   105a2:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
   105a6:	bf08      	it	eq
   105a8:	f1b3 3fff 	cmpeq.w	r3, #4294967295	; 0xffffffff
   105ac:	d106      	bne.n	105bc <Wait(unsigned long long)+0x54>
    timeout_time = kMaxWait;
   105ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   105b2:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   105b6:	e9cd 3404 	strd	r3, r4, [sp, #16]
   105ba:	e00a      	b.n	105d2 <Wait(unsigned long long)+0x6a>
    timeout_time = Milliseconds() + timeout;
   105bc:	f7ff ff86 	bl	104cc <Milliseconds()>
   105c0:	460a      	mov	r2, r1
   105c2:	4601      	mov	r1, r0
   105c4:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
   105c8:	185e      	adds	r6, r3, r1
   105ca:	eb44 0702 	adc.w	r7, r4, r2
   105ce:	e9cd 6704 	strd	r6, r7, [sp, #16]
  Status status = Status::kTimedOut;
   105d2:	2301      	movs	r3, #1
   105d4:	9303      	str	r3, [sp, #12]
  while (Milliseconds() < timeout_time)
   105d6:	f7ff ff79 	bl	104cc <Milliseconds()>
   105da:	460a      	mov	r2, r1
   105dc:	4601      	mov	r1, r0
   105de:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
   105e2:	42a2      	cmp	r2, r4
   105e4:	bf08      	it	eq
   105e6:	4299      	cmpeq	r1, r3
   105e8:	bf34      	ite	cc
   105ea:	2301      	movcc	r3, #1
   105ec:	2300      	movcs	r3, #0
   105ee:	b2db      	uxtb	r3, r3
   105f0:	2b00      	cmp	r3, #0
   105f2:	d008      	beq.n	10606 <Wait(unsigned long long)+0x9e>
    if (is_done())
   105f4:	ab02      	add	r3, sp, #8
   105f6:	4618      	mov	r0, r3
   105f8:	f7ff ff8a 	bl	10510 <Wait(unsigned long long)::{lambda()#1}::operator()() const>
   105fc:	4603      	mov	r3, r0
   105fe:	2b00      	cmp	r3, #0
   10600:	d0e9      	beq.n	105d6 <Wait(unsigned long long)+0x6e>
      status = Status::kSuccess;
   10602:	2300      	movs	r3, #0
   10604:	9303      	str	r3, [sp, #12]
  return status;
   10606:	9c03      	ldr	r4, [sp, #12]
   10608:	462b      	mov	r3, r5
   1060a:	4619      	mov	r1, r3
   1060c:	4806      	ldr	r0, [pc, #24]	; (10628 <Wait(unsigned long long)+0xc0>)
   1060e:	f004 ff73 	bl	154f8 <__cyg_profile_func_exit>
   10612:	462b      	mov	r3, r5
   10614:	4619      	mov	r1, r3
   10616:	4803      	ldr	r0, [pc, #12]	; (10624 <Wait(unsigned long long)+0xbc>)
   10618:	f004 ff6e 	bl	154f8 <__cyg_profile_func_exit>
  return Wait(timeout, []() -> bool { return false; });
   1061c:	4623      	mov	r3, r4
}
   1061e:	4618      	mov	r0, r3
   10620:	b009      	add	sp, #36	; 0x24
   10622:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10624:	00010569 	.word	0x00010569
   10628:	00010d3d 	.word	0x00010d3d

0001062c <Delay(unsigned long long)>:

// Delay the system for a duration of time
inline void Delay([[maybe_unused]] uint64_t delay_time_ms)
{
   1062c:	b510      	push	{r4, lr}
   1062e:	b082      	sub	sp, #8
   10630:	4674      	mov	r4, lr
   10632:	e9cd 0100 	strd	r0, r1, [sp]
   10636:	4623      	mov	r3, r4
   10638:	4619      	mov	r1, r3
   1063a:	4807      	ldr	r0, [pc, #28]	; (10658 <Delay(unsigned long long)+0x2c>)
   1063c:	f004 ff48 	bl	154d0 <__cyg_profile_func_enter>
#if defined(HOST_TEST)
  return;
#else
  Wait(delay_time_ms);
   10640:	e9dd 0100 	ldrd	r0, r1, [sp]
   10644:	f7ff ff90 	bl	10568 <Wait(unsigned long long)>
   10648:	4623      	mov	r3, r4
   1064a:	4619      	mov	r1, r3
   1064c:	4802      	ldr	r0, [pc, #8]	; (10658 <Delay(unsigned long long)+0x2c>)
   1064e:	f004 ff53 	bl	154f8 <__cyg_profile_func_exit>
#endif  // HOST_TEST
}
   10652:	bf00      	nop
   10654:	b002      	add	sp, #8
   10656:	bd10      	pop	{r4, pc}
   10658:	0001062d 	.word	0x0001062d

0001065c <LabSpi::LabSpi(LabSpi::Peripheral)>:
#include "LabSPI.hpp"
inline static LPC_SSP_TypeDef * SSP[3] = {LPC_SSP0, LPC_SSP1, LPC_SSP2};

LabSpi::LabSpi(Peripheral SSPn){
   1065c:	b530      	push	{r4, r5, lr}
   1065e:	b083      	sub	sp, #12
   10660:	4675      	mov	r5, lr
   10662:	9001      	str	r0, [sp, #4]
   10664:	460b      	mov	r3, r1
   10666:	f88d 3003 	strb.w	r3, [sp, #3]
   1066a:	462b      	mov	r3, r5
   1066c:	4619      	mov	r1, r3
   1066e:	4808      	ldr	r0, [pc, #32]	; (10690 <LabSpi::LabSpi(LabSpi::Peripheral)+0x34>)
   10670:	f004 ff2e 	bl	154d0 <__cyg_profile_func_enter>
    SpiPort = SSPn;
   10674:	9b01      	ldr	r3, [sp, #4]
   10676:	f89d 2003 	ldrb.w	r2, [sp, #3]
   1067a:	701a      	strb	r2, [r3, #0]
}
   1067c:	9c01      	ldr	r4, [sp, #4]
   1067e:	462b      	mov	r3, r5
   10680:	4619      	mov	r1, r3
   10682:	4803      	ldr	r0, [pc, #12]	; (10690 <LabSpi::LabSpi(LabSpi::Peripheral)+0x34>)
   10684:	f004 ff38 	bl	154f8 <__cyg_profile_func_exit>
   10688:	4623      	mov	r3, r4
   1068a:	4618      	mov	r0, r3
   1068c:	b003      	add	sp, #12
   1068e:	bd30      	pop	{r4, r5, pc}
   10690:	0001065d 	.word	0x0001065d

00010694 <LabSpi::Initialize(unsigned char, LabSpi::FrameModes, unsigned char, LabSpi::Master_Slave)>:
bool LabSpi::Initialize(uint8_t data_size_select, FrameModes format, uint8_t divide, Master_Slave mode)
{
   10694:	b530      	push	{r4, r5, lr}
   10696:	b083      	sub	sp, #12
   10698:	4675      	mov	r5, lr
   1069a:	9001      	str	r0, [sp, #4]
   1069c:	4608      	mov	r0, r1
   1069e:	4611      	mov	r1, r2
   106a0:	461a      	mov	r2, r3
   106a2:	4603      	mov	r3, r0
   106a4:	f88d 3003 	strb.w	r3, [sp, #3]
   106a8:	460b      	mov	r3, r1
   106aa:	f88d 3002 	strb.w	r3, [sp, #2]
   106ae:	4613      	mov	r3, r2
   106b0:	f88d 3001 	strb.w	r3, [sp, #1]
   106b4:	462b      	mov	r3, r5
   106b6:	4619      	mov	r1, r3
   106b8:	489a      	ldr	r0, [pc, #616]	; (10924 <LabSpi::Initialize(unsigned char, LabSpi::FrameModes, unsigned char, LabSpi::Master_Slave)+0x290>)
   106ba:	f004 ff09 	bl	154d0 <__cyg_profile_func_enter>
  // Initialize SSP peripheral to master
  switch(SpiPort)
   106be:	9b01      	ldr	r3, [sp, #4]
   106c0:	781b      	ldrb	r3, [r3, #0]
   106c2:	2b01      	cmp	r3, #1
   106c4:	d00f      	beq.n	106e6 <LabSpi::Initialize(unsigned char, LabSpi::FrameModes, unsigned char, LabSpi::Master_Slave)+0x52>
   106c6:	2b02      	cmp	r3, #2
   106c8:	d019      	beq.n	106fe <LabSpi::Initialize(unsigned char, LabSpi::FrameModes, unsigned char, LabSpi::Master_Slave)+0x6a>
   106ca:	2b00      	cmp	r3, #0
   106cc:	d123      	bne.n	10716 <LabSpi::Initialize(unsigned char, LabSpi::FrameModes, unsigned char, LabSpi::Master_Slave)+0x82>
  {
    case 0:
      LPC_SC->PCONP |= (1<<21);
   106ce:	4b96      	ldr	r3, [pc, #600]	; (10928 <LabSpi::Initialize(unsigned char, LabSpi::FrameModes, unsigned char, LabSpi::Master_Slave)+0x294>)
   106d0:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
   106d4:	4a94      	ldr	r2, [pc, #592]	; (10928 <LabSpi::Initialize(unsigned char, LabSpi::FrameModes, unsigned char, LabSpi::Master_Slave)+0x294>)
   106d6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
   106da:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
      //chip_select();
      chip_set();
   106de:	9801      	ldr	r0, [sp, #4]
   106e0:	f000 fa1e 	bl	10b20 <LabSpi::chip_set()>
      break;
   106e4:	e017      	b.n	10716 <LabSpi::Initialize(unsigned char, LabSpi::FrameModes, unsigned char, LabSpi::Master_Slave)+0x82>
    case 1:
      LPC_SC->PCONP |= (1<<10);
   106e6:	4b90      	ldr	r3, [pc, #576]	; (10928 <LabSpi::Initialize(unsigned char, LabSpi::FrameModes, unsigned char, LabSpi::Master_Slave)+0x294>)
   106e8:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
   106ec:	4a8e      	ldr	r2, [pc, #568]	; (10928 <LabSpi::Initialize(unsigned char, LabSpi::FrameModes, unsigned char, LabSpi::Master_Slave)+0x294>)
   106ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
   106f2:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
      //chip_select();
      chip_set();
   106f6:	9801      	ldr	r0, [sp, #4]
   106f8:	f000 fa12 	bl	10b20 <LabSpi::chip_set()>
      break;
   106fc:	e00b      	b.n	10716 <LabSpi::Initialize(unsigned char, LabSpi::FrameModes, unsigned char, LabSpi::Master_Slave)+0x82>
    case 2: 
      //SSP 2
      LPC_SC -> PCONP |= (1<<20);
   106fe:	4b8a      	ldr	r3, [pc, #552]	; (10928 <LabSpi::Initialize(unsigned char, LabSpi::FrameModes, unsigned char, LabSpi::Master_Slave)+0x294>)
   10700:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
   10704:	4a88      	ldr	r2, [pc, #544]	; (10928 <LabSpi::Initialize(unsigned char, LabSpi::FrameModes, unsigned char, LabSpi::Master_Slave)+0x294>)
   10706:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   1070a:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
      //chip_select();
      chip_set();
   1070e:	9801      	ldr	r0, [sp, #4]
   10710:	f000 fa06 	bl	10b20 <LabSpi::chip_set()>
      break;
   10714:	bf00      	nop
    
  }
  if( mode == kMaster){
   10716:	f89d 3018 	ldrb.w	r3, [sp, #24]
   1071a:	2b00      	cmp	r3, #0
   1071c:	d179      	bne.n	10812 <LabSpi::Initialize(unsigned char, LabSpi::FrameModes, unsigned char, LabSpi::Master_Slave)+0x17e>
  SSP[SpiPort]->CR0 &= ~(0xFFFF<<0);//Clear first 16 bits
   1071e:	9b01      	ldr	r3, [sp, #4]
   10720:	781b      	ldrb	r3, [r3, #0]
   10722:	461a      	mov	r2, r3
   10724:	4b81      	ldr	r3, [pc, #516]	; (1092c <LabSpi::Initialize(unsigned char, LabSpi::FrameModes, unsigned char, LabSpi::Master_Slave)+0x298>)
   10726:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   1072a:	681b      	ldr	r3, [r3, #0]
   1072c:	9a01      	ldr	r2, [sp, #4]
   1072e:	7812      	ldrb	r2, [r2, #0]
   10730:	4611      	mov	r1, r2
   10732:	4a7e      	ldr	r2, [pc, #504]	; (1092c <LabSpi::Initialize(unsigned char, LabSpi::FrameModes, unsigned char, LabSpi::Master_Slave)+0x298>)
   10734:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
   10738:	0c1b      	lsrs	r3, r3, #16
   1073a:	041b      	lsls	r3, r3, #16
   1073c:	6013      	str	r3, [r2, #0]
  SSP[SpiPort]->CR0 |= (data_size_select-1); // set bit transfer size
   1073e:	9b01      	ldr	r3, [sp, #4]
   10740:	781b      	ldrb	r3, [r3, #0]
   10742:	461a      	mov	r2, r3
   10744:	4b79      	ldr	r3, [pc, #484]	; (1092c <LabSpi::Initialize(unsigned char, LabSpi::FrameModes, unsigned char, LabSpi::Master_Slave)+0x298>)
   10746:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   1074a:	681a      	ldr	r2, [r3, #0]
   1074c:	f89d 3003 	ldrb.w	r3, [sp, #3]
   10750:	3b01      	subs	r3, #1
   10752:	4619      	mov	r1, r3
   10754:	9b01      	ldr	r3, [sp, #4]
   10756:	781b      	ldrb	r3, [r3, #0]
   10758:	4618      	mov	r0, r3
   1075a:	4b74      	ldr	r3, [pc, #464]	; (1092c <LabSpi::Initialize(unsigned char, LabSpi::FrameModes, unsigned char, LabSpi::Master_Slave)+0x298>)
   1075c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   10760:	430a      	orrs	r2, r1
   10762:	601a      	str	r2, [r3, #0]
  SSP[SpiPort]->CR0 |= (format << 4); // select frame format
   10764:	9b01      	ldr	r3, [sp, #4]
   10766:	781b      	ldrb	r3, [r3, #0]
   10768:	461a      	mov	r2, r3
   1076a:	4b70      	ldr	r3, [pc, #448]	; (1092c <LabSpi::Initialize(unsigned char, LabSpi::FrameModes, unsigned char, LabSpi::Master_Slave)+0x298>)
   1076c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   10770:	681a      	ldr	r2, [r3, #0]
   10772:	f89d 3002 	ldrb.w	r3, [sp, #2]
   10776:	011b      	lsls	r3, r3, #4
   10778:	4619      	mov	r1, r3
   1077a:	9b01      	ldr	r3, [sp, #4]
   1077c:	781b      	ldrb	r3, [r3, #0]
   1077e:	4618      	mov	r0, r3
   10780:	4b6a      	ldr	r3, [pc, #424]	; (1092c <LabSpi::Initialize(unsigned char, LabSpi::FrameModes, unsigned char, LabSpi::Master_Slave)+0x298>)
   10782:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   10786:	430a      	orrs	r2, r1
   10788:	601a      	str	r2, [r3, #0]
  SSP[SpiPort]->CPSR |= (divide); // Clock Prescale Register defaulted to 2
   1078a:	9b01      	ldr	r3, [sp, #4]
   1078c:	781b      	ldrb	r3, [r3, #0]
   1078e:	461a      	mov	r2, r3
   10790:	4b66      	ldr	r3, [pc, #408]	; (1092c <LabSpi::Initialize(unsigned char, LabSpi::FrameModes, unsigned char, LabSpi::Master_Slave)+0x298>)
   10792:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   10796:	691a      	ldr	r2, [r3, #16]
   10798:	f89d 3001 	ldrb.w	r3, [sp, #1]
   1079c:	4619      	mov	r1, r3
   1079e:	9b01      	ldr	r3, [sp, #4]
   107a0:	781b      	ldrb	r3, [r3, #0]
   107a2:	4618      	mov	r0, r3
   107a4:	4b61      	ldr	r3, [pc, #388]	; (1092c <LabSpi::Initialize(unsigned char, LabSpi::FrameModes, unsigned char, LabSpi::Master_Slave)+0x298>)
   107a6:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   107aa:	430a      	orrs	r2, r1
   107ac:	611a      	str	r2, [r3, #16]
  SSP[SpiPort]->CR0 |= (1 << 8); // Serial Clock Rate
   107ae:	9b01      	ldr	r3, [sp, #4]
   107b0:	781b      	ldrb	r3, [r3, #0]
   107b2:	461a      	mov	r2, r3
   107b4:	4b5d      	ldr	r3, [pc, #372]	; (1092c <LabSpi::Initialize(unsigned char, LabSpi::FrameModes, unsigned char, LabSpi::Master_Slave)+0x298>)
   107b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   107ba:	681a      	ldr	r2, [r3, #0]
   107bc:	9b01      	ldr	r3, [sp, #4]
   107be:	781b      	ldrb	r3, [r3, #0]
   107c0:	4619      	mov	r1, r3
   107c2:	4b5a      	ldr	r3, [pc, #360]	; (1092c <LabSpi::Initialize(unsigned char, LabSpi::FrameModes, unsigned char, LabSpi::Master_Slave)+0x298>)
   107c4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   107c8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   107cc:	601a      	str	r2, [r3, #0]
  SSP[SpiPort]->CR1 &= ~(0b111 << 0); // Clears CR1 and set to master and normal operation
   107ce:	9b01      	ldr	r3, [sp, #4]
   107d0:	781b      	ldrb	r3, [r3, #0]
   107d2:	461a      	mov	r2, r3
   107d4:	4b55      	ldr	r3, [pc, #340]	; (1092c <LabSpi::Initialize(unsigned char, LabSpi::FrameModes, unsigned char, LabSpi::Master_Slave)+0x298>)
   107d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   107da:	685a      	ldr	r2, [r3, #4]
   107dc:	9b01      	ldr	r3, [sp, #4]
   107de:	781b      	ldrb	r3, [r3, #0]
   107e0:	4619      	mov	r1, r3
   107e2:	4b52      	ldr	r3, [pc, #328]	; (1092c <LabSpi::Initialize(unsigned char, LabSpi::FrameModes, unsigned char, LabSpi::Master_Slave)+0x298>)
   107e4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   107e8:	f022 0207 	bic.w	r2, r2, #7
   107ec:	605a      	str	r2, [r3, #4]
  SSP[SpiPort]->CR1 |= (0b1<<1); // Enable SSP controller
   107ee:	9b01      	ldr	r3, [sp, #4]
   107f0:	781b      	ldrb	r3, [r3, #0]
   107f2:	461a      	mov	r2, r3
   107f4:	4b4d      	ldr	r3, [pc, #308]	; (1092c <LabSpi::Initialize(unsigned char, LabSpi::FrameModes, unsigned char, LabSpi::Master_Slave)+0x298>)
   107f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   107fa:	685a      	ldr	r2, [r3, #4]
   107fc:	9b01      	ldr	r3, [sp, #4]
   107fe:	781b      	ldrb	r3, [r3, #0]
   10800:	4619      	mov	r1, r3
   10802:	4b4a      	ldr	r3, [pc, #296]	; (1092c <LabSpi::Initialize(unsigned char, LabSpi::FrameModes, unsigned char, LabSpi::Master_Slave)+0x298>)
   10804:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   10808:	f042 0202 	orr.w	r2, r2, #2
   1080c:	605a      	str	r2, [r3, #4]
  return true;
   1080e:	2401      	movs	r4, #1
   10810:	e07e      	b.n	10910 <LabSpi::Initialize(unsigned char, LabSpi::FrameModes, unsigned char, LabSpi::Master_Slave)+0x27c>
  }
  else if (mode == kSlave)
   10812:	f89d 3018 	ldrb.w	r3, [sp, #24]
   10816:	2b01      	cmp	r3, #1
   10818:	d179      	bne.n	1090e <LabSpi::Initialize(unsigned char, LabSpi::FrameModes, unsigned char, LabSpi::Master_Slave)+0x27a>
  {
  SSP[SpiPort]->CR0 &= ~(0xFFFF<<0);//Clear first 16 bits
   1081a:	9b01      	ldr	r3, [sp, #4]
   1081c:	781b      	ldrb	r3, [r3, #0]
   1081e:	461a      	mov	r2, r3
   10820:	4b42      	ldr	r3, [pc, #264]	; (1092c <LabSpi::Initialize(unsigned char, LabSpi::FrameModes, unsigned char, LabSpi::Master_Slave)+0x298>)
   10822:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   10826:	681b      	ldr	r3, [r3, #0]
   10828:	9a01      	ldr	r2, [sp, #4]
   1082a:	7812      	ldrb	r2, [r2, #0]
   1082c:	4611      	mov	r1, r2
   1082e:	4a3f      	ldr	r2, [pc, #252]	; (1092c <LabSpi::Initialize(unsigned char, LabSpi::FrameModes, unsigned char, LabSpi::Master_Slave)+0x298>)
   10830:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
   10834:	0c1b      	lsrs	r3, r3, #16
   10836:	041b      	lsls	r3, r3, #16
   10838:	6013      	str	r3, [r2, #0]
  SSP[SpiPort]->CR0 |= (data_size_select-1); // set bit transfer size
   1083a:	9b01      	ldr	r3, [sp, #4]
   1083c:	781b      	ldrb	r3, [r3, #0]
   1083e:	461a      	mov	r2, r3
   10840:	4b3a      	ldr	r3, [pc, #232]	; (1092c <LabSpi::Initialize(unsigned char, LabSpi::FrameModes, unsigned char, LabSpi::Master_Slave)+0x298>)
   10842:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   10846:	681a      	ldr	r2, [r3, #0]
   10848:	f89d 3003 	ldrb.w	r3, [sp, #3]
   1084c:	3b01      	subs	r3, #1
   1084e:	4619      	mov	r1, r3
   10850:	9b01      	ldr	r3, [sp, #4]
   10852:	781b      	ldrb	r3, [r3, #0]
   10854:	4618      	mov	r0, r3
   10856:	4b35      	ldr	r3, [pc, #212]	; (1092c <LabSpi::Initialize(unsigned char, LabSpi::FrameModes, unsigned char, LabSpi::Master_Slave)+0x298>)
   10858:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   1085c:	430a      	orrs	r2, r1
   1085e:	601a      	str	r2, [r3, #0]
  SSP[SpiPort]->CR0 |= (format << 4); // select frame format
   10860:	9b01      	ldr	r3, [sp, #4]
   10862:	781b      	ldrb	r3, [r3, #0]
   10864:	461a      	mov	r2, r3
   10866:	4b31      	ldr	r3, [pc, #196]	; (1092c <LabSpi::Initialize(unsigned char, LabSpi::FrameModes, unsigned char, LabSpi::Master_Slave)+0x298>)
   10868:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   1086c:	681a      	ldr	r2, [r3, #0]
   1086e:	f89d 3002 	ldrb.w	r3, [sp, #2]
   10872:	011b      	lsls	r3, r3, #4
   10874:	4619      	mov	r1, r3
   10876:	9b01      	ldr	r3, [sp, #4]
   10878:	781b      	ldrb	r3, [r3, #0]
   1087a:	4618      	mov	r0, r3
   1087c:	4b2b      	ldr	r3, [pc, #172]	; (1092c <LabSpi::Initialize(unsigned char, LabSpi::FrameModes, unsigned char, LabSpi::Master_Slave)+0x298>)
   1087e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   10882:	430a      	orrs	r2, r1
   10884:	601a      	str	r2, [r3, #0]
  SSP[SpiPort]->CR0 |= (1<<8);// Serial Clock Rate
   10886:	9b01      	ldr	r3, [sp, #4]
   10888:	781b      	ldrb	r3, [r3, #0]
   1088a:	461a      	mov	r2, r3
   1088c:	4b27      	ldr	r3, [pc, #156]	; (1092c <LabSpi::Initialize(unsigned char, LabSpi::FrameModes, unsigned char, LabSpi::Master_Slave)+0x298>)
   1088e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   10892:	681a      	ldr	r2, [r3, #0]
   10894:	9b01      	ldr	r3, [sp, #4]
   10896:	781b      	ldrb	r3, [r3, #0]
   10898:	4619      	mov	r1, r3
   1089a:	4b24      	ldr	r3, [pc, #144]	; (1092c <LabSpi::Initialize(unsigned char, LabSpi::FrameModes, unsigned char, LabSpi::Master_Slave)+0x298>)
   1089c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   108a0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   108a4:	601a      	str	r2, [r3, #0]
  SSP[SpiPort]->CPSR |= (divide); // Clock Prescale Register defaulted to 2
   108a6:	9b01      	ldr	r3, [sp, #4]
   108a8:	781b      	ldrb	r3, [r3, #0]
   108aa:	461a      	mov	r2, r3
   108ac:	4b1f      	ldr	r3, [pc, #124]	; (1092c <LabSpi::Initialize(unsigned char, LabSpi::FrameModes, unsigned char, LabSpi::Master_Slave)+0x298>)
   108ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   108b2:	691a      	ldr	r2, [r3, #16]
   108b4:	f89d 3001 	ldrb.w	r3, [sp, #1]
   108b8:	4619      	mov	r1, r3
   108ba:	9b01      	ldr	r3, [sp, #4]
   108bc:	781b      	ldrb	r3, [r3, #0]
   108be:	4618      	mov	r0, r3
   108c0:	4b1a      	ldr	r3, [pc, #104]	; (1092c <LabSpi::Initialize(unsigned char, LabSpi::FrameModes, unsigned char, LabSpi::Master_Slave)+0x298>)
   108c2:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   108c6:	430a      	orrs	r2, r1
   108c8:	611a      	str	r2, [r3, #16]
  SSP[SpiPort]->CR1 &= ~(0b111 << 0); // Clears CR1 and sets normal operation
   108ca:	9b01      	ldr	r3, [sp, #4]
   108cc:	781b      	ldrb	r3, [r3, #0]
   108ce:	461a      	mov	r2, r3
   108d0:	4b16      	ldr	r3, [pc, #88]	; (1092c <LabSpi::Initialize(unsigned char, LabSpi::FrameModes, unsigned char, LabSpi::Master_Slave)+0x298>)
   108d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   108d6:	685a      	ldr	r2, [r3, #4]
   108d8:	9b01      	ldr	r3, [sp, #4]
   108da:	781b      	ldrb	r3, [r3, #0]
   108dc:	4619      	mov	r1, r3
   108de:	4b13      	ldr	r3, [pc, #76]	; (1092c <LabSpi::Initialize(unsigned char, LabSpi::FrameModes, unsigned char, LabSpi::Master_Slave)+0x298>)
   108e0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   108e4:	f022 0207 	bic.w	r2, r2, #7
   108e8:	605a      	str	r2, [r3, #4]
  SSP[SpiPort]->CR1 |= (0b11<<1); // Enable SSP controller and set to slave mode
   108ea:	9b01      	ldr	r3, [sp, #4]
   108ec:	781b      	ldrb	r3, [r3, #0]
   108ee:	461a      	mov	r2, r3
   108f0:	4b0e      	ldr	r3, [pc, #56]	; (1092c <LabSpi::Initialize(unsigned char, LabSpi::FrameModes, unsigned char, LabSpi::Master_Slave)+0x298>)
   108f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   108f6:	685a      	ldr	r2, [r3, #4]
   108f8:	9b01      	ldr	r3, [sp, #4]
   108fa:	781b      	ldrb	r3, [r3, #0]
   108fc:	4619      	mov	r1, r3
   108fe:	4b0b      	ldr	r3, [pc, #44]	; (1092c <LabSpi::Initialize(unsigned char, LabSpi::FrameModes, unsigned char, LabSpi::Master_Slave)+0x298>)
   10900:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   10904:	f042 0206 	orr.w	r2, r2, #6
   10908:	605a      	str	r2, [r3, #4]
  return true;
   1090a:	2401      	movs	r4, #1
   1090c:	e000      	b.n	10910 <LabSpi::Initialize(unsigned char, LabSpi::FrameModes, unsigned char, LabSpi::Master_Slave)+0x27c>
  }
  else 
      return false;
   1090e:	2400      	movs	r4, #0
   10910:	462b      	mov	r3, r5
   10912:	4619      	mov	r1, r3
   10914:	4803      	ldr	r0, [pc, #12]	; (10924 <LabSpi::Initialize(unsigned char, LabSpi::FrameModes, unsigned char, LabSpi::Master_Slave)+0x290>)
   10916:	f004 fdef 	bl	154f8 <__cyg_profile_func_exit>
   1091a:	4623      	mov	r3, r4
}
   1091c:	4618      	mov	r0, r3
   1091e:	b003      	add	sp, #12
   10920:	bd30      	pop	{r4, r5, pc}
   10922:	bf00      	nop
   10924:	00010695 	.word	0x00010695
   10928:	400fc000 	.word	0x400fc000
   1092c:	1000001c 	.word	0x1000001c

00010930 <LabSpi::chip_select()>:
void LabSpi::chip_select()
{
   10930:	b510      	push	{r4, lr}
   10932:	b08e      	sub	sp, #56	; 0x38
   10934:	4674      	mov	r4, lr
   10936:	9001      	str	r0, [sp, #4]
   10938:	4623      	mov	r3, r4
   1093a:	4619      	mov	r1, r3
   1093c:	483a      	ldr	r0, [pc, #232]	; (10a28 <LabSpi::chip_select()+0xf8>)
   1093e:	f004 fdc7 	bl	154d0 <__cyg_profile_func_enter>
    switch(SpiPort)
   10942:	9b01      	ldr	r3, [sp, #4]
   10944:	781b      	ldrb	r3, [r3, #0]
   10946:	2b01      	cmp	r3, #1
   10948:	d024      	beq.n	10994 <LabSpi::chip_select()+0x64>
   1094a:	2b02      	cmp	r3, #2
   1094c:	d043      	beq.n	109d6 <LabSpi::chip_select()+0xa6>
   1094e:	2b00      	cmp	r3, #0
   10950:	d161      	bne.n	10a16 <LabSpi::chip_select()+0xe6>
    {
    case 0:
    {
      LabGPIO CE0(0,16); //CE 
   10952:	ab0c      	add	r3, sp, #48	; 0x30
   10954:	2210      	movs	r2, #16
   10956:	2100      	movs	r1, #0
   10958:	4618      	mov	r0, r3
   1095a:	f7ff fd05 	bl	10368 <LabGPIO::LabGPIO(unsigned char, unsigned char)>
      LabGPIO MCE0(0,1);// Mirror
   1095e:	ab0a      	add	r3, sp, #40	; 0x28
   10960:	2201      	movs	r2, #1
   10962:	2100      	movs	r1, #0
   10964:	4618      	mov	r0, r3
   10966:	f7ff fcff 	bl	10368 <LabGPIO::LabGPIO(unsigned char, unsigned char)>
      CE0.SetAsOutput();
   1096a:	ab0c      	add	r3, sp, #48	; 0x30
   1096c:	4618      	mov	r0, r3
   1096e:	f7ff fd27 	bl	103c0 <LabGPIO::SetAsOutput()>
      MCE0.SetAsOutput();
   10972:	ab0a      	add	r3, sp, #40	; 0x28
   10974:	4618      	mov	r0, r3
   10976:	f7ff fd23 	bl	103c0 <LabGPIO::SetAsOutput()>
      CE0.SetLow();
   1097a:	ab0c      	add	r3, sp, #48	; 0x30
   1097c:	4618      	mov	r0, r3
   1097e:	f7ff fd6b 	bl	10458 <LabGPIO::SetLow()>
      MCE0.SetLow();
   10982:	ab0a      	add	r3, sp, #40	; 0x28
   10984:	4618      	mov	r0, r3
   10986:	f7ff fd67 	bl	10458 <LabGPIO::SetLow()>
      printf("P0_1 is the mirror pin\n");
   1098a:	4828      	ldr	r0, [pc, #160]	; (10a2c <LabSpi::chip_select()+0xfc>)
   1098c:	f004 fd70 	bl	15470 <puts>
      break;
   10990:	bf00      	nop
   10992:	e040      	b.n	10a16 <LabSpi::chip_select()+0xe6>
    }
    case 1:
    {
     LabGPIO CE1(0,6); //CE 
   10994:	ab08      	add	r3, sp, #32
   10996:	2206      	movs	r2, #6
   10998:	2100      	movs	r1, #0
   1099a:	4618      	mov	r0, r3
   1099c:	f7ff fce4 	bl	10368 <LabGPIO::LabGPIO(unsigned char, unsigned char)>
      LabGPIO MCE1(0,25);//Mirror
   109a0:	ab06      	add	r3, sp, #24
   109a2:	2219      	movs	r2, #25
   109a4:	2100      	movs	r1, #0
   109a6:	4618      	mov	r0, r3
   109a8:	f7ff fcde 	bl	10368 <LabGPIO::LabGPIO(unsigned char, unsigned char)>
      CE1.SetAsOutput();
   109ac:	ab08      	add	r3, sp, #32
   109ae:	4618      	mov	r0, r3
   109b0:	f7ff fd06 	bl	103c0 <LabGPIO::SetAsOutput()>
      MCE1.SetAsOutput();
   109b4:	ab06      	add	r3, sp, #24
   109b6:	4618      	mov	r0, r3
   109b8:	f7ff fd02 	bl	103c0 <LabGPIO::SetAsOutput()>
      CE1.SetLow();
   109bc:	ab08      	add	r3, sp, #32
   109be:	4618      	mov	r0, r3
   109c0:	f7ff fd4a 	bl	10458 <LabGPIO::SetLow()>
      MCE1.SetLow();
   109c4:	ab06      	add	r3, sp, #24
   109c6:	4618      	mov	r0, r3
   109c8:	f7ff fd46 	bl	10458 <LabGPIO::SetLow()>
      printf("P0_25 is the mirror pin\n");
   109cc:	4818      	ldr	r0, [pc, #96]	; (10a30 <LabSpi::chip_select()+0x100>)
   109ce:	f004 fd4f 	bl	15470 <puts>
      break;
   109d2:	bf00      	nop
   109d4:	e01f      	b.n	10a16 <LabSpi::chip_select()+0xe6>
    }
    case 2: 
    {
      LabGPIO CE2(1,10); //CE 
   109d6:	ab04      	add	r3, sp, #16
   109d8:	220a      	movs	r2, #10
   109da:	2101      	movs	r1, #1
   109dc:	4618      	mov	r0, r3
   109de:	f7ff fcc3 	bl	10368 <LabGPIO::LabGPIO(unsigned char, unsigned char)>
      LabGPIO MCE2(0,6); // Mirror
   109e2:	ab02      	add	r3, sp, #8
   109e4:	2206      	movs	r2, #6
   109e6:	2100      	movs	r1, #0
   109e8:	4618      	mov	r0, r3
   109ea:	f7ff fcbd 	bl	10368 <LabGPIO::LabGPIO(unsigned char, unsigned char)>
      CE2.SetAsOutput();
   109ee:	ab04      	add	r3, sp, #16
   109f0:	4618      	mov	r0, r3
   109f2:	f7ff fce5 	bl	103c0 <LabGPIO::SetAsOutput()>
      MCE2.SetAsOutput();
   109f6:	ab02      	add	r3, sp, #8
   109f8:	4618      	mov	r0, r3
   109fa:	f7ff fce1 	bl	103c0 <LabGPIO::SetAsOutput()>
      CE2.SetLow();
   109fe:	ab04      	add	r3, sp, #16
   10a00:	4618      	mov	r0, r3
   10a02:	f7ff fd29 	bl	10458 <LabGPIO::SetLow()>
      MCE2.SetLow();
   10a06:	ab02      	add	r3, sp, #8
   10a08:	4618      	mov	r0, r3
   10a0a:	f7ff fd25 	bl	10458 <LabGPIO::SetLow()>
      printf("P4_28 is the mirror pin\n");
   10a0e:	4809      	ldr	r0, [pc, #36]	; (10a34 <LabSpi::chip_select()+0x104>)
   10a10:	f004 fd2e 	bl	15470 <puts>
      break;
   10a14:	bf00      	nop
   10a16:	4623      	mov	r3, r4
   10a18:	4619      	mov	r1, r3
   10a1a:	4803      	ldr	r0, [pc, #12]	; (10a28 <LabSpi::chip_select()+0xf8>)
   10a1c:	f004 fd6c 	bl	154f8 <__cyg_profile_func_exit>
    }
    }
    }
   10a20:	bf00      	nop
   10a22:	b00e      	add	sp, #56	; 0x38
   10a24:	bd10      	pop	{r4, pc}
   10a26:	bf00      	nop
   10a28:	00010931 	.word	0x00010931
   10a2c:	00018234 	.word	0x00018234
   10a30:	0001824c 	.word	0x0001824c
   10a34:	00018264 	.word	0x00018264

00010a38 <LabSpi::chip_deselect()>:
    

void LabSpi::chip_deselect(){
   10a38:	b510      	push	{r4, lr}
   10a3a:	b08e      	sub	sp, #56	; 0x38
   10a3c:	4674      	mov	r4, lr
   10a3e:	9001      	str	r0, [sp, #4]
   10a40:	4623      	mov	r3, r4
   10a42:	4619      	mov	r1, r3
   10a44:	4835      	ldr	r0, [pc, #212]	; (10b1c <LabSpi::chip_deselect()+0xe4>)
   10a46:	f004 fd43 	bl	154d0 <__cyg_profile_func_enter>
    switch(SpiPort)
   10a4a:	9b01      	ldr	r3, [sp, #4]
   10a4c:	781b      	ldrb	r3, [r3, #0]
   10a4e:	2b01      	cmp	r3, #1
   10a50:	d021      	beq.n	10a96 <LabSpi::chip_deselect()+0x5e>
   10a52:	2b02      	cmp	r3, #2
   10a54:	d03d      	beq.n	10ad2 <LabSpi::chip_deselect()+0x9a>
   10a56:	2b00      	cmp	r3, #0
   10a58:	d158      	bne.n	10b0c <LabSpi::chip_deselect()+0xd4>
    {
      
    case 0:
    {
      LabGPIO CE0(0,16); //CE 
   10a5a:	ab0c      	add	r3, sp, #48	; 0x30
   10a5c:	2210      	movs	r2, #16
   10a5e:	2100      	movs	r1, #0
   10a60:	4618      	mov	r0, r3
   10a62:	f7ff fc81 	bl	10368 <LabGPIO::LabGPIO(unsigned char, unsigned char)>
      LabGPIO MCE0(0,1);// Mirror
   10a66:	ab0a      	add	r3, sp, #40	; 0x28
   10a68:	2201      	movs	r2, #1
   10a6a:	2100      	movs	r1, #0
   10a6c:	4618      	mov	r0, r3
   10a6e:	f7ff fc7b 	bl	10368 <LabGPIO::LabGPIO(unsigned char, unsigned char)>
      CE0.SetAsOutput();
   10a72:	ab0c      	add	r3, sp, #48	; 0x30
   10a74:	4618      	mov	r0, r3
   10a76:	f7ff fca3 	bl	103c0 <LabGPIO::SetAsOutput()>
      MCE0.SetAsOutput();
   10a7a:	ab0a      	add	r3, sp, #40	; 0x28
   10a7c:	4618      	mov	r0, r3
   10a7e:	f7ff fc9f 	bl	103c0 <LabGPIO::SetAsOutput()>
      CE0.SetHigh();
   10a82:	ab0c      	add	r3, sp, #48	; 0x30
   10a84:	4618      	mov	r0, r3
   10a86:	f7ff fcc5 	bl	10414 <LabGPIO::SetHigh()>
      MCE0.SetHigh();
   10a8a:	ab0a      	add	r3, sp, #40	; 0x28
   10a8c:	4618      	mov	r0, r3
   10a8e:	f7ff fcc1 	bl	10414 <LabGPIO::SetHigh()>
     
      break;
   10a92:	bf00      	nop
   10a94:	e03a      	b.n	10b0c <LabSpi::chip_deselect()+0xd4>
    }
  
    case 1:
    {
      
      LabGPIO CE1(0,6); //CE 
   10a96:	ab08      	add	r3, sp, #32
   10a98:	2206      	movs	r2, #6
   10a9a:	2100      	movs	r1, #0
   10a9c:	4618      	mov	r0, r3
   10a9e:	f7ff fc63 	bl	10368 <LabGPIO::LabGPIO(unsigned char, unsigned char)>
      LabGPIO MCE1(0,25);//Mirror
   10aa2:	ab06      	add	r3, sp, #24
   10aa4:	2219      	movs	r2, #25
   10aa6:	2100      	movs	r1, #0
   10aa8:	4618      	mov	r0, r3
   10aaa:	f7ff fc5d 	bl	10368 <LabGPIO::LabGPIO(unsigned char, unsigned char)>
      CE1.SetAsOutput();
   10aae:	ab08      	add	r3, sp, #32
   10ab0:	4618      	mov	r0, r3
   10ab2:	f7ff fc85 	bl	103c0 <LabGPIO::SetAsOutput()>
      MCE1.SetAsOutput();
   10ab6:	ab06      	add	r3, sp, #24
   10ab8:	4618      	mov	r0, r3
   10aba:	f7ff fc81 	bl	103c0 <LabGPIO::SetAsOutput()>
      CE1.SetHigh();
   10abe:	ab08      	add	r3, sp, #32
   10ac0:	4618      	mov	r0, r3
   10ac2:	f7ff fca7 	bl	10414 <LabGPIO::SetHigh()>
      MCE1.SetHigh();
   10ac6:	ab06      	add	r3, sp, #24
   10ac8:	4618      	mov	r0, r3
   10aca:	f7ff fca3 	bl	10414 <LabGPIO::SetHigh()>

      break;
   10ace:	bf00      	nop
   10ad0:	e01c      	b.n	10b0c <LabSpi::chip_deselect()+0xd4>
    }
  
    case 2: 
    {  //SSP 2
     
      LabGPIO CE2(1,10); //CE 
   10ad2:	ab04      	add	r3, sp, #16
   10ad4:	220a      	movs	r2, #10
   10ad6:	2101      	movs	r1, #1
   10ad8:	4618      	mov	r0, r3
   10ada:	f7ff fc45 	bl	10368 <LabGPIO::LabGPIO(unsigned char, unsigned char)>
      LabGPIO MCE2(0,6); // Mirror
   10ade:	ab02      	add	r3, sp, #8
   10ae0:	2206      	movs	r2, #6
   10ae2:	2100      	movs	r1, #0
   10ae4:	4618      	mov	r0, r3
   10ae6:	f7ff fc3f 	bl	10368 <LabGPIO::LabGPIO(unsigned char, unsigned char)>
      CE2.SetAsOutput();
   10aea:	ab04      	add	r3, sp, #16
   10aec:	4618      	mov	r0, r3
   10aee:	f7ff fc67 	bl	103c0 <LabGPIO::SetAsOutput()>
      MCE2.SetAsOutput();
   10af2:	ab02      	add	r3, sp, #8
   10af4:	4618      	mov	r0, r3
   10af6:	f7ff fc63 	bl	103c0 <LabGPIO::SetAsOutput()>
      CE2.SetHigh();
   10afa:	ab04      	add	r3, sp, #16
   10afc:	4618      	mov	r0, r3
   10afe:	f7ff fc89 	bl	10414 <LabGPIO::SetHigh()>
      MCE2.SetHigh();
   10b02:	ab02      	add	r3, sp, #8
   10b04:	4618      	mov	r0, r3
   10b06:	f7ff fc85 	bl	10414 <LabGPIO::SetHigh()>
      break;
   10b0a:	bf00      	nop
   10b0c:	4623      	mov	r3, r4
   10b0e:	4619      	mov	r1, r3
   10b10:	4802      	ldr	r0, [pc, #8]	; (10b1c <LabSpi::chip_deselect()+0xe4>)
   10b12:	f004 fcf1 	bl	154f8 <__cyg_profile_func_exit>
    }
    }  
    }
   10b16:	bf00      	nop
   10b18:	b00e      	add	sp, #56	; 0x38
   10b1a:	bd10      	pop	{r4, pc}
   10b1c:	00010a39 	.word	0x00010a39

00010b20 <LabSpi::chip_set()>:
void LabSpi::chip_set(){
   10b20:	b510      	push	{r4, lr}
   10b22:	b082      	sub	sp, #8
   10b24:	4674      	mov	r4, lr
   10b26:	9001      	str	r0, [sp, #4]
   10b28:	4623      	mov	r3, r4
   10b2a:	4619      	mov	r1, r3
   10b2c:	482a      	ldr	r0, [pc, #168]	; (10bd8 <LabSpi::chip_set()+0xb8>)
   10b2e:	f004 fccf 	bl	154d0 <__cyg_profile_func_enter>
    switch(SpiPort){
   10b32:	9b01      	ldr	r3, [sp, #4]
   10b34:	781b      	ldrb	r3, [r3, #0]
   10b36:	2b01      	cmp	r3, #1
   10b38:	d019      	beq.n	10b6e <LabSpi::chip_set()+0x4e>
   10b3a:	2b02      	cmp	r3, #2
   10b3c:	d02d      	beq.n	10b9a <LabSpi::chip_set()+0x7a>
   10b3e:	2b00      	cmp	r3, #0
   10b40:	d141      	bne.n	10bc6 <LabSpi::chip_set()+0xa6>
    case 0:
    pc.ssp_clk(0,15);
   10b42:	9b01      	ldr	r3, [sp, #4]
   10b44:	3301      	adds	r3, #1
   10b46:	220f      	movs	r2, #15
   10b48:	2100      	movs	r1, #0
   10b4a:	4618      	mov	r0, r3
   10b4c:	f002 ffa0 	bl	13a90 <pinconn::ssp_clk(unsigned char, unsigned char)>
    pc.ssp_miso(0,17);
   10b50:	9b01      	ldr	r3, [sp, #4]
   10b52:	3301      	adds	r3, #1
   10b54:	2211      	movs	r2, #17
   10b56:	2100      	movs	r1, #0
   10b58:	4618      	mov	r0, r3
   10b5a:	f002 ffff 	bl	13b5c <pinconn::ssp_miso(unsigned char, unsigned char)>
    pc.ssp_mosi(0,18);
   10b5e:	9b01      	ldr	r3, [sp, #4]
   10b60:	3301      	adds	r3, #1
   10b62:	2212      	movs	r2, #18
   10b64:	2100      	movs	r1, #0
   10b66:	4618      	mov	r0, r3
   10b68:	f003 f85e 	bl	13c28 <pinconn::ssp_mosi(unsigned char, unsigned char)>
    break;
   10b6c:	e02b      	b.n	10bc6 <LabSpi::chip_set()+0xa6>
    case 1:
    pc.ssp_clk(0,7);
   10b6e:	9b01      	ldr	r3, [sp, #4]
   10b70:	3301      	adds	r3, #1
   10b72:	2207      	movs	r2, #7
   10b74:	2100      	movs	r1, #0
   10b76:	4618      	mov	r0, r3
   10b78:	f002 ff8a 	bl	13a90 <pinconn::ssp_clk(unsigned char, unsigned char)>
    pc.ssp_miso(0,8);
   10b7c:	9b01      	ldr	r3, [sp, #4]
   10b7e:	3301      	adds	r3, #1
   10b80:	2208      	movs	r2, #8
   10b82:	2100      	movs	r1, #0
   10b84:	4618      	mov	r0, r3
   10b86:	f002 ffe9 	bl	13b5c <pinconn::ssp_miso(unsigned char, unsigned char)>
    pc.ssp_mosi(0,9);
   10b8a:	9b01      	ldr	r3, [sp, #4]
   10b8c:	3301      	adds	r3, #1
   10b8e:	2209      	movs	r2, #9
   10b90:	2100      	movs	r1, #0
   10b92:	4618      	mov	r0, r3
   10b94:	f003 f848 	bl	13c28 <pinconn::ssp_mosi(unsigned char, unsigned char)>
    break;
   10b98:	e015      	b.n	10bc6 <LabSpi::chip_set()+0xa6>
    case 2:
    pc.ssp_clk(1,0);
   10b9a:	9b01      	ldr	r3, [sp, #4]
   10b9c:	3301      	adds	r3, #1
   10b9e:	2200      	movs	r2, #0
   10ba0:	2101      	movs	r1, #1
   10ba2:	4618      	mov	r0, r3
   10ba4:	f002 ff74 	bl	13a90 <pinconn::ssp_clk(unsigned char, unsigned char)>
    pc.ssp_miso(1,4);
   10ba8:	9b01      	ldr	r3, [sp, #4]
   10baa:	3301      	adds	r3, #1
   10bac:	2204      	movs	r2, #4
   10bae:	2101      	movs	r1, #1
   10bb0:	4618      	mov	r0, r3
   10bb2:	f002 ffd3 	bl	13b5c <pinconn::ssp_miso(unsigned char, unsigned char)>
    pc.ssp_mosi(1,1);
   10bb6:	9b01      	ldr	r3, [sp, #4]
   10bb8:	3301      	adds	r3, #1
   10bba:	2201      	movs	r2, #1
   10bbc:	2101      	movs	r1, #1
   10bbe:	4618      	mov	r0, r3
   10bc0:	f003 f832 	bl	13c28 <pinconn::ssp_mosi(unsigned char, unsigned char)>
    break;
   10bc4:	bf00      	nop
   10bc6:	4623      	mov	r3, r4
   10bc8:	4619      	mov	r1, r3
   10bca:	4803      	ldr	r0, [pc, #12]	; (10bd8 <LabSpi::chip_set()+0xb8>)
   10bcc:	f004 fc94 	bl	154f8 <__cyg_profile_func_exit>
    }
}
   10bd0:	bf00      	nop
   10bd2:	b002      	add	sp, #8
   10bd4:	bd10      	pop	{r4, pc}
   10bd6:	bf00      	nop
   10bd8:	00010b21 	.word	0x00010b21

00010bdc <LabSpi::Transfer(unsigned char)>:
uint8_t LabSpi::Transfer(uint8_t send){
   10bdc:	b570      	push	{r4, r5, r6, lr}
   10bde:	b082      	sub	sp, #8
   10be0:	4676      	mov	r6, lr
   10be2:	9001      	str	r0, [sp, #4]
   10be4:	460b      	mov	r3, r1
   10be6:	f88d 3003 	strb.w	r3, [sp, #3]
   10bea:	4633      	mov	r3, r6
   10bec:	4619      	mov	r1, r3
   10bee:	482c      	ldr	r0, [pc, #176]	; (10ca0 <LabSpi::Transfer(unsigned char)+0xc4>)
   10bf0:	f004 fc6e 	bl	154d0 <__cyg_profile_func_enter>
    if(SSP[SpiPort]->SR & (1<<1))
   10bf4:	9b01      	ldr	r3, [sp, #4]
   10bf6:	781b      	ldrb	r3, [r3, #0]
   10bf8:	461a      	mov	r2, r3
   10bfa:	4b2a      	ldr	r3, [pc, #168]	; (10ca4 <LabSpi::Transfer(unsigned char)+0xc8>)
   10bfc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   10c00:	68db      	ldr	r3, [r3, #12]
   10c02:	f003 0302 	and.w	r3, r3, #2
   10c06:	2b00      	cmp	r3, #0
   10c08:	bf14      	ite	ne
   10c0a:	2301      	movne	r3, #1
   10c0c:	2300      	moveq	r3, #0
   10c0e:	b2db      	uxtb	r3, r3
   10c10:	2b00      	cmp	r3, #0
   10c12:	d009      	beq.n	10c28 <LabSpi::Transfer(unsigned char)+0x4c>
    {
        SSP[SpiPort]->DR = send;
   10c14:	9b01      	ldr	r3, [sp, #4]
   10c16:	781b      	ldrb	r3, [r3, #0]
   10c18:	461a      	mov	r2, r3
   10c1a:	4b22      	ldr	r3, [pc, #136]	; (10ca4 <LabSpi::Transfer(unsigned char)+0xc8>)
   10c1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   10c20:	f89d 2003 	ldrb.w	r2, [sp, #3]
   10c24:	609a      	str	r2, [r3, #8]
   10c26:	e002      	b.n	10c2e <LabSpi::Transfer(unsigned char)+0x52>
    }
    else return 0xFF;
   10c28:	25ff      	movs	r5, #255	; 0xff
   10c2a:	2400      	movs	r4, #0
   10c2c:	e02b      	b.n	10c86 <LabSpi::Transfer(unsigned char)+0xaa>
    while(SSP[SpiPort]->SR & (1<<4)){}
   10c2e:	9b01      	ldr	r3, [sp, #4]
   10c30:	781b      	ldrb	r3, [r3, #0]
   10c32:	461a      	mov	r2, r3
   10c34:	4b1b      	ldr	r3, [pc, #108]	; (10ca4 <LabSpi::Transfer(unsigned char)+0xc8>)
   10c36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   10c3a:	68db      	ldr	r3, [r3, #12]
   10c3c:	f003 0310 	and.w	r3, r3, #16
   10c40:	2b00      	cmp	r3, #0
   10c42:	bf14      	ite	ne
   10c44:	2301      	movne	r3, #1
   10c46:	2300      	moveq	r3, #0
   10c48:	b2db      	uxtb	r3, r3
   10c4a:	2b00      	cmp	r3, #0
   10c4c:	d000      	beq.n	10c50 <LabSpi::Transfer(unsigned char)+0x74>
   10c4e:	e7ee      	b.n	10c2e <LabSpi::Transfer(unsigned char)+0x52>
    if(SSP[SpiPort]->SR &(1<<2))
   10c50:	9b01      	ldr	r3, [sp, #4]
   10c52:	781b      	ldrb	r3, [r3, #0]
   10c54:	461a      	mov	r2, r3
   10c56:	4b13      	ldr	r3, [pc, #76]	; (10ca4 <LabSpi::Transfer(unsigned char)+0xc8>)
   10c58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   10c5c:	68db      	ldr	r3, [r3, #12]
   10c5e:	f003 0304 	and.w	r3, r3, #4
   10c62:	2b00      	cmp	r3, #0
   10c64:	bf14      	ite	ne
   10c66:	2301      	movne	r3, #1
   10c68:	2300      	moveq	r3, #0
   10c6a:	b2db      	uxtb	r3, r3
   10c6c:	2b00      	cmp	r3, #0
   10c6e:	d009      	beq.n	10c84 <LabSpi::Transfer(unsigned char)+0xa8>
    {
        return SSP[SpiPort]->DR;
   10c70:	9b01      	ldr	r3, [sp, #4]
   10c72:	781b      	ldrb	r3, [r3, #0]
   10c74:	461a      	mov	r2, r3
   10c76:	4b0b      	ldr	r3, [pc, #44]	; (10ca4 <LabSpi::Transfer(unsigned char)+0xc8>)
   10c78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   10c7c:	689b      	ldr	r3, [r3, #8]
   10c7e:	b2dd      	uxtb	r5, r3
   10c80:	2400      	movs	r4, #0
   10c82:	e000      	b.n	10c86 <LabSpi::Transfer(unsigned char)+0xaa>
   10c84:	2401      	movs	r4, #1
   10c86:	4633      	mov	r3, r6
   10c88:	4619      	mov	r1, r3
   10c8a:	4805      	ldr	r0, [pc, #20]	; (10ca0 <LabSpi::Transfer(unsigned char)+0xc4>)
   10c8c:	f004 fc34 	bl	154f8 <__cyg_profile_func_exit>
   10c90:	2c01      	cmp	r4, #1
   10c92:	d100      	bne.n	10c96 <LabSpi::Transfer(unsigned char)+0xba>
    }
    
    }
   10c94:	e000      	b.n	10c98 <LabSpi::Transfer(unsigned char)+0xbc>
   10c96:	462b      	mov	r3, r5
   10c98:	4618      	mov	r0, r3
   10c9a:	b002      	add	sp, #8
   10c9c:	bd70      	pop	{r4, r5, r6, pc}
   10c9e:	bf00      	nop
   10ca0:	00010bdd 	.word	0x00010bdd
   10ca4:	1000001c 	.word	0x1000001c

00010ca8 <LabSpi::read()>:
void LabSpi::read(){
   10ca8:	b510      	push	{r4, lr}
   10caa:	b088      	sub	sp, #32
   10cac:	4674      	mov	r4, lr
   10cae:	9003      	str	r0, [sp, #12]
   10cb0:	4623      	mov	r3, r4
   10cb2:	4619      	mov	r1, r3
   10cb4:	481f      	ldr	r0, [pc, #124]	; (10d34 <LabSpi::read()+0x8c>)
   10cb6:	f004 fc0b 	bl	154d0 <__cyg_profile_func_enter>
    uint16_t data[4];
    chip_select();
   10cba:	9803      	ldr	r0, [sp, #12]
   10cbc:	f7ff fe38 	bl	10930 <LabSpi::chip_select()>
    Delay(1000);
   10cc0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   10cc4:	f04f 0100 	mov.w	r1, #0
   10cc8:	f7ff fcb0 	bl	1062c <Delay(unsigned long long)>
    Transfer(0x9F);
   10ccc:	219f      	movs	r1, #159	; 0x9f
   10cce:	9803      	ldr	r0, [sp, #12]
   10cd0:	f7ff ff84 	bl	10bdc <LabSpi::Transfer(unsigned char)>
    for(int i =0; i<4; i++)
   10cd4:	2300      	movs	r3, #0
   10cd6:	9307      	str	r3, [sp, #28]
   10cd8:	9b07      	ldr	r3, [sp, #28]
   10cda:	2b03      	cmp	r3, #3
   10cdc:	dc0f      	bgt.n	10cfe <LabSpi::read()+0x56>
    {
    data[i] = static_cast<uint8_t>(Transfer(0x9F));
   10cde:	219f      	movs	r1, #159	; 0x9f
   10ce0:	9803      	ldr	r0, [sp, #12]
   10ce2:	f7ff ff7b 	bl	10bdc <LabSpi::Transfer(unsigned char)>
   10ce6:	4603      	mov	r3, r0
   10ce8:	b29a      	uxth	r2, r3
   10cea:	9b07      	ldr	r3, [sp, #28]
   10cec:	005b      	lsls	r3, r3, #1
   10cee:	a908      	add	r1, sp, #32
   10cf0:	440b      	add	r3, r1
   10cf2:	f823 2c0c 	strh.w	r2, [r3, #-12]
    for(int i =0; i<4; i++)
   10cf6:	9b07      	ldr	r3, [sp, #28]
   10cf8:	3301      	adds	r3, #1
   10cfa:	9307      	str	r3, [sp, #28]
   10cfc:	e7ec      	b.n	10cd8 <LabSpi::read()+0x30>
    }
    chip_deselect();
   10cfe:	9803      	ldr	r0, [sp, #12]
   10d00:	f7ff fe9a 	bl	10a38 <LabSpi::chip_deselect()>
    printf("Returned data: %x %x %x %x\n", data[0], data[1], data[2], data[3]);
   10d04:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   10d08:	4619      	mov	r1, r3
   10d0a:	f8bd 3016 	ldrh.w	r3, [sp, #22]
   10d0e:	461a      	mov	r2, r3
   10d10:	f8bd 3018 	ldrh.w	r3, [sp, #24]
   10d14:	4618      	mov	r0, r3
   10d16:	f8bd 301a 	ldrh.w	r3, [sp, #26]
   10d1a:	9300      	str	r3, [sp, #0]
   10d1c:	4603      	mov	r3, r0
   10d1e:	4806      	ldr	r0, [pc, #24]	; (10d38 <LabSpi::read()+0x90>)
   10d20:	f005 fe30 	bl	16984 <printf>
   10d24:	4623      	mov	r3, r4
   10d26:	4619      	mov	r1, r3
   10d28:	4802      	ldr	r0, [pc, #8]	; (10d34 <LabSpi::read()+0x8c>)
   10d2a:	f004 fbe5 	bl	154f8 <__cyg_profile_func_exit>
   10d2e:	bf00      	nop
   10d30:	b008      	add	sp, #32
   10d32:	bd10      	pop	{r4, pc}
   10d34:	00010ca9 	.word	0x00010ca9
   10d38:	0001827c 	.word	0x0001827c

00010d3c <Status Wait<Wait(unsigned long long)::{lambda()#1}>(unsigned long long, Wait(unsigned long long)::{lambda()#1})>:
inline Status Wait(uint64_t timeout, F is_done)
   10d3c:	e92d 4830 	stmdb	sp!, {r4, r5, fp, lr}
   10d40:	b088      	sub	sp, #32
   10d42:	4675      	mov	r5, lr
   10d44:	e9cd 0102 	strd	r0, r1, [sp, #8]
   10d48:	f88d 2004 	strb.w	r2, [sp, #4]
   10d4c:	462b      	mov	r3, r5
   10d4e:	4619      	mov	r1, r3
   10d50:	4824      	ldr	r0, [pc, #144]	; (10de4 <Status Wait<Wait(unsigned long long)::{lambda()#1}>(unsigned long long, Wait(unsigned long long)::{lambda()#1})+0xa8>)
   10d52:	f004 fbbd 	bl	154d0 <__cyg_profile_func_enter>
  uint64_t timeout_time = 0;
   10d56:	f04f 0300 	mov.w	r3, #0
   10d5a:	f04f 0400 	mov.w	r4, #0
   10d5e:	e9cd 3406 	strd	r3, r4, [sp, #24]
  if (timeout == kMaxWait)
   10d62:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
   10d66:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
   10d6a:	bf08      	it	eq
   10d6c:	f1b3 3fff 	cmpeq.w	r3, #4294967295	; 0xffffffff
   10d70:	d106      	bne.n	10d80 <Status Wait<Wait(unsigned long long)::{lambda()#1}>(unsigned long long, Wait(unsigned long long)::{lambda()#1})+0x44>
    timeout_time = kMaxWait;
   10d72:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   10d76:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   10d7a:	e9cd 3406 	strd	r3, r4, [sp, #24]
   10d7e:	e00b      	b.n	10d98 <Status Wait<Wait(unsigned long long)::{lambda()#1}>(unsigned long long, Wait(unsigned long long)::{lambda()#1})+0x5c>
    timeout_time = Milliseconds() + timeout;
   10d80:	f7ff fba4 	bl	104cc <Milliseconds()>
   10d84:	460a      	mov	r2, r1
   10d86:	4601      	mov	r1, r0
   10d88:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
   10d8c:	eb13 0b01 	adds.w	fp, r3, r1
   10d90:	eb44 0c02 	adc.w	ip, r4, r2
   10d94:	e9cd bc06 	strd	fp, ip, [sp, #24]
  Status status = Status::kTimedOut;
   10d98:	2301      	movs	r3, #1
   10d9a:	9305      	str	r3, [sp, #20]
  while (Milliseconds() < timeout_time)
   10d9c:	f7ff fb96 	bl	104cc <Milliseconds()>
   10da0:	460a      	mov	r2, r1
   10da2:	4601      	mov	r1, r0
   10da4:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
   10da8:	42a2      	cmp	r2, r4
   10daa:	bf08      	it	eq
   10dac:	4299      	cmpeq	r1, r3
   10dae:	bf34      	ite	cc
   10db0:	2301      	movcc	r3, #1
   10db2:	2300      	movcs	r3, #0
   10db4:	b2db      	uxtb	r3, r3
   10db6:	2b00      	cmp	r3, #0
   10db8:	d008      	beq.n	10dcc <Status Wait<Wait(unsigned long long)::{lambda()#1}>(unsigned long long, Wait(unsigned long long)::{lambda()#1})+0x90>
    if (is_done())
   10dba:	ab01      	add	r3, sp, #4
   10dbc:	4618      	mov	r0, r3
   10dbe:	f7ff fba7 	bl	10510 <Wait(unsigned long long)::{lambda()#1}::operator()() const>
   10dc2:	4603      	mov	r3, r0
   10dc4:	2b00      	cmp	r3, #0
   10dc6:	d0e9      	beq.n	10d9c <Status Wait<Wait(unsigned long long)::{lambda()#1}>(unsigned long long, Wait(unsigned long long)::{lambda()#1})+0x60>
      status = Status::kSuccess;
   10dc8:	2300      	movs	r3, #0
   10dca:	9305      	str	r3, [sp, #20]
  return status;
   10dcc:	9c05      	ldr	r4, [sp, #20]
   10dce:	462b      	mov	r3, r5
   10dd0:	4619      	mov	r1, r3
   10dd2:	4804      	ldr	r0, [pc, #16]	; (10de4 <Status Wait<Wait(unsigned long long)::{lambda()#1}>(unsigned long long, Wait(unsigned long long)::{lambda()#1})+0xa8>)
   10dd4:	f004 fb90 	bl	154f8 <__cyg_profile_func_exit>
   10dd8:	4623      	mov	r3, r4
}
   10dda:	4618      	mov	r0, r3
   10ddc:	b008      	add	sp, #32
   10dde:	e8bd 8830 	ldmia.w	sp!, {r4, r5, fp, pc}
   10de2:	bf00      	nop
   10de4:	00010d3d 	.word	0x00010d3d

00010de8 <debug::PrintBacktrace(bool, void*)>:
}

[[gnu::no_instrument_function]]
inline void PrintBacktrace(bool show_make_command = false,
                           void * final_address   = nullptr)
{
   10de8:	b500      	push	{lr}
   10dea:	b08b      	sub	sp, #44	; 0x2c
   10dec:	4603      	mov	r3, r0
   10dee:	9100      	str	r1, [sp, #0]
   10df0:	f88d 3007 	strb.w	r3, [sp, #7]
  printf("Stack Depth = %zd\n", GetStackDepth());
   10df4:	f004 fba2 	bl	1553c <GetStackDepth()>
   10df8:	4603      	mov	r3, r0
   10dfa:	4619      	mov	r1, r3
   10dfc:	4831      	ldr	r0, [pc, #196]	; (10ec4 <debug::PrintBacktrace(bool, void*)+0xdc>)
   10dfe:	f005 fdc1 	bl	16984 <printf>
  // stack_depth-1 to ignore PrintBacktrace()
  // PrintBacktrace shouldn't be ignored in profiling because it causes
  // the exit to still fire, which can result in a negative stack_depth
  void ** list_of_called_functions = GetStackTrace();
   10e02:	f004 fb87 	bl	15514 <GetStackTrace()>
   10e06:	9007      	str	r0, [sp, #28]
  size_t stack_depth               = GetStackDepth();
   10e08:	f004 fb98 	bl	1553c <GetStackDepth()>
   10e0c:	9006      	str	r0, [sp, #24]
  // Ignore the last function as it is the Backtrace function
  for (size_t pos = 0; pos < stack_depth - 1; pos++)
   10e0e:	2300      	movs	r3, #0
   10e10:	9309      	str	r3, [sp, #36]	; 0x24
   10e12:	9b06      	ldr	r3, [sp, #24]
   10e14:	3b01      	subs	r3, #1
   10e16:	9a09      	ldr	r2, [sp, #36]	; 0x24
   10e18:	429a      	cmp	r2, r3
   10e1a:	d20d      	bcs.n	10e38 <debug::PrintBacktrace(bool, void*)+0x50>
  {
    printf("  #%zu: 0x%p\n", pos, list_of_called_functions[pos]);
   10e1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   10e1e:	009b      	lsls	r3, r3, #2
   10e20:	9a07      	ldr	r2, [sp, #28]
   10e22:	4413      	add	r3, r2
   10e24:	681b      	ldr	r3, [r3, #0]
   10e26:	461a      	mov	r2, r3
   10e28:	9909      	ldr	r1, [sp, #36]	; 0x24
   10e2a:	4827      	ldr	r0, [pc, #156]	; (10ec8 <debug::PrintBacktrace(bool, void*)+0xe0>)
   10e2c:	f005 fdaa 	bl	16984 <printf>
  for (size_t pos = 0; pos < stack_depth - 1; pos++)
   10e30:	9b09      	ldr	r3, [sp, #36]	; 0x24
   10e32:	3301      	adds	r3, #1
   10e34:	9309      	str	r3, [sp, #36]	; 0x24
   10e36:	e7ec      	b.n	10e12 <debug::PrintBacktrace(bool, void*)+0x2a>
  }
  if (final_address != nullptr)
   10e38:	9b00      	ldr	r3, [sp, #0]
   10e3a:	2b00      	cmp	r3, #0
   10e3c:	d006      	beq.n	10e4c <debug::PrintBacktrace(bool, void*)+0x64>
  {
    printf("  #%zu: 0x%p\n", stack_depth - 1, final_address);
   10e3e:	9b06      	ldr	r3, [sp, #24]
   10e40:	3b01      	subs	r3, #1
   10e42:	9a00      	ldr	r2, [sp, #0]
   10e44:	4619      	mov	r1, r3
   10e46:	4820      	ldr	r0, [pc, #128]	; (10ec8 <debug::PrintBacktrace(bool, void*)+0xe0>)
   10e48:	f005 fd9c 	bl	16984 <printf>
  }
  if (show_make_command)
   10e4c:	f89d 3007 	ldrb.w	r3, [sp, #7]
   10e50:	2b00      	cmp	r3, #0
   10e52:	d033      	beq.n	10ebc <debug::PrintBacktrace(bool, void*)+0xd4>
  {
    constexpr const char kBuildType[] =
   10e54:	4a1d      	ldr	r2, [pc, #116]	; (10ecc <debug::PrintBacktrace(bool, void*)+0xe4>)
   10e56:	ab03      	add	r3, sp, #12
   10e58:	ca07      	ldmia	r2, {r0, r1, r2}
   10e5a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#if defined(APPLICATION)
        "application";
#else
        "bootloader";
#endif
    puts("\nRun: the following command in your project directory");
   10e5e:	481c      	ldr	r0, [pc, #112]	; (10ed0 <debug::PrintBacktrace(bool, void*)+0xe8>)
   10e60:	f004 fb06 	bl	15470 <puts>
    printf("\n  " SJ2_BOLD_WHITE "make stacktrace-%s TRACES=\"", kBuildType);
   10e64:	ab03      	add	r3, sp, #12
   10e66:	4619      	mov	r1, r3
   10e68:	481a      	ldr	r0, [pc, #104]	; (10ed4 <debug::PrintBacktrace(bool, void*)+0xec>)
   10e6a:	f005 fd8b 	bl	16984 <printf>
    for (size_t pos = 0; pos < stack_depth - 1; pos++)
   10e6e:	2300      	movs	r3, #0
   10e70:	9308      	str	r3, [sp, #32]
   10e72:	9b06      	ldr	r3, [sp, #24]
   10e74:	3b01      	subs	r3, #1
   10e76:	9a08      	ldr	r2, [sp, #32]
   10e78:	429a      	cmp	r2, r3
   10e7a:	d212      	bcs.n	10ea2 <debug::PrintBacktrace(bool, void*)+0xba>
    {
      if (pos != 0)
   10e7c:	9b08      	ldr	r3, [sp, #32]
   10e7e:	2b00      	cmp	r3, #0
   10e80:	d002      	beq.n	10e88 <debug::PrintBacktrace(bool, void*)+0xa0>
      {
        putchar(' ');
   10e82:	2020      	movs	r0, #32
   10e84:	f004 fad8 	bl	15438 <putchar>
      }
      printf("0x%p", list_of_called_functions[pos]);
   10e88:	9b08      	ldr	r3, [sp, #32]
   10e8a:	009b      	lsls	r3, r3, #2
   10e8c:	9a07      	ldr	r2, [sp, #28]
   10e8e:	4413      	add	r3, r2
   10e90:	681b      	ldr	r3, [r3, #0]
   10e92:	4619      	mov	r1, r3
   10e94:	4810      	ldr	r0, [pc, #64]	; (10ed8 <debug::PrintBacktrace(bool, void*)+0xf0>)
   10e96:	f005 fd75 	bl	16984 <printf>
    for (size_t pos = 0; pos < stack_depth - 1; pos++)
   10e9a:	9b08      	ldr	r3, [sp, #32]
   10e9c:	3301      	adds	r3, #1
   10e9e:	9308      	str	r3, [sp, #32]
   10ea0:	e7e7      	b.n	10e72 <debug::PrintBacktrace(bool, void*)+0x8a>
    }
    if (final_address != nullptr)
   10ea2:	9b00      	ldr	r3, [sp, #0]
   10ea4:	2b00      	cmp	r3, #0
   10ea6:	d003      	beq.n	10eb0 <debug::PrintBacktrace(bool, void*)+0xc8>
    {
      printf(" 0x%p", final_address);
   10ea8:	9900      	ldr	r1, [sp, #0]
   10eaa:	480c      	ldr	r0, [pc, #48]	; (10edc <debug::PrintBacktrace(bool, void*)+0xf4>)
   10eac:	f005 fd6a 	bl	16984 <printf>
    }
    puts("\"\n" SJ2_COLOR_RESET);
   10eb0:	480b      	ldr	r0, [pc, #44]	; (10ee0 <debug::PrintBacktrace(bool, void*)+0xf8>)
   10eb2:	f004 fadd 	bl	15470 <puts>
    puts(
   10eb6:	480b      	ldr	r0, [pc, #44]	; (10ee4 <debug::PrintBacktrace(bool, void*)+0xfc>)
   10eb8:	f004 fada 	bl	15470 <puts>
        "This will report the file and line number that led to this function "
        "being called.");
  }
}
   10ebc:	bf00      	nop
   10ebe:	b00b      	add	sp, #44	; 0x2c
   10ec0:	f85d fb04 	ldr.w	pc, [sp], #4
   10ec4:	00018298 	.word	0x00018298
   10ec8:	000182ac 	.word	0x000182ac
   10ecc:	00018388 	.word	0x00018388
   10ed0:	000182bc 	.word	0x000182bc
   10ed4:	000182f4 	.word	0x000182f4
   10ed8:	0001831c 	.word	0x0001831c
   10edc:	00018324 	.word	0x00018324
   10ee0:	0001832c 	.word	0x0001832c
   10ee4:	00018334 	.word	0x00018334

00010ee8 <PinInterface::PinInterface()>:
#include <cstdio>

#include "L0_LowLevel/LPC40xx.h"
#include "utility/macros.hpp"

class PinInterface
   10ee8:	b530      	push	{r4, r5, lr}
   10eea:	b083      	sub	sp, #12
   10eec:	4675      	mov	r5, lr
   10eee:	9001      	str	r0, [sp, #4]
   10ef0:	462b      	mov	r3, r5
   10ef2:	4619      	mov	r1, r3
   10ef4:	4807      	ldr	r0, [pc, #28]	; (10f14 <PinInterface::PinInterface()+0x2c>)
   10ef6:	f004 faeb 	bl	154d0 <__cyg_profile_func_enter>
   10efa:	4a07      	ldr	r2, [pc, #28]	; (10f18 <PinInterface::PinInterface()+0x30>)
   10efc:	9b01      	ldr	r3, [sp, #4]
   10efe:	601a      	str	r2, [r3, #0]
   10f00:	9c01      	ldr	r4, [sp, #4]
   10f02:	462b      	mov	r3, r5
   10f04:	4619      	mov	r1, r3
   10f06:	4803      	ldr	r0, [pc, #12]	; (10f14 <PinInterface::PinInterface()+0x2c>)
   10f08:	f004 faf6 	bl	154f8 <__cyg_profile_func_exit>
   10f0c:	4623      	mov	r3, r4
   10f0e:	4618      	mov	r0, r3
   10f10:	b003      	add	sp, #12
   10f12:	bd30      	pop	{r4, r5, pc}
   10f14:	00010ee9 	.word	0x00010ee9
   10f18:	00018bdc 	.word	0x00018bdc

00010f1c <Pin::Pin(unsigned char, unsigned char)>:
  // no effect.
  static constexpr Pin CreateInactivePin()
  {
    return Pin(5, 4);
  }
  constexpr Pin(uint8_t port_number, uint8_t pin_number)
   10f1c:	b530      	push	{r4, r5, lr}
   10f1e:	b083      	sub	sp, #12
   10f20:	4675      	mov	r5, lr
   10f22:	9001      	str	r0, [sp, #4]
   10f24:	460b      	mov	r3, r1
   10f26:	f88d 3003 	strb.w	r3, [sp, #3]
   10f2a:	4613      	mov	r3, r2
   10f2c:	f88d 3002 	strb.w	r3, [sp, #2]
   10f30:	462b      	mov	r3, r5
   10f32:	4619      	mov	r1, r3
   10f34:	480d      	ldr	r0, [pc, #52]	; (10f6c <Pin::Pin(unsigned char, unsigned char)+0x50>)
   10f36:	f004 facb 	bl	154d0 <__cyg_profile_func_enter>
      : port_(port_number), pin_(pin_number)
   10f3a:	9b01      	ldr	r3, [sp, #4]
   10f3c:	4618      	mov	r0, r3
   10f3e:	f7ff ffd3 	bl	10ee8 <PinInterface::PinInterface()>
   10f42:	4a0b      	ldr	r2, [pc, #44]	; (10f70 <Pin::Pin(unsigned char, unsigned char)+0x54>)
   10f44:	9b01      	ldr	r3, [sp, #4]
   10f46:	601a      	str	r2, [r3, #0]
   10f48:	9b01      	ldr	r3, [sp, #4]
   10f4a:	f89d 2003 	ldrb.w	r2, [sp, #3]
   10f4e:	711a      	strb	r2, [r3, #4]
   10f50:	9b01      	ldr	r3, [sp, #4]
   10f52:	f89d 2002 	ldrb.w	r2, [sp, #2]
   10f56:	715a      	strb	r2, [r3, #5]
  {
  }
   10f58:	9c01      	ldr	r4, [sp, #4]
   10f5a:	462b      	mov	r3, r5
   10f5c:	4619      	mov	r1, r3
   10f5e:	4803      	ldr	r0, [pc, #12]	; (10f6c <Pin::Pin(unsigned char, unsigned char)+0x50>)
   10f60:	f004 faca 	bl	154f8 <__cyg_profile_func_exit>
   10f64:	4623      	mov	r3, r4
   10f66:	4618      	mov	r0, r3
   10f68:	b003      	add	sp, #12
   10f6a:	bd30      	pop	{r4, r5, pc}
   10f6c:	00010f1d 	.word	0x00010f1d
   10f70:	00018ba0 	.word	0x00018ba0

00010f74 <Pin::SetPinFunction(unsigned char)>:
  void SetPinFunction(uint8_t function) override
   10f74:	b5f0      	push	{r4, r5, r6, r7, lr}
   10f76:	b085      	sub	sp, #20
   10f78:	4677      	mov	r7, lr
   10f7a:	9003      	str	r0, [sp, #12]
   10f7c:	460b      	mov	r3, r1
   10f7e:	f88d 300b 	strb.w	r3, [sp, #11]
   10f82:	463b      	mov	r3, r7
   10f84:	4619      	mov	r1, r3
   10f86:	4817      	ldr	r0, [pc, #92]	; (10fe4 <Pin::SetPinFunction(unsigned char)+0x70>)
   10f88:	f004 faa2 	bl	154d0 <__cyg_profile_func_enter>
  {
    pin_map->_register[port_][pin_] =
        BitPlace(pin_map->_register[port_][pin_], PinBitMap::kFunction,
   10f8c:	4b16      	ldr	r3, [pc, #88]	; (10fe8 <Pin::SetPinFunction(unsigned char)+0x74>)
   10f8e:	681b      	ldr	r3, [r3, #0]
   10f90:	9a03      	ldr	r2, [sp, #12]
   10f92:	7912      	ldrb	r2, [r2, #4]
   10f94:	4610      	mov	r0, r2
   10f96:	9a03      	ldr	r2, [sp, #12]
   10f98:	7952      	ldrb	r2, [r2, #5]
   10f9a:	4611      	mov	r1, r2
   10f9c:	0142      	lsls	r2, r0, #5
   10f9e:	440a      	add	r2, r1
   10fa0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
                 function & 0b111, 3);
   10fa4:	f89d 300b 	ldrb.w	r3, [sp, #11]
        BitPlace(pin_map->_register[port_][pin_], PinBitMap::kFunction,
   10fa8:	f003 0207 	and.w	r2, r3, #7
    pin_map->_register[port_][pin_] =
   10fac:	4b0e      	ldr	r3, [pc, #56]	; (10fe8 <Pin::SetPinFunction(unsigned char)+0x74>)
   10fae:	681c      	ldr	r4, [r3, #0]
   10fb0:	9b03      	ldr	r3, [sp, #12]
   10fb2:	791b      	ldrb	r3, [r3, #4]
   10fb4:	461e      	mov	r6, r3
   10fb6:	9b03      	ldr	r3, [sp, #12]
   10fb8:	795b      	ldrb	r3, [r3, #5]
   10fba:	461d      	mov	r5, r3
        BitPlace(pin_map->_register[port_][pin_], PinBitMap::kFunction,
   10fbc:	2303      	movs	r3, #3
   10fbe:	9300      	str	r3, [sp, #0]
   10fc0:	4613      	mov	r3, r2
   10fc2:	2200      	movs	r2, #0
   10fc4:	9803      	ldr	r0, [sp, #12]
   10fc6:	f000 fa67 	bl	11498 <Pin::BitPlace(unsigned long, unsigned long, unsigned long, unsigned long)>
   10fca:	4602      	mov	r2, r0
    pin_map->_register[port_][pin_] =
   10fcc:	0173      	lsls	r3, r6, #5
   10fce:	442b      	add	r3, r5
   10fd0:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
   10fd4:	463b      	mov	r3, r7
   10fd6:	4619      	mov	r1, r3
   10fd8:	4802      	ldr	r0, [pc, #8]	; (10fe4 <Pin::SetPinFunction(unsigned char)+0x70>)
   10fda:	f004 fa8d 	bl	154f8 <__cyg_profile_func_exit>
  }
   10fde:	bf00      	nop
   10fe0:	b005      	add	sp, #20
   10fe2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10fe4:	00010f75 	.word	0x00010f75
   10fe8:	10000028 	.word	0x10000028

00010fec <Pin::SetMode(PinInterface::Mode)>:
  void SetMode(PinInterface::Mode mode) override
   10fec:	b5f0      	push	{r4, r5, r6, r7, lr}
   10fee:	b087      	sub	sp, #28
   10ff0:	4677      	mov	r7, lr
   10ff2:	9003      	str	r0, [sp, #12]
   10ff4:	460b      	mov	r3, r1
   10ff6:	f88d 300b 	strb.w	r3, [sp, #11]
   10ffa:	463b      	mov	r3, r7
   10ffc:	4619      	mov	r1, r3
   10ffe:	4819      	ldr	r0, [pc, #100]	; (11064 <Pin::SetMode(PinInterface::Mode)+0x78>)
   11000:	f004 fa66 	bl	154d0 <__cyg_profile_func_enter>
  {
    uint8_t ui_mode                 = static_cast<uint8_t>(mode);
   11004:	f89d 300b 	ldrb.w	r3, [sp, #11]
   11008:	f88d 3017 	strb.w	r3, [sp, #23]
    pin_map->_register[port_][pin_] = BitPlace(
   1100c:	4b16      	ldr	r3, [pc, #88]	; (11068 <Pin::SetMode(PinInterface::Mode)+0x7c>)
   1100e:	681b      	ldr	r3, [r3, #0]
        pin_map->_register[port_][pin_], PinBitMap::kMode, ui_mode & 0b11, 2);
   11010:	9a03      	ldr	r2, [sp, #12]
   11012:	7912      	ldrb	r2, [r2, #4]
   11014:	4610      	mov	r0, r2
   11016:	9a03      	ldr	r2, [sp, #12]
   11018:	7952      	ldrb	r2, [r2, #5]
   1101a:	4611      	mov	r1, r2
    pin_map->_register[port_][pin_] = BitPlace(
   1101c:	0142      	lsls	r2, r0, #5
   1101e:	440a      	add	r2, r1
   11020:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
        pin_map->_register[port_][pin_], PinBitMap::kMode, ui_mode & 0b11, 2);
   11024:	f89d 3017 	ldrb.w	r3, [sp, #23]
    pin_map->_register[port_][pin_] = BitPlace(
   11028:	f003 0203 	and.w	r2, r3, #3
   1102c:	4b0e      	ldr	r3, [pc, #56]	; (11068 <Pin::SetMode(PinInterface::Mode)+0x7c>)
   1102e:	681c      	ldr	r4, [r3, #0]
   11030:	9b03      	ldr	r3, [sp, #12]
   11032:	791b      	ldrb	r3, [r3, #4]
   11034:	461e      	mov	r6, r3
   11036:	9b03      	ldr	r3, [sp, #12]
   11038:	795b      	ldrb	r3, [r3, #5]
   1103a:	461d      	mov	r5, r3
   1103c:	2302      	movs	r3, #2
   1103e:	9300      	str	r3, [sp, #0]
   11040:	4613      	mov	r3, r2
   11042:	2203      	movs	r2, #3
   11044:	9803      	ldr	r0, [sp, #12]
   11046:	f000 fa27 	bl	11498 <Pin::BitPlace(unsigned long, unsigned long, unsigned long, unsigned long)>
   1104a:	4602      	mov	r2, r0
   1104c:	0173      	lsls	r3, r6, #5
   1104e:	442b      	add	r3, r5
   11050:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
   11054:	463b      	mov	r3, r7
   11056:	4619      	mov	r1, r3
   11058:	4802      	ldr	r0, [pc, #8]	; (11064 <Pin::SetMode(PinInterface::Mode)+0x78>)
   1105a:	f004 fa4d 	bl	154f8 <__cyg_profile_func_exit>
  }
   1105e:	bf00      	nop
   11060:	b007      	add	sp, #28
   11062:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11064:	00010fed 	.word	0x00010fed
   11068:	10000028 	.word	0x10000028

0001106c <Pin::EnableHysteresis(bool)>:
  void EnableHysteresis(bool enable_hysteresis = true) override
   1106c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1106e:	b085      	sub	sp, #20
   11070:	4677      	mov	r7, lr
   11072:	9003      	str	r0, [sp, #12]
   11074:	460b      	mov	r3, r1
   11076:	f88d 300b 	strb.w	r3, [sp, #11]
   1107a:	463b      	mov	r3, r7
   1107c:	4619      	mov	r1, r3
   1107e:	4816      	ldr	r0, [pc, #88]	; (110d8 <Pin::EnableHysteresis(bool)+0x6c>)
   11080:	f004 fa26 	bl	154d0 <__cyg_profile_func_enter>
  {
    pin_map->_register[port_][pin_] =
        BitPlace(pin_map->_register[port_][pin_], PinBitMap::kHysteresis,
   11084:	4b15      	ldr	r3, [pc, #84]	; (110dc <Pin::EnableHysteresis(bool)+0x70>)
   11086:	681b      	ldr	r3, [r3, #0]
   11088:	9a03      	ldr	r2, [sp, #12]
   1108a:	7912      	ldrb	r2, [r2, #4]
   1108c:	4610      	mov	r0, r2
   1108e:	9a03      	ldr	r2, [sp, #12]
   11090:	7952      	ldrb	r2, [r2, #5]
   11092:	4611      	mov	r1, r2
   11094:	0142      	lsls	r2, r0, #5
   11096:	440a      	add	r2, r1
   11098:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   1109c:	f89d 200b 	ldrb.w	r2, [sp, #11]
    pin_map->_register[port_][pin_] =
   110a0:	4b0e      	ldr	r3, [pc, #56]	; (110dc <Pin::EnableHysteresis(bool)+0x70>)
   110a2:	681c      	ldr	r4, [r3, #0]
   110a4:	9b03      	ldr	r3, [sp, #12]
   110a6:	791b      	ldrb	r3, [r3, #4]
   110a8:	461e      	mov	r6, r3
   110aa:	9b03      	ldr	r3, [sp, #12]
   110ac:	795b      	ldrb	r3, [r3, #5]
   110ae:	461d      	mov	r5, r3
        BitPlace(pin_map->_register[port_][pin_], PinBitMap::kHysteresis,
   110b0:	2301      	movs	r3, #1
   110b2:	9300      	str	r3, [sp, #0]
   110b4:	4613      	mov	r3, r2
   110b6:	2205      	movs	r2, #5
   110b8:	9803      	ldr	r0, [sp, #12]
   110ba:	f000 f9ed 	bl	11498 <Pin::BitPlace(unsigned long, unsigned long, unsigned long, unsigned long)>
   110be:	4602      	mov	r2, r0
    pin_map->_register[port_][pin_] =
   110c0:	0173      	lsls	r3, r6, #5
   110c2:	442b      	add	r3, r5
   110c4:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
   110c8:	463b      	mov	r3, r7
   110ca:	4619      	mov	r1, r3
   110cc:	4802      	ldr	r0, [pc, #8]	; (110d8 <Pin::EnableHysteresis(bool)+0x6c>)
   110ce:	f004 fa13 	bl	154f8 <__cyg_profile_func_exit>
                 enable_hysteresis, 1);
  }
   110d2:	bf00      	nop
   110d4:	b005      	add	sp, #20
   110d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   110d8:	0001106d 	.word	0x0001106d
   110dc:	10000028 	.word	0x10000028

000110e0 <Pin::SetAsActiveLow(bool)>:
  void SetAsActiveLow(bool set_as_active_low = true) override
   110e0:	b5f0      	push	{r4, r5, r6, r7, lr}
   110e2:	b085      	sub	sp, #20
   110e4:	4677      	mov	r7, lr
   110e6:	9003      	str	r0, [sp, #12]
   110e8:	460b      	mov	r3, r1
   110ea:	f88d 300b 	strb.w	r3, [sp, #11]
   110ee:	463b      	mov	r3, r7
   110f0:	4619      	mov	r1, r3
   110f2:	4816      	ldr	r0, [pc, #88]	; (1114c <Pin::SetAsActiveLow(bool)+0x6c>)
   110f4:	f004 f9ec 	bl	154d0 <__cyg_profile_func_enter>
  {
    pin_map->_register[port_][pin_] =
        BitPlace(pin_map->_register[port_][pin_], PinBitMap::kInputInvert,
   110f8:	4b15      	ldr	r3, [pc, #84]	; (11150 <Pin::SetAsActiveLow(bool)+0x70>)
   110fa:	681b      	ldr	r3, [r3, #0]
   110fc:	9a03      	ldr	r2, [sp, #12]
   110fe:	7912      	ldrb	r2, [r2, #4]
   11100:	4610      	mov	r0, r2
   11102:	9a03      	ldr	r2, [sp, #12]
   11104:	7952      	ldrb	r2, [r2, #5]
   11106:	4611      	mov	r1, r2
   11108:	0142      	lsls	r2, r0, #5
   1110a:	440a      	add	r2, r1
   1110c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   11110:	f89d 200b 	ldrb.w	r2, [sp, #11]
    pin_map->_register[port_][pin_] =
   11114:	4b0e      	ldr	r3, [pc, #56]	; (11150 <Pin::SetAsActiveLow(bool)+0x70>)
   11116:	681c      	ldr	r4, [r3, #0]
   11118:	9b03      	ldr	r3, [sp, #12]
   1111a:	791b      	ldrb	r3, [r3, #4]
   1111c:	461e      	mov	r6, r3
   1111e:	9b03      	ldr	r3, [sp, #12]
   11120:	795b      	ldrb	r3, [r3, #5]
   11122:	461d      	mov	r5, r3
        BitPlace(pin_map->_register[port_][pin_], PinBitMap::kInputInvert,
   11124:	2301      	movs	r3, #1
   11126:	9300      	str	r3, [sp, #0]
   11128:	4613      	mov	r3, r2
   1112a:	2206      	movs	r2, #6
   1112c:	9803      	ldr	r0, [sp, #12]
   1112e:	f000 f9b3 	bl	11498 <Pin::BitPlace(unsigned long, unsigned long, unsigned long, unsigned long)>
   11132:	4602      	mov	r2, r0
    pin_map->_register[port_][pin_] =
   11134:	0173      	lsls	r3, r6, #5
   11136:	442b      	add	r3, r5
   11138:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
   1113c:	463b      	mov	r3, r7
   1113e:	4619      	mov	r1, r3
   11140:	4802      	ldr	r0, [pc, #8]	; (1114c <Pin::SetAsActiveLow(bool)+0x6c>)
   11142:	f004 f9d9 	bl	154f8 <__cyg_profile_func_exit>
                 set_as_active_low, 1);
  }
   11146:	bf00      	nop
   11148:	b005      	add	sp, #20
   1114a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1114c:	000110e1 	.word	0x000110e1
   11150:	10000028 	.word	0x10000028

00011154 <Pin::SetAsAnalogMode(bool)>:
  // Set bit to 0 to enable analog mode
  void SetAsAnalogMode(bool set_as_analog = true) override
   11154:	b5f0      	push	{r4, r5, r6, r7, lr}
   11156:	b085      	sub	sp, #20
   11158:	4677      	mov	r7, lr
   1115a:	9003      	str	r0, [sp, #12]
   1115c:	460b      	mov	r3, r1
   1115e:	f88d 300b 	strb.w	r3, [sp, #11]
   11162:	463b      	mov	r3, r7
   11164:	4619      	mov	r1, r3
   11166:	4818      	ldr	r0, [pc, #96]	; (111c8 <Pin::SetAsAnalogMode(bool)+0x74>)
   11168:	f004 f9b2 	bl	154d0 <__cyg_profile_func_enter>
  {
    pin_map->_register[port_][pin_] =
        BitPlace(pin_map->_register[port_][pin_], PinBitMap::kAnalogDigitalMode,
   1116c:	4b17      	ldr	r3, [pc, #92]	; (111cc <Pin::SetAsAnalogMode(bool)+0x78>)
   1116e:	681b      	ldr	r3, [r3, #0]
   11170:	9a03      	ldr	r2, [sp, #12]
   11172:	7912      	ldrb	r2, [r2, #4]
   11174:	4610      	mov	r0, r2
   11176:	9a03      	ldr	r2, [sp, #12]
   11178:	7952      	ldrb	r2, [r2, #5]
   1117a:	4611      	mov	r1, r2
   1117c:	0142      	lsls	r2, r0, #5
   1117e:	440a      	add	r2, r1
   11180:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
                 !set_as_analog, 1);
   11184:	f89d 300b 	ldrb.w	r3, [sp, #11]
   11188:	f083 0301 	eor.w	r3, r3, #1
   1118c:	b2db      	uxtb	r3, r3
        BitPlace(pin_map->_register[port_][pin_], PinBitMap::kAnalogDigitalMode,
   1118e:	461a      	mov	r2, r3
    pin_map->_register[port_][pin_] =
   11190:	4b0e      	ldr	r3, [pc, #56]	; (111cc <Pin::SetAsAnalogMode(bool)+0x78>)
   11192:	681c      	ldr	r4, [r3, #0]
   11194:	9b03      	ldr	r3, [sp, #12]
   11196:	791b      	ldrb	r3, [r3, #4]
   11198:	461e      	mov	r6, r3
   1119a:	9b03      	ldr	r3, [sp, #12]
   1119c:	795b      	ldrb	r3, [r3, #5]
   1119e:	461d      	mov	r5, r3
        BitPlace(pin_map->_register[port_][pin_], PinBitMap::kAnalogDigitalMode,
   111a0:	2301      	movs	r3, #1
   111a2:	9300      	str	r3, [sp, #0]
   111a4:	4613      	mov	r3, r2
   111a6:	2207      	movs	r2, #7
   111a8:	9803      	ldr	r0, [sp, #12]
   111aa:	f000 f975 	bl	11498 <Pin::BitPlace(unsigned long, unsigned long, unsigned long, unsigned long)>
   111ae:	4602      	mov	r2, r0
    pin_map->_register[port_][pin_] =
   111b0:	0173      	lsls	r3, r6, #5
   111b2:	442b      	add	r3, r5
   111b4:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
   111b8:	463b      	mov	r3, r7
   111ba:	4619      	mov	r1, r3
   111bc:	4802      	ldr	r0, [pc, #8]	; (111c8 <Pin::SetAsAnalogMode(bool)+0x74>)
   111be:	f004 f99b 	bl	154f8 <__cyg_profile_func_exit>
  }
   111c2:	bf00      	nop
   111c4:	b005      	add	sp, #20
   111c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   111c8:	00011155 	.word	0x00011155
   111cc:	10000028 	.word	0x10000028

000111d0 <Pin::EnableDigitalFilter(bool)>:
  // Enable by setting bit to 0 to enable digital filter.
  void EnableDigitalFilter(bool enable_digital_filter = true) override
   111d0:	b5f0      	push	{r4, r5, r6, r7, lr}
   111d2:	b085      	sub	sp, #20
   111d4:	4677      	mov	r7, lr
   111d6:	9003      	str	r0, [sp, #12]
   111d8:	460b      	mov	r3, r1
   111da:	f88d 300b 	strb.w	r3, [sp, #11]
   111de:	463b      	mov	r3, r7
   111e0:	4619      	mov	r1, r3
   111e2:	4818      	ldr	r0, [pc, #96]	; (11244 <Pin::EnableDigitalFilter(bool)+0x74>)
   111e4:	f004 f974 	bl	154d0 <__cyg_profile_func_enter>
  {
    pin_map->_register[port_][pin_] =
        BitPlace(pin_map->_register[port_][pin_], PinBitMap::kDigitalFilter,
   111e8:	4b17      	ldr	r3, [pc, #92]	; (11248 <Pin::EnableDigitalFilter(bool)+0x78>)
   111ea:	681b      	ldr	r3, [r3, #0]
   111ec:	9a03      	ldr	r2, [sp, #12]
   111ee:	7912      	ldrb	r2, [r2, #4]
   111f0:	4610      	mov	r0, r2
   111f2:	9a03      	ldr	r2, [sp, #12]
   111f4:	7952      	ldrb	r2, [r2, #5]
   111f6:	4611      	mov	r1, r2
   111f8:	0142      	lsls	r2, r0, #5
   111fa:	440a      	add	r2, r1
   111fc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
                 !enable_digital_filter, 1);
   11200:	f89d 300b 	ldrb.w	r3, [sp, #11]
   11204:	f083 0301 	eor.w	r3, r3, #1
   11208:	b2db      	uxtb	r3, r3
        BitPlace(pin_map->_register[port_][pin_], PinBitMap::kDigitalFilter,
   1120a:	461a      	mov	r2, r3
    pin_map->_register[port_][pin_] =
   1120c:	4b0e      	ldr	r3, [pc, #56]	; (11248 <Pin::EnableDigitalFilter(bool)+0x78>)
   1120e:	681c      	ldr	r4, [r3, #0]
   11210:	9b03      	ldr	r3, [sp, #12]
   11212:	791b      	ldrb	r3, [r3, #4]
   11214:	461e      	mov	r6, r3
   11216:	9b03      	ldr	r3, [sp, #12]
   11218:	795b      	ldrb	r3, [r3, #5]
   1121a:	461d      	mov	r5, r3
        BitPlace(pin_map->_register[port_][pin_], PinBitMap::kDigitalFilter,
   1121c:	2301      	movs	r3, #1
   1121e:	9300      	str	r3, [sp, #0]
   11220:	4613      	mov	r3, r2
   11222:	2208      	movs	r2, #8
   11224:	9803      	ldr	r0, [sp, #12]
   11226:	f000 f937 	bl	11498 <Pin::BitPlace(unsigned long, unsigned long, unsigned long, unsigned long)>
   1122a:	4602      	mov	r2, r0
    pin_map->_register[port_][pin_] =
   1122c:	0173      	lsls	r3, r6, #5
   1122e:	442b      	add	r3, r5
   11230:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
   11234:	463b      	mov	r3, r7
   11236:	4619      	mov	r1, r3
   11238:	4802      	ldr	r0, [pc, #8]	; (11244 <Pin::EnableDigitalFilter(bool)+0x74>)
   1123a:	f004 f95d 	bl	154f8 <__cyg_profile_func_exit>
  }
   1123e:	bf00      	nop
   11240:	b005      	add	sp, #20
   11242:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11244:	000111d1 	.word	0x000111d1
   11248:	10000028 	.word	0x10000028

0001124c <Pin::EnableFastMode(bool)>:
  void EnableFastMode(bool enable_fast_mode = true) override
   1124c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1124e:	b085      	sub	sp, #20
   11250:	4677      	mov	r7, lr
   11252:	9003      	str	r0, [sp, #12]
   11254:	460b      	mov	r3, r1
   11256:	f88d 300b 	strb.w	r3, [sp, #11]
   1125a:	463b      	mov	r3, r7
   1125c:	4619      	mov	r1, r3
   1125e:	4816      	ldr	r0, [pc, #88]	; (112b8 <Pin::EnableFastMode(bool)+0x6c>)
   11260:	f004 f936 	bl	154d0 <__cyg_profile_func_enter>
  {
    pin_map->_register[port_][pin_] = BitPlace(
   11264:	4b15      	ldr	r3, [pc, #84]	; (112bc <Pin::EnableFastMode(bool)+0x70>)
   11266:	681b      	ldr	r3, [r3, #0]
        pin_map->_register[port_][pin_], PinBitMap::kSlew, enable_fast_mode, 1);
   11268:	9a03      	ldr	r2, [sp, #12]
   1126a:	7912      	ldrb	r2, [r2, #4]
   1126c:	4610      	mov	r0, r2
   1126e:	9a03      	ldr	r2, [sp, #12]
   11270:	7952      	ldrb	r2, [r2, #5]
   11272:	4611      	mov	r1, r2
    pin_map->_register[port_][pin_] = BitPlace(
   11274:	0142      	lsls	r2, r0, #5
   11276:	440a      	add	r2, r1
   11278:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   1127c:	f89d 200b 	ldrb.w	r2, [sp, #11]
   11280:	4b0e      	ldr	r3, [pc, #56]	; (112bc <Pin::EnableFastMode(bool)+0x70>)
   11282:	681c      	ldr	r4, [r3, #0]
   11284:	9b03      	ldr	r3, [sp, #12]
   11286:	791b      	ldrb	r3, [r3, #4]
   11288:	461e      	mov	r6, r3
   1128a:	9b03      	ldr	r3, [sp, #12]
   1128c:	795b      	ldrb	r3, [r3, #5]
   1128e:	461d      	mov	r5, r3
   11290:	2301      	movs	r3, #1
   11292:	9300      	str	r3, [sp, #0]
   11294:	4613      	mov	r3, r2
   11296:	2209      	movs	r2, #9
   11298:	9803      	ldr	r0, [sp, #12]
   1129a:	f000 f8fd 	bl	11498 <Pin::BitPlace(unsigned long, unsigned long, unsigned long, unsigned long)>
   1129e:	4602      	mov	r2, r0
   112a0:	0173      	lsls	r3, r6, #5
   112a2:	442b      	add	r3, r5
   112a4:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
   112a8:	463b      	mov	r3, r7
   112aa:	4619      	mov	r1, r3
   112ac:	4802      	ldr	r0, [pc, #8]	; (112b8 <Pin::EnableFastMode(bool)+0x6c>)
   112ae:	f004 f923 	bl	154f8 <__cyg_profile_func_exit>
  }
   112b2:	bf00      	nop
   112b4:	b005      	add	sp, #20
   112b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   112b8:	0001124d 	.word	0x0001124d
   112bc:	10000028 	.word	0x10000028

000112c0 <Pin::EnableI2cHighSpeedMode(bool)>:
  // Enable by setting bit to 0 for i2c high speed mode
  void EnableI2cHighSpeedMode(bool enable_high_speed = true) override
   112c0:	b5f0      	push	{r4, r5, r6, r7, lr}
   112c2:	b085      	sub	sp, #20
   112c4:	4677      	mov	r7, lr
   112c6:	9003      	str	r0, [sp, #12]
   112c8:	460b      	mov	r3, r1
   112ca:	f88d 300b 	strb.w	r3, [sp, #11]
   112ce:	463b      	mov	r3, r7
   112d0:	4619      	mov	r1, r3
   112d2:	4818      	ldr	r0, [pc, #96]	; (11334 <Pin::EnableI2cHighSpeedMode(bool)+0x74>)
   112d4:	f004 f8fc 	bl	154d0 <__cyg_profile_func_enter>
  {
    pin_map->_register[port_][pin_] =
        BitPlace(pin_map->_register[port_][pin_], PinBitMap::kI2cHighSpeed,
   112d8:	4b17      	ldr	r3, [pc, #92]	; (11338 <Pin::EnableI2cHighSpeedMode(bool)+0x78>)
   112da:	681b      	ldr	r3, [r3, #0]
   112dc:	9a03      	ldr	r2, [sp, #12]
   112de:	7912      	ldrb	r2, [r2, #4]
   112e0:	4610      	mov	r0, r2
   112e2:	9a03      	ldr	r2, [sp, #12]
   112e4:	7952      	ldrb	r2, [r2, #5]
   112e6:	4611      	mov	r1, r2
   112e8:	0142      	lsls	r2, r0, #5
   112ea:	440a      	add	r2, r1
   112ec:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
                 !enable_high_speed, 1);
   112f0:	f89d 300b 	ldrb.w	r3, [sp, #11]
   112f4:	f083 0301 	eor.w	r3, r3, #1
   112f8:	b2db      	uxtb	r3, r3
        BitPlace(pin_map->_register[port_][pin_], PinBitMap::kI2cHighSpeed,
   112fa:	461a      	mov	r2, r3
    pin_map->_register[port_][pin_] =
   112fc:	4b0e      	ldr	r3, [pc, #56]	; (11338 <Pin::EnableI2cHighSpeedMode(bool)+0x78>)
   112fe:	681c      	ldr	r4, [r3, #0]
   11300:	9b03      	ldr	r3, [sp, #12]
   11302:	791b      	ldrb	r3, [r3, #4]
   11304:	461e      	mov	r6, r3
   11306:	9b03      	ldr	r3, [sp, #12]
   11308:	795b      	ldrb	r3, [r3, #5]
   1130a:	461d      	mov	r5, r3
        BitPlace(pin_map->_register[port_][pin_], PinBitMap::kI2cHighSpeed,
   1130c:	2301      	movs	r3, #1
   1130e:	9300      	str	r3, [sp, #0]
   11310:	4613      	mov	r3, r2
   11312:	2208      	movs	r2, #8
   11314:	9803      	ldr	r0, [sp, #12]
   11316:	f000 f8bf 	bl	11498 <Pin::BitPlace(unsigned long, unsigned long, unsigned long, unsigned long)>
   1131a:	4602      	mov	r2, r0
    pin_map->_register[port_][pin_] =
   1131c:	0173      	lsls	r3, r6, #5
   1131e:	442b      	add	r3, r5
   11320:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
   11324:	463b      	mov	r3, r7
   11326:	4619      	mov	r1, r3
   11328:	4802      	ldr	r0, [pc, #8]	; (11334 <Pin::EnableI2cHighSpeedMode(bool)+0x74>)
   1132a:	f004 f8e5 	bl	154f8 <__cyg_profile_func_exit>
  }
   1132e:	bf00      	nop
   11330:	b005      	add	sp, #20
   11332:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11334:	000112c1 	.word	0x000112c1
   11338:	10000028 	.word	0x10000028

0001133c <Pin::EnableI2cHighCurrentDrive(bool)>:
  void EnableI2cHighCurrentDrive(bool enable_high_current = true) override
   1133c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1133e:	b085      	sub	sp, #20
   11340:	4677      	mov	r7, lr
   11342:	9003      	str	r0, [sp, #12]
   11344:	460b      	mov	r3, r1
   11346:	f88d 300b 	strb.w	r3, [sp, #11]
   1134a:	463b      	mov	r3, r7
   1134c:	4619      	mov	r1, r3
   1134e:	4816      	ldr	r0, [pc, #88]	; (113a8 <Pin::EnableI2cHighCurrentDrive(bool)+0x6c>)
   11350:	f004 f8be 	bl	154d0 <__cyg_profile_func_enter>
  {
    pin_map->_register[port_][pin_] =
        BitPlace(pin_map->_register[port_][pin_],
   11354:	4b15      	ldr	r3, [pc, #84]	; (113ac <Pin::EnableI2cHighCurrentDrive(bool)+0x70>)
   11356:	681b      	ldr	r3, [r3, #0]
   11358:	9a03      	ldr	r2, [sp, #12]
   1135a:	7912      	ldrb	r2, [r2, #4]
   1135c:	4610      	mov	r0, r2
   1135e:	9a03      	ldr	r2, [sp, #12]
   11360:	7952      	ldrb	r2, [r2, #5]
   11362:	4611      	mov	r1, r2
   11364:	0142      	lsls	r2, r0, #5
   11366:	440a      	add	r2, r1
   11368:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   1136c:	f89d 200b 	ldrb.w	r2, [sp, #11]
    pin_map->_register[port_][pin_] =
   11370:	4b0e      	ldr	r3, [pc, #56]	; (113ac <Pin::EnableI2cHighCurrentDrive(bool)+0x70>)
   11372:	681c      	ldr	r4, [r3, #0]
   11374:	9b03      	ldr	r3, [sp, #12]
   11376:	791b      	ldrb	r3, [r3, #4]
   11378:	461e      	mov	r6, r3
   1137a:	9b03      	ldr	r3, [sp, #12]
   1137c:	795b      	ldrb	r3, [r3, #5]
   1137e:	461d      	mov	r5, r3
        BitPlace(pin_map->_register[port_][pin_],
   11380:	2301      	movs	r3, #1
   11382:	9300      	str	r3, [sp, #0]
   11384:	4613      	mov	r3, r2
   11386:	2209      	movs	r2, #9
   11388:	9803      	ldr	r0, [sp, #12]
   1138a:	f000 f885 	bl	11498 <Pin::BitPlace(unsigned long, unsigned long, unsigned long, unsigned long)>
   1138e:	4602      	mov	r2, r0
    pin_map->_register[port_][pin_] =
   11390:	0173      	lsls	r3, r6, #5
   11392:	442b      	add	r3, r5
   11394:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
   11398:	463b      	mov	r3, r7
   1139a:	4619      	mov	r1, r3
   1139c:	4802      	ldr	r0, [pc, #8]	; (113a8 <Pin::EnableI2cHighCurrentDrive(bool)+0x6c>)
   1139e:	f004 f8ab 	bl	154f8 <__cyg_profile_func_exit>
                 PinBitMap::kI2cHighCurrentDrive, enable_high_current, 1);
  }
   113a2:	bf00      	nop
   113a4:	b005      	add	sp, #20
   113a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   113a8:	0001133d 	.word	0x0001133d
   113ac:	10000028 	.word	0x10000028

000113b0 <Pin::SetAsOpenDrain(bool)>:
  void SetAsOpenDrain(bool set_as_open_drain = true) override
   113b0:	b5f0      	push	{r4, r5, r6, r7, lr}
   113b2:	b085      	sub	sp, #20
   113b4:	4677      	mov	r7, lr
   113b6:	9003      	str	r0, [sp, #12]
   113b8:	460b      	mov	r3, r1
   113ba:	f88d 300b 	strb.w	r3, [sp, #11]
   113be:	463b      	mov	r3, r7
   113c0:	4619      	mov	r1, r3
   113c2:	4816      	ldr	r0, [pc, #88]	; (1141c <Pin::SetAsOpenDrain(bool)+0x6c>)
   113c4:	f004 f884 	bl	154d0 <__cyg_profile_func_enter>
  {
    pin_map->_register[port_][pin_] =
        BitPlace(pin_map->_register[port_][pin_], PinBitMap::kOpenDrain,
   113c8:	4b15      	ldr	r3, [pc, #84]	; (11420 <Pin::SetAsOpenDrain(bool)+0x70>)
   113ca:	681b      	ldr	r3, [r3, #0]
   113cc:	9a03      	ldr	r2, [sp, #12]
   113ce:	7912      	ldrb	r2, [r2, #4]
   113d0:	4610      	mov	r0, r2
   113d2:	9a03      	ldr	r2, [sp, #12]
   113d4:	7952      	ldrb	r2, [r2, #5]
   113d6:	4611      	mov	r1, r2
   113d8:	0142      	lsls	r2, r0, #5
   113da:	440a      	add	r2, r1
   113dc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   113e0:	f89d 200b 	ldrb.w	r2, [sp, #11]
    pin_map->_register[port_][pin_] =
   113e4:	4b0e      	ldr	r3, [pc, #56]	; (11420 <Pin::SetAsOpenDrain(bool)+0x70>)
   113e6:	681c      	ldr	r4, [r3, #0]
   113e8:	9b03      	ldr	r3, [sp, #12]
   113ea:	791b      	ldrb	r3, [r3, #4]
   113ec:	461e      	mov	r6, r3
   113ee:	9b03      	ldr	r3, [sp, #12]
   113f0:	795b      	ldrb	r3, [r3, #5]
   113f2:	461d      	mov	r5, r3
        BitPlace(pin_map->_register[port_][pin_], PinBitMap::kOpenDrain,
   113f4:	2301      	movs	r3, #1
   113f6:	9300      	str	r3, [sp, #0]
   113f8:	4613      	mov	r3, r2
   113fa:	220a      	movs	r2, #10
   113fc:	9803      	ldr	r0, [sp, #12]
   113fe:	f000 f84b 	bl	11498 <Pin::BitPlace(unsigned long, unsigned long, unsigned long, unsigned long)>
   11402:	4602      	mov	r2, r0
    pin_map->_register[port_][pin_] =
   11404:	0173      	lsls	r3, r6, #5
   11406:	442b      	add	r3, r5
   11408:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
   1140c:	463b      	mov	r3, r7
   1140e:	4619      	mov	r1, r3
   11410:	4802      	ldr	r0, [pc, #8]	; (1141c <Pin::SetAsOpenDrain(bool)+0x6c>)
   11412:	f004 f871 	bl	154f8 <__cyg_profile_func_exit>
                 set_as_open_drain, 1);
  }
   11416:	bf00      	nop
   11418:	b005      	add	sp, #20
   1141a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1141c:	000113b1 	.word	0x000113b1
   11420:	10000028 	.word	0x10000028

00011424 <Pin::EnableDac(bool)>:
  void EnableDac(bool enable_dac = true) override
   11424:	b5f0      	push	{r4, r5, r6, r7, lr}
   11426:	b085      	sub	sp, #20
   11428:	4677      	mov	r7, lr
   1142a:	9003      	str	r0, [sp, #12]
   1142c:	460b      	mov	r3, r1
   1142e:	f88d 300b 	strb.w	r3, [sp, #11]
   11432:	463b      	mov	r3, r7
   11434:	4619      	mov	r1, r3
   11436:	4816      	ldr	r0, [pc, #88]	; (11490 <Pin::EnableDac(bool)+0x6c>)
   11438:	f004 f84a 	bl	154d0 <__cyg_profile_func_enter>
  {
    pin_map->_register[port_][pin_] = BitPlace(
   1143c:	4b15      	ldr	r3, [pc, #84]	; (11494 <Pin::EnableDac(bool)+0x70>)
   1143e:	681b      	ldr	r3, [r3, #0]
        pin_map->_register[port_][pin_], PinBitMap::kDacEnable, enable_dac, 1);
   11440:	9a03      	ldr	r2, [sp, #12]
   11442:	7912      	ldrb	r2, [r2, #4]
   11444:	4610      	mov	r0, r2
   11446:	9a03      	ldr	r2, [sp, #12]
   11448:	7952      	ldrb	r2, [r2, #5]
   1144a:	4611      	mov	r1, r2
    pin_map->_register[port_][pin_] = BitPlace(
   1144c:	0142      	lsls	r2, r0, #5
   1144e:	440a      	add	r2, r1
   11450:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   11454:	f89d 200b 	ldrb.w	r2, [sp, #11]
   11458:	4b0e      	ldr	r3, [pc, #56]	; (11494 <Pin::EnableDac(bool)+0x70>)
   1145a:	681c      	ldr	r4, [r3, #0]
   1145c:	9b03      	ldr	r3, [sp, #12]
   1145e:	791b      	ldrb	r3, [r3, #4]
   11460:	461e      	mov	r6, r3
   11462:	9b03      	ldr	r3, [sp, #12]
   11464:	795b      	ldrb	r3, [r3, #5]
   11466:	461d      	mov	r5, r3
   11468:	2301      	movs	r3, #1
   1146a:	9300      	str	r3, [sp, #0]
   1146c:	4613      	mov	r3, r2
   1146e:	2210      	movs	r2, #16
   11470:	9803      	ldr	r0, [sp, #12]
   11472:	f000 f811 	bl	11498 <Pin::BitPlace(unsigned long, unsigned long, unsigned long, unsigned long)>
   11476:	4602      	mov	r2, r0
   11478:	0173      	lsls	r3, r6, #5
   1147a:	442b      	add	r3, r5
   1147c:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
   11480:	463b      	mov	r3, r7
   11482:	4619      	mov	r1, r3
   11484:	4802      	ldr	r0, [pc, #8]	; (11490 <Pin::EnableDac(bool)+0x6c>)
   11486:	f004 f837 	bl	154f8 <__cyg_profile_func_exit>
  }
   1148a:	bf00      	nop
   1148c:	b005      	add	sp, #20
   1148e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11490:	00011425 	.word	0x00011425
   11494:	10000028 	.word	0x10000028

00011498 <Pin::BitPlace(unsigned long, unsigned long, unsigned long, unsigned long)>:
  inline uint32_t BitPlace(uint32_t target, uint32_t position, uint32_t value,
   11498:	b530      	push	{r4, r5, lr}
   1149a:	b087      	sub	sp, #28
   1149c:	4675      	mov	r5, lr
   1149e:	9003      	str	r0, [sp, #12]
   114a0:	9102      	str	r1, [sp, #8]
   114a2:	9201      	str	r2, [sp, #4]
   114a4:	9300      	str	r3, [sp, #0]
   114a6:	462b      	mov	r3, r5
   114a8:	4619      	mov	r1, r3
   114aa:	4813      	ldr	r0, [pc, #76]	; (114f8 <Pin::BitPlace(unsigned long, unsigned long, unsigned long, unsigned long)+0x60>)
   114ac:	f004 f810 	bl	154d0 <__cyg_profile_func_enter>
                           uint32_t value_width)
  {
    // Generate mask with all 1s
    uint32_t mask = 0xFFFFFFFF >> (32 - value_width);
   114b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   114b2:	f1c3 0320 	rsb	r3, r3, #32
   114b6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   114ba:	fa22 f303 	lsr.w	r3, r2, r3
   114be:	9305      	str	r3, [sp, #20]
    target &= ~(mask << position);
   114c0:	9a05      	ldr	r2, [sp, #20]
   114c2:	9b01      	ldr	r3, [sp, #4]
   114c4:	fa02 f303 	lsl.w	r3, r2, r3
   114c8:	43db      	mvns	r3, r3
   114ca:	9a02      	ldr	r2, [sp, #8]
   114cc:	4013      	ands	r3, r2
   114ce:	9302      	str	r3, [sp, #8]
    target |= (value & mask) << position;
   114d0:	9a00      	ldr	r2, [sp, #0]
   114d2:	9b05      	ldr	r3, [sp, #20]
   114d4:	401a      	ands	r2, r3
   114d6:	9b01      	ldr	r3, [sp, #4]
   114d8:	fa02 f303 	lsl.w	r3, r2, r3
   114dc:	9a02      	ldr	r2, [sp, #8]
   114de:	4313      	orrs	r3, r2
   114e0:	9302      	str	r3, [sp, #8]
    return target;
   114e2:	9c02      	ldr	r4, [sp, #8]
   114e4:	462b      	mov	r3, r5
   114e6:	4619      	mov	r1, r3
   114e8:	4803      	ldr	r0, [pc, #12]	; (114f8 <Pin::BitPlace(unsigned long, unsigned long, unsigned long, unsigned long)+0x60>)
   114ea:	f004 f805 	bl	154f8 <__cyg_profile_func_exit>
   114ee:	4623      	mov	r3, r4
  }
   114f0:	4618      	mov	r0, r3
   114f2:	b007      	add	sp, #28
   114f4:	bd30      	pop	{r4, r5, pc}
   114f6:	bf00      	nop
   114f8:	00011499 	.word	0x00011499

000114fc <Pin::GetPort() const>:
  uint8_t GetPort() const override
   114fc:	b530      	push	{r4, r5, lr}
   114fe:	b083      	sub	sp, #12
   11500:	4675      	mov	r5, lr
   11502:	9001      	str	r0, [sp, #4]
   11504:	462b      	mov	r3, r5
   11506:	4619      	mov	r1, r3
   11508:	4806      	ldr	r0, [pc, #24]	; (11524 <Pin::GetPort() const+0x28>)
   1150a:	f003 ffe1 	bl	154d0 <__cyg_profile_func_enter>
  {
    return port_;
   1150e:	9b01      	ldr	r3, [sp, #4]
   11510:	791c      	ldrb	r4, [r3, #4]
   11512:	462b      	mov	r3, r5
   11514:	4619      	mov	r1, r3
   11516:	4803      	ldr	r0, [pc, #12]	; (11524 <Pin::GetPort() const+0x28>)
   11518:	f003 ffee 	bl	154f8 <__cyg_profile_func_exit>
   1151c:	4623      	mov	r3, r4
  }
   1151e:	4618      	mov	r0, r3
   11520:	b003      	add	sp, #12
   11522:	bd30      	pop	{r4, r5, pc}
   11524:	000114fd 	.word	0x000114fd

00011528 <Pin::GetPin() const>:
  uint8_t GetPin() const override
   11528:	b530      	push	{r4, r5, lr}
   1152a:	b083      	sub	sp, #12
   1152c:	4675      	mov	r5, lr
   1152e:	9001      	str	r0, [sp, #4]
   11530:	462b      	mov	r3, r5
   11532:	4619      	mov	r1, r3
   11534:	4806      	ldr	r0, [pc, #24]	; (11550 <Pin::GetPin() const+0x28>)
   11536:	f003 ffcb 	bl	154d0 <__cyg_profile_func_enter>
  {
    return pin_;
   1153a:	9b01      	ldr	r3, [sp, #4]
   1153c:	795c      	ldrb	r4, [r3, #5]
   1153e:	462b      	mov	r3, r5
   11540:	4619      	mov	r1, r3
   11542:	4803      	ldr	r0, [pc, #12]	; (11550 <Pin::GetPin() const+0x28>)
   11544:	f003 ffd8 	bl	154f8 <__cyg_profile_func_exit>
   11548:	4623      	mov	r3, r4
  }
   1154a:	4618      	mov	r0, r3
   1154c:	b003      	add	sp, #12
   1154e:	bd30      	pop	{r4, r5, pc}
   11550:	00011529 	.word	0x00011529

00011554 <GpioInterface::GpioInterface()>:
#include "L0_LowLevel/LPC40xx.h"
#include "L1_Drivers/pin.hpp"
#include "utility/enum.hpp"
#include "utility/log.hpp"

class GpioInterface
   11554:	b530      	push	{r4, r5, lr}
   11556:	b083      	sub	sp, #12
   11558:	4675      	mov	r5, lr
   1155a:	9001      	str	r0, [sp, #4]
   1155c:	462b      	mov	r3, r5
   1155e:	4619      	mov	r1, r3
   11560:	4807      	ldr	r0, [pc, #28]	; (11580 <GpioInterface::GpioInterface()+0x2c>)
   11562:	f003 ffb5 	bl	154d0 <__cyg_profile_func_enter>
   11566:	4a07      	ldr	r2, [pc, #28]	; (11584 <GpioInterface::GpioInterface()+0x30>)
   11568:	9b01      	ldr	r3, [sp, #4]
   1156a:	601a      	str	r2, [r3, #0]
   1156c:	9c01      	ldr	r4, [sp, #4]
   1156e:	462b      	mov	r3, r5
   11570:	4619      	mov	r1, r3
   11572:	4803      	ldr	r0, [pc, #12]	; (11580 <GpioInterface::GpioInterface()+0x2c>)
   11574:	f003 ffc0 	bl	154f8 <__cyg_profile_func_exit>
   11578:	4623      	mov	r3, r4
   1157a:	4618      	mov	r0, r3
   1157c:	b003      	add	sp, #12
   1157e:	bd30      	pop	{r4, r5, pc}
   11580:	00011555 	.word	0x00011555
   11584:	00018b58 	.word	0x00018b58

00011588 <Gpio::Gpio(unsigned char, unsigned char)>:
  };

  inline static volatile uint32_t * port_status = &(LPC_GPIOINT->IntStatus);

  // For port 0-4, pins 0-31 are available. Port 5 only has pins 0-4 available.
  constexpr Gpio(uint8_t port_number, uint8_t pin_number)
   11588:	b530      	push	{r4, r5, lr}
   1158a:	b083      	sub	sp, #12
   1158c:	4675      	mov	r5, lr
   1158e:	9001      	str	r0, [sp, #4]
   11590:	460b      	mov	r3, r1
   11592:	f88d 3003 	strb.w	r3, [sp, #3]
   11596:	4613      	mov	r3, r2
   11598:	f88d 3002 	strb.w	r3, [sp, #2]
   1159c:	462b      	mov	r3, r5
   1159e:	4619      	mov	r1, r3
   115a0:	4816      	ldr	r0, [pc, #88]	; (115fc <Gpio::Gpio(unsigned char, unsigned char)+0x74>)
   115a2:	f003 ff95 	bl	154d0 <__cyg_profile_func_enter>
      : interupt_port_(false),
        pin_(&lpc40xx_pin_),
        lpc40xx_pin_(port_number, pin_number)
   115a6:	9b01      	ldr	r3, [sp, #4]
   115a8:	4618      	mov	r0, r3
   115aa:	f7ff ffd3 	bl	11554 <GpioInterface::GpioInterface()>
   115ae:	4a14      	ldr	r2, [pc, #80]	; (11600 <Gpio::Gpio(unsigned char, unsigned char)+0x78>)
   115b0:	9b01      	ldr	r3, [sp, #4]
   115b2:	601a      	str	r2, [r3, #0]
   115b4:	9b01      	ldr	r3, [sp, #4]
   115b6:	2200      	movs	r2, #0
   115b8:	711a      	strb	r2, [r3, #4]
   115ba:	9b01      	ldr	r3, [sp, #4]
   115bc:	f103 020c 	add.w	r2, r3, #12
   115c0:	9b01      	ldr	r3, [sp, #4]
   115c2:	609a      	str	r2, [r3, #8]
   115c4:	9b01      	ldr	r3, [sp, #4]
   115c6:	330c      	adds	r3, #12
   115c8:	f89d 2002 	ldrb.w	r2, [sp, #2]
   115cc:	f89d 1003 	ldrb.w	r1, [sp, #3]
   115d0:	4618      	mov	r0, r3
   115d2:	f7ff fca3 	bl	10f1c <Pin::Pin(unsigned char, unsigned char)>
  {
    interupt_port_ = (port_number == 2) ? 1 : 0;
   115d6:	f89d 3003 	ldrb.w	r3, [sp, #3]
   115da:	2b02      	cmp	r3, #2
   115dc:	d101      	bne.n	115e2 <Gpio::Gpio(unsigned char, unsigned char)+0x5a>
   115de:	2201      	movs	r2, #1
   115e0:	e000      	b.n	115e4 <Gpio::Gpio(unsigned char, unsigned char)+0x5c>
   115e2:	2200      	movs	r2, #0
   115e4:	9b01      	ldr	r3, [sp, #4]
   115e6:	711a      	strb	r2, [r3, #4]
  }
   115e8:	9c01      	ldr	r4, [sp, #4]
   115ea:	462b      	mov	r3, r5
   115ec:	4619      	mov	r1, r3
   115ee:	4803      	ldr	r0, [pc, #12]	; (115fc <Gpio::Gpio(unsigned char, unsigned char)+0x74>)
   115f0:	f003 ff82 	bl	154f8 <__cyg_profile_func_exit>
   115f4:	4623      	mov	r3, r4
   115f6:	4618      	mov	r0, r3
   115f8:	b003      	add	sp, #12
   115fa:	bd30      	pop	{r4, r5, pc}
   115fc:	00011589 	.word	0x00011589
   11600:	00018b10 	.word	0x00018b10

00011604 <Gpio::SetAsInput()>:
      : interupt_port_(false), pin_(pin), lpc40xx_pin_(Pin::CreateInactivePin())
  {
    interupt_port_ = pin_->GetPort();
  }
  // Sets the GPIO pin direction as input
  void SetAsInput(void) override
   11604:	b530      	push	{r4, r5, lr}
   11606:	b083      	sub	sp, #12
   11608:	4675      	mov	r5, lr
   1160a:	9001      	str	r0, [sp, #4]
   1160c:	462b      	mov	r3, r5
   1160e:	4619      	mov	r1, r3
   11610:	4819      	ldr	r0, [pc, #100]	; (11678 <Gpio::SetAsInput()+0x74>)
   11612:	f003 ff5d 	bl	154d0 <__cyg_profile_func_enter>
  {
    pin_->SetPinFunction(kGpioFunction);
   11616:	9b01      	ldr	r3, [sp, #4]
   11618:	689a      	ldr	r2, [r3, #8]
   1161a:	9b01      	ldr	r3, [sp, #4]
   1161c:	689b      	ldr	r3, [r3, #8]
   1161e:	681b      	ldr	r3, [r3, #0]
   11620:	681b      	ldr	r3, [r3, #0]
   11622:	2100      	movs	r1, #0
   11624:	4610      	mov	r0, r2
   11626:	4798      	blx	r3
    gpio_port[pin_->GetPort()]->DIR &= ~(1 << pin_->GetPin());
   11628:	9b01      	ldr	r3, [sp, #4]
   1162a:	689a      	ldr	r2, [r3, #8]
   1162c:	9b01      	ldr	r3, [sp, #4]
   1162e:	689b      	ldr	r3, [r3, #8]
   11630:	681b      	ldr	r3, [r3, #0]
   11632:	3330      	adds	r3, #48	; 0x30
   11634:	681b      	ldr	r3, [r3, #0]
   11636:	4610      	mov	r0, r2
   11638:	4798      	blx	r3
   1163a:	4603      	mov	r3, r0
   1163c:	461a      	mov	r2, r3
   1163e:	2301      	movs	r3, #1
   11640:	4093      	lsls	r3, r2
   11642:	43dc      	mvns	r4, r3
   11644:	9b01      	ldr	r3, [sp, #4]
   11646:	689a      	ldr	r2, [r3, #8]
   11648:	9b01      	ldr	r3, [sp, #4]
   1164a:	689b      	ldr	r3, [r3, #8]
   1164c:	681b      	ldr	r3, [r3, #0]
   1164e:	332c      	adds	r3, #44	; 0x2c
   11650:	681b      	ldr	r3, [r3, #0]
   11652:	4610      	mov	r0, r2
   11654:	4798      	blx	r3
   11656:	4603      	mov	r3, r0
   11658:	461a      	mov	r2, r3
   1165a:	4b08      	ldr	r3, [pc, #32]	; (1167c <Gpio::SetAsInput()+0x78>)
   1165c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   11660:	681a      	ldr	r2, [r3, #0]
   11662:	4621      	mov	r1, r4
   11664:	400a      	ands	r2, r1
   11666:	601a      	str	r2, [r3, #0]
   11668:	462b      	mov	r3, r5
   1166a:	4619      	mov	r1, r3
   1166c:	4802      	ldr	r0, [pc, #8]	; (11678 <Gpio::SetAsInput()+0x74>)
   1166e:	f003 ff43 	bl	154f8 <__cyg_profile_func_exit>
  }
   11672:	bf00      	nop
   11674:	b003      	add	sp, #12
   11676:	bd30      	pop	{r4, r5, pc}
   11678:	00011605 	.word	0x00011605
   1167c:	1000002c 	.word	0x1000002c

00011680 <Gpio::SetAsOutput()>:
  // Sets the GPIO pin direction as output
  void SetAsOutput(void) override
   11680:	b530      	push	{r4, r5, lr}
   11682:	b083      	sub	sp, #12
   11684:	4675      	mov	r5, lr
   11686:	9001      	str	r0, [sp, #4]
   11688:	462b      	mov	r3, r5
   1168a:	4619      	mov	r1, r3
   1168c:	4819      	ldr	r0, [pc, #100]	; (116f4 <Gpio::SetAsOutput()+0x74>)
   1168e:	f003 ff1f 	bl	154d0 <__cyg_profile_func_enter>
  {
    pin_->SetPinFunction(kGpioFunction);
   11692:	9b01      	ldr	r3, [sp, #4]
   11694:	689a      	ldr	r2, [r3, #8]
   11696:	9b01      	ldr	r3, [sp, #4]
   11698:	689b      	ldr	r3, [r3, #8]
   1169a:	681b      	ldr	r3, [r3, #0]
   1169c:	681b      	ldr	r3, [r3, #0]
   1169e:	2100      	movs	r1, #0
   116a0:	4610      	mov	r0, r2
   116a2:	4798      	blx	r3
    gpio_port[pin_->GetPort()]->DIR |= (1 << pin_->GetPin());
   116a4:	9b01      	ldr	r3, [sp, #4]
   116a6:	689a      	ldr	r2, [r3, #8]
   116a8:	9b01      	ldr	r3, [sp, #4]
   116aa:	689b      	ldr	r3, [r3, #8]
   116ac:	681b      	ldr	r3, [r3, #0]
   116ae:	3330      	adds	r3, #48	; 0x30
   116b0:	681b      	ldr	r3, [r3, #0]
   116b2:	4610      	mov	r0, r2
   116b4:	4798      	blx	r3
   116b6:	4603      	mov	r3, r0
   116b8:	461a      	mov	r2, r3
   116ba:	2301      	movs	r3, #1
   116bc:	fa03 f402 	lsl.w	r4, r3, r2
   116c0:	9b01      	ldr	r3, [sp, #4]
   116c2:	689a      	ldr	r2, [r3, #8]
   116c4:	9b01      	ldr	r3, [sp, #4]
   116c6:	689b      	ldr	r3, [r3, #8]
   116c8:	681b      	ldr	r3, [r3, #0]
   116ca:	332c      	adds	r3, #44	; 0x2c
   116cc:	681b      	ldr	r3, [r3, #0]
   116ce:	4610      	mov	r0, r2
   116d0:	4798      	blx	r3
   116d2:	4603      	mov	r3, r0
   116d4:	461a      	mov	r2, r3
   116d6:	4b08      	ldr	r3, [pc, #32]	; (116f8 <Gpio::SetAsOutput()+0x78>)
   116d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   116dc:	681a      	ldr	r2, [r3, #0]
   116de:	4621      	mov	r1, r4
   116e0:	430a      	orrs	r2, r1
   116e2:	601a      	str	r2, [r3, #0]
   116e4:	462b      	mov	r3, r5
   116e6:	4619      	mov	r1, r3
   116e8:	4802      	ldr	r0, [pc, #8]	; (116f4 <Gpio::SetAsOutput()+0x74>)
   116ea:	f003 ff05 	bl	154f8 <__cyg_profile_func_exit>
  }
   116ee:	bf00      	nop
   116f0:	b003      	add	sp, #12
   116f2:	bd30      	pop	{r4, r5, pc}
   116f4:	00011681 	.word	0x00011681
   116f8:	1000002c 	.word	0x1000002c

000116fc <Gpio::SetDirection(GpioInterface::Direction)>:
  // Sets the GPIO pin direction as output or input depending on the
  // Direction enum parameter
  inline void SetDirection(Direction direction) override
   116fc:	b510      	push	{r4, lr}
   116fe:	b082      	sub	sp, #8
   11700:	4674      	mov	r4, lr
   11702:	9001      	str	r0, [sp, #4]
   11704:	460b      	mov	r3, r1
   11706:	f88d 3003 	strb.w	r3, [sp, #3]
   1170a:	4623      	mov	r3, r4
   1170c:	4619      	mov	r1, r3
   1170e:	480b      	ldr	r0, [pc, #44]	; (1173c <Gpio::SetDirection(GpioInterface::Direction)+0x40>)
   11710:	f003 fede 	bl	154d0 <__cyg_profile_func_enter>
  {
    (direction) ? SetAsOutput() : SetAsInput();
   11714:	f89d 3003 	ldrb.w	r3, [sp, #3]
   11718:	2b00      	cmp	r3, #0
   1171a:	d003      	beq.n	11724 <Gpio::SetDirection(GpioInterface::Direction)+0x28>
   1171c:	9801      	ldr	r0, [sp, #4]
   1171e:	f7ff ffaf 	bl	11680 <Gpio::SetAsOutput()>
   11722:	e002      	b.n	1172a <Gpio::SetDirection(GpioInterface::Direction)+0x2e>
   11724:	9801      	ldr	r0, [sp, #4]
   11726:	f7ff ff6d 	bl	11604 <Gpio::SetAsInput()>
   1172a:	4623      	mov	r3, r4
   1172c:	4619      	mov	r1, r3
   1172e:	4803      	ldr	r0, [pc, #12]	; (1173c <Gpio::SetDirection(GpioInterface::Direction)+0x40>)
   11730:	f003 fee2 	bl	154f8 <__cyg_profile_func_exit>
  }
   11734:	bf00      	nop
   11736:	b002      	add	sp, #8
   11738:	bd10      	pop	{r4, pc}
   1173a:	bf00      	nop
   1173c:	000116fd 	.word	0x000116fd

00011740 <Gpio::SetHigh()>:
  // Sets the GPIO output pin to high
  void SetHigh(void) override
   11740:	b530      	push	{r4, r5, lr}
   11742:	b083      	sub	sp, #12
   11744:	4675      	mov	r5, lr
   11746:	9001      	str	r0, [sp, #4]
   11748:	462b      	mov	r3, r5
   1174a:	4619      	mov	r1, r3
   1174c:	4813      	ldr	r0, [pc, #76]	; (1179c <Gpio::SetHigh()+0x5c>)
   1174e:	f003 febf 	bl	154d0 <__cyg_profile_func_enter>
  {
    gpio_port[pin_->GetPort()]->SET = (1 << pin_->GetPin());
   11752:	9b01      	ldr	r3, [sp, #4]
   11754:	689a      	ldr	r2, [r3, #8]
   11756:	9b01      	ldr	r3, [sp, #4]
   11758:	689b      	ldr	r3, [r3, #8]
   1175a:	681b      	ldr	r3, [r3, #0]
   1175c:	3330      	adds	r3, #48	; 0x30
   1175e:	681b      	ldr	r3, [r3, #0]
   11760:	4610      	mov	r0, r2
   11762:	4798      	blx	r3
   11764:	4603      	mov	r3, r0
   11766:	461a      	mov	r2, r3
   11768:	2301      	movs	r3, #1
   1176a:	4093      	lsls	r3, r2
   1176c:	461c      	mov	r4, r3
   1176e:	9b01      	ldr	r3, [sp, #4]
   11770:	689a      	ldr	r2, [r3, #8]
   11772:	9b01      	ldr	r3, [sp, #4]
   11774:	689b      	ldr	r3, [r3, #8]
   11776:	681b      	ldr	r3, [r3, #0]
   11778:	332c      	adds	r3, #44	; 0x2c
   1177a:	681b      	ldr	r3, [r3, #0]
   1177c:	4610      	mov	r0, r2
   1177e:	4798      	blx	r3
   11780:	4603      	mov	r3, r0
   11782:	461a      	mov	r2, r3
   11784:	4b06      	ldr	r3, [pc, #24]	; (117a0 <Gpio::SetHigh()+0x60>)
   11786:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   1178a:	619c      	str	r4, [r3, #24]
   1178c:	462b      	mov	r3, r5
   1178e:	4619      	mov	r1, r3
   11790:	4802      	ldr	r0, [pc, #8]	; (1179c <Gpio::SetHigh()+0x5c>)
   11792:	f003 feb1 	bl	154f8 <__cyg_profile_func_exit>
  }
   11796:	bf00      	nop
   11798:	b003      	add	sp, #12
   1179a:	bd30      	pop	{r4, r5, pc}
   1179c:	00011741 	.word	0x00011741
   117a0:	1000002c 	.word	0x1000002c

000117a4 <Gpio::SetLow()>:
  // Sets the GPIO output pin to low
  void SetLow(void) override
   117a4:	b530      	push	{r4, r5, lr}
   117a6:	b083      	sub	sp, #12
   117a8:	4675      	mov	r5, lr
   117aa:	9001      	str	r0, [sp, #4]
   117ac:	462b      	mov	r3, r5
   117ae:	4619      	mov	r1, r3
   117b0:	4813      	ldr	r0, [pc, #76]	; (11800 <Gpio::SetLow()+0x5c>)
   117b2:	f003 fe8d 	bl	154d0 <__cyg_profile_func_enter>
  {
    gpio_port[pin_->GetPort()]->CLR = (1 << pin_->GetPin());
   117b6:	9b01      	ldr	r3, [sp, #4]
   117b8:	689a      	ldr	r2, [r3, #8]
   117ba:	9b01      	ldr	r3, [sp, #4]
   117bc:	689b      	ldr	r3, [r3, #8]
   117be:	681b      	ldr	r3, [r3, #0]
   117c0:	3330      	adds	r3, #48	; 0x30
   117c2:	681b      	ldr	r3, [r3, #0]
   117c4:	4610      	mov	r0, r2
   117c6:	4798      	blx	r3
   117c8:	4603      	mov	r3, r0
   117ca:	461a      	mov	r2, r3
   117cc:	2301      	movs	r3, #1
   117ce:	4093      	lsls	r3, r2
   117d0:	461c      	mov	r4, r3
   117d2:	9b01      	ldr	r3, [sp, #4]
   117d4:	689a      	ldr	r2, [r3, #8]
   117d6:	9b01      	ldr	r3, [sp, #4]
   117d8:	689b      	ldr	r3, [r3, #8]
   117da:	681b      	ldr	r3, [r3, #0]
   117dc:	332c      	adds	r3, #44	; 0x2c
   117de:	681b      	ldr	r3, [r3, #0]
   117e0:	4610      	mov	r0, r2
   117e2:	4798      	blx	r3
   117e4:	4603      	mov	r3, r0
   117e6:	461a      	mov	r2, r3
   117e8:	4b06      	ldr	r3, [pc, #24]	; (11804 <Gpio::SetLow()+0x60>)
   117ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   117ee:	61dc      	str	r4, [r3, #28]
   117f0:	462b      	mov	r3, r5
   117f2:	4619      	mov	r1, r3
   117f4:	4802      	ldr	r0, [pc, #8]	; (11800 <Gpio::SetLow()+0x5c>)
   117f6:	f003 fe7f 	bl	154f8 <__cyg_profile_func_exit>
  }
   117fa:	bf00      	nop
   117fc:	b003      	add	sp, #12
   117fe:	bd30      	pop	{r4, r5, pc}
   11800:	000117a5 	.word	0x000117a5
   11804:	1000002c 	.word	0x1000002c

00011808 <Gpio::Set(GpioInterface::State)>:
  // Sets the GPIO output pin to high or low depending on the State enum
  // parameter
  void Set(State output = kHigh) override
   11808:	b510      	push	{r4, lr}
   1180a:	b082      	sub	sp, #8
   1180c:	4674      	mov	r4, lr
   1180e:	9001      	str	r0, [sp, #4]
   11810:	460b      	mov	r3, r1
   11812:	f88d 3003 	strb.w	r3, [sp, #3]
   11816:	4623      	mov	r3, r4
   11818:	4619      	mov	r1, r3
   1181a:	480b      	ldr	r0, [pc, #44]	; (11848 <Gpio::Set(GpioInterface::State)+0x40>)
   1181c:	f003 fe58 	bl	154d0 <__cyg_profile_func_enter>
  {
    (output) ? SetHigh() : SetLow();
   11820:	f89d 3003 	ldrb.w	r3, [sp, #3]
   11824:	2b00      	cmp	r3, #0
   11826:	d003      	beq.n	11830 <Gpio::Set(GpioInterface::State)+0x28>
   11828:	9801      	ldr	r0, [sp, #4]
   1182a:	f7ff ff89 	bl	11740 <Gpio::SetHigh()>
   1182e:	e002      	b.n	11836 <Gpio::Set(GpioInterface::State)+0x2e>
   11830:	9801      	ldr	r0, [sp, #4]
   11832:	f7ff ffb7 	bl	117a4 <Gpio::SetLow()>
   11836:	4623      	mov	r3, r4
   11838:	4619      	mov	r1, r3
   1183a:	4803      	ldr	r0, [pc, #12]	; (11848 <Gpio::Set(GpioInterface::State)+0x40>)
   1183c:	f003 fe5c 	bl	154f8 <__cyg_profile_func_exit>
  }
   11840:	bf00      	nop
   11842:	b002      	add	sp, #8
   11844:	bd10      	pop	{r4, pc}
   11846:	bf00      	nop
   11848:	00011809 	.word	0x00011809

0001184c <Gpio::Toggle()>:
  // Toggle the output of a GPIO output pin
  void Toggle() override
   1184c:	b530      	push	{r4, r5, lr}
   1184e:	b083      	sub	sp, #12
   11850:	4675      	mov	r5, lr
   11852:	9001      	str	r0, [sp, #4]
   11854:	462b      	mov	r3, r5
   11856:	4619      	mov	r1, r3
   11858:	4815      	ldr	r0, [pc, #84]	; (118b0 <Gpio::Toggle()+0x64>)
   1185a:	f003 fe39 	bl	154d0 <__cyg_profile_func_enter>
  {
    gpio_port[pin_->GetPort()]->PIN ^= (1 << pin_->GetPin());
   1185e:	9b01      	ldr	r3, [sp, #4]
   11860:	689a      	ldr	r2, [r3, #8]
   11862:	9b01      	ldr	r3, [sp, #4]
   11864:	689b      	ldr	r3, [r3, #8]
   11866:	681b      	ldr	r3, [r3, #0]
   11868:	3330      	adds	r3, #48	; 0x30
   1186a:	681b      	ldr	r3, [r3, #0]
   1186c:	4610      	mov	r0, r2
   1186e:	4798      	blx	r3
   11870:	4603      	mov	r3, r0
   11872:	461a      	mov	r2, r3
   11874:	2301      	movs	r3, #1
   11876:	fa03 f402 	lsl.w	r4, r3, r2
   1187a:	9b01      	ldr	r3, [sp, #4]
   1187c:	689a      	ldr	r2, [r3, #8]
   1187e:	9b01      	ldr	r3, [sp, #4]
   11880:	689b      	ldr	r3, [r3, #8]
   11882:	681b      	ldr	r3, [r3, #0]
   11884:	332c      	adds	r3, #44	; 0x2c
   11886:	681b      	ldr	r3, [r3, #0]
   11888:	4610      	mov	r0, r2
   1188a:	4798      	blx	r3
   1188c:	4603      	mov	r3, r0
   1188e:	461a      	mov	r2, r3
   11890:	4b08      	ldr	r3, [pc, #32]	; (118b4 <Gpio::Toggle()+0x68>)
   11892:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   11896:	695a      	ldr	r2, [r3, #20]
   11898:	4621      	mov	r1, r4
   1189a:	404a      	eors	r2, r1
   1189c:	615a      	str	r2, [r3, #20]
   1189e:	462b      	mov	r3, r5
   118a0:	4619      	mov	r1, r3
   118a2:	4803      	ldr	r0, [pc, #12]	; (118b0 <Gpio::Toggle()+0x64>)
   118a4:	f003 fe28 	bl	154f8 <__cyg_profile_func_exit>
  }
   118a8:	bf00      	nop
   118aa:	b003      	add	sp, #12
   118ac:	bd30      	pop	{r4, r5, pc}
   118ae:	bf00      	nop
   118b0:	0001184d 	.word	0x0001184d
   118b4:	1000002c 	.word	0x1000002c

000118b8 <Gpio::ReadState()>:
  // Returns the current State state of the pin
  State ReadState(void) override
   118b8:	b530      	push	{r4, r5, lr}
   118ba:	b085      	sub	sp, #20
   118bc:	4675      	mov	r5, lr
   118be:	9001      	str	r0, [sp, #4]
   118c0:	462b      	mov	r3, r5
   118c2:	4619      	mov	r1, r3
   118c4:	4818      	ldr	r0, [pc, #96]	; (11928 <Gpio::ReadState()+0x70>)
   118c6:	f003 fe03 	bl	154d0 <__cyg_profile_func_enter>
  {
    bool state = (gpio_port[pin_->GetPort()]->PIN >> pin_->GetPin()) & 1;
   118ca:	9b01      	ldr	r3, [sp, #4]
   118cc:	689a      	ldr	r2, [r3, #8]
   118ce:	9b01      	ldr	r3, [sp, #4]
   118d0:	689b      	ldr	r3, [r3, #8]
   118d2:	681b      	ldr	r3, [r3, #0]
   118d4:	332c      	adds	r3, #44	; 0x2c
   118d6:	681b      	ldr	r3, [r3, #0]
   118d8:	4610      	mov	r0, r2
   118da:	4798      	blx	r3
   118dc:	4603      	mov	r3, r0
   118de:	461a      	mov	r2, r3
   118e0:	4b12      	ldr	r3, [pc, #72]	; (1192c <Gpio::ReadState()+0x74>)
   118e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   118e6:	695c      	ldr	r4, [r3, #20]
   118e8:	9b01      	ldr	r3, [sp, #4]
   118ea:	689a      	ldr	r2, [r3, #8]
   118ec:	9b01      	ldr	r3, [sp, #4]
   118ee:	689b      	ldr	r3, [r3, #8]
   118f0:	681b      	ldr	r3, [r3, #0]
   118f2:	3330      	adds	r3, #48	; 0x30
   118f4:	681b      	ldr	r3, [r3, #0]
   118f6:	4610      	mov	r0, r2
   118f8:	4798      	blx	r3
   118fa:	4603      	mov	r3, r0
   118fc:	fa24 f303 	lsr.w	r3, r4, r3
   11900:	f003 0301 	and.w	r3, r3, #1
   11904:	2b00      	cmp	r3, #0
   11906:	bf14      	ite	ne
   11908:	2301      	movne	r3, #1
   1190a:	2300      	moveq	r3, #0
   1190c:	f88d 300f 	strb.w	r3, [sp, #15]
    return static_cast<State>(state);
   11910:	f89d 400f 	ldrb.w	r4, [sp, #15]
   11914:	462b      	mov	r3, r5
   11916:	4619      	mov	r1, r3
   11918:	4803      	ldr	r0, [pc, #12]	; (11928 <Gpio::ReadState()+0x70>)
   1191a:	f003 fded 	bl	154f8 <__cyg_profile_func_exit>
   1191e:	4623      	mov	r3, r4
  }
   11920:	4618      	mov	r0, r3
   11922:	b005      	add	sp, #20
   11924:	bd30      	pop	{r4, r5, pc}
   11926:	bf00      	nop
   11928:	000118b9 	.word	0x000118b9
   1192c:	1000002c 	.word	0x1000002c

00011930 <Gpio::Read()>:
  // Returns true if input or output pin is high
  bool Read(void) override
   11930:	b530      	push	{r4, r5, lr}
   11932:	b083      	sub	sp, #12
   11934:	4675      	mov	r5, lr
   11936:	9001      	str	r0, [sp, #4]
   11938:	462b      	mov	r3, r5
   1193a:	4619      	mov	r1, r3
   1193c:	4816      	ldr	r0, [pc, #88]	; (11998 <Gpio::Read()+0x68>)
   1193e:	f003 fdc7 	bl	154d0 <__cyg_profile_func_enter>
  {
    return (gpio_port[pin_->GetPort()]->PIN >> pin_->GetPin()) & 1;
   11942:	9b01      	ldr	r3, [sp, #4]
   11944:	689a      	ldr	r2, [r3, #8]
   11946:	9b01      	ldr	r3, [sp, #4]
   11948:	689b      	ldr	r3, [r3, #8]
   1194a:	681b      	ldr	r3, [r3, #0]
   1194c:	332c      	adds	r3, #44	; 0x2c
   1194e:	681b      	ldr	r3, [r3, #0]
   11950:	4610      	mov	r0, r2
   11952:	4798      	blx	r3
   11954:	4603      	mov	r3, r0
   11956:	461a      	mov	r2, r3
   11958:	4b10      	ldr	r3, [pc, #64]	; (1199c <Gpio::Read()+0x6c>)
   1195a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   1195e:	695c      	ldr	r4, [r3, #20]
   11960:	9b01      	ldr	r3, [sp, #4]
   11962:	689a      	ldr	r2, [r3, #8]
   11964:	9b01      	ldr	r3, [sp, #4]
   11966:	689b      	ldr	r3, [r3, #8]
   11968:	681b      	ldr	r3, [r3, #0]
   1196a:	3330      	adds	r3, #48	; 0x30
   1196c:	681b      	ldr	r3, [r3, #0]
   1196e:	4610      	mov	r0, r2
   11970:	4798      	blx	r3
   11972:	4603      	mov	r3, r0
   11974:	fa24 f303 	lsr.w	r3, r4, r3
   11978:	f003 0301 	and.w	r3, r3, #1
   1197c:	2b00      	cmp	r3, #0
   1197e:	bf14      	ite	ne
   11980:	2301      	movne	r3, #1
   11982:	2300      	moveq	r3, #0
   11984:	b2dc      	uxtb	r4, r3
   11986:	462b      	mov	r3, r5
   11988:	4619      	mov	r1, r3
   1198a:	4803      	ldr	r0, [pc, #12]	; (11998 <Gpio::Read()+0x68>)
   1198c:	f003 fdb4 	bl	154f8 <__cyg_profile_func_exit>
   11990:	4623      	mov	r3, r4
  }
   11992:	4618      	mov	r0, r3
   11994:	b003      	add	sp, #12
   11996:	bd30      	pop	{r4, r5, pc}
   11998:	00011931 	.word	0x00011931
   1199c:	1000002c 	.word	0x1000002c

000119a0 <Gpio::GetPin()>:
  PinInterface & GetPin() override
   119a0:	b530      	push	{r4, r5, lr}
   119a2:	b083      	sub	sp, #12
   119a4:	4675      	mov	r5, lr
   119a6:	9001      	str	r0, [sp, #4]
   119a8:	462b      	mov	r3, r5
   119aa:	4619      	mov	r1, r3
   119ac:	4806      	ldr	r0, [pc, #24]	; (119c8 <Gpio::GetPin()+0x28>)
   119ae:	f003 fd8f 	bl	154d0 <__cyg_profile_func_enter>
  {
    return *pin_;
   119b2:	9b01      	ldr	r3, [sp, #4]
   119b4:	689c      	ldr	r4, [r3, #8]
   119b6:	462b      	mov	r3, r5
   119b8:	4619      	mov	r1, r3
   119ba:	4803      	ldr	r0, [pc, #12]	; (119c8 <Gpio::GetPin()+0x28>)
   119bc:	f003 fd9c 	bl	154f8 <__cyg_profile_func_exit>
   119c0:	4623      	mov	r3, r4
  }
   119c2:	4618      	mov	r0, r3
   119c4:	b003      	add	sp, #12
   119c6:	bd30      	pop	{r4, r5, pc}
   119c8:	000119a1 	.word	0x000119a1

000119cc <Gpio::ValidPortCheck()>:

  // Checks if the selected gpio port is valid for external interrupts.
  bool ValidPortCheck()
   119cc:	b530      	push	{r4, r5, lr}
   119ce:	b087      	sub	sp, #28
   119d0:	4675      	mov	r5, lr
   119d2:	9003      	str	r0, [sp, #12]
   119d4:	462b      	mov	r3, r5
   119d6:	4619      	mov	r1, r3
   119d8:	4817      	ldr	r0, [pc, #92]	; (11a38 <Gpio::ValidPortCheck()+0x6c>)
   119da:	f003 fd79 	bl	154d0 <__cyg_profile_func_enter>
  {
    bool is_valid = (interupt_port_ <= 1);
   119de:	9b03      	ldr	r3, [sp, #12]
   119e0:	791b      	ldrb	r3, [r3, #4]
   119e2:	2b01      	cmp	r3, #1
   119e4:	bf94      	ite	ls
   119e6:	2301      	movls	r3, #1
   119e8:	2300      	movhi	r3, #0
   119ea:	b2db      	uxtb	r3, r3
   119ec:	f88d 3017 	strb.w	r3, [sp, #23]
    SJ2_ASSERT_WARNING(is_valid,
   119f0:	f89d 3017 	ldrb.w	r3, [sp, #23]
   119f4:	f083 0301 	eor.w	r3, r3, #1
   119f8:	b2db      	uxtb	r3, r3
   119fa:	2b00      	cmp	r3, #0
   119fc:	d010      	beq.n	11a20 <Gpio::ValidPortCheck()+0x54>
   119fe:	9b03      	ldr	r3, [sp, #12]
   11a00:	689a      	ldr	r2, [r3, #8]
   11a02:	9b03      	ldr	r3, [sp, #12]
   11a04:	689b      	ldr	r3, [r3, #8]
   11a06:	681b      	ldr	r3, [r3, #0]
   11a08:	332c      	adds	r3, #44	; 0x2c
   11a0a:	681b      	ldr	r3, [r3, #0]
   11a0c:	4610      	mov	r0, r2
   11a0e:	4798      	blx	r3
   11a10:	4603      	mov	r3, r0
   11a12:	9300      	str	r3, [sp, #0]
   11a14:	23a6      	movs	r3, #166	; 0xa6
   11a16:	4a09      	ldr	r2, [pc, #36]	; (11a3c <Gpio::ValidPortCheck()+0x70>)
   11a18:	4909      	ldr	r1, [pc, #36]	; (11a40 <Gpio::ValidPortCheck()+0x74>)
   11a1a:	480a      	ldr	r0, [pc, #40]	; (11a44 <Gpio::ValidPortCheck()+0x78>)
   11a1c:	f004 ffb2 	bl	16984 <printf>
                       "Port %d cannot be used for External Interrupts. Need "
                       "to use GPIO on Port 0 or 2.",
                       pin_->GetPort());
    return is_valid;
   11a20:	f89d 4017 	ldrb.w	r4, [sp, #23]
   11a24:	462b      	mov	r3, r5
   11a26:	4619      	mov	r1, r3
   11a28:	4803      	ldr	r0, [pc, #12]	; (11a38 <Gpio::ValidPortCheck()+0x6c>)
   11a2a:	f003 fd65 	bl	154f8 <__cyg_profile_func_exit>
   11a2e:	4623      	mov	r3, r4
  }
   11a30:	4618      	mov	r0, r3
   11a32:	b007      	add	sp, #28
   11a34:	bd30      	pop	{r4, r5, pc}
   11a36:	bf00      	nop
   11a38:	000119cd 	.word	0x000119cd
   11a3c:	00018d98 	.word	0x00018d98
   11a40:	000188f4 	.word	0x000188f4
   11a44:	00018394 	.word	0x00018394

00011a48 <Gpio::SetInterruptRoutine(void (*)())>:

  // Assigns the developer's ISR function to the port/pin gpio instance.
  void SetInterruptRoutine(IsrPointer function) override
   11a48:	b570      	push	{r4, r5, r6, lr}
   11a4a:	b082      	sub	sp, #8
   11a4c:	4676      	mov	r6, lr
   11a4e:	9001      	str	r0, [sp, #4]
   11a50:	9100      	str	r1, [sp, #0]
   11a52:	4633      	mov	r3, r6
   11a54:	4619      	mov	r1, r3
   11a56:	4811      	ldr	r0, [pc, #68]	; (11a9c <Gpio::SetInterruptRoutine(void (*)())+0x54>)
   11a58:	f003 fd3a 	bl	154d0 <__cyg_profile_func_enter>
  {
    ValidPortCheck();
   11a5c:	9801      	ldr	r0, [sp, #4]
   11a5e:	f7ff ffb5 	bl	119cc <Gpio::ValidPortCheck()>
    interrupthandlers[interupt_port_][pin_->GetPin()] = function;
   11a62:	9c00      	ldr	r4, [sp, #0]
   11a64:	9b01      	ldr	r3, [sp, #4]
   11a66:	791b      	ldrb	r3, [r3, #4]
   11a68:	461d      	mov	r5, r3
   11a6a:	9b01      	ldr	r3, [sp, #4]
   11a6c:	689a      	ldr	r2, [r3, #8]
   11a6e:	9b01      	ldr	r3, [sp, #4]
   11a70:	689b      	ldr	r3, [r3, #8]
   11a72:	681b      	ldr	r3, [r3, #0]
   11a74:	3330      	adds	r3, #48	; 0x30
   11a76:	681b      	ldr	r3, [r3, #0]
   11a78:	4610      	mov	r0, r2
   11a7a:	4798      	blx	r3
   11a7c:	4603      	mov	r3, r0
   11a7e:	4619      	mov	r1, r3
   11a80:	4a07      	ldr	r2, [pc, #28]	; (11aa0 <Gpio::SetInterruptRoutine(void (*)())+0x58>)
   11a82:	016b      	lsls	r3, r5, #5
   11a84:	440b      	add	r3, r1
   11a86:	f842 4023 	str.w	r4, [r2, r3, lsl #2]
   11a8a:	4633      	mov	r3, r6
   11a8c:	4619      	mov	r1, r3
   11a8e:	4803      	ldr	r0, [pc, #12]	; (11a9c <Gpio::SetInterruptRoutine(void (*)())+0x54>)
   11a90:	f003 fd32 	bl	154f8 <__cyg_profile_func_exit>
  }
   11a94:	bf00      	nop
   11a96:	b002      	add	sp, #8
   11a98:	bd70      	pop	{r4, r5, r6, pc}
   11a9a:	bf00      	nop
   11a9c:	00011a49 	.word	0x00011a49
   11aa0:	10000588 	.word	0x10000588

00011aa4 <Gpio::ClearInterruptRoutine()>:

  // Clears the developers ISR function from the port/pin gio instance.
  void ClearInterruptRoutine() override
   11aa4:	b530      	push	{r4, r5, lr}
   11aa6:	b083      	sub	sp, #12
   11aa8:	4675      	mov	r5, lr
   11aaa:	9001      	str	r0, [sp, #4]
   11aac:	462b      	mov	r3, r5
   11aae:	4619      	mov	r1, r3
   11ab0:	480f      	ldr	r0, [pc, #60]	; (11af0 <Gpio::ClearInterruptRoutine()+0x4c>)
   11ab2:	f003 fd0d 	bl	154d0 <__cyg_profile_func_enter>
  {
    interrupthandlers[interupt_port_][pin_->GetPin()] = nullptr;
   11ab6:	9b01      	ldr	r3, [sp, #4]
   11ab8:	791b      	ldrb	r3, [r3, #4]
   11aba:	461c      	mov	r4, r3
   11abc:	9b01      	ldr	r3, [sp, #4]
   11abe:	689a      	ldr	r2, [r3, #8]
   11ac0:	9b01      	ldr	r3, [sp, #4]
   11ac2:	689b      	ldr	r3, [r3, #8]
   11ac4:	681b      	ldr	r3, [r3, #0]
   11ac6:	3330      	adds	r3, #48	; 0x30
   11ac8:	681b      	ldr	r3, [r3, #0]
   11aca:	4610      	mov	r0, r2
   11acc:	4798      	blx	r3
   11ace:	4603      	mov	r3, r0
   11ad0:	4619      	mov	r1, r3
   11ad2:	4a08      	ldr	r2, [pc, #32]	; (11af4 <Gpio::ClearInterruptRoutine()+0x50>)
   11ad4:	0163      	lsls	r3, r4, #5
   11ad6:	440b      	add	r3, r1
   11ad8:	2100      	movs	r1, #0
   11ada:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
   11ade:	462b      	mov	r3, r5
   11ae0:	4619      	mov	r1, r3
   11ae2:	4803      	ldr	r0, [pc, #12]	; (11af0 <Gpio::ClearInterruptRoutine()+0x4c>)
   11ae4:	f003 fd08 	bl	154f8 <__cyg_profile_func_exit>
  }
   11ae8:	bf00      	nop
   11aea:	b003      	add	sp, #12
   11aec:	bd30      	pop	{r4, r5, pc}
   11aee:	bf00      	nop
   11af0:	00011aa5 	.word	0x00011aa5
   11af4:	10000588 	.word	0x10000588

00011af8 <unsigned char util::Value<GpioInterface::Edge, unsigned char>(GpioInterface::Edge)>:
//
// @param enum_type_value variable you would like to get the value of.
// @return the value of the enum class type variable of with the underlying
//         type of the enum class.
template <typename Enum, typename Type = typename std::underlying_type_t<Enum>>
constexpr Type Value(Enum enum_type_value)
   11af8:	b530      	push	{r4, r5, lr}
   11afa:	b083      	sub	sp, #12
   11afc:	4675      	mov	r5, lr
   11afe:	4603      	mov	r3, r0
   11b00:	f88d 3007 	strb.w	r3, [sp, #7]
   11b04:	462b      	mov	r3, r5
   11b06:	4619      	mov	r1, r3
   11b08:	4806      	ldr	r0, [pc, #24]	; (11b24 <unsigned char util::Value<GpioInterface::Edge, unsigned char>(GpioInterface::Edge)+0x2c>)
   11b0a:	f003 fce1 	bl	154d0 <__cyg_profile_func_enter>
{
  return static_cast<Type>(enum_type_value);
   11b0e:	f89d 4007 	ldrb.w	r4, [sp, #7]
   11b12:	462b      	mov	r3, r5
   11b14:	4619      	mov	r1, r3
   11b16:	4803      	ldr	r0, [pc, #12]	; (11b24 <unsigned char util::Value<GpioInterface::Edge, unsigned char>(GpioInterface::Edge)+0x2c>)
   11b18:	f003 fcee 	bl	154f8 <__cyg_profile_func_exit>
   11b1c:	4623      	mov	r3, r4
}
   11b1e:	4618      	mov	r0, r3
   11b20:	b003      	add	sp, #12
   11b22:	bd30      	pop	{r4, r5, pc}
   11b24:	00011af9 	.word	0x00011af9

00011b28 <Gpio::SetInterruptEdge(GpioInterface::Edge)>:

  // Sets the selected edge that the gpio interrupt will be triggered on.
  void SetInterruptEdge(Edge edge) override
   11b28:	b510      	push	{r4, lr}
   11b2a:	b084      	sub	sp, #16
   11b2c:	4674      	mov	r4, lr
   11b2e:	9003      	str	r0, [sp, #12]
   11b30:	460b      	mov	r3, r1
   11b32:	f88d 300b 	strb.w	r3, [sp, #11]
   11b36:	4623      	mov	r3, r4
   11b38:	4619      	mov	r1, r3
   11b3a:	4819      	ldr	r0, [pc, #100]	; (11ba0 <Gpio::SetInterruptEdge(GpioInterface::Edge)+0x78>)
   11b3c:	f003 fcc8 	bl	154d0 <__cyg_profile_func_enter>
  {
    ValidPortCheck();
   11b40:	9803      	ldr	r0, [sp, #12]
   11b42:	f7ff ff43 	bl	119cc <Gpio::ValidPortCheck()>
    switch (edge)
   11b46:	f89d 300b 	ldrb.w	r3, [sp, #11]
   11b4a:	2b01      	cmp	r3, #1
   11b4c:	d008      	beq.n	11b60 <Gpio::SetInterruptEdge(GpioInterface::Edge)+0x38>
   11b4e:	2b01      	cmp	r3, #1
   11b50:	d302      	bcc.n	11b58 <Gpio::SetInterruptEdge(GpioInterface::Edge)+0x30>
   11b52:	2b02      	cmp	r3, #2
   11b54:	d008      	beq.n	11b68 <Gpio::SetInterruptEdge(GpioInterface::Edge)+0x40>
   11b56:	e00e      	b.n	11b76 <Gpio::SetInterruptEdge(GpioInterface::Edge)+0x4e>
    {
      case Edge::kEdgeRising:
      {
        SetEdgeRising();
   11b58:	9803      	ldr	r0, [sp, #12]
   11b5a:	f000 f8b1 	bl	11cc0 <Gpio::SetEdgeRising()>
        break;
   11b5e:	e017      	b.n	11b90 <Gpio::SetInterruptEdge(GpioInterface::Edge)+0x68>
      }
      case Edge::kEdgeFalling:
      {
        SetEdgeFalling();
   11b60:	9803      	ldr	r0, [sp, #12]
   11b62:	f000 f8eb 	bl	11d3c <Gpio::SetEdgeFalling()>
        break;
   11b66:	e013      	b.n	11b90 <Gpio::SetInterruptEdge(GpioInterface::Edge)+0x68>
      }
      case Edge::kEdgeBoth:
      {
        SetEdgeRising();
   11b68:	9803      	ldr	r0, [sp, #12]
   11b6a:	f000 f8a9 	bl	11cc0 <Gpio::SetEdgeRising()>
        SetEdgeFalling();
   11b6e:	9803      	ldr	r0, [sp, #12]
   11b70:	f000 f8e4 	bl	11d3c <Gpio::SetEdgeFalling()>
        break;
   11b74:	e00c      	b.n	11b90 <Gpio::SetInterruptEdge(GpioInterface::Edge)+0x68>
      }
      default:
      {
        LOG_WARNING(
   11b76:	f89d 300b 	ldrb.w	r3, [sp, #11]
   11b7a:	4618      	mov	r0, r3
   11b7c:	f7ff ffbc 	bl	11af8 <unsigned char util::Value<GpioInterface::Edge, unsigned char>(GpioInterface::Edge)>
   11b80:	4603      	mov	r3, r0
   11b82:	9300      	str	r3, [sp, #0]
   11b84:	23d2      	movs	r3, #210	; 0xd2
   11b86:	4a07      	ldr	r2, [pc, #28]	; (11ba4 <Gpio::SetInterruptEdge(GpioInterface::Edge)+0x7c>)
   11b88:	4907      	ldr	r1, [pc, #28]	; (11ba8 <Gpio::SetInterruptEdge(GpioInterface::Edge)+0x80>)
   11b8a:	4808      	ldr	r0, [pc, #32]	; (11bac <Gpio::SetInterruptEdge(GpioInterface::Edge)+0x84>)
   11b8c:	f004 fefa 	bl	16984 <printf>
   11b90:	4623      	mov	r3, r4
   11b92:	4619      	mov	r1, r3
   11b94:	4802      	ldr	r0, [pc, #8]	; (11ba0 <Gpio::SetInterruptEdge(GpioInterface::Edge)+0x78>)
   11b96:	f003 fcaf 	bl	154f8 <__cyg_profile_func_exit>
            "Edge %d cannot be used for External Interrupts."
            "Need to use a rising, falling, or both configuration.",
            util::Value(edge));
      }
    }
  }
   11b9a:	bf00      	nop
   11b9c:	b004      	add	sp, #16
   11b9e:	bd10      	pop	{r4, pc}
   11ba0:	00011b29 	.word	0x00011b29
   11ba4:	00018db4 	.word	0x00018db4
   11ba8:	00018900 	.word	0x00018900
   11bac:	00018424 	.word	0x00018424

00011bb0 <Gpio::ClearInterruptEdge(GpioInterface::Edge)>:

  // Clears the seleted edge of the gpio interrupt from being triggered.
  void ClearInterruptEdge(Edge edge) override
   11bb0:	b510      	push	{r4, lr}
   11bb2:	b084      	sub	sp, #16
   11bb4:	4674      	mov	r4, lr
   11bb6:	9003      	str	r0, [sp, #12]
   11bb8:	460b      	mov	r3, r1
   11bba:	f88d 300b 	strb.w	r3, [sp, #11]
   11bbe:	4623      	mov	r3, r4
   11bc0:	4619      	mov	r1, r3
   11bc2:	4819      	ldr	r0, [pc, #100]	; (11c28 <Gpio::ClearInterruptEdge(GpioInterface::Edge)+0x78>)
   11bc4:	f003 fc84 	bl	154d0 <__cyg_profile_func_enter>
  {
    ValidPortCheck();
   11bc8:	9803      	ldr	r0, [sp, #12]
   11bca:	f7ff feff 	bl	119cc <Gpio::ValidPortCheck()>
    switch (edge)
   11bce:	f89d 300b 	ldrb.w	r3, [sp, #11]
   11bd2:	2b01      	cmp	r3, #1
   11bd4:	d008      	beq.n	11be8 <Gpio::ClearInterruptEdge(GpioInterface::Edge)+0x38>
   11bd6:	2b01      	cmp	r3, #1
   11bd8:	d302      	bcc.n	11be0 <Gpio::ClearInterruptEdge(GpioInterface::Edge)+0x30>
   11bda:	2b02      	cmp	r3, #2
   11bdc:	d008      	beq.n	11bf0 <Gpio::ClearInterruptEdge(GpioInterface::Edge)+0x40>
   11bde:	e00e      	b.n	11bfe <Gpio::ClearInterruptEdge(GpioInterface::Edge)+0x4e>
    {
      case Edge::kEdgeRising:
      {
        ClearEdgeRising();
   11be0:	9803      	ldr	r0, [sp, #12]
   11be2:	f000 f8e9 	bl	11db8 <Gpio::ClearEdgeRising()>
        break;
   11be6:	e017      	b.n	11c18 <Gpio::ClearInterruptEdge(GpioInterface::Edge)+0x68>
      }
      case Edge::kEdgeFalling:
      {
        ClearEdgeFalling();
   11be8:	9803      	ldr	r0, [sp, #12]
   11bea:	f000 f923 	bl	11e34 <Gpio::ClearEdgeFalling()>
        break;
   11bee:	e013      	b.n	11c18 <Gpio::ClearInterruptEdge(GpioInterface::Edge)+0x68>
      }
      case Edge::kEdgeBoth:
      {
        ClearEdgeRising();
   11bf0:	9803      	ldr	r0, [sp, #12]
   11bf2:	f000 f8e1 	bl	11db8 <Gpio::ClearEdgeRising()>
        ClearEdgeFalling();
   11bf6:	9803      	ldr	r0, [sp, #12]
   11bf8:	f000 f91c 	bl	11e34 <Gpio::ClearEdgeFalling()>
        break;
   11bfc:	e00c      	b.n	11c18 <Gpio::ClearInterruptEdge(GpioInterface::Edge)+0x68>
      }
      default:
      {
        LOG_WARNING(
   11bfe:	f89d 300b 	ldrb.w	r3, [sp, #11]
   11c02:	4618      	mov	r0, r3
   11c04:	f7ff ff78 	bl	11af8 <unsigned char util::Value<GpioInterface::Edge, unsigned char>(GpioInterface::Edge)>
   11c08:	4603      	mov	r3, r0
   11c0a:	9300      	str	r3, [sp, #0]
   11c0c:	23f2      	movs	r3, #242	; 0xf2
   11c0e:	4a07      	ldr	r2, [pc, #28]	; (11c2c <Gpio::ClearInterruptEdge(GpioInterface::Edge)+0x7c>)
   11c10:	4907      	ldr	r1, [pc, #28]	; (11c30 <Gpio::ClearInterruptEdge(GpioInterface::Edge)+0x80>)
   11c12:	4808      	ldr	r0, [pc, #32]	; (11c34 <Gpio::ClearInterruptEdge(GpioInterface::Edge)+0x84>)
   11c14:	f004 feb6 	bl	16984 <printf>
   11c18:	4623      	mov	r3, r4
   11c1a:	4619      	mov	r1, r3
   11c1c:	4802      	ldr	r0, [pc, #8]	; (11c28 <Gpio::ClearInterruptEdge(GpioInterface::Edge)+0x78>)
   11c1e:	f003 fc6b 	bl	154f8 <__cyg_profile_func_exit>
            "Edge %d cannot be used for External Interrupts."
            "Need to use a rising, falling, or both configuration.",
           util::Value(edge));
      }
    }
  }
   11c22:	bf00      	nop
   11c24:	b004      	add	sp, #16
   11c26:	bd10      	pop	{r4, pc}
   11c28:	00011bb1 	.word	0x00011bb1
   11c2c:	00018d5c 	.word	0x00018d5c
   11c30:	0001890c 	.word	0x0001890c
   11c34:	00018424 	.word	0x00018424

00011c38 <Gpio::AttachInterrupt(void (*)(), GpioInterface::Edge)>:

  // Assign the developer's ISR and sets the selected edge that the gpio
  // interrupt will be triggered on.
  void AttachInterrupt(IsrPointer function, Edge edge) override
   11c38:	b510      	push	{r4, lr}
   11c3a:	b084      	sub	sp, #16
   11c3c:	4674      	mov	r4, lr
   11c3e:	9003      	str	r0, [sp, #12]
   11c40:	9102      	str	r1, [sp, #8]
   11c42:	4613      	mov	r3, r2
   11c44:	f88d 3007 	strb.w	r3, [sp, #7]
   11c48:	4623      	mov	r3, r4
   11c4a:	4619      	mov	r1, r3
   11c4c:	480b      	ldr	r0, [pc, #44]	; (11c7c <Gpio::AttachInterrupt(void (*)(), GpioInterface::Edge)+0x44>)
   11c4e:	f003 fc3f 	bl	154d0 <__cyg_profile_func_enter>
  {
    ValidPortCheck();
   11c52:	9803      	ldr	r0, [sp, #12]
   11c54:	f7ff feba 	bl	119cc <Gpio::ValidPortCheck()>
    SetInterruptRoutine(function);
   11c58:	9902      	ldr	r1, [sp, #8]
   11c5a:	9803      	ldr	r0, [sp, #12]
   11c5c:	f7ff fef4 	bl	11a48 <Gpio::SetInterruptRoutine(void (*)())>
    SetInterruptEdge(edge);
   11c60:	f89d 3007 	ldrb.w	r3, [sp, #7]
   11c64:	4619      	mov	r1, r3
   11c66:	9803      	ldr	r0, [sp, #12]
   11c68:	f7ff ff5e 	bl	11b28 <Gpio::SetInterruptEdge(GpioInterface::Edge)>
   11c6c:	4623      	mov	r3, r4
   11c6e:	4619      	mov	r1, r3
   11c70:	4802      	ldr	r0, [pc, #8]	; (11c7c <Gpio::AttachInterrupt(void (*)(), GpioInterface::Edge)+0x44>)
   11c72:	f003 fc41 	bl	154f8 <__cyg_profile_func_exit>
  }
   11c76:	bf00      	nop
   11c78:	b004      	add	sp, #16
   11c7a:	bd10      	pop	{r4, pc}
   11c7c:	00011c39 	.word	0x00011c39

00011c80 <Gpio::DetachInterrupt()>:

  // Removes the developer's ISR and clears the selected edge of the gpio
  // interrupt from being triggered.
  void DetachInterrupt() override
   11c80:	b510      	push	{r4, lr}
   11c82:	b082      	sub	sp, #8
   11c84:	4674      	mov	r4, lr
   11c86:	9001      	str	r0, [sp, #4]
   11c88:	4623      	mov	r3, r4
   11c8a:	4619      	mov	r1, r3
   11c8c:	480b      	ldr	r0, [pc, #44]	; (11cbc <Gpio::DetachInterrupt()+0x3c>)
   11c8e:	f003 fc1f 	bl	154d0 <__cyg_profile_func_enter>
  {
    ValidPortCheck();
   11c92:	9801      	ldr	r0, [sp, #4]
   11c94:	f7ff fe9a 	bl	119cc <Gpio::ValidPortCheck()>
    ClearInterruptRoutine();
   11c98:	9801      	ldr	r0, [sp, #4]
   11c9a:	f7ff ff03 	bl	11aa4 <Gpio::ClearInterruptRoutine()>
    ClearEdgeRising();
   11c9e:	9801      	ldr	r0, [sp, #4]
   11ca0:	f000 f88a 	bl	11db8 <Gpio::ClearEdgeRising()>
    ClearEdgeFalling();
   11ca4:	9801      	ldr	r0, [sp, #4]
   11ca6:	f000 f8c5 	bl	11e34 <Gpio::ClearEdgeFalling()>
   11caa:	4623      	mov	r3, r4
   11cac:	4619      	mov	r1, r3
   11cae:	4803      	ldr	r0, [pc, #12]	; (11cbc <Gpio::DetachInterrupt()+0x3c>)
   11cb0:	f003 fc22 	bl	154f8 <__cyg_profile_func_exit>
  }
   11cb4:	bf00      	nop
   11cb6:	b002      	add	sp, #8
   11cb8:	bd10      	pop	{r4, pc}
   11cba:	bf00      	nop
   11cbc:	00011c81 	.word	0x00011c81

00011cc0 <Gpio::SetEdgeRising()>:
    *interrupt[triggered_port].clear |= (1 << triggered_pin);
  }

 private:
  // Sets the gpio interrupt to trigger on a rising edge.
  void SetEdgeRising()
   11cc0:	b530      	push	{r4, r5, lr}
   11cc2:	b083      	sub	sp, #12
   11cc4:	4675      	mov	r5, lr
   11cc6:	9001      	str	r0, [sp, #4]
   11cc8:	462b      	mov	r3, r5
   11cca:	4619      	mov	r1, r3
   11ccc:	4819      	ldr	r0, [pc, #100]	; (11d34 <Gpio::SetEdgeRising()+0x74>)
   11cce:	f003 fbff 	bl	154d0 <__cyg_profile_func_enter>
  {
    *interrupt[interupt_port_].enable_rising_edge |= (1 << pin_->GetPin());
   11cd2:	9b01      	ldr	r3, [sp, #4]
   11cd4:	689a      	ldr	r2, [r3, #8]
   11cd6:	9b01      	ldr	r3, [sp, #4]
   11cd8:	689b      	ldr	r3, [r3, #8]
   11cda:	681b      	ldr	r3, [r3, #0]
   11cdc:	3330      	adds	r3, #48	; 0x30
   11cde:	681b      	ldr	r3, [r3, #0]
   11ce0:	4610      	mov	r0, r2
   11ce2:	4798      	blx	r3
   11ce4:	4603      	mov	r3, r0
   11ce6:	461a      	mov	r2, r3
   11ce8:	2301      	movs	r3, #1
   11cea:	fa03 f002 	lsl.w	r0, r3, r2
   11cee:	9b01      	ldr	r3, [sp, #4]
   11cf0:	791b      	ldrb	r3, [r3, #4]
   11cf2:	4619      	mov	r1, r3
   11cf4:	4a10      	ldr	r2, [pc, #64]	; (11d38 <Gpio::SetEdgeRising()+0x78>)
   11cf6:	460b      	mov	r3, r1
   11cf8:	009b      	lsls	r3, r3, #2
   11cfa:	440b      	add	r3, r1
   11cfc:	009b      	lsls	r3, r3, #2
   11cfe:	4413      	add	r3, r2
   11d00:	330c      	adds	r3, #12
   11d02:	681b      	ldr	r3, [r3, #0]
   11d04:	681a      	ldr	r2, [r3, #0]
   11d06:	4604      	mov	r4, r0
   11d08:	9b01      	ldr	r3, [sp, #4]
   11d0a:	791b      	ldrb	r3, [r3, #4]
   11d0c:	4618      	mov	r0, r3
   11d0e:	490a      	ldr	r1, [pc, #40]	; (11d38 <Gpio::SetEdgeRising()+0x78>)
   11d10:	4603      	mov	r3, r0
   11d12:	009b      	lsls	r3, r3, #2
   11d14:	4403      	add	r3, r0
   11d16:	009b      	lsls	r3, r3, #2
   11d18:	440b      	add	r3, r1
   11d1a:	330c      	adds	r3, #12
   11d1c:	681b      	ldr	r3, [r3, #0]
   11d1e:	4322      	orrs	r2, r4
   11d20:	601a      	str	r2, [r3, #0]
   11d22:	462b      	mov	r3, r5
   11d24:	4619      	mov	r1, r3
   11d26:	4803      	ldr	r0, [pc, #12]	; (11d34 <Gpio::SetEdgeRising()+0x74>)
   11d28:	f003 fbe6 	bl	154f8 <__cyg_profile_func_exit>
  }
   11d2c:	bf00      	nop
   11d2e:	b003      	add	sp, #12
   11d30:	bd30      	pop	{r4, r5, pc}
   11d32:	bf00      	nop
   11d34:	00011cc1 	.word	0x00011cc1
   11d38:	10000044 	.word	0x10000044

00011d3c <Gpio::SetEdgeFalling()>:

  // Sets the gpio interrupt to trigger on a falling edge.
  void SetEdgeFalling()
   11d3c:	b530      	push	{r4, r5, lr}
   11d3e:	b083      	sub	sp, #12
   11d40:	4675      	mov	r5, lr
   11d42:	9001      	str	r0, [sp, #4]
   11d44:	462b      	mov	r3, r5
   11d46:	4619      	mov	r1, r3
   11d48:	4819      	ldr	r0, [pc, #100]	; (11db0 <Gpio::SetEdgeFalling()+0x74>)
   11d4a:	f003 fbc1 	bl	154d0 <__cyg_profile_func_enter>
  {
    *interrupt[interupt_port_].enable_falling_edge |= (1 << pin_->GetPin());
   11d4e:	9b01      	ldr	r3, [sp, #4]
   11d50:	689a      	ldr	r2, [r3, #8]
   11d52:	9b01      	ldr	r3, [sp, #4]
   11d54:	689b      	ldr	r3, [r3, #8]
   11d56:	681b      	ldr	r3, [r3, #0]
   11d58:	3330      	adds	r3, #48	; 0x30
   11d5a:	681b      	ldr	r3, [r3, #0]
   11d5c:	4610      	mov	r0, r2
   11d5e:	4798      	blx	r3
   11d60:	4603      	mov	r3, r0
   11d62:	461a      	mov	r2, r3
   11d64:	2301      	movs	r3, #1
   11d66:	fa03 f002 	lsl.w	r0, r3, r2
   11d6a:	9b01      	ldr	r3, [sp, #4]
   11d6c:	791b      	ldrb	r3, [r3, #4]
   11d6e:	4619      	mov	r1, r3
   11d70:	4a10      	ldr	r2, [pc, #64]	; (11db4 <Gpio::SetEdgeFalling()+0x78>)
   11d72:	460b      	mov	r3, r1
   11d74:	009b      	lsls	r3, r3, #2
   11d76:	440b      	add	r3, r1
   11d78:	009b      	lsls	r3, r3, #2
   11d7a:	4413      	add	r3, r2
   11d7c:	3310      	adds	r3, #16
   11d7e:	681b      	ldr	r3, [r3, #0]
   11d80:	681a      	ldr	r2, [r3, #0]
   11d82:	4604      	mov	r4, r0
   11d84:	9b01      	ldr	r3, [sp, #4]
   11d86:	791b      	ldrb	r3, [r3, #4]
   11d88:	4618      	mov	r0, r3
   11d8a:	490a      	ldr	r1, [pc, #40]	; (11db4 <Gpio::SetEdgeFalling()+0x78>)
   11d8c:	4603      	mov	r3, r0
   11d8e:	009b      	lsls	r3, r3, #2
   11d90:	4403      	add	r3, r0
   11d92:	009b      	lsls	r3, r3, #2
   11d94:	440b      	add	r3, r1
   11d96:	3310      	adds	r3, #16
   11d98:	681b      	ldr	r3, [r3, #0]
   11d9a:	4322      	orrs	r2, r4
   11d9c:	601a      	str	r2, [r3, #0]
   11d9e:	462b      	mov	r3, r5
   11da0:	4619      	mov	r1, r3
   11da2:	4803      	ldr	r0, [pc, #12]	; (11db0 <Gpio::SetEdgeFalling()+0x74>)
   11da4:	f003 fba8 	bl	154f8 <__cyg_profile_func_exit>
  }
   11da8:	bf00      	nop
   11daa:	b003      	add	sp, #12
   11dac:	bd30      	pop	{r4, r5, pc}
   11dae:	bf00      	nop
   11db0:	00011d3d 	.word	0x00011d3d
   11db4:	10000044 	.word	0x10000044

00011db8 <Gpio::ClearEdgeRising()>:

  // Clears the gpio interrupt to no longer trigger on a rising edge.
  void ClearEdgeRising()
   11db8:	b530      	push	{r4, r5, lr}
   11dba:	b083      	sub	sp, #12
   11dbc:	4675      	mov	r5, lr
   11dbe:	9001      	str	r0, [sp, #4]
   11dc0:	462b      	mov	r3, r5
   11dc2:	4619      	mov	r1, r3
   11dc4:	4819      	ldr	r0, [pc, #100]	; (11e2c <Gpio::ClearEdgeRising()+0x74>)
   11dc6:	f003 fb83 	bl	154d0 <__cyg_profile_func_enter>
  {
    *interrupt[interupt_port_].enable_rising_edge &= ~(1 << pin_->GetPin());
   11dca:	9b01      	ldr	r3, [sp, #4]
   11dcc:	689a      	ldr	r2, [r3, #8]
   11dce:	9b01      	ldr	r3, [sp, #4]
   11dd0:	689b      	ldr	r3, [r3, #8]
   11dd2:	681b      	ldr	r3, [r3, #0]
   11dd4:	3330      	adds	r3, #48	; 0x30
   11dd6:	681b      	ldr	r3, [r3, #0]
   11dd8:	4610      	mov	r0, r2
   11dda:	4798      	blx	r3
   11ddc:	4603      	mov	r3, r0
   11dde:	461a      	mov	r2, r3
   11de0:	2301      	movs	r3, #1
   11de2:	4093      	lsls	r3, r2
   11de4:	43d8      	mvns	r0, r3
   11de6:	9b01      	ldr	r3, [sp, #4]
   11de8:	791b      	ldrb	r3, [r3, #4]
   11dea:	4619      	mov	r1, r3
   11dec:	4a10      	ldr	r2, [pc, #64]	; (11e30 <Gpio::ClearEdgeRising()+0x78>)
   11dee:	460b      	mov	r3, r1
   11df0:	009b      	lsls	r3, r3, #2
   11df2:	440b      	add	r3, r1
   11df4:	009b      	lsls	r3, r3, #2
   11df6:	4413      	add	r3, r2
   11df8:	330c      	adds	r3, #12
   11dfa:	681b      	ldr	r3, [r3, #0]
   11dfc:	681a      	ldr	r2, [r3, #0]
   11dfe:	4604      	mov	r4, r0
   11e00:	9b01      	ldr	r3, [sp, #4]
   11e02:	791b      	ldrb	r3, [r3, #4]
   11e04:	4618      	mov	r0, r3
   11e06:	490a      	ldr	r1, [pc, #40]	; (11e30 <Gpio::ClearEdgeRising()+0x78>)
   11e08:	4603      	mov	r3, r0
   11e0a:	009b      	lsls	r3, r3, #2
   11e0c:	4403      	add	r3, r0
   11e0e:	009b      	lsls	r3, r3, #2
   11e10:	440b      	add	r3, r1
   11e12:	330c      	adds	r3, #12
   11e14:	681b      	ldr	r3, [r3, #0]
   11e16:	4022      	ands	r2, r4
   11e18:	601a      	str	r2, [r3, #0]
   11e1a:	462b      	mov	r3, r5
   11e1c:	4619      	mov	r1, r3
   11e1e:	4803      	ldr	r0, [pc, #12]	; (11e2c <Gpio::ClearEdgeRising()+0x74>)
   11e20:	f003 fb6a 	bl	154f8 <__cyg_profile_func_exit>
  }
   11e24:	bf00      	nop
   11e26:	b003      	add	sp, #12
   11e28:	bd30      	pop	{r4, r5, pc}
   11e2a:	bf00      	nop
   11e2c:	00011db9 	.word	0x00011db9
   11e30:	10000044 	.word	0x10000044

00011e34 <Gpio::ClearEdgeFalling()>:

  // Clears the gpio interrupt to no longer trigger on a falling edge.
  void ClearEdgeFalling()
   11e34:	b530      	push	{r4, r5, lr}
   11e36:	b083      	sub	sp, #12
   11e38:	4675      	mov	r5, lr
   11e3a:	9001      	str	r0, [sp, #4]
   11e3c:	462b      	mov	r3, r5
   11e3e:	4619      	mov	r1, r3
   11e40:	4819      	ldr	r0, [pc, #100]	; (11ea8 <Gpio::ClearEdgeFalling()+0x74>)
   11e42:	f003 fb45 	bl	154d0 <__cyg_profile_func_enter>
  {
    *interrupt[interupt_port_].enable_falling_edge &= ~(1 << pin_->GetPin());
   11e46:	9b01      	ldr	r3, [sp, #4]
   11e48:	689a      	ldr	r2, [r3, #8]
   11e4a:	9b01      	ldr	r3, [sp, #4]
   11e4c:	689b      	ldr	r3, [r3, #8]
   11e4e:	681b      	ldr	r3, [r3, #0]
   11e50:	3330      	adds	r3, #48	; 0x30
   11e52:	681b      	ldr	r3, [r3, #0]
   11e54:	4610      	mov	r0, r2
   11e56:	4798      	blx	r3
   11e58:	4603      	mov	r3, r0
   11e5a:	461a      	mov	r2, r3
   11e5c:	2301      	movs	r3, #1
   11e5e:	4093      	lsls	r3, r2
   11e60:	43d8      	mvns	r0, r3
   11e62:	9b01      	ldr	r3, [sp, #4]
   11e64:	791b      	ldrb	r3, [r3, #4]
   11e66:	4619      	mov	r1, r3
   11e68:	4a10      	ldr	r2, [pc, #64]	; (11eac <Gpio::ClearEdgeFalling()+0x78>)
   11e6a:	460b      	mov	r3, r1
   11e6c:	009b      	lsls	r3, r3, #2
   11e6e:	440b      	add	r3, r1
   11e70:	009b      	lsls	r3, r3, #2
   11e72:	4413      	add	r3, r2
   11e74:	3310      	adds	r3, #16
   11e76:	681b      	ldr	r3, [r3, #0]
   11e78:	681a      	ldr	r2, [r3, #0]
   11e7a:	4604      	mov	r4, r0
   11e7c:	9b01      	ldr	r3, [sp, #4]
   11e7e:	791b      	ldrb	r3, [r3, #4]
   11e80:	4618      	mov	r0, r3
   11e82:	490a      	ldr	r1, [pc, #40]	; (11eac <Gpio::ClearEdgeFalling()+0x78>)
   11e84:	4603      	mov	r3, r0
   11e86:	009b      	lsls	r3, r3, #2
   11e88:	4403      	add	r3, r0
   11e8a:	009b      	lsls	r3, r3, #2
   11e8c:	440b      	add	r3, r1
   11e8e:	3310      	adds	r3, #16
   11e90:	681b      	ldr	r3, [r3, #0]
   11e92:	4022      	ands	r2, r4
   11e94:	601a      	str	r2, [r3, #0]
   11e96:	462b      	mov	r3, r5
   11e98:	4619      	mov	r1, r3
   11e9a:	4803      	ldr	r0, [pc, #12]	; (11ea8 <Gpio::ClearEdgeFalling()+0x74>)
   11e9c:	f003 fb2c 	bl	154f8 <__cyg_profile_func_exit>
  }
   11ea0:	bf00      	nop
   11ea2:	b003      	add	sp, #12
   11ea4:	bd30      	pop	{r4, r5, pc}
   11ea6:	bf00      	nop
   11ea8:	00011e35 	.word	0x00011e35
   11eac:	10000044 	.word	0x10000044

00011eb0 <SystemControllerInterface::SystemControllerInterface()>:
#include "L0_LowLevel/LPC40xx.h"
#include "utility/enum.hpp"
#include "utility/log.hpp"
#include "utility/macros.hpp"

class SystemControllerInterface
   11eb0:	b082      	sub	sp, #8
   11eb2:	9001      	str	r0, [sp, #4]
   11eb4:	4a03      	ldr	r2, [pc, #12]	; (11ec4 <SystemControllerInterface::SystemControllerInterface()+0x14>)
   11eb6:	9b01      	ldr	r3, [sp, #4]
   11eb8:	601a      	str	r2, [r3, #0]
   11eba:	9b01      	ldr	r3, [sp, #4]
   11ebc:	4618      	mov	r0, r3
   11ebe:	b002      	add	sp, #8
   11ec0:	4770      	bx	lr
   11ec2:	bf00      	nop
   11ec4:	00018aec 	.word	0x00018aec

00011ec8 <Lpc40xxSystemController::Lpc40xxSystemController()>:
  static constexpr uint32_t kDefaultIRCFrequency    = 12'000'000;
  static constexpr uint32_t kDefaultTimeout         = 1'000;  // ms

  inline static LPC_SC_TypeDef * system_controller = LPC_SC;

  constexpr Lpc40xxSystemController() {}
   11ec8:	b500      	push	{lr}
   11eca:	b083      	sub	sp, #12
   11ecc:	9001      	str	r0, [sp, #4]
   11ece:	9b01      	ldr	r3, [sp, #4]
   11ed0:	4618      	mov	r0, r3
   11ed2:	f7ff ffed 	bl	11eb0 <SystemControllerInterface::SystemControllerInterface()>
   11ed6:	4a04      	ldr	r2, [pc, #16]	; (11ee8 <Lpc40xxSystemController::Lpc40xxSystemController()+0x20>)
   11ed8:	9b01      	ldr	r3, [sp, #4]
   11eda:	601a      	str	r2, [r3, #0]
   11edc:	9b01      	ldr	r3, [sp, #4]
   11ede:	4618      	mov	r0, r3
   11ee0:	b003      	add	sp, #12
   11ee2:	f85d fb04 	ldr.w	pc, [sp], #4
   11ee6:	bf00      	nop
   11ee8:	00018ac8 	.word	0x00018ac8

00011eec <Lpc40xxSystemController::SetClockFrequency(unsigned char)>:

  uint32_t SetClockFrequency(uint8_t frequency_in_mhz) override
   11eec:	b500      	push	{lr}
   11eee:	b085      	sub	sp, #20
   11ef0:	9001      	str	r0, [sp, #4]
   11ef2:	460b      	mov	r3, r1
   11ef4:	f88d 3003 	strb.w	r3, [sp, #3]
  {
    uint32_t offset = 0;
   11ef8:	2300      	movs	r3, #0
   11efa:	9303      	str	r3, [sp, #12]
    SelectOscillatorSource(OscillatorSource::kIrc);
   11efc:	2100      	movs	r1, #0
   11efe:	9801      	ldr	r0, [sp, #4]
   11f00:	f000 f8ce 	bl	120a0 <Lpc40xxSystemController::SelectOscillatorSource(Lpc40xxSystemController::OscillatorSource)>
    if (frequency_in_mhz > 12)
   11f04:	f89d 3003 	ldrb.w	r3, [sp, #3]
   11f08:	2b0c      	cmp	r3, #12
   11f0a:	d916      	bls.n	11f3a <Lpc40xxSystemController::SetClockFrequency(unsigned char)+0x4e>
    {
      offset = SetMainPll(PllInput::kIrc, frequency_in_mhz);
   11f0c:	f89d 3003 	ldrb.w	r3, [sp, #3]
   11f10:	b29b      	uxth	r3, r3
   11f12:	461a      	mov	r2, r3
   11f14:	210c      	movs	r1, #12
   11f16:	9801      	ldr	r0, [sp, #4]
   11f18:	f000 f9ac 	bl	12274 <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)>
   11f1c:	9003      	str	r0, [sp, #12]
      SelectMainClockSource(MainClockSource::kPllClock);
   11f1e:	f44f 7180 	mov.w	r1, #256	; 0x100
   11f22:	9801      	ldr	r0, [sp, #4]
   11f24:	f000 f8d6 	bl	120d4 <Lpc40xxSystemController::SelectMainClockSource(Lpc40xxSystemController::MainClockSource)>
      speed_in_hertz = frequency_in_mhz * 1'000'000;
   11f28:	f89d 3003 	ldrb.w	r3, [sp, #3]
   11f2c:	4a10      	ldr	r2, [pc, #64]	; (11f70 <Lpc40xxSystemController::SetClockFrequency(unsigned char)+0x84>)
   11f2e:	fb02 f303 	mul.w	r3, r2, r3
   11f32:	461a      	mov	r2, r3
   11f34:	4b0f      	ldr	r3, [pc, #60]	; (11f74 <Lpc40xxSystemController::SetClockFrequency(unsigned char)+0x88>)
   11f36:	601a      	str	r2, [r3, #0]
   11f38:	e006      	b.n	11f48 <Lpc40xxSystemController::SetClockFrequency(unsigned char)+0x5c>
    }
    else
    {
      SelectMainClockSource(MainClockSource::kBaseClock);
   11f3a:	2100      	movs	r1, #0
   11f3c:	9801      	ldr	r0, [sp, #4]
   11f3e:	f000 f8c9 	bl	120d4 <Lpc40xxSystemController::SelectMainClockSource(Lpc40xxSystemController::MainClockSource)>
      speed_in_hertz = kDefaultIRCFrequency;
   11f42:	4b0c      	ldr	r3, [pc, #48]	; (11f74 <Lpc40xxSystemController::SetClockFrequency(unsigned char)+0x88>)
   11f44:	4a0c      	ldr	r2, [pc, #48]	; (11f78 <Lpc40xxSystemController::SetClockFrequency(unsigned char)+0x8c>)
   11f46:	601a      	str	r2, [r3, #0]
    }
    SetCpuClockDivider(kDivideInputBy1);
   11f48:	2101      	movs	r1, #1
   11f4a:	9801      	ldr	r0, [sp, #4]
   11f4c:	f000 fa4a 	bl	123e4 <Lpc40xxSystemController::SetCpuClockDivider(unsigned char)>
    SetPeripheralClockDivider(kDivideInputBy1);
   11f50:	9b01      	ldr	r3, [sp, #4]
   11f52:	681b      	ldr	r3, [r3, #0]
   11f54:	3304      	adds	r3, #4
   11f56:	681b      	ldr	r3, [r3, #0]
   11f58:	2101      	movs	r1, #1
   11f5a:	9801      	ldr	r0, [sp, #4]
   11f5c:	4798      	blx	r3
    SetEmcClockDivider(EmcDivider::kSameSpeedAsCpu);
   11f5e:	2100      	movs	r1, #0
   11f60:	9801      	ldr	r0, [sp, #4]
   11f62:	f000 fa73 	bl	1244c <Lpc40xxSystemController::SetEmcClockDivider(Lpc40xxSystemController::EmcDivider)>
    return offset;
   11f66:	9b03      	ldr	r3, [sp, #12]
  }
   11f68:	4618      	mov	r0, r3
   11f6a:	b005      	add	sp, #20
   11f6c:	f85d fb04 	ldr.w	pc, [sp], #4
   11f70:	000f4240 	.word	0x000f4240
   11f74:	10000070 	.word	0x10000070
   11f78:	00b71b00 	.word	0x00b71b00

00011f7c <Lpc40xxSystemController::SetPeripheralClockDivider(unsigned char)>:

  void SetPeripheralClockDivider(uint8_t peripheral_divider) override
   11f7c:	b500      	push	{lr}
   11f7e:	b083      	sub	sp, #12
   11f80:	9001      	str	r0, [sp, #4]
   11f82:	460b      	mov	r3, r1
   11f84:	f88d 3003 	strb.w	r3, [sp, #3]
  {
    SJ2_ASSERT_FATAL(peripheral_divider <= 4, "Divider mustn't exceed 32");
   11f88:	f89d 3003 	ldrb.w	r3, [sp, #3]
   11f8c:	2b04      	cmp	r3, #4
   11f8e:	d90d      	bls.n	11fac <Lpc40xxSystemController::SetPeripheralClockDivider(unsigned char)+0x30>
   11f90:	23ae      	movs	r3, #174	; 0xae
   11f92:	4a0b      	ldr	r2, [pc, #44]	; (11fc0 <Lpc40xxSystemController::SetPeripheralClockDivider(unsigned char)+0x44>)
   11f94:	490b      	ldr	r1, [pc, #44]	; (11fc4 <Lpc40xxSystemController::SetPeripheralClockDivider(unsigned char)+0x48>)
   11f96:	480c      	ldr	r0, [pc, #48]	; (11fc8 <Lpc40xxSystemController::SetPeripheralClockDivider(unsigned char)+0x4c>)
   11f98:	f004 fcf4 	bl	16984 <printf>
   11f9c:	480b      	ldr	r0, [pc, #44]	; (11fcc <Lpc40xxSystemController::SetPeripheralClockDivider(unsigned char)+0x50>)
   11f9e:	f003 fa67 	bl	15470 <puts>
   11fa2:	2100      	movs	r1, #0
   11fa4:	2001      	movs	r0, #1
   11fa6:	f7fe ff1f 	bl	10de8 <debug::PrintBacktrace(bool, void*)>
   11faa:	e7fe      	b.n	11faa <Lpc40xxSystemController::SetPeripheralClockDivider(unsigned char)+0x2e>
    system_controller->PCLKSEL = peripheral_divider;
   11fac:	4b08      	ldr	r3, [pc, #32]	; (11fd0 <Lpc40xxSystemController::SetPeripheralClockDivider(unsigned char)+0x54>)
   11fae:	681b      	ldr	r3, [r3, #0]
   11fb0:	f89d 2003 	ldrb.w	r2, [sp, #3]
   11fb4:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
  }
   11fb8:	bf00      	nop
   11fba:	b003      	add	sp, #12
   11fbc:	f85d fb04 	ldr.w	pc, [sp], #4
   11fc0:	00018c1c 	.word	0x00018c1c
   11fc4:	00018918 	.word	0x00018918
   11fc8:	000184c4 	.word	0x000184c4
   11fcc:	00018564 	.word	0x00018564
   11fd0:	1000006c 	.word	0x1000006c

00011fd4 <Lpc40xxSystemController::GetPeripheralClockDivider() const>:

  uint32_t GetPeripheralClockDivider() const override
   11fd4:	b082      	sub	sp, #8
   11fd6:	9001      	str	r0, [sp, #4]
  {
#if defined(HOST_TEST)
    return 1;
#else
    return system_controller->PCLKSEL;
   11fd8:	4b03      	ldr	r3, [pc, #12]	; (11fe8 <Lpc40xxSystemController::GetPeripheralClockDivider() const+0x14>)
   11fda:	681b      	ldr	r3, [r3, #0]
   11fdc:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
#endif
  }
   11fe0:	4618      	mov	r0, r3
   11fe2:	b002      	add	sp, #8
   11fe4:	4770      	bx	lr
   11fe6:	bf00      	nop
   11fe8:	1000006c 	.word	0x1000006c

00011fec <Lpc40xxSystemController::GetSystemFrequency() const>:

  uint32_t GetSystemFrequency() const override
   11fec:	b082      	sub	sp, #8
   11fee:	9001      	str	r0, [sp, #4]
  {
#if defined(HOST_TEST)
    return config::kSystemClockRate;
#else
    return speed_in_hertz;
   11ff0:	4b02      	ldr	r3, [pc, #8]	; (11ffc <Lpc40xxSystemController::GetSystemFrequency() const+0x10>)
   11ff2:	681b      	ldr	r3, [r3, #0]
#endif
  }
   11ff4:	4618      	mov	r0, r3
   11ff6:	b002      	add	sp, #8
   11ff8:	4770      	bx	lr
   11ffa:	bf00      	nop
   11ffc:	10000070 	.word	0x10000070

00012000 <Lpc40xxSystemController::GetPeripheralFrequency() const>:

  uint32_t GetPeripheralFrequency() const override
   12000:	b500      	push	{lr}
   12002:	b085      	sub	sp, #20
   12004:	9001      	str	r0, [sp, #4]
  {
    uint32_t peripheral_clock_divider = GetPeripheralClockDivider();
   12006:	9b01      	ldr	r3, [sp, #4]
   12008:	681b      	ldr	r3, [r3, #0]
   1200a:	3308      	adds	r3, #8
   1200c:	681b      	ldr	r3, [r3, #0]
   1200e:	9801      	ldr	r0, [sp, #4]
   12010:	4798      	blx	r3
   12012:	9002      	str	r0, [sp, #8]
    uint32_t result = 0;  // return 0 if peripheral_clock_divider == 0
   12014:	2300      	movs	r3, #0
   12016:	9303      	str	r3, [sp, #12]
    if (peripheral_clock_divider != 0)
   12018:	9b02      	ldr	r3, [sp, #8]
   1201a:	2b00      	cmp	r3, #0
   1201c:	d00a      	beq.n	12034 <Lpc40xxSystemController::GetPeripheralFrequency() const+0x34>
    {
      result = GetSystemFrequency() / peripheral_clock_divider;
   1201e:	9b01      	ldr	r3, [sp, #4]
   12020:	681b      	ldr	r3, [r3, #0]
   12022:	330c      	adds	r3, #12
   12024:	681b      	ldr	r3, [r3, #0]
   12026:	9801      	ldr	r0, [sp, #4]
   12028:	4798      	blx	r3
   1202a:	4602      	mov	r2, r0
   1202c:	9b02      	ldr	r3, [sp, #8]
   1202e:	fbb2 f3f3 	udiv	r3, r2, r3
   12032:	9303      	str	r3, [sp, #12]
    }
    return result;
   12034:	9b03      	ldr	r3, [sp, #12]
  }
   12036:	4618      	mov	r0, r3
   12038:	b005      	add	sp, #20
   1203a:	f85d fb04 	ldr.w	pc, [sp], #4
   1203e:	Address 0x000000000001203e is out of bounds.


00012040 <Lpc40xxSystemController::PowerUpPeripheral(SystemControllerInterface::PeripheralID const&)>:

  void PowerUpPeripheral(const PeripheralID & peripheral_select) override
   12040:	b084      	sub	sp, #16
   12042:	9001      	str	r0, [sp, #4]
   12044:	9100      	str	r1, [sp, #0]
  {
    auto power_connection_with_enabled_peripheral =
        system_controller->PCONP | (1 << peripheral_select.device_id);
   12046:	4b09      	ldr	r3, [pc, #36]	; (1206c <Lpc40xxSystemController::PowerUpPeripheral(SystemControllerInterface::PeripheralID const&)+0x2c>)
   12048:	681b      	ldr	r3, [r3, #0]
   1204a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
   1204e:	9a00      	ldr	r2, [sp, #0]
   12050:	6812      	ldr	r2, [r2, #0]
   12052:	2101      	movs	r1, #1
   12054:	fa01 f202 	lsl.w	r2, r1, r2
   12058:	4313      	orrs	r3, r2
   1205a:	9303      	str	r3, [sp, #12]

    system_controller->PCONP = power_connection_with_enabled_peripheral;
   1205c:	4b03      	ldr	r3, [pc, #12]	; (1206c <Lpc40xxSystemController::PowerUpPeripheral(SystemControllerInterface::PeripheralID const&)+0x2c>)
   1205e:	681b      	ldr	r3, [r3, #0]
   12060:	9a03      	ldr	r2, [sp, #12]
   12062:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  }
   12066:	bf00      	nop
   12068:	b004      	add	sp, #16
   1206a:	4770      	bx	lr
   1206c:	1000006c 	.word	0x1000006c

00012070 <Lpc40xxSystemController::PowerDownPeripheral(SystemControllerInterface::PeripheralID const&)>:
  void PowerDownPeripheral(const PeripheralID & peripheral_select) override
   12070:	b084      	sub	sp, #16
   12072:	9001      	str	r0, [sp, #4]
   12074:	9100      	str	r1, [sp, #0]
  {
    auto power_connection_without_enabled_peripheral =
        system_controller->PCONP & (1 << peripheral_select.device_id);
   12076:	4b09      	ldr	r3, [pc, #36]	; (1209c <Lpc40xxSystemController::PowerDownPeripheral(SystemControllerInterface::PeripheralID const&)+0x2c>)
   12078:	681b      	ldr	r3, [r3, #0]
   1207a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
   1207e:	9a00      	ldr	r2, [sp, #0]
   12080:	6812      	ldr	r2, [r2, #0]
   12082:	2101      	movs	r1, #1
   12084:	fa01 f202 	lsl.w	r2, r1, r2
   12088:	4013      	ands	r3, r2
   1208a:	9303      	str	r3, [sp, #12]

    system_controller->PCONP = power_connection_without_enabled_peripheral;
   1208c:	4b03      	ldr	r3, [pc, #12]	; (1209c <Lpc40xxSystemController::PowerDownPeripheral(SystemControllerInterface::PeripheralID const&)+0x2c>)
   1208e:	681b      	ldr	r3, [r3, #0]
   12090:	9a03      	ldr	r2, [sp, #12]
   12092:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  }
   12096:	bf00      	nop
   12098:	b004      	add	sp, #16
   1209a:	4770      	bx	lr
   1209c:	1000006c 	.word	0x1000006c

000120a0 <Lpc40xxSystemController::SelectOscillatorSource(Lpc40xxSystemController::OscillatorSource)>:

 private:
  void SelectOscillatorSource(OscillatorSource source)
   120a0:	b084      	sub	sp, #16
   120a2:	9001      	str	r0, [sp, #4]
   120a4:	460b      	mov	r3, r1
   120a6:	f8ad 3002 	strh.w	r3, [sp, #2]
  {
    uint32_t source_bit = static_cast<uint32_t>(source);
   120aa:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   120ae:	9303      	str	r3, [sp, #12]
    system_controller->CLKSRCSEL =
        (system_controller->CLKSRCSEL & ~(kOscillatorSelect)) | source_bit;
   120b0:	4b07      	ldr	r3, [pc, #28]	; (120d0 <Lpc40xxSystemController::SelectOscillatorSource(Lpc40xxSystemController::OscillatorSource)+0x30>)
   120b2:	681b      	ldr	r3, [r3, #0]
   120b4:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
   120b8:	f023 0101 	bic.w	r1, r3, #1
    system_controller->CLKSRCSEL =
   120bc:	4b04      	ldr	r3, [pc, #16]	; (120d0 <Lpc40xxSystemController::SelectOscillatorSource(Lpc40xxSystemController::OscillatorSource)+0x30>)
   120be:	681b      	ldr	r3, [r3, #0]
        (system_controller->CLKSRCSEL & ~(kOscillatorSelect)) | source_bit;
   120c0:	9a03      	ldr	r2, [sp, #12]
   120c2:	430a      	orrs	r2, r1
    system_controller->CLKSRCSEL =
   120c4:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
  }
   120c8:	bf00      	nop
   120ca:	b004      	add	sp, #16
   120cc:	4770      	bx	lr
   120ce:	bf00      	nop
   120d0:	1000006c 	.word	0x1000006c

000120d4 <Lpc40xxSystemController::SelectMainClockSource(Lpc40xxSystemController::MainClockSource)>:

  void SelectMainClockSource(MainClockSource source)
   120d4:	b082      	sub	sp, #8
   120d6:	9001      	str	r0, [sp, #4]
   120d8:	460b      	mov	r3, r1
   120da:	f8ad 3002 	strh.w	r3, [sp, #2]
  {
    system_controller->CCLKSEL =
        (system_controller->CCLKSEL & ~(kBaseClockSelect)) |
   120de:	4b08      	ldr	r3, [pc, #32]	; (12100 <Lpc40xxSystemController::SelectMainClockSource(Lpc40xxSystemController::MainClockSource)+0x2c>)
   120e0:	681b      	ldr	r3, [r3, #0]
   120e2:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   120e6:	f423 7180 	bic.w	r1, r3, #256	; 0x100
        static_cast<uint32_t>(source);
   120ea:	f8bd 2002 	ldrh.w	r2, [sp, #2]
    system_controller->CCLKSEL =
   120ee:	4b04      	ldr	r3, [pc, #16]	; (12100 <Lpc40xxSystemController::SelectMainClockSource(Lpc40xxSystemController::MainClockSource)+0x2c>)
   120f0:	681b      	ldr	r3, [r3, #0]
        (system_controller->CCLKSEL & ~(kBaseClockSelect)) |
   120f2:	430a      	orrs	r2, r1
    system_controller->CCLKSEL =
   120f4:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
  }
   120f8:	bf00      	nop
   120fa:	b002      	add	sp, #8
   120fc:	4770      	bx	lr
   120fe:	bf00      	nop
   12100:	1000006c 	.word	0x1000006c

00012104 <Lpc40xxSystemController::SelectUsbClockSource(Lpc40xxSystemController::UsbSource)>:

  void SelectUsbClockSource(UsbSource usb_clock)
   12104:	b082      	sub	sp, #8
   12106:	9001      	str	r0, [sp, #4]
   12108:	460b      	mov	r3, r1
   1210a:	f8ad 3002 	strh.w	r3, [sp, #2]
  {
    system_controller->USBCLKSEL =
        (system_controller->USBCLKSEL & ~(kUsbClockSource)) |
   1210e:	4b08      	ldr	r3, [pc, #32]	; (12130 <Lpc40xxSystemController::SelectUsbClockSource(Lpc40xxSystemController::UsbSource)+0x2c>)
   12110:	681b      	ldr	r3, [r3, #0]
   12112:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
   12116:	f423 7140 	bic.w	r1, r3, #768	; 0x300
        static_cast<uint32_t>(usb_clock);
   1211a:	f8bd 2002 	ldrh.w	r2, [sp, #2]
    system_controller->USBCLKSEL =
   1211e:	4b04      	ldr	r3, [pc, #16]	; (12130 <Lpc40xxSystemController::SelectUsbClockSource(Lpc40xxSystemController::UsbSource)+0x2c>)
   12120:	681b      	ldr	r3, [r3, #0]
        (system_controller->USBCLKSEL & ~(kUsbClockSource)) |
   12122:	430a      	orrs	r2, r1
    system_controller->USBCLKSEL =
   12124:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
  }
   12128:	bf00      	nop
   1212a:	b002      	add	sp, #8
   1212c:	4770      	bx	lr
   1212e:	bf00      	nop
   12130:	1000006c 	.word	0x1000006c

00012134 <Lpc40xxSystemController::SelectSpifiClockSource(Lpc40xxSystemController::SpifiSource)>:

  void SelectSpifiClockSource(SpifiSource spifi_clock)
   12134:	b082      	sub	sp, #8
   12136:	9001      	str	r0, [sp, #4]
   12138:	460b      	mov	r3, r1
   1213a:	f8ad 3002 	strh.w	r3, [sp, #2]
  {
    system_controller->SPIFISEL =
        (system_controller->SPIFISEL & ~(kSpifiClockSource)) |
   1213e:	4b08      	ldr	r3, [pc, #32]	; (12160 <Lpc40xxSystemController::SelectSpifiClockSource(Lpc40xxSystemController::SpifiSource)+0x2c>)
   12140:	681b      	ldr	r3, [r3, #0]
   12142:	f8d3 31b4 	ldr.w	r3, [r3, #436]	; 0x1b4
   12146:	f423 7140 	bic.w	r1, r3, #768	; 0x300
        static_cast<uint32_t>(spifi_clock);
   1214a:	f8bd 2002 	ldrh.w	r2, [sp, #2]
    system_controller->SPIFISEL =
   1214e:	4b04      	ldr	r3, [pc, #16]	; (12160 <Lpc40xxSystemController::SelectSpifiClockSource(Lpc40xxSystemController::SpifiSource)+0x2c>)
   12150:	681b      	ldr	r3, [r3, #0]
        (system_controller->SPIFISEL & ~(kSpifiClockSource)) |
   12152:	430a      	orrs	r2, r1
    system_controller->SPIFISEL =
   12154:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
  }
   12158:	bf00      	nop
   1215a:	b002      	add	sp, #8
   1215c:	4770      	bx	lr
   1215e:	bf00      	nop
   12160:	1000006c 	.word	0x1000006c

00012164 <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)>:

  uint32_t CalculatePll(PllInput input_frequency, uint16_t desired_speed_in_mhz)
   12164:	b500      	push	{lr}
   12166:	b087      	sub	sp, #28
   12168:	9001      	str	r0, [sp, #4]
   1216a:	460b      	mov	r3, r1
   1216c:	f8ad 3002 	strh.w	r3, [sp, #2]
   12170:	4613      	mov	r3, r2
   12172:	f8ad 3000 	strh.w	r3, [sp]
  {
    SJ2_ASSERT_FATAL(desired_speed_in_mhz < 384 && desired_speed_in_mhz > 12,
   12176:	f8bd 3000 	ldrh.w	r3, [sp]
   1217a:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
   1217e:	d203      	bcs.n	12188 <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)+0x24>
   12180:	f8bd 3000 	ldrh.w	r3, [sp]
   12184:	2b0c      	cmp	r3, #12
   12186:	d80d      	bhi.n	121a4 <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)+0x40>
   12188:	23ff      	movs	r3, #255	; 0xff
   1218a:	4a34      	ldr	r2, [pc, #208]	; (1225c <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)+0xf8>)
   1218c:	4934      	ldr	r1, [pc, #208]	; (12260 <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)+0xfc>)
   1218e:	4835      	ldr	r0, [pc, #212]	; (12264 <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)+0x100>)
   12190:	f004 fbf8 	bl	16984 <printf>
   12194:	4834      	ldr	r0, [pc, #208]	; (12268 <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)+0x104>)
   12196:	f003 f96b 	bl	15470 <puts>
   1219a:	2100      	movs	r1, #0
   1219c:	2001      	movs	r0, #1
   1219e:	f7fe fe23 	bl	10de8 <debug::PrintBacktrace(bool, void*)>
   121a2:	e7fe      	b.n	121a2 <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)+0x3e>
                     "Frequency must be lower than 384 MHz"
                     "and greater than or equal to 12 MHz");
    bool calculating = true;
   121a4:	2301      	movs	r3, #1
   121a6:	f88d 3017 	strb.w	r3, [sp, #23]
    uint32_t multiplier_value;
    if ((desired_speed_in_mhz % static_cast<uint16_t>(input_frequency)) >= 1)
   121aa:	f8bd 3000 	ldrh.w	r3, [sp]
   121ae:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   121b2:	fbb3 f1f2 	udiv	r1, r3, r2
   121b6:	fb02 f201 	mul.w	r2, r2, r1
   121ba:	1a9b      	subs	r3, r3, r2
   121bc:	b29b      	uxth	r3, r3
   121be:	2b00      	cmp	r3, #0
   121c0:	d009      	beq.n	121d6 <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)+0x72>
    {
      multiplier_value = static_cast<uint32_t>(
          (desired_speed_in_mhz / static_cast<uint16_t>(input_frequency)) + 1);
   121c2:	f8bd 2000 	ldrh.w	r2, [sp]
   121c6:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   121ca:	fbb2 f3f3 	udiv	r3, r2, r3
   121ce:	b29b      	uxth	r3, r3
   121d0:	3301      	adds	r3, #1
      multiplier_value = static_cast<uint32_t>(
   121d2:	9304      	str	r3, [sp, #16]
   121d4:	e007      	b.n	121e6 <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)+0x82>
    }
    else
    {
      multiplier_value = static_cast<uint32_t>(
          desired_speed_in_mhz / static_cast<uint16_t>(input_frequency));
   121d6:	f8bd 2000 	ldrh.w	r2, [sp]
   121da:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   121de:	fbb2 f3f3 	udiv	r3, r2, r3
   121e2:	b29b      	uxth	r3, r3
      multiplier_value = static_cast<uint32_t>(
   121e4:	9304      	str	r3, [sp, #16]
    }
    uint16_t divider_value = 1;
   121e6:	2301      	movs	r3, #1
   121e8:	f8ad 300e 	strh.w	r3, [sp, #14]
    while (calculating)
   121ec:	f89d 3017 	ldrb.w	r3, [sp, #23]
   121f0:	2b00      	cmp	r3, #0
   121f2:	d02e      	beq.n	12252 <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)+0xee>
    {
      uint16_t current_controlled_oscillator_frequency;
      current_controlled_oscillator_frequency = static_cast<uint16_t>(
   121f4:	9b04      	ldr	r3, [sp, #16]
   121f6:	b29b      	uxth	r3, r3
   121f8:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   121fc:	fb12 f303 	smulbb	r3, r2, r3
   12200:	b29b      	uxth	r3, r3
   12202:	f8bd 200e 	ldrh.w	r2, [sp, #14]
   12206:	fb12 f303 	smulbb	r3, r2, r3
   1220a:	b29b      	uxth	r3, r3
   1220c:	005b      	lsls	r3, r3, #1
   1220e:	f8ad 300c 	strh.w	r3, [sp, #12]
          (static_cast<uint16_t>(input_frequency) * multiplier_value * 2) *
          divider_value);
      if (current_controlled_oscillator_frequency >= 156)
   12212:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   12216:	2b9b      	cmp	r3, #155	; 0x9b
   12218:	d903      	bls.n	12222 <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)+0xbe>
      {
        calculating = false;
   1221a:	2300      	movs	r3, #0
   1221c:	f88d 3017 	strb.w	r3, [sp, #23]
   12220:	e7e4      	b.n	121ec <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)+0x88>
      }
      else
      {
        divider_value = static_cast<uint16_t>(divider_value * 2);
   12222:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   12226:	005b      	lsls	r3, r3, #1
   12228:	f8ad 300e 	strh.w	r3, [sp, #14]
        SJ2_ASSERT_FATAL(divider_value < 8,
   1222c:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   12230:	2b07      	cmp	r3, #7
   12232:	d9db      	bls.n	121ec <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)+0x88>
   12234:	f240 131b 	movw	r3, #283	; 0x11b
   12238:	4a08      	ldr	r2, [pc, #32]	; (1225c <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)+0xf8>)
   1223a:	490c      	ldr	r1, [pc, #48]	; (1226c <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)+0x108>)
   1223c:	480c      	ldr	r0, [pc, #48]	; (12270 <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)+0x10c>)
   1223e:	f004 fba1 	bl	16984 <printf>
   12242:	4809      	ldr	r0, [pc, #36]	; (12268 <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)+0x104>)
   12244:	f003 f914 	bl	15470 <puts>
   12248:	2100      	movs	r1, #0
   1224a:	2001      	movs	r0, #1
   1224c:	f7fe fdcc 	bl	10de8 <debug::PrintBacktrace(bool, void*)>
   12250:	e7fe      	b.n	12250 <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)+0xec>
                         "PLL divider value went out of bounds");
      }
    }

    return multiplier_value;
   12252:	9b04      	ldr	r3, [sp, #16]
  }
   12254:	4618      	mov	r0, r3
   12256:	b007      	add	sp, #28
   12258:	f85d fb04 	ldr.w	pc, [sp], #4
   1225c:	00018cc4 	.word	0x00018cc4
   12260:	00018930 	.word	0x00018930
   12264:	0001857c 	.word	0x0001857c
   12268:	00018564 	.word	0x00018564
   1226c:	00018948 	.word	0x00018948
   12270:	0001866c 	.word	0x0001866c

00012274 <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)>:

  uint32_t SetMainPll(PllInput input_frequency, uint16_t desired_speed_in_mhz)
   12274:	b510      	push	{r4, lr}
   12276:	b08a      	sub	sp, #40	; 0x28
   12278:	9001      	str	r0, [sp, #4]
   1227a:	460b      	mov	r3, r1
   1227c:	f8ad 3002 	strh.w	r3, [sp, #2]
   12280:	4613      	mov	r3, r2
   12282:	f8ad 3000 	strh.w	r3, [sp]
  {
    uint16_t divider_value = 1;
   12286:	2301      	movs	r3, #1
   12288:	f8ad 301a 	strh.w	r3, [sp, #26]
    uint64_t timeout_time  = Milliseconds() + kDefaultTimeout;
   1228c:	f7fe f91e 	bl	104cc <Milliseconds()>
   12290:	460a      	mov	r2, r1
   12292:	4601      	mov	r1, r0
   12294:	f511 737a 	adds.w	r3, r1, #1000	; 0x3e8
   12298:	f142 0400 	adc.w	r4, r2, #0
   1229c:	e9cd 3404 	strd	r3, r4, [sp, #16]
    uint64_t current_time  = Milliseconds();
   122a0:	f7fe f914 	bl	104cc <Milliseconds()>
   122a4:	e9cd 0108 	strd	r0, r1, [sp, #32]
    uint32_t multiplier_value =
        CalculatePll(input_frequency, desired_speed_in_mhz);
   122a8:	f8bd 2000 	ldrh.w	r2, [sp]
   122ac:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   122b0:	4619      	mov	r1, r3
   122b2:	9801      	ldr	r0, [sp, #4]
   122b4:	f7ff ff56 	bl	12164 <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)>
   122b8:	9003      	str	r0, [sp, #12]
    uint32_t actual_speed =
        static_cast<uint32_t>(input_frequency) * multiplier_value;
   122ba:	f8bd 2002 	ldrh.w	r2, [sp, #2]
    uint32_t actual_speed =
   122be:	9b03      	ldr	r3, [sp, #12]
   122c0:	fb02 f303 	mul.w	r3, r2, r3
   122c4:	9307      	str	r3, [sp, #28]
    // TO DO: use registers to retreive values
    SelectOscillatorSource(OscillatorSource::kIrc);
   122c6:	2100      	movs	r1, #0
   122c8:	9801      	ldr	r0, [sp, #4]
   122ca:	f7ff fee9 	bl	120a0 <Lpc40xxSystemController::SelectOscillatorSource(Lpc40xxSystemController::OscillatorSource)>
    SelectMainClockSource(MainClockSource::kBaseClock);
   122ce:	2100      	movs	r1, #0
   122d0:	9801      	ldr	r0, [sp, #4]
   122d2:	f7ff feff 	bl	120d4 <Lpc40xxSystemController::SelectMainClockSource(Lpc40xxSystemController::MainClockSource)>
    SelectUsbClockSource(UsbSource::kBaseClock);
   122d6:	2100      	movs	r1, #0
   122d8:	9801      	ldr	r0, [sp, #4]
   122da:	f7ff ff13 	bl	12104 <Lpc40xxSystemController::SelectUsbClockSource(Lpc40xxSystemController::UsbSource)>
    SelectSpifiClockSource(SpifiSource::kBaseClock);
   122de:	2100      	movs	r1, #0
   122e0:	9801      	ldr	r0, [sp, #4]
   122e2:	f7ff ff27 	bl	12134 <Lpc40xxSystemController::SelectSpifiClockSource(Lpc40xxSystemController::SpifiSource)>
    // must subtract 1 from multiplier value as specified in datasheet
    system_controller->PLL0CFG =
        (system_controller->PLL0CFG & ~kClearPllMultiplier) |
   122e6:	4b3a      	ldr	r3, [pc, #232]	; (123d0 <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0x15c>)
   122e8:	681b      	ldr	r3, [r3, #0]
   122ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   122ee:	f023 011f 	bic.w	r1, r3, #31
        (multiplier_value - 1);
   122f2:	9b03      	ldr	r3, [sp, #12]
   122f4:	1e5a      	subs	r2, r3, #1
    system_controller->PLL0CFG =
   122f6:	4b36      	ldr	r3, [pc, #216]	; (123d0 <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0x15c>)
   122f8:	681b      	ldr	r3, [r3, #0]
        (system_controller->PLL0CFG & ~kClearPllMultiplier) |
   122fa:	430a      	orrs	r2, r1
    system_controller->PLL0CFG =
   122fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    system_controller->PLL0CFG =
        (system_controller->PLL0CFG & ~kClearPllDivider) | (divider_value << 5);
   12300:	4b33      	ldr	r3, [pc, #204]	; (123d0 <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0x15c>)
   12302:	681b      	ldr	r3, [r3, #0]
   12304:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   12308:	f023 0260 	bic.w	r2, r3, #96	; 0x60
   1230c:	f8bd 301a 	ldrh.w	r3, [sp, #26]
   12310:	015b      	lsls	r3, r3, #5
   12312:	4619      	mov	r1, r3
    system_controller->PLL0CFG =
   12314:	4b2e      	ldr	r3, [pc, #184]	; (123d0 <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0x15c>)
   12316:	681b      	ldr	r3, [r3, #0]
        (system_controller->PLL0CFG & ~kClearPllDivider) | (divider_value << 5);
   12318:	430a      	orrs	r2, r1
    system_controller->PLL0CFG =
   1231a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    system_controller->PLL0CON |= kEnablePll;
   1231e:	4b2c      	ldr	r3, [pc, #176]	; (123d0 <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0x15c>)
   12320:	681b      	ldr	r3, [r3, #0]
   12322:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
   12326:	4b2a      	ldr	r3, [pc, #168]	; (123d0 <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0x15c>)
   12328:	681b      	ldr	r3, [r3, #0]
   1232a:	f042 0201 	orr.w	r2, r2, #1
   1232e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    // nessecary feed sequence to ensure the changes are intentional
    system_controller->PLL0FEED = 0xAA;
   12332:	4b27      	ldr	r3, [pc, #156]	; (123d0 <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0x15c>)
   12334:	681b      	ldr	r3, [r3, #0]
   12336:	22aa      	movs	r2, #170	; 0xaa
   12338:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    system_controller->PLL0FEED = 0x55;
   1233c:	4b24      	ldr	r3, [pc, #144]	; (123d0 <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0x15c>)
   1233e:	681b      	ldr	r3, [r3, #0]
   12340:	2255      	movs	r2, #85	; 0x55
   12342:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    while (!(system_controller->PLL0STAT >> kPlock & 1) &&
   12346:	4b22      	ldr	r3, [pc, #136]	; (123d0 <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0x15c>)
   12348:	681b      	ldr	r3, [r3, #0]
   1234a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   1234e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
   12352:	2b00      	cmp	r3, #0
   12354:	d109      	bne.n	1236a <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0xf6>
   12356:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
   1235a:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
   1235e:	42a2      	cmp	r2, r4
   12360:	bf08      	it	eq
   12362:	4299      	cmpeq	r1, r3
   12364:	d201      	bcs.n	1236a <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0xf6>
   12366:	2301      	movs	r3, #1
   12368:	e000      	b.n	1236c <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0xf8>
   1236a:	2300      	movs	r3, #0
   1236c:	2b00      	cmp	r3, #0
   1236e:	d004      	beq.n	1237a <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0x106>
           (current_time < timeout_time))
    {
      current_time = Milliseconds();
   12370:	f7fe f8ac 	bl	104cc <Milliseconds()>
   12374:	e9cd 0108 	strd	r0, r1, [sp, #32]
    while (!(system_controller->PLL0STAT >> kPlock & 1) &&
   12378:	e7e5      	b.n	12346 <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0xd2>
    }
    if (!(system_controller->PLL0STAT >> kPlock & 1) &&
   1237a:	4b15      	ldr	r3, [pc, #84]	; (123d0 <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0x15c>)
   1237c:	681b      	ldr	r3, [r3, #0]
   1237e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   12382:	f403 6380 	and.w	r3, r3, #1024	; 0x400
   12386:	2b00      	cmp	r3, #0
   12388:	d109      	bne.n	1239e <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0x12a>
   1238a:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
   1238e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
   12392:	42a2      	cmp	r2, r4
   12394:	bf08      	it	eq
   12396:	4299      	cmpeq	r1, r3
   12398:	d301      	bcc.n	1239e <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0x12a>
   1239a:	2301      	movs	r3, #1
   1239c:	e000      	b.n	123a0 <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0x12c>
   1239e:	2300      	movs	r3, #0
   123a0:	2b00      	cmp	r3, #0
   123a2:	d00e      	beq.n	123c2 <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0x14e>
        (current_time >= timeout_time))
    {
      SJ2_ASSERT_FATAL(false,
   123a4:	f240 1343 	movw	r3, #323	; 0x143
   123a8:	4a0a      	ldr	r2, [pc, #40]	; (123d4 <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0x160>)
   123aa:	490b      	ldr	r1, [pc, #44]	; (123d8 <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0x164>)
   123ac:	480b      	ldr	r0, [pc, #44]	; (123dc <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0x168>)
   123ae:	f004 fae9 	bl	16984 <printf>
   123b2:	480b      	ldr	r0, [pc, #44]	; (123e0 <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0x16c>)
   123b4:	f003 f85c 	bl	15470 <puts>
   123b8:	2100      	movs	r1, #0
   123ba:	2001      	movs	r0, #1
   123bc:	f7fe fd14 	bl	10de8 <debug::PrintBacktrace(bool, void*)>
   123c0:	e7fe      	b.n	123c0 <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0x14c>
                       "PLL lock could not be established before timeout");
      actual_speed = kDefaultIRCFrequency;
    }
    return (actual_speed - desired_speed_in_mhz);
   123c2:	f8bd 3000 	ldrh.w	r3, [sp]
   123c6:	9a07      	ldr	r2, [sp, #28]
   123c8:	1ad3      	subs	r3, r2, r3
  }
   123ca:	4618      	mov	r0, r3
   123cc:	b00a      	add	sp, #40	; 0x28
   123ce:	bd10      	pop	{r4, pc}
   123d0:	1000006c 	.word	0x1000006c
   123d4:	00018c68 	.word	0x00018c68
   123d8:	00018960 	.word	0x00018960
   123dc:	00018714 	.word	0x00018714
   123e0:	00018564 	.word	0x00018564

000123e4 <Lpc40xxSystemController::SetCpuClockDivider(unsigned char)>:
                       "PLL lock could not be established before timeout");
    }
    return (actual_speed - desired_speed_in_mhz);
  }

  void SetCpuClockDivider(uint8_t cpu_divider)
   123e4:	b500      	push	{lr}
   123e6:	b083      	sub	sp, #12
   123e8:	9001      	str	r0, [sp, #4]
   123ea:	460b      	mov	r3, r1
   123ec:	f88d 3003 	strb.w	r3, [sp, #3]
  {
    SJ2_ASSERT_FATAL(cpu_divider < 32, "Divider mustn't exceed 32");
   123f0:	f89d 3003 	ldrb.w	r3, [sp, #3]
   123f4:	2b1f      	cmp	r3, #31
   123f6:	d90e      	bls.n	12416 <Lpc40xxSystemController::SetCpuClockDivider(unsigned char)+0x32>
   123f8:	f240 136f 	movw	r3, #367	; 0x16f
   123fc:	4a0e      	ldr	r2, [pc, #56]	; (12438 <Lpc40xxSystemController::SetCpuClockDivider(unsigned char)+0x54>)
   123fe:	490f      	ldr	r1, [pc, #60]	; (1243c <Lpc40xxSystemController::SetCpuClockDivider(unsigned char)+0x58>)
   12400:	480f      	ldr	r0, [pc, #60]	; (12440 <Lpc40xxSystemController::SetCpuClockDivider(unsigned char)+0x5c>)
   12402:	f004 fabf 	bl	16984 <printf>
   12406:	480f      	ldr	r0, [pc, #60]	; (12444 <Lpc40xxSystemController::SetCpuClockDivider(unsigned char)+0x60>)
   12408:	f003 f832 	bl	15470 <puts>
   1240c:	2100      	movs	r1, #0
   1240e:	2001      	movs	r0, #1
   12410:	f7fe fcea 	bl	10de8 <debug::PrintBacktrace(bool, void*)>
   12414:	e7fe      	b.n	12414 <Lpc40xxSystemController::SetCpuClockDivider(unsigned char)+0x30>
    system_controller->CCLKSEL =
        (system_controller->CCLKSEL & ~kClearCpuDivider) | cpu_divider;
   12416:	4b0c      	ldr	r3, [pc, #48]	; (12448 <Lpc40xxSystemController::SetCpuClockDivider(unsigned char)+0x64>)
   12418:	681b      	ldr	r3, [r3, #0]
   1241a:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   1241e:	f023 011f 	bic.w	r1, r3, #31
   12422:	f89d 2003 	ldrb.w	r2, [sp, #3]
    system_controller->CCLKSEL =
   12426:	4b08      	ldr	r3, [pc, #32]	; (12448 <Lpc40xxSystemController::SetCpuClockDivider(unsigned char)+0x64>)
   12428:	681b      	ldr	r3, [r3, #0]
        (system_controller->CCLKSEL & ~kClearCpuDivider) | cpu_divider;
   1242a:	430a      	orrs	r2, r1
    system_controller->CCLKSEL =
   1242c:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
  }
   12430:	bf00      	nop
   12432:	b003      	add	sp, #12
   12434:	f85d fb04 	ldr.w	pc, [sp], #4
   12438:	00018d20 	.word	0x00018d20
   1243c:	00018978 	.word	0x00018978
   12440:	000187bc 	.word	0x000187bc
   12444:	00018564 	.word	0x00018564
   12448:	1000006c 	.word	0x1000006c

0001244c <Lpc40xxSystemController::SetEmcClockDivider(Lpc40xxSystemController::EmcDivider)>:

  void SetEmcClockDivider(EmcDivider emc_divider)
   1244c:	b082      	sub	sp, #8
   1244e:	9001      	str	r0, [sp, #4]
   12450:	460b      	mov	r3, r1
   12452:	f88d 3003 	strb.w	r3, [sp, #3]
  {
    system_controller->EMCCLKSEL =
        (system_controller->EMCCLKSEL & ~kClearEmcDivider) |
   12456:	4b08      	ldr	r3, [pc, #32]	; (12478 <Lpc40xxSystemController::SetEmcClockDivider(Lpc40xxSystemController::EmcDivider)+0x2c>)
   12458:	681b      	ldr	r3, [r3, #0]
   1245a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   1245e:	f023 0101 	bic.w	r1, r3, #1
        static_cast<uint8_t>(emc_divider);
   12462:	f89d 2003 	ldrb.w	r2, [sp, #3]
    system_controller->EMCCLKSEL =
   12466:	4b04      	ldr	r3, [pc, #16]	; (12478 <Lpc40xxSystemController::SetEmcClockDivider(Lpc40xxSystemController::EmcDivider)+0x2c>)
   12468:	681b      	ldr	r3, [r3, #0]
        (system_controller->EMCCLKSEL & ~kClearEmcDivider) |
   1246a:	430a      	orrs	r2, r1
    system_controller->EMCCLKSEL =
   1246c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }
   12470:	bf00      	nop
   12472:	b002      	add	sp, #8
   12474:	4770      	bx	lr
   12476:	bf00      	nop
   12478:	1000006c 	.word	0x1000006c

0001247c <int util::Value<Ssp::Peripheral, int>(Ssp::Peripheral)>:
constexpr Type Value(Enum enum_type_value)
   1247c:	b530      	push	{r4, r5, lr}
   1247e:	b083      	sub	sp, #12
   12480:	4675      	mov	r5, lr
   12482:	9001      	str	r0, [sp, #4]
   12484:	462b      	mov	r3, r5
   12486:	4619      	mov	r1, r3
   12488:	4806      	ldr	r0, [pc, #24]	; (124a4 <int util::Value<Ssp::Peripheral, int>(Ssp::Peripheral)+0x28>)
   1248a:	f003 f821 	bl	154d0 <__cyg_profile_func_enter>
  return static_cast<Type>(enum_type_value);
   1248e:	9c01      	ldr	r4, [sp, #4]
   12490:	462b      	mov	r3, r5
   12492:	4619      	mov	r1, r3
   12494:	4803      	ldr	r0, [pc, #12]	; (124a4 <int util::Value<Ssp::Peripheral, int>(Ssp::Peripheral)+0x28>)
   12496:	f003 f82f 	bl	154f8 <__cyg_profile_func_exit>
   1249a:	4623      	mov	r3, r4
}
   1249c:	4618      	mov	r0, r3
   1249e:	b003      	add	sp, #12
   124a0:	bd30      	pop	{r4, r5, pc}
   124a2:	bf00      	nop
   124a4:	0001247d 	.word	0x0001247d

000124a8 <SspInterface::SspInterface()>:
#include "L0_LowLevel/system_controller.hpp"
#include "L1_Drivers/pin.hpp"
#include "utility/bit.hpp"
#include "utility/enum.hpp"

class SspInterface
   124a8:	b530      	push	{r4, r5, lr}
   124aa:	b083      	sub	sp, #12
   124ac:	4675      	mov	r5, lr
   124ae:	9001      	str	r0, [sp, #4]
   124b0:	462b      	mov	r3, r5
   124b2:	4619      	mov	r1, r3
   124b4:	4807      	ldr	r0, [pc, #28]	; (124d4 <SspInterface::SspInterface()+0x2c>)
   124b6:	f003 f80b 	bl	154d0 <__cyg_profile_func_enter>
   124ba:	4a07      	ldr	r2, [pc, #28]	; (124d8 <SspInterface::SspInterface()+0x30>)
   124bc:	9b01      	ldr	r3, [sp, #4]
   124be:	601a      	str	r2, [r3, #0]
   124c0:	9c01      	ldr	r4, [sp, #4]
   124c2:	462b      	mov	r3, r5
   124c4:	4619      	mov	r1, r3
   124c6:	4803      	ldr	r0, [pc, #12]	; (124d4 <SspInterface::SspInterface()+0x2c>)
   124c8:	f003 f816 	bl	154f8 <__cyg_profile_func_exit>
   124cc:	4623      	mov	r3, r4
   124ce:	4618      	mov	r0, r3
   124d0:	b003      	add	sp, #12
   124d2:	bd30      	pop	{r4, r5, pc}
   124d4:	000124a9 	.word	0x000124a9
   124d8:	00018aa0 	.word	0x00018aa0

000124dc <PinInterface::PinInterface(PinInterface const&)>:
class PinInterface
   124dc:	b530      	push	{r4, r5, lr}
   124de:	b083      	sub	sp, #12
   124e0:	4675      	mov	r5, lr
   124e2:	9001      	str	r0, [sp, #4]
   124e4:	9100      	str	r1, [sp, #0]
   124e6:	462b      	mov	r3, r5
   124e8:	4619      	mov	r1, r3
   124ea:	4808      	ldr	r0, [pc, #32]	; (1250c <PinInterface::PinInterface(PinInterface const&)+0x30>)
   124ec:	f002 fff0 	bl	154d0 <__cyg_profile_func_enter>
   124f0:	4a07      	ldr	r2, [pc, #28]	; (12510 <PinInterface::PinInterface(PinInterface const&)+0x34>)
   124f2:	9b01      	ldr	r3, [sp, #4]
   124f4:	601a      	str	r2, [r3, #0]
   124f6:	9c01      	ldr	r4, [sp, #4]
   124f8:	462b      	mov	r3, r5
   124fa:	4619      	mov	r1, r3
   124fc:	4803      	ldr	r0, [pc, #12]	; (1250c <PinInterface::PinInterface(PinInterface const&)+0x30>)
   124fe:	f002 fffb 	bl	154f8 <__cyg_profile_func_exit>
   12502:	4623      	mov	r3, r4
   12504:	4618      	mov	r0, r3
   12506:	b003      	add	sp, #12
   12508:	bd30      	pop	{r4, r5, pc}
   1250a:	bf00      	nop
   1250c:	000124dd 	.word	0x000124dd
   12510:	00018bdc 	.word	0x00018bdc

00012514 <Pin::Pin(Pin const&)>:
class Pin : public PinInterface
   12514:	b530      	push	{r4, r5, lr}
   12516:	b083      	sub	sp, #12
   12518:	4675      	mov	r5, lr
   1251a:	9001      	str	r0, [sp, #4]
   1251c:	9100      	str	r1, [sp, #0]
   1251e:	462b      	mov	r3, r5
   12520:	4619      	mov	r1, r3
   12522:	480f      	ldr	r0, [pc, #60]	; (12560 <Pin::Pin(Pin const&)+0x4c>)
   12524:	f002 ffd4 	bl	154d0 <__cyg_profile_func_enter>
   12528:	9b01      	ldr	r3, [sp, #4]
   1252a:	9a00      	ldr	r2, [sp, #0]
   1252c:	4611      	mov	r1, r2
   1252e:	4618      	mov	r0, r3
   12530:	f7ff ffd4 	bl	124dc <PinInterface::PinInterface(PinInterface const&)>
   12534:	4a0b      	ldr	r2, [pc, #44]	; (12564 <Pin::Pin(Pin const&)+0x50>)
   12536:	9b01      	ldr	r3, [sp, #4]
   12538:	601a      	str	r2, [r3, #0]
   1253a:	9b00      	ldr	r3, [sp, #0]
   1253c:	791a      	ldrb	r2, [r3, #4]
   1253e:	9b01      	ldr	r3, [sp, #4]
   12540:	711a      	strb	r2, [r3, #4]
   12542:	9b00      	ldr	r3, [sp, #0]
   12544:	795a      	ldrb	r2, [r3, #5]
   12546:	9b01      	ldr	r3, [sp, #4]
   12548:	715a      	strb	r2, [r3, #5]
   1254a:	9c01      	ldr	r4, [sp, #4]
   1254c:	462b      	mov	r3, r5
   1254e:	4619      	mov	r1, r3
   12550:	4803      	ldr	r0, [pc, #12]	; (12560 <Pin::Pin(Pin const&)+0x4c>)
   12552:	f002 ffd1 	bl	154f8 <__cyg_profile_func_exit>
   12556:	4623      	mov	r3, r4
   12558:	4618      	mov	r0, r3
   1255a:	b003      	add	sp, #12
   1255c:	bd30      	pop	{r4, r5, pc}
   1255e:	bf00      	nop
   12560:	00012515 	.word	0x00012515
   12564:	00018ba0 	.word	0x00018ba0

00012568 <Ssp::Ssp(Ssp::Peripheral)>:
        pssp_(Peripheral::kSsp0)
  {
  }

  /// User modified constructor. Must be followed by Set functions.
  explicit constexpr Ssp(Peripheral set_pssp)
   12568:	b530      	push	{r4, r5, lr}
   1256a:	b083      	sub	sp, #12
   1256c:	4675      	mov	r5, lr
   1256e:	9001      	str	r0, [sp, #4]
   12570:	9100      	str	r1, [sp, #0]
   12572:	462b      	mov	r3, r5
   12574:	4619      	mov	r1, r3
   12576:	4831      	ldr	r0, [pc, #196]	; (1263c <Ssp::Ssp(Ssp::Peripheral)+0xd4>)
   12578:	f002 ffaa 	bl	154d0 <__cyg_profile_func_enter>
        miso_(&miso_pin_),
        sck_(&sck_pin_),
        mosi_pin_(kSspPinMatrix[util::Value(set_pssp)][MatrixLookup::kMosi]),
        miso_pin_(kSspPinMatrix[util::Value(set_pssp)][MatrixLookup::kMiso]),
        sck_pin_(kSspPinMatrix[util::Value(set_pssp)][MatrixLookup::kSck]),
        pssp_(set_pssp)
   1257c:	9b01      	ldr	r3, [sp, #4]
   1257e:	4618      	mov	r0, r3
   12580:	f7ff ff92 	bl	124a8 <SspInterface::SspInterface()>
   12584:	9b01      	ldr	r3, [sp, #4]
   12586:	3304      	adds	r3, #4
   12588:	4618      	mov	r0, r3
   1258a:	f7ff fc9d 	bl	11ec8 <Lpc40xxSystemController::Lpc40xxSystemController()>
   1258e:	4a2c      	ldr	r2, [pc, #176]	; (12640 <Ssp::Ssp(Ssp::Peripheral)+0xd8>)
   12590:	9b01      	ldr	r3, [sp, #4]
   12592:	601a      	str	r2, [r3, #0]
   12594:	4a2b      	ldr	r2, [pc, #172]	; (12644 <Ssp::Ssp(Ssp::Peripheral)+0xdc>)
   12596:	9b01      	ldr	r3, [sp, #4]
   12598:	605a      	str	r2, [r3, #4]
   1259a:	9b01      	ldr	r3, [sp, #4]
   1259c:	f103 0214 	add.w	r2, r3, #20
   125a0:	9b01      	ldr	r3, [sp, #4]
   125a2:	609a      	str	r2, [r3, #8]
   125a4:	9b01      	ldr	r3, [sp, #4]
   125a6:	f103 021c 	add.w	r2, r3, #28
   125aa:	9b01      	ldr	r3, [sp, #4]
   125ac:	60da      	str	r2, [r3, #12]
   125ae:	9b01      	ldr	r3, [sp, #4]
   125b0:	f103 0224 	add.w	r2, r3, #36	; 0x24
   125b4:	9b01      	ldr	r3, [sp, #4]
   125b6:	611a      	str	r2, [r3, #16]
   125b8:	9b01      	ldr	r3, [sp, #4]
   125ba:	f103 0414 	add.w	r4, r3, #20
        mosi_pin_(kSspPinMatrix[util::Value(set_pssp)][MatrixLookup::kMosi]),
   125be:	9800      	ldr	r0, [sp, #0]
   125c0:	f7ff ff5c 	bl	1247c <int util::Value<Ssp::Peripheral, int>(Ssp::Peripheral)>
   125c4:	4602      	mov	r2, r0
        pssp_(set_pssp)
   125c6:	4613      	mov	r3, r2
   125c8:	005b      	lsls	r3, r3, #1
   125ca:	4413      	add	r3, r2
   125cc:	00db      	lsls	r3, r3, #3
   125ce:	4a1e      	ldr	r2, [pc, #120]	; (12648 <Ssp::Ssp(Ssp::Peripheral)+0xe0>)
   125d0:	4413      	add	r3, r2
   125d2:	4619      	mov	r1, r3
   125d4:	4620      	mov	r0, r4
   125d6:	f7ff ff9d 	bl	12514 <Pin::Pin(Pin const&)>
   125da:	9b01      	ldr	r3, [sp, #4]
   125dc:	f103 041c 	add.w	r4, r3, #28
        miso_pin_(kSspPinMatrix[util::Value(set_pssp)][MatrixLookup::kMiso]),
   125e0:	9800      	ldr	r0, [sp, #0]
   125e2:	f7ff ff4b 	bl	1247c <int util::Value<Ssp::Peripheral, int>(Ssp::Peripheral)>
   125e6:	4602      	mov	r2, r0
        pssp_(set_pssp)
   125e8:	4613      	mov	r3, r2
   125ea:	005b      	lsls	r3, r3, #1
   125ec:	4413      	add	r3, r2
   125ee:	00db      	lsls	r3, r3, #3
   125f0:	3308      	adds	r3, #8
   125f2:	4a15      	ldr	r2, [pc, #84]	; (12648 <Ssp::Ssp(Ssp::Peripheral)+0xe0>)
   125f4:	4413      	add	r3, r2
   125f6:	4619      	mov	r1, r3
   125f8:	4620      	mov	r0, r4
   125fa:	f7ff ff8b 	bl	12514 <Pin::Pin(Pin const&)>
   125fe:	9b01      	ldr	r3, [sp, #4]
   12600:	f103 0424 	add.w	r4, r3, #36	; 0x24
        sck_pin_(kSspPinMatrix[util::Value(set_pssp)][MatrixLookup::kSck]),
   12604:	9800      	ldr	r0, [sp, #0]
   12606:	f7ff ff39 	bl	1247c <int util::Value<Ssp::Peripheral, int>(Ssp::Peripheral)>
   1260a:	4602      	mov	r2, r0
        pssp_(set_pssp)
   1260c:	4613      	mov	r3, r2
   1260e:	005b      	lsls	r3, r3, #1
   12610:	4413      	add	r3, r2
   12612:	00db      	lsls	r3, r3, #3
   12614:	3310      	adds	r3, #16
   12616:	4a0c      	ldr	r2, [pc, #48]	; (12648 <Ssp::Ssp(Ssp::Peripheral)+0xe0>)
   12618:	4413      	add	r3, r2
   1261a:	4619      	mov	r1, r3
   1261c:	4620      	mov	r0, r4
   1261e:	f7ff ff79 	bl	12514 <Pin::Pin(Pin const&)>
   12622:	9b01      	ldr	r3, [sp, #4]
   12624:	9a00      	ldr	r2, [sp, #0]
   12626:	62da      	str	r2, [r3, #44]	; 0x2c
  {
  }
   12628:	9c01      	ldr	r4, [sp, #4]
   1262a:	462b      	mov	r3, r5
   1262c:	4619      	mov	r1, r3
   1262e:	4803      	ldr	r0, [pc, #12]	; (1263c <Ssp::Ssp(Ssp::Peripheral)+0xd4>)
   12630:	f002 ff62 	bl	154f8 <__cyg_profile_func_exit>
   12634:	4623      	mov	r3, r4
   12636:	4618      	mov	r0, r3
   12638:	b003      	add	sp, #12
   1263a:	bd30      	pop	{r4, r5, pc}
   1263c:	00012569 	.word	0x00012569
   12640:	00018a54 	.word	0x00018a54
   12644:	00018a7c 	.word	0x00018a7c
   12648:	00018994 	.word	0x00018994

0001264c <Ssp::Initialize()>:
  }

  /// Powers on the peripheral, sets the peripheral clock, format, and data
  /// size, and enables the SSP pins for communication see and more.
  /// See page 601 of user manual UM10562 LPC408x/407x for more details.
  void Initialize() override
   1264c:	b570      	push	{r4, r5, r6, lr}
   1264e:	b086      	sub	sp, #24
   12650:	4676      	mov	r6, lr
   12652:	9001      	str	r0, [sp, #4]
   12654:	4633      	mov	r3, r6
   12656:	4619      	mov	r1, r3
   12658:	4830      	ldr	r0, [pc, #192]	; (1271c <Ssp::Initialize()+0xd0>)
   1265a:	f002 ff39 	bl	154d0 <__cyg_profile_func_enter>
  {
    uint32_t pssp = util::Value(pssp_);
   1265e:	9b01      	ldr	r3, [sp, #4]
   12660:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   12662:	4618      	mov	r0, r3
   12664:	f7ff ff0a 	bl	1247c <int util::Value<Ssp::Peripheral, int>(Ssp::Peripheral)>
   12668:	4603      	mov	r3, r0
   1266a:	9305      	str	r3, [sp, #20]
    // Power up peripheral
    PowerUpPeripheral(kPowerBit[pssp]);
   1266c:	9b01      	ldr	r3, [sp, #4]
   1266e:	1d18      	adds	r0, r3, #4
   12670:	9b01      	ldr	r3, [sp, #4]
   12672:	685b      	ldr	r3, [r3, #4]
   12674:	3314      	adds	r3, #20
   12676:	681b      	ldr	r3, [r3, #0]
   12678:	9a05      	ldr	r2, [sp, #20]
   1267a:	0092      	lsls	r2, r2, #2
   1267c:	4928      	ldr	r1, [pc, #160]	; (12720 <Ssp::Initialize()+0xd4>)
   1267e:	440a      	add	r2, r1
   12680:	4611      	mov	r1, r2
   12682:	4798      	blx	r3
    // Enable SSP pins
    mosi_->SetPinFunction(kPinSelect[pssp]);
   12684:	9b01      	ldr	r3, [sp, #4]
   12686:	6898      	ldr	r0, [r3, #8]
   12688:	9b01      	ldr	r3, [sp, #4]
   1268a:	689b      	ldr	r3, [r3, #8]
   1268c:	681b      	ldr	r3, [r3, #0]
   1268e:	681b      	ldr	r3, [r3, #0]
   12690:	4924      	ldr	r1, [pc, #144]	; (12724 <Ssp::Initialize()+0xd8>)
   12692:	9a05      	ldr	r2, [sp, #20]
   12694:	440a      	add	r2, r1
   12696:	7812      	ldrb	r2, [r2, #0]
   12698:	4611      	mov	r1, r2
   1269a:	4798      	blx	r3
    miso_->SetPinFunction(kPinSelect[pssp]);
   1269c:	9b01      	ldr	r3, [sp, #4]
   1269e:	68d8      	ldr	r0, [r3, #12]
   126a0:	9b01      	ldr	r3, [sp, #4]
   126a2:	68db      	ldr	r3, [r3, #12]
   126a4:	681b      	ldr	r3, [r3, #0]
   126a6:	681b      	ldr	r3, [r3, #0]
   126a8:	491e      	ldr	r1, [pc, #120]	; (12724 <Ssp::Initialize()+0xd8>)
   126aa:	9a05      	ldr	r2, [sp, #20]
   126ac:	440a      	add	r2, r1
   126ae:	7812      	ldrb	r2, [r2, #0]
   126b0:	4611      	mov	r1, r2
   126b2:	4798      	blx	r3
    sck_->SetPinFunction(kPinSelect[pssp]);
   126b4:	9b01      	ldr	r3, [sp, #4]
   126b6:	6918      	ldr	r0, [r3, #16]
   126b8:	9b01      	ldr	r3, [sp, #4]
   126ba:	691b      	ldr	r3, [r3, #16]
   126bc:	681b      	ldr	r3, [r3, #0]
   126be:	681b      	ldr	r3, [r3, #0]
   126c0:	4918      	ldr	r1, [pc, #96]	; (12724 <Ssp::Initialize()+0xd8>)
   126c2:	9a05      	ldr	r2, [sp, #20]
   126c4:	440a      	add	r2, r1
   126c6:	7812      	ldrb	r2, [r2, #0]
   126c8:	4611      	mov	r1, r2
   126ca:	4798      	blx	r3
    // Enable SSP
    ssp_registers[pssp]->CR1 = bit::Set(ssp_registers[pssp]->CR1, kSspEnable);
   126cc:	4a16      	ldr	r2, [pc, #88]	; (12728 <Ssp::Initialize()+0xdc>)
   126ce:	9b05      	ldr	r3, [sp, #20]
   126d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   126d4:	685b      	ldr	r3, [r3, #4]
   126d6:	4914      	ldr	r1, [pc, #80]	; (12728 <Ssp::Initialize()+0xdc>)
   126d8:	9a05      	ldr	r2, [sp, #20]
   126da:	f851 4022 	ldr.w	r4, [r1, r2, lsl #2]
   126de:	9304      	str	r3, [sp, #16]
   126e0:	2301      	movs	r3, #1
   126e2:	9303      	str	r3, [sp, #12]
   126e4:	4633      	mov	r3, r6
   126e6:	4619      	mov	r1, r3
   126e8:	4810      	ldr	r0, [pc, #64]	; (1272c <Ssp::Initialize()+0xe0>)
   126ea:	f002 fef1 	bl	154d0 <__cyg_profile_func_enter>
[[gnu::always_inline]] [[nodiscard]]
constexpr T Set(T target, uint32_t position)
{
  static_assert(std::numeric_limits<T>::is_integer,
                "Set only accepts intergers.");
  return target | (1 << position);
   126ee:	2201      	movs	r2, #1
   126f0:	9b03      	ldr	r3, [sp, #12]
   126f2:	fa02 f303 	lsl.w	r3, r2, r3
   126f6:	461a      	mov	r2, r3
   126f8:	9b04      	ldr	r3, [sp, #16]
   126fa:	ea42 0503 	orr.w	r5, r2, r3
   126fe:	4633      	mov	r3, r6
   12700:	4619      	mov	r1, r3
   12702:	480a      	ldr	r0, [pc, #40]	; (1272c <Ssp::Initialize()+0xe0>)
   12704:	f002 fef8 	bl	154f8 <__cyg_profile_func_exit>
   12708:	6065      	str	r5, [r4, #4]
   1270a:	4633      	mov	r3, r6
   1270c:	4619      	mov	r1, r3
   1270e:	4803      	ldr	r0, [pc, #12]	; (1271c <Ssp::Initialize()+0xd0>)
   12710:	f002 fef2 	bl	154f8 <__cyg_profile_func_exit>
  }
   12714:	bf00      	nop
   12716:	b006      	add	sp, #24
   12718:	bd70      	pop	{r4, r5, r6, pc}
   1271a:	bf00      	nop
   1271c:	0001264d 	.word	0x0001264d
   12720:	000189dc 	.word	0x000189dc
   12724:	00018990 	.word	0x00018990
   12728:	10000074 	.word	0x10000074
   1272c:	000137cd 	.word	0x000137cd

00012730 <Ssp::IsTransferRegBusy()>:

  /// Checks if the SSP controller is idle.
  /// @returns true if the controller is sending or receiving a data frame and
  /// false if it is idle.
  bool IsTransferRegBusy() override
   12730:	b530      	push	{r4, r5, lr}
   12732:	b085      	sub	sp, #20
   12734:	4675      	mov	r5, lr
   12736:	9001      	str	r0, [sp, #4]
   12738:	462b      	mov	r3, r5
   1273a:	4619      	mov	r1, r3
   1273c:	4817      	ldr	r0, [pc, #92]	; (1279c <Ssp::IsTransferRegBusy()+0x6c>)
   1273e:	f002 fec7 	bl	154d0 <__cyg_profile_func_enter>
  {
    return (bit::Read(ssp_registers[util::Value(pssp_)]->SR, kDataLineIdleBit));
   12742:	9b01      	ldr	r3, [sp, #4]
   12744:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   12746:	4618      	mov	r0, r3
   12748:	f7ff fe98 	bl	1247c <int util::Value<Ssp::Peripheral, int>(Ssp::Peripheral)>
   1274c:	4602      	mov	r2, r0
   1274e:	4b14      	ldr	r3, [pc, #80]	; (127a0 <Ssp::IsTransferRegBusy()+0x70>)
   12750:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   12754:	68db      	ldr	r3, [r3, #12]
   12756:	9303      	str	r3, [sp, #12]
   12758:	2304      	movs	r3, #4
   1275a:	9302      	str	r3, [sp, #8]
   1275c:	462b      	mov	r3, r5
   1275e:	4619      	mov	r1, r3
   12760:	4810      	ldr	r0, [pc, #64]	; (127a4 <Ssp::IsTransferRegBusy()+0x74>)
   12762:	f002 feb5 	bl	154d0 <__cyg_profile_func_enter>
[[gnu::always_inline]][[nodiscard]] constexpr bool Read(T target,
                                                        uint32_t position)
{
  static_assert(std::numeric_limits<T>::is_integer,
                "Read only accepts intergers.");
  return static_cast<bool>(target & (1 << position));
   12766:	2201      	movs	r2, #1
   12768:	9b02      	ldr	r3, [sp, #8]
   1276a:	fa02 f303 	lsl.w	r3, r2, r3
   1276e:	461a      	mov	r2, r3
   12770:	9b03      	ldr	r3, [sp, #12]
   12772:	4013      	ands	r3, r2
   12774:	2b00      	cmp	r3, #0
   12776:	bf14      	ite	ne
   12778:	2301      	movne	r3, #1
   1277a:	2300      	moveq	r3, #0
   1277c:	b2dc      	uxtb	r4, r3
   1277e:	462b      	mov	r3, r5
   12780:	4619      	mov	r1, r3
   12782:	4808      	ldr	r0, [pc, #32]	; (127a4 <Ssp::IsTransferRegBusy()+0x74>)
   12784:	f002 feb8 	bl	154f8 <__cyg_profile_func_exit>
   12788:	462b      	mov	r3, r5
   1278a:	4619      	mov	r1, r3
   1278c:	4803      	ldr	r0, [pc, #12]	; (1279c <Ssp::IsTransferRegBusy()+0x6c>)
   1278e:	f002 feb3 	bl	154f8 <__cyg_profile_func_exit>
   12792:	4623      	mov	r3, r4
  }
   12794:	4618      	mov	r0, r3
   12796:	b005      	add	sp, #20
   12798:	bd30      	pop	{r4, r5, pc}
   1279a:	bf00      	nop
   1279c:	00012731 	.word	0x00012731
   127a0:	10000074 	.word	0x10000074
   127a4:	00013809 	.word	0x00013809

000127a8 <Ssp::Transfer(unsigned short)>:
  /// data register. This functions for both transmitting and
  /// receiving data. It is recommended this region be protected
  /// by a mutex.
  /// @param data - information to be placed in data register
  /// @return - received data from external device
  uint16_t Transfer(uint16_t data) override
   127a8:	b530      	push	{r4, r5, lr}
   127aa:	b085      	sub	sp, #20
   127ac:	4675      	mov	r5, lr
   127ae:	9001      	str	r0, [sp, #4]
   127b0:	460b      	mov	r3, r1
   127b2:	f8ad 3002 	strh.w	r3, [sp, #2]
   127b6:	462b      	mov	r3, r5
   127b8:	4619      	mov	r1, r3
   127ba:	4814      	ldr	r0, [pc, #80]	; (1280c <Ssp::Transfer(unsigned short)+0x64>)
   127bc:	f002 fe88 	bl	154d0 <__cyg_profile_func_enter>
  {
    uint32_t pssp = util::Value(pssp_);
   127c0:	9b01      	ldr	r3, [sp, #4]
   127c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   127c4:	4618      	mov	r0, r3
   127c6:	f7ff fe59 	bl	1247c <int util::Value<Ssp::Peripheral, int>(Ssp::Peripheral)>
   127ca:	4603      	mov	r3, r0
   127cc:	9303      	str	r3, [sp, #12]

    ssp_registers[pssp]->DR = data;
   127ce:	4a10      	ldr	r2, [pc, #64]	; (12810 <Ssp::Transfer(unsigned short)+0x68>)
   127d0:	9b03      	ldr	r3, [sp, #12]
   127d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   127d6:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   127da:	609a      	str	r2, [r3, #8]
    while (IsTransferRegBusy())
   127dc:	9801      	ldr	r0, [sp, #4]
   127de:	f7ff ffa7 	bl	12730 <Ssp::IsTransferRegBusy()>
   127e2:	4603      	mov	r3, r0
   127e4:	2b00      	cmp	r3, #0
   127e6:	d001      	beq.n	127ec <Ssp::Transfer(unsigned short)+0x44>
    {
      continue;
   127e8:	bf00      	nop
    while (IsTransferRegBusy())
   127ea:	e7f7      	b.n	127dc <Ssp::Transfer(unsigned short)+0x34>
    }
    return static_cast<uint16_t>(ssp_registers[pssp]->DR);
   127ec:	4a08      	ldr	r2, [pc, #32]	; (12810 <Ssp::Transfer(unsigned short)+0x68>)
   127ee:	9b03      	ldr	r3, [sp, #12]
   127f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   127f4:	689b      	ldr	r3, [r3, #8]
   127f6:	b29c      	uxth	r4, r3
   127f8:	462b      	mov	r3, r5
   127fa:	4619      	mov	r1, r3
   127fc:	4803      	ldr	r0, [pc, #12]	; (1280c <Ssp::Transfer(unsigned short)+0x64>)
   127fe:	f002 fe7b 	bl	154f8 <__cyg_profile_func_exit>
   12802:	4623      	mov	r3, r4
  }
   12804:	4618      	mov	r0, r3
   12806:	b005      	add	sp, #20
   12808:	bd30      	pop	{r4, r5, pc}
   1280a:	bf00      	nop
   1280c:	000127a9 	.word	0x000127a9
   12810:	10000074 	.word	0x10000074

00012814 <Ssp::SetSpiMasterDefault()>:

  /// Sets up SSP peripheral as SPI master
  void SetSpiMasterDefault() override
   12814:	b510      	push	{r4, lr}
   12816:	b086      	sub	sp, #24
   12818:	4674      	mov	r4, lr
   1281a:	9003      	str	r0, [sp, #12]
   1281c:	4623      	mov	r3, r4
   1281e:	4619      	mov	r1, r3
   12820:	4812      	ldr	r0, [pc, #72]	; (1286c <Ssp::SetSpiMasterDefault()+0x58>)
   12822:	f002 fe55 	bl	154d0 <__cyg_profile_func_enter>
  {
    constexpr bool kHighPolarity  = 1;
   12826:	2301      	movs	r3, #1
   12828:	f88d 3017 	strb.w	r3, [sp, #23]
    constexpr bool kPhase0        = 0;
   1282c:	2300      	movs	r3, #0
   1282e:	f88d 3016 	strb.w	r3, [sp, #22]
    constexpr uint8_t kScrDivider = 0;
   12832:	2300      	movs	r3, #0
   12834:	f88d 3015 	strb.w	r3, [sp, #21]
    constexpr uint8_t kPrescaler  = SJ2_SYSTEM_CLOCK_RATE_MHZ;
   12838:	2330      	movs	r3, #48	; 0x30
   1283a:	f88d 3014 	strb.w	r3, [sp, #20]

    SetPeripheralMode(kMaster, kSpi, kEight);
   1283e:	2307      	movs	r3, #7
   12840:	2200      	movs	r2, #0
   12842:	2100      	movs	r1, #0
   12844:	9803      	ldr	r0, [sp, #12]
   12846:	f000 f85b 	bl	12900 <Ssp::SetPeripheralMode(SspInterface::MasterSlaveMode, SspInterface::FrameMode, SspInterface::DataSize)>
    SetClock(kHighPolarity, kPhase0, kScrDivider, kPrescaler);
   1284a:	2330      	movs	r3, #48	; 0x30
   1284c:	9300      	str	r3, [sp, #0]
   1284e:	2300      	movs	r3, #0
   12850:	2200      	movs	r2, #0
   12852:	2101      	movs	r1, #1
   12854:	9803      	ldr	r0, [sp, #12]
   12856:	f000 fa09 	bl	12c6c <Ssp::SetClock(bool, bool, unsigned char, unsigned char)>
   1285a:	4623      	mov	r3, r4
   1285c:	4619      	mov	r1, r3
   1285e:	4803      	ldr	r0, [pc, #12]	; (1286c <Ssp::SetSpiMasterDefault()+0x58>)
   12860:	f002 fe4a 	bl	154f8 <__cyg_profile_func_exit>
  }
   12864:	bf00      	nop
   12866:	b006      	add	sp, #24
   12868:	bd10      	pop	{r4, pc}
   1286a:	bf00      	nop
   1286c:	00012815 	.word	0x00012815

00012870 <unsigned char util::Value<SspInterface::DataSize, unsigned char>(SspInterface::DataSize)>:
constexpr Type Value(Enum enum_type_value)
   12870:	b530      	push	{r4, r5, lr}
   12872:	b083      	sub	sp, #12
   12874:	4675      	mov	r5, lr
   12876:	4603      	mov	r3, r0
   12878:	f88d 3007 	strb.w	r3, [sp, #7]
   1287c:	462b      	mov	r3, r5
   1287e:	4619      	mov	r1, r3
   12880:	4806      	ldr	r0, [pc, #24]	; (1289c <unsigned char util::Value<SspInterface::DataSize, unsigned char>(SspInterface::DataSize)+0x2c>)
   12882:	f002 fe25 	bl	154d0 <__cyg_profile_func_enter>
  return static_cast<Type>(enum_type_value);
   12886:	f89d 4007 	ldrb.w	r4, [sp, #7]
   1288a:	462b      	mov	r3, r5
   1288c:	4619      	mov	r1, r3
   1288e:	4803      	ldr	r0, [pc, #12]	; (1289c <unsigned char util::Value<SspInterface::DataSize, unsigned char>(SspInterface::DataSize)+0x2c>)
   12890:	f002 fe32 	bl	154f8 <__cyg_profile_func_exit>
   12894:	4623      	mov	r3, r4
}
   12896:	4618      	mov	r0, r3
   12898:	b003      	add	sp, #12
   1289a:	bd30      	pop	{r4, r5, pc}
   1289c:	00012871 	.word	0x00012871

000128a0 <unsigned char util::Value<SspInterface::FrameMode, unsigned char>(SspInterface::FrameMode)>:
constexpr Type Value(Enum enum_type_value)
   128a0:	b530      	push	{r4, r5, lr}
   128a2:	b083      	sub	sp, #12
   128a4:	4675      	mov	r5, lr
   128a6:	4603      	mov	r3, r0
   128a8:	f88d 3007 	strb.w	r3, [sp, #7]
   128ac:	462b      	mov	r3, r5
   128ae:	4619      	mov	r1, r3
   128b0:	4806      	ldr	r0, [pc, #24]	; (128cc <unsigned char util::Value<SspInterface::FrameMode, unsigned char>(SspInterface::FrameMode)+0x2c>)
   128b2:	f002 fe0d 	bl	154d0 <__cyg_profile_func_enter>
  return static_cast<Type>(enum_type_value);
   128b6:	f89d 4007 	ldrb.w	r4, [sp, #7]
   128ba:	462b      	mov	r3, r5
   128bc:	4619      	mov	r1, r3
   128be:	4803      	ldr	r0, [pc, #12]	; (128cc <unsigned char util::Value<SspInterface::FrameMode, unsigned char>(SspInterface::FrameMode)+0x2c>)
   128c0:	f002 fe1a 	bl	154f8 <__cyg_profile_func_exit>
   128c4:	4623      	mov	r3, r4
}
   128c6:	4618      	mov	r0, r3
   128c8:	b003      	add	sp, #12
   128ca:	bd30      	pop	{r4, r5, pc}
   128cc:	000128a1 	.word	0x000128a1

000128d0 <unsigned char util::Value<SspInterface::MasterSlaveMode, unsigned char>(SspInterface::MasterSlaveMode)>:
constexpr Type Value(Enum enum_type_value)
   128d0:	b530      	push	{r4, r5, lr}
   128d2:	b083      	sub	sp, #12
   128d4:	4675      	mov	r5, lr
   128d6:	4603      	mov	r3, r0
   128d8:	f88d 3007 	strb.w	r3, [sp, #7]
   128dc:	462b      	mov	r3, r5
   128de:	4619      	mov	r1, r3
   128e0:	4806      	ldr	r0, [pc, #24]	; (128fc <unsigned char util::Value<SspInterface::MasterSlaveMode, unsigned char>(SspInterface::MasterSlaveMode)+0x2c>)
   128e2:	f002 fdf5 	bl	154d0 <__cyg_profile_func_enter>
  return static_cast<Type>(enum_type_value);
   128e6:	f89d 4007 	ldrb.w	r4, [sp, #7]
   128ea:	462b      	mov	r3, r5
   128ec:	4619      	mov	r1, r3
   128ee:	4803      	ldr	r0, [pc, #12]	; (128fc <unsigned char util::Value<SspInterface::MasterSlaveMode, unsigned char>(SspInterface::MasterSlaveMode)+0x2c>)
   128f0:	f002 fe02 	bl	154f8 <__cyg_profile_func_exit>
   128f4:	4623      	mov	r3, r4
}
   128f6:	4618      	mov	r0, r3
   128f8:	b003      	add	sp, #12
   128fa:	bd30      	pop	{r4, r5, pc}
   128fc:	000128d1 	.word	0x000128d1

00012900 <Ssp::SetPeripheralMode(SspInterface::MasterSlaveMode, SspInterface::FrameMode, SspInterface::DataSize)>:

  /// Sets the various modes for the Peripheral
  /// @param mode - master or slave mode
  /// @param frame - format for Peripheral data to use
  /// @param size - number of bits per frame
  void SetPeripheralMode(MasterSlaveMode mode, FrameMode frame,
   12900:	b570      	push	{r4, r5, r6, lr}
   12902:	b098      	sub	sp, #96	; 0x60
   12904:	4674      	mov	r4, lr
   12906:	9001      	str	r0, [sp, #4]
   12908:	4608      	mov	r0, r1
   1290a:	4611      	mov	r1, r2
   1290c:	461a      	mov	r2, r3
   1290e:	4603      	mov	r3, r0
   12910:	f88d 3003 	strb.w	r3, [sp, #3]
   12914:	460b      	mov	r3, r1
   12916:	f88d 3002 	strb.w	r3, [sp, #2]
   1291a:	4613      	mov	r3, r2
   1291c:	f88d 3001 	strb.w	r3, [sp, #1]
   12920:	4623      	mov	r3, r4
   12922:	4619      	mov	r1, r3
   12924:	4875      	ldr	r0, [pc, #468]	; (12afc <Ssp::SetPeripheralMode(SspInterface::MasterSlaveMode, SspInterface::FrameMode, SspInterface::DataSize)+0x1fc>)
   12926:	f002 fdd3 	bl	154d0 <__cyg_profile_func_enter>
                         DataSize size) override
  {
    uint32_t pssp = util::Value(pssp_);
   1292a:	9b01      	ldr	r3, [sp, #4]
   1292c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1292e:	4618      	mov	r0, r3
   12930:	f7ff fda4 	bl	1247c <int util::Value<Ssp::Peripheral, int>(Ssp::Peripheral)>
   12934:	4603      	mov	r3, r0
   12936:	9317      	str	r3, [sp, #92]	; 0x5c
    // TODO(#371): Find a better alternative to powering up the peripheral for
    // every method.
    Ssp::PowerUpPeripheral(Ssp::kPowerBit[pssp]);
   12938:	9b01      	ldr	r3, [sp, #4]
   1293a:	1d18      	adds	r0, r3, #4
   1293c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   1293e:	009b      	lsls	r3, r3, #2
   12940:	4a6f      	ldr	r2, [pc, #444]	; (12b00 <Ssp::SetPeripheralMode(SspInterface::MasterSlaveMode, SspInterface::FrameMode, SspInterface::DataSize)+0x200>)
   12942:	4413      	add	r3, r2
   12944:	4619      	mov	r1, r3
   12946:	f7ff fb7b 	bl	12040 <Lpc40xxSystemController::PowerUpPeripheral(SystemControllerInterface::PeripheralID const&)>
    if (frame == kMicro)
   1294a:	f89d 3002 	ldrb.w	r3, [sp, #2]
   1294e:	2b02      	cmp	r3, #2
   12950:	d102      	bne.n	12958 <Ssp::SetPeripheralMode(SspInterface::MasterSlaveMode, SspInterface::FrameMode, SspInterface::DataSize)+0x58>
    {
      size = kEight;
   12952:	2307      	movs	r3, #7
   12954:	f88d 3001 	strb.w	r3, [sp, #1]
    }
    ssp_registers[pssp]->CR0 =
        bit::Insert(ssp_registers[pssp]->CR0, util::Value(size), kDataBit, 4);
   12958:	4a6a      	ldr	r2, [pc, #424]	; (12b04 <Ssp::SetPeripheralMode(SspInterface::MasterSlaveMode, SspInterface::FrameMode, SspInterface::DataSize)+0x204>)
   1295a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   1295c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12960:	681e      	ldr	r6, [r3, #0]
   12962:	f89d 3001 	ldrb.w	r3, [sp, #1]
   12966:	4618      	mov	r0, r3
   12968:	f7ff ff82 	bl	12870 <unsigned char util::Value<SspInterface::DataSize, unsigned char>(SspInterface::DataSize)>
   1296c:	4603      	mov	r3, r0
   1296e:	4619      	mov	r1, r3
    ssp_registers[pssp]->CR0 =
   12970:	4a64      	ldr	r2, [pc, #400]	; (12b04 <Ssp::SetPeripheralMode(SspInterface::MasterSlaveMode, SspInterface::FrameMode, SspInterface::DataSize)+0x204>)
   12972:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   12974:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
   12978:	9608      	str	r6, [sp, #32]
   1297a:	460b      	mov	r3, r1
   1297c:	f88d 301f 	strb.w	r3, [sp, #31]
   12980:	2300      	movs	r3, #0
   12982:	9306      	str	r3, [sp, #24]
   12984:	2304      	movs	r3, #4
   12986:	9305      	str	r3, [sp, #20]
   12988:	4623      	mov	r3, r4
   1298a:	4619      	mov	r1, r3
   1298c:	485e      	ldr	r0, [pc, #376]	; (12b08 <Ssp::SetPeripheralMode(SspInterface::MasterSlaveMode, SspInterface::FrameMode, SspInterface::DataSize)+0x208>)
   1298e:	f002 fd9f 	bl	154d0 <__cyg_profile_func_enter>
  constexpr UnsignedT kFieldOfOnes = GenerateFieldOfOnes<T>();
   12992:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   12996:	9304      	str	r3, [sp, #16]
  constexpr size_t kTargetWidth     = sizeof(T) * 8;
   12998:	2320      	movs	r3, #32
   1299a:	9303      	str	r3, [sp, #12]
  UnsignedT mask   = kFieldOfOnes >> (kTargetWidth - width);
   1299c:	9b05      	ldr	r3, [sp, #20]
   1299e:	f1c3 0320 	rsb	r3, r3, #32
   129a2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   129a6:	fa22 f303 	lsr.w	r3, r2, r3
   129aa:	9302      	str	r3, [sp, #8]
  target &= ~(mask << position);
   129ac:	9a02      	ldr	r2, [sp, #8]
   129ae:	9b06      	ldr	r3, [sp, #24]
   129b0:	fa02 f303 	lsl.w	r3, r2, r3
   129b4:	43db      	mvns	r3, r3
   129b6:	9a08      	ldr	r2, [sp, #32]
   129b8:	4013      	ands	r3, r2
   129ba:	9308      	str	r3, [sp, #32]
  target |= (value & mask) << position;
   129bc:	f89d 201f 	ldrb.w	r2, [sp, #31]
   129c0:	9b02      	ldr	r3, [sp, #8]
   129c2:	401a      	ands	r2, r3
   129c4:	9b06      	ldr	r3, [sp, #24]
   129c6:	fa02 f303 	lsl.w	r3, r2, r3
   129ca:	9a08      	ldr	r2, [sp, #32]
   129cc:	4313      	orrs	r3, r2
   129ce:	9308      	str	r3, [sp, #32]
  return target;
   129d0:	9e08      	ldr	r6, [sp, #32]
   129d2:	4623      	mov	r3, r4
   129d4:	4619      	mov	r1, r3
   129d6:	484c      	ldr	r0, [pc, #304]	; (12b08 <Ssp::SetPeripheralMode(SspInterface::MasterSlaveMode, SspInterface::FrameMode, SspInterface::DataSize)+0x208>)
   129d8:	f002 fd8e 	bl	154f8 <__cyg_profile_func_exit>
   129dc:	602e      	str	r6, [r5, #0]
    ssp_registers[pssp]->CR0 =
        bit::Insert(ssp_registers[pssp]->CR0, util::Value(frame), kFrameBit, 2);
   129de:	4a49      	ldr	r2, [pc, #292]	; (12b04 <Ssp::SetPeripheralMode(SspInterface::MasterSlaveMode, SspInterface::FrameMode, SspInterface::DataSize)+0x204>)
   129e0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   129e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   129e6:	681e      	ldr	r6, [r3, #0]
   129e8:	f89d 3002 	ldrb.w	r3, [sp, #2]
   129ec:	4618      	mov	r0, r3
   129ee:	f7ff ff57 	bl	128a0 <unsigned char util::Value<SspInterface::FrameMode, unsigned char>(SspInterface::FrameMode)>
   129f2:	4603      	mov	r3, r0
   129f4:	4619      	mov	r1, r3
    ssp_registers[pssp]->CR0 =
   129f6:	4a43      	ldr	r2, [pc, #268]	; (12b04 <Ssp::SetPeripheralMode(SspInterface::MasterSlaveMode, SspInterface::FrameMode, SspInterface::DataSize)+0x204>)
   129f8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   129fa:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
   129fe:	960f      	str	r6, [sp, #60]	; 0x3c
   12a00:	460b      	mov	r3, r1
   12a02:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
   12a06:	2304      	movs	r3, #4
   12a08:	930d      	str	r3, [sp, #52]	; 0x34
   12a0a:	2302      	movs	r3, #2
   12a0c:	930c      	str	r3, [sp, #48]	; 0x30
   12a0e:	4623      	mov	r3, r4
   12a10:	4619      	mov	r1, r3
   12a12:	483d      	ldr	r0, [pc, #244]	; (12b08 <Ssp::SetPeripheralMode(SspInterface::MasterSlaveMode, SspInterface::FrameMode, SspInterface::DataSize)+0x208>)
   12a14:	f002 fd5c 	bl	154d0 <__cyg_profile_func_enter>
  constexpr UnsignedT kFieldOfOnes = GenerateFieldOfOnes<T>();
   12a18:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   12a1c:	930b      	str	r3, [sp, #44]	; 0x2c
  constexpr size_t kTargetWidth     = sizeof(T) * 8;
   12a1e:	2320      	movs	r3, #32
   12a20:	930a      	str	r3, [sp, #40]	; 0x28
  UnsignedT mask   = kFieldOfOnes >> (kTargetWidth - width);
   12a22:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   12a24:	f1c3 0320 	rsb	r3, r3, #32
   12a28:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   12a2c:	fa22 f303 	lsr.w	r3, r2, r3
   12a30:	9309      	str	r3, [sp, #36]	; 0x24
  target &= ~(mask << position);
   12a32:	9a09      	ldr	r2, [sp, #36]	; 0x24
   12a34:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   12a36:	fa02 f303 	lsl.w	r3, r2, r3
   12a3a:	43db      	mvns	r3, r3
   12a3c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   12a3e:	4013      	ands	r3, r2
   12a40:	930f      	str	r3, [sp, #60]	; 0x3c
  target |= (value & mask) << position;
   12a42:	f89d 203b 	ldrb.w	r2, [sp, #59]	; 0x3b
   12a46:	9b09      	ldr	r3, [sp, #36]	; 0x24
   12a48:	401a      	ands	r2, r3
   12a4a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   12a4c:	fa02 f303 	lsl.w	r3, r2, r3
   12a50:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   12a52:	4313      	orrs	r3, r2
   12a54:	930f      	str	r3, [sp, #60]	; 0x3c
  return target;
   12a56:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
   12a58:	4623      	mov	r3, r4
   12a5a:	4619      	mov	r1, r3
   12a5c:	482a      	ldr	r0, [pc, #168]	; (12b08 <Ssp::SetPeripheralMode(SspInterface::MasterSlaveMode, SspInterface::FrameMode, SspInterface::DataSize)+0x208>)
   12a5e:	f002 fd4b 	bl	154f8 <__cyg_profile_func_exit>
   12a62:	602e      	str	r6, [r5, #0]
    ssp_registers[pssp]->CR1 = bit::Insert(
        ssp_registers[pssp]->CR1, util::Value(mode), kMasterModeBit, 1);
   12a64:	4a27      	ldr	r2, [pc, #156]	; (12b04 <Ssp::SetPeripheralMode(SspInterface::MasterSlaveMode, SspInterface::FrameMode, SspInterface::DataSize)+0x204>)
   12a66:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   12a68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12a6c:	685e      	ldr	r6, [r3, #4]
    ssp_registers[pssp]->CR1 = bit::Insert(
   12a6e:	f89d 3003 	ldrb.w	r3, [sp, #3]
   12a72:	4618      	mov	r0, r3
   12a74:	f7ff ff2c 	bl	128d0 <unsigned char util::Value<SspInterface::MasterSlaveMode, unsigned char>(SspInterface::MasterSlaveMode)>
   12a78:	4603      	mov	r3, r0
   12a7a:	4619      	mov	r1, r3
   12a7c:	4a21      	ldr	r2, [pc, #132]	; (12b04 <Ssp::SetPeripheralMode(SspInterface::MasterSlaveMode, SspInterface::FrameMode, SspInterface::DataSize)+0x204>)
   12a7e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   12a80:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
   12a84:	9616      	str	r6, [sp, #88]	; 0x58
   12a86:	460b      	mov	r3, r1
   12a88:	f88d 3057 	strb.w	r3, [sp, #87]	; 0x57
   12a8c:	2302      	movs	r3, #2
   12a8e:	9314      	str	r3, [sp, #80]	; 0x50
   12a90:	2301      	movs	r3, #1
   12a92:	9313      	str	r3, [sp, #76]	; 0x4c
   12a94:	4623      	mov	r3, r4
   12a96:	4619      	mov	r1, r3
   12a98:	481b      	ldr	r0, [pc, #108]	; (12b08 <Ssp::SetPeripheralMode(SspInterface::MasterSlaveMode, SspInterface::FrameMode, SspInterface::DataSize)+0x208>)
   12a9a:	f002 fd19 	bl	154d0 <__cyg_profile_func_enter>
  constexpr UnsignedT kFieldOfOnes = GenerateFieldOfOnes<T>();
   12a9e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   12aa2:	9312      	str	r3, [sp, #72]	; 0x48
  constexpr size_t kTargetWidth     = sizeof(T) * 8;
   12aa4:	2320      	movs	r3, #32
   12aa6:	9311      	str	r3, [sp, #68]	; 0x44
  UnsignedT mask   = kFieldOfOnes >> (kTargetWidth - width);
   12aa8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   12aaa:	f1c3 0320 	rsb	r3, r3, #32
   12aae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   12ab2:	fa22 f303 	lsr.w	r3, r2, r3
   12ab6:	9310      	str	r3, [sp, #64]	; 0x40
  target &= ~(mask << position);
   12ab8:	9a10      	ldr	r2, [sp, #64]	; 0x40
   12aba:	9b14      	ldr	r3, [sp, #80]	; 0x50
   12abc:	fa02 f303 	lsl.w	r3, r2, r3
   12ac0:	43db      	mvns	r3, r3
   12ac2:	9a16      	ldr	r2, [sp, #88]	; 0x58
   12ac4:	4013      	ands	r3, r2
   12ac6:	9316      	str	r3, [sp, #88]	; 0x58
  target |= (value & mask) << position;
   12ac8:	f89d 2057 	ldrb.w	r2, [sp, #87]	; 0x57
   12acc:	9b10      	ldr	r3, [sp, #64]	; 0x40
   12ace:	401a      	ands	r2, r3
   12ad0:	9b14      	ldr	r3, [sp, #80]	; 0x50
   12ad2:	fa02 f303 	lsl.w	r3, r2, r3
   12ad6:	9a16      	ldr	r2, [sp, #88]	; 0x58
   12ad8:	4313      	orrs	r3, r2
   12ada:	9316      	str	r3, [sp, #88]	; 0x58
  return target;
   12adc:	9e16      	ldr	r6, [sp, #88]	; 0x58
   12ade:	4623      	mov	r3, r4
   12ae0:	4619      	mov	r1, r3
   12ae2:	4809      	ldr	r0, [pc, #36]	; (12b08 <Ssp::SetPeripheralMode(SspInterface::MasterSlaveMode, SspInterface::FrameMode, SspInterface::DataSize)+0x208>)
   12ae4:	f002 fd08 	bl	154f8 <__cyg_profile_func_exit>
   12ae8:	606e      	str	r6, [r5, #4]
   12aea:	4623      	mov	r3, r4
   12aec:	4619      	mov	r1, r3
   12aee:	4803      	ldr	r0, [pc, #12]	; (12afc <Ssp::SetPeripheralMode(SspInterface::MasterSlaveMode, SspInterface::FrameMode, SspInterface::DataSize)+0x1fc>)
   12af0:	f002 fd02 	bl	154f8 <__cyg_profile_func_exit>
  }
   12af4:	bf00      	nop
   12af6:	b018      	add	sp, #96	; 0x60
   12af8:	bd70      	pop	{r4, r5, r6, pc}
   12afa:	bf00      	nop
   12afc:	00012901 	.word	0x00012901
   12b00:	000189dc 	.word	0x000189dc
   12b04:	10000074 	.word	0x10000074
   12b08:	0001384d 	.word	0x0001384d

00012b0c <Ssp::GetPeripheralMode()>:
  /// Gets the Peripheral modes from registers
  /// @return - returns a 16-bit value as follows: 0000_000x 0xx0_xxxx
  ///       MasterSlaveMode = 1-bit @ bit 8
  ///       FrameMode       = 2-bit @ bit 5
  ///       DataSize        = 4-bit @ bit 0
  uint16_t GetPeripheralMode() override
   12b0c:	b570      	push	{r4, r5, r6, lr}
   12b0e:	b096      	sub	sp, #88	; 0x58
   12b10:	4674      	mov	r4, lr
   12b12:	9001      	str	r0, [sp, #4]
   12b14:	4623      	mov	r3, r4
   12b16:	4619      	mov	r1, r3
   12b18:	4850      	ldr	r0, [pc, #320]	; (12c5c <Ssp::GetPeripheralMode()+0x150>)
   12b1a:	f002 fcd9 	bl	154d0 <__cyg_profile_func_enter>
  {
    uint16_t return_val = 0;
   12b1e:	2300      	movs	r3, #0
   12b20:	f8ad 3056 	strh.w	r3, [sp, #86]	; 0x56
    uint32_t pssp       = util::Value(pssp_);
   12b24:	9b01      	ldr	r3, [sp, #4]
   12b26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   12b28:	4618      	mov	r0, r3
   12b2a:	f7ff fca7 	bl	1247c <int util::Value<Ssp::Peripheral, int>(Ssp::Peripheral)>
   12b2e:	4603      	mov	r3, r0
   12b30:	9314      	str	r3, [sp, #80]	; 0x50
    // TODO(#371): Find a better alternative to powering up the peripheral for
    // every method.
    Ssp::PowerUpPeripheral(Ssp::kPowerBit[pssp]);
   12b32:	9b01      	ldr	r3, [sp, #4]
   12b34:	1d18      	adds	r0, r3, #4
   12b36:	9b14      	ldr	r3, [sp, #80]	; 0x50
   12b38:	009b      	lsls	r3, r3, #2
   12b3a:	4a49      	ldr	r2, [pc, #292]	; (12c60 <Ssp::GetPeripheralMode()+0x154>)
   12b3c:	4413      	add	r3, r2
   12b3e:	4619      	mov	r1, r3
   12b40:	f7ff fa7e 	bl	12040 <Lpc40xxSystemController::PowerUpPeripheral(SystemControllerInterface::PeripheralID const&)>

    return_val = static_cast<uint16_t>(
        (bit::Extract(ssp_registers[pssp]->CR0, kDataBit, 4)) +
   12b44:	4a47      	ldr	r2, [pc, #284]	; (12c64 <Ssp::GetPeripheralMode()+0x158>)
   12b46:	9b14      	ldr	r3, [sp, #80]	; 0x50
   12b48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12b4c:	681b      	ldr	r3, [r3, #0]
   12b4e:	9307      	str	r3, [sp, #28]
   12b50:	2300      	movs	r3, #0
   12b52:	9306      	str	r3, [sp, #24]
   12b54:	2304      	movs	r3, #4
   12b56:	9305      	str	r3, [sp, #20]
   12b58:	4623      	mov	r3, r4
   12b5a:	4619      	mov	r1, r3
   12b5c:	4842      	ldr	r0, [pc, #264]	; (12c68 <Ssp::GetPeripheralMode()+0x15c>)
   12b5e:	f002 fcb7 	bl	154d0 <__cyg_profile_func_enter>
  constexpr UnsignedT kFieldOfOnes = GenerateFieldOfOnes<T>();
   12b62:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   12b66:	9304      	str	r3, [sp, #16]
  constexpr size_t kTargetWidth     = sizeof(T) * 8;
   12b68:	2320      	movs	r3, #32
   12b6a:	9303      	str	r3, [sp, #12]
  UnsignedT mask   = kFieldOfOnes >> (kTargetWidth - width);
   12b6c:	9b05      	ldr	r3, [sp, #20]
   12b6e:	f1c3 0320 	rsb	r3, r3, #32
   12b72:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   12b76:	fa22 f303 	lsr.w	r3, r2, r3
   12b7a:	9302      	str	r3, [sp, #8]
  return (target >> position) & mask;
   12b7c:	9a07      	ldr	r2, [sp, #28]
   12b7e:	9b06      	ldr	r3, [sp, #24]
   12b80:	40da      	lsrs	r2, r3
   12b82:	9b02      	ldr	r3, [sp, #8]
   12b84:	ea02 0503 	and.w	r5, r2, r3
   12b88:	4623      	mov	r3, r4
   12b8a:	4619      	mov	r1, r3
   12b8c:	4836      	ldr	r0, [pc, #216]	; (12c68 <Ssp::GetPeripheralMode()+0x15c>)
   12b8e:	f002 fcb3 	bl	154f8 <__cyg_profile_func_exit>
   12b92:	b2ad      	uxth	r5, r5
        ((bit::Extract(ssp_registers[pssp]->CR0, kFrameBit, 2)) << 5) +
   12b94:	4a33      	ldr	r2, [pc, #204]	; (12c64 <Ssp::GetPeripheralMode()+0x158>)
   12b96:	9b14      	ldr	r3, [sp, #80]	; 0x50
   12b98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12b9c:	681b      	ldr	r3, [r3, #0]
   12b9e:	930d      	str	r3, [sp, #52]	; 0x34
   12ba0:	2304      	movs	r3, #4
   12ba2:	930c      	str	r3, [sp, #48]	; 0x30
   12ba4:	2302      	movs	r3, #2
   12ba6:	930b      	str	r3, [sp, #44]	; 0x2c
   12ba8:	4623      	mov	r3, r4
   12baa:	4619      	mov	r1, r3
   12bac:	482e      	ldr	r0, [pc, #184]	; (12c68 <Ssp::GetPeripheralMode()+0x15c>)
   12bae:	f002 fc8f 	bl	154d0 <__cyg_profile_func_enter>
  constexpr UnsignedT kFieldOfOnes = GenerateFieldOfOnes<T>();
   12bb2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   12bb6:	930a      	str	r3, [sp, #40]	; 0x28
  constexpr size_t kTargetWidth     = sizeof(T) * 8;
   12bb8:	2320      	movs	r3, #32
   12bba:	9309      	str	r3, [sp, #36]	; 0x24
  UnsignedT mask   = kFieldOfOnes >> (kTargetWidth - width);
   12bbc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   12bbe:	f1c3 0320 	rsb	r3, r3, #32
   12bc2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   12bc6:	fa22 f303 	lsr.w	r3, r2, r3
   12bca:	9308      	str	r3, [sp, #32]
  return (target >> position) & mask;
   12bcc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   12bce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   12bd0:	40da      	lsrs	r2, r3
   12bd2:	9b08      	ldr	r3, [sp, #32]
   12bd4:	ea02 0603 	and.w	r6, r2, r3
   12bd8:	4623      	mov	r3, r4
   12bda:	4619      	mov	r1, r3
   12bdc:	4822      	ldr	r0, [pc, #136]	; (12c68 <Ssp::GetPeripheralMode()+0x15c>)
   12bde:	f002 fc8b 	bl	154f8 <__cyg_profile_func_exit>
   12be2:	b2b3      	uxth	r3, r6
   12be4:	015b      	lsls	r3, r3, #5
   12be6:	b29b      	uxth	r3, r3
        (bit::Extract(ssp_registers[pssp]->CR0, kDataBit, 4)) +
   12be8:	442b      	add	r3, r5
   12bea:	b29d      	uxth	r5, r3
        ((bit::Extract(ssp_registers[pssp]->CR1, kMasterModeBit)) << 8));
   12bec:	4a1d      	ldr	r2, [pc, #116]	; (12c64 <Ssp::GetPeripheralMode()+0x158>)
   12bee:	9b14      	ldr	r3, [sp, #80]	; 0x50
   12bf0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12bf4:	685b      	ldr	r3, [r3, #4]
   12bf6:	9313      	str	r3, [sp, #76]	; 0x4c
   12bf8:	2302      	movs	r3, #2
   12bfa:	9312      	str	r3, [sp, #72]	; 0x48
   12bfc:	2301      	movs	r3, #1
   12bfe:	9311      	str	r3, [sp, #68]	; 0x44
   12c00:	4623      	mov	r3, r4
   12c02:	4619      	mov	r1, r3
   12c04:	4818      	ldr	r0, [pc, #96]	; (12c68 <Ssp::GetPeripheralMode()+0x15c>)
   12c06:	f002 fc63 	bl	154d0 <__cyg_profile_func_enter>
  constexpr UnsignedT kFieldOfOnes = GenerateFieldOfOnes<T>();
   12c0a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   12c0e:	9310      	str	r3, [sp, #64]	; 0x40
  constexpr size_t kTargetWidth     = sizeof(T) * 8;
   12c10:	2320      	movs	r3, #32
   12c12:	930f      	str	r3, [sp, #60]	; 0x3c
  UnsignedT mask   = kFieldOfOnes >> (kTargetWidth - width);
   12c14:	9b11      	ldr	r3, [sp, #68]	; 0x44
   12c16:	f1c3 0320 	rsb	r3, r3, #32
   12c1a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   12c1e:	fa22 f303 	lsr.w	r3, r2, r3
   12c22:	930e      	str	r3, [sp, #56]	; 0x38
  return (target >> position) & mask;
   12c24:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   12c26:	9b12      	ldr	r3, [sp, #72]	; 0x48
   12c28:	40da      	lsrs	r2, r3
   12c2a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   12c2c:	ea02 0603 	and.w	r6, r2, r3
   12c30:	4623      	mov	r3, r4
   12c32:	4619      	mov	r1, r3
   12c34:	480c      	ldr	r0, [pc, #48]	; (12c68 <Ssp::GetPeripheralMode()+0x15c>)
   12c36:	f002 fc5f 	bl	154f8 <__cyg_profile_func_exit>
   12c3a:	b2b3      	uxth	r3, r6
   12c3c:	021b      	lsls	r3, r3, #8
   12c3e:	b29b      	uxth	r3, r3
    return_val = static_cast<uint16_t>(
   12c40:	442b      	add	r3, r5
   12c42:	f8ad 3056 	strh.w	r3, [sp, #86]	; 0x56
    return return_val;
   12c46:	f8bd 5056 	ldrh.w	r5, [sp, #86]	; 0x56
   12c4a:	4623      	mov	r3, r4
   12c4c:	4619      	mov	r1, r3
   12c4e:	4803      	ldr	r0, [pc, #12]	; (12c5c <Ssp::GetPeripheralMode()+0x150>)
   12c50:	f002 fc52 	bl	154f8 <__cyg_profile_func_exit>
   12c54:	462b      	mov	r3, r5
  }
   12c56:	4618      	mov	r0, r3
   12c58:	b016      	add	sp, #88	; 0x58
   12c5a:	bd70      	pop	{r4, r5, r6, pc}
   12c5c:	00012b0d 	.word	0x00012b0d
   12c60:	000189dc 	.word	0x000189dc
   12c64:	10000074 	.word	0x10000074
   12c68:	000138c1 	.word	0x000138c1

00012c6c <Ssp::SetClock(bool, bool, unsigned char, unsigned char)>:
  /// Sets the clock rate for the Peripheral
  /// @param polarity - maintain bus on clock 0=low or 1=high between frames
  /// @param phase - capture serial data on 0=first or 1=second clock cycle
  /// @param divider - see notes in SSP_Interface above
  /// @param prescaler - divides the PCLK, must be even value between 2-254
  void SetClock(bool polarity, bool phase, uint8_t divider,
   12c6c:	b570      	push	{r4, r5, r6, lr}
   12c6e:	b098      	sub	sp, #96	; 0x60
   12c70:	4674      	mov	r4, lr
   12c72:	9001      	str	r0, [sp, #4]
   12c74:	4608      	mov	r0, r1
   12c76:	4611      	mov	r1, r2
   12c78:	461a      	mov	r2, r3
   12c7a:	4603      	mov	r3, r0
   12c7c:	f88d 3003 	strb.w	r3, [sp, #3]
   12c80:	460b      	mov	r3, r1
   12c82:	f88d 3002 	strb.w	r3, [sp, #2]
   12c86:	4613      	mov	r3, r2
   12c88:	f88d 3001 	strb.w	r3, [sp, #1]
   12c8c:	4623      	mov	r3, r4
   12c8e:	4619      	mov	r1, r3
   12c90:	486c      	ldr	r0, [pc, #432]	; (12e44 <Ssp::SetClock(bool, bool, unsigned char, unsigned char)+0x1d8>)
   12c92:	f002 fc1d 	bl	154d0 <__cyg_profile_func_enter>
                uint8_t prescaler) override
  {
    uint32_t pssp = util::Value(pssp_);
   12c96:	9b01      	ldr	r3, [sp, #4]
   12c98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   12c9a:	4618      	mov	r0, r3
   12c9c:	f7ff fbee 	bl	1247c <int util::Value<Ssp::Peripheral, int>(Ssp::Peripheral)>
   12ca0:	4603      	mov	r3, r0
   12ca2:	9317      	str	r3, [sp, #92]	; 0x5c
    // TODO(#371): Find a better alternative to powering up the peripheral for
    // every method.
    Ssp::PowerUpPeripheral(Ssp::kPowerBit[pssp]);
   12ca4:	9b01      	ldr	r3, [sp, #4]
   12ca6:	1d18      	adds	r0, r3, #4
   12ca8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   12caa:	009b      	lsls	r3, r3, #2
   12cac:	4a66      	ldr	r2, [pc, #408]	; (12e48 <Ssp::SetClock(bool, bool, unsigned char, unsigned char)+0x1dc>)
   12cae:	4413      	add	r3, r2
   12cb0:	4619      	mov	r1, r3
   12cb2:	f7ff f9c5 	bl	12040 <Lpc40xxSystemController::PowerUpPeripheral(SystemControllerInterface::PeripheralID const&)>
    // first clear the appropriate registers
    ssp_registers[pssp]->CR0 =
        bit::Insert(ssp_registers[pssp]->CR0, polarity, kPolarityBit, 1);
   12cb6:	4a65      	ldr	r2, [pc, #404]	; (12e4c <Ssp::SetClock(bool, bool, unsigned char, unsigned char)+0x1e0>)
   12cb8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   12cba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12cbe:	681b      	ldr	r3, [r3, #0]
    ssp_registers[pssp]->CR0 =
   12cc0:	4962      	ldr	r1, [pc, #392]	; (12e4c <Ssp::SetClock(bool, bool, unsigned char, unsigned char)+0x1e0>)
   12cc2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   12cc4:	f851 5022 	ldr.w	r5, [r1, r2, lsl #2]
   12cc8:	9308      	str	r3, [sp, #32]
   12cca:	f89d 3003 	ldrb.w	r3, [sp, #3]
   12cce:	f88d 301f 	strb.w	r3, [sp, #31]
   12cd2:	2306      	movs	r3, #6
   12cd4:	9306      	str	r3, [sp, #24]
   12cd6:	2301      	movs	r3, #1
   12cd8:	9305      	str	r3, [sp, #20]
   12cda:	4623      	mov	r3, r4
   12cdc:	4619      	mov	r1, r3
   12cde:	485c      	ldr	r0, [pc, #368]	; (12e50 <Ssp::SetClock(bool, bool, unsigned char, unsigned char)+0x1e4>)
   12ce0:	f002 fbf6 	bl	154d0 <__cyg_profile_func_enter>
  constexpr UnsignedT kFieldOfOnes = GenerateFieldOfOnes<T>();
   12ce4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   12ce8:	9304      	str	r3, [sp, #16]
  constexpr size_t kTargetWidth     = sizeof(T) * 8;
   12cea:	2320      	movs	r3, #32
   12cec:	9303      	str	r3, [sp, #12]
  UnsignedT mask   = kFieldOfOnes >> (kTargetWidth - width);
   12cee:	9b05      	ldr	r3, [sp, #20]
   12cf0:	f1c3 0320 	rsb	r3, r3, #32
   12cf4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   12cf8:	fa22 f303 	lsr.w	r3, r2, r3
   12cfc:	9302      	str	r3, [sp, #8]
  target &= ~(mask << position);
   12cfe:	9a02      	ldr	r2, [sp, #8]
   12d00:	9b06      	ldr	r3, [sp, #24]
   12d02:	fa02 f303 	lsl.w	r3, r2, r3
   12d06:	43db      	mvns	r3, r3
   12d08:	9a08      	ldr	r2, [sp, #32]
   12d0a:	4013      	ands	r3, r2
   12d0c:	9308      	str	r3, [sp, #32]
  target |= (value & mask) << position;
   12d0e:	f89d 201f 	ldrb.w	r2, [sp, #31]
   12d12:	9b02      	ldr	r3, [sp, #8]
   12d14:	401a      	ands	r2, r3
   12d16:	9b06      	ldr	r3, [sp, #24]
   12d18:	fa02 f303 	lsl.w	r3, r2, r3
   12d1c:	9a08      	ldr	r2, [sp, #32]
   12d1e:	4313      	orrs	r3, r2
   12d20:	9308      	str	r3, [sp, #32]
  return target;
   12d22:	9e08      	ldr	r6, [sp, #32]
   12d24:	4623      	mov	r3, r4
   12d26:	4619      	mov	r1, r3
   12d28:	4849      	ldr	r0, [pc, #292]	; (12e50 <Ssp::SetClock(bool, bool, unsigned char, unsigned char)+0x1e4>)
   12d2a:	f002 fbe5 	bl	154f8 <__cyg_profile_func_exit>
   12d2e:	602e      	str	r6, [r5, #0]
    ssp_registers[pssp]->CR0 =
        bit::Insert(ssp_registers[pssp]->CR0, phase, kPhaseBit, 1);
   12d30:	4a46      	ldr	r2, [pc, #280]	; (12e4c <Ssp::SetClock(bool, bool, unsigned char, unsigned char)+0x1e0>)
   12d32:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   12d34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12d38:	681b      	ldr	r3, [r3, #0]
    ssp_registers[pssp]->CR0 =
   12d3a:	4944      	ldr	r1, [pc, #272]	; (12e4c <Ssp::SetClock(bool, bool, unsigned char, unsigned char)+0x1e0>)
   12d3c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   12d3e:	f851 5022 	ldr.w	r5, [r1, r2, lsl #2]
   12d42:	930f      	str	r3, [sp, #60]	; 0x3c
   12d44:	f89d 3002 	ldrb.w	r3, [sp, #2]
   12d48:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
   12d4c:	2307      	movs	r3, #7
   12d4e:	930d      	str	r3, [sp, #52]	; 0x34
   12d50:	2301      	movs	r3, #1
   12d52:	930c      	str	r3, [sp, #48]	; 0x30
   12d54:	4623      	mov	r3, r4
   12d56:	4619      	mov	r1, r3
   12d58:	483d      	ldr	r0, [pc, #244]	; (12e50 <Ssp::SetClock(bool, bool, unsigned char, unsigned char)+0x1e4>)
   12d5a:	f002 fbb9 	bl	154d0 <__cyg_profile_func_enter>
  constexpr UnsignedT kFieldOfOnes = GenerateFieldOfOnes<T>();
   12d5e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   12d62:	930b      	str	r3, [sp, #44]	; 0x2c
  constexpr size_t kTargetWidth     = sizeof(T) * 8;
   12d64:	2320      	movs	r3, #32
   12d66:	930a      	str	r3, [sp, #40]	; 0x28
  UnsignedT mask   = kFieldOfOnes >> (kTargetWidth - width);
   12d68:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   12d6a:	f1c3 0320 	rsb	r3, r3, #32
   12d6e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   12d72:	fa22 f303 	lsr.w	r3, r2, r3
   12d76:	9309      	str	r3, [sp, #36]	; 0x24
  target &= ~(mask << position);
   12d78:	9a09      	ldr	r2, [sp, #36]	; 0x24
   12d7a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   12d7c:	fa02 f303 	lsl.w	r3, r2, r3
   12d80:	43db      	mvns	r3, r3
   12d82:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   12d84:	4013      	ands	r3, r2
   12d86:	930f      	str	r3, [sp, #60]	; 0x3c
  target |= (value & mask) << position;
   12d88:	f89d 203b 	ldrb.w	r2, [sp, #59]	; 0x3b
   12d8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   12d8e:	401a      	ands	r2, r3
   12d90:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   12d92:	fa02 f303 	lsl.w	r3, r2, r3
   12d96:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   12d98:	4313      	orrs	r3, r2
   12d9a:	930f      	str	r3, [sp, #60]	; 0x3c
  return target;
   12d9c:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
   12d9e:	4623      	mov	r3, r4
   12da0:	4619      	mov	r1, r3
   12da2:	482b      	ldr	r0, [pc, #172]	; (12e50 <Ssp::SetClock(bool, bool, unsigned char, unsigned char)+0x1e4>)
   12da4:	f002 fba8 	bl	154f8 <__cyg_profile_func_exit>
   12da8:	602e      	str	r6, [r5, #0]
    ssp_registers[pssp]->CR0 =
        bit::Insert(ssp_registers[pssp]->CR0, divider, kDividerBit, 8);
   12daa:	4a28      	ldr	r2, [pc, #160]	; (12e4c <Ssp::SetClock(bool, bool, unsigned char, unsigned char)+0x1e0>)
   12dac:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   12dae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12db2:	681b      	ldr	r3, [r3, #0]
    ssp_registers[pssp]->CR0 =
   12db4:	4925      	ldr	r1, [pc, #148]	; (12e4c <Ssp::SetClock(bool, bool, unsigned char, unsigned char)+0x1e0>)
   12db6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   12db8:	f851 5022 	ldr.w	r5, [r1, r2, lsl #2]
   12dbc:	9316      	str	r3, [sp, #88]	; 0x58
   12dbe:	f89d 3001 	ldrb.w	r3, [sp, #1]
   12dc2:	f88d 3057 	strb.w	r3, [sp, #87]	; 0x57
   12dc6:	2308      	movs	r3, #8
   12dc8:	9314      	str	r3, [sp, #80]	; 0x50
   12dca:	2308      	movs	r3, #8
   12dcc:	9313      	str	r3, [sp, #76]	; 0x4c
   12dce:	4623      	mov	r3, r4
   12dd0:	4619      	mov	r1, r3
   12dd2:	4820      	ldr	r0, [pc, #128]	; (12e54 <Ssp::SetClock(bool, bool, unsigned char, unsigned char)+0x1e8>)
   12dd4:	f002 fb7c 	bl	154d0 <__cyg_profile_func_enter>
  constexpr UnsignedT kFieldOfOnes = GenerateFieldOfOnes<T>();
   12dd8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   12ddc:	9312      	str	r3, [sp, #72]	; 0x48
  constexpr size_t kTargetWidth     = sizeof(T) * 8;
   12dde:	2320      	movs	r3, #32
   12de0:	9311      	str	r3, [sp, #68]	; 0x44
  UnsignedT mask   = kFieldOfOnes >> (kTargetWidth - width);
   12de2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   12de4:	f1c3 0320 	rsb	r3, r3, #32
   12de8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   12dec:	fa22 f303 	lsr.w	r3, r2, r3
   12df0:	9310      	str	r3, [sp, #64]	; 0x40
  target &= ~(mask << position);
   12df2:	9a10      	ldr	r2, [sp, #64]	; 0x40
   12df4:	9b14      	ldr	r3, [sp, #80]	; 0x50
   12df6:	fa02 f303 	lsl.w	r3, r2, r3
   12dfa:	43db      	mvns	r3, r3
   12dfc:	9a16      	ldr	r2, [sp, #88]	; 0x58
   12dfe:	4013      	ands	r3, r2
   12e00:	9316      	str	r3, [sp, #88]	; 0x58
  target |= (value & mask) << position;
   12e02:	f89d 2057 	ldrb.w	r2, [sp, #87]	; 0x57
   12e06:	9b10      	ldr	r3, [sp, #64]	; 0x40
   12e08:	401a      	ands	r2, r3
   12e0a:	9b14      	ldr	r3, [sp, #80]	; 0x50
   12e0c:	fa02 f303 	lsl.w	r3, r2, r3
   12e10:	9a16      	ldr	r2, [sp, #88]	; 0x58
   12e12:	4313      	orrs	r3, r2
   12e14:	9316      	str	r3, [sp, #88]	; 0x58
  return target;
   12e16:	9e16      	ldr	r6, [sp, #88]	; 0x58
   12e18:	4623      	mov	r3, r4
   12e1a:	4619      	mov	r1, r3
   12e1c:	480d      	ldr	r0, [pc, #52]	; (12e54 <Ssp::SetClock(bool, bool, unsigned char, unsigned char)+0x1e8>)
   12e1e:	f002 fb6b 	bl	154f8 <__cyg_profile_func_exit>
   12e22:	602e      	str	r6, [r5, #0]
    ssp_registers[pssp]->CPSR = prescaler;
   12e24:	4a09      	ldr	r2, [pc, #36]	; (12e4c <Ssp::SetClock(bool, bool, unsigned char, unsigned char)+0x1e0>)
   12e26:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   12e28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12e2c:	f89d 2070 	ldrb.w	r2, [sp, #112]	; 0x70
   12e30:	611a      	str	r2, [r3, #16]
   12e32:	4623      	mov	r3, r4
   12e34:	4619      	mov	r1, r3
   12e36:	4803      	ldr	r0, [pc, #12]	; (12e44 <Ssp::SetClock(bool, bool, unsigned char, unsigned char)+0x1d8>)
   12e38:	f002 fb5e 	bl	154f8 <__cyg_profile_func_exit>
  }
   12e3c:	bf00      	nop
   12e3e:	b018      	add	sp, #96	; 0x60
   12e40:	bd70      	pop	{r4, r5, r6, pc}
   12e42:	bf00      	nop
   12e44:	00012c6d 	.word	0x00012c6d
   12e48:	000189dc 	.word	0x000189dc
   12e4c:	10000074 	.word	0x10000074
   12e50:	00013915 	.word	0x00013915
   12e54:	0001384d 	.word	0x0001384d

00012e58 <Ssp::GetClock()>:
  ///   0000_0000 0000_0x0x xxxx_xxxx xxxx_xxxx
  ///       polarity    = 1-bit @ bit 18
  ///       phase       = 1-bit @ bit 16
  ///       divider     = 8-bits @ bit 8
  ///       prescaler   = 8-bits @ bit 0
  uint32_t GetClock() override
   12e58:	b570      	push	{r4, r5, r6, lr}
   12e5a:	b094      	sub	sp, #80	; 0x50
   12e5c:	4674      	mov	r4, lr
   12e5e:	9001      	str	r0, [sp, #4]
   12e60:	4623      	mov	r3, r4
   12e62:	4619      	mov	r1, r3
   12e64:	4858      	ldr	r0, [pc, #352]	; (12fc8 <Ssp::GetClock()+0x170>)
   12e66:	f002 fb33 	bl	154d0 <__cyg_profile_func_enter>
  {
    uint32_t return_val = 0;
   12e6a:	2300      	movs	r3, #0
   12e6c:	9313      	str	r3, [sp, #76]	; 0x4c
    uint32_t pssp       = util::Value(pssp_);
   12e6e:	9b01      	ldr	r3, [sp, #4]
   12e70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   12e72:	4618      	mov	r0, r3
   12e74:	f7ff fb02 	bl	1247c <int util::Value<Ssp::Peripheral, int>(Ssp::Peripheral)>
   12e78:	4603      	mov	r3, r0
   12e7a:	9312      	str	r3, [sp, #72]	; 0x48
    // TODO(#371): Find a better alternative to powering up the peripheral for
    // every method.
    Ssp::PowerUpPeripheral(Ssp::kPowerBit[pssp]);
   12e7c:	9b01      	ldr	r3, [sp, #4]
   12e7e:	1d18      	adds	r0, r3, #4
   12e80:	9b12      	ldr	r3, [sp, #72]	; 0x48
   12e82:	009b      	lsls	r3, r3, #2
   12e84:	4a51      	ldr	r2, [pc, #324]	; (12fcc <Ssp::GetClock()+0x174>)
   12e86:	4413      	add	r3, r2
   12e88:	4619      	mov	r1, r3
   12e8a:	f7ff f8d9 	bl	12040 <Lpc40xxSystemController::PowerUpPeripheral(SystemControllerInterface::PeripheralID const&)>

    return_val =
        (bit::Extract(ssp_registers[pssp]->CPSR, kPrescalerBit, 8)) +
   12e8e:	4a50      	ldr	r2, [pc, #320]	; (12fd0 <Ssp::GetClock()+0x178>)
   12e90:	9b12      	ldr	r3, [sp, #72]	; 0x48
   12e92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12e96:	691b      	ldr	r3, [r3, #16]
   12e98:	9307      	str	r3, [sp, #28]
   12e9a:	2300      	movs	r3, #0
   12e9c:	9306      	str	r3, [sp, #24]
   12e9e:	2308      	movs	r3, #8
   12ea0:	9305      	str	r3, [sp, #20]
   12ea2:	4623      	mov	r3, r4
   12ea4:	4619      	mov	r1, r3
   12ea6:	484b      	ldr	r0, [pc, #300]	; (12fd4 <Ssp::GetClock()+0x17c>)
   12ea8:	f002 fb12 	bl	154d0 <__cyg_profile_func_enter>
  constexpr UnsignedT kFieldOfOnes = GenerateFieldOfOnes<T>();
   12eac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   12eb0:	9304      	str	r3, [sp, #16]
  constexpr size_t kTargetWidth     = sizeof(T) * 8;
   12eb2:	2320      	movs	r3, #32
   12eb4:	9303      	str	r3, [sp, #12]
  UnsignedT mask   = kFieldOfOnes >> (kTargetWidth - width);
   12eb6:	9b05      	ldr	r3, [sp, #20]
   12eb8:	f1c3 0320 	rsb	r3, r3, #32
   12ebc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   12ec0:	fa22 f303 	lsr.w	r3, r2, r3
   12ec4:	9302      	str	r3, [sp, #8]
  return (target >> position) & mask;
   12ec6:	9a07      	ldr	r2, [sp, #28]
   12ec8:	9b06      	ldr	r3, [sp, #24]
   12eca:	40da      	lsrs	r2, r3
   12ecc:	9b02      	ldr	r3, [sp, #8]
   12ece:	ea02 0503 	and.w	r5, r2, r3
   12ed2:	4623      	mov	r3, r4
   12ed4:	4619      	mov	r1, r3
   12ed6:	483f      	ldr	r0, [pc, #252]	; (12fd4 <Ssp::GetClock()+0x17c>)
   12ed8:	f002 fb0e 	bl	154f8 <__cyg_profile_func_exit>
        ((bit::Extract(ssp_registers[pssp]->CR0, kDividerBit, 8)) << 8) +
   12edc:	4a3c      	ldr	r2, [pc, #240]	; (12fd0 <Ssp::GetClock()+0x178>)
   12ede:	9b12      	ldr	r3, [sp, #72]	; 0x48
   12ee0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12ee4:	681b      	ldr	r3, [r3, #0]
   12ee6:	930d      	str	r3, [sp, #52]	; 0x34
   12ee8:	2308      	movs	r3, #8
   12eea:	930c      	str	r3, [sp, #48]	; 0x30
   12eec:	2308      	movs	r3, #8
   12eee:	930b      	str	r3, [sp, #44]	; 0x2c
   12ef0:	4623      	mov	r3, r4
   12ef2:	4619      	mov	r1, r3
   12ef4:	4837      	ldr	r0, [pc, #220]	; (12fd4 <Ssp::GetClock()+0x17c>)
   12ef6:	f002 faeb 	bl	154d0 <__cyg_profile_func_enter>
  constexpr UnsignedT kFieldOfOnes = GenerateFieldOfOnes<T>();
   12efa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   12efe:	930a      	str	r3, [sp, #40]	; 0x28
  constexpr size_t kTargetWidth     = sizeof(T) * 8;
   12f00:	2320      	movs	r3, #32
   12f02:	9309      	str	r3, [sp, #36]	; 0x24
  UnsignedT mask   = kFieldOfOnes >> (kTargetWidth - width);
   12f04:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   12f06:	f1c3 0320 	rsb	r3, r3, #32
   12f0a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   12f0e:	fa22 f303 	lsr.w	r3, r2, r3
   12f12:	9308      	str	r3, [sp, #32]
  return (target >> position) & mask;
   12f14:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   12f16:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   12f18:	40da      	lsrs	r2, r3
   12f1a:	9b08      	ldr	r3, [sp, #32]
   12f1c:	ea02 0603 	and.w	r6, r2, r3
   12f20:	4623      	mov	r3, r4
   12f22:	4619      	mov	r1, r3
   12f24:	482b      	ldr	r0, [pc, #172]	; (12fd4 <Ssp::GetClock()+0x17c>)
   12f26:	f002 fae7 	bl	154f8 <__cyg_profile_func_exit>
   12f2a:	0233      	lsls	r3, r6, #8
        (bit::Extract(ssp_registers[pssp]->CPSR, kPrescalerBit, 8)) +
   12f2c:	441d      	add	r5, r3
        ((bit::Read(ssp_registers[pssp]->CR0, kPhaseBit)) << 16) +
   12f2e:	4a28      	ldr	r2, [pc, #160]	; (12fd0 <Ssp::GetClock()+0x178>)
   12f30:	9b12      	ldr	r3, [sp, #72]	; 0x48
   12f32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12f36:	681b      	ldr	r3, [r3, #0]
   12f38:	930f      	str	r3, [sp, #60]	; 0x3c
   12f3a:	2307      	movs	r3, #7
   12f3c:	930e      	str	r3, [sp, #56]	; 0x38
   12f3e:	4623      	mov	r3, r4
   12f40:	4619      	mov	r1, r3
   12f42:	4825      	ldr	r0, [pc, #148]	; (12fd8 <Ssp::GetClock()+0x180>)
   12f44:	f002 fac4 	bl	154d0 <__cyg_profile_func_enter>
  return static_cast<bool>(target & (1 << position));
   12f48:	2201      	movs	r2, #1
   12f4a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   12f4c:	fa02 f303 	lsl.w	r3, r2, r3
   12f50:	461a      	mov	r2, r3
   12f52:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   12f54:	4013      	ands	r3, r2
   12f56:	2b00      	cmp	r3, #0
   12f58:	bf14      	ite	ne
   12f5a:	2301      	movne	r3, #1
   12f5c:	2300      	moveq	r3, #0
   12f5e:	b2de      	uxtb	r6, r3
   12f60:	4623      	mov	r3, r4
   12f62:	4619      	mov	r1, r3
   12f64:	481c      	ldr	r0, [pc, #112]	; (12fd8 <Ssp::GetClock()+0x180>)
   12f66:	f002 fac7 	bl	154f8 <__cyg_profile_func_exit>
   12f6a:	4633      	mov	r3, r6
   12f6c:	041b      	lsls	r3, r3, #16
        ((bit::Extract(ssp_registers[pssp]->CR0, kDividerBit, 8)) << 8) +
   12f6e:	441d      	add	r5, r3
        ((bit::Read(ssp_registers[pssp]->CR0, kPolarityBit)) << 18);
   12f70:	4a17      	ldr	r2, [pc, #92]	; (12fd0 <Ssp::GetClock()+0x178>)
   12f72:	9b12      	ldr	r3, [sp, #72]	; 0x48
   12f74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12f78:	681b      	ldr	r3, [r3, #0]
   12f7a:	9311      	str	r3, [sp, #68]	; 0x44
   12f7c:	2306      	movs	r3, #6
   12f7e:	9310      	str	r3, [sp, #64]	; 0x40
   12f80:	4623      	mov	r3, r4
   12f82:	4619      	mov	r1, r3
   12f84:	4814      	ldr	r0, [pc, #80]	; (12fd8 <Ssp::GetClock()+0x180>)
   12f86:	f002 faa3 	bl	154d0 <__cyg_profile_func_enter>
   12f8a:	2201      	movs	r2, #1
   12f8c:	9b10      	ldr	r3, [sp, #64]	; 0x40
   12f8e:	fa02 f303 	lsl.w	r3, r2, r3
   12f92:	461a      	mov	r2, r3
   12f94:	9b11      	ldr	r3, [sp, #68]	; 0x44
   12f96:	4013      	ands	r3, r2
   12f98:	2b00      	cmp	r3, #0
   12f9a:	bf14      	ite	ne
   12f9c:	2301      	movne	r3, #1
   12f9e:	2300      	moveq	r3, #0
   12fa0:	b2de      	uxtb	r6, r3
   12fa2:	4623      	mov	r3, r4
   12fa4:	4619      	mov	r1, r3
   12fa6:	480c      	ldr	r0, [pc, #48]	; (12fd8 <Ssp::GetClock()+0x180>)
   12fa8:	f002 faa6 	bl	154f8 <__cyg_profile_func_exit>
   12fac:	4633      	mov	r3, r6
   12fae:	049b      	lsls	r3, r3, #18
    return_val =
   12fb0:	442b      	add	r3, r5
   12fb2:	9313      	str	r3, [sp, #76]	; 0x4c

    return return_val;
   12fb4:	9d13      	ldr	r5, [sp, #76]	; 0x4c
   12fb6:	4623      	mov	r3, r4
   12fb8:	4619      	mov	r1, r3
   12fba:	4803      	ldr	r0, [pc, #12]	; (12fc8 <Ssp::GetClock()+0x170>)
   12fbc:	f002 fa9c 	bl	154f8 <__cyg_profile_func_exit>
   12fc0:	462b      	mov	r3, r5
  }
   12fc2:	4618      	mov	r0, r3
   12fc4:	b014      	add	sp, #80	; 0x50
   12fc6:	bd70      	pop	{r4, r5, r6, pc}
   12fc8:	00012e59 	.word	0x00012e59
   12fcc:	000189dc 	.word	0x000189dc
   12fd0:	10000074 	.word	0x10000074
   12fd4:	000138c1 	.word	0x000138c1
   12fd8:	00013809 	.word	0x00013809

00012fdc <PixelDisplayInterface::Color_t::Color_t(bool, bool, bool, unsigned char, unsigned char, bool)>:
class PixelDisplayInterface
{
 public:
  SJ2_PACKED(struct) Color_t
  {
    Color_t(bool r, bool g, bool b, uint8_t a, uint8_t bits,
   12fdc:	b530      	push	{r4, r5, lr}
   12fde:	b083      	sub	sp, #12
   12fe0:	4675      	mov	r5, lr
   12fe2:	9001      	str	r0, [sp, #4]
   12fe4:	4608      	mov	r0, r1
   12fe6:	4611      	mov	r1, r2
   12fe8:	461a      	mov	r2, r3
   12fea:	4603      	mov	r3, r0
   12fec:	f88d 3003 	strb.w	r3, [sp, #3]
   12ff0:	460b      	mov	r3, r1
   12ff2:	f88d 3002 	strb.w	r3, [sp, #2]
   12ff6:	4613      	mov	r3, r2
   12ff8:	f88d 3001 	strb.w	r3, [sp, #1]
   12ffc:	462b      	mov	r3, r5
   12ffe:	4619      	mov	r1, r3
   13000:	481a      	ldr	r0, [pc, #104]	; (1306c <PixelDisplayInterface::Color_t::Color_t(bool, bool, bool, unsigned char, unsigned char, bool)+0x90>)
   13002:	f002 fa65 	bl	154d0 <__cyg_profile_func_enter>
          red(r),
          green(g),
          blue(b),
          padding(0),
          color_bits(bits),
          alpha(a)
   13006:	9a01      	ldr	r2, [sp, #4]
   13008:	7813      	ldrb	r3, [r2, #0]
   1300a:	f89d 1020 	ldrb.w	r1, [sp, #32]
   1300e:	f361 0300 	bfi	r3, r1, #0, #1
   13012:	7013      	strb	r3, [r2, #0]
   13014:	9a01      	ldr	r2, [sp, #4]
   13016:	7813      	ldrb	r3, [r2, #0]
   13018:	f89d 1003 	ldrb.w	r1, [sp, #3]
   1301c:	f361 0341 	bfi	r3, r1, #1, #1
   13020:	7013      	strb	r3, [r2, #0]
   13022:	9a01      	ldr	r2, [sp, #4]
   13024:	7813      	ldrb	r3, [r2, #0]
   13026:	f89d 1002 	ldrb.w	r1, [sp, #2]
   1302a:	f361 0382 	bfi	r3, r1, #2, #1
   1302e:	7013      	strb	r3, [r2, #0]
   13030:	9a01      	ldr	r2, [sp, #4]
   13032:	7813      	ldrb	r3, [r2, #0]
   13034:	f89d 1001 	ldrb.w	r1, [sp, #1]
   13038:	f361 03c3 	bfi	r3, r1, #3, #1
   1303c:	7013      	strb	r3, [r2, #0]
   1303e:	9a01      	ldr	r2, [sp, #4]
   13040:	7813      	ldrb	r3, [r2, #0]
   13042:	f36f 1307 	bfc	r3, #4, #4
   13046:	7013      	strb	r3, [r2, #0]
   13048:	9b01      	ldr	r3, [sp, #4]
   1304a:	f89d 201c 	ldrb.w	r2, [sp, #28]
   1304e:	705a      	strb	r2, [r3, #1]
   13050:	9b01      	ldr	r3, [sp, #4]
   13052:	f89d 2018 	ldrb.w	r2, [sp, #24]
   13056:	709a      	strb	r2, [r3, #2]
    {
    }
   13058:	9c01      	ldr	r4, [sp, #4]
   1305a:	462b      	mov	r3, r5
   1305c:	4619      	mov	r1, r3
   1305e:	4803      	ldr	r0, [pc, #12]	; (1306c <PixelDisplayInterface::Color_t::Color_t(bool, bool, bool, unsigned char, unsigned char, bool)+0x90>)
   13060:	f002 fa4a 	bl	154f8 <__cyg_profile_func_exit>
   13064:	4623      	mov	r3, r4
   13066:	4618      	mov	r0, r3
   13068:	b003      	add	sp, #12
   1306a:	bd30      	pop	{r4, r5, pc}
   1306c:	00012fdd 	.word	0x00012fdd

00013070 <PixelDisplayInterface::Color_t::Color_t()>:
    Color_t()
   13070:	b530      	push	{r4, r5, lr}
   13072:	b083      	sub	sp, #12
   13074:	4675      	mov	r5, lr
   13076:	9001      	str	r0, [sp, #4]
   13078:	462b      	mov	r3, r5
   1307a:	4619      	mov	r1, r3
   1307c:	4815      	ldr	r0, [pc, #84]	; (130d4 <PixelDisplayInterface::Color_t::Color_t()+0x64>)
   1307e:	f002 fa27 	bl	154d0 <__cyg_profile_func_enter>
          red(false),
          green(false),
          blue(false),
          padding(0),
          color_bits(0),
          alpha(0)
   13082:	9a01      	ldr	r2, [sp, #4]
   13084:	7813      	ldrb	r3, [r2, #0]
   13086:	f36f 0300 	bfc	r3, #0, #1
   1308a:	7013      	strb	r3, [r2, #0]
   1308c:	9a01      	ldr	r2, [sp, #4]
   1308e:	7813      	ldrb	r3, [r2, #0]
   13090:	f36f 0341 	bfc	r3, #1, #1
   13094:	7013      	strb	r3, [r2, #0]
   13096:	9a01      	ldr	r2, [sp, #4]
   13098:	7813      	ldrb	r3, [r2, #0]
   1309a:	f36f 0382 	bfc	r3, #2, #1
   1309e:	7013      	strb	r3, [r2, #0]
   130a0:	9a01      	ldr	r2, [sp, #4]
   130a2:	7813      	ldrb	r3, [r2, #0]
   130a4:	f36f 03c3 	bfc	r3, #3, #1
   130a8:	7013      	strb	r3, [r2, #0]
   130aa:	9a01      	ldr	r2, [sp, #4]
   130ac:	7813      	ldrb	r3, [r2, #0]
   130ae:	f36f 1307 	bfc	r3, #4, #4
   130b2:	7013      	strb	r3, [r2, #0]
   130b4:	9b01      	ldr	r3, [sp, #4]
   130b6:	2200      	movs	r2, #0
   130b8:	705a      	strb	r2, [r3, #1]
   130ba:	9b01      	ldr	r3, [sp, #4]
   130bc:	2200      	movs	r2, #0
   130be:	709a      	strb	r2, [r3, #2]
    {
    }
   130c0:	9c01      	ldr	r4, [sp, #4]
   130c2:	462b      	mov	r3, r5
   130c4:	4619      	mov	r1, r3
   130c6:	4803      	ldr	r0, [pc, #12]	; (130d4 <PixelDisplayInterface::Color_t::Color_t()+0x64>)
   130c8:	f002 fa16 	bl	154f8 <__cyg_profile_func_exit>
   130cc:	4623      	mov	r3, r4
   130ce:	4618      	mov	r0, r3
   130d0:	b003      	add	sp, #12
   130d2:	bd30      	pop	{r4, r5, pc}
   130d4:	00013071 	.word	0x00013071

000130d8 <PixelDisplayInterface::Enable()>:
  /// @returns a color object with the available colors.
  virtual Color_t AvailableColors() = 0;
  /// Configure hardware peripherals and initialize external display hardware
  virtual void Initialize() = 0;
  /// Optional method to turn on display if applicable
  virtual void Enable() {}
   130d8:	b510      	push	{r4, lr}
   130da:	b082      	sub	sp, #8
   130dc:	4674      	mov	r4, lr
   130de:	9001      	str	r0, [sp, #4]
   130e0:	4623      	mov	r3, r4
   130e2:	4619      	mov	r1, r3
   130e4:	4805      	ldr	r0, [pc, #20]	; (130fc <PixelDisplayInterface::Enable()+0x24>)
   130e6:	f002 f9f3 	bl	154d0 <__cyg_profile_func_enter>
   130ea:	4623      	mov	r3, r4
   130ec:	4619      	mov	r1, r3
   130ee:	4803      	ldr	r0, [pc, #12]	; (130fc <PixelDisplayInterface::Enable()+0x24>)
   130f0:	f002 fa02 	bl	154f8 <__cyg_profile_func_exit>
   130f4:	bf00      	nop
   130f6:	b002      	add	sp, #8
   130f8:	bd10      	pop	{r4, pc}
   130fa:	bf00      	nop
   130fc:	000130d9 	.word	0x000130d9

00013100 <PixelDisplayInterface::Disable()>:
  /// Optional method to turn off display and potentially put it into a low
  /// power mode
  virtual void Disable() {}
   13100:	b510      	push	{r4, lr}
   13102:	b082      	sub	sp, #8
   13104:	4674      	mov	r4, lr
   13106:	9001      	str	r0, [sp, #4]
   13108:	4623      	mov	r3, r4
   1310a:	4619      	mov	r1, r3
   1310c:	4805      	ldr	r0, [pc, #20]	; (13124 <PixelDisplayInterface::Disable()+0x24>)
   1310e:	f002 f9df 	bl	154d0 <__cyg_profile_func_enter>
   13112:	4623      	mov	r3, r4
   13114:	4619      	mov	r1, r3
   13116:	4803      	ldr	r0, [pc, #12]	; (13124 <PixelDisplayInterface::Disable()+0x24>)
   13118:	f002 f9ee 	bl	154f8 <__cyg_profile_func_exit>
   1311c:	bf00      	nop
   1311e:	b002      	add	sp, #8
   13120:	bd10      	pop	{r4, pc}
   13122:	bf00      	nop
   13124:	00013101 	.word	0x00013101

00013128 <PixelDisplayInterface::Update()>:
  /// @param color the color of the pixel. May be ignored on monochrome screens.
  virtual void DrawPixel(int32_t x, int32_t y, Color_t color) = 0;
  /// Update screen to match framebuffer.
  /// Implementations of this method that do not use a framebuffer, possibly
  /// due to memory constrains, can refrain from implementing this function.
  virtual void Update() {}
   13128:	b510      	push	{r4, lr}
   1312a:	b082      	sub	sp, #8
   1312c:	4674      	mov	r4, lr
   1312e:	9001      	str	r0, [sp, #4]
   13130:	4623      	mov	r3, r4
   13132:	4619      	mov	r1, r3
   13134:	4805      	ldr	r0, [pc, #20]	; (1314c <PixelDisplayInterface::Update()+0x24>)
   13136:	f002 f9cb 	bl	154d0 <__cyg_profile_func_enter>
   1313a:	4623      	mov	r3, r4
   1313c:	4619      	mov	r1, r3
   1313e:	4803      	ldr	r0, [pc, #12]	; (1314c <PixelDisplayInterface::Update()+0x24>)
   13140:	f002 f9da 	bl	154f8 <__cyg_profile_func_exit>
   13144:	bf00      	nop
   13146:	b002      	add	sp, #8
   13148:	bd10      	pop	{r4, pc}
   1314a:	bf00      	nop
   1314c:	00013129 	.word	0x00013129

00013150 <PixelDisplayInterface::PixelDisplayInterface()>:
class PixelDisplayInterface
   13150:	b530      	push	{r4, r5, lr}
   13152:	b083      	sub	sp, #12
   13154:	4675      	mov	r5, lr
   13156:	9001      	str	r0, [sp, #4]
   13158:	462b      	mov	r3, r5
   1315a:	4619      	mov	r1, r3
   1315c:	4807      	ldr	r0, [pc, #28]	; (1317c <PixelDisplayInterface::PixelDisplayInterface()+0x2c>)
   1315e:	f002 f9b7 	bl	154d0 <__cyg_profile_func_enter>
   13162:	4a07      	ldr	r2, [pc, #28]	; (13180 <PixelDisplayInterface::PixelDisplayInterface()+0x30>)
   13164:	9b01      	ldr	r3, [sp, #4]
   13166:	601a      	str	r2, [r3, #0]
   13168:	9c01      	ldr	r4, [sp, #4]
   1316a:	462b      	mov	r3, r5
   1316c:	4619      	mov	r1, r3
   1316e:	4803      	ldr	r0, [pc, #12]	; (1317c <PixelDisplayInterface::PixelDisplayInterface()+0x2c>)
   13170:	f002 f9c2 	bl	154f8 <__cyg_profile_func_exit>
   13174:	4623      	mov	r3, r4
   13176:	4618      	mov	r0, r3
   13178:	b003      	add	sp, #12
   1317a:	bd30      	pop	{r4, r5, pc}
   1317c:	00013151 	.word	0x00013151
   13180:	00018a28 	.word	0x00018a28

00013184 <Ssd1306::Ssd1306()>:
  {
    kCommand = 0,
    kData    = 1
  };

  constexpr Ssd1306()
   13184:	b530      	push	{r4, r5, lr}
   13186:	b083      	sub	sp, #12
   13188:	4675      	mov	r5, lr
   1318a:	9001      	str	r0, [sp, #4]
   1318c:	462b      	mov	r3, r5
   1318e:	4619      	mov	r1, r3
   13190:	481f      	ldr	r0, [pc, #124]	; (13210 <Ssd1306::Ssd1306()+0x8c>)
   13192:	f002 f99d 	bl	154d0 <__cyg_profile_func_enter>
        cs_(&cs_gpio_),
        dc_(&dc_gpio_),
        ssp1_(Ssp::Peripheral::kSsp1),
        cs_gpio_(1, 22),
        dc_gpio_(1, 25),
        bitmap_{}
   13196:	9b01      	ldr	r3, [sp, #4]
   13198:	4618      	mov	r0, r3
   1319a:	f7ff ffd9 	bl	13150 <PixelDisplayInterface::PixelDisplayInterface()>
   1319e:	4a1d      	ldr	r2, [pc, #116]	; (13214 <Ssd1306::Ssd1306()+0x90>)
   131a0:	9b01      	ldr	r3, [sp, #4]
   131a2:	601a      	str	r2, [r3, #0]
      : ssp_(&ssp1_),
   131a4:	9b01      	ldr	r3, [sp, #4]
   131a6:	f103 0210 	add.w	r2, r3, #16
        bitmap_{}
   131aa:	9b01      	ldr	r3, [sp, #4]
   131ac:	605a      	str	r2, [r3, #4]
        cs_(&cs_gpio_),
   131ae:	9b01      	ldr	r3, [sp, #4]
   131b0:	f103 0240 	add.w	r2, r3, #64	; 0x40
        bitmap_{}
   131b4:	9b01      	ldr	r3, [sp, #4]
   131b6:	609a      	str	r2, [r3, #8]
        dc_(&dc_gpio_),
   131b8:	9b01      	ldr	r3, [sp, #4]
   131ba:	f103 0254 	add.w	r2, r3, #84	; 0x54
        bitmap_{}
   131be:	9b01      	ldr	r3, [sp, #4]
   131c0:	60da      	str	r2, [r3, #12]
   131c2:	9b01      	ldr	r3, [sp, #4]
   131c4:	3310      	adds	r3, #16
   131c6:	2101      	movs	r1, #1
   131c8:	4618      	mov	r0, r3
   131ca:	f7ff f9cd 	bl	12568 <Ssp::Ssp(Ssp::Peripheral)>
   131ce:	9b01      	ldr	r3, [sp, #4]
   131d0:	3340      	adds	r3, #64	; 0x40
   131d2:	2216      	movs	r2, #22
   131d4:	2101      	movs	r1, #1
   131d6:	4618      	mov	r0, r3
   131d8:	f7fe f9d6 	bl	11588 <Gpio::Gpio(unsigned char, unsigned char)>
   131dc:	9b01      	ldr	r3, [sp, #4]
   131de:	3354      	adds	r3, #84	; 0x54
   131e0:	2219      	movs	r2, #25
   131e2:	2101      	movs	r1, #1
   131e4:	4618      	mov	r0, r3
   131e6:	f7fe f9cf 	bl	11588 <Gpio::Gpio(unsigned char, unsigned char)>
   131ea:	9b01      	ldr	r3, [sp, #4]
   131ec:	3368      	adds	r3, #104	; 0x68
   131ee:	f240 62c1 	movw	r2, #1729	; 0x6c1
   131f2:	2100      	movs	r1, #0
   131f4:	4618      	mov	r0, r3
   131f6:	f004 ffd1 	bl	1819c <memset>
  {
  }
   131fa:	9c01      	ldr	r4, [sp, #4]
   131fc:	462b      	mov	r3, r5
   131fe:	4619      	mov	r1, r3
   13200:	4803      	ldr	r0, [pc, #12]	; (13210 <Ssd1306::Ssd1306()+0x8c>)
   13202:	f002 f979 	bl	154f8 <__cyg_profile_func_exit>
   13206:	4623      	mov	r3, r4
   13208:	4618      	mov	r0, r3
   1320a:	b003      	add	sp, #12
   1320c:	bd30      	pop	{r4, r5, pc}
   1320e:	bf00      	nop
   13210:	00013185 	.word	0x00013185
   13214:	000189fc 	.word	0x000189fc

00013218 <Ssd1306::GetWidth()>:
        dc_gpio_(1, 25),
        bitmap_{}
  {
  }

  size_t GetWidth() final override
   13218:	b530      	push	{r4, r5, lr}
   1321a:	b083      	sub	sp, #12
   1321c:	4675      	mov	r5, lr
   1321e:	9001      	str	r0, [sp, #4]
   13220:	462b      	mov	r3, r5
   13222:	4619      	mov	r1, r3
   13224:	4806      	ldr	r0, [pc, #24]	; (13240 <Ssd1306::GetWidth()+0x28>)
   13226:	f002 f953 	bl	154d0 <__cyg_profile_func_enter>
  {
    return kWidth;
   1322a:	2480      	movs	r4, #128	; 0x80
   1322c:	462b      	mov	r3, r5
   1322e:	4619      	mov	r1, r3
   13230:	4803      	ldr	r0, [pc, #12]	; (13240 <Ssd1306::GetWidth()+0x28>)
   13232:	f002 f961 	bl	154f8 <__cyg_profile_func_exit>
   13236:	4623      	mov	r3, r4
  }
   13238:	4618      	mov	r0, r3
   1323a:	b003      	add	sp, #12
   1323c:	bd30      	pop	{r4, r5, pc}
   1323e:	bf00      	nop
   13240:	00013219 	.word	0x00013219

00013244 <Ssd1306::GetHeight()>:
  size_t GetHeight() final override
   13244:	b530      	push	{r4, r5, lr}
   13246:	b083      	sub	sp, #12
   13248:	4675      	mov	r5, lr
   1324a:	9001      	str	r0, [sp, #4]
   1324c:	462b      	mov	r3, r5
   1324e:	4619      	mov	r1, r3
   13250:	4806      	ldr	r0, [pc, #24]	; (1326c <Ssd1306::GetHeight()+0x28>)
   13252:	f002 f93d 	bl	154d0 <__cyg_profile_func_enter>
  {
    return kHeight;
   13256:	2440      	movs	r4, #64	; 0x40
   13258:	462b      	mov	r3, r5
   1325a:	4619      	mov	r1, r3
   1325c:	4803      	ldr	r0, [pc, #12]	; (1326c <Ssd1306::GetHeight()+0x28>)
   1325e:	f002 f94b 	bl	154f8 <__cyg_profile_func_exit>
   13262:	4623      	mov	r3, r4
  }
   13264:	4618      	mov	r0, r3
   13266:	b003      	add	sp, #12
   13268:	bd30      	pop	{r4, r5, pc}
   1326a:	bf00      	nop
   1326c:	00013245 	.word	0x00013245

00013270 <Ssd1306::AvailableColors()>:
  Color_t AvailableColors() final override
   13270:	b510      	push	{r4, lr}
   13272:	b088      	sub	sp, #32
   13274:	4674      	mov	r4, lr
   13276:	9005      	str	r0, [sp, #20]
   13278:	4623      	mov	r3, r4
   1327a:	4619      	mov	r1, r3
   1327c:	4815      	ldr	r0, [pc, #84]	; (132d4 <Ssd1306::AvailableColors()+0x64>)
   1327e:	f002 f927 	bl	154d0 <__cyg_profile_func_enter>
  {
    return Color_t(/* Red        = */ 1,
   13282:	a807      	add	r0, sp, #28
   13284:	2301      	movs	r3, #1
   13286:	9302      	str	r3, [sp, #8]
   13288:	2301      	movs	r3, #1
   1328a:	9301      	str	r3, [sp, #4]
   1328c:	2301      	movs	r3, #1
   1328e:	9300      	str	r3, [sp, #0]
   13290:	2301      	movs	r3, #1
   13292:	2201      	movs	r2, #1
   13294:	2101      	movs	r1, #1
   13296:	f7ff fea1 	bl	12fdc <PixelDisplayInterface::Color_t::Color_t(bool, bool, bool, unsigned char, unsigned char, bool)>
                   /* Green      = */ 1,
                   /* Blue       = */ 1,
                   /* Alpha      = */ 1,
                   /* Color Bits = */ 1,
                   /* Monochrome = */ true);
   1329a:	ab06      	add	r3, sp, #24
   1329c:	aa07      	add	r2, sp, #28
   1329e:	6812      	ldr	r2, [r2, #0]
   132a0:	4611      	mov	r1, r2
   132a2:	8019      	strh	r1, [r3, #0]
   132a4:	3302      	adds	r3, #2
   132a6:	0c12      	lsrs	r2, r2, #16
   132a8:	701a      	strb	r2, [r3, #0]
   132aa:	4623      	mov	r3, r4
   132ac:	4619      	mov	r1, r3
   132ae:	4809      	ldr	r0, [pc, #36]	; (132d4 <Ssd1306::AvailableColors()+0x64>)
   132b0:	f002 f922 	bl	154f8 <__cyg_profile_func_exit>
   132b4:	2300      	movs	r3, #0
   132b6:	f89d 2018 	ldrb.w	r2, [sp, #24]
   132ba:	f362 0307 	bfi	r3, r2, #0, #8
   132be:	f89d 2019 	ldrb.w	r2, [sp, #25]
   132c2:	f362 230f 	bfi	r3, r2, #8, #8
   132c6:	f89d 201a 	ldrb.w	r2, [sp, #26]
   132ca:	f362 4317 	bfi	r3, r2, #16, #8
  }
   132ce:	4618      	mov	r0, r3
   132d0:	b008      	add	sp, #32
   132d2:	bd10      	pop	{r4, pc}
   132d4:	00013271 	.word	0x00013271

000132d8 <Ssd1306::Write(unsigned long, Ssd1306::Transaction, unsigned int)>:

  void Write(uint32_t data, Transaction transaction, size_t size = 1)
   132d8:	b510      	push	{r4, lr}
   132da:	b086      	sub	sp, #24
   132dc:	4674      	mov	r4, lr
   132de:	9003      	str	r0, [sp, #12]
   132e0:	9102      	str	r1, [sp, #8]
   132e2:	9201      	str	r2, [sp, #4]
   132e4:	9300      	str	r3, [sp, #0]
   132e6:	4623      	mov	r3, r4
   132e8:	4619      	mov	r1, r3
   132ea:	481e      	ldr	r0, [pc, #120]	; (13364 <Ssd1306::Write(unsigned long, Ssd1306::Transaction, unsigned int)+0x8c>)
   132ec:	f002 f8f0 	bl	154d0 <__cyg_profile_func_enter>
  {
    dc_->Set(static_cast<Gpio::State>(transaction));
   132f0:	9b03      	ldr	r3, [sp, #12]
   132f2:	68db      	ldr	r3, [r3, #12]
   132f4:	9a01      	ldr	r2, [sp, #4]
   132f6:	b2d2      	uxtb	r2, r2
   132f8:	4611      	mov	r1, r2
   132fa:	4618      	mov	r0, r3
   132fc:	f7fe fa84 	bl	11808 <Gpio::Set(GpioInterface::State)>
    cs_->SetLow();
   13300:	9b03      	ldr	r3, [sp, #12]
   13302:	689b      	ldr	r3, [r3, #8]
   13304:	4618      	mov	r0, r3
   13306:	f7fe fa4d 	bl	117a4 <Gpio::SetLow()>
    for (size_t i = 0; i < size; i++)
   1330a:	2300      	movs	r3, #0
   1330c:	9305      	str	r3, [sp, #20]
   1330e:	9a05      	ldr	r2, [sp, #20]
   13310:	9b00      	ldr	r3, [sp, #0]
   13312:	429a      	cmp	r2, r3
   13314:	d218      	bcs.n	13348 <Ssd1306::Write(unsigned long, Ssd1306::Transaction, unsigned int)+0x70>
    {
      uint8_t send = static_cast<uint8_t>(data >> (((size - 1) - i) * 8));
   13316:	9a00      	ldr	r2, [sp, #0]
   13318:	9b05      	ldr	r3, [sp, #20]
   1331a:	1ad3      	subs	r3, r2, r3
   1331c:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
   13320:	3b01      	subs	r3, #1
   13322:	00db      	lsls	r3, r3, #3
   13324:	9a02      	ldr	r2, [sp, #8]
   13326:	fa22 f303 	lsr.w	r3, r2, r3
   1332a:	f88d 3013 	strb.w	r3, [sp, #19]
      if (transaction == Transaction::kCommand)
      {
        LOG_DEBUG("send = 0x%X", send);
      }
      ssp_->Transfer(send);
   1332e:	9b03      	ldr	r3, [sp, #12]
   13330:	685b      	ldr	r3, [r3, #4]
   13332:	f89d 2013 	ldrb.w	r2, [sp, #19]
   13336:	b292      	uxth	r2, r2
   13338:	4611      	mov	r1, r2
   1333a:	4618      	mov	r0, r3
   1333c:	f7ff fa34 	bl	127a8 <Ssp::Transfer(unsigned short)>
    for (size_t i = 0; i < size; i++)
   13340:	9b05      	ldr	r3, [sp, #20]
   13342:	3301      	adds	r3, #1
   13344:	9305      	str	r3, [sp, #20]
   13346:	e7e2      	b.n	1330e <Ssd1306::Write(unsigned long, Ssd1306::Transaction, unsigned int)+0x36>
    }
    cs_->SetHigh();
   13348:	9b03      	ldr	r3, [sp, #12]
   1334a:	689b      	ldr	r3, [r3, #8]
   1334c:	4618      	mov	r0, r3
   1334e:	f7fe f9f7 	bl	11740 <Gpio::SetHigh()>
   13352:	4623      	mov	r3, r4
   13354:	4619      	mov	r1, r3
   13356:	4803      	ldr	r0, [pc, #12]	; (13364 <Ssd1306::Write(unsigned long, Ssd1306::Transaction, unsigned int)+0x8c>)
   13358:	f002 f8ce 	bl	154f8 <__cyg_profile_func_exit>
  }
   1335c:	bf00      	nop
   1335e:	b006      	add	sp, #24
   13360:	bd10      	pop	{r4, pc}
   13362:	bf00      	nop
   13364:	000132d9 	.word	0x000132d9

00013368 <Ssd1306::InitializationPanel()>:

  void InitializationPanel()
   13368:	b510      	push	{r4, lr}
   1336a:	b082      	sub	sp, #8
   1336c:	4674      	mov	r4, lr
   1336e:	9001      	str	r0, [sp, #4]
   13370:	4623      	mov	r3, r4
   13372:	4619      	mov	r1, r3
   13374:	4837      	ldr	r0, [pc, #220]	; (13454 <Ssd1306::InitializationPanel()+0xec>)
   13376:	f002 f8ab 	bl	154d0 <__cyg_profile_func_enter>
  {
    // This sequence of commands was found in:
    //   datasheets/OLED-display/ER-OLED0.96-1_Series_Datasheet.pdf, page 15

    // turn off oled panel
    Write(0xAE, Transaction::kCommand);
   1337a:	2301      	movs	r3, #1
   1337c:	2200      	movs	r2, #0
   1337e:	21ae      	movs	r1, #174	; 0xae
   13380:	9801      	ldr	r0, [sp, #4]
   13382:	f7ff ffa9 	bl	132d8 <Ssd1306::Write(unsigned long, Ssd1306::Transaction, unsigned int)>

    // set display clock divide ratio/oscillator frequency
    // set divide ratio
    Write(0xD5'80, Transaction::kCommand, 2);
   13386:	2302      	movs	r3, #2
   13388:	2200      	movs	r2, #0
   1338a:	f24d 5180 	movw	r1, #54656	; 0xd580
   1338e:	9801      	ldr	r0, [sp, #4]
   13390:	f7ff ffa2 	bl	132d8 <Ssd1306::Write(unsigned long, Ssd1306::Transaction, unsigned int)>

    // set multiplex ratio(1 to 64)
    // 1/64 duty
    Write(0xA8'3F, Transaction::kCommand, 2);
   13394:	2302      	movs	r3, #2
   13396:	2200      	movs	r2, #0
   13398:	f64a 013f 	movw	r1, #43071	; 0xa83f
   1339c:	9801      	ldr	r0, [sp, #4]
   1339e:	f7ff ff9b 	bl	132d8 <Ssd1306::Write(unsigned long, Ssd1306::Transaction, unsigned int)>

    // set display offset = not offset
    Write(0xD3'00, Transaction::kCommand, 2);
   133a2:	2302      	movs	r3, #2
   133a4:	2200      	movs	r2, #0
   133a6:	f44f 4153 	mov.w	r1, #54016	; 0xd300
   133aa:	9801      	ldr	r0, [sp, #4]
   133ac:	f7ff ff94 	bl	132d8 <Ssd1306::Write(unsigned long, Ssd1306::Transaction, unsigned int)>

    // Set display start line
    Write(0x40, Transaction::kCommand);
   133b0:	2301      	movs	r3, #1
   133b2:	2200      	movs	r2, #0
   133b4:	2140      	movs	r1, #64	; 0x40
   133b6:	9801      	ldr	r0, [sp, #4]
   133b8:	f7ff ff8e 	bl	132d8 <Ssd1306::Write(unsigned long, Ssd1306::Transaction, unsigned int)>

    // Disable Charge Pump
    Write(0x8D'14, Transaction::kCommand, 2);
   133bc:	2302      	movs	r3, #2
   133be:	2200      	movs	r2, #0
   133c0:	f648 5114 	movw	r1, #36116	; 0x8d14
   133c4:	9801      	ldr	r0, [sp, #4]
   133c6:	f7ff ff87 	bl	132d8 <Ssd1306::Write(unsigned long, Ssd1306::Transaction, unsigned int)>

    // set segment re-map 128 to 0
    Write(0xA1, Transaction::kCommand);
   133ca:	2301      	movs	r3, #1
   133cc:	2200      	movs	r2, #0
   133ce:	21a1      	movs	r1, #161	; 0xa1
   133d0:	9801      	ldr	r0, [sp, #4]
   133d2:	f7ff ff81 	bl	132d8 <Ssd1306::Write(unsigned long, Ssd1306::Transaction, unsigned int)>

    // Set COM Output Scan Direction 64 to 0
    Write(0xC8, Transaction::kCommand);
   133d6:	2301      	movs	r3, #1
   133d8:	2200      	movs	r2, #0
   133da:	21c8      	movs	r1, #200	; 0xc8
   133dc:	9801      	ldr	r0, [sp, #4]
   133de:	f7ff ff7b 	bl	132d8 <Ssd1306::Write(unsigned long, Ssd1306::Transaction, unsigned int)>

    // set com pins hardware configuration
    Write(0xDA'12, Transaction::kCommand, 2);
   133e2:	2302      	movs	r3, #2
   133e4:	2200      	movs	r2, #0
   133e6:	f64d 2112 	movw	r1, #55826	; 0xda12
   133ea:	9801      	ldr	r0, [sp, #4]
   133ec:	f7ff ff74 	bl	132d8 <Ssd1306::Write(unsigned long, Ssd1306::Transaction, unsigned int)>

    // set contrast control register
    Write(0x81'CF, Transaction::kCommand, 2);
   133f0:	2302      	movs	r3, #2
   133f2:	2200      	movs	r2, #0
   133f4:	f248 11cf 	movw	r1, #33231	; 0x81cf
   133f8:	9801      	ldr	r0, [sp, #4]
   133fa:	f7ff ff6d 	bl	132d8 <Ssd1306::Write(unsigned long, Ssd1306::Transaction, unsigned int)>

    // Set pre-charge period
    Write(0xD9'F1, Transaction::kCommand, 2);
   133fe:	2302      	movs	r3, #2
   13400:	2200      	movs	r2, #0
   13402:	f64d 11f1 	movw	r1, #55793	; 0xd9f1
   13406:	9801      	ldr	r0, [sp, #4]
   13408:	f7ff ff66 	bl	132d8 <Ssd1306::Write(unsigned long, Ssd1306::Transaction, unsigned int)>

    // Set Vcomh
    Write(0xDB'40, Transaction::kCommand, 2);
   1340c:	2302      	movs	r3, #2
   1340e:	2200      	movs	r2, #0
   13410:	f64d 3140 	movw	r1, #56128	; 0xdb40
   13414:	9801      	ldr	r0, [sp, #4]
   13416:	f7ff ff5f 	bl	132d8 <Ssd1306::Write(unsigned long, Ssd1306::Transaction, unsigned int)>

    SetHorizontalAddressMode();
   1341a:	9801      	ldr	r0, [sp, #4]
   1341c:	f000 f85e 	bl	134dc <Ssd1306::SetHorizontalAddressMode()>

    // Enable entire display
    Write(0xA4, Transaction::kCommand);
   13420:	2301      	movs	r3, #1
   13422:	2200      	movs	r2, #0
   13424:	21a4      	movs	r1, #164	; 0xa4
   13426:	9801      	ldr	r0, [sp, #4]
   13428:	f7ff ff56 	bl	132d8 <Ssd1306::Write(unsigned long, Ssd1306::Transaction, unsigned int)>

    // Set display to normal colors
    Write(0xA6, Transaction::kCommand);
   1342c:	2301      	movs	r3, #1
   1342e:	2200      	movs	r2, #0
   13430:	21a6      	movs	r1, #166	; 0xa6
   13432:	9801      	ldr	r0, [sp, #4]
   13434:	f7ff ff50 	bl	132d8 <Ssd1306::Write(unsigned long, Ssd1306::Transaction, unsigned int)>

    // Set Display On
    Write(0xAF, Transaction::kCommand);
   13438:	2301      	movs	r3, #1
   1343a:	2200      	movs	r2, #0
   1343c:	21af      	movs	r1, #175	; 0xaf
   1343e:	9801      	ldr	r0, [sp, #4]
   13440:	f7ff ff4a 	bl	132d8 <Ssd1306::Write(unsigned long, Ssd1306::Transaction, unsigned int)>
   13444:	4623      	mov	r3, r4
   13446:	4619      	mov	r1, r3
   13448:	4802      	ldr	r0, [pc, #8]	; (13454 <Ssd1306::InitializationPanel()+0xec>)
   1344a:	f002 f855 	bl	154f8 <__cyg_profile_func_exit>
  }
   1344e:	bf00      	nop
   13450:	b002      	add	sp, #8
   13452:	bd10      	pop	{r4, pc}
   13454:	00013369 	.word	0x00013369

00013458 <Ssd1306::Initialize()>:

  void Initialize() final override
   13458:	b510      	push	{r4, lr}
   1345a:	b084      	sub	sp, #16
   1345c:	4674      	mov	r4, lr
   1345e:	9003      	str	r0, [sp, #12]
   13460:	4623      	mov	r3, r4
   13462:	4619      	mov	r1, r3
   13464:	481c      	ldr	r0, [pc, #112]	; (134d8 <Ssd1306::Initialize()+0x80>)
   13466:	f002 f833 	bl	154d0 <__cyg_profile_func_enter>
  {
    cs_->SetAsOutput();
   1346a:	9b03      	ldr	r3, [sp, #12]
   1346c:	689b      	ldr	r3, [r3, #8]
   1346e:	4618      	mov	r0, r3
   13470:	f7fe f906 	bl	11680 <Gpio::SetAsOutput()>
    dc_->SetAsOutput();
   13474:	9b03      	ldr	r3, [sp, #12]
   13476:	68db      	ldr	r3, [r3, #12]
   13478:	4618      	mov	r0, r3
   1347a:	f7fe f901 	bl	11680 <Gpio::SetAsOutput()>
    cs_->SetHigh();
   1347e:	9b03      	ldr	r3, [sp, #12]
   13480:	689b      	ldr	r3, [r3, #8]
   13482:	4618      	mov	r0, r3
   13484:	f7fe f95c 	bl	11740 <Gpio::SetHigh()>
    dc_->SetHigh();
   13488:	9b03      	ldr	r3, [sp, #12]
   1348a:	68db      	ldr	r3, [r3, #12]
   1348c:	4618      	mov	r0, r3
   1348e:	f7fe f957 	bl	11740 <Gpio::SetHigh()>

    ssp_->SetPeripheralMode(Ssp::MasterSlaveMode::kMaster, Ssp::FrameMode::kSpi,
   13492:	9b03      	ldr	r3, [sp, #12]
   13494:	6858      	ldr	r0, [r3, #4]
   13496:	2307      	movs	r3, #7
   13498:	2200      	movs	r2, #0
   1349a:	2100      	movs	r1, #0
   1349c:	f7ff fa30 	bl	12900 <Ssp::SetPeripheralMode(SspInterface::MasterSlaveMode, SspInterface::FrameMode, SspInterface::DataSize)>
                            Ssp::DataSize::kEight);
    // Set speed to 1Mhz by dividing by 1 * ClockFrequencyInMHz.
    ssp_->SetClock(false, false, 1, config::kSystemClockRateMhz/3);
   134a0:	9b03      	ldr	r3, [sp, #12]
   134a2:	6858      	ldr	r0, [r3, #4]
   134a4:	2310      	movs	r3, #16
   134a6:	9300      	str	r3, [sp, #0]
   134a8:	2301      	movs	r3, #1
   134aa:	2200      	movs	r2, #0
   134ac:	2100      	movs	r1, #0
   134ae:	f7ff fbdd 	bl	12c6c <Ssp::SetClock(bool, bool, unsigned char, unsigned char)>
    ssp_->Initialize();
   134b2:	9b03      	ldr	r3, [sp, #12]
   134b4:	685b      	ldr	r3, [r3, #4]
   134b6:	4618      	mov	r0, r3
   134b8:	f7ff f8c8 	bl	1264c <Ssp::Initialize()>

    Clear();
   134bc:	9803      	ldr	r0, [sp, #12]
   134be:	f000 f837 	bl	13530 <Ssd1306::Clear()>
    InitializationPanel();
   134c2:	9803      	ldr	r0, [sp, #12]
   134c4:	f7ff ff50 	bl	13368 <Ssd1306::InitializationPanel()>
   134c8:	4623      	mov	r3, r4
   134ca:	4619      	mov	r1, r3
   134cc:	4802      	ldr	r0, [pc, #8]	; (134d8 <Ssd1306::Initialize()+0x80>)
   134ce:	f002 f813 	bl	154f8 <__cyg_profile_func_exit>
  }
   134d2:	bf00      	nop
   134d4:	b004      	add	sp, #16
   134d6:	bd10      	pop	{r4, pc}
   134d8:	00013459 	.word	0x00013459

000134dc <Ssd1306::SetHorizontalAddressMode()>:

  void SetHorizontalAddressMode()
   134dc:	b510      	push	{r4, lr}
   134de:	b082      	sub	sp, #8
   134e0:	4674      	mov	r4, lr
   134e2:	9001      	str	r0, [sp, #4]
   134e4:	4623      	mov	r3, r4
   134e6:	4619      	mov	r1, r3
   134e8:	480e      	ldr	r0, [pc, #56]	; (13524 <Ssd1306::SetHorizontalAddressMode()+0x48>)
   134ea:	f001 fff1 	bl	154d0 <__cyg_profile_func_enter>
  {
    // Set Addressing mode
    // Addressing mode = Horizontal Mode (0b00)
    Write(0x20'00, Transaction::kCommand, 2);
   134ee:	2302      	movs	r3, #2
   134f0:	2200      	movs	r2, #0
   134f2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
   134f6:	9801      	ldr	r0, [sp, #4]
   134f8:	f7ff feee 	bl	132d8 <Ssd1306::Write(unsigned long, Ssd1306::Transaction, unsigned int)>
    // Set Column Addresses
    // Set Column Address start = Column 0
    // Set Column Address start = Column 127
    Write(0x21'00'7F, Transaction::kCommand, 3);
   134fc:	2303      	movs	r3, #3
   134fe:	2200      	movs	r2, #0
   13500:	4909      	ldr	r1, [pc, #36]	; (13528 <Ssd1306::SetHorizontalAddressMode()+0x4c>)
   13502:	9801      	ldr	r0, [sp, #4]
   13504:	f7ff fee8 	bl	132d8 <Ssd1306::Write(unsigned long, Ssd1306::Transaction, unsigned int)>
    // Set Page Addresses
    // Set Page Address start = Page 0
    // Set Page Address start = Page 7
    Write(0x22'00'07, Transaction::kCommand, 3);
   13508:	2303      	movs	r3, #3
   1350a:	2200      	movs	r2, #0
   1350c:	4907      	ldr	r1, [pc, #28]	; (1352c <Ssd1306::SetHorizontalAddressMode()+0x50>)
   1350e:	9801      	ldr	r0, [sp, #4]
   13510:	f7ff fee2 	bl	132d8 <Ssd1306::Write(unsigned long, Ssd1306::Transaction, unsigned int)>
   13514:	4623      	mov	r3, r4
   13516:	4619      	mov	r1, r3
   13518:	4802      	ldr	r0, [pc, #8]	; (13524 <Ssd1306::SetHorizontalAddressMode()+0x48>)
   1351a:	f001 ffed 	bl	154f8 <__cyg_profile_func_exit>
  }
   1351e:	bf00      	nop
   13520:	b002      	add	sp, #8
   13522:	bd10      	pop	{r4, pc}
   13524:	000134dd 	.word	0x000134dd
   13528:	0021007f 	.word	0x0021007f
   1352c:	00220007 	.word	0x00220007

00013530 <Ssd1306::Clear()>:
  /// Clears the internal bitmap_ to zero (or a user defined clear_value)
  void Clear() final override
   13530:	b510      	push	{r4, lr}
   13532:	b082      	sub	sp, #8
   13534:	4674      	mov	r4, lr
   13536:	9001      	str	r0, [sp, #4]
   13538:	4623      	mov	r3, r4
   1353a:	4619      	mov	r1, r3
   1353c:	4809      	ldr	r0, [pc, #36]	; (13564 <Ssd1306::Clear()+0x34>)
   1353e:	f001 ffc7 	bl	154d0 <__cyg_profile_func_enter>
  {
    memset(bitmap_, 0x00, sizeof(bitmap_));
   13542:	9b01      	ldr	r3, [sp, #4]
   13544:	3368      	adds	r3, #104	; 0x68
   13546:	f240 62c1 	movw	r2, #1729	; 0x6c1
   1354a:	2100      	movs	r1, #0
   1354c:	4618      	mov	r0, r3
   1354e:	f004 fe25 	bl	1819c <memset>
   13552:	4623      	mov	r3, r4
   13554:	4619      	mov	r1, r3
   13556:	4803      	ldr	r0, [pc, #12]	; (13564 <Ssd1306::Clear()+0x34>)
   13558:	f001 ffce 	bl	154f8 <__cyg_profile_func_exit>
  }
   1355c:	bf00      	nop
   1355e:	b002      	add	sp, #8
   13560:	bd10      	pop	{r4, pc}
   13562:	bf00      	nop
   13564:	00013531 	.word	0x00013531

00013568 <Ssd1306::DrawPixel(long, long, PixelDisplayInterface::Color_t)>:
  void Fill()
  {
    memset(bitmap_, 0xFF, sizeof(bitmap_));
  }
  void DrawPixel(int32_t x, int32_t y, Color_t color) final override
   13568:	b510      	push	{r4, lr}
   1356a:	b08c      	sub	sp, #48	; 0x30
   1356c:	4674      	mov	r4, lr
   1356e:	9003      	str	r0, [sp, #12]
   13570:	9102      	str	r1, [sp, #8]
   13572:	9201      	str	r2, [sp, #4]
   13574:	9300      	str	r3, [sp, #0]
   13576:	4623      	mov	r3, r4
   13578:	4619      	mov	r1, r3
   1357a:	481f      	ldr	r0, [pc, #124]	; (135f8 <Ssd1306::DrawPixel(long, long, PixelDisplayInterface::Color_t)+0x90>)
   1357c:	f001 ffa8 	bl	154d0 <__cyg_profile_func_enter>
  {
    // The 3 least significant bits hold the bit position within the byte
    uint32_t bit_position = y & 0b111;
   13580:	9b01      	ldr	r3, [sp, #4]
   13582:	f003 0307 	and.w	r3, r3, #7
   13586:	930b      	str	r3, [sp, #44]	; 0x2c
    // Each byte makes up a vertical column.
    // Shifting by 3, which also divides by 8 (the 8-bits of a column), will
    // be the row that we need to edit.
    uint32_t row = y >> 3;
   13588:	9b01      	ldr	r3, [sp, #4]
   1358a:	10db      	asrs	r3, r3, #3
   1358c:	930a      	str	r3, [sp, #40]	; 0x28
    // Mask to clear the bit
    uint32_t clear_mask = ~(1 << bit_position);
   1358e:	2201      	movs	r2, #1
   13590:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   13592:	fa02 f303 	lsl.w	r3, r2, r3
   13596:	43db      	mvns	r3, r3
   13598:	9309      	str	r3, [sp, #36]	; 0x24
    // Mask to set the bit, if color.alpha != 0
    bool pixel_is_on  = (color.alpha != 0);
   1359a:	f89d 3002 	ldrb.w	r3, [sp, #2]
   1359e:	2b00      	cmp	r3, #0
   135a0:	bf14      	ite	ne
   135a2:	2301      	movne	r3, #1
   135a4:	2300      	moveq	r3, #0
   135a6:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
    uint32_t set_mask = pixel_is_on << bit_position;
   135aa:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
   135ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   135b0:	fa02 f303 	lsl.w	r3, r2, r3
   135b4:	9307      	str	r3, [sp, #28]
    // Address of the pixel column to edit
    uint8_t * pixel_column = &(bitmap_[row][x]);
   135b6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   135b8:	4613      	mov	r3, r2
   135ba:	015b      	lsls	r3, r3, #5
   135bc:	4413      	add	r3, r2
   135be:	009b      	lsls	r3, r3, #2
   135c0:	4413      	add	r3, r2
   135c2:	9a02      	ldr	r2, [sp, #8]
   135c4:	4413      	add	r3, r2
   135c6:	3368      	adds	r3, #104	; 0x68
   135c8:	9a03      	ldr	r2, [sp, #12]
   135ca:	4413      	add	r3, r2
   135cc:	9306      	str	r3, [sp, #24]
    // Read pixel column and update the pixel
    uint32_t result = (*pixel_column & clear_mask) | set_mask;
   135ce:	9b06      	ldr	r3, [sp, #24]
   135d0:	781b      	ldrb	r3, [r3, #0]
   135d2:	461a      	mov	r2, r3
   135d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
   135d6:	4013      	ands	r3, r2
   135d8:	9a07      	ldr	r2, [sp, #28]
   135da:	4313      	orrs	r3, r2
   135dc:	9305      	str	r3, [sp, #20]
    // Update pixel with the result of this operation
    *pixel_column = static_cast<uint8_t>(result);
   135de:	9b05      	ldr	r3, [sp, #20]
   135e0:	b2da      	uxtb	r2, r3
   135e2:	9b06      	ldr	r3, [sp, #24]
   135e4:	701a      	strb	r2, [r3, #0]
   135e6:	4623      	mov	r3, r4
   135e8:	4619      	mov	r1, r3
   135ea:	4803      	ldr	r0, [pc, #12]	; (135f8 <Ssd1306::DrawPixel(long, long, PixelDisplayInterface::Color_t)+0x90>)
   135ec:	f001 ff84 	bl	154f8 <__cyg_profile_func_exit>
  }
   135f0:	bf00      	nop
   135f2:	b00c      	add	sp, #48	; 0x30
   135f4:	bd10      	pop	{r4, pc}
   135f6:	bf00      	nop
   135f8:	00013569 	.word	0x00013569

000135fc <Ssd1306::Update()>:
  /// Writes internal bitmap_ to the screen
  void Update() final override
   135fc:	b510      	push	{r4, lr}
   135fe:	b084      	sub	sp, #16
   13600:	4674      	mov	r4, lr
   13602:	9001      	str	r0, [sp, #4]
   13604:	4623      	mov	r3, r4
   13606:	4619      	mov	r1, r3
   13608:	4818      	ldr	r0, [pc, #96]	; (1366c <Ssd1306::Update()+0x70>)
   1360a:	f001 ff61 	bl	154d0 <__cyg_profile_func_enter>
  {
    SetHorizontalAddressMode();
   1360e:	9801      	ldr	r0, [sp, #4]
   13610:	f7ff ff64 	bl	134dc <Ssd1306::SetHorizontalAddressMode()>
    for (size_t row = 0; row < kRows; row++)
   13614:	2300      	movs	r3, #0
   13616:	9303      	str	r3, [sp, #12]
   13618:	9b03      	ldr	r3, [sp, #12]
   1361a:	2b07      	cmp	r3, #7
   1361c:	d81e      	bhi.n	1365c <Ssd1306::Update()+0x60>
    {
      for (size_t column = 0; column < kColumns; column++)
   1361e:	2300      	movs	r3, #0
   13620:	9302      	str	r3, [sp, #8]
   13622:	9b02      	ldr	r3, [sp, #8]
   13624:	2b7f      	cmp	r3, #127	; 0x7f
   13626:	d815      	bhi.n	13654 <Ssd1306::Update()+0x58>
      {
        Write(bitmap_[row][column], Transaction::kData);
   13628:	9901      	ldr	r1, [sp, #4]
   1362a:	9a03      	ldr	r2, [sp, #12]
   1362c:	4613      	mov	r3, r2
   1362e:	015b      	lsls	r3, r3, #5
   13630:	4413      	add	r3, r2
   13632:	009b      	lsls	r3, r3, #2
   13634:	4413      	add	r3, r2
   13636:	18ca      	adds	r2, r1, r3
   13638:	9b02      	ldr	r3, [sp, #8]
   1363a:	4413      	add	r3, r2
   1363c:	3368      	adds	r3, #104	; 0x68
   1363e:	781b      	ldrb	r3, [r3, #0]
   13640:	4619      	mov	r1, r3
   13642:	2301      	movs	r3, #1
   13644:	2201      	movs	r2, #1
   13646:	9801      	ldr	r0, [sp, #4]
   13648:	f7ff fe46 	bl	132d8 <Ssd1306::Write(unsigned long, Ssd1306::Transaction, unsigned int)>
      for (size_t column = 0; column < kColumns; column++)
   1364c:	9b02      	ldr	r3, [sp, #8]
   1364e:	3301      	adds	r3, #1
   13650:	9302      	str	r3, [sp, #8]
   13652:	e7e6      	b.n	13622 <Ssd1306::Update()+0x26>
    for (size_t row = 0; row < kRows; row++)
   13654:	9b03      	ldr	r3, [sp, #12]
   13656:	3301      	adds	r3, #1
   13658:	9303      	str	r3, [sp, #12]
   1365a:	e7dd      	b.n	13618 <Ssd1306::Update()+0x1c>
   1365c:	4623      	mov	r3, r4
   1365e:	4619      	mov	r1, r3
   13660:	4802      	ldr	r0, [pc, #8]	; (1366c <Ssd1306::Update()+0x70>)
   13662:	f001 ff49 	bl	154f8 <__cyg_profile_func_exit>
      }
    }
  }
   13666:	bf00      	nop
   13668:	b004      	add	sp, #16
   1366a:	bd10      	pop	{r4, pc}
   1366c:	000135fd 	.word	0x000135fd

00013670 <Graphics::Graphics(PixelDisplayInterface*)>:
#include "utility/log.hpp"

class Graphics
{
 public:
  explicit Graphics(PixelDisplayInterface * display)
   13670:	b530      	push	{r4, r5, lr}
   13672:	b083      	sub	sp, #12
   13674:	4675      	mov	r5, lr
   13676:	9001      	str	r0, [sp, #4]
   13678:	9100      	str	r1, [sp, #0]
   1367a:	462b      	mov	r3, r5
   1367c:	4619      	mov	r1, r3
   1367e:	481e      	ldr	r0, [pc, #120]	; (136f8 <Graphics::Graphics(PixelDisplayInterface*)+0x88>)
   13680:	f001 ff26 	bl	154d0 <__cyg_profile_func_enter>
      : display_(display), color_(), width_(0), height_(0)
   13684:	9b01      	ldr	r3, [sp, #4]
   13686:	9a00      	ldr	r2, [sp, #0]
   13688:	601a      	str	r2, [r3, #0]
   1368a:	9b01      	ldr	r3, [sp, #4]
   1368c:	3304      	adds	r3, #4
   1368e:	4618      	mov	r0, r3
   13690:	f7ff fcee 	bl	13070 <PixelDisplayInterface::Color_t::Color_t()>
   13694:	9b01      	ldr	r3, [sp, #4]
   13696:	2200      	movs	r2, #0
   13698:	609a      	str	r2, [r3, #8]
   1369a:	9b01      	ldr	r3, [sp, #4]
   1369c:	2200      	movs	r2, #0
   1369e:	60da      	str	r2, [r3, #12]
  {
    width_  = display->GetWidth();
   136a0:	9b00      	ldr	r3, [sp, #0]
   136a2:	681b      	ldr	r3, [r3, #0]
   136a4:	681b      	ldr	r3, [r3, #0]
   136a6:	9800      	ldr	r0, [sp, #0]
   136a8:	4798      	blx	r3
   136aa:	4602      	mov	r2, r0
   136ac:	9b01      	ldr	r3, [sp, #4]
   136ae:	609a      	str	r2, [r3, #8]
    height_ = display->GetHeight();
   136b0:	9b00      	ldr	r3, [sp, #0]
   136b2:	681b      	ldr	r3, [r3, #0]
   136b4:	3304      	adds	r3, #4
   136b6:	681b      	ldr	r3, [r3, #0]
   136b8:	9800      	ldr	r0, [sp, #0]
   136ba:	4798      	blx	r3
   136bc:	4602      	mov	r2, r0
   136be:	9b01      	ldr	r3, [sp, #4]
   136c0:	60da      	str	r2, [r3, #12]
    color_  = display->AvailableColors();
   136c2:	9b00      	ldr	r3, [sp, #0]
   136c4:	681b      	ldr	r3, [r3, #0]
   136c6:	3308      	adds	r3, #8
   136c8:	681b      	ldr	r3, [r3, #0]
   136ca:	9c01      	ldr	r4, [sp, #4]
   136cc:	9800      	ldr	r0, [sp, #0]
   136ce:	4798      	blx	r3
   136d0:	4603      	mov	r3, r0
   136d2:	461a      	mov	r2, r3
   136d4:	7122      	strb	r2, [r4, #4]
   136d6:	f3c3 2207 	ubfx	r2, r3, #8, #8
   136da:	7162      	strb	r2, [r4, #5]
   136dc:	f3c3 4307 	ubfx	r3, r3, #16, #8
   136e0:	71a3      	strb	r3, [r4, #6]
  }
   136e2:	9c01      	ldr	r4, [sp, #4]
   136e4:	462b      	mov	r3, r5
   136e6:	4619      	mov	r1, r3
   136e8:	4803      	ldr	r0, [pc, #12]	; (136f8 <Graphics::Graphics(PixelDisplayInterface*)+0x88>)
   136ea:	f001 ff05 	bl	154f8 <__cyg_profile_func_exit>
   136ee:	4623      	mov	r3, r4
   136f0:	4618      	mov	r0, r3
   136f2:	b003      	add	sp, #12
   136f4:	bd30      	pop	{r4, r5, pc}
   136f6:	bf00      	nop
   136f8:	00013671 	.word	0x00013671

000136fc <OledTerminal::OledTerminal()>:
#include <cstdint>

#include "L2_HAL/displays/oled/ssd1306.hpp"
#include "L3_Application/graphics.hpp"

class OledTerminal
   136fc:	b530      	push	{r4, r5, lr}
   136fe:	b083      	sub	sp, #12
   13700:	4675      	mov	r5, lr
   13702:	9001      	str	r0, [sp, #4]
   13704:	462b      	mov	r3, r5
   13706:	4619      	mov	r1, r3
   13708:	4816      	ldr	r0, [pc, #88]	; (13764 <OledTerminal::OledTerminal()+0x68>)
   1370a:	f001 fee1 	bl	154d0 <__cyg_profile_func_enter>
   1370e:	9b01      	ldr	r3, [sp, #4]
   13710:	4618      	mov	r0, r3
   13712:	f7ff fd37 	bl	13184 <Ssd1306::Ssd1306()>
   13716:	9b01      	ldr	r3, [sp, #4]
   13718:	f203 732c 	addw	r3, r3, #1836	; 0x72c
   1371c:	9a01      	ldr	r2, [sp, #4]
   1371e:	4611      	mov	r1, r2
   13720:	4618      	mov	r0, r3
   13722:	f7ff ffa5 	bl	13670 <Graphics::Graphics(PixelDisplayInterface*)>
   13726:	9b01      	ldr	r3, [sp, #4]
   13728:	2200      	movs	r2, #0
   1372a:	f8c3 273c 	str.w	r2, [r3, #1852]	; 0x73c
   1372e:	9b01      	ldr	r3, [sp, #4]
   13730:	2200      	movs	r2, #0
   13732:	f8c3 2740 	str.w	r2, [r3, #1856]	; 0x740
   13736:	9b01      	ldr	r3, [sp, #4]
   13738:	2200      	movs	r2, #0
   1373a:	f8c3 2744 	str.w	r2, [r3, #1860]	; 0x744
   1373e:	9b01      	ldr	r3, [sp, #4]
   13740:	f503 63e9 	add.w	r3, r3, #1864	; 0x748
   13744:	2280      	movs	r2, #128	; 0x80
   13746:	2100      	movs	r1, #0
   13748:	4618      	mov	r0, r3
   1374a:	f004 fd27 	bl	1819c <memset>
   1374e:	9c01      	ldr	r4, [sp, #4]
   13750:	462b      	mov	r3, r5
   13752:	4619      	mov	r1, r3
   13754:	4803      	ldr	r0, [pc, #12]	; (13764 <OledTerminal::OledTerminal()+0x68>)
   13756:	f001 fecf 	bl	154f8 <__cyg_profile_func_exit>
   1375a:	4623      	mov	r3, r4
   1375c:	4618      	mov	r0, r3
   1375e:	b003      	add	sp, #12
   13760:	bd30      	pop	{r4, r5, pc}
   13762:	bf00      	nop
   13764:	000136fd 	.word	0x000136fd

00013768 <main>:
  oled_terminal.printf("Returned data: %x %x %x %x\n", data[0], data[1], data[2], data[3]);
}


int main() 
{ 
   13768:	b530      	push	{r4, r5, lr}
   1376a:	b085      	sub	sp, #20
   1376c:	4675      	mov	r5, lr
   1376e:	462b      	mov	r3, r5
   13770:	4619      	mov	r1, r3
   13772:	4812      	ldr	r0, [pc, #72]	; (137bc <main+0x54>)
   13774:	f001 feac 	bl	154d0 <__cyg_profile_func_enter>
  LOG_INFO("Start\n");
   13778:	234f      	movs	r3, #79	; 0x4f
   1377a:	4a11      	ldr	r2, [pc, #68]	; (137c0 <main+0x58>)
   1377c:	4911      	ldr	r1, [pc, #68]	; (137c4 <main+0x5c>)
   1377e:	4812      	ldr	r0, [pc, #72]	; (137c8 <main+0x60>)
   13780:	f003 f900 	bl	16984 <printf>
  
  LabSpi Demo(LabSpi::kSS2);
   13784:	ab03      	add	r3, sp, #12
   13786:	2102      	movs	r1, #2
   13788:	4618      	mov	r0, r3
   1378a:	f7fc ff67 	bl	1065c <LabSpi::LabSpi(LabSpi::Peripheral)>
  Demo.Initialize(8,LabSpi::kSPI, 1, LabSpi::kMaster);
   1378e:	a803      	add	r0, sp, #12
   13790:	2300      	movs	r3, #0
   13792:	9300      	str	r3, [sp, #0]
   13794:	2301      	movs	r3, #1
   13796:	2200      	movs	r2, #0
   13798:	2108      	movs	r1, #8
   1379a:	f7fc ff7b 	bl	10694 <LabSpi::Initialize(unsigned char, LabSpi::FrameModes, unsigned char, LabSpi::Master_Slave)>
  Demo.read();
   1379e:	ab03      	add	r3, sp, #12
   137a0:	4618      	mov	r0, r3
   137a2:	f7fd fa81 	bl	10ca8 <LabSpi::read()>
  
  //oled_terminal.Initialize();
  //SpiInitialize();
  //ReadSignature();
  
}
   137a6:	2400      	movs	r4, #0
   137a8:	462b      	mov	r3, r5
   137aa:	4619      	mov	r1, r3
   137ac:	4803      	ldr	r0, [pc, #12]	; (137bc <main+0x54>)
   137ae:	f001 fea3 	bl	154f8 <__cyg_profile_func_exit>
   137b2:	4623      	mov	r3, r4
   137b4:	4618      	mov	r0, r3
   137b6:	b005      	add	sp, #20
   137b8:	bd30      	pop	{r4, r5, pc}
   137ba:	bf00      	nop
   137bc:	00013769 	.word	0x00013769
   137c0:	00018c10 	.word	0x00018c10
   137c4:	000189e8 	.word	0x000189e8
   137c8:	000188b4 	.word	0x000188b4

000137cc <unsigned long bit::Set<unsigned long>(unsigned long, unsigned long)>:
constexpr T Set(T target, uint32_t position)
   137cc:	b530      	push	{r4, r5, lr}
   137ce:	b083      	sub	sp, #12
   137d0:	4675      	mov	r5, lr
   137d2:	9001      	str	r0, [sp, #4]
   137d4:	9100      	str	r1, [sp, #0]
   137d6:	462b      	mov	r3, r5
   137d8:	4619      	mov	r1, r3
   137da:	480a      	ldr	r0, [pc, #40]	; (13804 <unsigned long bit::Set<unsigned long>(unsigned long, unsigned long)+0x38>)
   137dc:	f001 fe78 	bl	154d0 <__cyg_profile_func_enter>
  return target | (1 << position);
   137e0:	2201      	movs	r2, #1
   137e2:	9b00      	ldr	r3, [sp, #0]
   137e4:	fa02 f303 	lsl.w	r3, r2, r3
   137e8:	461a      	mov	r2, r3
   137ea:	9b01      	ldr	r3, [sp, #4]
   137ec:	ea42 0403 	orr.w	r4, r2, r3
   137f0:	462b      	mov	r3, r5
   137f2:	4619      	mov	r1, r3
   137f4:	4803      	ldr	r0, [pc, #12]	; (13804 <unsigned long bit::Set<unsigned long>(unsigned long, unsigned long)+0x38>)
   137f6:	f001 fe7f 	bl	154f8 <__cyg_profile_func_exit>
   137fa:	4623      	mov	r3, r4
}
   137fc:	4618      	mov	r0, r3
   137fe:	b003      	add	sp, #12
   13800:	bd30      	pop	{r4, r5, pc}
   13802:	bf00      	nop
   13804:	000137cd 	.word	0x000137cd

00013808 <bool bit::Read<unsigned long>(unsigned long, unsigned long)>:
[[gnu::always_inline]][[nodiscard]] constexpr bool Read(T target,
   13808:	b530      	push	{r4, r5, lr}
   1380a:	b083      	sub	sp, #12
   1380c:	4675      	mov	r5, lr
   1380e:	9001      	str	r0, [sp, #4]
   13810:	9100      	str	r1, [sp, #0]
   13812:	462b      	mov	r3, r5
   13814:	4619      	mov	r1, r3
   13816:	480c      	ldr	r0, [pc, #48]	; (13848 <bool bit::Read<unsigned long>(unsigned long, unsigned long)+0x40>)
   13818:	f001 fe5a 	bl	154d0 <__cyg_profile_func_enter>
  return static_cast<bool>(target & (1 << position));
   1381c:	2201      	movs	r2, #1
   1381e:	9b00      	ldr	r3, [sp, #0]
   13820:	fa02 f303 	lsl.w	r3, r2, r3
   13824:	461a      	mov	r2, r3
   13826:	9b01      	ldr	r3, [sp, #4]
   13828:	4013      	ands	r3, r2
   1382a:	2b00      	cmp	r3, #0
   1382c:	bf14      	ite	ne
   1382e:	2301      	movne	r3, #1
   13830:	2300      	moveq	r3, #0
   13832:	b2dc      	uxtb	r4, r3
   13834:	462b      	mov	r3, r5
   13836:	4619      	mov	r1, r3
   13838:	4803      	ldr	r0, [pc, #12]	; (13848 <bool bit::Read<unsigned long>(unsigned long, unsigned long)+0x40>)
   1383a:	f001 fe5d 	bl	154f8 <__cyg_profile_func_exit>
   1383e:	4623      	mov	r3, r4
}
   13840:	4618      	mov	r0, r3
   13842:	b003      	add	sp, #12
   13844:	bd30      	pop	{r4, r5, pc}
   13846:	bf00      	nop
   13848:	00013809 	.word	0x00013809

0001384c <unsigned long bit::Insert<unsigned long, unsigned char>(unsigned long, unsigned char, unsigned long, unsigned long)>:
constexpr T Insert(T target, U value, uint32_t position, uint32_t width = 1)
   1384c:	b530      	push	{r4, r5, lr}
   1384e:	b089      	sub	sp, #36	; 0x24
   13850:	4675      	mov	r5, lr
   13852:	9003      	str	r0, [sp, #12]
   13854:	9201      	str	r2, [sp, #4]
   13856:	9300      	str	r3, [sp, #0]
   13858:	460b      	mov	r3, r1
   1385a:	f88d 300b 	strb.w	r3, [sp, #11]
   1385e:	462b      	mov	r3, r5
   13860:	4619      	mov	r1, r3
   13862:	4816      	ldr	r0, [pc, #88]	; (138bc <unsigned long bit::Insert<unsigned long, unsigned char>(unsigned long, unsigned char, unsigned long, unsigned long)+0x70>)
   13864:	f001 fe34 	bl	154d0 <__cyg_profile_func_enter>
  constexpr UnsignedT kFieldOfOnes = GenerateFieldOfOnes<T>();
   13868:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1386c:	9307      	str	r3, [sp, #28]
  constexpr size_t kTargetWidth     = sizeof(T) * 8;
   1386e:	2320      	movs	r3, #32
   13870:	9306      	str	r3, [sp, #24]
  UnsignedT mask   = kFieldOfOnes >> (kTargetWidth - width);
   13872:	9b00      	ldr	r3, [sp, #0]
   13874:	f1c3 0320 	rsb	r3, r3, #32
   13878:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1387c:	fa22 f303 	lsr.w	r3, r2, r3
   13880:	9305      	str	r3, [sp, #20]
  target &= ~(mask << position);
   13882:	9a05      	ldr	r2, [sp, #20]
   13884:	9b01      	ldr	r3, [sp, #4]
   13886:	fa02 f303 	lsl.w	r3, r2, r3
   1388a:	43db      	mvns	r3, r3
   1388c:	9a03      	ldr	r2, [sp, #12]
   1388e:	4013      	ands	r3, r2
   13890:	9303      	str	r3, [sp, #12]
  target |= (value & mask) << position;
   13892:	f89d 200b 	ldrb.w	r2, [sp, #11]
   13896:	9b05      	ldr	r3, [sp, #20]
   13898:	401a      	ands	r2, r3
   1389a:	9b01      	ldr	r3, [sp, #4]
   1389c:	fa02 f303 	lsl.w	r3, r2, r3
   138a0:	9a03      	ldr	r2, [sp, #12]
   138a2:	4313      	orrs	r3, r2
   138a4:	9303      	str	r3, [sp, #12]
  return target;
   138a6:	9c03      	ldr	r4, [sp, #12]
   138a8:	462b      	mov	r3, r5
   138aa:	4619      	mov	r1, r3
   138ac:	4803      	ldr	r0, [pc, #12]	; (138bc <unsigned long bit::Insert<unsigned long, unsigned char>(unsigned long, unsigned char, unsigned long, unsigned long)+0x70>)
   138ae:	f001 fe23 	bl	154f8 <__cyg_profile_func_exit>
   138b2:	4623      	mov	r3, r4
}
   138b4:	4618      	mov	r0, r3
   138b6:	b009      	add	sp, #36	; 0x24
   138b8:	bd30      	pop	{r4, r5, pc}
   138ba:	bf00      	nop
   138bc:	0001384d 	.word	0x0001384d

000138c0 <unsigned long bit::Extract<unsigned long>(unsigned long, unsigned long, unsigned long)>:
constexpr T Extract(T target, uint32_t position, uint32_t width = 1)
   138c0:	b530      	push	{r4, r5, lr}
   138c2:	b089      	sub	sp, #36	; 0x24
   138c4:	4675      	mov	r5, lr
   138c6:	9003      	str	r0, [sp, #12]
   138c8:	9102      	str	r1, [sp, #8]
   138ca:	9201      	str	r2, [sp, #4]
   138cc:	462b      	mov	r3, r5
   138ce:	4619      	mov	r1, r3
   138d0:	480f      	ldr	r0, [pc, #60]	; (13910 <unsigned long bit::Extract<unsigned long>(unsigned long, unsigned long, unsigned long)+0x50>)
   138d2:	f001 fdfd 	bl	154d0 <__cyg_profile_func_enter>
  constexpr UnsignedT kFieldOfOnes = GenerateFieldOfOnes<T>();
   138d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   138da:	9307      	str	r3, [sp, #28]
  constexpr size_t kTargetWidth     = sizeof(T) * 8;
   138dc:	2320      	movs	r3, #32
   138de:	9306      	str	r3, [sp, #24]
  UnsignedT mask   = kFieldOfOnes >> (kTargetWidth - width);
   138e0:	9b01      	ldr	r3, [sp, #4]
   138e2:	f1c3 0320 	rsb	r3, r3, #32
   138e6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   138ea:	fa22 f303 	lsr.w	r3, r2, r3
   138ee:	9305      	str	r3, [sp, #20]
  return (target >> position) & mask;
   138f0:	9a03      	ldr	r2, [sp, #12]
   138f2:	9b02      	ldr	r3, [sp, #8]
   138f4:	40da      	lsrs	r2, r3
   138f6:	9b05      	ldr	r3, [sp, #20]
   138f8:	ea02 0403 	and.w	r4, r2, r3
   138fc:	462b      	mov	r3, r5
   138fe:	4619      	mov	r1, r3
   13900:	4803      	ldr	r0, [pc, #12]	; (13910 <unsigned long bit::Extract<unsigned long>(unsigned long, unsigned long, unsigned long)+0x50>)
   13902:	f001 fdf9 	bl	154f8 <__cyg_profile_func_exit>
   13906:	4623      	mov	r3, r4
}
   13908:	4618      	mov	r0, r3
   1390a:	b009      	add	sp, #36	; 0x24
   1390c:	bd30      	pop	{r4, r5, pc}
   1390e:	bf00      	nop
   13910:	000138c1 	.word	0x000138c1

00013914 <unsigned long bit::Insert<unsigned long, bool>(unsigned long, bool, unsigned long, unsigned long)>:
constexpr T Insert(T target, U value, uint32_t position, uint32_t width = 1)
   13914:	b530      	push	{r4, r5, lr}
   13916:	b089      	sub	sp, #36	; 0x24
   13918:	4675      	mov	r5, lr
   1391a:	9003      	str	r0, [sp, #12]
   1391c:	9201      	str	r2, [sp, #4]
   1391e:	9300      	str	r3, [sp, #0]
   13920:	460b      	mov	r3, r1
   13922:	f88d 300b 	strb.w	r3, [sp, #11]
   13926:	462b      	mov	r3, r5
   13928:	4619      	mov	r1, r3
   1392a:	4816      	ldr	r0, [pc, #88]	; (13984 <unsigned long bit::Insert<unsigned long, bool>(unsigned long, bool, unsigned long, unsigned long)+0x70>)
   1392c:	f001 fdd0 	bl	154d0 <__cyg_profile_func_enter>
  constexpr UnsignedT kFieldOfOnes = GenerateFieldOfOnes<T>();
   13930:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   13934:	9307      	str	r3, [sp, #28]
  constexpr size_t kTargetWidth     = sizeof(T) * 8;
   13936:	2320      	movs	r3, #32
   13938:	9306      	str	r3, [sp, #24]
  UnsignedT mask   = kFieldOfOnes >> (kTargetWidth - width);
   1393a:	9b00      	ldr	r3, [sp, #0]
   1393c:	f1c3 0320 	rsb	r3, r3, #32
   13940:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   13944:	fa22 f303 	lsr.w	r3, r2, r3
   13948:	9305      	str	r3, [sp, #20]
  target &= ~(mask << position);
   1394a:	9a05      	ldr	r2, [sp, #20]
   1394c:	9b01      	ldr	r3, [sp, #4]
   1394e:	fa02 f303 	lsl.w	r3, r2, r3
   13952:	43db      	mvns	r3, r3
   13954:	9a03      	ldr	r2, [sp, #12]
   13956:	4013      	ands	r3, r2
   13958:	9303      	str	r3, [sp, #12]
  target |= (value & mask) << position;
   1395a:	f89d 200b 	ldrb.w	r2, [sp, #11]
   1395e:	9b05      	ldr	r3, [sp, #20]
   13960:	401a      	ands	r2, r3
   13962:	9b01      	ldr	r3, [sp, #4]
   13964:	fa02 f303 	lsl.w	r3, r2, r3
   13968:	9a03      	ldr	r2, [sp, #12]
   1396a:	4313      	orrs	r3, r2
   1396c:	9303      	str	r3, [sp, #12]
  return target;
   1396e:	9c03      	ldr	r4, [sp, #12]
   13970:	462b      	mov	r3, r5
   13972:	4619      	mov	r1, r3
   13974:	4803      	ldr	r0, [pc, #12]	; (13984 <unsigned long bit::Insert<unsigned long, bool>(unsigned long, bool, unsigned long, unsigned long)+0x70>)
   13976:	f001 fdbf 	bl	154f8 <__cyg_profile_func_exit>
   1397a:	4623      	mov	r3, r4
}
   1397c:	4618      	mov	r0, r3
   1397e:	b009      	add	sp, #36	; 0x24
   13980:	bd30      	pop	{r4, r5, pc}
   13982:	bf00      	nop
   13984:	00013915 	.word	0x00013915

00013988 <__static_initialization_and_destruction_0(int, int)>:
   13988:	b510      	push	{r4, lr}
   1398a:	b082      	sub	sp, #8
   1398c:	4674      	mov	r4, lr
   1398e:	9001      	str	r0, [sp, #4]
   13990:	9100      	str	r1, [sp, #0]
   13992:	4623      	mov	r3, r4
   13994:	4619      	mov	r1, r3
   13996:	4815      	ldr	r0, [pc, #84]	; (139ec <__static_initialization_and_destruction_0(int, int)+0x64>)
   13998:	f001 fd9a 	bl	154d0 <__cyg_profile_func_enter>
   1399c:	9b01      	ldr	r3, [sp, #4]
   1399e:	2b01      	cmp	r3, #1
   139a0:	d11b      	bne.n	139da <__static_initialization_and_destruction_0(int, int)+0x52>
   139a2:	9b00      	ldr	r3, [sp, #0]
   139a4:	f64f 72ff 	movw	r2, #65535	; 0xffff
   139a8:	4293      	cmp	r3, r2
   139aa:	d116      	bne.n	139da <__static_initialization_and_destruction_0(int, int)+0x52>
  LabGPIO P1_10(1,10); //CE
   139ac:	220a      	movs	r2, #10
   139ae:	2101      	movs	r1, #1
   139b0:	480f      	ldr	r0, [pc, #60]	; (139f0 <__static_initialization_and_destruction_0(int, int)+0x68>)
   139b2:	f7fc fcd9 	bl	10368 <LabGPIO::LabGPIO(unsigned char, unsigned char)>
  LabGPIO P1_04(1,4); // MISO
   139b6:	2204      	movs	r2, #4
   139b8:	2101      	movs	r1, #1
   139ba:	480e      	ldr	r0, [pc, #56]	; (139f4 <__static_initialization_and_destruction_0(int, int)+0x6c>)
   139bc:	f7fc fcd4 	bl	10368 <LabGPIO::LabGPIO(unsigned char, unsigned char)>
  LabGPIO P1_00 (1,0); //SCLK
   139c0:	2200      	movs	r2, #0
   139c2:	2101      	movs	r1, #1
   139c4:	480c      	ldr	r0, [pc, #48]	; (139f8 <__static_initialization_and_destruction_0(int, int)+0x70>)
   139c6:	f7fc fccf 	bl	10368 <LabGPIO::LabGPIO(unsigned char, unsigned char)>
  LabGPIO P1_01(1,1); //MOSI
   139ca:	2201      	movs	r2, #1
   139cc:	2101      	movs	r1, #1
   139ce:	480b      	ldr	r0, [pc, #44]	; (139fc <__static_initialization_and_destruction_0(int, int)+0x74>)
   139d0:	f7fc fcca 	bl	10368 <LabGPIO::LabGPIO(unsigned char, unsigned char)>
  OledTerminal oled_terminal;
   139d4:	480a      	ldr	r0, [pc, #40]	; (13a00 <__static_initialization_and_destruction_0(int, int)+0x78>)
   139d6:	f7ff fe91 	bl	136fc <OledTerminal::OledTerminal()>
   139da:	4623      	mov	r3, r4
   139dc:	4619      	mov	r1, r3
   139de:	4803      	ldr	r0, [pc, #12]	; (139ec <__static_initialization_and_destruction_0(int, int)+0x64>)
   139e0:	f001 fd8a 	bl	154f8 <__cyg_profile_func_exit>
}
   139e4:	bf00      	nop
   139e6:	b002      	add	sp, #8
   139e8:	bd10      	pop	{r4, pc}
   139ea:	bf00      	nop
   139ec:	00013989 	.word	0x00013989
   139f0:	10000688 	.word	0x10000688
   139f4:	10000690 	.word	0x10000690
   139f8:	10000698 	.word	0x10000698
   139fc:	100006a0 	.word	0x100006a0
   13a00:	100006a8 	.word	0x100006a8

00013a04 <_GLOBAL__sub_I_P1_10>:
   13a04:	b510      	push	{r4, lr}
   13a06:	4674      	mov	r4, lr
   13a08:	4623      	mov	r3, r4
   13a0a:	4619      	mov	r1, r3
   13a0c:	4806      	ldr	r0, [pc, #24]	; (13a28 <_GLOBAL__sub_I_P1_10+0x24>)
   13a0e:	f001 fd5f 	bl	154d0 <__cyg_profile_func_enter>
   13a12:	f64f 71ff 	movw	r1, #65535	; 0xffff
   13a16:	2001      	movs	r0, #1
   13a18:	f7ff ffb6 	bl	13988 <__static_initialization_and_destruction_0(int, int)>
   13a1c:	4623      	mov	r3, r4
   13a1e:	4619      	mov	r1, r3
   13a20:	4801      	ldr	r0, [pc, #4]	; (13a28 <_GLOBAL__sub_I_P1_10+0x24>)
   13a22:	f001 fd69 	bl	154f8 <__cyg_profile_func_exit>
   13a26:	bd10      	pop	{r4, pc}
   13a28:	00013a05 	.word	0x00013a05

00013a2c <pinconn::clearF4(unsigned char, unsigned char)>:
}
void pinconn::repeater(uint8_t port, uint8_t pin){
    inactive(port,pin);
    *pincon[port][pin] |= (0b11<<3); 
}
void pinconn::clearF4(uint8_t port, uint8_t pin){
   13a2c:	b510      	push	{r4, lr}
   13a2e:	b082      	sub	sp, #8
   13a30:	4674      	mov	r4, lr
   13a32:	9001      	str	r0, [sp, #4]
   13a34:	460b      	mov	r3, r1
   13a36:	f88d 3003 	strb.w	r3, [sp, #3]
   13a3a:	4613      	mov	r3, r2
   13a3c:	f88d 3002 	strb.w	r3, [sp, #2]
   13a40:	4623      	mov	r3, r4
   13a42:	4619      	mov	r1, r3
   13a44:	4810      	ldr	r0, [pc, #64]	; (13a88 <pinconn::clearF4(unsigned char, unsigned char)+0x5c>)
   13a46:	f001 fd43 	bl	154d0 <__cyg_profile_func_enter>
    *pincon[port][pin] &= ~(0xF<<0);
   13a4a:	f89d 2003 	ldrb.w	r2, [sp, #3]
   13a4e:	f89d 3002 	ldrb.w	r3, [sp, #2]
   13a52:	490e      	ldr	r1, [pc, #56]	; (13a8c <pinconn::clearF4(unsigned char, unsigned char)+0x60>)
   13a54:	0152      	lsls	r2, r2, #5
   13a56:	4413      	add	r3, r2
   13a58:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   13a5c:	681a      	ldr	r2, [r3, #0]
   13a5e:	f89d 1003 	ldrb.w	r1, [sp, #3]
   13a62:	f89d 3002 	ldrb.w	r3, [sp, #2]
   13a66:	4809      	ldr	r0, [pc, #36]	; (13a8c <pinconn::clearF4(unsigned char, unsigned char)+0x60>)
   13a68:	0149      	lsls	r1, r1, #5
   13a6a:	440b      	add	r3, r1
   13a6c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
   13a70:	f022 020f 	bic.w	r2, r2, #15
   13a74:	601a      	str	r2, [r3, #0]
   13a76:	4623      	mov	r3, r4
   13a78:	4619      	mov	r1, r3
   13a7a:	4803      	ldr	r0, [pc, #12]	; (13a88 <pinconn::clearF4(unsigned char, unsigned char)+0x5c>)
   13a7c:	f001 fd3c 	bl	154f8 <__cyg_profile_func_exit>
}
   13a80:	bf00      	nop
   13a82:	b002      	add	sp, #8
   13a84:	bd10      	pop	{r4, pc}
   13a86:	bf00      	nop
   13a88:	00013a2d 	.word	0x00013a2d
   13a8c:	10000080 	.word	0x10000080

00013a90 <pinconn::ssp_clk(unsigned char, unsigned char)>:
void pinconn::ssp_clk(uint8_t port, uint8_t pin){
   13a90:	b510      	push	{r4, lr}
   13a92:	b082      	sub	sp, #8
   13a94:	4674      	mov	r4, lr
   13a96:	9001      	str	r0, [sp, #4]
   13a98:	460b      	mov	r3, r1
   13a9a:	f88d 3003 	strb.w	r3, [sp, #3]
   13a9e:	4613      	mov	r3, r2
   13aa0:	f88d 3002 	strb.w	r3, [sp, #2]
   13aa4:	4623      	mov	r3, r4
   13aa6:	4619      	mov	r1, r3
   13aa8:	4829      	ldr	r0, [pc, #164]	; (13b50 <pinconn::ssp_clk(unsigned char, unsigned char)+0xc0>)
   13aaa:	f001 fd11 	bl	154d0 <__cyg_profile_func_enter>
    clearF4(port,pin);
   13aae:	f89d 2002 	ldrb.w	r2, [sp, #2]
   13ab2:	f89d 3003 	ldrb.w	r3, [sp, #3]
   13ab6:	4619      	mov	r1, r3
   13ab8:	9801      	ldr	r0, [sp, #4]
   13aba:	f7ff ffb7 	bl	13a2c <pinconn::clearF4(unsigned char, unsigned char)>
    if((port == 0) && (pin == (7|15))) 
   13abe:	f89d 3003 	ldrb.w	r3, [sp, #3]
   13ac2:	2b00      	cmp	r3, #0
   13ac4:	d11a      	bne.n	13afc <pinconn::ssp_clk(unsigned char, unsigned char)+0x6c>
   13ac6:	f89d 3002 	ldrb.w	r3, [sp, #2]
   13aca:	2b0f      	cmp	r3, #15
   13acc:	d116      	bne.n	13afc <pinconn::ssp_clk(unsigned char, unsigned char)+0x6c>
    {
        *pincon[port][pin] |= (0b1<<1);
   13ace:	f89d 2003 	ldrb.w	r2, [sp, #3]
   13ad2:	f89d 3002 	ldrb.w	r3, [sp, #2]
   13ad6:	491f      	ldr	r1, [pc, #124]	; (13b54 <pinconn::ssp_clk(unsigned char, unsigned char)+0xc4>)
   13ad8:	0152      	lsls	r2, r2, #5
   13ada:	4413      	add	r3, r2
   13adc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   13ae0:	681a      	ldr	r2, [r3, #0]
   13ae2:	f89d 1003 	ldrb.w	r1, [sp, #3]
   13ae6:	f89d 3002 	ldrb.w	r3, [sp, #2]
   13aea:	481a      	ldr	r0, [pc, #104]	; (13b54 <pinconn::ssp_clk(unsigned char, unsigned char)+0xc4>)
   13aec:	0149      	lsls	r1, r1, #5
   13aee:	440b      	add	r3, r1
   13af0:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
   13af4:	f042 0202 	orr.w	r2, r2, #2
   13af8:	601a      	str	r2, [r3, #0]
   13afa:	e021      	b.n	13b40 <pinconn::ssp_clk(unsigned char, unsigned char)+0xb0>
    }
    else if((port == 1) && (pin == 0))
   13afc:	f89d 3003 	ldrb.w	r3, [sp, #3]
   13b00:	2b01      	cmp	r3, #1
   13b02:	d11a      	bne.n	13b3a <pinconn::ssp_clk(unsigned char, unsigned char)+0xaa>
   13b04:	f89d 3002 	ldrb.w	r3, [sp, #2]
   13b08:	2b00      	cmp	r3, #0
   13b0a:	d116      	bne.n	13b3a <pinconn::ssp_clk(unsigned char, unsigned char)+0xaa>
    {
        *pincon[port][pin] |= (0b100);
   13b0c:	f89d 2003 	ldrb.w	r2, [sp, #3]
   13b10:	f89d 3002 	ldrb.w	r3, [sp, #2]
   13b14:	490f      	ldr	r1, [pc, #60]	; (13b54 <pinconn::ssp_clk(unsigned char, unsigned char)+0xc4>)
   13b16:	0152      	lsls	r2, r2, #5
   13b18:	4413      	add	r3, r2
   13b1a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   13b1e:	681a      	ldr	r2, [r3, #0]
   13b20:	f89d 1003 	ldrb.w	r1, [sp, #3]
   13b24:	f89d 3002 	ldrb.w	r3, [sp, #2]
   13b28:	480a      	ldr	r0, [pc, #40]	; (13b54 <pinconn::ssp_clk(unsigned char, unsigned char)+0xc4>)
   13b2a:	0149      	lsls	r1, r1, #5
   13b2c:	440b      	add	r3, r1
   13b2e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
   13b32:	f042 0204 	orr.w	r2, r2, #4
   13b36:	601a      	str	r2, [r3, #0]
   13b38:	e002      	b.n	13b40 <pinconn::ssp_clk(unsigned char, unsigned char)+0xb0>
    }
    else
    {
        printf("Not a SSP CLK port");
   13b3a:	4807      	ldr	r0, [pc, #28]	; (13b58 <pinconn::ssp_clk(unsigned char, unsigned char)+0xc8>)
   13b3c:	f002 ff22 	bl	16984 <printf>
   13b40:	4623      	mov	r3, r4
   13b42:	4619      	mov	r1, r3
   13b44:	4802      	ldr	r0, [pc, #8]	; (13b50 <pinconn::ssp_clk(unsigned char, unsigned char)+0xc0>)
   13b46:	f001 fcd7 	bl	154f8 <__cyg_profile_func_exit>
    }
}
   13b4a:	bf00      	nop
   13b4c:	b002      	add	sp, #8
   13b4e:	bd10      	pop	{r4, pc}
   13b50:	00013a91 	.word	0x00013a91
   13b54:	10000080 	.word	0x10000080
   13b58:	00018df0 	.word	0x00018df0

00013b5c <pinconn::ssp_miso(unsigned char, unsigned char)>:
void pinconn::ssp_miso(uint8_t port, uint8_t pin){
   13b5c:	b510      	push	{r4, lr}
   13b5e:	b082      	sub	sp, #8
   13b60:	4674      	mov	r4, lr
   13b62:	9001      	str	r0, [sp, #4]
   13b64:	460b      	mov	r3, r1
   13b66:	f88d 3003 	strb.w	r3, [sp, #3]
   13b6a:	4613      	mov	r3, r2
   13b6c:	f88d 3002 	strb.w	r3, [sp, #2]
   13b70:	4623      	mov	r3, r4
   13b72:	4619      	mov	r1, r3
   13b74:	4829      	ldr	r0, [pc, #164]	; (13c1c <pinconn::ssp_miso(unsigned char, unsigned char)+0xc0>)
   13b76:	f001 fcab 	bl	154d0 <__cyg_profile_func_enter>
     clearF4(port,pin);
   13b7a:	f89d 2002 	ldrb.w	r2, [sp, #2]
   13b7e:	f89d 3003 	ldrb.w	r3, [sp, #3]
   13b82:	4619      	mov	r1, r3
   13b84:	9801      	ldr	r0, [sp, #4]
   13b86:	f7ff ff51 	bl	13a2c <pinconn::clearF4(unsigned char, unsigned char)>
     if((port == 0) && (pin == (17|8))) 
   13b8a:	f89d 3003 	ldrb.w	r3, [sp, #3]
   13b8e:	2b00      	cmp	r3, #0
   13b90:	d11a      	bne.n	13bc8 <pinconn::ssp_miso(unsigned char, unsigned char)+0x6c>
   13b92:	f89d 3002 	ldrb.w	r3, [sp, #2]
   13b96:	2b19      	cmp	r3, #25
   13b98:	d116      	bne.n	13bc8 <pinconn::ssp_miso(unsigned char, unsigned char)+0x6c>
    {
        *pincon[port][pin] |= (0b1<<1);
   13b9a:	f89d 2003 	ldrb.w	r2, [sp, #3]
   13b9e:	f89d 3002 	ldrb.w	r3, [sp, #2]
   13ba2:	491f      	ldr	r1, [pc, #124]	; (13c20 <pinconn::ssp_miso(unsigned char, unsigned char)+0xc4>)
   13ba4:	0152      	lsls	r2, r2, #5
   13ba6:	4413      	add	r3, r2
   13ba8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   13bac:	681a      	ldr	r2, [r3, #0]
   13bae:	f89d 1003 	ldrb.w	r1, [sp, #3]
   13bb2:	f89d 3002 	ldrb.w	r3, [sp, #2]
   13bb6:	481a      	ldr	r0, [pc, #104]	; (13c20 <pinconn::ssp_miso(unsigned char, unsigned char)+0xc4>)
   13bb8:	0149      	lsls	r1, r1, #5
   13bba:	440b      	add	r3, r1
   13bbc:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
   13bc0:	f042 0202 	orr.w	r2, r2, #2
   13bc4:	601a      	str	r2, [r3, #0]
   13bc6:	e021      	b.n	13c0c <pinconn::ssp_miso(unsigned char, unsigned char)+0xb0>
    }
    else if((port == 1) && (pin == 4))
   13bc8:	f89d 3003 	ldrb.w	r3, [sp, #3]
   13bcc:	2b01      	cmp	r3, #1
   13bce:	d11a      	bne.n	13c06 <pinconn::ssp_miso(unsigned char, unsigned char)+0xaa>
   13bd0:	f89d 3002 	ldrb.w	r3, [sp, #2]
   13bd4:	2b04      	cmp	r3, #4
   13bd6:	d116      	bne.n	13c06 <pinconn::ssp_miso(unsigned char, unsigned char)+0xaa>
    {
        *pincon[port][pin] |= (0b100);
   13bd8:	f89d 2003 	ldrb.w	r2, [sp, #3]
   13bdc:	f89d 3002 	ldrb.w	r3, [sp, #2]
   13be0:	490f      	ldr	r1, [pc, #60]	; (13c20 <pinconn::ssp_miso(unsigned char, unsigned char)+0xc4>)
   13be2:	0152      	lsls	r2, r2, #5
   13be4:	4413      	add	r3, r2
   13be6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   13bea:	681a      	ldr	r2, [r3, #0]
   13bec:	f89d 1003 	ldrb.w	r1, [sp, #3]
   13bf0:	f89d 3002 	ldrb.w	r3, [sp, #2]
   13bf4:	480a      	ldr	r0, [pc, #40]	; (13c20 <pinconn::ssp_miso(unsigned char, unsigned char)+0xc4>)
   13bf6:	0149      	lsls	r1, r1, #5
   13bf8:	440b      	add	r3, r1
   13bfa:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
   13bfe:	f042 0204 	orr.w	r2, r2, #4
   13c02:	601a      	str	r2, [r3, #0]
   13c04:	e002      	b.n	13c0c <pinconn::ssp_miso(unsigned char, unsigned char)+0xb0>
    }
    else
    {
        printf("Not a MISO port");
   13c06:	4807      	ldr	r0, [pc, #28]	; (13c24 <pinconn::ssp_miso(unsigned char, unsigned char)+0xc8>)
   13c08:	f002 febc 	bl	16984 <printf>
   13c0c:	4623      	mov	r3, r4
   13c0e:	4619      	mov	r1, r3
   13c10:	4802      	ldr	r0, [pc, #8]	; (13c1c <pinconn::ssp_miso(unsigned char, unsigned char)+0xc0>)
   13c12:	f001 fc71 	bl	154f8 <__cyg_profile_func_exit>
    }
}
   13c16:	bf00      	nop
   13c18:	b002      	add	sp, #8
   13c1a:	bd10      	pop	{r4, pc}
   13c1c:	00013b5d 	.word	0x00013b5d
   13c20:	10000080 	.word	0x10000080
   13c24:	00018e04 	.word	0x00018e04

00013c28 <pinconn::ssp_mosi(unsigned char, unsigned char)>:
void pinconn::ssp_mosi(uint8_t port, uint8_t pin){
   13c28:	b510      	push	{r4, lr}
   13c2a:	b082      	sub	sp, #8
   13c2c:	4674      	mov	r4, lr
   13c2e:	9001      	str	r0, [sp, #4]
   13c30:	460b      	mov	r3, r1
   13c32:	f88d 3003 	strb.w	r3, [sp, #3]
   13c36:	4613      	mov	r3, r2
   13c38:	f88d 3002 	strb.w	r3, [sp, #2]
   13c3c:	4623      	mov	r3, r4
   13c3e:	4619      	mov	r1, r3
   13c40:	4829      	ldr	r0, [pc, #164]	; (13ce8 <pinconn::ssp_mosi(unsigned char, unsigned char)+0xc0>)
   13c42:	f001 fc45 	bl	154d0 <__cyg_profile_func_enter>
     clearF4(port,pin);
   13c46:	f89d 2002 	ldrb.w	r2, [sp, #2]
   13c4a:	f89d 3003 	ldrb.w	r3, [sp, #3]
   13c4e:	4619      	mov	r1, r3
   13c50:	9801      	ldr	r0, [sp, #4]
   13c52:	f7ff feeb 	bl	13a2c <pinconn::clearF4(unsigned char, unsigned char)>
     if((port == 0) && (pin == (9|18))) 
   13c56:	f89d 3003 	ldrb.w	r3, [sp, #3]
   13c5a:	2b00      	cmp	r3, #0
   13c5c:	d11a      	bne.n	13c94 <pinconn::ssp_mosi(unsigned char, unsigned char)+0x6c>
   13c5e:	f89d 3002 	ldrb.w	r3, [sp, #2]
   13c62:	2b1b      	cmp	r3, #27
   13c64:	d116      	bne.n	13c94 <pinconn::ssp_mosi(unsigned char, unsigned char)+0x6c>
    {
        *pincon[port][pin] |= (0b1<<1);
   13c66:	f89d 2003 	ldrb.w	r2, [sp, #3]
   13c6a:	f89d 3002 	ldrb.w	r3, [sp, #2]
   13c6e:	491f      	ldr	r1, [pc, #124]	; (13cec <pinconn::ssp_mosi(unsigned char, unsigned char)+0xc4>)
   13c70:	0152      	lsls	r2, r2, #5
   13c72:	4413      	add	r3, r2
   13c74:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   13c78:	681a      	ldr	r2, [r3, #0]
   13c7a:	f89d 1003 	ldrb.w	r1, [sp, #3]
   13c7e:	f89d 3002 	ldrb.w	r3, [sp, #2]
   13c82:	481a      	ldr	r0, [pc, #104]	; (13cec <pinconn::ssp_mosi(unsigned char, unsigned char)+0xc4>)
   13c84:	0149      	lsls	r1, r1, #5
   13c86:	440b      	add	r3, r1
   13c88:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
   13c8c:	f042 0202 	orr.w	r2, r2, #2
   13c90:	601a      	str	r2, [r3, #0]
   13c92:	e021      	b.n	13cd8 <pinconn::ssp_mosi(unsigned char, unsigned char)+0xb0>
    }
    else if((port == 1) && (pin == 1))
   13c94:	f89d 3003 	ldrb.w	r3, [sp, #3]
   13c98:	2b01      	cmp	r3, #1
   13c9a:	d11a      	bne.n	13cd2 <pinconn::ssp_mosi(unsigned char, unsigned char)+0xaa>
   13c9c:	f89d 3002 	ldrb.w	r3, [sp, #2]
   13ca0:	2b01      	cmp	r3, #1
   13ca2:	d116      	bne.n	13cd2 <pinconn::ssp_mosi(unsigned char, unsigned char)+0xaa>
    {
        *pincon[port][pin] |= (0b100);
   13ca4:	f89d 2003 	ldrb.w	r2, [sp, #3]
   13ca8:	f89d 3002 	ldrb.w	r3, [sp, #2]
   13cac:	490f      	ldr	r1, [pc, #60]	; (13cec <pinconn::ssp_mosi(unsigned char, unsigned char)+0xc4>)
   13cae:	0152      	lsls	r2, r2, #5
   13cb0:	4413      	add	r3, r2
   13cb2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   13cb6:	681a      	ldr	r2, [r3, #0]
   13cb8:	f89d 1003 	ldrb.w	r1, [sp, #3]
   13cbc:	f89d 3002 	ldrb.w	r3, [sp, #2]
   13cc0:	480a      	ldr	r0, [pc, #40]	; (13cec <pinconn::ssp_mosi(unsigned char, unsigned char)+0xc4>)
   13cc2:	0149      	lsls	r1, r1, #5
   13cc4:	440b      	add	r3, r1
   13cc6:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
   13cca:	f042 0204 	orr.w	r2, r2, #4
   13cce:	601a      	str	r2, [r3, #0]
   13cd0:	e002      	b.n	13cd8 <pinconn::ssp_mosi(unsigned char, unsigned char)+0xb0>
    }
    else
    {
        printf("Not a MOSI port");
   13cd2:	4807      	ldr	r0, [pc, #28]	; (13cf0 <pinconn::ssp_mosi(unsigned char, unsigned char)+0xc8>)
   13cd4:	f002 fe56 	bl	16984 <printf>
   13cd8:	4623      	mov	r3, r4
   13cda:	4619      	mov	r1, r3
   13cdc:	4802      	ldr	r0, [pc, #8]	; (13ce8 <pinconn::ssp_mosi(unsigned char, unsigned char)+0xc0>)
   13cde:	f001 fc0b 	bl	154f8 <__cyg_profile_func_exit>
    }
}
   13ce2:	bf00      	nop
   13ce4:	b002      	add	sp, #8
   13ce6:	bd10      	pop	{r4, pc}
   13ce8:	00013c29 	.word	0x00013c29
   13cec:	10000080 	.word	0x10000080
   13cf0:	00018e14 	.word	0x00018e14

00013cf4 <SetUptimeFunction(unsigned long long (*)())>:
{
   13cf4:	b510      	push	{r4, lr}
   13cf6:	b082      	sub	sp, #8
   13cf8:	4674      	mov	r4, lr
   13cfa:	9001      	str	r0, [sp, #4]
   13cfc:	4623      	mov	r3, r4
   13cfe:	4619      	mov	r1, r3
   13d00:	4806      	ldr	r0, [pc, #24]	; (13d1c <SetUptimeFunction(unsigned long long (*)())+0x28>)
   13d02:	f001 fbe5 	bl	154d0 <__cyg_profile_func_enter>
  Uptime = uptime_function;
   13d06:	4a06      	ldr	r2, [pc, #24]	; (13d20 <SetUptimeFunction(unsigned long long (*)())+0x2c>)
   13d08:	9b01      	ldr	r3, [sp, #4]
   13d0a:	6013      	str	r3, [r2, #0]
   13d0c:	4623      	mov	r3, r4
   13d0e:	4619      	mov	r1, r3
   13d10:	4802      	ldr	r0, [pc, #8]	; (13d1c <SetUptimeFunction(unsigned long long (*)())+0x28>)
   13d12:	f001 fbf1 	bl	154f8 <__cyg_profile_func_exit>
}
   13d16:	bf00      	nop
   13d18:	b002      	add	sp, #8
   13d1a:	bd10      	pop	{r4, pc}
   13d1c:	00013cf5 	.word	0x00013cf5
   13d20:	10000018 	.word	0x10000018

00013d24 <SystemTimer::DisableTimer()>:
  /// system_timer_isr defaults to nullptr. The actual SystemTickHandler should
  /// check if the isr is set to nullptr, and if it is, turn off the timer, if
  /// set a proper function then execute it.
  inline static IsrPointer system_timer_isr = nullptr;
  /// WARNING: Doing so will most likely disable FreeRTOS
  static void DisableTimer()
   13d24:	b510      	push	{r4, lr}
   13d26:	4674      	mov	r4, lr
   13d28:	4623      	mov	r3, r4
   13d2a:	4619      	mov	r1, r3
   13d2c:	480a      	ldr	r0, [pc, #40]	; (13d58 <SystemTimer::DisableTimer()+0x34>)
   13d2e:	f001 fbcf 	bl	154d0 <__cyg_profile_func_enter>
  {
    sys_tick->LOAD = 0;
   13d32:	4b0a      	ldr	r3, [pc, #40]	; (13d5c <SystemTimer::DisableTimer()+0x38>)
   13d34:	681b      	ldr	r3, [r3, #0]
   13d36:	2200      	movs	r2, #0
   13d38:	605a      	str	r2, [r3, #4]
    sys_tick->VAL  = 0;
   13d3a:	4b08      	ldr	r3, [pc, #32]	; (13d5c <SystemTimer::DisableTimer()+0x38>)
   13d3c:	681b      	ldr	r3, [r3, #0]
   13d3e:	2200      	movs	r2, #0
   13d40:	609a      	str	r2, [r3, #8]
    sys_tick->CTRL = 0;
   13d42:	4b06      	ldr	r3, [pc, #24]	; (13d5c <SystemTimer::DisableTimer()+0x38>)
   13d44:	681b      	ldr	r3, [r3, #0]
   13d46:	2200      	movs	r2, #0
   13d48:	601a      	str	r2, [r3, #0]
   13d4a:	4623      	mov	r3, r4
   13d4c:	4619      	mov	r1, r3
   13d4e:	4802      	ldr	r0, [pc, #8]	; (13d58 <SystemTimer::DisableTimer()+0x34>)
   13d50:	f001 fbd2 	bl	154f8 <__cyg_profile_func_exit>
  }
   13d54:	bf00      	nop
   13d56:	bd10      	pop	{r4, pc}
   13d58:	00013d25 	.word	0x00013d25
   13d5c:	10000380 	.word	0x10000380

00013d60 <SystemTimer::SystemTimerHandler()>:
  static void SystemTimerHandler()
   13d60:	b510      	push	{r4, lr}
   13d62:	4674      	mov	r4, lr
   13d64:	4623      	mov	r3, r4
   13d66:	4619      	mov	r1, r3
   13d68:	4808      	ldr	r0, [pc, #32]	; (13d8c <SystemTimer::SystemTimerHandler()+0x2c>)
   13d6a:	f001 fbb1 	bl	154d0 <__cyg_profile_func_enter>
  {
    // This assumes that SysTickHandler is called every millisecond.
    // Changing that frequency will distort the milliseconds time.
    if (system_timer_isr != nullptr)
   13d6e:	4b08      	ldr	r3, [pc, #32]	; (13d90 <SystemTimer::SystemTimerHandler()+0x30>)
   13d70:	681b      	ldr	r3, [r3, #0]
   13d72:	2b00      	cmp	r3, #0
   13d74:	d002      	beq.n	13d7c <SystemTimer::SystemTimerHandler()+0x1c>
    {
      system_timer_isr();
   13d76:	4b06      	ldr	r3, [pc, #24]	; (13d90 <SystemTimer::SystemTimerHandler()+0x30>)
   13d78:	681b      	ldr	r3, [r3, #0]
   13d7a:	4798      	blx	r3
   13d7c:	4623      	mov	r3, r4
   13d7e:	4619      	mov	r1, r3
   13d80:	4802      	ldr	r0, [pc, #8]	; (13d8c <SystemTimer::SystemTimerHandler()+0x2c>)
   13d82:	f001 fbb9 	bl	154f8 <__cyg_profile_func_exit>
    }
  }
   13d86:	bf00      	nop
   13d88:	bd10      	pop	{r4, pc}
   13d8a:	bf00      	nop
   13d8c:	00013d61 	.word	0x00013d61
   13d90:	10000e70 	.word	0x10000e70

00013d94 <SystemTimer::SetIsrFunction(void (*)())>:
  constexpr SystemTimer() {}
  void SetIsrFunction(IsrPointer isr) override
   13d94:	b510      	push	{r4, lr}
   13d96:	b082      	sub	sp, #8
   13d98:	4674      	mov	r4, lr
   13d9a:	9001      	str	r0, [sp, #4]
   13d9c:	9100      	str	r1, [sp, #0]
   13d9e:	4623      	mov	r3, r4
   13da0:	4619      	mov	r1, r3
   13da2:	4807      	ldr	r0, [pc, #28]	; (13dc0 <SystemTimer::SetIsrFunction(void (*)())+0x2c>)
   13da4:	f001 fb94 	bl	154d0 <__cyg_profile_func_enter>
  {
    system_timer_isr = isr;
   13da8:	4a06      	ldr	r2, [pc, #24]	; (13dc4 <SystemTimer::SetIsrFunction(void (*)())+0x30>)
   13daa:	9b00      	ldr	r3, [sp, #0]
   13dac:	6013      	str	r3, [r2, #0]
   13dae:	4623      	mov	r3, r4
   13db0:	4619      	mov	r1, r3
   13db2:	4803      	ldr	r0, [pc, #12]	; (13dc0 <SystemTimer::SetIsrFunction(void (*)())+0x2c>)
   13db4:	f001 fba0 	bl	154f8 <__cyg_profile_func_exit>
  }
   13db8:	bf00      	nop
   13dba:	b002      	add	sp, #8
   13dbc:	bd10      	pop	{r4, pc}
   13dbe:	bf00      	nop
   13dc0:	00013d95 	.word	0x00013d95
   13dc4:	10000e70 	.word	0x10000e70

00013dc8 <SystemTimer::StartTimer()>:
  bool StartTimer() override
   13dc8:	b530      	push	{r4, r5, lr}
   13dca:	b085      	sub	sp, #20
   13dcc:	4675      	mov	r5, lr
   13dce:	9001      	str	r0, [sp, #4]
   13dd0:	462b      	mov	r3, r5
   13dd2:	4619      	mov	r1, r3
   13dd4:	4820      	ldr	r0, [pc, #128]	; (13e58 <SystemTimer::StartTimer()+0x90>)
   13dd6:	f001 fb7b 	bl	154d0 <__cyg_profile_func_enter>
  {
    bool successful = false;
   13dda:	2300      	movs	r3, #0
   13ddc:	f88d 300f 	strb.w	r3, [sp, #15]
    if (sys_tick->LOAD != 0)
   13de0:	4b1e      	ldr	r3, [pc, #120]	; (13e5c <SystemTimer::StartTimer()+0x94>)
   13de2:	681b      	ldr	r3, [r3, #0]
   13de4:	685b      	ldr	r3, [r3, #4]
   13de6:	2b00      	cmp	r3, #0
   13de8:	bf14      	ite	ne
   13dea:	2301      	movne	r3, #1
   13dec:	2300      	moveq	r3, #0
   13dee:	b2db      	uxtb	r3, r3
   13df0:	2b00      	cmp	r3, #0
   13df2:	d01e      	beq.n	13e32 <SystemTimer::StartTimer()+0x6a>
    {
      sys_tick->VAL = 0;
   13df4:	4b19      	ldr	r3, [pc, #100]	; (13e5c <SystemTimer::StartTimer()+0x94>)
   13df6:	681b      	ldr	r3, [r3, #0]
   13df8:	2200      	movs	r2, #0
   13dfa:	609a      	str	r2, [r3, #8]
      sys_tick->CTRL |= (1 << ControlBitMap::kTickInterupt);
   13dfc:	4b17      	ldr	r3, [pc, #92]	; (13e5c <SystemTimer::StartTimer()+0x94>)
   13dfe:	681b      	ldr	r3, [r3, #0]
   13e00:	681a      	ldr	r2, [r3, #0]
   13e02:	4b16      	ldr	r3, [pc, #88]	; (13e5c <SystemTimer::StartTimer()+0x94>)
   13e04:	681b      	ldr	r3, [r3, #0]
   13e06:	f042 0202 	orr.w	r2, r2, #2
   13e0a:	601a      	str	r2, [r3, #0]
      sys_tick->CTRL |= (1 << ControlBitMap::kEnableCounter);
   13e0c:	4b13      	ldr	r3, [pc, #76]	; (13e5c <SystemTimer::StartTimer()+0x94>)
   13e0e:	681b      	ldr	r3, [r3, #0]
   13e10:	681a      	ldr	r2, [r3, #0]
   13e12:	4b12      	ldr	r3, [pc, #72]	; (13e5c <SystemTimer::StartTimer()+0x94>)
   13e14:	681b      	ldr	r3, [r3, #0]
   13e16:	f042 0201 	orr.w	r2, r2, #1
   13e1a:	601a      	str	r2, [r3, #0]
      sys_tick->CTRL |= (1 << ControlBitMap::kClkSource);
   13e1c:	4b0f      	ldr	r3, [pc, #60]	; (13e5c <SystemTimer::StartTimer()+0x94>)
   13e1e:	681b      	ldr	r3, [r3, #0]
   13e20:	681a      	ldr	r2, [r3, #0]
   13e22:	4b0e      	ldr	r3, [pc, #56]	; (13e5c <SystemTimer::StartTimer()+0x94>)
   13e24:	681b      	ldr	r3, [r3, #0]
   13e26:	f042 0204 	orr.w	r2, r2, #4
   13e2a:	601a      	str	r2, [r3, #0]
      successful = true;
   13e2c:	2301      	movs	r3, #1
   13e2e:	f88d 300f 	strb.w	r3, [sp, #15]
    }
    RegisterIsr(SysTick_IRQn, SystemTimerHandler);
   13e32:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   13e36:	2201      	movs	r2, #1
   13e38:	4909      	ldr	r1, [pc, #36]	; (13e60 <SystemTimer::StartTimer()+0x98>)
   13e3a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   13e3e:	f001 fa1f 	bl	15280 <RegisterIsr(IRQn, void (*)(), bool, long)>
    return successful;
   13e42:	f89d 400f 	ldrb.w	r4, [sp, #15]
   13e46:	462b      	mov	r3, r5
   13e48:	4619      	mov	r1, r3
   13e4a:	4803      	ldr	r0, [pc, #12]	; (13e58 <SystemTimer::StartTimer()+0x90>)
   13e4c:	f001 fb54 	bl	154f8 <__cyg_profile_func_exit>
   13e50:	4623      	mov	r3, r4
  }
   13e52:	4618      	mov	r0, r3
   13e54:	b005      	add	sp, #20
   13e56:	bd30      	pop	{r4, r5, pc}
   13e58:	00013dc9 	.word	0x00013dc9
   13e5c:	10000380 	.word	0x10000380
   13e60:	00013d61 	.word	0x00013d61

00013e64 <SystemTimer::SetTickFrequency(unsigned long)>:
  ///          remainder will be returned.
  ///          If the freqency supplied is less then 2Hz, the function will
  ///          return without changing any hardware.
  ///          If the reload value exceeds the SysTick_LOAD_RELOAD_Msk, the
  ///          returned value is the SysTick_LOAD_RELOAD_Msk.
  uint32_t SetTickFrequency(uint32_t frequency) override
   13e64:	b530      	push	{r4, r5, lr}
   13e66:	b085      	sub	sp, #20
   13e68:	4675      	mov	r5, lr
   13e6a:	9001      	str	r0, [sp, #4]
   13e6c:	9100      	str	r1, [sp, #0]
   13e6e:	462b      	mov	r3, r5
   13e70:	4619      	mov	r1, r3
   13e72:	481f      	ldr	r0, [pc, #124]	; (13ef0 <SystemTimer::SetTickFrequency(unsigned long)+0x8c>)
   13e74:	f001 fb2c 	bl	154d0 <__cyg_profile_func_enter>
  {
    if (frequency <= 1)
   13e78:	9b00      	ldr	r3, [sp, #0]
   13e7a:	2b01      	cmp	r3, #1
   13e7c:	d801      	bhi.n	13e82 <SystemTimer::SetTickFrequency(unsigned long)+0x1e>
    {
      return 0;
   13e7e:	2400      	movs	r4, #0
   13e80:	e02d      	b.n	13ede <SystemTimer::SetTickFrequency(unsigned long)+0x7a>
    }
    uint32_t reload_value = (GetSystemFrequency() / frequency) - 1;
   13e82:	9b01      	ldr	r3, [sp, #4]
   13e84:	1d1a      	adds	r2, r3, #4
   13e86:	9b01      	ldr	r3, [sp, #4]
   13e88:	685b      	ldr	r3, [r3, #4]
   13e8a:	330c      	adds	r3, #12
   13e8c:	681b      	ldr	r3, [r3, #0]
   13e8e:	4610      	mov	r0, r2
   13e90:	4798      	blx	r3
   13e92:	4602      	mov	r2, r0
   13e94:	9b00      	ldr	r3, [sp, #0]
   13e96:	fbb2 f3f3 	udiv	r3, r2, r3
   13e9a:	3b01      	subs	r3, #1
   13e9c:	9303      	str	r3, [sp, #12]
    int remainder         = (GetSystemFrequency() % frequency);
   13e9e:	9b01      	ldr	r3, [sp, #4]
   13ea0:	1d1a      	adds	r2, r3, #4
   13ea2:	9b01      	ldr	r3, [sp, #4]
   13ea4:	685b      	ldr	r3, [r3, #4]
   13ea6:	330c      	adds	r3, #12
   13ea8:	681b      	ldr	r3, [r3, #0]
   13eaa:	4610      	mov	r0, r2
   13eac:	4798      	blx	r3
   13eae:	4603      	mov	r3, r0
   13eb0:	9a00      	ldr	r2, [sp, #0]
   13eb2:	fbb3 f2f2 	udiv	r2, r3, r2
   13eb6:	9900      	ldr	r1, [sp, #0]
   13eb8:	fb01 f202 	mul.w	r2, r1, r2
   13ebc:	1a9b      	subs	r3, r3, r2
   13ebe:	9302      	str	r3, [sp, #8]
    if (reload_value > SysTick_LOAD_RELOAD_Msk)
   13ec0:	9b03      	ldr	r3, [sp, #12]
   13ec2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
   13ec6:	d305      	bcc.n	13ed4 <SystemTimer::SetTickFrequency(unsigned long)+0x70>
    {
      reload_value = SysTick_LOAD_RELOAD_Msk;
   13ec8:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
   13ecc:	9303      	str	r3, [sp, #12]
      remainder    = SysTick_LOAD_RELOAD_Msk;
   13ece:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
   13ed2:	9302      	str	r3, [sp, #8]
    }
    sys_tick->LOAD = reload_value;
   13ed4:	4b07      	ldr	r3, [pc, #28]	; (13ef4 <SystemTimer::SetTickFrequency(unsigned long)+0x90>)
   13ed6:	681b      	ldr	r3, [r3, #0]
   13ed8:	9a03      	ldr	r2, [sp, #12]
   13eda:	605a      	str	r2, [r3, #4]
    return remainder;
   13edc:	9c02      	ldr	r4, [sp, #8]
   13ede:	462b      	mov	r3, r5
   13ee0:	4619      	mov	r1, r3
   13ee2:	4803      	ldr	r0, [pc, #12]	; (13ef0 <SystemTimer::SetTickFrequency(unsigned long)+0x8c>)
   13ee4:	f001 fb08 	bl	154f8 <__cyg_profile_func_exit>
   13ee8:	4623      	mov	r3, r4
  }
   13eea:	4618      	mov	r0, r3
   13eec:	b005      	add	sp, #20
   13eee:	bd30      	pop	{r4, r5, pc}
   13ef0:	00013e65 	.word	0x00013e65
   13ef4:	10000380 	.word	0x10000380

00013ef8 <unsigned char util::Value<TimerInterface::TimerPort, unsigned char>(TimerInterface::TimerPort)>:
constexpr Type Value(Enum enum_type_value)
   13ef8:	b530      	push	{r4, r5, lr}
   13efa:	b083      	sub	sp, #12
   13efc:	4675      	mov	r5, lr
   13efe:	4603      	mov	r3, r0
   13f00:	f88d 3007 	strb.w	r3, [sp, #7]
   13f04:	462b      	mov	r3, r5
   13f06:	4619      	mov	r1, r3
   13f08:	4806      	ldr	r0, [pc, #24]	; (13f24 <unsigned char util::Value<TimerInterface::TimerPort, unsigned char>(TimerInterface::TimerPort)+0x2c>)
   13f0a:	f001 fae1 	bl	154d0 <__cyg_profile_func_enter>
  return static_cast<Type>(enum_type_value);
   13f0e:	f89d 4007 	ldrb.w	r4, [sp, #7]
   13f12:	462b      	mov	r3, r5
   13f14:	4619      	mov	r1, r3
   13f16:	4803      	ldr	r0, [pc, #12]	; (13f24 <unsigned char util::Value<TimerInterface::TimerPort, unsigned char>(TimerInterface::TimerPort)+0x2c>)
   13f18:	f001 faee 	bl	154f8 <__cyg_profile_func_exit>
   13f1c:	4623      	mov	r3, r4
}
   13f1e:	4618      	mov	r0, r3
   13f20:	b003      	add	sp, #12
   13f22:	bd30      	pop	{r4, r5, pc}
   13f24:	00013ef9 	.word	0x00013ef9

00013f28 <Timer::DoNothingIsr()>:
    Lpc40xxSystemController::Peripherals::kTimer3
  };

  static constexpr IRQn kTimerIrq[] = { IRQn::TIMER0_IRQn, IRQn::TIMER1_IRQn,
                                        IRQn::TIMER2_IRQn, IRQn::TIMER3_IRQn };
  static void DoNothingIsr() {}
   13f28:	b510      	push	{r4, lr}
   13f2a:	4674      	mov	r4, lr
   13f2c:	4623      	mov	r3, r4
   13f2e:	4619      	mov	r1, r3
   13f30:	4804      	ldr	r0, [pc, #16]	; (13f44 <Timer::DoNothingIsr()+0x1c>)
   13f32:	f001 facd 	bl	154d0 <__cyg_profile_func_enter>
   13f36:	4623      	mov	r3, r4
   13f38:	4619      	mov	r1, r3
   13f3a:	4802      	ldr	r0, [pc, #8]	; (13f44 <Timer::DoNothingIsr()+0x1c>)
   13f3c:	f001 fadc 	bl	154f8 <__cyg_profile_func_exit>
   13f40:	bf00      	nop
   13f42:	bd10      	pop	{r4, pc}
   13f44:	00013f29 	.word	0x00013f29

00013f48 <Timer::Initialize(unsigned long, void (*)(), long)>:
  ///                  register will be 10 ms.
  /// @param isr an ISR that will fire when the condition set by SetTimer
  ///            method is achieved.
  /// @param priority sets the Timer interrupt's priority level, defaults to -1
  ///                 which uses the platforms default priority.
  void Initialize(uint32_t frequency, IsrPointer isr = DoNothingIsr,
   13f48:	b510      	push	{r4, lr}
   13f4a:	b086      	sub	sp, #24
   13f4c:	4674      	mov	r4, lr
   13f4e:	9003      	str	r0, [sp, #12]
   13f50:	9102      	str	r1, [sp, #8]
   13f52:	9201      	str	r2, [sp, #4]
   13f54:	9300      	str	r3, [sp, #0]
   13f56:	4623      	mov	r3, r4
   13f58:	4619      	mov	r1, r3
   13f5a:	483e      	ldr	r0, [pc, #248]	; (14054 <Timer::Initialize(unsigned long, void (*)(), long)+0x10c>)
   13f5c:	f001 fab8 	bl	154d0 <__cyg_profile_func_enter>
                  int32_t priority = -1) override final
  {
    PowerUpPeripheral(kPowerbit[channel_]);
   13f60:	9b03      	ldr	r3, [sp, #12]
   13f62:	1d18      	adds	r0, r3, #4
   13f64:	9b03      	ldr	r3, [sp, #12]
   13f66:	685b      	ldr	r3, [r3, #4]
   13f68:	3314      	adds	r3, #20
   13f6a:	681b      	ldr	r3, [r3, #0]
   13f6c:	9a03      	ldr	r2, [sp, #12]
   13f6e:	7a12      	ldrb	r2, [r2, #8]
   13f70:	0092      	lsls	r2, r2, #2
   13f72:	4939      	ldr	r1, [pc, #228]	; (14058 <Timer::Initialize(unsigned long, void (*)(), long)+0x110>)
   13f74:	440a      	add	r2, r1
   13f76:	4611      	mov	r1, r2
   13f78:	4798      	blx	r3
    SJ2_ASSERT_FATAL(
   13f7a:	9b02      	ldr	r3, [sp, #8]
   13f7c:	2b00      	cmp	r3, #0
   13f7e:	d10d      	bne.n	13f9c <Timer::Initialize(unsigned long, void (*)(), long)+0x54>
   13f80:	2384      	movs	r3, #132	; 0x84
   13f82:	4a36      	ldr	r2, [pc, #216]	; (1405c <Timer::Initialize(unsigned long, void (*)(), long)+0x114>)
   13f84:	4936      	ldr	r1, [pc, #216]	; (14060 <Timer::Initialize(unsigned long, void (*)(), long)+0x118>)
   13f86:	4837      	ldr	r0, [pc, #220]	; (14064 <Timer::Initialize(unsigned long, void (*)(), long)+0x11c>)
   13f88:	f002 fcfc 	bl	16984 <printf>
   13f8c:	4836      	ldr	r0, [pc, #216]	; (14068 <Timer::Initialize(unsigned long, void (*)(), long)+0x120>)
   13f8e:	f001 fa6f 	bl	15470 <puts>
   13f92:	2100      	movs	r1, #0
   13f94:	2001      	movs	r0, #1
   13f96:	f7fc ff27 	bl	10de8 <debug::PrintBacktrace(bool, void*)>
   13f9a:	e7fe      	b.n	13f9a <Timer::Initialize(unsigned long, void (*)(), long)+0x52>
        frequency != 0,
        "Cannot have zero ticks per microsecond, please choose 1 or more.");
    // Set Prescale register for Prescale Counter to milliseconds
    uint32_t prescaler = GetPeripheralFrequency() / frequency;
   13f9c:	9b03      	ldr	r3, [sp, #12]
   13f9e:	1d1a      	adds	r2, r3, #4
   13fa0:	9b03      	ldr	r3, [sp, #12]
   13fa2:	685b      	ldr	r3, [r3, #4]
   13fa4:	3310      	adds	r3, #16
   13fa6:	681b      	ldr	r3, [r3, #0]
   13fa8:	4610      	mov	r0, r2
   13faa:	4798      	blx	r3
   13fac:	4602      	mov	r2, r0
   13fae:	9b02      	ldr	r3, [sp, #8]
   13fb0:	fbb2 f3f3 	udiv	r3, r2, r3
   13fb4:	9305      	str	r3, [sp, #20]
    tim_register[channel_]->PR &= ~(kClear << 1);
   13fb6:	9b03      	ldr	r3, [sp, #12]
   13fb8:	7a1b      	ldrb	r3, [r3, #8]
   13fba:	461a      	mov	r2, r3
   13fbc:	4b2b      	ldr	r3, [pc, #172]	; (1406c <Timer::Initialize(unsigned long, void (*)(), long)+0x124>)
   13fbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   13fc2:	68da      	ldr	r2, [r3, #12]
   13fc4:	9b03      	ldr	r3, [sp, #12]
   13fc6:	7a1b      	ldrb	r3, [r3, #8]
   13fc8:	4619      	mov	r1, r3
   13fca:	4b28      	ldr	r3, [pc, #160]	; (1406c <Timer::Initialize(unsigned long, void (*)(), long)+0x124>)
   13fcc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   13fd0:	f002 0201 	and.w	r2, r2, #1
   13fd4:	60da      	str	r2, [r3, #12]
    tim_register[channel_]->PR |= (prescaler << 1);
   13fd6:	9b03      	ldr	r3, [sp, #12]
   13fd8:	7a1b      	ldrb	r3, [r3, #8]
   13fda:	461a      	mov	r2, r3
   13fdc:	4b23      	ldr	r3, [pc, #140]	; (1406c <Timer::Initialize(unsigned long, void (*)(), long)+0x124>)
   13fde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   13fe2:	68d9      	ldr	r1, [r3, #12]
   13fe4:	9b05      	ldr	r3, [sp, #20]
   13fe6:	005a      	lsls	r2, r3, #1
   13fe8:	9b03      	ldr	r3, [sp, #12]
   13fea:	7a1b      	ldrb	r3, [r3, #8]
   13fec:	4618      	mov	r0, r3
   13fee:	4b1f      	ldr	r3, [pc, #124]	; (1406c <Timer::Initialize(unsigned long, void (*)(), long)+0x124>)
   13ff0:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   13ff4:	430a      	orrs	r2, r1
   13ff6:	60da      	str	r2, [r3, #12]
    tim_register[channel_]->TCR |= (1 << 0);
   13ff8:	9b03      	ldr	r3, [sp, #12]
   13ffa:	7a1b      	ldrb	r3, [r3, #8]
   13ffc:	461a      	mov	r2, r3
   13ffe:	4b1b      	ldr	r3, [pc, #108]	; (1406c <Timer::Initialize(unsigned long, void (*)(), long)+0x124>)
   14000:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   14004:	685a      	ldr	r2, [r3, #4]
   14006:	9b03      	ldr	r3, [sp, #12]
   14008:	7a1b      	ldrb	r3, [r3, #8]
   1400a:	4619      	mov	r1, r3
   1400c:	4b17      	ldr	r3, [pc, #92]	; (1406c <Timer::Initialize(unsigned long, void (*)(), long)+0x124>)
   1400e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   14012:	f042 0201 	orr.w	r2, r2, #1
   14016:	605a      	str	r2, [r3, #4]
    user_timer_isr[channel_] = isr;
   14018:	9b03      	ldr	r3, [sp, #12]
   1401a:	7a1b      	ldrb	r3, [r3, #8]
   1401c:	4619      	mov	r1, r3
   1401e:	4a14      	ldr	r2, [pc, #80]	; (14070 <Timer::Initialize(unsigned long, void (*)(), long)+0x128>)
   14020:	9b01      	ldr	r3, [sp, #4]
   14022:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
    RegisterIsr(kTimerIrq[channel_], kTimerIsr[channel_], true, priority);
   14026:	9b03      	ldr	r3, [sp, #12]
   14028:	7a1b      	ldrb	r3, [r3, #8]
   1402a:	461a      	mov	r2, r3
   1402c:	4b11      	ldr	r3, [pc, #68]	; (14074 <Timer::Initialize(unsigned long, void (*)(), long)+0x12c>)
   1402e:	5698      	ldrsb	r0, [r3, r2]
   14030:	9b03      	ldr	r3, [sp, #12]
   14032:	7a1b      	ldrb	r3, [r3, #8]
   14034:	461a      	mov	r2, r3
   14036:	4b10      	ldr	r3, [pc, #64]	; (14078 <Timer::Initialize(unsigned long, void (*)(), long)+0x130>)
   14038:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   1403c:	9b00      	ldr	r3, [sp, #0]
   1403e:	2201      	movs	r2, #1
   14040:	f001 f91e 	bl	15280 <RegisterIsr(IRQn, void (*)(), bool, long)>
   14044:	4623      	mov	r3, r4
   14046:	4619      	mov	r1, r3
   14048:	4802      	ldr	r0, [pc, #8]	; (14054 <Timer::Initialize(unsigned long, void (*)(), long)+0x10c>)
   1404a:	f001 fa55 	bl	154f8 <__cyg_profile_func_exit>
  }
   1404e:	bf00      	nop
   14050:	b006      	add	sp, #24
   14052:	bd10      	pop	{r4, pc}
   14054:	00013f49 	.word	0x00013f49
   14058:	000193d4 	.word	0x000193d4
   1405c:	000194d4 	.word	0x000194d4
   14060:	000193f8 	.word	0x000193f8
   14064:	000192b4 	.word	0x000192b4
   14068:	00018fc0 	.word	0x00018fc0
   1406c:	10000384 	.word	0x10000384
   14070:	10000eb4 	.word	0x10000eb4
   14074:	000193e4 	.word	0x000193e4
   14078:	000193e8 	.word	0x000193e8

0001407c <unsigned char util::Value<TimerInterface::MatchControlRegister, unsigned char>(TimerInterface::MatchControlRegister)>:
constexpr Type Value(Enum enum_type_value)
   1407c:	b530      	push	{r4, r5, lr}
   1407e:	b083      	sub	sp, #12
   14080:	4675      	mov	r5, lr
   14082:	4603      	mov	r3, r0
   14084:	f88d 3007 	strb.w	r3, [sp, #7]
   14088:	462b      	mov	r3, r5
   1408a:	4619      	mov	r1, r3
   1408c:	4806      	ldr	r0, [pc, #24]	; (140a8 <unsigned char util::Value<TimerInterface::MatchControlRegister, unsigned char>(TimerInterface::MatchControlRegister)+0x2c>)
   1408e:	f001 fa1f 	bl	154d0 <__cyg_profile_func_enter>
  return static_cast<Type>(enum_type_value);
   14092:	f89d 4007 	ldrb.w	r4, [sp, #7]
   14096:	462b      	mov	r3, r5
   14098:	4619      	mov	r1, r3
   1409a:	4803      	ldr	r0, [pc, #12]	; (140a8 <unsigned char util::Value<TimerInterface::MatchControlRegister, unsigned char>(TimerInterface::MatchControlRegister)+0x2c>)
   1409c:	f001 fa2c 	bl	154f8 <__cyg_profile_func_exit>
   140a0:	4623      	mov	r3, r4
}
   140a2:	4618      	mov	r0, r3
   140a4:	b003      	add	sp, #12
   140a6:	bd30      	pop	{r4, r5, pc}
   140a8:	0001407d 	.word	0x0001407d

000140ac <Timer::SetTimer(unsigned long, TimerInterface::TimerIsrCondition, TimerInterface::MatchControlRegister)>:
  ///
  /// @param ticks the count of the timer register (TC) to have an ISR fire
  /// @param condition the condition for which a timer interrupt will occur
  /// @param match_register which match register (from 0 to 3) should be used
  ///                       for holding the ticks for the condition.
  void SetTimer(uint32_t ticks, TimerIsrCondition condition,
   140ac:	b570      	push	{r4, r5, r6, lr}
   140ae:	b086      	sub	sp, #24
   140b0:	4676      	mov	r6, lr
   140b2:	9003      	str	r0, [sp, #12]
   140b4:	9102      	str	r1, [sp, #8]
   140b6:	4611      	mov	r1, r2
   140b8:	461a      	mov	r2, r3
   140ba:	460b      	mov	r3, r1
   140bc:	f88d 3007 	strb.w	r3, [sp, #7]
   140c0:	4613      	mov	r3, r2
   140c2:	f88d 3006 	strb.w	r3, [sp, #6]
   140c6:	4633      	mov	r3, r6
   140c8:	4619      	mov	r1, r3
   140ca:	4832      	ldr	r0, [pc, #200]	; (14194 <Timer::SetTimer(unsigned long, TimerInterface::TimerIsrCondition, TimerInterface::MatchControlRegister)+0xe8>)
   140cc:	f001 fa00 	bl	154d0 <__cyg_profile_func_enter>
                MatchControlRegister match_register = kMat0) override final
  {
    static constexpr uint8_t kClearMode = 0b0111;

    uint8_t match_value = util::Value(match_register);
   140d0:	f89d 3006 	ldrb.w	r3, [sp, #6]
   140d4:	4618      	mov	r0, r3
   140d6:	f7ff ffd1 	bl	1407c <unsigned char util::Value<TimerInterface::MatchControlRegister, unsigned char>(TimerInterface::MatchControlRegister)>
   140da:	4603      	mov	r3, r0
   140dc:	f88d 3017 	strb.w	r3, [sp, #23]
    tim_register[channel_]->MCR &= ~(kClearMode << match_value);
   140e0:	9b03      	ldr	r3, [sp, #12]
   140e2:	7a1b      	ldrb	r3, [r3, #8]
   140e4:	461a      	mov	r2, r3
   140e6:	4b2c      	ldr	r3, [pc, #176]	; (14198 <Timer::SetTimer(unsigned long, TimerInterface::TimerIsrCondition, TimerInterface::MatchControlRegister)+0xec>)
   140e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   140ec:	695a      	ldr	r2, [r3, #20]
   140ee:	f89d 3017 	ldrb.w	r3, [sp, #23]
   140f2:	2107      	movs	r1, #7
   140f4:	fa01 f303 	lsl.w	r3, r1, r3
   140f8:	43db      	mvns	r3, r3
   140fa:	4619      	mov	r1, r3
   140fc:	9b03      	ldr	r3, [sp, #12]
   140fe:	7a1b      	ldrb	r3, [r3, #8]
   14100:	4618      	mov	r0, r3
   14102:	4b25      	ldr	r3, [pc, #148]	; (14198 <Timer::SetTimer(unsigned long, TimerInterface::TimerIsrCondition, TimerInterface::MatchControlRegister)+0xec>)
   14104:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   14108:	400a      	ands	r2, r1
   1410a:	615a      	str	r2, [r3, #20]
    tim_register[channel_]->MCR |= condition << match_value;
   1410c:	9b03      	ldr	r3, [sp, #12]
   1410e:	7a1b      	ldrb	r3, [r3, #8]
   14110:	461a      	mov	r2, r3
   14112:	4b21      	ldr	r3, [pc, #132]	; (14198 <Timer::SetTimer(unsigned long, TimerInterface::TimerIsrCondition, TimerInterface::MatchControlRegister)+0xec>)
   14114:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   14118:	695a      	ldr	r2, [r3, #20]
   1411a:	f89d 1007 	ldrb.w	r1, [sp, #7]
   1411e:	f89d 3017 	ldrb.w	r3, [sp, #23]
   14122:	fa01 f303 	lsl.w	r3, r1, r3
   14126:	4619      	mov	r1, r3
   14128:	9b03      	ldr	r3, [sp, #12]
   1412a:	7a1b      	ldrb	r3, [r3, #8]
   1412c:	4618      	mov	r0, r3
   1412e:	4b1a      	ldr	r3, [pc, #104]	; (14198 <Timer::SetTimer(unsigned long, TimerInterface::TimerIsrCondition, TimerInterface::MatchControlRegister)+0xec>)
   14130:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   14134:	430a      	orrs	r2, r1
   14136:	615a      	str	r2, [r3, #20]
    *match[channel_][match_value / 3] |= (((ticks / 2)) << 0);
   14138:	9b03      	ldr	r3, [sp, #12]
   1413a:	7a1b      	ldrb	r3, [r3, #8]
   1413c:	4618      	mov	r0, r3
   1413e:	f89d 3017 	ldrb.w	r3, [sp, #23]
   14142:	4a16      	ldr	r2, [pc, #88]	; (1419c <Timer::SetTimer(unsigned long, TimerInterface::TimerIsrCondition, TimerInterface::MatchControlRegister)+0xf0>)
   14144:	fba2 2303 	umull	r2, r3, r2, r3
   14148:	085b      	lsrs	r3, r3, #1
   1414a:	b2db      	uxtb	r3, r3
   1414c:	4619      	mov	r1, r3
   1414e:	4a14      	ldr	r2, [pc, #80]	; (141a0 <Timer::SetTimer(unsigned long, TimerInterface::TimerIsrCondition, TimerInterface::MatchControlRegister)+0xf4>)
   14150:	0083      	lsls	r3, r0, #2
   14152:	440b      	add	r3, r1
   14154:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14158:	6819      	ldr	r1, [r3, #0]
   1415a:	9b02      	ldr	r3, [sp, #8]
   1415c:	085a      	lsrs	r2, r3, #1
   1415e:	9b03      	ldr	r3, [sp, #12]
   14160:	7a1b      	ldrb	r3, [r3, #8]
   14162:	461d      	mov	r5, r3
   14164:	f89d 3017 	ldrb.w	r3, [sp, #23]
   14168:	480c      	ldr	r0, [pc, #48]	; (1419c <Timer::SetTimer(unsigned long, TimerInterface::TimerIsrCondition, TimerInterface::MatchControlRegister)+0xf0>)
   1416a:	fba0 0303 	umull	r0, r3, r0, r3
   1416e:	085b      	lsrs	r3, r3, #1
   14170:	b2db      	uxtb	r3, r3
   14172:	461c      	mov	r4, r3
   14174:	480a      	ldr	r0, [pc, #40]	; (141a0 <Timer::SetTimer(unsigned long, TimerInterface::TimerIsrCondition, TimerInterface::MatchControlRegister)+0xf4>)
   14176:	00ab      	lsls	r3, r5, #2
   14178:	4423      	add	r3, r4
   1417a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
   1417e:	430a      	orrs	r2, r1
   14180:	601a      	str	r2, [r3, #0]
   14182:	4633      	mov	r3, r6
   14184:	4619      	mov	r1, r3
   14186:	4803      	ldr	r0, [pc, #12]	; (14194 <Timer::SetTimer(unsigned long, TimerInterface::TimerIsrCondition, TimerInterface::MatchControlRegister)+0xe8>)
   14188:	f001 f9b6 	bl	154f8 <__cyg_profile_func_exit>
  }
   1418c:	bf00      	nop
   1418e:	b006      	add	sp, #24
   14190:	bd70      	pop	{r4, r5, r6, pc}
   14192:	bf00      	nop
   14194:	000140ad 	.word	0x000140ad
   14198:	10000384 	.word	0x10000384
   1419c:	aaaaaaab 	.word	0xaaaaaaab
   141a0:	10000e74 	.word	0x10000e74

000141a4 <Timer::GetTimer()>:

  [[gnu::always_inline]] uint32_t GetTimer() override final {
   141a4:	b530      	push	{r4, r5, lr}
   141a6:	b083      	sub	sp, #12
   141a8:	4675      	mov	r5, lr
   141aa:	9001      	str	r0, [sp, #4]
   141ac:	462b      	mov	r3, r5
   141ae:	4619      	mov	r1, r3
   141b0:	4809      	ldr	r0, [pc, #36]	; (141d8 <Timer::GetTimer()+0x34>)
   141b2:	f001 f98d 	bl	154d0 <__cyg_profile_func_enter>
    return tim_register[channel_]->TC;
   141b6:	9b01      	ldr	r3, [sp, #4]
   141b8:	7a1b      	ldrb	r3, [r3, #8]
   141ba:	461a      	mov	r2, r3
   141bc:	4b07      	ldr	r3, [pc, #28]	; (141dc <Timer::GetTimer()+0x38>)
   141be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   141c2:	689c      	ldr	r4, [r3, #8]
   141c4:	462b      	mov	r3, r5
   141c6:	4619      	mov	r1, r3
   141c8:	4803      	ldr	r0, [pc, #12]	; (141d8 <Timer::GetTimer()+0x34>)
   141ca:	f001 f995 	bl	154f8 <__cyg_profile_func_exit>
   141ce:	4623      	mov	r3, r4
  }
   141d0:	4618      	mov	r0, r3
   141d2:	b003      	add	sp, #12
   141d4:	bd30      	pop	{r4, r5, pc}
   141d6:	bf00      	nop
   141d8:	000141a5 	.word	0x000141a5
   141dc:	10000384 	.word	0x10000384

000141e0 <Uart::SetBaudRate(unsigned long)>:
  constexpr Uart(Channels mode, PinInterface * tx_pin, PinInterface * rx_pin)
      : channel_(static_cast<uint8_t>(mode)), tx_(tx_pin), rx_(rx_pin)
  {
  }

  void SetBaudRate(uint32_t baud_rate) override
   141e0:	b510      	push	{r4, lr}
   141e2:	b088      	sub	sp, #32
   141e4:	4674      	mov	r4, lr
   141e6:	9001      	str	r0, [sp, #4]
   141e8:	9100      	str	r1, [sp, #0]
   141ea:	4623      	mov	r3, r4
   141ec:	4619      	mov	r1, r3
   141ee:	482d      	ldr	r0, [pc, #180]	; (142a4 <Uart::SetBaudRate(unsigned long)+0xc4>)
   141f0:	f001 f96e 	bl	154d0 <__cyg_profile_func_enter>
  {
    constexpr uint8_t kDlabBit = (1 << 7);
   141f4:	2380      	movs	r3, #128	; 0x80
   141f6:	f88d 301f 	strb.w	r3, [sp, #31]
    float baudrate             = static_cast<float>(baud_rate);
   141fa:	9b00      	ldr	r3, [sp, #0]
   141fc:	ee07 3a90 	vmov	s15, r3
   14200:	eef8 7a67 	vcvt.f32.u32	s15, s15
   14204:	edcd 7a06 	vstr	s15, [sp, #24]
    UartCalibration_t dividers = GenerateUartCalibration(baudrate);
   14208:	ab02      	add	r3, sp, #8
   1420a:	ed9d 0a06 	vldr	s0, [sp, #24]
   1420e:	9901      	ldr	r1, [sp, #4]
   14210:	4618      	mov	r0, r3
   14212:	f000 fb2d 	bl	14870 <Uart::GenerateUartCalibration(float)>

    uint8_t dlm = static_cast<uint8_t>((dividers.divide_latch >> 8) & 0xFF);
   14216:	9b02      	ldr	r3, [sp, #8]
   14218:	0a1b      	lsrs	r3, r3, #8
   1421a:	f88d 3017 	strb.w	r3, [sp, #23]
    uint8_t dll = static_cast<uint8_t>(dividers.divide_latch & 0xFF);
   1421e:	9b02      	ldr	r3, [sp, #8]
   14220:	f88d 3016 	strb.w	r3, [sp, #22]
    uint8_t fdr = static_cast<uint8_t>((dividers.multiply & 0xF) << 4 |
   14224:	9b04      	ldr	r3, [sp, #16]
   14226:	b2db      	uxtb	r3, r3
   14228:	011b      	lsls	r3, r3, #4
   1422a:	b2da      	uxtb	r2, r3
                                       (dividers.divide_add & 0xF));
   1422c:	9b03      	ldr	r3, [sp, #12]
   1422e:	b2db      	uxtb	r3, r3
   14230:	f003 030f 	and.w	r3, r3, #15
   14234:	b2db      	uxtb	r3, r3
    uint8_t fdr = static_cast<uint8_t>((dividers.multiply & 0xF) << 4 |
   14236:	4313      	orrs	r3, r2
   14238:	f88d 3015 	strb.w	r3, [sp, #21]

    // Set baud rate
    uart[channel_]->LCR = kDlabBit;
   1423c:	9b01      	ldr	r3, [sp, #4]
   1423e:	7a1b      	ldrb	r3, [r3, #8]
   14240:	461a      	mov	r2, r3
   14242:	4b19      	ldr	r3, [pc, #100]	; (142a8 <Uart::SetBaudRate(unsigned long)+0xc8>)
   14244:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   14248:	2280      	movs	r2, #128	; 0x80
   1424a:	731a      	strb	r2, [r3, #12]
    uart[channel_]->DLM = dlm;
   1424c:	9b01      	ldr	r3, [sp, #4]
   1424e:	7a1b      	ldrb	r3, [r3, #8]
   14250:	461a      	mov	r2, r3
   14252:	4b15      	ldr	r3, [pc, #84]	; (142a8 <Uart::SetBaudRate(unsigned long)+0xc8>)
   14254:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   14258:	f89d 2017 	ldrb.w	r2, [sp, #23]
   1425c:	711a      	strb	r2, [r3, #4]
    uart[channel_]->DLL = dll;
   1425e:	9b01      	ldr	r3, [sp, #4]
   14260:	7a1b      	ldrb	r3, [r3, #8]
   14262:	461a      	mov	r2, r3
   14264:	4b10      	ldr	r3, [pc, #64]	; (142a8 <Uart::SetBaudRate(unsigned long)+0xc8>)
   14266:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   1426a:	f89d 2016 	ldrb.w	r2, [sp, #22]
   1426e:	701a      	strb	r2, [r3, #0]
    uart[channel_]->FDR = fdr;
   14270:	9b01      	ldr	r3, [sp, #4]
   14272:	7a1b      	ldrb	r3, [r3, #8]
   14274:	461a      	mov	r2, r3
   14276:	4b0c      	ldr	r3, [pc, #48]	; (142a8 <Uart::SetBaudRate(unsigned long)+0xc8>)
   14278:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   1427c:	f89d 2015 	ldrb.w	r2, [sp, #21]
   14280:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    uart[channel_]->LCR = kStandardUart;
   14284:	9b01      	ldr	r3, [sp, #4]
   14286:	7a1b      	ldrb	r3, [r3, #8]
   14288:	461a      	mov	r2, r3
   1428a:	4b07      	ldr	r3, [pc, #28]	; (142a8 <Uart::SetBaudRate(unsigned long)+0xc8>)
   1428c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   14290:	2203      	movs	r2, #3
   14292:	731a      	strb	r2, [r3, #12]
   14294:	4623      	mov	r3, r4
   14296:	4619      	mov	r1, r3
   14298:	4802      	ldr	r0, [pc, #8]	; (142a4 <Uart::SetBaudRate(unsigned long)+0xc4>)
   1429a:	f001 f92d 	bl	154f8 <__cyg_profile_func_exit>
  }
   1429e:	bf00      	nop
   142a0:	b008      	add	sp, #32
   142a2:	bd10      	pop	{r4, pc}
   142a4:	000141e1 	.word	0x000141e1
   142a8:	10000394 	.word	0x10000394

000142ac <Uart::Initialize(unsigned long)>:

  bool Initialize(uint32_t baud_rate) override
   142ac:	b530      	push	{r4, r5, lr}
   142ae:	b085      	sub	sp, #20
   142b0:	4675      	mov	r5, lr
   142b2:	9001      	str	r0, [sp, #4]
   142b4:	9100      	str	r1, [sp, #0]
   142b6:	462b      	mov	r3, r5
   142b8:	4619      	mov	r1, r3
   142ba:	4830      	ldr	r0, [pc, #192]	; (1437c <Uart::Initialize(unsigned long)+0xd0>)
   142bc:	f001 f908 	bl	154d0 <__cyg_profile_func_enter>
  {
    constexpr uint8_t kFIFOEnableAndReset = 0b111;
   142c0:	2307      	movs	r3, #7
   142c2:	f88d 300f 	strb.w	r3, [sp, #15]
    // Powering the port
    PowerUpPeripheral(kPowerbit[channel_]);
   142c6:	9b01      	ldr	r3, [sp, #4]
   142c8:	1d18      	adds	r0, r3, #4
   142ca:	9b01      	ldr	r3, [sp, #4]
   142cc:	685b      	ldr	r3, [r3, #4]
   142ce:	3314      	adds	r3, #20
   142d0:	681b      	ldr	r3, [r3, #0]
   142d2:	9a01      	ldr	r2, [sp, #4]
   142d4:	7a12      	ldrb	r2, [r2, #8]
   142d6:	0092      	lsls	r2, r2, #2
   142d8:	4929      	ldr	r1, [pc, #164]	; (14380 <Uart::Initialize(unsigned long)+0xd4>)
   142da:	440a      	add	r2, r1
   142dc:	4611      	mov	r1, r2
   142de:	4798      	blx	r3
    // Setting the pin functions and modes
    rx_->SetPinFunction(kRxUartPortFunction[channel_]);
   142e0:	9b01      	ldr	r3, [sp, #4]
   142e2:	6918      	ldr	r0, [r3, #16]
   142e4:	9b01      	ldr	r3, [sp, #4]
   142e6:	691b      	ldr	r3, [r3, #16]
   142e8:	681b      	ldr	r3, [r3, #0]
   142ea:	681b      	ldr	r3, [r3, #0]
   142ec:	9a01      	ldr	r2, [sp, #4]
   142ee:	7a12      	ldrb	r2, [r2, #8]
   142f0:	4611      	mov	r1, r2
   142f2:	4a24      	ldr	r2, [pc, #144]	; (14384 <Uart::Initialize(unsigned long)+0xd8>)
   142f4:	5c52      	ldrb	r2, [r2, r1]
   142f6:	4611      	mov	r1, r2
   142f8:	4798      	blx	r3
    tx_->SetPinFunction(kTxUartPortFunction[channel_]);
   142fa:	9b01      	ldr	r3, [sp, #4]
   142fc:	68d8      	ldr	r0, [r3, #12]
   142fe:	9b01      	ldr	r3, [sp, #4]
   14300:	68db      	ldr	r3, [r3, #12]
   14302:	681b      	ldr	r3, [r3, #0]
   14304:	681b      	ldr	r3, [r3, #0]
   14306:	9a01      	ldr	r2, [sp, #4]
   14308:	7a12      	ldrb	r2, [r2, #8]
   1430a:	4611      	mov	r1, r2
   1430c:	4a1e      	ldr	r2, [pc, #120]	; (14388 <Uart::Initialize(unsigned long)+0xdc>)
   1430e:	5c52      	ldrb	r2, [r2, r1]
   14310:	4611      	mov	r1, r2
   14312:	4798      	blx	r3
    rx_->SetMode(PinInterface::Mode::kPullUp);
   14314:	9b01      	ldr	r3, [sp, #4]
   14316:	691a      	ldr	r2, [r3, #16]
   14318:	9b01      	ldr	r3, [sp, #4]
   1431a:	691b      	ldr	r3, [r3, #16]
   1431c:	681b      	ldr	r3, [r3, #0]
   1431e:	3304      	adds	r3, #4
   14320:	681b      	ldr	r3, [r3, #0]
   14322:	2102      	movs	r1, #2
   14324:	4610      	mov	r0, r2
   14326:	4798      	blx	r3
    tx_->SetMode(PinInterface::Mode::kPullUp);
   14328:	9b01      	ldr	r3, [sp, #4]
   1432a:	68da      	ldr	r2, [r3, #12]
   1432c:	9b01      	ldr	r3, [sp, #4]
   1432e:	68db      	ldr	r3, [r3, #12]
   14330:	681b      	ldr	r3, [r3, #0]
   14332:	3304      	adds	r3, #4
   14334:	681b      	ldr	r3, [r3, #0]
   14336:	2102      	movs	r1, #2
   14338:	4610      	mov	r0, r2
   1433a:	4798      	blx	r3
    // Baud rate setting
    SetBaudRate(baud_rate);
   1433c:	9900      	ldr	r1, [sp, #0]
   1433e:	9801      	ldr	r0, [sp, #4]
   14340:	f7ff ff4e 	bl	141e0 <Uart::SetBaudRate(unsigned long)>
    uart[channel_]->FCR |= kFIFOEnableAndReset;
   14344:	9b01      	ldr	r3, [sp, #4]
   14346:	7a1b      	ldrb	r3, [r3, #8]
   14348:	461a      	mov	r2, r3
   1434a:	4b10      	ldr	r3, [pc, #64]	; (1438c <Uart::Initialize(unsigned long)+0xe0>)
   1434c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   14350:	7a1b      	ldrb	r3, [r3, #8]
   14352:	b2da      	uxtb	r2, r3
   14354:	9b01      	ldr	r3, [sp, #4]
   14356:	7a1b      	ldrb	r3, [r3, #8]
   14358:	4619      	mov	r1, r3
   1435a:	4b0c      	ldr	r3, [pc, #48]	; (1438c <Uart::Initialize(unsigned long)+0xe0>)
   1435c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   14360:	f042 0207 	orr.w	r2, r2, #7
   14364:	b2d2      	uxtb	r2, r2
   14366:	721a      	strb	r2, [r3, #8]
    return true;
   14368:	2401      	movs	r4, #1
   1436a:	462b      	mov	r3, r5
   1436c:	4619      	mov	r1, r3
   1436e:	4803      	ldr	r0, [pc, #12]	; (1437c <Uart::Initialize(unsigned long)+0xd0>)
   14370:	f001 f8c2 	bl	154f8 <__cyg_profile_func_exit>
   14374:	4623      	mov	r3, r4
  }
   14376:	4618      	mov	r0, r3
   14378:	b005      	add	sp, #20
   1437a:	bd30      	pop	{r4, r5, pc}
   1437c:	000142ad 	.word	0x000142ad
   14380:	0001940c 	.word	0x0001940c
   14384:	00019408 	.word	0x00019408
   14388:	00019404 	.word	0x00019404
   1438c:	10000394 	.word	0x10000394

00014390 <Uart::Send(unsigned char)::{lambda()#1}::operator()() const>:

  void Send(uint8_t data) override
  {
    uart[channel_]->THR              = data;
    auto wait_for_transfer_to_finish = [this]() -> bool {
   14390:	b530      	push	{r4, r5, lr}
   14392:	b083      	sub	sp, #12
   14394:	4675      	mov	r5, lr
   14396:	9001      	str	r0, [sp, #4]
   14398:	462b      	mov	r3, r5
   1439a:	4619      	mov	r1, r3
   1439c:	480d      	ldr	r0, [pc, #52]	; (143d4 <Uart::Send(unsigned char)::{lambda()#1}::operator()() const+0x44>)
   1439e:	f001 f897 	bl	154d0 <__cyg_profile_func_enter>
   143a2:	9b01      	ldr	r3, [sp, #4]
   143a4:	681b      	ldr	r3, [r3, #0]
      return (uart[channel_]->LSR & (1 << 5));
   143a6:	7a1b      	ldrb	r3, [r3, #8]
   143a8:	461a      	mov	r2, r3
   143aa:	4b0b      	ldr	r3, [pc, #44]	; (143d8 <Uart::Send(unsigned char)::{lambda()#1}::operator()() const+0x48>)
   143ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   143b0:	7d1b      	ldrb	r3, [r3, #20]
   143b2:	b2db      	uxtb	r3, r3
   143b4:	f003 0320 	and.w	r3, r3, #32
   143b8:	2b00      	cmp	r3, #0
   143ba:	bf14      	ite	ne
   143bc:	2301      	movne	r3, #1
   143be:	2300      	moveq	r3, #0
   143c0:	b2dc      	uxtb	r4, r3
   143c2:	462b      	mov	r3, r5
   143c4:	4619      	mov	r1, r3
   143c6:	4803      	ldr	r0, [pc, #12]	; (143d4 <Uart::Send(unsigned char)::{lambda()#1}::operator()() const+0x44>)
   143c8:	f001 f896 	bl	154f8 <__cyg_profile_func_exit>
   143cc:	4623      	mov	r3, r4
    };
   143ce:	4618      	mov	r0, r3
   143d0:	b003      	add	sp, #12
   143d2:	bd30      	pop	{r4, r5, pc}
   143d4:	00014391 	.word	0x00014391
   143d8:	10000394 	.word	0x10000394

000143dc <Uart::Send(unsigned char)>:
  void Send(uint8_t data) override
   143dc:	e92d 4830 	stmdb	sp!, {r4, r5, fp, lr}
   143e0:	b08a      	sub	sp, #40	; 0x28
   143e2:	4675      	mov	r5, lr
   143e4:	9001      	str	r0, [sp, #4]
   143e6:	460b      	mov	r3, r1
   143e8:	f88d 3003 	strb.w	r3, [sp, #3]
   143ec:	462b      	mov	r3, r5
   143ee:	4619      	mov	r1, r3
   143f0:	4831      	ldr	r0, [pc, #196]	; (144b8 <Uart::Send(unsigned char)+0xdc>)
   143f2:	f001 f86d 	bl	154d0 <__cyg_profile_func_enter>
    uart[channel_]->THR              = data;
   143f6:	9b01      	ldr	r3, [sp, #4]
   143f8:	7a1b      	ldrb	r3, [r3, #8]
   143fa:	461a      	mov	r2, r3
   143fc:	4b2f      	ldr	r3, [pc, #188]	; (144bc <Uart::Send(unsigned char)+0xe0>)
   143fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   14402:	f89d 2003 	ldrb.w	r2, [sp, #3]
   14406:	701a      	strb	r2, [r3, #0]
    };
   14408:	9b01      	ldr	r3, [sp, #4]
   1440a:	9304      	str	r3, [sp, #16]
   1440c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   14410:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   14414:	e9cd 3408 	strd	r3, r4, [sp, #32]
   14418:	9b04      	ldr	r3, [sp, #16]
   1441a:	9303      	str	r3, [sp, #12]
   1441c:	462b      	mov	r3, r5
   1441e:	4619      	mov	r1, r3
   14420:	4827      	ldr	r0, [pc, #156]	; (144c0 <Uart::Send(unsigned char)+0xe4>)
   14422:	f001 f855 	bl	154d0 <__cyg_profile_func_enter>
  uint64_t timeout_time = 0;
   14426:	f04f 0300 	mov.w	r3, #0
   1442a:	f04f 0400 	mov.w	r4, #0
   1442e:	e9cd 3406 	strd	r3, r4, [sp, #24]
  if (timeout == kMaxWait)
   14432:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   14436:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
   1443a:	bf08      	it	eq
   1443c:	f1b3 3fff 	cmpeq.w	r3, #4294967295	; 0xffffffff
   14440:	d106      	bne.n	14450 <Uart::Send(unsigned char)+0x74>
    timeout_time = kMaxWait;
   14442:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   14446:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   1444a:	e9cd 3406 	strd	r3, r4, [sp, #24]
   1444e:	e00b      	b.n	14468 <Uart::Send(unsigned char)+0x8c>
    timeout_time = Milliseconds() + timeout;
   14450:	f7fc f83c 	bl	104cc <Milliseconds()>
   14454:	460a      	mov	r2, r1
   14456:	4601      	mov	r1, r0
   14458:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   1445c:	eb13 0b01 	adds.w	fp, r3, r1
   14460:	eb44 0c02 	adc.w	ip, r4, r2
   14464:	e9cd bc06 	strd	fp, ip, [sp, #24]
  Status status = Status::kTimedOut;
   14468:	2301      	movs	r3, #1
   1446a:	9305      	str	r3, [sp, #20]
  while (Milliseconds() < timeout_time)
   1446c:	f7fc f82e 	bl	104cc <Milliseconds()>
   14470:	460a      	mov	r2, r1
   14472:	4601      	mov	r1, r0
   14474:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
   14478:	42a2      	cmp	r2, r4
   1447a:	bf08      	it	eq
   1447c:	4299      	cmpeq	r1, r3
   1447e:	bf34      	ite	cc
   14480:	2301      	movcc	r3, #1
   14482:	2300      	movcs	r3, #0
   14484:	b2db      	uxtb	r3, r3
   14486:	2b00      	cmp	r3, #0
   14488:	d008      	beq.n	1449c <Uart::Send(unsigned char)+0xc0>
    if (is_done())
   1448a:	ab03      	add	r3, sp, #12
   1448c:	4618      	mov	r0, r3
   1448e:	f7ff ff7f 	bl	14390 <Uart::Send(unsigned char)::{lambda()#1}::operator()() const>
   14492:	4603      	mov	r3, r0
   14494:	2b00      	cmp	r3, #0
   14496:	d0e9      	beq.n	1446c <Uart::Send(unsigned char)+0x90>
      status = Status::kSuccess;
   14498:	2300      	movs	r3, #0
   1449a:	9305      	str	r3, [sp, #20]
   1449c:	462b      	mov	r3, r5
   1449e:	4619      	mov	r1, r3
   144a0:	4807      	ldr	r0, [pc, #28]	; (144c0 <Uart::Send(unsigned char)+0xe4>)
   144a2:	f001 f829 	bl	154f8 <__cyg_profile_func_exit>
   144a6:	462b      	mov	r3, r5
   144a8:	4619      	mov	r1, r3
   144aa:	4803      	ldr	r0, [pc, #12]	; (144b8 <Uart::Send(unsigned char)+0xdc>)
   144ac:	f001 f824 	bl	154f8 <__cyg_profile_func_exit>
    Wait(kMaxWait, wait_for_transfer_to_finish);
  }
   144b0:	bf00      	nop
   144b2:	b00a      	add	sp, #40	; 0x28
   144b4:	e8bd 8830 	ldmia.w	sp!, {r4, r5, fp, pc}
   144b8:	000143dd 	.word	0x000143dd
   144bc:	10000394 	.word	0x10000394
   144c0:	00014cd9 	.word	0x00014cd9

000144c4 <Uart::Receive(unsigned long)::{lambda()#1}::operator()() const>:

  uint8_t Receive([[maybe_unused]] uint32_t timeout = 0x7FFFFFFF) override
  {
    uint8_t receiver   = '\xFF';
    auto byte_recieved = [this]() -> bool {
   144c4:	b530      	push	{r4, r5, lr}
   144c6:	b083      	sub	sp, #12
   144c8:	4675      	mov	r5, lr
   144ca:	9001      	str	r0, [sp, #4]
   144cc:	462b      	mov	r3, r5
   144ce:	4619      	mov	r1, r3
   144d0:	480d      	ldr	r0, [pc, #52]	; (14508 <Uart::Receive(unsigned long)::{lambda()#1}::operator()() const+0x44>)
   144d2:	f000 fffd 	bl	154d0 <__cyg_profile_func_enter>
   144d6:	9b01      	ldr	r3, [sp, #4]
   144d8:	681b      	ldr	r3, [r3, #0]
      return (uart[channel_]->LSR & (1 << 0));
   144da:	7a1b      	ldrb	r3, [r3, #8]
   144dc:	461a      	mov	r2, r3
   144de:	4b0b      	ldr	r3, [pc, #44]	; (1450c <Uart::Receive(unsigned long)::{lambda()#1}::operator()() const+0x48>)
   144e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   144e4:	7d1b      	ldrb	r3, [r3, #20]
   144e6:	b2db      	uxtb	r3, r3
   144e8:	f003 0301 	and.w	r3, r3, #1
   144ec:	2b00      	cmp	r3, #0
   144ee:	bf14      	ite	ne
   144f0:	2301      	movne	r3, #1
   144f2:	2300      	moveq	r3, #0
   144f4:	b2dc      	uxtb	r4, r3
   144f6:	462b      	mov	r3, r5
   144f8:	4619      	mov	r1, r3
   144fa:	4803      	ldr	r0, [pc, #12]	; (14508 <Uart::Receive(unsigned long)::{lambda()#1}::operator()() const+0x44>)
   144fc:	f000 fffc 	bl	154f8 <__cyg_profile_func_exit>
   14500:	4623      	mov	r3, r4
    };
   14502:	4618      	mov	r0, r3
   14504:	b003      	add	sp, #12
   14506:	bd30      	pop	{r4, r5, pc}
   14508:	000144c5 	.word	0x000144c5
   1450c:	10000394 	.word	0x10000394

00014510 <Uart::Receive(unsigned long)>:
  uint8_t Receive([[maybe_unused]] uint32_t timeout = 0x7FFFFFFF) override
   14510:	e92d 4830 	stmdb	sp!, {r4, r5, fp, lr}
   14514:	b08c      	sub	sp, #48	; 0x30
   14516:	4675      	mov	r5, lr
   14518:	9001      	str	r0, [sp, #4]
   1451a:	9100      	str	r1, [sp, #0]
   1451c:	462b      	mov	r3, r5
   1451e:	4619      	mov	r1, r3
   14520:	4836      	ldr	r0, [pc, #216]	; (145fc <Uart::Receive(unsigned long)+0xec>)
   14522:	f000 ffd5 	bl	154d0 <__cyg_profile_func_enter>
    uint8_t receiver   = '\xFF';
   14526:	23ff      	movs	r3, #255	; 0xff
   14528:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
    };
   1452c:	9b01      	ldr	r3, [sp, #4]
   1452e:	9304      	str	r3, [sp, #16]

    Status status = Wait(timeout, byte_recieved);
   14530:	9b00      	ldr	r3, [sp, #0]
   14532:	f04f 0400 	mov.w	r4, #0
   14536:	e9cd 3408 	strd	r3, r4, [sp, #32]
   1453a:	9b04      	ldr	r3, [sp, #16]
   1453c:	9303      	str	r3, [sp, #12]
   1453e:	462b      	mov	r3, r5
   14540:	4619      	mov	r1, r3
   14542:	482f      	ldr	r0, [pc, #188]	; (14600 <Uart::Receive(unsigned long)+0xf0>)
   14544:	f000 ffc4 	bl	154d0 <__cyg_profile_func_enter>
  uint64_t timeout_time = 0;
   14548:	f04f 0300 	mov.w	r3, #0
   1454c:	f04f 0400 	mov.w	r4, #0
   14550:	e9cd 3406 	strd	r3, r4, [sp, #24]
  if (timeout == kMaxWait)
   14554:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   14558:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
   1455c:	bf08      	it	eq
   1455e:	f1b3 3fff 	cmpeq.w	r3, #4294967295	; 0xffffffff
   14562:	d106      	bne.n	14572 <Uart::Receive(unsigned long)+0x62>
    timeout_time = kMaxWait;
   14564:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   14568:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   1456c:	e9cd 3406 	strd	r3, r4, [sp, #24]
   14570:	e00b      	b.n	1458a <Uart::Receive(unsigned long)+0x7a>
    timeout_time = Milliseconds() + timeout;
   14572:	f7fb ffab 	bl	104cc <Milliseconds()>
   14576:	460a      	mov	r2, r1
   14578:	4601      	mov	r1, r0
   1457a:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   1457e:	eb13 0b01 	adds.w	fp, r3, r1
   14582:	eb44 0c02 	adc.w	ip, r4, r2
   14586:	e9cd bc06 	strd	fp, ip, [sp, #24]
  Status status = Status::kTimedOut;
   1458a:	2301      	movs	r3, #1
   1458c:	9305      	str	r3, [sp, #20]
  while (Milliseconds() < timeout_time)
   1458e:	f7fb ff9d 	bl	104cc <Milliseconds()>
   14592:	460a      	mov	r2, r1
   14594:	4601      	mov	r1, r0
   14596:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
   1459a:	42a2      	cmp	r2, r4
   1459c:	bf08      	it	eq
   1459e:	4299      	cmpeq	r1, r3
   145a0:	bf34      	ite	cc
   145a2:	2301      	movcc	r3, #1
   145a4:	2300      	movcs	r3, #0
   145a6:	b2db      	uxtb	r3, r3
   145a8:	2b00      	cmp	r3, #0
   145aa:	d008      	beq.n	145be <Uart::Receive(unsigned long)+0xae>
    if (is_done())
   145ac:	ab03      	add	r3, sp, #12
   145ae:	4618      	mov	r0, r3
   145b0:	f7ff ff88 	bl	144c4 <Uart::Receive(unsigned long)::{lambda()#1}::operator()() const>
   145b4:	4603      	mov	r3, r0
   145b6:	2b00      	cmp	r3, #0
   145b8:	d0e9      	beq.n	1458e <Uart::Receive(unsigned long)+0x7e>
      status = Status::kSuccess;
   145ba:	2300      	movs	r3, #0
   145bc:	9305      	str	r3, [sp, #20]
  return status;
   145be:	9c05      	ldr	r4, [sp, #20]
   145c0:	462b      	mov	r3, r5
   145c2:	4619      	mov	r1, r3
   145c4:	480e      	ldr	r0, [pc, #56]	; (14600 <Uart::Receive(unsigned long)+0xf0>)
   145c6:	f000 ff97 	bl	154f8 <__cyg_profile_func_exit>
   145ca:	940a      	str	r4, [sp, #40]	; 0x28

    if (status == Status::kSuccess)
   145cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   145ce:	2b00      	cmp	r3, #0
   145d0:	d108      	bne.n	145e4 <Uart::Receive(unsigned long)+0xd4>
    {
      receiver = static_cast<uint8_t>(uart[channel_]->RBR);
   145d2:	9b01      	ldr	r3, [sp, #4]
   145d4:	7a1b      	ldrb	r3, [r3, #8]
   145d6:	461a      	mov	r2, r3
   145d8:	4b0a      	ldr	r3, [pc, #40]	; (14604 <Uart::Receive(unsigned long)+0xf4>)
   145da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   145de:	781b      	ldrb	r3, [r3, #0]
   145e0:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
    }
    return receiver;
   145e4:	f89d 402f 	ldrb.w	r4, [sp, #47]	; 0x2f
   145e8:	462b      	mov	r3, r5
   145ea:	4619      	mov	r1, r3
   145ec:	4803      	ldr	r0, [pc, #12]	; (145fc <Uart::Receive(unsigned long)+0xec>)
   145ee:	f000 ff83 	bl	154f8 <__cyg_profile_func_exit>
   145f2:	4623      	mov	r3, r4
  }
   145f4:	4618      	mov	r0, r3
   145f6:	b00c      	add	sp, #48	; 0x30
   145f8:	e8bd 8830 	ldmia.w	sp!, {r4, r5, fp, pc}
   145fc:	00014511 	.word	0x00014511
   14600:	00014d81 	.word	0x00014d81
   14604:	10000394 	.word	0x10000394

00014608 <Uart::FindClosestFractional(float)>:

 private:
  UartCalibration_t FindClosestFractional(float decimal)
   14608:	b510      	push	{r4, lr}
   1460a:	b08a      	sub	sp, #40	; 0x28
   1460c:	4674      	mov	r4, lr
   1460e:	9003      	str	r0, [sp, #12]
   14610:	9102      	str	r1, [sp, #8]
   14612:	ed8d 0a01 	vstr	s0, [sp, #4]
   14616:	4623      	mov	r3, r4
   14618:	4619      	mov	r1, r3
   1461a:	4838      	ldr	r0, [pc, #224]	; (146fc <Uart::FindClosestFractional(float)+0xf4>)
   1461c:	f000 ff58 	bl	154d0 <__cyg_profile_func_enter>
  {
    UartCalibration_t result;
   14620:	9b03      	ldr	r3, [sp, #12]
   14622:	2200      	movs	r2, #0
   14624:	601a      	str	r2, [r3, #0]
   14626:	9b03      	ldr	r3, [sp, #12]
   14628:	2200      	movs	r2, #0
   1462a:	605a      	str	r2, [r3, #4]
   1462c:	9b03      	ldr	r3, [sp, #12]
   1462e:	2201      	movs	r2, #1
   14630:	609a      	str	r2, [r3, #8]
    bool finished = false;
   14632:	2300      	movs	r3, #0
   14634:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    for (int div = 0; div < 15 && !finished; div++)
   14638:	2300      	movs	r3, #0
   1463a:	9308      	str	r3, [sp, #32]
   1463c:	9b08      	ldr	r3, [sp, #32]
   1463e:	2b0e      	cmp	r3, #14
   14640:	dc52      	bgt.n	146e8 <Uart::FindClosestFractional(float)+0xe0>
   14642:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   14646:	2b00      	cmp	r3, #0
   14648:	d14e      	bne.n	146e8 <Uart::FindClosestFractional(float)+0xe0>
    {
      for (int mul = div + 1; mul < 15 && !finished; mul++)
   1464a:	9b08      	ldr	r3, [sp, #32]
   1464c:	3301      	adds	r3, #1
   1464e:	9307      	str	r3, [sp, #28]
   14650:	9b07      	ldr	r3, [sp, #28]
   14652:	2b0e      	cmp	r3, #14
   14654:	dc44      	bgt.n	146e0 <Uart::FindClosestFractional(float)+0xd8>
   14656:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   1465a:	2b00      	cmp	r3, #0
   1465c:	d140      	bne.n	146e0 <Uart::FindClosestFractional(float)+0xd8>
      {
        float divf         = static_cast<float>(div);
   1465e:	9b08      	ldr	r3, [sp, #32]
   14660:	ee07 3a90 	vmov	s15, r3
   14664:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   14668:	edcd 7a06 	vstr	s15, [sp, #24]
        float mulf         = static_cast<float>(mul);
   1466c:	9b07      	ldr	r3, [sp, #28]
   1466e:	ee07 3a90 	vmov	s15, r3
   14672:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   14676:	edcd 7a05 	vstr	s15, [sp, #20]
        float test_decimal = 1.0f + divf / mulf;
   1467a:	eddd 6a06 	vldr	s13, [sp, #24]
   1467e:	ed9d 7a05 	vldr	s14, [sp, #20]
   14682:	eec6 7a87 	vdiv.f32	s15, s13, s14
   14686:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
   1468a:	ee77 7a87 	vadd.f32	s15, s15, s14
   1468e:	edcd 7a04 	vstr	s15, [sp, #16]
        if (decimal <= test_decimal + kThreshold &&
   14692:	eddd 7a04 	vldr	s15, [sp, #16]
   14696:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 14700 <Uart::FindClosestFractional(float)+0xf8>
   1469a:	ee77 7a87 	vadd.f32	s15, s15, s14
   1469e:	ed9d 7a01 	vldr	s14, [sp, #4]
   146a2:	eeb4 7ae7 	vcmpe.f32	s14, s15
   146a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   146aa:	d815      	bhi.n	146d8 <Uart::FindClosestFractional(float)+0xd0>
            decimal >= test_decimal - kThreshold)
   146ac:	eddd 7a04 	vldr	s15, [sp, #16]
   146b0:	ed9f 7a13 	vldr	s14, [pc, #76]	; 14700 <Uart::FindClosestFractional(float)+0xf8>
   146b4:	ee77 7ac7 	vsub.f32	s15, s15, s14
        if (decimal <= test_decimal + kThreshold &&
   146b8:	ed9d 7a01 	vldr	s14, [sp, #4]
   146bc:	eeb4 7ae7 	vcmpe.f32	s14, s15
   146c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   146c4:	db08      	blt.n	146d8 <Uart::FindClosestFractional(float)+0xd0>
        {
          result.divide_add = div;
   146c6:	9a08      	ldr	r2, [sp, #32]
   146c8:	9b03      	ldr	r3, [sp, #12]
   146ca:	605a      	str	r2, [r3, #4]
          result.multiply   = mul;
   146cc:	9a07      	ldr	r2, [sp, #28]
   146ce:	9b03      	ldr	r3, [sp, #12]
   146d0:	609a      	str	r2, [r3, #8]
          finished          = true;
   146d2:	2301      	movs	r3, #1
   146d4:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
      for (int mul = div + 1; mul < 15 && !finished; mul++)
   146d8:	9b07      	ldr	r3, [sp, #28]
   146da:	3301      	adds	r3, #1
   146dc:	9307      	str	r3, [sp, #28]
   146de:	e7b7      	b.n	14650 <Uart::FindClosestFractional(float)+0x48>
    for (int div = 0; div < 15 && !finished; div++)
   146e0:	9b08      	ldr	r3, [sp, #32]
   146e2:	3301      	adds	r3, #1
   146e4:	9308      	str	r3, [sp, #32]
   146e6:	e7a9      	b.n	1463c <Uart::FindClosestFractional(float)+0x34>
        }
      }
    }
    return result;
   146e8:	bf00      	nop
   146ea:	4623      	mov	r3, r4
   146ec:	4619      	mov	r1, r3
   146ee:	4803      	ldr	r0, [pc, #12]	; (146fc <Uart::FindClosestFractional(float)+0xf4>)
   146f0:	f000 ff02 	bl	154f8 <__cyg_profile_func_exit>
   146f4:	bf00      	nop
  }
   146f6:	9803      	ldr	r0, [sp, #12]
   146f8:	b00a      	add	sp, #40	; 0x28
   146fa:	bd10      	pop	{r4, pc}
   146fc:	00014609 	.word	0x00014609
   14700:	3d4ccccd 	.word	0x3d4ccccd

00014704 <Uart::DividerEstimate(float, float)>:

  float DividerEstimate(float baud_rate, float fraction_estimate = 1)
   14704:	b510      	push	{r4, lr}
   14706:	ed2d 8b02 	vpush	{d8}
   1470a:	b086      	sub	sp, #24
   1470c:	4674      	mov	r4, lr
   1470e:	9003      	str	r0, [sp, #12]
   14710:	ed8d 0a02 	vstr	s0, [sp, #8]
   14714:	edcd 0a01 	vstr	s1, [sp, #4]
   14718:	4623      	mov	r3, r4
   1471a:	4619      	mov	r1, r3
   1471c:	4815      	ldr	r0, [pc, #84]	; (14774 <Uart::DividerEstimate(float, float)+0x70>)
   1471e:	f000 fed7 	bl	154d0 <__cyg_profile_func_enter>
  {
    float clock_frequency = static_cast<float>(GetPeripheralFrequency());
   14722:	9b03      	ldr	r3, [sp, #12]
   14724:	1d1a      	adds	r2, r3, #4
   14726:	9b03      	ldr	r3, [sp, #12]
   14728:	685b      	ldr	r3, [r3, #4]
   1472a:	3310      	adds	r3, #16
   1472c:	681b      	ldr	r3, [r3, #0]
   1472e:	4610      	mov	r0, r2
   14730:	4798      	blx	r3
   14732:	ee07 0a90 	vmov	s15, r0
   14736:	eef8 7a67 	vcvt.f32.u32	s15, s15
   1473a:	edcd 7a05 	vstr	s15, [sp, #20]
    return clock_frequency / (16.0f * baud_rate * fraction_estimate);
   1473e:	eddd 7a02 	vldr	s15, [sp, #8]
   14742:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
   14746:	ee27 7a87 	vmul.f32	s14, s15, s14
   1474a:	eddd 7a01 	vldr	s15, [sp, #4]
   1474e:	ee67 7a27 	vmul.f32	s15, s14, s15
   14752:	ed9d 7a05 	vldr	s14, [sp, #20]
   14756:	ee87 8a27 	vdiv.f32	s16, s14, s15
   1475a:	4623      	mov	r3, r4
   1475c:	4619      	mov	r1, r3
   1475e:	4805      	ldr	r0, [pc, #20]	; (14774 <Uart::DividerEstimate(float, float)+0x70>)
   14760:	f000 feca 	bl	154f8 <__cyg_profile_func_exit>
   14764:	eef0 7a48 	vmov.f32	s15, s16
  }
   14768:	eeb0 0a67 	vmov.f32	s0, s15
   1476c:	b006      	add	sp, #24
   1476e:	ecbd 8b02 	vpop	{d8}
   14772:	bd10      	pop	{r4, pc}
   14774:	00014705 	.word	0x00014705

00014778 <Uart::FractionalEstimate(float, float)>:

  float FractionalEstimate(float baud_rate, float divider)
   14778:	b510      	push	{r4, lr}
   1477a:	ed2d 8b02 	vpush	{d8}
   1477e:	b086      	sub	sp, #24
   14780:	4674      	mov	r4, lr
   14782:	9003      	str	r0, [sp, #12]
   14784:	ed8d 0a02 	vstr	s0, [sp, #8]
   14788:	edcd 0a01 	vstr	s1, [sp, #4]
   1478c:	4623      	mov	r3, r4
   1478e:	4619      	mov	r1, r3
   14790:	4815      	ldr	r0, [pc, #84]	; (147e8 <Uart::FractionalEstimate(float, float)+0x70>)
   14792:	f000 fe9d 	bl	154d0 <__cyg_profile_func_enter>
  {
    float clock_frequency = static_cast<float>(GetPeripheralFrequency());
   14796:	9b03      	ldr	r3, [sp, #12]
   14798:	1d1a      	adds	r2, r3, #4
   1479a:	9b03      	ldr	r3, [sp, #12]
   1479c:	685b      	ldr	r3, [r3, #4]
   1479e:	3310      	adds	r3, #16
   147a0:	681b      	ldr	r3, [r3, #0]
   147a2:	4610      	mov	r0, r2
   147a4:	4798      	blx	r3
   147a6:	ee07 0a90 	vmov	s15, r0
   147aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
   147ae:	edcd 7a05 	vstr	s15, [sp, #20]
    return clock_frequency / (16.0f * baud_rate * divider);
   147b2:	eddd 7a02 	vldr	s15, [sp, #8]
   147b6:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
   147ba:	ee27 7a87 	vmul.f32	s14, s15, s14
   147be:	eddd 7a01 	vldr	s15, [sp, #4]
   147c2:	ee67 7a27 	vmul.f32	s15, s14, s15
   147c6:	ed9d 7a05 	vldr	s14, [sp, #20]
   147ca:	ee87 8a27 	vdiv.f32	s16, s14, s15
   147ce:	4623      	mov	r3, r4
   147d0:	4619      	mov	r1, r3
   147d2:	4805      	ldr	r0, [pc, #20]	; (147e8 <Uart::FractionalEstimate(float, float)+0x70>)
   147d4:	f000 fe90 	bl	154f8 <__cyg_profile_func_exit>
   147d8:	eef0 7a48 	vmov.f32	s15, s16
  }
   147dc:	eeb0 0a67 	vmov.f32	s0, s15
   147e0:	b006      	add	sp, #24
   147e2:	ecbd 8b02 	vpop	{d8}
   147e6:	bd10      	pop	{r4, pc}
   147e8:	00014779 	.word	0x00014779

000147ec <Uart::IsDecmial(float)>:

  bool IsDecmial(float value)
   147ec:	b530      	push	{r4, r5, lr}
   147ee:	b087      	sub	sp, #28
   147f0:	4675      	mov	r5, lr
   147f2:	9001      	str	r0, [sp, #4]
   147f4:	ed8d 0a00 	vstr	s0, [sp]
   147f8:	462b      	mov	r3, r5
   147fa:	4619      	mov	r1, r3
   147fc:	4819      	ldr	r0, [pc, #100]	; (14864 <Uart::IsDecmial(float)+0x78>)
   147fe:	f000 fe67 	bl	154d0 <__cyg_profile_func_enter>
  {
    bool result         = false;
   14802:	2300      	movs	r3, #0
   14804:	f88d 3017 	strb.w	r3, [sp, #23]
    float rounded_value = roundf(value);
   14808:	ed9d 0a00 	vldr	s0, [sp]
   1480c:	f003 fa9a 	bl	17d44 <roundf>
   14810:	ed8d 0a04 	vstr	s0, [sp, #16]
    float error         = value - rounded_value;
   14814:	ed9d 7a00 	vldr	s14, [sp]
   14818:	eddd 7a04 	vldr	s15, [sp, #16]
   1481c:	ee77 7a67 	vsub.f32	s15, s14, s15
   14820:	edcd 7a03 	vstr	s15, [sp, #12]
    if (-kThreshold <= error && error <= kThreshold)
   14824:	eddd 7a03 	vldr	s15, [sp, #12]
   14828:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 14868 <Uart::IsDecmial(float)+0x7c>
   1482c:	eef4 7ac7 	vcmpe.f32	s15, s14
   14830:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   14834:	db0b      	blt.n	1484e <Uart::IsDecmial(float)+0x62>
   14836:	eddd 7a03 	vldr	s15, [sp, #12]
   1483a:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 1486c <Uart::IsDecmial(float)+0x80>
   1483e:	eef4 7ac7 	vcmpe.f32	s15, s14
   14842:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   14846:	d802      	bhi.n	1484e <Uart::IsDecmial(float)+0x62>
    {
      result = true;
   14848:	2301      	movs	r3, #1
   1484a:	f88d 3017 	strb.w	r3, [sp, #23]
    }
    return result;
   1484e:	f89d 4017 	ldrb.w	r4, [sp, #23]
   14852:	462b      	mov	r3, r5
   14854:	4619      	mov	r1, r3
   14856:	4803      	ldr	r0, [pc, #12]	; (14864 <Uart::IsDecmial(float)+0x78>)
   14858:	f000 fe4e 	bl	154f8 <__cyg_profile_func_exit>
   1485c:	4623      	mov	r3, r4
  }
   1485e:	4618      	mov	r0, r3
   14860:	b007      	add	sp, #28
   14862:	bd30      	pop	{r4, r5, pc}
   14864:	000147ed 	.word	0x000147ed
   14868:	bd4ccccd 	.word	0xbd4ccccd
   1486c:	3d4ccccd 	.word	0x3d4ccccd

00014870 <Uart::GenerateUartCalibration(float)>:

  UartCalibration_t GenerateUartCalibration(float baud_rate)
   14870:	b530      	push	{r4, r5, lr}
   14872:	b08f      	sub	sp, #60	; 0x3c
   14874:	4675      	mov	r5, lr
   14876:	9007      	str	r0, [sp, #28]
   14878:	9106      	str	r1, [sp, #24]
   1487a:	ed8d 0a05 	vstr	s0, [sp, #20]
   1487e:	462b      	mov	r3, r5
   14880:	4619      	mov	r1, r3
   14882:	4874      	ldr	r0, [pc, #464]	; (14a54 <Uart::GenerateUartCalibration(float)+0x1e4>)
   14884:	f000 fe24 	bl	154d0 <__cyg_profile_func_enter>
  {
    States state = States::kCalculateIntegerDivideLatch;
   14888:	2300      	movs	r3, #0
   1488a:	930d      	str	r3, [sp, #52]	; 0x34
    UartCalibration_t uart_calibration;
   1488c:	9b07      	ldr	r3, [sp, #28]
   1488e:	2200      	movs	r2, #0
   14890:	601a      	str	r2, [r3, #0]
   14892:	9b07      	ldr	r3, [sp, #28]
   14894:	2200      	movs	r2, #0
   14896:	605a      	str	r2, [r3, #4]
   14898:	9b07      	ldr	r3, [sp, #28]
   1489a:	2201      	movs	r2, #1
   1489c:	609a      	str	r2, [r3, #8]
    float divide_estimate = 0;
   1489e:	f04f 0300 	mov.w	r3, #0
   148a2:	930c      	str	r3, [sp, #48]	; 0x30
    float decimal         = 1.5;
   148a4:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
   148a8:	930b      	str	r3, [sp, #44]	; 0x2c
    float div             = 1;
   148aa:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
   148ae:	930a      	str	r3, [sp, #40]	; 0x28
    float mul             = 2;
   148b0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   148b4:	9309      	str	r3, [sp, #36]	; 0x24
    while (state != States::kDone)
   148b6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   148b8:	2b04      	cmp	r3, #4
   148ba:	f000 80c1 	beq.w	14a40 <Uart::GenerateUartCalibration(float)+0x1d0>
    {
      switch (state)
   148be:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   148c0:	2b04      	cmp	r3, #4
   148c2:	f200 80bb 	bhi.w	14a3c <Uart::GenerateUartCalibration(float)+0x1cc>
   148c6:	a201      	add	r2, pc, #4	; (adr r2, 148cc <Uart::GenerateUartCalibration(float)+0x5c>)
   148c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   148cc:	000148e1 	.word	0x000148e1
   148d0:	0001493d 	.word	0x0001493d
   148d4:	0001499d 	.word	0x0001499d
   148d8:	00014a0d 	.word	0x00014a0d
   148dc:	00014a3d 	.word	0x00014a3d
      {
        case States::kCalculateIntegerDivideLatch:
        {
          divide_estimate = DividerEstimate(baud_rate);
   148e0:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
   148e4:	ed9d 0a05 	vldr	s0, [sp, #20]
   148e8:	9806      	ldr	r0, [sp, #24]
   148ea:	f7ff ff0b 	bl	14704 <Uart::DividerEstimate(float, float)>
   148ee:	ed8d 0a0c 	vstr	s0, [sp, #48]	; 0x30
          if (divide_estimate < 1.0f)
   148f2:	eddd 7a0c 	vldr	s15, [sp, #48]	; 0x30
   148f6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
   148fa:	eef4 7ac7 	vcmpe.f32	s15, s14
   148fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   14902:	d505      	bpl.n	14910 <Uart::GenerateUartCalibration(float)+0xa0>
          {
            uart_calibration.divide_latch = 0;
   14904:	9b07      	ldr	r3, [sp, #28]
   14906:	2200      	movs	r2, #0
   14908:	601a      	str	r2, [r3, #0]
            state                         = States::kDone;
   1490a:	2304      	movs	r3, #4
   1490c:	930d      	str	r3, [sp, #52]	; 0x34
          }
          else
          {
            state = States::kCalculateDivideLatchWithDecimal;
          }
          break;
   1490e:	e096      	b.n	14a3e <Uart::GenerateUartCalibration(float)+0x1ce>
          else if (IsDecmial(divide_estimate))
   14910:	ed9d 0a0c 	vldr	s0, [sp, #48]	; 0x30
   14914:	9806      	ldr	r0, [sp, #24]
   14916:	f7ff ff69 	bl	147ec <Uart::IsDecmial(float)>
   1491a:	4603      	mov	r3, r0
   1491c:	2b00      	cmp	r3, #0
   1491e:	d00a      	beq.n	14936 <Uart::GenerateUartCalibration(float)+0xc6>
                static_cast<uint32_t>(divide_estimate);
   14920:	eddd 7a0c 	vldr	s15, [sp, #48]	; 0x30
   14924:	eefc 7ae7 	vcvt.u32.f32	s15, s15
   14928:	ee17 2a90 	vmov	r2, s15
            uart_calibration.divide_latch =
   1492c:	9b07      	ldr	r3, [sp, #28]
   1492e:	601a      	str	r2, [r3, #0]
            state = States::kDone;
   14930:	2304      	movs	r3, #4
   14932:	930d      	str	r3, [sp, #52]	; 0x34
          break;
   14934:	e083      	b.n	14a3e <Uart::GenerateUartCalibration(float)+0x1ce>
            state = States::kCalculateDivideLatchWithDecimal;
   14936:	2301      	movs	r3, #1
   14938:	930d      	str	r3, [sp, #52]	; 0x34
          break;
   1493a:	e080      	b.n	14a3e <Uart::GenerateUartCalibration(float)+0x1ce>
        }
        case States::kCalculateDivideLatchWithDecimal:
        {
          divide_estimate = roundf(DividerEstimate(baud_rate, decimal));
   1493c:	eddd 0a0b 	vldr	s1, [sp, #44]	; 0x2c
   14940:	ed9d 0a05 	vldr	s0, [sp, #20]
   14944:	9806      	ldr	r0, [sp, #24]
   14946:	f7ff fedd 	bl	14704 <Uart::DividerEstimate(float, float)>
   1494a:	eef0 7a40 	vmov.f32	s15, s0
   1494e:	eeb0 0a67 	vmov.f32	s0, s15
   14952:	f003 f9f7 	bl	17d44 <roundf>
   14956:	ed8d 0a0c 	vstr	s0, [sp, #48]	; 0x30
          decimal         = FractionalEstimate(baud_rate, divide_estimate);
   1495a:	eddd 0a0c 	vldr	s1, [sp, #48]	; 0x30
   1495e:	ed9d 0a05 	vldr	s0, [sp, #20]
   14962:	9806      	ldr	r0, [sp, #24]
   14964:	f7ff ff08 	bl	14778 <Uart::FractionalEstimate(float, float)>
   14968:	ed8d 0a0b 	vstr	s0, [sp, #44]	; 0x2c
          if (1.1f <= decimal && decimal <= 1.9f)
   1496c:	eddd 7a0b 	vldr	s15, [sp, #44]	; 0x2c
   14970:	ed9f 7a39 	vldr	s14, [pc, #228]	; 14a58 <Uart::GenerateUartCalibration(float)+0x1e8>
   14974:	eef4 7ac7 	vcmpe.f32	s15, s14
   14978:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1497c:	db0b      	blt.n	14996 <Uart::GenerateUartCalibration(float)+0x126>
   1497e:	eddd 7a0b 	vldr	s15, [sp, #44]	; 0x2c
   14982:	ed9f 7a36 	vldr	s14, [pc, #216]	; 14a5c <Uart::GenerateUartCalibration(float)+0x1ec>
   14986:	eef4 7ac7 	vcmpe.f32	s15, s14
   1498a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1498e:	d802      	bhi.n	14996 <Uart::GenerateUartCalibration(float)+0x126>
          {
            state = States::kGenerateFractionFromDecimal;
   14990:	2303      	movs	r3, #3
   14992:	930d      	str	r3, [sp, #52]	; 0x34
          }
          else
          {
            state = States::kDecimalFailedGenerateNewDecimal;
          }
          break;
   14994:	e053      	b.n	14a3e <Uart::GenerateUartCalibration(float)+0x1ce>
            state = States::kDecimalFailedGenerateNewDecimal;
   14996:	2302      	movs	r3, #2
   14998:	930d      	str	r3, [sp, #52]	; 0x34
          break;
   1499a:	e050      	b.n	14a3e <Uart::GenerateUartCalibration(float)+0x1ce>
        }
        case States::kDecimalFailedGenerateNewDecimal:
        {
          mul += 1;
   1499c:	eddd 7a09 	vldr	s15, [sp, #36]	; 0x24
   149a0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
   149a4:	ee77 7a87 	vadd.f32	s15, s15, s14
   149a8:	edcd 7a09 	vstr	s15, [sp, #36]	; 0x24

          if (div > 15)
   149ac:	eddd 7a0a 	vldr	s15, [sp, #40]	; 0x28
   149b0:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
   149b4:	eef4 7ac7 	vcmpe.f32	s15, s14
   149b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   149bc:	dd02      	ble.n	149c4 <Uart::GenerateUartCalibration(float)+0x154>
          {
            state = States::kDone;
   149be:	2304      	movs	r3, #4
   149c0:	930d      	str	r3, [sp, #52]	; 0x34
            break;
   149c2:	e03c      	b.n	14a3e <Uart::GenerateUartCalibration(float)+0x1ce>
          }
          else if (mul > 15)
   149c4:	eddd 7a09 	vldr	s15, [sp, #36]	; 0x24
   149c8:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
   149cc:	eef4 7ac7 	vcmpe.f32	s15, s14
   149d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   149d4:	dd0f      	ble.n	149f6 <Uart::GenerateUartCalibration(float)+0x186>
          {
            div += 1;
   149d6:	eddd 7a0a 	vldr	s15, [sp, #40]	; 0x28
   149da:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
   149de:	ee77 7a87 	vadd.f32	s15, s15, s14
   149e2:	edcd 7a0a 	vstr	s15, [sp, #40]	; 0x28
            mul = div + 1;
   149e6:	eddd 7a0a 	vldr	s15, [sp, #40]	; 0x28
   149ea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
   149ee:	ee77 7a87 	vadd.f32	s15, s15, s14
   149f2:	edcd 7a09 	vstr	s15, [sp, #36]	; 0x24
          }
          decimal = div / mul;
   149f6:	eddd 6a0a 	vldr	s13, [sp, #40]	; 0x28
   149fa:	ed9d 7a09 	vldr	s14, [sp, #36]	; 0x24
   149fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
   14a02:	edcd 7a0b 	vstr	s15, [sp, #44]	; 0x2c
          state   = States::kCalculateDivideLatchWithDecimal;
   14a06:	2301      	movs	r3, #1
   14a08:	930d      	str	r3, [sp, #52]	; 0x34
          break;
   14a0a:	e018      	b.n	14a3e <Uart::GenerateUartCalibration(float)+0x1ce>
        }
        case States::kGenerateFractionFromDecimal:
        {
          uart_calibration = FindClosestFractional(decimal);
   14a0c:	9c07      	ldr	r4, [sp, #28]
   14a0e:	466b      	mov	r3, sp
   14a10:	ed9d 0a0b 	vldr	s0, [sp, #44]	; 0x2c
   14a14:	9906      	ldr	r1, [sp, #24]
   14a16:	4618      	mov	r0, r3
   14a18:	f7ff fdf6 	bl	14608 <Uart::FindClosestFractional(float)>
   14a1c:	466b      	mov	r3, sp
   14a1e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   14a22:	e884 0007 	stmia.w	r4, {r0, r1, r2}
          uart_calibration.divide_latch =
              static_cast<uint32_t>(divide_estimate);
   14a26:	eddd 7a0c 	vldr	s15, [sp, #48]	; 0x30
   14a2a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
   14a2e:	ee17 2a90 	vmov	r2, s15
          uart_calibration.divide_latch =
   14a32:	9b07      	ldr	r3, [sp, #28]
   14a34:	601a      	str	r2, [r3, #0]
          state = States::kDone;
   14a36:	2304      	movs	r3, #4
   14a38:	930d      	str	r3, [sp, #52]	; 0x34
          break;
   14a3a:	e000      	b.n	14a3e <Uart::GenerateUartCalibration(float)+0x1ce>
        }
        case States::kDone: { break;
        }
        default: { break;
   14a3c:	bf00      	nop
    while (state != States::kDone)
   14a3e:	e73a      	b.n	148b6 <Uart::GenerateUartCalibration(float)+0x46>
        }
      }
    }
    return uart_calibration;
   14a40:	bf00      	nop
   14a42:	462b      	mov	r3, r5
   14a44:	4619      	mov	r1, r3
   14a46:	4803      	ldr	r0, [pc, #12]	; (14a54 <Uart::GenerateUartCalibration(float)+0x1e4>)
   14a48:	f000 fd56 	bl	154f8 <__cyg_profile_func_exit>
   14a4c:	bf00      	nop
  }
   14a4e:	9807      	ldr	r0, [sp, #28]
   14a50:	b00f      	add	sp, #60	; 0x3c
   14a52:	bd30      	pop	{r4, r5, pc}
   14a54:	00014871 	.word	0x00014871
   14a58:	3f8ccccd 	.word	0x3f8ccccd
   14a5c:	3ff33333 	.word	0x3ff33333

00014a60 <(anonymous namespace)::Lpc40xxUptime()>:
{
   14a60:	b538      	push	{r3, r4, r5, lr}
   14a62:	4675      	mov	r5, lr
   14a64:	462b      	mov	r3, r5
   14a66:	4619      	mov	r1, r3
   14a68:	480a      	ldr	r0, [pc, #40]	; (14a94 <(anonymous namespace)::Lpc40xxUptime()+0x34>)
   14a6a:	f000 fd31 	bl	154d0 <__cyg_profile_func_enter>
    return tim_register[channel_]->TC;
   14a6e:	4b0a      	ldr	r3, [pc, #40]	; (14a98 <(anonymous namespace)::Lpc40xxUptime()+0x38>)
   14a70:	7a1b      	ldrb	r3, [r3, #8]
   14a72:	461a      	mov	r2, r3
   14a74:	4b09      	ldr	r3, [pc, #36]	; (14a9c <(anonymous namespace)::Lpc40xxUptime()+0x3c>)
   14a76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   14a7a:	689c      	ldr	r4, [r3, #8]
   14a7c:	462b      	mov	r3, r5
   14a7e:	4619      	mov	r1, r3
   14a80:	4804      	ldr	r0, [pc, #16]	; (14a94 <(anonymous namespace)::Lpc40xxUptime()+0x34>)
   14a82:	f000 fd39 	bl	154f8 <__cyg_profile_func_exit>
  return timer0.GetTimer();
   14a86:	4623      	mov	r3, r4
   14a88:	f04f 0400 	mov.w	r4, #0
}
   14a8c:	4618      	mov	r0, r3
   14a8e:	4621      	mov	r1, r4
   14a90:	bd38      	pop	{r3, r4, r5, pc}
   14a92:	bf00      	nop
   14a94:	000141a5 	.word	0x000141a5
   14a98:	10000404 	.word	0x10000404
   14a9c:	10000384 	.word	0x10000384

00014aa0 <UptimeRTOS>:
{
   14aa0:	b538      	push	{r3, r4, r5, lr}
   14aa2:	4675      	mov	r5, lr
   14aa4:	462b      	mov	r3, r5
   14aa6:	4619      	mov	r1, r3
   14aa8:	480a      	ldr	r0, [pc, #40]	; (14ad4 <UptimeRTOS+0x34>)
   14aaa:	f000 fd11 	bl	154d0 <__cyg_profile_func_enter>
   14aae:	4b0a      	ldr	r3, [pc, #40]	; (14ad8 <UptimeRTOS+0x38>)
   14ab0:	7a1b      	ldrb	r3, [r3, #8]
   14ab2:	461a      	mov	r2, r3
   14ab4:	4b09      	ldr	r3, [pc, #36]	; (14adc <UptimeRTOS+0x3c>)
   14ab6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   14aba:	689c      	ldr	r4, [r3, #8]
   14abc:	462b      	mov	r3, r5
   14abe:	4619      	mov	r1, r3
   14ac0:	4804      	ldr	r0, [pc, #16]	; (14ad4 <UptimeRTOS+0x34>)
   14ac2:	f000 fd19 	bl	154f8 <__cyg_profile_func_exit>
  return timer0.GetTimer();
   14ac6:	4623      	mov	r3, r4
   14ac8:	f04f 0400 	mov.w	r4, #0
}
   14acc:	4618      	mov	r0, r3
   14ace:	4621      	mov	r1, r4
   14ad0:	bd38      	pop	{r3, r4, r5, pc}
   14ad2:	bf00      	nop
   14ad4:	000141a5 	.word	0x000141a5
   14ad8:	10000404 	.word	0x10000404
   14adc:	10000384 	.word	0x10000384

00014ae0 <LowLevelInit()>:

void LowLevelInit()
{
   14ae0:	b500      	push	{lr}
   14ae2:	b083      	sub	sp, #12
  // Set the SystemTick frequency to the RTOS tick frequency
  // It is critical that this happens before you set the system_clock, since
  // The system_timer keeps the time that the system_clock uses to delay itself.
  system_timer.SetTickFrequency(config::kRtosFrequency);
   14ae4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   14ae8:	4822      	ldr	r0, [pc, #136]	; (14b74 <LowLevelInit()+0x94>)
   14aea:	f7ff f9bb 	bl	13e64 <SystemTimer::SetTickFrequency(unsigned long)>
  bool timer_started_successfully = system_timer.StartTimer();
   14aee:	4821      	ldr	r0, [pc, #132]	; (14b74 <LowLevelInit()+0x94>)
   14af0:	f7ff f96a 	bl	13dc8 <SystemTimer::StartTimer()>
   14af4:	4603      	mov	r3, r0
   14af6:	f88d 3007 	strb.w	r3, [sp, #7]
  SJ2_ASSERT_WARNING(timer_started_successfully,
   14afa:	f89d 3007 	ldrb.w	r3, [sp, #7]
   14afe:	f083 0301 	eor.w	r3, r3, #1
   14b02:	b2db      	uxtb	r3, r3
   14b04:	2b00      	cmp	r3, #0
   14b06:	d005      	beq.n	14b14 <LowLevelInit()+0x34>
   14b08:	23ad      	movs	r3, #173	; 0xad
   14b0a:	4a1b      	ldr	r2, [pc, #108]	; (14b78 <LowLevelInit()+0x98>)
   14b0c:	491b      	ldr	r1, [pc, #108]	; (14b7c <LowLevelInit()+0x9c>)
   14b0e:	481c      	ldr	r0, [pc, #112]	; (14b80 <LowLevelInit()+0xa0>)
   14b10:	f001 ff38 	bl	16984 <printf>
                     "System Timer has FAILED to start!");
  // Set Clock Speed
  // SetClockFrequency will timeout return the offset between desire clockspeed
  // and actual clockspeed if the PLL doesn't get a frequency fix within a
  // defined timeout (see L1/system_clock.hpp:kDefaultTimeout)
  while (system_controller.SetClockFrequency(config::kSystemClockRateMhz) != 0)
   14b14:	2130      	movs	r1, #48	; 0x30
   14b16:	481b      	ldr	r0, [pc, #108]	; (14b84 <LowLevelInit()+0xa4>)
   14b18:	f7fd f9e8 	bl	11eec <Lpc40xxSystemController::SetClockFrequency(unsigned char)>
   14b1c:	4603      	mov	r3, r0
   14b1e:	2b00      	cmp	r3, #0
   14b20:	bf14      	ite	ne
   14b22:	2301      	movne	r3, #1
   14b24:	2300      	moveq	r3, #0
   14b26:	b2db      	uxtb	r3, r3
   14b28:	2b00      	cmp	r3, #0
   14b2a:	d001      	beq.n	14b30 <LowLevelInit()+0x50>
  {
    // Continually attempt to set the clock frequency to the desired until the
    // delta between desired and actual are 0.
    continue;
   14b2c:	bf00      	nop
  while (system_controller.SetClockFrequency(config::kSystemClockRateMhz) != 0)
   14b2e:	e7f1      	b.n	14b14 <LowLevelInit()+0x34>
  }
  // Enable Peripheral Clock and set its divider to 1 meaning the clock speed
  // fed to all peripherals will be 48Mhz.
  system_controller.SetPeripheralClockDivider(1);
   14b30:	2101      	movs	r1, #1
   14b32:	4814      	ldr	r0, [pc, #80]	; (14b84 <LowLevelInit()+0xa4>)
   14b34:	f7fd fa22 	bl	11f7c <Lpc40xxSystemController::SetPeripheralClockDivider(unsigned char)>
  // Set System Timer frequency again, since the clock speed has changed since
  // the last time we ran this.
  system_timer.DisableTimer();
   14b38:	f7ff f8f4 	bl	13d24 <SystemTimer::DisableTimer()>
  system_timer.SetTickFrequency(config::kRtosFrequency);
   14b3c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   14b40:	480c      	ldr	r0, [pc, #48]	; (14b74 <LowLevelInit()+0x94>)
   14b42:	f7ff f98f 	bl	13e64 <SystemTimer::SetTickFrequency(unsigned long)>
  system_timer.StartTimer();
   14b46:	480b      	ldr	r0, [pc, #44]	; (14b74 <LowLevelInit()+0x94>)
   14b48:	f7ff f93e 	bl	13dc8 <SystemTimer::StartTimer()>
  // Set timer0 to 1 MHz (1,000,000 Hz) so that the timer increments every 1
  // micro second.
  timer0.Initialize(1'000'000);
   14b4c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   14b50:	4a0d      	ldr	r2, [pc, #52]	; (14b88 <LowLevelInit()+0xa8>)
   14b52:	490e      	ldr	r1, [pc, #56]	; (14b8c <LowLevelInit()+0xac>)
   14b54:	480e      	ldr	r0, [pc, #56]	; (14b90 <LowLevelInit()+0xb0>)
   14b56:	f7ff f9f7 	bl	13f48 <Timer::Initialize(unsigned long, void (*)(), long)>
  SetUptimeFunction(Lpc40xxUptime);
   14b5a:	480e      	ldr	r0, [pc, #56]	; (14b94 <LowLevelInit()+0xb4>)
   14b5c:	f7ff f8ca 	bl	13cf4 <SetUptimeFunction(unsigned long long (*)())>
  // Set UART0 baudrate, which is required for printf and scanf to work properly
  uart0.Initialize(config::kBaudRate);
   14b60:	f44f 4116 	mov.w	r1, #38400	; 0x9600
   14b64:	480c      	ldr	r0, [pc, #48]	; (14b98 <LowLevelInit()+0xb8>)
   14b66:	f7ff fba1 	bl	142ac <Uart::Initialize(unsigned long)>
}
   14b6a:	bf00      	nop
   14b6c:	b003      	add	sp, #12
   14b6e:	f85d fb04 	ldr.w	pc, [sp], #4
   14b72:	bf00      	nop
   14b74:	100003f8 	.word	0x100003f8
   14b78:	00019514 	.word	0x00019514
   14b7c:	0001941c 	.word	0x0001941c
   14b80:	00019374 	.word	0x00019374
   14b84:	10000400 	.word	0x10000400
   14b88:	00013f29 	.word	0x00013f29
   14b8c:	000f4240 	.word	0x000f4240
   14b90:	10000404 	.word	0x10000404
   14b94:	00014a61 	.word	0x00014a61
   14b98:	100003e4 	.word	0x100003e4

00014b9c <SystemInit>:

void SystemInit()
{
   14b9c:	b508      	push	{r3, lr}
  // Transfer data section values from flash to RAM
  InitDataSection();
   14b9e:	f7fb fab5 	bl	1010c <InitDataSection()>
  // Clear BSS section of RAM
  // This is required because the nano implementation of the standard C/C++
  // libraries assumes that the BSS section is initialized to 0.
  InitBssSection();
   14ba2:	f7fb fafb 	bl	1019c <InitBssSection()>
  // Enable FPU (F.loating P.oint U.nit)
  // System will crash if floating point operations occur without
  // Initializing the FPU.
  InitFpu();
   14ba6:	f7fb fb29 	bl	101fc <InitFpu()>
  // Initialisation C++ libraries
  __libc_init_array();
   14baa:	f003 fad3 	bl	18154 <__libc_init_array>
  // Run LowLevel System Initialization
  LowLevelInit();
   14bae:	f7ff ff97 	bl	14ae0 <LowLevelInit()>
}
   14bb2:	bf00      	nop
   14bb4:	bd08      	pop	{r3, pc}
   14bb6:	Address 0x0000000000014bb6 is out of bounds.


00014bb8 <ResetIsr>:
// Sets up a simple runtime environment and initializes the C/C++ library.

extern "C"
{
  void ResetIsr(void)
  {
   14bb8:	b580      	push	{r7, lr}
   14bba:	b084      	sub	sp, #16
   14bbc:	af00      	add	r7, sp, #0
    // The Hyperload bootloader takes up stack space to execute. The Hyperload
    // bootloader function launches this ISR manually, but it never returns thus
    // it never cleans up the memory it uses. To get that memory back, we have
    // to manually move the stack pointers back to the top of stack.
    const uint32_t kTopOfStack = reinterpret_cast<intptr_t>(&StackTop);
   14bbe:	4b09      	ldr	r3, [pc, #36]	; (14be4 <ResetIsr+0x2c>)
   14bc0:	60fb      	str	r3, [r7, #12]
   14bc2:	68fb      	ldr	r3, [r7, #12]
   14bc4:	603b      	str	r3, [r7, #0]
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
   14bc6:	683b      	ldr	r3, [r7, #0]
   14bc8:	f383 8809 	msr	PSP, r3
   14bcc:	68fb      	ldr	r3, [r7, #12]
   14bce:	607b      	str	r3, [r7, #4]

    \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0\n" : : "r" (topOfMainStack) : "sp");
   14bd0:	687b      	ldr	r3, [r7, #4]
   14bd2:	f383 8808 	msr	MSP, r3
    __set_PSP(kTopOfStack);
    __set_MSP(kTopOfStack);

    SystemInit();
   14bd6:	f7ff ffe1 	bl	14b9c <SystemInit>
// #pragma ignored "-Wpedantic" to suppress main function call warning
#pragma GCC diagnostic push ignored "-Wpedantic"
    [[maybe_unused]] int32_t result = main();
   14bda:	f7fe fdc5 	bl	13768 <main>
   14bde:	60b8      	str	r0, [r7, #8]
   14be0:	e7fe      	b.n	14be0 <ResetIsr+0x28>
   14be2:	bf00      	nop
   14be4:	10010000 	.word	0x10010000

00014be8 <void Timer::TimerHandler<(TimerInterface::TimerPort)0>()>:
  static void TimerHandler()
   14be8:	b510      	push	{r4, lr}
   14bea:	4674      	mov	r4, lr
   14bec:	4623      	mov	r3, r4
   14bee:	4619      	mov	r1, r3
   14bf0:	480a      	ldr	r0, [pc, #40]	; (14c1c <void Timer::TimerHandler<(TimerInterface::TimerPort)0>()+0x34>)
   14bf2:	f000 fc6d 	bl	154d0 <__cyg_profile_func_enter>
      user_timer_isr[util::Value(port)]();
   14bf6:	2000      	movs	r0, #0
   14bf8:	f7ff f97e 	bl	13ef8 <unsigned char util::Value<TimerInterface::TimerPort, unsigned char>(TimerInterface::TimerPort)>
   14bfc:	4603      	mov	r3, r0
   14bfe:	461a      	mov	r2, r3
   14c00:	4b07      	ldr	r3, [pc, #28]	; (14c20 <void Timer::TimerHandler<(TimerInterface::TimerPort)0>()+0x38>)
   14c02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   14c06:	4798      	blx	r3
    ClearInterrupts<port>();
   14c08:	f000 f90e 	bl	14e28 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)0>()>
   14c0c:	4623      	mov	r3, r4
   14c0e:	4619      	mov	r1, r3
   14c10:	4802      	ldr	r0, [pc, #8]	; (14c1c <void Timer::TimerHandler<(TimerInterface::TimerPort)0>()+0x34>)
   14c12:	f000 fc71 	bl	154f8 <__cyg_profile_func_exit>
  }
   14c16:	bf00      	nop
   14c18:	bd10      	pop	{r4, pc}
   14c1a:	bf00      	nop
   14c1c:	00014be9 	.word	0x00014be9
   14c20:	10000eb4 	.word	0x10000eb4

00014c24 <void Timer::TimerHandler<(TimerInterface::TimerPort)1>()>:
  static void TimerHandler()
   14c24:	b510      	push	{r4, lr}
   14c26:	4674      	mov	r4, lr
   14c28:	4623      	mov	r3, r4
   14c2a:	4619      	mov	r1, r3
   14c2c:	480a      	ldr	r0, [pc, #40]	; (14c58 <void Timer::TimerHandler<(TimerInterface::TimerPort)1>()+0x34>)
   14c2e:	f000 fc4f 	bl	154d0 <__cyg_profile_func_enter>
      user_timer_isr[util::Value(port)]();
   14c32:	2001      	movs	r0, #1
   14c34:	f7ff f960 	bl	13ef8 <unsigned char util::Value<TimerInterface::TimerPort, unsigned char>(TimerInterface::TimerPort)>
   14c38:	4603      	mov	r3, r0
   14c3a:	461a      	mov	r2, r3
   14c3c:	4b07      	ldr	r3, [pc, #28]	; (14c5c <void Timer::TimerHandler<(TimerInterface::TimerPort)1>()+0x38>)
   14c3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   14c42:	4798      	blx	r3
    ClearInterrupts<port>();
   14c44:	f000 f940 	bl	14ec8 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)1>()>
   14c48:	4623      	mov	r3, r4
   14c4a:	4619      	mov	r1, r3
   14c4c:	4802      	ldr	r0, [pc, #8]	; (14c58 <void Timer::TimerHandler<(TimerInterface::TimerPort)1>()+0x34>)
   14c4e:	f000 fc53 	bl	154f8 <__cyg_profile_func_exit>
  }
   14c52:	bf00      	nop
   14c54:	bd10      	pop	{r4, pc}
   14c56:	bf00      	nop
   14c58:	00014c25 	.word	0x00014c25
   14c5c:	10000eb4 	.word	0x10000eb4

00014c60 <void Timer::TimerHandler<(TimerInterface::TimerPort)2>()>:
  static void TimerHandler()
   14c60:	b510      	push	{r4, lr}
   14c62:	4674      	mov	r4, lr
   14c64:	4623      	mov	r3, r4
   14c66:	4619      	mov	r1, r3
   14c68:	480a      	ldr	r0, [pc, #40]	; (14c94 <void Timer::TimerHandler<(TimerInterface::TimerPort)2>()+0x34>)
   14c6a:	f000 fc31 	bl	154d0 <__cyg_profile_func_enter>
      user_timer_isr[util::Value(port)]();
   14c6e:	2002      	movs	r0, #2
   14c70:	f7ff f942 	bl	13ef8 <unsigned char util::Value<TimerInterface::TimerPort, unsigned char>(TimerInterface::TimerPort)>
   14c74:	4603      	mov	r3, r0
   14c76:	461a      	mov	r2, r3
   14c78:	4b07      	ldr	r3, [pc, #28]	; (14c98 <void Timer::TimerHandler<(TimerInterface::TimerPort)2>()+0x38>)
   14c7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   14c7e:	4798      	blx	r3
    ClearInterrupts<port>();
   14c80:	f000 f972 	bl	14f68 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)2>()>
   14c84:	4623      	mov	r3, r4
   14c86:	4619      	mov	r1, r3
   14c88:	4802      	ldr	r0, [pc, #8]	; (14c94 <void Timer::TimerHandler<(TimerInterface::TimerPort)2>()+0x34>)
   14c8a:	f000 fc35 	bl	154f8 <__cyg_profile_func_exit>
  }
   14c8e:	bf00      	nop
   14c90:	bd10      	pop	{r4, pc}
   14c92:	bf00      	nop
   14c94:	00014c61 	.word	0x00014c61
   14c98:	10000eb4 	.word	0x10000eb4

00014c9c <void Timer::TimerHandler<(TimerInterface::TimerPort)3>()>:
  static void TimerHandler()
   14c9c:	b510      	push	{r4, lr}
   14c9e:	4674      	mov	r4, lr
   14ca0:	4623      	mov	r3, r4
   14ca2:	4619      	mov	r1, r3
   14ca4:	480a      	ldr	r0, [pc, #40]	; (14cd0 <void Timer::TimerHandler<(TimerInterface::TimerPort)3>()+0x34>)
   14ca6:	f000 fc13 	bl	154d0 <__cyg_profile_func_enter>
      user_timer_isr[util::Value(port)]();
   14caa:	2003      	movs	r0, #3
   14cac:	f7ff f924 	bl	13ef8 <unsigned char util::Value<TimerInterface::TimerPort, unsigned char>(TimerInterface::TimerPort)>
   14cb0:	4603      	mov	r3, r0
   14cb2:	461a      	mov	r2, r3
   14cb4:	4b07      	ldr	r3, [pc, #28]	; (14cd4 <void Timer::TimerHandler<(TimerInterface::TimerPort)3>()+0x38>)
   14cb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   14cba:	4798      	blx	r3
    ClearInterrupts<port>();
   14cbc:	f000 f9a4 	bl	15008 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)3>()>
   14cc0:	4623      	mov	r3, r4
   14cc2:	4619      	mov	r1, r3
   14cc4:	4802      	ldr	r0, [pc, #8]	; (14cd0 <void Timer::TimerHandler<(TimerInterface::TimerPort)3>()+0x34>)
   14cc6:	f000 fc17 	bl	154f8 <__cyg_profile_func_exit>
  }
   14cca:	bf00      	nop
   14ccc:	bd10      	pop	{r4, pc}
   14cce:	bf00      	nop
   14cd0:	00014c9d 	.word	0x00014c9d
   14cd4:	10000eb4 	.word	0x10000eb4

00014cd8 <Status Wait<Uart::Send(unsigned char)::{lambda()#1}>(unsigned long long, Uart::Send(unsigned char)::{lambda()#1})>:
inline Status Wait(uint64_t timeout, F is_done)
   14cd8:	e92d 4830 	stmdb	sp!, {r4, r5, fp, lr}
   14cdc:	b088      	sub	sp, #32
   14cde:	4675      	mov	r5, lr
   14ce0:	e9cd 0102 	strd	r0, r1, [sp, #8]
   14ce4:	9201      	str	r2, [sp, #4]
   14ce6:	462b      	mov	r3, r5
   14ce8:	4619      	mov	r1, r3
   14cea:	4824      	ldr	r0, [pc, #144]	; (14d7c <Status Wait<Uart::Send(unsigned char)::{lambda()#1}>(unsigned long long, Uart::Send(unsigned char)::{lambda()#1})+0xa4>)
   14cec:	f000 fbf0 	bl	154d0 <__cyg_profile_func_enter>
  uint64_t timeout_time = 0;
   14cf0:	f04f 0300 	mov.w	r3, #0
   14cf4:	f04f 0400 	mov.w	r4, #0
   14cf8:	e9cd 3406 	strd	r3, r4, [sp, #24]
  if (timeout == kMaxWait)
   14cfc:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
   14d00:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
   14d04:	bf08      	it	eq
   14d06:	f1b3 3fff 	cmpeq.w	r3, #4294967295	; 0xffffffff
   14d0a:	d106      	bne.n	14d1a <Status Wait<Uart::Send(unsigned char)::{lambda()#1}>(unsigned long long, Uart::Send(unsigned char)::{lambda()#1})+0x42>
    timeout_time = kMaxWait;
   14d0c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   14d10:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   14d14:	e9cd 3406 	strd	r3, r4, [sp, #24]
   14d18:	e00b      	b.n	14d32 <Status Wait<Uart::Send(unsigned char)::{lambda()#1}>(unsigned long long, Uart::Send(unsigned char)::{lambda()#1})+0x5a>
    timeout_time = Milliseconds() + timeout;
   14d1a:	f7fb fbd7 	bl	104cc <Milliseconds()>
   14d1e:	460a      	mov	r2, r1
   14d20:	4601      	mov	r1, r0
   14d22:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
   14d26:	eb13 0b01 	adds.w	fp, r3, r1
   14d2a:	eb44 0c02 	adc.w	ip, r4, r2
   14d2e:	e9cd bc06 	strd	fp, ip, [sp, #24]
  Status status = Status::kTimedOut;
   14d32:	2301      	movs	r3, #1
   14d34:	9305      	str	r3, [sp, #20]
  while (Milliseconds() < timeout_time)
   14d36:	f7fb fbc9 	bl	104cc <Milliseconds()>
   14d3a:	460a      	mov	r2, r1
   14d3c:	4601      	mov	r1, r0
   14d3e:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
   14d42:	42a2      	cmp	r2, r4
   14d44:	bf08      	it	eq
   14d46:	4299      	cmpeq	r1, r3
   14d48:	bf34      	ite	cc
   14d4a:	2301      	movcc	r3, #1
   14d4c:	2300      	movcs	r3, #0
   14d4e:	b2db      	uxtb	r3, r3
   14d50:	2b00      	cmp	r3, #0
   14d52:	d008      	beq.n	14d66 <Status Wait<Uart::Send(unsigned char)::{lambda()#1}>(unsigned long long, Uart::Send(unsigned char)::{lambda()#1})+0x8e>
    if (is_done())
   14d54:	ab01      	add	r3, sp, #4
   14d56:	4618      	mov	r0, r3
   14d58:	f7ff fb1a 	bl	14390 <Uart::Send(unsigned char)::{lambda()#1}::operator()() const>
   14d5c:	4603      	mov	r3, r0
   14d5e:	2b00      	cmp	r3, #0
   14d60:	d0e9      	beq.n	14d36 <Status Wait<Uart::Send(unsigned char)::{lambda()#1}>(unsigned long long, Uart::Send(unsigned char)::{lambda()#1})+0x5e>
      status = Status::kSuccess;
   14d62:	2300      	movs	r3, #0
   14d64:	9305      	str	r3, [sp, #20]
  return status;
   14d66:	9c05      	ldr	r4, [sp, #20]
   14d68:	462b      	mov	r3, r5
   14d6a:	4619      	mov	r1, r3
   14d6c:	4803      	ldr	r0, [pc, #12]	; (14d7c <Status Wait<Uart::Send(unsigned char)::{lambda()#1}>(unsigned long long, Uart::Send(unsigned char)::{lambda()#1})+0xa4>)
   14d6e:	f000 fbc3 	bl	154f8 <__cyg_profile_func_exit>
   14d72:	4623      	mov	r3, r4
}
   14d74:	4618      	mov	r0, r3
   14d76:	b008      	add	sp, #32
   14d78:	e8bd 8830 	ldmia.w	sp!, {r4, r5, fp, pc}
   14d7c:	00014cd9 	.word	0x00014cd9

00014d80 <Status Wait<Uart::Receive(unsigned long)::{lambda()#1}>(unsigned long long, Uart::Receive(unsigned long)::{lambda()#1})>:
inline Status Wait(uint64_t timeout, F is_done)
   14d80:	e92d 4830 	stmdb	sp!, {r4, r5, fp, lr}
   14d84:	b088      	sub	sp, #32
   14d86:	4675      	mov	r5, lr
   14d88:	e9cd 0102 	strd	r0, r1, [sp, #8]
   14d8c:	9201      	str	r2, [sp, #4]
   14d8e:	462b      	mov	r3, r5
   14d90:	4619      	mov	r1, r3
   14d92:	4824      	ldr	r0, [pc, #144]	; (14e24 <Status Wait<Uart::Receive(unsigned long)::{lambda()#1}>(unsigned long long, Uart::Receive(unsigned long)::{lambda()#1})+0xa4>)
   14d94:	f000 fb9c 	bl	154d0 <__cyg_profile_func_enter>
  uint64_t timeout_time = 0;
   14d98:	f04f 0300 	mov.w	r3, #0
   14d9c:	f04f 0400 	mov.w	r4, #0
   14da0:	e9cd 3406 	strd	r3, r4, [sp, #24]
  if (timeout == kMaxWait)
   14da4:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
   14da8:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
   14dac:	bf08      	it	eq
   14dae:	f1b3 3fff 	cmpeq.w	r3, #4294967295	; 0xffffffff
   14db2:	d106      	bne.n	14dc2 <Status Wait<Uart::Receive(unsigned long)::{lambda()#1}>(unsigned long long, Uart::Receive(unsigned long)::{lambda()#1})+0x42>
    timeout_time = kMaxWait;
   14db4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   14db8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   14dbc:	e9cd 3406 	strd	r3, r4, [sp, #24]
   14dc0:	e00b      	b.n	14dda <Status Wait<Uart::Receive(unsigned long)::{lambda()#1}>(unsigned long long, Uart::Receive(unsigned long)::{lambda()#1})+0x5a>
    timeout_time = Milliseconds() + timeout;
   14dc2:	f7fb fb83 	bl	104cc <Milliseconds()>
   14dc6:	460a      	mov	r2, r1
   14dc8:	4601      	mov	r1, r0
   14dca:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
   14dce:	eb13 0b01 	adds.w	fp, r3, r1
   14dd2:	eb44 0c02 	adc.w	ip, r4, r2
   14dd6:	e9cd bc06 	strd	fp, ip, [sp, #24]
  Status status = Status::kTimedOut;
   14dda:	2301      	movs	r3, #1
   14ddc:	9305      	str	r3, [sp, #20]
  while (Milliseconds() < timeout_time)
   14dde:	f7fb fb75 	bl	104cc <Milliseconds()>
   14de2:	460a      	mov	r2, r1
   14de4:	4601      	mov	r1, r0
   14de6:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
   14dea:	42a2      	cmp	r2, r4
   14dec:	bf08      	it	eq
   14dee:	4299      	cmpeq	r1, r3
   14df0:	bf34      	ite	cc
   14df2:	2301      	movcc	r3, #1
   14df4:	2300      	movcs	r3, #0
   14df6:	b2db      	uxtb	r3, r3
   14df8:	2b00      	cmp	r3, #0
   14dfa:	d008      	beq.n	14e0e <Status Wait<Uart::Receive(unsigned long)::{lambda()#1}>(unsigned long long, Uart::Receive(unsigned long)::{lambda()#1})+0x8e>
    if (is_done())
   14dfc:	ab01      	add	r3, sp, #4
   14dfe:	4618      	mov	r0, r3
   14e00:	f7ff fb60 	bl	144c4 <Uart::Receive(unsigned long)::{lambda()#1}::operator()() const>
   14e04:	4603      	mov	r3, r0
   14e06:	2b00      	cmp	r3, #0
   14e08:	d0e9      	beq.n	14dde <Status Wait<Uart::Receive(unsigned long)::{lambda()#1}>(unsigned long long, Uart::Receive(unsigned long)::{lambda()#1})+0x5e>
      status = Status::kSuccess;
   14e0a:	2300      	movs	r3, #0
   14e0c:	9305      	str	r3, [sp, #20]
  return status;
   14e0e:	9c05      	ldr	r4, [sp, #20]
   14e10:	462b      	mov	r3, r5
   14e12:	4619      	mov	r1, r3
   14e14:	4803      	ldr	r0, [pc, #12]	; (14e24 <Status Wait<Uart::Receive(unsigned long)::{lambda()#1}>(unsigned long long, Uart::Receive(unsigned long)::{lambda()#1})+0xa4>)
   14e16:	f000 fb6f 	bl	154f8 <__cyg_profile_func_exit>
   14e1a:	4623      	mov	r3, r4
}
   14e1c:	4618      	mov	r0, r3
   14e1e:	b008      	add	sp, #32
   14e20:	e8bd 8830 	ldmia.w	sp!, {r4, r5, fp, pc}
   14e24:	00014d81 	.word	0x00014d81

00014e28 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)0>()>:
  static void ClearInterrupts()
   14e28:	b510      	push	{r4, lr}
   14e2a:	b082      	sub	sp, #8
   14e2c:	4674      	mov	r4, lr
   14e2e:	4623      	mov	r3, r4
   14e30:	4619      	mov	r1, r3
   14e32:	4823      	ldr	r0, [pc, #140]	; (14ec0 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)0>()+0x98>)
   14e34:	f000 fb4c 	bl	154d0 <__cyg_profile_func_enter>
    uint8_t channel = util::Value(port);
   14e38:	2300      	movs	r3, #0
   14e3a:	f88d 3007 	strb.w	r3, [sp, #7]
    tim_register[channel]->IR |= (1 << kRegMR0);
   14e3e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   14e42:	4a20      	ldr	r2, [pc, #128]	; (14ec4 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)0>()+0x9c>)
   14e44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14e48:	681a      	ldr	r2, [r3, #0]
   14e4a:	f89d 3007 	ldrb.w	r3, [sp, #7]
   14e4e:	491d      	ldr	r1, [pc, #116]	; (14ec4 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)0>()+0x9c>)
   14e50:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   14e54:	f042 0201 	orr.w	r2, r2, #1
   14e58:	601a      	str	r2, [r3, #0]
    tim_register[channel]->IR |= (1 << kRegMR1);
   14e5a:	f89d 3007 	ldrb.w	r3, [sp, #7]
   14e5e:	4a19      	ldr	r2, [pc, #100]	; (14ec4 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)0>()+0x9c>)
   14e60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14e64:	681a      	ldr	r2, [r3, #0]
   14e66:	f89d 3007 	ldrb.w	r3, [sp, #7]
   14e6a:	4916      	ldr	r1, [pc, #88]	; (14ec4 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)0>()+0x9c>)
   14e6c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   14e70:	f042 0202 	orr.w	r2, r2, #2
   14e74:	601a      	str	r2, [r3, #0]
    tim_register[channel]->IR |= (1 << kRegMR2);
   14e76:	f89d 3007 	ldrb.w	r3, [sp, #7]
   14e7a:	4a12      	ldr	r2, [pc, #72]	; (14ec4 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)0>()+0x9c>)
   14e7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14e80:	681a      	ldr	r2, [r3, #0]
   14e82:	f89d 3007 	ldrb.w	r3, [sp, #7]
   14e86:	490f      	ldr	r1, [pc, #60]	; (14ec4 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)0>()+0x9c>)
   14e88:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   14e8c:	f042 0204 	orr.w	r2, r2, #4
   14e90:	601a      	str	r2, [r3, #0]
    tim_register[channel]->IR |= (1 << kRegMR3);
   14e92:	f89d 3007 	ldrb.w	r3, [sp, #7]
   14e96:	4a0b      	ldr	r2, [pc, #44]	; (14ec4 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)0>()+0x9c>)
   14e98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14e9c:	681a      	ldr	r2, [r3, #0]
   14e9e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   14ea2:	4908      	ldr	r1, [pc, #32]	; (14ec4 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)0>()+0x9c>)
   14ea4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   14ea8:	f042 0208 	orr.w	r2, r2, #8
   14eac:	601a      	str	r2, [r3, #0]
   14eae:	4623      	mov	r3, r4
   14eb0:	4619      	mov	r1, r3
   14eb2:	4803      	ldr	r0, [pc, #12]	; (14ec0 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)0>()+0x98>)
   14eb4:	f000 fb20 	bl	154f8 <__cyg_profile_func_exit>
  }
   14eb8:	bf00      	nop
   14eba:	b002      	add	sp, #8
   14ebc:	bd10      	pop	{r4, pc}
   14ebe:	bf00      	nop
   14ec0:	00014e29 	.word	0x00014e29
   14ec4:	10000384 	.word	0x10000384

00014ec8 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)1>()>:
  static void ClearInterrupts()
   14ec8:	b510      	push	{r4, lr}
   14eca:	b082      	sub	sp, #8
   14ecc:	4674      	mov	r4, lr
   14ece:	4623      	mov	r3, r4
   14ed0:	4619      	mov	r1, r3
   14ed2:	4823      	ldr	r0, [pc, #140]	; (14f60 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)1>()+0x98>)
   14ed4:	f000 fafc 	bl	154d0 <__cyg_profile_func_enter>
    uint8_t channel = util::Value(port);
   14ed8:	2301      	movs	r3, #1
   14eda:	f88d 3007 	strb.w	r3, [sp, #7]
    tim_register[channel]->IR |= (1 << kRegMR0);
   14ede:	f89d 3007 	ldrb.w	r3, [sp, #7]
   14ee2:	4a20      	ldr	r2, [pc, #128]	; (14f64 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)1>()+0x9c>)
   14ee4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14ee8:	681a      	ldr	r2, [r3, #0]
   14eea:	f89d 3007 	ldrb.w	r3, [sp, #7]
   14eee:	491d      	ldr	r1, [pc, #116]	; (14f64 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)1>()+0x9c>)
   14ef0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   14ef4:	f042 0201 	orr.w	r2, r2, #1
   14ef8:	601a      	str	r2, [r3, #0]
    tim_register[channel]->IR |= (1 << kRegMR1);
   14efa:	f89d 3007 	ldrb.w	r3, [sp, #7]
   14efe:	4a19      	ldr	r2, [pc, #100]	; (14f64 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)1>()+0x9c>)
   14f00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14f04:	681a      	ldr	r2, [r3, #0]
   14f06:	f89d 3007 	ldrb.w	r3, [sp, #7]
   14f0a:	4916      	ldr	r1, [pc, #88]	; (14f64 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)1>()+0x9c>)
   14f0c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   14f10:	f042 0202 	orr.w	r2, r2, #2
   14f14:	601a      	str	r2, [r3, #0]
    tim_register[channel]->IR |= (1 << kRegMR2);
   14f16:	f89d 3007 	ldrb.w	r3, [sp, #7]
   14f1a:	4a12      	ldr	r2, [pc, #72]	; (14f64 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)1>()+0x9c>)
   14f1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14f20:	681a      	ldr	r2, [r3, #0]
   14f22:	f89d 3007 	ldrb.w	r3, [sp, #7]
   14f26:	490f      	ldr	r1, [pc, #60]	; (14f64 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)1>()+0x9c>)
   14f28:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   14f2c:	f042 0204 	orr.w	r2, r2, #4
   14f30:	601a      	str	r2, [r3, #0]
    tim_register[channel]->IR |= (1 << kRegMR3);
   14f32:	f89d 3007 	ldrb.w	r3, [sp, #7]
   14f36:	4a0b      	ldr	r2, [pc, #44]	; (14f64 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)1>()+0x9c>)
   14f38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14f3c:	681a      	ldr	r2, [r3, #0]
   14f3e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   14f42:	4908      	ldr	r1, [pc, #32]	; (14f64 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)1>()+0x9c>)
   14f44:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   14f48:	f042 0208 	orr.w	r2, r2, #8
   14f4c:	601a      	str	r2, [r3, #0]
   14f4e:	4623      	mov	r3, r4
   14f50:	4619      	mov	r1, r3
   14f52:	4803      	ldr	r0, [pc, #12]	; (14f60 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)1>()+0x98>)
   14f54:	f000 fad0 	bl	154f8 <__cyg_profile_func_exit>
  }
   14f58:	bf00      	nop
   14f5a:	b002      	add	sp, #8
   14f5c:	bd10      	pop	{r4, pc}
   14f5e:	bf00      	nop
   14f60:	00014ec9 	.word	0x00014ec9
   14f64:	10000384 	.word	0x10000384

00014f68 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)2>()>:
  static void ClearInterrupts()
   14f68:	b510      	push	{r4, lr}
   14f6a:	b082      	sub	sp, #8
   14f6c:	4674      	mov	r4, lr
   14f6e:	4623      	mov	r3, r4
   14f70:	4619      	mov	r1, r3
   14f72:	4823      	ldr	r0, [pc, #140]	; (15000 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)2>()+0x98>)
   14f74:	f000 faac 	bl	154d0 <__cyg_profile_func_enter>
    uint8_t channel = util::Value(port);
   14f78:	2302      	movs	r3, #2
   14f7a:	f88d 3007 	strb.w	r3, [sp, #7]
    tim_register[channel]->IR |= (1 << kRegMR0);
   14f7e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   14f82:	4a20      	ldr	r2, [pc, #128]	; (15004 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)2>()+0x9c>)
   14f84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14f88:	681a      	ldr	r2, [r3, #0]
   14f8a:	f89d 3007 	ldrb.w	r3, [sp, #7]
   14f8e:	491d      	ldr	r1, [pc, #116]	; (15004 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)2>()+0x9c>)
   14f90:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   14f94:	f042 0201 	orr.w	r2, r2, #1
   14f98:	601a      	str	r2, [r3, #0]
    tim_register[channel]->IR |= (1 << kRegMR1);
   14f9a:	f89d 3007 	ldrb.w	r3, [sp, #7]
   14f9e:	4a19      	ldr	r2, [pc, #100]	; (15004 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)2>()+0x9c>)
   14fa0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14fa4:	681a      	ldr	r2, [r3, #0]
   14fa6:	f89d 3007 	ldrb.w	r3, [sp, #7]
   14faa:	4916      	ldr	r1, [pc, #88]	; (15004 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)2>()+0x9c>)
   14fac:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   14fb0:	f042 0202 	orr.w	r2, r2, #2
   14fb4:	601a      	str	r2, [r3, #0]
    tim_register[channel]->IR |= (1 << kRegMR2);
   14fb6:	f89d 3007 	ldrb.w	r3, [sp, #7]
   14fba:	4a12      	ldr	r2, [pc, #72]	; (15004 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)2>()+0x9c>)
   14fbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14fc0:	681a      	ldr	r2, [r3, #0]
   14fc2:	f89d 3007 	ldrb.w	r3, [sp, #7]
   14fc6:	490f      	ldr	r1, [pc, #60]	; (15004 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)2>()+0x9c>)
   14fc8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   14fcc:	f042 0204 	orr.w	r2, r2, #4
   14fd0:	601a      	str	r2, [r3, #0]
    tim_register[channel]->IR |= (1 << kRegMR3);
   14fd2:	f89d 3007 	ldrb.w	r3, [sp, #7]
   14fd6:	4a0b      	ldr	r2, [pc, #44]	; (15004 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)2>()+0x9c>)
   14fd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14fdc:	681a      	ldr	r2, [r3, #0]
   14fde:	f89d 3007 	ldrb.w	r3, [sp, #7]
   14fe2:	4908      	ldr	r1, [pc, #32]	; (15004 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)2>()+0x9c>)
   14fe4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   14fe8:	f042 0208 	orr.w	r2, r2, #8
   14fec:	601a      	str	r2, [r3, #0]
   14fee:	4623      	mov	r3, r4
   14ff0:	4619      	mov	r1, r3
   14ff2:	4803      	ldr	r0, [pc, #12]	; (15000 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)2>()+0x98>)
   14ff4:	f000 fa80 	bl	154f8 <__cyg_profile_func_exit>
  }
   14ff8:	bf00      	nop
   14ffa:	b002      	add	sp, #8
   14ffc:	bd10      	pop	{r4, pc}
   14ffe:	bf00      	nop
   15000:	00014f69 	.word	0x00014f69
   15004:	10000384 	.word	0x10000384

00015008 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)3>()>:
  static void ClearInterrupts()
   15008:	b510      	push	{r4, lr}
   1500a:	b082      	sub	sp, #8
   1500c:	4674      	mov	r4, lr
   1500e:	4623      	mov	r3, r4
   15010:	4619      	mov	r1, r3
   15012:	4823      	ldr	r0, [pc, #140]	; (150a0 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)3>()+0x98>)
   15014:	f000 fa5c 	bl	154d0 <__cyg_profile_func_enter>
    uint8_t channel = util::Value(port);
   15018:	2303      	movs	r3, #3
   1501a:	f88d 3007 	strb.w	r3, [sp, #7]
    tim_register[channel]->IR |= (1 << kRegMR0);
   1501e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   15022:	4a20      	ldr	r2, [pc, #128]	; (150a4 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)3>()+0x9c>)
   15024:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15028:	681a      	ldr	r2, [r3, #0]
   1502a:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1502e:	491d      	ldr	r1, [pc, #116]	; (150a4 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)3>()+0x9c>)
   15030:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   15034:	f042 0201 	orr.w	r2, r2, #1
   15038:	601a      	str	r2, [r3, #0]
    tim_register[channel]->IR |= (1 << kRegMR1);
   1503a:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1503e:	4a19      	ldr	r2, [pc, #100]	; (150a4 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)3>()+0x9c>)
   15040:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15044:	681a      	ldr	r2, [r3, #0]
   15046:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1504a:	4916      	ldr	r1, [pc, #88]	; (150a4 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)3>()+0x9c>)
   1504c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   15050:	f042 0202 	orr.w	r2, r2, #2
   15054:	601a      	str	r2, [r3, #0]
    tim_register[channel]->IR |= (1 << kRegMR2);
   15056:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1505a:	4a12      	ldr	r2, [pc, #72]	; (150a4 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)3>()+0x9c>)
   1505c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15060:	681a      	ldr	r2, [r3, #0]
   15062:	f89d 3007 	ldrb.w	r3, [sp, #7]
   15066:	490f      	ldr	r1, [pc, #60]	; (150a4 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)3>()+0x9c>)
   15068:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   1506c:	f042 0204 	orr.w	r2, r2, #4
   15070:	601a      	str	r2, [r3, #0]
    tim_register[channel]->IR |= (1 << kRegMR3);
   15072:	f89d 3007 	ldrb.w	r3, [sp, #7]
   15076:	4a0b      	ldr	r2, [pc, #44]	; (150a4 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)3>()+0x9c>)
   15078:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1507c:	681a      	ldr	r2, [r3, #0]
   1507e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   15082:	4908      	ldr	r1, [pc, #32]	; (150a4 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)3>()+0x9c>)
   15084:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   15088:	f042 0208 	orr.w	r2, r2, #8
   1508c:	601a      	str	r2, [r3, #0]
   1508e:	4623      	mov	r3, r4
   15090:	4619      	mov	r1, r3
   15092:	4803      	ldr	r0, [pc, #12]	; (150a0 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)3>()+0x98>)
   15094:	f000 fa30 	bl	154f8 <__cyg_profile_func_exit>
  }
   15098:	bf00      	nop
   1509a:	b002      	add	sp, #8
   1509c:	bd10      	pop	{r4, pc}
   1509e:	bf00      	nop
   150a0:	00015009 	.word	0x00015009
   150a4:	10000384 	.word	0x10000384

000150a8 <__static_initialization_and_destruction_0(int, int)>:
#pragma GCC diagnostic pop
    // main() shouldn't return, but if it does, we'll just enter an infinite
    // loop
    Halt();
  }
}
   150a8:	b082      	sub	sp, #8
   150aa:	9001      	str	r0, [sp, #4]
   150ac:	9100      	str	r1, [sp, #0]
   150ae:	9b01      	ldr	r3, [sp, #4]
   150b0:	2b01      	cmp	r3, #1
   150b2:	d15d      	bne.n	15170 <__static_initialization_and_destruction_0(int, int)+0xc8>
   150b4:	9b00      	ldr	r3, [sp, #0]
   150b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
   150ba:	4293      	cmp	r3, r2
   150bc:	d158      	bne.n	15170 <__static_initialization_and_destruction_0(int, int)+0xc8>
  inline static volatile uint32_t * match[4][4] = {
   150be:	4b2e      	ldr	r3, [pc, #184]	; (15178 <__static_initialization_and_destruction_0(int, int)+0xd0>)
   150c0:	681b      	ldr	r3, [r3, #0]
   150c2:	f003 0301 	and.w	r3, r3, #1
   150c6:	2b00      	cmp	r3, #0
   150c8:	d152      	bne.n	15170 <__static_initialization_and_destruction_0(int, int)+0xc8>
   150ca:	4b2b      	ldr	r3, [pc, #172]	; (15178 <__static_initialization_and_destruction_0(int, int)+0xd0>)
   150cc:	2201      	movs	r2, #1
   150ce:	601a      	str	r2, [r3, #0]
    [kTimer0] = { &tim_register[0]->MR0, &tim_register[0]->MR1,
   150d0:	4b2a      	ldr	r3, [pc, #168]	; (1517c <__static_initialization_and_destruction_0(int, int)+0xd4>)
   150d2:	681b      	ldr	r3, [r3, #0]
   150d4:	3318      	adds	r3, #24
  };
   150d6:	4a2a      	ldr	r2, [pc, #168]	; (15180 <__static_initialization_and_destruction_0(int, int)+0xd8>)
   150d8:	6013      	str	r3, [r2, #0]
    [kTimer0] = { &tim_register[0]->MR0, &tim_register[0]->MR1,
   150da:	4b28      	ldr	r3, [pc, #160]	; (1517c <__static_initialization_and_destruction_0(int, int)+0xd4>)
   150dc:	681b      	ldr	r3, [r3, #0]
   150de:	331c      	adds	r3, #28
  };
   150e0:	4a27      	ldr	r2, [pc, #156]	; (15180 <__static_initialization_and_destruction_0(int, int)+0xd8>)
   150e2:	6053      	str	r3, [r2, #4]
                  &tim_register[0]->MR2, &tim_register[0]->MR3 },
   150e4:	4b25      	ldr	r3, [pc, #148]	; (1517c <__static_initialization_and_destruction_0(int, int)+0xd4>)
   150e6:	681b      	ldr	r3, [r3, #0]
   150e8:	3320      	adds	r3, #32
  };
   150ea:	4a25      	ldr	r2, [pc, #148]	; (15180 <__static_initialization_and_destruction_0(int, int)+0xd8>)
   150ec:	6093      	str	r3, [r2, #8]
                  &tim_register[0]->MR2, &tim_register[0]->MR3 },
   150ee:	4b23      	ldr	r3, [pc, #140]	; (1517c <__static_initialization_and_destruction_0(int, int)+0xd4>)
   150f0:	681b      	ldr	r3, [r3, #0]
   150f2:	3324      	adds	r3, #36	; 0x24
  };
   150f4:	4a22      	ldr	r2, [pc, #136]	; (15180 <__static_initialization_and_destruction_0(int, int)+0xd8>)
   150f6:	60d3      	str	r3, [r2, #12]
    [kTimer1] = { &tim_register[1]->MR0, &tim_register[1]->MR1,
   150f8:	4b20      	ldr	r3, [pc, #128]	; (1517c <__static_initialization_and_destruction_0(int, int)+0xd4>)
   150fa:	685b      	ldr	r3, [r3, #4]
   150fc:	3318      	adds	r3, #24
  };
   150fe:	4a20      	ldr	r2, [pc, #128]	; (15180 <__static_initialization_and_destruction_0(int, int)+0xd8>)
   15100:	6113      	str	r3, [r2, #16]
    [kTimer1] = { &tim_register[1]->MR0, &tim_register[1]->MR1,
   15102:	4b1e      	ldr	r3, [pc, #120]	; (1517c <__static_initialization_and_destruction_0(int, int)+0xd4>)
   15104:	685b      	ldr	r3, [r3, #4]
   15106:	331c      	adds	r3, #28
  };
   15108:	4a1d      	ldr	r2, [pc, #116]	; (15180 <__static_initialization_and_destruction_0(int, int)+0xd8>)
   1510a:	6153      	str	r3, [r2, #20]
                  &tim_register[1]->MR2, &tim_register[1]->MR3 },
   1510c:	4b1b      	ldr	r3, [pc, #108]	; (1517c <__static_initialization_and_destruction_0(int, int)+0xd4>)
   1510e:	685b      	ldr	r3, [r3, #4]
   15110:	3320      	adds	r3, #32
  };
   15112:	4a1b      	ldr	r2, [pc, #108]	; (15180 <__static_initialization_and_destruction_0(int, int)+0xd8>)
   15114:	6193      	str	r3, [r2, #24]
                  &tim_register[1]->MR2, &tim_register[1]->MR3 },
   15116:	4b19      	ldr	r3, [pc, #100]	; (1517c <__static_initialization_and_destruction_0(int, int)+0xd4>)
   15118:	685b      	ldr	r3, [r3, #4]
   1511a:	3324      	adds	r3, #36	; 0x24
  };
   1511c:	4a18      	ldr	r2, [pc, #96]	; (15180 <__static_initialization_and_destruction_0(int, int)+0xd8>)
   1511e:	61d3      	str	r3, [r2, #28]
    [kTimer2] = { &tim_register[2]->MR0, &tim_register[2]->MR1,
   15120:	4b16      	ldr	r3, [pc, #88]	; (1517c <__static_initialization_and_destruction_0(int, int)+0xd4>)
   15122:	689b      	ldr	r3, [r3, #8]
   15124:	3318      	adds	r3, #24
  };
   15126:	4a16      	ldr	r2, [pc, #88]	; (15180 <__static_initialization_and_destruction_0(int, int)+0xd8>)
   15128:	6213      	str	r3, [r2, #32]
    [kTimer2] = { &tim_register[2]->MR0, &tim_register[2]->MR1,
   1512a:	4b14      	ldr	r3, [pc, #80]	; (1517c <__static_initialization_and_destruction_0(int, int)+0xd4>)
   1512c:	689b      	ldr	r3, [r3, #8]
   1512e:	331c      	adds	r3, #28
  };
   15130:	4a13      	ldr	r2, [pc, #76]	; (15180 <__static_initialization_and_destruction_0(int, int)+0xd8>)
   15132:	6253      	str	r3, [r2, #36]	; 0x24
                  &tim_register[2]->MR2, &tim_register[2]->MR3 },
   15134:	4b11      	ldr	r3, [pc, #68]	; (1517c <__static_initialization_and_destruction_0(int, int)+0xd4>)
   15136:	689b      	ldr	r3, [r3, #8]
   15138:	3320      	adds	r3, #32
  };
   1513a:	4a11      	ldr	r2, [pc, #68]	; (15180 <__static_initialization_and_destruction_0(int, int)+0xd8>)
   1513c:	6293      	str	r3, [r2, #40]	; 0x28
                  &tim_register[2]->MR2, &tim_register[2]->MR3 },
   1513e:	4b0f      	ldr	r3, [pc, #60]	; (1517c <__static_initialization_and_destruction_0(int, int)+0xd4>)
   15140:	689b      	ldr	r3, [r3, #8]
   15142:	3324      	adds	r3, #36	; 0x24
  };
   15144:	4a0e      	ldr	r2, [pc, #56]	; (15180 <__static_initialization_and_destruction_0(int, int)+0xd8>)
   15146:	62d3      	str	r3, [r2, #44]	; 0x2c
    [kTimer3] = { &tim_register[3]->MR0, &tim_register[3]->MR1,
   15148:	4b0c      	ldr	r3, [pc, #48]	; (1517c <__static_initialization_and_destruction_0(int, int)+0xd4>)
   1514a:	68db      	ldr	r3, [r3, #12]
   1514c:	3318      	adds	r3, #24
  };
   1514e:	4a0c      	ldr	r2, [pc, #48]	; (15180 <__static_initialization_and_destruction_0(int, int)+0xd8>)
   15150:	6313      	str	r3, [r2, #48]	; 0x30
    [kTimer3] = { &tim_register[3]->MR0, &tim_register[3]->MR1,
   15152:	4b0a      	ldr	r3, [pc, #40]	; (1517c <__static_initialization_and_destruction_0(int, int)+0xd4>)
   15154:	68db      	ldr	r3, [r3, #12]
   15156:	331c      	adds	r3, #28
  };
   15158:	4a09      	ldr	r2, [pc, #36]	; (15180 <__static_initialization_and_destruction_0(int, int)+0xd8>)
   1515a:	6353      	str	r3, [r2, #52]	; 0x34
                  &tim_register[3]->MR2, &tim_register[3]->MR3 }
   1515c:	4b07      	ldr	r3, [pc, #28]	; (1517c <__static_initialization_and_destruction_0(int, int)+0xd4>)
   1515e:	68db      	ldr	r3, [r3, #12]
   15160:	3320      	adds	r3, #32
  };
   15162:	4a07      	ldr	r2, [pc, #28]	; (15180 <__static_initialization_and_destruction_0(int, int)+0xd8>)
   15164:	6393      	str	r3, [r2, #56]	; 0x38
                  &tim_register[3]->MR2, &tim_register[3]->MR3 }
   15166:	4b05      	ldr	r3, [pc, #20]	; (1517c <__static_initialization_and_destruction_0(int, int)+0xd4>)
   15168:	68db      	ldr	r3, [r3, #12]
   1516a:	3324      	adds	r3, #36	; 0x24
  };
   1516c:	4a04      	ldr	r2, [pc, #16]	; (15180 <__static_initialization_and_destruction_0(int, int)+0xd8>)
   1516e:	63d3      	str	r3, [r2, #60]	; 0x3c
   15170:	bf00      	nop
   15172:	b002      	add	sp, #8
   15174:	4770      	bx	lr
   15176:	bf00      	nop
   15178:	10000ec4 	.word	0x10000ec4
   1517c:	10000384 	.word	0x10000384
   15180:	10000e74 	.word	0x10000e74

00015184 <_GLOBAL__sub_I_UptimeRTOS>:
   15184:	b508      	push	{r3, lr}
   15186:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1518a:	2001      	movs	r0, #1
   1518c:	f7ff ff8c 	bl	150a8 <__static_initialization_and_destruction_0(int, int)>
   15190:	bd08      	pop	{r3, pc}
   15192:	Address 0x0000000000015192 is out of bounds.


00015194 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
   15194:	b082      	sub	sp, #8
   15196:	4603      	mov	r3, r0
   15198:	f88d 3007 	strb.w	r3, [sp, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
   1519c:	f99d 3007 	ldrsb.w	r3, [sp, #7]
   151a0:	f003 021f 	and.w	r2, r3, #31
   151a4:	4905      	ldr	r1, [pc, #20]	; (151bc <NVIC_EnableIRQ+0x28>)
   151a6:	f99d 3007 	ldrsb.w	r3, [sp, #7]
   151aa:	095b      	lsrs	r3, r3, #5
   151ac:	2001      	movs	r0, #1
   151ae:	fa00 f202 	lsl.w	r2, r0, r2
   151b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   151b6:	bf00      	nop
   151b8:	b002      	add	sp, #8
   151ba:	4770      	bx	lr
   151bc:	e000e100 	.word	0xe000e100

000151c0 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
   151c0:	b082      	sub	sp, #8
   151c2:	4603      	mov	r3, r0
   151c4:	9100      	str	r1, [sp, #0]
   151c6:	f88d 3007 	strb.w	r3, [sp, #7]
  if ((int32_t)(IRQn) < 0)
   151ca:	f99d 3007 	ldrsb.w	r3, [sp, #7]
   151ce:	2b00      	cmp	r3, #0
   151d0:	da0c      	bge.n	151ec <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   151d2:	9b00      	ldr	r3, [sp, #0]
   151d4:	b2da      	uxtb	r2, r3
   151d6:	490d      	ldr	r1, [pc, #52]	; (1520c <NVIC_SetPriority+0x4c>)
   151d8:	f99d 3007 	ldrsb.w	r3, [sp, #7]
   151dc:	f003 030f 	and.w	r3, r3, #15
   151e0:	3b04      	subs	r3, #4
   151e2:	0152      	lsls	r2, r2, #5
   151e4:	b2d2      	uxtb	r2, r2
   151e6:	440b      	add	r3, r1
   151e8:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
   151ea:	e00b      	b.n	15204 <NVIC_SetPriority+0x44>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   151ec:	9b00      	ldr	r3, [sp, #0]
   151ee:	b2db      	uxtb	r3, r3
   151f0:	4a07      	ldr	r2, [pc, #28]	; (15210 <NVIC_SetPriority+0x50>)
   151f2:	f99d 1007 	ldrsb.w	r1, [sp, #7]
   151f6:	4608      	mov	r0, r1
   151f8:	015b      	lsls	r3, r3, #5
   151fa:	b2d9      	uxtb	r1, r3
   151fc:	1813      	adds	r3, r2, r0
   151fe:	460a      	mov	r2, r1
   15200:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
   15204:	bf00      	nop
   15206:	b002      	add	sp, #8
   15208:	4770      	bx	lr
   1520a:	bf00      	nop
   1520c:	e000ed00 	.word	0xe000ed00
   15210:	e000e100 	.word	0xe000e100

00015214 <InterruptLookupHandler>:
{
   15214:	b500      	push	{lr}
   15216:	b085      	sub	sp, #20
  uint8_t active_isr = (SCB->ICSR & 0xFF);
   15218:	4b12      	ldr	r3, [pc, #72]	; (15264 <InterruptLookupHandler+0x50>)
   1521a:	685b      	ldr	r3, [r3, #4]
   1521c:	f88d 300f 	strb.w	r3, [sp, #15]
  IsrPointer isr     = dynamic_isr_vector_table[active_isr];
   15220:	f89d 300f 	ldrb.w	r3, [sp, #15]
   15224:	4a10      	ldr	r2, [pc, #64]	; (15268 <InterruptLookupHandler+0x54>)
   15226:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1522a:	9302      	str	r3, [sp, #8]
  SJ2_ASSERT_FATAL(isr != InterruptLookupHandler,
   1522c:	9b02      	ldr	r3, [sp, #8]
   1522e:	4a0f      	ldr	r2, [pc, #60]	; (1526c <InterruptLookupHandler+0x58>)
   15230:	4293      	cmp	r3, r2
   15232:	d110      	bne.n	15256 <InterruptLookupHandler+0x42>
   15234:	f89d 300f 	ldrb.w	r3, [sp, #15]
   15238:	9300      	str	r3, [sp, #0]
   1523a:	23dd      	movs	r3, #221	; 0xdd
   1523c:	4a0c      	ldr	r2, [pc, #48]	; (15270 <InterruptLookupHandler+0x5c>)
   1523e:	490d      	ldr	r1, [pc, #52]	; (15274 <InterruptLookupHandler+0x60>)
   15240:	480d      	ldr	r0, [pc, #52]	; (15278 <InterruptLookupHandler+0x64>)
   15242:	f001 fb9f 	bl	16984 <printf>
   15246:	480d      	ldr	r0, [pc, #52]	; (1527c <InterruptLookupHandler+0x68>)
   15248:	f000 f912 	bl	15470 <puts>
   1524c:	2100      	movs	r1, #0
   1524e:	2001      	movs	r0, #1
   15250:	f7fb fdca 	bl	10de8 <debug::PrintBacktrace(bool, void*)>
   15254:	e7fe      	b.n	15254 <InterruptLookupHandler+0x40>
  isr();
   15256:	9b02      	ldr	r3, [sp, #8]
   15258:	4798      	blx	r3
}
   1525a:	bf00      	nop
   1525c:	b005      	add	sp, #20
   1525e:	f85d fb04 	ldr.w	pc, [sp], #4
   15262:	bf00      	nop
   15264:	e000ed00 	.word	0xe000ed00
   15268:	10000410 	.word	0x10000410
   1526c:	00015215 	.word	0x00015215
   15270:	00019790 	.word	0x00019790
   15274:	00019780 	.word	0x00019780
   15278:	00019624 	.word	0x00019624
   1527c:	000196d0 	.word	0x000196d0

00015280 <RegisterIsr(IRQn, void (*)(), bool, long)>:
{
   15280:	b500      	push	{lr}
   15282:	b085      	sub	sp, #20
   15284:	9102      	str	r1, [sp, #8]
   15286:	9301      	str	r3, [sp, #4]
   15288:	4603      	mov	r3, r0
   1528a:	f88d 300f 	strb.w	r3, [sp, #15]
   1528e:	4613      	mov	r3, r2
   15290:	f88d 300e 	strb.w	r3, [sp, #14]
  dynamic_isr_vector_table[irq + kIrqOffset] = isr;
   15294:	f99d 300f 	ldrsb.w	r3, [sp, #15]
   15298:	3310      	adds	r3, #16
   1529a:	490f      	ldr	r1, [pc, #60]	; (152d8 <RegisterIsr(IRQn, void (*)(), bool, long)+0x58>)
   1529c:	9a02      	ldr	r2, [sp, #8]
   1529e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  if (enable_interrupt && irq >= 0)
   152a2:	f89d 300e 	ldrb.w	r3, [sp, #14]
   152a6:	2b00      	cmp	r3, #0
   152a8:	d008      	beq.n	152bc <RegisterIsr(IRQn, void (*)(), bool, long)+0x3c>
   152aa:	f99d 300f 	ldrsb.w	r3, [sp, #15]
   152ae:	2b00      	cmp	r3, #0
   152b0:	db04      	blt.n	152bc <RegisterIsr(IRQn, void (*)(), bool, long)+0x3c>
    NVIC_EnableIRQ(irq);
   152b2:	f99d 300f 	ldrsb.w	r3, [sp, #15]
   152b6:	4618      	mov	r0, r3
   152b8:	f7ff ff6c 	bl	15194 <NVIC_EnableIRQ>
  if (priority > -1)
   152bc:	9b01      	ldr	r3, [sp, #4]
   152be:	2b00      	cmp	r3, #0
   152c0:	db06      	blt.n	152d0 <RegisterIsr(IRQn, void (*)(), bool, long)+0x50>
    NVIC_SetPriority(irq, priority);
   152c2:	9a01      	ldr	r2, [sp, #4]
   152c4:	f99d 300f 	ldrsb.w	r3, [sp, #15]
   152c8:	4611      	mov	r1, r2
   152ca:	4618      	mov	r0, r3
   152cc:	f7ff ff78 	bl	151c0 <NVIC_SetPriority>
}
   152d0:	bf00      	nop
   152d2:	b005      	add	sp, #20
   152d4:	f85d fb04 	ldr.w	pc, [sp], #4
   152d8:	10000410 	.word	0x10000410

000152dc <GetRegistersFromStack>:
{
   152dc:	b500      	push	{lr}
   152de:	b08d      	sub	sp, #52	; 0x34
   152e0:	9003      	str	r0, [sp, #12]
  volatile uint32_t r0  = fault_stack_address[0];
   152e2:	9b03      	ldr	r3, [sp, #12]
   152e4:	681b      	ldr	r3, [r3, #0]
   152e6:	930b      	str	r3, [sp, #44]	; 0x2c
  volatile uint32_t r1  = fault_stack_address[1];
   152e8:	9b03      	ldr	r3, [sp, #12]
   152ea:	685b      	ldr	r3, [r3, #4]
   152ec:	930a      	str	r3, [sp, #40]	; 0x28
  volatile uint32_t r2  = fault_stack_address[2];
   152ee:	9b03      	ldr	r3, [sp, #12]
   152f0:	689b      	ldr	r3, [r3, #8]
   152f2:	9309      	str	r3, [sp, #36]	; 0x24
  volatile uint32_t r3  = fault_stack_address[3];
   152f4:	9b03      	ldr	r3, [sp, #12]
   152f6:	68db      	ldr	r3, [r3, #12]
   152f8:	9308      	str	r3, [sp, #32]
  volatile uint32_t r12 = fault_stack_address[4];
   152fa:	9b03      	ldr	r3, [sp, #12]
   152fc:	691b      	ldr	r3, [r3, #16]
   152fe:	9307      	str	r3, [sp, #28]
  volatile uint32_t lr = fault_stack_address[5];
   15300:	9b03      	ldr	r3, [sp, #12]
   15302:	695b      	ldr	r3, [r3, #20]
   15304:	9306      	str	r3, [sp, #24]
  volatile uint32_t pc = fault_stack_address[6];
   15306:	9b03      	ldr	r3, [sp, #12]
   15308:	699b      	ldr	r3, [r3, #24]
   1530a:	9305      	str	r3, [sp, #20]
  volatile uint32_t psr = fault_stack_address[7];
   1530c:	9b03      	ldr	r3, [sp, #12]
   1530e:	69db      	ldr	r3, [r3, #28]
   15310:	9304      	str	r3, [sp, #16]
  printf(SJ2_BACKGROUND_RED "Hard Fault Exception Occurred!\n" SJ2_COLOR_RESET);
   15312:	480d      	ldr	r0, [pc, #52]	; (15348 <GetRegistersFromStack+0x6c>)
   15314:	f001 fb36 	bl	16984 <printf>
  printf("r0: 0x%08" PRIX32 ", r1: 0x%08" PRIX32
   15318:	990b      	ldr	r1, [sp, #44]	; 0x2c
   1531a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1531c:	9809      	ldr	r0, [sp, #36]	; 0x24
   1531e:	9b08      	ldr	r3, [sp, #32]
   15320:	9300      	str	r3, [sp, #0]
   15322:	4603      	mov	r3, r0
   15324:	4809      	ldr	r0, [pc, #36]	; (1534c <GetRegistersFromStack+0x70>)
   15326:	f001 fb2d 	bl	16984 <printf>
  printf("r12: 0x%08" PRIX32 ", lr: 0x%08" PRIX32
   1532a:	9907      	ldr	r1, [sp, #28]
   1532c:	9a06      	ldr	r2, [sp, #24]
   1532e:	9805      	ldr	r0, [sp, #20]
   15330:	9b04      	ldr	r3, [sp, #16]
   15332:	9300      	str	r3, [sp, #0]
   15334:	4603      	mov	r3, r0
   15336:	4806      	ldr	r0, [pc, #24]	; (15350 <GetRegistersFromStack+0x74>)
   15338:	f001 fb24 	bl	16984 <printf>
  debug::PrintBacktrace(true, reinterpret_cast<void *>(pc));
   1533c:	9b05      	ldr	r3, [sp, #20]
   1533e:	4619      	mov	r1, r3
   15340:	2001      	movs	r0, #1
   15342:	f7fb fd51 	bl	10de8 <debug::PrintBacktrace(bool, void*)>
   15346:	e7fe      	b.n	15346 <GetRegistersFromStack+0x6a>
   15348:	000196e8 	.word	0x000196e8
   1534c:	00019714 	.word	0x00019714
   15350:	00019748 	.word	0x00019748

00015354 <FirmwareStdOut(int)>:
}
Stdout out = HostWrite;
Stdin in   = HostRead;
#else
int FirmwareStdOut(int data)
{
   15354:	b530      	push	{r4, r5, lr}
   15356:	b083      	sub	sp, #12
   15358:	4675      	mov	r5, lr
   1535a:	9001      	str	r0, [sp, #4]
   1535c:	462b      	mov	r3, r5
   1535e:	4619      	mov	r1, r3
   15360:	4809      	ldr	r0, [pc, #36]	; (15388 <FirmwareStdOut(int)+0x34>)
   15362:	f000 f8b5 	bl	154d0 <__cyg_profile_func_enter>
  uart0.Send(static_cast<uint8_t>(data));
   15366:	9b01      	ldr	r3, [sp, #4]
   15368:	b2db      	uxtb	r3, r3
   1536a:	4619      	mov	r1, r3
   1536c:	4807      	ldr	r0, [pc, #28]	; (1538c <FirmwareStdOut(int)+0x38>)
   1536e:	f7ff f835 	bl	143dc <Uart::Send(unsigned char)>
  return 1;
   15372:	2401      	movs	r4, #1
   15374:	462b      	mov	r3, r5
   15376:	4619      	mov	r1, r3
   15378:	4803      	ldr	r0, [pc, #12]	; (15388 <FirmwareStdOut(int)+0x34>)
   1537a:	f000 f8bd 	bl	154f8 <__cyg_profile_func_exit>
   1537e:	4623      	mov	r3, r4
}
   15380:	4618      	mov	r0, r3
   15382:	b003      	add	sp, #12
   15384:	bd30      	pop	{r4, r5, pc}
   15386:	bf00      	nop
   15388:	00015355 	.word	0x00015355
   1538c:	100003e4 	.word	0x100003e4

00015390 <_exit>:
  }
  // Dummy implementation of exit with return code placed into
  // Arm register r3
  // NOLINTNEXTLINE(readability-identifier-naming)
  void _exit([[maybe_unused]] int rc)
  {
   15390:	b500      	push	{lr}
   15392:	b083      	sub	sp, #12
   15394:	4673      	mov	r3, lr
   15396:	9001      	str	r0, [sp, #4]
   15398:	4619      	mov	r1, r3
   1539a:	4802      	ldr	r0, [pc, #8]	; (153a4 <_exit+0x14>)
   1539c:	f000 f898 	bl	154d0 <__cyg_profile_func_enter>
    while (1)
    {
      continue;
   153a0:	bf00      	nop
    while (1)
   153a2:	e7fd      	b.n	153a0 <_exit+0x10>
   153a4:	00015391 	.word	0x00015391

000153a8 <_getpid>:
    }
  }
  // Dummy implementation of getpid
  // NOLINTNEXTLINE(readability-identifier-naming)
  int _getpid()
  {
   153a8:	b538      	push	{r3, r4, r5, lr}
   153aa:	4675      	mov	r5, lr
   153ac:	462b      	mov	r3, r5
   153ae:	4619      	mov	r1, r3
   153b0:	4805      	ldr	r0, [pc, #20]	; (153c8 <_getpid+0x20>)
   153b2:	f000 f88d 	bl	154d0 <__cyg_profile_func_enter>
    return 1;
   153b6:	2401      	movs	r4, #1
   153b8:	462b      	mov	r3, r5
   153ba:	4619      	mov	r1, r3
   153bc:	4802      	ldr	r0, [pc, #8]	; (153c8 <_getpid+0x20>)
   153be:	f000 f89b 	bl	154f8 <__cyg_profile_func_exit>
   153c2:	4623      	mov	r3, r4
  }
   153c4:	4618      	mov	r0, r3
   153c6:	bd38      	pop	{r3, r4, r5, pc}
   153c8:	000153a9 	.word	0x000153a9

000153cc <_kill>:
  // Dummy implementation of kill
  // NOLINTNEXTLINE(readability-identifier-naming)
  int _kill(int, int)
  {
   153cc:	b530      	push	{r4, r5, lr}
   153ce:	b083      	sub	sp, #12
   153d0:	4675      	mov	r5, lr
   153d2:	9001      	str	r0, [sp, #4]
   153d4:	9100      	str	r1, [sp, #0]
   153d6:	462b      	mov	r3, r5
   153d8:	4619      	mov	r1, r3
   153da:	4807      	ldr	r0, [pc, #28]	; (153f8 <_kill+0x2c>)
   153dc:	f000 f878 	bl	154d0 <__cyg_profile_func_enter>
    return -1;
   153e0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   153e4:	462b      	mov	r3, r5
   153e6:	4619      	mov	r1, r3
   153e8:	4803      	ldr	r0, [pc, #12]	; (153f8 <_kill+0x2c>)
   153ea:	f000 f885 	bl	154f8 <__cyg_profile_func_exit>
   153ee:	4623      	mov	r3, r4
  }
   153f0:	4618      	mov	r0, r3
   153f2:	b003      	add	sp, #12
   153f4:	bd30      	pop	{r4, r5, pc}
   153f6:	bf00      	nop
   153f8:	000153cd 	.word	0x000153cd

000153fc <_putchar>:
    }
    return length;
  }
  // Needed by third party printf library
  void _putchar(char character)  // NOLINT
  {
   153fc:	b510      	push	{r4, lr}
   153fe:	b082      	sub	sp, #8
   15400:	4674      	mov	r4, lr
   15402:	4603      	mov	r3, r0
   15404:	f88d 3007 	strb.w	r3, [sp, #7]
   15408:	4623      	mov	r3, r4
   1540a:	4619      	mov	r1, r3
   1540c:	4808      	ldr	r0, [pc, #32]	; (15430 <_putchar+0x34>)
   1540e:	f000 f85f 	bl	154d0 <__cyg_profile_func_enter>
    out(character);
   15412:	4b08      	ldr	r3, [pc, #32]	; (15434 <_putchar+0x38>)
   15414:	681b      	ldr	r3, [r3, #0]
   15416:	f89d 2007 	ldrb.w	r2, [sp, #7]
   1541a:	4610      	mov	r0, r2
   1541c:	4798      	blx	r3
   1541e:	4623      	mov	r3, r4
   15420:	4619      	mov	r1, r3
   15422:	4803      	ldr	r0, [pc, #12]	; (15430 <_putchar+0x34>)
   15424:	f000 f868 	bl	154f8 <__cyg_profile_func_exit>
  }
   15428:	bf00      	nop
   1542a:	b002      	add	sp, #8
   1542c:	bd10      	pop	{r4, pc}
   1542e:	bf00      	nop
   15430:	000153fd 	.word	0x000153fd
   15434:	100004f4 	.word	0x100004f4

00015438 <putchar>:

  // Overload default libnano putchar() with a more optimal version that does
  // not use dynamic memory
  int putchar(int character)  // NOLINT
  {
   15438:	b530      	push	{r4, r5, lr}
   1543a:	b083      	sub	sp, #12
   1543c:	4674      	mov	r4, lr
   1543e:	9001      	str	r0, [sp, #4]
   15440:	4623      	mov	r3, r4
   15442:	4619      	mov	r1, r3
   15444:	4808      	ldr	r0, [pc, #32]	; (15468 <putchar+0x30>)
   15446:	f000 f843 	bl	154d0 <__cyg_profile_func_enter>
    return out(character);
   1544a:	4b08      	ldr	r3, [pc, #32]	; (1546c <putchar+0x34>)
   1544c:	681b      	ldr	r3, [r3, #0]
   1544e:	9801      	ldr	r0, [sp, #4]
   15450:	4798      	blx	r3
   15452:	4605      	mov	r5, r0
   15454:	4623      	mov	r3, r4
   15456:	4619      	mov	r1, r3
   15458:	4803      	ldr	r0, [pc, #12]	; (15468 <putchar+0x30>)
   1545a:	f000 f84d 	bl	154f8 <__cyg_profile_func_exit>
   1545e:	462b      	mov	r3, r5
  }
   15460:	4618      	mov	r0, r3
   15462:	b003      	add	sp, #12
   15464:	bd30      	pop	{r4, r5, pc}
   15466:	bf00      	nop
   15468:	00015439 	.word	0x00015439
   1546c:	100004f4 	.word	0x100004f4

00015470 <puts>:

  // Overload default libnano puts() with a more optimal version that does
  // not use dynamic memory
  int puts(const char * str)  // NOLINT
  {
   15470:	b530      	push	{r4, r5, lr}
   15472:	b085      	sub	sp, #20
   15474:	4675      	mov	r5, lr
   15476:	9001      	str	r0, [sp, #4]
   15478:	462b      	mov	r3, r5
   1547a:	4619      	mov	r1, r3
   1547c:	4812      	ldr	r0, [pc, #72]	; (154c8 <puts+0x58>)
   1547e:	f000 f827 	bl	154d0 <__cyg_profile_func_enter>
    int i;
    for (i = 0; str[i] != '\0'; i++)
   15482:	2300      	movs	r3, #0
   15484:	9303      	str	r3, [sp, #12]
   15486:	9b03      	ldr	r3, [sp, #12]
   15488:	9a01      	ldr	r2, [sp, #4]
   1548a:	4413      	add	r3, r2
   1548c:	781b      	ldrb	r3, [r3, #0]
   1548e:	2b00      	cmp	r3, #0
   15490:	d00b      	beq.n	154aa <puts+0x3a>
    {
      out(str[i]);
   15492:	4b0e      	ldr	r3, [pc, #56]	; (154cc <puts+0x5c>)
   15494:	681b      	ldr	r3, [r3, #0]
   15496:	9a03      	ldr	r2, [sp, #12]
   15498:	9901      	ldr	r1, [sp, #4]
   1549a:	440a      	add	r2, r1
   1549c:	7812      	ldrb	r2, [r2, #0]
   1549e:	4610      	mov	r0, r2
   154a0:	4798      	blx	r3
    for (i = 0; str[i] != '\0'; i++)
   154a2:	9b03      	ldr	r3, [sp, #12]
   154a4:	3301      	adds	r3, #1
   154a6:	9303      	str	r3, [sp, #12]
   154a8:	e7ed      	b.n	15486 <puts+0x16>
    }
    out('\n');
   154aa:	4b08      	ldr	r3, [pc, #32]	; (154cc <puts+0x5c>)
   154ac:	681b      	ldr	r3, [r3, #0]
   154ae:	200a      	movs	r0, #10
   154b0:	4798      	blx	r3
    return i;
   154b2:	9c03      	ldr	r4, [sp, #12]
   154b4:	462b      	mov	r3, r5
   154b6:	4619      	mov	r1, r3
   154b8:	4803      	ldr	r0, [pc, #12]	; (154c8 <puts+0x58>)
   154ba:	f000 f81d 	bl	154f8 <__cyg_profile_func_exit>
   154be:	4623      	mov	r3, r4
  }
   154c0:	4618      	mov	r0, r3
   154c2:	b005      	add	sp, #20
   154c4:	bd30      	pop	{r4, r5, pc}
   154c6:	bf00      	nop
   154c8:	00015471 	.word	0x00015471
   154cc:	100004f4 	.word	0x100004f4

000154d0 <__cyg_profile_func_enter>:
  // =============================
  void * stack_trace[config::kBacktraceDepth] = { nullptr };
  size_t stack_depth = 0;

  void __cyg_profile_func_enter(void *, void * call_site)  // NOLINT
  {
   154d0:	b082      	sub	sp, #8
   154d2:	9001      	str	r0, [sp, #4]
   154d4:	9100      	str	r1, [sp, #0]
    stack_trace[stack_depth++] = call_site;
   154d6:	9a00      	ldr	r2, [sp, #0]
   154d8:	4b05      	ldr	r3, [pc, #20]	; (154f0 <__cyg_profile_func_enter+0x20>)
   154da:	681b      	ldr	r3, [r3, #0]
   154dc:	1c59      	adds	r1, r3, #1
   154de:	4804      	ldr	r0, [pc, #16]	; (154f0 <__cyg_profile_func_enter+0x20>)
   154e0:	6001      	str	r1, [r0, #0]
   154e2:	4904      	ldr	r1, [pc, #16]	; (154f4 <__cyg_profile_func_enter+0x24>)
   154e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
   154e8:	bf00      	nop
   154ea:	b002      	add	sp, #8
   154ec:	4770      	bx	lr
   154ee:	bf00      	nop
   154f0:	10000fc8 	.word	0x10000fc8
   154f4:	10000ec8 	.word	0x10000ec8

000154f8 <__cyg_profile_func_exit>:

  void __cyg_profile_func_exit(void *, void *)  // NOLINT
  {
   154f8:	b082      	sub	sp, #8
   154fa:	9001      	str	r0, [sp, #4]
   154fc:	9100      	str	r1, [sp, #0]
    stack_depth--;
   154fe:	4b04      	ldr	r3, [pc, #16]	; (15510 <__cyg_profile_func_exit+0x18>)
   15500:	681b      	ldr	r3, [r3, #0]
   15502:	3b01      	subs	r3, #1
   15504:	4a02      	ldr	r2, [pc, #8]	; (15510 <__cyg_profile_func_exit+0x18>)
   15506:	6013      	str	r3, [r2, #0]
  }
   15508:	bf00      	nop
   1550a:	b002      	add	sp, #8
   1550c:	4770      	bx	lr
   1550e:	bf00      	nop
   15510:	10000fc8 	.word	0x10000fc8

00015514 <GetStackTrace()>:
}

void ** GetStackTrace()
{
   15514:	b538      	push	{r3, r4, r5, lr}
   15516:	4675      	mov	r5, lr
   15518:	462b      	mov	r3, r5
   1551a:	4619      	mov	r1, r3
   1551c:	4805      	ldr	r0, [pc, #20]	; (15534 <GetStackTrace()+0x20>)
   1551e:	f7ff ffd7 	bl	154d0 <__cyg_profile_func_enter>
  return stack_trace;
   15522:	4c05      	ldr	r4, [pc, #20]	; (15538 <GetStackTrace()+0x24>)
   15524:	462b      	mov	r3, r5
   15526:	4619      	mov	r1, r3
   15528:	4802      	ldr	r0, [pc, #8]	; (15534 <GetStackTrace()+0x20>)
   1552a:	f7ff ffe5 	bl	154f8 <__cyg_profile_func_exit>
   1552e:	4623      	mov	r3, r4
}
   15530:	4618      	mov	r0, r3
   15532:	bd38      	pop	{r3, r4, r5, pc}
   15534:	00015515 	.word	0x00015515
   15538:	10000ec8 	.word	0x10000ec8

0001553c <GetStackDepth()>:

size_t GetStackDepth()
{
   1553c:	b538      	push	{r3, r4, r5, lr}
   1553e:	4675      	mov	r5, lr
   15540:	462b      	mov	r3, r5
   15542:	4619      	mov	r1, r3
   15544:	4806      	ldr	r0, [pc, #24]	; (15560 <GetStackDepth()+0x24>)
   15546:	f7ff ffc3 	bl	154d0 <__cyg_profile_func_enter>
  return stack_depth;
   1554a:	4b06      	ldr	r3, [pc, #24]	; (15564 <GetStackDepth()+0x28>)
   1554c:	681c      	ldr	r4, [r3, #0]
   1554e:	462b      	mov	r3, r5
   15550:	4619      	mov	r1, r3
   15552:	4803      	ldr	r0, [pc, #12]	; (15560 <GetStackDepth()+0x24>)
   15554:	f7ff ffd0 	bl	154f8 <__cyg_profile_func_exit>
   15558:	4623      	mov	r3, r4
}
   1555a:	4618      	mov	r0, r3
   1555c:	bd38      	pop	{r3, r4, r5, pc}
   1555e:	bf00      	nop
   15560:	0001553d 	.word	0x0001553d
   15564:	10000fc8 	.word	0x10000fc8

00015568 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
   15568:	b510      	push	{r4, lr}
   1556a:	b084      	sub	sp, #16
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
   1556c:	4b29      	ldr	r3, [pc, #164]	; (15614 <vTaskSwitchContext+0xac>)
   1556e:	681b      	ldr	r3, [r3, #0]
   15570:	2b00      	cmp	r3, #0
   15572:	d003      	beq.n	1557c <vTaskSwitchContext+0x14>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
   15574:	4b28      	ldr	r3, [pc, #160]	; (15618 <vTaskSwitchContext+0xb0>)
   15576:	2201      	movs	r2, #1
   15578:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
   1557a:	e047      	b.n	1560c <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
   1557c:	4b26      	ldr	r3, [pc, #152]	; (15618 <vTaskSwitchContext+0xb0>)
   1557e:	2200      	movs	r2, #0
   15580:	601a      	str	r2, [r3, #0]
					ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
   15582:	f7ff fa8d 	bl	14aa0 <UptimeRTOS>
   15586:	4603      	mov	r3, r0
   15588:	460c      	mov	r4, r1
   1558a:	461a      	mov	r2, r3
   1558c:	4b23      	ldr	r3, [pc, #140]	; (1561c <vTaskSwitchContext+0xb4>)
   1558e:	601a      	str	r2, [r3, #0]
				if( ulTotalRunTime > ulTaskSwitchedInTime )
   15590:	4b22      	ldr	r3, [pc, #136]	; (1561c <vTaskSwitchContext+0xb4>)
   15592:	681a      	ldr	r2, [r3, #0]
   15594:	4b22      	ldr	r3, [pc, #136]	; (15620 <vTaskSwitchContext+0xb8>)
   15596:	681b      	ldr	r3, [r3, #0]
   15598:	429a      	cmp	r2, r3
   1559a:	d909      	bls.n	155b0 <vTaskSwitchContext+0x48>
					pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
   1559c:	4b21      	ldr	r3, [pc, #132]	; (15624 <vTaskSwitchContext+0xbc>)
   1559e:	681b      	ldr	r3, [r3, #0]
   155a0:	6d59      	ldr	r1, [r3, #84]	; 0x54
   155a2:	4a1e      	ldr	r2, [pc, #120]	; (1561c <vTaskSwitchContext+0xb4>)
   155a4:	6810      	ldr	r0, [r2, #0]
   155a6:	4a1e      	ldr	r2, [pc, #120]	; (15620 <vTaskSwitchContext+0xb8>)
   155a8:	6812      	ldr	r2, [r2, #0]
   155aa:	1a82      	subs	r2, r0, r2
   155ac:	440a      	add	r2, r1
   155ae:	655a      	str	r2, [r3, #84]	; 0x54
				ulTaskSwitchedInTime = ulTotalRunTime;
   155b0:	4b1a      	ldr	r3, [pc, #104]	; (1561c <vTaskSwitchContext+0xb4>)
   155b2:	681b      	ldr	r3, [r3, #0]
   155b4:	4a1a      	ldr	r2, [pc, #104]	; (15620 <vTaskSwitchContext+0xb8>)
   155b6:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
   155b8:	4b1b      	ldr	r3, [pc, #108]	; (15628 <vTaskSwitchContext+0xc0>)
   155ba:	681b      	ldr	r3, [r3, #0]
   155bc:	9301      	str	r3, [sp, #4]
	/* Generic helper function. */
	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitmap )
	{
	uint8_t ucReturn;

		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
   155be:	9b01      	ldr	r3, [sp, #4]
   155c0:	fab3 f383 	clz	r3, r3
   155c4:	f88d 3003 	strb.w	r3, [sp, #3]
		return ucReturn;
   155c8:	f89d 3003 	ldrb.w	r3, [sp, #3]
   155cc:	f1c3 031f 	rsb	r3, r3, #31
   155d0:	9303      	str	r3, [sp, #12]
   155d2:	9a03      	ldr	r2, [sp, #12]
   155d4:	4613      	mov	r3, r2
   155d6:	009b      	lsls	r3, r3, #2
   155d8:	4413      	add	r3, r2
   155da:	009b      	lsls	r3, r3, #2
   155dc:	4a13      	ldr	r2, [pc, #76]	; (1562c <vTaskSwitchContext+0xc4>)
   155de:	4413      	add	r3, r2
   155e0:	9302      	str	r3, [sp, #8]
   155e2:	9b02      	ldr	r3, [sp, #8]
   155e4:	685b      	ldr	r3, [r3, #4]
   155e6:	685a      	ldr	r2, [r3, #4]
   155e8:	9b02      	ldr	r3, [sp, #8]
   155ea:	605a      	str	r2, [r3, #4]
   155ec:	9b02      	ldr	r3, [sp, #8]
   155ee:	685a      	ldr	r2, [r3, #4]
   155f0:	9b02      	ldr	r3, [sp, #8]
   155f2:	3308      	adds	r3, #8
   155f4:	429a      	cmp	r2, r3
   155f6:	d104      	bne.n	15602 <vTaskSwitchContext+0x9a>
   155f8:	9b02      	ldr	r3, [sp, #8]
   155fa:	685b      	ldr	r3, [r3, #4]
   155fc:	685a      	ldr	r2, [r3, #4]
   155fe:	9b02      	ldr	r3, [sp, #8]
   15600:	605a      	str	r2, [r3, #4]
   15602:	9b02      	ldr	r3, [sp, #8]
   15604:	685b      	ldr	r3, [r3, #4]
   15606:	68db      	ldr	r3, [r3, #12]
   15608:	4a06      	ldr	r2, [pc, #24]	; (15624 <vTaskSwitchContext+0xbc>)
   1560a:	6013      	str	r3, [r2, #0]
}
   1560c:	bf00      	nop
   1560e:	b004      	add	sp, #16
   15610:	bd10      	pop	{r4, pc}
   15612:	bf00      	nop
   15614:	1000103c 	.word	0x1000103c
   15618:	10001038 	.word	0x10001038
   1561c:	10001044 	.word	0x10001044
   15620:	10001040 	.word	0x10001040
   15624:	10000fcc 	.word	0x10000fcc
   15628:	10001034 	.word	0x10001034
   1562c:	10000fd0 	.word	0x10000fd0

00015630 <vPortSVCHandler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
   15630:	4b07      	ldr	r3, [pc, #28]	; (15650 <pxCurrentTCBConst2>)
   15632:	6819      	ldr	r1, [r3, #0]
   15634:	6808      	ldr	r0, [r1, #0]
   15636:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1563a:	f380 8809 	msr	PSP, r0
   1563e:	f3bf 8f6f 	isb	sy
   15642:	f04f 0000 	mov.w	r0, #0
   15646:	f380 8811 	msr	BASEPRI, r0
   1564a:	4770      	bx	lr
   1564c:	f3af 8000 	nop.w

00015650 <pxCurrentTCBConst2>:
   15650:	10000fcc 	.word	0x10000fcc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
   15654:	bf00      	nop
   15656:	bf00      	nop
   15658:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   1565c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

00015660 <xPortPendSVHandler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
   15660:	f3ef 8009 	mrs	r0, PSP
   15664:	f3bf 8f6f 	isb	sy
   15668:	4b15      	ldr	r3, [pc, #84]	; (156c0 <pxCurrentTCBConst>)
   1566a:	681a      	ldr	r2, [r3, #0]
   1566c:	f01e 0f10 	tst.w	lr, #16
   15670:	bf08      	it	eq
   15672:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
   15676:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1567a:	6010      	str	r0, [r2, #0]
   1567c:	e92d 0009 	stmdb	sp!, {r0, r3}
   15680:	f04f 0028 	mov.w	r0, #40	; 0x28
   15684:	f380 8811 	msr	BASEPRI, r0
   15688:	f3bf 8f4f 	dsb	sy
   1568c:	f3bf 8f6f 	isb	sy
   15690:	f7ff ff6a 	bl	15568 <vTaskSwitchContext>
   15694:	f04f 0000 	mov.w	r0, #0
   15698:	f380 8811 	msr	BASEPRI, r0
   1569c:	bc09      	pop	{r0, r3}
   1569e:	6819      	ldr	r1, [r3, #0]
   156a0:	6808      	ldr	r0, [r1, #0]
   156a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   156a6:	f01e 0f10 	tst.w	lr, #16
   156aa:	bf08      	it	eq
   156ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
   156b0:	f380 8809 	msr	PSP, r0
   156b4:	f3bf 8f6f 	isb	sy
   156b8:	4770      	bx	lr
   156ba:	bf00      	nop
   156bc:	f3af 8000 	nop.w

000156c0 <pxCurrentTCBConst>:
   156c0:	10000fcc 	.word	0x10000fcc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
   156c4:	bf00      	nop
   156c6:	bf00      	nop

000156c8 <_out_null(char, void*, unsigned int, unsigned int)>:
}


// internal null output
static inline void _out_null(char character, void* buffer, size_t idx, size_t maxlen)
{
   156c8:	b510      	push	{r4, lr}
   156ca:	b084      	sub	sp, #16
   156cc:	4674      	mov	r4, lr
   156ce:	9102      	str	r1, [sp, #8]
   156d0:	9201      	str	r2, [sp, #4]
   156d2:	9300      	str	r3, [sp, #0]
   156d4:	4603      	mov	r3, r0
   156d6:	f88d 300f 	strb.w	r3, [sp, #15]
   156da:	4623      	mov	r3, r4
   156dc:	4619      	mov	r1, r3
   156de:	4805      	ldr	r0, [pc, #20]	; (156f4 <_out_null(char, void*, unsigned int, unsigned int)+0x2c>)
   156e0:	f7ff fef6 	bl	154d0 <__cyg_profile_func_enter>
   156e4:	4623      	mov	r3, r4
   156e6:	4619      	mov	r1, r3
   156e8:	4802      	ldr	r0, [pc, #8]	; (156f4 <_out_null(char, void*, unsigned int, unsigned int)+0x2c>)
   156ea:	f7ff ff05 	bl	154f8 <__cyg_profile_func_exit>
  (void)character; (void)buffer; (void)idx; (void)maxlen;
}
   156ee:	bf00      	nop
   156f0:	b004      	add	sp, #16
   156f2:	bd10      	pop	{r4, pc}
   156f4:	000156c9 	.word	0x000156c9

000156f8 <_out_char(char, void*, unsigned int, unsigned int)>:


// internal _putchar wrapper
static inline void _out_char(char character, void* buffer, size_t idx, size_t maxlen)
{
   156f8:	b510      	push	{r4, lr}
   156fa:	b084      	sub	sp, #16
   156fc:	4674      	mov	r4, lr
   156fe:	9102      	str	r1, [sp, #8]
   15700:	9201      	str	r2, [sp, #4]
   15702:	9300      	str	r3, [sp, #0]
   15704:	4603      	mov	r3, r0
   15706:	f88d 300f 	strb.w	r3, [sp, #15]
   1570a:	4623      	mov	r3, r4
   1570c:	4619      	mov	r1, r3
   1570e:	480a      	ldr	r0, [pc, #40]	; (15738 <_out_char(char, void*, unsigned int, unsigned int)+0x40>)
   15710:	f7ff fede 	bl	154d0 <__cyg_profile_func_enter>
  (void)buffer; (void)idx; (void)maxlen;
  if (character) {
   15714:	f89d 300f 	ldrb.w	r3, [sp, #15]
   15718:	2b00      	cmp	r3, #0
   1571a:	d004      	beq.n	15726 <_out_char(char, void*, unsigned int, unsigned int)+0x2e>
    _putchar(character);
   1571c:	f89d 300f 	ldrb.w	r3, [sp, #15]
   15720:	4618      	mov	r0, r3
   15722:	f7ff fe6b 	bl	153fc <_putchar>
   15726:	4623      	mov	r3, r4
   15728:	4619      	mov	r1, r3
   1572a:	4803      	ldr	r0, [pc, #12]	; (15738 <_out_char(char, void*, unsigned int, unsigned int)+0x40>)
   1572c:	f7ff fee4 	bl	154f8 <__cyg_profile_func_exit>
  }
}
   15730:	bf00      	nop
   15732:	b004      	add	sp, #16
   15734:	bd10      	pop	{r4, pc}
   15736:	bf00      	nop
   15738:	000156f9 	.word	0x000156f9

0001573c <_strlen(char const*)>:


// internal strlen
// \return The length of the string (excluding the terminating 0)
static inline unsigned int _strlen(const char* str)
{
   1573c:	b530      	push	{r4, r5, lr}
   1573e:	b085      	sub	sp, #20
   15740:	4674      	mov	r4, lr
   15742:	9001      	str	r0, [sp, #4]
   15744:	4623      	mov	r3, r4
   15746:	4619      	mov	r1, r3
   15748:	480c      	ldr	r0, [pc, #48]	; (1577c <_strlen(char const*)+0x40>)
   1574a:	f7ff fec1 	bl	154d0 <__cyg_profile_func_enter>
  const char* s;
  for (s = str; *s; ++s);
   1574e:	9b01      	ldr	r3, [sp, #4]
   15750:	9303      	str	r3, [sp, #12]
   15752:	9b03      	ldr	r3, [sp, #12]
   15754:	781b      	ldrb	r3, [r3, #0]
   15756:	2b00      	cmp	r3, #0
   15758:	d003      	beq.n	15762 <_strlen(char const*)+0x26>
   1575a:	9b03      	ldr	r3, [sp, #12]
   1575c:	3301      	adds	r3, #1
   1575e:	9303      	str	r3, [sp, #12]
   15760:	e7f7      	b.n	15752 <_strlen(char const*)+0x16>
  return (unsigned int)(s - str);
   15762:	9a03      	ldr	r2, [sp, #12]
   15764:	9b01      	ldr	r3, [sp, #4]
   15766:	1ad3      	subs	r3, r2, r3
   15768:	461d      	mov	r5, r3
   1576a:	4623      	mov	r3, r4
   1576c:	4619      	mov	r1, r3
   1576e:	4803      	ldr	r0, [pc, #12]	; (1577c <_strlen(char const*)+0x40>)
   15770:	f7ff fec2 	bl	154f8 <__cyg_profile_func_exit>
   15774:	462b      	mov	r3, r5
}
   15776:	4618      	mov	r0, r3
   15778:	b005      	add	sp, #20
   1577a:	bd30      	pop	{r4, r5, pc}
   1577c:	0001573d 	.word	0x0001573d

00015780 <_is_digit(char)>:


// internal test if char is a digit (0-9)
// \return true if char is a digit
static inline bool _is_digit(char ch)
{
   15780:	b530      	push	{r4, r5, lr}
   15782:	b083      	sub	sp, #12
   15784:	4675      	mov	r5, lr
   15786:	4603      	mov	r3, r0
   15788:	f88d 3007 	strb.w	r3, [sp, #7]
   1578c:	462b      	mov	r3, r5
   1578e:	4619      	mov	r1, r3
   15790:	480b      	ldr	r0, [pc, #44]	; (157c0 <_is_digit(char)+0x40>)
   15792:	f7ff fe9d 	bl	154d0 <__cyg_profile_func_enter>
  return (ch >= '0') && (ch <= '9');
   15796:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1579a:	2b2f      	cmp	r3, #47	; 0x2f
   1579c:	d905      	bls.n	157aa <_is_digit(char)+0x2a>
   1579e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   157a2:	2b39      	cmp	r3, #57	; 0x39
   157a4:	d801      	bhi.n	157aa <_is_digit(char)+0x2a>
   157a6:	2401      	movs	r4, #1
   157a8:	e000      	b.n	157ac <_is_digit(char)+0x2c>
   157aa:	2400      	movs	r4, #0
   157ac:	462b      	mov	r3, r5
   157ae:	4619      	mov	r1, r3
   157b0:	4803      	ldr	r0, [pc, #12]	; (157c0 <_is_digit(char)+0x40>)
   157b2:	f7ff fea1 	bl	154f8 <__cyg_profile_func_exit>
   157b6:	4623      	mov	r3, r4
}
   157b8:	4618      	mov	r0, r3
   157ba:	b003      	add	sp, #12
   157bc:	bd30      	pop	{r4, r5, pc}
   157be:	bf00      	nop
   157c0:	00015781 	.word	0x00015781

000157c4 <_atoi(char const**)>:


// internal ASCII string to unsigned int conversion
static unsigned int _atoi(const char** str)
{
   157c4:	b530      	push	{r4, r5, lr}
   157c6:	b085      	sub	sp, #20
   157c8:	4675      	mov	r5, lr
   157ca:	9001      	str	r0, [sp, #4]
   157cc:	462b      	mov	r3, r5
   157ce:	4619      	mov	r1, r3
   157d0:	4813      	ldr	r0, [pc, #76]	; (15820 <_atoi(char const**)+0x5c>)
   157d2:	f7ff fe7d 	bl	154d0 <__cyg_profile_func_enter>
  unsigned int i = 0U;
   157d6:	2300      	movs	r3, #0
   157d8:	9303      	str	r3, [sp, #12]
  while (_is_digit(**str)) {
   157da:	9b01      	ldr	r3, [sp, #4]
   157dc:	681b      	ldr	r3, [r3, #0]
   157de:	781b      	ldrb	r3, [r3, #0]
   157e0:	4618      	mov	r0, r3
   157e2:	f7ff ffcd 	bl	15780 <_is_digit(char)>
   157e6:	4603      	mov	r3, r0
   157e8:	2b00      	cmp	r3, #0
   157ea:	d00f      	beq.n	1580c <_atoi(char const**)+0x48>
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
   157ec:	9a03      	ldr	r2, [sp, #12]
   157ee:	4613      	mov	r3, r2
   157f0:	009b      	lsls	r3, r3, #2
   157f2:	4413      	add	r3, r2
   157f4:	005b      	lsls	r3, r3, #1
   157f6:	4618      	mov	r0, r3
   157f8:	9b01      	ldr	r3, [sp, #4]
   157fa:	681b      	ldr	r3, [r3, #0]
   157fc:	1c59      	adds	r1, r3, #1
   157fe:	9a01      	ldr	r2, [sp, #4]
   15800:	6011      	str	r1, [r2, #0]
   15802:	781b      	ldrb	r3, [r3, #0]
   15804:	4403      	add	r3, r0
   15806:	3b30      	subs	r3, #48	; 0x30
   15808:	9303      	str	r3, [sp, #12]
  while (_is_digit(**str)) {
   1580a:	e7e6      	b.n	157da <_atoi(char const**)+0x16>
  }
  return i;
   1580c:	9c03      	ldr	r4, [sp, #12]
   1580e:	462b      	mov	r3, r5
   15810:	4619      	mov	r1, r3
   15812:	4803      	ldr	r0, [pc, #12]	; (15820 <_atoi(char const**)+0x5c>)
   15814:	f7ff fe70 	bl	154f8 <__cyg_profile_func_exit>
   15818:	4623      	mov	r3, r4
}
   1581a:	4618      	mov	r0, r3
   1581c:	b005      	add	sp, #20
   1581e:	bd30      	pop	{r4, r5, pc}
   15820:	000157c5 	.word	0x000157c5

00015824 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)>:


// internal itoa format
static size_t _ntoa_format(out_fct_type out, char* buffer, size_t idx, size_t maxlen, char* buf, size_t len, bool negative, unsigned int base, unsigned int prec, unsigned int width, unsigned int flags)
{
   15824:	b530      	push	{r4, r5, lr}
   15826:	b089      	sub	sp, #36	; 0x24
   15828:	4675      	mov	r5, lr
   1582a:	9003      	str	r0, [sp, #12]
   1582c:	9102      	str	r1, [sp, #8]
   1582e:	9201      	str	r2, [sp, #4]
   15830:	9300      	str	r3, [sp, #0]
   15832:	462b      	mov	r3, r5
   15834:	4619      	mov	r1, r3
   15836:	4891      	ldr	r0, [pc, #580]	; (15a7c <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x258>)
   15838:	f7ff fe4a 	bl	154d0 <__cyg_profile_func_enter>
  const size_t start_idx = idx;
   1583c:	9b01      	ldr	r3, [sp, #4]
   1583e:	9305      	str	r3, [sp, #20]

  // pad leading zeros
  while (!(flags & FLAGS_LEFT) && (len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
   15840:	9b12      	ldr	r3, [sp, #72]	; 0x48
   15842:	f003 0302 	and.w	r3, r3, #2
   15846:	2b00      	cmp	r3, #0
   15848:	d10e      	bne.n	15868 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x44>
   1584a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   1584c:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1584e:	429a      	cmp	r2, r3
   15850:	d20a      	bcs.n	15868 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x44>
   15852:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   15854:	2b1f      	cmp	r3, #31
   15856:	d807      	bhi.n	15868 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x44>
    buf[len++] = '0';
   15858:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1585a:	1c5a      	adds	r2, r3, #1
   1585c:	920d      	str	r2, [sp, #52]	; 0x34
   1585e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   15860:	4413      	add	r3, r2
   15862:	2230      	movs	r2, #48	; 0x30
   15864:	701a      	strb	r2, [r3, #0]
  while (!(flags & FLAGS_LEFT) && (len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
   15866:	e7eb      	b.n	15840 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1c>
  }
  while (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
   15868:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1586a:	f003 0302 	and.w	r3, r3, #2
   1586e:	2b00      	cmp	r3, #0
   15870:	d113      	bne.n	1589a <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x76>
   15872:	9b12      	ldr	r3, [sp, #72]	; 0x48
   15874:	f003 0301 	and.w	r3, r3, #1
   15878:	2b00      	cmp	r3, #0
   1587a:	d00e      	beq.n	1589a <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x76>
   1587c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   1587e:	9b11      	ldr	r3, [sp, #68]	; 0x44
   15880:	429a      	cmp	r2, r3
   15882:	d20a      	bcs.n	1589a <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x76>
   15884:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   15886:	2b1f      	cmp	r3, #31
   15888:	d807      	bhi.n	1589a <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x76>
    buf[len++] = '0';
   1588a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1588c:	1c5a      	adds	r2, r3, #1
   1588e:	920d      	str	r2, [sp, #52]	; 0x34
   15890:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   15892:	4413      	add	r3, r2
   15894:	2230      	movs	r2, #48	; 0x30
   15896:	701a      	strb	r2, [r3, #0]
  while (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
   15898:	e7e6      	b.n	15868 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x44>
  }

  // handle hash
  if (flags & FLAGS_HASH) {
   1589a:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1589c:	f003 0310 	and.w	r3, r3, #16
   158a0:	2b00      	cmp	r3, #0
   158a2:	d058      	beq.n	15956 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x132>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
   158a4:	9b12      	ldr	r3, [sp, #72]	; 0x48
   158a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
   158aa:	2b00      	cmp	r3, #0
   158ac:	d116      	bne.n	158dc <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xb8>
   158ae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   158b0:	2b00      	cmp	r3, #0
   158b2:	d013      	beq.n	158dc <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xb8>
   158b4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   158b6:	9b10      	ldr	r3, [sp, #64]	; 0x40
   158b8:	429a      	cmp	r2, r3
   158ba:	d003      	beq.n	158c4 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xa0>
   158bc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   158be:	9b11      	ldr	r3, [sp, #68]	; 0x44
   158c0:	429a      	cmp	r2, r3
   158c2:	d10b      	bne.n	158dc <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xb8>
      len--;
   158c4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   158c6:	3b01      	subs	r3, #1
   158c8:	930d      	str	r3, [sp, #52]	; 0x34
      if (len && (base == 16U)) {
   158ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   158cc:	2b00      	cmp	r3, #0
   158ce:	d005      	beq.n	158dc <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xb8>
   158d0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   158d2:	2b10      	cmp	r3, #16
   158d4:	d102      	bne.n	158dc <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xb8>
        len--;
   158d6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   158d8:	3b01      	subs	r3, #1
   158da:	930d      	str	r3, [sp, #52]	; 0x34
      }
    }
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
   158dc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   158de:	2b10      	cmp	r3, #16
   158e0:	d10f      	bne.n	15902 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xde>
   158e2:	9b12      	ldr	r3, [sp, #72]	; 0x48
   158e4:	f003 0320 	and.w	r3, r3, #32
   158e8:	2b00      	cmp	r3, #0
   158ea:	d10a      	bne.n	15902 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xde>
   158ec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   158ee:	2b1f      	cmp	r3, #31
   158f0:	d807      	bhi.n	15902 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xde>
      buf[len++] = 'x';
   158f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   158f4:	1c5a      	adds	r2, r3, #1
   158f6:	920d      	str	r2, [sp, #52]	; 0x34
   158f8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   158fa:	4413      	add	r3, r2
   158fc:	2278      	movs	r2, #120	; 0x78
   158fe:	701a      	strb	r2, [r3, #0]
   15900:	e01f      	b.n	15942 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x11e>
    }
    else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
   15902:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   15904:	2b10      	cmp	r3, #16
   15906:	d10f      	bne.n	15928 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x104>
   15908:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1590a:	f003 0320 	and.w	r3, r3, #32
   1590e:	2b00      	cmp	r3, #0
   15910:	d00a      	beq.n	15928 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x104>
   15912:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   15914:	2b1f      	cmp	r3, #31
   15916:	d807      	bhi.n	15928 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x104>
      buf[len++] = 'X';
   15918:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1591a:	1c5a      	adds	r2, r3, #1
   1591c:	920d      	str	r2, [sp, #52]	; 0x34
   1591e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   15920:	4413      	add	r3, r2
   15922:	2258      	movs	r2, #88	; 0x58
   15924:	701a      	strb	r2, [r3, #0]
   15926:	e00c      	b.n	15942 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x11e>
    }
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
   15928:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1592a:	2b02      	cmp	r3, #2
   1592c:	d109      	bne.n	15942 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x11e>
   1592e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   15930:	2b1f      	cmp	r3, #31
   15932:	d806      	bhi.n	15942 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x11e>
      buf[len++] = 'b';
   15934:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   15936:	1c5a      	adds	r2, r3, #1
   15938:	920d      	str	r2, [sp, #52]	; 0x34
   1593a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1593c:	4413      	add	r3, r2
   1593e:	2262      	movs	r2, #98	; 0x62
   15940:	701a      	strb	r2, [r3, #0]
    }
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
   15942:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   15944:	2b1f      	cmp	r3, #31
   15946:	d806      	bhi.n	15956 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x132>
      buf[len++] = '0';
   15948:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1594a:	1c5a      	adds	r2, r3, #1
   1594c:	920d      	str	r2, [sp, #52]	; 0x34
   1594e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   15950:	4413      	add	r3, r2
   15952:	2230      	movs	r2, #48	; 0x30
   15954:	701a      	strb	r2, [r3, #0]
    }
  }

  // handle sign
  if (len && (len == width) && (negative || (flags & FLAGS_PLUS) || (flags & FLAGS_SPACE))) {
   15956:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   15958:	2b00      	cmp	r3, #0
   1595a:	d014      	beq.n	15986 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x162>
   1595c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   1595e:	9b11      	ldr	r3, [sp, #68]	; 0x44
   15960:	429a      	cmp	r2, r3
   15962:	d110      	bne.n	15986 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x162>
   15964:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
   15968:	2b00      	cmp	r3, #0
   1596a:	d109      	bne.n	15980 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x15c>
   1596c:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1596e:	f003 0304 	and.w	r3, r3, #4
   15972:	2b00      	cmp	r3, #0
   15974:	d104      	bne.n	15980 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x15c>
   15976:	9b12      	ldr	r3, [sp, #72]	; 0x48
   15978:	f003 0308 	and.w	r3, r3, #8
   1597c:	2b00      	cmp	r3, #0
   1597e:	d002      	beq.n	15986 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x162>
    len--;
   15980:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   15982:	3b01      	subs	r3, #1
   15984:	930d      	str	r3, [sp, #52]	; 0x34
  }
  if (len < PRINTF_NTOA_BUFFER_SIZE) {
   15986:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   15988:	2b1f      	cmp	r3, #31
   1598a:	d824      	bhi.n	159d6 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1b2>
    if (negative) {
   1598c:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
   15990:	2b00      	cmp	r3, #0
   15992:	d007      	beq.n	159a4 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x180>
      buf[len++] = '-';
   15994:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   15996:	1c5a      	adds	r2, r3, #1
   15998:	920d      	str	r2, [sp, #52]	; 0x34
   1599a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1599c:	4413      	add	r3, r2
   1599e:	222d      	movs	r2, #45	; 0x2d
   159a0:	701a      	strb	r2, [r3, #0]
   159a2:	e018      	b.n	159d6 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1b2>
    }
    else if (flags & FLAGS_PLUS) {
   159a4:	9b12      	ldr	r3, [sp, #72]	; 0x48
   159a6:	f003 0304 	and.w	r3, r3, #4
   159aa:	2b00      	cmp	r3, #0
   159ac:	d007      	beq.n	159be <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x19a>
      buf[len++] = '+';  // ignore the space if the '+' exists
   159ae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   159b0:	1c5a      	adds	r2, r3, #1
   159b2:	920d      	str	r2, [sp, #52]	; 0x34
   159b4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   159b6:	4413      	add	r3, r2
   159b8:	222b      	movs	r2, #43	; 0x2b
   159ba:	701a      	strb	r2, [r3, #0]
   159bc:	e00b      	b.n	159d6 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1b2>
    }
    else if (flags & FLAGS_SPACE) {
   159be:	9b12      	ldr	r3, [sp, #72]	; 0x48
   159c0:	f003 0308 	and.w	r3, r3, #8
   159c4:	2b00      	cmp	r3, #0
   159c6:	d006      	beq.n	159d6 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1b2>
      buf[len++] = ' ';
   159c8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   159ca:	1c5a      	adds	r2, r3, #1
   159cc:	920d      	str	r2, [sp, #52]	; 0x34
   159ce:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   159d0:	4413      	add	r3, r2
   159d2:	2220      	movs	r2, #32
   159d4:	701a      	strb	r2, [r3, #0]
    }
  }

  // pad spaces up to given width
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
   159d6:	9b12      	ldr	r3, [sp, #72]	; 0x48
   159d8:	f003 0302 	and.w	r3, r3, #2
   159dc:	2b00      	cmp	r3, #0
   159de:	d116      	bne.n	15a0e <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1ea>
   159e0:	9b12      	ldr	r3, [sp, #72]	; 0x48
   159e2:	f003 0301 	and.w	r3, r3, #1
   159e6:	2b00      	cmp	r3, #0
   159e8:	d111      	bne.n	15a0e <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1ea>
    for (size_t i = len; i < width; i++) {
   159ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   159ec:	9307      	str	r3, [sp, #28]
   159ee:	9a07      	ldr	r2, [sp, #28]
   159f0:	9b11      	ldr	r3, [sp, #68]	; 0x44
   159f2:	429a      	cmp	r2, r3
   159f4:	d20b      	bcs.n	15a0e <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1ea>
      out(' ', buffer, idx++, maxlen);
   159f6:	9a01      	ldr	r2, [sp, #4]
   159f8:	1c53      	adds	r3, r2, #1
   159fa:	9301      	str	r3, [sp, #4]
   159fc:	9c03      	ldr	r4, [sp, #12]
   159fe:	9b00      	ldr	r3, [sp, #0]
   15a00:	9902      	ldr	r1, [sp, #8]
   15a02:	2020      	movs	r0, #32
   15a04:	47a0      	blx	r4
    for (size_t i = len; i < width; i++) {
   15a06:	9b07      	ldr	r3, [sp, #28]
   15a08:	3301      	adds	r3, #1
   15a0a:	9307      	str	r3, [sp, #28]
   15a0c:	e7ef      	b.n	159ee <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1ca>
    }
  }

  // reverse string
  for (size_t i = 0U; i < len; i++) {
   15a0e:	2300      	movs	r3, #0
   15a10:	9306      	str	r3, [sp, #24]
   15a12:	9a06      	ldr	r2, [sp, #24]
   15a14:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   15a16:	429a      	cmp	r2, r3
   15a18:	d211      	bcs.n	15a3e <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x21a>
    out(buf[len - i - 1U], buffer, idx++, maxlen);
   15a1a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   15a1c:	9b06      	ldr	r3, [sp, #24]
   15a1e:	1ad3      	subs	r3, r2, r3
   15a20:	3b01      	subs	r3, #1
   15a22:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   15a24:	4413      	add	r3, r2
   15a26:	7818      	ldrb	r0, [r3, #0]
   15a28:	9a01      	ldr	r2, [sp, #4]
   15a2a:	1c53      	adds	r3, r2, #1
   15a2c:	9301      	str	r3, [sp, #4]
   15a2e:	9c03      	ldr	r4, [sp, #12]
   15a30:	9b00      	ldr	r3, [sp, #0]
   15a32:	9902      	ldr	r1, [sp, #8]
   15a34:	47a0      	blx	r4
  for (size_t i = 0U; i < len; i++) {
   15a36:	9b06      	ldr	r3, [sp, #24]
   15a38:	3301      	adds	r3, #1
   15a3a:	9306      	str	r3, [sp, #24]
   15a3c:	e7e9      	b.n	15a12 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1ee>
  }

  // append pad spaces up to given width
  if (flags & FLAGS_LEFT) {
   15a3e:	9b12      	ldr	r3, [sp, #72]	; 0x48
   15a40:	f003 0302 	and.w	r3, r3, #2
   15a44:	2b00      	cmp	r3, #0
   15a46:	d00e      	beq.n	15a66 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x242>
    while (idx - start_idx < width) {
   15a48:	9a01      	ldr	r2, [sp, #4]
   15a4a:	9b05      	ldr	r3, [sp, #20]
   15a4c:	1ad3      	subs	r3, r2, r3
   15a4e:	9a11      	ldr	r2, [sp, #68]	; 0x44
   15a50:	429a      	cmp	r2, r3
   15a52:	d908      	bls.n	15a66 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x242>
      out(' ', buffer, idx++, maxlen);
   15a54:	9a01      	ldr	r2, [sp, #4]
   15a56:	1c53      	adds	r3, r2, #1
   15a58:	9301      	str	r3, [sp, #4]
   15a5a:	9c03      	ldr	r4, [sp, #12]
   15a5c:	9b00      	ldr	r3, [sp, #0]
   15a5e:	9902      	ldr	r1, [sp, #8]
   15a60:	2020      	movs	r0, #32
   15a62:	47a0      	blx	r4
    while (idx - start_idx < width) {
   15a64:	e7f0      	b.n	15a48 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x224>
    }
  }

  return idx;
   15a66:	9c01      	ldr	r4, [sp, #4]
   15a68:	462b      	mov	r3, r5
   15a6a:	4619      	mov	r1, r3
   15a6c:	4803      	ldr	r0, [pc, #12]	; (15a7c <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x258>)
   15a6e:	f7ff fd43 	bl	154f8 <__cyg_profile_func_exit>
   15a72:	4623      	mov	r3, r4
}
   15a74:	4618      	mov	r0, r3
   15a76:	b009      	add	sp, #36	; 0x24
   15a78:	bd30      	pop	{r4, r5, pc}
   15a7a:	bf00      	nop
   15a7c:	00015825 	.word	0x00015825

00015a80 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)>:


// internal itoa for 'long' type
static size_t _ntoa_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long value, bool negative, unsigned long base, unsigned int prec, unsigned int width, unsigned int flags)
{
   15a80:	b530      	push	{r4, r5, lr}
   15a82:	b097      	sub	sp, #92	; 0x5c
   15a84:	4674      	mov	r4, lr
   15a86:	900b      	str	r0, [sp, #44]	; 0x2c
   15a88:	910a      	str	r1, [sp, #40]	; 0x28
   15a8a:	9209      	str	r2, [sp, #36]	; 0x24
   15a8c:	9308      	str	r3, [sp, #32]
   15a8e:	4623      	mov	r3, r4
   15a90:	4619      	mov	r1, r3
   15a92:	4833      	ldr	r0, [pc, #204]	; (15b60 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0xe0>)
   15a94:	f7ff fd1c 	bl	154d0 <__cyg_profile_func_enter>
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
   15a98:	2300      	movs	r3, #0
   15a9a:	9315      	str	r3, [sp, #84]	; 0x54

  // no hash for 0 values
  if (!value) {
   15a9c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   15a9e:	2b00      	cmp	r3, #0
   15aa0:	d103      	bne.n	15aaa <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x2a>
    flags &= ~FLAGS_HASH;
   15aa2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   15aa4:	f023 0310 	bic.w	r3, r3, #16
   15aa8:	931f      	str	r3, [sp, #124]	; 0x7c
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
   15aaa:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   15aac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
   15ab0:	2b00      	cmp	r3, #0
   15ab2:	d002      	beq.n	15aba <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x3a>
   15ab4:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   15ab6:	2b00      	cmp	r3, #0
   15ab8:	d033      	beq.n	15b22 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0xa2>
    do {
      const char digit = (char)(value % base);
   15aba:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   15abc:	9a1c      	ldr	r2, [sp, #112]	; 0x70
   15abe:	fbb3 f2f2 	udiv	r2, r3, r2
   15ac2:	991c      	ldr	r1, [sp, #112]	; 0x70
   15ac4:	fb01 f202 	mul.w	r2, r1, r2
   15ac8:	1a9b      	subs	r3, r3, r2
   15aca:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
   15ace:	f89d 3053 	ldrb.w	r3, [sp, #83]	; 0x53
   15ad2:	2b09      	cmp	r3, #9
   15ad4:	d804      	bhi.n	15ae0 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x60>
   15ad6:	f89d 3053 	ldrb.w	r3, [sp, #83]	; 0x53
   15ada:	3330      	adds	r3, #48	; 0x30
   15adc:	b2da      	uxtb	r2, r3
   15ade:	e00d      	b.n	15afc <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x7c>
   15ae0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   15ae2:	f003 0320 	and.w	r3, r3, #32
   15ae6:	2b00      	cmp	r3, #0
   15ae8:	d001      	beq.n	15aee <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x6e>
   15aea:	2241      	movs	r2, #65	; 0x41
   15aec:	e000      	b.n	15af0 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x70>
   15aee:	2261      	movs	r2, #97	; 0x61
   15af0:	f89d 3053 	ldrb.w	r3, [sp, #83]	; 0x53
   15af4:	4413      	add	r3, r2
   15af6:	b2db      	uxtb	r3, r3
   15af8:	3b0a      	subs	r3, #10
   15afa:	b2da      	uxtb	r2, r3
   15afc:	9b15      	ldr	r3, [sp, #84]	; 0x54
   15afe:	1c59      	adds	r1, r3, #1
   15b00:	9115      	str	r1, [sp, #84]	; 0x54
   15b02:	a916      	add	r1, sp, #88	; 0x58
   15b04:	440b      	add	r3, r1
   15b06:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
   15b0a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   15b0c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
   15b0e:	fbb2 f3f3 	udiv	r3, r2, r3
   15b12:	931a      	str	r3, [sp, #104]	; 0x68
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
   15b14:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   15b16:	2b00      	cmp	r3, #0
   15b18:	d003      	beq.n	15b22 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0xa2>
   15b1a:	9b15      	ldr	r3, [sp, #84]	; 0x54
   15b1c:	2b1f      	cmp	r3, #31
   15b1e:	d800      	bhi.n	15b22 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0xa2>
    do {
   15b20:	e7cb      	b.n	15aba <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x3a>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
   15b22:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   15b24:	9306      	str	r3, [sp, #24]
   15b26:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   15b28:	9305      	str	r3, [sp, #20]
   15b2a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   15b2c:	9304      	str	r3, [sp, #16]
   15b2e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
   15b30:	9303      	str	r3, [sp, #12]
   15b32:	f89d 306c 	ldrb.w	r3, [sp, #108]	; 0x6c
   15b36:	9302      	str	r3, [sp, #8]
   15b38:	9b15      	ldr	r3, [sp, #84]	; 0x54
   15b3a:	9301      	str	r3, [sp, #4]
   15b3c:	ab0c      	add	r3, sp, #48	; 0x30
   15b3e:	9300      	str	r3, [sp, #0]
   15b40:	9b08      	ldr	r3, [sp, #32]
   15b42:	9a09      	ldr	r2, [sp, #36]	; 0x24
   15b44:	990a      	ldr	r1, [sp, #40]	; 0x28
   15b46:	980b      	ldr	r0, [sp, #44]	; 0x2c
   15b48:	f7ff fe6c 	bl	15824 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)>
   15b4c:	4605      	mov	r5, r0
   15b4e:	4623      	mov	r3, r4
   15b50:	4619      	mov	r1, r3
   15b52:	4803      	ldr	r0, [pc, #12]	; (15b60 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0xe0>)
   15b54:	f7ff fcd0 	bl	154f8 <__cyg_profile_func_exit>
   15b58:	462b      	mov	r3, r5
}
   15b5a:	4618      	mov	r0, r3
   15b5c:	b017      	add	sp, #92	; 0x5c
   15b5e:	bd30      	pop	{r4, r5, pc}
   15b60:	00015a81 	.word	0x00015a81

00015b64 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)>:


// internal itoa for 'long long' type
#if defined(PRINTF_SUPPORT_LONG_LONG)
static size_t _ntoa_long_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long long value, bool negative, unsigned long long base, unsigned int prec, unsigned int width, unsigned int flags)
{
   15b64:	b530      	push	{r4, r5, lr}
   15b66:	b097      	sub	sp, #92	; 0x5c
   15b68:	4675      	mov	r5, lr
   15b6a:	900b      	str	r0, [sp, #44]	; 0x2c
   15b6c:	910a      	str	r1, [sp, #40]	; 0x28
   15b6e:	9209      	str	r2, [sp, #36]	; 0x24
   15b70:	9308      	str	r3, [sp, #32]
   15b72:	462b      	mov	r3, r5
   15b74:	4619      	mov	r1, r3
   15b76:	4837      	ldr	r0, [pc, #220]	; (15c54 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0xf0>)
   15b78:	f7ff fcaa 	bl	154d0 <__cyg_profile_func_enter>
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
   15b7c:	2300      	movs	r3, #0
   15b7e:	9315      	str	r3, [sp, #84]	; 0x54

  // no hash for 0 values
  if (!value) {
   15b80:	e9dd 341a 	ldrd	r3, r4, [sp, #104]	; 0x68
   15b84:	4323      	orrs	r3, r4
   15b86:	d103      	bne.n	15b90 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0x2c>
    flags &= ~FLAGS_HASH;
   15b88:	9b22      	ldr	r3, [sp, #136]	; 0x88
   15b8a:	f023 0310 	bic.w	r3, r3, #16
   15b8e:	9322      	str	r3, [sp, #136]	; 0x88
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
   15b90:	9b22      	ldr	r3, [sp, #136]	; 0x88
   15b92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
   15b96:	2b00      	cmp	r3, #0
   15b98:	d003      	beq.n	15ba2 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0x3e>
   15b9a:	e9dd 341a 	ldrd	r3, r4, [sp, #104]	; 0x68
   15b9e:	4323      	orrs	r3, r4
   15ba0:	d039      	beq.n	15c16 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0xb2>
    do {
      const char digit = (char)(value % base);
   15ba2:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
   15ba6:	e9dd 231e 	ldrd	r2, r3, [sp, #120]	; 0x78
   15baa:	f002 f94b 	bl	17e44 <__aeabi_uldivmod>
   15bae:	461c      	mov	r4, r3
   15bb0:	4613      	mov	r3, r2
   15bb2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
   15bb6:	f89d 3053 	ldrb.w	r3, [sp, #83]	; 0x53
   15bba:	2b09      	cmp	r3, #9
   15bbc:	d804      	bhi.n	15bc8 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0x64>
   15bbe:	f89d 3053 	ldrb.w	r3, [sp, #83]	; 0x53
   15bc2:	3330      	adds	r3, #48	; 0x30
   15bc4:	b2da      	uxtb	r2, r3
   15bc6:	e00d      	b.n	15be4 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0x80>
   15bc8:	9b22      	ldr	r3, [sp, #136]	; 0x88
   15bca:	f003 0320 	and.w	r3, r3, #32
   15bce:	2b00      	cmp	r3, #0
   15bd0:	d001      	beq.n	15bd6 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0x72>
   15bd2:	2241      	movs	r2, #65	; 0x41
   15bd4:	e000      	b.n	15bd8 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0x74>
   15bd6:	2261      	movs	r2, #97	; 0x61
   15bd8:	f89d 3053 	ldrb.w	r3, [sp, #83]	; 0x53
   15bdc:	4413      	add	r3, r2
   15bde:	b2db      	uxtb	r3, r3
   15be0:	3b0a      	subs	r3, #10
   15be2:	b2da      	uxtb	r2, r3
   15be4:	9b15      	ldr	r3, [sp, #84]	; 0x54
   15be6:	1c59      	adds	r1, r3, #1
   15be8:	9115      	str	r1, [sp, #84]	; 0x54
   15bea:	a916      	add	r1, sp, #88	; 0x58
   15bec:	440b      	add	r3, r1
   15bee:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
   15bf2:	e9dd 231e 	ldrd	r2, r3, [sp, #120]	; 0x78
   15bf6:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
   15bfa:	f002 f923 	bl	17e44 <__aeabi_uldivmod>
   15bfe:	4603      	mov	r3, r0
   15c00:	460c      	mov	r4, r1
   15c02:	e9cd 341a 	strd	r3, r4, [sp, #104]	; 0x68
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
   15c06:	e9dd 341a 	ldrd	r3, r4, [sp, #104]	; 0x68
   15c0a:	4323      	orrs	r3, r4
   15c0c:	d003      	beq.n	15c16 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0xb2>
   15c0e:	9b15      	ldr	r3, [sp, #84]	; 0x54
   15c10:	2b1f      	cmp	r3, #31
   15c12:	d800      	bhi.n	15c16 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0xb2>
    do {
   15c14:	e7c5      	b.n	15ba2 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0x3e>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
   15c16:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   15c18:	9a22      	ldr	r2, [sp, #136]	; 0x88
   15c1a:	9206      	str	r2, [sp, #24]
   15c1c:	9a21      	ldr	r2, [sp, #132]	; 0x84
   15c1e:	9205      	str	r2, [sp, #20]
   15c20:	9a20      	ldr	r2, [sp, #128]	; 0x80
   15c22:	9204      	str	r2, [sp, #16]
   15c24:	9303      	str	r3, [sp, #12]
   15c26:	f89d 3070 	ldrb.w	r3, [sp, #112]	; 0x70
   15c2a:	9302      	str	r3, [sp, #8]
   15c2c:	9b15      	ldr	r3, [sp, #84]	; 0x54
   15c2e:	9301      	str	r3, [sp, #4]
   15c30:	ab0c      	add	r3, sp, #48	; 0x30
   15c32:	9300      	str	r3, [sp, #0]
   15c34:	9b08      	ldr	r3, [sp, #32]
   15c36:	9a09      	ldr	r2, [sp, #36]	; 0x24
   15c38:	990a      	ldr	r1, [sp, #40]	; 0x28
   15c3a:	980b      	ldr	r0, [sp, #44]	; 0x2c
   15c3c:	f7ff fdf2 	bl	15824 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)>
   15c40:	4604      	mov	r4, r0
   15c42:	462b      	mov	r3, r5
   15c44:	4619      	mov	r1, r3
   15c46:	4803      	ldr	r0, [pc, #12]	; (15c54 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0xf0>)
   15c48:	f7ff fc56 	bl	154f8 <__cyg_profile_func_exit>
   15c4c:	4623      	mov	r3, r4
}
   15c4e:	4618      	mov	r0, r3
   15c50:	b017      	add	sp, #92	; 0x5c
   15c52:	bd30      	pop	{r4, r5, pc}
   15c54:	00015b65 	.word	0x00015b65

00015c58 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)>:
#endif  // PRINTF_SUPPORT_LONG_LONG


#if defined(PRINTF_SUPPORT_FLOAT)
static size_t _ftoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value_param, unsigned int prec, unsigned int width, unsigned int flags)
{
   15c58:	b530      	push	{r4, r5, lr}
   15c5a:	b09b      	sub	sp, #108	; 0x6c
   15c5c:	4675      	mov	r5, lr
   15c5e:	9005      	str	r0, [sp, #20]
   15c60:	9104      	str	r1, [sp, #16]
   15c62:	9203      	str	r2, [sp, #12]
   15c64:	9302      	str	r3, [sp, #8]
   15c66:	ed8d 0b00 	vstr	d0, [sp]
   15c6a:	462b      	mov	r3, r5
   15c6c:	4619      	mov	r1, r3
   15c6e:	48b7      	ldr	r0, [pc, #732]	; (15f4c <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x2f4>)
   15c70:	f7ff fc2e 	bl	154d0 <__cyg_profile_func_enter>
  const size_t start_idx = idx;
   15c74:	9b03      	ldr	r3, [sp, #12]
   15c76:	9311      	str	r3, [sp, #68]	; 0x44

  float value = static_cast<float>(value_param);
   15c78:	e9dd 0100 	ldrd	r0, r1, [sp]
   15c7c:	f002 f892 	bl	17da4 <__aeabi_d2f>
   15c80:	4603      	mov	r3, r0
   15c82:	9319      	str	r3, [sp, #100]	; 0x64

  char buf[PRINTF_FTOA_BUFFER_SIZE];
  size_t len  = 0U;
   15c84:	2300      	movs	r3, #0
   15c86:	9318      	str	r3, [sp, #96]	; 0x60
  float diff = 0.0;
   15c88:	f04f 0300 	mov.w	r3, #0
   15c8c:	9310      	str	r3, [sp, #64]	; 0x40

  // if input is larger than thres_max, revert to exponential
  const float thres_max = (float)0x7FFFFFFF;
   15c8e:	f04f 439e 	mov.w	r3, #1325400064	; 0x4f000000
   15c92:	930f      	str	r3, [sp, #60]	; 0x3c

  // powers of 10
  static const float pow10[] = { 1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000 };

  // test for negative
  bool negative = false;
   15c94:	2300      	movs	r3, #0
   15c96:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
  if (value < 0) {
   15c9a:	eddd 7a19 	vldr	s15, [sp, #100]	; 0x64
   15c9e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   15ca2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   15ca6:	d50a      	bpl.n	15cbe <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x66>
    negative = true;
   15ca8:	2301      	movs	r3, #1
   15caa:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
    value = 0 - value;
   15cae:	ed9f 7aa8 	vldr	s14, [pc, #672]	; 15f50 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x2f8>
   15cb2:	eddd 7a19 	vldr	s15, [sp, #100]	; 0x64
   15cb6:	ee77 7a67 	vsub.f32	s15, s14, s15
   15cba:	edcd 7a19 	vstr	s15, [sp, #100]	; 0x64
  }

  // set default precision to 6, if not set explicitly
  if (!(flags & FLAGS_PRECISION)) {
   15cbe:	9b20      	ldr	r3, [sp, #128]	; 0x80
   15cc0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
   15cc4:	2b00      	cmp	r3, #0
   15cc6:	d101      	bne.n	15ccc <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x74>
    prec = 6U;
   15cc8:	2306      	movs	r3, #6
   15cca:	931e      	str	r3, [sp, #120]	; 0x78
  }
  // limit precision to 9, cause a prec >= 10 can lead to overflow errors
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
   15ccc:	9b18      	ldr	r3, [sp, #96]	; 0x60
   15cce:	2b1f      	cmp	r3, #31
   15cd0:	d80e      	bhi.n	15cf0 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x98>
   15cd2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   15cd4:	2b09      	cmp	r3, #9
   15cd6:	d90b      	bls.n	15cf0 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x98>
    buf[len++] = '0';
   15cd8:	9b18      	ldr	r3, [sp, #96]	; 0x60
   15cda:	1c5a      	adds	r2, r3, #1
   15cdc:	9218      	str	r2, [sp, #96]	; 0x60
   15cde:	aa1a      	add	r2, sp, #104	; 0x68
   15ce0:	4413      	add	r3, r2
   15ce2:	2230      	movs	r2, #48	; 0x30
   15ce4:	f803 2c50 	strb.w	r2, [r3, #-80]
    prec--;
   15ce8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   15cea:	3b01      	subs	r3, #1
   15cec:	931e      	str	r3, [sp, #120]	; 0x78
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
   15cee:	e7ed      	b.n	15ccc <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x74>
  }

  int whole = (int)value;
   15cf0:	eddd 7a19 	vldr	s15, [sp, #100]	; 0x64
   15cf4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   15cf8:	ee17 3a90 	vmov	r3, s15
   15cfc:	9316      	str	r3, [sp, #88]	; 0x58
  float tmp = (value - whole) * pow10[prec];
   15cfe:	9b16      	ldr	r3, [sp, #88]	; 0x58
   15d00:	ee07 3a90 	vmov	s15, r3
   15d04:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   15d08:	ed9d 7a19 	vldr	s14, [sp, #100]	; 0x64
   15d0c:	ee37 7a67 	vsub.f32	s14, s14, s15
   15d10:	4a90      	ldr	r2, [pc, #576]	; (15f54 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x2fc>)
   15d12:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   15d14:	009b      	lsls	r3, r3, #2
   15d16:	4413      	add	r3, r2
   15d18:	edd3 7a00 	vldr	s15, [r3]
   15d1c:	ee67 7a27 	vmul.f32	s15, s14, s15
   15d20:	edcd 7a0e 	vstr	s15, [sp, #56]	; 0x38
  unsigned long frac = (unsigned long)tmp;
   15d24:	eddd 7a0e 	vldr	s15, [sp, #56]	; 0x38
   15d28:	eefc 7ae7 	vcvt.u32.f32	s15, s15
   15d2c:	ee17 3a90 	vmov	r3, s15
   15d30:	9315      	str	r3, [sp, #84]	; 0x54
  diff = tmp - frac;
   15d32:	9b15      	ldr	r3, [sp, #84]	; 0x54
   15d34:	ee07 3a90 	vmov	s15, r3
   15d38:	eef8 7a67 	vcvt.f32.u32	s15, s15
   15d3c:	ed9d 7a0e 	vldr	s14, [sp, #56]	; 0x38
   15d40:	ee77 7a67 	vsub.f32	s15, s14, s15
   15d44:	edcd 7a10 	vstr	s15, [sp, #64]	; 0x40

  if (diff > 0.5) {
   15d48:	eddd 7a10 	vldr	s15, [sp, #64]	; 0x40
   15d4c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
   15d50:	eef4 7ac7 	vcmpe.f32	s15, s14
   15d54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   15d58:	dd18      	ble.n	15d8c <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x134>
    ++frac;
   15d5a:	9b15      	ldr	r3, [sp, #84]	; 0x54
   15d5c:	3301      	adds	r3, #1
   15d5e:	9315      	str	r3, [sp, #84]	; 0x54
    // handle rollover, e.g. case 0.99 with prec 1 is 1.0
    if (frac >= pow10[prec]) {
   15d60:	9b15      	ldr	r3, [sp, #84]	; 0x54
   15d62:	ee07 3a90 	vmov	s15, r3
   15d66:	eeb8 7a67 	vcvt.f32.u32	s14, s15
   15d6a:	4a7a      	ldr	r2, [pc, #488]	; (15f54 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x2fc>)
   15d6c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   15d6e:	009b      	lsls	r3, r3, #2
   15d70:	4413      	add	r3, r2
   15d72:	edd3 7a00 	vldr	s15, [r3]
   15d76:	eeb4 7ae7 	vcmpe.f32	s14, s15
   15d7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   15d7e:	db19      	blt.n	15db4 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x15c>
      frac = 0;
   15d80:	2300      	movs	r3, #0
   15d82:	9315      	str	r3, [sp, #84]	; 0x54
      ++whole;
   15d84:	9b16      	ldr	r3, [sp, #88]	; 0x58
   15d86:	3301      	adds	r3, #1
   15d88:	9316      	str	r3, [sp, #88]	; 0x58
   15d8a:	e013      	b.n	15db4 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x15c>
    }
  }
  else if ((diff == 0.5) && ((frac == 0U) || (frac & 1U))) {
   15d8c:	eddd 7a10 	vldr	s15, [sp, #64]	; 0x40
   15d90:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
   15d94:	eef4 7a47 	vcmp.f32	s15, s14
   15d98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   15d9c:	d10a      	bne.n	15db4 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x15c>
   15d9e:	9b15      	ldr	r3, [sp, #84]	; 0x54
   15da0:	2b00      	cmp	r3, #0
   15da2:	d004      	beq.n	15dae <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x156>
   15da4:	9b15      	ldr	r3, [sp, #84]	; 0x54
   15da6:	f003 0301 	and.w	r3, r3, #1
   15daa:	2b00      	cmp	r3, #0
   15dac:	d002      	beq.n	15db4 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x15c>
    // if halfway, round up if odd, OR if last digit is 0
    ++frac;
   15dae:	9b15      	ldr	r3, [sp, #84]	; 0x54
   15db0:	3301      	adds	r3, #1
   15db2:	9315      	str	r3, [sp, #84]	; 0x54
  }

  // TBD: for very large numbers switch back to native sprintf for exponentials. Anyone want to write code to replace this?
  // Normal printf behavior is to print EVERY whole number digit which can be 100s of characters overflowing your buffers == bad
  if (value > thres_max) {
   15db4:	eddd 7a19 	vldr	s15, [sp, #100]	; 0x64
   15db8:	ed9f 7a67 	vldr	s14, [pc, #412]	; 15f58 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x300>
   15dbc:	eef4 7ac7 	vcmpe.f32	s15, s14
   15dc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   15dc4:	dd01      	ble.n	15dca <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x172>
    return 0U;
   15dc6:	2400      	movs	r4, #0
   15dc8:	e156      	b.n	16078 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x420>
  }

  if (prec == 0U) {
   15dca:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   15dcc:	2b00      	cmp	r3, #0
   15dce:	d129      	bne.n	15e24 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x1cc>
    diff = value - (float)whole;
   15dd0:	9b16      	ldr	r3, [sp, #88]	; 0x58
   15dd2:	ee07 3a90 	vmov	s15, r3
   15dd6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   15dda:	ed9d 7a19 	vldr	s14, [sp, #100]	; 0x64
   15dde:	ee77 7a67 	vsub.f32	s15, s14, s15
   15de2:	edcd 7a10 	vstr	s15, [sp, #64]	; 0x40
    if (diff > 0.5) {
   15de6:	eddd 7a10 	vldr	s15, [sp, #64]	; 0x40
   15dea:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
   15dee:	eef4 7ac7 	vcmpe.f32	s15, s14
   15df2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   15df6:	dd03      	ble.n	15e00 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x1a8>
      // greater than 0.5, round up, e.g. 1.6 -> 2
      ++whole;
   15df8:	9b16      	ldr	r3, [sp, #88]	; 0x58
   15dfa:	3301      	adds	r3, #1
   15dfc:	9316      	str	r3, [sp, #88]	; 0x58
   15dfe:	e05f      	b.n	15ec0 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x268>
    }
    else if ((diff == 0.5) && (whole & 1)) {
   15e00:	eddd 7a10 	vldr	s15, [sp, #64]	; 0x40
   15e04:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
   15e08:	eef4 7a47 	vcmp.f32	s15, s14
   15e0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   15e10:	d156      	bne.n	15ec0 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x268>
   15e12:	9b16      	ldr	r3, [sp, #88]	; 0x58
   15e14:	f003 0301 	and.w	r3, r3, #1
   15e18:	2b00      	cmp	r3, #0
   15e1a:	d051      	beq.n	15ec0 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x268>
      // exactly 0.5 and ODD, then round up
      // 1.5 -> 2, but 2.5 -> 2
      ++whole;
   15e1c:	9b16      	ldr	r3, [sp, #88]	; 0x58
   15e1e:	3301      	adds	r3, #1
   15e20:	9316      	str	r3, [sp, #88]	; 0x58
   15e22:	e04d      	b.n	15ec0 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x268>
    }
  }
  else {
    unsigned int count = prec;
   15e24:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   15e26:	9314      	str	r3, [sp, #80]	; 0x50
    // now do fractional part, as an unsigned number
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
   15e28:	9b18      	ldr	r3, [sp, #96]	; 0x60
   15e2a:	2b1f      	cmp	r3, #31
   15e2c:	d827      	bhi.n	15e7e <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x226>
      --count;
   15e2e:	9b14      	ldr	r3, [sp, #80]	; 0x50
   15e30:	3b01      	subs	r3, #1
   15e32:	9314      	str	r3, [sp, #80]	; 0x50
      buf[len++] = (char)(48U + (frac % 10U));
   15e34:	9915      	ldr	r1, [sp, #84]	; 0x54
   15e36:	4b49      	ldr	r3, [pc, #292]	; (15f5c <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x304>)
   15e38:	fba3 2301 	umull	r2, r3, r3, r1
   15e3c:	08da      	lsrs	r2, r3, #3
   15e3e:	4613      	mov	r3, r2
   15e40:	009b      	lsls	r3, r3, #2
   15e42:	4413      	add	r3, r2
   15e44:	005b      	lsls	r3, r3, #1
   15e46:	1aca      	subs	r2, r1, r3
   15e48:	b2d3      	uxtb	r3, r2
   15e4a:	3330      	adds	r3, #48	; 0x30
   15e4c:	b2d9      	uxtb	r1, r3
   15e4e:	9b18      	ldr	r3, [sp, #96]	; 0x60
   15e50:	1c5a      	adds	r2, r3, #1
   15e52:	9218      	str	r2, [sp, #96]	; 0x60
   15e54:	aa1a      	add	r2, sp, #104	; 0x68
   15e56:	4413      	add	r3, r2
   15e58:	460a      	mov	r2, r1
   15e5a:	f803 2c50 	strb.w	r2, [r3, #-80]
      if (!(frac /= 10U)) {
   15e5e:	9b15      	ldr	r3, [sp, #84]	; 0x54
   15e60:	4a3e      	ldr	r2, [pc, #248]	; (15f5c <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x304>)
   15e62:	fba2 2303 	umull	r2, r3, r2, r3
   15e66:	08db      	lsrs	r3, r3, #3
   15e68:	9315      	str	r3, [sp, #84]	; 0x54
   15e6a:	9b15      	ldr	r3, [sp, #84]	; 0x54
   15e6c:	2b00      	cmp	r3, #0
   15e6e:	bf0c      	ite	eq
   15e70:	2301      	moveq	r3, #1
   15e72:	2300      	movne	r3, #0
   15e74:	b2db      	uxtb	r3, r3
   15e76:	2b00      	cmp	r3, #0
   15e78:	d100      	bne.n	15e7c <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x224>
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
   15e7a:	e7d5      	b.n	15e28 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x1d0>
        break;
   15e7c:	bf00      	nop
      }
    }
    // add extra 0s
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
   15e7e:	9b18      	ldr	r3, [sp, #96]	; 0x60
   15e80:	2b1f      	cmp	r3, #31
   15e82:	d806      	bhi.n	15e92 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x23a>
   15e84:	9b14      	ldr	r3, [sp, #80]	; 0x50
   15e86:	1e5a      	subs	r2, r3, #1
   15e88:	9214      	str	r2, [sp, #80]	; 0x50
   15e8a:	2b00      	cmp	r3, #0
   15e8c:	d001      	beq.n	15e92 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x23a>
   15e8e:	2301      	movs	r3, #1
   15e90:	e000      	b.n	15e94 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x23c>
   15e92:	2300      	movs	r3, #0
   15e94:	2b00      	cmp	r3, #0
   15e96:	d008      	beq.n	15eaa <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x252>
      buf[len++] = '0';
   15e98:	9b18      	ldr	r3, [sp, #96]	; 0x60
   15e9a:	1c5a      	adds	r2, r3, #1
   15e9c:	9218      	str	r2, [sp, #96]	; 0x60
   15e9e:	aa1a      	add	r2, sp, #104	; 0x68
   15ea0:	4413      	add	r3, r2
   15ea2:	2230      	movs	r2, #48	; 0x30
   15ea4:	f803 2c50 	strb.w	r2, [r3, #-80]
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
   15ea8:	e7e9      	b.n	15e7e <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x226>
    }
    if (len < PRINTF_FTOA_BUFFER_SIZE) {
   15eaa:	9b18      	ldr	r3, [sp, #96]	; 0x60
   15eac:	2b1f      	cmp	r3, #31
   15eae:	d807      	bhi.n	15ec0 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x268>
      // add decimal
      buf[len++] = '.';
   15eb0:	9b18      	ldr	r3, [sp, #96]	; 0x60
   15eb2:	1c5a      	adds	r2, r3, #1
   15eb4:	9218      	str	r2, [sp, #96]	; 0x60
   15eb6:	aa1a      	add	r2, sp, #104	; 0x68
   15eb8:	4413      	add	r3, r2
   15eba:	222e      	movs	r2, #46	; 0x2e
   15ebc:	f803 2c50 	strb.w	r2, [r3, #-80]
    }
  }

  // do whole part, number is reversed
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
   15ec0:	9b18      	ldr	r3, [sp, #96]	; 0x60
   15ec2:	2b1f      	cmp	r3, #31
   15ec4:	d828      	bhi.n	15f18 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x2c0>
    buf[len++] = (char)(48 + (whole % 10));
   15ec6:	9a16      	ldr	r2, [sp, #88]	; 0x58
   15ec8:	4b25      	ldr	r3, [pc, #148]	; (15f60 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x308>)
   15eca:	fb83 1302 	smull	r1, r3, r3, r2
   15ece:	1099      	asrs	r1, r3, #2
   15ed0:	17d3      	asrs	r3, r2, #31
   15ed2:	1ac9      	subs	r1, r1, r3
   15ed4:	460b      	mov	r3, r1
   15ed6:	009b      	lsls	r3, r3, #2
   15ed8:	440b      	add	r3, r1
   15eda:	005b      	lsls	r3, r3, #1
   15edc:	1ad1      	subs	r1, r2, r3
   15ede:	b2cb      	uxtb	r3, r1
   15ee0:	3330      	adds	r3, #48	; 0x30
   15ee2:	b2d9      	uxtb	r1, r3
   15ee4:	9b18      	ldr	r3, [sp, #96]	; 0x60
   15ee6:	1c5a      	adds	r2, r3, #1
   15ee8:	9218      	str	r2, [sp, #96]	; 0x60
   15eea:	aa1a      	add	r2, sp, #104	; 0x68
   15eec:	4413      	add	r3, r2
   15eee:	460a      	mov	r2, r1
   15ef0:	f803 2c50 	strb.w	r2, [r3, #-80]
    if (!(whole /= 10)) {
   15ef4:	9b16      	ldr	r3, [sp, #88]	; 0x58
   15ef6:	4a1a      	ldr	r2, [pc, #104]	; (15f60 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x308>)
   15ef8:	fb82 1203 	smull	r1, r2, r2, r3
   15efc:	1092      	asrs	r2, r2, #2
   15efe:	17db      	asrs	r3, r3, #31
   15f00:	1ad3      	subs	r3, r2, r3
   15f02:	9316      	str	r3, [sp, #88]	; 0x58
   15f04:	9b16      	ldr	r3, [sp, #88]	; 0x58
   15f06:	2b00      	cmp	r3, #0
   15f08:	bf0c      	ite	eq
   15f0a:	2301      	moveq	r3, #1
   15f0c:	2300      	movne	r3, #0
   15f0e:	b2db      	uxtb	r3, r3
   15f10:	2b00      	cmp	r3, #0
   15f12:	d100      	bne.n	15f16 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x2be>
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
   15f14:	e7d4      	b.n	15ec0 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x268>
      break;
   15f16:	bf00      	nop
    }
  }

  // pad leading zeros
  while (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
   15f18:	9b20      	ldr	r3, [sp, #128]	; 0x80
   15f1a:	f003 0302 	and.w	r3, r3, #2
   15f1e:	2b00      	cmp	r3, #0
   15f20:	d120      	bne.n	15f64 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x30c>
   15f22:	9b20      	ldr	r3, [sp, #128]	; 0x80
   15f24:	f003 0301 	and.w	r3, r3, #1
   15f28:	2b00      	cmp	r3, #0
   15f2a:	d01b      	beq.n	15f64 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x30c>
   15f2c:	9a18      	ldr	r2, [sp, #96]	; 0x60
   15f2e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   15f30:	429a      	cmp	r2, r3
   15f32:	d217      	bcs.n	15f64 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x30c>
   15f34:	9b18      	ldr	r3, [sp, #96]	; 0x60
   15f36:	2b1f      	cmp	r3, #31
   15f38:	d814      	bhi.n	15f64 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x30c>
    buf[len++] = '0';
   15f3a:	9b18      	ldr	r3, [sp, #96]	; 0x60
   15f3c:	1c5a      	adds	r2, r3, #1
   15f3e:	9218      	str	r2, [sp, #96]	; 0x60
   15f40:	aa1a      	add	r2, sp, #104	; 0x68
   15f42:	4413      	add	r3, r2
   15f44:	2230      	movs	r2, #48	; 0x30
   15f46:	f803 2c50 	strb.w	r2, [r3, #-80]
  while (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
   15f4a:	e7e5      	b.n	15f18 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x2c0>
   15f4c:	00015c59 	.word	0x00015c59
   15f50:	00000000 	.word	0x00000000
   15f54:	000197b0 	.word	0x000197b0
   15f58:	4f000000 	.word	0x4f000000
   15f5c:	cccccccd 	.word	0xcccccccd
   15f60:	66666667 	.word	0x66666667
  }

  // handle sign
  if ((len == width) && (negative || (flags & FLAGS_PLUS) || (flags & FLAGS_SPACE))) {
   15f64:	9a18      	ldr	r2, [sp, #96]	; 0x60
   15f66:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   15f68:	429a      	cmp	r2, r3
   15f6a:	d110      	bne.n	15f8e <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x336>
   15f6c:	f89d 305f 	ldrb.w	r3, [sp, #95]	; 0x5f
   15f70:	2b00      	cmp	r3, #0
   15f72:	d109      	bne.n	15f88 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x330>
   15f74:	9b20      	ldr	r3, [sp, #128]	; 0x80
   15f76:	f003 0304 	and.w	r3, r3, #4
   15f7a:	2b00      	cmp	r3, #0
   15f7c:	d104      	bne.n	15f88 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x330>
   15f7e:	9b20      	ldr	r3, [sp, #128]	; 0x80
   15f80:	f003 0308 	and.w	r3, r3, #8
   15f84:	2b00      	cmp	r3, #0
   15f86:	d002      	beq.n	15f8e <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x336>
    len--;
   15f88:	9b18      	ldr	r3, [sp, #96]	; 0x60
   15f8a:	3b01      	subs	r3, #1
   15f8c:	9318      	str	r3, [sp, #96]	; 0x60
  }
  if (len < PRINTF_FTOA_BUFFER_SIZE) {
   15f8e:	9b18      	ldr	r3, [sp, #96]	; 0x60
   15f90:	2b1f      	cmp	r3, #31
   15f92:	d827      	bhi.n	15fe4 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x38c>
    if (negative) {
   15f94:	f89d 305f 	ldrb.w	r3, [sp, #95]	; 0x5f
   15f98:	2b00      	cmp	r3, #0
   15f9a:	d008      	beq.n	15fae <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x356>
      buf[len++] = '-';
   15f9c:	9b18      	ldr	r3, [sp, #96]	; 0x60
   15f9e:	1c5a      	adds	r2, r3, #1
   15fa0:	9218      	str	r2, [sp, #96]	; 0x60
   15fa2:	aa1a      	add	r2, sp, #104	; 0x68
   15fa4:	4413      	add	r3, r2
   15fa6:	222d      	movs	r2, #45	; 0x2d
   15fa8:	f803 2c50 	strb.w	r2, [r3, #-80]
   15fac:	e01a      	b.n	15fe4 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x38c>
    }
    else if (flags & FLAGS_PLUS) {
   15fae:	9b20      	ldr	r3, [sp, #128]	; 0x80
   15fb0:	f003 0304 	and.w	r3, r3, #4
   15fb4:	2b00      	cmp	r3, #0
   15fb6:	d008      	beq.n	15fca <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x372>
      buf[len++] = '+';  // ignore the space if the '+' exists
   15fb8:	9b18      	ldr	r3, [sp, #96]	; 0x60
   15fba:	1c5a      	adds	r2, r3, #1
   15fbc:	9218      	str	r2, [sp, #96]	; 0x60
   15fbe:	aa1a      	add	r2, sp, #104	; 0x68
   15fc0:	4413      	add	r3, r2
   15fc2:	222b      	movs	r2, #43	; 0x2b
   15fc4:	f803 2c50 	strb.w	r2, [r3, #-80]
   15fc8:	e00c      	b.n	15fe4 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x38c>
    }
    else if (flags & FLAGS_SPACE) {
   15fca:	9b20      	ldr	r3, [sp, #128]	; 0x80
   15fcc:	f003 0308 	and.w	r3, r3, #8
   15fd0:	2b00      	cmp	r3, #0
   15fd2:	d007      	beq.n	15fe4 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x38c>
      buf[len++] = ' ';
   15fd4:	9b18      	ldr	r3, [sp, #96]	; 0x60
   15fd6:	1c5a      	adds	r2, r3, #1
   15fd8:	9218      	str	r2, [sp, #96]	; 0x60
   15fda:	aa1a      	add	r2, sp, #104	; 0x68
   15fdc:	4413      	add	r3, r2
   15fde:	2220      	movs	r2, #32
   15fe0:	f803 2c50 	strb.w	r2, [r3, #-80]
    }
  }

  // pad spaces up to given width
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
   15fe4:	9b20      	ldr	r3, [sp, #128]	; 0x80
   15fe6:	f003 0302 	and.w	r3, r3, #2
   15fea:	2b00      	cmp	r3, #0
   15fec:	d116      	bne.n	1601c <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x3c4>
   15fee:	9b20      	ldr	r3, [sp, #128]	; 0x80
   15ff0:	f003 0301 	and.w	r3, r3, #1
   15ff4:	2b00      	cmp	r3, #0
   15ff6:	d111      	bne.n	1601c <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x3c4>
    for (size_t i = len; i < width; i++) {
   15ff8:	9b18      	ldr	r3, [sp, #96]	; 0x60
   15ffa:	9313      	str	r3, [sp, #76]	; 0x4c
   15ffc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   15ffe:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   16000:	429a      	cmp	r2, r3
   16002:	d20b      	bcs.n	1601c <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x3c4>
      out(' ', buffer, idx++, maxlen);
   16004:	9a03      	ldr	r2, [sp, #12]
   16006:	1c53      	adds	r3, r2, #1
   16008:	9303      	str	r3, [sp, #12]
   1600a:	9c05      	ldr	r4, [sp, #20]
   1600c:	9b02      	ldr	r3, [sp, #8]
   1600e:	9904      	ldr	r1, [sp, #16]
   16010:	2020      	movs	r0, #32
   16012:	47a0      	blx	r4
    for (size_t i = len; i < width; i++) {
   16014:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   16016:	3301      	adds	r3, #1
   16018:	9313      	str	r3, [sp, #76]	; 0x4c
   1601a:	e7ef      	b.n	15ffc <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x3a4>
    }
  }

  // reverse string
  for (size_t i = 0U; i < len; i++) {
   1601c:	2300      	movs	r3, #0
   1601e:	9312      	str	r3, [sp, #72]	; 0x48
   16020:	9a12      	ldr	r2, [sp, #72]	; 0x48
   16022:	9b18      	ldr	r3, [sp, #96]	; 0x60
   16024:	429a      	cmp	r2, r3
   16026:	d212      	bcs.n	1604e <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x3f6>
    out(buf[len - i - 1U], buffer, idx++, maxlen);
   16028:	9a18      	ldr	r2, [sp, #96]	; 0x60
   1602a:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1602c:	1ad3      	subs	r3, r2, r3
   1602e:	3b01      	subs	r3, #1
   16030:	aa1a      	add	r2, sp, #104	; 0x68
   16032:	4413      	add	r3, r2
   16034:	f813 0c50 	ldrb.w	r0, [r3, #-80]
   16038:	9a03      	ldr	r2, [sp, #12]
   1603a:	1c53      	adds	r3, r2, #1
   1603c:	9303      	str	r3, [sp, #12]
   1603e:	9c05      	ldr	r4, [sp, #20]
   16040:	9b02      	ldr	r3, [sp, #8]
   16042:	9904      	ldr	r1, [sp, #16]
   16044:	47a0      	blx	r4
  for (size_t i = 0U; i < len; i++) {
   16046:	9b12      	ldr	r3, [sp, #72]	; 0x48
   16048:	3301      	adds	r3, #1
   1604a:	9312      	str	r3, [sp, #72]	; 0x48
   1604c:	e7e8      	b.n	16020 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x3c8>
  }

  // append pad spaces up to given width
  if (flags & FLAGS_LEFT) {
   1604e:	9b20      	ldr	r3, [sp, #128]	; 0x80
   16050:	f003 0302 	and.w	r3, r3, #2
   16054:	2b00      	cmp	r3, #0
   16056:	d00e      	beq.n	16076 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x41e>
    while (idx - start_idx < width) {
   16058:	9a03      	ldr	r2, [sp, #12]
   1605a:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1605c:	1ad3      	subs	r3, r2, r3
   1605e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   16060:	429a      	cmp	r2, r3
   16062:	d908      	bls.n	16076 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x41e>
      out(' ', buffer, idx++, maxlen);
   16064:	9a03      	ldr	r2, [sp, #12]
   16066:	1c53      	adds	r3, r2, #1
   16068:	9303      	str	r3, [sp, #12]
   1606a:	9c05      	ldr	r4, [sp, #20]
   1606c:	9b02      	ldr	r3, [sp, #8]
   1606e:	9904      	ldr	r1, [sp, #16]
   16070:	2020      	movs	r0, #32
   16072:	47a0      	blx	r4
    while (idx - start_idx < width) {
   16074:	e7f0      	b.n	16058 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x400>
    }
  }

  return idx;
   16076:	9c03      	ldr	r4, [sp, #12]
   16078:	462b      	mov	r3, r5
   1607a:	4619      	mov	r1, r3
   1607c:	4803      	ldr	r0, [pc, #12]	; (1608c <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x434>)
   1607e:	f7ff fa3b 	bl	154f8 <__cyg_profile_func_exit>
   16082:	4623      	mov	r3, r4
}
   16084:	4618      	mov	r0, r3
   16086:	b01b      	add	sp, #108	; 0x6c
   16088:	bd30      	pop	{r4, r5, pc}
   1608a:	bf00      	nop
   1608c:	00015c59 	.word	0x00015c59

00016090 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)>:
#endif  // PRINTF_SUPPORT_FLOAT


// internal vsnprintf
static int _vsnprintf(out_fct_type out, char* buffer, const size_t maxlen, const char* format, va_list va)
{
   16090:	b570      	push	{r4, r5, r6, lr}
   16092:	b0a0      	sub	sp, #128	; 0x80
   16094:	4676      	mov	r6, lr
   16096:	900d      	str	r0, [sp, #52]	; 0x34
   16098:	910c      	str	r1, [sp, #48]	; 0x30
   1609a:	920b      	str	r2, [sp, #44]	; 0x2c
   1609c:	930a      	str	r3, [sp, #40]	; 0x28
   1609e:	4633      	mov	r3, r6
   160a0:	4619      	mov	r1, r3
   160a2:	48a7      	ldr	r0, [pc, #668]	; (16340 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2b0>)
   160a4:	f7ff fa14 	bl	154d0 <__cyg_profile_func_enter>
  unsigned int flags, width, precision, n;
  size_t idx = 0U;
   160a8:	2300      	movs	r3, #0
   160aa:	931b      	str	r3, [sp, #108]	; 0x6c

  if (!buffer) {
   160ac:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   160ae:	2b00      	cmp	r3, #0
   160b0:	d101      	bne.n	160b6 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x26>
    // use null output function
    out = _out_null;
   160b2:	4ba4      	ldr	r3, [pc, #656]	; (16344 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2b4>)
   160b4:	930d      	str	r3, [sp, #52]	; 0x34
  }

  while (*format)
   160b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   160b8:	781b      	ldrb	r3, [r3, #0]
   160ba:	2b00      	cmp	r3, #0
   160bc:	f000 8448 	beq.w	16950 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8c0>
  {
    // format specifier?  %[flags][width][.precision][length]
    if (*format != '%') {
   160c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   160c2:	781b      	ldrb	r3, [r3, #0]
   160c4:	2b25      	cmp	r3, #37	; 0x25
   160c6:	d00d      	beq.n	160e4 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x54>
      // no
      out(*format, buffer, idx++, maxlen);
   160c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   160ca:	7818      	ldrb	r0, [r3, #0]
   160cc:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   160ce:	1c53      	adds	r3, r2, #1
   160d0:	931b      	str	r3, [sp, #108]	; 0x6c
   160d2:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   160d4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   160d6:	990c      	ldr	r1, [sp, #48]	; 0x30
   160d8:	47a0      	blx	r4
      format++;
   160da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   160dc:	3301      	adds	r3, #1
   160de:	930a      	str	r3, [sp, #40]	; 0x28
      continue;
   160e0:	f000 bc34 	b.w	1694c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8bc>
    }
    else {
      // yes, evaluate it
      format++;
   160e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   160e6:	3301      	adds	r3, #1
   160e8:	930a      	str	r3, [sp, #40]	; 0x28
    }

    // evaluate flags
    flags = 0U;
   160ea:	2300      	movs	r3, #0
   160ec:	931f      	str	r3, [sp, #124]	; 0x7c
    do {
      switch (*format) {
   160ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   160f0:	781b      	ldrb	r3, [r3, #0]
   160f2:	3b20      	subs	r3, #32
   160f4:	2b10      	cmp	r3, #16
   160f6:	d857      	bhi.n	161a8 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x118>
   160f8:	a201      	add	r2, pc, #4	; (adr r2, 16100 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x70>)
   160fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   160fe:	bf00      	nop
   16100:	00016181 	.word	0x00016181
   16104:	000161a9 	.word	0x000161a9
   16108:	000161a9 	.word	0x000161a9
   1610c:	00016195 	.word	0x00016195
   16110:	000161a9 	.word	0x000161a9
   16114:	000161a9 	.word	0x000161a9
   16118:	000161a9 	.word	0x000161a9
   1611c:	000161a9 	.word	0x000161a9
   16120:	000161a9 	.word	0x000161a9
   16124:	000161a9 	.word	0x000161a9
   16128:	000161a9 	.word	0x000161a9
   1612c:	0001616d 	.word	0x0001616d
   16130:	000161a9 	.word	0x000161a9
   16134:	00016159 	.word	0x00016159
   16138:	000161a9 	.word	0x000161a9
   1613c:	000161a9 	.word	0x000161a9
   16140:	00016145 	.word	0x00016145
        case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
   16144:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   16146:	f043 0301 	orr.w	r3, r3, #1
   1614a:	931f      	str	r3, [sp, #124]	; 0x7c
   1614c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1614e:	3301      	adds	r3, #1
   16150:	930a      	str	r3, [sp, #40]	; 0x28
   16152:	2301      	movs	r3, #1
   16154:	931c      	str	r3, [sp, #112]	; 0x70
   16156:	e02a      	b.n	161ae <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x11e>
        case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
   16158:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   1615a:	f043 0302 	orr.w	r3, r3, #2
   1615e:	931f      	str	r3, [sp, #124]	; 0x7c
   16160:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   16162:	3301      	adds	r3, #1
   16164:	930a      	str	r3, [sp, #40]	; 0x28
   16166:	2301      	movs	r3, #1
   16168:	931c      	str	r3, [sp, #112]	; 0x70
   1616a:	e020      	b.n	161ae <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x11e>
        case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
   1616c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   1616e:	f043 0304 	orr.w	r3, r3, #4
   16172:	931f      	str	r3, [sp, #124]	; 0x7c
   16174:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   16176:	3301      	adds	r3, #1
   16178:	930a      	str	r3, [sp, #40]	; 0x28
   1617a:	2301      	movs	r3, #1
   1617c:	931c      	str	r3, [sp, #112]	; 0x70
   1617e:	e016      	b.n	161ae <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x11e>
        case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
   16180:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   16182:	f043 0308 	orr.w	r3, r3, #8
   16186:	931f      	str	r3, [sp, #124]	; 0x7c
   16188:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1618a:	3301      	adds	r3, #1
   1618c:	930a      	str	r3, [sp, #40]	; 0x28
   1618e:	2301      	movs	r3, #1
   16190:	931c      	str	r3, [sp, #112]	; 0x70
   16192:	e00c      	b.n	161ae <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x11e>
        case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;
   16194:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   16196:	f043 0310 	orr.w	r3, r3, #16
   1619a:	931f      	str	r3, [sp, #124]	; 0x7c
   1619c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1619e:	3301      	adds	r3, #1
   161a0:	930a      	str	r3, [sp, #40]	; 0x28
   161a2:	2301      	movs	r3, #1
   161a4:	931c      	str	r3, [sp, #112]	; 0x70
   161a6:	e002      	b.n	161ae <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x11e>
        default :                                   n = 0U; break;
   161a8:	2300      	movs	r3, #0
   161aa:	931c      	str	r3, [sp, #112]	; 0x70
   161ac:	bf00      	nop
      }
    } while (n);
   161ae:	9b1c      	ldr	r3, [sp, #112]	; 0x70
   161b0:	2b00      	cmp	r3, #0
   161b2:	d000      	beq.n	161b6 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x126>
    do {
   161b4:	e79b      	b.n	160ee <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x5e>

    // evaluate width field
    width = 0U;
   161b6:	2300      	movs	r3, #0
   161b8:	931e      	str	r3, [sp, #120]	; 0x78
    if (_is_digit(*format)) {
   161ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   161bc:	781b      	ldrb	r3, [r3, #0]
   161be:	4618      	mov	r0, r3
   161c0:	f7ff fade 	bl	15780 <_is_digit(char)>
   161c4:	4603      	mov	r3, r0
   161c6:	2b00      	cmp	r3, #0
   161c8:	d005      	beq.n	161d6 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x146>
      width = _atoi(&format);
   161ca:	ab0a      	add	r3, sp, #40	; 0x28
   161cc:	4618      	mov	r0, r3
   161ce:	f7ff faf9 	bl	157c4 <_atoi(char const**)>
   161d2:	901e      	str	r0, [sp, #120]	; 0x78
   161d4:	e018      	b.n	16208 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x178>
    }
    else if (*format == '*') {
   161d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   161d8:	781b      	ldrb	r3, [r3, #0]
   161da:	2b2a      	cmp	r3, #42	; 0x2a
   161dc:	d114      	bne.n	16208 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x178>
      const int w = va_arg(va, int);
   161de:	9b24      	ldr	r3, [sp, #144]	; 0x90
   161e0:	1d1a      	adds	r2, r3, #4
   161e2:	9224      	str	r2, [sp, #144]	; 0x90
   161e4:	681b      	ldr	r3, [r3, #0]
   161e6:	9316      	str	r3, [sp, #88]	; 0x58
      if (w < 0) {
   161e8:	9b16      	ldr	r3, [sp, #88]	; 0x58
   161ea:	2b00      	cmp	r3, #0
   161ec:	da07      	bge.n	161fe <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x16e>
        flags |= FLAGS_LEFT;    // reverse padding
   161ee:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   161f0:	f043 0302 	orr.w	r3, r3, #2
   161f4:	931f      	str	r3, [sp, #124]	; 0x7c
        width = (unsigned int)-w;
   161f6:	9b16      	ldr	r3, [sp, #88]	; 0x58
   161f8:	425b      	negs	r3, r3
   161fa:	931e      	str	r3, [sp, #120]	; 0x78
   161fc:	e001      	b.n	16202 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x172>
      }
      else {
        width = (unsigned int)w;
   161fe:	9b16      	ldr	r3, [sp, #88]	; 0x58
   16200:	931e      	str	r3, [sp, #120]	; 0x78
      }
      format++;
   16202:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   16204:	3301      	adds	r3, #1
   16206:	930a      	str	r3, [sp, #40]	; 0x28
    }

    // evaluate precision field
    precision = 0U;
   16208:	2300      	movs	r3, #0
   1620a:	931d      	str	r3, [sp, #116]	; 0x74
    if (*format == '.') {
   1620c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1620e:	781b      	ldrb	r3, [r3, #0]
   16210:	2b2e      	cmp	r3, #46	; 0x2e
   16212:	d124      	bne.n	1625e <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x1ce>
      flags |= FLAGS_PRECISION;
   16214:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   16216:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
   1621a:	931f      	str	r3, [sp, #124]	; 0x7c
      format++;
   1621c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1621e:	3301      	adds	r3, #1
   16220:	930a      	str	r3, [sp, #40]	; 0x28
      if (_is_digit(*format)) {
   16222:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   16224:	781b      	ldrb	r3, [r3, #0]
   16226:	4618      	mov	r0, r3
   16228:	f7ff faaa 	bl	15780 <_is_digit(char)>
   1622c:	4603      	mov	r3, r0
   1622e:	2b00      	cmp	r3, #0
   16230:	d005      	beq.n	1623e <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x1ae>
        precision = _atoi(&format);
   16232:	ab0a      	add	r3, sp, #40	; 0x28
   16234:	4618      	mov	r0, r3
   16236:	f7ff fac5 	bl	157c4 <_atoi(char const**)>
   1623a:	901d      	str	r0, [sp, #116]	; 0x74
   1623c:	e00f      	b.n	1625e <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x1ce>
      }
      else if (*format == '*') {
   1623e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   16240:	781b      	ldrb	r3, [r3, #0]
   16242:	2b2a      	cmp	r3, #42	; 0x2a
   16244:	d10b      	bne.n	1625e <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x1ce>
        const int prec = (int)va_arg(va, int);
   16246:	9b24      	ldr	r3, [sp, #144]	; 0x90
   16248:	1d1a      	adds	r2, r3, #4
   1624a:	9224      	str	r2, [sp, #144]	; 0x90
   1624c:	681b      	ldr	r3, [r3, #0]
   1624e:	9315      	str	r3, [sp, #84]	; 0x54
        precision = prec > 0 ? (unsigned int)prec : 0U;
   16250:	9b15      	ldr	r3, [sp, #84]	; 0x54
   16252:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   16256:	931d      	str	r3, [sp, #116]	; 0x74
        format++;
   16258:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1625a:	3301      	adds	r3, #1
   1625c:	930a      	str	r3, [sp, #40]	; 0x28
      }
    }

    // evaluate length field
    switch (*format) {
   1625e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   16260:	781b      	ldrb	r3, [r3, #0]
   16262:	3b68      	subs	r3, #104	; 0x68
   16264:	2b12      	cmp	r3, #18
   16266:	d867      	bhi.n	16338 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2a8>
   16268:	a201      	add	r2, pc, #4	; (adr r2, 16270 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x1e0>)
   1626a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1626e:	bf00      	nop
   16270:	000162e3 	.word	0x000162e3
   16274:	00016339 	.word	0x00016339
   16278:	00016319 	.word	0x00016319
   1627c:	00016339 	.word	0x00016339
   16280:	000162bd 	.word	0x000162bd
   16284:	00016339 	.word	0x00016339
   16288:	00016339 	.word	0x00016339
   1628c:	00016339 	.word	0x00016339
   16290:	00016339 	.word	0x00016339
   16294:	00016339 	.word	0x00016339
   16298:	00016339 	.word	0x00016339
   1629c:	00016339 	.word	0x00016339
   162a0:	00016309 	.word	0x00016309
   162a4:	00016339 	.word	0x00016339
   162a8:	00016339 	.word	0x00016339
   162ac:	00016339 	.word	0x00016339
   162b0:	00016339 	.word	0x00016339
   162b4:	00016339 	.word	0x00016339
   162b8:	00016329 	.word	0x00016329
      case 'l' :
        flags |= FLAGS_LONG;
   162bc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   162be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   162c2:	931f      	str	r3, [sp, #124]	; 0x7c
        format++;
   162c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   162c6:	3301      	adds	r3, #1
   162c8:	930a      	str	r3, [sp, #40]	; 0x28
        if (*format == 'l') {
   162ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   162cc:	781b      	ldrb	r3, [r3, #0]
   162ce:	2b6c      	cmp	r3, #108	; 0x6c
   162d0:	d134      	bne.n	1633c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2ac>
          flags |= FLAGS_LONG_LONG;
   162d2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   162d4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   162d8:	931f      	str	r3, [sp, #124]	; 0x7c
          format++;
   162da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   162dc:	3301      	adds	r3, #1
   162de:	930a      	str	r3, [sp, #40]	; 0x28
        }
        break;
   162e0:	e02c      	b.n	1633c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2ac>
      case 'h' :
        flags |= FLAGS_SHORT;
   162e2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   162e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   162e8:	931f      	str	r3, [sp, #124]	; 0x7c
        format++;
   162ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   162ec:	3301      	adds	r3, #1
   162ee:	930a      	str	r3, [sp, #40]	; 0x28
        if (*format == 'h') {
   162f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   162f2:	781b      	ldrb	r3, [r3, #0]
   162f4:	2b68      	cmp	r3, #104	; 0x68
   162f6:	d127      	bne.n	16348 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2b8>
          flags |= FLAGS_CHAR;
   162f8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   162fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   162fe:	931f      	str	r3, [sp, #124]	; 0x7c
          format++;
   16300:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   16302:	3301      	adds	r3, #1
   16304:	930a      	str	r3, [sp, #40]	; 0x28
        }
        break;
   16306:	e01f      	b.n	16348 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2b8>
#if defined(PRINTF_SUPPORT_PTRDIFF_T)
      case 't' :
        flags |= (sizeof(ptrdiff_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
   16308:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   1630a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   1630e:	931f      	str	r3, [sp, #124]	; 0x7c
        format++;
   16310:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   16312:	3301      	adds	r3, #1
   16314:	930a      	str	r3, [sp, #40]	; 0x28
        break;
   16316:	e018      	b.n	1634a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2ba>
#endif
      case 'j' :
        flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
   16318:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   1631a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   1631e:	931f      	str	r3, [sp, #124]	; 0x7c
        format++;
   16320:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   16322:	3301      	adds	r3, #1
   16324:	930a      	str	r3, [sp, #40]	; 0x28
        break;
   16326:	e010      	b.n	1634a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2ba>
      case 'z' :
        flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
   16328:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   1632a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   1632e:	931f      	str	r3, [sp, #124]	; 0x7c
        format++;
   16330:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   16332:	3301      	adds	r3, #1
   16334:	930a      	str	r3, [sp, #40]	; 0x28
        break;
   16336:	e008      	b.n	1634a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2ba>
      default :
        break;
   16338:	bf00      	nop
   1633a:	e006      	b.n	1634a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2ba>
        break;
   1633c:	bf00      	nop
   1633e:	e004      	b.n	1634a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2ba>
   16340:	00016091 	.word	0x00016091
   16344:	000156c9 	.word	0x000156c9
        break;
   16348:	bf00      	nop
    }

    // evaluate specifier
    switch (*format) {
   1634a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1634c:	781b      	ldrb	r3, [r3, #0]
   1634e:	3b25      	subs	r3, #37	; 0x25
   16350:	2b53      	cmp	r3, #83	; 0x53
   16352:	f200 82ee 	bhi.w	16932 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8a2>
   16356:	a201      	add	r2, pc, #4	; (adr r2, 1635c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2cc>)
   16358:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1635c:	0001691b 	.word	0x0001691b
   16360:	00016933 	.word	0x00016933
   16364:	00016933 	.word	0x00016933
   16368:	00016933 	.word	0x00016933
   1636c:	00016933 	.word	0x00016933
   16370:	00016933 	.word	0x00016933
   16374:	00016933 	.word	0x00016933
   16378:	00016933 	.word	0x00016933
   1637c:	00016933 	.word	0x00016933
   16380:	00016933 	.word	0x00016933
   16384:	00016933 	.word	0x00016933
   16388:	00016933 	.word	0x00016933
   1638c:	00016933 	.word	0x00016933
   16390:	00016933 	.word	0x00016933
   16394:	00016933 	.word	0x00016933
   16398:	00016933 	.word	0x00016933
   1639c:	00016933 	.word	0x00016933
   163a0:	00016933 	.word	0x00016933
   163a4:	00016933 	.word	0x00016933
   163a8:	00016933 	.word	0x00016933
   163ac:	00016933 	.word	0x00016933
   163b0:	00016933 	.word	0x00016933
   163b4:	00016933 	.word	0x00016933
   163b8:	00016933 	.word	0x00016933
   163bc:	00016933 	.word	0x00016933
   163c0:	00016933 	.word	0x00016933
   163c4:	00016933 	.word	0x00016933
   163c8:	00016933 	.word	0x00016933
   163cc:	00016933 	.word	0x00016933
   163d0:	00016933 	.word	0x00016933
   163d4:	00016933 	.word	0x00016933
   163d8:	00016933 	.word	0x00016933
   163dc:	00016933 	.word	0x00016933
   163e0:	00016739 	.word	0x00016739
   163e4:	00016933 	.word	0x00016933
   163e8:	00016933 	.word	0x00016933
   163ec:	00016933 	.word	0x00016933
   163f0:	00016933 	.word	0x00016933
   163f4:	00016933 	.word	0x00016933
   163f8:	00016933 	.word	0x00016933
   163fc:	00016933 	.word	0x00016933
   16400:	00016933 	.word	0x00016933
   16404:	00016933 	.word	0x00016933
   16408:	00016933 	.word	0x00016933
   1640c:	00016933 	.word	0x00016933
   16410:	00016933 	.word	0x00016933
   16414:	00016933 	.word	0x00016933
   16418:	00016933 	.word	0x00016933
   1641c:	00016933 	.word	0x00016933
   16420:	00016933 	.word	0x00016933
   16424:	00016933 	.word	0x00016933
   16428:	000164ad 	.word	0x000164ad
   1642c:	00016933 	.word	0x00016933
   16430:	00016933 	.word	0x00016933
   16434:	00016933 	.word	0x00016933
   16438:	00016933 	.word	0x00016933
   1643c:	00016933 	.word	0x00016933
   16440:	00016933 	.word	0x00016933
   16444:	00016933 	.word	0x00016933
   16448:	00016933 	.word	0x00016933
   1644c:	00016933 	.word	0x00016933
   16450:	000164ad 	.word	0x000164ad
   16454:	00016775 	.word	0x00016775
   16458:	000164ad 	.word	0x000164ad
   1645c:	00016933 	.word	0x00016933
   16460:	00016739 	.word	0x00016739
   16464:	00016933 	.word	0x00016933
   16468:	00016933 	.word	0x00016933
   1646c:	000164ad 	.word	0x000164ad
   16470:	00016933 	.word	0x00016933
   16474:	00016933 	.word	0x00016933
   16478:	00016933 	.word	0x00016933
   1647c:	00016933 	.word	0x00016933
   16480:	00016933 	.word	0x00016933
   16484:	000164ad 	.word	0x000164ad
   16488:	000168d3 	.word	0x000168d3
   1648c:	00016933 	.word	0x00016933
   16490:	00016933 	.word	0x00016933
   16494:	000167fd 	.word	0x000167fd
   16498:	00016933 	.word	0x00016933
   1649c:	000164ad 	.word	0x000164ad
   164a0:	00016933 	.word	0x00016933
   164a4:	00016933 	.word	0x00016933
   164a8:	000164ad 	.word	0x000164ad
      case 'X' :
      case 'o' :
      case 'b' : {
        // set the base
        unsigned int base;
        if (*format == 'x' || *format == 'X') {
   164ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   164ae:	781b      	ldrb	r3, [r3, #0]
   164b0:	2b78      	cmp	r3, #120	; 0x78
   164b2:	d003      	beq.n	164bc <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x42c>
   164b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   164b6:	781b      	ldrb	r3, [r3, #0]
   164b8:	2b58      	cmp	r3, #88	; 0x58
   164ba:	d102      	bne.n	164c2 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x432>
          base = 16U;
   164bc:	2310      	movs	r3, #16
   164be:	931a      	str	r3, [sp, #104]	; 0x68
   164c0:	e013      	b.n	164ea <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x45a>
        }
        else if (*format == 'o') {
   164c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   164c4:	781b      	ldrb	r3, [r3, #0]
   164c6:	2b6f      	cmp	r3, #111	; 0x6f
   164c8:	d102      	bne.n	164d0 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x440>
          base =  8U;
   164ca:	2308      	movs	r3, #8
   164cc:	931a      	str	r3, [sp, #104]	; 0x68
   164ce:	e00c      	b.n	164ea <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x45a>
        }
        else if (*format == 'b') {
   164d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   164d2:	781b      	ldrb	r3, [r3, #0]
   164d4:	2b62      	cmp	r3, #98	; 0x62
   164d6:	d102      	bne.n	164de <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x44e>
          base =  2U;
   164d8:	2302      	movs	r3, #2
   164da:	931a      	str	r3, [sp, #104]	; 0x68
   164dc:	e005      	b.n	164ea <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x45a>
        }
        else {
          base = 10U;
   164de:	230a      	movs	r3, #10
   164e0:	931a      	str	r3, [sp, #104]	; 0x68
          flags &= ~FLAGS_HASH;   // no hash for dec format
   164e2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   164e4:	f023 0310 	bic.w	r3, r3, #16
   164e8:	931f      	str	r3, [sp, #124]	; 0x7c
        }
        // uppercase
        if (*format == 'X') {
   164ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   164ec:	781b      	ldrb	r3, [r3, #0]
   164ee:	2b58      	cmp	r3, #88	; 0x58
   164f0:	d103      	bne.n	164fa <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x46a>
          flags |= FLAGS_UPPERCASE;
   164f2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   164f4:	f043 0320 	orr.w	r3, r3, #32
   164f8:	931f      	str	r3, [sp, #124]	; 0x7c
        }

        // no plus or space flag for u, x, X, o, b
        if ((*format != 'i') && (*format != 'd')) {
   164fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   164fc:	781b      	ldrb	r3, [r3, #0]
   164fe:	2b69      	cmp	r3, #105	; 0x69
   16500:	d007      	beq.n	16512 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x482>
   16502:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   16504:	781b      	ldrb	r3, [r3, #0]
   16506:	2b64      	cmp	r3, #100	; 0x64
   16508:	d003      	beq.n	16512 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x482>
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
   1650a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   1650c:	f023 030c 	bic.w	r3, r3, #12
   16510:	931f      	str	r3, [sp, #124]	; 0x7c
        }

        // ignore '0' flag when precision is given
        if (flags & FLAGS_PRECISION) {
   16512:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   16514:	f403 6380 	and.w	r3, r3, #1024	; 0x400
   16518:	2b00      	cmp	r3, #0
   1651a:	d003      	beq.n	16524 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x494>
          flags &= ~FLAGS_ZEROPAD;
   1651c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   1651e:	f023 0301 	bic.w	r3, r3, #1
   16522:	931f      	str	r3, [sp, #124]	; 0x7c
        }

        // convert the integer
        if ((*format == 'i') || (*format == 'd')) {
   16524:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   16526:	781b      	ldrb	r3, [r3, #0]
   16528:	2b69      	cmp	r3, #105	; 0x69
   1652a:	d004      	beq.n	16536 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x4a6>
   1652c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1652e:	781b      	ldrb	r3, [r3, #0]
   16530:	2b64      	cmp	r3, #100	; 0x64
   16532:	f040 808d 	bne.w	16650 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x5c0>
          // signed
          if (flags & FLAGS_LONG_LONG) {
   16536:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   16538:	f403 7300 	and.w	r3, r3, #512	; 0x200
   1653c:	2b00      	cmp	r3, #0
   1653e:	d02e      	beq.n	1659e <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x50e>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            const long long value = va_arg(va, long long);
   16540:	9b24      	ldr	r3, [sp, #144]	; 0x90
   16542:	3307      	adds	r3, #7
   16544:	f023 0307 	bic.w	r3, r3, #7
   16548:	f103 0208 	add.w	r2, r3, #8
   1654c:	9224      	str	r2, [sp, #144]	; 0x90
   1654e:	e9d3 3400 	ldrd	r3, r4, [r3]
   16552:	e9cd 340e 	strd	r3, r4, [sp, #56]	; 0x38
            idx = _ntoa_long_long(out, buffer, idx, maxlen, (unsigned long long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
   16556:	e9dd 340e 	ldrd	r3, r4, [sp, #56]	; 0x38
   1655a:	2b00      	cmp	r3, #0
   1655c:	f174 0200 	sbcs.w	r2, r4, #0
   16560:	da02      	bge.n	16568 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x4d8>
   16562:	425b      	negs	r3, r3
   16564:	eb64 0444 	sbc.w	r4, r4, r4, lsl #1
   16568:	4619      	mov	r1, r3
   1656a:	4622      	mov	r2, r4
   1656c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1656e:	0fdb      	lsrs	r3, r3, #31
   16570:	b2d8      	uxtb	r0, r3
   16572:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   16574:	f04f 0400 	mov.w	r4, #0
   16578:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
   1657a:	9508      	str	r5, [sp, #32]
   1657c:	9d1e      	ldr	r5, [sp, #120]	; 0x78
   1657e:	9507      	str	r5, [sp, #28]
   16580:	9d1d      	ldr	r5, [sp, #116]	; 0x74
   16582:	9506      	str	r5, [sp, #24]
   16584:	e9cd 3404 	strd	r3, r4, [sp, #16]
   16588:	9002      	str	r0, [sp, #8]
   1658a:	e9cd 1200 	strd	r1, r2, [sp]
   1658e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   16590:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   16592:	990c      	ldr	r1, [sp, #48]	; 0x30
   16594:	980d      	ldr	r0, [sp, #52]	; 0x34
   16596:	f7ff fae5 	bl	15b64 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)>
   1659a:	901b      	str	r0, [sp, #108]	; 0x6c
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
          }
          else {
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
          }
   1659c:	e0c8      	b.n	16730 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x6a0>
          else if (flags & FLAGS_LONG) {
   1659e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   165a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
   165a4:	2b00      	cmp	r3, #0
   165a6:	d01e      	beq.n	165e6 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x556>
            const long value = va_arg(va, long);
   165a8:	9b24      	ldr	r3, [sp, #144]	; 0x90
   165aa:	1d1a      	adds	r2, r3, #4
   165ac:	9224      	str	r2, [sp, #144]	; 0x90
   165ae:	681b      	ldr	r3, [r3, #0]
   165b0:	9311      	str	r3, [sp, #68]	; 0x44
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
   165b2:	9b11      	ldr	r3, [sp, #68]	; 0x44
   165b4:	2b00      	cmp	r3, #0
   165b6:	bfb8      	it	lt
   165b8:	425b      	neglt	r3, r3
   165ba:	4619      	mov	r1, r3
   165bc:	9b11      	ldr	r3, [sp, #68]	; 0x44
   165be:	0fdb      	lsrs	r3, r3, #31
   165c0:	b2db      	uxtb	r3, r3
   165c2:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   165c4:	9205      	str	r2, [sp, #20]
   165c6:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   165c8:	9204      	str	r2, [sp, #16]
   165ca:	9a1d      	ldr	r2, [sp, #116]	; 0x74
   165cc:	9203      	str	r2, [sp, #12]
   165ce:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   165d0:	9202      	str	r2, [sp, #8]
   165d2:	9301      	str	r3, [sp, #4]
   165d4:	9100      	str	r1, [sp, #0]
   165d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   165d8:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   165da:	990c      	ldr	r1, [sp, #48]	; 0x30
   165dc:	980d      	ldr	r0, [sp, #52]	; 0x34
   165de:	f7ff fa4f 	bl	15a80 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)>
   165e2:	901b      	str	r0, [sp, #108]	; 0x6c
          }
   165e4:	e0a4      	b.n	16730 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x6a0>
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
   165e6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   165e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
   165ec:	2b00      	cmp	r3, #0
   165ee:	d005      	beq.n	165fc <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x56c>
   165f0:	9b24      	ldr	r3, [sp, #144]	; 0x90
   165f2:	1d1a      	adds	r2, r3, #4
   165f4:	9224      	str	r2, [sp, #144]	; 0x90
   165f6:	681b      	ldr	r3, [r3, #0]
   165f8:	b2db      	uxtb	r3, r3
   165fa:	e00e      	b.n	1661a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x58a>
   165fc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   165fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
   16602:	2b00      	cmp	r3, #0
   16604:	d005      	beq.n	16612 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x582>
   16606:	9b24      	ldr	r3, [sp, #144]	; 0x90
   16608:	1d1a      	adds	r2, r3, #4
   1660a:	9224      	str	r2, [sp, #144]	; 0x90
   1660c:	681b      	ldr	r3, [r3, #0]
   1660e:	b21b      	sxth	r3, r3
   16610:	e003      	b.n	1661a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x58a>
   16612:	9b24      	ldr	r3, [sp, #144]	; 0x90
   16614:	1d1a      	adds	r2, r3, #4
   16616:	9224      	str	r2, [sp, #144]	; 0x90
   16618:	681b      	ldr	r3, [r3, #0]
   1661a:	9312      	str	r3, [sp, #72]	; 0x48
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
   1661c:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1661e:	2b00      	cmp	r3, #0
   16620:	bfb8      	it	lt
   16622:	425b      	neglt	r3, r3
   16624:	4619      	mov	r1, r3
   16626:	9b12      	ldr	r3, [sp, #72]	; 0x48
   16628:	0fdb      	lsrs	r3, r3, #31
   1662a:	b2db      	uxtb	r3, r3
   1662c:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   1662e:	9205      	str	r2, [sp, #20]
   16630:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   16632:	9204      	str	r2, [sp, #16]
   16634:	9a1d      	ldr	r2, [sp, #116]	; 0x74
   16636:	9203      	str	r2, [sp, #12]
   16638:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   1663a:	9202      	str	r2, [sp, #8]
   1663c:	9301      	str	r3, [sp, #4]
   1663e:	9100      	str	r1, [sp, #0]
   16640:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   16642:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   16644:	990c      	ldr	r1, [sp, #48]	; 0x30
   16646:	980d      	ldr	r0, [sp, #52]	; 0x34
   16648:	f7ff fa1a 	bl	15a80 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)>
   1664c:	901b      	str	r0, [sp, #108]	; 0x6c
          }
   1664e:	e06f      	b.n	16730 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x6a0>
        }
        else {
          // unsigned
          if (flags & FLAGS_LONG_LONG) {
   16650:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   16652:	f403 7300 	and.w	r3, r3, #512	; 0x200
   16656:	2b00      	cmp	r3, #0
   16658:	d020      	beq.n	1669c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x60c>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base, precision, width, flags);
   1665a:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1665c:	3307      	adds	r3, #7
   1665e:	f023 0307 	bic.w	r3, r3, #7
   16662:	f103 0208 	add.w	r2, r3, #8
   16666:	9224      	str	r2, [sp, #144]	; 0x90
   16668:	e9d3 3400 	ldrd	r3, r4, [r3]
   1666c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   1666e:	4611      	mov	r1, r2
   16670:	f04f 0200 	mov.w	r2, #0
   16674:	981f      	ldr	r0, [sp, #124]	; 0x7c
   16676:	9008      	str	r0, [sp, #32]
   16678:	981e      	ldr	r0, [sp, #120]	; 0x78
   1667a:	9007      	str	r0, [sp, #28]
   1667c:	981d      	ldr	r0, [sp, #116]	; 0x74
   1667e:	9006      	str	r0, [sp, #24]
   16680:	e9cd 1204 	strd	r1, r2, [sp, #16]
   16684:	2200      	movs	r2, #0
   16686:	9202      	str	r2, [sp, #8]
   16688:	e9cd 3400 	strd	r3, r4, [sp]
   1668c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1668e:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   16690:	990c      	ldr	r1, [sp, #48]	; 0x30
   16692:	980d      	ldr	r0, [sp, #52]	; 0x34
   16694:	f7ff fa66 	bl	15b64 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)>
   16698:	901b      	str	r0, [sp, #108]	; 0x6c
   1669a:	e049      	b.n	16730 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x6a0>
#endif
          }
          else if (flags & FLAGS_LONG) {
   1669c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   1669e:	f403 7380 	and.w	r3, r3, #256	; 0x100
   166a2:	2b00      	cmp	r3, #0
   166a4:	d016      	beq.n	166d4 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x644>
            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
   166a6:	9b24      	ldr	r3, [sp, #144]	; 0x90
   166a8:	1d1a      	adds	r2, r3, #4
   166aa:	9224      	str	r2, [sp, #144]	; 0x90
   166ac:	681b      	ldr	r3, [r3, #0]
   166ae:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   166b0:	9205      	str	r2, [sp, #20]
   166b2:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   166b4:	9204      	str	r2, [sp, #16]
   166b6:	9a1d      	ldr	r2, [sp, #116]	; 0x74
   166b8:	9203      	str	r2, [sp, #12]
   166ba:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   166bc:	9202      	str	r2, [sp, #8]
   166be:	2200      	movs	r2, #0
   166c0:	9201      	str	r2, [sp, #4]
   166c2:	9300      	str	r3, [sp, #0]
   166c4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   166c6:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   166c8:	990c      	ldr	r1, [sp, #48]	; 0x30
   166ca:	980d      	ldr	r0, [sp, #52]	; 0x34
   166cc:	f7ff f9d8 	bl	15a80 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)>
   166d0:	901b      	str	r0, [sp, #108]	; 0x6c
   166d2:	e02d      	b.n	16730 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x6a0>
          }
          else {
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
   166d4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   166d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
   166da:	2b00      	cmp	r3, #0
   166dc:	d005      	beq.n	166ea <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x65a>
   166de:	9b24      	ldr	r3, [sp, #144]	; 0x90
   166e0:	1d1a      	adds	r2, r3, #4
   166e2:	9224      	str	r2, [sp, #144]	; 0x90
   166e4:	681b      	ldr	r3, [r3, #0]
   166e6:	b2db      	uxtb	r3, r3
   166e8:	e00e      	b.n	16708 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x678>
   166ea:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   166ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
   166f0:	2b00      	cmp	r3, #0
   166f2:	d005      	beq.n	16700 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x670>
   166f4:	9b24      	ldr	r3, [sp, #144]	; 0x90
   166f6:	1d1a      	adds	r2, r3, #4
   166f8:	9224      	str	r2, [sp, #144]	; 0x90
   166fa:	681b      	ldr	r3, [r3, #0]
   166fc:	b29b      	uxth	r3, r3
   166fe:	e003      	b.n	16708 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x678>
   16700:	9b24      	ldr	r3, [sp, #144]	; 0x90
   16702:	1d1a      	adds	r2, r3, #4
   16704:	9224      	str	r2, [sp, #144]	; 0x90
   16706:	681b      	ldr	r3, [r3, #0]
   16708:	9313      	str	r3, [sp, #76]	; 0x4c
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
   1670a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   1670c:	9305      	str	r3, [sp, #20]
   1670e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   16710:	9304      	str	r3, [sp, #16]
   16712:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   16714:	9303      	str	r3, [sp, #12]
   16716:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   16718:	9302      	str	r3, [sp, #8]
   1671a:	2300      	movs	r3, #0
   1671c:	9301      	str	r3, [sp, #4]
   1671e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   16720:	9300      	str	r3, [sp, #0]
   16722:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   16724:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   16726:	990c      	ldr	r1, [sp, #48]	; 0x30
   16728:	980d      	ldr	r0, [sp, #52]	; 0x34
   1672a:	f7ff f9a9 	bl	15a80 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)>
   1672e:	901b      	str	r0, [sp, #108]	; 0x6c
          }
        }
        format++;
   16730:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   16732:	3301      	adds	r3, #1
   16734:	930a      	str	r3, [sp, #40]	; 0x28
        break;
   16736:	e109      	b.n	1694c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8bc>
      }
#if defined(PRINTF_SUPPORT_FLOAT)
      case 'f' :
      case 'F' :
        idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
   16738:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1673a:	3307      	adds	r3, #7
   1673c:	f023 0307 	bic.w	r3, r3, #7
   16740:	f103 0208 	add.w	r2, r3, #8
   16744:	9224      	str	r2, [sp, #144]	; 0x90
   16746:	ed93 7b00 	vldr	d7, [r3]
   1674a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   1674c:	9302      	str	r3, [sp, #8]
   1674e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   16750:	9301      	str	r3, [sp, #4]
   16752:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   16754:	9300      	str	r3, [sp, #0]
   16756:	eeb0 0a47 	vmov.f32	s0, s14
   1675a:	eef0 0a67 	vmov.f32	s1, s15
   1675e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   16760:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   16762:	990c      	ldr	r1, [sp, #48]	; 0x30
   16764:	980d      	ldr	r0, [sp, #52]	; 0x34
   16766:	f7ff fa77 	bl	15c58 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)>
   1676a:	901b      	str	r0, [sp, #108]	; 0x6c
        format++;
   1676c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1676e:	3301      	adds	r3, #1
   16770:	930a      	str	r3, [sp, #40]	; 0x28
        break;
   16772:	e0eb      	b.n	1694c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8bc>
#endif  // PRINTF_SUPPORT_FLOAT
      case 'c' : {
        unsigned int l = 1U;
   16774:	2301      	movs	r3, #1
   16776:	9319      	str	r3, [sp, #100]	; 0x64
        // pre padding
        if (!(flags & FLAGS_LEFT)) {
   16778:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   1677a:	f003 0302 	and.w	r3, r3, #2
   1677e:	2b00      	cmp	r3, #0
   16780:	d113      	bne.n	167aa <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x71a>
          while (l++ < width) {
   16782:	9b19      	ldr	r3, [sp, #100]	; 0x64
   16784:	1c5a      	adds	r2, r3, #1
   16786:	9219      	str	r2, [sp, #100]	; 0x64
   16788:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   1678a:	429a      	cmp	r2, r3
   1678c:	bf8c      	ite	hi
   1678e:	2301      	movhi	r3, #1
   16790:	2300      	movls	r3, #0
   16792:	b2db      	uxtb	r3, r3
   16794:	2b00      	cmp	r3, #0
   16796:	d008      	beq.n	167aa <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x71a>
            out(' ', buffer, idx++, maxlen);
   16798:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   1679a:	1c53      	adds	r3, r2, #1
   1679c:	931b      	str	r3, [sp, #108]	; 0x6c
   1679e:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   167a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   167a2:	990c      	ldr	r1, [sp, #48]	; 0x30
   167a4:	2020      	movs	r0, #32
   167a6:	47a0      	blx	r4
          while (l++ < width) {
   167a8:	e7eb      	b.n	16782 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x6f2>
          }
        }
        // char output
        out((char)va_arg(va, int), buffer, idx++, maxlen);
   167aa:	9b24      	ldr	r3, [sp, #144]	; 0x90
   167ac:	1d1a      	adds	r2, r3, #4
   167ae:	9224      	str	r2, [sp, #144]	; 0x90
   167b0:	681b      	ldr	r3, [r3, #0]
   167b2:	b2d8      	uxtb	r0, r3
   167b4:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   167b6:	1c53      	adds	r3, r2, #1
   167b8:	931b      	str	r3, [sp, #108]	; 0x6c
   167ba:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   167bc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   167be:	990c      	ldr	r1, [sp, #48]	; 0x30
   167c0:	47a0      	blx	r4
        // post padding
        if (flags & FLAGS_LEFT) {
   167c2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   167c4:	f003 0302 	and.w	r3, r3, #2
   167c8:	2b00      	cmp	r3, #0
   167ca:	d013      	beq.n	167f4 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x764>
          while (l++ < width) {
   167cc:	9b19      	ldr	r3, [sp, #100]	; 0x64
   167ce:	1c5a      	adds	r2, r3, #1
   167d0:	9219      	str	r2, [sp, #100]	; 0x64
   167d2:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   167d4:	429a      	cmp	r2, r3
   167d6:	bf8c      	ite	hi
   167d8:	2301      	movhi	r3, #1
   167da:	2300      	movls	r3, #0
   167dc:	b2db      	uxtb	r3, r3
   167de:	2b00      	cmp	r3, #0
   167e0:	d008      	beq.n	167f4 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x764>
            out(' ', buffer, idx++, maxlen);
   167e2:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   167e4:	1c53      	adds	r3, r2, #1
   167e6:	931b      	str	r3, [sp, #108]	; 0x6c
   167e8:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   167ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   167ec:	990c      	ldr	r1, [sp, #48]	; 0x30
   167ee:	2020      	movs	r0, #32
   167f0:	47a0      	blx	r4
          while (l++ < width) {
   167f2:	e7eb      	b.n	167cc <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x73c>
          }
        }
        format++;
   167f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   167f6:	3301      	adds	r3, #1
   167f8:	930a      	str	r3, [sp, #40]	; 0x28
        break;
   167fa:	e0a7      	b.n	1694c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8bc>
      }

      case 's' : {
        char* p = va_arg(va, char*);
   167fc:	9b24      	ldr	r3, [sp, #144]	; 0x90
   167fe:	1d1a      	adds	r2, r3, #4
   16800:	9224      	str	r2, [sp, #144]	; 0x90
   16802:	681b      	ldr	r3, [r3, #0]
   16804:	9318      	str	r3, [sp, #96]	; 0x60
        unsigned int l = _strlen(p);
   16806:	9818      	ldr	r0, [sp, #96]	; 0x60
   16808:	f7fe ff98 	bl	1573c <_strlen(char const*)>
   1680c:	9017      	str	r0, [sp, #92]	; 0x5c
        // pre padding
        if (flags & FLAGS_PRECISION) {
   1680e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   16810:	f403 6380 	and.w	r3, r3, #1024	; 0x400
   16814:	2b00      	cmp	r3, #0
   16816:	d007      	beq.n	16828 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x798>
          l = (l < precision ? l : precision);
   16818:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   1681a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   1681c:	429a      	cmp	r2, r3
   1681e:	d201      	bcs.n	16824 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x794>
   16820:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   16822:	e000      	b.n	16826 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x796>
   16824:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   16826:	9317      	str	r3, [sp, #92]	; 0x5c
        }
        if (!(flags & FLAGS_LEFT)) {
   16828:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   1682a:	f003 0302 	and.w	r3, r3, #2
   1682e:	2b00      	cmp	r3, #0
   16830:	d113      	bne.n	1685a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7ca>
          while (l++ < width) {
   16832:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   16834:	1c5a      	adds	r2, r3, #1
   16836:	9217      	str	r2, [sp, #92]	; 0x5c
   16838:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   1683a:	429a      	cmp	r2, r3
   1683c:	bf8c      	ite	hi
   1683e:	2301      	movhi	r3, #1
   16840:	2300      	movls	r3, #0
   16842:	b2db      	uxtb	r3, r3
   16844:	2b00      	cmp	r3, #0
   16846:	d008      	beq.n	1685a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7ca>
            out(' ', buffer, idx++, maxlen);
   16848:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   1684a:	1c53      	adds	r3, r2, #1
   1684c:	931b      	str	r3, [sp, #108]	; 0x6c
   1684e:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   16850:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   16852:	990c      	ldr	r1, [sp, #48]	; 0x30
   16854:	2020      	movs	r0, #32
   16856:	47a0      	blx	r4
          while (l++ < width) {
   16858:	e7eb      	b.n	16832 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7a2>
          }
        }
        // string output
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
   1685a:	9b18      	ldr	r3, [sp, #96]	; 0x60
   1685c:	781b      	ldrb	r3, [r3, #0]
   1685e:	2b00      	cmp	r3, #0
   16860:	d00b      	beq.n	1687a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7ea>
   16862:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   16864:	f403 6380 	and.w	r3, r3, #1024	; 0x400
   16868:	2b00      	cmp	r3, #0
   1686a:	d004      	beq.n	16876 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7e6>
   1686c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   1686e:	1e5a      	subs	r2, r3, #1
   16870:	921d      	str	r2, [sp, #116]	; 0x74
   16872:	2b00      	cmp	r3, #0
   16874:	d001      	beq.n	1687a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7ea>
   16876:	2301      	movs	r3, #1
   16878:	e000      	b.n	1687c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7ec>
   1687a:	2300      	movs	r3, #0
   1687c:	2b00      	cmp	r3, #0
   1687e:	d00b      	beq.n	16898 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x808>
          out(*(p++), buffer, idx++, maxlen);
   16880:	9b18      	ldr	r3, [sp, #96]	; 0x60
   16882:	1c5a      	adds	r2, r3, #1
   16884:	9218      	str	r2, [sp, #96]	; 0x60
   16886:	7818      	ldrb	r0, [r3, #0]
   16888:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   1688a:	1c53      	adds	r3, r2, #1
   1688c:	931b      	str	r3, [sp, #108]	; 0x6c
   1688e:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   16890:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   16892:	990c      	ldr	r1, [sp, #48]	; 0x30
   16894:	47a0      	blx	r4
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
   16896:	e7e0      	b.n	1685a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7ca>
        }
        // post padding
        if (flags & FLAGS_LEFT) {
   16898:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   1689a:	f003 0302 	and.w	r3, r3, #2
   1689e:	2b00      	cmp	r3, #0
   168a0:	d013      	beq.n	168ca <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x83a>
          while (l++ < width) {
   168a2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   168a4:	1c5a      	adds	r2, r3, #1
   168a6:	9217      	str	r2, [sp, #92]	; 0x5c
   168a8:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   168aa:	429a      	cmp	r2, r3
   168ac:	bf8c      	ite	hi
   168ae:	2301      	movhi	r3, #1
   168b0:	2300      	movls	r3, #0
   168b2:	b2db      	uxtb	r3, r3
   168b4:	2b00      	cmp	r3, #0
   168b6:	d008      	beq.n	168ca <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x83a>
            out(' ', buffer, idx++, maxlen);
   168b8:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   168ba:	1c53      	adds	r3, r2, #1
   168bc:	931b      	str	r3, [sp, #108]	; 0x6c
   168be:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   168c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   168c2:	990c      	ldr	r1, [sp, #48]	; 0x30
   168c4:	2020      	movs	r0, #32
   168c6:	47a0      	blx	r4
          while (l++ < width) {
   168c8:	e7eb      	b.n	168a2 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x812>
          }
        }
        format++;
   168ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   168cc:	3301      	adds	r3, #1
   168ce:	930a      	str	r3, [sp, #40]	; 0x28
        break;
   168d0:	e03c      	b.n	1694c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8bc>
      }

      case 'p' : {
        width = sizeof(void*) * 2U;
   168d2:	2308      	movs	r3, #8
   168d4:	931e      	str	r3, [sp, #120]	; 0x78
        flags |= FLAGS_ZEROPAD | FLAGS_UPPERCASE;
   168d6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   168d8:	f043 0321 	orr.w	r3, r3, #33	; 0x21
   168dc:	931f      	str	r3, [sp, #124]	; 0x7c
#if defined(PRINTF_SUPPORT_LONG_LONG)
        const bool is_ll = sizeof(uintptr_t) == sizeof(long long);
   168de:	2300      	movs	r3, #0
   168e0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
        if (is_ll) {
          idx = _ntoa_long_long(out, buffer, idx, maxlen, (uintptr_t)va_arg(va, void*), false, 16U, precision, width, flags);
        }
        else {
#endif
          idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void*)), false, 16U, precision, width, flags);
   168e4:	9b24      	ldr	r3, [sp, #144]	; 0x90
   168e6:	1d1a      	adds	r2, r3, #4
   168e8:	9224      	str	r2, [sp, #144]	; 0x90
   168ea:	681b      	ldr	r3, [r3, #0]
   168ec:	461a      	mov	r2, r3
   168ee:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   168f0:	9305      	str	r3, [sp, #20]
   168f2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   168f4:	9304      	str	r3, [sp, #16]
   168f6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   168f8:	9303      	str	r3, [sp, #12]
   168fa:	2310      	movs	r3, #16
   168fc:	9302      	str	r3, [sp, #8]
   168fe:	2300      	movs	r3, #0
   16900:	9301      	str	r3, [sp, #4]
   16902:	9200      	str	r2, [sp, #0]
   16904:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   16906:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   16908:	990c      	ldr	r1, [sp, #48]	; 0x30
   1690a:	980d      	ldr	r0, [sp, #52]	; 0x34
   1690c:	f7ff f8b8 	bl	15a80 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)>
   16910:	901b      	str	r0, [sp, #108]	; 0x6c
#if defined(PRINTF_SUPPORT_LONG_LONG)
        }
#endif
        format++;
   16912:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   16914:	3301      	adds	r3, #1
   16916:	930a      	str	r3, [sp, #40]	; 0x28
        break;
   16918:	e018      	b.n	1694c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8bc>
      }

      case '%' :
        out('%', buffer, idx++, maxlen);
   1691a:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   1691c:	1c53      	adds	r3, r2, #1
   1691e:	931b      	str	r3, [sp, #108]	; 0x6c
   16920:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   16922:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   16924:	990c      	ldr	r1, [sp, #48]	; 0x30
   16926:	2025      	movs	r0, #37	; 0x25
   16928:	47a0      	blx	r4
        format++;
   1692a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1692c:	3301      	adds	r3, #1
   1692e:	930a      	str	r3, [sp, #40]	; 0x28
        break;
   16930:	e00c      	b.n	1694c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8bc>

      default :
        out(*format, buffer, idx++, maxlen);
   16932:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   16934:	7818      	ldrb	r0, [r3, #0]
   16936:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   16938:	1c53      	adds	r3, r2, #1
   1693a:	931b      	str	r3, [sp, #108]	; 0x6c
   1693c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   1693e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   16940:	990c      	ldr	r1, [sp, #48]	; 0x30
   16942:	47a0      	blx	r4
        format++;
   16944:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   16946:	3301      	adds	r3, #1
   16948:	930a      	str	r3, [sp, #40]	; 0x28
        break;
   1694a:	bf00      	nop
  while (*format)
   1694c:	f7ff bbb3 	b.w	160b6 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x26>
    }
  }

  // termination
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
   16950:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   16952:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   16954:	429a      	cmp	r2, r3
   16956:	d302      	bcc.n	1695e <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8ce>
   16958:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1695a:	1e5a      	subs	r2, r3, #1
   1695c:	e000      	b.n	16960 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8d0>
   1695e:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   16960:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   16962:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   16964:	990c      	ldr	r1, [sp, #48]	; 0x30
   16966:	2000      	movs	r0, #0
   16968:	47a0      	blx	r4

  // return written chars without terminating \0
  return (int)idx;
   1696a:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
   1696c:	4633      	mov	r3, r6
   1696e:	4619      	mov	r1, r3
   16970:	4803      	ldr	r0, [pc, #12]	; (16980 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8f0>)
   16972:	f7fe fdc1 	bl	154f8 <__cyg_profile_func_exit>
   16976:	4623      	mov	r3, r4
}
   16978:	4618      	mov	r0, r3
   1697a:	b020      	add	sp, #128	; 0x80
   1697c:	bd70      	pop	{r4, r5, r6, pc}
   1697e:	bf00      	nop
   16980:	00016091 	.word	0x00016091

00016984 <printf>:

///////////////////////////////////////////////////////////////////////////////


int printf(const char* format, ...)
{
   16984:	b40f      	push	{r0, r1, r2, r3}
   16986:	b530      	push	{r4, r5, lr}
   16988:	b087      	sub	sp, #28
   1698a:	4675      	mov	r5, lr
   1698c:	462b      	mov	r3, r5
   1698e:	4619      	mov	r1, r3
   16990:	480d      	ldr	r0, [pc, #52]	; (169c8 <printf+0x44>)
   16992:	f7fe fd9d 	bl	154d0 <__cyg_profile_func_enter>
  va_list va;
  va_start(va, format);
   16996:	ab0b      	add	r3, sp, #44	; 0x2c
   16998:	9304      	str	r3, [sp, #16]
  char buffer[1];
  const int ret = _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
   1699a:	a903      	add	r1, sp, #12
   1699c:	9b04      	ldr	r3, [sp, #16]
   1699e:	9300      	str	r3, [sp, #0]
   169a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   169a2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   169a6:	4809      	ldr	r0, [pc, #36]	; (169cc <printf+0x48>)
   169a8:	f7ff fb72 	bl	16090 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)>
   169ac:	9005      	str	r0, [sp, #20]
  va_end(va);
  return ret;
   169ae:	9c05      	ldr	r4, [sp, #20]
   169b0:	462b      	mov	r3, r5
   169b2:	4619      	mov	r1, r3
   169b4:	4804      	ldr	r0, [pc, #16]	; (169c8 <printf+0x44>)
   169b6:	f7fe fd9f 	bl	154f8 <__cyg_profile_func_exit>
   169ba:	4623      	mov	r3, r4
}
   169bc:	4618      	mov	r0, r3
   169be:	b007      	add	sp, #28
   169c0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   169c4:	b004      	add	sp, #16
   169c6:	4770      	bx	lr
   169c8:	00016985 	.word	0x00016985
   169cc:	000156f9 	.word	0x000156f9

000169d0 <SdInterface::SdInterface()>:
// NOLINTNEXTLINE(readability-identifier-naming)
// Relevant Datasheet:
// https://www.sdcard.org/downloads/pls/pdf/index.php?p=Part1_Physical_Layer_Simplified_Specification_Ver6.00.jpg&f=Part1_Physical_Layer_Simplified_Specification_Ver6.00.pdf&e=EN_SS1
// TODO(#348):  Write a class to represent a single Sd Card Block to make use
//              of block-related functions easier.
class SdInterface
   169d0:	b530      	push	{r4, r5, lr}
   169d2:	b083      	sub	sp, #12
   169d4:	4675      	mov	r5, lr
   169d6:	9001      	str	r0, [sp, #4]
   169d8:	462b      	mov	r3, r5
   169da:	4619      	mov	r1, r3
   169dc:	4807      	ldr	r0, [pc, #28]	; (169fc <SdInterface::SdInterface()+0x2c>)
   169de:	f7fe fd77 	bl	154d0 <__cyg_profile_func_enter>
   169e2:	4a07      	ldr	r2, [pc, #28]	; (16a00 <SdInterface::SdInterface()+0x30>)
   169e4:	9b01      	ldr	r3, [sp, #4]
   169e6:	601a      	str	r2, [r3, #0]
   169e8:	9c01      	ldr	r4, [sp, #4]
   169ea:	462b      	mov	r3, r5
   169ec:	4619      	mov	r1, r3
   169ee:	4803      	ldr	r0, [pc, #12]	; (169fc <SdInterface::SdInterface()+0x2c>)
   169f0:	f7fe fd82 	bl	154f8 <__cyg_profile_func_exit>
   169f4:	4623      	mov	r3, r4
   169f6:	4618      	mov	r0, r3
   169f8:	b003      	add	sp, #12
   169fa:	bd30      	pop	{r4, r5, pc}
   169fc:	000169d1 	.word	0x000169d1
   16a00:	0001a7d0 	.word	0x0001a7d0

00016a04 <Sd::Sd(Sd::DebugSdCard_t, unsigned char, unsigned char, unsigned char, unsigned char)>:
  /// port that is broken out through the board's GPIO, allowing you to probe
  /// the chip select manually. To use this version instead of the main version,
  /// instantiate an Sd card instance like so:
  ///
  ///   Sd sdcard(Sd::DebugSdCard_t{});
  constexpr Sd(DebugSdCard_t, uint8_t port = 1, uint8_t pin = 8,
   16a04:	b530      	push	{r4, r5, lr}
   16a06:	b083      	sub	sp, #12
   16a08:	4675      	mov	r5, lr
   16a0a:	9001      	str	r0, [sp, #4]
   16a0c:	f88d 1000 	strb.w	r1, [sp]
   16a10:	4611      	mov	r1, r2
   16a12:	461a      	mov	r2, r3
   16a14:	460b      	mov	r3, r1
   16a16:	f88d 3003 	strb.w	r3, [sp, #3]
   16a1a:	4613      	mov	r3, r2
   16a1c:	f88d 3002 	strb.w	r3, [sp, #2]
   16a20:	462b      	mov	r3, r5
   16a22:	4619      	mov	r1, r3
   16a24:	481d      	ldr	r0, [pc, #116]	; (16a9c <Sd::Sd(Sd::DebugSdCard_t, unsigned char, unsigned char, unsigned char, unsigned char)+0x98>)
   16a26:	f7fe fd53 	bl	154d0 <__cyg_profile_func_enter>
      : ssp_interface_(&ssp_),
        ssp_(Ssp::Peripheral::kSsp2),
        chip_select_(&chip_select_pin_),
        chip_select_external_(&chip_select_external_pin_),
        chip_select_pin_(port, pin),
        chip_select_external_pin_(extport, extpin)
   16a2a:	9b01      	ldr	r3, [sp, #4]
   16a2c:	4618      	mov	r0, r3
   16a2e:	f7ff ffcf 	bl	169d0 <SdInterface::SdInterface()>
   16a32:	4a1b      	ldr	r2, [pc, #108]	; (16aa0 <Sd::Sd(Sd::DebugSdCard_t, unsigned char, unsigned char, unsigned char, unsigned char)+0x9c>)
   16a34:	9b01      	ldr	r3, [sp, #4]
   16a36:	601a      	str	r2, [r3, #0]
   16a38:	9b01      	ldr	r3, [sp, #4]
   16a3a:	f103 0208 	add.w	r2, r3, #8
   16a3e:	9b01      	ldr	r3, [sp, #4]
   16a40:	605a      	str	r2, [r3, #4]
   16a42:	9b01      	ldr	r3, [sp, #4]
   16a44:	3308      	adds	r3, #8
   16a46:	2102      	movs	r1, #2
   16a48:	4618      	mov	r0, r3
   16a4a:	f7fb fd8d 	bl	12568 <Ssp::Ssp(Ssp::Peripheral)>
   16a4e:	9b01      	ldr	r3, [sp, #4]
   16a50:	f103 0240 	add.w	r2, r3, #64	; 0x40
   16a54:	9b01      	ldr	r3, [sp, #4]
   16a56:	639a      	str	r2, [r3, #56]	; 0x38
   16a58:	9b01      	ldr	r3, [sp, #4]
   16a5a:	f103 0254 	add.w	r2, r3, #84	; 0x54
   16a5e:	9b01      	ldr	r3, [sp, #4]
   16a60:	63da      	str	r2, [r3, #60]	; 0x3c
   16a62:	9b01      	ldr	r3, [sp, #4]
   16a64:	3340      	adds	r3, #64	; 0x40
   16a66:	f89d 2002 	ldrb.w	r2, [sp, #2]
   16a6a:	f89d 1003 	ldrb.w	r1, [sp, #3]
   16a6e:	4618      	mov	r0, r3
   16a70:	f7fa fd8a 	bl	11588 <Gpio::Gpio(unsigned char, unsigned char)>
   16a74:	9b01      	ldr	r3, [sp, #4]
   16a76:	3354      	adds	r3, #84	; 0x54
   16a78:	f89d 201c 	ldrb.w	r2, [sp, #28]
   16a7c:	f89d 1018 	ldrb.w	r1, [sp, #24]
   16a80:	4618      	mov	r0, r3
   16a82:	f7fa fd81 	bl	11588 <Gpio::Gpio(unsigned char, unsigned char)>
  {
  }
   16a86:	9c01      	ldr	r4, [sp, #4]
   16a88:	462b      	mov	r3, r5
   16a8a:	4619      	mov	r1, r3
   16a8c:	4803      	ldr	r0, [pc, #12]	; (16a9c <Sd::Sd(Sd::DebugSdCard_t, unsigned char, unsigned char, unsigned char, unsigned char)+0x98>)
   16a8e:	f7fe fd33 	bl	154f8 <__cyg_profile_func_exit>
   16a92:	4623      	mov	r3, r4
   16a94:	4618      	mov	r0, r3
   16a96:	b003      	add	sp, #12
   16a98:	bd30      	pop	{r4, r5, pc}
   16a9a:	bf00      	nop
   16a9c:	00016a05 	.word	0x00016a05
   16aa0:	0001a7a4 	.word	0x0001a7a4

00016aa4 <Sd::Initialize()>:

  void Initialize() override
   16aa4:	b530      	push	{r4, r5, lr}
   16aa6:	b085      	sub	sp, #20
   16aa8:	4675      	mov	r5, lr
   16aaa:	9003      	str	r0, [sp, #12]
   16aac:	462b      	mov	r3, r5
   16aae:	4619      	mov	r1, r3
   16ab0:	4827      	ldr	r0, [pc, #156]	; (16b50 <Sd::Initialize()+0xac>)
   16ab2:	f7fe fd0d 	bl	154d0 <__cyg_profile_func_enter>
  {
    LOG_DEBUG("Begin initialization:");
    LOG_DEBUG("Setting CS as output...");
    chip_select_->SetAsOutput();
   16ab6:	9b03      	ldr	r3, [sp, #12]
   16ab8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   16aba:	9b03      	ldr	r3, [sp, #12]
   16abc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   16abe:	681b      	ldr	r3, [r3, #0]
   16ac0:	3304      	adds	r3, #4
   16ac2:	681b      	ldr	r3, [r3, #0]
   16ac4:	4610      	mov	r0, r2
   16ac6:	4798      	blx	r3
    chip_select_->SetHigh();
   16ac8:	9b03      	ldr	r3, [sp, #12]
   16aca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   16acc:	9b03      	ldr	r3, [sp, #12]
   16ace:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   16ad0:	681b      	ldr	r3, [r3, #0]
   16ad2:	330c      	adds	r3, #12
   16ad4:	681b      	ldr	r3, [r3, #0]
   16ad6:	4610      	mov	r0, r2
   16ad8:	4798      	blx	r3
    chip_select_external_->SetAsOutput();
   16ada:	9b03      	ldr	r3, [sp, #12]
   16adc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
   16ade:	9b03      	ldr	r3, [sp, #12]
   16ae0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   16ae2:	681b      	ldr	r3, [r3, #0]
   16ae4:	3304      	adds	r3, #4
   16ae6:	681b      	ldr	r3, [r3, #0]
   16ae8:	4610      	mov	r0, r2
   16aea:	4798      	blx	r3
    chip_select_external_->SetHigh();
   16aec:	9b03      	ldr	r3, [sp, #12]
   16aee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
   16af0:	9b03      	ldr	r3, [sp, #12]
   16af2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   16af4:	681b      	ldr	r3, [r3, #0]
   16af6:	330c      	adds	r3, #12
   16af8:	681b      	ldr	r3, [r3, #0]
   16afa:	4610      	mov	r0, r2
   16afc:	4798      	blx	r3

    LOG_DEBUG("Setting SSP Clock Speed...");
    ssp_interface_->SetClock(false, false, 14, 2);  // 400kHz
   16afe:	9b03      	ldr	r3, [sp, #12]
   16b00:	6858      	ldr	r0, [r3, #4]
   16b02:	9b03      	ldr	r3, [sp, #12]
   16b04:	685b      	ldr	r3, [r3, #4]
   16b06:	681b      	ldr	r3, [r3, #0]
   16b08:	3318      	adds	r3, #24
   16b0a:	681c      	ldr	r4, [r3, #0]
   16b0c:	2302      	movs	r3, #2
   16b0e:	9300      	str	r3, [sp, #0]
   16b10:	230e      	movs	r3, #14
   16b12:	2200      	movs	r2, #0
   16b14:	2100      	movs	r1, #0
   16b16:	47a0      	blx	r4

    LOG_DEBUG("Setting Peripheral Mode...");
    ssp_interface_->SetPeripheralMode(Ssp::MasterSlaveMode::kMaster,
   16b18:	9b03      	ldr	r3, [sp, #12]
   16b1a:	6858      	ldr	r0, [r3, #4]
   16b1c:	9b03      	ldr	r3, [sp, #12]
   16b1e:	685b      	ldr	r3, [r3, #4]
                                      Ssp::FrameMode::kSpi,
                                      Ssp::DataSize::kEight);
   16b20:	681b      	ldr	r3, [r3, #0]
   16b22:	3310      	adds	r3, #16
   16b24:	681c      	ldr	r4, [r3, #0]
    ssp_interface_->SetPeripheralMode(Ssp::MasterSlaveMode::kMaster,
   16b26:	2307      	movs	r3, #7
   16b28:	2200      	movs	r2, #0
   16b2a:	2100      	movs	r1, #0
   16b2c:	47a0      	blx	r4

    LOG_DEBUG("Starting SSP Peripheral...");
    ssp_interface_->Initialize();
   16b2e:	9b03      	ldr	r3, [sp, #12]
   16b30:	685a      	ldr	r2, [r3, #4]
   16b32:	9b03      	ldr	r3, [sp, #12]
   16b34:	685b      	ldr	r3, [r3, #4]
   16b36:	681b      	ldr	r3, [r3, #0]
   16b38:	681b      	ldr	r3, [r3, #0]
   16b3a:	4610      	mov	r0, r2
   16b3c:	4798      	blx	r3
   16b3e:	462b      	mov	r3, r5
   16b40:	4619      	mov	r1, r3
   16b42:	4803      	ldr	r0, [pc, #12]	; (16b50 <Sd::Initialize()+0xac>)
   16b44:	f7fe fcd8 	bl	154f8 <__cyg_profile_func_exit>
  }
   16b48:	bf00      	nop
   16b4a:	b005      	add	sp, #20
   16b4c:	bd30      	pop	{r4, r5, pc}
   16b4e:	bf00      	nop
   16b50:	00016aa5 	.word	0x00016aa5

00016b54 <Sd::Mount(SdInterface::CardInfo_t*)>:

  // Initialize SD Card
  // TODO(#349): Split method into smaller piece with single jobs
  bool Mount(CardInfo_t * sd) override
   16b54:	b530      	push	{r4, r5, lr}
   16b56:	b08b      	sub	sp, #44	; 0x2c
   16b58:	4675      	mov	r5, lr
   16b5a:	9003      	str	r0, [sp, #12]
   16b5c:	9102      	str	r1, [sp, #8]
   16b5e:	462b      	mov	r3, r5
   16b60:	4619      	mov	r1, r3
   16b62:	48a7      	ldr	r0, [pc, #668]	; (16e00 <Sd::Mount(SdInterface::CardInfo_t*)+0x2ac>)
   16b64:	f7fe fcb4 	bl	154d0 <__cyg_profile_func_enter>
  {
    uint8_t tries     = 0;
   16b68:	2300      	movs	r3, #0
   16b6a:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    bool card_is_idle = false;
   16b6e:	2300      	movs	r3, #0
   16b70:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26

    // Reset the card and force it to go to idle state at <400kHz with a
    // CMD0 + (active-low) CS
    LOG_DEBUG("Sending SD Card to Idle State...");
    sd->response.length = SendCmd(Command::kReset, 0x00000000,
                                  sd->response.data.byte, 100, KeepAlive::kYes);
   16b74:	9b03      	ldr	r3, [sp, #12]
   16b76:	681b      	ldr	r3, [r3, #0]
   16b78:	681c      	ldr	r4, [r3, #0]
    sd->response.length = SendCmd(Command::kReset, 0x00000000,
   16b7a:	9b02      	ldr	r3, [sp, #8]
   16b7c:	f103 0208 	add.w	r2, r3, #8
   16b80:	2301      	movs	r3, #1
   16b82:	9301      	str	r3, [sp, #4]
   16b84:	2364      	movs	r3, #100	; 0x64
   16b86:	9300      	str	r3, [sp, #0]
   16b88:	4613      	mov	r3, r2
   16b8a:	2200      	movs	r2, #0
   16b8c:	2140      	movs	r1, #64	; 0x40
   16b8e:	9803      	ldr	r0, [sp, #12]
   16b90:	47a0      	blx	r4
   16b92:	4602      	mov	r2, r0
   16b94:	9b02      	ldr	r3, [sp, #8]
   16b96:	611a      	str	r2, [r3, #16]

    // Reset the card again to trigger SPI mode
    LOG_DEBUG("Initializing SPI mode...");
    do
    {
      tries++;
   16b98:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   16b9c:	3301      	adds	r3, #1
   16b9e:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
      sd->response.length = SendCmd(
          Command::kReset, 0x00, sd->response.data.byte, 100, KeepAlive::kYes);
   16ba2:	9b03      	ldr	r3, [sp, #12]
   16ba4:	681b      	ldr	r3, [r3, #0]
   16ba6:	681c      	ldr	r4, [r3, #0]
      sd->response.length = SendCmd(
   16ba8:	9b02      	ldr	r3, [sp, #8]
   16baa:	f103 0208 	add.w	r2, r3, #8
   16bae:	2301      	movs	r3, #1
   16bb0:	9301      	str	r3, [sp, #4]
   16bb2:	2364      	movs	r3, #100	; 0x64
   16bb4:	9300      	str	r3, [sp, #0]
   16bb6:	4613      	mov	r3, r2
   16bb8:	2200      	movs	r2, #0
   16bba:	2140      	movs	r1, #64	; 0x40
   16bbc:	9803      	ldr	r0, [sp, #12]
   16bbe:	47a0      	blx	r4
   16bc0:	4602      	mov	r2, r0
   16bc2:	9b02      	ldr	r3, [sp, #8]
   16bc4:	611a      	str	r2, [r3, #16]

      // Check if R1 response frame's bit 1 is set (to ensure that
      // card is in idle state)
      if (sd->response.data.byte[0] != 0xFF &&
   16bc6:	9b02      	ldr	r3, [sp, #8]
   16bc8:	7a1b      	ldrb	r3, [r3, #8]
   16bca:	2bff      	cmp	r3, #255	; 0xff
   16bcc:	d008      	beq.n	16be0 <Sd::Mount(SdInterface::CardInfo_t*)+0x8c>
          (sd->response.data.byte[0] & 0x01) == 0x01)
   16bce:	9b02      	ldr	r3, [sp, #8]
   16bd0:	7a1b      	ldrb	r3, [r3, #8]
   16bd2:	f003 0301 	and.w	r3, r3, #1
      if (sd->response.data.byte[0] != 0xFF &&
   16bd6:	2b00      	cmp	r3, #0
   16bd8:	d002      	beq.n	16be0 <Sd::Mount(SdInterface::CardInfo_t*)+0x8c>
      {
        // If it is, we can move on; otherwise, keep trying for a set
        // amount of tries
        card_is_idle = true;
   16bda:	2301      	movs	r3, #1
   16bdc:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
      }
      Delay(10);
   16be0:	f04f 000a 	mov.w	r0, #10
   16be4:	f04f 0100 	mov.w	r1, #0
   16be8:	f7f9 fd20 	bl	1062c <Delay(unsigned long long)>
    } while (tries < kBusTimeout && !card_is_idle);
   16bec:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   16bf0:	2bf9      	cmp	r3, #249	; 0xf9
   16bf2:	d804      	bhi.n	16bfe <Sd::Mount(SdInterface::CardInfo_t*)+0xaa>
   16bf4:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
   16bf8:	2b00      	cmp	r3, #0
   16bfa:	d100      	bne.n	16bfe <Sd::Mount(SdInterface::CardInfo_t*)+0xaa>
    do
   16bfc:	e7cc      	b.n	16b98 <Sd::Mount(SdInterface::CardInfo_t*)+0x44>
    LOG_DEBUG("%d tries", tries);
    if (tries >= kBusTimeout)
   16bfe:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   16c02:	2bf9      	cmp	r3, #249	; 0xf9
   16c04:	d91b      	bls.n	16c3e <Sd::Mount(SdInterface::CardInfo_t*)+0xea>
    {
      LOG_ERROR("Failed to initiate SPI mode within timeout. Aborting!");
   16c06:	f240 13ff 	movw	r3, #511	; 0x1ff
   16c0a:	4a7e      	ldr	r2, [pc, #504]	; (16e04 <Sd::Mount(SdInterface::CardInfo_t*)+0x2b0>)
   16c0c:	497e      	ldr	r1, [pc, #504]	; (16e08 <Sd::Mount(SdInterface::CardInfo_t*)+0x2b4>)
   16c0e:	487f      	ldr	r0, [pc, #508]	; (16e0c <Sd::Mount(SdInterface::CardInfo_t*)+0x2b8>)
   16c10:	f7ff feb8 	bl	16984 <printf>
      sd->response.length = SendCmd(Command::kGarbage, 0xFFFFFFFF,
                                    sd->response.data.byte, 0, KeepAlive::kNo);
   16c14:	9b03      	ldr	r3, [sp, #12]
   16c16:	681b      	ldr	r3, [r3, #0]
   16c18:	681c      	ldr	r4, [r3, #0]
      sd->response.length = SendCmd(Command::kGarbage, 0xFFFFFFFF,
   16c1a:	9b02      	ldr	r3, [sp, #8]
   16c1c:	f103 0208 	add.w	r2, r3, #8
   16c20:	2300      	movs	r3, #0
   16c22:	9301      	str	r3, [sp, #4]
   16c24:	2300      	movs	r3, #0
   16c26:	9300      	str	r3, [sp, #0]
   16c28:	4613      	mov	r3, r2
   16c2a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   16c2e:	21ff      	movs	r1, #255	; 0xff
   16c30:	9803      	ldr	r0, [sp, #12]
   16c32:	47a0      	blx	r4
   16c34:	4602      	mov	r2, r0
   16c36:	9b02      	ldr	r3, [sp, #8]
   16c38:	611a      	str	r2, [r3, #16]
      return false;
   16c3a:	2400      	movs	r4, #0
   16c3c:	e10c      	b.n	16e58 <Sd::Mount(SdInterface::CardInfo_t*)+0x304>
    }

    // Send the host's supported voltage (3.3V) and ask if the card
    // supports it
    LOG_DEBUG("Checking Current SD Card Voltage Level...");
    constexpr uint8_t kCheckPattern = 0xAB;
   16c3e:	23ab      	movs	r3, #171	; 0xab
   16c40:	f88d 301f 	strb.w	r3, [sp, #31]
    uint64_t supported_voltage      = 0x00000001;
   16c44:	f04f 0301 	mov.w	r3, #1
   16c48:	f04f 0400 	mov.w	r4, #0
   16c4c:	e9cd 3404 	strd	r3, r4, [sp, #16]
    sd->response.length =
        SendCmd(Command::kGetOp,
                static_cast<uint32_t>((supported_voltage << 8) | kCheckPattern),
                sd->response.data.byte, 100, KeepAlive::kYes);
   16c50:	9b03      	ldr	r3, [sp, #12]
   16c52:	681b      	ldr	r3, [r3, #0]
   16c54:	681c      	ldr	r4, [r3, #0]
                static_cast<uint32_t>((supported_voltage << 8) | kCheckPattern),
   16c56:	9b04      	ldr	r3, [sp, #16]
   16c58:	021b      	lsls	r3, r3, #8
        SendCmd(Command::kGetOp,
   16c5a:	f043 02ab 	orr.w	r2, r3, #171	; 0xab
   16c5e:	9b02      	ldr	r3, [sp, #8]
   16c60:	f103 0108 	add.w	r1, r3, #8
   16c64:	2301      	movs	r3, #1
   16c66:	9301      	str	r3, [sp, #4]
   16c68:	2364      	movs	r3, #100	; 0x64
   16c6a:	9300      	str	r3, [sp, #0]
   16c6c:	460b      	mov	r3, r1
   16c6e:	2148      	movs	r1, #72	; 0x48
   16c70:	9803      	ldr	r0, [sp, #12]
   16c72:	47a0      	blx	r4
   16c74:	4602      	mov	r2, r0
    sd->response.length =
   16c76:	9b02      	ldr	r3, [sp, #8]
   16c78:	611a      	str	r2, [r3, #16]
    if (sd->response.data.byte[4] != kCheckPattern)
   16c7a:	9b02      	ldr	r3, [sp, #8]
   16c7c:	7b1b      	ldrb	r3, [r3, #12]
   16c7e:	2bab      	cmp	r3, #171	; 0xab
   16c80:	d01b      	beq.n	16cba <Sd::Mount(SdInterface::CardInfo_t*)+0x166>
    {
      // If the last byte is not an exact echo of the LSB of the kGetOp
      // command's argument, this response is invalid
      LOG_ERROR("Response integrity check failed. Aborting!");
   16c82:	f240 2312 	movw	r3, #530	; 0x212
   16c86:	4a5f      	ldr	r2, [pc, #380]	; (16e04 <Sd::Mount(SdInterface::CardInfo_t*)+0x2b0>)
   16c88:	4961      	ldr	r1, [pc, #388]	; (16e10 <Sd::Mount(SdInterface::CardInfo_t*)+0x2bc>)
   16c8a:	4862      	ldr	r0, [pc, #392]	; (16e14 <Sd::Mount(SdInterface::CardInfo_t*)+0x2c0>)
   16c8c:	f7ff fe7a 	bl	16984 <printf>
      sd->response.length = SendCmd(Command::kGarbage, 0xFFFFFFFF,
                                    sd->response.data.byte, 0, KeepAlive::kNo);
   16c90:	9b03      	ldr	r3, [sp, #12]
   16c92:	681b      	ldr	r3, [r3, #0]
   16c94:	681c      	ldr	r4, [r3, #0]
      sd->response.length = SendCmd(Command::kGarbage, 0xFFFFFFFF,
   16c96:	9b02      	ldr	r3, [sp, #8]
   16c98:	f103 0208 	add.w	r2, r3, #8
   16c9c:	2300      	movs	r3, #0
   16c9e:	9301      	str	r3, [sp, #4]
   16ca0:	2300      	movs	r3, #0
   16ca2:	9300      	str	r3, [sp, #0]
   16ca4:	4613      	mov	r3, r2
   16ca6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   16caa:	21ff      	movs	r1, #255	; 0xff
   16cac:	9803      	ldr	r0, [sp, #12]
   16cae:	47a0      	blx	r4
   16cb0:	4602      	mov	r2, r0
   16cb2:	9b02      	ldr	r3, [sp, #8]
   16cb4:	611a      	str	r2, [r3, #16]
      return false;
   16cb6:	2400      	movs	r4, #0
   16cb8:	e0ce      	b.n	16e58 <Sd::Mount(SdInterface::CardInfo_t*)+0x304>
    }
    else if (sd->response.data.byte[3] &
   16cba:	9b02      	ldr	r3, [sp, #8]
   16cbc:	7adb      	ldrb	r3, [r3, #11]
   16cbe:	4619      	mov	r1, r3
             (supported_voltage == static_cast<uint64_t>(0x00)))
   16cc0:	9a04      	ldr	r2, [sp, #16]
   16cc2:	9b05      	ldr	r3, [sp, #20]
   16cc4:	4313      	orrs	r3, r2
   16cc6:	2b00      	cmp	r3, #0
   16cc8:	bf0c      	ite	eq
   16cca:	2301      	moveq	r3, #1
   16ccc:	2300      	movne	r3, #0
   16cce:	b2db      	uxtb	r3, r3
    else if (sd->response.data.byte[3] &
   16cd0:	400b      	ands	r3, r1
   16cd2:	2b00      	cmp	r3, #0
   16cd4:	d01b      	beq.n	16d0e <Sd::Mount(SdInterface::CardInfo_t*)+0x1ba>
    {
      // If the 2nd-to-last byte of the reponse AND'ed with our host
      // device's supported voltage range is 0x00, the SD card doesn't
      // support our device's operating voltage
      LOG_ERROR("Unsupported voltage in use. Aborting!");
   16cd6:	f240 231d 	movw	r3, #541	; 0x21d
   16cda:	4a4a      	ldr	r2, [pc, #296]	; (16e04 <Sd::Mount(SdInterface::CardInfo_t*)+0x2b0>)
   16cdc:	494e      	ldr	r1, [pc, #312]	; (16e18 <Sd::Mount(SdInterface::CardInfo_t*)+0x2c4>)
   16cde:	484f      	ldr	r0, [pc, #316]	; (16e1c <Sd::Mount(SdInterface::CardInfo_t*)+0x2c8>)
   16ce0:	f7ff fe50 	bl	16984 <printf>
      sd->response.length = SendCmd(Command::kGarbage, 0xFFFFFFFF,
                                    sd->response.data.byte, 0, KeepAlive::kNo);
   16ce4:	9b03      	ldr	r3, [sp, #12]
   16ce6:	681b      	ldr	r3, [r3, #0]
   16ce8:	681c      	ldr	r4, [r3, #0]
      sd->response.length = SendCmd(Command::kGarbage, 0xFFFFFFFF,
   16cea:	9b02      	ldr	r3, [sp, #8]
   16cec:	f103 0208 	add.w	r2, r3, #8
   16cf0:	2300      	movs	r3, #0
   16cf2:	9301      	str	r3, [sp, #4]
   16cf4:	2300      	movs	r3, #0
   16cf6:	9300      	str	r3, [sp, #0]
   16cf8:	4613      	mov	r3, r2
   16cfa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   16cfe:	21ff      	movs	r1, #255	; 0xff
   16d00:	9803      	ldr	r0, [sp, #12]
   16d02:	47a0      	blx	r4
   16d04:	4602      	mov	r2, r0
   16d06:	9b02      	ldr	r3, [sp, #8]
   16d08:	611a      	str	r2, [r3, #16]
      return false;
   16d0a:	2400      	movs	r4, #0
   16d0c:	e0a4      	b.n	16e58 <Sd::Mount(SdInterface::CardInfo_t*)+0x304>
    }

    // Indicate that the host supports SDHC/SDXC and wait for card to
    // shift out of idle state
    LOG_DEBUG("Expressing High-Capacity SD Card Support...");
    tries = 0;
   16d0e:	2300      	movs	r3, #0
   16d10:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    do
    {
      // Send host's operating conditions
      sd->response.length =
          SendCmd(Command::kInit, 0x40000000, sd->response.data.byte, 100,
                  KeepAlive::kYes);
   16d14:	9b03      	ldr	r3, [sp, #12]
   16d16:	681b      	ldr	r3, [r3, #0]
   16d18:	681c      	ldr	r4, [r3, #0]
          SendCmd(Command::kInit, 0x40000000, sd->response.data.byte, 100,
   16d1a:	9b02      	ldr	r3, [sp, #8]
   16d1c:	f103 0208 	add.w	r2, r3, #8
   16d20:	2301      	movs	r3, #1
   16d22:	9301      	str	r3, [sp, #4]
   16d24:	2364      	movs	r3, #100	; 0x64
   16d26:	9300      	str	r3, [sp, #0]
   16d28:	4613      	mov	r3, r2
   16d2a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   16d2e:	2141      	movs	r1, #65	; 0x41
   16d30:	9803      	ldr	r0, [sp, #12]
   16d32:	47a0      	blx	r4
   16d34:	4602      	mov	r2, r0
      sd->response.length =
   16d36:	9b02      	ldr	r3, [sp, #8]
   16d38:	611a      	str	r2, [r3, #16]
      tries++;
   16d3a:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   16d3e:	3301      	adds	r3, #1
   16d40:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    } while (tries < kBusTimeout && sd->response.data.byte[0] & 0x01);
   16d44:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   16d48:	2bf9      	cmp	r3, #249	; 0xf9
   16d4a:	d806      	bhi.n	16d5a <Sd::Mount(SdInterface::CardInfo_t*)+0x206>
   16d4c:	9b02      	ldr	r3, [sp, #8]
   16d4e:	7a1b      	ldrb	r3, [r3, #8]
   16d50:	f003 0301 	and.w	r3, r3, #1
   16d54:	2b00      	cmp	r3, #0
   16d56:	d000      	beq.n	16d5a <Sd::Mount(SdInterface::CardInfo_t*)+0x206>
    do
   16d58:	e7dc      	b.n	16d14 <Sd::Mount(SdInterface::CardInfo_t*)+0x1c0>
    if (tries == kBusTimeout)
   16d5a:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   16d5e:	2bfa      	cmp	r3, #250	; 0xfa
   16d60:	d11b      	bne.n	16d9a <Sd::Mount(SdInterface::CardInfo_t*)+0x246>
    {
      LOG_ERROR("SD Card timed out. Aborting!");
   16d62:	f240 2331 	movw	r3, #561	; 0x231
   16d66:	4a27      	ldr	r2, [pc, #156]	; (16e04 <Sd::Mount(SdInterface::CardInfo_t*)+0x2b0>)
   16d68:	492d      	ldr	r1, [pc, #180]	; (16e20 <Sd::Mount(SdInterface::CardInfo_t*)+0x2cc>)
   16d6a:	482e      	ldr	r0, [pc, #184]	; (16e24 <Sd::Mount(SdInterface::CardInfo_t*)+0x2d0>)
   16d6c:	f7ff fe0a 	bl	16984 <printf>
      sd->response.length = SendCmd(Command::kGarbage, 0xFFFFFFFF,
                                    sd->response.data.byte, 0, KeepAlive::kNo);
   16d70:	9b03      	ldr	r3, [sp, #12]
   16d72:	681b      	ldr	r3, [r3, #0]
   16d74:	681c      	ldr	r4, [r3, #0]
      sd->response.length = SendCmd(Command::kGarbage, 0xFFFFFFFF,
   16d76:	9b02      	ldr	r3, [sp, #8]
   16d78:	f103 0208 	add.w	r2, r3, #8
   16d7c:	2300      	movs	r3, #0
   16d7e:	9301      	str	r3, [sp, #4]
   16d80:	2300      	movs	r3, #0
   16d82:	9300      	str	r3, [sp, #0]
   16d84:	4613      	mov	r3, r2
   16d86:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   16d8a:	21ff      	movs	r1, #255	; 0xff
   16d8c:	9803      	ldr	r0, [sp, #12]
   16d8e:	47a0      	blx	r4
   16d90:	4602      	mov	r2, r0
   16d92:	9b02      	ldr	r3, [sp, #8]
   16d94:	611a      	str	r2, [r3, #16]
      return false;
   16d96:	2400      	movs	r4, #0
   16d98:	e05e      	b.n	16e58 <Sd::Mount(SdInterface::CardInfo_t*)+0x304>
    // After card is ready, acquire card capacity info using kGetOcr a
    // second time
    LOG_DEBUG("Reading Card Capacity Information...");
    // Read CCS
    sd->response.length = SendCmd(Command::kGetOcr, 0x00,
                                  sd->response.data.byte, 100, KeepAlive::kYes);
   16d9a:	9b03      	ldr	r3, [sp, #12]
   16d9c:	681b      	ldr	r3, [r3, #0]
   16d9e:	681c      	ldr	r4, [r3, #0]
    sd->response.length = SendCmd(Command::kGetOcr, 0x00,
   16da0:	9b02      	ldr	r3, [sp, #8]
   16da2:	f103 0208 	add.w	r2, r3, #8
   16da6:	2301      	movs	r3, #1
   16da8:	9301      	str	r3, [sp, #4]
   16daa:	2364      	movs	r3, #100	; 0x64
   16dac:	9300      	str	r3, [sp, #0]
   16dae:	4613      	mov	r3, r2
   16db0:	2200      	movs	r2, #0
   16db2:	217a      	movs	r1, #122	; 0x7a
   16db4:	9803      	ldr	r0, [sp, #12]
   16db6:	47a0      	blx	r4
   16db8:	4602      	mov	r2, r0
   16dba:	9b02      	ldr	r3, [sp, #8]
   16dbc:	611a      	str	r2, [r3, #16]
    if (sd->response.data.byte[1] & 0x40)
   16dbe:	9b02      	ldr	r3, [sp, #8]
   16dc0:	7a5b      	ldrb	r3, [r3, #9]
   16dc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
   16dc6:	2b00      	cmp	r3, #0
   16dc8:	d003      	beq.n	16dd2 <Sd::Mount(SdInterface::CardInfo_t*)+0x27e>
    {
      // The card is either high or extended capacity
      LOG_DEBUG("SD Card is HC/XC");
      sd->type = Type::kSDHC;
   16dca:	9b02      	ldr	r3, [sp, #8]
   16dcc:	2201      	movs	r2, #1
   16dce:	605a      	str	r2, [r3, #4]
   16dd0:	e002      	b.n	16dd8 <Sd::Mount(SdInterface::CardInfo_t*)+0x284>
    }
    else
    {
      // The card is standard capacity
      LOG_DEBUG("SD Card is SC");
      sd->type = Type::kSDSC;
   16dd2:	9b02      	ldr	r3, [sp, #8]
   16dd4:	2200      	movs	r2, #0
   16dd6:	605a      	str	r2, [r3, #4]
    }

    // Store OCR information
    for (int i = 0; i < 4; i++)
   16dd8:	2300      	movs	r3, #0
   16dda:	9308      	str	r3, [sp, #32]
   16ddc:	9b08      	ldr	r3, [sp, #32]
   16dde:	2b03      	cmp	r3, #3
   16de0:	dc22      	bgt.n	16e28 <Sd::Mount(SdInterface::CardInfo_t*)+0x2d4>
    {
      // ensure OCR doesn't capture the R1 section of the response
      sd->ocr.byte[i] = sd->response.data.byte[i + 1];
   16de2:	9b08      	ldr	r3, [sp, #32]
   16de4:	3301      	adds	r3, #1
   16de6:	9a02      	ldr	r2, [sp, #8]
   16de8:	4413      	add	r3, r2
   16dea:	7a19      	ldrb	r1, [r3, #8]
   16dec:	9a02      	ldr	r2, [sp, #8]
   16dee:	9b08      	ldr	r3, [sp, #32]
   16df0:	4413      	add	r3, r2
   16df2:	460a      	mov	r2, r1
   16df4:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < 4; i++)
   16df6:	9b08      	ldr	r3, [sp, #32]
   16df8:	3301      	adds	r3, #1
   16dfa:	9308      	str	r3, [sp, #32]
   16dfc:	e7ee      	b.n	16ddc <Sd::Mount(SdInterface::CardInfo_t*)+0x288>
   16dfe:	bf00      	nop
   16e00:	00016b55 	.word	0x00016b55
   16e04:	0001a7f4 	.word	0x0001a7f4
   16e08:	0001a704 	.word	0x0001a704
   16e0c:	00019d98 	.word	0x00019d98
   16e10:	0001a70c 	.word	0x0001a70c
   16e14:	00019e08 	.word	0x00019e08
   16e18:	0001a714 	.word	0x0001a714
   16e1c:	00019e6c 	.word	0x00019e6c
   16e20:	0001a71c 	.word	0x0001a71c
   16e24:	00019ecc 	.word	0x00019ecc
    }

    // If card is SDSC, manually set its block size
    if (sd->type == Type::kSDSC)
   16e28:	9b02      	ldr	r3, [sp, #8]
   16e2a:	685b      	ldr	r3, [r3, #4]
   16e2c:	2b00      	cmp	r3, #0
   16e2e:	d112      	bne.n	16e56 <Sd::Mount(SdInterface::CardInfo_t*)+0x302>
    {
      // Send requested byte size
      sd->response.length =
          SendCmd(Command::kChgBlkLen, static_cast<uint32_t>(kBlockSize),
                  sd->response.data.byte, 0, KeepAlive::kYes);
   16e30:	9b03      	ldr	r3, [sp, #12]
   16e32:	681b      	ldr	r3, [r3, #0]
   16e34:	681c      	ldr	r4, [r3, #0]
          SendCmd(Command::kChgBlkLen, static_cast<uint32_t>(kBlockSize),
   16e36:	9b02      	ldr	r3, [sp, #8]
   16e38:	f103 0208 	add.w	r2, r3, #8
   16e3c:	2301      	movs	r3, #1
   16e3e:	9301      	str	r3, [sp, #4]
   16e40:	2300      	movs	r3, #0
   16e42:	9300      	str	r3, [sp, #0]
   16e44:	4613      	mov	r3, r2
   16e46:	f44f 7200 	mov.w	r2, #512	; 0x200
   16e4a:	2150      	movs	r1, #80	; 0x50
   16e4c:	9803      	ldr	r0, [sp, #12]
   16e4e:	47a0      	blx	r4
   16e50:	4602      	mov	r2, r0
      sd->response.length =
   16e52:	9b02      	ldr	r3, [sp, #8]
   16e54:	611a      	str	r2, [r3, #16]
    }

    return true;
   16e56:	2401      	movs	r4, #1
   16e58:	462b      	mov	r3, r5
   16e5a:	4619      	mov	r1, r3
   16e5c:	4803      	ldr	r0, [pc, #12]	; (16e6c <Sd::Mount(SdInterface::CardInfo_t*)+0x318>)
   16e5e:	f7fe fb4b 	bl	154f8 <__cyg_profile_func_exit>
   16e62:	4623      	mov	r3, r4
  }
   16e64:	4618      	mov	r0, r3
   16e66:	b00b      	add	sp, #44	; 0x2c
   16e68:	bd30      	pop	{r4, r5, pc}
   16e6a:	bf00      	nop
   16e6c:	00016b55 	.word	0x00016b55

00016e70 <Sd::ToBool(bool)>:

  // Returns string to represent a boolean value
  const char * ToBool(bool condition)
   16e70:	b530      	push	{r4, r5, lr}
   16e72:	b083      	sub	sp, #12
   16e74:	4675      	mov	r5, lr
   16e76:	9001      	str	r0, [sp, #4]
   16e78:	460b      	mov	r3, r1
   16e7a:	f88d 3003 	strb.w	r3, [sp, #3]
   16e7e:	462b      	mov	r3, r5
   16e80:	4619      	mov	r1, r3
   16e82:	4809      	ldr	r0, [pc, #36]	; (16ea8 <Sd::ToBool(bool)+0x38>)
   16e84:	f7fe fb24 	bl	154d0 <__cyg_profile_func_enter>
  {
    return (condition) ? "true" : "false";
   16e88:	f89d 3003 	ldrb.w	r3, [sp, #3]
   16e8c:	2b00      	cmp	r3, #0
   16e8e:	d001      	beq.n	16e94 <Sd::ToBool(bool)+0x24>
   16e90:	4c06      	ldr	r4, [pc, #24]	; (16eac <Sd::ToBool(bool)+0x3c>)
   16e92:	e000      	b.n	16e96 <Sd::ToBool(bool)+0x26>
   16e94:	4c06      	ldr	r4, [pc, #24]	; (16eb0 <Sd::ToBool(bool)+0x40>)
   16e96:	462b      	mov	r3, r5
   16e98:	4619      	mov	r1, r3
   16e9a:	4803      	ldr	r0, [pc, #12]	; (16ea8 <Sd::ToBool(bool)+0x38>)
   16e9c:	f7fe fb2c 	bl	154f8 <__cyg_profile_func_exit>
   16ea0:	4623      	mov	r3, r4
  }
   16ea2:	4618      	mov	r0, r3
   16ea4:	b003      	add	sp, #12
   16ea6:	bd30      	pop	{r4, r5, pc}
   16ea8:	00016e71 	.word	0x00016e71
   16eac:	00019f24 	.word	0x00019f24
   16eb0:	00019f2c 	.word	0x00019f2c

00016eb4 <Sd::WaitToReadBlock()>:

  // Waits for the card to respond after a single or multi block read cmd is
  // sent.
  void WaitToReadBlock()
   16eb4:	b510      	push	{r4, lr}
   16eb6:	b084      	sub	sp, #16
   16eb8:	4674      	mov	r4, lr
   16eba:	9001      	str	r0, [sp, #4]
   16ebc:	4623      	mov	r3, r4
   16ebe:	4619      	mov	r1, r3
   16ec0:	4814      	ldr	r0, [pc, #80]	; (16f14 <Sd::WaitToReadBlock()+0x60>)
   16ec2:	f7fe fb05 	bl	154d0 <__cyg_profile_func_enter>
    // Bit 4 -->  If set, card is locked
    // Bit 3 -->  If set, address is out or range
    // Bit 2 -->  If set, card ECC failed
    // Bit 1 -->  If set, CC error occurred
    // Bit 0 -->  If set, a generic error occurred
    uint8_t wait_byte = 0x00;
   16ec6:	2300      	movs	r3, #0
   16ec8:	f88d 300f 	strb.w	r3, [sp, #15]
    do
    {
      wait_byte = static_cast<uint8_t>(ssp_interface_->Transfer(0xFF));
   16ecc:	9b01      	ldr	r3, [sp, #4]
   16ece:	685a      	ldr	r2, [r3, #4]
   16ed0:	9b01      	ldr	r3, [sp, #4]
   16ed2:	685b      	ldr	r3, [r3, #4]
   16ed4:	681b      	ldr	r3, [r3, #0]
   16ed6:	3308      	adds	r3, #8
   16ed8:	681b      	ldr	r3, [r3, #0]
   16eda:	21ff      	movs	r1, #255	; 0xff
   16edc:	4610      	mov	r0, r2
   16ede:	4798      	blx	r3
   16ee0:	4603      	mov	r3, r0
   16ee2:	f88d 300f 	strb.w	r3, [sp, #15]
    } while (wait_byte != 0xFE && (wait_byte & 0xE0) != 0x00);
   16ee6:	f89d 300f 	ldrb.w	r3, [sp, #15]
   16eea:	2bfe      	cmp	r3, #254	; 0xfe
   16eec:	d006      	beq.n	16efc <Sd::WaitToReadBlock()+0x48>
   16eee:	f89d 300f 	ldrb.w	r3, [sp, #15]
   16ef2:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
   16ef6:	2b00      	cmp	r3, #0
   16ef8:	d000      	beq.n	16efc <Sd::WaitToReadBlock()+0x48>
    do
   16efa:	e7e7      	b.n	16ecc <Sd::WaitToReadBlock()+0x18>

    // DEBUG: Check the value of the wait byte
    if (wait_byte == 0xFE)
   16efc:	f89d 300f 	ldrb.w	r3, [sp, #15]
   16f00:	2bfe      	cmp	r3, #254	; 0xfe
   16f02:	4623      	mov	r3, r4
   16f04:	4619      	mov	r1, r3
   16f06:	4803      	ldr	r0, [pc, #12]	; (16f14 <Sd::WaitToReadBlock()+0x60>)
   16f08:	f7fe faf6 	bl	154f8 <__cyg_profile_func_exit>
      LOG_DEBUG("Addr Out of Range?: %s", ToBool(wait_byte & 0x08));
      LOG_DEBUG("Card ECC Failed?: %s", ToBool(wait_byte & 0x04));
      LOG_DEBUG("CC Error?: %s", ToBool(wait_byte & 0x02));
      LOG_DEBUG("Error?: %s", ToBool(wait_byte & 0x01));
    }
  }
   16f0c:	bf00      	nop
   16f0e:	b004      	add	sp, #16
   16f10:	bd10      	pop	{r4, pc}
   16f12:	bf00      	nop
   16f14:	00016eb5 	.word	0x00016eb5

00016f18 <Sd::WaitWhileBusy()>:

  // Waits for the card to be ready to receive a new block after one has
  // been written or erased
  void WaitWhileBusy()
   16f18:	b510      	push	{r4, lr}
   16f1a:	b084      	sub	sp, #16
   16f1c:	4674      	mov	r4, lr
   16f1e:	9001      	str	r0, [sp, #4]
   16f20:	4623      	mov	r3, r4
   16f22:	4619      	mov	r1, r3
   16f24:	480f      	ldr	r0, [pc, #60]	; (16f64 <Sd::WaitWhileBusy()+0x4c>)
   16f26:	f7fe fad3 	bl	154d0 <__cyg_profile_func_enter>
  {
    // Wait for the card to finish programming (i.e. when the
    // bytes return to 0xFF)
    uint8_t busy_byte = 0x00;
   16f2a:	2300      	movs	r3, #0
   16f2c:	f88d 300f 	strb.w	r3, [sp, #15]
    LOG_DEBUG("Card is busy. Waiting for it to finish...");
    do
    {
      busy_byte = static_cast<uint8_t>(ssp_interface_->Transfer(0xFF));
   16f30:	9b01      	ldr	r3, [sp, #4]
   16f32:	685a      	ldr	r2, [r3, #4]
   16f34:	9b01      	ldr	r3, [sp, #4]
   16f36:	685b      	ldr	r3, [r3, #4]
   16f38:	681b      	ldr	r3, [r3, #0]
   16f3a:	3308      	adds	r3, #8
   16f3c:	681b      	ldr	r3, [r3, #0]
   16f3e:	21ff      	movs	r1, #255	; 0xff
   16f40:	4610      	mov	r0, r2
   16f42:	4798      	blx	r3
   16f44:	4603      	mov	r3, r0
   16f46:	f88d 300f 	strb.w	r3, [sp, #15]
    } while (busy_byte != 0xFF);
   16f4a:	f89d 300f 	ldrb.w	r3, [sp, #15]
   16f4e:	2bff      	cmp	r3, #255	; 0xff
   16f50:	d000      	beq.n	16f54 <Sd::WaitWhileBusy()+0x3c>
    do
   16f52:	e7ed      	b.n	16f30 <Sd::WaitWhileBusy()+0x18>
   16f54:	4623      	mov	r3, r4
   16f56:	4619      	mov	r1, r3
   16f58:	4802      	ldr	r0, [pc, #8]	; (16f64 <Sd::WaitWhileBusy()+0x4c>)
   16f5a:	f7fe facd 	bl	154f8 <__cyg_profile_func_exit>
    LOG_DEBUG("Card finished!");
  }
   16f5e:	bf00      	nop
   16f60:	b004      	add	sp, #16
   16f62:	bd10      	pop	{r4, pc}
   16f64:	00016f19 	.word	0x00016f19

00016f68 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)>:

  // Read any number of blocks from the SD card
  uint8_t ReadBlock(uint32_t address, uint8_t * array,
   16f68:	b530      	push	{r4, r5, lr}
   16f6a:	f5ad 7d13 	sub.w	sp, sp, #588	; 0x24c
   16f6e:	4675      	mov	r5, lr
   16f70:	ac05      	add	r4, sp, #20
   16f72:	6020      	str	r0, [r4, #0]
   16f74:	a804      	add	r0, sp, #16
   16f76:	6001      	str	r1, [r0, #0]
   16f78:	a903      	add	r1, sp, #12
   16f7a:	600a      	str	r2, [r1, #0]
   16f7c:	aa02      	add	r2, sp, #8
   16f7e:	6013      	str	r3, [r2, #0]
   16f80:	462b      	mov	r3, r5
   16f82:	4619      	mov	r1, r3
   16f84:	487d      	ldr	r0, [pc, #500]	; (1717c <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x214>)
   16f86:	f7fe faa3 	bl	154d0 <__cyg_profile_func_enter>
                    uint32_t blocks = 1) override
  {
    LOG_DEBUG("Block %" PRId32 " :: 0x%" PRIX32 " for %" PRId32 " blocks",
              address, address, blocks);
    // Wait for a previous command to finish
    WaitWhileBusy();
   16f8a:	ab05      	add	r3, sp, #20
   16f8c:	6818      	ldr	r0, [r3, #0]
   16f8e:	f7ff ffc3 	bl	16f18 <Sd::WaitWhileBusy()>

    // Create a temporary storage location to store sd command responses
    Sd::CardInfo_t sd;
    bool payload_had_bad_crc = false;
   16f92:	2300      	movs	r3, #0
   16f94:	f88d 3247 	strb.w	r3, [sp, #583]	; 0x247

    // Create a temporary place to store blocks of 512 bytes (this is now
    // possible because the constructor enforces block size cross-
    // compatibility)
    uint8_t block_store[512] = { 0 };
   16f98:	ab06      	add	r3, sp, #24
   16f9a:	4618      	mov	r0, r3
   16f9c:	f44f 7300 	mov.w	r3, #512	; 0x200
   16fa0:	461a      	mov	r2, r3
   16fa2:	2100      	movs	r1, #0
   16fa4:	f001 f8fa 	bl	1819c <memset>

    // Determine appropriate command to send
    Command read_cmd;
    if (blocks > 1)
   16fa8:	ab02      	add	r3, sp, #8
   16faa:	681b      	ldr	r3, [r3, #0]
   16fac:	2b01      	cmp	r3, #1
   16fae:	d902      	bls.n	16fb6 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x4e>
    {
      read_cmd = Command::kReadMulti;
   16fb0:	2352      	movs	r3, #82	; 0x52
   16fb2:	9390      	str	r3, [sp, #576]	; 0x240
   16fb4:	e001      	b.n	16fba <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x52>
    }
    else
    {
      read_cmd = Command::kReadSingle;
   16fb6:	2351      	movs	r3, #81	; 0x51
   16fb8:	9390      	str	r3, [sp, #576]	; 0x240
    }

    // Send initial read command
    sd.response.length =
        SendCmd(read_cmd, address, sd.response.data.byte, 100, KeepAlive::kYes);
   16fba:	ab05      	add	r3, sp, #20
   16fbc:	681b      	ldr	r3, [r3, #0]
   16fbe:	681b      	ldr	r3, [r3, #0]
   16fc0:	681c      	ldr	r4, [r3, #0]
   16fc2:	ab86      	add	r3, sp, #536	; 0x218
   16fc4:	f103 0108 	add.w	r1, r3, #8
   16fc8:	aa04      	add	r2, sp, #16
   16fca:	a805      	add	r0, sp, #20
   16fcc:	2301      	movs	r3, #1
   16fce:	9301      	str	r3, [sp, #4]
   16fd0:	2364      	movs	r3, #100	; 0x64
   16fd2:	9300      	str	r3, [sp, #0]
   16fd4:	460b      	mov	r3, r1
   16fd6:	6812      	ldr	r2, [r2, #0]
   16fd8:	9990      	ldr	r1, [sp, #576]	; 0x240
   16fda:	6800      	ldr	r0, [r0, #0]
   16fdc:	47a0      	blx	r4
   16fde:	4603      	mov	r3, r0
    sd.response.length =
   16fe0:	938a      	str	r3, [sp, #552]	; 0x228
    LOG_DEBUG("Sent Read Cmd");
    LOG_DEBUG("[R1 Response:0x%02X]", sd.response.data.byte[0]);

    // Check if the command was acknowledged properly
    if (sd.response.data.byte[0] == 0x00)
   16fe2:	f89d 3220 	ldrb.w	r3, [sp, #544]	; 0x220
   16fe6:	2b00      	cmp	r3, #0
   16fe8:	f040 80d8 	bne.w	1719c <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x234>
    {
      // For every block requested
      uint16_t block_count;
      for (block_count = 0; block_count < blocks; block_count++)
   16fec:	2300      	movs	r3, #0
   16fee:	f8ad 323e 	strh.w	r3, [sp, #574]	; 0x23e
   16ff2:	f8bd 323e 	ldrh.w	r3, [sp, #574]	; 0x23e
   16ff6:	aa02      	add	r2, sp, #8
   16ff8:	6812      	ldr	r2, [r2, #0]
   16ffa:	429a      	cmp	r2, r3
   16ffc:	f240 8099 	bls.w	17132 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x1ca>
      {
        // Wait for the card to respond with a ready signal
        WaitToReadBlock();
   17000:	ab05      	add	r3, sp, #20
   17002:	6818      	ldr	r0, [r3, #0]
   17004:	f7ff ff56 	bl	16eb4 <Sd::WaitToReadBlock()>

        // Calculate the block address offset
        uint16_t block_addr_offset =
   17008:	f8bd 323e 	ldrh.w	r3, [sp, #574]	; 0x23e
   1700c:	025b      	lsls	r3, r3, #9
   1700e:	f8ad 323a 	strh.w	r3, [sp, #570]	; 0x23a
            static_cast<uint16_t>(block_count * kBlockSize);

        // Read all the bytes of a single block
        for (uint16_t byte_count = 0; byte_count < kBlockSize; byte_count++)
   17012:	2300      	movs	r3, #0
   17014:	f8ad 323c 	strh.w	r3, [sp, #572]	; 0x23c
   17018:	f8bd 323c 	ldrh.w	r3, [sp, #572]	; 0x23c
   1701c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   17020:	d22b      	bcs.n	1707a <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x112>
        {
          // Calculate the current storage index
          uint16_t storage_index =
   17022:	f8bd 223a 	ldrh.w	r2, [sp, #570]	; 0x23a
   17026:	f8bd 323c 	ldrh.w	r3, [sp, #572]	; 0x23c
   1702a:	4413      	add	r3, r2
   1702c:	f8ad 3238 	strh.w	r3, [sp, #568]	; 0x238
              static_cast<uint16_t>(block_addr_offset + byte_count);

          // Transfer a byte to read a block from the SD card
          array[storage_index] =
              static_cast<uint8_t>(ssp_interface_->Transfer(0xFF));
   17030:	ab05      	add	r3, sp, #20
   17032:	681b      	ldr	r3, [r3, #0]
   17034:	685a      	ldr	r2, [r3, #4]
   17036:	ab05      	add	r3, sp, #20
   17038:	681b      	ldr	r3, [r3, #0]
   1703a:	685b      	ldr	r3, [r3, #4]
   1703c:	681b      	ldr	r3, [r3, #0]
   1703e:	3308      	adds	r3, #8
   17040:	681b      	ldr	r3, [r3, #0]
   17042:	21ff      	movs	r1, #255	; 0xff
   17044:	4610      	mov	r0, r2
   17046:	4798      	blx	r3
   17048:	4603      	mov	r3, r0
   1704a:	4619      	mov	r1, r3
          array[storage_index] =
   1704c:	f8bd 3238 	ldrh.w	r3, [sp, #568]	; 0x238
   17050:	aa03      	add	r2, sp, #12
   17052:	6812      	ldr	r2, [r2, #0]
   17054:	4413      	add	r3, r2
   17056:	b2ca      	uxtb	r2, r1
   17058:	701a      	strb	r2, [r3, #0]

          // Copy that byte into our temporary block store
          block_store[byte_count] = array[storage_index];
   1705a:	f8bd 3238 	ldrh.w	r3, [sp, #568]	; 0x238
   1705e:	aa03      	add	r2, sp, #12
   17060:	6812      	ldr	r2, [r2, #0]
   17062:	441a      	add	r2, r3
   17064:	f8bd 323c 	ldrh.w	r3, [sp, #572]	; 0x23c
   17068:	7811      	ldrb	r1, [r2, #0]
   1706a:	aa06      	add	r2, sp, #24
   1706c:	54d1      	strb	r1, [r2, r3]
        for (uint16_t byte_count = 0; byte_count < kBlockSize; byte_count++)
   1706e:	f8bd 323c 	ldrh.w	r3, [sp, #572]	; 0x23c
   17072:	3301      	adds	r3, #1
   17074:	f8ad 323c 	strh.w	r3, [sp, #572]	; 0x23c
   17078:	e7ce      	b.n	17018 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0xb0>
        }

        // Then read the block's 16-bit CRC (i.e. read two bytes)
        uint16_t block_crc =
            static_cast<uint16_t>((ssp_interface_->Transfer(0xFF) << 8) |
   1707a:	ab05      	add	r3, sp, #20
   1707c:	681b      	ldr	r3, [r3, #0]
   1707e:	685a      	ldr	r2, [r3, #4]
   17080:	ab05      	add	r3, sp, #20
   17082:	681b      	ldr	r3, [r3, #0]
   17084:	685b      	ldr	r3, [r3, #4]
   17086:	681b      	ldr	r3, [r3, #0]
   17088:	3308      	adds	r3, #8
   1708a:	681b      	ldr	r3, [r3, #0]
   1708c:	21ff      	movs	r1, #255	; 0xff
   1708e:	4610      	mov	r0, r2
   17090:	4798      	blx	r3
   17092:	4603      	mov	r3, r0
   17094:	021b      	lsls	r3, r3, #8
   17096:	b21c      	sxth	r4, r3
                                  ssp_interface_->Transfer(0xFF));
   17098:	ab05      	add	r3, sp, #20
   1709a:	681b      	ldr	r3, [r3, #0]
   1709c:	685a      	ldr	r2, [r3, #4]
   1709e:	ab05      	add	r3, sp, #20
   170a0:	681b      	ldr	r3, [r3, #0]
   170a2:	685b      	ldr	r3, [r3, #4]
   170a4:	681b      	ldr	r3, [r3, #0]
   170a6:	3308      	adds	r3, #8
   170a8:	681b      	ldr	r3, [r3, #0]
   170aa:	21ff      	movs	r1, #255	; 0xff
   170ac:	4610      	mov	r0, r2
   170ae:	4798      	blx	r3
   170b0:	4603      	mov	r3, r0
   170b2:	b21b      	sxth	r3, r3
            static_cast<uint16_t>((ssp_interface_->Transfer(0xFF) << 8) |
   170b4:	4323      	orrs	r3, r4
   170b6:	b21b      	sxth	r3, r3
                                  ssp_interface_->Transfer(0xFF));
   170b8:	f8ad 3236 	strh.w	r3, [sp, #566]	; 0x236

        // Run a CRC-16 calculation on the message to determine if the
        // received CRCs match (i.e. checks if the block data is
        // valid).
        uint16_t expected_block_crc = GetCrc16(block_store, 512);
   170bc:	ab05      	add	r3, sp, #20
   170be:	681b      	ldr	r3, [r3, #0]
   170c0:	681b      	ldr	r3, [r3, #0]
   170c2:	3320      	adds	r3, #32
   170c4:	681b      	ldr	r3, [r3, #0]
   170c6:	a906      	add	r1, sp, #24
   170c8:	a805      	add	r0, sp, #20
   170ca:	f44f 7200 	mov.w	r2, #512	; 0x200
   170ce:	6800      	ldr	r0, [r0, #0]
   170d0:	4798      	blx	r3
   170d2:	4603      	mov	r3, r0
   170d4:	f8ad 3234 	strh.w	r3, [sp, #564]	; 0x234

        LOG_DEBUG("Block #%d @ 0x%" PRIX32 " acquired", block_count, address);
        LOG_DEBUG("Expecting block crc16 '0x%04X'", expected_block_crc);
        LOG_DEBUG("Got '0x%04X'", block_crc);
        if (expected_block_crc != block_crc)
   170d8:	f8bd 2234 	ldrh.w	r2, [sp, #564]	; 0x234
   170dc:	f8bd 3236 	ldrh.w	r3, [sp, #566]	; 0x236
   170e0:	429a      	cmp	r2, r3
   170e2:	d020      	beq.n	17126 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x1be>
        {
          // If they do not match, set the bad crc status
          payload_had_bad_crc = true;
   170e4:	2301      	movs	r3, #1
   170e6:	f88d 3247 	strb.w	r3, [sp, #583]	; 0x247
          LOG_ERROR("While Reading Block #%d CRC16:", block_count);
   170ea:	f8bd 323e 	ldrh.w	r3, [sp, #574]	; 0x23e
   170ee:	9300      	str	r3, [sp, #0]
   170f0:	f240 23ed 	movw	r3, #749	; 0x2ed
   170f4:	4a22      	ldr	r2, [pc, #136]	; (17180 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x218>)
   170f6:	4923      	ldr	r1, [pc, #140]	; (17184 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x21c>)
   170f8:	4823      	ldr	r0, [pc, #140]	; (17188 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x220>)
   170fa:	f7ff fc43 	bl	16984 <printf>
          LOG_ERROR("Expected '0x%04X'", expected_block_crc);
   170fe:	f8bd 3234 	ldrh.w	r3, [sp, #564]	; 0x234
   17102:	9300      	str	r3, [sp, #0]
   17104:	f240 23ee 	movw	r3, #750	; 0x2ee
   17108:	4a1d      	ldr	r2, [pc, #116]	; (17180 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x218>)
   1710a:	4920      	ldr	r1, [pc, #128]	; (1718c <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x224>)
   1710c:	4820      	ldr	r0, [pc, #128]	; (17190 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x228>)
   1710e:	f7ff fc39 	bl	16984 <printf>
          LOG_ERROR("Got '0x%04X'", block_crc);
   17112:	f8bd 3236 	ldrh.w	r3, [sp, #566]	; 0x236
   17116:	9300      	str	r3, [sp, #0]
   17118:	f240 23ef 	movw	r3, #751	; 0x2ef
   1711c:	4a18      	ldr	r2, [pc, #96]	; (17180 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x218>)
   1711e:	491d      	ldr	r1, [pc, #116]	; (17194 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x22c>)
   17120:	481d      	ldr	r0, [pc, #116]	; (17198 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x230>)
   17122:	f7ff fc2f 	bl	16984 <printf>
      for (block_count = 0; block_count < blocks; block_count++)
   17126:	f8bd 323e 	ldrh.w	r3, [sp, #574]	; 0x23e
   1712a:	3301      	adds	r3, #1
   1712c:	f8ad 323e 	strh.w	r3, [sp, #574]	; 0x23e
   17130:	e75f      	b.n	16ff2 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x8a>
        }
      }

      // After reading multiple blocks, send the stop command to terminate the
      // transaction (i.e. no keep-alive)
      if (blocks > 1)
   17132:	ab02      	add	r3, sp, #8
   17134:	681b      	ldr	r3, [r3, #0]
   17136:	2b01      	cmp	r3, #1
   17138:	d913      	bls.n	17162 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x1fa>
      {
        sd.response.length =
            SendCmd(Command::kStopTrans, 0xFFFFFFFF, sd.response.data.byte, 100,
                    KeepAlive::kNo);
   1713a:	ab05      	add	r3, sp, #20
   1713c:	681b      	ldr	r3, [r3, #0]
   1713e:	681b      	ldr	r3, [r3, #0]
   17140:	681c      	ldr	r4, [r3, #0]
            SendCmd(Command::kStopTrans, 0xFFFFFFFF, sd.response.data.byte, 100,
   17142:	ab86      	add	r3, sp, #536	; 0x218
   17144:	f103 0208 	add.w	r2, r3, #8
   17148:	a805      	add	r0, sp, #20
   1714a:	2300      	movs	r3, #0
   1714c:	9301      	str	r3, [sp, #4]
   1714e:	2364      	movs	r3, #100	; 0x64
   17150:	9300      	str	r3, [sp, #0]
   17152:	4613      	mov	r3, r2
   17154:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   17158:	214c      	movs	r1, #76	; 0x4c
   1715a:	6800      	ldr	r0, [r0, #0]
   1715c:	47a0      	blx	r4
   1715e:	4603      	mov	r3, r0
        sd.response.length =
   17160:	938a      	str	r3, [sp, #552]	; 0x228
      LOG_DEBUG("Response Byte");
      LOG_DEBUG("0x%02X", sd.response.data.byte[0]);

      // If there was a bad crc from the payload, manually set the
      // CRC error flag in the command response byte
      if (payload_had_bad_crc)
   17162:	f89d 3247 	ldrb.w	r3, [sp, #583]	; 0x247
   17166:	2b00      	cmp	r3, #0
   17168:	f000 80c0 	beq.w	172ec <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x384>
      {
        sd.response.data.byte[0] |= 0x08;
   1716c:	f89d 3220 	ldrb.w	r3, [sp, #544]	; 0x220
   17170:	f043 0308 	orr.w	r3, r3, #8
   17174:	b2db      	uxtb	r3, r3
   17176:	f88d 3220 	strb.w	r3, [sp, #544]	; 0x220
   1717a:	e0b7      	b.n	172ec <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x384>
   1717c:	00016f69 	.word	0x00016f69
   17180:	0001a828 	.word	0x0001a828
   17184:	0001a724 	.word	0x0001a724
   17188:	00019f34 	.word	0x00019f34
   1718c:	0001a72c 	.word	0x0001a72c
   17190:	00019f8c 	.word	0x00019f8c
   17194:	0001a734 	.word	0x0001a734
   17198:	00019fd8 	.word	0x00019fd8
      }
    }
    else
    {
      LOG_ERROR("Read Cmd was not acknowledged properly!");
   1719c:	f240 3309 	movw	r3, #777	; 0x309
   171a0:	4a65      	ldr	r2, [pc, #404]	; (17338 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x3d0>)
   171a2:	4966      	ldr	r1, [pc, #408]	; (1733c <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x3d4>)
   171a4:	4866      	ldr	r0, [pc, #408]	; (17340 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x3d8>)
   171a6:	f7ff fbed 	bl	16984 <printf>
      LOG_ERROR("Parameter Err: %s", ToBool(sd.response.data.byte[0] & 0x40));
   171aa:	f89d 3220 	ldrb.w	r3, [sp, #544]	; 0x220
   171ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
   171b2:	2b00      	cmp	r3, #0
   171b4:	bf14      	ite	ne
   171b6:	2301      	movne	r3, #1
   171b8:	2300      	moveq	r3, #0
   171ba:	b2da      	uxtb	r2, r3
   171bc:	ab05      	add	r3, sp, #20
   171be:	4611      	mov	r1, r2
   171c0:	6818      	ldr	r0, [r3, #0]
   171c2:	f7ff fe55 	bl	16e70 <Sd::ToBool(bool)>
   171c6:	4603      	mov	r3, r0
   171c8:	9300      	str	r3, [sp, #0]
   171ca:	f240 330a 	movw	r3, #778	; 0x30a
   171ce:	4a5a      	ldr	r2, [pc, #360]	; (17338 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x3d0>)
   171d0:	495c      	ldr	r1, [pc, #368]	; (17344 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x3dc>)
   171d2:	485d      	ldr	r0, [pc, #372]	; (17348 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x3e0>)
   171d4:	f7ff fbd6 	bl	16984 <printf>
      LOG_ERROR("Addr Err: %s", ToBool(sd.response.data.byte[0] & 0x20));
   171d8:	f89d 3220 	ldrb.w	r3, [sp, #544]	; 0x220
   171dc:	f003 0320 	and.w	r3, r3, #32
   171e0:	2b00      	cmp	r3, #0
   171e2:	bf14      	ite	ne
   171e4:	2301      	movne	r3, #1
   171e6:	2300      	moveq	r3, #0
   171e8:	b2da      	uxtb	r2, r3
   171ea:	ab05      	add	r3, sp, #20
   171ec:	4611      	mov	r1, r2
   171ee:	6818      	ldr	r0, [r3, #0]
   171f0:	f7ff fe3e 	bl	16e70 <Sd::ToBool(bool)>
   171f4:	4603      	mov	r3, r0
   171f6:	9300      	str	r3, [sp, #0]
   171f8:	f240 330b 	movw	r3, #779	; 0x30b
   171fc:	4a4e      	ldr	r2, [pc, #312]	; (17338 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x3d0>)
   171fe:	4953      	ldr	r1, [pc, #332]	; (1734c <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x3e4>)
   17200:	4853      	ldr	r0, [pc, #332]	; (17350 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x3e8>)
   17202:	f7ff fbbf 	bl	16984 <printf>
      LOG_ERROR("Erase Seq Err: %s", ToBool(sd.response.data.byte[0] & 0x10));
   17206:	f89d 3220 	ldrb.w	r3, [sp, #544]	; 0x220
   1720a:	f003 0310 	and.w	r3, r3, #16
   1720e:	2b00      	cmp	r3, #0
   17210:	bf14      	ite	ne
   17212:	2301      	movne	r3, #1
   17214:	2300      	moveq	r3, #0
   17216:	b2da      	uxtb	r2, r3
   17218:	ab05      	add	r3, sp, #20
   1721a:	4611      	mov	r1, r2
   1721c:	6818      	ldr	r0, [r3, #0]
   1721e:	f7ff fe27 	bl	16e70 <Sd::ToBool(bool)>
   17222:	4603      	mov	r3, r0
   17224:	9300      	str	r3, [sp, #0]
   17226:	f44f 7343 	mov.w	r3, #780	; 0x30c
   1722a:	4a43      	ldr	r2, [pc, #268]	; (17338 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x3d0>)
   1722c:	4949      	ldr	r1, [pc, #292]	; (17354 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x3ec>)
   1722e:	484a      	ldr	r0, [pc, #296]	; (17358 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x3f0>)
   17230:	f7ff fba8 	bl	16984 <printf>
      LOG_ERROR("Com CRC Err: %s", ToBool(sd.response.data.byte[0] & 0x08));
   17234:	f89d 3220 	ldrb.w	r3, [sp, #544]	; 0x220
   17238:	f003 0308 	and.w	r3, r3, #8
   1723c:	2b00      	cmp	r3, #0
   1723e:	bf14      	ite	ne
   17240:	2301      	movne	r3, #1
   17242:	2300      	moveq	r3, #0
   17244:	b2da      	uxtb	r2, r3
   17246:	ab05      	add	r3, sp, #20
   17248:	4611      	mov	r1, r2
   1724a:	6818      	ldr	r0, [r3, #0]
   1724c:	f7ff fe10 	bl	16e70 <Sd::ToBool(bool)>
   17250:	4603      	mov	r3, r0
   17252:	9300      	str	r3, [sp, #0]
   17254:	f240 330d 	movw	r3, #781	; 0x30d
   17258:	4a37      	ldr	r2, [pc, #220]	; (17338 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x3d0>)
   1725a:	4940      	ldr	r1, [pc, #256]	; (1735c <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x3f4>)
   1725c:	4840      	ldr	r0, [pc, #256]	; (17360 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x3f8>)
   1725e:	f7ff fb91 	bl	16984 <printf>
      LOG_ERROR("Illegal Cmd Err: %s", ToBool(sd.response.data.byte[0] & 0x04));
   17262:	f89d 3220 	ldrb.w	r3, [sp, #544]	; 0x220
   17266:	f003 0304 	and.w	r3, r3, #4
   1726a:	2b00      	cmp	r3, #0
   1726c:	bf14      	ite	ne
   1726e:	2301      	movne	r3, #1
   17270:	2300      	moveq	r3, #0
   17272:	b2da      	uxtb	r2, r3
   17274:	ab05      	add	r3, sp, #20
   17276:	4611      	mov	r1, r2
   17278:	6818      	ldr	r0, [r3, #0]
   1727a:	f7ff fdf9 	bl	16e70 <Sd::ToBool(bool)>
   1727e:	4603      	mov	r3, r0
   17280:	9300      	str	r3, [sp, #0]
   17282:	f240 330e 	movw	r3, #782	; 0x30e
   17286:	4a2c      	ldr	r2, [pc, #176]	; (17338 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x3d0>)
   17288:	4936      	ldr	r1, [pc, #216]	; (17364 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x3fc>)
   1728a:	4837      	ldr	r0, [pc, #220]	; (17368 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x400>)
   1728c:	f7ff fb7a 	bl	16984 <printf>
      LOG_ERROR("Erase Reset: %s", ToBool(sd.response.data.byte[0] & 0x02));
   17290:	f89d 3220 	ldrb.w	r3, [sp, #544]	; 0x220
   17294:	f003 0302 	and.w	r3, r3, #2
   17298:	2b00      	cmp	r3, #0
   1729a:	bf14      	ite	ne
   1729c:	2301      	movne	r3, #1
   1729e:	2300      	moveq	r3, #0
   172a0:	b2da      	uxtb	r2, r3
   172a2:	ab05      	add	r3, sp, #20
   172a4:	4611      	mov	r1, r2
   172a6:	6818      	ldr	r0, [r3, #0]
   172a8:	f7ff fde2 	bl	16e70 <Sd::ToBool(bool)>
   172ac:	4603      	mov	r3, r0
   172ae:	9300      	str	r3, [sp, #0]
   172b0:	f240 330f 	movw	r3, #783	; 0x30f
   172b4:	4a20      	ldr	r2, [pc, #128]	; (17338 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x3d0>)
   172b6:	492d      	ldr	r1, [pc, #180]	; (1736c <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x404>)
   172b8:	482d      	ldr	r0, [pc, #180]	; (17370 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x408>)
   172ba:	f7ff fb63 	bl	16984 <printf>
      LOG_ERROR("In Idle: %s", ToBool(sd.response.data.byte[0] & 0x01));
   172be:	f89d 3220 	ldrb.w	r3, [sp, #544]	; 0x220
   172c2:	f003 0301 	and.w	r3, r3, #1
   172c6:	2b00      	cmp	r3, #0
   172c8:	bf14      	ite	ne
   172ca:	2301      	movne	r3, #1
   172cc:	2300      	moveq	r3, #0
   172ce:	b2da      	uxtb	r2, r3
   172d0:	ab05      	add	r3, sp, #20
   172d2:	4611      	mov	r1, r2
   172d4:	6818      	ldr	r0, [r3, #0]
   172d6:	f7ff fdcb 	bl	16e70 <Sd::ToBool(bool)>
   172da:	4603      	mov	r3, r0
   172dc:	9300      	str	r3, [sp, #0]
   172de:	f44f 7344 	mov.w	r3, #784	; 0x310
   172e2:	4a15      	ldr	r2, [pc, #84]	; (17338 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x3d0>)
   172e4:	4923      	ldr	r1, [pc, #140]	; (17374 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x40c>)
   172e6:	4824      	ldr	r0, [pc, #144]	; (17378 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x410>)
   172e8:	f7ff fb4c 	bl	16984 <printf>
    LOG_DEBUG("Now waiting for SD Card to exit Idle Mode...");
    do
    {
      // Query the status register
      sd.response.length = SendCmd(Command::kGetStatus, 32,
                                   sd.response.data.byte, 0, KeepAlive::kNo);
   172ec:	ab05      	add	r3, sp, #20
   172ee:	681b      	ldr	r3, [r3, #0]
   172f0:	681b      	ldr	r3, [r3, #0]
   172f2:	681c      	ldr	r4, [r3, #0]
      sd.response.length = SendCmd(Command::kGetStatus, 32,
   172f4:	ab86      	add	r3, sp, #536	; 0x218
   172f6:	f103 0208 	add.w	r2, r3, #8
   172fa:	a805      	add	r0, sp, #20
   172fc:	2300      	movs	r3, #0
   172fe:	9301      	str	r3, [sp, #4]
   17300:	2300      	movs	r3, #0
   17302:	9300      	str	r3, [sp, #0]
   17304:	4613      	mov	r3, r2
   17306:	2220      	movs	r2, #32
   17308:	210d      	movs	r1, #13
   1730a:	6800      	ldr	r0, [r0, #0]
   1730c:	47a0      	blx	r4
   1730e:	4603      	mov	r3, r0
   17310:	938a      	str	r3, [sp, #552]	; 0x228
    } while (sd.response.data.byte[0] & 0x01);
   17312:	f89d 3220 	ldrb.w	r3, [sp, #544]	; 0x220
   17316:	f003 0301 	and.w	r3, r3, #1
   1731a:	2b00      	cmp	r3, #0
   1731c:	d000      	beq.n	17320 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x3b8>
    do
   1731e:	e7e5      	b.n	172ec <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x384>
    LOG_DEBUG("SD Card is out of Idle Mode!");

    // Return the status
    LOG_DEBUG("Read Complete! [R1 Response: 0x%02X]", sd.response.data.byte[0]);
    return sd.response.data.byte[0];
   17320:	f89d 4220 	ldrb.w	r4, [sp, #544]	; 0x220
   17324:	462b      	mov	r3, r5
   17326:	4619      	mov	r1, r3
   17328:	4814      	ldr	r0, [pc, #80]	; (1737c <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x414>)
   1732a:	f7fe f8e5 	bl	154f8 <__cyg_profile_func_exit>
   1732e:	4623      	mov	r3, r4
  }
   17330:	4618      	mov	r0, r3
   17332:	f50d 7d13 	add.w	sp, sp, #588	; 0x24c
   17336:	bd30      	pop	{r4, r5, pc}
   17338:	0001a828 	.word	0x0001a828
   1733c:	0001a73c 	.word	0x0001a73c
   17340:	0001a020 	.word	0x0001a020
   17344:	0001a744 	.word	0x0001a744
   17348:	0001a084 	.word	0x0001a084
   1734c:	0001a74c 	.word	0x0001a74c
   17350:	0001a0d0 	.word	0x0001a0d0
   17354:	0001a754 	.word	0x0001a754
   17358:	0001a118 	.word	0x0001a118
   1735c:	0001a75c 	.word	0x0001a75c
   17360:	0001a164 	.word	0x0001a164
   17364:	0001a764 	.word	0x0001a764
   17368:	0001a1b0 	.word	0x0001a1b0
   1736c:	0001a76c 	.word	0x0001a76c
   17370:	0001a200 	.word	0x0001a200
   17374:	0001a774 	.word	0x0001a774
   17378:	0001a24c 	.word	0x0001a24c
   1737c:	00016f69 	.word	0x00016f69

00017380 <Sd::WriteBlock(unsigned long, unsigned char const*, unsigned long)>:

  // Writes any number of 512-byte blocks to the SD Card
  uint8_t WriteBlock(uint32_t address, const uint8_t * array,
   17380:	b530      	push	{r4, r5, lr}
   17382:	b095      	sub	sp, #84	; 0x54
   17384:	4675      	mov	r5, lr
   17386:	9005      	str	r0, [sp, #20]
   17388:	9104      	str	r1, [sp, #16]
   1738a:	9203      	str	r2, [sp, #12]
   1738c:	9302      	str	r3, [sp, #8]
   1738e:	462b      	mov	r3, r5
   17390:	4619      	mov	r1, r3
   17392:	4865      	ldr	r0, [pc, #404]	; (17528 <Sd::WriteBlock(unsigned long, unsigned char const*, unsigned long)+0x1a8>)
   17394:	f7fe f89c 	bl	154d0 <__cyg_profile_func_enter>
                     uint32_t blocks = 1) override
  {
    // Wait for a previous command to finish
    WaitWhileBusy();
   17398:	9805      	ldr	r0, [sp, #20]
   1739a:	f7ff fdbd 	bl	16f18 <Sd::WaitWhileBusy()>
    Sd::CardInfo_t sd;

    // Determine appropriate command and start token to send
    Command write_cmd;
    uint8_t write_start_tkn;
    if (blocks > 1)
   1739e:	9b02      	ldr	r3, [sp, #8]
   173a0:	2b01      	cmp	r3, #1
   173a2:	d905      	bls.n	173b0 <Sd::WriteBlock(unsigned long, unsigned char const*, unsigned long)+0x30>
    {
      write_cmd       = Command::kWriteMulti;
   173a4:	2359      	movs	r3, #89	; 0x59
   173a6:	9313      	str	r3, [sp, #76]	; 0x4c
      write_start_tkn = 0xFC;
   173a8:	23fc      	movs	r3, #252	; 0xfc
   173aa:	f88d 304b 	strb.w	r3, [sp, #75]	; 0x4b
   173ae:	e004      	b.n	173ba <Sd::WriteBlock(unsigned long, unsigned char const*, unsigned long)+0x3a>
    }
    else
    {
      write_cmd       = Command::kWriteSingle;
   173b0:	2358      	movs	r3, #88	; 0x58
   173b2:	9313      	str	r3, [sp, #76]	; 0x4c
      write_start_tkn = 0xFE;
   173b4:	23fe      	movs	r3, #254	; 0xfe
   173b6:	f88d 304b 	strb.w	r3, [sp, #75]	; 0x4b
    }

    // Send initial write command
    sd.response.length = SendCmd(write_cmd, address, sd.response.data.byte, 100,
                                 KeepAlive::kYes);
   173ba:	9b05      	ldr	r3, [sp, #20]
   173bc:	681b      	ldr	r3, [r3, #0]
   173be:	681c      	ldr	r4, [r3, #0]
    sd.response.length = SendCmd(write_cmd, address, sd.response.data.byte, 100,
   173c0:	ab06      	add	r3, sp, #24
   173c2:	f103 0208 	add.w	r2, r3, #8
   173c6:	2301      	movs	r3, #1
   173c8:	9301      	str	r3, [sp, #4]
   173ca:	2364      	movs	r3, #100	; 0x64
   173cc:	9300      	str	r3, [sp, #0]
   173ce:	4613      	mov	r3, r2
   173d0:	9a04      	ldr	r2, [sp, #16]
   173d2:	9913      	ldr	r1, [sp, #76]	; 0x4c
   173d4:	9805      	ldr	r0, [sp, #20]
   173d6:	47a0      	blx	r4
   173d8:	4603      	mov	r3, r0
   173da:	930a      	str	r3, [sp, #40]	; 0x28
    LOG_DEBUG("Sent Write Cmd");
    LOG_DEBUG("[R1 Response:0x%02X]", sd.response.data.byte[0]);

    // Check if the response was acknowledged properly
    if (sd.response.data.byte[0] == 0x00)
   173dc:	f89d 3020 	ldrb.w	r3, [sp, #32]
   173e0:	2b00      	cmp	r3, #0
   173e2:	f040 8096 	bne.w	17512 <Sd::WriteBlock(unsigned long, unsigned char const*, unsigned long)+0x192>
    {
      // If no errors, proceed write given block(s) to SD Card
      // For each given block
      for (uint16_t current_block_num = 0; current_block_num < blocks;
   173e6:	2300      	movs	r3, #0
   173e8:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
   173ec:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
   173f0:	9a02      	ldr	r2, [sp, #8]
   173f2:	429a      	cmp	r2, r3
   173f4:	d97a      	bls.n	174ec <Sd::WriteBlock(unsigned long, unsigned char const*, unsigned long)+0x16c>
           current_block_num++)
      {
        // Calculate array offset
        uint64_t arr_offset = current_block_num * kBlockSize;
   173f6:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
   173fa:	025b      	lsls	r3, r3, #9
   173fc:	ea4f 74e3 	mov.w	r4, r3, asr #31
   17400:	e9cd 340e 	strd	r3, r4, [sp, #56]	; 0x38

        // Send the start token for the current block
        ssp_interface_->Transfer(write_start_tkn);
   17404:	9b05      	ldr	r3, [sp, #20]
   17406:	685a      	ldr	r2, [r3, #4]
   17408:	9b05      	ldr	r3, [sp, #20]
   1740a:	685b      	ldr	r3, [r3, #4]
   1740c:	681b      	ldr	r3, [r3, #0]
   1740e:	3308      	adds	r3, #8
   17410:	681b      	ldr	r3, [r3, #0]
   17412:	f89d 104b 	ldrb.w	r1, [sp, #75]	; 0x4b
   17416:	b289      	uxth	r1, r1
   17418:	4610      	mov	r0, r2
   1741a:	4798      	blx	r3

        // Write all 512-bytes of the given block
        LOG_DEBUG("Writing block #%d", current_block_num);
        for (uint16_t current_byte = 0; current_byte < kBlockSize;
   1741c:	2300      	movs	r3, #0
   1741e:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
   17422:	f8bd 3046 	ldrh.w	r3, [sp, #70]	; 0x46
   17426:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   1742a:	d216      	bcs.n	1745a <Sd::WriteBlock(unsigned long, unsigned char const*, unsigned long)+0xda>
             current_byte++)
        {
          ssp_interface_->Transfer(array[arr_offset + current_byte]);
   1742c:	9b05      	ldr	r3, [sp, #20]
   1742e:	6858      	ldr	r0, [r3, #4]
   17430:	9b05      	ldr	r3, [sp, #20]
   17432:	685b      	ldr	r3, [r3, #4]
   17434:	681b      	ldr	r3, [r3, #0]
   17436:	3308      	adds	r3, #8
   17438:	681b      	ldr	r3, [r3, #0]
   1743a:	990e      	ldr	r1, [sp, #56]	; 0x38
   1743c:	f8bd 2046 	ldrh.w	r2, [sp, #70]	; 0x46
   17440:	440a      	add	r2, r1
   17442:	9903      	ldr	r1, [sp, #12]
   17444:	440a      	add	r2, r1
   17446:	7812      	ldrb	r2, [r2, #0]
   17448:	b292      	uxth	r2, r2
   1744a:	4611      	mov	r1, r2
   1744c:	4798      	blx	r3
        for (uint16_t current_byte = 0; current_byte < kBlockSize;
   1744e:	f8bd 3046 	ldrh.w	r3, [sp, #70]	; 0x46
   17452:	3301      	adds	r3, #1
   17454:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
   17458:	e7e3      	b.n	17422 <Sd::WriteBlock(unsigned long, unsigned char const*, unsigned long)+0xa2>
        }

        // Read the data response token after writing the block
        uint8_t data_response_tkn =
            static_cast<uint8_t>(ssp_interface_->Transfer(0xFF));
   1745a:	9b05      	ldr	r3, [sp, #20]
   1745c:	685a      	ldr	r2, [r3, #4]
   1745e:	9b05      	ldr	r3, [sp, #20]
   17460:	685b      	ldr	r3, [r3, #4]
   17462:	681b      	ldr	r3, [r3, #0]
   17464:	3308      	adds	r3, #8
   17466:	681b      	ldr	r3, [r3, #0]
   17468:	21ff      	movs	r1, #255	; 0xff
   1746a:	4610      	mov	r0, r2
   1746c:	4798      	blx	r3
   1746e:	4603      	mov	r3, r0
   17470:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
                  ToBool(data_response_tkn & 0x0B));
        LOG_DEBUG("Data Rejected (write err)?: %s",
                  ToBool(data_response_tkn & 0x0D));

        // If writing multiple blocks and the previous block was rejected
        if (blocks > 1 && !(data_response_tkn & 0x05))
   17474:	9b02      	ldr	r3, [sp, #8]
   17476:	2b01      	cmp	r3, #1
   17478:	d92f      	bls.n	174da <Sd::WriteBlock(unsigned long, unsigned char const*, unsigned long)+0x15a>
   1747a:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
   1747e:	f003 0305 	and.w	r3, r3, #5
   17482:	2b00      	cmp	r3, #0
   17484:	d129      	bne.n	174da <Sd::WriteBlock(unsigned long, unsigned char const*, unsigned long)+0x15a>
        {
          // Send an immediate stop (CMD12)
          sd.response.length =
              SendCmd(Command::kStopTrans, 0xFFFFFFFF, sd.response.data.byte,
                      100, KeepAlive::kYes);
   17486:	9b05      	ldr	r3, [sp, #20]
   17488:	681b      	ldr	r3, [r3, #0]
   1748a:	681c      	ldr	r4, [r3, #0]
              SendCmd(Command::kStopTrans, 0xFFFFFFFF, sd.response.data.byte,
   1748c:	ab06      	add	r3, sp, #24
   1748e:	f103 0208 	add.w	r2, r3, #8
   17492:	2301      	movs	r3, #1
   17494:	9301      	str	r3, [sp, #4]
   17496:	2364      	movs	r3, #100	; 0x64
   17498:	9300      	str	r3, [sp, #0]
   1749a:	4613      	mov	r3, r2
   1749c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   174a0:	214c      	movs	r1, #76	; 0x4c
   174a2:	9805      	ldr	r0, [sp, #20]
   174a4:	47a0      	blx	r4
   174a6:	4603      	mov	r3, r0
          sd.response.length =
   174a8:	930a      	str	r3, [sp, #40]	; 0x28
          LOG_DEBUG("Stopped Transmission due to rejection...");
          LOG_DEBUG("[R1 Response: 0x%02X]", sd.response.data.byte[0]);

          // In the case of a write error, ask for the reason why
          if (data_response_tkn & 0x0D)
   174aa:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
   174ae:	f003 030d 	and.w	r3, r3, #13
   174b2:	2b00      	cmp	r3, #0
   174b4:	d011      	beq.n	174da <Sd::WriteBlock(unsigned long, unsigned char const*, unsigned long)+0x15a>
          {
            sd.response.length =
                SendCmd(Command::kGetStatus, 0xFFFFFFFF, sd.response.data.byte,
                        100, KeepAlive::kYes);
   174b6:	9b05      	ldr	r3, [sp, #20]
   174b8:	681b      	ldr	r3, [r3, #0]
   174ba:	681c      	ldr	r4, [r3, #0]
                SendCmd(Command::kGetStatus, 0xFFFFFFFF, sd.response.data.byte,
   174bc:	ab06      	add	r3, sp, #24
   174be:	f103 0208 	add.w	r2, r3, #8
   174c2:	2301      	movs	r3, #1
   174c4:	9301      	str	r3, [sp, #4]
   174c6:	2364      	movs	r3, #100	; 0x64
   174c8:	9300      	str	r3, [sp, #0]
   174ca:	4613      	mov	r3, r2
   174cc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   174d0:	210d      	movs	r1, #13
   174d2:	9805      	ldr	r0, [sp, #20]
   174d4:	47a0      	blx	r4
   174d6:	4603      	mov	r3, r0
            sd.response.length =
   174d8:	930a      	str	r3, [sp, #40]	; 0x28
                "Checking Status Register to see cause of Write Error...");
            LOG_DEBUG("[R2 Response: 0x%04" PRIX32 "]",
                      sd.response.data.dWord.lo);
          }
        }
        WaitWhileBusy();
   174da:	9805      	ldr	r0, [sp, #20]
   174dc:	f7ff fd1c 	bl	16f18 <Sd::WaitWhileBusy()>
      for (uint16_t current_block_num = 0; current_block_num < blocks;
   174e0:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
   174e4:	3301      	adds	r3, #1
   174e6:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
   174ea:	e77f      	b.n	173ec <Sd::WriteBlock(unsigned long, unsigned char const*, unsigned long)+0x6c>
      }

      if (blocks > 1)
   174ec:	9b02      	ldr	r3, [sp, #8]
   174ee:	2b01      	cmp	r3, #1
   174f0:	d90f      	bls.n	17512 <Sd::WriteBlock(unsigned long, unsigned char const*, unsigned long)+0x192>
      {
        constexpr uint8_t kStopToken = 0xFD;
   174f2:	23fd      	movs	r3, #253	; 0xfd
   174f4:	f88d 3036 	strb.w	r3, [sp, #54]	; 0x36
        ssp_interface_->Transfer(kStopToken);
   174f8:	9b05      	ldr	r3, [sp, #20]
   174fa:	685a      	ldr	r2, [r3, #4]
   174fc:	9b05      	ldr	r3, [sp, #20]
   174fe:	685b      	ldr	r3, [r3, #4]
   17500:	681b      	ldr	r3, [r3, #0]
   17502:	3308      	adds	r3, #8
   17504:	681b      	ldr	r3, [r3, #0]
   17506:	21fd      	movs	r1, #253	; 0xfd
   17508:	4610      	mov	r0, r2
   1750a:	4798      	blx	r3

        // Wait for the card's programming to complete before
        // reselecting it (i.e. to prevent corruption)
        WaitWhileBusy();
   1750c:	9805      	ldr	r0, [sp, #20]
   1750e:	f7ff fd03 	bl	16f18 <Sd::WaitWhileBusy()>
      LOG_DEBUG("Illegal Cmd Err: %s", ToBool(sd.response.data.byte[0] & 0x04));
      LOG_DEBUG("Erase Reset: %s", ToBool(sd.response.data.byte[0] & 0x02));
      LOG_DEBUG("In Idle: %s", ToBool(sd.response.data.byte[0] & 0x01));
    }

    return sd.response.data.byte[0];
   17512:	f89d 4020 	ldrb.w	r4, [sp, #32]
   17516:	462b      	mov	r3, r5
   17518:	4619      	mov	r1, r3
   1751a:	4803      	ldr	r0, [pc, #12]	; (17528 <Sd::WriteBlock(unsigned long, unsigned char const*, unsigned long)+0x1a8>)
   1751c:	f7fd ffec 	bl	154f8 <__cyg_profile_func_exit>
   17520:	4623      	mov	r3, r4
  }
   17522:	4618      	mov	r0, r3
   17524:	b015      	add	sp, #84	; 0x54
   17526:	bd30      	pop	{r4, r5, pc}
   17528:	00017381 	.word	0x00017381

0001752c <Sd::DeleteBlock(unsigned long, unsigned long)>:

  // Deletes any number of blocks (inclusively) within a range of address.
  uint8_t DeleteBlock(uint32_t start, uint32_t end) override
   1752c:	b530      	push	{r4, r5, lr}
   1752e:	b08f      	sub	sp, #60	; 0x3c
   17530:	4675      	mov	r5, lr
   17532:	9005      	str	r0, [sp, #20]
   17534:	9104      	str	r1, [sp, #16]
   17536:	9203      	str	r2, [sp, #12]
   17538:	462b      	mov	r3, r5
   1753a:	4619      	mov	r1, r3
   1753c:	483d      	ldr	r0, [pc, #244]	; (17634 <Sd::DeleteBlock(unsigned long, unsigned long)+0x108>)
   1753e:	f7fd ffc7 	bl	154d0 <__cyg_profile_func_enter>
  {
    // Wait for a previous command to finish
    WaitWhileBusy();
   17542:	9805      	ldr	r0, [sp, #20]
   17544:	f7ff fce8 	bl	16f18 <Sd::WaitWhileBusy()>

    // Create a temporary storage location to store sd command responses
    Sd::CardInfo_t sd;
    bool delete_failed = false;
   17548:	2300      	movs	r3, #0
   1754a:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37

    // Set the delete start address
    LOG_DEBUG("Setting Delete Start Address...");
    sd.response.length = SendCmd(Command::kDelFrom, start,
                                 sd.response.data.byte, 100, KeepAlive::kYes);
   1754e:	9b05      	ldr	r3, [sp, #20]
   17550:	681b      	ldr	r3, [r3, #0]
   17552:	681c      	ldr	r4, [r3, #0]
    sd.response.length = SendCmd(Command::kDelFrom, start,
   17554:	ab06      	add	r3, sp, #24
   17556:	f103 0208 	add.w	r2, r3, #8
   1755a:	2301      	movs	r3, #1
   1755c:	9301      	str	r3, [sp, #4]
   1755e:	2364      	movs	r3, #100	; 0x64
   17560:	9300      	str	r3, [sp, #0]
   17562:	4613      	mov	r3, r2
   17564:	9a04      	ldr	r2, [sp, #16]
   17566:	2160      	movs	r1, #96	; 0x60
   17568:	9805      	ldr	r0, [sp, #20]
   1756a:	47a0      	blx	r4
   1756c:	4603      	mov	r3, r0
   1756e:	930a      	str	r3, [sp, #40]	; 0x28

    // Wait while the writing the start address
    WaitWhileBusy();
   17570:	9805      	ldr	r0, [sp, #20]
   17572:	f7ff fcd1 	bl	16f18 <Sd::WaitWhileBusy()>

    // Force return if an error occurred
    if (sd.response.data.byte[0] != 0x00)
   17576:	f89d 3020 	ldrb.w	r3, [sp, #32]
   1757a:	2b00      	cmp	r3, #0
   1757c:	d009      	beq.n	17592 <Sd::DeleteBlock(unsigned long, unsigned long)+0x66>
    {
      LOG_ERROR("Failed to set Start Address!");
   1757e:	f44f 736a 	mov.w	r3, #936	; 0x3a8
   17582:	4a2d      	ldr	r2, [pc, #180]	; (17638 <Sd::DeleteBlock(unsigned long, unsigned long)+0x10c>)
   17584:	492d      	ldr	r1, [pc, #180]	; (1763c <Sd::DeleteBlock(unsigned long, unsigned long)+0x110>)
   17586:	482e      	ldr	r0, [pc, #184]	; (17640 <Sd::DeleteBlock(unsigned long, unsigned long)+0x114>)
   17588:	f7ff f9fc 	bl	16984 <printf>
      delete_failed = true;
   1758c:	2301      	movs	r3, #1
   1758e:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
    }

    // Set the delete end address
    if (!delete_failed)
   17592:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
   17596:	f083 0301 	eor.w	r3, r3, #1
   1759a:	b2db      	uxtb	r3, r3
   1759c:	2b00      	cmp	r3, #0
   1759e:	d010      	beq.n	175c2 <Sd::DeleteBlock(unsigned long, unsigned long)+0x96>
    {
      LOG_DEBUG("Setting Delete End Address...");
      sd.response.length = SendCmd(Command::kDelTo, end, sd.response.data.byte,
                                   100, KeepAlive::kYes);
   175a0:	9b05      	ldr	r3, [sp, #20]
   175a2:	681b      	ldr	r3, [r3, #0]
   175a4:	681c      	ldr	r4, [r3, #0]
      sd.response.length = SendCmd(Command::kDelTo, end, sd.response.data.byte,
   175a6:	ab06      	add	r3, sp, #24
   175a8:	f103 0208 	add.w	r2, r3, #8
   175ac:	2301      	movs	r3, #1
   175ae:	9301      	str	r3, [sp, #4]
   175b0:	2364      	movs	r3, #100	; 0x64
   175b2:	9300      	str	r3, [sp, #0]
   175b4:	4613      	mov	r3, r2
   175b6:	9a03      	ldr	r2, [sp, #12]
   175b8:	2161      	movs	r1, #97	; 0x61
   175ba:	9805      	ldr	r0, [sp, #20]
   175bc:	47a0      	blx	r4
   175be:	4603      	mov	r3, r0
   175c0:	930a      	str	r3, [sp, #40]	; 0x28
    }

    // Wait while the writing the end address
    WaitWhileBusy();
   175c2:	9805      	ldr	r0, [sp, #20]
   175c4:	f7ff fca8 	bl	16f18 <Sd::WaitWhileBusy()>

    // Force return if an error occurred
    if (sd.response.data.byte[0] != 0x00)
   175c8:	f89d 3020 	ldrb.w	r3, [sp, #32]
   175cc:	2b00      	cmp	r3, #0
   175ce:	d009      	beq.n	175e4 <Sd::DeleteBlock(unsigned long, unsigned long)+0xb8>
    {
      LOG_ERROR("Failed to set End Address!");
   175d0:	f240 33ba 	movw	r3, #954	; 0x3ba
   175d4:	4a18      	ldr	r2, [pc, #96]	; (17638 <Sd::DeleteBlock(unsigned long, unsigned long)+0x10c>)
   175d6:	491b      	ldr	r1, [pc, #108]	; (17644 <Sd::DeleteBlock(unsigned long, unsigned long)+0x118>)
   175d8:	481b      	ldr	r0, [pc, #108]	; (17648 <Sd::DeleteBlock(unsigned long, unsigned long)+0x11c>)
   175da:	f7ff f9d3 	bl	16984 <printf>
      delete_failed = true;
   175de:	2301      	movs	r3, #1
   175e0:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
    }

    // Finally, attempt a delete
    if (!delete_failed)
   175e4:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
   175e8:	f083 0301 	eor.w	r3, r3, #1
   175ec:	b2db      	uxtb	r3, r3
   175ee:	2b00      	cmp	r3, #0
   175f0:	d014      	beq.n	1761c <Sd::DeleteBlock(unsigned long, unsigned long)+0xf0>
    {
      // Issue the delete command to delete from our from:to range
      LOG_DEBUG("Issuing Delete Command...");
      sd.response.length = SendCmd(Command::kDel, 0xFFFFFFFF,
                                   sd.response.data.byte, 100, KeepAlive::kYes);
   175f2:	9b05      	ldr	r3, [sp, #20]
   175f4:	681b      	ldr	r3, [r3, #0]
   175f6:	681c      	ldr	r4, [r3, #0]
      sd.response.length = SendCmd(Command::kDel, 0xFFFFFFFF,
   175f8:	ab06      	add	r3, sp, #24
   175fa:	f103 0208 	add.w	r2, r3, #8
   175fe:	2301      	movs	r3, #1
   17600:	9301      	str	r3, [sp, #4]
   17602:	2364      	movs	r3, #100	; 0x64
   17604:	9300      	str	r3, [sp, #0]
   17606:	4613      	mov	r3, r2
   17608:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1760c:	2166      	movs	r1, #102	; 0x66
   1760e:	9805      	ldr	r0, [sp, #20]
   17610:	47a0      	blx	r4
   17612:	4603      	mov	r3, r0
   17614:	930a      	str	r3, [sp, #40]	; 0x28

      // Wait while the deletion occurs
      WaitWhileBusy();
   17616:	9805      	ldr	r0, [sp, #20]
   17618:	f7ff fc7e 	bl	16f18 <Sd::WaitWhileBusy()>
      LOG_DEBUG("[R1 Response: 0x%02X]", sd.response.data.byte[0]);
      LOG_DEBUG("Deletion Complete...");
    }

    // Return status
    return sd.response.data.byte[0];
   1761c:	f89d 4020 	ldrb.w	r4, [sp, #32]
   17620:	462b      	mov	r3, r5
   17622:	4619      	mov	r1, r3
   17624:	4803      	ldr	r0, [pc, #12]	; (17634 <Sd::DeleteBlock(unsigned long, unsigned long)+0x108>)
   17626:	f7fd ff67 	bl	154f8 <__cyg_profile_func_exit>
   1762a:	4623      	mov	r3, r4
  }
   1762c:	4618      	mov	r0, r3
   1762e:	b00f      	add	sp, #60	; 0x3c
   17630:	bd30      	pop	{r4, r5, pc}
   17632:	bf00      	nop
   17634:	0001752d 	.word	0x0001752d
   17638:	0001a864 	.word	0x0001a864
   1763c:	0001a77c 	.word	0x0001a77c
   17640:	0001a294 	.word	0x0001a294
   17644:	0001a784 	.word	0x0001a784
   17648:	0001a2ec 	.word	0x0001a2ec

0001764c <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)>:

  // Send a command
  uint32_t SendCmd(Command sdc, uint32_t arg, uint8_t response_buffer[],
   1764c:	e92d 49f0 	stmdb	sp!, {r4, r5, r6, r7, r8, fp, lr}
   17650:	b08f      	sub	sp, #60	; 0x3c
   17652:	46f0      	mov	r8, lr
   17654:	9003      	str	r0, [sp, #12]
   17656:	9102      	str	r1, [sp, #8]
   17658:	9201      	str	r2, [sp, #4]
   1765a:	9300      	str	r3, [sp, #0]
   1765c:	4643      	mov	r3, r8
   1765e:	4619      	mov	r1, r3
   17660:	4840      	ldr	r0, [pc, #256]	; (17764 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x118>)
   17662:	f7fd ff35 	bl	154d0 <__cyg_profile_func_enter>
                   uint32_t delay, KeepAlive keep_alive) override
  {
    ResponseType res_type;
    uint8_t res_len    = 0;
   17666:	2300      	movs	r3, #0
   17668:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
    uint8_t crc        = 0;
   1766c:	2300      	movs	r3, #0
   1766e:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
    uint8_t tries      = 0;
   17672:	2300      	movs	r3, #0
   17674:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
    uint8_t bit_offset = 0;  // determines the distance of the response's
   17678:	2300      	movs	r3, #0
   1767a:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
                             // 0 bit from the MSB place
    uint8_t temp_byte = 0;
   1767e:	2300      	movs	r3, #0
   17680:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f

    // Determine the response type of the set command
    switch (sdc)
   17684:	9b02      	ldr	r3, [sp, #8]
   17686:	2b58      	cmp	r3, #88	; 0x58
   17688:	d052      	beq.n	17730 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0xe4>
   1768a:	2b58      	cmp	r3, #88	; 0x58
   1768c:	dc16      	bgt.n	176bc <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x70>
   1768e:	2b48      	cmp	r3, #72	; 0x48
   17690:	d033      	beq.n	176fa <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0xae>
   17692:	2b48      	cmp	r3, #72	; 0x48
   17694:	dc06      	bgt.n	176a4 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x58>
   17696:	2b40      	cmp	r3, #64	; 0x40
   17698:	d029      	beq.n	176ee <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0xa2>
   1769a:	2b41      	cmp	r3, #65	; 0x41
   1769c:	d02a      	beq.n	176f4 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0xa8>
   1769e:	2b0d      	cmp	r3, #13
   176a0:	d031      	beq.n	17706 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0xba>
   176a2:	e054      	b.n	1774e <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x102>
   176a4:	2b50      	cmp	r3, #80	; 0x50
   176a6:	d03a      	beq.n	1771e <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0xd2>
   176a8:	2b50      	cmp	r3, #80	; 0x50
   176aa:	dc02      	bgt.n	176b2 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x66>
   176ac:	2b4c      	cmp	r3, #76	; 0x4c
   176ae:	d027      	beq.n	17700 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0xb4>
   176b0:	e04d      	b.n	1774e <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x102>
   176b2:	2b51      	cmp	r3, #81	; 0x51
   176b4:	d036      	beq.n	17724 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0xd8>
   176b6:	2b52      	cmp	r3, #82	; 0x52
   176b8:	d037      	beq.n	1772a <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0xde>
   176ba:	e048      	b.n	1774e <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x102>
   176bc:	2b66      	cmp	r3, #102	; 0x66
   176be:	d043      	beq.n	17748 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0xfc>
   176c0:	2b66      	cmp	r3, #102	; 0x66
   176c2:	dc06      	bgt.n	176d2 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x86>
   176c4:	2b60      	cmp	r3, #96	; 0x60
   176c6:	d039      	beq.n	1773c <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0xf0>
   176c8:	2b61      	cmp	r3, #97	; 0x61
   176ca:	d03a      	beq.n	17742 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0xf6>
   176cc:	2b59      	cmp	r3, #89	; 0x59
   176ce:	d032      	beq.n	17736 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0xea>
   176d0:	e03d      	b.n	1774e <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x102>
   176d2:	2b77      	cmp	r3, #119	; 0x77
   176d4:	d01a      	beq.n	1770c <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0xc0>
   176d6:	2b77      	cmp	r3, #119	; 0x77
   176d8:	dc02      	bgt.n	176e0 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x94>
   176da:	2b69      	cmp	r3, #105	; 0x69
   176dc:	d019      	beq.n	17712 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0xc6>
   176de:	e036      	b.n	1774e <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x102>
   176e0:	2b7a      	cmp	r3, #122	; 0x7a
   176e2:	d019      	beq.n	17718 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0xcc>
   176e4:	2bff      	cmp	r3, #255	; 0xff
   176e6:	d132      	bne.n	1774e <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x102>
    {
      case Command::kGarbage: res_type = ResponseType::kR1; break;
   176e8:	2300      	movs	r3, #0
   176ea:	930d      	str	r3, [sp, #52]	; 0x34
   176ec:	e042      	b.n	17774 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x128>
      case Command::kReset: res_type = ResponseType::kR1; break;
   176ee:	2300      	movs	r3, #0
   176f0:	930d      	str	r3, [sp, #52]	; 0x34
   176f2:	e03f      	b.n	17774 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x128>
      case Command::kInit: res_type = ResponseType::kR1; break;
   176f4:	2300      	movs	r3, #0
   176f6:	930d      	str	r3, [sp, #52]	; 0x34
   176f8:	e03c      	b.n	17774 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x128>
      case Command::kGetOp: res_type = ResponseType::kR7; break;
   176fa:	2307      	movs	r3, #7
   176fc:	930d      	str	r3, [sp, #52]	; 0x34
   176fe:	e039      	b.n	17774 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x128>
      case Command::kStopTrans: res_type = ResponseType::kR1; break;
   17700:	2300      	movs	r3, #0
   17702:	930d      	str	r3, [sp, #52]	; 0x34
   17704:	e036      	b.n	17774 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x128>
      case Command::kGetStatus: res_type = ResponseType::kR2; break;
   17706:	2302      	movs	r3, #2
   17708:	930d      	str	r3, [sp, #52]	; 0x34
   1770a:	e033      	b.n	17774 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x128>
      case Command::kAcBegin: res_type = ResponseType::kR1; break;
   1770c:	2300      	movs	r3, #0
   1770e:	930d      	str	r3, [sp, #52]	; 0x34
   17710:	e030      	b.n	17774 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x128>
      case Command::kAcInit: res_type = ResponseType::kR1; break;
   17712:	2300      	movs	r3, #0
   17714:	930d      	str	r3, [sp, #52]	; 0x34
   17716:	e02d      	b.n	17774 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x128>
      case Command::kGetOcr: res_type = ResponseType::kR3; break;
   17718:	2303      	movs	r3, #3
   1771a:	930d      	str	r3, [sp, #52]	; 0x34
   1771c:	e02a      	b.n	17774 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x128>
      case Command::kChgBlkLen: res_type = ResponseType::kR1; break;
   1771e:	2300      	movs	r3, #0
   17720:	930d      	str	r3, [sp, #52]	; 0x34
   17722:	e027      	b.n	17774 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x128>
      case Command::kReadSingle: res_type = ResponseType::kR1; break;
   17724:	2300      	movs	r3, #0
   17726:	930d      	str	r3, [sp, #52]	; 0x34
   17728:	e024      	b.n	17774 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x128>
      case Command::kReadMulti: res_type = ResponseType::kR1; break;
   1772a:	2300      	movs	r3, #0
   1772c:	930d      	str	r3, [sp, #52]	; 0x34
   1772e:	e021      	b.n	17774 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x128>
      case Command::kWriteSingle: res_type = ResponseType::kR1; break;
   17730:	2300      	movs	r3, #0
   17732:	930d      	str	r3, [sp, #52]	; 0x34
   17734:	e01e      	b.n	17774 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x128>
      case Command::kWriteMulti: res_type = ResponseType::kR1; break;
   17736:	2300      	movs	r3, #0
   17738:	930d      	str	r3, [sp, #52]	; 0x34
   1773a:	e01b      	b.n	17774 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x128>
      case Command::kDelFrom: res_type = ResponseType::kR1; break;
   1773c:	2300      	movs	r3, #0
   1773e:	930d      	str	r3, [sp, #52]	; 0x34
   17740:	e018      	b.n	17774 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x128>
      case Command::kDelTo: res_type = ResponseType::kR1; break;
   17742:	2300      	movs	r3, #0
   17744:	930d      	str	r3, [sp, #52]	; 0x34
   17746:	e015      	b.n	17774 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x128>
      case Command::kDel: res_type = ResponseType::kR1b; break;
   17748:	2301      	movs	r3, #1
   1774a:	930d      	str	r3, [sp, #52]	; 0x34
   1774c:	e012      	b.n	17774 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x128>
      default:
        LOG_ERROR("Unknown response type. Aborting!");
   1774e:	f240 33f3 	movw	r3, #1011	; 0x3f3
   17752:	4a05      	ldr	r2, [pc, #20]	; (17768 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x11c>)
   17754:	4905      	ldr	r1, [pc, #20]	; (1776c <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x120>)
   17756:	4806      	ldr	r0, [pc, #24]	; (17770 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x124>)
   17758:	f7ff f914 	bl	16984 <printf>
        return -1;
   1775c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   17760:	e1b1      	b.n	17ac6 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x47a>
   17762:	bf00      	nop
   17764:	0001764d 	.word	0x0001764d
   17768:	0001a898 	.word	0x0001a898
   1776c:	0001a78c 	.word	0x0001a78c
   17770:	0001a340 	.word	0x0001a340
    // algorithm
    uint8_t msg[5] = { static_cast<uint8_t>(sdc),
                       static_cast<uint8_t>(arg >> 24),
                       static_cast<uint8_t>(arg >> 16),
                       static_cast<uint8_t>(arg >> 8),
                       static_cast<uint8_t>(arg >> 0) };
   17774:	9b02      	ldr	r3, [sp, #8]
   17776:	b2db      	uxtb	r3, r3
   17778:	f88d 3010 	strb.w	r3, [sp, #16]
                       static_cast<uint8_t>(arg >> 24),
   1777c:	9b01      	ldr	r3, [sp, #4]
   1777e:	0e1b      	lsrs	r3, r3, #24
                       static_cast<uint8_t>(arg >> 0) };
   17780:	b2db      	uxtb	r3, r3
   17782:	f88d 3011 	strb.w	r3, [sp, #17]
                       static_cast<uint8_t>(arg >> 16),
   17786:	9b01      	ldr	r3, [sp, #4]
   17788:	0c1b      	lsrs	r3, r3, #16
                       static_cast<uint8_t>(arg >> 0) };
   1778a:	b2db      	uxtb	r3, r3
   1778c:	f88d 3012 	strb.w	r3, [sp, #18]
                       static_cast<uint8_t>(arg >> 8),
   17790:	9b01      	ldr	r3, [sp, #4]
   17792:	0a1b      	lsrs	r3, r3, #8
                       static_cast<uint8_t>(arg >> 0) };
   17794:	b2db      	uxtb	r3, r3
   17796:	f88d 3013 	strb.w	r3, [sp, #19]
   1779a:	9b01      	ldr	r3, [sp, #4]
   1779c:	b2db      	uxtb	r3, r3
   1779e:	f88d 3014 	strb.w	r3, [sp, #20]

    crc = GetCrc7(msg, sizeof(msg));
   177a2:	9b03      	ldr	r3, [sp, #12]
   177a4:	681b      	ldr	r3, [r3, #0]
   177a6:	331c      	adds	r3, #28
   177a8:	681b      	ldr	r3, [r3, #0]
   177aa:	a904      	add	r1, sp, #16
   177ac:	2205      	movs	r2, #5
   177ae:	9803      	ldr	r0, [sp, #12]
   177b0:	4798      	blx	r3
   177b2:	4603      	mov	r3, r0
   177b4:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
    if (sdc == Command::kGarbage)
   177b8:	9b02      	ldr	r3, [sp, #8]
   177ba:	2bff      	cmp	r3, #255	; 0xff
   177bc:	d102      	bne.n	177c4 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x178>
    {
      crc = 0xFF;
   177be:	23ff      	movs	r3, #255	; 0xff
   177c0:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
    }

    // Select the SD Card
    chip_select_->SetLow();
   177c4:	9b03      	ldr	r3, [sp, #12]
   177c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   177c8:	9b03      	ldr	r3, [sp, #12]
   177ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   177cc:	681b      	ldr	r3, [r3, #0]
   177ce:	3310      	adds	r3, #16
   177d0:	681b      	ldr	r3, [r3, #0]
   177d2:	4610      	mov	r0, r2
   177d4:	4798      	blx	r3
    chip_select_external_->SetLow();
   177d6:	9b03      	ldr	r3, [sp, #12]
   177d8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
   177da:	9b03      	ldr	r3, [sp, #12]
   177dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   177de:	681b      	ldr	r3, [r3, #0]
   177e0:	3310      	adds	r3, #16
   177e2:	681b      	ldr	r3, [r3, #0]
   177e4:	4610      	mov	r0, r2
   177e6:	4798      	blx	r3

    // If desired, wait a bit before talking
    if (delay > 0)
   177e8:	9b16      	ldr	r3, [sp, #88]	; 0x58
   177ea:	2b00      	cmp	r3, #0
   177ec:	d007      	beq.n	177fe <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x1b2>
    {
      Delay(delay);
   177ee:	9b16      	ldr	r3, [sp, #88]	; 0x58
   177f0:	461a      	mov	r2, r3
   177f2:	f04f 0300 	mov.w	r3, #0
   177f6:	4610      	mov	r0, r2
   177f8:	4619      	mov	r1, r3
   177fa:	f7f8 ff17 	bl	1062c <Delay(unsigned long long)>
    }

    // Send the desired command frame to the SD card board
    // Begin by transfering the command byte
    ssp_interface_->Transfer(static_cast<uint16_t>(sdc));
   177fe:	9b03      	ldr	r3, [sp, #12]
   17800:	685a      	ldr	r2, [r3, #4]
   17802:	9b03      	ldr	r3, [sp, #12]
   17804:	685b      	ldr	r3, [r3, #4]
   17806:	681b      	ldr	r3, [r3, #0]
   17808:	3308      	adds	r3, #8
   1780a:	681b      	ldr	r3, [r3, #0]
   1780c:	9902      	ldr	r1, [sp, #8]
   1780e:	b289      	uxth	r1, r1
   17810:	4610      	mov	r0, r2
   17812:	4798      	blx	r3
    // Send arg byte [31:24]
    ssp_interface_->Transfer(static_cast<uint16_t>(arg >> 24) & 0xFF);
   17814:	9b03      	ldr	r3, [sp, #12]
   17816:	6858      	ldr	r0, [r3, #4]
   17818:	9b03      	ldr	r3, [sp, #12]
   1781a:	685b      	ldr	r3, [r3, #4]
   1781c:	681b      	ldr	r3, [r3, #0]
   1781e:	3308      	adds	r3, #8
   17820:	681b      	ldr	r3, [r3, #0]
   17822:	9a01      	ldr	r2, [sp, #4]
   17824:	0e12      	lsrs	r2, r2, #24
   17826:	b292      	uxth	r2, r2
   17828:	b2d2      	uxtb	r2, r2
   1782a:	b292      	uxth	r2, r2
   1782c:	4611      	mov	r1, r2
   1782e:	4798      	blx	r3
    // Send arg byte [23:16]
    ssp_interface_->Transfer(static_cast<uint16_t>(arg >> 16) & 0xFF);
   17830:	9b03      	ldr	r3, [sp, #12]
   17832:	6858      	ldr	r0, [r3, #4]
   17834:	9b03      	ldr	r3, [sp, #12]
   17836:	685b      	ldr	r3, [r3, #4]
   17838:	681b      	ldr	r3, [r3, #0]
   1783a:	3308      	adds	r3, #8
   1783c:	681b      	ldr	r3, [r3, #0]
   1783e:	9a01      	ldr	r2, [sp, #4]
   17840:	0c12      	lsrs	r2, r2, #16
   17842:	b292      	uxth	r2, r2
   17844:	b2d2      	uxtb	r2, r2
   17846:	b292      	uxth	r2, r2
   17848:	4611      	mov	r1, r2
   1784a:	4798      	blx	r3
    // Send arg byte [15:8]
    ssp_interface_->Transfer(static_cast<uint16_t>(arg >> 8) & 0xFF);
   1784c:	9b03      	ldr	r3, [sp, #12]
   1784e:	6858      	ldr	r0, [r3, #4]
   17850:	9b03      	ldr	r3, [sp, #12]
   17852:	685b      	ldr	r3, [r3, #4]
   17854:	681b      	ldr	r3, [r3, #0]
   17856:	3308      	adds	r3, #8
   17858:	681b      	ldr	r3, [r3, #0]
   1785a:	9a01      	ldr	r2, [sp, #4]
   1785c:	0a12      	lsrs	r2, r2, #8
   1785e:	b292      	uxth	r2, r2
   17860:	b2d2      	uxtb	r2, r2
   17862:	b292      	uxth	r2, r2
   17864:	4611      	mov	r1, r2
   17866:	4798      	blx	r3
    // Send arg byte [7:0]
    ssp_interface_->Transfer(static_cast<uint16_t>(arg >> 0) & 0xFF);
   17868:	9b03      	ldr	r3, [sp, #12]
   1786a:	685a      	ldr	r2, [r3, #4]
   1786c:	9b03      	ldr	r3, [sp, #12]
   1786e:	685b      	ldr	r3, [r3, #4]
   17870:	681b      	ldr	r3, [r3, #0]
   17872:	3308      	adds	r3, #8
   17874:	681b      	ldr	r3, [r3, #0]
   17876:	9901      	ldr	r1, [sp, #4]
   17878:	b289      	uxth	r1, r1
   1787a:	b2c9      	uxtb	r1, r1
   1787c:	b289      	uxth	r1, r1
   1787e:	4610      	mov	r0, r2
   17880:	4798      	blx	r3
    // Send 7-bit CRC and LSB stop addr (as b1)
    ssp_interface_->Transfer(static_cast<uint16_t>(crc << 1) | 0x01);
   17882:	9b03      	ldr	r3, [sp, #12]
   17884:	6858      	ldr	r0, [r3, #4]
   17886:	9b03      	ldr	r3, [sp, #12]
   17888:	685b      	ldr	r3, [r3, #4]
   1788a:	681b      	ldr	r3, [r3, #0]
   1788c:	3308      	adds	r3, #8
   1788e:	681b      	ldr	r3, [r3, #0]
   17890:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
   17894:	b292      	uxth	r2, r2
   17896:	0052      	lsls	r2, r2, #1
   17898:	b292      	uxth	r2, r2
   1789a:	f042 0201 	orr.w	r2, r2, #1
   1789e:	b292      	uxth	r2, r2
   178a0:	4611      	mov	r1, r2
   178a2:	4798      	blx	r3

    // Write garbage while waiting for a response
    // Send at least 1 byte of garbage before checking for a response
    temp_byte = static_cast<uint8_t>(ssp_interface_->Transfer(0xFF));
   178a4:	9b03      	ldr	r3, [sp, #12]
   178a6:	685a      	ldr	r2, [r3, #4]
   178a8:	9b03      	ldr	r3, [sp, #12]
   178aa:	685b      	ldr	r3, [r3, #4]
   178ac:	681b      	ldr	r3, [r3, #0]
   178ae:	3308      	adds	r3, #8
   178b0:	681b      	ldr	r3, [r3, #0]
   178b2:	21ff      	movs	r1, #255	; 0xff
   178b4:	4610      	mov	r0, r2
   178b6:	4798      	blx	r3
   178b8:	4603      	mov	r3, r0
   178ba:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
    while (tries++ < kBusTimeout)
   178be:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   178c2:	1c5a      	adds	r2, r3, #1
   178c4:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
   178c8:	2bf9      	cmp	r3, #249	; 0xf9
   178ca:	bf94      	ite	ls
   178cc:	2301      	movls	r3, #1
   178ce:	2300      	movhi	r3, #0
   178d0:	b2db      	uxtb	r3, r3
   178d2:	2b00      	cmp	r3, #0
   178d4:	d027      	beq.n	17926 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x2da>
    {
      temp_byte = static_cast<uint8_t>(ssp_interface_->Transfer(0xFF));
   178d6:	9b03      	ldr	r3, [sp, #12]
   178d8:	685a      	ldr	r2, [r3, #4]
   178da:	9b03      	ldr	r3, [sp, #12]
   178dc:	685b      	ldr	r3, [r3, #4]
   178de:	681b      	ldr	r3, [r3, #0]
   178e0:	3308      	adds	r3, #8
   178e2:	681b      	ldr	r3, [r3, #0]
   178e4:	21ff      	movs	r1, #255	; 0xff
   178e6:	4610      	mov	r0, r2
   178e8:	4798      	blx	r3
   178ea:	4603      	mov	r3, r0
   178ec:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
      if (temp_byte != 0xFF)
   178f0:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
   178f4:	2bff      	cmp	r3, #255	; 0xff
   178f6:	d00f      	beq.n	17918 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x2cc>
      {
        // Determine the offset, since the first byte of a
        // response will always be 0.
        while (temp_byte & (0x80 >> bit_offset))
   178f8:	f89d 202f 	ldrb.w	r2, [sp, #47]	; 0x2f
   178fc:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
   17900:	2180      	movs	r1, #128	; 0x80
   17902:	fa41 f303 	asr.w	r3, r1, r3
   17906:	4013      	ands	r3, r2
   17908:	2b00      	cmp	r3, #0
   1790a:	d00b      	beq.n	17924 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x2d8>
        {
          bit_offset++;
   1790c:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
   17910:	3301      	adds	r3, #1
   17912:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
        while (temp_byte & (0x80 >> bit_offset))
   17916:	e7ef      	b.n	178f8 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x2ac>
        }
        break;
      }
      tries++;
   17918:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   1791c:	3301      	adds	r3, #1
   1791e:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
    while (tries++ < kBusTimeout)
   17922:	e7cc      	b.n	178be <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x272>
        break;
   17924:	bf00      	nop
    }

    // Determine response length (in bytes) based on response type
    switch (res_type)
   17926:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   17928:	2b07      	cmp	r3, #7
   1792a:	d827      	bhi.n	1797c <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x330>
   1792c:	a201      	add	r2, pc, #4	; (adr r2, 17934 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x2e8>)
   1792e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   17932:	bf00      	nop
   17934:	00017955 	.word	0x00017955
   17938:	0001795d 	.word	0x0001795d
   1793c:	00017965 	.word	0x00017965
   17940:	0001796d 	.word	0x0001796d
   17944:	0001797d 	.word	0x0001797d
   17948:	0001797d 	.word	0x0001797d
   1794c:	0001797d 	.word	0x0001797d
   17950:	00017975 	.word	0x00017975
    {
      case ResponseType::kR1: res_len = 1; break;
   17954:	2301      	movs	r3, #1
   17956:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
   1795a:	e019      	b.n	17990 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x344>
      case ResponseType::kR1b: res_len = 1; break;
   1795c:	2301      	movs	r3, #1
   1795e:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
   17962:	e015      	b.n	17990 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x344>
      case ResponseType::kR2: res_len = 2; break;
   17964:	2302      	movs	r3, #2
   17966:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
   1796a:	e011      	b.n	17990 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x344>
      case ResponseType::kR3: res_len = 5; break;
   1796c:	2305      	movs	r3, #5
   1796e:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
   17972:	e00d      	b.n	17990 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x344>
      case ResponseType::kR7: res_len = 5; break;
   17974:	2305      	movs	r3, #5
   17976:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
   1797a:	e009      	b.n	17990 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x344>
      default:
        LOG_ERROR("Response unsupported in SPI mode. Aborting!");
   1797c:	f240 433a 	movw	r3, #1082	; 0x43a
   17980:	4a56      	ldr	r2, [pc, #344]	; (17adc <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x490>)
   17982:	4957      	ldr	r1, [pc, #348]	; (17ae0 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x494>)
   17984:	4857      	ldr	r0, [pc, #348]	; (17ae4 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x498>)
   17986:	f7fe fffd 	bl	16984 <printf>
        return -1;
   1798a:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   1798e:	e09a      	b.n	17ac6 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x47a>
        break;
    }

    // Acquire the response
    uint64_t temp_response = 0;
   17990:	f04f 0200 	mov.w	r2, #0
   17994:	f04f 0300 	mov.w	r3, #0
   17998:	e9cd 2308 	strd	r2, r3, [sp, #32]
    // Read an extra 8 bits since the response was offset
    uint8_t bytes_to_read =
   1799c:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
   179a0:	2b00      	cmp	r3, #0
   179a2:	d004      	beq.n	179ae <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x362>
   179a4:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
   179a8:	3301      	adds	r3, #1
   179aa:	b2db      	uxtb	r3, r3
   179ac:	e001      	b.n	179b2 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x366>
   179ae:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
   179b2:	f88d 301f 	strb.w	r3, [sp, #31]
        static_cast<uint8_t>((bit_offset > 0) ? res_len + 1 : res_len);
    while (bytes_to_read-- > 0)
   179b6:	f89d 301f 	ldrb.w	r3, [sp, #31]
   179ba:	1e5a      	subs	r2, r3, #1
   179bc:	f88d 201f 	strb.w	r2, [sp, #31]
   179c0:	2b00      	cmp	r3, #0
   179c2:	bf14      	ite	ne
   179c4:	2301      	movne	r3, #1
   179c6:	2300      	moveq	r3, #0
   179c8:	b2db      	uxtb	r3, r3
   179ca:	2b00      	cmp	r3, #0
   179cc:	d025      	beq.n	17a1a <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x3ce>
    {
      // Make space for the next byte
      temp_response = temp_response << 8;
   179ce:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   179d2:	f04f 0200 	mov.w	r2, #0
   179d6:	f04f 0300 	mov.w	r3, #0
   179da:	020b      	lsls	r3, r1, #8
   179dc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
   179e0:	0202      	lsls	r2, r0, #8
   179e2:	e9cd 2308 	strd	r2, r3, [sp, #32]
      temp_response |= temp_byte;
   179e6:	f89d b02f 	ldrb.w	fp, [sp, #47]	; 0x2f
   179ea:	f04f 0c00 	mov.w	ip, #0
   179ee:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   179f2:	ea4b 0200 	orr.w	r2, fp, r0
   179f6:	ea4c 0301 	orr.w	r3, ip, r1
   179fa:	e9cd 2308 	strd	r2, r3, [sp, #32]
      temp_byte = static_cast<uint8_t>(ssp_interface_->Transfer(0xFF));
   179fe:	9b03      	ldr	r3, [sp, #12]
   17a00:	685a      	ldr	r2, [r3, #4]
   17a02:	9b03      	ldr	r3, [sp, #12]
   17a04:	685b      	ldr	r3, [r3, #4]
   17a06:	681b      	ldr	r3, [r3, #0]
   17a08:	3308      	adds	r3, #8
   17a0a:	681b      	ldr	r3, [r3, #0]
   17a0c:	21ff      	movs	r1, #255	; 0xff
   17a0e:	4610      	mov	r0, r2
   17a10:	4798      	blx	r3
   17a12:	4603      	mov	r3, r0
   17a14:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
    while (bytes_to_read-- > 0)
   17a18:	e7cd      	b.n	179b6 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x36a>
    }
    // Compensate for the bit offset
    temp_response = temp_response >> bit_offset;
   17a1a:	f89d 1030 	ldrb.w	r1, [sp, #48]	; 0x30
   17a1e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   17a22:	f1c1 0c20 	rsb	ip, r1, #32
   17a26:	f1a1 0020 	sub.w	r0, r1, #32
   17a2a:	fa22 f401 	lsr.w	r4, r2, r1
   17a2e:	fa03 fc0c 	lsl.w	ip, r3, ip
   17a32:	ea44 040c 	orr.w	r4, r4, ip
   17a36:	fa23 f000 	lsr.w	r0, r3, r0
   17a3a:	4304      	orrs	r4, r0
   17a3c:	fa23 f501 	lsr.w	r5, r3, r1
   17a40:	e9cd 4508 	strd	r4, r5, [sp, #32]

    // Only write to the response buffer if it is provided
    if (response_buffer != nullptr)
   17a44:	9b00      	ldr	r3, [sp, #0]
   17a46:	2b00      	cmp	r3, #0
   17a48:	d025      	beq.n	17a96 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x44a>
    {
      for (int i = 0; i < res_len; i++)
   17a4a:	2300      	movs	r3, #0
   17a4c:	9306      	str	r3, [sp, #24]
   17a4e:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
   17a52:	9a06      	ldr	r2, [sp, #24]
   17a54:	429a      	cmp	r2, r3
   17a56:	da1e      	bge.n	17a96 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x44a>
      {
        response_buffer[i] =
            static_cast<uint8_t>(temp_response >> 8 * (res_len - 1 - i));
   17a58:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
   17a5c:	1e5a      	subs	r2, r3, #1
   17a5e:	9b06      	ldr	r3, [sp, #24]
   17a60:	1ad3      	subs	r3, r2, r3
   17a62:	00da      	lsls	r2, r3, #3
   17a64:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   17a68:	f1c2 0020 	rsb	r0, r2, #32
   17a6c:	f1a2 0120 	sub.w	r1, r2, #32
   17a70:	fa23 f602 	lsr.w	r6, r3, r2
   17a74:	fa04 f000 	lsl.w	r0, r4, r0
   17a78:	4306      	orrs	r6, r0
   17a7a:	fa24 f101 	lsr.w	r1, r4, r1
   17a7e:	430e      	orrs	r6, r1
   17a80:	fa24 f702 	lsr.w	r7, r4, r2
        response_buffer[i] =
   17a84:	9b06      	ldr	r3, [sp, #24]
   17a86:	9a00      	ldr	r2, [sp, #0]
   17a88:	4413      	add	r3, r2
   17a8a:	b2f2      	uxtb	r2, r6
   17a8c:	701a      	strb	r2, [r3, #0]
      for (int i = 0; i < res_len; i++)
   17a8e:	9b06      	ldr	r3, [sp, #24]
   17a90:	3301      	adds	r3, #1
   17a92:	9306      	str	r3, [sp, #24]
   17a94:	e7db      	b.n	17a4e <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x402>
      }
    }

    // Only end the transaction if keep_alive isn't requested
    if (keep_alive == KeepAlive::kNo)
   17a96:	f89d 305c 	ldrb.w	r3, [sp, #92]	; 0x5c
   17a9a:	2b00      	cmp	r3, #0
   17a9c:	d111      	bne.n	17ac2 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x476>
    {
      // Deselect the SPI comm board
      chip_select_->SetHigh();
   17a9e:	9b03      	ldr	r3, [sp, #12]
   17aa0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   17aa2:	9b03      	ldr	r3, [sp, #12]
   17aa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   17aa6:	681b      	ldr	r3, [r3, #0]
   17aa8:	330c      	adds	r3, #12
   17aaa:	681b      	ldr	r3, [r3, #0]
   17aac:	4610      	mov	r0, r2
   17aae:	4798      	blx	r3
      chip_select_external_->SetHigh();
   17ab0:	9b03      	ldr	r3, [sp, #12]
   17ab2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
   17ab4:	9b03      	ldr	r3, [sp, #12]
   17ab6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   17ab8:	681b      	ldr	r3, [r3, #0]
   17aba:	330c      	adds	r3, #12
   17abc:	681b      	ldr	r3, [r3, #0]
   17abe:	4610      	mov	r0, r2
   17ac0:	4798      	blx	r3
    }
    return res_len;
   17ac2:	f89d 4033 	ldrb.w	r4, [sp, #51]	; 0x33
   17ac6:	4643      	mov	r3, r8
   17ac8:	4619      	mov	r1, r3
   17aca:	4807      	ldr	r0, [pc, #28]	; (17ae8 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x49c>)
   17acc:	f7fd fd14 	bl	154f8 <__cyg_profile_func_exit>
   17ad0:	4623      	mov	r3, r4
  }
   17ad2:	4618      	mov	r0, r3
   17ad4:	b00f      	add	sp, #60	; 0x3c
   17ad6:	e8bd 89f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, fp, pc}
   17ada:	bf00      	nop
   17adc:	0001a898 	.word	0x0001a898
   17ae0:	0001a794 	.word	0x0001a794
   17ae4:	0001a39c 	.word	0x0001a39c
   17ae8:	0001764d 	.word	0x0001764d

00017aec <Sd::Crc7Add(unsigned char, unsigned char)>:

  // Adds a message byte to the current CRC-7 to get a the new CRC-7
  uint8_t Crc7Add(uint8_t crc, uint8_t message_byte) override
   17aec:	b530      	push	{r4, r5, lr}
   17aee:	b083      	sub	sp, #12
   17af0:	4675      	mov	r5, lr
   17af2:	9001      	str	r0, [sp, #4]
   17af4:	460b      	mov	r3, r1
   17af6:	f88d 3003 	strb.w	r3, [sp, #3]
   17afa:	4613      	mov	r3, r2
   17afc:	f88d 3002 	strb.w	r3, [sp, #2]
   17b00:	462b      	mov	r3, r5
   17b02:	4619      	mov	r1, r3
   17b04:	4809      	ldr	r0, [pc, #36]	; (17b2c <Sd::Crc7Add(unsigned char, unsigned char)+0x40>)
   17b06:	f7fd fce3 	bl	154d0 <__cyg_profile_func_enter>
  {
    return kCrcTable8.crc_table[(crc << 1) ^ message_byte];
   17b0a:	f89d 3003 	ldrb.w	r3, [sp, #3]
   17b0e:	005a      	lsls	r2, r3, #1
   17b10:	f89d 3002 	ldrb.w	r3, [sp, #2]
   17b14:	4053      	eors	r3, r2
   17b16:	4a06      	ldr	r2, [pc, #24]	; (17b30 <Sd::Crc7Add(unsigned char, unsigned char)+0x44>)
   17b18:	5cd4      	ldrb	r4, [r2, r3]
   17b1a:	462b      	mov	r3, r5
   17b1c:	4619      	mov	r1, r3
   17b1e:	4803      	ldr	r0, [pc, #12]	; (17b2c <Sd::Crc7Add(unsigned char, unsigned char)+0x40>)
   17b20:	f7fd fcea 	bl	154f8 <__cyg_profile_func_exit>
   17b24:	4623      	mov	r3, r4
  }
   17b26:	4618      	mov	r0, r3
   17b28:	b003      	add	sp, #12
   17b2a:	bd30      	pop	{r4, r5, pc}
   17b2c:	00017aed 	.word	0x00017aed
   17b30:	0001a404 	.word	0x0001a404

00017b34 <Sd::GetCrc7(unsigned char*, unsigned char)>:

  // Returns the CRC-7 for a message of "length" bytes
  uint8_t GetCrc7(uint8_t * message, uint8_t length) override
   17b34:	b530      	push	{r4, r5, lr}
   17b36:	b087      	sub	sp, #28
   17b38:	4675      	mov	r5, lr
   17b3a:	9003      	str	r0, [sp, #12]
   17b3c:	9102      	str	r1, [sp, #8]
   17b3e:	4613      	mov	r3, r2
   17b40:	f88d 3007 	strb.w	r3, [sp, #7]
   17b44:	462b      	mov	r3, r5
   17b46:	4619      	mov	r1, r3
   17b48:	4815      	ldr	r0, [pc, #84]	; (17ba0 <Sd::GetCrc7(unsigned char*, unsigned char)+0x6c>)
   17b4a:	f7fd fcc1 	bl	154d0 <__cyg_profile_func_enter>
  {
    uint8_t crc = 0;
   17b4e:	2300      	movs	r3, #0
   17b50:	f88d 3017 	strb.w	r3, [sp, #23]
    for (int i = 0; i < length; i++)
   17b54:	2300      	movs	r3, #0
   17b56:	9304      	str	r3, [sp, #16]
   17b58:	f89d 3007 	ldrb.w	r3, [sp, #7]
   17b5c:	9a04      	ldr	r2, [sp, #16]
   17b5e:	429a      	cmp	r2, r3
   17b60:	da12      	bge.n	17b88 <Sd::GetCrc7(unsigned char*, unsigned char)+0x54>
    {
      crc = Crc7Add(crc, message[i]);
   17b62:	9b03      	ldr	r3, [sp, #12]
   17b64:	681b      	ldr	r3, [r3, #0]
   17b66:	3318      	adds	r3, #24
   17b68:	681b      	ldr	r3, [r3, #0]
   17b6a:	9a04      	ldr	r2, [sp, #16]
   17b6c:	9902      	ldr	r1, [sp, #8]
   17b6e:	440a      	add	r2, r1
   17b70:	7812      	ldrb	r2, [r2, #0]
   17b72:	f89d 1017 	ldrb.w	r1, [sp, #23]
   17b76:	9803      	ldr	r0, [sp, #12]
   17b78:	4798      	blx	r3
   17b7a:	4603      	mov	r3, r0
   17b7c:	f88d 3017 	strb.w	r3, [sp, #23]
    for (int i = 0; i < length; i++)
   17b80:	9b04      	ldr	r3, [sp, #16]
   17b82:	3301      	adds	r3, #1
   17b84:	9304      	str	r3, [sp, #16]
   17b86:	e7e7      	b.n	17b58 <Sd::GetCrc7(unsigned char*, unsigned char)+0x24>
    }
    return crc;
   17b88:	f89d 4017 	ldrb.w	r4, [sp, #23]
   17b8c:	462b      	mov	r3, r5
   17b8e:	4619      	mov	r1, r3
   17b90:	4803      	ldr	r0, [pc, #12]	; (17ba0 <Sd::GetCrc7(unsigned char*, unsigned char)+0x6c>)
   17b92:	f7fd fcb1 	bl	154f8 <__cyg_profile_func_exit>
   17b96:	4623      	mov	r3, r4
  }
   17b98:	4618      	mov	r0, r3
   17b9a:	b007      	add	sp, #28
   17b9c:	bd30      	pop	{r4, r5, pc}
   17b9e:	bf00      	nop
   17ba0:	00017b35 	.word	0x00017b35

00017ba4 <Sd::GetCrc16(unsigned char*, unsigned short)>:

  // Returns CCITT CRC-16 for a message of "length" bytes
  uint16_t GetCrc16(uint8_t * message, uint16_t length) override
   17ba4:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
   17ba8:	b08c      	sub	sp, #48	; 0x30
   17baa:	4677      	mov	r7, lr
   17bac:	9003      	str	r0, [sp, #12]
   17bae:	9102      	str	r1, [sp, #8]
   17bb0:	4613      	mov	r3, r2
   17bb2:	f8ad 3006 	strh.w	r3, [sp, #6]
   17bb6:	463b      	mov	r3, r7
   17bb8:	4619      	mov	r1, r3
   17bba:	4837      	ldr	r0, [pc, #220]	; (17c98 <Sd::GetCrc16(unsigned char*, unsigned short)+0xf4>)
   17bbc:	f7fd fc88 	bl	154d0 <__cyg_profile_func_enter>
  {
    uint64_t crc = 0x0000;
   17bc0:	f04f 0300 	mov.w	r3, #0
   17bc4:	f04f 0400 	mov.w	r4, #0
   17bc8:	e9cd 340a 	strd	r3, r4, [sp, #40]	; 0x28
    uint64_t temp;
    uint64_t final_value = 0;
   17bcc:	f04f 0300 	mov.w	r3, #0
   17bd0:	f04f 0400 	mov.w	r4, #0
   17bd4:	e9cd 3406 	strd	r3, r4, [sp, #24]

    for (uint64_t count = 0; count < length; ++count)
   17bd8:	f04f 0300 	mov.w	r3, #0
   17bdc:	f04f 0400 	mov.w	r4, #0
   17be0:	e9cd 3408 	strd	r3, r4, [sp, #32]
   17be4:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   17be8:	f04f 0400 	mov.w	r4, #0
   17bec:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
   17bf0:	42a2      	cmp	r2, r4
   17bf2:	bf08      	it	eq
   17bf4:	4299      	cmpeq	r1, r3
   17bf6:	d23f      	bcs.n	17c78 <Sd::GetCrc16(unsigned char*, unsigned short)+0xd4>
    {
      temp = (*message++ ^ (crc >> 8)) & 0xff;
   17bf8:	9b02      	ldr	r3, [sp, #8]
   17bfa:	1c5a      	adds	r2, r3, #1
   17bfc:	9202      	str	r2, [sp, #8]
   17bfe:	781b      	ldrb	r3, [r3, #0]
   17c00:	b2dd      	uxtb	r5, r3
   17c02:	f04f 0600 	mov.w	r6, #0
   17c06:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
   17c0a:	f04f 0300 	mov.w	r3, #0
   17c0e:	f04f 0400 	mov.w	r4, #0
   17c12:	0a0b      	lsrs	r3, r1, #8
   17c14:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
   17c18:	0a14      	lsrs	r4, r2, #8
   17c1a:	ea83 0b05 	eor.w	fp, r3, r5
   17c1e:	ea84 0c06 	eor.w	ip, r4, r6
   17c22:	f04f 01ff 	mov.w	r1, #255	; 0xff
   17c26:	f04f 0200 	mov.w	r2, #0
   17c2a:	ea0b 0301 	and.w	r3, fp, r1
   17c2e:	ea0c 0402 	and.w	r4, ip, r2
   17c32:	e9cd 3404 	strd	r3, r4, [sp, #16]
      crc  = kCrcTable16.crc_table[temp] ^ (crc << 8);
   17c36:	4a19      	ldr	r2, [pc, #100]	; (17c9c <Sd::GetCrc16(unsigned char*, unsigned short)+0xf8>)
   17c38:	9b04      	ldr	r3, [sp, #16]
   17c3a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
   17c3e:	b29d      	uxth	r5, r3
   17c40:	f04f 0600 	mov.w	r6, #0
   17c44:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
   17c48:	f04f 0b00 	mov.w	fp, #0
   17c4c:	f04f 0c00 	mov.w	ip, #0
   17c50:	ea4f 2c02 	mov.w	ip, r2, lsl #8
   17c54:	ea4c 6c11 	orr.w	ip, ip, r1, lsr #24
   17c58:	ea4f 2b01 	mov.w	fp, r1, lsl #8
   17c5c:	ea8b 0305 	eor.w	r3, fp, r5
   17c60:	ea8c 0406 	eor.w	r4, ip, r6
   17c64:	e9cd 340a 	strd	r3, r4, [sp, #40]	; 0x28
    for (uint64_t count = 0; count < length; ++count)
   17c68:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   17c6c:	1c59      	adds	r1, r3, #1
   17c6e:	f144 0200 	adc.w	r2, r4, #0
   17c72:	e9cd 1208 	strd	r1, r2, [sp, #32]
   17c76:	e7b5      	b.n	17be4 <Sd::GetCrc16(unsigned char*, unsigned short)+0x40>
    }

    return static_cast<uint16_t>(crc ^ final_value);
   17c78:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
   17c7c:	f8bd 3018 	ldrh.w	r3, [sp, #24]
   17c80:	4053      	eors	r3, r2
   17c82:	b29c      	uxth	r4, r3
   17c84:	463b      	mov	r3, r7
   17c86:	4619      	mov	r1, r3
   17c88:	4803      	ldr	r0, [pc, #12]	; (17c98 <Sd::GetCrc16(unsigned char*, unsigned short)+0xf4>)
   17c8a:	f7fd fc35 	bl	154f8 <__cyg_profile_func_exit>
   17c8e:	4623      	mov	r3, r4
  }
   17c90:	4618      	mov	r0, r3
   17c92:	b00c      	add	sp, #48	; 0x30
   17c94:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
   17c98:	00017ba5 	.word	0x00017ba5
   17c9c:	0001a504 	.word	0x0001a504

00017ca0 <__static_initialization_and_destruction_0(int, int)>:
extern "C" DRESULT disk_ioctl([[maybe_unused]] BYTE drive_number,
                              [[maybe_unused]] BYTE command,
                              [[maybe_unused]] void * buffer)
{
  return RES_PARERR;
}
   17ca0:	b530      	push	{r4, r5, lr}
   17ca2:	b085      	sub	sp, #20
   17ca4:	4674      	mov	r4, lr
   17ca6:	9003      	str	r0, [sp, #12]
   17ca8:	9102      	str	r1, [sp, #8]
   17caa:	4623      	mov	r3, r4
   17cac:	4619      	mov	r1, r3
   17cae:	480e      	ldr	r0, [pc, #56]	; (17ce8 <__static_initialization_and_destruction_0(int, int)+0x48>)
   17cb0:	f7fd fc0e 	bl	154d0 <__cyg_profile_func_enter>
   17cb4:	9b03      	ldr	r3, [sp, #12]
   17cb6:	2b01      	cmp	r3, #1
   17cb8:	d10e      	bne.n	17cd8 <__static_initialization_and_destruction_0(int, int)+0x38>
   17cba:	9b02      	ldr	r3, [sp, #8]
   17cbc:	f64f 72ff 	movw	r2, #65535	; 0xffff
   17cc0:	4293      	cmp	r3, r2
   17cc2:	d109      	bne.n	17cd8 <__static_initialization_and_destruction_0(int, int)+0x38>
Sd sd_card(Sd::DebugSdCard_t{});
   17cc4:	2306      	movs	r3, #6
   17cc6:	9301      	str	r3, [sp, #4]
   17cc8:	2300      	movs	r3, #0
   17cca:	9300      	str	r3, [sp, #0]
   17ccc:	2308      	movs	r3, #8
   17cce:	2201      	movs	r2, #1
   17cd0:	4629      	mov	r1, r5
   17cd2:	4806      	ldr	r0, [pc, #24]	; (17cec <__static_initialization_and_destruction_0(int, int)+0x4c>)
   17cd4:	f7fe fe96 	bl	16a04 <Sd::Sd(Sd::DebugSdCard_t, unsigned char, unsigned char, unsigned char, unsigned char)>
   17cd8:	4623      	mov	r3, r4
   17cda:	4619      	mov	r1, r3
   17cdc:	4802      	ldr	r0, [pc, #8]	; (17ce8 <__static_initialization_and_destruction_0(int, int)+0x48>)
   17cde:	f7fd fc0b 	bl	154f8 <__cyg_profile_func_exit>
}
   17ce2:	bf00      	nop
   17ce4:	b005      	add	sp, #20
   17ce6:	bd30      	pop	{r4, r5, pc}
   17ce8:	00017ca1 	.word	0x00017ca1
   17cec:	10001048 	.word	0x10001048

00017cf0 <_GLOBAL__sub_I_disk_status>:
   17cf0:	b510      	push	{r4, lr}
   17cf2:	4674      	mov	r4, lr
   17cf4:	4623      	mov	r3, r4
   17cf6:	4619      	mov	r1, r3
   17cf8:	4806      	ldr	r0, [pc, #24]	; (17d14 <_GLOBAL__sub_I_disk_status+0x24>)
   17cfa:	f7fd fbe9 	bl	154d0 <__cyg_profile_func_enter>
   17cfe:	f64f 71ff 	movw	r1, #65535	; 0xffff
   17d02:	2001      	movs	r0, #1
   17d04:	f7ff ffcc 	bl	17ca0 <__static_initialization_and_destruction_0(int, int)>
   17d08:	4623      	mov	r3, r4
   17d0a:	4619      	mov	r1, r3
   17d0c:	4801      	ldr	r0, [pc, #4]	; (17d14 <_GLOBAL__sub_I_disk_status+0x24>)
   17d0e:	f7fd fbf3 	bl	154f8 <__cyg_profile_func_exit>
   17d12:	bd10      	pop	{r4, pc}
   17d14:	00017cf1 	.word	0x00017cf1

00017d18 <__cxa_pure_virtual>:
   17d18:	b508      	push	{r3, lr}
   17d1a:	f000 f80d 	bl	17d38 <std::terminate()>

00017d1e <__cxxabiv1::__terminate(void (*)())>:
   17d1e:	b508      	push	{r3, lr}
   17d20:	4780      	blx	r0
   17d22:	f000 fa0f 	bl	18144 <abort>
   17d26:	Address 0x0000000000017d26 is out of bounds.


00017d28 <std::get_terminate()>:
   17d28:	4b02      	ldr	r3, [pc, #8]	; (17d34 <std::get_terminate()+0xc>)
   17d2a:	6818      	ldr	r0, [r3, #0]
   17d2c:	f3bf 8f5b 	dmb	ish
   17d30:	4770      	bx	lr
   17d32:	bf00      	nop
   17d34:	100004f8 	.word	0x100004f8

00017d38 <std::terminate()>:
   17d38:	b508      	push	{r3, lr}
   17d3a:	f7ff fff5 	bl	17d28 <std::get_terminate()>
   17d3e:	f7ff ffee 	bl	17d1e <__cxxabiv1::__terminate(void (*)())>
   17d42:	Address 0x0000000000017d42 is out of bounds.


00017d44 <roundf>:
   17d44:	b082      	sub	sp, #8
   17d46:	ed8d 0a01 	vstr	s0, [sp, #4]
   17d4a:	9901      	ldr	r1, [sp, #4]
   17d4c:	f3c1 53c7 	ubfx	r3, r1, #23, #8
   17d50:	f1a3 027f 	sub.w	r2, r3, #127	; 0x7f
   17d54:	2a16      	cmp	r2, #22
   17d56:	dc0c      	bgt.n	17d72 <roundf+0x2e>
   17d58:	2a00      	cmp	r2, #0
   17d5a:	db10      	blt.n	17d7e <roundf+0x3a>
   17d5c:	4810      	ldr	r0, [pc, #64]	; (17da0 <roundf+0x5c>)
   17d5e:	4110      	asrs	r0, r2
   17d60:	4201      	tst	r1, r0
   17d62:	d008      	beq.n	17d76 <roundf+0x32>
   17d64:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   17d68:	4113      	asrs	r3, r2
   17d6a:	440b      	add	r3, r1
   17d6c:	ea23 0300 	bic.w	r3, r3, r0
   17d70:	e00b      	b.n	17d8a <roundf+0x46>
   17d72:	2a80      	cmp	r2, #128	; 0x80
   17d74:	d00d      	beq.n	17d92 <roundf+0x4e>
   17d76:	ed9d 0a01 	vldr	s0, [sp, #4]
   17d7a:	b002      	add	sp, #8
   17d7c:	4770      	bx	lr
   17d7e:	3201      	adds	r2, #1
   17d80:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
   17d84:	d101      	bne.n	17d8a <roundf+0x46>
   17d86:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
   17d8a:	ee00 3a10 	vmov	s0, r3
   17d8e:	b002      	add	sp, #8
   17d90:	4770      	bx	lr
   17d92:	eddd 7a01 	vldr	s15, [sp, #4]
   17d96:	ee37 0aa7 	vadd.f32	s0, s15, s15
   17d9a:	b002      	add	sp, #8
   17d9c:	4770      	bx	lr
   17d9e:	bf00      	nop
   17da0:	007fffff 	.word	0x007fffff

00017da4 <__aeabi_d2f>:
   17da4:	ea4f 0241 	mov.w	r2, r1, lsl #1
   17da8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   17dac:	bf24      	itt	cs
   17dae:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   17db2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   17db6:	d90d      	bls.n	17dd4 <__aeabi_d2f+0x30>
   17db8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   17dbc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   17dc0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   17dc4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   17dc8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   17dcc:	bf08      	it	eq
   17dce:	f020 0001 	biceq.w	r0, r0, #1
   17dd2:	4770      	bx	lr
   17dd4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   17dd8:	d121      	bne.n	17e1e <__aeabi_d2f+0x7a>
   17dda:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   17dde:	bfbc      	itt	lt
   17de0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   17de4:	4770      	bxlt	lr
   17de6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   17dea:	ea4f 5252 	mov.w	r2, r2, lsr #21
   17dee:	f1c2 0218 	rsb	r2, r2, #24
   17df2:	f1c2 0c20 	rsb	ip, r2, #32
   17df6:	fa10 f30c 	lsls.w	r3, r0, ip
   17dfa:	fa20 f002 	lsr.w	r0, r0, r2
   17dfe:	bf18      	it	ne
   17e00:	f040 0001 	orrne.w	r0, r0, #1
   17e04:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   17e08:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   17e0c:	fa03 fc0c 	lsl.w	ip, r3, ip
   17e10:	ea40 000c 	orr.w	r0, r0, ip
   17e14:	fa23 f302 	lsr.w	r3, r3, r2
   17e18:	ea4f 0343 	mov.w	r3, r3, lsl #1
   17e1c:	e7cc      	b.n	17db8 <__aeabi_d2f+0x14>
   17e1e:	ea7f 5362 	mvns.w	r3, r2, asr #21
   17e22:	d107      	bne.n	17e34 <__aeabi_d2f+0x90>
   17e24:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   17e28:	bf1e      	ittt	ne
   17e2a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   17e2e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   17e32:	4770      	bxne	lr
   17e34:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   17e38:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   17e3c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   17e40:	4770      	bx	lr
   17e42:	bf00      	nop

00017e44 <__aeabi_uldivmod>:
   17e44:	b953      	cbnz	r3, 17e5c <__aeabi_uldivmod+0x18>
   17e46:	b94a      	cbnz	r2, 17e5c <__aeabi_uldivmod+0x18>
   17e48:	2900      	cmp	r1, #0
   17e4a:	bf08      	it	eq
   17e4c:	2800      	cmpeq	r0, #0
   17e4e:	bf1c      	itt	ne
   17e50:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
   17e54:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   17e58:	f000 b972 	b.w	18140 <__aeabi_idiv0>
   17e5c:	f1ad 0c08 	sub.w	ip, sp, #8
   17e60:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   17e64:	f000 f806 	bl	17e74 <__udivmoddi4>
   17e68:	f8dd e004 	ldr.w	lr, [sp, #4]
   17e6c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   17e70:	b004      	add	sp, #16
   17e72:	4770      	bx	lr

00017e74 <__udivmoddi4>:
   17e74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   17e78:	9e08      	ldr	r6, [sp, #32]
   17e7a:	4604      	mov	r4, r0
   17e7c:	4688      	mov	r8, r1
   17e7e:	2b00      	cmp	r3, #0
   17e80:	d14b      	bne.n	17f1a <__udivmoddi4+0xa6>
   17e82:	428a      	cmp	r2, r1
   17e84:	4615      	mov	r5, r2
   17e86:	d967      	bls.n	17f58 <__udivmoddi4+0xe4>
   17e88:	fab2 f282 	clz	r2, r2
   17e8c:	b14a      	cbz	r2, 17ea2 <__udivmoddi4+0x2e>
   17e8e:	f1c2 0720 	rsb	r7, r2, #32
   17e92:	fa01 f302 	lsl.w	r3, r1, r2
   17e96:	fa20 f707 	lsr.w	r7, r0, r7
   17e9a:	4095      	lsls	r5, r2
   17e9c:	ea47 0803 	orr.w	r8, r7, r3
   17ea0:	4094      	lsls	r4, r2
   17ea2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
   17ea6:	0c23      	lsrs	r3, r4, #16
   17ea8:	fbb8 f7fe 	udiv	r7, r8, lr
   17eac:	fa1f fc85 	uxth.w	ip, r5
   17eb0:	fb0e 8817 	mls	r8, lr, r7, r8
   17eb4:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
   17eb8:	fb07 f10c 	mul.w	r1, r7, ip
   17ebc:	4299      	cmp	r1, r3
   17ebe:	d909      	bls.n	17ed4 <__udivmoddi4+0x60>
   17ec0:	18eb      	adds	r3, r5, r3
   17ec2:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
   17ec6:	f080 811b 	bcs.w	18100 <__udivmoddi4+0x28c>
   17eca:	4299      	cmp	r1, r3
   17ecc:	f240 8118 	bls.w	18100 <__udivmoddi4+0x28c>
   17ed0:	3f02      	subs	r7, #2
   17ed2:	442b      	add	r3, r5
   17ed4:	1a5b      	subs	r3, r3, r1
   17ed6:	b2a4      	uxth	r4, r4
   17ed8:	fbb3 f0fe 	udiv	r0, r3, lr
   17edc:	fb0e 3310 	mls	r3, lr, r0, r3
   17ee0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
   17ee4:	fb00 fc0c 	mul.w	ip, r0, ip
   17ee8:	45a4      	cmp	ip, r4
   17eea:	d909      	bls.n	17f00 <__udivmoddi4+0x8c>
   17eec:	192c      	adds	r4, r5, r4
   17eee:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   17ef2:	f080 8107 	bcs.w	18104 <__udivmoddi4+0x290>
   17ef6:	45a4      	cmp	ip, r4
   17ef8:	f240 8104 	bls.w	18104 <__udivmoddi4+0x290>
   17efc:	3802      	subs	r0, #2
   17efe:	442c      	add	r4, r5
   17f00:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
   17f04:	eba4 040c 	sub.w	r4, r4, ip
   17f08:	2700      	movs	r7, #0
   17f0a:	b11e      	cbz	r6, 17f14 <__udivmoddi4+0xa0>
   17f0c:	40d4      	lsrs	r4, r2
   17f0e:	2300      	movs	r3, #0
   17f10:	e9c6 4300 	strd	r4, r3, [r6]
   17f14:	4639      	mov	r1, r7
   17f16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   17f1a:	428b      	cmp	r3, r1
   17f1c:	d909      	bls.n	17f32 <__udivmoddi4+0xbe>
   17f1e:	2e00      	cmp	r6, #0
   17f20:	f000 80eb 	beq.w	180fa <__udivmoddi4+0x286>
   17f24:	2700      	movs	r7, #0
   17f26:	e9c6 0100 	strd	r0, r1, [r6]
   17f2a:	4638      	mov	r0, r7
   17f2c:	4639      	mov	r1, r7
   17f2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   17f32:	fab3 f783 	clz	r7, r3
   17f36:	2f00      	cmp	r7, #0
   17f38:	d147      	bne.n	17fca <__udivmoddi4+0x156>
   17f3a:	428b      	cmp	r3, r1
   17f3c:	d302      	bcc.n	17f44 <__udivmoddi4+0xd0>
   17f3e:	4282      	cmp	r2, r0
   17f40:	f200 80fa 	bhi.w	18138 <__udivmoddi4+0x2c4>
   17f44:	1a84      	subs	r4, r0, r2
   17f46:	eb61 0303 	sbc.w	r3, r1, r3
   17f4a:	2001      	movs	r0, #1
   17f4c:	4698      	mov	r8, r3
   17f4e:	2e00      	cmp	r6, #0
   17f50:	d0e0      	beq.n	17f14 <__udivmoddi4+0xa0>
   17f52:	e9c6 4800 	strd	r4, r8, [r6]
   17f56:	e7dd      	b.n	17f14 <__udivmoddi4+0xa0>
   17f58:	b902      	cbnz	r2, 17f5c <__udivmoddi4+0xe8>
   17f5a:	deff      	udf	#255	; 0xff
   17f5c:	fab2 f282 	clz	r2, r2
   17f60:	2a00      	cmp	r2, #0
   17f62:	f040 808f 	bne.w	18084 <__udivmoddi4+0x210>
   17f66:	1b49      	subs	r1, r1, r5
   17f68:	ea4f 4e15 	mov.w	lr, r5, lsr #16
   17f6c:	fa1f f885 	uxth.w	r8, r5
   17f70:	2701      	movs	r7, #1
   17f72:	fbb1 fcfe 	udiv	ip, r1, lr
   17f76:	0c23      	lsrs	r3, r4, #16
   17f78:	fb0e 111c 	mls	r1, lr, ip, r1
   17f7c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   17f80:	fb08 f10c 	mul.w	r1, r8, ip
   17f84:	4299      	cmp	r1, r3
   17f86:	d907      	bls.n	17f98 <__udivmoddi4+0x124>
   17f88:	18eb      	adds	r3, r5, r3
   17f8a:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
   17f8e:	d202      	bcs.n	17f96 <__udivmoddi4+0x122>
   17f90:	4299      	cmp	r1, r3
   17f92:	f200 80cd 	bhi.w	18130 <__udivmoddi4+0x2bc>
   17f96:	4684      	mov	ip, r0
   17f98:	1a59      	subs	r1, r3, r1
   17f9a:	b2a3      	uxth	r3, r4
   17f9c:	fbb1 f0fe 	udiv	r0, r1, lr
   17fa0:	fb0e 1410 	mls	r4, lr, r0, r1
   17fa4:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
   17fa8:	fb08 f800 	mul.w	r8, r8, r0
   17fac:	45a0      	cmp	r8, r4
   17fae:	d907      	bls.n	17fc0 <__udivmoddi4+0x14c>
   17fb0:	192c      	adds	r4, r5, r4
   17fb2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   17fb6:	d202      	bcs.n	17fbe <__udivmoddi4+0x14a>
   17fb8:	45a0      	cmp	r8, r4
   17fba:	f200 80b6 	bhi.w	1812a <__udivmoddi4+0x2b6>
   17fbe:	4618      	mov	r0, r3
   17fc0:	eba4 0408 	sub.w	r4, r4, r8
   17fc4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
   17fc8:	e79f      	b.n	17f0a <__udivmoddi4+0x96>
   17fca:	f1c7 0c20 	rsb	ip, r7, #32
   17fce:	40bb      	lsls	r3, r7
   17fd0:	fa22 fe0c 	lsr.w	lr, r2, ip
   17fd4:	ea4e 0e03 	orr.w	lr, lr, r3
   17fd8:	fa01 f407 	lsl.w	r4, r1, r7
   17fdc:	fa20 f50c 	lsr.w	r5, r0, ip
   17fe0:	fa21 f30c 	lsr.w	r3, r1, ip
   17fe4:	ea4f 481e 	mov.w	r8, lr, lsr #16
   17fe8:	4325      	orrs	r5, r4
   17fea:	fbb3 f9f8 	udiv	r9, r3, r8
   17fee:	0c2c      	lsrs	r4, r5, #16
   17ff0:	fb08 3319 	mls	r3, r8, r9, r3
   17ff4:	fa1f fa8e 	uxth.w	sl, lr
   17ff8:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
   17ffc:	fb09 f40a 	mul.w	r4, r9, sl
   18000:	429c      	cmp	r4, r3
   18002:	fa02 f207 	lsl.w	r2, r2, r7
   18006:	fa00 f107 	lsl.w	r1, r0, r7
   1800a:	d90b      	bls.n	18024 <__udivmoddi4+0x1b0>
   1800c:	eb1e 0303 	adds.w	r3, lr, r3
   18010:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
   18014:	f080 8087 	bcs.w	18126 <__udivmoddi4+0x2b2>
   18018:	429c      	cmp	r4, r3
   1801a:	f240 8084 	bls.w	18126 <__udivmoddi4+0x2b2>
   1801e:	f1a9 0902 	sub.w	r9, r9, #2
   18022:	4473      	add	r3, lr
   18024:	1b1b      	subs	r3, r3, r4
   18026:	b2ad      	uxth	r5, r5
   18028:	fbb3 f0f8 	udiv	r0, r3, r8
   1802c:	fb08 3310 	mls	r3, r8, r0, r3
   18030:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
   18034:	fb00 fa0a 	mul.w	sl, r0, sl
   18038:	45a2      	cmp	sl, r4
   1803a:	d908      	bls.n	1804e <__udivmoddi4+0x1da>
   1803c:	eb1e 0404 	adds.w	r4, lr, r4
   18040:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   18044:	d26b      	bcs.n	1811e <__udivmoddi4+0x2aa>
   18046:	45a2      	cmp	sl, r4
   18048:	d969      	bls.n	1811e <__udivmoddi4+0x2aa>
   1804a:	3802      	subs	r0, #2
   1804c:	4474      	add	r4, lr
   1804e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   18052:	fba0 8902 	umull	r8, r9, r0, r2
   18056:	eba4 040a 	sub.w	r4, r4, sl
   1805a:	454c      	cmp	r4, r9
   1805c:	46c2      	mov	sl, r8
   1805e:	464b      	mov	r3, r9
   18060:	d354      	bcc.n	1810c <__udivmoddi4+0x298>
   18062:	d051      	beq.n	18108 <__udivmoddi4+0x294>
   18064:	2e00      	cmp	r6, #0
   18066:	d069      	beq.n	1813c <__udivmoddi4+0x2c8>
   18068:	ebb1 050a 	subs.w	r5, r1, sl
   1806c:	eb64 0403 	sbc.w	r4, r4, r3
   18070:	fa04 fc0c 	lsl.w	ip, r4, ip
   18074:	40fd      	lsrs	r5, r7
   18076:	40fc      	lsrs	r4, r7
   18078:	ea4c 0505 	orr.w	r5, ip, r5
   1807c:	e9c6 5400 	strd	r5, r4, [r6]
   18080:	2700      	movs	r7, #0
   18082:	e747      	b.n	17f14 <__udivmoddi4+0xa0>
   18084:	f1c2 0320 	rsb	r3, r2, #32
   18088:	fa20 f703 	lsr.w	r7, r0, r3
   1808c:	4095      	lsls	r5, r2
   1808e:	fa01 f002 	lsl.w	r0, r1, r2
   18092:	fa21 f303 	lsr.w	r3, r1, r3
   18096:	ea4f 4e15 	mov.w	lr, r5, lsr #16
   1809a:	4338      	orrs	r0, r7
   1809c:	0c01      	lsrs	r1, r0, #16
   1809e:	fbb3 f7fe 	udiv	r7, r3, lr
   180a2:	fa1f f885 	uxth.w	r8, r5
   180a6:	fb0e 3317 	mls	r3, lr, r7, r3
   180aa:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   180ae:	fb07 f308 	mul.w	r3, r7, r8
   180b2:	428b      	cmp	r3, r1
   180b4:	fa04 f402 	lsl.w	r4, r4, r2
   180b8:	d907      	bls.n	180ca <__udivmoddi4+0x256>
   180ba:	1869      	adds	r1, r5, r1
   180bc:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
   180c0:	d22f      	bcs.n	18122 <__udivmoddi4+0x2ae>
   180c2:	428b      	cmp	r3, r1
   180c4:	d92d      	bls.n	18122 <__udivmoddi4+0x2ae>
   180c6:	3f02      	subs	r7, #2
   180c8:	4429      	add	r1, r5
   180ca:	1acb      	subs	r3, r1, r3
   180cc:	b281      	uxth	r1, r0
   180ce:	fbb3 f0fe 	udiv	r0, r3, lr
   180d2:	fb0e 3310 	mls	r3, lr, r0, r3
   180d6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   180da:	fb00 f308 	mul.w	r3, r0, r8
   180de:	428b      	cmp	r3, r1
   180e0:	d907      	bls.n	180f2 <__udivmoddi4+0x27e>
   180e2:	1869      	adds	r1, r5, r1
   180e4:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
   180e8:	d217      	bcs.n	1811a <__udivmoddi4+0x2a6>
   180ea:	428b      	cmp	r3, r1
   180ec:	d915      	bls.n	1811a <__udivmoddi4+0x2a6>
   180ee:	3802      	subs	r0, #2
   180f0:	4429      	add	r1, r5
   180f2:	1ac9      	subs	r1, r1, r3
   180f4:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
   180f8:	e73b      	b.n	17f72 <__udivmoddi4+0xfe>
   180fa:	4637      	mov	r7, r6
   180fc:	4630      	mov	r0, r6
   180fe:	e709      	b.n	17f14 <__udivmoddi4+0xa0>
   18100:	4607      	mov	r7, r0
   18102:	e6e7      	b.n	17ed4 <__udivmoddi4+0x60>
   18104:	4618      	mov	r0, r3
   18106:	e6fb      	b.n	17f00 <__udivmoddi4+0x8c>
   18108:	4541      	cmp	r1, r8
   1810a:	d2ab      	bcs.n	18064 <__udivmoddi4+0x1f0>
   1810c:	ebb8 0a02 	subs.w	sl, r8, r2
   18110:	eb69 020e 	sbc.w	r2, r9, lr
   18114:	3801      	subs	r0, #1
   18116:	4613      	mov	r3, r2
   18118:	e7a4      	b.n	18064 <__udivmoddi4+0x1f0>
   1811a:	4660      	mov	r0, ip
   1811c:	e7e9      	b.n	180f2 <__udivmoddi4+0x27e>
   1811e:	4618      	mov	r0, r3
   18120:	e795      	b.n	1804e <__udivmoddi4+0x1da>
   18122:	4667      	mov	r7, ip
   18124:	e7d1      	b.n	180ca <__udivmoddi4+0x256>
   18126:	4681      	mov	r9, r0
   18128:	e77c      	b.n	18024 <__udivmoddi4+0x1b0>
   1812a:	3802      	subs	r0, #2
   1812c:	442c      	add	r4, r5
   1812e:	e747      	b.n	17fc0 <__udivmoddi4+0x14c>
   18130:	f1ac 0c02 	sub.w	ip, ip, #2
   18134:	442b      	add	r3, r5
   18136:	e72f      	b.n	17f98 <__udivmoddi4+0x124>
   18138:	4638      	mov	r0, r7
   1813a:	e708      	b.n	17f4e <__udivmoddi4+0xda>
   1813c:	4637      	mov	r7, r6
   1813e:	e6e9      	b.n	17f14 <__udivmoddi4+0xa0>

00018140 <__aeabi_idiv0>:
   18140:	4770      	bx	lr
   18142:	bf00      	nop

00018144 <abort>:
   18144:	b508      	push	{r3, lr}
   18146:	2006      	movs	r0, #6
   18148:	f000 f858 	bl	181fc <raise>
   1814c:	2001      	movs	r0, #1
   1814e:	f7fd f91f 	bl	15390 <_exit>
   18152:	Address 0x0000000000018152 is out of bounds.


00018154 <__libc_init_array>:
   18154:	b570      	push	{r4, r5, r6, lr}
   18156:	4e0d      	ldr	r6, [pc, #52]	; (1818c <__libc_init_array+0x38>)
   18158:	4c0d      	ldr	r4, [pc, #52]	; (18190 <__libc_init_array+0x3c>)
   1815a:	1ba4      	subs	r4, r4, r6
   1815c:	10a4      	asrs	r4, r4, #2
   1815e:	2500      	movs	r5, #0
   18160:	42a5      	cmp	r5, r4
   18162:	d109      	bne.n	18178 <__libc_init_array+0x24>
   18164:	4e0b      	ldr	r6, [pc, #44]	; (18194 <__libc_init_array+0x40>)
   18166:	4c0c      	ldr	r4, [pc, #48]	; (18198 <__libc_init_array+0x44>)
   18168:	f7f8 f8ca 	bl	10300 <_init>
   1816c:	1ba4      	subs	r4, r4, r6
   1816e:	10a4      	asrs	r4, r4, #2
   18170:	2500      	movs	r5, #0
   18172:	42a5      	cmp	r5, r4
   18174:	d105      	bne.n	18182 <__libc_init_array+0x2e>
   18176:	bd70      	pop	{r4, r5, r6, pc}
   18178:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   1817c:	4798      	blx	r3
   1817e:	3501      	adds	r5, #1
   18180:	e7ee      	b.n	18160 <__libc_init_array+0xc>
   18182:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   18186:	4798      	blx	r3
   18188:	3501      	adds	r5, #1
   1818a:	e7f2      	b.n	18172 <__libc_init_array+0x1e>
   1818c:	0001030c 	.word	0x0001030c
   18190:	0001030c 	.word	0x0001030c
   18194:	0001030c 	.word	0x0001030c
   18198:	0001031c 	.word	0x0001031c

0001819c <memset>:
   1819c:	4402      	add	r2, r0
   1819e:	4603      	mov	r3, r0
   181a0:	4293      	cmp	r3, r2
   181a2:	d100      	bne.n	181a6 <memset+0xa>
   181a4:	4770      	bx	lr
   181a6:	f803 1b01 	strb.w	r1, [r3], #1
   181aa:	e7f9      	b.n	181a0 <memset+0x4>

000181ac <_raise_r>:
   181ac:	291f      	cmp	r1, #31
   181ae:	b538      	push	{r3, r4, r5, lr}
   181b0:	4604      	mov	r4, r0
   181b2:	460d      	mov	r5, r1
   181b4:	d904      	bls.n	181c0 <_raise_r+0x14>
   181b6:	2316      	movs	r3, #22
   181b8:	6003      	str	r3, [r0, #0]
   181ba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   181be:	bd38      	pop	{r3, r4, r5, pc}
   181c0:	6c42      	ldr	r2, [r0, #68]	; 0x44
   181c2:	b112      	cbz	r2, 181ca <_raise_r+0x1e>
   181c4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
   181c8:	b94b      	cbnz	r3, 181de <_raise_r+0x32>
   181ca:	4620      	mov	r0, r4
   181cc:	f000 f830 	bl	18230 <_getpid_r>
   181d0:	462a      	mov	r2, r5
   181d2:	4601      	mov	r1, r0
   181d4:	4620      	mov	r0, r4
   181d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   181da:	f000 b817 	b.w	1820c <_kill_r>
   181de:	2b01      	cmp	r3, #1
   181e0:	d00a      	beq.n	181f8 <_raise_r+0x4c>
   181e2:	1c59      	adds	r1, r3, #1
   181e4:	d103      	bne.n	181ee <_raise_r+0x42>
   181e6:	2316      	movs	r3, #22
   181e8:	6003      	str	r3, [r0, #0]
   181ea:	2001      	movs	r0, #1
   181ec:	e7e7      	b.n	181be <_raise_r+0x12>
   181ee:	2400      	movs	r4, #0
   181f0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
   181f4:	4628      	mov	r0, r5
   181f6:	4798      	blx	r3
   181f8:	2000      	movs	r0, #0
   181fa:	e7e0      	b.n	181be <_raise_r+0x12>

000181fc <raise>:
   181fc:	4b02      	ldr	r3, [pc, #8]	; (18208 <raise+0xc>)
   181fe:	4601      	mov	r1, r0
   18200:	6818      	ldr	r0, [r3, #0]
   18202:	f7ff bfd3 	b.w	181ac <_raise_r>
   18206:	bf00      	nop
   18208:	100004fc 	.word	0x100004fc

0001820c <_kill_r>:
   1820c:	b538      	push	{r3, r4, r5, lr}
   1820e:	4c07      	ldr	r4, [pc, #28]	; (1822c <_kill_r+0x20>)
   18210:	2300      	movs	r3, #0
   18212:	4605      	mov	r5, r0
   18214:	4608      	mov	r0, r1
   18216:	4611      	mov	r1, r2
   18218:	6023      	str	r3, [r4, #0]
   1821a:	f7fd f8d7 	bl	153cc <_kill>
   1821e:	1c43      	adds	r3, r0, #1
   18220:	d102      	bne.n	18228 <_kill_r+0x1c>
   18222:	6823      	ldr	r3, [r4, #0]
   18224:	b103      	cbz	r3, 18228 <_kill_r+0x1c>
   18226:	602b      	str	r3, [r5, #0]
   18228:	bd38      	pop	{r3, r4, r5, pc}
   1822a:	bf00      	nop
   1822c:	100010b0 	.word	0x100010b0

00018230 <_getpid_r>:
   18230:	f7fd b8ba 	b.w	153a8 <_getpid>
   18234:	315f3050 	.word	0x315f3050
   18238:	20736920 	.word	0x20736920
   1823c:	20656874 	.word	0x20656874
   18240:	7272696d 	.word	0x7272696d
   18244:	7020726f 	.word	0x7020726f
   18248:	00006e69 	.word	0x00006e69
   1824c:	325f3050 	.word	0x325f3050
   18250:	73692035 	.word	0x73692035
   18254:	65687420 	.word	0x65687420
   18258:	72696d20 	.word	0x72696d20
   1825c:	20726f72 	.word	0x20726f72
   18260:	006e6970 	.word	0x006e6970
   18264:	325f3450 	.word	0x325f3450
   18268:	73692038 	.word	0x73692038
   1826c:	65687420 	.word	0x65687420
   18270:	72696d20 	.word	0x72696d20
   18274:	20726f72 	.word	0x20726f72
   18278:	006e6970 	.word	0x006e6970
   1827c:	75746552 	.word	0x75746552
   18280:	64656e72 	.word	0x64656e72
   18284:	74616420 	.word	0x74616420
   18288:	25203a61 	.word	0x25203a61
   1828c:	78252078 	.word	0x78252078
   18290:	20782520 	.word	0x20782520
   18294:	000a7825 	.word	0x000a7825
   18298:	63617453 	.word	0x63617453
   1829c:	6544206b 	.word	0x6544206b
   182a0:	20687470 	.word	0x20687470
   182a4:	7a25203d 	.word	0x7a25203d
   182a8:	00000a64 	.word	0x00000a64
   182ac:	25232020 	.word	0x25232020
   182b0:	203a757a 	.word	0x203a757a
   182b4:	70257830 	.word	0x70257830
   182b8:	0000000a 	.word	0x0000000a
   182bc:	6e75520a 	.word	0x6e75520a
   182c0:	6874203a 	.word	0x6874203a
   182c4:	6f662065 	.word	0x6f662065
   182c8:	776f6c6c 	.word	0x776f6c6c
   182cc:	20676e69 	.word	0x20676e69
   182d0:	6d6d6f63 	.word	0x6d6d6f63
   182d4:	20646e61 	.word	0x20646e61
   182d8:	79206e69 	.word	0x79206e69
   182dc:	2072756f 	.word	0x2072756f
   182e0:	6a6f7270 	.word	0x6a6f7270
   182e4:	20746365 	.word	0x20746365
   182e8:	65726964 	.word	0x65726964
   182ec:	726f7463 	.word	0x726f7463
   182f0:	00000079 	.word	0x00000079
   182f4:	1b20200a 	.word	0x1b20200a
   182f8:	333b315b 	.word	0x333b315b
   182fc:	616d6d37 	.word	0x616d6d37
   18300:	7320656b 	.word	0x7320656b
   18304:	6b636174 	.word	0x6b636174
   18308:	63617274 	.word	0x63617274
   1830c:	73252d65 	.word	0x73252d65
   18310:	41525420 	.word	0x41525420
   18314:	3d534543 	.word	0x3d534543
   18318:	00000022 	.word	0x00000022
   1831c:	70257830 	.word	0x70257830
   18320:	00000000 	.word	0x00000000
   18324:	25783020 	.word	0x25783020
   18328:	00000070 	.word	0x00000070
   1832c:	5b1b0a22 	.word	0x5b1b0a22
   18330:	00006d30 	.word	0x00006d30
   18334:	73696854 	.word	0x73696854
   18338:	6c697720 	.word	0x6c697720
   1833c:	6572206c 	.word	0x6572206c
   18340:	74726f70 	.word	0x74726f70
   18344:	65687420 	.word	0x65687420
   18348:	6c696620 	.word	0x6c696620
   1834c:	6e612065 	.word	0x6e612065
   18350:	696c2064 	.word	0x696c2064
   18354:	6e20656e 	.word	0x6e20656e
   18358:	65626d75 	.word	0x65626d75
   1835c:	68742072 	.word	0x68742072
   18360:	6c207461 	.word	0x6c207461
   18364:	74206465 	.word	0x74206465
   18368:	6874206f 	.word	0x6874206f
   1836c:	66207369 	.word	0x66207369
   18370:	74636e75 	.word	0x74636e75
   18374:	206e6f69 	.word	0x206e6f69
   18378:	6e696562 	.word	0x6e696562
   1837c:	61632067 	.word	0x61632067
   18380:	64656c6c 	.word	0x64656c6c
   18384:	0000002e 	.word	0x0000002e
   18388:	6c707061 	.word	0x6c707061
   1838c:	74616369 	.word	0x74616369
   18390:	006e6f69 	.word	0x006e6f69
   18394:	33345b1b 	.word	0x33345b1b
   18398:	4157206d 	.word	0x4157206d
   1839c:	4e494e52 	.word	0x4e494e52
   183a0:	305b1b47 	.word	0x305b1b47
   183a4:	6d34393b 	.word	0x6d34393b
   183a8:	3a73253a 	.word	0x3a73253a
   183ac:	3b305b1b 	.word	0x3b305b1b
   183b0:	256d3239 	.word	0x256d3239
   183b4:	5b1b3a73 	.word	0x5b1b3a73
   183b8:	33393b30 	.word	0x33393b30
   183bc:	3e64256d 	.word	0x3e64256d
   183c0:	305b1b20 	.word	0x305b1b20
   183c4:	6d37333b 	.word	0x6d37333b
   183c8:	74726f50 	.word	0x74726f50
   183cc:	20642520 	.word	0x20642520
   183d0:	6e6e6163 	.word	0x6e6e6163
   183d4:	6220746f 	.word	0x6220746f
   183d8:	73752065 	.word	0x73752065
   183dc:	66206465 	.word	0x66206465
   183e0:	4520726f 	.word	0x4520726f
   183e4:	72657478 	.word	0x72657478
   183e8:	206c616e 	.word	0x206c616e
   183ec:	65746e49 	.word	0x65746e49
   183f0:	70757272 	.word	0x70757272
   183f4:	202e7374 	.word	0x202e7374
   183f8:	6465654e 	.word	0x6465654e
   183fc:	206f7420 	.word	0x206f7420
   18400:	20657375 	.word	0x20657375
   18404:	4f495047 	.word	0x4f495047
   18408:	206e6f20 	.word	0x206e6f20
   1840c:	74726f50 	.word	0x74726f50
   18410:	6f203020 	.word	0x6f203020
   18414:	2e322072 	.word	0x2e322072
   18418:	6d305b1b 	.word	0x6d305b1b
   1841c:	6d305b1b 	.word	0x6d305b1b
   18420:	0000000a 	.word	0x0000000a
   18424:	33345b1b 	.word	0x33345b1b
   18428:	4157206d 	.word	0x4157206d
   1842c:	4e494e52 	.word	0x4e494e52
   18430:	305b1b47 	.word	0x305b1b47
   18434:	6d34393b 	.word	0x6d34393b
   18438:	3a73253a 	.word	0x3a73253a
   1843c:	3b305b1b 	.word	0x3b305b1b
   18440:	256d3239 	.word	0x256d3239
   18444:	5b1b3a73 	.word	0x5b1b3a73
   18448:	33393b30 	.word	0x33393b30
   1844c:	3e64256d 	.word	0x3e64256d
   18450:	305b1b20 	.word	0x305b1b20
   18454:	6d37333b 	.word	0x6d37333b
   18458:	65676445 	.word	0x65676445
   1845c:	20642520 	.word	0x20642520
   18460:	6e6e6163 	.word	0x6e6e6163
   18464:	6220746f 	.word	0x6220746f
   18468:	73752065 	.word	0x73752065
   1846c:	66206465 	.word	0x66206465
   18470:	4520726f 	.word	0x4520726f
   18474:	72657478 	.word	0x72657478
   18478:	206c616e 	.word	0x206c616e
   1847c:	65746e49 	.word	0x65746e49
   18480:	70757272 	.word	0x70757272
   18484:	4e2e7374 	.word	0x4e2e7374
   18488:	20646565 	.word	0x20646565
   1848c:	75206f74 	.word	0x75206f74
   18490:	61206573 	.word	0x61206573
   18494:	73697220 	.word	0x73697220
   18498:	2c676e69 	.word	0x2c676e69
   1849c:	6c616620 	.word	0x6c616620
   184a0:	676e696c 	.word	0x676e696c
   184a4:	726f202c 	.word	0x726f202c
   184a8:	746f6220 	.word	0x746f6220
   184ac:	6f632068 	.word	0x6f632068
   184b0:	6769666e 	.word	0x6769666e
   184b4:	74617275 	.word	0x74617275
   184b8:	2e6e6f69 	.word	0x2e6e6f69
   184bc:	6d305b1b 	.word	0x6d305b1b
   184c0:	0000000a 	.word	0x0000000a
   184c4:	31345b1b 	.word	0x31345b1b
   184c8:	4952436d 	.word	0x4952436d
   184cc:	41434954 	.word	0x41434954
   184d0:	305b1b4c 	.word	0x305b1b4c
   184d4:	6d34393b 	.word	0x6d34393b
   184d8:	3a73253a 	.word	0x3a73253a
   184dc:	3b305b1b 	.word	0x3b305b1b
   184e0:	256d3239 	.word	0x256d3239
   184e4:	5b1b3a73 	.word	0x5b1b3a73
   184e8:	33393b30 	.word	0x33393b30
   184ec:	3e64256d 	.word	0x3e64256d
   184f0:	305b1b20 	.word	0x305b1b20
   184f4:	6d37333b 	.word	0x6d37333b
   184f8:	65737341 	.word	0x65737341
   184fc:	6f697472 	.word	0x6f697472
   18500:	6146206e 	.word	0x6146206e
   18504:	72756c69 	.word	0x72756c69
   18508:	43202c65 	.word	0x43202c65
   1850c:	69646e6f 	.word	0x69646e6f
   18510:	6e6f6974 	.word	0x6e6f6974
   18514:	73655420 	.word	0x73655420
   18518:	3a646574 	.word	0x3a646574
   1851c:	65702820 	.word	0x65702820
   18520:	68706972 	.word	0x68706972
   18524:	6c617265 	.word	0x6c617265
   18528:	7669645f 	.word	0x7669645f
   1852c:	72656469 	.word	0x72656469
   18530:	203d3c20 	.word	0x203d3c20
   18534:	200a2934 	.word	0x200a2934
   18538:	20202020 	.word	0x20202020
   1853c:	20202020 	.word	0x20202020
   18540:	76694420 	.word	0x76694420
   18544:	72656469 	.word	0x72656469
   18548:	73756d20 	.word	0x73756d20
   1854c:	74276e74 	.word	0x74276e74
   18550:	63786520 	.word	0x63786520
   18554:	20646565 	.word	0x20646565
   18558:	5b1b3233 	.word	0x5b1b3233
   1855c:	5b1b6d30 	.word	0x5b1b6d30
   18560:	000a6d30 	.word	0x000a6d30
   18564:	6972500a 	.word	0x6972500a
   18568:	6e69746e 	.word	0x6e69746e
   1856c:	74532067 	.word	0x74532067
   18570:	206b6361 	.word	0x206b6361
   18574:	63617254 	.word	0x63617254
   18578:	000a3a65 	.word	0x000a3a65
   1857c:	31345b1b 	.word	0x31345b1b
   18580:	4952436d 	.word	0x4952436d
   18584:	41434954 	.word	0x41434954
   18588:	305b1b4c 	.word	0x305b1b4c
   1858c:	6d34393b 	.word	0x6d34393b
   18590:	3a73253a 	.word	0x3a73253a
   18594:	3b305b1b 	.word	0x3b305b1b
   18598:	256d3239 	.word	0x256d3239
   1859c:	5b1b3a73 	.word	0x5b1b3a73
   185a0:	33393b30 	.word	0x33393b30
   185a4:	3e64256d 	.word	0x3e64256d
   185a8:	305b1b20 	.word	0x305b1b20
   185ac:	6d37333b 	.word	0x6d37333b
   185b0:	65737341 	.word	0x65737341
   185b4:	6f697472 	.word	0x6f697472
   185b8:	6146206e 	.word	0x6146206e
   185bc:	72756c69 	.word	0x72756c69
   185c0:	43202c65 	.word	0x43202c65
   185c4:	69646e6f 	.word	0x69646e6f
   185c8:	6e6f6974 	.word	0x6e6f6974
   185cc:	73655420 	.word	0x73655420
   185d0:	3a646574 	.word	0x3a646574
   185d4:	65642820 	.word	0x65642820
   185d8:	65726973 	.word	0x65726973
   185dc:	70735f64 	.word	0x70735f64
   185e0:	5f646565 	.word	0x5f646565
   185e4:	6d5f6e69 	.word	0x6d5f6e69
   185e8:	3c207a68 	.word	0x3c207a68
   185ec:	34383320 	.word	0x34383320
   185f0:	20262620 	.word	0x20262620
   185f4:	69736564 	.word	0x69736564
   185f8:	5f646572 	.word	0x5f646572
   185fc:	65657073 	.word	0x65657073
   18600:	6e695f64 	.word	0x6e695f64
   18604:	7a686d5f 	.word	0x7a686d5f
   18608:	31203e20 	.word	0x31203e20
   1860c:	200a2932 	.word	0x200a2932
   18610:	20202020 	.word	0x20202020
   18614:	20202020 	.word	0x20202020
   18618:	65724620 	.word	0x65724620
   1861c:	6e657571 	.word	0x6e657571
   18620:	6d207963 	.word	0x6d207963
   18624:	20747375 	.word	0x20747375
   18628:	6c206562 	.word	0x6c206562
   1862c:	7265776f 	.word	0x7265776f
   18630:	61687420 	.word	0x61687420
   18634:	3833206e 	.word	0x3833206e
   18638:	484d2034 	.word	0x484d2034
   1863c:	646e617a 	.word	0x646e617a
   18640:	65726720 	.word	0x65726720
   18644:	72657461 	.word	0x72657461
   18648:	61687420 	.word	0x61687420
   1864c:	726f206e 	.word	0x726f206e
   18650:	75716520 	.word	0x75716520
   18654:	74206c61 	.word	0x74206c61
   18658:	3231206f 	.word	0x3231206f
   1865c:	7a484d20 	.word	0x7a484d20
   18660:	6d305b1b 	.word	0x6d305b1b
   18664:	6d305b1b 	.word	0x6d305b1b
   18668:	0000000a 	.word	0x0000000a
   1866c:	31345b1b 	.word	0x31345b1b
   18670:	4952436d 	.word	0x4952436d
   18674:	41434954 	.word	0x41434954
   18678:	305b1b4c 	.word	0x305b1b4c
   1867c:	6d34393b 	.word	0x6d34393b
   18680:	3a73253a 	.word	0x3a73253a
   18684:	3b305b1b 	.word	0x3b305b1b
   18688:	256d3239 	.word	0x256d3239
   1868c:	5b1b3a73 	.word	0x5b1b3a73
   18690:	33393b30 	.word	0x33393b30
   18694:	3e64256d 	.word	0x3e64256d
   18698:	305b1b20 	.word	0x305b1b20
   1869c:	6d37333b 	.word	0x6d37333b
   186a0:	65737341 	.word	0x65737341
   186a4:	6f697472 	.word	0x6f697472
   186a8:	6146206e 	.word	0x6146206e
   186ac:	72756c69 	.word	0x72756c69
   186b0:	43202c65 	.word	0x43202c65
   186b4:	69646e6f 	.word	0x69646e6f
   186b8:	6e6f6974 	.word	0x6e6f6974
   186bc:	73655420 	.word	0x73655420
   186c0:	3a646574 	.word	0x3a646574
   186c4:	69642820 	.word	0x69642820
   186c8:	65646976 	.word	0x65646976
   186cc:	61765f72 	.word	0x61765f72
   186d0:	2065756c 	.word	0x2065756c
   186d4:	2938203c 	.word	0x2938203c
   186d8:	2020200a 	.word	0x2020200a
   186dc:	20202020 	.word	0x20202020
   186e0:	50202020 	.word	0x50202020
   186e4:	64204c4c 	.word	0x64204c4c
   186e8:	64697669 	.word	0x64697669
   186ec:	76207265 	.word	0x76207265
   186f0:	65756c61 	.word	0x65756c61
   186f4:	6e657720 	.word	0x6e657720
   186f8:	756f2074 	.word	0x756f2074
   186fc:	666f2074 	.word	0x666f2074
   18700:	756f6220 	.word	0x756f6220
   18704:	1b73646e 	.word	0x1b73646e
   18708:	1b6d305b 	.word	0x1b6d305b
   1870c:	0a6d305b 	.word	0x0a6d305b
   18710:	00000000 	.word	0x00000000
   18714:	31345b1b 	.word	0x31345b1b
   18718:	4952436d 	.word	0x4952436d
   1871c:	41434954 	.word	0x41434954
   18720:	305b1b4c 	.word	0x305b1b4c
   18724:	6d34393b 	.word	0x6d34393b
   18728:	3a73253a 	.word	0x3a73253a
   1872c:	3b305b1b 	.word	0x3b305b1b
   18730:	256d3239 	.word	0x256d3239
   18734:	5b1b3a73 	.word	0x5b1b3a73
   18738:	33393b30 	.word	0x33393b30
   1873c:	3e64256d 	.word	0x3e64256d
   18740:	305b1b20 	.word	0x305b1b20
   18744:	6d37333b 	.word	0x6d37333b
   18748:	65737341 	.word	0x65737341
   1874c:	6f697472 	.word	0x6f697472
   18750:	6146206e 	.word	0x6146206e
   18754:	72756c69 	.word	0x72756c69
   18758:	43202c65 	.word	0x43202c65
   1875c:	69646e6f 	.word	0x69646e6f
   18760:	6e6f6974 	.word	0x6e6f6974
   18764:	73655420 	.word	0x73655420
   18768:	3a646574 	.word	0x3a646574
   1876c:	61662820 	.word	0x61662820
   18770:	2965736c 	.word	0x2965736c
   18774:	2020200a 	.word	0x2020200a
   18778:	20202020 	.word	0x20202020
   1877c:	50202020 	.word	0x50202020
   18780:	6c204c4c 	.word	0x6c204c4c
   18784:	206b636f 	.word	0x206b636f
   18788:	6c756f63 	.word	0x6c756f63
   1878c:	6f6e2064 	.word	0x6f6e2064
   18790:	65622074 	.word	0x65622074
   18794:	74736520 	.word	0x74736520
   18798:	696c6261 	.word	0x696c6261
   1879c:	64656873 	.word	0x64656873
   187a0:	66656220 	.word	0x66656220
   187a4:	2065726f 	.word	0x2065726f
   187a8:	656d6974 	.word	0x656d6974
   187ac:	1b74756f 	.word	0x1b74756f
   187b0:	1b6d305b 	.word	0x1b6d305b
   187b4:	0a6d305b 	.word	0x0a6d305b
   187b8:	00000000 	.word	0x00000000
   187bc:	31345b1b 	.word	0x31345b1b
   187c0:	4952436d 	.word	0x4952436d
   187c4:	41434954 	.word	0x41434954
   187c8:	305b1b4c 	.word	0x305b1b4c
   187cc:	6d34393b 	.word	0x6d34393b
   187d0:	3a73253a 	.word	0x3a73253a
   187d4:	3b305b1b 	.word	0x3b305b1b
   187d8:	256d3239 	.word	0x256d3239
   187dc:	5b1b3a73 	.word	0x5b1b3a73
   187e0:	33393b30 	.word	0x33393b30
   187e4:	3e64256d 	.word	0x3e64256d
   187e8:	305b1b20 	.word	0x305b1b20
   187ec:	6d37333b 	.word	0x6d37333b
   187f0:	65737341 	.word	0x65737341
   187f4:	6f697472 	.word	0x6f697472
   187f8:	6146206e 	.word	0x6146206e
   187fc:	72756c69 	.word	0x72756c69
   18800:	43202c65 	.word	0x43202c65
   18804:	69646e6f 	.word	0x69646e6f
   18808:	6e6f6974 	.word	0x6e6f6974
   1880c:	73655420 	.word	0x73655420
   18810:	3a646574 	.word	0x3a646574
   18814:	70632820 	.word	0x70632820
   18818:	69645f75 	.word	0x69645f75
   1881c:	65646976 	.word	0x65646976
   18820:	203c2072 	.word	0x203c2072
   18824:	0a293233 	.word	0x0a293233
   18828:	20202020 	.word	0x20202020
   1882c:	20202020 	.word	0x20202020
   18830:	69442020 	.word	0x69442020
   18834:	65646976 	.word	0x65646976
   18838:	756d2072 	.word	0x756d2072
   1883c:	276e7473 	.word	0x276e7473
   18840:	78652074 	.word	0x78652074
   18844:	64656563 	.word	0x64656563
   18848:	1b323320 	.word	0x1b323320
   1884c:	1b6d305b 	.word	0x1b6d305b
   18850:	0a6d305b 	.word	0x0a6d305b
   18854:	00000000 	.word	0x00000000
   18858:	32345b1b 	.word	0x32345b1b
   1885c:	2020206d 	.word	0x2020206d
   18860:	464e4920 	.word	0x464e4920
   18864:	305b1b4f 	.word	0x305b1b4f
   18868:	6d34393b 	.word	0x6d34393b
   1886c:	3a73253a 	.word	0x3a73253a
   18870:	3b305b1b 	.word	0x3b305b1b
   18874:	256d3239 	.word	0x256d3239
   18878:	5b1b3a73 	.word	0x5b1b3a73
   1887c:	33393b30 	.word	0x33393b30
   18880:	3e64256d 	.word	0x3e64256d
   18884:	305b1b20 	.word	0x305b1b20
   18888:	6d37333b 	.word	0x6d37333b
   1888c:	504f5453 	.word	0x504f5453
   18890:	6d305b1b 	.word	0x6d305b1b
   18894:	0000000a 	.word	0x0000000a
   18898:	75746552 	.word	0x75746552
   1889c:	64656e72 	.word	0x64656e72
   188a0:	74616420 	.word	0x74616420
   188a4:	25203a61 	.word	0x25203a61
   188a8:	78252078 	.word	0x78252078
   188ac:	20782520 	.word	0x20782520
   188b0:	000a7825 	.word	0x000a7825
   188b4:	32345b1b 	.word	0x32345b1b
   188b8:	2020206d 	.word	0x2020206d
   188bc:	464e4920 	.word	0x464e4920
   188c0:	305b1b4f 	.word	0x305b1b4f
   188c4:	6d34393b 	.word	0x6d34393b
   188c8:	3a73253a 	.word	0x3a73253a
   188cc:	3b305b1b 	.word	0x3b305b1b
   188d0:	256d3239 	.word	0x256d3239
   188d4:	5b1b3a73 	.word	0x5b1b3a73
   188d8:	33393b30 	.word	0x33393b30
   188dc:	3e64256d 	.word	0x3e64256d
   188e0:	305b1b20 	.word	0x305b1b20
   188e4:	6d37333b 	.word	0x6d37333b
   188e8:	72617453 	.word	0x72617453
   188ec:	5b1b0a74 	.word	0x5b1b0a74
   188f0:	000a6d30 	.word	0x000a6d30

000188f4 <Gpio::ValidPortCheck()::file>:
   188f4:	6f697067 7070682e ffffff00              gpio.hpp....

00018900 <Gpio::SetInterruptEdge(GpioInterface::Edge)::file>:
   18900:	6f697067 7070682e ffffff00              gpio.hpp....

0001890c <Gpio::ClearInterruptEdge(GpioInterface::Edge)::file>:
   1890c:	6f697067 7070682e ffffff00              gpio.hpp....

00018918 <Lpc40xxSystemController::SetPeripheralClockDivider(unsigned char)::file>:
   18918:	74737973 635f6d65 72746e6f 656c6c6f     system_controlle
   18928:	70682e72 ffff0070                       r.hpp...

00018930 <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)::file>:
   18930:	74737973 635f6d65 72746e6f 656c6c6f     system_controlle
   18940:	70682e72 ffff0070                       r.hpp...

00018948 <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)::file>:
   18948:	74737973 635f6d65 72746e6f 656c6c6f     system_controlle
   18958:	70682e72 ffff0070                       r.hpp...

00018960 <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)::file>:
   18960:	74737973 635f6d65 72746e6f 656c6c6f     system_controlle
   18970:	70682e72 ffff0070                       r.hpp...

00018978 <Lpc40xxSystemController::SetCpuClockDivider(unsigned char)::file>:
   18978:	74737973 635f6d65 72746e6f 656c6c6f     system_controlle
   18988:	70682e72 ffff0070                       r.hpp...

00018990 <Ssp::kPinSelect>:
   18990:	ff040202                                ....

00018994 <Ssp::kSspPinMatrix>:
   18994:	00018ba0 00001200 00018ba0 00001100     ................
   189a4:	00018ba0 00000f00 00018ba0 00000900     ................
   189b4:	00018ba0 00000800 00018ba0 00000700     ................
   189c4:	00018ba0 00000101 00018ba0 00000401     ................
   189d4:	00018ba0 00000001                       ........

000189dc <Ssp::kPowerBit>:
   189dc:	00000015 0000000a 00000014              ............

000189e8 <main::file>:
   189e8:	6e69616d 7070632e ffffff00              main.cpp....

000189f4 <vtable for Ssd1306>:
	...
   189fc:	00013219 00013245 00013271 00013459     .2..E2..q2..Y4..
   18a0c:	000130d9 00013101 00013531 00013569     .0...1..15..i5..
   18a1c:	000135fd                                .5..

00018a20 <vtable for PixelDisplayInterface>:
	...
   18a28:	00017d19 00017d19 00017d19 00017d19     .}...}...}...}..
   18a38:	000130d9 00013101 00017d19 00017d19     .0...1...}...}..
   18a48:	00013129                                )1..

00018a4c <vtable for Ssp>:
	...
   18a54:	0001264d 00012731 000127a9 00012815     M&..1'...'...(..
   18a64:	00012901 00012b0d 00012c6d 00012e59     .)...+..m,..Y...
   18a74:	fffffffc 00000000 00011eed 00011f7d     ............}...
   18a84:	00011fd5 00011fed 00012001 00012041     ......... ..A ..
   18a94:	00012071                                q ..

00018a98 <vtable for SspInterface>:
	...
   18aa0:	00017d19 00017d19 00017d19 00017d19     .}...}...}...}..
   18ab0:	00017d19 00017d19 00017d19 00017d19     .}...}...}...}..

00018ac0 <vtable for Lpc40xxSystemController>:
	...
   18ac8:	00011eed 00011f7d 00011fd5 00011fed     ....}...........
   18ad8:	00012001 00012041 00012071              . ..A ..q ..

00018ae4 <vtable for SystemControllerInterface>:
	...
   18aec:	00017d19 00017d19 00017d19 00017d19     .}...}...}...}..
   18afc:	00017d19 00017d19 00017d19              .}...}...}..

00018b08 <vtable for Gpio>:
	...
   18b10:	00011605 00011681 000116fd 00011741     ............A...
   18b20:	000117a5 00011809 0001184d 000118b9     ........M.......
   18b30:	00011931 000119a1 00011c39 00011c81     1.......9.......
   18b40:	00011a49 00011aa5 00011b29 00011bb1     I.......).......

00018b50 <vtable for GpioInterface>:
	...
   18b58:	00017d19 00017d19 00017d19 00017d19     .}...}...}...}..
   18b68:	00017d19 00017d19 00017d19 00017d19     .}...}...}...}..
   18b78:	00017d19 00017d19 00017d19 00017d19     .}...}...}...}..
   18b88:	00017d19 00017d19 00017d19 00017d19     .}...}...}...}..

00018b98 <vtable for Pin>:
	...
   18ba0:	00010f75 00010fed 0001106d 000110e1     u.......m.......
   18bb0:	00011155 000111d1 0001124d 000112c1     U.......M.......
   18bc0:	0001133d 000113b1 00011425 000114fd     =.......%.......
   18bd0:	00011529                                )...

00018bd4 <vtable for PinInterface>:
	...
   18bdc:	00017d19 00017d19 00017d19 00017d19     .}...}...}...}..
   18bec:	00017d19 00017d19 00017d19 00017d19     .}...}...}...}..
   18bfc:	00017d19 00017d19 00017d19 00017d19     .}...}...}...}..
   18c0c:	00017d19                                .}..

00018c10 <main::__PRETTY_FUNCTION__>:
   18c10:	20746e69 6e69616d ff002928              int main()..

00018c1c <Lpc40xxSystemController::SetPeripheralClockDivider(unsigned char)::__PRETTY_FUNCTION__>:
   18c1c:	74726976 206c6175 64696f76 63704c20     virtual void Lpc
   18c2c:	78783034 74737953 6f436d65 6f72746e     40xxSystemContro
   18c3c:	72656c6c 65533a3a 72655074 65687069     ller::SetPeriphe
   18c4c:	436c6172 6b636f6c 69766944 28726564     ralClockDivider(
   18c5c:	746e6975 29745f38 ffffff00              uint8_t)....

00018c68 <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)::__PRETTY_FUNCTION__>:
   18c68:	746e6975 745f3233 63704c20 78783034     uint32_t Lpc40xx
   18c78:	74737953 6f436d65 6f72746e 72656c6c     SystemController
   18c88:	65533a3a 69614d74 6c6c506e 63704c28     ::SetMainPll(Lpc
   18c98:	78783034 74737953 6f436d65 6f72746e     40xxSystemContro
   18ca8:	72656c6c 6c503a3a 706e496c 202c7475     ller::PllInput, 
   18cb8:	746e6975 745f3631 ffff0029              uint16_t)...

00018cc4 <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)::__PRETTY_FUNCTION__>:
   18cc4:	746e6975 745f3233 63704c20 78783034     uint32_t Lpc40xx
   18cd4:	74737953 6f436d65 6f72746e 72656c6c     SystemController
   18ce4:	61433a3a 6c75636c 50657461 4c286c6c     ::CalculatePll(L
   18cf4:	30346370 79537878 6d657473 746e6f43     pc40xxSystemCont
   18d04:	6c6c6f72 3a3a7265 496c6c50 7475706e     roller::PllInput
   18d14:	6975202c 3631746e 0029745f              , uint16_t).

00018d20 <Lpc40xxSystemController::SetCpuClockDivider(unsigned char)::__PRETTY_FUNCTION__>:
   18d20:	64696f76 63704c20 78783034 74737953     void Lpc40xxSyst
   18d30:	6f436d65 6f72746e 72656c6c 65533a3a     emController::Se
   18d40:	75704374 636f6c43 7669446b 72656469     tCpuClockDivider
   18d50:	6e697528 745f3874 ffff0029              (uint8_t)...

00018d5c <Gpio::ClearInterruptEdge(GpioInterface::Edge)::__PRETTY_FUNCTION__>:
   18d5c:	74726976 206c6175 64696f76 69704720     virtual void Gpi
   18d6c:	433a3a6f 7261656c 65746e49 70757272     o::ClearInterrup
   18d7c:	67644574 70472865 6e496f69 66726574     tEdge(GpioInterf
   18d8c:	3a656361 6764453a ff002965              ace::Edge)..

00018d98 <Gpio::ValidPortCheck()::__PRETTY_FUNCTION__>:
   18d98:	6c6f6f62 69704720 563a3a6f 64696c61     bool Gpio::Valid
   18da8:	74726f50 63656843 0029286b              PortCheck().

00018db4 <Gpio::SetInterruptEdge(GpioInterface::Edge)::__PRETTY_FUNCTION__>:
   18db4:	74726976 206c6175 64696f76 69704720     virtual void Gpi
   18dc4:	533a3a6f 6e497465 72726574 45747075     o::SetInterruptE
   18dd4:	28656764 6f697047 65746e49 63616672     dge(GpioInterfac
   18de4:	453a3a65 29656764 ffffff00 20746f4e     e::Edge)....Not 
   18df4:	53532061 4c432050 6f70204b 00007472     a SSP CLK port..
   18e04:	20746f4e 494d2061 70204f53 0074726f     Not a MISO port.
   18e14:	20746f4e 4f4d2061 70204953 0074726f     Not a MOSI port.
   18e24:	63617453 6544206b 20687470 7a25203d     Stack Depth = %z
   18e34:	00000a64 25232020 203a757a 70257830     d...  #%zu: 0x%p
   18e44:	0000000a 6e75520a 6874203a 6f662065     .....Run: the fo
   18e54:	776f6c6c 20676e69 6d6d6f63 20646e61     llowing command 
   18e64:	79206e69 2072756f 6a6f7270 20746365     in your project 
   18e74:	65726964 726f7463 00000079 1b20200a     directory....  .
   18e84:	333b315b 616d6d37 7320656b 6b636174     [1;37mmake stack
   18e94:	63617274 73252d65 41525420 3d534543     trace-%s TRACES=
   18ea4:	00000022 70257830 00000000 25783020     "...0x%p.... 0x%
   18eb4:	00000070 5b1b0a22 00006d30 73696854     p..."..[0m..This
   18ec4:	6c697720 6572206c 74726f70 65687420      will report the
   18ed4:	6c696620 6e612065 696c2064 6e20656e      file and line n
   18ee4:	65626d75 68742072 6c207461 74206465     umber that led t
   18ef4:	6874206f 66207369 74636e75 206e6f69     o this function 
   18f04:	6e696562 61632067 64656c6c 0000002e     being called....
   18f14:	6c707061 74616369 006e6f69 31345b1b     application..[41
   18f24:	4952436d 41434954 305b1b4c 6d34393b     mCRITICAL.[0;94m
   18f34:	3a73253a 3b305b1b 256d3239 5b1b3a73     :%s:.[0;92m%s:.[
   18f44:	33393b30 3e64256d 305b1b20 6d37333b     0;93m%d> .[0;37m
   18f54:	65737341 6f697472 6146206e 72756c69     Assertion Failur
   18f64:	43202c65 69646e6f 6e6f6974 73655420     e, Condition Tes
   18f74:	3a646574 65702820 68706972 6c617265     ted: (peripheral
   18f84:	7669645f 72656469 203d3c20 200a2934     _divider <= 4). 
   18f94:	20202020 20202020 76694420 72656469              Divider
   18fa4:	73756d20 74276e74 63786520 20646565      mustn't exceed 
   18fb4:	5b1b3233 5b1b6d30 000a6d30 6972500a     32.[0m.[0m...Pri
   18fc4:	6e69746e 74532067 206b6361 63617254     nting Stack Trac
   18fd4:	000a3a65 31345b1b 4952436d 41434954     e:...[41mCRITICA
   18fe4:	305b1b4c 6d34393b 3a73253a 3b305b1b     L.[0;94m:%s:.[0;
   18ff4:	256d3239 5b1b3a73 33393b30 3e64256d     92m%s:.[0;93m%d>
   19004:	305b1b20 6d37333b 65737341 6f697472      .[0;37mAssertio
   19014:	6146206e 72756c69 43202c65 69646e6f     n Failure, Condi
   19024:	6e6f6974 73655420 3a646574 65642820     tion Tested: (de
   19034:	65726973 70735f64 5f646565 6d5f6e69     sired_speed_in_m
   19044:	3c207a68 34383320 20262620 69736564     hz < 384 && desi
   19054:	5f646572 65657073 6e695f64 7a686d5f     red_speed_in_mhz
   19064:	31203e20 200a2932 20202020 20202020      > 12).         
   19074:	65724620 6e657571 6d207963 20747375      Frequency must 
   19084:	6c206562 7265776f 61687420 3833206e     be lower than 38
   19094:	484d2034 646e617a 65726720 72657461     4 MHzand greater
   190a4:	61687420 726f206e 75716520 74206c61      than or equal t
   190b4:	3231206f 7a484d20 6d305b1b 6d305b1b     o 12 MHz.[0m.[0m
   190c4:	0000000a 31345b1b 4952436d 41434954     .....[41mCRITICA
   190d4:	305b1b4c 6d34393b 3a73253a 3b305b1b     L.[0;94m:%s:.[0;
   190e4:	256d3239 5b1b3a73 33393b30 3e64256d     92m%s:.[0;93m%d>
   190f4:	305b1b20 6d37333b 65737341 6f697472      .[0;37mAssertio
   19104:	6146206e 72756c69 43202c65 69646e6f     n Failure, Condi
   19114:	6e6f6974 73655420 3a646574 69642820     tion Tested: (di
   19124:	65646976 61765f72 2065756c 2938203c     vider_value < 8)
   19134:	2020200a 20202020 50202020 64204c4c     .          PLL d
   19144:	64697669 76207265 65756c61 6e657720     ivider value wen
   19154:	756f2074 666f2074 756f6220 1b73646e     t out of bounds.
   19164:	1b6d305b 0a6d305b 00000000 31345b1b     [0m.[0m......[41
   19174:	4952436d 41434954 305b1b4c 6d34393b     mCRITICAL.[0;94m
   19184:	3a73253a 3b305b1b 256d3239 5b1b3a73     :%s:.[0;92m%s:.[
   19194:	33393b30 3e64256d 305b1b20 6d37333b     0;93m%d> .[0;37m
   191a4:	65737341 6f697472 6146206e 72756c69     Assertion Failur
   191b4:	43202c65 69646e6f 6e6f6974 73655420     e, Condition Tes
   191c4:	3a646574 61662820 2965736c 2020200a     ted: (false).   
   191d4:	20202020 50202020 6c204c4c 206b636f            PLL lock 
   191e4:	6c756f63 6f6e2064 65622074 74736520     could not be est
   191f4:	696c6261 64656873 66656220 2065726f     ablished before 
   19204:	656d6974 1b74756f 1b6d305b 0a6d305b     timeout.[0m.[0m.
   19214:	00000000 31345b1b 4952436d 41434954     .....[41mCRITICA
   19224:	305b1b4c 6d34393b 3a73253a 3b305b1b     L.[0;94m:%s:.[0;
   19234:	256d3239 5b1b3a73 33393b30 3e64256d     92m%s:.[0;93m%d>
   19244:	305b1b20 6d37333b 65737341 6f697472      .[0;37mAssertio
   19254:	6146206e 72756c69 43202c65 69646e6f     n Failure, Condi
   19264:	6e6f6974 73655420 3a646574 70632820     tion Tested: (cp
   19274:	69645f75 65646976 203c2072 0a293233     u_divider < 32).
   19284:	20202020 20202020 69442020 65646976               Divide
   19294:	756d2072 276e7473 78652074 64656563     r mustn't exceed
   192a4:	1b323320 1b6d305b 0a6d305b 00000000      32.[0m.[0m.....
   192b4:	31345b1b 4952436d 41434954 305b1b4c     .[41mCRITICAL.[0
   192c4:	6d34393b 3a73253a 3b305b1b 256d3239     ;94m:%s:.[0;92m%
   192d4:	5b1b3a73 33393b30 3e64256d 305b1b20     s:.[0;93m%d> .[0
   192e4:	6d37333b 65737341 6f697472 6146206e     ;37mAssertion Fa
   192f4:	72756c69 43202c65 69646e6f 6e6f6974     ilure, Condition
   19304:	73655420 3a646574 72662820 65757165      Tested: (freque
   19314:	2079636e 30203d21 20200a29 20202020     ncy != 0).      
   19324:	20202020 6e6e6143 6820746f 20657661         Cannot have 
   19334:	6f72657a 63697420 7020736b 6d207265     zero ticks per m
   19344:	6f726369 6f636573 202c646e 61656c70     icrosecond, plea
   19354:	63206573 736f6f68 20312065 6d20726f     se choose 1 or m
   19364:	2e65726f 6d305b1b 6d305b1b 0000000a     ore..[0m.[0m....
   19374:	33345b1b 4157206d 4e494e52 305b1b47     .[43m WARNING.[0
   19384:	6d34393b 3a73253a 3b305b1b 256d3239     ;94m:%s:.[0;92m%
   19394:	5b1b3a73 33393b30 3e64256d 305b1b20     s:.[0;93m%d> .[0
   193a4:	6d37333b 74737953 54206d65 72656d69     ;37mSystem Timer
   193b4:	73616820 49414620 2044454c 73206f74      has FAILED to s
   193c4:	74726174 305b1b21 305b1b6d ff000a6d     tart!.[0m.[0m...

000193d4 <Timer::kPowerbit>:
   193d4:	00000001 00000002 00000016 00000017     ................

000193e4 <Timer::kTimerIrq>:
   193e4:	04030201                                ....

000193e8 <Timer::kTimerIsr>:
   193e8:	00014be9 00014c25 00014c61 00014c9d     .K..%L..aL...L..

000193f8 <Timer::Initialize(unsigned long, void (*)(), long)::file>:
   193f8:	656d6974 70682e72 ffff0070              timer.hpp...

00019404 <Uart::kTxUartPortFunction>:
   19404:	05020201                                ....

00019408 <Uart::kRxUartPortFunction>:
   19408:	03020201                                ....

0001940c <Uart::kPowerbit>:
   1940c:	00000003 00000018 00000019 00000008     ................

0001941c <LowLevelInit()::file>:
   1941c:	72617473 2e707574 00707063              startup.cpp.

00019428 <vtable for Uart>:
	...
   19430:	000141e1 000142ad 000143dd 00014511     .A...B...C...E..
   19440:	fffffffc 00000000 00011eed 00011f7d     ............}...
   19450:	00011fd5 00011fed 00012001 00012041     ......... ..A ..
   19460:	00012071                                q ..

00019464 <vtable for Timer>:
	...
   1946c:	00013f49 000140ad 000141a5 fffffffc     I?...@...A......
   1947c:	00000000 00011eed 00011f7d 00011fd5     ........}.......
   1948c:	00011fed 00012001 00012041 00012071     ..... ..A ..q ..

0001949c <vtable for SystemTimer>:
	...
   194a4:	00013d95 00013dc9 00013e65 fffffffc     .=...=..e>......
   194b4:	00000000 00011eed 00011f7d 00011fd5     ........}.......
   194c4:	00011fed 00012001 00012041 00012071     ..... ..A ..q ..

000194d4 <Timer::Initialize(unsigned long, void (*)(), long)::__PRETTY_FUNCTION__>:
   194d4:	74726976 206c6175 64696f76 6d695420     virtual void Tim
   194e4:	3a3a7265 74696e49 696c6169 7528657a     er::Initialize(u
   194f4:	33746e69 2c745f32 72734920 6e696f50     int32_t, IsrPoin
   19504:	2c726574 746e6920 745f3233 ffff0029     ter, int32_t)...

00019514 <LowLevelInit()::__PRETTY_FUNCTION__>:
   19514:	64696f76 776f4c20 6576654c 696e496c     void LowLevelIni
   19524:	00292874 63617453 6544206b 20687470     t().Stack Depth 
   19534:	7a25203d 00000a64 25232020 203a757a     = %zd...  #%zu: 
   19544:	70257830 0000000a 6e75520a 6874203a     0x%p.....Run: th
   19554:	6f662065 776f6c6c 20676e69 6d6d6f63     e following comm
   19564:	20646e61 79206e69 2072756f 6a6f7270     and in your proj
   19574:	20746365 65726964 726f7463 00000079     ect directory...
   19584:	1b20200a 333b315b 616d6d37 7320656b     .  .[1;37mmake s
   19594:	6b636174 63617274 73252d65 41525420     tacktrace-%s TRA
   195a4:	3d534543 00000022 70257830 00000000     CES="...0x%p....
   195b4:	25783020 00000070 5b1b0a22 00006d30      0x%p..."..[0m..
   195c4:	73696854 6c697720 6572206c 74726f70     This will report
   195d4:	65687420 6c696620 6e612065 696c2064      the file and li
   195e4:	6e20656e 65626d75 68742072 6c207461     ne number that l
   195f4:	74206465 6874206f 66207369 74636e75     ed to this funct
   19604:	206e6f69 6e696562 61632067 64656c6c     ion being called
   19614:	0000002e 6c707061 74616369 006e6f69     ....application.
   19624:	31345b1b 4952436d 41434954 305b1b4c     .[41mCRITICAL.[0
   19634:	6d34393b 3a73253a 3b305b1b 256d3239     ;94m:%s:.[0;92m%
   19644:	5b1b3a73 33393b30 3e64256d 305b1b20     s:.[0;93m%d> .[0
   19654:	6d37333b 65737341 6f697472 6146206e     ;37mAssertion Fa
   19664:	72756c69 43202c65 69646e6f 6e6f6974     ilure, Condition
   19674:	73655420 3a646574 73692820 3d212072      Tested: (isr !=
   19684:	746e4920 75727265 6f4c7470 70756b6f      InterruptLookup
   19694:	646e6148 2972656c 2020200a 20202020     Handler).       
   196a4:	4e202020 5349206f 6f662052 20646e75        No ISR found 
   196b4:	20726f66 20656874 74636576 2520726f     for the vector %
   196c4:	305b1b75 305b1b6d 00000a6d 6972500a     u.[0m.[0m....Pri
   196d4:	6e69746e 74532067 206b6361 63617254     nting Stack Trac
   196e4:	000a3a65 31345b1b 7261486d 61462064     e:...[41mHard Fa
   196f4:	20746c75 65637845 6f697470 634f206e     ult Exception Oc
   19704:	72727563 0a216465 6d305b1b 00000000     curred!..[0m....
   19714:	203a3072 30257830 2c586c38 3a317220     r0: 0x%08lX, r1:
   19724:	25783020 586c3830 3272202c 7830203a      0x%08lX, r2: 0x
   19734:	6c383025 72202c58 30203a33 38302578     %08lX, r3: 0x%08
   19744:	000a586c 3a323172 25783020 586c3830     lX..r12: 0x%08lX
   19754:	726c202c 7830203a 6c383025 70202c58     , lr: 0x%08lX, p
   19764:	30203a63 38302578 202c586c 3a727370     c: 0x%08lX, psr:
   19774:	25783020 586c3830 ffff000a               0x%08lX....

00019780 <InterruptLookupHandler::file>:
   19780:	65746e69 70757272 70632e74 ffff0070     interrupt.cpp...

00019790 <InterruptLookupHandler::__PRETTY_FUNCTION__>:
   19790:	64696f76 746e4920 75727265 6f4c7470     void InterruptLo
   197a0:	70756b6f 646e6148 2872656c ffff0029     okupHandler()...

000197b0 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)::pow10>:
   197b0:	3f800000 41200000 42c80000 447a0000     ...?.. A...B..zD
   197c0:	461c4000 47c35000 49742400 4b189680     .@.F.P.G.$tI...K
   197d0:	4cbebc20 4e6e6b28 63617453 6544206b      ..L(knNStack De
   197e0:	20687470 7a25203d 00000a64 25232020     pth = %zd...  #%
   197f0:	203a757a 70257830 0000000a 6e75520a     zu: 0x%p.....Run
   19800:	6874203a 6f662065 776f6c6c 20676e69     : the following 
   19810:	6d6d6f63 20646e61 79206e69 2072756f     command in your 
   19820:	6a6f7270 20746365 65726964 726f7463     project director
   19830:	00000079 1b20200a 333b315b 616d6d37     y....  .[1;37mma
   19840:	7320656b 6b636174 63617274 73252d65     ke stacktrace-%s
   19850:	41525420 3d534543 00000022 70257830      TRACES="...0x%p
   19860:	00000000 25783020 00000070 5b1b0a22     .... 0x%p..."..[
   19870:	00006d30 73696854 6c697720 6572206c     0m..This will re
   19880:	74726f70 65687420 6c696620 6e612065     port the file an
   19890:	696c2064 6e20656e 65626d75 68742072     d line number th
   198a0:	6c207461 74206465 6874206f 66207369     at led to this f
   198b0:	74636e75 206e6f69 6e696562 61632067     unction being ca
   198c0:	64656c6c 0000002e 6c707061 74616369     lled....applicat
   198d0:	006e6f69 33345b1b 4157206d 4e494e52     ion..[43m WARNIN
   198e0:	305b1b47 6d34393b 3a73253a 3b305b1b     G.[0;94m:%s:.[0;
   198f0:	256d3239 5b1b3a73 33393b30 3e64256d     92m%s:.[0;93m%d>
   19900:	305b1b20 6d37333b 74726f50 20642520      .[0;37mPort %d 
   19910:	6e6e6163 6220746f 73752065 66206465     cannot be used f
   19920:	4520726f 72657478 206c616e 65746e49     or External Inte
   19930:	70757272 202e7374 6465654e 206f7420     rrupts. Need to 
   19940:	20657375 4f495047 206e6f20 74726f50     use GPIO on Port
   19950:	6f203020 2e322072 6d305b1b 6d305b1b      0 or 2..[0m.[0m
   19960:	0000000a 33345b1b 4157206d 4e494e52     .....[43m WARNIN
   19970:	305b1b47 6d34393b 3a73253a 3b305b1b     G.[0;94m:%s:.[0;
   19980:	256d3239 5b1b3a73 33393b30 3e64256d     92m%s:.[0;93m%d>
   19990:	305b1b20 6d37333b 65676445 20642520      .[0;37mEdge %d 
   199a0:	6e6e6163 6220746f 73752065 66206465     cannot be used f
   199b0:	4520726f 72657478 206c616e 65746e49     or External Inte
   199c0:	70757272 4e2e7374 20646565 75206f74     rrupts.Need to u
   199d0:	61206573 73697220 2c676e69 6c616620     se a rising, fal
   199e0:	676e696c 726f202c 746f6220 6f632068     ling, or both co
   199f0:	6769666e 74617275 2e6e6f69 6d305b1b     nfiguration..[0m
   19a00:	0000000a 31345b1b 4952436d 41434954     .....[41mCRITICA
   19a10:	305b1b4c 6d34393b 3a73253a 3b305b1b     L.[0;94m:%s:.[0;
   19a20:	256d3239 5b1b3a73 33393b30 3e64256d     92m%s:.[0;93m%d>
   19a30:	305b1b20 6d37333b 65737341 6f697472      .[0;37mAssertio
   19a40:	6146206e 72756c69 43202c65 69646e6f     n Failure, Condi
   19a50:	6e6f6974 73655420 3a646574 65702820     tion Tested: (pe
   19a60:	68706972 6c617265 7669645f 72656469     ripheral_divider
   19a70:	203d3c20 200a2934 20202020 20202020      <= 4).         
   19a80:	76694420 72656469 73756d20 74276e74      Divider mustn't
   19a90:	63786520 20646565 5b1b3233 5b1b6d30      exceed 32.[0m.[
   19aa0:	000a6d30 6972500a 6e69746e 74532067     0m...Printing St
   19ab0:	206b6361 63617254 000a3a65 31345b1b     ack Trace:...[41
   19ac0:	4952436d 41434954 305b1b4c 6d34393b     mCRITICAL.[0;94m
   19ad0:	3a73253a 3b305b1b 256d3239 5b1b3a73     :%s:.[0;92m%s:.[
   19ae0:	33393b30 3e64256d 305b1b20 6d37333b     0;93m%d> .[0;37m
   19af0:	65737341 6f697472 6146206e 72756c69     Assertion Failur
   19b00:	43202c65 69646e6f 6e6f6974 73655420     e, Condition Tes
   19b10:	3a646574 65642820 65726973 70735f64     ted: (desired_sp
   19b20:	5f646565 6d5f6e69 3c207a68 34383320     eed_in_mhz < 384
   19b30:	20262620 69736564 5f646572 65657073      && desired_spee
   19b40:	6e695f64 7a686d5f 31203e20 200a2932     d_in_mhz > 12). 
   19b50:	20202020 20202020 65724620 6e657571              Frequen
   19b60:	6d207963 20747375 6c206562 7265776f     cy must be lower
   19b70:	61687420 3833206e 484d2034 646e617a      than 384 MHzand
   19b80:	65726720 72657461 61687420 726f206e      greater than or
   19b90:	75716520 74206c61 3231206f 7a484d20      equal to 12 MHz
   19ba0:	6d305b1b 6d305b1b 0000000a 31345b1b     .[0m.[0m.....[41
   19bb0:	4952436d 41434954 305b1b4c 6d34393b     mCRITICAL.[0;94m
   19bc0:	3a73253a 3b305b1b 256d3239 5b1b3a73     :%s:.[0;92m%s:.[
   19bd0:	33393b30 3e64256d 305b1b20 6d37333b     0;93m%d> .[0;37m
   19be0:	65737341 6f697472 6146206e 72756c69     Assertion Failur
   19bf0:	43202c65 69646e6f 6e6f6974 73655420     e, Condition Tes
   19c00:	3a646574 69642820 65646976 61765f72     ted: (divider_va
   19c10:	2065756c 2938203c 2020200a 20202020     lue < 8).       
   19c20:	50202020 64204c4c 64697669 76207265        PLL divider v
   19c30:	65756c61 6e657720 756f2074 666f2074     alue went out of
   19c40:	756f6220 1b73646e 1b6d305b 0a6d305b      bounds.[0m.[0m.
   19c50:	00000000 31345b1b 4952436d 41434954     .....[41mCRITICA
   19c60:	305b1b4c 6d34393b 3a73253a 3b305b1b     L.[0;94m:%s:.[0;
   19c70:	256d3239 5b1b3a73 33393b30 3e64256d     92m%s:.[0;93m%d>
   19c80:	305b1b20 6d37333b 65737341 6f697472      .[0;37mAssertio
   19c90:	6146206e 72756c69 43202c65 69646e6f     n Failure, Condi
   19ca0:	6e6f6974 73655420 3a646574 61662820     tion Tested: (fa
   19cb0:	2965736c 2020200a 20202020 50202020     lse).          P
   19cc0:	6c204c4c 206b636f 6c756f63 6f6e2064     LL lock could no
   19cd0:	65622074 74736520 696c6261 64656873     t be established
   19ce0:	66656220 2065726f 656d6974 1b74756f      before timeout.
   19cf0:	1b6d305b 0a6d305b 00000000 31345b1b     [0m.[0m......[41
   19d00:	4952436d 41434954 305b1b4c 6d34393b     mCRITICAL.[0;94m
   19d10:	3a73253a 3b305b1b 256d3239 5b1b3a73     :%s:.[0;92m%s:.[
   19d20:	33393b30 3e64256d 305b1b20 6d37333b     0;93m%d> .[0;37m
   19d30:	65737341 6f697472 6146206e 72756c69     Assertion Failur
   19d40:	43202c65 69646e6f 6e6f6974 73655420     e, Condition Tes
   19d50:	3a646574 70632820 69645f75 65646976     ted: (cpu_divide
   19d60:	203c2072 0a293233 20202020 20202020     r < 32).        
   19d70:	69442020 65646976 756d2072 276e7473       Divider mustn'
   19d80:	78652074 64656563 1b323320 1b6d305b     t exceed 32.[0m.
   19d90:	0a6d305b 00000000 35345b1b 2020206d     [0m......[45m   
   19da0:	4f525245 305b1b52 6d34393b 3a73253a     ERROR.[0;94m:%s:
   19db0:	3b305b1b 256d3239 5b1b3a73 33393b30     .[0;92m%s:.[0;93
   19dc0:	3e64256d 305b1b20 6d37333b 6c696146     m%d> .[0;37mFail
   19dd0:	74206465 6e69206f 61697469 53206574     ed to initiate S
   19de0:	6d204950 2065646f 68746977 74206e69     PI mode within t
   19df0:	6f656d69 202e7475 726f6241 676e6974     imeout. Aborting
   19e00:	305b1b21 00000a6d 35345b1b 2020206d     !.[0m....[45m   
   19e10:	4f525245 305b1b52 6d34393b 3a73253a     ERROR.[0;94m:%s:
   19e20:	3b305b1b 256d3239 5b1b3a73 33393b30     .[0;92m%s:.[0;93
   19e30:	3e64256d 305b1b20 6d37333b 70736552     m%d> .[0;37mResp
   19e40:	65736e6f 746e6920 69726765 63207974     onse integrity c
   19e50:	6b636568 69616620 2e64656c 6f624120     heck failed. Abo
   19e60:	6e697472 5b1b2167 000a6d30 35345b1b     rting!.[0m...[45
   19e70:	2020206d 4f525245 305b1b52 6d34393b     m   ERROR.[0;94m
   19e80:	3a73253a 3b305b1b 256d3239 5b1b3a73     :%s:.[0;92m%s:.[
   19e90:	33393b30 3e64256d 305b1b20 6d37333b     0;93m%d> .[0;37m
   19ea0:	75736e55 726f7070 20646574 746c6f76     Unsupported volt
   19eb0:	20656761 75206e69 202e6573 726f6241     age in use. Abor
   19ec0:	676e6974 305b1b21 00000a6d 35345b1b     ting!.[0m....[45
   19ed0:	2020206d 4f525245 305b1b52 6d34393b     m   ERROR.[0;94m
   19ee0:	3a73253a 3b305b1b 256d3239 5b1b3a73     :%s:.[0;92m%s:.[
   19ef0:	33393b30 3e64256d 305b1b20 6d37333b     0;93m%d> .[0;37m
   19f00:	43204453 20647261 656d6974 756f2064     SD Card timed ou
   19f10:	41202e74 74726f62 21676e69 6d305b1b     t. Aborting!.[0m
   19f20:	0000000a 65757274 00000000 736c6166     ....true....fals
   19f30:	00000065 35345b1b 2020206d 4f525245     e....[45m   ERRO
   19f40:	305b1b52 6d34393b 3a73253a 3b305b1b     R.[0;94m:%s:.[0;
   19f50:	256d3239 5b1b3a73 33393b30 3e64256d     92m%s:.[0;93m%d>
   19f60:	305b1b20 6d37333b 6c696857 65522065      .[0;37mWhile Re
   19f70:	6e696461 6c422067 206b636f 20642523     ading Block #%d 
   19f80:	31435243 5b1b3a36 000a6d30 35345b1b     CRC16:.[0m...[45
   19f90:	2020206d 4f525245 305b1b52 6d34393b     m   ERROR.[0;94m
   19fa0:	3a73253a 3b305b1b 256d3239 5b1b3a73     :%s:.[0;92m%s:.[
   19fb0:	33393b30 3e64256d 305b1b20 6d37333b     0;93m%d> .[0;37m
   19fc0:	65707845 64657463 78302720 58343025     Expected '0x%04X
   19fd0:	305b1b27 00000a6d 35345b1b 2020206d     '.[0m....[45m   
   19fe0:	4f525245 305b1b52 6d34393b 3a73253a     ERROR.[0;94m:%s:
   19ff0:	3b305b1b 256d3239 5b1b3a73 33393b30     .[0;92m%s:.[0;93
   1a000:	3e64256d 305b1b20 6d37333b 20746f47     m%d> .[0;37mGot 
   1a010:	25783027 27583430 6d305b1b 0000000a     '0x%04X'.[0m....
   1a020:	35345b1b 2020206d 4f525245 305b1b52     .[45m   ERROR.[0
   1a030:	6d34393b 3a73253a 3b305b1b 256d3239     ;94m:%s:.[0;92m%
   1a040:	5b1b3a73 33393b30 3e64256d 305b1b20     s:.[0;93m%d> .[0
   1a050:	6d37333b 64616552 646d4320 73617720     ;37mRead Cmd was
   1a060:	746f6e20 6b636120 6c776f6e 65676465      not acknowledge
   1a070:	72702064 7265706f 1b21796c 0a6d305b     d properly!.[0m.
   1a080:	00000000 35345b1b 2020206d 4f525245     .....[45m   ERRO
   1a090:	305b1b52 6d34393b 3a73253a 3b305b1b     R.[0;94m:%s:.[0;
   1a0a0:	256d3239 5b1b3a73 33393b30 3e64256d     92m%s:.[0;93m%d>
   1a0b0:	305b1b20 6d37333b 61726150 6574656d      .[0;37mParamete
   1a0c0:	72452072 25203a72 305b1b73 00000a6d     r Err: %s.[0m...
   1a0d0:	35345b1b 2020206d 4f525245 305b1b52     .[45m   ERROR.[0
   1a0e0:	6d34393b 3a73253a 3b305b1b 256d3239     ;94m:%s:.[0;92m%
   1a0f0:	5b1b3a73 33393b30 3e64256d 305b1b20     s:.[0;93m%d> .[0
   1a100:	6d37333b 72646441 72724520 7325203a     ;37mAddr Err: %s
   1a110:	6d305b1b 0000000a 35345b1b 2020206d     .[0m.....[45m   
   1a120:	4f525245 305b1b52 6d34393b 3a73253a     ERROR.[0;94m:%s:
   1a130:	3b305b1b 256d3239 5b1b3a73 33393b30     .[0;92m%s:.[0;93
   1a140:	3e64256d 305b1b20 6d37333b 73617245     m%d> .[0;37mEras
   1a150:	65532065 72452071 25203a72 305b1b73     e Seq Err: %s.[0
   1a160:	00000a6d 35345b1b 2020206d 4f525245     m....[45m   ERRO
   1a170:	305b1b52 6d34393b 3a73253a 3b305b1b     R.[0;94m:%s:.[0;
   1a180:	256d3239 5b1b3a73 33393b30 3e64256d     92m%s:.[0;93m%d>
   1a190:	305b1b20 6d37333b 206d6f43 20435243      .[0;37mCom CRC 
   1a1a0:	3a727245 1b732520 0a6d305b 00000000     Err: %s.[0m.....
   1a1b0:	35345b1b 2020206d 4f525245 305b1b52     .[45m   ERROR.[0
   1a1c0:	6d34393b 3a73253a 3b305b1b 256d3239     ;94m:%s:.[0;92m%
   1a1d0:	5b1b3a73 33393b30 3e64256d 305b1b20     s:.[0;93m%d> .[0
   1a1e0:	6d37333b 656c6c49 206c6167 20646d43     ;37mIllegal Cmd 
   1a1f0:	3a727245 1b732520 0a6d305b 00000000     Err: %s.[0m.....
   1a200:	35345b1b 2020206d 4f525245 305b1b52     .[45m   ERROR.[0
   1a210:	6d34393b 3a73253a 3b305b1b 256d3239     ;94m:%s:.[0;92m%
   1a220:	5b1b3a73 33393b30 3e64256d 305b1b20     s:.[0;93m%d> .[0
   1a230:	6d37333b 73617245 65522065 3a746573     ;37mErase Reset:
   1a240:	1b732520 0a6d305b 00000000 35345b1b      %s.[0m......[45
   1a250:	2020206d 4f525245 305b1b52 6d34393b     m   ERROR.[0;94m
   1a260:	3a73253a 3b305b1b 256d3239 5b1b3a73     :%s:.[0;92m%s:.[
   1a270:	33393b30 3e64256d 305b1b20 6d37333b     0;93m%d> .[0;37m
   1a280:	49206e49 3a656c64 1b732520 0a6d305b     In Idle: %s.[0m.
   1a290:	00000000 35345b1b 2020206d 4f525245     .....[45m   ERRO
   1a2a0:	305b1b52 6d34393b 3a73253a 3b305b1b     R.[0;94m:%s:.[0;
   1a2b0:	256d3239 5b1b3a73 33393b30 3e64256d     92m%s:.[0;93m%d>
   1a2c0:	305b1b20 6d37333b 6c696146 74206465      .[0;37mFailed t
   1a2d0:	6573206f 74532074 20747261 72646441     o set Start Addr
   1a2e0:	21737365 6d305b1b 0000000a 35345b1b     ess!.[0m.....[45
   1a2f0:	2020206d 4f525245 305b1b52 6d34393b     m   ERROR.[0;94m
   1a300:	3a73253a 3b305b1b 256d3239 5b1b3a73     :%s:.[0;92m%s:.[
   1a310:	33393b30 3e64256d 305b1b20 6d37333b     0;93m%d> .[0;37m
   1a320:	6c696146 74206465 6573206f 6e452074     Failed to set En
   1a330:	64412064 73657264 5b1b2173 000a6d30     d Address!.[0m..
   1a340:	35345b1b 2020206d 4f525245 305b1b52     .[45m   ERROR.[0
   1a350:	6d34393b 3a73253a 3b305b1b 256d3239     ;94m:%s:.[0;92m%
   1a360:	5b1b3a73 33393b30 3e64256d 305b1b20     s:.[0;93m%d> .[0
   1a370:	6d37333b 6e6b6e55 206e776f 70736572     ;37mUnknown resp
   1a380:	65736e6f 70797420 41202e65 74726f62     onse type. Abort
   1a390:	21676e69 6d305b1b 0000000a 35345b1b     ing!.[0m.....[45
   1a3a0:	2020206d 4f525245 305b1b52 6d34393b     m   ERROR.[0;94m
   1a3b0:	3a73253a 3b305b1b 256d3239 5b1b3a73     :%s:.[0;92m%s:.[
   1a3c0:	33393b30 3e64256d 305b1b20 6d37333b     0;93m%d> .[0;37m
   1a3d0:	70736552 65736e6f 736e7520 6f707075     Response unsuppo
   1a3e0:	64657472 206e6920 20495053 65646f6d     rted in SPI mode
   1a3f0:	6241202e 6974726f 1b21676e 0a6d305b     . Aborting!.[0m.
   1a400:	ffffff00                                ....

0001a404 <Sd::kCrcTable8>:
   1a404:	1b120900 3f362d24 535a4148 777e656c     ....$-6?HAZSle~w
   1a414:	020b1019 262f343d 4a435851 6e677c75     ....=4/&QXCJu|gn
   1a424:	29203b32 0d041f16 6168737a 454c575e     2; )....zsha^WLE
   1a434:	3039222b 141d060f 78716a63 5c554e47     +"90....cjqxGNU\
   1a444:	7f766d64 5b524940 373e252c 131a0108     dmv.@IR[,%>7....
   1a454:	666f747d 424b5059 2e273c35 0a031811     }tofYPKB5<'.....
   1a464:	4d445f56 69607b72 050c171e 2128333a     V_DMr{`i....:3(!
   1a474:	545d464f 7079626b 1c150e07 38312a23     OF]Tkbyp....#*18
   1a484:	5a534841 7e776c65 121b0009 363f242d     AHSZelw~....-$?6
   1a494:	434a5158 676e757c 0b021910 2f263d34     XQJC|ung....4=&/
   1a4a4:	68617a73 4c455e57 2029323b 040d161f     szahW^EL;2) ....
   1a4b4:	7178636a 555c474e 39302b22 1d140f06     jcxqNG\U"+09....
   1a4c4:	3e372c25 1a130801 767f646d 525b4049     %,7>....md.vI@[R
   1a4d4:	272e353c 030a1118 6f667d74 4b425950     <5.'....t}foPYBK
   1a4e4:	0c051e17 28213a33 444d565f 6069727b     ....3:!(_VMD{ri`
   1a4f4:	151c070e 3138232a 5d544f46 00706b62     ....*#81FOT]bkp.

0001a504 <Sd::kCrcTable16>:
   1a504:	10210000 30632042 50a54084 70e760c6     ..!.B c0.@.P.`.p
   1a514:	91298108 b16ba14a d1adc18c f1efe1ce     ..).J.k.........
   1a524:	02101231 22523273 429452b5 62d672f7     1...s2R".R.B.r.b
   1a534:	83189339 a35ab37b c39cd3bd e3def3ff     9...{.Z.........
   1a544:	34432462 14010420 74c764e6 548544a4     b$C4 ....d.t.D.T
   1a554:	b54ba56a 95098528 f5cfe5ee d58dc5ac     j.K.(...........
   1a564:	26723653 06301611 66f676d7 46b45695     S6r&..0..v.f.V.F
   1a574:	a77ab75b 87389719 e7fef7df c7bcd79d     [.z...8.........
   1a584:	58e548c4 78a76886 18610840 38232802     .H.X.h.x@.a..(#8
   1a594:	d9edc9cc f9afe98e 99698948 b92ba90a     ........H.i...+.
   1a5a4:	4ad45af5 6a967ab7 0a501a71 2a123a33     .Z.J.z.jq.P.3:.*
   1a5b4:	cbdcdbfd eb9efbbf 8b589b79 ab1abb3b     ........y.X.;...
   1a5c4:	7c876ca6 5cc54ce4 3c032c22 1c410c60     .l.|.L.\",.<`.A.
   1a5d4:	fd8fedae ddcdcdec bd0bad2a 9d498d68     ........*...h.I.
   1a5e4:	6eb67e97 4ef45ed5 2e323e13 0e701e51     .~.n.^.N.>2.Q.p.
   1a5f4:	efbeff9f cffcdfdd af3abf1b 8f789f59     ..........:.Y.x.
   1a604:	81a99188 a1ebb1ca c12dd10c e16ff14e     ..........-.N.o.
   1a614:	00a11080 20e330c2 40255004 60677046     .....0. .P%@Fpg`
   1a624:	939883b9 b3daa3fb d31cc33d f35ee37f     ........=.....^.
   1a634:	129002b1 32d222f3 52144235 72566277     .....".25B.RwbVr
   1a644:	a5cbb5ea 858995a8 e54ff56e c50dd52c     ........n.O.,...
   1a654:	24c334e2 048114a0 64477466 44055424     .4.$....ftGd$T.D
   1a664:	b7faa7db 97b88799 f77ee75f d73cc71d     ........_.~...<.
   1a674:	36f226d3 16b00691 76766657 56344615     .&.6....Wfvv.F4V
   1a684:	c96dd94c e92ff90e 89e999c8 a9abb98a     L.m.../.........
   1a694:	48655844 68277806 08e118c0 28a33882     DXeH.x'h.....8.(
   1a6a4:	db5ccb7d fb1eeb3f 9bd88bf9 bb9aabbb     }.\.?...........
   1a6b4:	5a544a75 7a166a37 1ad00af1 3a922ab3     uJTZ7j.z.....*.:
   1a6c4:	ed0ffd2e cd4ddd6c ad8bbdaa 8dc99de8     ....l.M.........
   1a6d4:	6c077c26 4c455c64 2c833ca2 0cc11ce0     &|.ld\EL.<.,....
   1a6e4:	ff3eef1f df7ccf5d bfbaaf9b 9ff88fd9     ..>.].|.........
   1a6f4:	7e366e17 5e744e55 3eb22e93 1ef00ed1     .n6~UNt^...>....

0001a704 <Sd::Mount(SdInterface::CardInfo_t*)::file>:
   1a704:	682e6473 ff007070                       sd.hpp..

0001a70c <Sd::Mount(SdInterface::CardInfo_t*)::file>:
   1a70c:	682e6473 ff007070                       sd.hpp..

0001a714 <Sd::Mount(SdInterface::CardInfo_t*)::file>:
   1a714:	682e6473 ff007070                       sd.hpp..

0001a71c <Sd::Mount(SdInterface::CardInfo_t*)::file>:
   1a71c:	682e6473 ff007070                       sd.hpp..

0001a724 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file>:
   1a724:	682e6473 ff007070                       sd.hpp..

0001a72c <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file>:
   1a72c:	682e6473 ff007070                       sd.hpp..

0001a734 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file>:
   1a734:	682e6473 ff007070                       sd.hpp..

0001a73c <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file>:
   1a73c:	682e6473 ff007070                       sd.hpp..

0001a744 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file>:
   1a744:	682e6473 ff007070                       sd.hpp..

0001a74c <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file>:
   1a74c:	682e6473 ff007070                       sd.hpp..

0001a754 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file>:
   1a754:	682e6473 ff007070                       sd.hpp..

0001a75c <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file>:
   1a75c:	682e6473 ff007070                       sd.hpp..

0001a764 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file>:
   1a764:	682e6473 ff007070                       sd.hpp..

0001a76c <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file>:
   1a76c:	682e6473 ff007070                       sd.hpp..

0001a774 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file>:
   1a774:	682e6473 ff007070                       sd.hpp..

0001a77c <Sd::DeleteBlock(unsigned long, unsigned long)::file>:
   1a77c:	682e6473 ff007070                       sd.hpp..

0001a784 <Sd::DeleteBlock(unsigned long, unsigned long)::file>:
   1a784:	682e6473 ff007070                       sd.hpp..

0001a78c <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)::file>:
   1a78c:	682e6473 ff007070                       sd.hpp..

0001a794 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)::file>:
   1a794:	682e6473 ff007070                       sd.hpp..

0001a79c <vtable for Sd>:
	...
   1a7a4:	0001764d 00016aa5 00016b55 00016f69     Mv...j..Uk..io..
   1a7b4:	00017381 0001752d 00017aed 00017b35     .s..-u...z..5{..
   1a7c4:	00017ba5                                .{..

0001a7c8 <vtable for SdInterface>:
	...
   1a7d0:	00017d19 00017d19 00017d19 00017d19     .}...}...}...}..
   1a7e0:	00017d19 00017d19 00017d19 00017d19     .}...}...}...}..
   1a7f0:	00017d19                                .}..

0001a7f4 <Sd::Mount(SdInterface::CardInfo_t*)::__PRETTY_FUNCTION__>:
   1a7f4:	74726976 206c6175 6c6f6f62 3a645320     virtual bool Sd:
   1a804:	756f4d3a 5328746e 746e4964 61667265     :Mount(SdInterfa
   1a814:	3a3a6563 64726143 6f666e49 292a745f     ce::CardInfo_t*)
   1a824:	ffffff00                                ....

0001a828 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::__PRETTY_FUNCTION__>:
   1a828:	74726976 206c6175 746e6975 20745f38     virtual uint8_t 
   1a838:	3a3a6453 64616552 636f6c42 6975286b     Sd::ReadBlock(ui
   1a848:	3233746e 202c745f 746e6975 2a745f38     nt32_t, uint8_t*
   1a858:	6975202c 3233746e 0029745f              , uint32_t).

0001a864 <Sd::DeleteBlock(unsigned long, unsigned long)::__PRETTY_FUNCTION__>:
   1a864:	74726976 206c6175 746e6975 20745f38     virtual uint8_t 
   1a874:	3a3a6453 656c6544 6c426574 286b636f     Sd::DeleteBlock(
   1a884:	746e6975 745f3233 6975202c 3233746e     uint32_t, uint32
   1a894:	0029745f                                _t).

0001a898 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)::__PRETTY_FUNCTION__>:
   1a898:	74726976 206c6175 746e6975 745f3233     virtual uint32_t
   1a8a8:	3a645320 6e65533a 646d4364 49645328      Sd::SendCmd(SdI
   1a8b8:	7265746e 65636166 6f433a3a 6e616d6d     nterface::Comman
   1a8c8:	75202c64 33746e69 2c745f32 6e697520     d, uint32_t, uin
   1a8d8:	745f3874 75202c2a 33746e69 2c745f32     t8_t*, uint32_t,
   1a8e8:	49645320 7265746e 65636166 654b3a3a      SdInterface::Ke
   1a8f8:	6c417065 29657669 ffffff00              epAlive)....

0001a904 <__sf_fake_stderr>:
	...

0001a924 <__sf_fake_stdin>:
	...

0001a944 <__sf_fake_stdout>:
	...
