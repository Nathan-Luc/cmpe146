
build/application/firmware.elf:     file format elf32-littlearm
build/application/firmware.elf
architecture: arm, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000122f9

Program Header:
0x70000001 off    0x000192e8 vaddr 0x000192e8 paddr 0x000192e8 align 2**2
         filesz 0x00000008 memsz 0x00000008 flags r--
    LOAD off    0x00010000 vaddr 0x00010000 paddr 0x00010000 align 2**16
         filesz 0x000092f0 memsz 0x000092f0 flags r-x
    LOAD off    0x00020000 vaddr 0x10000000 paddr 0x000192f0 align 2**16
         filesz 0x00000254 memsz 0x00000254 flags rw-
    LOAD off    0x00020258 vaddr 0x10000258 paddr 0x10000258 align 2**16
         filesz 0x00000000 memsz 0x0000038c flags rw-
private flags = 5000400: [Version5 EABI] [hard-float ABI]

Sections:
Idx Name             Size      VMA       LMA       File off  Algn  Flags
  0 .text            000092e8  00010000  00010000  00010000  2**4  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data            00000254  10000000  000192f0  00020000  2**2  CONTENTS, ALLOC, LOAD, DATA
  2 .data_RAM2       00000000  20000000  20000000  00020254  2**2  CONTENTS
  3 .bss             0000038c  10000258  10000258  00020258  2**3  ALLOC
  4 .ARM.exidx       00000008  000192e8  000192e8  000192e8  2**2  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .uninit_RESERVED 00000000  10000000  10000000  00020254  2**2  CONTENTS
  6 .noinit_RAM2     00000000  20000000  20000000  00020254  2**2  CONTENTS
  7 .noinit          00000000  100005e4  100005e4  00020254  2**2  CONTENTS
  8 .ARM.attributes  00000030  00000000  00000000  00020254  2**0  CONTENTS, READONLY
  9 .comment         0000007e  00000000  00000000  00020284  2**0  CONTENTS, READONLY
 10 .debug_info      0003dbe4  00000000  00000000  00020302  2**0  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev    000044f3  00000000  00000000  0005dee6  2**0  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges   00000cc0  00000000  00000000  000623d9  2**0  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges    00000c30  00000000  00000000  00063099  2**0  CONTENTS, READONLY, DEBUGGING
 14 .debug_line      00006607  00000000  00000000  00063cc9  2**0  CONTENTS, READONLY, DEBUGGING
 15 .debug_str       0001984e  00000000  00000000  0006a2d0  2**0  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame     00003218  00000000  00000000  00083b20  2**2  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
00010000 l    d  .text	00000000 .text
10000000 l    d  .data	00000000 .data
20000000 l    d  .data_RAM2	00000000 .data_RAM2
10000258 l    d  .bss	00000000 .bss
000192e8 l    d  .ARM.exidx	00000000 .ARM.exidx
10000000 l    d  .uninit_RESERVED	00000000 .uninit_RESERVED
20000000 l    d  .noinit_RAM2	00000000 .noinit_RAM2
100005e4 l    d  .noinit	00000000 .noinit
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 interrupt.cpp
000128d4 l     F .text	0000002c NVIC_EnableIRQ
00012900 l     F .text	00000054 NVIC_SetPriority
00010000 l     O .text	000000e4 kInterruptVectorTable
00017e90 l     O .text	0000000e InterruptLookupHandler::file
00017ea0 l     O .text	0000001e InterruptLookupHandler::__PRETTY_FUNCTION__
0001022c l       .text	00000000 handler2_address_const
00000000 l    df *ABS*	00000000 startup.cpp
10000298 l     O .bss	00000008 (anonymous namespace)::uptime
00010850 l     F .text	00000030 (anonymous namespace)::DefaultUptime()
00017aa4 l     O .text	00000049 Lpc40xxSystemController::SetPeripheralClockDivider(unsigned char)::__PRETTY_FUNCTION__
00017b4c l     O .text	0000005c Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)::__PRETTY_FUNCTION__
00017af0 l     O .text	0000005a Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)::__PRETTY_FUNCTION__
00017ba8 l     O .text	0000003a Lpc40xxSystemController::SetCpuClockDivider(unsigned char)::__PRETTY_FUNCTION__
00017be4 l     O .text	0000003e Timer::Initialize(unsigned long, void (*)(), long)::__PRETTY_FUNCTION__
100000a0 l     O .data	00000008 (anonymous namespace)::system_timer
100000a8 l     O .data	00000004 (anonymous namespace)::system_controller
100000ac l     O .data	0000000c (anonymous namespace)::timer0
000121a0 l     F .text	00000040 (anonymous namespace)::Lpc40xxUptime()
0001798c l     O .text	0000000c LowLevelInit()::file
00017c24 l     O .text	00000014 LowLevelInit()::__PRETTY_FUNCTION__
000102fc l     O .text	00000004 kCrpWord
000127e8 l     F .text	000000dc __static_initialization_and_destruction_0(int, int)
000128c4 l     F .text	0000000e _GLOBAL__sub_I_UptimeRTOS
00000000 l    df *ABS*	00000000 /mnt/c/SJSU_Dev2/SJSU-Dev2/tools/gcc-arm-none-eabi-7-2017-q4-major/bin/../lib/gcc/arm-none-eabi/7.2.1/thumb/v7e-m/fpv4-sp/hard/crti.o
00000000 l    df *ABS*	00000000 /mnt/c/SJSU_Dev2/SJSU-Dev2/tools/gcc-arm-none-eabi-7-2017-q4-major/bin/../lib/gcc/arm-none-eabi/7.2.1/thumb/v7e-m/fpv4-sp/hard/crtn.o
00000000 l    df *ABS*	00000000 crtstuff.c
00010328 l     F .text	00000000 __do_global_dtors_aux
10000258 l       .bss	00000001 completed.9929
0001034c l     F .text	00000000 frame_dummy
1000025c l       .bss	00000018 object.9934
0001030c l     O .text	00000000 __frame_dummy_init_array_entry
00000000 l    df *ABS*	00000000 main.cpp
00017304 l     O .text	00000009 main::file
00017310 l     O .text	0000000b main::__PRETTY_FUNCTION__
000106b8 l     F .text	00000070 __static_initialization_and_destruction_0(int, int)
00010728 l     F .text	00000028 _GLOBAL__sub_I_P1_10
00000000 l    df *ABS*	00000000 diskio.cpp
00019120 l     O .text	0000001c Gpio::ValidPortCheck()::__PRETTY_FUNCTION__
0001913c l     O .text	00000039 Gpio::SetInterruptEdge(GpioInterface::Edge)::__PRETTY_FUNCTION__
000190e4 l     O .text	0000003b Gpio::ClearInterruptEdge(GpioInterface::Edge)::__PRETTY_FUNCTION__
00019178 l     O .text	00000031 Sd::Mount(SdInterface::CardInfo_t*)::__PRETTY_FUNCTION__
000191ac l     O .text	0000003c Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::__PRETTY_FUNCTION__
000191e8 l     O .text	00000034 Sd::DeleteBlock(unsigned long, unsigned long)::__PRETTY_FUNCTION__
0001921c l     O .text	00000069 Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)::__PRETTY_FUNCTION__
10000578 l     O .bss	00000068 (anonymous namespace)::sd_card
00016d18 l     F .text	00000050 __static_initialization_and_destruction_0(int, int)
00016d68 l     F .text	00000028 _GLOBAL__sub_I_disk_status
00000000 l    df *ABS*	00000000 LabGPIO.cpp
10000000 l     O .data	00000018 GPIO
00000000 l    df *ABS*	00000000 newlib.cpp
00000000 l    df *ABS*	00000000 tasks.c
10000400 l     O .bss	00000064 pxReadyTasksLists
10000464 l     O .bss	00000004 uxTopReadyPriority
10000468 l     O .bss	00000004 xYieldPending
1000046c l     O .bss	00000004 uxSchedulerSuspended
10000470 l     O .bss	00000004 ulTaskSwitchedInTime
10000474 l     O .bss	00000004 ulTotalRunTime
00000000 l    df *ABS*	00000000 port.c
00012d90 l       .text	00000000 pxCurrentTCBConst2
00012e00 l       .text	00000000 pxCurrentTCBConst
00000000 l    df *ABS*	00000000 printf.cpp
00012e08 l     F .text	00000030 _out_null(char, void*, unsigned int, unsigned int)
00012e38 l     F .text	00000044 _out_char(char, void*, unsigned int, unsigned int)
00012e7c l     F .text	00000044 _strlen(char const*)
00012ec0 l     F .text	00000044 _is_digit(char)
00012f04 l     F .text	00000060 _atoi(char const**)
00012f64 l     F .text	0000025c _ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)
000131c0 l     F .text	000000e4 _ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)
000132a4 l     F .text	000000f4 _ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)
00017ec0 l     O .text	00000028 _ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)::pow10
00013398 l     F .text	00000438 _ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)
000137d0 l     F .text	000008f4 _vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)
00000000 l    df *ABS*	00000000 pure.cc
00000000 l    df *ABS*	00000000 eh_terminate.cc
00000000 l    df *ABS*	00000000 sf_round.c
00000000 l    df *ABS*	00000000 _arm_truncdfsf2.o
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 abort.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 signal.c
00000000 l    df *ABS*	00000000 signalr.c
00000000 l    df *ABS*	00000000 findfp.c
00000000 l    df *ABS*	00000000 eh_term_handler.cc
00000000 l    df *ABS*	00000000 impure.c
100001f4 l     O .data	00000060 impure_data
00000000 l    df *ABS*	00000000 reent.c
00010a08  w    F .text	0000003e Lpc40xxSystemController::GetPeripheralFrequency() const
00012b78 g     F .text	00000038 putchar
00012954  w    F .text	0000006c Pwm0IrqHandler
00018b20  w    O .text	00000009 Gpio::SetInterruptEdge(GpioInterface::Edge)::file
00010218 g     F .text	0000001c HardFaultHandler
00012ae8 g     F .text	00000024 _getpid
00012b3c g     F .text	0000003c _putchar
00012954  w    F .text	0000006c EepromIrqHandler
00012954  w    F .text	0000006c Timer2IrqHandler
1000008c  w    O .data	00000014 uart0
00012c7c g     F .text	0000002c GetStackDepth()
00018e90  w    O .text	00000007 Sd::Mount(SdInterface::CardInfo_t*)::file
00014c5c  w    F .text	00000024 Lpc40xxSystemController::Lpc40xxSystemController()
00017954  w    O .text	00000004 Timer::kTimerIrq
00018ec8  w    O .text	00000007 Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file
00017284 g     F .text	00000024 _kill_r
0001010c g       .text	00000000 bss_section_table_end
000140c4 g     F .text	0000004c printf
10000024  w    O .data	00000004 SystemTimer::sys_tick
00012954  w    F .text	0000006c I2c1IrqHandler
000123a0  w    F .text	0000003c void Timer::TimerHandler<(TimerInterface::TimerPort)2>()
1000003c  w    O .data	00000010 Uart::uart
00018ef8  w    O .text	00000007 Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file
00010000 g       *ABS*	00000000 __vectors_start__
000108b0  w    F .text	00000044 Milliseconds()
00010b6c  w    F .text	00000110 Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)
00014cac  w    F .text	00000034 SspInterface::SspInterface()
00012954  w    F .text	0000006c BusFaultHandler
100002f8 g     O .bss	00000100 stack_trace
10000028  w    O .data	00000004 Pin::pin_map
000119ec  w    F .text	000000e4 Uart::Initialize(unsigned long)
20000000 g       *ABS*	00000000 __base_RAM2
000192f0 g       .ARM.exidx	00000000 __exidx_end
00014b4c  w    F .text	0000007c Gpio::ClearEdgeRising()
00010e54  w    F .text	00000030 Lpc40xxSystemController::SetEmcClockDivider(Lpc40xxSystemController::EmcDivider)
00018b14  w    O .text	00000009 Gpio::ValidPortCheck()::file
100003fc g     O .bss	00000004 pxCurrentTCB
00014110  w    F .text	00000034 PinInterface::PinInterface()
00012c38 g     F .text	0000001c __cyg_profile_func_exit
000168fc  w    F .text	00000048 Sd::Crc7Add(unsigned char, unsigned char)
00015814  w    F .text	000000a0 Sd::Sd(Sd::DebugSdCard_t, unsigned char, unsigned char, unsigned char, unsigned char)
00012608  w    F .text	000000a0 void Timer::ClearInterrupts<(TimerInterface::TimerPort)1>()
100005e0 g     O .bss	00000004 errno
000192f0 g       .ARM.exidx	00000000 _etext
1000001c  w    O .data	00000004 Lpc40xxSystemController::system_controller
000108f4  w    F .text	00000090 Lpc40xxSystemController::SetClockFrequency(unsigned char)
000117bc  w    F .text	00000030 unsigned char util::Value<TimerInterface::MatchControlRegister, unsigned char>(TimerInterface::MatchControlRegister)
000109f4  w    F .text	00000014 Lpc40xxSystemController::GetSystemFrequency() const
00011fb0  w    F .text	000001f0 Uart::GenerateUartCalibration(float)
100001a0  w    O .data	00000018 Gpio::gpio_port
000117ec  w    F .text	000000f8 Timer::SetTimer(unsigned long, TimerInterface::TimerIsrCondition, TimerInterface::MatchControlRegister)
00012220  w    F .text	000000bc LowLevelInit()
00010574 g     F .text	00000098 SpiTransfer(unsigned char)
00012954  w    F .text	0000006c LcdIrqHandler
00018f20  w    O .text	00000007 Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)::file
00080000 g       *ABS*	00000000 __top_MFlash512
00014fac  w    F .text	0000006c Ssp::Transfer(unsigned short)
00011c50  w    F .text	000000f8 Uart::Receive(unsigned long)
00010b0c  w    F .text	00000030 Lpc40xxSystemController::SelectUsbClockSource(Lpc40xxSystemController::UsbSource)
000142b8  w    F .text	00000030 Delay(unsigned long long)
0001797c  w    O .text	00000010 Uart::kPowerbit
00012954  w    F .text	0000006c I2c2IrqHandler
100002a0  w    O .bss	00000004 SystemTimer::system_timer_isr
00014a14  w    F .text	00000040 Gpio::DetachInterrupt()
00012954  w    F .text	0000006c CanIrqHandler
00011508  w    F .text	00000074 Pin::EnableDac(bool)
00011238  w    F .text	0000007c Pin::SetAsAnalogMode(bool)
00010dec  w    F .text	00000068 Lpc40xxSystemController::SetCpuClockDivider(unsigned char)
000169b4  w    F .text	000000fc Sd::GetCrc16(unsigned char*, unsigned short)
00016ebc g     F .text	00000000 .hidden __aeabi_uldivmod
100005e4 g       .noinit	00000000 _noinit
00012bb0 g     F .text	00000060 puts
100000b8 g     O .data	000000e4 dynamic_isr_vector_table
00014734  w    F .text	0000002c Gpio::GetPin()
000147dc  w    F .text	0000005c Gpio::SetInterruptRoutine(void (*)())
000142e8  w    F .text	00000034 GpioInterface::GpioInterface()
00014cac  w    F .text	00000034 SspInterface::SspInterface()
00012954  w    F .text	0000006c RitIrqHandler
00012954  w    F .text	0000006c Uart2IrqHandler
0001157c  w    F .text	00000064 Pin::BitPlace(unsigned long, unsigned long, unsigned long, unsigned long)
0001792c  w    O .text	00000016 Lpc40xxSystemController::SetCpuClockDivider(unsigned char)::file
00018eb0  w    O .text	00000007 Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file
00015310  w    F .text	00000160 Ssp::GetPeripheralMode()
000126a8  w    F .text	000000a0 void Timer::ClearInterrupts<(TimerInterface::TimerPort)2>()
00016dbc g     F .text	00000060 roundf
00017224 g     F .text	00000050 _raise_r
000141c8  w    F .text	0000002c Wait(unsigned long long)::{lambda()#1}::_FUN()
00014c80  w    F .text	0000002c int util::Value<Ssp::Peripheral, int>(Ssp::Peripheral)
00014ce0  w    F .text	00000038 PinInterface::PinInterface(PinInterface const&)
10010000 g       *ABS*	00000000 __top_RAM
00017978  w    O .text	00000004 Uart::kRxUartPortFunction
000141f4  w    F .text	000000c4 Wait(unsigned long long)
00012da0 g     F .text	00000066 xPortPendSVHandler
000157e0  w    F .text	00000034 SdInterface::SdInterface()
000118e4  w    F .text	0000003c Timer::GetTimer()
10000000 g       *ABS*	00000000 __base_RamLoc64
00012c54 g     F .text	00000028 GetStackTrace()
1000019c g     O .data	00000004 out
10000020  w    O .data	00000004 Lpc40xxSystemController::speed_in_hertz
00018f00  w    O .text	00000007 Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file
00018ee8  w    O .text	00000007 Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file
000172a8 g     F .text	00000004 _getpid_r
00000000 g       *ABS*	00000000 __base_MFlash512
00018f80  w    O .text	0000004c vtable for Ssp
10010000 g       *ABS*	00000000 StackTop
00015cc4  w    F .text	00000064 Sd::WaitToReadBlock()
00018b38  w    O .text	00000003 Ssp::kPinSelect
00016eec g     F .text	000002cc .hidden __udivmoddi4
00012954  w    F .text	0000006c I2sIrqHandler
000100fc g       .text	00000000 bss_section_table
00010300 g       .text	00000000 __CRP_WORD_END__
20008000 g       *ABS*	00000000 __top_RAM2
000122f8 g     F .text	00000030 ResetIsr
00015c80  w    F .text	00000044 Sd::ToBool(bool)
00018fcc  w    O .text	00000028 vtable for SspInterface
00012954  w    F .text	0000006c PendSVHandler
00015074  w    F .text	00000030 unsigned char util::Value<SspInterface::DataSize, unsigned char>(SspInterface::DataSize)
00010ef4  w    F .text	00000034 SystemTimer::SetIsrFunction(void (*)())
00016b98  w    F .text	00000044 bool bit::Read<unsigned long>(unsigned long, unsigned long)
00014f34  w    F .text	00000078 Ssp::IsTransferRegBusy()
00012954  w    F .text	0000006c UsageFaultHandler
20000000 g       *ABS*	00000000 __user_heap_base
000192e8 g       .text	00000000 __exidx_start
00011420  w    F .text	00000074 Pin::EnableI2cHighCurrentDrive(bool)
00012954  w    F .text	0000006c Uart4IrqHandler
00014838  w    F .text	00000054 Gpio::ClearInterruptRoutine()
000113a4  w    F .text	0000007c Pin::EnableI2cHighSpeedMode(bool)
000101fc g     F .text	00000018 InitFpu()
000112b4  w    F .text	0000007c Pin::EnableDigitalFilter(bool)
000171cc g     F .text	00000048 __libc_init_array
00012954 g     F .text	0000006c InterruptLookupHandler
00010b3c  w    F .text	00000030 Lpc40xxSystemController::SelectSpifiClockSource(Lpc40xxSystemController::SpifiSource)
000109dc  w    F .text	00000018 Lpc40xxSystemController::GetPeripheralClockDivider() const
10000018  w    O .data	00000004 Uptime
00019060  w    O .text	00000048 vtable for GpioInterface
00011b1c  w    F .text	000000e8 Uart::Send(unsigned char)
000171bc g     F .text	0000000e abort
00012954  w    F .text	0000006c BodIrqHandler
10000284 g     O .bss	00000008 P1_00
0001565c  w    F .text	00000184 Ssp::GetClock()
00010300 g     F .text	00000000 _init
0001010c g       .text	00000000 section_table_end
00012748  w    F .text	000000a0 void Timer::ClearInterrupts<(TimerInterface::TimerPort)3>()
00016db0 g     F .text	0000000a std::terminate()
00016e1c g     F .text	0000009e .hidden __aeabi_d2f
00014bc8  w    F .text	0000007c Gpio::ClearEdgeFalling()
00012954  w    F .text	0000006c SysTickHandler
000100e4 g       .text	00000000 section_table_start
100005e4 g       .bss	00000000 _ebss
0001060c g     F .text	00000068 ReadSignature()
00014ad0  w    F .text	0000007c Gpio::SetEdgeFalling()
00018ec0  w    O .text	00000007 Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file
00012954  w    F .text	0000006c RtcIrqHandler
000146c4  w    F .text	00000070 Gpio::Read()
00012418  w    F .text	000000a8 Status Wait<Uart::Send(unsigned char)::{lambda()#1}>(unsigned long long, Uart::Send(unsigned char)::{lambda()#1})
eff8359a g       *ABS*	00000000 ValidUserCodeChecksum
00012954  w    F .text	0000006c Uart0IrqHandler
00012a1c g     F .text	00000078 GetRegistersFromStack
10000274 g     O .bss	00000008 P1_10
00016b5c  w    F .text	0000003c unsigned long bit::Set<unsigned long>(unsigned long, unsigned long)
000190a8  w    O .text	0000003c vtable for PinInterface
00012954  w    F .text	0000006c UsbIrqHandler
00012954  w    F .text	0000006c AdcIrqHandler
00011c04  w    F .text	0000004c Uart::Receive(unsigned long)::{lambda()#1}::operator()() const
00010880  w    F .text	00000030 SetUptimeFunction(unsigned long long (*)())
00010368 g     F .text	00000058 LabGPIO::LabGPIO(unsigned char, unsigned char)
00019288 g     O .text	00000020 __sf_fake_stderr
00018b90  w    O .text	00000100 Sd::kCrcTable8
00016da0 g     F .text	00000010 std::get_terminate()
00011eb8  w    F .text	00000074 Uart::FractionalEstimate(float, float)
000148bc  w    F .text	00000088 Gpio::SetInterruptEdge(GpioInterface::Edge)
00012954  w    F .text	0000006c EnetIrqHandler
00012954  w    F .text	0000006c DmaIrqHandler
0001010c g     F .text	00000090 InitDataSection()
000129c0 g     F .text	0000005c RegisterIsr(IRQn, void (*)(), bool, long)
000103c0 g     F .text	00000048 LabGPIO::SetAsInput()
00000000 g       *ABS*	00000000 __base_Flash
00012954  w    F .text	0000006c Eint1IrqHandler
100001e0  w    O .data	0000000c Ssp::ssp_registers
00012954  w    F .text	0000006c SvcHandler
00012954  w    F .text	0000006c GpioIrqHandler
00018f10  w    O .text	00000007 Sd::DeleteBlock(unsigned long, unsigned long)::file
00012954  w    F .text	0000006c SdioIrqHandler
10010000 g       *ABS*	00000000 __top_RamLoc64
10000258 g       .bss	00000000 _bss
00018ea8  w    O .text	00000007 Sd::Mount(SdInterface::CardInfo_t*)::file
00012954  w    F .text	0000006c Pll1IrqHandler
00012954  w    F .text	0000006c MemManageHandler
00010408 g     F .text	00000054 LabGPIO::SetAsOutput()
00016d90 g     F .text	00000006 __cxa_pure_virtual
00012954  w    F .text	0000006c Pwm1IrqHandler
0001488c  w    F .text	00000030 unsigned char util::Value<GpioInterface::Edge, unsigned char>(GpioInterface::Edge)
00012954  w    F .text	0000006c Timer0IrqHandler
1000027c g     O .bss	00000008 P1_04
000124c0  w    F .text	000000a8 Status Wait<Uart::Receive(unsigned long)::{lambda()#1}>(unsigned long long, Uart::Receive(unsigned long)::{lambda()#1})
00080000 g       *ABS*	00000000 __top_Flash
00011f2c  w    F .text	00000084 Uart::IsDecmial(float)
00015470  w    F .text	000001ec Ssp::SetClock(bool, bool, unsigned char, unsigned char)
100005e4 g       .noinit	00000000 _end_noinit
00010e84  w    F .text	0000003c SystemTimer::DisableTimer()
0001633c  w    F .text	00000120 Sd::DeleteBlock(unsigned long, unsigned long)
00012ca8 g     F .text	000000c8 vTaskSwitchContext
00016c50  w    F .text	00000054 unsigned long bit::Extract<unsigned long>(unsigned long, unsigned long, unsigned long)
00014144  w    F .text	00000058 Pin::Pin(unsigned char, unsigned char)
000150d4  w    F .text	00000030 unsigned char util::Value<SspInterface::MasterSlaveMode, unsigned char>(SspInterface::MasterSlaveMode)
00018ed0  w    O .text	00000007 Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file
00017974  w    O .text	00000004 Uart::kTxUartPortFunction
00012954  w    F .text	0000006c Uart3IrqHandler
00014c44  w    F .text	00000018 SystemControllerInterface::SystemControllerInterface()
00018f08  w    O .text	00000007 Sd::DeleteBlock(unsigned long, unsigned long)::file
20000000 g       *ABS*	00000000 __base_RamPeriph32
00018b2c  w    O .text	00000009 Gpio::ClearInterruptEdge(GpioInterface::Edge)::file
100003f8 g     O .bss	00000004 stack_depth
000145e0  w    F .text	0000006c Gpio::Toggle()
00018ee0  w    O .text	00000007 Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file
00018c90  w    O .text	00000200 Sd::kCrcTable16
10000478  w    O .bss	00000100 Gpio::interrupthandlers
000171b8  w    F .text	00000002 .hidden __aeabi_ldiv0
00012954  w    F .text	0000006c Timer1IrqHandler
00011e44  w    F .text	00000074 Uart::DividerEstimate(float, float)
000144d4  w    F .text	00000064 Gpio::SetHigh()
00011d48  w    F .text	000000fc Uart::FindClosestFractional(float)
00014d6c  w    F .text	000000e4 Ssp::Ssp(Ssp::Peripheral)
000100e4 g       .text	00000000 data_section_table
000110d0  w    F .text	00000080 Pin::SetMode(PinInterface::Mode)
000178e4  w    O .text	00000016 Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)::file
00015d28  w    F .text	00000050 Sd::WaitWhileBusy()
00010fc4  w    F .text	00000094 SystemTimer::SetTickFrequency(unsigned long)
000192a8 g     O .text	00000020 __sf_fake_stdin
00016ca4  w    F .text	00000074 unsigned long bit::Insert<unsigned long, bool>(unsigned long, bool, unsigned long, unsigned long)
000102fc g       .text	00000000 __CRP_WORD_START__
00017958  w    O .text	00000010 Timer::kTimerIsr
000149cc  w    F .text	00000048 Gpio::AttachInterrupt(void (*)(), GpioInterface::Edge)
00012954  w    F .text	0000006c Uart1IrqHandler
00014398  w    F .text	0000007c Gpio::SetAsInput()
00012c10 g     F .text	00000028 __cyg_profile_func_enter
00017214 g     F .text	00000010 memset
00010674 g     F .text	00000044 main
00015814  w    F .text	000000a0 Sd::Sd(Sd::DebugSdCard_t, unsigned char, unsigned char, unsigned char, unsigned char)
100001b8  w    O .data	00000028 Gpio::interrupt
00011668  w    F .text	00000020 Timer::DoNothingIsr()
00012954  w    F .text	0000006c QeiIrqHandler
20000000 g       *ABS*	00000000 heap
00012954  w    F .text	0000006c Ssp2IrqHandler
000115e0  w    F .text	0000002c Pin::GetPort() const
00016190  w    F .text	000001ac Sd::WriteBlock(unsigned long, unsigned char const*, unsigned long)
00014144  w    F .text	00000058 Pin::Pin(unsigned char, unsigned char)
1000028c g     O .bss	00000008 P1_01
00016e1c g     F .text	0000009e .hidden __truncdfsf2
0001031c g       .text	00000000 __init_array_end
00012d70 g     F .text	00000026 vPortSVCHandler
00012a94 g     F .text	0000003c FirmwareStdOut(int)
00018f28  w    O .text	0000002c vtable for Sd
00014944  w    F .text	00000088 Gpio::ClearInterruptEdge(GpioInterface::Edge)
00012954  w    F .text	0000006c Ssp1IrqHandler
00012328  w    F .text	0000003c void Timer::TimerHandler<(TimerInterface::TimerPort)0>()
00018b84  w    O .text	0000000c Ssp::kPowerBit
0001160c  w    F .text	0000002c Pin::GetPin() const
00011920  w    F .text	000000cc Uart::SetBaudRate(unsigned long)
00014490  w    F .text	00000044 Gpio::SetDirection(GpioInterface::Direction)
00017998  w    O .text	0000003c vtable for Uart
00014414  w    F .text	0000007c Gpio::SetAsOutput()
00018ef0  w    O .text	00000007 Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file
00010c7c  w    F .text	00000170 Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)
00014538  w    F .text	00000064 Gpio::SetLow()
00017a80  w    O .text	00000024 vtable for Lpc40xxSystemController
00015d78  w    F .text	00000418 Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)
00018f18  w    O .text	00000007 Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)::file
000178cc  w    O .text	00000016 Lpc40xxSystemController::SetPeripheralClockDivider(unsigned char)::file
000122dc g     F .text	0000001a SystemInit
00011688  w    F .text	00000134 Timer::Initialize(unsigned long, void (*)(), long)
00010a48  w    F .text	00000030 Lpc40xxSystemController::PowerUpPeripheral(SystemControllerInterface::PeripheralID const&)
20008000 g       *ABS*	00000000 heap_end
00014e50  w    F .text	000000e4 Ssp::Initialize()
000179d4  w    O .text	00000038 vtable for Timer
00014ce0  w    F .text	00000038 PinInterface::PinInterface(PinInterface const&)
1000002c  w    O .data	00000010 Timer::tim_register
00012954  w    F .text	0000006c Ssp0IrqHandler
00010368 g     F .text	00000058 LabGPIO::LabGPIO(unsigned char, unsigned char)
0001031c g     F .text	00000000 _fini
00012954  w    F .text	0000006c UsbactivityIrqHandler
0001459c  w    F .text	00000044 Gpio::Set(GpioInterface::State)
00012954  w    F .text	0000006c Pll0IrqHandler
00014d18  w    F .text	00000054 Pin::Pin(Pin const&)
000100fc g       .text	00000000 data_section_table_end
00012954  w    F .text	0000006c CanactivityIrqHandler
00012954  w    F .text	0000006c NmiHandler
00018b3c  w    O .text	00000048 Ssp::kSspPinMatrix
0001464c  w    F .text	00000078 Gpio::ReadState()
00018eb8  w    O .text	00000007 Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file
100001f0 g     O .data	00000004 _impure_ptr
000104e4 g     F .text	00000090 SpiInitialize()
00016ab0  w    F .text	000000ac Status Wait<Wait(unsigned long long)::{lambda()#1}>(unsigned long long, Wait(unsigned long long)::{lambda()#1})
10000000 g       .uninit_RESERVED	00000000 _end_uninit_RESERVED
00016944  w    F .text	00000070 Sd::GetCrc7(unsigned char*, unsigned char)
00012954  w    F .text	0000006c McpwmIrqHandler
0001030c g       .text	00000000 __preinit_array_end
00012954  w    F .text	0000006c WdtIrqHandler
0001419c  w    F .text	0000002c Wait(unsigned long long)::{lambda()#1}::operator()() const
0001645c  w    F .text	000004a0 Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)
00014c5c  w    F .text	00000024 Lpc40xxSystemController::Lpc40xxSystemController()
00017a0c  w    O .text	0000003c vtable for Pin
10000000 g       .data	00000000 _data
000111c4  w    F .text	00000074 Pin::SetAsActiveLow(bool)
00010adc  w    F .text	00000030 Lpc40xxSystemController::SelectMainClockSource(Lpc40xxSystemController::MainClockSource)
00014a54  w    F .text	0000007c Gpio::SetEdgeRising()
00018e98  w    O .text	00000007 Sd::Mount(SdInterface::CardInfo_t*)::file
00011638  w    F .text	00000030 unsigned char util::Value<TimerInterface::TimerPort, unsigned char>(TimerInterface::TimerPort)
100002e4  w    O .bss	00000010 Timer::user_timer_isr
000178fc  w    O .text	00000016 Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)::file
100002a4  w    O .bss	00000040 Timer::match
000104a0 g     F .text	00000044 LabGPIO::SetLow()
00011ad0  w    F .text	0000004c Uart::Send(unsigned char)::{lambda()#1}::operator()() const
00015964  w    F .text	0000031c Sd::Mount(SdInterface::CardInfo_t*)
100001ec g     O .data	00000004 __cxxabiv1::__terminate_handler
00018ff4  w    O .text	00000024 vtable for SystemControllerInterface
00019018  w    O .text	00000048 vtable for Gpio
10000254 g       .data	00000000 _edata
00017944  w    O .text	00000010 Timer::kPowerbit
00012364  w    F .text	0000003c void Timer::TimerHandler<(TimerInterface::TimerPort)1>()
00011150  w    F .text	00000074 Pin::EnableHysteresis(bool)
000142e8  w    F .text	00000034 GpioInterface::GpioInterface()
00012954  w    F .text	0000006c DebugMonHandler
00014760  w    F .text	0000007c Gpio::ValidPortCheck()
00012954  w    F .text	0000006c Eint2IrqHandler
20008000 g       *ABS*	00000000 __top_RamPeriph32
00014d6c  w    F .text	000000e4 Ssp::Ssp(Ssp::Peripheral)
00012954  w    F .text	0000006c Timer3IrqHandler
0001045c g     F .text	00000044 LabGPIO::SetHigh()
10000000 g       *ABS*	00000000 __base_RAM
00012954  w    F .text	0000006c Eint3IrqHandler
00016d96 g     F .text	00000008 __cxxabiv1::__terminate(void (*)())
00012b0c g     F .text	00000030 _kill
00012954  w    F .text	0000006c I2c0IrqHandler
00014d18  w    F .text	00000054 Pin::Pin(Pin const&)
00017968  w    O .text	0000000a Timer::Initialize(unsigned long, void (*)(), long)::file
00010ec0  w    F .text	00000034 SystemTimer::SystemTimerHandler()
00018ea0  w    O .text	00000007 Sd::Mount(SdInterface::CardInfo_t*)::file
000192c8 g     O .text	00000020 __sf_fake_stdout
00010750  w    F .text	00000100 debug::PrintBacktrace(bool, void*)
0001030c g       .text	00000000 __init_array_start
000171b8  w    F .text	00000002 .hidden __aeabi_idiv0
00018f54  w    O .text	0000002c vtable for SdInterface
000158b4  w    F .text	000000b0 Sd::Initialize()
00012ad0 g     F .text	00000018 _exit
00011330  w    F .text	00000074 Pin::EnableFastMode(bool)
00012568  w    F .text	000000a0 void Timer::ClearInterrupts<(TimerInterface::TimerPort)0>()
00012954  w    F .text	0000006c Eint0IrqHandler
00010f28  w    F .text	0000009c SystemTimer::StartTimer()
000150a4  w    F .text	00000030 unsigned char util::Value<SspInterface::FrameMode, unsigned char>(SspInterface::FrameMode)
0001019c g     F .text	00000060 InitBssSection()
0001431c  w    F .text	0000007c Gpio::Gpio(unsigned char, unsigned char)
000121e0 g     F .text	00000040 UptimeRTOS
00011494  w    F .text	00000074 Pin::SetAsOpenDrain(bool)
00017a48  w    O .text	00000038 vtable for SystemTimer
00012954  w    F .text	0000006c SpiIrqHandler
00018ed8  w    O .text	00000007 Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file
00015018  w    F .text	0000005c Ssp::SetSpiMasterDefault()
1000004c  w    O .data	00000040 Uart::pairs
00014c44  w    F .text	00000018 SystemControllerInterface::SystemControllerInterface()
00010a78  w    F .text	00000030 Lpc40xxSystemController::PowerDownPeripheral(SystemControllerInterface::PeripheralID const&)
000157e0  w    F .text	00000034 SdInterface::SdInterface()
0001030c g       .text	00000000 __preinit_array_start
00017914  w    O .text	00000016 Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)::file
00010aa8  w    F .text	00000034 Lpc40xxSystemController::SelectOscillatorSource(Lpc40xxSystemController::OscillatorSource)
100002f4  w    O .bss	00000004 guard variable for Timer::match
00015104  w    F .text	0000020c Ssp::SetPeripheralMode(SspInterface::MasterSlaveMode, SspInterface::FrameMode, SspInterface::DataSize)
00011058  w    F .text	00000078 Pin::SetPinFunction(unsigned char)
00016bdc  w    F .text	00000074 unsigned long bit::Insert<unsigned long, unsigned char>(unsigned long, unsigned char, unsigned long, unsigned long)
00014110  w    F .text	00000034 PinInterface::PinInterface()
00010984  w    F .text	00000058 Lpc40xxSystemController::SetPeripheralClockDivider(unsigned char)
0001431c  w    F .text	0000007c Gpio::Gpio(unsigned char, unsigned char)
000123dc  w    F .text	0000003c void Timer::TimerHandler<(TimerInterface::TimerPort)3>()
00017274 g     F .text	00000010 raise



Disassembly of section .text:

00010000 <kInterruptVectorTable>:
   10000:	00 00 01 10 f9 22 01 00 55 29 01 00 19 02 01 00     ....."..U)......
   10010:	55 29 01 00 55 29 01 00 55 29 01 00 9a 35 f8 ef     U)..U)..U)...5..
	...
   1002c:	71 2d 01 00 55 29 01 00 00 00 00 00 a1 2d 01 00     q-..U).......-..
   1003c:	55 29 01 00 55 29 01 00 55 29 01 00 55 29 01 00     U)..U)..U)..U)..
   1004c:	55 29 01 00 55 29 01 00 55 29 01 00 55 29 01 00     U)..U)..U)..U)..
   1005c:	55 29 01 00 55 29 01 00 55 29 01 00 55 29 01 00     U)..U)..U)..U)..
   1006c:	55 29 01 00 55 29 01 00 00 00 00 00 55 29 01 00     U)..U)......U)..
   1007c:	55 29 01 00 55 29 01 00 55 29 01 00 55 29 01 00     U)..U)..U)..U)..
   1008c:	55 29 01 00 55 29 01 00 55 29 01 00 55 29 01 00     U)..U)..U)..U)..
   1009c:	55 29 01 00 55 29 01 00 55 29 01 00 55 29 01 00     U)..U)..U)..U)..
   100ac:	55 29 01 00 55 29 01 00 55 29 01 00 55 29 01 00     U)..U)..U)..U)..
   100bc:	55 29 01 00 55 29 01 00 55 29 01 00 55 29 01 00     U)..U)..U)..U)..
   100cc:	55 29 01 00 55 29 01 00 55 29 01 00 55 29 01 00     U)..U)..U)..U)..
   100dc:	55 29 01 00 55 29 01 00                             U)..U)..

000100e4 <data_section_table>:
   100e4:	000192f0 	.word	0x000192f0
   100e8:	10000000 	.word	0x10000000
   100ec:	00000254 	.word	0x00000254
   100f0:	000192f0 	.word	0x000192f0
   100f4:	20000000 	.word	0x20000000
   100f8:	00000000 	.word	0x00000000

000100fc <bss_section_table>:
   100fc:	10000258 	.word	0x10000258
   10100:	0000038c 	.word	0x0000038c
   10104:	20000000 	.word	0x20000000
   10108:	00000000 	.word	0x00000000

0001010c <InitDataSection()>:
SJ2_IGNORE_STACK_TRACE(void SystemInit());

// Functions to carry out the initialization of RW and BSS data sections.
SJ2_SECTION(".after_vectors")
void InitDataSection()
{
   1010c:	b086      	sub	sp, #24
  for (int i = 0; &data_section_table[i] < &data_section_table_end; i++)
   1010e:	2300      	movs	r3, #0
   10110:	9305      	str	r3, [sp, #20]
   10112:	9a05      	ldr	r2, [sp, #20]
   10114:	4613      	mov	r3, r2
   10116:	005b      	lsls	r3, r3, #1
   10118:	4413      	add	r3, r2
   1011a:	009b      	lsls	r3, r3, #2
   1011c:	4a1d      	ldr	r2, [pc, #116]	; (10194 <InitDataSection()+0x88>)
   1011e:	4413      	add	r3, r2
   10120:	4a1d      	ldr	r2, [pc, #116]	; (10198 <InitDataSection()+0x8c>)
   10122:	4293      	cmp	r3, r2
   10124:	d233      	bcs.n	1018e <InitDataSection()+0x82>
  {
    uint32_t * rom_location = data_section_table[i].rom_location;
   10126:	491b      	ldr	r1, [pc, #108]	; (10194 <InitDataSection()+0x88>)
   10128:	9a05      	ldr	r2, [sp, #20]
   1012a:	4613      	mov	r3, r2
   1012c:	005b      	lsls	r3, r3, #1
   1012e:	4413      	add	r3, r2
   10130:	009b      	lsls	r3, r3, #2
   10132:	440b      	add	r3, r1
   10134:	681b      	ldr	r3, [r3, #0]
   10136:	9303      	str	r3, [sp, #12]
    uint32_t * ram_location = data_section_table[i].ram_location;
   10138:	4916      	ldr	r1, [pc, #88]	; (10194 <InitDataSection()+0x88>)
   1013a:	9a05      	ldr	r2, [sp, #20]
   1013c:	4613      	mov	r3, r2
   1013e:	005b      	lsls	r3, r3, #1
   10140:	4413      	add	r3, r2
   10142:	009b      	lsls	r3, r3, #2
   10144:	440b      	add	r3, r1
   10146:	685b      	ldr	r3, [r3, #4]
   10148:	9302      	str	r3, [sp, #8]
    uint32_t length         = data_section_table[i].length;
   1014a:	4912      	ldr	r1, [pc, #72]	; (10194 <InitDataSection()+0x88>)
   1014c:	9a05      	ldr	r2, [sp, #20]
   1014e:	4613      	mov	r3, r2
   10150:	005b      	lsls	r3, r3, #1
   10152:	4413      	add	r3, r2
   10154:	009b      	lsls	r3, r3, #2
   10156:	440b      	add	r3, r1
   10158:	3308      	adds	r3, #8
   1015a:	681b      	ldr	r3, [r3, #0]
   1015c:	9301      	str	r3, [sp, #4]
    for (size_t j = 0; j < length; j++)
   1015e:	2300      	movs	r3, #0
   10160:	9304      	str	r3, [sp, #16]
   10162:	9a04      	ldr	r2, [sp, #16]
   10164:	9b01      	ldr	r3, [sp, #4]
   10166:	429a      	cmp	r2, r3
   10168:	d20d      	bcs.n	10186 <InitDataSection()+0x7a>
    {
      ram_location[j] = rom_location[j];
   1016a:	9b04      	ldr	r3, [sp, #16]
   1016c:	009b      	lsls	r3, r3, #2
   1016e:	9a03      	ldr	r2, [sp, #12]
   10170:	441a      	add	r2, r3
   10172:	9b04      	ldr	r3, [sp, #16]
   10174:	009b      	lsls	r3, r3, #2
   10176:	9902      	ldr	r1, [sp, #8]
   10178:	440b      	add	r3, r1
   1017a:	6812      	ldr	r2, [r2, #0]
   1017c:	601a      	str	r2, [r3, #0]
    for (size_t j = 0; j < length; j++)
   1017e:	9b04      	ldr	r3, [sp, #16]
   10180:	3301      	adds	r3, #1
   10182:	9304      	str	r3, [sp, #16]
   10184:	e7ed      	b.n	10162 <InitDataSection()+0x56>
  for (int i = 0; &data_section_table[i] < &data_section_table_end; i++)
   10186:	9b05      	ldr	r3, [sp, #20]
   10188:	3301      	adds	r3, #1
   1018a:	9305      	str	r3, [sp, #20]
   1018c:	e7c1      	b.n	10112 <InitDataSection()+0x6>
    }
  }
}
   1018e:	bf00      	nop
   10190:	b006      	add	sp, #24
   10192:	4770      	bx	lr
   10194:	000100e4 	.word	0x000100e4
   10198:	000100fc 	.word	0x000100fc

0001019c <InitBssSection()>:

// Functions to initialization BSS data sections. This is important because
// the std c libs assume that BSS is set to zero.
SJ2_SECTION(".after_vectors")
void InitBssSection()
{
   1019c:	b084      	sub	sp, #16
  for (int i = 0; &bss_section_table[i] < &bss_section_table_end; i++)
   1019e:	2300      	movs	r3, #0
   101a0:	9303      	str	r3, [sp, #12]
   101a2:	9b03      	ldr	r3, [sp, #12]
   101a4:	00db      	lsls	r3, r3, #3
   101a6:	4a13      	ldr	r2, [pc, #76]	; (101f4 <InitBssSection()+0x58>)
   101a8:	4413      	add	r3, r2
   101aa:	4a13      	ldr	r2, [pc, #76]	; (101f8 <InitBssSection()+0x5c>)
   101ac:	4293      	cmp	r3, r2
   101ae:	d21e      	bcs.n	101ee <InitBssSection()+0x52>
  {
    uint32_t * ram_location = bss_section_table[i].ram_location;
   101b0:	4a10      	ldr	r2, [pc, #64]	; (101f4 <InitBssSection()+0x58>)
   101b2:	9b03      	ldr	r3, [sp, #12]
   101b4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
   101b8:	9301      	str	r3, [sp, #4]
    uint32_t length         = bss_section_table[i].length;
   101ba:	4a0e      	ldr	r2, [pc, #56]	; (101f4 <InitBssSection()+0x58>)
   101bc:	9b03      	ldr	r3, [sp, #12]
   101be:	00db      	lsls	r3, r3, #3
   101c0:	4413      	add	r3, r2
   101c2:	685b      	ldr	r3, [r3, #4]
   101c4:	9300      	str	r3, [sp, #0]
    for (size_t j = 0; j < length; j++)
   101c6:	2300      	movs	r3, #0
   101c8:	9302      	str	r3, [sp, #8]
   101ca:	9a02      	ldr	r2, [sp, #8]
   101cc:	9b00      	ldr	r3, [sp, #0]
   101ce:	429a      	cmp	r2, r3
   101d0:	d209      	bcs.n	101e6 <InitBssSection()+0x4a>
    {
      ram_location[j] = 0;
   101d2:	9b02      	ldr	r3, [sp, #8]
   101d4:	009b      	lsls	r3, r3, #2
   101d6:	9a01      	ldr	r2, [sp, #4]
   101d8:	4413      	add	r3, r2
   101da:	2200      	movs	r2, #0
   101dc:	601a      	str	r2, [r3, #0]
    for (size_t j = 0; j < length; j++)
   101de:	9b02      	ldr	r3, [sp, #8]
   101e0:	3301      	adds	r3, #1
   101e2:	9302      	str	r3, [sp, #8]
   101e4:	e7f1      	b.n	101ca <InitBssSection()+0x2e>
  for (int i = 0; &bss_section_table[i] < &bss_section_table_end; i++)
   101e6:	9b03      	ldr	r3, [sp, #12]
   101e8:	3301      	adds	r3, #1
   101ea:	9303      	str	r3, [sp, #12]
   101ec:	e7d9      	b.n	101a2 <InitBssSection()+0x6>
    }
  }
}
   101ee:	bf00      	nop
   101f0:	b004      	add	sp, #16
   101f2:	4770      	bx	lr
   101f4:	000100fc 	.word	0x000100fc
   101f8:	0001010c 	.word	0x0001010c

000101fc <InitFpu()>:
      // Write back the modified value to the CPACR
      "STR     R1, [R0]\n"
      // Wait for store to complete
      "DSB\n"
      // reset pipeline now the FPU is enabled
      "ISB\n");
   101fc:	f8df 0014 	ldr.w	r0, [pc, #20]	; 10214 <InitFpu()+0x18>
   10200:	6801      	ldr	r1, [r0, #0]
   10202:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   10206:	6001      	str	r1, [r0, #0]
   10208:	f3bf 8f4f 	dsb	sy
   1020c:	f3bf 8f6f 	isb	sy
}
   10210:	bf00      	nop
   10212:	4770      	bx	lr
   10214:	e000ed88 	.word	0xe000ed88

00010218 <HardFaultHandler>:
      " mrseq r0, msp                                       \n"
      " mrsne r0, psp                                       \n"
      " ldr r1, [r0, #24]                                   \n"
      " ldr r2, handler2_address_const                      \n"
      " bx r2                                               \n"
      " handler2_address_const: .word GetRegistersFromStack \n");
   10218:	f01e 0f04 	tst.w	lr, #4
   1021c:	bf0c      	ite	eq
   1021e:	f3ef 8008 	mrseq	r0, MSP
   10222:	f3ef 8009 	mrsne	r0, PSP
   10226:	6981      	ldr	r1, [r0, #24]
   10228:	4a00      	ldr	r2, [pc, #0]	; (1022c <handler2_address_const>)
   1022a:	4710      	bx	r2

0001022c <handler2_address_const>:
   1022c:	00012a1d 	.word	0x00012a1d
#endif
}
   10230:	bf00      	nop
   10232:	4770      	bx	lr
   10234:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   10238:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   1023c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   10240:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   10244:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   10248:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   1024c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   10250:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   10254:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   10258:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   1025c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   10260:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   10264:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   10268:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   1026c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   10270:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   10274:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   10278:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   1027c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   10280:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   10284:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   10288:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   1028c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   10290:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   10294:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   10298:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   1029c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102a0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102a4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102a8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102ac:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102b0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102b4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102b8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102bc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102c0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102c4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102c8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102cc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102d0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102d4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102d8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102dc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102e0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102e4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102e8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102ec:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102f0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102f4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102f8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

000102fc <__CRP_WORD_START__>:
   102fc:	ffffffff 	.word	0xffffffff

00010300 <_init>:
   10300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10302:	bf00      	nop
   10304:	bcf8      	pop	{r3, r4, r5, r6, r7}
   10306:	bc08      	pop	{r3}
   10308:	469e      	mov	lr, r3
   1030a:	4770      	bx	lr

0001030c <__init_array_start>:
   1030c:	0001034d 	.word	0x0001034d
   10310:	00010729 	.word	0x00010729
   10314:	000128c5 	.word	0x000128c5
   10318:	00016d69 	.word	0x00016d69

0001031c <_fini>:
   1031c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1031e:	bf00      	nop
   10320:	bcf8      	pop	{r3, r4, r5, r6, r7}
   10322:	bc08      	pop	{r3}
   10324:	469e      	mov	lr, r3
   10326:	4770      	bx	lr

00010328 <__do_global_dtors_aux>:
   10328:	b510      	push	{r4, lr}
   1032a:	4c05      	ldr	r4, [pc, #20]	; (10340 <__do_global_dtors_aux+0x18>)
   1032c:	7823      	ldrb	r3, [r4, #0]
   1032e:	b933      	cbnz	r3, 1033e <__do_global_dtors_aux+0x16>
   10330:	4b04      	ldr	r3, [pc, #16]	; (10344 <__do_global_dtors_aux+0x1c>)
   10332:	b113      	cbz	r3, 1033a <__do_global_dtors_aux+0x12>
   10334:	4804      	ldr	r0, [pc, #16]	; (10348 <__do_global_dtors_aux+0x20>)
   10336:	f3af 8000 	nop.w
   1033a:	2301      	movs	r3, #1
   1033c:	7023      	strb	r3, [r4, #0]
   1033e:	bd10      	pop	{r4, pc}
   10340:	10000258 	.word	0x10000258
   10344:	00000000 	.word	0x00000000
   10348:	000192f0 	.word	0x000192f0

0001034c <frame_dummy>:
   1034c:	b508      	push	{r3, lr}
   1034e:	4b03      	ldr	r3, [pc, #12]	; (1035c <frame_dummy+0x10>)
   10350:	b11b      	cbz	r3, 1035a <frame_dummy+0xe>
   10352:	4903      	ldr	r1, [pc, #12]	; (10360 <frame_dummy+0x14>)
   10354:	4803      	ldr	r0, [pc, #12]	; (10364 <frame_dummy+0x18>)
   10356:	f3af 8000 	nop.w
   1035a:	bd08      	pop	{r3, pc}
   1035c:	00000000 	.word	0x00000000
   10360:	1000025c 	.word	0x1000025c
   10364:	000192f0 	.word	0x000192f0

00010368 <LabGPIO::LabGPIO(unsigned char, unsigned char)>:
     }};
    //inline static volatile uint32_t *stat= &(LPC_GPIOINT->IntStatus);
    
    IsrPointer LabGPIO::pin_isr_map[kPorts][kPins]={ nullptr};
    
 LabGPIO::LabGPIO(uint8_t port, uint8_t pin){
   10368:	b530      	push	{r4, r5, lr}
   1036a:	b083      	sub	sp, #12
   1036c:	4675      	mov	r5, lr
   1036e:	9001      	str	r0, [sp, #4]
   10370:	460b      	mov	r3, r1
   10372:	f88d 3003 	strb.w	r3, [sp, #3]
   10376:	4613      	mov	r3, r2
   10378:	f88d 3002 	strb.w	r3, [sp, #2]
   1037c:	462b      	mov	r3, r5
   1037e:	4619      	mov	r1, r3
   10380:	480e      	ldr	r0, [pc, #56]	; (103bc <LabGPIO::LabGPIO(unsigned char, unsigned char)+0x54>)
   10382:	f002 fc45 	bl	12c10 <__cyg_profile_func_enter>
    SelPort = port;
   10386:	9b01      	ldr	r3, [sp, #4]
   10388:	f89d 2003 	ldrb.w	r2, [sp, #3]
   1038c:	701a      	strb	r2, [r3, #0]
    SelPin = pin;
   1038e:	9b01      	ldr	r3, [sp, #4]
   10390:	f89d 2002 	ldrb.w	r2, [sp, #2]
   10394:	705a      	strb	r2, [r3, #1]
    
    interrupt_port = (port == 2) ? 1:0;
   10396:	f89d 3003 	ldrb.w	r3, [sp, #3]
   1039a:	2b02      	cmp	r3, #2
   1039c:	d101      	bne.n	103a2 <LabGPIO::LabGPIO(unsigned char, unsigned char)+0x3a>
   1039e:	2201      	movs	r2, #1
   103a0:	e000      	b.n	103a4 <LabGPIO::LabGPIO(unsigned char, unsigned char)+0x3c>
   103a2:	2200      	movs	r2, #0
   103a4:	9b01      	ldr	r3, [sp, #4]
   103a6:	709a      	strb	r2, [r3, #2]
 }
   103a8:	9c01      	ldr	r4, [sp, #4]
   103aa:	462b      	mov	r3, r5
   103ac:	4619      	mov	r1, r3
   103ae:	4803      	ldr	r0, [pc, #12]	; (103bc <LabGPIO::LabGPIO(unsigned char, unsigned char)+0x54>)
   103b0:	f002 fc42 	bl	12c38 <__cyg_profile_func_exit>
   103b4:	4623      	mov	r3, r4
   103b6:	4618      	mov	r0, r3
   103b8:	b003      	add	sp, #12
   103ba:	bd30      	pop	{r4, r5, pc}
   103bc:	00010369 	.word	0x00010369

000103c0 <LabGPIO::SetAsInput()>:
  void LabGPIO::SetAsInput(){
   103c0:	b510      	push	{r4, lr}
   103c2:	b082      	sub	sp, #8
   103c4:	4674      	mov	r4, lr
   103c6:	9001      	str	r0, [sp, #4]
   103c8:	4623      	mov	r3, r4
   103ca:	4619      	mov	r1, r3
   103cc:	480c      	ldr	r0, [pc, #48]	; (10400 <LabGPIO::SetAsInput()+0x40>)
   103ce:	f002 fc1f 	bl	12c10 <__cyg_profile_func_enter>
  /// Sets this GPIO as an input
  
  GPIO[SelPort]->DIR &= ~(0<<SelPin);
   103d2:	9b01      	ldr	r3, [sp, #4]
   103d4:	781b      	ldrb	r3, [r3, #0]
   103d6:	461a      	mov	r2, r3
   103d8:	4b0a      	ldr	r3, [pc, #40]	; (10404 <LabGPIO::SetAsInput()+0x44>)
   103da:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   103de:	9b01      	ldr	r3, [sp, #4]
   103e0:	781b      	ldrb	r3, [r3, #0]
   103e2:	4619      	mov	r1, r3
   103e4:	4b07      	ldr	r3, [pc, #28]	; (10404 <LabGPIO::SetAsInput()+0x44>)
   103e6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   103ea:	6812      	ldr	r2, [r2, #0]
   103ec:	601a      	str	r2, [r3, #0]
   103ee:	4623      	mov	r3, r4
   103f0:	4619      	mov	r1, r3
   103f2:	4803      	ldr	r0, [pc, #12]	; (10400 <LabGPIO::SetAsInput()+0x40>)
   103f4:	f002 fc20 	bl	12c38 <__cyg_profile_func_exit>
  
  }
   103f8:	bf00      	nop
   103fa:	b002      	add	sp, #8
   103fc:	bd10      	pop	{r4, pc}
   103fe:	bf00      	nop
   10400:	000103c1 	.word	0x000103c1
   10404:	10000000 	.word	0x10000000

00010408 <LabGPIO::SetAsOutput()>:

  void LabGPIO::SetAsOutput(){
   10408:	b510      	push	{r4, lr}
   1040a:	b082      	sub	sp, #8
   1040c:	4674      	mov	r4, lr
   1040e:	9001      	str	r0, [sp, #4]
   10410:	4623      	mov	r3, r4
   10412:	4619      	mov	r1, r3
   10414:	480f      	ldr	r0, [pc, #60]	; (10454 <LabGPIO::SetAsOutput()+0x4c>)
   10416:	f002 fbfb 	bl	12c10 <__cyg_profile_func_enter>
    /// Sets this GPIO as an output
       GPIO[SelPort]-> DIR |= (1<<SelPin);
   1041a:	9b01      	ldr	r3, [sp, #4]
   1041c:	781b      	ldrb	r3, [r3, #0]
   1041e:	461a      	mov	r2, r3
   10420:	4b0d      	ldr	r3, [pc, #52]	; (10458 <LabGPIO::SetAsOutput()+0x50>)
   10422:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   10426:	681a      	ldr	r2, [r3, #0]
   10428:	9b01      	ldr	r3, [sp, #4]
   1042a:	785b      	ldrb	r3, [r3, #1]
   1042c:	4619      	mov	r1, r3
   1042e:	2301      	movs	r3, #1
   10430:	408b      	lsls	r3, r1
   10432:	4619      	mov	r1, r3
   10434:	9b01      	ldr	r3, [sp, #4]
   10436:	781b      	ldrb	r3, [r3, #0]
   10438:	4618      	mov	r0, r3
   1043a:	4b07      	ldr	r3, [pc, #28]	; (10458 <LabGPIO::SetAsOutput()+0x50>)
   1043c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   10440:	430a      	orrs	r2, r1
   10442:	601a      	str	r2, [r3, #0]
   10444:	4623      	mov	r3, r4
   10446:	4619      	mov	r1, r3
   10448:	4802      	ldr	r0, [pc, #8]	; (10454 <LabGPIO::SetAsOutput()+0x4c>)
   1044a:	f002 fbf5 	bl	12c38 <__cyg_profile_func_exit>
     
  }
   1044e:	bf00      	nop
   10450:	b002      	add	sp, #8
   10452:	bd10      	pop	{r4, pc}
   10454:	00010409 	.word	0x00010409
   10458:	10000000 	.word	0x10000000

0001045c <LabGPIO::SetHigh()>:
    if(direction == Direction::kOutput) SetAsOutput();
    else SetAsInput();
   }
  

  void LabGPIO::SetHigh(){
   1045c:	b510      	push	{r4, lr}
   1045e:	b082      	sub	sp, #8
   10460:	4674      	mov	r4, lr
   10462:	9001      	str	r0, [sp, #4]
   10464:	4623      	mov	r3, r4
   10466:	4619      	mov	r1, r3
   10468:	480b      	ldr	r0, [pc, #44]	; (10498 <LabGPIO::SetHigh()+0x3c>)
   1046a:	f002 fbd1 	bl	12c10 <__cyg_profile_func_enter>
       /// Set voltage of pin to HIGH
        GPIO[SelPort]-> SET = (1<<SelPin);
   1046e:	9b01      	ldr	r3, [sp, #4]
   10470:	785b      	ldrb	r3, [r3, #1]
   10472:	461a      	mov	r2, r3
   10474:	2301      	movs	r3, #1
   10476:	fa03 f202 	lsl.w	r2, r3, r2
   1047a:	9b01      	ldr	r3, [sp, #4]
   1047c:	781b      	ldrb	r3, [r3, #0]
   1047e:	4619      	mov	r1, r3
   10480:	4b06      	ldr	r3, [pc, #24]	; (1049c <LabGPIO::SetHigh()+0x40>)
   10482:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   10486:	619a      	str	r2, [r3, #24]
   10488:	4623      	mov	r3, r4
   1048a:	4619      	mov	r1, r3
   1048c:	4802      	ldr	r0, [pc, #8]	; (10498 <LabGPIO::SetHigh()+0x3c>)
   1048e:	f002 fbd3 	bl	12c38 <__cyg_profile_func_exit>
    
  }
   10492:	bf00      	nop
   10494:	b002      	add	sp, #8
   10496:	bd10      	pop	{r4, pc}
   10498:	0001045d 	.word	0x0001045d
   1049c:	10000000 	.word	0x10000000

000104a0 <LabGPIO::SetLow()>:
  void LabGPIO::SetLow(){
   104a0:	b510      	push	{r4, lr}
   104a2:	b082      	sub	sp, #8
   104a4:	4674      	mov	r4, lr
   104a6:	9001      	str	r0, [sp, #4]
   104a8:	4623      	mov	r3, r4
   104aa:	4619      	mov	r1, r3
   104ac:	480b      	ldr	r0, [pc, #44]	; (104dc <LabGPIO::SetLow()+0x3c>)
   104ae:	f002 fbaf 	bl	12c10 <__cyg_profile_func_enter>
        /// Set voltage of pin to LOW
            GPIO[SelPort]-> CLR = (1<<SelPin);
   104b2:	9b01      	ldr	r3, [sp, #4]
   104b4:	785b      	ldrb	r3, [r3, #1]
   104b6:	461a      	mov	r2, r3
   104b8:	2301      	movs	r3, #1
   104ba:	fa03 f202 	lsl.w	r2, r3, r2
   104be:	9b01      	ldr	r3, [sp, #4]
   104c0:	781b      	ldrb	r3, [r3, #0]
   104c2:	4619      	mov	r1, r3
   104c4:	4b06      	ldr	r3, [pc, #24]	; (104e0 <LabGPIO::SetLow()+0x40>)
   104c6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   104ca:	61da      	str	r2, [r3, #28]
   104cc:	4623      	mov	r3, r4
   104ce:	4619      	mov	r1, r3
   104d0:	4802      	ldr	r0, [pc, #8]	; (104dc <LabGPIO::SetLow()+0x3c>)
   104d2:	f002 fbb1 	bl	12c38 <__cyg_profile_func_exit>
   
  }
   104d6:	bf00      	nop
   104d8:	b002      	add	sp, #8
   104da:	bd10      	pop	{r4, pc}
   104dc:	000104a1 	.word	0x000104a1
   104e0:	10000000 	.word	0x10000000

000104e4 <SpiInitialize()>:
  LabGPIO P1_10(1,10); //CE
  LabGPIO P1_04(1,4); // MISO
  LabGPIO P1_00 (1,0); //SCLK
  LabGPIO P1_01(1,1); //MOSI
void SpiInitialize(void)
{
   104e4:	b510      	push	{r4, lr}
   104e6:	4674      	mov	r4, lr
   104e8:	4623      	mov	r3, r4
   104ea:	4619      	mov	r1, r3
   104ec:	481a      	ldr	r0, [pc, #104]	; (10558 <SpiInitialize()+0x74>)
   104ee:	f002 fb8f 	bl	12c10 <__cyg_profile_func_enter>
  // Initialize SSP peripheral 2
  LPC_SC -> PCONP |= (1<<20);
   104f2:	4b1a      	ldr	r3, [pc, #104]	; (1055c <SpiInitialize()+0x78>)
   104f4:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
   104f8:	4a18      	ldr	r2, [pc, #96]	; (1055c <SpiInitialize()+0x78>)
   104fa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   104fe:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
  P1_10.SetLow();
   10502:	4817      	ldr	r0, [pc, #92]	; (10560 <SpiInitialize()+0x7c>)
   10504:	f7ff ffcc 	bl	104a0 <LabGPIO::SetLow()>
  P1_04.SetAsInput();
   10508:	4816      	ldr	r0, [pc, #88]	; (10564 <SpiInitialize()+0x80>)
   1050a:	f7ff ff59 	bl	103c0 <LabGPIO::SetAsInput()>
  P1_00.SetAsOutput();
   1050e:	4816      	ldr	r0, [pc, #88]	; (10568 <SpiInitialize()+0x84>)
   10510:	f7ff ff7a 	bl	10408 <LabGPIO::SetAsOutput()>
  P1_01.SetAsOutput();
   10514:	4815      	ldr	r0, [pc, #84]	; (1056c <SpiInitialize()+0x88>)
   10516:	f7ff ff77 	bl	10408 <LabGPIO::SetAsOutput()>
  LPC_SSP2->CR0 &= ~(0xFF<<0);
   1051a:	4b15      	ldr	r3, [pc, #84]	; (10570 <SpiInitialize()+0x8c>)
   1051c:	681b      	ldr	r3, [r3, #0]
   1051e:	4a14      	ldr	r2, [pc, #80]	; (10570 <SpiInitialize()+0x8c>)
   10520:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   10524:	6013      	str	r3, [r2, #0]
  LPC_SSP2->CR0 |= (15);
   10526:	4b12      	ldr	r3, [pc, #72]	; (10570 <SpiInitialize()+0x8c>)
   10528:	681b      	ldr	r3, [r3, #0]
   1052a:	4a11      	ldr	r2, [pc, #68]	; (10570 <SpiInitialize()+0x8c>)
   1052c:	f043 030f 	orr.w	r3, r3, #15
   10530:	6013      	str	r3, [r2, #0]
  LPC_SSP2->CR1 &= ~(0b111 << 0);
   10532:	4b0f      	ldr	r3, [pc, #60]	; (10570 <SpiInitialize()+0x8c>)
   10534:	685b      	ldr	r3, [r3, #4]
   10536:	4a0e      	ldr	r2, [pc, #56]	; (10570 <SpiInitialize()+0x8c>)
   10538:	f023 0307 	bic.w	r3, r3, #7
   1053c:	6053      	str	r3, [r2, #4]
  LPC_SSP2->CR1 |= (0b1<<1);
   1053e:	4b0c      	ldr	r3, [pc, #48]	; (10570 <SpiInitialize()+0x8c>)
   10540:	685b      	ldr	r3, [r3, #4]
   10542:	4a0b      	ldr	r2, [pc, #44]	; (10570 <SpiInitialize()+0x8c>)
   10544:	f043 0302 	orr.w	r3, r3, #2
   10548:	6053      	str	r3, [r2, #4]
   1054a:	4623      	mov	r3, r4
   1054c:	4619      	mov	r1, r3
   1054e:	4802      	ldr	r0, [pc, #8]	; (10558 <SpiInitialize()+0x74>)
   10550:	f002 fb72 	bl	12c38 <__cyg_profile_func_exit>
}
   10554:	bf00      	nop
   10556:	bd10      	pop	{r4, pc}
   10558:	000104e5 	.word	0x000104e5
   1055c:	400fc000 	.word	0x400fc000
   10560:	10000274 	.word	0x10000274
   10564:	1000027c 	.word	0x1000027c
   10568:	10000284 	.word	0x10000284
   1056c:	1000028c 	.word	0x1000028c
   10570:	400ac000 	.word	0x400ac000

00010574 <SpiTransfer(unsigned char)>:

uint8_t SpiTransfer(uint8_t data_out)
{
   10574:	b570      	push	{r4, r5, r6, lr}
   10576:	b082      	sub	sp, #8
   10578:	4676      	mov	r6, lr
   1057a:	4603      	mov	r3, r0
   1057c:	f88d 3007 	strb.w	r3, [sp, #7]
   10580:	4633      	mov	r3, r6
   10582:	4619      	mov	r1, r3
   10584:	481f      	ldr	r0, [pc, #124]	; (10604 <SpiTransfer(unsigned char)+0x90>)
   10586:	f002 fb43 	bl	12c10 <__cyg_profile_func_enter>
  // Send data_out and retrieve returned byte
    if(LPC_SSP2->SR & (1<<1))
   1058a:	4b1f      	ldr	r3, [pc, #124]	; (10608 <SpiTransfer(unsigned char)+0x94>)
   1058c:	68db      	ldr	r3, [r3, #12]
   1058e:	f003 0302 	and.w	r3, r3, #2
   10592:	2b00      	cmp	r3, #0
   10594:	bf14      	ite	ne
   10596:	2301      	movne	r3, #1
   10598:	2300      	moveq	r3, #0
   1059a:	b2db      	uxtb	r3, r3
   1059c:	2b00      	cmp	r3, #0
   1059e:	d004      	beq.n	105aa <SpiTransfer(unsigned char)+0x36>
    {
        LPC_SSP2->DR = data_out;
   105a0:	4a19      	ldr	r2, [pc, #100]	; (10608 <SpiTransfer(unsigned char)+0x94>)
   105a2:	f89d 3007 	ldrb.w	r3, [sp, #7]
   105a6:	6093      	str	r3, [r2, #8]
   105a8:	e002      	b.n	105b0 <SpiTransfer(unsigned char)+0x3c>
    }
    else return 0xFF;
   105aa:	25ff      	movs	r5, #255	; 0xff
   105ac:	2400      	movs	r4, #0
   105ae:	e01c      	b.n	105ea <SpiTransfer(unsigned char)+0x76>
    while(LPC_SSP2->SR & (1<<4)){}
   105b0:	4b15      	ldr	r3, [pc, #84]	; (10608 <SpiTransfer(unsigned char)+0x94>)
   105b2:	68db      	ldr	r3, [r3, #12]
   105b4:	f003 0310 	and.w	r3, r3, #16
   105b8:	2b00      	cmp	r3, #0
   105ba:	bf14      	ite	ne
   105bc:	2301      	movne	r3, #1
   105be:	2300      	moveq	r3, #0
   105c0:	b2db      	uxtb	r3, r3
   105c2:	2b00      	cmp	r3, #0
   105c4:	d000      	beq.n	105c8 <SpiTransfer(unsigned char)+0x54>
   105c6:	e7f3      	b.n	105b0 <SpiTransfer(unsigned char)+0x3c>
    if(LPC_SSP2->SR &(1<<2))
   105c8:	4b0f      	ldr	r3, [pc, #60]	; (10608 <SpiTransfer(unsigned char)+0x94>)
   105ca:	68db      	ldr	r3, [r3, #12]
   105cc:	f003 0304 	and.w	r3, r3, #4
   105d0:	2b00      	cmp	r3, #0
   105d2:	bf14      	ite	ne
   105d4:	2301      	movne	r3, #1
   105d6:	2300      	moveq	r3, #0
   105d8:	b2db      	uxtb	r3, r3
   105da:	2b00      	cmp	r3, #0
   105dc:	d004      	beq.n	105e8 <SpiTransfer(unsigned char)+0x74>
    {
        return LPC_SSP2->DR;
   105de:	4b0a      	ldr	r3, [pc, #40]	; (10608 <SpiTransfer(unsigned char)+0x94>)
   105e0:	689b      	ldr	r3, [r3, #8]
   105e2:	b2dd      	uxtb	r5, r3
   105e4:	2400      	movs	r4, #0
   105e6:	e000      	b.n	105ea <SpiTransfer(unsigned char)+0x76>
   105e8:	2401      	movs	r4, #1
   105ea:	4633      	mov	r3, r6
   105ec:	4619      	mov	r1, r3
   105ee:	4805      	ldr	r0, [pc, #20]	; (10604 <SpiTransfer(unsigned char)+0x90>)
   105f0:	f002 fb22 	bl	12c38 <__cyg_profile_func_exit>
   105f4:	2c01      	cmp	r4, #1
   105f6:	d100      	bne.n	105fa <SpiTransfer(unsigned char)+0x86>
    }
    
}
   105f8:	e000      	b.n	105fc <SpiTransfer(unsigned char)+0x88>
   105fa:	462b      	mov	r3, r5
   105fc:	4618      	mov	r0, r3
   105fe:	b002      	add	sp, #8
   10600:	bd70      	pop	{r4, r5, r6, pc}
   10602:	bf00      	nop
   10604:	00010575 	.word	0x00010575
   10608:	400ac000 	.word	0x400ac000

0001060c <ReadSignature()>:

// WARNING: This is just a sample; you will have to fill in plenty of your own code as per requirements
void ReadSignature()
{
   1060c:	b510      	push	{r4, lr}
   1060e:	b082      	sub	sp, #8
   10610:	4674      	mov	r4, lr
   10612:	4623      	mov	r3, r4
   10614:	4619      	mov	r1, r3
   10616:	4814      	ldr	r0, [pc, #80]	; (10668 <ReadSignature()+0x5c>)
   10618:	f002 fafa 	bl	12c10 <__cyg_profile_func_enter>
  uint8_t data[2];
  
  // The simplest test is to try to read the signature of the Adesto flash and print it out
  //AdestoSelect();
  P1_10.SetLow();
   1061c:	4813      	ldr	r0, [pc, #76]	; (1066c <ReadSignature()+0x60>)
   1061e:	f7ff ff3f 	bl	104a0 <LabGPIO::SetLow()>
    // TODO: Find the correct commands you need to send to the Adesto flash device 
    //       to retrieve its device signature.
    SpiTransfer(0x9F);
   10622:	209f      	movs	r0, #159	; 0x9f
   10624:	f7ff ffa6 	bl	10574 <SpiTransfer(unsigned char)>
    data[0] = SpiTransfer(0x40); 
   10628:	2040      	movs	r0, #64	; 0x40
   1062a:	f7ff ffa3 	bl	10574 <SpiTransfer(unsigned char)>
   1062e:	4603      	mov	r3, r0
   10630:	f88d 3004 	strb.w	r3, [sp, #4]
    data[1] = SpiTransfer(0x00);
   10634:	2000      	movs	r0, #0
   10636:	f7ff ff9d 	bl	10574 <SpiTransfer(unsigned char)>
   1063a:	4603      	mov	r3, r0
   1063c:	f88d 3005 	strb.w	r3, [sp, #5]
  //AdestoDeselect();
  P1_10.SetHigh();
   10640:	480a      	ldr	r0, [pc, #40]	; (1066c <ReadSignature()+0x60>)
   10642:	f7ff ff0b 	bl	1045c <LabGPIO::SetHigh()>
  
  printf("Returned data: %x %x\n", data[0], data[1]);
   10646:	f89d 3004 	ldrb.w	r3, [sp, #4]
   1064a:	4619      	mov	r1, r3
   1064c:	f89d 3005 	ldrb.w	r3, [sp, #5]
   10650:	461a      	mov	r2, r3
   10652:	4807      	ldr	r0, [pc, #28]	; (10670 <ReadSignature()+0x64>)
   10654:	f003 fd36 	bl	140c4 <printf>
   10658:	4623      	mov	r3, r4
   1065a:	4619      	mov	r1, r3
   1065c:	4802      	ldr	r0, [pc, #8]	; (10668 <ReadSignature()+0x5c>)
   1065e:	f002 faeb 	bl	12c38 <__cyg_profile_func_exit>
}
   10662:	bf00      	nop
   10664:	b002      	add	sp, #8
   10666:	bd10      	pop	{r4, pc}
   10668:	0001060d 	.word	0x0001060d
   1066c:	10000274 	.word	0x10000274
   10670:	000172ac 	.word	0x000172ac

00010674 <main>:


int main() 
{ 
   10674:	b538      	push	{r3, r4, r5, lr}
   10676:	4675      	mov	r5, lr
   10678:	462b      	mov	r3, r5
   1067a:	4619      	mov	r1, r3
   1067c:	480a      	ldr	r0, [pc, #40]	; (106a8 <main+0x34>)
   1067e:	f002 fac7 	bl	12c10 <__cyg_profile_func_enter>
  LOG_INFO("Start");
   10682:	2342      	movs	r3, #66	; 0x42
   10684:	4a09      	ldr	r2, [pc, #36]	; (106ac <main+0x38>)
   10686:	490a      	ldr	r1, [pc, #40]	; (106b0 <main+0x3c>)
   10688:	480a      	ldr	r0, [pc, #40]	; (106b4 <main+0x40>)
   1068a:	f003 fd1b 	bl	140c4 <printf>
  SpiInitialize();
   1068e:	f7ff ff29 	bl	104e4 <SpiInitialize()>
  ReadSignature();
   10692:	f7ff ffbb 	bl	1060c <ReadSignature()>
  
}
   10696:	2400      	movs	r4, #0
   10698:	462b      	mov	r3, r5
   1069a:	4619      	mov	r1, r3
   1069c:	4802      	ldr	r0, [pc, #8]	; (106a8 <main+0x34>)
   1069e:	f002 facb 	bl	12c38 <__cyg_profile_func_exit>
   106a2:	4623      	mov	r3, r4
   106a4:	4618      	mov	r0, r3
   106a6:	bd38      	pop	{r3, r4, r5, pc}
   106a8:	00010675 	.word	0x00010675
   106ac:	00017310 	.word	0x00017310
   106b0:	00017304 	.word	0x00017304
   106b4:	000172c4 	.word	0x000172c4

000106b8 <__static_initialization_and_destruction_0(int, int)>:
   106b8:	b510      	push	{r4, lr}
   106ba:	b082      	sub	sp, #8
   106bc:	4674      	mov	r4, lr
   106be:	9001      	str	r0, [sp, #4]
   106c0:	9100      	str	r1, [sp, #0]
   106c2:	4623      	mov	r3, r4
   106c4:	4619      	mov	r1, r3
   106c6:	4813      	ldr	r0, [pc, #76]	; (10714 <__static_initialization_and_destruction_0(int, int)+0x5c>)
   106c8:	f002 faa2 	bl	12c10 <__cyg_profile_func_enter>
   106cc:	9b01      	ldr	r3, [sp, #4]
   106ce:	2b01      	cmp	r3, #1
   106d0:	d118      	bne.n	10704 <__static_initialization_and_destruction_0(int, int)+0x4c>
   106d2:	9b00      	ldr	r3, [sp, #0]
   106d4:	f64f 72ff 	movw	r2, #65535	; 0xffff
   106d8:	4293      	cmp	r3, r2
   106da:	d113      	bne.n	10704 <__static_initialization_and_destruction_0(int, int)+0x4c>
  LabGPIO P1_10(1,10); //CE
   106dc:	220a      	movs	r2, #10
   106de:	2101      	movs	r1, #1
   106e0:	480d      	ldr	r0, [pc, #52]	; (10718 <__static_initialization_and_destruction_0(int, int)+0x60>)
   106e2:	f7ff fe41 	bl	10368 <LabGPIO::LabGPIO(unsigned char, unsigned char)>
  LabGPIO P1_04(1,4); // MISO
   106e6:	2204      	movs	r2, #4
   106e8:	2101      	movs	r1, #1
   106ea:	480c      	ldr	r0, [pc, #48]	; (1071c <__static_initialization_and_destruction_0(int, int)+0x64>)
   106ec:	f7ff fe3c 	bl	10368 <LabGPIO::LabGPIO(unsigned char, unsigned char)>
  LabGPIO P1_00 (1,0); //SCLK
   106f0:	2200      	movs	r2, #0
   106f2:	2101      	movs	r1, #1
   106f4:	480a      	ldr	r0, [pc, #40]	; (10720 <__static_initialization_and_destruction_0(int, int)+0x68>)
   106f6:	f7ff fe37 	bl	10368 <LabGPIO::LabGPIO(unsigned char, unsigned char)>
  LabGPIO P1_01(1,1); //MOSI
   106fa:	2201      	movs	r2, #1
   106fc:	2101      	movs	r1, #1
   106fe:	4809      	ldr	r0, [pc, #36]	; (10724 <__static_initialization_and_destruction_0(int, int)+0x6c>)
   10700:	f7ff fe32 	bl	10368 <LabGPIO::LabGPIO(unsigned char, unsigned char)>
   10704:	4623      	mov	r3, r4
   10706:	4619      	mov	r1, r3
   10708:	4802      	ldr	r0, [pc, #8]	; (10714 <__static_initialization_and_destruction_0(int, int)+0x5c>)
   1070a:	f002 fa95 	bl	12c38 <__cyg_profile_func_exit>
}
   1070e:	bf00      	nop
   10710:	b002      	add	sp, #8
   10712:	bd10      	pop	{r4, pc}
   10714:	000106b9 	.word	0x000106b9
   10718:	10000274 	.word	0x10000274
   1071c:	1000027c 	.word	0x1000027c
   10720:	10000284 	.word	0x10000284
   10724:	1000028c 	.word	0x1000028c

00010728 <_GLOBAL__sub_I_P1_10>:
   10728:	b510      	push	{r4, lr}
   1072a:	4674      	mov	r4, lr
   1072c:	4623      	mov	r3, r4
   1072e:	4619      	mov	r1, r3
   10730:	4806      	ldr	r0, [pc, #24]	; (1074c <_GLOBAL__sub_I_P1_10+0x24>)
   10732:	f002 fa6d 	bl	12c10 <__cyg_profile_func_enter>
   10736:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1073a:	2001      	movs	r0, #1
   1073c:	f7ff ffbc 	bl	106b8 <__static_initialization_and_destruction_0(int, int)>
   10740:	4623      	mov	r3, r4
   10742:	4619      	mov	r1, r3
   10744:	4801      	ldr	r0, [pc, #4]	; (1074c <_GLOBAL__sub_I_P1_10+0x24>)
   10746:	f002 fa77 	bl	12c38 <__cyg_profile_func_exit>
   1074a:	bd10      	pop	{r4, pc}
   1074c:	00010729 	.word	0x00010729

00010750 <debug::PrintBacktrace(bool, void*)>:
}

[[gnu::no_instrument_function]]
inline void PrintBacktrace(bool show_make_command = false,
                           void * final_address   = nullptr)
{
   10750:	b500      	push	{lr}
   10752:	b08b      	sub	sp, #44	; 0x2c
   10754:	4603      	mov	r3, r0
   10756:	9100      	str	r1, [sp, #0]
   10758:	f88d 3007 	strb.w	r3, [sp, #7]
  printf("Stack Depth = %zd\n", GetStackDepth());
   1075c:	f002 fa8e 	bl	12c7c <GetStackDepth()>
   10760:	4603      	mov	r3, r0
   10762:	4619      	mov	r1, r3
   10764:	4831      	ldr	r0, [pc, #196]	; (1082c <debug::PrintBacktrace(bool, void*)+0xdc>)
   10766:	f003 fcad 	bl	140c4 <printf>
  // stack_depth-1 to ignore PrintBacktrace()
  // PrintBacktrace shouldn't be ignored in profiling because it causes
  // the exit to still fire, which can result in a negative stack_depth
  void ** list_of_called_functions = GetStackTrace();
   1076a:	f002 fa73 	bl	12c54 <GetStackTrace()>
   1076e:	9007      	str	r0, [sp, #28]
  size_t stack_depth               = GetStackDepth();
   10770:	f002 fa84 	bl	12c7c <GetStackDepth()>
   10774:	9006      	str	r0, [sp, #24]
  // Ignore the last function as it is the Backtrace function
  for (size_t pos = 0; pos < stack_depth - 1; pos++)
   10776:	2300      	movs	r3, #0
   10778:	9309      	str	r3, [sp, #36]	; 0x24
   1077a:	9b06      	ldr	r3, [sp, #24]
   1077c:	3b01      	subs	r3, #1
   1077e:	9a09      	ldr	r2, [sp, #36]	; 0x24
   10780:	429a      	cmp	r2, r3
   10782:	d20d      	bcs.n	107a0 <debug::PrintBacktrace(bool, void*)+0x50>
  {
    printf("  #%zu: 0x%p\n", pos, list_of_called_functions[pos]);
   10784:	9b09      	ldr	r3, [sp, #36]	; 0x24
   10786:	009b      	lsls	r3, r3, #2
   10788:	9a07      	ldr	r2, [sp, #28]
   1078a:	4413      	add	r3, r2
   1078c:	681b      	ldr	r3, [r3, #0]
   1078e:	461a      	mov	r2, r3
   10790:	9909      	ldr	r1, [sp, #36]	; 0x24
   10792:	4827      	ldr	r0, [pc, #156]	; (10830 <debug::PrintBacktrace(bool, void*)+0xe0>)
   10794:	f003 fc96 	bl	140c4 <printf>
  for (size_t pos = 0; pos < stack_depth - 1; pos++)
   10798:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1079a:	3301      	adds	r3, #1
   1079c:	9309      	str	r3, [sp, #36]	; 0x24
   1079e:	e7ec      	b.n	1077a <debug::PrintBacktrace(bool, void*)+0x2a>
  }
  if (final_address != nullptr)
   107a0:	9b00      	ldr	r3, [sp, #0]
   107a2:	2b00      	cmp	r3, #0
   107a4:	d006      	beq.n	107b4 <debug::PrintBacktrace(bool, void*)+0x64>
  {
    printf("  #%zu: 0x%p\n", stack_depth - 1, final_address);
   107a6:	9b06      	ldr	r3, [sp, #24]
   107a8:	3b01      	subs	r3, #1
   107aa:	9a00      	ldr	r2, [sp, #0]
   107ac:	4619      	mov	r1, r3
   107ae:	4820      	ldr	r0, [pc, #128]	; (10830 <debug::PrintBacktrace(bool, void*)+0xe0>)
   107b0:	f003 fc88 	bl	140c4 <printf>
  }
  if (show_make_command)
   107b4:	f89d 3007 	ldrb.w	r3, [sp, #7]
   107b8:	2b00      	cmp	r3, #0
   107ba:	d033      	beq.n	10824 <debug::PrintBacktrace(bool, void*)+0xd4>
  {
    constexpr const char kBuildType[] =
   107bc:	4a1d      	ldr	r2, [pc, #116]	; (10834 <debug::PrintBacktrace(bool, void*)+0xe4>)
   107be:	ab03      	add	r3, sp, #12
   107c0:	ca07      	ldmia	r2, {r0, r1, r2}
   107c2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#if defined(APPLICATION)
        "application";
#else
        "bootloader";
#endif
    puts("\nRun: the following command in your project directory");
   107c6:	481c      	ldr	r0, [pc, #112]	; (10838 <debug::PrintBacktrace(bool, void*)+0xe8>)
   107c8:	f002 f9f2 	bl	12bb0 <puts>
    printf("\n  " SJ2_BOLD_WHITE "make stacktrace-%s TRACES=\"", kBuildType);
   107cc:	ab03      	add	r3, sp, #12
   107ce:	4619      	mov	r1, r3
   107d0:	481a      	ldr	r0, [pc, #104]	; (1083c <debug::PrintBacktrace(bool, void*)+0xec>)
   107d2:	f003 fc77 	bl	140c4 <printf>
    for (size_t pos = 0; pos < stack_depth - 1; pos++)
   107d6:	2300      	movs	r3, #0
   107d8:	9308      	str	r3, [sp, #32]
   107da:	9b06      	ldr	r3, [sp, #24]
   107dc:	3b01      	subs	r3, #1
   107de:	9a08      	ldr	r2, [sp, #32]
   107e0:	429a      	cmp	r2, r3
   107e2:	d212      	bcs.n	1080a <debug::PrintBacktrace(bool, void*)+0xba>
    {
      if (pos != 0)
   107e4:	9b08      	ldr	r3, [sp, #32]
   107e6:	2b00      	cmp	r3, #0
   107e8:	d002      	beq.n	107f0 <debug::PrintBacktrace(bool, void*)+0xa0>
      {
        putchar(' ');
   107ea:	2020      	movs	r0, #32
   107ec:	f002 f9c4 	bl	12b78 <putchar>
      }
      printf("0x%p", list_of_called_functions[pos]);
   107f0:	9b08      	ldr	r3, [sp, #32]
   107f2:	009b      	lsls	r3, r3, #2
   107f4:	9a07      	ldr	r2, [sp, #28]
   107f6:	4413      	add	r3, r2
   107f8:	681b      	ldr	r3, [r3, #0]
   107fa:	4619      	mov	r1, r3
   107fc:	4810      	ldr	r0, [pc, #64]	; (10840 <debug::PrintBacktrace(bool, void*)+0xf0>)
   107fe:	f003 fc61 	bl	140c4 <printf>
    for (size_t pos = 0; pos < stack_depth - 1; pos++)
   10802:	9b08      	ldr	r3, [sp, #32]
   10804:	3301      	adds	r3, #1
   10806:	9308      	str	r3, [sp, #32]
   10808:	e7e7      	b.n	107da <debug::PrintBacktrace(bool, void*)+0x8a>
    }
    if (final_address != nullptr)
   1080a:	9b00      	ldr	r3, [sp, #0]
   1080c:	2b00      	cmp	r3, #0
   1080e:	d003      	beq.n	10818 <debug::PrintBacktrace(bool, void*)+0xc8>
    {
      printf(" 0x%p", final_address);
   10810:	9900      	ldr	r1, [sp, #0]
   10812:	480c      	ldr	r0, [pc, #48]	; (10844 <debug::PrintBacktrace(bool, void*)+0xf4>)
   10814:	f003 fc56 	bl	140c4 <printf>
    }
    puts("\"\n" SJ2_COLOR_RESET);
   10818:	480b      	ldr	r0, [pc, #44]	; (10848 <debug::PrintBacktrace(bool, void*)+0xf8>)
   1081a:	f002 f9c9 	bl	12bb0 <puts>
    puts(
   1081e:	480b      	ldr	r0, [pc, #44]	; (1084c <debug::PrintBacktrace(bool, void*)+0xfc>)
   10820:	f002 f9c6 	bl	12bb0 <puts>
        "This will report the file and line number that led to this function "
        "being called.");
  }
}
   10824:	bf00      	nop
   10826:	b00b      	add	sp, #44	; 0x2c
   10828:	f85d fb04 	ldr.w	pc, [sp], #4
   1082c:	0001731c 	.word	0x0001731c
   10830:	00017330 	.word	0x00017330
   10834:	0001740c 	.word	0x0001740c
   10838:	00017340 	.word	0x00017340
   1083c:	00017378 	.word	0x00017378
   10840:	000173a0 	.word	0x000173a0
   10844:	000173a8 	.word	0x000173a8
   10848:	000173b0 	.word	0x000173b0
   1084c:	000173b8 	.word	0x000173b8

00010850 <(anonymous namespace)::DefaultUptime()>:
{
// uptime in nanoseconds
inline uint64_t uptime = 0;
// Returns the system uptime in nanoseconds, do not use this function directly
[[gnu::always_inline]] inline uint64_t DefaultUptime()
{
   10850:	b570      	push	{r4, r5, r6, lr}
   10852:	4676      	mov	r6, lr
   10854:	4633      	mov	r3, r6
   10856:	4619      	mov	r1, r3
   10858:	4807      	ldr	r0, [pc, #28]	; (10878 <(anonymous namespace)::DefaultUptime()+0x28>)
   1085a:	f002 f9d9 	bl	12c10 <__cyg_profile_func_enter>
  return uptime;
   1085e:	4b07      	ldr	r3, [pc, #28]	; (1087c <(anonymous namespace)::DefaultUptime()+0x2c>)
   10860:	e9d3 4500 	ldrd	r4, r5, [r3]
   10864:	4633      	mov	r3, r6
   10866:	4619      	mov	r1, r3
   10868:	4803      	ldr	r0, [pc, #12]	; (10878 <(anonymous namespace)::DefaultUptime()+0x28>)
   1086a:	f002 f9e5 	bl	12c38 <__cyg_profile_func_exit>
   1086e:	4623      	mov	r3, r4
   10870:	462c      	mov	r4, r5
}
   10872:	4618      	mov	r0, r3
   10874:	4621      	mov	r1, r4
   10876:	bd70      	pop	{r4, r5, r6, pc}
   10878:	00010851 	.word	0x00010851
   1087c:	10000298 	.word	0x10000298

00010880 <SetUptimeFunction(unsigned long long (*)())>:

using UptimeFunction = uint64_t (*)();
// Returns the system uptime in nanoseconds.
inline UptimeFunction Uptime = DefaultUptime;  // NOLINT
inline void SetUptimeFunction(UptimeFunction uptime_function)
{
   10880:	b510      	push	{r4, lr}
   10882:	b082      	sub	sp, #8
   10884:	4674      	mov	r4, lr
   10886:	9001      	str	r0, [sp, #4]
   10888:	4623      	mov	r3, r4
   1088a:	4619      	mov	r1, r3
   1088c:	4806      	ldr	r0, [pc, #24]	; (108a8 <SetUptimeFunction(unsigned long long (*)())+0x28>)
   1088e:	f002 f9bf 	bl	12c10 <__cyg_profile_func_enter>
  Uptime = uptime_function;
   10892:	4a06      	ldr	r2, [pc, #24]	; (108ac <SetUptimeFunction(unsigned long long (*)())+0x2c>)
   10894:	9b01      	ldr	r3, [sp, #4]
   10896:	6013      	str	r3, [r2, #0]
   10898:	4623      	mov	r3, r4
   1089a:	4619      	mov	r1, r3
   1089c:	4802      	ldr	r0, [pc, #8]	; (108a8 <SetUptimeFunction(unsigned long long (*)())+0x28>)
   1089e:	f002 f9cb 	bl	12c38 <__cyg_profile_func_exit>
}
   108a2:	bf00      	nop
   108a4:	b002      	add	sp, #8
   108a6:	bd10      	pop	{r4, pc}
   108a8:	00010881 	.word	0x00010881
   108ac:	10000018 	.word	0x10000018

000108b0 <Milliseconds()>:
// Get system uptime in milliseconds as a 64-bit integer
inline uint64_t Milliseconds()
{
   108b0:	b570      	push	{r4, r5, r6, lr}
   108b2:	4674      	mov	r4, lr
   108b4:	4623      	mov	r3, r4
   108b6:	4619      	mov	r1, r3
   108b8:	480c      	ldr	r0, [pc, #48]	; (108ec <Milliseconds()+0x3c>)
   108ba:	f002 f9a9 	bl	12c10 <__cyg_profile_func_enter>
  return Uptime() / 1'000;
   108be:	4b0c      	ldr	r3, [pc, #48]	; (108f0 <Milliseconds()+0x40>)
   108c0:	681b      	ldr	r3, [r3, #0]
   108c2:	4798      	blx	r3
   108c4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   108c8:	f04f 0300 	mov.w	r3, #0
   108cc:	f006 faf6 	bl	16ebc <__aeabi_uldivmod>
   108d0:	4602      	mov	r2, r0
   108d2:	460b      	mov	r3, r1
   108d4:	4615      	mov	r5, r2
   108d6:	461e      	mov	r6, r3
   108d8:	4623      	mov	r3, r4
   108da:	4619      	mov	r1, r3
   108dc:	4803      	ldr	r0, [pc, #12]	; (108ec <Milliseconds()+0x3c>)
   108de:	f002 f9ab 	bl	12c38 <__cyg_profile_func_exit>
   108e2:	462b      	mov	r3, r5
   108e4:	4634      	mov	r4, r6
}
   108e6:	4618      	mov	r0, r3
   108e8:	4621      	mov	r1, r4
   108ea:	bd70      	pop	{r4, r5, r6, pc}
   108ec:	000108b1 	.word	0x000108b1
   108f0:	10000018 	.word	0x10000018

000108f4 <Lpc40xxSystemController::SetClockFrequency(unsigned char)>:

  inline static LPC_SC_TypeDef * system_controller = LPC_SC;

  constexpr Lpc40xxSystemController() {}

  uint32_t SetClockFrequency(uint8_t frequency_in_mhz) override
   108f4:	b500      	push	{lr}
   108f6:	b085      	sub	sp, #20
   108f8:	9001      	str	r0, [sp, #4]
   108fa:	460b      	mov	r3, r1
   108fc:	f88d 3003 	strb.w	r3, [sp, #3]
  {
    uint32_t offset = 0;
   10900:	2300      	movs	r3, #0
   10902:	9303      	str	r3, [sp, #12]
    SelectOscillatorSource(OscillatorSource::kIrc);
   10904:	2100      	movs	r1, #0
   10906:	9801      	ldr	r0, [sp, #4]
   10908:	f000 f8ce 	bl	10aa8 <Lpc40xxSystemController::SelectOscillatorSource(Lpc40xxSystemController::OscillatorSource)>
    if (frequency_in_mhz > 12)
   1090c:	f89d 3003 	ldrb.w	r3, [sp, #3]
   10910:	2b0c      	cmp	r3, #12
   10912:	d916      	bls.n	10942 <Lpc40xxSystemController::SetClockFrequency(unsigned char)+0x4e>
    {
      offset = SetMainPll(PllInput::kIrc, frequency_in_mhz);
   10914:	f89d 3003 	ldrb.w	r3, [sp, #3]
   10918:	b29b      	uxth	r3, r3
   1091a:	461a      	mov	r2, r3
   1091c:	210c      	movs	r1, #12
   1091e:	9801      	ldr	r0, [sp, #4]
   10920:	f000 f9ac 	bl	10c7c <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)>
   10924:	9003      	str	r0, [sp, #12]
      SelectMainClockSource(MainClockSource::kPllClock);
   10926:	f44f 7180 	mov.w	r1, #256	; 0x100
   1092a:	9801      	ldr	r0, [sp, #4]
   1092c:	f000 f8d6 	bl	10adc <Lpc40xxSystemController::SelectMainClockSource(Lpc40xxSystemController::MainClockSource)>
      speed_in_hertz = frequency_in_mhz * 1'000'000;
   10930:	f89d 3003 	ldrb.w	r3, [sp, #3]
   10934:	4a10      	ldr	r2, [pc, #64]	; (10978 <Lpc40xxSystemController::SetClockFrequency(unsigned char)+0x84>)
   10936:	fb02 f303 	mul.w	r3, r2, r3
   1093a:	461a      	mov	r2, r3
   1093c:	4b0f      	ldr	r3, [pc, #60]	; (1097c <Lpc40xxSystemController::SetClockFrequency(unsigned char)+0x88>)
   1093e:	601a      	str	r2, [r3, #0]
   10940:	e006      	b.n	10950 <Lpc40xxSystemController::SetClockFrequency(unsigned char)+0x5c>
    }
    else
    {
      SelectMainClockSource(MainClockSource::kBaseClock);
   10942:	2100      	movs	r1, #0
   10944:	9801      	ldr	r0, [sp, #4]
   10946:	f000 f8c9 	bl	10adc <Lpc40xxSystemController::SelectMainClockSource(Lpc40xxSystemController::MainClockSource)>
      speed_in_hertz = kDefaultIRCFrequency;
   1094a:	4b0c      	ldr	r3, [pc, #48]	; (1097c <Lpc40xxSystemController::SetClockFrequency(unsigned char)+0x88>)
   1094c:	4a0c      	ldr	r2, [pc, #48]	; (10980 <Lpc40xxSystemController::SetClockFrequency(unsigned char)+0x8c>)
   1094e:	601a      	str	r2, [r3, #0]
    }
    SetCpuClockDivider(kDivideInputBy1);
   10950:	2101      	movs	r1, #1
   10952:	9801      	ldr	r0, [sp, #4]
   10954:	f000 fa4a 	bl	10dec <Lpc40xxSystemController::SetCpuClockDivider(unsigned char)>
    SetPeripheralClockDivider(kDivideInputBy1);
   10958:	9b01      	ldr	r3, [sp, #4]
   1095a:	681b      	ldr	r3, [r3, #0]
   1095c:	3304      	adds	r3, #4
   1095e:	681b      	ldr	r3, [r3, #0]
   10960:	2101      	movs	r1, #1
   10962:	9801      	ldr	r0, [sp, #4]
   10964:	4798      	blx	r3
    SetEmcClockDivider(EmcDivider::kSameSpeedAsCpu);
   10966:	2100      	movs	r1, #0
   10968:	9801      	ldr	r0, [sp, #4]
   1096a:	f000 fa73 	bl	10e54 <Lpc40xxSystemController::SetEmcClockDivider(Lpc40xxSystemController::EmcDivider)>
    return offset;
   1096e:	9b03      	ldr	r3, [sp, #12]
  }
   10970:	4618      	mov	r0, r3
   10972:	b005      	add	sp, #20
   10974:	f85d fb04 	ldr.w	pc, [sp], #4
   10978:	000f4240 	.word	0x000f4240
   1097c:	10000020 	.word	0x10000020
   10980:	00b71b00 	.word	0x00b71b00

00010984 <Lpc40xxSystemController::SetPeripheralClockDivider(unsigned char)>:

  void SetPeripheralClockDivider(uint8_t peripheral_divider) override
   10984:	b500      	push	{lr}
   10986:	b083      	sub	sp, #12
   10988:	9001      	str	r0, [sp, #4]
   1098a:	460b      	mov	r3, r1
   1098c:	f88d 3003 	strb.w	r3, [sp, #3]
  {
    SJ2_ASSERT_FATAL(peripheral_divider <= 4, "Divider mustn't exceed 32");
   10990:	f89d 3003 	ldrb.w	r3, [sp, #3]
   10994:	2b04      	cmp	r3, #4
   10996:	d90d      	bls.n	109b4 <Lpc40xxSystemController::SetPeripheralClockDivider(unsigned char)+0x30>
   10998:	23ae      	movs	r3, #174	; 0xae
   1099a:	4a0b      	ldr	r2, [pc, #44]	; (109c8 <Lpc40xxSystemController::SetPeripheralClockDivider(unsigned char)+0x44>)
   1099c:	490b      	ldr	r1, [pc, #44]	; (109cc <Lpc40xxSystemController::SetPeripheralClockDivider(unsigned char)+0x48>)
   1099e:	480c      	ldr	r0, [pc, #48]	; (109d0 <Lpc40xxSystemController::SetPeripheralClockDivider(unsigned char)+0x4c>)
   109a0:	f003 fb90 	bl	140c4 <printf>
   109a4:	480b      	ldr	r0, [pc, #44]	; (109d4 <Lpc40xxSystemController::SetPeripheralClockDivider(unsigned char)+0x50>)
   109a6:	f002 f903 	bl	12bb0 <puts>
   109aa:	2100      	movs	r1, #0
   109ac:	2001      	movs	r0, #1
   109ae:	f7ff fecf 	bl	10750 <debug::PrintBacktrace(bool, void*)>
   109b2:	e7fe      	b.n	109b2 <Lpc40xxSystemController::SetPeripheralClockDivider(unsigned char)+0x2e>
    system_controller->PCLKSEL = peripheral_divider;
   109b4:	4b08      	ldr	r3, [pc, #32]	; (109d8 <Lpc40xxSystemController::SetPeripheralClockDivider(unsigned char)+0x54>)
   109b6:	681b      	ldr	r3, [r3, #0]
   109b8:	f89d 2003 	ldrb.w	r2, [sp, #3]
   109bc:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
  }
   109c0:	bf00      	nop
   109c2:	b003      	add	sp, #12
   109c4:	f85d fb04 	ldr.w	pc, [sp], #4
   109c8:	00017aa4 	.word	0x00017aa4
   109cc:	000178cc 	.word	0x000178cc
   109d0:	00017418 	.word	0x00017418
   109d4:	000174b8 	.word	0x000174b8
   109d8:	1000001c 	.word	0x1000001c

000109dc <Lpc40xxSystemController::GetPeripheralClockDivider() const>:

  uint32_t GetPeripheralClockDivider() const override
   109dc:	b082      	sub	sp, #8
   109de:	9001      	str	r0, [sp, #4]
  {
#if defined(HOST_TEST)
    return 1;
#else
    return system_controller->PCLKSEL;
   109e0:	4b03      	ldr	r3, [pc, #12]	; (109f0 <Lpc40xxSystemController::GetPeripheralClockDivider() const+0x14>)
   109e2:	681b      	ldr	r3, [r3, #0]
   109e4:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
#endif
  }
   109e8:	4618      	mov	r0, r3
   109ea:	b002      	add	sp, #8
   109ec:	4770      	bx	lr
   109ee:	bf00      	nop
   109f0:	1000001c 	.word	0x1000001c

000109f4 <Lpc40xxSystemController::GetSystemFrequency() const>:

  uint32_t GetSystemFrequency() const override
   109f4:	b082      	sub	sp, #8
   109f6:	9001      	str	r0, [sp, #4]
  {
#if defined(HOST_TEST)
    return config::kSystemClockRate;
#else
    return speed_in_hertz;
   109f8:	4b02      	ldr	r3, [pc, #8]	; (10a04 <Lpc40xxSystemController::GetSystemFrequency() const+0x10>)
   109fa:	681b      	ldr	r3, [r3, #0]
#endif
  }
   109fc:	4618      	mov	r0, r3
   109fe:	b002      	add	sp, #8
   10a00:	4770      	bx	lr
   10a02:	bf00      	nop
   10a04:	10000020 	.word	0x10000020

00010a08 <Lpc40xxSystemController::GetPeripheralFrequency() const>:

  uint32_t GetPeripheralFrequency() const override
   10a08:	b500      	push	{lr}
   10a0a:	b085      	sub	sp, #20
   10a0c:	9001      	str	r0, [sp, #4]
  {
    uint32_t peripheral_clock_divider = GetPeripheralClockDivider();
   10a0e:	9b01      	ldr	r3, [sp, #4]
   10a10:	681b      	ldr	r3, [r3, #0]
   10a12:	3308      	adds	r3, #8
   10a14:	681b      	ldr	r3, [r3, #0]
   10a16:	9801      	ldr	r0, [sp, #4]
   10a18:	4798      	blx	r3
   10a1a:	9002      	str	r0, [sp, #8]
    uint32_t result = 0;  // return 0 if peripheral_clock_divider == 0
   10a1c:	2300      	movs	r3, #0
   10a1e:	9303      	str	r3, [sp, #12]
    if (peripheral_clock_divider != 0)
   10a20:	9b02      	ldr	r3, [sp, #8]
   10a22:	2b00      	cmp	r3, #0
   10a24:	d00a      	beq.n	10a3c <Lpc40xxSystemController::GetPeripheralFrequency() const+0x34>
    {
      result = GetSystemFrequency() / peripheral_clock_divider;
   10a26:	9b01      	ldr	r3, [sp, #4]
   10a28:	681b      	ldr	r3, [r3, #0]
   10a2a:	330c      	adds	r3, #12
   10a2c:	681b      	ldr	r3, [r3, #0]
   10a2e:	9801      	ldr	r0, [sp, #4]
   10a30:	4798      	blx	r3
   10a32:	4602      	mov	r2, r0
   10a34:	9b02      	ldr	r3, [sp, #8]
   10a36:	fbb2 f3f3 	udiv	r3, r2, r3
   10a3a:	9303      	str	r3, [sp, #12]
    }
    return result;
   10a3c:	9b03      	ldr	r3, [sp, #12]
  }
   10a3e:	4618      	mov	r0, r3
   10a40:	b005      	add	sp, #20
   10a42:	f85d fb04 	ldr.w	pc, [sp], #4
   10a46:	Address 0x0000000000010a46 is out of bounds.


00010a48 <Lpc40xxSystemController::PowerUpPeripheral(SystemControllerInterface::PeripheralID const&)>:

  void PowerUpPeripheral(const PeripheralID & peripheral_select) override
   10a48:	b084      	sub	sp, #16
   10a4a:	9001      	str	r0, [sp, #4]
   10a4c:	9100      	str	r1, [sp, #0]
  {
    auto power_connection_with_enabled_peripheral =
        system_controller->PCONP | (1 << peripheral_select.device_id);
   10a4e:	4b09      	ldr	r3, [pc, #36]	; (10a74 <Lpc40xxSystemController::PowerUpPeripheral(SystemControllerInterface::PeripheralID const&)+0x2c>)
   10a50:	681b      	ldr	r3, [r3, #0]
   10a52:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
   10a56:	9a00      	ldr	r2, [sp, #0]
   10a58:	6812      	ldr	r2, [r2, #0]
   10a5a:	2101      	movs	r1, #1
   10a5c:	fa01 f202 	lsl.w	r2, r1, r2
   10a60:	4313      	orrs	r3, r2
   10a62:	9303      	str	r3, [sp, #12]

    system_controller->PCONP = power_connection_with_enabled_peripheral;
   10a64:	4b03      	ldr	r3, [pc, #12]	; (10a74 <Lpc40xxSystemController::PowerUpPeripheral(SystemControllerInterface::PeripheralID const&)+0x2c>)
   10a66:	681b      	ldr	r3, [r3, #0]
   10a68:	9a03      	ldr	r2, [sp, #12]
   10a6a:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  }
   10a6e:	bf00      	nop
   10a70:	b004      	add	sp, #16
   10a72:	4770      	bx	lr
   10a74:	1000001c 	.word	0x1000001c

00010a78 <Lpc40xxSystemController::PowerDownPeripheral(SystemControllerInterface::PeripheralID const&)>:
  void PowerDownPeripheral(const PeripheralID & peripheral_select) override
   10a78:	b084      	sub	sp, #16
   10a7a:	9001      	str	r0, [sp, #4]
   10a7c:	9100      	str	r1, [sp, #0]
  {
    auto power_connection_without_enabled_peripheral =
        system_controller->PCONP & (1 << peripheral_select.device_id);
   10a7e:	4b09      	ldr	r3, [pc, #36]	; (10aa4 <Lpc40xxSystemController::PowerDownPeripheral(SystemControllerInterface::PeripheralID const&)+0x2c>)
   10a80:	681b      	ldr	r3, [r3, #0]
   10a82:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
   10a86:	9a00      	ldr	r2, [sp, #0]
   10a88:	6812      	ldr	r2, [r2, #0]
   10a8a:	2101      	movs	r1, #1
   10a8c:	fa01 f202 	lsl.w	r2, r1, r2
   10a90:	4013      	ands	r3, r2
   10a92:	9303      	str	r3, [sp, #12]

    system_controller->PCONP = power_connection_without_enabled_peripheral;
   10a94:	4b03      	ldr	r3, [pc, #12]	; (10aa4 <Lpc40xxSystemController::PowerDownPeripheral(SystemControllerInterface::PeripheralID const&)+0x2c>)
   10a96:	681b      	ldr	r3, [r3, #0]
   10a98:	9a03      	ldr	r2, [sp, #12]
   10a9a:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  }
   10a9e:	bf00      	nop
   10aa0:	b004      	add	sp, #16
   10aa2:	4770      	bx	lr
   10aa4:	1000001c 	.word	0x1000001c

00010aa8 <Lpc40xxSystemController::SelectOscillatorSource(Lpc40xxSystemController::OscillatorSource)>:

 private:
  void SelectOscillatorSource(OscillatorSource source)
   10aa8:	b084      	sub	sp, #16
   10aaa:	9001      	str	r0, [sp, #4]
   10aac:	460b      	mov	r3, r1
   10aae:	f8ad 3002 	strh.w	r3, [sp, #2]
  {
    uint32_t source_bit = static_cast<uint32_t>(source);
   10ab2:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   10ab6:	9303      	str	r3, [sp, #12]
    system_controller->CLKSRCSEL =
        (system_controller->CLKSRCSEL & ~(kOscillatorSelect)) | source_bit;
   10ab8:	4b07      	ldr	r3, [pc, #28]	; (10ad8 <Lpc40xxSystemController::SelectOscillatorSource(Lpc40xxSystemController::OscillatorSource)+0x30>)
   10aba:	681b      	ldr	r3, [r3, #0]
   10abc:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
   10ac0:	f023 0101 	bic.w	r1, r3, #1
    system_controller->CLKSRCSEL =
   10ac4:	4b04      	ldr	r3, [pc, #16]	; (10ad8 <Lpc40xxSystemController::SelectOscillatorSource(Lpc40xxSystemController::OscillatorSource)+0x30>)
   10ac6:	681b      	ldr	r3, [r3, #0]
        (system_controller->CLKSRCSEL & ~(kOscillatorSelect)) | source_bit;
   10ac8:	9a03      	ldr	r2, [sp, #12]
   10aca:	430a      	orrs	r2, r1
    system_controller->CLKSRCSEL =
   10acc:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
  }
   10ad0:	bf00      	nop
   10ad2:	b004      	add	sp, #16
   10ad4:	4770      	bx	lr
   10ad6:	bf00      	nop
   10ad8:	1000001c 	.word	0x1000001c

00010adc <Lpc40xxSystemController::SelectMainClockSource(Lpc40xxSystemController::MainClockSource)>:

  void SelectMainClockSource(MainClockSource source)
   10adc:	b082      	sub	sp, #8
   10ade:	9001      	str	r0, [sp, #4]
   10ae0:	460b      	mov	r3, r1
   10ae2:	f8ad 3002 	strh.w	r3, [sp, #2]
  {
    system_controller->CCLKSEL =
        (system_controller->CCLKSEL & ~(kBaseClockSelect)) |
   10ae6:	4b08      	ldr	r3, [pc, #32]	; (10b08 <Lpc40xxSystemController::SelectMainClockSource(Lpc40xxSystemController::MainClockSource)+0x2c>)
   10ae8:	681b      	ldr	r3, [r3, #0]
   10aea:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   10aee:	f423 7180 	bic.w	r1, r3, #256	; 0x100
        static_cast<uint32_t>(source);
   10af2:	f8bd 2002 	ldrh.w	r2, [sp, #2]
    system_controller->CCLKSEL =
   10af6:	4b04      	ldr	r3, [pc, #16]	; (10b08 <Lpc40xxSystemController::SelectMainClockSource(Lpc40xxSystemController::MainClockSource)+0x2c>)
   10af8:	681b      	ldr	r3, [r3, #0]
        (system_controller->CCLKSEL & ~(kBaseClockSelect)) |
   10afa:	430a      	orrs	r2, r1
    system_controller->CCLKSEL =
   10afc:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
  }
   10b00:	bf00      	nop
   10b02:	b002      	add	sp, #8
   10b04:	4770      	bx	lr
   10b06:	bf00      	nop
   10b08:	1000001c 	.word	0x1000001c

00010b0c <Lpc40xxSystemController::SelectUsbClockSource(Lpc40xxSystemController::UsbSource)>:

  void SelectUsbClockSource(UsbSource usb_clock)
   10b0c:	b082      	sub	sp, #8
   10b0e:	9001      	str	r0, [sp, #4]
   10b10:	460b      	mov	r3, r1
   10b12:	f8ad 3002 	strh.w	r3, [sp, #2]
  {
    system_controller->USBCLKSEL =
        (system_controller->USBCLKSEL & ~(kUsbClockSource)) |
   10b16:	4b08      	ldr	r3, [pc, #32]	; (10b38 <Lpc40xxSystemController::SelectUsbClockSource(Lpc40xxSystemController::UsbSource)+0x2c>)
   10b18:	681b      	ldr	r3, [r3, #0]
   10b1a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
   10b1e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
        static_cast<uint32_t>(usb_clock);
   10b22:	f8bd 2002 	ldrh.w	r2, [sp, #2]
    system_controller->USBCLKSEL =
   10b26:	4b04      	ldr	r3, [pc, #16]	; (10b38 <Lpc40xxSystemController::SelectUsbClockSource(Lpc40xxSystemController::UsbSource)+0x2c>)
   10b28:	681b      	ldr	r3, [r3, #0]
        (system_controller->USBCLKSEL & ~(kUsbClockSource)) |
   10b2a:	430a      	orrs	r2, r1
    system_controller->USBCLKSEL =
   10b2c:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
  }
   10b30:	bf00      	nop
   10b32:	b002      	add	sp, #8
   10b34:	4770      	bx	lr
   10b36:	bf00      	nop
   10b38:	1000001c 	.word	0x1000001c

00010b3c <Lpc40xxSystemController::SelectSpifiClockSource(Lpc40xxSystemController::SpifiSource)>:

  void SelectSpifiClockSource(SpifiSource spifi_clock)
   10b3c:	b082      	sub	sp, #8
   10b3e:	9001      	str	r0, [sp, #4]
   10b40:	460b      	mov	r3, r1
   10b42:	f8ad 3002 	strh.w	r3, [sp, #2]
  {
    system_controller->SPIFISEL =
        (system_controller->SPIFISEL & ~(kSpifiClockSource)) |
   10b46:	4b08      	ldr	r3, [pc, #32]	; (10b68 <Lpc40xxSystemController::SelectSpifiClockSource(Lpc40xxSystemController::SpifiSource)+0x2c>)
   10b48:	681b      	ldr	r3, [r3, #0]
   10b4a:	f8d3 31b4 	ldr.w	r3, [r3, #436]	; 0x1b4
   10b4e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
        static_cast<uint32_t>(spifi_clock);
   10b52:	f8bd 2002 	ldrh.w	r2, [sp, #2]
    system_controller->SPIFISEL =
   10b56:	4b04      	ldr	r3, [pc, #16]	; (10b68 <Lpc40xxSystemController::SelectSpifiClockSource(Lpc40xxSystemController::SpifiSource)+0x2c>)
   10b58:	681b      	ldr	r3, [r3, #0]
        (system_controller->SPIFISEL & ~(kSpifiClockSource)) |
   10b5a:	430a      	orrs	r2, r1
    system_controller->SPIFISEL =
   10b5c:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
  }
   10b60:	bf00      	nop
   10b62:	b002      	add	sp, #8
   10b64:	4770      	bx	lr
   10b66:	bf00      	nop
   10b68:	1000001c 	.word	0x1000001c

00010b6c <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)>:

  uint32_t CalculatePll(PllInput input_frequency, uint16_t desired_speed_in_mhz)
   10b6c:	b500      	push	{lr}
   10b6e:	b087      	sub	sp, #28
   10b70:	9001      	str	r0, [sp, #4]
   10b72:	460b      	mov	r3, r1
   10b74:	f8ad 3002 	strh.w	r3, [sp, #2]
   10b78:	4613      	mov	r3, r2
   10b7a:	f8ad 3000 	strh.w	r3, [sp]
  {
    SJ2_ASSERT_FATAL(desired_speed_in_mhz < 384 && desired_speed_in_mhz > 12,
   10b7e:	f8bd 3000 	ldrh.w	r3, [sp]
   10b82:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
   10b86:	d203      	bcs.n	10b90 <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)+0x24>
   10b88:	f8bd 3000 	ldrh.w	r3, [sp]
   10b8c:	2b0c      	cmp	r3, #12
   10b8e:	d80d      	bhi.n	10bac <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)+0x40>
   10b90:	23ff      	movs	r3, #255	; 0xff
   10b92:	4a34      	ldr	r2, [pc, #208]	; (10c64 <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)+0xf8>)
   10b94:	4934      	ldr	r1, [pc, #208]	; (10c68 <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)+0xfc>)
   10b96:	4835      	ldr	r0, [pc, #212]	; (10c6c <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)+0x100>)
   10b98:	f003 fa94 	bl	140c4 <printf>
   10b9c:	4834      	ldr	r0, [pc, #208]	; (10c70 <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)+0x104>)
   10b9e:	f002 f807 	bl	12bb0 <puts>
   10ba2:	2100      	movs	r1, #0
   10ba4:	2001      	movs	r0, #1
   10ba6:	f7ff fdd3 	bl	10750 <debug::PrintBacktrace(bool, void*)>
   10baa:	e7fe      	b.n	10baa <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)+0x3e>
                     "Frequency must be lower than 384 MHz"
                     "and greater than or equal to 12 MHz");
    bool calculating = true;
   10bac:	2301      	movs	r3, #1
   10bae:	f88d 3017 	strb.w	r3, [sp, #23]
    uint32_t multiplier_value;
    if ((desired_speed_in_mhz % static_cast<uint16_t>(input_frequency)) >= 1)
   10bb2:	f8bd 3000 	ldrh.w	r3, [sp]
   10bb6:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   10bba:	fbb3 f1f2 	udiv	r1, r3, r2
   10bbe:	fb02 f201 	mul.w	r2, r2, r1
   10bc2:	1a9b      	subs	r3, r3, r2
   10bc4:	b29b      	uxth	r3, r3
   10bc6:	2b00      	cmp	r3, #0
   10bc8:	d009      	beq.n	10bde <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)+0x72>
    {
      multiplier_value = static_cast<uint32_t>(
          (desired_speed_in_mhz / static_cast<uint16_t>(input_frequency)) + 1);
   10bca:	f8bd 2000 	ldrh.w	r2, [sp]
   10bce:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   10bd2:	fbb2 f3f3 	udiv	r3, r2, r3
   10bd6:	b29b      	uxth	r3, r3
   10bd8:	3301      	adds	r3, #1
      multiplier_value = static_cast<uint32_t>(
   10bda:	9304      	str	r3, [sp, #16]
   10bdc:	e007      	b.n	10bee <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)+0x82>
    }
    else
    {
      multiplier_value = static_cast<uint32_t>(
          desired_speed_in_mhz / static_cast<uint16_t>(input_frequency));
   10bde:	f8bd 2000 	ldrh.w	r2, [sp]
   10be2:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   10be6:	fbb2 f3f3 	udiv	r3, r2, r3
   10bea:	b29b      	uxth	r3, r3
      multiplier_value = static_cast<uint32_t>(
   10bec:	9304      	str	r3, [sp, #16]
    }
    uint16_t divider_value = 1;
   10bee:	2301      	movs	r3, #1
   10bf0:	f8ad 300e 	strh.w	r3, [sp, #14]
    while (calculating)
   10bf4:	f89d 3017 	ldrb.w	r3, [sp, #23]
   10bf8:	2b00      	cmp	r3, #0
   10bfa:	d02e      	beq.n	10c5a <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)+0xee>
    {
      uint16_t current_controlled_oscillator_frequency;
      current_controlled_oscillator_frequency = static_cast<uint16_t>(
   10bfc:	9b04      	ldr	r3, [sp, #16]
   10bfe:	b29b      	uxth	r3, r3
   10c00:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   10c04:	fb12 f303 	smulbb	r3, r2, r3
   10c08:	b29b      	uxth	r3, r3
   10c0a:	f8bd 200e 	ldrh.w	r2, [sp, #14]
   10c0e:	fb12 f303 	smulbb	r3, r2, r3
   10c12:	b29b      	uxth	r3, r3
   10c14:	005b      	lsls	r3, r3, #1
   10c16:	f8ad 300c 	strh.w	r3, [sp, #12]
          (static_cast<uint16_t>(input_frequency) * multiplier_value * 2) *
          divider_value);
      if (current_controlled_oscillator_frequency >= 156)
   10c1a:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   10c1e:	2b9b      	cmp	r3, #155	; 0x9b
   10c20:	d903      	bls.n	10c2a <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)+0xbe>
      {
        calculating = false;
   10c22:	2300      	movs	r3, #0
   10c24:	f88d 3017 	strb.w	r3, [sp, #23]
   10c28:	e7e4      	b.n	10bf4 <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)+0x88>
      }
      else
      {
        divider_value = static_cast<uint16_t>(divider_value * 2);
   10c2a:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   10c2e:	005b      	lsls	r3, r3, #1
   10c30:	f8ad 300e 	strh.w	r3, [sp, #14]
        SJ2_ASSERT_FATAL(divider_value < 8,
   10c34:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   10c38:	2b07      	cmp	r3, #7
   10c3a:	d9db      	bls.n	10bf4 <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)+0x88>
   10c3c:	f240 131b 	movw	r3, #283	; 0x11b
   10c40:	4a08      	ldr	r2, [pc, #32]	; (10c64 <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)+0xf8>)
   10c42:	490c      	ldr	r1, [pc, #48]	; (10c74 <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)+0x108>)
   10c44:	480c      	ldr	r0, [pc, #48]	; (10c78 <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)+0x10c>)
   10c46:	f003 fa3d 	bl	140c4 <printf>
   10c4a:	4809      	ldr	r0, [pc, #36]	; (10c70 <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)+0x104>)
   10c4c:	f001 ffb0 	bl	12bb0 <puts>
   10c50:	2100      	movs	r1, #0
   10c52:	2001      	movs	r0, #1
   10c54:	f7ff fd7c 	bl	10750 <debug::PrintBacktrace(bool, void*)>
   10c58:	e7fe      	b.n	10c58 <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)+0xec>
                         "PLL divider value went out of bounds");
      }
    }

    return multiplier_value;
   10c5a:	9b04      	ldr	r3, [sp, #16]
  }
   10c5c:	4618      	mov	r0, r3
   10c5e:	b007      	add	sp, #28
   10c60:	f85d fb04 	ldr.w	pc, [sp], #4
   10c64:	00017b4c 	.word	0x00017b4c
   10c68:	000178e4 	.word	0x000178e4
   10c6c:	000174d0 	.word	0x000174d0
   10c70:	000174b8 	.word	0x000174b8
   10c74:	000178fc 	.word	0x000178fc
   10c78:	000175c0 	.word	0x000175c0

00010c7c <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)>:

  uint32_t SetMainPll(PllInput input_frequency, uint16_t desired_speed_in_mhz)
   10c7c:	b510      	push	{r4, lr}
   10c7e:	b08a      	sub	sp, #40	; 0x28
   10c80:	9001      	str	r0, [sp, #4]
   10c82:	460b      	mov	r3, r1
   10c84:	f8ad 3002 	strh.w	r3, [sp, #2]
   10c88:	4613      	mov	r3, r2
   10c8a:	f8ad 3000 	strh.w	r3, [sp]
  {
    uint16_t divider_value = 1;
   10c8e:	2301      	movs	r3, #1
   10c90:	f8ad 301a 	strh.w	r3, [sp, #26]
    uint64_t timeout_time  = Milliseconds() + kDefaultTimeout;
   10c94:	f7ff fe0c 	bl	108b0 <Milliseconds()>
   10c98:	460a      	mov	r2, r1
   10c9a:	4601      	mov	r1, r0
   10c9c:	f511 737a 	adds.w	r3, r1, #1000	; 0x3e8
   10ca0:	f142 0400 	adc.w	r4, r2, #0
   10ca4:	e9cd 3404 	strd	r3, r4, [sp, #16]
    uint64_t current_time  = Milliseconds();
   10ca8:	f7ff fe02 	bl	108b0 <Milliseconds()>
   10cac:	e9cd 0108 	strd	r0, r1, [sp, #32]
    uint32_t multiplier_value =
        CalculatePll(input_frequency, desired_speed_in_mhz);
   10cb0:	f8bd 2000 	ldrh.w	r2, [sp]
   10cb4:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   10cb8:	4619      	mov	r1, r3
   10cba:	9801      	ldr	r0, [sp, #4]
   10cbc:	f7ff ff56 	bl	10b6c <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)>
   10cc0:	9003      	str	r0, [sp, #12]
    uint32_t actual_speed =
        static_cast<uint32_t>(input_frequency) * multiplier_value;
   10cc2:	f8bd 2002 	ldrh.w	r2, [sp, #2]
    uint32_t actual_speed =
   10cc6:	9b03      	ldr	r3, [sp, #12]
   10cc8:	fb02 f303 	mul.w	r3, r2, r3
   10ccc:	9307      	str	r3, [sp, #28]
    // TO DO: use registers to retreive values
    SelectOscillatorSource(OscillatorSource::kIrc);
   10cce:	2100      	movs	r1, #0
   10cd0:	9801      	ldr	r0, [sp, #4]
   10cd2:	f7ff fee9 	bl	10aa8 <Lpc40xxSystemController::SelectOscillatorSource(Lpc40xxSystemController::OscillatorSource)>
    SelectMainClockSource(MainClockSource::kBaseClock);
   10cd6:	2100      	movs	r1, #0
   10cd8:	9801      	ldr	r0, [sp, #4]
   10cda:	f7ff feff 	bl	10adc <Lpc40xxSystemController::SelectMainClockSource(Lpc40xxSystemController::MainClockSource)>
    SelectUsbClockSource(UsbSource::kBaseClock);
   10cde:	2100      	movs	r1, #0
   10ce0:	9801      	ldr	r0, [sp, #4]
   10ce2:	f7ff ff13 	bl	10b0c <Lpc40xxSystemController::SelectUsbClockSource(Lpc40xxSystemController::UsbSource)>
    SelectSpifiClockSource(SpifiSource::kBaseClock);
   10ce6:	2100      	movs	r1, #0
   10ce8:	9801      	ldr	r0, [sp, #4]
   10cea:	f7ff ff27 	bl	10b3c <Lpc40xxSystemController::SelectSpifiClockSource(Lpc40xxSystemController::SpifiSource)>
    // must subtract 1 from multiplier value as specified in datasheet
    system_controller->PLL0CFG =
        (system_controller->PLL0CFG & ~kClearPllMultiplier) |
   10cee:	4b3a      	ldr	r3, [pc, #232]	; (10dd8 <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0x15c>)
   10cf0:	681b      	ldr	r3, [r3, #0]
   10cf2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   10cf6:	f023 011f 	bic.w	r1, r3, #31
        (multiplier_value - 1);
   10cfa:	9b03      	ldr	r3, [sp, #12]
   10cfc:	1e5a      	subs	r2, r3, #1
    system_controller->PLL0CFG =
   10cfe:	4b36      	ldr	r3, [pc, #216]	; (10dd8 <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0x15c>)
   10d00:	681b      	ldr	r3, [r3, #0]
        (system_controller->PLL0CFG & ~kClearPllMultiplier) |
   10d02:	430a      	orrs	r2, r1
    system_controller->PLL0CFG =
   10d04:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    system_controller->PLL0CFG =
        (system_controller->PLL0CFG & ~kClearPllDivider) | (divider_value << 5);
   10d08:	4b33      	ldr	r3, [pc, #204]	; (10dd8 <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0x15c>)
   10d0a:	681b      	ldr	r3, [r3, #0]
   10d0c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   10d10:	f023 0260 	bic.w	r2, r3, #96	; 0x60
   10d14:	f8bd 301a 	ldrh.w	r3, [sp, #26]
   10d18:	015b      	lsls	r3, r3, #5
   10d1a:	4619      	mov	r1, r3
    system_controller->PLL0CFG =
   10d1c:	4b2e      	ldr	r3, [pc, #184]	; (10dd8 <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0x15c>)
   10d1e:	681b      	ldr	r3, [r3, #0]
        (system_controller->PLL0CFG & ~kClearPllDivider) | (divider_value << 5);
   10d20:	430a      	orrs	r2, r1
    system_controller->PLL0CFG =
   10d22:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    system_controller->PLL0CON |= kEnablePll;
   10d26:	4b2c      	ldr	r3, [pc, #176]	; (10dd8 <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0x15c>)
   10d28:	681b      	ldr	r3, [r3, #0]
   10d2a:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
   10d2e:	4b2a      	ldr	r3, [pc, #168]	; (10dd8 <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0x15c>)
   10d30:	681b      	ldr	r3, [r3, #0]
   10d32:	f042 0201 	orr.w	r2, r2, #1
   10d36:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    // nessecary feed sequence to ensure the changes are intentional
    system_controller->PLL0FEED = 0xAA;
   10d3a:	4b27      	ldr	r3, [pc, #156]	; (10dd8 <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0x15c>)
   10d3c:	681b      	ldr	r3, [r3, #0]
   10d3e:	22aa      	movs	r2, #170	; 0xaa
   10d40:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    system_controller->PLL0FEED = 0x55;
   10d44:	4b24      	ldr	r3, [pc, #144]	; (10dd8 <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0x15c>)
   10d46:	681b      	ldr	r3, [r3, #0]
   10d48:	2255      	movs	r2, #85	; 0x55
   10d4a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    while (!(system_controller->PLL0STAT >> kPlock & 1) &&
   10d4e:	4b22      	ldr	r3, [pc, #136]	; (10dd8 <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0x15c>)
   10d50:	681b      	ldr	r3, [r3, #0]
   10d52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   10d56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
   10d5a:	2b00      	cmp	r3, #0
   10d5c:	d109      	bne.n	10d72 <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0xf6>
   10d5e:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
   10d62:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
   10d66:	42a2      	cmp	r2, r4
   10d68:	bf08      	it	eq
   10d6a:	4299      	cmpeq	r1, r3
   10d6c:	d201      	bcs.n	10d72 <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0xf6>
   10d6e:	2301      	movs	r3, #1
   10d70:	e000      	b.n	10d74 <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0xf8>
   10d72:	2300      	movs	r3, #0
   10d74:	2b00      	cmp	r3, #0
   10d76:	d004      	beq.n	10d82 <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0x106>
           (current_time < timeout_time))
    {
      current_time = Milliseconds();
   10d78:	f7ff fd9a 	bl	108b0 <Milliseconds()>
   10d7c:	e9cd 0108 	strd	r0, r1, [sp, #32]
    while (!(system_controller->PLL0STAT >> kPlock & 1) &&
   10d80:	e7e5      	b.n	10d4e <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0xd2>
    }
    if (!(system_controller->PLL0STAT >> kPlock & 1) &&
   10d82:	4b15      	ldr	r3, [pc, #84]	; (10dd8 <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0x15c>)
   10d84:	681b      	ldr	r3, [r3, #0]
   10d86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   10d8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
   10d8e:	2b00      	cmp	r3, #0
   10d90:	d109      	bne.n	10da6 <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0x12a>
   10d92:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
   10d96:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
   10d9a:	42a2      	cmp	r2, r4
   10d9c:	bf08      	it	eq
   10d9e:	4299      	cmpeq	r1, r3
   10da0:	d301      	bcc.n	10da6 <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0x12a>
   10da2:	2301      	movs	r3, #1
   10da4:	e000      	b.n	10da8 <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0x12c>
   10da6:	2300      	movs	r3, #0
   10da8:	2b00      	cmp	r3, #0
   10daa:	d00e      	beq.n	10dca <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0x14e>
        (current_time >= timeout_time))
    {
      SJ2_ASSERT_FATAL(false,
   10dac:	f240 1343 	movw	r3, #323	; 0x143
   10db0:	4a0a      	ldr	r2, [pc, #40]	; (10ddc <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0x160>)
   10db2:	490b      	ldr	r1, [pc, #44]	; (10de0 <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0x164>)
   10db4:	480b      	ldr	r0, [pc, #44]	; (10de4 <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0x168>)
   10db6:	f003 f985 	bl	140c4 <printf>
   10dba:	480b      	ldr	r0, [pc, #44]	; (10de8 <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0x16c>)
   10dbc:	f001 fef8 	bl	12bb0 <puts>
   10dc0:	2100      	movs	r1, #0
   10dc2:	2001      	movs	r0, #1
   10dc4:	f7ff fcc4 	bl	10750 <debug::PrintBacktrace(bool, void*)>
   10dc8:	e7fe      	b.n	10dc8 <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0x14c>
                       "PLL lock could not be established before timeout");
      actual_speed = kDefaultIRCFrequency;
    }
    return (actual_speed - desired_speed_in_mhz);
   10dca:	f8bd 3000 	ldrh.w	r3, [sp]
   10dce:	9a07      	ldr	r2, [sp, #28]
   10dd0:	1ad3      	subs	r3, r2, r3
  }
   10dd2:	4618      	mov	r0, r3
   10dd4:	b00a      	add	sp, #40	; 0x28
   10dd6:	bd10      	pop	{r4, pc}
   10dd8:	1000001c 	.word	0x1000001c
   10ddc:	00017af0 	.word	0x00017af0
   10de0:	00017914 	.word	0x00017914
   10de4:	00017668 	.word	0x00017668
   10de8:	000174b8 	.word	0x000174b8

00010dec <Lpc40xxSystemController::SetCpuClockDivider(unsigned char)>:
                       "PLL lock could not be established before timeout");
    }
    return (actual_speed - desired_speed_in_mhz);
  }

  void SetCpuClockDivider(uint8_t cpu_divider)
   10dec:	b500      	push	{lr}
   10dee:	b083      	sub	sp, #12
   10df0:	9001      	str	r0, [sp, #4]
   10df2:	460b      	mov	r3, r1
   10df4:	f88d 3003 	strb.w	r3, [sp, #3]
  {
    SJ2_ASSERT_FATAL(cpu_divider < 32, "Divider mustn't exceed 32");
   10df8:	f89d 3003 	ldrb.w	r3, [sp, #3]
   10dfc:	2b1f      	cmp	r3, #31
   10dfe:	d90e      	bls.n	10e1e <Lpc40xxSystemController::SetCpuClockDivider(unsigned char)+0x32>
   10e00:	f240 136f 	movw	r3, #367	; 0x16f
   10e04:	4a0e      	ldr	r2, [pc, #56]	; (10e40 <Lpc40xxSystemController::SetCpuClockDivider(unsigned char)+0x54>)
   10e06:	490f      	ldr	r1, [pc, #60]	; (10e44 <Lpc40xxSystemController::SetCpuClockDivider(unsigned char)+0x58>)
   10e08:	480f      	ldr	r0, [pc, #60]	; (10e48 <Lpc40xxSystemController::SetCpuClockDivider(unsigned char)+0x5c>)
   10e0a:	f003 f95b 	bl	140c4 <printf>
   10e0e:	480f      	ldr	r0, [pc, #60]	; (10e4c <Lpc40xxSystemController::SetCpuClockDivider(unsigned char)+0x60>)
   10e10:	f001 fece 	bl	12bb0 <puts>
   10e14:	2100      	movs	r1, #0
   10e16:	2001      	movs	r0, #1
   10e18:	f7ff fc9a 	bl	10750 <debug::PrintBacktrace(bool, void*)>
   10e1c:	e7fe      	b.n	10e1c <Lpc40xxSystemController::SetCpuClockDivider(unsigned char)+0x30>
    system_controller->CCLKSEL =
        (system_controller->CCLKSEL & ~kClearCpuDivider) | cpu_divider;
   10e1e:	4b0c      	ldr	r3, [pc, #48]	; (10e50 <Lpc40xxSystemController::SetCpuClockDivider(unsigned char)+0x64>)
   10e20:	681b      	ldr	r3, [r3, #0]
   10e22:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   10e26:	f023 011f 	bic.w	r1, r3, #31
   10e2a:	f89d 2003 	ldrb.w	r2, [sp, #3]
    system_controller->CCLKSEL =
   10e2e:	4b08      	ldr	r3, [pc, #32]	; (10e50 <Lpc40xxSystemController::SetCpuClockDivider(unsigned char)+0x64>)
   10e30:	681b      	ldr	r3, [r3, #0]
        (system_controller->CCLKSEL & ~kClearCpuDivider) | cpu_divider;
   10e32:	430a      	orrs	r2, r1
    system_controller->CCLKSEL =
   10e34:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
  }
   10e38:	bf00      	nop
   10e3a:	b003      	add	sp, #12
   10e3c:	f85d fb04 	ldr.w	pc, [sp], #4
   10e40:	00017ba8 	.word	0x00017ba8
   10e44:	0001792c 	.word	0x0001792c
   10e48:	00017710 	.word	0x00017710
   10e4c:	000174b8 	.word	0x000174b8
   10e50:	1000001c 	.word	0x1000001c

00010e54 <Lpc40xxSystemController::SetEmcClockDivider(Lpc40xxSystemController::EmcDivider)>:

  void SetEmcClockDivider(EmcDivider emc_divider)
   10e54:	b082      	sub	sp, #8
   10e56:	9001      	str	r0, [sp, #4]
   10e58:	460b      	mov	r3, r1
   10e5a:	f88d 3003 	strb.w	r3, [sp, #3]
  {
    system_controller->EMCCLKSEL =
        (system_controller->EMCCLKSEL & ~kClearEmcDivider) |
   10e5e:	4b08      	ldr	r3, [pc, #32]	; (10e80 <Lpc40xxSystemController::SetEmcClockDivider(Lpc40xxSystemController::EmcDivider)+0x2c>)
   10e60:	681b      	ldr	r3, [r3, #0]
   10e62:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   10e66:	f023 0101 	bic.w	r1, r3, #1
        static_cast<uint8_t>(emc_divider);
   10e6a:	f89d 2003 	ldrb.w	r2, [sp, #3]
    system_controller->EMCCLKSEL =
   10e6e:	4b04      	ldr	r3, [pc, #16]	; (10e80 <Lpc40xxSystemController::SetEmcClockDivider(Lpc40xxSystemController::EmcDivider)+0x2c>)
   10e70:	681b      	ldr	r3, [r3, #0]
        (system_controller->EMCCLKSEL & ~kClearEmcDivider) |
   10e72:	430a      	orrs	r2, r1
    system_controller->EMCCLKSEL =
   10e74:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }
   10e78:	bf00      	nop
   10e7a:	b002      	add	sp, #8
   10e7c:	4770      	bx	lr
   10e7e:	bf00      	nop
   10e80:	1000001c 	.word	0x1000001c

00010e84 <SystemTimer::DisableTimer()>:
  /// system_timer_isr defaults to nullptr. The actual SystemTickHandler should
  /// check if the isr is set to nullptr, and if it is, turn off the timer, if
  /// set a proper function then execute it.
  inline static IsrPointer system_timer_isr = nullptr;
  /// WARNING: Doing so will most likely disable FreeRTOS
  static void DisableTimer()
   10e84:	b510      	push	{r4, lr}
   10e86:	4674      	mov	r4, lr
   10e88:	4623      	mov	r3, r4
   10e8a:	4619      	mov	r1, r3
   10e8c:	480a      	ldr	r0, [pc, #40]	; (10eb8 <SystemTimer::DisableTimer()+0x34>)
   10e8e:	f001 febf 	bl	12c10 <__cyg_profile_func_enter>
  {
    sys_tick->LOAD = 0;
   10e92:	4b0a      	ldr	r3, [pc, #40]	; (10ebc <SystemTimer::DisableTimer()+0x38>)
   10e94:	681b      	ldr	r3, [r3, #0]
   10e96:	2200      	movs	r2, #0
   10e98:	605a      	str	r2, [r3, #4]
    sys_tick->VAL  = 0;
   10e9a:	4b08      	ldr	r3, [pc, #32]	; (10ebc <SystemTimer::DisableTimer()+0x38>)
   10e9c:	681b      	ldr	r3, [r3, #0]
   10e9e:	2200      	movs	r2, #0
   10ea0:	609a      	str	r2, [r3, #8]
    sys_tick->CTRL = 0;
   10ea2:	4b06      	ldr	r3, [pc, #24]	; (10ebc <SystemTimer::DisableTimer()+0x38>)
   10ea4:	681b      	ldr	r3, [r3, #0]
   10ea6:	2200      	movs	r2, #0
   10ea8:	601a      	str	r2, [r3, #0]
   10eaa:	4623      	mov	r3, r4
   10eac:	4619      	mov	r1, r3
   10eae:	4802      	ldr	r0, [pc, #8]	; (10eb8 <SystemTimer::DisableTimer()+0x34>)
   10eb0:	f001 fec2 	bl	12c38 <__cyg_profile_func_exit>
  }
   10eb4:	bf00      	nop
   10eb6:	bd10      	pop	{r4, pc}
   10eb8:	00010e85 	.word	0x00010e85
   10ebc:	10000024 	.word	0x10000024

00010ec0 <SystemTimer::SystemTimerHandler()>:
  static void SystemTimerHandler()
   10ec0:	b510      	push	{r4, lr}
   10ec2:	4674      	mov	r4, lr
   10ec4:	4623      	mov	r3, r4
   10ec6:	4619      	mov	r1, r3
   10ec8:	4808      	ldr	r0, [pc, #32]	; (10eec <SystemTimer::SystemTimerHandler()+0x2c>)
   10eca:	f001 fea1 	bl	12c10 <__cyg_profile_func_enter>
  {
    // This assumes that SysTickHandler is called every millisecond.
    // Changing that frequency will distort the milliseconds time.
    if (system_timer_isr != nullptr)
   10ece:	4b08      	ldr	r3, [pc, #32]	; (10ef0 <SystemTimer::SystemTimerHandler()+0x30>)
   10ed0:	681b      	ldr	r3, [r3, #0]
   10ed2:	2b00      	cmp	r3, #0
   10ed4:	d002      	beq.n	10edc <SystemTimer::SystemTimerHandler()+0x1c>
    {
      system_timer_isr();
   10ed6:	4b06      	ldr	r3, [pc, #24]	; (10ef0 <SystemTimer::SystemTimerHandler()+0x30>)
   10ed8:	681b      	ldr	r3, [r3, #0]
   10eda:	4798      	blx	r3
   10edc:	4623      	mov	r3, r4
   10ede:	4619      	mov	r1, r3
   10ee0:	4802      	ldr	r0, [pc, #8]	; (10eec <SystemTimer::SystemTimerHandler()+0x2c>)
   10ee2:	f001 fea9 	bl	12c38 <__cyg_profile_func_exit>
    }
  }
   10ee6:	bf00      	nop
   10ee8:	bd10      	pop	{r4, pc}
   10eea:	bf00      	nop
   10eec:	00010ec1 	.word	0x00010ec1
   10ef0:	100002a0 	.word	0x100002a0

00010ef4 <SystemTimer::SetIsrFunction(void (*)())>:
  constexpr SystemTimer() {}
  void SetIsrFunction(IsrPointer isr) override
   10ef4:	b510      	push	{r4, lr}
   10ef6:	b082      	sub	sp, #8
   10ef8:	4674      	mov	r4, lr
   10efa:	9001      	str	r0, [sp, #4]
   10efc:	9100      	str	r1, [sp, #0]
   10efe:	4623      	mov	r3, r4
   10f00:	4619      	mov	r1, r3
   10f02:	4807      	ldr	r0, [pc, #28]	; (10f20 <SystemTimer::SetIsrFunction(void (*)())+0x2c>)
   10f04:	f001 fe84 	bl	12c10 <__cyg_profile_func_enter>
  {
    system_timer_isr = isr;
   10f08:	4a06      	ldr	r2, [pc, #24]	; (10f24 <SystemTimer::SetIsrFunction(void (*)())+0x30>)
   10f0a:	9b00      	ldr	r3, [sp, #0]
   10f0c:	6013      	str	r3, [r2, #0]
   10f0e:	4623      	mov	r3, r4
   10f10:	4619      	mov	r1, r3
   10f12:	4803      	ldr	r0, [pc, #12]	; (10f20 <SystemTimer::SetIsrFunction(void (*)())+0x2c>)
   10f14:	f001 fe90 	bl	12c38 <__cyg_profile_func_exit>
  }
   10f18:	bf00      	nop
   10f1a:	b002      	add	sp, #8
   10f1c:	bd10      	pop	{r4, pc}
   10f1e:	bf00      	nop
   10f20:	00010ef5 	.word	0x00010ef5
   10f24:	100002a0 	.word	0x100002a0

00010f28 <SystemTimer::StartTimer()>:
  bool StartTimer() override
   10f28:	b530      	push	{r4, r5, lr}
   10f2a:	b085      	sub	sp, #20
   10f2c:	4675      	mov	r5, lr
   10f2e:	9001      	str	r0, [sp, #4]
   10f30:	462b      	mov	r3, r5
   10f32:	4619      	mov	r1, r3
   10f34:	4820      	ldr	r0, [pc, #128]	; (10fb8 <SystemTimer::StartTimer()+0x90>)
   10f36:	f001 fe6b 	bl	12c10 <__cyg_profile_func_enter>
  {
    bool successful = false;
   10f3a:	2300      	movs	r3, #0
   10f3c:	f88d 300f 	strb.w	r3, [sp, #15]
    if (sys_tick->LOAD != 0)
   10f40:	4b1e      	ldr	r3, [pc, #120]	; (10fbc <SystemTimer::StartTimer()+0x94>)
   10f42:	681b      	ldr	r3, [r3, #0]
   10f44:	685b      	ldr	r3, [r3, #4]
   10f46:	2b00      	cmp	r3, #0
   10f48:	bf14      	ite	ne
   10f4a:	2301      	movne	r3, #1
   10f4c:	2300      	moveq	r3, #0
   10f4e:	b2db      	uxtb	r3, r3
   10f50:	2b00      	cmp	r3, #0
   10f52:	d01e      	beq.n	10f92 <SystemTimer::StartTimer()+0x6a>
    {
      sys_tick->VAL = 0;
   10f54:	4b19      	ldr	r3, [pc, #100]	; (10fbc <SystemTimer::StartTimer()+0x94>)
   10f56:	681b      	ldr	r3, [r3, #0]
   10f58:	2200      	movs	r2, #0
   10f5a:	609a      	str	r2, [r3, #8]
      sys_tick->CTRL |= (1 << ControlBitMap::kTickInterupt);
   10f5c:	4b17      	ldr	r3, [pc, #92]	; (10fbc <SystemTimer::StartTimer()+0x94>)
   10f5e:	681b      	ldr	r3, [r3, #0]
   10f60:	681a      	ldr	r2, [r3, #0]
   10f62:	4b16      	ldr	r3, [pc, #88]	; (10fbc <SystemTimer::StartTimer()+0x94>)
   10f64:	681b      	ldr	r3, [r3, #0]
   10f66:	f042 0202 	orr.w	r2, r2, #2
   10f6a:	601a      	str	r2, [r3, #0]
      sys_tick->CTRL |= (1 << ControlBitMap::kEnableCounter);
   10f6c:	4b13      	ldr	r3, [pc, #76]	; (10fbc <SystemTimer::StartTimer()+0x94>)
   10f6e:	681b      	ldr	r3, [r3, #0]
   10f70:	681a      	ldr	r2, [r3, #0]
   10f72:	4b12      	ldr	r3, [pc, #72]	; (10fbc <SystemTimer::StartTimer()+0x94>)
   10f74:	681b      	ldr	r3, [r3, #0]
   10f76:	f042 0201 	orr.w	r2, r2, #1
   10f7a:	601a      	str	r2, [r3, #0]
      sys_tick->CTRL |= (1 << ControlBitMap::kClkSource);
   10f7c:	4b0f      	ldr	r3, [pc, #60]	; (10fbc <SystemTimer::StartTimer()+0x94>)
   10f7e:	681b      	ldr	r3, [r3, #0]
   10f80:	681a      	ldr	r2, [r3, #0]
   10f82:	4b0e      	ldr	r3, [pc, #56]	; (10fbc <SystemTimer::StartTimer()+0x94>)
   10f84:	681b      	ldr	r3, [r3, #0]
   10f86:	f042 0204 	orr.w	r2, r2, #4
   10f8a:	601a      	str	r2, [r3, #0]
      successful = true;
   10f8c:	2301      	movs	r3, #1
   10f8e:	f88d 300f 	strb.w	r3, [sp, #15]
    }
    RegisterIsr(SysTick_IRQn, SystemTimerHandler);
   10f92:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   10f96:	2201      	movs	r2, #1
   10f98:	4909      	ldr	r1, [pc, #36]	; (10fc0 <SystemTimer::StartTimer()+0x98>)
   10f9a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   10f9e:	f001 fd0f 	bl	129c0 <RegisterIsr(IRQn, void (*)(), bool, long)>
    return successful;
   10fa2:	f89d 400f 	ldrb.w	r4, [sp, #15]
   10fa6:	462b      	mov	r3, r5
   10fa8:	4619      	mov	r1, r3
   10faa:	4803      	ldr	r0, [pc, #12]	; (10fb8 <SystemTimer::StartTimer()+0x90>)
   10fac:	f001 fe44 	bl	12c38 <__cyg_profile_func_exit>
   10fb0:	4623      	mov	r3, r4
  }
   10fb2:	4618      	mov	r0, r3
   10fb4:	b005      	add	sp, #20
   10fb6:	bd30      	pop	{r4, r5, pc}
   10fb8:	00010f29 	.word	0x00010f29
   10fbc:	10000024 	.word	0x10000024
   10fc0:	00010ec1 	.word	0x00010ec1

00010fc4 <SystemTimer::SetTickFrequency(unsigned long)>:
  ///          remainder will be returned.
  ///          If the freqency supplied is less then 2Hz, the function will
  ///          return without changing any hardware.
  ///          If the reload value exceeds the SysTick_LOAD_RELOAD_Msk, the
  ///          returned value is the SysTick_LOAD_RELOAD_Msk.
  uint32_t SetTickFrequency(uint32_t frequency) override
   10fc4:	b530      	push	{r4, r5, lr}
   10fc6:	b085      	sub	sp, #20
   10fc8:	4675      	mov	r5, lr
   10fca:	9001      	str	r0, [sp, #4]
   10fcc:	9100      	str	r1, [sp, #0]
   10fce:	462b      	mov	r3, r5
   10fd0:	4619      	mov	r1, r3
   10fd2:	481f      	ldr	r0, [pc, #124]	; (11050 <SystemTimer::SetTickFrequency(unsigned long)+0x8c>)
   10fd4:	f001 fe1c 	bl	12c10 <__cyg_profile_func_enter>
  {
    if (frequency <= 1)
   10fd8:	9b00      	ldr	r3, [sp, #0]
   10fda:	2b01      	cmp	r3, #1
   10fdc:	d801      	bhi.n	10fe2 <SystemTimer::SetTickFrequency(unsigned long)+0x1e>
    {
      return 0;
   10fde:	2400      	movs	r4, #0
   10fe0:	e02d      	b.n	1103e <SystemTimer::SetTickFrequency(unsigned long)+0x7a>
    }
    uint32_t reload_value = (GetSystemFrequency() / frequency) - 1;
   10fe2:	9b01      	ldr	r3, [sp, #4]
   10fe4:	1d1a      	adds	r2, r3, #4
   10fe6:	9b01      	ldr	r3, [sp, #4]
   10fe8:	685b      	ldr	r3, [r3, #4]
   10fea:	330c      	adds	r3, #12
   10fec:	681b      	ldr	r3, [r3, #0]
   10fee:	4610      	mov	r0, r2
   10ff0:	4798      	blx	r3
   10ff2:	4602      	mov	r2, r0
   10ff4:	9b00      	ldr	r3, [sp, #0]
   10ff6:	fbb2 f3f3 	udiv	r3, r2, r3
   10ffa:	3b01      	subs	r3, #1
   10ffc:	9303      	str	r3, [sp, #12]
    int remainder         = (GetSystemFrequency() % frequency);
   10ffe:	9b01      	ldr	r3, [sp, #4]
   11000:	1d1a      	adds	r2, r3, #4
   11002:	9b01      	ldr	r3, [sp, #4]
   11004:	685b      	ldr	r3, [r3, #4]
   11006:	330c      	adds	r3, #12
   11008:	681b      	ldr	r3, [r3, #0]
   1100a:	4610      	mov	r0, r2
   1100c:	4798      	blx	r3
   1100e:	4603      	mov	r3, r0
   11010:	9a00      	ldr	r2, [sp, #0]
   11012:	fbb3 f2f2 	udiv	r2, r3, r2
   11016:	9900      	ldr	r1, [sp, #0]
   11018:	fb01 f202 	mul.w	r2, r1, r2
   1101c:	1a9b      	subs	r3, r3, r2
   1101e:	9302      	str	r3, [sp, #8]
    if (reload_value > SysTick_LOAD_RELOAD_Msk)
   11020:	9b03      	ldr	r3, [sp, #12]
   11022:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
   11026:	d305      	bcc.n	11034 <SystemTimer::SetTickFrequency(unsigned long)+0x70>
    {
      reload_value = SysTick_LOAD_RELOAD_Msk;
   11028:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
   1102c:	9303      	str	r3, [sp, #12]
      remainder    = SysTick_LOAD_RELOAD_Msk;
   1102e:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
   11032:	9302      	str	r3, [sp, #8]
    }
    sys_tick->LOAD = reload_value;
   11034:	4b07      	ldr	r3, [pc, #28]	; (11054 <SystemTimer::SetTickFrequency(unsigned long)+0x90>)
   11036:	681b      	ldr	r3, [r3, #0]
   11038:	9a03      	ldr	r2, [sp, #12]
   1103a:	605a      	str	r2, [r3, #4]
    return remainder;
   1103c:	9c02      	ldr	r4, [sp, #8]
   1103e:	462b      	mov	r3, r5
   11040:	4619      	mov	r1, r3
   11042:	4803      	ldr	r0, [pc, #12]	; (11050 <SystemTimer::SetTickFrequency(unsigned long)+0x8c>)
   11044:	f001 fdf8 	bl	12c38 <__cyg_profile_func_exit>
   11048:	4623      	mov	r3, r4
  }
   1104a:	4618      	mov	r0, r3
   1104c:	b005      	add	sp, #20
   1104e:	bd30      	pop	{r4, r5, pc}
   11050:	00010fc5 	.word	0x00010fc5
   11054:	10000024 	.word	0x10000024

00011058 <Pin::SetPinFunction(unsigned char)>:
  }
  constexpr Pin(uint8_t port_number, uint8_t pin_number)
      : port_(port_number), pin_(pin_number)
  {
  }
  void SetPinFunction(uint8_t function) override
   11058:	b5f0      	push	{r4, r5, r6, r7, lr}
   1105a:	b085      	sub	sp, #20
   1105c:	4677      	mov	r7, lr
   1105e:	9003      	str	r0, [sp, #12]
   11060:	460b      	mov	r3, r1
   11062:	f88d 300b 	strb.w	r3, [sp, #11]
   11066:	463b      	mov	r3, r7
   11068:	4619      	mov	r1, r3
   1106a:	4817      	ldr	r0, [pc, #92]	; (110c8 <Pin::SetPinFunction(unsigned char)+0x70>)
   1106c:	f001 fdd0 	bl	12c10 <__cyg_profile_func_enter>
  {
    pin_map->_register[port_][pin_] =
        BitPlace(pin_map->_register[port_][pin_], PinBitMap::kFunction,
   11070:	4b16      	ldr	r3, [pc, #88]	; (110cc <Pin::SetPinFunction(unsigned char)+0x74>)
   11072:	681b      	ldr	r3, [r3, #0]
   11074:	9a03      	ldr	r2, [sp, #12]
   11076:	7912      	ldrb	r2, [r2, #4]
   11078:	4610      	mov	r0, r2
   1107a:	9a03      	ldr	r2, [sp, #12]
   1107c:	7952      	ldrb	r2, [r2, #5]
   1107e:	4611      	mov	r1, r2
   11080:	0142      	lsls	r2, r0, #5
   11082:	440a      	add	r2, r1
   11084:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
                 function & 0b111, 3);
   11088:	f89d 300b 	ldrb.w	r3, [sp, #11]
        BitPlace(pin_map->_register[port_][pin_], PinBitMap::kFunction,
   1108c:	f003 0207 	and.w	r2, r3, #7
    pin_map->_register[port_][pin_] =
   11090:	4b0e      	ldr	r3, [pc, #56]	; (110cc <Pin::SetPinFunction(unsigned char)+0x74>)
   11092:	681c      	ldr	r4, [r3, #0]
   11094:	9b03      	ldr	r3, [sp, #12]
   11096:	791b      	ldrb	r3, [r3, #4]
   11098:	461e      	mov	r6, r3
   1109a:	9b03      	ldr	r3, [sp, #12]
   1109c:	795b      	ldrb	r3, [r3, #5]
   1109e:	461d      	mov	r5, r3
        BitPlace(pin_map->_register[port_][pin_], PinBitMap::kFunction,
   110a0:	2303      	movs	r3, #3
   110a2:	9300      	str	r3, [sp, #0]
   110a4:	4613      	mov	r3, r2
   110a6:	2200      	movs	r2, #0
   110a8:	9803      	ldr	r0, [sp, #12]
   110aa:	f000 fa67 	bl	1157c <Pin::BitPlace(unsigned long, unsigned long, unsigned long, unsigned long)>
   110ae:	4602      	mov	r2, r0
    pin_map->_register[port_][pin_] =
   110b0:	0173      	lsls	r3, r6, #5
   110b2:	442b      	add	r3, r5
   110b4:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
   110b8:	463b      	mov	r3, r7
   110ba:	4619      	mov	r1, r3
   110bc:	4802      	ldr	r0, [pc, #8]	; (110c8 <Pin::SetPinFunction(unsigned char)+0x70>)
   110be:	f001 fdbb 	bl	12c38 <__cyg_profile_func_exit>
  }
   110c2:	bf00      	nop
   110c4:	b005      	add	sp, #20
   110c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   110c8:	00011059 	.word	0x00011059
   110cc:	10000028 	.word	0x10000028

000110d0 <Pin::SetMode(PinInterface::Mode)>:
  void SetMode(PinInterface::Mode mode) override
   110d0:	b5f0      	push	{r4, r5, r6, r7, lr}
   110d2:	b087      	sub	sp, #28
   110d4:	4677      	mov	r7, lr
   110d6:	9003      	str	r0, [sp, #12]
   110d8:	460b      	mov	r3, r1
   110da:	f88d 300b 	strb.w	r3, [sp, #11]
   110de:	463b      	mov	r3, r7
   110e0:	4619      	mov	r1, r3
   110e2:	4819      	ldr	r0, [pc, #100]	; (11148 <Pin::SetMode(PinInterface::Mode)+0x78>)
   110e4:	f001 fd94 	bl	12c10 <__cyg_profile_func_enter>
  {
    uint8_t ui_mode                 = static_cast<uint8_t>(mode);
   110e8:	f89d 300b 	ldrb.w	r3, [sp, #11]
   110ec:	f88d 3017 	strb.w	r3, [sp, #23]
    pin_map->_register[port_][pin_] = BitPlace(
   110f0:	4b16      	ldr	r3, [pc, #88]	; (1114c <Pin::SetMode(PinInterface::Mode)+0x7c>)
   110f2:	681b      	ldr	r3, [r3, #0]
        pin_map->_register[port_][pin_], PinBitMap::kMode, ui_mode & 0b11, 2);
   110f4:	9a03      	ldr	r2, [sp, #12]
   110f6:	7912      	ldrb	r2, [r2, #4]
   110f8:	4610      	mov	r0, r2
   110fa:	9a03      	ldr	r2, [sp, #12]
   110fc:	7952      	ldrb	r2, [r2, #5]
   110fe:	4611      	mov	r1, r2
    pin_map->_register[port_][pin_] = BitPlace(
   11100:	0142      	lsls	r2, r0, #5
   11102:	440a      	add	r2, r1
   11104:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
        pin_map->_register[port_][pin_], PinBitMap::kMode, ui_mode & 0b11, 2);
   11108:	f89d 3017 	ldrb.w	r3, [sp, #23]
    pin_map->_register[port_][pin_] = BitPlace(
   1110c:	f003 0203 	and.w	r2, r3, #3
   11110:	4b0e      	ldr	r3, [pc, #56]	; (1114c <Pin::SetMode(PinInterface::Mode)+0x7c>)
   11112:	681c      	ldr	r4, [r3, #0]
   11114:	9b03      	ldr	r3, [sp, #12]
   11116:	791b      	ldrb	r3, [r3, #4]
   11118:	461e      	mov	r6, r3
   1111a:	9b03      	ldr	r3, [sp, #12]
   1111c:	795b      	ldrb	r3, [r3, #5]
   1111e:	461d      	mov	r5, r3
   11120:	2302      	movs	r3, #2
   11122:	9300      	str	r3, [sp, #0]
   11124:	4613      	mov	r3, r2
   11126:	2203      	movs	r2, #3
   11128:	9803      	ldr	r0, [sp, #12]
   1112a:	f000 fa27 	bl	1157c <Pin::BitPlace(unsigned long, unsigned long, unsigned long, unsigned long)>
   1112e:	4602      	mov	r2, r0
   11130:	0173      	lsls	r3, r6, #5
   11132:	442b      	add	r3, r5
   11134:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
   11138:	463b      	mov	r3, r7
   1113a:	4619      	mov	r1, r3
   1113c:	4802      	ldr	r0, [pc, #8]	; (11148 <Pin::SetMode(PinInterface::Mode)+0x78>)
   1113e:	f001 fd7b 	bl	12c38 <__cyg_profile_func_exit>
  }
   11142:	bf00      	nop
   11144:	b007      	add	sp, #28
   11146:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11148:	000110d1 	.word	0x000110d1
   1114c:	10000028 	.word	0x10000028

00011150 <Pin::EnableHysteresis(bool)>:
  void EnableHysteresis(bool enable_hysteresis = true) override
   11150:	b5f0      	push	{r4, r5, r6, r7, lr}
   11152:	b085      	sub	sp, #20
   11154:	4677      	mov	r7, lr
   11156:	9003      	str	r0, [sp, #12]
   11158:	460b      	mov	r3, r1
   1115a:	f88d 300b 	strb.w	r3, [sp, #11]
   1115e:	463b      	mov	r3, r7
   11160:	4619      	mov	r1, r3
   11162:	4816      	ldr	r0, [pc, #88]	; (111bc <Pin::EnableHysteresis(bool)+0x6c>)
   11164:	f001 fd54 	bl	12c10 <__cyg_profile_func_enter>
  {
    pin_map->_register[port_][pin_] =
        BitPlace(pin_map->_register[port_][pin_], PinBitMap::kHysteresis,
   11168:	4b15      	ldr	r3, [pc, #84]	; (111c0 <Pin::EnableHysteresis(bool)+0x70>)
   1116a:	681b      	ldr	r3, [r3, #0]
   1116c:	9a03      	ldr	r2, [sp, #12]
   1116e:	7912      	ldrb	r2, [r2, #4]
   11170:	4610      	mov	r0, r2
   11172:	9a03      	ldr	r2, [sp, #12]
   11174:	7952      	ldrb	r2, [r2, #5]
   11176:	4611      	mov	r1, r2
   11178:	0142      	lsls	r2, r0, #5
   1117a:	440a      	add	r2, r1
   1117c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   11180:	f89d 200b 	ldrb.w	r2, [sp, #11]
    pin_map->_register[port_][pin_] =
   11184:	4b0e      	ldr	r3, [pc, #56]	; (111c0 <Pin::EnableHysteresis(bool)+0x70>)
   11186:	681c      	ldr	r4, [r3, #0]
   11188:	9b03      	ldr	r3, [sp, #12]
   1118a:	791b      	ldrb	r3, [r3, #4]
   1118c:	461e      	mov	r6, r3
   1118e:	9b03      	ldr	r3, [sp, #12]
   11190:	795b      	ldrb	r3, [r3, #5]
   11192:	461d      	mov	r5, r3
        BitPlace(pin_map->_register[port_][pin_], PinBitMap::kHysteresis,
   11194:	2301      	movs	r3, #1
   11196:	9300      	str	r3, [sp, #0]
   11198:	4613      	mov	r3, r2
   1119a:	2205      	movs	r2, #5
   1119c:	9803      	ldr	r0, [sp, #12]
   1119e:	f000 f9ed 	bl	1157c <Pin::BitPlace(unsigned long, unsigned long, unsigned long, unsigned long)>
   111a2:	4602      	mov	r2, r0
    pin_map->_register[port_][pin_] =
   111a4:	0173      	lsls	r3, r6, #5
   111a6:	442b      	add	r3, r5
   111a8:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
   111ac:	463b      	mov	r3, r7
   111ae:	4619      	mov	r1, r3
   111b0:	4802      	ldr	r0, [pc, #8]	; (111bc <Pin::EnableHysteresis(bool)+0x6c>)
   111b2:	f001 fd41 	bl	12c38 <__cyg_profile_func_exit>
                 enable_hysteresis, 1);
  }
   111b6:	bf00      	nop
   111b8:	b005      	add	sp, #20
   111ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
   111bc:	00011151 	.word	0x00011151
   111c0:	10000028 	.word	0x10000028

000111c4 <Pin::SetAsActiveLow(bool)>:
  void SetAsActiveLow(bool set_as_active_low = true) override
   111c4:	b5f0      	push	{r4, r5, r6, r7, lr}
   111c6:	b085      	sub	sp, #20
   111c8:	4677      	mov	r7, lr
   111ca:	9003      	str	r0, [sp, #12]
   111cc:	460b      	mov	r3, r1
   111ce:	f88d 300b 	strb.w	r3, [sp, #11]
   111d2:	463b      	mov	r3, r7
   111d4:	4619      	mov	r1, r3
   111d6:	4816      	ldr	r0, [pc, #88]	; (11230 <Pin::SetAsActiveLow(bool)+0x6c>)
   111d8:	f001 fd1a 	bl	12c10 <__cyg_profile_func_enter>
  {
    pin_map->_register[port_][pin_] =
        BitPlace(pin_map->_register[port_][pin_], PinBitMap::kInputInvert,
   111dc:	4b15      	ldr	r3, [pc, #84]	; (11234 <Pin::SetAsActiveLow(bool)+0x70>)
   111de:	681b      	ldr	r3, [r3, #0]
   111e0:	9a03      	ldr	r2, [sp, #12]
   111e2:	7912      	ldrb	r2, [r2, #4]
   111e4:	4610      	mov	r0, r2
   111e6:	9a03      	ldr	r2, [sp, #12]
   111e8:	7952      	ldrb	r2, [r2, #5]
   111ea:	4611      	mov	r1, r2
   111ec:	0142      	lsls	r2, r0, #5
   111ee:	440a      	add	r2, r1
   111f0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   111f4:	f89d 200b 	ldrb.w	r2, [sp, #11]
    pin_map->_register[port_][pin_] =
   111f8:	4b0e      	ldr	r3, [pc, #56]	; (11234 <Pin::SetAsActiveLow(bool)+0x70>)
   111fa:	681c      	ldr	r4, [r3, #0]
   111fc:	9b03      	ldr	r3, [sp, #12]
   111fe:	791b      	ldrb	r3, [r3, #4]
   11200:	461e      	mov	r6, r3
   11202:	9b03      	ldr	r3, [sp, #12]
   11204:	795b      	ldrb	r3, [r3, #5]
   11206:	461d      	mov	r5, r3
        BitPlace(pin_map->_register[port_][pin_], PinBitMap::kInputInvert,
   11208:	2301      	movs	r3, #1
   1120a:	9300      	str	r3, [sp, #0]
   1120c:	4613      	mov	r3, r2
   1120e:	2206      	movs	r2, #6
   11210:	9803      	ldr	r0, [sp, #12]
   11212:	f000 f9b3 	bl	1157c <Pin::BitPlace(unsigned long, unsigned long, unsigned long, unsigned long)>
   11216:	4602      	mov	r2, r0
    pin_map->_register[port_][pin_] =
   11218:	0173      	lsls	r3, r6, #5
   1121a:	442b      	add	r3, r5
   1121c:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
   11220:	463b      	mov	r3, r7
   11222:	4619      	mov	r1, r3
   11224:	4802      	ldr	r0, [pc, #8]	; (11230 <Pin::SetAsActiveLow(bool)+0x6c>)
   11226:	f001 fd07 	bl	12c38 <__cyg_profile_func_exit>
                 set_as_active_low, 1);
  }
   1122a:	bf00      	nop
   1122c:	b005      	add	sp, #20
   1122e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11230:	000111c5 	.word	0x000111c5
   11234:	10000028 	.word	0x10000028

00011238 <Pin::SetAsAnalogMode(bool)>:
  // Set bit to 0 to enable analog mode
  void SetAsAnalogMode(bool set_as_analog = true) override
   11238:	b5f0      	push	{r4, r5, r6, r7, lr}
   1123a:	b085      	sub	sp, #20
   1123c:	4677      	mov	r7, lr
   1123e:	9003      	str	r0, [sp, #12]
   11240:	460b      	mov	r3, r1
   11242:	f88d 300b 	strb.w	r3, [sp, #11]
   11246:	463b      	mov	r3, r7
   11248:	4619      	mov	r1, r3
   1124a:	4818      	ldr	r0, [pc, #96]	; (112ac <Pin::SetAsAnalogMode(bool)+0x74>)
   1124c:	f001 fce0 	bl	12c10 <__cyg_profile_func_enter>
  {
    pin_map->_register[port_][pin_] =
        BitPlace(pin_map->_register[port_][pin_], PinBitMap::kAnalogDigitalMode,
   11250:	4b17      	ldr	r3, [pc, #92]	; (112b0 <Pin::SetAsAnalogMode(bool)+0x78>)
   11252:	681b      	ldr	r3, [r3, #0]
   11254:	9a03      	ldr	r2, [sp, #12]
   11256:	7912      	ldrb	r2, [r2, #4]
   11258:	4610      	mov	r0, r2
   1125a:	9a03      	ldr	r2, [sp, #12]
   1125c:	7952      	ldrb	r2, [r2, #5]
   1125e:	4611      	mov	r1, r2
   11260:	0142      	lsls	r2, r0, #5
   11262:	440a      	add	r2, r1
   11264:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
                 !set_as_analog, 1);
   11268:	f89d 300b 	ldrb.w	r3, [sp, #11]
   1126c:	f083 0301 	eor.w	r3, r3, #1
   11270:	b2db      	uxtb	r3, r3
        BitPlace(pin_map->_register[port_][pin_], PinBitMap::kAnalogDigitalMode,
   11272:	461a      	mov	r2, r3
    pin_map->_register[port_][pin_] =
   11274:	4b0e      	ldr	r3, [pc, #56]	; (112b0 <Pin::SetAsAnalogMode(bool)+0x78>)
   11276:	681c      	ldr	r4, [r3, #0]
   11278:	9b03      	ldr	r3, [sp, #12]
   1127a:	791b      	ldrb	r3, [r3, #4]
   1127c:	461e      	mov	r6, r3
   1127e:	9b03      	ldr	r3, [sp, #12]
   11280:	795b      	ldrb	r3, [r3, #5]
   11282:	461d      	mov	r5, r3
        BitPlace(pin_map->_register[port_][pin_], PinBitMap::kAnalogDigitalMode,
   11284:	2301      	movs	r3, #1
   11286:	9300      	str	r3, [sp, #0]
   11288:	4613      	mov	r3, r2
   1128a:	2207      	movs	r2, #7
   1128c:	9803      	ldr	r0, [sp, #12]
   1128e:	f000 f975 	bl	1157c <Pin::BitPlace(unsigned long, unsigned long, unsigned long, unsigned long)>
   11292:	4602      	mov	r2, r0
    pin_map->_register[port_][pin_] =
   11294:	0173      	lsls	r3, r6, #5
   11296:	442b      	add	r3, r5
   11298:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
   1129c:	463b      	mov	r3, r7
   1129e:	4619      	mov	r1, r3
   112a0:	4802      	ldr	r0, [pc, #8]	; (112ac <Pin::SetAsAnalogMode(bool)+0x74>)
   112a2:	f001 fcc9 	bl	12c38 <__cyg_profile_func_exit>
  }
   112a6:	bf00      	nop
   112a8:	b005      	add	sp, #20
   112aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
   112ac:	00011239 	.word	0x00011239
   112b0:	10000028 	.word	0x10000028

000112b4 <Pin::EnableDigitalFilter(bool)>:
  // Enable by setting bit to 0 to enable digital filter.
  void EnableDigitalFilter(bool enable_digital_filter = true) override
   112b4:	b5f0      	push	{r4, r5, r6, r7, lr}
   112b6:	b085      	sub	sp, #20
   112b8:	4677      	mov	r7, lr
   112ba:	9003      	str	r0, [sp, #12]
   112bc:	460b      	mov	r3, r1
   112be:	f88d 300b 	strb.w	r3, [sp, #11]
   112c2:	463b      	mov	r3, r7
   112c4:	4619      	mov	r1, r3
   112c6:	4818      	ldr	r0, [pc, #96]	; (11328 <Pin::EnableDigitalFilter(bool)+0x74>)
   112c8:	f001 fca2 	bl	12c10 <__cyg_profile_func_enter>
  {
    pin_map->_register[port_][pin_] =
        BitPlace(pin_map->_register[port_][pin_], PinBitMap::kDigitalFilter,
   112cc:	4b17      	ldr	r3, [pc, #92]	; (1132c <Pin::EnableDigitalFilter(bool)+0x78>)
   112ce:	681b      	ldr	r3, [r3, #0]
   112d0:	9a03      	ldr	r2, [sp, #12]
   112d2:	7912      	ldrb	r2, [r2, #4]
   112d4:	4610      	mov	r0, r2
   112d6:	9a03      	ldr	r2, [sp, #12]
   112d8:	7952      	ldrb	r2, [r2, #5]
   112da:	4611      	mov	r1, r2
   112dc:	0142      	lsls	r2, r0, #5
   112de:	440a      	add	r2, r1
   112e0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
                 !enable_digital_filter, 1);
   112e4:	f89d 300b 	ldrb.w	r3, [sp, #11]
   112e8:	f083 0301 	eor.w	r3, r3, #1
   112ec:	b2db      	uxtb	r3, r3
        BitPlace(pin_map->_register[port_][pin_], PinBitMap::kDigitalFilter,
   112ee:	461a      	mov	r2, r3
    pin_map->_register[port_][pin_] =
   112f0:	4b0e      	ldr	r3, [pc, #56]	; (1132c <Pin::EnableDigitalFilter(bool)+0x78>)
   112f2:	681c      	ldr	r4, [r3, #0]
   112f4:	9b03      	ldr	r3, [sp, #12]
   112f6:	791b      	ldrb	r3, [r3, #4]
   112f8:	461e      	mov	r6, r3
   112fa:	9b03      	ldr	r3, [sp, #12]
   112fc:	795b      	ldrb	r3, [r3, #5]
   112fe:	461d      	mov	r5, r3
        BitPlace(pin_map->_register[port_][pin_], PinBitMap::kDigitalFilter,
   11300:	2301      	movs	r3, #1
   11302:	9300      	str	r3, [sp, #0]
   11304:	4613      	mov	r3, r2
   11306:	2208      	movs	r2, #8
   11308:	9803      	ldr	r0, [sp, #12]
   1130a:	f000 f937 	bl	1157c <Pin::BitPlace(unsigned long, unsigned long, unsigned long, unsigned long)>
   1130e:	4602      	mov	r2, r0
    pin_map->_register[port_][pin_] =
   11310:	0173      	lsls	r3, r6, #5
   11312:	442b      	add	r3, r5
   11314:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
   11318:	463b      	mov	r3, r7
   1131a:	4619      	mov	r1, r3
   1131c:	4802      	ldr	r0, [pc, #8]	; (11328 <Pin::EnableDigitalFilter(bool)+0x74>)
   1131e:	f001 fc8b 	bl	12c38 <__cyg_profile_func_exit>
  }
   11322:	bf00      	nop
   11324:	b005      	add	sp, #20
   11326:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11328:	000112b5 	.word	0x000112b5
   1132c:	10000028 	.word	0x10000028

00011330 <Pin::EnableFastMode(bool)>:
  void EnableFastMode(bool enable_fast_mode = true) override
   11330:	b5f0      	push	{r4, r5, r6, r7, lr}
   11332:	b085      	sub	sp, #20
   11334:	4677      	mov	r7, lr
   11336:	9003      	str	r0, [sp, #12]
   11338:	460b      	mov	r3, r1
   1133a:	f88d 300b 	strb.w	r3, [sp, #11]
   1133e:	463b      	mov	r3, r7
   11340:	4619      	mov	r1, r3
   11342:	4816      	ldr	r0, [pc, #88]	; (1139c <Pin::EnableFastMode(bool)+0x6c>)
   11344:	f001 fc64 	bl	12c10 <__cyg_profile_func_enter>
  {
    pin_map->_register[port_][pin_] = BitPlace(
   11348:	4b15      	ldr	r3, [pc, #84]	; (113a0 <Pin::EnableFastMode(bool)+0x70>)
   1134a:	681b      	ldr	r3, [r3, #0]
        pin_map->_register[port_][pin_], PinBitMap::kSlew, enable_fast_mode, 1);
   1134c:	9a03      	ldr	r2, [sp, #12]
   1134e:	7912      	ldrb	r2, [r2, #4]
   11350:	4610      	mov	r0, r2
   11352:	9a03      	ldr	r2, [sp, #12]
   11354:	7952      	ldrb	r2, [r2, #5]
   11356:	4611      	mov	r1, r2
    pin_map->_register[port_][pin_] = BitPlace(
   11358:	0142      	lsls	r2, r0, #5
   1135a:	440a      	add	r2, r1
   1135c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   11360:	f89d 200b 	ldrb.w	r2, [sp, #11]
   11364:	4b0e      	ldr	r3, [pc, #56]	; (113a0 <Pin::EnableFastMode(bool)+0x70>)
   11366:	681c      	ldr	r4, [r3, #0]
   11368:	9b03      	ldr	r3, [sp, #12]
   1136a:	791b      	ldrb	r3, [r3, #4]
   1136c:	461e      	mov	r6, r3
   1136e:	9b03      	ldr	r3, [sp, #12]
   11370:	795b      	ldrb	r3, [r3, #5]
   11372:	461d      	mov	r5, r3
   11374:	2301      	movs	r3, #1
   11376:	9300      	str	r3, [sp, #0]
   11378:	4613      	mov	r3, r2
   1137a:	2209      	movs	r2, #9
   1137c:	9803      	ldr	r0, [sp, #12]
   1137e:	f000 f8fd 	bl	1157c <Pin::BitPlace(unsigned long, unsigned long, unsigned long, unsigned long)>
   11382:	4602      	mov	r2, r0
   11384:	0173      	lsls	r3, r6, #5
   11386:	442b      	add	r3, r5
   11388:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
   1138c:	463b      	mov	r3, r7
   1138e:	4619      	mov	r1, r3
   11390:	4802      	ldr	r0, [pc, #8]	; (1139c <Pin::EnableFastMode(bool)+0x6c>)
   11392:	f001 fc51 	bl	12c38 <__cyg_profile_func_exit>
  }
   11396:	bf00      	nop
   11398:	b005      	add	sp, #20
   1139a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1139c:	00011331 	.word	0x00011331
   113a0:	10000028 	.word	0x10000028

000113a4 <Pin::EnableI2cHighSpeedMode(bool)>:
  // Enable by setting bit to 0 for i2c high speed mode
  void EnableI2cHighSpeedMode(bool enable_high_speed = true) override
   113a4:	b5f0      	push	{r4, r5, r6, r7, lr}
   113a6:	b085      	sub	sp, #20
   113a8:	4677      	mov	r7, lr
   113aa:	9003      	str	r0, [sp, #12]
   113ac:	460b      	mov	r3, r1
   113ae:	f88d 300b 	strb.w	r3, [sp, #11]
   113b2:	463b      	mov	r3, r7
   113b4:	4619      	mov	r1, r3
   113b6:	4818      	ldr	r0, [pc, #96]	; (11418 <Pin::EnableI2cHighSpeedMode(bool)+0x74>)
   113b8:	f001 fc2a 	bl	12c10 <__cyg_profile_func_enter>
  {
    pin_map->_register[port_][pin_] =
        BitPlace(pin_map->_register[port_][pin_], PinBitMap::kI2cHighSpeed,
   113bc:	4b17      	ldr	r3, [pc, #92]	; (1141c <Pin::EnableI2cHighSpeedMode(bool)+0x78>)
   113be:	681b      	ldr	r3, [r3, #0]
   113c0:	9a03      	ldr	r2, [sp, #12]
   113c2:	7912      	ldrb	r2, [r2, #4]
   113c4:	4610      	mov	r0, r2
   113c6:	9a03      	ldr	r2, [sp, #12]
   113c8:	7952      	ldrb	r2, [r2, #5]
   113ca:	4611      	mov	r1, r2
   113cc:	0142      	lsls	r2, r0, #5
   113ce:	440a      	add	r2, r1
   113d0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
                 !enable_high_speed, 1);
   113d4:	f89d 300b 	ldrb.w	r3, [sp, #11]
   113d8:	f083 0301 	eor.w	r3, r3, #1
   113dc:	b2db      	uxtb	r3, r3
        BitPlace(pin_map->_register[port_][pin_], PinBitMap::kI2cHighSpeed,
   113de:	461a      	mov	r2, r3
    pin_map->_register[port_][pin_] =
   113e0:	4b0e      	ldr	r3, [pc, #56]	; (1141c <Pin::EnableI2cHighSpeedMode(bool)+0x78>)
   113e2:	681c      	ldr	r4, [r3, #0]
   113e4:	9b03      	ldr	r3, [sp, #12]
   113e6:	791b      	ldrb	r3, [r3, #4]
   113e8:	461e      	mov	r6, r3
   113ea:	9b03      	ldr	r3, [sp, #12]
   113ec:	795b      	ldrb	r3, [r3, #5]
   113ee:	461d      	mov	r5, r3
        BitPlace(pin_map->_register[port_][pin_], PinBitMap::kI2cHighSpeed,
   113f0:	2301      	movs	r3, #1
   113f2:	9300      	str	r3, [sp, #0]
   113f4:	4613      	mov	r3, r2
   113f6:	2208      	movs	r2, #8
   113f8:	9803      	ldr	r0, [sp, #12]
   113fa:	f000 f8bf 	bl	1157c <Pin::BitPlace(unsigned long, unsigned long, unsigned long, unsigned long)>
   113fe:	4602      	mov	r2, r0
    pin_map->_register[port_][pin_] =
   11400:	0173      	lsls	r3, r6, #5
   11402:	442b      	add	r3, r5
   11404:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
   11408:	463b      	mov	r3, r7
   1140a:	4619      	mov	r1, r3
   1140c:	4802      	ldr	r0, [pc, #8]	; (11418 <Pin::EnableI2cHighSpeedMode(bool)+0x74>)
   1140e:	f001 fc13 	bl	12c38 <__cyg_profile_func_exit>
  }
   11412:	bf00      	nop
   11414:	b005      	add	sp, #20
   11416:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11418:	000113a5 	.word	0x000113a5
   1141c:	10000028 	.word	0x10000028

00011420 <Pin::EnableI2cHighCurrentDrive(bool)>:
  void EnableI2cHighCurrentDrive(bool enable_high_current = true) override
   11420:	b5f0      	push	{r4, r5, r6, r7, lr}
   11422:	b085      	sub	sp, #20
   11424:	4677      	mov	r7, lr
   11426:	9003      	str	r0, [sp, #12]
   11428:	460b      	mov	r3, r1
   1142a:	f88d 300b 	strb.w	r3, [sp, #11]
   1142e:	463b      	mov	r3, r7
   11430:	4619      	mov	r1, r3
   11432:	4816      	ldr	r0, [pc, #88]	; (1148c <Pin::EnableI2cHighCurrentDrive(bool)+0x6c>)
   11434:	f001 fbec 	bl	12c10 <__cyg_profile_func_enter>
  {
    pin_map->_register[port_][pin_] =
        BitPlace(pin_map->_register[port_][pin_],
   11438:	4b15      	ldr	r3, [pc, #84]	; (11490 <Pin::EnableI2cHighCurrentDrive(bool)+0x70>)
   1143a:	681b      	ldr	r3, [r3, #0]
   1143c:	9a03      	ldr	r2, [sp, #12]
   1143e:	7912      	ldrb	r2, [r2, #4]
   11440:	4610      	mov	r0, r2
   11442:	9a03      	ldr	r2, [sp, #12]
   11444:	7952      	ldrb	r2, [r2, #5]
   11446:	4611      	mov	r1, r2
   11448:	0142      	lsls	r2, r0, #5
   1144a:	440a      	add	r2, r1
   1144c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   11450:	f89d 200b 	ldrb.w	r2, [sp, #11]
    pin_map->_register[port_][pin_] =
   11454:	4b0e      	ldr	r3, [pc, #56]	; (11490 <Pin::EnableI2cHighCurrentDrive(bool)+0x70>)
   11456:	681c      	ldr	r4, [r3, #0]
   11458:	9b03      	ldr	r3, [sp, #12]
   1145a:	791b      	ldrb	r3, [r3, #4]
   1145c:	461e      	mov	r6, r3
   1145e:	9b03      	ldr	r3, [sp, #12]
   11460:	795b      	ldrb	r3, [r3, #5]
   11462:	461d      	mov	r5, r3
        BitPlace(pin_map->_register[port_][pin_],
   11464:	2301      	movs	r3, #1
   11466:	9300      	str	r3, [sp, #0]
   11468:	4613      	mov	r3, r2
   1146a:	2209      	movs	r2, #9
   1146c:	9803      	ldr	r0, [sp, #12]
   1146e:	f000 f885 	bl	1157c <Pin::BitPlace(unsigned long, unsigned long, unsigned long, unsigned long)>
   11472:	4602      	mov	r2, r0
    pin_map->_register[port_][pin_] =
   11474:	0173      	lsls	r3, r6, #5
   11476:	442b      	add	r3, r5
   11478:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
   1147c:	463b      	mov	r3, r7
   1147e:	4619      	mov	r1, r3
   11480:	4802      	ldr	r0, [pc, #8]	; (1148c <Pin::EnableI2cHighCurrentDrive(bool)+0x6c>)
   11482:	f001 fbd9 	bl	12c38 <__cyg_profile_func_exit>
                 PinBitMap::kI2cHighCurrentDrive, enable_high_current, 1);
  }
   11486:	bf00      	nop
   11488:	b005      	add	sp, #20
   1148a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1148c:	00011421 	.word	0x00011421
   11490:	10000028 	.word	0x10000028

00011494 <Pin::SetAsOpenDrain(bool)>:
  void SetAsOpenDrain(bool set_as_open_drain = true) override
   11494:	b5f0      	push	{r4, r5, r6, r7, lr}
   11496:	b085      	sub	sp, #20
   11498:	4677      	mov	r7, lr
   1149a:	9003      	str	r0, [sp, #12]
   1149c:	460b      	mov	r3, r1
   1149e:	f88d 300b 	strb.w	r3, [sp, #11]
   114a2:	463b      	mov	r3, r7
   114a4:	4619      	mov	r1, r3
   114a6:	4816      	ldr	r0, [pc, #88]	; (11500 <Pin::SetAsOpenDrain(bool)+0x6c>)
   114a8:	f001 fbb2 	bl	12c10 <__cyg_profile_func_enter>
  {
    pin_map->_register[port_][pin_] =
        BitPlace(pin_map->_register[port_][pin_], PinBitMap::kOpenDrain,
   114ac:	4b15      	ldr	r3, [pc, #84]	; (11504 <Pin::SetAsOpenDrain(bool)+0x70>)
   114ae:	681b      	ldr	r3, [r3, #0]
   114b0:	9a03      	ldr	r2, [sp, #12]
   114b2:	7912      	ldrb	r2, [r2, #4]
   114b4:	4610      	mov	r0, r2
   114b6:	9a03      	ldr	r2, [sp, #12]
   114b8:	7952      	ldrb	r2, [r2, #5]
   114ba:	4611      	mov	r1, r2
   114bc:	0142      	lsls	r2, r0, #5
   114be:	440a      	add	r2, r1
   114c0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   114c4:	f89d 200b 	ldrb.w	r2, [sp, #11]
    pin_map->_register[port_][pin_] =
   114c8:	4b0e      	ldr	r3, [pc, #56]	; (11504 <Pin::SetAsOpenDrain(bool)+0x70>)
   114ca:	681c      	ldr	r4, [r3, #0]
   114cc:	9b03      	ldr	r3, [sp, #12]
   114ce:	791b      	ldrb	r3, [r3, #4]
   114d0:	461e      	mov	r6, r3
   114d2:	9b03      	ldr	r3, [sp, #12]
   114d4:	795b      	ldrb	r3, [r3, #5]
   114d6:	461d      	mov	r5, r3
        BitPlace(pin_map->_register[port_][pin_], PinBitMap::kOpenDrain,
   114d8:	2301      	movs	r3, #1
   114da:	9300      	str	r3, [sp, #0]
   114dc:	4613      	mov	r3, r2
   114de:	220a      	movs	r2, #10
   114e0:	9803      	ldr	r0, [sp, #12]
   114e2:	f000 f84b 	bl	1157c <Pin::BitPlace(unsigned long, unsigned long, unsigned long, unsigned long)>
   114e6:	4602      	mov	r2, r0
    pin_map->_register[port_][pin_] =
   114e8:	0173      	lsls	r3, r6, #5
   114ea:	442b      	add	r3, r5
   114ec:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
   114f0:	463b      	mov	r3, r7
   114f2:	4619      	mov	r1, r3
   114f4:	4802      	ldr	r0, [pc, #8]	; (11500 <Pin::SetAsOpenDrain(bool)+0x6c>)
   114f6:	f001 fb9f 	bl	12c38 <__cyg_profile_func_exit>
                 set_as_open_drain, 1);
  }
   114fa:	bf00      	nop
   114fc:	b005      	add	sp, #20
   114fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11500:	00011495 	.word	0x00011495
   11504:	10000028 	.word	0x10000028

00011508 <Pin::EnableDac(bool)>:
  void EnableDac(bool enable_dac = true) override
   11508:	b5f0      	push	{r4, r5, r6, r7, lr}
   1150a:	b085      	sub	sp, #20
   1150c:	4677      	mov	r7, lr
   1150e:	9003      	str	r0, [sp, #12]
   11510:	460b      	mov	r3, r1
   11512:	f88d 300b 	strb.w	r3, [sp, #11]
   11516:	463b      	mov	r3, r7
   11518:	4619      	mov	r1, r3
   1151a:	4816      	ldr	r0, [pc, #88]	; (11574 <Pin::EnableDac(bool)+0x6c>)
   1151c:	f001 fb78 	bl	12c10 <__cyg_profile_func_enter>
  {
    pin_map->_register[port_][pin_] = BitPlace(
   11520:	4b15      	ldr	r3, [pc, #84]	; (11578 <Pin::EnableDac(bool)+0x70>)
   11522:	681b      	ldr	r3, [r3, #0]
        pin_map->_register[port_][pin_], PinBitMap::kDacEnable, enable_dac, 1);
   11524:	9a03      	ldr	r2, [sp, #12]
   11526:	7912      	ldrb	r2, [r2, #4]
   11528:	4610      	mov	r0, r2
   1152a:	9a03      	ldr	r2, [sp, #12]
   1152c:	7952      	ldrb	r2, [r2, #5]
   1152e:	4611      	mov	r1, r2
    pin_map->_register[port_][pin_] = BitPlace(
   11530:	0142      	lsls	r2, r0, #5
   11532:	440a      	add	r2, r1
   11534:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   11538:	f89d 200b 	ldrb.w	r2, [sp, #11]
   1153c:	4b0e      	ldr	r3, [pc, #56]	; (11578 <Pin::EnableDac(bool)+0x70>)
   1153e:	681c      	ldr	r4, [r3, #0]
   11540:	9b03      	ldr	r3, [sp, #12]
   11542:	791b      	ldrb	r3, [r3, #4]
   11544:	461e      	mov	r6, r3
   11546:	9b03      	ldr	r3, [sp, #12]
   11548:	795b      	ldrb	r3, [r3, #5]
   1154a:	461d      	mov	r5, r3
   1154c:	2301      	movs	r3, #1
   1154e:	9300      	str	r3, [sp, #0]
   11550:	4613      	mov	r3, r2
   11552:	2210      	movs	r2, #16
   11554:	9803      	ldr	r0, [sp, #12]
   11556:	f000 f811 	bl	1157c <Pin::BitPlace(unsigned long, unsigned long, unsigned long, unsigned long)>
   1155a:	4602      	mov	r2, r0
   1155c:	0173      	lsls	r3, r6, #5
   1155e:	442b      	add	r3, r5
   11560:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
   11564:	463b      	mov	r3, r7
   11566:	4619      	mov	r1, r3
   11568:	4802      	ldr	r0, [pc, #8]	; (11574 <Pin::EnableDac(bool)+0x6c>)
   1156a:	f001 fb65 	bl	12c38 <__cyg_profile_func_exit>
  }
   1156e:	bf00      	nop
   11570:	b005      	add	sp, #20
   11572:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11574:	00011509 	.word	0x00011509
   11578:	10000028 	.word	0x10000028

0001157c <Pin::BitPlace(unsigned long, unsigned long, unsigned long, unsigned long)>:
  inline uint32_t BitPlace(uint32_t target, uint32_t position, uint32_t value,
   1157c:	b530      	push	{r4, r5, lr}
   1157e:	b087      	sub	sp, #28
   11580:	4675      	mov	r5, lr
   11582:	9003      	str	r0, [sp, #12]
   11584:	9102      	str	r1, [sp, #8]
   11586:	9201      	str	r2, [sp, #4]
   11588:	9300      	str	r3, [sp, #0]
   1158a:	462b      	mov	r3, r5
   1158c:	4619      	mov	r1, r3
   1158e:	4813      	ldr	r0, [pc, #76]	; (115dc <Pin::BitPlace(unsigned long, unsigned long, unsigned long, unsigned long)+0x60>)
   11590:	f001 fb3e 	bl	12c10 <__cyg_profile_func_enter>
                           uint32_t value_width)
  {
    // Generate mask with all 1s
    uint32_t mask = 0xFFFFFFFF >> (32 - value_width);
   11594:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   11596:	f1c3 0320 	rsb	r3, r3, #32
   1159a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1159e:	fa22 f303 	lsr.w	r3, r2, r3
   115a2:	9305      	str	r3, [sp, #20]
    target &= ~(mask << position);
   115a4:	9a05      	ldr	r2, [sp, #20]
   115a6:	9b01      	ldr	r3, [sp, #4]
   115a8:	fa02 f303 	lsl.w	r3, r2, r3
   115ac:	43db      	mvns	r3, r3
   115ae:	9a02      	ldr	r2, [sp, #8]
   115b0:	4013      	ands	r3, r2
   115b2:	9302      	str	r3, [sp, #8]
    target |= (value & mask) << position;
   115b4:	9a00      	ldr	r2, [sp, #0]
   115b6:	9b05      	ldr	r3, [sp, #20]
   115b8:	401a      	ands	r2, r3
   115ba:	9b01      	ldr	r3, [sp, #4]
   115bc:	fa02 f303 	lsl.w	r3, r2, r3
   115c0:	9a02      	ldr	r2, [sp, #8]
   115c2:	4313      	orrs	r3, r2
   115c4:	9302      	str	r3, [sp, #8]
    return target;
   115c6:	9c02      	ldr	r4, [sp, #8]
   115c8:	462b      	mov	r3, r5
   115ca:	4619      	mov	r1, r3
   115cc:	4803      	ldr	r0, [pc, #12]	; (115dc <Pin::BitPlace(unsigned long, unsigned long, unsigned long, unsigned long)+0x60>)
   115ce:	f001 fb33 	bl	12c38 <__cyg_profile_func_exit>
   115d2:	4623      	mov	r3, r4
  }
   115d4:	4618      	mov	r0, r3
   115d6:	b007      	add	sp, #28
   115d8:	bd30      	pop	{r4, r5, pc}
   115da:	bf00      	nop
   115dc:	0001157d 	.word	0x0001157d

000115e0 <Pin::GetPort() const>:
  uint8_t GetPort() const override
   115e0:	b530      	push	{r4, r5, lr}
   115e2:	b083      	sub	sp, #12
   115e4:	4675      	mov	r5, lr
   115e6:	9001      	str	r0, [sp, #4]
   115e8:	462b      	mov	r3, r5
   115ea:	4619      	mov	r1, r3
   115ec:	4806      	ldr	r0, [pc, #24]	; (11608 <Pin::GetPort() const+0x28>)
   115ee:	f001 fb0f 	bl	12c10 <__cyg_profile_func_enter>
  {
    return port_;
   115f2:	9b01      	ldr	r3, [sp, #4]
   115f4:	791c      	ldrb	r4, [r3, #4]
   115f6:	462b      	mov	r3, r5
   115f8:	4619      	mov	r1, r3
   115fa:	4803      	ldr	r0, [pc, #12]	; (11608 <Pin::GetPort() const+0x28>)
   115fc:	f001 fb1c 	bl	12c38 <__cyg_profile_func_exit>
   11600:	4623      	mov	r3, r4
  }
   11602:	4618      	mov	r0, r3
   11604:	b003      	add	sp, #12
   11606:	bd30      	pop	{r4, r5, pc}
   11608:	000115e1 	.word	0x000115e1

0001160c <Pin::GetPin() const>:
  uint8_t GetPin() const override
   1160c:	b530      	push	{r4, r5, lr}
   1160e:	b083      	sub	sp, #12
   11610:	4675      	mov	r5, lr
   11612:	9001      	str	r0, [sp, #4]
   11614:	462b      	mov	r3, r5
   11616:	4619      	mov	r1, r3
   11618:	4806      	ldr	r0, [pc, #24]	; (11634 <Pin::GetPin() const+0x28>)
   1161a:	f001 faf9 	bl	12c10 <__cyg_profile_func_enter>
  {
    return pin_;
   1161e:	9b01      	ldr	r3, [sp, #4]
   11620:	795c      	ldrb	r4, [r3, #5]
   11622:	462b      	mov	r3, r5
   11624:	4619      	mov	r1, r3
   11626:	4803      	ldr	r0, [pc, #12]	; (11634 <Pin::GetPin() const+0x28>)
   11628:	f001 fb06 	bl	12c38 <__cyg_profile_func_exit>
   1162c:	4623      	mov	r3, r4
  }
   1162e:	4618      	mov	r0, r3
   11630:	b003      	add	sp, #12
   11632:	bd30      	pop	{r4, r5, pc}
   11634:	0001160d 	.word	0x0001160d

00011638 <unsigned char util::Value<TimerInterface::TimerPort, unsigned char>(TimerInterface::TimerPort)>:
//
// @param enum_type_value variable you would like to get the value of.
// @return the value of the enum class type variable of with the underlying
//         type of the enum class.
template <typename Enum, typename Type = typename std::underlying_type_t<Enum>>
constexpr Type Value(Enum enum_type_value)
   11638:	b530      	push	{r4, r5, lr}
   1163a:	b083      	sub	sp, #12
   1163c:	4675      	mov	r5, lr
   1163e:	4603      	mov	r3, r0
   11640:	f88d 3007 	strb.w	r3, [sp, #7]
   11644:	462b      	mov	r3, r5
   11646:	4619      	mov	r1, r3
   11648:	4806      	ldr	r0, [pc, #24]	; (11664 <unsigned char util::Value<TimerInterface::TimerPort, unsigned char>(TimerInterface::TimerPort)+0x2c>)
   1164a:	f001 fae1 	bl	12c10 <__cyg_profile_func_enter>
{
  return static_cast<Type>(enum_type_value);
   1164e:	f89d 4007 	ldrb.w	r4, [sp, #7]
   11652:	462b      	mov	r3, r5
   11654:	4619      	mov	r1, r3
   11656:	4803      	ldr	r0, [pc, #12]	; (11664 <unsigned char util::Value<TimerInterface::TimerPort, unsigned char>(TimerInterface::TimerPort)+0x2c>)
   11658:	f001 faee 	bl	12c38 <__cyg_profile_func_exit>
   1165c:	4623      	mov	r3, r4
}
   1165e:	4618      	mov	r0, r3
   11660:	b003      	add	sp, #12
   11662:	bd30      	pop	{r4, r5, pc}
   11664:	00011639 	.word	0x00011639

00011668 <Timer::DoNothingIsr()>:
    Lpc40xxSystemController::Peripherals::kTimer3
  };

  static constexpr IRQn kTimerIrq[] = { IRQn::TIMER0_IRQn, IRQn::TIMER1_IRQn,
                                        IRQn::TIMER2_IRQn, IRQn::TIMER3_IRQn };
  static void DoNothingIsr() {}
   11668:	b510      	push	{r4, lr}
   1166a:	4674      	mov	r4, lr
   1166c:	4623      	mov	r3, r4
   1166e:	4619      	mov	r1, r3
   11670:	4804      	ldr	r0, [pc, #16]	; (11684 <Timer::DoNothingIsr()+0x1c>)
   11672:	f001 facd 	bl	12c10 <__cyg_profile_func_enter>
   11676:	4623      	mov	r3, r4
   11678:	4619      	mov	r1, r3
   1167a:	4802      	ldr	r0, [pc, #8]	; (11684 <Timer::DoNothingIsr()+0x1c>)
   1167c:	f001 fadc 	bl	12c38 <__cyg_profile_func_exit>
   11680:	bf00      	nop
   11682:	bd10      	pop	{r4, pc}
   11684:	00011669 	.word	0x00011669

00011688 <Timer::Initialize(unsigned long, void (*)(), long)>:
  ///                  register will be 10 ms.
  /// @param isr an ISR that will fire when the condition set by SetTimer
  ///            method is achieved.
  /// @param priority sets the Timer interrupt's priority level, defaults to -1
  ///                 which uses the platforms default priority.
  void Initialize(uint32_t frequency, IsrPointer isr = DoNothingIsr,
   11688:	b510      	push	{r4, lr}
   1168a:	b086      	sub	sp, #24
   1168c:	4674      	mov	r4, lr
   1168e:	9003      	str	r0, [sp, #12]
   11690:	9102      	str	r1, [sp, #8]
   11692:	9201      	str	r2, [sp, #4]
   11694:	9300      	str	r3, [sp, #0]
   11696:	4623      	mov	r3, r4
   11698:	4619      	mov	r1, r3
   1169a:	483e      	ldr	r0, [pc, #248]	; (11794 <Timer::Initialize(unsigned long, void (*)(), long)+0x10c>)
   1169c:	f001 fab8 	bl	12c10 <__cyg_profile_func_enter>
                  int32_t priority = -1) override final
  {
    PowerUpPeripheral(kPowerbit[channel_]);
   116a0:	9b03      	ldr	r3, [sp, #12]
   116a2:	1d18      	adds	r0, r3, #4
   116a4:	9b03      	ldr	r3, [sp, #12]
   116a6:	685b      	ldr	r3, [r3, #4]
   116a8:	3314      	adds	r3, #20
   116aa:	681b      	ldr	r3, [r3, #0]
   116ac:	9a03      	ldr	r2, [sp, #12]
   116ae:	7a12      	ldrb	r2, [r2, #8]
   116b0:	0092      	lsls	r2, r2, #2
   116b2:	4939      	ldr	r1, [pc, #228]	; (11798 <Timer::Initialize(unsigned long, void (*)(), long)+0x110>)
   116b4:	440a      	add	r2, r1
   116b6:	4611      	mov	r1, r2
   116b8:	4798      	blx	r3
    SJ2_ASSERT_FATAL(
   116ba:	9b02      	ldr	r3, [sp, #8]
   116bc:	2b00      	cmp	r3, #0
   116be:	d10d      	bne.n	116dc <Timer::Initialize(unsigned long, void (*)(), long)+0x54>
   116c0:	2384      	movs	r3, #132	; 0x84
   116c2:	4a36      	ldr	r2, [pc, #216]	; (1179c <Timer::Initialize(unsigned long, void (*)(), long)+0x114>)
   116c4:	4936      	ldr	r1, [pc, #216]	; (117a0 <Timer::Initialize(unsigned long, void (*)(), long)+0x118>)
   116c6:	4837      	ldr	r0, [pc, #220]	; (117a4 <Timer::Initialize(unsigned long, void (*)(), long)+0x11c>)
   116c8:	f002 fcfc 	bl	140c4 <printf>
   116cc:	4836      	ldr	r0, [pc, #216]	; (117a8 <Timer::Initialize(unsigned long, void (*)(), long)+0x120>)
   116ce:	f001 fa6f 	bl	12bb0 <puts>
   116d2:	2100      	movs	r1, #0
   116d4:	2001      	movs	r0, #1
   116d6:	f7ff f83b 	bl	10750 <debug::PrintBacktrace(bool, void*)>
   116da:	e7fe      	b.n	116da <Timer::Initialize(unsigned long, void (*)(), long)+0x52>
        frequency != 0,
        "Cannot have zero ticks per microsecond, please choose 1 or more.");
    // Set Prescale register for Prescale Counter to milliseconds
    uint32_t prescaler = GetPeripheralFrequency() / frequency;
   116dc:	9b03      	ldr	r3, [sp, #12]
   116de:	1d1a      	adds	r2, r3, #4
   116e0:	9b03      	ldr	r3, [sp, #12]
   116e2:	685b      	ldr	r3, [r3, #4]
   116e4:	3310      	adds	r3, #16
   116e6:	681b      	ldr	r3, [r3, #0]
   116e8:	4610      	mov	r0, r2
   116ea:	4798      	blx	r3
   116ec:	4602      	mov	r2, r0
   116ee:	9b02      	ldr	r3, [sp, #8]
   116f0:	fbb2 f3f3 	udiv	r3, r2, r3
   116f4:	9305      	str	r3, [sp, #20]
    tim_register[channel_]->PR &= ~(kClear << 1);
   116f6:	9b03      	ldr	r3, [sp, #12]
   116f8:	7a1b      	ldrb	r3, [r3, #8]
   116fa:	461a      	mov	r2, r3
   116fc:	4b2b      	ldr	r3, [pc, #172]	; (117ac <Timer::Initialize(unsigned long, void (*)(), long)+0x124>)
   116fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   11702:	68da      	ldr	r2, [r3, #12]
   11704:	9b03      	ldr	r3, [sp, #12]
   11706:	7a1b      	ldrb	r3, [r3, #8]
   11708:	4619      	mov	r1, r3
   1170a:	4b28      	ldr	r3, [pc, #160]	; (117ac <Timer::Initialize(unsigned long, void (*)(), long)+0x124>)
   1170c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   11710:	f002 0201 	and.w	r2, r2, #1
   11714:	60da      	str	r2, [r3, #12]
    tim_register[channel_]->PR |= (prescaler << 1);
   11716:	9b03      	ldr	r3, [sp, #12]
   11718:	7a1b      	ldrb	r3, [r3, #8]
   1171a:	461a      	mov	r2, r3
   1171c:	4b23      	ldr	r3, [pc, #140]	; (117ac <Timer::Initialize(unsigned long, void (*)(), long)+0x124>)
   1171e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   11722:	68d9      	ldr	r1, [r3, #12]
   11724:	9b05      	ldr	r3, [sp, #20]
   11726:	005a      	lsls	r2, r3, #1
   11728:	9b03      	ldr	r3, [sp, #12]
   1172a:	7a1b      	ldrb	r3, [r3, #8]
   1172c:	4618      	mov	r0, r3
   1172e:	4b1f      	ldr	r3, [pc, #124]	; (117ac <Timer::Initialize(unsigned long, void (*)(), long)+0x124>)
   11730:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   11734:	430a      	orrs	r2, r1
   11736:	60da      	str	r2, [r3, #12]
    tim_register[channel_]->TCR |= (1 << 0);
   11738:	9b03      	ldr	r3, [sp, #12]
   1173a:	7a1b      	ldrb	r3, [r3, #8]
   1173c:	461a      	mov	r2, r3
   1173e:	4b1b      	ldr	r3, [pc, #108]	; (117ac <Timer::Initialize(unsigned long, void (*)(), long)+0x124>)
   11740:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   11744:	685a      	ldr	r2, [r3, #4]
   11746:	9b03      	ldr	r3, [sp, #12]
   11748:	7a1b      	ldrb	r3, [r3, #8]
   1174a:	4619      	mov	r1, r3
   1174c:	4b17      	ldr	r3, [pc, #92]	; (117ac <Timer::Initialize(unsigned long, void (*)(), long)+0x124>)
   1174e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   11752:	f042 0201 	orr.w	r2, r2, #1
   11756:	605a      	str	r2, [r3, #4]
    user_timer_isr[channel_] = isr;
   11758:	9b03      	ldr	r3, [sp, #12]
   1175a:	7a1b      	ldrb	r3, [r3, #8]
   1175c:	4619      	mov	r1, r3
   1175e:	4a14      	ldr	r2, [pc, #80]	; (117b0 <Timer::Initialize(unsigned long, void (*)(), long)+0x128>)
   11760:	9b01      	ldr	r3, [sp, #4]
   11762:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
    RegisterIsr(kTimerIrq[channel_], kTimerIsr[channel_], true, priority);
   11766:	9b03      	ldr	r3, [sp, #12]
   11768:	7a1b      	ldrb	r3, [r3, #8]
   1176a:	461a      	mov	r2, r3
   1176c:	4b11      	ldr	r3, [pc, #68]	; (117b4 <Timer::Initialize(unsigned long, void (*)(), long)+0x12c>)
   1176e:	5698      	ldrsb	r0, [r3, r2]
   11770:	9b03      	ldr	r3, [sp, #12]
   11772:	7a1b      	ldrb	r3, [r3, #8]
   11774:	461a      	mov	r2, r3
   11776:	4b10      	ldr	r3, [pc, #64]	; (117b8 <Timer::Initialize(unsigned long, void (*)(), long)+0x130>)
   11778:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   1177c:	9b00      	ldr	r3, [sp, #0]
   1177e:	2201      	movs	r2, #1
   11780:	f001 f91e 	bl	129c0 <RegisterIsr(IRQn, void (*)(), bool, long)>
   11784:	4623      	mov	r3, r4
   11786:	4619      	mov	r1, r3
   11788:	4802      	ldr	r0, [pc, #8]	; (11794 <Timer::Initialize(unsigned long, void (*)(), long)+0x10c>)
   1178a:	f001 fa55 	bl	12c38 <__cyg_profile_func_exit>
  }
   1178e:	bf00      	nop
   11790:	b006      	add	sp, #24
   11792:	bd10      	pop	{r4, pc}
   11794:	00011689 	.word	0x00011689
   11798:	00017944 	.word	0x00017944
   1179c:	00017be4 	.word	0x00017be4
   117a0:	00017968 	.word	0x00017968
   117a4:	000177ac 	.word	0x000177ac
   117a8:	000174b8 	.word	0x000174b8
   117ac:	1000002c 	.word	0x1000002c
   117b0:	100002e4 	.word	0x100002e4
   117b4:	00017954 	.word	0x00017954
   117b8:	00017958 	.word	0x00017958

000117bc <unsigned char util::Value<TimerInterface::MatchControlRegister, unsigned char>(TimerInterface::MatchControlRegister)>:
constexpr Type Value(Enum enum_type_value)
   117bc:	b530      	push	{r4, r5, lr}
   117be:	b083      	sub	sp, #12
   117c0:	4675      	mov	r5, lr
   117c2:	4603      	mov	r3, r0
   117c4:	f88d 3007 	strb.w	r3, [sp, #7]
   117c8:	462b      	mov	r3, r5
   117ca:	4619      	mov	r1, r3
   117cc:	4806      	ldr	r0, [pc, #24]	; (117e8 <unsigned char util::Value<TimerInterface::MatchControlRegister, unsigned char>(TimerInterface::MatchControlRegister)+0x2c>)
   117ce:	f001 fa1f 	bl	12c10 <__cyg_profile_func_enter>
  return static_cast<Type>(enum_type_value);
   117d2:	f89d 4007 	ldrb.w	r4, [sp, #7]
   117d6:	462b      	mov	r3, r5
   117d8:	4619      	mov	r1, r3
   117da:	4803      	ldr	r0, [pc, #12]	; (117e8 <unsigned char util::Value<TimerInterface::MatchControlRegister, unsigned char>(TimerInterface::MatchControlRegister)+0x2c>)
   117dc:	f001 fa2c 	bl	12c38 <__cyg_profile_func_exit>
   117e0:	4623      	mov	r3, r4
}
   117e2:	4618      	mov	r0, r3
   117e4:	b003      	add	sp, #12
   117e6:	bd30      	pop	{r4, r5, pc}
   117e8:	000117bd 	.word	0x000117bd

000117ec <Timer::SetTimer(unsigned long, TimerInterface::TimerIsrCondition, TimerInterface::MatchControlRegister)>:
  ///
  /// @param ticks the count of the timer register (TC) to have an ISR fire
  /// @param condition the condition for which a timer interrupt will occur
  /// @param match_register which match register (from 0 to 3) should be used
  ///                       for holding the ticks for the condition.
  void SetTimer(uint32_t ticks, TimerIsrCondition condition,
   117ec:	b570      	push	{r4, r5, r6, lr}
   117ee:	b086      	sub	sp, #24
   117f0:	4676      	mov	r6, lr
   117f2:	9003      	str	r0, [sp, #12]
   117f4:	9102      	str	r1, [sp, #8]
   117f6:	4611      	mov	r1, r2
   117f8:	461a      	mov	r2, r3
   117fa:	460b      	mov	r3, r1
   117fc:	f88d 3007 	strb.w	r3, [sp, #7]
   11800:	4613      	mov	r3, r2
   11802:	f88d 3006 	strb.w	r3, [sp, #6]
   11806:	4633      	mov	r3, r6
   11808:	4619      	mov	r1, r3
   1180a:	4832      	ldr	r0, [pc, #200]	; (118d4 <Timer::SetTimer(unsigned long, TimerInterface::TimerIsrCondition, TimerInterface::MatchControlRegister)+0xe8>)
   1180c:	f001 fa00 	bl	12c10 <__cyg_profile_func_enter>
                MatchControlRegister match_register = kMat0) override final
  {
    static constexpr uint8_t kClearMode = 0b0111;

    uint8_t match_value = util::Value(match_register);
   11810:	f89d 3006 	ldrb.w	r3, [sp, #6]
   11814:	4618      	mov	r0, r3
   11816:	f7ff ffd1 	bl	117bc <unsigned char util::Value<TimerInterface::MatchControlRegister, unsigned char>(TimerInterface::MatchControlRegister)>
   1181a:	4603      	mov	r3, r0
   1181c:	f88d 3017 	strb.w	r3, [sp, #23]
    tim_register[channel_]->MCR &= ~(kClearMode << match_value);
   11820:	9b03      	ldr	r3, [sp, #12]
   11822:	7a1b      	ldrb	r3, [r3, #8]
   11824:	461a      	mov	r2, r3
   11826:	4b2c      	ldr	r3, [pc, #176]	; (118d8 <Timer::SetTimer(unsigned long, TimerInterface::TimerIsrCondition, TimerInterface::MatchControlRegister)+0xec>)
   11828:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   1182c:	695a      	ldr	r2, [r3, #20]
   1182e:	f89d 3017 	ldrb.w	r3, [sp, #23]
   11832:	2107      	movs	r1, #7
   11834:	fa01 f303 	lsl.w	r3, r1, r3
   11838:	43db      	mvns	r3, r3
   1183a:	4619      	mov	r1, r3
   1183c:	9b03      	ldr	r3, [sp, #12]
   1183e:	7a1b      	ldrb	r3, [r3, #8]
   11840:	4618      	mov	r0, r3
   11842:	4b25      	ldr	r3, [pc, #148]	; (118d8 <Timer::SetTimer(unsigned long, TimerInterface::TimerIsrCondition, TimerInterface::MatchControlRegister)+0xec>)
   11844:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   11848:	400a      	ands	r2, r1
   1184a:	615a      	str	r2, [r3, #20]
    tim_register[channel_]->MCR |= condition << match_value;
   1184c:	9b03      	ldr	r3, [sp, #12]
   1184e:	7a1b      	ldrb	r3, [r3, #8]
   11850:	461a      	mov	r2, r3
   11852:	4b21      	ldr	r3, [pc, #132]	; (118d8 <Timer::SetTimer(unsigned long, TimerInterface::TimerIsrCondition, TimerInterface::MatchControlRegister)+0xec>)
   11854:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   11858:	695a      	ldr	r2, [r3, #20]
   1185a:	f89d 1007 	ldrb.w	r1, [sp, #7]
   1185e:	f89d 3017 	ldrb.w	r3, [sp, #23]
   11862:	fa01 f303 	lsl.w	r3, r1, r3
   11866:	4619      	mov	r1, r3
   11868:	9b03      	ldr	r3, [sp, #12]
   1186a:	7a1b      	ldrb	r3, [r3, #8]
   1186c:	4618      	mov	r0, r3
   1186e:	4b1a      	ldr	r3, [pc, #104]	; (118d8 <Timer::SetTimer(unsigned long, TimerInterface::TimerIsrCondition, TimerInterface::MatchControlRegister)+0xec>)
   11870:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   11874:	430a      	orrs	r2, r1
   11876:	615a      	str	r2, [r3, #20]
    *match[channel_][match_value / 3] |= (((ticks / 2)) << 0);
   11878:	9b03      	ldr	r3, [sp, #12]
   1187a:	7a1b      	ldrb	r3, [r3, #8]
   1187c:	4618      	mov	r0, r3
   1187e:	f89d 3017 	ldrb.w	r3, [sp, #23]
   11882:	4a16      	ldr	r2, [pc, #88]	; (118dc <Timer::SetTimer(unsigned long, TimerInterface::TimerIsrCondition, TimerInterface::MatchControlRegister)+0xf0>)
   11884:	fba2 2303 	umull	r2, r3, r2, r3
   11888:	085b      	lsrs	r3, r3, #1
   1188a:	b2db      	uxtb	r3, r3
   1188c:	4619      	mov	r1, r3
   1188e:	4a14      	ldr	r2, [pc, #80]	; (118e0 <Timer::SetTimer(unsigned long, TimerInterface::TimerIsrCondition, TimerInterface::MatchControlRegister)+0xf4>)
   11890:	0083      	lsls	r3, r0, #2
   11892:	440b      	add	r3, r1
   11894:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11898:	6819      	ldr	r1, [r3, #0]
   1189a:	9b02      	ldr	r3, [sp, #8]
   1189c:	085a      	lsrs	r2, r3, #1
   1189e:	9b03      	ldr	r3, [sp, #12]
   118a0:	7a1b      	ldrb	r3, [r3, #8]
   118a2:	461d      	mov	r5, r3
   118a4:	f89d 3017 	ldrb.w	r3, [sp, #23]
   118a8:	480c      	ldr	r0, [pc, #48]	; (118dc <Timer::SetTimer(unsigned long, TimerInterface::TimerIsrCondition, TimerInterface::MatchControlRegister)+0xf0>)
   118aa:	fba0 0303 	umull	r0, r3, r0, r3
   118ae:	085b      	lsrs	r3, r3, #1
   118b0:	b2db      	uxtb	r3, r3
   118b2:	461c      	mov	r4, r3
   118b4:	480a      	ldr	r0, [pc, #40]	; (118e0 <Timer::SetTimer(unsigned long, TimerInterface::TimerIsrCondition, TimerInterface::MatchControlRegister)+0xf4>)
   118b6:	00ab      	lsls	r3, r5, #2
   118b8:	4423      	add	r3, r4
   118ba:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
   118be:	430a      	orrs	r2, r1
   118c0:	601a      	str	r2, [r3, #0]
   118c2:	4633      	mov	r3, r6
   118c4:	4619      	mov	r1, r3
   118c6:	4803      	ldr	r0, [pc, #12]	; (118d4 <Timer::SetTimer(unsigned long, TimerInterface::TimerIsrCondition, TimerInterface::MatchControlRegister)+0xe8>)
   118c8:	f001 f9b6 	bl	12c38 <__cyg_profile_func_exit>
  }
   118cc:	bf00      	nop
   118ce:	b006      	add	sp, #24
   118d0:	bd70      	pop	{r4, r5, r6, pc}
   118d2:	bf00      	nop
   118d4:	000117ed 	.word	0x000117ed
   118d8:	1000002c 	.word	0x1000002c
   118dc:	aaaaaaab 	.word	0xaaaaaaab
   118e0:	100002a4 	.word	0x100002a4

000118e4 <Timer::GetTimer()>:

  [[gnu::always_inline]] uint32_t GetTimer() override final {
   118e4:	b530      	push	{r4, r5, lr}
   118e6:	b083      	sub	sp, #12
   118e8:	4675      	mov	r5, lr
   118ea:	9001      	str	r0, [sp, #4]
   118ec:	462b      	mov	r3, r5
   118ee:	4619      	mov	r1, r3
   118f0:	4809      	ldr	r0, [pc, #36]	; (11918 <Timer::GetTimer()+0x34>)
   118f2:	f001 f98d 	bl	12c10 <__cyg_profile_func_enter>
    return tim_register[channel_]->TC;
   118f6:	9b01      	ldr	r3, [sp, #4]
   118f8:	7a1b      	ldrb	r3, [r3, #8]
   118fa:	461a      	mov	r2, r3
   118fc:	4b07      	ldr	r3, [pc, #28]	; (1191c <Timer::GetTimer()+0x38>)
   118fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   11902:	689c      	ldr	r4, [r3, #8]
   11904:	462b      	mov	r3, r5
   11906:	4619      	mov	r1, r3
   11908:	4803      	ldr	r0, [pc, #12]	; (11918 <Timer::GetTimer()+0x34>)
   1190a:	f001 f995 	bl	12c38 <__cyg_profile_func_exit>
   1190e:	4623      	mov	r3, r4
  }
   11910:	4618      	mov	r0, r3
   11912:	b003      	add	sp, #12
   11914:	bd30      	pop	{r4, r5, pc}
   11916:	bf00      	nop
   11918:	000118e5 	.word	0x000118e5
   1191c:	1000002c 	.word	0x1000002c

00011920 <Uart::SetBaudRate(unsigned long)>:
  constexpr Uart(Channels mode, PinInterface * tx_pin, PinInterface * rx_pin)
      : channel_(static_cast<uint8_t>(mode)), tx_(tx_pin), rx_(rx_pin)
  {
  }

  void SetBaudRate(uint32_t baud_rate) override
   11920:	b510      	push	{r4, lr}
   11922:	b088      	sub	sp, #32
   11924:	4674      	mov	r4, lr
   11926:	9001      	str	r0, [sp, #4]
   11928:	9100      	str	r1, [sp, #0]
   1192a:	4623      	mov	r3, r4
   1192c:	4619      	mov	r1, r3
   1192e:	482d      	ldr	r0, [pc, #180]	; (119e4 <Uart::SetBaudRate(unsigned long)+0xc4>)
   11930:	f001 f96e 	bl	12c10 <__cyg_profile_func_enter>
  {
    constexpr uint8_t kDlabBit = (1 << 7);
   11934:	2380      	movs	r3, #128	; 0x80
   11936:	f88d 301f 	strb.w	r3, [sp, #31]
    float baudrate             = static_cast<float>(baud_rate);
   1193a:	9b00      	ldr	r3, [sp, #0]
   1193c:	ee07 3a90 	vmov	s15, r3
   11940:	eef8 7a67 	vcvt.f32.u32	s15, s15
   11944:	edcd 7a06 	vstr	s15, [sp, #24]
    UartCalibration_t dividers = GenerateUartCalibration(baudrate);
   11948:	ab02      	add	r3, sp, #8
   1194a:	ed9d 0a06 	vldr	s0, [sp, #24]
   1194e:	9901      	ldr	r1, [sp, #4]
   11950:	4618      	mov	r0, r3
   11952:	f000 fb2d 	bl	11fb0 <Uart::GenerateUartCalibration(float)>

    uint8_t dlm = static_cast<uint8_t>((dividers.divide_latch >> 8) & 0xFF);
   11956:	9b02      	ldr	r3, [sp, #8]
   11958:	0a1b      	lsrs	r3, r3, #8
   1195a:	f88d 3017 	strb.w	r3, [sp, #23]
    uint8_t dll = static_cast<uint8_t>(dividers.divide_latch & 0xFF);
   1195e:	9b02      	ldr	r3, [sp, #8]
   11960:	f88d 3016 	strb.w	r3, [sp, #22]
    uint8_t fdr = static_cast<uint8_t>((dividers.multiply & 0xF) << 4 |
   11964:	9b04      	ldr	r3, [sp, #16]
   11966:	b2db      	uxtb	r3, r3
   11968:	011b      	lsls	r3, r3, #4
   1196a:	b2da      	uxtb	r2, r3
                                       (dividers.divide_add & 0xF));
   1196c:	9b03      	ldr	r3, [sp, #12]
   1196e:	b2db      	uxtb	r3, r3
   11970:	f003 030f 	and.w	r3, r3, #15
   11974:	b2db      	uxtb	r3, r3
    uint8_t fdr = static_cast<uint8_t>((dividers.multiply & 0xF) << 4 |
   11976:	4313      	orrs	r3, r2
   11978:	f88d 3015 	strb.w	r3, [sp, #21]

    // Set baud rate
    uart[channel_]->LCR = kDlabBit;
   1197c:	9b01      	ldr	r3, [sp, #4]
   1197e:	7a1b      	ldrb	r3, [r3, #8]
   11980:	461a      	mov	r2, r3
   11982:	4b19      	ldr	r3, [pc, #100]	; (119e8 <Uart::SetBaudRate(unsigned long)+0xc8>)
   11984:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   11988:	2280      	movs	r2, #128	; 0x80
   1198a:	731a      	strb	r2, [r3, #12]
    uart[channel_]->DLM = dlm;
   1198c:	9b01      	ldr	r3, [sp, #4]
   1198e:	7a1b      	ldrb	r3, [r3, #8]
   11990:	461a      	mov	r2, r3
   11992:	4b15      	ldr	r3, [pc, #84]	; (119e8 <Uart::SetBaudRate(unsigned long)+0xc8>)
   11994:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   11998:	f89d 2017 	ldrb.w	r2, [sp, #23]
   1199c:	711a      	strb	r2, [r3, #4]
    uart[channel_]->DLL = dll;
   1199e:	9b01      	ldr	r3, [sp, #4]
   119a0:	7a1b      	ldrb	r3, [r3, #8]
   119a2:	461a      	mov	r2, r3
   119a4:	4b10      	ldr	r3, [pc, #64]	; (119e8 <Uart::SetBaudRate(unsigned long)+0xc8>)
   119a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   119aa:	f89d 2016 	ldrb.w	r2, [sp, #22]
   119ae:	701a      	strb	r2, [r3, #0]
    uart[channel_]->FDR = fdr;
   119b0:	9b01      	ldr	r3, [sp, #4]
   119b2:	7a1b      	ldrb	r3, [r3, #8]
   119b4:	461a      	mov	r2, r3
   119b6:	4b0c      	ldr	r3, [pc, #48]	; (119e8 <Uart::SetBaudRate(unsigned long)+0xc8>)
   119b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   119bc:	f89d 2015 	ldrb.w	r2, [sp, #21]
   119c0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    uart[channel_]->LCR = kStandardUart;
   119c4:	9b01      	ldr	r3, [sp, #4]
   119c6:	7a1b      	ldrb	r3, [r3, #8]
   119c8:	461a      	mov	r2, r3
   119ca:	4b07      	ldr	r3, [pc, #28]	; (119e8 <Uart::SetBaudRate(unsigned long)+0xc8>)
   119cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   119d0:	2203      	movs	r2, #3
   119d2:	731a      	strb	r2, [r3, #12]
   119d4:	4623      	mov	r3, r4
   119d6:	4619      	mov	r1, r3
   119d8:	4802      	ldr	r0, [pc, #8]	; (119e4 <Uart::SetBaudRate(unsigned long)+0xc4>)
   119da:	f001 f92d 	bl	12c38 <__cyg_profile_func_exit>
  }
   119de:	bf00      	nop
   119e0:	b008      	add	sp, #32
   119e2:	bd10      	pop	{r4, pc}
   119e4:	00011921 	.word	0x00011921
   119e8:	1000003c 	.word	0x1000003c

000119ec <Uart::Initialize(unsigned long)>:

  bool Initialize(uint32_t baud_rate) override
   119ec:	b530      	push	{r4, r5, lr}
   119ee:	b085      	sub	sp, #20
   119f0:	4675      	mov	r5, lr
   119f2:	9001      	str	r0, [sp, #4]
   119f4:	9100      	str	r1, [sp, #0]
   119f6:	462b      	mov	r3, r5
   119f8:	4619      	mov	r1, r3
   119fa:	4830      	ldr	r0, [pc, #192]	; (11abc <Uart::Initialize(unsigned long)+0xd0>)
   119fc:	f001 f908 	bl	12c10 <__cyg_profile_func_enter>
  {
    constexpr uint8_t kFIFOEnableAndReset = 0b111;
   11a00:	2307      	movs	r3, #7
   11a02:	f88d 300f 	strb.w	r3, [sp, #15]
    // Powering the port
    PowerUpPeripheral(kPowerbit[channel_]);
   11a06:	9b01      	ldr	r3, [sp, #4]
   11a08:	1d18      	adds	r0, r3, #4
   11a0a:	9b01      	ldr	r3, [sp, #4]
   11a0c:	685b      	ldr	r3, [r3, #4]
   11a0e:	3314      	adds	r3, #20
   11a10:	681b      	ldr	r3, [r3, #0]
   11a12:	9a01      	ldr	r2, [sp, #4]
   11a14:	7a12      	ldrb	r2, [r2, #8]
   11a16:	0092      	lsls	r2, r2, #2
   11a18:	4929      	ldr	r1, [pc, #164]	; (11ac0 <Uart::Initialize(unsigned long)+0xd4>)
   11a1a:	440a      	add	r2, r1
   11a1c:	4611      	mov	r1, r2
   11a1e:	4798      	blx	r3
    // Setting the pin functions and modes
    rx_->SetPinFunction(kRxUartPortFunction[channel_]);
   11a20:	9b01      	ldr	r3, [sp, #4]
   11a22:	6918      	ldr	r0, [r3, #16]
   11a24:	9b01      	ldr	r3, [sp, #4]
   11a26:	691b      	ldr	r3, [r3, #16]
   11a28:	681b      	ldr	r3, [r3, #0]
   11a2a:	681b      	ldr	r3, [r3, #0]
   11a2c:	9a01      	ldr	r2, [sp, #4]
   11a2e:	7a12      	ldrb	r2, [r2, #8]
   11a30:	4611      	mov	r1, r2
   11a32:	4a24      	ldr	r2, [pc, #144]	; (11ac4 <Uart::Initialize(unsigned long)+0xd8>)
   11a34:	5c52      	ldrb	r2, [r2, r1]
   11a36:	4611      	mov	r1, r2
   11a38:	4798      	blx	r3
    tx_->SetPinFunction(kTxUartPortFunction[channel_]);
   11a3a:	9b01      	ldr	r3, [sp, #4]
   11a3c:	68d8      	ldr	r0, [r3, #12]
   11a3e:	9b01      	ldr	r3, [sp, #4]
   11a40:	68db      	ldr	r3, [r3, #12]
   11a42:	681b      	ldr	r3, [r3, #0]
   11a44:	681b      	ldr	r3, [r3, #0]
   11a46:	9a01      	ldr	r2, [sp, #4]
   11a48:	7a12      	ldrb	r2, [r2, #8]
   11a4a:	4611      	mov	r1, r2
   11a4c:	4a1e      	ldr	r2, [pc, #120]	; (11ac8 <Uart::Initialize(unsigned long)+0xdc>)
   11a4e:	5c52      	ldrb	r2, [r2, r1]
   11a50:	4611      	mov	r1, r2
   11a52:	4798      	blx	r3
    rx_->SetMode(PinInterface::Mode::kPullUp);
   11a54:	9b01      	ldr	r3, [sp, #4]
   11a56:	691a      	ldr	r2, [r3, #16]
   11a58:	9b01      	ldr	r3, [sp, #4]
   11a5a:	691b      	ldr	r3, [r3, #16]
   11a5c:	681b      	ldr	r3, [r3, #0]
   11a5e:	3304      	adds	r3, #4
   11a60:	681b      	ldr	r3, [r3, #0]
   11a62:	2102      	movs	r1, #2
   11a64:	4610      	mov	r0, r2
   11a66:	4798      	blx	r3
    tx_->SetMode(PinInterface::Mode::kPullUp);
   11a68:	9b01      	ldr	r3, [sp, #4]
   11a6a:	68da      	ldr	r2, [r3, #12]
   11a6c:	9b01      	ldr	r3, [sp, #4]
   11a6e:	68db      	ldr	r3, [r3, #12]
   11a70:	681b      	ldr	r3, [r3, #0]
   11a72:	3304      	adds	r3, #4
   11a74:	681b      	ldr	r3, [r3, #0]
   11a76:	2102      	movs	r1, #2
   11a78:	4610      	mov	r0, r2
   11a7a:	4798      	blx	r3
    // Baud rate setting
    SetBaudRate(baud_rate);
   11a7c:	9900      	ldr	r1, [sp, #0]
   11a7e:	9801      	ldr	r0, [sp, #4]
   11a80:	f7ff ff4e 	bl	11920 <Uart::SetBaudRate(unsigned long)>
    uart[channel_]->FCR |= kFIFOEnableAndReset;
   11a84:	9b01      	ldr	r3, [sp, #4]
   11a86:	7a1b      	ldrb	r3, [r3, #8]
   11a88:	461a      	mov	r2, r3
   11a8a:	4b10      	ldr	r3, [pc, #64]	; (11acc <Uart::Initialize(unsigned long)+0xe0>)
   11a8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   11a90:	7a1b      	ldrb	r3, [r3, #8]
   11a92:	b2da      	uxtb	r2, r3
   11a94:	9b01      	ldr	r3, [sp, #4]
   11a96:	7a1b      	ldrb	r3, [r3, #8]
   11a98:	4619      	mov	r1, r3
   11a9a:	4b0c      	ldr	r3, [pc, #48]	; (11acc <Uart::Initialize(unsigned long)+0xe0>)
   11a9c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   11aa0:	f042 0207 	orr.w	r2, r2, #7
   11aa4:	b2d2      	uxtb	r2, r2
   11aa6:	721a      	strb	r2, [r3, #8]
    return true;
   11aa8:	2401      	movs	r4, #1
   11aaa:	462b      	mov	r3, r5
   11aac:	4619      	mov	r1, r3
   11aae:	4803      	ldr	r0, [pc, #12]	; (11abc <Uart::Initialize(unsigned long)+0xd0>)
   11ab0:	f001 f8c2 	bl	12c38 <__cyg_profile_func_exit>
   11ab4:	4623      	mov	r3, r4
  }
   11ab6:	4618      	mov	r0, r3
   11ab8:	b005      	add	sp, #20
   11aba:	bd30      	pop	{r4, r5, pc}
   11abc:	000119ed 	.word	0x000119ed
   11ac0:	0001797c 	.word	0x0001797c
   11ac4:	00017978 	.word	0x00017978
   11ac8:	00017974 	.word	0x00017974
   11acc:	1000003c 	.word	0x1000003c

00011ad0 <Uart::Send(unsigned char)::{lambda()#1}::operator()() const>:

  void Send(uint8_t data) override
  {
    uart[channel_]->THR              = data;
    auto wait_for_transfer_to_finish = [this]() -> bool {
   11ad0:	b530      	push	{r4, r5, lr}
   11ad2:	b083      	sub	sp, #12
   11ad4:	4675      	mov	r5, lr
   11ad6:	9001      	str	r0, [sp, #4]
   11ad8:	462b      	mov	r3, r5
   11ada:	4619      	mov	r1, r3
   11adc:	480d      	ldr	r0, [pc, #52]	; (11b14 <Uart::Send(unsigned char)::{lambda()#1}::operator()() const+0x44>)
   11ade:	f001 f897 	bl	12c10 <__cyg_profile_func_enter>
   11ae2:	9b01      	ldr	r3, [sp, #4]
   11ae4:	681b      	ldr	r3, [r3, #0]
      return (uart[channel_]->LSR & (1 << 5));
   11ae6:	7a1b      	ldrb	r3, [r3, #8]
   11ae8:	461a      	mov	r2, r3
   11aea:	4b0b      	ldr	r3, [pc, #44]	; (11b18 <Uart::Send(unsigned char)::{lambda()#1}::operator()() const+0x48>)
   11aec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   11af0:	7d1b      	ldrb	r3, [r3, #20]
   11af2:	b2db      	uxtb	r3, r3
   11af4:	f003 0320 	and.w	r3, r3, #32
   11af8:	2b00      	cmp	r3, #0
   11afa:	bf14      	ite	ne
   11afc:	2301      	movne	r3, #1
   11afe:	2300      	moveq	r3, #0
   11b00:	b2dc      	uxtb	r4, r3
   11b02:	462b      	mov	r3, r5
   11b04:	4619      	mov	r1, r3
   11b06:	4803      	ldr	r0, [pc, #12]	; (11b14 <Uart::Send(unsigned char)::{lambda()#1}::operator()() const+0x44>)
   11b08:	f001 f896 	bl	12c38 <__cyg_profile_func_exit>
   11b0c:	4623      	mov	r3, r4
    };
   11b0e:	4618      	mov	r0, r3
   11b10:	b003      	add	sp, #12
   11b12:	bd30      	pop	{r4, r5, pc}
   11b14:	00011ad1 	.word	0x00011ad1
   11b18:	1000003c 	.word	0x1000003c

00011b1c <Uart::Send(unsigned char)>:
  void Send(uint8_t data) override
   11b1c:	e92d 4830 	stmdb	sp!, {r4, r5, fp, lr}
   11b20:	b08a      	sub	sp, #40	; 0x28
   11b22:	4675      	mov	r5, lr
   11b24:	9001      	str	r0, [sp, #4]
   11b26:	460b      	mov	r3, r1
   11b28:	f88d 3003 	strb.w	r3, [sp, #3]
   11b2c:	462b      	mov	r3, r5
   11b2e:	4619      	mov	r1, r3
   11b30:	4831      	ldr	r0, [pc, #196]	; (11bf8 <Uart::Send(unsigned char)+0xdc>)
   11b32:	f001 f86d 	bl	12c10 <__cyg_profile_func_enter>
    uart[channel_]->THR              = data;
   11b36:	9b01      	ldr	r3, [sp, #4]
   11b38:	7a1b      	ldrb	r3, [r3, #8]
   11b3a:	461a      	mov	r2, r3
   11b3c:	4b2f      	ldr	r3, [pc, #188]	; (11bfc <Uart::Send(unsigned char)+0xe0>)
   11b3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   11b42:	f89d 2003 	ldrb.w	r2, [sp, #3]
   11b46:	701a      	strb	r2, [r3, #0]
    };
   11b48:	9b01      	ldr	r3, [sp, #4]
   11b4a:	9304      	str	r3, [sp, #16]
   11b4c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   11b50:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   11b54:	e9cd 3408 	strd	r3, r4, [sp, #32]
   11b58:	9b04      	ldr	r3, [sp, #16]
   11b5a:	9303      	str	r3, [sp, #12]
   11b5c:	462b      	mov	r3, r5
   11b5e:	4619      	mov	r1, r3
   11b60:	4827      	ldr	r0, [pc, #156]	; (11c00 <Uart::Send(unsigned char)+0xe4>)
   11b62:	f001 f855 	bl	12c10 <__cyg_profile_func_enter>
template <typename F>
[[gnu::always_inline]] inline Status Wait(uint64_t timeout, F is_done);
template <typename F>
inline Status Wait(uint64_t timeout, F is_done)
{
  uint64_t timeout_time = 0;
   11b66:	f04f 0300 	mov.w	r3, #0
   11b6a:	f04f 0400 	mov.w	r4, #0
   11b6e:	e9cd 3406 	strd	r3, r4, [sp, #24]
  if (timeout == kMaxWait)
   11b72:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   11b76:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
   11b7a:	bf08      	it	eq
   11b7c:	f1b3 3fff 	cmpeq.w	r3, #4294967295	; 0xffffffff
   11b80:	d106      	bne.n	11b90 <Uart::Send(unsigned char)+0x74>
  {
    timeout_time = kMaxWait;
   11b82:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   11b86:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   11b8a:	e9cd 3406 	strd	r3, r4, [sp, #24]
   11b8e:	e00b      	b.n	11ba8 <Uart::Send(unsigned char)+0x8c>
  }
  else
  {
    timeout_time = Milliseconds() + timeout;
   11b90:	f7fe fe8e 	bl	108b0 <Milliseconds()>
   11b94:	460a      	mov	r2, r1
   11b96:	4601      	mov	r1, r0
   11b98:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   11b9c:	eb13 0b01 	adds.w	fp, r3, r1
   11ba0:	eb44 0c02 	adc.w	ip, r4, r2
   11ba4:	e9cd bc06 	strd	fp, ip, [sp, #24]
  }

  Status status = Status::kTimedOut;
   11ba8:	2301      	movs	r3, #1
   11baa:	9305      	str	r3, [sp, #20]
  while (Milliseconds() < timeout_time)
   11bac:	f7fe fe80 	bl	108b0 <Milliseconds()>
   11bb0:	460a      	mov	r2, r1
   11bb2:	4601      	mov	r1, r0
   11bb4:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
   11bb8:	42a2      	cmp	r2, r4
   11bba:	bf08      	it	eq
   11bbc:	4299      	cmpeq	r1, r3
   11bbe:	bf34      	ite	cc
   11bc0:	2301      	movcc	r3, #1
   11bc2:	2300      	movcs	r3, #0
   11bc4:	b2db      	uxtb	r3, r3
   11bc6:	2b00      	cmp	r3, #0
   11bc8:	d008      	beq.n	11bdc <Uart::Send(unsigned char)+0xc0>
  {
    if (is_done())
   11bca:	ab03      	add	r3, sp, #12
   11bcc:	4618      	mov	r0, r3
   11bce:	f7ff ff7f 	bl	11ad0 <Uart::Send(unsigned char)::{lambda()#1}::operator()() const>
   11bd2:	4603      	mov	r3, r0
   11bd4:	2b00      	cmp	r3, #0
   11bd6:	d0e9      	beq.n	11bac <Uart::Send(unsigned char)+0x90>
    {
      status = Status::kSuccess;
   11bd8:	2300      	movs	r3, #0
   11bda:	9305      	str	r3, [sp, #20]
   11bdc:	462b      	mov	r3, r5
   11bde:	4619      	mov	r1, r3
   11be0:	4807      	ldr	r0, [pc, #28]	; (11c00 <Uart::Send(unsigned char)+0xe4>)
   11be2:	f001 f829 	bl	12c38 <__cyg_profile_func_exit>
   11be6:	462b      	mov	r3, r5
   11be8:	4619      	mov	r1, r3
   11bea:	4803      	ldr	r0, [pc, #12]	; (11bf8 <Uart::Send(unsigned char)+0xdc>)
   11bec:	f001 f824 	bl	12c38 <__cyg_profile_func_exit>
    Wait(kMaxWait, wait_for_transfer_to_finish);
  }
   11bf0:	bf00      	nop
   11bf2:	b00a      	add	sp, #40	; 0x28
   11bf4:	e8bd 8830 	ldmia.w	sp!, {r4, r5, fp, pc}
   11bf8:	00011b1d 	.word	0x00011b1d
   11bfc:	1000003c 	.word	0x1000003c
   11c00:	00012419 	.word	0x00012419

00011c04 <Uart::Receive(unsigned long)::{lambda()#1}::operator()() const>:

  uint8_t Receive([[maybe_unused]] uint32_t timeout = 0x7FFFFFFF) override
  {
    uint8_t receiver   = '\xFF';
    auto byte_recieved = [this]() -> bool {
   11c04:	b530      	push	{r4, r5, lr}
   11c06:	b083      	sub	sp, #12
   11c08:	4675      	mov	r5, lr
   11c0a:	9001      	str	r0, [sp, #4]
   11c0c:	462b      	mov	r3, r5
   11c0e:	4619      	mov	r1, r3
   11c10:	480d      	ldr	r0, [pc, #52]	; (11c48 <Uart::Receive(unsigned long)::{lambda()#1}::operator()() const+0x44>)
   11c12:	f000 fffd 	bl	12c10 <__cyg_profile_func_enter>
   11c16:	9b01      	ldr	r3, [sp, #4]
   11c18:	681b      	ldr	r3, [r3, #0]
      return (uart[channel_]->LSR & (1 << 0));
   11c1a:	7a1b      	ldrb	r3, [r3, #8]
   11c1c:	461a      	mov	r2, r3
   11c1e:	4b0b      	ldr	r3, [pc, #44]	; (11c4c <Uart::Receive(unsigned long)::{lambda()#1}::operator()() const+0x48>)
   11c20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   11c24:	7d1b      	ldrb	r3, [r3, #20]
   11c26:	b2db      	uxtb	r3, r3
   11c28:	f003 0301 	and.w	r3, r3, #1
   11c2c:	2b00      	cmp	r3, #0
   11c2e:	bf14      	ite	ne
   11c30:	2301      	movne	r3, #1
   11c32:	2300      	moveq	r3, #0
   11c34:	b2dc      	uxtb	r4, r3
   11c36:	462b      	mov	r3, r5
   11c38:	4619      	mov	r1, r3
   11c3a:	4803      	ldr	r0, [pc, #12]	; (11c48 <Uart::Receive(unsigned long)::{lambda()#1}::operator()() const+0x44>)
   11c3c:	f000 fffc 	bl	12c38 <__cyg_profile_func_exit>
   11c40:	4623      	mov	r3, r4
    };
   11c42:	4618      	mov	r0, r3
   11c44:	b003      	add	sp, #12
   11c46:	bd30      	pop	{r4, r5, pc}
   11c48:	00011c05 	.word	0x00011c05
   11c4c:	1000003c 	.word	0x1000003c

00011c50 <Uart::Receive(unsigned long)>:
  uint8_t Receive([[maybe_unused]] uint32_t timeout = 0x7FFFFFFF) override
   11c50:	e92d 4830 	stmdb	sp!, {r4, r5, fp, lr}
   11c54:	b08c      	sub	sp, #48	; 0x30
   11c56:	4675      	mov	r5, lr
   11c58:	9001      	str	r0, [sp, #4]
   11c5a:	9100      	str	r1, [sp, #0]
   11c5c:	462b      	mov	r3, r5
   11c5e:	4619      	mov	r1, r3
   11c60:	4836      	ldr	r0, [pc, #216]	; (11d3c <Uart::Receive(unsigned long)+0xec>)
   11c62:	f000 ffd5 	bl	12c10 <__cyg_profile_func_enter>
    uint8_t receiver   = '\xFF';
   11c66:	23ff      	movs	r3, #255	; 0xff
   11c68:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
    };
   11c6c:	9b01      	ldr	r3, [sp, #4]
   11c6e:	9304      	str	r3, [sp, #16]

    Status status = Wait(timeout, byte_recieved);
   11c70:	9b00      	ldr	r3, [sp, #0]
   11c72:	f04f 0400 	mov.w	r4, #0
   11c76:	e9cd 3408 	strd	r3, r4, [sp, #32]
   11c7a:	9b04      	ldr	r3, [sp, #16]
   11c7c:	9303      	str	r3, [sp, #12]
   11c7e:	462b      	mov	r3, r5
   11c80:	4619      	mov	r1, r3
   11c82:	482f      	ldr	r0, [pc, #188]	; (11d40 <Uart::Receive(unsigned long)+0xf0>)
   11c84:	f000 ffc4 	bl	12c10 <__cyg_profile_func_enter>
  uint64_t timeout_time = 0;
   11c88:	f04f 0300 	mov.w	r3, #0
   11c8c:	f04f 0400 	mov.w	r4, #0
   11c90:	e9cd 3406 	strd	r3, r4, [sp, #24]
  if (timeout == kMaxWait)
   11c94:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   11c98:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
   11c9c:	bf08      	it	eq
   11c9e:	f1b3 3fff 	cmpeq.w	r3, #4294967295	; 0xffffffff
   11ca2:	d106      	bne.n	11cb2 <Uart::Receive(unsigned long)+0x62>
    timeout_time = kMaxWait;
   11ca4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   11ca8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   11cac:	e9cd 3406 	strd	r3, r4, [sp, #24]
   11cb0:	e00b      	b.n	11cca <Uart::Receive(unsigned long)+0x7a>
    timeout_time = Milliseconds() + timeout;
   11cb2:	f7fe fdfd 	bl	108b0 <Milliseconds()>
   11cb6:	460a      	mov	r2, r1
   11cb8:	4601      	mov	r1, r0
   11cba:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   11cbe:	eb13 0b01 	adds.w	fp, r3, r1
   11cc2:	eb44 0c02 	adc.w	ip, r4, r2
   11cc6:	e9cd bc06 	strd	fp, ip, [sp, #24]
  Status status = Status::kTimedOut;
   11cca:	2301      	movs	r3, #1
   11ccc:	9305      	str	r3, [sp, #20]
  while (Milliseconds() < timeout_time)
   11cce:	f7fe fdef 	bl	108b0 <Milliseconds()>
   11cd2:	460a      	mov	r2, r1
   11cd4:	4601      	mov	r1, r0
   11cd6:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
   11cda:	42a2      	cmp	r2, r4
   11cdc:	bf08      	it	eq
   11cde:	4299      	cmpeq	r1, r3
   11ce0:	bf34      	ite	cc
   11ce2:	2301      	movcc	r3, #1
   11ce4:	2300      	movcs	r3, #0
   11ce6:	b2db      	uxtb	r3, r3
   11ce8:	2b00      	cmp	r3, #0
   11cea:	d008      	beq.n	11cfe <Uart::Receive(unsigned long)+0xae>
    if (is_done())
   11cec:	ab03      	add	r3, sp, #12
   11cee:	4618      	mov	r0, r3
   11cf0:	f7ff ff88 	bl	11c04 <Uart::Receive(unsigned long)::{lambda()#1}::operator()() const>
   11cf4:	4603      	mov	r3, r0
   11cf6:	2b00      	cmp	r3, #0
   11cf8:	d0e9      	beq.n	11cce <Uart::Receive(unsigned long)+0x7e>
      status = Status::kSuccess;
   11cfa:	2300      	movs	r3, #0
   11cfc:	9305      	str	r3, [sp, #20]
      break;
    }
  }
  return status;
   11cfe:	9c05      	ldr	r4, [sp, #20]
   11d00:	462b      	mov	r3, r5
   11d02:	4619      	mov	r1, r3
   11d04:	480e      	ldr	r0, [pc, #56]	; (11d40 <Uart::Receive(unsigned long)+0xf0>)
   11d06:	f000 ff97 	bl	12c38 <__cyg_profile_func_exit>
   11d0a:	940a      	str	r4, [sp, #40]	; 0x28

    if (status == Status::kSuccess)
   11d0c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   11d0e:	2b00      	cmp	r3, #0
   11d10:	d108      	bne.n	11d24 <Uart::Receive(unsigned long)+0xd4>
    {
      receiver = static_cast<uint8_t>(uart[channel_]->RBR);
   11d12:	9b01      	ldr	r3, [sp, #4]
   11d14:	7a1b      	ldrb	r3, [r3, #8]
   11d16:	461a      	mov	r2, r3
   11d18:	4b0a      	ldr	r3, [pc, #40]	; (11d44 <Uart::Receive(unsigned long)+0xf4>)
   11d1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   11d1e:	781b      	ldrb	r3, [r3, #0]
   11d20:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
    }
    return receiver;
   11d24:	f89d 402f 	ldrb.w	r4, [sp, #47]	; 0x2f
   11d28:	462b      	mov	r3, r5
   11d2a:	4619      	mov	r1, r3
   11d2c:	4803      	ldr	r0, [pc, #12]	; (11d3c <Uart::Receive(unsigned long)+0xec>)
   11d2e:	f000 ff83 	bl	12c38 <__cyg_profile_func_exit>
   11d32:	4623      	mov	r3, r4
  }
   11d34:	4618      	mov	r0, r3
   11d36:	b00c      	add	sp, #48	; 0x30
   11d38:	e8bd 8830 	ldmia.w	sp!, {r4, r5, fp, pc}
   11d3c:	00011c51 	.word	0x00011c51
   11d40:	000124c1 	.word	0x000124c1
   11d44:	1000003c 	.word	0x1000003c

00011d48 <Uart::FindClosestFractional(float)>:

 private:
  UartCalibration_t FindClosestFractional(float decimal)
   11d48:	b510      	push	{r4, lr}
   11d4a:	b08a      	sub	sp, #40	; 0x28
   11d4c:	4674      	mov	r4, lr
   11d4e:	9003      	str	r0, [sp, #12]
   11d50:	9102      	str	r1, [sp, #8]
   11d52:	ed8d 0a01 	vstr	s0, [sp, #4]
   11d56:	4623      	mov	r3, r4
   11d58:	4619      	mov	r1, r3
   11d5a:	4838      	ldr	r0, [pc, #224]	; (11e3c <Uart::FindClosestFractional(float)+0xf4>)
   11d5c:	f000 ff58 	bl	12c10 <__cyg_profile_func_enter>
  {
    UartCalibration_t result;
   11d60:	9b03      	ldr	r3, [sp, #12]
   11d62:	2200      	movs	r2, #0
   11d64:	601a      	str	r2, [r3, #0]
   11d66:	9b03      	ldr	r3, [sp, #12]
   11d68:	2200      	movs	r2, #0
   11d6a:	605a      	str	r2, [r3, #4]
   11d6c:	9b03      	ldr	r3, [sp, #12]
   11d6e:	2201      	movs	r2, #1
   11d70:	609a      	str	r2, [r3, #8]
    bool finished = false;
   11d72:	2300      	movs	r3, #0
   11d74:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    for (int div = 0; div < 15 && !finished; div++)
   11d78:	2300      	movs	r3, #0
   11d7a:	9308      	str	r3, [sp, #32]
   11d7c:	9b08      	ldr	r3, [sp, #32]
   11d7e:	2b0e      	cmp	r3, #14
   11d80:	dc52      	bgt.n	11e28 <Uart::FindClosestFractional(float)+0xe0>
   11d82:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   11d86:	2b00      	cmp	r3, #0
   11d88:	d14e      	bne.n	11e28 <Uart::FindClosestFractional(float)+0xe0>
    {
      for (int mul = div + 1; mul < 15 && !finished; mul++)
   11d8a:	9b08      	ldr	r3, [sp, #32]
   11d8c:	3301      	adds	r3, #1
   11d8e:	9307      	str	r3, [sp, #28]
   11d90:	9b07      	ldr	r3, [sp, #28]
   11d92:	2b0e      	cmp	r3, #14
   11d94:	dc44      	bgt.n	11e20 <Uart::FindClosestFractional(float)+0xd8>
   11d96:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   11d9a:	2b00      	cmp	r3, #0
   11d9c:	d140      	bne.n	11e20 <Uart::FindClosestFractional(float)+0xd8>
      {
        float divf         = static_cast<float>(div);
   11d9e:	9b08      	ldr	r3, [sp, #32]
   11da0:	ee07 3a90 	vmov	s15, r3
   11da4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   11da8:	edcd 7a06 	vstr	s15, [sp, #24]
        float mulf         = static_cast<float>(mul);
   11dac:	9b07      	ldr	r3, [sp, #28]
   11dae:	ee07 3a90 	vmov	s15, r3
   11db2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   11db6:	edcd 7a05 	vstr	s15, [sp, #20]
        float test_decimal = 1.0f + divf / mulf;
   11dba:	eddd 6a06 	vldr	s13, [sp, #24]
   11dbe:	ed9d 7a05 	vldr	s14, [sp, #20]
   11dc2:	eec6 7a87 	vdiv.f32	s15, s13, s14
   11dc6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
   11dca:	ee77 7a87 	vadd.f32	s15, s15, s14
   11dce:	edcd 7a04 	vstr	s15, [sp, #16]
        if (decimal <= test_decimal + kThreshold &&
   11dd2:	eddd 7a04 	vldr	s15, [sp, #16]
   11dd6:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 11e40 <Uart::FindClosestFractional(float)+0xf8>
   11dda:	ee77 7a87 	vadd.f32	s15, s15, s14
   11dde:	ed9d 7a01 	vldr	s14, [sp, #4]
   11de2:	eeb4 7ae7 	vcmpe.f32	s14, s15
   11de6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   11dea:	d815      	bhi.n	11e18 <Uart::FindClosestFractional(float)+0xd0>
            decimal >= test_decimal - kThreshold)
   11dec:	eddd 7a04 	vldr	s15, [sp, #16]
   11df0:	ed9f 7a13 	vldr	s14, [pc, #76]	; 11e40 <Uart::FindClosestFractional(float)+0xf8>
   11df4:	ee77 7ac7 	vsub.f32	s15, s15, s14
        if (decimal <= test_decimal + kThreshold &&
   11df8:	ed9d 7a01 	vldr	s14, [sp, #4]
   11dfc:	eeb4 7ae7 	vcmpe.f32	s14, s15
   11e00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   11e04:	db08      	blt.n	11e18 <Uart::FindClosestFractional(float)+0xd0>
        {
          result.divide_add = div;
   11e06:	9a08      	ldr	r2, [sp, #32]
   11e08:	9b03      	ldr	r3, [sp, #12]
   11e0a:	605a      	str	r2, [r3, #4]
          result.multiply   = mul;
   11e0c:	9a07      	ldr	r2, [sp, #28]
   11e0e:	9b03      	ldr	r3, [sp, #12]
   11e10:	609a      	str	r2, [r3, #8]
          finished          = true;
   11e12:	2301      	movs	r3, #1
   11e14:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
      for (int mul = div + 1; mul < 15 && !finished; mul++)
   11e18:	9b07      	ldr	r3, [sp, #28]
   11e1a:	3301      	adds	r3, #1
   11e1c:	9307      	str	r3, [sp, #28]
   11e1e:	e7b7      	b.n	11d90 <Uart::FindClosestFractional(float)+0x48>
    for (int div = 0; div < 15 && !finished; div++)
   11e20:	9b08      	ldr	r3, [sp, #32]
   11e22:	3301      	adds	r3, #1
   11e24:	9308      	str	r3, [sp, #32]
   11e26:	e7a9      	b.n	11d7c <Uart::FindClosestFractional(float)+0x34>
        }
      }
    }
    return result;
   11e28:	bf00      	nop
   11e2a:	4623      	mov	r3, r4
   11e2c:	4619      	mov	r1, r3
   11e2e:	4803      	ldr	r0, [pc, #12]	; (11e3c <Uart::FindClosestFractional(float)+0xf4>)
   11e30:	f000 ff02 	bl	12c38 <__cyg_profile_func_exit>
   11e34:	bf00      	nop
  }
   11e36:	9803      	ldr	r0, [sp, #12]
   11e38:	b00a      	add	sp, #40	; 0x28
   11e3a:	bd10      	pop	{r4, pc}
   11e3c:	00011d49 	.word	0x00011d49
   11e40:	3d4ccccd 	.word	0x3d4ccccd

00011e44 <Uart::DividerEstimate(float, float)>:

  float DividerEstimate(float baud_rate, float fraction_estimate = 1)
   11e44:	b510      	push	{r4, lr}
   11e46:	ed2d 8b02 	vpush	{d8}
   11e4a:	b086      	sub	sp, #24
   11e4c:	4674      	mov	r4, lr
   11e4e:	9003      	str	r0, [sp, #12]
   11e50:	ed8d 0a02 	vstr	s0, [sp, #8]
   11e54:	edcd 0a01 	vstr	s1, [sp, #4]
   11e58:	4623      	mov	r3, r4
   11e5a:	4619      	mov	r1, r3
   11e5c:	4815      	ldr	r0, [pc, #84]	; (11eb4 <Uart::DividerEstimate(float, float)+0x70>)
   11e5e:	f000 fed7 	bl	12c10 <__cyg_profile_func_enter>
  {
    float clock_frequency = static_cast<float>(GetPeripheralFrequency());
   11e62:	9b03      	ldr	r3, [sp, #12]
   11e64:	1d1a      	adds	r2, r3, #4
   11e66:	9b03      	ldr	r3, [sp, #12]
   11e68:	685b      	ldr	r3, [r3, #4]
   11e6a:	3310      	adds	r3, #16
   11e6c:	681b      	ldr	r3, [r3, #0]
   11e6e:	4610      	mov	r0, r2
   11e70:	4798      	blx	r3
   11e72:	ee07 0a90 	vmov	s15, r0
   11e76:	eef8 7a67 	vcvt.f32.u32	s15, s15
   11e7a:	edcd 7a05 	vstr	s15, [sp, #20]
    return clock_frequency / (16.0f * baud_rate * fraction_estimate);
   11e7e:	eddd 7a02 	vldr	s15, [sp, #8]
   11e82:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
   11e86:	ee27 7a87 	vmul.f32	s14, s15, s14
   11e8a:	eddd 7a01 	vldr	s15, [sp, #4]
   11e8e:	ee67 7a27 	vmul.f32	s15, s14, s15
   11e92:	ed9d 7a05 	vldr	s14, [sp, #20]
   11e96:	ee87 8a27 	vdiv.f32	s16, s14, s15
   11e9a:	4623      	mov	r3, r4
   11e9c:	4619      	mov	r1, r3
   11e9e:	4805      	ldr	r0, [pc, #20]	; (11eb4 <Uart::DividerEstimate(float, float)+0x70>)
   11ea0:	f000 feca 	bl	12c38 <__cyg_profile_func_exit>
   11ea4:	eef0 7a48 	vmov.f32	s15, s16
  }
   11ea8:	eeb0 0a67 	vmov.f32	s0, s15
   11eac:	b006      	add	sp, #24
   11eae:	ecbd 8b02 	vpop	{d8}
   11eb2:	bd10      	pop	{r4, pc}
   11eb4:	00011e45 	.word	0x00011e45

00011eb8 <Uart::FractionalEstimate(float, float)>:

  float FractionalEstimate(float baud_rate, float divider)
   11eb8:	b510      	push	{r4, lr}
   11eba:	ed2d 8b02 	vpush	{d8}
   11ebe:	b086      	sub	sp, #24
   11ec0:	4674      	mov	r4, lr
   11ec2:	9003      	str	r0, [sp, #12]
   11ec4:	ed8d 0a02 	vstr	s0, [sp, #8]
   11ec8:	edcd 0a01 	vstr	s1, [sp, #4]
   11ecc:	4623      	mov	r3, r4
   11ece:	4619      	mov	r1, r3
   11ed0:	4815      	ldr	r0, [pc, #84]	; (11f28 <Uart::FractionalEstimate(float, float)+0x70>)
   11ed2:	f000 fe9d 	bl	12c10 <__cyg_profile_func_enter>
  {
    float clock_frequency = static_cast<float>(GetPeripheralFrequency());
   11ed6:	9b03      	ldr	r3, [sp, #12]
   11ed8:	1d1a      	adds	r2, r3, #4
   11eda:	9b03      	ldr	r3, [sp, #12]
   11edc:	685b      	ldr	r3, [r3, #4]
   11ede:	3310      	adds	r3, #16
   11ee0:	681b      	ldr	r3, [r3, #0]
   11ee2:	4610      	mov	r0, r2
   11ee4:	4798      	blx	r3
   11ee6:	ee07 0a90 	vmov	s15, r0
   11eea:	eef8 7a67 	vcvt.f32.u32	s15, s15
   11eee:	edcd 7a05 	vstr	s15, [sp, #20]
    return clock_frequency / (16.0f * baud_rate * divider);
   11ef2:	eddd 7a02 	vldr	s15, [sp, #8]
   11ef6:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
   11efa:	ee27 7a87 	vmul.f32	s14, s15, s14
   11efe:	eddd 7a01 	vldr	s15, [sp, #4]
   11f02:	ee67 7a27 	vmul.f32	s15, s14, s15
   11f06:	ed9d 7a05 	vldr	s14, [sp, #20]
   11f0a:	ee87 8a27 	vdiv.f32	s16, s14, s15
   11f0e:	4623      	mov	r3, r4
   11f10:	4619      	mov	r1, r3
   11f12:	4805      	ldr	r0, [pc, #20]	; (11f28 <Uart::FractionalEstimate(float, float)+0x70>)
   11f14:	f000 fe90 	bl	12c38 <__cyg_profile_func_exit>
   11f18:	eef0 7a48 	vmov.f32	s15, s16
  }
   11f1c:	eeb0 0a67 	vmov.f32	s0, s15
   11f20:	b006      	add	sp, #24
   11f22:	ecbd 8b02 	vpop	{d8}
   11f26:	bd10      	pop	{r4, pc}
   11f28:	00011eb9 	.word	0x00011eb9

00011f2c <Uart::IsDecmial(float)>:

  bool IsDecmial(float value)
   11f2c:	b530      	push	{r4, r5, lr}
   11f2e:	b087      	sub	sp, #28
   11f30:	4675      	mov	r5, lr
   11f32:	9001      	str	r0, [sp, #4]
   11f34:	ed8d 0a00 	vstr	s0, [sp]
   11f38:	462b      	mov	r3, r5
   11f3a:	4619      	mov	r1, r3
   11f3c:	4819      	ldr	r0, [pc, #100]	; (11fa4 <Uart::IsDecmial(float)+0x78>)
   11f3e:	f000 fe67 	bl	12c10 <__cyg_profile_func_enter>
  {
    bool result         = false;
   11f42:	2300      	movs	r3, #0
   11f44:	f88d 3017 	strb.w	r3, [sp, #23]
    float rounded_value = roundf(value);
   11f48:	ed9d 0a00 	vldr	s0, [sp]
   11f4c:	f004 ff36 	bl	16dbc <roundf>
   11f50:	ed8d 0a04 	vstr	s0, [sp, #16]
    float error         = value - rounded_value;
   11f54:	ed9d 7a00 	vldr	s14, [sp]
   11f58:	eddd 7a04 	vldr	s15, [sp, #16]
   11f5c:	ee77 7a67 	vsub.f32	s15, s14, s15
   11f60:	edcd 7a03 	vstr	s15, [sp, #12]
    if (-kThreshold <= error && error <= kThreshold)
   11f64:	eddd 7a03 	vldr	s15, [sp, #12]
   11f68:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 11fa8 <Uart::IsDecmial(float)+0x7c>
   11f6c:	eef4 7ac7 	vcmpe.f32	s15, s14
   11f70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   11f74:	db0b      	blt.n	11f8e <Uart::IsDecmial(float)+0x62>
   11f76:	eddd 7a03 	vldr	s15, [sp, #12]
   11f7a:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 11fac <Uart::IsDecmial(float)+0x80>
   11f7e:	eef4 7ac7 	vcmpe.f32	s15, s14
   11f82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   11f86:	d802      	bhi.n	11f8e <Uart::IsDecmial(float)+0x62>
    {
      result = true;
   11f88:	2301      	movs	r3, #1
   11f8a:	f88d 3017 	strb.w	r3, [sp, #23]
    }
    return result;
   11f8e:	f89d 4017 	ldrb.w	r4, [sp, #23]
   11f92:	462b      	mov	r3, r5
   11f94:	4619      	mov	r1, r3
   11f96:	4803      	ldr	r0, [pc, #12]	; (11fa4 <Uart::IsDecmial(float)+0x78>)
   11f98:	f000 fe4e 	bl	12c38 <__cyg_profile_func_exit>
   11f9c:	4623      	mov	r3, r4
  }
   11f9e:	4618      	mov	r0, r3
   11fa0:	b007      	add	sp, #28
   11fa2:	bd30      	pop	{r4, r5, pc}
   11fa4:	00011f2d 	.word	0x00011f2d
   11fa8:	bd4ccccd 	.word	0xbd4ccccd
   11fac:	3d4ccccd 	.word	0x3d4ccccd

00011fb0 <Uart::GenerateUartCalibration(float)>:

  UartCalibration_t GenerateUartCalibration(float baud_rate)
   11fb0:	b530      	push	{r4, r5, lr}
   11fb2:	b08f      	sub	sp, #60	; 0x3c
   11fb4:	4675      	mov	r5, lr
   11fb6:	9007      	str	r0, [sp, #28]
   11fb8:	9106      	str	r1, [sp, #24]
   11fba:	ed8d 0a05 	vstr	s0, [sp, #20]
   11fbe:	462b      	mov	r3, r5
   11fc0:	4619      	mov	r1, r3
   11fc2:	4874      	ldr	r0, [pc, #464]	; (12194 <Uart::GenerateUartCalibration(float)+0x1e4>)
   11fc4:	f000 fe24 	bl	12c10 <__cyg_profile_func_enter>
  {
    States state = States::kCalculateIntegerDivideLatch;
   11fc8:	2300      	movs	r3, #0
   11fca:	930d      	str	r3, [sp, #52]	; 0x34
    UartCalibration_t uart_calibration;
   11fcc:	9b07      	ldr	r3, [sp, #28]
   11fce:	2200      	movs	r2, #0
   11fd0:	601a      	str	r2, [r3, #0]
   11fd2:	9b07      	ldr	r3, [sp, #28]
   11fd4:	2200      	movs	r2, #0
   11fd6:	605a      	str	r2, [r3, #4]
   11fd8:	9b07      	ldr	r3, [sp, #28]
   11fda:	2201      	movs	r2, #1
   11fdc:	609a      	str	r2, [r3, #8]
    float divide_estimate = 0;
   11fde:	f04f 0300 	mov.w	r3, #0
   11fe2:	930c      	str	r3, [sp, #48]	; 0x30
    float decimal         = 1.5;
   11fe4:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
   11fe8:	930b      	str	r3, [sp, #44]	; 0x2c
    float div             = 1;
   11fea:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
   11fee:	930a      	str	r3, [sp, #40]	; 0x28
    float mul             = 2;
   11ff0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   11ff4:	9309      	str	r3, [sp, #36]	; 0x24
    while (state != States::kDone)
   11ff6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   11ff8:	2b04      	cmp	r3, #4
   11ffa:	f000 80c1 	beq.w	12180 <Uart::GenerateUartCalibration(float)+0x1d0>
    {
      switch (state)
   11ffe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   12000:	2b04      	cmp	r3, #4
   12002:	f200 80bb 	bhi.w	1217c <Uart::GenerateUartCalibration(float)+0x1cc>
   12006:	a201      	add	r2, pc, #4	; (adr r2, 1200c <Uart::GenerateUartCalibration(float)+0x5c>)
   12008:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1200c:	00012021 	.word	0x00012021
   12010:	0001207d 	.word	0x0001207d
   12014:	000120dd 	.word	0x000120dd
   12018:	0001214d 	.word	0x0001214d
   1201c:	0001217d 	.word	0x0001217d
      {
        case States::kCalculateIntegerDivideLatch:
        {
          divide_estimate = DividerEstimate(baud_rate);
   12020:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
   12024:	ed9d 0a05 	vldr	s0, [sp, #20]
   12028:	9806      	ldr	r0, [sp, #24]
   1202a:	f7ff ff0b 	bl	11e44 <Uart::DividerEstimate(float, float)>
   1202e:	ed8d 0a0c 	vstr	s0, [sp, #48]	; 0x30
          if (divide_estimate < 1.0f)
   12032:	eddd 7a0c 	vldr	s15, [sp, #48]	; 0x30
   12036:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
   1203a:	eef4 7ac7 	vcmpe.f32	s15, s14
   1203e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   12042:	d505      	bpl.n	12050 <Uart::GenerateUartCalibration(float)+0xa0>
          {
            uart_calibration.divide_latch = 0;
   12044:	9b07      	ldr	r3, [sp, #28]
   12046:	2200      	movs	r2, #0
   12048:	601a      	str	r2, [r3, #0]
            state                         = States::kDone;
   1204a:	2304      	movs	r3, #4
   1204c:	930d      	str	r3, [sp, #52]	; 0x34
          }
          else
          {
            state = States::kCalculateDivideLatchWithDecimal;
          }
          break;
   1204e:	e096      	b.n	1217e <Uart::GenerateUartCalibration(float)+0x1ce>
          else if (IsDecmial(divide_estimate))
   12050:	ed9d 0a0c 	vldr	s0, [sp, #48]	; 0x30
   12054:	9806      	ldr	r0, [sp, #24]
   12056:	f7ff ff69 	bl	11f2c <Uart::IsDecmial(float)>
   1205a:	4603      	mov	r3, r0
   1205c:	2b00      	cmp	r3, #0
   1205e:	d00a      	beq.n	12076 <Uart::GenerateUartCalibration(float)+0xc6>
                static_cast<uint32_t>(divide_estimate);
   12060:	eddd 7a0c 	vldr	s15, [sp, #48]	; 0x30
   12064:	eefc 7ae7 	vcvt.u32.f32	s15, s15
   12068:	ee17 2a90 	vmov	r2, s15
            uart_calibration.divide_latch =
   1206c:	9b07      	ldr	r3, [sp, #28]
   1206e:	601a      	str	r2, [r3, #0]
            state = States::kDone;
   12070:	2304      	movs	r3, #4
   12072:	930d      	str	r3, [sp, #52]	; 0x34
          break;
   12074:	e083      	b.n	1217e <Uart::GenerateUartCalibration(float)+0x1ce>
            state = States::kCalculateDivideLatchWithDecimal;
   12076:	2301      	movs	r3, #1
   12078:	930d      	str	r3, [sp, #52]	; 0x34
          break;
   1207a:	e080      	b.n	1217e <Uart::GenerateUartCalibration(float)+0x1ce>
        }
        case States::kCalculateDivideLatchWithDecimal:
        {
          divide_estimate = roundf(DividerEstimate(baud_rate, decimal));
   1207c:	eddd 0a0b 	vldr	s1, [sp, #44]	; 0x2c
   12080:	ed9d 0a05 	vldr	s0, [sp, #20]
   12084:	9806      	ldr	r0, [sp, #24]
   12086:	f7ff fedd 	bl	11e44 <Uart::DividerEstimate(float, float)>
   1208a:	eef0 7a40 	vmov.f32	s15, s0
   1208e:	eeb0 0a67 	vmov.f32	s0, s15
   12092:	f004 fe93 	bl	16dbc <roundf>
   12096:	ed8d 0a0c 	vstr	s0, [sp, #48]	; 0x30
          decimal         = FractionalEstimate(baud_rate, divide_estimate);
   1209a:	eddd 0a0c 	vldr	s1, [sp, #48]	; 0x30
   1209e:	ed9d 0a05 	vldr	s0, [sp, #20]
   120a2:	9806      	ldr	r0, [sp, #24]
   120a4:	f7ff ff08 	bl	11eb8 <Uart::FractionalEstimate(float, float)>
   120a8:	ed8d 0a0b 	vstr	s0, [sp, #44]	; 0x2c
          if (1.1f <= decimal && decimal <= 1.9f)
   120ac:	eddd 7a0b 	vldr	s15, [sp, #44]	; 0x2c
   120b0:	ed9f 7a39 	vldr	s14, [pc, #228]	; 12198 <Uart::GenerateUartCalibration(float)+0x1e8>
   120b4:	eef4 7ac7 	vcmpe.f32	s15, s14
   120b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   120bc:	db0b      	blt.n	120d6 <Uart::GenerateUartCalibration(float)+0x126>
   120be:	eddd 7a0b 	vldr	s15, [sp, #44]	; 0x2c
   120c2:	ed9f 7a36 	vldr	s14, [pc, #216]	; 1219c <Uart::GenerateUartCalibration(float)+0x1ec>
   120c6:	eef4 7ac7 	vcmpe.f32	s15, s14
   120ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   120ce:	d802      	bhi.n	120d6 <Uart::GenerateUartCalibration(float)+0x126>
          {
            state = States::kGenerateFractionFromDecimal;
   120d0:	2303      	movs	r3, #3
   120d2:	930d      	str	r3, [sp, #52]	; 0x34
          }
          else
          {
            state = States::kDecimalFailedGenerateNewDecimal;
          }
          break;
   120d4:	e053      	b.n	1217e <Uart::GenerateUartCalibration(float)+0x1ce>
            state = States::kDecimalFailedGenerateNewDecimal;
   120d6:	2302      	movs	r3, #2
   120d8:	930d      	str	r3, [sp, #52]	; 0x34
          break;
   120da:	e050      	b.n	1217e <Uart::GenerateUartCalibration(float)+0x1ce>
        }
        case States::kDecimalFailedGenerateNewDecimal:
        {
          mul += 1;
   120dc:	eddd 7a09 	vldr	s15, [sp, #36]	; 0x24
   120e0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
   120e4:	ee77 7a87 	vadd.f32	s15, s15, s14
   120e8:	edcd 7a09 	vstr	s15, [sp, #36]	; 0x24

          if (div > 15)
   120ec:	eddd 7a0a 	vldr	s15, [sp, #40]	; 0x28
   120f0:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
   120f4:	eef4 7ac7 	vcmpe.f32	s15, s14
   120f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   120fc:	dd02      	ble.n	12104 <Uart::GenerateUartCalibration(float)+0x154>
          {
            state = States::kDone;
   120fe:	2304      	movs	r3, #4
   12100:	930d      	str	r3, [sp, #52]	; 0x34
            break;
   12102:	e03c      	b.n	1217e <Uart::GenerateUartCalibration(float)+0x1ce>
          }
          else if (mul > 15)
   12104:	eddd 7a09 	vldr	s15, [sp, #36]	; 0x24
   12108:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
   1210c:	eef4 7ac7 	vcmpe.f32	s15, s14
   12110:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   12114:	dd0f      	ble.n	12136 <Uart::GenerateUartCalibration(float)+0x186>
          {
            div += 1;
   12116:	eddd 7a0a 	vldr	s15, [sp, #40]	; 0x28
   1211a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
   1211e:	ee77 7a87 	vadd.f32	s15, s15, s14
   12122:	edcd 7a0a 	vstr	s15, [sp, #40]	; 0x28
            mul = div + 1;
   12126:	eddd 7a0a 	vldr	s15, [sp, #40]	; 0x28
   1212a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
   1212e:	ee77 7a87 	vadd.f32	s15, s15, s14
   12132:	edcd 7a09 	vstr	s15, [sp, #36]	; 0x24
          }
          decimal = div / mul;
   12136:	eddd 6a0a 	vldr	s13, [sp, #40]	; 0x28
   1213a:	ed9d 7a09 	vldr	s14, [sp, #36]	; 0x24
   1213e:	eec6 7a87 	vdiv.f32	s15, s13, s14
   12142:	edcd 7a0b 	vstr	s15, [sp, #44]	; 0x2c
          state   = States::kCalculateDivideLatchWithDecimal;
   12146:	2301      	movs	r3, #1
   12148:	930d      	str	r3, [sp, #52]	; 0x34
          break;
   1214a:	e018      	b.n	1217e <Uart::GenerateUartCalibration(float)+0x1ce>
        }
        case States::kGenerateFractionFromDecimal:
        {
          uart_calibration = FindClosestFractional(decimal);
   1214c:	9c07      	ldr	r4, [sp, #28]
   1214e:	466b      	mov	r3, sp
   12150:	ed9d 0a0b 	vldr	s0, [sp, #44]	; 0x2c
   12154:	9906      	ldr	r1, [sp, #24]
   12156:	4618      	mov	r0, r3
   12158:	f7ff fdf6 	bl	11d48 <Uart::FindClosestFractional(float)>
   1215c:	466b      	mov	r3, sp
   1215e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   12162:	e884 0007 	stmia.w	r4, {r0, r1, r2}
          uart_calibration.divide_latch =
              static_cast<uint32_t>(divide_estimate);
   12166:	eddd 7a0c 	vldr	s15, [sp, #48]	; 0x30
   1216a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
   1216e:	ee17 2a90 	vmov	r2, s15
          uart_calibration.divide_latch =
   12172:	9b07      	ldr	r3, [sp, #28]
   12174:	601a      	str	r2, [r3, #0]
          state = States::kDone;
   12176:	2304      	movs	r3, #4
   12178:	930d      	str	r3, [sp, #52]	; 0x34
          break;
   1217a:	e000      	b.n	1217e <Uart::GenerateUartCalibration(float)+0x1ce>
        }
        case States::kDone: { break;
        }
        default: { break;
   1217c:	bf00      	nop
    while (state != States::kDone)
   1217e:	e73a      	b.n	11ff6 <Uart::GenerateUartCalibration(float)+0x46>
        }
      }
    }
    return uart_calibration;
   12180:	bf00      	nop
   12182:	462b      	mov	r3, r5
   12184:	4619      	mov	r1, r3
   12186:	4803      	ldr	r0, [pc, #12]	; (12194 <Uart::GenerateUartCalibration(float)+0x1e4>)
   12188:	f000 fd56 	bl	12c38 <__cyg_profile_func_exit>
   1218c:	bf00      	nop
  }
   1218e:	9807      	ldr	r0, [sp, #28]
   12190:	b00f      	add	sp, #60	; 0x3c
   12192:	bd30      	pop	{r4, r5, pc}
   12194:	00011fb1 	.word	0x00011fb1
   12198:	3f8ccccd 	.word	0x3f8ccccd
   1219c:	3ff33333 	.word	0x3ff33333

000121a0 <(anonymous namespace)::Lpc40xxUptime()>:
{
   121a0:	b538      	push	{r3, r4, r5, lr}
   121a2:	4675      	mov	r5, lr
   121a4:	462b      	mov	r3, r5
   121a6:	4619      	mov	r1, r3
   121a8:	480a      	ldr	r0, [pc, #40]	; (121d4 <(anonymous namespace)::Lpc40xxUptime()+0x34>)
   121aa:	f000 fd31 	bl	12c10 <__cyg_profile_func_enter>
    return tim_register[channel_]->TC;
   121ae:	4b0a      	ldr	r3, [pc, #40]	; (121d8 <(anonymous namespace)::Lpc40xxUptime()+0x38>)
   121b0:	7a1b      	ldrb	r3, [r3, #8]
   121b2:	461a      	mov	r2, r3
   121b4:	4b09      	ldr	r3, [pc, #36]	; (121dc <(anonymous namespace)::Lpc40xxUptime()+0x3c>)
   121b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   121ba:	689c      	ldr	r4, [r3, #8]
   121bc:	462b      	mov	r3, r5
   121be:	4619      	mov	r1, r3
   121c0:	4804      	ldr	r0, [pc, #16]	; (121d4 <(anonymous namespace)::Lpc40xxUptime()+0x34>)
   121c2:	f000 fd39 	bl	12c38 <__cyg_profile_func_exit>
  return timer0.GetTimer();
   121c6:	4623      	mov	r3, r4
   121c8:	f04f 0400 	mov.w	r4, #0
}
   121cc:	4618      	mov	r0, r3
   121ce:	4621      	mov	r1, r4
   121d0:	bd38      	pop	{r3, r4, r5, pc}
   121d2:	bf00      	nop
   121d4:	000118e5 	.word	0x000118e5
   121d8:	100000ac 	.word	0x100000ac
   121dc:	1000002c 	.word	0x1000002c

000121e0 <UptimeRTOS>:
{
   121e0:	b538      	push	{r3, r4, r5, lr}
   121e2:	4675      	mov	r5, lr
   121e4:	462b      	mov	r3, r5
   121e6:	4619      	mov	r1, r3
   121e8:	480a      	ldr	r0, [pc, #40]	; (12214 <UptimeRTOS+0x34>)
   121ea:	f000 fd11 	bl	12c10 <__cyg_profile_func_enter>
   121ee:	4b0a      	ldr	r3, [pc, #40]	; (12218 <UptimeRTOS+0x38>)
   121f0:	7a1b      	ldrb	r3, [r3, #8]
   121f2:	461a      	mov	r2, r3
   121f4:	4b09      	ldr	r3, [pc, #36]	; (1221c <UptimeRTOS+0x3c>)
   121f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   121fa:	689c      	ldr	r4, [r3, #8]
   121fc:	462b      	mov	r3, r5
   121fe:	4619      	mov	r1, r3
   12200:	4804      	ldr	r0, [pc, #16]	; (12214 <UptimeRTOS+0x34>)
   12202:	f000 fd19 	bl	12c38 <__cyg_profile_func_exit>
  return timer0.GetTimer();
   12206:	4623      	mov	r3, r4
   12208:	f04f 0400 	mov.w	r4, #0
}
   1220c:	4618      	mov	r0, r3
   1220e:	4621      	mov	r1, r4
   12210:	bd38      	pop	{r3, r4, r5, pc}
   12212:	bf00      	nop
   12214:	000118e5 	.word	0x000118e5
   12218:	100000ac 	.word	0x100000ac
   1221c:	1000002c 	.word	0x1000002c

00012220 <LowLevelInit()>:

void LowLevelInit()
{
   12220:	b500      	push	{lr}
   12222:	b083      	sub	sp, #12
  // Set the SystemTick frequency to the RTOS tick frequency
  // It is critical that this happens before you set the system_clock, since
  // The system_timer keeps the time that the system_clock uses to delay itself.
  system_timer.SetTickFrequency(config::kRtosFrequency);
   12224:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   12228:	4822      	ldr	r0, [pc, #136]	; (122b4 <LowLevelInit()+0x94>)
   1222a:	f7fe fecb 	bl	10fc4 <SystemTimer::SetTickFrequency(unsigned long)>
  bool timer_started_successfully = system_timer.StartTimer();
   1222e:	4821      	ldr	r0, [pc, #132]	; (122b4 <LowLevelInit()+0x94>)
   12230:	f7fe fe7a 	bl	10f28 <SystemTimer::StartTimer()>
   12234:	4603      	mov	r3, r0
   12236:	f88d 3007 	strb.w	r3, [sp, #7]
  SJ2_ASSERT_WARNING(timer_started_successfully,
   1223a:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1223e:	f083 0301 	eor.w	r3, r3, #1
   12242:	b2db      	uxtb	r3, r3
   12244:	2b00      	cmp	r3, #0
   12246:	d005      	beq.n	12254 <LowLevelInit()+0x34>
   12248:	23ad      	movs	r3, #173	; 0xad
   1224a:	4a1b      	ldr	r2, [pc, #108]	; (122b8 <LowLevelInit()+0x98>)
   1224c:	491b      	ldr	r1, [pc, #108]	; (122bc <LowLevelInit()+0x9c>)
   1224e:	481c      	ldr	r0, [pc, #112]	; (122c0 <LowLevelInit()+0xa0>)
   12250:	f001 ff38 	bl	140c4 <printf>
                     "System Timer has FAILED to start!");
  // Set Clock Speed
  // SetClockFrequency will timeout return the offset between desire clockspeed
  // and actual clockspeed if the PLL doesn't get a frequency fix within a
  // defined timeout (see L1/system_clock.hpp:kDefaultTimeout)
  while (system_controller.SetClockFrequency(config::kSystemClockRateMhz) != 0)
   12254:	2130      	movs	r1, #48	; 0x30
   12256:	481b      	ldr	r0, [pc, #108]	; (122c4 <LowLevelInit()+0xa4>)
   12258:	f7fe fb4c 	bl	108f4 <Lpc40xxSystemController::SetClockFrequency(unsigned char)>
   1225c:	4603      	mov	r3, r0
   1225e:	2b00      	cmp	r3, #0
   12260:	bf14      	ite	ne
   12262:	2301      	movne	r3, #1
   12264:	2300      	moveq	r3, #0
   12266:	b2db      	uxtb	r3, r3
   12268:	2b00      	cmp	r3, #0
   1226a:	d001      	beq.n	12270 <LowLevelInit()+0x50>
  {
    // Continually attempt to set the clock frequency to the desired until the
    // delta between desired and actual are 0.
    continue;
   1226c:	bf00      	nop
  while (system_controller.SetClockFrequency(config::kSystemClockRateMhz) != 0)
   1226e:	e7f1      	b.n	12254 <LowLevelInit()+0x34>
  }
  // Enable Peripheral Clock and set its divider to 1 meaning the clock speed
  // fed to all peripherals will be 48Mhz.
  system_controller.SetPeripheralClockDivider(1);
   12270:	2101      	movs	r1, #1
   12272:	4814      	ldr	r0, [pc, #80]	; (122c4 <LowLevelInit()+0xa4>)
   12274:	f7fe fb86 	bl	10984 <Lpc40xxSystemController::SetPeripheralClockDivider(unsigned char)>
  // Set System Timer frequency again, since the clock speed has changed since
  // the last time we ran this.
  system_timer.DisableTimer();
   12278:	f7fe fe04 	bl	10e84 <SystemTimer::DisableTimer()>
  system_timer.SetTickFrequency(config::kRtosFrequency);
   1227c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   12280:	480c      	ldr	r0, [pc, #48]	; (122b4 <LowLevelInit()+0x94>)
   12282:	f7fe fe9f 	bl	10fc4 <SystemTimer::SetTickFrequency(unsigned long)>
  system_timer.StartTimer();
   12286:	480b      	ldr	r0, [pc, #44]	; (122b4 <LowLevelInit()+0x94>)
   12288:	f7fe fe4e 	bl	10f28 <SystemTimer::StartTimer()>
  // Set timer0 to 1 MHz (1,000,000 Hz) so that the timer increments every 1
  // micro second.
  timer0.Initialize(1'000'000);
   1228c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   12290:	4a0d      	ldr	r2, [pc, #52]	; (122c8 <LowLevelInit()+0xa8>)
   12292:	490e      	ldr	r1, [pc, #56]	; (122cc <LowLevelInit()+0xac>)
   12294:	480e      	ldr	r0, [pc, #56]	; (122d0 <LowLevelInit()+0xb0>)
   12296:	f7ff f9f7 	bl	11688 <Timer::Initialize(unsigned long, void (*)(), long)>
  SetUptimeFunction(Lpc40xxUptime);
   1229a:	480e      	ldr	r0, [pc, #56]	; (122d4 <LowLevelInit()+0xb4>)
   1229c:	f7fe faf0 	bl	10880 <SetUptimeFunction(unsigned long long (*)())>
  // Set UART0 baudrate, which is required for printf and scanf to work properly
  uart0.Initialize(config::kBaudRate);
   122a0:	f44f 4116 	mov.w	r1, #38400	; 0x9600
   122a4:	480c      	ldr	r0, [pc, #48]	; (122d8 <LowLevelInit()+0xb8>)
   122a6:	f7ff fba1 	bl	119ec <Uart::Initialize(unsigned long)>
}
   122aa:	bf00      	nop
   122ac:	b003      	add	sp, #12
   122ae:	f85d fb04 	ldr.w	pc, [sp], #4
   122b2:	bf00      	nop
   122b4:	100000a0 	.word	0x100000a0
   122b8:	00017c24 	.word	0x00017c24
   122bc:	0001798c 	.word	0x0001798c
   122c0:	0001786c 	.word	0x0001786c
   122c4:	100000a8 	.word	0x100000a8
   122c8:	00011669 	.word	0x00011669
   122cc:	000f4240 	.word	0x000f4240
   122d0:	100000ac 	.word	0x100000ac
   122d4:	000121a1 	.word	0x000121a1
   122d8:	1000008c 	.word	0x1000008c

000122dc <SystemInit>:

void SystemInit()
{
   122dc:	b508      	push	{r3, lr}
  // Transfer data section values from flash to RAM
  InitDataSection();
   122de:	f7fd ff15 	bl	1010c <InitDataSection()>
  // Clear BSS section of RAM
  // This is required because the nano implementation of the standard C/C++
  // libraries assumes that the BSS section is initialized to 0.
  InitBssSection();
   122e2:	f7fd ff5b 	bl	1019c <InitBssSection()>
  // Enable FPU (F.loating P.oint U.nit)
  // System will crash if floating point operations occur without
  // Initializing the FPU.
  InitFpu();
   122e6:	f7fd ff89 	bl	101fc <InitFpu()>
  // Initialisation C++ libraries
  __libc_init_array();
   122ea:	f004 ff6f 	bl	171cc <__libc_init_array>
  // Run LowLevel System Initialization
  LowLevelInit();
   122ee:	f7ff ff97 	bl	12220 <LowLevelInit()>
}
   122f2:	bf00      	nop
   122f4:	bd08      	pop	{r3, pc}
   122f6:	Address 0x00000000000122f6 is out of bounds.


000122f8 <ResetIsr>:
// Sets up a simple runtime environment and initializes the C/C++ library.

extern "C"
{
  void ResetIsr(void)
  {
   122f8:	b580      	push	{r7, lr}
   122fa:	b084      	sub	sp, #16
   122fc:	af00      	add	r7, sp, #0
    // The Hyperload bootloader takes up stack space to execute. The Hyperload
    // bootloader function launches this ISR manually, but it never returns thus
    // it never cleans up the memory it uses. To get that memory back, we have
    // to manually move the stack pointers back to the top of stack.
    const uint32_t kTopOfStack = reinterpret_cast<intptr_t>(&StackTop);
   122fe:	4b09      	ldr	r3, [pc, #36]	; (12324 <ResetIsr+0x2c>)
   12300:	60fb      	str	r3, [r7, #12]
   12302:	68fb      	ldr	r3, [r7, #12]
   12304:	603b      	str	r3, [r7, #0]
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
   12306:	683b      	ldr	r3, [r7, #0]
   12308:	f383 8809 	msr	PSP, r3
   1230c:	68fb      	ldr	r3, [r7, #12]
   1230e:	607b      	str	r3, [r7, #4]

    \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0\n" : : "r" (topOfMainStack) : "sp");
   12310:	687b      	ldr	r3, [r7, #4]
   12312:	f383 8808 	msr	MSP, r3
    __set_PSP(kTopOfStack);
    __set_MSP(kTopOfStack);

    SystemInit();
   12316:	f7ff ffe1 	bl	122dc <SystemInit>
// #pragma ignored "-Wpedantic" to suppress main function call warning
#pragma GCC diagnostic push ignored "-Wpedantic"
    [[maybe_unused]] int32_t result = main();
   1231a:	f7fe f9ab 	bl	10674 <main>
   1231e:	60b8      	str	r0, [r7, #8]
   12320:	e7fe      	b.n	12320 <ResetIsr+0x28>
   12322:	bf00      	nop
   12324:	10010000 	.word	0x10010000

00012328 <void Timer::TimerHandler<(TimerInterface::TimerPort)0>()>:
  static void TimerHandler()
   12328:	b510      	push	{r4, lr}
   1232a:	4674      	mov	r4, lr
   1232c:	4623      	mov	r3, r4
   1232e:	4619      	mov	r1, r3
   12330:	480a      	ldr	r0, [pc, #40]	; (1235c <void Timer::TimerHandler<(TimerInterface::TimerPort)0>()+0x34>)
   12332:	f000 fc6d 	bl	12c10 <__cyg_profile_func_enter>
      user_timer_isr[util::Value(port)]();
   12336:	2000      	movs	r0, #0
   12338:	f7ff f97e 	bl	11638 <unsigned char util::Value<TimerInterface::TimerPort, unsigned char>(TimerInterface::TimerPort)>
   1233c:	4603      	mov	r3, r0
   1233e:	461a      	mov	r2, r3
   12340:	4b07      	ldr	r3, [pc, #28]	; (12360 <void Timer::TimerHandler<(TimerInterface::TimerPort)0>()+0x38>)
   12342:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   12346:	4798      	blx	r3
    ClearInterrupts<port>();
   12348:	f000 f90e 	bl	12568 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)0>()>
   1234c:	4623      	mov	r3, r4
   1234e:	4619      	mov	r1, r3
   12350:	4802      	ldr	r0, [pc, #8]	; (1235c <void Timer::TimerHandler<(TimerInterface::TimerPort)0>()+0x34>)
   12352:	f000 fc71 	bl	12c38 <__cyg_profile_func_exit>
  }
   12356:	bf00      	nop
   12358:	bd10      	pop	{r4, pc}
   1235a:	bf00      	nop
   1235c:	00012329 	.word	0x00012329
   12360:	100002e4 	.word	0x100002e4

00012364 <void Timer::TimerHandler<(TimerInterface::TimerPort)1>()>:
  static void TimerHandler()
   12364:	b510      	push	{r4, lr}
   12366:	4674      	mov	r4, lr
   12368:	4623      	mov	r3, r4
   1236a:	4619      	mov	r1, r3
   1236c:	480a      	ldr	r0, [pc, #40]	; (12398 <void Timer::TimerHandler<(TimerInterface::TimerPort)1>()+0x34>)
   1236e:	f000 fc4f 	bl	12c10 <__cyg_profile_func_enter>
      user_timer_isr[util::Value(port)]();
   12372:	2001      	movs	r0, #1
   12374:	f7ff f960 	bl	11638 <unsigned char util::Value<TimerInterface::TimerPort, unsigned char>(TimerInterface::TimerPort)>
   12378:	4603      	mov	r3, r0
   1237a:	461a      	mov	r2, r3
   1237c:	4b07      	ldr	r3, [pc, #28]	; (1239c <void Timer::TimerHandler<(TimerInterface::TimerPort)1>()+0x38>)
   1237e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   12382:	4798      	blx	r3
    ClearInterrupts<port>();
   12384:	f000 f940 	bl	12608 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)1>()>
   12388:	4623      	mov	r3, r4
   1238a:	4619      	mov	r1, r3
   1238c:	4802      	ldr	r0, [pc, #8]	; (12398 <void Timer::TimerHandler<(TimerInterface::TimerPort)1>()+0x34>)
   1238e:	f000 fc53 	bl	12c38 <__cyg_profile_func_exit>
  }
   12392:	bf00      	nop
   12394:	bd10      	pop	{r4, pc}
   12396:	bf00      	nop
   12398:	00012365 	.word	0x00012365
   1239c:	100002e4 	.word	0x100002e4

000123a0 <void Timer::TimerHandler<(TimerInterface::TimerPort)2>()>:
  static void TimerHandler()
   123a0:	b510      	push	{r4, lr}
   123a2:	4674      	mov	r4, lr
   123a4:	4623      	mov	r3, r4
   123a6:	4619      	mov	r1, r3
   123a8:	480a      	ldr	r0, [pc, #40]	; (123d4 <void Timer::TimerHandler<(TimerInterface::TimerPort)2>()+0x34>)
   123aa:	f000 fc31 	bl	12c10 <__cyg_profile_func_enter>
      user_timer_isr[util::Value(port)]();
   123ae:	2002      	movs	r0, #2
   123b0:	f7ff f942 	bl	11638 <unsigned char util::Value<TimerInterface::TimerPort, unsigned char>(TimerInterface::TimerPort)>
   123b4:	4603      	mov	r3, r0
   123b6:	461a      	mov	r2, r3
   123b8:	4b07      	ldr	r3, [pc, #28]	; (123d8 <void Timer::TimerHandler<(TimerInterface::TimerPort)2>()+0x38>)
   123ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   123be:	4798      	blx	r3
    ClearInterrupts<port>();
   123c0:	f000 f972 	bl	126a8 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)2>()>
   123c4:	4623      	mov	r3, r4
   123c6:	4619      	mov	r1, r3
   123c8:	4802      	ldr	r0, [pc, #8]	; (123d4 <void Timer::TimerHandler<(TimerInterface::TimerPort)2>()+0x34>)
   123ca:	f000 fc35 	bl	12c38 <__cyg_profile_func_exit>
  }
   123ce:	bf00      	nop
   123d0:	bd10      	pop	{r4, pc}
   123d2:	bf00      	nop
   123d4:	000123a1 	.word	0x000123a1
   123d8:	100002e4 	.word	0x100002e4

000123dc <void Timer::TimerHandler<(TimerInterface::TimerPort)3>()>:
  static void TimerHandler()
   123dc:	b510      	push	{r4, lr}
   123de:	4674      	mov	r4, lr
   123e0:	4623      	mov	r3, r4
   123e2:	4619      	mov	r1, r3
   123e4:	480a      	ldr	r0, [pc, #40]	; (12410 <void Timer::TimerHandler<(TimerInterface::TimerPort)3>()+0x34>)
   123e6:	f000 fc13 	bl	12c10 <__cyg_profile_func_enter>
      user_timer_isr[util::Value(port)]();
   123ea:	2003      	movs	r0, #3
   123ec:	f7ff f924 	bl	11638 <unsigned char util::Value<TimerInterface::TimerPort, unsigned char>(TimerInterface::TimerPort)>
   123f0:	4603      	mov	r3, r0
   123f2:	461a      	mov	r2, r3
   123f4:	4b07      	ldr	r3, [pc, #28]	; (12414 <void Timer::TimerHandler<(TimerInterface::TimerPort)3>()+0x38>)
   123f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   123fa:	4798      	blx	r3
    ClearInterrupts<port>();
   123fc:	f000 f9a4 	bl	12748 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)3>()>
   12400:	4623      	mov	r3, r4
   12402:	4619      	mov	r1, r3
   12404:	4802      	ldr	r0, [pc, #8]	; (12410 <void Timer::TimerHandler<(TimerInterface::TimerPort)3>()+0x34>)
   12406:	f000 fc17 	bl	12c38 <__cyg_profile_func_exit>
  }
   1240a:	bf00      	nop
   1240c:	bd10      	pop	{r4, pc}
   1240e:	bf00      	nop
   12410:	000123dd 	.word	0x000123dd
   12414:	100002e4 	.word	0x100002e4

00012418 <Status Wait<Uart::Send(unsigned char)::{lambda()#1}>(unsigned long long, Uart::Send(unsigned char)::{lambda()#1})>:
inline Status Wait(uint64_t timeout, F is_done)
   12418:	e92d 4830 	stmdb	sp!, {r4, r5, fp, lr}
   1241c:	b088      	sub	sp, #32
   1241e:	4675      	mov	r5, lr
   12420:	e9cd 0102 	strd	r0, r1, [sp, #8]
   12424:	9201      	str	r2, [sp, #4]
   12426:	462b      	mov	r3, r5
   12428:	4619      	mov	r1, r3
   1242a:	4824      	ldr	r0, [pc, #144]	; (124bc <Status Wait<Uart::Send(unsigned char)::{lambda()#1}>(unsigned long long, Uart::Send(unsigned char)::{lambda()#1})+0xa4>)
   1242c:	f000 fbf0 	bl	12c10 <__cyg_profile_func_enter>
  uint64_t timeout_time = 0;
   12430:	f04f 0300 	mov.w	r3, #0
   12434:	f04f 0400 	mov.w	r4, #0
   12438:	e9cd 3406 	strd	r3, r4, [sp, #24]
  if (timeout == kMaxWait)
   1243c:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
   12440:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
   12444:	bf08      	it	eq
   12446:	f1b3 3fff 	cmpeq.w	r3, #4294967295	; 0xffffffff
   1244a:	d106      	bne.n	1245a <Status Wait<Uart::Send(unsigned char)::{lambda()#1}>(unsigned long long, Uart::Send(unsigned char)::{lambda()#1})+0x42>
    timeout_time = kMaxWait;
   1244c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   12450:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   12454:	e9cd 3406 	strd	r3, r4, [sp, #24]
   12458:	e00b      	b.n	12472 <Status Wait<Uart::Send(unsigned char)::{lambda()#1}>(unsigned long long, Uart::Send(unsigned char)::{lambda()#1})+0x5a>
    timeout_time = Milliseconds() + timeout;
   1245a:	f7fe fa29 	bl	108b0 <Milliseconds()>
   1245e:	460a      	mov	r2, r1
   12460:	4601      	mov	r1, r0
   12462:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
   12466:	eb13 0b01 	adds.w	fp, r3, r1
   1246a:	eb44 0c02 	adc.w	ip, r4, r2
   1246e:	e9cd bc06 	strd	fp, ip, [sp, #24]
  Status status = Status::kTimedOut;
   12472:	2301      	movs	r3, #1
   12474:	9305      	str	r3, [sp, #20]
  while (Milliseconds() < timeout_time)
   12476:	f7fe fa1b 	bl	108b0 <Milliseconds()>
   1247a:	460a      	mov	r2, r1
   1247c:	4601      	mov	r1, r0
   1247e:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
   12482:	42a2      	cmp	r2, r4
   12484:	bf08      	it	eq
   12486:	4299      	cmpeq	r1, r3
   12488:	bf34      	ite	cc
   1248a:	2301      	movcc	r3, #1
   1248c:	2300      	movcs	r3, #0
   1248e:	b2db      	uxtb	r3, r3
   12490:	2b00      	cmp	r3, #0
   12492:	d008      	beq.n	124a6 <Status Wait<Uart::Send(unsigned char)::{lambda()#1}>(unsigned long long, Uart::Send(unsigned char)::{lambda()#1})+0x8e>
    if (is_done())
   12494:	ab01      	add	r3, sp, #4
   12496:	4618      	mov	r0, r3
   12498:	f7ff fb1a 	bl	11ad0 <Uart::Send(unsigned char)::{lambda()#1}::operator()() const>
   1249c:	4603      	mov	r3, r0
   1249e:	2b00      	cmp	r3, #0
   124a0:	d0e9      	beq.n	12476 <Status Wait<Uart::Send(unsigned char)::{lambda()#1}>(unsigned long long, Uart::Send(unsigned char)::{lambda()#1})+0x5e>
      status = Status::kSuccess;
   124a2:	2300      	movs	r3, #0
   124a4:	9305      	str	r3, [sp, #20]
  return status;
   124a6:	9c05      	ldr	r4, [sp, #20]
   124a8:	462b      	mov	r3, r5
   124aa:	4619      	mov	r1, r3
   124ac:	4803      	ldr	r0, [pc, #12]	; (124bc <Status Wait<Uart::Send(unsigned char)::{lambda()#1}>(unsigned long long, Uart::Send(unsigned char)::{lambda()#1})+0xa4>)
   124ae:	f000 fbc3 	bl	12c38 <__cyg_profile_func_exit>
   124b2:	4623      	mov	r3, r4
}
   124b4:	4618      	mov	r0, r3
   124b6:	b008      	add	sp, #32
   124b8:	e8bd 8830 	ldmia.w	sp!, {r4, r5, fp, pc}
   124bc:	00012419 	.word	0x00012419

000124c0 <Status Wait<Uart::Receive(unsigned long)::{lambda()#1}>(unsigned long long, Uart::Receive(unsigned long)::{lambda()#1})>:
inline Status Wait(uint64_t timeout, F is_done)
   124c0:	e92d 4830 	stmdb	sp!, {r4, r5, fp, lr}
   124c4:	b088      	sub	sp, #32
   124c6:	4675      	mov	r5, lr
   124c8:	e9cd 0102 	strd	r0, r1, [sp, #8]
   124cc:	9201      	str	r2, [sp, #4]
   124ce:	462b      	mov	r3, r5
   124d0:	4619      	mov	r1, r3
   124d2:	4824      	ldr	r0, [pc, #144]	; (12564 <Status Wait<Uart::Receive(unsigned long)::{lambda()#1}>(unsigned long long, Uart::Receive(unsigned long)::{lambda()#1})+0xa4>)
   124d4:	f000 fb9c 	bl	12c10 <__cyg_profile_func_enter>
  uint64_t timeout_time = 0;
   124d8:	f04f 0300 	mov.w	r3, #0
   124dc:	f04f 0400 	mov.w	r4, #0
   124e0:	e9cd 3406 	strd	r3, r4, [sp, #24]
  if (timeout == kMaxWait)
   124e4:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
   124e8:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
   124ec:	bf08      	it	eq
   124ee:	f1b3 3fff 	cmpeq.w	r3, #4294967295	; 0xffffffff
   124f2:	d106      	bne.n	12502 <Status Wait<Uart::Receive(unsigned long)::{lambda()#1}>(unsigned long long, Uart::Receive(unsigned long)::{lambda()#1})+0x42>
    timeout_time = kMaxWait;
   124f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   124f8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   124fc:	e9cd 3406 	strd	r3, r4, [sp, #24]
   12500:	e00b      	b.n	1251a <Status Wait<Uart::Receive(unsigned long)::{lambda()#1}>(unsigned long long, Uart::Receive(unsigned long)::{lambda()#1})+0x5a>
    timeout_time = Milliseconds() + timeout;
   12502:	f7fe f9d5 	bl	108b0 <Milliseconds()>
   12506:	460a      	mov	r2, r1
   12508:	4601      	mov	r1, r0
   1250a:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
   1250e:	eb13 0b01 	adds.w	fp, r3, r1
   12512:	eb44 0c02 	adc.w	ip, r4, r2
   12516:	e9cd bc06 	strd	fp, ip, [sp, #24]
  Status status = Status::kTimedOut;
   1251a:	2301      	movs	r3, #1
   1251c:	9305      	str	r3, [sp, #20]
  while (Milliseconds() < timeout_time)
   1251e:	f7fe f9c7 	bl	108b0 <Milliseconds()>
   12522:	460a      	mov	r2, r1
   12524:	4601      	mov	r1, r0
   12526:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
   1252a:	42a2      	cmp	r2, r4
   1252c:	bf08      	it	eq
   1252e:	4299      	cmpeq	r1, r3
   12530:	bf34      	ite	cc
   12532:	2301      	movcc	r3, #1
   12534:	2300      	movcs	r3, #0
   12536:	b2db      	uxtb	r3, r3
   12538:	2b00      	cmp	r3, #0
   1253a:	d008      	beq.n	1254e <Status Wait<Uart::Receive(unsigned long)::{lambda()#1}>(unsigned long long, Uart::Receive(unsigned long)::{lambda()#1})+0x8e>
    if (is_done())
   1253c:	ab01      	add	r3, sp, #4
   1253e:	4618      	mov	r0, r3
   12540:	f7ff fb60 	bl	11c04 <Uart::Receive(unsigned long)::{lambda()#1}::operator()() const>
   12544:	4603      	mov	r3, r0
   12546:	2b00      	cmp	r3, #0
   12548:	d0e9      	beq.n	1251e <Status Wait<Uart::Receive(unsigned long)::{lambda()#1}>(unsigned long long, Uart::Receive(unsigned long)::{lambda()#1})+0x5e>
      status = Status::kSuccess;
   1254a:	2300      	movs	r3, #0
   1254c:	9305      	str	r3, [sp, #20]
  return status;
   1254e:	9c05      	ldr	r4, [sp, #20]
   12550:	462b      	mov	r3, r5
   12552:	4619      	mov	r1, r3
   12554:	4803      	ldr	r0, [pc, #12]	; (12564 <Status Wait<Uart::Receive(unsigned long)::{lambda()#1}>(unsigned long long, Uart::Receive(unsigned long)::{lambda()#1})+0xa4>)
   12556:	f000 fb6f 	bl	12c38 <__cyg_profile_func_exit>
   1255a:	4623      	mov	r3, r4
}
   1255c:	4618      	mov	r0, r3
   1255e:	b008      	add	sp, #32
   12560:	e8bd 8830 	ldmia.w	sp!, {r4, r5, fp, pc}
   12564:	000124c1 	.word	0x000124c1

00012568 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)0>()>:
  static void ClearInterrupts()
   12568:	b510      	push	{r4, lr}
   1256a:	b082      	sub	sp, #8
   1256c:	4674      	mov	r4, lr
   1256e:	4623      	mov	r3, r4
   12570:	4619      	mov	r1, r3
   12572:	4823      	ldr	r0, [pc, #140]	; (12600 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)0>()+0x98>)
   12574:	f000 fb4c 	bl	12c10 <__cyg_profile_func_enter>
    uint8_t channel = util::Value(port);
   12578:	2300      	movs	r3, #0
   1257a:	f88d 3007 	strb.w	r3, [sp, #7]
    tim_register[channel]->IR |= (1 << kRegMR0);
   1257e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   12582:	4a20      	ldr	r2, [pc, #128]	; (12604 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)0>()+0x9c>)
   12584:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12588:	681a      	ldr	r2, [r3, #0]
   1258a:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1258e:	491d      	ldr	r1, [pc, #116]	; (12604 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)0>()+0x9c>)
   12590:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   12594:	f042 0201 	orr.w	r2, r2, #1
   12598:	601a      	str	r2, [r3, #0]
    tim_register[channel]->IR |= (1 << kRegMR1);
   1259a:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1259e:	4a19      	ldr	r2, [pc, #100]	; (12604 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)0>()+0x9c>)
   125a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   125a4:	681a      	ldr	r2, [r3, #0]
   125a6:	f89d 3007 	ldrb.w	r3, [sp, #7]
   125aa:	4916      	ldr	r1, [pc, #88]	; (12604 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)0>()+0x9c>)
   125ac:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   125b0:	f042 0202 	orr.w	r2, r2, #2
   125b4:	601a      	str	r2, [r3, #0]
    tim_register[channel]->IR |= (1 << kRegMR2);
   125b6:	f89d 3007 	ldrb.w	r3, [sp, #7]
   125ba:	4a12      	ldr	r2, [pc, #72]	; (12604 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)0>()+0x9c>)
   125bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   125c0:	681a      	ldr	r2, [r3, #0]
   125c2:	f89d 3007 	ldrb.w	r3, [sp, #7]
   125c6:	490f      	ldr	r1, [pc, #60]	; (12604 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)0>()+0x9c>)
   125c8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   125cc:	f042 0204 	orr.w	r2, r2, #4
   125d0:	601a      	str	r2, [r3, #0]
    tim_register[channel]->IR |= (1 << kRegMR3);
   125d2:	f89d 3007 	ldrb.w	r3, [sp, #7]
   125d6:	4a0b      	ldr	r2, [pc, #44]	; (12604 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)0>()+0x9c>)
   125d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   125dc:	681a      	ldr	r2, [r3, #0]
   125de:	f89d 3007 	ldrb.w	r3, [sp, #7]
   125e2:	4908      	ldr	r1, [pc, #32]	; (12604 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)0>()+0x9c>)
   125e4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   125e8:	f042 0208 	orr.w	r2, r2, #8
   125ec:	601a      	str	r2, [r3, #0]
   125ee:	4623      	mov	r3, r4
   125f0:	4619      	mov	r1, r3
   125f2:	4803      	ldr	r0, [pc, #12]	; (12600 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)0>()+0x98>)
   125f4:	f000 fb20 	bl	12c38 <__cyg_profile_func_exit>
  }
   125f8:	bf00      	nop
   125fa:	b002      	add	sp, #8
   125fc:	bd10      	pop	{r4, pc}
   125fe:	bf00      	nop
   12600:	00012569 	.word	0x00012569
   12604:	1000002c 	.word	0x1000002c

00012608 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)1>()>:
  static void ClearInterrupts()
   12608:	b510      	push	{r4, lr}
   1260a:	b082      	sub	sp, #8
   1260c:	4674      	mov	r4, lr
   1260e:	4623      	mov	r3, r4
   12610:	4619      	mov	r1, r3
   12612:	4823      	ldr	r0, [pc, #140]	; (126a0 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)1>()+0x98>)
   12614:	f000 fafc 	bl	12c10 <__cyg_profile_func_enter>
    uint8_t channel = util::Value(port);
   12618:	2301      	movs	r3, #1
   1261a:	f88d 3007 	strb.w	r3, [sp, #7]
    tim_register[channel]->IR |= (1 << kRegMR0);
   1261e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   12622:	4a20      	ldr	r2, [pc, #128]	; (126a4 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)1>()+0x9c>)
   12624:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12628:	681a      	ldr	r2, [r3, #0]
   1262a:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1262e:	491d      	ldr	r1, [pc, #116]	; (126a4 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)1>()+0x9c>)
   12630:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   12634:	f042 0201 	orr.w	r2, r2, #1
   12638:	601a      	str	r2, [r3, #0]
    tim_register[channel]->IR |= (1 << kRegMR1);
   1263a:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1263e:	4a19      	ldr	r2, [pc, #100]	; (126a4 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)1>()+0x9c>)
   12640:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12644:	681a      	ldr	r2, [r3, #0]
   12646:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1264a:	4916      	ldr	r1, [pc, #88]	; (126a4 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)1>()+0x9c>)
   1264c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   12650:	f042 0202 	orr.w	r2, r2, #2
   12654:	601a      	str	r2, [r3, #0]
    tim_register[channel]->IR |= (1 << kRegMR2);
   12656:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1265a:	4a12      	ldr	r2, [pc, #72]	; (126a4 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)1>()+0x9c>)
   1265c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12660:	681a      	ldr	r2, [r3, #0]
   12662:	f89d 3007 	ldrb.w	r3, [sp, #7]
   12666:	490f      	ldr	r1, [pc, #60]	; (126a4 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)1>()+0x9c>)
   12668:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   1266c:	f042 0204 	orr.w	r2, r2, #4
   12670:	601a      	str	r2, [r3, #0]
    tim_register[channel]->IR |= (1 << kRegMR3);
   12672:	f89d 3007 	ldrb.w	r3, [sp, #7]
   12676:	4a0b      	ldr	r2, [pc, #44]	; (126a4 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)1>()+0x9c>)
   12678:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1267c:	681a      	ldr	r2, [r3, #0]
   1267e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   12682:	4908      	ldr	r1, [pc, #32]	; (126a4 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)1>()+0x9c>)
   12684:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   12688:	f042 0208 	orr.w	r2, r2, #8
   1268c:	601a      	str	r2, [r3, #0]
   1268e:	4623      	mov	r3, r4
   12690:	4619      	mov	r1, r3
   12692:	4803      	ldr	r0, [pc, #12]	; (126a0 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)1>()+0x98>)
   12694:	f000 fad0 	bl	12c38 <__cyg_profile_func_exit>
  }
   12698:	bf00      	nop
   1269a:	b002      	add	sp, #8
   1269c:	bd10      	pop	{r4, pc}
   1269e:	bf00      	nop
   126a0:	00012609 	.word	0x00012609
   126a4:	1000002c 	.word	0x1000002c

000126a8 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)2>()>:
  static void ClearInterrupts()
   126a8:	b510      	push	{r4, lr}
   126aa:	b082      	sub	sp, #8
   126ac:	4674      	mov	r4, lr
   126ae:	4623      	mov	r3, r4
   126b0:	4619      	mov	r1, r3
   126b2:	4823      	ldr	r0, [pc, #140]	; (12740 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)2>()+0x98>)
   126b4:	f000 faac 	bl	12c10 <__cyg_profile_func_enter>
    uint8_t channel = util::Value(port);
   126b8:	2302      	movs	r3, #2
   126ba:	f88d 3007 	strb.w	r3, [sp, #7]
    tim_register[channel]->IR |= (1 << kRegMR0);
   126be:	f89d 3007 	ldrb.w	r3, [sp, #7]
   126c2:	4a20      	ldr	r2, [pc, #128]	; (12744 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)2>()+0x9c>)
   126c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   126c8:	681a      	ldr	r2, [r3, #0]
   126ca:	f89d 3007 	ldrb.w	r3, [sp, #7]
   126ce:	491d      	ldr	r1, [pc, #116]	; (12744 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)2>()+0x9c>)
   126d0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   126d4:	f042 0201 	orr.w	r2, r2, #1
   126d8:	601a      	str	r2, [r3, #0]
    tim_register[channel]->IR |= (1 << kRegMR1);
   126da:	f89d 3007 	ldrb.w	r3, [sp, #7]
   126de:	4a19      	ldr	r2, [pc, #100]	; (12744 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)2>()+0x9c>)
   126e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   126e4:	681a      	ldr	r2, [r3, #0]
   126e6:	f89d 3007 	ldrb.w	r3, [sp, #7]
   126ea:	4916      	ldr	r1, [pc, #88]	; (12744 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)2>()+0x9c>)
   126ec:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   126f0:	f042 0202 	orr.w	r2, r2, #2
   126f4:	601a      	str	r2, [r3, #0]
    tim_register[channel]->IR |= (1 << kRegMR2);
   126f6:	f89d 3007 	ldrb.w	r3, [sp, #7]
   126fa:	4a12      	ldr	r2, [pc, #72]	; (12744 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)2>()+0x9c>)
   126fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12700:	681a      	ldr	r2, [r3, #0]
   12702:	f89d 3007 	ldrb.w	r3, [sp, #7]
   12706:	490f      	ldr	r1, [pc, #60]	; (12744 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)2>()+0x9c>)
   12708:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   1270c:	f042 0204 	orr.w	r2, r2, #4
   12710:	601a      	str	r2, [r3, #0]
    tim_register[channel]->IR |= (1 << kRegMR3);
   12712:	f89d 3007 	ldrb.w	r3, [sp, #7]
   12716:	4a0b      	ldr	r2, [pc, #44]	; (12744 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)2>()+0x9c>)
   12718:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1271c:	681a      	ldr	r2, [r3, #0]
   1271e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   12722:	4908      	ldr	r1, [pc, #32]	; (12744 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)2>()+0x9c>)
   12724:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   12728:	f042 0208 	orr.w	r2, r2, #8
   1272c:	601a      	str	r2, [r3, #0]
   1272e:	4623      	mov	r3, r4
   12730:	4619      	mov	r1, r3
   12732:	4803      	ldr	r0, [pc, #12]	; (12740 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)2>()+0x98>)
   12734:	f000 fa80 	bl	12c38 <__cyg_profile_func_exit>
  }
   12738:	bf00      	nop
   1273a:	b002      	add	sp, #8
   1273c:	bd10      	pop	{r4, pc}
   1273e:	bf00      	nop
   12740:	000126a9 	.word	0x000126a9
   12744:	1000002c 	.word	0x1000002c

00012748 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)3>()>:
  static void ClearInterrupts()
   12748:	b510      	push	{r4, lr}
   1274a:	b082      	sub	sp, #8
   1274c:	4674      	mov	r4, lr
   1274e:	4623      	mov	r3, r4
   12750:	4619      	mov	r1, r3
   12752:	4823      	ldr	r0, [pc, #140]	; (127e0 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)3>()+0x98>)
   12754:	f000 fa5c 	bl	12c10 <__cyg_profile_func_enter>
    uint8_t channel = util::Value(port);
   12758:	2303      	movs	r3, #3
   1275a:	f88d 3007 	strb.w	r3, [sp, #7]
    tim_register[channel]->IR |= (1 << kRegMR0);
   1275e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   12762:	4a20      	ldr	r2, [pc, #128]	; (127e4 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)3>()+0x9c>)
   12764:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12768:	681a      	ldr	r2, [r3, #0]
   1276a:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1276e:	491d      	ldr	r1, [pc, #116]	; (127e4 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)3>()+0x9c>)
   12770:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   12774:	f042 0201 	orr.w	r2, r2, #1
   12778:	601a      	str	r2, [r3, #0]
    tim_register[channel]->IR |= (1 << kRegMR1);
   1277a:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1277e:	4a19      	ldr	r2, [pc, #100]	; (127e4 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)3>()+0x9c>)
   12780:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12784:	681a      	ldr	r2, [r3, #0]
   12786:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1278a:	4916      	ldr	r1, [pc, #88]	; (127e4 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)3>()+0x9c>)
   1278c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   12790:	f042 0202 	orr.w	r2, r2, #2
   12794:	601a      	str	r2, [r3, #0]
    tim_register[channel]->IR |= (1 << kRegMR2);
   12796:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1279a:	4a12      	ldr	r2, [pc, #72]	; (127e4 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)3>()+0x9c>)
   1279c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   127a0:	681a      	ldr	r2, [r3, #0]
   127a2:	f89d 3007 	ldrb.w	r3, [sp, #7]
   127a6:	490f      	ldr	r1, [pc, #60]	; (127e4 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)3>()+0x9c>)
   127a8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   127ac:	f042 0204 	orr.w	r2, r2, #4
   127b0:	601a      	str	r2, [r3, #0]
    tim_register[channel]->IR |= (1 << kRegMR3);
   127b2:	f89d 3007 	ldrb.w	r3, [sp, #7]
   127b6:	4a0b      	ldr	r2, [pc, #44]	; (127e4 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)3>()+0x9c>)
   127b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   127bc:	681a      	ldr	r2, [r3, #0]
   127be:	f89d 3007 	ldrb.w	r3, [sp, #7]
   127c2:	4908      	ldr	r1, [pc, #32]	; (127e4 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)3>()+0x9c>)
   127c4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   127c8:	f042 0208 	orr.w	r2, r2, #8
   127cc:	601a      	str	r2, [r3, #0]
   127ce:	4623      	mov	r3, r4
   127d0:	4619      	mov	r1, r3
   127d2:	4803      	ldr	r0, [pc, #12]	; (127e0 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)3>()+0x98>)
   127d4:	f000 fa30 	bl	12c38 <__cyg_profile_func_exit>
  }
   127d8:	bf00      	nop
   127da:	b002      	add	sp, #8
   127dc:	bd10      	pop	{r4, pc}
   127de:	bf00      	nop
   127e0:	00012749 	.word	0x00012749
   127e4:	1000002c 	.word	0x1000002c

000127e8 <__static_initialization_and_destruction_0(int, int)>:
#pragma GCC diagnostic pop
    // main() shouldn't return, but if it does, we'll just enter an infinite
    // loop
    Halt();
  }
}
   127e8:	b082      	sub	sp, #8
   127ea:	9001      	str	r0, [sp, #4]
   127ec:	9100      	str	r1, [sp, #0]
   127ee:	9b01      	ldr	r3, [sp, #4]
   127f0:	2b01      	cmp	r3, #1
   127f2:	d15d      	bne.n	128b0 <__static_initialization_and_destruction_0(int, int)+0xc8>
   127f4:	9b00      	ldr	r3, [sp, #0]
   127f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
   127fa:	4293      	cmp	r3, r2
   127fc:	d158      	bne.n	128b0 <__static_initialization_and_destruction_0(int, int)+0xc8>
  inline static volatile uint32_t * match[4][4] = {
   127fe:	4b2e      	ldr	r3, [pc, #184]	; (128b8 <__static_initialization_and_destruction_0(int, int)+0xd0>)
   12800:	681b      	ldr	r3, [r3, #0]
   12802:	f003 0301 	and.w	r3, r3, #1
   12806:	2b00      	cmp	r3, #0
   12808:	d152      	bne.n	128b0 <__static_initialization_and_destruction_0(int, int)+0xc8>
   1280a:	4b2b      	ldr	r3, [pc, #172]	; (128b8 <__static_initialization_and_destruction_0(int, int)+0xd0>)
   1280c:	2201      	movs	r2, #1
   1280e:	601a      	str	r2, [r3, #0]
    [kTimer0] = { &tim_register[0]->MR0, &tim_register[0]->MR1,
   12810:	4b2a      	ldr	r3, [pc, #168]	; (128bc <__static_initialization_and_destruction_0(int, int)+0xd4>)
   12812:	681b      	ldr	r3, [r3, #0]
   12814:	3318      	adds	r3, #24
  };
   12816:	4a2a      	ldr	r2, [pc, #168]	; (128c0 <__static_initialization_and_destruction_0(int, int)+0xd8>)
   12818:	6013      	str	r3, [r2, #0]
    [kTimer0] = { &tim_register[0]->MR0, &tim_register[0]->MR1,
   1281a:	4b28      	ldr	r3, [pc, #160]	; (128bc <__static_initialization_and_destruction_0(int, int)+0xd4>)
   1281c:	681b      	ldr	r3, [r3, #0]
   1281e:	331c      	adds	r3, #28
  };
   12820:	4a27      	ldr	r2, [pc, #156]	; (128c0 <__static_initialization_and_destruction_0(int, int)+0xd8>)
   12822:	6053      	str	r3, [r2, #4]
                  &tim_register[0]->MR2, &tim_register[0]->MR3 },
   12824:	4b25      	ldr	r3, [pc, #148]	; (128bc <__static_initialization_and_destruction_0(int, int)+0xd4>)
   12826:	681b      	ldr	r3, [r3, #0]
   12828:	3320      	adds	r3, #32
  };
   1282a:	4a25      	ldr	r2, [pc, #148]	; (128c0 <__static_initialization_and_destruction_0(int, int)+0xd8>)
   1282c:	6093      	str	r3, [r2, #8]
                  &tim_register[0]->MR2, &tim_register[0]->MR3 },
   1282e:	4b23      	ldr	r3, [pc, #140]	; (128bc <__static_initialization_and_destruction_0(int, int)+0xd4>)
   12830:	681b      	ldr	r3, [r3, #0]
   12832:	3324      	adds	r3, #36	; 0x24
  };
   12834:	4a22      	ldr	r2, [pc, #136]	; (128c0 <__static_initialization_and_destruction_0(int, int)+0xd8>)
   12836:	60d3      	str	r3, [r2, #12]
    [kTimer1] = { &tim_register[1]->MR0, &tim_register[1]->MR1,
   12838:	4b20      	ldr	r3, [pc, #128]	; (128bc <__static_initialization_and_destruction_0(int, int)+0xd4>)
   1283a:	685b      	ldr	r3, [r3, #4]
   1283c:	3318      	adds	r3, #24
  };
   1283e:	4a20      	ldr	r2, [pc, #128]	; (128c0 <__static_initialization_and_destruction_0(int, int)+0xd8>)
   12840:	6113      	str	r3, [r2, #16]
    [kTimer1] = { &tim_register[1]->MR0, &tim_register[1]->MR1,
   12842:	4b1e      	ldr	r3, [pc, #120]	; (128bc <__static_initialization_and_destruction_0(int, int)+0xd4>)
   12844:	685b      	ldr	r3, [r3, #4]
   12846:	331c      	adds	r3, #28
  };
   12848:	4a1d      	ldr	r2, [pc, #116]	; (128c0 <__static_initialization_and_destruction_0(int, int)+0xd8>)
   1284a:	6153      	str	r3, [r2, #20]
                  &tim_register[1]->MR2, &tim_register[1]->MR3 },
   1284c:	4b1b      	ldr	r3, [pc, #108]	; (128bc <__static_initialization_and_destruction_0(int, int)+0xd4>)
   1284e:	685b      	ldr	r3, [r3, #4]
   12850:	3320      	adds	r3, #32
  };
   12852:	4a1b      	ldr	r2, [pc, #108]	; (128c0 <__static_initialization_and_destruction_0(int, int)+0xd8>)
   12854:	6193      	str	r3, [r2, #24]
                  &tim_register[1]->MR2, &tim_register[1]->MR3 },
   12856:	4b19      	ldr	r3, [pc, #100]	; (128bc <__static_initialization_and_destruction_0(int, int)+0xd4>)
   12858:	685b      	ldr	r3, [r3, #4]
   1285a:	3324      	adds	r3, #36	; 0x24
  };
   1285c:	4a18      	ldr	r2, [pc, #96]	; (128c0 <__static_initialization_and_destruction_0(int, int)+0xd8>)
   1285e:	61d3      	str	r3, [r2, #28]
    [kTimer2] = { &tim_register[2]->MR0, &tim_register[2]->MR1,
   12860:	4b16      	ldr	r3, [pc, #88]	; (128bc <__static_initialization_and_destruction_0(int, int)+0xd4>)
   12862:	689b      	ldr	r3, [r3, #8]
   12864:	3318      	adds	r3, #24
  };
   12866:	4a16      	ldr	r2, [pc, #88]	; (128c0 <__static_initialization_and_destruction_0(int, int)+0xd8>)
   12868:	6213      	str	r3, [r2, #32]
    [kTimer2] = { &tim_register[2]->MR0, &tim_register[2]->MR1,
   1286a:	4b14      	ldr	r3, [pc, #80]	; (128bc <__static_initialization_and_destruction_0(int, int)+0xd4>)
   1286c:	689b      	ldr	r3, [r3, #8]
   1286e:	331c      	adds	r3, #28
  };
   12870:	4a13      	ldr	r2, [pc, #76]	; (128c0 <__static_initialization_and_destruction_0(int, int)+0xd8>)
   12872:	6253      	str	r3, [r2, #36]	; 0x24
                  &tim_register[2]->MR2, &tim_register[2]->MR3 },
   12874:	4b11      	ldr	r3, [pc, #68]	; (128bc <__static_initialization_and_destruction_0(int, int)+0xd4>)
   12876:	689b      	ldr	r3, [r3, #8]
   12878:	3320      	adds	r3, #32
  };
   1287a:	4a11      	ldr	r2, [pc, #68]	; (128c0 <__static_initialization_and_destruction_0(int, int)+0xd8>)
   1287c:	6293      	str	r3, [r2, #40]	; 0x28
                  &tim_register[2]->MR2, &tim_register[2]->MR3 },
   1287e:	4b0f      	ldr	r3, [pc, #60]	; (128bc <__static_initialization_and_destruction_0(int, int)+0xd4>)
   12880:	689b      	ldr	r3, [r3, #8]
   12882:	3324      	adds	r3, #36	; 0x24
  };
   12884:	4a0e      	ldr	r2, [pc, #56]	; (128c0 <__static_initialization_and_destruction_0(int, int)+0xd8>)
   12886:	62d3      	str	r3, [r2, #44]	; 0x2c
    [kTimer3] = { &tim_register[3]->MR0, &tim_register[3]->MR1,
   12888:	4b0c      	ldr	r3, [pc, #48]	; (128bc <__static_initialization_and_destruction_0(int, int)+0xd4>)
   1288a:	68db      	ldr	r3, [r3, #12]
   1288c:	3318      	adds	r3, #24
  };
   1288e:	4a0c      	ldr	r2, [pc, #48]	; (128c0 <__static_initialization_and_destruction_0(int, int)+0xd8>)
   12890:	6313      	str	r3, [r2, #48]	; 0x30
    [kTimer3] = { &tim_register[3]->MR0, &tim_register[3]->MR1,
   12892:	4b0a      	ldr	r3, [pc, #40]	; (128bc <__static_initialization_and_destruction_0(int, int)+0xd4>)
   12894:	68db      	ldr	r3, [r3, #12]
   12896:	331c      	adds	r3, #28
  };
   12898:	4a09      	ldr	r2, [pc, #36]	; (128c0 <__static_initialization_and_destruction_0(int, int)+0xd8>)
   1289a:	6353      	str	r3, [r2, #52]	; 0x34
                  &tim_register[3]->MR2, &tim_register[3]->MR3 }
   1289c:	4b07      	ldr	r3, [pc, #28]	; (128bc <__static_initialization_and_destruction_0(int, int)+0xd4>)
   1289e:	68db      	ldr	r3, [r3, #12]
   128a0:	3320      	adds	r3, #32
  };
   128a2:	4a07      	ldr	r2, [pc, #28]	; (128c0 <__static_initialization_and_destruction_0(int, int)+0xd8>)
   128a4:	6393      	str	r3, [r2, #56]	; 0x38
                  &tim_register[3]->MR2, &tim_register[3]->MR3 }
   128a6:	4b05      	ldr	r3, [pc, #20]	; (128bc <__static_initialization_and_destruction_0(int, int)+0xd4>)
   128a8:	68db      	ldr	r3, [r3, #12]
   128aa:	3324      	adds	r3, #36	; 0x24
  };
   128ac:	4a04      	ldr	r2, [pc, #16]	; (128c0 <__static_initialization_and_destruction_0(int, int)+0xd8>)
   128ae:	63d3      	str	r3, [r2, #60]	; 0x3c
   128b0:	bf00      	nop
   128b2:	b002      	add	sp, #8
   128b4:	4770      	bx	lr
   128b6:	bf00      	nop
   128b8:	100002f4 	.word	0x100002f4
   128bc:	1000002c 	.word	0x1000002c
   128c0:	100002a4 	.word	0x100002a4

000128c4 <_GLOBAL__sub_I_UptimeRTOS>:
   128c4:	b508      	push	{r3, lr}
   128c6:	f64f 71ff 	movw	r1, #65535	; 0xffff
   128ca:	2001      	movs	r0, #1
   128cc:	f7ff ff8c 	bl	127e8 <__static_initialization_and_destruction_0(int, int)>
   128d0:	bd08      	pop	{r3, pc}
   128d2:	Address 0x00000000000128d2 is out of bounds.


000128d4 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
   128d4:	b082      	sub	sp, #8
   128d6:	4603      	mov	r3, r0
   128d8:	f88d 3007 	strb.w	r3, [sp, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
   128dc:	f99d 3007 	ldrsb.w	r3, [sp, #7]
   128e0:	f003 021f 	and.w	r2, r3, #31
   128e4:	4905      	ldr	r1, [pc, #20]	; (128fc <NVIC_EnableIRQ+0x28>)
   128e6:	f99d 3007 	ldrsb.w	r3, [sp, #7]
   128ea:	095b      	lsrs	r3, r3, #5
   128ec:	2001      	movs	r0, #1
   128ee:	fa00 f202 	lsl.w	r2, r0, r2
   128f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   128f6:	bf00      	nop
   128f8:	b002      	add	sp, #8
   128fa:	4770      	bx	lr
   128fc:	e000e100 	.word	0xe000e100

00012900 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
   12900:	b082      	sub	sp, #8
   12902:	4603      	mov	r3, r0
   12904:	9100      	str	r1, [sp, #0]
   12906:	f88d 3007 	strb.w	r3, [sp, #7]
  if ((int32_t)(IRQn) < 0)
   1290a:	f99d 3007 	ldrsb.w	r3, [sp, #7]
   1290e:	2b00      	cmp	r3, #0
   12910:	da0c      	bge.n	1292c <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   12912:	9b00      	ldr	r3, [sp, #0]
   12914:	b2da      	uxtb	r2, r3
   12916:	490d      	ldr	r1, [pc, #52]	; (1294c <NVIC_SetPriority+0x4c>)
   12918:	f99d 3007 	ldrsb.w	r3, [sp, #7]
   1291c:	f003 030f 	and.w	r3, r3, #15
   12920:	3b04      	subs	r3, #4
   12922:	0152      	lsls	r2, r2, #5
   12924:	b2d2      	uxtb	r2, r2
   12926:	440b      	add	r3, r1
   12928:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
   1292a:	e00b      	b.n	12944 <NVIC_SetPriority+0x44>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1292c:	9b00      	ldr	r3, [sp, #0]
   1292e:	b2db      	uxtb	r3, r3
   12930:	4a07      	ldr	r2, [pc, #28]	; (12950 <NVIC_SetPriority+0x50>)
   12932:	f99d 1007 	ldrsb.w	r1, [sp, #7]
   12936:	4608      	mov	r0, r1
   12938:	015b      	lsls	r3, r3, #5
   1293a:	b2d9      	uxtb	r1, r3
   1293c:	1813      	adds	r3, r2, r0
   1293e:	460a      	mov	r2, r1
   12940:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
   12944:	bf00      	nop
   12946:	b002      	add	sp, #8
   12948:	4770      	bx	lr
   1294a:	bf00      	nop
   1294c:	e000ed00 	.word	0xe000ed00
   12950:	e000e100 	.word	0xe000e100

00012954 <InterruptLookupHandler>:
{
   12954:	b500      	push	{lr}
   12956:	b085      	sub	sp, #20
  uint8_t active_isr = (SCB->ICSR & 0xFF);
   12958:	4b12      	ldr	r3, [pc, #72]	; (129a4 <InterruptLookupHandler+0x50>)
   1295a:	685b      	ldr	r3, [r3, #4]
   1295c:	f88d 300f 	strb.w	r3, [sp, #15]
  IsrPointer isr     = dynamic_isr_vector_table[active_isr];
   12960:	f89d 300f 	ldrb.w	r3, [sp, #15]
   12964:	4a10      	ldr	r2, [pc, #64]	; (129a8 <InterruptLookupHandler+0x54>)
   12966:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1296a:	9302      	str	r3, [sp, #8]
  SJ2_ASSERT_FATAL(isr != InterruptLookupHandler,
   1296c:	9b02      	ldr	r3, [sp, #8]
   1296e:	4a0f      	ldr	r2, [pc, #60]	; (129ac <InterruptLookupHandler+0x58>)
   12970:	4293      	cmp	r3, r2
   12972:	d110      	bne.n	12996 <InterruptLookupHandler+0x42>
   12974:	f89d 300f 	ldrb.w	r3, [sp, #15]
   12978:	9300      	str	r3, [sp, #0]
   1297a:	23dd      	movs	r3, #221	; 0xdd
   1297c:	4a0c      	ldr	r2, [pc, #48]	; (129b0 <InterruptLookupHandler+0x5c>)
   1297e:	490d      	ldr	r1, [pc, #52]	; (129b4 <InterruptLookupHandler+0x60>)
   12980:	480d      	ldr	r0, [pc, #52]	; (129b8 <InterruptLookupHandler+0x64>)
   12982:	f001 fb9f 	bl	140c4 <printf>
   12986:	480d      	ldr	r0, [pc, #52]	; (129bc <InterruptLookupHandler+0x68>)
   12988:	f000 f912 	bl	12bb0 <puts>
   1298c:	2100      	movs	r1, #0
   1298e:	2001      	movs	r0, #1
   12990:	f7fd fede 	bl	10750 <debug::PrintBacktrace(bool, void*)>
   12994:	e7fe      	b.n	12994 <InterruptLookupHandler+0x40>
  isr();
   12996:	9b02      	ldr	r3, [sp, #8]
   12998:	4798      	blx	r3
}
   1299a:	bf00      	nop
   1299c:	b005      	add	sp, #20
   1299e:	f85d fb04 	ldr.w	pc, [sp], #4
   129a2:	bf00      	nop
   129a4:	e000ed00 	.word	0xe000ed00
   129a8:	100000b8 	.word	0x100000b8
   129ac:	00012955 	.word	0x00012955
   129b0:	00017ea0 	.word	0x00017ea0
   129b4:	00017e90 	.word	0x00017e90
   129b8:	00017d34 	.word	0x00017d34
   129bc:	00017de0 	.word	0x00017de0

000129c0 <RegisterIsr(IRQn, void (*)(), bool, long)>:
{
   129c0:	b500      	push	{lr}
   129c2:	b085      	sub	sp, #20
   129c4:	9102      	str	r1, [sp, #8]
   129c6:	9301      	str	r3, [sp, #4]
   129c8:	4603      	mov	r3, r0
   129ca:	f88d 300f 	strb.w	r3, [sp, #15]
   129ce:	4613      	mov	r3, r2
   129d0:	f88d 300e 	strb.w	r3, [sp, #14]
  dynamic_isr_vector_table[irq + kIrqOffset] = isr;
   129d4:	f99d 300f 	ldrsb.w	r3, [sp, #15]
   129d8:	3310      	adds	r3, #16
   129da:	490f      	ldr	r1, [pc, #60]	; (12a18 <RegisterIsr(IRQn, void (*)(), bool, long)+0x58>)
   129dc:	9a02      	ldr	r2, [sp, #8]
   129de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  if (enable_interrupt && irq >= 0)
   129e2:	f89d 300e 	ldrb.w	r3, [sp, #14]
   129e6:	2b00      	cmp	r3, #0
   129e8:	d008      	beq.n	129fc <RegisterIsr(IRQn, void (*)(), bool, long)+0x3c>
   129ea:	f99d 300f 	ldrsb.w	r3, [sp, #15]
   129ee:	2b00      	cmp	r3, #0
   129f0:	db04      	blt.n	129fc <RegisterIsr(IRQn, void (*)(), bool, long)+0x3c>
    NVIC_EnableIRQ(irq);
   129f2:	f99d 300f 	ldrsb.w	r3, [sp, #15]
   129f6:	4618      	mov	r0, r3
   129f8:	f7ff ff6c 	bl	128d4 <NVIC_EnableIRQ>
  if (priority > -1)
   129fc:	9b01      	ldr	r3, [sp, #4]
   129fe:	2b00      	cmp	r3, #0
   12a00:	db06      	blt.n	12a10 <RegisterIsr(IRQn, void (*)(), bool, long)+0x50>
    NVIC_SetPriority(irq, priority);
   12a02:	9a01      	ldr	r2, [sp, #4]
   12a04:	f99d 300f 	ldrsb.w	r3, [sp, #15]
   12a08:	4611      	mov	r1, r2
   12a0a:	4618      	mov	r0, r3
   12a0c:	f7ff ff78 	bl	12900 <NVIC_SetPriority>
}
   12a10:	bf00      	nop
   12a12:	b005      	add	sp, #20
   12a14:	f85d fb04 	ldr.w	pc, [sp], #4
   12a18:	100000b8 	.word	0x100000b8

00012a1c <GetRegistersFromStack>:
{
   12a1c:	b500      	push	{lr}
   12a1e:	b08d      	sub	sp, #52	; 0x34
   12a20:	9003      	str	r0, [sp, #12]
  volatile uint32_t r0  = fault_stack_address[0];
   12a22:	9b03      	ldr	r3, [sp, #12]
   12a24:	681b      	ldr	r3, [r3, #0]
   12a26:	930b      	str	r3, [sp, #44]	; 0x2c
  volatile uint32_t r1  = fault_stack_address[1];
   12a28:	9b03      	ldr	r3, [sp, #12]
   12a2a:	685b      	ldr	r3, [r3, #4]
   12a2c:	930a      	str	r3, [sp, #40]	; 0x28
  volatile uint32_t r2  = fault_stack_address[2];
   12a2e:	9b03      	ldr	r3, [sp, #12]
   12a30:	689b      	ldr	r3, [r3, #8]
   12a32:	9309      	str	r3, [sp, #36]	; 0x24
  volatile uint32_t r3  = fault_stack_address[3];
   12a34:	9b03      	ldr	r3, [sp, #12]
   12a36:	68db      	ldr	r3, [r3, #12]
   12a38:	9308      	str	r3, [sp, #32]
  volatile uint32_t r12 = fault_stack_address[4];
   12a3a:	9b03      	ldr	r3, [sp, #12]
   12a3c:	691b      	ldr	r3, [r3, #16]
   12a3e:	9307      	str	r3, [sp, #28]
  volatile uint32_t lr = fault_stack_address[5];
   12a40:	9b03      	ldr	r3, [sp, #12]
   12a42:	695b      	ldr	r3, [r3, #20]
   12a44:	9306      	str	r3, [sp, #24]
  volatile uint32_t pc = fault_stack_address[6];
   12a46:	9b03      	ldr	r3, [sp, #12]
   12a48:	699b      	ldr	r3, [r3, #24]
   12a4a:	9305      	str	r3, [sp, #20]
  volatile uint32_t psr = fault_stack_address[7];
   12a4c:	9b03      	ldr	r3, [sp, #12]
   12a4e:	69db      	ldr	r3, [r3, #28]
   12a50:	9304      	str	r3, [sp, #16]
  printf(SJ2_BACKGROUND_RED "Hard Fault Exception Occurred!\n" SJ2_COLOR_RESET);
   12a52:	480d      	ldr	r0, [pc, #52]	; (12a88 <GetRegistersFromStack+0x6c>)
   12a54:	f001 fb36 	bl	140c4 <printf>
  printf("r0: 0x%08" PRIX32 ", r1: 0x%08" PRIX32
   12a58:	990b      	ldr	r1, [sp, #44]	; 0x2c
   12a5a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   12a5c:	9809      	ldr	r0, [sp, #36]	; 0x24
   12a5e:	9b08      	ldr	r3, [sp, #32]
   12a60:	9300      	str	r3, [sp, #0]
   12a62:	4603      	mov	r3, r0
   12a64:	4809      	ldr	r0, [pc, #36]	; (12a8c <GetRegistersFromStack+0x70>)
   12a66:	f001 fb2d 	bl	140c4 <printf>
  printf("r12: 0x%08" PRIX32 ", lr: 0x%08" PRIX32
   12a6a:	9907      	ldr	r1, [sp, #28]
   12a6c:	9a06      	ldr	r2, [sp, #24]
   12a6e:	9805      	ldr	r0, [sp, #20]
   12a70:	9b04      	ldr	r3, [sp, #16]
   12a72:	9300      	str	r3, [sp, #0]
   12a74:	4603      	mov	r3, r0
   12a76:	4806      	ldr	r0, [pc, #24]	; (12a90 <GetRegistersFromStack+0x74>)
   12a78:	f001 fb24 	bl	140c4 <printf>
  debug::PrintBacktrace(true, reinterpret_cast<void *>(pc));
   12a7c:	9b05      	ldr	r3, [sp, #20]
   12a7e:	4619      	mov	r1, r3
   12a80:	2001      	movs	r0, #1
   12a82:	f7fd fe65 	bl	10750 <debug::PrintBacktrace(bool, void*)>
   12a86:	e7fe      	b.n	12a86 <GetRegistersFromStack+0x6a>
   12a88:	00017df8 	.word	0x00017df8
   12a8c:	00017e24 	.word	0x00017e24
   12a90:	00017e58 	.word	0x00017e58

00012a94 <FirmwareStdOut(int)>:
}
Stdout out = HostWrite;
Stdin in   = HostRead;
#else
int FirmwareStdOut(int data)
{
   12a94:	b530      	push	{r4, r5, lr}
   12a96:	b083      	sub	sp, #12
   12a98:	4675      	mov	r5, lr
   12a9a:	9001      	str	r0, [sp, #4]
   12a9c:	462b      	mov	r3, r5
   12a9e:	4619      	mov	r1, r3
   12aa0:	4809      	ldr	r0, [pc, #36]	; (12ac8 <FirmwareStdOut(int)+0x34>)
   12aa2:	f000 f8b5 	bl	12c10 <__cyg_profile_func_enter>
  uart0.Send(static_cast<uint8_t>(data));
   12aa6:	9b01      	ldr	r3, [sp, #4]
   12aa8:	b2db      	uxtb	r3, r3
   12aaa:	4619      	mov	r1, r3
   12aac:	4807      	ldr	r0, [pc, #28]	; (12acc <FirmwareStdOut(int)+0x38>)
   12aae:	f7ff f835 	bl	11b1c <Uart::Send(unsigned char)>
  return 1;
   12ab2:	2401      	movs	r4, #1
   12ab4:	462b      	mov	r3, r5
   12ab6:	4619      	mov	r1, r3
   12ab8:	4803      	ldr	r0, [pc, #12]	; (12ac8 <FirmwareStdOut(int)+0x34>)
   12aba:	f000 f8bd 	bl	12c38 <__cyg_profile_func_exit>
   12abe:	4623      	mov	r3, r4
}
   12ac0:	4618      	mov	r0, r3
   12ac2:	b003      	add	sp, #12
   12ac4:	bd30      	pop	{r4, r5, pc}
   12ac6:	bf00      	nop
   12ac8:	00012a95 	.word	0x00012a95
   12acc:	1000008c 	.word	0x1000008c

00012ad0 <_exit>:
  }
  // Dummy implementation of exit with return code placed into
  // Arm register r3
  // NOLINTNEXTLINE(readability-identifier-naming)
  void _exit([[maybe_unused]] int rc)
  {
   12ad0:	b500      	push	{lr}
   12ad2:	b083      	sub	sp, #12
   12ad4:	4673      	mov	r3, lr
   12ad6:	9001      	str	r0, [sp, #4]
   12ad8:	4619      	mov	r1, r3
   12ada:	4802      	ldr	r0, [pc, #8]	; (12ae4 <_exit+0x14>)
   12adc:	f000 f898 	bl	12c10 <__cyg_profile_func_enter>
    while (1)
    {
      continue;
   12ae0:	bf00      	nop
    while (1)
   12ae2:	e7fd      	b.n	12ae0 <_exit+0x10>
   12ae4:	00012ad1 	.word	0x00012ad1

00012ae8 <_getpid>:
    }
  }
  // Dummy implementation of getpid
  // NOLINTNEXTLINE(readability-identifier-naming)
  int _getpid()
  {
   12ae8:	b538      	push	{r3, r4, r5, lr}
   12aea:	4675      	mov	r5, lr
   12aec:	462b      	mov	r3, r5
   12aee:	4619      	mov	r1, r3
   12af0:	4805      	ldr	r0, [pc, #20]	; (12b08 <_getpid+0x20>)
   12af2:	f000 f88d 	bl	12c10 <__cyg_profile_func_enter>
    return 1;
   12af6:	2401      	movs	r4, #1
   12af8:	462b      	mov	r3, r5
   12afa:	4619      	mov	r1, r3
   12afc:	4802      	ldr	r0, [pc, #8]	; (12b08 <_getpid+0x20>)
   12afe:	f000 f89b 	bl	12c38 <__cyg_profile_func_exit>
   12b02:	4623      	mov	r3, r4
  }
   12b04:	4618      	mov	r0, r3
   12b06:	bd38      	pop	{r3, r4, r5, pc}
   12b08:	00012ae9 	.word	0x00012ae9

00012b0c <_kill>:
  // Dummy implementation of kill
  // NOLINTNEXTLINE(readability-identifier-naming)
  int _kill(int, int)
  {
   12b0c:	b530      	push	{r4, r5, lr}
   12b0e:	b083      	sub	sp, #12
   12b10:	4675      	mov	r5, lr
   12b12:	9001      	str	r0, [sp, #4]
   12b14:	9100      	str	r1, [sp, #0]
   12b16:	462b      	mov	r3, r5
   12b18:	4619      	mov	r1, r3
   12b1a:	4807      	ldr	r0, [pc, #28]	; (12b38 <_kill+0x2c>)
   12b1c:	f000 f878 	bl	12c10 <__cyg_profile_func_enter>
    return -1;
   12b20:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   12b24:	462b      	mov	r3, r5
   12b26:	4619      	mov	r1, r3
   12b28:	4803      	ldr	r0, [pc, #12]	; (12b38 <_kill+0x2c>)
   12b2a:	f000 f885 	bl	12c38 <__cyg_profile_func_exit>
   12b2e:	4623      	mov	r3, r4
  }
   12b30:	4618      	mov	r0, r3
   12b32:	b003      	add	sp, #12
   12b34:	bd30      	pop	{r4, r5, pc}
   12b36:	bf00      	nop
   12b38:	00012b0d 	.word	0x00012b0d

00012b3c <_putchar>:
    }
    return length;
  }
  // Needed by third party printf library
  void _putchar(char character)  // NOLINT
  {
   12b3c:	b510      	push	{r4, lr}
   12b3e:	b082      	sub	sp, #8
   12b40:	4674      	mov	r4, lr
   12b42:	4603      	mov	r3, r0
   12b44:	f88d 3007 	strb.w	r3, [sp, #7]
   12b48:	4623      	mov	r3, r4
   12b4a:	4619      	mov	r1, r3
   12b4c:	4808      	ldr	r0, [pc, #32]	; (12b70 <_putchar+0x34>)
   12b4e:	f000 f85f 	bl	12c10 <__cyg_profile_func_enter>
    out(character);
   12b52:	4b08      	ldr	r3, [pc, #32]	; (12b74 <_putchar+0x38>)
   12b54:	681b      	ldr	r3, [r3, #0]
   12b56:	f89d 2007 	ldrb.w	r2, [sp, #7]
   12b5a:	4610      	mov	r0, r2
   12b5c:	4798      	blx	r3
   12b5e:	4623      	mov	r3, r4
   12b60:	4619      	mov	r1, r3
   12b62:	4803      	ldr	r0, [pc, #12]	; (12b70 <_putchar+0x34>)
   12b64:	f000 f868 	bl	12c38 <__cyg_profile_func_exit>
  }
   12b68:	bf00      	nop
   12b6a:	b002      	add	sp, #8
   12b6c:	bd10      	pop	{r4, pc}
   12b6e:	bf00      	nop
   12b70:	00012b3d 	.word	0x00012b3d
   12b74:	1000019c 	.word	0x1000019c

00012b78 <putchar>:

  // Overload default libnano putchar() with a more optimal version that does
  // not use dynamic memory
  int putchar(int character)  // NOLINT
  {
   12b78:	b530      	push	{r4, r5, lr}
   12b7a:	b083      	sub	sp, #12
   12b7c:	4674      	mov	r4, lr
   12b7e:	9001      	str	r0, [sp, #4]
   12b80:	4623      	mov	r3, r4
   12b82:	4619      	mov	r1, r3
   12b84:	4808      	ldr	r0, [pc, #32]	; (12ba8 <putchar+0x30>)
   12b86:	f000 f843 	bl	12c10 <__cyg_profile_func_enter>
    return out(character);
   12b8a:	4b08      	ldr	r3, [pc, #32]	; (12bac <putchar+0x34>)
   12b8c:	681b      	ldr	r3, [r3, #0]
   12b8e:	9801      	ldr	r0, [sp, #4]
   12b90:	4798      	blx	r3
   12b92:	4605      	mov	r5, r0
   12b94:	4623      	mov	r3, r4
   12b96:	4619      	mov	r1, r3
   12b98:	4803      	ldr	r0, [pc, #12]	; (12ba8 <putchar+0x30>)
   12b9a:	f000 f84d 	bl	12c38 <__cyg_profile_func_exit>
   12b9e:	462b      	mov	r3, r5
  }
   12ba0:	4618      	mov	r0, r3
   12ba2:	b003      	add	sp, #12
   12ba4:	bd30      	pop	{r4, r5, pc}
   12ba6:	bf00      	nop
   12ba8:	00012b79 	.word	0x00012b79
   12bac:	1000019c 	.word	0x1000019c

00012bb0 <puts>:

  // Overload default libnano puts() with a more optimal version that does
  // not use dynamic memory
  int puts(const char * str)  // NOLINT
  {
   12bb0:	b530      	push	{r4, r5, lr}
   12bb2:	b085      	sub	sp, #20
   12bb4:	4675      	mov	r5, lr
   12bb6:	9001      	str	r0, [sp, #4]
   12bb8:	462b      	mov	r3, r5
   12bba:	4619      	mov	r1, r3
   12bbc:	4812      	ldr	r0, [pc, #72]	; (12c08 <puts+0x58>)
   12bbe:	f000 f827 	bl	12c10 <__cyg_profile_func_enter>
    int i;
    for (i = 0; str[i] != '\0'; i++)
   12bc2:	2300      	movs	r3, #0
   12bc4:	9303      	str	r3, [sp, #12]
   12bc6:	9b03      	ldr	r3, [sp, #12]
   12bc8:	9a01      	ldr	r2, [sp, #4]
   12bca:	4413      	add	r3, r2
   12bcc:	781b      	ldrb	r3, [r3, #0]
   12bce:	2b00      	cmp	r3, #0
   12bd0:	d00b      	beq.n	12bea <puts+0x3a>
    {
      out(str[i]);
   12bd2:	4b0e      	ldr	r3, [pc, #56]	; (12c0c <puts+0x5c>)
   12bd4:	681b      	ldr	r3, [r3, #0]
   12bd6:	9a03      	ldr	r2, [sp, #12]
   12bd8:	9901      	ldr	r1, [sp, #4]
   12bda:	440a      	add	r2, r1
   12bdc:	7812      	ldrb	r2, [r2, #0]
   12bde:	4610      	mov	r0, r2
   12be0:	4798      	blx	r3
    for (i = 0; str[i] != '\0'; i++)
   12be2:	9b03      	ldr	r3, [sp, #12]
   12be4:	3301      	adds	r3, #1
   12be6:	9303      	str	r3, [sp, #12]
   12be8:	e7ed      	b.n	12bc6 <puts+0x16>
    }
    out('\n');
   12bea:	4b08      	ldr	r3, [pc, #32]	; (12c0c <puts+0x5c>)
   12bec:	681b      	ldr	r3, [r3, #0]
   12bee:	200a      	movs	r0, #10
   12bf0:	4798      	blx	r3
    return i;
   12bf2:	9c03      	ldr	r4, [sp, #12]
   12bf4:	462b      	mov	r3, r5
   12bf6:	4619      	mov	r1, r3
   12bf8:	4803      	ldr	r0, [pc, #12]	; (12c08 <puts+0x58>)
   12bfa:	f000 f81d 	bl	12c38 <__cyg_profile_func_exit>
   12bfe:	4623      	mov	r3, r4
  }
   12c00:	4618      	mov	r0, r3
   12c02:	b005      	add	sp, #20
   12c04:	bd30      	pop	{r4, r5, pc}
   12c06:	bf00      	nop
   12c08:	00012bb1 	.word	0x00012bb1
   12c0c:	1000019c 	.word	0x1000019c

00012c10 <__cyg_profile_func_enter>:
  // =============================
  void * stack_trace[config::kBacktraceDepth] = { nullptr };
  size_t stack_depth = 0;

  void __cyg_profile_func_enter(void *, void * call_site)  // NOLINT
  {
   12c10:	b082      	sub	sp, #8
   12c12:	9001      	str	r0, [sp, #4]
   12c14:	9100      	str	r1, [sp, #0]
    stack_trace[stack_depth++] = call_site;
   12c16:	9a00      	ldr	r2, [sp, #0]
   12c18:	4b05      	ldr	r3, [pc, #20]	; (12c30 <__cyg_profile_func_enter+0x20>)
   12c1a:	681b      	ldr	r3, [r3, #0]
   12c1c:	1c59      	adds	r1, r3, #1
   12c1e:	4804      	ldr	r0, [pc, #16]	; (12c30 <__cyg_profile_func_enter+0x20>)
   12c20:	6001      	str	r1, [r0, #0]
   12c22:	4904      	ldr	r1, [pc, #16]	; (12c34 <__cyg_profile_func_enter+0x24>)
   12c24:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
   12c28:	bf00      	nop
   12c2a:	b002      	add	sp, #8
   12c2c:	4770      	bx	lr
   12c2e:	bf00      	nop
   12c30:	100003f8 	.word	0x100003f8
   12c34:	100002f8 	.word	0x100002f8

00012c38 <__cyg_profile_func_exit>:

  void __cyg_profile_func_exit(void *, void *)  // NOLINT
  {
   12c38:	b082      	sub	sp, #8
   12c3a:	9001      	str	r0, [sp, #4]
   12c3c:	9100      	str	r1, [sp, #0]
    stack_depth--;
   12c3e:	4b04      	ldr	r3, [pc, #16]	; (12c50 <__cyg_profile_func_exit+0x18>)
   12c40:	681b      	ldr	r3, [r3, #0]
   12c42:	3b01      	subs	r3, #1
   12c44:	4a02      	ldr	r2, [pc, #8]	; (12c50 <__cyg_profile_func_exit+0x18>)
   12c46:	6013      	str	r3, [r2, #0]
  }
   12c48:	bf00      	nop
   12c4a:	b002      	add	sp, #8
   12c4c:	4770      	bx	lr
   12c4e:	bf00      	nop
   12c50:	100003f8 	.word	0x100003f8

00012c54 <GetStackTrace()>:
}

void ** GetStackTrace()
{
   12c54:	b538      	push	{r3, r4, r5, lr}
   12c56:	4675      	mov	r5, lr
   12c58:	462b      	mov	r3, r5
   12c5a:	4619      	mov	r1, r3
   12c5c:	4805      	ldr	r0, [pc, #20]	; (12c74 <GetStackTrace()+0x20>)
   12c5e:	f7ff ffd7 	bl	12c10 <__cyg_profile_func_enter>
  return stack_trace;
   12c62:	4c05      	ldr	r4, [pc, #20]	; (12c78 <GetStackTrace()+0x24>)
   12c64:	462b      	mov	r3, r5
   12c66:	4619      	mov	r1, r3
   12c68:	4802      	ldr	r0, [pc, #8]	; (12c74 <GetStackTrace()+0x20>)
   12c6a:	f7ff ffe5 	bl	12c38 <__cyg_profile_func_exit>
   12c6e:	4623      	mov	r3, r4
}
   12c70:	4618      	mov	r0, r3
   12c72:	bd38      	pop	{r3, r4, r5, pc}
   12c74:	00012c55 	.word	0x00012c55
   12c78:	100002f8 	.word	0x100002f8

00012c7c <GetStackDepth()>:

size_t GetStackDepth()
{
   12c7c:	b538      	push	{r3, r4, r5, lr}
   12c7e:	4675      	mov	r5, lr
   12c80:	462b      	mov	r3, r5
   12c82:	4619      	mov	r1, r3
   12c84:	4806      	ldr	r0, [pc, #24]	; (12ca0 <GetStackDepth()+0x24>)
   12c86:	f7ff ffc3 	bl	12c10 <__cyg_profile_func_enter>
  return stack_depth;
   12c8a:	4b06      	ldr	r3, [pc, #24]	; (12ca4 <GetStackDepth()+0x28>)
   12c8c:	681c      	ldr	r4, [r3, #0]
   12c8e:	462b      	mov	r3, r5
   12c90:	4619      	mov	r1, r3
   12c92:	4803      	ldr	r0, [pc, #12]	; (12ca0 <GetStackDepth()+0x24>)
   12c94:	f7ff ffd0 	bl	12c38 <__cyg_profile_func_exit>
   12c98:	4623      	mov	r3, r4
}
   12c9a:	4618      	mov	r0, r3
   12c9c:	bd38      	pop	{r3, r4, r5, pc}
   12c9e:	bf00      	nop
   12ca0:	00012c7d 	.word	0x00012c7d
   12ca4:	100003f8 	.word	0x100003f8

00012ca8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
   12ca8:	b510      	push	{r4, lr}
   12caa:	b084      	sub	sp, #16
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
   12cac:	4b29      	ldr	r3, [pc, #164]	; (12d54 <vTaskSwitchContext+0xac>)
   12cae:	681b      	ldr	r3, [r3, #0]
   12cb0:	2b00      	cmp	r3, #0
   12cb2:	d003      	beq.n	12cbc <vTaskSwitchContext+0x14>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
   12cb4:	4b28      	ldr	r3, [pc, #160]	; (12d58 <vTaskSwitchContext+0xb0>)
   12cb6:	2201      	movs	r2, #1
   12cb8:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
   12cba:	e047      	b.n	12d4c <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
   12cbc:	4b26      	ldr	r3, [pc, #152]	; (12d58 <vTaskSwitchContext+0xb0>)
   12cbe:	2200      	movs	r2, #0
   12cc0:	601a      	str	r2, [r3, #0]
					ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
   12cc2:	f7ff fa8d 	bl	121e0 <UptimeRTOS>
   12cc6:	4603      	mov	r3, r0
   12cc8:	460c      	mov	r4, r1
   12cca:	461a      	mov	r2, r3
   12ccc:	4b23      	ldr	r3, [pc, #140]	; (12d5c <vTaskSwitchContext+0xb4>)
   12cce:	601a      	str	r2, [r3, #0]
				if( ulTotalRunTime > ulTaskSwitchedInTime )
   12cd0:	4b22      	ldr	r3, [pc, #136]	; (12d5c <vTaskSwitchContext+0xb4>)
   12cd2:	681a      	ldr	r2, [r3, #0]
   12cd4:	4b22      	ldr	r3, [pc, #136]	; (12d60 <vTaskSwitchContext+0xb8>)
   12cd6:	681b      	ldr	r3, [r3, #0]
   12cd8:	429a      	cmp	r2, r3
   12cda:	d909      	bls.n	12cf0 <vTaskSwitchContext+0x48>
					pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
   12cdc:	4b21      	ldr	r3, [pc, #132]	; (12d64 <vTaskSwitchContext+0xbc>)
   12cde:	681b      	ldr	r3, [r3, #0]
   12ce0:	6d59      	ldr	r1, [r3, #84]	; 0x54
   12ce2:	4a1e      	ldr	r2, [pc, #120]	; (12d5c <vTaskSwitchContext+0xb4>)
   12ce4:	6810      	ldr	r0, [r2, #0]
   12ce6:	4a1e      	ldr	r2, [pc, #120]	; (12d60 <vTaskSwitchContext+0xb8>)
   12ce8:	6812      	ldr	r2, [r2, #0]
   12cea:	1a82      	subs	r2, r0, r2
   12cec:	440a      	add	r2, r1
   12cee:	655a      	str	r2, [r3, #84]	; 0x54
				ulTaskSwitchedInTime = ulTotalRunTime;
   12cf0:	4b1a      	ldr	r3, [pc, #104]	; (12d5c <vTaskSwitchContext+0xb4>)
   12cf2:	681b      	ldr	r3, [r3, #0]
   12cf4:	4a1a      	ldr	r2, [pc, #104]	; (12d60 <vTaskSwitchContext+0xb8>)
   12cf6:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
   12cf8:	4b1b      	ldr	r3, [pc, #108]	; (12d68 <vTaskSwitchContext+0xc0>)
   12cfa:	681b      	ldr	r3, [r3, #0]
   12cfc:	9301      	str	r3, [sp, #4]
	/* Generic helper function. */
	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitmap )
	{
	uint8_t ucReturn;

		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
   12cfe:	9b01      	ldr	r3, [sp, #4]
   12d00:	fab3 f383 	clz	r3, r3
   12d04:	f88d 3003 	strb.w	r3, [sp, #3]
		return ucReturn;
   12d08:	f89d 3003 	ldrb.w	r3, [sp, #3]
   12d0c:	f1c3 031f 	rsb	r3, r3, #31
   12d10:	9303      	str	r3, [sp, #12]
   12d12:	9a03      	ldr	r2, [sp, #12]
   12d14:	4613      	mov	r3, r2
   12d16:	009b      	lsls	r3, r3, #2
   12d18:	4413      	add	r3, r2
   12d1a:	009b      	lsls	r3, r3, #2
   12d1c:	4a13      	ldr	r2, [pc, #76]	; (12d6c <vTaskSwitchContext+0xc4>)
   12d1e:	4413      	add	r3, r2
   12d20:	9302      	str	r3, [sp, #8]
   12d22:	9b02      	ldr	r3, [sp, #8]
   12d24:	685b      	ldr	r3, [r3, #4]
   12d26:	685a      	ldr	r2, [r3, #4]
   12d28:	9b02      	ldr	r3, [sp, #8]
   12d2a:	605a      	str	r2, [r3, #4]
   12d2c:	9b02      	ldr	r3, [sp, #8]
   12d2e:	685a      	ldr	r2, [r3, #4]
   12d30:	9b02      	ldr	r3, [sp, #8]
   12d32:	3308      	adds	r3, #8
   12d34:	429a      	cmp	r2, r3
   12d36:	d104      	bne.n	12d42 <vTaskSwitchContext+0x9a>
   12d38:	9b02      	ldr	r3, [sp, #8]
   12d3a:	685b      	ldr	r3, [r3, #4]
   12d3c:	685a      	ldr	r2, [r3, #4]
   12d3e:	9b02      	ldr	r3, [sp, #8]
   12d40:	605a      	str	r2, [r3, #4]
   12d42:	9b02      	ldr	r3, [sp, #8]
   12d44:	685b      	ldr	r3, [r3, #4]
   12d46:	68db      	ldr	r3, [r3, #12]
   12d48:	4a06      	ldr	r2, [pc, #24]	; (12d64 <vTaskSwitchContext+0xbc>)
   12d4a:	6013      	str	r3, [r2, #0]
}
   12d4c:	bf00      	nop
   12d4e:	b004      	add	sp, #16
   12d50:	bd10      	pop	{r4, pc}
   12d52:	bf00      	nop
   12d54:	1000046c 	.word	0x1000046c
   12d58:	10000468 	.word	0x10000468
   12d5c:	10000474 	.word	0x10000474
   12d60:	10000470 	.word	0x10000470
   12d64:	100003fc 	.word	0x100003fc
   12d68:	10000464 	.word	0x10000464
   12d6c:	10000400 	.word	0x10000400

00012d70 <vPortSVCHandler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
   12d70:	4b07      	ldr	r3, [pc, #28]	; (12d90 <pxCurrentTCBConst2>)
   12d72:	6819      	ldr	r1, [r3, #0]
   12d74:	6808      	ldr	r0, [r1, #0]
   12d76:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12d7a:	f380 8809 	msr	PSP, r0
   12d7e:	f3bf 8f6f 	isb	sy
   12d82:	f04f 0000 	mov.w	r0, #0
   12d86:	f380 8811 	msr	BASEPRI, r0
   12d8a:	4770      	bx	lr
   12d8c:	f3af 8000 	nop.w

00012d90 <pxCurrentTCBConst2>:
   12d90:	100003fc 	.word	0x100003fc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
   12d94:	bf00      	nop
   12d96:	bf00      	nop
   12d98:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   12d9c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

00012da0 <xPortPendSVHandler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
   12da0:	f3ef 8009 	mrs	r0, PSP
   12da4:	f3bf 8f6f 	isb	sy
   12da8:	4b15      	ldr	r3, [pc, #84]	; (12e00 <pxCurrentTCBConst>)
   12daa:	681a      	ldr	r2, [r3, #0]
   12dac:	f01e 0f10 	tst.w	lr, #16
   12db0:	bf08      	it	eq
   12db2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
   12db6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12dba:	6010      	str	r0, [r2, #0]
   12dbc:	e92d 0009 	stmdb	sp!, {r0, r3}
   12dc0:	f04f 0028 	mov.w	r0, #40	; 0x28
   12dc4:	f380 8811 	msr	BASEPRI, r0
   12dc8:	f3bf 8f4f 	dsb	sy
   12dcc:	f3bf 8f6f 	isb	sy
   12dd0:	f7ff ff6a 	bl	12ca8 <vTaskSwitchContext>
   12dd4:	f04f 0000 	mov.w	r0, #0
   12dd8:	f380 8811 	msr	BASEPRI, r0
   12ddc:	bc09      	pop	{r0, r3}
   12dde:	6819      	ldr	r1, [r3, #0]
   12de0:	6808      	ldr	r0, [r1, #0]
   12de2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12de6:	f01e 0f10 	tst.w	lr, #16
   12dea:	bf08      	it	eq
   12dec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
   12df0:	f380 8809 	msr	PSP, r0
   12df4:	f3bf 8f6f 	isb	sy
   12df8:	4770      	bx	lr
   12dfa:	bf00      	nop
   12dfc:	f3af 8000 	nop.w

00012e00 <pxCurrentTCBConst>:
   12e00:	100003fc 	.word	0x100003fc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
   12e04:	bf00      	nop
   12e06:	bf00      	nop

00012e08 <_out_null(char, void*, unsigned int, unsigned int)>:
}


// internal null output
static inline void _out_null(char character, void* buffer, size_t idx, size_t maxlen)
{
   12e08:	b510      	push	{r4, lr}
   12e0a:	b084      	sub	sp, #16
   12e0c:	4674      	mov	r4, lr
   12e0e:	9102      	str	r1, [sp, #8]
   12e10:	9201      	str	r2, [sp, #4]
   12e12:	9300      	str	r3, [sp, #0]
   12e14:	4603      	mov	r3, r0
   12e16:	f88d 300f 	strb.w	r3, [sp, #15]
   12e1a:	4623      	mov	r3, r4
   12e1c:	4619      	mov	r1, r3
   12e1e:	4805      	ldr	r0, [pc, #20]	; (12e34 <_out_null(char, void*, unsigned int, unsigned int)+0x2c>)
   12e20:	f7ff fef6 	bl	12c10 <__cyg_profile_func_enter>
   12e24:	4623      	mov	r3, r4
   12e26:	4619      	mov	r1, r3
   12e28:	4802      	ldr	r0, [pc, #8]	; (12e34 <_out_null(char, void*, unsigned int, unsigned int)+0x2c>)
   12e2a:	f7ff ff05 	bl	12c38 <__cyg_profile_func_exit>
  (void)character; (void)buffer; (void)idx; (void)maxlen;
}
   12e2e:	bf00      	nop
   12e30:	b004      	add	sp, #16
   12e32:	bd10      	pop	{r4, pc}
   12e34:	00012e09 	.word	0x00012e09

00012e38 <_out_char(char, void*, unsigned int, unsigned int)>:


// internal _putchar wrapper
static inline void _out_char(char character, void* buffer, size_t idx, size_t maxlen)
{
   12e38:	b510      	push	{r4, lr}
   12e3a:	b084      	sub	sp, #16
   12e3c:	4674      	mov	r4, lr
   12e3e:	9102      	str	r1, [sp, #8]
   12e40:	9201      	str	r2, [sp, #4]
   12e42:	9300      	str	r3, [sp, #0]
   12e44:	4603      	mov	r3, r0
   12e46:	f88d 300f 	strb.w	r3, [sp, #15]
   12e4a:	4623      	mov	r3, r4
   12e4c:	4619      	mov	r1, r3
   12e4e:	480a      	ldr	r0, [pc, #40]	; (12e78 <_out_char(char, void*, unsigned int, unsigned int)+0x40>)
   12e50:	f7ff fede 	bl	12c10 <__cyg_profile_func_enter>
  (void)buffer; (void)idx; (void)maxlen;
  if (character) {
   12e54:	f89d 300f 	ldrb.w	r3, [sp, #15]
   12e58:	2b00      	cmp	r3, #0
   12e5a:	d004      	beq.n	12e66 <_out_char(char, void*, unsigned int, unsigned int)+0x2e>
    _putchar(character);
   12e5c:	f89d 300f 	ldrb.w	r3, [sp, #15]
   12e60:	4618      	mov	r0, r3
   12e62:	f7ff fe6b 	bl	12b3c <_putchar>
   12e66:	4623      	mov	r3, r4
   12e68:	4619      	mov	r1, r3
   12e6a:	4803      	ldr	r0, [pc, #12]	; (12e78 <_out_char(char, void*, unsigned int, unsigned int)+0x40>)
   12e6c:	f7ff fee4 	bl	12c38 <__cyg_profile_func_exit>
  }
}
   12e70:	bf00      	nop
   12e72:	b004      	add	sp, #16
   12e74:	bd10      	pop	{r4, pc}
   12e76:	bf00      	nop
   12e78:	00012e39 	.word	0x00012e39

00012e7c <_strlen(char const*)>:


// internal strlen
// \return The length of the string (excluding the terminating 0)
static inline unsigned int _strlen(const char* str)
{
   12e7c:	b530      	push	{r4, r5, lr}
   12e7e:	b085      	sub	sp, #20
   12e80:	4674      	mov	r4, lr
   12e82:	9001      	str	r0, [sp, #4]
   12e84:	4623      	mov	r3, r4
   12e86:	4619      	mov	r1, r3
   12e88:	480c      	ldr	r0, [pc, #48]	; (12ebc <_strlen(char const*)+0x40>)
   12e8a:	f7ff fec1 	bl	12c10 <__cyg_profile_func_enter>
  const char* s;
  for (s = str; *s; ++s);
   12e8e:	9b01      	ldr	r3, [sp, #4]
   12e90:	9303      	str	r3, [sp, #12]
   12e92:	9b03      	ldr	r3, [sp, #12]
   12e94:	781b      	ldrb	r3, [r3, #0]
   12e96:	2b00      	cmp	r3, #0
   12e98:	d003      	beq.n	12ea2 <_strlen(char const*)+0x26>
   12e9a:	9b03      	ldr	r3, [sp, #12]
   12e9c:	3301      	adds	r3, #1
   12e9e:	9303      	str	r3, [sp, #12]
   12ea0:	e7f7      	b.n	12e92 <_strlen(char const*)+0x16>
  return (unsigned int)(s - str);
   12ea2:	9a03      	ldr	r2, [sp, #12]
   12ea4:	9b01      	ldr	r3, [sp, #4]
   12ea6:	1ad3      	subs	r3, r2, r3
   12ea8:	461d      	mov	r5, r3
   12eaa:	4623      	mov	r3, r4
   12eac:	4619      	mov	r1, r3
   12eae:	4803      	ldr	r0, [pc, #12]	; (12ebc <_strlen(char const*)+0x40>)
   12eb0:	f7ff fec2 	bl	12c38 <__cyg_profile_func_exit>
   12eb4:	462b      	mov	r3, r5
}
   12eb6:	4618      	mov	r0, r3
   12eb8:	b005      	add	sp, #20
   12eba:	bd30      	pop	{r4, r5, pc}
   12ebc:	00012e7d 	.word	0x00012e7d

00012ec0 <_is_digit(char)>:


// internal test if char is a digit (0-9)
// \return true if char is a digit
static inline bool _is_digit(char ch)
{
   12ec0:	b530      	push	{r4, r5, lr}
   12ec2:	b083      	sub	sp, #12
   12ec4:	4675      	mov	r5, lr
   12ec6:	4603      	mov	r3, r0
   12ec8:	f88d 3007 	strb.w	r3, [sp, #7]
   12ecc:	462b      	mov	r3, r5
   12ece:	4619      	mov	r1, r3
   12ed0:	480b      	ldr	r0, [pc, #44]	; (12f00 <_is_digit(char)+0x40>)
   12ed2:	f7ff fe9d 	bl	12c10 <__cyg_profile_func_enter>
  return (ch >= '0') && (ch <= '9');
   12ed6:	f89d 3007 	ldrb.w	r3, [sp, #7]
   12eda:	2b2f      	cmp	r3, #47	; 0x2f
   12edc:	d905      	bls.n	12eea <_is_digit(char)+0x2a>
   12ede:	f89d 3007 	ldrb.w	r3, [sp, #7]
   12ee2:	2b39      	cmp	r3, #57	; 0x39
   12ee4:	d801      	bhi.n	12eea <_is_digit(char)+0x2a>
   12ee6:	2401      	movs	r4, #1
   12ee8:	e000      	b.n	12eec <_is_digit(char)+0x2c>
   12eea:	2400      	movs	r4, #0
   12eec:	462b      	mov	r3, r5
   12eee:	4619      	mov	r1, r3
   12ef0:	4803      	ldr	r0, [pc, #12]	; (12f00 <_is_digit(char)+0x40>)
   12ef2:	f7ff fea1 	bl	12c38 <__cyg_profile_func_exit>
   12ef6:	4623      	mov	r3, r4
}
   12ef8:	4618      	mov	r0, r3
   12efa:	b003      	add	sp, #12
   12efc:	bd30      	pop	{r4, r5, pc}
   12efe:	bf00      	nop
   12f00:	00012ec1 	.word	0x00012ec1

00012f04 <_atoi(char const**)>:


// internal ASCII string to unsigned int conversion
static unsigned int _atoi(const char** str)
{
   12f04:	b530      	push	{r4, r5, lr}
   12f06:	b085      	sub	sp, #20
   12f08:	4675      	mov	r5, lr
   12f0a:	9001      	str	r0, [sp, #4]
   12f0c:	462b      	mov	r3, r5
   12f0e:	4619      	mov	r1, r3
   12f10:	4813      	ldr	r0, [pc, #76]	; (12f60 <_atoi(char const**)+0x5c>)
   12f12:	f7ff fe7d 	bl	12c10 <__cyg_profile_func_enter>
  unsigned int i = 0U;
   12f16:	2300      	movs	r3, #0
   12f18:	9303      	str	r3, [sp, #12]
  while (_is_digit(**str)) {
   12f1a:	9b01      	ldr	r3, [sp, #4]
   12f1c:	681b      	ldr	r3, [r3, #0]
   12f1e:	781b      	ldrb	r3, [r3, #0]
   12f20:	4618      	mov	r0, r3
   12f22:	f7ff ffcd 	bl	12ec0 <_is_digit(char)>
   12f26:	4603      	mov	r3, r0
   12f28:	2b00      	cmp	r3, #0
   12f2a:	d00f      	beq.n	12f4c <_atoi(char const**)+0x48>
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
   12f2c:	9a03      	ldr	r2, [sp, #12]
   12f2e:	4613      	mov	r3, r2
   12f30:	009b      	lsls	r3, r3, #2
   12f32:	4413      	add	r3, r2
   12f34:	005b      	lsls	r3, r3, #1
   12f36:	4618      	mov	r0, r3
   12f38:	9b01      	ldr	r3, [sp, #4]
   12f3a:	681b      	ldr	r3, [r3, #0]
   12f3c:	1c59      	adds	r1, r3, #1
   12f3e:	9a01      	ldr	r2, [sp, #4]
   12f40:	6011      	str	r1, [r2, #0]
   12f42:	781b      	ldrb	r3, [r3, #0]
   12f44:	4403      	add	r3, r0
   12f46:	3b30      	subs	r3, #48	; 0x30
   12f48:	9303      	str	r3, [sp, #12]
  while (_is_digit(**str)) {
   12f4a:	e7e6      	b.n	12f1a <_atoi(char const**)+0x16>
  }
  return i;
   12f4c:	9c03      	ldr	r4, [sp, #12]
   12f4e:	462b      	mov	r3, r5
   12f50:	4619      	mov	r1, r3
   12f52:	4803      	ldr	r0, [pc, #12]	; (12f60 <_atoi(char const**)+0x5c>)
   12f54:	f7ff fe70 	bl	12c38 <__cyg_profile_func_exit>
   12f58:	4623      	mov	r3, r4
}
   12f5a:	4618      	mov	r0, r3
   12f5c:	b005      	add	sp, #20
   12f5e:	bd30      	pop	{r4, r5, pc}
   12f60:	00012f05 	.word	0x00012f05

00012f64 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)>:


// internal itoa format
static size_t _ntoa_format(out_fct_type out, char* buffer, size_t idx, size_t maxlen, char* buf, size_t len, bool negative, unsigned int base, unsigned int prec, unsigned int width, unsigned int flags)
{
   12f64:	b530      	push	{r4, r5, lr}
   12f66:	b089      	sub	sp, #36	; 0x24
   12f68:	4675      	mov	r5, lr
   12f6a:	9003      	str	r0, [sp, #12]
   12f6c:	9102      	str	r1, [sp, #8]
   12f6e:	9201      	str	r2, [sp, #4]
   12f70:	9300      	str	r3, [sp, #0]
   12f72:	462b      	mov	r3, r5
   12f74:	4619      	mov	r1, r3
   12f76:	4891      	ldr	r0, [pc, #580]	; (131bc <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x258>)
   12f78:	f7ff fe4a 	bl	12c10 <__cyg_profile_func_enter>
  const size_t start_idx = idx;
   12f7c:	9b01      	ldr	r3, [sp, #4]
   12f7e:	9305      	str	r3, [sp, #20]

  // pad leading zeros
  while (!(flags & FLAGS_LEFT) && (len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
   12f80:	9b12      	ldr	r3, [sp, #72]	; 0x48
   12f82:	f003 0302 	and.w	r3, r3, #2
   12f86:	2b00      	cmp	r3, #0
   12f88:	d10e      	bne.n	12fa8 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x44>
   12f8a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   12f8c:	9b10      	ldr	r3, [sp, #64]	; 0x40
   12f8e:	429a      	cmp	r2, r3
   12f90:	d20a      	bcs.n	12fa8 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x44>
   12f92:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   12f94:	2b1f      	cmp	r3, #31
   12f96:	d807      	bhi.n	12fa8 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x44>
    buf[len++] = '0';
   12f98:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   12f9a:	1c5a      	adds	r2, r3, #1
   12f9c:	920d      	str	r2, [sp, #52]	; 0x34
   12f9e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   12fa0:	4413      	add	r3, r2
   12fa2:	2230      	movs	r2, #48	; 0x30
   12fa4:	701a      	strb	r2, [r3, #0]
  while (!(flags & FLAGS_LEFT) && (len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
   12fa6:	e7eb      	b.n	12f80 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1c>
  }
  while (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
   12fa8:	9b12      	ldr	r3, [sp, #72]	; 0x48
   12faa:	f003 0302 	and.w	r3, r3, #2
   12fae:	2b00      	cmp	r3, #0
   12fb0:	d113      	bne.n	12fda <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x76>
   12fb2:	9b12      	ldr	r3, [sp, #72]	; 0x48
   12fb4:	f003 0301 	and.w	r3, r3, #1
   12fb8:	2b00      	cmp	r3, #0
   12fba:	d00e      	beq.n	12fda <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x76>
   12fbc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   12fbe:	9b11      	ldr	r3, [sp, #68]	; 0x44
   12fc0:	429a      	cmp	r2, r3
   12fc2:	d20a      	bcs.n	12fda <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x76>
   12fc4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   12fc6:	2b1f      	cmp	r3, #31
   12fc8:	d807      	bhi.n	12fda <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x76>
    buf[len++] = '0';
   12fca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   12fcc:	1c5a      	adds	r2, r3, #1
   12fce:	920d      	str	r2, [sp, #52]	; 0x34
   12fd0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   12fd2:	4413      	add	r3, r2
   12fd4:	2230      	movs	r2, #48	; 0x30
   12fd6:	701a      	strb	r2, [r3, #0]
  while (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
   12fd8:	e7e6      	b.n	12fa8 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x44>
  }

  // handle hash
  if (flags & FLAGS_HASH) {
   12fda:	9b12      	ldr	r3, [sp, #72]	; 0x48
   12fdc:	f003 0310 	and.w	r3, r3, #16
   12fe0:	2b00      	cmp	r3, #0
   12fe2:	d058      	beq.n	13096 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x132>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
   12fe4:	9b12      	ldr	r3, [sp, #72]	; 0x48
   12fe6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
   12fea:	2b00      	cmp	r3, #0
   12fec:	d116      	bne.n	1301c <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xb8>
   12fee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   12ff0:	2b00      	cmp	r3, #0
   12ff2:	d013      	beq.n	1301c <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xb8>
   12ff4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   12ff6:	9b10      	ldr	r3, [sp, #64]	; 0x40
   12ff8:	429a      	cmp	r2, r3
   12ffa:	d003      	beq.n	13004 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xa0>
   12ffc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   12ffe:	9b11      	ldr	r3, [sp, #68]	; 0x44
   13000:	429a      	cmp	r2, r3
   13002:	d10b      	bne.n	1301c <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xb8>
      len--;
   13004:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   13006:	3b01      	subs	r3, #1
   13008:	930d      	str	r3, [sp, #52]	; 0x34
      if (len && (base == 16U)) {
   1300a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1300c:	2b00      	cmp	r3, #0
   1300e:	d005      	beq.n	1301c <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xb8>
   13010:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   13012:	2b10      	cmp	r3, #16
   13014:	d102      	bne.n	1301c <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xb8>
        len--;
   13016:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   13018:	3b01      	subs	r3, #1
   1301a:	930d      	str	r3, [sp, #52]	; 0x34
      }
    }
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
   1301c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1301e:	2b10      	cmp	r3, #16
   13020:	d10f      	bne.n	13042 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xde>
   13022:	9b12      	ldr	r3, [sp, #72]	; 0x48
   13024:	f003 0320 	and.w	r3, r3, #32
   13028:	2b00      	cmp	r3, #0
   1302a:	d10a      	bne.n	13042 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xde>
   1302c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1302e:	2b1f      	cmp	r3, #31
   13030:	d807      	bhi.n	13042 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xde>
      buf[len++] = 'x';
   13032:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   13034:	1c5a      	adds	r2, r3, #1
   13036:	920d      	str	r2, [sp, #52]	; 0x34
   13038:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1303a:	4413      	add	r3, r2
   1303c:	2278      	movs	r2, #120	; 0x78
   1303e:	701a      	strb	r2, [r3, #0]
   13040:	e01f      	b.n	13082 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x11e>
    }
    else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
   13042:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   13044:	2b10      	cmp	r3, #16
   13046:	d10f      	bne.n	13068 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x104>
   13048:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1304a:	f003 0320 	and.w	r3, r3, #32
   1304e:	2b00      	cmp	r3, #0
   13050:	d00a      	beq.n	13068 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x104>
   13052:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   13054:	2b1f      	cmp	r3, #31
   13056:	d807      	bhi.n	13068 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x104>
      buf[len++] = 'X';
   13058:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1305a:	1c5a      	adds	r2, r3, #1
   1305c:	920d      	str	r2, [sp, #52]	; 0x34
   1305e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   13060:	4413      	add	r3, r2
   13062:	2258      	movs	r2, #88	; 0x58
   13064:	701a      	strb	r2, [r3, #0]
   13066:	e00c      	b.n	13082 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x11e>
    }
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
   13068:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1306a:	2b02      	cmp	r3, #2
   1306c:	d109      	bne.n	13082 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x11e>
   1306e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   13070:	2b1f      	cmp	r3, #31
   13072:	d806      	bhi.n	13082 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x11e>
      buf[len++] = 'b';
   13074:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   13076:	1c5a      	adds	r2, r3, #1
   13078:	920d      	str	r2, [sp, #52]	; 0x34
   1307a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1307c:	4413      	add	r3, r2
   1307e:	2262      	movs	r2, #98	; 0x62
   13080:	701a      	strb	r2, [r3, #0]
    }
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
   13082:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   13084:	2b1f      	cmp	r3, #31
   13086:	d806      	bhi.n	13096 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x132>
      buf[len++] = '0';
   13088:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1308a:	1c5a      	adds	r2, r3, #1
   1308c:	920d      	str	r2, [sp, #52]	; 0x34
   1308e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   13090:	4413      	add	r3, r2
   13092:	2230      	movs	r2, #48	; 0x30
   13094:	701a      	strb	r2, [r3, #0]
    }
  }

  // handle sign
  if (len && (len == width) && (negative || (flags & FLAGS_PLUS) || (flags & FLAGS_SPACE))) {
   13096:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   13098:	2b00      	cmp	r3, #0
   1309a:	d014      	beq.n	130c6 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x162>
   1309c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   1309e:	9b11      	ldr	r3, [sp, #68]	; 0x44
   130a0:	429a      	cmp	r2, r3
   130a2:	d110      	bne.n	130c6 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x162>
   130a4:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
   130a8:	2b00      	cmp	r3, #0
   130aa:	d109      	bne.n	130c0 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x15c>
   130ac:	9b12      	ldr	r3, [sp, #72]	; 0x48
   130ae:	f003 0304 	and.w	r3, r3, #4
   130b2:	2b00      	cmp	r3, #0
   130b4:	d104      	bne.n	130c0 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x15c>
   130b6:	9b12      	ldr	r3, [sp, #72]	; 0x48
   130b8:	f003 0308 	and.w	r3, r3, #8
   130bc:	2b00      	cmp	r3, #0
   130be:	d002      	beq.n	130c6 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x162>
    len--;
   130c0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   130c2:	3b01      	subs	r3, #1
   130c4:	930d      	str	r3, [sp, #52]	; 0x34
  }
  if (len < PRINTF_NTOA_BUFFER_SIZE) {
   130c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   130c8:	2b1f      	cmp	r3, #31
   130ca:	d824      	bhi.n	13116 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1b2>
    if (negative) {
   130cc:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
   130d0:	2b00      	cmp	r3, #0
   130d2:	d007      	beq.n	130e4 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x180>
      buf[len++] = '-';
   130d4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   130d6:	1c5a      	adds	r2, r3, #1
   130d8:	920d      	str	r2, [sp, #52]	; 0x34
   130da:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   130dc:	4413      	add	r3, r2
   130de:	222d      	movs	r2, #45	; 0x2d
   130e0:	701a      	strb	r2, [r3, #0]
   130e2:	e018      	b.n	13116 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1b2>
    }
    else if (flags & FLAGS_PLUS) {
   130e4:	9b12      	ldr	r3, [sp, #72]	; 0x48
   130e6:	f003 0304 	and.w	r3, r3, #4
   130ea:	2b00      	cmp	r3, #0
   130ec:	d007      	beq.n	130fe <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x19a>
      buf[len++] = '+';  // ignore the space if the '+' exists
   130ee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   130f0:	1c5a      	adds	r2, r3, #1
   130f2:	920d      	str	r2, [sp, #52]	; 0x34
   130f4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   130f6:	4413      	add	r3, r2
   130f8:	222b      	movs	r2, #43	; 0x2b
   130fa:	701a      	strb	r2, [r3, #0]
   130fc:	e00b      	b.n	13116 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1b2>
    }
    else if (flags & FLAGS_SPACE) {
   130fe:	9b12      	ldr	r3, [sp, #72]	; 0x48
   13100:	f003 0308 	and.w	r3, r3, #8
   13104:	2b00      	cmp	r3, #0
   13106:	d006      	beq.n	13116 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1b2>
      buf[len++] = ' ';
   13108:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1310a:	1c5a      	adds	r2, r3, #1
   1310c:	920d      	str	r2, [sp, #52]	; 0x34
   1310e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   13110:	4413      	add	r3, r2
   13112:	2220      	movs	r2, #32
   13114:	701a      	strb	r2, [r3, #0]
    }
  }

  // pad spaces up to given width
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
   13116:	9b12      	ldr	r3, [sp, #72]	; 0x48
   13118:	f003 0302 	and.w	r3, r3, #2
   1311c:	2b00      	cmp	r3, #0
   1311e:	d116      	bne.n	1314e <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1ea>
   13120:	9b12      	ldr	r3, [sp, #72]	; 0x48
   13122:	f003 0301 	and.w	r3, r3, #1
   13126:	2b00      	cmp	r3, #0
   13128:	d111      	bne.n	1314e <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1ea>
    for (size_t i = len; i < width; i++) {
   1312a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1312c:	9307      	str	r3, [sp, #28]
   1312e:	9a07      	ldr	r2, [sp, #28]
   13130:	9b11      	ldr	r3, [sp, #68]	; 0x44
   13132:	429a      	cmp	r2, r3
   13134:	d20b      	bcs.n	1314e <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1ea>
      out(' ', buffer, idx++, maxlen);
   13136:	9a01      	ldr	r2, [sp, #4]
   13138:	1c53      	adds	r3, r2, #1
   1313a:	9301      	str	r3, [sp, #4]
   1313c:	9c03      	ldr	r4, [sp, #12]
   1313e:	9b00      	ldr	r3, [sp, #0]
   13140:	9902      	ldr	r1, [sp, #8]
   13142:	2020      	movs	r0, #32
   13144:	47a0      	blx	r4
    for (size_t i = len; i < width; i++) {
   13146:	9b07      	ldr	r3, [sp, #28]
   13148:	3301      	adds	r3, #1
   1314a:	9307      	str	r3, [sp, #28]
   1314c:	e7ef      	b.n	1312e <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1ca>
    }
  }

  // reverse string
  for (size_t i = 0U; i < len; i++) {
   1314e:	2300      	movs	r3, #0
   13150:	9306      	str	r3, [sp, #24]
   13152:	9a06      	ldr	r2, [sp, #24]
   13154:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   13156:	429a      	cmp	r2, r3
   13158:	d211      	bcs.n	1317e <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x21a>
    out(buf[len - i - 1U], buffer, idx++, maxlen);
   1315a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   1315c:	9b06      	ldr	r3, [sp, #24]
   1315e:	1ad3      	subs	r3, r2, r3
   13160:	3b01      	subs	r3, #1
   13162:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   13164:	4413      	add	r3, r2
   13166:	7818      	ldrb	r0, [r3, #0]
   13168:	9a01      	ldr	r2, [sp, #4]
   1316a:	1c53      	adds	r3, r2, #1
   1316c:	9301      	str	r3, [sp, #4]
   1316e:	9c03      	ldr	r4, [sp, #12]
   13170:	9b00      	ldr	r3, [sp, #0]
   13172:	9902      	ldr	r1, [sp, #8]
   13174:	47a0      	blx	r4
  for (size_t i = 0U; i < len; i++) {
   13176:	9b06      	ldr	r3, [sp, #24]
   13178:	3301      	adds	r3, #1
   1317a:	9306      	str	r3, [sp, #24]
   1317c:	e7e9      	b.n	13152 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1ee>
  }

  // append pad spaces up to given width
  if (flags & FLAGS_LEFT) {
   1317e:	9b12      	ldr	r3, [sp, #72]	; 0x48
   13180:	f003 0302 	and.w	r3, r3, #2
   13184:	2b00      	cmp	r3, #0
   13186:	d00e      	beq.n	131a6 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x242>
    while (idx - start_idx < width) {
   13188:	9a01      	ldr	r2, [sp, #4]
   1318a:	9b05      	ldr	r3, [sp, #20]
   1318c:	1ad3      	subs	r3, r2, r3
   1318e:	9a11      	ldr	r2, [sp, #68]	; 0x44
   13190:	429a      	cmp	r2, r3
   13192:	d908      	bls.n	131a6 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x242>
      out(' ', buffer, idx++, maxlen);
   13194:	9a01      	ldr	r2, [sp, #4]
   13196:	1c53      	adds	r3, r2, #1
   13198:	9301      	str	r3, [sp, #4]
   1319a:	9c03      	ldr	r4, [sp, #12]
   1319c:	9b00      	ldr	r3, [sp, #0]
   1319e:	9902      	ldr	r1, [sp, #8]
   131a0:	2020      	movs	r0, #32
   131a2:	47a0      	blx	r4
    while (idx - start_idx < width) {
   131a4:	e7f0      	b.n	13188 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x224>
    }
  }

  return idx;
   131a6:	9c01      	ldr	r4, [sp, #4]
   131a8:	462b      	mov	r3, r5
   131aa:	4619      	mov	r1, r3
   131ac:	4803      	ldr	r0, [pc, #12]	; (131bc <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x258>)
   131ae:	f7ff fd43 	bl	12c38 <__cyg_profile_func_exit>
   131b2:	4623      	mov	r3, r4
}
   131b4:	4618      	mov	r0, r3
   131b6:	b009      	add	sp, #36	; 0x24
   131b8:	bd30      	pop	{r4, r5, pc}
   131ba:	bf00      	nop
   131bc:	00012f65 	.word	0x00012f65

000131c0 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)>:


// internal itoa for 'long' type
static size_t _ntoa_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long value, bool negative, unsigned long base, unsigned int prec, unsigned int width, unsigned int flags)
{
   131c0:	b530      	push	{r4, r5, lr}
   131c2:	b097      	sub	sp, #92	; 0x5c
   131c4:	4674      	mov	r4, lr
   131c6:	900b      	str	r0, [sp, #44]	; 0x2c
   131c8:	910a      	str	r1, [sp, #40]	; 0x28
   131ca:	9209      	str	r2, [sp, #36]	; 0x24
   131cc:	9308      	str	r3, [sp, #32]
   131ce:	4623      	mov	r3, r4
   131d0:	4619      	mov	r1, r3
   131d2:	4833      	ldr	r0, [pc, #204]	; (132a0 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0xe0>)
   131d4:	f7ff fd1c 	bl	12c10 <__cyg_profile_func_enter>
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
   131d8:	2300      	movs	r3, #0
   131da:	9315      	str	r3, [sp, #84]	; 0x54

  // no hash for 0 values
  if (!value) {
   131dc:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   131de:	2b00      	cmp	r3, #0
   131e0:	d103      	bne.n	131ea <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x2a>
    flags &= ~FLAGS_HASH;
   131e2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   131e4:	f023 0310 	bic.w	r3, r3, #16
   131e8:	931f      	str	r3, [sp, #124]	; 0x7c
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
   131ea:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   131ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
   131f0:	2b00      	cmp	r3, #0
   131f2:	d002      	beq.n	131fa <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x3a>
   131f4:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   131f6:	2b00      	cmp	r3, #0
   131f8:	d033      	beq.n	13262 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0xa2>
    do {
      const char digit = (char)(value % base);
   131fa:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   131fc:	9a1c      	ldr	r2, [sp, #112]	; 0x70
   131fe:	fbb3 f2f2 	udiv	r2, r3, r2
   13202:	991c      	ldr	r1, [sp, #112]	; 0x70
   13204:	fb01 f202 	mul.w	r2, r1, r2
   13208:	1a9b      	subs	r3, r3, r2
   1320a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
   1320e:	f89d 3053 	ldrb.w	r3, [sp, #83]	; 0x53
   13212:	2b09      	cmp	r3, #9
   13214:	d804      	bhi.n	13220 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x60>
   13216:	f89d 3053 	ldrb.w	r3, [sp, #83]	; 0x53
   1321a:	3330      	adds	r3, #48	; 0x30
   1321c:	b2da      	uxtb	r2, r3
   1321e:	e00d      	b.n	1323c <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x7c>
   13220:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   13222:	f003 0320 	and.w	r3, r3, #32
   13226:	2b00      	cmp	r3, #0
   13228:	d001      	beq.n	1322e <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x6e>
   1322a:	2241      	movs	r2, #65	; 0x41
   1322c:	e000      	b.n	13230 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x70>
   1322e:	2261      	movs	r2, #97	; 0x61
   13230:	f89d 3053 	ldrb.w	r3, [sp, #83]	; 0x53
   13234:	4413      	add	r3, r2
   13236:	b2db      	uxtb	r3, r3
   13238:	3b0a      	subs	r3, #10
   1323a:	b2da      	uxtb	r2, r3
   1323c:	9b15      	ldr	r3, [sp, #84]	; 0x54
   1323e:	1c59      	adds	r1, r3, #1
   13240:	9115      	str	r1, [sp, #84]	; 0x54
   13242:	a916      	add	r1, sp, #88	; 0x58
   13244:	440b      	add	r3, r1
   13246:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
   1324a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   1324c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
   1324e:	fbb2 f3f3 	udiv	r3, r2, r3
   13252:	931a      	str	r3, [sp, #104]	; 0x68
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
   13254:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   13256:	2b00      	cmp	r3, #0
   13258:	d003      	beq.n	13262 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0xa2>
   1325a:	9b15      	ldr	r3, [sp, #84]	; 0x54
   1325c:	2b1f      	cmp	r3, #31
   1325e:	d800      	bhi.n	13262 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0xa2>
    do {
   13260:	e7cb      	b.n	131fa <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x3a>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
   13262:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   13264:	9306      	str	r3, [sp, #24]
   13266:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   13268:	9305      	str	r3, [sp, #20]
   1326a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   1326c:	9304      	str	r3, [sp, #16]
   1326e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
   13270:	9303      	str	r3, [sp, #12]
   13272:	f89d 306c 	ldrb.w	r3, [sp, #108]	; 0x6c
   13276:	9302      	str	r3, [sp, #8]
   13278:	9b15      	ldr	r3, [sp, #84]	; 0x54
   1327a:	9301      	str	r3, [sp, #4]
   1327c:	ab0c      	add	r3, sp, #48	; 0x30
   1327e:	9300      	str	r3, [sp, #0]
   13280:	9b08      	ldr	r3, [sp, #32]
   13282:	9a09      	ldr	r2, [sp, #36]	; 0x24
   13284:	990a      	ldr	r1, [sp, #40]	; 0x28
   13286:	980b      	ldr	r0, [sp, #44]	; 0x2c
   13288:	f7ff fe6c 	bl	12f64 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)>
   1328c:	4605      	mov	r5, r0
   1328e:	4623      	mov	r3, r4
   13290:	4619      	mov	r1, r3
   13292:	4803      	ldr	r0, [pc, #12]	; (132a0 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0xe0>)
   13294:	f7ff fcd0 	bl	12c38 <__cyg_profile_func_exit>
   13298:	462b      	mov	r3, r5
}
   1329a:	4618      	mov	r0, r3
   1329c:	b017      	add	sp, #92	; 0x5c
   1329e:	bd30      	pop	{r4, r5, pc}
   132a0:	000131c1 	.word	0x000131c1

000132a4 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)>:


// internal itoa for 'long long' type
#if defined(PRINTF_SUPPORT_LONG_LONG)
static size_t _ntoa_long_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long long value, bool negative, unsigned long long base, unsigned int prec, unsigned int width, unsigned int flags)
{
   132a4:	b530      	push	{r4, r5, lr}
   132a6:	b097      	sub	sp, #92	; 0x5c
   132a8:	4675      	mov	r5, lr
   132aa:	900b      	str	r0, [sp, #44]	; 0x2c
   132ac:	910a      	str	r1, [sp, #40]	; 0x28
   132ae:	9209      	str	r2, [sp, #36]	; 0x24
   132b0:	9308      	str	r3, [sp, #32]
   132b2:	462b      	mov	r3, r5
   132b4:	4619      	mov	r1, r3
   132b6:	4837      	ldr	r0, [pc, #220]	; (13394 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0xf0>)
   132b8:	f7ff fcaa 	bl	12c10 <__cyg_profile_func_enter>
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
   132bc:	2300      	movs	r3, #0
   132be:	9315      	str	r3, [sp, #84]	; 0x54

  // no hash for 0 values
  if (!value) {
   132c0:	e9dd 341a 	ldrd	r3, r4, [sp, #104]	; 0x68
   132c4:	4323      	orrs	r3, r4
   132c6:	d103      	bne.n	132d0 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0x2c>
    flags &= ~FLAGS_HASH;
   132c8:	9b22      	ldr	r3, [sp, #136]	; 0x88
   132ca:	f023 0310 	bic.w	r3, r3, #16
   132ce:	9322      	str	r3, [sp, #136]	; 0x88
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
   132d0:	9b22      	ldr	r3, [sp, #136]	; 0x88
   132d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
   132d6:	2b00      	cmp	r3, #0
   132d8:	d003      	beq.n	132e2 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0x3e>
   132da:	e9dd 341a 	ldrd	r3, r4, [sp, #104]	; 0x68
   132de:	4323      	orrs	r3, r4
   132e0:	d039      	beq.n	13356 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0xb2>
    do {
      const char digit = (char)(value % base);
   132e2:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
   132e6:	e9dd 231e 	ldrd	r2, r3, [sp, #120]	; 0x78
   132ea:	f003 fde7 	bl	16ebc <__aeabi_uldivmod>
   132ee:	461c      	mov	r4, r3
   132f0:	4613      	mov	r3, r2
   132f2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
   132f6:	f89d 3053 	ldrb.w	r3, [sp, #83]	; 0x53
   132fa:	2b09      	cmp	r3, #9
   132fc:	d804      	bhi.n	13308 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0x64>
   132fe:	f89d 3053 	ldrb.w	r3, [sp, #83]	; 0x53
   13302:	3330      	adds	r3, #48	; 0x30
   13304:	b2da      	uxtb	r2, r3
   13306:	e00d      	b.n	13324 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0x80>
   13308:	9b22      	ldr	r3, [sp, #136]	; 0x88
   1330a:	f003 0320 	and.w	r3, r3, #32
   1330e:	2b00      	cmp	r3, #0
   13310:	d001      	beq.n	13316 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0x72>
   13312:	2241      	movs	r2, #65	; 0x41
   13314:	e000      	b.n	13318 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0x74>
   13316:	2261      	movs	r2, #97	; 0x61
   13318:	f89d 3053 	ldrb.w	r3, [sp, #83]	; 0x53
   1331c:	4413      	add	r3, r2
   1331e:	b2db      	uxtb	r3, r3
   13320:	3b0a      	subs	r3, #10
   13322:	b2da      	uxtb	r2, r3
   13324:	9b15      	ldr	r3, [sp, #84]	; 0x54
   13326:	1c59      	adds	r1, r3, #1
   13328:	9115      	str	r1, [sp, #84]	; 0x54
   1332a:	a916      	add	r1, sp, #88	; 0x58
   1332c:	440b      	add	r3, r1
   1332e:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
   13332:	e9dd 231e 	ldrd	r2, r3, [sp, #120]	; 0x78
   13336:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
   1333a:	f003 fdbf 	bl	16ebc <__aeabi_uldivmod>
   1333e:	4603      	mov	r3, r0
   13340:	460c      	mov	r4, r1
   13342:	e9cd 341a 	strd	r3, r4, [sp, #104]	; 0x68
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
   13346:	e9dd 341a 	ldrd	r3, r4, [sp, #104]	; 0x68
   1334a:	4323      	orrs	r3, r4
   1334c:	d003      	beq.n	13356 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0xb2>
   1334e:	9b15      	ldr	r3, [sp, #84]	; 0x54
   13350:	2b1f      	cmp	r3, #31
   13352:	d800      	bhi.n	13356 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0xb2>
    do {
   13354:	e7c5      	b.n	132e2 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0x3e>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
   13356:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   13358:	9a22      	ldr	r2, [sp, #136]	; 0x88
   1335a:	9206      	str	r2, [sp, #24]
   1335c:	9a21      	ldr	r2, [sp, #132]	; 0x84
   1335e:	9205      	str	r2, [sp, #20]
   13360:	9a20      	ldr	r2, [sp, #128]	; 0x80
   13362:	9204      	str	r2, [sp, #16]
   13364:	9303      	str	r3, [sp, #12]
   13366:	f89d 3070 	ldrb.w	r3, [sp, #112]	; 0x70
   1336a:	9302      	str	r3, [sp, #8]
   1336c:	9b15      	ldr	r3, [sp, #84]	; 0x54
   1336e:	9301      	str	r3, [sp, #4]
   13370:	ab0c      	add	r3, sp, #48	; 0x30
   13372:	9300      	str	r3, [sp, #0]
   13374:	9b08      	ldr	r3, [sp, #32]
   13376:	9a09      	ldr	r2, [sp, #36]	; 0x24
   13378:	990a      	ldr	r1, [sp, #40]	; 0x28
   1337a:	980b      	ldr	r0, [sp, #44]	; 0x2c
   1337c:	f7ff fdf2 	bl	12f64 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)>
   13380:	4604      	mov	r4, r0
   13382:	462b      	mov	r3, r5
   13384:	4619      	mov	r1, r3
   13386:	4803      	ldr	r0, [pc, #12]	; (13394 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0xf0>)
   13388:	f7ff fc56 	bl	12c38 <__cyg_profile_func_exit>
   1338c:	4623      	mov	r3, r4
}
   1338e:	4618      	mov	r0, r3
   13390:	b017      	add	sp, #92	; 0x5c
   13392:	bd30      	pop	{r4, r5, pc}
   13394:	000132a5 	.word	0x000132a5

00013398 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)>:
#endif  // PRINTF_SUPPORT_LONG_LONG


#if defined(PRINTF_SUPPORT_FLOAT)
static size_t _ftoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value_param, unsigned int prec, unsigned int width, unsigned int flags)
{
   13398:	b530      	push	{r4, r5, lr}
   1339a:	b09b      	sub	sp, #108	; 0x6c
   1339c:	4675      	mov	r5, lr
   1339e:	9005      	str	r0, [sp, #20]
   133a0:	9104      	str	r1, [sp, #16]
   133a2:	9203      	str	r2, [sp, #12]
   133a4:	9302      	str	r3, [sp, #8]
   133a6:	ed8d 0b00 	vstr	d0, [sp]
   133aa:	462b      	mov	r3, r5
   133ac:	4619      	mov	r1, r3
   133ae:	48b7      	ldr	r0, [pc, #732]	; (1368c <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x2f4>)
   133b0:	f7ff fc2e 	bl	12c10 <__cyg_profile_func_enter>
  const size_t start_idx = idx;
   133b4:	9b03      	ldr	r3, [sp, #12]
   133b6:	9311      	str	r3, [sp, #68]	; 0x44

  float value = static_cast<float>(value_param);
   133b8:	e9dd 0100 	ldrd	r0, r1, [sp]
   133bc:	f003 fd2e 	bl	16e1c <__aeabi_d2f>
   133c0:	4603      	mov	r3, r0
   133c2:	9319      	str	r3, [sp, #100]	; 0x64

  char buf[PRINTF_FTOA_BUFFER_SIZE];
  size_t len  = 0U;
   133c4:	2300      	movs	r3, #0
   133c6:	9318      	str	r3, [sp, #96]	; 0x60
  float diff = 0.0;
   133c8:	f04f 0300 	mov.w	r3, #0
   133cc:	9310      	str	r3, [sp, #64]	; 0x40

  // if input is larger than thres_max, revert to exponential
  const float thres_max = (float)0x7FFFFFFF;
   133ce:	f04f 439e 	mov.w	r3, #1325400064	; 0x4f000000
   133d2:	930f      	str	r3, [sp, #60]	; 0x3c

  // powers of 10
  static const float pow10[] = { 1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000 };

  // test for negative
  bool negative = false;
   133d4:	2300      	movs	r3, #0
   133d6:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
  if (value < 0) {
   133da:	eddd 7a19 	vldr	s15, [sp, #100]	; 0x64
   133de:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   133e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   133e6:	d50a      	bpl.n	133fe <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x66>
    negative = true;
   133e8:	2301      	movs	r3, #1
   133ea:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
    value = 0 - value;
   133ee:	ed9f 7aa8 	vldr	s14, [pc, #672]	; 13690 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x2f8>
   133f2:	eddd 7a19 	vldr	s15, [sp, #100]	; 0x64
   133f6:	ee77 7a67 	vsub.f32	s15, s14, s15
   133fa:	edcd 7a19 	vstr	s15, [sp, #100]	; 0x64
  }

  // set default precision to 6, if not set explicitly
  if (!(flags & FLAGS_PRECISION)) {
   133fe:	9b20      	ldr	r3, [sp, #128]	; 0x80
   13400:	f403 6380 	and.w	r3, r3, #1024	; 0x400
   13404:	2b00      	cmp	r3, #0
   13406:	d101      	bne.n	1340c <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x74>
    prec = 6U;
   13408:	2306      	movs	r3, #6
   1340a:	931e      	str	r3, [sp, #120]	; 0x78
  }
  // limit precision to 9, cause a prec >= 10 can lead to overflow errors
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
   1340c:	9b18      	ldr	r3, [sp, #96]	; 0x60
   1340e:	2b1f      	cmp	r3, #31
   13410:	d80e      	bhi.n	13430 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x98>
   13412:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   13414:	2b09      	cmp	r3, #9
   13416:	d90b      	bls.n	13430 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x98>
    buf[len++] = '0';
   13418:	9b18      	ldr	r3, [sp, #96]	; 0x60
   1341a:	1c5a      	adds	r2, r3, #1
   1341c:	9218      	str	r2, [sp, #96]	; 0x60
   1341e:	aa1a      	add	r2, sp, #104	; 0x68
   13420:	4413      	add	r3, r2
   13422:	2230      	movs	r2, #48	; 0x30
   13424:	f803 2c50 	strb.w	r2, [r3, #-80]
    prec--;
   13428:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   1342a:	3b01      	subs	r3, #1
   1342c:	931e      	str	r3, [sp, #120]	; 0x78
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
   1342e:	e7ed      	b.n	1340c <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x74>
  }

  int whole = (int)value;
   13430:	eddd 7a19 	vldr	s15, [sp, #100]	; 0x64
   13434:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   13438:	ee17 3a90 	vmov	r3, s15
   1343c:	9316      	str	r3, [sp, #88]	; 0x58
  float tmp = (value - whole) * pow10[prec];
   1343e:	9b16      	ldr	r3, [sp, #88]	; 0x58
   13440:	ee07 3a90 	vmov	s15, r3
   13444:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   13448:	ed9d 7a19 	vldr	s14, [sp, #100]	; 0x64
   1344c:	ee37 7a67 	vsub.f32	s14, s14, s15
   13450:	4a90      	ldr	r2, [pc, #576]	; (13694 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x2fc>)
   13452:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   13454:	009b      	lsls	r3, r3, #2
   13456:	4413      	add	r3, r2
   13458:	edd3 7a00 	vldr	s15, [r3]
   1345c:	ee67 7a27 	vmul.f32	s15, s14, s15
   13460:	edcd 7a0e 	vstr	s15, [sp, #56]	; 0x38
  unsigned long frac = (unsigned long)tmp;
   13464:	eddd 7a0e 	vldr	s15, [sp, #56]	; 0x38
   13468:	eefc 7ae7 	vcvt.u32.f32	s15, s15
   1346c:	ee17 3a90 	vmov	r3, s15
   13470:	9315      	str	r3, [sp, #84]	; 0x54
  diff = tmp - frac;
   13472:	9b15      	ldr	r3, [sp, #84]	; 0x54
   13474:	ee07 3a90 	vmov	s15, r3
   13478:	eef8 7a67 	vcvt.f32.u32	s15, s15
   1347c:	ed9d 7a0e 	vldr	s14, [sp, #56]	; 0x38
   13480:	ee77 7a67 	vsub.f32	s15, s14, s15
   13484:	edcd 7a10 	vstr	s15, [sp, #64]	; 0x40

  if (diff > 0.5) {
   13488:	eddd 7a10 	vldr	s15, [sp, #64]	; 0x40
   1348c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
   13490:	eef4 7ac7 	vcmpe.f32	s15, s14
   13494:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   13498:	dd18      	ble.n	134cc <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x134>
    ++frac;
   1349a:	9b15      	ldr	r3, [sp, #84]	; 0x54
   1349c:	3301      	adds	r3, #1
   1349e:	9315      	str	r3, [sp, #84]	; 0x54
    // handle rollover, e.g. case 0.99 with prec 1 is 1.0
    if (frac >= pow10[prec]) {
   134a0:	9b15      	ldr	r3, [sp, #84]	; 0x54
   134a2:	ee07 3a90 	vmov	s15, r3
   134a6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
   134aa:	4a7a      	ldr	r2, [pc, #488]	; (13694 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x2fc>)
   134ac:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   134ae:	009b      	lsls	r3, r3, #2
   134b0:	4413      	add	r3, r2
   134b2:	edd3 7a00 	vldr	s15, [r3]
   134b6:	eeb4 7ae7 	vcmpe.f32	s14, s15
   134ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   134be:	db19      	blt.n	134f4 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x15c>
      frac = 0;
   134c0:	2300      	movs	r3, #0
   134c2:	9315      	str	r3, [sp, #84]	; 0x54
      ++whole;
   134c4:	9b16      	ldr	r3, [sp, #88]	; 0x58
   134c6:	3301      	adds	r3, #1
   134c8:	9316      	str	r3, [sp, #88]	; 0x58
   134ca:	e013      	b.n	134f4 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x15c>
    }
  }
  else if ((diff == 0.5) && ((frac == 0U) || (frac & 1U))) {
   134cc:	eddd 7a10 	vldr	s15, [sp, #64]	; 0x40
   134d0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
   134d4:	eef4 7a47 	vcmp.f32	s15, s14
   134d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   134dc:	d10a      	bne.n	134f4 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x15c>
   134de:	9b15      	ldr	r3, [sp, #84]	; 0x54
   134e0:	2b00      	cmp	r3, #0
   134e2:	d004      	beq.n	134ee <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x156>
   134e4:	9b15      	ldr	r3, [sp, #84]	; 0x54
   134e6:	f003 0301 	and.w	r3, r3, #1
   134ea:	2b00      	cmp	r3, #0
   134ec:	d002      	beq.n	134f4 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x15c>
    // if halfway, round up if odd, OR if last digit is 0
    ++frac;
   134ee:	9b15      	ldr	r3, [sp, #84]	; 0x54
   134f0:	3301      	adds	r3, #1
   134f2:	9315      	str	r3, [sp, #84]	; 0x54
  }

  // TBD: for very large numbers switch back to native sprintf for exponentials. Anyone want to write code to replace this?
  // Normal printf behavior is to print EVERY whole number digit which can be 100s of characters overflowing your buffers == bad
  if (value > thres_max) {
   134f4:	eddd 7a19 	vldr	s15, [sp, #100]	; 0x64
   134f8:	ed9f 7a67 	vldr	s14, [pc, #412]	; 13698 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x300>
   134fc:	eef4 7ac7 	vcmpe.f32	s15, s14
   13500:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   13504:	dd01      	ble.n	1350a <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x172>
    return 0U;
   13506:	2400      	movs	r4, #0
   13508:	e156      	b.n	137b8 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x420>
  }

  if (prec == 0U) {
   1350a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   1350c:	2b00      	cmp	r3, #0
   1350e:	d129      	bne.n	13564 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x1cc>
    diff = value - (float)whole;
   13510:	9b16      	ldr	r3, [sp, #88]	; 0x58
   13512:	ee07 3a90 	vmov	s15, r3
   13516:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   1351a:	ed9d 7a19 	vldr	s14, [sp, #100]	; 0x64
   1351e:	ee77 7a67 	vsub.f32	s15, s14, s15
   13522:	edcd 7a10 	vstr	s15, [sp, #64]	; 0x40
    if (diff > 0.5) {
   13526:	eddd 7a10 	vldr	s15, [sp, #64]	; 0x40
   1352a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
   1352e:	eef4 7ac7 	vcmpe.f32	s15, s14
   13532:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   13536:	dd03      	ble.n	13540 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x1a8>
      // greater than 0.5, round up, e.g. 1.6 -> 2
      ++whole;
   13538:	9b16      	ldr	r3, [sp, #88]	; 0x58
   1353a:	3301      	adds	r3, #1
   1353c:	9316      	str	r3, [sp, #88]	; 0x58
   1353e:	e05f      	b.n	13600 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x268>
    }
    else if ((diff == 0.5) && (whole & 1)) {
   13540:	eddd 7a10 	vldr	s15, [sp, #64]	; 0x40
   13544:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
   13548:	eef4 7a47 	vcmp.f32	s15, s14
   1354c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   13550:	d156      	bne.n	13600 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x268>
   13552:	9b16      	ldr	r3, [sp, #88]	; 0x58
   13554:	f003 0301 	and.w	r3, r3, #1
   13558:	2b00      	cmp	r3, #0
   1355a:	d051      	beq.n	13600 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x268>
      // exactly 0.5 and ODD, then round up
      // 1.5 -> 2, but 2.5 -> 2
      ++whole;
   1355c:	9b16      	ldr	r3, [sp, #88]	; 0x58
   1355e:	3301      	adds	r3, #1
   13560:	9316      	str	r3, [sp, #88]	; 0x58
   13562:	e04d      	b.n	13600 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x268>
    }
  }
  else {
    unsigned int count = prec;
   13564:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   13566:	9314      	str	r3, [sp, #80]	; 0x50
    // now do fractional part, as an unsigned number
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
   13568:	9b18      	ldr	r3, [sp, #96]	; 0x60
   1356a:	2b1f      	cmp	r3, #31
   1356c:	d827      	bhi.n	135be <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x226>
      --count;
   1356e:	9b14      	ldr	r3, [sp, #80]	; 0x50
   13570:	3b01      	subs	r3, #1
   13572:	9314      	str	r3, [sp, #80]	; 0x50
      buf[len++] = (char)(48U + (frac % 10U));
   13574:	9915      	ldr	r1, [sp, #84]	; 0x54
   13576:	4b49      	ldr	r3, [pc, #292]	; (1369c <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x304>)
   13578:	fba3 2301 	umull	r2, r3, r3, r1
   1357c:	08da      	lsrs	r2, r3, #3
   1357e:	4613      	mov	r3, r2
   13580:	009b      	lsls	r3, r3, #2
   13582:	4413      	add	r3, r2
   13584:	005b      	lsls	r3, r3, #1
   13586:	1aca      	subs	r2, r1, r3
   13588:	b2d3      	uxtb	r3, r2
   1358a:	3330      	adds	r3, #48	; 0x30
   1358c:	b2d9      	uxtb	r1, r3
   1358e:	9b18      	ldr	r3, [sp, #96]	; 0x60
   13590:	1c5a      	adds	r2, r3, #1
   13592:	9218      	str	r2, [sp, #96]	; 0x60
   13594:	aa1a      	add	r2, sp, #104	; 0x68
   13596:	4413      	add	r3, r2
   13598:	460a      	mov	r2, r1
   1359a:	f803 2c50 	strb.w	r2, [r3, #-80]
      if (!(frac /= 10U)) {
   1359e:	9b15      	ldr	r3, [sp, #84]	; 0x54
   135a0:	4a3e      	ldr	r2, [pc, #248]	; (1369c <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x304>)
   135a2:	fba2 2303 	umull	r2, r3, r2, r3
   135a6:	08db      	lsrs	r3, r3, #3
   135a8:	9315      	str	r3, [sp, #84]	; 0x54
   135aa:	9b15      	ldr	r3, [sp, #84]	; 0x54
   135ac:	2b00      	cmp	r3, #0
   135ae:	bf0c      	ite	eq
   135b0:	2301      	moveq	r3, #1
   135b2:	2300      	movne	r3, #0
   135b4:	b2db      	uxtb	r3, r3
   135b6:	2b00      	cmp	r3, #0
   135b8:	d100      	bne.n	135bc <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x224>
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
   135ba:	e7d5      	b.n	13568 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x1d0>
        break;
   135bc:	bf00      	nop
      }
    }
    // add extra 0s
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
   135be:	9b18      	ldr	r3, [sp, #96]	; 0x60
   135c0:	2b1f      	cmp	r3, #31
   135c2:	d806      	bhi.n	135d2 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x23a>
   135c4:	9b14      	ldr	r3, [sp, #80]	; 0x50
   135c6:	1e5a      	subs	r2, r3, #1
   135c8:	9214      	str	r2, [sp, #80]	; 0x50
   135ca:	2b00      	cmp	r3, #0
   135cc:	d001      	beq.n	135d2 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x23a>
   135ce:	2301      	movs	r3, #1
   135d0:	e000      	b.n	135d4 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x23c>
   135d2:	2300      	movs	r3, #0
   135d4:	2b00      	cmp	r3, #0
   135d6:	d008      	beq.n	135ea <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x252>
      buf[len++] = '0';
   135d8:	9b18      	ldr	r3, [sp, #96]	; 0x60
   135da:	1c5a      	adds	r2, r3, #1
   135dc:	9218      	str	r2, [sp, #96]	; 0x60
   135de:	aa1a      	add	r2, sp, #104	; 0x68
   135e0:	4413      	add	r3, r2
   135e2:	2230      	movs	r2, #48	; 0x30
   135e4:	f803 2c50 	strb.w	r2, [r3, #-80]
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
   135e8:	e7e9      	b.n	135be <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x226>
    }
    if (len < PRINTF_FTOA_BUFFER_SIZE) {
   135ea:	9b18      	ldr	r3, [sp, #96]	; 0x60
   135ec:	2b1f      	cmp	r3, #31
   135ee:	d807      	bhi.n	13600 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x268>
      // add decimal
      buf[len++] = '.';
   135f0:	9b18      	ldr	r3, [sp, #96]	; 0x60
   135f2:	1c5a      	adds	r2, r3, #1
   135f4:	9218      	str	r2, [sp, #96]	; 0x60
   135f6:	aa1a      	add	r2, sp, #104	; 0x68
   135f8:	4413      	add	r3, r2
   135fa:	222e      	movs	r2, #46	; 0x2e
   135fc:	f803 2c50 	strb.w	r2, [r3, #-80]
    }
  }

  // do whole part, number is reversed
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
   13600:	9b18      	ldr	r3, [sp, #96]	; 0x60
   13602:	2b1f      	cmp	r3, #31
   13604:	d828      	bhi.n	13658 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x2c0>
    buf[len++] = (char)(48 + (whole % 10));
   13606:	9a16      	ldr	r2, [sp, #88]	; 0x58
   13608:	4b25      	ldr	r3, [pc, #148]	; (136a0 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x308>)
   1360a:	fb83 1302 	smull	r1, r3, r3, r2
   1360e:	1099      	asrs	r1, r3, #2
   13610:	17d3      	asrs	r3, r2, #31
   13612:	1ac9      	subs	r1, r1, r3
   13614:	460b      	mov	r3, r1
   13616:	009b      	lsls	r3, r3, #2
   13618:	440b      	add	r3, r1
   1361a:	005b      	lsls	r3, r3, #1
   1361c:	1ad1      	subs	r1, r2, r3
   1361e:	b2cb      	uxtb	r3, r1
   13620:	3330      	adds	r3, #48	; 0x30
   13622:	b2d9      	uxtb	r1, r3
   13624:	9b18      	ldr	r3, [sp, #96]	; 0x60
   13626:	1c5a      	adds	r2, r3, #1
   13628:	9218      	str	r2, [sp, #96]	; 0x60
   1362a:	aa1a      	add	r2, sp, #104	; 0x68
   1362c:	4413      	add	r3, r2
   1362e:	460a      	mov	r2, r1
   13630:	f803 2c50 	strb.w	r2, [r3, #-80]
    if (!(whole /= 10)) {
   13634:	9b16      	ldr	r3, [sp, #88]	; 0x58
   13636:	4a1a      	ldr	r2, [pc, #104]	; (136a0 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x308>)
   13638:	fb82 1203 	smull	r1, r2, r2, r3
   1363c:	1092      	asrs	r2, r2, #2
   1363e:	17db      	asrs	r3, r3, #31
   13640:	1ad3      	subs	r3, r2, r3
   13642:	9316      	str	r3, [sp, #88]	; 0x58
   13644:	9b16      	ldr	r3, [sp, #88]	; 0x58
   13646:	2b00      	cmp	r3, #0
   13648:	bf0c      	ite	eq
   1364a:	2301      	moveq	r3, #1
   1364c:	2300      	movne	r3, #0
   1364e:	b2db      	uxtb	r3, r3
   13650:	2b00      	cmp	r3, #0
   13652:	d100      	bne.n	13656 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x2be>
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
   13654:	e7d4      	b.n	13600 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x268>
      break;
   13656:	bf00      	nop
    }
  }

  // pad leading zeros
  while (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
   13658:	9b20      	ldr	r3, [sp, #128]	; 0x80
   1365a:	f003 0302 	and.w	r3, r3, #2
   1365e:	2b00      	cmp	r3, #0
   13660:	d120      	bne.n	136a4 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x30c>
   13662:	9b20      	ldr	r3, [sp, #128]	; 0x80
   13664:	f003 0301 	and.w	r3, r3, #1
   13668:	2b00      	cmp	r3, #0
   1366a:	d01b      	beq.n	136a4 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x30c>
   1366c:	9a18      	ldr	r2, [sp, #96]	; 0x60
   1366e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   13670:	429a      	cmp	r2, r3
   13672:	d217      	bcs.n	136a4 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x30c>
   13674:	9b18      	ldr	r3, [sp, #96]	; 0x60
   13676:	2b1f      	cmp	r3, #31
   13678:	d814      	bhi.n	136a4 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x30c>
    buf[len++] = '0';
   1367a:	9b18      	ldr	r3, [sp, #96]	; 0x60
   1367c:	1c5a      	adds	r2, r3, #1
   1367e:	9218      	str	r2, [sp, #96]	; 0x60
   13680:	aa1a      	add	r2, sp, #104	; 0x68
   13682:	4413      	add	r3, r2
   13684:	2230      	movs	r2, #48	; 0x30
   13686:	f803 2c50 	strb.w	r2, [r3, #-80]
  while (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
   1368a:	e7e5      	b.n	13658 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x2c0>
   1368c:	00013399 	.word	0x00013399
   13690:	00000000 	.word	0x00000000
   13694:	00017ec0 	.word	0x00017ec0
   13698:	4f000000 	.word	0x4f000000
   1369c:	cccccccd 	.word	0xcccccccd
   136a0:	66666667 	.word	0x66666667
  }

  // handle sign
  if ((len == width) && (negative || (flags & FLAGS_PLUS) || (flags & FLAGS_SPACE))) {
   136a4:	9a18      	ldr	r2, [sp, #96]	; 0x60
   136a6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   136a8:	429a      	cmp	r2, r3
   136aa:	d110      	bne.n	136ce <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x336>
   136ac:	f89d 305f 	ldrb.w	r3, [sp, #95]	; 0x5f
   136b0:	2b00      	cmp	r3, #0
   136b2:	d109      	bne.n	136c8 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x330>
   136b4:	9b20      	ldr	r3, [sp, #128]	; 0x80
   136b6:	f003 0304 	and.w	r3, r3, #4
   136ba:	2b00      	cmp	r3, #0
   136bc:	d104      	bne.n	136c8 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x330>
   136be:	9b20      	ldr	r3, [sp, #128]	; 0x80
   136c0:	f003 0308 	and.w	r3, r3, #8
   136c4:	2b00      	cmp	r3, #0
   136c6:	d002      	beq.n	136ce <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x336>
    len--;
   136c8:	9b18      	ldr	r3, [sp, #96]	; 0x60
   136ca:	3b01      	subs	r3, #1
   136cc:	9318      	str	r3, [sp, #96]	; 0x60
  }
  if (len < PRINTF_FTOA_BUFFER_SIZE) {
   136ce:	9b18      	ldr	r3, [sp, #96]	; 0x60
   136d0:	2b1f      	cmp	r3, #31
   136d2:	d827      	bhi.n	13724 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x38c>
    if (negative) {
   136d4:	f89d 305f 	ldrb.w	r3, [sp, #95]	; 0x5f
   136d8:	2b00      	cmp	r3, #0
   136da:	d008      	beq.n	136ee <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x356>
      buf[len++] = '-';
   136dc:	9b18      	ldr	r3, [sp, #96]	; 0x60
   136de:	1c5a      	adds	r2, r3, #1
   136e0:	9218      	str	r2, [sp, #96]	; 0x60
   136e2:	aa1a      	add	r2, sp, #104	; 0x68
   136e4:	4413      	add	r3, r2
   136e6:	222d      	movs	r2, #45	; 0x2d
   136e8:	f803 2c50 	strb.w	r2, [r3, #-80]
   136ec:	e01a      	b.n	13724 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x38c>
    }
    else if (flags & FLAGS_PLUS) {
   136ee:	9b20      	ldr	r3, [sp, #128]	; 0x80
   136f0:	f003 0304 	and.w	r3, r3, #4
   136f4:	2b00      	cmp	r3, #0
   136f6:	d008      	beq.n	1370a <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x372>
      buf[len++] = '+';  // ignore the space if the '+' exists
   136f8:	9b18      	ldr	r3, [sp, #96]	; 0x60
   136fa:	1c5a      	adds	r2, r3, #1
   136fc:	9218      	str	r2, [sp, #96]	; 0x60
   136fe:	aa1a      	add	r2, sp, #104	; 0x68
   13700:	4413      	add	r3, r2
   13702:	222b      	movs	r2, #43	; 0x2b
   13704:	f803 2c50 	strb.w	r2, [r3, #-80]
   13708:	e00c      	b.n	13724 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x38c>
    }
    else if (flags & FLAGS_SPACE) {
   1370a:	9b20      	ldr	r3, [sp, #128]	; 0x80
   1370c:	f003 0308 	and.w	r3, r3, #8
   13710:	2b00      	cmp	r3, #0
   13712:	d007      	beq.n	13724 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x38c>
      buf[len++] = ' ';
   13714:	9b18      	ldr	r3, [sp, #96]	; 0x60
   13716:	1c5a      	adds	r2, r3, #1
   13718:	9218      	str	r2, [sp, #96]	; 0x60
   1371a:	aa1a      	add	r2, sp, #104	; 0x68
   1371c:	4413      	add	r3, r2
   1371e:	2220      	movs	r2, #32
   13720:	f803 2c50 	strb.w	r2, [r3, #-80]
    }
  }

  // pad spaces up to given width
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
   13724:	9b20      	ldr	r3, [sp, #128]	; 0x80
   13726:	f003 0302 	and.w	r3, r3, #2
   1372a:	2b00      	cmp	r3, #0
   1372c:	d116      	bne.n	1375c <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x3c4>
   1372e:	9b20      	ldr	r3, [sp, #128]	; 0x80
   13730:	f003 0301 	and.w	r3, r3, #1
   13734:	2b00      	cmp	r3, #0
   13736:	d111      	bne.n	1375c <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x3c4>
    for (size_t i = len; i < width; i++) {
   13738:	9b18      	ldr	r3, [sp, #96]	; 0x60
   1373a:	9313      	str	r3, [sp, #76]	; 0x4c
   1373c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   1373e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   13740:	429a      	cmp	r2, r3
   13742:	d20b      	bcs.n	1375c <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x3c4>
      out(' ', buffer, idx++, maxlen);
   13744:	9a03      	ldr	r2, [sp, #12]
   13746:	1c53      	adds	r3, r2, #1
   13748:	9303      	str	r3, [sp, #12]
   1374a:	9c05      	ldr	r4, [sp, #20]
   1374c:	9b02      	ldr	r3, [sp, #8]
   1374e:	9904      	ldr	r1, [sp, #16]
   13750:	2020      	movs	r0, #32
   13752:	47a0      	blx	r4
    for (size_t i = len; i < width; i++) {
   13754:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   13756:	3301      	adds	r3, #1
   13758:	9313      	str	r3, [sp, #76]	; 0x4c
   1375a:	e7ef      	b.n	1373c <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x3a4>
    }
  }

  // reverse string
  for (size_t i = 0U; i < len; i++) {
   1375c:	2300      	movs	r3, #0
   1375e:	9312      	str	r3, [sp, #72]	; 0x48
   13760:	9a12      	ldr	r2, [sp, #72]	; 0x48
   13762:	9b18      	ldr	r3, [sp, #96]	; 0x60
   13764:	429a      	cmp	r2, r3
   13766:	d212      	bcs.n	1378e <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x3f6>
    out(buf[len - i - 1U], buffer, idx++, maxlen);
   13768:	9a18      	ldr	r2, [sp, #96]	; 0x60
   1376a:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1376c:	1ad3      	subs	r3, r2, r3
   1376e:	3b01      	subs	r3, #1
   13770:	aa1a      	add	r2, sp, #104	; 0x68
   13772:	4413      	add	r3, r2
   13774:	f813 0c50 	ldrb.w	r0, [r3, #-80]
   13778:	9a03      	ldr	r2, [sp, #12]
   1377a:	1c53      	adds	r3, r2, #1
   1377c:	9303      	str	r3, [sp, #12]
   1377e:	9c05      	ldr	r4, [sp, #20]
   13780:	9b02      	ldr	r3, [sp, #8]
   13782:	9904      	ldr	r1, [sp, #16]
   13784:	47a0      	blx	r4
  for (size_t i = 0U; i < len; i++) {
   13786:	9b12      	ldr	r3, [sp, #72]	; 0x48
   13788:	3301      	adds	r3, #1
   1378a:	9312      	str	r3, [sp, #72]	; 0x48
   1378c:	e7e8      	b.n	13760 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x3c8>
  }

  // append pad spaces up to given width
  if (flags & FLAGS_LEFT) {
   1378e:	9b20      	ldr	r3, [sp, #128]	; 0x80
   13790:	f003 0302 	and.w	r3, r3, #2
   13794:	2b00      	cmp	r3, #0
   13796:	d00e      	beq.n	137b6 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x41e>
    while (idx - start_idx < width) {
   13798:	9a03      	ldr	r2, [sp, #12]
   1379a:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1379c:	1ad3      	subs	r3, r2, r3
   1379e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   137a0:	429a      	cmp	r2, r3
   137a2:	d908      	bls.n	137b6 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x41e>
      out(' ', buffer, idx++, maxlen);
   137a4:	9a03      	ldr	r2, [sp, #12]
   137a6:	1c53      	adds	r3, r2, #1
   137a8:	9303      	str	r3, [sp, #12]
   137aa:	9c05      	ldr	r4, [sp, #20]
   137ac:	9b02      	ldr	r3, [sp, #8]
   137ae:	9904      	ldr	r1, [sp, #16]
   137b0:	2020      	movs	r0, #32
   137b2:	47a0      	blx	r4
    while (idx - start_idx < width) {
   137b4:	e7f0      	b.n	13798 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x400>
    }
  }

  return idx;
   137b6:	9c03      	ldr	r4, [sp, #12]
   137b8:	462b      	mov	r3, r5
   137ba:	4619      	mov	r1, r3
   137bc:	4803      	ldr	r0, [pc, #12]	; (137cc <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x434>)
   137be:	f7ff fa3b 	bl	12c38 <__cyg_profile_func_exit>
   137c2:	4623      	mov	r3, r4
}
   137c4:	4618      	mov	r0, r3
   137c6:	b01b      	add	sp, #108	; 0x6c
   137c8:	bd30      	pop	{r4, r5, pc}
   137ca:	bf00      	nop
   137cc:	00013399 	.word	0x00013399

000137d0 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)>:
#endif  // PRINTF_SUPPORT_FLOAT


// internal vsnprintf
static int _vsnprintf(out_fct_type out, char* buffer, const size_t maxlen, const char* format, va_list va)
{
   137d0:	b570      	push	{r4, r5, r6, lr}
   137d2:	b0a0      	sub	sp, #128	; 0x80
   137d4:	4676      	mov	r6, lr
   137d6:	900d      	str	r0, [sp, #52]	; 0x34
   137d8:	910c      	str	r1, [sp, #48]	; 0x30
   137da:	920b      	str	r2, [sp, #44]	; 0x2c
   137dc:	930a      	str	r3, [sp, #40]	; 0x28
   137de:	4633      	mov	r3, r6
   137e0:	4619      	mov	r1, r3
   137e2:	48a7      	ldr	r0, [pc, #668]	; (13a80 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2b0>)
   137e4:	f7ff fa14 	bl	12c10 <__cyg_profile_func_enter>
  unsigned int flags, width, precision, n;
  size_t idx = 0U;
   137e8:	2300      	movs	r3, #0
   137ea:	931b      	str	r3, [sp, #108]	; 0x6c

  if (!buffer) {
   137ec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   137ee:	2b00      	cmp	r3, #0
   137f0:	d101      	bne.n	137f6 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x26>
    // use null output function
    out = _out_null;
   137f2:	4ba4      	ldr	r3, [pc, #656]	; (13a84 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2b4>)
   137f4:	930d      	str	r3, [sp, #52]	; 0x34
  }

  while (*format)
   137f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   137f8:	781b      	ldrb	r3, [r3, #0]
   137fa:	2b00      	cmp	r3, #0
   137fc:	f000 8448 	beq.w	14090 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8c0>
  {
    // format specifier?  %[flags][width][.precision][length]
    if (*format != '%') {
   13800:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13802:	781b      	ldrb	r3, [r3, #0]
   13804:	2b25      	cmp	r3, #37	; 0x25
   13806:	d00d      	beq.n	13824 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x54>
      // no
      out(*format, buffer, idx++, maxlen);
   13808:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1380a:	7818      	ldrb	r0, [r3, #0]
   1380c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   1380e:	1c53      	adds	r3, r2, #1
   13810:	931b      	str	r3, [sp, #108]	; 0x6c
   13812:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   13814:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   13816:	990c      	ldr	r1, [sp, #48]	; 0x30
   13818:	47a0      	blx	r4
      format++;
   1381a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1381c:	3301      	adds	r3, #1
   1381e:	930a      	str	r3, [sp, #40]	; 0x28
      continue;
   13820:	f000 bc34 	b.w	1408c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8bc>
    }
    else {
      // yes, evaluate it
      format++;
   13824:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13826:	3301      	adds	r3, #1
   13828:	930a      	str	r3, [sp, #40]	; 0x28
    }

    // evaluate flags
    flags = 0U;
   1382a:	2300      	movs	r3, #0
   1382c:	931f      	str	r3, [sp, #124]	; 0x7c
    do {
      switch (*format) {
   1382e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13830:	781b      	ldrb	r3, [r3, #0]
   13832:	3b20      	subs	r3, #32
   13834:	2b10      	cmp	r3, #16
   13836:	d857      	bhi.n	138e8 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x118>
   13838:	a201      	add	r2, pc, #4	; (adr r2, 13840 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x70>)
   1383a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1383e:	bf00      	nop
   13840:	000138c1 	.word	0x000138c1
   13844:	000138e9 	.word	0x000138e9
   13848:	000138e9 	.word	0x000138e9
   1384c:	000138d5 	.word	0x000138d5
   13850:	000138e9 	.word	0x000138e9
   13854:	000138e9 	.word	0x000138e9
   13858:	000138e9 	.word	0x000138e9
   1385c:	000138e9 	.word	0x000138e9
   13860:	000138e9 	.word	0x000138e9
   13864:	000138e9 	.word	0x000138e9
   13868:	000138e9 	.word	0x000138e9
   1386c:	000138ad 	.word	0x000138ad
   13870:	000138e9 	.word	0x000138e9
   13874:	00013899 	.word	0x00013899
   13878:	000138e9 	.word	0x000138e9
   1387c:	000138e9 	.word	0x000138e9
   13880:	00013885 	.word	0x00013885
        case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
   13884:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   13886:	f043 0301 	orr.w	r3, r3, #1
   1388a:	931f      	str	r3, [sp, #124]	; 0x7c
   1388c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1388e:	3301      	adds	r3, #1
   13890:	930a      	str	r3, [sp, #40]	; 0x28
   13892:	2301      	movs	r3, #1
   13894:	931c      	str	r3, [sp, #112]	; 0x70
   13896:	e02a      	b.n	138ee <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x11e>
        case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
   13898:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   1389a:	f043 0302 	orr.w	r3, r3, #2
   1389e:	931f      	str	r3, [sp, #124]	; 0x7c
   138a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   138a2:	3301      	adds	r3, #1
   138a4:	930a      	str	r3, [sp, #40]	; 0x28
   138a6:	2301      	movs	r3, #1
   138a8:	931c      	str	r3, [sp, #112]	; 0x70
   138aa:	e020      	b.n	138ee <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x11e>
        case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
   138ac:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   138ae:	f043 0304 	orr.w	r3, r3, #4
   138b2:	931f      	str	r3, [sp, #124]	; 0x7c
   138b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   138b6:	3301      	adds	r3, #1
   138b8:	930a      	str	r3, [sp, #40]	; 0x28
   138ba:	2301      	movs	r3, #1
   138bc:	931c      	str	r3, [sp, #112]	; 0x70
   138be:	e016      	b.n	138ee <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x11e>
        case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
   138c0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   138c2:	f043 0308 	orr.w	r3, r3, #8
   138c6:	931f      	str	r3, [sp, #124]	; 0x7c
   138c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   138ca:	3301      	adds	r3, #1
   138cc:	930a      	str	r3, [sp, #40]	; 0x28
   138ce:	2301      	movs	r3, #1
   138d0:	931c      	str	r3, [sp, #112]	; 0x70
   138d2:	e00c      	b.n	138ee <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x11e>
        case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;
   138d4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   138d6:	f043 0310 	orr.w	r3, r3, #16
   138da:	931f      	str	r3, [sp, #124]	; 0x7c
   138dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   138de:	3301      	adds	r3, #1
   138e0:	930a      	str	r3, [sp, #40]	; 0x28
   138e2:	2301      	movs	r3, #1
   138e4:	931c      	str	r3, [sp, #112]	; 0x70
   138e6:	e002      	b.n	138ee <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x11e>
        default :                                   n = 0U; break;
   138e8:	2300      	movs	r3, #0
   138ea:	931c      	str	r3, [sp, #112]	; 0x70
   138ec:	bf00      	nop
      }
    } while (n);
   138ee:	9b1c      	ldr	r3, [sp, #112]	; 0x70
   138f0:	2b00      	cmp	r3, #0
   138f2:	d000      	beq.n	138f6 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x126>
    do {
   138f4:	e79b      	b.n	1382e <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x5e>

    // evaluate width field
    width = 0U;
   138f6:	2300      	movs	r3, #0
   138f8:	931e      	str	r3, [sp, #120]	; 0x78
    if (_is_digit(*format)) {
   138fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   138fc:	781b      	ldrb	r3, [r3, #0]
   138fe:	4618      	mov	r0, r3
   13900:	f7ff fade 	bl	12ec0 <_is_digit(char)>
   13904:	4603      	mov	r3, r0
   13906:	2b00      	cmp	r3, #0
   13908:	d005      	beq.n	13916 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x146>
      width = _atoi(&format);
   1390a:	ab0a      	add	r3, sp, #40	; 0x28
   1390c:	4618      	mov	r0, r3
   1390e:	f7ff faf9 	bl	12f04 <_atoi(char const**)>
   13912:	901e      	str	r0, [sp, #120]	; 0x78
   13914:	e018      	b.n	13948 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x178>
    }
    else if (*format == '*') {
   13916:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13918:	781b      	ldrb	r3, [r3, #0]
   1391a:	2b2a      	cmp	r3, #42	; 0x2a
   1391c:	d114      	bne.n	13948 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x178>
      const int w = va_arg(va, int);
   1391e:	9b24      	ldr	r3, [sp, #144]	; 0x90
   13920:	1d1a      	adds	r2, r3, #4
   13922:	9224      	str	r2, [sp, #144]	; 0x90
   13924:	681b      	ldr	r3, [r3, #0]
   13926:	9316      	str	r3, [sp, #88]	; 0x58
      if (w < 0) {
   13928:	9b16      	ldr	r3, [sp, #88]	; 0x58
   1392a:	2b00      	cmp	r3, #0
   1392c:	da07      	bge.n	1393e <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x16e>
        flags |= FLAGS_LEFT;    // reverse padding
   1392e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   13930:	f043 0302 	orr.w	r3, r3, #2
   13934:	931f      	str	r3, [sp, #124]	; 0x7c
        width = (unsigned int)-w;
   13936:	9b16      	ldr	r3, [sp, #88]	; 0x58
   13938:	425b      	negs	r3, r3
   1393a:	931e      	str	r3, [sp, #120]	; 0x78
   1393c:	e001      	b.n	13942 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x172>
      }
      else {
        width = (unsigned int)w;
   1393e:	9b16      	ldr	r3, [sp, #88]	; 0x58
   13940:	931e      	str	r3, [sp, #120]	; 0x78
      }
      format++;
   13942:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13944:	3301      	adds	r3, #1
   13946:	930a      	str	r3, [sp, #40]	; 0x28
    }

    // evaluate precision field
    precision = 0U;
   13948:	2300      	movs	r3, #0
   1394a:	931d      	str	r3, [sp, #116]	; 0x74
    if (*format == '.') {
   1394c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1394e:	781b      	ldrb	r3, [r3, #0]
   13950:	2b2e      	cmp	r3, #46	; 0x2e
   13952:	d124      	bne.n	1399e <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x1ce>
      flags |= FLAGS_PRECISION;
   13954:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   13956:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
   1395a:	931f      	str	r3, [sp, #124]	; 0x7c
      format++;
   1395c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1395e:	3301      	adds	r3, #1
   13960:	930a      	str	r3, [sp, #40]	; 0x28
      if (_is_digit(*format)) {
   13962:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13964:	781b      	ldrb	r3, [r3, #0]
   13966:	4618      	mov	r0, r3
   13968:	f7ff faaa 	bl	12ec0 <_is_digit(char)>
   1396c:	4603      	mov	r3, r0
   1396e:	2b00      	cmp	r3, #0
   13970:	d005      	beq.n	1397e <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x1ae>
        precision = _atoi(&format);
   13972:	ab0a      	add	r3, sp, #40	; 0x28
   13974:	4618      	mov	r0, r3
   13976:	f7ff fac5 	bl	12f04 <_atoi(char const**)>
   1397a:	901d      	str	r0, [sp, #116]	; 0x74
   1397c:	e00f      	b.n	1399e <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x1ce>
      }
      else if (*format == '*') {
   1397e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13980:	781b      	ldrb	r3, [r3, #0]
   13982:	2b2a      	cmp	r3, #42	; 0x2a
   13984:	d10b      	bne.n	1399e <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x1ce>
        const int prec = (int)va_arg(va, int);
   13986:	9b24      	ldr	r3, [sp, #144]	; 0x90
   13988:	1d1a      	adds	r2, r3, #4
   1398a:	9224      	str	r2, [sp, #144]	; 0x90
   1398c:	681b      	ldr	r3, [r3, #0]
   1398e:	9315      	str	r3, [sp, #84]	; 0x54
        precision = prec > 0 ? (unsigned int)prec : 0U;
   13990:	9b15      	ldr	r3, [sp, #84]	; 0x54
   13992:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   13996:	931d      	str	r3, [sp, #116]	; 0x74
        format++;
   13998:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1399a:	3301      	adds	r3, #1
   1399c:	930a      	str	r3, [sp, #40]	; 0x28
      }
    }

    // evaluate length field
    switch (*format) {
   1399e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   139a0:	781b      	ldrb	r3, [r3, #0]
   139a2:	3b68      	subs	r3, #104	; 0x68
   139a4:	2b12      	cmp	r3, #18
   139a6:	d867      	bhi.n	13a78 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2a8>
   139a8:	a201      	add	r2, pc, #4	; (adr r2, 139b0 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x1e0>)
   139aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   139ae:	bf00      	nop
   139b0:	00013a23 	.word	0x00013a23
   139b4:	00013a79 	.word	0x00013a79
   139b8:	00013a59 	.word	0x00013a59
   139bc:	00013a79 	.word	0x00013a79
   139c0:	000139fd 	.word	0x000139fd
   139c4:	00013a79 	.word	0x00013a79
   139c8:	00013a79 	.word	0x00013a79
   139cc:	00013a79 	.word	0x00013a79
   139d0:	00013a79 	.word	0x00013a79
   139d4:	00013a79 	.word	0x00013a79
   139d8:	00013a79 	.word	0x00013a79
   139dc:	00013a79 	.word	0x00013a79
   139e0:	00013a49 	.word	0x00013a49
   139e4:	00013a79 	.word	0x00013a79
   139e8:	00013a79 	.word	0x00013a79
   139ec:	00013a79 	.word	0x00013a79
   139f0:	00013a79 	.word	0x00013a79
   139f4:	00013a79 	.word	0x00013a79
   139f8:	00013a69 	.word	0x00013a69
      case 'l' :
        flags |= FLAGS_LONG;
   139fc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   139fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   13a02:	931f      	str	r3, [sp, #124]	; 0x7c
        format++;
   13a04:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13a06:	3301      	adds	r3, #1
   13a08:	930a      	str	r3, [sp, #40]	; 0x28
        if (*format == 'l') {
   13a0a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13a0c:	781b      	ldrb	r3, [r3, #0]
   13a0e:	2b6c      	cmp	r3, #108	; 0x6c
   13a10:	d134      	bne.n	13a7c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2ac>
          flags |= FLAGS_LONG_LONG;
   13a12:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   13a14:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   13a18:	931f      	str	r3, [sp, #124]	; 0x7c
          format++;
   13a1a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13a1c:	3301      	adds	r3, #1
   13a1e:	930a      	str	r3, [sp, #40]	; 0x28
        }
        break;
   13a20:	e02c      	b.n	13a7c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2ac>
      case 'h' :
        flags |= FLAGS_SHORT;
   13a22:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   13a24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   13a28:	931f      	str	r3, [sp, #124]	; 0x7c
        format++;
   13a2a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13a2c:	3301      	adds	r3, #1
   13a2e:	930a      	str	r3, [sp, #40]	; 0x28
        if (*format == 'h') {
   13a30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13a32:	781b      	ldrb	r3, [r3, #0]
   13a34:	2b68      	cmp	r3, #104	; 0x68
   13a36:	d127      	bne.n	13a88 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2b8>
          flags |= FLAGS_CHAR;
   13a38:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   13a3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   13a3e:	931f      	str	r3, [sp, #124]	; 0x7c
          format++;
   13a40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13a42:	3301      	adds	r3, #1
   13a44:	930a      	str	r3, [sp, #40]	; 0x28
        }
        break;
   13a46:	e01f      	b.n	13a88 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2b8>
#if defined(PRINTF_SUPPORT_PTRDIFF_T)
      case 't' :
        flags |= (sizeof(ptrdiff_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
   13a48:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   13a4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   13a4e:	931f      	str	r3, [sp, #124]	; 0x7c
        format++;
   13a50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13a52:	3301      	adds	r3, #1
   13a54:	930a      	str	r3, [sp, #40]	; 0x28
        break;
   13a56:	e018      	b.n	13a8a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2ba>
#endif
      case 'j' :
        flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
   13a58:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   13a5a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   13a5e:	931f      	str	r3, [sp, #124]	; 0x7c
        format++;
   13a60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13a62:	3301      	adds	r3, #1
   13a64:	930a      	str	r3, [sp, #40]	; 0x28
        break;
   13a66:	e010      	b.n	13a8a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2ba>
      case 'z' :
        flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
   13a68:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   13a6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   13a6e:	931f      	str	r3, [sp, #124]	; 0x7c
        format++;
   13a70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13a72:	3301      	adds	r3, #1
   13a74:	930a      	str	r3, [sp, #40]	; 0x28
        break;
   13a76:	e008      	b.n	13a8a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2ba>
      default :
        break;
   13a78:	bf00      	nop
   13a7a:	e006      	b.n	13a8a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2ba>
        break;
   13a7c:	bf00      	nop
   13a7e:	e004      	b.n	13a8a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2ba>
   13a80:	000137d1 	.word	0x000137d1
   13a84:	00012e09 	.word	0x00012e09
        break;
   13a88:	bf00      	nop
    }

    // evaluate specifier
    switch (*format) {
   13a8a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13a8c:	781b      	ldrb	r3, [r3, #0]
   13a8e:	3b25      	subs	r3, #37	; 0x25
   13a90:	2b53      	cmp	r3, #83	; 0x53
   13a92:	f200 82ee 	bhi.w	14072 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8a2>
   13a96:	a201      	add	r2, pc, #4	; (adr r2, 13a9c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2cc>)
   13a98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   13a9c:	0001405b 	.word	0x0001405b
   13aa0:	00014073 	.word	0x00014073
   13aa4:	00014073 	.word	0x00014073
   13aa8:	00014073 	.word	0x00014073
   13aac:	00014073 	.word	0x00014073
   13ab0:	00014073 	.word	0x00014073
   13ab4:	00014073 	.word	0x00014073
   13ab8:	00014073 	.word	0x00014073
   13abc:	00014073 	.word	0x00014073
   13ac0:	00014073 	.word	0x00014073
   13ac4:	00014073 	.word	0x00014073
   13ac8:	00014073 	.word	0x00014073
   13acc:	00014073 	.word	0x00014073
   13ad0:	00014073 	.word	0x00014073
   13ad4:	00014073 	.word	0x00014073
   13ad8:	00014073 	.word	0x00014073
   13adc:	00014073 	.word	0x00014073
   13ae0:	00014073 	.word	0x00014073
   13ae4:	00014073 	.word	0x00014073
   13ae8:	00014073 	.word	0x00014073
   13aec:	00014073 	.word	0x00014073
   13af0:	00014073 	.word	0x00014073
   13af4:	00014073 	.word	0x00014073
   13af8:	00014073 	.word	0x00014073
   13afc:	00014073 	.word	0x00014073
   13b00:	00014073 	.word	0x00014073
   13b04:	00014073 	.word	0x00014073
   13b08:	00014073 	.word	0x00014073
   13b0c:	00014073 	.word	0x00014073
   13b10:	00014073 	.word	0x00014073
   13b14:	00014073 	.word	0x00014073
   13b18:	00014073 	.word	0x00014073
   13b1c:	00014073 	.word	0x00014073
   13b20:	00013e79 	.word	0x00013e79
   13b24:	00014073 	.word	0x00014073
   13b28:	00014073 	.word	0x00014073
   13b2c:	00014073 	.word	0x00014073
   13b30:	00014073 	.word	0x00014073
   13b34:	00014073 	.word	0x00014073
   13b38:	00014073 	.word	0x00014073
   13b3c:	00014073 	.word	0x00014073
   13b40:	00014073 	.word	0x00014073
   13b44:	00014073 	.word	0x00014073
   13b48:	00014073 	.word	0x00014073
   13b4c:	00014073 	.word	0x00014073
   13b50:	00014073 	.word	0x00014073
   13b54:	00014073 	.word	0x00014073
   13b58:	00014073 	.word	0x00014073
   13b5c:	00014073 	.word	0x00014073
   13b60:	00014073 	.word	0x00014073
   13b64:	00014073 	.word	0x00014073
   13b68:	00013bed 	.word	0x00013bed
   13b6c:	00014073 	.word	0x00014073
   13b70:	00014073 	.word	0x00014073
   13b74:	00014073 	.word	0x00014073
   13b78:	00014073 	.word	0x00014073
   13b7c:	00014073 	.word	0x00014073
   13b80:	00014073 	.word	0x00014073
   13b84:	00014073 	.word	0x00014073
   13b88:	00014073 	.word	0x00014073
   13b8c:	00014073 	.word	0x00014073
   13b90:	00013bed 	.word	0x00013bed
   13b94:	00013eb5 	.word	0x00013eb5
   13b98:	00013bed 	.word	0x00013bed
   13b9c:	00014073 	.word	0x00014073
   13ba0:	00013e79 	.word	0x00013e79
   13ba4:	00014073 	.word	0x00014073
   13ba8:	00014073 	.word	0x00014073
   13bac:	00013bed 	.word	0x00013bed
   13bb0:	00014073 	.word	0x00014073
   13bb4:	00014073 	.word	0x00014073
   13bb8:	00014073 	.word	0x00014073
   13bbc:	00014073 	.word	0x00014073
   13bc0:	00014073 	.word	0x00014073
   13bc4:	00013bed 	.word	0x00013bed
   13bc8:	00014013 	.word	0x00014013
   13bcc:	00014073 	.word	0x00014073
   13bd0:	00014073 	.word	0x00014073
   13bd4:	00013f3d 	.word	0x00013f3d
   13bd8:	00014073 	.word	0x00014073
   13bdc:	00013bed 	.word	0x00013bed
   13be0:	00014073 	.word	0x00014073
   13be4:	00014073 	.word	0x00014073
   13be8:	00013bed 	.word	0x00013bed
      case 'X' :
      case 'o' :
      case 'b' : {
        // set the base
        unsigned int base;
        if (*format == 'x' || *format == 'X') {
   13bec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13bee:	781b      	ldrb	r3, [r3, #0]
   13bf0:	2b78      	cmp	r3, #120	; 0x78
   13bf2:	d003      	beq.n	13bfc <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x42c>
   13bf4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13bf6:	781b      	ldrb	r3, [r3, #0]
   13bf8:	2b58      	cmp	r3, #88	; 0x58
   13bfa:	d102      	bne.n	13c02 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x432>
          base = 16U;
   13bfc:	2310      	movs	r3, #16
   13bfe:	931a      	str	r3, [sp, #104]	; 0x68
   13c00:	e013      	b.n	13c2a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x45a>
        }
        else if (*format == 'o') {
   13c02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13c04:	781b      	ldrb	r3, [r3, #0]
   13c06:	2b6f      	cmp	r3, #111	; 0x6f
   13c08:	d102      	bne.n	13c10 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x440>
          base =  8U;
   13c0a:	2308      	movs	r3, #8
   13c0c:	931a      	str	r3, [sp, #104]	; 0x68
   13c0e:	e00c      	b.n	13c2a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x45a>
        }
        else if (*format == 'b') {
   13c10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13c12:	781b      	ldrb	r3, [r3, #0]
   13c14:	2b62      	cmp	r3, #98	; 0x62
   13c16:	d102      	bne.n	13c1e <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x44e>
          base =  2U;
   13c18:	2302      	movs	r3, #2
   13c1a:	931a      	str	r3, [sp, #104]	; 0x68
   13c1c:	e005      	b.n	13c2a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x45a>
        }
        else {
          base = 10U;
   13c1e:	230a      	movs	r3, #10
   13c20:	931a      	str	r3, [sp, #104]	; 0x68
          flags &= ~FLAGS_HASH;   // no hash for dec format
   13c22:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   13c24:	f023 0310 	bic.w	r3, r3, #16
   13c28:	931f      	str	r3, [sp, #124]	; 0x7c
        }
        // uppercase
        if (*format == 'X') {
   13c2a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13c2c:	781b      	ldrb	r3, [r3, #0]
   13c2e:	2b58      	cmp	r3, #88	; 0x58
   13c30:	d103      	bne.n	13c3a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x46a>
          flags |= FLAGS_UPPERCASE;
   13c32:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   13c34:	f043 0320 	orr.w	r3, r3, #32
   13c38:	931f      	str	r3, [sp, #124]	; 0x7c
        }

        // no plus or space flag for u, x, X, o, b
        if ((*format != 'i') && (*format != 'd')) {
   13c3a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13c3c:	781b      	ldrb	r3, [r3, #0]
   13c3e:	2b69      	cmp	r3, #105	; 0x69
   13c40:	d007      	beq.n	13c52 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x482>
   13c42:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13c44:	781b      	ldrb	r3, [r3, #0]
   13c46:	2b64      	cmp	r3, #100	; 0x64
   13c48:	d003      	beq.n	13c52 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x482>
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
   13c4a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   13c4c:	f023 030c 	bic.w	r3, r3, #12
   13c50:	931f      	str	r3, [sp, #124]	; 0x7c
        }

        // ignore '0' flag when precision is given
        if (flags & FLAGS_PRECISION) {
   13c52:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   13c54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
   13c58:	2b00      	cmp	r3, #0
   13c5a:	d003      	beq.n	13c64 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x494>
          flags &= ~FLAGS_ZEROPAD;
   13c5c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   13c5e:	f023 0301 	bic.w	r3, r3, #1
   13c62:	931f      	str	r3, [sp, #124]	; 0x7c
        }

        // convert the integer
        if ((*format == 'i') || (*format == 'd')) {
   13c64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13c66:	781b      	ldrb	r3, [r3, #0]
   13c68:	2b69      	cmp	r3, #105	; 0x69
   13c6a:	d004      	beq.n	13c76 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x4a6>
   13c6c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13c6e:	781b      	ldrb	r3, [r3, #0]
   13c70:	2b64      	cmp	r3, #100	; 0x64
   13c72:	f040 808d 	bne.w	13d90 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x5c0>
          // signed
          if (flags & FLAGS_LONG_LONG) {
   13c76:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   13c78:	f403 7300 	and.w	r3, r3, #512	; 0x200
   13c7c:	2b00      	cmp	r3, #0
   13c7e:	d02e      	beq.n	13cde <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x50e>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            const long long value = va_arg(va, long long);
   13c80:	9b24      	ldr	r3, [sp, #144]	; 0x90
   13c82:	3307      	adds	r3, #7
   13c84:	f023 0307 	bic.w	r3, r3, #7
   13c88:	f103 0208 	add.w	r2, r3, #8
   13c8c:	9224      	str	r2, [sp, #144]	; 0x90
   13c8e:	e9d3 3400 	ldrd	r3, r4, [r3]
   13c92:	e9cd 340e 	strd	r3, r4, [sp, #56]	; 0x38
            idx = _ntoa_long_long(out, buffer, idx, maxlen, (unsigned long long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
   13c96:	e9dd 340e 	ldrd	r3, r4, [sp, #56]	; 0x38
   13c9a:	2b00      	cmp	r3, #0
   13c9c:	f174 0200 	sbcs.w	r2, r4, #0
   13ca0:	da02      	bge.n	13ca8 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x4d8>
   13ca2:	425b      	negs	r3, r3
   13ca4:	eb64 0444 	sbc.w	r4, r4, r4, lsl #1
   13ca8:	4619      	mov	r1, r3
   13caa:	4622      	mov	r2, r4
   13cac:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   13cae:	0fdb      	lsrs	r3, r3, #31
   13cb0:	b2d8      	uxtb	r0, r3
   13cb2:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   13cb4:	f04f 0400 	mov.w	r4, #0
   13cb8:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
   13cba:	9508      	str	r5, [sp, #32]
   13cbc:	9d1e      	ldr	r5, [sp, #120]	; 0x78
   13cbe:	9507      	str	r5, [sp, #28]
   13cc0:	9d1d      	ldr	r5, [sp, #116]	; 0x74
   13cc2:	9506      	str	r5, [sp, #24]
   13cc4:	e9cd 3404 	strd	r3, r4, [sp, #16]
   13cc8:	9002      	str	r0, [sp, #8]
   13cca:	e9cd 1200 	strd	r1, r2, [sp]
   13cce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   13cd0:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   13cd2:	990c      	ldr	r1, [sp, #48]	; 0x30
   13cd4:	980d      	ldr	r0, [sp, #52]	; 0x34
   13cd6:	f7ff fae5 	bl	132a4 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)>
   13cda:	901b      	str	r0, [sp, #108]	; 0x6c
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
          }
          else {
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
          }
   13cdc:	e0c8      	b.n	13e70 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x6a0>
          else if (flags & FLAGS_LONG) {
   13cde:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   13ce0:	f403 7380 	and.w	r3, r3, #256	; 0x100
   13ce4:	2b00      	cmp	r3, #0
   13ce6:	d01e      	beq.n	13d26 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x556>
            const long value = va_arg(va, long);
   13ce8:	9b24      	ldr	r3, [sp, #144]	; 0x90
   13cea:	1d1a      	adds	r2, r3, #4
   13cec:	9224      	str	r2, [sp, #144]	; 0x90
   13cee:	681b      	ldr	r3, [r3, #0]
   13cf0:	9311      	str	r3, [sp, #68]	; 0x44
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
   13cf2:	9b11      	ldr	r3, [sp, #68]	; 0x44
   13cf4:	2b00      	cmp	r3, #0
   13cf6:	bfb8      	it	lt
   13cf8:	425b      	neglt	r3, r3
   13cfa:	4619      	mov	r1, r3
   13cfc:	9b11      	ldr	r3, [sp, #68]	; 0x44
   13cfe:	0fdb      	lsrs	r3, r3, #31
   13d00:	b2db      	uxtb	r3, r3
   13d02:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   13d04:	9205      	str	r2, [sp, #20]
   13d06:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   13d08:	9204      	str	r2, [sp, #16]
   13d0a:	9a1d      	ldr	r2, [sp, #116]	; 0x74
   13d0c:	9203      	str	r2, [sp, #12]
   13d0e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   13d10:	9202      	str	r2, [sp, #8]
   13d12:	9301      	str	r3, [sp, #4]
   13d14:	9100      	str	r1, [sp, #0]
   13d16:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   13d18:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   13d1a:	990c      	ldr	r1, [sp, #48]	; 0x30
   13d1c:	980d      	ldr	r0, [sp, #52]	; 0x34
   13d1e:	f7ff fa4f 	bl	131c0 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)>
   13d22:	901b      	str	r0, [sp, #108]	; 0x6c
          }
   13d24:	e0a4      	b.n	13e70 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x6a0>
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
   13d26:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   13d28:	f003 0340 	and.w	r3, r3, #64	; 0x40
   13d2c:	2b00      	cmp	r3, #0
   13d2e:	d005      	beq.n	13d3c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x56c>
   13d30:	9b24      	ldr	r3, [sp, #144]	; 0x90
   13d32:	1d1a      	adds	r2, r3, #4
   13d34:	9224      	str	r2, [sp, #144]	; 0x90
   13d36:	681b      	ldr	r3, [r3, #0]
   13d38:	b2db      	uxtb	r3, r3
   13d3a:	e00e      	b.n	13d5a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x58a>
   13d3c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   13d3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
   13d42:	2b00      	cmp	r3, #0
   13d44:	d005      	beq.n	13d52 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x582>
   13d46:	9b24      	ldr	r3, [sp, #144]	; 0x90
   13d48:	1d1a      	adds	r2, r3, #4
   13d4a:	9224      	str	r2, [sp, #144]	; 0x90
   13d4c:	681b      	ldr	r3, [r3, #0]
   13d4e:	b21b      	sxth	r3, r3
   13d50:	e003      	b.n	13d5a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x58a>
   13d52:	9b24      	ldr	r3, [sp, #144]	; 0x90
   13d54:	1d1a      	adds	r2, r3, #4
   13d56:	9224      	str	r2, [sp, #144]	; 0x90
   13d58:	681b      	ldr	r3, [r3, #0]
   13d5a:	9312      	str	r3, [sp, #72]	; 0x48
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
   13d5c:	9b12      	ldr	r3, [sp, #72]	; 0x48
   13d5e:	2b00      	cmp	r3, #0
   13d60:	bfb8      	it	lt
   13d62:	425b      	neglt	r3, r3
   13d64:	4619      	mov	r1, r3
   13d66:	9b12      	ldr	r3, [sp, #72]	; 0x48
   13d68:	0fdb      	lsrs	r3, r3, #31
   13d6a:	b2db      	uxtb	r3, r3
   13d6c:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   13d6e:	9205      	str	r2, [sp, #20]
   13d70:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   13d72:	9204      	str	r2, [sp, #16]
   13d74:	9a1d      	ldr	r2, [sp, #116]	; 0x74
   13d76:	9203      	str	r2, [sp, #12]
   13d78:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   13d7a:	9202      	str	r2, [sp, #8]
   13d7c:	9301      	str	r3, [sp, #4]
   13d7e:	9100      	str	r1, [sp, #0]
   13d80:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   13d82:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   13d84:	990c      	ldr	r1, [sp, #48]	; 0x30
   13d86:	980d      	ldr	r0, [sp, #52]	; 0x34
   13d88:	f7ff fa1a 	bl	131c0 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)>
   13d8c:	901b      	str	r0, [sp, #108]	; 0x6c
          }
   13d8e:	e06f      	b.n	13e70 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x6a0>
        }
        else {
          // unsigned
          if (flags & FLAGS_LONG_LONG) {
   13d90:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   13d92:	f403 7300 	and.w	r3, r3, #512	; 0x200
   13d96:	2b00      	cmp	r3, #0
   13d98:	d020      	beq.n	13ddc <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x60c>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base, precision, width, flags);
   13d9a:	9b24      	ldr	r3, [sp, #144]	; 0x90
   13d9c:	3307      	adds	r3, #7
   13d9e:	f023 0307 	bic.w	r3, r3, #7
   13da2:	f103 0208 	add.w	r2, r3, #8
   13da6:	9224      	str	r2, [sp, #144]	; 0x90
   13da8:	e9d3 3400 	ldrd	r3, r4, [r3]
   13dac:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   13dae:	4611      	mov	r1, r2
   13db0:	f04f 0200 	mov.w	r2, #0
   13db4:	981f      	ldr	r0, [sp, #124]	; 0x7c
   13db6:	9008      	str	r0, [sp, #32]
   13db8:	981e      	ldr	r0, [sp, #120]	; 0x78
   13dba:	9007      	str	r0, [sp, #28]
   13dbc:	981d      	ldr	r0, [sp, #116]	; 0x74
   13dbe:	9006      	str	r0, [sp, #24]
   13dc0:	e9cd 1204 	strd	r1, r2, [sp, #16]
   13dc4:	2200      	movs	r2, #0
   13dc6:	9202      	str	r2, [sp, #8]
   13dc8:	e9cd 3400 	strd	r3, r4, [sp]
   13dcc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   13dce:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   13dd0:	990c      	ldr	r1, [sp, #48]	; 0x30
   13dd2:	980d      	ldr	r0, [sp, #52]	; 0x34
   13dd4:	f7ff fa66 	bl	132a4 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)>
   13dd8:	901b      	str	r0, [sp, #108]	; 0x6c
   13dda:	e049      	b.n	13e70 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x6a0>
#endif
          }
          else if (flags & FLAGS_LONG) {
   13ddc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   13dde:	f403 7380 	and.w	r3, r3, #256	; 0x100
   13de2:	2b00      	cmp	r3, #0
   13de4:	d016      	beq.n	13e14 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x644>
            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
   13de6:	9b24      	ldr	r3, [sp, #144]	; 0x90
   13de8:	1d1a      	adds	r2, r3, #4
   13dea:	9224      	str	r2, [sp, #144]	; 0x90
   13dec:	681b      	ldr	r3, [r3, #0]
   13dee:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   13df0:	9205      	str	r2, [sp, #20]
   13df2:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   13df4:	9204      	str	r2, [sp, #16]
   13df6:	9a1d      	ldr	r2, [sp, #116]	; 0x74
   13df8:	9203      	str	r2, [sp, #12]
   13dfa:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   13dfc:	9202      	str	r2, [sp, #8]
   13dfe:	2200      	movs	r2, #0
   13e00:	9201      	str	r2, [sp, #4]
   13e02:	9300      	str	r3, [sp, #0]
   13e04:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   13e06:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   13e08:	990c      	ldr	r1, [sp, #48]	; 0x30
   13e0a:	980d      	ldr	r0, [sp, #52]	; 0x34
   13e0c:	f7ff f9d8 	bl	131c0 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)>
   13e10:	901b      	str	r0, [sp, #108]	; 0x6c
   13e12:	e02d      	b.n	13e70 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x6a0>
          }
          else {
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
   13e14:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   13e16:	f003 0340 	and.w	r3, r3, #64	; 0x40
   13e1a:	2b00      	cmp	r3, #0
   13e1c:	d005      	beq.n	13e2a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x65a>
   13e1e:	9b24      	ldr	r3, [sp, #144]	; 0x90
   13e20:	1d1a      	adds	r2, r3, #4
   13e22:	9224      	str	r2, [sp, #144]	; 0x90
   13e24:	681b      	ldr	r3, [r3, #0]
   13e26:	b2db      	uxtb	r3, r3
   13e28:	e00e      	b.n	13e48 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x678>
   13e2a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   13e2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
   13e30:	2b00      	cmp	r3, #0
   13e32:	d005      	beq.n	13e40 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x670>
   13e34:	9b24      	ldr	r3, [sp, #144]	; 0x90
   13e36:	1d1a      	adds	r2, r3, #4
   13e38:	9224      	str	r2, [sp, #144]	; 0x90
   13e3a:	681b      	ldr	r3, [r3, #0]
   13e3c:	b29b      	uxth	r3, r3
   13e3e:	e003      	b.n	13e48 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x678>
   13e40:	9b24      	ldr	r3, [sp, #144]	; 0x90
   13e42:	1d1a      	adds	r2, r3, #4
   13e44:	9224      	str	r2, [sp, #144]	; 0x90
   13e46:	681b      	ldr	r3, [r3, #0]
   13e48:	9313      	str	r3, [sp, #76]	; 0x4c
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
   13e4a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   13e4c:	9305      	str	r3, [sp, #20]
   13e4e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   13e50:	9304      	str	r3, [sp, #16]
   13e52:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   13e54:	9303      	str	r3, [sp, #12]
   13e56:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   13e58:	9302      	str	r3, [sp, #8]
   13e5a:	2300      	movs	r3, #0
   13e5c:	9301      	str	r3, [sp, #4]
   13e5e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   13e60:	9300      	str	r3, [sp, #0]
   13e62:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   13e64:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   13e66:	990c      	ldr	r1, [sp, #48]	; 0x30
   13e68:	980d      	ldr	r0, [sp, #52]	; 0x34
   13e6a:	f7ff f9a9 	bl	131c0 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)>
   13e6e:	901b      	str	r0, [sp, #108]	; 0x6c
          }
        }
        format++;
   13e70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13e72:	3301      	adds	r3, #1
   13e74:	930a      	str	r3, [sp, #40]	; 0x28
        break;
   13e76:	e109      	b.n	1408c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8bc>
      }
#if defined(PRINTF_SUPPORT_FLOAT)
      case 'f' :
      case 'F' :
        idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
   13e78:	9b24      	ldr	r3, [sp, #144]	; 0x90
   13e7a:	3307      	adds	r3, #7
   13e7c:	f023 0307 	bic.w	r3, r3, #7
   13e80:	f103 0208 	add.w	r2, r3, #8
   13e84:	9224      	str	r2, [sp, #144]	; 0x90
   13e86:	ed93 7b00 	vldr	d7, [r3]
   13e8a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   13e8c:	9302      	str	r3, [sp, #8]
   13e8e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   13e90:	9301      	str	r3, [sp, #4]
   13e92:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   13e94:	9300      	str	r3, [sp, #0]
   13e96:	eeb0 0a47 	vmov.f32	s0, s14
   13e9a:	eef0 0a67 	vmov.f32	s1, s15
   13e9e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   13ea0:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   13ea2:	990c      	ldr	r1, [sp, #48]	; 0x30
   13ea4:	980d      	ldr	r0, [sp, #52]	; 0x34
   13ea6:	f7ff fa77 	bl	13398 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)>
   13eaa:	901b      	str	r0, [sp, #108]	; 0x6c
        format++;
   13eac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13eae:	3301      	adds	r3, #1
   13eb0:	930a      	str	r3, [sp, #40]	; 0x28
        break;
   13eb2:	e0eb      	b.n	1408c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8bc>
#endif  // PRINTF_SUPPORT_FLOAT
      case 'c' : {
        unsigned int l = 1U;
   13eb4:	2301      	movs	r3, #1
   13eb6:	9319      	str	r3, [sp, #100]	; 0x64
        // pre padding
        if (!(flags & FLAGS_LEFT)) {
   13eb8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   13eba:	f003 0302 	and.w	r3, r3, #2
   13ebe:	2b00      	cmp	r3, #0
   13ec0:	d113      	bne.n	13eea <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x71a>
          while (l++ < width) {
   13ec2:	9b19      	ldr	r3, [sp, #100]	; 0x64
   13ec4:	1c5a      	adds	r2, r3, #1
   13ec6:	9219      	str	r2, [sp, #100]	; 0x64
   13ec8:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   13eca:	429a      	cmp	r2, r3
   13ecc:	bf8c      	ite	hi
   13ece:	2301      	movhi	r3, #1
   13ed0:	2300      	movls	r3, #0
   13ed2:	b2db      	uxtb	r3, r3
   13ed4:	2b00      	cmp	r3, #0
   13ed6:	d008      	beq.n	13eea <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x71a>
            out(' ', buffer, idx++, maxlen);
   13ed8:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   13eda:	1c53      	adds	r3, r2, #1
   13edc:	931b      	str	r3, [sp, #108]	; 0x6c
   13ede:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   13ee0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   13ee2:	990c      	ldr	r1, [sp, #48]	; 0x30
   13ee4:	2020      	movs	r0, #32
   13ee6:	47a0      	blx	r4
          while (l++ < width) {
   13ee8:	e7eb      	b.n	13ec2 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x6f2>
          }
        }
        // char output
        out((char)va_arg(va, int), buffer, idx++, maxlen);
   13eea:	9b24      	ldr	r3, [sp, #144]	; 0x90
   13eec:	1d1a      	adds	r2, r3, #4
   13eee:	9224      	str	r2, [sp, #144]	; 0x90
   13ef0:	681b      	ldr	r3, [r3, #0]
   13ef2:	b2d8      	uxtb	r0, r3
   13ef4:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   13ef6:	1c53      	adds	r3, r2, #1
   13ef8:	931b      	str	r3, [sp, #108]	; 0x6c
   13efa:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   13efc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   13efe:	990c      	ldr	r1, [sp, #48]	; 0x30
   13f00:	47a0      	blx	r4
        // post padding
        if (flags & FLAGS_LEFT) {
   13f02:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   13f04:	f003 0302 	and.w	r3, r3, #2
   13f08:	2b00      	cmp	r3, #0
   13f0a:	d013      	beq.n	13f34 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x764>
          while (l++ < width) {
   13f0c:	9b19      	ldr	r3, [sp, #100]	; 0x64
   13f0e:	1c5a      	adds	r2, r3, #1
   13f10:	9219      	str	r2, [sp, #100]	; 0x64
   13f12:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   13f14:	429a      	cmp	r2, r3
   13f16:	bf8c      	ite	hi
   13f18:	2301      	movhi	r3, #1
   13f1a:	2300      	movls	r3, #0
   13f1c:	b2db      	uxtb	r3, r3
   13f1e:	2b00      	cmp	r3, #0
   13f20:	d008      	beq.n	13f34 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x764>
            out(' ', buffer, idx++, maxlen);
   13f22:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   13f24:	1c53      	adds	r3, r2, #1
   13f26:	931b      	str	r3, [sp, #108]	; 0x6c
   13f28:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   13f2a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   13f2c:	990c      	ldr	r1, [sp, #48]	; 0x30
   13f2e:	2020      	movs	r0, #32
   13f30:	47a0      	blx	r4
          while (l++ < width) {
   13f32:	e7eb      	b.n	13f0c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x73c>
          }
        }
        format++;
   13f34:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13f36:	3301      	adds	r3, #1
   13f38:	930a      	str	r3, [sp, #40]	; 0x28
        break;
   13f3a:	e0a7      	b.n	1408c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8bc>
      }

      case 's' : {
        char* p = va_arg(va, char*);
   13f3c:	9b24      	ldr	r3, [sp, #144]	; 0x90
   13f3e:	1d1a      	adds	r2, r3, #4
   13f40:	9224      	str	r2, [sp, #144]	; 0x90
   13f42:	681b      	ldr	r3, [r3, #0]
   13f44:	9318      	str	r3, [sp, #96]	; 0x60
        unsigned int l = _strlen(p);
   13f46:	9818      	ldr	r0, [sp, #96]	; 0x60
   13f48:	f7fe ff98 	bl	12e7c <_strlen(char const*)>
   13f4c:	9017      	str	r0, [sp, #92]	; 0x5c
        // pre padding
        if (flags & FLAGS_PRECISION) {
   13f4e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   13f50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
   13f54:	2b00      	cmp	r3, #0
   13f56:	d007      	beq.n	13f68 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x798>
          l = (l < precision ? l : precision);
   13f58:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   13f5a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   13f5c:	429a      	cmp	r2, r3
   13f5e:	d201      	bcs.n	13f64 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x794>
   13f60:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   13f62:	e000      	b.n	13f66 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x796>
   13f64:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   13f66:	9317      	str	r3, [sp, #92]	; 0x5c
        }
        if (!(flags & FLAGS_LEFT)) {
   13f68:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   13f6a:	f003 0302 	and.w	r3, r3, #2
   13f6e:	2b00      	cmp	r3, #0
   13f70:	d113      	bne.n	13f9a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7ca>
          while (l++ < width) {
   13f72:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   13f74:	1c5a      	adds	r2, r3, #1
   13f76:	9217      	str	r2, [sp, #92]	; 0x5c
   13f78:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   13f7a:	429a      	cmp	r2, r3
   13f7c:	bf8c      	ite	hi
   13f7e:	2301      	movhi	r3, #1
   13f80:	2300      	movls	r3, #0
   13f82:	b2db      	uxtb	r3, r3
   13f84:	2b00      	cmp	r3, #0
   13f86:	d008      	beq.n	13f9a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7ca>
            out(' ', buffer, idx++, maxlen);
   13f88:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   13f8a:	1c53      	adds	r3, r2, #1
   13f8c:	931b      	str	r3, [sp, #108]	; 0x6c
   13f8e:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   13f90:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   13f92:	990c      	ldr	r1, [sp, #48]	; 0x30
   13f94:	2020      	movs	r0, #32
   13f96:	47a0      	blx	r4
          while (l++ < width) {
   13f98:	e7eb      	b.n	13f72 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7a2>
          }
        }
        // string output
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
   13f9a:	9b18      	ldr	r3, [sp, #96]	; 0x60
   13f9c:	781b      	ldrb	r3, [r3, #0]
   13f9e:	2b00      	cmp	r3, #0
   13fa0:	d00b      	beq.n	13fba <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7ea>
   13fa2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   13fa4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
   13fa8:	2b00      	cmp	r3, #0
   13faa:	d004      	beq.n	13fb6 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7e6>
   13fac:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   13fae:	1e5a      	subs	r2, r3, #1
   13fb0:	921d      	str	r2, [sp, #116]	; 0x74
   13fb2:	2b00      	cmp	r3, #0
   13fb4:	d001      	beq.n	13fba <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7ea>
   13fb6:	2301      	movs	r3, #1
   13fb8:	e000      	b.n	13fbc <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7ec>
   13fba:	2300      	movs	r3, #0
   13fbc:	2b00      	cmp	r3, #0
   13fbe:	d00b      	beq.n	13fd8 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x808>
          out(*(p++), buffer, idx++, maxlen);
   13fc0:	9b18      	ldr	r3, [sp, #96]	; 0x60
   13fc2:	1c5a      	adds	r2, r3, #1
   13fc4:	9218      	str	r2, [sp, #96]	; 0x60
   13fc6:	7818      	ldrb	r0, [r3, #0]
   13fc8:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   13fca:	1c53      	adds	r3, r2, #1
   13fcc:	931b      	str	r3, [sp, #108]	; 0x6c
   13fce:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   13fd0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   13fd2:	990c      	ldr	r1, [sp, #48]	; 0x30
   13fd4:	47a0      	blx	r4
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
   13fd6:	e7e0      	b.n	13f9a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7ca>
        }
        // post padding
        if (flags & FLAGS_LEFT) {
   13fd8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   13fda:	f003 0302 	and.w	r3, r3, #2
   13fde:	2b00      	cmp	r3, #0
   13fe0:	d013      	beq.n	1400a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x83a>
          while (l++ < width) {
   13fe2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   13fe4:	1c5a      	adds	r2, r3, #1
   13fe6:	9217      	str	r2, [sp, #92]	; 0x5c
   13fe8:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   13fea:	429a      	cmp	r2, r3
   13fec:	bf8c      	ite	hi
   13fee:	2301      	movhi	r3, #1
   13ff0:	2300      	movls	r3, #0
   13ff2:	b2db      	uxtb	r3, r3
   13ff4:	2b00      	cmp	r3, #0
   13ff6:	d008      	beq.n	1400a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x83a>
            out(' ', buffer, idx++, maxlen);
   13ff8:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   13ffa:	1c53      	adds	r3, r2, #1
   13ffc:	931b      	str	r3, [sp, #108]	; 0x6c
   13ffe:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   14000:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   14002:	990c      	ldr	r1, [sp, #48]	; 0x30
   14004:	2020      	movs	r0, #32
   14006:	47a0      	blx	r4
          while (l++ < width) {
   14008:	e7eb      	b.n	13fe2 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x812>
          }
        }
        format++;
   1400a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1400c:	3301      	adds	r3, #1
   1400e:	930a      	str	r3, [sp, #40]	; 0x28
        break;
   14010:	e03c      	b.n	1408c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8bc>
      }

      case 'p' : {
        width = sizeof(void*) * 2U;
   14012:	2308      	movs	r3, #8
   14014:	931e      	str	r3, [sp, #120]	; 0x78
        flags |= FLAGS_ZEROPAD | FLAGS_UPPERCASE;
   14016:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   14018:	f043 0321 	orr.w	r3, r3, #33	; 0x21
   1401c:	931f      	str	r3, [sp, #124]	; 0x7c
#if defined(PRINTF_SUPPORT_LONG_LONG)
        const bool is_ll = sizeof(uintptr_t) == sizeof(long long);
   1401e:	2300      	movs	r3, #0
   14020:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
        if (is_ll) {
          idx = _ntoa_long_long(out, buffer, idx, maxlen, (uintptr_t)va_arg(va, void*), false, 16U, precision, width, flags);
        }
        else {
#endif
          idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void*)), false, 16U, precision, width, flags);
   14024:	9b24      	ldr	r3, [sp, #144]	; 0x90
   14026:	1d1a      	adds	r2, r3, #4
   14028:	9224      	str	r2, [sp, #144]	; 0x90
   1402a:	681b      	ldr	r3, [r3, #0]
   1402c:	461a      	mov	r2, r3
   1402e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   14030:	9305      	str	r3, [sp, #20]
   14032:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   14034:	9304      	str	r3, [sp, #16]
   14036:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   14038:	9303      	str	r3, [sp, #12]
   1403a:	2310      	movs	r3, #16
   1403c:	9302      	str	r3, [sp, #8]
   1403e:	2300      	movs	r3, #0
   14040:	9301      	str	r3, [sp, #4]
   14042:	9200      	str	r2, [sp, #0]
   14044:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   14046:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   14048:	990c      	ldr	r1, [sp, #48]	; 0x30
   1404a:	980d      	ldr	r0, [sp, #52]	; 0x34
   1404c:	f7ff f8b8 	bl	131c0 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)>
   14050:	901b      	str	r0, [sp, #108]	; 0x6c
#if defined(PRINTF_SUPPORT_LONG_LONG)
        }
#endif
        format++;
   14052:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   14054:	3301      	adds	r3, #1
   14056:	930a      	str	r3, [sp, #40]	; 0x28
        break;
   14058:	e018      	b.n	1408c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8bc>
      }

      case '%' :
        out('%', buffer, idx++, maxlen);
   1405a:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   1405c:	1c53      	adds	r3, r2, #1
   1405e:	931b      	str	r3, [sp, #108]	; 0x6c
   14060:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   14062:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   14064:	990c      	ldr	r1, [sp, #48]	; 0x30
   14066:	2025      	movs	r0, #37	; 0x25
   14068:	47a0      	blx	r4
        format++;
   1406a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1406c:	3301      	adds	r3, #1
   1406e:	930a      	str	r3, [sp, #40]	; 0x28
        break;
   14070:	e00c      	b.n	1408c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8bc>

      default :
        out(*format, buffer, idx++, maxlen);
   14072:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   14074:	7818      	ldrb	r0, [r3, #0]
   14076:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   14078:	1c53      	adds	r3, r2, #1
   1407a:	931b      	str	r3, [sp, #108]	; 0x6c
   1407c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   1407e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   14080:	990c      	ldr	r1, [sp, #48]	; 0x30
   14082:	47a0      	blx	r4
        format++;
   14084:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   14086:	3301      	adds	r3, #1
   14088:	930a      	str	r3, [sp, #40]	; 0x28
        break;
   1408a:	bf00      	nop
  while (*format)
   1408c:	f7ff bbb3 	b.w	137f6 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x26>
    }
  }

  // termination
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
   14090:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   14092:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   14094:	429a      	cmp	r2, r3
   14096:	d302      	bcc.n	1409e <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8ce>
   14098:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1409a:	1e5a      	subs	r2, r3, #1
   1409c:	e000      	b.n	140a0 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8d0>
   1409e:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   140a0:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   140a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   140a4:	990c      	ldr	r1, [sp, #48]	; 0x30
   140a6:	2000      	movs	r0, #0
   140a8:	47a0      	blx	r4

  // return written chars without terminating \0
  return (int)idx;
   140aa:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
   140ac:	4633      	mov	r3, r6
   140ae:	4619      	mov	r1, r3
   140b0:	4803      	ldr	r0, [pc, #12]	; (140c0 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8f0>)
   140b2:	f7fe fdc1 	bl	12c38 <__cyg_profile_func_exit>
   140b6:	4623      	mov	r3, r4
}
   140b8:	4618      	mov	r0, r3
   140ba:	b020      	add	sp, #128	; 0x80
   140bc:	bd70      	pop	{r4, r5, r6, pc}
   140be:	bf00      	nop
   140c0:	000137d1 	.word	0x000137d1

000140c4 <printf>:

///////////////////////////////////////////////////////////////////////////////


int printf(const char* format, ...)
{
   140c4:	b40f      	push	{r0, r1, r2, r3}
   140c6:	b530      	push	{r4, r5, lr}
   140c8:	b087      	sub	sp, #28
   140ca:	4675      	mov	r5, lr
   140cc:	462b      	mov	r3, r5
   140ce:	4619      	mov	r1, r3
   140d0:	480d      	ldr	r0, [pc, #52]	; (14108 <printf+0x44>)
   140d2:	f7fe fd9d 	bl	12c10 <__cyg_profile_func_enter>
  va_list va;
  va_start(va, format);
   140d6:	ab0b      	add	r3, sp, #44	; 0x2c
   140d8:	9304      	str	r3, [sp, #16]
  char buffer[1];
  const int ret = _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
   140da:	a903      	add	r1, sp, #12
   140dc:	9b04      	ldr	r3, [sp, #16]
   140de:	9300      	str	r3, [sp, #0]
   140e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   140e2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   140e6:	4809      	ldr	r0, [pc, #36]	; (1410c <printf+0x48>)
   140e8:	f7ff fb72 	bl	137d0 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)>
   140ec:	9005      	str	r0, [sp, #20]
  va_end(va);
  return ret;
   140ee:	9c05      	ldr	r4, [sp, #20]
   140f0:	462b      	mov	r3, r5
   140f2:	4619      	mov	r1, r3
   140f4:	4804      	ldr	r0, [pc, #16]	; (14108 <printf+0x44>)
   140f6:	f7fe fd9f 	bl	12c38 <__cyg_profile_func_exit>
   140fa:	4623      	mov	r3, r4
}
   140fc:	4618      	mov	r0, r3
   140fe:	b007      	add	sp, #28
   14100:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   14104:	b004      	add	sp, #16
   14106:	4770      	bx	lr
   14108:	000140c5 	.word	0x000140c5
   1410c:	00012e39 	.word	0x00012e39

00014110 <PinInterface::PinInterface()>:
class PinInterface
   14110:	b530      	push	{r4, r5, lr}
   14112:	b083      	sub	sp, #12
   14114:	4675      	mov	r5, lr
   14116:	9001      	str	r0, [sp, #4]
   14118:	462b      	mov	r3, r5
   1411a:	4619      	mov	r1, r3
   1411c:	4807      	ldr	r0, [pc, #28]	; (1413c <PinInterface::PinInterface()+0x2c>)
   1411e:	f7fe fd77 	bl	12c10 <__cyg_profile_func_enter>
   14122:	4a07      	ldr	r2, [pc, #28]	; (14140 <PinInterface::PinInterface()+0x30>)
   14124:	9b01      	ldr	r3, [sp, #4]
   14126:	601a      	str	r2, [r3, #0]
   14128:	9c01      	ldr	r4, [sp, #4]
   1412a:	462b      	mov	r3, r5
   1412c:	4619      	mov	r1, r3
   1412e:	4803      	ldr	r0, [pc, #12]	; (1413c <PinInterface::PinInterface()+0x2c>)
   14130:	f7fe fd82 	bl	12c38 <__cyg_profile_func_exit>
   14134:	4623      	mov	r3, r4
   14136:	4618      	mov	r0, r3
   14138:	b003      	add	sp, #12
   1413a:	bd30      	pop	{r4, r5, pc}
   1413c:	00014111 	.word	0x00014111
   14140:	000190b0 	.word	0x000190b0

00014144 <Pin::Pin(unsigned char, unsigned char)>:
  constexpr Pin(uint8_t port_number, uint8_t pin_number)
   14144:	b530      	push	{r4, r5, lr}
   14146:	b083      	sub	sp, #12
   14148:	4675      	mov	r5, lr
   1414a:	9001      	str	r0, [sp, #4]
   1414c:	460b      	mov	r3, r1
   1414e:	f88d 3003 	strb.w	r3, [sp, #3]
   14152:	4613      	mov	r3, r2
   14154:	f88d 3002 	strb.w	r3, [sp, #2]
   14158:	462b      	mov	r3, r5
   1415a:	4619      	mov	r1, r3
   1415c:	480d      	ldr	r0, [pc, #52]	; (14194 <Pin::Pin(unsigned char, unsigned char)+0x50>)
   1415e:	f7fe fd57 	bl	12c10 <__cyg_profile_func_enter>
      : port_(port_number), pin_(pin_number)
   14162:	9b01      	ldr	r3, [sp, #4]
   14164:	4618      	mov	r0, r3
   14166:	f7ff ffd3 	bl	14110 <PinInterface::PinInterface()>
   1416a:	4a0b      	ldr	r2, [pc, #44]	; (14198 <Pin::Pin(unsigned char, unsigned char)+0x54>)
   1416c:	9b01      	ldr	r3, [sp, #4]
   1416e:	601a      	str	r2, [r3, #0]
   14170:	9b01      	ldr	r3, [sp, #4]
   14172:	f89d 2003 	ldrb.w	r2, [sp, #3]
   14176:	711a      	strb	r2, [r3, #4]
   14178:	9b01      	ldr	r3, [sp, #4]
   1417a:	f89d 2002 	ldrb.w	r2, [sp, #2]
   1417e:	715a      	strb	r2, [r3, #5]
  }
   14180:	9c01      	ldr	r4, [sp, #4]
   14182:	462b      	mov	r3, r5
   14184:	4619      	mov	r1, r3
   14186:	4803      	ldr	r0, [pc, #12]	; (14194 <Pin::Pin(unsigned char, unsigned char)+0x50>)
   14188:	f7fe fd56 	bl	12c38 <__cyg_profile_func_exit>
   1418c:	4623      	mov	r3, r4
   1418e:	4618      	mov	r0, r3
   14190:	b003      	add	sp, #12
   14192:	bd30      	pop	{r4, r5, pc}
   14194:	00014145 	.word	0x00014145
   14198:	00017a14 	.word	0x00017a14

0001419c <Wait(unsigned long long)::{lambda()#1}::operator()() const>:

inline Status Wait(uint64_t timeout)
{
  return Wait(timeout, []() -> bool { return false; });
   1419c:	b530      	push	{r4, r5, lr}
   1419e:	b083      	sub	sp, #12
   141a0:	4675      	mov	r5, lr
   141a2:	9001      	str	r0, [sp, #4]
   141a4:	462b      	mov	r3, r5
   141a6:	4619      	mov	r1, r3
   141a8:	4806      	ldr	r0, [pc, #24]	; (141c4 <Wait(unsigned long long)::{lambda()#1}::operator()() const+0x28>)
   141aa:	f7fe fd31 	bl	12c10 <__cyg_profile_func_enter>
   141ae:	2400      	movs	r4, #0
   141b0:	462b      	mov	r3, r5
   141b2:	4619      	mov	r1, r3
   141b4:	4803      	ldr	r0, [pc, #12]	; (141c4 <Wait(unsigned long long)::{lambda()#1}::operator()() const+0x28>)
   141b6:	f7fe fd3f 	bl	12c38 <__cyg_profile_func_exit>
   141ba:	4623      	mov	r3, r4
   141bc:	4618      	mov	r0, r3
   141be:	b003      	add	sp, #12
   141c0:	bd30      	pop	{r4, r5, pc}
   141c2:	bf00      	nop
   141c4:	0001419d 	.word	0x0001419d

000141c8 <Wait(unsigned long long)::{lambda()#1}::_FUN()>:
   141c8:	b538      	push	{r3, r4, r5, lr}
   141ca:	4674      	mov	r4, lr
   141cc:	4623      	mov	r3, r4
   141ce:	4619      	mov	r1, r3
   141d0:	4807      	ldr	r0, [pc, #28]	; (141f0 <Wait(unsigned long long)::{lambda()#1}::_FUN()+0x28>)
   141d2:	f7fe fd1d 	bl	12c10 <__cyg_profile_func_enter>
   141d6:	2000      	movs	r0, #0
   141d8:	f7ff ffe0 	bl	1419c <Wait(unsigned long long)::{lambda()#1}::operator()() const>
   141dc:	4603      	mov	r3, r0
   141de:	461d      	mov	r5, r3
   141e0:	4623      	mov	r3, r4
   141e2:	4619      	mov	r1, r3
   141e4:	4802      	ldr	r0, [pc, #8]	; (141f0 <Wait(unsigned long long)::{lambda()#1}::_FUN()+0x28>)
   141e6:	f7fe fd27 	bl	12c38 <__cyg_profile_func_exit>
   141ea:	462b      	mov	r3, r5
   141ec:	4618      	mov	r0, r3
   141ee:	bd38      	pop	{r3, r4, r5, pc}
   141f0:	000141c9 	.word	0x000141c9

000141f4 <Wait(unsigned long long)>:
{
   141f4:	b5f0      	push	{r4, r5, r6, r7, lr}
   141f6:	b089      	sub	sp, #36	; 0x24
   141f8:	4675      	mov	r5, lr
   141fa:	e9cd 0100 	strd	r0, r1, [sp]
   141fe:	462b      	mov	r3, r5
   14200:	4619      	mov	r1, r3
   14202:	482b      	ldr	r0, [pc, #172]	; (142b0 <Wait(unsigned long long)+0xbc>)
   14204:	f7fe fd04 	bl	12c10 <__cyg_profile_func_enter>
   14208:	e9dd 3400 	ldrd	r3, r4, [sp]
   1420c:	e9cd 3406 	strd	r3, r4, [sp, #24]
   14210:	f88d 6008 	strb.w	r6, [sp, #8]
   14214:	462b      	mov	r3, r5
   14216:	4619      	mov	r1, r3
   14218:	4826      	ldr	r0, [pc, #152]	; (142b4 <Wait(unsigned long long)+0xc0>)
   1421a:	f7fe fcf9 	bl	12c10 <__cyg_profile_func_enter>
  uint64_t timeout_time = 0;
   1421e:	f04f 0300 	mov.w	r3, #0
   14222:	f04f 0400 	mov.w	r4, #0
   14226:	e9cd 3404 	strd	r3, r4, [sp, #16]
  if (timeout == kMaxWait)
   1422a:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
   1422e:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
   14232:	bf08      	it	eq
   14234:	f1b3 3fff 	cmpeq.w	r3, #4294967295	; 0xffffffff
   14238:	d106      	bne.n	14248 <Wait(unsigned long long)+0x54>
    timeout_time = kMaxWait;
   1423a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1423e:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   14242:	e9cd 3404 	strd	r3, r4, [sp, #16]
   14246:	e00a      	b.n	1425e <Wait(unsigned long long)+0x6a>
    timeout_time = Milliseconds() + timeout;
   14248:	f7fc fb32 	bl	108b0 <Milliseconds()>
   1424c:	460a      	mov	r2, r1
   1424e:	4601      	mov	r1, r0
   14250:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
   14254:	185e      	adds	r6, r3, r1
   14256:	eb44 0702 	adc.w	r7, r4, r2
   1425a:	e9cd 6704 	strd	r6, r7, [sp, #16]
  Status status = Status::kTimedOut;
   1425e:	2301      	movs	r3, #1
   14260:	9303      	str	r3, [sp, #12]
  while (Milliseconds() < timeout_time)
   14262:	f7fc fb25 	bl	108b0 <Milliseconds()>
   14266:	460a      	mov	r2, r1
   14268:	4601      	mov	r1, r0
   1426a:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
   1426e:	42a2      	cmp	r2, r4
   14270:	bf08      	it	eq
   14272:	4299      	cmpeq	r1, r3
   14274:	bf34      	ite	cc
   14276:	2301      	movcc	r3, #1
   14278:	2300      	movcs	r3, #0
   1427a:	b2db      	uxtb	r3, r3
   1427c:	2b00      	cmp	r3, #0
   1427e:	d008      	beq.n	14292 <Wait(unsigned long long)+0x9e>
    if (is_done())
   14280:	ab02      	add	r3, sp, #8
   14282:	4618      	mov	r0, r3
   14284:	f7ff ff8a 	bl	1419c <Wait(unsigned long long)::{lambda()#1}::operator()() const>
   14288:	4603      	mov	r3, r0
   1428a:	2b00      	cmp	r3, #0
   1428c:	d0e9      	beq.n	14262 <Wait(unsigned long long)+0x6e>
      status = Status::kSuccess;
   1428e:	2300      	movs	r3, #0
   14290:	9303      	str	r3, [sp, #12]
  return status;
   14292:	9c03      	ldr	r4, [sp, #12]
   14294:	462b      	mov	r3, r5
   14296:	4619      	mov	r1, r3
   14298:	4806      	ldr	r0, [pc, #24]	; (142b4 <Wait(unsigned long long)+0xc0>)
   1429a:	f7fe fccd 	bl	12c38 <__cyg_profile_func_exit>
   1429e:	462b      	mov	r3, r5
   142a0:	4619      	mov	r1, r3
   142a2:	4803      	ldr	r0, [pc, #12]	; (142b0 <Wait(unsigned long long)+0xbc>)
   142a4:	f7fe fcc8 	bl	12c38 <__cyg_profile_func_exit>
  return Wait(timeout, []() -> bool { return false; });
   142a8:	4623      	mov	r3, r4
}
   142aa:	4618      	mov	r0, r3
   142ac:	b009      	add	sp, #36	; 0x24
   142ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
   142b0:	000141f5 	.word	0x000141f5
   142b4:	00016ab1 	.word	0x00016ab1

000142b8 <Delay(unsigned long long)>:

// Delay the system for a duration of time
inline void Delay([[maybe_unused]] uint64_t delay_time_ms)
{
   142b8:	b510      	push	{r4, lr}
   142ba:	b082      	sub	sp, #8
   142bc:	4674      	mov	r4, lr
   142be:	e9cd 0100 	strd	r0, r1, [sp]
   142c2:	4623      	mov	r3, r4
   142c4:	4619      	mov	r1, r3
   142c6:	4807      	ldr	r0, [pc, #28]	; (142e4 <Delay(unsigned long long)+0x2c>)
   142c8:	f7fe fca2 	bl	12c10 <__cyg_profile_func_enter>
#if defined(HOST_TEST)
  return;
#else
  Wait(delay_time_ms);
   142cc:	e9dd 0100 	ldrd	r0, r1, [sp]
   142d0:	f7ff ff90 	bl	141f4 <Wait(unsigned long long)>
   142d4:	4623      	mov	r3, r4
   142d6:	4619      	mov	r1, r3
   142d8:	4802      	ldr	r0, [pc, #8]	; (142e4 <Delay(unsigned long long)+0x2c>)
   142da:	f7fe fcad 	bl	12c38 <__cyg_profile_func_exit>
#endif  // HOST_TEST
}
   142de:	bf00      	nop
   142e0:	b002      	add	sp, #8
   142e2:	bd10      	pop	{r4, pc}
   142e4:	000142b9 	.word	0x000142b9

000142e8 <GpioInterface::GpioInterface()>:
#include "L0_LowLevel/LPC40xx.h"
#include "L1_Drivers/pin.hpp"
#include "utility/enum.hpp"
#include "utility/log.hpp"

class GpioInterface
   142e8:	b530      	push	{r4, r5, lr}
   142ea:	b083      	sub	sp, #12
   142ec:	4675      	mov	r5, lr
   142ee:	9001      	str	r0, [sp, #4]
   142f0:	462b      	mov	r3, r5
   142f2:	4619      	mov	r1, r3
   142f4:	4807      	ldr	r0, [pc, #28]	; (14314 <GpioInterface::GpioInterface()+0x2c>)
   142f6:	f7fe fc8b 	bl	12c10 <__cyg_profile_func_enter>
   142fa:	4a07      	ldr	r2, [pc, #28]	; (14318 <GpioInterface::GpioInterface()+0x30>)
   142fc:	9b01      	ldr	r3, [sp, #4]
   142fe:	601a      	str	r2, [r3, #0]
   14300:	9c01      	ldr	r4, [sp, #4]
   14302:	462b      	mov	r3, r5
   14304:	4619      	mov	r1, r3
   14306:	4803      	ldr	r0, [pc, #12]	; (14314 <GpioInterface::GpioInterface()+0x2c>)
   14308:	f7fe fc96 	bl	12c38 <__cyg_profile_func_exit>
   1430c:	4623      	mov	r3, r4
   1430e:	4618      	mov	r0, r3
   14310:	b003      	add	sp, #12
   14312:	bd30      	pop	{r4, r5, pc}
   14314:	000142e9 	.word	0x000142e9
   14318:	00019068 	.word	0x00019068

0001431c <Gpio::Gpio(unsigned char, unsigned char)>:
  };

  inline static volatile uint32_t * port_status = &(LPC_GPIOINT->IntStatus);

  // For port 0-4, pins 0-31 are available. Port 5 only has pins 0-4 available.
  constexpr Gpio(uint8_t port_number, uint8_t pin_number)
   1431c:	b530      	push	{r4, r5, lr}
   1431e:	b083      	sub	sp, #12
   14320:	4675      	mov	r5, lr
   14322:	9001      	str	r0, [sp, #4]
   14324:	460b      	mov	r3, r1
   14326:	f88d 3003 	strb.w	r3, [sp, #3]
   1432a:	4613      	mov	r3, r2
   1432c:	f88d 3002 	strb.w	r3, [sp, #2]
   14330:	462b      	mov	r3, r5
   14332:	4619      	mov	r1, r3
   14334:	4816      	ldr	r0, [pc, #88]	; (14390 <Gpio::Gpio(unsigned char, unsigned char)+0x74>)
   14336:	f7fe fc6b 	bl	12c10 <__cyg_profile_func_enter>
      : interupt_port_(false),
        pin_(&lpc40xx_pin_),
        lpc40xx_pin_(port_number, pin_number)
   1433a:	9b01      	ldr	r3, [sp, #4]
   1433c:	4618      	mov	r0, r3
   1433e:	f7ff ffd3 	bl	142e8 <GpioInterface::GpioInterface()>
   14342:	4a14      	ldr	r2, [pc, #80]	; (14394 <Gpio::Gpio(unsigned char, unsigned char)+0x78>)
   14344:	9b01      	ldr	r3, [sp, #4]
   14346:	601a      	str	r2, [r3, #0]
   14348:	9b01      	ldr	r3, [sp, #4]
   1434a:	2200      	movs	r2, #0
   1434c:	711a      	strb	r2, [r3, #4]
   1434e:	9b01      	ldr	r3, [sp, #4]
   14350:	f103 020c 	add.w	r2, r3, #12
   14354:	9b01      	ldr	r3, [sp, #4]
   14356:	609a      	str	r2, [r3, #8]
   14358:	9b01      	ldr	r3, [sp, #4]
   1435a:	330c      	adds	r3, #12
   1435c:	f89d 2002 	ldrb.w	r2, [sp, #2]
   14360:	f89d 1003 	ldrb.w	r1, [sp, #3]
   14364:	4618      	mov	r0, r3
   14366:	f7ff feed 	bl	14144 <Pin::Pin(unsigned char, unsigned char)>
  {
    interupt_port_ = (port_number == 2) ? 1 : 0;
   1436a:	f89d 3003 	ldrb.w	r3, [sp, #3]
   1436e:	2b02      	cmp	r3, #2
   14370:	d101      	bne.n	14376 <Gpio::Gpio(unsigned char, unsigned char)+0x5a>
   14372:	2201      	movs	r2, #1
   14374:	e000      	b.n	14378 <Gpio::Gpio(unsigned char, unsigned char)+0x5c>
   14376:	2200      	movs	r2, #0
   14378:	9b01      	ldr	r3, [sp, #4]
   1437a:	711a      	strb	r2, [r3, #4]
  }
   1437c:	9c01      	ldr	r4, [sp, #4]
   1437e:	462b      	mov	r3, r5
   14380:	4619      	mov	r1, r3
   14382:	4803      	ldr	r0, [pc, #12]	; (14390 <Gpio::Gpio(unsigned char, unsigned char)+0x74>)
   14384:	f7fe fc58 	bl	12c38 <__cyg_profile_func_exit>
   14388:	4623      	mov	r3, r4
   1438a:	4618      	mov	r0, r3
   1438c:	b003      	add	sp, #12
   1438e:	bd30      	pop	{r4, r5, pc}
   14390:	0001431d 	.word	0x0001431d
   14394:	00019020 	.word	0x00019020

00014398 <Gpio::SetAsInput()>:
      : interupt_port_(false), pin_(pin), lpc40xx_pin_(Pin::CreateInactivePin())
  {
    interupt_port_ = pin_->GetPort();
  }
  // Sets the GPIO pin direction as input
  void SetAsInput(void) override
   14398:	b530      	push	{r4, r5, lr}
   1439a:	b083      	sub	sp, #12
   1439c:	4675      	mov	r5, lr
   1439e:	9001      	str	r0, [sp, #4]
   143a0:	462b      	mov	r3, r5
   143a2:	4619      	mov	r1, r3
   143a4:	4819      	ldr	r0, [pc, #100]	; (1440c <Gpio::SetAsInput()+0x74>)
   143a6:	f7fe fc33 	bl	12c10 <__cyg_profile_func_enter>
  {
    pin_->SetPinFunction(kGpioFunction);
   143aa:	9b01      	ldr	r3, [sp, #4]
   143ac:	689a      	ldr	r2, [r3, #8]
   143ae:	9b01      	ldr	r3, [sp, #4]
   143b0:	689b      	ldr	r3, [r3, #8]
   143b2:	681b      	ldr	r3, [r3, #0]
   143b4:	681b      	ldr	r3, [r3, #0]
   143b6:	2100      	movs	r1, #0
   143b8:	4610      	mov	r0, r2
   143ba:	4798      	blx	r3
    gpio_port[pin_->GetPort()]->DIR &= ~(1 << pin_->GetPin());
   143bc:	9b01      	ldr	r3, [sp, #4]
   143be:	689a      	ldr	r2, [r3, #8]
   143c0:	9b01      	ldr	r3, [sp, #4]
   143c2:	689b      	ldr	r3, [r3, #8]
   143c4:	681b      	ldr	r3, [r3, #0]
   143c6:	3330      	adds	r3, #48	; 0x30
   143c8:	681b      	ldr	r3, [r3, #0]
   143ca:	4610      	mov	r0, r2
   143cc:	4798      	blx	r3
   143ce:	4603      	mov	r3, r0
   143d0:	461a      	mov	r2, r3
   143d2:	2301      	movs	r3, #1
   143d4:	4093      	lsls	r3, r2
   143d6:	43dc      	mvns	r4, r3
   143d8:	9b01      	ldr	r3, [sp, #4]
   143da:	689a      	ldr	r2, [r3, #8]
   143dc:	9b01      	ldr	r3, [sp, #4]
   143de:	689b      	ldr	r3, [r3, #8]
   143e0:	681b      	ldr	r3, [r3, #0]
   143e2:	332c      	adds	r3, #44	; 0x2c
   143e4:	681b      	ldr	r3, [r3, #0]
   143e6:	4610      	mov	r0, r2
   143e8:	4798      	blx	r3
   143ea:	4603      	mov	r3, r0
   143ec:	461a      	mov	r2, r3
   143ee:	4b08      	ldr	r3, [pc, #32]	; (14410 <Gpio::SetAsInput()+0x78>)
   143f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   143f4:	681a      	ldr	r2, [r3, #0]
   143f6:	4621      	mov	r1, r4
   143f8:	400a      	ands	r2, r1
   143fa:	601a      	str	r2, [r3, #0]
   143fc:	462b      	mov	r3, r5
   143fe:	4619      	mov	r1, r3
   14400:	4802      	ldr	r0, [pc, #8]	; (1440c <Gpio::SetAsInput()+0x74>)
   14402:	f7fe fc19 	bl	12c38 <__cyg_profile_func_exit>
  }
   14406:	bf00      	nop
   14408:	b003      	add	sp, #12
   1440a:	bd30      	pop	{r4, r5, pc}
   1440c:	00014399 	.word	0x00014399
   14410:	100001a0 	.word	0x100001a0

00014414 <Gpio::SetAsOutput()>:
  // Sets the GPIO pin direction as output
  void SetAsOutput(void) override
   14414:	b530      	push	{r4, r5, lr}
   14416:	b083      	sub	sp, #12
   14418:	4675      	mov	r5, lr
   1441a:	9001      	str	r0, [sp, #4]
   1441c:	462b      	mov	r3, r5
   1441e:	4619      	mov	r1, r3
   14420:	4819      	ldr	r0, [pc, #100]	; (14488 <Gpio::SetAsOutput()+0x74>)
   14422:	f7fe fbf5 	bl	12c10 <__cyg_profile_func_enter>
  {
    pin_->SetPinFunction(kGpioFunction);
   14426:	9b01      	ldr	r3, [sp, #4]
   14428:	689a      	ldr	r2, [r3, #8]
   1442a:	9b01      	ldr	r3, [sp, #4]
   1442c:	689b      	ldr	r3, [r3, #8]
   1442e:	681b      	ldr	r3, [r3, #0]
   14430:	681b      	ldr	r3, [r3, #0]
   14432:	2100      	movs	r1, #0
   14434:	4610      	mov	r0, r2
   14436:	4798      	blx	r3
    gpio_port[pin_->GetPort()]->DIR |= (1 << pin_->GetPin());
   14438:	9b01      	ldr	r3, [sp, #4]
   1443a:	689a      	ldr	r2, [r3, #8]
   1443c:	9b01      	ldr	r3, [sp, #4]
   1443e:	689b      	ldr	r3, [r3, #8]
   14440:	681b      	ldr	r3, [r3, #0]
   14442:	3330      	adds	r3, #48	; 0x30
   14444:	681b      	ldr	r3, [r3, #0]
   14446:	4610      	mov	r0, r2
   14448:	4798      	blx	r3
   1444a:	4603      	mov	r3, r0
   1444c:	461a      	mov	r2, r3
   1444e:	2301      	movs	r3, #1
   14450:	fa03 f402 	lsl.w	r4, r3, r2
   14454:	9b01      	ldr	r3, [sp, #4]
   14456:	689a      	ldr	r2, [r3, #8]
   14458:	9b01      	ldr	r3, [sp, #4]
   1445a:	689b      	ldr	r3, [r3, #8]
   1445c:	681b      	ldr	r3, [r3, #0]
   1445e:	332c      	adds	r3, #44	; 0x2c
   14460:	681b      	ldr	r3, [r3, #0]
   14462:	4610      	mov	r0, r2
   14464:	4798      	blx	r3
   14466:	4603      	mov	r3, r0
   14468:	461a      	mov	r2, r3
   1446a:	4b08      	ldr	r3, [pc, #32]	; (1448c <Gpio::SetAsOutput()+0x78>)
   1446c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   14470:	681a      	ldr	r2, [r3, #0]
   14472:	4621      	mov	r1, r4
   14474:	430a      	orrs	r2, r1
   14476:	601a      	str	r2, [r3, #0]
   14478:	462b      	mov	r3, r5
   1447a:	4619      	mov	r1, r3
   1447c:	4802      	ldr	r0, [pc, #8]	; (14488 <Gpio::SetAsOutput()+0x74>)
   1447e:	f7fe fbdb 	bl	12c38 <__cyg_profile_func_exit>
  }
   14482:	bf00      	nop
   14484:	b003      	add	sp, #12
   14486:	bd30      	pop	{r4, r5, pc}
   14488:	00014415 	.word	0x00014415
   1448c:	100001a0 	.word	0x100001a0

00014490 <Gpio::SetDirection(GpioInterface::Direction)>:
  // Sets the GPIO pin direction as output or input depending on the
  // Direction enum parameter
  inline void SetDirection(Direction direction) override
   14490:	b510      	push	{r4, lr}
   14492:	b082      	sub	sp, #8
   14494:	4674      	mov	r4, lr
   14496:	9001      	str	r0, [sp, #4]
   14498:	460b      	mov	r3, r1
   1449a:	f88d 3003 	strb.w	r3, [sp, #3]
   1449e:	4623      	mov	r3, r4
   144a0:	4619      	mov	r1, r3
   144a2:	480b      	ldr	r0, [pc, #44]	; (144d0 <Gpio::SetDirection(GpioInterface::Direction)+0x40>)
   144a4:	f7fe fbb4 	bl	12c10 <__cyg_profile_func_enter>
  {
    (direction) ? SetAsOutput() : SetAsInput();
   144a8:	f89d 3003 	ldrb.w	r3, [sp, #3]
   144ac:	2b00      	cmp	r3, #0
   144ae:	d003      	beq.n	144b8 <Gpio::SetDirection(GpioInterface::Direction)+0x28>
   144b0:	9801      	ldr	r0, [sp, #4]
   144b2:	f7ff ffaf 	bl	14414 <Gpio::SetAsOutput()>
   144b6:	e002      	b.n	144be <Gpio::SetDirection(GpioInterface::Direction)+0x2e>
   144b8:	9801      	ldr	r0, [sp, #4]
   144ba:	f7ff ff6d 	bl	14398 <Gpio::SetAsInput()>
   144be:	4623      	mov	r3, r4
   144c0:	4619      	mov	r1, r3
   144c2:	4803      	ldr	r0, [pc, #12]	; (144d0 <Gpio::SetDirection(GpioInterface::Direction)+0x40>)
   144c4:	f7fe fbb8 	bl	12c38 <__cyg_profile_func_exit>
  }
   144c8:	bf00      	nop
   144ca:	b002      	add	sp, #8
   144cc:	bd10      	pop	{r4, pc}
   144ce:	bf00      	nop
   144d0:	00014491 	.word	0x00014491

000144d4 <Gpio::SetHigh()>:
  // Sets the GPIO output pin to high
  void SetHigh(void) override
   144d4:	b530      	push	{r4, r5, lr}
   144d6:	b083      	sub	sp, #12
   144d8:	4675      	mov	r5, lr
   144da:	9001      	str	r0, [sp, #4]
   144dc:	462b      	mov	r3, r5
   144de:	4619      	mov	r1, r3
   144e0:	4813      	ldr	r0, [pc, #76]	; (14530 <Gpio::SetHigh()+0x5c>)
   144e2:	f7fe fb95 	bl	12c10 <__cyg_profile_func_enter>
  {
    gpio_port[pin_->GetPort()]->SET = (1 << pin_->GetPin());
   144e6:	9b01      	ldr	r3, [sp, #4]
   144e8:	689a      	ldr	r2, [r3, #8]
   144ea:	9b01      	ldr	r3, [sp, #4]
   144ec:	689b      	ldr	r3, [r3, #8]
   144ee:	681b      	ldr	r3, [r3, #0]
   144f0:	3330      	adds	r3, #48	; 0x30
   144f2:	681b      	ldr	r3, [r3, #0]
   144f4:	4610      	mov	r0, r2
   144f6:	4798      	blx	r3
   144f8:	4603      	mov	r3, r0
   144fa:	461a      	mov	r2, r3
   144fc:	2301      	movs	r3, #1
   144fe:	4093      	lsls	r3, r2
   14500:	461c      	mov	r4, r3
   14502:	9b01      	ldr	r3, [sp, #4]
   14504:	689a      	ldr	r2, [r3, #8]
   14506:	9b01      	ldr	r3, [sp, #4]
   14508:	689b      	ldr	r3, [r3, #8]
   1450a:	681b      	ldr	r3, [r3, #0]
   1450c:	332c      	adds	r3, #44	; 0x2c
   1450e:	681b      	ldr	r3, [r3, #0]
   14510:	4610      	mov	r0, r2
   14512:	4798      	blx	r3
   14514:	4603      	mov	r3, r0
   14516:	461a      	mov	r2, r3
   14518:	4b06      	ldr	r3, [pc, #24]	; (14534 <Gpio::SetHigh()+0x60>)
   1451a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   1451e:	619c      	str	r4, [r3, #24]
   14520:	462b      	mov	r3, r5
   14522:	4619      	mov	r1, r3
   14524:	4802      	ldr	r0, [pc, #8]	; (14530 <Gpio::SetHigh()+0x5c>)
   14526:	f7fe fb87 	bl	12c38 <__cyg_profile_func_exit>
  }
   1452a:	bf00      	nop
   1452c:	b003      	add	sp, #12
   1452e:	bd30      	pop	{r4, r5, pc}
   14530:	000144d5 	.word	0x000144d5
   14534:	100001a0 	.word	0x100001a0

00014538 <Gpio::SetLow()>:
  // Sets the GPIO output pin to low
  void SetLow(void) override
   14538:	b530      	push	{r4, r5, lr}
   1453a:	b083      	sub	sp, #12
   1453c:	4675      	mov	r5, lr
   1453e:	9001      	str	r0, [sp, #4]
   14540:	462b      	mov	r3, r5
   14542:	4619      	mov	r1, r3
   14544:	4813      	ldr	r0, [pc, #76]	; (14594 <Gpio::SetLow()+0x5c>)
   14546:	f7fe fb63 	bl	12c10 <__cyg_profile_func_enter>
  {
    gpio_port[pin_->GetPort()]->CLR = (1 << pin_->GetPin());
   1454a:	9b01      	ldr	r3, [sp, #4]
   1454c:	689a      	ldr	r2, [r3, #8]
   1454e:	9b01      	ldr	r3, [sp, #4]
   14550:	689b      	ldr	r3, [r3, #8]
   14552:	681b      	ldr	r3, [r3, #0]
   14554:	3330      	adds	r3, #48	; 0x30
   14556:	681b      	ldr	r3, [r3, #0]
   14558:	4610      	mov	r0, r2
   1455a:	4798      	blx	r3
   1455c:	4603      	mov	r3, r0
   1455e:	461a      	mov	r2, r3
   14560:	2301      	movs	r3, #1
   14562:	4093      	lsls	r3, r2
   14564:	461c      	mov	r4, r3
   14566:	9b01      	ldr	r3, [sp, #4]
   14568:	689a      	ldr	r2, [r3, #8]
   1456a:	9b01      	ldr	r3, [sp, #4]
   1456c:	689b      	ldr	r3, [r3, #8]
   1456e:	681b      	ldr	r3, [r3, #0]
   14570:	332c      	adds	r3, #44	; 0x2c
   14572:	681b      	ldr	r3, [r3, #0]
   14574:	4610      	mov	r0, r2
   14576:	4798      	blx	r3
   14578:	4603      	mov	r3, r0
   1457a:	461a      	mov	r2, r3
   1457c:	4b06      	ldr	r3, [pc, #24]	; (14598 <Gpio::SetLow()+0x60>)
   1457e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   14582:	61dc      	str	r4, [r3, #28]
   14584:	462b      	mov	r3, r5
   14586:	4619      	mov	r1, r3
   14588:	4802      	ldr	r0, [pc, #8]	; (14594 <Gpio::SetLow()+0x5c>)
   1458a:	f7fe fb55 	bl	12c38 <__cyg_profile_func_exit>
  }
   1458e:	bf00      	nop
   14590:	b003      	add	sp, #12
   14592:	bd30      	pop	{r4, r5, pc}
   14594:	00014539 	.word	0x00014539
   14598:	100001a0 	.word	0x100001a0

0001459c <Gpio::Set(GpioInterface::State)>:
  // Sets the GPIO output pin to high or low depending on the State enum
  // parameter
  void Set(State output = kHigh) override
   1459c:	b510      	push	{r4, lr}
   1459e:	b082      	sub	sp, #8
   145a0:	4674      	mov	r4, lr
   145a2:	9001      	str	r0, [sp, #4]
   145a4:	460b      	mov	r3, r1
   145a6:	f88d 3003 	strb.w	r3, [sp, #3]
   145aa:	4623      	mov	r3, r4
   145ac:	4619      	mov	r1, r3
   145ae:	480b      	ldr	r0, [pc, #44]	; (145dc <Gpio::Set(GpioInterface::State)+0x40>)
   145b0:	f7fe fb2e 	bl	12c10 <__cyg_profile_func_enter>
  {
    (output) ? SetHigh() : SetLow();
   145b4:	f89d 3003 	ldrb.w	r3, [sp, #3]
   145b8:	2b00      	cmp	r3, #0
   145ba:	d003      	beq.n	145c4 <Gpio::Set(GpioInterface::State)+0x28>
   145bc:	9801      	ldr	r0, [sp, #4]
   145be:	f7ff ff89 	bl	144d4 <Gpio::SetHigh()>
   145c2:	e002      	b.n	145ca <Gpio::Set(GpioInterface::State)+0x2e>
   145c4:	9801      	ldr	r0, [sp, #4]
   145c6:	f7ff ffb7 	bl	14538 <Gpio::SetLow()>
   145ca:	4623      	mov	r3, r4
   145cc:	4619      	mov	r1, r3
   145ce:	4803      	ldr	r0, [pc, #12]	; (145dc <Gpio::Set(GpioInterface::State)+0x40>)
   145d0:	f7fe fb32 	bl	12c38 <__cyg_profile_func_exit>
  }
   145d4:	bf00      	nop
   145d6:	b002      	add	sp, #8
   145d8:	bd10      	pop	{r4, pc}
   145da:	bf00      	nop
   145dc:	0001459d 	.word	0x0001459d

000145e0 <Gpio::Toggle()>:
  // Toggle the output of a GPIO output pin
  void Toggle() override
   145e0:	b530      	push	{r4, r5, lr}
   145e2:	b083      	sub	sp, #12
   145e4:	4675      	mov	r5, lr
   145e6:	9001      	str	r0, [sp, #4]
   145e8:	462b      	mov	r3, r5
   145ea:	4619      	mov	r1, r3
   145ec:	4815      	ldr	r0, [pc, #84]	; (14644 <Gpio::Toggle()+0x64>)
   145ee:	f7fe fb0f 	bl	12c10 <__cyg_profile_func_enter>
  {
    gpio_port[pin_->GetPort()]->PIN ^= (1 << pin_->GetPin());
   145f2:	9b01      	ldr	r3, [sp, #4]
   145f4:	689a      	ldr	r2, [r3, #8]
   145f6:	9b01      	ldr	r3, [sp, #4]
   145f8:	689b      	ldr	r3, [r3, #8]
   145fa:	681b      	ldr	r3, [r3, #0]
   145fc:	3330      	adds	r3, #48	; 0x30
   145fe:	681b      	ldr	r3, [r3, #0]
   14600:	4610      	mov	r0, r2
   14602:	4798      	blx	r3
   14604:	4603      	mov	r3, r0
   14606:	461a      	mov	r2, r3
   14608:	2301      	movs	r3, #1
   1460a:	fa03 f402 	lsl.w	r4, r3, r2
   1460e:	9b01      	ldr	r3, [sp, #4]
   14610:	689a      	ldr	r2, [r3, #8]
   14612:	9b01      	ldr	r3, [sp, #4]
   14614:	689b      	ldr	r3, [r3, #8]
   14616:	681b      	ldr	r3, [r3, #0]
   14618:	332c      	adds	r3, #44	; 0x2c
   1461a:	681b      	ldr	r3, [r3, #0]
   1461c:	4610      	mov	r0, r2
   1461e:	4798      	blx	r3
   14620:	4603      	mov	r3, r0
   14622:	461a      	mov	r2, r3
   14624:	4b08      	ldr	r3, [pc, #32]	; (14648 <Gpio::Toggle()+0x68>)
   14626:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   1462a:	695a      	ldr	r2, [r3, #20]
   1462c:	4621      	mov	r1, r4
   1462e:	404a      	eors	r2, r1
   14630:	615a      	str	r2, [r3, #20]
   14632:	462b      	mov	r3, r5
   14634:	4619      	mov	r1, r3
   14636:	4803      	ldr	r0, [pc, #12]	; (14644 <Gpio::Toggle()+0x64>)
   14638:	f7fe fafe 	bl	12c38 <__cyg_profile_func_exit>
  }
   1463c:	bf00      	nop
   1463e:	b003      	add	sp, #12
   14640:	bd30      	pop	{r4, r5, pc}
   14642:	bf00      	nop
   14644:	000145e1 	.word	0x000145e1
   14648:	100001a0 	.word	0x100001a0

0001464c <Gpio::ReadState()>:
  // Returns the current State state of the pin
  State ReadState(void) override
   1464c:	b530      	push	{r4, r5, lr}
   1464e:	b085      	sub	sp, #20
   14650:	4675      	mov	r5, lr
   14652:	9001      	str	r0, [sp, #4]
   14654:	462b      	mov	r3, r5
   14656:	4619      	mov	r1, r3
   14658:	4818      	ldr	r0, [pc, #96]	; (146bc <Gpio::ReadState()+0x70>)
   1465a:	f7fe fad9 	bl	12c10 <__cyg_profile_func_enter>
  {
    bool state = (gpio_port[pin_->GetPort()]->PIN >> pin_->GetPin()) & 1;
   1465e:	9b01      	ldr	r3, [sp, #4]
   14660:	689a      	ldr	r2, [r3, #8]
   14662:	9b01      	ldr	r3, [sp, #4]
   14664:	689b      	ldr	r3, [r3, #8]
   14666:	681b      	ldr	r3, [r3, #0]
   14668:	332c      	adds	r3, #44	; 0x2c
   1466a:	681b      	ldr	r3, [r3, #0]
   1466c:	4610      	mov	r0, r2
   1466e:	4798      	blx	r3
   14670:	4603      	mov	r3, r0
   14672:	461a      	mov	r2, r3
   14674:	4b12      	ldr	r3, [pc, #72]	; (146c0 <Gpio::ReadState()+0x74>)
   14676:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   1467a:	695c      	ldr	r4, [r3, #20]
   1467c:	9b01      	ldr	r3, [sp, #4]
   1467e:	689a      	ldr	r2, [r3, #8]
   14680:	9b01      	ldr	r3, [sp, #4]
   14682:	689b      	ldr	r3, [r3, #8]
   14684:	681b      	ldr	r3, [r3, #0]
   14686:	3330      	adds	r3, #48	; 0x30
   14688:	681b      	ldr	r3, [r3, #0]
   1468a:	4610      	mov	r0, r2
   1468c:	4798      	blx	r3
   1468e:	4603      	mov	r3, r0
   14690:	fa24 f303 	lsr.w	r3, r4, r3
   14694:	f003 0301 	and.w	r3, r3, #1
   14698:	2b00      	cmp	r3, #0
   1469a:	bf14      	ite	ne
   1469c:	2301      	movne	r3, #1
   1469e:	2300      	moveq	r3, #0
   146a0:	f88d 300f 	strb.w	r3, [sp, #15]
    return static_cast<State>(state);
   146a4:	f89d 400f 	ldrb.w	r4, [sp, #15]
   146a8:	462b      	mov	r3, r5
   146aa:	4619      	mov	r1, r3
   146ac:	4803      	ldr	r0, [pc, #12]	; (146bc <Gpio::ReadState()+0x70>)
   146ae:	f7fe fac3 	bl	12c38 <__cyg_profile_func_exit>
   146b2:	4623      	mov	r3, r4
  }
   146b4:	4618      	mov	r0, r3
   146b6:	b005      	add	sp, #20
   146b8:	bd30      	pop	{r4, r5, pc}
   146ba:	bf00      	nop
   146bc:	0001464d 	.word	0x0001464d
   146c0:	100001a0 	.word	0x100001a0

000146c4 <Gpio::Read()>:
  // Returns true if input or output pin is high
  bool Read(void) override
   146c4:	b530      	push	{r4, r5, lr}
   146c6:	b083      	sub	sp, #12
   146c8:	4675      	mov	r5, lr
   146ca:	9001      	str	r0, [sp, #4]
   146cc:	462b      	mov	r3, r5
   146ce:	4619      	mov	r1, r3
   146d0:	4816      	ldr	r0, [pc, #88]	; (1472c <Gpio::Read()+0x68>)
   146d2:	f7fe fa9d 	bl	12c10 <__cyg_profile_func_enter>
  {
    return (gpio_port[pin_->GetPort()]->PIN >> pin_->GetPin()) & 1;
   146d6:	9b01      	ldr	r3, [sp, #4]
   146d8:	689a      	ldr	r2, [r3, #8]
   146da:	9b01      	ldr	r3, [sp, #4]
   146dc:	689b      	ldr	r3, [r3, #8]
   146de:	681b      	ldr	r3, [r3, #0]
   146e0:	332c      	adds	r3, #44	; 0x2c
   146e2:	681b      	ldr	r3, [r3, #0]
   146e4:	4610      	mov	r0, r2
   146e6:	4798      	blx	r3
   146e8:	4603      	mov	r3, r0
   146ea:	461a      	mov	r2, r3
   146ec:	4b10      	ldr	r3, [pc, #64]	; (14730 <Gpio::Read()+0x6c>)
   146ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   146f2:	695c      	ldr	r4, [r3, #20]
   146f4:	9b01      	ldr	r3, [sp, #4]
   146f6:	689a      	ldr	r2, [r3, #8]
   146f8:	9b01      	ldr	r3, [sp, #4]
   146fa:	689b      	ldr	r3, [r3, #8]
   146fc:	681b      	ldr	r3, [r3, #0]
   146fe:	3330      	adds	r3, #48	; 0x30
   14700:	681b      	ldr	r3, [r3, #0]
   14702:	4610      	mov	r0, r2
   14704:	4798      	blx	r3
   14706:	4603      	mov	r3, r0
   14708:	fa24 f303 	lsr.w	r3, r4, r3
   1470c:	f003 0301 	and.w	r3, r3, #1
   14710:	2b00      	cmp	r3, #0
   14712:	bf14      	ite	ne
   14714:	2301      	movne	r3, #1
   14716:	2300      	moveq	r3, #0
   14718:	b2dc      	uxtb	r4, r3
   1471a:	462b      	mov	r3, r5
   1471c:	4619      	mov	r1, r3
   1471e:	4803      	ldr	r0, [pc, #12]	; (1472c <Gpio::Read()+0x68>)
   14720:	f7fe fa8a 	bl	12c38 <__cyg_profile_func_exit>
   14724:	4623      	mov	r3, r4
  }
   14726:	4618      	mov	r0, r3
   14728:	b003      	add	sp, #12
   1472a:	bd30      	pop	{r4, r5, pc}
   1472c:	000146c5 	.word	0x000146c5
   14730:	100001a0 	.word	0x100001a0

00014734 <Gpio::GetPin()>:
  PinInterface & GetPin() override
   14734:	b530      	push	{r4, r5, lr}
   14736:	b083      	sub	sp, #12
   14738:	4675      	mov	r5, lr
   1473a:	9001      	str	r0, [sp, #4]
   1473c:	462b      	mov	r3, r5
   1473e:	4619      	mov	r1, r3
   14740:	4806      	ldr	r0, [pc, #24]	; (1475c <Gpio::GetPin()+0x28>)
   14742:	f7fe fa65 	bl	12c10 <__cyg_profile_func_enter>
  {
    return *pin_;
   14746:	9b01      	ldr	r3, [sp, #4]
   14748:	689c      	ldr	r4, [r3, #8]
   1474a:	462b      	mov	r3, r5
   1474c:	4619      	mov	r1, r3
   1474e:	4803      	ldr	r0, [pc, #12]	; (1475c <Gpio::GetPin()+0x28>)
   14750:	f7fe fa72 	bl	12c38 <__cyg_profile_func_exit>
   14754:	4623      	mov	r3, r4
  }
   14756:	4618      	mov	r0, r3
   14758:	b003      	add	sp, #12
   1475a:	bd30      	pop	{r4, r5, pc}
   1475c:	00014735 	.word	0x00014735

00014760 <Gpio::ValidPortCheck()>:

  // Checks if the selected gpio port is valid for external interrupts.
  bool ValidPortCheck()
   14760:	b530      	push	{r4, r5, lr}
   14762:	b087      	sub	sp, #28
   14764:	4675      	mov	r5, lr
   14766:	9003      	str	r0, [sp, #12]
   14768:	462b      	mov	r3, r5
   1476a:	4619      	mov	r1, r3
   1476c:	4817      	ldr	r0, [pc, #92]	; (147cc <Gpio::ValidPortCheck()+0x6c>)
   1476e:	f7fe fa4f 	bl	12c10 <__cyg_profile_func_enter>
  {
    bool is_valid = (interupt_port_ <= 1);
   14772:	9b03      	ldr	r3, [sp, #12]
   14774:	791b      	ldrb	r3, [r3, #4]
   14776:	2b01      	cmp	r3, #1
   14778:	bf94      	ite	ls
   1477a:	2301      	movls	r3, #1
   1477c:	2300      	movhi	r3, #0
   1477e:	b2db      	uxtb	r3, r3
   14780:	f88d 3017 	strb.w	r3, [sp, #23]
    SJ2_ASSERT_WARNING(is_valid,
   14784:	f89d 3017 	ldrb.w	r3, [sp, #23]
   14788:	f083 0301 	eor.w	r3, r3, #1
   1478c:	b2db      	uxtb	r3, r3
   1478e:	2b00      	cmp	r3, #0
   14790:	d010      	beq.n	147b4 <Gpio::ValidPortCheck()+0x54>
   14792:	9b03      	ldr	r3, [sp, #12]
   14794:	689a      	ldr	r2, [r3, #8]
   14796:	9b03      	ldr	r3, [sp, #12]
   14798:	689b      	ldr	r3, [r3, #8]
   1479a:	681b      	ldr	r3, [r3, #0]
   1479c:	332c      	adds	r3, #44	; 0x2c
   1479e:	681b      	ldr	r3, [r3, #0]
   147a0:	4610      	mov	r0, r2
   147a2:	4798      	blx	r3
   147a4:	4603      	mov	r3, r0
   147a6:	9300      	str	r3, [sp, #0]
   147a8:	23a6      	movs	r3, #166	; 0xa6
   147aa:	4a09      	ldr	r2, [pc, #36]	; (147d0 <Gpio::ValidPortCheck()+0x70>)
   147ac:	4909      	ldr	r1, [pc, #36]	; (147d4 <Gpio::ValidPortCheck()+0x74>)
   147ae:	480a      	ldr	r0, [pc, #40]	; (147d8 <Gpio::ValidPortCheck()+0x78>)
   147b0:	f7ff fc88 	bl	140c4 <printf>
                       "Port %d cannot be used for External Interrupts. Need "
                       "to use GPIO on Port 0 or 2.",
                       pin_->GetPort());
    return is_valid;
   147b4:	f89d 4017 	ldrb.w	r4, [sp, #23]
   147b8:	462b      	mov	r3, r5
   147ba:	4619      	mov	r1, r3
   147bc:	4803      	ldr	r0, [pc, #12]	; (147cc <Gpio::ValidPortCheck()+0x6c>)
   147be:	f7fe fa3b 	bl	12c38 <__cyg_profile_func_exit>
   147c2:	4623      	mov	r3, r4
  }
   147c4:	4618      	mov	r0, r3
   147c6:	b007      	add	sp, #28
   147c8:	bd30      	pop	{r4, r5, pc}
   147ca:	bf00      	nop
   147cc:	00014761 	.word	0x00014761
   147d0:	00019120 	.word	0x00019120
   147d4:	00018b14 	.word	0x00018b14
   147d8:	00017fe4 	.word	0x00017fe4

000147dc <Gpio::SetInterruptRoutine(void (*)())>:

  // Assigns the developer's ISR function to the port/pin gpio instance.
  void SetInterruptRoutine(IsrPointer function) override
   147dc:	b570      	push	{r4, r5, r6, lr}
   147de:	b082      	sub	sp, #8
   147e0:	4676      	mov	r6, lr
   147e2:	9001      	str	r0, [sp, #4]
   147e4:	9100      	str	r1, [sp, #0]
   147e6:	4633      	mov	r3, r6
   147e8:	4619      	mov	r1, r3
   147ea:	4811      	ldr	r0, [pc, #68]	; (14830 <Gpio::SetInterruptRoutine(void (*)())+0x54>)
   147ec:	f7fe fa10 	bl	12c10 <__cyg_profile_func_enter>
  {
    ValidPortCheck();
   147f0:	9801      	ldr	r0, [sp, #4]
   147f2:	f7ff ffb5 	bl	14760 <Gpio::ValidPortCheck()>
    interrupthandlers[interupt_port_][pin_->GetPin()] = function;
   147f6:	9c00      	ldr	r4, [sp, #0]
   147f8:	9b01      	ldr	r3, [sp, #4]
   147fa:	791b      	ldrb	r3, [r3, #4]
   147fc:	461d      	mov	r5, r3
   147fe:	9b01      	ldr	r3, [sp, #4]
   14800:	689a      	ldr	r2, [r3, #8]
   14802:	9b01      	ldr	r3, [sp, #4]
   14804:	689b      	ldr	r3, [r3, #8]
   14806:	681b      	ldr	r3, [r3, #0]
   14808:	3330      	adds	r3, #48	; 0x30
   1480a:	681b      	ldr	r3, [r3, #0]
   1480c:	4610      	mov	r0, r2
   1480e:	4798      	blx	r3
   14810:	4603      	mov	r3, r0
   14812:	4619      	mov	r1, r3
   14814:	4a07      	ldr	r2, [pc, #28]	; (14834 <Gpio::SetInterruptRoutine(void (*)())+0x58>)
   14816:	016b      	lsls	r3, r5, #5
   14818:	440b      	add	r3, r1
   1481a:	f842 4023 	str.w	r4, [r2, r3, lsl #2]
   1481e:	4633      	mov	r3, r6
   14820:	4619      	mov	r1, r3
   14822:	4803      	ldr	r0, [pc, #12]	; (14830 <Gpio::SetInterruptRoutine(void (*)())+0x54>)
   14824:	f7fe fa08 	bl	12c38 <__cyg_profile_func_exit>
  }
   14828:	bf00      	nop
   1482a:	b002      	add	sp, #8
   1482c:	bd70      	pop	{r4, r5, r6, pc}
   1482e:	bf00      	nop
   14830:	000147dd 	.word	0x000147dd
   14834:	10000478 	.word	0x10000478

00014838 <Gpio::ClearInterruptRoutine()>:

  // Clears the developers ISR function from the port/pin gio instance.
  void ClearInterruptRoutine() override
   14838:	b530      	push	{r4, r5, lr}
   1483a:	b083      	sub	sp, #12
   1483c:	4675      	mov	r5, lr
   1483e:	9001      	str	r0, [sp, #4]
   14840:	462b      	mov	r3, r5
   14842:	4619      	mov	r1, r3
   14844:	480f      	ldr	r0, [pc, #60]	; (14884 <Gpio::ClearInterruptRoutine()+0x4c>)
   14846:	f7fe f9e3 	bl	12c10 <__cyg_profile_func_enter>
  {
    interrupthandlers[interupt_port_][pin_->GetPin()] = nullptr;
   1484a:	9b01      	ldr	r3, [sp, #4]
   1484c:	791b      	ldrb	r3, [r3, #4]
   1484e:	461c      	mov	r4, r3
   14850:	9b01      	ldr	r3, [sp, #4]
   14852:	689a      	ldr	r2, [r3, #8]
   14854:	9b01      	ldr	r3, [sp, #4]
   14856:	689b      	ldr	r3, [r3, #8]
   14858:	681b      	ldr	r3, [r3, #0]
   1485a:	3330      	adds	r3, #48	; 0x30
   1485c:	681b      	ldr	r3, [r3, #0]
   1485e:	4610      	mov	r0, r2
   14860:	4798      	blx	r3
   14862:	4603      	mov	r3, r0
   14864:	4619      	mov	r1, r3
   14866:	4a08      	ldr	r2, [pc, #32]	; (14888 <Gpio::ClearInterruptRoutine()+0x50>)
   14868:	0163      	lsls	r3, r4, #5
   1486a:	440b      	add	r3, r1
   1486c:	2100      	movs	r1, #0
   1486e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
   14872:	462b      	mov	r3, r5
   14874:	4619      	mov	r1, r3
   14876:	4803      	ldr	r0, [pc, #12]	; (14884 <Gpio::ClearInterruptRoutine()+0x4c>)
   14878:	f7fe f9de 	bl	12c38 <__cyg_profile_func_exit>
  }
   1487c:	bf00      	nop
   1487e:	b003      	add	sp, #12
   14880:	bd30      	pop	{r4, r5, pc}
   14882:	bf00      	nop
   14884:	00014839 	.word	0x00014839
   14888:	10000478 	.word	0x10000478

0001488c <unsigned char util::Value<GpioInterface::Edge, unsigned char>(GpioInterface::Edge)>:
constexpr Type Value(Enum enum_type_value)
   1488c:	b530      	push	{r4, r5, lr}
   1488e:	b083      	sub	sp, #12
   14890:	4675      	mov	r5, lr
   14892:	4603      	mov	r3, r0
   14894:	f88d 3007 	strb.w	r3, [sp, #7]
   14898:	462b      	mov	r3, r5
   1489a:	4619      	mov	r1, r3
   1489c:	4806      	ldr	r0, [pc, #24]	; (148b8 <unsigned char util::Value<GpioInterface::Edge, unsigned char>(GpioInterface::Edge)+0x2c>)
   1489e:	f7fe f9b7 	bl	12c10 <__cyg_profile_func_enter>
  return static_cast<Type>(enum_type_value);
   148a2:	f89d 4007 	ldrb.w	r4, [sp, #7]
   148a6:	462b      	mov	r3, r5
   148a8:	4619      	mov	r1, r3
   148aa:	4803      	ldr	r0, [pc, #12]	; (148b8 <unsigned char util::Value<GpioInterface::Edge, unsigned char>(GpioInterface::Edge)+0x2c>)
   148ac:	f7fe f9c4 	bl	12c38 <__cyg_profile_func_exit>
   148b0:	4623      	mov	r3, r4
}
   148b2:	4618      	mov	r0, r3
   148b4:	b003      	add	sp, #12
   148b6:	bd30      	pop	{r4, r5, pc}
   148b8:	0001488d 	.word	0x0001488d

000148bc <Gpio::SetInterruptEdge(GpioInterface::Edge)>:

  // Sets the selected edge that the gpio interrupt will be triggered on.
  void SetInterruptEdge(Edge edge) override
   148bc:	b510      	push	{r4, lr}
   148be:	b084      	sub	sp, #16
   148c0:	4674      	mov	r4, lr
   148c2:	9003      	str	r0, [sp, #12]
   148c4:	460b      	mov	r3, r1
   148c6:	f88d 300b 	strb.w	r3, [sp, #11]
   148ca:	4623      	mov	r3, r4
   148cc:	4619      	mov	r1, r3
   148ce:	4819      	ldr	r0, [pc, #100]	; (14934 <Gpio::SetInterruptEdge(GpioInterface::Edge)+0x78>)
   148d0:	f7fe f99e 	bl	12c10 <__cyg_profile_func_enter>
  {
    ValidPortCheck();
   148d4:	9803      	ldr	r0, [sp, #12]
   148d6:	f7ff ff43 	bl	14760 <Gpio::ValidPortCheck()>
    switch (edge)
   148da:	f89d 300b 	ldrb.w	r3, [sp, #11]
   148de:	2b01      	cmp	r3, #1
   148e0:	d008      	beq.n	148f4 <Gpio::SetInterruptEdge(GpioInterface::Edge)+0x38>
   148e2:	2b01      	cmp	r3, #1
   148e4:	d302      	bcc.n	148ec <Gpio::SetInterruptEdge(GpioInterface::Edge)+0x30>
   148e6:	2b02      	cmp	r3, #2
   148e8:	d008      	beq.n	148fc <Gpio::SetInterruptEdge(GpioInterface::Edge)+0x40>
   148ea:	e00e      	b.n	1490a <Gpio::SetInterruptEdge(GpioInterface::Edge)+0x4e>
    {
      case Edge::kEdgeRising:
      {
        SetEdgeRising();
   148ec:	9803      	ldr	r0, [sp, #12]
   148ee:	f000 f8b1 	bl	14a54 <Gpio::SetEdgeRising()>
        break;
   148f2:	e017      	b.n	14924 <Gpio::SetInterruptEdge(GpioInterface::Edge)+0x68>
      }
      case Edge::kEdgeFalling:
      {
        SetEdgeFalling();
   148f4:	9803      	ldr	r0, [sp, #12]
   148f6:	f000 f8eb 	bl	14ad0 <Gpio::SetEdgeFalling()>
        break;
   148fa:	e013      	b.n	14924 <Gpio::SetInterruptEdge(GpioInterface::Edge)+0x68>
      }
      case Edge::kEdgeBoth:
      {
        SetEdgeRising();
   148fc:	9803      	ldr	r0, [sp, #12]
   148fe:	f000 f8a9 	bl	14a54 <Gpio::SetEdgeRising()>
        SetEdgeFalling();
   14902:	9803      	ldr	r0, [sp, #12]
   14904:	f000 f8e4 	bl	14ad0 <Gpio::SetEdgeFalling()>
        break;
   14908:	e00c      	b.n	14924 <Gpio::SetInterruptEdge(GpioInterface::Edge)+0x68>
      }
      default:
      {
        LOG_WARNING(
   1490a:	f89d 300b 	ldrb.w	r3, [sp, #11]
   1490e:	4618      	mov	r0, r3
   14910:	f7ff ffbc 	bl	1488c <unsigned char util::Value<GpioInterface::Edge, unsigned char>(GpioInterface::Edge)>
   14914:	4603      	mov	r3, r0
   14916:	9300      	str	r3, [sp, #0]
   14918:	23d2      	movs	r3, #210	; 0xd2
   1491a:	4a07      	ldr	r2, [pc, #28]	; (14938 <Gpio::SetInterruptEdge(GpioInterface::Edge)+0x7c>)
   1491c:	4907      	ldr	r1, [pc, #28]	; (1493c <Gpio::SetInterruptEdge(GpioInterface::Edge)+0x80>)
   1491e:	4808      	ldr	r0, [pc, #32]	; (14940 <Gpio::SetInterruptEdge(GpioInterface::Edge)+0x84>)
   14920:	f7ff fbd0 	bl	140c4 <printf>
   14924:	4623      	mov	r3, r4
   14926:	4619      	mov	r1, r3
   14928:	4802      	ldr	r0, [pc, #8]	; (14934 <Gpio::SetInterruptEdge(GpioInterface::Edge)+0x78>)
   1492a:	f7fe f985 	bl	12c38 <__cyg_profile_func_exit>
            "Edge %d cannot be used for External Interrupts."
            "Need to use a rising, falling, or both configuration.",
            util::Value(edge));
      }
    }
  }
   1492e:	bf00      	nop
   14930:	b004      	add	sp, #16
   14932:	bd10      	pop	{r4, pc}
   14934:	000148bd 	.word	0x000148bd
   14938:	0001913c 	.word	0x0001913c
   1493c:	00018b20 	.word	0x00018b20
   14940:	00018074 	.word	0x00018074

00014944 <Gpio::ClearInterruptEdge(GpioInterface::Edge)>:

  // Clears the seleted edge of the gpio interrupt from being triggered.
  void ClearInterruptEdge(Edge edge) override
   14944:	b510      	push	{r4, lr}
   14946:	b084      	sub	sp, #16
   14948:	4674      	mov	r4, lr
   1494a:	9003      	str	r0, [sp, #12]
   1494c:	460b      	mov	r3, r1
   1494e:	f88d 300b 	strb.w	r3, [sp, #11]
   14952:	4623      	mov	r3, r4
   14954:	4619      	mov	r1, r3
   14956:	4819      	ldr	r0, [pc, #100]	; (149bc <Gpio::ClearInterruptEdge(GpioInterface::Edge)+0x78>)
   14958:	f7fe f95a 	bl	12c10 <__cyg_profile_func_enter>
  {
    ValidPortCheck();
   1495c:	9803      	ldr	r0, [sp, #12]
   1495e:	f7ff feff 	bl	14760 <Gpio::ValidPortCheck()>
    switch (edge)
   14962:	f89d 300b 	ldrb.w	r3, [sp, #11]
   14966:	2b01      	cmp	r3, #1
   14968:	d008      	beq.n	1497c <Gpio::ClearInterruptEdge(GpioInterface::Edge)+0x38>
   1496a:	2b01      	cmp	r3, #1
   1496c:	d302      	bcc.n	14974 <Gpio::ClearInterruptEdge(GpioInterface::Edge)+0x30>
   1496e:	2b02      	cmp	r3, #2
   14970:	d008      	beq.n	14984 <Gpio::ClearInterruptEdge(GpioInterface::Edge)+0x40>
   14972:	e00e      	b.n	14992 <Gpio::ClearInterruptEdge(GpioInterface::Edge)+0x4e>
    {
      case Edge::kEdgeRising:
      {
        ClearEdgeRising();
   14974:	9803      	ldr	r0, [sp, #12]
   14976:	f000 f8e9 	bl	14b4c <Gpio::ClearEdgeRising()>
        break;
   1497a:	e017      	b.n	149ac <Gpio::ClearInterruptEdge(GpioInterface::Edge)+0x68>
      }
      case Edge::kEdgeFalling:
      {
        ClearEdgeFalling();
   1497c:	9803      	ldr	r0, [sp, #12]
   1497e:	f000 f923 	bl	14bc8 <Gpio::ClearEdgeFalling()>
        break;
   14982:	e013      	b.n	149ac <Gpio::ClearInterruptEdge(GpioInterface::Edge)+0x68>
      }
      case Edge::kEdgeBoth:
      {
        ClearEdgeRising();
   14984:	9803      	ldr	r0, [sp, #12]
   14986:	f000 f8e1 	bl	14b4c <Gpio::ClearEdgeRising()>
        ClearEdgeFalling();
   1498a:	9803      	ldr	r0, [sp, #12]
   1498c:	f000 f91c 	bl	14bc8 <Gpio::ClearEdgeFalling()>
        break;
   14990:	e00c      	b.n	149ac <Gpio::ClearInterruptEdge(GpioInterface::Edge)+0x68>
      }
      default:
      {
        LOG_WARNING(
   14992:	f89d 300b 	ldrb.w	r3, [sp, #11]
   14996:	4618      	mov	r0, r3
   14998:	f7ff ff78 	bl	1488c <unsigned char util::Value<GpioInterface::Edge, unsigned char>(GpioInterface::Edge)>
   1499c:	4603      	mov	r3, r0
   1499e:	9300      	str	r3, [sp, #0]
   149a0:	23f2      	movs	r3, #242	; 0xf2
   149a2:	4a07      	ldr	r2, [pc, #28]	; (149c0 <Gpio::ClearInterruptEdge(GpioInterface::Edge)+0x7c>)
   149a4:	4907      	ldr	r1, [pc, #28]	; (149c4 <Gpio::ClearInterruptEdge(GpioInterface::Edge)+0x80>)
   149a6:	4808      	ldr	r0, [pc, #32]	; (149c8 <Gpio::ClearInterruptEdge(GpioInterface::Edge)+0x84>)
   149a8:	f7ff fb8c 	bl	140c4 <printf>
   149ac:	4623      	mov	r3, r4
   149ae:	4619      	mov	r1, r3
   149b0:	4802      	ldr	r0, [pc, #8]	; (149bc <Gpio::ClearInterruptEdge(GpioInterface::Edge)+0x78>)
   149b2:	f7fe f941 	bl	12c38 <__cyg_profile_func_exit>
            "Edge %d cannot be used for External Interrupts."
            "Need to use a rising, falling, or both configuration.",
           util::Value(edge));
      }
    }
  }
   149b6:	bf00      	nop
   149b8:	b004      	add	sp, #16
   149ba:	bd10      	pop	{r4, pc}
   149bc:	00014945 	.word	0x00014945
   149c0:	000190e4 	.word	0x000190e4
   149c4:	00018b2c 	.word	0x00018b2c
   149c8:	00018074 	.word	0x00018074

000149cc <Gpio::AttachInterrupt(void (*)(), GpioInterface::Edge)>:

  // Assign the developer's ISR and sets the selected edge that the gpio
  // interrupt will be triggered on.
  void AttachInterrupt(IsrPointer function, Edge edge) override
   149cc:	b510      	push	{r4, lr}
   149ce:	b084      	sub	sp, #16
   149d0:	4674      	mov	r4, lr
   149d2:	9003      	str	r0, [sp, #12]
   149d4:	9102      	str	r1, [sp, #8]
   149d6:	4613      	mov	r3, r2
   149d8:	f88d 3007 	strb.w	r3, [sp, #7]
   149dc:	4623      	mov	r3, r4
   149de:	4619      	mov	r1, r3
   149e0:	480b      	ldr	r0, [pc, #44]	; (14a10 <Gpio::AttachInterrupt(void (*)(), GpioInterface::Edge)+0x44>)
   149e2:	f7fe f915 	bl	12c10 <__cyg_profile_func_enter>
  {
    ValidPortCheck();
   149e6:	9803      	ldr	r0, [sp, #12]
   149e8:	f7ff feba 	bl	14760 <Gpio::ValidPortCheck()>
    SetInterruptRoutine(function);
   149ec:	9902      	ldr	r1, [sp, #8]
   149ee:	9803      	ldr	r0, [sp, #12]
   149f0:	f7ff fef4 	bl	147dc <Gpio::SetInterruptRoutine(void (*)())>
    SetInterruptEdge(edge);
   149f4:	f89d 3007 	ldrb.w	r3, [sp, #7]
   149f8:	4619      	mov	r1, r3
   149fa:	9803      	ldr	r0, [sp, #12]
   149fc:	f7ff ff5e 	bl	148bc <Gpio::SetInterruptEdge(GpioInterface::Edge)>
   14a00:	4623      	mov	r3, r4
   14a02:	4619      	mov	r1, r3
   14a04:	4802      	ldr	r0, [pc, #8]	; (14a10 <Gpio::AttachInterrupt(void (*)(), GpioInterface::Edge)+0x44>)
   14a06:	f7fe f917 	bl	12c38 <__cyg_profile_func_exit>
  }
   14a0a:	bf00      	nop
   14a0c:	b004      	add	sp, #16
   14a0e:	bd10      	pop	{r4, pc}
   14a10:	000149cd 	.word	0x000149cd

00014a14 <Gpio::DetachInterrupt()>:

  // Removes the developer's ISR and clears the selected edge of the gpio
  // interrupt from being triggered.
  void DetachInterrupt() override
   14a14:	b510      	push	{r4, lr}
   14a16:	b082      	sub	sp, #8
   14a18:	4674      	mov	r4, lr
   14a1a:	9001      	str	r0, [sp, #4]
   14a1c:	4623      	mov	r3, r4
   14a1e:	4619      	mov	r1, r3
   14a20:	480b      	ldr	r0, [pc, #44]	; (14a50 <Gpio::DetachInterrupt()+0x3c>)
   14a22:	f7fe f8f5 	bl	12c10 <__cyg_profile_func_enter>
  {
    ValidPortCheck();
   14a26:	9801      	ldr	r0, [sp, #4]
   14a28:	f7ff fe9a 	bl	14760 <Gpio::ValidPortCheck()>
    ClearInterruptRoutine();
   14a2c:	9801      	ldr	r0, [sp, #4]
   14a2e:	f7ff ff03 	bl	14838 <Gpio::ClearInterruptRoutine()>
    ClearEdgeRising();
   14a32:	9801      	ldr	r0, [sp, #4]
   14a34:	f000 f88a 	bl	14b4c <Gpio::ClearEdgeRising()>
    ClearEdgeFalling();
   14a38:	9801      	ldr	r0, [sp, #4]
   14a3a:	f000 f8c5 	bl	14bc8 <Gpio::ClearEdgeFalling()>
   14a3e:	4623      	mov	r3, r4
   14a40:	4619      	mov	r1, r3
   14a42:	4803      	ldr	r0, [pc, #12]	; (14a50 <Gpio::DetachInterrupt()+0x3c>)
   14a44:	f7fe f8f8 	bl	12c38 <__cyg_profile_func_exit>
  }
   14a48:	bf00      	nop
   14a4a:	b002      	add	sp, #8
   14a4c:	bd10      	pop	{r4, pc}
   14a4e:	bf00      	nop
   14a50:	00014a15 	.word	0x00014a15

00014a54 <Gpio::SetEdgeRising()>:
    *interrupt[triggered_port].clear |= (1 << triggered_pin);
  }

 private:
  // Sets the gpio interrupt to trigger on a rising edge.
  void SetEdgeRising()
   14a54:	b530      	push	{r4, r5, lr}
   14a56:	b083      	sub	sp, #12
   14a58:	4675      	mov	r5, lr
   14a5a:	9001      	str	r0, [sp, #4]
   14a5c:	462b      	mov	r3, r5
   14a5e:	4619      	mov	r1, r3
   14a60:	4819      	ldr	r0, [pc, #100]	; (14ac8 <Gpio::SetEdgeRising()+0x74>)
   14a62:	f7fe f8d5 	bl	12c10 <__cyg_profile_func_enter>
  {
    *interrupt[interupt_port_].enable_rising_edge |= (1 << pin_->GetPin());
   14a66:	9b01      	ldr	r3, [sp, #4]
   14a68:	689a      	ldr	r2, [r3, #8]
   14a6a:	9b01      	ldr	r3, [sp, #4]
   14a6c:	689b      	ldr	r3, [r3, #8]
   14a6e:	681b      	ldr	r3, [r3, #0]
   14a70:	3330      	adds	r3, #48	; 0x30
   14a72:	681b      	ldr	r3, [r3, #0]
   14a74:	4610      	mov	r0, r2
   14a76:	4798      	blx	r3
   14a78:	4603      	mov	r3, r0
   14a7a:	461a      	mov	r2, r3
   14a7c:	2301      	movs	r3, #1
   14a7e:	fa03 f002 	lsl.w	r0, r3, r2
   14a82:	9b01      	ldr	r3, [sp, #4]
   14a84:	791b      	ldrb	r3, [r3, #4]
   14a86:	4619      	mov	r1, r3
   14a88:	4a10      	ldr	r2, [pc, #64]	; (14acc <Gpio::SetEdgeRising()+0x78>)
   14a8a:	460b      	mov	r3, r1
   14a8c:	009b      	lsls	r3, r3, #2
   14a8e:	440b      	add	r3, r1
   14a90:	009b      	lsls	r3, r3, #2
   14a92:	4413      	add	r3, r2
   14a94:	330c      	adds	r3, #12
   14a96:	681b      	ldr	r3, [r3, #0]
   14a98:	681a      	ldr	r2, [r3, #0]
   14a9a:	4604      	mov	r4, r0
   14a9c:	9b01      	ldr	r3, [sp, #4]
   14a9e:	791b      	ldrb	r3, [r3, #4]
   14aa0:	4618      	mov	r0, r3
   14aa2:	490a      	ldr	r1, [pc, #40]	; (14acc <Gpio::SetEdgeRising()+0x78>)
   14aa4:	4603      	mov	r3, r0
   14aa6:	009b      	lsls	r3, r3, #2
   14aa8:	4403      	add	r3, r0
   14aaa:	009b      	lsls	r3, r3, #2
   14aac:	440b      	add	r3, r1
   14aae:	330c      	adds	r3, #12
   14ab0:	681b      	ldr	r3, [r3, #0]
   14ab2:	4322      	orrs	r2, r4
   14ab4:	601a      	str	r2, [r3, #0]
   14ab6:	462b      	mov	r3, r5
   14ab8:	4619      	mov	r1, r3
   14aba:	4803      	ldr	r0, [pc, #12]	; (14ac8 <Gpio::SetEdgeRising()+0x74>)
   14abc:	f7fe f8bc 	bl	12c38 <__cyg_profile_func_exit>
  }
   14ac0:	bf00      	nop
   14ac2:	b003      	add	sp, #12
   14ac4:	bd30      	pop	{r4, r5, pc}
   14ac6:	bf00      	nop
   14ac8:	00014a55 	.word	0x00014a55
   14acc:	100001b8 	.word	0x100001b8

00014ad0 <Gpio::SetEdgeFalling()>:

  // Sets the gpio interrupt to trigger on a falling edge.
  void SetEdgeFalling()
   14ad0:	b530      	push	{r4, r5, lr}
   14ad2:	b083      	sub	sp, #12
   14ad4:	4675      	mov	r5, lr
   14ad6:	9001      	str	r0, [sp, #4]
   14ad8:	462b      	mov	r3, r5
   14ada:	4619      	mov	r1, r3
   14adc:	4819      	ldr	r0, [pc, #100]	; (14b44 <Gpio::SetEdgeFalling()+0x74>)
   14ade:	f7fe f897 	bl	12c10 <__cyg_profile_func_enter>
  {
    *interrupt[interupt_port_].enable_falling_edge |= (1 << pin_->GetPin());
   14ae2:	9b01      	ldr	r3, [sp, #4]
   14ae4:	689a      	ldr	r2, [r3, #8]
   14ae6:	9b01      	ldr	r3, [sp, #4]
   14ae8:	689b      	ldr	r3, [r3, #8]
   14aea:	681b      	ldr	r3, [r3, #0]
   14aec:	3330      	adds	r3, #48	; 0x30
   14aee:	681b      	ldr	r3, [r3, #0]
   14af0:	4610      	mov	r0, r2
   14af2:	4798      	blx	r3
   14af4:	4603      	mov	r3, r0
   14af6:	461a      	mov	r2, r3
   14af8:	2301      	movs	r3, #1
   14afa:	fa03 f002 	lsl.w	r0, r3, r2
   14afe:	9b01      	ldr	r3, [sp, #4]
   14b00:	791b      	ldrb	r3, [r3, #4]
   14b02:	4619      	mov	r1, r3
   14b04:	4a10      	ldr	r2, [pc, #64]	; (14b48 <Gpio::SetEdgeFalling()+0x78>)
   14b06:	460b      	mov	r3, r1
   14b08:	009b      	lsls	r3, r3, #2
   14b0a:	440b      	add	r3, r1
   14b0c:	009b      	lsls	r3, r3, #2
   14b0e:	4413      	add	r3, r2
   14b10:	3310      	adds	r3, #16
   14b12:	681b      	ldr	r3, [r3, #0]
   14b14:	681a      	ldr	r2, [r3, #0]
   14b16:	4604      	mov	r4, r0
   14b18:	9b01      	ldr	r3, [sp, #4]
   14b1a:	791b      	ldrb	r3, [r3, #4]
   14b1c:	4618      	mov	r0, r3
   14b1e:	490a      	ldr	r1, [pc, #40]	; (14b48 <Gpio::SetEdgeFalling()+0x78>)
   14b20:	4603      	mov	r3, r0
   14b22:	009b      	lsls	r3, r3, #2
   14b24:	4403      	add	r3, r0
   14b26:	009b      	lsls	r3, r3, #2
   14b28:	440b      	add	r3, r1
   14b2a:	3310      	adds	r3, #16
   14b2c:	681b      	ldr	r3, [r3, #0]
   14b2e:	4322      	orrs	r2, r4
   14b30:	601a      	str	r2, [r3, #0]
   14b32:	462b      	mov	r3, r5
   14b34:	4619      	mov	r1, r3
   14b36:	4803      	ldr	r0, [pc, #12]	; (14b44 <Gpio::SetEdgeFalling()+0x74>)
   14b38:	f7fe f87e 	bl	12c38 <__cyg_profile_func_exit>
  }
   14b3c:	bf00      	nop
   14b3e:	b003      	add	sp, #12
   14b40:	bd30      	pop	{r4, r5, pc}
   14b42:	bf00      	nop
   14b44:	00014ad1 	.word	0x00014ad1
   14b48:	100001b8 	.word	0x100001b8

00014b4c <Gpio::ClearEdgeRising()>:

  // Clears the gpio interrupt to no longer trigger on a rising edge.
  void ClearEdgeRising()
   14b4c:	b530      	push	{r4, r5, lr}
   14b4e:	b083      	sub	sp, #12
   14b50:	4675      	mov	r5, lr
   14b52:	9001      	str	r0, [sp, #4]
   14b54:	462b      	mov	r3, r5
   14b56:	4619      	mov	r1, r3
   14b58:	4819      	ldr	r0, [pc, #100]	; (14bc0 <Gpio::ClearEdgeRising()+0x74>)
   14b5a:	f7fe f859 	bl	12c10 <__cyg_profile_func_enter>
  {
    *interrupt[interupt_port_].enable_rising_edge &= ~(1 << pin_->GetPin());
   14b5e:	9b01      	ldr	r3, [sp, #4]
   14b60:	689a      	ldr	r2, [r3, #8]
   14b62:	9b01      	ldr	r3, [sp, #4]
   14b64:	689b      	ldr	r3, [r3, #8]
   14b66:	681b      	ldr	r3, [r3, #0]
   14b68:	3330      	adds	r3, #48	; 0x30
   14b6a:	681b      	ldr	r3, [r3, #0]
   14b6c:	4610      	mov	r0, r2
   14b6e:	4798      	blx	r3
   14b70:	4603      	mov	r3, r0
   14b72:	461a      	mov	r2, r3
   14b74:	2301      	movs	r3, #1
   14b76:	4093      	lsls	r3, r2
   14b78:	43d8      	mvns	r0, r3
   14b7a:	9b01      	ldr	r3, [sp, #4]
   14b7c:	791b      	ldrb	r3, [r3, #4]
   14b7e:	4619      	mov	r1, r3
   14b80:	4a10      	ldr	r2, [pc, #64]	; (14bc4 <Gpio::ClearEdgeRising()+0x78>)
   14b82:	460b      	mov	r3, r1
   14b84:	009b      	lsls	r3, r3, #2
   14b86:	440b      	add	r3, r1
   14b88:	009b      	lsls	r3, r3, #2
   14b8a:	4413      	add	r3, r2
   14b8c:	330c      	adds	r3, #12
   14b8e:	681b      	ldr	r3, [r3, #0]
   14b90:	681a      	ldr	r2, [r3, #0]
   14b92:	4604      	mov	r4, r0
   14b94:	9b01      	ldr	r3, [sp, #4]
   14b96:	791b      	ldrb	r3, [r3, #4]
   14b98:	4618      	mov	r0, r3
   14b9a:	490a      	ldr	r1, [pc, #40]	; (14bc4 <Gpio::ClearEdgeRising()+0x78>)
   14b9c:	4603      	mov	r3, r0
   14b9e:	009b      	lsls	r3, r3, #2
   14ba0:	4403      	add	r3, r0
   14ba2:	009b      	lsls	r3, r3, #2
   14ba4:	440b      	add	r3, r1
   14ba6:	330c      	adds	r3, #12
   14ba8:	681b      	ldr	r3, [r3, #0]
   14baa:	4022      	ands	r2, r4
   14bac:	601a      	str	r2, [r3, #0]
   14bae:	462b      	mov	r3, r5
   14bb0:	4619      	mov	r1, r3
   14bb2:	4803      	ldr	r0, [pc, #12]	; (14bc0 <Gpio::ClearEdgeRising()+0x74>)
   14bb4:	f7fe f840 	bl	12c38 <__cyg_profile_func_exit>
  }
   14bb8:	bf00      	nop
   14bba:	b003      	add	sp, #12
   14bbc:	bd30      	pop	{r4, r5, pc}
   14bbe:	bf00      	nop
   14bc0:	00014b4d 	.word	0x00014b4d
   14bc4:	100001b8 	.word	0x100001b8

00014bc8 <Gpio::ClearEdgeFalling()>:

  // Clears the gpio interrupt to no longer trigger on a falling edge.
  void ClearEdgeFalling()
   14bc8:	b530      	push	{r4, r5, lr}
   14bca:	b083      	sub	sp, #12
   14bcc:	4675      	mov	r5, lr
   14bce:	9001      	str	r0, [sp, #4]
   14bd0:	462b      	mov	r3, r5
   14bd2:	4619      	mov	r1, r3
   14bd4:	4819      	ldr	r0, [pc, #100]	; (14c3c <Gpio::ClearEdgeFalling()+0x74>)
   14bd6:	f7fe f81b 	bl	12c10 <__cyg_profile_func_enter>
  {
    *interrupt[interupt_port_].enable_falling_edge &= ~(1 << pin_->GetPin());
   14bda:	9b01      	ldr	r3, [sp, #4]
   14bdc:	689a      	ldr	r2, [r3, #8]
   14bde:	9b01      	ldr	r3, [sp, #4]
   14be0:	689b      	ldr	r3, [r3, #8]
   14be2:	681b      	ldr	r3, [r3, #0]
   14be4:	3330      	adds	r3, #48	; 0x30
   14be6:	681b      	ldr	r3, [r3, #0]
   14be8:	4610      	mov	r0, r2
   14bea:	4798      	blx	r3
   14bec:	4603      	mov	r3, r0
   14bee:	461a      	mov	r2, r3
   14bf0:	2301      	movs	r3, #1
   14bf2:	4093      	lsls	r3, r2
   14bf4:	43d8      	mvns	r0, r3
   14bf6:	9b01      	ldr	r3, [sp, #4]
   14bf8:	791b      	ldrb	r3, [r3, #4]
   14bfa:	4619      	mov	r1, r3
   14bfc:	4a10      	ldr	r2, [pc, #64]	; (14c40 <Gpio::ClearEdgeFalling()+0x78>)
   14bfe:	460b      	mov	r3, r1
   14c00:	009b      	lsls	r3, r3, #2
   14c02:	440b      	add	r3, r1
   14c04:	009b      	lsls	r3, r3, #2
   14c06:	4413      	add	r3, r2
   14c08:	3310      	adds	r3, #16
   14c0a:	681b      	ldr	r3, [r3, #0]
   14c0c:	681a      	ldr	r2, [r3, #0]
   14c0e:	4604      	mov	r4, r0
   14c10:	9b01      	ldr	r3, [sp, #4]
   14c12:	791b      	ldrb	r3, [r3, #4]
   14c14:	4618      	mov	r0, r3
   14c16:	490a      	ldr	r1, [pc, #40]	; (14c40 <Gpio::ClearEdgeFalling()+0x78>)
   14c18:	4603      	mov	r3, r0
   14c1a:	009b      	lsls	r3, r3, #2
   14c1c:	4403      	add	r3, r0
   14c1e:	009b      	lsls	r3, r3, #2
   14c20:	440b      	add	r3, r1
   14c22:	3310      	adds	r3, #16
   14c24:	681b      	ldr	r3, [r3, #0]
   14c26:	4022      	ands	r2, r4
   14c28:	601a      	str	r2, [r3, #0]
   14c2a:	462b      	mov	r3, r5
   14c2c:	4619      	mov	r1, r3
   14c2e:	4803      	ldr	r0, [pc, #12]	; (14c3c <Gpio::ClearEdgeFalling()+0x74>)
   14c30:	f7fe f802 	bl	12c38 <__cyg_profile_func_exit>
  }
   14c34:	bf00      	nop
   14c36:	b003      	add	sp, #12
   14c38:	bd30      	pop	{r4, r5, pc}
   14c3a:	bf00      	nop
   14c3c:	00014bc9 	.word	0x00014bc9
   14c40:	100001b8 	.word	0x100001b8

00014c44 <SystemControllerInterface::SystemControllerInterface()>:
class SystemControllerInterface
   14c44:	b082      	sub	sp, #8
   14c46:	9001      	str	r0, [sp, #4]
   14c48:	4a03      	ldr	r2, [pc, #12]	; (14c58 <SystemControllerInterface::SystemControllerInterface()+0x14>)
   14c4a:	9b01      	ldr	r3, [sp, #4]
   14c4c:	601a      	str	r2, [r3, #0]
   14c4e:	9b01      	ldr	r3, [sp, #4]
   14c50:	4618      	mov	r0, r3
   14c52:	b002      	add	sp, #8
   14c54:	4770      	bx	lr
   14c56:	bf00      	nop
   14c58:	00018ffc 	.word	0x00018ffc

00014c5c <Lpc40xxSystemController::Lpc40xxSystemController()>:
  constexpr Lpc40xxSystemController() {}
   14c5c:	b500      	push	{lr}
   14c5e:	b083      	sub	sp, #12
   14c60:	9001      	str	r0, [sp, #4]
   14c62:	9b01      	ldr	r3, [sp, #4]
   14c64:	4618      	mov	r0, r3
   14c66:	f7ff ffed 	bl	14c44 <SystemControllerInterface::SystemControllerInterface()>
   14c6a:	4a04      	ldr	r2, [pc, #16]	; (14c7c <Lpc40xxSystemController::Lpc40xxSystemController()+0x20>)
   14c6c:	9b01      	ldr	r3, [sp, #4]
   14c6e:	601a      	str	r2, [r3, #0]
   14c70:	9b01      	ldr	r3, [sp, #4]
   14c72:	4618      	mov	r0, r3
   14c74:	b003      	add	sp, #12
   14c76:	f85d fb04 	ldr.w	pc, [sp], #4
   14c7a:	bf00      	nop
   14c7c:	00017a88 	.word	0x00017a88

00014c80 <int util::Value<Ssp::Peripheral, int>(Ssp::Peripheral)>:
constexpr Type Value(Enum enum_type_value)
   14c80:	b530      	push	{r4, r5, lr}
   14c82:	b083      	sub	sp, #12
   14c84:	4675      	mov	r5, lr
   14c86:	9001      	str	r0, [sp, #4]
   14c88:	462b      	mov	r3, r5
   14c8a:	4619      	mov	r1, r3
   14c8c:	4806      	ldr	r0, [pc, #24]	; (14ca8 <int util::Value<Ssp::Peripheral, int>(Ssp::Peripheral)+0x28>)
   14c8e:	f7fd ffbf 	bl	12c10 <__cyg_profile_func_enter>
  return static_cast<Type>(enum_type_value);
   14c92:	9c01      	ldr	r4, [sp, #4]
   14c94:	462b      	mov	r3, r5
   14c96:	4619      	mov	r1, r3
   14c98:	4803      	ldr	r0, [pc, #12]	; (14ca8 <int util::Value<Ssp::Peripheral, int>(Ssp::Peripheral)+0x28>)
   14c9a:	f7fd ffcd 	bl	12c38 <__cyg_profile_func_exit>
   14c9e:	4623      	mov	r3, r4
}
   14ca0:	4618      	mov	r0, r3
   14ca2:	b003      	add	sp, #12
   14ca4:	bd30      	pop	{r4, r5, pc}
   14ca6:	bf00      	nop
   14ca8:	00014c81 	.word	0x00014c81

00014cac <SspInterface::SspInterface()>:
#include "L0_LowLevel/system_controller.hpp"
#include "L1_Drivers/pin.hpp"
#include "utility/bit.hpp"
#include "utility/enum.hpp"

class SspInterface
   14cac:	b530      	push	{r4, r5, lr}
   14cae:	b083      	sub	sp, #12
   14cb0:	4675      	mov	r5, lr
   14cb2:	9001      	str	r0, [sp, #4]
   14cb4:	462b      	mov	r3, r5
   14cb6:	4619      	mov	r1, r3
   14cb8:	4807      	ldr	r0, [pc, #28]	; (14cd8 <SspInterface::SspInterface()+0x2c>)
   14cba:	f7fd ffa9 	bl	12c10 <__cyg_profile_func_enter>
   14cbe:	4a07      	ldr	r2, [pc, #28]	; (14cdc <SspInterface::SspInterface()+0x30>)
   14cc0:	9b01      	ldr	r3, [sp, #4]
   14cc2:	601a      	str	r2, [r3, #0]
   14cc4:	9c01      	ldr	r4, [sp, #4]
   14cc6:	462b      	mov	r3, r5
   14cc8:	4619      	mov	r1, r3
   14cca:	4803      	ldr	r0, [pc, #12]	; (14cd8 <SspInterface::SspInterface()+0x2c>)
   14ccc:	f7fd ffb4 	bl	12c38 <__cyg_profile_func_exit>
   14cd0:	4623      	mov	r3, r4
   14cd2:	4618      	mov	r0, r3
   14cd4:	b003      	add	sp, #12
   14cd6:	bd30      	pop	{r4, r5, pc}
   14cd8:	00014cad 	.word	0x00014cad
   14cdc:	00018fd4 	.word	0x00018fd4

00014ce0 <PinInterface::PinInterface(PinInterface const&)>:
class PinInterface
   14ce0:	b530      	push	{r4, r5, lr}
   14ce2:	b083      	sub	sp, #12
   14ce4:	4675      	mov	r5, lr
   14ce6:	9001      	str	r0, [sp, #4]
   14ce8:	9100      	str	r1, [sp, #0]
   14cea:	462b      	mov	r3, r5
   14cec:	4619      	mov	r1, r3
   14cee:	4808      	ldr	r0, [pc, #32]	; (14d10 <PinInterface::PinInterface(PinInterface const&)+0x30>)
   14cf0:	f7fd ff8e 	bl	12c10 <__cyg_profile_func_enter>
   14cf4:	4a07      	ldr	r2, [pc, #28]	; (14d14 <PinInterface::PinInterface(PinInterface const&)+0x34>)
   14cf6:	9b01      	ldr	r3, [sp, #4]
   14cf8:	601a      	str	r2, [r3, #0]
   14cfa:	9c01      	ldr	r4, [sp, #4]
   14cfc:	462b      	mov	r3, r5
   14cfe:	4619      	mov	r1, r3
   14d00:	4803      	ldr	r0, [pc, #12]	; (14d10 <PinInterface::PinInterface(PinInterface const&)+0x30>)
   14d02:	f7fd ff99 	bl	12c38 <__cyg_profile_func_exit>
   14d06:	4623      	mov	r3, r4
   14d08:	4618      	mov	r0, r3
   14d0a:	b003      	add	sp, #12
   14d0c:	bd30      	pop	{r4, r5, pc}
   14d0e:	bf00      	nop
   14d10:	00014ce1 	.word	0x00014ce1
   14d14:	000190b0 	.word	0x000190b0

00014d18 <Pin::Pin(Pin const&)>:
class Pin : public PinInterface
   14d18:	b530      	push	{r4, r5, lr}
   14d1a:	b083      	sub	sp, #12
   14d1c:	4675      	mov	r5, lr
   14d1e:	9001      	str	r0, [sp, #4]
   14d20:	9100      	str	r1, [sp, #0]
   14d22:	462b      	mov	r3, r5
   14d24:	4619      	mov	r1, r3
   14d26:	480f      	ldr	r0, [pc, #60]	; (14d64 <Pin::Pin(Pin const&)+0x4c>)
   14d28:	f7fd ff72 	bl	12c10 <__cyg_profile_func_enter>
   14d2c:	9b01      	ldr	r3, [sp, #4]
   14d2e:	9a00      	ldr	r2, [sp, #0]
   14d30:	4611      	mov	r1, r2
   14d32:	4618      	mov	r0, r3
   14d34:	f7ff ffd4 	bl	14ce0 <PinInterface::PinInterface(PinInterface const&)>
   14d38:	4a0b      	ldr	r2, [pc, #44]	; (14d68 <Pin::Pin(Pin const&)+0x50>)
   14d3a:	9b01      	ldr	r3, [sp, #4]
   14d3c:	601a      	str	r2, [r3, #0]
   14d3e:	9b00      	ldr	r3, [sp, #0]
   14d40:	791a      	ldrb	r2, [r3, #4]
   14d42:	9b01      	ldr	r3, [sp, #4]
   14d44:	711a      	strb	r2, [r3, #4]
   14d46:	9b00      	ldr	r3, [sp, #0]
   14d48:	795a      	ldrb	r2, [r3, #5]
   14d4a:	9b01      	ldr	r3, [sp, #4]
   14d4c:	715a      	strb	r2, [r3, #5]
   14d4e:	9c01      	ldr	r4, [sp, #4]
   14d50:	462b      	mov	r3, r5
   14d52:	4619      	mov	r1, r3
   14d54:	4803      	ldr	r0, [pc, #12]	; (14d64 <Pin::Pin(Pin const&)+0x4c>)
   14d56:	f7fd ff6f 	bl	12c38 <__cyg_profile_func_exit>
   14d5a:	4623      	mov	r3, r4
   14d5c:	4618      	mov	r0, r3
   14d5e:	b003      	add	sp, #12
   14d60:	bd30      	pop	{r4, r5, pc}
   14d62:	bf00      	nop
   14d64:	00014d19 	.word	0x00014d19
   14d68:	00017a14 	.word	0x00017a14

00014d6c <Ssp::Ssp(Ssp::Peripheral)>:
        pssp_(Peripheral::kSsp0)
  {
  }

  /// User modified constructor. Must be followed by Set functions.
  explicit constexpr Ssp(Peripheral set_pssp)
   14d6c:	b530      	push	{r4, r5, lr}
   14d6e:	b083      	sub	sp, #12
   14d70:	4675      	mov	r5, lr
   14d72:	9001      	str	r0, [sp, #4]
   14d74:	9100      	str	r1, [sp, #0]
   14d76:	462b      	mov	r3, r5
   14d78:	4619      	mov	r1, r3
   14d7a:	4831      	ldr	r0, [pc, #196]	; (14e40 <Ssp::Ssp(Ssp::Peripheral)+0xd4>)
   14d7c:	f7fd ff48 	bl	12c10 <__cyg_profile_func_enter>
        miso_(&miso_pin_),
        sck_(&sck_pin_),
        mosi_pin_(kSspPinMatrix[util::Value(set_pssp)][MatrixLookup::kMosi]),
        miso_pin_(kSspPinMatrix[util::Value(set_pssp)][MatrixLookup::kMiso]),
        sck_pin_(kSspPinMatrix[util::Value(set_pssp)][MatrixLookup::kSck]),
        pssp_(set_pssp)
   14d80:	9b01      	ldr	r3, [sp, #4]
   14d82:	4618      	mov	r0, r3
   14d84:	f7ff ff92 	bl	14cac <SspInterface::SspInterface()>
   14d88:	9b01      	ldr	r3, [sp, #4]
   14d8a:	3304      	adds	r3, #4
   14d8c:	4618      	mov	r0, r3
   14d8e:	f7ff ff65 	bl	14c5c <Lpc40xxSystemController::Lpc40xxSystemController()>
   14d92:	4a2c      	ldr	r2, [pc, #176]	; (14e44 <Ssp::Ssp(Ssp::Peripheral)+0xd8>)
   14d94:	9b01      	ldr	r3, [sp, #4]
   14d96:	601a      	str	r2, [r3, #0]
   14d98:	4a2b      	ldr	r2, [pc, #172]	; (14e48 <Ssp::Ssp(Ssp::Peripheral)+0xdc>)
   14d9a:	9b01      	ldr	r3, [sp, #4]
   14d9c:	605a      	str	r2, [r3, #4]
   14d9e:	9b01      	ldr	r3, [sp, #4]
   14da0:	f103 0214 	add.w	r2, r3, #20
   14da4:	9b01      	ldr	r3, [sp, #4]
   14da6:	609a      	str	r2, [r3, #8]
   14da8:	9b01      	ldr	r3, [sp, #4]
   14daa:	f103 021c 	add.w	r2, r3, #28
   14dae:	9b01      	ldr	r3, [sp, #4]
   14db0:	60da      	str	r2, [r3, #12]
   14db2:	9b01      	ldr	r3, [sp, #4]
   14db4:	f103 0224 	add.w	r2, r3, #36	; 0x24
   14db8:	9b01      	ldr	r3, [sp, #4]
   14dba:	611a      	str	r2, [r3, #16]
   14dbc:	9b01      	ldr	r3, [sp, #4]
   14dbe:	f103 0414 	add.w	r4, r3, #20
        mosi_pin_(kSspPinMatrix[util::Value(set_pssp)][MatrixLookup::kMosi]),
   14dc2:	9800      	ldr	r0, [sp, #0]
   14dc4:	f7ff ff5c 	bl	14c80 <int util::Value<Ssp::Peripheral, int>(Ssp::Peripheral)>
   14dc8:	4602      	mov	r2, r0
        pssp_(set_pssp)
   14dca:	4613      	mov	r3, r2
   14dcc:	005b      	lsls	r3, r3, #1
   14dce:	4413      	add	r3, r2
   14dd0:	00db      	lsls	r3, r3, #3
   14dd2:	4a1e      	ldr	r2, [pc, #120]	; (14e4c <Ssp::Ssp(Ssp::Peripheral)+0xe0>)
   14dd4:	4413      	add	r3, r2
   14dd6:	4619      	mov	r1, r3
   14dd8:	4620      	mov	r0, r4
   14dda:	f7ff ff9d 	bl	14d18 <Pin::Pin(Pin const&)>
   14dde:	9b01      	ldr	r3, [sp, #4]
   14de0:	f103 041c 	add.w	r4, r3, #28
        miso_pin_(kSspPinMatrix[util::Value(set_pssp)][MatrixLookup::kMiso]),
   14de4:	9800      	ldr	r0, [sp, #0]
   14de6:	f7ff ff4b 	bl	14c80 <int util::Value<Ssp::Peripheral, int>(Ssp::Peripheral)>
   14dea:	4602      	mov	r2, r0
        pssp_(set_pssp)
   14dec:	4613      	mov	r3, r2
   14dee:	005b      	lsls	r3, r3, #1
   14df0:	4413      	add	r3, r2
   14df2:	00db      	lsls	r3, r3, #3
   14df4:	3308      	adds	r3, #8
   14df6:	4a15      	ldr	r2, [pc, #84]	; (14e4c <Ssp::Ssp(Ssp::Peripheral)+0xe0>)
   14df8:	4413      	add	r3, r2
   14dfa:	4619      	mov	r1, r3
   14dfc:	4620      	mov	r0, r4
   14dfe:	f7ff ff8b 	bl	14d18 <Pin::Pin(Pin const&)>
   14e02:	9b01      	ldr	r3, [sp, #4]
   14e04:	f103 0424 	add.w	r4, r3, #36	; 0x24
        sck_pin_(kSspPinMatrix[util::Value(set_pssp)][MatrixLookup::kSck]),
   14e08:	9800      	ldr	r0, [sp, #0]
   14e0a:	f7ff ff39 	bl	14c80 <int util::Value<Ssp::Peripheral, int>(Ssp::Peripheral)>
   14e0e:	4602      	mov	r2, r0
        pssp_(set_pssp)
   14e10:	4613      	mov	r3, r2
   14e12:	005b      	lsls	r3, r3, #1
   14e14:	4413      	add	r3, r2
   14e16:	00db      	lsls	r3, r3, #3
   14e18:	3310      	adds	r3, #16
   14e1a:	4a0c      	ldr	r2, [pc, #48]	; (14e4c <Ssp::Ssp(Ssp::Peripheral)+0xe0>)
   14e1c:	4413      	add	r3, r2
   14e1e:	4619      	mov	r1, r3
   14e20:	4620      	mov	r0, r4
   14e22:	f7ff ff79 	bl	14d18 <Pin::Pin(Pin const&)>
   14e26:	9b01      	ldr	r3, [sp, #4]
   14e28:	9a00      	ldr	r2, [sp, #0]
   14e2a:	62da      	str	r2, [r3, #44]	; 0x2c
  {
  }
   14e2c:	9c01      	ldr	r4, [sp, #4]
   14e2e:	462b      	mov	r3, r5
   14e30:	4619      	mov	r1, r3
   14e32:	4803      	ldr	r0, [pc, #12]	; (14e40 <Ssp::Ssp(Ssp::Peripheral)+0xd4>)
   14e34:	f7fd ff00 	bl	12c38 <__cyg_profile_func_exit>
   14e38:	4623      	mov	r3, r4
   14e3a:	4618      	mov	r0, r3
   14e3c:	b003      	add	sp, #12
   14e3e:	bd30      	pop	{r4, r5, pc}
   14e40:	00014d6d 	.word	0x00014d6d
   14e44:	00018f88 	.word	0x00018f88
   14e48:	00018fb0 	.word	0x00018fb0
   14e4c:	00018b3c 	.word	0x00018b3c

00014e50 <Ssp::Initialize()>:
  }

  /// Powers on the peripheral, sets the peripheral clock, format, and data
  /// size, and enables the SSP pins for communication see and more.
  /// See page 601 of user manual UM10562 LPC408x/407x for more details.
  void Initialize() override
   14e50:	b570      	push	{r4, r5, r6, lr}
   14e52:	b086      	sub	sp, #24
   14e54:	4676      	mov	r6, lr
   14e56:	9001      	str	r0, [sp, #4]
   14e58:	4633      	mov	r3, r6
   14e5a:	4619      	mov	r1, r3
   14e5c:	4830      	ldr	r0, [pc, #192]	; (14f20 <Ssp::Initialize()+0xd0>)
   14e5e:	f7fd fed7 	bl	12c10 <__cyg_profile_func_enter>
  {
    uint32_t pssp = util::Value(pssp_);
   14e62:	9b01      	ldr	r3, [sp, #4]
   14e64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   14e66:	4618      	mov	r0, r3
   14e68:	f7ff ff0a 	bl	14c80 <int util::Value<Ssp::Peripheral, int>(Ssp::Peripheral)>
   14e6c:	4603      	mov	r3, r0
   14e6e:	9305      	str	r3, [sp, #20]
    // Power up peripheral
    PowerUpPeripheral(kPowerBit[pssp]);
   14e70:	9b01      	ldr	r3, [sp, #4]
   14e72:	1d18      	adds	r0, r3, #4
   14e74:	9b01      	ldr	r3, [sp, #4]
   14e76:	685b      	ldr	r3, [r3, #4]
   14e78:	3314      	adds	r3, #20
   14e7a:	681b      	ldr	r3, [r3, #0]
   14e7c:	9a05      	ldr	r2, [sp, #20]
   14e7e:	0092      	lsls	r2, r2, #2
   14e80:	4928      	ldr	r1, [pc, #160]	; (14f24 <Ssp::Initialize()+0xd4>)
   14e82:	440a      	add	r2, r1
   14e84:	4611      	mov	r1, r2
   14e86:	4798      	blx	r3
    // Enable SSP pins
    mosi_->SetPinFunction(kPinSelect[pssp]);
   14e88:	9b01      	ldr	r3, [sp, #4]
   14e8a:	6898      	ldr	r0, [r3, #8]
   14e8c:	9b01      	ldr	r3, [sp, #4]
   14e8e:	689b      	ldr	r3, [r3, #8]
   14e90:	681b      	ldr	r3, [r3, #0]
   14e92:	681b      	ldr	r3, [r3, #0]
   14e94:	4924      	ldr	r1, [pc, #144]	; (14f28 <Ssp::Initialize()+0xd8>)
   14e96:	9a05      	ldr	r2, [sp, #20]
   14e98:	440a      	add	r2, r1
   14e9a:	7812      	ldrb	r2, [r2, #0]
   14e9c:	4611      	mov	r1, r2
   14e9e:	4798      	blx	r3
    miso_->SetPinFunction(kPinSelect[pssp]);
   14ea0:	9b01      	ldr	r3, [sp, #4]
   14ea2:	68d8      	ldr	r0, [r3, #12]
   14ea4:	9b01      	ldr	r3, [sp, #4]
   14ea6:	68db      	ldr	r3, [r3, #12]
   14ea8:	681b      	ldr	r3, [r3, #0]
   14eaa:	681b      	ldr	r3, [r3, #0]
   14eac:	491e      	ldr	r1, [pc, #120]	; (14f28 <Ssp::Initialize()+0xd8>)
   14eae:	9a05      	ldr	r2, [sp, #20]
   14eb0:	440a      	add	r2, r1
   14eb2:	7812      	ldrb	r2, [r2, #0]
   14eb4:	4611      	mov	r1, r2
   14eb6:	4798      	blx	r3
    sck_->SetPinFunction(kPinSelect[pssp]);
   14eb8:	9b01      	ldr	r3, [sp, #4]
   14eba:	6918      	ldr	r0, [r3, #16]
   14ebc:	9b01      	ldr	r3, [sp, #4]
   14ebe:	691b      	ldr	r3, [r3, #16]
   14ec0:	681b      	ldr	r3, [r3, #0]
   14ec2:	681b      	ldr	r3, [r3, #0]
   14ec4:	4918      	ldr	r1, [pc, #96]	; (14f28 <Ssp::Initialize()+0xd8>)
   14ec6:	9a05      	ldr	r2, [sp, #20]
   14ec8:	440a      	add	r2, r1
   14eca:	7812      	ldrb	r2, [r2, #0]
   14ecc:	4611      	mov	r1, r2
   14ece:	4798      	blx	r3
    // Enable SSP
    ssp_registers[pssp]->CR1 = bit::Set(ssp_registers[pssp]->CR1, kSspEnable);
   14ed0:	4a16      	ldr	r2, [pc, #88]	; (14f2c <Ssp::Initialize()+0xdc>)
   14ed2:	9b05      	ldr	r3, [sp, #20]
   14ed4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14ed8:	685b      	ldr	r3, [r3, #4]
   14eda:	4914      	ldr	r1, [pc, #80]	; (14f2c <Ssp::Initialize()+0xdc>)
   14edc:	9a05      	ldr	r2, [sp, #20]
   14ede:	f851 4022 	ldr.w	r4, [r1, r2, lsl #2]
   14ee2:	9304      	str	r3, [sp, #16]
   14ee4:	2301      	movs	r3, #1
   14ee6:	9303      	str	r3, [sp, #12]
   14ee8:	4633      	mov	r3, r6
   14eea:	4619      	mov	r1, r3
   14eec:	4810      	ldr	r0, [pc, #64]	; (14f30 <Ssp::Initialize()+0xe0>)
   14eee:	f7fd fe8f 	bl	12c10 <__cyg_profile_func_enter>
[[gnu::always_inline]] [[nodiscard]]
constexpr T Set(T target, uint32_t position)
{
  static_assert(std::numeric_limits<T>::is_integer,
                "Set only accepts intergers.");
  return target | (1 << position);
   14ef2:	2201      	movs	r2, #1
   14ef4:	9b03      	ldr	r3, [sp, #12]
   14ef6:	fa02 f303 	lsl.w	r3, r2, r3
   14efa:	461a      	mov	r2, r3
   14efc:	9b04      	ldr	r3, [sp, #16]
   14efe:	ea42 0503 	orr.w	r5, r2, r3
   14f02:	4633      	mov	r3, r6
   14f04:	4619      	mov	r1, r3
   14f06:	480a      	ldr	r0, [pc, #40]	; (14f30 <Ssp::Initialize()+0xe0>)
   14f08:	f7fd fe96 	bl	12c38 <__cyg_profile_func_exit>
   14f0c:	6065      	str	r5, [r4, #4]
   14f0e:	4633      	mov	r3, r6
   14f10:	4619      	mov	r1, r3
   14f12:	4803      	ldr	r0, [pc, #12]	; (14f20 <Ssp::Initialize()+0xd0>)
   14f14:	f7fd fe90 	bl	12c38 <__cyg_profile_func_exit>
  }
   14f18:	bf00      	nop
   14f1a:	b006      	add	sp, #24
   14f1c:	bd70      	pop	{r4, r5, r6, pc}
   14f1e:	bf00      	nop
   14f20:	00014e51 	.word	0x00014e51
   14f24:	00018b84 	.word	0x00018b84
   14f28:	00018b38 	.word	0x00018b38
   14f2c:	100001e0 	.word	0x100001e0
   14f30:	00016b5d 	.word	0x00016b5d

00014f34 <Ssp::IsTransferRegBusy()>:

  /// Checks if the SSP controller is idle.
  /// @returns true if the controller is sending or receiving a data frame and
  /// false if it is idle.
  bool IsTransferRegBusy() override
   14f34:	b530      	push	{r4, r5, lr}
   14f36:	b085      	sub	sp, #20
   14f38:	4675      	mov	r5, lr
   14f3a:	9001      	str	r0, [sp, #4]
   14f3c:	462b      	mov	r3, r5
   14f3e:	4619      	mov	r1, r3
   14f40:	4817      	ldr	r0, [pc, #92]	; (14fa0 <Ssp::IsTransferRegBusy()+0x6c>)
   14f42:	f7fd fe65 	bl	12c10 <__cyg_profile_func_enter>
  {
    return (bit::Read(ssp_registers[util::Value(pssp_)]->SR, kDataLineIdleBit));
   14f46:	9b01      	ldr	r3, [sp, #4]
   14f48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   14f4a:	4618      	mov	r0, r3
   14f4c:	f7ff fe98 	bl	14c80 <int util::Value<Ssp::Peripheral, int>(Ssp::Peripheral)>
   14f50:	4602      	mov	r2, r0
   14f52:	4b14      	ldr	r3, [pc, #80]	; (14fa4 <Ssp::IsTransferRegBusy()+0x70>)
   14f54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   14f58:	68db      	ldr	r3, [r3, #12]
   14f5a:	9303      	str	r3, [sp, #12]
   14f5c:	2304      	movs	r3, #4
   14f5e:	9302      	str	r3, [sp, #8]
   14f60:	462b      	mov	r3, r5
   14f62:	4619      	mov	r1, r3
   14f64:	4810      	ldr	r0, [pc, #64]	; (14fa8 <Ssp::IsTransferRegBusy()+0x74>)
   14f66:	f7fd fe53 	bl	12c10 <__cyg_profile_func_enter>
[[gnu::always_inline]][[nodiscard]] constexpr bool Read(T target,
                                                        uint32_t position)
{
  static_assert(std::numeric_limits<T>::is_integer,
                "Read only accepts intergers.");
  return static_cast<bool>(target & (1 << position));
   14f6a:	2201      	movs	r2, #1
   14f6c:	9b02      	ldr	r3, [sp, #8]
   14f6e:	fa02 f303 	lsl.w	r3, r2, r3
   14f72:	461a      	mov	r2, r3
   14f74:	9b03      	ldr	r3, [sp, #12]
   14f76:	4013      	ands	r3, r2
   14f78:	2b00      	cmp	r3, #0
   14f7a:	bf14      	ite	ne
   14f7c:	2301      	movne	r3, #1
   14f7e:	2300      	moveq	r3, #0
   14f80:	b2dc      	uxtb	r4, r3
   14f82:	462b      	mov	r3, r5
   14f84:	4619      	mov	r1, r3
   14f86:	4808      	ldr	r0, [pc, #32]	; (14fa8 <Ssp::IsTransferRegBusy()+0x74>)
   14f88:	f7fd fe56 	bl	12c38 <__cyg_profile_func_exit>
   14f8c:	462b      	mov	r3, r5
   14f8e:	4619      	mov	r1, r3
   14f90:	4803      	ldr	r0, [pc, #12]	; (14fa0 <Ssp::IsTransferRegBusy()+0x6c>)
   14f92:	f7fd fe51 	bl	12c38 <__cyg_profile_func_exit>
   14f96:	4623      	mov	r3, r4
  }
   14f98:	4618      	mov	r0, r3
   14f9a:	b005      	add	sp, #20
   14f9c:	bd30      	pop	{r4, r5, pc}
   14f9e:	bf00      	nop
   14fa0:	00014f35 	.word	0x00014f35
   14fa4:	100001e0 	.word	0x100001e0
   14fa8:	00016b99 	.word	0x00016b99

00014fac <Ssp::Transfer(unsigned short)>:
  /// data register. This functions for both transmitting and
  /// receiving data. It is recommended this region be protected
  /// by a mutex.
  /// @param data - information to be placed in data register
  /// @return - received data from external device
  uint16_t Transfer(uint16_t data) override
   14fac:	b530      	push	{r4, r5, lr}
   14fae:	b085      	sub	sp, #20
   14fb0:	4675      	mov	r5, lr
   14fb2:	9001      	str	r0, [sp, #4]
   14fb4:	460b      	mov	r3, r1
   14fb6:	f8ad 3002 	strh.w	r3, [sp, #2]
   14fba:	462b      	mov	r3, r5
   14fbc:	4619      	mov	r1, r3
   14fbe:	4814      	ldr	r0, [pc, #80]	; (15010 <Ssp::Transfer(unsigned short)+0x64>)
   14fc0:	f7fd fe26 	bl	12c10 <__cyg_profile_func_enter>
  {
    uint32_t pssp = util::Value(pssp_);
   14fc4:	9b01      	ldr	r3, [sp, #4]
   14fc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   14fc8:	4618      	mov	r0, r3
   14fca:	f7ff fe59 	bl	14c80 <int util::Value<Ssp::Peripheral, int>(Ssp::Peripheral)>
   14fce:	4603      	mov	r3, r0
   14fd0:	9303      	str	r3, [sp, #12]

    ssp_registers[pssp]->DR = data;
   14fd2:	4a10      	ldr	r2, [pc, #64]	; (15014 <Ssp::Transfer(unsigned short)+0x68>)
   14fd4:	9b03      	ldr	r3, [sp, #12]
   14fd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14fda:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   14fde:	609a      	str	r2, [r3, #8]
    while (IsTransferRegBusy())
   14fe0:	9801      	ldr	r0, [sp, #4]
   14fe2:	f7ff ffa7 	bl	14f34 <Ssp::IsTransferRegBusy()>
   14fe6:	4603      	mov	r3, r0
   14fe8:	2b00      	cmp	r3, #0
   14fea:	d001      	beq.n	14ff0 <Ssp::Transfer(unsigned short)+0x44>
    {
      continue;
   14fec:	bf00      	nop
    while (IsTransferRegBusy())
   14fee:	e7f7      	b.n	14fe0 <Ssp::Transfer(unsigned short)+0x34>
    }
    return static_cast<uint16_t>(ssp_registers[pssp]->DR);
   14ff0:	4a08      	ldr	r2, [pc, #32]	; (15014 <Ssp::Transfer(unsigned short)+0x68>)
   14ff2:	9b03      	ldr	r3, [sp, #12]
   14ff4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14ff8:	689b      	ldr	r3, [r3, #8]
   14ffa:	b29c      	uxth	r4, r3
   14ffc:	462b      	mov	r3, r5
   14ffe:	4619      	mov	r1, r3
   15000:	4803      	ldr	r0, [pc, #12]	; (15010 <Ssp::Transfer(unsigned short)+0x64>)
   15002:	f7fd fe19 	bl	12c38 <__cyg_profile_func_exit>
   15006:	4623      	mov	r3, r4
  }
   15008:	4618      	mov	r0, r3
   1500a:	b005      	add	sp, #20
   1500c:	bd30      	pop	{r4, r5, pc}
   1500e:	bf00      	nop
   15010:	00014fad 	.word	0x00014fad
   15014:	100001e0 	.word	0x100001e0

00015018 <Ssp::SetSpiMasterDefault()>:

  /// Sets up SSP peripheral as SPI master
  void SetSpiMasterDefault() override
   15018:	b510      	push	{r4, lr}
   1501a:	b086      	sub	sp, #24
   1501c:	4674      	mov	r4, lr
   1501e:	9003      	str	r0, [sp, #12]
   15020:	4623      	mov	r3, r4
   15022:	4619      	mov	r1, r3
   15024:	4812      	ldr	r0, [pc, #72]	; (15070 <Ssp::SetSpiMasterDefault()+0x58>)
   15026:	f7fd fdf3 	bl	12c10 <__cyg_profile_func_enter>
  {
    constexpr bool kHighPolarity  = 1;
   1502a:	2301      	movs	r3, #1
   1502c:	f88d 3017 	strb.w	r3, [sp, #23]
    constexpr bool kPhase0        = 0;
   15030:	2300      	movs	r3, #0
   15032:	f88d 3016 	strb.w	r3, [sp, #22]
    constexpr uint8_t kScrDivider = 0;
   15036:	2300      	movs	r3, #0
   15038:	f88d 3015 	strb.w	r3, [sp, #21]
    constexpr uint8_t kPrescaler  = SJ2_SYSTEM_CLOCK_RATE_MHZ;
   1503c:	2330      	movs	r3, #48	; 0x30
   1503e:	f88d 3014 	strb.w	r3, [sp, #20]

    SetPeripheralMode(kMaster, kSpi, kEight);
   15042:	2307      	movs	r3, #7
   15044:	2200      	movs	r2, #0
   15046:	2100      	movs	r1, #0
   15048:	9803      	ldr	r0, [sp, #12]
   1504a:	f000 f85b 	bl	15104 <Ssp::SetPeripheralMode(SspInterface::MasterSlaveMode, SspInterface::FrameMode, SspInterface::DataSize)>
    SetClock(kHighPolarity, kPhase0, kScrDivider, kPrescaler);
   1504e:	2330      	movs	r3, #48	; 0x30
   15050:	9300      	str	r3, [sp, #0]
   15052:	2300      	movs	r3, #0
   15054:	2200      	movs	r2, #0
   15056:	2101      	movs	r1, #1
   15058:	9803      	ldr	r0, [sp, #12]
   1505a:	f000 fa09 	bl	15470 <Ssp::SetClock(bool, bool, unsigned char, unsigned char)>
   1505e:	4623      	mov	r3, r4
   15060:	4619      	mov	r1, r3
   15062:	4803      	ldr	r0, [pc, #12]	; (15070 <Ssp::SetSpiMasterDefault()+0x58>)
   15064:	f7fd fde8 	bl	12c38 <__cyg_profile_func_exit>
  }
   15068:	bf00      	nop
   1506a:	b006      	add	sp, #24
   1506c:	bd10      	pop	{r4, pc}
   1506e:	bf00      	nop
   15070:	00015019 	.word	0x00015019

00015074 <unsigned char util::Value<SspInterface::DataSize, unsigned char>(SspInterface::DataSize)>:
constexpr Type Value(Enum enum_type_value)
   15074:	b530      	push	{r4, r5, lr}
   15076:	b083      	sub	sp, #12
   15078:	4675      	mov	r5, lr
   1507a:	4603      	mov	r3, r0
   1507c:	f88d 3007 	strb.w	r3, [sp, #7]
   15080:	462b      	mov	r3, r5
   15082:	4619      	mov	r1, r3
   15084:	4806      	ldr	r0, [pc, #24]	; (150a0 <unsigned char util::Value<SspInterface::DataSize, unsigned char>(SspInterface::DataSize)+0x2c>)
   15086:	f7fd fdc3 	bl	12c10 <__cyg_profile_func_enter>
  return static_cast<Type>(enum_type_value);
   1508a:	f89d 4007 	ldrb.w	r4, [sp, #7]
   1508e:	462b      	mov	r3, r5
   15090:	4619      	mov	r1, r3
   15092:	4803      	ldr	r0, [pc, #12]	; (150a0 <unsigned char util::Value<SspInterface::DataSize, unsigned char>(SspInterface::DataSize)+0x2c>)
   15094:	f7fd fdd0 	bl	12c38 <__cyg_profile_func_exit>
   15098:	4623      	mov	r3, r4
}
   1509a:	4618      	mov	r0, r3
   1509c:	b003      	add	sp, #12
   1509e:	bd30      	pop	{r4, r5, pc}
   150a0:	00015075 	.word	0x00015075

000150a4 <unsigned char util::Value<SspInterface::FrameMode, unsigned char>(SspInterface::FrameMode)>:
constexpr Type Value(Enum enum_type_value)
   150a4:	b530      	push	{r4, r5, lr}
   150a6:	b083      	sub	sp, #12
   150a8:	4675      	mov	r5, lr
   150aa:	4603      	mov	r3, r0
   150ac:	f88d 3007 	strb.w	r3, [sp, #7]
   150b0:	462b      	mov	r3, r5
   150b2:	4619      	mov	r1, r3
   150b4:	4806      	ldr	r0, [pc, #24]	; (150d0 <unsigned char util::Value<SspInterface::FrameMode, unsigned char>(SspInterface::FrameMode)+0x2c>)
   150b6:	f7fd fdab 	bl	12c10 <__cyg_profile_func_enter>
  return static_cast<Type>(enum_type_value);
   150ba:	f89d 4007 	ldrb.w	r4, [sp, #7]
   150be:	462b      	mov	r3, r5
   150c0:	4619      	mov	r1, r3
   150c2:	4803      	ldr	r0, [pc, #12]	; (150d0 <unsigned char util::Value<SspInterface::FrameMode, unsigned char>(SspInterface::FrameMode)+0x2c>)
   150c4:	f7fd fdb8 	bl	12c38 <__cyg_profile_func_exit>
   150c8:	4623      	mov	r3, r4
}
   150ca:	4618      	mov	r0, r3
   150cc:	b003      	add	sp, #12
   150ce:	bd30      	pop	{r4, r5, pc}
   150d0:	000150a5 	.word	0x000150a5

000150d4 <unsigned char util::Value<SspInterface::MasterSlaveMode, unsigned char>(SspInterface::MasterSlaveMode)>:
constexpr Type Value(Enum enum_type_value)
   150d4:	b530      	push	{r4, r5, lr}
   150d6:	b083      	sub	sp, #12
   150d8:	4675      	mov	r5, lr
   150da:	4603      	mov	r3, r0
   150dc:	f88d 3007 	strb.w	r3, [sp, #7]
   150e0:	462b      	mov	r3, r5
   150e2:	4619      	mov	r1, r3
   150e4:	4806      	ldr	r0, [pc, #24]	; (15100 <unsigned char util::Value<SspInterface::MasterSlaveMode, unsigned char>(SspInterface::MasterSlaveMode)+0x2c>)
   150e6:	f7fd fd93 	bl	12c10 <__cyg_profile_func_enter>
  return static_cast<Type>(enum_type_value);
   150ea:	f89d 4007 	ldrb.w	r4, [sp, #7]
   150ee:	462b      	mov	r3, r5
   150f0:	4619      	mov	r1, r3
   150f2:	4803      	ldr	r0, [pc, #12]	; (15100 <unsigned char util::Value<SspInterface::MasterSlaveMode, unsigned char>(SspInterface::MasterSlaveMode)+0x2c>)
   150f4:	f7fd fda0 	bl	12c38 <__cyg_profile_func_exit>
   150f8:	4623      	mov	r3, r4
}
   150fa:	4618      	mov	r0, r3
   150fc:	b003      	add	sp, #12
   150fe:	bd30      	pop	{r4, r5, pc}
   15100:	000150d5 	.word	0x000150d5

00015104 <Ssp::SetPeripheralMode(SspInterface::MasterSlaveMode, SspInterface::FrameMode, SspInterface::DataSize)>:

  /// Sets the various modes for the Peripheral
  /// @param mode - master or slave mode
  /// @param frame - format for Peripheral data to use
  /// @param size - number of bits per frame
  void SetPeripheralMode(MasterSlaveMode mode, FrameMode frame,
   15104:	b570      	push	{r4, r5, r6, lr}
   15106:	b098      	sub	sp, #96	; 0x60
   15108:	4674      	mov	r4, lr
   1510a:	9001      	str	r0, [sp, #4]
   1510c:	4608      	mov	r0, r1
   1510e:	4611      	mov	r1, r2
   15110:	461a      	mov	r2, r3
   15112:	4603      	mov	r3, r0
   15114:	f88d 3003 	strb.w	r3, [sp, #3]
   15118:	460b      	mov	r3, r1
   1511a:	f88d 3002 	strb.w	r3, [sp, #2]
   1511e:	4613      	mov	r3, r2
   15120:	f88d 3001 	strb.w	r3, [sp, #1]
   15124:	4623      	mov	r3, r4
   15126:	4619      	mov	r1, r3
   15128:	4875      	ldr	r0, [pc, #468]	; (15300 <Ssp::SetPeripheralMode(SspInterface::MasterSlaveMode, SspInterface::FrameMode, SspInterface::DataSize)+0x1fc>)
   1512a:	f7fd fd71 	bl	12c10 <__cyg_profile_func_enter>
                         DataSize size) override
  {
    uint32_t pssp = util::Value(pssp_);
   1512e:	9b01      	ldr	r3, [sp, #4]
   15130:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   15132:	4618      	mov	r0, r3
   15134:	f7ff fda4 	bl	14c80 <int util::Value<Ssp::Peripheral, int>(Ssp::Peripheral)>
   15138:	4603      	mov	r3, r0
   1513a:	9317      	str	r3, [sp, #92]	; 0x5c
    // TODO(#371): Find a better alternative to powering up the peripheral for
    // every method.
    Ssp::PowerUpPeripheral(Ssp::kPowerBit[pssp]);
   1513c:	9b01      	ldr	r3, [sp, #4]
   1513e:	1d18      	adds	r0, r3, #4
   15140:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   15142:	009b      	lsls	r3, r3, #2
   15144:	4a6f      	ldr	r2, [pc, #444]	; (15304 <Ssp::SetPeripheralMode(SspInterface::MasterSlaveMode, SspInterface::FrameMode, SspInterface::DataSize)+0x200>)
   15146:	4413      	add	r3, r2
   15148:	4619      	mov	r1, r3
   1514a:	f7fb fc7d 	bl	10a48 <Lpc40xxSystemController::PowerUpPeripheral(SystemControllerInterface::PeripheralID const&)>
    if (frame == kMicro)
   1514e:	f89d 3002 	ldrb.w	r3, [sp, #2]
   15152:	2b02      	cmp	r3, #2
   15154:	d102      	bne.n	1515c <Ssp::SetPeripheralMode(SspInterface::MasterSlaveMode, SspInterface::FrameMode, SspInterface::DataSize)+0x58>
    {
      size = kEight;
   15156:	2307      	movs	r3, #7
   15158:	f88d 3001 	strb.w	r3, [sp, #1]
    }
    ssp_registers[pssp]->CR0 =
        bit::Insert(ssp_registers[pssp]->CR0, util::Value(size), kDataBit, 4);
   1515c:	4a6a      	ldr	r2, [pc, #424]	; (15308 <Ssp::SetPeripheralMode(SspInterface::MasterSlaveMode, SspInterface::FrameMode, SspInterface::DataSize)+0x204>)
   1515e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   15160:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15164:	681e      	ldr	r6, [r3, #0]
   15166:	f89d 3001 	ldrb.w	r3, [sp, #1]
   1516a:	4618      	mov	r0, r3
   1516c:	f7ff ff82 	bl	15074 <unsigned char util::Value<SspInterface::DataSize, unsigned char>(SspInterface::DataSize)>
   15170:	4603      	mov	r3, r0
   15172:	4619      	mov	r1, r3
    ssp_registers[pssp]->CR0 =
   15174:	4a64      	ldr	r2, [pc, #400]	; (15308 <Ssp::SetPeripheralMode(SspInterface::MasterSlaveMode, SspInterface::FrameMode, SspInterface::DataSize)+0x204>)
   15176:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   15178:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
   1517c:	9608      	str	r6, [sp, #32]
   1517e:	460b      	mov	r3, r1
   15180:	f88d 301f 	strb.w	r3, [sp, #31]
   15184:	2300      	movs	r3, #0
   15186:	9306      	str	r3, [sp, #24]
   15188:	2304      	movs	r3, #4
   1518a:	9305      	str	r3, [sp, #20]
   1518c:	4623      	mov	r3, r4
   1518e:	4619      	mov	r1, r3
   15190:	485e      	ldr	r0, [pc, #376]	; (1530c <Ssp::SetPeripheralMode(SspInterface::MasterSlaveMode, SspInterface::FrameMode, SspInterface::DataSize)+0x208>)
   15192:	f7fd fd3d 	bl	12c10 <__cyg_profile_func_enter>
  constexpr UnsignedT kFieldOfOnes = GenerateFieldOfOnes<T>();
   15196:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1519a:	9304      	str	r3, [sp, #16]
  constexpr size_t kTargetWidth     = sizeof(T) * 8;
   1519c:	2320      	movs	r3, #32
   1519e:	9303      	str	r3, [sp, #12]
  UnsignedT mask   = kFieldOfOnes >> (kTargetWidth - width);
   151a0:	9b05      	ldr	r3, [sp, #20]
   151a2:	f1c3 0320 	rsb	r3, r3, #32
   151a6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   151aa:	fa22 f303 	lsr.w	r3, r2, r3
   151ae:	9302      	str	r3, [sp, #8]
  target &= ~(mask << position);
   151b0:	9a02      	ldr	r2, [sp, #8]
   151b2:	9b06      	ldr	r3, [sp, #24]
   151b4:	fa02 f303 	lsl.w	r3, r2, r3
   151b8:	43db      	mvns	r3, r3
   151ba:	9a08      	ldr	r2, [sp, #32]
   151bc:	4013      	ands	r3, r2
   151be:	9308      	str	r3, [sp, #32]
  target |= (value & mask) << position;
   151c0:	f89d 201f 	ldrb.w	r2, [sp, #31]
   151c4:	9b02      	ldr	r3, [sp, #8]
   151c6:	401a      	ands	r2, r3
   151c8:	9b06      	ldr	r3, [sp, #24]
   151ca:	fa02 f303 	lsl.w	r3, r2, r3
   151ce:	9a08      	ldr	r2, [sp, #32]
   151d0:	4313      	orrs	r3, r2
   151d2:	9308      	str	r3, [sp, #32]
  return target;
   151d4:	9e08      	ldr	r6, [sp, #32]
   151d6:	4623      	mov	r3, r4
   151d8:	4619      	mov	r1, r3
   151da:	484c      	ldr	r0, [pc, #304]	; (1530c <Ssp::SetPeripheralMode(SspInterface::MasterSlaveMode, SspInterface::FrameMode, SspInterface::DataSize)+0x208>)
   151dc:	f7fd fd2c 	bl	12c38 <__cyg_profile_func_exit>
   151e0:	602e      	str	r6, [r5, #0]
    ssp_registers[pssp]->CR0 =
        bit::Insert(ssp_registers[pssp]->CR0, util::Value(frame), kFrameBit, 2);
   151e2:	4a49      	ldr	r2, [pc, #292]	; (15308 <Ssp::SetPeripheralMode(SspInterface::MasterSlaveMode, SspInterface::FrameMode, SspInterface::DataSize)+0x204>)
   151e4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   151e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   151ea:	681e      	ldr	r6, [r3, #0]
   151ec:	f89d 3002 	ldrb.w	r3, [sp, #2]
   151f0:	4618      	mov	r0, r3
   151f2:	f7ff ff57 	bl	150a4 <unsigned char util::Value<SspInterface::FrameMode, unsigned char>(SspInterface::FrameMode)>
   151f6:	4603      	mov	r3, r0
   151f8:	4619      	mov	r1, r3
    ssp_registers[pssp]->CR0 =
   151fa:	4a43      	ldr	r2, [pc, #268]	; (15308 <Ssp::SetPeripheralMode(SspInterface::MasterSlaveMode, SspInterface::FrameMode, SspInterface::DataSize)+0x204>)
   151fc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   151fe:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
   15202:	960f      	str	r6, [sp, #60]	; 0x3c
   15204:	460b      	mov	r3, r1
   15206:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
   1520a:	2304      	movs	r3, #4
   1520c:	930d      	str	r3, [sp, #52]	; 0x34
   1520e:	2302      	movs	r3, #2
   15210:	930c      	str	r3, [sp, #48]	; 0x30
   15212:	4623      	mov	r3, r4
   15214:	4619      	mov	r1, r3
   15216:	483d      	ldr	r0, [pc, #244]	; (1530c <Ssp::SetPeripheralMode(SspInterface::MasterSlaveMode, SspInterface::FrameMode, SspInterface::DataSize)+0x208>)
   15218:	f7fd fcfa 	bl	12c10 <__cyg_profile_func_enter>
  constexpr UnsignedT kFieldOfOnes = GenerateFieldOfOnes<T>();
   1521c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   15220:	930b      	str	r3, [sp, #44]	; 0x2c
  constexpr size_t kTargetWidth     = sizeof(T) * 8;
   15222:	2320      	movs	r3, #32
   15224:	930a      	str	r3, [sp, #40]	; 0x28
  UnsignedT mask   = kFieldOfOnes >> (kTargetWidth - width);
   15226:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   15228:	f1c3 0320 	rsb	r3, r3, #32
   1522c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   15230:	fa22 f303 	lsr.w	r3, r2, r3
   15234:	9309      	str	r3, [sp, #36]	; 0x24
  target &= ~(mask << position);
   15236:	9a09      	ldr	r2, [sp, #36]	; 0x24
   15238:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1523a:	fa02 f303 	lsl.w	r3, r2, r3
   1523e:	43db      	mvns	r3, r3
   15240:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   15242:	4013      	ands	r3, r2
   15244:	930f      	str	r3, [sp, #60]	; 0x3c
  target |= (value & mask) << position;
   15246:	f89d 203b 	ldrb.w	r2, [sp, #59]	; 0x3b
   1524a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1524c:	401a      	ands	r2, r3
   1524e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   15250:	fa02 f303 	lsl.w	r3, r2, r3
   15254:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   15256:	4313      	orrs	r3, r2
   15258:	930f      	str	r3, [sp, #60]	; 0x3c
  return target;
   1525a:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
   1525c:	4623      	mov	r3, r4
   1525e:	4619      	mov	r1, r3
   15260:	482a      	ldr	r0, [pc, #168]	; (1530c <Ssp::SetPeripheralMode(SspInterface::MasterSlaveMode, SspInterface::FrameMode, SspInterface::DataSize)+0x208>)
   15262:	f7fd fce9 	bl	12c38 <__cyg_profile_func_exit>
   15266:	602e      	str	r6, [r5, #0]
    ssp_registers[pssp]->CR1 = bit::Insert(
        ssp_registers[pssp]->CR1, util::Value(mode), kMasterModeBit, 1);
   15268:	4a27      	ldr	r2, [pc, #156]	; (15308 <Ssp::SetPeripheralMode(SspInterface::MasterSlaveMode, SspInterface::FrameMode, SspInterface::DataSize)+0x204>)
   1526a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   1526c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15270:	685e      	ldr	r6, [r3, #4]
    ssp_registers[pssp]->CR1 = bit::Insert(
   15272:	f89d 3003 	ldrb.w	r3, [sp, #3]
   15276:	4618      	mov	r0, r3
   15278:	f7ff ff2c 	bl	150d4 <unsigned char util::Value<SspInterface::MasterSlaveMode, unsigned char>(SspInterface::MasterSlaveMode)>
   1527c:	4603      	mov	r3, r0
   1527e:	4619      	mov	r1, r3
   15280:	4a21      	ldr	r2, [pc, #132]	; (15308 <Ssp::SetPeripheralMode(SspInterface::MasterSlaveMode, SspInterface::FrameMode, SspInterface::DataSize)+0x204>)
   15282:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   15284:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
   15288:	9616      	str	r6, [sp, #88]	; 0x58
   1528a:	460b      	mov	r3, r1
   1528c:	f88d 3057 	strb.w	r3, [sp, #87]	; 0x57
   15290:	2302      	movs	r3, #2
   15292:	9314      	str	r3, [sp, #80]	; 0x50
   15294:	2301      	movs	r3, #1
   15296:	9313      	str	r3, [sp, #76]	; 0x4c
   15298:	4623      	mov	r3, r4
   1529a:	4619      	mov	r1, r3
   1529c:	481b      	ldr	r0, [pc, #108]	; (1530c <Ssp::SetPeripheralMode(SspInterface::MasterSlaveMode, SspInterface::FrameMode, SspInterface::DataSize)+0x208>)
   1529e:	f7fd fcb7 	bl	12c10 <__cyg_profile_func_enter>
  constexpr UnsignedT kFieldOfOnes = GenerateFieldOfOnes<T>();
   152a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   152a6:	9312      	str	r3, [sp, #72]	; 0x48
  constexpr size_t kTargetWidth     = sizeof(T) * 8;
   152a8:	2320      	movs	r3, #32
   152aa:	9311      	str	r3, [sp, #68]	; 0x44
  UnsignedT mask   = kFieldOfOnes >> (kTargetWidth - width);
   152ac:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   152ae:	f1c3 0320 	rsb	r3, r3, #32
   152b2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   152b6:	fa22 f303 	lsr.w	r3, r2, r3
   152ba:	9310      	str	r3, [sp, #64]	; 0x40
  target &= ~(mask << position);
   152bc:	9a10      	ldr	r2, [sp, #64]	; 0x40
   152be:	9b14      	ldr	r3, [sp, #80]	; 0x50
   152c0:	fa02 f303 	lsl.w	r3, r2, r3
   152c4:	43db      	mvns	r3, r3
   152c6:	9a16      	ldr	r2, [sp, #88]	; 0x58
   152c8:	4013      	ands	r3, r2
   152ca:	9316      	str	r3, [sp, #88]	; 0x58
  target |= (value & mask) << position;
   152cc:	f89d 2057 	ldrb.w	r2, [sp, #87]	; 0x57
   152d0:	9b10      	ldr	r3, [sp, #64]	; 0x40
   152d2:	401a      	ands	r2, r3
   152d4:	9b14      	ldr	r3, [sp, #80]	; 0x50
   152d6:	fa02 f303 	lsl.w	r3, r2, r3
   152da:	9a16      	ldr	r2, [sp, #88]	; 0x58
   152dc:	4313      	orrs	r3, r2
   152de:	9316      	str	r3, [sp, #88]	; 0x58
  return target;
   152e0:	9e16      	ldr	r6, [sp, #88]	; 0x58
   152e2:	4623      	mov	r3, r4
   152e4:	4619      	mov	r1, r3
   152e6:	4809      	ldr	r0, [pc, #36]	; (1530c <Ssp::SetPeripheralMode(SspInterface::MasterSlaveMode, SspInterface::FrameMode, SspInterface::DataSize)+0x208>)
   152e8:	f7fd fca6 	bl	12c38 <__cyg_profile_func_exit>
   152ec:	606e      	str	r6, [r5, #4]
   152ee:	4623      	mov	r3, r4
   152f0:	4619      	mov	r1, r3
   152f2:	4803      	ldr	r0, [pc, #12]	; (15300 <Ssp::SetPeripheralMode(SspInterface::MasterSlaveMode, SspInterface::FrameMode, SspInterface::DataSize)+0x1fc>)
   152f4:	f7fd fca0 	bl	12c38 <__cyg_profile_func_exit>
  }
   152f8:	bf00      	nop
   152fa:	b018      	add	sp, #96	; 0x60
   152fc:	bd70      	pop	{r4, r5, r6, pc}
   152fe:	bf00      	nop
   15300:	00015105 	.word	0x00015105
   15304:	00018b84 	.word	0x00018b84
   15308:	100001e0 	.word	0x100001e0
   1530c:	00016bdd 	.word	0x00016bdd

00015310 <Ssp::GetPeripheralMode()>:
  /// Gets the Peripheral modes from registers
  /// @return - returns a 16-bit value as follows: 0000_000x 0xx0_xxxx
  ///       MasterSlaveMode = 1-bit @ bit 8
  ///       FrameMode       = 2-bit @ bit 5
  ///       DataSize        = 4-bit @ bit 0
  uint16_t GetPeripheralMode() override
   15310:	b570      	push	{r4, r5, r6, lr}
   15312:	b096      	sub	sp, #88	; 0x58
   15314:	4674      	mov	r4, lr
   15316:	9001      	str	r0, [sp, #4]
   15318:	4623      	mov	r3, r4
   1531a:	4619      	mov	r1, r3
   1531c:	4850      	ldr	r0, [pc, #320]	; (15460 <Ssp::GetPeripheralMode()+0x150>)
   1531e:	f7fd fc77 	bl	12c10 <__cyg_profile_func_enter>
  {
    uint16_t return_val = 0;
   15322:	2300      	movs	r3, #0
   15324:	f8ad 3056 	strh.w	r3, [sp, #86]	; 0x56
    uint32_t pssp       = util::Value(pssp_);
   15328:	9b01      	ldr	r3, [sp, #4]
   1532a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1532c:	4618      	mov	r0, r3
   1532e:	f7ff fca7 	bl	14c80 <int util::Value<Ssp::Peripheral, int>(Ssp::Peripheral)>
   15332:	4603      	mov	r3, r0
   15334:	9314      	str	r3, [sp, #80]	; 0x50
    // TODO(#371): Find a better alternative to powering up the peripheral for
    // every method.
    Ssp::PowerUpPeripheral(Ssp::kPowerBit[pssp]);
   15336:	9b01      	ldr	r3, [sp, #4]
   15338:	1d18      	adds	r0, r3, #4
   1533a:	9b14      	ldr	r3, [sp, #80]	; 0x50
   1533c:	009b      	lsls	r3, r3, #2
   1533e:	4a49      	ldr	r2, [pc, #292]	; (15464 <Ssp::GetPeripheralMode()+0x154>)
   15340:	4413      	add	r3, r2
   15342:	4619      	mov	r1, r3
   15344:	f7fb fb80 	bl	10a48 <Lpc40xxSystemController::PowerUpPeripheral(SystemControllerInterface::PeripheralID const&)>

    return_val = static_cast<uint16_t>(
        (bit::Extract(ssp_registers[pssp]->CR0, kDataBit, 4)) +
   15348:	4a47      	ldr	r2, [pc, #284]	; (15468 <Ssp::GetPeripheralMode()+0x158>)
   1534a:	9b14      	ldr	r3, [sp, #80]	; 0x50
   1534c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15350:	681b      	ldr	r3, [r3, #0]
   15352:	9307      	str	r3, [sp, #28]
   15354:	2300      	movs	r3, #0
   15356:	9306      	str	r3, [sp, #24]
   15358:	2304      	movs	r3, #4
   1535a:	9305      	str	r3, [sp, #20]
   1535c:	4623      	mov	r3, r4
   1535e:	4619      	mov	r1, r3
   15360:	4842      	ldr	r0, [pc, #264]	; (1546c <Ssp::GetPeripheralMode()+0x15c>)
   15362:	f7fd fc55 	bl	12c10 <__cyg_profile_func_enter>
  constexpr UnsignedT kFieldOfOnes = GenerateFieldOfOnes<T>();
   15366:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1536a:	9304      	str	r3, [sp, #16]
  constexpr size_t kTargetWidth     = sizeof(T) * 8;
   1536c:	2320      	movs	r3, #32
   1536e:	9303      	str	r3, [sp, #12]
  UnsignedT mask   = kFieldOfOnes >> (kTargetWidth - width);
   15370:	9b05      	ldr	r3, [sp, #20]
   15372:	f1c3 0320 	rsb	r3, r3, #32
   15376:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1537a:	fa22 f303 	lsr.w	r3, r2, r3
   1537e:	9302      	str	r3, [sp, #8]
  return (target >> position) & mask;
   15380:	9a07      	ldr	r2, [sp, #28]
   15382:	9b06      	ldr	r3, [sp, #24]
   15384:	40da      	lsrs	r2, r3
   15386:	9b02      	ldr	r3, [sp, #8]
   15388:	ea02 0503 	and.w	r5, r2, r3
   1538c:	4623      	mov	r3, r4
   1538e:	4619      	mov	r1, r3
   15390:	4836      	ldr	r0, [pc, #216]	; (1546c <Ssp::GetPeripheralMode()+0x15c>)
   15392:	f7fd fc51 	bl	12c38 <__cyg_profile_func_exit>
   15396:	b2ad      	uxth	r5, r5
        ((bit::Extract(ssp_registers[pssp]->CR0, kFrameBit, 2)) << 5) +
   15398:	4a33      	ldr	r2, [pc, #204]	; (15468 <Ssp::GetPeripheralMode()+0x158>)
   1539a:	9b14      	ldr	r3, [sp, #80]	; 0x50
   1539c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   153a0:	681b      	ldr	r3, [r3, #0]
   153a2:	930d      	str	r3, [sp, #52]	; 0x34
   153a4:	2304      	movs	r3, #4
   153a6:	930c      	str	r3, [sp, #48]	; 0x30
   153a8:	2302      	movs	r3, #2
   153aa:	930b      	str	r3, [sp, #44]	; 0x2c
   153ac:	4623      	mov	r3, r4
   153ae:	4619      	mov	r1, r3
   153b0:	482e      	ldr	r0, [pc, #184]	; (1546c <Ssp::GetPeripheralMode()+0x15c>)
   153b2:	f7fd fc2d 	bl	12c10 <__cyg_profile_func_enter>
  constexpr UnsignedT kFieldOfOnes = GenerateFieldOfOnes<T>();
   153b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   153ba:	930a      	str	r3, [sp, #40]	; 0x28
  constexpr size_t kTargetWidth     = sizeof(T) * 8;
   153bc:	2320      	movs	r3, #32
   153be:	9309      	str	r3, [sp, #36]	; 0x24
  UnsignedT mask   = kFieldOfOnes >> (kTargetWidth - width);
   153c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   153c2:	f1c3 0320 	rsb	r3, r3, #32
   153c6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   153ca:	fa22 f303 	lsr.w	r3, r2, r3
   153ce:	9308      	str	r3, [sp, #32]
  return (target >> position) & mask;
   153d0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   153d2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   153d4:	40da      	lsrs	r2, r3
   153d6:	9b08      	ldr	r3, [sp, #32]
   153d8:	ea02 0603 	and.w	r6, r2, r3
   153dc:	4623      	mov	r3, r4
   153de:	4619      	mov	r1, r3
   153e0:	4822      	ldr	r0, [pc, #136]	; (1546c <Ssp::GetPeripheralMode()+0x15c>)
   153e2:	f7fd fc29 	bl	12c38 <__cyg_profile_func_exit>
   153e6:	b2b3      	uxth	r3, r6
   153e8:	015b      	lsls	r3, r3, #5
   153ea:	b29b      	uxth	r3, r3
        (bit::Extract(ssp_registers[pssp]->CR0, kDataBit, 4)) +
   153ec:	442b      	add	r3, r5
   153ee:	b29d      	uxth	r5, r3
        ((bit::Extract(ssp_registers[pssp]->CR1, kMasterModeBit)) << 8));
   153f0:	4a1d      	ldr	r2, [pc, #116]	; (15468 <Ssp::GetPeripheralMode()+0x158>)
   153f2:	9b14      	ldr	r3, [sp, #80]	; 0x50
   153f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   153f8:	685b      	ldr	r3, [r3, #4]
   153fa:	9313      	str	r3, [sp, #76]	; 0x4c
   153fc:	2302      	movs	r3, #2
   153fe:	9312      	str	r3, [sp, #72]	; 0x48
   15400:	2301      	movs	r3, #1
   15402:	9311      	str	r3, [sp, #68]	; 0x44
   15404:	4623      	mov	r3, r4
   15406:	4619      	mov	r1, r3
   15408:	4818      	ldr	r0, [pc, #96]	; (1546c <Ssp::GetPeripheralMode()+0x15c>)
   1540a:	f7fd fc01 	bl	12c10 <__cyg_profile_func_enter>
  constexpr UnsignedT kFieldOfOnes = GenerateFieldOfOnes<T>();
   1540e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   15412:	9310      	str	r3, [sp, #64]	; 0x40
  constexpr size_t kTargetWidth     = sizeof(T) * 8;
   15414:	2320      	movs	r3, #32
   15416:	930f      	str	r3, [sp, #60]	; 0x3c
  UnsignedT mask   = kFieldOfOnes >> (kTargetWidth - width);
   15418:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1541a:	f1c3 0320 	rsb	r3, r3, #32
   1541e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   15422:	fa22 f303 	lsr.w	r3, r2, r3
   15426:	930e      	str	r3, [sp, #56]	; 0x38
  return (target >> position) & mask;
   15428:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   1542a:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1542c:	40da      	lsrs	r2, r3
   1542e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   15430:	ea02 0603 	and.w	r6, r2, r3
   15434:	4623      	mov	r3, r4
   15436:	4619      	mov	r1, r3
   15438:	480c      	ldr	r0, [pc, #48]	; (1546c <Ssp::GetPeripheralMode()+0x15c>)
   1543a:	f7fd fbfd 	bl	12c38 <__cyg_profile_func_exit>
   1543e:	b2b3      	uxth	r3, r6
   15440:	021b      	lsls	r3, r3, #8
   15442:	b29b      	uxth	r3, r3
    return_val = static_cast<uint16_t>(
   15444:	442b      	add	r3, r5
   15446:	f8ad 3056 	strh.w	r3, [sp, #86]	; 0x56
    return return_val;
   1544a:	f8bd 5056 	ldrh.w	r5, [sp, #86]	; 0x56
   1544e:	4623      	mov	r3, r4
   15450:	4619      	mov	r1, r3
   15452:	4803      	ldr	r0, [pc, #12]	; (15460 <Ssp::GetPeripheralMode()+0x150>)
   15454:	f7fd fbf0 	bl	12c38 <__cyg_profile_func_exit>
   15458:	462b      	mov	r3, r5
  }
   1545a:	4618      	mov	r0, r3
   1545c:	b016      	add	sp, #88	; 0x58
   1545e:	bd70      	pop	{r4, r5, r6, pc}
   15460:	00015311 	.word	0x00015311
   15464:	00018b84 	.word	0x00018b84
   15468:	100001e0 	.word	0x100001e0
   1546c:	00016c51 	.word	0x00016c51

00015470 <Ssp::SetClock(bool, bool, unsigned char, unsigned char)>:
  /// Sets the clock rate for the Peripheral
  /// @param polarity - maintain bus on clock 0=low or 1=high between frames
  /// @param phase - capture serial data on 0=first or 1=second clock cycle
  /// @param divider - see notes in SSP_Interface above
  /// @param prescaler - divides the PCLK, must be even value between 2-254
  void SetClock(bool polarity, bool phase, uint8_t divider,
   15470:	b570      	push	{r4, r5, r6, lr}
   15472:	b098      	sub	sp, #96	; 0x60
   15474:	4674      	mov	r4, lr
   15476:	9001      	str	r0, [sp, #4]
   15478:	4608      	mov	r0, r1
   1547a:	4611      	mov	r1, r2
   1547c:	461a      	mov	r2, r3
   1547e:	4603      	mov	r3, r0
   15480:	f88d 3003 	strb.w	r3, [sp, #3]
   15484:	460b      	mov	r3, r1
   15486:	f88d 3002 	strb.w	r3, [sp, #2]
   1548a:	4613      	mov	r3, r2
   1548c:	f88d 3001 	strb.w	r3, [sp, #1]
   15490:	4623      	mov	r3, r4
   15492:	4619      	mov	r1, r3
   15494:	486c      	ldr	r0, [pc, #432]	; (15648 <Ssp::SetClock(bool, bool, unsigned char, unsigned char)+0x1d8>)
   15496:	f7fd fbbb 	bl	12c10 <__cyg_profile_func_enter>
                uint8_t prescaler) override
  {
    uint32_t pssp = util::Value(pssp_);
   1549a:	9b01      	ldr	r3, [sp, #4]
   1549c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1549e:	4618      	mov	r0, r3
   154a0:	f7ff fbee 	bl	14c80 <int util::Value<Ssp::Peripheral, int>(Ssp::Peripheral)>
   154a4:	4603      	mov	r3, r0
   154a6:	9317      	str	r3, [sp, #92]	; 0x5c
    // TODO(#371): Find a better alternative to powering up the peripheral for
    // every method.
    Ssp::PowerUpPeripheral(Ssp::kPowerBit[pssp]);
   154a8:	9b01      	ldr	r3, [sp, #4]
   154aa:	1d18      	adds	r0, r3, #4
   154ac:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   154ae:	009b      	lsls	r3, r3, #2
   154b0:	4a66      	ldr	r2, [pc, #408]	; (1564c <Ssp::SetClock(bool, bool, unsigned char, unsigned char)+0x1dc>)
   154b2:	4413      	add	r3, r2
   154b4:	4619      	mov	r1, r3
   154b6:	f7fb fac7 	bl	10a48 <Lpc40xxSystemController::PowerUpPeripheral(SystemControllerInterface::PeripheralID const&)>
    // first clear the appropriate registers
    ssp_registers[pssp]->CR0 =
        bit::Insert(ssp_registers[pssp]->CR0, polarity, kPolarityBit, 1);
   154ba:	4a65      	ldr	r2, [pc, #404]	; (15650 <Ssp::SetClock(bool, bool, unsigned char, unsigned char)+0x1e0>)
   154bc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   154be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   154c2:	681b      	ldr	r3, [r3, #0]
    ssp_registers[pssp]->CR0 =
   154c4:	4962      	ldr	r1, [pc, #392]	; (15650 <Ssp::SetClock(bool, bool, unsigned char, unsigned char)+0x1e0>)
   154c6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   154c8:	f851 5022 	ldr.w	r5, [r1, r2, lsl #2]
   154cc:	9308      	str	r3, [sp, #32]
   154ce:	f89d 3003 	ldrb.w	r3, [sp, #3]
   154d2:	f88d 301f 	strb.w	r3, [sp, #31]
   154d6:	2306      	movs	r3, #6
   154d8:	9306      	str	r3, [sp, #24]
   154da:	2301      	movs	r3, #1
   154dc:	9305      	str	r3, [sp, #20]
   154de:	4623      	mov	r3, r4
   154e0:	4619      	mov	r1, r3
   154e2:	485c      	ldr	r0, [pc, #368]	; (15654 <Ssp::SetClock(bool, bool, unsigned char, unsigned char)+0x1e4>)
   154e4:	f7fd fb94 	bl	12c10 <__cyg_profile_func_enter>
  constexpr UnsignedT kFieldOfOnes = GenerateFieldOfOnes<T>();
   154e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   154ec:	9304      	str	r3, [sp, #16]
  constexpr size_t kTargetWidth     = sizeof(T) * 8;
   154ee:	2320      	movs	r3, #32
   154f0:	9303      	str	r3, [sp, #12]
  UnsignedT mask   = kFieldOfOnes >> (kTargetWidth - width);
   154f2:	9b05      	ldr	r3, [sp, #20]
   154f4:	f1c3 0320 	rsb	r3, r3, #32
   154f8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   154fc:	fa22 f303 	lsr.w	r3, r2, r3
   15500:	9302      	str	r3, [sp, #8]
  target &= ~(mask << position);
   15502:	9a02      	ldr	r2, [sp, #8]
   15504:	9b06      	ldr	r3, [sp, #24]
   15506:	fa02 f303 	lsl.w	r3, r2, r3
   1550a:	43db      	mvns	r3, r3
   1550c:	9a08      	ldr	r2, [sp, #32]
   1550e:	4013      	ands	r3, r2
   15510:	9308      	str	r3, [sp, #32]
  target |= (value & mask) << position;
   15512:	f89d 201f 	ldrb.w	r2, [sp, #31]
   15516:	9b02      	ldr	r3, [sp, #8]
   15518:	401a      	ands	r2, r3
   1551a:	9b06      	ldr	r3, [sp, #24]
   1551c:	fa02 f303 	lsl.w	r3, r2, r3
   15520:	9a08      	ldr	r2, [sp, #32]
   15522:	4313      	orrs	r3, r2
   15524:	9308      	str	r3, [sp, #32]
  return target;
   15526:	9e08      	ldr	r6, [sp, #32]
   15528:	4623      	mov	r3, r4
   1552a:	4619      	mov	r1, r3
   1552c:	4849      	ldr	r0, [pc, #292]	; (15654 <Ssp::SetClock(bool, bool, unsigned char, unsigned char)+0x1e4>)
   1552e:	f7fd fb83 	bl	12c38 <__cyg_profile_func_exit>
   15532:	602e      	str	r6, [r5, #0]
    ssp_registers[pssp]->CR0 =
        bit::Insert(ssp_registers[pssp]->CR0, phase, kPhaseBit, 1);
   15534:	4a46      	ldr	r2, [pc, #280]	; (15650 <Ssp::SetClock(bool, bool, unsigned char, unsigned char)+0x1e0>)
   15536:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   15538:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1553c:	681b      	ldr	r3, [r3, #0]
    ssp_registers[pssp]->CR0 =
   1553e:	4944      	ldr	r1, [pc, #272]	; (15650 <Ssp::SetClock(bool, bool, unsigned char, unsigned char)+0x1e0>)
   15540:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   15542:	f851 5022 	ldr.w	r5, [r1, r2, lsl #2]
   15546:	930f      	str	r3, [sp, #60]	; 0x3c
   15548:	f89d 3002 	ldrb.w	r3, [sp, #2]
   1554c:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
   15550:	2307      	movs	r3, #7
   15552:	930d      	str	r3, [sp, #52]	; 0x34
   15554:	2301      	movs	r3, #1
   15556:	930c      	str	r3, [sp, #48]	; 0x30
   15558:	4623      	mov	r3, r4
   1555a:	4619      	mov	r1, r3
   1555c:	483d      	ldr	r0, [pc, #244]	; (15654 <Ssp::SetClock(bool, bool, unsigned char, unsigned char)+0x1e4>)
   1555e:	f7fd fb57 	bl	12c10 <__cyg_profile_func_enter>
  constexpr UnsignedT kFieldOfOnes = GenerateFieldOfOnes<T>();
   15562:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   15566:	930b      	str	r3, [sp, #44]	; 0x2c
  constexpr size_t kTargetWidth     = sizeof(T) * 8;
   15568:	2320      	movs	r3, #32
   1556a:	930a      	str	r3, [sp, #40]	; 0x28
  UnsignedT mask   = kFieldOfOnes >> (kTargetWidth - width);
   1556c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1556e:	f1c3 0320 	rsb	r3, r3, #32
   15572:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   15576:	fa22 f303 	lsr.w	r3, r2, r3
   1557a:	9309      	str	r3, [sp, #36]	; 0x24
  target &= ~(mask << position);
   1557c:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1557e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   15580:	fa02 f303 	lsl.w	r3, r2, r3
   15584:	43db      	mvns	r3, r3
   15586:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   15588:	4013      	ands	r3, r2
   1558a:	930f      	str	r3, [sp, #60]	; 0x3c
  target |= (value & mask) << position;
   1558c:	f89d 203b 	ldrb.w	r2, [sp, #59]	; 0x3b
   15590:	9b09      	ldr	r3, [sp, #36]	; 0x24
   15592:	401a      	ands	r2, r3
   15594:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   15596:	fa02 f303 	lsl.w	r3, r2, r3
   1559a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   1559c:	4313      	orrs	r3, r2
   1559e:	930f      	str	r3, [sp, #60]	; 0x3c
  return target;
   155a0:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
   155a2:	4623      	mov	r3, r4
   155a4:	4619      	mov	r1, r3
   155a6:	482b      	ldr	r0, [pc, #172]	; (15654 <Ssp::SetClock(bool, bool, unsigned char, unsigned char)+0x1e4>)
   155a8:	f7fd fb46 	bl	12c38 <__cyg_profile_func_exit>
   155ac:	602e      	str	r6, [r5, #0]
    ssp_registers[pssp]->CR0 =
        bit::Insert(ssp_registers[pssp]->CR0, divider, kDividerBit, 8);
   155ae:	4a28      	ldr	r2, [pc, #160]	; (15650 <Ssp::SetClock(bool, bool, unsigned char, unsigned char)+0x1e0>)
   155b0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   155b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   155b6:	681b      	ldr	r3, [r3, #0]
    ssp_registers[pssp]->CR0 =
   155b8:	4925      	ldr	r1, [pc, #148]	; (15650 <Ssp::SetClock(bool, bool, unsigned char, unsigned char)+0x1e0>)
   155ba:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   155bc:	f851 5022 	ldr.w	r5, [r1, r2, lsl #2]
   155c0:	9316      	str	r3, [sp, #88]	; 0x58
   155c2:	f89d 3001 	ldrb.w	r3, [sp, #1]
   155c6:	f88d 3057 	strb.w	r3, [sp, #87]	; 0x57
   155ca:	2308      	movs	r3, #8
   155cc:	9314      	str	r3, [sp, #80]	; 0x50
   155ce:	2308      	movs	r3, #8
   155d0:	9313      	str	r3, [sp, #76]	; 0x4c
   155d2:	4623      	mov	r3, r4
   155d4:	4619      	mov	r1, r3
   155d6:	4820      	ldr	r0, [pc, #128]	; (15658 <Ssp::SetClock(bool, bool, unsigned char, unsigned char)+0x1e8>)
   155d8:	f7fd fb1a 	bl	12c10 <__cyg_profile_func_enter>
  constexpr UnsignedT kFieldOfOnes = GenerateFieldOfOnes<T>();
   155dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   155e0:	9312      	str	r3, [sp, #72]	; 0x48
  constexpr size_t kTargetWidth     = sizeof(T) * 8;
   155e2:	2320      	movs	r3, #32
   155e4:	9311      	str	r3, [sp, #68]	; 0x44
  UnsignedT mask   = kFieldOfOnes >> (kTargetWidth - width);
   155e6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   155e8:	f1c3 0320 	rsb	r3, r3, #32
   155ec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   155f0:	fa22 f303 	lsr.w	r3, r2, r3
   155f4:	9310      	str	r3, [sp, #64]	; 0x40
  target &= ~(mask << position);
   155f6:	9a10      	ldr	r2, [sp, #64]	; 0x40
   155f8:	9b14      	ldr	r3, [sp, #80]	; 0x50
   155fa:	fa02 f303 	lsl.w	r3, r2, r3
   155fe:	43db      	mvns	r3, r3
   15600:	9a16      	ldr	r2, [sp, #88]	; 0x58
   15602:	4013      	ands	r3, r2
   15604:	9316      	str	r3, [sp, #88]	; 0x58
  target |= (value & mask) << position;
   15606:	f89d 2057 	ldrb.w	r2, [sp, #87]	; 0x57
   1560a:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1560c:	401a      	ands	r2, r3
   1560e:	9b14      	ldr	r3, [sp, #80]	; 0x50
   15610:	fa02 f303 	lsl.w	r3, r2, r3
   15614:	9a16      	ldr	r2, [sp, #88]	; 0x58
   15616:	4313      	orrs	r3, r2
   15618:	9316      	str	r3, [sp, #88]	; 0x58
  return target;
   1561a:	9e16      	ldr	r6, [sp, #88]	; 0x58
   1561c:	4623      	mov	r3, r4
   1561e:	4619      	mov	r1, r3
   15620:	480d      	ldr	r0, [pc, #52]	; (15658 <Ssp::SetClock(bool, bool, unsigned char, unsigned char)+0x1e8>)
   15622:	f7fd fb09 	bl	12c38 <__cyg_profile_func_exit>
   15626:	602e      	str	r6, [r5, #0]
    ssp_registers[pssp]->CPSR = prescaler;
   15628:	4a09      	ldr	r2, [pc, #36]	; (15650 <Ssp::SetClock(bool, bool, unsigned char, unsigned char)+0x1e0>)
   1562a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   1562c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15630:	f89d 2070 	ldrb.w	r2, [sp, #112]	; 0x70
   15634:	611a      	str	r2, [r3, #16]
   15636:	4623      	mov	r3, r4
   15638:	4619      	mov	r1, r3
   1563a:	4803      	ldr	r0, [pc, #12]	; (15648 <Ssp::SetClock(bool, bool, unsigned char, unsigned char)+0x1d8>)
   1563c:	f7fd fafc 	bl	12c38 <__cyg_profile_func_exit>
  }
   15640:	bf00      	nop
   15642:	b018      	add	sp, #96	; 0x60
   15644:	bd70      	pop	{r4, r5, r6, pc}
   15646:	bf00      	nop
   15648:	00015471 	.word	0x00015471
   1564c:	00018b84 	.word	0x00018b84
   15650:	100001e0 	.word	0x100001e0
   15654:	00016ca5 	.word	0x00016ca5
   15658:	00016bdd 	.word	0x00016bdd

0001565c <Ssp::GetClock()>:
  ///   0000_0000 0000_0x0x xxxx_xxxx xxxx_xxxx
  ///       polarity    = 1-bit @ bit 18
  ///       phase       = 1-bit @ bit 16
  ///       divider     = 8-bits @ bit 8
  ///       prescaler   = 8-bits @ bit 0
  uint32_t GetClock() override
   1565c:	b570      	push	{r4, r5, r6, lr}
   1565e:	b094      	sub	sp, #80	; 0x50
   15660:	4674      	mov	r4, lr
   15662:	9001      	str	r0, [sp, #4]
   15664:	4623      	mov	r3, r4
   15666:	4619      	mov	r1, r3
   15668:	4858      	ldr	r0, [pc, #352]	; (157cc <Ssp::GetClock()+0x170>)
   1566a:	f7fd fad1 	bl	12c10 <__cyg_profile_func_enter>
  {
    uint32_t return_val = 0;
   1566e:	2300      	movs	r3, #0
   15670:	9313      	str	r3, [sp, #76]	; 0x4c
    uint32_t pssp       = util::Value(pssp_);
   15672:	9b01      	ldr	r3, [sp, #4]
   15674:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   15676:	4618      	mov	r0, r3
   15678:	f7ff fb02 	bl	14c80 <int util::Value<Ssp::Peripheral, int>(Ssp::Peripheral)>
   1567c:	4603      	mov	r3, r0
   1567e:	9312      	str	r3, [sp, #72]	; 0x48
    // TODO(#371): Find a better alternative to powering up the peripheral for
    // every method.
    Ssp::PowerUpPeripheral(Ssp::kPowerBit[pssp]);
   15680:	9b01      	ldr	r3, [sp, #4]
   15682:	1d18      	adds	r0, r3, #4
   15684:	9b12      	ldr	r3, [sp, #72]	; 0x48
   15686:	009b      	lsls	r3, r3, #2
   15688:	4a51      	ldr	r2, [pc, #324]	; (157d0 <Ssp::GetClock()+0x174>)
   1568a:	4413      	add	r3, r2
   1568c:	4619      	mov	r1, r3
   1568e:	f7fb f9db 	bl	10a48 <Lpc40xxSystemController::PowerUpPeripheral(SystemControllerInterface::PeripheralID const&)>

    return_val =
        (bit::Extract(ssp_registers[pssp]->CPSR, kPrescalerBit, 8)) +
   15692:	4a50      	ldr	r2, [pc, #320]	; (157d4 <Ssp::GetClock()+0x178>)
   15694:	9b12      	ldr	r3, [sp, #72]	; 0x48
   15696:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1569a:	691b      	ldr	r3, [r3, #16]
   1569c:	9307      	str	r3, [sp, #28]
   1569e:	2300      	movs	r3, #0
   156a0:	9306      	str	r3, [sp, #24]
   156a2:	2308      	movs	r3, #8
   156a4:	9305      	str	r3, [sp, #20]
   156a6:	4623      	mov	r3, r4
   156a8:	4619      	mov	r1, r3
   156aa:	484b      	ldr	r0, [pc, #300]	; (157d8 <Ssp::GetClock()+0x17c>)
   156ac:	f7fd fab0 	bl	12c10 <__cyg_profile_func_enter>
  constexpr UnsignedT kFieldOfOnes = GenerateFieldOfOnes<T>();
   156b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   156b4:	9304      	str	r3, [sp, #16]
  constexpr size_t kTargetWidth     = sizeof(T) * 8;
   156b6:	2320      	movs	r3, #32
   156b8:	9303      	str	r3, [sp, #12]
  UnsignedT mask   = kFieldOfOnes >> (kTargetWidth - width);
   156ba:	9b05      	ldr	r3, [sp, #20]
   156bc:	f1c3 0320 	rsb	r3, r3, #32
   156c0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   156c4:	fa22 f303 	lsr.w	r3, r2, r3
   156c8:	9302      	str	r3, [sp, #8]
  return (target >> position) & mask;
   156ca:	9a07      	ldr	r2, [sp, #28]
   156cc:	9b06      	ldr	r3, [sp, #24]
   156ce:	40da      	lsrs	r2, r3
   156d0:	9b02      	ldr	r3, [sp, #8]
   156d2:	ea02 0503 	and.w	r5, r2, r3
   156d6:	4623      	mov	r3, r4
   156d8:	4619      	mov	r1, r3
   156da:	483f      	ldr	r0, [pc, #252]	; (157d8 <Ssp::GetClock()+0x17c>)
   156dc:	f7fd faac 	bl	12c38 <__cyg_profile_func_exit>
        ((bit::Extract(ssp_registers[pssp]->CR0, kDividerBit, 8)) << 8) +
   156e0:	4a3c      	ldr	r2, [pc, #240]	; (157d4 <Ssp::GetClock()+0x178>)
   156e2:	9b12      	ldr	r3, [sp, #72]	; 0x48
   156e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   156e8:	681b      	ldr	r3, [r3, #0]
   156ea:	930d      	str	r3, [sp, #52]	; 0x34
   156ec:	2308      	movs	r3, #8
   156ee:	930c      	str	r3, [sp, #48]	; 0x30
   156f0:	2308      	movs	r3, #8
   156f2:	930b      	str	r3, [sp, #44]	; 0x2c
   156f4:	4623      	mov	r3, r4
   156f6:	4619      	mov	r1, r3
   156f8:	4837      	ldr	r0, [pc, #220]	; (157d8 <Ssp::GetClock()+0x17c>)
   156fa:	f7fd fa89 	bl	12c10 <__cyg_profile_func_enter>
  constexpr UnsignedT kFieldOfOnes = GenerateFieldOfOnes<T>();
   156fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   15702:	930a      	str	r3, [sp, #40]	; 0x28
  constexpr size_t kTargetWidth     = sizeof(T) * 8;
   15704:	2320      	movs	r3, #32
   15706:	9309      	str	r3, [sp, #36]	; 0x24
  UnsignedT mask   = kFieldOfOnes >> (kTargetWidth - width);
   15708:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1570a:	f1c3 0320 	rsb	r3, r3, #32
   1570e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   15712:	fa22 f303 	lsr.w	r3, r2, r3
   15716:	9308      	str	r3, [sp, #32]
  return (target >> position) & mask;
   15718:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   1571a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1571c:	40da      	lsrs	r2, r3
   1571e:	9b08      	ldr	r3, [sp, #32]
   15720:	ea02 0603 	and.w	r6, r2, r3
   15724:	4623      	mov	r3, r4
   15726:	4619      	mov	r1, r3
   15728:	482b      	ldr	r0, [pc, #172]	; (157d8 <Ssp::GetClock()+0x17c>)
   1572a:	f7fd fa85 	bl	12c38 <__cyg_profile_func_exit>
   1572e:	0233      	lsls	r3, r6, #8
        (bit::Extract(ssp_registers[pssp]->CPSR, kPrescalerBit, 8)) +
   15730:	441d      	add	r5, r3
        ((bit::Read(ssp_registers[pssp]->CR0, kPhaseBit)) << 16) +
   15732:	4a28      	ldr	r2, [pc, #160]	; (157d4 <Ssp::GetClock()+0x178>)
   15734:	9b12      	ldr	r3, [sp, #72]	; 0x48
   15736:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1573a:	681b      	ldr	r3, [r3, #0]
   1573c:	930f      	str	r3, [sp, #60]	; 0x3c
   1573e:	2307      	movs	r3, #7
   15740:	930e      	str	r3, [sp, #56]	; 0x38
   15742:	4623      	mov	r3, r4
   15744:	4619      	mov	r1, r3
   15746:	4825      	ldr	r0, [pc, #148]	; (157dc <Ssp::GetClock()+0x180>)
   15748:	f7fd fa62 	bl	12c10 <__cyg_profile_func_enter>
  return static_cast<bool>(target & (1 << position));
   1574c:	2201      	movs	r2, #1
   1574e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   15750:	fa02 f303 	lsl.w	r3, r2, r3
   15754:	461a      	mov	r2, r3
   15756:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   15758:	4013      	ands	r3, r2
   1575a:	2b00      	cmp	r3, #0
   1575c:	bf14      	ite	ne
   1575e:	2301      	movne	r3, #1
   15760:	2300      	moveq	r3, #0
   15762:	b2de      	uxtb	r6, r3
   15764:	4623      	mov	r3, r4
   15766:	4619      	mov	r1, r3
   15768:	481c      	ldr	r0, [pc, #112]	; (157dc <Ssp::GetClock()+0x180>)
   1576a:	f7fd fa65 	bl	12c38 <__cyg_profile_func_exit>
   1576e:	4633      	mov	r3, r6
   15770:	041b      	lsls	r3, r3, #16
        ((bit::Extract(ssp_registers[pssp]->CR0, kDividerBit, 8)) << 8) +
   15772:	441d      	add	r5, r3
        ((bit::Read(ssp_registers[pssp]->CR0, kPolarityBit)) << 18);
   15774:	4a17      	ldr	r2, [pc, #92]	; (157d4 <Ssp::GetClock()+0x178>)
   15776:	9b12      	ldr	r3, [sp, #72]	; 0x48
   15778:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1577c:	681b      	ldr	r3, [r3, #0]
   1577e:	9311      	str	r3, [sp, #68]	; 0x44
   15780:	2306      	movs	r3, #6
   15782:	9310      	str	r3, [sp, #64]	; 0x40
   15784:	4623      	mov	r3, r4
   15786:	4619      	mov	r1, r3
   15788:	4814      	ldr	r0, [pc, #80]	; (157dc <Ssp::GetClock()+0x180>)
   1578a:	f7fd fa41 	bl	12c10 <__cyg_profile_func_enter>
   1578e:	2201      	movs	r2, #1
   15790:	9b10      	ldr	r3, [sp, #64]	; 0x40
   15792:	fa02 f303 	lsl.w	r3, r2, r3
   15796:	461a      	mov	r2, r3
   15798:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1579a:	4013      	ands	r3, r2
   1579c:	2b00      	cmp	r3, #0
   1579e:	bf14      	ite	ne
   157a0:	2301      	movne	r3, #1
   157a2:	2300      	moveq	r3, #0
   157a4:	b2de      	uxtb	r6, r3
   157a6:	4623      	mov	r3, r4
   157a8:	4619      	mov	r1, r3
   157aa:	480c      	ldr	r0, [pc, #48]	; (157dc <Ssp::GetClock()+0x180>)
   157ac:	f7fd fa44 	bl	12c38 <__cyg_profile_func_exit>
   157b0:	4633      	mov	r3, r6
   157b2:	049b      	lsls	r3, r3, #18
    return_val =
   157b4:	442b      	add	r3, r5
   157b6:	9313      	str	r3, [sp, #76]	; 0x4c

    return return_val;
   157b8:	9d13      	ldr	r5, [sp, #76]	; 0x4c
   157ba:	4623      	mov	r3, r4
   157bc:	4619      	mov	r1, r3
   157be:	4803      	ldr	r0, [pc, #12]	; (157cc <Ssp::GetClock()+0x170>)
   157c0:	f7fd fa3a 	bl	12c38 <__cyg_profile_func_exit>
   157c4:	462b      	mov	r3, r5
  }
   157c6:	4618      	mov	r0, r3
   157c8:	b014      	add	sp, #80	; 0x50
   157ca:	bd70      	pop	{r4, r5, r6, pc}
   157cc:	0001565d 	.word	0x0001565d
   157d0:	00018b84 	.word	0x00018b84
   157d4:	100001e0 	.word	0x100001e0
   157d8:	00016c51 	.word	0x00016c51
   157dc:	00016b99 	.word	0x00016b99

000157e0 <SdInterface::SdInterface()>:
// NOLINTNEXTLINE(readability-identifier-naming)
// Relevant Datasheet:
// https://www.sdcard.org/downloads/pls/pdf/index.php?p=Part1_Physical_Layer_Simplified_Specification_Ver6.00.jpg&f=Part1_Physical_Layer_Simplified_Specification_Ver6.00.pdf&e=EN_SS1
// TODO(#348):  Write a class to represent a single Sd Card Block to make use
//              of block-related functions easier.
class SdInterface
   157e0:	b530      	push	{r4, r5, lr}
   157e2:	b083      	sub	sp, #12
   157e4:	4675      	mov	r5, lr
   157e6:	9001      	str	r0, [sp, #4]
   157e8:	462b      	mov	r3, r5
   157ea:	4619      	mov	r1, r3
   157ec:	4807      	ldr	r0, [pc, #28]	; (1580c <SdInterface::SdInterface()+0x2c>)
   157ee:	f7fd fa0f 	bl	12c10 <__cyg_profile_func_enter>
   157f2:	4a07      	ldr	r2, [pc, #28]	; (15810 <SdInterface::SdInterface()+0x30>)
   157f4:	9b01      	ldr	r3, [sp, #4]
   157f6:	601a      	str	r2, [r3, #0]
   157f8:	9c01      	ldr	r4, [sp, #4]
   157fa:	462b      	mov	r3, r5
   157fc:	4619      	mov	r1, r3
   157fe:	4803      	ldr	r0, [pc, #12]	; (1580c <SdInterface::SdInterface()+0x2c>)
   15800:	f7fd fa1a 	bl	12c38 <__cyg_profile_func_exit>
   15804:	4623      	mov	r3, r4
   15806:	4618      	mov	r0, r3
   15808:	b003      	add	sp, #12
   1580a:	bd30      	pop	{r4, r5, pc}
   1580c:	000157e1 	.word	0x000157e1
   15810:	00018f5c 	.word	0x00018f5c

00015814 <Sd::Sd(Sd::DebugSdCard_t, unsigned char, unsigned char, unsigned char, unsigned char)>:
  /// port that is broken out through the board's GPIO, allowing you to probe
  /// the chip select manually. To use this version instead of the main version,
  /// instantiate an Sd card instance like so:
  ///
  ///   Sd sdcard(Sd::DebugSdCard_t{});
  constexpr Sd(DebugSdCard_t, uint8_t port = 1, uint8_t pin = 8,
   15814:	b530      	push	{r4, r5, lr}
   15816:	b083      	sub	sp, #12
   15818:	4675      	mov	r5, lr
   1581a:	9001      	str	r0, [sp, #4]
   1581c:	f88d 1000 	strb.w	r1, [sp]
   15820:	4611      	mov	r1, r2
   15822:	461a      	mov	r2, r3
   15824:	460b      	mov	r3, r1
   15826:	f88d 3003 	strb.w	r3, [sp, #3]
   1582a:	4613      	mov	r3, r2
   1582c:	f88d 3002 	strb.w	r3, [sp, #2]
   15830:	462b      	mov	r3, r5
   15832:	4619      	mov	r1, r3
   15834:	481d      	ldr	r0, [pc, #116]	; (158ac <Sd::Sd(Sd::DebugSdCard_t, unsigned char, unsigned char, unsigned char, unsigned char)+0x98>)
   15836:	f7fd f9eb 	bl	12c10 <__cyg_profile_func_enter>
      : ssp_interface_(&ssp_),
        ssp_(Ssp::Peripheral::kSsp2),
        chip_select_(&chip_select_pin_),
        chip_select_external_(&chip_select_external_pin_),
        chip_select_pin_(port, pin),
        chip_select_external_pin_(extport, extpin)
   1583a:	9b01      	ldr	r3, [sp, #4]
   1583c:	4618      	mov	r0, r3
   1583e:	f7ff ffcf 	bl	157e0 <SdInterface::SdInterface()>
   15842:	4a1b      	ldr	r2, [pc, #108]	; (158b0 <Sd::Sd(Sd::DebugSdCard_t, unsigned char, unsigned char, unsigned char, unsigned char)+0x9c>)
   15844:	9b01      	ldr	r3, [sp, #4]
   15846:	601a      	str	r2, [r3, #0]
   15848:	9b01      	ldr	r3, [sp, #4]
   1584a:	f103 0208 	add.w	r2, r3, #8
   1584e:	9b01      	ldr	r3, [sp, #4]
   15850:	605a      	str	r2, [r3, #4]
   15852:	9b01      	ldr	r3, [sp, #4]
   15854:	3308      	adds	r3, #8
   15856:	2102      	movs	r1, #2
   15858:	4618      	mov	r0, r3
   1585a:	f7ff fa87 	bl	14d6c <Ssp::Ssp(Ssp::Peripheral)>
   1585e:	9b01      	ldr	r3, [sp, #4]
   15860:	f103 0240 	add.w	r2, r3, #64	; 0x40
   15864:	9b01      	ldr	r3, [sp, #4]
   15866:	639a      	str	r2, [r3, #56]	; 0x38
   15868:	9b01      	ldr	r3, [sp, #4]
   1586a:	f103 0254 	add.w	r2, r3, #84	; 0x54
   1586e:	9b01      	ldr	r3, [sp, #4]
   15870:	63da      	str	r2, [r3, #60]	; 0x3c
   15872:	9b01      	ldr	r3, [sp, #4]
   15874:	3340      	adds	r3, #64	; 0x40
   15876:	f89d 2002 	ldrb.w	r2, [sp, #2]
   1587a:	f89d 1003 	ldrb.w	r1, [sp, #3]
   1587e:	4618      	mov	r0, r3
   15880:	f7fe fd4c 	bl	1431c <Gpio::Gpio(unsigned char, unsigned char)>
   15884:	9b01      	ldr	r3, [sp, #4]
   15886:	3354      	adds	r3, #84	; 0x54
   15888:	f89d 201c 	ldrb.w	r2, [sp, #28]
   1588c:	f89d 1018 	ldrb.w	r1, [sp, #24]
   15890:	4618      	mov	r0, r3
   15892:	f7fe fd43 	bl	1431c <Gpio::Gpio(unsigned char, unsigned char)>
  {
  }
   15896:	9c01      	ldr	r4, [sp, #4]
   15898:	462b      	mov	r3, r5
   1589a:	4619      	mov	r1, r3
   1589c:	4803      	ldr	r0, [pc, #12]	; (158ac <Sd::Sd(Sd::DebugSdCard_t, unsigned char, unsigned char, unsigned char, unsigned char)+0x98>)
   1589e:	f7fd f9cb 	bl	12c38 <__cyg_profile_func_exit>
   158a2:	4623      	mov	r3, r4
   158a4:	4618      	mov	r0, r3
   158a6:	b003      	add	sp, #12
   158a8:	bd30      	pop	{r4, r5, pc}
   158aa:	bf00      	nop
   158ac:	00015815 	.word	0x00015815
   158b0:	00018f30 	.word	0x00018f30

000158b4 <Sd::Initialize()>:

  void Initialize() override
   158b4:	b530      	push	{r4, r5, lr}
   158b6:	b085      	sub	sp, #20
   158b8:	4675      	mov	r5, lr
   158ba:	9003      	str	r0, [sp, #12]
   158bc:	462b      	mov	r3, r5
   158be:	4619      	mov	r1, r3
   158c0:	4827      	ldr	r0, [pc, #156]	; (15960 <Sd::Initialize()+0xac>)
   158c2:	f7fd f9a5 	bl	12c10 <__cyg_profile_func_enter>
  {
    LOG_DEBUG("Begin initialization:");
    LOG_DEBUG("Setting CS as output...");
    chip_select_->SetAsOutput();
   158c6:	9b03      	ldr	r3, [sp, #12]
   158c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   158ca:	9b03      	ldr	r3, [sp, #12]
   158cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   158ce:	681b      	ldr	r3, [r3, #0]
   158d0:	3304      	adds	r3, #4
   158d2:	681b      	ldr	r3, [r3, #0]
   158d4:	4610      	mov	r0, r2
   158d6:	4798      	blx	r3
    chip_select_->SetHigh();
   158d8:	9b03      	ldr	r3, [sp, #12]
   158da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   158dc:	9b03      	ldr	r3, [sp, #12]
   158de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   158e0:	681b      	ldr	r3, [r3, #0]
   158e2:	330c      	adds	r3, #12
   158e4:	681b      	ldr	r3, [r3, #0]
   158e6:	4610      	mov	r0, r2
   158e8:	4798      	blx	r3
    chip_select_external_->SetAsOutput();
   158ea:	9b03      	ldr	r3, [sp, #12]
   158ec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
   158ee:	9b03      	ldr	r3, [sp, #12]
   158f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   158f2:	681b      	ldr	r3, [r3, #0]
   158f4:	3304      	adds	r3, #4
   158f6:	681b      	ldr	r3, [r3, #0]
   158f8:	4610      	mov	r0, r2
   158fa:	4798      	blx	r3
    chip_select_external_->SetHigh();
   158fc:	9b03      	ldr	r3, [sp, #12]
   158fe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
   15900:	9b03      	ldr	r3, [sp, #12]
   15902:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   15904:	681b      	ldr	r3, [r3, #0]
   15906:	330c      	adds	r3, #12
   15908:	681b      	ldr	r3, [r3, #0]
   1590a:	4610      	mov	r0, r2
   1590c:	4798      	blx	r3

    LOG_DEBUG("Setting SSP Clock Speed...");
    ssp_interface_->SetClock(false, false, 14, 2);  // 400kHz
   1590e:	9b03      	ldr	r3, [sp, #12]
   15910:	6858      	ldr	r0, [r3, #4]
   15912:	9b03      	ldr	r3, [sp, #12]
   15914:	685b      	ldr	r3, [r3, #4]
   15916:	681b      	ldr	r3, [r3, #0]
   15918:	3318      	adds	r3, #24
   1591a:	681c      	ldr	r4, [r3, #0]
   1591c:	2302      	movs	r3, #2
   1591e:	9300      	str	r3, [sp, #0]
   15920:	230e      	movs	r3, #14
   15922:	2200      	movs	r2, #0
   15924:	2100      	movs	r1, #0
   15926:	47a0      	blx	r4

    LOG_DEBUG("Setting Peripheral Mode...");
    ssp_interface_->SetPeripheralMode(Ssp::MasterSlaveMode::kMaster,
   15928:	9b03      	ldr	r3, [sp, #12]
   1592a:	6858      	ldr	r0, [r3, #4]
   1592c:	9b03      	ldr	r3, [sp, #12]
   1592e:	685b      	ldr	r3, [r3, #4]
                                      Ssp::FrameMode::kSpi,
                                      Ssp::DataSize::kEight);
   15930:	681b      	ldr	r3, [r3, #0]
   15932:	3310      	adds	r3, #16
   15934:	681c      	ldr	r4, [r3, #0]
    ssp_interface_->SetPeripheralMode(Ssp::MasterSlaveMode::kMaster,
   15936:	2307      	movs	r3, #7
   15938:	2200      	movs	r2, #0
   1593a:	2100      	movs	r1, #0
   1593c:	47a0      	blx	r4

    LOG_DEBUG("Starting SSP Peripheral...");
    ssp_interface_->Initialize();
   1593e:	9b03      	ldr	r3, [sp, #12]
   15940:	685a      	ldr	r2, [r3, #4]
   15942:	9b03      	ldr	r3, [sp, #12]
   15944:	685b      	ldr	r3, [r3, #4]
   15946:	681b      	ldr	r3, [r3, #0]
   15948:	681b      	ldr	r3, [r3, #0]
   1594a:	4610      	mov	r0, r2
   1594c:	4798      	blx	r3
   1594e:	462b      	mov	r3, r5
   15950:	4619      	mov	r1, r3
   15952:	4803      	ldr	r0, [pc, #12]	; (15960 <Sd::Initialize()+0xac>)
   15954:	f7fd f970 	bl	12c38 <__cyg_profile_func_exit>
  }
   15958:	bf00      	nop
   1595a:	b005      	add	sp, #20
   1595c:	bd30      	pop	{r4, r5, pc}
   1595e:	bf00      	nop
   15960:	000158b5 	.word	0x000158b5

00015964 <Sd::Mount(SdInterface::CardInfo_t*)>:

  // Initialize SD Card
  // TODO(#349): Split method into smaller piece with single jobs
  bool Mount(CardInfo_t * sd) override
   15964:	b530      	push	{r4, r5, lr}
   15966:	b08b      	sub	sp, #44	; 0x2c
   15968:	4675      	mov	r5, lr
   1596a:	9003      	str	r0, [sp, #12]
   1596c:	9102      	str	r1, [sp, #8]
   1596e:	462b      	mov	r3, r5
   15970:	4619      	mov	r1, r3
   15972:	48a7      	ldr	r0, [pc, #668]	; (15c10 <Sd::Mount(SdInterface::CardInfo_t*)+0x2ac>)
   15974:	f7fd f94c 	bl	12c10 <__cyg_profile_func_enter>
  {
    uint8_t tries     = 0;
   15978:	2300      	movs	r3, #0
   1597a:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    bool card_is_idle = false;
   1597e:	2300      	movs	r3, #0
   15980:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26

    // Reset the card and force it to go to idle state at <400kHz with a
    // CMD0 + (active-low) CS
    LOG_DEBUG("Sending SD Card to Idle State...");
    sd->response.length = SendCmd(Command::kReset, 0x00000000,
                                  sd->response.data.byte, 100, KeepAlive::kYes);
   15984:	9b03      	ldr	r3, [sp, #12]
   15986:	681b      	ldr	r3, [r3, #0]
   15988:	681c      	ldr	r4, [r3, #0]
    sd->response.length = SendCmd(Command::kReset, 0x00000000,
   1598a:	9b02      	ldr	r3, [sp, #8]
   1598c:	f103 0208 	add.w	r2, r3, #8
   15990:	2301      	movs	r3, #1
   15992:	9301      	str	r3, [sp, #4]
   15994:	2364      	movs	r3, #100	; 0x64
   15996:	9300      	str	r3, [sp, #0]
   15998:	4613      	mov	r3, r2
   1599a:	2200      	movs	r2, #0
   1599c:	2140      	movs	r1, #64	; 0x40
   1599e:	9803      	ldr	r0, [sp, #12]
   159a0:	47a0      	blx	r4
   159a2:	4602      	mov	r2, r0
   159a4:	9b02      	ldr	r3, [sp, #8]
   159a6:	611a      	str	r2, [r3, #16]

    // Reset the card again to trigger SPI mode
    LOG_DEBUG("Initializing SPI mode...");
    do
    {
      tries++;
   159a8:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   159ac:	3301      	adds	r3, #1
   159ae:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
      sd->response.length = SendCmd(
          Command::kReset, 0x00, sd->response.data.byte, 100, KeepAlive::kYes);
   159b2:	9b03      	ldr	r3, [sp, #12]
   159b4:	681b      	ldr	r3, [r3, #0]
   159b6:	681c      	ldr	r4, [r3, #0]
      sd->response.length = SendCmd(
   159b8:	9b02      	ldr	r3, [sp, #8]
   159ba:	f103 0208 	add.w	r2, r3, #8
   159be:	2301      	movs	r3, #1
   159c0:	9301      	str	r3, [sp, #4]
   159c2:	2364      	movs	r3, #100	; 0x64
   159c4:	9300      	str	r3, [sp, #0]
   159c6:	4613      	mov	r3, r2
   159c8:	2200      	movs	r2, #0
   159ca:	2140      	movs	r1, #64	; 0x40
   159cc:	9803      	ldr	r0, [sp, #12]
   159ce:	47a0      	blx	r4
   159d0:	4602      	mov	r2, r0
   159d2:	9b02      	ldr	r3, [sp, #8]
   159d4:	611a      	str	r2, [r3, #16]

      // Check if R1 response frame's bit 1 is set (to ensure that
      // card is in idle state)
      if (sd->response.data.byte[0] != 0xFF &&
   159d6:	9b02      	ldr	r3, [sp, #8]
   159d8:	7a1b      	ldrb	r3, [r3, #8]
   159da:	2bff      	cmp	r3, #255	; 0xff
   159dc:	d008      	beq.n	159f0 <Sd::Mount(SdInterface::CardInfo_t*)+0x8c>
          (sd->response.data.byte[0] & 0x01) == 0x01)
   159de:	9b02      	ldr	r3, [sp, #8]
   159e0:	7a1b      	ldrb	r3, [r3, #8]
   159e2:	f003 0301 	and.w	r3, r3, #1
      if (sd->response.data.byte[0] != 0xFF &&
   159e6:	2b00      	cmp	r3, #0
   159e8:	d002      	beq.n	159f0 <Sd::Mount(SdInterface::CardInfo_t*)+0x8c>
      {
        // If it is, we can move on; otherwise, keep trying for a set
        // amount of tries
        card_is_idle = true;
   159ea:	2301      	movs	r3, #1
   159ec:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
      }
      Delay(10);
   159f0:	f04f 000a 	mov.w	r0, #10
   159f4:	f04f 0100 	mov.w	r1, #0
   159f8:	f7fe fc5e 	bl	142b8 <Delay(unsigned long long)>
    } while (tries < kBusTimeout && !card_is_idle);
   159fc:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   15a00:	2bf9      	cmp	r3, #249	; 0xf9
   15a02:	d804      	bhi.n	15a0e <Sd::Mount(SdInterface::CardInfo_t*)+0xaa>
   15a04:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
   15a08:	2b00      	cmp	r3, #0
   15a0a:	d100      	bne.n	15a0e <Sd::Mount(SdInterface::CardInfo_t*)+0xaa>
    do
   15a0c:	e7cc      	b.n	159a8 <Sd::Mount(SdInterface::CardInfo_t*)+0x44>
    LOG_DEBUG("%d tries", tries);
    if (tries >= kBusTimeout)
   15a0e:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   15a12:	2bf9      	cmp	r3, #249	; 0xf9
   15a14:	d91b      	bls.n	15a4e <Sd::Mount(SdInterface::CardInfo_t*)+0xea>
    {
      LOG_ERROR("Failed to initiate SPI mode within timeout. Aborting!");
   15a16:	f240 13ff 	movw	r3, #511	; 0x1ff
   15a1a:	4a7e      	ldr	r2, [pc, #504]	; (15c14 <Sd::Mount(SdInterface::CardInfo_t*)+0x2b0>)
   15a1c:	497e      	ldr	r1, [pc, #504]	; (15c18 <Sd::Mount(SdInterface::CardInfo_t*)+0x2b4>)
   15a1e:	487f      	ldr	r0, [pc, #508]	; (15c1c <Sd::Mount(SdInterface::CardInfo_t*)+0x2b8>)
   15a20:	f7fe fb50 	bl	140c4 <printf>
      sd->response.length = SendCmd(Command::kGarbage, 0xFFFFFFFF,
                                    sd->response.data.byte, 0, KeepAlive::kNo);
   15a24:	9b03      	ldr	r3, [sp, #12]
   15a26:	681b      	ldr	r3, [r3, #0]
   15a28:	681c      	ldr	r4, [r3, #0]
      sd->response.length = SendCmd(Command::kGarbage, 0xFFFFFFFF,
   15a2a:	9b02      	ldr	r3, [sp, #8]
   15a2c:	f103 0208 	add.w	r2, r3, #8
   15a30:	2300      	movs	r3, #0
   15a32:	9301      	str	r3, [sp, #4]
   15a34:	2300      	movs	r3, #0
   15a36:	9300      	str	r3, [sp, #0]
   15a38:	4613      	mov	r3, r2
   15a3a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   15a3e:	21ff      	movs	r1, #255	; 0xff
   15a40:	9803      	ldr	r0, [sp, #12]
   15a42:	47a0      	blx	r4
   15a44:	4602      	mov	r2, r0
   15a46:	9b02      	ldr	r3, [sp, #8]
   15a48:	611a      	str	r2, [r3, #16]
      return false;
   15a4a:	2400      	movs	r4, #0
   15a4c:	e10c      	b.n	15c68 <Sd::Mount(SdInterface::CardInfo_t*)+0x304>
    }

    // Send the host's supported voltage (3.3V) and ask if the card
    // supports it
    LOG_DEBUG("Checking Current SD Card Voltage Level...");
    constexpr uint8_t kCheckPattern = 0xAB;
   15a4e:	23ab      	movs	r3, #171	; 0xab
   15a50:	f88d 301f 	strb.w	r3, [sp, #31]
    uint64_t supported_voltage      = 0x00000001;
   15a54:	f04f 0301 	mov.w	r3, #1
   15a58:	f04f 0400 	mov.w	r4, #0
   15a5c:	e9cd 3404 	strd	r3, r4, [sp, #16]
    sd->response.length =
        SendCmd(Command::kGetOp,
                static_cast<uint32_t>((supported_voltage << 8) | kCheckPattern),
                sd->response.data.byte, 100, KeepAlive::kYes);
   15a60:	9b03      	ldr	r3, [sp, #12]
   15a62:	681b      	ldr	r3, [r3, #0]
   15a64:	681c      	ldr	r4, [r3, #0]
                static_cast<uint32_t>((supported_voltage << 8) | kCheckPattern),
   15a66:	9b04      	ldr	r3, [sp, #16]
   15a68:	021b      	lsls	r3, r3, #8
        SendCmd(Command::kGetOp,
   15a6a:	f043 02ab 	orr.w	r2, r3, #171	; 0xab
   15a6e:	9b02      	ldr	r3, [sp, #8]
   15a70:	f103 0108 	add.w	r1, r3, #8
   15a74:	2301      	movs	r3, #1
   15a76:	9301      	str	r3, [sp, #4]
   15a78:	2364      	movs	r3, #100	; 0x64
   15a7a:	9300      	str	r3, [sp, #0]
   15a7c:	460b      	mov	r3, r1
   15a7e:	2148      	movs	r1, #72	; 0x48
   15a80:	9803      	ldr	r0, [sp, #12]
   15a82:	47a0      	blx	r4
   15a84:	4602      	mov	r2, r0
    sd->response.length =
   15a86:	9b02      	ldr	r3, [sp, #8]
   15a88:	611a      	str	r2, [r3, #16]
    if (sd->response.data.byte[4] != kCheckPattern)
   15a8a:	9b02      	ldr	r3, [sp, #8]
   15a8c:	7b1b      	ldrb	r3, [r3, #12]
   15a8e:	2bab      	cmp	r3, #171	; 0xab
   15a90:	d01b      	beq.n	15aca <Sd::Mount(SdInterface::CardInfo_t*)+0x166>
    {
      // If the last byte is not an exact echo of the LSB of the kGetOp
      // command's argument, this response is invalid
      LOG_ERROR("Response integrity check failed. Aborting!");
   15a92:	f240 2312 	movw	r3, #530	; 0x212
   15a96:	4a5f      	ldr	r2, [pc, #380]	; (15c14 <Sd::Mount(SdInterface::CardInfo_t*)+0x2b0>)
   15a98:	4961      	ldr	r1, [pc, #388]	; (15c20 <Sd::Mount(SdInterface::CardInfo_t*)+0x2bc>)
   15a9a:	4862      	ldr	r0, [pc, #392]	; (15c24 <Sd::Mount(SdInterface::CardInfo_t*)+0x2c0>)
   15a9c:	f7fe fb12 	bl	140c4 <printf>
      sd->response.length = SendCmd(Command::kGarbage, 0xFFFFFFFF,
                                    sd->response.data.byte, 0, KeepAlive::kNo);
   15aa0:	9b03      	ldr	r3, [sp, #12]
   15aa2:	681b      	ldr	r3, [r3, #0]
   15aa4:	681c      	ldr	r4, [r3, #0]
      sd->response.length = SendCmd(Command::kGarbage, 0xFFFFFFFF,
   15aa6:	9b02      	ldr	r3, [sp, #8]
   15aa8:	f103 0208 	add.w	r2, r3, #8
   15aac:	2300      	movs	r3, #0
   15aae:	9301      	str	r3, [sp, #4]
   15ab0:	2300      	movs	r3, #0
   15ab2:	9300      	str	r3, [sp, #0]
   15ab4:	4613      	mov	r3, r2
   15ab6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   15aba:	21ff      	movs	r1, #255	; 0xff
   15abc:	9803      	ldr	r0, [sp, #12]
   15abe:	47a0      	blx	r4
   15ac0:	4602      	mov	r2, r0
   15ac2:	9b02      	ldr	r3, [sp, #8]
   15ac4:	611a      	str	r2, [r3, #16]
      return false;
   15ac6:	2400      	movs	r4, #0
   15ac8:	e0ce      	b.n	15c68 <Sd::Mount(SdInterface::CardInfo_t*)+0x304>
    }
    else if (sd->response.data.byte[3] &
   15aca:	9b02      	ldr	r3, [sp, #8]
   15acc:	7adb      	ldrb	r3, [r3, #11]
   15ace:	4619      	mov	r1, r3
             (supported_voltage == static_cast<uint64_t>(0x00)))
   15ad0:	9a04      	ldr	r2, [sp, #16]
   15ad2:	9b05      	ldr	r3, [sp, #20]
   15ad4:	4313      	orrs	r3, r2
   15ad6:	2b00      	cmp	r3, #0
   15ad8:	bf0c      	ite	eq
   15ada:	2301      	moveq	r3, #1
   15adc:	2300      	movne	r3, #0
   15ade:	b2db      	uxtb	r3, r3
    else if (sd->response.data.byte[3] &
   15ae0:	400b      	ands	r3, r1
   15ae2:	2b00      	cmp	r3, #0
   15ae4:	d01b      	beq.n	15b1e <Sd::Mount(SdInterface::CardInfo_t*)+0x1ba>
    {
      // If the 2nd-to-last byte of the reponse AND'ed with our host
      // device's supported voltage range is 0x00, the SD card doesn't
      // support our device's operating voltage
      LOG_ERROR("Unsupported voltage in use. Aborting!");
   15ae6:	f240 231d 	movw	r3, #541	; 0x21d
   15aea:	4a4a      	ldr	r2, [pc, #296]	; (15c14 <Sd::Mount(SdInterface::CardInfo_t*)+0x2b0>)
   15aec:	494e      	ldr	r1, [pc, #312]	; (15c28 <Sd::Mount(SdInterface::CardInfo_t*)+0x2c4>)
   15aee:	484f      	ldr	r0, [pc, #316]	; (15c2c <Sd::Mount(SdInterface::CardInfo_t*)+0x2c8>)
   15af0:	f7fe fae8 	bl	140c4 <printf>
      sd->response.length = SendCmd(Command::kGarbage, 0xFFFFFFFF,
                                    sd->response.data.byte, 0, KeepAlive::kNo);
   15af4:	9b03      	ldr	r3, [sp, #12]
   15af6:	681b      	ldr	r3, [r3, #0]
   15af8:	681c      	ldr	r4, [r3, #0]
      sd->response.length = SendCmd(Command::kGarbage, 0xFFFFFFFF,
   15afa:	9b02      	ldr	r3, [sp, #8]
   15afc:	f103 0208 	add.w	r2, r3, #8
   15b00:	2300      	movs	r3, #0
   15b02:	9301      	str	r3, [sp, #4]
   15b04:	2300      	movs	r3, #0
   15b06:	9300      	str	r3, [sp, #0]
   15b08:	4613      	mov	r3, r2
   15b0a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   15b0e:	21ff      	movs	r1, #255	; 0xff
   15b10:	9803      	ldr	r0, [sp, #12]
   15b12:	47a0      	blx	r4
   15b14:	4602      	mov	r2, r0
   15b16:	9b02      	ldr	r3, [sp, #8]
   15b18:	611a      	str	r2, [r3, #16]
      return false;
   15b1a:	2400      	movs	r4, #0
   15b1c:	e0a4      	b.n	15c68 <Sd::Mount(SdInterface::CardInfo_t*)+0x304>
    }

    // Indicate that the host supports SDHC/SDXC and wait for card to
    // shift out of idle state
    LOG_DEBUG("Expressing High-Capacity SD Card Support...");
    tries = 0;
   15b1e:	2300      	movs	r3, #0
   15b20:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    do
    {
      // Send host's operating conditions
      sd->response.length =
          SendCmd(Command::kInit, 0x40000000, sd->response.data.byte, 100,
                  KeepAlive::kYes);
   15b24:	9b03      	ldr	r3, [sp, #12]
   15b26:	681b      	ldr	r3, [r3, #0]
   15b28:	681c      	ldr	r4, [r3, #0]
          SendCmd(Command::kInit, 0x40000000, sd->response.data.byte, 100,
   15b2a:	9b02      	ldr	r3, [sp, #8]
   15b2c:	f103 0208 	add.w	r2, r3, #8
   15b30:	2301      	movs	r3, #1
   15b32:	9301      	str	r3, [sp, #4]
   15b34:	2364      	movs	r3, #100	; 0x64
   15b36:	9300      	str	r3, [sp, #0]
   15b38:	4613      	mov	r3, r2
   15b3a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   15b3e:	2141      	movs	r1, #65	; 0x41
   15b40:	9803      	ldr	r0, [sp, #12]
   15b42:	47a0      	blx	r4
   15b44:	4602      	mov	r2, r0
      sd->response.length =
   15b46:	9b02      	ldr	r3, [sp, #8]
   15b48:	611a      	str	r2, [r3, #16]
      tries++;
   15b4a:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   15b4e:	3301      	adds	r3, #1
   15b50:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    } while (tries < kBusTimeout && sd->response.data.byte[0] & 0x01);
   15b54:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   15b58:	2bf9      	cmp	r3, #249	; 0xf9
   15b5a:	d806      	bhi.n	15b6a <Sd::Mount(SdInterface::CardInfo_t*)+0x206>
   15b5c:	9b02      	ldr	r3, [sp, #8]
   15b5e:	7a1b      	ldrb	r3, [r3, #8]
   15b60:	f003 0301 	and.w	r3, r3, #1
   15b64:	2b00      	cmp	r3, #0
   15b66:	d000      	beq.n	15b6a <Sd::Mount(SdInterface::CardInfo_t*)+0x206>
    do
   15b68:	e7dc      	b.n	15b24 <Sd::Mount(SdInterface::CardInfo_t*)+0x1c0>
    if (tries == kBusTimeout)
   15b6a:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   15b6e:	2bfa      	cmp	r3, #250	; 0xfa
   15b70:	d11b      	bne.n	15baa <Sd::Mount(SdInterface::CardInfo_t*)+0x246>
    {
      LOG_ERROR("SD Card timed out. Aborting!");
   15b72:	f240 2331 	movw	r3, #561	; 0x231
   15b76:	4a27      	ldr	r2, [pc, #156]	; (15c14 <Sd::Mount(SdInterface::CardInfo_t*)+0x2b0>)
   15b78:	492d      	ldr	r1, [pc, #180]	; (15c30 <Sd::Mount(SdInterface::CardInfo_t*)+0x2cc>)
   15b7a:	482e      	ldr	r0, [pc, #184]	; (15c34 <Sd::Mount(SdInterface::CardInfo_t*)+0x2d0>)
   15b7c:	f7fe faa2 	bl	140c4 <printf>
      sd->response.length = SendCmd(Command::kGarbage, 0xFFFFFFFF,
                                    sd->response.data.byte, 0, KeepAlive::kNo);
   15b80:	9b03      	ldr	r3, [sp, #12]
   15b82:	681b      	ldr	r3, [r3, #0]
   15b84:	681c      	ldr	r4, [r3, #0]
      sd->response.length = SendCmd(Command::kGarbage, 0xFFFFFFFF,
   15b86:	9b02      	ldr	r3, [sp, #8]
   15b88:	f103 0208 	add.w	r2, r3, #8
   15b8c:	2300      	movs	r3, #0
   15b8e:	9301      	str	r3, [sp, #4]
   15b90:	2300      	movs	r3, #0
   15b92:	9300      	str	r3, [sp, #0]
   15b94:	4613      	mov	r3, r2
   15b96:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   15b9a:	21ff      	movs	r1, #255	; 0xff
   15b9c:	9803      	ldr	r0, [sp, #12]
   15b9e:	47a0      	blx	r4
   15ba0:	4602      	mov	r2, r0
   15ba2:	9b02      	ldr	r3, [sp, #8]
   15ba4:	611a      	str	r2, [r3, #16]
      return false;
   15ba6:	2400      	movs	r4, #0
   15ba8:	e05e      	b.n	15c68 <Sd::Mount(SdInterface::CardInfo_t*)+0x304>
    // After card is ready, acquire card capacity info using kGetOcr a
    // second time
    LOG_DEBUG("Reading Card Capacity Information...");
    // Read CCS
    sd->response.length = SendCmd(Command::kGetOcr, 0x00,
                                  sd->response.data.byte, 100, KeepAlive::kYes);
   15baa:	9b03      	ldr	r3, [sp, #12]
   15bac:	681b      	ldr	r3, [r3, #0]
   15bae:	681c      	ldr	r4, [r3, #0]
    sd->response.length = SendCmd(Command::kGetOcr, 0x00,
   15bb0:	9b02      	ldr	r3, [sp, #8]
   15bb2:	f103 0208 	add.w	r2, r3, #8
   15bb6:	2301      	movs	r3, #1
   15bb8:	9301      	str	r3, [sp, #4]
   15bba:	2364      	movs	r3, #100	; 0x64
   15bbc:	9300      	str	r3, [sp, #0]
   15bbe:	4613      	mov	r3, r2
   15bc0:	2200      	movs	r2, #0
   15bc2:	217a      	movs	r1, #122	; 0x7a
   15bc4:	9803      	ldr	r0, [sp, #12]
   15bc6:	47a0      	blx	r4
   15bc8:	4602      	mov	r2, r0
   15bca:	9b02      	ldr	r3, [sp, #8]
   15bcc:	611a      	str	r2, [r3, #16]
    if (sd->response.data.byte[1] & 0x40)
   15bce:	9b02      	ldr	r3, [sp, #8]
   15bd0:	7a5b      	ldrb	r3, [r3, #9]
   15bd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
   15bd6:	2b00      	cmp	r3, #0
   15bd8:	d003      	beq.n	15be2 <Sd::Mount(SdInterface::CardInfo_t*)+0x27e>
    {
      // The card is either high or extended capacity
      LOG_DEBUG("SD Card is HC/XC");
      sd->type = Type::kSDHC;
   15bda:	9b02      	ldr	r3, [sp, #8]
   15bdc:	2201      	movs	r2, #1
   15bde:	605a      	str	r2, [r3, #4]
   15be0:	e002      	b.n	15be8 <Sd::Mount(SdInterface::CardInfo_t*)+0x284>
    }
    else
    {
      // The card is standard capacity
      LOG_DEBUG("SD Card is SC");
      sd->type = Type::kSDSC;
   15be2:	9b02      	ldr	r3, [sp, #8]
   15be4:	2200      	movs	r2, #0
   15be6:	605a      	str	r2, [r3, #4]
    }

    // Store OCR information
    for (int i = 0; i < 4; i++)
   15be8:	2300      	movs	r3, #0
   15bea:	9308      	str	r3, [sp, #32]
   15bec:	9b08      	ldr	r3, [sp, #32]
   15bee:	2b03      	cmp	r3, #3
   15bf0:	dc22      	bgt.n	15c38 <Sd::Mount(SdInterface::CardInfo_t*)+0x2d4>
    {
      // ensure OCR doesn't capture the R1 section of the response
      sd->ocr.byte[i] = sd->response.data.byte[i + 1];
   15bf2:	9b08      	ldr	r3, [sp, #32]
   15bf4:	3301      	adds	r3, #1
   15bf6:	9a02      	ldr	r2, [sp, #8]
   15bf8:	4413      	add	r3, r2
   15bfa:	7a19      	ldrb	r1, [r3, #8]
   15bfc:	9a02      	ldr	r2, [sp, #8]
   15bfe:	9b08      	ldr	r3, [sp, #32]
   15c00:	4413      	add	r3, r2
   15c02:	460a      	mov	r2, r1
   15c04:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < 4; i++)
   15c06:	9b08      	ldr	r3, [sp, #32]
   15c08:	3301      	adds	r3, #1
   15c0a:	9308      	str	r3, [sp, #32]
   15c0c:	e7ee      	b.n	15bec <Sd::Mount(SdInterface::CardInfo_t*)+0x288>
   15c0e:	bf00      	nop
   15c10:	00015965 	.word	0x00015965
   15c14:	00019178 	.word	0x00019178
   15c18:	00018e90 	.word	0x00018e90
   15c1c:	000184a8 	.word	0x000184a8
   15c20:	00018e98 	.word	0x00018e98
   15c24:	00018518 	.word	0x00018518
   15c28:	00018ea0 	.word	0x00018ea0
   15c2c:	0001857c 	.word	0x0001857c
   15c30:	00018ea8 	.word	0x00018ea8
   15c34:	000185dc 	.word	0x000185dc
    }

    // If card is SDSC, manually set its block size
    if (sd->type == Type::kSDSC)
   15c38:	9b02      	ldr	r3, [sp, #8]
   15c3a:	685b      	ldr	r3, [r3, #4]
   15c3c:	2b00      	cmp	r3, #0
   15c3e:	d112      	bne.n	15c66 <Sd::Mount(SdInterface::CardInfo_t*)+0x302>
    {
      // Send requested byte size
      sd->response.length =
          SendCmd(Command::kChgBlkLen, static_cast<uint32_t>(kBlockSize),
                  sd->response.data.byte, 0, KeepAlive::kYes);
   15c40:	9b03      	ldr	r3, [sp, #12]
   15c42:	681b      	ldr	r3, [r3, #0]
   15c44:	681c      	ldr	r4, [r3, #0]
          SendCmd(Command::kChgBlkLen, static_cast<uint32_t>(kBlockSize),
   15c46:	9b02      	ldr	r3, [sp, #8]
   15c48:	f103 0208 	add.w	r2, r3, #8
   15c4c:	2301      	movs	r3, #1
   15c4e:	9301      	str	r3, [sp, #4]
   15c50:	2300      	movs	r3, #0
   15c52:	9300      	str	r3, [sp, #0]
   15c54:	4613      	mov	r3, r2
   15c56:	f44f 7200 	mov.w	r2, #512	; 0x200
   15c5a:	2150      	movs	r1, #80	; 0x50
   15c5c:	9803      	ldr	r0, [sp, #12]
   15c5e:	47a0      	blx	r4
   15c60:	4602      	mov	r2, r0
      sd->response.length =
   15c62:	9b02      	ldr	r3, [sp, #8]
   15c64:	611a      	str	r2, [r3, #16]
    }

    return true;
   15c66:	2401      	movs	r4, #1
   15c68:	462b      	mov	r3, r5
   15c6a:	4619      	mov	r1, r3
   15c6c:	4803      	ldr	r0, [pc, #12]	; (15c7c <Sd::Mount(SdInterface::CardInfo_t*)+0x318>)
   15c6e:	f7fc ffe3 	bl	12c38 <__cyg_profile_func_exit>
   15c72:	4623      	mov	r3, r4
  }
   15c74:	4618      	mov	r0, r3
   15c76:	b00b      	add	sp, #44	; 0x2c
   15c78:	bd30      	pop	{r4, r5, pc}
   15c7a:	bf00      	nop
   15c7c:	00015965 	.word	0x00015965

00015c80 <Sd::ToBool(bool)>:

  // Returns string to represent a boolean value
  const char * ToBool(bool condition)
   15c80:	b530      	push	{r4, r5, lr}
   15c82:	b083      	sub	sp, #12
   15c84:	4675      	mov	r5, lr
   15c86:	9001      	str	r0, [sp, #4]
   15c88:	460b      	mov	r3, r1
   15c8a:	f88d 3003 	strb.w	r3, [sp, #3]
   15c8e:	462b      	mov	r3, r5
   15c90:	4619      	mov	r1, r3
   15c92:	4809      	ldr	r0, [pc, #36]	; (15cb8 <Sd::ToBool(bool)+0x38>)
   15c94:	f7fc ffbc 	bl	12c10 <__cyg_profile_func_enter>
  {
    return (condition) ? "true" : "false";
   15c98:	f89d 3003 	ldrb.w	r3, [sp, #3]
   15c9c:	2b00      	cmp	r3, #0
   15c9e:	d001      	beq.n	15ca4 <Sd::ToBool(bool)+0x24>
   15ca0:	4c06      	ldr	r4, [pc, #24]	; (15cbc <Sd::ToBool(bool)+0x3c>)
   15ca2:	e000      	b.n	15ca6 <Sd::ToBool(bool)+0x26>
   15ca4:	4c06      	ldr	r4, [pc, #24]	; (15cc0 <Sd::ToBool(bool)+0x40>)
   15ca6:	462b      	mov	r3, r5
   15ca8:	4619      	mov	r1, r3
   15caa:	4803      	ldr	r0, [pc, #12]	; (15cb8 <Sd::ToBool(bool)+0x38>)
   15cac:	f7fc ffc4 	bl	12c38 <__cyg_profile_func_exit>
   15cb0:	4623      	mov	r3, r4
  }
   15cb2:	4618      	mov	r0, r3
   15cb4:	b003      	add	sp, #12
   15cb6:	bd30      	pop	{r4, r5, pc}
   15cb8:	00015c81 	.word	0x00015c81
   15cbc:	00018634 	.word	0x00018634
   15cc0:	0001863c 	.word	0x0001863c

00015cc4 <Sd::WaitToReadBlock()>:

  // Waits for the card to respond after a single or multi block read cmd is
  // sent.
  void WaitToReadBlock()
   15cc4:	b510      	push	{r4, lr}
   15cc6:	b084      	sub	sp, #16
   15cc8:	4674      	mov	r4, lr
   15cca:	9001      	str	r0, [sp, #4]
   15ccc:	4623      	mov	r3, r4
   15cce:	4619      	mov	r1, r3
   15cd0:	4814      	ldr	r0, [pc, #80]	; (15d24 <Sd::WaitToReadBlock()+0x60>)
   15cd2:	f7fc ff9d 	bl	12c10 <__cyg_profile_func_enter>
    // Bit 4 -->  If set, card is locked
    // Bit 3 -->  If set, address is out or range
    // Bit 2 -->  If set, card ECC failed
    // Bit 1 -->  If set, CC error occurred
    // Bit 0 -->  If set, a generic error occurred
    uint8_t wait_byte = 0x00;
   15cd6:	2300      	movs	r3, #0
   15cd8:	f88d 300f 	strb.w	r3, [sp, #15]
    do
    {
      wait_byte = static_cast<uint8_t>(ssp_interface_->Transfer(0xFF));
   15cdc:	9b01      	ldr	r3, [sp, #4]
   15cde:	685a      	ldr	r2, [r3, #4]
   15ce0:	9b01      	ldr	r3, [sp, #4]
   15ce2:	685b      	ldr	r3, [r3, #4]
   15ce4:	681b      	ldr	r3, [r3, #0]
   15ce6:	3308      	adds	r3, #8
   15ce8:	681b      	ldr	r3, [r3, #0]
   15cea:	21ff      	movs	r1, #255	; 0xff
   15cec:	4610      	mov	r0, r2
   15cee:	4798      	blx	r3
   15cf0:	4603      	mov	r3, r0
   15cf2:	f88d 300f 	strb.w	r3, [sp, #15]
    } while (wait_byte != 0xFE && (wait_byte & 0xE0) != 0x00);
   15cf6:	f89d 300f 	ldrb.w	r3, [sp, #15]
   15cfa:	2bfe      	cmp	r3, #254	; 0xfe
   15cfc:	d006      	beq.n	15d0c <Sd::WaitToReadBlock()+0x48>
   15cfe:	f89d 300f 	ldrb.w	r3, [sp, #15]
   15d02:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
   15d06:	2b00      	cmp	r3, #0
   15d08:	d000      	beq.n	15d0c <Sd::WaitToReadBlock()+0x48>
    do
   15d0a:	e7e7      	b.n	15cdc <Sd::WaitToReadBlock()+0x18>

    // DEBUG: Check the value of the wait byte
    if (wait_byte == 0xFE)
   15d0c:	f89d 300f 	ldrb.w	r3, [sp, #15]
   15d10:	2bfe      	cmp	r3, #254	; 0xfe
   15d12:	4623      	mov	r3, r4
   15d14:	4619      	mov	r1, r3
   15d16:	4803      	ldr	r0, [pc, #12]	; (15d24 <Sd::WaitToReadBlock()+0x60>)
   15d18:	f7fc ff8e 	bl	12c38 <__cyg_profile_func_exit>
      LOG_DEBUG("Addr Out of Range?: %s", ToBool(wait_byte & 0x08));
      LOG_DEBUG("Card ECC Failed?: %s", ToBool(wait_byte & 0x04));
      LOG_DEBUG("CC Error?: %s", ToBool(wait_byte & 0x02));
      LOG_DEBUG("Error?: %s", ToBool(wait_byte & 0x01));
    }
  }
   15d1c:	bf00      	nop
   15d1e:	b004      	add	sp, #16
   15d20:	bd10      	pop	{r4, pc}
   15d22:	bf00      	nop
   15d24:	00015cc5 	.word	0x00015cc5

00015d28 <Sd::WaitWhileBusy()>:

  // Waits for the card to be ready to receive a new block after one has
  // been written or erased
  void WaitWhileBusy()
   15d28:	b510      	push	{r4, lr}
   15d2a:	b084      	sub	sp, #16
   15d2c:	4674      	mov	r4, lr
   15d2e:	9001      	str	r0, [sp, #4]
   15d30:	4623      	mov	r3, r4
   15d32:	4619      	mov	r1, r3
   15d34:	480f      	ldr	r0, [pc, #60]	; (15d74 <Sd::WaitWhileBusy()+0x4c>)
   15d36:	f7fc ff6b 	bl	12c10 <__cyg_profile_func_enter>
  {
    // Wait for the card to finish programming (i.e. when the
    // bytes return to 0xFF)
    uint8_t busy_byte = 0x00;
   15d3a:	2300      	movs	r3, #0
   15d3c:	f88d 300f 	strb.w	r3, [sp, #15]
    LOG_DEBUG("Card is busy. Waiting for it to finish...");
    do
    {
      busy_byte = static_cast<uint8_t>(ssp_interface_->Transfer(0xFF));
   15d40:	9b01      	ldr	r3, [sp, #4]
   15d42:	685a      	ldr	r2, [r3, #4]
   15d44:	9b01      	ldr	r3, [sp, #4]
   15d46:	685b      	ldr	r3, [r3, #4]
   15d48:	681b      	ldr	r3, [r3, #0]
   15d4a:	3308      	adds	r3, #8
   15d4c:	681b      	ldr	r3, [r3, #0]
   15d4e:	21ff      	movs	r1, #255	; 0xff
   15d50:	4610      	mov	r0, r2
   15d52:	4798      	blx	r3
   15d54:	4603      	mov	r3, r0
   15d56:	f88d 300f 	strb.w	r3, [sp, #15]
    } while (busy_byte != 0xFF);
   15d5a:	f89d 300f 	ldrb.w	r3, [sp, #15]
   15d5e:	2bff      	cmp	r3, #255	; 0xff
   15d60:	d000      	beq.n	15d64 <Sd::WaitWhileBusy()+0x3c>
    do
   15d62:	e7ed      	b.n	15d40 <Sd::WaitWhileBusy()+0x18>
   15d64:	4623      	mov	r3, r4
   15d66:	4619      	mov	r1, r3
   15d68:	4802      	ldr	r0, [pc, #8]	; (15d74 <Sd::WaitWhileBusy()+0x4c>)
   15d6a:	f7fc ff65 	bl	12c38 <__cyg_profile_func_exit>
    LOG_DEBUG("Card finished!");
  }
   15d6e:	bf00      	nop
   15d70:	b004      	add	sp, #16
   15d72:	bd10      	pop	{r4, pc}
   15d74:	00015d29 	.word	0x00015d29

00015d78 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)>:

  // Read any number of blocks from the SD card
  uint8_t ReadBlock(uint32_t address, uint8_t * array,
   15d78:	b530      	push	{r4, r5, lr}
   15d7a:	f5ad 7d13 	sub.w	sp, sp, #588	; 0x24c
   15d7e:	4675      	mov	r5, lr
   15d80:	ac05      	add	r4, sp, #20
   15d82:	6020      	str	r0, [r4, #0]
   15d84:	a804      	add	r0, sp, #16
   15d86:	6001      	str	r1, [r0, #0]
   15d88:	a903      	add	r1, sp, #12
   15d8a:	600a      	str	r2, [r1, #0]
   15d8c:	aa02      	add	r2, sp, #8
   15d8e:	6013      	str	r3, [r2, #0]
   15d90:	462b      	mov	r3, r5
   15d92:	4619      	mov	r1, r3
   15d94:	487d      	ldr	r0, [pc, #500]	; (15f8c <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x214>)
   15d96:	f7fc ff3b 	bl	12c10 <__cyg_profile_func_enter>
                    uint32_t blocks = 1) override
  {
    LOG_DEBUG("Block %" PRId32 " :: 0x%" PRIX32 " for %" PRId32 " blocks",
              address, address, blocks);
    // Wait for a previous command to finish
    WaitWhileBusy();
   15d9a:	ab05      	add	r3, sp, #20
   15d9c:	6818      	ldr	r0, [r3, #0]
   15d9e:	f7ff ffc3 	bl	15d28 <Sd::WaitWhileBusy()>

    // Create a temporary storage location to store sd command responses
    Sd::CardInfo_t sd;
    bool payload_had_bad_crc = false;
   15da2:	2300      	movs	r3, #0
   15da4:	f88d 3247 	strb.w	r3, [sp, #583]	; 0x247

    // Create a temporary place to store blocks of 512 bytes (this is now
    // possible because the constructor enforces block size cross-
    // compatibility)
    uint8_t block_store[512] = { 0 };
   15da8:	ab06      	add	r3, sp, #24
   15daa:	4618      	mov	r0, r3
   15dac:	f44f 7300 	mov.w	r3, #512	; 0x200
   15db0:	461a      	mov	r2, r3
   15db2:	2100      	movs	r1, #0
   15db4:	f001 fa2e 	bl	17214 <memset>

    // Determine appropriate command to send
    Command read_cmd;
    if (blocks > 1)
   15db8:	ab02      	add	r3, sp, #8
   15dba:	681b      	ldr	r3, [r3, #0]
   15dbc:	2b01      	cmp	r3, #1
   15dbe:	d902      	bls.n	15dc6 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x4e>
    {
      read_cmd = Command::kReadMulti;
   15dc0:	2352      	movs	r3, #82	; 0x52
   15dc2:	9390      	str	r3, [sp, #576]	; 0x240
   15dc4:	e001      	b.n	15dca <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x52>
    }
    else
    {
      read_cmd = Command::kReadSingle;
   15dc6:	2351      	movs	r3, #81	; 0x51
   15dc8:	9390      	str	r3, [sp, #576]	; 0x240
    }

    // Send initial read command
    sd.response.length =
        SendCmd(read_cmd, address, sd.response.data.byte, 100, KeepAlive::kYes);
   15dca:	ab05      	add	r3, sp, #20
   15dcc:	681b      	ldr	r3, [r3, #0]
   15dce:	681b      	ldr	r3, [r3, #0]
   15dd0:	681c      	ldr	r4, [r3, #0]
   15dd2:	ab86      	add	r3, sp, #536	; 0x218
   15dd4:	f103 0108 	add.w	r1, r3, #8
   15dd8:	aa04      	add	r2, sp, #16
   15dda:	a805      	add	r0, sp, #20
   15ddc:	2301      	movs	r3, #1
   15dde:	9301      	str	r3, [sp, #4]
   15de0:	2364      	movs	r3, #100	; 0x64
   15de2:	9300      	str	r3, [sp, #0]
   15de4:	460b      	mov	r3, r1
   15de6:	6812      	ldr	r2, [r2, #0]
   15de8:	9990      	ldr	r1, [sp, #576]	; 0x240
   15dea:	6800      	ldr	r0, [r0, #0]
   15dec:	47a0      	blx	r4
   15dee:	4603      	mov	r3, r0
    sd.response.length =
   15df0:	938a      	str	r3, [sp, #552]	; 0x228
    LOG_DEBUG("Sent Read Cmd");
    LOG_DEBUG("[R1 Response:0x%02X]", sd.response.data.byte[0]);

    // Check if the command was acknowledged properly
    if (sd.response.data.byte[0] == 0x00)
   15df2:	f89d 3220 	ldrb.w	r3, [sp, #544]	; 0x220
   15df6:	2b00      	cmp	r3, #0
   15df8:	f040 80d8 	bne.w	15fac <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x234>
    {
      // For every block requested
      uint16_t block_count;
      for (block_count = 0; block_count < blocks; block_count++)
   15dfc:	2300      	movs	r3, #0
   15dfe:	f8ad 323e 	strh.w	r3, [sp, #574]	; 0x23e
   15e02:	f8bd 323e 	ldrh.w	r3, [sp, #574]	; 0x23e
   15e06:	aa02      	add	r2, sp, #8
   15e08:	6812      	ldr	r2, [r2, #0]
   15e0a:	429a      	cmp	r2, r3
   15e0c:	f240 8099 	bls.w	15f42 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x1ca>
      {
        // Wait for the card to respond with a ready signal
        WaitToReadBlock();
   15e10:	ab05      	add	r3, sp, #20
   15e12:	6818      	ldr	r0, [r3, #0]
   15e14:	f7ff ff56 	bl	15cc4 <Sd::WaitToReadBlock()>

        // Calculate the block address offset
        uint16_t block_addr_offset =
   15e18:	f8bd 323e 	ldrh.w	r3, [sp, #574]	; 0x23e
   15e1c:	025b      	lsls	r3, r3, #9
   15e1e:	f8ad 323a 	strh.w	r3, [sp, #570]	; 0x23a
            static_cast<uint16_t>(block_count * kBlockSize);

        // Read all the bytes of a single block
        for (uint16_t byte_count = 0; byte_count < kBlockSize; byte_count++)
   15e22:	2300      	movs	r3, #0
   15e24:	f8ad 323c 	strh.w	r3, [sp, #572]	; 0x23c
   15e28:	f8bd 323c 	ldrh.w	r3, [sp, #572]	; 0x23c
   15e2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   15e30:	d22b      	bcs.n	15e8a <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x112>
        {
          // Calculate the current storage index
          uint16_t storage_index =
   15e32:	f8bd 223a 	ldrh.w	r2, [sp, #570]	; 0x23a
   15e36:	f8bd 323c 	ldrh.w	r3, [sp, #572]	; 0x23c
   15e3a:	4413      	add	r3, r2
   15e3c:	f8ad 3238 	strh.w	r3, [sp, #568]	; 0x238
              static_cast<uint16_t>(block_addr_offset + byte_count);

          // Transfer a byte to read a block from the SD card
          array[storage_index] =
              static_cast<uint8_t>(ssp_interface_->Transfer(0xFF));
   15e40:	ab05      	add	r3, sp, #20
   15e42:	681b      	ldr	r3, [r3, #0]
   15e44:	685a      	ldr	r2, [r3, #4]
   15e46:	ab05      	add	r3, sp, #20
   15e48:	681b      	ldr	r3, [r3, #0]
   15e4a:	685b      	ldr	r3, [r3, #4]
   15e4c:	681b      	ldr	r3, [r3, #0]
   15e4e:	3308      	adds	r3, #8
   15e50:	681b      	ldr	r3, [r3, #0]
   15e52:	21ff      	movs	r1, #255	; 0xff
   15e54:	4610      	mov	r0, r2
   15e56:	4798      	blx	r3
   15e58:	4603      	mov	r3, r0
   15e5a:	4619      	mov	r1, r3
          array[storage_index] =
   15e5c:	f8bd 3238 	ldrh.w	r3, [sp, #568]	; 0x238
   15e60:	aa03      	add	r2, sp, #12
   15e62:	6812      	ldr	r2, [r2, #0]
   15e64:	4413      	add	r3, r2
   15e66:	b2ca      	uxtb	r2, r1
   15e68:	701a      	strb	r2, [r3, #0]

          // Copy that byte into our temporary block store
          block_store[byte_count] = array[storage_index];
   15e6a:	f8bd 3238 	ldrh.w	r3, [sp, #568]	; 0x238
   15e6e:	aa03      	add	r2, sp, #12
   15e70:	6812      	ldr	r2, [r2, #0]
   15e72:	441a      	add	r2, r3
   15e74:	f8bd 323c 	ldrh.w	r3, [sp, #572]	; 0x23c
   15e78:	7811      	ldrb	r1, [r2, #0]
   15e7a:	aa06      	add	r2, sp, #24
   15e7c:	54d1      	strb	r1, [r2, r3]
        for (uint16_t byte_count = 0; byte_count < kBlockSize; byte_count++)
   15e7e:	f8bd 323c 	ldrh.w	r3, [sp, #572]	; 0x23c
   15e82:	3301      	adds	r3, #1
   15e84:	f8ad 323c 	strh.w	r3, [sp, #572]	; 0x23c
   15e88:	e7ce      	b.n	15e28 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0xb0>
        }

        // Then read the block's 16-bit CRC (i.e. read two bytes)
        uint16_t block_crc =
            static_cast<uint16_t>((ssp_interface_->Transfer(0xFF) << 8) |
   15e8a:	ab05      	add	r3, sp, #20
   15e8c:	681b      	ldr	r3, [r3, #0]
   15e8e:	685a      	ldr	r2, [r3, #4]
   15e90:	ab05      	add	r3, sp, #20
   15e92:	681b      	ldr	r3, [r3, #0]
   15e94:	685b      	ldr	r3, [r3, #4]
   15e96:	681b      	ldr	r3, [r3, #0]
   15e98:	3308      	adds	r3, #8
   15e9a:	681b      	ldr	r3, [r3, #0]
   15e9c:	21ff      	movs	r1, #255	; 0xff
   15e9e:	4610      	mov	r0, r2
   15ea0:	4798      	blx	r3
   15ea2:	4603      	mov	r3, r0
   15ea4:	021b      	lsls	r3, r3, #8
   15ea6:	b21c      	sxth	r4, r3
                                  ssp_interface_->Transfer(0xFF));
   15ea8:	ab05      	add	r3, sp, #20
   15eaa:	681b      	ldr	r3, [r3, #0]
   15eac:	685a      	ldr	r2, [r3, #4]
   15eae:	ab05      	add	r3, sp, #20
   15eb0:	681b      	ldr	r3, [r3, #0]
   15eb2:	685b      	ldr	r3, [r3, #4]
   15eb4:	681b      	ldr	r3, [r3, #0]
   15eb6:	3308      	adds	r3, #8
   15eb8:	681b      	ldr	r3, [r3, #0]
   15eba:	21ff      	movs	r1, #255	; 0xff
   15ebc:	4610      	mov	r0, r2
   15ebe:	4798      	blx	r3
   15ec0:	4603      	mov	r3, r0
   15ec2:	b21b      	sxth	r3, r3
            static_cast<uint16_t>((ssp_interface_->Transfer(0xFF) << 8) |
   15ec4:	4323      	orrs	r3, r4
   15ec6:	b21b      	sxth	r3, r3
                                  ssp_interface_->Transfer(0xFF));
   15ec8:	f8ad 3236 	strh.w	r3, [sp, #566]	; 0x236

        // Run a CRC-16 calculation on the message to determine if the
        // received CRCs match (i.e. checks if the block data is
        // valid).
        uint16_t expected_block_crc = GetCrc16(block_store, 512);
   15ecc:	ab05      	add	r3, sp, #20
   15ece:	681b      	ldr	r3, [r3, #0]
   15ed0:	681b      	ldr	r3, [r3, #0]
   15ed2:	3320      	adds	r3, #32
   15ed4:	681b      	ldr	r3, [r3, #0]
   15ed6:	a906      	add	r1, sp, #24
   15ed8:	a805      	add	r0, sp, #20
   15eda:	f44f 7200 	mov.w	r2, #512	; 0x200
   15ede:	6800      	ldr	r0, [r0, #0]
   15ee0:	4798      	blx	r3
   15ee2:	4603      	mov	r3, r0
   15ee4:	f8ad 3234 	strh.w	r3, [sp, #564]	; 0x234

        LOG_DEBUG("Block #%d @ 0x%" PRIX32 " acquired", block_count, address);
        LOG_DEBUG("Expecting block crc16 '0x%04X'", expected_block_crc);
        LOG_DEBUG("Got '0x%04X'", block_crc);
        if (expected_block_crc != block_crc)
   15ee8:	f8bd 2234 	ldrh.w	r2, [sp, #564]	; 0x234
   15eec:	f8bd 3236 	ldrh.w	r3, [sp, #566]	; 0x236
   15ef0:	429a      	cmp	r2, r3
   15ef2:	d020      	beq.n	15f36 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x1be>
        {
          // If they do not match, set the bad crc status
          payload_had_bad_crc = true;
   15ef4:	2301      	movs	r3, #1
   15ef6:	f88d 3247 	strb.w	r3, [sp, #583]	; 0x247
          LOG_ERROR("While Reading Block #%d CRC16:", block_count);
   15efa:	f8bd 323e 	ldrh.w	r3, [sp, #574]	; 0x23e
   15efe:	9300      	str	r3, [sp, #0]
   15f00:	f240 23ed 	movw	r3, #749	; 0x2ed
   15f04:	4a22      	ldr	r2, [pc, #136]	; (15f90 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x218>)
   15f06:	4923      	ldr	r1, [pc, #140]	; (15f94 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x21c>)
   15f08:	4823      	ldr	r0, [pc, #140]	; (15f98 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x220>)
   15f0a:	f7fe f8db 	bl	140c4 <printf>
          LOG_ERROR("Expected '0x%04X'", expected_block_crc);
   15f0e:	f8bd 3234 	ldrh.w	r3, [sp, #564]	; 0x234
   15f12:	9300      	str	r3, [sp, #0]
   15f14:	f240 23ee 	movw	r3, #750	; 0x2ee
   15f18:	4a1d      	ldr	r2, [pc, #116]	; (15f90 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x218>)
   15f1a:	4920      	ldr	r1, [pc, #128]	; (15f9c <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x224>)
   15f1c:	4820      	ldr	r0, [pc, #128]	; (15fa0 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x228>)
   15f1e:	f7fe f8d1 	bl	140c4 <printf>
          LOG_ERROR("Got '0x%04X'", block_crc);
   15f22:	f8bd 3236 	ldrh.w	r3, [sp, #566]	; 0x236
   15f26:	9300      	str	r3, [sp, #0]
   15f28:	f240 23ef 	movw	r3, #751	; 0x2ef
   15f2c:	4a18      	ldr	r2, [pc, #96]	; (15f90 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x218>)
   15f2e:	491d      	ldr	r1, [pc, #116]	; (15fa4 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x22c>)
   15f30:	481d      	ldr	r0, [pc, #116]	; (15fa8 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x230>)
   15f32:	f7fe f8c7 	bl	140c4 <printf>
      for (block_count = 0; block_count < blocks; block_count++)
   15f36:	f8bd 323e 	ldrh.w	r3, [sp, #574]	; 0x23e
   15f3a:	3301      	adds	r3, #1
   15f3c:	f8ad 323e 	strh.w	r3, [sp, #574]	; 0x23e
   15f40:	e75f      	b.n	15e02 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x8a>
        }
      }

      // After reading multiple blocks, send the stop command to terminate the
      // transaction (i.e. no keep-alive)
      if (blocks > 1)
   15f42:	ab02      	add	r3, sp, #8
   15f44:	681b      	ldr	r3, [r3, #0]
   15f46:	2b01      	cmp	r3, #1
   15f48:	d913      	bls.n	15f72 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x1fa>
      {
        sd.response.length =
            SendCmd(Command::kStopTrans, 0xFFFFFFFF, sd.response.data.byte, 100,
                    KeepAlive::kNo);
   15f4a:	ab05      	add	r3, sp, #20
   15f4c:	681b      	ldr	r3, [r3, #0]
   15f4e:	681b      	ldr	r3, [r3, #0]
   15f50:	681c      	ldr	r4, [r3, #0]
            SendCmd(Command::kStopTrans, 0xFFFFFFFF, sd.response.data.byte, 100,
   15f52:	ab86      	add	r3, sp, #536	; 0x218
   15f54:	f103 0208 	add.w	r2, r3, #8
   15f58:	a805      	add	r0, sp, #20
   15f5a:	2300      	movs	r3, #0
   15f5c:	9301      	str	r3, [sp, #4]
   15f5e:	2364      	movs	r3, #100	; 0x64
   15f60:	9300      	str	r3, [sp, #0]
   15f62:	4613      	mov	r3, r2
   15f64:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   15f68:	214c      	movs	r1, #76	; 0x4c
   15f6a:	6800      	ldr	r0, [r0, #0]
   15f6c:	47a0      	blx	r4
   15f6e:	4603      	mov	r3, r0
        sd.response.length =
   15f70:	938a      	str	r3, [sp, #552]	; 0x228
      LOG_DEBUG("Response Byte");
      LOG_DEBUG("0x%02X", sd.response.data.byte[0]);

      // If there was a bad crc from the payload, manually set the
      // CRC error flag in the command response byte
      if (payload_had_bad_crc)
   15f72:	f89d 3247 	ldrb.w	r3, [sp, #583]	; 0x247
   15f76:	2b00      	cmp	r3, #0
   15f78:	f000 80c0 	beq.w	160fc <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x384>
      {
        sd.response.data.byte[0] |= 0x08;
   15f7c:	f89d 3220 	ldrb.w	r3, [sp, #544]	; 0x220
   15f80:	f043 0308 	orr.w	r3, r3, #8
   15f84:	b2db      	uxtb	r3, r3
   15f86:	f88d 3220 	strb.w	r3, [sp, #544]	; 0x220
   15f8a:	e0b7      	b.n	160fc <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x384>
   15f8c:	00015d79 	.word	0x00015d79
   15f90:	000191ac 	.word	0x000191ac
   15f94:	00018eb0 	.word	0x00018eb0
   15f98:	00018644 	.word	0x00018644
   15f9c:	00018eb8 	.word	0x00018eb8
   15fa0:	0001869c 	.word	0x0001869c
   15fa4:	00018ec0 	.word	0x00018ec0
   15fa8:	000186e8 	.word	0x000186e8
      }
    }
    else
    {
      LOG_ERROR("Read Cmd was not acknowledged properly!");
   15fac:	f240 3309 	movw	r3, #777	; 0x309
   15fb0:	4a65      	ldr	r2, [pc, #404]	; (16148 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x3d0>)
   15fb2:	4966      	ldr	r1, [pc, #408]	; (1614c <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x3d4>)
   15fb4:	4866      	ldr	r0, [pc, #408]	; (16150 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x3d8>)
   15fb6:	f7fe f885 	bl	140c4 <printf>
      LOG_ERROR("Parameter Err: %s", ToBool(sd.response.data.byte[0] & 0x40));
   15fba:	f89d 3220 	ldrb.w	r3, [sp, #544]	; 0x220
   15fbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
   15fc2:	2b00      	cmp	r3, #0
   15fc4:	bf14      	ite	ne
   15fc6:	2301      	movne	r3, #1
   15fc8:	2300      	moveq	r3, #0
   15fca:	b2da      	uxtb	r2, r3
   15fcc:	ab05      	add	r3, sp, #20
   15fce:	4611      	mov	r1, r2
   15fd0:	6818      	ldr	r0, [r3, #0]
   15fd2:	f7ff fe55 	bl	15c80 <Sd::ToBool(bool)>
   15fd6:	4603      	mov	r3, r0
   15fd8:	9300      	str	r3, [sp, #0]
   15fda:	f240 330a 	movw	r3, #778	; 0x30a
   15fde:	4a5a      	ldr	r2, [pc, #360]	; (16148 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x3d0>)
   15fe0:	495c      	ldr	r1, [pc, #368]	; (16154 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x3dc>)
   15fe2:	485d      	ldr	r0, [pc, #372]	; (16158 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x3e0>)
   15fe4:	f7fe f86e 	bl	140c4 <printf>
      LOG_ERROR("Addr Err: %s", ToBool(sd.response.data.byte[0] & 0x20));
   15fe8:	f89d 3220 	ldrb.w	r3, [sp, #544]	; 0x220
   15fec:	f003 0320 	and.w	r3, r3, #32
   15ff0:	2b00      	cmp	r3, #0
   15ff2:	bf14      	ite	ne
   15ff4:	2301      	movne	r3, #1
   15ff6:	2300      	moveq	r3, #0
   15ff8:	b2da      	uxtb	r2, r3
   15ffa:	ab05      	add	r3, sp, #20
   15ffc:	4611      	mov	r1, r2
   15ffe:	6818      	ldr	r0, [r3, #0]
   16000:	f7ff fe3e 	bl	15c80 <Sd::ToBool(bool)>
   16004:	4603      	mov	r3, r0
   16006:	9300      	str	r3, [sp, #0]
   16008:	f240 330b 	movw	r3, #779	; 0x30b
   1600c:	4a4e      	ldr	r2, [pc, #312]	; (16148 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x3d0>)
   1600e:	4953      	ldr	r1, [pc, #332]	; (1615c <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x3e4>)
   16010:	4853      	ldr	r0, [pc, #332]	; (16160 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x3e8>)
   16012:	f7fe f857 	bl	140c4 <printf>
      LOG_ERROR("Erase Seq Err: %s", ToBool(sd.response.data.byte[0] & 0x10));
   16016:	f89d 3220 	ldrb.w	r3, [sp, #544]	; 0x220
   1601a:	f003 0310 	and.w	r3, r3, #16
   1601e:	2b00      	cmp	r3, #0
   16020:	bf14      	ite	ne
   16022:	2301      	movne	r3, #1
   16024:	2300      	moveq	r3, #0
   16026:	b2da      	uxtb	r2, r3
   16028:	ab05      	add	r3, sp, #20
   1602a:	4611      	mov	r1, r2
   1602c:	6818      	ldr	r0, [r3, #0]
   1602e:	f7ff fe27 	bl	15c80 <Sd::ToBool(bool)>
   16032:	4603      	mov	r3, r0
   16034:	9300      	str	r3, [sp, #0]
   16036:	f44f 7343 	mov.w	r3, #780	; 0x30c
   1603a:	4a43      	ldr	r2, [pc, #268]	; (16148 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x3d0>)
   1603c:	4949      	ldr	r1, [pc, #292]	; (16164 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x3ec>)
   1603e:	484a      	ldr	r0, [pc, #296]	; (16168 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x3f0>)
   16040:	f7fe f840 	bl	140c4 <printf>
      LOG_ERROR("Com CRC Err: %s", ToBool(sd.response.data.byte[0] & 0x08));
   16044:	f89d 3220 	ldrb.w	r3, [sp, #544]	; 0x220
   16048:	f003 0308 	and.w	r3, r3, #8
   1604c:	2b00      	cmp	r3, #0
   1604e:	bf14      	ite	ne
   16050:	2301      	movne	r3, #1
   16052:	2300      	moveq	r3, #0
   16054:	b2da      	uxtb	r2, r3
   16056:	ab05      	add	r3, sp, #20
   16058:	4611      	mov	r1, r2
   1605a:	6818      	ldr	r0, [r3, #0]
   1605c:	f7ff fe10 	bl	15c80 <Sd::ToBool(bool)>
   16060:	4603      	mov	r3, r0
   16062:	9300      	str	r3, [sp, #0]
   16064:	f240 330d 	movw	r3, #781	; 0x30d
   16068:	4a37      	ldr	r2, [pc, #220]	; (16148 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x3d0>)
   1606a:	4940      	ldr	r1, [pc, #256]	; (1616c <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x3f4>)
   1606c:	4840      	ldr	r0, [pc, #256]	; (16170 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x3f8>)
   1606e:	f7fe f829 	bl	140c4 <printf>
      LOG_ERROR("Illegal Cmd Err: %s", ToBool(sd.response.data.byte[0] & 0x04));
   16072:	f89d 3220 	ldrb.w	r3, [sp, #544]	; 0x220
   16076:	f003 0304 	and.w	r3, r3, #4
   1607a:	2b00      	cmp	r3, #0
   1607c:	bf14      	ite	ne
   1607e:	2301      	movne	r3, #1
   16080:	2300      	moveq	r3, #0
   16082:	b2da      	uxtb	r2, r3
   16084:	ab05      	add	r3, sp, #20
   16086:	4611      	mov	r1, r2
   16088:	6818      	ldr	r0, [r3, #0]
   1608a:	f7ff fdf9 	bl	15c80 <Sd::ToBool(bool)>
   1608e:	4603      	mov	r3, r0
   16090:	9300      	str	r3, [sp, #0]
   16092:	f240 330e 	movw	r3, #782	; 0x30e
   16096:	4a2c      	ldr	r2, [pc, #176]	; (16148 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x3d0>)
   16098:	4936      	ldr	r1, [pc, #216]	; (16174 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x3fc>)
   1609a:	4837      	ldr	r0, [pc, #220]	; (16178 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x400>)
   1609c:	f7fe f812 	bl	140c4 <printf>
      LOG_ERROR("Erase Reset: %s", ToBool(sd.response.data.byte[0] & 0x02));
   160a0:	f89d 3220 	ldrb.w	r3, [sp, #544]	; 0x220
   160a4:	f003 0302 	and.w	r3, r3, #2
   160a8:	2b00      	cmp	r3, #0
   160aa:	bf14      	ite	ne
   160ac:	2301      	movne	r3, #1
   160ae:	2300      	moveq	r3, #0
   160b0:	b2da      	uxtb	r2, r3
   160b2:	ab05      	add	r3, sp, #20
   160b4:	4611      	mov	r1, r2
   160b6:	6818      	ldr	r0, [r3, #0]
   160b8:	f7ff fde2 	bl	15c80 <Sd::ToBool(bool)>
   160bc:	4603      	mov	r3, r0
   160be:	9300      	str	r3, [sp, #0]
   160c0:	f240 330f 	movw	r3, #783	; 0x30f
   160c4:	4a20      	ldr	r2, [pc, #128]	; (16148 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x3d0>)
   160c6:	492d      	ldr	r1, [pc, #180]	; (1617c <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x404>)
   160c8:	482d      	ldr	r0, [pc, #180]	; (16180 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x408>)
   160ca:	f7fd fffb 	bl	140c4 <printf>
      LOG_ERROR("In Idle: %s", ToBool(sd.response.data.byte[0] & 0x01));
   160ce:	f89d 3220 	ldrb.w	r3, [sp, #544]	; 0x220
   160d2:	f003 0301 	and.w	r3, r3, #1
   160d6:	2b00      	cmp	r3, #0
   160d8:	bf14      	ite	ne
   160da:	2301      	movne	r3, #1
   160dc:	2300      	moveq	r3, #0
   160de:	b2da      	uxtb	r2, r3
   160e0:	ab05      	add	r3, sp, #20
   160e2:	4611      	mov	r1, r2
   160e4:	6818      	ldr	r0, [r3, #0]
   160e6:	f7ff fdcb 	bl	15c80 <Sd::ToBool(bool)>
   160ea:	4603      	mov	r3, r0
   160ec:	9300      	str	r3, [sp, #0]
   160ee:	f44f 7344 	mov.w	r3, #784	; 0x310
   160f2:	4a15      	ldr	r2, [pc, #84]	; (16148 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x3d0>)
   160f4:	4923      	ldr	r1, [pc, #140]	; (16184 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x40c>)
   160f6:	4824      	ldr	r0, [pc, #144]	; (16188 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x410>)
   160f8:	f7fd ffe4 	bl	140c4 <printf>
    LOG_DEBUG("Now waiting for SD Card to exit Idle Mode...");
    do
    {
      // Query the status register
      sd.response.length = SendCmd(Command::kGetStatus, 32,
                                   sd.response.data.byte, 0, KeepAlive::kNo);
   160fc:	ab05      	add	r3, sp, #20
   160fe:	681b      	ldr	r3, [r3, #0]
   16100:	681b      	ldr	r3, [r3, #0]
   16102:	681c      	ldr	r4, [r3, #0]
      sd.response.length = SendCmd(Command::kGetStatus, 32,
   16104:	ab86      	add	r3, sp, #536	; 0x218
   16106:	f103 0208 	add.w	r2, r3, #8
   1610a:	a805      	add	r0, sp, #20
   1610c:	2300      	movs	r3, #0
   1610e:	9301      	str	r3, [sp, #4]
   16110:	2300      	movs	r3, #0
   16112:	9300      	str	r3, [sp, #0]
   16114:	4613      	mov	r3, r2
   16116:	2220      	movs	r2, #32
   16118:	210d      	movs	r1, #13
   1611a:	6800      	ldr	r0, [r0, #0]
   1611c:	47a0      	blx	r4
   1611e:	4603      	mov	r3, r0
   16120:	938a      	str	r3, [sp, #552]	; 0x228
    } while (sd.response.data.byte[0] & 0x01);
   16122:	f89d 3220 	ldrb.w	r3, [sp, #544]	; 0x220
   16126:	f003 0301 	and.w	r3, r3, #1
   1612a:	2b00      	cmp	r3, #0
   1612c:	d000      	beq.n	16130 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x3b8>
    do
   1612e:	e7e5      	b.n	160fc <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x384>
    LOG_DEBUG("SD Card is out of Idle Mode!");

    // Return the status
    LOG_DEBUG("Read Complete! [R1 Response: 0x%02X]", sd.response.data.byte[0]);
    return sd.response.data.byte[0];
   16130:	f89d 4220 	ldrb.w	r4, [sp, #544]	; 0x220
   16134:	462b      	mov	r3, r5
   16136:	4619      	mov	r1, r3
   16138:	4814      	ldr	r0, [pc, #80]	; (1618c <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x414>)
   1613a:	f7fc fd7d 	bl	12c38 <__cyg_profile_func_exit>
   1613e:	4623      	mov	r3, r4
  }
   16140:	4618      	mov	r0, r3
   16142:	f50d 7d13 	add.w	sp, sp, #588	; 0x24c
   16146:	bd30      	pop	{r4, r5, pc}
   16148:	000191ac 	.word	0x000191ac
   1614c:	00018ec8 	.word	0x00018ec8
   16150:	00018730 	.word	0x00018730
   16154:	00018ed0 	.word	0x00018ed0
   16158:	00018794 	.word	0x00018794
   1615c:	00018ed8 	.word	0x00018ed8
   16160:	000187e0 	.word	0x000187e0
   16164:	00018ee0 	.word	0x00018ee0
   16168:	00018828 	.word	0x00018828
   1616c:	00018ee8 	.word	0x00018ee8
   16170:	00018874 	.word	0x00018874
   16174:	00018ef0 	.word	0x00018ef0
   16178:	000188c0 	.word	0x000188c0
   1617c:	00018ef8 	.word	0x00018ef8
   16180:	00018910 	.word	0x00018910
   16184:	00018f00 	.word	0x00018f00
   16188:	0001895c 	.word	0x0001895c
   1618c:	00015d79 	.word	0x00015d79

00016190 <Sd::WriteBlock(unsigned long, unsigned char const*, unsigned long)>:

  // Writes any number of 512-byte blocks to the SD Card
  uint8_t WriteBlock(uint32_t address, const uint8_t * array,
   16190:	b530      	push	{r4, r5, lr}
   16192:	b095      	sub	sp, #84	; 0x54
   16194:	4675      	mov	r5, lr
   16196:	9005      	str	r0, [sp, #20]
   16198:	9104      	str	r1, [sp, #16]
   1619a:	9203      	str	r2, [sp, #12]
   1619c:	9302      	str	r3, [sp, #8]
   1619e:	462b      	mov	r3, r5
   161a0:	4619      	mov	r1, r3
   161a2:	4865      	ldr	r0, [pc, #404]	; (16338 <Sd::WriteBlock(unsigned long, unsigned char const*, unsigned long)+0x1a8>)
   161a4:	f7fc fd34 	bl	12c10 <__cyg_profile_func_enter>
                     uint32_t blocks = 1) override
  {
    // Wait for a previous command to finish
    WaitWhileBusy();
   161a8:	9805      	ldr	r0, [sp, #20]
   161aa:	f7ff fdbd 	bl	15d28 <Sd::WaitWhileBusy()>
    Sd::CardInfo_t sd;

    // Determine appropriate command and start token to send
    Command write_cmd;
    uint8_t write_start_tkn;
    if (blocks > 1)
   161ae:	9b02      	ldr	r3, [sp, #8]
   161b0:	2b01      	cmp	r3, #1
   161b2:	d905      	bls.n	161c0 <Sd::WriteBlock(unsigned long, unsigned char const*, unsigned long)+0x30>
    {
      write_cmd       = Command::kWriteMulti;
   161b4:	2359      	movs	r3, #89	; 0x59
   161b6:	9313      	str	r3, [sp, #76]	; 0x4c
      write_start_tkn = 0xFC;
   161b8:	23fc      	movs	r3, #252	; 0xfc
   161ba:	f88d 304b 	strb.w	r3, [sp, #75]	; 0x4b
   161be:	e004      	b.n	161ca <Sd::WriteBlock(unsigned long, unsigned char const*, unsigned long)+0x3a>
    }
    else
    {
      write_cmd       = Command::kWriteSingle;
   161c0:	2358      	movs	r3, #88	; 0x58
   161c2:	9313      	str	r3, [sp, #76]	; 0x4c
      write_start_tkn = 0xFE;
   161c4:	23fe      	movs	r3, #254	; 0xfe
   161c6:	f88d 304b 	strb.w	r3, [sp, #75]	; 0x4b
    }

    // Send initial write command
    sd.response.length = SendCmd(write_cmd, address, sd.response.data.byte, 100,
                                 KeepAlive::kYes);
   161ca:	9b05      	ldr	r3, [sp, #20]
   161cc:	681b      	ldr	r3, [r3, #0]
   161ce:	681c      	ldr	r4, [r3, #0]
    sd.response.length = SendCmd(write_cmd, address, sd.response.data.byte, 100,
   161d0:	ab06      	add	r3, sp, #24
   161d2:	f103 0208 	add.w	r2, r3, #8
   161d6:	2301      	movs	r3, #1
   161d8:	9301      	str	r3, [sp, #4]
   161da:	2364      	movs	r3, #100	; 0x64
   161dc:	9300      	str	r3, [sp, #0]
   161de:	4613      	mov	r3, r2
   161e0:	9a04      	ldr	r2, [sp, #16]
   161e2:	9913      	ldr	r1, [sp, #76]	; 0x4c
   161e4:	9805      	ldr	r0, [sp, #20]
   161e6:	47a0      	blx	r4
   161e8:	4603      	mov	r3, r0
   161ea:	930a      	str	r3, [sp, #40]	; 0x28
    LOG_DEBUG("Sent Write Cmd");
    LOG_DEBUG("[R1 Response:0x%02X]", sd.response.data.byte[0]);

    // Check if the response was acknowledged properly
    if (sd.response.data.byte[0] == 0x00)
   161ec:	f89d 3020 	ldrb.w	r3, [sp, #32]
   161f0:	2b00      	cmp	r3, #0
   161f2:	f040 8096 	bne.w	16322 <Sd::WriteBlock(unsigned long, unsigned char const*, unsigned long)+0x192>
    {
      // If no errors, proceed write given block(s) to SD Card
      // For each given block
      for (uint16_t current_block_num = 0; current_block_num < blocks;
   161f6:	2300      	movs	r3, #0
   161f8:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
   161fc:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
   16200:	9a02      	ldr	r2, [sp, #8]
   16202:	429a      	cmp	r2, r3
   16204:	d97a      	bls.n	162fc <Sd::WriteBlock(unsigned long, unsigned char const*, unsigned long)+0x16c>
           current_block_num++)
      {
        // Calculate array offset
        uint64_t arr_offset = current_block_num * kBlockSize;
   16206:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
   1620a:	025b      	lsls	r3, r3, #9
   1620c:	ea4f 74e3 	mov.w	r4, r3, asr #31
   16210:	e9cd 340e 	strd	r3, r4, [sp, #56]	; 0x38

        // Send the start token for the current block
        ssp_interface_->Transfer(write_start_tkn);
   16214:	9b05      	ldr	r3, [sp, #20]
   16216:	685a      	ldr	r2, [r3, #4]
   16218:	9b05      	ldr	r3, [sp, #20]
   1621a:	685b      	ldr	r3, [r3, #4]
   1621c:	681b      	ldr	r3, [r3, #0]
   1621e:	3308      	adds	r3, #8
   16220:	681b      	ldr	r3, [r3, #0]
   16222:	f89d 104b 	ldrb.w	r1, [sp, #75]	; 0x4b
   16226:	b289      	uxth	r1, r1
   16228:	4610      	mov	r0, r2
   1622a:	4798      	blx	r3

        // Write all 512-bytes of the given block
        LOG_DEBUG("Writing block #%d", current_block_num);
        for (uint16_t current_byte = 0; current_byte < kBlockSize;
   1622c:	2300      	movs	r3, #0
   1622e:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
   16232:	f8bd 3046 	ldrh.w	r3, [sp, #70]	; 0x46
   16236:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   1623a:	d216      	bcs.n	1626a <Sd::WriteBlock(unsigned long, unsigned char const*, unsigned long)+0xda>
             current_byte++)
        {
          ssp_interface_->Transfer(array[arr_offset + current_byte]);
   1623c:	9b05      	ldr	r3, [sp, #20]
   1623e:	6858      	ldr	r0, [r3, #4]
   16240:	9b05      	ldr	r3, [sp, #20]
   16242:	685b      	ldr	r3, [r3, #4]
   16244:	681b      	ldr	r3, [r3, #0]
   16246:	3308      	adds	r3, #8
   16248:	681b      	ldr	r3, [r3, #0]
   1624a:	990e      	ldr	r1, [sp, #56]	; 0x38
   1624c:	f8bd 2046 	ldrh.w	r2, [sp, #70]	; 0x46
   16250:	440a      	add	r2, r1
   16252:	9903      	ldr	r1, [sp, #12]
   16254:	440a      	add	r2, r1
   16256:	7812      	ldrb	r2, [r2, #0]
   16258:	b292      	uxth	r2, r2
   1625a:	4611      	mov	r1, r2
   1625c:	4798      	blx	r3
        for (uint16_t current_byte = 0; current_byte < kBlockSize;
   1625e:	f8bd 3046 	ldrh.w	r3, [sp, #70]	; 0x46
   16262:	3301      	adds	r3, #1
   16264:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
   16268:	e7e3      	b.n	16232 <Sd::WriteBlock(unsigned long, unsigned char const*, unsigned long)+0xa2>
        }

        // Read the data response token after writing the block
        uint8_t data_response_tkn =
            static_cast<uint8_t>(ssp_interface_->Transfer(0xFF));
   1626a:	9b05      	ldr	r3, [sp, #20]
   1626c:	685a      	ldr	r2, [r3, #4]
   1626e:	9b05      	ldr	r3, [sp, #20]
   16270:	685b      	ldr	r3, [r3, #4]
   16272:	681b      	ldr	r3, [r3, #0]
   16274:	3308      	adds	r3, #8
   16276:	681b      	ldr	r3, [r3, #0]
   16278:	21ff      	movs	r1, #255	; 0xff
   1627a:	4610      	mov	r0, r2
   1627c:	4798      	blx	r3
   1627e:	4603      	mov	r3, r0
   16280:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
                  ToBool(data_response_tkn & 0x0B));
        LOG_DEBUG("Data Rejected (write err)?: %s",
                  ToBool(data_response_tkn & 0x0D));

        // If writing multiple blocks and the previous block was rejected
        if (blocks > 1 && !(data_response_tkn & 0x05))
   16284:	9b02      	ldr	r3, [sp, #8]
   16286:	2b01      	cmp	r3, #1
   16288:	d92f      	bls.n	162ea <Sd::WriteBlock(unsigned long, unsigned char const*, unsigned long)+0x15a>
   1628a:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
   1628e:	f003 0305 	and.w	r3, r3, #5
   16292:	2b00      	cmp	r3, #0
   16294:	d129      	bne.n	162ea <Sd::WriteBlock(unsigned long, unsigned char const*, unsigned long)+0x15a>
        {
          // Send an immediate stop (CMD12)
          sd.response.length =
              SendCmd(Command::kStopTrans, 0xFFFFFFFF, sd.response.data.byte,
                      100, KeepAlive::kYes);
   16296:	9b05      	ldr	r3, [sp, #20]
   16298:	681b      	ldr	r3, [r3, #0]
   1629a:	681c      	ldr	r4, [r3, #0]
              SendCmd(Command::kStopTrans, 0xFFFFFFFF, sd.response.data.byte,
   1629c:	ab06      	add	r3, sp, #24
   1629e:	f103 0208 	add.w	r2, r3, #8
   162a2:	2301      	movs	r3, #1
   162a4:	9301      	str	r3, [sp, #4]
   162a6:	2364      	movs	r3, #100	; 0x64
   162a8:	9300      	str	r3, [sp, #0]
   162aa:	4613      	mov	r3, r2
   162ac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   162b0:	214c      	movs	r1, #76	; 0x4c
   162b2:	9805      	ldr	r0, [sp, #20]
   162b4:	47a0      	blx	r4
   162b6:	4603      	mov	r3, r0
          sd.response.length =
   162b8:	930a      	str	r3, [sp, #40]	; 0x28
          LOG_DEBUG("Stopped Transmission due to rejection...");
          LOG_DEBUG("[R1 Response: 0x%02X]", sd.response.data.byte[0]);

          // In the case of a write error, ask for the reason why
          if (data_response_tkn & 0x0D)
   162ba:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
   162be:	f003 030d 	and.w	r3, r3, #13
   162c2:	2b00      	cmp	r3, #0
   162c4:	d011      	beq.n	162ea <Sd::WriteBlock(unsigned long, unsigned char const*, unsigned long)+0x15a>
          {
            sd.response.length =
                SendCmd(Command::kGetStatus, 0xFFFFFFFF, sd.response.data.byte,
                        100, KeepAlive::kYes);
   162c6:	9b05      	ldr	r3, [sp, #20]
   162c8:	681b      	ldr	r3, [r3, #0]
   162ca:	681c      	ldr	r4, [r3, #0]
                SendCmd(Command::kGetStatus, 0xFFFFFFFF, sd.response.data.byte,
   162cc:	ab06      	add	r3, sp, #24
   162ce:	f103 0208 	add.w	r2, r3, #8
   162d2:	2301      	movs	r3, #1
   162d4:	9301      	str	r3, [sp, #4]
   162d6:	2364      	movs	r3, #100	; 0x64
   162d8:	9300      	str	r3, [sp, #0]
   162da:	4613      	mov	r3, r2
   162dc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   162e0:	210d      	movs	r1, #13
   162e2:	9805      	ldr	r0, [sp, #20]
   162e4:	47a0      	blx	r4
   162e6:	4603      	mov	r3, r0
            sd.response.length =
   162e8:	930a      	str	r3, [sp, #40]	; 0x28
                "Checking Status Register to see cause of Write Error...");
            LOG_DEBUG("[R2 Response: 0x%04" PRIX32 "]",
                      sd.response.data.dWord.lo);
          }
        }
        WaitWhileBusy();
   162ea:	9805      	ldr	r0, [sp, #20]
   162ec:	f7ff fd1c 	bl	15d28 <Sd::WaitWhileBusy()>
      for (uint16_t current_block_num = 0; current_block_num < blocks;
   162f0:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
   162f4:	3301      	adds	r3, #1
   162f6:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
   162fa:	e77f      	b.n	161fc <Sd::WriteBlock(unsigned long, unsigned char const*, unsigned long)+0x6c>
      }

      if (blocks > 1)
   162fc:	9b02      	ldr	r3, [sp, #8]
   162fe:	2b01      	cmp	r3, #1
   16300:	d90f      	bls.n	16322 <Sd::WriteBlock(unsigned long, unsigned char const*, unsigned long)+0x192>
      {
        constexpr uint8_t kStopToken = 0xFD;
   16302:	23fd      	movs	r3, #253	; 0xfd
   16304:	f88d 3036 	strb.w	r3, [sp, #54]	; 0x36
        ssp_interface_->Transfer(kStopToken);
   16308:	9b05      	ldr	r3, [sp, #20]
   1630a:	685a      	ldr	r2, [r3, #4]
   1630c:	9b05      	ldr	r3, [sp, #20]
   1630e:	685b      	ldr	r3, [r3, #4]
   16310:	681b      	ldr	r3, [r3, #0]
   16312:	3308      	adds	r3, #8
   16314:	681b      	ldr	r3, [r3, #0]
   16316:	21fd      	movs	r1, #253	; 0xfd
   16318:	4610      	mov	r0, r2
   1631a:	4798      	blx	r3

        // Wait for the card's programming to complete before
        // reselecting it (i.e. to prevent corruption)
        WaitWhileBusy();
   1631c:	9805      	ldr	r0, [sp, #20]
   1631e:	f7ff fd03 	bl	15d28 <Sd::WaitWhileBusy()>
      LOG_DEBUG("Illegal Cmd Err: %s", ToBool(sd.response.data.byte[0] & 0x04));
      LOG_DEBUG("Erase Reset: %s", ToBool(sd.response.data.byte[0] & 0x02));
      LOG_DEBUG("In Idle: %s", ToBool(sd.response.data.byte[0] & 0x01));
    }

    return sd.response.data.byte[0];
   16322:	f89d 4020 	ldrb.w	r4, [sp, #32]
   16326:	462b      	mov	r3, r5
   16328:	4619      	mov	r1, r3
   1632a:	4803      	ldr	r0, [pc, #12]	; (16338 <Sd::WriteBlock(unsigned long, unsigned char const*, unsigned long)+0x1a8>)
   1632c:	f7fc fc84 	bl	12c38 <__cyg_profile_func_exit>
   16330:	4623      	mov	r3, r4
  }
   16332:	4618      	mov	r0, r3
   16334:	b015      	add	sp, #84	; 0x54
   16336:	bd30      	pop	{r4, r5, pc}
   16338:	00016191 	.word	0x00016191

0001633c <Sd::DeleteBlock(unsigned long, unsigned long)>:

  // Deletes any number of blocks (inclusively) within a range of address.
  uint8_t DeleteBlock(uint32_t start, uint32_t end) override
   1633c:	b530      	push	{r4, r5, lr}
   1633e:	b08f      	sub	sp, #60	; 0x3c
   16340:	4675      	mov	r5, lr
   16342:	9005      	str	r0, [sp, #20]
   16344:	9104      	str	r1, [sp, #16]
   16346:	9203      	str	r2, [sp, #12]
   16348:	462b      	mov	r3, r5
   1634a:	4619      	mov	r1, r3
   1634c:	483d      	ldr	r0, [pc, #244]	; (16444 <Sd::DeleteBlock(unsigned long, unsigned long)+0x108>)
   1634e:	f7fc fc5f 	bl	12c10 <__cyg_profile_func_enter>
  {
    // Wait for a previous command to finish
    WaitWhileBusy();
   16352:	9805      	ldr	r0, [sp, #20]
   16354:	f7ff fce8 	bl	15d28 <Sd::WaitWhileBusy()>

    // Create a temporary storage location to store sd command responses
    Sd::CardInfo_t sd;
    bool delete_failed = false;
   16358:	2300      	movs	r3, #0
   1635a:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37

    // Set the delete start address
    LOG_DEBUG("Setting Delete Start Address...");
    sd.response.length = SendCmd(Command::kDelFrom, start,
                                 sd.response.data.byte, 100, KeepAlive::kYes);
   1635e:	9b05      	ldr	r3, [sp, #20]
   16360:	681b      	ldr	r3, [r3, #0]
   16362:	681c      	ldr	r4, [r3, #0]
    sd.response.length = SendCmd(Command::kDelFrom, start,
   16364:	ab06      	add	r3, sp, #24
   16366:	f103 0208 	add.w	r2, r3, #8
   1636a:	2301      	movs	r3, #1
   1636c:	9301      	str	r3, [sp, #4]
   1636e:	2364      	movs	r3, #100	; 0x64
   16370:	9300      	str	r3, [sp, #0]
   16372:	4613      	mov	r3, r2
   16374:	9a04      	ldr	r2, [sp, #16]
   16376:	2160      	movs	r1, #96	; 0x60
   16378:	9805      	ldr	r0, [sp, #20]
   1637a:	47a0      	blx	r4
   1637c:	4603      	mov	r3, r0
   1637e:	930a      	str	r3, [sp, #40]	; 0x28

    // Wait while the writing the start address
    WaitWhileBusy();
   16380:	9805      	ldr	r0, [sp, #20]
   16382:	f7ff fcd1 	bl	15d28 <Sd::WaitWhileBusy()>

    // Force return if an error occurred
    if (sd.response.data.byte[0] != 0x00)
   16386:	f89d 3020 	ldrb.w	r3, [sp, #32]
   1638a:	2b00      	cmp	r3, #0
   1638c:	d009      	beq.n	163a2 <Sd::DeleteBlock(unsigned long, unsigned long)+0x66>
    {
      LOG_ERROR("Failed to set Start Address!");
   1638e:	f44f 736a 	mov.w	r3, #936	; 0x3a8
   16392:	4a2d      	ldr	r2, [pc, #180]	; (16448 <Sd::DeleteBlock(unsigned long, unsigned long)+0x10c>)
   16394:	492d      	ldr	r1, [pc, #180]	; (1644c <Sd::DeleteBlock(unsigned long, unsigned long)+0x110>)
   16396:	482e      	ldr	r0, [pc, #184]	; (16450 <Sd::DeleteBlock(unsigned long, unsigned long)+0x114>)
   16398:	f7fd fe94 	bl	140c4 <printf>
      delete_failed = true;
   1639c:	2301      	movs	r3, #1
   1639e:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
    }

    // Set the delete end address
    if (!delete_failed)
   163a2:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
   163a6:	f083 0301 	eor.w	r3, r3, #1
   163aa:	b2db      	uxtb	r3, r3
   163ac:	2b00      	cmp	r3, #0
   163ae:	d010      	beq.n	163d2 <Sd::DeleteBlock(unsigned long, unsigned long)+0x96>
    {
      LOG_DEBUG("Setting Delete End Address...");
      sd.response.length = SendCmd(Command::kDelTo, end, sd.response.data.byte,
                                   100, KeepAlive::kYes);
   163b0:	9b05      	ldr	r3, [sp, #20]
   163b2:	681b      	ldr	r3, [r3, #0]
   163b4:	681c      	ldr	r4, [r3, #0]
      sd.response.length = SendCmd(Command::kDelTo, end, sd.response.data.byte,
   163b6:	ab06      	add	r3, sp, #24
   163b8:	f103 0208 	add.w	r2, r3, #8
   163bc:	2301      	movs	r3, #1
   163be:	9301      	str	r3, [sp, #4]
   163c0:	2364      	movs	r3, #100	; 0x64
   163c2:	9300      	str	r3, [sp, #0]
   163c4:	4613      	mov	r3, r2
   163c6:	9a03      	ldr	r2, [sp, #12]
   163c8:	2161      	movs	r1, #97	; 0x61
   163ca:	9805      	ldr	r0, [sp, #20]
   163cc:	47a0      	blx	r4
   163ce:	4603      	mov	r3, r0
   163d0:	930a      	str	r3, [sp, #40]	; 0x28
    }

    // Wait while the writing the end address
    WaitWhileBusy();
   163d2:	9805      	ldr	r0, [sp, #20]
   163d4:	f7ff fca8 	bl	15d28 <Sd::WaitWhileBusy()>

    // Force return if an error occurred
    if (sd.response.data.byte[0] != 0x00)
   163d8:	f89d 3020 	ldrb.w	r3, [sp, #32]
   163dc:	2b00      	cmp	r3, #0
   163de:	d009      	beq.n	163f4 <Sd::DeleteBlock(unsigned long, unsigned long)+0xb8>
    {
      LOG_ERROR("Failed to set End Address!");
   163e0:	f240 33ba 	movw	r3, #954	; 0x3ba
   163e4:	4a18      	ldr	r2, [pc, #96]	; (16448 <Sd::DeleteBlock(unsigned long, unsigned long)+0x10c>)
   163e6:	491b      	ldr	r1, [pc, #108]	; (16454 <Sd::DeleteBlock(unsigned long, unsigned long)+0x118>)
   163e8:	481b      	ldr	r0, [pc, #108]	; (16458 <Sd::DeleteBlock(unsigned long, unsigned long)+0x11c>)
   163ea:	f7fd fe6b 	bl	140c4 <printf>
      delete_failed = true;
   163ee:	2301      	movs	r3, #1
   163f0:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
    }

    // Finally, attempt a delete
    if (!delete_failed)
   163f4:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
   163f8:	f083 0301 	eor.w	r3, r3, #1
   163fc:	b2db      	uxtb	r3, r3
   163fe:	2b00      	cmp	r3, #0
   16400:	d014      	beq.n	1642c <Sd::DeleteBlock(unsigned long, unsigned long)+0xf0>
    {
      // Issue the delete command to delete from our from:to range
      LOG_DEBUG("Issuing Delete Command...");
      sd.response.length = SendCmd(Command::kDel, 0xFFFFFFFF,
                                   sd.response.data.byte, 100, KeepAlive::kYes);
   16402:	9b05      	ldr	r3, [sp, #20]
   16404:	681b      	ldr	r3, [r3, #0]
   16406:	681c      	ldr	r4, [r3, #0]
      sd.response.length = SendCmd(Command::kDel, 0xFFFFFFFF,
   16408:	ab06      	add	r3, sp, #24
   1640a:	f103 0208 	add.w	r2, r3, #8
   1640e:	2301      	movs	r3, #1
   16410:	9301      	str	r3, [sp, #4]
   16412:	2364      	movs	r3, #100	; 0x64
   16414:	9300      	str	r3, [sp, #0]
   16416:	4613      	mov	r3, r2
   16418:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1641c:	2166      	movs	r1, #102	; 0x66
   1641e:	9805      	ldr	r0, [sp, #20]
   16420:	47a0      	blx	r4
   16422:	4603      	mov	r3, r0
   16424:	930a      	str	r3, [sp, #40]	; 0x28

      // Wait while the deletion occurs
      WaitWhileBusy();
   16426:	9805      	ldr	r0, [sp, #20]
   16428:	f7ff fc7e 	bl	15d28 <Sd::WaitWhileBusy()>
      LOG_DEBUG("[R1 Response: 0x%02X]", sd.response.data.byte[0]);
      LOG_DEBUG("Deletion Complete...");
    }

    // Return status
    return sd.response.data.byte[0];
   1642c:	f89d 4020 	ldrb.w	r4, [sp, #32]
   16430:	462b      	mov	r3, r5
   16432:	4619      	mov	r1, r3
   16434:	4803      	ldr	r0, [pc, #12]	; (16444 <Sd::DeleteBlock(unsigned long, unsigned long)+0x108>)
   16436:	f7fc fbff 	bl	12c38 <__cyg_profile_func_exit>
   1643a:	4623      	mov	r3, r4
  }
   1643c:	4618      	mov	r0, r3
   1643e:	b00f      	add	sp, #60	; 0x3c
   16440:	bd30      	pop	{r4, r5, pc}
   16442:	bf00      	nop
   16444:	0001633d 	.word	0x0001633d
   16448:	000191e8 	.word	0x000191e8
   1644c:	00018f08 	.word	0x00018f08
   16450:	000189a4 	.word	0x000189a4
   16454:	00018f10 	.word	0x00018f10
   16458:	000189fc 	.word	0x000189fc

0001645c <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)>:

  // Send a command
  uint32_t SendCmd(Command sdc, uint32_t arg, uint8_t response_buffer[],
   1645c:	e92d 49f0 	stmdb	sp!, {r4, r5, r6, r7, r8, fp, lr}
   16460:	b08f      	sub	sp, #60	; 0x3c
   16462:	46f0      	mov	r8, lr
   16464:	9003      	str	r0, [sp, #12]
   16466:	9102      	str	r1, [sp, #8]
   16468:	9201      	str	r2, [sp, #4]
   1646a:	9300      	str	r3, [sp, #0]
   1646c:	4643      	mov	r3, r8
   1646e:	4619      	mov	r1, r3
   16470:	4840      	ldr	r0, [pc, #256]	; (16574 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x118>)
   16472:	f7fc fbcd 	bl	12c10 <__cyg_profile_func_enter>
                   uint32_t delay, KeepAlive keep_alive) override
  {
    ResponseType res_type;
    uint8_t res_len    = 0;
   16476:	2300      	movs	r3, #0
   16478:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
    uint8_t crc        = 0;
   1647c:	2300      	movs	r3, #0
   1647e:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
    uint8_t tries      = 0;
   16482:	2300      	movs	r3, #0
   16484:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
    uint8_t bit_offset = 0;  // determines the distance of the response's
   16488:	2300      	movs	r3, #0
   1648a:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
                             // 0 bit from the MSB place
    uint8_t temp_byte = 0;
   1648e:	2300      	movs	r3, #0
   16490:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f

    // Determine the response type of the set command
    switch (sdc)
   16494:	9b02      	ldr	r3, [sp, #8]
   16496:	2b58      	cmp	r3, #88	; 0x58
   16498:	d052      	beq.n	16540 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0xe4>
   1649a:	2b58      	cmp	r3, #88	; 0x58
   1649c:	dc16      	bgt.n	164cc <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x70>
   1649e:	2b48      	cmp	r3, #72	; 0x48
   164a0:	d033      	beq.n	1650a <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0xae>
   164a2:	2b48      	cmp	r3, #72	; 0x48
   164a4:	dc06      	bgt.n	164b4 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x58>
   164a6:	2b40      	cmp	r3, #64	; 0x40
   164a8:	d029      	beq.n	164fe <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0xa2>
   164aa:	2b41      	cmp	r3, #65	; 0x41
   164ac:	d02a      	beq.n	16504 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0xa8>
   164ae:	2b0d      	cmp	r3, #13
   164b0:	d031      	beq.n	16516 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0xba>
   164b2:	e054      	b.n	1655e <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x102>
   164b4:	2b50      	cmp	r3, #80	; 0x50
   164b6:	d03a      	beq.n	1652e <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0xd2>
   164b8:	2b50      	cmp	r3, #80	; 0x50
   164ba:	dc02      	bgt.n	164c2 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x66>
   164bc:	2b4c      	cmp	r3, #76	; 0x4c
   164be:	d027      	beq.n	16510 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0xb4>
   164c0:	e04d      	b.n	1655e <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x102>
   164c2:	2b51      	cmp	r3, #81	; 0x51
   164c4:	d036      	beq.n	16534 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0xd8>
   164c6:	2b52      	cmp	r3, #82	; 0x52
   164c8:	d037      	beq.n	1653a <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0xde>
   164ca:	e048      	b.n	1655e <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x102>
   164cc:	2b66      	cmp	r3, #102	; 0x66
   164ce:	d043      	beq.n	16558 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0xfc>
   164d0:	2b66      	cmp	r3, #102	; 0x66
   164d2:	dc06      	bgt.n	164e2 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x86>
   164d4:	2b60      	cmp	r3, #96	; 0x60
   164d6:	d039      	beq.n	1654c <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0xf0>
   164d8:	2b61      	cmp	r3, #97	; 0x61
   164da:	d03a      	beq.n	16552 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0xf6>
   164dc:	2b59      	cmp	r3, #89	; 0x59
   164de:	d032      	beq.n	16546 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0xea>
   164e0:	e03d      	b.n	1655e <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x102>
   164e2:	2b77      	cmp	r3, #119	; 0x77
   164e4:	d01a      	beq.n	1651c <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0xc0>
   164e6:	2b77      	cmp	r3, #119	; 0x77
   164e8:	dc02      	bgt.n	164f0 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x94>
   164ea:	2b69      	cmp	r3, #105	; 0x69
   164ec:	d019      	beq.n	16522 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0xc6>
   164ee:	e036      	b.n	1655e <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x102>
   164f0:	2b7a      	cmp	r3, #122	; 0x7a
   164f2:	d019      	beq.n	16528 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0xcc>
   164f4:	2bff      	cmp	r3, #255	; 0xff
   164f6:	d132      	bne.n	1655e <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x102>
    {
      case Command::kGarbage: res_type = ResponseType::kR1; break;
   164f8:	2300      	movs	r3, #0
   164fa:	930d      	str	r3, [sp, #52]	; 0x34
   164fc:	e042      	b.n	16584 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x128>
      case Command::kReset: res_type = ResponseType::kR1; break;
   164fe:	2300      	movs	r3, #0
   16500:	930d      	str	r3, [sp, #52]	; 0x34
   16502:	e03f      	b.n	16584 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x128>
      case Command::kInit: res_type = ResponseType::kR1; break;
   16504:	2300      	movs	r3, #0
   16506:	930d      	str	r3, [sp, #52]	; 0x34
   16508:	e03c      	b.n	16584 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x128>
      case Command::kGetOp: res_type = ResponseType::kR7; break;
   1650a:	2307      	movs	r3, #7
   1650c:	930d      	str	r3, [sp, #52]	; 0x34
   1650e:	e039      	b.n	16584 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x128>
      case Command::kStopTrans: res_type = ResponseType::kR1; break;
   16510:	2300      	movs	r3, #0
   16512:	930d      	str	r3, [sp, #52]	; 0x34
   16514:	e036      	b.n	16584 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x128>
      case Command::kGetStatus: res_type = ResponseType::kR2; break;
   16516:	2302      	movs	r3, #2
   16518:	930d      	str	r3, [sp, #52]	; 0x34
   1651a:	e033      	b.n	16584 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x128>
      case Command::kAcBegin: res_type = ResponseType::kR1; break;
   1651c:	2300      	movs	r3, #0
   1651e:	930d      	str	r3, [sp, #52]	; 0x34
   16520:	e030      	b.n	16584 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x128>
      case Command::kAcInit: res_type = ResponseType::kR1; break;
   16522:	2300      	movs	r3, #0
   16524:	930d      	str	r3, [sp, #52]	; 0x34
   16526:	e02d      	b.n	16584 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x128>
      case Command::kGetOcr: res_type = ResponseType::kR3; break;
   16528:	2303      	movs	r3, #3
   1652a:	930d      	str	r3, [sp, #52]	; 0x34
   1652c:	e02a      	b.n	16584 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x128>
      case Command::kChgBlkLen: res_type = ResponseType::kR1; break;
   1652e:	2300      	movs	r3, #0
   16530:	930d      	str	r3, [sp, #52]	; 0x34
   16532:	e027      	b.n	16584 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x128>
      case Command::kReadSingle: res_type = ResponseType::kR1; break;
   16534:	2300      	movs	r3, #0
   16536:	930d      	str	r3, [sp, #52]	; 0x34
   16538:	e024      	b.n	16584 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x128>
      case Command::kReadMulti: res_type = ResponseType::kR1; break;
   1653a:	2300      	movs	r3, #0
   1653c:	930d      	str	r3, [sp, #52]	; 0x34
   1653e:	e021      	b.n	16584 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x128>
      case Command::kWriteSingle: res_type = ResponseType::kR1; break;
   16540:	2300      	movs	r3, #0
   16542:	930d      	str	r3, [sp, #52]	; 0x34
   16544:	e01e      	b.n	16584 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x128>
      case Command::kWriteMulti: res_type = ResponseType::kR1; break;
   16546:	2300      	movs	r3, #0
   16548:	930d      	str	r3, [sp, #52]	; 0x34
   1654a:	e01b      	b.n	16584 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x128>
      case Command::kDelFrom: res_type = ResponseType::kR1; break;
   1654c:	2300      	movs	r3, #0
   1654e:	930d      	str	r3, [sp, #52]	; 0x34
   16550:	e018      	b.n	16584 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x128>
      case Command::kDelTo: res_type = ResponseType::kR1; break;
   16552:	2300      	movs	r3, #0
   16554:	930d      	str	r3, [sp, #52]	; 0x34
   16556:	e015      	b.n	16584 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x128>
      case Command::kDel: res_type = ResponseType::kR1b; break;
   16558:	2301      	movs	r3, #1
   1655a:	930d      	str	r3, [sp, #52]	; 0x34
   1655c:	e012      	b.n	16584 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x128>
      default:
        LOG_ERROR("Unknown response type. Aborting!");
   1655e:	f240 33f3 	movw	r3, #1011	; 0x3f3
   16562:	4a05      	ldr	r2, [pc, #20]	; (16578 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x11c>)
   16564:	4905      	ldr	r1, [pc, #20]	; (1657c <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x120>)
   16566:	4806      	ldr	r0, [pc, #24]	; (16580 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x124>)
   16568:	f7fd fdac 	bl	140c4 <printf>
        return -1;
   1656c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   16570:	e1b1      	b.n	168d6 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x47a>
   16572:	bf00      	nop
   16574:	0001645d 	.word	0x0001645d
   16578:	0001921c 	.word	0x0001921c
   1657c:	00018f18 	.word	0x00018f18
   16580:	00018a50 	.word	0x00018a50
    // algorithm
    uint8_t msg[5] = { static_cast<uint8_t>(sdc),
                       static_cast<uint8_t>(arg >> 24),
                       static_cast<uint8_t>(arg >> 16),
                       static_cast<uint8_t>(arg >> 8),
                       static_cast<uint8_t>(arg >> 0) };
   16584:	9b02      	ldr	r3, [sp, #8]
   16586:	b2db      	uxtb	r3, r3
   16588:	f88d 3010 	strb.w	r3, [sp, #16]
                       static_cast<uint8_t>(arg >> 24),
   1658c:	9b01      	ldr	r3, [sp, #4]
   1658e:	0e1b      	lsrs	r3, r3, #24
                       static_cast<uint8_t>(arg >> 0) };
   16590:	b2db      	uxtb	r3, r3
   16592:	f88d 3011 	strb.w	r3, [sp, #17]
                       static_cast<uint8_t>(arg >> 16),
   16596:	9b01      	ldr	r3, [sp, #4]
   16598:	0c1b      	lsrs	r3, r3, #16
                       static_cast<uint8_t>(arg >> 0) };
   1659a:	b2db      	uxtb	r3, r3
   1659c:	f88d 3012 	strb.w	r3, [sp, #18]
                       static_cast<uint8_t>(arg >> 8),
   165a0:	9b01      	ldr	r3, [sp, #4]
   165a2:	0a1b      	lsrs	r3, r3, #8
                       static_cast<uint8_t>(arg >> 0) };
   165a4:	b2db      	uxtb	r3, r3
   165a6:	f88d 3013 	strb.w	r3, [sp, #19]
   165aa:	9b01      	ldr	r3, [sp, #4]
   165ac:	b2db      	uxtb	r3, r3
   165ae:	f88d 3014 	strb.w	r3, [sp, #20]

    crc = GetCrc7(msg, sizeof(msg));
   165b2:	9b03      	ldr	r3, [sp, #12]
   165b4:	681b      	ldr	r3, [r3, #0]
   165b6:	331c      	adds	r3, #28
   165b8:	681b      	ldr	r3, [r3, #0]
   165ba:	a904      	add	r1, sp, #16
   165bc:	2205      	movs	r2, #5
   165be:	9803      	ldr	r0, [sp, #12]
   165c0:	4798      	blx	r3
   165c2:	4603      	mov	r3, r0
   165c4:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
    if (sdc == Command::kGarbage)
   165c8:	9b02      	ldr	r3, [sp, #8]
   165ca:	2bff      	cmp	r3, #255	; 0xff
   165cc:	d102      	bne.n	165d4 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x178>
    {
      crc = 0xFF;
   165ce:	23ff      	movs	r3, #255	; 0xff
   165d0:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
    }

    // Select the SD Card
    chip_select_->SetLow();
   165d4:	9b03      	ldr	r3, [sp, #12]
   165d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   165d8:	9b03      	ldr	r3, [sp, #12]
   165da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   165dc:	681b      	ldr	r3, [r3, #0]
   165de:	3310      	adds	r3, #16
   165e0:	681b      	ldr	r3, [r3, #0]
   165e2:	4610      	mov	r0, r2
   165e4:	4798      	blx	r3
    chip_select_external_->SetLow();
   165e6:	9b03      	ldr	r3, [sp, #12]
   165e8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
   165ea:	9b03      	ldr	r3, [sp, #12]
   165ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   165ee:	681b      	ldr	r3, [r3, #0]
   165f0:	3310      	adds	r3, #16
   165f2:	681b      	ldr	r3, [r3, #0]
   165f4:	4610      	mov	r0, r2
   165f6:	4798      	blx	r3

    // If desired, wait a bit before talking
    if (delay > 0)
   165f8:	9b16      	ldr	r3, [sp, #88]	; 0x58
   165fa:	2b00      	cmp	r3, #0
   165fc:	d007      	beq.n	1660e <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x1b2>
    {
      Delay(delay);
   165fe:	9b16      	ldr	r3, [sp, #88]	; 0x58
   16600:	461a      	mov	r2, r3
   16602:	f04f 0300 	mov.w	r3, #0
   16606:	4610      	mov	r0, r2
   16608:	4619      	mov	r1, r3
   1660a:	f7fd fe55 	bl	142b8 <Delay(unsigned long long)>
    }

    // Send the desired command frame to the SD card board
    // Begin by transfering the command byte
    ssp_interface_->Transfer(static_cast<uint16_t>(sdc));
   1660e:	9b03      	ldr	r3, [sp, #12]
   16610:	685a      	ldr	r2, [r3, #4]
   16612:	9b03      	ldr	r3, [sp, #12]
   16614:	685b      	ldr	r3, [r3, #4]
   16616:	681b      	ldr	r3, [r3, #0]
   16618:	3308      	adds	r3, #8
   1661a:	681b      	ldr	r3, [r3, #0]
   1661c:	9902      	ldr	r1, [sp, #8]
   1661e:	b289      	uxth	r1, r1
   16620:	4610      	mov	r0, r2
   16622:	4798      	blx	r3
    // Send arg byte [31:24]
    ssp_interface_->Transfer(static_cast<uint16_t>(arg >> 24) & 0xFF);
   16624:	9b03      	ldr	r3, [sp, #12]
   16626:	6858      	ldr	r0, [r3, #4]
   16628:	9b03      	ldr	r3, [sp, #12]
   1662a:	685b      	ldr	r3, [r3, #4]
   1662c:	681b      	ldr	r3, [r3, #0]
   1662e:	3308      	adds	r3, #8
   16630:	681b      	ldr	r3, [r3, #0]
   16632:	9a01      	ldr	r2, [sp, #4]
   16634:	0e12      	lsrs	r2, r2, #24
   16636:	b292      	uxth	r2, r2
   16638:	b2d2      	uxtb	r2, r2
   1663a:	b292      	uxth	r2, r2
   1663c:	4611      	mov	r1, r2
   1663e:	4798      	blx	r3
    // Send arg byte [23:16]
    ssp_interface_->Transfer(static_cast<uint16_t>(arg >> 16) & 0xFF);
   16640:	9b03      	ldr	r3, [sp, #12]
   16642:	6858      	ldr	r0, [r3, #4]
   16644:	9b03      	ldr	r3, [sp, #12]
   16646:	685b      	ldr	r3, [r3, #4]
   16648:	681b      	ldr	r3, [r3, #0]
   1664a:	3308      	adds	r3, #8
   1664c:	681b      	ldr	r3, [r3, #0]
   1664e:	9a01      	ldr	r2, [sp, #4]
   16650:	0c12      	lsrs	r2, r2, #16
   16652:	b292      	uxth	r2, r2
   16654:	b2d2      	uxtb	r2, r2
   16656:	b292      	uxth	r2, r2
   16658:	4611      	mov	r1, r2
   1665a:	4798      	blx	r3
    // Send arg byte [15:8]
    ssp_interface_->Transfer(static_cast<uint16_t>(arg >> 8) & 0xFF);
   1665c:	9b03      	ldr	r3, [sp, #12]
   1665e:	6858      	ldr	r0, [r3, #4]
   16660:	9b03      	ldr	r3, [sp, #12]
   16662:	685b      	ldr	r3, [r3, #4]
   16664:	681b      	ldr	r3, [r3, #0]
   16666:	3308      	adds	r3, #8
   16668:	681b      	ldr	r3, [r3, #0]
   1666a:	9a01      	ldr	r2, [sp, #4]
   1666c:	0a12      	lsrs	r2, r2, #8
   1666e:	b292      	uxth	r2, r2
   16670:	b2d2      	uxtb	r2, r2
   16672:	b292      	uxth	r2, r2
   16674:	4611      	mov	r1, r2
   16676:	4798      	blx	r3
    // Send arg byte [7:0]
    ssp_interface_->Transfer(static_cast<uint16_t>(arg >> 0) & 0xFF);
   16678:	9b03      	ldr	r3, [sp, #12]
   1667a:	685a      	ldr	r2, [r3, #4]
   1667c:	9b03      	ldr	r3, [sp, #12]
   1667e:	685b      	ldr	r3, [r3, #4]
   16680:	681b      	ldr	r3, [r3, #0]
   16682:	3308      	adds	r3, #8
   16684:	681b      	ldr	r3, [r3, #0]
   16686:	9901      	ldr	r1, [sp, #4]
   16688:	b289      	uxth	r1, r1
   1668a:	b2c9      	uxtb	r1, r1
   1668c:	b289      	uxth	r1, r1
   1668e:	4610      	mov	r0, r2
   16690:	4798      	blx	r3
    // Send 7-bit CRC and LSB stop addr (as b1)
    ssp_interface_->Transfer(static_cast<uint16_t>(crc << 1) | 0x01);
   16692:	9b03      	ldr	r3, [sp, #12]
   16694:	6858      	ldr	r0, [r3, #4]
   16696:	9b03      	ldr	r3, [sp, #12]
   16698:	685b      	ldr	r3, [r3, #4]
   1669a:	681b      	ldr	r3, [r3, #0]
   1669c:	3308      	adds	r3, #8
   1669e:	681b      	ldr	r3, [r3, #0]
   166a0:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
   166a4:	b292      	uxth	r2, r2
   166a6:	0052      	lsls	r2, r2, #1
   166a8:	b292      	uxth	r2, r2
   166aa:	f042 0201 	orr.w	r2, r2, #1
   166ae:	b292      	uxth	r2, r2
   166b0:	4611      	mov	r1, r2
   166b2:	4798      	blx	r3

    // Write garbage while waiting for a response
    // Send at least 1 byte of garbage before checking for a response
    temp_byte = static_cast<uint8_t>(ssp_interface_->Transfer(0xFF));
   166b4:	9b03      	ldr	r3, [sp, #12]
   166b6:	685a      	ldr	r2, [r3, #4]
   166b8:	9b03      	ldr	r3, [sp, #12]
   166ba:	685b      	ldr	r3, [r3, #4]
   166bc:	681b      	ldr	r3, [r3, #0]
   166be:	3308      	adds	r3, #8
   166c0:	681b      	ldr	r3, [r3, #0]
   166c2:	21ff      	movs	r1, #255	; 0xff
   166c4:	4610      	mov	r0, r2
   166c6:	4798      	blx	r3
   166c8:	4603      	mov	r3, r0
   166ca:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
    while (tries++ < kBusTimeout)
   166ce:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   166d2:	1c5a      	adds	r2, r3, #1
   166d4:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
   166d8:	2bf9      	cmp	r3, #249	; 0xf9
   166da:	bf94      	ite	ls
   166dc:	2301      	movls	r3, #1
   166de:	2300      	movhi	r3, #0
   166e0:	b2db      	uxtb	r3, r3
   166e2:	2b00      	cmp	r3, #0
   166e4:	d027      	beq.n	16736 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x2da>
    {
      temp_byte = static_cast<uint8_t>(ssp_interface_->Transfer(0xFF));
   166e6:	9b03      	ldr	r3, [sp, #12]
   166e8:	685a      	ldr	r2, [r3, #4]
   166ea:	9b03      	ldr	r3, [sp, #12]
   166ec:	685b      	ldr	r3, [r3, #4]
   166ee:	681b      	ldr	r3, [r3, #0]
   166f0:	3308      	adds	r3, #8
   166f2:	681b      	ldr	r3, [r3, #0]
   166f4:	21ff      	movs	r1, #255	; 0xff
   166f6:	4610      	mov	r0, r2
   166f8:	4798      	blx	r3
   166fa:	4603      	mov	r3, r0
   166fc:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
      if (temp_byte != 0xFF)
   16700:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
   16704:	2bff      	cmp	r3, #255	; 0xff
   16706:	d00f      	beq.n	16728 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x2cc>
      {
        // Determine the offset, since the first byte of a
        // response will always be 0.
        while (temp_byte & (0x80 >> bit_offset))
   16708:	f89d 202f 	ldrb.w	r2, [sp, #47]	; 0x2f
   1670c:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
   16710:	2180      	movs	r1, #128	; 0x80
   16712:	fa41 f303 	asr.w	r3, r1, r3
   16716:	4013      	ands	r3, r2
   16718:	2b00      	cmp	r3, #0
   1671a:	d00b      	beq.n	16734 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x2d8>
        {
          bit_offset++;
   1671c:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
   16720:	3301      	adds	r3, #1
   16722:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
        while (temp_byte & (0x80 >> bit_offset))
   16726:	e7ef      	b.n	16708 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x2ac>
        }
        break;
      }
      tries++;
   16728:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   1672c:	3301      	adds	r3, #1
   1672e:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
    while (tries++ < kBusTimeout)
   16732:	e7cc      	b.n	166ce <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x272>
        break;
   16734:	bf00      	nop
    }

    // Determine response length (in bytes) based on response type
    switch (res_type)
   16736:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   16738:	2b07      	cmp	r3, #7
   1673a:	d827      	bhi.n	1678c <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x330>
   1673c:	a201      	add	r2, pc, #4	; (adr r2, 16744 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x2e8>)
   1673e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   16742:	bf00      	nop
   16744:	00016765 	.word	0x00016765
   16748:	0001676d 	.word	0x0001676d
   1674c:	00016775 	.word	0x00016775
   16750:	0001677d 	.word	0x0001677d
   16754:	0001678d 	.word	0x0001678d
   16758:	0001678d 	.word	0x0001678d
   1675c:	0001678d 	.word	0x0001678d
   16760:	00016785 	.word	0x00016785
    {
      case ResponseType::kR1: res_len = 1; break;
   16764:	2301      	movs	r3, #1
   16766:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
   1676a:	e019      	b.n	167a0 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x344>
      case ResponseType::kR1b: res_len = 1; break;
   1676c:	2301      	movs	r3, #1
   1676e:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
   16772:	e015      	b.n	167a0 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x344>
      case ResponseType::kR2: res_len = 2; break;
   16774:	2302      	movs	r3, #2
   16776:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
   1677a:	e011      	b.n	167a0 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x344>
      case ResponseType::kR3: res_len = 5; break;
   1677c:	2305      	movs	r3, #5
   1677e:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
   16782:	e00d      	b.n	167a0 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x344>
      case ResponseType::kR7: res_len = 5; break;
   16784:	2305      	movs	r3, #5
   16786:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
   1678a:	e009      	b.n	167a0 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x344>
      default:
        LOG_ERROR("Response unsupported in SPI mode. Aborting!");
   1678c:	f240 433a 	movw	r3, #1082	; 0x43a
   16790:	4a56      	ldr	r2, [pc, #344]	; (168ec <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x490>)
   16792:	4957      	ldr	r1, [pc, #348]	; (168f0 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x494>)
   16794:	4857      	ldr	r0, [pc, #348]	; (168f4 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x498>)
   16796:	f7fd fc95 	bl	140c4 <printf>
        return -1;
   1679a:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   1679e:	e09a      	b.n	168d6 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x47a>
        break;
    }

    // Acquire the response
    uint64_t temp_response = 0;
   167a0:	f04f 0200 	mov.w	r2, #0
   167a4:	f04f 0300 	mov.w	r3, #0
   167a8:	e9cd 2308 	strd	r2, r3, [sp, #32]
    // Read an extra 8 bits since the response was offset
    uint8_t bytes_to_read =
   167ac:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
   167b0:	2b00      	cmp	r3, #0
   167b2:	d004      	beq.n	167be <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x362>
   167b4:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
   167b8:	3301      	adds	r3, #1
   167ba:	b2db      	uxtb	r3, r3
   167bc:	e001      	b.n	167c2 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x366>
   167be:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
   167c2:	f88d 301f 	strb.w	r3, [sp, #31]
        static_cast<uint8_t>((bit_offset > 0) ? res_len + 1 : res_len);
    while (bytes_to_read-- > 0)
   167c6:	f89d 301f 	ldrb.w	r3, [sp, #31]
   167ca:	1e5a      	subs	r2, r3, #1
   167cc:	f88d 201f 	strb.w	r2, [sp, #31]
   167d0:	2b00      	cmp	r3, #0
   167d2:	bf14      	ite	ne
   167d4:	2301      	movne	r3, #1
   167d6:	2300      	moveq	r3, #0
   167d8:	b2db      	uxtb	r3, r3
   167da:	2b00      	cmp	r3, #0
   167dc:	d025      	beq.n	1682a <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x3ce>
    {
      // Make space for the next byte
      temp_response = temp_response << 8;
   167de:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   167e2:	f04f 0200 	mov.w	r2, #0
   167e6:	f04f 0300 	mov.w	r3, #0
   167ea:	020b      	lsls	r3, r1, #8
   167ec:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
   167f0:	0202      	lsls	r2, r0, #8
   167f2:	e9cd 2308 	strd	r2, r3, [sp, #32]
      temp_response |= temp_byte;
   167f6:	f89d b02f 	ldrb.w	fp, [sp, #47]	; 0x2f
   167fa:	f04f 0c00 	mov.w	ip, #0
   167fe:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   16802:	ea4b 0200 	orr.w	r2, fp, r0
   16806:	ea4c 0301 	orr.w	r3, ip, r1
   1680a:	e9cd 2308 	strd	r2, r3, [sp, #32]
      temp_byte = static_cast<uint8_t>(ssp_interface_->Transfer(0xFF));
   1680e:	9b03      	ldr	r3, [sp, #12]
   16810:	685a      	ldr	r2, [r3, #4]
   16812:	9b03      	ldr	r3, [sp, #12]
   16814:	685b      	ldr	r3, [r3, #4]
   16816:	681b      	ldr	r3, [r3, #0]
   16818:	3308      	adds	r3, #8
   1681a:	681b      	ldr	r3, [r3, #0]
   1681c:	21ff      	movs	r1, #255	; 0xff
   1681e:	4610      	mov	r0, r2
   16820:	4798      	blx	r3
   16822:	4603      	mov	r3, r0
   16824:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
    while (bytes_to_read-- > 0)
   16828:	e7cd      	b.n	167c6 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x36a>
    }
    // Compensate for the bit offset
    temp_response = temp_response >> bit_offset;
   1682a:	f89d 1030 	ldrb.w	r1, [sp, #48]	; 0x30
   1682e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   16832:	f1c1 0c20 	rsb	ip, r1, #32
   16836:	f1a1 0020 	sub.w	r0, r1, #32
   1683a:	fa22 f401 	lsr.w	r4, r2, r1
   1683e:	fa03 fc0c 	lsl.w	ip, r3, ip
   16842:	ea44 040c 	orr.w	r4, r4, ip
   16846:	fa23 f000 	lsr.w	r0, r3, r0
   1684a:	4304      	orrs	r4, r0
   1684c:	fa23 f501 	lsr.w	r5, r3, r1
   16850:	e9cd 4508 	strd	r4, r5, [sp, #32]

    // Only write to the response buffer if it is provided
    if (response_buffer != nullptr)
   16854:	9b00      	ldr	r3, [sp, #0]
   16856:	2b00      	cmp	r3, #0
   16858:	d025      	beq.n	168a6 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x44a>
    {
      for (int i = 0; i < res_len; i++)
   1685a:	2300      	movs	r3, #0
   1685c:	9306      	str	r3, [sp, #24]
   1685e:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
   16862:	9a06      	ldr	r2, [sp, #24]
   16864:	429a      	cmp	r2, r3
   16866:	da1e      	bge.n	168a6 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x44a>
      {
        response_buffer[i] =
            static_cast<uint8_t>(temp_response >> 8 * (res_len - 1 - i));
   16868:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
   1686c:	1e5a      	subs	r2, r3, #1
   1686e:	9b06      	ldr	r3, [sp, #24]
   16870:	1ad3      	subs	r3, r2, r3
   16872:	00da      	lsls	r2, r3, #3
   16874:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   16878:	f1c2 0020 	rsb	r0, r2, #32
   1687c:	f1a2 0120 	sub.w	r1, r2, #32
   16880:	fa23 f602 	lsr.w	r6, r3, r2
   16884:	fa04 f000 	lsl.w	r0, r4, r0
   16888:	4306      	orrs	r6, r0
   1688a:	fa24 f101 	lsr.w	r1, r4, r1
   1688e:	430e      	orrs	r6, r1
   16890:	fa24 f702 	lsr.w	r7, r4, r2
        response_buffer[i] =
   16894:	9b06      	ldr	r3, [sp, #24]
   16896:	9a00      	ldr	r2, [sp, #0]
   16898:	4413      	add	r3, r2
   1689a:	b2f2      	uxtb	r2, r6
   1689c:	701a      	strb	r2, [r3, #0]
      for (int i = 0; i < res_len; i++)
   1689e:	9b06      	ldr	r3, [sp, #24]
   168a0:	3301      	adds	r3, #1
   168a2:	9306      	str	r3, [sp, #24]
   168a4:	e7db      	b.n	1685e <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x402>
      }
    }

    // Only end the transaction if keep_alive isn't requested
    if (keep_alive == KeepAlive::kNo)
   168a6:	f89d 305c 	ldrb.w	r3, [sp, #92]	; 0x5c
   168aa:	2b00      	cmp	r3, #0
   168ac:	d111      	bne.n	168d2 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x476>
    {
      // Deselect the SPI comm board
      chip_select_->SetHigh();
   168ae:	9b03      	ldr	r3, [sp, #12]
   168b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   168b2:	9b03      	ldr	r3, [sp, #12]
   168b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   168b6:	681b      	ldr	r3, [r3, #0]
   168b8:	330c      	adds	r3, #12
   168ba:	681b      	ldr	r3, [r3, #0]
   168bc:	4610      	mov	r0, r2
   168be:	4798      	blx	r3
      chip_select_external_->SetHigh();
   168c0:	9b03      	ldr	r3, [sp, #12]
   168c2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
   168c4:	9b03      	ldr	r3, [sp, #12]
   168c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   168c8:	681b      	ldr	r3, [r3, #0]
   168ca:	330c      	adds	r3, #12
   168cc:	681b      	ldr	r3, [r3, #0]
   168ce:	4610      	mov	r0, r2
   168d0:	4798      	blx	r3
    }
    return res_len;
   168d2:	f89d 4033 	ldrb.w	r4, [sp, #51]	; 0x33
   168d6:	4643      	mov	r3, r8
   168d8:	4619      	mov	r1, r3
   168da:	4807      	ldr	r0, [pc, #28]	; (168f8 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x49c>)
   168dc:	f7fc f9ac 	bl	12c38 <__cyg_profile_func_exit>
   168e0:	4623      	mov	r3, r4
  }
   168e2:	4618      	mov	r0, r3
   168e4:	b00f      	add	sp, #60	; 0x3c
   168e6:	e8bd 89f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, fp, pc}
   168ea:	bf00      	nop
   168ec:	0001921c 	.word	0x0001921c
   168f0:	00018f20 	.word	0x00018f20
   168f4:	00018aac 	.word	0x00018aac
   168f8:	0001645d 	.word	0x0001645d

000168fc <Sd::Crc7Add(unsigned char, unsigned char)>:

  // Adds a message byte to the current CRC-7 to get a the new CRC-7
  uint8_t Crc7Add(uint8_t crc, uint8_t message_byte) override
   168fc:	b530      	push	{r4, r5, lr}
   168fe:	b083      	sub	sp, #12
   16900:	4675      	mov	r5, lr
   16902:	9001      	str	r0, [sp, #4]
   16904:	460b      	mov	r3, r1
   16906:	f88d 3003 	strb.w	r3, [sp, #3]
   1690a:	4613      	mov	r3, r2
   1690c:	f88d 3002 	strb.w	r3, [sp, #2]
   16910:	462b      	mov	r3, r5
   16912:	4619      	mov	r1, r3
   16914:	4809      	ldr	r0, [pc, #36]	; (1693c <Sd::Crc7Add(unsigned char, unsigned char)+0x40>)
   16916:	f7fc f97b 	bl	12c10 <__cyg_profile_func_enter>
  {
    return kCrcTable8.crc_table[(crc << 1) ^ message_byte];
   1691a:	f89d 3003 	ldrb.w	r3, [sp, #3]
   1691e:	005a      	lsls	r2, r3, #1
   16920:	f89d 3002 	ldrb.w	r3, [sp, #2]
   16924:	4053      	eors	r3, r2
   16926:	4a06      	ldr	r2, [pc, #24]	; (16940 <Sd::Crc7Add(unsigned char, unsigned char)+0x44>)
   16928:	5cd4      	ldrb	r4, [r2, r3]
   1692a:	462b      	mov	r3, r5
   1692c:	4619      	mov	r1, r3
   1692e:	4803      	ldr	r0, [pc, #12]	; (1693c <Sd::Crc7Add(unsigned char, unsigned char)+0x40>)
   16930:	f7fc f982 	bl	12c38 <__cyg_profile_func_exit>
   16934:	4623      	mov	r3, r4
  }
   16936:	4618      	mov	r0, r3
   16938:	b003      	add	sp, #12
   1693a:	bd30      	pop	{r4, r5, pc}
   1693c:	000168fd 	.word	0x000168fd
   16940:	00018b90 	.word	0x00018b90

00016944 <Sd::GetCrc7(unsigned char*, unsigned char)>:

  // Returns the CRC-7 for a message of "length" bytes
  uint8_t GetCrc7(uint8_t * message, uint8_t length) override
   16944:	b530      	push	{r4, r5, lr}
   16946:	b087      	sub	sp, #28
   16948:	4675      	mov	r5, lr
   1694a:	9003      	str	r0, [sp, #12]
   1694c:	9102      	str	r1, [sp, #8]
   1694e:	4613      	mov	r3, r2
   16950:	f88d 3007 	strb.w	r3, [sp, #7]
   16954:	462b      	mov	r3, r5
   16956:	4619      	mov	r1, r3
   16958:	4815      	ldr	r0, [pc, #84]	; (169b0 <Sd::GetCrc7(unsigned char*, unsigned char)+0x6c>)
   1695a:	f7fc f959 	bl	12c10 <__cyg_profile_func_enter>
  {
    uint8_t crc = 0;
   1695e:	2300      	movs	r3, #0
   16960:	f88d 3017 	strb.w	r3, [sp, #23]
    for (int i = 0; i < length; i++)
   16964:	2300      	movs	r3, #0
   16966:	9304      	str	r3, [sp, #16]
   16968:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1696c:	9a04      	ldr	r2, [sp, #16]
   1696e:	429a      	cmp	r2, r3
   16970:	da12      	bge.n	16998 <Sd::GetCrc7(unsigned char*, unsigned char)+0x54>
    {
      crc = Crc7Add(crc, message[i]);
   16972:	9b03      	ldr	r3, [sp, #12]
   16974:	681b      	ldr	r3, [r3, #0]
   16976:	3318      	adds	r3, #24
   16978:	681b      	ldr	r3, [r3, #0]
   1697a:	9a04      	ldr	r2, [sp, #16]
   1697c:	9902      	ldr	r1, [sp, #8]
   1697e:	440a      	add	r2, r1
   16980:	7812      	ldrb	r2, [r2, #0]
   16982:	f89d 1017 	ldrb.w	r1, [sp, #23]
   16986:	9803      	ldr	r0, [sp, #12]
   16988:	4798      	blx	r3
   1698a:	4603      	mov	r3, r0
   1698c:	f88d 3017 	strb.w	r3, [sp, #23]
    for (int i = 0; i < length; i++)
   16990:	9b04      	ldr	r3, [sp, #16]
   16992:	3301      	adds	r3, #1
   16994:	9304      	str	r3, [sp, #16]
   16996:	e7e7      	b.n	16968 <Sd::GetCrc7(unsigned char*, unsigned char)+0x24>
    }
    return crc;
   16998:	f89d 4017 	ldrb.w	r4, [sp, #23]
   1699c:	462b      	mov	r3, r5
   1699e:	4619      	mov	r1, r3
   169a0:	4803      	ldr	r0, [pc, #12]	; (169b0 <Sd::GetCrc7(unsigned char*, unsigned char)+0x6c>)
   169a2:	f7fc f949 	bl	12c38 <__cyg_profile_func_exit>
   169a6:	4623      	mov	r3, r4
  }
   169a8:	4618      	mov	r0, r3
   169aa:	b007      	add	sp, #28
   169ac:	bd30      	pop	{r4, r5, pc}
   169ae:	bf00      	nop
   169b0:	00016945 	.word	0x00016945

000169b4 <Sd::GetCrc16(unsigned char*, unsigned short)>:

  // Returns CCITT CRC-16 for a message of "length" bytes
  uint16_t GetCrc16(uint8_t * message, uint16_t length) override
   169b4:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
   169b8:	b08c      	sub	sp, #48	; 0x30
   169ba:	4677      	mov	r7, lr
   169bc:	9003      	str	r0, [sp, #12]
   169be:	9102      	str	r1, [sp, #8]
   169c0:	4613      	mov	r3, r2
   169c2:	f8ad 3006 	strh.w	r3, [sp, #6]
   169c6:	463b      	mov	r3, r7
   169c8:	4619      	mov	r1, r3
   169ca:	4837      	ldr	r0, [pc, #220]	; (16aa8 <Sd::GetCrc16(unsigned char*, unsigned short)+0xf4>)
   169cc:	f7fc f920 	bl	12c10 <__cyg_profile_func_enter>
  {
    uint64_t crc = 0x0000;
   169d0:	f04f 0300 	mov.w	r3, #0
   169d4:	f04f 0400 	mov.w	r4, #0
   169d8:	e9cd 340a 	strd	r3, r4, [sp, #40]	; 0x28
    uint64_t temp;
    uint64_t final_value = 0;
   169dc:	f04f 0300 	mov.w	r3, #0
   169e0:	f04f 0400 	mov.w	r4, #0
   169e4:	e9cd 3406 	strd	r3, r4, [sp, #24]

    for (uint64_t count = 0; count < length; ++count)
   169e8:	f04f 0300 	mov.w	r3, #0
   169ec:	f04f 0400 	mov.w	r4, #0
   169f0:	e9cd 3408 	strd	r3, r4, [sp, #32]
   169f4:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   169f8:	f04f 0400 	mov.w	r4, #0
   169fc:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
   16a00:	42a2      	cmp	r2, r4
   16a02:	bf08      	it	eq
   16a04:	4299      	cmpeq	r1, r3
   16a06:	d23f      	bcs.n	16a88 <Sd::GetCrc16(unsigned char*, unsigned short)+0xd4>
    {
      temp = (*message++ ^ (crc >> 8)) & 0xff;
   16a08:	9b02      	ldr	r3, [sp, #8]
   16a0a:	1c5a      	adds	r2, r3, #1
   16a0c:	9202      	str	r2, [sp, #8]
   16a0e:	781b      	ldrb	r3, [r3, #0]
   16a10:	b2dd      	uxtb	r5, r3
   16a12:	f04f 0600 	mov.w	r6, #0
   16a16:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
   16a1a:	f04f 0300 	mov.w	r3, #0
   16a1e:	f04f 0400 	mov.w	r4, #0
   16a22:	0a0b      	lsrs	r3, r1, #8
   16a24:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
   16a28:	0a14      	lsrs	r4, r2, #8
   16a2a:	ea83 0b05 	eor.w	fp, r3, r5
   16a2e:	ea84 0c06 	eor.w	ip, r4, r6
   16a32:	f04f 01ff 	mov.w	r1, #255	; 0xff
   16a36:	f04f 0200 	mov.w	r2, #0
   16a3a:	ea0b 0301 	and.w	r3, fp, r1
   16a3e:	ea0c 0402 	and.w	r4, ip, r2
   16a42:	e9cd 3404 	strd	r3, r4, [sp, #16]
      crc  = kCrcTable16.crc_table[temp] ^ (crc << 8);
   16a46:	4a19      	ldr	r2, [pc, #100]	; (16aac <Sd::GetCrc16(unsigned char*, unsigned short)+0xf8>)
   16a48:	9b04      	ldr	r3, [sp, #16]
   16a4a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
   16a4e:	b29d      	uxth	r5, r3
   16a50:	f04f 0600 	mov.w	r6, #0
   16a54:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
   16a58:	f04f 0b00 	mov.w	fp, #0
   16a5c:	f04f 0c00 	mov.w	ip, #0
   16a60:	ea4f 2c02 	mov.w	ip, r2, lsl #8
   16a64:	ea4c 6c11 	orr.w	ip, ip, r1, lsr #24
   16a68:	ea4f 2b01 	mov.w	fp, r1, lsl #8
   16a6c:	ea8b 0305 	eor.w	r3, fp, r5
   16a70:	ea8c 0406 	eor.w	r4, ip, r6
   16a74:	e9cd 340a 	strd	r3, r4, [sp, #40]	; 0x28
    for (uint64_t count = 0; count < length; ++count)
   16a78:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   16a7c:	1c59      	adds	r1, r3, #1
   16a7e:	f144 0200 	adc.w	r2, r4, #0
   16a82:	e9cd 1208 	strd	r1, r2, [sp, #32]
   16a86:	e7b5      	b.n	169f4 <Sd::GetCrc16(unsigned char*, unsigned short)+0x40>
    }

    return static_cast<uint16_t>(crc ^ final_value);
   16a88:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
   16a8c:	f8bd 3018 	ldrh.w	r3, [sp, #24]
   16a90:	4053      	eors	r3, r2
   16a92:	b29c      	uxth	r4, r3
   16a94:	463b      	mov	r3, r7
   16a96:	4619      	mov	r1, r3
   16a98:	4803      	ldr	r0, [pc, #12]	; (16aa8 <Sd::GetCrc16(unsigned char*, unsigned short)+0xf4>)
   16a9a:	f7fc f8cd 	bl	12c38 <__cyg_profile_func_exit>
   16a9e:	4623      	mov	r3, r4
  }
   16aa0:	4618      	mov	r0, r3
   16aa2:	b00c      	add	sp, #48	; 0x30
   16aa4:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
   16aa8:	000169b5 	.word	0x000169b5
   16aac:	00018c90 	.word	0x00018c90

00016ab0 <Status Wait<Wait(unsigned long long)::{lambda()#1}>(unsigned long long, Wait(unsigned long long)::{lambda()#1})>:
inline Status Wait(uint64_t timeout, F is_done)
   16ab0:	e92d 4830 	stmdb	sp!, {r4, r5, fp, lr}
   16ab4:	b088      	sub	sp, #32
   16ab6:	4675      	mov	r5, lr
   16ab8:	e9cd 0102 	strd	r0, r1, [sp, #8]
   16abc:	f88d 2004 	strb.w	r2, [sp, #4]
   16ac0:	462b      	mov	r3, r5
   16ac2:	4619      	mov	r1, r3
   16ac4:	4824      	ldr	r0, [pc, #144]	; (16b58 <Status Wait<Wait(unsigned long long)::{lambda()#1}>(unsigned long long, Wait(unsigned long long)::{lambda()#1})+0xa8>)
   16ac6:	f7fc f8a3 	bl	12c10 <__cyg_profile_func_enter>
  uint64_t timeout_time = 0;
   16aca:	f04f 0300 	mov.w	r3, #0
   16ace:	f04f 0400 	mov.w	r4, #0
   16ad2:	e9cd 3406 	strd	r3, r4, [sp, #24]
  if (timeout == kMaxWait)
   16ad6:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
   16ada:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
   16ade:	bf08      	it	eq
   16ae0:	f1b3 3fff 	cmpeq.w	r3, #4294967295	; 0xffffffff
   16ae4:	d106      	bne.n	16af4 <Status Wait<Wait(unsigned long long)::{lambda()#1}>(unsigned long long, Wait(unsigned long long)::{lambda()#1})+0x44>
    timeout_time = kMaxWait;
   16ae6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   16aea:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   16aee:	e9cd 3406 	strd	r3, r4, [sp, #24]
   16af2:	e00b      	b.n	16b0c <Status Wait<Wait(unsigned long long)::{lambda()#1}>(unsigned long long, Wait(unsigned long long)::{lambda()#1})+0x5c>
    timeout_time = Milliseconds() + timeout;
   16af4:	f7f9 fedc 	bl	108b0 <Milliseconds()>
   16af8:	460a      	mov	r2, r1
   16afa:	4601      	mov	r1, r0
   16afc:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
   16b00:	eb13 0b01 	adds.w	fp, r3, r1
   16b04:	eb44 0c02 	adc.w	ip, r4, r2
   16b08:	e9cd bc06 	strd	fp, ip, [sp, #24]
  Status status = Status::kTimedOut;
   16b0c:	2301      	movs	r3, #1
   16b0e:	9305      	str	r3, [sp, #20]
  while (Milliseconds() < timeout_time)
   16b10:	f7f9 fece 	bl	108b0 <Milliseconds()>
   16b14:	460a      	mov	r2, r1
   16b16:	4601      	mov	r1, r0
   16b18:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
   16b1c:	42a2      	cmp	r2, r4
   16b1e:	bf08      	it	eq
   16b20:	4299      	cmpeq	r1, r3
   16b22:	bf34      	ite	cc
   16b24:	2301      	movcc	r3, #1
   16b26:	2300      	movcs	r3, #0
   16b28:	b2db      	uxtb	r3, r3
   16b2a:	2b00      	cmp	r3, #0
   16b2c:	d008      	beq.n	16b40 <Status Wait<Wait(unsigned long long)::{lambda()#1}>(unsigned long long, Wait(unsigned long long)::{lambda()#1})+0x90>
    if (is_done())
   16b2e:	ab01      	add	r3, sp, #4
   16b30:	4618      	mov	r0, r3
   16b32:	f7fd fb33 	bl	1419c <Wait(unsigned long long)::{lambda()#1}::operator()() const>
   16b36:	4603      	mov	r3, r0
   16b38:	2b00      	cmp	r3, #0
   16b3a:	d0e9      	beq.n	16b10 <Status Wait<Wait(unsigned long long)::{lambda()#1}>(unsigned long long, Wait(unsigned long long)::{lambda()#1})+0x60>
      status = Status::kSuccess;
   16b3c:	2300      	movs	r3, #0
   16b3e:	9305      	str	r3, [sp, #20]
  return status;
   16b40:	9c05      	ldr	r4, [sp, #20]
   16b42:	462b      	mov	r3, r5
   16b44:	4619      	mov	r1, r3
   16b46:	4804      	ldr	r0, [pc, #16]	; (16b58 <Status Wait<Wait(unsigned long long)::{lambda()#1}>(unsigned long long, Wait(unsigned long long)::{lambda()#1})+0xa8>)
   16b48:	f7fc f876 	bl	12c38 <__cyg_profile_func_exit>
   16b4c:	4623      	mov	r3, r4
}
   16b4e:	4618      	mov	r0, r3
   16b50:	b008      	add	sp, #32
   16b52:	e8bd 8830 	ldmia.w	sp!, {r4, r5, fp, pc}
   16b56:	bf00      	nop
   16b58:	00016ab1 	.word	0x00016ab1

00016b5c <unsigned long bit::Set<unsigned long>(unsigned long, unsigned long)>:
constexpr T Set(T target, uint32_t position)
   16b5c:	b530      	push	{r4, r5, lr}
   16b5e:	b083      	sub	sp, #12
   16b60:	4675      	mov	r5, lr
   16b62:	9001      	str	r0, [sp, #4]
   16b64:	9100      	str	r1, [sp, #0]
   16b66:	462b      	mov	r3, r5
   16b68:	4619      	mov	r1, r3
   16b6a:	480a      	ldr	r0, [pc, #40]	; (16b94 <unsigned long bit::Set<unsigned long>(unsigned long, unsigned long)+0x38>)
   16b6c:	f7fc f850 	bl	12c10 <__cyg_profile_func_enter>
  return target | (1 << position);
   16b70:	2201      	movs	r2, #1
   16b72:	9b00      	ldr	r3, [sp, #0]
   16b74:	fa02 f303 	lsl.w	r3, r2, r3
   16b78:	461a      	mov	r2, r3
   16b7a:	9b01      	ldr	r3, [sp, #4]
   16b7c:	ea42 0403 	orr.w	r4, r2, r3
   16b80:	462b      	mov	r3, r5
   16b82:	4619      	mov	r1, r3
   16b84:	4803      	ldr	r0, [pc, #12]	; (16b94 <unsigned long bit::Set<unsigned long>(unsigned long, unsigned long)+0x38>)
   16b86:	f7fc f857 	bl	12c38 <__cyg_profile_func_exit>
   16b8a:	4623      	mov	r3, r4
}
   16b8c:	4618      	mov	r0, r3
   16b8e:	b003      	add	sp, #12
   16b90:	bd30      	pop	{r4, r5, pc}
   16b92:	bf00      	nop
   16b94:	00016b5d 	.word	0x00016b5d

00016b98 <bool bit::Read<unsigned long>(unsigned long, unsigned long)>:
[[gnu::always_inline]][[nodiscard]] constexpr bool Read(T target,
   16b98:	b530      	push	{r4, r5, lr}
   16b9a:	b083      	sub	sp, #12
   16b9c:	4675      	mov	r5, lr
   16b9e:	9001      	str	r0, [sp, #4]
   16ba0:	9100      	str	r1, [sp, #0]
   16ba2:	462b      	mov	r3, r5
   16ba4:	4619      	mov	r1, r3
   16ba6:	480c      	ldr	r0, [pc, #48]	; (16bd8 <bool bit::Read<unsigned long>(unsigned long, unsigned long)+0x40>)
   16ba8:	f7fc f832 	bl	12c10 <__cyg_profile_func_enter>
  return static_cast<bool>(target & (1 << position));
   16bac:	2201      	movs	r2, #1
   16bae:	9b00      	ldr	r3, [sp, #0]
   16bb0:	fa02 f303 	lsl.w	r3, r2, r3
   16bb4:	461a      	mov	r2, r3
   16bb6:	9b01      	ldr	r3, [sp, #4]
   16bb8:	4013      	ands	r3, r2
   16bba:	2b00      	cmp	r3, #0
   16bbc:	bf14      	ite	ne
   16bbe:	2301      	movne	r3, #1
   16bc0:	2300      	moveq	r3, #0
   16bc2:	b2dc      	uxtb	r4, r3
   16bc4:	462b      	mov	r3, r5
   16bc6:	4619      	mov	r1, r3
   16bc8:	4803      	ldr	r0, [pc, #12]	; (16bd8 <bool bit::Read<unsigned long>(unsigned long, unsigned long)+0x40>)
   16bca:	f7fc f835 	bl	12c38 <__cyg_profile_func_exit>
   16bce:	4623      	mov	r3, r4
}
   16bd0:	4618      	mov	r0, r3
   16bd2:	b003      	add	sp, #12
   16bd4:	bd30      	pop	{r4, r5, pc}
   16bd6:	bf00      	nop
   16bd8:	00016b99 	.word	0x00016b99

00016bdc <unsigned long bit::Insert<unsigned long, unsigned char>(unsigned long, unsigned char, unsigned long, unsigned long)>:
constexpr T Insert(T target, U value, uint32_t position, uint32_t width = 1)
   16bdc:	b530      	push	{r4, r5, lr}
   16bde:	b089      	sub	sp, #36	; 0x24
   16be0:	4675      	mov	r5, lr
   16be2:	9003      	str	r0, [sp, #12]
   16be4:	9201      	str	r2, [sp, #4]
   16be6:	9300      	str	r3, [sp, #0]
   16be8:	460b      	mov	r3, r1
   16bea:	f88d 300b 	strb.w	r3, [sp, #11]
   16bee:	462b      	mov	r3, r5
   16bf0:	4619      	mov	r1, r3
   16bf2:	4816      	ldr	r0, [pc, #88]	; (16c4c <unsigned long bit::Insert<unsigned long, unsigned char>(unsigned long, unsigned char, unsigned long, unsigned long)+0x70>)
   16bf4:	f7fc f80c 	bl	12c10 <__cyg_profile_func_enter>
  constexpr UnsignedT kFieldOfOnes = GenerateFieldOfOnes<T>();
   16bf8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   16bfc:	9307      	str	r3, [sp, #28]
  constexpr size_t kTargetWidth     = sizeof(T) * 8;
   16bfe:	2320      	movs	r3, #32
   16c00:	9306      	str	r3, [sp, #24]
  UnsignedT mask   = kFieldOfOnes >> (kTargetWidth - width);
   16c02:	9b00      	ldr	r3, [sp, #0]
   16c04:	f1c3 0320 	rsb	r3, r3, #32
   16c08:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   16c0c:	fa22 f303 	lsr.w	r3, r2, r3
   16c10:	9305      	str	r3, [sp, #20]
  target &= ~(mask << position);
   16c12:	9a05      	ldr	r2, [sp, #20]
   16c14:	9b01      	ldr	r3, [sp, #4]
   16c16:	fa02 f303 	lsl.w	r3, r2, r3
   16c1a:	43db      	mvns	r3, r3
   16c1c:	9a03      	ldr	r2, [sp, #12]
   16c1e:	4013      	ands	r3, r2
   16c20:	9303      	str	r3, [sp, #12]
  target |= (value & mask) << position;
   16c22:	f89d 200b 	ldrb.w	r2, [sp, #11]
   16c26:	9b05      	ldr	r3, [sp, #20]
   16c28:	401a      	ands	r2, r3
   16c2a:	9b01      	ldr	r3, [sp, #4]
   16c2c:	fa02 f303 	lsl.w	r3, r2, r3
   16c30:	9a03      	ldr	r2, [sp, #12]
   16c32:	4313      	orrs	r3, r2
   16c34:	9303      	str	r3, [sp, #12]
  return target;
   16c36:	9c03      	ldr	r4, [sp, #12]
   16c38:	462b      	mov	r3, r5
   16c3a:	4619      	mov	r1, r3
   16c3c:	4803      	ldr	r0, [pc, #12]	; (16c4c <unsigned long bit::Insert<unsigned long, unsigned char>(unsigned long, unsigned char, unsigned long, unsigned long)+0x70>)
   16c3e:	f7fb fffb 	bl	12c38 <__cyg_profile_func_exit>
   16c42:	4623      	mov	r3, r4
}
   16c44:	4618      	mov	r0, r3
   16c46:	b009      	add	sp, #36	; 0x24
   16c48:	bd30      	pop	{r4, r5, pc}
   16c4a:	bf00      	nop
   16c4c:	00016bdd 	.word	0x00016bdd

00016c50 <unsigned long bit::Extract<unsigned long>(unsigned long, unsigned long, unsigned long)>:
constexpr T Extract(T target, uint32_t position, uint32_t width = 1)
   16c50:	b530      	push	{r4, r5, lr}
   16c52:	b089      	sub	sp, #36	; 0x24
   16c54:	4675      	mov	r5, lr
   16c56:	9003      	str	r0, [sp, #12]
   16c58:	9102      	str	r1, [sp, #8]
   16c5a:	9201      	str	r2, [sp, #4]
   16c5c:	462b      	mov	r3, r5
   16c5e:	4619      	mov	r1, r3
   16c60:	480f      	ldr	r0, [pc, #60]	; (16ca0 <unsigned long bit::Extract<unsigned long>(unsigned long, unsigned long, unsigned long)+0x50>)
   16c62:	f7fb ffd5 	bl	12c10 <__cyg_profile_func_enter>
  constexpr UnsignedT kFieldOfOnes = GenerateFieldOfOnes<T>();
   16c66:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   16c6a:	9307      	str	r3, [sp, #28]
  constexpr size_t kTargetWidth     = sizeof(T) * 8;
   16c6c:	2320      	movs	r3, #32
   16c6e:	9306      	str	r3, [sp, #24]
  UnsignedT mask   = kFieldOfOnes >> (kTargetWidth - width);
   16c70:	9b01      	ldr	r3, [sp, #4]
   16c72:	f1c3 0320 	rsb	r3, r3, #32
   16c76:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   16c7a:	fa22 f303 	lsr.w	r3, r2, r3
   16c7e:	9305      	str	r3, [sp, #20]
  return (target >> position) & mask;
   16c80:	9a03      	ldr	r2, [sp, #12]
   16c82:	9b02      	ldr	r3, [sp, #8]
   16c84:	40da      	lsrs	r2, r3
   16c86:	9b05      	ldr	r3, [sp, #20]
   16c88:	ea02 0403 	and.w	r4, r2, r3
   16c8c:	462b      	mov	r3, r5
   16c8e:	4619      	mov	r1, r3
   16c90:	4803      	ldr	r0, [pc, #12]	; (16ca0 <unsigned long bit::Extract<unsigned long>(unsigned long, unsigned long, unsigned long)+0x50>)
   16c92:	f7fb ffd1 	bl	12c38 <__cyg_profile_func_exit>
   16c96:	4623      	mov	r3, r4
}
   16c98:	4618      	mov	r0, r3
   16c9a:	b009      	add	sp, #36	; 0x24
   16c9c:	bd30      	pop	{r4, r5, pc}
   16c9e:	bf00      	nop
   16ca0:	00016c51 	.word	0x00016c51

00016ca4 <unsigned long bit::Insert<unsigned long, bool>(unsigned long, bool, unsigned long, unsigned long)>:
constexpr T Insert(T target, U value, uint32_t position, uint32_t width = 1)
   16ca4:	b530      	push	{r4, r5, lr}
   16ca6:	b089      	sub	sp, #36	; 0x24
   16ca8:	4675      	mov	r5, lr
   16caa:	9003      	str	r0, [sp, #12]
   16cac:	9201      	str	r2, [sp, #4]
   16cae:	9300      	str	r3, [sp, #0]
   16cb0:	460b      	mov	r3, r1
   16cb2:	f88d 300b 	strb.w	r3, [sp, #11]
   16cb6:	462b      	mov	r3, r5
   16cb8:	4619      	mov	r1, r3
   16cba:	4816      	ldr	r0, [pc, #88]	; (16d14 <unsigned long bit::Insert<unsigned long, bool>(unsigned long, bool, unsigned long, unsigned long)+0x70>)
   16cbc:	f7fb ffa8 	bl	12c10 <__cyg_profile_func_enter>
  constexpr UnsignedT kFieldOfOnes = GenerateFieldOfOnes<T>();
   16cc0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   16cc4:	9307      	str	r3, [sp, #28]
  constexpr size_t kTargetWidth     = sizeof(T) * 8;
   16cc6:	2320      	movs	r3, #32
   16cc8:	9306      	str	r3, [sp, #24]
  UnsignedT mask   = kFieldOfOnes >> (kTargetWidth - width);
   16cca:	9b00      	ldr	r3, [sp, #0]
   16ccc:	f1c3 0320 	rsb	r3, r3, #32
   16cd0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   16cd4:	fa22 f303 	lsr.w	r3, r2, r3
   16cd8:	9305      	str	r3, [sp, #20]
  target &= ~(mask << position);
   16cda:	9a05      	ldr	r2, [sp, #20]
   16cdc:	9b01      	ldr	r3, [sp, #4]
   16cde:	fa02 f303 	lsl.w	r3, r2, r3
   16ce2:	43db      	mvns	r3, r3
   16ce4:	9a03      	ldr	r2, [sp, #12]
   16ce6:	4013      	ands	r3, r2
   16ce8:	9303      	str	r3, [sp, #12]
  target |= (value & mask) << position;
   16cea:	f89d 200b 	ldrb.w	r2, [sp, #11]
   16cee:	9b05      	ldr	r3, [sp, #20]
   16cf0:	401a      	ands	r2, r3
   16cf2:	9b01      	ldr	r3, [sp, #4]
   16cf4:	fa02 f303 	lsl.w	r3, r2, r3
   16cf8:	9a03      	ldr	r2, [sp, #12]
   16cfa:	4313      	orrs	r3, r2
   16cfc:	9303      	str	r3, [sp, #12]
  return target;
   16cfe:	9c03      	ldr	r4, [sp, #12]
   16d00:	462b      	mov	r3, r5
   16d02:	4619      	mov	r1, r3
   16d04:	4803      	ldr	r0, [pc, #12]	; (16d14 <unsigned long bit::Insert<unsigned long, bool>(unsigned long, bool, unsigned long, unsigned long)+0x70>)
   16d06:	f7fb ff97 	bl	12c38 <__cyg_profile_func_exit>
   16d0a:	4623      	mov	r3, r4
}
   16d0c:	4618      	mov	r0, r3
   16d0e:	b009      	add	sp, #36	; 0x24
   16d10:	bd30      	pop	{r4, r5, pc}
   16d12:	bf00      	nop
   16d14:	00016ca5 	.word	0x00016ca5

00016d18 <__static_initialization_and_destruction_0(int, int)>:
extern "C" DRESULT disk_ioctl([[maybe_unused]] BYTE drive_number,
                              [[maybe_unused]] BYTE command,
                              [[maybe_unused]] void * buffer)
{
  return RES_PARERR;
}
   16d18:	b530      	push	{r4, r5, lr}
   16d1a:	b085      	sub	sp, #20
   16d1c:	4674      	mov	r4, lr
   16d1e:	9003      	str	r0, [sp, #12]
   16d20:	9102      	str	r1, [sp, #8]
   16d22:	4623      	mov	r3, r4
   16d24:	4619      	mov	r1, r3
   16d26:	480e      	ldr	r0, [pc, #56]	; (16d60 <__static_initialization_and_destruction_0(int, int)+0x48>)
   16d28:	f7fb ff72 	bl	12c10 <__cyg_profile_func_enter>
   16d2c:	9b03      	ldr	r3, [sp, #12]
   16d2e:	2b01      	cmp	r3, #1
   16d30:	d10e      	bne.n	16d50 <__static_initialization_and_destruction_0(int, int)+0x38>
   16d32:	9b02      	ldr	r3, [sp, #8]
   16d34:	f64f 72ff 	movw	r2, #65535	; 0xffff
   16d38:	4293      	cmp	r3, r2
   16d3a:	d109      	bne.n	16d50 <__static_initialization_and_destruction_0(int, int)+0x38>
Sd sd_card(Sd::DebugSdCard_t{});
   16d3c:	2306      	movs	r3, #6
   16d3e:	9301      	str	r3, [sp, #4]
   16d40:	2300      	movs	r3, #0
   16d42:	9300      	str	r3, [sp, #0]
   16d44:	2308      	movs	r3, #8
   16d46:	2201      	movs	r2, #1
   16d48:	4629      	mov	r1, r5
   16d4a:	4806      	ldr	r0, [pc, #24]	; (16d64 <__static_initialization_and_destruction_0(int, int)+0x4c>)
   16d4c:	f7fe fd62 	bl	15814 <Sd::Sd(Sd::DebugSdCard_t, unsigned char, unsigned char, unsigned char, unsigned char)>
   16d50:	4623      	mov	r3, r4
   16d52:	4619      	mov	r1, r3
   16d54:	4802      	ldr	r0, [pc, #8]	; (16d60 <__static_initialization_and_destruction_0(int, int)+0x48>)
   16d56:	f7fb ff6f 	bl	12c38 <__cyg_profile_func_exit>
}
   16d5a:	bf00      	nop
   16d5c:	b005      	add	sp, #20
   16d5e:	bd30      	pop	{r4, r5, pc}
   16d60:	00016d19 	.word	0x00016d19
   16d64:	10000578 	.word	0x10000578

00016d68 <_GLOBAL__sub_I_disk_status>:
   16d68:	b510      	push	{r4, lr}
   16d6a:	4674      	mov	r4, lr
   16d6c:	4623      	mov	r3, r4
   16d6e:	4619      	mov	r1, r3
   16d70:	4806      	ldr	r0, [pc, #24]	; (16d8c <_GLOBAL__sub_I_disk_status+0x24>)
   16d72:	f7fb ff4d 	bl	12c10 <__cyg_profile_func_enter>
   16d76:	f64f 71ff 	movw	r1, #65535	; 0xffff
   16d7a:	2001      	movs	r0, #1
   16d7c:	f7ff ffcc 	bl	16d18 <__static_initialization_and_destruction_0(int, int)>
   16d80:	4623      	mov	r3, r4
   16d82:	4619      	mov	r1, r3
   16d84:	4801      	ldr	r0, [pc, #4]	; (16d8c <_GLOBAL__sub_I_disk_status+0x24>)
   16d86:	f7fb ff57 	bl	12c38 <__cyg_profile_func_exit>
   16d8a:	bd10      	pop	{r4, pc}
   16d8c:	00016d69 	.word	0x00016d69

00016d90 <__cxa_pure_virtual>:
   16d90:	b508      	push	{r3, lr}
   16d92:	f000 f80d 	bl	16db0 <std::terminate()>

00016d96 <__cxxabiv1::__terminate(void (*)())>:
   16d96:	b508      	push	{r3, lr}
   16d98:	4780      	blx	r0
   16d9a:	f000 fa0f 	bl	171bc <abort>
   16d9e:	Address 0x0000000000016d9e is out of bounds.


00016da0 <std::get_terminate()>:
   16da0:	4b02      	ldr	r3, [pc, #8]	; (16dac <std::get_terminate()+0xc>)
   16da2:	6818      	ldr	r0, [r3, #0]
   16da4:	f3bf 8f5b 	dmb	ish
   16da8:	4770      	bx	lr
   16daa:	bf00      	nop
   16dac:	100001ec 	.word	0x100001ec

00016db0 <std::terminate()>:
   16db0:	b508      	push	{r3, lr}
   16db2:	f7ff fff5 	bl	16da0 <std::get_terminate()>
   16db6:	f7ff ffee 	bl	16d96 <__cxxabiv1::__terminate(void (*)())>
   16dba:	Address 0x0000000000016dba is out of bounds.


00016dbc <roundf>:
   16dbc:	b082      	sub	sp, #8
   16dbe:	ed8d 0a01 	vstr	s0, [sp, #4]
   16dc2:	9901      	ldr	r1, [sp, #4]
   16dc4:	f3c1 53c7 	ubfx	r3, r1, #23, #8
   16dc8:	f1a3 027f 	sub.w	r2, r3, #127	; 0x7f
   16dcc:	2a16      	cmp	r2, #22
   16dce:	dc0c      	bgt.n	16dea <roundf+0x2e>
   16dd0:	2a00      	cmp	r2, #0
   16dd2:	db10      	blt.n	16df6 <roundf+0x3a>
   16dd4:	4810      	ldr	r0, [pc, #64]	; (16e18 <roundf+0x5c>)
   16dd6:	4110      	asrs	r0, r2
   16dd8:	4201      	tst	r1, r0
   16dda:	d008      	beq.n	16dee <roundf+0x32>
   16ddc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   16de0:	4113      	asrs	r3, r2
   16de2:	440b      	add	r3, r1
   16de4:	ea23 0300 	bic.w	r3, r3, r0
   16de8:	e00b      	b.n	16e02 <roundf+0x46>
   16dea:	2a80      	cmp	r2, #128	; 0x80
   16dec:	d00d      	beq.n	16e0a <roundf+0x4e>
   16dee:	ed9d 0a01 	vldr	s0, [sp, #4]
   16df2:	b002      	add	sp, #8
   16df4:	4770      	bx	lr
   16df6:	3201      	adds	r2, #1
   16df8:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
   16dfc:	d101      	bne.n	16e02 <roundf+0x46>
   16dfe:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
   16e02:	ee00 3a10 	vmov	s0, r3
   16e06:	b002      	add	sp, #8
   16e08:	4770      	bx	lr
   16e0a:	eddd 7a01 	vldr	s15, [sp, #4]
   16e0e:	ee37 0aa7 	vadd.f32	s0, s15, s15
   16e12:	b002      	add	sp, #8
   16e14:	4770      	bx	lr
   16e16:	bf00      	nop
   16e18:	007fffff 	.word	0x007fffff

00016e1c <__aeabi_d2f>:
   16e1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
   16e20:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   16e24:	bf24      	itt	cs
   16e26:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   16e2a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   16e2e:	d90d      	bls.n	16e4c <__aeabi_d2f+0x30>
   16e30:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   16e34:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   16e38:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   16e3c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   16e40:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   16e44:	bf08      	it	eq
   16e46:	f020 0001 	biceq.w	r0, r0, #1
   16e4a:	4770      	bx	lr
   16e4c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   16e50:	d121      	bne.n	16e96 <__aeabi_d2f+0x7a>
   16e52:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   16e56:	bfbc      	itt	lt
   16e58:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   16e5c:	4770      	bxlt	lr
   16e5e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   16e62:	ea4f 5252 	mov.w	r2, r2, lsr #21
   16e66:	f1c2 0218 	rsb	r2, r2, #24
   16e6a:	f1c2 0c20 	rsb	ip, r2, #32
   16e6e:	fa10 f30c 	lsls.w	r3, r0, ip
   16e72:	fa20 f002 	lsr.w	r0, r0, r2
   16e76:	bf18      	it	ne
   16e78:	f040 0001 	orrne.w	r0, r0, #1
   16e7c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   16e80:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   16e84:	fa03 fc0c 	lsl.w	ip, r3, ip
   16e88:	ea40 000c 	orr.w	r0, r0, ip
   16e8c:	fa23 f302 	lsr.w	r3, r3, r2
   16e90:	ea4f 0343 	mov.w	r3, r3, lsl #1
   16e94:	e7cc      	b.n	16e30 <__aeabi_d2f+0x14>
   16e96:	ea7f 5362 	mvns.w	r3, r2, asr #21
   16e9a:	d107      	bne.n	16eac <__aeabi_d2f+0x90>
   16e9c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   16ea0:	bf1e      	ittt	ne
   16ea2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   16ea6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   16eaa:	4770      	bxne	lr
   16eac:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   16eb0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   16eb4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   16eb8:	4770      	bx	lr
   16eba:	bf00      	nop

00016ebc <__aeabi_uldivmod>:
   16ebc:	b953      	cbnz	r3, 16ed4 <__aeabi_uldivmod+0x18>
   16ebe:	b94a      	cbnz	r2, 16ed4 <__aeabi_uldivmod+0x18>
   16ec0:	2900      	cmp	r1, #0
   16ec2:	bf08      	it	eq
   16ec4:	2800      	cmpeq	r0, #0
   16ec6:	bf1c      	itt	ne
   16ec8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
   16ecc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   16ed0:	f000 b972 	b.w	171b8 <__aeabi_idiv0>
   16ed4:	f1ad 0c08 	sub.w	ip, sp, #8
   16ed8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   16edc:	f000 f806 	bl	16eec <__udivmoddi4>
   16ee0:	f8dd e004 	ldr.w	lr, [sp, #4]
   16ee4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   16ee8:	b004      	add	sp, #16
   16eea:	4770      	bx	lr

00016eec <__udivmoddi4>:
   16eec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16ef0:	9e08      	ldr	r6, [sp, #32]
   16ef2:	4604      	mov	r4, r0
   16ef4:	4688      	mov	r8, r1
   16ef6:	2b00      	cmp	r3, #0
   16ef8:	d14b      	bne.n	16f92 <__udivmoddi4+0xa6>
   16efa:	428a      	cmp	r2, r1
   16efc:	4615      	mov	r5, r2
   16efe:	d967      	bls.n	16fd0 <__udivmoddi4+0xe4>
   16f00:	fab2 f282 	clz	r2, r2
   16f04:	b14a      	cbz	r2, 16f1a <__udivmoddi4+0x2e>
   16f06:	f1c2 0720 	rsb	r7, r2, #32
   16f0a:	fa01 f302 	lsl.w	r3, r1, r2
   16f0e:	fa20 f707 	lsr.w	r7, r0, r7
   16f12:	4095      	lsls	r5, r2
   16f14:	ea47 0803 	orr.w	r8, r7, r3
   16f18:	4094      	lsls	r4, r2
   16f1a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
   16f1e:	0c23      	lsrs	r3, r4, #16
   16f20:	fbb8 f7fe 	udiv	r7, r8, lr
   16f24:	fa1f fc85 	uxth.w	ip, r5
   16f28:	fb0e 8817 	mls	r8, lr, r7, r8
   16f2c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
   16f30:	fb07 f10c 	mul.w	r1, r7, ip
   16f34:	4299      	cmp	r1, r3
   16f36:	d909      	bls.n	16f4c <__udivmoddi4+0x60>
   16f38:	18eb      	adds	r3, r5, r3
   16f3a:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
   16f3e:	f080 811b 	bcs.w	17178 <__udivmoddi4+0x28c>
   16f42:	4299      	cmp	r1, r3
   16f44:	f240 8118 	bls.w	17178 <__udivmoddi4+0x28c>
   16f48:	3f02      	subs	r7, #2
   16f4a:	442b      	add	r3, r5
   16f4c:	1a5b      	subs	r3, r3, r1
   16f4e:	b2a4      	uxth	r4, r4
   16f50:	fbb3 f0fe 	udiv	r0, r3, lr
   16f54:	fb0e 3310 	mls	r3, lr, r0, r3
   16f58:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
   16f5c:	fb00 fc0c 	mul.w	ip, r0, ip
   16f60:	45a4      	cmp	ip, r4
   16f62:	d909      	bls.n	16f78 <__udivmoddi4+0x8c>
   16f64:	192c      	adds	r4, r5, r4
   16f66:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   16f6a:	f080 8107 	bcs.w	1717c <__udivmoddi4+0x290>
   16f6e:	45a4      	cmp	ip, r4
   16f70:	f240 8104 	bls.w	1717c <__udivmoddi4+0x290>
   16f74:	3802      	subs	r0, #2
   16f76:	442c      	add	r4, r5
   16f78:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
   16f7c:	eba4 040c 	sub.w	r4, r4, ip
   16f80:	2700      	movs	r7, #0
   16f82:	b11e      	cbz	r6, 16f8c <__udivmoddi4+0xa0>
   16f84:	40d4      	lsrs	r4, r2
   16f86:	2300      	movs	r3, #0
   16f88:	e9c6 4300 	strd	r4, r3, [r6]
   16f8c:	4639      	mov	r1, r7
   16f8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   16f92:	428b      	cmp	r3, r1
   16f94:	d909      	bls.n	16faa <__udivmoddi4+0xbe>
   16f96:	2e00      	cmp	r6, #0
   16f98:	f000 80eb 	beq.w	17172 <__udivmoddi4+0x286>
   16f9c:	2700      	movs	r7, #0
   16f9e:	e9c6 0100 	strd	r0, r1, [r6]
   16fa2:	4638      	mov	r0, r7
   16fa4:	4639      	mov	r1, r7
   16fa6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   16faa:	fab3 f783 	clz	r7, r3
   16fae:	2f00      	cmp	r7, #0
   16fb0:	d147      	bne.n	17042 <__udivmoddi4+0x156>
   16fb2:	428b      	cmp	r3, r1
   16fb4:	d302      	bcc.n	16fbc <__udivmoddi4+0xd0>
   16fb6:	4282      	cmp	r2, r0
   16fb8:	f200 80fa 	bhi.w	171b0 <__udivmoddi4+0x2c4>
   16fbc:	1a84      	subs	r4, r0, r2
   16fbe:	eb61 0303 	sbc.w	r3, r1, r3
   16fc2:	2001      	movs	r0, #1
   16fc4:	4698      	mov	r8, r3
   16fc6:	2e00      	cmp	r6, #0
   16fc8:	d0e0      	beq.n	16f8c <__udivmoddi4+0xa0>
   16fca:	e9c6 4800 	strd	r4, r8, [r6]
   16fce:	e7dd      	b.n	16f8c <__udivmoddi4+0xa0>
   16fd0:	b902      	cbnz	r2, 16fd4 <__udivmoddi4+0xe8>
   16fd2:	deff      	udf	#255	; 0xff
   16fd4:	fab2 f282 	clz	r2, r2
   16fd8:	2a00      	cmp	r2, #0
   16fda:	f040 808f 	bne.w	170fc <__udivmoddi4+0x210>
   16fde:	1b49      	subs	r1, r1, r5
   16fe0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
   16fe4:	fa1f f885 	uxth.w	r8, r5
   16fe8:	2701      	movs	r7, #1
   16fea:	fbb1 fcfe 	udiv	ip, r1, lr
   16fee:	0c23      	lsrs	r3, r4, #16
   16ff0:	fb0e 111c 	mls	r1, lr, ip, r1
   16ff4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   16ff8:	fb08 f10c 	mul.w	r1, r8, ip
   16ffc:	4299      	cmp	r1, r3
   16ffe:	d907      	bls.n	17010 <__udivmoddi4+0x124>
   17000:	18eb      	adds	r3, r5, r3
   17002:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
   17006:	d202      	bcs.n	1700e <__udivmoddi4+0x122>
   17008:	4299      	cmp	r1, r3
   1700a:	f200 80cd 	bhi.w	171a8 <__udivmoddi4+0x2bc>
   1700e:	4684      	mov	ip, r0
   17010:	1a59      	subs	r1, r3, r1
   17012:	b2a3      	uxth	r3, r4
   17014:	fbb1 f0fe 	udiv	r0, r1, lr
   17018:	fb0e 1410 	mls	r4, lr, r0, r1
   1701c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
   17020:	fb08 f800 	mul.w	r8, r8, r0
   17024:	45a0      	cmp	r8, r4
   17026:	d907      	bls.n	17038 <__udivmoddi4+0x14c>
   17028:	192c      	adds	r4, r5, r4
   1702a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   1702e:	d202      	bcs.n	17036 <__udivmoddi4+0x14a>
   17030:	45a0      	cmp	r8, r4
   17032:	f200 80b6 	bhi.w	171a2 <__udivmoddi4+0x2b6>
   17036:	4618      	mov	r0, r3
   17038:	eba4 0408 	sub.w	r4, r4, r8
   1703c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
   17040:	e79f      	b.n	16f82 <__udivmoddi4+0x96>
   17042:	f1c7 0c20 	rsb	ip, r7, #32
   17046:	40bb      	lsls	r3, r7
   17048:	fa22 fe0c 	lsr.w	lr, r2, ip
   1704c:	ea4e 0e03 	orr.w	lr, lr, r3
   17050:	fa01 f407 	lsl.w	r4, r1, r7
   17054:	fa20 f50c 	lsr.w	r5, r0, ip
   17058:	fa21 f30c 	lsr.w	r3, r1, ip
   1705c:	ea4f 481e 	mov.w	r8, lr, lsr #16
   17060:	4325      	orrs	r5, r4
   17062:	fbb3 f9f8 	udiv	r9, r3, r8
   17066:	0c2c      	lsrs	r4, r5, #16
   17068:	fb08 3319 	mls	r3, r8, r9, r3
   1706c:	fa1f fa8e 	uxth.w	sl, lr
   17070:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
   17074:	fb09 f40a 	mul.w	r4, r9, sl
   17078:	429c      	cmp	r4, r3
   1707a:	fa02 f207 	lsl.w	r2, r2, r7
   1707e:	fa00 f107 	lsl.w	r1, r0, r7
   17082:	d90b      	bls.n	1709c <__udivmoddi4+0x1b0>
   17084:	eb1e 0303 	adds.w	r3, lr, r3
   17088:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
   1708c:	f080 8087 	bcs.w	1719e <__udivmoddi4+0x2b2>
   17090:	429c      	cmp	r4, r3
   17092:	f240 8084 	bls.w	1719e <__udivmoddi4+0x2b2>
   17096:	f1a9 0902 	sub.w	r9, r9, #2
   1709a:	4473      	add	r3, lr
   1709c:	1b1b      	subs	r3, r3, r4
   1709e:	b2ad      	uxth	r5, r5
   170a0:	fbb3 f0f8 	udiv	r0, r3, r8
   170a4:	fb08 3310 	mls	r3, r8, r0, r3
   170a8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
   170ac:	fb00 fa0a 	mul.w	sl, r0, sl
   170b0:	45a2      	cmp	sl, r4
   170b2:	d908      	bls.n	170c6 <__udivmoddi4+0x1da>
   170b4:	eb1e 0404 	adds.w	r4, lr, r4
   170b8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   170bc:	d26b      	bcs.n	17196 <__udivmoddi4+0x2aa>
   170be:	45a2      	cmp	sl, r4
   170c0:	d969      	bls.n	17196 <__udivmoddi4+0x2aa>
   170c2:	3802      	subs	r0, #2
   170c4:	4474      	add	r4, lr
   170c6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   170ca:	fba0 8902 	umull	r8, r9, r0, r2
   170ce:	eba4 040a 	sub.w	r4, r4, sl
   170d2:	454c      	cmp	r4, r9
   170d4:	46c2      	mov	sl, r8
   170d6:	464b      	mov	r3, r9
   170d8:	d354      	bcc.n	17184 <__udivmoddi4+0x298>
   170da:	d051      	beq.n	17180 <__udivmoddi4+0x294>
   170dc:	2e00      	cmp	r6, #0
   170de:	d069      	beq.n	171b4 <__udivmoddi4+0x2c8>
   170e0:	ebb1 050a 	subs.w	r5, r1, sl
   170e4:	eb64 0403 	sbc.w	r4, r4, r3
   170e8:	fa04 fc0c 	lsl.w	ip, r4, ip
   170ec:	40fd      	lsrs	r5, r7
   170ee:	40fc      	lsrs	r4, r7
   170f0:	ea4c 0505 	orr.w	r5, ip, r5
   170f4:	e9c6 5400 	strd	r5, r4, [r6]
   170f8:	2700      	movs	r7, #0
   170fa:	e747      	b.n	16f8c <__udivmoddi4+0xa0>
   170fc:	f1c2 0320 	rsb	r3, r2, #32
   17100:	fa20 f703 	lsr.w	r7, r0, r3
   17104:	4095      	lsls	r5, r2
   17106:	fa01 f002 	lsl.w	r0, r1, r2
   1710a:	fa21 f303 	lsr.w	r3, r1, r3
   1710e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
   17112:	4338      	orrs	r0, r7
   17114:	0c01      	lsrs	r1, r0, #16
   17116:	fbb3 f7fe 	udiv	r7, r3, lr
   1711a:	fa1f f885 	uxth.w	r8, r5
   1711e:	fb0e 3317 	mls	r3, lr, r7, r3
   17122:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   17126:	fb07 f308 	mul.w	r3, r7, r8
   1712a:	428b      	cmp	r3, r1
   1712c:	fa04 f402 	lsl.w	r4, r4, r2
   17130:	d907      	bls.n	17142 <__udivmoddi4+0x256>
   17132:	1869      	adds	r1, r5, r1
   17134:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
   17138:	d22f      	bcs.n	1719a <__udivmoddi4+0x2ae>
   1713a:	428b      	cmp	r3, r1
   1713c:	d92d      	bls.n	1719a <__udivmoddi4+0x2ae>
   1713e:	3f02      	subs	r7, #2
   17140:	4429      	add	r1, r5
   17142:	1acb      	subs	r3, r1, r3
   17144:	b281      	uxth	r1, r0
   17146:	fbb3 f0fe 	udiv	r0, r3, lr
   1714a:	fb0e 3310 	mls	r3, lr, r0, r3
   1714e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   17152:	fb00 f308 	mul.w	r3, r0, r8
   17156:	428b      	cmp	r3, r1
   17158:	d907      	bls.n	1716a <__udivmoddi4+0x27e>
   1715a:	1869      	adds	r1, r5, r1
   1715c:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
   17160:	d217      	bcs.n	17192 <__udivmoddi4+0x2a6>
   17162:	428b      	cmp	r3, r1
   17164:	d915      	bls.n	17192 <__udivmoddi4+0x2a6>
   17166:	3802      	subs	r0, #2
   17168:	4429      	add	r1, r5
   1716a:	1ac9      	subs	r1, r1, r3
   1716c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
   17170:	e73b      	b.n	16fea <__udivmoddi4+0xfe>
   17172:	4637      	mov	r7, r6
   17174:	4630      	mov	r0, r6
   17176:	e709      	b.n	16f8c <__udivmoddi4+0xa0>
   17178:	4607      	mov	r7, r0
   1717a:	e6e7      	b.n	16f4c <__udivmoddi4+0x60>
   1717c:	4618      	mov	r0, r3
   1717e:	e6fb      	b.n	16f78 <__udivmoddi4+0x8c>
   17180:	4541      	cmp	r1, r8
   17182:	d2ab      	bcs.n	170dc <__udivmoddi4+0x1f0>
   17184:	ebb8 0a02 	subs.w	sl, r8, r2
   17188:	eb69 020e 	sbc.w	r2, r9, lr
   1718c:	3801      	subs	r0, #1
   1718e:	4613      	mov	r3, r2
   17190:	e7a4      	b.n	170dc <__udivmoddi4+0x1f0>
   17192:	4660      	mov	r0, ip
   17194:	e7e9      	b.n	1716a <__udivmoddi4+0x27e>
   17196:	4618      	mov	r0, r3
   17198:	e795      	b.n	170c6 <__udivmoddi4+0x1da>
   1719a:	4667      	mov	r7, ip
   1719c:	e7d1      	b.n	17142 <__udivmoddi4+0x256>
   1719e:	4681      	mov	r9, r0
   171a0:	e77c      	b.n	1709c <__udivmoddi4+0x1b0>
   171a2:	3802      	subs	r0, #2
   171a4:	442c      	add	r4, r5
   171a6:	e747      	b.n	17038 <__udivmoddi4+0x14c>
   171a8:	f1ac 0c02 	sub.w	ip, ip, #2
   171ac:	442b      	add	r3, r5
   171ae:	e72f      	b.n	17010 <__udivmoddi4+0x124>
   171b0:	4638      	mov	r0, r7
   171b2:	e708      	b.n	16fc6 <__udivmoddi4+0xda>
   171b4:	4637      	mov	r7, r6
   171b6:	e6e9      	b.n	16f8c <__udivmoddi4+0xa0>

000171b8 <__aeabi_idiv0>:
   171b8:	4770      	bx	lr
   171ba:	bf00      	nop

000171bc <abort>:
   171bc:	b508      	push	{r3, lr}
   171be:	2006      	movs	r0, #6
   171c0:	f000 f858 	bl	17274 <raise>
   171c4:	2001      	movs	r0, #1
   171c6:	f7fb fc83 	bl	12ad0 <_exit>
   171ca:	Address 0x00000000000171ca is out of bounds.


000171cc <__libc_init_array>:
   171cc:	b570      	push	{r4, r5, r6, lr}
   171ce:	4e0d      	ldr	r6, [pc, #52]	; (17204 <__libc_init_array+0x38>)
   171d0:	4c0d      	ldr	r4, [pc, #52]	; (17208 <__libc_init_array+0x3c>)
   171d2:	1ba4      	subs	r4, r4, r6
   171d4:	10a4      	asrs	r4, r4, #2
   171d6:	2500      	movs	r5, #0
   171d8:	42a5      	cmp	r5, r4
   171da:	d109      	bne.n	171f0 <__libc_init_array+0x24>
   171dc:	4e0b      	ldr	r6, [pc, #44]	; (1720c <__libc_init_array+0x40>)
   171de:	4c0c      	ldr	r4, [pc, #48]	; (17210 <__libc_init_array+0x44>)
   171e0:	f7f9 f88e 	bl	10300 <_init>
   171e4:	1ba4      	subs	r4, r4, r6
   171e6:	10a4      	asrs	r4, r4, #2
   171e8:	2500      	movs	r5, #0
   171ea:	42a5      	cmp	r5, r4
   171ec:	d105      	bne.n	171fa <__libc_init_array+0x2e>
   171ee:	bd70      	pop	{r4, r5, r6, pc}
   171f0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   171f4:	4798      	blx	r3
   171f6:	3501      	adds	r5, #1
   171f8:	e7ee      	b.n	171d8 <__libc_init_array+0xc>
   171fa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   171fe:	4798      	blx	r3
   17200:	3501      	adds	r5, #1
   17202:	e7f2      	b.n	171ea <__libc_init_array+0x1e>
   17204:	0001030c 	.word	0x0001030c
   17208:	0001030c 	.word	0x0001030c
   1720c:	0001030c 	.word	0x0001030c
   17210:	0001031c 	.word	0x0001031c

00017214 <memset>:
   17214:	4402      	add	r2, r0
   17216:	4603      	mov	r3, r0
   17218:	4293      	cmp	r3, r2
   1721a:	d100      	bne.n	1721e <memset+0xa>
   1721c:	4770      	bx	lr
   1721e:	f803 1b01 	strb.w	r1, [r3], #1
   17222:	e7f9      	b.n	17218 <memset+0x4>

00017224 <_raise_r>:
   17224:	291f      	cmp	r1, #31
   17226:	b538      	push	{r3, r4, r5, lr}
   17228:	4604      	mov	r4, r0
   1722a:	460d      	mov	r5, r1
   1722c:	d904      	bls.n	17238 <_raise_r+0x14>
   1722e:	2316      	movs	r3, #22
   17230:	6003      	str	r3, [r0, #0]
   17232:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   17236:	bd38      	pop	{r3, r4, r5, pc}
   17238:	6c42      	ldr	r2, [r0, #68]	; 0x44
   1723a:	b112      	cbz	r2, 17242 <_raise_r+0x1e>
   1723c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
   17240:	b94b      	cbnz	r3, 17256 <_raise_r+0x32>
   17242:	4620      	mov	r0, r4
   17244:	f000 f830 	bl	172a8 <_getpid_r>
   17248:	462a      	mov	r2, r5
   1724a:	4601      	mov	r1, r0
   1724c:	4620      	mov	r0, r4
   1724e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   17252:	f000 b817 	b.w	17284 <_kill_r>
   17256:	2b01      	cmp	r3, #1
   17258:	d00a      	beq.n	17270 <_raise_r+0x4c>
   1725a:	1c59      	adds	r1, r3, #1
   1725c:	d103      	bne.n	17266 <_raise_r+0x42>
   1725e:	2316      	movs	r3, #22
   17260:	6003      	str	r3, [r0, #0]
   17262:	2001      	movs	r0, #1
   17264:	e7e7      	b.n	17236 <_raise_r+0x12>
   17266:	2400      	movs	r4, #0
   17268:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
   1726c:	4628      	mov	r0, r5
   1726e:	4798      	blx	r3
   17270:	2000      	movs	r0, #0
   17272:	e7e0      	b.n	17236 <_raise_r+0x12>

00017274 <raise>:
   17274:	4b02      	ldr	r3, [pc, #8]	; (17280 <raise+0xc>)
   17276:	4601      	mov	r1, r0
   17278:	6818      	ldr	r0, [r3, #0]
   1727a:	f7ff bfd3 	b.w	17224 <_raise_r>
   1727e:	bf00      	nop
   17280:	100001f0 	.word	0x100001f0

00017284 <_kill_r>:
   17284:	b538      	push	{r3, r4, r5, lr}
   17286:	4c07      	ldr	r4, [pc, #28]	; (172a4 <_kill_r+0x20>)
   17288:	2300      	movs	r3, #0
   1728a:	4605      	mov	r5, r0
   1728c:	4608      	mov	r0, r1
   1728e:	4611      	mov	r1, r2
   17290:	6023      	str	r3, [r4, #0]
   17292:	f7fb fc3b 	bl	12b0c <_kill>
   17296:	1c43      	adds	r3, r0, #1
   17298:	d102      	bne.n	172a0 <_kill_r+0x1c>
   1729a:	6823      	ldr	r3, [r4, #0]
   1729c:	b103      	cbz	r3, 172a0 <_kill_r+0x1c>
   1729e:	602b      	str	r3, [r5, #0]
   172a0:	bd38      	pop	{r3, r4, r5, pc}
   172a2:	bf00      	nop
   172a4:	100005e0 	.word	0x100005e0

000172a8 <_getpid_r>:
   172a8:	f7fb bc1e 	b.w	12ae8 <_getpid>
   172ac:	75746552 	.word	0x75746552
   172b0:	64656e72 	.word	0x64656e72
   172b4:	74616420 	.word	0x74616420
   172b8:	25203a61 	.word	0x25203a61
   172bc:	78252078 	.word	0x78252078
   172c0:	0000000a 	.word	0x0000000a
   172c4:	32345b1b 	.word	0x32345b1b
   172c8:	2020206d 	.word	0x2020206d
   172cc:	464e4920 	.word	0x464e4920
   172d0:	305b1b4f 	.word	0x305b1b4f
   172d4:	6d34393b 	.word	0x6d34393b
   172d8:	3a73253a 	.word	0x3a73253a
   172dc:	3b305b1b 	.word	0x3b305b1b
   172e0:	256d3239 	.word	0x256d3239
   172e4:	5b1b3a73 	.word	0x5b1b3a73
   172e8:	33393b30 	.word	0x33393b30
   172ec:	3e64256d 	.word	0x3e64256d
   172f0:	305b1b20 	.word	0x305b1b20
   172f4:	6d37333b 	.word	0x6d37333b
   172f8:	72617453 	.word	0x72617453
   172fc:	305b1b74 	.word	0x305b1b74
   17300:	ff000a6d 	.word	0xff000a6d

00017304 <main::file>:
   17304:	6e69616d 7070632e ffffff00              main.cpp....

00017310 <main::__PRETTY_FUNCTION__>:
   17310:	20746e69 6e69616d ff002928 63617453     int main()..Stac
   17320:	6544206b 20687470 7a25203d 00000a64     k Depth = %zd...
   17330:	25232020 203a757a 70257830 0000000a       #%zu: 0x%p....
   17340:	6e75520a 6874203a 6f662065 776f6c6c     .Run: the follow
   17350:	20676e69 6d6d6f63 20646e61 79206e69     ing command in y
   17360:	2072756f 6a6f7270 20746365 65726964     our project dire
   17370:	726f7463 00000079 1b20200a 333b315b     ctory....  .[1;3
   17380:	616d6d37 7320656b 6b636174 63617274     7mmake stacktrac
   17390:	73252d65 41525420 3d534543 00000022     e-%s TRACES="...
   173a0:	70257830 00000000 25783020 00000070     0x%p.... 0x%p...
   173b0:	5b1b0a22 00006d30 73696854 6c697720     "..[0m..This wil
   173c0:	6572206c 74726f70 65687420 6c696620     l report the fil
   173d0:	6e612065 696c2064 6e20656e 65626d75     e and line numbe
   173e0:	68742072 6c207461 74206465 6874206f     r that led to th
   173f0:	66207369 74636e75 206e6f69 6e696562     is function bein
   17400:	61632067 64656c6c 0000002e 6c707061     g called....appl
   17410:	74616369 006e6f69 31345b1b 4952436d     ication..[41mCRI
   17420:	41434954 305b1b4c 6d34393b 3a73253a     TICAL.[0;94m:%s:
   17430:	3b305b1b 256d3239 5b1b3a73 33393b30     .[0;92m%s:.[0;93
   17440:	3e64256d 305b1b20 6d37333b 65737341     m%d> .[0;37mAsse
   17450:	6f697472 6146206e 72756c69 43202c65     rtion Failure, C
   17460:	69646e6f 6e6f6974 73655420 3a646574     ondition Tested:
   17470:	65702820 68706972 6c617265 7669645f      (peripheral_div
   17480:	72656469 203d3c20 200a2934 20202020     ider <= 4).     
   17490:	20202020 76694420 72656469 73756d20          Divider mus
   174a0:	74276e74 63786520 20646565 5b1b3233     tn't exceed 32.[
   174b0:	5b1b6d30 000a6d30 6972500a 6e69746e     0m.[0m...Printin
   174c0:	74532067 206b6361 63617254 000a3a65     g Stack Trace:..
   174d0:	31345b1b 4952436d 41434954 305b1b4c     .[41mCRITICAL.[0
   174e0:	6d34393b 3a73253a 3b305b1b 256d3239     ;94m:%s:.[0;92m%
   174f0:	5b1b3a73 33393b30 3e64256d 305b1b20     s:.[0;93m%d> .[0
   17500:	6d37333b 65737341 6f697472 6146206e     ;37mAssertion Fa
   17510:	72756c69 43202c65 69646e6f 6e6f6974     ilure, Condition
   17520:	73655420 3a646574 65642820 65726973      Tested: (desire
   17530:	70735f64 5f646565 6d5f6e69 3c207a68     d_speed_in_mhz <
   17540:	34383320 20262620 69736564 5f646572      384 && desired_
   17550:	65657073 6e695f64 7a686d5f 31203e20     speed_in_mhz > 1
   17560:	200a2932 20202020 20202020 65724620     2).          Fre
   17570:	6e657571 6d207963 20747375 6c206562     quency must be l
   17580:	7265776f 61687420 3833206e 484d2034     ower than 384 MH
   17590:	646e617a 65726720 72657461 61687420     zand greater tha
   175a0:	726f206e 75716520 74206c61 3231206f     n or equal to 12
   175b0:	7a484d20 6d305b1b 6d305b1b 0000000a      MHz.[0m.[0m....
   175c0:	31345b1b 4952436d 41434954 305b1b4c     .[41mCRITICAL.[0
   175d0:	6d34393b 3a73253a 3b305b1b 256d3239     ;94m:%s:.[0;92m%
   175e0:	5b1b3a73 33393b30 3e64256d 305b1b20     s:.[0;93m%d> .[0
   175f0:	6d37333b 65737341 6f697472 6146206e     ;37mAssertion Fa
   17600:	72756c69 43202c65 69646e6f 6e6f6974     ilure, Condition
   17610:	73655420 3a646574 69642820 65646976      Tested: (divide
   17620:	61765f72 2065756c 2938203c 2020200a     r_value < 8).   
   17630:	20202020 50202020 64204c4c 64697669            PLL divid
   17640:	76207265 65756c61 6e657720 756f2074     er value went ou
   17650:	666f2074 756f6220 1b73646e 1b6d305b     t of bounds.[0m.
   17660:	0a6d305b 00000000 31345b1b 4952436d     [0m......[41mCRI
   17670:	41434954 305b1b4c 6d34393b 3a73253a     TICAL.[0;94m:%s:
   17680:	3b305b1b 256d3239 5b1b3a73 33393b30     .[0;92m%s:.[0;93
   17690:	3e64256d 305b1b20 6d37333b 65737341     m%d> .[0;37mAsse
   176a0:	6f697472 6146206e 72756c69 43202c65     rtion Failure, C
   176b0:	69646e6f 6e6f6974 73655420 3a646574     ondition Tested:
   176c0:	61662820 2965736c 2020200a 20202020      (false).       
   176d0:	50202020 6c204c4c 206b636f 6c756f63        PLL lock coul
   176e0:	6f6e2064 65622074 74736520 696c6261     d not be establi
   176f0:	64656873 66656220 2065726f 656d6974     shed before time
   17700:	1b74756f 1b6d305b 0a6d305b 00000000     out.[0m.[0m.....
   17710:	31345b1b 4952436d 41434954 305b1b4c     .[41mCRITICAL.[0
   17720:	6d34393b 3a73253a 3b305b1b 256d3239     ;94m:%s:.[0;92m%
   17730:	5b1b3a73 33393b30 3e64256d 305b1b20     s:.[0;93m%d> .[0
   17740:	6d37333b 65737341 6f697472 6146206e     ;37mAssertion Fa
   17750:	72756c69 43202c65 69646e6f 6e6f6974     ilure, Condition
   17760:	73655420 3a646574 70632820 69645f75      Tested: (cpu_di
   17770:	65646976 203c2072 0a293233 20202020     vider < 32).    
   17780:	20202020 69442020 65646976 756d2072           Divider mu
   17790:	276e7473 78652074 64656563 1b323320     stn't exceed 32.
   177a0:	1b6d305b 0a6d305b 00000000 31345b1b     [0m.[0m......[41
   177b0:	4952436d 41434954 305b1b4c 6d34393b     mCRITICAL.[0;94m
   177c0:	3a73253a 3b305b1b 256d3239 5b1b3a73     :%s:.[0;92m%s:.[
   177d0:	33393b30 3e64256d 305b1b20 6d37333b     0;93m%d> .[0;37m
   177e0:	65737341 6f697472 6146206e 72756c69     Assertion Failur
   177f0:	43202c65 69646e6f 6e6f6974 73655420     e, Condition Tes
   17800:	3a646574 72662820 65757165 2079636e     ted: (frequency 
   17810:	30203d21 20200a29 20202020 20202020     != 0).          
   17820:	6e6e6143 6820746f 20657661 6f72657a     Cannot have zero
   17830:	63697420 7020736b 6d207265 6f726369      ticks per micro
   17840:	6f636573 202c646e 61656c70 63206573     second, please c
   17850:	736f6f68 20312065 6d20726f 2e65726f     hoose 1 or more.
   17860:	6d305b1b 6d305b1b 0000000a 33345b1b     .[0m.[0m.....[43
   17870:	4157206d 4e494e52 305b1b47 6d34393b     m WARNING.[0;94m
   17880:	3a73253a 3b305b1b 256d3239 5b1b3a73     :%s:.[0;92m%s:.[
   17890:	33393b30 3e64256d 305b1b20 6d37333b     0;93m%d> .[0;37m
   178a0:	74737953 54206d65 72656d69 73616820     System Timer has
   178b0:	49414620 2044454c 73206f74 74726174      FAILED to start
   178c0:	305b1b21 305b1b6d ff000a6d              !.[0m.[0m...

000178cc <Lpc40xxSystemController::SetPeripheralClockDivider(unsigned char)::file>:
   178cc:	74737973 635f6d65 72746e6f 656c6c6f     system_controlle
   178dc:	70682e72 ffff0070                       r.hpp...

000178e4 <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)::file>:
   178e4:	74737973 635f6d65 72746e6f 656c6c6f     system_controlle
   178f4:	70682e72 ffff0070                       r.hpp...

000178fc <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)::file>:
   178fc:	74737973 635f6d65 72746e6f 656c6c6f     system_controlle
   1790c:	70682e72 ffff0070                       r.hpp...

00017914 <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)::file>:
   17914:	74737973 635f6d65 72746e6f 656c6c6f     system_controlle
   17924:	70682e72 ffff0070                       r.hpp...

0001792c <Lpc40xxSystemController::SetCpuClockDivider(unsigned char)::file>:
   1792c:	74737973 635f6d65 72746e6f 656c6c6f     system_controlle
   1793c:	70682e72 ffff0070                       r.hpp...

00017944 <Timer::kPowerbit>:
   17944:	00000001 00000002 00000016 00000017     ................

00017954 <Timer::kTimerIrq>:
   17954:	04030201                                ....

00017958 <Timer::kTimerIsr>:
   17958:	00012329 00012365 000123a1 000123dd     )#..e#...#...#..

00017968 <Timer::Initialize(unsigned long, void (*)(), long)::file>:
   17968:	656d6974 70682e72 ffff0070              timer.hpp...

00017974 <Uart::kTxUartPortFunction>:
   17974:	05020201                                ....

00017978 <Uart::kRxUartPortFunction>:
   17978:	03020201                                ....

0001797c <Uart::kPowerbit>:
   1797c:	00000003 00000018 00000019 00000008     ................

0001798c <LowLevelInit()::file>:
   1798c:	72617473 2e707574 00707063              startup.cpp.

00017998 <vtable for Uart>:
	...
   179a0:	00011921 000119ed 00011b1d 00011c51     !...........Q...
   179b0:	fffffffc 00000000 000108f5 00010985     ................
   179c0:	000109dd 000109f5 00010a09 00010a49     ............I...
   179d0:	00010a79                                y...

000179d4 <vtable for Timer>:
	...
   179dc:	00011689 000117ed 000118e5 fffffffc     ................
   179ec:	00000000 000108f5 00010985 000109dd     ................
   179fc:	000109f5 00010a09 00010a49 00010a79     ........I...y...

00017a0c <vtable for Pin>:
	...
   17a14:	00011059 000110d1 00011151 000111c5     Y.......Q.......
   17a24:	00011239 000112b5 00011331 000113a5     9.......1.......
   17a34:	00011421 00011495 00011509 000115e1     !...............
   17a44:	0001160d                                ....

00017a48 <vtable for SystemTimer>:
	...
   17a50:	00010ef5 00010f29 00010fc5 fffffffc     ....)...........
   17a60:	00000000 000108f5 00010985 000109dd     ................
   17a70:	000109f5 00010a09 00010a49 00010a79     ........I...y...

00017a80 <vtable for Lpc40xxSystemController>:
	...
   17a88:	000108f5 00010985 000109dd 000109f5     ................
   17a98:	00010a09 00010a49 00010a79              ....I...y...

00017aa4 <Lpc40xxSystemController::SetPeripheralClockDivider(unsigned char)::__PRETTY_FUNCTION__>:
   17aa4:	74726976 206c6175 64696f76 63704c20     virtual void Lpc
   17ab4:	78783034 74737953 6f436d65 6f72746e     40xxSystemContro
   17ac4:	72656c6c 65533a3a 72655074 65687069     ller::SetPeriphe
   17ad4:	436c6172 6b636f6c 69766944 28726564     ralClockDivider(
   17ae4:	746e6975 29745f38 ffffff00              uint8_t)....

00017af0 <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)::__PRETTY_FUNCTION__>:
   17af0:	746e6975 745f3233 63704c20 78783034     uint32_t Lpc40xx
   17b00:	74737953 6f436d65 6f72746e 72656c6c     SystemController
   17b10:	65533a3a 69614d74 6c6c506e 63704c28     ::SetMainPll(Lpc
   17b20:	78783034 74737953 6f436d65 6f72746e     40xxSystemContro
   17b30:	72656c6c 6c503a3a 706e496c 202c7475     ller::PllInput, 
   17b40:	746e6975 745f3631 ffff0029              uint16_t)...

00017b4c <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)::__PRETTY_FUNCTION__>:
   17b4c:	746e6975 745f3233 63704c20 78783034     uint32_t Lpc40xx
   17b5c:	74737953 6f436d65 6f72746e 72656c6c     SystemController
   17b6c:	61433a3a 6c75636c 50657461 4c286c6c     ::CalculatePll(L
   17b7c:	30346370 79537878 6d657473 746e6f43     pc40xxSystemCont
   17b8c:	6c6c6f72 3a3a7265 496c6c50 7475706e     roller::PllInput
   17b9c:	6975202c 3631746e 0029745f              , uint16_t).

00017ba8 <Lpc40xxSystemController::SetCpuClockDivider(unsigned char)::__PRETTY_FUNCTION__>:
   17ba8:	64696f76 63704c20 78783034 74737953     void Lpc40xxSyst
   17bb8:	6f436d65 6f72746e 72656c6c 65533a3a     emController::Se
   17bc8:	75704374 636f6c43 7669446b 72656469     tCpuClockDivider
   17bd8:	6e697528 745f3874 ffff0029              (uint8_t)...

00017be4 <Timer::Initialize(unsigned long, void (*)(), long)::__PRETTY_FUNCTION__>:
   17be4:	74726976 206c6175 64696f76 6d695420     virtual void Tim
   17bf4:	3a3a7265 74696e49 696c6169 7528657a     er::Initialize(u
   17c04:	33746e69 2c745f32 72734920 6e696f50     int32_t, IsrPoin
   17c14:	2c726574 746e6920 745f3233 ffff0029     ter, int32_t)...

00017c24 <LowLevelInit()::__PRETTY_FUNCTION__>:
   17c24:	64696f76 776f4c20 6576654c 696e496c     void LowLevelIni
   17c34:	00292874 63617453 6544206b 20687470     t().Stack Depth 
   17c44:	7a25203d 00000a64 25232020 203a757a     = %zd...  #%zu: 
   17c54:	70257830 0000000a 6e75520a 6874203a     0x%p.....Run: th
   17c64:	6f662065 776f6c6c 20676e69 6d6d6f63     e following comm
   17c74:	20646e61 79206e69 2072756f 6a6f7270     and in your proj
   17c84:	20746365 65726964 726f7463 00000079     ect directory...
   17c94:	1b20200a 333b315b 616d6d37 7320656b     .  .[1;37mmake s
   17ca4:	6b636174 63617274 73252d65 41525420     tacktrace-%s TRA
   17cb4:	3d534543 00000022 70257830 00000000     CES="...0x%p....
   17cc4:	25783020 00000070 5b1b0a22 00006d30      0x%p..."..[0m..
   17cd4:	73696854 6c697720 6572206c 74726f70     This will report
   17ce4:	65687420 6c696620 6e612065 696c2064      the file and li
   17cf4:	6e20656e 65626d75 68742072 6c207461     ne number that l
   17d04:	74206465 6874206f 66207369 74636e75     ed to this funct
   17d14:	206e6f69 6e696562 61632067 64656c6c     ion being called
   17d24:	0000002e 6c707061 74616369 006e6f69     ....application.
   17d34:	31345b1b 4952436d 41434954 305b1b4c     .[41mCRITICAL.[0
   17d44:	6d34393b 3a73253a 3b305b1b 256d3239     ;94m:%s:.[0;92m%
   17d54:	5b1b3a73 33393b30 3e64256d 305b1b20     s:.[0;93m%d> .[0
   17d64:	6d37333b 65737341 6f697472 6146206e     ;37mAssertion Fa
   17d74:	72756c69 43202c65 69646e6f 6e6f6974     ilure, Condition
   17d84:	73655420 3a646574 73692820 3d212072      Tested: (isr !=
   17d94:	746e4920 75727265 6f4c7470 70756b6f      InterruptLookup
   17da4:	646e6148 2972656c 2020200a 20202020     Handler).       
   17db4:	4e202020 5349206f 6f662052 20646e75        No ISR found 
   17dc4:	20726f66 20656874 74636576 2520726f     for the vector %
   17dd4:	305b1b75 305b1b6d 00000a6d 6972500a     u.[0m.[0m....Pri
   17de4:	6e69746e 74532067 206b6361 63617254     nting Stack Trac
   17df4:	000a3a65 31345b1b 7261486d 61462064     e:...[41mHard Fa
   17e04:	20746c75 65637845 6f697470 634f206e     ult Exception Oc
   17e14:	72727563 0a216465 6d305b1b 00000000     curred!..[0m....
   17e24:	203a3072 30257830 2c586c38 3a317220     r0: 0x%08lX, r1:
   17e34:	25783020 586c3830 3272202c 7830203a      0x%08lX, r2: 0x
   17e44:	6c383025 72202c58 30203a33 38302578     %08lX, r3: 0x%08
   17e54:	000a586c 3a323172 25783020 586c3830     lX..r12: 0x%08lX
   17e64:	726c202c 7830203a 6c383025 70202c58     , lr: 0x%08lX, p
   17e74:	30203a63 38302578 202c586c 3a727370     c: 0x%08lX, psr:
   17e84:	25783020 586c3830 ffff000a               0x%08lX....

00017e90 <InterruptLookupHandler::file>:
   17e90:	65746e69 70757272 70632e74 ffff0070     interrupt.cpp...

00017ea0 <InterruptLookupHandler::__PRETTY_FUNCTION__>:
   17ea0:	64696f76 746e4920 75727265 6f4c7470     void InterruptLo
   17eb0:	70756b6f 646e6148 2872656c ffff0029     okupHandler()...

00017ec0 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)::pow10>:
   17ec0:	3f800000 41200000 42c80000 447a0000     ...?.. A...B..zD
   17ed0:	461c4000 47c35000 49742400 4b189680     .@.F.P.G.$tI...K
   17ee0:	4cbebc20 4e6e6b28 63617453 6544206b      ..L(knNStack De
   17ef0:	20687470 7a25203d 00000a64 25232020     pth = %zd...  #%
   17f00:	203a757a 70257830 0000000a 6e75520a     zu: 0x%p.....Run
   17f10:	6874203a 6f662065 776f6c6c 20676e69     : the following 
   17f20:	6d6d6f63 20646e61 79206e69 2072756f     command in your 
   17f30:	6a6f7270 20746365 65726964 726f7463     project director
   17f40:	00000079 1b20200a 333b315b 616d6d37     y....  .[1;37mma
   17f50:	7320656b 6b636174 63617274 73252d65     ke stacktrace-%s
   17f60:	41525420 3d534543 00000022 70257830      TRACES="...0x%p
   17f70:	00000000 25783020 00000070 5b1b0a22     .... 0x%p..."..[
   17f80:	00006d30 73696854 6c697720 6572206c     0m..This will re
   17f90:	74726f70 65687420 6c696620 6e612065     port the file an
   17fa0:	696c2064 6e20656e 65626d75 68742072     d line number th
   17fb0:	6c207461 74206465 6874206f 66207369     at led to this f
   17fc0:	74636e75 206e6f69 6e696562 61632067     unction being ca
   17fd0:	64656c6c 0000002e 6c707061 74616369     lled....applicat
   17fe0:	006e6f69 33345b1b 4157206d 4e494e52     ion..[43m WARNIN
   17ff0:	305b1b47 6d34393b 3a73253a 3b305b1b     G.[0;94m:%s:.[0;
   18000:	256d3239 5b1b3a73 33393b30 3e64256d     92m%s:.[0;93m%d>
   18010:	305b1b20 6d37333b 74726f50 20642520      .[0;37mPort %d 
   18020:	6e6e6163 6220746f 73752065 66206465     cannot be used f
   18030:	4520726f 72657478 206c616e 65746e49     or External Inte
   18040:	70757272 202e7374 6465654e 206f7420     rrupts. Need to 
   18050:	20657375 4f495047 206e6f20 74726f50     use GPIO on Port
   18060:	6f203020 2e322072 6d305b1b 6d305b1b      0 or 2..[0m.[0m
   18070:	0000000a 33345b1b 4157206d 4e494e52     .....[43m WARNIN
   18080:	305b1b47 6d34393b 3a73253a 3b305b1b     G.[0;94m:%s:.[0;
   18090:	256d3239 5b1b3a73 33393b30 3e64256d     92m%s:.[0;93m%d>
   180a0:	305b1b20 6d37333b 65676445 20642520      .[0;37mEdge %d 
   180b0:	6e6e6163 6220746f 73752065 66206465     cannot be used f
   180c0:	4520726f 72657478 206c616e 65746e49     or External Inte
   180d0:	70757272 4e2e7374 20646565 75206f74     rrupts.Need to u
   180e0:	61206573 73697220 2c676e69 6c616620     se a rising, fal
   180f0:	676e696c 726f202c 746f6220 6f632068     ling, or both co
   18100:	6769666e 74617275 2e6e6f69 6d305b1b     nfiguration..[0m
   18110:	0000000a 31345b1b 4952436d 41434954     .....[41mCRITICA
   18120:	305b1b4c 6d34393b 3a73253a 3b305b1b     L.[0;94m:%s:.[0;
   18130:	256d3239 5b1b3a73 33393b30 3e64256d     92m%s:.[0;93m%d>
   18140:	305b1b20 6d37333b 65737341 6f697472      .[0;37mAssertio
   18150:	6146206e 72756c69 43202c65 69646e6f     n Failure, Condi
   18160:	6e6f6974 73655420 3a646574 65702820     tion Tested: (pe
   18170:	68706972 6c617265 7669645f 72656469     ripheral_divider
   18180:	203d3c20 200a2934 20202020 20202020      <= 4).         
   18190:	76694420 72656469 73756d20 74276e74      Divider mustn't
   181a0:	63786520 20646565 5b1b3233 5b1b6d30      exceed 32.[0m.[
   181b0:	000a6d30 6972500a 6e69746e 74532067     0m...Printing St
   181c0:	206b6361 63617254 000a3a65 31345b1b     ack Trace:...[41
   181d0:	4952436d 41434954 305b1b4c 6d34393b     mCRITICAL.[0;94m
   181e0:	3a73253a 3b305b1b 256d3239 5b1b3a73     :%s:.[0;92m%s:.[
   181f0:	33393b30 3e64256d 305b1b20 6d37333b     0;93m%d> .[0;37m
   18200:	65737341 6f697472 6146206e 72756c69     Assertion Failur
   18210:	43202c65 69646e6f 6e6f6974 73655420     e, Condition Tes
   18220:	3a646574 65642820 65726973 70735f64     ted: (desired_sp
   18230:	5f646565 6d5f6e69 3c207a68 34383320     eed_in_mhz < 384
   18240:	20262620 69736564 5f646572 65657073      && desired_spee
   18250:	6e695f64 7a686d5f 31203e20 200a2932     d_in_mhz > 12). 
   18260:	20202020 20202020 65724620 6e657571              Frequen
   18270:	6d207963 20747375 6c206562 7265776f     cy must be lower
   18280:	61687420 3833206e 484d2034 646e617a      than 384 MHzand
   18290:	65726720 72657461 61687420 726f206e      greater than or
   182a0:	75716520 74206c61 3231206f 7a484d20      equal to 12 MHz
   182b0:	6d305b1b 6d305b1b 0000000a 31345b1b     .[0m.[0m.....[41
   182c0:	4952436d 41434954 305b1b4c 6d34393b     mCRITICAL.[0;94m
   182d0:	3a73253a 3b305b1b 256d3239 5b1b3a73     :%s:.[0;92m%s:.[
   182e0:	33393b30 3e64256d 305b1b20 6d37333b     0;93m%d> .[0;37m
   182f0:	65737341 6f697472 6146206e 72756c69     Assertion Failur
   18300:	43202c65 69646e6f 6e6f6974 73655420     e, Condition Tes
   18310:	3a646574 69642820 65646976 61765f72     ted: (divider_va
   18320:	2065756c 2938203c 2020200a 20202020     lue < 8).       
   18330:	50202020 64204c4c 64697669 76207265        PLL divider v
   18340:	65756c61 6e657720 756f2074 666f2074     alue went out of
   18350:	756f6220 1b73646e 1b6d305b 0a6d305b      bounds.[0m.[0m.
   18360:	00000000 31345b1b 4952436d 41434954     .....[41mCRITICA
   18370:	305b1b4c 6d34393b 3a73253a 3b305b1b     L.[0;94m:%s:.[0;
   18380:	256d3239 5b1b3a73 33393b30 3e64256d     92m%s:.[0;93m%d>
   18390:	305b1b20 6d37333b 65737341 6f697472      .[0;37mAssertio
   183a0:	6146206e 72756c69 43202c65 69646e6f     n Failure, Condi
   183b0:	6e6f6974 73655420 3a646574 61662820     tion Tested: (fa
   183c0:	2965736c 2020200a 20202020 50202020     lse).          P
   183d0:	6c204c4c 206b636f 6c756f63 6f6e2064     LL lock could no
   183e0:	65622074 74736520 696c6261 64656873     t be established
   183f0:	66656220 2065726f 656d6974 1b74756f      before timeout.
   18400:	1b6d305b 0a6d305b 00000000 31345b1b     [0m.[0m......[41
   18410:	4952436d 41434954 305b1b4c 6d34393b     mCRITICAL.[0;94m
   18420:	3a73253a 3b305b1b 256d3239 5b1b3a73     :%s:.[0;92m%s:.[
   18430:	33393b30 3e64256d 305b1b20 6d37333b     0;93m%d> .[0;37m
   18440:	65737341 6f697472 6146206e 72756c69     Assertion Failur
   18450:	43202c65 69646e6f 6e6f6974 73655420     e, Condition Tes
   18460:	3a646574 70632820 69645f75 65646976     ted: (cpu_divide
   18470:	203c2072 0a293233 20202020 20202020     r < 32).        
   18480:	69442020 65646976 756d2072 276e7473       Divider mustn'
   18490:	78652074 64656563 1b323320 1b6d305b     t exceed 32.[0m.
   184a0:	0a6d305b 00000000 35345b1b 2020206d     [0m......[45m   
   184b0:	4f525245 305b1b52 6d34393b 3a73253a     ERROR.[0;94m:%s:
   184c0:	3b305b1b 256d3239 5b1b3a73 33393b30     .[0;92m%s:.[0;93
   184d0:	3e64256d 305b1b20 6d37333b 6c696146     m%d> .[0;37mFail
   184e0:	74206465 6e69206f 61697469 53206574     ed to initiate S
   184f0:	6d204950 2065646f 68746977 74206e69     PI mode within t
   18500:	6f656d69 202e7475 726f6241 676e6974     imeout. Aborting
   18510:	305b1b21 00000a6d 35345b1b 2020206d     !.[0m....[45m   
   18520:	4f525245 305b1b52 6d34393b 3a73253a     ERROR.[0;94m:%s:
   18530:	3b305b1b 256d3239 5b1b3a73 33393b30     .[0;92m%s:.[0;93
   18540:	3e64256d 305b1b20 6d37333b 70736552     m%d> .[0;37mResp
   18550:	65736e6f 746e6920 69726765 63207974     onse integrity c
   18560:	6b636568 69616620 2e64656c 6f624120     heck failed. Abo
   18570:	6e697472 5b1b2167 000a6d30 35345b1b     rting!.[0m...[45
   18580:	2020206d 4f525245 305b1b52 6d34393b     m   ERROR.[0;94m
   18590:	3a73253a 3b305b1b 256d3239 5b1b3a73     :%s:.[0;92m%s:.[
   185a0:	33393b30 3e64256d 305b1b20 6d37333b     0;93m%d> .[0;37m
   185b0:	75736e55 726f7070 20646574 746c6f76     Unsupported volt
   185c0:	20656761 75206e69 202e6573 726f6241     age in use. Abor
   185d0:	676e6974 305b1b21 00000a6d 35345b1b     ting!.[0m....[45
   185e0:	2020206d 4f525245 305b1b52 6d34393b     m   ERROR.[0;94m
   185f0:	3a73253a 3b305b1b 256d3239 5b1b3a73     :%s:.[0;92m%s:.[
   18600:	33393b30 3e64256d 305b1b20 6d37333b     0;93m%d> .[0;37m
   18610:	43204453 20647261 656d6974 756f2064     SD Card timed ou
   18620:	41202e74 74726f62 21676e69 6d305b1b     t. Aborting!.[0m
   18630:	0000000a 65757274 00000000 736c6166     ....true....fals
   18640:	00000065 35345b1b 2020206d 4f525245     e....[45m   ERRO
   18650:	305b1b52 6d34393b 3a73253a 3b305b1b     R.[0;94m:%s:.[0;
   18660:	256d3239 5b1b3a73 33393b30 3e64256d     92m%s:.[0;93m%d>
   18670:	305b1b20 6d37333b 6c696857 65522065      .[0;37mWhile Re
   18680:	6e696461 6c422067 206b636f 20642523     ading Block #%d 
   18690:	31435243 5b1b3a36 000a6d30 35345b1b     CRC16:.[0m...[45
   186a0:	2020206d 4f525245 305b1b52 6d34393b     m   ERROR.[0;94m
   186b0:	3a73253a 3b305b1b 256d3239 5b1b3a73     :%s:.[0;92m%s:.[
   186c0:	33393b30 3e64256d 305b1b20 6d37333b     0;93m%d> .[0;37m
   186d0:	65707845 64657463 78302720 58343025     Expected '0x%04X
   186e0:	305b1b27 00000a6d 35345b1b 2020206d     '.[0m....[45m   
   186f0:	4f525245 305b1b52 6d34393b 3a73253a     ERROR.[0;94m:%s:
   18700:	3b305b1b 256d3239 5b1b3a73 33393b30     .[0;92m%s:.[0;93
   18710:	3e64256d 305b1b20 6d37333b 20746f47     m%d> .[0;37mGot 
   18720:	25783027 27583430 6d305b1b 0000000a     '0x%04X'.[0m....
   18730:	35345b1b 2020206d 4f525245 305b1b52     .[45m   ERROR.[0
   18740:	6d34393b 3a73253a 3b305b1b 256d3239     ;94m:%s:.[0;92m%
   18750:	5b1b3a73 33393b30 3e64256d 305b1b20     s:.[0;93m%d> .[0
   18760:	6d37333b 64616552 646d4320 73617720     ;37mRead Cmd was
   18770:	746f6e20 6b636120 6c776f6e 65676465      not acknowledge
   18780:	72702064 7265706f 1b21796c 0a6d305b     d properly!.[0m.
   18790:	00000000 35345b1b 2020206d 4f525245     .....[45m   ERRO
   187a0:	305b1b52 6d34393b 3a73253a 3b305b1b     R.[0;94m:%s:.[0;
   187b0:	256d3239 5b1b3a73 33393b30 3e64256d     92m%s:.[0;93m%d>
   187c0:	305b1b20 6d37333b 61726150 6574656d      .[0;37mParamete
   187d0:	72452072 25203a72 305b1b73 00000a6d     r Err: %s.[0m...
   187e0:	35345b1b 2020206d 4f525245 305b1b52     .[45m   ERROR.[0
   187f0:	6d34393b 3a73253a 3b305b1b 256d3239     ;94m:%s:.[0;92m%
   18800:	5b1b3a73 33393b30 3e64256d 305b1b20     s:.[0;93m%d> .[0
   18810:	6d37333b 72646441 72724520 7325203a     ;37mAddr Err: %s
   18820:	6d305b1b 0000000a 35345b1b 2020206d     .[0m.....[45m   
   18830:	4f525245 305b1b52 6d34393b 3a73253a     ERROR.[0;94m:%s:
   18840:	3b305b1b 256d3239 5b1b3a73 33393b30     .[0;92m%s:.[0;93
   18850:	3e64256d 305b1b20 6d37333b 73617245     m%d> .[0;37mEras
   18860:	65532065 72452071 25203a72 305b1b73     e Seq Err: %s.[0
   18870:	00000a6d 35345b1b 2020206d 4f525245     m....[45m   ERRO
   18880:	305b1b52 6d34393b 3a73253a 3b305b1b     R.[0;94m:%s:.[0;
   18890:	256d3239 5b1b3a73 33393b30 3e64256d     92m%s:.[0;93m%d>
   188a0:	305b1b20 6d37333b 206d6f43 20435243      .[0;37mCom CRC 
   188b0:	3a727245 1b732520 0a6d305b 00000000     Err: %s.[0m.....
   188c0:	35345b1b 2020206d 4f525245 305b1b52     .[45m   ERROR.[0
   188d0:	6d34393b 3a73253a 3b305b1b 256d3239     ;94m:%s:.[0;92m%
   188e0:	5b1b3a73 33393b30 3e64256d 305b1b20     s:.[0;93m%d> .[0
   188f0:	6d37333b 656c6c49 206c6167 20646d43     ;37mIllegal Cmd 
   18900:	3a727245 1b732520 0a6d305b 00000000     Err: %s.[0m.....
   18910:	35345b1b 2020206d 4f525245 305b1b52     .[45m   ERROR.[0
   18920:	6d34393b 3a73253a 3b305b1b 256d3239     ;94m:%s:.[0;92m%
   18930:	5b1b3a73 33393b30 3e64256d 305b1b20     s:.[0;93m%d> .[0
   18940:	6d37333b 73617245 65522065 3a746573     ;37mErase Reset:
   18950:	1b732520 0a6d305b 00000000 35345b1b      %s.[0m......[45
   18960:	2020206d 4f525245 305b1b52 6d34393b     m   ERROR.[0;94m
   18970:	3a73253a 3b305b1b 256d3239 5b1b3a73     :%s:.[0;92m%s:.[
   18980:	33393b30 3e64256d 305b1b20 6d37333b     0;93m%d> .[0;37m
   18990:	49206e49 3a656c64 1b732520 0a6d305b     In Idle: %s.[0m.
   189a0:	00000000 35345b1b 2020206d 4f525245     .....[45m   ERRO
   189b0:	305b1b52 6d34393b 3a73253a 3b305b1b     R.[0;94m:%s:.[0;
   189c0:	256d3239 5b1b3a73 33393b30 3e64256d     92m%s:.[0;93m%d>
   189d0:	305b1b20 6d37333b 6c696146 74206465      .[0;37mFailed t
   189e0:	6573206f 74532074 20747261 72646441     o set Start Addr
   189f0:	21737365 6d305b1b 0000000a 35345b1b     ess!.[0m.....[45
   18a00:	2020206d 4f525245 305b1b52 6d34393b     m   ERROR.[0;94m
   18a10:	3a73253a 3b305b1b 256d3239 5b1b3a73     :%s:.[0;92m%s:.[
   18a20:	33393b30 3e64256d 305b1b20 6d37333b     0;93m%d> .[0;37m
   18a30:	6c696146 74206465 6573206f 6e452074     Failed to set En
   18a40:	64412064 73657264 5b1b2173 000a6d30     d Address!.[0m..
   18a50:	35345b1b 2020206d 4f525245 305b1b52     .[45m   ERROR.[0
   18a60:	6d34393b 3a73253a 3b305b1b 256d3239     ;94m:%s:.[0;92m%
   18a70:	5b1b3a73 33393b30 3e64256d 305b1b20     s:.[0;93m%d> .[0
   18a80:	6d37333b 6e6b6e55 206e776f 70736572     ;37mUnknown resp
   18a90:	65736e6f 70797420 41202e65 74726f62     onse type. Abort
   18aa0:	21676e69 6d305b1b 0000000a 35345b1b     ing!.[0m.....[45
   18ab0:	2020206d 4f525245 305b1b52 6d34393b     m   ERROR.[0;94m
   18ac0:	3a73253a 3b305b1b 256d3239 5b1b3a73     :%s:.[0;92m%s:.[
   18ad0:	33393b30 3e64256d 305b1b20 6d37333b     0;93m%d> .[0;37m
   18ae0:	70736552 65736e6f 736e7520 6f707075     Response unsuppo
   18af0:	64657472 206e6920 20495053 65646f6d     rted in SPI mode
   18b00:	6241202e 6974726f 1b21676e 0a6d305b     . Aborting!.[0m.
   18b10:	ffffff00                                ....

00018b14 <Gpio::ValidPortCheck()::file>:
   18b14:	6f697067 7070682e ffffff00              gpio.hpp....

00018b20 <Gpio::SetInterruptEdge(GpioInterface::Edge)::file>:
   18b20:	6f697067 7070682e ffffff00              gpio.hpp....

00018b2c <Gpio::ClearInterruptEdge(GpioInterface::Edge)::file>:
   18b2c:	6f697067 7070682e ffffff00              gpio.hpp....

00018b38 <Ssp::kPinSelect>:
   18b38:	ff040202                                ....

00018b3c <Ssp::kSspPinMatrix>:
   18b3c:	00017a14 00001200 00017a14 00001100     .z.......z......
   18b4c:	00017a14 00000f00 00017a14 00000900     .z.......z......
   18b5c:	00017a14 00000800 00017a14 00000700     .z.......z......
   18b6c:	00017a14 00000101 00017a14 00000401     .z.......z......
   18b7c:	00017a14 00000001                       .z......

00018b84 <Ssp::kPowerBit>:
   18b84:	00000015 0000000a 00000014              ............

00018b90 <Sd::kCrcTable8>:
   18b90:	1b120900 3f362d24 535a4148 777e656c     ....$-6?HAZSle~w
   18ba0:	020b1019 262f343d 4a435851 6e677c75     ....=4/&QXCJu|gn
   18bb0:	29203b32 0d041f16 6168737a 454c575e     2; )....zsha^WLE
   18bc0:	3039222b 141d060f 78716a63 5c554e47     +"90....cjqxGNU\
   18bd0:	7f766d64 5b524940 373e252c 131a0108     dmv.@IR[,%>7....
   18be0:	666f747d 424b5059 2e273c35 0a031811     }tofYPKB5<'.....
   18bf0:	4d445f56 69607b72 050c171e 2128333a     V_DMr{`i....:3(!
   18c00:	545d464f 7079626b 1c150e07 38312a23     OF]Tkbyp....#*18
   18c10:	5a534841 7e776c65 121b0009 363f242d     AHSZelw~....-$?6
   18c20:	434a5158 676e757c 0b021910 2f263d34     XQJC|ung....4=&/
   18c30:	68617a73 4c455e57 2029323b 040d161f     szahW^EL;2) ....
   18c40:	7178636a 555c474e 39302b22 1d140f06     jcxqNG\U"+09....
   18c50:	3e372c25 1a130801 767f646d 525b4049     %,7>....md.vI@[R
   18c60:	272e353c 030a1118 6f667d74 4b425950     <5.'....t}foPYBK
   18c70:	0c051e17 28213a33 444d565f 6069727b     ....3:!(_VMD{ri`
   18c80:	151c070e 3138232a 5d544f46 00706b62     ....*#81FOT]bkp.

00018c90 <Sd::kCrcTable16>:
   18c90:	10210000 30632042 50a54084 70e760c6     ..!.B c0.@.P.`.p
   18ca0:	91298108 b16ba14a d1adc18c f1efe1ce     ..).J.k.........
   18cb0:	02101231 22523273 429452b5 62d672f7     1...s2R".R.B.r.b
   18cc0:	83189339 a35ab37b c39cd3bd e3def3ff     9...{.Z.........
   18cd0:	34432462 14010420 74c764e6 548544a4     b$C4 ....d.t.D.T
   18ce0:	b54ba56a 95098528 f5cfe5ee d58dc5ac     j.K.(...........
   18cf0:	26723653 06301611 66f676d7 46b45695     S6r&..0..v.f.V.F
   18d00:	a77ab75b 87389719 e7fef7df c7bcd79d     [.z...8.........
   18d10:	58e548c4 78a76886 18610840 38232802     .H.X.h.x@.a..(#8
   18d20:	d9edc9cc f9afe98e 99698948 b92ba90a     ........H.i...+.
   18d30:	4ad45af5 6a967ab7 0a501a71 2a123a33     .Z.J.z.jq.P.3:.*
   18d40:	cbdcdbfd eb9efbbf 8b589b79 ab1abb3b     ........y.X.;...
   18d50:	7c876ca6 5cc54ce4 3c032c22 1c410c60     .l.|.L.\",.<`.A.
   18d60:	fd8fedae ddcdcdec bd0bad2a 9d498d68     ........*...h.I.
   18d70:	6eb67e97 4ef45ed5 2e323e13 0e701e51     .~.n.^.N.>2.Q.p.
   18d80:	efbeff9f cffcdfdd af3abf1b 8f789f59     ..........:.Y.x.
   18d90:	81a99188 a1ebb1ca c12dd10c e16ff14e     ..........-.N.o.
   18da0:	00a11080 20e330c2 40255004 60677046     .....0. .P%@Fpg`
   18db0:	939883b9 b3daa3fb d31cc33d f35ee37f     ........=.....^.
   18dc0:	129002b1 32d222f3 52144235 72566277     .....".25B.RwbVr
   18dd0:	a5cbb5ea 858995a8 e54ff56e c50dd52c     ........n.O.,...
   18de0:	24c334e2 048114a0 64477466 44055424     .4.$....ftGd$T.D
   18df0:	b7faa7db 97b88799 f77ee75f d73cc71d     ........_.~...<.
   18e00:	36f226d3 16b00691 76766657 56344615     .&.6....Wfvv.F4V
   18e10:	c96dd94c e92ff90e 89e999c8 a9abb98a     L.m.../.........
   18e20:	48655844 68277806 08e118c0 28a33882     DXeH.x'h.....8.(
   18e30:	db5ccb7d fb1eeb3f 9bd88bf9 bb9aabbb     }.\.?...........
   18e40:	5a544a75 7a166a37 1ad00af1 3a922ab3     uJTZ7j.z.....*.:
   18e50:	ed0ffd2e cd4ddd6c ad8bbdaa 8dc99de8     ....l.M.........
   18e60:	6c077c26 4c455c64 2c833ca2 0cc11ce0     &|.ld\EL.<.,....
   18e70:	ff3eef1f df7ccf5d bfbaaf9b 9ff88fd9     ..>.].|.........
   18e80:	7e366e17 5e744e55 3eb22e93 1ef00ed1     .n6~UNt^...>....

00018e90 <Sd::Mount(SdInterface::CardInfo_t*)::file>:
   18e90:	682e6473 ff007070                       sd.hpp..

00018e98 <Sd::Mount(SdInterface::CardInfo_t*)::file>:
   18e98:	682e6473 ff007070                       sd.hpp..

00018ea0 <Sd::Mount(SdInterface::CardInfo_t*)::file>:
   18ea0:	682e6473 ff007070                       sd.hpp..

00018ea8 <Sd::Mount(SdInterface::CardInfo_t*)::file>:
   18ea8:	682e6473 ff007070                       sd.hpp..

00018eb0 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file>:
   18eb0:	682e6473 ff007070                       sd.hpp..

00018eb8 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file>:
   18eb8:	682e6473 ff007070                       sd.hpp..

00018ec0 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file>:
   18ec0:	682e6473 ff007070                       sd.hpp..

00018ec8 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file>:
   18ec8:	682e6473 ff007070                       sd.hpp..

00018ed0 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file>:
   18ed0:	682e6473 ff007070                       sd.hpp..

00018ed8 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file>:
   18ed8:	682e6473 ff007070                       sd.hpp..

00018ee0 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file>:
   18ee0:	682e6473 ff007070                       sd.hpp..

00018ee8 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file>:
   18ee8:	682e6473 ff007070                       sd.hpp..

00018ef0 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file>:
   18ef0:	682e6473 ff007070                       sd.hpp..

00018ef8 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file>:
   18ef8:	682e6473 ff007070                       sd.hpp..

00018f00 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file>:
   18f00:	682e6473 ff007070                       sd.hpp..

00018f08 <Sd::DeleteBlock(unsigned long, unsigned long)::file>:
   18f08:	682e6473 ff007070                       sd.hpp..

00018f10 <Sd::DeleteBlock(unsigned long, unsigned long)::file>:
   18f10:	682e6473 ff007070                       sd.hpp..

00018f18 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)::file>:
   18f18:	682e6473 ff007070                       sd.hpp..

00018f20 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)::file>:
   18f20:	682e6473 ff007070                       sd.hpp..

00018f28 <vtable for Sd>:
	...
   18f30:	0001645d 000158b5 00015965 00015d79     ]d...X..eY..y]..
   18f40:	00016191 0001633d 000168fd 00016945     .a..=c...h..Ei..
   18f50:	000169b5                                .i..

00018f54 <vtable for SdInterface>:
	...
   18f5c:	00016d91 00016d91 00016d91 00016d91     .m...m...m...m..
   18f6c:	00016d91 00016d91 00016d91 00016d91     .m...m...m...m..
   18f7c:	00016d91                                .m..

00018f80 <vtable for Ssp>:
	...
   18f88:	00014e51 00014f35 00014fad 00015019     QN..5O...O...P..
   18f98:	00015105 00015311 00015471 0001565d     .Q...S..qT..]V..
   18fa8:	fffffffc 00000000 000108f5 00010985     ................
   18fb8:	000109dd 000109f5 00010a09 00010a49     ............I...
   18fc8:	00010a79                                y...

00018fcc <vtable for SspInterface>:
	...
   18fd4:	00016d91 00016d91 00016d91 00016d91     .m...m...m...m..
   18fe4:	00016d91 00016d91 00016d91 00016d91     .m...m...m...m..

00018ff4 <vtable for SystemControllerInterface>:
	...
   18ffc:	00016d91 00016d91 00016d91 00016d91     .m...m...m...m..
   1900c:	00016d91 00016d91 00016d91              .m...m...m..

00019018 <vtable for Gpio>:
	...
   19020:	00014399 00014415 00014491 000144d5     .C...D...D...D..
   19030:	00014539 0001459d 000145e1 0001464d     9E...E...E..MF..
   19040:	000146c5 00014735 000149cd 00014a15     .F..5G...I...J..
   19050:	000147dd 00014839 000148bd 00014945     .G..9H...H..EI..

00019060 <vtable for GpioInterface>:
	...
   19068:	00016d91 00016d91 00016d91 00016d91     .m...m...m...m..
   19078:	00016d91 00016d91 00016d91 00016d91     .m...m...m...m..
   19088:	00016d91 00016d91 00016d91 00016d91     .m...m...m...m..
   19098:	00016d91 00016d91 00016d91 00016d91     .m...m...m...m..

000190a8 <vtable for PinInterface>:
	...
   190b0:	00016d91 00016d91 00016d91 00016d91     .m...m...m...m..
   190c0:	00016d91 00016d91 00016d91 00016d91     .m...m...m...m..
   190d0:	00016d91 00016d91 00016d91 00016d91     .m...m...m...m..
   190e0:	00016d91                                .m..

000190e4 <Gpio::ClearInterruptEdge(GpioInterface::Edge)::__PRETTY_FUNCTION__>:
   190e4:	74726976 206c6175 64696f76 69704720     virtual void Gpi
   190f4:	433a3a6f 7261656c 65746e49 70757272     o::ClearInterrup
   19104:	67644574 70472865 6e496f69 66726574     tEdge(GpioInterf
   19114:	3a656361 6764453a ff002965              ace::Edge)..

00019120 <Gpio::ValidPortCheck()::__PRETTY_FUNCTION__>:
   19120:	6c6f6f62 69704720 563a3a6f 64696c61     bool Gpio::Valid
   19130:	74726f50 63656843 0029286b              PortCheck().

0001913c <Gpio::SetInterruptEdge(GpioInterface::Edge)::__PRETTY_FUNCTION__>:
   1913c:	74726976 206c6175 64696f76 69704720     virtual void Gpi
   1914c:	533a3a6f 6e497465 72726574 45747075     o::SetInterruptE
   1915c:	28656764 6f697047 65746e49 63616672     dge(GpioInterfac
   1916c:	453a3a65 29656764 ffffff00              e::Edge)....

00019178 <Sd::Mount(SdInterface::CardInfo_t*)::__PRETTY_FUNCTION__>:
   19178:	74726976 206c6175 6c6f6f62 3a645320     virtual bool Sd:
   19188:	756f4d3a 5328746e 746e4964 61667265     :Mount(SdInterfa
   19198:	3a3a6563 64726143 6f666e49 292a745f     ce::CardInfo_t*)
   191a8:	ffffff00                                ....

000191ac <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::__PRETTY_FUNCTION__>:
   191ac:	74726976 206c6175 746e6975 20745f38     virtual uint8_t 
   191bc:	3a3a6453 64616552 636f6c42 6975286b     Sd::ReadBlock(ui
   191cc:	3233746e 202c745f 746e6975 2a745f38     nt32_t, uint8_t*
   191dc:	6975202c 3233746e 0029745f              , uint32_t).

000191e8 <Sd::DeleteBlock(unsigned long, unsigned long)::__PRETTY_FUNCTION__>:
   191e8:	74726976 206c6175 746e6975 20745f38     virtual uint8_t 
   191f8:	3a3a6453 656c6544 6c426574 286b636f     Sd::DeleteBlock(
   19208:	746e6975 745f3233 6975202c 3233746e     uint32_t, uint32
   19218:	0029745f                                _t).

0001921c <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)::__PRETTY_FUNCTION__>:
   1921c:	74726976 206c6175 746e6975 745f3233     virtual uint32_t
   1922c:	3a645320 6e65533a 646d4364 49645328      Sd::SendCmd(SdI
   1923c:	7265746e 65636166 6f433a3a 6e616d6d     nterface::Comman
   1924c:	75202c64 33746e69 2c745f32 6e697520     d, uint32_t, uin
   1925c:	745f3874 75202c2a 33746e69 2c745f32     t8_t*, uint32_t,
   1926c:	49645320 7265746e 65636166 654b3a3a      SdInterface::Ke
   1927c:	6c417065 29657669 ffffff00              epAlive)....

00019288 <__sf_fake_stderr>:
	...

000192a8 <__sf_fake_stdin>:
	...

000192c8 <__sf_fake_stdout>:
	...
