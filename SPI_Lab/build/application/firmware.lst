
build/application/firmware.elf:     file format elf32-littlearm
build/application/firmware.elf
architecture: arm, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00014c55

Program Header:
0x70000001 off    0x0001adb0 vaddr 0x0001adb0 paddr 0x0001adb0 align 2**2
         filesz 0x00000008 memsz 0x00000008 flags r--
    LOAD off    0x00010000 vaddr 0x00010000 paddr 0x00010000 align 2**16
         filesz 0x0000adb8 memsz 0x0000adb8 flags r-x
    LOAD off    0x00020000 vaddr 0x10000000 paddr 0x0001adb8 align 2**16
         filesz 0x00000560 memsz 0x00000560 flags rw-
    LOAD off    0x00020560 vaddr 0x10000560 paddr 0x10000560 align 2**16
         filesz 0x00000000 memsz 0x00000b54 flags rw-
private flags = 5000400: [Version5 EABI] [hard-float ABI]

Sections:
Idx Name             Size      VMA       LMA       File off  Algn  Flags
  0 .text            0000adb0  00010000  00010000  00010000  2**4  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data            00000560  10000000  0001adb8  00020000  2**2  CONTENTS, ALLOC, LOAD, DATA
  2 .data_RAM2       00000000  20000000  20000000  00020560  2**2  CONTENTS
  3 .bss             00000b54  10000560  10000560  00020560  2**3  ALLOC
  4 .ARM.exidx       00000008  0001adb0  0001adb0  0001adb0  2**2  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .uninit_RESERVED 00000000  10000000  10000000  00020560  2**2  CONTENTS
  6 .noinit_RAM2     00000000  20000000  20000000  00020560  2**2  CONTENTS
  7 .noinit          00000000  100010b4  100010b4  00020560  2**2  CONTENTS
  8 .ARM.attributes  00000030  00000000  00000000  00020560  2**0  CONTENTS, READONLY
  9 .comment         0000007e  00000000  00000000  00020590  2**0  CONTENTS, READONLY
 10 .debug_info      0005f632  00000000  00000000  0002060e  2**0  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev    00005d1e  00000000  00000000  0007fc40  2**0  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges   00001100  00000000  00000000  0008595e  2**0  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges    00001050  00000000  00000000  00086a5e  2**0  CONTENTS, READONLY, DEBUGGING
 14 .debug_line      000087d5  00000000  00000000  00087aae  2**0  CONTENTS, READONLY, DEBUGGING
 15 .debug_str       0001a6b8  00000000  00000000  00090283  2**0  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame     0000426c  00000000  00000000  000aa93c  2**2  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
00010000 l    d  .text	00000000 .text
10000000 l    d  .data	00000000 .data
20000000 l    d  .data_RAM2	00000000 .data_RAM2
10000560 l    d  .bss	00000000 .bss
0001adb0 l    d  .ARM.exidx	00000000 .ARM.exidx
10000000 l    d  .uninit_RESERVED	00000000 .uninit_RESERVED
20000000 l    d  .noinit_RAM2	00000000 .noinit_RAM2
100010b4 l    d  .noinit	00000000 .noinit
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 interrupt.cpp
00015230 l     F .text	0000002c NVIC_EnableIRQ
0001525c l     F .text	00000054 NVIC_SetPriority
00010000 l     O .text	000000e4 kInterruptVectorTable
00019bcc l     O .text	0000000e InterruptLookupHandler::file
00019bdc l     O .text	0000001e InterruptLookupHandler::__PRETTY_FUNCTION__
0001022c l       .text	00000000 handler2_address_const
00000000 l    df *ABS*	00000000 startup.cpp
00019920 l     O .text	0000003e Timer::Initialize(unsigned long, void (*)(), long)::__PRETTY_FUNCTION__
100003f8 l     O .data	00000008 (anonymous namespace)::system_timer
10000400 l     O .data	00000004 (anonymous namespace)::system_controller
10000404 l     O .data	0000000c (anonymous namespace)::timer0
00014afc l     F .text	00000040 (anonymous namespace)::Lpc40xxUptime()
00019868 l     O .text	0000000c LowLevelInit()::file
00019960 l     O .text	00000014 LowLevelInit()::__PRETTY_FUNCTION__
000102fc l     O .text	00000004 kCrpWord
00015144 l     F .text	000000dc __static_initialization_and_destruction_0(int, int)
00015220 l     F .text	0000000e _GLOBAL__sub_I_UptimeRTOS
00000000 l    df *ABS*	00000000 /mnt/c/SJSU_Dev2/SJSU-Dev2/tools/gcc-arm-none-eabi-7-2017-q4-major/bin/../lib/gcc/arm-none-eabi/7.2.1/thumb/v7e-m/fpv4-sp/hard/crti.o
00000000 l    df *ABS*	00000000 /mnt/c/SJSU_Dev2/SJSU-Dev2/tools/gcc-arm-none-eabi-7-2017-q4-major/bin/../lib/gcc/arm-none-eabi/7.2.1/thumb/v7e-m/fpv4-sp/hard/crtn.o
00000000 l    df *ABS*	00000000 crtstuff.c
00010328 l     F .text	00000000 __do_global_dtors_aux
10000560 l       .bss	00000001 completed.9929
0001034c l     F .text	00000000 frame_dummy
10000564 l       .bss	00000018 object.9934
0001030c l     O .text	00000000 __frame_dummy_init_array_entry
00000000 l    df *ABS*	00000000 main.cpp
10000580 l     O .bss	00000008 (anonymous namespace)::uptime
00010ef8 l     F .text	00000030 (anonymous namespace)::DefaultUptime()
000191e4 l     O .text	0000001c Gpio::ValidPortCheck()::__PRETTY_FUNCTION__
00019200 l     O .text	00000039 Gpio::SetInterruptEdge(GpioInterface::Edge)::__PRETTY_FUNCTION__
000191a8 l     O .text	0000003b Gpio::ClearInterruptEdge(GpioInterface::Edge)::__PRETTY_FUNCTION__
00019068 l     O .text	00000049 Lpc40xxSystemController::SetPeripheralClockDivider(unsigned char)::__PRETTY_FUNCTION__
00019110 l     O .text	0000005c Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)::__PRETTY_FUNCTION__
000190b4 l     O .text	0000005a Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)::__PRETTY_FUNCTION__
0001916c l     O .text	0000003a Lpc40xxSystemController::SetCpuClockDivider(unsigned char)::__PRETTY_FUNCTION__
00018e34 l     O .text	00000009 main::file
0001905c l     O .text	0000000b main::__PRETTY_FUNCTION__
00013a24 l     F .text	0000007c __static_initialization_and_destruction_0(int, int)
00013aa0 l     F .text	00000028 _GLOBAL__sub_I_P1_10
00000000 l    df *ABS*	00000000 diskio.cpp
0001ac40 l     O .text	00000031 Sd::Mount(SdInterface::CardInfo_t*)::__PRETTY_FUNCTION__
0001ac74 l     O .text	0000003c Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::__PRETTY_FUNCTION__
0001acb0 l     O .text	00000034 Sd::DeleteBlock(unsigned long, unsigned long)::__PRETTY_FUNCTION__
0001ace4 l     O .text	00000069 Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)::__PRETTY_FUNCTION__
10001048 l     O .bss	00000068 (anonymous namespace)::sd_card
00017f38 l     F .text	00000050 __static_initialization_and_destruction_0(int, int)
00017f88 l     F .text	00000028 _GLOBAL__sub_I_disk_status
00000000 l    df *ABS*	00000000 LabGPIO.cpp
10000000 l     O .data	00000018 GPIO
00000000 l    df *ABS*	00000000 LabSPI.cpp
10000018 l     O .data	0000000c SSP
00000000 l    df *ABS*	00000000 pinconn.cpp
00000000 l    df *ABS*	00000000 newlib.cpp
00000000 l    df *ABS*	00000000 tasks.c
10000fd0 l     O .bss	00000064 pxReadyTasksLists
10001034 l     O .bss	00000004 uxTopReadyPriority
10001038 l     O .bss	00000004 xYieldPending
1000103c l     O .bss	00000004 uxSchedulerSuspended
10001040 l     O .bss	00000004 ulTaskSwitchedInTime
10001044 l     O .bss	00000004 ulTotalRunTime
00000000 l    df *ABS*	00000000 port.c
000156f0 l       .text	00000000 pxCurrentTCBConst2
00015760 l       .text	00000000 pxCurrentTCBConst
00000000 l    df *ABS*	00000000 printf.cpp
00015768 l     F .text	00000030 _out_null(char, void*, unsigned int, unsigned int)
00015798 l     F .text	00000044 _out_char(char, void*, unsigned int, unsigned int)
000157dc l     F .text	00000044 _strlen(char const*)
00015820 l     F .text	00000044 _is_digit(char)
00015864 l     F .text	00000060 _atoi(char const**)
000158c4 l     F .text	0000025c _ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)
00015b20 l     F .text	000000e4 _ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)
00015c04 l     F .text	000000f4 _ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)
00019bfc l     O .text	00000028 _ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)::pow10
00015cf8 l     F .text	00000438 _ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)
00016130 l     F .text	000008f4 _vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)
00000000 l    df *ABS*	00000000 pure.cc
00000000 l    df *ABS*	00000000 eh_terminate.cc
00000000 l    df *ABS*	00000000 sf_round.c
00000000 l    df *ABS*	00000000 _arm_truncdfsf2.o
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 abort.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 signal.c
00000000 l    df *ABS*	00000000 signalr.c
00000000 l    df *ABS*	00000000 findfp.c
00000000 l    df *ABS*	00000000 eh_term_handler.cc
00000000 l    df *ABS*	00000000 impure.c
10000500 l     O .data	00000060 impure_data
00000000 l    df *ABS*	00000000 reent.c
00012084  w    F .text	0000003e Lpc40xxSystemController::GetPeripheralFrequency() const
000154d4 g     F .text	00000038 putchar
000152b0  w    F .text	0000006c Pwm0IrqHandler
00018d4c  w    O .text	00000009 Gpio::SetInterruptEdge(GpioInterface::Edge)::file
00010218 g     F .text	0000001c HardFaultHandler
00015444 g     F .text	00000024 _getpid
00015498 g     F .text	0000003c _putchar
00010a2c g     F .text	000000cc LabSpi::Transfer(unsigned char)
000152b0  w    F .text	0000006c EepromIrqHandler
000152b0  w    F .text	0000006c Timer2IrqHandler
100003e4  w    O .data	00000014 uart0
000155d8 g     F .text	0000002c GetStackDepth()
0001ab50  w    O .text	00000007 Sd::Mount(SdInterface::CardInfo_t*)::file
00011f4c  w    F .text	00000024 Lpc40xxSystemController::Lpc40xxSystemController()
00019830  w    O .text	00000004 Timer::kTimerIrq
0001ab88  w    O .text	00000007 Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file
000184a4 g     F .text	00000024 _kill_r
0001010c g       .text	00000000 bss_section_table_end
000104d4 g     F .text	000002ac LabSpi::Initialize(unsigned char, LabSpi::FrameModes, unsigned char, LabSpi::Master_Slave)
00016a24 g     F .text	0000004c printf
10000380  w    O .data	00000004 SystemTimer::sys_tick
000152b0  w    F .text	0000006c I2c1IrqHandler
00014cfc  w    F .text	0000003c void Timer::TimerHandler<(TimerInterface::TimerPort)2>()
10000394  w    O .data	00000010 Uart::uart
0001abb8  w    O .text	00000007 Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file
00010970 g     F .text	000000bc LabSpi::chip_set()
00010000 g       *ABS*	00000000 __vectors_start__
0001335c  w    F .text	00000090 Ssd1306::Write(unsigned long, Ssd1306::Transaction, unsigned int)
00010f28  w    F .text	00000044 Milliseconds()
000121e8  w    F .text	00000110 Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)
00013208  w    F .text	00000094 Ssd1306::Ssd1306()
0001252c  w    F .text	00000034 SspInterface::SspInterface()
000152b0  w    F .text	0000006c BusFaultHandler
10000ec8 g     O .bss	00000100 stack_trace
10000028  w    O .data	00000004 Pin::pin_map
00014348  w    F .text	000000e4 Uart::Initialize(unsigned long)
20000000 g       *ABS*	00000000 __base_RAM2
00013208  w    F .text	00000094 Ssd1306::Ssd1306()
0001adb8 g       .ARM.exidx	00000000 __exidx_end
00011e3c  w    F .text	0000007c Gpio::ClearEdgeRising()
000124d0  w    F .text	00000030 Lpc40xxSystemController::SetEmcClockDivider(Lpc40xxSystemController::EmcDivider)
00013b2c g     F .text	000000cc pinconn::ssp_clk(unsigned char, unsigned char)
00018d40  w    O .text	00000009 Gpio::ValidPortCheck()::file
00013780  w    F .text	0000006c OledTerminal::OledTerminal()
10000fcc g     O .bss	00000004 pxCurrentTCB
00010f6c  w    F .text	00000034 PinInterface::PinInterface()
00015594 g     F .text	0000001c __cyg_profile_func_exit
00017cd8  w    F .text	00000048 Sd::Crc7Add(unsigned char, unsigned char)
00016bf0  w    F .text	000000a0 Sd::Sd(Sd::DebugSdCard_t, unsigned char, unsigned char, unsigned char, unsigned char)
00014f64  w    F .text	000000a0 void Timer::ClearInterrupts<(TimerInterface::TimerPort)1>()
100010b0 g     O .bss	00000004 errno
0001adb8 g       .ARM.exidx	00000000 _etext
1000006c  w    O .data	00000004 Lpc40xxSystemController::system_controller
00011f70  w    F .text	00000090 Lpc40xxSystemController::SetClockFrequency(unsigned char)
00014118  w    F .text	00000030 unsigned char util::Value<TimerInterface::MatchControlRegister, unsigned char>(TimerInterface::MatchControlRegister)
00012070  w    F .text	00000014 Lpc40xxSystemController::GetSystemFrequency() const
0001490c  w    F .text	000001f0 Uart::GenerateUartCalibration(float)
1000002c  w    O .data	00000018 Gpio::gpio_port
00014148  w    F .text	000000f8 Timer::SetTimer(unsigned long, TimerInterface::TimerIsrCondition, TimerInterface::MatchControlRegister)
00014b7c  w    F .text	000000bc LowLevelInit()
000152b0  w    F .text	0000006c LcdIrqHandler
0001abe0  w    O .text	00000007 Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)::file
00080000 g       *ABS*	00000000 __top_MFlash512
0001282c  w    F .text	0000006c Ssp::Transfer(unsigned short)
000145ac  w    F .text	000000f8 Uart::Receive(unsigned long)
00012188  w    F .text	00000030 Lpc40xxSystemController::SelectUsbClockSource(Lpc40xxSystemController::UsbSource)
00016b8c  w    F .text	00000030 Delay(unsigned long long)
00019858  w    O .text	00000010 Uart::kPowerbit
000152b0  w    F .text	0000006c I2c2IrqHandler
10000e70  w    O .bss	00000004 SystemTimer::system_timer_isr
00011d04  w    F .text	00000040 Gpio::DetachInterrupt()
000152b0  w    F .text	0000006c CanIrqHandler
000114a8  w    F .text	00000074 Pin::EnableDac(bool)
000111d8  w    F .text	0000007c Pin::SetAsAnalogMode(bool)
00012468  w    F .text	00000068 Lpc40xxSystemController::SetCpuClockDivider(unsigned char)
00017d90  w    F .text	000000fc Sd::GetCrc16(unsigned char*, unsigned short)
000180dc g     F .text	00000000 .hidden __aeabi_uldivmod
100010b4 g       .noinit	00000000 _noinit
0001550c g     F .text	00000060 puts
10000410 g     O .data	000000e4 dynamic_isr_vector_table
00011a24  w    F .text	0000002c Gpio::GetPin()
00011acc  w    F .text	0000005c Gpio::SetInterruptRoutine(void (*)())
000115d8  w    F .text	00000034 GpioInterface::GpioInterface()
0001252c  w    F .text	00000034 SspInterface::SspInterface()
000152b0  w    F .text	0000006c RitIrqHandler
000152b0  w    F .text	0000006c Uart2IrqHandler
0001151c  w    F .text	00000064 Pin::BitPlace(unsigned long, unsigned long, unsigned long, unsigned long)
00018dc4  w    O .text	00000016 Lpc40xxSystemController::SetCpuClockDivider(unsigned char)::file
0001ab70  w    O .text	00000007 Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file
00012b90  w    F .text	00000160 Ssp::GetPeripheralMode()
00015004  w    F .text	000000a0 void Timer::ClearInterrupts<(TimerInterface::TimerPort)2>()
00017fdc g     F .text	00000060 roundf
00018444 g     F .text	00000050 _raise_r
00016a9c  w    F .text	0000002c Wait(unsigned long long)::{lambda()#1}::_FUN()
00012500  w    F .text	0000002c int util::Value<Ssp::Peripheral, int>(Ssp::Peripheral)
00012560  w    F .text	00000038 PinInterface::PinInterface(PinInterface const&)
10010000 g       *ABS*	00000000 __top_RAM
00019854  w    O .text	00000004 Uart::kRxUartPortFunction
00016ac8  w    F .text	000000c4 Wait(unsigned long long)
00015700 g     F .text	00000066 xPortPendSVHandler
00016bbc  w    F .text	00000034 SdInterface::SdInterface()
00014240  w    F .text	0000003c Timer::GetTimer()
10000000 g       *ABS*	00000000 __base_RamLoc64
000155b0 g     F .text	00000028 GetStackTrace()
100004f4 g     O .data	00000004 out
10000070  w    O .data	00000004 Lpc40xxSystemController::speed_in_hertz
0001abc0  w    O .text	00000007 Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file
0001aba8  w    O .text	00000007 Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file
000184c8 g     F .text	00000004 _getpid_r
00000000 g       *ABS*	00000000 __base_MFlash512
00018e98  w    O .text	0000004c vtable for Ssp
10010000 g       *ABS*	00000000 StackTop
000170a0  w    F .text	00000064 Sd::WaitToReadBlock()
00018ddc  w    O .text	00000003 Ssp::kPinSelect
000132f4  w    F .text	00000068 Ssd1306::AvailableColors()
0001810c g     F .text	000002cc .hidden __udivmoddi4
000152b0  w    F .text	0000006c I2sIrqHandler
0001049c g     F .text	00000038 LabSpi::LabSpi(LabSpi::Peripheral)
000100fc g       .text	00000000 bss_section_table
00010300 g       .text	00000000 __CRP_WORD_END__
20008000 g       *ABS*	00000000 __top_RAM2
00014c54 g     F .text	00000030 ResetIsr
00018e40  w    O .text	0000002c vtable for Ssd1306
0001705c  w    F .text	00000044 Sd::ToBool(bool)
00018ee4  w    O .text	00000028 vtable for SspInterface
000152b0  w    F .text	0000006c PendSVHandler
000128f4  w    F .text	00000030 unsigned char util::Value<SspInterface::DataSize, unsigned char>(SspInterface::DataSize)
00013e30  w    F .text	00000034 SystemTimer::SetIsrFunction(void (*)())
000138a4  w    F .text	00000044 bool bit::Read<unsigned long>(unsigned long, unsigned long)
000127b4  w    F .text	00000078 Ssp::IsTransferRegBusy()
000152b0  w    F .text	0000006c UsageFaultHandler
0001049c g     F .text	00000038 LabSpi::LabSpi(LabSpi::Peripheral)
20000000 g       *ABS*	00000000 __user_heap_base
000136f4  w    F .text	0000008c Graphics::Graphics(PixelDisplayInterface*)
0001adb0 g       .text	00000000 __exidx_start
00013bf8 g     F .text	000000cc pinconn::ssp_miso(unsigned char, unsigned char)
000113c0  w    F .text	00000074 Pin::EnableI2cHighCurrentDrive(bool)
000152b0  w    F .text	0000006c Uart4IrqHandler
00011b28  w    F .text	00000054 Gpio::ClearInterruptRoutine()
00011344  w    F .text	0000007c Pin::EnableI2cHighSpeedMode(bool)
000101fc g     F .text	00000018 InitFpu()
00011254  w    F .text	0000007c Pin::EnableDigitalFilter(bool)
0001329c  w    F .text	0000002c Ssd1306::GetWidth()
000183ec g     F .text	00000048 __libc_init_array
000152b0 g     F .text	0000006c InterruptLookupHandler
000121b8  w    F .text	00000030 Lpc40xxSystemController::SelectSpifiClockSource(Lpc40xxSystemController::SpifiSource)
00012058  w    F .text	00000018 Lpc40xxSystemController::GetPeripheralClockDivider() const
10000024  w    O .data	00000004 Uptime
00018f9c  w    O .text	00000048 vtable for GpioInterface
00014478  w    F .text	000000e8 Uart::Send(unsigned char)
000183dc g     F .text	0000000e abort
000152b0  w    F .text	0000006c BodIrqHandler
10000698 g     O .bss	00000008 P1_00
00012edc  w    F .text	00000184 Ssp::GetClock()
00010300 g     F .text	00000000 _init
0001010c g       .text	00000000 section_table_end
000150a4  w    F .text	000000a0 void Timer::ClearInterrupts<(TimerInterface::TimerPort)3>()
00013cc4 g     F .text	000000cc pinconn::ssp_mosi(unsigned char, unsigned char)
00017fd0 g     F .text	0000000a std::terminate()
0001803c g     F .text	0000009e .hidden __aeabi_d2f
00011eb8  w    F .text	0000007c Gpio::ClearEdgeFalling()
000152b0  w    F .text	0000006c SysTickHandler
000100e4 g       .text	00000000 section_table_start
100010b4 g       .bss	00000000 _ebss
00013680  w    F .text	00000074 Ssd1306::Update()
00011dc0  w    F .text	0000007c Gpio::SetEdgeFalling()
0001ab80  w    O .text	00000007 Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file
000152b0  w    F .text	0000006c RtcIrqHandler
000119b4  w    F .text	00000070 Gpio::Read()
000136f4  w    F .text	0000008c Graphics::Graphics(PixelDisplayInterface*)
00014d74  w    F .text	000000a8 Status Wait<Uart::Send(unsigned char)::{lambda()#1}>(unsigned long long, Uart::Send(unsigned char)::{lambda()#1})
eff766ce g       *ABS*	00000000 ValidUserCodeChecksum
000152b0  w    F .text	0000006c Uart0IrqHandler
00015378 g     F .text	00000078 GetRegistersFromStack
10000688 g     O .bss	00000008 P1_10
00013868  w    F .text	0000003c unsigned long bit::Set<unsigned long>(unsigned long, unsigned long)
00019020  w    O .text	0000003c vtable for PinInterface
000152b0  w    F .text	0000006c UsbIrqHandler
000152b0  w    F .text	0000006c AdcIrqHandler
00014560  w    F .text	0000004c Uart::Receive(unsigned long)::{lambda()#1}::operator()() const
00013d90  w    F .text	00000030 SetUptimeFunction(unsigned long long (*)())
00010368 g     F .text	00000058 LabGPIO::LabGPIO(unsigned char, unsigned char)
0001ad50 g     O .text	00000020 __sf_fake_stderr
00013060  w    F .text	00000094 PixelDisplayInterface::Color_t::Color_t(bool, bool, bool, unsigned char, unsigned char, bool)
0001a850  w    O .text	00000100 Sd::kCrcTable8
00017fc0 g     F .text	00000010 std::get_terminate()
00014814  w    F .text	00000074 Uart::FractionalEstimate(float, float)
00011bac  w    F .text	00000088 Gpio::SetInterruptEdge(GpioInterface::Edge)
000152b0  w    F .text	0000006c EnetIrqHandler
000152b0  w    F .text	0000006c DmaIrqHandler
0001010c g     F .text	00000090 InitDataSection()
0001531c g     F .text	0000005c RegisterIsr(IRQn, void (*)(), bool, long)
00000000 g       *ABS*	00000000 __base_Flash
000152b0  w    F .text	0000006c Eint1IrqHandler
10000074  w    O .data	0000000c Ssp::ssp_registers
00010888 g     F .text	000000e8 LabSpi::chip_deselect()
000152b0  w    F .text	0000006c SvcHandler
000152b0  w    F .text	0000006c GpioIrqHandler
00010af8 g     F .text	00000070 LabSpi::ReadStatus()
0001abd0  w    O .text	00000007 Sd::DeleteBlock(unsigned long, unsigned long)::file
000152b0  w    F .text	0000006c SdioIrqHandler
10010000 g       *ABS*	00000000 __top_RamLoc64
10000560 g       .bss	00000000 _bss
0001ab68  w    O .text	00000007 Sd::Mount(SdInterface::CardInfo_t*)::file
000152b0  w    F .text	0000006c Pll1IrqHandler
000152b0  w    F .text	0000006c MemManageHandler
00013184  w    F .text	00000028 PixelDisplayInterface::Disable()
000103c0 g     F .text	00000054 LabGPIO::SetAsOutput()
00017fb0 g     F .text	00000006 __cxa_pure_virtual
000152b0  w    F .text	0000006c Pwm1IrqHandler
00011b7c  w    F .text	00000030 unsigned char util::Value<GpioInterface::Edge, unsigned char>(GpioInterface::Edge)
000152b0  w    F .text	0000006c Timer0IrqHandler
10000690 g     O .bss	00000008 P1_04
00014e1c  w    F .text	000000a8 Status Wait<Uart::Receive(unsigned long)::{lambda()#1}>(unsigned long long, Uart::Receive(unsigned long)::{lambda()#1})
000132c8  w    F .text	0000002c Ssd1306::GetHeight()
00080000 g       *ABS*	00000000 __top_Flash
00014888  w    F .text	00000084 Uart::IsDecmial(float)
00012cf0  w    F .text	000001ec Ssp::SetClock(bool, bool, unsigned char, unsigned char)
100010b4 g       .noinit	00000000 _end_noinit
00013dc0  w    F .text	0000003c SystemTimer::DisableTimer()
00017718  w    F .text	00000120 Sd::DeleteBlock(unsigned long, unsigned long)
00015604 g     F .text	000000c8 vTaskSwitchContext
0001395c  w    F .text	00000054 unsigned long bit::Extract<unsigned long>(unsigned long, unsigned long, unsigned long)
00010fa0  w    F .text	00000058 Pin::Pin(unsigned char, unsigned char)
00012954  w    F .text	00000030 unsigned char util::Value<SspInterface::MasterSlaveMode, unsigned char>(SspInterface::MasterSlaveMode)
00010780 g     F .text	00000108 LabSpi::chip_select()
0001ab90  w    O .text	00000007 Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file
00019850  w    O .text	00000004 Uart::kTxUartPortFunction
00010c2c g     F .text	000001cc LabSpi::ReadBytes()
000152b0  w    F .text	0000006c Uart3IrqHandler
00011f34  w    F .text	00000018 SystemControllerInterface::SystemControllerInterface()
0001abc8  w    O .text	00000007 Sd::DeleteBlock(unsigned long, unsigned long)::file
20000000 g       *ABS*	00000000 __base_RamPeriph32
000135ec  w    F .text	00000094 Ssd1306::DrawPixel(long, long, PixelDisplayInterface::Color_t)
00018d58  w    O .text	00000009 Gpio::ClearInterruptEdge(GpioInterface::Edge)::file
10000fc8 g     O .bss	00000004 stack_depth
000118d0  w    F .text	0000006c Gpio::Toggle()
0001aba0  w    O .text	00000007 Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file
0001a950  w    O .text	00000200 Sd::kCrcTable16
10000588  w    O .bss	00000100 Gpio::interrupthandlers
000183d8  w    F .text	00000002 .hidden __aeabi_ldiv0
000152b0  w    F .text	0000006c Timer1IrqHandler
000130f4  w    F .text	00000068 PixelDisplayInterface::Color_t::Color_t()
000147a0  w    F .text	00000074 Uart::DividerEstimate(float, float)
000117c4  w    F .text	00000064 Gpio::SetHigh()
000146a4  w    F .text	000000fc Uart::FindClosestFractional(float)
000125ec  w    F .text	000000e4 Ssp::Ssp(Ssp::Peripheral)
000100e4 g       .text	00000000 data_section_table
00018d7c  w    O .text	00000016 Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)::file
00011070  w    F .text	00000080 Pin::SetMode(PinInterface::Mode)
00017104  w    F .text	00000050 Sd::WaitWhileBusy()
00013f00  w    F .text	00000094 SystemTimer::SetTickFrequency(unsigned long)
0001ad70 g     O .text	00000020 __sf_fake_stdin
000139b0  w    F .text	00000074 unsigned long bit::Insert<unsigned long, bool>(unsigned long, bool, unsigned long, unsigned long)
000102fc g       .text	00000000 __CRP_WORD_START__
00019834  w    O .text	00000010 Timer::kTimerIsr
000133ec  w    F .text	000000f0 Ssd1306::InitializationPanel()
00011cbc  w    F .text	00000048 Gpio::AttachInterrupt(void (*)(), GpioInterface::Edge)
000152b0  w    F .text	0000006c Uart1IrqHandler
00011688  w    F .text	0000007c Gpio::SetAsInput()
0001556c g     F .text	00000028 __cyg_profile_func_enter
00018434 g     F .text	00000010 memset
000137ec g     F .text	0000007c main
00016bf0  w    F .text	000000a0 Sd::Sd(Sd::DebugSdCard_t, unsigned char, unsigned char, unsigned char, unsigned char)
10000044  w    O .data	00000028 Gpio::interrupt
00013fc4  w    F .text	00000020 Timer::DoNothingIsr()
000152b0  w    F .text	0000006c QeiIrqHandler
20000000 g       *ABS*	00000000 heap
000152b0  w    F .text	0000006c Ssp2IrqHandler
00011580  w    F .text	0000002c Pin::GetPort() const
0001756c  w    F .text	000001ac Sd::WriteBlock(unsigned long, unsigned char const*, unsigned long)
00010fa0  w    F .text	00000058 Pin::Pin(unsigned char, unsigned char)
100006a0 g     O .bss	00000008 P1_01
0001803c g     F .text	0000009e .hidden __truncdfsf2
0001031c g       .text	00000000 __init_array_end
000156d0 g     F .text	00000026 vPortSVCHandler
000153f0 g     F .text	0000003c FirmwareStdOut(int)
0001abe8  w    O .text	0000002c vtable for Sd
00011c34  w    F .text	00000088 Gpio::ClearInterruptEdge(GpioInterface::Edge)
000152b0  w    F .text	0000006c Ssp1IrqHandler
00014c84  w    F .text	0000003c void Timer::TimerHandler<(TimerInterface::TimerPort)0>()
00018e28  w    O .text	0000000c Ssp::kPowerBit
000115ac  w    F .text	0000002c Pin::GetPin() const
0001427c  w    F .text	000000cc Uart::SetBaudRate(unsigned long)
00019874  w    O .text	0000003c vtable for Uart
00011780  w    F .text	00000044 Gpio::SetDirection(GpioInterface::Direction)
00011704  w    F .text	0000007c Gpio::SetAsOutput()
0001abb0  w    O .text	00000007 Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file
000122f8  w    F .text	00000170 Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)
00013780  w    F .text	0000006c OledTerminal::OledTerminal()
00011828  w    F .text	00000064 Gpio::SetLow()
00018f0c  w    O .text	00000024 vtable for Lpc40xxSystemController
00017154  w    F .text	00000418 Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)
0001abd8  w    O .text	00000007 Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)::file
00018d64  w    O .text	00000016 Lpc40xxSystemController::SetPeripheralClockDivider(unsigned char)::file
00014c38 g     F .text	0000001a SystemInit
00013fe4  w    F .text	00000134 Timer::Initialize(unsigned long, void (*)(), long)
100006a8 g     O .bss	000007c8 oled_terminal
000120c4  w    F .text	00000030 Lpc40xxSystemController::PowerUpPeripheral(SystemControllerInterface::PeripheralID const&)
20008000 g       *ABS*	00000000 heap_end
000126d0  w    F .text	000000e4 Ssp::Initialize()
000198b0  w    O .text	00000038 vtable for Timer
00012560  w    F .text	00000038 PinInterface::PinInterface(PinInterface const&)
10000384  w    O .data	00000010 Timer::tim_register
000152b0  w    F .text	0000006c Ssp0IrqHandler
00010368 g     F .text	00000058 LabGPIO::LabGPIO(unsigned char, unsigned char)
0001031c g     F .text	00000000 _fini
000152b0  w    F .text	0000006c UsbactivityIrqHandler
0001188c  w    F .text	00000044 Gpio::Set(GpioInterface::State)
000152b0  w    F .text	0000006c Pll0IrqHandler
00012598  w    F .text	00000054 Pin::Pin(Pin const&)
000100fc g       .text	00000000 data_section_table_end
000152b0  w    F .text	0000006c CanactivityIrqHandler
000152b0  w    F .text	0000006c NmiHandler
000130f4  w    F .text	00000068 PixelDisplayInterface::Color_t::Color_t()
000131ac  w    F .text	00000028 PixelDisplayInterface::Update()
00018de0  w    O .text	00000048 Ssp::kSspPinMatrix
00013560  w    F .text	00000054 Ssd1306::SetHorizontalAddressMode()
0001193c  w    F .text	00000078 Gpio::ReadState()
0001ab78  w    O .text	00000007 Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file
100004fc g     O .data	00000004 _impure_ptr
00017e8c  w    F .text	000000ac Status Wait<Wait(unsigned long long)::{lambda()#1}>(unsigned long long, Wait(unsigned long long)::{lambda()#1})
10000000 g       .uninit_RESERVED	00000000 _end_uninit_RESERVED
00017d20  w    F .text	00000070 Sd::GetCrc7(unsigned char*, unsigned char)
000134dc  w    F .text	00000084 Ssd1306::Initialize()
000152b0  w    F .text	0000006c McpwmIrqHandler
0001030c g       .text	00000000 __preinit_array_end
000152b0  w    F .text	0000006c WdtIrqHandler
00016a70  w    F .text	0000002c Wait(unsigned long long)::{lambda()#1}::operator()() const
00017838  w    F .text	000004a0 Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)
00011f4c  w    F .text	00000024 Lpc40xxSystemController::Lpc40xxSystemController()
00018fe4  w    O .text	0000003c vtable for Pin
000135b4  w    F .text	00000038 Ssd1306::Clear()
10000000 g       .data	00000000 _data
00011164  w    F .text	00000074 Pin::SetAsActiveLow(bool)
00012158  w    F .text	00000030 Lpc40xxSystemController::SelectMainClockSource(Lpc40xxSystemController::MainClockSource)
00011d44  w    F .text	0000007c Gpio::SetEdgeRising()
0001ab58  w    O .text	00000007 Sd::Mount(SdInterface::CardInfo_t*)::file
00013f94  w    F .text	00000030 unsigned char util::Value<TimerInterface::TimerPort, unsigned char>(TimerInterface::TimerPort)
10000080 g     O .data	00000300 pincon
10000eb4  w    O .bss	00000010 Timer::user_timer_isr
0001315c  w    F .text	00000028 PixelDisplayInterface::Enable()
00018d94  w    O .text	00000016 Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)::file
10000e74  w    O .bss	00000040 Timer::match
00010458 g     F .text	00000044 LabGPIO::SetLow()
0001442c  w    F .text	0000004c Uart::Send(unsigned char)::{lambda()#1}::operator()() const
00018e6c  w    O .text	0000002c vtable for PixelDisplayInterface
00016d40  w    F .text	0000031c Sd::Mount(SdInterface::CardInfo_t*)
100004f8 g     O .data	00000004 __cxxabiv1::__terminate_handler
00018f30  w    O .text	00000024 vtable for SystemControllerInterface
00018f54  w    O .text	00000048 vtable for Gpio
10000560 g       .data	00000000 _edata
00019820  w    O .text	00000010 Timer::kPowerbit
00014cc0  w    F .text	0000003c void Timer::TimerHandler<(TimerInterface::TimerPort)1>()
000110f0  w    F .text	00000074 Pin::EnableHysteresis(bool)
000115d8  w    F .text	00000034 GpioInterface::GpioInterface()
00013060  w    F .text	00000094 PixelDisplayInterface::Color_t::Color_t(bool, bool, bool, unsigned char, unsigned char, bool)
000152b0  w    F .text	0000006c DebugMonHandler
00011a50  w    F .text	0000007c Gpio::ValidPortCheck()
000152b0  w    F .text	0000006c Eint2IrqHandler
20008000 g       *ABS*	00000000 __top_RamPeriph32
000125ec  w    F .text	000000e4 Ssp::Ssp(Ssp::Peripheral)
000152b0  w    F .text	0000006c Timer3IrqHandler
00013ac8 g     F .text	00000064 pinconn::clearF4(unsigned char, unsigned char)
00010414 g     F .text	00000044 LabGPIO::SetHigh()
000131d4  w    F .text	00000034 PixelDisplayInterface::PixelDisplayInterface()
10000000 g       *ABS*	00000000 __base_RAM
000152b0  w    F .text	0000006c Eint3IrqHandler
00017fb6 g     F .text	00000008 __cxxabiv1::__terminate(void (*)())
00015468 g     F .text	00000030 _kill
000152b0  w    F .text	0000006c I2c0IrqHandler
00012598  w    F .text	00000054 Pin::Pin(Pin const&)
00019844  w    O .text	0000000a Timer::Initialize(unsigned long, void (*)(), long)::file
00013dfc  w    F .text	00000034 SystemTimer::SystemTimerHandler()
00010b68 g     F .text	00000088 LabSpi::ReadDevice()
0001ab60  w    O .text	00000007 Sd::Mount(SdInterface::CardInfo_t*)::file
0001ad90 g     O .text	00000020 __sf_fake_stdout
00010df8  w    F .text	00000100 debug::PrintBacktrace(bool, void*)
0001030c g       .text	00000000 __init_array_start
000183d8  w    F .text	00000002 .hidden __aeabi_idiv0
0001ac14  w    O .text	0000002c vtable for SdInterface
00010bf0 g     F .text	0000003c LabSpi::WriteEnable()
00016c90  w    F .text	000000b0 Sd::Initialize()
0001542c g     F .text	00000018 _exit
000112d0  w    F .text	00000074 Pin::EnableFastMode(bool)
00014ec4  w    F .text	000000a0 void Timer::ClearInterrupts<(TimerInterface::TimerPort)0>()
000152b0  w    F .text	0000006c Eint0IrqHandler
00013e64  w    F .text	0000009c SystemTimer::StartTimer()
00012924  w    F .text	00000030 unsigned char util::Value<SspInterface::FrameMode, unsigned char>(SspInterface::FrameMode)
0001019c g     F .text	00000060 InitBssSection()
0001160c  w    F .text	0000007c Gpio::Gpio(unsigned char, unsigned char)
00014b3c g     F .text	00000040 UptimeRTOS
000131d4  w    F .text	00000034 PixelDisplayInterface::PixelDisplayInterface()
00011434  w    F .text	00000074 Pin::SetAsOpenDrain(bool)
000198e8  w    O .text	00000038 vtable for SystemTimer
000152b0  w    F .text	0000006c SpiIrqHandler
0001ab98  w    O .text	00000007 Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file
00012898  w    F .text	0000005c Ssp::SetSpiMasterDefault()
100003a4  w    O .data	00000040 Uart::pairs
00011f34  w    F .text	00000018 SystemControllerInterface::SystemControllerInterface()
000120f4  w    F .text	00000030 Lpc40xxSystemController::PowerDownPeripheral(SystemControllerInterface::PeripheralID const&)
00016bbc  w    F .text	00000034 SdInterface::SdInterface()
0001030c g       .text	00000000 __preinit_array_start
00018dac  w    O .text	00000016 Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)::file
00012124  w    F .text	00000034 Lpc40xxSystemController::SelectOscillatorSource(Lpc40xxSystemController::OscillatorSource)
10000ec4  w    O .bss	00000004 guard variable for Timer::match
00012984  w    F .text	0000020c Ssp::SetPeripheralMode(SspInterface::MasterSlaveMode, SspInterface::FrameMode, SspInterface::DataSize)
00010ff8  w    F .text	00000078 Pin::SetPinFunction(unsigned char)
000138e8  w    F .text	00000074 unsigned long bit::Insert<unsigned long, unsigned char>(unsigned long, unsigned char, unsigned long, unsigned long)
00010f6c  w    F .text	00000034 PinInterface::PinInterface()
00012000  w    F .text	00000058 Lpc40xxSystemController::SetPeripheralClockDivider(unsigned char)
0001160c  w    F .text	0000007c Gpio::Gpio(unsigned char, unsigned char)
00014d38  w    F .text	0000003c void Timer::TimerHandler<(TimerInterface::TimerPort)3>()
00018494 g     F .text	00000010 raise



Disassembly of section .text:

00010000 <kInterruptVectorTable>:
   10000:	00 00 01 10 55 4c 01 00 b1 52 01 00 19 02 01 00     ....UL...R......
   10010:	b1 52 01 00 b1 52 01 00 b1 52 01 00 ce 66 f7 ef     .R...R...R...f..
	...
   1002c:	d1 56 01 00 b1 52 01 00 00 00 00 00 01 57 01 00     .V...R.......W..
   1003c:	b1 52 01 00 b1 52 01 00 b1 52 01 00 b1 52 01 00     .R...R...R...R..
   1004c:	b1 52 01 00 b1 52 01 00 b1 52 01 00 b1 52 01 00     .R...R...R...R..
   1005c:	b1 52 01 00 b1 52 01 00 b1 52 01 00 b1 52 01 00     .R...R...R...R..
   1006c:	b1 52 01 00 b1 52 01 00 00 00 00 00 b1 52 01 00     .R...R.......R..
   1007c:	b1 52 01 00 b1 52 01 00 b1 52 01 00 b1 52 01 00     .R...R...R...R..
   1008c:	b1 52 01 00 b1 52 01 00 b1 52 01 00 b1 52 01 00     .R...R...R...R..
   1009c:	b1 52 01 00 b1 52 01 00 b1 52 01 00 b1 52 01 00     .R...R...R...R..
   100ac:	b1 52 01 00 b1 52 01 00 b1 52 01 00 b1 52 01 00     .R...R...R...R..
   100bc:	b1 52 01 00 b1 52 01 00 b1 52 01 00 b1 52 01 00     .R...R...R...R..
   100cc:	b1 52 01 00 b1 52 01 00 b1 52 01 00 b1 52 01 00     .R...R...R...R..
   100dc:	b1 52 01 00 b1 52 01 00                             .R...R..

000100e4 <data_section_table>:
   100e4:	0001adb8 	.word	0x0001adb8
   100e8:	10000000 	.word	0x10000000
   100ec:	00000560 	.word	0x00000560
   100f0:	0001adb8 	.word	0x0001adb8
   100f4:	20000000 	.word	0x20000000
   100f8:	00000000 	.word	0x00000000

000100fc <bss_section_table>:
   100fc:	10000560 	.word	0x10000560
   10100:	00000b54 	.word	0x00000b54
   10104:	20000000 	.word	0x20000000
   10108:	00000000 	.word	0x00000000

0001010c <InitDataSection()>:
SJ2_IGNORE_STACK_TRACE(void SystemInit());

// Functions to carry out the initialization of RW and BSS data sections.
SJ2_SECTION(".after_vectors")
void InitDataSection()
{
   1010c:	b086      	sub	sp, #24
  for (int i = 0; &data_section_table[i] < &data_section_table_end; i++)
   1010e:	2300      	movs	r3, #0
   10110:	9305      	str	r3, [sp, #20]
   10112:	9a05      	ldr	r2, [sp, #20]
   10114:	4613      	mov	r3, r2
   10116:	005b      	lsls	r3, r3, #1
   10118:	4413      	add	r3, r2
   1011a:	009b      	lsls	r3, r3, #2
   1011c:	4a1d      	ldr	r2, [pc, #116]	; (10194 <InitDataSection()+0x88>)
   1011e:	4413      	add	r3, r2
   10120:	4a1d      	ldr	r2, [pc, #116]	; (10198 <InitDataSection()+0x8c>)
   10122:	4293      	cmp	r3, r2
   10124:	d233      	bcs.n	1018e <InitDataSection()+0x82>
  {
    uint32_t * rom_location = data_section_table[i].rom_location;
   10126:	491b      	ldr	r1, [pc, #108]	; (10194 <InitDataSection()+0x88>)
   10128:	9a05      	ldr	r2, [sp, #20]
   1012a:	4613      	mov	r3, r2
   1012c:	005b      	lsls	r3, r3, #1
   1012e:	4413      	add	r3, r2
   10130:	009b      	lsls	r3, r3, #2
   10132:	440b      	add	r3, r1
   10134:	681b      	ldr	r3, [r3, #0]
   10136:	9303      	str	r3, [sp, #12]
    uint32_t * ram_location = data_section_table[i].ram_location;
   10138:	4916      	ldr	r1, [pc, #88]	; (10194 <InitDataSection()+0x88>)
   1013a:	9a05      	ldr	r2, [sp, #20]
   1013c:	4613      	mov	r3, r2
   1013e:	005b      	lsls	r3, r3, #1
   10140:	4413      	add	r3, r2
   10142:	009b      	lsls	r3, r3, #2
   10144:	440b      	add	r3, r1
   10146:	685b      	ldr	r3, [r3, #4]
   10148:	9302      	str	r3, [sp, #8]
    uint32_t length         = data_section_table[i].length;
   1014a:	4912      	ldr	r1, [pc, #72]	; (10194 <InitDataSection()+0x88>)
   1014c:	9a05      	ldr	r2, [sp, #20]
   1014e:	4613      	mov	r3, r2
   10150:	005b      	lsls	r3, r3, #1
   10152:	4413      	add	r3, r2
   10154:	009b      	lsls	r3, r3, #2
   10156:	440b      	add	r3, r1
   10158:	3308      	adds	r3, #8
   1015a:	681b      	ldr	r3, [r3, #0]
   1015c:	9301      	str	r3, [sp, #4]
    for (size_t j = 0; j < length; j++)
   1015e:	2300      	movs	r3, #0
   10160:	9304      	str	r3, [sp, #16]
   10162:	9a04      	ldr	r2, [sp, #16]
   10164:	9b01      	ldr	r3, [sp, #4]
   10166:	429a      	cmp	r2, r3
   10168:	d20d      	bcs.n	10186 <InitDataSection()+0x7a>
    {
      ram_location[j] = rom_location[j];
   1016a:	9b04      	ldr	r3, [sp, #16]
   1016c:	009b      	lsls	r3, r3, #2
   1016e:	9a03      	ldr	r2, [sp, #12]
   10170:	441a      	add	r2, r3
   10172:	9b04      	ldr	r3, [sp, #16]
   10174:	009b      	lsls	r3, r3, #2
   10176:	9902      	ldr	r1, [sp, #8]
   10178:	440b      	add	r3, r1
   1017a:	6812      	ldr	r2, [r2, #0]
   1017c:	601a      	str	r2, [r3, #0]
    for (size_t j = 0; j < length; j++)
   1017e:	9b04      	ldr	r3, [sp, #16]
   10180:	3301      	adds	r3, #1
   10182:	9304      	str	r3, [sp, #16]
   10184:	e7ed      	b.n	10162 <InitDataSection()+0x56>
  for (int i = 0; &data_section_table[i] < &data_section_table_end; i++)
   10186:	9b05      	ldr	r3, [sp, #20]
   10188:	3301      	adds	r3, #1
   1018a:	9305      	str	r3, [sp, #20]
   1018c:	e7c1      	b.n	10112 <InitDataSection()+0x6>
    }
  }
}
   1018e:	bf00      	nop
   10190:	b006      	add	sp, #24
   10192:	4770      	bx	lr
   10194:	000100e4 	.word	0x000100e4
   10198:	000100fc 	.word	0x000100fc

0001019c <InitBssSection()>:

// Functions to initialization BSS data sections. This is important because
// the std c libs assume that BSS is set to zero.
SJ2_SECTION(".after_vectors")
void InitBssSection()
{
   1019c:	b084      	sub	sp, #16
  for (int i = 0; &bss_section_table[i] < &bss_section_table_end; i++)
   1019e:	2300      	movs	r3, #0
   101a0:	9303      	str	r3, [sp, #12]
   101a2:	9b03      	ldr	r3, [sp, #12]
   101a4:	00db      	lsls	r3, r3, #3
   101a6:	4a13      	ldr	r2, [pc, #76]	; (101f4 <InitBssSection()+0x58>)
   101a8:	4413      	add	r3, r2
   101aa:	4a13      	ldr	r2, [pc, #76]	; (101f8 <InitBssSection()+0x5c>)
   101ac:	4293      	cmp	r3, r2
   101ae:	d21e      	bcs.n	101ee <InitBssSection()+0x52>
  {
    uint32_t * ram_location = bss_section_table[i].ram_location;
   101b0:	4a10      	ldr	r2, [pc, #64]	; (101f4 <InitBssSection()+0x58>)
   101b2:	9b03      	ldr	r3, [sp, #12]
   101b4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
   101b8:	9301      	str	r3, [sp, #4]
    uint32_t length         = bss_section_table[i].length;
   101ba:	4a0e      	ldr	r2, [pc, #56]	; (101f4 <InitBssSection()+0x58>)
   101bc:	9b03      	ldr	r3, [sp, #12]
   101be:	00db      	lsls	r3, r3, #3
   101c0:	4413      	add	r3, r2
   101c2:	685b      	ldr	r3, [r3, #4]
   101c4:	9300      	str	r3, [sp, #0]
    for (size_t j = 0; j < length; j++)
   101c6:	2300      	movs	r3, #0
   101c8:	9302      	str	r3, [sp, #8]
   101ca:	9a02      	ldr	r2, [sp, #8]
   101cc:	9b00      	ldr	r3, [sp, #0]
   101ce:	429a      	cmp	r2, r3
   101d0:	d209      	bcs.n	101e6 <InitBssSection()+0x4a>
    {
      ram_location[j] = 0;
   101d2:	9b02      	ldr	r3, [sp, #8]
   101d4:	009b      	lsls	r3, r3, #2
   101d6:	9a01      	ldr	r2, [sp, #4]
   101d8:	4413      	add	r3, r2
   101da:	2200      	movs	r2, #0
   101dc:	601a      	str	r2, [r3, #0]
    for (size_t j = 0; j < length; j++)
   101de:	9b02      	ldr	r3, [sp, #8]
   101e0:	3301      	adds	r3, #1
   101e2:	9302      	str	r3, [sp, #8]
   101e4:	e7f1      	b.n	101ca <InitBssSection()+0x2e>
  for (int i = 0; &bss_section_table[i] < &bss_section_table_end; i++)
   101e6:	9b03      	ldr	r3, [sp, #12]
   101e8:	3301      	adds	r3, #1
   101ea:	9303      	str	r3, [sp, #12]
   101ec:	e7d9      	b.n	101a2 <InitBssSection()+0x6>
    }
  }
}
   101ee:	bf00      	nop
   101f0:	b004      	add	sp, #16
   101f2:	4770      	bx	lr
   101f4:	000100fc 	.word	0x000100fc
   101f8:	0001010c 	.word	0x0001010c

000101fc <InitFpu()>:
      // Write back the modified value to the CPACR
      "STR     R1, [R0]\n"
      // Wait for store to complete
      "DSB\n"
      // reset pipeline now the FPU is enabled
      "ISB\n");
   101fc:	f8df 0014 	ldr.w	r0, [pc, #20]	; 10214 <InitFpu()+0x18>
   10200:	6801      	ldr	r1, [r0, #0]
   10202:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   10206:	6001      	str	r1, [r0, #0]
   10208:	f3bf 8f4f 	dsb	sy
   1020c:	f3bf 8f6f 	isb	sy
}
   10210:	bf00      	nop
   10212:	4770      	bx	lr
   10214:	e000ed88 	.word	0xe000ed88

00010218 <HardFaultHandler>:
      " mrseq r0, msp                                       \n"
      " mrsne r0, psp                                       \n"
      " ldr r1, [r0, #24]                                   \n"
      " ldr r2, handler2_address_const                      \n"
      " bx r2                                               \n"
      " handler2_address_const: .word GetRegistersFromStack \n");
   10218:	f01e 0f04 	tst.w	lr, #4
   1021c:	bf0c      	ite	eq
   1021e:	f3ef 8008 	mrseq	r0, MSP
   10222:	f3ef 8009 	mrsne	r0, PSP
   10226:	6981      	ldr	r1, [r0, #24]
   10228:	4a00      	ldr	r2, [pc, #0]	; (1022c <handler2_address_const>)
   1022a:	4710      	bx	r2

0001022c <handler2_address_const>:
   1022c:	00015379 	.word	0x00015379
#endif
}
   10230:	bf00      	nop
   10232:	4770      	bx	lr
   10234:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   10238:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   1023c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   10240:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   10244:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   10248:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   1024c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   10250:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   10254:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   10258:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   1025c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   10260:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   10264:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   10268:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   1026c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   10270:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   10274:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   10278:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   1027c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   10280:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   10284:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   10288:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   1028c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   10290:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   10294:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   10298:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   1029c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102a0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102a4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102a8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102ac:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102b0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102b4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102b8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102bc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102c0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102c4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102c8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102cc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102d0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102d4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102d8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102dc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102e0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102e4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102e8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102ec:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102f0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102f4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102f8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

000102fc <__CRP_WORD_START__>:
   102fc:	ffffffff 	.word	0xffffffff

00010300 <_init>:
   10300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10302:	bf00      	nop
   10304:	bcf8      	pop	{r3, r4, r5, r6, r7}
   10306:	bc08      	pop	{r3}
   10308:	469e      	mov	lr, r3
   1030a:	4770      	bx	lr

0001030c <__init_array_start>:
   1030c:	0001034d 	.word	0x0001034d
   10310:	00013aa1 	.word	0x00013aa1
   10314:	00015221 	.word	0x00015221
   10318:	00017f89 	.word	0x00017f89

0001031c <_fini>:
   1031c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1031e:	bf00      	nop
   10320:	bcf8      	pop	{r3, r4, r5, r6, r7}
   10322:	bc08      	pop	{r3}
   10324:	469e      	mov	lr, r3
   10326:	4770      	bx	lr

00010328 <__do_global_dtors_aux>:
   10328:	b510      	push	{r4, lr}
   1032a:	4c05      	ldr	r4, [pc, #20]	; (10340 <__do_global_dtors_aux+0x18>)
   1032c:	7823      	ldrb	r3, [r4, #0]
   1032e:	b933      	cbnz	r3, 1033e <__do_global_dtors_aux+0x16>
   10330:	4b04      	ldr	r3, [pc, #16]	; (10344 <__do_global_dtors_aux+0x1c>)
   10332:	b113      	cbz	r3, 1033a <__do_global_dtors_aux+0x12>
   10334:	4804      	ldr	r0, [pc, #16]	; (10348 <__do_global_dtors_aux+0x20>)
   10336:	f3af 8000 	nop.w
   1033a:	2301      	movs	r3, #1
   1033c:	7023      	strb	r3, [r4, #0]
   1033e:	bd10      	pop	{r4, pc}
   10340:	10000560 	.word	0x10000560
   10344:	00000000 	.word	0x00000000
   10348:	0001adb8 	.word	0x0001adb8

0001034c <frame_dummy>:
   1034c:	b508      	push	{r3, lr}
   1034e:	4b03      	ldr	r3, [pc, #12]	; (1035c <frame_dummy+0x10>)
   10350:	b11b      	cbz	r3, 1035a <frame_dummy+0xe>
   10352:	4903      	ldr	r1, [pc, #12]	; (10360 <frame_dummy+0x14>)
   10354:	4803      	ldr	r0, [pc, #12]	; (10364 <frame_dummy+0x18>)
   10356:	f3af 8000 	nop.w
   1035a:	bd08      	pop	{r3, pc}
   1035c:	00000000 	.word	0x00000000
   10360:	10000564 	.word	0x10000564
   10364:	0001adb8 	.word	0x0001adb8

00010368 <LabGPIO::LabGPIO(unsigned char, unsigned char)>:
     }};
    //inline static volatile uint32_t *stat= &(LPC_GPIOINT->IntStatus);
    
    IsrPointer LabGPIO::pin_isr_map[kPorts][kPins]={ nullptr};
    
 LabGPIO::LabGPIO(uint8_t port, uint8_t pin){
   10368:	b530      	push	{r4, r5, lr}
   1036a:	b083      	sub	sp, #12
   1036c:	4675      	mov	r5, lr
   1036e:	9001      	str	r0, [sp, #4]
   10370:	460b      	mov	r3, r1
   10372:	f88d 3003 	strb.w	r3, [sp, #3]
   10376:	4613      	mov	r3, r2
   10378:	f88d 3002 	strb.w	r3, [sp, #2]
   1037c:	462b      	mov	r3, r5
   1037e:	4619      	mov	r1, r3
   10380:	480e      	ldr	r0, [pc, #56]	; (103bc <LabGPIO::LabGPIO(unsigned char, unsigned char)+0x54>)
   10382:	f005 f8f3 	bl	1556c <__cyg_profile_func_enter>
    SelPort = port;
   10386:	9b01      	ldr	r3, [sp, #4]
   10388:	f89d 2003 	ldrb.w	r2, [sp, #3]
   1038c:	701a      	strb	r2, [r3, #0]
    SelPin = pin;
   1038e:	9b01      	ldr	r3, [sp, #4]
   10390:	f89d 2002 	ldrb.w	r2, [sp, #2]
   10394:	705a      	strb	r2, [r3, #1]
    
    interrupt_port = (port == 2) ? 1:0;
   10396:	f89d 3003 	ldrb.w	r3, [sp, #3]
   1039a:	2b02      	cmp	r3, #2
   1039c:	d101      	bne.n	103a2 <LabGPIO::LabGPIO(unsigned char, unsigned char)+0x3a>
   1039e:	2201      	movs	r2, #1
   103a0:	e000      	b.n	103a4 <LabGPIO::LabGPIO(unsigned char, unsigned char)+0x3c>
   103a2:	2200      	movs	r2, #0
   103a4:	9b01      	ldr	r3, [sp, #4]
   103a6:	709a      	strb	r2, [r3, #2]
 }
   103a8:	9c01      	ldr	r4, [sp, #4]
   103aa:	462b      	mov	r3, r5
   103ac:	4619      	mov	r1, r3
   103ae:	4803      	ldr	r0, [pc, #12]	; (103bc <LabGPIO::LabGPIO(unsigned char, unsigned char)+0x54>)
   103b0:	f005 f8f0 	bl	15594 <__cyg_profile_func_exit>
   103b4:	4623      	mov	r3, r4
   103b6:	4618      	mov	r0, r3
   103b8:	b003      	add	sp, #12
   103ba:	bd30      	pop	{r4, r5, pc}
   103bc:	00010369 	.word	0x00010369

000103c0 <LabGPIO::SetAsOutput()>:
  
  GPIO[SelPort]->DIR &= ~(0<<SelPin);
  
  }

  void LabGPIO::SetAsOutput(){
   103c0:	b510      	push	{r4, lr}
   103c2:	b082      	sub	sp, #8
   103c4:	4674      	mov	r4, lr
   103c6:	9001      	str	r0, [sp, #4]
   103c8:	4623      	mov	r3, r4
   103ca:	4619      	mov	r1, r3
   103cc:	480f      	ldr	r0, [pc, #60]	; (1040c <LabGPIO::SetAsOutput()+0x4c>)
   103ce:	f005 f8cd 	bl	1556c <__cyg_profile_func_enter>
    /// Sets this GPIO as an output
       GPIO[SelPort]-> DIR |= (1<<SelPin);
   103d2:	9b01      	ldr	r3, [sp, #4]
   103d4:	781b      	ldrb	r3, [r3, #0]
   103d6:	461a      	mov	r2, r3
   103d8:	4b0d      	ldr	r3, [pc, #52]	; (10410 <LabGPIO::SetAsOutput()+0x50>)
   103da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   103de:	681a      	ldr	r2, [r3, #0]
   103e0:	9b01      	ldr	r3, [sp, #4]
   103e2:	785b      	ldrb	r3, [r3, #1]
   103e4:	4619      	mov	r1, r3
   103e6:	2301      	movs	r3, #1
   103e8:	408b      	lsls	r3, r1
   103ea:	4619      	mov	r1, r3
   103ec:	9b01      	ldr	r3, [sp, #4]
   103ee:	781b      	ldrb	r3, [r3, #0]
   103f0:	4618      	mov	r0, r3
   103f2:	4b07      	ldr	r3, [pc, #28]	; (10410 <LabGPIO::SetAsOutput()+0x50>)
   103f4:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   103f8:	430a      	orrs	r2, r1
   103fa:	601a      	str	r2, [r3, #0]
   103fc:	4623      	mov	r3, r4
   103fe:	4619      	mov	r1, r3
   10400:	4802      	ldr	r0, [pc, #8]	; (1040c <LabGPIO::SetAsOutput()+0x4c>)
   10402:	f005 f8c7 	bl	15594 <__cyg_profile_func_exit>
     
  }
   10406:	bf00      	nop
   10408:	b002      	add	sp, #8
   1040a:	bd10      	pop	{r4, pc}
   1040c:	000103c1 	.word	0x000103c1
   10410:	10000000 	.word	0x10000000

00010414 <LabGPIO::SetHigh()>:
    if(direction == Direction::kOutput) SetAsOutput();
    else SetAsInput();
   }
  

  void LabGPIO::SetHigh(){
   10414:	b510      	push	{r4, lr}
   10416:	b082      	sub	sp, #8
   10418:	4674      	mov	r4, lr
   1041a:	9001      	str	r0, [sp, #4]
   1041c:	4623      	mov	r3, r4
   1041e:	4619      	mov	r1, r3
   10420:	480b      	ldr	r0, [pc, #44]	; (10450 <LabGPIO::SetHigh()+0x3c>)
   10422:	f005 f8a3 	bl	1556c <__cyg_profile_func_enter>
       /// Set voltage of pin to HIGH
        GPIO[SelPort]-> SET = (1<<SelPin);
   10426:	9b01      	ldr	r3, [sp, #4]
   10428:	785b      	ldrb	r3, [r3, #1]
   1042a:	461a      	mov	r2, r3
   1042c:	2301      	movs	r3, #1
   1042e:	fa03 f202 	lsl.w	r2, r3, r2
   10432:	9b01      	ldr	r3, [sp, #4]
   10434:	781b      	ldrb	r3, [r3, #0]
   10436:	4619      	mov	r1, r3
   10438:	4b06      	ldr	r3, [pc, #24]	; (10454 <LabGPIO::SetHigh()+0x40>)
   1043a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   1043e:	619a      	str	r2, [r3, #24]
   10440:	4623      	mov	r3, r4
   10442:	4619      	mov	r1, r3
   10444:	4802      	ldr	r0, [pc, #8]	; (10450 <LabGPIO::SetHigh()+0x3c>)
   10446:	f005 f8a5 	bl	15594 <__cyg_profile_func_exit>
    
  }
   1044a:	bf00      	nop
   1044c:	b002      	add	sp, #8
   1044e:	bd10      	pop	{r4, pc}
   10450:	00010415 	.word	0x00010415
   10454:	10000000 	.word	0x10000000

00010458 <LabGPIO::SetLow()>:
  void LabGPIO::SetLow(){
   10458:	b510      	push	{r4, lr}
   1045a:	b082      	sub	sp, #8
   1045c:	4674      	mov	r4, lr
   1045e:	9001      	str	r0, [sp, #4]
   10460:	4623      	mov	r3, r4
   10462:	4619      	mov	r1, r3
   10464:	480b      	ldr	r0, [pc, #44]	; (10494 <LabGPIO::SetLow()+0x3c>)
   10466:	f005 f881 	bl	1556c <__cyg_profile_func_enter>
        /// Set voltage of pin to LOW
            GPIO[SelPort]-> CLR = (1<<SelPin);
   1046a:	9b01      	ldr	r3, [sp, #4]
   1046c:	785b      	ldrb	r3, [r3, #1]
   1046e:	461a      	mov	r2, r3
   10470:	2301      	movs	r3, #1
   10472:	fa03 f202 	lsl.w	r2, r3, r2
   10476:	9b01      	ldr	r3, [sp, #4]
   10478:	781b      	ldrb	r3, [r3, #0]
   1047a:	4619      	mov	r1, r3
   1047c:	4b06      	ldr	r3, [pc, #24]	; (10498 <LabGPIO::SetLow()+0x40>)
   1047e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   10482:	61da      	str	r2, [r3, #28]
   10484:	4623      	mov	r3, r4
   10486:	4619      	mov	r1, r3
   10488:	4802      	ldr	r0, [pc, #8]	; (10494 <LabGPIO::SetLow()+0x3c>)
   1048a:	f005 f883 	bl	15594 <__cyg_profile_func_exit>
   
  }
   1048e:	bf00      	nop
   10490:	b002      	add	sp, #8
   10492:	bd10      	pop	{r4, pc}
   10494:	00010459 	.word	0x00010459
   10498:	10000000 	.word	0x10000000

0001049c <LabSpi::LabSpi(LabSpi::Peripheral)>:
#include "LabSPI.hpp"
inline static LPC_SSP_TypeDef * SSP[3] = {LPC_SSP0, LPC_SSP1, LPC_SSP2};

LabSpi::LabSpi(Peripheral SSPn){
   1049c:	b530      	push	{r4, r5, lr}
   1049e:	b083      	sub	sp, #12
   104a0:	4675      	mov	r5, lr
   104a2:	9001      	str	r0, [sp, #4]
   104a4:	460b      	mov	r3, r1
   104a6:	f88d 3003 	strb.w	r3, [sp, #3]
   104aa:	462b      	mov	r3, r5
   104ac:	4619      	mov	r1, r3
   104ae:	4808      	ldr	r0, [pc, #32]	; (104d0 <LabSpi::LabSpi(LabSpi::Peripheral)+0x34>)
   104b0:	f005 f85c 	bl	1556c <__cyg_profile_func_enter>
    SpiPort = SSPn;
   104b4:	9b01      	ldr	r3, [sp, #4]
   104b6:	f89d 2003 	ldrb.w	r2, [sp, #3]
   104ba:	701a      	strb	r2, [r3, #0]
}
   104bc:	9c01      	ldr	r4, [sp, #4]
   104be:	462b      	mov	r3, r5
   104c0:	4619      	mov	r1, r3
   104c2:	4803      	ldr	r0, [pc, #12]	; (104d0 <LabSpi::LabSpi(LabSpi::Peripheral)+0x34>)
   104c4:	f005 f866 	bl	15594 <__cyg_profile_func_exit>
   104c8:	4623      	mov	r3, r4
   104ca:	4618      	mov	r0, r3
   104cc:	b003      	add	sp, #12
   104ce:	bd30      	pop	{r4, r5, pc}
   104d0:	0001049d 	.word	0x0001049d

000104d4 <LabSpi::Initialize(unsigned char, LabSpi::FrameModes, unsigned char, LabSpi::Master_Slave)>:
bool LabSpi::Initialize(uint8_t data_size_select, FrameModes format, uint8_t divide, Master_Slave mode)
{
   104d4:	b530      	push	{r4, r5, lr}
   104d6:	b083      	sub	sp, #12
   104d8:	4675      	mov	r5, lr
   104da:	9001      	str	r0, [sp, #4]
   104dc:	4608      	mov	r0, r1
   104de:	4611      	mov	r1, r2
   104e0:	461a      	mov	r2, r3
   104e2:	4603      	mov	r3, r0
   104e4:	f88d 3003 	strb.w	r3, [sp, #3]
   104e8:	460b      	mov	r3, r1
   104ea:	f88d 3002 	strb.w	r3, [sp, #2]
   104ee:	4613      	mov	r3, r2
   104f0:	f88d 3001 	strb.w	r3, [sp, #1]
   104f4:	462b      	mov	r3, r5
   104f6:	4619      	mov	r1, r3
   104f8:	489e      	ldr	r0, [pc, #632]	; (10774 <LabSpi::Initialize(unsigned char, LabSpi::FrameModes, unsigned char, LabSpi::Master_Slave)+0x2a0>)
   104fa:	f005 f837 	bl	1556c <__cyg_profile_func_enter>
  // Initialize SSP peripheral to master
  switch(SpiPort)
   104fe:	9b01      	ldr	r3, [sp, #4]
   10500:	781b      	ldrb	r3, [r3, #0]
   10502:	2b01      	cmp	r3, #1
   10504:	d012      	beq.n	1052c <LabSpi::Initialize(unsigned char, LabSpi::FrameModes, unsigned char, LabSpi::Master_Slave)+0x58>
   10506:	2b02      	cmp	r3, #2
   10508:	d01f      	beq.n	1054a <LabSpi::Initialize(unsigned char, LabSpi::FrameModes, unsigned char, LabSpi::Master_Slave)+0x76>
   1050a:	2b00      	cmp	r3, #0
   1050c:	d12c      	bne.n	10568 <LabSpi::Initialize(unsigned char, LabSpi::FrameModes, unsigned char, LabSpi::Master_Slave)+0x94>
  {
    case 0:
      LPC_SC->PCONP |= (1<<21);
   1050e:	4b9a      	ldr	r3, [pc, #616]	; (10778 <LabSpi::Initialize(unsigned char, LabSpi::FrameModes, unsigned char, LabSpi::Master_Slave)+0x2a4>)
   10510:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
   10514:	4a98      	ldr	r2, [pc, #608]	; (10778 <LabSpi::Initialize(unsigned char, LabSpi::FrameModes, unsigned char, LabSpi::Master_Slave)+0x2a4>)
   10516:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
   1051a:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
      chip_deselect();
   1051e:	9801      	ldr	r0, [sp, #4]
   10520:	f000 f9b2 	bl	10888 <LabSpi::chip_deselect()>
      chip_set();
   10524:	9801      	ldr	r0, [sp, #4]
   10526:	f000 fa23 	bl	10970 <LabSpi::chip_set()>
      break;
   1052a:	e01d      	b.n	10568 <LabSpi::Initialize(unsigned char, LabSpi::FrameModes, unsigned char, LabSpi::Master_Slave)+0x94>
    case 1:
      LPC_SC->PCONP |= (1<<10);
   1052c:	4b92      	ldr	r3, [pc, #584]	; (10778 <LabSpi::Initialize(unsigned char, LabSpi::FrameModes, unsigned char, LabSpi::Master_Slave)+0x2a4>)
   1052e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
   10532:	4a91      	ldr	r2, [pc, #580]	; (10778 <LabSpi::Initialize(unsigned char, LabSpi::FrameModes, unsigned char, LabSpi::Master_Slave)+0x2a4>)
   10534:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
   10538:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
      chip_deselect();
   1053c:	9801      	ldr	r0, [sp, #4]
   1053e:	f000 f9a3 	bl	10888 <LabSpi::chip_deselect()>
      chip_set();
   10542:	9801      	ldr	r0, [sp, #4]
   10544:	f000 fa14 	bl	10970 <LabSpi::chip_set()>
      break;
   10548:	e00e      	b.n	10568 <LabSpi::Initialize(unsigned char, LabSpi::FrameModes, unsigned char, LabSpi::Master_Slave)+0x94>
    case 2: 
      //SSP 2
      LPC_SC -> PCONP |= (1<<20);
   1054a:	4b8b      	ldr	r3, [pc, #556]	; (10778 <LabSpi::Initialize(unsigned char, LabSpi::FrameModes, unsigned char, LabSpi::Master_Slave)+0x2a4>)
   1054c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
   10550:	4a89      	ldr	r2, [pc, #548]	; (10778 <LabSpi::Initialize(unsigned char, LabSpi::FrameModes, unsigned char, LabSpi::Master_Slave)+0x2a4>)
   10552:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   10556:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
      chip_deselect();
   1055a:	9801      	ldr	r0, [sp, #4]
   1055c:	f000 f994 	bl	10888 <LabSpi::chip_deselect()>
      chip_set();
   10560:	9801      	ldr	r0, [sp, #4]
   10562:	f000 fa05 	bl	10970 <LabSpi::chip_set()>
      break;
   10566:	bf00      	nop
    
  }
 
  if( mode == kMaster){
   10568:	f89d 3018 	ldrb.w	r3, [sp, #24]
   1056c:	2b00      	cmp	r3, #0
   1056e:	d179      	bne.n	10664 <LabSpi::Initialize(unsigned char, LabSpi::FrameModes, unsigned char, LabSpi::Master_Slave)+0x190>
  SSP[SpiPort]->CR0 &= ~(0xFFFF<<0);//Clear first 16 bits
   10570:	9b01      	ldr	r3, [sp, #4]
   10572:	781b      	ldrb	r3, [r3, #0]
   10574:	461a      	mov	r2, r3
   10576:	4b81      	ldr	r3, [pc, #516]	; (1077c <LabSpi::Initialize(unsigned char, LabSpi::FrameModes, unsigned char, LabSpi::Master_Slave)+0x2a8>)
   10578:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   1057c:	681b      	ldr	r3, [r3, #0]
   1057e:	9a01      	ldr	r2, [sp, #4]
   10580:	7812      	ldrb	r2, [r2, #0]
   10582:	4611      	mov	r1, r2
   10584:	4a7d      	ldr	r2, [pc, #500]	; (1077c <LabSpi::Initialize(unsigned char, LabSpi::FrameModes, unsigned char, LabSpi::Master_Slave)+0x2a8>)
   10586:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
   1058a:	0c1b      	lsrs	r3, r3, #16
   1058c:	041b      	lsls	r3, r3, #16
   1058e:	6013      	str	r3, [r2, #0]
  SSP[SpiPort]->CR0 |= (data_size_select-1); // set bit transfer size
   10590:	9b01      	ldr	r3, [sp, #4]
   10592:	781b      	ldrb	r3, [r3, #0]
   10594:	461a      	mov	r2, r3
   10596:	4b79      	ldr	r3, [pc, #484]	; (1077c <LabSpi::Initialize(unsigned char, LabSpi::FrameModes, unsigned char, LabSpi::Master_Slave)+0x2a8>)
   10598:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   1059c:	681a      	ldr	r2, [r3, #0]
   1059e:	f89d 3003 	ldrb.w	r3, [sp, #3]
   105a2:	3b01      	subs	r3, #1
   105a4:	4619      	mov	r1, r3
   105a6:	9b01      	ldr	r3, [sp, #4]
   105a8:	781b      	ldrb	r3, [r3, #0]
   105aa:	4618      	mov	r0, r3
   105ac:	4b73      	ldr	r3, [pc, #460]	; (1077c <LabSpi::Initialize(unsigned char, LabSpi::FrameModes, unsigned char, LabSpi::Master_Slave)+0x2a8>)
   105ae:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   105b2:	430a      	orrs	r2, r1
   105b4:	601a      	str	r2, [r3, #0]
  SSP[SpiPort]->CR0 |= (format << 4); // select frame format
   105b6:	9b01      	ldr	r3, [sp, #4]
   105b8:	781b      	ldrb	r3, [r3, #0]
   105ba:	461a      	mov	r2, r3
   105bc:	4b6f      	ldr	r3, [pc, #444]	; (1077c <LabSpi::Initialize(unsigned char, LabSpi::FrameModes, unsigned char, LabSpi::Master_Slave)+0x2a8>)
   105be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   105c2:	681a      	ldr	r2, [r3, #0]
   105c4:	f89d 3002 	ldrb.w	r3, [sp, #2]
   105c8:	011b      	lsls	r3, r3, #4
   105ca:	4619      	mov	r1, r3
   105cc:	9b01      	ldr	r3, [sp, #4]
   105ce:	781b      	ldrb	r3, [r3, #0]
   105d0:	4618      	mov	r0, r3
   105d2:	4b6a      	ldr	r3, [pc, #424]	; (1077c <LabSpi::Initialize(unsigned char, LabSpi::FrameModes, unsigned char, LabSpi::Master_Slave)+0x2a8>)
   105d4:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   105d8:	430a      	orrs	r2, r1
   105da:	601a      	str	r2, [r3, #0]
  SSP[SpiPort]->CPSR |= (divide); 
   105dc:	9b01      	ldr	r3, [sp, #4]
   105de:	781b      	ldrb	r3, [r3, #0]
   105e0:	461a      	mov	r2, r3
   105e2:	4b66      	ldr	r3, [pc, #408]	; (1077c <LabSpi::Initialize(unsigned char, LabSpi::FrameModes, unsigned char, LabSpi::Master_Slave)+0x2a8>)
   105e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   105e8:	691a      	ldr	r2, [r3, #16]
   105ea:	f89d 3001 	ldrb.w	r3, [sp, #1]
   105ee:	4619      	mov	r1, r3
   105f0:	9b01      	ldr	r3, [sp, #4]
   105f2:	781b      	ldrb	r3, [r3, #0]
   105f4:	4618      	mov	r0, r3
   105f6:	4b61      	ldr	r3, [pc, #388]	; (1077c <LabSpi::Initialize(unsigned char, LabSpi::FrameModes, unsigned char, LabSpi::Master_Slave)+0x2a8>)
   105f8:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   105fc:	430a      	orrs	r2, r1
   105fe:	611a      	str	r2, [r3, #16]
  SSP[SpiPort]->CR0 |= (1 << 8); // Serial Clock Rate
   10600:	9b01      	ldr	r3, [sp, #4]
   10602:	781b      	ldrb	r3, [r3, #0]
   10604:	461a      	mov	r2, r3
   10606:	4b5d      	ldr	r3, [pc, #372]	; (1077c <LabSpi::Initialize(unsigned char, LabSpi::FrameModes, unsigned char, LabSpi::Master_Slave)+0x2a8>)
   10608:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   1060c:	681a      	ldr	r2, [r3, #0]
   1060e:	9b01      	ldr	r3, [sp, #4]
   10610:	781b      	ldrb	r3, [r3, #0]
   10612:	4619      	mov	r1, r3
   10614:	4b59      	ldr	r3, [pc, #356]	; (1077c <LabSpi::Initialize(unsigned char, LabSpi::FrameModes, unsigned char, LabSpi::Master_Slave)+0x2a8>)
   10616:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   1061a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   1061e:	601a      	str	r2, [r3, #0]
  SSP[SpiPort]->CR1 &= ~(0b111 << 0); // Clears CR1 and set to master and normal operation
   10620:	9b01      	ldr	r3, [sp, #4]
   10622:	781b      	ldrb	r3, [r3, #0]
   10624:	461a      	mov	r2, r3
   10626:	4b55      	ldr	r3, [pc, #340]	; (1077c <LabSpi::Initialize(unsigned char, LabSpi::FrameModes, unsigned char, LabSpi::Master_Slave)+0x2a8>)
   10628:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   1062c:	685a      	ldr	r2, [r3, #4]
   1062e:	9b01      	ldr	r3, [sp, #4]
   10630:	781b      	ldrb	r3, [r3, #0]
   10632:	4619      	mov	r1, r3
   10634:	4b51      	ldr	r3, [pc, #324]	; (1077c <LabSpi::Initialize(unsigned char, LabSpi::FrameModes, unsigned char, LabSpi::Master_Slave)+0x2a8>)
   10636:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   1063a:	f022 0207 	bic.w	r2, r2, #7
   1063e:	605a      	str	r2, [r3, #4]
  SSP[SpiPort]->CR1 |= (0b1<<1); // Enable SSP controller
   10640:	9b01      	ldr	r3, [sp, #4]
   10642:	781b      	ldrb	r3, [r3, #0]
   10644:	461a      	mov	r2, r3
   10646:	4b4d      	ldr	r3, [pc, #308]	; (1077c <LabSpi::Initialize(unsigned char, LabSpi::FrameModes, unsigned char, LabSpi::Master_Slave)+0x2a8>)
   10648:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   1064c:	685a      	ldr	r2, [r3, #4]
   1064e:	9b01      	ldr	r3, [sp, #4]
   10650:	781b      	ldrb	r3, [r3, #0]
   10652:	4619      	mov	r1, r3
   10654:	4b49      	ldr	r3, [pc, #292]	; (1077c <LabSpi::Initialize(unsigned char, LabSpi::FrameModes, unsigned char, LabSpi::Master_Slave)+0x2a8>)
   10656:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   1065a:	f042 0202 	orr.w	r2, r2, #2
   1065e:	605a      	str	r2, [r3, #4]
  return true;
   10660:	2401      	movs	r4, #1
   10662:	e07e      	b.n	10762 <LabSpi::Initialize(unsigned char, LabSpi::FrameModes, unsigned char, LabSpi::Master_Slave)+0x28e>
  }
  else if (mode == kSlave)
   10664:	f89d 3018 	ldrb.w	r3, [sp, #24]
   10668:	2b01      	cmp	r3, #1
   1066a:	d179      	bne.n	10760 <LabSpi::Initialize(unsigned char, LabSpi::FrameModes, unsigned char, LabSpi::Master_Slave)+0x28c>
  {
  SSP[SpiPort]->CR0 &= ~(0xFFFF<<0);//Clear first 16 bits
   1066c:	9b01      	ldr	r3, [sp, #4]
   1066e:	781b      	ldrb	r3, [r3, #0]
   10670:	461a      	mov	r2, r3
   10672:	4b42      	ldr	r3, [pc, #264]	; (1077c <LabSpi::Initialize(unsigned char, LabSpi::FrameModes, unsigned char, LabSpi::Master_Slave)+0x2a8>)
   10674:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   10678:	681b      	ldr	r3, [r3, #0]
   1067a:	9a01      	ldr	r2, [sp, #4]
   1067c:	7812      	ldrb	r2, [r2, #0]
   1067e:	4611      	mov	r1, r2
   10680:	4a3e      	ldr	r2, [pc, #248]	; (1077c <LabSpi::Initialize(unsigned char, LabSpi::FrameModes, unsigned char, LabSpi::Master_Slave)+0x2a8>)
   10682:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
   10686:	0c1b      	lsrs	r3, r3, #16
   10688:	041b      	lsls	r3, r3, #16
   1068a:	6013      	str	r3, [r2, #0]
  SSP[SpiPort]->CR0 |= (data_size_select-1); // set bit transfer size
   1068c:	9b01      	ldr	r3, [sp, #4]
   1068e:	781b      	ldrb	r3, [r3, #0]
   10690:	461a      	mov	r2, r3
   10692:	4b3a      	ldr	r3, [pc, #232]	; (1077c <LabSpi::Initialize(unsigned char, LabSpi::FrameModes, unsigned char, LabSpi::Master_Slave)+0x2a8>)
   10694:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   10698:	681a      	ldr	r2, [r3, #0]
   1069a:	f89d 3003 	ldrb.w	r3, [sp, #3]
   1069e:	3b01      	subs	r3, #1
   106a0:	4619      	mov	r1, r3
   106a2:	9b01      	ldr	r3, [sp, #4]
   106a4:	781b      	ldrb	r3, [r3, #0]
   106a6:	4618      	mov	r0, r3
   106a8:	4b34      	ldr	r3, [pc, #208]	; (1077c <LabSpi::Initialize(unsigned char, LabSpi::FrameModes, unsigned char, LabSpi::Master_Slave)+0x2a8>)
   106aa:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   106ae:	430a      	orrs	r2, r1
   106b0:	601a      	str	r2, [r3, #0]
  SSP[SpiPort]->CR0 |= (format << 4); // select frame format
   106b2:	9b01      	ldr	r3, [sp, #4]
   106b4:	781b      	ldrb	r3, [r3, #0]
   106b6:	461a      	mov	r2, r3
   106b8:	4b30      	ldr	r3, [pc, #192]	; (1077c <LabSpi::Initialize(unsigned char, LabSpi::FrameModes, unsigned char, LabSpi::Master_Slave)+0x2a8>)
   106ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   106be:	681a      	ldr	r2, [r3, #0]
   106c0:	f89d 3002 	ldrb.w	r3, [sp, #2]
   106c4:	011b      	lsls	r3, r3, #4
   106c6:	4619      	mov	r1, r3
   106c8:	9b01      	ldr	r3, [sp, #4]
   106ca:	781b      	ldrb	r3, [r3, #0]
   106cc:	4618      	mov	r0, r3
   106ce:	4b2b      	ldr	r3, [pc, #172]	; (1077c <LabSpi::Initialize(unsigned char, LabSpi::FrameModes, unsigned char, LabSpi::Master_Slave)+0x2a8>)
   106d0:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   106d4:	430a      	orrs	r2, r1
   106d6:	601a      	str	r2, [r3, #0]
  SSP[SpiPort]->CR0 |= (1<<8);// Serial Clock Rate
   106d8:	9b01      	ldr	r3, [sp, #4]
   106da:	781b      	ldrb	r3, [r3, #0]
   106dc:	461a      	mov	r2, r3
   106de:	4b27      	ldr	r3, [pc, #156]	; (1077c <LabSpi::Initialize(unsigned char, LabSpi::FrameModes, unsigned char, LabSpi::Master_Slave)+0x2a8>)
   106e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   106e4:	681a      	ldr	r2, [r3, #0]
   106e6:	9b01      	ldr	r3, [sp, #4]
   106e8:	781b      	ldrb	r3, [r3, #0]
   106ea:	4619      	mov	r1, r3
   106ec:	4b23      	ldr	r3, [pc, #140]	; (1077c <LabSpi::Initialize(unsigned char, LabSpi::FrameModes, unsigned char, LabSpi::Master_Slave)+0x2a8>)
   106ee:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   106f2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   106f6:	601a      	str	r2, [r3, #0]
  SSP[SpiPort]->CPSR |= (divide); // Clock Prescale Register defaulted to 2
   106f8:	9b01      	ldr	r3, [sp, #4]
   106fa:	781b      	ldrb	r3, [r3, #0]
   106fc:	461a      	mov	r2, r3
   106fe:	4b1f      	ldr	r3, [pc, #124]	; (1077c <LabSpi::Initialize(unsigned char, LabSpi::FrameModes, unsigned char, LabSpi::Master_Slave)+0x2a8>)
   10700:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   10704:	691a      	ldr	r2, [r3, #16]
   10706:	f89d 3001 	ldrb.w	r3, [sp, #1]
   1070a:	4619      	mov	r1, r3
   1070c:	9b01      	ldr	r3, [sp, #4]
   1070e:	781b      	ldrb	r3, [r3, #0]
   10710:	4618      	mov	r0, r3
   10712:	4b1a      	ldr	r3, [pc, #104]	; (1077c <LabSpi::Initialize(unsigned char, LabSpi::FrameModes, unsigned char, LabSpi::Master_Slave)+0x2a8>)
   10714:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   10718:	430a      	orrs	r2, r1
   1071a:	611a      	str	r2, [r3, #16]
  SSP[SpiPort]->CR1 &= ~(0b111 << 0); // Clears CR1 and sets normal operation
   1071c:	9b01      	ldr	r3, [sp, #4]
   1071e:	781b      	ldrb	r3, [r3, #0]
   10720:	461a      	mov	r2, r3
   10722:	4b16      	ldr	r3, [pc, #88]	; (1077c <LabSpi::Initialize(unsigned char, LabSpi::FrameModes, unsigned char, LabSpi::Master_Slave)+0x2a8>)
   10724:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   10728:	685a      	ldr	r2, [r3, #4]
   1072a:	9b01      	ldr	r3, [sp, #4]
   1072c:	781b      	ldrb	r3, [r3, #0]
   1072e:	4619      	mov	r1, r3
   10730:	4b12      	ldr	r3, [pc, #72]	; (1077c <LabSpi::Initialize(unsigned char, LabSpi::FrameModes, unsigned char, LabSpi::Master_Slave)+0x2a8>)
   10732:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   10736:	f022 0207 	bic.w	r2, r2, #7
   1073a:	605a      	str	r2, [r3, #4]
  SSP[SpiPort]->CR1 |= (0b11<<1); // Enable SSP controller and set to slave mode
   1073c:	9b01      	ldr	r3, [sp, #4]
   1073e:	781b      	ldrb	r3, [r3, #0]
   10740:	461a      	mov	r2, r3
   10742:	4b0e      	ldr	r3, [pc, #56]	; (1077c <LabSpi::Initialize(unsigned char, LabSpi::FrameModes, unsigned char, LabSpi::Master_Slave)+0x2a8>)
   10744:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   10748:	685a      	ldr	r2, [r3, #4]
   1074a:	9b01      	ldr	r3, [sp, #4]
   1074c:	781b      	ldrb	r3, [r3, #0]
   1074e:	4619      	mov	r1, r3
   10750:	4b0a      	ldr	r3, [pc, #40]	; (1077c <LabSpi::Initialize(unsigned char, LabSpi::FrameModes, unsigned char, LabSpi::Master_Slave)+0x2a8>)
   10752:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   10756:	f042 0206 	orr.w	r2, r2, #6
   1075a:	605a      	str	r2, [r3, #4]
  return true;
   1075c:	2401      	movs	r4, #1
   1075e:	e000      	b.n	10762 <LabSpi::Initialize(unsigned char, LabSpi::FrameModes, unsigned char, LabSpi::Master_Slave)+0x28e>
  }
  else 
      return false;
   10760:	2400      	movs	r4, #0
   10762:	462b      	mov	r3, r5
   10764:	4619      	mov	r1, r3
   10766:	4803      	ldr	r0, [pc, #12]	; (10774 <LabSpi::Initialize(unsigned char, LabSpi::FrameModes, unsigned char, LabSpi::Master_Slave)+0x2a0>)
   10768:	f004 ff14 	bl	15594 <__cyg_profile_func_exit>
   1076c:	4623      	mov	r3, r4
  }
   1076e:	4618      	mov	r0, r3
   10770:	b003      	add	sp, #12
   10772:	bd30      	pop	{r4, r5, pc}
   10774:	000104d5 	.word	0x000104d5
   10778:	400fc000 	.word	0x400fc000
   1077c:	10000018 	.word	0x10000018

00010780 <LabSpi::chip_select()>:

void LabSpi::chip_select()
{
   10780:	b510      	push	{r4, lr}
   10782:	b08e      	sub	sp, #56	; 0x38
   10784:	4674      	mov	r4, lr
   10786:	9001      	str	r0, [sp, #4]
   10788:	4623      	mov	r3, r4
   1078a:	4619      	mov	r1, r3
   1078c:	483a      	ldr	r0, [pc, #232]	; (10878 <LabSpi::chip_select()+0xf8>)
   1078e:	f004 feed 	bl	1556c <__cyg_profile_func_enter>
    switch(SpiPort)
   10792:	9b01      	ldr	r3, [sp, #4]
   10794:	781b      	ldrb	r3, [r3, #0]
   10796:	2b01      	cmp	r3, #1
   10798:	d024      	beq.n	107e4 <LabSpi::chip_select()+0x64>
   1079a:	2b02      	cmp	r3, #2
   1079c:	d043      	beq.n	10826 <LabSpi::chip_select()+0xa6>
   1079e:	2b00      	cmp	r3, #0
   107a0:	d161      	bne.n	10866 <LabSpi::chip_select()+0xe6>
    {
    case 0:
    {
      LabGPIO CE0(0,16); //CE 
   107a2:	ab0c      	add	r3, sp, #48	; 0x30
   107a4:	2210      	movs	r2, #16
   107a6:	2100      	movs	r1, #0
   107a8:	4618      	mov	r0, r3
   107aa:	f7ff fddd 	bl	10368 <LabGPIO::LabGPIO(unsigned char, unsigned char)>
      LabGPIO MCE0(0,1);// Mirror
   107ae:	ab0a      	add	r3, sp, #40	; 0x28
   107b0:	2201      	movs	r2, #1
   107b2:	2100      	movs	r1, #0
   107b4:	4618      	mov	r0, r3
   107b6:	f7ff fdd7 	bl	10368 <LabGPIO::LabGPIO(unsigned char, unsigned char)>
      CE0.SetAsOutput();
   107ba:	ab0c      	add	r3, sp, #48	; 0x30
   107bc:	4618      	mov	r0, r3
   107be:	f7ff fdff 	bl	103c0 <LabGPIO::SetAsOutput()>
      MCE0.SetAsOutput();
   107c2:	ab0a      	add	r3, sp, #40	; 0x28
   107c4:	4618      	mov	r0, r3
   107c6:	f7ff fdfb 	bl	103c0 <LabGPIO::SetAsOutput()>
      CE0.SetLow();
   107ca:	ab0c      	add	r3, sp, #48	; 0x30
   107cc:	4618      	mov	r0, r3
   107ce:	f7ff fe43 	bl	10458 <LabGPIO::SetLow()>
      MCE0.SetLow();
   107d2:	ab0a      	add	r3, sp, #40	; 0x28
   107d4:	4618      	mov	r0, r3
   107d6:	f7ff fe3f 	bl	10458 <LabGPIO::SetLow()>
      printf("P0_1 is the CE mirror pin\n");
   107da:	4828      	ldr	r0, [pc, #160]	; (1087c <LabSpi::chip_select()+0xfc>)
   107dc:	f004 fe96 	bl	1550c <puts>
      break;
   107e0:	bf00      	nop
   107e2:	e040      	b.n	10866 <LabSpi::chip_select()+0xe6>
    }
    case 1:
    {
     LabGPIO CE1(0,6); //CE 
   107e4:	ab08      	add	r3, sp, #32
   107e6:	2206      	movs	r2, #6
   107e8:	2100      	movs	r1, #0
   107ea:	4618      	mov	r0, r3
   107ec:	f7ff fdbc 	bl	10368 <LabGPIO::LabGPIO(unsigned char, unsigned char)>
      LabGPIO MCE1(0,25);//Mirror
   107f0:	ab06      	add	r3, sp, #24
   107f2:	2219      	movs	r2, #25
   107f4:	2100      	movs	r1, #0
   107f6:	4618      	mov	r0, r3
   107f8:	f7ff fdb6 	bl	10368 <LabGPIO::LabGPIO(unsigned char, unsigned char)>
      CE1.SetAsOutput();
   107fc:	ab08      	add	r3, sp, #32
   107fe:	4618      	mov	r0, r3
   10800:	f7ff fdde 	bl	103c0 <LabGPIO::SetAsOutput()>
      MCE1.SetAsOutput();
   10804:	ab06      	add	r3, sp, #24
   10806:	4618      	mov	r0, r3
   10808:	f7ff fdda 	bl	103c0 <LabGPIO::SetAsOutput()>
      CE1.SetLow();
   1080c:	ab08      	add	r3, sp, #32
   1080e:	4618      	mov	r0, r3
   10810:	f7ff fe22 	bl	10458 <LabGPIO::SetLow()>
      MCE1.SetLow();
   10814:	ab06      	add	r3, sp, #24
   10816:	4618      	mov	r0, r3
   10818:	f7ff fe1e 	bl	10458 <LabGPIO::SetLow()>
      printf("P0_25 is the CE mirror pin\n");
   1081c:	4818      	ldr	r0, [pc, #96]	; (10880 <LabSpi::chip_select()+0x100>)
   1081e:	f004 fe75 	bl	1550c <puts>
      break;
   10822:	bf00      	nop
   10824:	e01f      	b.n	10866 <LabSpi::chip_select()+0xe6>
    }
    case 2: 
    {
      LabGPIO CE2(1,10); //CE 
   10826:	ab04      	add	r3, sp, #16
   10828:	220a      	movs	r2, #10
   1082a:	2101      	movs	r1, #1
   1082c:	4618      	mov	r0, r3
   1082e:	f7ff fd9b 	bl	10368 <LabGPIO::LabGPIO(unsigned char, unsigned char)>
      LabGPIO MCE2(0,6); // Mirror
   10832:	ab02      	add	r3, sp, #8
   10834:	2206      	movs	r2, #6
   10836:	2100      	movs	r1, #0
   10838:	4618      	mov	r0, r3
   1083a:	f7ff fd95 	bl	10368 <LabGPIO::LabGPIO(unsigned char, unsigned char)>
      CE2.SetAsOutput();
   1083e:	ab04      	add	r3, sp, #16
   10840:	4618      	mov	r0, r3
   10842:	f7ff fdbd 	bl	103c0 <LabGPIO::SetAsOutput()>
      MCE2.SetAsOutput();
   10846:	ab02      	add	r3, sp, #8
   10848:	4618      	mov	r0, r3
   1084a:	f7ff fdb9 	bl	103c0 <LabGPIO::SetAsOutput()>
      CE2.SetLow();
   1084e:	ab04      	add	r3, sp, #16
   10850:	4618      	mov	r0, r3
   10852:	f7ff fe01 	bl	10458 <LabGPIO::SetLow()>
      MCE2.SetLow();
   10856:	ab02      	add	r3, sp, #8
   10858:	4618      	mov	r0, r3
   1085a:	f7ff fdfd 	bl	10458 <LabGPIO::SetLow()>
      printf("P4_28 is the CE mirror pin\n");
   1085e:	4809      	ldr	r0, [pc, #36]	; (10884 <LabSpi::chip_select()+0x104>)
   10860:	f004 fe54 	bl	1550c <puts>
      break;
   10864:	bf00      	nop
   10866:	4623      	mov	r3, r4
   10868:	4619      	mov	r1, r3
   1086a:	4803      	ldr	r0, [pc, #12]	; (10878 <LabSpi::chip_select()+0xf8>)
   1086c:	f004 fe92 	bl	15594 <__cyg_profile_func_exit>
    }
    }
    }
   10870:	bf00      	nop
   10872:	b00e      	add	sp, #56	; 0x38
   10874:	bd10      	pop	{r4, pc}
   10876:	bf00      	nop
   10878:	00010781 	.word	0x00010781
   1087c:	000184cc 	.word	0x000184cc
   10880:	000184e8 	.word	0x000184e8
   10884:	00018504 	.word	0x00018504

00010888 <LabSpi::chip_deselect()>:
    

void LabSpi::chip_deselect(){
   10888:	b510      	push	{r4, lr}
   1088a:	b08e      	sub	sp, #56	; 0x38
   1088c:	4674      	mov	r4, lr
   1088e:	9001      	str	r0, [sp, #4]
   10890:	4623      	mov	r3, r4
   10892:	4619      	mov	r1, r3
   10894:	4835      	ldr	r0, [pc, #212]	; (1096c <LabSpi::chip_deselect()+0xe4>)
   10896:	f004 fe69 	bl	1556c <__cyg_profile_func_enter>
    switch(SpiPort)
   1089a:	9b01      	ldr	r3, [sp, #4]
   1089c:	781b      	ldrb	r3, [r3, #0]
   1089e:	2b01      	cmp	r3, #1
   108a0:	d021      	beq.n	108e6 <LabSpi::chip_deselect()+0x5e>
   108a2:	2b02      	cmp	r3, #2
   108a4:	d03d      	beq.n	10922 <LabSpi::chip_deselect()+0x9a>
   108a6:	2b00      	cmp	r3, #0
   108a8:	d158      	bne.n	1095c <LabSpi::chip_deselect()+0xd4>
    {
      
    case 0:
    {
      LabGPIO CE0(0,16); //CE 
   108aa:	ab0c      	add	r3, sp, #48	; 0x30
   108ac:	2210      	movs	r2, #16
   108ae:	2100      	movs	r1, #0
   108b0:	4618      	mov	r0, r3
   108b2:	f7ff fd59 	bl	10368 <LabGPIO::LabGPIO(unsigned char, unsigned char)>
      LabGPIO MCE0(0,1);// Mirror
   108b6:	ab0a      	add	r3, sp, #40	; 0x28
   108b8:	2201      	movs	r2, #1
   108ba:	2100      	movs	r1, #0
   108bc:	4618      	mov	r0, r3
   108be:	f7ff fd53 	bl	10368 <LabGPIO::LabGPIO(unsigned char, unsigned char)>
      CE0.SetAsOutput();
   108c2:	ab0c      	add	r3, sp, #48	; 0x30
   108c4:	4618      	mov	r0, r3
   108c6:	f7ff fd7b 	bl	103c0 <LabGPIO::SetAsOutput()>
      MCE0.SetAsOutput();
   108ca:	ab0a      	add	r3, sp, #40	; 0x28
   108cc:	4618      	mov	r0, r3
   108ce:	f7ff fd77 	bl	103c0 <LabGPIO::SetAsOutput()>
      CE0.SetHigh();
   108d2:	ab0c      	add	r3, sp, #48	; 0x30
   108d4:	4618      	mov	r0, r3
   108d6:	f7ff fd9d 	bl	10414 <LabGPIO::SetHigh()>
      MCE0.SetHigh();
   108da:	ab0a      	add	r3, sp, #40	; 0x28
   108dc:	4618      	mov	r0, r3
   108de:	f7ff fd99 	bl	10414 <LabGPIO::SetHigh()>
     
      break;
   108e2:	bf00      	nop
   108e4:	e03a      	b.n	1095c <LabSpi::chip_deselect()+0xd4>
    }
  
    case 1:
    {
      
      LabGPIO CE1(0,6); //CE 
   108e6:	ab08      	add	r3, sp, #32
   108e8:	2206      	movs	r2, #6
   108ea:	2100      	movs	r1, #0
   108ec:	4618      	mov	r0, r3
   108ee:	f7ff fd3b 	bl	10368 <LabGPIO::LabGPIO(unsigned char, unsigned char)>
      LabGPIO MCE1(0,25);//Mirror
   108f2:	ab06      	add	r3, sp, #24
   108f4:	2219      	movs	r2, #25
   108f6:	2100      	movs	r1, #0
   108f8:	4618      	mov	r0, r3
   108fa:	f7ff fd35 	bl	10368 <LabGPIO::LabGPIO(unsigned char, unsigned char)>
      CE1.SetAsOutput();
   108fe:	ab08      	add	r3, sp, #32
   10900:	4618      	mov	r0, r3
   10902:	f7ff fd5d 	bl	103c0 <LabGPIO::SetAsOutput()>
      MCE1.SetAsOutput();
   10906:	ab06      	add	r3, sp, #24
   10908:	4618      	mov	r0, r3
   1090a:	f7ff fd59 	bl	103c0 <LabGPIO::SetAsOutput()>
      CE1.SetHigh();
   1090e:	ab08      	add	r3, sp, #32
   10910:	4618      	mov	r0, r3
   10912:	f7ff fd7f 	bl	10414 <LabGPIO::SetHigh()>
      MCE1.SetHigh();
   10916:	ab06      	add	r3, sp, #24
   10918:	4618      	mov	r0, r3
   1091a:	f7ff fd7b 	bl	10414 <LabGPIO::SetHigh()>

      break;
   1091e:	bf00      	nop
   10920:	e01c      	b.n	1095c <LabSpi::chip_deselect()+0xd4>
    }
  
    case 2: 
    {  //SSP 2
     
      LabGPIO CE2(1,10); //CE 
   10922:	ab04      	add	r3, sp, #16
   10924:	220a      	movs	r2, #10
   10926:	2101      	movs	r1, #1
   10928:	4618      	mov	r0, r3
   1092a:	f7ff fd1d 	bl	10368 <LabGPIO::LabGPIO(unsigned char, unsigned char)>
      LabGPIO MCE2(0,6); // Mirror
   1092e:	ab02      	add	r3, sp, #8
   10930:	2206      	movs	r2, #6
   10932:	2100      	movs	r1, #0
   10934:	4618      	mov	r0, r3
   10936:	f7ff fd17 	bl	10368 <LabGPIO::LabGPIO(unsigned char, unsigned char)>
      CE2.SetAsOutput();
   1093a:	ab04      	add	r3, sp, #16
   1093c:	4618      	mov	r0, r3
   1093e:	f7ff fd3f 	bl	103c0 <LabGPIO::SetAsOutput()>
      MCE2.SetAsOutput();
   10942:	ab02      	add	r3, sp, #8
   10944:	4618      	mov	r0, r3
   10946:	f7ff fd3b 	bl	103c0 <LabGPIO::SetAsOutput()>
      CE2.SetHigh();
   1094a:	ab04      	add	r3, sp, #16
   1094c:	4618      	mov	r0, r3
   1094e:	f7ff fd61 	bl	10414 <LabGPIO::SetHigh()>
      MCE2.SetHigh();
   10952:	ab02      	add	r3, sp, #8
   10954:	4618      	mov	r0, r3
   10956:	f7ff fd5d 	bl	10414 <LabGPIO::SetHigh()>
      break;
   1095a:	bf00      	nop
   1095c:	4623      	mov	r3, r4
   1095e:	4619      	mov	r1, r3
   10960:	4802      	ldr	r0, [pc, #8]	; (1096c <LabSpi::chip_deselect()+0xe4>)
   10962:	f004 fe17 	bl	15594 <__cyg_profile_func_exit>
    }
    }  
    }
   10966:	bf00      	nop
   10968:	b00e      	add	sp, #56	; 0x38
   1096a:	bd10      	pop	{r4, pc}
   1096c:	00010889 	.word	0x00010889

00010970 <LabSpi::chip_set()>:
void LabSpi::chip_set(){
   10970:	b510      	push	{r4, lr}
   10972:	b082      	sub	sp, #8
   10974:	4674      	mov	r4, lr
   10976:	9001      	str	r0, [sp, #4]
   10978:	4623      	mov	r3, r4
   1097a:	4619      	mov	r1, r3
   1097c:	482a      	ldr	r0, [pc, #168]	; (10a28 <LabSpi::chip_set()+0xb8>)
   1097e:	f004 fdf5 	bl	1556c <__cyg_profile_func_enter>
    switch(SpiPort){
   10982:	9b01      	ldr	r3, [sp, #4]
   10984:	781b      	ldrb	r3, [r3, #0]
   10986:	2b01      	cmp	r3, #1
   10988:	d019      	beq.n	109be <LabSpi::chip_set()+0x4e>
   1098a:	2b02      	cmp	r3, #2
   1098c:	d02d      	beq.n	109ea <LabSpi::chip_set()+0x7a>
   1098e:	2b00      	cmp	r3, #0
   10990:	d141      	bne.n	10a16 <LabSpi::chip_set()+0xa6>
    case 0:
    pc.ssp_clk(0,15);
   10992:	9b01      	ldr	r3, [sp, #4]
   10994:	3301      	adds	r3, #1
   10996:	220f      	movs	r2, #15
   10998:	2100      	movs	r1, #0
   1099a:	4618      	mov	r0, r3
   1099c:	f003 f8c6 	bl	13b2c <pinconn::ssp_clk(unsigned char, unsigned char)>
    pc.ssp_miso(0,17);
   109a0:	9b01      	ldr	r3, [sp, #4]
   109a2:	3301      	adds	r3, #1
   109a4:	2211      	movs	r2, #17
   109a6:	2100      	movs	r1, #0
   109a8:	4618      	mov	r0, r3
   109aa:	f003 f925 	bl	13bf8 <pinconn::ssp_miso(unsigned char, unsigned char)>
    pc.ssp_mosi(0,18);
   109ae:	9b01      	ldr	r3, [sp, #4]
   109b0:	3301      	adds	r3, #1
   109b2:	2212      	movs	r2, #18
   109b4:	2100      	movs	r1, #0
   109b6:	4618      	mov	r0, r3
   109b8:	f003 f984 	bl	13cc4 <pinconn::ssp_mosi(unsigned char, unsigned char)>
    break;
   109bc:	e02b      	b.n	10a16 <LabSpi::chip_set()+0xa6>
    case 1:
    pc.ssp_clk(0,7);
   109be:	9b01      	ldr	r3, [sp, #4]
   109c0:	3301      	adds	r3, #1
   109c2:	2207      	movs	r2, #7
   109c4:	2100      	movs	r1, #0
   109c6:	4618      	mov	r0, r3
   109c8:	f003 f8b0 	bl	13b2c <pinconn::ssp_clk(unsigned char, unsigned char)>
    pc.ssp_miso(0,8);
   109cc:	9b01      	ldr	r3, [sp, #4]
   109ce:	3301      	adds	r3, #1
   109d0:	2208      	movs	r2, #8
   109d2:	2100      	movs	r1, #0
   109d4:	4618      	mov	r0, r3
   109d6:	f003 f90f 	bl	13bf8 <pinconn::ssp_miso(unsigned char, unsigned char)>
    pc.ssp_mosi(0,9);
   109da:	9b01      	ldr	r3, [sp, #4]
   109dc:	3301      	adds	r3, #1
   109de:	2209      	movs	r2, #9
   109e0:	2100      	movs	r1, #0
   109e2:	4618      	mov	r0, r3
   109e4:	f003 f96e 	bl	13cc4 <pinconn::ssp_mosi(unsigned char, unsigned char)>
    break;
   109e8:	e015      	b.n	10a16 <LabSpi::chip_set()+0xa6>
    case 2:
    pc.ssp_clk(1,0);
   109ea:	9b01      	ldr	r3, [sp, #4]
   109ec:	3301      	adds	r3, #1
   109ee:	2200      	movs	r2, #0
   109f0:	2101      	movs	r1, #1
   109f2:	4618      	mov	r0, r3
   109f4:	f003 f89a 	bl	13b2c <pinconn::ssp_clk(unsigned char, unsigned char)>
    pc.ssp_miso(1,4);
   109f8:	9b01      	ldr	r3, [sp, #4]
   109fa:	3301      	adds	r3, #1
   109fc:	2204      	movs	r2, #4
   109fe:	2101      	movs	r1, #1
   10a00:	4618      	mov	r0, r3
   10a02:	f003 f8f9 	bl	13bf8 <pinconn::ssp_miso(unsigned char, unsigned char)>
    pc.ssp_mosi(1,1);
   10a06:	9b01      	ldr	r3, [sp, #4]
   10a08:	3301      	adds	r3, #1
   10a0a:	2201      	movs	r2, #1
   10a0c:	2101      	movs	r1, #1
   10a0e:	4618      	mov	r0, r3
   10a10:	f003 f958 	bl	13cc4 <pinconn::ssp_mosi(unsigned char, unsigned char)>
    break;
   10a14:	bf00      	nop
   10a16:	4623      	mov	r3, r4
   10a18:	4619      	mov	r1, r3
   10a1a:	4803      	ldr	r0, [pc, #12]	; (10a28 <LabSpi::chip_set()+0xb8>)
   10a1c:	f004 fdba 	bl	15594 <__cyg_profile_func_exit>
    }
}
   10a20:	bf00      	nop
   10a22:	b002      	add	sp, #8
   10a24:	bd10      	pop	{r4, pc}
   10a26:	bf00      	nop
   10a28:	00010971 	.word	0x00010971

00010a2c <LabSpi::Transfer(unsigned char)>:
uint8_t LabSpi::Transfer(uint8_t send){
   10a2c:	b570      	push	{r4, r5, r6, lr}
   10a2e:	b082      	sub	sp, #8
   10a30:	4676      	mov	r6, lr
   10a32:	9001      	str	r0, [sp, #4]
   10a34:	460b      	mov	r3, r1
   10a36:	f88d 3003 	strb.w	r3, [sp, #3]
   10a3a:	4633      	mov	r3, r6
   10a3c:	4619      	mov	r1, r3
   10a3e:	482c      	ldr	r0, [pc, #176]	; (10af0 <LabSpi::Transfer(unsigned char)+0xc4>)
   10a40:	f004 fd94 	bl	1556c <__cyg_profile_func_enter>
    if(SSP[SpiPort]->SR & (1<<1))
   10a44:	9b01      	ldr	r3, [sp, #4]
   10a46:	781b      	ldrb	r3, [r3, #0]
   10a48:	461a      	mov	r2, r3
   10a4a:	4b2a      	ldr	r3, [pc, #168]	; (10af4 <LabSpi::Transfer(unsigned char)+0xc8>)
   10a4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   10a50:	68db      	ldr	r3, [r3, #12]
   10a52:	f003 0302 	and.w	r3, r3, #2
   10a56:	2b00      	cmp	r3, #0
   10a58:	bf14      	ite	ne
   10a5a:	2301      	movne	r3, #1
   10a5c:	2300      	moveq	r3, #0
   10a5e:	b2db      	uxtb	r3, r3
   10a60:	2b00      	cmp	r3, #0
   10a62:	d009      	beq.n	10a78 <LabSpi::Transfer(unsigned char)+0x4c>
    {
        SSP[SpiPort]->DR = send;
   10a64:	9b01      	ldr	r3, [sp, #4]
   10a66:	781b      	ldrb	r3, [r3, #0]
   10a68:	461a      	mov	r2, r3
   10a6a:	4b22      	ldr	r3, [pc, #136]	; (10af4 <LabSpi::Transfer(unsigned char)+0xc8>)
   10a6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   10a70:	f89d 2003 	ldrb.w	r2, [sp, #3]
   10a74:	609a      	str	r2, [r3, #8]
   10a76:	e002      	b.n	10a7e <LabSpi::Transfer(unsigned char)+0x52>
    }
    else return 0xFF;
   10a78:	25ff      	movs	r5, #255	; 0xff
   10a7a:	2400      	movs	r4, #0
   10a7c:	e02b      	b.n	10ad6 <LabSpi::Transfer(unsigned char)+0xaa>
    while(SSP[SpiPort]->SR & (1<<4)){} //Busy 
   10a7e:	9b01      	ldr	r3, [sp, #4]
   10a80:	781b      	ldrb	r3, [r3, #0]
   10a82:	461a      	mov	r2, r3
   10a84:	4b1b      	ldr	r3, [pc, #108]	; (10af4 <LabSpi::Transfer(unsigned char)+0xc8>)
   10a86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   10a8a:	68db      	ldr	r3, [r3, #12]
   10a8c:	f003 0310 	and.w	r3, r3, #16
   10a90:	2b00      	cmp	r3, #0
   10a92:	bf14      	ite	ne
   10a94:	2301      	movne	r3, #1
   10a96:	2300      	moveq	r3, #0
   10a98:	b2db      	uxtb	r3, r3
   10a9a:	2b00      	cmp	r3, #0
   10a9c:	d000      	beq.n	10aa0 <LabSpi::Transfer(unsigned char)+0x74>
   10a9e:	e7ee      	b.n	10a7e <LabSpi::Transfer(unsigned char)+0x52>
    if(SSP[SpiPort]->SR &(1<<2))
   10aa0:	9b01      	ldr	r3, [sp, #4]
   10aa2:	781b      	ldrb	r3, [r3, #0]
   10aa4:	461a      	mov	r2, r3
   10aa6:	4b13      	ldr	r3, [pc, #76]	; (10af4 <LabSpi::Transfer(unsigned char)+0xc8>)
   10aa8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   10aac:	68db      	ldr	r3, [r3, #12]
   10aae:	f003 0304 	and.w	r3, r3, #4
   10ab2:	2b00      	cmp	r3, #0
   10ab4:	bf14      	ite	ne
   10ab6:	2301      	movne	r3, #1
   10ab8:	2300      	moveq	r3, #0
   10aba:	b2db      	uxtb	r3, r3
   10abc:	2b00      	cmp	r3, #0
   10abe:	d009      	beq.n	10ad4 <LabSpi::Transfer(unsigned char)+0xa8>
    {
        return SSP[SpiPort]->DR;
   10ac0:	9b01      	ldr	r3, [sp, #4]
   10ac2:	781b      	ldrb	r3, [r3, #0]
   10ac4:	461a      	mov	r2, r3
   10ac6:	4b0b      	ldr	r3, [pc, #44]	; (10af4 <LabSpi::Transfer(unsigned char)+0xc8>)
   10ac8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   10acc:	689b      	ldr	r3, [r3, #8]
   10ace:	b2dd      	uxtb	r5, r3
   10ad0:	2400      	movs	r4, #0
   10ad2:	e000      	b.n	10ad6 <LabSpi::Transfer(unsigned char)+0xaa>
   10ad4:	2401      	movs	r4, #1
   10ad6:	4633      	mov	r3, r6
   10ad8:	4619      	mov	r1, r3
   10ada:	4805      	ldr	r0, [pc, #20]	; (10af0 <LabSpi::Transfer(unsigned char)+0xc4>)
   10adc:	f004 fd5a 	bl	15594 <__cyg_profile_func_exit>
   10ae0:	2c01      	cmp	r4, #1
   10ae2:	d100      	bne.n	10ae6 <LabSpi::Transfer(unsigned char)+0xba>
    }
    
    }
   10ae4:	e000      	b.n	10ae8 <LabSpi::Transfer(unsigned char)+0xbc>
   10ae6:	462b      	mov	r3, r5
   10ae8:	4618      	mov	r0, r3
   10aea:	b002      	add	sp, #8
   10aec:	bd70      	pop	{r4, r5, r6, pc}
   10aee:	bf00      	nop
   10af0:	00010a2d 	.word	0x00010a2d
   10af4:	10000018 	.word	0x10000018

00010af8 <LabSpi::ReadStatus()>:
void LabSpi::ReadStatus(){
   10af8:	b510      	push	{r4, lr}
   10afa:	b082      	sub	sp, #8
   10afc:	4674      	mov	r4, lr
   10afe:	9001      	str	r0, [sp, #4]
   10b00:	4623      	mov	r3, r4
   10b02:	4619      	mov	r1, r3
   10b04:	4816      	ldr	r0, [pc, #88]	; (10b60 <LabSpi::ReadStatus()+0x68>)
   10b06:	f004 fd31 	bl	1556c <__cyg_profile_func_enter>
    chip_select();
   10b0a:	9801      	ldr	r0, [sp, #4]
   10b0c:	f7ff fe38 	bl	10780 <LabSpi::chip_select()>
    Transfer(0x05);
   10b10:	2105      	movs	r1, #5
   10b12:	9801      	ldr	r0, [sp, #4]
   10b14:	f7ff ff8a 	bl	10a2c <LabSpi::Transfer(unsigned char)>
    stat1.byte=Transfer(0xFF);
   10b18:	21ff      	movs	r1, #255	; 0xff
   10b1a:	9801      	ldr	r0, [sp, #4]
   10b1c:	f7ff ff86 	bl	10a2c <LabSpi::Transfer(unsigned char)>
   10b20:	4603      	mov	r3, r0
   10b22:	461a      	mov	r2, r3
   10b24:	9b01      	ldr	r3, [sp, #4]
   10b26:	709a      	strb	r2, [r3, #2]
    stat2.byte=Transfer(0xFF);
   10b28:	21ff      	movs	r1, #255	; 0xff
   10b2a:	9801      	ldr	r0, [sp, #4]
   10b2c:	f7ff ff7e 	bl	10a2c <LabSpi::Transfer(unsigned char)>
   10b30:	4603      	mov	r3, r0
   10b32:	461a      	mov	r2, r3
   10b34:	9b01      	ldr	r3, [sp, #4]
   10b36:	711a      	strb	r2, [r3, #4]
    printf("Status: %x %x\n",stat1.byte, stat2.byte);
   10b38:	9b01      	ldr	r3, [sp, #4]
   10b3a:	789b      	ldrb	r3, [r3, #2]
   10b3c:	4619      	mov	r1, r3
   10b3e:	9b01      	ldr	r3, [sp, #4]
   10b40:	791b      	ldrb	r3, [r3, #4]
   10b42:	461a      	mov	r2, r3
   10b44:	4807      	ldr	r0, [pc, #28]	; (10b64 <LabSpi::ReadStatus()+0x6c>)
   10b46:	f005 ff6d 	bl	16a24 <printf>
    chip_deselect();
   10b4a:	9801      	ldr	r0, [sp, #4]
   10b4c:	f7ff fe9c 	bl	10888 <LabSpi::chip_deselect()>
   10b50:	4623      	mov	r3, r4
   10b52:	4619      	mov	r1, r3
   10b54:	4802      	ldr	r0, [pc, #8]	; (10b60 <LabSpi::ReadStatus()+0x68>)
   10b56:	f004 fd1d 	bl	15594 <__cyg_profile_func_exit>

}
   10b5a:	bf00      	nop
   10b5c:	b002      	add	sp, #8
   10b5e:	bd10      	pop	{r4, pc}
   10b60:	00010af9 	.word	0x00010af9
   10b64:	00018520 	.word	0x00018520

00010b68 <LabSpi::ReadDevice()>:

void LabSpi::ReadDevice(){
   10b68:	b510      	push	{r4, lr}
   10b6a:	b086      	sub	sp, #24
   10b6c:	4674      	mov	r4, lr
   10b6e:	9003      	str	r0, [sp, #12]
   10b70:	4623      	mov	r3, r4
   10b72:	4619      	mov	r1, r3
   10b74:	481c      	ldr	r0, [pc, #112]	; (10be8 <LabSpi::ReadDevice()+0x80>)
   10b76:	f004 fcf9 	bl	1556c <__cyg_profile_func_enter>
    uint8_t data[4];
    chip_select();
   10b7a:	9803      	ldr	r0, [sp, #12]
   10b7c:	f7ff fe00 	bl	10780 <LabSpi::chip_select()>
    Transfer(0x9F);
   10b80:	219f      	movs	r1, #159	; 0x9f
   10b82:	9803      	ldr	r0, [sp, #12]
   10b84:	f7ff ff52 	bl	10a2c <LabSpi::Transfer(unsigned char)>
    for(int i =0; i<4; i++)
   10b88:	2300      	movs	r3, #0
   10b8a:	9305      	str	r3, [sp, #20]
   10b8c:	9b05      	ldr	r3, [sp, #20]
   10b8e:	2b03      	cmp	r3, #3
   10b90:	dc0e      	bgt.n	10bb0 <LabSpi::ReadDevice()+0x48>
    {
    data[i] = (Transfer(0xFF));
   10b92:	21ff      	movs	r1, #255	; 0xff
   10b94:	9803      	ldr	r0, [sp, #12]
   10b96:	f7ff ff49 	bl	10a2c <LabSpi::Transfer(unsigned char)>
   10b9a:	4603      	mov	r3, r0
   10b9c:	4619      	mov	r1, r3
   10b9e:	aa04      	add	r2, sp, #16
   10ba0:	9b05      	ldr	r3, [sp, #20]
   10ba2:	4413      	add	r3, r2
   10ba4:	460a      	mov	r2, r1
   10ba6:	701a      	strb	r2, [r3, #0]
    for(int i =0; i<4; i++)
   10ba8:	9b05      	ldr	r3, [sp, #20]
   10baa:	3301      	adds	r3, #1
   10bac:	9305      	str	r3, [sp, #20]
   10bae:	e7ed      	b.n	10b8c <LabSpi::ReadDevice()+0x24>
    }
    chip_deselect();
   10bb0:	9803      	ldr	r0, [sp, #12]
   10bb2:	f7ff fe69 	bl	10888 <LabSpi::chip_deselect()>
    printf("Returned data: %x %x %x %x\n", data[0], data[1], data[2], data[3]);
   10bb6:	f89d 3010 	ldrb.w	r3, [sp, #16]
   10bba:	4619      	mov	r1, r3
   10bbc:	f89d 3011 	ldrb.w	r3, [sp, #17]
   10bc0:	461a      	mov	r2, r3
   10bc2:	f89d 3012 	ldrb.w	r3, [sp, #18]
   10bc6:	4618      	mov	r0, r3
   10bc8:	f89d 3013 	ldrb.w	r3, [sp, #19]
   10bcc:	9300      	str	r3, [sp, #0]
   10bce:	4603      	mov	r3, r0
   10bd0:	4806      	ldr	r0, [pc, #24]	; (10bec <LabSpi::ReadDevice()+0x84>)
   10bd2:	f005 ff27 	bl	16a24 <printf>
   10bd6:	4623      	mov	r3, r4
   10bd8:	4619      	mov	r1, r3
   10bda:	4803      	ldr	r0, [pc, #12]	; (10be8 <LabSpi::ReadDevice()+0x80>)
   10bdc:	f004 fcda 	bl	15594 <__cyg_profile_func_exit>
}
   10be0:	bf00      	nop
   10be2:	b006      	add	sp, #24
   10be4:	bd10      	pop	{r4, pc}
   10be6:	bf00      	nop
   10be8:	00010b69 	.word	0x00010b69
   10bec:	00018530 	.word	0x00018530

00010bf0 <LabSpi::WriteEnable()>:
void LabSpi::WriteEnable(){
   10bf0:	b510      	push	{r4, lr}
   10bf2:	b082      	sub	sp, #8
   10bf4:	4674      	mov	r4, lr
   10bf6:	9001      	str	r0, [sp, #4]
   10bf8:	4623      	mov	r3, r4
   10bfa:	4619      	mov	r1, r3
   10bfc:	480a      	ldr	r0, [pc, #40]	; (10c28 <LabSpi::WriteEnable()+0x38>)
   10bfe:	f004 fcb5 	bl	1556c <__cyg_profile_func_enter>
    chip_select();
   10c02:	9801      	ldr	r0, [sp, #4]
   10c04:	f7ff fdbc 	bl	10780 <LabSpi::chip_select()>
    Transfer(0x06);
   10c08:	2106      	movs	r1, #6
   10c0a:	9801      	ldr	r0, [sp, #4]
   10c0c:	f7ff ff0e 	bl	10a2c <LabSpi::Transfer(unsigned char)>
    chip_deselect();
   10c10:	9801      	ldr	r0, [sp, #4]
   10c12:	f7ff fe39 	bl	10888 <LabSpi::chip_deselect()>
   10c16:	4623      	mov	r3, r4
   10c18:	4619      	mov	r1, r3
   10c1a:	4803      	ldr	r0, [pc, #12]	; (10c28 <LabSpi::WriteEnable()+0x38>)
   10c1c:	f004 fcba 	bl	15594 <__cyg_profile_func_exit>
}
   10c20:	bf00      	nop
   10c22:	b002      	add	sp, #8
   10c24:	bd10      	pop	{r4, pc}
   10c26:	bf00      	nop
   10c28:	00010bf1 	.word	0x00010bf1

00010c2c <LabSpi::ReadBytes()>:
void LabSpi::WriteDisable(){
    chip_select();
    Transfer(0x04);
    chip_deselect();
}
void LabSpi::ReadBytes(){
   10c2c:	b510      	push	{r4, lr}
   10c2e:	b082      	sub	sp, #8
   10c30:	4674      	mov	r4, lr
   10c32:	9001      	str	r0, [sp, #4]
   10c34:	4623      	mov	r3, r4
   10c36:	4619      	mov	r1, r3
   10c38:	4860      	ldr	r0, [pc, #384]	; (10dbc <LabSpi::ReadBytes()+0x190>)
   10c3a:	f004 fc97 	bl	1556c <__cyg_profile_func_enter>
    if(stat1.RDY)
   10c3e:	9b01      	ldr	r3, [sp, #4]
   10c40:	789b      	ldrb	r3, [r3, #2]
   10c42:	f003 0301 	and.w	r3, r3, #1
   10c46:	b2db      	uxtb	r3, r3
   10c48:	2b00      	cmp	r3, #0
   10c4a:	d009      	beq.n	10c60 <LabSpi::ReadBytes()+0x34>
    printf("Ready/Busy Bit is busy: %x\n",stat1.RDY);
   10c4c:	9b01      	ldr	r3, [sp, #4]
   10c4e:	789b      	ldrb	r3, [r3, #2]
   10c50:	f3c3 0300 	ubfx	r3, r3, #0, #1
   10c54:	b2db      	uxtb	r3, r3
   10c56:	4619      	mov	r1, r3
   10c58:	4859      	ldr	r0, [pc, #356]	; (10dc0 <LabSpi::ReadBytes()+0x194>)
   10c5a:	f005 fee3 	bl	16a24 <printf>
   10c5e:	e008      	b.n	10c72 <LabSpi::ReadBytes()+0x46>
    else 
    printf("Read/Busy Bit is ready: %x\n",stat1.RDY);
   10c60:	9b01      	ldr	r3, [sp, #4]
   10c62:	789b      	ldrb	r3, [r3, #2]
   10c64:	f3c3 0300 	ubfx	r3, r3, #0, #1
   10c68:	b2db      	uxtb	r3, r3
   10c6a:	4619      	mov	r1, r3
   10c6c:	4855      	ldr	r0, [pc, #340]	; (10dc4 <LabSpi::ReadBytes()+0x198>)
   10c6e:	f005 fed9 	bl	16a24 <printf>
    if(stat1.WEL)
   10c72:	9b01      	ldr	r3, [sp, #4]
   10c74:	789b      	ldrb	r3, [r3, #2]
   10c76:	f003 0302 	and.w	r3, r3, #2
   10c7a:	b2db      	uxtb	r3, r3
   10c7c:	2b00      	cmp	r3, #0
   10c7e:	d009      	beq.n	10c94 <LabSpi::ReadBytes()+0x68>
    printf("Write Enable bit is Enable: %x\n", stat1.WEL);
   10c80:	9b01      	ldr	r3, [sp, #4]
   10c82:	789b      	ldrb	r3, [r3, #2]
   10c84:	f3c3 0340 	ubfx	r3, r3, #1, #1
   10c88:	b2db      	uxtb	r3, r3
   10c8a:	4619      	mov	r1, r3
   10c8c:	484e      	ldr	r0, [pc, #312]	; (10dc8 <LabSpi::ReadBytes()+0x19c>)
   10c8e:	f005 fec9 	bl	16a24 <printf>
   10c92:	e008      	b.n	10ca6 <LabSpi::ReadBytes()+0x7a>
    else 
    printf("Write Enable bit is not enabled: %x\n", stat1.WEL);
   10c94:	9b01      	ldr	r3, [sp, #4]
   10c96:	789b      	ldrb	r3, [r3, #2]
   10c98:	f3c3 0340 	ubfx	r3, r3, #1, #1
   10c9c:	b2db      	uxtb	r3, r3
   10c9e:	4619      	mov	r1, r3
   10ca0:	484a      	ldr	r0, [pc, #296]	; (10dcc <LabSpi::ReadBytes()+0x1a0>)
   10ca2:	f005 febf 	bl	16a24 <printf>
    if(stat1.BP0)
   10ca6:	9b01      	ldr	r3, [sp, #4]
   10ca8:	789b      	ldrb	r3, [r3, #2]
   10caa:	f003 0304 	and.w	r3, r3, #4
   10cae:	b2db      	uxtb	r3, r3
   10cb0:	2b00      	cmp	r3, #0
   10cb2:	d009      	beq.n	10cc8 <LabSpi::ReadBytes()+0x9c>
    printf("Memory is protected: %x\n",stat1.BP0);
   10cb4:	9b01      	ldr	r3, [sp, #4]
   10cb6:	789b      	ldrb	r3, [r3, #2]
   10cb8:	f3c3 0380 	ubfx	r3, r3, #2, #1
   10cbc:	b2db      	uxtb	r3, r3
   10cbe:	4619      	mov	r1, r3
   10cc0:	4843      	ldr	r0, [pc, #268]	; (10dd0 <LabSpi::ReadBytes()+0x1a4>)
   10cc2:	f005 feaf 	bl	16a24 <printf>
   10cc6:	e008      	b.n	10cda <LabSpi::ReadBytes()+0xae>
    else 
    printf("Not protected: %x\n",stat1.BP0);
   10cc8:	9b01      	ldr	r3, [sp, #4]
   10cca:	789b      	ldrb	r3, [r3, #2]
   10ccc:	f3c3 0380 	ubfx	r3, r3, #2, #1
   10cd0:	b2db      	uxtb	r3, r3
   10cd2:	4619      	mov	r1, r3
   10cd4:	483f      	ldr	r0, [pc, #252]	; (10dd4 <LabSpi::ReadBytes()+0x1a8>)
   10cd6:	f005 fea5 	bl	16a24 <printf>
    if(stat1.WPP)   
   10cda:	9b01      	ldr	r3, [sp, #4]
   10cdc:	789b      	ldrb	r3, [r3, #2]
   10cde:	f003 0310 	and.w	r3, r3, #16
   10ce2:	b2db      	uxtb	r3, r3
   10ce4:	2b00      	cmp	r3, #0
   10ce6:	d009      	beq.n	10cfc <LabSpi::ReadBytes()+0xd0>
    printf("Write Protect is not asserted: %x\n",stat1.WPP);
   10ce8:	9b01      	ldr	r3, [sp, #4]
   10cea:	789b      	ldrb	r3, [r3, #2]
   10cec:	f3c3 1300 	ubfx	r3, r3, #4, #1
   10cf0:	b2db      	uxtb	r3, r3
   10cf2:	4619      	mov	r1, r3
   10cf4:	4838      	ldr	r0, [pc, #224]	; (10dd8 <LabSpi::ReadBytes()+0x1ac>)
   10cf6:	f005 fe95 	bl	16a24 <printf>
   10cfa:	e008      	b.n	10d0e <LabSpi::ReadBytes()+0xe2>
    else 
    printf("Write Protect asserted: %x\n",stat1.WPP);
   10cfc:	9b01      	ldr	r3, [sp, #4]
   10cfe:	789b      	ldrb	r3, [r3, #2]
   10d00:	f3c3 1300 	ubfx	r3, r3, #4, #1
   10d04:	b2db      	uxtb	r3, r3
   10d06:	4619      	mov	r1, r3
   10d08:	4834      	ldr	r0, [pc, #208]	; (10ddc <LabSpi::ReadBytes()+0x1b0>)
   10d0a:	f005 fe8b 	bl	16a24 <printf>
    if(stat1.EPE)
   10d0e:	9b01      	ldr	r3, [sp, #4]
   10d10:	789b      	ldrb	r3, [r3, #2]
   10d12:	f003 0320 	and.w	r3, r3, #32
   10d16:	b2db      	uxtb	r3, r3
   10d18:	2b00      	cmp	r3, #0
   10d1a:	d009      	beq.n	10d30 <LabSpi::ReadBytes()+0x104>
    printf("Erase Error dectected: %x\n",stat1.EPE);
   10d1c:	9b01      	ldr	r3, [sp, #4]
   10d1e:	789b      	ldrb	r3, [r3, #2]
   10d20:	f3c3 1340 	ubfx	r3, r3, #5, #1
   10d24:	b2db      	uxtb	r3, r3
   10d26:	4619      	mov	r1, r3
   10d28:	482d      	ldr	r0, [pc, #180]	; (10de0 <LabSpi::ReadBytes()+0x1b4>)
   10d2a:	f005 fe7b 	bl	16a24 <printf>
   10d2e:	e008      	b.n	10d42 <LabSpi::ReadBytes()+0x116>
    else
    printf("Operation Successful: %x\n",stat1.EPE);
   10d30:	9b01      	ldr	r3, [sp, #4]
   10d32:	789b      	ldrb	r3, [r3, #2]
   10d34:	f3c3 1340 	ubfx	r3, r3, #5, #1
   10d38:	b2db      	uxtb	r3, r3
   10d3a:	4619      	mov	r1, r3
   10d3c:	4829      	ldr	r0, [pc, #164]	; (10de4 <LabSpi::ReadBytes()+0x1b8>)
   10d3e:	f005 fe71 	bl	16a24 <printf>
    if(stat2.RDY2)
   10d42:	9b01      	ldr	r3, [sp, #4]
   10d44:	795b      	ldrb	r3, [r3, #5]
   10d46:	f003 0301 	and.w	r3, r3, #1
   10d4a:	b2db      	uxtb	r3, r3
   10d4c:	2b00      	cmp	r3, #0
   10d4e:	d009      	beq.n	10d64 <LabSpi::ReadBytes()+0x138>
    printf("Ready/Busy 2 is busy: %x\n",stat2.RDY2);
   10d50:	9b01      	ldr	r3, [sp, #4]
   10d52:	795b      	ldrb	r3, [r3, #5]
   10d54:	f3c3 0300 	ubfx	r3, r3, #0, #1
   10d58:	b2db      	uxtb	r3, r3
   10d5a:	4619      	mov	r1, r3
   10d5c:	4822      	ldr	r0, [pc, #136]	; (10de8 <LabSpi::ReadBytes()+0x1bc>)
   10d5e:	f005 fe61 	bl	16a24 <printf>
   10d62:	e008      	b.n	10d76 <LabSpi::ReadBytes()+0x14a>
    else 
    printf("Ready/Busy 2 is ready: %x\n",stat2.RDY2);
   10d64:	9b01      	ldr	r3, [sp, #4]
   10d66:	795b      	ldrb	r3, [r3, #5]
   10d68:	f3c3 0300 	ubfx	r3, r3, #0, #1
   10d6c:	b2db      	uxtb	r3, r3
   10d6e:	4619      	mov	r1, r3
   10d70:	481e      	ldr	r0, [pc, #120]	; (10dec <LabSpi::ReadBytes()+0x1c0>)
   10d72:	f005 fe57 	bl	16a24 <printf>
    if(stat2.RSTE)
   10d76:	9b01      	ldr	r3, [sp, #4]
   10d78:	795b      	ldrb	r3, [r3, #5]
   10d7a:	f003 0310 	and.w	r3, r3, #16
   10d7e:	b2db      	uxtb	r3, r3
   10d80:	2b00      	cmp	r3, #0
   10d82:	d009      	beq.n	10d98 <LabSpi::ReadBytes()+0x16c>
    printf("Reset command enabled: %x\n",stat2.RSTE);
   10d84:	9b01      	ldr	r3, [sp, #4]
   10d86:	795b      	ldrb	r3, [r3, #5]
   10d88:	f3c3 1300 	ubfx	r3, r3, #4, #1
   10d8c:	b2db      	uxtb	r3, r3
   10d8e:	4619      	mov	r1, r3
   10d90:	4817      	ldr	r0, [pc, #92]	; (10df0 <LabSpi::ReadBytes()+0x1c4>)
   10d92:	f005 fe47 	bl	16a24 <printf>
   10d96:	e008      	b.n	10daa <LabSpi::ReadBytes()+0x17e>
    else
    printf("Reset command disabled: %x\n", stat2.RSTE);
   10d98:	9b01      	ldr	r3, [sp, #4]
   10d9a:	795b      	ldrb	r3, [r3, #5]
   10d9c:	f3c3 1300 	ubfx	r3, r3, #4, #1
   10da0:	b2db      	uxtb	r3, r3
   10da2:	4619      	mov	r1, r3
   10da4:	4813      	ldr	r0, [pc, #76]	; (10df4 <LabSpi::ReadBytes()+0x1c8>)
   10da6:	f005 fe3d 	bl	16a24 <printf>
   10daa:	4623      	mov	r3, r4
   10dac:	4619      	mov	r1, r3
   10dae:	4803      	ldr	r0, [pc, #12]	; (10dbc <LabSpi::ReadBytes()+0x190>)
   10db0:	f004 fbf0 	bl	15594 <__cyg_profile_func_exit>
   10db4:	bf00      	nop
   10db6:	b002      	add	sp, #8
   10db8:	bd10      	pop	{r4, pc}
   10dba:	bf00      	nop
   10dbc:	00010c2d 	.word	0x00010c2d
   10dc0:	0001854c 	.word	0x0001854c
   10dc4:	00018568 	.word	0x00018568
   10dc8:	00018584 	.word	0x00018584
   10dcc:	000185a4 	.word	0x000185a4
   10dd0:	000185cc 	.word	0x000185cc
   10dd4:	000185e8 	.word	0x000185e8
   10dd8:	000185fc 	.word	0x000185fc
   10ddc:	00018620 	.word	0x00018620
   10de0:	0001863c 	.word	0x0001863c
   10de4:	00018658 	.word	0x00018658
   10de8:	00018674 	.word	0x00018674
   10dec:	00018690 	.word	0x00018690
   10df0:	000186ac 	.word	0x000186ac
   10df4:	000186c8 	.word	0x000186c8

00010df8 <debug::PrintBacktrace(bool, void*)>:
}

[[gnu::no_instrument_function]]
inline void PrintBacktrace(bool show_make_command = false,
                           void * final_address   = nullptr)
{
   10df8:	b500      	push	{lr}
   10dfa:	b08b      	sub	sp, #44	; 0x2c
   10dfc:	4603      	mov	r3, r0
   10dfe:	9100      	str	r1, [sp, #0]
   10e00:	f88d 3007 	strb.w	r3, [sp, #7]
  printf("Stack Depth = %zd\n", GetStackDepth());
   10e04:	f004 fbe8 	bl	155d8 <GetStackDepth()>
   10e08:	4603      	mov	r3, r0
   10e0a:	4619      	mov	r1, r3
   10e0c:	4831      	ldr	r0, [pc, #196]	; (10ed4 <debug::PrintBacktrace(bool, void*)+0xdc>)
   10e0e:	f005 fe09 	bl	16a24 <printf>
  // stack_depth-1 to ignore PrintBacktrace()
  // PrintBacktrace shouldn't be ignored in profiling because it causes
  // the exit to still fire, which can result in a negative stack_depth
  void ** list_of_called_functions = GetStackTrace();
   10e12:	f004 fbcd 	bl	155b0 <GetStackTrace()>
   10e16:	9007      	str	r0, [sp, #28]
  size_t stack_depth               = GetStackDepth();
   10e18:	f004 fbde 	bl	155d8 <GetStackDepth()>
   10e1c:	9006      	str	r0, [sp, #24]
  // Ignore the last function as it is the Backtrace function
  for (size_t pos = 0; pos < stack_depth - 1; pos++)
   10e1e:	2300      	movs	r3, #0
   10e20:	9309      	str	r3, [sp, #36]	; 0x24
   10e22:	9b06      	ldr	r3, [sp, #24]
   10e24:	3b01      	subs	r3, #1
   10e26:	9a09      	ldr	r2, [sp, #36]	; 0x24
   10e28:	429a      	cmp	r2, r3
   10e2a:	d20d      	bcs.n	10e48 <debug::PrintBacktrace(bool, void*)+0x50>
  {
    printf("  #%zu: 0x%p\n", pos, list_of_called_functions[pos]);
   10e2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   10e2e:	009b      	lsls	r3, r3, #2
   10e30:	9a07      	ldr	r2, [sp, #28]
   10e32:	4413      	add	r3, r2
   10e34:	681b      	ldr	r3, [r3, #0]
   10e36:	461a      	mov	r2, r3
   10e38:	9909      	ldr	r1, [sp, #36]	; 0x24
   10e3a:	4827      	ldr	r0, [pc, #156]	; (10ed8 <debug::PrintBacktrace(bool, void*)+0xe0>)
   10e3c:	f005 fdf2 	bl	16a24 <printf>
  for (size_t pos = 0; pos < stack_depth - 1; pos++)
   10e40:	9b09      	ldr	r3, [sp, #36]	; 0x24
   10e42:	3301      	adds	r3, #1
   10e44:	9309      	str	r3, [sp, #36]	; 0x24
   10e46:	e7ec      	b.n	10e22 <debug::PrintBacktrace(bool, void*)+0x2a>
  }
  if (final_address != nullptr)
   10e48:	9b00      	ldr	r3, [sp, #0]
   10e4a:	2b00      	cmp	r3, #0
   10e4c:	d006      	beq.n	10e5c <debug::PrintBacktrace(bool, void*)+0x64>
  {
    printf("  #%zu: 0x%p\n", stack_depth - 1, final_address);
   10e4e:	9b06      	ldr	r3, [sp, #24]
   10e50:	3b01      	subs	r3, #1
   10e52:	9a00      	ldr	r2, [sp, #0]
   10e54:	4619      	mov	r1, r3
   10e56:	4820      	ldr	r0, [pc, #128]	; (10ed8 <debug::PrintBacktrace(bool, void*)+0xe0>)
   10e58:	f005 fde4 	bl	16a24 <printf>
  }
  if (show_make_command)
   10e5c:	f89d 3007 	ldrb.w	r3, [sp, #7]
   10e60:	2b00      	cmp	r3, #0
   10e62:	d033      	beq.n	10ecc <debug::PrintBacktrace(bool, void*)+0xd4>
  {
    constexpr const char kBuildType[] =
   10e64:	4a1d      	ldr	r2, [pc, #116]	; (10edc <debug::PrintBacktrace(bool, void*)+0xe4>)
   10e66:	ab03      	add	r3, sp, #12
   10e68:	ca07      	ldmia	r2, {r0, r1, r2}
   10e6a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#if defined(APPLICATION)
        "application";
#else
        "bootloader";
#endif
    puts("\nRun: the following command in your project directory");
   10e6e:	481c      	ldr	r0, [pc, #112]	; (10ee0 <debug::PrintBacktrace(bool, void*)+0xe8>)
   10e70:	f004 fb4c 	bl	1550c <puts>
    printf("\n  " SJ2_BOLD_WHITE "make stacktrace-%s TRACES=\"", kBuildType);
   10e74:	ab03      	add	r3, sp, #12
   10e76:	4619      	mov	r1, r3
   10e78:	481a      	ldr	r0, [pc, #104]	; (10ee4 <debug::PrintBacktrace(bool, void*)+0xec>)
   10e7a:	f005 fdd3 	bl	16a24 <printf>
    for (size_t pos = 0; pos < stack_depth - 1; pos++)
   10e7e:	2300      	movs	r3, #0
   10e80:	9308      	str	r3, [sp, #32]
   10e82:	9b06      	ldr	r3, [sp, #24]
   10e84:	3b01      	subs	r3, #1
   10e86:	9a08      	ldr	r2, [sp, #32]
   10e88:	429a      	cmp	r2, r3
   10e8a:	d212      	bcs.n	10eb2 <debug::PrintBacktrace(bool, void*)+0xba>
    {
      if (pos != 0)
   10e8c:	9b08      	ldr	r3, [sp, #32]
   10e8e:	2b00      	cmp	r3, #0
   10e90:	d002      	beq.n	10e98 <debug::PrintBacktrace(bool, void*)+0xa0>
      {
        putchar(' ');
   10e92:	2020      	movs	r0, #32
   10e94:	f004 fb1e 	bl	154d4 <putchar>
      }
      printf("0x%p", list_of_called_functions[pos]);
   10e98:	9b08      	ldr	r3, [sp, #32]
   10e9a:	009b      	lsls	r3, r3, #2
   10e9c:	9a07      	ldr	r2, [sp, #28]
   10e9e:	4413      	add	r3, r2
   10ea0:	681b      	ldr	r3, [r3, #0]
   10ea2:	4619      	mov	r1, r3
   10ea4:	4810      	ldr	r0, [pc, #64]	; (10ee8 <debug::PrintBacktrace(bool, void*)+0xf0>)
   10ea6:	f005 fdbd 	bl	16a24 <printf>
    for (size_t pos = 0; pos < stack_depth - 1; pos++)
   10eaa:	9b08      	ldr	r3, [sp, #32]
   10eac:	3301      	adds	r3, #1
   10eae:	9308      	str	r3, [sp, #32]
   10eb0:	e7e7      	b.n	10e82 <debug::PrintBacktrace(bool, void*)+0x8a>
    }
    if (final_address != nullptr)
   10eb2:	9b00      	ldr	r3, [sp, #0]
   10eb4:	2b00      	cmp	r3, #0
   10eb6:	d003      	beq.n	10ec0 <debug::PrintBacktrace(bool, void*)+0xc8>
    {
      printf(" 0x%p", final_address);
   10eb8:	9900      	ldr	r1, [sp, #0]
   10eba:	480c      	ldr	r0, [pc, #48]	; (10eec <debug::PrintBacktrace(bool, void*)+0xf4>)
   10ebc:	f005 fdb2 	bl	16a24 <printf>
    }
    puts("\"\n" SJ2_COLOR_RESET);
   10ec0:	480b      	ldr	r0, [pc, #44]	; (10ef0 <debug::PrintBacktrace(bool, void*)+0xf8>)
   10ec2:	f004 fb23 	bl	1550c <puts>
    puts(
   10ec6:	480b      	ldr	r0, [pc, #44]	; (10ef4 <debug::PrintBacktrace(bool, void*)+0xfc>)
   10ec8:	f004 fb20 	bl	1550c <puts>
        "This will report the file and line number that led to this function "
        "being called.");
  }
}
   10ecc:	bf00      	nop
   10ece:	b00b      	add	sp, #44	; 0x2c
   10ed0:	f85d fb04 	ldr.w	pc, [sp], #4
   10ed4:	000186e4 	.word	0x000186e4
   10ed8:	000186f8 	.word	0x000186f8
   10edc:	000187d4 	.word	0x000187d4
   10ee0:	00018708 	.word	0x00018708
   10ee4:	00018740 	.word	0x00018740
   10ee8:	00018768 	.word	0x00018768
   10eec:	00018770 	.word	0x00018770
   10ef0:	00018778 	.word	0x00018778
   10ef4:	00018780 	.word	0x00018780

00010ef8 <(anonymous namespace)::DefaultUptime()>:
{
// uptime in nanoseconds
inline uint64_t uptime = 0;
// Returns the system uptime in nanoseconds, do not use this function directly
[[gnu::always_inline]] inline uint64_t DefaultUptime()
{
   10ef8:	b570      	push	{r4, r5, r6, lr}
   10efa:	4676      	mov	r6, lr
   10efc:	4633      	mov	r3, r6
   10efe:	4619      	mov	r1, r3
   10f00:	4807      	ldr	r0, [pc, #28]	; (10f20 <(anonymous namespace)::DefaultUptime()+0x28>)
   10f02:	f004 fb33 	bl	1556c <__cyg_profile_func_enter>
  return uptime;
   10f06:	4b07      	ldr	r3, [pc, #28]	; (10f24 <(anonymous namespace)::DefaultUptime()+0x2c>)
   10f08:	e9d3 4500 	ldrd	r4, r5, [r3]
   10f0c:	4633      	mov	r3, r6
   10f0e:	4619      	mov	r1, r3
   10f10:	4803      	ldr	r0, [pc, #12]	; (10f20 <(anonymous namespace)::DefaultUptime()+0x28>)
   10f12:	f004 fb3f 	bl	15594 <__cyg_profile_func_exit>
   10f16:	4623      	mov	r3, r4
   10f18:	462c      	mov	r4, r5
}
   10f1a:	4618      	mov	r0, r3
   10f1c:	4621      	mov	r1, r4
   10f1e:	bd70      	pop	{r4, r5, r6, pc}
   10f20:	00010ef9 	.word	0x00010ef9
   10f24:	10000580 	.word	0x10000580

00010f28 <Milliseconds()>:
{
  Uptime = uptime_function;
}
// Get system uptime in milliseconds as a 64-bit integer
inline uint64_t Milliseconds()
{
   10f28:	b570      	push	{r4, r5, r6, lr}
   10f2a:	4674      	mov	r4, lr
   10f2c:	4623      	mov	r3, r4
   10f2e:	4619      	mov	r1, r3
   10f30:	480c      	ldr	r0, [pc, #48]	; (10f64 <Milliseconds()+0x3c>)
   10f32:	f004 fb1b 	bl	1556c <__cyg_profile_func_enter>
  return Uptime() / 1'000;
   10f36:	4b0c      	ldr	r3, [pc, #48]	; (10f68 <Milliseconds()+0x40>)
   10f38:	681b      	ldr	r3, [r3, #0]
   10f3a:	4798      	blx	r3
   10f3c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   10f40:	f04f 0300 	mov.w	r3, #0
   10f44:	f007 f8ca 	bl	180dc <__aeabi_uldivmod>
   10f48:	4602      	mov	r2, r0
   10f4a:	460b      	mov	r3, r1
   10f4c:	4615      	mov	r5, r2
   10f4e:	461e      	mov	r6, r3
   10f50:	4623      	mov	r3, r4
   10f52:	4619      	mov	r1, r3
   10f54:	4803      	ldr	r0, [pc, #12]	; (10f64 <Milliseconds()+0x3c>)
   10f56:	f004 fb1d 	bl	15594 <__cyg_profile_func_exit>
   10f5a:	462b      	mov	r3, r5
   10f5c:	4634      	mov	r4, r6
}
   10f5e:	4618      	mov	r0, r3
   10f60:	4621      	mov	r1, r4
   10f62:	bd70      	pop	{r4, r5, r6, pc}
   10f64:	00010f29 	.word	0x00010f29
   10f68:	10000024 	.word	0x10000024

00010f6c <PinInterface::PinInterface()>:
#include <cstdio>

#include "L0_LowLevel/LPC40xx.h"
#include "utility/macros.hpp"

class PinInterface
   10f6c:	b530      	push	{r4, r5, lr}
   10f6e:	b083      	sub	sp, #12
   10f70:	4675      	mov	r5, lr
   10f72:	9001      	str	r0, [sp, #4]
   10f74:	462b      	mov	r3, r5
   10f76:	4619      	mov	r1, r3
   10f78:	4807      	ldr	r0, [pc, #28]	; (10f98 <PinInterface::PinInterface()+0x2c>)
   10f7a:	f004 faf7 	bl	1556c <__cyg_profile_func_enter>
   10f7e:	4a07      	ldr	r2, [pc, #28]	; (10f9c <PinInterface::PinInterface()+0x30>)
   10f80:	9b01      	ldr	r3, [sp, #4]
   10f82:	601a      	str	r2, [r3, #0]
   10f84:	9c01      	ldr	r4, [sp, #4]
   10f86:	462b      	mov	r3, r5
   10f88:	4619      	mov	r1, r3
   10f8a:	4803      	ldr	r0, [pc, #12]	; (10f98 <PinInterface::PinInterface()+0x2c>)
   10f8c:	f004 fb02 	bl	15594 <__cyg_profile_func_exit>
   10f90:	4623      	mov	r3, r4
   10f92:	4618      	mov	r0, r3
   10f94:	b003      	add	sp, #12
   10f96:	bd30      	pop	{r4, r5, pc}
   10f98:	00010f6d 	.word	0x00010f6d
   10f9c:	00019028 	.word	0x00019028

00010fa0 <Pin::Pin(unsigned char, unsigned char)>:
  // no effect.
  static constexpr Pin CreateInactivePin()
  {
    return Pin(5, 4);
  }
  constexpr Pin(uint8_t port_number, uint8_t pin_number)
   10fa0:	b530      	push	{r4, r5, lr}
   10fa2:	b083      	sub	sp, #12
   10fa4:	4675      	mov	r5, lr
   10fa6:	9001      	str	r0, [sp, #4]
   10fa8:	460b      	mov	r3, r1
   10faa:	f88d 3003 	strb.w	r3, [sp, #3]
   10fae:	4613      	mov	r3, r2
   10fb0:	f88d 3002 	strb.w	r3, [sp, #2]
   10fb4:	462b      	mov	r3, r5
   10fb6:	4619      	mov	r1, r3
   10fb8:	480d      	ldr	r0, [pc, #52]	; (10ff0 <Pin::Pin(unsigned char, unsigned char)+0x50>)
   10fba:	f004 fad7 	bl	1556c <__cyg_profile_func_enter>
      : port_(port_number), pin_(pin_number)
   10fbe:	9b01      	ldr	r3, [sp, #4]
   10fc0:	4618      	mov	r0, r3
   10fc2:	f7ff ffd3 	bl	10f6c <PinInterface::PinInterface()>
   10fc6:	4a0b      	ldr	r2, [pc, #44]	; (10ff4 <Pin::Pin(unsigned char, unsigned char)+0x54>)
   10fc8:	9b01      	ldr	r3, [sp, #4]
   10fca:	601a      	str	r2, [r3, #0]
   10fcc:	9b01      	ldr	r3, [sp, #4]
   10fce:	f89d 2003 	ldrb.w	r2, [sp, #3]
   10fd2:	711a      	strb	r2, [r3, #4]
   10fd4:	9b01      	ldr	r3, [sp, #4]
   10fd6:	f89d 2002 	ldrb.w	r2, [sp, #2]
   10fda:	715a      	strb	r2, [r3, #5]
  {
  }
   10fdc:	9c01      	ldr	r4, [sp, #4]
   10fde:	462b      	mov	r3, r5
   10fe0:	4619      	mov	r1, r3
   10fe2:	4803      	ldr	r0, [pc, #12]	; (10ff0 <Pin::Pin(unsigned char, unsigned char)+0x50>)
   10fe4:	f004 fad6 	bl	15594 <__cyg_profile_func_exit>
   10fe8:	4623      	mov	r3, r4
   10fea:	4618      	mov	r0, r3
   10fec:	b003      	add	sp, #12
   10fee:	bd30      	pop	{r4, r5, pc}
   10ff0:	00010fa1 	.word	0x00010fa1
   10ff4:	00018fec 	.word	0x00018fec

00010ff8 <Pin::SetPinFunction(unsigned char)>:
  void SetPinFunction(uint8_t function) override
   10ff8:	b5f0      	push	{r4, r5, r6, r7, lr}
   10ffa:	b085      	sub	sp, #20
   10ffc:	4677      	mov	r7, lr
   10ffe:	9003      	str	r0, [sp, #12]
   11000:	460b      	mov	r3, r1
   11002:	f88d 300b 	strb.w	r3, [sp, #11]
   11006:	463b      	mov	r3, r7
   11008:	4619      	mov	r1, r3
   1100a:	4817      	ldr	r0, [pc, #92]	; (11068 <Pin::SetPinFunction(unsigned char)+0x70>)
   1100c:	f004 faae 	bl	1556c <__cyg_profile_func_enter>
  {
    pin_map->_register[port_][pin_] =
        BitPlace(pin_map->_register[port_][pin_], PinBitMap::kFunction,
   11010:	4b16      	ldr	r3, [pc, #88]	; (1106c <Pin::SetPinFunction(unsigned char)+0x74>)
   11012:	681b      	ldr	r3, [r3, #0]
   11014:	9a03      	ldr	r2, [sp, #12]
   11016:	7912      	ldrb	r2, [r2, #4]
   11018:	4610      	mov	r0, r2
   1101a:	9a03      	ldr	r2, [sp, #12]
   1101c:	7952      	ldrb	r2, [r2, #5]
   1101e:	4611      	mov	r1, r2
   11020:	0142      	lsls	r2, r0, #5
   11022:	440a      	add	r2, r1
   11024:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
                 function & 0b111, 3);
   11028:	f89d 300b 	ldrb.w	r3, [sp, #11]
        BitPlace(pin_map->_register[port_][pin_], PinBitMap::kFunction,
   1102c:	f003 0207 	and.w	r2, r3, #7
    pin_map->_register[port_][pin_] =
   11030:	4b0e      	ldr	r3, [pc, #56]	; (1106c <Pin::SetPinFunction(unsigned char)+0x74>)
   11032:	681c      	ldr	r4, [r3, #0]
   11034:	9b03      	ldr	r3, [sp, #12]
   11036:	791b      	ldrb	r3, [r3, #4]
   11038:	461e      	mov	r6, r3
   1103a:	9b03      	ldr	r3, [sp, #12]
   1103c:	795b      	ldrb	r3, [r3, #5]
   1103e:	461d      	mov	r5, r3
        BitPlace(pin_map->_register[port_][pin_], PinBitMap::kFunction,
   11040:	2303      	movs	r3, #3
   11042:	9300      	str	r3, [sp, #0]
   11044:	4613      	mov	r3, r2
   11046:	2200      	movs	r2, #0
   11048:	9803      	ldr	r0, [sp, #12]
   1104a:	f000 fa67 	bl	1151c <Pin::BitPlace(unsigned long, unsigned long, unsigned long, unsigned long)>
   1104e:	4602      	mov	r2, r0
    pin_map->_register[port_][pin_] =
   11050:	0173      	lsls	r3, r6, #5
   11052:	442b      	add	r3, r5
   11054:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
   11058:	463b      	mov	r3, r7
   1105a:	4619      	mov	r1, r3
   1105c:	4802      	ldr	r0, [pc, #8]	; (11068 <Pin::SetPinFunction(unsigned char)+0x70>)
   1105e:	f004 fa99 	bl	15594 <__cyg_profile_func_exit>
  }
   11062:	bf00      	nop
   11064:	b005      	add	sp, #20
   11066:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11068:	00010ff9 	.word	0x00010ff9
   1106c:	10000028 	.word	0x10000028

00011070 <Pin::SetMode(PinInterface::Mode)>:
  void SetMode(PinInterface::Mode mode) override
   11070:	b5f0      	push	{r4, r5, r6, r7, lr}
   11072:	b087      	sub	sp, #28
   11074:	4677      	mov	r7, lr
   11076:	9003      	str	r0, [sp, #12]
   11078:	460b      	mov	r3, r1
   1107a:	f88d 300b 	strb.w	r3, [sp, #11]
   1107e:	463b      	mov	r3, r7
   11080:	4619      	mov	r1, r3
   11082:	4819      	ldr	r0, [pc, #100]	; (110e8 <Pin::SetMode(PinInterface::Mode)+0x78>)
   11084:	f004 fa72 	bl	1556c <__cyg_profile_func_enter>
  {
    uint8_t ui_mode                 = static_cast<uint8_t>(mode);
   11088:	f89d 300b 	ldrb.w	r3, [sp, #11]
   1108c:	f88d 3017 	strb.w	r3, [sp, #23]
    pin_map->_register[port_][pin_] = BitPlace(
   11090:	4b16      	ldr	r3, [pc, #88]	; (110ec <Pin::SetMode(PinInterface::Mode)+0x7c>)
   11092:	681b      	ldr	r3, [r3, #0]
        pin_map->_register[port_][pin_], PinBitMap::kMode, ui_mode & 0b11, 2);
   11094:	9a03      	ldr	r2, [sp, #12]
   11096:	7912      	ldrb	r2, [r2, #4]
   11098:	4610      	mov	r0, r2
   1109a:	9a03      	ldr	r2, [sp, #12]
   1109c:	7952      	ldrb	r2, [r2, #5]
   1109e:	4611      	mov	r1, r2
    pin_map->_register[port_][pin_] = BitPlace(
   110a0:	0142      	lsls	r2, r0, #5
   110a2:	440a      	add	r2, r1
   110a4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
        pin_map->_register[port_][pin_], PinBitMap::kMode, ui_mode & 0b11, 2);
   110a8:	f89d 3017 	ldrb.w	r3, [sp, #23]
    pin_map->_register[port_][pin_] = BitPlace(
   110ac:	f003 0203 	and.w	r2, r3, #3
   110b0:	4b0e      	ldr	r3, [pc, #56]	; (110ec <Pin::SetMode(PinInterface::Mode)+0x7c>)
   110b2:	681c      	ldr	r4, [r3, #0]
   110b4:	9b03      	ldr	r3, [sp, #12]
   110b6:	791b      	ldrb	r3, [r3, #4]
   110b8:	461e      	mov	r6, r3
   110ba:	9b03      	ldr	r3, [sp, #12]
   110bc:	795b      	ldrb	r3, [r3, #5]
   110be:	461d      	mov	r5, r3
   110c0:	2302      	movs	r3, #2
   110c2:	9300      	str	r3, [sp, #0]
   110c4:	4613      	mov	r3, r2
   110c6:	2203      	movs	r2, #3
   110c8:	9803      	ldr	r0, [sp, #12]
   110ca:	f000 fa27 	bl	1151c <Pin::BitPlace(unsigned long, unsigned long, unsigned long, unsigned long)>
   110ce:	4602      	mov	r2, r0
   110d0:	0173      	lsls	r3, r6, #5
   110d2:	442b      	add	r3, r5
   110d4:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
   110d8:	463b      	mov	r3, r7
   110da:	4619      	mov	r1, r3
   110dc:	4802      	ldr	r0, [pc, #8]	; (110e8 <Pin::SetMode(PinInterface::Mode)+0x78>)
   110de:	f004 fa59 	bl	15594 <__cyg_profile_func_exit>
  }
   110e2:	bf00      	nop
   110e4:	b007      	add	sp, #28
   110e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   110e8:	00011071 	.word	0x00011071
   110ec:	10000028 	.word	0x10000028

000110f0 <Pin::EnableHysteresis(bool)>:
  void EnableHysteresis(bool enable_hysteresis = true) override
   110f0:	b5f0      	push	{r4, r5, r6, r7, lr}
   110f2:	b085      	sub	sp, #20
   110f4:	4677      	mov	r7, lr
   110f6:	9003      	str	r0, [sp, #12]
   110f8:	460b      	mov	r3, r1
   110fa:	f88d 300b 	strb.w	r3, [sp, #11]
   110fe:	463b      	mov	r3, r7
   11100:	4619      	mov	r1, r3
   11102:	4816      	ldr	r0, [pc, #88]	; (1115c <Pin::EnableHysteresis(bool)+0x6c>)
   11104:	f004 fa32 	bl	1556c <__cyg_profile_func_enter>
  {
    pin_map->_register[port_][pin_] =
        BitPlace(pin_map->_register[port_][pin_], PinBitMap::kHysteresis,
   11108:	4b15      	ldr	r3, [pc, #84]	; (11160 <Pin::EnableHysteresis(bool)+0x70>)
   1110a:	681b      	ldr	r3, [r3, #0]
   1110c:	9a03      	ldr	r2, [sp, #12]
   1110e:	7912      	ldrb	r2, [r2, #4]
   11110:	4610      	mov	r0, r2
   11112:	9a03      	ldr	r2, [sp, #12]
   11114:	7952      	ldrb	r2, [r2, #5]
   11116:	4611      	mov	r1, r2
   11118:	0142      	lsls	r2, r0, #5
   1111a:	440a      	add	r2, r1
   1111c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   11120:	f89d 200b 	ldrb.w	r2, [sp, #11]
    pin_map->_register[port_][pin_] =
   11124:	4b0e      	ldr	r3, [pc, #56]	; (11160 <Pin::EnableHysteresis(bool)+0x70>)
   11126:	681c      	ldr	r4, [r3, #0]
   11128:	9b03      	ldr	r3, [sp, #12]
   1112a:	791b      	ldrb	r3, [r3, #4]
   1112c:	461e      	mov	r6, r3
   1112e:	9b03      	ldr	r3, [sp, #12]
   11130:	795b      	ldrb	r3, [r3, #5]
   11132:	461d      	mov	r5, r3
        BitPlace(pin_map->_register[port_][pin_], PinBitMap::kHysteresis,
   11134:	2301      	movs	r3, #1
   11136:	9300      	str	r3, [sp, #0]
   11138:	4613      	mov	r3, r2
   1113a:	2205      	movs	r2, #5
   1113c:	9803      	ldr	r0, [sp, #12]
   1113e:	f000 f9ed 	bl	1151c <Pin::BitPlace(unsigned long, unsigned long, unsigned long, unsigned long)>
   11142:	4602      	mov	r2, r0
    pin_map->_register[port_][pin_] =
   11144:	0173      	lsls	r3, r6, #5
   11146:	442b      	add	r3, r5
   11148:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
   1114c:	463b      	mov	r3, r7
   1114e:	4619      	mov	r1, r3
   11150:	4802      	ldr	r0, [pc, #8]	; (1115c <Pin::EnableHysteresis(bool)+0x6c>)
   11152:	f004 fa1f 	bl	15594 <__cyg_profile_func_exit>
                 enable_hysteresis, 1);
  }
   11156:	bf00      	nop
   11158:	b005      	add	sp, #20
   1115a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1115c:	000110f1 	.word	0x000110f1
   11160:	10000028 	.word	0x10000028

00011164 <Pin::SetAsActiveLow(bool)>:
  void SetAsActiveLow(bool set_as_active_low = true) override
   11164:	b5f0      	push	{r4, r5, r6, r7, lr}
   11166:	b085      	sub	sp, #20
   11168:	4677      	mov	r7, lr
   1116a:	9003      	str	r0, [sp, #12]
   1116c:	460b      	mov	r3, r1
   1116e:	f88d 300b 	strb.w	r3, [sp, #11]
   11172:	463b      	mov	r3, r7
   11174:	4619      	mov	r1, r3
   11176:	4816      	ldr	r0, [pc, #88]	; (111d0 <Pin::SetAsActiveLow(bool)+0x6c>)
   11178:	f004 f9f8 	bl	1556c <__cyg_profile_func_enter>
  {
    pin_map->_register[port_][pin_] =
        BitPlace(pin_map->_register[port_][pin_], PinBitMap::kInputInvert,
   1117c:	4b15      	ldr	r3, [pc, #84]	; (111d4 <Pin::SetAsActiveLow(bool)+0x70>)
   1117e:	681b      	ldr	r3, [r3, #0]
   11180:	9a03      	ldr	r2, [sp, #12]
   11182:	7912      	ldrb	r2, [r2, #4]
   11184:	4610      	mov	r0, r2
   11186:	9a03      	ldr	r2, [sp, #12]
   11188:	7952      	ldrb	r2, [r2, #5]
   1118a:	4611      	mov	r1, r2
   1118c:	0142      	lsls	r2, r0, #5
   1118e:	440a      	add	r2, r1
   11190:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   11194:	f89d 200b 	ldrb.w	r2, [sp, #11]
    pin_map->_register[port_][pin_] =
   11198:	4b0e      	ldr	r3, [pc, #56]	; (111d4 <Pin::SetAsActiveLow(bool)+0x70>)
   1119a:	681c      	ldr	r4, [r3, #0]
   1119c:	9b03      	ldr	r3, [sp, #12]
   1119e:	791b      	ldrb	r3, [r3, #4]
   111a0:	461e      	mov	r6, r3
   111a2:	9b03      	ldr	r3, [sp, #12]
   111a4:	795b      	ldrb	r3, [r3, #5]
   111a6:	461d      	mov	r5, r3
        BitPlace(pin_map->_register[port_][pin_], PinBitMap::kInputInvert,
   111a8:	2301      	movs	r3, #1
   111aa:	9300      	str	r3, [sp, #0]
   111ac:	4613      	mov	r3, r2
   111ae:	2206      	movs	r2, #6
   111b0:	9803      	ldr	r0, [sp, #12]
   111b2:	f000 f9b3 	bl	1151c <Pin::BitPlace(unsigned long, unsigned long, unsigned long, unsigned long)>
   111b6:	4602      	mov	r2, r0
    pin_map->_register[port_][pin_] =
   111b8:	0173      	lsls	r3, r6, #5
   111ba:	442b      	add	r3, r5
   111bc:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
   111c0:	463b      	mov	r3, r7
   111c2:	4619      	mov	r1, r3
   111c4:	4802      	ldr	r0, [pc, #8]	; (111d0 <Pin::SetAsActiveLow(bool)+0x6c>)
   111c6:	f004 f9e5 	bl	15594 <__cyg_profile_func_exit>
                 set_as_active_low, 1);
  }
   111ca:	bf00      	nop
   111cc:	b005      	add	sp, #20
   111ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
   111d0:	00011165 	.word	0x00011165
   111d4:	10000028 	.word	0x10000028

000111d8 <Pin::SetAsAnalogMode(bool)>:
  // Set bit to 0 to enable analog mode
  void SetAsAnalogMode(bool set_as_analog = true) override
   111d8:	b5f0      	push	{r4, r5, r6, r7, lr}
   111da:	b085      	sub	sp, #20
   111dc:	4677      	mov	r7, lr
   111de:	9003      	str	r0, [sp, #12]
   111e0:	460b      	mov	r3, r1
   111e2:	f88d 300b 	strb.w	r3, [sp, #11]
   111e6:	463b      	mov	r3, r7
   111e8:	4619      	mov	r1, r3
   111ea:	4818      	ldr	r0, [pc, #96]	; (1124c <Pin::SetAsAnalogMode(bool)+0x74>)
   111ec:	f004 f9be 	bl	1556c <__cyg_profile_func_enter>
  {
    pin_map->_register[port_][pin_] =
        BitPlace(pin_map->_register[port_][pin_], PinBitMap::kAnalogDigitalMode,
   111f0:	4b17      	ldr	r3, [pc, #92]	; (11250 <Pin::SetAsAnalogMode(bool)+0x78>)
   111f2:	681b      	ldr	r3, [r3, #0]
   111f4:	9a03      	ldr	r2, [sp, #12]
   111f6:	7912      	ldrb	r2, [r2, #4]
   111f8:	4610      	mov	r0, r2
   111fa:	9a03      	ldr	r2, [sp, #12]
   111fc:	7952      	ldrb	r2, [r2, #5]
   111fe:	4611      	mov	r1, r2
   11200:	0142      	lsls	r2, r0, #5
   11202:	440a      	add	r2, r1
   11204:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
                 !set_as_analog, 1);
   11208:	f89d 300b 	ldrb.w	r3, [sp, #11]
   1120c:	f083 0301 	eor.w	r3, r3, #1
   11210:	b2db      	uxtb	r3, r3
        BitPlace(pin_map->_register[port_][pin_], PinBitMap::kAnalogDigitalMode,
   11212:	461a      	mov	r2, r3
    pin_map->_register[port_][pin_] =
   11214:	4b0e      	ldr	r3, [pc, #56]	; (11250 <Pin::SetAsAnalogMode(bool)+0x78>)
   11216:	681c      	ldr	r4, [r3, #0]
   11218:	9b03      	ldr	r3, [sp, #12]
   1121a:	791b      	ldrb	r3, [r3, #4]
   1121c:	461e      	mov	r6, r3
   1121e:	9b03      	ldr	r3, [sp, #12]
   11220:	795b      	ldrb	r3, [r3, #5]
   11222:	461d      	mov	r5, r3
        BitPlace(pin_map->_register[port_][pin_], PinBitMap::kAnalogDigitalMode,
   11224:	2301      	movs	r3, #1
   11226:	9300      	str	r3, [sp, #0]
   11228:	4613      	mov	r3, r2
   1122a:	2207      	movs	r2, #7
   1122c:	9803      	ldr	r0, [sp, #12]
   1122e:	f000 f975 	bl	1151c <Pin::BitPlace(unsigned long, unsigned long, unsigned long, unsigned long)>
   11232:	4602      	mov	r2, r0
    pin_map->_register[port_][pin_] =
   11234:	0173      	lsls	r3, r6, #5
   11236:	442b      	add	r3, r5
   11238:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
   1123c:	463b      	mov	r3, r7
   1123e:	4619      	mov	r1, r3
   11240:	4802      	ldr	r0, [pc, #8]	; (1124c <Pin::SetAsAnalogMode(bool)+0x74>)
   11242:	f004 f9a7 	bl	15594 <__cyg_profile_func_exit>
  }
   11246:	bf00      	nop
   11248:	b005      	add	sp, #20
   1124a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1124c:	000111d9 	.word	0x000111d9
   11250:	10000028 	.word	0x10000028

00011254 <Pin::EnableDigitalFilter(bool)>:
  // Enable by setting bit to 0 to enable digital filter.
  void EnableDigitalFilter(bool enable_digital_filter = true) override
   11254:	b5f0      	push	{r4, r5, r6, r7, lr}
   11256:	b085      	sub	sp, #20
   11258:	4677      	mov	r7, lr
   1125a:	9003      	str	r0, [sp, #12]
   1125c:	460b      	mov	r3, r1
   1125e:	f88d 300b 	strb.w	r3, [sp, #11]
   11262:	463b      	mov	r3, r7
   11264:	4619      	mov	r1, r3
   11266:	4818      	ldr	r0, [pc, #96]	; (112c8 <Pin::EnableDigitalFilter(bool)+0x74>)
   11268:	f004 f980 	bl	1556c <__cyg_profile_func_enter>
  {
    pin_map->_register[port_][pin_] =
        BitPlace(pin_map->_register[port_][pin_], PinBitMap::kDigitalFilter,
   1126c:	4b17      	ldr	r3, [pc, #92]	; (112cc <Pin::EnableDigitalFilter(bool)+0x78>)
   1126e:	681b      	ldr	r3, [r3, #0]
   11270:	9a03      	ldr	r2, [sp, #12]
   11272:	7912      	ldrb	r2, [r2, #4]
   11274:	4610      	mov	r0, r2
   11276:	9a03      	ldr	r2, [sp, #12]
   11278:	7952      	ldrb	r2, [r2, #5]
   1127a:	4611      	mov	r1, r2
   1127c:	0142      	lsls	r2, r0, #5
   1127e:	440a      	add	r2, r1
   11280:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
                 !enable_digital_filter, 1);
   11284:	f89d 300b 	ldrb.w	r3, [sp, #11]
   11288:	f083 0301 	eor.w	r3, r3, #1
   1128c:	b2db      	uxtb	r3, r3
        BitPlace(pin_map->_register[port_][pin_], PinBitMap::kDigitalFilter,
   1128e:	461a      	mov	r2, r3
    pin_map->_register[port_][pin_] =
   11290:	4b0e      	ldr	r3, [pc, #56]	; (112cc <Pin::EnableDigitalFilter(bool)+0x78>)
   11292:	681c      	ldr	r4, [r3, #0]
   11294:	9b03      	ldr	r3, [sp, #12]
   11296:	791b      	ldrb	r3, [r3, #4]
   11298:	461e      	mov	r6, r3
   1129a:	9b03      	ldr	r3, [sp, #12]
   1129c:	795b      	ldrb	r3, [r3, #5]
   1129e:	461d      	mov	r5, r3
        BitPlace(pin_map->_register[port_][pin_], PinBitMap::kDigitalFilter,
   112a0:	2301      	movs	r3, #1
   112a2:	9300      	str	r3, [sp, #0]
   112a4:	4613      	mov	r3, r2
   112a6:	2208      	movs	r2, #8
   112a8:	9803      	ldr	r0, [sp, #12]
   112aa:	f000 f937 	bl	1151c <Pin::BitPlace(unsigned long, unsigned long, unsigned long, unsigned long)>
   112ae:	4602      	mov	r2, r0
    pin_map->_register[port_][pin_] =
   112b0:	0173      	lsls	r3, r6, #5
   112b2:	442b      	add	r3, r5
   112b4:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
   112b8:	463b      	mov	r3, r7
   112ba:	4619      	mov	r1, r3
   112bc:	4802      	ldr	r0, [pc, #8]	; (112c8 <Pin::EnableDigitalFilter(bool)+0x74>)
   112be:	f004 f969 	bl	15594 <__cyg_profile_func_exit>
  }
   112c2:	bf00      	nop
   112c4:	b005      	add	sp, #20
   112c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   112c8:	00011255 	.word	0x00011255
   112cc:	10000028 	.word	0x10000028

000112d0 <Pin::EnableFastMode(bool)>:
  void EnableFastMode(bool enable_fast_mode = true) override
   112d0:	b5f0      	push	{r4, r5, r6, r7, lr}
   112d2:	b085      	sub	sp, #20
   112d4:	4677      	mov	r7, lr
   112d6:	9003      	str	r0, [sp, #12]
   112d8:	460b      	mov	r3, r1
   112da:	f88d 300b 	strb.w	r3, [sp, #11]
   112de:	463b      	mov	r3, r7
   112e0:	4619      	mov	r1, r3
   112e2:	4816      	ldr	r0, [pc, #88]	; (1133c <Pin::EnableFastMode(bool)+0x6c>)
   112e4:	f004 f942 	bl	1556c <__cyg_profile_func_enter>
  {
    pin_map->_register[port_][pin_] = BitPlace(
   112e8:	4b15      	ldr	r3, [pc, #84]	; (11340 <Pin::EnableFastMode(bool)+0x70>)
   112ea:	681b      	ldr	r3, [r3, #0]
        pin_map->_register[port_][pin_], PinBitMap::kSlew, enable_fast_mode, 1);
   112ec:	9a03      	ldr	r2, [sp, #12]
   112ee:	7912      	ldrb	r2, [r2, #4]
   112f0:	4610      	mov	r0, r2
   112f2:	9a03      	ldr	r2, [sp, #12]
   112f4:	7952      	ldrb	r2, [r2, #5]
   112f6:	4611      	mov	r1, r2
    pin_map->_register[port_][pin_] = BitPlace(
   112f8:	0142      	lsls	r2, r0, #5
   112fa:	440a      	add	r2, r1
   112fc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   11300:	f89d 200b 	ldrb.w	r2, [sp, #11]
   11304:	4b0e      	ldr	r3, [pc, #56]	; (11340 <Pin::EnableFastMode(bool)+0x70>)
   11306:	681c      	ldr	r4, [r3, #0]
   11308:	9b03      	ldr	r3, [sp, #12]
   1130a:	791b      	ldrb	r3, [r3, #4]
   1130c:	461e      	mov	r6, r3
   1130e:	9b03      	ldr	r3, [sp, #12]
   11310:	795b      	ldrb	r3, [r3, #5]
   11312:	461d      	mov	r5, r3
   11314:	2301      	movs	r3, #1
   11316:	9300      	str	r3, [sp, #0]
   11318:	4613      	mov	r3, r2
   1131a:	2209      	movs	r2, #9
   1131c:	9803      	ldr	r0, [sp, #12]
   1131e:	f000 f8fd 	bl	1151c <Pin::BitPlace(unsigned long, unsigned long, unsigned long, unsigned long)>
   11322:	4602      	mov	r2, r0
   11324:	0173      	lsls	r3, r6, #5
   11326:	442b      	add	r3, r5
   11328:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
   1132c:	463b      	mov	r3, r7
   1132e:	4619      	mov	r1, r3
   11330:	4802      	ldr	r0, [pc, #8]	; (1133c <Pin::EnableFastMode(bool)+0x6c>)
   11332:	f004 f92f 	bl	15594 <__cyg_profile_func_exit>
  }
   11336:	bf00      	nop
   11338:	b005      	add	sp, #20
   1133a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1133c:	000112d1 	.word	0x000112d1
   11340:	10000028 	.word	0x10000028

00011344 <Pin::EnableI2cHighSpeedMode(bool)>:
  // Enable by setting bit to 0 for i2c high speed mode
  void EnableI2cHighSpeedMode(bool enable_high_speed = true) override
   11344:	b5f0      	push	{r4, r5, r6, r7, lr}
   11346:	b085      	sub	sp, #20
   11348:	4677      	mov	r7, lr
   1134a:	9003      	str	r0, [sp, #12]
   1134c:	460b      	mov	r3, r1
   1134e:	f88d 300b 	strb.w	r3, [sp, #11]
   11352:	463b      	mov	r3, r7
   11354:	4619      	mov	r1, r3
   11356:	4818      	ldr	r0, [pc, #96]	; (113b8 <Pin::EnableI2cHighSpeedMode(bool)+0x74>)
   11358:	f004 f908 	bl	1556c <__cyg_profile_func_enter>
  {
    pin_map->_register[port_][pin_] =
        BitPlace(pin_map->_register[port_][pin_], PinBitMap::kI2cHighSpeed,
   1135c:	4b17      	ldr	r3, [pc, #92]	; (113bc <Pin::EnableI2cHighSpeedMode(bool)+0x78>)
   1135e:	681b      	ldr	r3, [r3, #0]
   11360:	9a03      	ldr	r2, [sp, #12]
   11362:	7912      	ldrb	r2, [r2, #4]
   11364:	4610      	mov	r0, r2
   11366:	9a03      	ldr	r2, [sp, #12]
   11368:	7952      	ldrb	r2, [r2, #5]
   1136a:	4611      	mov	r1, r2
   1136c:	0142      	lsls	r2, r0, #5
   1136e:	440a      	add	r2, r1
   11370:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
                 !enable_high_speed, 1);
   11374:	f89d 300b 	ldrb.w	r3, [sp, #11]
   11378:	f083 0301 	eor.w	r3, r3, #1
   1137c:	b2db      	uxtb	r3, r3
        BitPlace(pin_map->_register[port_][pin_], PinBitMap::kI2cHighSpeed,
   1137e:	461a      	mov	r2, r3
    pin_map->_register[port_][pin_] =
   11380:	4b0e      	ldr	r3, [pc, #56]	; (113bc <Pin::EnableI2cHighSpeedMode(bool)+0x78>)
   11382:	681c      	ldr	r4, [r3, #0]
   11384:	9b03      	ldr	r3, [sp, #12]
   11386:	791b      	ldrb	r3, [r3, #4]
   11388:	461e      	mov	r6, r3
   1138a:	9b03      	ldr	r3, [sp, #12]
   1138c:	795b      	ldrb	r3, [r3, #5]
   1138e:	461d      	mov	r5, r3
        BitPlace(pin_map->_register[port_][pin_], PinBitMap::kI2cHighSpeed,
   11390:	2301      	movs	r3, #1
   11392:	9300      	str	r3, [sp, #0]
   11394:	4613      	mov	r3, r2
   11396:	2208      	movs	r2, #8
   11398:	9803      	ldr	r0, [sp, #12]
   1139a:	f000 f8bf 	bl	1151c <Pin::BitPlace(unsigned long, unsigned long, unsigned long, unsigned long)>
   1139e:	4602      	mov	r2, r0
    pin_map->_register[port_][pin_] =
   113a0:	0173      	lsls	r3, r6, #5
   113a2:	442b      	add	r3, r5
   113a4:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
   113a8:	463b      	mov	r3, r7
   113aa:	4619      	mov	r1, r3
   113ac:	4802      	ldr	r0, [pc, #8]	; (113b8 <Pin::EnableI2cHighSpeedMode(bool)+0x74>)
   113ae:	f004 f8f1 	bl	15594 <__cyg_profile_func_exit>
  }
   113b2:	bf00      	nop
   113b4:	b005      	add	sp, #20
   113b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   113b8:	00011345 	.word	0x00011345
   113bc:	10000028 	.word	0x10000028

000113c0 <Pin::EnableI2cHighCurrentDrive(bool)>:
  void EnableI2cHighCurrentDrive(bool enable_high_current = true) override
   113c0:	b5f0      	push	{r4, r5, r6, r7, lr}
   113c2:	b085      	sub	sp, #20
   113c4:	4677      	mov	r7, lr
   113c6:	9003      	str	r0, [sp, #12]
   113c8:	460b      	mov	r3, r1
   113ca:	f88d 300b 	strb.w	r3, [sp, #11]
   113ce:	463b      	mov	r3, r7
   113d0:	4619      	mov	r1, r3
   113d2:	4816      	ldr	r0, [pc, #88]	; (1142c <Pin::EnableI2cHighCurrentDrive(bool)+0x6c>)
   113d4:	f004 f8ca 	bl	1556c <__cyg_profile_func_enter>
  {
    pin_map->_register[port_][pin_] =
        BitPlace(pin_map->_register[port_][pin_],
   113d8:	4b15      	ldr	r3, [pc, #84]	; (11430 <Pin::EnableI2cHighCurrentDrive(bool)+0x70>)
   113da:	681b      	ldr	r3, [r3, #0]
   113dc:	9a03      	ldr	r2, [sp, #12]
   113de:	7912      	ldrb	r2, [r2, #4]
   113e0:	4610      	mov	r0, r2
   113e2:	9a03      	ldr	r2, [sp, #12]
   113e4:	7952      	ldrb	r2, [r2, #5]
   113e6:	4611      	mov	r1, r2
   113e8:	0142      	lsls	r2, r0, #5
   113ea:	440a      	add	r2, r1
   113ec:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   113f0:	f89d 200b 	ldrb.w	r2, [sp, #11]
    pin_map->_register[port_][pin_] =
   113f4:	4b0e      	ldr	r3, [pc, #56]	; (11430 <Pin::EnableI2cHighCurrentDrive(bool)+0x70>)
   113f6:	681c      	ldr	r4, [r3, #0]
   113f8:	9b03      	ldr	r3, [sp, #12]
   113fa:	791b      	ldrb	r3, [r3, #4]
   113fc:	461e      	mov	r6, r3
   113fe:	9b03      	ldr	r3, [sp, #12]
   11400:	795b      	ldrb	r3, [r3, #5]
   11402:	461d      	mov	r5, r3
        BitPlace(pin_map->_register[port_][pin_],
   11404:	2301      	movs	r3, #1
   11406:	9300      	str	r3, [sp, #0]
   11408:	4613      	mov	r3, r2
   1140a:	2209      	movs	r2, #9
   1140c:	9803      	ldr	r0, [sp, #12]
   1140e:	f000 f885 	bl	1151c <Pin::BitPlace(unsigned long, unsigned long, unsigned long, unsigned long)>
   11412:	4602      	mov	r2, r0
    pin_map->_register[port_][pin_] =
   11414:	0173      	lsls	r3, r6, #5
   11416:	442b      	add	r3, r5
   11418:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
   1141c:	463b      	mov	r3, r7
   1141e:	4619      	mov	r1, r3
   11420:	4802      	ldr	r0, [pc, #8]	; (1142c <Pin::EnableI2cHighCurrentDrive(bool)+0x6c>)
   11422:	f004 f8b7 	bl	15594 <__cyg_profile_func_exit>
                 PinBitMap::kI2cHighCurrentDrive, enable_high_current, 1);
  }
   11426:	bf00      	nop
   11428:	b005      	add	sp, #20
   1142a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1142c:	000113c1 	.word	0x000113c1
   11430:	10000028 	.word	0x10000028

00011434 <Pin::SetAsOpenDrain(bool)>:
  void SetAsOpenDrain(bool set_as_open_drain = true) override
   11434:	b5f0      	push	{r4, r5, r6, r7, lr}
   11436:	b085      	sub	sp, #20
   11438:	4677      	mov	r7, lr
   1143a:	9003      	str	r0, [sp, #12]
   1143c:	460b      	mov	r3, r1
   1143e:	f88d 300b 	strb.w	r3, [sp, #11]
   11442:	463b      	mov	r3, r7
   11444:	4619      	mov	r1, r3
   11446:	4816      	ldr	r0, [pc, #88]	; (114a0 <Pin::SetAsOpenDrain(bool)+0x6c>)
   11448:	f004 f890 	bl	1556c <__cyg_profile_func_enter>
  {
    pin_map->_register[port_][pin_] =
        BitPlace(pin_map->_register[port_][pin_], PinBitMap::kOpenDrain,
   1144c:	4b15      	ldr	r3, [pc, #84]	; (114a4 <Pin::SetAsOpenDrain(bool)+0x70>)
   1144e:	681b      	ldr	r3, [r3, #0]
   11450:	9a03      	ldr	r2, [sp, #12]
   11452:	7912      	ldrb	r2, [r2, #4]
   11454:	4610      	mov	r0, r2
   11456:	9a03      	ldr	r2, [sp, #12]
   11458:	7952      	ldrb	r2, [r2, #5]
   1145a:	4611      	mov	r1, r2
   1145c:	0142      	lsls	r2, r0, #5
   1145e:	440a      	add	r2, r1
   11460:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   11464:	f89d 200b 	ldrb.w	r2, [sp, #11]
    pin_map->_register[port_][pin_] =
   11468:	4b0e      	ldr	r3, [pc, #56]	; (114a4 <Pin::SetAsOpenDrain(bool)+0x70>)
   1146a:	681c      	ldr	r4, [r3, #0]
   1146c:	9b03      	ldr	r3, [sp, #12]
   1146e:	791b      	ldrb	r3, [r3, #4]
   11470:	461e      	mov	r6, r3
   11472:	9b03      	ldr	r3, [sp, #12]
   11474:	795b      	ldrb	r3, [r3, #5]
   11476:	461d      	mov	r5, r3
        BitPlace(pin_map->_register[port_][pin_], PinBitMap::kOpenDrain,
   11478:	2301      	movs	r3, #1
   1147a:	9300      	str	r3, [sp, #0]
   1147c:	4613      	mov	r3, r2
   1147e:	220a      	movs	r2, #10
   11480:	9803      	ldr	r0, [sp, #12]
   11482:	f000 f84b 	bl	1151c <Pin::BitPlace(unsigned long, unsigned long, unsigned long, unsigned long)>
   11486:	4602      	mov	r2, r0
    pin_map->_register[port_][pin_] =
   11488:	0173      	lsls	r3, r6, #5
   1148a:	442b      	add	r3, r5
   1148c:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
   11490:	463b      	mov	r3, r7
   11492:	4619      	mov	r1, r3
   11494:	4802      	ldr	r0, [pc, #8]	; (114a0 <Pin::SetAsOpenDrain(bool)+0x6c>)
   11496:	f004 f87d 	bl	15594 <__cyg_profile_func_exit>
                 set_as_open_drain, 1);
  }
   1149a:	bf00      	nop
   1149c:	b005      	add	sp, #20
   1149e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   114a0:	00011435 	.word	0x00011435
   114a4:	10000028 	.word	0x10000028

000114a8 <Pin::EnableDac(bool)>:
  void EnableDac(bool enable_dac = true) override
   114a8:	b5f0      	push	{r4, r5, r6, r7, lr}
   114aa:	b085      	sub	sp, #20
   114ac:	4677      	mov	r7, lr
   114ae:	9003      	str	r0, [sp, #12]
   114b0:	460b      	mov	r3, r1
   114b2:	f88d 300b 	strb.w	r3, [sp, #11]
   114b6:	463b      	mov	r3, r7
   114b8:	4619      	mov	r1, r3
   114ba:	4816      	ldr	r0, [pc, #88]	; (11514 <Pin::EnableDac(bool)+0x6c>)
   114bc:	f004 f856 	bl	1556c <__cyg_profile_func_enter>
  {
    pin_map->_register[port_][pin_] = BitPlace(
   114c0:	4b15      	ldr	r3, [pc, #84]	; (11518 <Pin::EnableDac(bool)+0x70>)
   114c2:	681b      	ldr	r3, [r3, #0]
        pin_map->_register[port_][pin_], PinBitMap::kDacEnable, enable_dac, 1);
   114c4:	9a03      	ldr	r2, [sp, #12]
   114c6:	7912      	ldrb	r2, [r2, #4]
   114c8:	4610      	mov	r0, r2
   114ca:	9a03      	ldr	r2, [sp, #12]
   114cc:	7952      	ldrb	r2, [r2, #5]
   114ce:	4611      	mov	r1, r2
    pin_map->_register[port_][pin_] = BitPlace(
   114d0:	0142      	lsls	r2, r0, #5
   114d2:	440a      	add	r2, r1
   114d4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   114d8:	f89d 200b 	ldrb.w	r2, [sp, #11]
   114dc:	4b0e      	ldr	r3, [pc, #56]	; (11518 <Pin::EnableDac(bool)+0x70>)
   114de:	681c      	ldr	r4, [r3, #0]
   114e0:	9b03      	ldr	r3, [sp, #12]
   114e2:	791b      	ldrb	r3, [r3, #4]
   114e4:	461e      	mov	r6, r3
   114e6:	9b03      	ldr	r3, [sp, #12]
   114e8:	795b      	ldrb	r3, [r3, #5]
   114ea:	461d      	mov	r5, r3
   114ec:	2301      	movs	r3, #1
   114ee:	9300      	str	r3, [sp, #0]
   114f0:	4613      	mov	r3, r2
   114f2:	2210      	movs	r2, #16
   114f4:	9803      	ldr	r0, [sp, #12]
   114f6:	f000 f811 	bl	1151c <Pin::BitPlace(unsigned long, unsigned long, unsigned long, unsigned long)>
   114fa:	4602      	mov	r2, r0
   114fc:	0173      	lsls	r3, r6, #5
   114fe:	442b      	add	r3, r5
   11500:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
   11504:	463b      	mov	r3, r7
   11506:	4619      	mov	r1, r3
   11508:	4802      	ldr	r0, [pc, #8]	; (11514 <Pin::EnableDac(bool)+0x6c>)
   1150a:	f004 f843 	bl	15594 <__cyg_profile_func_exit>
  }
   1150e:	bf00      	nop
   11510:	b005      	add	sp, #20
   11512:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11514:	000114a9 	.word	0x000114a9
   11518:	10000028 	.word	0x10000028

0001151c <Pin::BitPlace(unsigned long, unsigned long, unsigned long, unsigned long)>:
  inline uint32_t BitPlace(uint32_t target, uint32_t position, uint32_t value,
   1151c:	b530      	push	{r4, r5, lr}
   1151e:	b087      	sub	sp, #28
   11520:	4675      	mov	r5, lr
   11522:	9003      	str	r0, [sp, #12]
   11524:	9102      	str	r1, [sp, #8]
   11526:	9201      	str	r2, [sp, #4]
   11528:	9300      	str	r3, [sp, #0]
   1152a:	462b      	mov	r3, r5
   1152c:	4619      	mov	r1, r3
   1152e:	4813      	ldr	r0, [pc, #76]	; (1157c <Pin::BitPlace(unsigned long, unsigned long, unsigned long, unsigned long)+0x60>)
   11530:	f004 f81c 	bl	1556c <__cyg_profile_func_enter>
                           uint32_t value_width)
  {
    // Generate mask with all 1s
    uint32_t mask = 0xFFFFFFFF >> (32 - value_width);
   11534:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   11536:	f1c3 0320 	rsb	r3, r3, #32
   1153a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1153e:	fa22 f303 	lsr.w	r3, r2, r3
   11542:	9305      	str	r3, [sp, #20]
    target &= ~(mask << position);
   11544:	9a05      	ldr	r2, [sp, #20]
   11546:	9b01      	ldr	r3, [sp, #4]
   11548:	fa02 f303 	lsl.w	r3, r2, r3
   1154c:	43db      	mvns	r3, r3
   1154e:	9a02      	ldr	r2, [sp, #8]
   11550:	4013      	ands	r3, r2
   11552:	9302      	str	r3, [sp, #8]
    target |= (value & mask) << position;
   11554:	9a00      	ldr	r2, [sp, #0]
   11556:	9b05      	ldr	r3, [sp, #20]
   11558:	401a      	ands	r2, r3
   1155a:	9b01      	ldr	r3, [sp, #4]
   1155c:	fa02 f303 	lsl.w	r3, r2, r3
   11560:	9a02      	ldr	r2, [sp, #8]
   11562:	4313      	orrs	r3, r2
   11564:	9302      	str	r3, [sp, #8]
    return target;
   11566:	9c02      	ldr	r4, [sp, #8]
   11568:	462b      	mov	r3, r5
   1156a:	4619      	mov	r1, r3
   1156c:	4803      	ldr	r0, [pc, #12]	; (1157c <Pin::BitPlace(unsigned long, unsigned long, unsigned long, unsigned long)+0x60>)
   1156e:	f004 f811 	bl	15594 <__cyg_profile_func_exit>
   11572:	4623      	mov	r3, r4
  }
   11574:	4618      	mov	r0, r3
   11576:	b007      	add	sp, #28
   11578:	bd30      	pop	{r4, r5, pc}
   1157a:	bf00      	nop
   1157c:	0001151d 	.word	0x0001151d

00011580 <Pin::GetPort() const>:
  uint8_t GetPort() const override
   11580:	b530      	push	{r4, r5, lr}
   11582:	b083      	sub	sp, #12
   11584:	4675      	mov	r5, lr
   11586:	9001      	str	r0, [sp, #4]
   11588:	462b      	mov	r3, r5
   1158a:	4619      	mov	r1, r3
   1158c:	4806      	ldr	r0, [pc, #24]	; (115a8 <Pin::GetPort() const+0x28>)
   1158e:	f003 ffed 	bl	1556c <__cyg_profile_func_enter>
  {
    return port_;
   11592:	9b01      	ldr	r3, [sp, #4]
   11594:	791c      	ldrb	r4, [r3, #4]
   11596:	462b      	mov	r3, r5
   11598:	4619      	mov	r1, r3
   1159a:	4803      	ldr	r0, [pc, #12]	; (115a8 <Pin::GetPort() const+0x28>)
   1159c:	f003 fffa 	bl	15594 <__cyg_profile_func_exit>
   115a0:	4623      	mov	r3, r4
  }
   115a2:	4618      	mov	r0, r3
   115a4:	b003      	add	sp, #12
   115a6:	bd30      	pop	{r4, r5, pc}
   115a8:	00011581 	.word	0x00011581

000115ac <Pin::GetPin() const>:
  uint8_t GetPin() const override
   115ac:	b530      	push	{r4, r5, lr}
   115ae:	b083      	sub	sp, #12
   115b0:	4675      	mov	r5, lr
   115b2:	9001      	str	r0, [sp, #4]
   115b4:	462b      	mov	r3, r5
   115b6:	4619      	mov	r1, r3
   115b8:	4806      	ldr	r0, [pc, #24]	; (115d4 <Pin::GetPin() const+0x28>)
   115ba:	f003 ffd7 	bl	1556c <__cyg_profile_func_enter>
  {
    return pin_;
   115be:	9b01      	ldr	r3, [sp, #4]
   115c0:	795c      	ldrb	r4, [r3, #5]
   115c2:	462b      	mov	r3, r5
   115c4:	4619      	mov	r1, r3
   115c6:	4803      	ldr	r0, [pc, #12]	; (115d4 <Pin::GetPin() const+0x28>)
   115c8:	f003 ffe4 	bl	15594 <__cyg_profile_func_exit>
   115cc:	4623      	mov	r3, r4
  }
   115ce:	4618      	mov	r0, r3
   115d0:	b003      	add	sp, #12
   115d2:	bd30      	pop	{r4, r5, pc}
   115d4:	000115ad 	.word	0x000115ad

000115d8 <GpioInterface::GpioInterface()>:
#include "L0_LowLevel/LPC40xx.h"
#include "L1_Drivers/pin.hpp"
#include "utility/enum.hpp"
#include "utility/log.hpp"

class GpioInterface
   115d8:	b530      	push	{r4, r5, lr}
   115da:	b083      	sub	sp, #12
   115dc:	4675      	mov	r5, lr
   115de:	9001      	str	r0, [sp, #4]
   115e0:	462b      	mov	r3, r5
   115e2:	4619      	mov	r1, r3
   115e4:	4807      	ldr	r0, [pc, #28]	; (11604 <GpioInterface::GpioInterface()+0x2c>)
   115e6:	f003 ffc1 	bl	1556c <__cyg_profile_func_enter>
   115ea:	4a07      	ldr	r2, [pc, #28]	; (11608 <GpioInterface::GpioInterface()+0x30>)
   115ec:	9b01      	ldr	r3, [sp, #4]
   115ee:	601a      	str	r2, [r3, #0]
   115f0:	9c01      	ldr	r4, [sp, #4]
   115f2:	462b      	mov	r3, r5
   115f4:	4619      	mov	r1, r3
   115f6:	4803      	ldr	r0, [pc, #12]	; (11604 <GpioInterface::GpioInterface()+0x2c>)
   115f8:	f003 ffcc 	bl	15594 <__cyg_profile_func_exit>
   115fc:	4623      	mov	r3, r4
   115fe:	4618      	mov	r0, r3
   11600:	b003      	add	sp, #12
   11602:	bd30      	pop	{r4, r5, pc}
   11604:	000115d9 	.word	0x000115d9
   11608:	00018fa4 	.word	0x00018fa4

0001160c <Gpio::Gpio(unsigned char, unsigned char)>:
  };

  inline static volatile uint32_t * port_status = &(LPC_GPIOINT->IntStatus);

  // For port 0-4, pins 0-31 are available. Port 5 only has pins 0-4 available.
  constexpr Gpio(uint8_t port_number, uint8_t pin_number)
   1160c:	b530      	push	{r4, r5, lr}
   1160e:	b083      	sub	sp, #12
   11610:	4675      	mov	r5, lr
   11612:	9001      	str	r0, [sp, #4]
   11614:	460b      	mov	r3, r1
   11616:	f88d 3003 	strb.w	r3, [sp, #3]
   1161a:	4613      	mov	r3, r2
   1161c:	f88d 3002 	strb.w	r3, [sp, #2]
   11620:	462b      	mov	r3, r5
   11622:	4619      	mov	r1, r3
   11624:	4816      	ldr	r0, [pc, #88]	; (11680 <Gpio::Gpio(unsigned char, unsigned char)+0x74>)
   11626:	f003 ffa1 	bl	1556c <__cyg_profile_func_enter>
      : interupt_port_(false),
        pin_(&lpc40xx_pin_),
        lpc40xx_pin_(port_number, pin_number)
   1162a:	9b01      	ldr	r3, [sp, #4]
   1162c:	4618      	mov	r0, r3
   1162e:	f7ff ffd3 	bl	115d8 <GpioInterface::GpioInterface()>
   11632:	4a14      	ldr	r2, [pc, #80]	; (11684 <Gpio::Gpio(unsigned char, unsigned char)+0x78>)
   11634:	9b01      	ldr	r3, [sp, #4]
   11636:	601a      	str	r2, [r3, #0]
   11638:	9b01      	ldr	r3, [sp, #4]
   1163a:	2200      	movs	r2, #0
   1163c:	711a      	strb	r2, [r3, #4]
   1163e:	9b01      	ldr	r3, [sp, #4]
   11640:	f103 020c 	add.w	r2, r3, #12
   11644:	9b01      	ldr	r3, [sp, #4]
   11646:	609a      	str	r2, [r3, #8]
   11648:	9b01      	ldr	r3, [sp, #4]
   1164a:	330c      	adds	r3, #12
   1164c:	f89d 2002 	ldrb.w	r2, [sp, #2]
   11650:	f89d 1003 	ldrb.w	r1, [sp, #3]
   11654:	4618      	mov	r0, r3
   11656:	f7ff fca3 	bl	10fa0 <Pin::Pin(unsigned char, unsigned char)>
  {
    interupt_port_ = (port_number == 2) ? 1 : 0;
   1165a:	f89d 3003 	ldrb.w	r3, [sp, #3]
   1165e:	2b02      	cmp	r3, #2
   11660:	d101      	bne.n	11666 <Gpio::Gpio(unsigned char, unsigned char)+0x5a>
   11662:	2201      	movs	r2, #1
   11664:	e000      	b.n	11668 <Gpio::Gpio(unsigned char, unsigned char)+0x5c>
   11666:	2200      	movs	r2, #0
   11668:	9b01      	ldr	r3, [sp, #4]
   1166a:	711a      	strb	r2, [r3, #4]
  }
   1166c:	9c01      	ldr	r4, [sp, #4]
   1166e:	462b      	mov	r3, r5
   11670:	4619      	mov	r1, r3
   11672:	4803      	ldr	r0, [pc, #12]	; (11680 <Gpio::Gpio(unsigned char, unsigned char)+0x74>)
   11674:	f003 ff8e 	bl	15594 <__cyg_profile_func_exit>
   11678:	4623      	mov	r3, r4
   1167a:	4618      	mov	r0, r3
   1167c:	b003      	add	sp, #12
   1167e:	bd30      	pop	{r4, r5, pc}
   11680:	0001160d 	.word	0x0001160d
   11684:	00018f5c 	.word	0x00018f5c

00011688 <Gpio::SetAsInput()>:
      : interupt_port_(false), pin_(pin), lpc40xx_pin_(Pin::CreateInactivePin())
  {
    interupt_port_ = pin_->GetPort();
  }
  // Sets the GPIO pin direction as input
  void SetAsInput(void) override
   11688:	b530      	push	{r4, r5, lr}
   1168a:	b083      	sub	sp, #12
   1168c:	4675      	mov	r5, lr
   1168e:	9001      	str	r0, [sp, #4]
   11690:	462b      	mov	r3, r5
   11692:	4619      	mov	r1, r3
   11694:	4819      	ldr	r0, [pc, #100]	; (116fc <Gpio::SetAsInput()+0x74>)
   11696:	f003 ff69 	bl	1556c <__cyg_profile_func_enter>
  {
    pin_->SetPinFunction(kGpioFunction);
   1169a:	9b01      	ldr	r3, [sp, #4]
   1169c:	689a      	ldr	r2, [r3, #8]
   1169e:	9b01      	ldr	r3, [sp, #4]
   116a0:	689b      	ldr	r3, [r3, #8]
   116a2:	681b      	ldr	r3, [r3, #0]
   116a4:	681b      	ldr	r3, [r3, #0]
   116a6:	2100      	movs	r1, #0
   116a8:	4610      	mov	r0, r2
   116aa:	4798      	blx	r3
    gpio_port[pin_->GetPort()]->DIR &= ~(1 << pin_->GetPin());
   116ac:	9b01      	ldr	r3, [sp, #4]
   116ae:	689a      	ldr	r2, [r3, #8]
   116b0:	9b01      	ldr	r3, [sp, #4]
   116b2:	689b      	ldr	r3, [r3, #8]
   116b4:	681b      	ldr	r3, [r3, #0]
   116b6:	3330      	adds	r3, #48	; 0x30
   116b8:	681b      	ldr	r3, [r3, #0]
   116ba:	4610      	mov	r0, r2
   116bc:	4798      	blx	r3
   116be:	4603      	mov	r3, r0
   116c0:	461a      	mov	r2, r3
   116c2:	2301      	movs	r3, #1
   116c4:	4093      	lsls	r3, r2
   116c6:	43dc      	mvns	r4, r3
   116c8:	9b01      	ldr	r3, [sp, #4]
   116ca:	689a      	ldr	r2, [r3, #8]
   116cc:	9b01      	ldr	r3, [sp, #4]
   116ce:	689b      	ldr	r3, [r3, #8]
   116d0:	681b      	ldr	r3, [r3, #0]
   116d2:	332c      	adds	r3, #44	; 0x2c
   116d4:	681b      	ldr	r3, [r3, #0]
   116d6:	4610      	mov	r0, r2
   116d8:	4798      	blx	r3
   116da:	4603      	mov	r3, r0
   116dc:	461a      	mov	r2, r3
   116de:	4b08      	ldr	r3, [pc, #32]	; (11700 <Gpio::SetAsInput()+0x78>)
   116e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   116e4:	681a      	ldr	r2, [r3, #0]
   116e6:	4621      	mov	r1, r4
   116e8:	400a      	ands	r2, r1
   116ea:	601a      	str	r2, [r3, #0]
   116ec:	462b      	mov	r3, r5
   116ee:	4619      	mov	r1, r3
   116f0:	4802      	ldr	r0, [pc, #8]	; (116fc <Gpio::SetAsInput()+0x74>)
   116f2:	f003 ff4f 	bl	15594 <__cyg_profile_func_exit>
  }
   116f6:	bf00      	nop
   116f8:	b003      	add	sp, #12
   116fa:	bd30      	pop	{r4, r5, pc}
   116fc:	00011689 	.word	0x00011689
   11700:	1000002c 	.word	0x1000002c

00011704 <Gpio::SetAsOutput()>:
  // Sets the GPIO pin direction as output
  void SetAsOutput(void) override
   11704:	b530      	push	{r4, r5, lr}
   11706:	b083      	sub	sp, #12
   11708:	4675      	mov	r5, lr
   1170a:	9001      	str	r0, [sp, #4]
   1170c:	462b      	mov	r3, r5
   1170e:	4619      	mov	r1, r3
   11710:	4819      	ldr	r0, [pc, #100]	; (11778 <Gpio::SetAsOutput()+0x74>)
   11712:	f003 ff2b 	bl	1556c <__cyg_profile_func_enter>
  {
    pin_->SetPinFunction(kGpioFunction);
   11716:	9b01      	ldr	r3, [sp, #4]
   11718:	689a      	ldr	r2, [r3, #8]
   1171a:	9b01      	ldr	r3, [sp, #4]
   1171c:	689b      	ldr	r3, [r3, #8]
   1171e:	681b      	ldr	r3, [r3, #0]
   11720:	681b      	ldr	r3, [r3, #0]
   11722:	2100      	movs	r1, #0
   11724:	4610      	mov	r0, r2
   11726:	4798      	blx	r3
    gpio_port[pin_->GetPort()]->DIR |= (1 << pin_->GetPin());
   11728:	9b01      	ldr	r3, [sp, #4]
   1172a:	689a      	ldr	r2, [r3, #8]
   1172c:	9b01      	ldr	r3, [sp, #4]
   1172e:	689b      	ldr	r3, [r3, #8]
   11730:	681b      	ldr	r3, [r3, #0]
   11732:	3330      	adds	r3, #48	; 0x30
   11734:	681b      	ldr	r3, [r3, #0]
   11736:	4610      	mov	r0, r2
   11738:	4798      	blx	r3
   1173a:	4603      	mov	r3, r0
   1173c:	461a      	mov	r2, r3
   1173e:	2301      	movs	r3, #1
   11740:	fa03 f402 	lsl.w	r4, r3, r2
   11744:	9b01      	ldr	r3, [sp, #4]
   11746:	689a      	ldr	r2, [r3, #8]
   11748:	9b01      	ldr	r3, [sp, #4]
   1174a:	689b      	ldr	r3, [r3, #8]
   1174c:	681b      	ldr	r3, [r3, #0]
   1174e:	332c      	adds	r3, #44	; 0x2c
   11750:	681b      	ldr	r3, [r3, #0]
   11752:	4610      	mov	r0, r2
   11754:	4798      	blx	r3
   11756:	4603      	mov	r3, r0
   11758:	461a      	mov	r2, r3
   1175a:	4b08      	ldr	r3, [pc, #32]	; (1177c <Gpio::SetAsOutput()+0x78>)
   1175c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   11760:	681a      	ldr	r2, [r3, #0]
   11762:	4621      	mov	r1, r4
   11764:	430a      	orrs	r2, r1
   11766:	601a      	str	r2, [r3, #0]
   11768:	462b      	mov	r3, r5
   1176a:	4619      	mov	r1, r3
   1176c:	4802      	ldr	r0, [pc, #8]	; (11778 <Gpio::SetAsOutput()+0x74>)
   1176e:	f003 ff11 	bl	15594 <__cyg_profile_func_exit>
  }
   11772:	bf00      	nop
   11774:	b003      	add	sp, #12
   11776:	bd30      	pop	{r4, r5, pc}
   11778:	00011705 	.word	0x00011705
   1177c:	1000002c 	.word	0x1000002c

00011780 <Gpio::SetDirection(GpioInterface::Direction)>:
  // Sets the GPIO pin direction as output or input depending on the
  // Direction enum parameter
  inline void SetDirection(Direction direction) override
   11780:	b510      	push	{r4, lr}
   11782:	b082      	sub	sp, #8
   11784:	4674      	mov	r4, lr
   11786:	9001      	str	r0, [sp, #4]
   11788:	460b      	mov	r3, r1
   1178a:	f88d 3003 	strb.w	r3, [sp, #3]
   1178e:	4623      	mov	r3, r4
   11790:	4619      	mov	r1, r3
   11792:	480b      	ldr	r0, [pc, #44]	; (117c0 <Gpio::SetDirection(GpioInterface::Direction)+0x40>)
   11794:	f003 feea 	bl	1556c <__cyg_profile_func_enter>
  {
    (direction) ? SetAsOutput() : SetAsInput();
   11798:	f89d 3003 	ldrb.w	r3, [sp, #3]
   1179c:	2b00      	cmp	r3, #0
   1179e:	d003      	beq.n	117a8 <Gpio::SetDirection(GpioInterface::Direction)+0x28>
   117a0:	9801      	ldr	r0, [sp, #4]
   117a2:	f7ff ffaf 	bl	11704 <Gpio::SetAsOutput()>
   117a6:	e002      	b.n	117ae <Gpio::SetDirection(GpioInterface::Direction)+0x2e>
   117a8:	9801      	ldr	r0, [sp, #4]
   117aa:	f7ff ff6d 	bl	11688 <Gpio::SetAsInput()>
   117ae:	4623      	mov	r3, r4
   117b0:	4619      	mov	r1, r3
   117b2:	4803      	ldr	r0, [pc, #12]	; (117c0 <Gpio::SetDirection(GpioInterface::Direction)+0x40>)
   117b4:	f003 feee 	bl	15594 <__cyg_profile_func_exit>
  }
   117b8:	bf00      	nop
   117ba:	b002      	add	sp, #8
   117bc:	bd10      	pop	{r4, pc}
   117be:	bf00      	nop
   117c0:	00011781 	.word	0x00011781

000117c4 <Gpio::SetHigh()>:
  // Sets the GPIO output pin to high
  void SetHigh(void) override
   117c4:	b530      	push	{r4, r5, lr}
   117c6:	b083      	sub	sp, #12
   117c8:	4675      	mov	r5, lr
   117ca:	9001      	str	r0, [sp, #4]
   117cc:	462b      	mov	r3, r5
   117ce:	4619      	mov	r1, r3
   117d0:	4813      	ldr	r0, [pc, #76]	; (11820 <Gpio::SetHigh()+0x5c>)
   117d2:	f003 fecb 	bl	1556c <__cyg_profile_func_enter>
  {
    gpio_port[pin_->GetPort()]->SET = (1 << pin_->GetPin());
   117d6:	9b01      	ldr	r3, [sp, #4]
   117d8:	689a      	ldr	r2, [r3, #8]
   117da:	9b01      	ldr	r3, [sp, #4]
   117dc:	689b      	ldr	r3, [r3, #8]
   117de:	681b      	ldr	r3, [r3, #0]
   117e0:	3330      	adds	r3, #48	; 0x30
   117e2:	681b      	ldr	r3, [r3, #0]
   117e4:	4610      	mov	r0, r2
   117e6:	4798      	blx	r3
   117e8:	4603      	mov	r3, r0
   117ea:	461a      	mov	r2, r3
   117ec:	2301      	movs	r3, #1
   117ee:	4093      	lsls	r3, r2
   117f0:	461c      	mov	r4, r3
   117f2:	9b01      	ldr	r3, [sp, #4]
   117f4:	689a      	ldr	r2, [r3, #8]
   117f6:	9b01      	ldr	r3, [sp, #4]
   117f8:	689b      	ldr	r3, [r3, #8]
   117fa:	681b      	ldr	r3, [r3, #0]
   117fc:	332c      	adds	r3, #44	; 0x2c
   117fe:	681b      	ldr	r3, [r3, #0]
   11800:	4610      	mov	r0, r2
   11802:	4798      	blx	r3
   11804:	4603      	mov	r3, r0
   11806:	461a      	mov	r2, r3
   11808:	4b06      	ldr	r3, [pc, #24]	; (11824 <Gpio::SetHigh()+0x60>)
   1180a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   1180e:	619c      	str	r4, [r3, #24]
   11810:	462b      	mov	r3, r5
   11812:	4619      	mov	r1, r3
   11814:	4802      	ldr	r0, [pc, #8]	; (11820 <Gpio::SetHigh()+0x5c>)
   11816:	f003 febd 	bl	15594 <__cyg_profile_func_exit>
  }
   1181a:	bf00      	nop
   1181c:	b003      	add	sp, #12
   1181e:	bd30      	pop	{r4, r5, pc}
   11820:	000117c5 	.word	0x000117c5
   11824:	1000002c 	.word	0x1000002c

00011828 <Gpio::SetLow()>:
  // Sets the GPIO output pin to low
  void SetLow(void) override
   11828:	b530      	push	{r4, r5, lr}
   1182a:	b083      	sub	sp, #12
   1182c:	4675      	mov	r5, lr
   1182e:	9001      	str	r0, [sp, #4]
   11830:	462b      	mov	r3, r5
   11832:	4619      	mov	r1, r3
   11834:	4813      	ldr	r0, [pc, #76]	; (11884 <Gpio::SetLow()+0x5c>)
   11836:	f003 fe99 	bl	1556c <__cyg_profile_func_enter>
  {
    gpio_port[pin_->GetPort()]->CLR = (1 << pin_->GetPin());
   1183a:	9b01      	ldr	r3, [sp, #4]
   1183c:	689a      	ldr	r2, [r3, #8]
   1183e:	9b01      	ldr	r3, [sp, #4]
   11840:	689b      	ldr	r3, [r3, #8]
   11842:	681b      	ldr	r3, [r3, #0]
   11844:	3330      	adds	r3, #48	; 0x30
   11846:	681b      	ldr	r3, [r3, #0]
   11848:	4610      	mov	r0, r2
   1184a:	4798      	blx	r3
   1184c:	4603      	mov	r3, r0
   1184e:	461a      	mov	r2, r3
   11850:	2301      	movs	r3, #1
   11852:	4093      	lsls	r3, r2
   11854:	461c      	mov	r4, r3
   11856:	9b01      	ldr	r3, [sp, #4]
   11858:	689a      	ldr	r2, [r3, #8]
   1185a:	9b01      	ldr	r3, [sp, #4]
   1185c:	689b      	ldr	r3, [r3, #8]
   1185e:	681b      	ldr	r3, [r3, #0]
   11860:	332c      	adds	r3, #44	; 0x2c
   11862:	681b      	ldr	r3, [r3, #0]
   11864:	4610      	mov	r0, r2
   11866:	4798      	blx	r3
   11868:	4603      	mov	r3, r0
   1186a:	461a      	mov	r2, r3
   1186c:	4b06      	ldr	r3, [pc, #24]	; (11888 <Gpio::SetLow()+0x60>)
   1186e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   11872:	61dc      	str	r4, [r3, #28]
   11874:	462b      	mov	r3, r5
   11876:	4619      	mov	r1, r3
   11878:	4802      	ldr	r0, [pc, #8]	; (11884 <Gpio::SetLow()+0x5c>)
   1187a:	f003 fe8b 	bl	15594 <__cyg_profile_func_exit>
  }
   1187e:	bf00      	nop
   11880:	b003      	add	sp, #12
   11882:	bd30      	pop	{r4, r5, pc}
   11884:	00011829 	.word	0x00011829
   11888:	1000002c 	.word	0x1000002c

0001188c <Gpio::Set(GpioInterface::State)>:
  // Sets the GPIO output pin to high or low depending on the State enum
  // parameter
  void Set(State output = kHigh) override
   1188c:	b510      	push	{r4, lr}
   1188e:	b082      	sub	sp, #8
   11890:	4674      	mov	r4, lr
   11892:	9001      	str	r0, [sp, #4]
   11894:	460b      	mov	r3, r1
   11896:	f88d 3003 	strb.w	r3, [sp, #3]
   1189a:	4623      	mov	r3, r4
   1189c:	4619      	mov	r1, r3
   1189e:	480b      	ldr	r0, [pc, #44]	; (118cc <Gpio::Set(GpioInterface::State)+0x40>)
   118a0:	f003 fe64 	bl	1556c <__cyg_profile_func_enter>
  {
    (output) ? SetHigh() : SetLow();
   118a4:	f89d 3003 	ldrb.w	r3, [sp, #3]
   118a8:	2b00      	cmp	r3, #0
   118aa:	d003      	beq.n	118b4 <Gpio::Set(GpioInterface::State)+0x28>
   118ac:	9801      	ldr	r0, [sp, #4]
   118ae:	f7ff ff89 	bl	117c4 <Gpio::SetHigh()>
   118b2:	e002      	b.n	118ba <Gpio::Set(GpioInterface::State)+0x2e>
   118b4:	9801      	ldr	r0, [sp, #4]
   118b6:	f7ff ffb7 	bl	11828 <Gpio::SetLow()>
   118ba:	4623      	mov	r3, r4
   118bc:	4619      	mov	r1, r3
   118be:	4803      	ldr	r0, [pc, #12]	; (118cc <Gpio::Set(GpioInterface::State)+0x40>)
   118c0:	f003 fe68 	bl	15594 <__cyg_profile_func_exit>
  }
   118c4:	bf00      	nop
   118c6:	b002      	add	sp, #8
   118c8:	bd10      	pop	{r4, pc}
   118ca:	bf00      	nop
   118cc:	0001188d 	.word	0x0001188d

000118d0 <Gpio::Toggle()>:
  // Toggle the output of a GPIO output pin
  void Toggle() override
   118d0:	b530      	push	{r4, r5, lr}
   118d2:	b083      	sub	sp, #12
   118d4:	4675      	mov	r5, lr
   118d6:	9001      	str	r0, [sp, #4]
   118d8:	462b      	mov	r3, r5
   118da:	4619      	mov	r1, r3
   118dc:	4815      	ldr	r0, [pc, #84]	; (11934 <Gpio::Toggle()+0x64>)
   118de:	f003 fe45 	bl	1556c <__cyg_profile_func_enter>
  {
    gpio_port[pin_->GetPort()]->PIN ^= (1 << pin_->GetPin());
   118e2:	9b01      	ldr	r3, [sp, #4]
   118e4:	689a      	ldr	r2, [r3, #8]
   118e6:	9b01      	ldr	r3, [sp, #4]
   118e8:	689b      	ldr	r3, [r3, #8]
   118ea:	681b      	ldr	r3, [r3, #0]
   118ec:	3330      	adds	r3, #48	; 0x30
   118ee:	681b      	ldr	r3, [r3, #0]
   118f0:	4610      	mov	r0, r2
   118f2:	4798      	blx	r3
   118f4:	4603      	mov	r3, r0
   118f6:	461a      	mov	r2, r3
   118f8:	2301      	movs	r3, #1
   118fa:	fa03 f402 	lsl.w	r4, r3, r2
   118fe:	9b01      	ldr	r3, [sp, #4]
   11900:	689a      	ldr	r2, [r3, #8]
   11902:	9b01      	ldr	r3, [sp, #4]
   11904:	689b      	ldr	r3, [r3, #8]
   11906:	681b      	ldr	r3, [r3, #0]
   11908:	332c      	adds	r3, #44	; 0x2c
   1190a:	681b      	ldr	r3, [r3, #0]
   1190c:	4610      	mov	r0, r2
   1190e:	4798      	blx	r3
   11910:	4603      	mov	r3, r0
   11912:	461a      	mov	r2, r3
   11914:	4b08      	ldr	r3, [pc, #32]	; (11938 <Gpio::Toggle()+0x68>)
   11916:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   1191a:	695a      	ldr	r2, [r3, #20]
   1191c:	4621      	mov	r1, r4
   1191e:	404a      	eors	r2, r1
   11920:	615a      	str	r2, [r3, #20]
   11922:	462b      	mov	r3, r5
   11924:	4619      	mov	r1, r3
   11926:	4803      	ldr	r0, [pc, #12]	; (11934 <Gpio::Toggle()+0x64>)
   11928:	f003 fe34 	bl	15594 <__cyg_profile_func_exit>
  }
   1192c:	bf00      	nop
   1192e:	b003      	add	sp, #12
   11930:	bd30      	pop	{r4, r5, pc}
   11932:	bf00      	nop
   11934:	000118d1 	.word	0x000118d1
   11938:	1000002c 	.word	0x1000002c

0001193c <Gpio::ReadState()>:
  // Returns the current State state of the pin
  State ReadState(void) override
   1193c:	b530      	push	{r4, r5, lr}
   1193e:	b085      	sub	sp, #20
   11940:	4675      	mov	r5, lr
   11942:	9001      	str	r0, [sp, #4]
   11944:	462b      	mov	r3, r5
   11946:	4619      	mov	r1, r3
   11948:	4818      	ldr	r0, [pc, #96]	; (119ac <Gpio::ReadState()+0x70>)
   1194a:	f003 fe0f 	bl	1556c <__cyg_profile_func_enter>
  {
    bool state = (gpio_port[pin_->GetPort()]->PIN >> pin_->GetPin()) & 1;
   1194e:	9b01      	ldr	r3, [sp, #4]
   11950:	689a      	ldr	r2, [r3, #8]
   11952:	9b01      	ldr	r3, [sp, #4]
   11954:	689b      	ldr	r3, [r3, #8]
   11956:	681b      	ldr	r3, [r3, #0]
   11958:	332c      	adds	r3, #44	; 0x2c
   1195a:	681b      	ldr	r3, [r3, #0]
   1195c:	4610      	mov	r0, r2
   1195e:	4798      	blx	r3
   11960:	4603      	mov	r3, r0
   11962:	461a      	mov	r2, r3
   11964:	4b12      	ldr	r3, [pc, #72]	; (119b0 <Gpio::ReadState()+0x74>)
   11966:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   1196a:	695c      	ldr	r4, [r3, #20]
   1196c:	9b01      	ldr	r3, [sp, #4]
   1196e:	689a      	ldr	r2, [r3, #8]
   11970:	9b01      	ldr	r3, [sp, #4]
   11972:	689b      	ldr	r3, [r3, #8]
   11974:	681b      	ldr	r3, [r3, #0]
   11976:	3330      	adds	r3, #48	; 0x30
   11978:	681b      	ldr	r3, [r3, #0]
   1197a:	4610      	mov	r0, r2
   1197c:	4798      	blx	r3
   1197e:	4603      	mov	r3, r0
   11980:	fa24 f303 	lsr.w	r3, r4, r3
   11984:	f003 0301 	and.w	r3, r3, #1
   11988:	2b00      	cmp	r3, #0
   1198a:	bf14      	ite	ne
   1198c:	2301      	movne	r3, #1
   1198e:	2300      	moveq	r3, #0
   11990:	f88d 300f 	strb.w	r3, [sp, #15]
    return static_cast<State>(state);
   11994:	f89d 400f 	ldrb.w	r4, [sp, #15]
   11998:	462b      	mov	r3, r5
   1199a:	4619      	mov	r1, r3
   1199c:	4803      	ldr	r0, [pc, #12]	; (119ac <Gpio::ReadState()+0x70>)
   1199e:	f003 fdf9 	bl	15594 <__cyg_profile_func_exit>
   119a2:	4623      	mov	r3, r4
  }
   119a4:	4618      	mov	r0, r3
   119a6:	b005      	add	sp, #20
   119a8:	bd30      	pop	{r4, r5, pc}
   119aa:	bf00      	nop
   119ac:	0001193d 	.word	0x0001193d
   119b0:	1000002c 	.word	0x1000002c

000119b4 <Gpio::Read()>:
  // Returns true if input or output pin is high
  bool Read(void) override
   119b4:	b530      	push	{r4, r5, lr}
   119b6:	b083      	sub	sp, #12
   119b8:	4675      	mov	r5, lr
   119ba:	9001      	str	r0, [sp, #4]
   119bc:	462b      	mov	r3, r5
   119be:	4619      	mov	r1, r3
   119c0:	4816      	ldr	r0, [pc, #88]	; (11a1c <Gpio::Read()+0x68>)
   119c2:	f003 fdd3 	bl	1556c <__cyg_profile_func_enter>
  {
    return (gpio_port[pin_->GetPort()]->PIN >> pin_->GetPin()) & 1;
   119c6:	9b01      	ldr	r3, [sp, #4]
   119c8:	689a      	ldr	r2, [r3, #8]
   119ca:	9b01      	ldr	r3, [sp, #4]
   119cc:	689b      	ldr	r3, [r3, #8]
   119ce:	681b      	ldr	r3, [r3, #0]
   119d0:	332c      	adds	r3, #44	; 0x2c
   119d2:	681b      	ldr	r3, [r3, #0]
   119d4:	4610      	mov	r0, r2
   119d6:	4798      	blx	r3
   119d8:	4603      	mov	r3, r0
   119da:	461a      	mov	r2, r3
   119dc:	4b10      	ldr	r3, [pc, #64]	; (11a20 <Gpio::Read()+0x6c>)
   119de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   119e2:	695c      	ldr	r4, [r3, #20]
   119e4:	9b01      	ldr	r3, [sp, #4]
   119e6:	689a      	ldr	r2, [r3, #8]
   119e8:	9b01      	ldr	r3, [sp, #4]
   119ea:	689b      	ldr	r3, [r3, #8]
   119ec:	681b      	ldr	r3, [r3, #0]
   119ee:	3330      	adds	r3, #48	; 0x30
   119f0:	681b      	ldr	r3, [r3, #0]
   119f2:	4610      	mov	r0, r2
   119f4:	4798      	blx	r3
   119f6:	4603      	mov	r3, r0
   119f8:	fa24 f303 	lsr.w	r3, r4, r3
   119fc:	f003 0301 	and.w	r3, r3, #1
   11a00:	2b00      	cmp	r3, #0
   11a02:	bf14      	ite	ne
   11a04:	2301      	movne	r3, #1
   11a06:	2300      	moveq	r3, #0
   11a08:	b2dc      	uxtb	r4, r3
   11a0a:	462b      	mov	r3, r5
   11a0c:	4619      	mov	r1, r3
   11a0e:	4803      	ldr	r0, [pc, #12]	; (11a1c <Gpio::Read()+0x68>)
   11a10:	f003 fdc0 	bl	15594 <__cyg_profile_func_exit>
   11a14:	4623      	mov	r3, r4
  }
   11a16:	4618      	mov	r0, r3
   11a18:	b003      	add	sp, #12
   11a1a:	bd30      	pop	{r4, r5, pc}
   11a1c:	000119b5 	.word	0x000119b5
   11a20:	1000002c 	.word	0x1000002c

00011a24 <Gpio::GetPin()>:
  PinInterface & GetPin() override
   11a24:	b530      	push	{r4, r5, lr}
   11a26:	b083      	sub	sp, #12
   11a28:	4675      	mov	r5, lr
   11a2a:	9001      	str	r0, [sp, #4]
   11a2c:	462b      	mov	r3, r5
   11a2e:	4619      	mov	r1, r3
   11a30:	4806      	ldr	r0, [pc, #24]	; (11a4c <Gpio::GetPin()+0x28>)
   11a32:	f003 fd9b 	bl	1556c <__cyg_profile_func_enter>
  {
    return *pin_;
   11a36:	9b01      	ldr	r3, [sp, #4]
   11a38:	689c      	ldr	r4, [r3, #8]
   11a3a:	462b      	mov	r3, r5
   11a3c:	4619      	mov	r1, r3
   11a3e:	4803      	ldr	r0, [pc, #12]	; (11a4c <Gpio::GetPin()+0x28>)
   11a40:	f003 fda8 	bl	15594 <__cyg_profile_func_exit>
   11a44:	4623      	mov	r3, r4
  }
   11a46:	4618      	mov	r0, r3
   11a48:	b003      	add	sp, #12
   11a4a:	bd30      	pop	{r4, r5, pc}
   11a4c:	00011a25 	.word	0x00011a25

00011a50 <Gpio::ValidPortCheck()>:

  // Checks if the selected gpio port is valid for external interrupts.
  bool ValidPortCheck()
   11a50:	b530      	push	{r4, r5, lr}
   11a52:	b087      	sub	sp, #28
   11a54:	4675      	mov	r5, lr
   11a56:	9003      	str	r0, [sp, #12]
   11a58:	462b      	mov	r3, r5
   11a5a:	4619      	mov	r1, r3
   11a5c:	4817      	ldr	r0, [pc, #92]	; (11abc <Gpio::ValidPortCheck()+0x6c>)
   11a5e:	f003 fd85 	bl	1556c <__cyg_profile_func_enter>
  {
    bool is_valid = (interupt_port_ <= 1);
   11a62:	9b03      	ldr	r3, [sp, #12]
   11a64:	791b      	ldrb	r3, [r3, #4]
   11a66:	2b01      	cmp	r3, #1
   11a68:	bf94      	ite	ls
   11a6a:	2301      	movls	r3, #1
   11a6c:	2300      	movhi	r3, #0
   11a6e:	b2db      	uxtb	r3, r3
   11a70:	f88d 3017 	strb.w	r3, [sp, #23]
    SJ2_ASSERT_WARNING(is_valid,
   11a74:	f89d 3017 	ldrb.w	r3, [sp, #23]
   11a78:	f083 0301 	eor.w	r3, r3, #1
   11a7c:	b2db      	uxtb	r3, r3
   11a7e:	2b00      	cmp	r3, #0
   11a80:	d010      	beq.n	11aa4 <Gpio::ValidPortCheck()+0x54>
   11a82:	9b03      	ldr	r3, [sp, #12]
   11a84:	689a      	ldr	r2, [r3, #8]
   11a86:	9b03      	ldr	r3, [sp, #12]
   11a88:	689b      	ldr	r3, [r3, #8]
   11a8a:	681b      	ldr	r3, [r3, #0]
   11a8c:	332c      	adds	r3, #44	; 0x2c
   11a8e:	681b      	ldr	r3, [r3, #0]
   11a90:	4610      	mov	r0, r2
   11a92:	4798      	blx	r3
   11a94:	4603      	mov	r3, r0
   11a96:	9300      	str	r3, [sp, #0]
   11a98:	23a6      	movs	r3, #166	; 0xa6
   11a9a:	4a09      	ldr	r2, [pc, #36]	; (11ac0 <Gpio::ValidPortCheck()+0x70>)
   11a9c:	4909      	ldr	r1, [pc, #36]	; (11ac4 <Gpio::ValidPortCheck()+0x74>)
   11a9e:	480a      	ldr	r0, [pc, #40]	; (11ac8 <Gpio::ValidPortCheck()+0x78>)
   11aa0:	f004 ffc0 	bl	16a24 <printf>
                       "Port %d cannot be used for External Interrupts. Need "
                       "to use GPIO on Port 0 or 2.",
                       pin_->GetPort());
    return is_valid;
   11aa4:	f89d 4017 	ldrb.w	r4, [sp, #23]
   11aa8:	462b      	mov	r3, r5
   11aaa:	4619      	mov	r1, r3
   11aac:	4803      	ldr	r0, [pc, #12]	; (11abc <Gpio::ValidPortCheck()+0x6c>)
   11aae:	f003 fd71 	bl	15594 <__cyg_profile_func_exit>
   11ab2:	4623      	mov	r3, r4
  }
   11ab4:	4618      	mov	r0, r3
   11ab6:	b007      	add	sp, #28
   11ab8:	bd30      	pop	{r4, r5, pc}
   11aba:	bf00      	nop
   11abc:	00011a51 	.word	0x00011a51
   11ac0:	000191e4 	.word	0x000191e4
   11ac4:	00018d40 	.word	0x00018d40
   11ac8:	000187e0 	.word	0x000187e0

00011acc <Gpio::SetInterruptRoutine(void (*)())>:

  // Assigns the developer's ISR function to the port/pin gpio instance.
  void SetInterruptRoutine(IsrPointer function) override
   11acc:	b570      	push	{r4, r5, r6, lr}
   11ace:	b082      	sub	sp, #8
   11ad0:	4676      	mov	r6, lr
   11ad2:	9001      	str	r0, [sp, #4]
   11ad4:	9100      	str	r1, [sp, #0]
   11ad6:	4633      	mov	r3, r6
   11ad8:	4619      	mov	r1, r3
   11ada:	4811      	ldr	r0, [pc, #68]	; (11b20 <Gpio::SetInterruptRoutine(void (*)())+0x54>)
   11adc:	f003 fd46 	bl	1556c <__cyg_profile_func_enter>
  {
    ValidPortCheck();
   11ae0:	9801      	ldr	r0, [sp, #4]
   11ae2:	f7ff ffb5 	bl	11a50 <Gpio::ValidPortCheck()>
    interrupthandlers[interupt_port_][pin_->GetPin()] = function;
   11ae6:	9c00      	ldr	r4, [sp, #0]
   11ae8:	9b01      	ldr	r3, [sp, #4]
   11aea:	791b      	ldrb	r3, [r3, #4]
   11aec:	461d      	mov	r5, r3
   11aee:	9b01      	ldr	r3, [sp, #4]
   11af0:	689a      	ldr	r2, [r3, #8]
   11af2:	9b01      	ldr	r3, [sp, #4]
   11af4:	689b      	ldr	r3, [r3, #8]
   11af6:	681b      	ldr	r3, [r3, #0]
   11af8:	3330      	adds	r3, #48	; 0x30
   11afa:	681b      	ldr	r3, [r3, #0]
   11afc:	4610      	mov	r0, r2
   11afe:	4798      	blx	r3
   11b00:	4603      	mov	r3, r0
   11b02:	4619      	mov	r1, r3
   11b04:	4a07      	ldr	r2, [pc, #28]	; (11b24 <Gpio::SetInterruptRoutine(void (*)())+0x58>)
   11b06:	016b      	lsls	r3, r5, #5
   11b08:	440b      	add	r3, r1
   11b0a:	f842 4023 	str.w	r4, [r2, r3, lsl #2]
   11b0e:	4633      	mov	r3, r6
   11b10:	4619      	mov	r1, r3
   11b12:	4803      	ldr	r0, [pc, #12]	; (11b20 <Gpio::SetInterruptRoutine(void (*)())+0x54>)
   11b14:	f003 fd3e 	bl	15594 <__cyg_profile_func_exit>
  }
   11b18:	bf00      	nop
   11b1a:	b002      	add	sp, #8
   11b1c:	bd70      	pop	{r4, r5, r6, pc}
   11b1e:	bf00      	nop
   11b20:	00011acd 	.word	0x00011acd
   11b24:	10000588 	.word	0x10000588

00011b28 <Gpio::ClearInterruptRoutine()>:

  // Clears the developers ISR function from the port/pin gio instance.
  void ClearInterruptRoutine() override
   11b28:	b530      	push	{r4, r5, lr}
   11b2a:	b083      	sub	sp, #12
   11b2c:	4675      	mov	r5, lr
   11b2e:	9001      	str	r0, [sp, #4]
   11b30:	462b      	mov	r3, r5
   11b32:	4619      	mov	r1, r3
   11b34:	480f      	ldr	r0, [pc, #60]	; (11b74 <Gpio::ClearInterruptRoutine()+0x4c>)
   11b36:	f003 fd19 	bl	1556c <__cyg_profile_func_enter>
  {
    interrupthandlers[interupt_port_][pin_->GetPin()] = nullptr;
   11b3a:	9b01      	ldr	r3, [sp, #4]
   11b3c:	791b      	ldrb	r3, [r3, #4]
   11b3e:	461c      	mov	r4, r3
   11b40:	9b01      	ldr	r3, [sp, #4]
   11b42:	689a      	ldr	r2, [r3, #8]
   11b44:	9b01      	ldr	r3, [sp, #4]
   11b46:	689b      	ldr	r3, [r3, #8]
   11b48:	681b      	ldr	r3, [r3, #0]
   11b4a:	3330      	adds	r3, #48	; 0x30
   11b4c:	681b      	ldr	r3, [r3, #0]
   11b4e:	4610      	mov	r0, r2
   11b50:	4798      	blx	r3
   11b52:	4603      	mov	r3, r0
   11b54:	4619      	mov	r1, r3
   11b56:	4a08      	ldr	r2, [pc, #32]	; (11b78 <Gpio::ClearInterruptRoutine()+0x50>)
   11b58:	0163      	lsls	r3, r4, #5
   11b5a:	440b      	add	r3, r1
   11b5c:	2100      	movs	r1, #0
   11b5e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
   11b62:	462b      	mov	r3, r5
   11b64:	4619      	mov	r1, r3
   11b66:	4803      	ldr	r0, [pc, #12]	; (11b74 <Gpio::ClearInterruptRoutine()+0x4c>)
   11b68:	f003 fd14 	bl	15594 <__cyg_profile_func_exit>
  }
   11b6c:	bf00      	nop
   11b6e:	b003      	add	sp, #12
   11b70:	bd30      	pop	{r4, r5, pc}
   11b72:	bf00      	nop
   11b74:	00011b29 	.word	0x00011b29
   11b78:	10000588 	.word	0x10000588

00011b7c <unsigned char util::Value<GpioInterface::Edge, unsigned char>(GpioInterface::Edge)>:
//
// @param enum_type_value variable you would like to get the value of.
// @return the value of the enum class type variable of with the underlying
//         type of the enum class.
template <typename Enum, typename Type = typename std::underlying_type_t<Enum>>
constexpr Type Value(Enum enum_type_value)
   11b7c:	b530      	push	{r4, r5, lr}
   11b7e:	b083      	sub	sp, #12
   11b80:	4675      	mov	r5, lr
   11b82:	4603      	mov	r3, r0
   11b84:	f88d 3007 	strb.w	r3, [sp, #7]
   11b88:	462b      	mov	r3, r5
   11b8a:	4619      	mov	r1, r3
   11b8c:	4806      	ldr	r0, [pc, #24]	; (11ba8 <unsigned char util::Value<GpioInterface::Edge, unsigned char>(GpioInterface::Edge)+0x2c>)
   11b8e:	f003 fced 	bl	1556c <__cyg_profile_func_enter>
{
  return static_cast<Type>(enum_type_value);
   11b92:	f89d 4007 	ldrb.w	r4, [sp, #7]
   11b96:	462b      	mov	r3, r5
   11b98:	4619      	mov	r1, r3
   11b9a:	4803      	ldr	r0, [pc, #12]	; (11ba8 <unsigned char util::Value<GpioInterface::Edge, unsigned char>(GpioInterface::Edge)+0x2c>)
   11b9c:	f003 fcfa 	bl	15594 <__cyg_profile_func_exit>
   11ba0:	4623      	mov	r3, r4
}
   11ba2:	4618      	mov	r0, r3
   11ba4:	b003      	add	sp, #12
   11ba6:	bd30      	pop	{r4, r5, pc}
   11ba8:	00011b7d 	.word	0x00011b7d

00011bac <Gpio::SetInterruptEdge(GpioInterface::Edge)>:

  // Sets the selected edge that the gpio interrupt will be triggered on.
  void SetInterruptEdge(Edge edge) override
   11bac:	b510      	push	{r4, lr}
   11bae:	b084      	sub	sp, #16
   11bb0:	4674      	mov	r4, lr
   11bb2:	9003      	str	r0, [sp, #12]
   11bb4:	460b      	mov	r3, r1
   11bb6:	f88d 300b 	strb.w	r3, [sp, #11]
   11bba:	4623      	mov	r3, r4
   11bbc:	4619      	mov	r1, r3
   11bbe:	4819      	ldr	r0, [pc, #100]	; (11c24 <Gpio::SetInterruptEdge(GpioInterface::Edge)+0x78>)
   11bc0:	f003 fcd4 	bl	1556c <__cyg_profile_func_enter>
  {
    ValidPortCheck();
   11bc4:	9803      	ldr	r0, [sp, #12]
   11bc6:	f7ff ff43 	bl	11a50 <Gpio::ValidPortCheck()>
    switch (edge)
   11bca:	f89d 300b 	ldrb.w	r3, [sp, #11]
   11bce:	2b01      	cmp	r3, #1
   11bd0:	d008      	beq.n	11be4 <Gpio::SetInterruptEdge(GpioInterface::Edge)+0x38>
   11bd2:	2b01      	cmp	r3, #1
   11bd4:	d302      	bcc.n	11bdc <Gpio::SetInterruptEdge(GpioInterface::Edge)+0x30>
   11bd6:	2b02      	cmp	r3, #2
   11bd8:	d008      	beq.n	11bec <Gpio::SetInterruptEdge(GpioInterface::Edge)+0x40>
   11bda:	e00e      	b.n	11bfa <Gpio::SetInterruptEdge(GpioInterface::Edge)+0x4e>
    {
      case Edge::kEdgeRising:
      {
        SetEdgeRising();
   11bdc:	9803      	ldr	r0, [sp, #12]
   11bde:	f000 f8b1 	bl	11d44 <Gpio::SetEdgeRising()>
        break;
   11be2:	e017      	b.n	11c14 <Gpio::SetInterruptEdge(GpioInterface::Edge)+0x68>
      }
      case Edge::kEdgeFalling:
      {
        SetEdgeFalling();
   11be4:	9803      	ldr	r0, [sp, #12]
   11be6:	f000 f8eb 	bl	11dc0 <Gpio::SetEdgeFalling()>
        break;
   11bea:	e013      	b.n	11c14 <Gpio::SetInterruptEdge(GpioInterface::Edge)+0x68>
      }
      case Edge::kEdgeBoth:
      {
        SetEdgeRising();
   11bec:	9803      	ldr	r0, [sp, #12]
   11bee:	f000 f8a9 	bl	11d44 <Gpio::SetEdgeRising()>
        SetEdgeFalling();
   11bf2:	9803      	ldr	r0, [sp, #12]
   11bf4:	f000 f8e4 	bl	11dc0 <Gpio::SetEdgeFalling()>
        break;
   11bf8:	e00c      	b.n	11c14 <Gpio::SetInterruptEdge(GpioInterface::Edge)+0x68>
      }
      default:
      {
        LOG_WARNING(
   11bfa:	f89d 300b 	ldrb.w	r3, [sp, #11]
   11bfe:	4618      	mov	r0, r3
   11c00:	f7ff ffbc 	bl	11b7c <unsigned char util::Value<GpioInterface::Edge, unsigned char>(GpioInterface::Edge)>
   11c04:	4603      	mov	r3, r0
   11c06:	9300      	str	r3, [sp, #0]
   11c08:	23d2      	movs	r3, #210	; 0xd2
   11c0a:	4a07      	ldr	r2, [pc, #28]	; (11c28 <Gpio::SetInterruptEdge(GpioInterface::Edge)+0x7c>)
   11c0c:	4907      	ldr	r1, [pc, #28]	; (11c2c <Gpio::SetInterruptEdge(GpioInterface::Edge)+0x80>)
   11c0e:	4808      	ldr	r0, [pc, #32]	; (11c30 <Gpio::SetInterruptEdge(GpioInterface::Edge)+0x84>)
   11c10:	f004 ff08 	bl	16a24 <printf>
   11c14:	4623      	mov	r3, r4
   11c16:	4619      	mov	r1, r3
   11c18:	4802      	ldr	r0, [pc, #8]	; (11c24 <Gpio::SetInterruptEdge(GpioInterface::Edge)+0x78>)
   11c1a:	f003 fcbb 	bl	15594 <__cyg_profile_func_exit>
            "Edge %d cannot be used for External Interrupts."
            "Need to use a rising, falling, or both configuration.",
            util::Value(edge));
      }
    }
  }
   11c1e:	bf00      	nop
   11c20:	b004      	add	sp, #16
   11c22:	bd10      	pop	{r4, pc}
   11c24:	00011bad 	.word	0x00011bad
   11c28:	00019200 	.word	0x00019200
   11c2c:	00018d4c 	.word	0x00018d4c
   11c30:	00018870 	.word	0x00018870

00011c34 <Gpio::ClearInterruptEdge(GpioInterface::Edge)>:

  // Clears the seleted edge of the gpio interrupt from being triggered.
  void ClearInterruptEdge(Edge edge) override
   11c34:	b510      	push	{r4, lr}
   11c36:	b084      	sub	sp, #16
   11c38:	4674      	mov	r4, lr
   11c3a:	9003      	str	r0, [sp, #12]
   11c3c:	460b      	mov	r3, r1
   11c3e:	f88d 300b 	strb.w	r3, [sp, #11]
   11c42:	4623      	mov	r3, r4
   11c44:	4619      	mov	r1, r3
   11c46:	4819      	ldr	r0, [pc, #100]	; (11cac <Gpio::ClearInterruptEdge(GpioInterface::Edge)+0x78>)
   11c48:	f003 fc90 	bl	1556c <__cyg_profile_func_enter>
  {
    ValidPortCheck();
   11c4c:	9803      	ldr	r0, [sp, #12]
   11c4e:	f7ff feff 	bl	11a50 <Gpio::ValidPortCheck()>
    switch (edge)
   11c52:	f89d 300b 	ldrb.w	r3, [sp, #11]
   11c56:	2b01      	cmp	r3, #1
   11c58:	d008      	beq.n	11c6c <Gpio::ClearInterruptEdge(GpioInterface::Edge)+0x38>
   11c5a:	2b01      	cmp	r3, #1
   11c5c:	d302      	bcc.n	11c64 <Gpio::ClearInterruptEdge(GpioInterface::Edge)+0x30>
   11c5e:	2b02      	cmp	r3, #2
   11c60:	d008      	beq.n	11c74 <Gpio::ClearInterruptEdge(GpioInterface::Edge)+0x40>
   11c62:	e00e      	b.n	11c82 <Gpio::ClearInterruptEdge(GpioInterface::Edge)+0x4e>
    {
      case Edge::kEdgeRising:
      {
        ClearEdgeRising();
   11c64:	9803      	ldr	r0, [sp, #12]
   11c66:	f000 f8e9 	bl	11e3c <Gpio::ClearEdgeRising()>
        break;
   11c6a:	e017      	b.n	11c9c <Gpio::ClearInterruptEdge(GpioInterface::Edge)+0x68>
      }
      case Edge::kEdgeFalling:
      {
        ClearEdgeFalling();
   11c6c:	9803      	ldr	r0, [sp, #12]
   11c6e:	f000 f923 	bl	11eb8 <Gpio::ClearEdgeFalling()>
        break;
   11c72:	e013      	b.n	11c9c <Gpio::ClearInterruptEdge(GpioInterface::Edge)+0x68>
      }
      case Edge::kEdgeBoth:
      {
        ClearEdgeRising();
   11c74:	9803      	ldr	r0, [sp, #12]
   11c76:	f000 f8e1 	bl	11e3c <Gpio::ClearEdgeRising()>
        ClearEdgeFalling();
   11c7a:	9803      	ldr	r0, [sp, #12]
   11c7c:	f000 f91c 	bl	11eb8 <Gpio::ClearEdgeFalling()>
        break;
   11c80:	e00c      	b.n	11c9c <Gpio::ClearInterruptEdge(GpioInterface::Edge)+0x68>
      }
      default:
      {
        LOG_WARNING(
   11c82:	f89d 300b 	ldrb.w	r3, [sp, #11]
   11c86:	4618      	mov	r0, r3
   11c88:	f7ff ff78 	bl	11b7c <unsigned char util::Value<GpioInterface::Edge, unsigned char>(GpioInterface::Edge)>
   11c8c:	4603      	mov	r3, r0
   11c8e:	9300      	str	r3, [sp, #0]
   11c90:	23f2      	movs	r3, #242	; 0xf2
   11c92:	4a07      	ldr	r2, [pc, #28]	; (11cb0 <Gpio::ClearInterruptEdge(GpioInterface::Edge)+0x7c>)
   11c94:	4907      	ldr	r1, [pc, #28]	; (11cb4 <Gpio::ClearInterruptEdge(GpioInterface::Edge)+0x80>)
   11c96:	4808      	ldr	r0, [pc, #32]	; (11cb8 <Gpio::ClearInterruptEdge(GpioInterface::Edge)+0x84>)
   11c98:	f004 fec4 	bl	16a24 <printf>
   11c9c:	4623      	mov	r3, r4
   11c9e:	4619      	mov	r1, r3
   11ca0:	4802      	ldr	r0, [pc, #8]	; (11cac <Gpio::ClearInterruptEdge(GpioInterface::Edge)+0x78>)
   11ca2:	f003 fc77 	bl	15594 <__cyg_profile_func_exit>
            "Edge %d cannot be used for External Interrupts."
            "Need to use a rising, falling, or both configuration.",
           util::Value(edge));
      }
    }
  }
   11ca6:	bf00      	nop
   11ca8:	b004      	add	sp, #16
   11caa:	bd10      	pop	{r4, pc}
   11cac:	00011c35 	.word	0x00011c35
   11cb0:	000191a8 	.word	0x000191a8
   11cb4:	00018d58 	.word	0x00018d58
   11cb8:	00018870 	.word	0x00018870

00011cbc <Gpio::AttachInterrupt(void (*)(), GpioInterface::Edge)>:

  // Assign the developer's ISR and sets the selected edge that the gpio
  // interrupt will be triggered on.
  void AttachInterrupt(IsrPointer function, Edge edge) override
   11cbc:	b510      	push	{r4, lr}
   11cbe:	b084      	sub	sp, #16
   11cc0:	4674      	mov	r4, lr
   11cc2:	9003      	str	r0, [sp, #12]
   11cc4:	9102      	str	r1, [sp, #8]
   11cc6:	4613      	mov	r3, r2
   11cc8:	f88d 3007 	strb.w	r3, [sp, #7]
   11ccc:	4623      	mov	r3, r4
   11cce:	4619      	mov	r1, r3
   11cd0:	480b      	ldr	r0, [pc, #44]	; (11d00 <Gpio::AttachInterrupt(void (*)(), GpioInterface::Edge)+0x44>)
   11cd2:	f003 fc4b 	bl	1556c <__cyg_profile_func_enter>
  {
    ValidPortCheck();
   11cd6:	9803      	ldr	r0, [sp, #12]
   11cd8:	f7ff feba 	bl	11a50 <Gpio::ValidPortCheck()>
    SetInterruptRoutine(function);
   11cdc:	9902      	ldr	r1, [sp, #8]
   11cde:	9803      	ldr	r0, [sp, #12]
   11ce0:	f7ff fef4 	bl	11acc <Gpio::SetInterruptRoutine(void (*)())>
    SetInterruptEdge(edge);
   11ce4:	f89d 3007 	ldrb.w	r3, [sp, #7]
   11ce8:	4619      	mov	r1, r3
   11cea:	9803      	ldr	r0, [sp, #12]
   11cec:	f7ff ff5e 	bl	11bac <Gpio::SetInterruptEdge(GpioInterface::Edge)>
   11cf0:	4623      	mov	r3, r4
   11cf2:	4619      	mov	r1, r3
   11cf4:	4802      	ldr	r0, [pc, #8]	; (11d00 <Gpio::AttachInterrupt(void (*)(), GpioInterface::Edge)+0x44>)
   11cf6:	f003 fc4d 	bl	15594 <__cyg_profile_func_exit>
  }
   11cfa:	bf00      	nop
   11cfc:	b004      	add	sp, #16
   11cfe:	bd10      	pop	{r4, pc}
   11d00:	00011cbd 	.word	0x00011cbd

00011d04 <Gpio::DetachInterrupt()>:

  // Removes the developer's ISR and clears the selected edge of the gpio
  // interrupt from being triggered.
  void DetachInterrupt() override
   11d04:	b510      	push	{r4, lr}
   11d06:	b082      	sub	sp, #8
   11d08:	4674      	mov	r4, lr
   11d0a:	9001      	str	r0, [sp, #4]
   11d0c:	4623      	mov	r3, r4
   11d0e:	4619      	mov	r1, r3
   11d10:	480b      	ldr	r0, [pc, #44]	; (11d40 <Gpio::DetachInterrupt()+0x3c>)
   11d12:	f003 fc2b 	bl	1556c <__cyg_profile_func_enter>
  {
    ValidPortCheck();
   11d16:	9801      	ldr	r0, [sp, #4]
   11d18:	f7ff fe9a 	bl	11a50 <Gpio::ValidPortCheck()>
    ClearInterruptRoutine();
   11d1c:	9801      	ldr	r0, [sp, #4]
   11d1e:	f7ff ff03 	bl	11b28 <Gpio::ClearInterruptRoutine()>
    ClearEdgeRising();
   11d22:	9801      	ldr	r0, [sp, #4]
   11d24:	f000 f88a 	bl	11e3c <Gpio::ClearEdgeRising()>
    ClearEdgeFalling();
   11d28:	9801      	ldr	r0, [sp, #4]
   11d2a:	f000 f8c5 	bl	11eb8 <Gpio::ClearEdgeFalling()>
   11d2e:	4623      	mov	r3, r4
   11d30:	4619      	mov	r1, r3
   11d32:	4803      	ldr	r0, [pc, #12]	; (11d40 <Gpio::DetachInterrupt()+0x3c>)
   11d34:	f003 fc2e 	bl	15594 <__cyg_profile_func_exit>
  }
   11d38:	bf00      	nop
   11d3a:	b002      	add	sp, #8
   11d3c:	bd10      	pop	{r4, pc}
   11d3e:	bf00      	nop
   11d40:	00011d05 	.word	0x00011d05

00011d44 <Gpio::SetEdgeRising()>:
    *interrupt[triggered_port].clear |= (1 << triggered_pin);
  }

 private:
  // Sets the gpio interrupt to trigger on a rising edge.
  void SetEdgeRising()
   11d44:	b530      	push	{r4, r5, lr}
   11d46:	b083      	sub	sp, #12
   11d48:	4675      	mov	r5, lr
   11d4a:	9001      	str	r0, [sp, #4]
   11d4c:	462b      	mov	r3, r5
   11d4e:	4619      	mov	r1, r3
   11d50:	4819      	ldr	r0, [pc, #100]	; (11db8 <Gpio::SetEdgeRising()+0x74>)
   11d52:	f003 fc0b 	bl	1556c <__cyg_profile_func_enter>
  {
    *interrupt[interupt_port_].enable_rising_edge |= (1 << pin_->GetPin());
   11d56:	9b01      	ldr	r3, [sp, #4]
   11d58:	689a      	ldr	r2, [r3, #8]
   11d5a:	9b01      	ldr	r3, [sp, #4]
   11d5c:	689b      	ldr	r3, [r3, #8]
   11d5e:	681b      	ldr	r3, [r3, #0]
   11d60:	3330      	adds	r3, #48	; 0x30
   11d62:	681b      	ldr	r3, [r3, #0]
   11d64:	4610      	mov	r0, r2
   11d66:	4798      	blx	r3
   11d68:	4603      	mov	r3, r0
   11d6a:	461a      	mov	r2, r3
   11d6c:	2301      	movs	r3, #1
   11d6e:	fa03 f002 	lsl.w	r0, r3, r2
   11d72:	9b01      	ldr	r3, [sp, #4]
   11d74:	791b      	ldrb	r3, [r3, #4]
   11d76:	4619      	mov	r1, r3
   11d78:	4a10      	ldr	r2, [pc, #64]	; (11dbc <Gpio::SetEdgeRising()+0x78>)
   11d7a:	460b      	mov	r3, r1
   11d7c:	009b      	lsls	r3, r3, #2
   11d7e:	440b      	add	r3, r1
   11d80:	009b      	lsls	r3, r3, #2
   11d82:	4413      	add	r3, r2
   11d84:	330c      	adds	r3, #12
   11d86:	681b      	ldr	r3, [r3, #0]
   11d88:	681a      	ldr	r2, [r3, #0]
   11d8a:	4604      	mov	r4, r0
   11d8c:	9b01      	ldr	r3, [sp, #4]
   11d8e:	791b      	ldrb	r3, [r3, #4]
   11d90:	4618      	mov	r0, r3
   11d92:	490a      	ldr	r1, [pc, #40]	; (11dbc <Gpio::SetEdgeRising()+0x78>)
   11d94:	4603      	mov	r3, r0
   11d96:	009b      	lsls	r3, r3, #2
   11d98:	4403      	add	r3, r0
   11d9a:	009b      	lsls	r3, r3, #2
   11d9c:	440b      	add	r3, r1
   11d9e:	330c      	adds	r3, #12
   11da0:	681b      	ldr	r3, [r3, #0]
   11da2:	4322      	orrs	r2, r4
   11da4:	601a      	str	r2, [r3, #0]
   11da6:	462b      	mov	r3, r5
   11da8:	4619      	mov	r1, r3
   11daa:	4803      	ldr	r0, [pc, #12]	; (11db8 <Gpio::SetEdgeRising()+0x74>)
   11dac:	f003 fbf2 	bl	15594 <__cyg_profile_func_exit>
  }
   11db0:	bf00      	nop
   11db2:	b003      	add	sp, #12
   11db4:	bd30      	pop	{r4, r5, pc}
   11db6:	bf00      	nop
   11db8:	00011d45 	.word	0x00011d45
   11dbc:	10000044 	.word	0x10000044

00011dc0 <Gpio::SetEdgeFalling()>:

  // Sets the gpio interrupt to trigger on a falling edge.
  void SetEdgeFalling()
   11dc0:	b530      	push	{r4, r5, lr}
   11dc2:	b083      	sub	sp, #12
   11dc4:	4675      	mov	r5, lr
   11dc6:	9001      	str	r0, [sp, #4]
   11dc8:	462b      	mov	r3, r5
   11dca:	4619      	mov	r1, r3
   11dcc:	4819      	ldr	r0, [pc, #100]	; (11e34 <Gpio::SetEdgeFalling()+0x74>)
   11dce:	f003 fbcd 	bl	1556c <__cyg_profile_func_enter>
  {
    *interrupt[interupt_port_].enable_falling_edge |= (1 << pin_->GetPin());
   11dd2:	9b01      	ldr	r3, [sp, #4]
   11dd4:	689a      	ldr	r2, [r3, #8]
   11dd6:	9b01      	ldr	r3, [sp, #4]
   11dd8:	689b      	ldr	r3, [r3, #8]
   11dda:	681b      	ldr	r3, [r3, #0]
   11ddc:	3330      	adds	r3, #48	; 0x30
   11dde:	681b      	ldr	r3, [r3, #0]
   11de0:	4610      	mov	r0, r2
   11de2:	4798      	blx	r3
   11de4:	4603      	mov	r3, r0
   11de6:	461a      	mov	r2, r3
   11de8:	2301      	movs	r3, #1
   11dea:	fa03 f002 	lsl.w	r0, r3, r2
   11dee:	9b01      	ldr	r3, [sp, #4]
   11df0:	791b      	ldrb	r3, [r3, #4]
   11df2:	4619      	mov	r1, r3
   11df4:	4a10      	ldr	r2, [pc, #64]	; (11e38 <Gpio::SetEdgeFalling()+0x78>)
   11df6:	460b      	mov	r3, r1
   11df8:	009b      	lsls	r3, r3, #2
   11dfa:	440b      	add	r3, r1
   11dfc:	009b      	lsls	r3, r3, #2
   11dfe:	4413      	add	r3, r2
   11e00:	3310      	adds	r3, #16
   11e02:	681b      	ldr	r3, [r3, #0]
   11e04:	681a      	ldr	r2, [r3, #0]
   11e06:	4604      	mov	r4, r0
   11e08:	9b01      	ldr	r3, [sp, #4]
   11e0a:	791b      	ldrb	r3, [r3, #4]
   11e0c:	4618      	mov	r0, r3
   11e0e:	490a      	ldr	r1, [pc, #40]	; (11e38 <Gpio::SetEdgeFalling()+0x78>)
   11e10:	4603      	mov	r3, r0
   11e12:	009b      	lsls	r3, r3, #2
   11e14:	4403      	add	r3, r0
   11e16:	009b      	lsls	r3, r3, #2
   11e18:	440b      	add	r3, r1
   11e1a:	3310      	adds	r3, #16
   11e1c:	681b      	ldr	r3, [r3, #0]
   11e1e:	4322      	orrs	r2, r4
   11e20:	601a      	str	r2, [r3, #0]
   11e22:	462b      	mov	r3, r5
   11e24:	4619      	mov	r1, r3
   11e26:	4803      	ldr	r0, [pc, #12]	; (11e34 <Gpio::SetEdgeFalling()+0x74>)
   11e28:	f003 fbb4 	bl	15594 <__cyg_profile_func_exit>
  }
   11e2c:	bf00      	nop
   11e2e:	b003      	add	sp, #12
   11e30:	bd30      	pop	{r4, r5, pc}
   11e32:	bf00      	nop
   11e34:	00011dc1 	.word	0x00011dc1
   11e38:	10000044 	.word	0x10000044

00011e3c <Gpio::ClearEdgeRising()>:

  // Clears the gpio interrupt to no longer trigger on a rising edge.
  void ClearEdgeRising()
   11e3c:	b530      	push	{r4, r5, lr}
   11e3e:	b083      	sub	sp, #12
   11e40:	4675      	mov	r5, lr
   11e42:	9001      	str	r0, [sp, #4]
   11e44:	462b      	mov	r3, r5
   11e46:	4619      	mov	r1, r3
   11e48:	4819      	ldr	r0, [pc, #100]	; (11eb0 <Gpio::ClearEdgeRising()+0x74>)
   11e4a:	f003 fb8f 	bl	1556c <__cyg_profile_func_enter>
  {
    *interrupt[interupt_port_].enable_rising_edge &= ~(1 << pin_->GetPin());
   11e4e:	9b01      	ldr	r3, [sp, #4]
   11e50:	689a      	ldr	r2, [r3, #8]
   11e52:	9b01      	ldr	r3, [sp, #4]
   11e54:	689b      	ldr	r3, [r3, #8]
   11e56:	681b      	ldr	r3, [r3, #0]
   11e58:	3330      	adds	r3, #48	; 0x30
   11e5a:	681b      	ldr	r3, [r3, #0]
   11e5c:	4610      	mov	r0, r2
   11e5e:	4798      	blx	r3
   11e60:	4603      	mov	r3, r0
   11e62:	461a      	mov	r2, r3
   11e64:	2301      	movs	r3, #1
   11e66:	4093      	lsls	r3, r2
   11e68:	43d8      	mvns	r0, r3
   11e6a:	9b01      	ldr	r3, [sp, #4]
   11e6c:	791b      	ldrb	r3, [r3, #4]
   11e6e:	4619      	mov	r1, r3
   11e70:	4a10      	ldr	r2, [pc, #64]	; (11eb4 <Gpio::ClearEdgeRising()+0x78>)
   11e72:	460b      	mov	r3, r1
   11e74:	009b      	lsls	r3, r3, #2
   11e76:	440b      	add	r3, r1
   11e78:	009b      	lsls	r3, r3, #2
   11e7a:	4413      	add	r3, r2
   11e7c:	330c      	adds	r3, #12
   11e7e:	681b      	ldr	r3, [r3, #0]
   11e80:	681a      	ldr	r2, [r3, #0]
   11e82:	4604      	mov	r4, r0
   11e84:	9b01      	ldr	r3, [sp, #4]
   11e86:	791b      	ldrb	r3, [r3, #4]
   11e88:	4618      	mov	r0, r3
   11e8a:	490a      	ldr	r1, [pc, #40]	; (11eb4 <Gpio::ClearEdgeRising()+0x78>)
   11e8c:	4603      	mov	r3, r0
   11e8e:	009b      	lsls	r3, r3, #2
   11e90:	4403      	add	r3, r0
   11e92:	009b      	lsls	r3, r3, #2
   11e94:	440b      	add	r3, r1
   11e96:	330c      	adds	r3, #12
   11e98:	681b      	ldr	r3, [r3, #0]
   11e9a:	4022      	ands	r2, r4
   11e9c:	601a      	str	r2, [r3, #0]
   11e9e:	462b      	mov	r3, r5
   11ea0:	4619      	mov	r1, r3
   11ea2:	4803      	ldr	r0, [pc, #12]	; (11eb0 <Gpio::ClearEdgeRising()+0x74>)
   11ea4:	f003 fb76 	bl	15594 <__cyg_profile_func_exit>
  }
   11ea8:	bf00      	nop
   11eaa:	b003      	add	sp, #12
   11eac:	bd30      	pop	{r4, r5, pc}
   11eae:	bf00      	nop
   11eb0:	00011e3d 	.word	0x00011e3d
   11eb4:	10000044 	.word	0x10000044

00011eb8 <Gpio::ClearEdgeFalling()>:

  // Clears the gpio interrupt to no longer trigger on a falling edge.
  void ClearEdgeFalling()
   11eb8:	b530      	push	{r4, r5, lr}
   11eba:	b083      	sub	sp, #12
   11ebc:	4675      	mov	r5, lr
   11ebe:	9001      	str	r0, [sp, #4]
   11ec0:	462b      	mov	r3, r5
   11ec2:	4619      	mov	r1, r3
   11ec4:	4819      	ldr	r0, [pc, #100]	; (11f2c <Gpio::ClearEdgeFalling()+0x74>)
   11ec6:	f003 fb51 	bl	1556c <__cyg_profile_func_enter>
  {
    *interrupt[interupt_port_].enable_falling_edge &= ~(1 << pin_->GetPin());
   11eca:	9b01      	ldr	r3, [sp, #4]
   11ecc:	689a      	ldr	r2, [r3, #8]
   11ece:	9b01      	ldr	r3, [sp, #4]
   11ed0:	689b      	ldr	r3, [r3, #8]
   11ed2:	681b      	ldr	r3, [r3, #0]
   11ed4:	3330      	adds	r3, #48	; 0x30
   11ed6:	681b      	ldr	r3, [r3, #0]
   11ed8:	4610      	mov	r0, r2
   11eda:	4798      	blx	r3
   11edc:	4603      	mov	r3, r0
   11ede:	461a      	mov	r2, r3
   11ee0:	2301      	movs	r3, #1
   11ee2:	4093      	lsls	r3, r2
   11ee4:	43d8      	mvns	r0, r3
   11ee6:	9b01      	ldr	r3, [sp, #4]
   11ee8:	791b      	ldrb	r3, [r3, #4]
   11eea:	4619      	mov	r1, r3
   11eec:	4a10      	ldr	r2, [pc, #64]	; (11f30 <Gpio::ClearEdgeFalling()+0x78>)
   11eee:	460b      	mov	r3, r1
   11ef0:	009b      	lsls	r3, r3, #2
   11ef2:	440b      	add	r3, r1
   11ef4:	009b      	lsls	r3, r3, #2
   11ef6:	4413      	add	r3, r2
   11ef8:	3310      	adds	r3, #16
   11efa:	681b      	ldr	r3, [r3, #0]
   11efc:	681a      	ldr	r2, [r3, #0]
   11efe:	4604      	mov	r4, r0
   11f00:	9b01      	ldr	r3, [sp, #4]
   11f02:	791b      	ldrb	r3, [r3, #4]
   11f04:	4618      	mov	r0, r3
   11f06:	490a      	ldr	r1, [pc, #40]	; (11f30 <Gpio::ClearEdgeFalling()+0x78>)
   11f08:	4603      	mov	r3, r0
   11f0a:	009b      	lsls	r3, r3, #2
   11f0c:	4403      	add	r3, r0
   11f0e:	009b      	lsls	r3, r3, #2
   11f10:	440b      	add	r3, r1
   11f12:	3310      	adds	r3, #16
   11f14:	681b      	ldr	r3, [r3, #0]
   11f16:	4022      	ands	r2, r4
   11f18:	601a      	str	r2, [r3, #0]
   11f1a:	462b      	mov	r3, r5
   11f1c:	4619      	mov	r1, r3
   11f1e:	4803      	ldr	r0, [pc, #12]	; (11f2c <Gpio::ClearEdgeFalling()+0x74>)
   11f20:	f003 fb38 	bl	15594 <__cyg_profile_func_exit>
  }
   11f24:	bf00      	nop
   11f26:	b003      	add	sp, #12
   11f28:	bd30      	pop	{r4, r5, pc}
   11f2a:	bf00      	nop
   11f2c:	00011eb9 	.word	0x00011eb9
   11f30:	10000044 	.word	0x10000044

00011f34 <SystemControllerInterface::SystemControllerInterface()>:
#include "L0_LowLevel/LPC40xx.h"
#include "utility/enum.hpp"
#include "utility/log.hpp"
#include "utility/macros.hpp"

class SystemControllerInterface
   11f34:	b082      	sub	sp, #8
   11f36:	9001      	str	r0, [sp, #4]
   11f38:	4a03      	ldr	r2, [pc, #12]	; (11f48 <SystemControllerInterface::SystemControllerInterface()+0x14>)
   11f3a:	9b01      	ldr	r3, [sp, #4]
   11f3c:	601a      	str	r2, [r3, #0]
   11f3e:	9b01      	ldr	r3, [sp, #4]
   11f40:	4618      	mov	r0, r3
   11f42:	b002      	add	sp, #8
   11f44:	4770      	bx	lr
   11f46:	bf00      	nop
   11f48:	00018f38 	.word	0x00018f38

00011f4c <Lpc40xxSystemController::Lpc40xxSystemController()>:
  static constexpr uint32_t kDefaultIRCFrequency    = 12'000'000;
  static constexpr uint32_t kDefaultTimeout         = 1'000;  // ms

  inline static LPC_SC_TypeDef * system_controller = LPC_SC;

  constexpr Lpc40xxSystemController() {}
   11f4c:	b500      	push	{lr}
   11f4e:	b083      	sub	sp, #12
   11f50:	9001      	str	r0, [sp, #4]
   11f52:	9b01      	ldr	r3, [sp, #4]
   11f54:	4618      	mov	r0, r3
   11f56:	f7ff ffed 	bl	11f34 <SystemControllerInterface::SystemControllerInterface()>
   11f5a:	4a04      	ldr	r2, [pc, #16]	; (11f6c <Lpc40xxSystemController::Lpc40xxSystemController()+0x20>)
   11f5c:	9b01      	ldr	r3, [sp, #4]
   11f5e:	601a      	str	r2, [r3, #0]
   11f60:	9b01      	ldr	r3, [sp, #4]
   11f62:	4618      	mov	r0, r3
   11f64:	b003      	add	sp, #12
   11f66:	f85d fb04 	ldr.w	pc, [sp], #4
   11f6a:	bf00      	nop
   11f6c:	00018f14 	.word	0x00018f14

00011f70 <Lpc40xxSystemController::SetClockFrequency(unsigned char)>:

  uint32_t SetClockFrequency(uint8_t frequency_in_mhz) override
   11f70:	b500      	push	{lr}
   11f72:	b085      	sub	sp, #20
   11f74:	9001      	str	r0, [sp, #4]
   11f76:	460b      	mov	r3, r1
   11f78:	f88d 3003 	strb.w	r3, [sp, #3]
  {
    uint32_t offset = 0;
   11f7c:	2300      	movs	r3, #0
   11f7e:	9303      	str	r3, [sp, #12]
    SelectOscillatorSource(OscillatorSource::kIrc);
   11f80:	2100      	movs	r1, #0
   11f82:	9801      	ldr	r0, [sp, #4]
   11f84:	f000 f8ce 	bl	12124 <Lpc40xxSystemController::SelectOscillatorSource(Lpc40xxSystemController::OscillatorSource)>
    if (frequency_in_mhz > 12)
   11f88:	f89d 3003 	ldrb.w	r3, [sp, #3]
   11f8c:	2b0c      	cmp	r3, #12
   11f8e:	d916      	bls.n	11fbe <Lpc40xxSystemController::SetClockFrequency(unsigned char)+0x4e>
    {
      offset = SetMainPll(PllInput::kIrc, frequency_in_mhz);
   11f90:	f89d 3003 	ldrb.w	r3, [sp, #3]
   11f94:	b29b      	uxth	r3, r3
   11f96:	461a      	mov	r2, r3
   11f98:	210c      	movs	r1, #12
   11f9a:	9801      	ldr	r0, [sp, #4]
   11f9c:	f000 f9ac 	bl	122f8 <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)>
   11fa0:	9003      	str	r0, [sp, #12]
      SelectMainClockSource(MainClockSource::kPllClock);
   11fa2:	f44f 7180 	mov.w	r1, #256	; 0x100
   11fa6:	9801      	ldr	r0, [sp, #4]
   11fa8:	f000 f8d6 	bl	12158 <Lpc40xxSystemController::SelectMainClockSource(Lpc40xxSystemController::MainClockSource)>
      speed_in_hertz = frequency_in_mhz * 1'000'000;
   11fac:	f89d 3003 	ldrb.w	r3, [sp, #3]
   11fb0:	4a10      	ldr	r2, [pc, #64]	; (11ff4 <Lpc40xxSystemController::SetClockFrequency(unsigned char)+0x84>)
   11fb2:	fb02 f303 	mul.w	r3, r2, r3
   11fb6:	461a      	mov	r2, r3
   11fb8:	4b0f      	ldr	r3, [pc, #60]	; (11ff8 <Lpc40xxSystemController::SetClockFrequency(unsigned char)+0x88>)
   11fba:	601a      	str	r2, [r3, #0]
   11fbc:	e006      	b.n	11fcc <Lpc40xxSystemController::SetClockFrequency(unsigned char)+0x5c>
    }
    else
    {
      SelectMainClockSource(MainClockSource::kBaseClock);
   11fbe:	2100      	movs	r1, #0
   11fc0:	9801      	ldr	r0, [sp, #4]
   11fc2:	f000 f8c9 	bl	12158 <Lpc40xxSystemController::SelectMainClockSource(Lpc40xxSystemController::MainClockSource)>
      speed_in_hertz = kDefaultIRCFrequency;
   11fc6:	4b0c      	ldr	r3, [pc, #48]	; (11ff8 <Lpc40xxSystemController::SetClockFrequency(unsigned char)+0x88>)
   11fc8:	4a0c      	ldr	r2, [pc, #48]	; (11ffc <Lpc40xxSystemController::SetClockFrequency(unsigned char)+0x8c>)
   11fca:	601a      	str	r2, [r3, #0]
    }
    SetCpuClockDivider(kDivideInputBy1);
   11fcc:	2101      	movs	r1, #1
   11fce:	9801      	ldr	r0, [sp, #4]
   11fd0:	f000 fa4a 	bl	12468 <Lpc40xxSystemController::SetCpuClockDivider(unsigned char)>
    SetPeripheralClockDivider(kDivideInputBy1);
   11fd4:	9b01      	ldr	r3, [sp, #4]
   11fd6:	681b      	ldr	r3, [r3, #0]
   11fd8:	3304      	adds	r3, #4
   11fda:	681b      	ldr	r3, [r3, #0]
   11fdc:	2101      	movs	r1, #1
   11fde:	9801      	ldr	r0, [sp, #4]
   11fe0:	4798      	blx	r3
    SetEmcClockDivider(EmcDivider::kSameSpeedAsCpu);
   11fe2:	2100      	movs	r1, #0
   11fe4:	9801      	ldr	r0, [sp, #4]
   11fe6:	f000 fa73 	bl	124d0 <Lpc40xxSystemController::SetEmcClockDivider(Lpc40xxSystemController::EmcDivider)>
    return offset;
   11fea:	9b03      	ldr	r3, [sp, #12]
  }
   11fec:	4618      	mov	r0, r3
   11fee:	b005      	add	sp, #20
   11ff0:	f85d fb04 	ldr.w	pc, [sp], #4
   11ff4:	000f4240 	.word	0x000f4240
   11ff8:	10000070 	.word	0x10000070
   11ffc:	00b71b00 	.word	0x00b71b00

00012000 <Lpc40xxSystemController::SetPeripheralClockDivider(unsigned char)>:

  void SetPeripheralClockDivider(uint8_t peripheral_divider) override
   12000:	b500      	push	{lr}
   12002:	b083      	sub	sp, #12
   12004:	9001      	str	r0, [sp, #4]
   12006:	460b      	mov	r3, r1
   12008:	f88d 3003 	strb.w	r3, [sp, #3]
  {
    SJ2_ASSERT_FATAL(peripheral_divider <= 4, "Divider mustn't exceed 32");
   1200c:	f89d 3003 	ldrb.w	r3, [sp, #3]
   12010:	2b04      	cmp	r3, #4
   12012:	d90d      	bls.n	12030 <Lpc40xxSystemController::SetPeripheralClockDivider(unsigned char)+0x30>
   12014:	23ae      	movs	r3, #174	; 0xae
   12016:	4a0b      	ldr	r2, [pc, #44]	; (12044 <Lpc40xxSystemController::SetPeripheralClockDivider(unsigned char)+0x44>)
   12018:	490b      	ldr	r1, [pc, #44]	; (12048 <Lpc40xxSystemController::SetPeripheralClockDivider(unsigned char)+0x48>)
   1201a:	480c      	ldr	r0, [pc, #48]	; (1204c <Lpc40xxSystemController::SetPeripheralClockDivider(unsigned char)+0x4c>)
   1201c:	f004 fd02 	bl	16a24 <printf>
   12020:	480b      	ldr	r0, [pc, #44]	; (12050 <Lpc40xxSystemController::SetPeripheralClockDivider(unsigned char)+0x50>)
   12022:	f003 fa73 	bl	1550c <puts>
   12026:	2100      	movs	r1, #0
   12028:	2001      	movs	r0, #1
   1202a:	f7fe fee5 	bl	10df8 <debug::PrintBacktrace(bool, void*)>
   1202e:	e7fe      	b.n	1202e <Lpc40xxSystemController::SetPeripheralClockDivider(unsigned char)+0x2e>
    system_controller->PCLKSEL = peripheral_divider;
   12030:	4b08      	ldr	r3, [pc, #32]	; (12054 <Lpc40xxSystemController::SetPeripheralClockDivider(unsigned char)+0x54>)
   12032:	681b      	ldr	r3, [r3, #0]
   12034:	f89d 2003 	ldrb.w	r2, [sp, #3]
   12038:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
  }
   1203c:	bf00      	nop
   1203e:	b003      	add	sp, #12
   12040:	f85d fb04 	ldr.w	pc, [sp], #4
   12044:	00019068 	.word	0x00019068
   12048:	00018d64 	.word	0x00018d64
   1204c:	00018910 	.word	0x00018910
   12050:	000189b0 	.word	0x000189b0
   12054:	1000006c 	.word	0x1000006c

00012058 <Lpc40xxSystemController::GetPeripheralClockDivider() const>:

  uint32_t GetPeripheralClockDivider() const override
   12058:	b082      	sub	sp, #8
   1205a:	9001      	str	r0, [sp, #4]
  {
#if defined(HOST_TEST)
    return 1;
#else
    return system_controller->PCLKSEL;
   1205c:	4b03      	ldr	r3, [pc, #12]	; (1206c <Lpc40xxSystemController::GetPeripheralClockDivider() const+0x14>)
   1205e:	681b      	ldr	r3, [r3, #0]
   12060:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
#endif
  }
   12064:	4618      	mov	r0, r3
   12066:	b002      	add	sp, #8
   12068:	4770      	bx	lr
   1206a:	bf00      	nop
   1206c:	1000006c 	.word	0x1000006c

00012070 <Lpc40xxSystemController::GetSystemFrequency() const>:

  uint32_t GetSystemFrequency() const override
   12070:	b082      	sub	sp, #8
   12072:	9001      	str	r0, [sp, #4]
  {
#if defined(HOST_TEST)
    return config::kSystemClockRate;
#else
    return speed_in_hertz;
   12074:	4b02      	ldr	r3, [pc, #8]	; (12080 <Lpc40xxSystemController::GetSystemFrequency() const+0x10>)
   12076:	681b      	ldr	r3, [r3, #0]
#endif
  }
   12078:	4618      	mov	r0, r3
   1207a:	b002      	add	sp, #8
   1207c:	4770      	bx	lr
   1207e:	bf00      	nop
   12080:	10000070 	.word	0x10000070

00012084 <Lpc40xxSystemController::GetPeripheralFrequency() const>:

  uint32_t GetPeripheralFrequency() const override
   12084:	b500      	push	{lr}
   12086:	b085      	sub	sp, #20
   12088:	9001      	str	r0, [sp, #4]
  {
    uint32_t peripheral_clock_divider = GetPeripheralClockDivider();
   1208a:	9b01      	ldr	r3, [sp, #4]
   1208c:	681b      	ldr	r3, [r3, #0]
   1208e:	3308      	adds	r3, #8
   12090:	681b      	ldr	r3, [r3, #0]
   12092:	9801      	ldr	r0, [sp, #4]
   12094:	4798      	blx	r3
   12096:	9002      	str	r0, [sp, #8]
    uint32_t result = 0;  // return 0 if peripheral_clock_divider == 0
   12098:	2300      	movs	r3, #0
   1209a:	9303      	str	r3, [sp, #12]
    if (peripheral_clock_divider != 0)
   1209c:	9b02      	ldr	r3, [sp, #8]
   1209e:	2b00      	cmp	r3, #0
   120a0:	d00a      	beq.n	120b8 <Lpc40xxSystemController::GetPeripheralFrequency() const+0x34>
    {
      result = GetSystemFrequency() / peripheral_clock_divider;
   120a2:	9b01      	ldr	r3, [sp, #4]
   120a4:	681b      	ldr	r3, [r3, #0]
   120a6:	330c      	adds	r3, #12
   120a8:	681b      	ldr	r3, [r3, #0]
   120aa:	9801      	ldr	r0, [sp, #4]
   120ac:	4798      	blx	r3
   120ae:	4602      	mov	r2, r0
   120b0:	9b02      	ldr	r3, [sp, #8]
   120b2:	fbb2 f3f3 	udiv	r3, r2, r3
   120b6:	9303      	str	r3, [sp, #12]
    }
    return result;
   120b8:	9b03      	ldr	r3, [sp, #12]
  }
   120ba:	4618      	mov	r0, r3
   120bc:	b005      	add	sp, #20
   120be:	f85d fb04 	ldr.w	pc, [sp], #4
   120c2:	Address 0x00000000000120c2 is out of bounds.


000120c4 <Lpc40xxSystemController::PowerUpPeripheral(SystemControllerInterface::PeripheralID const&)>:

  void PowerUpPeripheral(const PeripheralID & peripheral_select) override
   120c4:	b084      	sub	sp, #16
   120c6:	9001      	str	r0, [sp, #4]
   120c8:	9100      	str	r1, [sp, #0]
  {
    auto power_connection_with_enabled_peripheral =
        system_controller->PCONP | (1 << peripheral_select.device_id);
   120ca:	4b09      	ldr	r3, [pc, #36]	; (120f0 <Lpc40xxSystemController::PowerUpPeripheral(SystemControllerInterface::PeripheralID const&)+0x2c>)
   120cc:	681b      	ldr	r3, [r3, #0]
   120ce:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
   120d2:	9a00      	ldr	r2, [sp, #0]
   120d4:	6812      	ldr	r2, [r2, #0]
   120d6:	2101      	movs	r1, #1
   120d8:	fa01 f202 	lsl.w	r2, r1, r2
   120dc:	4313      	orrs	r3, r2
   120de:	9303      	str	r3, [sp, #12]

    system_controller->PCONP = power_connection_with_enabled_peripheral;
   120e0:	4b03      	ldr	r3, [pc, #12]	; (120f0 <Lpc40xxSystemController::PowerUpPeripheral(SystemControllerInterface::PeripheralID const&)+0x2c>)
   120e2:	681b      	ldr	r3, [r3, #0]
   120e4:	9a03      	ldr	r2, [sp, #12]
   120e6:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  }
   120ea:	bf00      	nop
   120ec:	b004      	add	sp, #16
   120ee:	4770      	bx	lr
   120f0:	1000006c 	.word	0x1000006c

000120f4 <Lpc40xxSystemController::PowerDownPeripheral(SystemControllerInterface::PeripheralID const&)>:
  void PowerDownPeripheral(const PeripheralID & peripheral_select) override
   120f4:	b084      	sub	sp, #16
   120f6:	9001      	str	r0, [sp, #4]
   120f8:	9100      	str	r1, [sp, #0]
  {
    auto power_connection_without_enabled_peripheral =
        system_controller->PCONP & (1 << peripheral_select.device_id);
   120fa:	4b09      	ldr	r3, [pc, #36]	; (12120 <Lpc40xxSystemController::PowerDownPeripheral(SystemControllerInterface::PeripheralID const&)+0x2c>)
   120fc:	681b      	ldr	r3, [r3, #0]
   120fe:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
   12102:	9a00      	ldr	r2, [sp, #0]
   12104:	6812      	ldr	r2, [r2, #0]
   12106:	2101      	movs	r1, #1
   12108:	fa01 f202 	lsl.w	r2, r1, r2
   1210c:	4013      	ands	r3, r2
   1210e:	9303      	str	r3, [sp, #12]

    system_controller->PCONP = power_connection_without_enabled_peripheral;
   12110:	4b03      	ldr	r3, [pc, #12]	; (12120 <Lpc40xxSystemController::PowerDownPeripheral(SystemControllerInterface::PeripheralID const&)+0x2c>)
   12112:	681b      	ldr	r3, [r3, #0]
   12114:	9a03      	ldr	r2, [sp, #12]
   12116:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  }
   1211a:	bf00      	nop
   1211c:	b004      	add	sp, #16
   1211e:	4770      	bx	lr
   12120:	1000006c 	.word	0x1000006c

00012124 <Lpc40xxSystemController::SelectOscillatorSource(Lpc40xxSystemController::OscillatorSource)>:

 private:
  void SelectOscillatorSource(OscillatorSource source)
   12124:	b084      	sub	sp, #16
   12126:	9001      	str	r0, [sp, #4]
   12128:	460b      	mov	r3, r1
   1212a:	f8ad 3002 	strh.w	r3, [sp, #2]
  {
    uint32_t source_bit = static_cast<uint32_t>(source);
   1212e:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   12132:	9303      	str	r3, [sp, #12]
    system_controller->CLKSRCSEL =
        (system_controller->CLKSRCSEL & ~(kOscillatorSelect)) | source_bit;
   12134:	4b07      	ldr	r3, [pc, #28]	; (12154 <Lpc40xxSystemController::SelectOscillatorSource(Lpc40xxSystemController::OscillatorSource)+0x30>)
   12136:	681b      	ldr	r3, [r3, #0]
   12138:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
   1213c:	f023 0101 	bic.w	r1, r3, #1
    system_controller->CLKSRCSEL =
   12140:	4b04      	ldr	r3, [pc, #16]	; (12154 <Lpc40xxSystemController::SelectOscillatorSource(Lpc40xxSystemController::OscillatorSource)+0x30>)
   12142:	681b      	ldr	r3, [r3, #0]
        (system_controller->CLKSRCSEL & ~(kOscillatorSelect)) | source_bit;
   12144:	9a03      	ldr	r2, [sp, #12]
   12146:	430a      	orrs	r2, r1
    system_controller->CLKSRCSEL =
   12148:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
  }
   1214c:	bf00      	nop
   1214e:	b004      	add	sp, #16
   12150:	4770      	bx	lr
   12152:	bf00      	nop
   12154:	1000006c 	.word	0x1000006c

00012158 <Lpc40xxSystemController::SelectMainClockSource(Lpc40xxSystemController::MainClockSource)>:

  void SelectMainClockSource(MainClockSource source)
   12158:	b082      	sub	sp, #8
   1215a:	9001      	str	r0, [sp, #4]
   1215c:	460b      	mov	r3, r1
   1215e:	f8ad 3002 	strh.w	r3, [sp, #2]
  {
    system_controller->CCLKSEL =
        (system_controller->CCLKSEL & ~(kBaseClockSelect)) |
   12162:	4b08      	ldr	r3, [pc, #32]	; (12184 <Lpc40xxSystemController::SelectMainClockSource(Lpc40xxSystemController::MainClockSource)+0x2c>)
   12164:	681b      	ldr	r3, [r3, #0]
   12166:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   1216a:	f423 7180 	bic.w	r1, r3, #256	; 0x100
        static_cast<uint32_t>(source);
   1216e:	f8bd 2002 	ldrh.w	r2, [sp, #2]
    system_controller->CCLKSEL =
   12172:	4b04      	ldr	r3, [pc, #16]	; (12184 <Lpc40xxSystemController::SelectMainClockSource(Lpc40xxSystemController::MainClockSource)+0x2c>)
   12174:	681b      	ldr	r3, [r3, #0]
        (system_controller->CCLKSEL & ~(kBaseClockSelect)) |
   12176:	430a      	orrs	r2, r1
    system_controller->CCLKSEL =
   12178:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
  }
   1217c:	bf00      	nop
   1217e:	b002      	add	sp, #8
   12180:	4770      	bx	lr
   12182:	bf00      	nop
   12184:	1000006c 	.word	0x1000006c

00012188 <Lpc40xxSystemController::SelectUsbClockSource(Lpc40xxSystemController::UsbSource)>:

  void SelectUsbClockSource(UsbSource usb_clock)
   12188:	b082      	sub	sp, #8
   1218a:	9001      	str	r0, [sp, #4]
   1218c:	460b      	mov	r3, r1
   1218e:	f8ad 3002 	strh.w	r3, [sp, #2]
  {
    system_controller->USBCLKSEL =
        (system_controller->USBCLKSEL & ~(kUsbClockSource)) |
   12192:	4b08      	ldr	r3, [pc, #32]	; (121b4 <Lpc40xxSystemController::SelectUsbClockSource(Lpc40xxSystemController::UsbSource)+0x2c>)
   12194:	681b      	ldr	r3, [r3, #0]
   12196:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
   1219a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
        static_cast<uint32_t>(usb_clock);
   1219e:	f8bd 2002 	ldrh.w	r2, [sp, #2]
    system_controller->USBCLKSEL =
   121a2:	4b04      	ldr	r3, [pc, #16]	; (121b4 <Lpc40xxSystemController::SelectUsbClockSource(Lpc40xxSystemController::UsbSource)+0x2c>)
   121a4:	681b      	ldr	r3, [r3, #0]
        (system_controller->USBCLKSEL & ~(kUsbClockSource)) |
   121a6:	430a      	orrs	r2, r1
    system_controller->USBCLKSEL =
   121a8:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
  }
   121ac:	bf00      	nop
   121ae:	b002      	add	sp, #8
   121b0:	4770      	bx	lr
   121b2:	bf00      	nop
   121b4:	1000006c 	.word	0x1000006c

000121b8 <Lpc40xxSystemController::SelectSpifiClockSource(Lpc40xxSystemController::SpifiSource)>:

  void SelectSpifiClockSource(SpifiSource spifi_clock)
   121b8:	b082      	sub	sp, #8
   121ba:	9001      	str	r0, [sp, #4]
   121bc:	460b      	mov	r3, r1
   121be:	f8ad 3002 	strh.w	r3, [sp, #2]
  {
    system_controller->SPIFISEL =
        (system_controller->SPIFISEL & ~(kSpifiClockSource)) |
   121c2:	4b08      	ldr	r3, [pc, #32]	; (121e4 <Lpc40xxSystemController::SelectSpifiClockSource(Lpc40xxSystemController::SpifiSource)+0x2c>)
   121c4:	681b      	ldr	r3, [r3, #0]
   121c6:	f8d3 31b4 	ldr.w	r3, [r3, #436]	; 0x1b4
   121ca:	f423 7140 	bic.w	r1, r3, #768	; 0x300
        static_cast<uint32_t>(spifi_clock);
   121ce:	f8bd 2002 	ldrh.w	r2, [sp, #2]
    system_controller->SPIFISEL =
   121d2:	4b04      	ldr	r3, [pc, #16]	; (121e4 <Lpc40xxSystemController::SelectSpifiClockSource(Lpc40xxSystemController::SpifiSource)+0x2c>)
   121d4:	681b      	ldr	r3, [r3, #0]
        (system_controller->SPIFISEL & ~(kSpifiClockSource)) |
   121d6:	430a      	orrs	r2, r1
    system_controller->SPIFISEL =
   121d8:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
  }
   121dc:	bf00      	nop
   121de:	b002      	add	sp, #8
   121e0:	4770      	bx	lr
   121e2:	bf00      	nop
   121e4:	1000006c 	.word	0x1000006c

000121e8 <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)>:

  uint32_t CalculatePll(PllInput input_frequency, uint16_t desired_speed_in_mhz)
   121e8:	b500      	push	{lr}
   121ea:	b087      	sub	sp, #28
   121ec:	9001      	str	r0, [sp, #4]
   121ee:	460b      	mov	r3, r1
   121f0:	f8ad 3002 	strh.w	r3, [sp, #2]
   121f4:	4613      	mov	r3, r2
   121f6:	f8ad 3000 	strh.w	r3, [sp]
  {
    SJ2_ASSERT_FATAL(desired_speed_in_mhz < 384 && desired_speed_in_mhz > 12,
   121fa:	f8bd 3000 	ldrh.w	r3, [sp]
   121fe:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
   12202:	d203      	bcs.n	1220c <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)+0x24>
   12204:	f8bd 3000 	ldrh.w	r3, [sp]
   12208:	2b0c      	cmp	r3, #12
   1220a:	d80d      	bhi.n	12228 <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)+0x40>
   1220c:	23ff      	movs	r3, #255	; 0xff
   1220e:	4a34      	ldr	r2, [pc, #208]	; (122e0 <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)+0xf8>)
   12210:	4934      	ldr	r1, [pc, #208]	; (122e4 <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)+0xfc>)
   12212:	4835      	ldr	r0, [pc, #212]	; (122e8 <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)+0x100>)
   12214:	f004 fc06 	bl	16a24 <printf>
   12218:	4834      	ldr	r0, [pc, #208]	; (122ec <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)+0x104>)
   1221a:	f003 f977 	bl	1550c <puts>
   1221e:	2100      	movs	r1, #0
   12220:	2001      	movs	r0, #1
   12222:	f7fe fde9 	bl	10df8 <debug::PrintBacktrace(bool, void*)>
   12226:	e7fe      	b.n	12226 <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)+0x3e>
                     "Frequency must be lower than 384 MHz"
                     "and greater than or equal to 12 MHz");
    bool calculating = true;
   12228:	2301      	movs	r3, #1
   1222a:	f88d 3017 	strb.w	r3, [sp, #23]
    uint32_t multiplier_value;
    if ((desired_speed_in_mhz % static_cast<uint16_t>(input_frequency)) >= 1)
   1222e:	f8bd 3000 	ldrh.w	r3, [sp]
   12232:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   12236:	fbb3 f1f2 	udiv	r1, r3, r2
   1223a:	fb02 f201 	mul.w	r2, r2, r1
   1223e:	1a9b      	subs	r3, r3, r2
   12240:	b29b      	uxth	r3, r3
   12242:	2b00      	cmp	r3, #0
   12244:	d009      	beq.n	1225a <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)+0x72>
    {
      multiplier_value = static_cast<uint32_t>(
          (desired_speed_in_mhz / static_cast<uint16_t>(input_frequency)) + 1);
   12246:	f8bd 2000 	ldrh.w	r2, [sp]
   1224a:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   1224e:	fbb2 f3f3 	udiv	r3, r2, r3
   12252:	b29b      	uxth	r3, r3
   12254:	3301      	adds	r3, #1
      multiplier_value = static_cast<uint32_t>(
   12256:	9304      	str	r3, [sp, #16]
   12258:	e007      	b.n	1226a <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)+0x82>
    }
    else
    {
      multiplier_value = static_cast<uint32_t>(
          desired_speed_in_mhz / static_cast<uint16_t>(input_frequency));
   1225a:	f8bd 2000 	ldrh.w	r2, [sp]
   1225e:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   12262:	fbb2 f3f3 	udiv	r3, r2, r3
   12266:	b29b      	uxth	r3, r3
      multiplier_value = static_cast<uint32_t>(
   12268:	9304      	str	r3, [sp, #16]
    }
    uint16_t divider_value = 1;
   1226a:	2301      	movs	r3, #1
   1226c:	f8ad 300e 	strh.w	r3, [sp, #14]
    while (calculating)
   12270:	f89d 3017 	ldrb.w	r3, [sp, #23]
   12274:	2b00      	cmp	r3, #0
   12276:	d02e      	beq.n	122d6 <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)+0xee>
    {
      uint16_t current_controlled_oscillator_frequency;
      current_controlled_oscillator_frequency = static_cast<uint16_t>(
   12278:	9b04      	ldr	r3, [sp, #16]
   1227a:	b29b      	uxth	r3, r3
   1227c:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   12280:	fb12 f303 	smulbb	r3, r2, r3
   12284:	b29b      	uxth	r3, r3
   12286:	f8bd 200e 	ldrh.w	r2, [sp, #14]
   1228a:	fb12 f303 	smulbb	r3, r2, r3
   1228e:	b29b      	uxth	r3, r3
   12290:	005b      	lsls	r3, r3, #1
   12292:	f8ad 300c 	strh.w	r3, [sp, #12]
          (static_cast<uint16_t>(input_frequency) * multiplier_value * 2) *
          divider_value);
      if (current_controlled_oscillator_frequency >= 156)
   12296:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   1229a:	2b9b      	cmp	r3, #155	; 0x9b
   1229c:	d903      	bls.n	122a6 <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)+0xbe>
      {
        calculating = false;
   1229e:	2300      	movs	r3, #0
   122a0:	f88d 3017 	strb.w	r3, [sp, #23]
   122a4:	e7e4      	b.n	12270 <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)+0x88>
      }
      else
      {
        divider_value = static_cast<uint16_t>(divider_value * 2);
   122a6:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   122aa:	005b      	lsls	r3, r3, #1
   122ac:	f8ad 300e 	strh.w	r3, [sp, #14]
        SJ2_ASSERT_FATAL(divider_value < 8,
   122b0:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   122b4:	2b07      	cmp	r3, #7
   122b6:	d9db      	bls.n	12270 <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)+0x88>
   122b8:	f240 131b 	movw	r3, #283	; 0x11b
   122bc:	4a08      	ldr	r2, [pc, #32]	; (122e0 <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)+0xf8>)
   122be:	490c      	ldr	r1, [pc, #48]	; (122f0 <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)+0x108>)
   122c0:	480c      	ldr	r0, [pc, #48]	; (122f4 <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)+0x10c>)
   122c2:	f004 fbaf 	bl	16a24 <printf>
   122c6:	4809      	ldr	r0, [pc, #36]	; (122ec <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)+0x104>)
   122c8:	f003 f920 	bl	1550c <puts>
   122cc:	2100      	movs	r1, #0
   122ce:	2001      	movs	r0, #1
   122d0:	f7fe fd92 	bl	10df8 <debug::PrintBacktrace(bool, void*)>
   122d4:	e7fe      	b.n	122d4 <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)+0xec>
                         "PLL divider value went out of bounds");
      }
    }

    return multiplier_value;
   122d6:	9b04      	ldr	r3, [sp, #16]
  }
   122d8:	4618      	mov	r0, r3
   122da:	b007      	add	sp, #28
   122dc:	f85d fb04 	ldr.w	pc, [sp], #4
   122e0:	00019110 	.word	0x00019110
   122e4:	00018d7c 	.word	0x00018d7c
   122e8:	000189c8 	.word	0x000189c8
   122ec:	000189b0 	.word	0x000189b0
   122f0:	00018d94 	.word	0x00018d94
   122f4:	00018ab8 	.word	0x00018ab8

000122f8 <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)>:

  uint32_t SetMainPll(PllInput input_frequency, uint16_t desired_speed_in_mhz)
   122f8:	b510      	push	{r4, lr}
   122fa:	b08a      	sub	sp, #40	; 0x28
   122fc:	9001      	str	r0, [sp, #4]
   122fe:	460b      	mov	r3, r1
   12300:	f8ad 3002 	strh.w	r3, [sp, #2]
   12304:	4613      	mov	r3, r2
   12306:	f8ad 3000 	strh.w	r3, [sp]
  {
    uint16_t divider_value = 1;
   1230a:	2301      	movs	r3, #1
   1230c:	f8ad 301a 	strh.w	r3, [sp, #26]
    uint64_t timeout_time  = Milliseconds() + kDefaultTimeout;
   12310:	f7fe fe0a 	bl	10f28 <Milliseconds()>
   12314:	460a      	mov	r2, r1
   12316:	4601      	mov	r1, r0
   12318:	f511 737a 	adds.w	r3, r1, #1000	; 0x3e8
   1231c:	f142 0400 	adc.w	r4, r2, #0
   12320:	e9cd 3404 	strd	r3, r4, [sp, #16]
    uint64_t current_time  = Milliseconds();
   12324:	f7fe fe00 	bl	10f28 <Milliseconds()>
   12328:	e9cd 0108 	strd	r0, r1, [sp, #32]
    uint32_t multiplier_value =
        CalculatePll(input_frequency, desired_speed_in_mhz);
   1232c:	f8bd 2000 	ldrh.w	r2, [sp]
   12330:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   12334:	4619      	mov	r1, r3
   12336:	9801      	ldr	r0, [sp, #4]
   12338:	f7ff ff56 	bl	121e8 <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)>
   1233c:	9003      	str	r0, [sp, #12]
    uint32_t actual_speed =
        static_cast<uint32_t>(input_frequency) * multiplier_value;
   1233e:	f8bd 2002 	ldrh.w	r2, [sp, #2]
    uint32_t actual_speed =
   12342:	9b03      	ldr	r3, [sp, #12]
   12344:	fb02 f303 	mul.w	r3, r2, r3
   12348:	9307      	str	r3, [sp, #28]
    // TO DO: use registers to retreive values
    SelectOscillatorSource(OscillatorSource::kIrc);
   1234a:	2100      	movs	r1, #0
   1234c:	9801      	ldr	r0, [sp, #4]
   1234e:	f7ff fee9 	bl	12124 <Lpc40xxSystemController::SelectOscillatorSource(Lpc40xxSystemController::OscillatorSource)>
    SelectMainClockSource(MainClockSource::kBaseClock);
   12352:	2100      	movs	r1, #0
   12354:	9801      	ldr	r0, [sp, #4]
   12356:	f7ff feff 	bl	12158 <Lpc40xxSystemController::SelectMainClockSource(Lpc40xxSystemController::MainClockSource)>
    SelectUsbClockSource(UsbSource::kBaseClock);
   1235a:	2100      	movs	r1, #0
   1235c:	9801      	ldr	r0, [sp, #4]
   1235e:	f7ff ff13 	bl	12188 <Lpc40xxSystemController::SelectUsbClockSource(Lpc40xxSystemController::UsbSource)>
    SelectSpifiClockSource(SpifiSource::kBaseClock);
   12362:	2100      	movs	r1, #0
   12364:	9801      	ldr	r0, [sp, #4]
   12366:	f7ff ff27 	bl	121b8 <Lpc40xxSystemController::SelectSpifiClockSource(Lpc40xxSystemController::SpifiSource)>
    // must subtract 1 from multiplier value as specified in datasheet
    system_controller->PLL0CFG =
        (system_controller->PLL0CFG & ~kClearPllMultiplier) |
   1236a:	4b3a      	ldr	r3, [pc, #232]	; (12454 <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0x15c>)
   1236c:	681b      	ldr	r3, [r3, #0]
   1236e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   12372:	f023 011f 	bic.w	r1, r3, #31
        (multiplier_value - 1);
   12376:	9b03      	ldr	r3, [sp, #12]
   12378:	1e5a      	subs	r2, r3, #1
    system_controller->PLL0CFG =
   1237a:	4b36      	ldr	r3, [pc, #216]	; (12454 <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0x15c>)
   1237c:	681b      	ldr	r3, [r3, #0]
        (system_controller->PLL0CFG & ~kClearPllMultiplier) |
   1237e:	430a      	orrs	r2, r1
    system_controller->PLL0CFG =
   12380:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    system_controller->PLL0CFG =
        (system_controller->PLL0CFG & ~kClearPllDivider) | (divider_value << 5);
   12384:	4b33      	ldr	r3, [pc, #204]	; (12454 <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0x15c>)
   12386:	681b      	ldr	r3, [r3, #0]
   12388:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   1238c:	f023 0260 	bic.w	r2, r3, #96	; 0x60
   12390:	f8bd 301a 	ldrh.w	r3, [sp, #26]
   12394:	015b      	lsls	r3, r3, #5
   12396:	4619      	mov	r1, r3
    system_controller->PLL0CFG =
   12398:	4b2e      	ldr	r3, [pc, #184]	; (12454 <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0x15c>)
   1239a:	681b      	ldr	r3, [r3, #0]
        (system_controller->PLL0CFG & ~kClearPllDivider) | (divider_value << 5);
   1239c:	430a      	orrs	r2, r1
    system_controller->PLL0CFG =
   1239e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    system_controller->PLL0CON |= kEnablePll;
   123a2:	4b2c      	ldr	r3, [pc, #176]	; (12454 <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0x15c>)
   123a4:	681b      	ldr	r3, [r3, #0]
   123a6:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
   123aa:	4b2a      	ldr	r3, [pc, #168]	; (12454 <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0x15c>)
   123ac:	681b      	ldr	r3, [r3, #0]
   123ae:	f042 0201 	orr.w	r2, r2, #1
   123b2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    // nessecary feed sequence to ensure the changes are intentional
    system_controller->PLL0FEED = 0xAA;
   123b6:	4b27      	ldr	r3, [pc, #156]	; (12454 <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0x15c>)
   123b8:	681b      	ldr	r3, [r3, #0]
   123ba:	22aa      	movs	r2, #170	; 0xaa
   123bc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    system_controller->PLL0FEED = 0x55;
   123c0:	4b24      	ldr	r3, [pc, #144]	; (12454 <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0x15c>)
   123c2:	681b      	ldr	r3, [r3, #0]
   123c4:	2255      	movs	r2, #85	; 0x55
   123c6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    while (!(system_controller->PLL0STAT >> kPlock & 1) &&
   123ca:	4b22      	ldr	r3, [pc, #136]	; (12454 <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0x15c>)
   123cc:	681b      	ldr	r3, [r3, #0]
   123ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   123d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
   123d6:	2b00      	cmp	r3, #0
   123d8:	d109      	bne.n	123ee <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0xf6>
   123da:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
   123de:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
   123e2:	42a2      	cmp	r2, r4
   123e4:	bf08      	it	eq
   123e6:	4299      	cmpeq	r1, r3
   123e8:	d201      	bcs.n	123ee <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0xf6>
   123ea:	2301      	movs	r3, #1
   123ec:	e000      	b.n	123f0 <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0xf8>
   123ee:	2300      	movs	r3, #0
   123f0:	2b00      	cmp	r3, #0
   123f2:	d004      	beq.n	123fe <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0x106>
           (current_time < timeout_time))
    {
      current_time = Milliseconds();
   123f4:	f7fe fd98 	bl	10f28 <Milliseconds()>
   123f8:	e9cd 0108 	strd	r0, r1, [sp, #32]
    while (!(system_controller->PLL0STAT >> kPlock & 1) &&
   123fc:	e7e5      	b.n	123ca <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0xd2>
    }
    if (!(system_controller->PLL0STAT >> kPlock & 1) &&
   123fe:	4b15      	ldr	r3, [pc, #84]	; (12454 <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0x15c>)
   12400:	681b      	ldr	r3, [r3, #0]
   12402:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   12406:	f403 6380 	and.w	r3, r3, #1024	; 0x400
   1240a:	2b00      	cmp	r3, #0
   1240c:	d109      	bne.n	12422 <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0x12a>
   1240e:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
   12412:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
   12416:	42a2      	cmp	r2, r4
   12418:	bf08      	it	eq
   1241a:	4299      	cmpeq	r1, r3
   1241c:	d301      	bcc.n	12422 <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0x12a>
   1241e:	2301      	movs	r3, #1
   12420:	e000      	b.n	12424 <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0x12c>
   12422:	2300      	movs	r3, #0
   12424:	2b00      	cmp	r3, #0
   12426:	d00e      	beq.n	12446 <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0x14e>
        (current_time >= timeout_time))
    {
      SJ2_ASSERT_FATAL(false,
   12428:	f240 1343 	movw	r3, #323	; 0x143
   1242c:	4a0a      	ldr	r2, [pc, #40]	; (12458 <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0x160>)
   1242e:	490b      	ldr	r1, [pc, #44]	; (1245c <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0x164>)
   12430:	480b      	ldr	r0, [pc, #44]	; (12460 <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0x168>)
   12432:	f004 faf7 	bl	16a24 <printf>
   12436:	480b      	ldr	r0, [pc, #44]	; (12464 <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0x16c>)
   12438:	f003 f868 	bl	1550c <puts>
   1243c:	2100      	movs	r1, #0
   1243e:	2001      	movs	r0, #1
   12440:	f7fe fcda 	bl	10df8 <debug::PrintBacktrace(bool, void*)>
   12444:	e7fe      	b.n	12444 <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0x14c>
                       "PLL lock could not be established before timeout");
      actual_speed = kDefaultIRCFrequency;
    }
    return (actual_speed - desired_speed_in_mhz);
   12446:	f8bd 3000 	ldrh.w	r3, [sp]
   1244a:	9a07      	ldr	r2, [sp, #28]
   1244c:	1ad3      	subs	r3, r2, r3
  }
   1244e:	4618      	mov	r0, r3
   12450:	b00a      	add	sp, #40	; 0x28
   12452:	bd10      	pop	{r4, pc}
   12454:	1000006c 	.word	0x1000006c
   12458:	000190b4 	.word	0x000190b4
   1245c:	00018dac 	.word	0x00018dac
   12460:	00018b60 	.word	0x00018b60
   12464:	000189b0 	.word	0x000189b0

00012468 <Lpc40xxSystemController::SetCpuClockDivider(unsigned char)>:
                       "PLL lock could not be established before timeout");
    }
    return (actual_speed - desired_speed_in_mhz);
  }

  void SetCpuClockDivider(uint8_t cpu_divider)
   12468:	b500      	push	{lr}
   1246a:	b083      	sub	sp, #12
   1246c:	9001      	str	r0, [sp, #4]
   1246e:	460b      	mov	r3, r1
   12470:	f88d 3003 	strb.w	r3, [sp, #3]
  {
    SJ2_ASSERT_FATAL(cpu_divider < 32, "Divider mustn't exceed 32");
   12474:	f89d 3003 	ldrb.w	r3, [sp, #3]
   12478:	2b1f      	cmp	r3, #31
   1247a:	d90e      	bls.n	1249a <Lpc40xxSystemController::SetCpuClockDivider(unsigned char)+0x32>
   1247c:	f240 136f 	movw	r3, #367	; 0x16f
   12480:	4a0e      	ldr	r2, [pc, #56]	; (124bc <Lpc40xxSystemController::SetCpuClockDivider(unsigned char)+0x54>)
   12482:	490f      	ldr	r1, [pc, #60]	; (124c0 <Lpc40xxSystemController::SetCpuClockDivider(unsigned char)+0x58>)
   12484:	480f      	ldr	r0, [pc, #60]	; (124c4 <Lpc40xxSystemController::SetCpuClockDivider(unsigned char)+0x5c>)
   12486:	f004 facd 	bl	16a24 <printf>
   1248a:	480f      	ldr	r0, [pc, #60]	; (124c8 <Lpc40xxSystemController::SetCpuClockDivider(unsigned char)+0x60>)
   1248c:	f003 f83e 	bl	1550c <puts>
   12490:	2100      	movs	r1, #0
   12492:	2001      	movs	r0, #1
   12494:	f7fe fcb0 	bl	10df8 <debug::PrintBacktrace(bool, void*)>
   12498:	e7fe      	b.n	12498 <Lpc40xxSystemController::SetCpuClockDivider(unsigned char)+0x30>
    system_controller->CCLKSEL =
        (system_controller->CCLKSEL & ~kClearCpuDivider) | cpu_divider;
   1249a:	4b0c      	ldr	r3, [pc, #48]	; (124cc <Lpc40xxSystemController::SetCpuClockDivider(unsigned char)+0x64>)
   1249c:	681b      	ldr	r3, [r3, #0]
   1249e:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   124a2:	f023 011f 	bic.w	r1, r3, #31
   124a6:	f89d 2003 	ldrb.w	r2, [sp, #3]
    system_controller->CCLKSEL =
   124aa:	4b08      	ldr	r3, [pc, #32]	; (124cc <Lpc40xxSystemController::SetCpuClockDivider(unsigned char)+0x64>)
   124ac:	681b      	ldr	r3, [r3, #0]
        (system_controller->CCLKSEL & ~kClearCpuDivider) | cpu_divider;
   124ae:	430a      	orrs	r2, r1
    system_controller->CCLKSEL =
   124b0:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
  }
   124b4:	bf00      	nop
   124b6:	b003      	add	sp, #12
   124b8:	f85d fb04 	ldr.w	pc, [sp], #4
   124bc:	0001916c 	.word	0x0001916c
   124c0:	00018dc4 	.word	0x00018dc4
   124c4:	00018c08 	.word	0x00018c08
   124c8:	000189b0 	.word	0x000189b0
   124cc:	1000006c 	.word	0x1000006c

000124d0 <Lpc40xxSystemController::SetEmcClockDivider(Lpc40xxSystemController::EmcDivider)>:

  void SetEmcClockDivider(EmcDivider emc_divider)
   124d0:	b082      	sub	sp, #8
   124d2:	9001      	str	r0, [sp, #4]
   124d4:	460b      	mov	r3, r1
   124d6:	f88d 3003 	strb.w	r3, [sp, #3]
  {
    system_controller->EMCCLKSEL =
        (system_controller->EMCCLKSEL & ~kClearEmcDivider) |
   124da:	4b08      	ldr	r3, [pc, #32]	; (124fc <Lpc40xxSystemController::SetEmcClockDivider(Lpc40xxSystemController::EmcDivider)+0x2c>)
   124dc:	681b      	ldr	r3, [r3, #0]
   124de:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   124e2:	f023 0101 	bic.w	r1, r3, #1
        static_cast<uint8_t>(emc_divider);
   124e6:	f89d 2003 	ldrb.w	r2, [sp, #3]
    system_controller->EMCCLKSEL =
   124ea:	4b04      	ldr	r3, [pc, #16]	; (124fc <Lpc40xxSystemController::SetEmcClockDivider(Lpc40xxSystemController::EmcDivider)+0x2c>)
   124ec:	681b      	ldr	r3, [r3, #0]
        (system_controller->EMCCLKSEL & ~kClearEmcDivider) |
   124ee:	430a      	orrs	r2, r1
    system_controller->EMCCLKSEL =
   124f0:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }
   124f4:	bf00      	nop
   124f6:	b002      	add	sp, #8
   124f8:	4770      	bx	lr
   124fa:	bf00      	nop
   124fc:	1000006c 	.word	0x1000006c

00012500 <int util::Value<Ssp::Peripheral, int>(Ssp::Peripheral)>:
constexpr Type Value(Enum enum_type_value)
   12500:	b530      	push	{r4, r5, lr}
   12502:	b083      	sub	sp, #12
   12504:	4675      	mov	r5, lr
   12506:	9001      	str	r0, [sp, #4]
   12508:	462b      	mov	r3, r5
   1250a:	4619      	mov	r1, r3
   1250c:	4806      	ldr	r0, [pc, #24]	; (12528 <int util::Value<Ssp::Peripheral, int>(Ssp::Peripheral)+0x28>)
   1250e:	f003 f82d 	bl	1556c <__cyg_profile_func_enter>
  return static_cast<Type>(enum_type_value);
   12512:	9c01      	ldr	r4, [sp, #4]
   12514:	462b      	mov	r3, r5
   12516:	4619      	mov	r1, r3
   12518:	4803      	ldr	r0, [pc, #12]	; (12528 <int util::Value<Ssp::Peripheral, int>(Ssp::Peripheral)+0x28>)
   1251a:	f003 f83b 	bl	15594 <__cyg_profile_func_exit>
   1251e:	4623      	mov	r3, r4
}
   12520:	4618      	mov	r0, r3
   12522:	b003      	add	sp, #12
   12524:	bd30      	pop	{r4, r5, pc}
   12526:	bf00      	nop
   12528:	00012501 	.word	0x00012501

0001252c <SspInterface::SspInterface()>:
#include "L0_LowLevel/system_controller.hpp"
#include "L1_Drivers/pin.hpp"
#include "utility/bit.hpp"
#include "utility/enum.hpp"

class SspInterface
   1252c:	b530      	push	{r4, r5, lr}
   1252e:	b083      	sub	sp, #12
   12530:	4675      	mov	r5, lr
   12532:	9001      	str	r0, [sp, #4]
   12534:	462b      	mov	r3, r5
   12536:	4619      	mov	r1, r3
   12538:	4807      	ldr	r0, [pc, #28]	; (12558 <SspInterface::SspInterface()+0x2c>)
   1253a:	f003 f817 	bl	1556c <__cyg_profile_func_enter>
   1253e:	4a07      	ldr	r2, [pc, #28]	; (1255c <SspInterface::SspInterface()+0x30>)
   12540:	9b01      	ldr	r3, [sp, #4]
   12542:	601a      	str	r2, [r3, #0]
   12544:	9c01      	ldr	r4, [sp, #4]
   12546:	462b      	mov	r3, r5
   12548:	4619      	mov	r1, r3
   1254a:	4803      	ldr	r0, [pc, #12]	; (12558 <SspInterface::SspInterface()+0x2c>)
   1254c:	f003 f822 	bl	15594 <__cyg_profile_func_exit>
   12550:	4623      	mov	r3, r4
   12552:	4618      	mov	r0, r3
   12554:	b003      	add	sp, #12
   12556:	bd30      	pop	{r4, r5, pc}
   12558:	0001252d 	.word	0x0001252d
   1255c:	00018eec 	.word	0x00018eec

00012560 <PinInterface::PinInterface(PinInterface const&)>:
class PinInterface
   12560:	b530      	push	{r4, r5, lr}
   12562:	b083      	sub	sp, #12
   12564:	4675      	mov	r5, lr
   12566:	9001      	str	r0, [sp, #4]
   12568:	9100      	str	r1, [sp, #0]
   1256a:	462b      	mov	r3, r5
   1256c:	4619      	mov	r1, r3
   1256e:	4808      	ldr	r0, [pc, #32]	; (12590 <PinInterface::PinInterface(PinInterface const&)+0x30>)
   12570:	f002 fffc 	bl	1556c <__cyg_profile_func_enter>
   12574:	4a07      	ldr	r2, [pc, #28]	; (12594 <PinInterface::PinInterface(PinInterface const&)+0x34>)
   12576:	9b01      	ldr	r3, [sp, #4]
   12578:	601a      	str	r2, [r3, #0]
   1257a:	9c01      	ldr	r4, [sp, #4]
   1257c:	462b      	mov	r3, r5
   1257e:	4619      	mov	r1, r3
   12580:	4803      	ldr	r0, [pc, #12]	; (12590 <PinInterface::PinInterface(PinInterface const&)+0x30>)
   12582:	f003 f807 	bl	15594 <__cyg_profile_func_exit>
   12586:	4623      	mov	r3, r4
   12588:	4618      	mov	r0, r3
   1258a:	b003      	add	sp, #12
   1258c:	bd30      	pop	{r4, r5, pc}
   1258e:	bf00      	nop
   12590:	00012561 	.word	0x00012561
   12594:	00019028 	.word	0x00019028

00012598 <Pin::Pin(Pin const&)>:
class Pin : public PinInterface
   12598:	b530      	push	{r4, r5, lr}
   1259a:	b083      	sub	sp, #12
   1259c:	4675      	mov	r5, lr
   1259e:	9001      	str	r0, [sp, #4]
   125a0:	9100      	str	r1, [sp, #0]
   125a2:	462b      	mov	r3, r5
   125a4:	4619      	mov	r1, r3
   125a6:	480f      	ldr	r0, [pc, #60]	; (125e4 <Pin::Pin(Pin const&)+0x4c>)
   125a8:	f002 ffe0 	bl	1556c <__cyg_profile_func_enter>
   125ac:	9b01      	ldr	r3, [sp, #4]
   125ae:	9a00      	ldr	r2, [sp, #0]
   125b0:	4611      	mov	r1, r2
   125b2:	4618      	mov	r0, r3
   125b4:	f7ff ffd4 	bl	12560 <PinInterface::PinInterface(PinInterface const&)>
   125b8:	4a0b      	ldr	r2, [pc, #44]	; (125e8 <Pin::Pin(Pin const&)+0x50>)
   125ba:	9b01      	ldr	r3, [sp, #4]
   125bc:	601a      	str	r2, [r3, #0]
   125be:	9b00      	ldr	r3, [sp, #0]
   125c0:	791a      	ldrb	r2, [r3, #4]
   125c2:	9b01      	ldr	r3, [sp, #4]
   125c4:	711a      	strb	r2, [r3, #4]
   125c6:	9b00      	ldr	r3, [sp, #0]
   125c8:	795a      	ldrb	r2, [r3, #5]
   125ca:	9b01      	ldr	r3, [sp, #4]
   125cc:	715a      	strb	r2, [r3, #5]
   125ce:	9c01      	ldr	r4, [sp, #4]
   125d0:	462b      	mov	r3, r5
   125d2:	4619      	mov	r1, r3
   125d4:	4803      	ldr	r0, [pc, #12]	; (125e4 <Pin::Pin(Pin const&)+0x4c>)
   125d6:	f002 ffdd 	bl	15594 <__cyg_profile_func_exit>
   125da:	4623      	mov	r3, r4
   125dc:	4618      	mov	r0, r3
   125de:	b003      	add	sp, #12
   125e0:	bd30      	pop	{r4, r5, pc}
   125e2:	bf00      	nop
   125e4:	00012599 	.word	0x00012599
   125e8:	00018fec 	.word	0x00018fec

000125ec <Ssp::Ssp(Ssp::Peripheral)>:
        pssp_(Peripheral::kSsp0)
  {
  }

  /// User modified constructor. Must be followed by Set functions.
  explicit constexpr Ssp(Peripheral set_pssp)
   125ec:	b530      	push	{r4, r5, lr}
   125ee:	b083      	sub	sp, #12
   125f0:	4675      	mov	r5, lr
   125f2:	9001      	str	r0, [sp, #4]
   125f4:	9100      	str	r1, [sp, #0]
   125f6:	462b      	mov	r3, r5
   125f8:	4619      	mov	r1, r3
   125fa:	4831      	ldr	r0, [pc, #196]	; (126c0 <Ssp::Ssp(Ssp::Peripheral)+0xd4>)
   125fc:	f002 ffb6 	bl	1556c <__cyg_profile_func_enter>
        miso_(&miso_pin_),
        sck_(&sck_pin_),
        mosi_pin_(kSspPinMatrix[util::Value(set_pssp)][MatrixLookup::kMosi]),
        miso_pin_(kSspPinMatrix[util::Value(set_pssp)][MatrixLookup::kMiso]),
        sck_pin_(kSspPinMatrix[util::Value(set_pssp)][MatrixLookup::kSck]),
        pssp_(set_pssp)
   12600:	9b01      	ldr	r3, [sp, #4]
   12602:	4618      	mov	r0, r3
   12604:	f7ff ff92 	bl	1252c <SspInterface::SspInterface()>
   12608:	9b01      	ldr	r3, [sp, #4]
   1260a:	3304      	adds	r3, #4
   1260c:	4618      	mov	r0, r3
   1260e:	f7ff fc9d 	bl	11f4c <Lpc40xxSystemController::Lpc40xxSystemController()>
   12612:	4a2c      	ldr	r2, [pc, #176]	; (126c4 <Ssp::Ssp(Ssp::Peripheral)+0xd8>)
   12614:	9b01      	ldr	r3, [sp, #4]
   12616:	601a      	str	r2, [r3, #0]
   12618:	4a2b      	ldr	r2, [pc, #172]	; (126c8 <Ssp::Ssp(Ssp::Peripheral)+0xdc>)
   1261a:	9b01      	ldr	r3, [sp, #4]
   1261c:	605a      	str	r2, [r3, #4]
   1261e:	9b01      	ldr	r3, [sp, #4]
   12620:	f103 0214 	add.w	r2, r3, #20
   12624:	9b01      	ldr	r3, [sp, #4]
   12626:	609a      	str	r2, [r3, #8]
   12628:	9b01      	ldr	r3, [sp, #4]
   1262a:	f103 021c 	add.w	r2, r3, #28
   1262e:	9b01      	ldr	r3, [sp, #4]
   12630:	60da      	str	r2, [r3, #12]
   12632:	9b01      	ldr	r3, [sp, #4]
   12634:	f103 0224 	add.w	r2, r3, #36	; 0x24
   12638:	9b01      	ldr	r3, [sp, #4]
   1263a:	611a      	str	r2, [r3, #16]
   1263c:	9b01      	ldr	r3, [sp, #4]
   1263e:	f103 0414 	add.w	r4, r3, #20
        mosi_pin_(kSspPinMatrix[util::Value(set_pssp)][MatrixLookup::kMosi]),
   12642:	9800      	ldr	r0, [sp, #0]
   12644:	f7ff ff5c 	bl	12500 <int util::Value<Ssp::Peripheral, int>(Ssp::Peripheral)>
   12648:	4602      	mov	r2, r0
        pssp_(set_pssp)
   1264a:	4613      	mov	r3, r2
   1264c:	005b      	lsls	r3, r3, #1
   1264e:	4413      	add	r3, r2
   12650:	00db      	lsls	r3, r3, #3
   12652:	4a1e      	ldr	r2, [pc, #120]	; (126cc <Ssp::Ssp(Ssp::Peripheral)+0xe0>)
   12654:	4413      	add	r3, r2
   12656:	4619      	mov	r1, r3
   12658:	4620      	mov	r0, r4
   1265a:	f7ff ff9d 	bl	12598 <Pin::Pin(Pin const&)>
   1265e:	9b01      	ldr	r3, [sp, #4]
   12660:	f103 041c 	add.w	r4, r3, #28
        miso_pin_(kSspPinMatrix[util::Value(set_pssp)][MatrixLookup::kMiso]),
   12664:	9800      	ldr	r0, [sp, #0]
   12666:	f7ff ff4b 	bl	12500 <int util::Value<Ssp::Peripheral, int>(Ssp::Peripheral)>
   1266a:	4602      	mov	r2, r0
        pssp_(set_pssp)
   1266c:	4613      	mov	r3, r2
   1266e:	005b      	lsls	r3, r3, #1
   12670:	4413      	add	r3, r2
   12672:	00db      	lsls	r3, r3, #3
   12674:	3308      	adds	r3, #8
   12676:	4a15      	ldr	r2, [pc, #84]	; (126cc <Ssp::Ssp(Ssp::Peripheral)+0xe0>)
   12678:	4413      	add	r3, r2
   1267a:	4619      	mov	r1, r3
   1267c:	4620      	mov	r0, r4
   1267e:	f7ff ff8b 	bl	12598 <Pin::Pin(Pin const&)>
   12682:	9b01      	ldr	r3, [sp, #4]
   12684:	f103 0424 	add.w	r4, r3, #36	; 0x24
        sck_pin_(kSspPinMatrix[util::Value(set_pssp)][MatrixLookup::kSck]),
   12688:	9800      	ldr	r0, [sp, #0]
   1268a:	f7ff ff39 	bl	12500 <int util::Value<Ssp::Peripheral, int>(Ssp::Peripheral)>
   1268e:	4602      	mov	r2, r0
        pssp_(set_pssp)
   12690:	4613      	mov	r3, r2
   12692:	005b      	lsls	r3, r3, #1
   12694:	4413      	add	r3, r2
   12696:	00db      	lsls	r3, r3, #3
   12698:	3310      	adds	r3, #16
   1269a:	4a0c      	ldr	r2, [pc, #48]	; (126cc <Ssp::Ssp(Ssp::Peripheral)+0xe0>)
   1269c:	4413      	add	r3, r2
   1269e:	4619      	mov	r1, r3
   126a0:	4620      	mov	r0, r4
   126a2:	f7ff ff79 	bl	12598 <Pin::Pin(Pin const&)>
   126a6:	9b01      	ldr	r3, [sp, #4]
   126a8:	9a00      	ldr	r2, [sp, #0]
   126aa:	62da      	str	r2, [r3, #44]	; 0x2c
  {
  }
   126ac:	9c01      	ldr	r4, [sp, #4]
   126ae:	462b      	mov	r3, r5
   126b0:	4619      	mov	r1, r3
   126b2:	4803      	ldr	r0, [pc, #12]	; (126c0 <Ssp::Ssp(Ssp::Peripheral)+0xd4>)
   126b4:	f002 ff6e 	bl	15594 <__cyg_profile_func_exit>
   126b8:	4623      	mov	r3, r4
   126ba:	4618      	mov	r0, r3
   126bc:	b003      	add	sp, #12
   126be:	bd30      	pop	{r4, r5, pc}
   126c0:	000125ed 	.word	0x000125ed
   126c4:	00018ea0 	.word	0x00018ea0
   126c8:	00018ec8 	.word	0x00018ec8
   126cc:	00018de0 	.word	0x00018de0

000126d0 <Ssp::Initialize()>:
  }

  /// Powers on the peripheral, sets the peripheral clock, format, and data
  /// size, and enables the SSP pins for communication see and more.
  /// See page 601 of user manual UM10562 LPC408x/407x for more details.
  void Initialize() override
   126d0:	b570      	push	{r4, r5, r6, lr}
   126d2:	b086      	sub	sp, #24
   126d4:	4676      	mov	r6, lr
   126d6:	9001      	str	r0, [sp, #4]
   126d8:	4633      	mov	r3, r6
   126da:	4619      	mov	r1, r3
   126dc:	4830      	ldr	r0, [pc, #192]	; (127a0 <Ssp::Initialize()+0xd0>)
   126de:	f002 ff45 	bl	1556c <__cyg_profile_func_enter>
  {
    uint32_t pssp = util::Value(pssp_);
   126e2:	9b01      	ldr	r3, [sp, #4]
   126e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   126e6:	4618      	mov	r0, r3
   126e8:	f7ff ff0a 	bl	12500 <int util::Value<Ssp::Peripheral, int>(Ssp::Peripheral)>
   126ec:	4603      	mov	r3, r0
   126ee:	9305      	str	r3, [sp, #20]
    // Power up peripheral
    PowerUpPeripheral(kPowerBit[pssp]);
   126f0:	9b01      	ldr	r3, [sp, #4]
   126f2:	1d18      	adds	r0, r3, #4
   126f4:	9b01      	ldr	r3, [sp, #4]
   126f6:	685b      	ldr	r3, [r3, #4]
   126f8:	3314      	adds	r3, #20
   126fa:	681b      	ldr	r3, [r3, #0]
   126fc:	9a05      	ldr	r2, [sp, #20]
   126fe:	0092      	lsls	r2, r2, #2
   12700:	4928      	ldr	r1, [pc, #160]	; (127a4 <Ssp::Initialize()+0xd4>)
   12702:	440a      	add	r2, r1
   12704:	4611      	mov	r1, r2
   12706:	4798      	blx	r3
    // Enable SSP pins
    mosi_->SetPinFunction(kPinSelect[pssp]);
   12708:	9b01      	ldr	r3, [sp, #4]
   1270a:	6898      	ldr	r0, [r3, #8]
   1270c:	9b01      	ldr	r3, [sp, #4]
   1270e:	689b      	ldr	r3, [r3, #8]
   12710:	681b      	ldr	r3, [r3, #0]
   12712:	681b      	ldr	r3, [r3, #0]
   12714:	4924      	ldr	r1, [pc, #144]	; (127a8 <Ssp::Initialize()+0xd8>)
   12716:	9a05      	ldr	r2, [sp, #20]
   12718:	440a      	add	r2, r1
   1271a:	7812      	ldrb	r2, [r2, #0]
   1271c:	4611      	mov	r1, r2
   1271e:	4798      	blx	r3
    miso_->SetPinFunction(kPinSelect[pssp]);
   12720:	9b01      	ldr	r3, [sp, #4]
   12722:	68d8      	ldr	r0, [r3, #12]
   12724:	9b01      	ldr	r3, [sp, #4]
   12726:	68db      	ldr	r3, [r3, #12]
   12728:	681b      	ldr	r3, [r3, #0]
   1272a:	681b      	ldr	r3, [r3, #0]
   1272c:	491e      	ldr	r1, [pc, #120]	; (127a8 <Ssp::Initialize()+0xd8>)
   1272e:	9a05      	ldr	r2, [sp, #20]
   12730:	440a      	add	r2, r1
   12732:	7812      	ldrb	r2, [r2, #0]
   12734:	4611      	mov	r1, r2
   12736:	4798      	blx	r3
    sck_->SetPinFunction(kPinSelect[pssp]);
   12738:	9b01      	ldr	r3, [sp, #4]
   1273a:	6918      	ldr	r0, [r3, #16]
   1273c:	9b01      	ldr	r3, [sp, #4]
   1273e:	691b      	ldr	r3, [r3, #16]
   12740:	681b      	ldr	r3, [r3, #0]
   12742:	681b      	ldr	r3, [r3, #0]
   12744:	4918      	ldr	r1, [pc, #96]	; (127a8 <Ssp::Initialize()+0xd8>)
   12746:	9a05      	ldr	r2, [sp, #20]
   12748:	440a      	add	r2, r1
   1274a:	7812      	ldrb	r2, [r2, #0]
   1274c:	4611      	mov	r1, r2
   1274e:	4798      	blx	r3
    // Enable SSP
    ssp_registers[pssp]->CR1 = bit::Set(ssp_registers[pssp]->CR1, kSspEnable);
   12750:	4a16      	ldr	r2, [pc, #88]	; (127ac <Ssp::Initialize()+0xdc>)
   12752:	9b05      	ldr	r3, [sp, #20]
   12754:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12758:	685b      	ldr	r3, [r3, #4]
   1275a:	4914      	ldr	r1, [pc, #80]	; (127ac <Ssp::Initialize()+0xdc>)
   1275c:	9a05      	ldr	r2, [sp, #20]
   1275e:	f851 4022 	ldr.w	r4, [r1, r2, lsl #2]
   12762:	9304      	str	r3, [sp, #16]
   12764:	2301      	movs	r3, #1
   12766:	9303      	str	r3, [sp, #12]
   12768:	4633      	mov	r3, r6
   1276a:	4619      	mov	r1, r3
   1276c:	4810      	ldr	r0, [pc, #64]	; (127b0 <Ssp::Initialize()+0xe0>)
   1276e:	f002 fefd 	bl	1556c <__cyg_profile_func_enter>
[[gnu::always_inline]] [[nodiscard]]
constexpr T Set(T target, uint32_t position)
{
  static_assert(std::numeric_limits<T>::is_integer,
                "Set only accepts intergers.");
  return target | (1 << position);
   12772:	2201      	movs	r2, #1
   12774:	9b03      	ldr	r3, [sp, #12]
   12776:	fa02 f303 	lsl.w	r3, r2, r3
   1277a:	461a      	mov	r2, r3
   1277c:	9b04      	ldr	r3, [sp, #16]
   1277e:	ea42 0503 	orr.w	r5, r2, r3
   12782:	4633      	mov	r3, r6
   12784:	4619      	mov	r1, r3
   12786:	480a      	ldr	r0, [pc, #40]	; (127b0 <Ssp::Initialize()+0xe0>)
   12788:	f002 ff04 	bl	15594 <__cyg_profile_func_exit>
   1278c:	6065      	str	r5, [r4, #4]
   1278e:	4633      	mov	r3, r6
   12790:	4619      	mov	r1, r3
   12792:	4803      	ldr	r0, [pc, #12]	; (127a0 <Ssp::Initialize()+0xd0>)
   12794:	f002 fefe 	bl	15594 <__cyg_profile_func_exit>
  }
   12798:	bf00      	nop
   1279a:	b006      	add	sp, #24
   1279c:	bd70      	pop	{r4, r5, r6, pc}
   1279e:	bf00      	nop
   127a0:	000126d1 	.word	0x000126d1
   127a4:	00018e28 	.word	0x00018e28
   127a8:	00018ddc 	.word	0x00018ddc
   127ac:	10000074 	.word	0x10000074
   127b0:	00013869 	.word	0x00013869

000127b4 <Ssp::IsTransferRegBusy()>:

  /// Checks if the SSP controller is idle.
  /// @returns true if the controller is sending or receiving a data frame and
  /// false if it is idle.
  bool IsTransferRegBusy() override
   127b4:	b530      	push	{r4, r5, lr}
   127b6:	b085      	sub	sp, #20
   127b8:	4675      	mov	r5, lr
   127ba:	9001      	str	r0, [sp, #4]
   127bc:	462b      	mov	r3, r5
   127be:	4619      	mov	r1, r3
   127c0:	4817      	ldr	r0, [pc, #92]	; (12820 <Ssp::IsTransferRegBusy()+0x6c>)
   127c2:	f002 fed3 	bl	1556c <__cyg_profile_func_enter>
  {
    return (bit::Read(ssp_registers[util::Value(pssp_)]->SR, kDataLineIdleBit));
   127c6:	9b01      	ldr	r3, [sp, #4]
   127c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   127ca:	4618      	mov	r0, r3
   127cc:	f7ff fe98 	bl	12500 <int util::Value<Ssp::Peripheral, int>(Ssp::Peripheral)>
   127d0:	4602      	mov	r2, r0
   127d2:	4b14      	ldr	r3, [pc, #80]	; (12824 <Ssp::IsTransferRegBusy()+0x70>)
   127d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   127d8:	68db      	ldr	r3, [r3, #12]
   127da:	9303      	str	r3, [sp, #12]
   127dc:	2304      	movs	r3, #4
   127de:	9302      	str	r3, [sp, #8]
   127e0:	462b      	mov	r3, r5
   127e2:	4619      	mov	r1, r3
   127e4:	4810      	ldr	r0, [pc, #64]	; (12828 <Ssp::IsTransferRegBusy()+0x74>)
   127e6:	f002 fec1 	bl	1556c <__cyg_profile_func_enter>
[[gnu::always_inline]][[nodiscard]] constexpr bool Read(T target,
                                                        uint32_t position)
{
  static_assert(std::numeric_limits<T>::is_integer,
                "Read only accepts intergers.");
  return static_cast<bool>(target & (1 << position));
   127ea:	2201      	movs	r2, #1
   127ec:	9b02      	ldr	r3, [sp, #8]
   127ee:	fa02 f303 	lsl.w	r3, r2, r3
   127f2:	461a      	mov	r2, r3
   127f4:	9b03      	ldr	r3, [sp, #12]
   127f6:	4013      	ands	r3, r2
   127f8:	2b00      	cmp	r3, #0
   127fa:	bf14      	ite	ne
   127fc:	2301      	movne	r3, #1
   127fe:	2300      	moveq	r3, #0
   12800:	b2dc      	uxtb	r4, r3
   12802:	462b      	mov	r3, r5
   12804:	4619      	mov	r1, r3
   12806:	4808      	ldr	r0, [pc, #32]	; (12828 <Ssp::IsTransferRegBusy()+0x74>)
   12808:	f002 fec4 	bl	15594 <__cyg_profile_func_exit>
   1280c:	462b      	mov	r3, r5
   1280e:	4619      	mov	r1, r3
   12810:	4803      	ldr	r0, [pc, #12]	; (12820 <Ssp::IsTransferRegBusy()+0x6c>)
   12812:	f002 febf 	bl	15594 <__cyg_profile_func_exit>
   12816:	4623      	mov	r3, r4
  }
   12818:	4618      	mov	r0, r3
   1281a:	b005      	add	sp, #20
   1281c:	bd30      	pop	{r4, r5, pc}
   1281e:	bf00      	nop
   12820:	000127b5 	.word	0x000127b5
   12824:	10000074 	.word	0x10000074
   12828:	000138a5 	.word	0x000138a5

0001282c <Ssp::Transfer(unsigned short)>:
  /// data register. This functions for both transmitting and
  /// receiving data. It is recommended this region be protected
  /// by a mutex.
  /// @param data - information to be placed in data register
  /// @return - received data from external device
  uint16_t Transfer(uint16_t data) override
   1282c:	b530      	push	{r4, r5, lr}
   1282e:	b085      	sub	sp, #20
   12830:	4675      	mov	r5, lr
   12832:	9001      	str	r0, [sp, #4]
   12834:	460b      	mov	r3, r1
   12836:	f8ad 3002 	strh.w	r3, [sp, #2]
   1283a:	462b      	mov	r3, r5
   1283c:	4619      	mov	r1, r3
   1283e:	4814      	ldr	r0, [pc, #80]	; (12890 <Ssp::Transfer(unsigned short)+0x64>)
   12840:	f002 fe94 	bl	1556c <__cyg_profile_func_enter>
  {
    uint32_t pssp = util::Value(pssp_);
   12844:	9b01      	ldr	r3, [sp, #4]
   12846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   12848:	4618      	mov	r0, r3
   1284a:	f7ff fe59 	bl	12500 <int util::Value<Ssp::Peripheral, int>(Ssp::Peripheral)>
   1284e:	4603      	mov	r3, r0
   12850:	9303      	str	r3, [sp, #12]

    ssp_registers[pssp]->DR = data;
   12852:	4a10      	ldr	r2, [pc, #64]	; (12894 <Ssp::Transfer(unsigned short)+0x68>)
   12854:	9b03      	ldr	r3, [sp, #12]
   12856:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1285a:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   1285e:	609a      	str	r2, [r3, #8]
    while (IsTransferRegBusy())
   12860:	9801      	ldr	r0, [sp, #4]
   12862:	f7ff ffa7 	bl	127b4 <Ssp::IsTransferRegBusy()>
   12866:	4603      	mov	r3, r0
   12868:	2b00      	cmp	r3, #0
   1286a:	d001      	beq.n	12870 <Ssp::Transfer(unsigned short)+0x44>
    {
      continue;
   1286c:	bf00      	nop
    while (IsTransferRegBusy())
   1286e:	e7f7      	b.n	12860 <Ssp::Transfer(unsigned short)+0x34>
    }
    return static_cast<uint16_t>(ssp_registers[pssp]->DR);
   12870:	4a08      	ldr	r2, [pc, #32]	; (12894 <Ssp::Transfer(unsigned short)+0x68>)
   12872:	9b03      	ldr	r3, [sp, #12]
   12874:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12878:	689b      	ldr	r3, [r3, #8]
   1287a:	b29c      	uxth	r4, r3
   1287c:	462b      	mov	r3, r5
   1287e:	4619      	mov	r1, r3
   12880:	4803      	ldr	r0, [pc, #12]	; (12890 <Ssp::Transfer(unsigned short)+0x64>)
   12882:	f002 fe87 	bl	15594 <__cyg_profile_func_exit>
   12886:	4623      	mov	r3, r4
  }
   12888:	4618      	mov	r0, r3
   1288a:	b005      	add	sp, #20
   1288c:	bd30      	pop	{r4, r5, pc}
   1288e:	bf00      	nop
   12890:	0001282d 	.word	0x0001282d
   12894:	10000074 	.word	0x10000074

00012898 <Ssp::SetSpiMasterDefault()>:

  /// Sets up SSP peripheral as SPI master
  void SetSpiMasterDefault() override
   12898:	b510      	push	{r4, lr}
   1289a:	b086      	sub	sp, #24
   1289c:	4674      	mov	r4, lr
   1289e:	9003      	str	r0, [sp, #12]
   128a0:	4623      	mov	r3, r4
   128a2:	4619      	mov	r1, r3
   128a4:	4812      	ldr	r0, [pc, #72]	; (128f0 <Ssp::SetSpiMasterDefault()+0x58>)
   128a6:	f002 fe61 	bl	1556c <__cyg_profile_func_enter>
  {
    constexpr bool kHighPolarity  = 1;
   128aa:	2301      	movs	r3, #1
   128ac:	f88d 3017 	strb.w	r3, [sp, #23]
    constexpr bool kPhase0        = 0;
   128b0:	2300      	movs	r3, #0
   128b2:	f88d 3016 	strb.w	r3, [sp, #22]
    constexpr uint8_t kScrDivider = 0;
   128b6:	2300      	movs	r3, #0
   128b8:	f88d 3015 	strb.w	r3, [sp, #21]
    constexpr uint8_t kPrescaler  = SJ2_SYSTEM_CLOCK_RATE_MHZ;
   128bc:	2330      	movs	r3, #48	; 0x30
   128be:	f88d 3014 	strb.w	r3, [sp, #20]

    SetPeripheralMode(kMaster, kSpi, kEight);
   128c2:	2307      	movs	r3, #7
   128c4:	2200      	movs	r2, #0
   128c6:	2100      	movs	r1, #0
   128c8:	9803      	ldr	r0, [sp, #12]
   128ca:	f000 f85b 	bl	12984 <Ssp::SetPeripheralMode(SspInterface::MasterSlaveMode, SspInterface::FrameMode, SspInterface::DataSize)>
    SetClock(kHighPolarity, kPhase0, kScrDivider, kPrescaler);
   128ce:	2330      	movs	r3, #48	; 0x30
   128d0:	9300      	str	r3, [sp, #0]
   128d2:	2300      	movs	r3, #0
   128d4:	2200      	movs	r2, #0
   128d6:	2101      	movs	r1, #1
   128d8:	9803      	ldr	r0, [sp, #12]
   128da:	f000 fa09 	bl	12cf0 <Ssp::SetClock(bool, bool, unsigned char, unsigned char)>
   128de:	4623      	mov	r3, r4
   128e0:	4619      	mov	r1, r3
   128e2:	4803      	ldr	r0, [pc, #12]	; (128f0 <Ssp::SetSpiMasterDefault()+0x58>)
   128e4:	f002 fe56 	bl	15594 <__cyg_profile_func_exit>
  }
   128e8:	bf00      	nop
   128ea:	b006      	add	sp, #24
   128ec:	bd10      	pop	{r4, pc}
   128ee:	bf00      	nop
   128f0:	00012899 	.word	0x00012899

000128f4 <unsigned char util::Value<SspInterface::DataSize, unsigned char>(SspInterface::DataSize)>:
constexpr Type Value(Enum enum_type_value)
   128f4:	b530      	push	{r4, r5, lr}
   128f6:	b083      	sub	sp, #12
   128f8:	4675      	mov	r5, lr
   128fa:	4603      	mov	r3, r0
   128fc:	f88d 3007 	strb.w	r3, [sp, #7]
   12900:	462b      	mov	r3, r5
   12902:	4619      	mov	r1, r3
   12904:	4806      	ldr	r0, [pc, #24]	; (12920 <unsigned char util::Value<SspInterface::DataSize, unsigned char>(SspInterface::DataSize)+0x2c>)
   12906:	f002 fe31 	bl	1556c <__cyg_profile_func_enter>
  return static_cast<Type>(enum_type_value);
   1290a:	f89d 4007 	ldrb.w	r4, [sp, #7]
   1290e:	462b      	mov	r3, r5
   12910:	4619      	mov	r1, r3
   12912:	4803      	ldr	r0, [pc, #12]	; (12920 <unsigned char util::Value<SspInterface::DataSize, unsigned char>(SspInterface::DataSize)+0x2c>)
   12914:	f002 fe3e 	bl	15594 <__cyg_profile_func_exit>
   12918:	4623      	mov	r3, r4
}
   1291a:	4618      	mov	r0, r3
   1291c:	b003      	add	sp, #12
   1291e:	bd30      	pop	{r4, r5, pc}
   12920:	000128f5 	.word	0x000128f5

00012924 <unsigned char util::Value<SspInterface::FrameMode, unsigned char>(SspInterface::FrameMode)>:
constexpr Type Value(Enum enum_type_value)
   12924:	b530      	push	{r4, r5, lr}
   12926:	b083      	sub	sp, #12
   12928:	4675      	mov	r5, lr
   1292a:	4603      	mov	r3, r0
   1292c:	f88d 3007 	strb.w	r3, [sp, #7]
   12930:	462b      	mov	r3, r5
   12932:	4619      	mov	r1, r3
   12934:	4806      	ldr	r0, [pc, #24]	; (12950 <unsigned char util::Value<SspInterface::FrameMode, unsigned char>(SspInterface::FrameMode)+0x2c>)
   12936:	f002 fe19 	bl	1556c <__cyg_profile_func_enter>
  return static_cast<Type>(enum_type_value);
   1293a:	f89d 4007 	ldrb.w	r4, [sp, #7]
   1293e:	462b      	mov	r3, r5
   12940:	4619      	mov	r1, r3
   12942:	4803      	ldr	r0, [pc, #12]	; (12950 <unsigned char util::Value<SspInterface::FrameMode, unsigned char>(SspInterface::FrameMode)+0x2c>)
   12944:	f002 fe26 	bl	15594 <__cyg_profile_func_exit>
   12948:	4623      	mov	r3, r4
}
   1294a:	4618      	mov	r0, r3
   1294c:	b003      	add	sp, #12
   1294e:	bd30      	pop	{r4, r5, pc}
   12950:	00012925 	.word	0x00012925

00012954 <unsigned char util::Value<SspInterface::MasterSlaveMode, unsigned char>(SspInterface::MasterSlaveMode)>:
constexpr Type Value(Enum enum_type_value)
   12954:	b530      	push	{r4, r5, lr}
   12956:	b083      	sub	sp, #12
   12958:	4675      	mov	r5, lr
   1295a:	4603      	mov	r3, r0
   1295c:	f88d 3007 	strb.w	r3, [sp, #7]
   12960:	462b      	mov	r3, r5
   12962:	4619      	mov	r1, r3
   12964:	4806      	ldr	r0, [pc, #24]	; (12980 <unsigned char util::Value<SspInterface::MasterSlaveMode, unsigned char>(SspInterface::MasterSlaveMode)+0x2c>)
   12966:	f002 fe01 	bl	1556c <__cyg_profile_func_enter>
  return static_cast<Type>(enum_type_value);
   1296a:	f89d 4007 	ldrb.w	r4, [sp, #7]
   1296e:	462b      	mov	r3, r5
   12970:	4619      	mov	r1, r3
   12972:	4803      	ldr	r0, [pc, #12]	; (12980 <unsigned char util::Value<SspInterface::MasterSlaveMode, unsigned char>(SspInterface::MasterSlaveMode)+0x2c>)
   12974:	f002 fe0e 	bl	15594 <__cyg_profile_func_exit>
   12978:	4623      	mov	r3, r4
}
   1297a:	4618      	mov	r0, r3
   1297c:	b003      	add	sp, #12
   1297e:	bd30      	pop	{r4, r5, pc}
   12980:	00012955 	.word	0x00012955

00012984 <Ssp::SetPeripheralMode(SspInterface::MasterSlaveMode, SspInterface::FrameMode, SspInterface::DataSize)>:

  /// Sets the various modes for the Peripheral
  /// @param mode - master or slave mode
  /// @param frame - format for Peripheral data to use
  /// @param size - number of bits per frame
  void SetPeripheralMode(MasterSlaveMode mode, FrameMode frame,
   12984:	b570      	push	{r4, r5, r6, lr}
   12986:	b098      	sub	sp, #96	; 0x60
   12988:	4674      	mov	r4, lr
   1298a:	9001      	str	r0, [sp, #4]
   1298c:	4608      	mov	r0, r1
   1298e:	4611      	mov	r1, r2
   12990:	461a      	mov	r2, r3
   12992:	4603      	mov	r3, r0
   12994:	f88d 3003 	strb.w	r3, [sp, #3]
   12998:	460b      	mov	r3, r1
   1299a:	f88d 3002 	strb.w	r3, [sp, #2]
   1299e:	4613      	mov	r3, r2
   129a0:	f88d 3001 	strb.w	r3, [sp, #1]
   129a4:	4623      	mov	r3, r4
   129a6:	4619      	mov	r1, r3
   129a8:	4875      	ldr	r0, [pc, #468]	; (12b80 <Ssp::SetPeripheralMode(SspInterface::MasterSlaveMode, SspInterface::FrameMode, SspInterface::DataSize)+0x1fc>)
   129aa:	f002 fddf 	bl	1556c <__cyg_profile_func_enter>
                         DataSize size) override
  {
    uint32_t pssp = util::Value(pssp_);
   129ae:	9b01      	ldr	r3, [sp, #4]
   129b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   129b2:	4618      	mov	r0, r3
   129b4:	f7ff fda4 	bl	12500 <int util::Value<Ssp::Peripheral, int>(Ssp::Peripheral)>
   129b8:	4603      	mov	r3, r0
   129ba:	9317      	str	r3, [sp, #92]	; 0x5c
    // TODO(#371): Find a better alternative to powering up the peripheral for
    // every method.
    Ssp::PowerUpPeripheral(Ssp::kPowerBit[pssp]);
   129bc:	9b01      	ldr	r3, [sp, #4]
   129be:	1d18      	adds	r0, r3, #4
   129c0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   129c2:	009b      	lsls	r3, r3, #2
   129c4:	4a6f      	ldr	r2, [pc, #444]	; (12b84 <Ssp::SetPeripheralMode(SspInterface::MasterSlaveMode, SspInterface::FrameMode, SspInterface::DataSize)+0x200>)
   129c6:	4413      	add	r3, r2
   129c8:	4619      	mov	r1, r3
   129ca:	f7ff fb7b 	bl	120c4 <Lpc40xxSystemController::PowerUpPeripheral(SystemControllerInterface::PeripheralID const&)>
    if (frame == kMicro)
   129ce:	f89d 3002 	ldrb.w	r3, [sp, #2]
   129d2:	2b02      	cmp	r3, #2
   129d4:	d102      	bne.n	129dc <Ssp::SetPeripheralMode(SspInterface::MasterSlaveMode, SspInterface::FrameMode, SspInterface::DataSize)+0x58>
    {
      size = kEight;
   129d6:	2307      	movs	r3, #7
   129d8:	f88d 3001 	strb.w	r3, [sp, #1]
    }
    ssp_registers[pssp]->CR0 =
        bit::Insert(ssp_registers[pssp]->CR0, util::Value(size), kDataBit, 4);
   129dc:	4a6a      	ldr	r2, [pc, #424]	; (12b88 <Ssp::SetPeripheralMode(SspInterface::MasterSlaveMode, SspInterface::FrameMode, SspInterface::DataSize)+0x204>)
   129de:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   129e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   129e4:	681e      	ldr	r6, [r3, #0]
   129e6:	f89d 3001 	ldrb.w	r3, [sp, #1]
   129ea:	4618      	mov	r0, r3
   129ec:	f7ff ff82 	bl	128f4 <unsigned char util::Value<SspInterface::DataSize, unsigned char>(SspInterface::DataSize)>
   129f0:	4603      	mov	r3, r0
   129f2:	4619      	mov	r1, r3
    ssp_registers[pssp]->CR0 =
   129f4:	4a64      	ldr	r2, [pc, #400]	; (12b88 <Ssp::SetPeripheralMode(SspInterface::MasterSlaveMode, SspInterface::FrameMode, SspInterface::DataSize)+0x204>)
   129f6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   129f8:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
   129fc:	9608      	str	r6, [sp, #32]
   129fe:	460b      	mov	r3, r1
   12a00:	f88d 301f 	strb.w	r3, [sp, #31]
   12a04:	2300      	movs	r3, #0
   12a06:	9306      	str	r3, [sp, #24]
   12a08:	2304      	movs	r3, #4
   12a0a:	9305      	str	r3, [sp, #20]
   12a0c:	4623      	mov	r3, r4
   12a0e:	4619      	mov	r1, r3
   12a10:	485e      	ldr	r0, [pc, #376]	; (12b8c <Ssp::SetPeripheralMode(SspInterface::MasterSlaveMode, SspInterface::FrameMode, SspInterface::DataSize)+0x208>)
   12a12:	f002 fdab 	bl	1556c <__cyg_profile_func_enter>
  constexpr UnsignedT kFieldOfOnes = GenerateFieldOfOnes<T>();
   12a16:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   12a1a:	9304      	str	r3, [sp, #16]
  constexpr size_t kTargetWidth     = sizeof(T) * 8;
   12a1c:	2320      	movs	r3, #32
   12a1e:	9303      	str	r3, [sp, #12]
  UnsignedT mask   = kFieldOfOnes >> (kTargetWidth - width);
   12a20:	9b05      	ldr	r3, [sp, #20]
   12a22:	f1c3 0320 	rsb	r3, r3, #32
   12a26:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   12a2a:	fa22 f303 	lsr.w	r3, r2, r3
   12a2e:	9302      	str	r3, [sp, #8]
  target &= ~(mask << position);
   12a30:	9a02      	ldr	r2, [sp, #8]
   12a32:	9b06      	ldr	r3, [sp, #24]
   12a34:	fa02 f303 	lsl.w	r3, r2, r3
   12a38:	43db      	mvns	r3, r3
   12a3a:	9a08      	ldr	r2, [sp, #32]
   12a3c:	4013      	ands	r3, r2
   12a3e:	9308      	str	r3, [sp, #32]
  target |= (value & mask) << position;
   12a40:	f89d 201f 	ldrb.w	r2, [sp, #31]
   12a44:	9b02      	ldr	r3, [sp, #8]
   12a46:	401a      	ands	r2, r3
   12a48:	9b06      	ldr	r3, [sp, #24]
   12a4a:	fa02 f303 	lsl.w	r3, r2, r3
   12a4e:	9a08      	ldr	r2, [sp, #32]
   12a50:	4313      	orrs	r3, r2
   12a52:	9308      	str	r3, [sp, #32]
  return target;
   12a54:	9e08      	ldr	r6, [sp, #32]
   12a56:	4623      	mov	r3, r4
   12a58:	4619      	mov	r1, r3
   12a5a:	484c      	ldr	r0, [pc, #304]	; (12b8c <Ssp::SetPeripheralMode(SspInterface::MasterSlaveMode, SspInterface::FrameMode, SspInterface::DataSize)+0x208>)
   12a5c:	f002 fd9a 	bl	15594 <__cyg_profile_func_exit>
   12a60:	602e      	str	r6, [r5, #0]
    ssp_registers[pssp]->CR0 =
        bit::Insert(ssp_registers[pssp]->CR0, util::Value(frame), kFrameBit, 2);
   12a62:	4a49      	ldr	r2, [pc, #292]	; (12b88 <Ssp::SetPeripheralMode(SspInterface::MasterSlaveMode, SspInterface::FrameMode, SspInterface::DataSize)+0x204>)
   12a64:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   12a66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12a6a:	681e      	ldr	r6, [r3, #0]
   12a6c:	f89d 3002 	ldrb.w	r3, [sp, #2]
   12a70:	4618      	mov	r0, r3
   12a72:	f7ff ff57 	bl	12924 <unsigned char util::Value<SspInterface::FrameMode, unsigned char>(SspInterface::FrameMode)>
   12a76:	4603      	mov	r3, r0
   12a78:	4619      	mov	r1, r3
    ssp_registers[pssp]->CR0 =
   12a7a:	4a43      	ldr	r2, [pc, #268]	; (12b88 <Ssp::SetPeripheralMode(SspInterface::MasterSlaveMode, SspInterface::FrameMode, SspInterface::DataSize)+0x204>)
   12a7c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   12a7e:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
   12a82:	960f      	str	r6, [sp, #60]	; 0x3c
   12a84:	460b      	mov	r3, r1
   12a86:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
   12a8a:	2304      	movs	r3, #4
   12a8c:	930d      	str	r3, [sp, #52]	; 0x34
   12a8e:	2302      	movs	r3, #2
   12a90:	930c      	str	r3, [sp, #48]	; 0x30
   12a92:	4623      	mov	r3, r4
   12a94:	4619      	mov	r1, r3
   12a96:	483d      	ldr	r0, [pc, #244]	; (12b8c <Ssp::SetPeripheralMode(SspInterface::MasterSlaveMode, SspInterface::FrameMode, SspInterface::DataSize)+0x208>)
   12a98:	f002 fd68 	bl	1556c <__cyg_profile_func_enter>
  constexpr UnsignedT kFieldOfOnes = GenerateFieldOfOnes<T>();
   12a9c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   12aa0:	930b      	str	r3, [sp, #44]	; 0x2c
  constexpr size_t kTargetWidth     = sizeof(T) * 8;
   12aa2:	2320      	movs	r3, #32
   12aa4:	930a      	str	r3, [sp, #40]	; 0x28
  UnsignedT mask   = kFieldOfOnes >> (kTargetWidth - width);
   12aa6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   12aa8:	f1c3 0320 	rsb	r3, r3, #32
   12aac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   12ab0:	fa22 f303 	lsr.w	r3, r2, r3
   12ab4:	9309      	str	r3, [sp, #36]	; 0x24
  target &= ~(mask << position);
   12ab6:	9a09      	ldr	r2, [sp, #36]	; 0x24
   12ab8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   12aba:	fa02 f303 	lsl.w	r3, r2, r3
   12abe:	43db      	mvns	r3, r3
   12ac0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   12ac2:	4013      	ands	r3, r2
   12ac4:	930f      	str	r3, [sp, #60]	; 0x3c
  target |= (value & mask) << position;
   12ac6:	f89d 203b 	ldrb.w	r2, [sp, #59]	; 0x3b
   12aca:	9b09      	ldr	r3, [sp, #36]	; 0x24
   12acc:	401a      	ands	r2, r3
   12ace:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   12ad0:	fa02 f303 	lsl.w	r3, r2, r3
   12ad4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   12ad6:	4313      	orrs	r3, r2
   12ad8:	930f      	str	r3, [sp, #60]	; 0x3c
  return target;
   12ada:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
   12adc:	4623      	mov	r3, r4
   12ade:	4619      	mov	r1, r3
   12ae0:	482a      	ldr	r0, [pc, #168]	; (12b8c <Ssp::SetPeripheralMode(SspInterface::MasterSlaveMode, SspInterface::FrameMode, SspInterface::DataSize)+0x208>)
   12ae2:	f002 fd57 	bl	15594 <__cyg_profile_func_exit>
   12ae6:	602e      	str	r6, [r5, #0]
    ssp_registers[pssp]->CR1 = bit::Insert(
        ssp_registers[pssp]->CR1, util::Value(mode), kMasterModeBit, 1);
   12ae8:	4a27      	ldr	r2, [pc, #156]	; (12b88 <Ssp::SetPeripheralMode(SspInterface::MasterSlaveMode, SspInterface::FrameMode, SspInterface::DataSize)+0x204>)
   12aea:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   12aec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12af0:	685e      	ldr	r6, [r3, #4]
    ssp_registers[pssp]->CR1 = bit::Insert(
   12af2:	f89d 3003 	ldrb.w	r3, [sp, #3]
   12af6:	4618      	mov	r0, r3
   12af8:	f7ff ff2c 	bl	12954 <unsigned char util::Value<SspInterface::MasterSlaveMode, unsigned char>(SspInterface::MasterSlaveMode)>
   12afc:	4603      	mov	r3, r0
   12afe:	4619      	mov	r1, r3
   12b00:	4a21      	ldr	r2, [pc, #132]	; (12b88 <Ssp::SetPeripheralMode(SspInterface::MasterSlaveMode, SspInterface::FrameMode, SspInterface::DataSize)+0x204>)
   12b02:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   12b04:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
   12b08:	9616      	str	r6, [sp, #88]	; 0x58
   12b0a:	460b      	mov	r3, r1
   12b0c:	f88d 3057 	strb.w	r3, [sp, #87]	; 0x57
   12b10:	2302      	movs	r3, #2
   12b12:	9314      	str	r3, [sp, #80]	; 0x50
   12b14:	2301      	movs	r3, #1
   12b16:	9313      	str	r3, [sp, #76]	; 0x4c
   12b18:	4623      	mov	r3, r4
   12b1a:	4619      	mov	r1, r3
   12b1c:	481b      	ldr	r0, [pc, #108]	; (12b8c <Ssp::SetPeripheralMode(SspInterface::MasterSlaveMode, SspInterface::FrameMode, SspInterface::DataSize)+0x208>)
   12b1e:	f002 fd25 	bl	1556c <__cyg_profile_func_enter>
  constexpr UnsignedT kFieldOfOnes = GenerateFieldOfOnes<T>();
   12b22:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   12b26:	9312      	str	r3, [sp, #72]	; 0x48
  constexpr size_t kTargetWidth     = sizeof(T) * 8;
   12b28:	2320      	movs	r3, #32
   12b2a:	9311      	str	r3, [sp, #68]	; 0x44
  UnsignedT mask   = kFieldOfOnes >> (kTargetWidth - width);
   12b2c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   12b2e:	f1c3 0320 	rsb	r3, r3, #32
   12b32:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   12b36:	fa22 f303 	lsr.w	r3, r2, r3
   12b3a:	9310      	str	r3, [sp, #64]	; 0x40
  target &= ~(mask << position);
   12b3c:	9a10      	ldr	r2, [sp, #64]	; 0x40
   12b3e:	9b14      	ldr	r3, [sp, #80]	; 0x50
   12b40:	fa02 f303 	lsl.w	r3, r2, r3
   12b44:	43db      	mvns	r3, r3
   12b46:	9a16      	ldr	r2, [sp, #88]	; 0x58
   12b48:	4013      	ands	r3, r2
   12b4a:	9316      	str	r3, [sp, #88]	; 0x58
  target |= (value & mask) << position;
   12b4c:	f89d 2057 	ldrb.w	r2, [sp, #87]	; 0x57
   12b50:	9b10      	ldr	r3, [sp, #64]	; 0x40
   12b52:	401a      	ands	r2, r3
   12b54:	9b14      	ldr	r3, [sp, #80]	; 0x50
   12b56:	fa02 f303 	lsl.w	r3, r2, r3
   12b5a:	9a16      	ldr	r2, [sp, #88]	; 0x58
   12b5c:	4313      	orrs	r3, r2
   12b5e:	9316      	str	r3, [sp, #88]	; 0x58
  return target;
   12b60:	9e16      	ldr	r6, [sp, #88]	; 0x58
   12b62:	4623      	mov	r3, r4
   12b64:	4619      	mov	r1, r3
   12b66:	4809      	ldr	r0, [pc, #36]	; (12b8c <Ssp::SetPeripheralMode(SspInterface::MasterSlaveMode, SspInterface::FrameMode, SspInterface::DataSize)+0x208>)
   12b68:	f002 fd14 	bl	15594 <__cyg_profile_func_exit>
   12b6c:	606e      	str	r6, [r5, #4]
   12b6e:	4623      	mov	r3, r4
   12b70:	4619      	mov	r1, r3
   12b72:	4803      	ldr	r0, [pc, #12]	; (12b80 <Ssp::SetPeripheralMode(SspInterface::MasterSlaveMode, SspInterface::FrameMode, SspInterface::DataSize)+0x1fc>)
   12b74:	f002 fd0e 	bl	15594 <__cyg_profile_func_exit>
  }
   12b78:	bf00      	nop
   12b7a:	b018      	add	sp, #96	; 0x60
   12b7c:	bd70      	pop	{r4, r5, r6, pc}
   12b7e:	bf00      	nop
   12b80:	00012985 	.word	0x00012985
   12b84:	00018e28 	.word	0x00018e28
   12b88:	10000074 	.word	0x10000074
   12b8c:	000138e9 	.word	0x000138e9

00012b90 <Ssp::GetPeripheralMode()>:
  /// Gets the Peripheral modes from registers
  /// @return - returns a 16-bit value as follows: 0000_000x 0xx0_xxxx
  ///       MasterSlaveMode = 1-bit @ bit 8
  ///       FrameMode       = 2-bit @ bit 5
  ///       DataSize        = 4-bit @ bit 0
  uint16_t GetPeripheralMode() override
   12b90:	b570      	push	{r4, r5, r6, lr}
   12b92:	b096      	sub	sp, #88	; 0x58
   12b94:	4674      	mov	r4, lr
   12b96:	9001      	str	r0, [sp, #4]
   12b98:	4623      	mov	r3, r4
   12b9a:	4619      	mov	r1, r3
   12b9c:	4850      	ldr	r0, [pc, #320]	; (12ce0 <Ssp::GetPeripheralMode()+0x150>)
   12b9e:	f002 fce5 	bl	1556c <__cyg_profile_func_enter>
  {
    uint16_t return_val = 0;
   12ba2:	2300      	movs	r3, #0
   12ba4:	f8ad 3056 	strh.w	r3, [sp, #86]	; 0x56
    uint32_t pssp       = util::Value(pssp_);
   12ba8:	9b01      	ldr	r3, [sp, #4]
   12baa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   12bac:	4618      	mov	r0, r3
   12bae:	f7ff fca7 	bl	12500 <int util::Value<Ssp::Peripheral, int>(Ssp::Peripheral)>
   12bb2:	4603      	mov	r3, r0
   12bb4:	9314      	str	r3, [sp, #80]	; 0x50
    // TODO(#371): Find a better alternative to powering up the peripheral for
    // every method.
    Ssp::PowerUpPeripheral(Ssp::kPowerBit[pssp]);
   12bb6:	9b01      	ldr	r3, [sp, #4]
   12bb8:	1d18      	adds	r0, r3, #4
   12bba:	9b14      	ldr	r3, [sp, #80]	; 0x50
   12bbc:	009b      	lsls	r3, r3, #2
   12bbe:	4a49      	ldr	r2, [pc, #292]	; (12ce4 <Ssp::GetPeripheralMode()+0x154>)
   12bc0:	4413      	add	r3, r2
   12bc2:	4619      	mov	r1, r3
   12bc4:	f7ff fa7e 	bl	120c4 <Lpc40xxSystemController::PowerUpPeripheral(SystemControllerInterface::PeripheralID const&)>

    return_val = static_cast<uint16_t>(
        (bit::Extract(ssp_registers[pssp]->CR0, kDataBit, 4)) +
   12bc8:	4a47      	ldr	r2, [pc, #284]	; (12ce8 <Ssp::GetPeripheralMode()+0x158>)
   12bca:	9b14      	ldr	r3, [sp, #80]	; 0x50
   12bcc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12bd0:	681b      	ldr	r3, [r3, #0]
   12bd2:	9307      	str	r3, [sp, #28]
   12bd4:	2300      	movs	r3, #0
   12bd6:	9306      	str	r3, [sp, #24]
   12bd8:	2304      	movs	r3, #4
   12bda:	9305      	str	r3, [sp, #20]
   12bdc:	4623      	mov	r3, r4
   12bde:	4619      	mov	r1, r3
   12be0:	4842      	ldr	r0, [pc, #264]	; (12cec <Ssp::GetPeripheralMode()+0x15c>)
   12be2:	f002 fcc3 	bl	1556c <__cyg_profile_func_enter>
  constexpr UnsignedT kFieldOfOnes = GenerateFieldOfOnes<T>();
   12be6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   12bea:	9304      	str	r3, [sp, #16]
  constexpr size_t kTargetWidth     = sizeof(T) * 8;
   12bec:	2320      	movs	r3, #32
   12bee:	9303      	str	r3, [sp, #12]
  UnsignedT mask   = kFieldOfOnes >> (kTargetWidth - width);
   12bf0:	9b05      	ldr	r3, [sp, #20]
   12bf2:	f1c3 0320 	rsb	r3, r3, #32
   12bf6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   12bfa:	fa22 f303 	lsr.w	r3, r2, r3
   12bfe:	9302      	str	r3, [sp, #8]
  return (target >> position) & mask;
   12c00:	9a07      	ldr	r2, [sp, #28]
   12c02:	9b06      	ldr	r3, [sp, #24]
   12c04:	40da      	lsrs	r2, r3
   12c06:	9b02      	ldr	r3, [sp, #8]
   12c08:	ea02 0503 	and.w	r5, r2, r3
   12c0c:	4623      	mov	r3, r4
   12c0e:	4619      	mov	r1, r3
   12c10:	4836      	ldr	r0, [pc, #216]	; (12cec <Ssp::GetPeripheralMode()+0x15c>)
   12c12:	f002 fcbf 	bl	15594 <__cyg_profile_func_exit>
   12c16:	b2ad      	uxth	r5, r5
        ((bit::Extract(ssp_registers[pssp]->CR0, kFrameBit, 2)) << 5) +
   12c18:	4a33      	ldr	r2, [pc, #204]	; (12ce8 <Ssp::GetPeripheralMode()+0x158>)
   12c1a:	9b14      	ldr	r3, [sp, #80]	; 0x50
   12c1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12c20:	681b      	ldr	r3, [r3, #0]
   12c22:	930d      	str	r3, [sp, #52]	; 0x34
   12c24:	2304      	movs	r3, #4
   12c26:	930c      	str	r3, [sp, #48]	; 0x30
   12c28:	2302      	movs	r3, #2
   12c2a:	930b      	str	r3, [sp, #44]	; 0x2c
   12c2c:	4623      	mov	r3, r4
   12c2e:	4619      	mov	r1, r3
   12c30:	482e      	ldr	r0, [pc, #184]	; (12cec <Ssp::GetPeripheralMode()+0x15c>)
   12c32:	f002 fc9b 	bl	1556c <__cyg_profile_func_enter>
  constexpr UnsignedT kFieldOfOnes = GenerateFieldOfOnes<T>();
   12c36:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   12c3a:	930a      	str	r3, [sp, #40]	; 0x28
  constexpr size_t kTargetWidth     = sizeof(T) * 8;
   12c3c:	2320      	movs	r3, #32
   12c3e:	9309      	str	r3, [sp, #36]	; 0x24
  UnsignedT mask   = kFieldOfOnes >> (kTargetWidth - width);
   12c40:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   12c42:	f1c3 0320 	rsb	r3, r3, #32
   12c46:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   12c4a:	fa22 f303 	lsr.w	r3, r2, r3
   12c4e:	9308      	str	r3, [sp, #32]
  return (target >> position) & mask;
   12c50:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   12c52:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   12c54:	40da      	lsrs	r2, r3
   12c56:	9b08      	ldr	r3, [sp, #32]
   12c58:	ea02 0603 	and.w	r6, r2, r3
   12c5c:	4623      	mov	r3, r4
   12c5e:	4619      	mov	r1, r3
   12c60:	4822      	ldr	r0, [pc, #136]	; (12cec <Ssp::GetPeripheralMode()+0x15c>)
   12c62:	f002 fc97 	bl	15594 <__cyg_profile_func_exit>
   12c66:	b2b3      	uxth	r3, r6
   12c68:	015b      	lsls	r3, r3, #5
   12c6a:	b29b      	uxth	r3, r3
        (bit::Extract(ssp_registers[pssp]->CR0, kDataBit, 4)) +
   12c6c:	442b      	add	r3, r5
   12c6e:	b29d      	uxth	r5, r3
        ((bit::Extract(ssp_registers[pssp]->CR1, kMasterModeBit)) << 8));
   12c70:	4a1d      	ldr	r2, [pc, #116]	; (12ce8 <Ssp::GetPeripheralMode()+0x158>)
   12c72:	9b14      	ldr	r3, [sp, #80]	; 0x50
   12c74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12c78:	685b      	ldr	r3, [r3, #4]
   12c7a:	9313      	str	r3, [sp, #76]	; 0x4c
   12c7c:	2302      	movs	r3, #2
   12c7e:	9312      	str	r3, [sp, #72]	; 0x48
   12c80:	2301      	movs	r3, #1
   12c82:	9311      	str	r3, [sp, #68]	; 0x44
   12c84:	4623      	mov	r3, r4
   12c86:	4619      	mov	r1, r3
   12c88:	4818      	ldr	r0, [pc, #96]	; (12cec <Ssp::GetPeripheralMode()+0x15c>)
   12c8a:	f002 fc6f 	bl	1556c <__cyg_profile_func_enter>
  constexpr UnsignedT kFieldOfOnes = GenerateFieldOfOnes<T>();
   12c8e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   12c92:	9310      	str	r3, [sp, #64]	; 0x40
  constexpr size_t kTargetWidth     = sizeof(T) * 8;
   12c94:	2320      	movs	r3, #32
   12c96:	930f      	str	r3, [sp, #60]	; 0x3c
  UnsignedT mask   = kFieldOfOnes >> (kTargetWidth - width);
   12c98:	9b11      	ldr	r3, [sp, #68]	; 0x44
   12c9a:	f1c3 0320 	rsb	r3, r3, #32
   12c9e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   12ca2:	fa22 f303 	lsr.w	r3, r2, r3
   12ca6:	930e      	str	r3, [sp, #56]	; 0x38
  return (target >> position) & mask;
   12ca8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   12caa:	9b12      	ldr	r3, [sp, #72]	; 0x48
   12cac:	40da      	lsrs	r2, r3
   12cae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   12cb0:	ea02 0603 	and.w	r6, r2, r3
   12cb4:	4623      	mov	r3, r4
   12cb6:	4619      	mov	r1, r3
   12cb8:	480c      	ldr	r0, [pc, #48]	; (12cec <Ssp::GetPeripheralMode()+0x15c>)
   12cba:	f002 fc6b 	bl	15594 <__cyg_profile_func_exit>
   12cbe:	b2b3      	uxth	r3, r6
   12cc0:	021b      	lsls	r3, r3, #8
   12cc2:	b29b      	uxth	r3, r3
    return_val = static_cast<uint16_t>(
   12cc4:	442b      	add	r3, r5
   12cc6:	f8ad 3056 	strh.w	r3, [sp, #86]	; 0x56
    return return_val;
   12cca:	f8bd 5056 	ldrh.w	r5, [sp, #86]	; 0x56
   12cce:	4623      	mov	r3, r4
   12cd0:	4619      	mov	r1, r3
   12cd2:	4803      	ldr	r0, [pc, #12]	; (12ce0 <Ssp::GetPeripheralMode()+0x150>)
   12cd4:	f002 fc5e 	bl	15594 <__cyg_profile_func_exit>
   12cd8:	462b      	mov	r3, r5
  }
   12cda:	4618      	mov	r0, r3
   12cdc:	b016      	add	sp, #88	; 0x58
   12cde:	bd70      	pop	{r4, r5, r6, pc}
   12ce0:	00012b91 	.word	0x00012b91
   12ce4:	00018e28 	.word	0x00018e28
   12ce8:	10000074 	.word	0x10000074
   12cec:	0001395d 	.word	0x0001395d

00012cf0 <Ssp::SetClock(bool, bool, unsigned char, unsigned char)>:
  /// Sets the clock rate for the Peripheral
  /// @param polarity - maintain bus on clock 0=low or 1=high between frames
  /// @param phase - capture serial data on 0=first or 1=second clock cycle
  /// @param divider - see notes in SSP_Interface above
  /// @param prescaler - divides the PCLK, must be even value between 2-254
  void SetClock(bool polarity, bool phase, uint8_t divider,
   12cf0:	b570      	push	{r4, r5, r6, lr}
   12cf2:	b098      	sub	sp, #96	; 0x60
   12cf4:	4674      	mov	r4, lr
   12cf6:	9001      	str	r0, [sp, #4]
   12cf8:	4608      	mov	r0, r1
   12cfa:	4611      	mov	r1, r2
   12cfc:	461a      	mov	r2, r3
   12cfe:	4603      	mov	r3, r0
   12d00:	f88d 3003 	strb.w	r3, [sp, #3]
   12d04:	460b      	mov	r3, r1
   12d06:	f88d 3002 	strb.w	r3, [sp, #2]
   12d0a:	4613      	mov	r3, r2
   12d0c:	f88d 3001 	strb.w	r3, [sp, #1]
   12d10:	4623      	mov	r3, r4
   12d12:	4619      	mov	r1, r3
   12d14:	486c      	ldr	r0, [pc, #432]	; (12ec8 <Ssp::SetClock(bool, bool, unsigned char, unsigned char)+0x1d8>)
   12d16:	f002 fc29 	bl	1556c <__cyg_profile_func_enter>
                uint8_t prescaler) override
  {
    uint32_t pssp = util::Value(pssp_);
   12d1a:	9b01      	ldr	r3, [sp, #4]
   12d1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   12d1e:	4618      	mov	r0, r3
   12d20:	f7ff fbee 	bl	12500 <int util::Value<Ssp::Peripheral, int>(Ssp::Peripheral)>
   12d24:	4603      	mov	r3, r0
   12d26:	9317      	str	r3, [sp, #92]	; 0x5c
    // TODO(#371): Find a better alternative to powering up the peripheral for
    // every method.
    Ssp::PowerUpPeripheral(Ssp::kPowerBit[pssp]);
   12d28:	9b01      	ldr	r3, [sp, #4]
   12d2a:	1d18      	adds	r0, r3, #4
   12d2c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   12d2e:	009b      	lsls	r3, r3, #2
   12d30:	4a66      	ldr	r2, [pc, #408]	; (12ecc <Ssp::SetClock(bool, bool, unsigned char, unsigned char)+0x1dc>)
   12d32:	4413      	add	r3, r2
   12d34:	4619      	mov	r1, r3
   12d36:	f7ff f9c5 	bl	120c4 <Lpc40xxSystemController::PowerUpPeripheral(SystemControllerInterface::PeripheralID const&)>
    // first clear the appropriate registers
    ssp_registers[pssp]->CR0 =
        bit::Insert(ssp_registers[pssp]->CR0, polarity, kPolarityBit, 1);
   12d3a:	4a65      	ldr	r2, [pc, #404]	; (12ed0 <Ssp::SetClock(bool, bool, unsigned char, unsigned char)+0x1e0>)
   12d3c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   12d3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12d42:	681b      	ldr	r3, [r3, #0]
    ssp_registers[pssp]->CR0 =
   12d44:	4962      	ldr	r1, [pc, #392]	; (12ed0 <Ssp::SetClock(bool, bool, unsigned char, unsigned char)+0x1e0>)
   12d46:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   12d48:	f851 5022 	ldr.w	r5, [r1, r2, lsl #2]
   12d4c:	9308      	str	r3, [sp, #32]
   12d4e:	f89d 3003 	ldrb.w	r3, [sp, #3]
   12d52:	f88d 301f 	strb.w	r3, [sp, #31]
   12d56:	2306      	movs	r3, #6
   12d58:	9306      	str	r3, [sp, #24]
   12d5a:	2301      	movs	r3, #1
   12d5c:	9305      	str	r3, [sp, #20]
   12d5e:	4623      	mov	r3, r4
   12d60:	4619      	mov	r1, r3
   12d62:	485c      	ldr	r0, [pc, #368]	; (12ed4 <Ssp::SetClock(bool, bool, unsigned char, unsigned char)+0x1e4>)
   12d64:	f002 fc02 	bl	1556c <__cyg_profile_func_enter>
  constexpr UnsignedT kFieldOfOnes = GenerateFieldOfOnes<T>();
   12d68:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   12d6c:	9304      	str	r3, [sp, #16]
  constexpr size_t kTargetWidth     = sizeof(T) * 8;
   12d6e:	2320      	movs	r3, #32
   12d70:	9303      	str	r3, [sp, #12]
  UnsignedT mask   = kFieldOfOnes >> (kTargetWidth - width);
   12d72:	9b05      	ldr	r3, [sp, #20]
   12d74:	f1c3 0320 	rsb	r3, r3, #32
   12d78:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   12d7c:	fa22 f303 	lsr.w	r3, r2, r3
   12d80:	9302      	str	r3, [sp, #8]
  target &= ~(mask << position);
   12d82:	9a02      	ldr	r2, [sp, #8]
   12d84:	9b06      	ldr	r3, [sp, #24]
   12d86:	fa02 f303 	lsl.w	r3, r2, r3
   12d8a:	43db      	mvns	r3, r3
   12d8c:	9a08      	ldr	r2, [sp, #32]
   12d8e:	4013      	ands	r3, r2
   12d90:	9308      	str	r3, [sp, #32]
  target |= (value & mask) << position;
   12d92:	f89d 201f 	ldrb.w	r2, [sp, #31]
   12d96:	9b02      	ldr	r3, [sp, #8]
   12d98:	401a      	ands	r2, r3
   12d9a:	9b06      	ldr	r3, [sp, #24]
   12d9c:	fa02 f303 	lsl.w	r3, r2, r3
   12da0:	9a08      	ldr	r2, [sp, #32]
   12da2:	4313      	orrs	r3, r2
   12da4:	9308      	str	r3, [sp, #32]
  return target;
   12da6:	9e08      	ldr	r6, [sp, #32]
   12da8:	4623      	mov	r3, r4
   12daa:	4619      	mov	r1, r3
   12dac:	4849      	ldr	r0, [pc, #292]	; (12ed4 <Ssp::SetClock(bool, bool, unsigned char, unsigned char)+0x1e4>)
   12dae:	f002 fbf1 	bl	15594 <__cyg_profile_func_exit>
   12db2:	602e      	str	r6, [r5, #0]
    ssp_registers[pssp]->CR0 =
        bit::Insert(ssp_registers[pssp]->CR0, phase, kPhaseBit, 1);
   12db4:	4a46      	ldr	r2, [pc, #280]	; (12ed0 <Ssp::SetClock(bool, bool, unsigned char, unsigned char)+0x1e0>)
   12db6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   12db8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12dbc:	681b      	ldr	r3, [r3, #0]
    ssp_registers[pssp]->CR0 =
   12dbe:	4944      	ldr	r1, [pc, #272]	; (12ed0 <Ssp::SetClock(bool, bool, unsigned char, unsigned char)+0x1e0>)
   12dc0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   12dc2:	f851 5022 	ldr.w	r5, [r1, r2, lsl #2]
   12dc6:	930f      	str	r3, [sp, #60]	; 0x3c
   12dc8:	f89d 3002 	ldrb.w	r3, [sp, #2]
   12dcc:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
   12dd0:	2307      	movs	r3, #7
   12dd2:	930d      	str	r3, [sp, #52]	; 0x34
   12dd4:	2301      	movs	r3, #1
   12dd6:	930c      	str	r3, [sp, #48]	; 0x30
   12dd8:	4623      	mov	r3, r4
   12dda:	4619      	mov	r1, r3
   12ddc:	483d      	ldr	r0, [pc, #244]	; (12ed4 <Ssp::SetClock(bool, bool, unsigned char, unsigned char)+0x1e4>)
   12dde:	f002 fbc5 	bl	1556c <__cyg_profile_func_enter>
  constexpr UnsignedT kFieldOfOnes = GenerateFieldOfOnes<T>();
   12de2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   12de6:	930b      	str	r3, [sp, #44]	; 0x2c
  constexpr size_t kTargetWidth     = sizeof(T) * 8;
   12de8:	2320      	movs	r3, #32
   12dea:	930a      	str	r3, [sp, #40]	; 0x28
  UnsignedT mask   = kFieldOfOnes >> (kTargetWidth - width);
   12dec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   12dee:	f1c3 0320 	rsb	r3, r3, #32
   12df2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   12df6:	fa22 f303 	lsr.w	r3, r2, r3
   12dfa:	9309      	str	r3, [sp, #36]	; 0x24
  target &= ~(mask << position);
   12dfc:	9a09      	ldr	r2, [sp, #36]	; 0x24
   12dfe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   12e00:	fa02 f303 	lsl.w	r3, r2, r3
   12e04:	43db      	mvns	r3, r3
   12e06:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   12e08:	4013      	ands	r3, r2
   12e0a:	930f      	str	r3, [sp, #60]	; 0x3c
  target |= (value & mask) << position;
   12e0c:	f89d 203b 	ldrb.w	r2, [sp, #59]	; 0x3b
   12e10:	9b09      	ldr	r3, [sp, #36]	; 0x24
   12e12:	401a      	ands	r2, r3
   12e14:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   12e16:	fa02 f303 	lsl.w	r3, r2, r3
   12e1a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   12e1c:	4313      	orrs	r3, r2
   12e1e:	930f      	str	r3, [sp, #60]	; 0x3c
  return target;
   12e20:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
   12e22:	4623      	mov	r3, r4
   12e24:	4619      	mov	r1, r3
   12e26:	482b      	ldr	r0, [pc, #172]	; (12ed4 <Ssp::SetClock(bool, bool, unsigned char, unsigned char)+0x1e4>)
   12e28:	f002 fbb4 	bl	15594 <__cyg_profile_func_exit>
   12e2c:	602e      	str	r6, [r5, #0]
    ssp_registers[pssp]->CR0 =
        bit::Insert(ssp_registers[pssp]->CR0, divider, kDividerBit, 8);
   12e2e:	4a28      	ldr	r2, [pc, #160]	; (12ed0 <Ssp::SetClock(bool, bool, unsigned char, unsigned char)+0x1e0>)
   12e30:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   12e32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12e36:	681b      	ldr	r3, [r3, #0]
    ssp_registers[pssp]->CR0 =
   12e38:	4925      	ldr	r1, [pc, #148]	; (12ed0 <Ssp::SetClock(bool, bool, unsigned char, unsigned char)+0x1e0>)
   12e3a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   12e3c:	f851 5022 	ldr.w	r5, [r1, r2, lsl #2]
   12e40:	9316      	str	r3, [sp, #88]	; 0x58
   12e42:	f89d 3001 	ldrb.w	r3, [sp, #1]
   12e46:	f88d 3057 	strb.w	r3, [sp, #87]	; 0x57
   12e4a:	2308      	movs	r3, #8
   12e4c:	9314      	str	r3, [sp, #80]	; 0x50
   12e4e:	2308      	movs	r3, #8
   12e50:	9313      	str	r3, [sp, #76]	; 0x4c
   12e52:	4623      	mov	r3, r4
   12e54:	4619      	mov	r1, r3
   12e56:	4820      	ldr	r0, [pc, #128]	; (12ed8 <Ssp::SetClock(bool, bool, unsigned char, unsigned char)+0x1e8>)
   12e58:	f002 fb88 	bl	1556c <__cyg_profile_func_enter>
  constexpr UnsignedT kFieldOfOnes = GenerateFieldOfOnes<T>();
   12e5c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   12e60:	9312      	str	r3, [sp, #72]	; 0x48
  constexpr size_t kTargetWidth     = sizeof(T) * 8;
   12e62:	2320      	movs	r3, #32
   12e64:	9311      	str	r3, [sp, #68]	; 0x44
  UnsignedT mask   = kFieldOfOnes >> (kTargetWidth - width);
   12e66:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   12e68:	f1c3 0320 	rsb	r3, r3, #32
   12e6c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   12e70:	fa22 f303 	lsr.w	r3, r2, r3
   12e74:	9310      	str	r3, [sp, #64]	; 0x40
  target &= ~(mask << position);
   12e76:	9a10      	ldr	r2, [sp, #64]	; 0x40
   12e78:	9b14      	ldr	r3, [sp, #80]	; 0x50
   12e7a:	fa02 f303 	lsl.w	r3, r2, r3
   12e7e:	43db      	mvns	r3, r3
   12e80:	9a16      	ldr	r2, [sp, #88]	; 0x58
   12e82:	4013      	ands	r3, r2
   12e84:	9316      	str	r3, [sp, #88]	; 0x58
  target |= (value & mask) << position;
   12e86:	f89d 2057 	ldrb.w	r2, [sp, #87]	; 0x57
   12e8a:	9b10      	ldr	r3, [sp, #64]	; 0x40
   12e8c:	401a      	ands	r2, r3
   12e8e:	9b14      	ldr	r3, [sp, #80]	; 0x50
   12e90:	fa02 f303 	lsl.w	r3, r2, r3
   12e94:	9a16      	ldr	r2, [sp, #88]	; 0x58
   12e96:	4313      	orrs	r3, r2
   12e98:	9316      	str	r3, [sp, #88]	; 0x58
  return target;
   12e9a:	9e16      	ldr	r6, [sp, #88]	; 0x58
   12e9c:	4623      	mov	r3, r4
   12e9e:	4619      	mov	r1, r3
   12ea0:	480d      	ldr	r0, [pc, #52]	; (12ed8 <Ssp::SetClock(bool, bool, unsigned char, unsigned char)+0x1e8>)
   12ea2:	f002 fb77 	bl	15594 <__cyg_profile_func_exit>
   12ea6:	602e      	str	r6, [r5, #0]
    ssp_registers[pssp]->CPSR = prescaler;
   12ea8:	4a09      	ldr	r2, [pc, #36]	; (12ed0 <Ssp::SetClock(bool, bool, unsigned char, unsigned char)+0x1e0>)
   12eaa:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   12eac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12eb0:	f89d 2070 	ldrb.w	r2, [sp, #112]	; 0x70
   12eb4:	611a      	str	r2, [r3, #16]
   12eb6:	4623      	mov	r3, r4
   12eb8:	4619      	mov	r1, r3
   12eba:	4803      	ldr	r0, [pc, #12]	; (12ec8 <Ssp::SetClock(bool, bool, unsigned char, unsigned char)+0x1d8>)
   12ebc:	f002 fb6a 	bl	15594 <__cyg_profile_func_exit>
  }
   12ec0:	bf00      	nop
   12ec2:	b018      	add	sp, #96	; 0x60
   12ec4:	bd70      	pop	{r4, r5, r6, pc}
   12ec6:	bf00      	nop
   12ec8:	00012cf1 	.word	0x00012cf1
   12ecc:	00018e28 	.word	0x00018e28
   12ed0:	10000074 	.word	0x10000074
   12ed4:	000139b1 	.word	0x000139b1
   12ed8:	000138e9 	.word	0x000138e9

00012edc <Ssp::GetClock()>:
  ///   0000_0000 0000_0x0x xxxx_xxxx xxxx_xxxx
  ///       polarity    = 1-bit @ bit 18
  ///       phase       = 1-bit @ bit 16
  ///       divider     = 8-bits @ bit 8
  ///       prescaler   = 8-bits @ bit 0
  uint32_t GetClock() override
   12edc:	b570      	push	{r4, r5, r6, lr}
   12ede:	b094      	sub	sp, #80	; 0x50
   12ee0:	4674      	mov	r4, lr
   12ee2:	9001      	str	r0, [sp, #4]
   12ee4:	4623      	mov	r3, r4
   12ee6:	4619      	mov	r1, r3
   12ee8:	4858      	ldr	r0, [pc, #352]	; (1304c <Ssp::GetClock()+0x170>)
   12eea:	f002 fb3f 	bl	1556c <__cyg_profile_func_enter>
  {
    uint32_t return_val = 0;
   12eee:	2300      	movs	r3, #0
   12ef0:	9313      	str	r3, [sp, #76]	; 0x4c
    uint32_t pssp       = util::Value(pssp_);
   12ef2:	9b01      	ldr	r3, [sp, #4]
   12ef4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   12ef6:	4618      	mov	r0, r3
   12ef8:	f7ff fb02 	bl	12500 <int util::Value<Ssp::Peripheral, int>(Ssp::Peripheral)>
   12efc:	4603      	mov	r3, r0
   12efe:	9312      	str	r3, [sp, #72]	; 0x48
    // TODO(#371): Find a better alternative to powering up the peripheral for
    // every method.
    Ssp::PowerUpPeripheral(Ssp::kPowerBit[pssp]);
   12f00:	9b01      	ldr	r3, [sp, #4]
   12f02:	1d18      	adds	r0, r3, #4
   12f04:	9b12      	ldr	r3, [sp, #72]	; 0x48
   12f06:	009b      	lsls	r3, r3, #2
   12f08:	4a51      	ldr	r2, [pc, #324]	; (13050 <Ssp::GetClock()+0x174>)
   12f0a:	4413      	add	r3, r2
   12f0c:	4619      	mov	r1, r3
   12f0e:	f7ff f8d9 	bl	120c4 <Lpc40xxSystemController::PowerUpPeripheral(SystemControllerInterface::PeripheralID const&)>

    return_val =
        (bit::Extract(ssp_registers[pssp]->CPSR, kPrescalerBit, 8)) +
   12f12:	4a50      	ldr	r2, [pc, #320]	; (13054 <Ssp::GetClock()+0x178>)
   12f14:	9b12      	ldr	r3, [sp, #72]	; 0x48
   12f16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12f1a:	691b      	ldr	r3, [r3, #16]
   12f1c:	9307      	str	r3, [sp, #28]
   12f1e:	2300      	movs	r3, #0
   12f20:	9306      	str	r3, [sp, #24]
   12f22:	2308      	movs	r3, #8
   12f24:	9305      	str	r3, [sp, #20]
   12f26:	4623      	mov	r3, r4
   12f28:	4619      	mov	r1, r3
   12f2a:	484b      	ldr	r0, [pc, #300]	; (13058 <Ssp::GetClock()+0x17c>)
   12f2c:	f002 fb1e 	bl	1556c <__cyg_profile_func_enter>
  constexpr UnsignedT kFieldOfOnes = GenerateFieldOfOnes<T>();
   12f30:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   12f34:	9304      	str	r3, [sp, #16]
  constexpr size_t kTargetWidth     = sizeof(T) * 8;
   12f36:	2320      	movs	r3, #32
   12f38:	9303      	str	r3, [sp, #12]
  UnsignedT mask   = kFieldOfOnes >> (kTargetWidth - width);
   12f3a:	9b05      	ldr	r3, [sp, #20]
   12f3c:	f1c3 0320 	rsb	r3, r3, #32
   12f40:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   12f44:	fa22 f303 	lsr.w	r3, r2, r3
   12f48:	9302      	str	r3, [sp, #8]
  return (target >> position) & mask;
   12f4a:	9a07      	ldr	r2, [sp, #28]
   12f4c:	9b06      	ldr	r3, [sp, #24]
   12f4e:	40da      	lsrs	r2, r3
   12f50:	9b02      	ldr	r3, [sp, #8]
   12f52:	ea02 0503 	and.w	r5, r2, r3
   12f56:	4623      	mov	r3, r4
   12f58:	4619      	mov	r1, r3
   12f5a:	483f      	ldr	r0, [pc, #252]	; (13058 <Ssp::GetClock()+0x17c>)
   12f5c:	f002 fb1a 	bl	15594 <__cyg_profile_func_exit>
        ((bit::Extract(ssp_registers[pssp]->CR0, kDividerBit, 8)) << 8) +
   12f60:	4a3c      	ldr	r2, [pc, #240]	; (13054 <Ssp::GetClock()+0x178>)
   12f62:	9b12      	ldr	r3, [sp, #72]	; 0x48
   12f64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12f68:	681b      	ldr	r3, [r3, #0]
   12f6a:	930d      	str	r3, [sp, #52]	; 0x34
   12f6c:	2308      	movs	r3, #8
   12f6e:	930c      	str	r3, [sp, #48]	; 0x30
   12f70:	2308      	movs	r3, #8
   12f72:	930b      	str	r3, [sp, #44]	; 0x2c
   12f74:	4623      	mov	r3, r4
   12f76:	4619      	mov	r1, r3
   12f78:	4837      	ldr	r0, [pc, #220]	; (13058 <Ssp::GetClock()+0x17c>)
   12f7a:	f002 faf7 	bl	1556c <__cyg_profile_func_enter>
  constexpr UnsignedT kFieldOfOnes = GenerateFieldOfOnes<T>();
   12f7e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   12f82:	930a      	str	r3, [sp, #40]	; 0x28
  constexpr size_t kTargetWidth     = sizeof(T) * 8;
   12f84:	2320      	movs	r3, #32
   12f86:	9309      	str	r3, [sp, #36]	; 0x24
  UnsignedT mask   = kFieldOfOnes >> (kTargetWidth - width);
   12f88:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   12f8a:	f1c3 0320 	rsb	r3, r3, #32
   12f8e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   12f92:	fa22 f303 	lsr.w	r3, r2, r3
   12f96:	9308      	str	r3, [sp, #32]
  return (target >> position) & mask;
   12f98:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   12f9a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   12f9c:	40da      	lsrs	r2, r3
   12f9e:	9b08      	ldr	r3, [sp, #32]
   12fa0:	ea02 0603 	and.w	r6, r2, r3
   12fa4:	4623      	mov	r3, r4
   12fa6:	4619      	mov	r1, r3
   12fa8:	482b      	ldr	r0, [pc, #172]	; (13058 <Ssp::GetClock()+0x17c>)
   12faa:	f002 faf3 	bl	15594 <__cyg_profile_func_exit>
   12fae:	0233      	lsls	r3, r6, #8
        (bit::Extract(ssp_registers[pssp]->CPSR, kPrescalerBit, 8)) +
   12fb0:	441d      	add	r5, r3
        ((bit::Read(ssp_registers[pssp]->CR0, kPhaseBit)) << 16) +
   12fb2:	4a28      	ldr	r2, [pc, #160]	; (13054 <Ssp::GetClock()+0x178>)
   12fb4:	9b12      	ldr	r3, [sp, #72]	; 0x48
   12fb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12fba:	681b      	ldr	r3, [r3, #0]
   12fbc:	930f      	str	r3, [sp, #60]	; 0x3c
   12fbe:	2307      	movs	r3, #7
   12fc0:	930e      	str	r3, [sp, #56]	; 0x38
   12fc2:	4623      	mov	r3, r4
   12fc4:	4619      	mov	r1, r3
   12fc6:	4825      	ldr	r0, [pc, #148]	; (1305c <Ssp::GetClock()+0x180>)
   12fc8:	f002 fad0 	bl	1556c <__cyg_profile_func_enter>
  return static_cast<bool>(target & (1 << position));
   12fcc:	2201      	movs	r2, #1
   12fce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   12fd0:	fa02 f303 	lsl.w	r3, r2, r3
   12fd4:	461a      	mov	r2, r3
   12fd6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   12fd8:	4013      	ands	r3, r2
   12fda:	2b00      	cmp	r3, #0
   12fdc:	bf14      	ite	ne
   12fde:	2301      	movne	r3, #1
   12fe0:	2300      	moveq	r3, #0
   12fe2:	b2de      	uxtb	r6, r3
   12fe4:	4623      	mov	r3, r4
   12fe6:	4619      	mov	r1, r3
   12fe8:	481c      	ldr	r0, [pc, #112]	; (1305c <Ssp::GetClock()+0x180>)
   12fea:	f002 fad3 	bl	15594 <__cyg_profile_func_exit>
   12fee:	4633      	mov	r3, r6
   12ff0:	041b      	lsls	r3, r3, #16
        ((bit::Extract(ssp_registers[pssp]->CR0, kDividerBit, 8)) << 8) +
   12ff2:	441d      	add	r5, r3
        ((bit::Read(ssp_registers[pssp]->CR0, kPolarityBit)) << 18);
   12ff4:	4a17      	ldr	r2, [pc, #92]	; (13054 <Ssp::GetClock()+0x178>)
   12ff6:	9b12      	ldr	r3, [sp, #72]	; 0x48
   12ff8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12ffc:	681b      	ldr	r3, [r3, #0]
   12ffe:	9311      	str	r3, [sp, #68]	; 0x44
   13000:	2306      	movs	r3, #6
   13002:	9310      	str	r3, [sp, #64]	; 0x40
   13004:	4623      	mov	r3, r4
   13006:	4619      	mov	r1, r3
   13008:	4814      	ldr	r0, [pc, #80]	; (1305c <Ssp::GetClock()+0x180>)
   1300a:	f002 faaf 	bl	1556c <__cyg_profile_func_enter>
   1300e:	2201      	movs	r2, #1
   13010:	9b10      	ldr	r3, [sp, #64]	; 0x40
   13012:	fa02 f303 	lsl.w	r3, r2, r3
   13016:	461a      	mov	r2, r3
   13018:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1301a:	4013      	ands	r3, r2
   1301c:	2b00      	cmp	r3, #0
   1301e:	bf14      	ite	ne
   13020:	2301      	movne	r3, #1
   13022:	2300      	moveq	r3, #0
   13024:	b2de      	uxtb	r6, r3
   13026:	4623      	mov	r3, r4
   13028:	4619      	mov	r1, r3
   1302a:	480c      	ldr	r0, [pc, #48]	; (1305c <Ssp::GetClock()+0x180>)
   1302c:	f002 fab2 	bl	15594 <__cyg_profile_func_exit>
   13030:	4633      	mov	r3, r6
   13032:	049b      	lsls	r3, r3, #18
    return_val =
   13034:	442b      	add	r3, r5
   13036:	9313      	str	r3, [sp, #76]	; 0x4c

    return return_val;
   13038:	9d13      	ldr	r5, [sp, #76]	; 0x4c
   1303a:	4623      	mov	r3, r4
   1303c:	4619      	mov	r1, r3
   1303e:	4803      	ldr	r0, [pc, #12]	; (1304c <Ssp::GetClock()+0x170>)
   13040:	f002 faa8 	bl	15594 <__cyg_profile_func_exit>
   13044:	462b      	mov	r3, r5
  }
   13046:	4618      	mov	r0, r3
   13048:	b014      	add	sp, #80	; 0x50
   1304a:	bd70      	pop	{r4, r5, r6, pc}
   1304c:	00012edd 	.word	0x00012edd
   13050:	00018e28 	.word	0x00018e28
   13054:	10000074 	.word	0x10000074
   13058:	0001395d 	.word	0x0001395d
   1305c:	000138a5 	.word	0x000138a5

00013060 <PixelDisplayInterface::Color_t::Color_t(bool, bool, bool, unsigned char, unsigned char, bool)>:
class PixelDisplayInterface
{
 public:
  SJ2_PACKED(struct) Color_t
  {
    Color_t(bool r, bool g, bool b, uint8_t a, uint8_t bits,
   13060:	b530      	push	{r4, r5, lr}
   13062:	b083      	sub	sp, #12
   13064:	4675      	mov	r5, lr
   13066:	9001      	str	r0, [sp, #4]
   13068:	4608      	mov	r0, r1
   1306a:	4611      	mov	r1, r2
   1306c:	461a      	mov	r2, r3
   1306e:	4603      	mov	r3, r0
   13070:	f88d 3003 	strb.w	r3, [sp, #3]
   13074:	460b      	mov	r3, r1
   13076:	f88d 3002 	strb.w	r3, [sp, #2]
   1307a:	4613      	mov	r3, r2
   1307c:	f88d 3001 	strb.w	r3, [sp, #1]
   13080:	462b      	mov	r3, r5
   13082:	4619      	mov	r1, r3
   13084:	481a      	ldr	r0, [pc, #104]	; (130f0 <PixelDisplayInterface::Color_t::Color_t(bool, bool, bool, unsigned char, unsigned char, bool)+0x90>)
   13086:	f002 fa71 	bl	1556c <__cyg_profile_func_enter>
          red(r),
          green(g),
          blue(b),
          padding(0),
          color_bits(bits),
          alpha(a)
   1308a:	9a01      	ldr	r2, [sp, #4]
   1308c:	7813      	ldrb	r3, [r2, #0]
   1308e:	f89d 1020 	ldrb.w	r1, [sp, #32]
   13092:	f361 0300 	bfi	r3, r1, #0, #1
   13096:	7013      	strb	r3, [r2, #0]
   13098:	9a01      	ldr	r2, [sp, #4]
   1309a:	7813      	ldrb	r3, [r2, #0]
   1309c:	f89d 1003 	ldrb.w	r1, [sp, #3]
   130a0:	f361 0341 	bfi	r3, r1, #1, #1
   130a4:	7013      	strb	r3, [r2, #0]
   130a6:	9a01      	ldr	r2, [sp, #4]
   130a8:	7813      	ldrb	r3, [r2, #0]
   130aa:	f89d 1002 	ldrb.w	r1, [sp, #2]
   130ae:	f361 0382 	bfi	r3, r1, #2, #1
   130b2:	7013      	strb	r3, [r2, #0]
   130b4:	9a01      	ldr	r2, [sp, #4]
   130b6:	7813      	ldrb	r3, [r2, #0]
   130b8:	f89d 1001 	ldrb.w	r1, [sp, #1]
   130bc:	f361 03c3 	bfi	r3, r1, #3, #1
   130c0:	7013      	strb	r3, [r2, #0]
   130c2:	9a01      	ldr	r2, [sp, #4]
   130c4:	7813      	ldrb	r3, [r2, #0]
   130c6:	f36f 1307 	bfc	r3, #4, #4
   130ca:	7013      	strb	r3, [r2, #0]
   130cc:	9b01      	ldr	r3, [sp, #4]
   130ce:	f89d 201c 	ldrb.w	r2, [sp, #28]
   130d2:	705a      	strb	r2, [r3, #1]
   130d4:	9b01      	ldr	r3, [sp, #4]
   130d6:	f89d 2018 	ldrb.w	r2, [sp, #24]
   130da:	709a      	strb	r2, [r3, #2]
    {
    }
   130dc:	9c01      	ldr	r4, [sp, #4]
   130de:	462b      	mov	r3, r5
   130e0:	4619      	mov	r1, r3
   130e2:	4803      	ldr	r0, [pc, #12]	; (130f0 <PixelDisplayInterface::Color_t::Color_t(bool, bool, bool, unsigned char, unsigned char, bool)+0x90>)
   130e4:	f002 fa56 	bl	15594 <__cyg_profile_func_exit>
   130e8:	4623      	mov	r3, r4
   130ea:	4618      	mov	r0, r3
   130ec:	b003      	add	sp, #12
   130ee:	bd30      	pop	{r4, r5, pc}
   130f0:	00013061 	.word	0x00013061

000130f4 <PixelDisplayInterface::Color_t::Color_t()>:
    Color_t()
   130f4:	b530      	push	{r4, r5, lr}
   130f6:	b083      	sub	sp, #12
   130f8:	4675      	mov	r5, lr
   130fa:	9001      	str	r0, [sp, #4]
   130fc:	462b      	mov	r3, r5
   130fe:	4619      	mov	r1, r3
   13100:	4815      	ldr	r0, [pc, #84]	; (13158 <PixelDisplayInterface::Color_t::Color_t()+0x64>)
   13102:	f002 fa33 	bl	1556c <__cyg_profile_func_enter>
          red(false),
          green(false),
          blue(false),
          padding(0),
          color_bits(0),
          alpha(0)
   13106:	9a01      	ldr	r2, [sp, #4]
   13108:	7813      	ldrb	r3, [r2, #0]
   1310a:	f36f 0300 	bfc	r3, #0, #1
   1310e:	7013      	strb	r3, [r2, #0]
   13110:	9a01      	ldr	r2, [sp, #4]
   13112:	7813      	ldrb	r3, [r2, #0]
   13114:	f36f 0341 	bfc	r3, #1, #1
   13118:	7013      	strb	r3, [r2, #0]
   1311a:	9a01      	ldr	r2, [sp, #4]
   1311c:	7813      	ldrb	r3, [r2, #0]
   1311e:	f36f 0382 	bfc	r3, #2, #1
   13122:	7013      	strb	r3, [r2, #0]
   13124:	9a01      	ldr	r2, [sp, #4]
   13126:	7813      	ldrb	r3, [r2, #0]
   13128:	f36f 03c3 	bfc	r3, #3, #1
   1312c:	7013      	strb	r3, [r2, #0]
   1312e:	9a01      	ldr	r2, [sp, #4]
   13130:	7813      	ldrb	r3, [r2, #0]
   13132:	f36f 1307 	bfc	r3, #4, #4
   13136:	7013      	strb	r3, [r2, #0]
   13138:	9b01      	ldr	r3, [sp, #4]
   1313a:	2200      	movs	r2, #0
   1313c:	705a      	strb	r2, [r3, #1]
   1313e:	9b01      	ldr	r3, [sp, #4]
   13140:	2200      	movs	r2, #0
   13142:	709a      	strb	r2, [r3, #2]
    {
    }
   13144:	9c01      	ldr	r4, [sp, #4]
   13146:	462b      	mov	r3, r5
   13148:	4619      	mov	r1, r3
   1314a:	4803      	ldr	r0, [pc, #12]	; (13158 <PixelDisplayInterface::Color_t::Color_t()+0x64>)
   1314c:	f002 fa22 	bl	15594 <__cyg_profile_func_exit>
   13150:	4623      	mov	r3, r4
   13152:	4618      	mov	r0, r3
   13154:	b003      	add	sp, #12
   13156:	bd30      	pop	{r4, r5, pc}
   13158:	000130f5 	.word	0x000130f5

0001315c <PixelDisplayInterface::Enable()>:
  /// @returns a color object with the available colors.
  virtual Color_t AvailableColors() = 0;
  /// Configure hardware peripherals and initialize external display hardware
  virtual void Initialize() = 0;
  /// Optional method to turn on display if applicable
  virtual void Enable() {}
   1315c:	b510      	push	{r4, lr}
   1315e:	b082      	sub	sp, #8
   13160:	4674      	mov	r4, lr
   13162:	9001      	str	r0, [sp, #4]
   13164:	4623      	mov	r3, r4
   13166:	4619      	mov	r1, r3
   13168:	4805      	ldr	r0, [pc, #20]	; (13180 <PixelDisplayInterface::Enable()+0x24>)
   1316a:	f002 f9ff 	bl	1556c <__cyg_profile_func_enter>
   1316e:	4623      	mov	r3, r4
   13170:	4619      	mov	r1, r3
   13172:	4803      	ldr	r0, [pc, #12]	; (13180 <PixelDisplayInterface::Enable()+0x24>)
   13174:	f002 fa0e 	bl	15594 <__cyg_profile_func_exit>
   13178:	bf00      	nop
   1317a:	b002      	add	sp, #8
   1317c:	bd10      	pop	{r4, pc}
   1317e:	bf00      	nop
   13180:	0001315d 	.word	0x0001315d

00013184 <PixelDisplayInterface::Disable()>:
  /// Optional method to turn off display and potentially put it into a low
  /// power mode
  virtual void Disable() {}
   13184:	b510      	push	{r4, lr}
   13186:	b082      	sub	sp, #8
   13188:	4674      	mov	r4, lr
   1318a:	9001      	str	r0, [sp, #4]
   1318c:	4623      	mov	r3, r4
   1318e:	4619      	mov	r1, r3
   13190:	4805      	ldr	r0, [pc, #20]	; (131a8 <PixelDisplayInterface::Disable()+0x24>)
   13192:	f002 f9eb 	bl	1556c <__cyg_profile_func_enter>
   13196:	4623      	mov	r3, r4
   13198:	4619      	mov	r1, r3
   1319a:	4803      	ldr	r0, [pc, #12]	; (131a8 <PixelDisplayInterface::Disable()+0x24>)
   1319c:	f002 f9fa 	bl	15594 <__cyg_profile_func_exit>
   131a0:	bf00      	nop
   131a2:	b002      	add	sp, #8
   131a4:	bd10      	pop	{r4, pc}
   131a6:	bf00      	nop
   131a8:	00013185 	.word	0x00013185

000131ac <PixelDisplayInterface::Update()>:
  /// @param color the color of the pixel. May be ignored on monochrome screens.
  virtual void DrawPixel(int32_t x, int32_t y, Color_t color) = 0;
  /// Update screen to match framebuffer.
  /// Implementations of this method that do not use a framebuffer, possibly
  /// due to memory constrains, can refrain from implementing this function.
  virtual void Update() {}
   131ac:	b510      	push	{r4, lr}
   131ae:	b082      	sub	sp, #8
   131b0:	4674      	mov	r4, lr
   131b2:	9001      	str	r0, [sp, #4]
   131b4:	4623      	mov	r3, r4
   131b6:	4619      	mov	r1, r3
   131b8:	4805      	ldr	r0, [pc, #20]	; (131d0 <PixelDisplayInterface::Update()+0x24>)
   131ba:	f002 f9d7 	bl	1556c <__cyg_profile_func_enter>
   131be:	4623      	mov	r3, r4
   131c0:	4619      	mov	r1, r3
   131c2:	4803      	ldr	r0, [pc, #12]	; (131d0 <PixelDisplayInterface::Update()+0x24>)
   131c4:	f002 f9e6 	bl	15594 <__cyg_profile_func_exit>
   131c8:	bf00      	nop
   131ca:	b002      	add	sp, #8
   131cc:	bd10      	pop	{r4, pc}
   131ce:	bf00      	nop
   131d0:	000131ad 	.word	0x000131ad

000131d4 <PixelDisplayInterface::PixelDisplayInterface()>:
class PixelDisplayInterface
   131d4:	b530      	push	{r4, r5, lr}
   131d6:	b083      	sub	sp, #12
   131d8:	4675      	mov	r5, lr
   131da:	9001      	str	r0, [sp, #4]
   131dc:	462b      	mov	r3, r5
   131de:	4619      	mov	r1, r3
   131e0:	4807      	ldr	r0, [pc, #28]	; (13200 <PixelDisplayInterface::PixelDisplayInterface()+0x2c>)
   131e2:	f002 f9c3 	bl	1556c <__cyg_profile_func_enter>
   131e6:	4a07      	ldr	r2, [pc, #28]	; (13204 <PixelDisplayInterface::PixelDisplayInterface()+0x30>)
   131e8:	9b01      	ldr	r3, [sp, #4]
   131ea:	601a      	str	r2, [r3, #0]
   131ec:	9c01      	ldr	r4, [sp, #4]
   131ee:	462b      	mov	r3, r5
   131f0:	4619      	mov	r1, r3
   131f2:	4803      	ldr	r0, [pc, #12]	; (13200 <PixelDisplayInterface::PixelDisplayInterface()+0x2c>)
   131f4:	f002 f9ce 	bl	15594 <__cyg_profile_func_exit>
   131f8:	4623      	mov	r3, r4
   131fa:	4618      	mov	r0, r3
   131fc:	b003      	add	sp, #12
   131fe:	bd30      	pop	{r4, r5, pc}
   13200:	000131d5 	.word	0x000131d5
   13204:	00018e74 	.word	0x00018e74

00013208 <Ssd1306::Ssd1306()>:
  {
    kCommand = 0,
    kData    = 1
  };

  constexpr Ssd1306()
   13208:	b530      	push	{r4, r5, lr}
   1320a:	b083      	sub	sp, #12
   1320c:	4675      	mov	r5, lr
   1320e:	9001      	str	r0, [sp, #4]
   13210:	462b      	mov	r3, r5
   13212:	4619      	mov	r1, r3
   13214:	481f      	ldr	r0, [pc, #124]	; (13294 <Ssd1306::Ssd1306()+0x8c>)
   13216:	f002 f9a9 	bl	1556c <__cyg_profile_func_enter>
        cs_(&cs_gpio_),
        dc_(&dc_gpio_),
        ssp1_(Ssp::Peripheral::kSsp1),
        cs_gpio_(1, 22),
        dc_gpio_(1, 25),
        bitmap_{}
   1321a:	9b01      	ldr	r3, [sp, #4]
   1321c:	4618      	mov	r0, r3
   1321e:	f7ff ffd9 	bl	131d4 <PixelDisplayInterface::PixelDisplayInterface()>
   13222:	4a1d      	ldr	r2, [pc, #116]	; (13298 <Ssd1306::Ssd1306()+0x90>)
   13224:	9b01      	ldr	r3, [sp, #4]
   13226:	601a      	str	r2, [r3, #0]
      : ssp_(&ssp1_),
   13228:	9b01      	ldr	r3, [sp, #4]
   1322a:	f103 0210 	add.w	r2, r3, #16
        bitmap_{}
   1322e:	9b01      	ldr	r3, [sp, #4]
   13230:	605a      	str	r2, [r3, #4]
        cs_(&cs_gpio_),
   13232:	9b01      	ldr	r3, [sp, #4]
   13234:	f103 0240 	add.w	r2, r3, #64	; 0x40
        bitmap_{}
   13238:	9b01      	ldr	r3, [sp, #4]
   1323a:	609a      	str	r2, [r3, #8]
        dc_(&dc_gpio_),
   1323c:	9b01      	ldr	r3, [sp, #4]
   1323e:	f103 0254 	add.w	r2, r3, #84	; 0x54
        bitmap_{}
   13242:	9b01      	ldr	r3, [sp, #4]
   13244:	60da      	str	r2, [r3, #12]
   13246:	9b01      	ldr	r3, [sp, #4]
   13248:	3310      	adds	r3, #16
   1324a:	2101      	movs	r1, #1
   1324c:	4618      	mov	r0, r3
   1324e:	f7ff f9cd 	bl	125ec <Ssp::Ssp(Ssp::Peripheral)>
   13252:	9b01      	ldr	r3, [sp, #4]
   13254:	3340      	adds	r3, #64	; 0x40
   13256:	2216      	movs	r2, #22
   13258:	2101      	movs	r1, #1
   1325a:	4618      	mov	r0, r3
   1325c:	f7fe f9d6 	bl	1160c <Gpio::Gpio(unsigned char, unsigned char)>
   13260:	9b01      	ldr	r3, [sp, #4]
   13262:	3354      	adds	r3, #84	; 0x54
   13264:	2219      	movs	r2, #25
   13266:	2101      	movs	r1, #1
   13268:	4618      	mov	r0, r3
   1326a:	f7fe f9cf 	bl	1160c <Gpio::Gpio(unsigned char, unsigned char)>
   1326e:	9b01      	ldr	r3, [sp, #4]
   13270:	3368      	adds	r3, #104	; 0x68
   13272:	f240 62c1 	movw	r2, #1729	; 0x6c1
   13276:	2100      	movs	r1, #0
   13278:	4618      	mov	r0, r3
   1327a:	f005 f8db 	bl	18434 <memset>
  {
  }
   1327e:	9c01      	ldr	r4, [sp, #4]
   13280:	462b      	mov	r3, r5
   13282:	4619      	mov	r1, r3
   13284:	4803      	ldr	r0, [pc, #12]	; (13294 <Ssd1306::Ssd1306()+0x8c>)
   13286:	f002 f985 	bl	15594 <__cyg_profile_func_exit>
   1328a:	4623      	mov	r3, r4
   1328c:	4618      	mov	r0, r3
   1328e:	b003      	add	sp, #12
   13290:	bd30      	pop	{r4, r5, pc}
   13292:	bf00      	nop
   13294:	00013209 	.word	0x00013209
   13298:	00018e48 	.word	0x00018e48

0001329c <Ssd1306::GetWidth()>:
        dc_gpio_(1, 25),
        bitmap_{}
  {
  }

  size_t GetWidth() final override
   1329c:	b530      	push	{r4, r5, lr}
   1329e:	b083      	sub	sp, #12
   132a0:	4675      	mov	r5, lr
   132a2:	9001      	str	r0, [sp, #4]
   132a4:	462b      	mov	r3, r5
   132a6:	4619      	mov	r1, r3
   132a8:	4806      	ldr	r0, [pc, #24]	; (132c4 <Ssd1306::GetWidth()+0x28>)
   132aa:	f002 f95f 	bl	1556c <__cyg_profile_func_enter>
  {
    return kWidth;
   132ae:	2480      	movs	r4, #128	; 0x80
   132b0:	462b      	mov	r3, r5
   132b2:	4619      	mov	r1, r3
   132b4:	4803      	ldr	r0, [pc, #12]	; (132c4 <Ssd1306::GetWidth()+0x28>)
   132b6:	f002 f96d 	bl	15594 <__cyg_profile_func_exit>
   132ba:	4623      	mov	r3, r4
  }
   132bc:	4618      	mov	r0, r3
   132be:	b003      	add	sp, #12
   132c0:	bd30      	pop	{r4, r5, pc}
   132c2:	bf00      	nop
   132c4:	0001329d 	.word	0x0001329d

000132c8 <Ssd1306::GetHeight()>:
  size_t GetHeight() final override
   132c8:	b530      	push	{r4, r5, lr}
   132ca:	b083      	sub	sp, #12
   132cc:	4675      	mov	r5, lr
   132ce:	9001      	str	r0, [sp, #4]
   132d0:	462b      	mov	r3, r5
   132d2:	4619      	mov	r1, r3
   132d4:	4806      	ldr	r0, [pc, #24]	; (132f0 <Ssd1306::GetHeight()+0x28>)
   132d6:	f002 f949 	bl	1556c <__cyg_profile_func_enter>
  {
    return kHeight;
   132da:	2440      	movs	r4, #64	; 0x40
   132dc:	462b      	mov	r3, r5
   132de:	4619      	mov	r1, r3
   132e0:	4803      	ldr	r0, [pc, #12]	; (132f0 <Ssd1306::GetHeight()+0x28>)
   132e2:	f002 f957 	bl	15594 <__cyg_profile_func_exit>
   132e6:	4623      	mov	r3, r4
  }
   132e8:	4618      	mov	r0, r3
   132ea:	b003      	add	sp, #12
   132ec:	bd30      	pop	{r4, r5, pc}
   132ee:	bf00      	nop
   132f0:	000132c9 	.word	0x000132c9

000132f4 <Ssd1306::AvailableColors()>:
  Color_t AvailableColors() final override
   132f4:	b510      	push	{r4, lr}
   132f6:	b088      	sub	sp, #32
   132f8:	4674      	mov	r4, lr
   132fa:	9005      	str	r0, [sp, #20]
   132fc:	4623      	mov	r3, r4
   132fe:	4619      	mov	r1, r3
   13300:	4815      	ldr	r0, [pc, #84]	; (13358 <Ssd1306::AvailableColors()+0x64>)
   13302:	f002 f933 	bl	1556c <__cyg_profile_func_enter>
  {
    return Color_t(/* Red        = */ 1,
   13306:	a807      	add	r0, sp, #28
   13308:	2301      	movs	r3, #1
   1330a:	9302      	str	r3, [sp, #8]
   1330c:	2301      	movs	r3, #1
   1330e:	9301      	str	r3, [sp, #4]
   13310:	2301      	movs	r3, #1
   13312:	9300      	str	r3, [sp, #0]
   13314:	2301      	movs	r3, #1
   13316:	2201      	movs	r2, #1
   13318:	2101      	movs	r1, #1
   1331a:	f7ff fea1 	bl	13060 <PixelDisplayInterface::Color_t::Color_t(bool, bool, bool, unsigned char, unsigned char, bool)>
                   /* Green      = */ 1,
                   /* Blue       = */ 1,
                   /* Alpha      = */ 1,
                   /* Color Bits = */ 1,
                   /* Monochrome = */ true);
   1331e:	ab06      	add	r3, sp, #24
   13320:	aa07      	add	r2, sp, #28
   13322:	6812      	ldr	r2, [r2, #0]
   13324:	4611      	mov	r1, r2
   13326:	8019      	strh	r1, [r3, #0]
   13328:	3302      	adds	r3, #2
   1332a:	0c12      	lsrs	r2, r2, #16
   1332c:	701a      	strb	r2, [r3, #0]
   1332e:	4623      	mov	r3, r4
   13330:	4619      	mov	r1, r3
   13332:	4809      	ldr	r0, [pc, #36]	; (13358 <Ssd1306::AvailableColors()+0x64>)
   13334:	f002 f92e 	bl	15594 <__cyg_profile_func_exit>
   13338:	2300      	movs	r3, #0
   1333a:	f89d 2018 	ldrb.w	r2, [sp, #24]
   1333e:	f362 0307 	bfi	r3, r2, #0, #8
   13342:	f89d 2019 	ldrb.w	r2, [sp, #25]
   13346:	f362 230f 	bfi	r3, r2, #8, #8
   1334a:	f89d 201a 	ldrb.w	r2, [sp, #26]
   1334e:	f362 4317 	bfi	r3, r2, #16, #8
  }
   13352:	4618      	mov	r0, r3
   13354:	b008      	add	sp, #32
   13356:	bd10      	pop	{r4, pc}
   13358:	000132f5 	.word	0x000132f5

0001335c <Ssd1306::Write(unsigned long, Ssd1306::Transaction, unsigned int)>:

  void Write(uint32_t data, Transaction transaction, size_t size = 1)
   1335c:	b510      	push	{r4, lr}
   1335e:	b086      	sub	sp, #24
   13360:	4674      	mov	r4, lr
   13362:	9003      	str	r0, [sp, #12]
   13364:	9102      	str	r1, [sp, #8]
   13366:	9201      	str	r2, [sp, #4]
   13368:	9300      	str	r3, [sp, #0]
   1336a:	4623      	mov	r3, r4
   1336c:	4619      	mov	r1, r3
   1336e:	481e      	ldr	r0, [pc, #120]	; (133e8 <Ssd1306::Write(unsigned long, Ssd1306::Transaction, unsigned int)+0x8c>)
   13370:	f002 f8fc 	bl	1556c <__cyg_profile_func_enter>
  {
    dc_->Set(static_cast<Gpio::State>(transaction));
   13374:	9b03      	ldr	r3, [sp, #12]
   13376:	68db      	ldr	r3, [r3, #12]
   13378:	9a01      	ldr	r2, [sp, #4]
   1337a:	b2d2      	uxtb	r2, r2
   1337c:	4611      	mov	r1, r2
   1337e:	4618      	mov	r0, r3
   13380:	f7fe fa84 	bl	1188c <Gpio::Set(GpioInterface::State)>
    cs_->SetLow();
   13384:	9b03      	ldr	r3, [sp, #12]
   13386:	689b      	ldr	r3, [r3, #8]
   13388:	4618      	mov	r0, r3
   1338a:	f7fe fa4d 	bl	11828 <Gpio::SetLow()>
    for (size_t i = 0; i < size; i++)
   1338e:	2300      	movs	r3, #0
   13390:	9305      	str	r3, [sp, #20]
   13392:	9a05      	ldr	r2, [sp, #20]
   13394:	9b00      	ldr	r3, [sp, #0]
   13396:	429a      	cmp	r2, r3
   13398:	d218      	bcs.n	133cc <Ssd1306::Write(unsigned long, Ssd1306::Transaction, unsigned int)+0x70>
    {
      uint8_t send = static_cast<uint8_t>(data >> (((size - 1) - i) * 8));
   1339a:	9a00      	ldr	r2, [sp, #0]
   1339c:	9b05      	ldr	r3, [sp, #20]
   1339e:	1ad3      	subs	r3, r2, r3
   133a0:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
   133a4:	3b01      	subs	r3, #1
   133a6:	00db      	lsls	r3, r3, #3
   133a8:	9a02      	ldr	r2, [sp, #8]
   133aa:	fa22 f303 	lsr.w	r3, r2, r3
   133ae:	f88d 3013 	strb.w	r3, [sp, #19]
      if (transaction == Transaction::kCommand)
      {
        LOG_DEBUG("send = 0x%X", send);
      }
      ssp_->Transfer(send);
   133b2:	9b03      	ldr	r3, [sp, #12]
   133b4:	685b      	ldr	r3, [r3, #4]
   133b6:	f89d 2013 	ldrb.w	r2, [sp, #19]
   133ba:	b292      	uxth	r2, r2
   133bc:	4611      	mov	r1, r2
   133be:	4618      	mov	r0, r3
   133c0:	f7ff fa34 	bl	1282c <Ssp::Transfer(unsigned short)>
    for (size_t i = 0; i < size; i++)
   133c4:	9b05      	ldr	r3, [sp, #20]
   133c6:	3301      	adds	r3, #1
   133c8:	9305      	str	r3, [sp, #20]
   133ca:	e7e2      	b.n	13392 <Ssd1306::Write(unsigned long, Ssd1306::Transaction, unsigned int)+0x36>
    }
    cs_->SetHigh();
   133cc:	9b03      	ldr	r3, [sp, #12]
   133ce:	689b      	ldr	r3, [r3, #8]
   133d0:	4618      	mov	r0, r3
   133d2:	f7fe f9f7 	bl	117c4 <Gpio::SetHigh()>
   133d6:	4623      	mov	r3, r4
   133d8:	4619      	mov	r1, r3
   133da:	4803      	ldr	r0, [pc, #12]	; (133e8 <Ssd1306::Write(unsigned long, Ssd1306::Transaction, unsigned int)+0x8c>)
   133dc:	f002 f8da 	bl	15594 <__cyg_profile_func_exit>
  }
   133e0:	bf00      	nop
   133e2:	b006      	add	sp, #24
   133e4:	bd10      	pop	{r4, pc}
   133e6:	bf00      	nop
   133e8:	0001335d 	.word	0x0001335d

000133ec <Ssd1306::InitializationPanel()>:

  void InitializationPanel()
   133ec:	b510      	push	{r4, lr}
   133ee:	b082      	sub	sp, #8
   133f0:	4674      	mov	r4, lr
   133f2:	9001      	str	r0, [sp, #4]
   133f4:	4623      	mov	r3, r4
   133f6:	4619      	mov	r1, r3
   133f8:	4837      	ldr	r0, [pc, #220]	; (134d8 <Ssd1306::InitializationPanel()+0xec>)
   133fa:	f002 f8b7 	bl	1556c <__cyg_profile_func_enter>
  {
    // This sequence of commands was found in:
    //   datasheets/OLED-display/ER-OLED0.96-1_Series_Datasheet.pdf, page 15

    // turn off oled panel
    Write(0xAE, Transaction::kCommand);
   133fe:	2301      	movs	r3, #1
   13400:	2200      	movs	r2, #0
   13402:	21ae      	movs	r1, #174	; 0xae
   13404:	9801      	ldr	r0, [sp, #4]
   13406:	f7ff ffa9 	bl	1335c <Ssd1306::Write(unsigned long, Ssd1306::Transaction, unsigned int)>

    // set display clock divide ratio/oscillator frequency
    // set divide ratio
    Write(0xD5'80, Transaction::kCommand, 2);
   1340a:	2302      	movs	r3, #2
   1340c:	2200      	movs	r2, #0
   1340e:	f24d 5180 	movw	r1, #54656	; 0xd580
   13412:	9801      	ldr	r0, [sp, #4]
   13414:	f7ff ffa2 	bl	1335c <Ssd1306::Write(unsigned long, Ssd1306::Transaction, unsigned int)>

    // set multiplex ratio(1 to 64)
    // 1/64 duty
    Write(0xA8'3F, Transaction::kCommand, 2);
   13418:	2302      	movs	r3, #2
   1341a:	2200      	movs	r2, #0
   1341c:	f64a 013f 	movw	r1, #43071	; 0xa83f
   13420:	9801      	ldr	r0, [sp, #4]
   13422:	f7ff ff9b 	bl	1335c <Ssd1306::Write(unsigned long, Ssd1306::Transaction, unsigned int)>

    // set display offset = not offset
    Write(0xD3'00, Transaction::kCommand, 2);
   13426:	2302      	movs	r3, #2
   13428:	2200      	movs	r2, #0
   1342a:	f44f 4153 	mov.w	r1, #54016	; 0xd300
   1342e:	9801      	ldr	r0, [sp, #4]
   13430:	f7ff ff94 	bl	1335c <Ssd1306::Write(unsigned long, Ssd1306::Transaction, unsigned int)>

    // Set display start line
    Write(0x40, Transaction::kCommand);
   13434:	2301      	movs	r3, #1
   13436:	2200      	movs	r2, #0
   13438:	2140      	movs	r1, #64	; 0x40
   1343a:	9801      	ldr	r0, [sp, #4]
   1343c:	f7ff ff8e 	bl	1335c <Ssd1306::Write(unsigned long, Ssd1306::Transaction, unsigned int)>

    // Disable Charge Pump
    Write(0x8D'14, Transaction::kCommand, 2);
   13440:	2302      	movs	r3, #2
   13442:	2200      	movs	r2, #0
   13444:	f648 5114 	movw	r1, #36116	; 0x8d14
   13448:	9801      	ldr	r0, [sp, #4]
   1344a:	f7ff ff87 	bl	1335c <Ssd1306::Write(unsigned long, Ssd1306::Transaction, unsigned int)>

    // set segment re-map 128 to 0
    Write(0xA1, Transaction::kCommand);
   1344e:	2301      	movs	r3, #1
   13450:	2200      	movs	r2, #0
   13452:	21a1      	movs	r1, #161	; 0xa1
   13454:	9801      	ldr	r0, [sp, #4]
   13456:	f7ff ff81 	bl	1335c <Ssd1306::Write(unsigned long, Ssd1306::Transaction, unsigned int)>

    // Set COM Output Scan Direction 64 to 0
    Write(0xC8, Transaction::kCommand);
   1345a:	2301      	movs	r3, #1
   1345c:	2200      	movs	r2, #0
   1345e:	21c8      	movs	r1, #200	; 0xc8
   13460:	9801      	ldr	r0, [sp, #4]
   13462:	f7ff ff7b 	bl	1335c <Ssd1306::Write(unsigned long, Ssd1306::Transaction, unsigned int)>

    // set com pins hardware configuration
    Write(0xDA'12, Transaction::kCommand, 2);
   13466:	2302      	movs	r3, #2
   13468:	2200      	movs	r2, #0
   1346a:	f64d 2112 	movw	r1, #55826	; 0xda12
   1346e:	9801      	ldr	r0, [sp, #4]
   13470:	f7ff ff74 	bl	1335c <Ssd1306::Write(unsigned long, Ssd1306::Transaction, unsigned int)>

    // set contrast control register
    Write(0x81'CF, Transaction::kCommand, 2);
   13474:	2302      	movs	r3, #2
   13476:	2200      	movs	r2, #0
   13478:	f248 11cf 	movw	r1, #33231	; 0x81cf
   1347c:	9801      	ldr	r0, [sp, #4]
   1347e:	f7ff ff6d 	bl	1335c <Ssd1306::Write(unsigned long, Ssd1306::Transaction, unsigned int)>

    // Set pre-charge period
    Write(0xD9'F1, Transaction::kCommand, 2);
   13482:	2302      	movs	r3, #2
   13484:	2200      	movs	r2, #0
   13486:	f64d 11f1 	movw	r1, #55793	; 0xd9f1
   1348a:	9801      	ldr	r0, [sp, #4]
   1348c:	f7ff ff66 	bl	1335c <Ssd1306::Write(unsigned long, Ssd1306::Transaction, unsigned int)>

    // Set Vcomh
    Write(0xDB'40, Transaction::kCommand, 2);
   13490:	2302      	movs	r3, #2
   13492:	2200      	movs	r2, #0
   13494:	f64d 3140 	movw	r1, #56128	; 0xdb40
   13498:	9801      	ldr	r0, [sp, #4]
   1349a:	f7ff ff5f 	bl	1335c <Ssd1306::Write(unsigned long, Ssd1306::Transaction, unsigned int)>

    SetHorizontalAddressMode();
   1349e:	9801      	ldr	r0, [sp, #4]
   134a0:	f000 f85e 	bl	13560 <Ssd1306::SetHorizontalAddressMode()>

    // Enable entire display
    Write(0xA4, Transaction::kCommand);
   134a4:	2301      	movs	r3, #1
   134a6:	2200      	movs	r2, #0
   134a8:	21a4      	movs	r1, #164	; 0xa4
   134aa:	9801      	ldr	r0, [sp, #4]
   134ac:	f7ff ff56 	bl	1335c <Ssd1306::Write(unsigned long, Ssd1306::Transaction, unsigned int)>

    // Set display to normal colors
    Write(0xA6, Transaction::kCommand);
   134b0:	2301      	movs	r3, #1
   134b2:	2200      	movs	r2, #0
   134b4:	21a6      	movs	r1, #166	; 0xa6
   134b6:	9801      	ldr	r0, [sp, #4]
   134b8:	f7ff ff50 	bl	1335c <Ssd1306::Write(unsigned long, Ssd1306::Transaction, unsigned int)>

    // Set Display On
    Write(0xAF, Transaction::kCommand);
   134bc:	2301      	movs	r3, #1
   134be:	2200      	movs	r2, #0
   134c0:	21af      	movs	r1, #175	; 0xaf
   134c2:	9801      	ldr	r0, [sp, #4]
   134c4:	f7ff ff4a 	bl	1335c <Ssd1306::Write(unsigned long, Ssd1306::Transaction, unsigned int)>
   134c8:	4623      	mov	r3, r4
   134ca:	4619      	mov	r1, r3
   134cc:	4802      	ldr	r0, [pc, #8]	; (134d8 <Ssd1306::InitializationPanel()+0xec>)
   134ce:	f002 f861 	bl	15594 <__cyg_profile_func_exit>
  }
   134d2:	bf00      	nop
   134d4:	b002      	add	sp, #8
   134d6:	bd10      	pop	{r4, pc}
   134d8:	000133ed 	.word	0x000133ed

000134dc <Ssd1306::Initialize()>:

  void Initialize() final override
   134dc:	b510      	push	{r4, lr}
   134de:	b084      	sub	sp, #16
   134e0:	4674      	mov	r4, lr
   134e2:	9003      	str	r0, [sp, #12]
   134e4:	4623      	mov	r3, r4
   134e6:	4619      	mov	r1, r3
   134e8:	481c      	ldr	r0, [pc, #112]	; (1355c <Ssd1306::Initialize()+0x80>)
   134ea:	f002 f83f 	bl	1556c <__cyg_profile_func_enter>
  {
    cs_->SetAsOutput();
   134ee:	9b03      	ldr	r3, [sp, #12]
   134f0:	689b      	ldr	r3, [r3, #8]
   134f2:	4618      	mov	r0, r3
   134f4:	f7fe f906 	bl	11704 <Gpio::SetAsOutput()>
    dc_->SetAsOutput();
   134f8:	9b03      	ldr	r3, [sp, #12]
   134fa:	68db      	ldr	r3, [r3, #12]
   134fc:	4618      	mov	r0, r3
   134fe:	f7fe f901 	bl	11704 <Gpio::SetAsOutput()>
    cs_->SetHigh();
   13502:	9b03      	ldr	r3, [sp, #12]
   13504:	689b      	ldr	r3, [r3, #8]
   13506:	4618      	mov	r0, r3
   13508:	f7fe f95c 	bl	117c4 <Gpio::SetHigh()>
    dc_->SetHigh();
   1350c:	9b03      	ldr	r3, [sp, #12]
   1350e:	68db      	ldr	r3, [r3, #12]
   13510:	4618      	mov	r0, r3
   13512:	f7fe f957 	bl	117c4 <Gpio::SetHigh()>

    ssp_->SetPeripheralMode(Ssp::MasterSlaveMode::kMaster, Ssp::FrameMode::kSpi,
   13516:	9b03      	ldr	r3, [sp, #12]
   13518:	6858      	ldr	r0, [r3, #4]
   1351a:	2307      	movs	r3, #7
   1351c:	2200      	movs	r2, #0
   1351e:	2100      	movs	r1, #0
   13520:	f7ff fa30 	bl	12984 <Ssp::SetPeripheralMode(SspInterface::MasterSlaveMode, SspInterface::FrameMode, SspInterface::DataSize)>
                            Ssp::DataSize::kEight);
    // Set speed to 1Mhz by dividing by 1 * ClockFrequencyInMHz.
    ssp_->SetClock(false, false, 1, config::kSystemClockRateMhz/3);
   13524:	9b03      	ldr	r3, [sp, #12]
   13526:	6858      	ldr	r0, [r3, #4]
   13528:	2310      	movs	r3, #16
   1352a:	9300      	str	r3, [sp, #0]
   1352c:	2301      	movs	r3, #1
   1352e:	2200      	movs	r2, #0
   13530:	2100      	movs	r1, #0
   13532:	f7ff fbdd 	bl	12cf0 <Ssp::SetClock(bool, bool, unsigned char, unsigned char)>
    ssp_->Initialize();
   13536:	9b03      	ldr	r3, [sp, #12]
   13538:	685b      	ldr	r3, [r3, #4]
   1353a:	4618      	mov	r0, r3
   1353c:	f7ff f8c8 	bl	126d0 <Ssp::Initialize()>

    Clear();
   13540:	9803      	ldr	r0, [sp, #12]
   13542:	f000 f837 	bl	135b4 <Ssd1306::Clear()>
    InitializationPanel();
   13546:	9803      	ldr	r0, [sp, #12]
   13548:	f7ff ff50 	bl	133ec <Ssd1306::InitializationPanel()>
   1354c:	4623      	mov	r3, r4
   1354e:	4619      	mov	r1, r3
   13550:	4802      	ldr	r0, [pc, #8]	; (1355c <Ssd1306::Initialize()+0x80>)
   13552:	f002 f81f 	bl	15594 <__cyg_profile_func_exit>
  }
   13556:	bf00      	nop
   13558:	b004      	add	sp, #16
   1355a:	bd10      	pop	{r4, pc}
   1355c:	000134dd 	.word	0x000134dd

00013560 <Ssd1306::SetHorizontalAddressMode()>:

  void SetHorizontalAddressMode()
   13560:	b510      	push	{r4, lr}
   13562:	b082      	sub	sp, #8
   13564:	4674      	mov	r4, lr
   13566:	9001      	str	r0, [sp, #4]
   13568:	4623      	mov	r3, r4
   1356a:	4619      	mov	r1, r3
   1356c:	480e      	ldr	r0, [pc, #56]	; (135a8 <Ssd1306::SetHorizontalAddressMode()+0x48>)
   1356e:	f001 fffd 	bl	1556c <__cyg_profile_func_enter>
  {
    // Set Addressing mode
    // Addressing mode = Horizontal Mode (0b00)
    Write(0x20'00, Transaction::kCommand, 2);
   13572:	2302      	movs	r3, #2
   13574:	2200      	movs	r2, #0
   13576:	f44f 5100 	mov.w	r1, #8192	; 0x2000
   1357a:	9801      	ldr	r0, [sp, #4]
   1357c:	f7ff feee 	bl	1335c <Ssd1306::Write(unsigned long, Ssd1306::Transaction, unsigned int)>
    // Set Column Addresses
    // Set Column Address start = Column 0
    // Set Column Address start = Column 127
    Write(0x21'00'7F, Transaction::kCommand, 3);
   13580:	2303      	movs	r3, #3
   13582:	2200      	movs	r2, #0
   13584:	4909      	ldr	r1, [pc, #36]	; (135ac <Ssd1306::SetHorizontalAddressMode()+0x4c>)
   13586:	9801      	ldr	r0, [sp, #4]
   13588:	f7ff fee8 	bl	1335c <Ssd1306::Write(unsigned long, Ssd1306::Transaction, unsigned int)>
    // Set Page Addresses
    // Set Page Address start = Page 0
    // Set Page Address start = Page 7
    Write(0x22'00'07, Transaction::kCommand, 3);
   1358c:	2303      	movs	r3, #3
   1358e:	2200      	movs	r2, #0
   13590:	4907      	ldr	r1, [pc, #28]	; (135b0 <Ssd1306::SetHorizontalAddressMode()+0x50>)
   13592:	9801      	ldr	r0, [sp, #4]
   13594:	f7ff fee2 	bl	1335c <Ssd1306::Write(unsigned long, Ssd1306::Transaction, unsigned int)>
   13598:	4623      	mov	r3, r4
   1359a:	4619      	mov	r1, r3
   1359c:	4802      	ldr	r0, [pc, #8]	; (135a8 <Ssd1306::SetHorizontalAddressMode()+0x48>)
   1359e:	f001 fff9 	bl	15594 <__cyg_profile_func_exit>
  }
   135a2:	bf00      	nop
   135a4:	b002      	add	sp, #8
   135a6:	bd10      	pop	{r4, pc}
   135a8:	00013561 	.word	0x00013561
   135ac:	0021007f 	.word	0x0021007f
   135b0:	00220007 	.word	0x00220007

000135b4 <Ssd1306::Clear()>:
  /// Clears the internal bitmap_ to zero (or a user defined clear_value)
  void Clear() final override
   135b4:	b510      	push	{r4, lr}
   135b6:	b082      	sub	sp, #8
   135b8:	4674      	mov	r4, lr
   135ba:	9001      	str	r0, [sp, #4]
   135bc:	4623      	mov	r3, r4
   135be:	4619      	mov	r1, r3
   135c0:	4809      	ldr	r0, [pc, #36]	; (135e8 <Ssd1306::Clear()+0x34>)
   135c2:	f001 ffd3 	bl	1556c <__cyg_profile_func_enter>
  {
    memset(bitmap_, 0x00, sizeof(bitmap_));
   135c6:	9b01      	ldr	r3, [sp, #4]
   135c8:	3368      	adds	r3, #104	; 0x68
   135ca:	f240 62c1 	movw	r2, #1729	; 0x6c1
   135ce:	2100      	movs	r1, #0
   135d0:	4618      	mov	r0, r3
   135d2:	f004 ff2f 	bl	18434 <memset>
   135d6:	4623      	mov	r3, r4
   135d8:	4619      	mov	r1, r3
   135da:	4803      	ldr	r0, [pc, #12]	; (135e8 <Ssd1306::Clear()+0x34>)
   135dc:	f001 ffda 	bl	15594 <__cyg_profile_func_exit>
  }
   135e0:	bf00      	nop
   135e2:	b002      	add	sp, #8
   135e4:	bd10      	pop	{r4, pc}
   135e6:	bf00      	nop
   135e8:	000135b5 	.word	0x000135b5

000135ec <Ssd1306::DrawPixel(long, long, PixelDisplayInterface::Color_t)>:
  void Fill()
  {
    memset(bitmap_, 0xFF, sizeof(bitmap_));
  }
  void DrawPixel(int32_t x, int32_t y, Color_t color) final override
   135ec:	b510      	push	{r4, lr}
   135ee:	b08c      	sub	sp, #48	; 0x30
   135f0:	4674      	mov	r4, lr
   135f2:	9003      	str	r0, [sp, #12]
   135f4:	9102      	str	r1, [sp, #8]
   135f6:	9201      	str	r2, [sp, #4]
   135f8:	9300      	str	r3, [sp, #0]
   135fa:	4623      	mov	r3, r4
   135fc:	4619      	mov	r1, r3
   135fe:	481f      	ldr	r0, [pc, #124]	; (1367c <Ssd1306::DrawPixel(long, long, PixelDisplayInterface::Color_t)+0x90>)
   13600:	f001 ffb4 	bl	1556c <__cyg_profile_func_enter>
  {
    // The 3 least significant bits hold the bit position within the byte
    uint32_t bit_position = y & 0b111;
   13604:	9b01      	ldr	r3, [sp, #4]
   13606:	f003 0307 	and.w	r3, r3, #7
   1360a:	930b      	str	r3, [sp, #44]	; 0x2c
    // Each byte makes up a vertical column.
    // Shifting by 3, which also divides by 8 (the 8-bits of a column), will
    // be the row that we need to edit.
    uint32_t row = y >> 3;
   1360c:	9b01      	ldr	r3, [sp, #4]
   1360e:	10db      	asrs	r3, r3, #3
   13610:	930a      	str	r3, [sp, #40]	; 0x28
    // Mask to clear the bit
    uint32_t clear_mask = ~(1 << bit_position);
   13612:	2201      	movs	r2, #1
   13614:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   13616:	fa02 f303 	lsl.w	r3, r2, r3
   1361a:	43db      	mvns	r3, r3
   1361c:	9309      	str	r3, [sp, #36]	; 0x24
    // Mask to set the bit, if color.alpha != 0
    bool pixel_is_on  = (color.alpha != 0);
   1361e:	f89d 3002 	ldrb.w	r3, [sp, #2]
   13622:	2b00      	cmp	r3, #0
   13624:	bf14      	ite	ne
   13626:	2301      	movne	r3, #1
   13628:	2300      	moveq	r3, #0
   1362a:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
    uint32_t set_mask = pixel_is_on << bit_position;
   1362e:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
   13632:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   13634:	fa02 f303 	lsl.w	r3, r2, r3
   13638:	9307      	str	r3, [sp, #28]
    // Address of the pixel column to edit
    uint8_t * pixel_column = &(bitmap_[row][x]);
   1363a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1363c:	4613      	mov	r3, r2
   1363e:	015b      	lsls	r3, r3, #5
   13640:	4413      	add	r3, r2
   13642:	009b      	lsls	r3, r3, #2
   13644:	4413      	add	r3, r2
   13646:	9a02      	ldr	r2, [sp, #8]
   13648:	4413      	add	r3, r2
   1364a:	3368      	adds	r3, #104	; 0x68
   1364c:	9a03      	ldr	r2, [sp, #12]
   1364e:	4413      	add	r3, r2
   13650:	9306      	str	r3, [sp, #24]
    // Read pixel column and update the pixel
    uint32_t result = (*pixel_column & clear_mask) | set_mask;
   13652:	9b06      	ldr	r3, [sp, #24]
   13654:	781b      	ldrb	r3, [r3, #0]
   13656:	461a      	mov	r2, r3
   13658:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1365a:	4013      	ands	r3, r2
   1365c:	9a07      	ldr	r2, [sp, #28]
   1365e:	4313      	orrs	r3, r2
   13660:	9305      	str	r3, [sp, #20]
    // Update pixel with the result of this operation
    *pixel_column = static_cast<uint8_t>(result);
   13662:	9b05      	ldr	r3, [sp, #20]
   13664:	b2da      	uxtb	r2, r3
   13666:	9b06      	ldr	r3, [sp, #24]
   13668:	701a      	strb	r2, [r3, #0]
   1366a:	4623      	mov	r3, r4
   1366c:	4619      	mov	r1, r3
   1366e:	4803      	ldr	r0, [pc, #12]	; (1367c <Ssd1306::DrawPixel(long, long, PixelDisplayInterface::Color_t)+0x90>)
   13670:	f001 ff90 	bl	15594 <__cyg_profile_func_exit>
  }
   13674:	bf00      	nop
   13676:	b00c      	add	sp, #48	; 0x30
   13678:	bd10      	pop	{r4, pc}
   1367a:	bf00      	nop
   1367c:	000135ed 	.word	0x000135ed

00013680 <Ssd1306::Update()>:
  /// Writes internal bitmap_ to the screen
  void Update() final override
   13680:	b510      	push	{r4, lr}
   13682:	b084      	sub	sp, #16
   13684:	4674      	mov	r4, lr
   13686:	9001      	str	r0, [sp, #4]
   13688:	4623      	mov	r3, r4
   1368a:	4619      	mov	r1, r3
   1368c:	4818      	ldr	r0, [pc, #96]	; (136f0 <Ssd1306::Update()+0x70>)
   1368e:	f001 ff6d 	bl	1556c <__cyg_profile_func_enter>
  {
    SetHorizontalAddressMode();
   13692:	9801      	ldr	r0, [sp, #4]
   13694:	f7ff ff64 	bl	13560 <Ssd1306::SetHorizontalAddressMode()>
    for (size_t row = 0; row < kRows; row++)
   13698:	2300      	movs	r3, #0
   1369a:	9303      	str	r3, [sp, #12]
   1369c:	9b03      	ldr	r3, [sp, #12]
   1369e:	2b07      	cmp	r3, #7
   136a0:	d81e      	bhi.n	136e0 <Ssd1306::Update()+0x60>
    {
      for (size_t column = 0; column < kColumns; column++)
   136a2:	2300      	movs	r3, #0
   136a4:	9302      	str	r3, [sp, #8]
   136a6:	9b02      	ldr	r3, [sp, #8]
   136a8:	2b7f      	cmp	r3, #127	; 0x7f
   136aa:	d815      	bhi.n	136d8 <Ssd1306::Update()+0x58>
      {
        Write(bitmap_[row][column], Transaction::kData);
   136ac:	9901      	ldr	r1, [sp, #4]
   136ae:	9a03      	ldr	r2, [sp, #12]
   136b0:	4613      	mov	r3, r2
   136b2:	015b      	lsls	r3, r3, #5
   136b4:	4413      	add	r3, r2
   136b6:	009b      	lsls	r3, r3, #2
   136b8:	4413      	add	r3, r2
   136ba:	18ca      	adds	r2, r1, r3
   136bc:	9b02      	ldr	r3, [sp, #8]
   136be:	4413      	add	r3, r2
   136c0:	3368      	adds	r3, #104	; 0x68
   136c2:	781b      	ldrb	r3, [r3, #0]
   136c4:	4619      	mov	r1, r3
   136c6:	2301      	movs	r3, #1
   136c8:	2201      	movs	r2, #1
   136ca:	9801      	ldr	r0, [sp, #4]
   136cc:	f7ff fe46 	bl	1335c <Ssd1306::Write(unsigned long, Ssd1306::Transaction, unsigned int)>
      for (size_t column = 0; column < kColumns; column++)
   136d0:	9b02      	ldr	r3, [sp, #8]
   136d2:	3301      	adds	r3, #1
   136d4:	9302      	str	r3, [sp, #8]
   136d6:	e7e6      	b.n	136a6 <Ssd1306::Update()+0x26>
    for (size_t row = 0; row < kRows; row++)
   136d8:	9b03      	ldr	r3, [sp, #12]
   136da:	3301      	adds	r3, #1
   136dc:	9303      	str	r3, [sp, #12]
   136de:	e7dd      	b.n	1369c <Ssd1306::Update()+0x1c>
   136e0:	4623      	mov	r3, r4
   136e2:	4619      	mov	r1, r3
   136e4:	4802      	ldr	r0, [pc, #8]	; (136f0 <Ssd1306::Update()+0x70>)
   136e6:	f001 ff55 	bl	15594 <__cyg_profile_func_exit>
      }
    }
  }
   136ea:	bf00      	nop
   136ec:	b004      	add	sp, #16
   136ee:	bd10      	pop	{r4, pc}
   136f0:	00013681 	.word	0x00013681

000136f4 <Graphics::Graphics(PixelDisplayInterface*)>:
#include "utility/log.hpp"

class Graphics
{
 public:
  explicit Graphics(PixelDisplayInterface * display)
   136f4:	b530      	push	{r4, r5, lr}
   136f6:	b083      	sub	sp, #12
   136f8:	4675      	mov	r5, lr
   136fa:	9001      	str	r0, [sp, #4]
   136fc:	9100      	str	r1, [sp, #0]
   136fe:	462b      	mov	r3, r5
   13700:	4619      	mov	r1, r3
   13702:	481e      	ldr	r0, [pc, #120]	; (1377c <Graphics::Graphics(PixelDisplayInterface*)+0x88>)
   13704:	f001 ff32 	bl	1556c <__cyg_profile_func_enter>
      : display_(display), color_(), width_(0), height_(0)
   13708:	9b01      	ldr	r3, [sp, #4]
   1370a:	9a00      	ldr	r2, [sp, #0]
   1370c:	601a      	str	r2, [r3, #0]
   1370e:	9b01      	ldr	r3, [sp, #4]
   13710:	3304      	adds	r3, #4
   13712:	4618      	mov	r0, r3
   13714:	f7ff fcee 	bl	130f4 <PixelDisplayInterface::Color_t::Color_t()>
   13718:	9b01      	ldr	r3, [sp, #4]
   1371a:	2200      	movs	r2, #0
   1371c:	609a      	str	r2, [r3, #8]
   1371e:	9b01      	ldr	r3, [sp, #4]
   13720:	2200      	movs	r2, #0
   13722:	60da      	str	r2, [r3, #12]
  {
    width_  = display->GetWidth();
   13724:	9b00      	ldr	r3, [sp, #0]
   13726:	681b      	ldr	r3, [r3, #0]
   13728:	681b      	ldr	r3, [r3, #0]
   1372a:	9800      	ldr	r0, [sp, #0]
   1372c:	4798      	blx	r3
   1372e:	4602      	mov	r2, r0
   13730:	9b01      	ldr	r3, [sp, #4]
   13732:	609a      	str	r2, [r3, #8]
    height_ = display->GetHeight();
   13734:	9b00      	ldr	r3, [sp, #0]
   13736:	681b      	ldr	r3, [r3, #0]
   13738:	3304      	adds	r3, #4
   1373a:	681b      	ldr	r3, [r3, #0]
   1373c:	9800      	ldr	r0, [sp, #0]
   1373e:	4798      	blx	r3
   13740:	4602      	mov	r2, r0
   13742:	9b01      	ldr	r3, [sp, #4]
   13744:	60da      	str	r2, [r3, #12]
    color_  = display->AvailableColors();
   13746:	9b00      	ldr	r3, [sp, #0]
   13748:	681b      	ldr	r3, [r3, #0]
   1374a:	3308      	adds	r3, #8
   1374c:	681b      	ldr	r3, [r3, #0]
   1374e:	9c01      	ldr	r4, [sp, #4]
   13750:	9800      	ldr	r0, [sp, #0]
   13752:	4798      	blx	r3
   13754:	4603      	mov	r3, r0
   13756:	461a      	mov	r2, r3
   13758:	7122      	strb	r2, [r4, #4]
   1375a:	f3c3 2207 	ubfx	r2, r3, #8, #8
   1375e:	7162      	strb	r2, [r4, #5]
   13760:	f3c3 4307 	ubfx	r3, r3, #16, #8
   13764:	71a3      	strb	r3, [r4, #6]
  }
   13766:	9c01      	ldr	r4, [sp, #4]
   13768:	462b      	mov	r3, r5
   1376a:	4619      	mov	r1, r3
   1376c:	4803      	ldr	r0, [pc, #12]	; (1377c <Graphics::Graphics(PixelDisplayInterface*)+0x88>)
   1376e:	f001 ff11 	bl	15594 <__cyg_profile_func_exit>
   13772:	4623      	mov	r3, r4
   13774:	4618      	mov	r0, r3
   13776:	b003      	add	sp, #12
   13778:	bd30      	pop	{r4, r5, pc}
   1377a:	bf00      	nop
   1377c:	000136f5 	.word	0x000136f5

00013780 <OledTerminal::OledTerminal()>:
#include <cstdint>

#include "L2_HAL/displays/oled/ssd1306.hpp"
#include "L3_Application/graphics.hpp"

class OledTerminal
   13780:	b530      	push	{r4, r5, lr}
   13782:	b083      	sub	sp, #12
   13784:	4675      	mov	r5, lr
   13786:	9001      	str	r0, [sp, #4]
   13788:	462b      	mov	r3, r5
   1378a:	4619      	mov	r1, r3
   1378c:	4816      	ldr	r0, [pc, #88]	; (137e8 <OledTerminal::OledTerminal()+0x68>)
   1378e:	f001 feed 	bl	1556c <__cyg_profile_func_enter>
   13792:	9b01      	ldr	r3, [sp, #4]
   13794:	4618      	mov	r0, r3
   13796:	f7ff fd37 	bl	13208 <Ssd1306::Ssd1306()>
   1379a:	9b01      	ldr	r3, [sp, #4]
   1379c:	f203 732c 	addw	r3, r3, #1836	; 0x72c
   137a0:	9a01      	ldr	r2, [sp, #4]
   137a2:	4611      	mov	r1, r2
   137a4:	4618      	mov	r0, r3
   137a6:	f7ff ffa5 	bl	136f4 <Graphics::Graphics(PixelDisplayInterface*)>
   137aa:	9b01      	ldr	r3, [sp, #4]
   137ac:	2200      	movs	r2, #0
   137ae:	f8c3 273c 	str.w	r2, [r3, #1852]	; 0x73c
   137b2:	9b01      	ldr	r3, [sp, #4]
   137b4:	2200      	movs	r2, #0
   137b6:	f8c3 2740 	str.w	r2, [r3, #1856]	; 0x740
   137ba:	9b01      	ldr	r3, [sp, #4]
   137bc:	2200      	movs	r2, #0
   137be:	f8c3 2744 	str.w	r2, [r3, #1860]	; 0x744
   137c2:	9b01      	ldr	r3, [sp, #4]
   137c4:	f503 63e9 	add.w	r3, r3, #1864	; 0x748
   137c8:	2280      	movs	r2, #128	; 0x80
   137ca:	2100      	movs	r1, #0
   137cc:	4618      	mov	r0, r3
   137ce:	f004 fe31 	bl	18434 <memset>
   137d2:	9c01      	ldr	r4, [sp, #4]
   137d4:	462b      	mov	r3, r5
   137d6:	4619      	mov	r1, r3
   137d8:	4803      	ldr	r0, [pc, #12]	; (137e8 <OledTerminal::OledTerminal()+0x68>)
   137da:	f001 fedb 	bl	15594 <__cyg_profile_func_exit>
   137de:	4623      	mov	r3, r4
   137e0:	4618      	mov	r0, r3
   137e2:	b003      	add	sp, #12
   137e4:	bd30      	pop	{r4, r5, pc}
   137e6:	bf00      	nop
   137e8:	00013781 	.word	0x00013781

000137ec <main>:
  oled_terminal.printf("Returned data: %x %x %x %x\n", data[0], data[1], data[2], data[3]);
}


int main() 
{ 
   137ec:	b530      	push	{r4, r5, lr}
   137ee:	b085      	sub	sp, #20
   137f0:	4675      	mov	r5, lr
   137f2:	462b      	mov	r3, r5
   137f4:	4619      	mov	r1, r3
   137f6:	4818      	ldr	r0, [pc, #96]	; (13858 <main+0x6c>)
   137f8:	f001 feb8 	bl	1556c <__cyg_profile_func_enter>
  LOG_INFO("Start\n");
   137fc:	234f      	movs	r3, #79	; 0x4f
   137fe:	4a17      	ldr	r2, [pc, #92]	; (1385c <main+0x70>)
   13800:	4917      	ldr	r1, [pc, #92]	; (13860 <main+0x74>)
   13802:	4818      	ldr	r0, [pc, #96]	; (13864 <main+0x78>)
   13804:	f003 f90e 	bl	16a24 <printf>
  
  LabSpi Demo(LabSpi::kSS2);
   13808:	ab02      	add	r3, sp, #8
   1380a:	2102      	movs	r1, #2
   1380c:	4618      	mov	r0, r3
   1380e:	f7fc fe45 	bl	1049c <LabSpi::LabSpi(LabSpi::Peripheral)>
  Demo.Initialize(8,LabSpi::kSPI, 1, LabSpi::kMaster);
   13812:	a802      	add	r0, sp, #8
   13814:	2300      	movs	r3, #0
   13816:	9300      	str	r3, [sp, #0]
   13818:	2301      	movs	r3, #1
   1381a:	2200      	movs	r2, #0
   1381c:	2108      	movs	r1, #8
   1381e:	f7fc fe59 	bl	104d4 <LabSpi::Initialize(unsigned char, LabSpi::FrameModes, unsigned char, LabSpi::Master_Slave)>
  Demo.WriteEnable();
   13822:	ab02      	add	r3, sp, #8
   13824:	4618      	mov	r0, r3
   13826:	f7fd f9e3 	bl	10bf0 <LabSpi::WriteEnable()>
  Demo.ReadStatus();
   1382a:	ab02      	add	r3, sp, #8
   1382c:	4618      	mov	r0, r3
   1382e:	f7fd f963 	bl	10af8 <LabSpi::ReadStatus()>
  Demo.ReadBytes();
   13832:	ab02      	add	r3, sp, #8
   13834:	4618      	mov	r0, r3
   13836:	f7fd f9f9 	bl	10c2c <LabSpi::ReadBytes()>
  Demo.ReadDevice();
   1383a:	ab02      	add	r3, sp, #8
   1383c:	4618      	mov	r0, r3
   1383e:	f7fd f993 	bl	10b68 <LabSpi::ReadDevice()>
  
  //oled_terminal.Initialize();
  //SpiInitialize();
  //ReadSignature();
  
}
   13842:	2400      	movs	r4, #0
   13844:	462b      	mov	r3, r5
   13846:	4619      	mov	r1, r3
   13848:	4803      	ldr	r0, [pc, #12]	; (13858 <main+0x6c>)
   1384a:	f001 fea3 	bl	15594 <__cyg_profile_func_exit>
   1384e:	4623      	mov	r3, r4
   13850:	4618      	mov	r0, r3
   13852:	b005      	add	sp, #20
   13854:	bd30      	pop	{r4, r5, pc}
   13856:	bf00      	nop
   13858:	000137ed 	.word	0x000137ed
   1385c:	0001905c 	.word	0x0001905c
   13860:	00018e34 	.word	0x00018e34
   13864:	00018d00 	.word	0x00018d00

00013868 <unsigned long bit::Set<unsigned long>(unsigned long, unsigned long)>:
constexpr T Set(T target, uint32_t position)
   13868:	b530      	push	{r4, r5, lr}
   1386a:	b083      	sub	sp, #12
   1386c:	4675      	mov	r5, lr
   1386e:	9001      	str	r0, [sp, #4]
   13870:	9100      	str	r1, [sp, #0]
   13872:	462b      	mov	r3, r5
   13874:	4619      	mov	r1, r3
   13876:	480a      	ldr	r0, [pc, #40]	; (138a0 <unsigned long bit::Set<unsigned long>(unsigned long, unsigned long)+0x38>)
   13878:	f001 fe78 	bl	1556c <__cyg_profile_func_enter>
  return target | (1 << position);
   1387c:	2201      	movs	r2, #1
   1387e:	9b00      	ldr	r3, [sp, #0]
   13880:	fa02 f303 	lsl.w	r3, r2, r3
   13884:	461a      	mov	r2, r3
   13886:	9b01      	ldr	r3, [sp, #4]
   13888:	ea42 0403 	orr.w	r4, r2, r3
   1388c:	462b      	mov	r3, r5
   1388e:	4619      	mov	r1, r3
   13890:	4803      	ldr	r0, [pc, #12]	; (138a0 <unsigned long bit::Set<unsigned long>(unsigned long, unsigned long)+0x38>)
   13892:	f001 fe7f 	bl	15594 <__cyg_profile_func_exit>
   13896:	4623      	mov	r3, r4
}
   13898:	4618      	mov	r0, r3
   1389a:	b003      	add	sp, #12
   1389c:	bd30      	pop	{r4, r5, pc}
   1389e:	bf00      	nop
   138a0:	00013869 	.word	0x00013869

000138a4 <bool bit::Read<unsigned long>(unsigned long, unsigned long)>:
[[gnu::always_inline]][[nodiscard]] constexpr bool Read(T target,
   138a4:	b530      	push	{r4, r5, lr}
   138a6:	b083      	sub	sp, #12
   138a8:	4675      	mov	r5, lr
   138aa:	9001      	str	r0, [sp, #4]
   138ac:	9100      	str	r1, [sp, #0]
   138ae:	462b      	mov	r3, r5
   138b0:	4619      	mov	r1, r3
   138b2:	480c      	ldr	r0, [pc, #48]	; (138e4 <bool bit::Read<unsigned long>(unsigned long, unsigned long)+0x40>)
   138b4:	f001 fe5a 	bl	1556c <__cyg_profile_func_enter>
  return static_cast<bool>(target & (1 << position));
   138b8:	2201      	movs	r2, #1
   138ba:	9b00      	ldr	r3, [sp, #0]
   138bc:	fa02 f303 	lsl.w	r3, r2, r3
   138c0:	461a      	mov	r2, r3
   138c2:	9b01      	ldr	r3, [sp, #4]
   138c4:	4013      	ands	r3, r2
   138c6:	2b00      	cmp	r3, #0
   138c8:	bf14      	ite	ne
   138ca:	2301      	movne	r3, #1
   138cc:	2300      	moveq	r3, #0
   138ce:	b2dc      	uxtb	r4, r3
   138d0:	462b      	mov	r3, r5
   138d2:	4619      	mov	r1, r3
   138d4:	4803      	ldr	r0, [pc, #12]	; (138e4 <bool bit::Read<unsigned long>(unsigned long, unsigned long)+0x40>)
   138d6:	f001 fe5d 	bl	15594 <__cyg_profile_func_exit>
   138da:	4623      	mov	r3, r4
}
   138dc:	4618      	mov	r0, r3
   138de:	b003      	add	sp, #12
   138e0:	bd30      	pop	{r4, r5, pc}
   138e2:	bf00      	nop
   138e4:	000138a5 	.word	0x000138a5

000138e8 <unsigned long bit::Insert<unsigned long, unsigned char>(unsigned long, unsigned char, unsigned long, unsigned long)>:
constexpr T Insert(T target, U value, uint32_t position, uint32_t width = 1)
   138e8:	b530      	push	{r4, r5, lr}
   138ea:	b089      	sub	sp, #36	; 0x24
   138ec:	4675      	mov	r5, lr
   138ee:	9003      	str	r0, [sp, #12]
   138f0:	9201      	str	r2, [sp, #4]
   138f2:	9300      	str	r3, [sp, #0]
   138f4:	460b      	mov	r3, r1
   138f6:	f88d 300b 	strb.w	r3, [sp, #11]
   138fa:	462b      	mov	r3, r5
   138fc:	4619      	mov	r1, r3
   138fe:	4816      	ldr	r0, [pc, #88]	; (13958 <unsigned long bit::Insert<unsigned long, unsigned char>(unsigned long, unsigned char, unsigned long, unsigned long)+0x70>)
   13900:	f001 fe34 	bl	1556c <__cyg_profile_func_enter>
  constexpr UnsignedT kFieldOfOnes = GenerateFieldOfOnes<T>();
   13904:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   13908:	9307      	str	r3, [sp, #28]
  constexpr size_t kTargetWidth     = sizeof(T) * 8;
   1390a:	2320      	movs	r3, #32
   1390c:	9306      	str	r3, [sp, #24]
  UnsignedT mask   = kFieldOfOnes >> (kTargetWidth - width);
   1390e:	9b00      	ldr	r3, [sp, #0]
   13910:	f1c3 0320 	rsb	r3, r3, #32
   13914:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   13918:	fa22 f303 	lsr.w	r3, r2, r3
   1391c:	9305      	str	r3, [sp, #20]
  target &= ~(mask << position);
   1391e:	9a05      	ldr	r2, [sp, #20]
   13920:	9b01      	ldr	r3, [sp, #4]
   13922:	fa02 f303 	lsl.w	r3, r2, r3
   13926:	43db      	mvns	r3, r3
   13928:	9a03      	ldr	r2, [sp, #12]
   1392a:	4013      	ands	r3, r2
   1392c:	9303      	str	r3, [sp, #12]
  target |= (value & mask) << position;
   1392e:	f89d 200b 	ldrb.w	r2, [sp, #11]
   13932:	9b05      	ldr	r3, [sp, #20]
   13934:	401a      	ands	r2, r3
   13936:	9b01      	ldr	r3, [sp, #4]
   13938:	fa02 f303 	lsl.w	r3, r2, r3
   1393c:	9a03      	ldr	r2, [sp, #12]
   1393e:	4313      	orrs	r3, r2
   13940:	9303      	str	r3, [sp, #12]
  return target;
   13942:	9c03      	ldr	r4, [sp, #12]
   13944:	462b      	mov	r3, r5
   13946:	4619      	mov	r1, r3
   13948:	4803      	ldr	r0, [pc, #12]	; (13958 <unsigned long bit::Insert<unsigned long, unsigned char>(unsigned long, unsigned char, unsigned long, unsigned long)+0x70>)
   1394a:	f001 fe23 	bl	15594 <__cyg_profile_func_exit>
   1394e:	4623      	mov	r3, r4
}
   13950:	4618      	mov	r0, r3
   13952:	b009      	add	sp, #36	; 0x24
   13954:	bd30      	pop	{r4, r5, pc}
   13956:	bf00      	nop
   13958:	000138e9 	.word	0x000138e9

0001395c <unsigned long bit::Extract<unsigned long>(unsigned long, unsigned long, unsigned long)>:
constexpr T Extract(T target, uint32_t position, uint32_t width = 1)
   1395c:	b530      	push	{r4, r5, lr}
   1395e:	b089      	sub	sp, #36	; 0x24
   13960:	4675      	mov	r5, lr
   13962:	9003      	str	r0, [sp, #12]
   13964:	9102      	str	r1, [sp, #8]
   13966:	9201      	str	r2, [sp, #4]
   13968:	462b      	mov	r3, r5
   1396a:	4619      	mov	r1, r3
   1396c:	480f      	ldr	r0, [pc, #60]	; (139ac <unsigned long bit::Extract<unsigned long>(unsigned long, unsigned long, unsigned long)+0x50>)
   1396e:	f001 fdfd 	bl	1556c <__cyg_profile_func_enter>
  constexpr UnsignedT kFieldOfOnes = GenerateFieldOfOnes<T>();
   13972:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   13976:	9307      	str	r3, [sp, #28]
  constexpr size_t kTargetWidth     = sizeof(T) * 8;
   13978:	2320      	movs	r3, #32
   1397a:	9306      	str	r3, [sp, #24]
  UnsignedT mask   = kFieldOfOnes >> (kTargetWidth - width);
   1397c:	9b01      	ldr	r3, [sp, #4]
   1397e:	f1c3 0320 	rsb	r3, r3, #32
   13982:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   13986:	fa22 f303 	lsr.w	r3, r2, r3
   1398a:	9305      	str	r3, [sp, #20]
  return (target >> position) & mask;
   1398c:	9a03      	ldr	r2, [sp, #12]
   1398e:	9b02      	ldr	r3, [sp, #8]
   13990:	40da      	lsrs	r2, r3
   13992:	9b05      	ldr	r3, [sp, #20]
   13994:	ea02 0403 	and.w	r4, r2, r3
   13998:	462b      	mov	r3, r5
   1399a:	4619      	mov	r1, r3
   1399c:	4803      	ldr	r0, [pc, #12]	; (139ac <unsigned long bit::Extract<unsigned long>(unsigned long, unsigned long, unsigned long)+0x50>)
   1399e:	f001 fdf9 	bl	15594 <__cyg_profile_func_exit>
   139a2:	4623      	mov	r3, r4
}
   139a4:	4618      	mov	r0, r3
   139a6:	b009      	add	sp, #36	; 0x24
   139a8:	bd30      	pop	{r4, r5, pc}
   139aa:	bf00      	nop
   139ac:	0001395d 	.word	0x0001395d

000139b0 <unsigned long bit::Insert<unsigned long, bool>(unsigned long, bool, unsigned long, unsigned long)>:
constexpr T Insert(T target, U value, uint32_t position, uint32_t width = 1)
   139b0:	b530      	push	{r4, r5, lr}
   139b2:	b089      	sub	sp, #36	; 0x24
   139b4:	4675      	mov	r5, lr
   139b6:	9003      	str	r0, [sp, #12]
   139b8:	9201      	str	r2, [sp, #4]
   139ba:	9300      	str	r3, [sp, #0]
   139bc:	460b      	mov	r3, r1
   139be:	f88d 300b 	strb.w	r3, [sp, #11]
   139c2:	462b      	mov	r3, r5
   139c4:	4619      	mov	r1, r3
   139c6:	4816      	ldr	r0, [pc, #88]	; (13a20 <unsigned long bit::Insert<unsigned long, bool>(unsigned long, bool, unsigned long, unsigned long)+0x70>)
   139c8:	f001 fdd0 	bl	1556c <__cyg_profile_func_enter>
  constexpr UnsignedT kFieldOfOnes = GenerateFieldOfOnes<T>();
   139cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   139d0:	9307      	str	r3, [sp, #28]
  constexpr size_t kTargetWidth     = sizeof(T) * 8;
   139d2:	2320      	movs	r3, #32
   139d4:	9306      	str	r3, [sp, #24]
  UnsignedT mask   = kFieldOfOnes >> (kTargetWidth - width);
   139d6:	9b00      	ldr	r3, [sp, #0]
   139d8:	f1c3 0320 	rsb	r3, r3, #32
   139dc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   139e0:	fa22 f303 	lsr.w	r3, r2, r3
   139e4:	9305      	str	r3, [sp, #20]
  target &= ~(mask << position);
   139e6:	9a05      	ldr	r2, [sp, #20]
   139e8:	9b01      	ldr	r3, [sp, #4]
   139ea:	fa02 f303 	lsl.w	r3, r2, r3
   139ee:	43db      	mvns	r3, r3
   139f0:	9a03      	ldr	r2, [sp, #12]
   139f2:	4013      	ands	r3, r2
   139f4:	9303      	str	r3, [sp, #12]
  target |= (value & mask) << position;
   139f6:	f89d 200b 	ldrb.w	r2, [sp, #11]
   139fa:	9b05      	ldr	r3, [sp, #20]
   139fc:	401a      	ands	r2, r3
   139fe:	9b01      	ldr	r3, [sp, #4]
   13a00:	fa02 f303 	lsl.w	r3, r2, r3
   13a04:	9a03      	ldr	r2, [sp, #12]
   13a06:	4313      	orrs	r3, r2
   13a08:	9303      	str	r3, [sp, #12]
  return target;
   13a0a:	9c03      	ldr	r4, [sp, #12]
   13a0c:	462b      	mov	r3, r5
   13a0e:	4619      	mov	r1, r3
   13a10:	4803      	ldr	r0, [pc, #12]	; (13a20 <unsigned long bit::Insert<unsigned long, bool>(unsigned long, bool, unsigned long, unsigned long)+0x70>)
   13a12:	f001 fdbf 	bl	15594 <__cyg_profile_func_exit>
   13a16:	4623      	mov	r3, r4
}
   13a18:	4618      	mov	r0, r3
   13a1a:	b009      	add	sp, #36	; 0x24
   13a1c:	bd30      	pop	{r4, r5, pc}
   13a1e:	bf00      	nop
   13a20:	000139b1 	.word	0x000139b1

00013a24 <__static_initialization_and_destruction_0(int, int)>:
   13a24:	b510      	push	{r4, lr}
   13a26:	b082      	sub	sp, #8
   13a28:	4674      	mov	r4, lr
   13a2a:	9001      	str	r0, [sp, #4]
   13a2c:	9100      	str	r1, [sp, #0]
   13a2e:	4623      	mov	r3, r4
   13a30:	4619      	mov	r1, r3
   13a32:	4815      	ldr	r0, [pc, #84]	; (13a88 <__static_initialization_and_destruction_0(int, int)+0x64>)
   13a34:	f001 fd9a 	bl	1556c <__cyg_profile_func_enter>
   13a38:	9b01      	ldr	r3, [sp, #4]
   13a3a:	2b01      	cmp	r3, #1
   13a3c:	d11b      	bne.n	13a76 <__static_initialization_and_destruction_0(int, int)+0x52>
   13a3e:	9b00      	ldr	r3, [sp, #0]
   13a40:	f64f 72ff 	movw	r2, #65535	; 0xffff
   13a44:	4293      	cmp	r3, r2
   13a46:	d116      	bne.n	13a76 <__static_initialization_and_destruction_0(int, int)+0x52>
  LabGPIO P1_10(1,10); //CE
   13a48:	220a      	movs	r2, #10
   13a4a:	2101      	movs	r1, #1
   13a4c:	480f      	ldr	r0, [pc, #60]	; (13a8c <__static_initialization_and_destruction_0(int, int)+0x68>)
   13a4e:	f7fc fc8b 	bl	10368 <LabGPIO::LabGPIO(unsigned char, unsigned char)>
  LabGPIO P1_04(1,4); // MISO
   13a52:	2204      	movs	r2, #4
   13a54:	2101      	movs	r1, #1
   13a56:	480e      	ldr	r0, [pc, #56]	; (13a90 <__static_initialization_and_destruction_0(int, int)+0x6c>)
   13a58:	f7fc fc86 	bl	10368 <LabGPIO::LabGPIO(unsigned char, unsigned char)>
  LabGPIO P1_00 (1,0); //SCLK
   13a5c:	2200      	movs	r2, #0
   13a5e:	2101      	movs	r1, #1
   13a60:	480c      	ldr	r0, [pc, #48]	; (13a94 <__static_initialization_and_destruction_0(int, int)+0x70>)
   13a62:	f7fc fc81 	bl	10368 <LabGPIO::LabGPIO(unsigned char, unsigned char)>
  LabGPIO P1_01(1,1); //MOSI
   13a66:	2201      	movs	r2, #1
   13a68:	2101      	movs	r1, #1
   13a6a:	480b      	ldr	r0, [pc, #44]	; (13a98 <__static_initialization_and_destruction_0(int, int)+0x74>)
   13a6c:	f7fc fc7c 	bl	10368 <LabGPIO::LabGPIO(unsigned char, unsigned char)>
  OledTerminal oled_terminal;
   13a70:	480a      	ldr	r0, [pc, #40]	; (13a9c <__static_initialization_and_destruction_0(int, int)+0x78>)
   13a72:	f7ff fe85 	bl	13780 <OledTerminal::OledTerminal()>
   13a76:	4623      	mov	r3, r4
   13a78:	4619      	mov	r1, r3
   13a7a:	4803      	ldr	r0, [pc, #12]	; (13a88 <__static_initialization_and_destruction_0(int, int)+0x64>)
   13a7c:	f001 fd8a 	bl	15594 <__cyg_profile_func_exit>
}
   13a80:	bf00      	nop
   13a82:	b002      	add	sp, #8
   13a84:	bd10      	pop	{r4, pc}
   13a86:	bf00      	nop
   13a88:	00013a25 	.word	0x00013a25
   13a8c:	10000688 	.word	0x10000688
   13a90:	10000690 	.word	0x10000690
   13a94:	10000698 	.word	0x10000698
   13a98:	100006a0 	.word	0x100006a0
   13a9c:	100006a8 	.word	0x100006a8

00013aa0 <_GLOBAL__sub_I_P1_10>:
   13aa0:	b510      	push	{r4, lr}
   13aa2:	4674      	mov	r4, lr
   13aa4:	4623      	mov	r3, r4
   13aa6:	4619      	mov	r1, r3
   13aa8:	4806      	ldr	r0, [pc, #24]	; (13ac4 <_GLOBAL__sub_I_P1_10+0x24>)
   13aaa:	f001 fd5f 	bl	1556c <__cyg_profile_func_enter>
   13aae:	f64f 71ff 	movw	r1, #65535	; 0xffff
   13ab2:	2001      	movs	r0, #1
   13ab4:	f7ff ffb6 	bl	13a24 <__static_initialization_and_destruction_0(int, int)>
   13ab8:	4623      	mov	r3, r4
   13aba:	4619      	mov	r1, r3
   13abc:	4801      	ldr	r0, [pc, #4]	; (13ac4 <_GLOBAL__sub_I_P1_10+0x24>)
   13abe:	f001 fd69 	bl	15594 <__cyg_profile_func_exit>
   13ac2:	bd10      	pop	{r4, pc}
   13ac4:	00013aa1 	.word	0x00013aa1

00013ac8 <pinconn::clearF4(unsigned char, unsigned char)>:
}
void pinconn::repeater(uint8_t port, uint8_t pin){
    inactive(port,pin);
    *pincon[port][pin] |= (0b11<<3); 
}
void pinconn::clearF4(uint8_t port, uint8_t pin){
   13ac8:	b510      	push	{r4, lr}
   13aca:	b082      	sub	sp, #8
   13acc:	4674      	mov	r4, lr
   13ace:	9001      	str	r0, [sp, #4]
   13ad0:	460b      	mov	r3, r1
   13ad2:	f88d 3003 	strb.w	r3, [sp, #3]
   13ad6:	4613      	mov	r3, r2
   13ad8:	f88d 3002 	strb.w	r3, [sp, #2]
   13adc:	4623      	mov	r3, r4
   13ade:	4619      	mov	r1, r3
   13ae0:	4810      	ldr	r0, [pc, #64]	; (13b24 <pinconn::clearF4(unsigned char, unsigned char)+0x5c>)
   13ae2:	f001 fd43 	bl	1556c <__cyg_profile_func_enter>
    *pincon[port][pin] &= ~(0xF<<0);
   13ae6:	f89d 2003 	ldrb.w	r2, [sp, #3]
   13aea:	f89d 3002 	ldrb.w	r3, [sp, #2]
   13aee:	490e      	ldr	r1, [pc, #56]	; (13b28 <pinconn::clearF4(unsigned char, unsigned char)+0x60>)
   13af0:	0152      	lsls	r2, r2, #5
   13af2:	4413      	add	r3, r2
   13af4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   13af8:	681a      	ldr	r2, [r3, #0]
   13afa:	f89d 1003 	ldrb.w	r1, [sp, #3]
   13afe:	f89d 3002 	ldrb.w	r3, [sp, #2]
   13b02:	4809      	ldr	r0, [pc, #36]	; (13b28 <pinconn::clearF4(unsigned char, unsigned char)+0x60>)
   13b04:	0149      	lsls	r1, r1, #5
   13b06:	440b      	add	r3, r1
   13b08:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
   13b0c:	f022 020f 	bic.w	r2, r2, #15
   13b10:	601a      	str	r2, [r3, #0]
   13b12:	4623      	mov	r3, r4
   13b14:	4619      	mov	r1, r3
   13b16:	4803      	ldr	r0, [pc, #12]	; (13b24 <pinconn::clearF4(unsigned char, unsigned char)+0x5c>)
   13b18:	f001 fd3c 	bl	15594 <__cyg_profile_func_exit>
}
   13b1c:	bf00      	nop
   13b1e:	b002      	add	sp, #8
   13b20:	bd10      	pop	{r4, pc}
   13b22:	bf00      	nop
   13b24:	00013ac9 	.word	0x00013ac9
   13b28:	10000080 	.word	0x10000080

00013b2c <pinconn::ssp_clk(unsigned char, unsigned char)>:
void pinconn::ssp_clk(uint8_t port, uint8_t pin){
   13b2c:	b510      	push	{r4, lr}
   13b2e:	b082      	sub	sp, #8
   13b30:	4674      	mov	r4, lr
   13b32:	9001      	str	r0, [sp, #4]
   13b34:	460b      	mov	r3, r1
   13b36:	f88d 3003 	strb.w	r3, [sp, #3]
   13b3a:	4613      	mov	r3, r2
   13b3c:	f88d 3002 	strb.w	r3, [sp, #2]
   13b40:	4623      	mov	r3, r4
   13b42:	4619      	mov	r1, r3
   13b44:	4829      	ldr	r0, [pc, #164]	; (13bec <pinconn::ssp_clk(unsigned char, unsigned char)+0xc0>)
   13b46:	f001 fd11 	bl	1556c <__cyg_profile_func_enter>
    clearF4(port,pin);
   13b4a:	f89d 2002 	ldrb.w	r2, [sp, #2]
   13b4e:	f89d 3003 	ldrb.w	r3, [sp, #3]
   13b52:	4619      	mov	r1, r3
   13b54:	9801      	ldr	r0, [sp, #4]
   13b56:	f7ff ffb7 	bl	13ac8 <pinconn::clearF4(unsigned char, unsigned char)>
    if((port == 0) && (pin == (7|15))) 
   13b5a:	f89d 3003 	ldrb.w	r3, [sp, #3]
   13b5e:	2b00      	cmp	r3, #0
   13b60:	d11a      	bne.n	13b98 <pinconn::ssp_clk(unsigned char, unsigned char)+0x6c>
   13b62:	f89d 3002 	ldrb.w	r3, [sp, #2]
   13b66:	2b0f      	cmp	r3, #15
   13b68:	d116      	bne.n	13b98 <pinconn::ssp_clk(unsigned char, unsigned char)+0x6c>
    {
        *pincon[port][pin] |= (0b1<<1);
   13b6a:	f89d 2003 	ldrb.w	r2, [sp, #3]
   13b6e:	f89d 3002 	ldrb.w	r3, [sp, #2]
   13b72:	491f      	ldr	r1, [pc, #124]	; (13bf0 <pinconn::ssp_clk(unsigned char, unsigned char)+0xc4>)
   13b74:	0152      	lsls	r2, r2, #5
   13b76:	4413      	add	r3, r2
   13b78:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   13b7c:	681a      	ldr	r2, [r3, #0]
   13b7e:	f89d 1003 	ldrb.w	r1, [sp, #3]
   13b82:	f89d 3002 	ldrb.w	r3, [sp, #2]
   13b86:	481a      	ldr	r0, [pc, #104]	; (13bf0 <pinconn::ssp_clk(unsigned char, unsigned char)+0xc4>)
   13b88:	0149      	lsls	r1, r1, #5
   13b8a:	440b      	add	r3, r1
   13b8c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
   13b90:	f042 0202 	orr.w	r2, r2, #2
   13b94:	601a      	str	r2, [r3, #0]
   13b96:	e021      	b.n	13bdc <pinconn::ssp_clk(unsigned char, unsigned char)+0xb0>
    }
    else if((port == 1) && (pin == 0))
   13b98:	f89d 3003 	ldrb.w	r3, [sp, #3]
   13b9c:	2b01      	cmp	r3, #1
   13b9e:	d11a      	bne.n	13bd6 <pinconn::ssp_clk(unsigned char, unsigned char)+0xaa>
   13ba0:	f89d 3002 	ldrb.w	r3, [sp, #2]
   13ba4:	2b00      	cmp	r3, #0
   13ba6:	d116      	bne.n	13bd6 <pinconn::ssp_clk(unsigned char, unsigned char)+0xaa>
    {
        *pincon[port][pin] |= (0b100);
   13ba8:	f89d 2003 	ldrb.w	r2, [sp, #3]
   13bac:	f89d 3002 	ldrb.w	r3, [sp, #2]
   13bb0:	490f      	ldr	r1, [pc, #60]	; (13bf0 <pinconn::ssp_clk(unsigned char, unsigned char)+0xc4>)
   13bb2:	0152      	lsls	r2, r2, #5
   13bb4:	4413      	add	r3, r2
   13bb6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   13bba:	681a      	ldr	r2, [r3, #0]
   13bbc:	f89d 1003 	ldrb.w	r1, [sp, #3]
   13bc0:	f89d 3002 	ldrb.w	r3, [sp, #2]
   13bc4:	480a      	ldr	r0, [pc, #40]	; (13bf0 <pinconn::ssp_clk(unsigned char, unsigned char)+0xc4>)
   13bc6:	0149      	lsls	r1, r1, #5
   13bc8:	440b      	add	r3, r1
   13bca:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
   13bce:	f042 0204 	orr.w	r2, r2, #4
   13bd2:	601a      	str	r2, [r3, #0]
   13bd4:	e002      	b.n	13bdc <pinconn::ssp_clk(unsigned char, unsigned char)+0xb0>
    }
    else
    {
        printf("Not a SSP CLK port");
   13bd6:	4807      	ldr	r0, [pc, #28]	; (13bf4 <pinconn::ssp_clk(unsigned char, unsigned char)+0xc8>)
   13bd8:	f002 ff24 	bl	16a24 <printf>
   13bdc:	4623      	mov	r3, r4
   13bde:	4619      	mov	r1, r3
   13be0:	4802      	ldr	r0, [pc, #8]	; (13bec <pinconn::ssp_clk(unsigned char, unsigned char)+0xc0>)
   13be2:	f001 fcd7 	bl	15594 <__cyg_profile_func_exit>
    }
}
   13be6:	bf00      	nop
   13be8:	b002      	add	sp, #8
   13bea:	bd10      	pop	{r4, pc}
   13bec:	00013b2d 	.word	0x00013b2d
   13bf0:	10000080 	.word	0x10000080
   13bf4:	0001923c 	.word	0x0001923c

00013bf8 <pinconn::ssp_miso(unsigned char, unsigned char)>:
void pinconn::ssp_miso(uint8_t port, uint8_t pin){
   13bf8:	b510      	push	{r4, lr}
   13bfa:	b082      	sub	sp, #8
   13bfc:	4674      	mov	r4, lr
   13bfe:	9001      	str	r0, [sp, #4]
   13c00:	460b      	mov	r3, r1
   13c02:	f88d 3003 	strb.w	r3, [sp, #3]
   13c06:	4613      	mov	r3, r2
   13c08:	f88d 3002 	strb.w	r3, [sp, #2]
   13c0c:	4623      	mov	r3, r4
   13c0e:	4619      	mov	r1, r3
   13c10:	4829      	ldr	r0, [pc, #164]	; (13cb8 <pinconn::ssp_miso(unsigned char, unsigned char)+0xc0>)
   13c12:	f001 fcab 	bl	1556c <__cyg_profile_func_enter>
     clearF4(port,pin);
   13c16:	f89d 2002 	ldrb.w	r2, [sp, #2]
   13c1a:	f89d 3003 	ldrb.w	r3, [sp, #3]
   13c1e:	4619      	mov	r1, r3
   13c20:	9801      	ldr	r0, [sp, #4]
   13c22:	f7ff ff51 	bl	13ac8 <pinconn::clearF4(unsigned char, unsigned char)>
     if((port == 0) && (pin == (8|17))) 
   13c26:	f89d 3003 	ldrb.w	r3, [sp, #3]
   13c2a:	2b00      	cmp	r3, #0
   13c2c:	d11a      	bne.n	13c64 <pinconn::ssp_miso(unsigned char, unsigned char)+0x6c>
   13c2e:	f89d 3002 	ldrb.w	r3, [sp, #2]
   13c32:	2b19      	cmp	r3, #25
   13c34:	d116      	bne.n	13c64 <pinconn::ssp_miso(unsigned char, unsigned char)+0x6c>
    {
        *pincon[port][pin] |= (0b1<<1);
   13c36:	f89d 2003 	ldrb.w	r2, [sp, #3]
   13c3a:	f89d 3002 	ldrb.w	r3, [sp, #2]
   13c3e:	491f      	ldr	r1, [pc, #124]	; (13cbc <pinconn::ssp_miso(unsigned char, unsigned char)+0xc4>)
   13c40:	0152      	lsls	r2, r2, #5
   13c42:	4413      	add	r3, r2
   13c44:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   13c48:	681a      	ldr	r2, [r3, #0]
   13c4a:	f89d 1003 	ldrb.w	r1, [sp, #3]
   13c4e:	f89d 3002 	ldrb.w	r3, [sp, #2]
   13c52:	481a      	ldr	r0, [pc, #104]	; (13cbc <pinconn::ssp_miso(unsigned char, unsigned char)+0xc4>)
   13c54:	0149      	lsls	r1, r1, #5
   13c56:	440b      	add	r3, r1
   13c58:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
   13c5c:	f042 0202 	orr.w	r2, r2, #2
   13c60:	601a      	str	r2, [r3, #0]
   13c62:	e021      	b.n	13ca8 <pinconn::ssp_miso(unsigned char, unsigned char)+0xb0>
    }
    else if((port == 1) && (pin == 4))
   13c64:	f89d 3003 	ldrb.w	r3, [sp, #3]
   13c68:	2b01      	cmp	r3, #1
   13c6a:	d11a      	bne.n	13ca2 <pinconn::ssp_miso(unsigned char, unsigned char)+0xaa>
   13c6c:	f89d 3002 	ldrb.w	r3, [sp, #2]
   13c70:	2b04      	cmp	r3, #4
   13c72:	d116      	bne.n	13ca2 <pinconn::ssp_miso(unsigned char, unsigned char)+0xaa>
    {
        *pincon[port][pin] |= (0b100);
   13c74:	f89d 2003 	ldrb.w	r2, [sp, #3]
   13c78:	f89d 3002 	ldrb.w	r3, [sp, #2]
   13c7c:	490f      	ldr	r1, [pc, #60]	; (13cbc <pinconn::ssp_miso(unsigned char, unsigned char)+0xc4>)
   13c7e:	0152      	lsls	r2, r2, #5
   13c80:	4413      	add	r3, r2
   13c82:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   13c86:	681a      	ldr	r2, [r3, #0]
   13c88:	f89d 1003 	ldrb.w	r1, [sp, #3]
   13c8c:	f89d 3002 	ldrb.w	r3, [sp, #2]
   13c90:	480a      	ldr	r0, [pc, #40]	; (13cbc <pinconn::ssp_miso(unsigned char, unsigned char)+0xc4>)
   13c92:	0149      	lsls	r1, r1, #5
   13c94:	440b      	add	r3, r1
   13c96:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
   13c9a:	f042 0204 	orr.w	r2, r2, #4
   13c9e:	601a      	str	r2, [r3, #0]
   13ca0:	e002      	b.n	13ca8 <pinconn::ssp_miso(unsigned char, unsigned char)+0xb0>
    }
    else
    {
        printf("Not a MISO port");
   13ca2:	4807      	ldr	r0, [pc, #28]	; (13cc0 <pinconn::ssp_miso(unsigned char, unsigned char)+0xc8>)
   13ca4:	f002 febe 	bl	16a24 <printf>
   13ca8:	4623      	mov	r3, r4
   13caa:	4619      	mov	r1, r3
   13cac:	4802      	ldr	r0, [pc, #8]	; (13cb8 <pinconn::ssp_miso(unsigned char, unsigned char)+0xc0>)
   13cae:	f001 fc71 	bl	15594 <__cyg_profile_func_exit>
    }
}
   13cb2:	bf00      	nop
   13cb4:	b002      	add	sp, #8
   13cb6:	bd10      	pop	{r4, pc}
   13cb8:	00013bf9 	.word	0x00013bf9
   13cbc:	10000080 	.word	0x10000080
   13cc0:	00019250 	.word	0x00019250

00013cc4 <pinconn::ssp_mosi(unsigned char, unsigned char)>:
void pinconn::ssp_mosi(uint8_t port, uint8_t pin){
   13cc4:	b510      	push	{r4, lr}
   13cc6:	b082      	sub	sp, #8
   13cc8:	4674      	mov	r4, lr
   13cca:	9001      	str	r0, [sp, #4]
   13ccc:	460b      	mov	r3, r1
   13cce:	f88d 3003 	strb.w	r3, [sp, #3]
   13cd2:	4613      	mov	r3, r2
   13cd4:	f88d 3002 	strb.w	r3, [sp, #2]
   13cd8:	4623      	mov	r3, r4
   13cda:	4619      	mov	r1, r3
   13cdc:	4829      	ldr	r0, [pc, #164]	; (13d84 <pinconn::ssp_mosi(unsigned char, unsigned char)+0xc0>)
   13cde:	f001 fc45 	bl	1556c <__cyg_profile_func_enter>
     clearF4(port,pin);
   13ce2:	f89d 2002 	ldrb.w	r2, [sp, #2]
   13ce6:	f89d 3003 	ldrb.w	r3, [sp, #3]
   13cea:	4619      	mov	r1, r3
   13cec:	9801      	ldr	r0, [sp, #4]
   13cee:	f7ff feeb 	bl	13ac8 <pinconn::clearF4(unsigned char, unsigned char)>
     if((port == 0) && (pin == (9|18))) 
   13cf2:	f89d 3003 	ldrb.w	r3, [sp, #3]
   13cf6:	2b00      	cmp	r3, #0
   13cf8:	d11a      	bne.n	13d30 <pinconn::ssp_mosi(unsigned char, unsigned char)+0x6c>
   13cfa:	f89d 3002 	ldrb.w	r3, [sp, #2]
   13cfe:	2b1b      	cmp	r3, #27
   13d00:	d116      	bne.n	13d30 <pinconn::ssp_mosi(unsigned char, unsigned char)+0x6c>
    {
        *pincon[port][pin] |= (0b1<<1);
   13d02:	f89d 2003 	ldrb.w	r2, [sp, #3]
   13d06:	f89d 3002 	ldrb.w	r3, [sp, #2]
   13d0a:	491f      	ldr	r1, [pc, #124]	; (13d88 <pinconn::ssp_mosi(unsigned char, unsigned char)+0xc4>)
   13d0c:	0152      	lsls	r2, r2, #5
   13d0e:	4413      	add	r3, r2
   13d10:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   13d14:	681a      	ldr	r2, [r3, #0]
   13d16:	f89d 1003 	ldrb.w	r1, [sp, #3]
   13d1a:	f89d 3002 	ldrb.w	r3, [sp, #2]
   13d1e:	481a      	ldr	r0, [pc, #104]	; (13d88 <pinconn::ssp_mosi(unsigned char, unsigned char)+0xc4>)
   13d20:	0149      	lsls	r1, r1, #5
   13d22:	440b      	add	r3, r1
   13d24:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
   13d28:	f042 0202 	orr.w	r2, r2, #2
   13d2c:	601a      	str	r2, [r3, #0]
   13d2e:	e021      	b.n	13d74 <pinconn::ssp_mosi(unsigned char, unsigned char)+0xb0>
    }
    else if((port == 1) && (pin == 1))
   13d30:	f89d 3003 	ldrb.w	r3, [sp, #3]
   13d34:	2b01      	cmp	r3, #1
   13d36:	d11a      	bne.n	13d6e <pinconn::ssp_mosi(unsigned char, unsigned char)+0xaa>
   13d38:	f89d 3002 	ldrb.w	r3, [sp, #2]
   13d3c:	2b01      	cmp	r3, #1
   13d3e:	d116      	bne.n	13d6e <pinconn::ssp_mosi(unsigned char, unsigned char)+0xaa>
    {
        *pincon[port][pin] |= (0b100);
   13d40:	f89d 2003 	ldrb.w	r2, [sp, #3]
   13d44:	f89d 3002 	ldrb.w	r3, [sp, #2]
   13d48:	490f      	ldr	r1, [pc, #60]	; (13d88 <pinconn::ssp_mosi(unsigned char, unsigned char)+0xc4>)
   13d4a:	0152      	lsls	r2, r2, #5
   13d4c:	4413      	add	r3, r2
   13d4e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   13d52:	681a      	ldr	r2, [r3, #0]
   13d54:	f89d 1003 	ldrb.w	r1, [sp, #3]
   13d58:	f89d 3002 	ldrb.w	r3, [sp, #2]
   13d5c:	480a      	ldr	r0, [pc, #40]	; (13d88 <pinconn::ssp_mosi(unsigned char, unsigned char)+0xc4>)
   13d5e:	0149      	lsls	r1, r1, #5
   13d60:	440b      	add	r3, r1
   13d62:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
   13d66:	f042 0204 	orr.w	r2, r2, #4
   13d6a:	601a      	str	r2, [r3, #0]
   13d6c:	e002      	b.n	13d74 <pinconn::ssp_mosi(unsigned char, unsigned char)+0xb0>
    }
    else
    {
        printf("Not a MOSI port");
   13d6e:	4807      	ldr	r0, [pc, #28]	; (13d8c <pinconn::ssp_mosi(unsigned char, unsigned char)+0xc8>)
   13d70:	f002 fe58 	bl	16a24 <printf>
   13d74:	4623      	mov	r3, r4
   13d76:	4619      	mov	r1, r3
   13d78:	4802      	ldr	r0, [pc, #8]	; (13d84 <pinconn::ssp_mosi(unsigned char, unsigned char)+0xc0>)
   13d7a:	f001 fc0b 	bl	15594 <__cyg_profile_func_exit>
    }
}
   13d7e:	bf00      	nop
   13d80:	b002      	add	sp, #8
   13d82:	bd10      	pop	{r4, pc}
   13d84:	00013cc5 	.word	0x00013cc5
   13d88:	10000080 	.word	0x10000080
   13d8c:	00019260 	.word	0x00019260

00013d90 <SetUptimeFunction(unsigned long long (*)())>:
{
   13d90:	b510      	push	{r4, lr}
   13d92:	b082      	sub	sp, #8
   13d94:	4674      	mov	r4, lr
   13d96:	9001      	str	r0, [sp, #4]
   13d98:	4623      	mov	r3, r4
   13d9a:	4619      	mov	r1, r3
   13d9c:	4806      	ldr	r0, [pc, #24]	; (13db8 <SetUptimeFunction(unsigned long long (*)())+0x28>)
   13d9e:	f001 fbe5 	bl	1556c <__cyg_profile_func_enter>
  Uptime = uptime_function;
   13da2:	4a06      	ldr	r2, [pc, #24]	; (13dbc <SetUptimeFunction(unsigned long long (*)())+0x2c>)
   13da4:	9b01      	ldr	r3, [sp, #4]
   13da6:	6013      	str	r3, [r2, #0]
   13da8:	4623      	mov	r3, r4
   13daa:	4619      	mov	r1, r3
   13dac:	4802      	ldr	r0, [pc, #8]	; (13db8 <SetUptimeFunction(unsigned long long (*)())+0x28>)
   13dae:	f001 fbf1 	bl	15594 <__cyg_profile_func_exit>
}
   13db2:	bf00      	nop
   13db4:	b002      	add	sp, #8
   13db6:	bd10      	pop	{r4, pc}
   13db8:	00013d91 	.word	0x00013d91
   13dbc:	10000024 	.word	0x10000024

00013dc0 <SystemTimer::DisableTimer()>:
  /// system_timer_isr defaults to nullptr. The actual SystemTickHandler should
  /// check if the isr is set to nullptr, and if it is, turn off the timer, if
  /// set a proper function then execute it.
  inline static IsrPointer system_timer_isr = nullptr;
  /// WARNING: Doing so will most likely disable FreeRTOS
  static void DisableTimer()
   13dc0:	b510      	push	{r4, lr}
   13dc2:	4674      	mov	r4, lr
   13dc4:	4623      	mov	r3, r4
   13dc6:	4619      	mov	r1, r3
   13dc8:	480a      	ldr	r0, [pc, #40]	; (13df4 <SystemTimer::DisableTimer()+0x34>)
   13dca:	f001 fbcf 	bl	1556c <__cyg_profile_func_enter>
  {
    sys_tick->LOAD = 0;
   13dce:	4b0a      	ldr	r3, [pc, #40]	; (13df8 <SystemTimer::DisableTimer()+0x38>)
   13dd0:	681b      	ldr	r3, [r3, #0]
   13dd2:	2200      	movs	r2, #0
   13dd4:	605a      	str	r2, [r3, #4]
    sys_tick->VAL  = 0;
   13dd6:	4b08      	ldr	r3, [pc, #32]	; (13df8 <SystemTimer::DisableTimer()+0x38>)
   13dd8:	681b      	ldr	r3, [r3, #0]
   13dda:	2200      	movs	r2, #0
   13ddc:	609a      	str	r2, [r3, #8]
    sys_tick->CTRL = 0;
   13dde:	4b06      	ldr	r3, [pc, #24]	; (13df8 <SystemTimer::DisableTimer()+0x38>)
   13de0:	681b      	ldr	r3, [r3, #0]
   13de2:	2200      	movs	r2, #0
   13de4:	601a      	str	r2, [r3, #0]
   13de6:	4623      	mov	r3, r4
   13de8:	4619      	mov	r1, r3
   13dea:	4802      	ldr	r0, [pc, #8]	; (13df4 <SystemTimer::DisableTimer()+0x34>)
   13dec:	f001 fbd2 	bl	15594 <__cyg_profile_func_exit>
  }
   13df0:	bf00      	nop
   13df2:	bd10      	pop	{r4, pc}
   13df4:	00013dc1 	.word	0x00013dc1
   13df8:	10000380 	.word	0x10000380

00013dfc <SystemTimer::SystemTimerHandler()>:
  static void SystemTimerHandler()
   13dfc:	b510      	push	{r4, lr}
   13dfe:	4674      	mov	r4, lr
   13e00:	4623      	mov	r3, r4
   13e02:	4619      	mov	r1, r3
   13e04:	4808      	ldr	r0, [pc, #32]	; (13e28 <SystemTimer::SystemTimerHandler()+0x2c>)
   13e06:	f001 fbb1 	bl	1556c <__cyg_profile_func_enter>
  {
    // This assumes that SysTickHandler is called every millisecond.
    // Changing that frequency will distort the milliseconds time.
    if (system_timer_isr != nullptr)
   13e0a:	4b08      	ldr	r3, [pc, #32]	; (13e2c <SystemTimer::SystemTimerHandler()+0x30>)
   13e0c:	681b      	ldr	r3, [r3, #0]
   13e0e:	2b00      	cmp	r3, #0
   13e10:	d002      	beq.n	13e18 <SystemTimer::SystemTimerHandler()+0x1c>
    {
      system_timer_isr();
   13e12:	4b06      	ldr	r3, [pc, #24]	; (13e2c <SystemTimer::SystemTimerHandler()+0x30>)
   13e14:	681b      	ldr	r3, [r3, #0]
   13e16:	4798      	blx	r3
   13e18:	4623      	mov	r3, r4
   13e1a:	4619      	mov	r1, r3
   13e1c:	4802      	ldr	r0, [pc, #8]	; (13e28 <SystemTimer::SystemTimerHandler()+0x2c>)
   13e1e:	f001 fbb9 	bl	15594 <__cyg_profile_func_exit>
    }
  }
   13e22:	bf00      	nop
   13e24:	bd10      	pop	{r4, pc}
   13e26:	bf00      	nop
   13e28:	00013dfd 	.word	0x00013dfd
   13e2c:	10000e70 	.word	0x10000e70

00013e30 <SystemTimer::SetIsrFunction(void (*)())>:
  constexpr SystemTimer() {}
  void SetIsrFunction(IsrPointer isr) override
   13e30:	b510      	push	{r4, lr}
   13e32:	b082      	sub	sp, #8
   13e34:	4674      	mov	r4, lr
   13e36:	9001      	str	r0, [sp, #4]
   13e38:	9100      	str	r1, [sp, #0]
   13e3a:	4623      	mov	r3, r4
   13e3c:	4619      	mov	r1, r3
   13e3e:	4807      	ldr	r0, [pc, #28]	; (13e5c <SystemTimer::SetIsrFunction(void (*)())+0x2c>)
   13e40:	f001 fb94 	bl	1556c <__cyg_profile_func_enter>
  {
    system_timer_isr = isr;
   13e44:	4a06      	ldr	r2, [pc, #24]	; (13e60 <SystemTimer::SetIsrFunction(void (*)())+0x30>)
   13e46:	9b00      	ldr	r3, [sp, #0]
   13e48:	6013      	str	r3, [r2, #0]
   13e4a:	4623      	mov	r3, r4
   13e4c:	4619      	mov	r1, r3
   13e4e:	4803      	ldr	r0, [pc, #12]	; (13e5c <SystemTimer::SetIsrFunction(void (*)())+0x2c>)
   13e50:	f001 fba0 	bl	15594 <__cyg_profile_func_exit>
  }
   13e54:	bf00      	nop
   13e56:	b002      	add	sp, #8
   13e58:	bd10      	pop	{r4, pc}
   13e5a:	bf00      	nop
   13e5c:	00013e31 	.word	0x00013e31
   13e60:	10000e70 	.word	0x10000e70

00013e64 <SystemTimer::StartTimer()>:
  bool StartTimer() override
   13e64:	b530      	push	{r4, r5, lr}
   13e66:	b085      	sub	sp, #20
   13e68:	4675      	mov	r5, lr
   13e6a:	9001      	str	r0, [sp, #4]
   13e6c:	462b      	mov	r3, r5
   13e6e:	4619      	mov	r1, r3
   13e70:	4820      	ldr	r0, [pc, #128]	; (13ef4 <SystemTimer::StartTimer()+0x90>)
   13e72:	f001 fb7b 	bl	1556c <__cyg_profile_func_enter>
  {
    bool successful = false;
   13e76:	2300      	movs	r3, #0
   13e78:	f88d 300f 	strb.w	r3, [sp, #15]
    if (sys_tick->LOAD != 0)
   13e7c:	4b1e      	ldr	r3, [pc, #120]	; (13ef8 <SystemTimer::StartTimer()+0x94>)
   13e7e:	681b      	ldr	r3, [r3, #0]
   13e80:	685b      	ldr	r3, [r3, #4]
   13e82:	2b00      	cmp	r3, #0
   13e84:	bf14      	ite	ne
   13e86:	2301      	movne	r3, #1
   13e88:	2300      	moveq	r3, #0
   13e8a:	b2db      	uxtb	r3, r3
   13e8c:	2b00      	cmp	r3, #0
   13e8e:	d01e      	beq.n	13ece <SystemTimer::StartTimer()+0x6a>
    {
      sys_tick->VAL = 0;
   13e90:	4b19      	ldr	r3, [pc, #100]	; (13ef8 <SystemTimer::StartTimer()+0x94>)
   13e92:	681b      	ldr	r3, [r3, #0]
   13e94:	2200      	movs	r2, #0
   13e96:	609a      	str	r2, [r3, #8]
      sys_tick->CTRL |= (1 << ControlBitMap::kTickInterupt);
   13e98:	4b17      	ldr	r3, [pc, #92]	; (13ef8 <SystemTimer::StartTimer()+0x94>)
   13e9a:	681b      	ldr	r3, [r3, #0]
   13e9c:	681a      	ldr	r2, [r3, #0]
   13e9e:	4b16      	ldr	r3, [pc, #88]	; (13ef8 <SystemTimer::StartTimer()+0x94>)
   13ea0:	681b      	ldr	r3, [r3, #0]
   13ea2:	f042 0202 	orr.w	r2, r2, #2
   13ea6:	601a      	str	r2, [r3, #0]
      sys_tick->CTRL |= (1 << ControlBitMap::kEnableCounter);
   13ea8:	4b13      	ldr	r3, [pc, #76]	; (13ef8 <SystemTimer::StartTimer()+0x94>)
   13eaa:	681b      	ldr	r3, [r3, #0]
   13eac:	681a      	ldr	r2, [r3, #0]
   13eae:	4b12      	ldr	r3, [pc, #72]	; (13ef8 <SystemTimer::StartTimer()+0x94>)
   13eb0:	681b      	ldr	r3, [r3, #0]
   13eb2:	f042 0201 	orr.w	r2, r2, #1
   13eb6:	601a      	str	r2, [r3, #0]
      sys_tick->CTRL |= (1 << ControlBitMap::kClkSource);
   13eb8:	4b0f      	ldr	r3, [pc, #60]	; (13ef8 <SystemTimer::StartTimer()+0x94>)
   13eba:	681b      	ldr	r3, [r3, #0]
   13ebc:	681a      	ldr	r2, [r3, #0]
   13ebe:	4b0e      	ldr	r3, [pc, #56]	; (13ef8 <SystemTimer::StartTimer()+0x94>)
   13ec0:	681b      	ldr	r3, [r3, #0]
   13ec2:	f042 0204 	orr.w	r2, r2, #4
   13ec6:	601a      	str	r2, [r3, #0]
      successful = true;
   13ec8:	2301      	movs	r3, #1
   13eca:	f88d 300f 	strb.w	r3, [sp, #15]
    }
    RegisterIsr(SysTick_IRQn, SystemTimerHandler);
   13ece:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   13ed2:	2201      	movs	r2, #1
   13ed4:	4909      	ldr	r1, [pc, #36]	; (13efc <SystemTimer::StartTimer()+0x98>)
   13ed6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   13eda:	f001 fa1f 	bl	1531c <RegisterIsr(IRQn, void (*)(), bool, long)>
    return successful;
   13ede:	f89d 400f 	ldrb.w	r4, [sp, #15]
   13ee2:	462b      	mov	r3, r5
   13ee4:	4619      	mov	r1, r3
   13ee6:	4803      	ldr	r0, [pc, #12]	; (13ef4 <SystemTimer::StartTimer()+0x90>)
   13ee8:	f001 fb54 	bl	15594 <__cyg_profile_func_exit>
   13eec:	4623      	mov	r3, r4
  }
   13eee:	4618      	mov	r0, r3
   13ef0:	b005      	add	sp, #20
   13ef2:	bd30      	pop	{r4, r5, pc}
   13ef4:	00013e65 	.word	0x00013e65
   13ef8:	10000380 	.word	0x10000380
   13efc:	00013dfd 	.word	0x00013dfd

00013f00 <SystemTimer::SetTickFrequency(unsigned long)>:
  ///          remainder will be returned.
  ///          If the freqency supplied is less then 2Hz, the function will
  ///          return without changing any hardware.
  ///          If the reload value exceeds the SysTick_LOAD_RELOAD_Msk, the
  ///          returned value is the SysTick_LOAD_RELOAD_Msk.
  uint32_t SetTickFrequency(uint32_t frequency) override
   13f00:	b530      	push	{r4, r5, lr}
   13f02:	b085      	sub	sp, #20
   13f04:	4675      	mov	r5, lr
   13f06:	9001      	str	r0, [sp, #4]
   13f08:	9100      	str	r1, [sp, #0]
   13f0a:	462b      	mov	r3, r5
   13f0c:	4619      	mov	r1, r3
   13f0e:	481f      	ldr	r0, [pc, #124]	; (13f8c <SystemTimer::SetTickFrequency(unsigned long)+0x8c>)
   13f10:	f001 fb2c 	bl	1556c <__cyg_profile_func_enter>
  {
    if (frequency <= 1)
   13f14:	9b00      	ldr	r3, [sp, #0]
   13f16:	2b01      	cmp	r3, #1
   13f18:	d801      	bhi.n	13f1e <SystemTimer::SetTickFrequency(unsigned long)+0x1e>
    {
      return 0;
   13f1a:	2400      	movs	r4, #0
   13f1c:	e02d      	b.n	13f7a <SystemTimer::SetTickFrequency(unsigned long)+0x7a>
    }
    uint32_t reload_value = (GetSystemFrequency() / frequency) - 1;
   13f1e:	9b01      	ldr	r3, [sp, #4]
   13f20:	1d1a      	adds	r2, r3, #4
   13f22:	9b01      	ldr	r3, [sp, #4]
   13f24:	685b      	ldr	r3, [r3, #4]
   13f26:	330c      	adds	r3, #12
   13f28:	681b      	ldr	r3, [r3, #0]
   13f2a:	4610      	mov	r0, r2
   13f2c:	4798      	blx	r3
   13f2e:	4602      	mov	r2, r0
   13f30:	9b00      	ldr	r3, [sp, #0]
   13f32:	fbb2 f3f3 	udiv	r3, r2, r3
   13f36:	3b01      	subs	r3, #1
   13f38:	9303      	str	r3, [sp, #12]
    int remainder         = (GetSystemFrequency() % frequency);
   13f3a:	9b01      	ldr	r3, [sp, #4]
   13f3c:	1d1a      	adds	r2, r3, #4
   13f3e:	9b01      	ldr	r3, [sp, #4]
   13f40:	685b      	ldr	r3, [r3, #4]
   13f42:	330c      	adds	r3, #12
   13f44:	681b      	ldr	r3, [r3, #0]
   13f46:	4610      	mov	r0, r2
   13f48:	4798      	blx	r3
   13f4a:	4603      	mov	r3, r0
   13f4c:	9a00      	ldr	r2, [sp, #0]
   13f4e:	fbb3 f2f2 	udiv	r2, r3, r2
   13f52:	9900      	ldr	r1, [sp, #0]
   13f54:	fb01 f202 	mul.w	r2, r1, r2
   13f58:	1a9b      	subs	r3, r3, r2
   13f5a:	9302      	str	r3, [sp, #8]
    if (reload_value > SysTick_LOAD_RELOAD_Msk)
   13f5c:	9b03      	ldr	r3, [sp, #12]
   13f5e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
   13f62:	d305      	bcc.n	13f70 <SystemTimer::SetTickFrequency(unsigned long)+0x70>
    {
      reload_value = SysTick_LOAD_RELOAD_Msk;
   13f64:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
   13f68:	9303      	str	r3, [sp, #12]
      remainder    = SysTick_LOAD_RELOAD_Msk;
   13f6a:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
   13f6e:	9302      	str	r3, [sp, #8]
    }
    sys_tick->LOAD = reload_value;
   13f70:	4b07      	ldr	r3, [pc, #28]	; (13f90 <SystemTimer::SetTickFrequency(unsigned long)+0x90>)
   13f72:	681b      	ldr	r3, [r3, #0]
   13f74:	9a03      	ldr	r2, [sp, #12]
   13f76:	605a      	str	r2, [r3, #4]
    return remainder;
   13f78:	9c02      	ldr	r4, [sp, #8]
   13f7a:	462b      	mov	r3, r5
   13f7c:	4619      	mov	r1, r3
   13f7e:	4803      	ldr	r0, [pc, #12]	; (13f8c <SystemTimer::SetTickFrequency(unsigned long)+0x8c>)
   13f80:	f001 fb08 	bl	15594 <__cyg_profile_func_exit>
   13f84:	4623      	mov	r3, r4
  }
   13f86:	4618      	mov	r0, r3
   13f88:	b005      	add	sp, #20
   13f8a:	bd30      	pop	{r4, r5, pc}
   13f8c:	00013f01 	.word	0x00013f01
   13f90:	10000380 	.word	0x10000380

00013f94 <unsigned char util::Value<TimerInterface::TimerPort, unsigned char>(TimerInterface::TimerPort)>:
constexpr Type Value(Enum enum_type_value)
   13f94:	b530      	push	{r4, r5, lr}
   13f96:	b083      	sub	sp, #12
   13f98:	4675      	mov	r5, lr
   13f9a:	4603      	mov	r3, r0
   13f9c:	f88d 3007 	strb.w	r3, [sp, #7]
   13fa0:	462b      	mov	r3, r5
   13fa2:	4619      	mov	r1, r3
   13fa4:	4806      	ldr	r0, [pc, #24]	; (13fc0 <unsigned char util::Value<TimerInterface::TimerPort, unsigned char>(TimerInterface::TimerPort)+0x2c>)
   13fa6:	f001 fae1 	bl	1556c <__cyg_profile_func_enter>
  return static_cast<Type>(enum_type_value);
   13faa:	f89d 4007 	ldrb.w	r4, [sp, #7]
   13fae:	462b      	mov	r3, r5
   13fb0:	4619      	mov	r1, r3
   13fb2:	4803      	ldr	r0, [pc, #12]	; (13fc0 <unsigned char util::Value<TimerInterface::TimerPort, unsigned char>(TimerInterface::TimerPort)+0x2c>)
   13fb4:	f001 faee 	bl	15594 <__cyg_profile_func_exit>
   13fb8:	4623      	mov	r3, r4
}
   13fba:	4618      	mov	r0, r3
   13fbc:	b003      	add	sp, #12
   13fbe:	bd30      	pop	{r4, r5, pc}
   13fc0:	00013f95 	.word	0x00013f95

00013fc4 <Timer::DoNothingIsr()>:
    Lpc40xxSystemController::Peripherals::kTimer3
  };

  static constexpr IRQn kTimerIrq[] = { IRQn::TIMER0_IRQn, IRQn::TIMER1_IRQn,
                                        IRQn::TIMER2_IRQn, IRQn::TIMER3_IRQn };
  static void DoNothingIsr() {}
   13fc4:	b510      	push	{r4, lr}
   13fc6:	4674      	mov	r4, lr
   13fc8:	4623      	mov	r3, r4
   13fca:	4619      	mov	r1, r3
   13fcc:	4804      	ldr	r0, [pc, #16]	; (13fe0 <Timer::DoNothingIsr()+0x1c>)
   13fce:	f001 facd 	bl	1556c <__cyg_profile_func_enter>
   13fd2:	4623      	mov	r3, r4
   13fd4:	4619      	mov	r1, r3
   13fd6:	4802      	ldr	r0, [pc, #8]	; (13fe0 <Timer::DoNothingIsr()+0x1c>)
   13fd8:	f001 fadc 	bl	15594 <__cyg_profile_func_exit>
   13fdc:	bf00      	nop
   13fde:	bd10      	pop	{r4, pc}
   13fe0:	00013fc5 	.word	0x00013fc5

00013fe4 <Timer::Initialize(unsigned long, void (*)(), long)>:
  ///                  register will be 10 ms.
  /// @param isr an ISR that will fire when the condition set by SetTimer
  ///            method is achieved.
  /// @param priority sets the Timer interrupt's priority level, defaults to -1
  ///                 which uses the platforms default priority.
  void Initialize(uint32_t frequency, IsrPointer isr = DoNothingIsr,
   13fe4:	b510      	push	{r4, lr}
   13fe6:	b086      	sub	sp, #24
   13fe8:	4674      	mov	r4, lr
   13fea:	9003      	str	r0, [sp, #12]
   13fec:	9102      	str	r1, [sp, #8]
   13fee:	9201      	str	r2, [sp, #4]
   13ff0:	9300      	str	r3, [sp, #0]
   13ff2:	4623      	mov	r3, r4
   13ff4:	4619      	mov	r1, r3
   13ff6:	483e      	ldr	r0, [pc, #248]	; (140f0 <Timer::Initialize(unsigned long, void (*)(), long)+0x10c>)
   13ff8:	f001 fab8 	bl	1556c <__cyg_profile_func_enter>
                  int32_t priority = -1) override final
  {
    PowerUpPeripheral(kPowerbit[channel_]);
   13ffc:	9b03      	ldr	r3, [sp, #12]
   13ffe:	1d18      	adds	r0, r3, #4
   14000:	9b03      	ldr	r3, [sp, #12]
   14002:	685b      	ldr	r3, [r3, #4]
   14004:	3314      	adds	r3, #20
   14006:	681b      	ldr	r3, [r3, #0]
   14008:	9a03      	ldr	r2, [sp, #12]
   1400a:	7a12      	ldrb	r2, [r2, #8]
   1400c:	0092      	lsls	r2, r2, #2
   1400e:	4939      	ldr	r1, [pc, #228]	; (140f4 <Timer::Initialize(unsigned long, void (*)(), long)+0x110>)
   14010:	440a      	add	r2, r1
   14012:	4611      	mov	r1, r2
   14014:	4798      	blx	r3
    SJ2_ASSERT_FATAL(
   14016:	9b02      	ldr	r3, [sp, #8]
   14018:	2b00      	cmp	r3, #0
   1401a:	d10d      	bne.n	14038 <Timer::Initialize(unsigned long, void (*)(), long)+0x54>
   1401c:	2384      	movs	r3, #132	; 0x84
   1401e:	4a36      	ldr	r2, [pc, #216]	; (140f8 <Timer::Initialize(unsigned long, void (*)(), long)+0x114>)
   14020:	4936      	ldr	r1, [pc, #216]	; (140fc <Timer::Initialize(unsigned long, void (*)(), long)+0x118>)
   14022:	4837      	ldr	r0, [pc, #220]	; (14100 <Timer::Initialize(unsigned long, void (*)(), long)+0x11c>)
   14024:	f002 fcfe 	bl	16a24 <printf>
   14028:	4836      	ldr	r0, [pc, #216]	; (14104 <Timer::Initialize(unsigned long, void (*)(), long)+0x120>)
   1402a:	f001 fa6f 	bl	1550c <puts>
   1402e:	2100      	movs	r1, #0
   14030:	2001      	movs	r0, #1
   14032:	f7fc fee1 	bl	10df8 <debug::PrintBacktrace(bool, void*)>
   14036:	e7fe      	b.n	14036 <Timer::Initialize(unsigned long, void (*)(), long)+0x52>
        frequency != 0,
        "Cannot have zero ticks per microsecond, please choose 1 or more.");
    // Set Prescale register for Prescale Counter to milliseconds
    uint32_t prescaler = GetPeripheralFrequency() / frequency;
   14038:	9b03      	ldr	r3, [sp, #12]
   1403a:	1d1a      	adds	r2, r3, #4
   1403c:	9b03      	ldr	r3, [sp, #12]
   1403e:	685b      	ldr	r3, [r3, #4]
   14040:	3310      	adds	r3, #16
   14042:	681b      	ldr	r3, [r3, #0]
   14044:	4610      	mov	r0, r2
   14046:	4798      	blx	r3
   14048:	4602      	mov	r2, r0
   1404a:	9b02      	ldr	r3, [sp, #8]
   1404c:	fbb2 f3f3 	udiv	r3, r2, r3
   14050:	9305      	str	r3, [sp, #20]
    tim_register[channel_]->PR &= ~(kClear << 1);
   14052:	9b03      	ldr	r3, [sp, #12]
   14054:	7a1b      	ldrb	r3, [r3, #8]
   14056:	461a      	mov	r2, r3
   14058:	4b2b      	ldr	r3, [pc, #172]	; (14108 <Timer::Initialize(unsigned long, void (*)(), long)+0x124>)
   1405a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   1405e:	68da      	ldr	r2, [r3, #12]
   14060:	9b03      	ldr	r3, [sp, #12]
   14062:	7a1b      	ldrb	r3, [r3, #8]
   14064:	4619      	mov	r1, r3
   14066:	4b28      	ldr	r3, [pc, #160]	; (14108 <Timer::Initialize(unsigned long, void (*)(), long)+0x124>)
   14068:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   1406c:	f002 0201 	and.w	r2, r2, #1
   14070:	60da      	str	r2, [r3, #12]
    tim_register[channel_]->PR |= (prescaler << 1);
   14072:	9b03      	ldr	r3, [sp, #12]
   14074:	7a1b      	ldrb	r3, [r3, #8]
   14076:	461a      	mov	r2, r3
   14078:	4b23      	ldr	r3, [pc, #140]	; (14108 <Timer::Initialize(unsigned long, void (*)(), long)+0x124>)
   1407a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   1407e:	68d9      	ldr	r1, [r3, #12]
   14080:	9b05      	ldr	r3, [sp, #20]
   14082:	005a      	lsls	r2, r3, #1
   14084:	9b03      	ldr	r3, [sp, #12]
   14086:	7a1b      	ldrb	r3, [r3, #8]
   14088:	4618      	mov	r0, r3
   1408a:	4b1f      	ldr	r3, [pc, #124]	; (14108 <Timer::Initialize(unsigned long, void (*)(), long)+0x124>)
   1408c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   14090:	430a      	orrs	r2, r1
   14092:	60da      	str	r2, [r3, #12]
    tim_register[channel_]->TCR |= (1 << 0);
   14094:	9b03      	ldr	r3, [sp, #12]
   14096:	7a1b      	ldrb	r3, [r3, #8]
   14098:	461a      	mov	r2, r3
   1409a:	4b1b      	ldr	r3, [pc, #108]	; (14108 <Timer::Initialize(unsigned long, void (*)(), long)+0x124>)
   1409c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   140a0:	685a      	ldr	r2, [r3, #4]
   140a2:	9b03      	ldr	r3, [sp, #12]
   140a4:	7a1b      	ldrb	r3, [r3, #8]
   140a6:	4619      	mov	r1, r3
   140a8:	4b17      	ldr	r3, [pc, #92]	; (14108 <Timer::Initialize(unsigned long, void (*)(), long)+0x124>)
   140aa:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   140ae:	f042 0201 	orr.w	r2, r2, #1
   140b2:	605a      	str	r2, [r3, #4]
    user_timer_isr[channel_] = isr;
   140b4:	9b03      	ldr	r3, [sp, #12]
   140b6:	7a1b      	ldrb	r3, [r3, #8]
   140b8:	4619      	mov	r1, r3
   140ba:	4a14      	ldr	r2, [pc, #80]	; (1410c <Timer::Initialize(unsigned long, void (*)(), long)+0x128>)
   140bc:	9b01      	ldr	r3, [sp, #4]
   140be:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
    RegisterIsr(kTimerIrq[channel_], kTimerIsr[channel_], true, priority);
   140c2:	9b03      	ldr	r3, [sp, #12]
   140c4:	7a1b      	ldrb	r3, [r3, #8]
   140c6:	461a      	mov	r2, r3
   140c8:	4b11      	ldr	r3, [pc, #68]	; (14110 <Timer::Initialize(unsigned long, void (*)(), long)+0x12c>)
   140ca:	5698      	ldrsb	r0, [r3, r2]
   140cc:	9b03      	ldr	r3, [sp, #12]
   140ce:	7a1b      	ldrb	r3, [r3, #8]
   140d0:	461a      	mov	r2, r3
   140d2:	4b10      	ldr	r3, [pc, #64]	; (14114 <Timer::Initialize(unsigned long, void (*)(), long)+0x130>)
   140d4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   140d8:	9b00      	ldr	r3, [sp, #0]
   140da:	2201      	movs	r2, #1
   140dc:	f001 f91e 	bl	1531c <RegisterIsr(IRQn, void (*)(), bool, long)>
   140e0:	4623      	mov	r3, r4
   140e2:	4619      	mov	r1, r3
   140e4:	4802      	ldr	r0, [pc, #8]	; (140f0 <Timer::Initialize(unsigned long, void (*)(), long)+0x10c>)
   140e6:	f001 fa55 	bl	15594 <__cyg_profile_func_exit>
  }
   140ea:	bf00      	nop
   140ec:	b006      	add	sp, #24
   140ee:	bd10      	pop	{r4, pc}
   140f0:	00013fe5 	.word	0x00013fe5
   140f4:	00019820 	.word	0x00019820
   140f8:	00019920 	.word	0x00019920
   140fc:	00019844 	.word	0x00019844
   14100:	00019700 	.word	0x00019700
   14104:	0001940c 	.word	0x0001940c
   14108:	10000384 	.word	0x10000384
   1410c:	10000eb4 	.word	0x10000eb4
   14110:	00019830 	.word	0x00019830
   14114:	00019834 	.word	0x00019834

00014118 <unsigned char util::Value<TimerInterface::MatchControlRegister, unsigned char>(TimerInterface::MatchControlRegister)>:
constexpr Type Value(Enum enum_type_value)
   14118:	b530      	push	{r4, r5, lr}
   1411a:	b083      	sub	sp, #12
   1411c:	4675      	mov	r5, lr
   1411e:	4603      	mov	r3, r0
   14120:	f88d 3007 	strb.w	r3, [sp, #7]
   14124:	462b      	mov	r3, r5
   14126:	4619      	mov	r1, r3
   14128:	4806      	ldr	r0, [pc, #24]	; (14144 <unsigned char util::Value<TimerInterface::MatchControlRegister, unsigned char>(TimerInterface::MatchControlRegister)+0x2c>)
   1412a:	f001 fa1f 	bl	1556c <__cyg_profile_func_enter>
  return static_cast<Type>(enum_type_value);
   1412e:	f89d 4007 	ldrb.w	r4, [sp, #7]
   14132:	462b      	mov	r3, r5
   14134:	4619      	mov	r1, r3
   14136:	4803      	ldr	r0, [pc, #12]	; (14144 <unsigned char util::Value<TimerInterface::MatchControlRegister, unsigned char>(TimerInterface::MatchControlRegister)+0x2c>)
   14138:	f001 fa2c 	bl	15594 <__cyg_profile_func_exit>
   1413c:	4623      	mov	r3, r4
}
   1413e:	4618      	mov	r0, r3
   14140:	b003      	add	sp, #12
   14142:	bd30      	pop	{r4, r5, pc}
   14144:	00014119 	.word	0x00014119

00014148 <Timer::SetTimer(unsigned long, TimerInterface::TimerIsrCondition, TimerInterface::MatchControlRegister)>:
  ///
  /// @param ticks the count of the timer register (TC) to have an ISR fire
  /// @param condition the condition for which a timer interrupt will occur
  /// @param match_register which match register (from 0 to 3) should be used
  ///                       for holding the ticks for the condition.
  void SetTimer(uint32_t ticks, TimerIsrCondition condition,
   14148:	b570      	push	{r4, r5, r6, lr}
   1414a:	b086      	sub	sp, #24
   1414c:	4676      	mov	r6, lr
   1414e:	9003      	str	r0, [sp, #12]
   14150:	9102      	str	r1, [sp, #8]
   14152:	4611      	mov	r1, r2
   14154:	461a      	mov	r2, r3
   14156:	460b      	mov	r3, r1
   14158:	f88d 3007 	strb.w	r3, [sp, #7]
   1415c:	4613      	mov	r3, r2
   1415e:	f88d 3006 	strb.w	r3, [sp, #6]
   14162:	4633      	mov	r3, r6
   14164:	4619      	mov	r1, r3
   14166:	4832      	ldr	r0, [pc, #200]	; (14230 <Timer::SetTimer(unsigned long, TimerInterface::TimerIsrCondition, TimerInterface::MatchControlRegister)+0xe8>)
   14168:	f001 fa00 	bl	1556c <__cyg_profile_func_enter>
                MatchControlRegister match_register = kMat0) override final
  {
    static constexpr uint8_t kClearMode = 0b0111;

    uint8_t match_value = util::Value(match_register);
   1416c:	f89d 3006 	ldrb.w	r3, [sp, #6]
   14170:	4618      	mov	r0, r3
   14172:	f7ff ffd1 	bl	14118 <unsigned char util::Value<TimerInterface::MatchControlRegister, unsigned char>(TimerInterface::MatchControlRegister)>
   14176:	4603      	mov	r3, r0
   14178:	f88d 3017 	strb.w	r3, [sp, #23]
    tim_register[channel_]->MCR &= ~(kClearMode << match_value);
   1417c:	9b03      	ldr	r3, [sp, #12]
   1417e:	7a1b      	ldrb	r3, [r3, #8]
   14180:	461a      	mov	r2, r3
   14182:	4b2c      	ldr	r3, [pc, #176]	; (14234 <Timer::SetTimer(unsigned long, TimerInterface::TimerIsrCondition, TimerInterface::MatchControlRegister)+0xec>)
   14184:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   14188:	695a      	ldr	r2, [r3, #20]
   1418a:	f89d 3017 	ldrb.w	r3, [sp, #23]
   1418e:	2107      	movs	r1, #7
   14190:	fa01 f303 	lsl.w	r3, r1, r3
   14194:	43db      	mvns	r3, r3
   14196:	4619      	mov	r1, r3
   14198:	9b03      	ldr	r3, [sp, #12]
   1419a:	7a1b      	ldrb	r3, [r3, #8]
   1419c:	4618      	mov	r0, r3
   1419e:	4b25      	ldr	r3, [pc, #148]	; (14234 <Timer::SetTimer(unsigned long, TimerInterface::TimerIsrCondition, TimerInterface::MatchControlRegister)+0xec>)
   141a0:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   141a4:	400a      	ands	r2, r1
   141a6:	615a      	str	r2, [r3, #20]
    tim_register[channel_]->MCR |= condition << match_value;
   141a8:	9b03      	ldr	r3, [sp, #12]
   141aa:	7a1b      	ldrb	r3, [r3, #8]
   141ac:	461a      	mov	r2, r3
   141ae:	4b21      	ldr	r3, [pc, #132]	; (14234 <Timer::SetTimer(unsigned long, TimerInterface::TimerIsrCondition, TimerInterface::MatchControlRegister)+0xec>)
   141b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   141b4:	695a      	ldr	r2, [r3, #20]
   141b6:	f89d 1007 	ldrb.w	r1, [sp, #7]
   141ba:	f89d 3017 	ldrb.w	r3, [sp, #23]
   141be:	fa01 f303 	lsl.w	r3, r1, r3
   141c2:	4619      	mov	r1, r3
   141c4:	9b03      	ldr	r3, [sp, #12]
   141c6:	7a1b      	ldrb	r3, [r3, #8]
   141c8:	4618      	mov	r0, r3
   141ca:	4b1a      	ldr	r3, [pc, #104]	; (14234 <Timer::SetTimer(unsigned long, TimerInterface::TimerIsrCondition, TimerInterface::MatchControlRegister)+0xec>)
   141cc:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   141d0:	430a      	orrs	r2, r1
   141d2:	615a      	str	r2, [r3, #20]
    *match[channel_][match_value / 3] |= (((ticks / 2)) << 0);
   141d4:	9b03      	ldr	r3, [sp, #12]
   141d6:	7a1b      	ldrb	r3, [r3, #8]
   141d8:	4618      	mov	r0, r3
   141da:	f89d 3017 	ldrb.w	r3, [sp, #23]
   141de:	4a16      	ldr	r2, [pc, #88]	; (14238 <Timer::SetTimer(unsigned long, TimerInterface::TimerIsrCondition, TimerInterface::MatchControlRegister)+0xf0>)
   141e0:	fba2 2303 	umull	r2, r3, r2, r3
   141e4:	085b      	lsrs	r3, r3, #1
   141e6:	b2db      	uxtb	r3, r3
   141e8:	4619      	mov	r1, r3
   141ea:	4a14      	ldr	r2, [pc, #80]	; (1423c <Timer::SetTimer(unsigned long, TimerInterface::TimerIsrCondition, TimerInterface::MatchControlRegister)+0xf4>)
   141ec:	0083      	lsls	r3, r0, #2
   141ee:	440b      	add	r3, r1
   141f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   141f4:	6819      	ldr	r1, [r3, #0]
   141f6:	9b02      	ldr	r3, [sp, #8]
   141f8:	085a      	lsrs	r2, r3, #1
   141fa:	9b03      	ldr	r3, [sp, #12]
   141fc:	7a1b      	ldrb	r3, [r3, #8]
   141fe:	461d      	mov	r5, r3
   14200:	f89d 3017 	ldrb.w	r3, [sp, #23]
   14204:	480c      	ldr	r0, [pc, #48]	; (14238 <Timer::SetTimer(unsigned long, TimerInterface::TimerIsrCondition, TimerInterface::MatchControlRegister)+0xf0>)
   14206:	fba0 0303 	umull	r0, r3, r0, r3
   1420a:	085b      	lsrs	r3, r3, #1
   1420c:	b2db      	uxtb	r3, r3
   1420e:	461c      	mov	r4, r3
   14210:	480a      	ldr	r0, [pc, #40]	; (1423c <Timer::SetTimer(unsigned long, TimerInterface::TimerIsrCondition, TimerInterface::MatchControlRegister)+0xf4>)
   14212:	00ab      	lsls	r3, r5, #2
   14214:	4423      	add	r3, r4
   14216:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
   1421a:	430a      	orrs	r2, r1
   1421c:	601a      	str	r2, [r3, #0]
   1421e:	4633      	mov	r3, r6
   14220:	4619      	mov	r1, r3
   14222:	4803      	ldr	r0, [pc, #12]	; (14230 <Timer::SetTimer(unsigned long, TimerInterface::TimerIsrCondition, TimerInterface::MatchControlRegister)+0xe8>)
   14224:	f001 f9b6 	bl	15594 <__cyg_profile_func_exit>
  }
   14228:	bf00      	nop
   1422a:	b006      	add	sp, #24
   1422c:	bd70      	pop	{r4, r5, r6, pc}
   1422e:	bf00      	nop
   14230:	00014149 	.word	0x00014149
   14234:	10000384 	.word	0x10000384
   14238:	aaaaaaab 	.word	0xaaaaaaab
   1423c:	10000e74 	.word	0x10000e74

00014240 <Timer::GetTimer()>:

  [[gnu::always_inline]] uint32_t GetTimer() override final {
   14240:	b530      	push	{r4, r5, lr}
   14242:	b083      	sub	sp, #12
   14244:	4675      	mov	r5, lr
   14246:	9001      	str	r0, [sp, #4]
   14248:	462b      	mov	r3, r5
   1424a:	4619      	mov	r1, r3
   1424c:	4809      	ldr	r0, [pc, #36]	; (14274 <Timer::GetTimer()+0x34>)
   1424e:	f001 f98d 	bl	1556c <__cyg_profile_func_enter>
    return tim_register[channel_]->TC;
   14252:	9b01      	ldr	r3, [sp, #4]
   14254:	7a1b      	ldrb	r3, [r3, #8]
   14256:	461a      	mov	r2, r3
   14258:	4b07      	ldr	r3, [pc, #28]	; (14278 <Timer::GetTimer()+0x38>)
   1425a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   1425e:	689c      	ldr	r4, [r3, #8]
   14260:	462b      	mov	r3, r5
   14262:	4619      	mov	r1, r3
   14264:	4803      	ldr	r0, [pc, #12]	; (14274 <Timer::GetTimer()+0x34>)
   14266:	f001 f995 	bl	15594 <__cyg_profile_func_exit>
   1426a:	4623      	mov	r3, r4
  }
   1426c:	4618      	mov	r0, r3
   1426e:	b003      	add	sp, #12
   14270:	bd30      	pop	{r4, r5, pc}
   14272:	bf00      	nop
   14274:	00014241 	.word	0x00014241
   14278:	10000384 	.word	0x10000384

0001427c <Uart::SetBaudRate(unsigned long)>:
  constexpr Uart(Channels mode, PinInterface * tx_pin, PinInterface * rx_pin)
      : channel_(static_cast<uint8_t>(mode)), tx_(tx_pin), rx_(rx_pin)
  {
  }

  void SetBaudRate(uint32_t baud_rate) override
   1427c:	b510      	push	{r4, lr}
   1427e:	b088      	sub	sp, #32
   14280:	4674      	mov	r4, lr
   14282:	9001      	str	r0, [sp, #4]
   14284:	9100      	str	r1, [sp, #0]
   14286:	4623      	mov	r3, r4
   14288:	4619      	mov	r1, r3
   1428a:	482d      	ldr	r0, [pc, #180]	; (14340 <Uart::SetBaudRate(unsigned long)+0xc4>)
   1428c:	f001 f96e 	bl	1556c <__cyg_profile_func_enter>
  {
    constexpr uint8_t kDlabBit = (1 << 7);
   14290:	2380      	movs	r3, #128	; 0x80
   14292:	f88d 301f 	strb.w	r3, [sp, #31]
    float baudrate             = static_cast<float>(baud_rate);
   14296:	9b00      	ldr	r3, [sp, #0]
   14298:	ee07 3a90 	vmov	s15, r3
   1429c:	eef8 7a67 	vcvt.f32.u32	s15, s15
   142a0:	edcd 7a06 	vstr	s15, [sp, #24]
    UartCalibration_t dividers = GenerateUartCalibration(baudrate);
   142a4:	ab02      	add	r3, sp, #8
   142a6:	ed9d 0a06 	vldr	s0, [sp, #24]
   142aa:	9901      	ldr	r1, [sp, #4]
   142ac:	4618      	mov	r0, r3
   142ae:	f000 fb2d 	bl	1490c <Uart::GenerateUartCalibration(float)>

    uint8_t dlm = static_cast<uint8_t>((dividers.divide_latch >> 8) & 0xFF);
   142b2:	9b02      	ldr	r3, [sp, #8]
   142b4:	0a1b      	lsrs	r3, r3, #8
   142b6:	f88d 3017 	strb.w	r3, [sp, #23]
    uint8_t dll = static_cast<uint8_t>(dividers.divide_latch & 0xFF);
   142ba:	9b02      	ldr	r3, [sp, #8]
   142bc:	f88d 3016 	strb.w	r3, [sp, #22]
    uint8_t fdr = static_cast<uint8_t>((dividers.multiply & 0xF) << 4 |
   142c0:	9b04      	ldr	r3, [sp, #16]
   142c2:	b2db      	uxtb	r3, r3
   142c4:	011b      	lsls	r3, r3, #4
   142c6:	b2da      	uxtb	r2, r3
                                       (dividers.divide_add & 0xF));
   142c8:	9b03      	ldr	r3, [sp, #12]
   142ca:	b2db      	uxtb	r3, r3
   142cc:	f003 030f 	and.w	r3, r3, #15
   142d0:	b2db      	uxtb	r3, r3
    uint8_t fdr = static_cast<uint8_t>((dividers.multiply & 0xF) << 4 |
   142d2:	4313      	orrs	r3, r2
   142d4:	f88d 3015 	strb.w	r3, [sp, #21]

    // Set baud rate
    uart[channel_]->LCR = kDlabBit;
   142d8:	9b01      	ldr	r3, [sp, #4]
   142da:	7a1b      	ldrb	r3, [r3, #8]
   142dc:	461a      	mov	r2, r3
   142de:	4b19      	ldr	r3, [pc, #100]	; (14344 <Uart::SetBaudRate(unsigned long)+0xc8>)
   142e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   142e4:	2280      	movs	r2, #128	; 0x80
   142e6:	731a      	strb	r2, [r3, #12]
    uart[channel_]->DLM = dlm;
   142e8:	9b01      	ldr	r3, [sp, #4]
   142ea:	7a1b      	ldrb	r3, [r3, #8]
   142ec:	461a      	mov	r2, r3
   142ee:	4b15      	ldr	r3, [pc, #84]	; (14344 <Uart::SetBaudRate(unsigned long)+0xc8>)
   142f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   142f4:	f89d 2017 	ldrb.w	r2, [sp, #23]
   142f8:	711a      	strb	r2, [r3, #4]
    uart[channel_]->DLL = dll;
   142fa:	9b01      	ldr	r3, [sp, #4]
   142fc:	7a1b      	ldrb	r3, [r3, #8]
   142fe:	461a      	mov	r2, r3
   14300:	4b10      	ldr	r3, [pc, #64]	; (14344 <Uart::SetBaudRate(unsigned long)+0xc8>)
   14302:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   14306:	f89d 2016 	ldrb.w	r2, [sp, #22]
   1430a:	701a      	strb	r2, [r3, #0]
    uart[channel_]->FDR = fdr;
   1430c:	9b01      	ldr	r3, [sp, #4]
   1430e:	7a1b      	ldrb	r3, [r3, #8]
   14310:	461a      	mov	r2, r3
   14312:	4b0c      	ldr	r3, [pc, #48]	; (14344 <Uart::SetBaudRate(unsigned long)+0xc8>)
   14314:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   14318:	f89d 2015 	ldrb.w	r2, [sp, #21]
   1431c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    uart[channel_]->LCR = kStandardUart;
   14320:	9b01      	ldr	r3, [sp, #4]
   14322:	7a1b      	ldrb	r3, [r3, #8]
   14324:	461a      	mov	r2, r3
   14326:	4b07      	ldr	r3, [pc, #28]	; (14344 <Uart::SetBaudRate(unsigned long)+0xc8>)
   14328:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   1432c:	2203      	movs	r2, #3
   1432e:	731a      	strb	r2, [r3, #12]
   14330:	4623      	mov	r3, r4
   14332:	4619      	mov	r1, r3
   14334:	4802      	ldr	r0, [pc, #8]	; (14340 <Uart::SetBaudRate(unsigned long)+0xc4>)
   14336:	f001 f92d 	bl	15594 <__cyg_profile_func_exit>
  }
   1433a:	bf00      	nop
   1433c:	b008      	add	sp, #32
   1433e:	bd10      	pop	{r4, pc}
   14340:	0001427d 	.word	0x0001427d
   14344:	10000394 	.word	0x10000394

00014348 <Uart::Initialize(unsigned long)>:

  bool Initialize(uint32_t baud_rate) override
   14348:	b530      	push	{r4, r5, lr}
   1434a:	b085      	sub	sp, #20
   1434c:	4675      	mov	r5, lr
   1434e:	9001      	str	r0, [sp, #4]
   14350:	9100      	str	r1, [sp, #0]
   14352:	462b      	mov	r3, r5
   14354:	4619      	mov	r1, r3
   14356:	4830      	ldr	r0, [pc, #192]	; (14418 <Uart::Initialize(unsigned long)+0xd0>)
   14358:	f001 f908 	bl	1556c <__cyg_profile_func_enter>
  {
    constexpr uint8_t kFIFOEnableAndReset = 0b111;
   1435c:	2307      	movs	r3, #7
   1435e:	f88d 300f 	strb.w	r3, [sp, #15]
    // Powering the port
    PowerUpPeripheral(kPowerbit[channel_]);
   14362:	9b01      	ldr	r3, [sp, #4]
   14364:	1d18      	adds	r0, r3, #4
   14366:	9b01      	ldr	r3, [sp, #4]
   14368:	685b      	ldr	r3, [r3, #4]
   1436a:	3314      	adds	r3, #20
   1436c:	681b      	ldr	r3, [r3, #0]
   1436e:	9a01      	ldr	r2, [sp, #4]
   14370:	7a12      	ldrb	r2, [r2, #8]
   14372:	0092      	lsls	r2, r2, #2
   14374:	4929      	ldr	r1, [pc, #164]	; (1441c <Uart::Initialize(unsigned long)+0xd4>)
   14376:	440a      	add	r2, r1
   14378:	4611      	mov	r1, r2
   1437a:	4798      	blx	r3
    // Setting the pin functions and modes
    rx_->SetPinFunction(kRxUartPortFunction[channel_]);
   1437c:	9b01      	ldr	r3, [sp, #4]
   1437e:	6918      	ldr	r0, [r3, #16]
   14380:	9b01      	ldr	r3, [sp, #4]
   14382:	691b      	ldr	r3, [r3, #16]
   14384:	681b      	ldr	r3, [r3, #0]
   14386:	681b      	ldr	r3, [r3, #0]
   14388:	9a01      	ldr	r2, [sp, #4]
   1438a:	7a12      	ldrb	r2, [r2, #8]
   1438c:	4611      	mov	r1, r2
   1438e:	4a24      	ldr	r2, [pc, #144]	; (14420 <Uart::Initialize(unsigned long)+0xd8>)
   14390:	5c52      	ldrb	r2, [r2, r1]
   14392:	4611      	mov	r1, r2
   14394:	4798      	blx	r3
    tx_->SetPinFunction(kTxUartPortFunction[channel_]);
   14396:	9b01      	ldr	r3, [sp, #4]
   14398:	68d8      	ldr	r0, [r3, #12]
   1439a:	9b01      	ldr	r3, [sp, #4]
   1439c:	68db      	ldr	r3, [r3, #12]
   1439e:	681b      	ldr	r3, [r3, #0]
   143a0:	681b      	ldr	r3, [r3, #0]
   143a2:	9a01      	ldr	r2, [sp, #4]
   143a4:	7a12      	ldrb	r2, [r2, #8]
   143a6:	4611      	mov	r1, r2
   143a8:	4a1e      	ldr	r2, [pc, #120]	; (14424 <Uart::Initialize(unsigned long)+0xdc>)
   143aa:	5c52      	ldrb	r2, [r2, r1]
   143ac:	4611      	mov	r1, r2
   143ae:	4798      	blx	r3
    rx_->SetMode(PinInterface::Mode::kPullUp);
   143b0:	9b01      	ldr	r3, [sp, #4]
   143b2:	691a      	ldr	r2, [r3, #16]
   143b4:	9b01      	ldr	r3, [sp, #4]
   143b6:	691b      	ldr	r3, [r3, #16]
   143b8:	681b      	ldr	r3, [r3, #0]
   143ba:	3304      	adds	r3, #4
   143bc:	681b      	ldr	r3, [r3, #0]
   143be:	2102      	movs	r1, #2
   143c0:	4610      	mov	r0, r2
   143c2:	4798      	blx	r3
    tx_->SetMode(PinInterface::Mode::kPullUp);
   143c4:	9b01      	ldr	r3, [sp, #4]
   143c6:	68da      	ldr	r2, [r3, #12]
   143c8:	9b01      	ldr	r3, [sp, #4]
   143ca:	68db      	ldr	r3, [r3, #12]
   143cc:	681b      	ldr	r3, [r3, #0]
   143ce:	3304      	adds	r3, #4
   143d0:	681b      	ldr	r3, [r3, #0]
   143d2:	2102      	movs	r1, #2
   143d4:	4610      	mov	r0, r2
   143d6:	4798      	blx	r3
    // Baud rate setting
    SetBaudRate(baud_rate);
   143d8:	9900      	ldr	r1, [sp, #0]
   143da:	9801      	ldr	r0, [sp, #4]
   143dc:	f7ff ff4e 	bl	1427c <Uart::SetBaudRate(unsigned long)>
    uart[channel_]->FCR |= kFIFOEnableAndReset;
   143e0:	9b01      	ldr	r3, [sp, #4]
   143e2:	7a1b      	ldrb	r3, [r3, #8]
   143e4:	461a      	mov	r2, r3
   143e6:	4b10      	ldr	r3, [pc, #64]	; (14428 <Uart::Initialize(unsigned long)+0xe0>)
   143e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   143ec:	7a1b      	ldrb	r3, [r3, #8]
   143ee:	b2da      	uxtb	r2, r3
   143f0:	9b01      	ldr	r3, [sp, #4]
   143f2:	7a1b      	ldrb	r3, [r3, #8]
   143f4:	4619      	mov	r1, r3
   143f6:	4b0c      	ldr	r3, [pc, #48]	; (14428 <Uart::Initialize(unsigned long)+0xe0>)
   143f8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   143fc:	f042 0207 	orr.w	r2, r2, #7
   14400:	b2d2      	uxtb	r2, r2
   14402:	721a      	strb	r2, [r3, #8]
    return true;
   14404:	2401      	movs	r4, #1
   14406:	462b      	mov	r3, r5
   14408:	4619      	mov	r1, r3
   1440a:	4803      	ldr	r0, [pc, #12]	; (14418 <Uart::Initialize(unsigned long)+0xd0>)
   1440c:	f001 f8c2 	bl	15594 <__cyg_profile_func_exit>
   14410:	4623      	mov	r3, r4
  }
   14412:	4618      	mov	r0, r3
   14414:	b005      	add	sp, #20
   14416:	bd30      	pop	{r4, r5, pc}
   14418:	00014349 	.word	0x00014349
   1441c:	00019858 	.word	0x00019858
   14420:	00019854 	.word	0x00019854
   14424:	00019850 	.word	0x00019850
   14428:	10000394 	.word	0x10000394

0001442c <Uart::Send(unsigned char)::{lambda()#1}::operator()() const>:

  void Send(uint8_t data) override
  {
    uart[channel_]->THR              = data;
    auto wait_for_transfer_to_finish = [this]() -> bool {
   1442c:	b530      	push	{r4, r5, lr}
   1442e:	b083      	sub	sp, #12
   14430:	4675      	mov	r5, lr
   14432:	9001      	str	r0, [sp, #4]
   14434:	462b      	mov	r3, r5
   14436:	4619      	mov	r1, r3
   14438:	480d      	ldr	r0, [pc, #52]	; (14470 <Uart::Send(unsigned char)::{lambda()#1}::operator()() const+0x44>)
   1443a:	f001 f897 	bl	1556c <__cyg_profile_func_enter>
   1443e:	9b01      	ldr	r3, [sp, #4]
   14440:	681b      	ldr	r3, [r3, #0]
      return (uart[channel_]->LSR & (1 << 5));
   14442:	7a1b      	ldrb	r3, [r3, #8]
   14444:	461a      	mov	r2, r3
   14446:	4b0b      	ldr	r3, [pc, #44]	; (14474 <Uart::Send(unsigned char)::{lambda()#1}::operator()() const+0x48>)
   14448:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   1444c:	7d1b      	ldrb	r3, [r3, #20]
   1444e:	b2db      	uxtb	r3, r3
   14450:	f003 0320 	and.w	r3, r3, #32
   14454:	2b00      	cmp	r3, #0
   14456:	bf14      	ite	ne
   14458:	2301      	movne	r3, #1
   1445a:	2300      	moveq	r3, #0
   1445c:	b2dc      	uxtb	r4, r3
   1445e:	462b      	mov	r3, r5
   14460:	4619      	mov	r1, r3
   14462:	4803      	ldr	r0, [pc, #12]	; (14470 <Uart::Send(unsigned char)::{lambda()#1}::operator()() const+0x44>)
   14464:	f001 f896 	bl	15594 <__cyg_profile_func_exit>
   14468:	4623      	mov	r3, r4
    };
   1446a:	4618      	mov	r0, r3
   1446c:	b003      	add	sp, #12
   1446e:	bd30      	pop	{r4, r5, pc}
   14470:	0001442d 	.word	0x0001442d
   14474:	10000394 	.word	0x10000394

00014478 <Uart::Send(unsigned char)>:
  void Send(uint8_t data) override
   14478:	e92d 4830 	stmdb	sp!, {r4, r5, fp, lr}
   1447c:	b08a      	sub	sp, #40	; 0x28
   1447e:	4675      	mov	r5, lr
   14480:	9001      	str	r0, [sp, #4]
   14482:	460b      	mov	r3, r1
   14484:	f88d 3003 	strb.w	r3, [sp, #3]
   14488:	462b      	mov	r3, r5
   1448a:	4619      	mov	r1, r3
   1448c:	4831      	ldr	r0, [pc, #196]	; (14554 <Uart::Send(unsigned char)+0xdc>)
   1448e:	f001 f86d 	bl	1556c <__cyg_profile_func_enter>
    uart[channel_]->THR              = data;
   14492:	9b01      	ldr	r3, [sp, #4]
   14494:	7a1b      	ldrb	r3, [r3, #8]
   14496:	461a      	mov	r2, r3
   14498:	4b2f      	ldr	r3, [pc, #188]	; (14558 <Uart::Send(unsigned char)+0xe0>)
   1449a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   1449e:	f89d 2003 	ldrb.w	r2, [sp, #3]
   144a2:	701a      	strb	r2, [r3, #0]
    };
   144a4:	9b01      	ldr	r3, [sp, #4]
   144a6:	9304      	str	r3, [sp, #16]
   144a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   144ac:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   144b0:	e9cd 3408 	strd	r3, r4, [sp, #32]
   144b4:	9b04      	ldr	r3, [sp, #16]
   144b6:	9303      	str	r3, [sp, #12]
   144b8:	462b      	mov	r3, r5
   144ba:	4619      	mov	r1, r3
   144bc:	4827      	ldr	r0, [pc, #156]	; (1455c <Uart::Send(unsigned char)+0xe4>)
   144be:	f001 f855 	bl	1556c <__cyg_profile_func_enter>
template <typename F>
[[gnu::always_inline]] inline Status Wait(uint64_t timeout, F is_done);
template <typename F>
inline Status Wait(uint64_t timeout, F is_done)
{
  uint64_t timeout_time = 0;
   144c2:	f04f 0300 	mov.w	r3, #0
   144c6:	f04f 0400 	mov.w	r4, #0
   144ca:	e9cd 3406 	strd	r3, r4, [sp, #24]
  if (timeout == kMaxWait)
   144ce:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   144d2:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
   144d6:	bf08      	it	eq
   144d8:	f1b3 3fff 	cmpeq.w	r3, #4294967295	; 0xffffffff
   144dc:	d106      	bne.n	144ec <Uart::Send(unsigned char)+0x74>
  {
    timeout_time = kMaxWait;
   144de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   144e2:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   144e6:	e9cd 3406 	strd	r3, r4, [sp, #24]
   144ea:	e00b      	b.n	14504 <Uart::Send(unsigned char)+0x8c>
  }
  else
  {
    timeout_time = Milliseconds() + timeout;
   144ec:	f7fc fd1c 	bl	10f28 <Milliseconds()>
   144f0:	460a      	mov	r2, r1
   144f2:	4601      	mov	r1, r0
   144f4:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   144f8:	eb13 0b01 	adds.w	fp, r3, r1
   144fc:	eb44 0c02 	adc.w	ip, r4, r2
   14500:	e9cd bc06 	strd	fp, ip, [sp, #24]
  }

  Status status = Status::kTimedOut;
   14504:	2301      	movs	r3, #1
   14506:	9305      	str	r3, [sp, #20]
  while (Milliseconds() < timeout_time)
   14508:	f7fc fd0e 	bl	10f28 <Milliseconds()>
   1450c:	460a      	mov	r2, r1
   1450e:	4601      	mov	r1, r0
   14510:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
   14514:	42a2      	cmp	r2, r4
   14516:	bf08      	it	eq
   14518:	4299      	cmpeq	r1, r3
   1451a:	bf34      	ite	cc
   1451c:	2301      	movcc	r3, #1
   1451e:	2300      	movcs	r3, #0
   14520:	b2db      	uxtb	r3, r3
   14522:	2b00      	cmp	r3, #0
   14524:	d008      	beq.n	14538 <Uart::Send(unsigned char)+0xc0>
  {
    if (is_done())
   14526:	ab03      	add	r3, sp, #12
   14528:	4618      	mov	r0, r3
   1452a:	f7ff ff7f 	bl	1442c <Uart::Send(unsigned char)::{lambda()#1}::operator()() const>
   1452e:	4603      	mov	r3, r0
   14530:	2b00      	cmp	r3, #0
   14532:	d0e9      	beq.n	14508 <Uart::Send(unsigned char)+0x90>
    {
      status = Status::kSuccess;
   14534:	2300      	movs	r3, #0
   14536:	9305      	str	r3, [sp, #20]
   14538:	462b      	mov	r3, r5
   1453a:	4619      	mov	r1, r3
   1453c:	4807      	ldr	r0, [pc, #28]	; (1455c <Uart::Send(unsigned char)+0xe4>)
   1453e:	f001 f829 	bl	15594 <__cyg_profile_func_exit>
   14542:	462b      	mov	r3, r5
   14544:	4619      	mov	r1, r3
   14546:	4803      	ldr	r0, [pc, #12]	; (14554 <Uart::Send(unsigned char)+0xdc>)
   14548:	f001 f824 	bl	15594 <__cyg_profile_func_exit>
    Wait(kMaxWait, wait_for_transfer_to_finish);
  }
   1454c:	bf00      	nop
   1454e:	b00a      	add	sp, #40	; 0x28
   14550:	e8bd 8830 	ldmia.w	sp!, {r4, r5, fp, pc}
   14554:	00014479 	.word	0x00014479
   14558:	10000394 	.word	0x10000394
   1455c:	00014d75 	.word	0x00014d75

00014560 <Uart::Receive(unsigned long)::{lambda()#1}::operator()() const>:

  uint8_t Receive([[maybe_unused]] uint32_t timeout = 0x7FFFFFFF) override
  {
    uint8_t receiver   = '\xFF';
    auto byte_recieved = [this]() -> bool {
   14560:	b530      	push	{r4, r5, lr}
   14562:	b083      	sub	sp, #12
   14564:	4675      	mov	r5, lr
   14566:	9001      	str	r0, [sp, #4]
   14568:	462b      	mov	r3, r5
   1456a:	4619      	mov	r1, r3
   1456c:	480d      	ldr	r0, [pc, #52]	; (145a4 <Uart::Receive(unsigned long)::{lambda()#1}::operator()() const+0x44>)
   1456e:	f000 fffd 	bl	1556c <__cyg_profile_func_enter>
   14572:	9b01      	ldr	r3, [sp, #4]
   14574:	681b      	ldr	r3, [r3, #0]
      return (uart[channel_]->LSR & (1 << 0));
   14576:	7a1b      	ldrb	r3, [r3, #8]
   14578:	461a      	mov	r2, r3
   1457a:	4b0b      	ldr	r3, [pc, #44]	; (145a8 <Uart::Receive(unsigned long)::{lambda()#1}::operator()() const+0x48>)
   1457c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   14580:	7d1b      	ldrb	r3, [r3, #20]
   14582:	b2db      	uxtb	r3, r3
   14584:	f003 0301 	and.w	r3, r3, #1
   14588:	2b00      	cmp	r3, #0
   1458a:	bf14      	ite	ne
   1458c:	2301      	movne	r3, #1
   1458e:	2300      	moveq	r3, #0
   14590:	b2dc      	uxtb	r4, r3
   14592:	462b      	mov	r3, r5
   14594:	4619      	mov	r1, r3
   14596:	4803      	ldr	r0, [pc, #12]	; (145a4 <Uart::Receive(unsigned long)::{lambda()#1}::operator()() const+0x44>)
   14598:	f000 fffc 	bl	15594 <__cyg_profile_func_exit>
   1459c:	4623      	mov	r3, r4
    };
   1459e:	4618      	mov	r0, r3
   145a0:	b003      	add	sp, #12
   145a2:	bd30      	pop	{r4, r5, pc}
   145a4:	00014561 	.word	0x00014561
   145a8:	10000394 	.word	0x10000394

000145ac <Uart::Receive(unsigned long)>:
  uint8_t Receive([[maybe_unused]] uint32_t timeout = 0x7FFFFFFF) override
   145ac:	e92d 4830 	stmdb	sp!, {r4, r5, fp, lr}
   145b0:	b08c      	sub	sp, #48	; 0x30
   145b2:	4675      	mov	r5, lr
   145b4:	9001      	str	r0, [sp, #4]
   145b6:	9100      	str	r1, [sp, #0]
   145b8:	462b      	mov	r3, r5
   145ba:	4619      	mov	r1, r3
   145bc:	4836      	ldr	r0, [pc, #216]	; (14698 <Uart::Receive(unsigned long)+0xec>)
   145be:	f000 ffd5 	bl	1556c <__cyg_profile_func_enter>
    uint8_t receiver   = '\xFF';
   145c2:	23ff      	movs	r3, #255	; 0xff
   145c4:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
    };
   145c8:	9b01      	ldr	r3, [sp, #4]
   145ca:	9304      	str	r3, [sp, #16]

    Status status = Wait(timeout, byte_recieved);
   145cc:	9b00      	ldr	r3, [sp, #0]
   145ce:	f04f 0400 	mov.w	r4, #0
   145d2:	e9cd 3408 	strd	r3, r4, [sp, #32]
   145d6:	9b04      	ldr	r3, [sp, #16]
   145d8:	9303      	str	r3, [sp, #12]
   145da:	462b      	mov	r3, r5
   145dc:	4619      	mov	r1, r3
   145de:	482f      	ldr	r0, [pc, #188]	; (1469c <Uart::Receive(unsigned long)+0xf0>)
   145e0:	f000 ffc4 	bl	1556c <__cyg_profile_func_enter>
  uint64_t timeout_time = 0;
   145e4:	f04f 0300 	mov.w	r3, #0
   145e8:	f04f 0400 	mov.w	r4, #0
   145ec:	e9cd 3406 	strd	r3, r4, [sp, #24]
  if (timeout == kMaxWait)
   145f0:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   145f4:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
   145f8:	bf08      	it	eq
   145fa:	f1b3 3fff 	cmpeq.w	r3, #4294967295	; 0xffffffff
   145fe:	d106      	bne.n	1460e <Uart::Receive(unsigned long)+0x62>
    timeout_time = kMaxWait;
   14600:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   14604:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   14608:	e9cd 3406 	strd	r3, r4, [sp, #24]
   1460c:	e00b      	b.n	14626 <Uart::Receive(unsigned long)+0x7a>
    timeout_time = Milliseconds() + timeout;
   1460e:	f7fc fc8b 	bl	10f28 <Milliseconds()>
   14612:	460a      	mov	r2, r1
   14614:	4601      	mov	r1, r0
   14616:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   1461a:	eb13 0b01 	adds.w	fp, r3, r1
   1461e:	eb44 0c02 	adc.w	ip, r4, r2
   14622:	e9cd bc06 	strd	fp, ip, [sp, #24]
  Status status = Status::kTimedOut;
   14626:	2301      	movs	r3, #1
   14628:	9305      	str	r3, [sp, #20]
  while (Milliseconds() < timeout_time)
   1462a:	f7fc fc7d 	bl	10f28 <Milliseconds()>
   1462e:	460a      	mov	r2, r1
   14630:	4601      	mov	r1, r0
   14632:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
   14636:	42a2      	cmp	r2, r4
   14638:	bf08      	it	eq
   1463a:	4299      	cmpeq	r1, r3
   1463c:	bf34      	ite	cc
   1463e:	2301      	movcc	r3, #1
   14640:	2300      	movcs	r3, #0
   14642:	b2db      	uxtb	r3, r3
   14644:	2b00      	cmp	r3, #0
   14646:	d008      	beq.n	1465a <Uart::Receive(unsigned long)+0xae>
    if (is_done())
   14648:	ab03      	add	r3, sp, #12
   1464a:	4618      	mov	r0, r3
   1464c:	f7ff ff88 	bl	14560 <Uart::Receive(unsigned long)::{lambda()#1}::operator()() const>
   14650:	4603      	mov	r3, r0
   14652:	2b00      	cmp	r3, #0
   14654:	d0e9      	beq.n	1462a <Uart::Receive(unsigned long)+0x7e>
      status = Status::kSuccess;
   14656:	2300      	movs	r3, #0
   14658:	9305      	str	r3, [sp, #20]
      break;
    }
  }
  return status;
   1465a:	9c05      	ldr	r4, [sp, #20]
   1465c:	462b      	mov	r3, r5
   1465e:	4619      	mov	r1, r3
   14660:	480e      	ldr	r0, [pc, #56]	; (1469c <Uart::Receive(unsigned long)+0xf0>)
   14662:	f000 ff97 	bl	15594 <__cyg_profile_func_exit>
   14666:	940a      	str	r4, [sp, #40]	; 0x28

    if (status == Status::kSuccess)
   14668:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1466a:	2b00      	cmp	r3, #0
   1466c:	d108      	bne.n	14680 <Uart::Receive(unsigned long)+0xd4>
    {
      receiver = static_cast<uint8_t>(uart[channel_]->RBR);
   1466e:	9b01      	ldr	r3, [sp, #4]
   14670:	7a1b      	ldrb	r3, [r3, #8]
   14672:	461a      	mov	r2, r3
   14674:	4b0a      	ldr	r3, [pc, #40]	; (146a0 <Uart::Receive(unsigned long)+0xf4>)
   14676:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   1467a:	781b      	ldrb	r3, [r3, #0]
   1467c:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
    }
    return receiver;
   14680:	f89d 402f 	ldrb.w	r4, [sp, #47]	; 0x2f
   14684:	462b      	mov	r3, r5
   14686:	4619      	mov	r1, r3
   14688:	4803      	ldr	r0, [pc, #12]	; (14698 <Uart::Receive(unsigned long)+0xec>)
   1468a:	f000 ff83 	bl	15594 <__cyg_profile_func_exit>
   1468e:	4623      	mov	r3, r4
  }
   14690:	4618      	mov	r0, r3
   14692:	b00c      	add	sp, #48	; 0x30
   14694:	e8bd 8830 	ldmia.w	sp!, {r4, r5, fp, pc}
   14698:	000145ad 	.word	0x000145ad
   1469c:	00014e1d 	.word	0x00014e1d
   146a0:	10000394 	.word	0x10000394

000146a4 <Uart::FindClosestFractional(float)>:

 private:
  UartCalibration_t FindClosestFractional(float decimal)
   146a4:	b510      	push	{r4, lr}
   146a6:	b08a      	sub	sp, #40	; 0x28
   146a8:	4674      	mov	r4, lr
   146aa:	9003      	str	r0, [sp, #12]
   146ac:	9102      	str	r1, [sp, #8]
   146ae:	ed8d 0a01 	vstr	s0, [sp, #4]
   146b2:	4623      	mov	r3, r4
   146b4:	4619      	mov	r1, r3
   146b6:	4838      	ldr	r0, [pc, #224]	; (14798 <Uart::FindClosestFractional(float)+0xf4>)
   146b8:	f000 ff58 	bl	1556c <__cyg_profile_func_enter>
  {
    UartCalibration_t result;
   146bc:	9b03      	ldr	r3, [sp, #12]
   146be:	2200      	movs	r2, #0
   146c0:	601a      	str	r2, [r3, #0]
   146c2:	9b03      	ldr	r3, [sp, #12]
   146c4:	2200      	movs	r2, #0
   146c6:	605a      	str	r2, [r3, #4]
   146c8:	9b03      	ldr	r3, [sp, #12]
   146ca:	2201      	movs	r2, #1
   146cc:	609a      	str	r2, [r3, #8]
    bool finished = false;
   146ce:	2300      	movs	r3, #0
   146d0:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    for (int div = 0; div < 15 && !finished; div++)
   146d4:	2300      	movs	r3, #0
   146d6:	9308      	str	r3, [sp, #32]
   146d8:	9b08      	ldr	r3, [sp, #32]
   146da:	2b0e      	cmp	r3, #14
   146dc:	dc52      	bgt.n	14784 <Uart::FindClosestFractional(float)+0xe0>
   146de:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   146e2:	2b00      	cmp	r3, #0
   146e4:	d14e      	bne.n	14784 <Uart::FindClosestFractional(float)+0xe0>
    {
      for (int mul = div + 1; mul < 15 && !finished; mul++)
   146e6:	9b08      	ldr	r3, [sp, #32]
   146e8:	3301      	adds	r3, #1
   146ea:	9307      	str	r3, [sp, #28]
   146ec:	9b07      	ldr	r3, [sp, #28]
   146ee:	2b0e      	cmp	r3, #14
   146f0:	dc44      	bgt.n	1477c <Uart::FindClosestFractional(float)+0xd8>
   146f2:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   146f6:	2b00      	cmp	r3, #0
   146f8:	d140      	bne.n	1477c <Uart::FindClosestFractional(float)+0xd8>
      {
        float divf         = static_cast<float>(div);
   146fa:	9b08      	ldr	r3, [sp, #32]
   146fc:	ee07 3a90 	vmov	s15, r3
   14700:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   14704:	edcd 7a06 	vstr	s15, [sp, #24]
        float mulf         = static_cast<float>(mul);
   14708:	9b07      	ldr	r3, [sp, #28]
   1470a:	ee07 3a90 	vmov	s15, r3
   1470e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   14712:	edcd 7a05 	vstr	s15, [sp, #20]
        float test_decimal = 1.0f + divf / mulf;
   14716:	eddd 6a06 	vldr	s13, [sp, #24]
   1471a:	ed9d 7a05 	vldr	s14, [sp, #20]
   1471e:	eec6 7a87 	vdiv.f32	s15, s13, s14
   14722:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
   14726:	ee77 7a87 	vadd.f32	s15, s15, s14
   1472a:	edcd 7a04 	vstr	s15, [sp, #16]
        if (decimal <= test_decimal + kThreshold &&
   1472e:	eddd 7a04 	vldr	s15, [sp, #16]
   14732:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 1479c <Uart::FindClosestFractional(float)+0xf8>
   14736:	ee77 7a87 	vadd.f32	s15, s15, s14
   1473a:	ed9d 7a01 	vldr	s14, [sp, #4]
   1473e:	eeb4 7ae7 	vcmpe.f32	s14, s15
   14742:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   14746:	d815      	bhi.n	14774 <Uart::FindClosestFractional(float)+0xd0>
            decimal >= test_decimal - kThreshold)
   14748:	eddd 7a04 	vldr	s15, [sp, #16]
   1474c:	ed9f 7a13 	vldr	s14, [pc, #76]	; 1479c <Uart::FindClosestFractional(float)+0xf8>
   14750:	ee77 7ac7 	vsub.f32	s15, s15, s14
        if (decimal <= test_decimal + kThreshold &&
   14754:	ed9d 7a01 	vldr	s14, [sp, #4]
   14758:	eeb4 7ae7 	vcmpe.f32	s14, s15
   1475c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   14760:	db08      	blt.n	14774 <Uart::FindClosestFractional(float)+0xd0>
        {
          result.divide_add = div;
   14762:	9a08      	ldr	r2, [sp, #32]
   14764:	9b03      	ldr	r3, [sp, #12]
   14766:	605a      	str	r2, [r3, #4]
          result.multiply   = mul;
   14768:	9a07      	ldr	r2, [sp, #28]
   1476a:	9b03      	ldr	r3, [sp, #12]
   1476c:	609a      	str	r2, [r3, #8]
          finished          = true;
   1476e:	2301      	movs	r3, #1
   14770:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
      for (int mul = div + 1; mul < 15 && !finished; mul++)
   14774:	9b07      	ldr	r3, [sp, #28]
   14776:	3301      	adds	r3, #1
   14778:	9307      	str	r3, [sp, #28]
   1477a:	e7b7      	b.n	146ec <Uart::FindClosestFractional(float)+0x48>
    for (int div = 0; div < 15 && !finished; div++)
   1477c:	9b08      	ldr	r3, [sp, #32]
   1477e:	3301      	adds	r3, #1
   14780:	9308      	str	r3, [sp, #32]
   14782:	e7a9      	b.n	146d8 <Uart::FindClosestFractional(float)+0x34>
        }
      }
    }
    return result;
   14784:	bf00      	nop
   14786:	4623      	mov	r3, r4
   14788:	4619      	mov	r1, r3
   1478a:	4803      	ldr	r0, [pc, #12]	; (14798 <Uart::FindClosestFractional(float)+0xf4>)
   1478c:	f000 ff02 	bl	15594 <__cyg_profile_func_exit>
   14790:	bf00      	nop
  }
   14792:	9803      	ldr	r0, [sp, #12]
   14794:	b00a      	add	sp, #40	; 0x28
   14796:	bd10      	pop	{r4, pc}
   14798:	000146a5 	.word	0x000146a5
   1479c:	3d4ccccd 	.word	0x3d4ccccd

000147a0 <Uart::DividerEstimate(float, float)>:

  float DividerEstimate(float baud_rate, float fraction_estimate = 1)
   147a0:	b510      	push	{r4, lr}
   147a2:	ed2d 8b02 	vpush	{d8}
   147a6:	b086      	sub	sp, #24
   147a8:	4674      	mov	r4, lr
   147aa:	9003      	str	r0, [sp, #12]
   147ac:	ed8d 0a02 	vstr	s0, [sp, #8]
   147b0:	edcd 0a01 	vstr	s1, [sp, #4]
   147b4:	4623      	mov	r3, r4
   147b6:	4619      	mov	r1, r3
   147b8:	4815      	ldr	r0, [pc, #84]	; (14810 <Uart::DividerEstimate(float, float)+0x70>)
   147ba:	f000 fed7 	bl	1556c <__cyg_profile_func_enter>
  {
    float clock_frequency = static_cast<float>(GetPeripheralFrequency());
   147be:	9b03      	ldr	r3, [sp, #12]
   147c0:	1d1a      	adds	r2, r3, #4
   147c2:	9b03      	ldr	r3, [sp, #12]
   147c4:	685b      	ldr	r3, [r3, #4]
   147c6:	3310      	adds	r3, #16
   147c8:	681b      	ldr	r3, [r3, #0]
   147ca:	4610      	mov	r0, r2
   147cc:	4798      	blx	r3
   147ce:	ee07 0a90 	vmov	s15, r0
   147d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
   147d6:	edcd 7a05 	vstr	s15, [sp, #20]
    return clock_frequency / (16.0f * baud_rate * fraction_estimate);
   147da:	eddd 7a02 	vldr	s15, [sp, #8]
   147de:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
   147e2:	ee27 7a87 	vmul.f32	s14, s15, s14
   147e6:	eddd 7a01 	vldr	s15, [sp, #4]
   147ea:	ee67 7a27 	vmul.f32	s15, s14, s15
   147ee:	ed9d 7a05 	vldr	s14, [sp, #20]
   147f2:	ee87 8a27 	vdiv.f32	s16, s14, s15
   147f6:	4623      	mov	r3, r4
   147f8:	4619      	mov	r1, r3
   147fa:	4805      	ldr	r0, [pc, #20]	; (14810 <Uart::DividerEstimate(float, float)+0x70>)
   147fc:	f000 feca 	bl	15594 <__cyg_profile_func_exit>
   14800:	eef0 7a48 	vmov.f32	s15, s16
  }
   14804:	eeb0 0a67 	vmov.f32	s0, s15
   14808:	b006      	add	sp, #24
   1480a:	ecbd 8b02 	vpop	{d8}
   1480e:	bd10      	pop	{r4, pc}
   14810:	000147a1 	.word	0x000147a1

00014814 <Uart::FractionalEstimate(float, float)>:

  float FractionalEstimate(float baud_rate, float divider)
   14814:	b510      	push	{r4, lr}
   14816:	ed2d 8b02 	vpush	{d8}
   1481a:	b086      	sub	sp, #24
   1481c:	4674      	mov	r4, lr
   1481e:	9003      	str	r0, [sp, #12]
   14820:	ed8d 0a02 	vstr	s0, [sp, #8]
   14824:	edcd 0a01 	vstr	s1, [sp, #4]
   14828:	4623      	mov	r3, r4
   1482a:	4619      	mov	r1, r3
   1482c:	4815      	ldr	r0, [pc, #84]	; (14884 <Uart::FractionalEstimate(float, float)+0x70>)
   1482e:	f000 fe9d 	bl	1556c <__cyg_profile_func_enter>
  {
    float clock_frequency = static_cast<float>(GetPeripheralFrequency());
   14832:	9b03      	ldr	r3, [sp, #12]
   14834:	1d1a      	adds	r2, r3, #4
   14836:	9b03      	ldr	r3, [sp, #12]
   14838:	685b      	ldr	r3, [r3, #4]
   1483a:	3310      	adds	r3, #16
   1483c:	681b      	ldr	r3, [r3, #0]
   1483e:	4610      	mov	r0, r2
   14840:	4798      	blx	r3
   14842:	ee07 0a90 	vmov	s15, r0
   14846:	eef8 7a67 	vcvt.f32.u32	s15, s15
   1484a:	edcd 7a05 	vstr	s15, [sp, #20]
    return clock_frequency / (16.0f * baud_rate * divider);
   1484e:	eddd 7a02 	vldr	s15, [sp, #8]
   14852:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
   14856:	ee27 7a87 	vmul.f32	s14, s15, s14
   1485a:	eddd 7a01 	vldr	s15, [sp, #4]
   1485e:	ee67 7a27 	vmul.f32	s15, s14, s15
   14862:	ed9d 7a05 	vldr	s14, [sp, #20]
   14866:	ee87 8a27 	vdiv.f32	s16, s14, s15
   1486a:	4623      	mov	r3, r4
   1486c:	4619      	mov	r1, r3
   1486e:	4805      	ldr	r0, [pc, #20]	; (14884 <Uart::FractionalEstimate(float, float)+0x70>)
   14870:	f000 fe90 	bl	15594 <__cyg_profile_func_exit>
   14874:	eef0 7a48 	vmov.f32	s15, s16
  }
   14878:	eeb0 0a67 	vmov.f32	s0, s15
   1487c:	b006      	add	sp, #24
   1487e:	ecbd 8b02 	vpop	{d8}
   14882:	bd10      	pop	{r4, pc}
   14884:	00014815 	.word	0x00014815

00014888 <Uart::IsDecmial(float)>:

  bool IsDecmial(float value)
   14888:	b530      	push	{r4, r5, lr}
   1488a:	b087      	sub	sp, #28
   1488c:	4675      	mov	r5, lr
   1488e:	9001      	str	r0, [sp, #4]
   14890:	ed8d 0a00 	vstr	s0, [sp]
   14894:	462b      	mov	r3, r5
   14896:	4619      	mov	r1, r3
   14898:	4819      	ldr	r0, [pc, #100]	; (14900 <Uart::IsDecmial(float)+0x78>)
   1489a:	f000 fe67 	bl	1556c <__cyg_profile_func_enter>
  {
    bool result         = false;
   1489e:	2300      	movs	r3, #0
   148a0:	f88d 3017 	strb.w	r3, [sp, #23]
    float rounded_value = roundf(value);
   148a4:	ed9d 0a00 	vldr	s0, [sp]
   148a8:	f003 fb98 	bl	17fdc <roundf>
   148ac:	ed8d 0a04 	vstr	s0, [sp, #16]
    float error         = value - rounded_value;
   148b0:	ed9d 7a00 	vldr	s14, [sp]
   148b4:	eddd 7a04 	vldr	s15, [sp, #16]
   148b8:	ee77 7a67 	vsub.f32	s15, s14, s15
   148bc:	edcd 7a03 	vstr	s15, [sp, #12]
    if (-kThreshold <= error && error <= kThreshold)
   148c0:	eddd 7a03 	vldr	s15, [sp, #12]
   148c4:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 14904 <Uart::IsDecmial(float)+0x7c>
   148c8:	eef4 7ac7 	vcmpe.f32	s15, s14
   148cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   148d0:	db0b      	blt.n	148ea <Uart::IsDecmial(float)+0x62>
   148d2:	eddd 7a03 	vldr	s15, [sp, #12]
   148d6:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 14908 <Uart::IsDecmial(float)+0x80>
   148da:	eef4 7ac7 	vcmpe.f32	s15, s14
   148de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   148e2:	d802      	bhi.n	148ea <Uart::IsDecmial(float)+0x62>
    {
      result = true;
   148e4:	2301      	movs	r3, #1
   148e6:	f88d 3017 	strb.w	r3, [sp, #23]
    }
    return result;
   148ea:	f89d 4017 	ldrb.w	r4, [sp, #23]
   148ee:	462b      	mov	r3, r5
   148f0:	4619      	mov	r1, r3
   148f2:	4803      	ldr	r0, [pc, #12]	; (14900 <Uart::IsDecmial(float)+0x78>)
   148f4:	f000 fe4e 	bl	15594 <__cyg_profile_func_exit>
   148f8:	4623      	mov	r3, r4
  }
   148fa:	4618      	mov	r0, r3
   148fc:	b007      	add	sp, #28
   148fe:	bd30      	pop	{r4, r5, pc}
   14900:	00014889 	.word	0x00014889
   14904:	bd4ccccd 	.word	0xbd4ccccd
   14908:	3d4ccccd 	.word	0x3d4ccccd

0001490c <Uart::GenerateUartCalibration(float)>:

  UartCalibration_t GenerateUartCalibration(float baud_rate)
   1490c:	b530      	push	{r4, r5, lr}
   1490e:	b08f      	sub	sp, #60	; 0x3c
   14910:	4675      	mov	r5, lr
   14912:	9007      	str	r0, [sp, #28]
   14914:	9106      	str	r1, [sp, #24]
   14916:	ed8d 0a05 	vstr	s0, [sp, #20]
   1491a:	462b      	mov	r3, r5
   1491c:	4619      	mov	r1, r3
   1491e:	4874      	ldr	r0, [pc, #464]	; (14af0 <Uart::GenerateUartCalibration(float)+0x1e4>)
   14920:	f000 fe24 	bl	1556c <__cyg_profile_func_enter>
  {
    States state = States::kCalculateIntegerDivideLatch;
   14924:	2300      	movs	r3, #0
   14926:	930d      	str	r3, [sp, #52]	; 0x34
    UartCalibration_t uart_calibration;
   14928:	9b07      	ldr	r3, [sp, #28]
   1492a:	2200      	movs	r2, #0
   1492c:	601a      	str	r2, [r3, #0]
   1492e:	9b07      	ldr	r3, [sp, #28]
   14930:	2200      	movs	r2, #0
   14932:	605a      	str	r2, [r3, #4]
   14934:	9b07      	ldr	r3, [sp, #28]
   14936:	2201      	movs	r2, #1
   14938:	609a      	str	r2, [r3, #8]
    float divide_estimate = 0;
   1493a:	f04f 0300 	mov.w	r3, #0
   1493e:	930c      	str	r3, [sp, #48]	; 0x30
    float decimal         = 1.5;
   14940:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
   14944:	930b      	str	r3, [sp, #44]	; 0x2c
    float div             = 1;
   14946:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
   1494a:	930a      	str	r3, [sp, #40]	; 0x28
    float mul             = 2;
   1494c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   14950:	9309      	str	r3, [sp, #36]	; 0x24
    while (state != States::kDone)
   14952:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   14954:	2b04      	cmp	r3, #4
   14956:	f000 80c1 	beq.w	14adc <Uart::GenerateUartCalibration(float)+0x1d0>
    {
      switch (state)
   1495a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1495c:	2b04      	cmp	r3, #4
   1495e:	f200 80bb 	bhi.w	14ad8 <Uart::GenerateUartCalibration(float)+0x1cc>
   14962:	a201      	add	r2, pc, #4	; (adr r2, 14968 <Uart::GenerateUartCalibration(float)+0x5c>)
   14964:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   14968:	0001497d 	.word	0x0001497d
   1496c:	000149d9 	.word	0x000149d9
   14970:	00014a39 	.word	0x00014a39
   14974:	00014aa9 	.word	0x00014aa9
   14978:	00014ad9 	.word	0x00014ad9
      {
        case States::kCalculateIntegerDivideLatch:
        {
          divide_estimate = DividerEstimate(baud_rate);
   1497c:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
   14980:	ed9d 0a05 	vldr	s0, [sp, #20]
   14984:	9806      	ldr	r0, [sp, #24]
   14986:	f7ff ff0b 	bl	147a0 <Uart::DividerEstimate(float, float)>
   1498a:	ed8d 0a0c 	vstr	s0, [sp, #48]	; 0x30
          if (divide_estimate < 1.0f)
   1498e:	eddd 7a0c 	vldr	s15, [sp, #48]	; 0x30
   14992:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
   14996:	eef4 7ac7 	vcmpe.f32	s15, s14
   1499a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1499e:	d505      	bpl.n	149ac <Uart::GenerateUartCalibration(float)+0xa0>
          {
            uart_calibration.divide_latch = 0;
   149a0:	9b07      	ldr	r3, [sp, #28]
   149a2:	2200      	movs	r2, #0
   149a4:	601a      	str	r2, [r3, #0]
            state                         = States::kDone;
   149a6:	2304      	movs	r3, #4
   149a8:	930d      	str	r3, [sp, #52]	; 0x34
          }
          else
          {
            state = States::kCalculateDivideLatchWithDecimal;
          }
          break;
   149aa:	e096      	b.n	14ada <Uart::GenerateUartCalibration(float)+0x1ce>
          else if (IsDecmial(divide_estimate))
   149ac:	ed9d 0a0c 	vldr	s0, [sp, #48]	; 0x30
   149b0:	9806      	ldr	r0, [sp, #24]
   149b2:	f7ff ff69 	bl	14888 <Uart::IsDecmial(float)>
   149b6:	4603      	mov	r3, r0
   149b8:	2b00      	cmp	r3, #0
   149ba:	d00a      	beq.n	149d2 <Uart::GenerateUartCalibration(float)+0xc6>
                static_cast<uint32_t>(divide_estimate);
   149bc:	eddd 7a0c 	vldr	s15, [sp, #48]	; 0x30
   149c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
   149c4:	ee17 2a90 	vmov	r2, s15
            uart_calibration.divide_latch =
   149c8:	9b07      	ldr	r3, [sp, #28]
   149ca:	601a      	str	r2, [r3, #0]
            state = States::kDone;
   149cc:	2304      	movs	r3, #4
   149ce:	930d      	str	r3, [sp, #52]	; 0x34
          break;
   149d0:	e083      	b.n	14ada <Uart::GenerateUartCalibration(float)+0x1ce>
            state = States::kCalculateDivideLatchWithDecimal;
   149d2:	2301      	movs	r3, #1
   149d4:	930d      	str	r3, [sp, #52]	; 0x34
          break;
   149d6:	e080      	b.n	14ada <Uart::GenerateUartCalibration(float)+0x1ce>
        }
        case States::kCalculateDivideLatchWithDecimal:
        {
          divide_estimate = roundf(DividerEstimate(baud_rate, decimal));
   149d8:	eddd 0a0b 	vldr	s1, [sp, #44]	; 0x2c
   149dc:	ed9d 0a05 	vldr	s0, [sp, #20]
   149e0:	9806      	ldr	r0, [sp, #24]
   149e2:	f7ff fedd 	bl	147a0 <Uart::DividerEstimate(float, float)>
   149e6:	eef0 7a40 	vmov.f32	s15, s0
   149ea:	eeb0 0a67 	vmov.f32	s0, s15
   149ee:	f003 faf5 	bl	17fdc <roundf>
   149f2:	ed8d 0a0c 	vstr	s0, [sp, #48]	; 0x30
          decimal         = FractionalEstimate(baud_rate, divide_estimate);
   149f6:	eddd 0a0c 	vldr	s1, [sp, #48]	; 0x30
   149fa:	ed9d 0a05 	vldr	s0, [sp, #20]
   149fe:	9806      	ldr	r0, [sp, #24]
   14a00:	f7ff ff08 	bl	14814 <Uart::FractionalEstimate(float, float)>
   14a04:	ed8d 0a0b 	vstr	s0, [sp, #44]	; 0x2c
          if (1.1f <= decimal && decimal <= 1.9f)
   14a08:	eddd 7a0b 	vldr	s15, [sp, #44]	; 0x2c
   14a0c:	ed9f 7a39 	vldr	s14, [pc, #228]	; 14af4 <Uart::GenerateUartCalibration(float)+0x1e8>
   14a10:	eef4 7ac7 	vcmpe.f32	s15, s14
   14a14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   14a18:	db0b      	blt.n	14a32 <Uart::GenerateUartCalibration(float)+0x126>
   14a1a:	eddd 7a0b 	vldr	s15, [sp, #44]	; 0x2c
   14a1e:	ed9f 7a36 	vldr	s14, [pc, #216]	; 14af8 <Uart::GenerateUartCalibration(float)+0x1ec>
   14a22:	eef4 7ac7 	vcmpe.f32	s15, s14
   14a26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   14a2a:	d802      	bhi.n	14a32 <Uart::GenerateUartCalibration(float)+0x126>
          {
            state = States::kGenerateFractionFromDecimal;
   14a2c:	2303      	movs	r3, #3
   14a2e:	930d      	str	r3, [sp, #52]	; 0x34
          }
          else
          {
            state = States::kDecimalFailedGenerateNewDecimal;
          }
          break;
   14a30:	e053      	b.n	14ada <Uart::GenerateUartCalibration(float)+0x1ce>
            state = States::kDecimalFailedGenerateNewDecimal;
   14a32:	2302      	movs	r3, #2
   14a34:	930d      	str	r3, [sp, #52]	; 0x34
          break;
   14a36:	e050      	b.n	14ada <Uart::GenerateUartCalibration(float)+0x1ce>
        }
        case States::kDecimalFailedGenerateNewDecimal:
        {
          mul += 1;
   14a38:	eddd 7a09 	vldr	s15, [sp, #36]	; 0x24
   14a3c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
   14a40:	ee77 7a87 	vadd.f32	s15, s15, s14
   14a44:	edcd 7a09 	vstr	s15, [sp, #36]	; 0x24

          if (div > 15)
   14a48:	eddd 7a0a 	vldr	s15, [sp, #40]	; 0x28
   14a4c:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
   14a50:	eef4 7ac7 	vcmpe.f32	s15, s14
   14a54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   14a58:	dd02      	ble.n	14a60 <Uart::GenerateUartCalibration(float)+0x154>
          {
            state = States::kDone;
   14a5a:	2304      	movs	r3, #4
   14a5c:	930d      	str	r3, [sp, #52]	; 0x34
            break;
   14a5e:	e03c      	b.n	14ada <Uart::GenerateUartCalibration(float)+0x1ce>
          }
          else if (mul > 15)
   14a60:	eddd 7a09 	vldr	s15, [sp, #36]	; 0x24
   14a64:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
   14a68:	eef4 7ac7 	vcmpe.f32	s15, s14
   14a6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   14a70:	dd0f      	ble.n	14a92 <Uart::GenerateUartCalibration(float)+0x186>
          {
            div += 1;
   14a72:	eddd 7a0a 	vldr	s15, [sp, #40]	; 0x28
   14a76:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
   14a7a:	ee77 7a87 	vadd.f32	s15, s15, s14
   14a7e:	edcd 7a0a 	vstr	s15, [sp, #40]	; 0x28
            mul = div + 1;
   14a82:	eddd 7a0a 	vldr	s15, [sp, #40]	; 0x28
   14a86:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
   14a8a:	ee77 7a87 	vadd.f32	s15, s15, s14
   14a8e:	edcd 7a09 	vstr	s15, [sp, #36]	; 0x24
          }
          decimal = div / mul;
   14a92:	eddd 6a0a 	vldr	s13, [sp, #40]	; 0x28
   14a96:	ed9d 7a09 	vldr	s14, [sp, #36]	; 0x24
   14a9a:	eec6 7a87 	vdiv.f32	s15, s13, s14
   14a9e:	edcd 7a0b 	vstr	s15, [sp, #44]	; 0x2c
          state   = States::kCalculateDivideLatchWithDecimal;
   14aa2:	2301      	movs	r3, #1
   14aa4:	930d      	str	r3, [sp, #52]	; 0x34
          break;
   14aa6:	e018      	b.n	14ada <Uart::GenerateUartCalibration(float)+0x1ce>
        }
        case States::kGenerateFractionFromDecimal:
        {
          uart_calibration = FindClosestFractional(decimal);
   14aa8:	9c07      	ldr	r4, [sp, #28]
   14aaa:	466b      	mov	r3, sp
   14aac:	ed9d 0a0b 	vldr	s0, [sp, #44]	; 0x2c
   14ab0:	9906      	ldr	r1, [sp, #24]
   14ab2:	4618      	mov	r0, r3
   14ab4:	f7ff fdf6 	bl	146a4 <Uart::FindClosestFractional(float)>
   14ab8:	466b      	mov	r3, sp
   14aba:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   14abe:	e884 0007 	stmia.w	r4, {r0, r1, r2}
          uart_calibration.divide_latch =
              static_cast<uint32_t>(divide_estimate);
   14ac2:	eddd 7a0c 	vldr	s15, [sp, #48]	; 0x30
   14ac6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
   14aca:	ee17 2a90 	vmov	r2, s15
          uart_calibration.divide_latch =
   14ace:	9b07      	ldr	r3, [sp, #28]
   14ad0:	601a      	str	r2, [r3, #0]
          state = States::kDone;
   14ad2:	2304      	movs	r3, #4
   14ad4:	930d      	str	r3, [sp, #52]	; 0x34
          break;
   14ad6:	e000      	b.n	14ada <Uart::GenerateUartCalibration(float)+0x1ce>
        }
        case States::kDone: { break;
        }
        default: { break;
   14ad8:	bf00      	nop
    while (state != States::kDone)
   14ada:	e73a      	b.n	14952 <Uart::GenerateUartCalibration(float)+0x46>
        }
      }
    }
    return uart_calibration;
   14adc:	bf00      	nop
   14ade:	462b      	mov	r3, r5
   14ae0:	4619      	mov	r1, r3
   14ae2:	4803      	ldr	r0, [pc, #12]	; (14af0 <Uart::GenerateUartCalibration(float)+0x1e4>)
   14ae4:	f000 fd56 	bl	15594 <__cyg_profile_func_exit>
   14ae8:	bf00      	nop
  }
   14aea:	9807      	ldr	r0, [sp, #28]
   14aec:	b00f      	add	sp, #60	; 0x3c
   14aee:	bd30      	pop	{r4, r5, pc}
   14af0:	0001490d 	.word	0x0001490d
   14af4:	3f8ccccd 	.word	0x3f8ccccd
   14af8:	3ff33333 	.word	0x3ff33333

00014afc <(anonymous namespace)::Lpc40xxUptime()>:
{
   14afc:	b538      	push	{r3, r4, r5, lr}
   14afe:	4675      	mov	r5, lr
   14b00:	462b      	mov	r3, r5
   14b02:	4619      	mov	r1, r3
   14b04:	480a      	ldr	r0, [pc, #40]	; (14b30 <(anonymous namespace)::Lpc40xxUptime()+0x34>)
   14b06:	f000 fd31 	bl	1556c <__cyg_profile_func_enter>
    return tim_register[channel_]->TC;
   14b0a:	4b0a      	ldr	r3, [pc, #40]	; (14b34 <(anonymous namespace)::Lpc40xxUptime()+0x38>)
   14b0c:	7a1b      	ldrb	r3, [r3, #8]
   14b0e:	461a      	mov	r2, r3
   14b10:	4b09      	ldr	r3, [pc, #36]	; (14b38 <(anonymous namespace)::Lpc40xxUptime()+0x3c>)
   14b12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   14b16:	689c      	ldr	r4, [r3, #8]
   14b18:	462b      	mov	r3, r5
   14b1a:	4619      	mov	r1, r3
   14b1c:	4804      	ldr	r0, [pc, #16]	; (14b30 <(anonymous namespace)::Lpc40xxUptime()+0x34>)
   14b1e:	f000 fd39 	bl	15594 <__cyg_profile_func_exit>
  return timer0.GetTimer();
   14b22:	4623      	mov	r3, r4
   14b24:	f04f 0400 	mov.w	r4, #0
}
   14b28:	4618      	mov	r0, r3
   14b2a:	4621      	mov	r1, r4
   14b2c:	bd38      	pop	{r3, r4, r5, pc}
   14b2e:	bf00      	nop
   14b30:	00014241 	.word	0x00014241
   14b34:	10000404 	.word	0x10000404
   14b38:	10000384 	.word	0x10000384

00014b3c <UptimeRTOS>:
{
   14b3c:	b538      	push	{r3, r4, r5, lr}
   14b3e:	4675      	mov	r5, lr
   14b40:	462b      	mov	r3, r5
   14b42:	4619      	mov	r1, r3
   14b44:	480a      	ldr	r0, [pc, #40]	; (14b70 <UptimeRTOS+0x34>)
   14b46:	f000 fd11 	bl	1556c <__cyg_profile_func_enter>
   14b4a:	4b0a      	ldr	r3, [pc, #40]	; (14b74 <UptimeRTOS+0x38>)
   14b4c:	7a1b      	ldrb	r3, [r3, #8]
   14b4e:	461a      	mov	r2, r3
   14b50:	4b09      	ldr	r3, [pc, #36]	; (14b78 <UptimeRTOS+0x3c>)
   14b52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   14b56:	689c      	ldr	r4, [r3, #8]
   14b58:	462b      	mov	r3, r5
   14b5a:	4619      	mov	r1, r3
   14b5c:	4804      	ldr	r0, [pc, #16]	; (14b70 <UptimeRTOS+0x34>)
   14b5e:	f000 fd19 	bl	15594 <__cyg_profile_func_exit>
  return timer0.GetTimer();
   14b62:	4623      	mov	r3, r4
   14b64:	f04f 0400 	mov.w	r4, #0
}
   14b68:	4618      	mov	r0, r3
   14b6a:	4621      	mov	r1, r4
   14b6c:	bd38      	pop	{r3, r4, r5, pc}
   14b6e:	bf00      	nop
   14b70:	00014241 	.word	0x00014241
   14b74:	10000404 	.word	0x10000404
   14b78:	10000384 	.word	0x10000384

00014b7c <LowLevelInit()>:

void LowLevelInit()
{
   14b7c:	b500      	push	{lr}
   14b7e:	b083      	sub	sp, #12
  // Set the SystemTick frequency to the RTOS tick frequency
  // It is critical that this happens before you set the system_clock, since
  // The system_timer keeps the time that the system_clock uses to delay itself.
  system_timer.SetTickFrequency(config::kRtosFrequency);
   14b80:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   14b84:	4822      	ldr	r0, [pc, #136]	; (14c10 <LowLevelInit()+0x94>)
   14b86:	f7ff f9bb 	bl	13f00 <SystemTimer::SetTickFrequency(unsigned long)>
  bool timer_started_successfully = system_timer.StartTimer();
   14b8a:	4821      	ldr	r0, [pc, #132]	; (14c10 <LowLevelInit()+0x94>)
   14b8c:	f7ff f96a 	bl	13e64 <SystemTimer::StartTimer()>
   14b90:	4603      	mov	r3, r0
   14b92:	f88d 3007 	strb.w	r3, [sp, #7]
  SJ2_ASSERT_WARNING(timer_started_successfully,
   14b96:	f89d 3007 	ldrb.w	r3, [sp, #7]
   14b9a:	f083 0301 	eor.w	r3, r3, #1
   14b9e:	b2db      	uxtb	r3, r3
   14ba0:	2b00      	cmp	r3, #0
   14ba2:	d005      	beq.n	14bb0 <LowLevelInit()+0x34>
   14ba4:	23ad      	movs	r3, #173	; 0xad
   14ba6:	4a1b      	ldr	r2, [pc, #108]	; (14c14 <LowLevelInit()+0x98>)
   14ba8:	491b      	ldr	r1, [pc, #108]	; (14c18 <LowLevelInit()+0x9c>)
   14baa:	481c      	ldr	r0, [pc, #112]	; (14c1c <LowLevelInit()+0xa0>)
   14bac:	f001 ff3a 	bl	16a24 <printf>
                     "System Timer has FAILED to start!");
  // Set Clock Speed
  // SetClockFrequency will timeout return the offset between desire clockspeed
  // and actual clockspeed if the PLL doesn't get a frequency fix within a
  // defined timeout (see L1/system_clock.hpp:kDefaultTimeout)
  while (system_controller.SetClockFrequency(config::kSystemClockRateMhz) != 0)
   14bb0:	2130      	movs	r1, #48	; 0x30
   14bb2:	481b      	ldr	r0, [pc, #108]	; (14c20 <LowLevelInit()+0xa4>)
   14bb4:	f7fd f9dc 	bl	11f70 <Lpc40xxSystemController::SetClockFrequency(unsigned char)>
   14bb8:	4603      	mov	r3, r0
   14bba:	2b00      	cmp	r3, #0
   14bbc:	bf14      	ite	ne
   14bbe:	2301      	movne	r3, #1
   14bc0:	2300      	moveq	r3, #0
   14bc2:	b2db      	uxtb	r3, r3
   14bc4:	2b00      	cmp	r3, #0
   14bc6:	d001      	beq.n	14bcc <LowLevelInit()+0x50>
  {
    // Continually attempt to set the clock frequency to the desired until the
    // delta between desired and actual are 0.
    continue;
   14bc8:	bf00      	nop
  while (system_controller.SetClockFrequency(config::kSystemClockRateMhz) != 0)
   14bca:	e7f1      	b.n	14bb0 <LowLevelInit()+0x34>
  }
  // Enable Peripheral Clock and set its divider to 1 meaning the clock speed
  // fed to all peripherals will be 48Mhz.
  system_controller.SetPeripheralClockDivider(1);
   14bcc:	2101      	movs	r1, #1
   14bce:	4814      	ldr	r0, [pc, #80]	; (14c20 <LowLevelInit()+0xa4>)
   14bd0:	f7fd fa16 	bl	12000 <Lpc40xxSystemController::SetPeripheralClockDivider(unsigned char)>
  // Set System Timer frequency again, since the clock speed has changed since
  // the last time we ran this.
  system_timer.DisableTimer();
   14bd4:	f7ff f8f4 	bl	13dc0 <SystemTimer::DisableTimer()>
  system_timer.SetTickFrequency(config::kRtosFrequency);
   14bd8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   14bdc:	480c      	ldr	r0, [pc, #48]	; (14c10 <LowLevelInit()+0x94>)
   14bde:	f7ff f98f 	bl	13f00 <SystemTimer::SetTickFrequency(unsigned long)>
  system_timer.StartTimer();
   14be2:	480b      	ldr	r0, [pc, #44]	; (14c10 <LowLevelInit()+0x94>)
   14be4:	f7ff f93e 	bl	13e64 <SystemTimer::StartTimer()>
  // Set timer0 to 1 MHz (1,000,000 Hz) so that the timer increments every 1
  // micro second.
  timer0.Initialize(1'000'000);
   14be8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   14bec:	4a0d      	ldr	r2, [pc, #52]	; (14c24 <LowLevelInit()+0xa8>)
   14bee:	490e      	ldr	r1, [pc, #56]	; (14c28 <LowLevelInit()+0xac>)
   14bf0:	480e      	ldr	r0, [pc, #56]	; (14c2c <LowLevelInit()+0xb0>)
   14bf2:	f7ff f9f7 	bl	13fe4 <Timer::Initialize(unsigned long, void (*)(), long)>
  SetUptimeFunction(Lpc40xxUptime);
   14bf6:	480e      	ldr	r0, [pc, #56]	; (14c30 <LowLevelInit()+0xb4>)
   14bf8:	f7ff f8ca 	bl	13d90 <SetUptimeFunction(unsigned long long (*)())>
  // Set UART0 baudrate, which is required for printf and scanf to work properly
  uart0.Initialize(config::kBaudRate);
   14bfc:	f44f 4116 	mov.w	r1, #38400	; 0x9600
   14c00:	480c      	ldr	r0, [pc, #48]	; (14c34 <LowLevelInit()+0xb8>)
   14c02:	f7ff fba1 	bl	14348 <Uart::Initialize(unsigned long)>
}
   14c06:	bf00      	nop
   14c08:	b003      	add	sp, #12
   14c0a:	f85d fb04 	ldr.w	pc, [sp], #4
   14c0e:	bf00      	nop
   14c10:	100003f8 	.word	0x100003f8
   14c14:	00019960 	.word	0x00019960
   14c18:	00019868 	.word	0x00019868
   14c1c:	000197c0 	.word	0x000197c0
   14c20:	10000400 	.word	0x10000400
   14c24:	00013fc5 	.word	0x00013fc5
   14c28:	000f4240 	.word	0x000f4240
   14c2c:	10000404 	.word	0x10000404
   14c30:	00014afd 	.word	0x00014afd
   14c34:	100003e4 	.word	0x100003e4

00014c38 <SystemInit>:

void SystemInit()
{
   14c38:	b508      	push	{r3, lr}
  // Transfer data section values from flash to RAM
  InitDataSection();
   14c3a:	f7fb fa67 	bl	1010c <InitDataSection()>
  // Clear BSS section of RAM
  // This is required because the nano implementation of the standard C/C++
  // libraries assumes that the BSS section is initialized to 0.
  InitBssSection();
   14c3e:	f7fb faad 	bl	1019c <InitBssSection()>
  // Enable FPU (F.loating P.oint U.nit)
  // System will crash if floating point operations occur without
  // Initializing the FPU.
  InitFpu();
   14c42:	f7fb fadb 	bl	101fc <InitFpu()>
  // Initialisation C++ libraries
  __libc_init_array();
   14c46:	f003 fbd1 	bl	183ec <__libc_init_array>
  // Run LowLevel System Initialization
  LowLevelInit();
   14c4a:	f7ff ff97 	bl	14b7c <LowLevelInit()>
}
   14c4e:	bf00      	nop
   14c50:	bd08      	pop	{r3, pc}
   14c52:	Address 0x0000000000014c52 is out of bounds.


00014c54 <ResetIsr>:
// Sets up a simple runtime environment and initializes the C/C++ library.

extern "C"
{
  void ResetIsr(void)
  {
   14c54:	b580      	push	{r7, lr}
   14c56:	b084      	sub	sp, #16
   14c58:	af00      	add	r7, sp, #0
    // The Hyperload bootloader takes up stack space to execute. The Hyperload
    // bootloader function launches this ISR manually, but it never returns thus
    // it never cleans up the memory it uses. To get that memory back, we have
    // to manually move the stack pointers back to the top of stack.
    const uint32_t kTopOfStack = reinterpret_cast<intptr_t>(&StackTop);
   14c5a:	4b09      	ldr	r3, [pc, #36]	; (14c80 <ResetIsr+0x2c>)
   14c5c:	60fb      	str	r3, [r7, #12]
   14c5e:	68fb      	ldr	r3, [r7, #12]
   14c60:	603b      	str	r3, [r7, #0]
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
   14c62:	683b      	ldr	r3, [r7, #0]
   14c64:	f383 8809 	msr	PSP, r3
   14c68:	68fb      	ldr	r3, [r7, #12]
   14c6a:	607b      	str	r3, [r7, #4]

    \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0\n" : : "r" (topOfMainStack) : "sp");
   14c6c:	687b      	ldr	r3, [r7, #4]
   14c6e:	f383 8808 	msr	MSP, r3
    __set_PSP(kTopOfStack);
    __set_MSP(kTopOfStack);

    SystemInit();
   14c72:	f7ff ffe1 	bl	14c38 <SystemInit>
// #pragma ignored "-Wpedantic" to suppress main function call warning
#pragma GCC diagnostic push ignored "-Wpedantic"
    [[maybe_unused]] int32_t result = main();
   14c76:	f7fe fdb9 	bl	137ec <main>
   14c7a:	60b8      	str	r0, [r7, #8]
   14c7c:	e7fe      	b.n	14c7c <ResetIsr+0x28>
   14c7e:	bf00      	nop
   14c80:	10010000 	.word	0x10010000

00014c84 <void Timer::TimerHandler<(TimerInterface::TimerPort)0>()>:
  static void TimerHandler()
   14c84:	b510      	push	{r4, lr}
   14c86:	4674      	mov	r4, lr
   14c88:	4623      	mov	r3, r4
   14c8a:	4619      	mov	r1, r3
   14c8c:	480a      	ldr	r0, [pc, #40]	; (14cb8 <void Timer::TimerHandler<(TimerInterface::TimerPort)0>()+0x34>)
   14c8e:	f000 fc6d 	bl	1556c <__cyg_profile_func_enter>
      user_timer_isr[util::Value(port)]();
   14c92:	2000      	movs	r0, #0
   14c94:	f7ff f97e 	bl	13f94 <unsigned char util::Value<TimerInterface::TimerPort, unsigned char>(TimerInterface::TimerPort)>
   14c98:	4603      	mov	r3, r0
   14c9a:	461a      	mov	r2, r3
   14c9c:	4b07      	ldr	r3, [pc, #28]	; (14cbc <void Timer::TimerHandler<(TimerInterface::TimerPort)0>()+0x38>)
   14c9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   14ca2:	4798      	blx	r3
    ClearInterrupts<port>();
   14ca4:	f000 f90e 	bl	14ec4 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)0>()>
   14ca8:	4623      	mov	r3, r4
   14caa:	4619      	mov	r1, r3
   14cac:	4802      	ldr	r0, [pc, #8]	; (14cb8 <void Timer::TimerHandler<(TimerInterface::TimerPort)0>()+0x34>)
   14cae:	f000 fc71 	bl	15594 <__cyg_profile_func_exit>
  }
   14cb2:	bf00      	nop
   14cb4:	bd10      	pop	{r4, pc}
   14cb6:	bf00      	nop
   14cb8:	00014c85 	.word	0x00014c85
   14cbc:	10000eb4 	.word	0x10000eb4

00014cc0 <void Timer::TimerHandler<(TimerInterface::TimerPort)1>()>:
  static void TimerHandler()
   14cc0:	b510      	push	{r4, lr}
   14cc2:	4674      	mov	r4, lr
   14cc4:	4623      	mov	r3, r4
   14cc6:	4619      	mov	r1, r3
   14cc8:	480a      	ldr	r0, [pc, #40]	; (14cf4 <void Timer::TimerHandler<(TimerInterface::TimerPort)1>()+0x34>)
   14cca:	f000 fc4f 	bl	1556c <__cyg_profile_func_enter>
      user_timer_isr[util::Value(port)]();
   14cce:	2001      	movs	r0, #1
   14cd0:	f7ff f960 	bl	13f94 <unsigned char util::Value<TimerInterface::TimerPort, unsigned char>(TimerInterface::TimerPort)>
   14cd4:	4603      	mov	r3, r0
   14cd6:	461a      	mov	r2, r3
   14cd8:	4b07      	ldr	r3, [pc, #28]	; (14cf8 <void Timer::TimerHandler<(TimerInterface::TimerPort)1>()+0x38>)
   14cda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   14cde:	4798      	blx	r3
    ClearInterrupts<port>();
   14ce0:	f000 f940 	bl	14f64 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)1>()>
   14ce4:	4623      	mov	r3, r4
   14ce6:	4619      	mov	r1, r3
   14ce8:	4802      	ldr	r0, [pc, #8]	; (14cf4 <void Timer::TimerHandler<(TimerInterface::TimerPort)1>()+0x34>)
   14cea:	f000 fc53 	bl	15594 <__cyg_profile_func_exit>
  }
   14cee:	bf00      	nop
   14cf0:	bd10      	pop	{r4, pc}
   14cf2:	bf00      	nop
   14cf4:	00014cc1 	.word	0x00014cc1
   14cf8:	10000eb4 	.word	0x10000eb4

00014cfc <void Timer::TimerHandler<(TimerInterface::TimerPort)2>()>:
  static void TimerHandler()
   14cfc:	b510      	push	{r4, lr}
   14cfe:	4674      	mov	r4, lr
   14d00:	4623      	mov	r3, r4
   14d02:	4619      	mov	r1, r3
   14d04:	480a      	ldr	r0, [pc, #40]	; (14d30 <void Timer::TimerHandler<(TimerInterface::TimerPort)2>()+0x34>)
   14d06:	f000 fc31 	bl	1556c <__cyg_profile_func_enter>
      user_timer_isr[util::Value(port)]();
   14d0a:	2002      	movs	r0, #2
   14d0c:	f7ff f942 	bl	13f94 <unsigned char util::Value<TimerInterface::TimerPort, unsigned char>(TimerInterface::TimerPort)>
   14d10:	4603      	mov	r3, r0
   14d12:	461a      	mov	r2, r3
   14d14:	4b07      	ldr	r3, [pc, #28]	; (14d34 <void Timer::TimerHandler<(TimerInterface::TimerPort)2>()+0x38>)
   14d16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   14d1a:	4798      	blx	r3
    ClearInterrupts<port>();
   14d1c:	f000 f972 	bl	15004 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)2>()>
   14d20:	4623      	mov	r3, r4
   14d22:	4619      	mov	r1, r3
   14d24:	4802      	ldr	r0, [pc, #8]	; (14d30 <void Timer::TimerHandler<(TimerInterface::TimerPort)2>()+0x34>)
   14d26:	f000 fc35 	bl	15594 <__cyg_profile_func_exit>
  }
   14d2a:	bf00      	nop
   14d2c:	bd10      	pop	{r4, pc}
   14d2e:	bf00      	nop
   14d30:	00014cfd 	.word	0x00014cfd
   14d34:	10000eb4 	.word	0x10000eb4

00014d38 <void Timer::TimerHandler<(TimerInterface::TimerPort)3>()>:
  static void TimerHandler()
   14d38:	b510      	push	{r4, lr}
   14d3a:	4674      	mov	r4, lr
   14d3c:	4623      	mov	r3, r4
   14d3e:	4619      	mov	r1, r3
   14d40:	480a      	ldr	r0, [pc, #40]	; (14d6c <void Timer::TimerHandler<(TimerInterface::TimerPort)3>()+0x34>)
   14d42:	f000 fc13 	bl	1556c <__cyg_profile_func_enter>
      user_timer_isr[util::Value(port)]();
   14d46:	2003      	movs	r0, #3
   14d48:	f7ff f924 	bl	13f94 <unsigned char util::Value<TimerInterface::TimerPort, unsigned char>(TimerInterface::TimerPort)>
   14d4c:	4603      	mov	r3, r0
   14d4e:	461a      	mov	r2, r3
   14d50:	4b07      	ldr	r3, [pc, #28]	; (14d70 <void Timer::TimerHandler<(TimerInterface::TimerPort)3>()+0x38>)
   14d52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   14d56:	4798      	blx	r3
    ClearInterrupts<port>();
   14d58:	f000 f9a4 	bl	150a4 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)3>()>
   14d5c:	4623      	mov	r3, r4
   14d5e:	4619      	mov	r1, r3
   14d60:	4802      	ldr	r0, [pc, #8]	; (14d6c <void Timer::TimerHandler<(TimerInterface::TimerPort)3>()+0x34>)
   14d62:	f000 fc17 	bl	15594 <__cyg_profile_func_exit>
  }
   14d66:	bf00      	nop
   14d68:	bd10      	pop	{r4, pc}
   14d6a:	bf00      	nop
   14d6c:	00014d39 	.word	0x00014d39
   14d70:	10000eb4 	.word	0x10000eb4

00014d74 <Status Wait<Uart::Send(unsigned char)::{lambda()#1}>(unsigned long long, Uart::Send(unsigned char)::{lambda()#1})>:
inline Status Wait(uint64_t timeout, F is_done)
   14d74:	e92d 4830 	stmdb	sp!, {r4, r5, fp, lr}
   14d78:	b088      	sub	sp, #32
   14d7a:	4675      	mov	r5, lr
   14d7c:	e9cd 0102 	strd	r0, r1, [sp, #8]
   14d80:	9201      	str	r2, [sp, #4]
   14d82:	462b      	mov	r3, r5
   14d84:	4619      	mov	r1, r3
   14d86:	4824      	ldr	r0, [pc, #144]	; (14e18 <Status Wait<Uart::Send(unsigned char)::{lambda()#1}>(unsigned long long, Uart::Send(unsigned char)::{lambda()#1})+0xa4>)
   14d88:	f000 fbf0 	bl	1556c <__cyg_profile_func_enter>
  uint64_t timeout_time = 0;
   14d8c:	f04f 0300 	mov.w	r3, #0
   14d90:	f04f 0400 	mov.w	r4, #0
   14d94:	e9cd 3406 	strd	r3, r4, [sp, #24]
  if (timeout == kMaxWait)
   14d98:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
   14d9c:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
   14da0:	bf08      	it	eq
   14da2:	f1b3 3fff 	cmpeq.w	r3, #4294967295	; 0xffffffff
   14da6:	d106      	bne.n	14db6 <Status Wait<Uart::Send(unsigned char)::{lambda()#1}>(unsigned long long, Uart::Send(unsigned char)::{lambda()#1})+0x42>
    timeout_time = kMaxWait;
   14da8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   14dac:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   14db0:	e9cd 3406 	strd	r3, r4, [sp, #24]
   14db4:	e00b      	b.n	14dce <Status Wait<Uart::Send(unsigned char)::{lambda()#1}>(unsigned long long, Uart::Send(unsigned char)::{lambda()#1})+0x5a>
    timeout_time = Milliseconds() + timeout;
   14db6:	f7fc f8b7 	bl	10f28 <Milliseconds()>
   14dba:	460a      	mov	r2, r1
   14dbc:	4601      	mov	r1, r0
   14dbe:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
   14dc2:	eb13 0b01 	adds.w	fp, r3, r1
   14dc6:	eb44 0c02 	adc.w	ip, r4, r2
   14dca:	e9cd bc06 	strd	fp, ip, [sp, #24]
  Status status = Status::kTimedOut;
   14dce:	2301      	movs	r3, #1
   14dd0:	9305      	str	r3, [sp, #20]
  while (Milliseconds() < timeout_time)
   14dd2:	f7fc f8a9 	bl	10f28 <Milliseconds()>
   14dd6:	460a      	mov	r2, r1
   14dd8:	4601      	mov	r1, r0
   14dda:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
   14dde:	42a2      	cmp	r2, r4
   14de0:	bf08      	it	eq
   14de2:	4299      	cmpeq	r1, r3
   14de4:	bf34      	ite	cc
   14de6:	2301      	movcc	r3, #1
   14de8:	2300      	movcs	r3, #0
   14dea:	b2db      	uxtb	r3, r3
   14dec:	2b00      	cmp	r3, #0
   14dee:	d008      	beq.n	14e02 <Status Wait<Uart::Send(unsigned char)::{lambda()#1}>(unsigned long long, Uart::Send(unsigned char)::{lambda()#1})+0x8e>
    if (is_done())
   14df0:	ab01      	add	r3, sp, #4
   14df2:	4618      	mov	r0, r3
   14df4:	f7ff fb1a 	bl	1442c <Uart::Send(unsigned char)::{lambda()#1}::operator()() const>
   14df8:	4603      	mov	r3, r0
   14dfa:	2b00      	cmp	r3, #0
   14dfc:	d0e9      	beq.n	14dd2 <Status Wait<Uart::Send(unsigned char)::{lambda()#1}>(unsigned long long, Uart::Send(unsigned char)::{lambda()#1})+0x5e>
      status = Status::kSuccess;
   14dfe:	2300      	movs	r3, #0
   14e00:	9305      	str	r3, [sp, #20]
  return status;
   14e02:	9c05      	ldr	r4, [sp, #20]
   14e04:	462b      	mov	r3, r5
   14e06:	4619      	mov	r1, r3
   14e08:	4803      	ldr	r0, [pc, #12]	; (14e18 <Status Wait<Uart::Send(unsigned char)::{lambda()#1}>(unsigned long long, Uart::Send(unsigned char)::{lambda()#1})+0xa4>)
   14e0a:	f000 fbc3 	bl	15594 <__cyg_profile_func_exit>
   14e0e:	4623      	mov	r3, r4
}
   14e10:	4618      	mov	r0, r3
   14e12:	b008      	add	sp, #32
   14e14:	e8bd 8830 	ldmia.w	sp!, {r4, r5, fp, pc}
   14e18:	00014d75 	.word	0x00014d75

00014e1c <Status Wait<Uart::Receive(unsigned long)::{lambda()#1}>(unsigned long long, Uart::Receive(unsigned long)::{lambda()#1})>:
inline Status Wait(uint64_t timeout, F is_done)
   14e1c:	e92d 4830 	stmdb	sp!, {r4, r5, fp, lr}
   14e20:	b088      	sub	sp, #32
   14e22:	4675      	mov	r5, lr
   14e24:	e9cd 0102 	strd	r0, r1, [sp, #8]
   14e28:	9201      	str	r2, [sp, #4]
   14e2a:	462b      	mov	r3, r5
   14e2c:	4619      	mov	r1, r3
   14e2e:	4824      	ldr	r0, [pc, #144]	; (14ec0 <Status Wait<Uart::Receive(unsigned long)::{lambda()#1}>(unsigned long long, Uart::Receive(unsigned long)::{lambda()#1})+0xa4>)
   14e30:	f000 fb9c 	bl	1556c <__cyg_profile_func_enter>
  uint64_t timeout_time = 0;
   14e34:	f04f 0300 	mov.w	r3, #0
   14e38:	f04f 0400 	mov.w	r4, #0
   14e3c:	e9cd 3406 	strd	r3, r4, [sp, #24]
  if (timeout == kMaxWait)
   14e40:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
   14e44:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
   14e48:	bf08      	it	eq
   14e4a:	f1b3 3fff 	cmpeq.w	r3, #4294967295	; 0xffffffff
   14e4e:	d106      	bne.n	14e5e <Status Wait<Uart::Receive(unsigned long)::{lambda()#1}>(unsigned long long, Uart::Receive(unsigned long)::{lambda()#1})+0x42>
    timeout_time = kMaxWait;
   14e50:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   14e54:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   14e58:	e9cd 3406 	strd	r3, r4, [sp, #24]
   14e5c:	e00b      	b.n	14e76 <Status Wait<Uart::Receive(unsigned long)::{lambda()#1}>(unsigned long long, Uart::Receive(unsigned long)::{lambda()#1})+0x5a>
    timeout_time = Milliseconds() + timeout;
   14e5e:	f7fc f863 	bl	10f28 <Milliseconds()>
   14e62:	460a      	mov	r2, r1
   14e64:	4601      	mov	r1, r0
   14e66:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
   14e6a:	eb13 0b01 	adds.w	fp, r3, r1
   14e6e:	eb44 0c02 	adc.w	ip, r4, r2
   14e72:	e9cd bc06 	strd	fp, ip, [sp, #24]
  Status status = Status::kTimedOut;
   14e76:	2301      	movs	r3, #1
   14e78:	9305      	str	r3, [sp, #20]
  while (Milliseconds() < timeout_time)
   14e7a:	f7fc f855 	bl	10f28 <Milliseconds()>
   14e7e:	460a      	mov	r2, r1
   14e80:	4601      	mov	r1, r0
   14e82:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
   14e86:	42a2      	cmp	r2, r4
   14e88:	bf08      	it	eq
   14e8a:	4299      	cmpeq	r1, r3
   14e8c:	bf34      	ite	cc
   14e8e:	2301      	movcc	r3, #1
   14e90:	2300      	movcs	r3, #0
   14e92:	b2db      	uxtb	r3, r3
   14e94:	2b00      	cmp	r3, #0
   14e96:	d008      	beq.n	14eaa <Status Wait<Uart::Receive(unsigned long)::{lambda()#1}>(unsigned long long, Uart::Receive(unsigned long)::{lambda()#1})+0x8e>
    if (is_done())
   14e98:	ab01      	add	r3, sp, #4
   14e9a:	4618      	mov	r0, r3
   14e9c:	f7ff fb60 	bl	14560 <Uart::Receive(unsigned long)::{lambda()#1}::operator()() const>
   14ea0:	4603      	mov	r3, r0
   14ea2:	2b00      	cmp	r3, #0
   14ea4:	d0e9      	beq.n	14e7a <Status Wait<Uart::Receive(unsigned long)::{lambda()#1}>(unsigned long long, Uart::Receive(unsigned long)::{lambda()#1})+0x5e>
      status = Status::kSuccess;
   14ea6:	2300      	movs	r3, #0
   14ea8:	9305      	str	r3, [sp, #20]
  return status;
   14eaa:	9c05      	ldr	r4, [sp, #20]
   14eac:	462b      	mov	r3, r5
   14eae:	4619      	mov	r1, r3
   14eb0:	4803      	ldr	r0, [pc, #12]	; (14ec0 <Status Wait<Uart::Receive(unsigned long)::{lambda()#1}>(unsigned long long, Uart::Receive(unsigned long)::{lambda()#1})+0xa4>)
   14eb2:	f000 fb6f 	bl	15594 <__cyg_profile_func_exit>
   14eb6:	4623      	mov	r3, r4
}
   14eb8:	4618      	mov	r0, r3
   14eba:	b008      	add	sp, #32
   14ebc:	e8bd 8830 	ldmia.w	sp!, {r4, r5, fp, pc}
   14ec0:	00014e1d 	.word	0x00014e1d

00014ec4 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)0>()>:
  static void ClearInterrupts()
   14ec4:	b510      	push	{r4, lr}
   14ec6:	b082      	sub	sp, #8
   14ec8:	4674      	mov	r4, lr
   14eca:	4623      	mov	r3, r4
   14ecc:	4619      	mov	r1, r3
   14ece:	4823      	ldr	r0, [pc, #140]	; (14f5c <void Timer::ClearInterrupts<(TimerInterface::TimerPort)0>()+0x98>)
   14ed0:	f000 fb4c 	bl	1556c <__cyg_profile_func_enter>
    uint8_t channel = util::Value(port);
   14ed4:	2300      	movs	r3, #0
   14ed6:	f88d 3007 	strb.w	r3, [sp, #7]
    tim_register[channel]->IR |= (1 << kRegMR0);
   14eda:	f89d 3007 	ldrb.w	r3, [sp, #7]
   14ede:	4a20      	ldr	r2, [pc, #128]	; (14f60 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)0>()+0x9c>)
   14ee0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14ee4:	681a      	ldr	r2, [r3, #0]
   14ee6:	f89d 3007 	ldrb.w	r3, [sp, #7]
   14eea:	491d      	ldr	r1, [pc, #116]	; (14f60 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)0>()+0x9c>)
   14eec:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   14ef0:	f042 0201 	orr.w	r2, r2, #1
   14ef4:	601a      	str	r2, [r3, #0]
    tim_register[channel]->IR |= (1 << kRegMR1);
   14ef6:	f89d 3007 	ldrb.w	r3, [sp, #7]
   14efa:	4a19      	ldr	r2, [pc, #100]	; (14f60 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)0>()+0x9c>)
   14efc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14f00:	681a      	ldr	r2, [r3, #0]
   14f02:	f89d 3007 	ldrb.w	r3, [sp, #7]
   14f06:	4916      	ldr	r1, [pc, #88]	; (14f60 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)0>()+0x9c>)
   14f08:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   14f0c:	f042 0202 	orr.w	r2, r2, #2
   14f10:	601a      	str	r2, [r3, #0]
    tim_register[channel]->IR |= (1 << kRegMR2);
   14f12:	f89d 3007 	ldrb.w	r3, [sp, #7]
   14f16:	4a12      	ldr	r2, [pc, #72]	; (14f60 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)0>()+0x9c>)
   14f18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14f1c:	681a      	ldr	r2, [r3, #0]
   14f1e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   14f22:	490f      	ldr	r1, [pc, #60]	; (14f60 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)0>()+0x9c>)
   14f24:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   14f28:	f042 0204 	orr.w	r2, r2, #4
   14f2c:	601a      	str	r2, [r3, #0]
    tim_register[channel]->IR |= (1 << kRegMR3);
   14f2e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   14f32:	4a0b      	ldr	r2, [pc, #44]	; (14f60 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)0>()+0x9c>)
   14f34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14f38:	681a      	ldr	r2, [r3, #0]
   14f3a:	f89d 3007 	ldrb.w	r3, [sp, #7]
   14f3e:	4908      	ldr	r1, [pc, #32]	; (14f60 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)0>()+0x9c>)
   14f40:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   14f44:	f042 0208 	orr.w	r2, r2, #8
   14f48:	601a      	str	r2, [r3, #0]
   14f4a:	4623      	mov	r3, r4
   14f4c:	4619      	mov	r1, r3
   14f4e:	4803      	ldr	r0, [pc, #12]	; (14f5c <void Timer::ClearInterrupts<(TimerInterface::TimerPort)0>()+0x98>)
   14f50:	f000 fb20 	bl	15594 <__cyg_profile_func_exit>
  }
   14f54:	bf00      	nop
   14f56:	b002      	add	sp, #8
   14f58:	bd10      	pop	{r4, pc}
   14f5a:	bf00      	nop
   14f5c:	00014ec5 	.word	0x00014ec5
   14f60:	10000384 	.word	0x10000384

00014f64 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)1>()>:
  static void ClearInterrupts()
   14f64:	b510      	push	{r4, lr}
   14f66:	b082      	sub	sp, #8
   14f68:	4674      	mov	r4, lr
   14f6a:	4623      	mov	r3, r4
   14f6c:	4619      	mov	r1, r3
   14f6e:	4823      	ldr	r0, [pc, #140]	; (14ffc <void Timer::ClearInterrupts<(TimerInterface::TimerPort)1>()+0x98>)
   14f70:	f000 fafc 	bl	1556c <__cyg_profile_func_enter>
    uint8_t channel = util::Value(port);
   14f74:	2301      	movs	r3, #1
   14f76:	f88d 3007 	strb.w	r3, [sp, #7]
    tim_register[channel]->IR |= (1 << kRegMR0);
   14f7a:	f89d 3007 	ldrb.w	r3, [sp, #7]
   14f7e:	4a20      	ldr	r2, [pc, #128]	; (15000 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)1>()+0x9c>)
   14f80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14f84:	681a      	ldr	r2, [r3, #0]
   14f86:	f89d 3007 	ldrb.w	r3, [sp, #7]
   14f8a:	491d      	ldr	r1, [pc, #116]	; (15000 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)1>()+0x9c>)
   14f8c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   14f90:	f042 0201 	orr.w	r2, r2, #1
   14f94:	601a      	str	r2, [r3, #0]
    tim_register[channel]->IR |= (1 << kRegMR1);
   14f96:	f89d 3007 	ldrb.w	r3, [sp, #7]
   14f9a:	4a19      	ldr	r2, [pc, #100]	; (15000 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)1>()+0x9c>)
   14f9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14fa0:	681a      	ldr	r2, [r3, #0]
   14fa2:	f89d 3007 	ldrb.w	r3, [sp, #7]
   14fa6:	4916      	ldr	r1, [pc, #88]	; (15000 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)1>()+0x9c>)
   14fa8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   14fac:	f042 0202 	orr.w	r2, r2, #2
   14fb0:	601a      	str	r2, [r3, #0]
    tim_register[channel]->IR |= (1 << kRegMR2);
   14fb2:	f89d 3007 	ldrb.w	r3, [sp, #7]
   14fb6:	4a12      	ldr	r2, [pc, #72]	; (15000 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)1>()+0x9c>)
   14fb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14fbc:	681a      	ldr	r2, [r3, #0]
   14fbe:	f89d 3007 	ldrb.w	r3, [sp, #7]
   14fc2:	490f      	ldr	r1, [pc, #60]	; (15000 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)1>()+0x9c>)
   14fc4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   14fc8:	f042 0204 	orr.w	r2, r2, #4
   14fcc:	601a      	str	r2, [r3, #0]
    tim_register[channel]->IR |= (1 << kRegMR3);
   14fce:	f89d 3007 	ldrb.w	r3, [sp, #7]
   14fd2:	4a0b      	ldr	r2, [pc, #44]	; (15000 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)1>()+0x9c>)
   14fd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14fd8:	681a      	ldr	r2, [r3, #0]
   14fda:	f89d 3007 	ldrb.w	r3, [sp, #7]
   14fde:	4908      	ldr	r1, [pc, #32]	; (15000 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)1>()+0x9c>)
   14fe0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   14fe4:	f042 0208 	orr.w	r2, r2, #8
   14fe8:	601a      	str	r2, [r3, #0]
   14fea:	4623      	mov	r3, r4
   14fec:	4619      	mov	r1, r3
   14fee:	4803      	ldr	r0, [pc, #12]	; (14ffc <void Timer::ClearInterrupts<(TimerInterface::TimerPort)1>()+0x98>)
   14ff0:	f000 fad0 	bl	15594 <__cyg_profile_func_exit>
  }
   14ff4:	bf00      	nop
   14ff6:	b002      	add	sp, #8
   14ff8:	bd10      	pop	{r4, pc}
   14ffa:	bf00      	nop
   14ffc:	00014f65 	.word	0x00014f65
   15000:	10000384 	.word	0x10000384

00015004 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)2>()>:
  static void ClearInterrupts()
   15004:	b510      	push	{r4, lr}
   15006:	b082      	sub	sp, #8
   15008:	4674      	mov	r4, lr
   1500a:	4623      	mov	r3, r4
   1500c:	4619      	mov	r1, r3
   1500e:	4823      	ldr	r0, [pc, #140]	; (1509c <void Timer::ClearInterrupts<(TimerInterface::TimerPort)2>()+0x98>)
   15010:	f000 faac 	bl	1556c <__cyg_profile_func_enter>
    uint8_t channel = util::Value(port);
   15014:	2302      	movs	r3, #2
   15016:	f88d 3007 	strb.w	r3, [sp, #7]
    tim_register[channel]->IR |= (1 << kRegMR0);
   1501a:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1501e:	4a20      	ldr	r2, [pc, #128]	; (150a0 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)2>()+0x9c>)
   15020:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15024:	681a      	ldr	r2, [r3, #0]
   15026:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1502a:	491d      	ldr	r1, [pc, #116]	; (150a0 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)2>()+0x9c>)
   1502c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   15030:	f042 0201 	orr.w	r2, r2, #1
   15034:	601a      	str	r2, [r3, #0]
    tim_register[channel]->IR |= (1 << kRegMR1);
   15036:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1503a:	4a19      	ldr	r2, [pc, #100]	; (150a0 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)2>()+0x9c>)
   1503c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15040:	681a      	ldr	r2, [r3, #0]
   15042:	f89d 3007 	ldrb.w	r3, [sp, #7]
   15046:	4916      	ldr	r1, [pc, #88]	; (150a0 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)2>()+0x9c>)
   15048:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   1504c:	f042 0202 	orr.w	r2, r2, #2
   15050:	601a      	str	r2, [r3, #0]
    tim_register[channel]->IR |= (1 << kRegMR2);
   15052:	f89d 3007 	ldrb.w	r3, [sp, #7]
   15056:	4a12      	ldr	r2, [pc, #72]	; (150a0 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)2>()+0x9c>)
   15058:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1505c:	681a      	ldr	r2, [r3, #0]
   1505e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   15062:	490f      	ldr	r1, [pc, #60]	; (150a0 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)2>()+0x9c>)
   15064:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   15068:	f042 0204 	orr.w	r2, r2, #4
   1506c:	601a      	str	r2, [r3, #0]
    tim_register[channel]->IR |= (1 << kRegMR3);
   1506e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   15072:	4a0b      	ldr	r2, [pc, #44]	; (150a0 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)2>()+0x9c>)
   15074:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15078:	681a      	ldr	r2, [r3, #0]
   1507a:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1507e:	4908      	ldr	r1, [pc, #32]	; (150a0 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)2>()+0x9c>)
   15080:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   15084:	f042 0208 	orr.w	r2, r2, #8
   15088:	601a      	str	r2, [r3, #0]
   1508a:	4623      	mov	r3, r4
   1508c:	4619      	mov	r1, r3
   1508e:	4803      	ldr	r0, [pc, #12]	; (1509c <void Timer::ClearInterrupts<(TimerInterface::TimerPort)2>()+0x98>)
   15090:	f000 fa80 	bl	15594 <__cyg_profile_func_exit>
  }
   15094:	bf00      	nop
   15096:	b002      	add	sp, #8
   15098:	bd10      	pop	{r4, pc}
   1509a:	bf00      	nop
   1509c:	00015005 	.word	0x00015005
   150a0:	10000384 	.word	0x10000384

000150a4 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)3>()>:
  static void ClearInterrupts()
   150a4:	b510      	push	{r4, lr}
   150a6:	b082      	sub	sp, #8
   150a8:	4674      	mov	r4, lr
   150aa:	4623      	mov	r3, r4
   150ac:	4619      	mov	r1, r3
   150ae:	4823      	ldr	r0, [pc, #140]	; (1513c <void Timer::ClearInterrupts<(TimerInterface::TimerPort)3>()+0x98>)
   150b0:	f000 fa5c 	bl	1556c <__cyg_profile_func_enter>
    uint8_t channel = util::Value(port);
   150b4:	2303      	movs	r3, #3
   150b6:	f88d 3007 	strb.w	r3, [sp, #7]
    tim_register[channel]->IR |= (1 << kRegMR0);
   150ba:	f89d 3007 	ldrb.w	r3, [sp, #7]
   150be:	4a20      	ldr	r2, [pc, #128]	; (15140 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)3>()+0x9c>)
   150c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   150c4:	681a      	ldr	r2, [r3, #0]
   150c6:	f89d 3007 	ldrb.w	r3, [sp, #7]
   150ca:	491d      	ldr	r1, [pc, #116]	; (15140 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)3>()+0x9c>)
   150cc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   150d0:	f042 0201 	orr.w	r2, r2, #1
   150d4:	601a      	str	r2, [r3, #0]
    tim_register[channel]->IR |= (1 << kRegMR1);
   150d6:	f89d 3007 	ldrb.w	r3, [sp, #7]
   150da:	4a19      	ldr	r2, [pc, #100]	; (15140 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)3>()+0x9c>)
   150dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   150e0:	681a      	ldr	r2, [r3, #0]
   150e2:	f89d 3007 	ldrb.w	r3, [sp, #7]
   150e6:	4916      	ldr	r1, [pc, #88]	; (15140 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)3>()+0x9c>)
   150e8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   150ec:	f042 0202 	orr.w	r2, r2, #2
   150f0:	601a      	str	r2, [r3, #0]
    tim_register[channel]->IR |= (1 << kRegMR2);
   150f2:	f89d 3007 	ldrb.w	r3, [sp, #7]
   150f6:	4a12      	ldr	r2, [pc, #72]	; (15140 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)3>()+0x9c>)
   150f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   150fc:	681a      	ldr	r2, [r3, #0]
   150fe:	f89d 3007 	ldrb.w	r3, [sp, #7]
   15102:	490f      	ldr	r1, [pc, #60]	; (15140 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)3>()+0x9c>)
   15104:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   15108:	f042 0204 	orr.w	r2, r2, #4
   1510c:	601a      	str	r2, [r3, #0]
    tim_register[channel]->IR |= (1 << kRegMR3);
   1510e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   15112:	4a0b      	ldr	r2, [pc, #44]	; (15140 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)3>()+0x9c>)
   15114:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15118:	681a      	ldr	r2, [r3, #0]
   1511a:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1511e:	4908      	ldr	r1, [pc, #32]	; (15140 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)3>()+0x9c>)
   15120:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   15124:	f042 0208 	orr.w	r2, r2, #8
   15128:	601a      	str	r2, [r3, #0]
   1512a:	4623      	mov	r3, r4
   1512c:	4619      	mov	r1, r3
   1512e:	4803      	ldr	r0, [pc, #12]	; (1513c <void Timer::ClearInterrupts<(TimerInterface::TimerPort)3>()+0x98>)
   15130:	f000 fa30 	bl	15594 <__cyg_profile_func_exit>
  }
   15134:	bf00      	nop
   15136:	b002      	add	sp, #8
   15138:	bd10      	pop	{r4, pc}
   1513a:	bf00      	nop
   1513c:	000150a5 	.word	0x000150a5
   15140:	10000384 	.word	0x10000384

00015144 <__static_initialization_and_destruction_0(int, int)>:
#pragma GCC diagnostic pop
    // main() shouldn't return, but if it does, we'll just enter an infinite
    // loop
    Halt();
  }
}
   15144:	b082      	sub	sp, #8
   15146:	9001      	str	r0, [sp, #4]
   15148:	9100      	str	r1, [sp, #0]
   1514a:	9b01      	ldr	r3, [sp, #4]
   1514c:	2b01      	cmp	r3, #1
   1514e:	d15d      	bne.n	1520c <__static_initialization_and_destruction_0(int, int)+0xc8>
   15150:	9b00      	ldr	r3, [sp, #0]
   15152:	f64f 72ff 	movw	r2, #65535	; 0xffff
   15156:	4293      	cmp	r3, r2
   15158:	d158      	bne.n	1520c <__static_initialization_and_destruction_0(int, int)+0xc8>
  inline static volatile uint32_t * match[4][4] = {
   1515a:	4b2e      	ldr	r3, [pc, #184]	; (15214 <__static_initialization_and_destruction_0(int, int)+0xd0>)
   1515c:	681b      	ldr	r3, [r3, #0]
   1515e:	f003 0301 	and.w	r3, r3, #1
   15162:	2b00      	cmp	r3, #0
   15164:	d152      	bne.n	1520c <__static_initialization_and_destruction_0(int, int)+0xc8>
   15166:	4b2b      	ldr	r3, [pc, #172]	; (15214 <__static_initialization_and_destruction_0(int, int)+0xd0>)
   15168:	2201      	movs	r2, #1
   1516a:	601a      	str	r2, [r3, #0]
    [kTimer0] = { &tim_register[0]->MR0, &tim_register[0]->MR1,
   1516c:	4b2a      	ldr	r3, [pc, #168]	; (15218 <__static_initialization_and_destruction_0(int, int)+0xd4>)
   1516e:	681b      	ldr	r3, [r3, #0]
   15170:	3318      	adds	r3, #24
  };
   15172:	4a2a      	ldr	r2, [pc, #168]	; (1521c <__static_initialization_and_destruction_0(int, int)+0xd8>)
   15174:	6013      	str	r3, [r2, #0]
    [kTimer0] = { &tim_register[0]->MR0, &tim_register[0]->MR1,
   15176:	4b28      	ldr	r3, [pc, #160]	; (15218 <__static_initialization_and_destruction_0(int, int)+0xd4>)
   15178:	681b      	ldr	r3, [r3, #0]
   1517a:	331c      	adds	r3, #28
  };
   1517c:	4a27      	ldr	r2, [pc, #156]	; (1521c <__static_initialization_and_destruction_0(int, int)+0xd8>)
   1517e:	6053      	str	r3, [r2, #4]
                  &tim_register[0]->MR2, &tim_register[0]->MR3 },
   15180:	4b25      	ldr	r3, [pc, #148]	; (15218 <__static_initialization_and_destruction_0(int, int)+0xd4>)
   15182:	681b      	ldr	r3, [r3, #0]
   15184:	3320      	adds	r3, #32
  };
   15186:	4a25      	ldr	r2, [pc, #148]	; (1521c <__static_initialization_and_destruction_0(int, int)+0xd8>)
   15188:	6093      	str	r3, [r2, #8]
                  &tim_register[0]->MR2, &tim_register[0]->MR3 },
   1518a:	4b23      	ldr	r3, [pc, #140]	; (15218 <__static_initialization_and_destruction_0(int, int)+0xd4>)
   1518c:	681b      	ldr	r3, [r3, #0]
   1518e:	3324      	adds	r3, #36	; 0x24
  };
   15190:	4a22      	ldr	r2, [pc, #136]	; (1521c <__static_initialization_and_destruction_0(int, int)+0xd8>)
   15192:	60d3      	str	r3, [r2, #12]
    [kTimer1] = { &tim_register[1]->MR0, &tim_register[1]->MR1,
   15194:	4b20      	ldr	r3, [pc, #128]	; (15218 <__static_initialization_and_destruction_0(int, int)+0xd4>)
   15196:	685b      	ldr	r3, [r3, #4]
   15198:	3318      	adds	r3, #24
  };
   1519a:	4a20      	ldr	r2, [pc, #128]	; (1521c <__static_initialization_and_destruction_0(int, int)+0xd8>)
   1519c:	6113      	str	r3, [r2, #16]
    [kTimer1] = { &tim_register[1]->MR0, &tim_register[1]->MR1,
   1519e:	4b1e      	ldr	r3, [pc, #120]	; (15218 <__static_initialization_and_destruction_0(int, int)+0xd4>)
   151a0:	685b      	ldr	r3, [r3, #4]
   151a2:	331c      	adds	r3, #28
  };
   151a4:	4a1d      	ldr	r2, [pc, #116]	; (1521c <__static_initialization_and_destruction_0(int, int)+0xd8>)
   151a6:	6153      	str	r3, [r2, #20]
                  &tim_register[1]->MR2, &tim_register[1]->MR3 },
   151a8:	4b1b      	ldr	r3, [pc, #108]	; (15218 <__static_initialization_and_destruction_0(int, int)+0xd4>)
   151aa:	685b      	ldr	r3, [r3, #4]
   151ac:	3320      	adds	r3, #32
  };
   151ae:	4a1b      	ldr	r2, [pc, #108]	; (1521c <__static_initialization_and_destruction_0(int, int)+0xd8>)
   151b0:	6193      	str	r3, [r2, #24]
                  &tim_register[1]->MR2, &tim_register[1]->MR3 },
   151b2:	4b19      	ldr	r3, [pc, #100]	; (15218 <__static_initialization_and_destruction_0(int, int)+0xd4>)
   151b4:	685b      	ldr	r3, [r3, #4]
   151b6:	3324      	adds	r3, #36	; 0x24
  };
   151b8:	4a18      	ldr	r2, [pc, #96]	; (1521c <__static_initialization_and_destruction_0(int, int)+0xd8>)
   151ba:	61d3      	str	r3, [r2, #28]
    [kTimer2] = { &tim_register[2]->MR0, &tim_register[2]->MR1,
   151bc:	4b16      	ldr	r3, [pc, #88]	; (15218 <__static_initialization_and_destruction_0(int, int)+0xd4>)
   151be:	689b      	ldr	r3, [r3, #8]
   151c0:	3318      	adds	r3, #24
  };
   151c2:	4a16      	ldr	r2, [pc, #88]	; (1521c <__static_initialization_and_destruction_0(int, int)+0xd8>)
   151c4:	6213      	str	r3, [r2, #32]
    [kTimer2] = { &tim_register[2]->MR0, &tim_register[2]->MR1,
   151c6:	4b14      	ldr	r3, [pc, #80]	; (15218 <__static_initialization_and_destruction_0(int, int)+0xd4>)
   151c8:	689b      	ldr	r3, [r3, #8]
   151ca:	331c      	adds	r3, #28
  };
   151cc:	4a13      	ldr	r2, [pc, #76]	; (1521c <__static_initialization_and_destruction_0(int, int)+0xd8>)
   151ce:	6253      	str	r3, [r2, #36]	; 0x24
                  &tim_register[2]->MR2, &tim_register[2]->MR3 },
   151d0:	4b11      	ldr	r3, [pc, #68]	; (15218 <__static_initialization_and_destruction_0(int, int)+0xd4>)
   151d2:	689b      	ldr	r3, [r3, #8]
   151d4:	3320      	adds	r3, #32
  };
   151d6:	4a11      	ldr	r2, [pc, #68]	; (1521c <__static_initialization_and_destruction_0(int, int)+0xd8>)
   151d8:	6293      	str	r3, [r2, #40]	; 0x28
                  &tim_register[2]->MR2, &tim_register[2]->MR3 },
   151da:	4b0f      	ldr	r3, [pc, #60]	; (15218 <__static_initialization_and_destruction_0(int, int)+0xd4>)
   151dc:	689b      	ldr	r3, [r3, #8]
   151de:	3324      	adds	r3, #36	; 0x24
  };
   151e0:	4a0e      	ldr	r2, [pc, #56]	; (1521c <__static_initialization_and_destruction_0(int, int)+0xd8>)
   151e2:	62d3      	str	r3, [r2, #44]	; 0x2c
    [kTimer3] = { &tim_register[3]->MR0, &tim_register[3]->MR1,
   151e4:	4b0c      	ldr	r3, [pc, #48]	; (15218 <__static_initialization_and_destruction_0(int, int)+0xd4>)
   151e6:	68db      	ldr	r3, [r3, #12]
   151e8:	3318      	adds	r3, #24
  };
   151ea:	4a0c      	ldr	r2, [pc, #48]	; (1521c <__static_initialization_and_destruction_0(int, int)+0xd8>)
   151ec:	6313      	str	r3, [r2, #48]	; 0x30
    [kTimer3] = { &tim_register[3]->MR0, &tim_register[3]->MR1,
   151ee:	4b0a      	ldr	r3, [pc, #40]	; (15218 <__static_initialization_and_destruction_0(int, int)+0xd4>)
   151f0:	68db      	ldr	r3, [r3, #12]
   151f2:	331c      	adds	r3, #28
  };
   151f4:	4a09      	ldr	r2, [pc, #36]	; (1521c <__static_initialization_and_destruction_0(int, int)+0xd8>)
   151f6:	6353      	str	r3, [r2, #52]	; 0x34
                  &tim_register[3]->MR2, &tim_register[3]->MR3 }
   151f8:	4b07      	ldr	r3, [pc, #28]	; (15218 <__static_initialization_and_destruction_0(int, int)+0xd4>)
   151fa:	68db      	ldr	r3, [r3, #12]
   151fc:	3320      	adds	r3, #32
  };
   151fe:	4a07      	ldr	r2, [pc, #28]	; (1521c <__static_initialization_and_destruction_0(int, int)+0xd8>)
   15200:	6393      	str	r3, [r2, #56]	; 0x38
                  &tim_register[3]->MR2, &tim_register[3]->MR3 }
   15202:	4b05      	ldr	r3, [pc, #20]	; (15218 <__static_initialization_and_destruction_0(int, int)+0xd4>)
   15204:	68db      	ldr	r3, [r3, #12]
   15206:	3324      	adds	r3, #36	; 0x24
  };
   15208:	4a04      	ldr	r2, [pc, #16]	; (1521c <__static_initialization_and_destruction_0(int, int)+0xd8>)
   1520a:	63d3      	str	r3, [r2, #60]	; 0x3c
   1520c:	bf00      	nop
   1520e:	b002      	add	sp, #8
   15210:	4770      	bx	lr
   15212:	bf00      	nop
   15214:	10000ec4 	.word	0x10000ec4
   15218:	10000384 	.word	0x10000384
   1521c:	10000e74 	.word	0x10000e74

00015220 <_GLOBAL__sub_I_UptimeRTOS>:
   15220:	b508      	push	{r3, lr}
   15222:	f64f 71ff 	movw	r1, #65535	; 0xffff
   15226:	2001      	movs	r0, #1
   15228:	f7ff ff8c 	bl	15144 <__static_initialization_and_destruction_0(int, int)>
   1522c:	bd08      	pop	{r3, pc}
   1522e:	Address 0x000000000001522e is out of bounds.


00015230 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
   15230:	b082      	sub	sp, #8
   15232:	4603      	mov	r3, r0
   15234:	f88d 3007 	strb.w	r3, [sp, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
   15238:	f99d 3007 	ldrsb.w	r3, [sp, #7]
   1523c:	f003 021f 	and.w	r2, r3, #31
   15240:	4905      	ldr	r1, [pc, #20]	; (15258 <NVIC_EnableIRQ+0x28>)
   15242:	f99d 3007 	ldrsb.w	r3, [sp, #7]
   15246:	095b      	lsrs	r3, r3, #5
   15248:	2001      	movs	r0, #1
   1524a:	fa00 f202 	lsl.w	r2, r0, r2
   1524e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   15252:	bf00      	nop
   15254:	b002      	add	sp, #8
   15256:	4770      	bx	lr
   15258:	e000e100 	.word	0xe000e100

0001525c <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
   1525c:	b082      	sub	sp, #8
   1525e:	4603      	mov	r3, r0
   15260:	9100      	str	r1, [sp, #0]
   15262:	f88d 3007 	strb.w	r3, [sp, #7]
  if ((int32_t)(IRQn) < 0)
   15266:	f99d 3007 	ldrsb.w	r3, [sp, #7]
   1526a:	2b00      	cmp	r3, #0
   1526c:	da0c      	bge.n	15288 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1526e:	9b00      	ldr	r3, [sp, #0]
   15270:	b2da      	uxtb	r2, r3
   15272:	490d      	ldr	r1, [pc, #52]	; (152a8 <NVIC_SetPriority+0x4c>)
   15274:	f99d 3007 	ldrsb.w	r3, [sp, #7]
   15278:	f003 030f 	and.w	r3, r3, #15
   1527c:	3b04      	subs	r3, #4
   1527e:	0152      	lsls	r2, r2, #5
   15280:	b2d2      	uxtb	r2, r2
   15282:	440b      	add	r3, r1
   15284:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
   15286:	e00b      	b.n	152a0 <NVIC_SetPriority+0x44>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   15288:	9b00      	ldr	r3, [sp, #0]
   1528a:	b2db      	uxtb	r3, r3
   1528c:	4a07      	ldr	r2, [pc, #28]	; (152ac <NVIC_SetPriority+0x50>)
   1528e:	f99d 1007 	ldrsb.w	r1, [sp, #7]
   15292:	4608      	mov	r0, r1
   15294:	015b      	lsls	r3, r3, #5
   15296:	b2d9      	uxtb	r1, r3
   15298:	1813      	adds	r3, r2, r0
   1529a:	460a      	mov	r2, r1
   1529c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
   152a0:	bf00      	nop
   152a2:	b002      	add	sp, #8
   152a4:	4770      	bx	lr
   152a6:	bf00      	nop
   152a8:	e000ed00 	.word	0xe000ed00
   152ac:	e000e100 	.word	0xe000e100

000152b0 <InterruptLookupHandler>:
{
   152b0:	b500      	push	{lr}
   152b2:	b085      	sub	sp, #20
  uint8_t active_isr = (SCB->ICSR & 0xFF);
   152b4:	4b12      	ldr	r3, [pc, #72]	; (15300 <InterruptLookupHandler+0x50>)
   152b6:	685b      	ldr	r3, [r3, #4]
   152b8:	f88d 300f 	strb.w	r3, [sp, #15]
  IsrPointer isr     = dynamic_isr_vector_table[active_isr];
   152bc:	f89d 300f 	ldrb.w	r3, [sp, #15]
   152c0:	4a10      	ldr	r2, [pc, #64]	; (15304 <InterruptLookupHandler+0x54>)
   152c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   152c6:	9302      	str	r3, [sp, #8]
  SJ2_ASSERT_FATAL(isr != InterruptLookupHandler,
   152c8:	9b02      	ldr	r3, [sp, #8]
   152ca:	4a0f      	ldr	r2, [pc, #60]	; (15308 <InterruptLookupHandler+0x58>)
   152cc:	4293      	cmp	r3, r2
   152ce:	d110      	bne.n	152f2 <InterruptLookupHandler+0x42>
   152d0:	f89d 300f 	ldrb.w	r3, [sp, #15]
   152d4:	9300      	str	r3, [sp, #0]
   152d6:	23dd      	movs	r3, #221	; 0xdd
   152d8:	4a0c      	ldr	r2, [pc, #48]	; (1530c <InterruptLookupHandler+0x5c>)
   152da:	490d      	ldr	r1, [pc, #52]	; (15310 <InterruptLookupHandler+0x60>)
   152dc:	480d      	ldr	r0, [pc, #52]	; (15314 <InterruptLookupHandler+0x64>)
   152de:	f001 fba1 	bl	16a24 <printf>
   152e2:	480d      	ldr	r0, [pc, #52]	; (15318 <InterruptLookupHandler+0x68>)
   152e4:	f000 f912 	bl	1550c <puts>
   152e8:	2100      	movs	r1, #0
   152ea:	2001      	movs	r0, #1
   152ec:	f7fb fd84 	bl	10df8 <debug::PrintBacktrace(bool, void*)>
   152f0:	e7fe      	b.n	152f0 <InterruptLookupHandler+0x40>
  isr();
   152f2:	9b02      	ldr	r3, [sp, #8]
   152f4:	4798      	blx	r3
}
   152f6:	bf00      	nop
   152f8:	b005      	add	sp, #20
   152fa:	f85d fb04 	ldr.w	pc, [sp], #4
   152fe:	bf00      	nop
   15300:	e000ed00 	.word	0xe000ed00
   15304:	10000410 	.word	0x10000410
   15308:	000152b1 	.word	0x000152b1
   1530c:	00019bdc 	.word	0x00019bdc
   15310:	00019bcc 	.word	0x00019bcc
   15314:	00019a70 	.word	0x00019a70
   15318:	00019b1c 	.word	0x00019b1c

0001531c <RegisterIsr(IRQn, void (*)(), bool, long)>:
{
   1531c:	b500      	push	{lr}
   1531e:	b085      	sub	sp, #20
   15320:	9102      	str	r1, [sp, #8]
   15322:	9301      	str	r3, [sp, #4]
   15324:	4603      	mov	r3, r0
   15326:	f88d 300f 	strb.w	r3, [sp, #15]
   1532a:	4613      	mov	r3, r2
   1532c:	f88d 300e 	strb.w	r3, [sp, #14]
  dynamic_isr_vector_table[irq + kIrqOffset] = isr;
   15330:	f99d 300f 	ldrsb.w	r3, [sp, #15]
   15334:	3310      	adds	r3, #16
   15336:	490f      	ldr	r1, [pc, #60]	; (15374 <RegisterIsr(IRQn, void (*)(), bool, long)+0x58>)
   15338:	9a02      	ldr	r2, [sp, #8]
   1533a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  if (enable_interrupt && irq >= 0)
   1533e:	f89d 300e 	ldrb.w	r3, [sp, #14]
   15342:	2b00      	cmp	r3, #0
   15344:	d008      	beq.n	15358 <RegisterIsr(IRQn, void (*)(), bool, long)+0x3c>
   15346:	f99d 300f 	ldrsb.w	r3, [sp, #15]
   1534a:	2b00      	cmp	r3, #0
   1534c:	db04      	blt.n	15358 <RegisterIsr(IRQn, void (*)(), bool, long)+0x3c>
    NVIC_EnableIRQ(irq);
   1534e:	f99d 300f 	ldrsb.w	r3, [sp, #15]
   15352:	4618      	mov	r0, r3
   15354:	f7ff ff6c 	bl	15230 <NVIC_EnableIRQ>
  if (priority > -1)
   15358:	9b01      	ldr	r3, [sp, #4]
   1535a:	2b00      	cmp	r3, #0
   1535c:	db06      	blt.n	1536c <RegisterIsr(IRQn, void (*)(), bool, long)+0x50>
    NVIC_SetPriority(irq, priority);
   1535e:	9a01      	ldr	r2, [sp, #4]
   15360:	f99d 300f 	ldrsb.w	r3, [sp, #15]
   15364:	4611      	mov	r1, r2
   15366:	4618      	mov	r0, r3
   15368:	f7ff ff78 	bl	1525c <NVIC_SetPriority>
}
   1536c:	bf00      	nop
   1536e:	b005      	add	sp, #20
   15370:	f85d fb04 	ldr.w	pc, [sp], #4
   15374:	10000410 	.word	0x10000410

00015378 <GetRegistersFromStack>:
{
   15378:	b500      	push	{lr}
   1537a:	b08d      	sub	sp, #52	; 0x34
   1537c:	9003      	str	r0, [sp, #12]
  volatile uint32_t r0  = fault_stack_address[0];
   1537e:	9b03      	ldr	r3, [sp, #12]
   15380:	681b      	ldr	r3, [r3, #0]
   15382:	930b      	str	r3, [sp, #44]	; 0x2c
  volatile uint32_t r1  = fault_stack_address[1];
   15384:	9b03      	ldr	r3, [sp, #12]
   15386:	685b      	ldr	r3, [r3, #4]
   15388:	930a      	str	r3, [sp, #40]	; 0x28
  volatile uint32_t r2  = fault_stack_address[2];
   1538a:	9b03      	ldr	r3, [sp, #12]
   1538c:	689b      	ldr	r3, [r3, #8]
   1538e:	9309      	str	r3, [sp, #36]	; 0x24
  volatile uint32_t r3  = fault_stack_address[3];
   15390:	9b03      	ldr	r3, [sp, #12]
   15392:	68db      	ldr	r3, [r3, #12]
   15394:	9308      	str	r3, [sp, #32]
  volatile uint32_t r12 = fault_stack_address[4];
   15396:	9b03      	ldr	r3, [sp, #12]
   15398:	691b      	ldr	r3, [r3, #16]
   1539a:	9307      	str	r3, [sp, #28]
  volatile uint32_t lr = fault_stack_address[5];
   1539c:	9b03      	ldr	r3, [sp, #12]
   1539e:	695b      	ldr	r3, [r3, #20]
   153a0:	9306      	str	r3, [sp, #24]
  volatile uint32_t pc = fault_stack_address[6];
   153a2:	9b03      	ldr	r3, [sp, #12]
   153a4:	699b      	ldr	r3, [r3, #24]
   153a6:	9305      	str	r3, [sp, #20]
  volatile uint32_t psr = fault_stack_address[7];
   153a8:	9b03      	ldr	r3, [sp, #12]
   153aa:	69db      	ldr	r3, [r3, #28]
   153ac:	9304      	str	r3, [sp, #16]
  printf(SJ2_BACKGROUND_RED "Hard Fault Exception Occurred!\n" SJ2_COLOR_RESET);
   153ae:	480d      	ldr	r0, [pc, #52]	; (153e4 <GetRegistersFromStack+0x6c>)
   153b0:	f001 fb38 	bl	16a24 <printf>
  printf("r0: 0x%08" PRIX32 ", r1: 0x%08" PRIX32
   153b4:	990b      	ldr	r1, [sp, #44]	; 0x2c
   153b6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   153b8:	9809      	ldr	r0, [sp, #36]	; 0x24
   153ba:	9b08      	ldr	r3, [sp, #32]
   153bc:	9300      	str	r3, [sp, #0]
   153be:	4603      	mov	r3, r0
   153c0:	4809      	ldr	r0, [pc, #36]	; (153e8 <GetRegistersFromStack+0x70>)
   153c2:	f001 fb2f 	bl	16a24 <printf>
  printf("r12: 0x%08" PRIX32 ", lr: 0x%08" PRIX32
   153c6:	9907      	ldr	r1, [sp, #28]
   153c8:	9a06      	ldr	r2, [sp, #24]
   153ca:	9805      	ldr	r0, [sp, #20]
   153cc:	9b04      	ldr	r3, [sp, #16]
   153ce:	9300      	str	r3, [sp, #0]
   153d0:	4603      	mov	r3, r0
   153d2:	4806      	ldr	r0, [pc, #24]	; (153ec <GetRegistersFromStack+0x74>)
   153d4:	f001 fb26 	bl	16a24 <printf>
  debug::PrintBacktrace(true, reinterpret_cast<void *>(pc));
   153d8:	9b05      	ldr	r3, [sp, #20]
   153da:	4619      	mov	r1, r3
   153dc:	2001      	movs	r0, #1
   153de:	f7fb fd0b 	bl	10df8 <debug::PrintBacktrace(bool, void*)>
   153e2:	e7fe      	b.n	153e2 <GetRegistersFromStack+0x6a>
   153e4:	00019b34 	.word	0x00019b34
   153e8:	00019b60 	.word	0x00019b60
   153ec:	00019b94 	.word	0x00019b94

000153f0 <FirmwareStdOut(int)>:
}
Stdout out = HostWrite;
Stdin in   = HostRead;
#else
int FirmwareStdOut(int data)
{
   153f0:	b530      	push	{r4, r5, lr}
   153f2:	b083      	sub	sp, #12
   153f4:	4675      	mov	r5, lr
   153f6:	9001      	str	r0, [sp, #4]
   153f8:	462b      	mov	r3, r5
   153fa:	4619      	mov	r1, r3
   153fc:	4809      	ldr	r0, [pc, #36]	; (15424 <FirmwareStdOut(int)+0x34>)
   153fe:	f000 f8b5 	bl	1556c <__cyg_profile_func_enter>
  uart0.Send(static_cast<uint8_t>(data));
   15402:	9b01      	ldr	r3, [sp, #4]
   15404:	b2db      	uxtb	r3, r3
   15406:	4619      	mov	r1, r3
   15408:	4807      	ldr	r0, [pc, #28]	; (15428 <FirmwareStdOut(int)+0x38>)
   1540a:	f7ff f835 	bl	14478 <Uart::Send(unsigned char)>
  return 1;
   1540e:	2401      	movs	r4, #1
   15410:	462b      	mov	r3, r5
   15412:	4619      	mov	r1, r3
   15414:	4803      	ldr	r0, [pc, #12]	; (15424 <FirmwareStdOut(int)+0x34>)
   15416:	f000 f8bd 	bl	15594 <__cyg_profile_func_exit>
   1541a:	4623      	mov	r3, r4
}
   1541c:	4618      	mov	r0, r3
   1541e:	b003      	add	sp, #12
   15420:	bd30      	pop	{r4, r5, pc}
   15422:	bf00      	nop
   15424:	000153f1 	.word	0x000153f1
   15428:	100003e4 	.word	0x100003e4

0001542c <_exit>:
  }
  // Dummy implementation of exit with return code placed into
  // Arm register r3
  // NOLINTNEXTLINE(readability-identifier-naming)
  void _exit([[maybe_unused]] int rc)
  {
   1542c:	b500      	push	{lr}
   1542e:	b083      	sub	sp, #12
   15430:	4673      	mov	r3, lr
   15432:	9001      	str	r0, [sp, #4]
   15434:	4619      	mov	r1, r3
   15436:	4802      	ldr	r0, [pc, #8]	; (15440 <_exit+0x14>)
   15438:	f000 f898 	bl	1556c <__cyg_profile_func_enter>
    while (1)
    {
      continue;
   1543c:	bf00      	nop
    while (1)
   1543e:	e7fd      	b.n	1543c <_exit+0x10>
   15440:	0001542d 	.word	0x0001542d

00015444 <_getpid>:
    }
  }
  // Dummy implementation of getpid
  // NOLINTNEXTLINE(readability-identifier-naming)
  int _getpid()
  {
   15444:	b538      	push	{r3, r4, r5, lr}
   15446:	4675      	mov	r5, lr
   15448:	462b      	mov	r3, r5
   1544a:	4619      	mov	r1, r3
   1544c:	4805      	ldr	r0, [pc, #20]	; (15464 <_getpid+0x20>)
   1544e:	f000 f88d 	bl	1556c <__cyg_profile_func_enter>
    return 1;
   15452:	2401      	movs	r4, #1
   15454:	462b      	mov	r3, r5
   15456:	4619      	mov	r1, r3
   15458:	4802      	ldr	r0, [pc, #8]	; (15464 <_getpid+0x20>)
   1545a:	f000 f89b 	bl	15594 <__cyg_profile_func_exit>
   1545e:	4623      	mov	r3, r4
  }
   15460:	4618      	mov	r0, r3
   15462:	bd38      	pop	{r3, r4, r5, pc}
   15464:	00015445 	.word	0x00015445

00015468 <_kill>:
  // Dummy implementation of kill
  // NOLINTNEXTLINE(readability-identifier-naming)
  int _kill(int, int)
  {
   15468:	b530      	push	{r4, r5, lr}
   1546a:	b083      	sub	sp, #12
   1546c:	4675      	mov	r5, lr
   1546e:	9001      	str	r0, [sp, #4]
   15470:	9100      	str	r1, [sp, #0]
   15472:	462b      	mov	r3, r5
   15474:	4619      	mov	r1, r3
   15476:	4807      	ldr	r0, [pc, #28]	; (15494 <_kill+0x2c>)
   15478:	f000 f878 	bl	1556c <__cyg_profile_func_enter>
    return -1;
   1547c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   15480:	462b      	mov	r3, r5
   15482:	4619      	mov	r1, r3
   15484:	4803      	ldr	r0, [pc, #12]	; (15494 <_kill+0x2c>)
   15486:	f000 f885 	bl	15594 <__cyg_profile_func_exit>
   1548a:	4623      	mov	r3, r4
  }
   1548c:	4618      	mov	r0, r3
   1548e:	b003      	add	sp, #12
   15490:	bd30      	pop	{r4, r5, pc}
   15492:	bf00      	nop
   15494:	00015469 	.word	0x00015469

00015498 <_putchar>:
    }
    return length;
  }
  // Needed by third party printf library
  void _putchar(char character)  // NOLINT
  {
   15498:	b510      	push	{r4, lr}
   1549a:	b082      	sub	sp, #8
   1549c:	4674      	mov	r4, lr
   1549e:	4603      	mov	r3, r0
   154a0:	f88d 3007 	strb.w	r3, [sp, #7]
   154a4:	4623      	mov	r3, r4
   154a6:	4619      	mov	r1, r3
   154a8:	4808      	ldr	r0, [pc, #32]	; (154cc <_putchar+0x34>)
   154aa:	f000 f85f 	bl	1556c <__cyg_profile_func_enter>
    out(character);
   154ae:	4b08      	ldr	r3, [pc, #32]	; (154d0 <_putchar+0x38>)
   154b0:	681b      	ldr	r3, [r3, #0]
   154b2:	f89d 2007 	ldrb.w	r2, [sp, #7]
   154b6:	4610      	mov	r0, r2
   154b8:	4798      	blx	r3
   154ba:	4623      	mov	r3, r4
   154bc:	4619      	mov	r1, r3
   154be:	4803      	ldr	r0, [pc, #12]	; (154cc <_putchar+0x34>)
   154c0:	f000 f868 	bl	15594 <__cyg_profile_func_exit>
  }
   154c4:	bf00      	nop
   154c6:	b002      	add	sp, #8
   154c8:	bd10      	pop	{r4, pc}
   154ca:	bf00      	nop
   154cc:	00015499 	.word	0x00015499
   154d0:	100004f4 	.word	0x100004f4

000154d4 <putchar>:

  // Overload default libnano putchar() with a more optimal version that does
  // not use dynamic memory
  int putchar(int character)  // NOLINT
  {
   154d4:	b530      	push	{r4, r5, lr}
   154d6:	b083      	sub	sp, #12
   154d8:	4674      	mov	r4, lr
   154da:	9001      	str	r0, [sp, #4]
   154dc:	4623      	mov	r3, r4
   154de:	4619      	mov	r1, r3
   154e0:	4808      	ldr	r0, [pc, #32]	; (15504 <putchar+0x30>)
   154e2:	f000 f843 	bl	1556c <__cyg_profile_func_enter>
    return out(character);
   154e6:	4b08      	ldr	r3, [pc, #32]	; (15508 <putchar+0x34>)
   154e8:	681b      	ldr	r3, [r3, #0]
   154ea:	9801      	ldr	r0, [sp, #4]
   154ec:	4798      	blx	r3
   154ee:	4605      	mov	r5, r0
   154f0:	4623      	mov	r3, r4
   154f2:	4619      	mov	r1, r3
   154f4:	4803      	ldr	r0, [pc, #12]	; (15504 <putchar+0x30>)
   154f6:	f000 f84d 	bl	15594 <__cyg_profile_func_exit>
   154fa:	462b      	mov	r3, r5
  }
   154fc:	4618      	mov	r0, r3
   154fe:	b003      	add	sp, #12
   15500:	bd30      	pop	{r4, r5, pc}
   15502:	bf00      	nop
   15504:	000154d5 	.word	0x000154d5
   15508:	100004f4 	.word	0x100004f4

0001550c <puts>:

  // Overload default libnano puts() with a more optimal version that does
  // not use dynamic memory
  int puts(const char * str)  // NOLINT
  {
   1550c:	b530      	push	{r4, r5, lr}
   1550e:	b085      	sub	sp, #20
   15510:	4675      	mov	r5, lr
   15512:	9001      	str	r0, [sp, #4]
   15514:	462b      	mov	r3, r5
   15516:	4619      	mov	r1, r3
   15518:	4812      	ldr	r0, [pc, #72]	; (15564 <puts+0x58>)
   1551a:	f000 f827 	bl	1556c <__cyg_profile_func_enter>
    int i;
    for (i = 0; str[i] != '\0'; i++)
   1551e:	2300      	movs	r3, #0
   15520:	9303      	str	r3, [sp, #12]
   15522:	9b03      	ldr	r3, [sp, #12]
   15524:	9a01      	ldr	r2, [sp, #4]
   15526:	4413      	add	r3, r2
   15528:	781b      	ldrb	r3, [r3, #0]
   1552a:	2b00      	cmp	r3, #0
   1552c:	d00b      	beq.n	15546 <puts+0x3a>
    {
      out(str[i]);
   1552e:	4b0e      	ldr	r3, [pc, #56]	; (15568 <puts+0x5c>)
   15530:	681b      	ldr	r3, [r3, #0]
   15532:	9a03      	ldr	r2, [sp, #12]
   15534:	9901      	ldr	r1, [sp, #4]
   15536:	440a      	add	r2, r1
   15538:	7812      	ldrb	r2, [r2, #0]
   1553a:	4610      	mov	r0, r2
   1553c:	4798      	blx	r3
    for (i = 0; str[i] != '\0'; i++)
   1553e:	9b03      	ldr	r3, [sp, #12]
   15540:	3301      	adds	r3, #1
   15542:	9303      	str	r3, [sp, #12]
   15544:	e7ed      	b.n	15522 <puts+0x16>
    }
    out('\n');
   15546:	4b08      	ldr	r3, [pc, #32]	; (15568 <puts+0x5c>)
   15548:	681b      	ldr	r3, [r3, #0]
   1554a:	200a      	movs	r0, #10
   1554c:	4798      	blx	r3
    return i;
   1554e:	9c03      	ldr	r4, [sp, #12]
   15550:	462b      	mov	r3, r5
   15552:	4619      	mov	r1, r3
   15554:	4803      	ldr	r0, [pc, #12]	; (15564 <puts+0x58>)
   15556:	f000 f81d 	bl	15594 <__cyg_profile_func_exit>
   1555a:	4623      	mov	r3, r4
  }
   1555c:	4618      	mov	r0, r3
   1555e:	b005      	add	sp, #20
   15560:	bd30      	pop	{r4, r5, pc}
   15562:	bf00      	nop
   15564:	0001550d 	.word	0x0001550d
   15568:	100004f4 	.word	0x100004f4

0001556c <__cyg_profile_func_enter>:
  // =============================
  void * stack_trace[config::kBacktraceDepth] = { nullptr };
  size_t stack_depth = 0;

  void __cyg_profile_func_enter(void *, void * call_site)  // NOLINT
  {
   1556c:	b082      	sub	sp, #8
   1556e:	9001      	str	r0, [sp, #4]
   15570:	9100      	str	r1, [sp, #0]
    stack_trace[stack_depth++] = call_site;
   15572:	9a00      	ldr	r2, [sp, #0]
   15574:	4b05      	ldr	r3, [pc, #20]	; (1558c <__cyg_profile_func_enter+0x20>)
   15576:	681b      	ldr	r3, [r3, #0]
   15578:	1c59      	adds	r1, r3, #1
   1557a:	4804      	ldr	r0, [pc, #16]	; (1558c <__cyg_profile_func_enter+0x20>)
   1557c:	6001      	str	r1, [r0, #0]
   1557e:	4904      	ldr	r1, [pc, #16]	; (15590 <__cyg_profile_func_enter+0x24>)
   15580:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
   15584:	bf00      	nop
   15586:	b002      	add	sp, #8
   15588:	4770      	bx	lr
   1558a:	bf00      	nop
   1558c:	10000fc8 	.word	0x10000fc8
   15590:	10000ec8 	.word	0x10000ec8

00015594 <__cyg_profile_func_exit>:

  void __cyg_profile_func_exit(void *, void *)  // NOLINT
  {
   15594:	b082      	sub	sp, #8
   15596:	9001      	str	r0, [sp, #4]
   15598:	9100      	str	r1, [sp, #0]
    stack_depth--;
   1559a:	4b04      	ldr	r3, [pc, #16]	; (155ac <__cyg_profile_func_exit+0x18>)
   1559c:	681b      	ldr	r3, [r3, #0]
   1559e:	3b01      	subs	r3, #1
   155a0:	4a02      	ldr	r2, [pc, #8]	; (155ac <__cyg_profile_func_exit+0x18>)
   155a2:	6013      	str	r3, [r2, #0]
  }
   155a4:	bf00      	nop
   155a6:	b002      	add	sp, #8
   155a8:	4770      	bx	lr
   155aa:	bf00      	nop
   155ac:	10000fc8 	.word	0x10000fc8

000155b0 <GetStackTrace()>:
}

void ** GetStackTrace()
{
   155b0:	b538      	push	{r3, r4, r5, lr}
   155b2:	4675      	mov	r5, lr
   155b4:	462b      	mov	r3, r5
   155b6:	4619      	mov	r1, r3
   155b8:	4805      	ldr	r0, [pc, #20]	; (155d0 <GetStackTrace()+0x20>)
   155ba:	f7ff ffd7 	bl	1556c <__cyg_profile_func_enter>
  return stack_trace;
   155be:	4c05      	ldr	r4, [pc, #20]	; (155d4 <GetStackTrace()+0x24>)
   155c0:	462b      	mov	r3, r5
   155c2:	4619      	mov	r1, r3
   155c4:	4802      	ldr	r0, [pc, #8]	; (155d0 <GetStackTrace()+0x20>)
   155c6:	f7ff ffe5 	bl	15594 <__cyg_profile_func_exit>
   155ca:	4623      	mov	r3, r4
}
   155cc:	4618      	mov	r0, r3
   155ce:	bd38      	pop	{r3, r4, r5, pc}
   155d0:	000155b1 	.word	0x000155b1
   155d4:	10000ec8 	.word	0x10000ec8

000155d8 <GetStackDepth()>:

size_t GetStackDepth()
{
   155d8:	b538      	push	{r3, r4, r5, lr}
   155da:	4675      	mov	r5, lr
   155dc:	462b      	mov	r3, r5
   155de:	4619      	mov	r1, r3
   155e0:	4806      	ldr	r0, [pc, #24]	; (155fc <GetStackDepth()+0x24>)
   155e2:	f7ff ffc3 	bl	1556c <__cyg_profile_func_enter>
  return stack_depth;
   155e6:	4b06      	ldr	r3, [pc, #24]	; (15600 <GetStackDepth()+0x28>)
   155e8:	681c      	ldr	r4, [r3, #0]
   155ea:	462b      	mov	r3, r5
   155ec:	4619      	mov	r1, r3
   155ee:	4803      	ldr	r0, [pc, #12]	; (155fc <GetStackDepth()+0x24>)
   155f0:	f7ff ffd0 	bl	15594 <__cyg_profile_func_exit>
   155f4:	4623      	mov	r3, r4
}
   155f6:	4618      	mov	r0, r3
   155f8:	bd38      	pop	{r3, r4, r5, pc}
   155fa:	bf00      	nop
   155fc:	000155d9 	.word	0x000155d9
   15600:	10000fc8 	.word	0x10000fc8

00015604 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
   15604:	b510      	push	{r4, lr}
   15606:	b084      	sub	sp, #16
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
   15608:	4b29      	ldr	r3, [pc, #164]	; (156b0 <vTaskSwitchContext+0xac>)
   1560a:	681b      	ldr	r3, [r3, #0]
   1560c:	2b00      	cmp	r3, #0
   1560e:	d003      	beq.n	15618 <vTaskSwitchContext+0x14>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
   15610:	4b28      	ldr	r3, [pc, #160]	; (156b4 <vTaskSwitchContext+0xb0>)
   15612:	2201      	movs	r2, #1
   15614:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
   15616:	e047      	b.n	156a8 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
   15618:	4b26      	ldr	r3, [pc, #152]	; (156b4 <vTaskSwitchContext+0xb0>)
   1561a:	2200      	movs	r2, #0
   1561c:	601a      	str	r2, [r3, #0]
					ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
   1561e:	f7ff fa8d 	bl	14b3c <UptimeRTOS>
   15622:	4603      	mov	r3, r0
   15624:	460c      	mov	r4, r1
   15626:	461a      	mov	r2, r3
   15628:	4b23      	ldr	r3, [pc, #140]	; (156b8 <vTaskSwitchContext+0xb4>)
   1562a:	601a      	str	r2, [r3, #0]
				if( ulTotalRunTime > ulTaskSwitchedInTime )
   1562c:	4b22      	ldr	r3, [pc, #136]	; (156b8 <vTaskSwitchContext+0xb4>)
   1562e:	681a      	ldr	r2, [r3, #0]
   15630:	4b22      	ldr	r3, [pc, #136]	; (156bc <vTaskSwitchContext+0xb8>)
   15632:	681b      	ldr	r3, [r3, #0]
   15634:	429a      	cmp	r2, r3
   15636:	d909      	bls.n	1564c <vTaskSwitchContext+0x48>
					pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
   15638:	4b21      	ldr	r3, [pc, #132]	; (156c0 <vTaskSwitchContext+0xbc>)
   1563a:	681b      	ldr	r3, [r3, #0]
   1563c:	6d59      	ldr	r1, [r3, #84]	; 0x54
   1563e:	4a1e      	ldr	r2, [pc, #120]	; (156b8 <vTaskSwitchContext+0xb4>)
   15640:	6810      	ldr	r0, [r2, #0]
   15642:	4a1e      	ldr	r2, [pc, #120]	; (156bc <vTaskSwitchContext+0xb8>)
   15644:	6812      	ldr	r2, [r2, #0]
   15646:	1a82      	subs	r2, r0, r2
   15648:	440a      	add	r2, r1
   1564a:	655a      	str	r2, [r3, #84]	; 0x54
				ulTaskSwitchedInTime = ulTotalRunTime;
   1564c:	4b1a      	ldr	r3, [pc, #104]	; (156b8 <vTaskSwitchContext+0xb4>)
   1564e:	681b      	ldr	r3, [r3, #0]
   15650:	4a1a      	ldr	r2, [pc, #104]	; (156bc <vTaskSwitchContext+0xb8>)
   15652:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
   15654:	4b1b      	ldr	r3, [pc, #108]	; (156c4 <vTaskSwitchContext+0xc0>)
   15656:	681b      	ldr	r3, [r3, #0]
   15658:	9301      	str	r3, [sp, #4]
	/* Generic helper function. */
	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitmap )
	{
	uint8_t ucReturn;

		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
   1565a:	9b01      	ldr	r3, [sp, #4]
   1565c:	fab3 f383 	clz	r3, r3
   15660:	f88d 3003 	strb.w	r3, [sp, #3]
		return ucReturn;
   15664:	f89d 3003 	ldrb.w	r3, [sp, #3]
   15668:	f1c3 031f 	rsb	r3, r3, #31
   1566c:	9303      	str	r3, [sp, #12]
   1566e:	9a03      	ldr	r2, [sp, #12]
   15670:	4613      	mov	r3, r2
   15672:	009b      	lsls	r3, r3, #2
   15674:	4413      	add	r3, r2
   15676:	009b      	lsls	r3, r3, #2
   15678:	4a13      	ldr	r2, [pc, #76]	; (156c8 <vTaskSwitchContext+0xc4>)
   1567a:	4413      	add	r3, r2
   1567c:	9302      	str	r3, [sp, #8]
   1567e:	9b02      	ldr	r3, [sp, #8]
   15680:	685b      	ldr	r3, [r3, #4]
   15682:	685a      	ldr	r2, [r3, #4]
   15684:	9b02      	ldr	r3, [sp, #8]
   15686:	605a      	str	r2, [r3, #4]
   15688:	9b02      	ldr	r3, [sp, #8]
   1568a:	685a      	ldr	r2, [r3, #4]
   1568c:	9b02      	ldr	r3, [sp, #8]
   1568e:	3308      	adds	r3, #8
   15690:	429a      	cmp	r2, r3
   15692:	d104      	bne.n	1569e <vTaskSwitchContext+0x9a>
   15694:	9b02      	ldr	r3, [sp, #8]
   15696:	685b      	ldr	r3, [r3, #4]
   15698:	685a      	ldr	r2, [r3, #4]
   1569a:	9b02      	ldr	r3, [sp, #8]
   1569c:	605a      	str	r2, [r3, #4]
   1569e:	9b02      	ldr	r3, [sp, #8]
   156a0:	685b      	ldr	r3, [r3, #4]
   156a2:	68db      	ldr	r3, [r3, #12]
   156a4:	4a06      	ldr	r2, [pc, #24]	; (156c0 <vTaskSwitchContext+0xbc>)
   156a6:	6013      	str	r3, [r2, #0]
}
   156a8:	bf00      	nop
   156aa:	b004      	add	sp, #16
   156ac:	bd10      	pop	{r4, pc}
   156ae:	bf00      	nop
   156b0:	1000103c 	.word	0x1000103c
   156b4:	10001038 	.word	0x10001038
   156b8:	10001044 	.word	0x10001044
   156bc:	10001040 	.word	0x10001040
   156c0:	10000fcc 	.word	0x10000fcc
   156c4:	10001034 	.word	0x10001034
   156c8:	10000fd0 	.word	0x10000fd0
   156cc:	ffffffff 	.word	0xffffffff

000156d0 <vPortSVCHandler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
   156d0:	4b07      	ldr	r3, [pc, #28]	; (156f0 <pxCurrentTCBConst2>)
   156d2:	6819      	ldr	r1, [r3, #0]
   156d4:	6808      	ldr	r0, [r1, #0]
   156d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   156da:	f380 8809 	msr	PSP, r0
   156de:	f3bf 8f6f 	isb	sy
   156e2:	f04f 0000 	mov.w	r0, #0
   156e6:	f380 8811 	msr	BASEPRI, r0
   156ea:	4770      	bx	lr
   156ec:	f3af 8000 	nop.w

000156f0 <pxCurrentTCBConst2>:
   156f0:	10000fcc 	.word	0x10000fcc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
   156f4:	bf00      	nop
   156f6:	bf00      	nop
   156f8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   156fc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

00015700 <xPortPendSVHandler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
   15700:	f3ef 8009 	mrs	r0, PSP
   15704:	f3bf 8f6f 	isb	sy
   15708:	4b15      	ldr	r3, [pc, #84]	; (15760 <pxCurrentTCBConst>)
   1570a:	681a      	ldr	r2, [r3, #0]
   1570c:	f01e 0f10 	tst.w	lr, #16
   15710:	bf08      	it	eq
   15712:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
   15716:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1571a:	6010      	str	r0, [r2, #0]
   1571c:	e92d 0009 	stmdb	sp!, {r0, r3}
   15720:	f04f 0028 	mov.w	r0, #40	; 0x28
   15724:	f380 8811 	msr	BASEPRI, r0
   15728:	f3bf 8f4f 	dsb	sy
   1572c:	f3bf 8f6f 	isb	sy
   15730:	f7ff ff68 	bl	15604 <vTaskSwitchContext>
   15734:	f04f 0000 	mov.w	r0, #0
   15738:	f380 8811 	msr	BASEPRI, r0
   1573c:	bc09      	pop	{r0, r3}
   1573e:	6819      	ldr	r1, [r3, #0]
   15740:	6808      	ldr	r0, [r1, #0]
   15742:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15746:	f01e 0f10 	tst.w	lr, #16
   1574a:	bf08      	it	eq
   1574c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
   15750:	f380 8809 	msr	PSP, r0
   15754:	f3bf 8f6f 	isb	sy
   15758:	4770      	bx	lr
   1575a:	bf00      	nop
   1575c:	f3af 8000 	nop.w

00015760 <pxCurrentTCBConst>:
   15760:	10000fcc 	.word	0x10000fcc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
   15764:	bf00      	nop
   15766:	bf00      	nop

00015768 <_out_null(char, void*, unsigned int, unsigned int)>:
}


// internal null output
static inline void _out_null(char character, void* buffer, size_t idx, size_t maxlen)
{
   15768:	b510      	push	{r4, lr}
   1576a:	b084      	sub	sp, #16
   1576c:	4674      	mov	r4, lr
   1576e:	9102      	str	r1, [sp, #8]
   15770:	9201      	str	r2, [sp, #4]
   15772:	9300      	str	r3, [sp, #0]
   15774:	4603      	mov	r3, r0
   15776:	f88d 300f 	strb.w	r3, [sp, #15]
   1577a:	4623      	mov	r3, r4
   1577c:	4619      	mov	r1, r3
   1577e:	4805      	ldr	r0, [pc, #20]	; (15794 <_out_null(char, void*, unsigned int, unsigned int)+0x2c>)
   15780:	f7ff fef4 	bl	1556c <__cyg_profile_func_enter>
   15784:	4623      	mov	r3, r4
   15786:	4619      	mov	r1, r3
   15788:	4802      	ldr	r0, [pc, #8]	; (15794 <_out_null(char, void*, unsigned int, unsigned int)+0x2c>)
   1578a:	f7ff ff03 	bl	15594 <__cyg_profile_func_exit>
  (void)character; (void)buffer; (void)idx; (void)maxlen;
}
   1578e:	bf00      	nop
   15790:	b004      	add	sp, #16
   15792:	bd10      	pop	{r4, pc}
   15794:	00015769 	.word	0x00015769

00015798 <_out_char(char, void*, unsigned int, unsigned int)>:


// internal _putchar wrapper
static inline void _out_char(char character, void* buffer, size_t idx, size_t maxlen)
{
   15798:	b510      	push	{r4, lr}
   1579a:	b084      	sub	sp, #16
   1579c:	4674      	mov	r4, lr
   1579e:	9102      	str	r1, [sp, #8]
   157a0:	9201      	str	r2, [sp, #4]
   157a2:	9300      	str	r3, [sp, #0]
   157a4:	4603      	mov	r3, r0
   157a6:	f88d 300f 	strb.w	r3, [sp, #15]
   157aa:	4623      	mov	r3, r4
   157ac:	4619      	mov	r1, r3
   157ae:	480a      	ldr	r0, [pc, #40]	; (157d8 <_out_char(char, void*, unsigned int, unsigned int)+0x40>)
   157b0:	f7ff fedc 	bl	1556c <__cyg_profile_func_enter>
  (void)buffer; (void)idx; (void)maxlen;
  if (character) {
   157b4:	f89d 300f 	ldrb.w	r3, [sp, #15]
   157b8:	2b00      	cmp	r3, #0
   157ba:	d004      	beq.n	157c6 <_out_char(char, void*, unsigned int, unsigned int)+0x2e>
    _putchar(character);
   157bc:	f89d 300f 	ldrb.w	r3, [sp, #15]
   157c0:	4618      	mov	r0, r3
   157c2:	f7ff fe69 	bl	15498 <_putchar>
   157c6:	4623      	mov	r3, r4
   157c8:	4619      	mov	r1, r3
   157ca:	4803      	ldr	r0, [pc, #12]	; (157d8 <_out_char(char, void*, unsigned int, unsigned int)+0x40>)
   157cc:	f7ff fee2 	bl	15594 <__cyg_profile_func_exit>
  }
}
   157d0:	bf00      	nop
   157d2:	b004      	add	sp, #16
   157d4:	bd10      	pop	{r4, pc}
   157d6:	bf00      	nop
   157d8:	00015799 	.word	0x00015799

000157dc <_strlen(char const*)>:


// internal strlen
// \return The length of the string (excluding the terminating 0)
static inline unsigned int _strlen(const char* str)
{
   157dc:	b530      	push	{r4, r5, lr}
   157de:	b085      	sub	sp, #20
   157e0:	4674      	mov	r4, lr
   157e2:	9001      	str	r0, [sp, #4]
   157e4:	4623      	mov	r3, r4
   157e6:	4619      	mov	r1, r3
   157e8:	480c      	ldr	r0, [pc, #48]	; (1581c <_strlen(char const*)+0x40>)
   157ea:	f7ff febf 	bl	1556c <__cyg_profile_func_enter>
  const char* s;
  for (s = str; *s; ++s);
   157ee:	9b01      	ldr	r3, [sp, #4]
   157f0:	9303      	str	r3, [sp, #12]
   157f2:	9b03      	ldr	r3, [sp, #12]
   157f4:	781b      	ldrb	r3, [r3, #0]
   157f6:	2b00      	cmp	r3, #0
   157f8:	d003      	beq.n	15802 <_strlen(char const*)+0x26>
   157fa:	9b03      	ldr	r3, [sp, #12]
   157fc:	3301      	adds	r3, #1
   157fe:	9303      	str	r3, [sp, #12]
   15800:	e7f7      	b.n	157f2 <_strlen(char const*)+0x16>
  return (unsigned int)(s - str);
   15802:	9a03      	ldr	r2, [sp, #12]
   15804:	9b01      	ldr	r3, [sp, #4]
   15806:	1ad3      	subs	r3, r2, r3
   15808:	461d      	mov	r5, r3
   1580a:	4623      	mov	r3, r4
   1580c:	4619      	mov	r1, r3
   1580e:	4803      	ldr	r0, [pc, #12]	; (1581c <_strlen(char const*)+0x40>)
   15810:	f7ff fec0 	bl	15594 <__cyg_profile_func_exit>
   15814:	462b      	mov	r3, r5
}
   15816:	4618      	mov	r0, r3
   15818:	b005      	add	sp, #20
   1581a:	bd30      	pop	{r4, r5, pc}
   1581c:	000157dd 	.word	0x000157dd

00015820 <_is_digit(char)>:


// internal test if char is a digit (0-9)
// \return true if char is a digit
static inline bool _is_digit(char ch)
{
   15820:	b530      	push	{r4, r5, lr}
   15822:	b083      	sub	sp, #12
   15824:	4675      	mov	r5, lr
   15826:	4603      	mov	r3, r0
   15828:	f88d 3007 	strb.w	r3, [sp, #7]
   1582c:	462b      	mov	r3, r5
   1582e:	4619      	mov	r1, r3
   15830:	480b      	ldr	r0, [pc, #44]	; (15860 <_is_digit(char)+0x40>)
   15832:	f7ff fe9b 	bl	1556c <__cyg_profile_func_enter>
  return (ch >= '0') && (ch <= '9');
   15836:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1583a:	2b2f      	cmp	r3, #47	; 0x2f
   1583c:	d905      	bls.n	1584a <_is_digit(char)+0x2a>
   1583e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   15842:	2b39      	cmp	r3, #57	; 0x39
   15844:	d801      	bhi.n	1584a <_is_digit(char)+0x2a>
   15846:	2401      	movs	r4, #1
   15848:	e000      	b.n	1584c <_is_digit(char)+0x2c>
   1584a:	2400      	movs	r4, #0
   1584c:	462b      	mov	r3, r5
   1584e:	4619      	mov	r1, r3
   15850:	4803      	ldr	r0, [pc, #12]	; (15860 <_is_digit(char)+0x40>)
   15852:	f7ff fe9f 	bl	15594 <__cyg_profile_func_exit>
   15856:	4623      	mov	r3, r4
}
   15858:	4618      	mov	r0, r3
   1585a:	b003      	add	sp, #12
   1585c:	bd30      	pop	{r4, r5, pc}
   1585e:	bf00      	nop
   15860:	00015821 	.word	0x00015821

00015864 <_atoi(char const**)>:


// internal ASCII string to unsigned int conversion
static unsigned int _atoi(const char** str)
{
   15864:	b530      	push	{r4, r5, lr}
   15866:	b085      	sub	sp, #20
   15868:	4675      	mov	r5, lr
   1586a:	9001      	str	r0, [sp, #4]
   1586c:	462b      	mov	r3, r5
   1586e:	4619      	mov	r1, r3
   15870:	4813      	ldr	r0, [pc, #76]	; (158c0 <_atoi(char const**)+0x5c>)
   15872:	f7ff fe7b 	bl	1556c <__cyg_profile_func_enter>
  unsigned int i = 0U;
   15876:	2300      	movs	r3, #0
   15878:	9303      	str	r3, [sp, #12]
  while (_is_digit(**str)) {
   1587a:	9b01      	ldr	r3, [sp, #4]
   1587c:	681b      	ldr	r3, [r3, #0]
   1587e:	781b      	ldrb	r3, [r3, #0]
   15880:	4618      	mov	r0, r3
   15882:	f7ff ffcd 	bl	15820 <_is_digit(char)>
   15886:	4603      	mov	r3, r0
   15888:	2b00      	cmp	r3, #0
   1588a:	d00f      	beq.n	158ac <_atoi(char const**)+0x48>
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
   1588c:	9a03      	ldr	r2, [sp, #12]
   1588e:	4613      	mov	r3, r2
   15890:	009b      	lsls	r3, r3, #2
   15892:	4413      	add	r3, r2
   15894:	005b      	lsls	r3, r3, #1
   15896:	4618      	mov	r0, r3
   15898:	9b01      	ldr	r3, [sp, #4]
   1589a:	681b      	ldr	r3, [r3, #0]
   1589c:	1c59      	adds	r1, r3, #1
   1589e:	9a01      	ldr	r2, [sp, #4]
   158a0:	6011      	str	r1, [r2, #0]
   158a2:	781b      	ldrb	r3, [r3, #0]
   158a4:	4403      	add	r3, r0
   158a6:	3b30      	subs	r3, #48	; 0x30
   158a8:	9303      	str	r3, [sp, #12]
  while (_is_digit(**str)) {
   158aa:	e7e6      	b.n	1587a <_atoi(char const**)+0x16>
  }
  return i;
   158ac:	9c03      	ldr	r4, [sp, #12]
   158ae:	462b      	mov	r3, r5
   158b0:	4619      	mov	r1, r3
   158b2:	4803      	ldr	r0, [pc, #12]	; (158c0 <_atoi(char const**)+0x5c>)
   158b4:	f7ff fe6e 	bl	15594 <__cyg_profile_func_exit>
   158b8:	4623      	mov	r3, r4
}
   158ba:	4618      	mov	r0, r3
   158bc:	b005      	add	sp, #20
   158be:	bd30      	pop	{r4, r5, pc}
   158c0:	00015865 	.word	0x00015865

000158c4 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)>:


// internal itoa format
static size_t _ntoa_format(out_fct_type out, char* buffer, size_t idx, size_t maxlen, char* buf, size_t len, bool negative, unsigned int base, unsigned int prec, unsigned int width, unsigned int flags)
{
   158c4:	b530      	push	{r4, r5, lr}
   158c6:	b089      	sub	sp, #36	; 0x24
   158c8:	4675      	mov	r5, lr
   158ca:	9003      	str	r0, [sp, #12]
   158cc:	9102      	str	r1, [sp, #8]
   158ce:	9201      	str	r2, [sp, #4]
   158d0:	9300      	str	r3, [sp, #0]
   158d2:	462b      	mov	r3, r5
   158d4:	4619      	mov	r1, r3
   158d6:	4891      	ldr	r0, [pc, #580]	; (15b1c <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x258>)
   158d8:	f7ff fe48 	bl	1556c <__cyg_profile_func_enter>
  const size_t start_idx = idx;
   158dc:	9b01      	ldr	r3, [sp, #4]
   158de:	9305      	str	r3, [sp, #20]

  // pad leading zeros
  while (!(flags & FLAGS_LEFT) && (len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
   158e0:	9b12      	ldr	r3, [sp, #72]	; 0x48
   158e2:	f003 0302 	and.w	r3, r3, #2
   158e6:	2b00      	cmp	r3, #0
   158e8:	d10e      	bne.n	15908 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x44>
   158ea:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   158ec:	9b10      	ldr	r3, [sp, #64]	; 0x40
   158ee:	429a      	cmp	r2, r3
   158f0:	d20a      	bcs.n	15908 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x44>
   158f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   158f4:	2b1f      	cmp	r3, #31
   158f6:	d807      	bhi.n	15908 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x44>
    buf[len++] = '0';
   158f8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   158fa:	1c5a      	adds	r2, r3, #1
   158fc:	920d      	str	r2, [sp, #52]	; 0x34
   158fe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   15900:	4413      	add	r3, r2
   15902:	2230      	movs	r2, #48	; 0x30
   15904:	701a      	strb	r2, [r3, #0]
  while (!(flags & FLAGS_LEFT) && (len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
   15906:	e7eb      	b.n	158e0 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1c>
  }
  while (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
   15908:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1590a:	f003 0302 	and.w	r3, r3, #2
   1590e:	2b00      	cmp	r3, #0
   15910:	d113      	bne.n	1593a <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x76>
   15912:	9b12      	ldr	r3, [sp, #72]	; 0x48
   15914:	f003 0301 	and.w	r3, r3, #1
   15918:	2b00      	cmp	r3, #0
   1591a:	d00e      	beq.n	1593a <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x76>
   1591c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   1591e:	9b11      	ldr	r3, [sp, #68]	; 0x44
   15920:	429a      	cmp	r2, r3
   15922:	d20a      	bcs.n	1593a <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x76>
   15924:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   15926:	2b1f      	cmp	r3, #31
   15928:	d807      	bhi.n	1593a <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x76>
    buf[len++] = '0';
   1592a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1592c:	1c5a      	adds	r2, r3, #1
   1592e:	920d      	str	r2, [sp, #52]	; 0x34
   15930:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   15932:	4413      	add	r3, r2
   15934:	2230      	movs	r2, #48	; 0x30
   15936:	701a      	strb	r2, [r3, #0]
  while (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
   15938:	e7e6      	b.n	15908 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x44>
  }

  // handle hash
  if (flags & FLAGS_HASH) {
   1593a:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1593c:	f003 0310 	and.w	r3, r3, #16
   15940:	2b00      	cmp	r3, #0
   15942:	d058      	beq.n	159f6 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x132>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
   15944:	9b12      	ldr	r3, [sp, #72]	; 0x48
   15946:	f403 6380 	and.w	r3, r3, #1024	; 0x400
   1594a:	2b00      	cmp	r3, #0
   1594c:	d116      	bne.n	1597c <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xb8>
   1594e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   15950:	2b00      	cmp	r3, #0
   15952:	d013      	beq.n	1597c <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xb8>
   15954:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   15956:	9b10      	ldr	r3, [sp, #64]	; 0x40
   15958:	429a      	cmp	r2, r3
   1595a:	d003      	beq.n	15964 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xa0>
   1595c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   1595e:	9b11      	ldr	r3, [sp, #68]	; 0x44
   15960:	429a      	cmp	r2, r3
   15962:	d10b      	bne.n	1597c <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xb8>
      len--;
   15964:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   15966:	3b01      	subs	r3, #1
   15968:	930d      	str	r3, [sp, #52]	; 0x34
      if (len && (base == 16U)) {
   1596a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1596c:	2b00      	cmp	r3, #0
   1596e:	d005      	beq.n	1597c <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xb8>
   15970:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   15972:	2b10      	cmp	r3, #16
   15974:	d102      	bne.n	1597c <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xb8>
        len--;
   15976:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   15978:	3b01      	subs	r3, #1
   1597a:	930d      	str	r3, [sp, #52]	; 0x34
      }
    }
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
   1597c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1597e:	2b10      	cmp	r3, #16
   15980:	d10f      	bne.n	159a2 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xde>
   15982:	9b12      	ldr	r3, [sp, #72]	; 0x48
   15984:	f003 0320 	and.w	r3, r3, #32
   15988:	2b00      	cmp	r3, #0
   1598a:	d10a      	bne.n	159a2 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xde>
   1598c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1598e:	2b1f      	cmp	r3, #31
   15990:	d807      	bhi.n	159a2 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xde>
      buf[len++] = 'x';
   15992:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   15994:	1c5a      	adds	r2, r3, #1
   15996:	920d      	str	r2, [sp, #52]	; 0x34
   15998:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1599a:	4413      	add	r3, r2
   1599c:	2278      	movs	r2, #120	; 0x78
   1599e:	701a      	strb	r2, [r3, #0]
   159a0:	e01f      	b.n	159e2 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x11e>
    }
    else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
   159a2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   159a4:	2b10      	cmp	r3, #16
   159a6:	d10f      	bne.n	159c8 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x104>
   159a8:	9b12      	ldr	r3, [sp, #72]	; 0x48
   159aa:	f003 0320 	and.w	r3, r3, #32
   159ae:	2b00      	cmp	r3, #0
   159b0:	d00a      	beq.n	159c8 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x104>
   159b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   159b4:	2b1f      	cmp	r3, #31
   159b6:	d807      	bhi.n	159c8 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x104>
      buf[len++] = 'X';
   159b8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   159ba:	1c5a      	adds	r2, r3, #1
   159bc:	920d      	str	r2, [sp, #52]	; 0x34
   159be:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   159c0:	4413      	add	r3, r2
   159c2:	2258      	movs	r2, #88	; 0x58
   159c4:	701a      	strb	r2, [r3, #0]
   159c6:	e00c      	b.n	159e2 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x11e>
    }
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
   159c8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   159ca:	2b02      	cmp	r3, #2
   159cc:	d109      	bne.n	159e2 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x11e>
   159ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   159d0:	2b1f      	cmp	r3, #31
   159d2:	d806      	bhi.n	159e2 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x11e>
      buf[len++] = 'b';
   159d4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   159d6:	1c5a      	adds	r2, r3, #1
   159d8:	920d      	str	r2, [sp, #52]	; 0x34
   159da:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   159dc:	4413      	add	r3, r2
   159de:	2262      	movs	r2, #98	; 0x62
   159e0:	701a      	strb	r2, [r3, #0]
    }
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
   159e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   159e4:	2b1f      	cmp	r3, #31
   159e6:	d806      	bhi.n	159f6 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x132>
      buf[len++] = '0';
   159e8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   159ea:	1c5a      	adds	r2, r3, #1
   159ec:	920d      	str	r2, [sp, #52]	; 0x34
   159ee:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   159f0:	4413      	add	r3, r2
   159f2:	2230      	movs	r2, #48	; 0x30
   159f4:	701a      	strb	r2, [r3, #0]
    }
  }

  // handle sign
  if (len && (len == width) && (negative || (flags & FLAGS_PLUS) || (flags & FLAGS_SPACE))) {
   159f6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   159f8:	2b00      	cmp	r3, #0
   159fa:	d014      	beq.n	15a26 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x162>
   159fc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   159fe:	9b11      	ldr	r3, [sp, #68]	; 0x44
   15a00:	429a      	cmp	r2, r3
   15a02:	d110      	bne.n	15a26 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x162>
   15a04:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
   15a08:	2b00      	cmp	r3, #0
   15a0a:	d109      	bne.n	15a20 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x15c>
   15a0c:	9b12      	ldr	r3, [sp, #72]	; 0x48
   15a0e:	f003 0304 	and.w	r3, r3, #4
   15a12:	2b00      	cmp	r3, #0
   15a14:	d104      	bne.n	15a20 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x15c>
   15a16:	9b12      	ldr	r3, [sp, #72]	; 0x48
   15a18:	f003 0308 	and.w	r3, r3, #8
   15a1c:	2b00      	cmp	r3, #0
   15a1e:	d002      	beq.n	15a26 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x162>
    len--;
   15a20:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   15a22:	3b01      	subs	r3, #1
   15a24:	930d      	str	r3, [sp, #52]	; 0x34
  }
  if (len < PRINTF_NTOA_BUFFER_SIZE) {
   15a26:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   15a28:	2b1f      	cmp	r3, #31
   15a2a:	d824      	bhi.n	15a76 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1b2>
    if (negative) {
   15a2c:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
   15a30:	2b00      	cmp	r3, #0
   15a32:	d007      	beq.n	15a44 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x180>
      buf[len++] = '-';
   15a34:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   15a36:	1c5a      	adds	r2, r3, #1
   15a38:	920d      	str	r2, [sp, #52]	; 0x34
   15a3a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   15a3c:	4413      	add	r3, r2
   15a3e:	222d      	movs	r2, #45	; 0x2d
   15a40:	701a      	strb	r2, [r3, #0]
   15a42:	e018      	b.n	15a76 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1b2>
    }
    else if (flags & FLAGS_PLUS) {
   15a44:	9b12      	ldr	r3, [sp, #72]	; 0x48
   15a46:	f003 0304 	and.w	r3, r3, #4
   15a4a:	2b00      	cmp	r3, #0
   15a4c:	d007      	beq.n	15a5e <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x19a>
      buf[len++] = '+';  // ignore the space if the '+' exists
   15a4e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   15a50:	1c5a      	adds	r2, r3, #1
   15a52:	920d      	str	r2, [sp, #52]	; 0x34
   15a54:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   15a56:	4413      	add	r3, r2
   15a58:	222b      	movs	r2, #43	; 0x2b
   15a5a:	701a      	strb	r2, [r3, #0]
   15a5c:	e00b      	b.n	15a76 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1b2>
    }
    else if (flags & FLAGS_SPACE) {
   15a5e:	9b12      	ldr	r3, [sp, #72]	; 0x48
   15a60:	f003 0308 	and.w	r3, r3, #8
   15a64:	2b00      	cmp	r3, #0
   15a66:	d006      	beq.n	15a76 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1b2>
      buf[len++] = ' ';
   15a68:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   15a6a:	1c5a      	adds	r2, r3, #1
   15a6c:	920d      	str	r2, [sp, #52]	; 0x34
   15a6e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   15a70:	4413      	add	r3, r2
   15a72:	2220      	movs	r2, #32
   15a74:	701a      	strb	r2, [r3, #0]
    }
  }

  // pad spaces up to given width
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
   15a76:	9b12      	ldr	r3, [sp, #72]	; 0x48
   15a78:	f003 0302 	and.w	r3, r3, #2
   15a7c:	2b00      	cmp	r3, #0
   15a7e:	d116      	bne.n	15aae <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1ea>
   15a80:	9b12      	ldr	r3, [sp, #72]	; 0x48
   15a82:	f003 0301 	and.w	r3, r3, #1
   15a86:	2b00      	cmp	r3, #0
   15a88:	d111      	bne.n	15aae <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1ea>
    for (size_t i = len; i < width; i++) {
   15a8a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   15a8c:	9307      	str	r3, [sp, #28]
   15a8e:	9a07      	ldr	r2, [sp, #28]
   15a90:	9b11      	ldr	r3, [sp, #68]	; 0x44
   15a92:	429a      	cmp	r2, r3
   15a94:	d20b      	bcs.n	15aae <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1ea>
      out(' ', buffer, idx++, maxlen);
   15a96:	9a01      	ldr	r2, [sp, #4]
   15a98:	1c53      	adds	r3, r2, #1
   15a9a:	9301      	str	r3, [sp, #4]
   15a9c:	9c03      	ldr	r4, [sp, #12]
   15a9e:	9b00      	ldr	r3, [sp, #0]
   15aa0:	9902      	ldr	r1, [sp, #8]
   15aa2:	2020      	movs	r0, #32
   15aa4:	47a0      	blx	r4
    for (size_t i = len; i < width; i++) {
   15aa6:	9b07      	ldr	r3, [sp, #28]
   15aa8:	3301      	adds	r3, #1
   15aaa:	9307      	str	r3, [sp, #28]
   15aac:	e7ef      	b.n	15a8e <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1ca>
    }
  }

  // reverse string
  for (size_t i = 0U; i < len; i++) {
   15aae:	2300      	movs	r3, #0
   15ab0:	9306      	str	r3, [sp, #24]
   15ab2:	9a06      	ldr	r2, [sp, #24]
   15ab4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   15ab6:	429a      	cmp	r2, r3
   15ab8:	d211      	bcs.n	15ade <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x21a>
    out(buf[len - i - 1U], buffer, idx++, maxlen);
   15aba:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   15abc:	9b06      	ldr	r3, [sp, #24]
   15abe:	1ad3      	subs	r3, r2, r3
   15ac0:	3b01      	subs	r3, #1
   15ac2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   15ac4:	4413      	add	r3, r2
   15ac6:	7818      	ldrb	r0, [r3, #0]
   15ac8:	9a01      	ldr	r2, [sp, #4]
   15aca:	1c53      	adds	r3, r2, #1
   15acc:	9301      	str	r3, [sp, #4]
   15ace:	9c03      	ldr	r4, [sp, #12]
   15ad0:	9b00      	ldr	r3, [sp, #0]
   15ad2:	9902      	ldr	r1, [sp, #8]
   15ad4:	47a0      	blx	r4
  for (size_t i = 0U; i < len; i++) {
   15ad6:	9b06      	ldr	r3, [sp, #24]
   15ad8:	3301      	adds	r3, #1
   15ada:	9306      	str	r3, [sp, #24]
   15adc:	e7e9      	b.n	15ab2 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1ee>
  }

  // append pad spaces up to given width
  if (flags & FLAGS_LEFT) {
   15ade:	9b12      	ldr	r3, [sp, #72]	; 0x48
   15ae0:	f003 0302 	and.w	r3, r3, #2
   15ae4:	2b00      	cmp	r3, #0
   15ae6:	d00e      	beq.n	15b06 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x242>
    while (idx - start_idx < width) {
   15ae8:	9a01      	ldr	r2, [sp, #4]
   15aea:	9b05      	ldr	r3, [sp, #20]
   15aec:	1ad3      	subs	r3, r2, r3
   15aee:	9a11      	ldr	r2, [sp, #68]	; 0x44
   15af0:	429a      	cmp	r2, r3
   15af2:	d908      	bls.n	15b06 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x242>
      out(' ', buffer, idx++, maxlen);
   15af4:	9a01      	ldr	r2, [sp, #4]
   15af6:	1c53      	adds	r3, r2, #1
   15af8:	9301      	str	r3, [sp, #4]
   15afa:	9c03      	ldr	r4, [sp, #12]
   15afc:	9b00      	ldr	r3, [sp, #0]
   15afe:	9902      	ldr	r1, [sp, #8]
   15b00:	2020      	movs	r0, #32
   15b02:	47a0      	blx	r4
    while (idx - start_idx < width) {
   15b04:	e7f0      	b.n	15ae8 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x224>
    }
  }

  return idx;
   15b06:	9c01      	ldr	r4, [sp, #4]
   15b08:	462b      	mov	r3, r5
   15b0a:	4619      	mov	r1, r3
   15b0c:	4803      	ldr	r0, [pc, #12]	; (15b1c <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x258>)
   15b0e:	f7ff fd41 	bl	15594 <__cyg_profile_func_exit>
   15b12:	4623      	mov	r3, r4
}
   15b14:	4618      	mov	r0, r3
   15b16:	b009      	add	sp, #36	; 0x24
   15b18:	bd30      	pop	{r4, r5, pc}
   15b1a:	bf00      	nop
   15b1c:	000158c5 	.word	0x000158c5

00015b20 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)>:


// internal itoa for 'long' type
static size_t _ntoa_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long value, bool negative, unsigned long base, unsigned int prec, unsigned int width, unsigned int flags)
{
   15b20:	b530      	push	{r4, r5, lr}
   15b22:	b097      	sub	sp, #92	; 0x5c
   15b24:	4674      	mov	r4, lr
   15b26:	900b      	str	r0, [sp, #44]	; 0x2c
   15b28:	910a      	str	r1, [sp, #40]	; 0x28
   15b2a:	9209      	str	r2, [sp, #36]	; 0x24
   15b2c:	9308      	str	r3, [sp, #32]
   15b2e:	4623      	mov	r3, r4
   15b30:	4619      	mov	r1, r3
   15b32:	4833      	ldr	r0, [pc, #204]	; (15c00 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0xe0>)
   15b34:	f7ff fd1a 	bl	1556c <__cyg_profile_func_enter>
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
   15b38:	2300      	movs	r3, #0
   15b3a:	9315      	str	r3, [sp, #84]	; 0x54

  // no hash for 0 values
  if (!value) {
   15b3c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   15b3e:	2b00      	cmp	r3, #0
   15b40:	d103      	bne.n	15b4a <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x2a>
    flags &= ~FLAGS_HASH;
   15b42:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   15b44:	f023 0310 	bic.w	r3, r3, #16
   15b48:	931f      	str	r3, [sp, #124]	; 0x7c
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
   15b4a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   15b4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
   15b50:	2b00      	cmp	r3, #0
   15b52:	d002      	beq.n	15b5a <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x3a>
   15b54:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   15b56:	2b00      	cmp	r3, #0
   15b58:	d033      	beq.n	15bc2 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0xa2>
    do {
      const char digit = (char)(value % base);
   15b5a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   15b5c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
   15b5e:	fbb3 f2f2 	udiv	r2, r3, r2
   15b62:	991c      	ldr	r1, [sp, #112]	; 0x70
   15b64:	fb01 f202 	mul.w	r2, r1, r2
   15b68:	1a9b      	subs	r3, r3, r2
   15b6a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
   15b6e:	f89d 3053 	ldrb.w	r3, [sp, #83]	; 0x53
   15b72:	2b09      	cmp	r3, #9
   15b74:	d804      	bhi.n	15b80 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x60>
   15b76:	f89d 3053 	ldrb.w	r3, [sp, #83]	; 0x53
   15b7a:	3330      	adds	r3, #48	; 0x30
   15b7c:	b2da      	uxtb	r2, r3
   15b7e:	e00d      	b.n	15b9c <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x7c>
   15b80:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   15b82:	f003 0320 	and.w	r3, r3, #32
   15b86:	2b00      	cmp	r3, #0
   15b88:	d001      	beq.n	15b8e <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x6e>
   15b8a:	2241      	movs	r2, #65	; 0x41
   15b8c:	e000      	b.n	15b90 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x70>
   15b8e:	2261      	movs	r2, #97	; 0x61
   15b90:	f89d 3053 	ldrb.w	r3, [sp, #83]	; 0x53
   15b94:	4413      	add	r3, r2
   15b96:	b2db      	uxtb	r3, r3
   15b98:	3b0a      	subs	r3, #10
   15b9a:	b2da      	uxtb	r2, r3
   15b9c:	9b15      	ldr	r3, [sp, #84]	; 0x54
   15b9e:	1c59      	adds	r1, r3, #1
   15ba0:	9115      	str	r1, [sp, #84]	; 0x54
   15ba2:	a916      	add	r1, sp, #88	; 0x58
   15ba4:	440b      	add	r3, r1
   15ba6:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
   15baa:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   15bac:	9b1c      	ldr	r3, [sp, #112]	; 0x70
   15bae:	fbb2 f3f3 	udiv	r3, r2, r3
   15bb2:	931a      	str	r3, [sp, #104]	; 0x68
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
   15bb4:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   15bb6:	2b00      	cmp	r3, #0
   15bb8:	d003      	beq.n	15bc2 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0xa2>
   15bba:	9b15      	ldr	r3, [sp, #84]	; 0x54
   15bbc:	2b1f      	cmp	r3, #31
   15bbe:	d800      	bhi.n	15bc2 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0xa2>
    do {
   15bc0:	e7cb      	b.n	15b5a <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x3a>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
   15bc2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   15bc4:	9306      	str	r3, [sp, #24]
   15bc6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   15bc8:	9305      	str	r3, [sp, #20]
   15bca:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   15bcc:	9304      	str	r3, [sp, #16]
   15bce:	9b1c      	ldr	r3, [sp, #112]	; 0x70
   15bd0:	9303      	str	r3, [sp, #12]
   15bd2:	f89d 306c 	ldrb.w	r3, [sp, #108]	; 0x6c
   15bd6:	9302      	str	r3, [sp, #8]
   15bd8:	9b15      	ldr	r3, [sp, #84]	; 0x54
   15bda:	9301      	str	r3, [sp, #4]
   15bdc:	ab0c      	add	r3, sp, #48	; 0x30
   15bde:	9300      	str	r3, [sp, #0]
   15be0:	9b08      	ldr	r3, [sp, #32]
   15be2:	9a09      	ldr	r2, [sp, #36]	; 0x24
   15be4:	990a      	ldr	r1, [sp, #40]	; 0x28
   15be6:	980b      	ldr	r0, [sp, #44]	; 0x2c
   15be8:	f7ff fe6c 	bl	158c4 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)>
   15bec:	4605      	mov	r5, r0
   15bee:	4623      	mov	r3, r4
   15bf0:	4619      	mov	r1, r3
   15bf2:	4803      	ldr	r0, [pc, #12]	; (15c00 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0xe0>)
   15bf4:	f7ff fcce 	bl	15594 <__cyg_profile_func_exit>
   15bf8:	462b      	mov	r3, r5
}
   15bfa:	4618      	mov	r0, r3
   15bfc:	b017      	add	sp, #92	; 0x5c
   15bfe:	bd30      	pop	{r4, r5, pc}
   15c00:	00015b21 	.word	0x00015b21

00015c04 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)>:


// internal itoa for 'long long' type
#if defined(PRINTF_SUPPORT_LONG_LONG)
static size_t _ntoa_long_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long long value, bool negative, unsigned long long base, unsigned int prec, unsigned int width, unsigned int flags)
{
   15c04:	b530      	push	{r4, r5, lr}
   15c06:	b097      	sub	sp, #92	; 0x5c
   15c08:	4675      	mov	r5, lr
   15c0a:	900b      	str	r0, [sp, #44]	; 0x2c
   15c0c:	910a      	str	r1, [sp, #40]	; 0x28
   15c0e:	9209      	str	r2, [sp, #36]	; 0x24
   15c10:	9308      	str	r3, [sp, #32]
   15c12:	462b      	mov	r3, r5
   15c14:	4619      	mov	r1, r3
   15c16:	4837      	ldr	r0, [pc, #220]	; (15cf4 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0xf0>)
   15c18:	f7ff fca8 	bl	1556c <__cyg_profile_func_enter>
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
   15c1c:	2300      	movs	r3, #0
   15c1e:	9315      	str	r3, [sp, #84]	; 0x54

  // no hash for 0 values
  if (!value) {
   15c20:	e9dd 341a 	ldrd	r3, r4, [sp, #104]	; 0x68
   15c24:	4323      	orrs	r3, r4
   15c26:	d103      	bne.n	15c30 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0x2c>
    flags &= ~FLAGS_HASH;
   15c28:	9b22      	ldr	r3, [sp, #136]	; 0x88
   15c2a:	f023 0310 	bic.w	r3, r3, #16
   15c2e:	9322      	str	r3, [sp, #136]	; 0x88
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
   15c30:	9b22      	ldr	r3, [sp, #136]	; 0x88
   15c32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
   15c36:	2b00      	cmp	r3, #0
   15c38:	d003      	beq.n	15c42 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0x3e>
   15c3a:	e9dd 341a 	ldrd	r3, r4, [sp, #104]	; 0x68
   15c3e:	4323      	orrs	r3, r4
   15c40:	d039      	beq.n	15cb6 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0xb2>
    do {
      const char digit = (char)(value % base);
   15c42:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
   15c46:	e9dd 231e 	ldrd	r2, r3, [sp, #120]	; 0x78
   15c4a:	f002 fa47 	bl	180dc <__aeabi_uldivmod>
   15c4e:	461c      	mov	r4, r3
   15c50:	4613      	mov	r3, r2
   15c52:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
   15c56:	f89d 3053 	ldrb.w	r3, [sp, #83]	; 0x53
   15c5a:	2b09      	cmp	r3, #9
   15c5c:	d804      	bhi.n	15c68 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0x64>
   15c5e:	f89d 3053 	ldrb.w	r3, [sp, #83]	; 0x53
   15c62:	3330      	adds	r3, #48	; 0x30
   15c64:	b2da      	uxtb	r2, r3
   15c66:	e00d      	b.n	15c84 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0x80>
   15c68:	9b22      	ldr	r3, [sp, #136]	; 0x88
   15c6a:	f003 0320 	and.w	r3, r3, #32
   15c6e:	2b00      	cmp	r3, #0
   15c70:	d001      	beq.n	15c76 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0x72>
   15c72:	2241      	movs	r2, #65	; 0x41
   15c74:	e000      	b.n	15c78 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0x74>
   15c76:	2261      	movs	r2, #97	; 0x61
   15c78:	f89d 3053 	ldrb.w	r3, [sp, #83]	; 0x53
   15c7c:	4413      	add	r3, r2
   15c7e:	b2db      	uxtb	r3, r3
   15c80:	3b0a      	subs	r3, #10
   15c82:	b2da      	uxtb	r2, r3
   15c84:	9b15      	ldr	r3, [sp, #84]	; 0x54
   15c86:	1c59      	adds	r1, r3, #1
   15c88:	9115      	str	r1, [sp, #84]	; 0x54
   15c8a:	a916      	add	r1, sp, #88	; 0x58
   15c8c:	440b      	add	r3, r1
   15c8e:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
   15c92:	e9dd 231e 	ldrd	r2, r3, [sp, #120]	; 0x78
   15c96:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
   15c9a:	f002 fa1f 	bl	180dc <__aeabi_uldivmod>
   15c9e:	4603      	mov	r3, r0
   15ca0:	460c      	mov	r4, r1
   15ca2:	e9cd 341a 	strd	r3, r4, [sp, #104]	; 0x68
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
   15ca6:	e9dd 341a 	ldrd	r3, r4, [sp, #104]	; 0x68
   15caa:	4323      	orrs	r3, r4
   15cac:	d003      	beq.n	15cb6 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0xb2>
   15cae:	9b15      	ldr	r3, [sp, #84]	; 0x54
   15cb0:	2b1f      	cmp	r3, #31
   15cb2:	d800      	bhi.n	15cb6 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0xb2>
    do {
   15cb4:	e7c5      	b.n	15c42 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0x3e>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
   15cb6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   15cb8:	9a22      	ldr	r2, [sp, #136]	; 0x88
   15cba:	9206      	str	r2, [sp, #24]
   15cbc:	9a21      	ldr	r2, [sp, #132]	; 0x84
   15cbe:	9205      	str	r2, [sp, #20]
   15cc0:	9a20      	ldr	r2, [sp, #128]	; 0x80
   15cc2:	9204      	str	r2, [sp, #16]
   15cc4:	9303      	str	r3, [sp, #12]
   15cc6:	f89d 3070 	ldrb.w	r3, [sp, #112]	; 0x70
   15cca:	9302      	str	r3, [sp, #8]
   15ccc:	9b15      	ldr	r3, [sp, #84]	; 0x54
   15cce:	9301      	str	r3, [sp, #4]
   15cd0:	ab0c      	add	r3, sp, #48	; 0x30
   15cd2:	9300      	str	r3, [sp, #0]
   15cd4:	9b08      	ldr	r3, [sp, #32]
   15cd6:	9a09      	ldr	r2, [sp, #36]	; 0x24
   15cd8:	990a      	ldr	r1, [sp, #40]	; 0x28
   15cda:	980b      	ldr	r0, [sp, #44]	; 0x2c
   15cdc:	f7ff fdf2 	bl	158c4 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)>
   15ce0:	4604      	mov	r4, r0
   15ce2:	462b      	mov	r3, r5
   15ce4:	4619      	mov	r1, r3
   15ce6:	4803      	ldr	r0, [pc, #12]	; (15cf4 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0xf0>)
   15ce8:	f7ff fc54 	bl	15594 <__cyg_profile_func_exit>
   15cec:	4623      	mov	r3, r4
}
   15cee:	4618      	mov	r0, r3
   15cf0:	b017      	add	sp, #92	; 0x5c
   15cf2:	bd30      	pop	{r4, r5, pc}
   15cf4:	00015c05 	.word	0x00015c05

00015cf8 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)>:
#endif  // PRINTF_SUPPORT_LONG_LONG


#if defined(PRINTF_SUPPORT_FLOAT)
static size_t _ftoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value_param, unsigned int prec, unsigned int width, unsigned int flags)
{
   15cf8:	b530      	push	{r4, r5, lr}
   15cfa:	b09b      	sub	sp, #108	; 0x6c
   15cfc:	4675      	mov	r5, lr
   15cfe:	9005      	str	r0, [sp, #20]
   15d00:	9104      	str	r1, [sp, #16]
   15d02:	9203      	str	r2, [sp, #12]
   15d04:	9302      	str	r3, [sp, #8]
   15d06:	ed8d 0b00 	vstr	d0, [sp]
   15d0a:	462b      	mov	r3, r5
   15d0c:	4619      	mov	r1, r3
   15d0e:	48b7      	ldr	r0, [pc, #732]	; (15fec <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x2f4>)
   15d10:	f7ff fc2c 	bl	1556c <__cyg_profile_func_enter>
  const size_t start_idx = idx;
   15d14:	9b03      	ldr	r3, [sp, #12]
   15d16:	9311      	str	r3, [sp, #68]	; 0x44

  float value = static_cast<float>(value_param);
   15d18:	e9dd 0100 	ldrd	r0, r1, [sp]
   15d1c:	f002 f98e 	bl	1803c <__aeabi_d2f>
   15d20:	4603      	mov	r3, r0
   15d22:	9319      	str	r3, [sp, #100]	; 0x64

  char buf[PRINTF_FTOA_BUFFER_SIZE];
  size_t len  = 0U;
   15d24:	2300      	movs	r3, #0
   15d26:	9318      	str	r3, [sp, #96]	; 0x60
  float diff = 0.0;
   15d28:	f04f 0300 	mov.w	r3, #0
   15d2c:	9310      	str	r3, [sp, #64]	; 0x40

  // if input is larger than thres_max, revert to exponential
  const float thres_max = (float)0x7FFFFFFF;
   15d2e:	f04f 439e 	mov.w	r3, #1325400064	; 0x4f000000
   15d32:	930f      	str	r3, [sp, #60]	; 0x3c

  // powers of 10
  static const float pow10[] = { 1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000 };

  // test for negative
  bool negative = false;
   15d34:	2300      	movs	r3, #0
   15d36:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
  if (value < 0) {
   15d3a:	eddd 7a19 	vldr	s15, [sp, #100]	; 0x64
   15d3e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   15d42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   15d46:	d50a      	bpl.n	15d5e <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x66>
    negative = true;
   15d48:	2301      	movs	r3, #1
   15d4a:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
    value = 0 - value;
   15d4e:	ed9f 7aa8 	vldr	s14, [pc, #672]	; 15ff0 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x2f8>
   15d52:	eddd 7a19 	vldr	s15, [sp, #100]	; 0x64
   15d56:	ee77 7a67 	vsub.f32	s15, s14, s15
   15d5a:	edcd 7a19 	vstr	s15, [sp, #100]	; 0x64
  }

  // set default precision to 6, if not set explicitly
  if (!(flags & FLAGS_PRECISION)) {
   15d5e:	9b20      	ldr	r3, [sp, #128]	; 0x80
   15d60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
   15d64:	2b00      	cmp	r3, #0
   15d66:	d101      	bne.n	15d6c <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x74>
    prec = 6U;
   15d68:	2306      	movs	r3, #6
   15d6a:	931e      	str	r3, [sp, #120]	; 0x78
  }
  // limit precision to 9, cause a prec >= 10 can lead to overflow errors
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
   15d6c:	9b18      	ldr	r3, [sp, #96]	; 0x60
   15d6e:	2b1f      	cmp	r3, #31
   15d70:	d80e      	bhi.n	15d90 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x98>
   15d72:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   15d74:	2b09      	cmp	r3, #9
   15d76:	d90b      	bls.n	15d90 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x98>
    buf[len++] = '0';
   15d78:	9b18      	ldr	r3, [sp, #96]	; 0x60
   15d7a:	1c5a      	adds	r2, r3, #1
   15d7c:	9218      	str	r2, [sp, #96]	; 0x60
   15d7e:	aa1a      	add	r2, sp, #104	; 0x68
   15d80:	4413      	add	r3, r2
   15d82:	2230      	movs	r2, #48	; 0x30
   15d84:	f803 2c50 	strb.w	r2, [r3, #-80]
    prec--;
   15d88:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   15d8a:	3b01      	subs	r3, #1
   15d8c:	931e      	str	r3, [sp, #120]	; 0x78
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
   15d8e:	e7ed      	b.n	15d6c <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x74>
  }

  int whole = (int)value;
   15d90:	eddd 7a19 	vldr	s15, [sp, #100]	; 0x64
   15d94:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   15d98:	ee17 3a90 	vmov	r3, s15
   15d9c:	9316      	str	r3, [sp, #88]	; 0x58
  float tmp = (value - whole) * pow10[prec];
   15d9e:	9b16      	ldr	r3, [sp, #88]	; 0x58
   15da0:	ee07 3a90 	vmov	s15, r3
   15da4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   15da8:	ed9d 7a19 	vldr	s14, [sp, #100]	; 0x64
   15dac:	ee37 7a67 	vsub.f32	s14, s14, s15
   15db0:	4a90      	ldr	r2, [pc, #576]	; (15ff4 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x2fc>)
   15db2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   15db4:	009b      	lsls	r3, r3, #2
   15db6:	4413      	add	r3, r2
   15db8:	edd3 7a00 	vldr	s15, [r3]
   15dbc:	ee67 7a27 	vmul.f32	s15, s14, s15
   15dc0:	edcd 7a0e 	vstr	s15, [sp, #56]	; 0x38
  unsigned long frac = (unsigned long)tmp;
   15dc4:	eddd 7a0e 	vldr	s15, [sp, #56]	; 0x38
   15dc8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
   15dcc:	ee17 3a90 	vmov	r3, s15
   15dd0:	9315      	str	r3, [sp, #84]	; 0x54
  diff = tmp - frac;
   15dd2:	9b15      	ldr	r3, [sp, #84]	; 0x54
   15dd4:	ee07 3a90 	vmov	s15, r3
   15dd8:	eef8 7a67 	vcvt.f32.u32	s15, s15
   15ddc:	ed9d 7a0e 	vldr	s14, [sp, #56]	; 0x38
   15de0:	ee77 7a67 	vsub.f32	s15, s14, s15
   15de4:	edcd 7a10 	vstr	s15, [sp, #64]	; 0x40

  if (diff > 0.5) {
   15de8:	eddd 7a10 	vldr	s15, [sp, #64]	; 0x40
   15dec:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
   15df0:	eef4 7ac7 	vcmpe.f32	s15, s14
   15df4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   15df8:	dd18      	ble.n	15e2c <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x134>
    ++frac;
   15dfa:	9b15      	ldr	r3, [sp, #84]	; 0x54
   15dfc:	3301      	adds	r3, #1
   15dfe:	9315      	str	r3, [sp, #84]	; 0x54
    // handle rollover, e.g. case 0.99 with prec 1 is 1.0
    if (frac >= pow10[prec]) {
   15e00:	9b15      	ldr	r3, [sp, #84]	; 0x54
   15e02:	ee07 3a90 	vmov	s15, r3
   15e06:	eeb8 7a67 	vcvt.f32.u32	s14, s15
   15e0a:	4a7a      	ldr	r2, [pc, #488]	; (15ff4 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x2fc>)
   15e0c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   15e0e:	009b      	lsls	r3, r3, #2
   15e10:	4413      	add	r3, r2
   15e12:	edd3 7a00 	vldr	s15, [r3]
   15e16:	eeb4 7ae7 	vcmpe.f32	s14, s15
   15e1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   15e1e:	db19      	blt.n	15e54 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x15c>
      frac = 0;
   15e20:	2300      	movs	r3, #0
   15e22:	9315      	str	r3, [sp, #84]	; 0x54
      ++whole;
   15e24:	9b16      	ldr	r3, [sp, #88]	; 0x58
   15e26:	3301      	adds	r3, #1
   15e28:	9316      	str	r3, [sp, #88]	; 0x58
   15e2a:	e013      	b.n	15e54 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x15c>
    }
  }
  else if ((diff == 0.5) && ((frac == 0U) || (frac & 1U))) {
   15e2c:	eddd 7a10 	vldr	s15, [sp, #64]	; 0x40
   15e30:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
   15e34:	eef4 7a47 	vcmp.f32	s15, s14
   15e38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   15e3c:	d10a      	bne.n	15e54 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x15c>
   15e3e:	9b15      	ldr	r3, [sp, #84]	; 0x54
   15e40:	2b00      	cmp	r3, #0
   15e42:	d004      	beq.n	15e4e <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x156>
   15e44:	9b15      	ldr	r3, [sp, #84]	; 0x54
   15e46:	f003 0301 	and.w	r3, r3, #1
   15e4a:	2b00      	cmp	r3, #0
   15e4c:	d002      	beq.n	15e54 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x15c>
    // if halfway, round up if odd, OR if last digit is 0
    ++frac;
   15e4e:	9b15      	ldr	r3, [sp, #84]	; 0x54
   15e50:	3301      	adds	r3, #1
   15e52:	9315      	str	r3, [sp, #84]	; 0x54
  }

  // TBD: for very large numbers switch back to native sprintf for exponentials. Anyone want to write code to replace this?
  // Normal printf behavior is to print EVERY whole number digit which can be 100s of characters overflowing your buffers == bad
  if (value > thres_max) {
   15e54:	eddd 7a19 	vldr	s15, [sp, #100]	; 0x64
   15e58:	ed9f 7a67 	vldr	s14, [pc, #412]	; 15ff8 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x300>
   15e5c:	eef4 7ac7 	vcmpe.f32	s15, s14
   15e60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   15e64:	dd01      	ble.n	15e6a <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x172>
    return 0U;
   15e66:	2400      	movs	r4, #0
   15e68:	e156      	b.n	16118 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x420>
  }

  if (prec == 0U) {
   15e6a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   15e6c:	2b00      	cmp	r3, #0
   15e6e:	d129      	bne.n	15ec4 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x1cc>
    diff = value - (float)whole;
   15e70:	9b16      	ldr	r3, [sp, #88]	; 0x58
   15e72:	ee07 3a90 	vmov	s15, r3
   15e76:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   15e7a:	ed9d 7a19 	vldr	s14, [sp, #100]	; 0x64
   15e7e:	ee77 7a67 	vsub.f32	s15, s14, s15
   15e82:	edcd 7a10 	vstr	s15, [sp, #64]	; 0x40
    if (diff > 0.5) {
   15e86:	eddd 7a10 	vldr	s15, [sp, #64]	; 0x40
   15e8a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
   15e8e:	eef4 7ac7 	vcmpe.f32	s15, s14
   15e92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   15e96:	dd03      	ble.n	15ea0 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x1a8>
      // greater than 0.5, round up, e.g. 1.6 -> 2
      ++whole;
   15e98:	9b16      	ldr	r3, [sp, #88]	; 0x58
   15e9a:	3301      	adds	r3, #1
   15e9c:	9316      	str	r3, [sp, #88]	; 0x58
   15e9e:	e05f      	b.n	15f60 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x268>
    }
    else if ((diff == 0.5) && (whole & 1)) {
   15ea0:	eddd 7a10 	vldr	s15, [sp, #64]	; 0x40
   15ea4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
   15ea8:	eef4 7a47 	vcmp.f32	s15, s14
   15eac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   15eb0:	d156      	bne.n	15f60 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x268>
   15eb2:	9b16      	ldr	r3, [sp, #88]	; 0x58
   15eb4:	f003 0301 	and.w	r3, r3, #1
   15eb8:	2b00      	cmp	r3, #0
   15eba:	d051      	beq.n	15f60 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x268>
      // exactly 0.5 and ODD, then round up
      // 1.5 -> 2, but 2.5 -> 2
      ++whole;
   15ebc:	9b16      	ldr	r3, [sp, #88]	; 0x58
   15ebe:	3301      	adds	r3, #1
   15ec0:	9316      	str	r3, [sp, #88]	; 0x58
   15ec2:	e04d      	b.n	15f60 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x268>
    }
  }
  else {
    unsigned int count = prec;
   15ec4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   15ec6:	9314      	str	r3, [sp, #80]	; 0x50
    // now do fractional part, as an unsigned number
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
   15ec8:	9b18      	ldr	r3, [sp, #96]	; 0x60
   15eca:	2b1f      	cmp	r3, #31
   15ecc:	d827      	bhi.n	15f1e <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x226>
      --count;
   15ece:	9b14      	ldr	r3, [sp, #80]	; 0x50
   15ed0:	3b01      	subs	r3, #1
   15ed2:	9314      	str	r3, [sp, #80]	; 0x50
      buf[len++] = (char)(48U + (frac % 10U));
   15ed4:	9915      	ldr	r1, [sp, #84]	; 0x54
   15ed6:	4b49      	ldr	r3, [pc, #292]	; (15ffc <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x304>)
   15ed8:	fba3 2301 	umull	r2, r3, r3, r1
   15edc:	08da      	lsrs	r2, r3, #3
   15ede:	4613      	mov	r3, r2
   15ee0:	009b      	lsls	r3, r3, #2
   15ee2:	4413      	add	r3, r2
   15ee4:	005b      	lsls	r3, r3, #1
   15ee6:	1aca      	subs	r2, r1, r3
   15ee8:	b2d3      	uxtb	r3, r2
   15eea:	3330      	adds	r3, #48	; 0x30
   15eec:	b2d9      	uxtb	r1, r3
   15eee:	9b18      	ldr	r3, [sp, #96]	; 0x60
   15ef0:	1c5a      	adds	r2, r3, #1
   15ef2:	9218      	str	r2, [sp, #96]	; 0x60
   15ef4:	aa1a      	add	r2, sp, #104	; 0x68
   15ef6:	4413      	add	r3, r2
   15ef8:	460a      	mov	r2, r1
   15efa:	f803 2c50 	strb.w	r2, [r3, #-80]
      if (!(frac /= 10U)) {
   15efe:	9b15      	ldr	r3, [sp, #84]	; 0x54
   15f00:	4a3e      	ldr	r2, [pc, #248]	; (15ffc <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x304>)
   15f02:	fba2 2303 	umull	r2, r3, r2, r3
   15f06:	08db      	lsrs	r3, r3, #3
   15f08:	9315      	str	r3, [sp, #84]	; 0x54
   15f0a:	9b15      	ldr	r3, [sp, #84]	; 0x54
   15f0c:	2b00      	cmp	r3, #0
   15f0e:	bf0c      	ite	eq
   15f10:	2301      	moveq	r3, #1
   15f12:	2300      	movne	r3, #0
   15f14:	b2db      	uxtb	r3, r3
   15f16:	2b00      	cmp	r3, #0
   15f18:	d100      	bne.n	15f1c <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x224>
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
   15f1a:	e7d5      	b.n	15ec8 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x1d0>
        break;
   15f1c:	bf00      	nop
      }
    }
    // add extra 0s
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
   15f1e:	9b18      	ldr	r3, [sp, #96]	; 0x60
   15f20:	2b1f      	cmp	r3, #31
   15f22:	d806      	bhi.n	15f32 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x23a>
   15f24:	9b14      	ldr	r3, [sp, #80]	; 0x50
   15f26:	1e5a      	subs	r2, r3, #1
   15f28:	9214      	str	r2, [sp, #80]	; 0x50
   15f2a:	2b00      	cmp	r3, #0
   15f2c:	d001      	beq.n	15f32 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x23a>
   15f2e:	2301      	movs	r3, #1
   15f30:	e000      	b.n	15f34 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x23c>
   15f32:	2300      	movs	r3, #0
   15f34:	2b00      	cmp	r3, #0
   15f36:	d008      	beq.n	15f4a <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x252>
      buf[len++] = '0';
   15f38:	9b18      	ldr	r3, [sp, #96]	; 0x60
   15f3a:	1c5a      	adds	r2, r3, #1
   15f3c:	9218      	str	r2, [sp, #96]	; 0x60
   15f3e:	aa1a      	add	r2, sp, #104	; 0x68
   15f40:	4413      	add	r3, r2
   15f42:	2230      	movs	r2, #48	; 0x30
   15f44:	f803 2c50 	strb.w	r2, [r3, #-80]
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
   15f48:	e7e9      	b.n	15f1e <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x226>
    }
    if (len < PRINTF_FTOA_BUFFER_SIZE) {
   15f4a:	9b18      	ldr	r3, [sp, #96]	; 0x60
   15f4c:	2b1f      	cmp	r3, #31
   15f4e:	d807      	bhi.n	15f60 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x268>
      // add decimal
      buf[len++] = '.';
   15f50:	9b18      	ldr	r3, [sp, #96]	; 0x60
   15f52:	1c5a      	adds	r2, r3, #1
   15f54:	9218      	str	r2, [sp, #96]	; 0x60
   15f56:	aa1a      	add	r2, sp, #104	; 0x68
   15f58:	4413      	add	r3, r2
   15f5a:	222e      	movs	r2, #46	; 0x2e
   15f5c:	f803 2c50 	strb.w	r2, [r3, #-80]
    }
  }

  // do whole part, number is reversed
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
   15f60:	9b18      	ldr	r3, [sp, #96]	; 0x60
   15f62:	2b1f      	cmp	r3, #31
   15f64:	d828      	bhi.n	15fb8 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x2c0>
    buf[len++] = (char)(48 + (whole % 10));
   15f66:	9a16      	ldr	r2, [sp, #88]	; 0x58
   15f68:	4b25      	ldr	r3, [pc, #148]	; (16000 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x308>)
   15f6a:	fb83 1302 	smull	r1, r3, r3, r2
   15f6e:	1099      	asrs	r1, r3, #2
   15f70:	17d3      	asrs	r3, r2, #31
   15f72:	1ac9      	subs	r1, r1, r3
   15f74:	460b      	mov	r3, r1
   15f76:	009b      	lsls	r3, r3, #2
   15f78:	440b      	add	r3, r1
   15f7a:	005b      	lsls	r3, r3, #1
   15f7c:	1ad1      	subs	r1, r2, r3
   15f7e:	b2cb      	uxtb	r3, r1
   15f80:	3330      	adds	r3, #48	; 0x30
   15f82:	b2d9      	uxtb	r1, r3
   15f84:	9b18      	ldr	r3, [sp, #96]	; 0x60
   15f86:	1c5a      	adds	r2, r3, #1
   15f88:	9218      	str	r2, [sp, #96]	; 0x60
   15f8a:	aa1a      	add	r2, sp, #104	; 0x68
   15f8c:	4413      	add	r3, r2
   15f8e:	460a      	mov	r2, r1
   15f90:	f803 2c50 	strb.w	r2, [r3, #-80]
    if (!(whole /= 10)) {
   15f94:	9b16      	ldr	r3, [sp, #88]	; 0x58
   15f96:	4a1a      	ldr	r2, [pc, #104]	; (16000 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x308>)
   15f98:	fb82 1203 	smull	r1, r2, r2, r3
   15f9c:	1092      	asrs	r2, r2, #2
   15f9e:	17db      	asrs	r3, r3, #31
   15fa0:	1ad3      	subs	r3, r2, r3
   15fa2:	9316      	str	r3, [sp, #88]	; 0x58
   15fa4:	9b16      	ldr	r3, [sp, #88]	; 0x58
   15fa6:	2b00      	cmp	r3, #0
   15fa8:	bf0c      	ite	eq
   15faa:	2301      	moveq	r3, #1
   15fac:	2300      	movne	r3, #0
   15fae:	b2db      	uxtb	r3, r3
   15fb0:	2b00      	cmp	r3, #0
   15fb2:	d100      	bne.n	15fb6 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x2be>
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
   15fb4:	e7d4      	b.n	15f60 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x268>
      break;
   15fb6:	bf00      	nop
    }
  }

  // pad leading zeros
  while (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
   15fb8:	9b20      	ldr	r3, [sp, #128]	; 0x80
   15fba:	f003 0302 	and.w	r3, r3, #2
   15fbe:	2b00      	cmp	r3, #0
   15fc0:	d120      	bne.n	16004 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x30c>
   15fc2:	9b20      	ldr	r3, [sp, #128]	; 0x80
   15fc4:	f003 0301 	and.w	r3, r3, #1
   15fc8:	2b00      	cmp	r3, #0
   15fca:	d01b      	beq.n	16004 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x30c>
   15fcc:	9a18      	ldr	r2, [sp, #96]	; 0x60
   15fce:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   15fd0:	429a      	cmp	r2, r3
   15fd2:	d217      	bcs.n	16004 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x30c>
   15fd4:	9b18      	ldr	r3, [sp, #96]	; 0x60
   15fd6:	2b1f      	cmp	r3, #31
   15fd8:	d814      	bhi.n	16004 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x30c>
    buf[len++] = '0';
   15fda:	9b18      	ldr	r3, [sp, #96]	; 0x60
   15fdc:	1c5a      	adds	r2, r3, #1
   15fde:	9218      	str	r2, [sp, #96]	; 0x60
   15fe0:	aa1a      	add	r2, sp, #104	; 0x68
   15fe2:	4413      	add	r3, r2
   15fe4:	2230      	movs	r2, #48	; 0x30
   15fe6:	f803 2c50 	strb.w	r2, [r3, #-80]
  while (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
   15fea:	e7e5      	b.n	15fb8 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x2c0>
   15fec:	00015cf9 	.word	0x00015cf9
   15ff0:	00000000 	.word	0x00000000
   15ff4:	00019bfc 	.word	0x00019bfc
   15ff8:	4f000000 	.word	0x4f000000
   15ffc:	cccccccd 	.word	0xcccccccd
   16000:	66666667 	.word	0x66666667
  }

  // handle sign
  if ((len == width) && (negative || (flags & FLAGS_PLUS) || (flags & FLAGS_SPACE))) {
   16004:	9a18      	ldr	r2, [sp, #96]	; 0x60
   16006:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   16008:	429a      	cmp	r2, r3
   1600a:	d110      	bne.n	1602e <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x336>
   1600c:	f89d 305f 	ldrb.w	r3, [sp, #95]	; 0x5f
   16010:	2b00      	cmp	r3, #0
   16012:	d109      	bne.n	16028 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x330>
   16014:	9b20      	ldr	r3, [sp, #128]	; 0x80
   16016:	f003 0304 	and.w	r3, r3, #4
   1601a:	2b00      	cmp	r3, #0
   1601c:	d104      	bne.n	16028 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x330>
   1601e:	9b20      	ldr	r3, [sp, #128]	; 0x80
   16020:	f003 0308 	and.w	r3, r3, #8
   16024:	2b00      	cmp	r3, #0
   16026:	d002      	beq.n	1602e <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x336>
    len--;
   16028:	9b18      	ldr	r3, [sp, #96]	; 0x60
   1602a:	3b01      	subs	r3, #1
   1602c:	9318      	str	r3, [sp, #96]	; 0x60
  }
  if (len < PRINTF_FTOA_BUFFER_SIZE) {
   1602e:	9b18      	ldr	r3, [sp, #96]	; 0x60
   16030:	2b1f      	cmp	r3, #31
   16032:	d827      	bhi.n	16084 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x38c>
    if (negative) {
   16034:	f89d 305f 	ldrb.w	r3, [sp, #95]	; 0x5f
   16038:	2b00      	cmp	r3, #0
   1603a:	d008      	beq.n	1604e <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x356>
      buf[len++] = '-';
   1603c:	9b18      	ldr	r3, [sp, #96]	; 0x60
   1603e:	1c5a      	adds	r2, r3, #1
   16040:	9218      	str	r2, [sp, #96]	; 0x60
   16042:	aa1a      	add	r2, sp, #104	; 0x68
   16044:	4413      	add	r3, r2
   16046:	222d      	movs	r2, #45	; 0x2d
   16048:	f803 2c50 	strb.w	r2, [r3, #-80]
   1604c:	e01a      	b.n	16084 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x38c>
    }
    else if (flags & FLAGS_PLUS) {
   1604e:	9b20      	ldr	r3, [sp, #128]	; 0x80
   16050:	f003 0304 	and.w	r3, r3, #4
   16054:	2b00      	cmp	r3, #0
   16056:	d008      	beq.n	1606a <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x372>
      buf[len++] = '+';  // ignore the space if the '+' exists
   16058:	9b18      	ldr	r3, [sp, #96]	; 0x60
   1605a:	1c5a      	adds	r2, r3, #1
   1605c:	9218      	str	r2, [sp, #96]	; 0x60
   1605e:	aa1a      	add	r2, sp, #104	; 0x68
   16060:	4413      	add	r3, r2
   16062:	222b      	movs	r2, #43	; 0x2b
   16064:	f803 2c50 	strb.w	r2, [r3, #-80]
   16068:	e00c      	b.n	16084 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x38c>
    }
    else if (flags & FLAGS_SPACE) {
   1606a:	9b20      	ldr	r3, [sp, #128]	; 0x80
   1606c:	f003 0308 	and.w	r3, r3, #8
   16070:	2b00      	cmp	r3, #0
   16072:	d007      	beq.n	16084 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x38c>
      buf[len++] = ' ';
   16074:	9b18      	ldr	r3, [sp, #96]	; 0x60
   16076:	1c5a      	adds	r2, r3, #1
   16078:	9218      	str	r2, [sp, #96]	; 0x60
   1607a:	aa1a      	add	r2, sp, #104	; 0x68
   1607c:	4413      	add	r3, r2
   1607e:	2220      	movs	r2, #32
   16080:	f803 2c50 	strb.w	r2, [r3, #-80]
    }
  }

  // pad spaces up to given width
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
   16084:	9b20      	ldr	r3, [sp, #128]	; 0x80
   16086:	f003 0302 	and.w	r3, r3, #2
   1608a:	2b00      	cmp	r3, #0
   1608c:	d116      	bne.n	160bc <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x3c4>
   1608e:	9b20      	ldr	r3, [sp, #128]	; 0x80
   16090:	f003 0301 	and.w	r3, r3, #1
   16094:	2b00      	cmp	r3, #0
   16096:	d111      	bne.n	160bc <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x3c4>
    for (size_t i = len; i < width; i++) {
   16098:	9b18      	ldr	r3, [sp, #96]	; 0x60
   1609a:	9313      	str	r3, [sp, #76]	; 0x4c
   1609c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   1609e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   160a0:	429a      	cmp	r2, r3
   160a2:	d20b      	bcs.n	160bc <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x3c4>
      out(' ', buffer, idx++, maxlen);
   160a4:	9a03      	ldr	r2, [sp, #12]
   160a6:	1c53      	adds	r3, r2, #1
   160a8:	9303      	str	r3, [sp, #12]
   160aa:	9c05      	ldr	r4, [sp, #20]
   160ac:	9b02      	ldr	r3, [sp, #8]
   160ae:	9904      	ldr	r1, [sp, #16]
   160b0:	2020      	movs	r0, #32
   160b2:	47a0      	blx	r4
    for (size_t i = len; i < width; i++) {
   160b4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   160b6:	3301      	adds	r3, #1
   160b8:	9313      	str	r3, [sp, #76]	; 0x4c
   160ba:	e7ef      	b.n	1609c <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x3a4>
    }
  }

  // reverse string
  for (size_t i = 0U; i < len; i++) {
   160bc:	2300      	movs	r3, #0
   160be:	9312      	str	r3, [sp, #72]	; 0x48
   160c0:	9a12      	ldr	r2, [sp, #72]	; 0x48
   160c2:	9b18      	ldr	r3, [sp, #96]	; 0x60
   160c4:	429a      	cmp	r2, r3
   160c6:	d212      	bcs.n	160ee <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x3f6>
    out(buf[len - i - 1U], buffer, idx++, maxlen);
   160c8:	9a18      	ldr	r2, [sp, #96]	; 0x60
   160ca:	9b12      	ldr	r3, [sp, #72]	; 0x48
   160cc:	1ad3      	subs	r3, r2, r3
   160ce:	3b01      	subs	r3, #1
   160d0:	aa1a      	add	r2, sp, #104	; 0x68
   160d2:	4413      	add	r3, r2
   160d4:	f813 0c50 	ldrb.w	r0, [r3, #-80]
   160d8:	9a03      	ldr	r2, [sp, #12]
   160da:	1c53      	adds	r3, r2, #1
   160dc:	9303      	str	r3, [sp, #12]
   160de:	9c05      	ldr	r4, [sp, #20]
   160e0:	9b02      	ldr	r3, [sp, #8]
   160e2:	9904      	ldr	r1, [sp, #16]
   160e4:	47a0      	blx	r4
  for (size_t i = 0U; i < len; i++) {
   160e6:	9b12      	ldr	r3, [sp, #72]	; 0x48
   160e8:	3301      	adds	r3, #1
   160ea:	9312      	str	r3, [sp, #72]	; 0x48
   160ec:	e7e8      	b.n	160c0 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x3c8>
  }

  // append pad spaces up to given width
  if (flags & FLAGS_LEFT) {
   160ee:	9b20      	ldr	r3, [sp, #128]	; 0x80
   160f0:	f003 0302 	and.w	r3, r3, #2
   160f4:	2b00      	cmp	r3, #0
   160f6:	d00e      	beq.n	16116 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x41e>
    while (idx - start_idx < width) {
   160f8:	9a03      	ldr	r2, [sp, #12]
   160fa:	9b11      	ldr	r3, [sp, #68]	; 0x44
   160fc:	1ad3      	subs	r3, r2, r3
   160fe:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   16100:	429a      	cmp	r2, r3
   16102:	d908      	bls.n	16116 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x41e>
      out(' ', buffer, idx++, maxlen);
   16104:	9a03      	ldr	r2, [sp, #12]
   16106:	1c53      	adds	r3, r2, #1
   16108:	9303      	str	r3, [sp, #12]
   1610a:	9c05      	ldr	r4, [sp, #20]
   1610c:	9b02      	ldr	r3, [sp, #8]
   1610e:	9904      	ldr	r1, [sp, #16]
   16110:	2020      	movs	r0, #32
   16112:	47a0      	blx	r4
    while (idx - start_idx < width) {
   16114:	e7f0      	b.n	160f8 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x400>
    }
  }

  return idx;
   16116:	9c03      	ldr	r4, [sp, #12]
   16118:	462b      	mov	r3, r5
   1611a:	4619      	mov	r1, r3
   1611c:	4803      	ldr	r0, [pc, #12]	; (1612c <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x434>)
   1611e:	f7ff fa39 	bl	15594 <__cyg_profile_func_exit>
   16122:	4623      	mov	r3, r4
}
   16124:	4618      	mov	r0, r3
   16126:	b01b      	add	sp, #108	; 0x6c
   16128:	bd30      	pop	{r4, r5, pc}
   1612a:	bf00      	nop
   1612c:	00015cf9 	.word	0x00015cf9

00016130 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)>:
#endif  // PRINTF_SUPPORT_FLOAT


// internal vsnprintf
static int _vsnprintf(out_fct_type out, char* buffer, const size_t maxlen, const char* format, va_list va)
{
   16130:	b570      	push	{r4, r5, r6, lr}
   16132:	b0a0      	sub	sp, #128	; 0x80
   16134:	4676      	mov	r6, lr
   16136:	900d      	str	r0, [sp, #52]	; 0x34
   16138:	910c      	str	r1, [sp, #48]	; 0x30
   1613a:	920b      	str	r2, [sp, #44]	; 0x2c
   1613c:	930a      	str	r3, [sp, #40]	; 0x28
   1613e:	4633      	mov	r3, r6
   16140:	4619      	mov	r1, r3
   16142:	48a7      	ldr	r0, [pc, #668]	; (163e0 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2b0>)
   16144:	f7ff fa12 	bl	1556c <__cyg_profile_func_enter>
  unsigned int flags, width, precision, n;
  size_t idx = 0U;
   16148:	2300      	movs	r3, #0
   1614a:	931b      	str	r3, [sp, #108]	; 0x6c

  if (!buffer) {
   1614c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1614e:	2b00      	cmp	r3, #0
   16150:	d101      	bne.n	16156 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x26>
    // use null output function
    out = _out_null;
   16152:	4ba4      	ldr	r3, [pc, #656]	; (163e4 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2b4>)
   16154:	930d      	str	r3, [sp, #52]	; 0x34
  }

  while (*format)
   16156:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   16158:	781b      	ldrb	r3, [r3, #0]
   1615a:	2b00      	cmp	r3, #0
   1615c:	f000 8448 	beq.w	169f0 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8c0>
  {
    // format specifier?  %[flags][width][.precision][length]
    if (*format != '%') {
   16160:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   16162:	781b      	ldrb	r3, [r3, #0]
   16164:	2b25      	cmp	r3, #37	; 0x25
   16166:	d00d      	beq.n	16184 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x54>
      // no
      out(*format, buffer, idx++, maxlen);
   16168:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1616a:	7818      	ldrb	r0, [r3, #0]
   1616c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   1616e:	1c53      	adds	r3, r2, #1
   16170:	931b      	str	r3, [sp, #108]	; 0x6c
   16172:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   16174:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   16176:	990c      	ldr	r1, [sp, #48]	; 0x30
   16178:	47a0      	blx	r4
      format++;
   1617a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1617c:	3301      	adds	r3, #1
   1617e:	930a      	str	r3, [sp, #40]	; 0x28
      continue;
   16180:	f000 bc34 	b.w	169ec <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8bc>
    }
    else {
      // yes, evaluate it
      format++;
   16184:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   16186:	3301      	adds	r3, #1
   16188:	930a      	str	r3, [sp, #40]	; 0x28
    }

    // evaluate flags
    flags = 0U;
   1618a:	2300      	movs	r3, #0
   1618c:	931f      	str	r3, [sp, #124]	; 0x7c
    do {
      switch (*format) {
   1618e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   16190:	781b      	ldrb	r3, [r3, #0]
   16192:	3b20      	subs	r3, #32
   16194:	2b10      	cmp	r3, #16
   16196:	d857      	bhi.n	16248 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x118>
   16198:	a201      	add	r2, pc, #4	; (adr r2, 161a0 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x70>)
   1619a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1619e:	bf00      	nop
   161a0:	00016221 	.word	0x00016221
   161a4:	00016249 	.word	0x00016249
   161a8:	00016249 	.word	0x00016249
   161ac:	00016235 	.word	0x00016235
   161b0:	00016249 	.word	0x00016249
   161b4:	00016249 	.word	0x00016249
   161b8:	00016249 	.word	0x00016249
   161bc:	00016249 	.word	0x00016249
   161c0:	00016249 	.word	0x00016249
   161c4:	00016249 	.word	0x00016249
   161c8:	00016249 	.word	0x00016249
   161cc:	0001620d 	.word	0x0001620d
   161d0:	00016249 	.word	0x00016249
   161d4:	000161f9 	.word	0x000161f9
   161d8:	00016249 	.word	0x00016249
   161dc:	00016249 	.word	0x00016249
   161e0:	000161e5 	.word	0x000161e5
        case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
   161e4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   161e6:	f043 0301 	orr.w	r3, r3, #1
   161ea:	931f      	str	r3, [sp, #124]	; 0x7c
   161ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   161ee:	3301      	adds	r3, #1
   161f0:	930a      	str	r3, [sp, #40]	; 0x28
   161f2:	2301      	movs	r3, #1
   161f4:	931c      	str	r3, [sp, #112]	; 0x70
   161f6:	e02a      	b.n	1624e <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x11e>
        case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
   161f8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   161fa:	f043 0302 	orr.w	r3, r3, #2
   161fe:	931f      	str	r3, [sp, #124]	; 0x7c
   16200:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   16202:	3301      	adds	r3, #1
   16204:	930a      	str	r3, [sp, #40]	; 0x28
   16206:	2301      	movs	r3, #1
   16208:	931c      	str	r3, [sp, #112]	; 0x70
   1620a:	e020      	b.n	1624e <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x11e>
        case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
   1620c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   1620e:	f043 0304 	orr.w	r3, r3, #4
   16212:	931f      	str	r3, [sp, #124]	; 0x7c
   16214:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   16216:	3301      	adds	r3, #1
   16218:	930a      	str	r3, [sp, #40]	; 0x28
   1621a:	2301      	movs	r3, #1
   1621c:	931c      	str	r3, [sp, #112]	; 0x70
   1621e:	e016      	b.n	1624e <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x11e>
        case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
   16220:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   16222:	f043 0308 	orr.w	r3, r3, #8
   16226:	931f      	str	r3, [sp, #124]	; 0x7c
   16228:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1622a:	3301      	adds	r3, #1
   1622c:	930a      	str	r3, [sp, #40]	; 0x28
   1622e:	2301      	movs	r3, #1
   16230:	931c      	str	r3, [sp, #112]	; 0x70
   16232:	e00c      	b.n	1624e <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x11e>
        case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;
   16234:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   16236:	f043 0310 	orr.w	r3, r3, #16
   1623a:	931f      	str	r3, [sp, #124]	; 0x7c
   1623c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1623e:	3301      	adds	r3, #1
   16240:	930a      	str	r3, [sp, #40]	; 0x28
   16242:	2301      	movs	r3, #1
   16244:	931c      	str	r3, [sp, #112]	; 0x70
   16246:	e002      	b.n	1624e <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x11e>
        default :                                   n = 0U; break;
   16248:	2300      	movs	r3, #0
   1624a:	931c      	str	r3, [sp, #112]	; 0x70
   1624c:	bf00      	nop
      }
    } while (n);
   1624e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
   16250:	2b00      	cmp	r3, #0
   16252:	d000      	beq.n	16256 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x126>
    do {
   16254:	e79b      	b.n	1618e <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x5e>

    // evaluate width field
    width = 0U;
   16256:	2300      	movs	r3, #0
   16258:	931e      	str	r3, [sp, #120]	; 0x78
    if (_is_digit(*format)) {
   1625a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1625c:	781b      	ldrb	r3, [r3, #0]
   1625e:	4618      	mov	r0, r3
   16260:	f7ff fade 	bl	15820 <_is_digit(char)>
   16264:	4603      	mov	r3, r0
   16266:	2b00      	cmp	r3, #0
   16268:	d005      	beq.n	16276 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x146>
      width = _atoi(&format);
   1626a:	ab0a      	add	r3, sp, #40	; 0x28
   1626c:	4618      	mov	r0, r3
   1626e:	f7ff faf9 	bl	15864 <_atoi(char const**)>
   16272:	901e      	str	r0, [sp, #120]	; 0x78
   16274:	e018      	b.n	162a8 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x178>
    }
    else if (*format == '*') {
   16276:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   16278:	781b      	ldrb	r3, [r3, #0]
   1627a:	2b2a      	cmp	r3, #42	; 0x2a
   1627c:	d114      	bne.n	162a8 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x178>
      const int w = va_arg(va, int);
   1627e:	9b24      	ldr	r3, [sp, #144]	; 0x90
   16280:	1d1a      	adds	r2, r3, #4
   16282:	9224      	str	r2, [sp, #144]	; 0x90
   16284:	681b      	ldr	r3, [r3, #0]
   16286:	9316      	str	r3, [sp, #88]	; 0x58
      if (w < 0) {
   16288:	9b16      	ldr	r3, [sp, #88]	; 0x58
   1628a:	2b00      	cmp	r3, #0
   1628c:	da07      	bge.n	1629e <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x16e>
        flags |= FLAGS_LEFT;    // reverse padding
   1628e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   16290:	f043 0302 	orr.w	r3, r3, #2
   16294:	931f      	str	r3, [sp, #124]	; 0x7c
        width = (unsigned int)-w;
   16296:	9b16      	ldr	r3, [sp, #88]	; 0x58
   16298:	425b      	negs	r3, r3
   1629a:	931e      	str	r3, [sp, #120]	; 0x78
   1629c:	e001      	b.n	162a2 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x172>
      }
      else {
        width = (unsigned int)w;
   1629e:	9b16      	ldr	r3, [sp, #88]	; 0x58
   162a0:	931e      	str	r3, [sp, #120]	; 0x78
      }
      format++;
   162a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   162a4:	3301      	adds	r3, #1
   162a6:	930a      	str	r3, [sp, #40]	; 0x28
    }

    // evaluate precision field
    precision = 0U;
   162a8:	2300      	movs	r3, #0
   162aa:	931d      	str	r3, [sp, #116]	; 0x74
    if (*format == '.') {
   162ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   162ae:	781b      	ldrb	r3, [r3, #0]
   162b0:	2b2e      	cmp	r3, #46	; 0x2e
   162b2:	d124      	bne.n	162fe <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x1ce>
      flags |= FLAGS_PRECISION;
   162b4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   162b6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
   162ba:	931f      	str	r3, [sp, #124]	; 0x7c
      format++;
   162bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   162be:	3301      	adds	r3, #1
   162c0:	930a      	str	r3, [sp, #40]	; 0x28
      if (_is_digit(*format)) {
   162c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   162c4:	781b      	ldrb	r3, [r3, #0]
   162c6:	4618      	mov	r0, r3
   162c8:	f7ff faaa 	bl	15820 <_is_digit(char)>
   162cc:	4603      	mov	r3, r0
   162ce:	2b00      	cmp	r3, #0
   162d0:	d005      	beq.n	162de <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x1ae>
        precision = _atoi(&format);
   162d2:	ab0a      	add	r3, sp, #40	; 0x28
   162d4:	4618      	mov	r0, r3
   162d6:	f7ff fac5 	bl	15864 <_atoi(char const**)>
   162da:	901d      	str	r0, [sp, #116]	; 0x74
   162dc:	e00f      	b.n	162fe <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x1ce>
      }
      else if (*format == '*') {
   162de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   162e0:	781b      	ldrb	r3, [r3, #0]
   162e2:	2b2a      	cmp	r3, #42	; 0x2a
   162e4:	d10b      	bne.n	162fe <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x1ce>
        const int prec = (int)va_arg(va, int);
   162e6:	9b24      	ldr	r3, [sp, #144]	; 0x90
   162e8:	1d1a      	adds	r2, r3, #4
   162ea:	9224      	str	r2, [sp, #144]	; 0x90
   162ec:	681b      	ldr	r3, [r3, #0]
   162ee:	9315      	str	r3, [sp, #84]	; 0x54
        precision = prec > 0 ? (unsigned int)prec : 0U;
   162f0:	9b15      	ldr	r3, [sp, #84]	; 0x54
   162f2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   162f6:	931d      	str	r3, [sp, #116]	; 0x74
        format++;
   162f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   162fa:	3301      	adds	r3, #1
   162fc:	930a      	str	r3, [sp, #40]	; 0x28
      }
    }

    // evaluate length field
    switch (*format) {
   162fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   16300:	781b      	ldrb	r3, [r3, #0]
   16302:	3b68      	subs	r3, #104	; 0x68
   16304:	2b12      	cmp	r3, #18
   16306:	d867      	bhi.n	163d8 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2a8>
   16308:	a201      	add	r2, pc, #4	; (adr r2, 16310 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x1e0>)
   1630a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1630e:	bf00      	nop
   16310:	00016383 	.word	0x00016383
   16314:	000163d9 	.word	0x000163d9
   16318:	000163b9 	.word	0x000163b9
   1631c:	000163d9 	.word	0x000163d9
   16320:	0001635d 	.word	0x0001635d
   16324:	000163d9 	.word	0x000163d9
   16328:	000163d9 	.word	0x000163d9
   1632c:	000163d9 	.word	0x000163d9
   16330:	000163d9 	.word	0x000163d9
   16334:	000163d9 	.word	0x000163d9
   16338:	000163d9 	.word	0x000163d9
   1633c:	000163d9 	.word	0x000163d9
   16340:	000163a9 	.word	0x000163a9
   16344:	000163d9 	.word	0x000163d9
   16348:	000163d9 	.word	0x000163d9
   1634c:	000163d9 	.word	0x000163d9
   16350:	000163d9 	.word	0x000163d9
   16354:	000163d9 	.word	0x000163d9
   16358:	000163c9 	.word	0x000163c9
      case 'l' :
        flags |= FLAGS_LONG;
   1635c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   1635e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   16362:	931f      	str	r3, [sp, #124]	; 0x7c
        format++;
   16364:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   16366:	3301      	adds	r3, #1
   16368:	930a      	str	r3, [sp, #40]	; 0x28
        if (*format == 'l') {
   1636a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1636c:	781b      	ldrb	r3, [r3, #0]
   1636e:	2b6c      	cmp	r3, #108	; 0x6c
   16370:	d134      	bne.n	163dc <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2ac>
          flags |= FLAGS_LONG_LONG;
   16372:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   16374:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   16378:	931f      	str	r3, [sp, #124]	; 0x7c
          format++;
   1637a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1637c:	3301      	adds	r3, #1
   1637e:	930a      	str	r3, [sp, #40]	; 0x28
        }
        break;
   16380:	e02c      	b.n	163dc <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2ac>
      case 'h' :
        flags |= FLAGS_SHORT;
   16382:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   16384:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   16388:	931f      	str	r3, [sp, #124]	; 0x7c
        format++;
   1638a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1638c:	3301      	adds	r3, #1
   1638e:	930a      	str	r3, [sp, #40]	; 0x28
        if (*format == 'h') {
   16390:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   16392:	781b      	ldrb	r3, [r3, #0]
   16394:	2b68      	cmp	r3, #104	; 0x68
   16396:	d127      	bne.n	163e8 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2b8>
          flags |= FLAGS_CHAR;
   16398:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   1639a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1639e:	931f      	str	r3, [sp, #124]	; 0x7c
          format++;
   163a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   163a2:	3301      	adds	r3, #1
   163a4:	930a      	str	r3, [sp, #40]	; 0x28
        }
        break;
   163a6:	e01f      	b.n	163e8 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2b8>
#if defined(PRINTF_SUPPORT_PTRDIFF_T)
      case 't' :
        flags |= (sizeof(ptrdiff_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
   163a8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   163aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   163ae:	931f      	str	r3, [sp, #124]	; 0x7c
        format++;
   163b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   163b2:	3301      	adds	r3, #1
   163b4:	930a      	str	r3, [sp, #40]	; 0x28
        break;
   163b6:	e018      	b.n	163ea <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2ba>
#endif
      case 'j' :
        flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
   163b8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   163ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   163be:	931f      	str	r3, [sp, #124]	; 0x7c
        format++;
   163c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   163c2:	3301      	adds	r3, #1
   163c4:	930a      	str	r3, [sp, #40]	; 0x28
        break;
   163c6:	e010      	b.n	163ea <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2ba>
      case 'z' :
        flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
   163c8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   163ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   163ce:	931f      	str	r3, [sp, #124]	; 0x7c
        format++;
   163d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   163d2:	3301      	adds	r3, #1
   163d4:	930a      	str	r3, [sp, #40]	; 0x28
        break;
   163d6:	e008      	b.n	163ea <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2ba>
      default :
        break;
   163d8:	bf00      	nop
   163da:	e006      	b.n	163ea <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2ba>
        break;
   163dc:	bf00      	nop
   163de:	e004      	b.n	163ea <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2ba>
   163e0:	00016131 	.word	0x00016131
   163e4:	00015769 	.word	0x00015769
        break;
   163e8:	bf00      	nop
    }

    // evaluate specifier
    switch (*format) {
   163ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   163ec:	781b      	ldrb	r3, [r3, #0]
   163ee:	3b25      	subs	r3, #37	; 0x25
   163f0:	2b53      	cmp	r3, #83	; 0x53
   163f2:	f200 82ee 	bhi.w	169d2 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8a2>
   163f6:	a201      	add	r2, pc, #4	; (adr r2, 163fc <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2cc>)
   163f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   163fc:	000169bb 	.word	0x000169bb
   16400:	000169d3 	.word	0x000169d3
   16404:	000169d3 	.word	0x000169d3
   16408:	000169d3 	.word	0x000169d3
   1640c:	000169d3 	.word	0x000169d3
   16410:	000169d3 	.word	0x000169d3
   16414:	000169d3 	.word	0x000169d3
   16418:	000169d3 	.word	0x000169d3
   1641c:	000169d3 	.word	0x000169d3
   16420:	000169d3 	.word	0x000169d3
   16424:	000169d3 	.word	0x000169d3
   16428:	000169d3 	.word	0x000169d3
   1642c:	000169d3 	.word	0x000169d3
   16430:	000169d3 	.word	0x000169d3
   16434:	000169d3 	.word	0x000169d3
   16438:	000169d3 	.word	0x000169d3
   1643c:	000169d3 	.word	0x000169d3
   16440:	000169d3 	.word	0x000169d3
   16444:	000169d3 	.word	0x000169d3
   16448:	000169d3 	.word	0x000169d3
   1644c:	000169d3 	.word	0x000169d3
   16450:	000169d3 	.word	0x000169d3
   16454:	000169d3 	.word	0x000169d3
   16458:	000169d3 	.word	0x000169d3
   1645c:	000169d3 	.word	0x000169d3
   16460:	000169d3 	.word	0x000169d3
   16464:	000169d3 	.word	0x000169d3
   16468:	000169d3 	.word	0x000169d3
   1646c:	000169d3 	.word	0x000169d3
   16470:	000169d3 	.word	0x000169d3
   16474:	000169d3 	.word	0x000169d3
   16478:	000169d3 	.word	0x000169d3
   1647c:	000169d3 	.word	0x000169d3
   16480:	000167d9 	.word	0x000167d9
   16484:	000169d3 	.word	0x000169d3
   16488:	000169d3 	.word	0x000169d3
   1648c:	000169d3 	.word	0x000169d3
   16490:	000169d3 	.word	0x000169d3
   16494:	000169d3 	.word	0x000169d3
   16498:	000169d3 	.word	0x000169d3
   1649c:	000169d3 	.word	0x000169d3
   164a0:	000169d3 	.word	0x000169d3
   164a4:	000169d3 	.word	0x000169d3
   164a8:	000169d3 	.word	0x000169d3
   164ac:	000169d3 	.word	0x000169d3
   164b0:	000169d3 	.word	0x000169d3
   164b4:	000169d3 	.word	0x000169d3
   164b8:	000169d3 	.word	0x000169d3
   164bc:	000169d3 	.word	0x000169d3
   164c0:	000169d3 	.word	0x000169d3
   164c4:	000169d3 	.word	0x000169d3
   164c8:	0001654d 	.word	0x0001654d
   164cc:	000169d3 	.word	0x000169d3
   164d0:	000169d3 	.word	0x000169d3
   164d4:	000169d3 	.word	0x000169d3
   164d8:	000169d3 	.word	0x000169d3
   164dc:	000169d3 	.word	0x000169d3
   164e0:	000169d3 	.word	0x000169d3
   164e4:	000169d3 	.word	0x000169d3
   164e8:	000169d3 	.word	0x000169d3
   164ec:	000169d3 	.word	0x000169d3
   164f0:	0001654d 	.word	0x0001654d
   164f4:	00016815 	.word	0x00016815
   164f8:	0001654d 	.word	0x0001654d
   164fc:	000169d3 	.word	0x000169d3
   16500:	000167d9 	.word	0x000167d9
   16504:	000169d3 	.word	0x000169d3
   16508:	000169d3 	.word	0x000169d3
   1650c:	0001654d 	.word	0x0001654d
   16510:	000169d3 	.word	0x000169d3
   16514:	000169d3 	.word	0x000169d3
   16518:	000169d3 	.word	0x000169d3
   1651c:	000169d3 	.word	0x000169d3
   16520:	000169d3 	.word	0x000169d3
   16524:	0001654d 	.word	0x0001654d
   16528:	00016973 	.word	0x00016973
   1652c:	000169d3 	.word	0x000169d3
   16530:	000169d3 	.word	0x000169d3
   16534:	0001689d 	.word	0x0001689d
   16538:	000169d3 	.word	0x000169d3
   1653c:	0001654d 	.word	0x0001654d
   16540:	000169d3 	.word	0x000169d3
   16544:	000169d3 	.word	0x000169d3
   16548:	0001654d 	.word	0x0001654d
      case 'X' :
      case 'o' :
      case 'b' : {
        // set the base
        unsigned int base;
        if (*format == 'x' || *format == 'X') {
   1654c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1654e:	781b      	ldrb	r3, [r3, #0]
   16550:	2b78      	cmp	r3, #120	; 0x78
   16552:	d003      	beq.n	1655c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x42c>
   16554:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   16556:	781b      	ldrb	r3, [r3, #0]
   16558:	2b58      	cmp	r3, #88	; 0x58
   1655a:	d102      	bne.n	16562 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x432>
          base = 16U;
   1655c:	2310      	movs	r3, #16
   1655e:	931a      	str	r3, [sp, #104]	; 0x68
   16560:	e013      	b.n	1658a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x45a>
        }
        else if (*format == 'o') {
   16562:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   16564:	781b      	ldrb	r3, [r3, #0]
   16566:	2b6f      	cmp	r3, #111	; 0x6f
   16568:	d102      	bne.n	16570 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x440>
          base =  8U;
   1656a:	2308      	movs	r3, #8
   1656c:	931a      	str	r3, [sp, #104]	; 0x68
   1656e:	e00c      	b.n	1658a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x45a>
        }
        else if (*format == 'b') {
   16570:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   16572:	781b      	ldrb	r3, [r3, #0]
   16574:	2b62      	cmp	r3, #98	; 0x62
   16576:	d102      	bne.n	1657e <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x44e>
          base =  2U;
   16578:	2302      	movs	r3, #2
   1657a:	931a      	str	r3, [sp, #104]	; 0x68
   1657c:	e005      	b.n	1658a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x45a>
        }
        else {
          base = 10U;
   1657e:	230a      	movs	r3, #10
   16580:	931a      	str	r3, [sp, #104]	; 0x68
          flags &= ~FLAGS_HASH;   // no hash for dec format
   16582:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   16584:	f023 0310 	bic.w	r3, r3, #16
   16588:	931f      	str	r3, [sp, #124]	; 0x7c
        }
        // uppercase
        if (*format == 'X') {
   1658a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1658c:	781b      	ldrb	r3, [r3, #0]
   1658e:	2b58      	cmp	r3, #88	; 0x58
   16590:	d103      	bne.n	1659a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x46a>
          flags |= FLAGS_UPPERCASE;
   16592:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   16594:	f043 0320 	orr.w	r3, r3, #32
   16598:	931f      	str	r3, [sp, #124]	; 0x7c
        }

        // no plus or space flag for u, x, X, o, b
        if ((*format != 'i') && (*format != 'd')) {
   1659a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1659c:	781b      	ldrb	r3, [r3, #0]
   1659e:	2b69      	cmp	r3, #105	; 0x69
   165a0:	d007      	beq.n	165b2 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x482>
   165a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   165a4:	781b      	ldrb	r3, [r3, #0]
   165a6:	2b64      	cmp	r3, #100	; 0x64
   165a8:	d003      	beq.n	165b2 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x482>
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
   165aa:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   165ac:	f023 030c 	bic.w	r3, r3, #12
   165b0:	931f      	str	r3, [sp, #124]	; 0x7c
        }

        // ignore '0' flag when precision is given
        if (flags & FLAGS_PRECISION) {
   165b2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   165b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
   165b8:	2b00      	cmp	r3, #0
   165ba:	d003      	beq.n	165c4 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x494>
          flags &= ~FLAGS_ZEROPAD;
   165bc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   165be:	f023 0301 	bic.w	r3, r3, #1
   165c2:	931f      	str	r3, [sp, #124]	; 0x7c
        }

        // convert the integer
        if ((*format == 'i') || (*format == 'd')) {
   165c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   165c6:	781b      	ldrb	r3, [r3, #0]
   165c8:	2b69      	cmp	r3, #105	; 0x69
   165ca:	d004      	beq.n	165d6 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x4a6>
   165cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   165ce:	781b      	ldrb	r3, [r3, #0]
   165d0:	2b64      	cmp	r3, #100	; 0x64
   165d2:	f040 808d 	bne.w	166f0 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x5c0>
          // signed
          if (flags & FLAGS_LONG_LONG) {
   165d6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   165d8:	f403 7300 	and.w	r3, r3, #512	; 0x200
   165dc:	2b00      	cmp	r3, #0
   165de:	d02e      	beq.n	1663e <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x50e>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            const long long value = va_arg(va, long long);
   165e0:	9b24      	ldr	r3, [sp, #144]	; 0x90
   165e2:	3307      	adds	r3, #7
   165e4:	f023 0307 	bic.w	r3, r3, #7
   165e8:	f103 0208 	add.w	r2, r3, #8
   165ec:	9224      	str	r2, [sp, #144]	; 0x90
   165ee:	e9d3 3400 	ldrd	r3, r4, [r3]
   165f2:	e9cd 340e 	strd	r3, r4, [sp, #56]	; 0x38
            idx = _ntoa_long_long(out, buffer, idx, maxlen, (unsigned long long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
   165f6:	e9dd 340e 	ldrd	r3, r4, [sp, #56]	; 0x38
   165fa:	2b00      	cmp	r3, #0
   165fc:	f174 0200 	sbcs.w	r2, r4, #0
   16600:	da02      	bge.n	16608 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x4d8>
   16602:	425b      	negs	r3, r3
   16604:	eb64 0444 	sbc.w	r4, r4, r4, lsl #1
   16608:	4619      	mov	r1, r3
   1660a:	4622      	mov	r2, r4
   1660c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1660e:	0fdb      	lsrs	r3, r3, #31
   16610:	b2d8      	uxtb	r0, r3
   16612:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   16614:	f04f 0400 	mov.w	r4, #0
   16618:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
   1661a:	9508      	str	r5, [sp, #32]
   1661c:	9d1e      	ldr	r5, [sp, #120]	; 0x78
   1661e:	9507      	str	r5, [sp, #28]
   16620:	9d1d      	ldr	r5, [sp, #116]	; 0x74
   16622:	9506      	str	r5, [sp, #24]
   16624:	e9cd 3404 	strd	r3, r4, [sp, #16]
   16628:	9002      	str	r0, [sp, #8]
   1662a:	e9cd 1200 	strd	r1, r2, [sp]
   1662e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   16630:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   16632:	990c      	ldr	r1, [sp, #48]	; 0x30
   16634:	980d      	ldr	r0, [sp, #52]	; 0x34
   16636:	f7ff fae5 	bl	15c04 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)>
   1663a:	901b      	str	r0, [sp, #108]	; 0x6c
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
          }
          else {
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
          }
   1663c:	e0c8      	b.n	167d0 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x6a0>
          else if (flags & FLAGS_LONG) {
   1663e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   16640:	f403 7380 	and.w	r3, r3, #256	; 0x100
   16644:	2b00      	cmp	r3, #0
   16646:	d01e      	beq.n	16686 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x556>
            const long value = va_arg(va, long);
   16648:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1664a:	1d1a      	adds	r2, r3, #4
   1664c:	9224      	str	r2, [sp, #144]	; 0x90
   1664e:	681b      	ldr	r3, [r3, #0]
   16650:	9311      	str	r3, [sp, #68]	; 0x44
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
   16652:	9b11      	ldr	r3, [sp, #68]	; 0x44
   16654:	2b00      	cmp	r3, #0
   16656:	bfb8      	it	lt
   16658:	425b      	neglt	r3, r3
   1665a:	4619      	mov	r1, r3
   1665c:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1665e:	0fdb      	lsrs	r3, r3, #31
   16660:	b2db      	uxtb	r3, r3
   16662:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   16664:	9205      	str	r2, [sp, #20]
   16666:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   16668:	9204      	str	r2, [sp, #16]
   1666a:	9a1d      	ldr	r2, [sp, #116]	; 0x74
   1666c:	9203      	str	r2, [sp, #12]
   1666e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   16670:	9202      	str	r2, [sp, #8]
   16672:	9301      	str	r3, [sp, #4]
   16674:	9100      	str	r1, [sp, #0]
   16676:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   16678:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   1667a:	990c      	ldr	r1, [sp, #48]	; 0x30
   1667c:	980d      	ldr	r0, [sp, #52]	; 0x34
   1667e:	f7ff fa4f 	bl	15b20 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)>
   16682:	901b      	str	r0, [sp, #108]	; 0x6c
          }
   16684:	e0a4      	b.n	167d0 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x6a0>
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
   16686:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   16688:	f003 0340 	and.w	r3, r3, #64	; 0x40
   1668c:	2b00      	cmp	r3, #0
   1668e:	d005      	beq.n	1669c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x56c>
   16690:	9b24      	ldr	r3, [sp, #144]	; 0x90
   16692:	1d1a      	adds	r2, r3, #4
   16694:	9224      	str	r2, [sp, #144]	; 0x90
   16696:	681b      	ldr	r3, [r3, #0]
   16698:	b2db      	uxtb	r3, r3
   1669a:	e00e      	b.n	166ba <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x58a>
   1669c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   1669e:	f003 0380 	and.w	r3, r3, #128	; 0x80
   166a2:	2b00      	cmp	r3, #0
   166a4:	d005      	beq.n	166b2 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x582>
   166a6:	9b24      	ldr	r3, [sp, #144]	; 0x90
   166a8:	1d1a      	adds	r2, r3, #4
   166aa:	9224      	str	r2, [sp, #144]	; 0x90
   166ac:	681b      	ldr	r3, [r3, #0]
   166ae:	b21b      	sxth	r3, r3
   166b0:	e003      	b.n	166ba <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x58a>
   166b2:	9b24      	ldr	r3, [sp, #144]	; 0x90
   166b4:	1d1a      	adds	r2, r3, #4
   166b6:	9224      	str	r2, [sp, #144]	; 0x90
   166b8:	681b      	ldr	r3, [r3, #0]
   166ba:	9312      	str	r3, [sp, #72]	; 0x48
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
   166bc:	9b12      	ldr	r3, [sp, #72]	; 0x48
   166be:	2b00      	cmp	r3, #0
   166c0:	bfb8      	it	lt
   166c2:	425b      	neglt	r3, r3
   166c4:	4619      	mov	r1, r3
   166c6:	9b12      	ldr	r3, [sp, #72]	; 0x48
   166c8:	0fdb      	lsrs	r3, r3, #31
   166ca:	b2db      	uxtb	r3, r3
   166cc:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   166ce:	9205      	str	r2, [sp, #20]
   166d0:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   166d2:	9204      	str	r2, [sp, #16]
   166d4:	9a1d      	ldr	r2, [sp, #116]	; 0x74
   166d6:	9203      	str	r2, [sp, #12]
   166d8:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   166da:	9202      	str	r2, [sp, #8]
   166dc:	9301      	str	r3, [sp, #4]
   166de:	9100      	str	r1, [sp, #0]
   166e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   166e2:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   166e4:	990c      	ldr	r1, [sp, #48]	; 0x30
   166e6:	980d      	ldr	r0, [sp, #52]	; 0x34
   166e8:	f7ff fa1a 	bl	15b20 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)>
   166ec:	901b      	str	r0, [sp, #108]	; 0x6c
          }
   166ee:	e06f      	b.n	167d0 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x6a0>
        }
        else {
          // unsigned
          if (flags & FLAGS_LONG_LONG) {
   166f0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   166f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
   166f6:	2b00      	cmp	r3, #0
   166f8:	d020      	beq.n	1673c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x60c>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base, precision, width, flags);
   166fa:	9b24      	ldr	r3, [sp, #144]	; 0x90
   166fc:	3307      	adds	r3, #7
   166fe:	f023 0307 	bic.w	r3, r3, #7
   16702:	f103 0208 	add.w	r2, r3, #8
   16706:	9224      	str	r2, [sp, #144]	; 0x90
   16708:	e9d3 3400 	ldrd	r3, r4, [r3]
   1670c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   1670e:	4611      	mov	r1, r2
   16710:	f04f 0200 	mov.w	r2, #0
   16714:	981f      	ldr	r0, [sp, #124]	; 0x7c
   16716:	9008      	str	r0, [sp, #32]
   16718:	981e      	ldr	r0, [sp, #120]	; 0x78
   1671a:	9007      	str	r0, [sp, #28]
   1671c:	981d      	ldr	r0, [sp, #116]	; 0x74
   1671e:	9006      	str	r0, [sp, #24]
   16720:	e9cd 1204 	strd	r1, r2, [sp, #16]
   16724:	2200      	movs	r2, #0
   16726:	9202      	str	r2, [sp, #8]
   16728:	e9cd 3400 	strd	r3, r4, [sp]
   1672c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1672e:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   16730:	990c      	ldr	r1, [sp, #48]	; 0x30
   16732:	980d      	ldr	r0, [sp, #52]	; 0x34
   16734:	f7ff fa66 	bl	15c04 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)>
   16738:	901b      	str	r0, [sp, #108]	; 0x6c
   1673a:	e049      	b.n	167d0 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x6a0>
#endif
          }
          else if (flags & FLAGS_LONG) {
   1673c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   1673e:	f403 7380 	and.w	r3, r3, #256	; 0x100
   16742:	2b00      	cmp	r3, #0
   16744:	d016      	beq.n	16774 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x644>
            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
   16746:	9b24      	ldr	r3, [sp, #144]	; 0x90
   16748:	1d1a      	adds	r2, r3, #4
   1674a:	9224      	str	r2, [sp, #144]	; 0x90
   1674c:	681b      	ldr	r3, [r3, #0]
   1674e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   16750:	9205      	str	r2, [sp, #20]
   16752:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   16754:	9204      	str	r2, [sp, #16]
   16756:	9a1d      	ldr	r2, [sp, #116]	; 0x74
   16758:	9203      	str	r2, [sp, #12]
   1675a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   1675c:	9202      	str	r2, [sp, #8]
   1675e:	2200      	movs	r2, #0
   16760:	9201      	str	r2, [sp, #4]
   16762:	9300      	str	r3, [sp, #0]
   16764:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   16766:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   16768:	990c      	ldr	r1, [sp, #48]	; 0x30
   1676a:	980d      	ldr	r0, [sp, #52]	; 0x34
   1676c:	f7ff f9d8 	bl	15b20 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)>
   16770:	901b      	str	r0, [sp, #108]	; 0x6c
   16772:	e02d      	b.n	167d0 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x6a0>
          }
          else {
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
   16774:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   16776:	f003 0340 	and.w	r3, r3, #64	; 0x40
   1677a:	2b00      	cmp	r3, #0
   1677c:	d005      	beq.n	1678a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x65a>
   1677e:	9b24      	ldr	r3, [sp, #144]	; 0x90
   16780:	1d1a      	adds	r2, r3, #4
   16782:	9224      	str	r2, [sp, #144]	; 0x90
   16784:	681b      	ldr	r3, [r3, #0]
   16786:	b2db      	uxtb	r3, r3
   16788:	e00e      	b.n	167a8 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x678>
   1678a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   1678c:	f003 0380 	and.w	r3, r3, #128	; 0x80
   16790:	2b00      	cmp	r3, #0
   16792:	d005      	beq.n	167a0 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x670>
   16794:	9b24      	ldr	r3, [sp, #144]	; 0x90
   16796:	1d1a      	adds	r2, r3, #4
   16798:	9224      	str	r2, [sp, #144]	; 0x90
   1679a:	681b      	ldr	r3, [r3, #0]
   1679c:	b29b      	uxth	r3, r3
   1679e:	e003      	b.n	167a8 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x678>
   167a0:	9b24      	ldr	r3, [sp, #144]	; 0x90
   167a2:	1d1a      	adds	r2, r3, #4
   167a4:	9224      	str	r2, [sp, #144]	; 0x90
   167a6:	681b      	ldr	r3, [r3, #0]
   167a8:	9313      	str	r3, [sp, #76]	; 0x4c
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
   167aa:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   167ac:	9305      	str	r3, [sp, #20]
   167ae:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   167b0:	9304      	str	r3, [sp, #16]
   167b2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   167b4:	9303      	str	r3, [sp, #12]
   167b6:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   167b8:	9302      	str	r3, [sp, #8]
   167ba:	2300      	movs	r3, #0
   167bc:	9301      	str	r3, [sp, #4]
   167be:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   167c0:	9300      	str	r3, [sp, #0]
   167c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   167c4:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   167c6:	990c      	ldr	r1, [sp, #48]	; 0x30
   167c8:	980d      	ldr	r0, [sp, #52]	; 0x34
   167ca:	f7ff f9a9 	bl	15b20 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)>
   167ce:	901b      	str	r0, [sp, #108]	; 0x6c
          }
        }
        format++;
   167d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   167d2:	3301      	adds	r3, #1
   167d4:	930a      	str	r3, [sp, #40]	; 0x28
        break;
   167d6:	e109      	b.n	169ec <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8bc>
      }
#if defined(PRINTF_SUPPORT_FLOAT)
      case 'f' :
      case 'F' :
        idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
   167d8:	9b24      	ldr	r3, [sp, #144]	; 0x90
   167da:	3307      	adds	r3, #7
   167dc:	f023 0307 	bic.w	r3, r3, #7
   167e0:	f103 0208 	add.w	r2, r3, #8
   167e4:	9224      	str	r2, [sp, #144]	; 0x90
   167e6:	ed93 7b00 	vldr	d7, [r3]
   167ea:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   167ec:	9302      	str	r3, [sp, #8]
   167ee:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   167f0:	9301      	str	r3, [sp, #4]
   167f2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   167f4:	9300      	str	r3, [sp, #0]
   167f6:	eeb0 0a47 	vmov.f32	s0, s14
   167fa:	eef0 0a67 	vmov.f32	s1, s15
   167fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   16800:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   16802:	990c      	ldr	r1, [sp, #48]	; 0x30
   16804:	980d      	ldr	r0, [sp, #52]	; 0x34
   16806:	f7ff fa77 	bl	15cf8 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)>
   1680a:	901b      	str	r0, [sp, #108]	; 0x6c
        format++;
   1680c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1680e:	3301      	adds	r3, #1
   16810:	930a      	str	r3, [sp, #40]	; 0x28
        break;
   16812:	e0eb      	b.n	169ec <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8bc>
#endif  // PRINTF_SUPPORT_FLOAT
      case 'c' : {
        unsigned int l = 1U;
   16814:	2301      	movs	r3, #1
   16816:	9319      	str	r3, [sp, #100]	; 0x64
        // pre padding
        if (!(flags & FLAGS_LEFT)) {
   16818:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   1681a:	f003 0302 	and.w	r3, r3, #2
   1681e:	2b00      	cmp	r3, #0
   16820:	d113      	bne.n	1684a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x71a>
          while (l++ < width) {
   16822:	9b19      	ldr	r3, [sp, #100]	; 0x64
   16824:	1c5a      	adds	r2, r3, #1
   16826:	9219      	str	r2, [sp, #100]	; 0x64
   16828:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   1682a:	429a      	cmp	r2, r3
   1682c:	bf8c      	ite	hi
   1682e:	2301      	movhi	r3, #1
   16830:	2300      	movls	r3, #0
   16832:	b2db      	uxtb	r3, r3
   16834:	2b00      	cmp	r3, #0
   16836:	d008      	beq.n	1684a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x71a>
            out(' ', buffer, idx++, maxlen);
   16838:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   1683a:	1c53      	adds	r3, r2, #1
   1683c:	931b      	str	r3, [sp, #108]	; 0x6c
   1683e:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   16840:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   16842:	990c      	ldr	r1, [sp, #48]	; 0x30
   16844:	2020      	movs	r0, #32
   16846:	47a0      	blx	r4
          while (l++ < width) {
   16848:	e7eb      	b.n	16822 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x6f2>
          }
        }
        // char output
        out((char)va_arg(va, int), buffer, idx++, maxlen);
   1684a:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1684c:	1d1a      	adds	r2, r3, #4
   1684e:	9224      	str	r2, [sp, #144]	; 0x90
   16850:	681b      	ldr	r3, [r3, #0]
   16852:	b2d8      	uxtb	r0, r3
   16854:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   16856:	1c53      	adds	r3, r2, #1
   16858:	931b      	str	r3, [sp, #108]	; 0x6c
   1685a:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   1685c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1685e:	990c      	ldr	r1, [sp, #48]	; 0x30
   16860:	47a0      	blx	r4
        // post padding
        if (flags & FLAGS_LEFT) {
   16862:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   16864:	f003 0302 	and.w	r3, r3, #2
   16868:	2b00      	cmp	r3, #0
   1686a:	d013      	beq.n	16894 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x764>
          while (l++ < width) {
   1686c:	9b19      	ldr	r3, [sp, #100]	; 0x64
   1686e:	1c5a      	adds	r2, r3, #1
   16870:	9219      	str	r2, [sp, #100]	; 0x64
   16872:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   16874:	429a      	cmp	r2, r3
   16876:	bf8c      	ite	hi
   16878:	2301      	movhi	r3, #1
   1687a:	2300      	movls	r3, #0
   1687c:	b2db      	uxtb	r3, r3
   1687e:	2b00      	cmp	r3, #0
   16880:	d008      	beq.n	16894 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x764>
            out(' ', buffer, idx++, maxlen);
   16882:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   16884:	1c53      	adds	r3, r2, #1
   16886:	931b      	str	r3, [sp, #108]	; 0x6c
   16888:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   1688a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1688c:	990c      	ldr	r1, [sp, #48]	; 0x30
   1688e:	2020      	movs	r0, #32
   16890:	47a0      	blx	r4
          while (l++ < width) {
   16892:	e7eb      	b.n	1686c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x73c>
          }
        }
        format++;
   16894:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   16896:	3301      	adds	r3, #1
   16898:	930a      	str	r3, [sp, #40]	; 0x28
        break;
   1689a:	e0a7      	b.n	169ec <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8bc>
      }

      case 's' : {
        char* p = va_arg(va, char*);
   1689c:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1689e:	1d1a      	adds	r2, r3, #4
   168a0:	9224      	str	r2, [sp, #144]	; 0x90
   168a2:	681b      	ldr	r3, [r3, #0]
   168a4:	9318      	str	r3, [sp, #96]	; 0x60
        unsigned int l = _strlen(p);
   168a6:	9818      	ldr	r0, [sp, #96]	; 0x60
   168a8:	f7fe ff98 	bl	157dc <_strlen(char const*)>
   168ac:	9017      	str	r0, [sp, #92]	; 0x5c
        // pre padding
        if (flags & FLAGS_PRECISION) {
   168ae:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   168b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
   168b4:	2b00      	cmp	r3, #0
   168b6:	d007      	beq.n	168c8 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x798>
          l = (l < precision ? l : precision);
   168b8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   168ba:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   168bc:	429a      	cmp	r2, r3
   168be:	d201      	bcs.n	168c4 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x794>
   168c0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   168c2:	e000      	b.n	168c6 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x796>
   168c4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   168c6:	9317      	str	r3, [sp, #92]	; 0x5c
        }
        if (!(flags & FLAGS_LEFT)) {
   168c8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   168ca:	f003 0302 	and.w	r3, r3, #2
   168ce:	2b00      	cmp	r3, #0
   168d0:	d113      	bne.n	168fa <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7ca>
          while (l++ < width) {
   168d2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   168d4:	1c5a      	adds	r2, r3, #1
   168d6:	9217      	str	r2, [sp, #92]	; 0x5c
   168d8:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   168da:	429a      	cmp	r2, r3
   168dc:	bf8c      	ite	hi
   168de:	2301      	movhi	r3, #1
   168e0:	2300      	movls	r3, #0
   168e2:	b2db      	uxtb	r3, r3
   168e4:	2b00      	cmp	r3, #0
   168e6:	d008      	beq.n	168fa <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7ca>
            out(' ', buffer, idx++, maxlen);
   168e8:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   168ea:	1c53      	adds	r3, r2, #1
   168ec:	931b      	str	r3, [sp, #108]	; 0x6c
   168ee:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   168f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   168f2:	990c      	ldr	r1, [sp, #48]	; 0x30
   168f4:	2020      	movs	r0, #32
   168f6:	47a0      	blx	r4
          while (l++ < width) {
   168f8:	e7eb      	b.n	168d2 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7a2>
          }
        }
        // string output
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
   168fa:	9b18      	ldr	r3, [sp, #96]	; 0x60
   168fc:	781b      	ldrb	r3, [r3, #0]
   168fe:	2b00      	cmp	r3, #0
   16900:	d00b      	beq.n	1691a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7ea>
   16902:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   16904:	f403 6380 	and.w	r3, r3, #1024	; 0x400
   16908:	2b00      	cmp	r3, #0
   1690a:	d004      	beq.n	16916 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7e6>
   1690c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   1690e:	1e5a      	subs	r2, r3, #1
   16910:	921d      	str	r2, [sp, #116]	; 0x74
   16912:	2b00      	cmp	r3, #0
   16914:	d001      	beq.n	1691a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7ea>
   16916:	2301      	movs	r3, #1
   16918:	e000      	b.n	1691c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7ec>
   1691a:	2300      	movs	r3, #0
   1691c:	2b00      	cmp	r3, #0
   1691e:	d00b      	beq.n	16938 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x808>
          out(*(p++), buffer, idx++, maxlen);
   16920:	9b18      	ldr	r3, [sp, #96]	; 0x60
   16922:	1c5a      	adds	r2, r3, #1
   16924:	9218      	str	r2, [sp, #96]	; 0x60
   16926:	7818      	ldrb	r0, [r3, #0]
   16928:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   1692a:	1c53      	adds	r3, r2, #1
   1692c:	931b      	str	r3, [sp, #108]	; 0x6c
   1692e:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   16930:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   16932:	990c      	ldr	r1, [sp, #48]	; 0x30
   16934:	47a0      	blx	r4
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
   16936:	e7e0      	b.n	168fa <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7ca>
        }
        // post padding
        if (flags & FLAGS_LEFT) {
   16938:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   1693a:	f003 0302 	and.w	r3, r3, #2
   1693e:	2b00      	cmp	r3, #0
   16940:	d013      	beq.n	1696a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x83a>
          while (l++ < width) {
   16942:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   16944:	1c5a      	adds	r2, r3, #1
   16946:	9217      	str	r2, [sp, #92]	; 0x5c
   16948:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   1694a:	429a      	cmp	r2, r3
   1694c:	bf8c      	ite	hi
   1694e:	2301      	movhi	r3, #1
   16950:	2300      	movls	r3, #0
   16952:	b2db      	uxtb	r3, r3
   16954:	2b00      	cmp	r3, #0
   16956:	d008      	beq.n	1696a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x83a>
            out(' ', buffer, idx++, maxlen);
   16958:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   1695a:	1c53      	adds	r3, r2, #1
   1695c:	931b      	str	r3, [sp, #108]	; 0x6c
   1695e:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   16960:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   16962:	990c      	ldr	r1, [sp, #48]	; 0x30
   16964:	2020      	movs	r0, #32
   16966:	47a0      	blx	r4
          while (l++ < width) {
   16968:	e7eb      	b.n	16942 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x812>
          }
        }
        format++;
   1696a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1696c:	3301      	adds	r3, #1
   1696e:	930a      	str	r3, [sp, #40]	; 0x28
        break;
   16970:	e03c      	b.n	169ec <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8bc>
      }

      case 'p' : {
        width = sizeof(void*) * 2U;
   16972:	2308      	movs	r3, #8
   16974:	931e      	str	r3, [sp, #120]	; 0x78
        flags |= FLAGS_ZEROPAD | FLAGS_UPPERCASE;
   16976:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   16978:	f043 0321 	orr.w	r3, r3, #33	; 0x21
   1697c:	931f      	str	r3, [sp, #124]	; 0x7c
#if defined(PRINTF_SUPPORT_LONG_LONG)
        const bool is_ll = sizeof(uintptr_t) == sizeof(long long);
   1697e:	2300      	movs	r3, #0
   16980:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
        if (is_ll) {
          idx = _ntoa_long_long(out, buffer, idx, maxlen, (uintptr_t)va_arg(va, void*), false, 16U, precision, width, flags);
        }
        else {
#endif
          idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void*)), false, 16U, precision, width, flags);
   16984:	9b24      	ldr	r3, [sp, #144]	; 0x90
   16986:	1d1a      	adds	r2, r3, #4
   16988:	9224      	str	r2, [sp, #144]	; 0x90
   1698a:	681b      	ldr	r3, [r3, #0]
   1698c:	461a      	mov	r2, r3
   1698e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   16990:	9305      	str	r3, [sp, #20]
   16992:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   16994:	9304      	str	r3, [sp, #16]
   16996:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   16998:	9303      	str	r3, [sp, #12]
   1699a:	2310      	movs	r3, #16
   1699c:	9302      	str	r3, [sp, #8]
   1699e:	2300      	movs	r3, #0
   169a0:	9301      	str	r3, [sp, #4]
   169a2:	9200      	str	r2, [sp, #0]
   169a4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   169a6:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   169a8:	990c      	ldr	r1, [sp, #48]	; 0x30
   169aa:	980d      	ldr	r0, [sp, #52]	; 0x34
   169ac:	f7ff f8b8 	bl	15b20 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)>
   169b0:	901b      	str	r0, [sp, #108]	; 0x6c
#if defined(PRINTF_SUPPORT_LONG_LONG)
        }
#endif
        format++;
   169b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   169b4:	3301      	adds	r3, #1
   169b6:	930a      	str	r3, [sp, #40]	; 0x28
        break;
   169b8:	e018      	b.n	169ec <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8bc>
      }

      case '%' :
        out('%', buffer, idx++, maxlen);
   169ba:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   169bc:	1c53      	adds	r3, r2, #1
   169be:	931b      	str	r3, [sp, #108]	; 0x6c
   169c0:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   169c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   169c4:	990c      	ldr	r1, [sp, #48]	; 0x30
   169c6:	2025      	movs	r0, #37	; 0x25
   169c8:	47a0      	blx	r4
        format++;
   169ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   169cc:	3301      	adds	r3, #1
   169ce:	930a      	str	r3, [sp, #40]	; 0x28
        break;
   169d0:	e00c      	b.n	169ec <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8bc>

      default :
        out(*format, buffer, idx++, maxlen);
   169d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   169d4:	7818      	ldrb	r0, [r3, #0]
   169d6:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   169d8:	1c53      	adds	r3, r2, #1
   169da:	931b      	str	r3, [sp, #108]	; 0x6c
   169dc:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   169de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   169e0:	990c      	ldr	r1, [sp, #48]	; 0x30
   169e2:	47a0      	blx	r4
        format++;
   169e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   169e6:	3301      	adds	r3, #1
   169e8:	930a      	str	r3, [sp, #40]	; 0x28
        break;
   169ea:	bf00      	nop
  while (*format)
   169ec:	f7ff bbb3 	b.w	16156 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x26>
    }
  }

  // termination
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
   169f0:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   169f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   169f4:	429a      	cmp	r2, r3
   169f6:	d302      	bcc.n	169fe <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8ce>
   169f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   169fa:	1e5a      	subs	r2, r3, #1
   169fc:	e000      	b.n	16a00 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8d0>
   169fe:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   16a00:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   16a02:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   16a04:	990c      	ldr	r1, [sp, #48]	; 0x30
   16a06:	2000      	movs	r0, #0
   16a08:	47a0      	blx	r4

  // return written chars without terminating \0
  return (int)idx;
   16a0a:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
   16a0c:	4633      	mov	r3, r6
   16a0e:	4619      	mov	r1, r3
   16a10:	4803      	ldr	r0, [pc, #12]	; (16a20 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8f0>)
   16a12:	f7fe fdbf 	bl	15594 <__cyg_profile_func_exit>
   16a16:	4623      	mov	r3, r4
}
   16a18:	4618      	mov	r0, r3
   16a1a:	b020      	add	sp, #128	; 0x80
   16a1c:	bd70      	pop	{r4, r5, r6, pc}
   16a1e:	bf00      	nop
   16a20:	00016131 	.word	0x00016131

00016a24 <printf>:

///////////////////////////////////////////////////////////////////////////////


int printf(const char* format, ...)
{
   16a24:	b40f      	push	{r0, r1, r2, r3}
   16a26:	b530      	push	{r4, r5, lr}
   16a28:	b087      	sub	sp, #28
   16a2a:	4675      	mov	r5, lr
   16a2c:	462b      	mov	r3, r5
   16a2e:	4619      	mov	r1, r3
   16a30:	480d      	ldr	r0, [pc, #52]	; (16a68 <printf+0x44>)
   16a32:	f7fe fd9b 	bl	1556c <__cyg_profile_func_enter>
  va_list va;
  va_start(va, format);
   16a36:	ab0b      	add	r3, sp, #44	; 0x2c
   16a38:	9304      	str	r3, [sp, #16]
  char buffer[1];
  const int ret = _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
   16a3a:	a903      	add	r1, sp, #12
   16a3c:	9b04      	ldr	r3, [sp, #16]
   16a3e:	9300      	str	r3, [sp, #0]
   16a40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   16a42:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   16a46:	4809      	ldr	r0, [pc, #36]	; (16a6c <printf+0x48>)
   16a48:	f7ff fb72 	bl	16130 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)>
   16a4c:	9005      	str	r0, [sp, #20]
  va_end(va);
  return ret;
   16a4e:	9c05      	ldr	r4, [sp, #20]
   16a50:	462b      	mov	r3, r5
   16a52:	4619      	mov	r1, r3
   16a54:	4804      	ldr	r0, [pc, #16]	; (16a68 <printf+0x44>)
   16a56:	f7fe fd9d 	bl	15594 <__cyg_profile_func_exit>
   16a5a:	4623      	mov	r3, r4
}
   16a5c:	4618      	mov	r0, r3
   16a5e:	b007      	add	sp, #28
   16a60:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   16a64:	b004      	add	sp, #16
   16a66:	4770      	bx	lr
   16a68:	00016a25 	.word	0x00016a25
   16a6c:	00015799 	.word	0x00015799

00016a70 <Wait(unsigned long long)::{lambda()#1}::operator()() const>:

inline Status Wait(uint64_t timeout)
{
  return Wait(timeout, []() -> bool { return false; });
   16a70:	b530      	push	{r4, r5, lr}
   16a72:	b083      	sub	sp, #12
   16a74:	4675      	mov	r5, lr
   16a76:	9001      	str	r0, [sp, #4]
   16a78:	462b      	mov	r3, r5
   16a7a:	4619      	mov	r1, r3
   16a7c:	4806      	ldr	r0, [pc, #24]	; (16a98 <Wait(unsigned long long)::{lambda()#1}::operator()() const+0x28>)
   16a7e:	f7fe fd75 	bl	1556c <__cyg_profile_func_enter>
   16a82:	2400      	movs	r4, #0
   16a84:	462b      	mov	r3, r5
   16a86:	4619      	mov	r1, r3
   16a88:	4803      	ldr	r0, [pc, #12]	; (16a98 <Wait(unsigned long long)::{lambda()#1}::operator()() const+0x28>)
   16a8a:	f7fe fd83 	bl	15594 <__cyg_profile_func_exit>
   16a8e:	4623      	mov	r3, r4
   16a90:	4618      	mov	r0, r3
   16a92:	b003      	add	sp, #12
   16a94:	bd30      	pop	{r4, r5, pc}
   16a96:	bf00      	nop
   16a98:	00016a71 	.word	0x00016a71

00016a9c <Wait(unsigned long long)::{lambda()#1}::_FUN()>:
   16a9c:	b538      	push	{r3, r4, r5, lr}
   16a9e:	4674      	mov	r4, lr
   16aa0:	4623      	mov	r3, r4
   16aa2:	4619      	mov	r1, r3
   16aa4:	4807      	ldr	r0, [pc, #28]	; (16ac4 <Wait(unsigned long long)::{lambda()#1}::_FUN()+0x28>)
   16aa6:	f7fe fd61 	bl	1556c <__cyg_profile_func_enter>
   16aaa:	2000      	movs	r0, #0
   16aac:	f7ff ffe0 	bl	16a70 <Wait(unsigned long long)::{lambda()#1}::operator()() const>
   16ab0:	4603      	mov	r3, r0
   16ab2:	461d      	mov	r5, r3
   16ab4:	4623      	mov	r3, r4
   16ab6:	4619      	mov	r1, r3
   16ab8:	4802      	ldr	r0, [pc, #8]	; (16ac4 <Wait(unsigned long long)::{lambda()#1}::_FUN()+0x28>)
   16aba:	f7fe fd6b 	bl	15594 <__cyg_profile_func_exit>
   16abe:	462b      	mov	r3, r5
   16ac0:	4618      	mov	r0, r3
   16ac2:	bd38      	pop	{r3, r4, r5, pc}
   16ac4:	00016a9d 	.word	0x00016a9d

00016ac8 <Wait(unsigned long long)>:
{
   16ac8:	b5f0      	push	{r4, r5, r6, r7, lr}
   16aca:	b089      	sub	sp, #36	; 0x24
   16acc:	4675      	mov	r5, lr
   16ace:	e9cd 0100 	strd	r0, r1, [sp]
   16ad2:	462b      	mov	r3, r5
   16ad4:	4619      	mov	r1, r3
   16ad6:	482b      	ldr	r0, [pc, #172]	; (16b84 <Wait(unsigned long long)+0xbc>)
   16ad8:	f7fe fd48 	bl	1556c <__cyg_profile_func_enter>
   16adc:	e9dd 3400 	ldrd	r3, r4, [sp]
   16ae0:	e9cd 3406 	strd	r3, r4, [sp, #24]
   16ae4:	f88d 6008 	strb.w	r6, [sp, #8]
   16ae8:	462b      	mov	r3, r5
   16aea:	4619      	mov	r1, r3
   16aec:	4826      	ldr	r0, [pc, #152]	; (16b88 <Wait(unsigned long long)+0xc0>)
   16aee:	f7fe fd3d 	bl	1556c <__cyg_profile_func_enter>
  uint64_t timeout_time = 0;
   16af2:	f04f 0300 	mov.w	r3, #0
   16af6:	f04f 0400 	mov.w	r4, #0
   16afa:	e9cd 3404 	strd	r3, r4, [sp, #16]
  if (timeout == kMaxWait)
   16afe:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
   16b02:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
   16b06:	bf08      	it	eq
   16b08:	f1b3 3fff 	cmpeq.w	r3, #4294967295	; 0xffffffff
   16b0c:	d106      	bne.n	16b1c <Wait(unsigned long long)+0x54>
    timeout_time = kMaxWait;
   16b0e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   16b12:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   16b16:	e9cd 3404 	strd	r3, r4, [sp, #16]
   16b1a:	e00a      	b.n	16b32 <Wait(unsigned long long)+0x6a>
    timeout_time = Milliseconds() + timeout;
   16b1c:	f7fa fa04 	bl	10f28 <Milliseconds()>
   16b20:	460a      	mov	r2, r1
   16b22:	4601      	mov	r1, r0
   16b24:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
   16b28:	185e      	adds	r6, r3, r1
   16b2a:	eb44 0702 	adc.w	r7, r4, r2
   16b2e:	e9cd 6704 	strd	r6, r7, [sp, #16]
  Status status = Status::kTimedOut;
   16b32:	2301      	movs	r3, #1
   16b34:	9303      	str	r3, [sp, #12]
  while (Milliseconds() < timeout_time)
   16b36:	f7fa f9f7 	bl	10f28 <Milliseconds()>
   16b3a:	460a      	mov	r2, r1
   16b3c:	4601      	mov	r1, r0
   16b3e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
   16b42:	42a2      	cmp	r2, r4
   16b44:	bf08      	it	eq
   16b46:	4299      	cmpeq	r1, r3
   16b48:	bf34      	ite	cc
   16b4a:	2301      	movcc	r3, #1
   16b4c:	2300      	movcs	r3, #0
   16b4e:	b2db      	uxtb	r3, r3
   16b50:	2b00      	cmp	r3, #0
   16b52:	d008      	beq.n	16b66 <Wait(unsigned long long)+0x9e>
    if (is_done())
   16b54:	ab02      	add	r3, sp, #8
   16b56:	4618      	mov	r0, r3
   16b58:	f7ff ff8a 	bl	16a70 <Wait(unsigned long long)::{lambda()#1}::operator()() const>
   16b5c:	4603      	mov	r3, r0
   16b5e:	2b00      	cmp	r3, #0
   16b60:	d0e9      	beq.n	16b36 <Wait(unsigned long long)+0x6e>
      status = Status::kSuccess;
   16b62:	2300      	movs	r3, #0
   16b64:	9303      	str	r3, [sp, #12]
  return status;
   16b66:	9c03      	ldr	r4, [sp, #12]
   16b68:	462b      	mov	r3, r5
   16b6a:	4619      	mov	r1, r3
   16b6c:	4806      	ldr	r0, [pc, #24]	; (16b88 <Wait(unsigned long long)+0xc0>)
   16b6e:	f7fe fd11 	bl	15594 <__cyg_profile_func_exit>
   16b72:	462b      	mov	r3, r5
   16b74:	4619      	mov	r1, r3
   16b76:	4803      	ldr	r0, [pc, #12]	; (16b84 <Wait(unsigned long long)+0xbc>)
   16b78:	f7fe fd0c 	bl	15594 <__cyg_profile_func_exit>
  return Wait(timeout, []() -> bool { return false; });
   16b7c:	4623      	mov	r3, r4
}
   16b7e:	4618      	mov	r0, r3
   16b80:	b009      	add	sp, #36	; 0x24
   16b82:	bdf0      	pop	{r4, r5, r6, r7, pc}
   16b84:	00016ac9 	.word	0x00016ac9
   16b88:	00017e8d 	.word	0x00017e8d

00016b8c <Delay(unsigned long long)>:

// Delay the system for a duration of time
inline void Delay([[maybe_unused]] uint64_t delay_time_ms)
{
   16b8c:	b510      	push	{r4, lr}
   16b8e:	b082      	sub	sp, #8
   16b90:	4674      	mov	r4, lr
   16b92:	e9cd 0100 	strd	r0, r1, [sp]
   16b96:	4623      	mov	r3, r4
   16b98:	4619      	mov	r1, r3
   16b9a:	4807      	ldr	r0, [pc, #28]	; (16bb8 <Delay(unsigned long long)+0x2c>)
   16b9c:	f7fe fce6 	bl	1556c <__cyg_profile_func_enter>
#if defined(HOST_TEST)
  return;
#else
  Wait(delay_time_ms);
   16ba0:	e9dd 0100 	ldrd	r0, r1, [sp]
   16ba4:	f7ff ff90 	bl	16ac8 <Wait(unsigned long long)>
   16ba8:	4623      	mov	r3, r4
   16baa:	4619      	mov	r1, r3
   16bac:	4802      	ldr	r0, [pc, #8]	; (16bb8 <Delay(unsigned long long)+0x2c>)
   16bae:	f7fe fcf1 	bl	15594 <__cyg_profile_func_exit>
#endif  // HOST_TEST
}
   16bb2:	bf00      	nop
   16bb4:	b002      	add	sp, #8
   16bb6:	bd10      	pop	{r4, pc}
   16bb8:	00016b8d 	.word	0x00016b8d

00016bbc <SdInterface::SdInterface()>:
// NOLINTNEXTLINE(readability-identifier-naming)
// Relevant Datasheet:
// https://www.sdcard.org/downloads/pls/pdf/index.php?p=Part1_Physical_Layer_Simplified_Specification_Ver6.00.jpg&f=Part1_Physical_Layer_Simplified_Specification_Ver6.00.pdf&e=EN_SS1
// TODO(#348):  Write a class to represent a single Sd Card Block to make use
//              of block-related functions easier.
class SdInterface
   16bbc:	b530      	push	{r4, r5, lr}
   16bbe:	b083      	sub	sp, #12
   16bc0:	4675      	mov	r5, lr
   16bc2:	9001      	str	r0, [sp, #4]
   16bc4:	462b      	mov	r3, r5
   16bc6:	4619      	mov	r1, r3
   16bc8:	4807      	ldr	r0, [pc, #28]	; (16be8 <SdInterface::SdInterface()+0x2c>)
   16bca:	f7fe fccf 	bl	1556c <__cyg_profile_func_enter>
   16bce:	4a07      	ldr	r2, [pc, #28]	; (16bec <SdInterface::SdInterface()+0x30>)
   16bd0:	9b01      	ldr	r3, [sp, #4]
   16bd2:	601a      	str	r2, [r3, #0]
   16bd4:	9c01      	ldr	r4, [sp, #4]
   16bd6:	462b      	mov	r3, r5
   16bd8:	4619      	mov	r1, r3
   16bda:	4803      	ldr	r0, [pc, #12]	; (16be8 <SdInterface::SdInterface()+0x2c>)
   16bdc:	f7fe fcda 	bl	15594 <__cyg_profile_func_exit>
   16be0:	4623      	mov	r3, r4
   16be2:	4618      	mov	r0, r3
   16be4:	b003      	add	sp, #12
   16be6:	bd30      	pop	{r4, r5, pc}
   16be8:	00016bbd 	.word	0x00016bbd
   16bec:	0001ac1c 	.word	0x0001ac1c

00016bf0 <Sd::Sd(Sd::DebugSdCard_t, unsigned char, unsigned char, unsigned char, unsigned char)>:
  /// port that is broken out through the board's GPIO, allowing you to probe
  /// the chip select manually. To use this version instead of the main version,
  /// instantiate an Sd card instance like so:
  ///
  ///   Sd sdcard(Sd::DebugSdCard_t{});
  constexpr Sd(DebugSdCard_t, uint8_t port = 1, uint8_t pin = 8,
   16bf0:	b530      	push	{r4, r5, lr}
   16bf2:	b083      	sub	sp, #12
   16bf4:	4675      	mov	r5, lr
   16bf6:	9001      	str	r0, [sp, #4]
   16bf8:	f88d 1000 	strb.w	r1, [sp]
   16bfc:	4611      	mov	r1, r2
   16bfe:	461a      	mov	r2, r3
   16c00:	460b      	mov	r3, r1
   16c02:	f88d 3003 	strb.w	r3, [sp, #3]
   16c06:	4613      	mov	r3, r2
   16c08:	f88d 3002 	strb.w	r3, [sp, #2]
   16c0c:	462b      	mov	r3, r5
   16c0e:	4619      	mov	r1, r3
   16c10:	481d      	ldr	r0, [pc, #116]	; (16c88 <Sd::Sd(Sd::DebugSdCard_t, unsigned char, unsigned char, unsigned char, unsigned char)+0x98>)
   16c12:	f7fe fcab 	bl	1556c <__cyg_profile_func_enter>
      : ssp_interface_(&ssp_),
        ssp_(Ssp::Peripheral::kSsp2),
        chip_select_(&chip_select_pin_),
        chip_select_external_(&chip_select_external_pin_),
        chip_select_pin_(port, pin),
        chip_select_external_pin_(extport, extpin)
   16c16:	9b01      	ldr	r3, [sp, #4]
   16c18:	4618      	mov	r0, r3
   16c1a:	f7ff ffcf 	bl	16bbc <SdInterface::SdInterface()>
   16c1e:	4a1b      	ldr	r2, [pc, #108]	; (16c8c <Sd::Sd(Sd::DebugSdCard_t, unsigned char, unsigned char, unsigned char, unsigned char)+0x9c>)
   16c20:	9b01      	ldr	r3, [sp, #4]
   16c22:	601a      	str	r2, [r3, #0]
   16c24:	9b01      	ldr	r3, [sp, #4]
   16c26:	f103 0208 	add.w	r2, r3, #8
   16c2a:	9b01      	ldr	r3, [sp, #4]
   16c2c:	605a      	str	r2, [r3, #4]
   16c2e:	9b01      	ldr	r3, [sp, #4]
   16c30:	3308      	adds	r3, #8
   16c32:	2102      	movs	r1, #2
   16c34:	4618      	mov	r0, r3
   16c36:	f7fb fcd9 	bl	125ec <Ssp::Ssp(Ssp::Peripheral)>
   16c3a:	9b01      	ldr	r3, [sp, #4]
   16c3c:	f103 0240 	add.w	r2, r3, #64	; 0x40
   16c40:	9b01      	ldr	r3, [sp, #4]
   16c42:	639a      	str	r2, [r3, #56]	; 0x38
   16c44:	9b01      	ldr	r3, [sp, #4]
   16c46:	f103 0254 	add.w	r2, r3, #84	; 0x54
   16c4a:	9b01      	ldr	r3, [sp, #4]
   16c4c:	63da      	str	r2, [r3, #60]	; 0x3c
   16c4e:	9b01      	ldr	r3, [sp, #4]
   16c50:	3340      	adds	r3, #64	; 0x40
   16c52:	f89d 2002 	ldrb.w	r2, [sp, #2]
   16c56:	f89d 1003 	ldrb.w	r1, [sp, #3]
   16c5a:	4618      	mov	r0, r3
   16c5c:	f7fa fcd6 	bl	1160c <Gpio::Gpio(unsigned char, unsigned char)>
   16c60:	9b01      	ldr	r3, [sp, #4]
   16c62:	3354      	adds	r3, #84	; 0x54
   16c64:	f89d 201c 	ldrb.w	r2, [sp, #28]
   16c68:	f89d 1018 	ldrb.w	r1, [sp, #24]
   16c6c:	4618      	mov	r0, r3
   16c6e:	f7fa fccd 	bl	1160c <Gpio::Gpio(unsigned char, unsigned char)>
  {
  }
   16c72:	9c01      	ldr	r4, [sp, #4]
   16c74:	462b      	mov	r3, r5
   16c76:	4619      	mov	r1, r3
   16c78:	4803      	ldr	r0, [pc, #12]	; (16c88 <Sd::Sd(Sd::DebugSdCard_t, unsigned char, unsigned char, unsigned char, unsigned char)+0x98>)
   16c7a:	f7fe fc8b 	bl	15594 <__cyg_profile_func_exit>
   16c7e:	4623      	mov	r3, r4
   16c80:	4618      	mov	r0, r3
   16c82:	b003      	add	sp, #12
   16c84:	bd30      	pop	{r4, r5, pc}
   16c86:	bf00      	nop
   16c88:	00016bf1 	.word	0x00016bf1
   16c8c:	0001abf0 	.word	0x0001abf0

00016c90 <Sd::Initialize()>:

  void Initialize() override
   16c90:	b530      	push	{r4, r5, lr}
   16c92:	b085      	sub	sp, #20
   16c94:	4675      	mov	r5, lr
   16c96:	9003      	str	r0, [sp, #12]
   16c98:	462b      	mov	r3, r5
   16c9a:	4619      	mov	r1, r3
   16c9c:	4827      	ldr	r0, [pc, #156]	; (16d3c <Sd::Initialize()+0xac>)
   16c9e:	f7fe fc65 	bl	1556c <__cyg_profile_func_enter>
  {
    LOG_DEBUG("Begin initialization:");
    LOG_DEBUG("Setting CS as output...");
    chip_select_->SetAsOutput();
   16ca2:	9b03      	ldr	r3, [sp, #12]
   16ca4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   16ca6:	9b03      	ldr	r3, [sp, #12]
   16ca8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   16caa:	681b      	ldr	r3, [r3, #0]
   16cac:	3304      	adds	r3, #4
   16cae:	681b      	ldr	r3, [r3, #0]
   16cb0:	4610      	mov	r0, r2
   16cb2:	4798      	blx	r3
    chip_select_->SetHigh();
   16cb4:	9b03      	ldr	r3, [sp, #12]
   16cb6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   16cb8:	9b03      	ldr	r3, [sp, #12]
   16cba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   16cbc:	681b      	ldr	r3, [r3, #0]
   16cbe:	330c      	adds	r3, #12
   16cc0:	681b      	ldr	r3, [r3, #0]
   16cc2:	4610      	mov	r0, r2
   16cc4:	4798      	blx	r3
    chip_select_external_->SetAsOutput();
   16cc6:	9b03      	ldr	r3, [sp, #12]
   16cc8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
   16cca:	9b03      	ldr	r3, [sp, #12]
   16ccc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   16cce:	681b      	ldr	r3, [r3, #0]
   16cd0:	3304      	adds	r3, #4
   16cd2:	681b      	ldr	r3, [r3, #0]
   16cd4:	4610      	mov	r0, r2
   16cd6:	4798      	blx	r3
    chip_select_external_->SetHigh();
   16cd8:	9b03      	ldr	r3, [sp, #12]
   16cda:	6bda      	ldr	r2, [r3, #60]	; 0x3c
   16cdc:	9b03      	ldr	r3, [sp, #12]
   16cde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   16ce0:	681b      	ldr	r3, [r3, #0]
   16ce2:	330c      	adds	r3, #12
   16ce4:	681b      	ldr	r3, [r3, #0]
   16ce6:	4610      	mov	r0, r2
   16ce8:	4798      	blx	r3

    LOG_DEBUG("Setting SSP Clock Speed...");
    ssp_interface_->SetClock(false, false, 14, 2);  // 400kHz
   16cea:	9b03      	ldr	r3, [sp, #12]
   16cec:	6858      	ldr	r0, [r3, #4]
   16cee:	9b03      	ldr	r3, [sp, #12]
   16cf0:	685b      	ldr	r3, [r3, #4]
   16cf2:	681b      	ldr	r3, [r3, #0]
   16cf4:	3318      	adds	r3, #24
   16cf6:	681c      	ldr	r4, [r3, #0]
   16cf8:	2302      	movs	r3, #2
   16cfa:	9300      	str	r3, [sp, #0]
   16cfc:	230e      	movs	r3, #14
   16cfe:	2200      	movs	r2, #0
   16d00:	2100      	movs	r1, #0
   16d02:	47a0      	blx	r4

    LOG_DEBUG("Setting Peripheral Mode...");
    ssp_interface_->SetPeripheralMode(Ssp::MasterSlaveMode::kMaster,
   16d04:	9b03      	ldr	r3, [sp, #12]
   16d06:	6858      	ldr	r0, [r3, #4]
   16d08:	9b03      	ldr	r3, [sp, #12]
   16d0a:	685b      	ldr	r3, [r3, #4]
                                      Ssp::FrameMode::kSpi,
                                      Ssp::DataSize::kEight);
   16d0c:	681b      	ldr	r3, [r3, #0]
   16d0e:	3310      	adds	r3, #16
   16d10:	681c      	ldr	r4, [r3, #0]
    ssp_interface_->SetPeripheralMode(Ssp::MasterSlaveMode::kMaster,
   16d12:	2307      	movs	r3, #7
   16d14:	2200      	movs	r2, #0
   16d16:	2100      	movs	r1, #0
   16d18:	47a0      	blx	r4

    LOG_DEBUG("Starting SSP Peripheral...");
    ssp_interface_->Initialize();
   16d1a:	9b03      	ldr	r3, [sp, #12]
   16d1c:	685a      	ldr	r2, [r3, #4]
   16d1e:	9b03      	ldr	r3, [sp, #12]
   16d20:	685b      	ldr	r3, [r3, #4]
   16d22:	681b      	ldr	r3, [r3, #0]
   16d24:	681b      	ldr	r3, [r3, #0]
   16d26:	4610      	mov	r0, r2
   16d28:	4798      	blx	r3
   16d2a:	462b      	mov	r3, r5
   16d2c:	4619      	mov	r1, r3
   16d2e:	4803      	ldr	r0, [pc, #12]	; (16d3c <Sd::Initialize()+0xac>)
   16d30:	f7fe fc30 	bl	15594 <__cyg_profile_func_exit>
  }
   16d34:	bf00      	nop
   16d36:	b005      	add	sp, #20
   16d38:	bd30      	pop	{r4, r5, pc}
   16d3a:	bf00      	nop
   16d3c:	00016c91 	.word	0x00016c91

00016d40 <Sd::Mount(SdInterface::CardInfo_t*)>:

  // Initialize SD Card
  // TODO(#349): Split method into smaller piece with single jobs
  bool Mount(CardInfo_t * sd) override
   16d40:	b530      	push	{r4, r5, lr}
   16d42:	b08b      	sub	sp, #44	; 0x2c
   16d44:	4675      	mov	r5, lr
   16d46:	9003      	str	r0, [sp, #12]
   16d48:	9102      	str	r1, [sp, #8]
   16d4a:	462b      	mov	r3, r5
   16d4c:	4619      	mov	r1, r3
   16d4e:	48a7      	ldr	r0, [pc, #668]	; (16fec <Sd::Mount(SdInterface::CardInfo_t*)+0x2ac>)
   16d50:	f7fe fc0c 	bl	1556c <__cyg_profile_func_enter>
  {
    uint8_t tries     = 0;
   16d54:	2300      	movs	r3, #0
   16d56:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    bool card_is_idle = false;
   16d5a:	2300      	movs	r3, #0
   16d5c:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26

    // Reset the card and force it to go to idle state at <400kHz with a
    // CMD0 + (active-low) CS
    LOG_DEBUG("Sending SD Card to Idle State...");
    sd->response.length = SendCmd(Command::kReset, 0x00000000,
                                  sd->response.data.byte, 100, KeepAlive::kYes);
   16d60:	9b03      	ldr	r3, [sp, #12]
   16d62:	681b      	ldr	r3, [r3, #0]
   16d64:	681c      	ldr	r4, [r3, #0]
    sd->response.length = SendCmd(Command::kReset, 0x00000000,
   16d66:	9b02      	ldr	r3, [sp, #8]
   16d68:	f103 0208 	add.w	r2, r3, #8
   16d6c:	2301      	movs	r3, #1
   16d6e:	9301      	str	r3, [sp, #4]
   16d70:	2364      	movs	r3, #100	; 0x64
   16d72:	9300      	str	r3, [sp, #0]
   16d74:	4613      	mov	r3, r2
   16d76:	2200      	movs	r2, #0
   16d78:	2140      	movs	r1, #64	; 0x40
   16d7a:	9803      	ldr	r0, [sp, #12]
   16d7c:	47a0      	blx	r4
   16d7e:	4602      	mov	r2, r0
   16d80:	9b02      	ldr	r3, [sp, #8]
   16d82:	611a      	str	r2, [r3, #16]

    // Reset the card again to trigger SPI mode
    LOG_DEBUG("Initializing SPI mode...");
    do
    {
      tries++;
   16d84:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   16d88:	3301      	adds	r3, #1
   16d8a:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
      sd->response.length = SendCmd(
          Command::kReset, 0x00, sd->response.data.byte, 100, KeepAlive::kYes);
   16d8e:	9b03      	ldr	r3, [sp, #12]
   16d90:	681b      	ldr	r3, [r3, #0]
   16d92:	681c      	ldr	r4, [r3, #0]
      sd->response.length = SendCmd(
   16d94:	9b02      	ldr	r3, [sp, #8]
   16d96:	f103 0208 	add.w	r2, r3, #8
   16d9a:	2301      	movs	r3, #1
   16d9c:	9301      	str	r3, [sp, #4]
   16d9e:	2364      	movs	r3, #100	; 0x64
   16da0:	9300      	str	r3, [sp, #0]
   16da2:	4613      	mov	r3, r2
   16da4:	2200      	movs	r2, #0
   16da6:	2140      	movs	r1, #64	; 0x40
   16da8:	9803      	ldr	r0, [sp, #12]
   16daa:	47a0      	blx	r4
   16dac:	4602      	mov	r2, r0
   16dae:	9b02      	ldr	r3, [sp, #8]
   16db0:	611a      	str	r2, [r3, #16]

      // Check if R1 response frame's bit 1 is set (to ensure that
      // card is in idle state)
      if (sd->response.data.byte[0] != 0xFF &&
   16db2:	9b02      	ldr	r3, [sp, #8]
   16db4:	7a1b      	ldrb	r3, [r3, #8]
   16db6:	2bff      	cmp	r3, #255	; 0xff
   16db8:	d008      	beq.n	16dcc <Sd::Mount(SdInterface::CardInfo_t*)+0x8c>
          (sd->response.data.byte[0] & 0x01) == 0x01)
   16dba:	9b02      	ldr	r3, [sp, #8]
   16dbc:	7a1b      	ldrb	r3, [r3, #8]
   16dbe:	f003 0301 	and.w	r3, r3, #1
      if (sd->response.data.byte[0] != 0xFF &&
   16dc2:	2b00      	cmp	r3, #0
   16dc4:	d002      	beq.n	16dcc <Sd::Mount(SdInterface::CardInfo_t*)+0x8c>
      {
        // If it is, we can move on; otherwise, keep trying for a set
        // amount of tries
        card_is_idle = true;
   16dc6:	2301      	movs	r3, #1
   16dc8:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
      }
      Delay(10);
   16dcc:	f04f 000a 	mov.w	r0, #10
   16dd0:	f04f 0100 	mov.w	r1, #0
   16dd4:	f7ff feda 	bl	16b8c <Delay(unsigned long long)>
    } while (tries < kBusTimeout && !card_is_idle);
   16dd8:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   16ddc:	2bf9      	cmp	r3, #249	; 0xf9
   16dde:	d804      	bhi.n	16dea <Sd::Mount(SdInterface::CardInfo_t*)+0xaa>
   16de0:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
   16de4:	2b00      	cmp	r3, #0
   16de6:	d100      	bne.n	16dea <Sd::Mount(SdInterface::CardInfo_t*)+0xaa>
    do
   16de8:	e7cc      	b.n	16d84 <Sd::Mount(SdInterface::CardInfo_t*)+0x44>
    LOG_DEBUG("%d tries", tries);
    if (tries >= kBusTimeout)
   16dea:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   16dee:	2bf9      	cmp	r3, #249	; 0xf9
   16df0:	d91b      	bls.n	16e2a <Sd::Mount(SdInterface::CardInfo_t*)+0xea>
    {
      LOG_ERROR("Failed to initiate SPI mode within timeout. Aborting!");
   16df2:	f240 13ff 	movw	r3, #511	; 0x1ff
   16df6:	4a7e      	ldr	r2, [pc, #504]	; (16ff0 <Sd::Mount(SdInterface::CardInfo_t*)+0x2b0>)
   16df8:	497e      	ldr	r1, [pc, #504]	; (16ff4 <Sd::Mount(SdInterface::CardInfo_t*)+0x2b4>)
   16dfa:	487f      	ldr	r0, [pc, #508]	; (16ff8 <Sd::Mount(SdInterface::CardInfo_t*)+0x2b8>)
   16dfc:	f7ff fe12 	bl	16a24 <printf>
      sd->response.length = SendCmd(Command::kGarbage, 0xFFFFFFFF,
                                    sd->response.data.byte, 0, KeepAlive::kNo);
   16e00:	9b03      	ldr	r3, [sp, #12]
   16e02:	681b      	ldr	r3, [r3, #0]
   16e04:	681c      	ldr	r4, [r3, #0]
      sd->response.length = SendCmd(Command::kGarbage, 0xFFFFFFFF,
   16e06:	9b02      	ldr	r3, [sp, #8]
   16e08:	f103 0208 	add.w	r2, r3, #8
   16e0c:	2300      	movs	r3, #0
   16e0e:	9301      	str	r3, [sp, #4]
   16e10:	2300      	movs	r3, #0
   16e12:	9300      	str	r3, [sp, #0]
   16e14:	4613      	mov	r3, r2
   16e16:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   16e1a:	21ff      	movs	r1, #255	; 0xff
   16e1c:	9803      	ldr	r0, [sp, #12]
   16e1e:	47a0      	blx	r4
   16e20:	4602      	mov	r2, r0
   16e22:	9b02      	ldr	r3, [sp, #8]
   16e24:	611a      	str	r2, [r3, #16]
      return false;
   16e26:	2400      	movs	r4, #0
   16e28:	e10c      	b.n	17044 <Sd::Mount(SdInterface::CardInfo_t*)+0x304>
    }

    // Send the host's supported voltage (3.3V) and ask if the card
    // supports it
    LOG_DEBUG("Checking Current SD Card Voltage Level...");
    constexpr uint8_t kCheckPattern = 0xAB;
   16e2a:	23ab      	movs	r3, #171	; 0xab
   16e2c:	f88d 301f 	strb.w	r3, [sp, #31]
    uint64_t supported_voltage      = 0x00000001;
   16e30:	f04f 0301 	mov.w	r3, #1
   16e34:	f04f 0400 	mov.w	r4, #0
   16e38:	e9cd 3404 	strd	r3, r4, [sp, #16]
    sd->response.length =
        SendCmd(Command::kGetOp,
                static_cast<uint32_t>((supported_voltage << 8) | kCheckPattern),
                sd->response.data.byte, 100, KeepAlive::kYes);
   16e3c:	9b03      	ldr	r3, [sp, #12]
   16e3e:	681b      	ldr	r3, [r3, #0]
   16e40:	681c      	ldr	r4, [r3, #0]
                static_cast<uint32_t>((supported_voltage << 8) | kCheckPattern),
   16e42:	9b04      	ldr	r3, [sp, #16]
   16e44:	021b      	lsls	r3, r3, #8
        SendCmd(Command::kGetOp,
   16e46:	f043 02ab 	orr.w	r2, r3, #171	; 0xab
   16e4a:	9b02      	ldr	r3, [sp, #8]
   16e4c:	f103 0108 	add.w	r1, r3, #8
   16e50:	2301      	movs	r3, #1
   16e52:	9301      	str	r3, [sp, #4]
   16e54:	2364      	movs	r3, #100	; 0x64
   16e56:	9300      	str	r3, [sp, #0]
   16e58:	460b      	mov	r3, r1
   16e5a:	2148      	movs	r1, #72	; 0x48
   16e5c:	9803      	ldr	r0, [sp, #12]
   16e5e:	47a0      	blx	r4
   16e60:	4602      	mov	r2, r0
    sd->response.length =
   16e62:	9b02      	ldr	r3, [sp, #8]
   16e64:	611a      	str	r2, [r3, #16]
    if (sd->response.data.byte[4] != kCheckPattern)
   16e66:	9b02      	ldr	r3, [sp, #8]
   16e68:	7b1b      	ldrb	r3, [r3, #12]
   16e6a:	2bab      	cmp	r3, #171	; 0xab
   16e6c:	d01b      	beq.n	16ea6 <Sd::Mount(SdInterface::CardInfo_t*)+0x166>
    {
      // If the last byte is not an exact echo of the LSB of the kGetOp
      // command's argument, this response is invalid
      LOG_ERROR("Response integrity check failed. Aborting!");
   16e6e:	f240 2312 	movw	r3, #530	; 0x212
   16e72:	4a5f      	ldr	r2, [pc, #380]	; (16ff0 <Sd::Mount(SdInterface::CardInfo_t*)+0x2b0>)
   16e74:	4961      	ldr	r1, [pc, #388]	; (16ffc <Sd::Mount(SdInterface::CardInfo_t*)+0x2bc>)
   16e76:	4862      	ldr	r0, [pc, #392]	; (17000 <Sd::Mount(SdInterface::CardInfo_t*)+0x2c0>)
   16e78:	f7ff fdd4 	bl	16a24 <printf>
      sd->response.length = SendCmd(Command::kGarbage, 0xFFFFFFFF,
                                    sd->response.data.byte, 0, KeepAlive::kNo);
   16e7c:	9b03      	ldr	r3, [sp, #12]
   16e7e:	681b      	ldr	r3, [r3, #0]
   16e80:	681c      	ldr	r4, [r3, #0]
      sd->response.length = SendCmd(Command::kGarbage, 0xFFFFFFFF,
   16e82:	9b02      	ldr	r3, [sp, #8]
   16e84:	f103 0208 	add.w	r2, r3, #8
   16e88:	2300      	movs	r3, #0
   16e8a:	9301      	str	r3, [sp, #4]
   16e8c:	2300      	movs	r3, #0
   16e8e:	9300      	str	r3, [sp, #0]
   16e90:	4613      	mov	r3, r2
   16e92:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   16e96:	21ff      	movs	r1, #255	; 0xff
   16e98:	9803      	ldr	r0, [sp, #12]
   16e9a:	47a0      	blx	r4
   16e9c:	4602      	mov	r2, r0
   16e9e:	9b02      	ldr	r3, [sp, #8]
   16ea0:	611a      	str	r2, [r3, #16]
      return false;
   16ea2:	2400      	movs	r4, #0
   16ea4:	e0ce      	b.n	17044 <Sd::Mount(SdInterface::CardInfo_t*)+0x304>
    }
    else if (sd->response.data.byte[3] &
   16ea6:	9b02      	ldr	r3, [sp, #8]
   16ea8:	7adb      	ldrb	r3, [r3, #11]
   16eaa:	4619      	mov	r1, r3
             (supported_voltage == static_cast<uint64_t>(0x00)))
   16eac:	9a04      	ldr	r2, [sp, #16]
   16eae:	9b05      	ldr	r3, [sp, #20]
   16eb0:	4313      	orrs	r3, r2
   16eb2:	2b00      	cmp	r3, #0
   16eb4:	bf0c      	ite	eq
   16eb6:	2301      	moveq	r3, #1
   16eb8:	2300      	movne	r3, #0
   16eba:	b2db      	uxtb	r3, r3
    else if (sd->response.data.byte[3] &
   16ebc:	400b      	ands	r3, r1
   16ebe:	2b00      	cmp	r3, #0
   16ec0:	d01b      	beq.n	16efa <Sd::Mount(SdInterface::CardInfo_t*)+0x1ba>
    {
      // If the 2nd-to-last byte of the reponse AND'ed with our host
      // device's supported voltage range is 0x00, the SD card doesn't
      // support our device's operating voltage
      LOG_ERROR("Unsupported voltage in use. Aborting!");
   16ec2:	f240 231d 	movw	r3, #541	; 0x21d
   16ec6:	4a4a      	ldr	r2, [pc, #296]	; (16ff0 <Sd::Mount(SdInterface::CardInfo_t*)+0x2b0>)
   16ec8:	494e      	ldr	r1, [pc, #312]	; (17004 <Sd::Mount(SdInterface::CardInfo_t*)+0x2c4>)
   16eca:	484f      	ldr	r0, [pc, #316]	; (17008 <Sd::Mount(SdInterface::CardInfo_t*)+0x2c8>)
   16ecc:	f7ff fdaa 	bl	16a24 <printf>
      sd->response.length = SendCmd(Command::kGarbage, 0xFFFFFFFF,
                                    sd->response.data.byte, 0, KeepAlive::kNo);
   16ed0:	9b03      	ldr	r3, [sp, #12]
   16ed2:	681b      	ldr	r3, [r3, #0]
   16ed4:	681c      	ldr	r4, [r3, #0]
      sd->response.length = SendCmd(Command::kGarbage, 0xFFFFFFFF,
   16ed6:	9b02      	ldr	r3, [sp, #8]
   16ed8:	f103 0208 	add.w	r2, r3, #8
   16edc:	2300      	movs	r3, #0
   16ede:	9301      	str	r3, [sp, #4]
   16ee0:	2300      	movs	r3, #0
   16ee2:	9300      	str	r3, [sp, #0]
   16ee4:	4613      	mov	r3, r2
   16ee6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   16eea:	21ff      	movs	r1, #255	; 0xff
   16eec:	9803      	ldr	r0, [sp, #12]
   16eee:	47a0      	blx	r4
   16ef0:	4602      	mov	r2, r0
   16ef2:	9b02      	ldr	r3, [sp, #8]
   16ef4:	611a      	str	r2, [r3, #16]
      return false;
   16ef6:	2400      	movs	r4, #0
   16ef8:	e0a4      	b.n	17044 <Sd::Mount(SdInterface::CardInfo_t*)+0x304>
    }

    // Indicate that the host supports SDHC/SDXC and wait for card to
    // shift out of idle state
    LOG_DEBUG("Expressing High-Capacity SD Card Support...");
    tries = 0;
   16efa:	2300      	movs	r3, #0
   16efc:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    do
    {
      // Send host's operating conditions
      sd->response.length =
          SendCmd(Command::kInit, 0x40000000, sd->response.data.byte, 100,
                  KeepAlive::kYes);
   16f00:	9b03      	ldr	r3, [sp, #12]
   16f02:	681b      	ldr	r3, [r3, #0]
   16f04:	681c      	ldr	r4, [r3, #0]
          SendCmd(Command::kInit, 0x40000000, sd->response.data.byte, 100,
   16f06:	9b02      	ldr	r3, [sp, #8]
   16f08:	f103 0208 	add.w	r2, r3, #8
   16f0c:	2301      	movs	r3, #1
   16f0e:	9301      	str	r3, [sp, #4]
   16f10:	2364      	movs	r3, #100	; 0x64
   16f12:	9300      	str	r3, [sp, #0]
   16f14:	4613      	mov	r3, r2
   16f16:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   16f1a:	2141      	movs	r1, #65	; 0x41
   16f1c:	9803      	ldr	r0, [sp, #12]
   16f1e:	47a0      	blx	r4
   16f20:	4602      	mov	r2, r0
      sd->response.length =
   16f22:	9b02      	ldr	r3, [sp, #8]
   16f24:	611a      	str	r2, [r3, #16]
      tries++;
   16f26:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   16f2a:	3301      	adds	r3, #1
   16f2c:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    } while (tries < kBusTimeout && sd->response.data.byte[0] & 0x01);
   16f30:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   16f34:	2bf9      	cmp	r3, #249	; 0xf9
   16f36:	d806      	bhi.n	16f46 <Sd::Mount(SdInterface::CardInfo_t*)+0x206>
   16f38:	9b02      	ldr	r3, [sp, #8]
   16f3a:	7a1b      	ldrb	r3, [r3, #8]
   16f3c:	f003 0301 	and.w	r3, r3, #1
   16f40:	2b00      	cmp	r3, #0
   16f42:	d000      	beq.n	16f46 <Sd::Mount(SdInterface::CardInfo_t*)+0x206>
    do
   16f44:	e7dc      	b.n	16f00 <Sd::Mount(SdInterface::CardInfo_t*)+0x1c0>
    if (tries == kBusTimeout)
   16f46:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   16f4a:	2bfa      	cmp	r3, #250	; 0xfa
   16f4c:	d11b      	bne.n	16f86 <Sd::Mount(SdInterface::CardInfo_t*)+0x246>
    {
      LOG_ERROR("SD Card timed out. Aborting!");
   16f4e:	f240 2331 	movw	r3, #561	; 0x231
   16f52:	4a27      	ldr	r2, [pc, #156]	; (16ff0 <Sd::Mount(SdInterface::CardInfo_t*)+0x2b0>)
   16f54:	492d      	ldr	r1, [pc, #180]	; (1700c <Sd::Mount(SdInterface::CardInfo_t*)+0x2cc>)
   16f56:	482e      	ldr	r0, [pc, #184]	; (17010 <Sd::Mount(SdInterface::CardInfo_t*)+0x2d0>)
   16f58:	f7ff fd64 	bl	16a24 <printf>
      sd->response.length = SendCmd(Command::kGarbage, 0xFFFFFFFF,
                                    sd->response.data.byte, 0, KeepAlive::kNo);
   16f5c:	9b03      	ldr	r3, [sp, #12]
   16f5e:	681b      	ldr	r3, [r3, #0]
   16f60:	681c      	ldr	r4, [r3, #0]
      sd->response.length = SendCmd(Command::kGarbage, 0xFFFFFFFF,
   16f62:	9b02      	ldr	r3, [sp, #8]
   16f64:	f103 0208 	add.w	r2, r3, #8
   16f68:	2300      	movs	r3, #0
   16f6a:	9301      	str	r3, [sp, #4]
   16f6c:	2300      	movs	r3, #0
   16f6e:	9300      	str	r3, [sp, #0]
   16f70:	4613      	mov	r3, r2
   16f72:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   16f76:	21ff      	movs	r1, #255	; 0xff
   16f78:	9803      	ldr	r0, [sp, #12]
   16f7a:	47a0      	blx	r4
   16f7c:	4602      	mov	r2, r0
   16f7e:	9b02      	ldr	r3, [sp, #8]
   16f80:	611a      	str	r2, [r3, #16]
      return false;
   16f82:	2400      	movs	r4, #0
   16f84:	e05e      	b.n	17044 <Sd::Mount(SdInterface::CardInfo_t*)+0x304>
    // After card is ready, acquire card capacity info using kGetOcr a
    // second time
    LOG_DEBUG("Reading Card Capacity Information...");
    // Read CCS
    sd->response.length = SendCmd(Command::kGetOcr, 0x00,
                                  sd->response.data.byte, 100, KeepAlive::kYes);
   16f86:	9b03      	ldr	r3, [sp, #12]
   16f88:	681b      	ldr	r3, [r3, #0]
   16f8a:	681c      	ldr	r4, [r3, #0]
    sd->response.length = SendCmd(Command::kGetOcr, 0x00,
   16f8c:	9b02      	ldr	r3, [sp, #8]
   16f8e:	f103 0208 	add.w	r2, r3, #8
   16f92:	2301      	movs	r3, #1
   16f94:	9301      	str	r3, [sp, #4]
   16f96:	2364      	movs	r3, #100	; 0x64
   16f98:	9300      	str	r3, [sp, #0]
   16f9a:	4613      	mov	r3, r2
   16f9c:	2200      	movs	r2, #0
   16f9e:	217a      	movs	r1, #122	; 0x7a
   16fa0:	9803      	ldr	r0, [sp, #12]
   16fa2:	47a0      	blx	r4
   16fa4:	4602      	mov	r2, r0
   16fa6:	9b02      	ldr	r3, [sp, #8]
   16fa8:	611a      	str	r2, [r3, #16]
    if (sd->response.data.byte[1] & 0x40)
   16faa:	9b02      	ldr	r3, [sp, #8]
   16fac:	7a5b      	ldrb	r3, [r3, #9]
   16fae:	f003 0340 	and.w	r3, r3, #64	; 0x40
   16fb2:	2b00      	cmp	r3, #0
   16fb4:	d003      	beq.n	16fbe <Sd::Mount(SdInterface::CardInfo_t*)+0x27e>
    {
      // The card is either high or extended capacity
      LOG_DEBUG("SD Card is HC/XC");
      sd->type = Type::kSDHC;
   16fb6:	9b02      	ldr	r3, [sp, #8]
   16fb8:	2201      	movs	r2, #1
   16fba:	605a      	str	r2, [r3, #4]
   16fbc:	e002      	b.n	16fc4 <Sd::Mount(SdInterface::CardInfo_t*)+0x284>
    }
    else
    {
      // The card is standard capacity
      LOG_DEBUG("SD Card is SC");
      sd->type = Type::kSDSC;
   16fbe:	9b02      	ldr	r3, [sp, #8]
   16fc0:	2200      	movs	r2, #0
   16fc2:	605a      	str	r2, [r3, #4]
    }

    // Store OCR information
    for (int i = 0; i < 4; i++)
   16fc4:	2300      	movs	r3, #0
   16fc6:	9308      	str	r3, [sp, #32]
   16fc8:	9b08      	ldr	r3, [sp, #32]
   16fca:	2b03      	cmp	r3, #3
   16fcc:	dc22      	bgt.n	17014 <Sd::Mount(SdInterface::CardInfo_t*)+0x2d4>
    {
      // ensure OCR doesn't capture the R1 section of the response
      sd->ocr.byte[i] = sd->response.data.byte[i + 1];
   16fce:	9b08      	ldr	r3, [sp, #32]
   16fd0:	3301      	adds	r3, #1
   16fd2:	9a02      	ldr	r2, [sp, #8]
   16fd4:	4413      	add	r3, r2
   16fd6:	7a19      	ldrb	r1, [r3, #8]
   16fd8:	9a02      	ldr	r2, [sp, #8]
   16fda:	9b08      	ldr	r3, [sp, #32]
   16fdc:	4413      	add	r3, r2
   16fde:	460a      	mov	r2, r1
   16fe0:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < 4; i++)
   16fe2:	9b08      	ldr	r3, [sp, #32]
   16fe4:	3301      	adds	r3, #1
   16fe6:	9308      	str	r3, [sp, #32]
   16fe8:	e7ee      	b.n	16fc8 <Sd::Mount(SdInterface::CardInfo_t*)+0x288>
   16fea:	bf00      	nop
   16fec:	00016d41 	.word	0x00016d41
   16ff0:	0001ac40 	.word	0x0001ac40
   16ff4:	0001ab50 	.word	0x0001ab50
   16ff8:	0001a1e4 	.word	0x0001a1e4
   16ffc:	0001ab58 	.word	0x0001ab58
   17000:	0001a254 	.word	0x0001a254
   17004:	0001ab60 	.word	0x0001ab60
   17008:	0001a2b8 	.word	0x0001a2b8
   1700c:	0001ab68 	.word	0x0001ab68
   17010:	0001a318 	.word	0x0001a318
    }

    // If card is SDSC, manually set its block size
    if (sd->type == Type::kSDSC)
   17014:	9b02      	ldr	r3, [sp, #8]
   17016:	685b      	ldr	r3, [r3, #4]
   17018:	2b00      	cmp	r3, #0
   1701a:	d112      	bne.n	17042 <Sd::Mount(SdInterface::CardInfo_t*)+0x302>
    {
      // Send requested byte size
      sd->response.length =
          SendCmd(Command::kChgBlkLen, static_cast<uint32_t>(kBlockSize),
                  sd->response.data.byte, 0, KeepAlive::kYes);
   1701c:	9b03      	ldr	r3, [sp, #12]
   1701e:	681b      	ldr	r3, [r3, #0]
   17020:	681c      	ldr	r4, [r3, #0]
          SendCmd(Command::kChgBlkLen, static_cast<uint32_t>(kBlockSize),
   17022:	9b02      	ldr	r3, [sp, #8]
   17024:	f103 0208 	add.w	r2, r3, #8
   17028:	2301      	movs	r3, #1
   1702a:	9301      	str	r3, [sp, #4]
   1702c:	2300      	movs	r3, #0
   1702e:	9300      	str	r3, [sp, #0]
   17030:	4613      	mov	r3, r2
   17032:	f44f 7200 	mov.w	r2, #512	; 0x200
   17036:	2150      	movs	r1, #80	; 0x50
   17038:	9803      	ldr	r0, [sp, #12]
   1703a:	47a0      	blx	r4
   1703c:	4602      	mov	r2, r0
      sd->response.length =
   1703e:	9b02      	ldr	r3, [sp, #8]
   17040:	611a      	str	r2, [r3, #16]
    }

    return true;
   17042:	2401      	movs	r4, #1
   17044:	462b      	mov	r3, r5
   17046:	4619      	mov	r1, r3
   17048:	4803      	ldr	r0, [pc, #12]	; (17058 <Sd::Mount(SdInterface::CardInfo_t*)+0x318>)
   1704a:	f7fe faa3 	bl	15594 <__cyg_profile_func_exit>
   1704e:	4623      	mov	r3, r4
  }
   17050:	4618      	mov	r0, r3
   17052:	b00b      	add	sp, #44	; 0x2c
   17054:	bd30      	pop	{r4, r5, pc}
   17056:	bf00      	nop
   17058:	00016d41 	.word	0x00016d41

0001705c <Sd::ToBool(bool)>:

  // Returns string to represent a boolean value
  const char * ToBool(bool condition)
   1705c:	b530      	push	{r4, r5, lr}
   1705e:	b083      	sub	sp, #12
   17060:	4675      	mov	r5, lr
   17062:	9001      	str	r0, [sp, #4]
   17064:	460b      	mov	r3, r1
   17066:	f88d 3003 	strb.w	r3, [sp, #3]
   1706a:	462b      	mov	r3, r5
   1706c:	4619      	mov	r1, r3
   1706e:	4809      	ldr	r0, [pc, #36]	; (17094 <Sd::ToBool(bool)+0x38>)
   17070:	f7fe fa7c 	bl	1556c <__cyg_profile_func_enter>
  {
    return (condition) ? "true" : "false";
   17074:	f89d 3003 	ldrb.w	r3, [sp, #3]
   17078:	2b00      	cmp	r3, #0
   1707a:	d001      	beq.n	17080 <Sd::ToBool(bool)+0x24>
   1707c:	4c06      	ldr	r4, [pc, #24]	; (17098 <Sd::ToBool(bool)+0x3c>)
   1707e:	e000      	b.n	17082 <Sd::ToBool(bool)+0x26>
   17080:	4c06      	ldr	r4, [pc, #24]	; (1709c <Sd::ToBool(bool)+0x40>)
   17082:	462b      	mov	r3, r5
   17084:	4619      	mov	r1, r3
   17086:	4803      	ldr	r0, [pc, #12]	; (17094 <Sd::ToBool(bool)+0x38>)
   17088:	f7fe fa84 	bl	15594 <__cyg_profile_func_exit>
   1708c:	4623      	mov	r3, r4
  }
   1708e:	4618      	mov	r0, r3
   17090:	b003      	add	sp, #12
   17092:	bd30      	pop	{r4, r5, pc}
   17094:	0001705d 	.word	0x0001705d
   17098:	0001a370 	.word	0x0001a370
   1709c:	0001a378 	.word	0x0001a378

000170a0 <Sd::WaitToReadBlock()>:

  // Waits for the card to respond after a single or multi block read cmd is
  // sent.
  void WaitToReadBlock()
   170a0:	b510      	push	{r4, lr}
   170a2:	b084      	sub	sp, #16
   170a4:	4674      	mov	r4, lr
   170a6:	9001      	str	r0, [sp, #4]
   170a8:	4623      	mov	r3, r4
   170aa:	4619      	mov	r1, r3
   170ac:	4814      	ldr	r0, [pc, #80]	; (17100 <Sd::WaitToReadBlock()+0x60>)
   170ae:	f7fe fa5d 	bl	1556c <__cyg_profile_func_enter>
    // Bit 4 -->  If set, card is locked
    // Bit 3 -->  If set, address is out or range
    // Bit 2 -->  If set, card ECC failed
    // Bit 1 -->  If set, CC error occurred
    // Bit 0 -->  If set, a generic error occurred
    uint8_t wait_byte = 0x00;
   170b2:	2300      	movs	r3, #0
   170b4:	f88d 300f 	strb.w	r3, [sp, #15]
    do
    {
      wait_byte = static_cast<uint8_t>(ssp_interface_->Transfer(0xFF));
   170b8:	9b01      	ldr	r3, [sp, #4]
   170ba:	685a      	ldr	r2, [r3, #4]
   170bc:	9b01      	ldr	r3, [sp, #4]
   170be:	685b      	ldr	r3, [r3, #4]
   170c0:	681b      	ldr	r3, [r3, #0]
   170c2:	3308      	adds	r3, #8
   170c4:	681b      	ldr	r3, [r3, #0]
   170c6:	21ff      	movs	r1, #255	; 0xff
   170c8:	4610      	mov	r0, r2
   170ca:	4798      	blx	r3
   170cc:	4603      	mov	r3, r0
   170ce:	f88d 300f 	strb.w	r3, [sp, #15]
    } while (wait_byte != 0xFE && (wait_byte & 0xE0) != 0x00);
   170d2:	f89d 300f 	ldrb.w	r3, [sp, #15]
   170d6:	2bfe      	cmp	r3, #254	; 0xfe
   170d8:	d006      	beq.n	170e8 <Sd::WaitToReadBlock()+0x48>
   170da:	f89d 300f 	ldrb.w	r3, [sp, #15]
   170de:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
   170e2:	2b00      	cmp	r3, #0
   170e4:	d000      	beq.n	170e8 <Sd::WaitToReadBlock()+0x48>
    do
   170e6:	e7e7      	b.n	170b8 <Sd::WaitToReadBlock()+0x18>

    // DEBUG: Check the value of the wait byte
    if (wait_byte == 0xFE)
   170e8:	f89d 300f 	ldrb.w	r3, [sp, #15]
   170ec:	2bfe      	cmp	r3, #254	; 0xfe
   170ee:	4623      	mov	r3, r4
   170f0:	4619      	mov	r1, r3
   170f2:	4803      	ldr	r0, [pc, #12]	; (17100 <Sd::WaitToReadBlock()+0x60>)
   170f4:	f7fe fa4e 	bl	15594 <__cyg_profile_func_exit>
      LOG_DEBUG("Addr Out of Range?: %s", ToBool(wait_byte & 0x08));
      LOG_DEBUG("Card ECC Failed?: %s", ToBool(wait_byte & 0x04));
      LOG_DEBUG("CC Error?: %s", ToBool(wait_byte & 0x02));
      LOG_DEBUG("Error?: %s", ToBool(wait_byte & 0x01));
    }
  }
   170f8:	bf00      	nop
   170fa:	b004      	add	sp, #16
   170fc:	bd10      	pop	{r4, pc}
   170fe:	bf00      	nop
   17100:	000170a1 	.word	0x000170a1

00017104 <Sd::WaitWhileBusy()>:

  // Waits for the card to be ready to receive a new block after one has
  // been written or erased
  void WaitWhileBusy()
   17104:	b510      	push	{r4, lr}
   17106:	b084      	sub	sp, #16
   17108:	4674      	mov	r4, lr
   1710a:	9001      	str	r0, [sp, #4]
   1710c:	4623      	mov	r3, r4
   1710e:	4619      	mov	r1, r3
   17110:	480f      	ldr	r0, [pc, #60]	; (17150 <Sd::WaitWhileBusy()+0x4c>)
   17112:	f7fe fa2b 	bl	1556c <__cyg_profile_func_enter>
  {
    // Wait for the card to finish programming (i.e. when the
    // bytes return to 0xFF)
    uint8_t busy_byte = 0x00;
   17116:	2300      	movs	r3, #0
   17118:	f88d 300f 	strb.w	r3, [sp, #15]
    LOG_DEBUG("Card is busy. Waiting for it to finish...");
    do
    {
      busy_byte = static_cast<uint8_t>(ssp_interface_->Transfer(0xFF));
   1711c:	9b01      	ldr	r3, [sp, #4]
   1711e:	685a      	ldr	r2, [r3, #4]
   17120:	9b01      	ldr	r3, [sp, #4]
   17122:	685b      	ldr	r3, [r3, #4]
   17124:	681b      	ldr	r3, [r3, #0]
   17126:	3308      	adds	r3, #8
   17128:	681b      	ldr	r3, [r3, #0]
   1712a:	21ff      	movs	r1, #255	; 0xff
   1712c:	4610      	mov	r0, r2
   1712e:	4798      	blx	r3
   17130:	4603      	mov	r3, r0
   17132:	f88d 300f 	strb.w	r3, [sp, #15]
    } while (busy_byte != 0xFF);
   17136:	f89d 300f 	ldrb.w	r3, [sp, #15]
   1713a:	2bff      	cmp	r3, #255	; 0xff
   1713c:	d000      	beq.n	17140 <Sd::WaitWhileBusy()+0x3c>
    do
   1713e:	e7ed      	b.n	1711c <Sd::WaitWhileBusy()+0x18>
   17140:	4623      	mov	r3, r4
   17142:	4619      	mov	r1, r3
   17144:	4802      	ldr	r0, [pc, #8]	; (17150 <Sd::WaitWhileBusy()+0x4c>)
   17146:	f7fe fa25 	bl	15594 <__cyg_profile_func_exit>
    LOG_DEBUG("Card finished!");
  }
   1714a:	bf00      	nop
   1714c:	b004      	add	sp, #16
   1714e:	bd10      	pop	{r4, pc}
   17150:	00017105 	.word	0x00017105

00017154 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)>:

  // Read any number of blocks from the SD card
  uint8_t ReadBlock(uint32_t address, uint8_t * array,
   17154:	b530      	push	{r4, r5, lr}
   17156:	f5ad 7d13 	sub.w	sp, sp, #588	; 0x24c
   1715a:	4675      	mov	r5, lr
   1715c:	ac05      	add	r4, sp, #20
   1715e:	6020      	str	r0, [r4, #0]
   17160:	a804      	add	r0, sp, #16
   17162:	6001      	str	r1, [r0, #0]
   17164:	a903      	add	r1, sp, #12
   17166:	600a      	str	r2, [r1, #0]
   17168:	aa02      	add	r2, sp, #8
   1716a:	6013      	str	r3, [r2, #0]
   1716c:	462b      	mov	r3, r5
   1716e:	4619      	mov	r1, r3
   17170:	487d      	ldr	r0, [pc, #500]	; (17368 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x214>)
   17172:	f7fe f9fb 	bl	1556c <__cyg_profile_func_enter>
                    uint32_t blocks = 1) override
  {
    LOG_DEBUG("Block %" PRId32 " :: 0x%" PRIX32 " for %" PRId32 " blocks",
              address, address, blocks);
    // Wait for a previous command to finish
    WaitWhileBusy();
   17176:	ab05      	add	r3, sp, #20
   17178:	6818      	ldr	r0, [r3, #0]
   1717a:	f7ff ffc3 	bl	17104 <Sd::WaitWhileBusy()>

    // Create a temporary storage location to store sd command responses
    Sd::CardInfo_t sd;
    bool payload_had_bad_crc = false;
   1717e:	2300      	movs	r3, #0
   17180:	f88d 3247 	strb.w	r3, [sp, #583]	; 0x247

    // Create a temporary place to store blocks of 512 bytes (this is now
    // possible because the constructor enforces block size cross-
    // compatibility)
    uint8_t block_store[512] = { 0 };
   17184:	ab06      	add	r3, sp, #24
   17186:	4618      	mov	r0, r3
   17188:	f44f 7300 	mov.w	r3, #512	; 0x200
   1718c:	461a      	mov	r2, r3
   1718e:	2100      	movs	r1, #0
   17190:	f001 f950 	bl	18434 <memset>

    // Determine appropriate command to send
    Command read_cmd;
    if (blocks > 1)
   17194:	ab02      	add	r3, sp, #8
   17196:	681b      	ldr	r3, [r3, #0]
   17198:	2b01      	cmp	r3, #1
   1719a:	d902      	bls.n	171a2 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x4e>
    {
      read_cmd = Command::kReadMulti;
   1719c:	2352      	movs	r3, #82	; 0x52
   1719e:	9390      	str	r3, [sp, #576]	; 0x240
   171a0:	e001      	b.n	171a6 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x52>
    }
    else
    {
      read_cmd = Command::kReadSingle;
   171a2:	2351      	movs	r3, #81	; 0x51
   171a4:	9390      	str	r3, [sp, #576]	; 0x240
    }

    // Send initial read command
    sd.response.length =
        SendCmd(read_cmd, address, sd.response.data.byte, 100, KeepAlive::kYes);
   171a6:	ab05      	add	r3, sp, #20
   171a8:	681b      	ldr	r3, [r3, #0]
   171aa:	681b      	ldr	r3, [r3, #0]
   171ac:	681c      	ldr	r4, [r3, #0]
   171ae:	ab86      	add	r3, sp, #536	; 0x218
   171b0:	f103 0108 	add.w	r1, r3, #8
   171b4:	aa04      	add	r2, sp, #16
   171b6:	a805      	add	r0, sp, #20
   171b8:	2301      	movs	r3, #1
   171ba:	9301      	str	r3, [sp, #4]
   171bc:	2364      	movs	r3, #100	; 0x64
   171be:	9300      	str	r3, [sp, #0]
   171c0:	460b      	mov	r3, r1
   171c2:	6812      	ldr	r2, [r2, #0]
   171c4:	9990      	ldr	r1, [sp, #576]	; 0x240
   171c6:	6800      	ldr	r0, [r0, #0]
   171c8:	47a0      	blx	r4
   171ca:	4603      	mov	r3, r0
    sd.response.length =
   171cc:	938a      	str	r3, [sp, #552]	; 0x228
    LOG_DEBUG("Sent Read Cmd");
    LOG_DEBUG("[R1 Response:0x%02X]", sd.response.data.byte[0]);

    // Check if the command was acknowledged properly
    if (sd.response.data.byte[0] == 0x00)
   171ce:	f89d 3220 	ldrb.w	r3, [sp, #544]	; 0x220
   171d2:	2b00      	cmp	r3, #0
   171d4:	f040 80d8 	bne.w	17388 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x234>
    {
      // For every block requested
      uint16_t block_count;
      for (block_count = 0; block_count < blocks; block_count++)
   171d8:	2300      	movs	r3, #0
   171da:	f8ad 323e 	strh.w	r3, [sp, #574]	; 0x23e
   171de:	f8bd 323e 	ldrh.w	r3, [sp, #574]	; 0x23e
   171e2:	aa02      	add	r2, sp, #8
   171e4:	6812      	ldr	r2, [r2, #0]
   171e6:	429a      	cmp	r2, r3
   171e8:	f240 8099 	bls.w	1731e <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x1ca>
      {
        // Wait for the card to respond with a ready signal
        WaitToReadBlock();
   171ec:	ab05      	add	r3, sp, #20
   171ee:	6818      	ldr	r0, [r3, #0]
   171f0:	f7ff ff56 	bl	170a0 <Sd::WaitToReadBlock()>

        // Calculate the block address offset
        uint16_t block_addr_offset =
   171f4:	f8bd 323e 	ldrh.w	r3, [sp, #574]	; 0x23e
   171f8:	025b      	lsls	r3, r3, #9
   171fa:	f8ad 323a 	strh.w	r3, [sp, #570]	; 0x23a
            static_cast<uint16_t>(block_count * kBlockSize);

        // Read all the bytes of a single block
        for (uint16_t byte_count = 0; byte_count < kBlockSize; byte_count++)
   171fe:	2300      	movs	r3, #0
   17200:	f8ad 323c 	strh.w	r3, [sp, #572]	; 0x23c
   17204:	f8bd 323c 	ldrh.w	r3, [sp, #572]	; 0x23c
   17208:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   1720c:	d22b      	bcs.n	17266 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x112>
        {
          // Calculate the current storage index
          uint16_t storage_index =
   1720e:	f8bd 223a 	ldrh.w	r2, [sp, #570]	; 0x23a
   17212:	f8bd 323c 	ldrh.w	r3, [sp, #572]	; 0x23c
   17216:	4413      	add	r3, r2
   17218:	f8ad 3238 	strh.w	r3, [sp, #568]	; 0x238
              static_cast<uint16_t>(block_addr_offset + byte_count);

          // Transfer a byte to read a block from the SD card
          array[storage_index] =
              static_cast<uint8_t>(ssp_interface_->Transfer(0xFF));
   1721c:	ab05      	add	r3, sp, #20
   1721e:	681b      	ldr	r3, [r3, #0]
   17220:	685a      	ldr	r2, [r3, #4]
   17222:	ab05      	add	r3, sp, #20
   17224:	681b      	ldr	r3, [r3, #0]
   17226:	685b      	ldr	r3, [r3, #4]
   17228:	681b      	ldr	r3, [r3, #0]
   1722a:	3308      	adds	r3, #8
   1722c:	681b      	ldr	r3, [r3, #0]
   1722e:	21ff      	movs	r1, #255	; 0xff
   17230:	4610      	mov	r0, r2
   17232:	4798      	blx	r3
   17234:	4603      	mov	r3, r0
   17236:	4619      	mov	r1, r3
          array[storage_index] =
   17238:	f8bd 3238 	ldrh.w	r3, [sp, #568]	; 0x238
   1723c:	aa03      	add	r2, sp, #12
   1723e:	6812      	ldr	r2, [r2, #0]
   17240:	4413      	add	r3, r2
   17242:	b2ca      	uxtb	r2, r1
   17244:	701a      	strb	r2, [r3, #0]

          // Copy that byte into our temporary block store
          block_store[byte_count] = array[storage_index];
   17246:	f8bd 3238 	ldrh.w	r3, [sp, #568]	; 0x238
   1724a:	aa03      	add	r2, sp, #12
   1724c:	6812      	ldr	r2, [r2, #0]
   1724e:	441a      	add	r2, r3
   17250:	f8bd 323c 	ldrh.w	r3, [sp, #572]	; 0x23c
   17254:	7811      	ldrb	r1, [r2, #0]
   17256:	aa06      	add	r2, sp, #24
   17258:	54d1      	strb	r1, [r2, r3]
        for (uint16_t byte_count = 0; byte_count < kBlockSize; byte_count++)
   1725a:	f8bd 323c 	ldrh.w	r3, [sp, #572]	; 0x23c
   1725e:	3301      	adds	r3, #1
   17260:	f8ad 323c 	strh.w	r3, [sp, #572]	; 0x23c
   17264:	e7ce      	b.n	17204 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0xb0>
        }

        // Then read the block's 16-bit CRC (i.e. read two bytes)
        uint16_t block_crc =
            static_cast<uint16_t>((ssp_interface_->Transfer(0xFF) << 8) |
   17266:	ab05      	add	r3, sp, #20
   17268:	681b      	ldr	r3, [r3, #0]
   1726a:	685a      	ldr	r2, [r3, #4]
   1726c:	ab05      	add	r3, sp, #20
   1726e:	681b      	ldr	r3, [r3, #0]
   17270:	685b      	ldr	r3, [r3, #4]
   17272:	681b      	ldr	r3, [r3, #0]
   17274:	3308      	adds	r3, #8
   17276:	681b      	ldr	r3, [r3, #0]
   17278:	21ff      	movs	r1, #255	; 0xff
   1727a:	4610      	mov	r0, r2
   1727c:	4798      	blx	r3
   1727e:	4603      	mov	r3, r0
   17280:	021b      	lsls	r3, r3, #8
   17282:	b21c      	sxth	r4, r3
                                  ssp_interface_->Transfer(0xFF));
   17284:	ab05      	add	r3, sp, #20
   17286:	681b      	ldr	r3, [r3, #0]
   17288:	685a      	ldr	r2, [r3, #4]
   1728a:	ab05      	add	r3, sp, #20
   1728c:	681b      	ldr	r3, [r3, #0]
   1728e:	685b      	ldr	r3, [r3, #4]
   17290:	681b      	ldr	r3, [r3, #0]
   17292:	3308      	adds	r3, #8
   17294:	681b      	ldr	r3, [r3, #0]
   17296:	21ff      	movs	r1, #255	; 0xff
   17298:	4610      	mov	r0, r2
   1729a:	4798      	blx	r3
   1729c:	4603      	mov	r3, r0
   1729e:	b21b      	sxth	r3, r3
            static_cast<uint16_t>((ssp_interface_->Transfer(0xFF) << 8) |
   172a0:	4323      	orrs	r3, r4
   172a2:	b21b      	sxth	r3, r3
                                  ssp_interface_->Transfer(0xFF));
   172a4:	f8ad 3236 	strh.w	r3, [sp, #566]	; 0x236

        // Run a CRC-16 calculation on the message to determine if the
        // received CRCs match (i.e. checks if the block data is
        // valid).
        uint16_t expected_block_crc = GetCrc16(block_store, 512);
   172a8:	ab05      	add	r3, sp, #20
   172aa:	681b      	ldr	r3, [r3, #0]
   172ac:	681b      	ldr	r3, [r3, #0]
   172ae:	3320      	adds	r3, #32
   172b0:	681b      	ldr	r3, [r3, #0]
   172b2:	a906      	add	r1, sp, #24
   172b4:	a805      	add	r0, sp, #20
   172b6:	f44f 7200 	mov.w	r2, #512	; 0x200
   172ba:	6800      	ldr	r0, [r0, #0]
   172bc:	4798      	blx	r3
   172be:	4603      	mov	r3, r0
   172c0:	f8ad 3234 	strh.w	r3, [sp, #564]	; 0x234

        LOG_DEBUG("Block #%d @ 0x%" PRIX32 " acquired", block_count, address);
        LOG_DEBUG("Expecting block crc16 '0x%04X'", expected_block_crc);
        LOG_DEBUG("Got '0x%04X'", block_crc);
        if (expected_block_crc != block_crc)
   172c4:	f8bd 2234 	ldrh.w	r2, [sp, #564]	; 0x234
   172c8:	f8bd 3236 	ldrh.w	r3, [sp, #566]	; 0x236
   172cc:	429a      	cmp	r2, r3
   172ce:	d020      	beq.n	17312 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x1be>
        {
          // If they do not match, set the bad crc status
          payload_had_bad_crc = true;
   172d0:	2301      	movs	r3, #1
   172d2:	f88d 3247 	strb.w	r3, [sp, #583]	; 0x247
          LOG_ERROR("While Reading Block #%d CRC16:", block_count);
   172d6:	f8bd 323e 	ldrh.w	r3, [sp, #574]	; 0x23e
   172da:	9300      	str	r3, [sp, #0]
   172dc:	f240 23ed 	movw	r3, #749	; 0x2ed
   172e0:	4a22      	ldr	r2, [pc, #136]	; (1736c <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x218>)
   172e2:	4923      	ldr	r1, [pc, #140]	; (17370 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x21c>)
   172e4:	4823      	ldr	r0, [pc, #140]	; (17374 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x220>)
   172e6:	f7ff fb9d 	bl	16a24 <printf>
          LOG_ERROR("Expected '0x%04X'", expected_block_crc);
   172ea:	f8bd 3234 	ldrh.w	r3, [sp, #564]	; 0x234
   172ee:	9300      	str	r3, [sp, #0]
   172f0:	f240 23ee 	movw	r3, #750	; 0x2ee
   172f4:	4a1d      	ldr	r2, [pc, #116]	; (1736c <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x218>)
   172f6:	4920      	ldr	r1, [pc, #128]	; (17378 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x224>)
   172f8:	4820      	ldr	r0, [pc, #128]	; (1737c <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x228>)
   172fa:	f7ff fb93 	bl	16a24 <printf>
          LOG_ERROR("Got '0x%04X'", block_crc);
   172fe:	f8bd 3236 	ldrh.w	r3, [sp, #566]	; 0x236
   17302:	9300      	str	r3, [sp, #0]
   17304:	f240 23ef 	movw	r3, #751	; 0x2ef
   17308:	4a18      	ldr	r2, [pc, #96]	; (1736c <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x218>)
   1730a:	491d      	ldr	r1, [pc, #116]	; (17380 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x22c>)
   1730c:	481d      	ldr	r0, [pc, #116]	; (17384 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x230>)
   1730e:	f7ff fb89 	bl	16a24 <printf>
      for (block_count = 0; block_count < blocks; block_count++)
   17312:	f8bd 323e 	ldrh.w	r3, [sp, #574]	; 0x23e
   17316:	3301      	adds	r3, #1
   17318:	f8ad 323e 	strh.w	r3, [sp, #574]	; 0x23e
   1731c:	e75f      	b.n	171de <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x8a>
        }
      }

      // After reading multiple blocks, send the stop command to terminate the
      // transaction (i.e. no keep-alive)
      if (blocks > 1)
   1731e:	ab02      	add	r3, sp, #8
   17320:	681b      	ldr	r3, [r3, #0]
   17322:	2b01      	cmp	r3, #1
   17324:	d913      	bls.n	1734e <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x1fa>
      {
        sd.response.length =
            SendCmd(Command::kStopTrans, 0xFFFFFFFF, sd.response.data.byte, 100,
                    KeepAlive::kNo);
   17326:	ab05      	add	r3, sp, #20
   17328:	681b      	ldr	r3, [r3, #0]
   1732a:	681b      	ldr	r3, [r3, #0]
   1732c:	681c      	ldr	r4, [r3, #0]
            SendCmd(Command::kStopTrans, 0xFFFFFFFF, sd.response.data.byte, 100,
   1732e:	ab86      	add	r3, sp, #536	; 0x218
   17330:	f103 0208 	add.w	r2, r3, #8
   17334:	a805      	add	r0, sp, #20
   17336:	2300      	movs	r3, #0
   17338:	9301      	str	r3, [sp, #4]
   1733a:	2364      	movs	r3, #100	; 0x64
   1733c:	9300      	str	r3, [sp, #0]
   1733e:	4613      	mov	r3, r2
   17340:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   17344:	214c      	movs	r1, #76	; 0x4c
   17346:	6800      	ldr	r0, [r0, #0]
   17348:	47a0      	blx	r4
   1734a:	4603      	mov	r3, r0
        sd.response.length =
   1734c:	938a      	str	r3, [sp, #552]	; 0x228
      LOG_DEBUG("Response Byte");
      LOG_DEBUG("0x%02X", sd.response.data.byte[0]);

      // If there was a bad crc from the payload, manually set the
      // CRC error flag in the command response byte
      if (payload_had_bad_crc)
   1734e:	f89d 3247 	ldrb.w	r3, [sp, #583]	; 0x247
   17352:	2b00      	cmp	r3, #0
   17354:	f000 80c0 	beq.w	174d8 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x384>
      {
        sd.response.data.byte[0] |= 0x08;
   17358:	f89d 3220 	ldrb.w	r3, [sp, #544]	; 0x220
   1735c:	f043 0308 	orr.w	r3, r3, #8
   17360:	b2db      	uxtb	r3, r3
   17362:	f88d 3220 	strb.w	r3, [sp, #544]	; 0x220
   17366:	e0b7      	b.n	174d8 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x384>
   17368:	00017155 	.word	0x00017155
   1736c:	0001ac74 	.word	0x0001ac74
   17370:	0001ab70 	.word	0x0001ab70
   17374:	0001a380 	.word	0x0001a380
   17378:	0001ab78 	.word	0x0001ab78
   1737c:	0001a3d8 	.word	0x0001a3d8
   17380:	0001ab80 	.word	0x0001ab80
   17384:	0001a424 	.word	0x0001a424
      }
    }
    else
    {
      LOG_ERROR("Read Cmd was not acknowledged properly!");
   17388:	f240 3309 	movw	r3, #777	; 0x309
   1738c:	4a65      	ldr	r2, [pc, #404]	; (17524 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x3d0>)
   1738e:	4966      	ldr	r1, [pc, #408]	; (17528 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x3d4>)
   17390:	4866      	ldr	r0, [pc, #408]	; (1752c <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x3d8>)
   17392:	f7ff fb47 	bl	16a24 <printf>
      LOG_ERROR("Parameter Err: %s", ToBool(sd.response.data.byte[0] & 0x40));
   17396:	f89d 3220 	ldrb.w	r3, [sp, #544]	; 0x220
   1739a:	f003 0340 	and.w	r3, r3, #64	; 0x40
   1739e:	2b00      	cmp	r3, #0
   173a0:	bf14      	ite	ne
   173a2:	2301      	movne	r3, #1
   173a4:	2300      	moveq	r3, #0
   173a6:	b2da      	uxtb	r2, r3
   173a8:	ab05      	add	r3, sp, #20
   173aa:	4611      	mov	r1, r2
   173ac:	6818      	ldr	r0, [r3, #0]
   173ae:	f7ff fe55 	bl	1705c <Sd::ToBool(bool)>
   173b2:	4603      	mov	r3, r0
   173b4:	9300      	str	r3, [sp, #0]
   173b6:	f240 330a 	movw	r3, #778	; 0x30a
   173ba:	4a5a      	ldr	r2, [pc, #360]	; (17524 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x3d0>)
   173bc:	495c      	ldr	r1, [pc, #368]	; (17530 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x3dc>)
   173be:	485d      	ldr	r0, [pc, #372]	; (17534 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x3e0>)
   173c0:	f7ff fb30 	bl	16a24 <printf>
      LOG_ERROR("Addr Err: %s", ToBool(sd.response.data.byte[0] & 0x20));
   173c4:	f89d 3220 	ldrb.w	r3, [sp, #544]	; 0x220
   173c8:	f003 0320 	and.w	r3, r3, #32
   173cc:	2b00      	cmp	r3, #0
   173ce:	bf14      	ite	ne
   173d0:	2301      	movne	r3, #1
   173d2:	2300      	moveq	r3, #0
   173d4:	b2da      	uxtb	r2, r3
   173d6:	ab05      	add	r3, sp, #20
   173d8:	4611      	mov	r1, r2
   173da:	6818      	ldr	r0, [r3, #0]
   173dc:	f7ff fe3e 	bl	1705c <Sd::ToBool(bool)>
   173e0:	4603      	mov	r3, r0
   173e2:	9300      	str	r3, [sp, #0]
   173e4:	f240 330b 	movw	r3, #779	; 0x30b
   173e8:	4a4e      	ldr	r2, [pc, #312]	; (17524 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x3d0>)
   173ea:	4953      	ldr	r1, [pc, #332]	; (17538 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x3e4>)
   173ec:	4853      	ldr	r0, [pc, #332]	; (1753c <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x3e8>)
   173ee:	f7ff fb19 	bl	16a24 <printf>
      LOG_ERROR("Erase Seq Err: %s", ToBool(sd.response.data.byte[0] & 0x10));
   173f2:	f89d 3220 	ldrb.w	r3, [sp, #544]	; 0x220
   173f6:	f003 0310 	and.w	r3, r3, #16
   173fa:	2b00      	cmp	r3, #0
   173fc:	bf14      	ite	ne
   173fe:	2301      	movne	r3, #1
   17400:	2300      	moveq	r3, #0
   17402:	b2da      	uxtb	r2, r3
   17404:	ab05      	add	r3, sp, #20
   17406:	4611      	mov	r1, r2
   17408:	6818      	ldr	r0, [r3, #0]
   1740a:	f7ff fe27 	bl	1705c <Sd::ToBool(bool)>
   1740e:	4603      	mov	r3, r0
   17410:	9300      	str	r3, [sp, #0]
   17412:	f44f 7343 	mov.w	r3, #780	; 0x30c
   17416:	4a43      	ldr	r2, [pc, #268]	; (17524 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x3d0>)
   17418:	4949      	ldr	r1, [pc, #292]	; (17540 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x3ec>)
   1741a:	484a      	ldr	r0, [pc, #296]	; (17544 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x3f0>)
   1741c:	f7ff fb02 	bl	16a24 <printf>
      LOG_ERROR("Com CRC Err: %s", ToBool(sd.response.data.byte[0] & 0x08));
   17420:	f89d 3220 	ldrb.w	r3, [sp, #544]	; 0x220
   17424:	f003 0308 	and.w	r3, r3, #8
   17428:	2b00      	cmp	r3, #0
   1742a:	bf14      	ite	ne
   1742c:	2301      	movne	r3, #1
   1742e:	2300      	moveq	r3, #0
   17430:	b2da      	uxtb	r2, r3
   17432:	ab05      	add	r3, sp, #20
   17434:	4611      	mov	r1, r2
   17436:	6818      	ldr	r0, [r3, #0]
   17438:	f7ff fe10 	bl	1705c <Sd::ToBool(bool)>
   1743c:	4603      	mov	r3, r0
   1743e:	9300      	str	r3, [sp, #0]
   17440:	f240 330d 	movw	r3, #781	; 0x30d
   17444:	4a37      	ldr	r2, [pc, #220]	; (17524 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x3d0>)
   17446:	4940      	ldr	r1, [pc, #256]	; (17548 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x3f4>)
   17448:	4840      	ldr	r0, [pc, #256]	; (1754c <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x3f8>)
   1744a:	f7ff faeb 	bl	16a24 <printf>
      LOG_ERROR("Illegal Cmd Err: %s", ToBool(sd.response.data.byte[0] & 0x04));
   1744e:	f89d 3220 	ldrb.w	r3, [sp, #544]	; 0x220
   17452:	f003 0304 	and.w	r3, r3, #4
   17456:	2b00      	cmp	r3, #0
   17458:	bf14      	ite	ne
   1745a:	2301      	movne	r3, #1
   1745c:	2300      	moveq	r3, #0
   1745e:	b2da      	uxtb	r2, r3
   17460:	ab05      	add	r3, sp, #20
   17462:	4611      	mov	r1, r2
   17464:	6818      	ldr	r0, [r3, #0]
   17466:	f7ff fdf9 	bl	1705c <Sd::ToBool(bool)>
   1746a:	4603      	mov	r3, r0
   1746c:	9300      	str	r3, [sp, #0]
   1746e:	f240 330e 	movw	r3, #782	; 0x30e
   17472:	4a2c      	ldr	r2, [pc, #176]	; (17524 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x3d0>)
   17474:	4936      	ldr	r1, [pc, #216]	; (17550 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x3fc>)
   17476:	4837      	ldr	r0, [pc, #220]	; (17554 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x400>)
   17478:	f7ff fad4 	bl	16a24 <printf>
      LOG_ERROR("Erase Reset: %s", ToBool(sd.response.data.byte[0] & 0x02));
   1747c:	f89d 3220 	ldrb.w	r3, [sp, #544]	; 0x220
   17480:	f003 0302 	and.w	r3, r3, #2
   17484:	2b00      	cmp	r3, #0
   17486:	bf14      	ite	ne
   17488:	2301      	movne	r3, #1
   1748a:	2300      	moveq	r3, #0
   1748c:	b2da      	uxtb	r2, r3
   1748e:	ab05      	add	r3, sp, #20
   17490:	4611      	mov	r1, r2
   17492:	6818      	ldr	r0, [r3, #0]
   17494:	f7ff fde2 	bl	1705c <Sd::ToBool(bool)>
   17498:	4603      	mov	r3, r0
   1749a:	9300      	str	r3, [sp, #0]
   1749c:	f240 330f 	movw	r3, #783	; 0x30f
   174a0:	4a20      	ldr	r2, [pc, #128]	; (17524 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x3d0>)
   174a2:	492d      	ldr	r1, [pc, #180]	; (17558 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x404>)
   174a4:	482d      	ldr	r0, [pc, #180]	; (1755c <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x408>)
   174a6:	f7ff fabd 	bl	16a24 <printf>
      LOG_ERROR("In Idle: %s", ToBool(sd.response.data.byte[0] & 0x01));
   174aa:	f89d 3220 	ldrb.w	r3, [sp, #544]	; 0x220
   174ae:	f003 0301 	and.w	r3, r3, #1
   174b2:	2b00      	cmp	r3, #0
   174b4:	bf14      	ite	ne
   174b6:	2301      	movne	r3, #1
   174b8:	2300      	moveq	r3, #0
   174ba:	b2da      	uxtb	r2, r3
   174bc:	ab05      	add	r3, sp, #20
   174be:	4611      	mov	r1, r2
   174c0:	6818      	ldr	r0, [r3, #0]
   174c2:	f7ff fdcb 	bl	1705c <Sd::ToBool(bool)>
   174c6:	4603      	mov	r3, r0
   174c8:	9300      	str	r3, [sp, #0]
   174ca:	f44f 7344 	mov.w	r3, #784	; 0x310
   174ce:	4a15      	ldr	r2, [pc, #84]	; (17524 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x3d0>)
   174d0:	4923      	ldr	r1, [pc, #140]	; (17560 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x40c>)
   174d2:	4824      	ldr	r0, [pc, #144]	; (17564 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x410>)
   174d4:	f7ff faa6 	bl	16a24 <printf>
    LOG_DEBUG("Now waiting for SD Card to exit Idle Mode...");
    do
    {
      // Query the status register
      sd.response.length = SendCmd(Command::kGetStatus, 32,
                                   sd.response.data.byte, 0, KeepAlive::kNo);
   174d8:	ab05      	add	r3, sp, #20
   174da:	681b      	ldr	r3, [r3, #0]
   174dc:	681b      	ldr	r3, [r3, #0]
   174de:	681c      	ldr	r4, [r3, #0]
      sd.response.length = SendCmd(Command::kGetStatus, 32,
   174e0:	ab86      	add	r3, sp, #536	; 0x218
   174e2:	f103 0208 	add.w	r2, r3, #8
   174e6:	a805      	add	r0, sp, #20
   174e8:	2300      	movs	r3, #0
   174ea:	9301      	str	r3, [sp, #4]
   174ec:	2300      	movs	r3, #0
   174ee:	9300      	str	r3, [sp, #0]
   174f0:	4613      	mov	r3, r2
   174f2:	2220      	movs	r2, #32
   174f4:	210d      	movs	r1, #13
   174f6:	6800      	ldr	r0, [r0, #0]
   174f8:	47a0      	blx	r4
   174fa:	4603      	mov	r3, r0
   174fc:	938a      	str	r3, [sp, #552]	; 0x228
    } while (sd.response.data.byte[0] & 0x01);
   174fe:	f89d 3220 	ldrb.w	r3, [sp, #544]	; 0x220
   17502:	f003 0301 	and.w	r3, r3, #1
   17506:	2b00      	cmp	r3, #0
   17508:	d000      	beq.n	1750c <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x3b8>
    do
   1750a:	e7e5      	b.n	174d8 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x384>
    LOG_DEBUG("SD Card is out of Idle Mode!");

    // Return the status
    LOG_DEBUG("Read Complete! [R1 Response: 0x%02X]", sd.response.data.byte[0]);
    return sd.response.data.byte[0];
   1750c:	f89d 4220 	ldrb.w	r4, [sp, #544]	; 0x220
   17510:	462b      	mov	r3, r5
   17512:	4619      	mov	r1, r3
   17514:	4814      	ldr	r0, [pc, #80]	; (17568 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x414>)
   17516:	f7fe f83d 	bl	15594 <__cyg_profile_func_exit>
   1751a:	4623      	mov	r3, r4
  }
   1751c:	4618      	mov	r0, r3
   1751e:	f50d 7d13 	add.w	sp, sp, #588	; 0x24c
   17522:	bd30      	pop	{r4, r5, pc}
   17524:	0001ac74 	.word	0x0001ac74
   17528:	0001ab88 	.word	0x0001ab88
   1752c:	0001a46c 	.word	0x0001a46c
   17530:	0001ab90 	.word	0x0001ab90
   17534:	0001a4d0 	.word	0x0001a4d0
   17538:	0001ab98 	.word	0x0001ab98
   1753c:	0001a51c 	.word	0x0001a51c
   17540:	0001aba0 	.word	0x0001aba0
   17544:	0001a564 	.word	0x0001a564
   17548:	0001aba8 	.word	0x0001aba8
   1754c:	0001a5b0 	.word	0x0001a5b0
   17550:	0001abb0 	.word	0x0001abb0
   17554:	0001a5fc 	.word	0x0001a5fc
   17558:	0001abb8 	.word	0x0001abb8
   1755c:	0001a64c 	.word	0x0001a64c
   17560:	0001abc0 	.word	0x0001abc0
   17564:	0001a698 	.word	0x0001a698
   17568:	00017155 	.word	0x00017155

0001756c <Sd::WriteBlock(unsigned long, unsigned char const*, unsigned long)>:

  // Writes any number of 512-byte blocks to the SD Card
  uint8_t WriteBlock(uint32_t address, const uint8_t * array,
   1756c:	b530      	push	{r4, r5, lr}
   1756e:	b095      	sub	sp, #84	; 0x54
   17570:	4675      	mov	r5, lr
   17572:	9005      	str	r0, [sp, #20]
   17574:	9104      	str	r1, [sp, #16]
   17576:	9203      	str	r2, [sp, #12]
   17578:	9302      	str	r3, [sp, #8]
   1757a:	462b      	mov	r3, r5
   1757c:	4619      	mov	r1, r3
   1757e:	4865      	ldr	r0, [pc, #404]	; (17714 <Sd::WriteBlock(unsigned long, unsigned char const*, unsigned long)+0x1a8>)
   17580:	f7fd fff4 	bl	1556c <__cyg_profile_func_enter>
                     uint32_t blocks = 1) override
  {
    // Wait for a previous command to finish
    WaitWhileBusy();
   17584:	9805      	ldr	r0, [sp, #20]
   17586:	f7ff fdbd 	bl	17104 <Sd::WaitWhileBusy()>
    Sd::CardInfo_t sd;

    // Determine appropriate command and start token to send
    Command write_cmd;
    uint8_t write_start_tkn;
    if (blocks > 1)
   1758a:	9b02      	ldr	r3, [sp, #8]
   1758c:	2b01      	cmp	r3, #1
   1758e:	d905      	bls.n	1759c <Sd::WriteBlock(unsigned long, unsigned char const*, unsigned long)+0x30>
    {
      write_cmd       = Command::kWriteMulti;
   17590:	2359      	movs	r3, #89	; 0x59
   17592:	9313      	str	r3, [sp, #76]	; 0x4c
      write_start_tkn = 0xFC;
   17594:	23fc      	movs	r3, #252	; 0xfc
   17596:	f88d 304b 	strb.w	r3, [sp, #75]	; 0x4b
   1759a:	e004      	b.n	175a6 <Sd::WriteBlock(unsigned long, unsigned char const*, unsigned long)+0x3a>
    }
    else
    {
      write_cmd       = Command::kWriteSingle;
   1759c:	2358      	movs	r3, #88	; 0x58
   1759e:	9313      	str	r3, [sp, #76]	; 0x4c
      write_start_tkn = 0xFE;
   175a0:	23fe      	movs	r3, #254	; 0xfe
   175a2:	f88d 304b 	strb.w	r3, [sp, #75]	; 0x4b
    }

    // Send initial write command
    sd.response.length = SendCmd(write_cmd, address, sd.response.data.byte, 100,
                                 KeepAlive::kYes);
   175a6:	9b05      	ldr	r3, [sp, #20]
   175a8:	681b      	ldr	r3, [r3, #0]
   175aa:	681c      	ldr	r4, [r3, #0]
    sd.response.length = SendCmd(write_cmd, address, sd.response.data.byte, 100,
   175ac:	ab06      	add	r3, sp, #24
   175ae:	f103 0208 	add.w	r2, r3, #8
   175b2:	2301      	movs	r3, #1
   175b4:	9301      	str	r3, [sp, #4]
   175b6:	2364      	movs	r3, #100	; 0x64
   175b8:	9300      	str	r3, [sp, #0]
   175ba:	4613      	mov	r3, r2
   175bc:	9a04      	ldr	r2, [sp, #16]
   175be:	9913      	ldr	r1, [sp, #76]	; 0x4c
   175c0:	9805      	ldr	r0, [sp, #20]
   175c2:	47a0      	blx	r4
   175c4:	4603      	mov	r3, r0
   175c6:	930a      	str	r3, [sp, #40]	; 0x28
    LOG_DEBUG("Sent Write Cmd");
    LOG_DEBUG("[R1 Response:0x%02X]", sd.response.data.byte[0]);

    // Check if the response was acknowledged properly
    if (sd.response.data.byte[0] == 0x00)
   175c8:	f89d 3020 	ldrb.w	r3, [sp, #32]
   175cc:	2b00      	cmp	r3, #0
   175ce:	f040 8096 	bne.w	176fe <Sd::WriteBlock(unsigned long, unsigned char const*, unsigned long)+0x192>
    {
      // If no errors, proceed write given block(s) to SD Card
      // For each given block
      for (uint16_t current_block_num = 0; current_block_num < blocks;
   175d2:	2300      	movs	r3, #0
   175d4:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
   175d8:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
   175dc:	9a02      	ldr	r2, [sp, #8]
   175de:	429a      	cmp	r2, r3
   175e0:	d97a      	bls.n	176d8 <Sd::WriteBlock(unsigned long, unsigned char const*, unsigned long)+0x16c>
           current_block_num++)
      {
        // Calculate array offset
        uint64_t arr_offset = current_block_num * kBlockSize;
   175e2:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
   175e6:	025b      	lsls	r3, r3, #9
   175e8:	ea4f 74e3 	mov.w	r4, r3, asr #31
   175ec:	e9cd 340e 	strd	r3, r4, [sp, #56]	; 0x38

        // Send the start token for the current block
        ssp_interface_->Transfer(write_start_tkn);
   175f0:	9b05      	ldr	r3, [sp, #20]
   175f2:	685a      	ldr	r2, [r3, #4]
   175f4:	9b05      	ldr	r3, [sp, #20]
   175f6:	685b      	ldr	r3, [r3, #4]
   175f8:	681b      	ldr	r3, [r3, #0]
   175fa:	3308      	adds	r3, #8
   175fc:	681b      	ldr	r3, [r3, #0]
   175fe:	f89d 104b 	ldrb.w	r1, [sp, #75]	; 0x4b
   17602:	b289      	uxth	r1, r1
   17604:	4610      	mov	r0, r2
   17606:	4798      	blx	r3

        // Write all 512-bytes of the given block
        LOG_DEBUG("Writing block #%d", current_block_num);
        for (uint16_t current_byte = 0; current_byte < kBlockSize;
   17608:	2300      	movs	r3, #0
   1760a:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
   1760e:	f8bd 3046 	ldrh.w	r3, [sp, #70]	; 0x46
   17612:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   17616:	d216      	bcs.n	17646 <Sd::WriteBlock(unsigned long, unsigned char const*, unsigned long)+0xda>
             current_byte++)
        {
          ssp_interface_->Transfer(array[arr_offset + current_byte]);
   17618:	9b05      	ldr	r3, [sp, #20]
   1761a:	6858      	ldr	r0, [r3, #4]
   1761c:	9b05      	ldr	r3, [sp, #20]
   1761e:	685b      	ldr	r3, [r3, #4]
   17620:	681b      	ldr	r3, [r3, #0]
   17622:	3308      	adds	r3, #8
   17624:	681b      	ldr	r3, [r3, #0]
   17626:	990e      	ldr	r1, [sp, #56]	; 0x38
   17628:	f8bd 2046 	ldrh.w	r2, [sp, #70]	; 0x46
   1762c:	440a      	add	r2, r1
   1762e:	9903      	ldr	r1, [sp, #12]
   17630:	440a      	add	r2, r1
   17632:	7812      	ldrb	r2, [r2, #0]
   17634:	b292      	uxth	r2, r2
   17636:	4611      	mov	r1, r2
   17638:	4798      	blx	r3
        for (uint16_t current_byte = 0; current_byte < kBlockSize;
   1763a:	f8bd 3046 	ldrh.w	r3, [sp, #70]	; 0x46
   1763e:	3301      	adds	r3, #1
   17640:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
   17644:	e7e3      	b.n	1760e <Sd::WriteBlock(unsigned long, unsigned char const*, unsigned long)+0xa2>
        }

        // Read the data response token after writing the block
        uint8_t data_response_tkn =
            static_cast<uint8_t>(ssp_interface_->Transfer(0xFF));
   17646:	9b05      	ldr	r3, [sp, #20]
   17648:	685a      	ldr	r2, [r3, #4]
   1764a:	9b05      	ldr	r3, [sp, #20]
   1764c:	685b      	ldr	r3, [r3, #4]
   1764e:	681b      	ldr	r3, [r3, #0]
   17650:	3308      	adds	r3, #8
   17652:	681b      	ldr	r3, [r3, #0]
   17654:	21ff      	movs	r1, #255	; 0xff
   17656:	4610      	mov	r0, r2
   17658:	4798      	blx	r3
   1765a:	4603      	mov	r3, r0
   1765c:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
                  ToBool(data_response_tkn & 0x0B));
        LOG_DEBUG("Data Rejected (write err)?: %s",
                  ToBool(data_response_tkn & 0x0D));

        // If writing multiple blocks and the previous block was rejected
        if (blocks > 1 && !(data_response_tkn & 0x05))
   17660:	9b02      	ldr	r3, [sp, #8]
   17662:	2b01      	cmp	r3, #1
   17664:	d92f      	bls.n	176c6 <Sd::WriteBlock(unsigned long, unsigned char const*, unsigned long)+0x15a>
   17666:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
   1766a:	f003 0305 	and.w	r3, r3, #5
   1766e:	2b00      	cmp	r3, #0
   17670:	d129      	bne.n	176c6 <Sd::WriteBlock(unsigned long, unsigned char const*, unsigned long)+0x15a>
        {
          // Send an immediate stop (CMD12)
          sd.response.length =
              SendCmd(Command::kStopTrans, 0xFFFFFFFF, sd.response.data.byte,
                      100, KeepAlive::kYes);
   17672:	9b05      	ldr	r3, [sp, #20]
   17674:	681b      	ldr	r3, [r3, #0]
   17676:	681c      	ldr	r4, [r3, #0]
              SendCmd(Command::kStopTrans, 0xFFFFFFFF, sd.response.data.byte,
   17678:	ab06      	add	r3, sp, #24
   1767a:	f103 0208 	add.w	r2, r3, #8
   1767e:	2301      	movs	r3, #1
   17680:	9301      	str	r3, [sp, #4]
   17682:	2364      	movs	r3, #100	; 0x64
   17684:	9300      	str	r3, [sp, #0]
   17686:	4613      	mov	r3, r2
   17688:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1768c:	214c      	movs	r1, #76	; 0x4c
   1768e:	9805      	ldr	r0, [sp, #20]
   17690:	47a0      	blx	r4
   17692:	4603      	mov	r3, r0
          sd.response.length =
   17694:	930a      	str	r3, [sp, #40]	; 0x28
          LOG_DEBUG("Stopped Transmission due to rejection...");
          LOG_DEBUG("[R1 Response: 0x%02X]", sd.response.data.byte[0]);

          // In the case of a write error, ask for the reason why
          if (data_response_tkn & 0x0D)
   17696:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
   1769a:	f003 030d 	and.w	r3, r3, #13
   1769e:	2b00      	cmp	r3, #0
   176a0:	d011      	beq.n	176c6 <Sd::WriteBlock(unsigned long, unsigned char const*, unsigned long)+0x15a>
          {
            sd.response.length =
                SendCmd(Command::kGetStatus, 0xFFFFFFFF, sd.response.data.byte,
                        100, KeepAlive::kYes);
   176a2:	9b05      	ldr	r3, [sp, #20]
   176a4:	681b      	ldr	r3, [r3, #0]
   176a6:	681c      	ldr	r4, [r3, #0]
                SendCmd(Command::kGetStatus, 0xFFFFFFFF, sd.response.data.byte,
   176a8:	ab06      	add	r3, sp, #24
   176aa:	f103 0208 	add.w	r2, r3, #8
   176ae:	2301      	movs	r3, #1
   176b0:	9301      	str	r3, [sp, #4]
   176b2:	2364      	movs	r3, #100	; 0x64
   176b4:	9300      	str	r3, [sp, #0]
   176b6:	4613      	mov	r3, r2
   176b8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   176bc:	210d      	movs	r1, #13
   176be:	9805      	ldr	r0, [sp, #20]
   176c0:	47a0      	blx	r4
   176c2:	4603      	mov	r3, r0
            sd.response.length =
   176c4:	930a      	str	r3, [sp, #40]	; 0x28
                "Checking Status Register to see cause of Write Error...");
            LOG_DEBUG("[R2 Response: 0x%04" PRIX32 "]",
                      sd.response.data.dWord.lo);
          }
        }
        WaitWhileBusy();
   176c6:	9805      	ldr	r0, [sp, #20]
   176c8:	f7ff fd1c 	bl	17104 <Sd::WaitWhileBusy()>
      for (uint16_t current_block_num = 0; current_block_num < blocks;
   176cc:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
   176d0:	3301      	adds	r3, #1
   176d2:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
   176d6:	e77f      	b.n	175d8 <Sd::WriteBlock(unsigned long, unsigned char const*, unsigned long)+0x6c>
      }

      if (blocks > 1)
   176d8:	9b02      	ldr	r3, [sp, #8]
   176da:	2b01      	cmp	r3, #1
   176dc:	d90f      	bls.n	176fe <Sd::WriteBlock(unsigned long, unsigned char const*, unsigned long)+0x192>
      {
        constexpr uint8_t kStopToken = 0xFD;
   176de:	23fd      	movs	r3, #253	; 0xfd
   176e0:	f88d 3036 	strb.w	r3, [sp, #54]	; 0x36
        ssp_interface_->Transfer(kStopToken);
   176e4:	9b05      	ldr	r3, [sp, #20]
   176e6:	685a      	ldr	r2, [r3, #4]
   176e8:	9b05      	ldr	r3, [sp, #20]
   176ea:	685b      	ldr	r3, [r3, #4]
   176ec:	681b      	ldr	r3, [r3, #0]
   176ee:	3308      	adds	r3, #8
   176f0:	681b      	ldr	r3, [r3, #0]
   176f2:	21fd      	movs	r1, #253	; 0xfd
   176f4:	4610      	mov	r0, r2
   176f6:	4798      	blx	r3

        // Wait for the card's programming to complete before
        // reselecting it (i.e. to prevent corruption)
        WaitWhileBusy();
   176f8:	9805      	ldr	r0, [sp, #20]
   176fa:	f7ff fd03 	bl	17104 <Sd::WaitWhileBusy()>
      LOG_DEBUG("Illegal Cmd Err: %s", ToBool(sd.response.data.byte[0] & 0x04));
      LOG_DEBUG("Erase Reset: %s", ToBool(sd.response.data.byte[0] & 0x02));
      LOG_DEBUG("In Idle: %s", ToBool(sd.response.data.byte[0] & 0x01));
    }

    return sd.response.data.byte[0];
   176fe:	f89d 4020 	ldrb.w	r4, [sp, #32]
   17702:	462b      	mov	r3, r5
   17704:	4619      	mov	r1, r3
   17706:	4803      	ldr	r0, [pc, #12]	; (17714 <Sd::WriteBlock(unsigned long, unsigned char const*, unsigned long)+0x1a8>)
   17708:	f7fd ff44 	bl	15594 <__cyg_profile_func_exit>
   1770c:	4623      	mov	r3, r4
  }
   1770e:	4618      	mov	r0, r3
   17710:	b015      	add	sp, #84	; 0x54
   17712:	bd30      	pop	{r4, r5, pc}
   17714:	0001756d 	.word	0x0001756d

00017718 <Sd::DeleteBlock(unsigned long, unsigned long)>:

  // Deletes any number of blocks (inclusively) within a range of address.
  uint8_t DeleteBlock(uint32_t start, uint32_t end) override
   17718:	b530      	push	{r4, r5, lr}
   1771a:	b08f      	sub	sp, #60	; 0x3c
   1771c:	4675      	mov	r5, lr
   1771e:	9005      	str	r0, [sp, #20]
   17720:	9104      	str	r1, [sp, #16]
   17722:	9203      	str	r2, [sp, #12]
   17724:	462b      	mov	r3, r5
   17726:	4619      	mov	r1, r3
   17728:	483d      	ldr	r0, [pc, #244]	; (17820 <Sd::DeleteBlock(unsigned long, unsigned long)+0x108>)
   1772a:	f7fd ff1f 	bl	1556c <__cyg_profile_func_enter>
  {
    // Wait for a previous command to finish
    WaitWhileBusy();
   1772e:	9805      	ldr	r0, [sp, #20]
   17730:	f7ff fce8 	bl	17104 <Sd::WaitWhileBusy()>

    // Create a temporary storage location to store sd command responses
    Sd::CardInfo_t sd;
    bool delete_failed = false;
   17734:	2300      	movs	r3, #0
   17736:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37

    // Set the delete start address
    LOG_DEBUG("Setting Delete Start Address...");
    sd.response.length = SendCmd(Command::kDelFrom, start,
                                 sd.response.data.byte, 100, KeepAlive::kYes);
   1773a:	9b05      	ldr	r3, [sp, #20]
   1773c:	681b      	ldr	r3, [r3, #0]
   1773e:	681c      	ldr	r4, [r3, #0]
    sd.response.length = SendCmd(Command::kDelFrom, start,
   17740:	ab06      	add	r3, sp, #24
   17742:	f103 0208 	add.w	r2, r3, #8
   17746:	2301      	movs	r3, #1
   17748:	9301      	str	r3, [sp, #4]
   1774a:	2364      	movs	r3, #100	; 0x64
   1774c:	9300      	str	r3, [sp, #0]
   1774e:	4613      	mov	r3, r2
   17750:	9a04      	ldr	r2, [sp, #16]
   17752:	2160      	movs	r1, #96	; 0x60
   17754:	9805      	ldr	r0, [sp, #20]
   17756:	47a0      	blx	r4
   17758:	4603      	mov	r3, r0
   1775a:	930a      	str	r3, [sp, #40]	; 0x28

    // Wait while the writing the start address
    WaitWhileBusy();
   1775c:	9805      	ldr	r0, [sp, #20]
   1775e:	f7ff fcd1 	bl	17104 <Sd::WaitWhileBusy()>

    // Force return if an error occurred
    if (sd.response.data.byte[0] != 0x00)
   17762:	f89d 3020 	ldrb.w	r3, [sp, #32]
   17766:	2b00      	cmp	r3, #0
   17768:	d009      	beq.n	1777e <Sd::DeleteBlock(unsigned long, unsigned long)+0x66>
    {
      LOG_ERROR("Failed to set Start Address!");
   1776a:	f44f 736a 	mov.w	r3, #936	; 0x3a8
   1776e:	4a2d      	ldr	r2, [pc, #180]	; (17824 <Sd::DeleteBlock(unsigned long, unsigned long)+0x10c>)
   17770:	492d      	ldr	r1, [pc, #180]	; (17828 <Sd::DeleteBlock(unsigned long, unsigned long)+0x110>)
   17772:	482e      	ldr	r0, [pc, #184]	; (1782c <Sd::DeleteBlock(unsigned long, unsigned long)+0x114>)
   17774:	f7ff f956 	bl	16a24 <printf>
      delete_failed = true;
   17778:	2301      	movs	r3, #1
   1777a:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
    }

    // Set the delete end address
    if (!delete_failed)
   1777e:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
   17782:	f083 0301 	eor.w	r3, r3, #1
   17786:	b2db      	uxtb	r3, r3
   17788:	2b00      	cmp	r3, #0
   1778a:	d010      	beq.n	177ae <Sd::DeleteBlock(unsigned long, unsigned long)+0x96>
    {
      LOG_DEBUG("Setting Delete End Address...");
      sd.response.length = SendCmd(Command::kDelTo, end, sd.response.data.byte,
                                   100, KeepAlive::kYes);
   1778c:	9b05      	ldr	r3, [sp, #20]
   1778e:	681b      	ldr	r3, [r3, #0]
   17790:	681c      	ldr	r4, [r3, #0]
      sd.response.length = SendCmd(Command::kDelTo, end, sd.response.data.byte,
   17792:	ab06      	add	r3, sp, #24
   17794:	f103 0208 	add.w	r2, r3, #8
   17798:	2301      	movs	r3, #1
   1779a:	9301      	str	r3, [sp, #4]
   1779c:	2364      	movs	r3, #100	; 0x64
   1779e:	9300      	str	r3, [sp, #0]
   177a0:	4613      	mov	r3, r2
   177a2:	9a03      	ldr	r2, [sp, #12]
   177a4:	2161      	movs	r1, #97	; 0x61
   177a6:	9805      	ldr	r0, [sp, #20]
   177a8:	47a0      	blx	r4
   177aa:	4603      	mov	r3, r0
   177ac:	930a      	str	r3, [sp, #40]	; 0x28
    }

    // Wait while the writing the end address
    WaitWhileBusy();
   177ae:	9805      	ldr	r0, [sp, #20]
   177b0:	f7ff fca8 	bl	17104 <Sd::WaitWhileBusy()>

    // Force return if an error occurred
    if (sd.response.data.byte[0] != 0x00)
   177b4:	f89d 3020 	ldrb.w	r3, [sp, #32]
   177b8:	2b00      	cmp	r3, #0
   177ba:	d009      	beq.n	177d0 <Sd::DeleteBlock(unsigned long, unsigned long)+0xb8>
    {
      LOG_ERROR("Failed to set End Address!");
   177bc:	f240 33ba 	movw	r3, #954	; 0x3ba
   177c0:	4a18      	ldr	r2, [pc, #96]	; (17824 <Sd::DeleteBlock(unsigned long, unsigned long)+0x10c>)
   177c2:	491b      	ldr	r1, [pc, #108]	; (17830 <Sd::DeleteBlock(unsigned long, unsigned long)+0x118>)
   177c4:	481b      	ldr	r0, [pc, #108]	; (17834 <Sd::DeleteBlock(unsigned long, unsigned long)+0x11c>)
   177c6:	f7ff f92d 	bl	16a24 <printf>
      delete_failed = true;
   177ca:	2301      	movs	r3, #1
   177cc:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
    }

    // Finally, attempt a delete
    if (!delete_failed)
   177d0:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
   177d4:	f083 0301 	eor.w	r3, r3, #1
   177d8:	b2db      	uxtb	r3, r3
   177da:	2b00      	cmp	r3, #0
   177dc:	d014      	beq.n	17808 <Sd::DeleteBlock(unsigned long, unsigned long)+0xf0>
    {
      // Issue the delete command to delete from our from:to range
      LOG_DEBUG("Issuing Delete Command...");
      sd.response.length = SendCmd(Command::kDel, 0xFFFFFFFF,
                                   sd.response.data.byte, 100, KeepAlive::kYes);
   177de:	9b05      	ldr	r3, [sp, #20]
   177e0:	681b      	ldr	r3, [r3, #0]
   177e2:	681c      	ldr	r4, [r3, #0]
      sd.response.length = SendCmd(Command::kDel, 0xFFFFFFFF,
   177e4:	ab06      	add	r3, sp, #24
   177e6:	f103 0208 	add.w	r2, r3, #8
   177ea:	2301      	movs	r3, #1
   177ec:	9301      	str	r3, [sp, #4]
   177ee:	2364      	movs	r3, #100	; 0x64
   177f0:	9300      	str	r3, [sp, #0]
   177f2:	4613      	mov	r3, r2
   177f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   177f8:	2166      	movs	r1, #102	; 0x66
   177fa:	9805      	ldr	r0, [sp, #20]
   177fc:	47a0      	blx	r4
   177fe:	4603      	mov	r3, r0
   17800:	930a      	str	r3, [sp, #40]	; 0x28

      // Wait while the deletion occurs
      WaitWhileBusy();
   17802:	9805      	ldr	r0, [sp, #20]
   17804:	f7ff fc7e 	bl	17104 <Sd::WaitWhileBusy()>
      LOG_DEBUG("[R1 Response: 0x%02X]", sd.response.data.byte[0]);
      LOG_DEBUG("Deletion Complete...");
    }

    // Return status
    return sd.response.data.byte[0];
   17808:	f89d 4020 	ldrb.w	r4, [sp, #32]
   1780c:	462b      	mov	r3, r5
   1780e:	4619      	mov	r1, r3
   17810:	4803      	ldr	r0, [pc, #12]	; (17820 <Sd::DeleteBlock(unsigned long, unsigned long)+0x108>)
   17812:	f7fd febf 	bl	15594 <__cyg_profile_func_exit>
   17816:	4623      	mov	r3, r4
  }
   17818:	4618      	mov	r0, r3
   1781a:	b00f      	add	sp, #60	; 0x3c
   1781c:	bd30      	pop	{r4, r5, pc}
   1781e:	bf00      	nop
   17820:	00017719 	.word	0x00017719
   17824:	0001acb0 	.word	0x0001acb0
   17828:	0001abc8 	.word	0x0001abc8
   1782c:	0001a6e0 	.word	0x0001a6e0
   17830:	0001abd0 	.word	0x0001abd0
   17834:	0001a738 	.word	0x0001a738

00017838 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)>:

  // Send a command
  uint32_t SendCmd(Command sdc, uint32_t arg, uint8_t response_buffer[],
   17838:	e92d 49f0 	stmdb	sp!, {r4, r5, r6, r7, r8, fp, lr}
   1783c:	b08f      	sub	sp, #60	; 0x3c
   1783e:	46f0      	mov	r8, lr
   17840:	9003      	str	r0, [sp, #12]
   17842:	9102      	str	r1, [sp, #8]
   17844:	9201      	str	r2, [sp, #4]
   17846:	9300      	str	r3, [sp, #0]
   17848:	4643      	mov	r3, r8
   1784a:	4619      	mov	r1, r3
   1784c:	4840      	ldr	r0, [pc, #256]	; (17950 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x118>)
   1784e:	f7fd fe8d 	bl	1556c <__cyg_profile_func_enter>
                   uint32_t delay, KeepAlive keep_alive) override
  {
    ResponseType res_type;
    uint8_t res_len    = 0;
   17852:	2300      	movs	r3, #0
   17854:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
    uint8_t crc        = 0;
   17858:	2300      	movs	r3, #0
   1785a:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
    uint8_t tries      = 0;
   1785e:	2300      	movs	r3, #0
   17860:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
    uint8_t bit_offset = 0;  // determines the distance of the response's
   17864:	2300      	movs	r3, #0
   17866:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
                             // 0 bit from the MSB place
    uint8_t temp_byte = 0;
   1786a:	2300      	movs	r3, #0
   1786c:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f

    // Determine the response type of the set command
    switch (sdc)
   17870:	9b02      	ldr	r3, [sp, #8]
   17872:	2b58      	cmp	r3, #88	; 0x58
   17874:	d052      	beq.n	1791c <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0xe4>
   17876:	2b58      	cmp	r3, #88	; 0x58
   17878:	dc16      	bgt.n	178a8 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x70>
   1787a:	2b48      	cmp	r3, #72	; 0x48
   1787c:	d033      	beq.n	178e6 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0xae>
   1787e:	2b48      	cmp	r3, #72	; 0x48
   17880:	dc06      	bgt.n	17890 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x58>
   17882:	2b40      	cmp	r3, #64	; 0x40
   17884:	d029      	beq.n	178da <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0xa2>
   17886:	2b41      	cmp	r3, #65	; 0x41
   17888:	d02a      	beq.n	178e0 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0xa8>
   1788a:	2b0d      	cmp	r3, #13
   1788c:	d031      	beq.n	178f2 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0xba>
   1788e:	e054      	b.n	1793a <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x102>
   17890:	2b50      	cmp	r3, #80	; 0x50
   17892:	d03a      	beq.n	1790a <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0xd2>
   17894:	2b50      	cmp	r3, #80	; 0x50
   17896:	dc02      	bgt.n	1789e <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x66>
   17898:	2b4c      	cmp	r3, #76	; 0x4c
   1789a:	d027      	beq.n	178ec <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0xb4>
   1789c:	e04d      	b.n	1793a <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x102>
   1789e:	2b51      	cmp	r3, #81	; 0x51
   178a0:	d036      	beq.n	17910 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0xd8>
   178a2:	2b52      	cmp	r3, #82	; 0x52
   178a4:	d037      	beq.n	17916 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0xde>
   178a6:	e048      	b.n	1793a <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x102>
   178a8:	2b66      	cmp	r3, #102	; 0x66
   178aa:	d043      	beq.n	17934 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0xfc>
   178ac:	2b66      	cmp	r3, #102	; 0x66
   178ae:	dc06      	bgt.n	178be <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x86>
   178b0:	2b60      	cmp	r3, #96	; 0x60
   178b2:	d039      	beq.n	17928 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0xf0>
   178b4:	2b61      	cmp	r3, #97	; 0x61
   178b6:	d03a      	beq.n	1792e <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0xf6>
   178b8:	2b59      	cmp	r3, #89	; 0x59
   178ba:	d032      	beq.n	17922 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0xea>
   178bc:	e03d      	b.n	1793a <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x102>
   178be:	2b77      	cmp	r3, #119	; 0x77
   178c0:	d01a      	beq.n	178f8 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0xc0>
   178c2:	2b77      	cmp	r3, #119	; 0x77
   178c4:	dc02      	bgt.n	178cc <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x94>
   178c6:	2b69      	cmp	r3, #105	; 0x69
   178c8:	d019      	beq.n	178fe <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0xc6>
   178ca:	e036      	b.n	1793a <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x102>
   178cc:	2b7a      	cmp	r3, #122	; 0x7a
   178ce:	d019      	beq.n	17904 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0xcc>
   178d0:	2bff      	cmp	r3, #255	; 0xff
   178d2:	d132      	bne.n	1793a <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x102>
    {
      case Command::kGarbage: res_type = ResponseType::kR1; break;
   178d4:	2300      	movs	r3, #0
   178d6:	930d      	str	r3, [sp, #52]	; 0x34
   178d8:	e042      	b.n	17960 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x128>
      case Command::kReset: res_type = ResponseType::kR1; break;
   178da:	2300      	movs	r3, #0
   178dc:	930d      	str	r3, [sp, #52]	; 0x34
   178de:	e03f      	b.n	17960 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x128>
      case Command::kInit: res_type = ResponseType::kR1; break;
   178e0:	2300      	movs	r3, #0
   178e2:	930d      	str	r3, [sp, #52]	; 0x34
   178e4:	e03c      	b.n	17960 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x128>
      case Command::kGetOp: res_type = ResponseType::kR7; break;
   178e6:	2307      	movs	r3, #7
   178e8:	930d      	str	r3, [sp, #52]	; 0x34
   178ea:	e039      	b.n	17960 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x128>
      case Command::kStopTrans: res_type = ResponseType::kR1; break;
   178ec:	2300      	movs	r3, #0
   178ee:	930d      	str	r3, [sp, #52]	; 0x34
   178f0:	e036      	b.n	17960 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x128>
      case Command::kGetStatus: res_type = ResponseType::kR2; break;
   178f2:	2302      	movs	r3, #2
   178f4:	930d      	str	r3, [sp, #52]	; 0x34
   178f6:	e033      	b.n	17960 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x128>
      case Command::kAcBegin: res_type = ResponseType::kR1; break;
   178f8:	2300      	movs	r3, #0
   178fa:	930d      	str	r3, [sp, #52]	; 0x34
   178fc:	e030      	b.n	17960 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x128>
      case Command::kAcInit: res_type = ResponseType::kR1; break;
   178fe:	2300      	movs	r3, #0
   17900:	930d      	str	r3, [sp, #52]	; 0x34
   17902:	e02d      	b.n	17960 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x128>
      case Command::kGetOcr: res_type = ResponseType::kR3; break;
   17904:	2303      	movs	r3, #3
   17906:	930d      	str	r3, [sp, #52]	; 0x34
   17908:	e02a      	b.n	17960 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x128>
      case Command::kChgBlkLen: res_type = ResponseType::kR1; break;
   1790a:	2300      	movs	r3, #0
   1790c:	930d      	str	r3, [sp, #52]	; 0x34
   1790e:	e027      	b.n	17960 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x128>
      case Command::kReadSingle: res_type = ResponseType::kR1; break;
   17910:	2300      	movs	r3, #0
   17912:	930d      	str	r3, [sp, #52]	; 0x34
   17914:	e024      	b.n	17960 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x128>
      case Command::kReadMulti: res_type = ResponseType::kR1; break;
   17916:	2300      	movs	r3, #0
   17918:	930d      	str	r3, [sp, #52]	; 0x34
   1791a:	e021      	b.n	17960 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x128>
      case Command::kWriteSingle: res_type = ResponseType::kR1; break;
   1791c:	2300      	movs	r3, #0
   1791e:	930d      	str	r3, [sp, #52]	; 0x34
   17920:	e01e      	b.n	17960 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x128>
      case Command::kWriteMulti: res_type = ResponseType::kR1; break;
   17922:	2300      	movs	r3, #0
   17924:	930d      	str	r3, [sp, #52]	; 0x34
   17926:	e01b      	b.n	17960 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x128>
      case Command::kDelFrom: res_type = ResponseType::kR1; break;
   17928:	2300      	movs	r3, #0
   1792a:	930d      	str	r3, [sp, #52]	; 0x34
   1792c:	e018      	b.n	17960 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x128>
      case Command::kDelTo: res_type = ResponseType::kR1; break;
   1792e:	2300      	movs	r3, #0
   17930:	930d      	str	r3, [sp, #52]	; 0x34
   17932:	e015      	b.n	17960 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x128>
      case Command::kDel: res_type = ResponseType::kR1b; break;
   17934:	2301      	movs	r3, #1
   17936:	930d      	str	r3, [sp, #52]	; 0x34
   17938:	e012      	b.n	17960 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x128>
      default:
        LOG_ERROR("Unknown response type. Aborting!");
   1793a:	f240 33f3 	movw	r3, #1011	; 0x3f3
   1793e:	4a05      	ldr	r2, [pc, #20]	; (17954 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x11c>)
   17940:	4905      	ldr	r1, [pc, #20]	; (17958 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x120>)
   17942:	4806      	ldr	r0, [pc, #24]	; (1795c <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x124>)
   17944:	f7ff f86e 	bl	16a24 <printf>
        return -1;
   17948:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   1794c:	e1b1      	b.n	17cb2 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x47a>
   1794e:	bf00      	nop
   17950:	00017839 	.word	0x00017839
   17954:	0001ace4 	.word	0x0001ace4
   17958:	0001abd8 	.word	0x0001abd8
   1795c:	0001a78c 	.word	0x0001a78c
    // algorithm
    uint8_t msg[5] = { static_cast<uint8_t>(sdc),
                       static_cast<uint8_t>(arg >> 24),
                       static_cast<uint8_t>(arg >> 16),
                       static_cast<uint8_t>(arg >> 8),
                       static_cast<uint8_t>(arg >> 0) };
   17960:	9b02      	ldr	r3, [sp, #8]
   17962:	b2db      	uxtb	r3, r3
   17964:	f88d 3010 	strb.w	r3, [sp, #16]
                       static_cast<uint8_t>(arg >> 24),
   17968:	9b01      	ldr	r3, [sp, #4]
   1796a:	0e1b      	lsrs	r3, r3, #24
                       static_cast<uint8_t>(arg >> 0) };
   1796c:	b2db      	uxtb	r3, r3
   1796e:	f88d 3011 	strb.w	r3, [sp, #17]
                       static_cast<uint8_t>(arg >> 16),
   17972:	9b01      	ldr	r3, [sp, #4]
   17974:	0c1b      	lsrs	r3, r3, #16
                       static_cast<uint8_t>(arg >> 0) };
   17976:	b2db      	uxtb	r3, r3
   17978:	f88d 3012 	strb.w	r3, [sp, #18]
                       static_cast<uint8_t>(arg >> 8),
   1797c:	9b01      	ldr	r3, [sp, #4]
   1797e:	0a1b      	lsrs	r3, r3, #8
                       static_cast<uint8_t>(arg >> 0) };
   17980:	b2db      	uxtb	r3, r3
   17982:	f88d 3013 	strb.w	r3, [sp, #19]
   17986:	9b01      	ldr	r3, [sp, #4]
   17988:	b2db      	uxtb	r3, r3
   1798a:	f88d 3014 	strb.w	r3, [sp, #20]

    crc = GetCrc7(msg, sizeof(msg));
   1798e:	9b03      	ldr	r3, [sp, #12]
   17990:	681b      	ldr	r3, [r3, #0]
   17992:	331c      	adds	r3, #28
   17994:	681b      	ldr	r3, [r3, #0]
   17996:	a904      	add	r1, sp, #16
   17998:	2205      	movs	r2, #5
   1799a:	9803      	ldr	r0, [sp, #12]
   1799c:	4798      	blx	r3
   1799e:	4603      	mov	r3, r0
   179a0:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
    if (sdc == Command::kGarbage)
   179a4:	9b02      	ldr	r3, [sp, #8]
   179a6:	2bff      	cmp	r3, #255	; 0xff
   179a8:	d102      	bne.n	179b0 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x178>
    {
      crc = 0xFF;
   179aa:	23ff      	movs	r3, #255	; 0xff
   179ac:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
    }

    // Select the SD Card
    chip_select_->SetLow();
   179b0:	9b03      	ldr	r3, [sp, #12]
   179b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   179b4:	9b03      	ldr	r3, [sp, #12]
   179b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   179b8:	681b      	ldr	r3, [r3, #0]
   179ba:	3310      	adds	r3, #16
   179bc:	681b      	ldr	r3, [r3, #0]
   179be:	4610      	mov	r0, r2
   179c0:	4798      	blx	r3
    chip_select_external_->SetLow();
   179c2:	9b03      	ldr	r3, [sp, #12]
   179c4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
   179c6:	9b03      	ldr	r3, [sp, #12]
   179c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   179ca:	681b      	ldr	r3, [r3, #0]
   179cc:	3310      	adds	r3, #16
   179ce:	681b      	ldr	r3, [r3, #0]
   179d0:	4610      	mov	r0, r2
   179d2:	4798      	blx	r3

    // If desired, wait a bit before talking
    if (delay > 0)
   179d4:	9b16      	ldr	r3, [sp, #88]	; 0x58
   179d6:	2b00      	cmp	r3, #0
   179d8:	d007      	beq.n	179ea <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x1b2>
    {
      Delay(delay);
   179da:	9b16      	ldr	r3, [sp, #88]	; 0x58
   179dc:	461a      	mov	r2, r3
   179de:	f04f 0300 	mov.w	r3, #0
   179e2:	4610      	mov	r0, r2
   179e4:	4619      	mov	r1, r3
   179e6:	f7ff f8d1 	bl	16b8c <Delay(unsigned long long)>
    }

    // Send the desired command frame to the SD card board
    // Begin by transfering the command byte
    ssp_interface_->Transfer(static_cast<uint16_t>(sdc));
   179ea:	9b03      	ldr	r3, [sp, #12]
   179ec:	685a      	ldr	r2, [r3, #4]
   179ee:	9b03      	ldr	r3, [sp, #12]
   179f0:	685b      	ldr	r3, [r3, #4]
   179f2:	681b      	ldr	r3, [r3, #0]
   179f4:	3308      	adds	r3, #8
   179f6:	681b      	ldr	r3, [r3, #0]
   179f8:	9902      	ldr	r1, [sp, #8]
   179fa:	b289      	uxth	r1, r1
   179fc:	4610      	mov	r0, r2
   179fe:	4798      	blx	r3
    // Send arg byte [31:24]
    ssp_interface_->Transfer(static_cast<uint16_t>(arg >> 24) & 0xFF);
   17a00:	9b03      	ldr	r3, [sp, #12]
   17a02:	6858      	ldr	r0, [r3, #4]
   17a04:	9b03      	ldr	r3, [sp, #12]
   17a06:	685b      	ldr	r3, [r3, #4]
   17a08:	681b      	ldr	r3, [r3, #0]
   17a0a:	3308      	adds	r3, #8
   17a0c:	681b      	ldr	r3, [r3, #0]
   17a0e:	9a01      	ldr	r2, [sp, #4]
   17a10:	0e12      	lsrs	r2, r2, #24
   17a12:	b292      	uxth	r2, r2
   17a14:	b2d2      	uxtb	r2, r2
   17a16:	b292      	uxth	r2, r2
   17a18:	4611      	mov	r1, r2
   17a1a:	4798      	blx	r3
    // Send arg byte [23:16]
    ssp_interface_->Transfer(static_cast<uint16_t>(arg >> 16) & 0xFF);
   17a1c:	9b03      	ldr	r3, [sp, #12]
   17a1e:	6858      	ldr	r0, [r3, #4]
   17a20:	9b03      	ldr	r3, [sp, #12]
   17a22:	685b      	ldr	r3, [r3, #4]
   17a24:	681b      	ldr	r3, [r3, #0]
   17a26:	3308      	adds	r3, #8
   17a28:	681b      	ldr	r3, [r3, #0]
   17a2a:	9a01      	ldr	r2, [sp, #4]
   17a2c:	0c12      	lsrs	r2, r2, #16
   17a2e:	b292      	uxth	r2, r2
   17a30:	b2d2      	uxtb	r2, r2
   17a32:	b292      	uxth	r2, r2
   17a34:	4611      	mov	r1, r2
   17a36:	4798      	blx	r3
    // Send arg byte [15:8]
    ssp_interface_->Transfer(static_cast<uint16_t>(arg >> 8) & 0xFF);
   17a38:	9b03      	ldr	r3, [sp, #12]
   17a3a:	6858      	ldr	r0, [r3, #4]
   17a3c:	9b03      	ldr	r3, [sp, #12]
   17a3e:	685b      	ldr	r3, [r3, #4]
   17a40:	681b      	ldr	r3, [r3, #0]
   17a42:	3308      	adds	r3, #8
   17a44:	681b      	ldr	r3, [r3, #0]
   17a46:	9a01      	ldr	r2, [sp, #4]
   17a48:	0a12      	lsrs	r2, r2, #8
   17a4a:	b292      	uxth	r2, r2
   17a4c:	b2d2      	uxtb	r2, r2
   17a4e:	b292      	uxth	r2, r2
   17a50:	4611      	mov	r1, r2
   17a52:	4798      	blx	r3
    // Send arg byte [7:0]
    ssp_interface_->Transfer(static_cast<uint16_t>(arg >> 0) & 0xFF);
   17a54:	9b03      	ldr	r3, [sp, #12]
   17a56:	685a      	ldr	r2, [r3, #4]
   17a58:	9b03      	ldr	r3, [sp, #12]
   17a5a:	685b      	ldr	r3, [r3, #4]
   17a5c:	681b      	ldr	r3, [r3, #0]
   17a5e:	3308      	adds	r3, #8
   17a60:	681b      	ldr	r3, [r3, #0]
   17a62:	9901      	ldr	r1, [sp, #4]
   17a64:	b289      	uxth	r1, r1
   17a66:	b2c9      	uxtb	r1, r1
   17a68:	b289      	uxth	r1, r1
   17a6a:	4610      	mov	r0, r2
   17a6c:	4798      	blx	r3
    // Send 7-bit CRC and LSB stop addr (as b1)
    ssp_interface_->Transfer(static_cast<uint16_t>(crc << 1) | 0x01);
   17a6e:	9b03      	ldr	r3, [sp, #12]
   17a70:	6858      	ldr	r0, [r3, #4]
   17a72:	9b03      	ldr	r3, [sp, #12]
   17a74:	685b      	ldr	r3, [r3, #4]
   17a76:	681b      	ldr	r3, [r3, #0]
   17a78:	3308      	adds	r3, #8
   17a7a:	681b      	ldr	r3, [r3, #0]
   17a7c:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
   17a80:	b292      	uxth	r2, r2
   17a82:	0052      	lsls	r2, r2, #1
   17a84:	b292      	uxth	r2, r2
   17a86:	f042 0201 	orr.w	r2, r2, #1
   17a8a:	b292      	uxth	r2, r2
   17a8c:	4611      	mov	r1, r2
   17a8e:	4798      	blx	r3

    // Write garbage while waiting for a response
    // Send at least 1 byte of garbage before checking for a response
    temp_byte = static_cast<uint8_t>(ssp_interface_->Transfer(0xFF));
   17a90:	9b03      	ldr	r3, [sp, #12]
   17a92:	685a      	ldr	r2, [r3, #4]
   17a94:	9b03      	ldr	r3, [sp, #12]
   17a96:	685b      	ldr	r3, [r3, #4]
   17a98:	681b      	ldr	r3, [r3, #0]
   17a9a:	3308      	adds	r3, #8
   17a9c:	681b      	ldr	r3, [r3, #0]
   17a9e:	21ff      	movs	r1, #255	; 0xff
   17aa0:	4610      	mov	r0, r2
   17aa2:	4798      	blx	r3
   17aa4:	4603      	mov	r3, r0
   17aa6:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
    while (tries++ < kBusTimeout)
   17aaa:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   17aae:	1c5a      	adds	r2, r3, #1
   17ab0:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
   17ab4:	2bf9      	cmp	r3, #249	; 0xf9
   17ab6:	bf94      	ite	ls
   17ab8:	2301      	movls	r3, #1
   17aba:	2300      	movhi	r3, #0
   17abc:	b2db      	uxtb	r3, r3
   17abe:	2b00      	cmp	r3, #0
   17ac0:	d027      	beq.n	17b12 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x2da>
    {
      temp_byte = static_cast<uint8_t>(ssp_interface_->Transfer(0xFF));
   17ac2:	9b03      	ldr	r3, [sp, #12]
   17ac4:	685a      	ldr	r2, [r3, #4]
   17ac6:	9b03      	ldr	r3, [sp, #12]
   17ac8:	685b      	ldr	r3, [r3, #4]
   17aca:	681b      	ldr	r3, [r3, #0]
   17acc:	3308      	adds	r3, #8
   17ace:	681b      	ldr	r3, [r3, #0]
   17ad0:	21ff      	movs	r1, #255	; 0xff
   17ad2:	4610      	mov	r0, r2
   17ad4:	4798      	blx	r3
   17ad6:	4603      	mov	r3, r0
   17ad8:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
      if (temp_byte != 0xFF)
   17adc:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
   17ae0:	2bff      	cmp	r3, #255	; 0xff
   17ae2:	d00f      	beq.n	17b04 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x2cc>
      {
        // Determine the offset, since the first byte of a
        // response will always be 0.
        while (temp_byte & (0x80 >> bit_offset))
   17ae4:	f89d 202f 	ldrb.w	r2, [sp, #47]	; 0x2f
   17ae8:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
   17aec:	2180      	movs	r1, #128	; 0x80
   17aee:	fa41 f303 	asr.w	r3, r1, r3
   17af2:	4013      	ands	r3, r2
   17af4:	2b00      	cmp	r3, #0
   17af6:	d00b      	beq.n	17b10 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x2d8>
        {
          bit_offset++;
   17af8:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
   17afc:	3301      	adds	r3, #1
   17afe:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
        while (temp_byte & (0x80 >> bit_offset))
   17b02:	e7ef      	b.n	17ae4 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x2ac>
        }
        break;
      }
      tries++;
   17b04:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   17b08:	3301      	adds	r3, #1
   17b0a:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
    while (tries++ < kBusTimeout)
   17b0e:	e7cc      	b.n	17aaa <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x272>
        break;
   17b10:	bf00      	nop
    }

    // Determine response length (in bytes) based on response type
    switch (res_type)
   17b12:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   17b14:	2b07      	cmp	r3, #7
   17b16:	d827      	bhi.n	17b68 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x330>
   17b18:	a201      	add	r2, pc, #4	; (adr r2, 17b20 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x2e8>)
   17b1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   17b1e:	bf00      	nop
   17b20:	00017b41 	.word	0x00017b41
   17b24:	00017b49 	.word	0x00017b49
   17b28:	00017b51 	.word	0x00017b51
   17b2c:	00017b59 	.word	0x00017b59
   17b30:	00017b69 	.word	0x00017b69
   17b34:	00017b69 	.word	0x00017b69
   17b38:	00017b69 	.word	0x00017b69
   17b3c:	00017b61 	.word	0x00017b61
    {
      case ResponseType::kR1: res_len = 1; break;
   17b40:	2301      	movs	r3, #1
   17b42:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
   17b46:	e019      	b.n	17b7c <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x344>
      case ResponseType::kR1b: res_len = 1; break;
   17b48:	2301      	movs	r3, #1
   17b4a:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
   17b4e:	e015      	b.n	17b7c <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x344>
      case ResponseType::kR2: res_len = 2; break;
   17b50:	2302      	movs	r3, #2
   17b52:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
   17b56:	e011      	b.n	17b7c <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x344>
      case ResponseType::kR3: res_len = 5; break;
   17b58:	2305      	movs	r3, #5
   17b5a:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
   17b5e:	e00d      	b.n	17b7c <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x344>
      case ResponseType::kR7: res_len = 5; break;
   17b60:	2305      	movs	r3, #5
   17b62:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
   17b66:	e009      	b.n	17b7c <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x344>
      default:
        LOG_ERROR("Response unsupported in SPI mode. Aborting!");
   17b68:	f240 433a 	movw	r3, #1082	; 0x43a
   17b6c:	4a56      	ldr	r2, [pc, #344]	; (17cc8 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x490>)
   17b6e:	4957      	ldr	r1, [pc, #348]	; (17ccc <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x494>)
   17b70:	4857      	ldr	r0, [pc, #348]	; (17cd0 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x498>)
   17b72:	f7fe ff57 	bl	16a24 <printf>
        return -1;
   17b76:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   17b7a:	e09a      	b.n	17cb2 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x47a>
        break;
    }

    // Acquire the response
    uint64_t temp_response = 0;
   17b7c:	f04f 0200 	mov.w	r2, #0
   17b80:	f04f 0300 	mov.w	r3, #0
   17b84:	e9cd 2308 	strd	r2, r3, [sp, #32]
    // Read an extra 8 bits since the response was offset
    uint8_t bytes_to_read =
   17b88:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
   17b8c:	2b00      	cmp	r3, #0
   17b8e:	d004      	beq.n	17b9a <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x362>
   17b90:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
   17b94:	3301      	adds	r3, #1
   17b96:	b2db      	uxtb	r3, r3
   17b98:	e001      	b.n	17b9e <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x366>
   17b9a:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
   17b9e:	f88d 301f 	strb.w	r3, [sp, #31]
        static_cast<uint8_t>((bit_offset > 0) ? res_len + 1 : res_len);
    while (bytes_to_read-- > 0)
   17ba2:	f89d 301f 	ldrb.w	r3, [sp, #31]
   17ba6:	1e5a      	subs	r2, r3, #1
   17ba8:	f88d 201f 	strb.w	r2, [sp, #31]
   17bac:	2b00      	cmp	r3, #0
   17bae:	bf14      	ite	ne
   17bb0:	2301      	movne	r3, #1
   17bb2:	2300      	moveq	r3, #0
   17bb4:	b2db      	uxtb	r3, r3
   17bb6:	2b00      	cmp	r3, #0
   17bb8:	d025      	beq.n	17c06 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x3ce>
    {
      // Make space for the next byte
      temp_response = temp_response << 8;
   17bba:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   17bbe:	f04f 0200 	mov.w	r2, #0
   17bc2:	f04f 0300 	mov.w	r3, #0
   17bc6:	020b      	lsls	r3, r1, #8
   17bc8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
   17bcc:	0202      	lsls	r2, r0, #8
   17bce:	e9cd 2308 	strd	r2, r3, [sp, #32]
      temp_response |= temp_byte;
   17bd2:	f89d b02f 	ldrb.w	fp, [sp, #47]	; 0x2f
   17bd6:	f04f 0c00 	mov.w	ip, #0
   17bda:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   17bde:	ea4b 0200 	orr.w	r2, fp, r0
   17be2:	ea4c 0301 	orr.w	r3, ip, r1
   17be6:	e9cd 2308 	strd	r2, r3, [sp, #32]
      temp_byte = static_cast<uint8_t>(ssp_interface_->Transfer(0xFF));
   17bea:	9b03      	ldr	r3, [sp, #12]
   17bec:	685a      	ldr	r2, [r3, #4]
   17bee:	9b03      	ldr	r3, [sp, #12]
   17bf0:	685b      	ldr	r3, [r3, #4]
   17bf2:	681b      	ldr	r3, [r3, #0]
   17bf4:	3308      	adds	r3, #8
   17bf6:	681b      	ldr	r3, [r3, #0]
   17bf8:	21ff      	movs	r1, #255	; 0xff
   17bfa:	4610      	mov	r0, r2
   17bfc:	4798      	blx	r3
   17bfe:	4603      	mov	r3, r0
   17c00:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
    while (bytes_to_read-- > 0)
   17c04:	e7cd      	b.n	17ba2 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x36a>
    }
    // Compensate for the bit offset
    temp_response = temp_response >> bit_offset;
   17c06:	f89d 1030 	ldrb.w	r1, [sp, #48]	; 0x30
   17c0a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   17c0e:	f1c1 0c20 	rsb	ip, r1, #32
   17c12:	f1a1 0020 	sub.w	r0, r1, #32
   17c16:	fa22 f401 	lsr.w	r4, r2, r1
   17c1a:	fa03 fc0c 	lsl.w	ip, r3, ip
   17c1e:	ea44 040c 	orr.w	r4, r4, ip
   17c22:	fa23 f000 	lsr.w	r0, r3, r0
   17c26:	4304      	orrs	r4, r0
   17c28:	fa23 f501 	lsr.w	r5, r3, r1
   17c2c:	e9cd 4508 	strd	r4, r5, [sp, #32]

    // Only write to the response buffer if it is provided
    if (response_buffer != nullptr)
   17c30:	9b00      	ldr	r3, [sp, #0]
   17c32:	2b00      	cmp	r3, #0
   17c34:	d025      	beq.n	17c82 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x44a>
    {
      for (int i = 0; i < res_len; i++)
   17c36:	2300      	movs	r3, #0
   17c38:	9306      	str	r3, [sp, #24]
   17c3a:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
   17c3e:	9a06      	ldr	r2, [sp, #24]
   17c40:	429a      	cmp	r2, r3
   17c42:	da1e      	bge.n	17c82 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x44a>
      {
        response_buffer[i] =
            static_cast<uint8_t>(temp_response >> 8 * (res_len - 1 - i));
   17c44:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
   17c48:	1e5a      	subs	r2, r3, #1
   17c4a:	9b06      	ldr	r3, [sp, #24]
   17c4c:	1ad3      	subs	r3, r2, r3
   17c4e:	00da      	lsls	r2, r3, #3
   17c50:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   17c54:	f1c2 0020 	rsb	r0, r2, #32
   17c58:	f1a2 0120 	sub.w	r1, r2, #32
   17c5c:	fa23 f602 	lsr.w	r6, r3, r2
   17c60:	fa04 f000 	lsl.w	r0, r4, r0
   17c64:	4306      	orrs	r6, r0
   17c66:	fa24 f101 	lsr.w	r1, r4, r1
   17c6a:	430e      	orrs	r6, r1
   17c6c:	fa24 f702 	lsr.w	r7, r4, r2
        response_buffer[i] =
   17c70:	9b06      	ldr	r3, [sp, #24]
   17c72:	9a00      	ldr	r2, [sp, #0]
   17c74:	4413      	add	r3, r2
   17c76:	b2f2      	uxtb	r2, r6
   17c78:	701a      	strb	r2, [r3, #0]
      for (int i = 0; i < res_len; i++)
   17c7a:	9b06      	ldr	r3, [sp, #24]
   17c7c:	3301      	adds	r3, #1
   17c7e:	9306      	str	r3, [sp, #24]
   17c80:	e7db      	b.n	17c3a <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x402>
      }
    }

    // Only end the transaction if keep_alive isn't requested
    if (keep_alive == KeepAlive::kNo)
   17c82:	f89d 305c 	ldrb.w	r3, [sp, #92]	; 0x5c
   17c86:	2b00      	cmp	r3, #0
   17c88:	d111      	bne.n	17cae <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x476>
    {
      // Deselect the SPI comm board
      chip_select_->SetHigh();
   17c8a:	9b03      	ldr	r3, [sp, #12]
   17c8c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   17c8e:	9b03      	ldr	r3, [sp, #12]
   17c90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   17c92:	681b      	ldr	r3, [r3, #0]
   17c94:	330c      	adds	r3, #12
   17c96:	681b      	ldr	r3, [r3, #0]
   17c98:	4610      	mov	r0, r2
   17c9a:	4798      	blx	r3
      chip_select_external_->SetHigh();
   17c9c:	9b03      	ldr	r3, [sp, #12]
   17c9e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
   17ca0:	9b03      	ldr	r3, [sp, #12]
   17ca2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   17ca4:	681b      	ldr	r3, [r3, #0]
   17ca6:	330c      	adds	r3, #12
   17ca8:	681b      	ldr	r3, [r3, #0]
   17caa:	4610      	mov	r0, r2
   17cac:	4798      	blx	r3
    }
    return res_len;
   17cae:	f89d 4033 	ldrb.w	r4, [sp, #51]	; 0x33
   17cb2:	4643      	mov	r3, r8
   17cb4:	4619      	mov	r1, r3
   17cb6:	4807      	ldr	r0, [pc, #28]	; (17cd4 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x49c>)
   17cb8:	f7fd fc6c 	bl	15594 <__cyg_profile_func_exit>
   17cbc:	4623      	mov	r3, r4
  }
   17cbe:	4618      	mov	r0, r3
   17cc0:	b00f      	add	sp, #60	; 0x3c
   17cc2:	e8bd 89f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, fp, pc}
   17cc6:	bf00      	nop
   17cc8:	0001ace4 	.word	0x0001ace4
   17ccc:	0001abe0 	.word	0x0001abe0
   17cd0:	0001a7e8 	.word	0x0001a7e8
   17cd4:	00017839 	.word	0x00017839

00017cd8 <Sd::Crc7Add(unsigned char, unsigned char)>:

  // Adds a message byte to the current CRC-7 to get a the new CRC-7
  uint8_t Crc7Add(uint8_t crc, uint8_t message_byte) override
   17cd8:	b530      	push	{r4, r5, lr}
   17cda:	b083      	sub	sp, #12
   17cdc:	4675      	mov	r5, lr
   17cde:	9001      	str	r0, [sp, #4]
   17ce0:	460b      	mov	r3, r1
   17ce2:	f88d 3003 	strb.w	r3, [sp, #3]
   17ce6:	4613      	mov	r3, r2
   17ce8:	f88d 3002 	strb.w	r3, [sp, #2]
   17cec:	462b      	mov	r3, r5
   17cee:	4619      	mov	r1, r3
   17cf0:	4809      	ldr	r0, [pc, #36]	; (17d18 <Sd::Crc7Add(unsigned char, unsigned char)+0x40>)
   17cf2:	f7fd fc3b 	bl	1556c <__cyg_profile_func_enter>
  {
    return kCrcTable8.crc_table[(crc << 1) ^ message_byte];
   17cf6:	f89d 3003 	ldrb.w	r3, [sp, #3]
   17cfa:	005a      	lsls	r2, r3, #1
   17cfc:	f89d 3002 	ldrb.w	r3, [sp, #2]
   17d00:	4053      	eors	r3, r2
   17d02:	4a06      	ldr	r2, [pc, #24]	; (17d1c <Sd::Crc7Add(unsigned char, unsigned char)+0x44>)
   17d04:	5cd4      	ldrb	r4, [r2, r3]
   17d06:	462b      	mov	r3, r5
   17d08:	4619      	mov	r1, r3
   17d0a:	4803      	ldr	r0, [pc, #12]	; (17d18 <Sd::Crc7Add(unsigned char, unsigned char)+0x40>)
   17d0c:	f7fd fc42 	bl	15594 <__cyg_profile_func_exit>
   17d10:	4623      	mov	r3, r4
  }
   17d12:	4618      	mov	r0, r3
   17d14:	b003      	add	sp, #12
   17d16:	bd30      	pop	{r4, r5, pc}
   17d18:	00017cd9 	.word	0x00017cd9
   17d1c:	0001a850 	.word	0x0001a850

00017d20 <Sd::GetCrc7(unsigned char*, unsigned char)>:

  // Returns the CRC-7 for a message of "length" bytes
  uint8_t GetCrc7(uint8_t * message, uint8_t length) override
   17d20:	b530      	push	{r4, r5, lr}
   17d22:	b087      	sub	sp, #28
   17d24:	4675      	mov	r5, lr
   17d26:	9003      	str	r0, [sp, #12]
   17d28:	9102      	str	r1, [sp, #8]
   17d2a:	4613      	mov	r3, r2
   17d2c:	f88d 3007 	strb.w	r3, [sp, #7]
   17d30:	462b      	mov	r3, r5
   17d32:	4619      	mov	r1, r3
   17d34:	4815      	ldr	r0, [pc, #84]	; (17d8c <Sd::GetCrc7(unsigned char*, unsigned char)+0x6c>)
   17d36:	f7fd fc19 	bl	1556c <__cyg_profile_func_enter>
  {
    uint8_t crc = 0;
   17d3a:	2300      	movs	r3, #0
   17d3c:	f88d 3017 	strb.w	r3, [sp, #23]
    for (int i = 0; i < length; i++)
   17d40:	2300      	movs	r3, #0
   17d42:	9304      	str	r3, [sp, #16]
   17d44:	f89d 3007 	ldrb.w	r3, [sp, #7]
   17d48:	9a04      	ldr	r2, [sp, #16]
   17d4a:	429a      	cmp	r2, r3
   17d4c:	da12      	bge.n	17d74 <Sd::GetCrc7(unsigned char*, unsigned char)+0x54>
    {
      crc = Crc7Add(crc, message[i]);
   17d4e:	9b03      	ldr	r3, [sp, #12]
   17d50:	681b      	ldr	r3, [r3, #0]
   17d52:	3318      	adds	r3, #24
   17d54:	681b      	ldr	r3, [r3, #0]
   17d56:	9a04      	ldr	r2, [sp, #16]
   17d58:	9902      	ldr	r1, [sp, #8]
   17d5a:	440a      	add	r2, r1
   17d5c:	7812      	ldrb	r2, [r2, #0]
   17d5e:	f89d 1017 	ldrb.w	r1, [sp, #23]
   17d62:	9803      	ldr	r0, [sp, #12]
   17d64:	4798      	blx	r3
   17d66:	4603      	mov	r3, r0
   17d68:	f88d 3017 	strb.w	r3, [sp, #23]
    for (int i = 0; i < length; i++)
   17d6c:	9b04      	ldr	r3, [sp, #16]
   17d6e:	3301      	adds	r3, #1
   17d70:	9304      	str	r3, [sp, #16]
   17d72:	e7e7      	b.n	17d44 <Sd::GetCrc7(unsigned char*, unsigned char)+0x24>
    }
    return crc;
   17d74:	f89d 4017 	ldrb.w	r4, [sp, #23]
   17d78:	462b      	mov	r3, r5
   17d7a:	4619      	mov	r1, r3
   17d7c:	4803      	ldr	r0, [pc, #12]	; (17d8c <Sd::GetCrc7(unsigned char*, unsigned char)+0x6c>)
   17d7e:	f7fd fc09 	bl	15594 <__cyg_profile_func_exit>
   17d82:	4623      	mov	r3, r4
  }
   17d84:	4618      	mov	r0, r3
   17d86:	b007      	add	sp, #28
   17d88:	bd30      	pop	{r4, r5, pc}
   17d8a:	bf00      	nop
   17d8c:	00017d21 	.word	0x00017d21

00017d90 <Sd::GetCrc16(unsigned char*, unsigned short)>:

  // Returns CCITT CRC-16 for a message of "length" bytes
  uint16_t GetCrc16(uint8_t * message, uint16_t length) override
   17d90:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
   17d94:	b08c      	sub	sp, #48	; 0x30
   17d96:	4677      	mov	r7, lr
   17d98:	9003      	str	r0, [sp, #12]
   17d9a:	9102      	str	r1, [sp, #8]
   17d9c:	4613      	mov	r3, r2
   17d9e:	f8ad 3006 	strh.w	r3, [sp, #6]
   17da2:	463b      	mov	r3, r7
   17da4:	4619      	mov	r1, r3
   17da6:	4837      	ldr	r0, [pc, #220]	; (17e84 <Sd::GetCrc16(unsigned char*, unsigned short)+0xf4>)
   17da8:	f7fd fbe0 	bl	1556c <__cyg_profile_func_enter>
  {
    uint64_t crc = 0x0000;
   17dac:	f04f 0300 	mov.w	r3, #0
   17db0:	f04f 0400 	mov.w	r4, #0
   17db4:	e9cd 340a 	strd	r3, r4, [sp, #40]	; 0x28
    uint64_t temp;
    uint64_t final_value = 0;
   17db8:	f04f 0300 	mov.w	r3, #0
   17dbc:	f04f 0400 	mov.w	r4, #0
   17dc0:	e9cd 3406 	strd	r3, r4, [sp, #24]

    for (uint64_t count = 0; count < length; ++count)
   17dc4:	f04f 0300 	mov.w	r3, #0
   17dc8:	f04f 0400 	mov.w	r4, #0
   17dcc:	e9cd 3408 	strd	r3, r4, [sp, #32]
   17dd0:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   17dd4:	f04f 0400 	mov.w	r4, #0
   17dd8:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
   17ddc:	42a2      	cmp	r2, r4
   17dde:	bf08      	it	eq
   17de0:	4299      	cmpeq	r1, r3
   17de2:	d23f      	bcs.n	17e64 <Sd::GetCrc16(unsigned char*, unsigned short)+0xd4>
    {
      temp = (*message++ ^ (crc >> 8)) & 0xff;
   17de4:	9b02      	ldr	r3, [sp, #8]
   17de6:	1c5a      	adds	r2, r3, #1
   17de8:	9202      	str	r2, [sp, #8]
   17dea:	781b      	ldrb	r3, [r3, #0]
   17dec:	b2dd      	uxtb	r5, r3
   17dee:	f04f 0600 	mov.w	r6, #0
   17df2:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
   17df6:	f04f 0300 	mov.w	r3, #0
   17dfa:	f04f 0400 	mov.w	r4, #0
   17dfe:	0a0b      	lsrs	r3, r1, #8
   17e00:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
   17e04:	0a14      	lsrs	r4, r2, #8
   17e06:	ea83 0b05 	eor.w	fp, r3, r5
   17e0a:	ea84 0c06 	eor.w	ip, r4, r6
   17e0e:	f04f 01ff 	mov.w	r1, #255	; 0xff
   17e12:	f04f 0200 	mov.w	r2, #0
   17e16:	ea0b 0301 	and.w	r3, fp, r1
   17e1a:	ea0c 0402 	and.w	r4, ip, r2
   17e1e:	e9cd 3404 	strd	r3, r4, [sp, #16]
      crc  = kCrcTable16.crc_table[temp] ^ (crc << 8);
   17e22:	4a19      	ldr	r2, [pc, #100]	; (17e88 <Sd::GetCrc16(unsigned char*, unsigned short)+0xf8>)
   17e24:	9b04      	ldr	r3, [sp, #16]
   17e26:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
   17e2a:	b29d      	uxth	r5, r3
   17e2c:	f04f 0600 	mov.w	r6, #0
   17e30:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
   17e34:	f04f 0b00 	mov.w	fp, #0
   17e38:	f04f 0c00 	mov.w	ip, #0
   17e3c:	ea4f 2c02 	mov.w	ip, r2, lsl #8
   17e40:	ea4c 6c11 	orr.w	ip, ip, r1, lsr #24
   17e44:	ea4f 2b01 	mov.w	fp, r1, lsl #8
   17e48:	ea8b 0305 	eor.w	r3, fp, r5
   17e4c:	ea8c 0406 	eor.w	r4, ip, r6
   17e50:	e9cd 340a 	strd	r3, r4, [sp, #40]	; 0x28
    for (uint64_t count = 0; count < length; ++count)
   17e54:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   17e58:	1c59      	adds	r1, r3, #1
   17e5a:	f144 0200 	adc.w	r2, r4, #0
   17e5e:	e9cd 1208 	strd	r1, r2, [sp, #32]
   17e62:	e7b5      	b.n	17dd0 <Sd::GetCrc16(unsigned char*, unsigned short)+0x40>
    }

    return static_cast<uint16_t>(crc ^ final_value);
   17e64:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
   17e68:	f8bd 3018 	ldrh.w	r3, [sp, #24]
   17e6c:	4053      	eors	r3, r2
   17e6e:	b29c      	uxth	r4, r3
   17e70:	463b      	mov	r3, r7
   17e72:	4619      	mov	r1, r3
   17e74:	4803      	ldr	r0, [pc, #12]	; (17e84 <Sd::GetCrc16(unsigned char*, unsigned short)+0xf4>)
   17e76:	f7fd fb8d 	bl	15594 <__cyg_profile_func_exit>
   17e7a:	4623      	mov	r3, r4
  }
   17e7c:	4618      	mov	r0, r3
   17e7e:	b00c      	add	sp, #48	; 0x30
   17e80:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
   17e84:	00017d91 	.word	0x00017d91
   17e88:	0001a950 	.word	0x0001a950

00017e8c <Status Wait<Wait(unsigned long long)::{lambda()#1}>(unsigned long long, Wait(unsigned long long)::{lambda()#1})>:
inline Status Wait(uint64_t timeout, F is_done)
   17e8c:	e92d 4830 	stmdb	sp!, {r4, r5, fp, lr}
   17e90:	b088      	sub	sp, #32
   17e92:	4675      	mov	r5, lr
   17e94:	e9cd 0102 	strd	r0, r1, [sp, #8]
   17e98:	f88d 2004 	strb.w	r2, [sp, #4]
   17e9c:	462b      	mov	r3, r5
   17e9e:	4619      	mov	r1, r3
   17ea0:	4824      	ldr	r0, [pc, #144]	; (17f34 <Status Wait<Wait(unsigned long long)::{lambda()#1}>(unsigned long long, Wait(unsigned long long)::{lambda()#1})+0xa8>)
   17ea2:	f7fd fb63 	bl	1556c <__cyg_profile_func_enter>
  uint64_t timeout_time = 0;
   17ea6:	f04f 0300 	mov.w	r3, #0
   17eaa:	f04f 0400 	mov.w	r4, #0
   17eae:	e9cd 3406 	strd	r3, r4, [sp, #24]
  if (timeout == kMaxWait)
   17eb2:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
   17eb6:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
   17eba:	bf08      	it	eq
   17ebc:	f1b3 3fff 	cmpeq.w	r3, #4294967295	; 0xffffffff
   17ec0:	d106      	bne.n	17ed0 <Status Wait<Wait(unsigned long long)::{lambda()#1}>(unsigned long long, Wait(unsigned long long)::{lambda()#1})+0x44>
    timeout_time = kMaxWait;
   17ec2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   17ec6:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   17eca:	e9cd 3406 	strd	r3, r4, [sp, #24]
   17ece:	e00b      	b.n	17ee8 <Status Wait<Wait(unsigned long long)::{lambda()#1}>(unsigned long long, Wait(unsigned long long)::{lambda()#1})+0x5c>
    timeout_time = Milliseconds() + timeout;
   17ed0:	f7f9 f82a 	bl	10f28 <Milliseconds()>
   17ed4:	460a      	mov	r2, r1
   17ed6:	4601      	mov	r1, r0
   17ed8:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
   17edc:	eb13 0b01 	adds.w	fp, r3, r1
   17ee0:	eb44 0c02 	adc.w	ip, r4, r2
   17ee4:	e9cd bc06 	strd	fp, ip, [sp, #24]
  Status status = Status::kTimedOut;
   17ee8:	2301      	movs	r3, #1
   17eea:	9305      	str	r3, [sp, #20]
  while (Milliseconds() < timeout_time)
   17eec:	f7f9 f81c 	bl	10f28 <Milliseconds()>
   17ef0:	460a      	mov	r2, r1
   17ef2:	4601      	mov	r1, r0
   17ef4:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
   17ef8:	42a2      	cmp	r2, r4
   17efa:	bf08      	it	eq
   17efc:	4299      	cmpeq	r1, r3
   17efe:	bf34      	ite	cc
   17f00:	2301      	movcc	r3, #1
   17f02:	2300      	movcs	r3, #0
   17f04:	b2db      	uxtb	r3, r3
   17f06:	2b00      	cmp	r3, #0
   17f08:	d008      	beq.n	17f1c <Status Wait<Wait(unsigned long long)::{lambda()#1}>(unsigned long long, Wait(unsigned long long)::{lambda()#1})+0x90>
    if (is_done())
   17f0a:	ab01      	add	r3, sp, #4
   17f0c:	4618      	mov	r0, r3
   17f0e:	f7fe fdaf 	bl	16a70 <Wait(unsigned long long)::{lambda()#1}::operator()() const>
   17f12:	4603      	mov	r3, r0
   17f14:	2b00      	cmp	r3, #0
   17f16:	d0e9      	beq.n	17eec <Status Wait<Wait(unsigned long long)::{lambda()#1}>(unsigned long long, Wait(unsigned long long)::{lambda()#1})+0x60>
      status = Status::kSuccess;
   17f18:	2300      	movs	r3, #0
   17f1a:	9305      	str	r3, [sp, #20]
  return status;
   17f1c:	9c05      	ldr	r4, [sp, #20]
   17f1e:	462b      	mov	r3, r5
   17f20:	4619      	mov	r1, r3
   17f22:	4804      	ldr	r0, [pc, #16]	; (17f34 <Status Wait<Wait(unsigned long long)::{lambda()#1}>(unsigned long long, Wait(unsigned long long)::{lambda()#1})+0xa8>)
   17f24:	f7fd fb36 	bl	15594 <__cyg_profile_func_exit>
   17f28:	4623      	mov	r3, r4
}
   17f2a:	4618      	mov	r0, r3
   17f2c:	b008      	add	sp, #32
   17f2e:	e8bd 8830 	ldmia.w	sp!, {r4, r5, fp, pc}
   17f32:	bf00      	nop
   17f34:	00017e8d 	.word	0x00017e8d

00017f38 <__static_initialization_and_destruction_0(int, int)>:
extern "C" DRESULT disk_ioctl([[maybe_unused]] BYTE drive_number,
                              [[maybe_unused]] BYTE command,
                              [[maybe_unused]] void * buffer)
{
  return RES_PARERR;
}
   17f38:	b530      	push	{r4, r5, lr}
   17f3a:	b085      	sub	sp, #20
   17f3c:	4674      	mov	r4, lr
   17f3e:	9003      	str	r0, [sp, #12]
   17f40:	9102      	str	r1, [sp, #8]
   17f42:	4623      	mov	r3, r4
   17f44:	4619      	mov	r1, r3
   17f46:	480e      	ldr	r0, [pc, #56]	; (17f80 <__static_initialization_and_destruction_0(int, int)+0x48>)
   17f48:	f7fd fb10 	bl	1556c <__cyg_profile_func_enter>
   17f4c:	9b03      	ldr	r3, [sp, #12]
   17f4e:	2b01      	cmp	r3, #1
   17f50:	d10e      	bne.n	17f70 <__static_initialization_and_destruction_0(int, int)+0x38>
   17f52:	9b02      	ldr	r3, [sp, #8]
   17f54:	f64f 72ff 	movw	r2, #65535	; 0xffff
   17f58:	4293      	cmp	r3, r2
   17f5a:	d109      	bne.n	17f70 <__static_initialization_and_destruction_0(int, int)+0x38>
Sd sd_card(Sd::DebugSdCard_t{});
   17f5c:	2306      	movs	r3, #6
   17f5e:	9301      	str	r3, [sp, #4]
   17f60:	2300      	movs	r3, #0
   17f62:	9300      	str	r3, [sp, #0]
   17f64:	2308      	movs	r3, #8
   17f66:	2201      	movs	r2, #1
   17f68:	4629      	mov	r1, r5
   17f6a:	4806      	ldr	r0, [pc, #24]	; (17f84 <__static_initialization_and_destruction_0(int, int)+0x4c>)
   17f6c:	f7fe fe40 	bl	16bf0 <Sd::Sd(Sd::DebugSdCard_t, unsigned char, unsigned char, unsigned char, unsigned char)>
   17f70:	4623      	mov	r3, r4
   17f72:	4619      	mov	r1, r3
   17f74:	4802      	ldr	r0, [pc, #8]	; (17f80 <__static_initialization_and_destruction_0(int, int)+0x48>)
   17f76:	f7fd fb0d 	bl	15594 <__cyg_profile_func_exit>
}
   17f7a:	bf00      	nop
   17f7c:	b005      	add	sp, #20
   17f7e:	bd30      	pop	{r4, r5, pc}
   17f80:	00017f39 	.word	0x00017f39
   17f84:	10001048 	.word	0x10001048

00017f88 <_GLOBAL__sub_I_disk_status>:
   17f88:	b510      	push	{r4, lr}
   17f8a:	4674      	mov	r4, lr
   17f8c:	4623      	mov	r3, r4
   17f8e:	4619      	mov	r1, r3
   17f90:	4806      	ldr	r0, [pc, #24]	; (17fac <_GLOBAL__sub_I_disk_status+0x24>)
   17f92:	f7fd faeb 	bl	1556c <__cyg_profile_func_enter>
   17f96:	f64f 71ff 	movw	r1, #65535	; 0xffff
   17f9a:	2001      	movs	r0, #1
   17f9c:	f7ff ffcc 	bl	17f38 <__static_initialization_and_destruction_0(int, int)>
   17fa0:	4623      	mov	r3, r4
   17fa2:	4619      	mov	r1, r3
   17fa4:	4801      	ldr	r0, [pc, #4]	; (17fac <_GLOBAL__sub_I_disk_status+0x24>)
   17fa6:	f7fd faf5 	bl	15594 <__cyg_profile_func_exit>
   17faa:	bd10      	pop	{r4, pc}
   17fac:	00017f89 	.word	0x00017f89

00017fb0 <__cxa_pure_virtual>:
   17fb0:	b508      	push	{r3, lr}
   17fb2:	f000 f80d 	bl	17fd0 <std::terminate()>

00017fb6 <__cxxabiv1::__terminate(void (*)())>:
   17fb6:	b508      	push	{r3, lr}
   17fb8:	4780      	blx	r0
   17fba:	f000 fa0f 	bl	183dc <abort>
   17fbe:	Address 0x0000000000017fbe is out of bounds.


00017fc0 <std::get_terminate()>:
   17fc0:	4b02      	ldr	r3, [pc, #8]	; (17fcc <std::get_terminate()+0xc>)
   17fc2:	6818      	ldr	r0, [r3, #0]
   17fc4:	f3bf 8f5b 	dmb	ish
   17fc8:	4770      	bx	lr
   17fca:	bf00      	nop
   17fcc:	100004f8 	.word	0x100004f8

00017fd0 <std::terminate()>:
   17fd0:	b508      	push	{r3, lr}
   17fd2:	f7ff fff5 	bl	17fc0 <std::get_terminate()>
   17fd6:	f7ff ffee 	bl	17fb6 <__cxxabiv1::__terminate(void (*)())>
   17fda:	Address 0x0000000000017fda is out of bounds.


00017fdc <roundf>:
   17fdc:	b082      	sub	sp, #8
   17fde:	ed8d 0a01 	vstr	s0, [sp, #4]
   17fe2:	9901      	ldr	r1, [sp, #4]
   17fe4:	f3c1 53c7 	ubfx	r3, r1, #23, #8
   17fe8:	f1a3 027f 	sub.w	r2, r3, #127	; 0x7f
   17fec:	2a16      	cmp	r2, #22
   17fee:	dc0c      	bgt.n	1800a <roundf+0x2e>
   17ff0:	2a00      	cmp	r2, #0
   17ff2:	db10      	blt.n	18016 <roundf+0x3a>
   17ff4:	4810      	ldr	r0, [pc, #64]	; (18038 <roundf+0x5c>)
   17ff6:	4110      	asrs	r0, r2
   17ff8:	4201      	tst	r1, r0
   17ffa:	d008      	beq.n	1800e <roundf+0x32>
   17ffc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   18000:	4113      	asrs	r3, r2
   18002:	440b      	add	r3, r1
   18004:	ea23 0300 	bic.w	r3, r3, r0
   18008:	e00b      	b.n	18022 <roundf+0x46>
   1800a:	2a80      	cmp	r2, #128	; 0x80
   1800c:	d00d      	beq.n	1802a <roundf+0x4e>
   1800e:	ed9d 0a01 	vldr	s0, [sp, #4]
   18012:	b002      	add	sp, #8
   18014:	4770      	bx	lr
   18016:	3201      	adds	r2, #1
   18018:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
   1801c:	d101      	bne.n	18022 <roundf+0x46>
   1801e:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
   18022:	ee00 3a10 	vmov	s0, r3
   18026:	b002      	add	sp, #8
   18028:	4770      	bx	lr
   1802a:	eddd 7a01 	vldr	s15, [sp, #4]
   1802e:	ee37 0aa7 	vadd.f32	s0, s15, s15
   18032:	b002      	add	sp, #8
   18034:	4770      	bx	lr
   18036:	bf00      	nop
   18038:	007fffff 	.word	0x007fffff

0001803c <__aeabi_d2f>:
   1803c:	ea4f 0241 	mov.w	r2, r1, lsl #1
   18040:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   18044:	bf24      	itt	cs
   18046:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   1804a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   1804e:	d90d      	bls.n	1806c <__aeabi_d2f+0x30>
   18050:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   18054:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   18058:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   1805c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   18060:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   18064:	bf08      	it	eq
   18066:	f020 0001 	biceq.w	r0, r0, #1
   1806a:	4770      	bx	lr
   1806c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   18070:	d121      	bne.n	180b6 <__aeabi_d2f+0x7a>
   18072:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   18076:	bfbc      	itt	lt
   18078:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   1807c:	4770      	bxlt	lr
   1807e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   18082:	ea4f 5252 	mov.w	r2, r2, lsr #21
   18086:	f1c2 0218 	rsb	r2, r2, #24
   1808a:	f1c2 0c20 	rsb	ip, r2, #32
   1808e:	fa10 f30c 	lsls.w	r3, r0, ip
   18092:	fa20 f002 	lsr.w	r0, r0, r2
   18096:	bf18      	it	ne
   18098:	f040 0001 	orrne.w	r0, r0, #1
   1809c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   180a0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   180a4:	fa03 fc0c 	lsl.w	ip, r3, ip
   180a8:	ea40 000c 	orr.w	r0, r0, ip
   180ac:	fa23 f302 	lsr.w	r3, r3, r2
   180b0:	ea4f 0343 	mov.w	r3, r3, lsl #1
   180b4:	e7cc      	b.n	18050 <__aeabi_d2f+0x14>
   180b6:	ea7f 5362 	mvns.w	r3, r2, asr #21
   180ba:	d107      	bne.n	180cc <__aeabi_d2f+0x90>
   180bc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   180c0:	bf1e      	ittt	ne
   180c2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   180c6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   180ca:	4770      	bxne	lr
   180cc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   180d0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   180d4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   180d8:	4770      	bx	lr
   180da:	bf00      	nop

000180dc <__aeabi_uldivmod>:
   180dc:	b953      	cbnz	r3, 180f4 <__aeabi_uldivmod+0x18>
   180de:	b94a      	cbnz	r2, 180f4 <__aeabi_uldivmod+0x18>
   180e0:	2900      	cmp	r1, #0
   180e2:	bf08      	it	eq
   180e4:	2800      	cmpeq	r0, #0
   180e6:	bf1c      	itt	ne
   180e8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
   180ec:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   180f0:	f000 b972 	b.w	183d8 <__aeabi_idiv0>
   180f4:	f1ad 0c08 	sub.w	ip, sp, #8
   180f8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   180fc:	f000 f806 	bl	1810c <__udivmoddi4>
   18100:	f8dd e004 	ldr.w	lr, [sp, #4]
   18104:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   18108:	b004      	add	sp, #16
   1810a:	4770      	bx	lr

0001810c <__udivmoddi4>:
   1810c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   18110:	9e08      	ldr	r6, [sp, #32]
   18112:	4604      	mov	r4, r0
   18114:	4688      	mov	r8, r1
   18116:	2b00      	cmp	r3, #0
   18118:	d14b      	bne.n	181b2 <__udivmoddi4+0xa6>
   1811a:	428a      	cmp	r2, r1
   1811c:	4615      	mov	r5, r2
   1811e:	d967      	bls.n	181f0 <__udivmoddi4+0xe4>
   18120:	fab2 f282 	clz	r2, r2
   18124:	b14a      	cbz	r2, 1813a <__udivmoddi4+0x2e>
   18126:	f1c2 0720 	rsb	r7, r2, #32
   1812a:	fa01 f302 	lsl.w	r3, r1, r2
   1812e:	fa20 f707 	lsr.w	r7, r0, r7
   18132:	4095      	lsls	r5, r2
   18134:	ea47 0803 	orr.w	r8, r7, r3
   18138:	4094      	lsls	r4, r2
   1813a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
   1813e:	0c23      	lsrs	r3, r4, #16
   18140:	fbb8 f7fe 	udiv	r7, r8, lr
   18144:	fa1f fc85 	uxth.w	ip, r5
   18148:	fb0e 8817 	mls	r8, lr, r7, r8
   1814c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
   18150:	fb07 f10c 	mul.w	r1, r7, ip
   18154:	4299      	cmp	r1, r3
   18156:	d909      	bls.n	1816c <__udivmoddi4+0x60>
   18158:	18eb      	adds	r3, r5, r3
   1815a:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
   1815e:	f080 811b 	bcs.w	18398 <__udivmoddi4+0x28c>
   18162:	4299      	cmp	r1, r3
   18164:	f240 8118 	bls.w	18398 <__udivmoddi4+0x28c>
   18168:	3f02      	subs	r7, #2
   1816a:	442b      	add	r3, r5
   1816c:	1a5b      	subs	r3, r3, r1
   1816e:	b2a4      	uxth	r4, r4
   18170:	fbb3 f0fe 	udiv	r0, r3, lr
   18174:	fb0e 3310 	mls	r3, lr, r0, r3
   18178:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
   1817c:	fb00 fc0c 	mul.w	ip, r0, ip
   18180:	45a4      	cmp	ip, r4
   18182:	d909      	bls.n	18198 <__udivmoddi4+0x8c>
   18184:	192c      	adds	r4, r5, r4
   18186:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   1818a:	f080 8107 	bcs.w	1839c <__udivmoddi4+0x290>
   1818e:	45a4      	cmp	ip, r4
   18190:	f240 8104 	bls.w	1839c <__udivmoddi4+0x290>
   18194:	3802      	subs	r0, #2
   18196:	442c      	add	r4, r5
   18198:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
   1819c:	eba4 040c 	sub.w	r4, r4, ip
   181a0:	2700      	movs	r7, #0
   181a2:	b11e      	cbz	r6, 181ac <__udivmoddi4+0xa0>
   181a4:	40d4      	lsrs	r4, r2
   181a6:	2300      	movs	r3, #0
   181a8:	e9c6 4300 	strd	r4, r3, [r6]
   181ac:	4639      	mov	r1, r7
   181ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   181b2:	428b      	cmp	r3, r1
   181b4:	d909      	bls.n	181ca <__udivmoddi4+0xbe>
   181b6:	2e00      	cmp	r6, #0
   181b8:	f000 80eb 	beq.w	18392 <__udivmoddi4+0x286>
   181bc:	2700      	movs	r7, #0
   181be:	e9c6 0100 	strd	r0, r1, [r6]
   181c2:	4638      	mov	r0, r7
   181c4:	4639      	mov	r1, r7
   181c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   181ca:	fab3 f783 	clz	r7, r3
   181ce:	2f00      	cmp	r7, #0
   181d0:	d147      	bne.n	18262 <__udivmoddi4+0x156>
   181d2:	428b      	cmp	r3, r1
   181d4:	d302      	bcc.n	181dc <__udivmoddi4+0xd0>
   181d6:	4282      	cmp	r2, r0
   181d8:	f200 80fa 	bhi.w	183d0 <__udivmoddi4+0x2c4>
   181dc:	1a84      	subs	r4, r0, r2
   181de:	eb61 0303 	sbc.w	r3, r1, r3
   181e2:	2001      	movs	r0, #1
   181e4:	4698      	mov	r8, r3
   181e6:	2e00      	cmp	r6, #0
   181e8:	d0e0      	beq.n	181ac <__udivmoddi4+0xa0>
   181ea:	e9c6 4800 	strd	r4, r8, [r6]
   181ee:	e7dd      	b.n	181ac <__udivmoddi4+0xa0>
   181f0:	b902      	cbnz	r2, 181f4 <__udivmoddi4+0xe8>
   181f2:	deff      	udf	#255	; 0xff
   181f4:	fab2 f282 	clz	r2, r2
   181f8:	2a00      	cmp	r2, #0
   181fa:	f040 808f 	bne.w	1831c <__udivmoddi4+0x210>
   181fe:	1b49      	subs	r1, r1, r5
   18200:	ea4f 4e15 	mov.w	lr, r5, lsr #16
   18204:	fa1f f885 	uxth.w	r8, r5
   18208:	2701      	movs	r7, #1
   1820a:	fbb1 fcfe 	udiv	ip, r1, lr
   1820e:	0c23      	lsrs	r3, r4, #16
   18210:	fb0e 111c 	mls	r1, lr, ip, r1
   18214:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   18218:	fb08 f10c 	mul.w	r1, r8, ip
   1821c:	4299      	cmp	r1, r3
   1821e:	d907      	bls.n	18230 <__udivmoddi4+0x124>
   18220:	18eb      	adds	r3, r5, r3
   18222:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
   18226:	d202      	bcs.n	1822e <__udivmoddi4+0x122>
   18228:	4299      	cmp	r1, r3
   1822a:	f200 80cd 	bhi.w	183c8 <__udivmoddi4+0x2bc>
   1822e:	4684      	mov	ip, r0
   18230:	1a59      	subs	r1, r3, r1
   18232:	b2a3      	uxth	r3, r4
   18234:	fbb1 f0fe 	udiv	r0, r1, lr
   18238:	fb0e 1410 	mls	r4, lr, r0, r1
   1823c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
   18240:	fb08 f800 	mul.w	r8, r8, r0
   18244:	45a0      	cmp	r8, r4
   18246:	d907      	bls.n	18258 <__udivmoddi4+0x14c>
   18248:	192c      	adds	r4, r5, r4
   1824a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   1824e:	d202      	bcs.n	18256 <__udivmoddi4+0x14a>
   18250:	45a0      	cmp	r8, r4
   18252:	f200 80b6 	bhi.w	183c2 <__udivmoddi4+0x2b6>
   18256:	4618      	mov	r0, r3
   18258:	eba4 0408 	sub.w	r4, r4, r8
   1825c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
   18260:	e79f      	b.n	181a2 <__udivmoddi4+0x96>
   18262:	f1c7 0c20 	rsb	ip, r7, #32
   18266:	40bb      	lsls	r3, r7
   18268:	fa22 fe0c 	lsr.w	lr, r2, ip
   1826c:	ea4e 0e03 	orr.w	lr, lr, r3
   18270:	fa01 f407 	lsl.w	r4, r1, r7
   18274:	fa20 f50c 	lsr.w	r5, r0, ip
   18278:	fa21 f30c 	lsr.w	r3, r1, ip
   1827c:	ea4f 481e 	mov.w	r8, lr, lsr #16
   18280:	4325      	orrs	r5, r4
   18282:	fbb3 f9f8 	udiv	r9, r3, r8
   18286:	0c2c      	lsrs	r4, r5, #16
   18288:	fb08 3319 	mls	r3, r8, r9, r3
   1828c:	fa1f fa8e 	uxth.w	sl, lr
   18290:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
   18294:	fb09 f40a 	mul.w	r4, r9, sl
   18298:	429c      	cmp	r4, r3
   1829a:	fa02 f207 	lsl.w	r2, r2, r7
   1829e:	fa00 f107 	lsl.w	r1, r0, r7
   182a2:	d90b      	bls.n	182bc <__udivmoddi4+0x1b0>
   182a4:	eb1e 0303 	adds.w	r3, lr, r3
   182a8:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
   182ac:	f080 8087 	bcs.w	183be <__udivmoddi4+0x2b2>
   182b0:	429c      	cmp	r4, r3
   182b2:	f240 8084 	bls.w	183be <__udivmoddi4+0x2b2>
   182b6:	f1a9 0902 	sub.w	r9, r9, #2
   182ba:	4473      	add	r3, lr
   182bc:	1b1b      	subs	r3, r3, r4
   182be:	b2ad      	uxth	r5, r5
   182c0:	fbb3 f0f8 	udiv	r0, r3, r8
   182c4:	fb08 3310 	mls	r3, r8, r0, r3
   182c8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
   182cc:	fb00 fa0a 	mul.w	sl, r0, sl
   182d0:	45a2      	cmp	sl, r4
   182d2:	d908      	bls.n	182e6 <__udivmoddi4+0x1da>
   182d4:	eb1e 0404 	adds.w	r4, lr, r4
   182d8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   182dc:	d26b      	bcs.n	183b6 <__udivmoddi4+0x2aa>
   182de:	45a2      	cmp	sl, r4
   182e0:	d969      	bls.n	183b6 <__udivmoddi4+0x2aa>
   182e2:	3802      	subs	r0, #2
   182e4:	4474      	add	r4, lr
   182e6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   182ea:	fba0 8902 	umull	r8, r9, r0, r2
   182ee:	eba4 040a 	sub.w	r4, r4, sl
   182f2:	454c      	cmp	r4, r9
   182f4:	46c2      	mov	sl, r8
   182f6:	464b      	mov	r3, r9
   182f8:	d354      	bcc.n	183a4 <__udivmoddi4+0x298>
   182fa:	d051      	beq.n	183a0 <__udivmoddi4+0x294>
   182fc:	2e00      	cmp	r6, #0
   182fe:	d069      	beq.n	183d4 <__udivmoddi4+0x2c8>
   18300:	ebb1 050a 	subs.w	r5, r1, sl
   18304:	eb64 0403 	sbc.w	r4, r4, r3
   18308:	fa04 fc0c 	lsl.w	ip, r4, ip
   1830c:	40fd      	lsrs	r5, r7
   1830e:	40fc      	lsrs	r4, r7
   18310:	ea4c 0505 	orr.w	r5, ip, r5
   18314:	e9c6 5400 	strd	r5, r4, [r6]
   18318:	2700      	movs	r7, #0
   1831a:	e747      	b.n	181ac <__udivmoddi4+0xa0>
   1831c:	f1c2 0320 	rsb	r3, r2, #32
   18320:	fa20 f703 	lsr.w	r7, r0, r3
   18324:	4095      	lsls	r5, r2
   18326:	fa01 f002 	lsl.w	r0, r1, r2
   1832a:	fa21 f303 	lsr.w	r3, r1, r3
   1832e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
   18332:	4338      	orrs	r0, r7
   18334:	0c01      	lsrs	r1, r0, #16
   18336:	fbb3 f7fe 	udiv	r7, r3, lr
   1833a:	fa1f f885 	uxth.w	r8, r5
   1833e:	fb0e 3317 	mls	r3, lr, r7, r3
   18342:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   18346:	fb07 f308 	mul.w	r3, r7, r8
   1834a:	428b      	cmp	r3, r1
   1834c:	fa04 f402 	lsl.w	r4, r4, r2
   18350:	d907      	bls.n	18362 <__udivmoddi4+0x256>
   18352:	1869      	adds	r1, r5, r1
   18354:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
   18358:	d22f      	bcs.n	183ba <__udivmoddi4+0x2ae>
   1835a:	428b      	cmp	r3, r1
   1835c:	d92d      	bls.n	183ba <__udivmoddi4+0x2ae>
   1835e:	3f02      	subs	r7, #2
   18360:	4429      	add	r1, r5
   18362:	1acb      	subs	r3, r1, r3
   18364:	b281      	uxth	r1, r0
   18366:	fbb3 f0fe 	udiv	r0, r3, lr
   1836a:	fb0e 3310 	mls	r3, lr, r0, r3
   1836e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   18372:	fb00 f308 	mul.w	r3, r0, r8
   18376:	428b      	cmp	r3, r1
   18378:	d907      	bls.n	1838a <__udivmoddi4+0x27e>
   1837a:	1869      	adds	r1, r5, r1
   1837c:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
   18380:	d217      	bcs.n	183b2 <__udivmoddi4+0x2a6>
   18382:	428b      	cmp	r3, r1
   18384:	d915      	bls.n	183b2 <__udivmoddi4+0x2a6>
   18386:	3802      	subs	r0, #2
   18388:	4429      	add	r1, r5
   1838a:	1ac9      	subs	r1, r1, r3
   1838c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
   18390:	e73b      	b.n	1820a <__udivmoddi4+0xfe>
   18392:	4637      	mov	r7, r6
   18394:	4630      	mov	r0, r6
   18396:	e709      	b.n	181ac <__udivmoddi4+0xa0>
   18398:	4607      	mov	r7, r0
   1839a:	e6e7      	b.n	1816c <__udivmoddi4+0x60>
   1839c:	4618      	mov	r0, r3
   1839e:	e6fb      	b.n	18198 <__udivmoddi4+0x8c>
   183a0:	4541      	cmp	r1, r8
   183a2:	d2ab      	bcs.n	182fc <__udivmoddi4+0x1f0>
   183a4:	ebb8 0a02 	subs.w	sl, r8, r2
   183a8:	eb69 020e 	sbc.w	r2, r9, lr
   183ac:	3801      	subs	r0, #1
   183ae:	4613      	mov	r3, r2
   183b0:	e7a4      	b.n	182fc <__udivmoddi4+0x1f0>
   183b2:	4660      	mov	r0, ip
   183b4:	e7e9      	b.n	1838a <__udivmoddi4+0x27e>
   183b6:	4618      	mov	r0, r3
   183b8:	e795      	b.n	182e6 <__udivmoddi4+0x1da>
   183ba:	4667      	mov	r7, ip
   183bc:	e7d1      	b.n	18362 <__udivmoddi4+0x256>
   183be:	4681      	mov	r9, r0
   183c0:	e77c      	b.n	182bc <__udivmoddi4+0x1b0>
   183c2:	3802      	subs	r0, #2
   183c4:	442c      	add	r4, r5
   183c6:	e747      	b.n	18258 <__udivmoddi4+0x14c>
   183c8:	f1ac 0c02 	sub.w	ip, ip, #2
   183cc:	442b      	add	r3, r5
   183ce:	e72f      	b.n	18230 <__udivmoddi4+0x124>
   183d0:	4638      	mov	r0, r7
   183d2:	e708      	b.n	181e6 <__udivmoddi4+0xda>
   183d4:	4637      	mov	r7, r6
   183d6:	e6e9      	b.n	181ac <__udivmoddi4+0xa0>

000183d8 <__aeabi_idiv0>:
   183d8:	4770      	bx	lr
   183da:	bf00      	nop

000183dc <abort>:
   183dc:	b508      	push	{r3, lr}
   183de:	2006      	movs	r0, #6
   183e0:	f000 f858 	bl	18494 <raise>
   183e4:	2001      	movs	r0, #1
   183e6:	f7fd f821 	bl	1542c <_exit>
   183ea:	Address 0x00000000000183ea is out of bounds.


000183ec <__libc_init_array>:
   183ec:	b570      	push	{r4, r5, r6, lr}
   183ee:	4e0d      	ldr	r6, [pc, #52]	; (18424 <__libc_init_array+0x38>)
   183f0:	4c0d      	ldr	r4, [pc, #52]	; (18428 <__libc_init_array+0x3c>)
   183f2:	1ba4      	subs	r4, r4, r6
   183f4:	10a4      	asrs	r4, r4, #2
   183f6:	2500      	movs	r5, #0
   183f8:	42a5      	cmp	r5, r4
   183fa:	d109      	bne.n	18410 <__libc_init_array+0x24>
   183fc:	4e0b      	ldr	r6, [pc, #44]	; (1842c <__libc_init_array+0x40>)
   183fe:	4c0c      	ldr	r4, [pc, #48]	; (18430 <__libc_init_array+0x44>)
   18400:	f7f7 ff7e 	bl	10300 <_init>
   18404:	1ba4      	subs	r4, r4, r6
   18406:	10a4      	asrs	r4, r4, #2
   18408:	2500      	movs	r5, #0
   1840a:	42a5      	cmp	r5, r4
   1840c:	d105      	bne.n	1841a <__libc_init_array+0x2e>
   1840e:	bd70      	pop	{r4, r5, r6, pc}
   18410:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   18414:	4798      	blx	r3
   18416:	3501      	adds	r5, #1
   18418:	e7ee      	b.n	183f8 <__libc_init_array+0xc>
   1841a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   1841e:	4798      	blx	r3
   18420:	3501      	adds	r5, #1
   18422:	e7f2      	b.n	1840a <__libc_init_array+0x1e>
   18424:	0001030c 	.word	0x0001030c
   18428:	0001030c 	.word	0x0001030c
   1842c:	0001030c 	.word	0x0001030c
   18430:	0001031c 	.word	0x0001031c

00018434 <memset>:
   18434:	4402      	add	r2, r0
   18436:	4603      	mov	r3, r0
   18438:	4293      	cmp	r3, r2
   1843a:	d100      	bne.n	1843e <memset+0xa>
   1843c:	4770      	bx	lr
   1843e:	f803 1b01 	strb.w	r1, [r3], #1
   18442:	e7f9      	b.n	18438 <memset+0x4>

00018444 <_raise_r>:
   18444:	291f      	cmp	r1, #31
   18446:	b538      	push	{r3, r4, r5, lr}
   18448:	4604      	mov	r4, r0
   1844a:	460d      	mov	r5, r1
   1844c:	d904      	bls.n	18458 <_raise_r+0x14>
   1844e:	2316      	movs	r3, #22
   18450:	6003      	str	r3, [r0, #0]
   18452:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   18456:	bd38      	pop	{r3, r4, r5, pc}
   18458:	6c42      	ldr	r2, [r0, #68]	; 0x44
   1845a:	b112      	cbz	r2, 18462 <_raise_r+0x1e>
   1845c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
   18460:	b94b      	cbnz	r3, 18476 <_raise_r+0x32>
   18462:	4620      	mov	r0, r4
   18464:	f000 f830 	bl	184c8 <_getpid_r>
   18468:	462a      	mov	r2, r5
   1846a:	4601      	mov	r1, r0
   1846c:	4620      	mov	r0, r4
   1846e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   18472:	f000 b817 	b.w	184a4 <_kill_r>
   18476:	2b01      	cmp	r3, #1
   18478:	d00a      	beq.n	18490 <_raise_r+0x4c>
   1847a:	1c59      	adds	r1, r3, #1
   1847c:	d103      	bne.n	18486 <_raise_r+0x42>
   1847e:	2316      	movs	r3, #22
   18480:	6003      	str	r3, [r0, #0]
   18482:	2001      	movs	r0, #1
   18484:	e7e7      	b.n	18456 <_raise_r+0x12>
   18486:	2400      	movs	r4, #0
   18488:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
   1848c:	4628      	mov	r0, r5
   1848e:	4798      	blx	r3
   18490:	2000      	movs	r0, #0
   18492:	e7e0      	b.n	18456 <_raise_r+0x12>

00018494 <raise>:
   18494:	4b02      	ldr	r3, [pc, #8]	; (184a0 <raise+0xc>)
   18496:	4601      	mov	r1, r0
   18498:	6818      	ldr	r0, [r3, #0]
   1849a:	f7ff bfd3 	b.w	18444 <_raise_r>
   1849e:	bf00      	nop
   184a0:	100004fc 	.word	0x100004fc

000184a4 <_kill_r>:
   184a4:	b538      	push	{r3, r4, r5, lr}
   184a6:	4c07      	ldr	r4, [pc, #28]	; (184c4 <_kill_r+0x20>)
   184a8:	2300      	movs	r3, #0
   184aa:	4605      	mov	r5, r0
   184ac:	4608      	mov	r0, r1
   184ae:	4611      	mov	r1, r2
   184b0:	6023      	str	r3, [r4, #0]
   184b2:	f7fc ffd9 	bl	15468 <_kill>
   184b6:	1c43      	adds	r3, r0, #1
   184b8:	d102      	bne.n	184c0 <_kill_r+0x1c>
   184ba:	6823      	ldr	r3, [r4, #0]
   184bc:	b103      	cbz	r3, 184c0 <_kill_r+0x1c>
   184be:	602b      	str	r3, [r5, #0]
   184c0:	bd38      	pop	{r3, r4, r5, pc}
   184c2:	bf00      	nop
   184c4:	100010b0 	.word	0x100010b0

000184c8 <_getpid_r>:
   184c8:	f7fc bfbc 	b.w	15444 <_getpid>
   184cc:	315f3050 	.word	0x315f3050
   184d0:	20736920 	.word	0x20736920
   184d4:	20656874 	.word	0x20656874
   184d8:	6d204543 	.word	0x6d204543
   184dc:	6f727269 	.word	0x6f727269
   184e0:	69702072 	.word	0x69702072
   184e4:	0000006e 	.word	0x0000006e
   184e8:	325f3050 	.word	0x325f3050
   184ec:	73692035 	.word	0x73692035
   184f0:	65687420 	.word	0x65687420
   184f4:	20454320 	.word	0x20454320
   184f8:	7272696d 	.word	0x7272696d
   184fc:	7020726f 	.word	0x7020726f
   18500:	00006e69 	.word	0x00006e69
   18504:	325f3450 	.word	0x325f3450
   18508:	73692038 	.word	0x73692038
   1850c:	65687420 	.word	0x65687420
   18510:	20454320 	.word	0x20454320
   18514:	7272696d 	.word	0x7272696d
   18518:	7020726f 	.word	0x7020726f
   1851c:	00006e69 	.word	0x00006e69
   18520:	74617453 	.word	0x74617453
   18524:	203a7375 	.word	0x203a7375
   18528:	25207825 	.word	0x25207825
   1852c:	00000a78 	.word	0x00000a78
   18530:	75746552 	.word	0x75746552
   18534:	64656e72 	.word	0x64656e72
   18538:	74616420 	.word	0x74616420
   1853c:	25203a61 	.word	0x25203a61
   18540:	78252078 	.word	0x78252078
   18544:	20782520 	.word	0x20782520
   18548:	000a7825 	.word	0x000a7825
   1854c:	64616552 	.word	0x64616552
   18550:	75422f79 	.word	0x75422f79
   18554:	42207973 	.word	0x42207973
   18558:	69207469 	.word	0x69207469
   1855c:	75622073 	.word	0x75622073
   18560:	203a7973 	.word	0x203a7973
   18564:	000a7825 	.word	0x000a7825
   18568:	64616552 	.word	0x64616552
   1856c:	7375422f 	.word	0x7375422f
   18570:	69422079 	.word	0x69422079
   18574:	73692074 	.word	0x73692074
   18578:	61657220 	.word	0x61657220
   1857c:	203a7964 	.word	0x203a7964
   18580:	000a7825 	.word	0x000a7825
   18584:	74697257 	.word	0x74697257
   18588:	6e452065 	.word	0x6e452065
   1858c:	656c6261 	.word	0x656c6261
   18590:	74696220 	.word	0x74696220
   18594:	20736920 	.word	0x20736920
   18598:	62616e45 	.word	0x62616e45
   1859c:	203a656c 	.word	0x203a656c
   185a0:	000a7825 	.word	0x000a7825
   185a4:	74697257 	.word	0x74697257
   185a8:	6e452065 	.word	0x6e452065
   185ac:	656c6261 	.word	0x656c6261
   185b0:	74696220 	.word	0x74696220
   185b4:	20736920 	.word	0x20736920
   185b8:	20746f6e 	.word	0x20746f6e
   185bc:	62616e65 	.word	0x62616e65
   185c0:	3a64656c 	.word	0x3a64656c
   185c4:	0a782520 	.word	0x0a782520
   185c8:	00000000 	.word	0x00000000
   185cc:	6f6d654d 	.word	0x6f6d654d
   185d0:	69207972 	.word	0x69207972
   185d4:	72702073 	.word	0x72702073
   185d8:	6365746f 	.word	0x6365746f
   185dc:	3a646574 	.word	0x3a646574
   185e0:	0a782520 	.word	0x0a782520
   185e4:	00000000 	.word	0x00000000
   185e8:	20746f4e 	.word	0x20746f4e
   185ec:	746f7270 	.word	0x746f7270
   185f0:	65746365 	.word	0x65746365
   185f4:	25203a64 	.word	0x25203a64
   185f8:	00000a78 	.word	0x00000a78
   185fc:	74697257 	.word	0x74697257
   18600:	72502065 	.word	0x72502065
   18604:	6365746f 	.word	0x6365746f
   18608:	73692074 	.word	0x73692074
   1860c:	746f6e20 	.word	0x746f6e20
   18610:	73736120 	.word	0x73736120
   18614:	65747265 	.word	0x65747265
   18618:	25203a64 	.word	0x25203a64
   1861c:	00000a78 	.word	0x00000a78
   18620:	74697257 	.word	0x74697257
   18624:	72502065 	.word	0x72502065
   18628:	6365746f 	.word	0x6365746f
   1862c:	73612074 	.word	0x73612074
   18630:	74726573 	.word	0x74726573
   18634:	203a6465 	.word	0x203a6465
   18638:	000a7825 	.word	0x000a7825
   1863c:	73617245 	.word	0x73617245
   18640:	72452065 	.word	0x72452065
   18644:	20726f72 	.word	0x20726f72
   18648:	74636564 	.word	0x74636564
   1864c:	65746365 	.word	0x65746365
   18650:	25203a64 	.word	0x25203a64
   18654:	00000a78 	.word	0x00000a78
   18658:	7265704f 	.word	0x7265704f
   1865c:	6f697461 	.word	0x6f697461
   18660:	7553206e 	.word	0x7553206e
   18664:	73656363 	.word	0x73656363
   18668:	6c756673 	.word	0x6c756673
   1866c:	7825203a 	.word	0x7825203a
   18670:	0000000a 	.word	0x0000000a
   18674:	64616552 	.word	0x64616552
   18678:	75422f79 	.word	0x75422f79
   1867c:	32207973 	.word	0x32207973
   18680:	20736920 	.word	0x20736920
   18684:	79737562 	.word	0x79737562
   18688:	7825203a 	.word	0x7825203a
   1868c:	0000000a 	.word	0x0000000a
   18690:	64616552 	.word	0x64616552
   18694:	75422f79 	.word	0x75422f79
   18698:	32207973 	.word	0x32207973
   1869c:	20736920 	.word	0x20736920
   186a0:	64616572 	.word	0x64616572
   186a4:	25203a79 	.word	0x25203a79
   186a8:	00000a78 	.word	0x00000a78
   186ac:	65736552 	.word	0x65736552
   186b0:	6f632074 	.word	0x6f632074
   186b4:	6e616d6d 	.word	0x6e616d6d
   186b8:	6e652064 	.word	0x6e652064
   186bc:	656c6261 	.word	0x656c6261
   186c0:	25203a64 	.word	0x25203a64
   186c4:	00000a78 	.word	0x00000a78
   186c8:	65736552 	.word	0x65736552
   186cc:	6f632074 	.word	0x6f632074
   186d0:	6e616d6d 	.word	0x6e616d6d
   186d4:	69642064 	.word	0x69642064
   186d8:	6c626173 	.word	0x6c626173
   186dc:	203a6465 	.word	0x203a6465
   186e0:	000a7825 	.word	0x000a7825
   186e4:	63617453 	.word	0x63617453
   186e8:	6544206b 	.word	0x6544206b
   186ec:	20687470 	.word	0x20687470
   186f0:	7a25203d 	.word	0x7a25203d
   186f4:	00000a64 	.word	0x00000a64
   186f8:	25232020 	.word	0x25232020
   186fc:	203a757a 	.word	0x203a757a
   18700:	70257830 	.word	0x70257830
   18704:	0000000a 	.word	0x0000000a
   18708:	6e75520a 	.word	0x6e75520a
   1870c:	6874203a 	.word	0x6874203a
   18710:	6f662065 	.word	0x6f662065
   18714:	776f6c6c 	.word	0x776f6c6c
   18718:	20676e69 	.word	0x20676e69
   1871c:	6d6d6f63 	.word	0x6d6d6f63
   18720:	20646e61 	.word	0x20646e61
   18724:	79206e69 	.word	0x79206e69
   18728:	2072756f 	.word	0x2072756f
   1872c:	6a6f7270 	.word	0x6a6f7270
   18730:	20746365 	.word	0x20746365
   18734:	65726964 	.word	0x65726964
   18738:	726f7463 	.word	0x726f7463
   1873c:	00000079 	.word	0x00000079
   18740:	1b20200a 	.word	0x1b20200a
   18744:	333b315b 	.word	0x333b315b
   18748:	616d6d37 	.word	0x616d6d37
   1874c:	7320656b 	.word	0x7320656b
   18750:	6b636174 	.word	0x6b636174
   18754:	63617274 	.word	0x63617274
   18758:	73252d65 	.word	0x73252d65
   1875c:	41525420 	.word	0x41525420
   18760:	3d534543 	.word	0x3d534543
   18764:	00000022 	.word	0x00000022
   18768:	70257830 	.word	0x70257830
   1876c:	00000000 	.word	0x00000000
   18770:	25783020 	.word	0x25783020
   18774:	00000070 	.word	0x00000070
   18778:	5b1b0a22 	.word	0x5b1b0a22
   1877c:	00006d30 	.word	0x00006d30
   18780:	73696854 	.word	0x73696854
   18784:	6c697720 	.word	0x6c697720
   18788:	6572206c 	.word	0x6572206c
   1878c:	74726f70 	.word	0x74726f70
   18790:	65687420 	.word	0x65687420
   18794:	6c696620 	.word	0x6c696620
   18798:	6e612065 	.word	0x6e612065
   1879c:	696c2064 	.word	0x696c2064
   187a0:	6e20656e 	.word	0x6e20656e
   187a4:	65626d75 	.word	0x65626d75
   187a8:	68742072 	.word	0x68742072
   187ac:	6c207461 	.word	0x6c207461
   187b0:	74206465 	.word	0x74206465
   187b4:	6874206f 	.word	0x6874206f
   187b8:	66207369 	.word	0x66207369
   187bc:	74636e75 	.word	0x74636e75
   187c0:	206e6f69 	.word	0x206e6f69
   187c4:	6e696562 	.word	0x6e696562
   187c8:	61632067 	.word	0x61632067
   187cc:	64656c6c 	.word	0x64656c6c
   187d0:	0000002e 	.word	0x0000002e
   187d4:	6c707061 	.word	0x6c707061
   187d8:	74616369 	.word	0x74616369
   187dc:	006e6f69 	.word	0x006e6f69
   187e0:	33345b1b 	.word	0x33345b1b
   187e4:	4157206d 	.word	0x4157206d
   187e8:	4e494e52 	.word	0x4e494e52
   187ec:	305b1b47 	.word	0x305b1b47
   187f0:	6d34393b 	.word	0x6d34393b
   187f4:	3a73253a 	.word	0x3a73253a
   187f8:	3b305b1b 	.word	0x3b305b1b
   187fc:	256d3239 	.word	0x256d3239
   18800:	5b1b3a73 	.word	0x5b1b3a73
   18804:	33393b30 	.word	0x33393b30
   18808:	3e64256d 	.word	0x3e64256d
   1880c:	305b1b20 	.word	0x305b1b20
   18810:	6d37333b 	.word	0x6d37333b
   18814:	74726f50 	.word	0x74726f50
   18818:	20642520 	.word	0x20642520
   1881c:	6e6e6163 	.word	0x6e6e6163
   18820:	6220746f 	.word	0x6220746f
   18824:	73752065 	.word	0x73752065
   18828:	66206465 	.word	0x66206465
   1882c:	4520726f 	.word	0x4520726f
   18830:	72657478 	.word	0x72657478
   18834:	206c616e 	.word	0x206c616e
   18838:	65746e49 	.word	0x65746e49
   1883c:	70757272 	.word	0x70757272
   18840:	202e7374 	.word	0x202e7374
   18844:	6465654e 	.word	0x6465654e
   18848:	206f7420 	.word	0x206f7420
   1884c:	20657375 	.word	0x20657375
   18850:	4f495047 	.word	0x4f495047
   18854:	206e6f20 	.word	0x206e6f20
   18858:	74726f50 	.word	0x74726f50
   1885c:	6f203020 	.word	0x6f203020
   18860:	2e322072 	.word	0x2e322072
   18864:	6d305b1b 	.word	0x6d305b1b
   18868:	6d305b1b 	.word	0x6d305b1b
   1886c:	0000000a 	.word	0x0000000a
   18870:	33345b1b 	.word	0x33345b1b
   18874:	4157206d 	.word	0x4157206d
   18878:	4e494e52 	.word	0x4e494e52
   1887c:	305b1b47 	.word	0x305b1b47
   18880:	6d34393b 	.word	0x6d34393b
   18884:	3a73253a 	.word	0x3a73253a
   18888:	3b305b1b 	.word	0x3b305b1b
   1888c:	256d3239 	.word	0x256d3239
   18890:	5b1b3a73 	.word	0x5b1b3a73
   18894:	33393b30 	.word	0x33393b30
   18898:	3e64256d 	.word	0x3e64256d
   1889c:	305b1b20 	.word	0x305b1b20
   188a0:	6d37333b 	.word	0x6d37333b
   188a4:	65676445 	.word	0x65676445
   188a8:	20642520 	.word	0x20642520
   188ac:	6e6e6163 	.word	0x6e6e6163
   188b0:	6220746f 	.word	0x6220746f
   188b4:	73752065 	.word	0x73752065
   188b8:	66206465 	.word	0x66206465
   188bc:	4520726f 	.word	0x4520726f
   188c0:	72657478 	.word	0x72657478
   188c4:	206c616e 	.word	0x206c616e
   188c8:	65746e49 	.word	0x65746e49
   188cc:	70757272 	.word	0x70757272
   188d0:	4e2e7374 	.word	0x4e2e7374
   188d4:	20646565 	.word	0x20646565
   188d8:	75206f74 	.word	0x75206f74
   188dc:	61206573 	.word	0x61206573
   188e0:	73697220 	.word	0x73697220
   188e4:	2c676e69 	.word	0x2c676e69
   188e8:	6c616620 	.word	0x6c616620
   188ec:	676e696c 	.word	0x676e696c
   188f0:	726f202c 	.word	0x726f202c
   188f4:	746f6220 	.word	0x746f6220
   188f8:	6f632068 	.word	0x6f632068
   188fc:	6769666e 	.word	0x6769666e
   18900:	74617275 	.word	0x74617275
   18904:	2e6e6f69 	.word	0x2e6e6f69
   18908:	6d305b1b 	.word	0x6d305b1b
   1890c:	0000000a 	.word	0x0000000a
   18910:	31345b1b 	.word	0x31345b1b
   18914:	4952436d 	.word	0x4952436d
   18918:	41434954 	.word	0x41434954
   1891c:	305b1b4c 	.word	0x305b1b4c
   18920:	6d34393b 	.word	0x6d34393b
   18924:	3a73253a 	.word	0x3a73253a
   18928:	3b305b1b 	.word	0x3b305b1b
   1892c:	256d3239 	.word	0x256d3239
   18930:	5b1b3a73 	.word	0x5b1b3a73
   18934:	33393b30 	.word	0x33393b30
   18938:	3e64256d 	.word	0x3e64256d
   1893c:	305b1b20 	.word	0x305b1b20
   18940:	6d37333b 	.word	0x6d37333b
   18944:	65737341 	.word	0x65737341
   18948:	6f697472 	.word	0x6f697472
   1894c:	6146206e 	.word	0x6146206e
   18950:	72756c69 	.word	0x72756c69
   18954:	43202c65 	.word	0x43202c65
   18958:	69646e6f 	.word	0x69646e6f
   1895c:	6e6f6974 	.word	0x6e6f6974
   18960:	73655420 	.word	0x73655420
   18964:	3a646574 	.word	0x3a646574
   18968:	65702820 	.word	0x65702820
   1896c:	68706972 	.word	0x68706972
   18970:	6c617265 	.word	0x6c617265
   18974:	7669645f 	.word	0x7669645f
   18978:	72656469 	.word	0x72656469
   1897c:	203d3c20 	.word	0x203d3c20
   18980:	200a2934 	.word	0x200a2934
   18984:	20202020 	.word	0x20202020
   18988:	20202020 	.word	0x20202020
   1898c:	76694420 	.word	0x76694420
   18990:	72656469 	.word	0x72656469
   18994:	73756d20 	.word	0x73756d20
   18998:	74276e74 	.word	0x74276e74
   1899c:	63786520 	.word	0x63786520
   189a0:	20646565 	.word	0x20646565
   189a4:	5b1b3233 	.word	0x5b1b3233
   189a8:	5b1b6d30 	.word	0x5b1b6d30
   189ac:	000a6d30 	.word	0x000a6d30
   189b0:	6972500a 	.word	0x6972500a
   189b4:	6e69746e 	.word	0x6e69746e
   189b8:	74532067 	.word	0x74532067
   189bc:	206b6361 	.word	0x206b6361
   189c0:	63617254 	.word	0x63617254
   189c4:	000a3a65 	.word	0x000a3a65
   189c8:	31345b1b 	.word	0x31345b1b
   189cc:	4952436d 	.word	0x4952436d
   189d0:	41434954 	.word	0x41434954
   189d4:	305b1b4c 	.word	0x305b1b4c
   189d8:	6d34393b 	.word	0x6d34393b
   189dc:	3a73253a 	.word	0x3a73253a
   189e0:	3b305b1b 	.word	0x3b305b1b
   189e4:	256d3239 	.word	0x256d3239
   189e8:	5b1b3a73 	.word	0x5b1b3a73
   189ec:	33393b30 	.word	0x33393b30
   189f0:	3e64256d 	.word	0x3e64256d
   189f4:	305b1b20 	.word	0x305b1b20
   189f8:	6d37333b 	.word	0x6d37333b
   189fc:	65737341 	.word	0x65737341
   18a00:	6f697472 	.word	0x6f697472
   18a04:	6146206e 	.word	0x6146206e
   18a08:	72756c69 	.word	0x72756c69
   18a0c:	43202c65 	.word	0x43202c65
   18a10:	69646e6f 	.word	0x69646e6f
   18a14:	6e6f6974 	.word	0x6e6f6974
   18a18:	73655420 	.word	0x73655420
   18a1c:	3a646574 	.word	0x3a646574
   18a20:	65642820 	.word	0x65642820
   18a24:	65726973 	.word	0x65726973
   18a28:	70735f64 	.word	0x70735f64
   18a2c:	5f646565 	.word	0x5f646565
   18a30:	6d5f6e69 	.word	0x6d5f6e69
   18a34:	3c207a68 	.word	0x3c207a68
   18a38:	34383320 	.word	0x34383320
   18a3c:	20262620 	.word	0x20262620
   18a40:	69736564 	.word	0x69736564
   18a44:	5f646572 	.word	0x5f646572
   18a48:	65657073 	.word	0x65657073
   18a4c:	6e695f64 	.word	0x6e695f64
   18a50:	7a686d5f 	.word	0x7a686d5f
   18a54:	31203e20 	.word	0x31203e20
   18a58:	200a2932 	.word	0x200a2932
   18a5c:	20202020 	.word	0x20202020
   18a60:	20202020 	.word	0x20202020
   18a64:	65724620 	.word	0x65724620
   18a68:	6e657571 	.word	0x6e657571
   18a6c:	6d207963 	.word	0x6d207963
   18a70:	20747375 	.word	0x20747375
   18a74:	6c206562 	.word	0x6c206562
   18a78:	7265776f 	.word	0x7265776f
   18a7c:	61687420 	.word	0x61687420
   18a80:	3833206e 	.word	0x3833206e
   18a84:	484d2034 	.word	0x484d2034
   18a88:	646e617a 	.word	0x646e617a
   18a8c:	65726720 	.word	0x65726720
   18a90:	72657461 	.word	0x72657461
   18a94:	61687420 	.word	0x61687420
   18a98:	726f206e 	.word	0x726f206e
   18a9c:	75716520 	.word	0x75716520
   18aa0:	74206c61 	.word	0x74206c61
   18aa4:	3231206f 	.word	0x3231206f
   18aa8:	7a484d20 	.word	0x7a484d20
   18aac:	6d305b1b 	.word	0x6d305b1b
   18ab0:	6d305b1b 	.word	0x6d305b1b
   18ab4:	0000000a 	.word	0x0000000a
   18ab8:	31345b1b 	.word	0x31345b1b
   18abc:	4952436d 	.word	0x4952436d
   18ac0:	41434954 	.word	0x41434954
   18ac4:	305b1b4c 	.word	0x305b1b4c
   18ac8:	6d34393b 	.word	0x6d34393b
   18acc:	3a73253a 	.word	0x3a73253a
   18ad0:	3b305b1b 	.word	0x3b305b1b
   18ad4:	256d3239 	.word	0x256d3239
   18ad8:	5b1b3a73 	.word	0x5b1b3a73
   18adc:	33393b30 	.word	0x33393b30
   18ae0:	3e64256d 	.word	0x3e64256d
   18ae4:	305b1b20 	.word	0x305b1b20
   18ae8:	6d37333b 	.word	0x6d37333b
   18aec:	65737341 	.word	0x65737341
   18af0:	6f697472 	.word	0x6f697472
   18af4:	6146206e 	.word	0x6146206e
   18af8:	72756c69 	.word	0x72756c69
   18afc:	43202c65 	.word	0x43202c65
   18b00:	69646e6f 	.word	0x69646e6f
   18b04:	6e6f6974 	.word	0x6e6f6974
   18b08:	73655420 	.word	0x73655420
   18b0c:	3a646574 	.word	0x3a646574
   18b10:	69642820 	.word	0x69642820
   18b14:	65646976 	.word	0x65646976
   18b18:	61765f72 	.word	0x61765f72
   18b1c:	2065756c 	.word	0x2065756c
   18b20:	2938203c 	.word	0x2938203c
   18b24:	2020200a 	.word	0x2020200a
   18b28:	20202020 	.word	0x20202020
   18b2c:	50202020 	.word	0x50202020
   18b30:	64204c4c 	.word	0x64204c4c
   18b34:	64697669 	.word	0x64697669
   18b38:	76207265 	.word	0x76207265
   18b3c:	65756c61 	.word	0x65756c61
   18b40:	6e657720 	.word	0x6e657720
   18b44:	756f2074 	.word	0x756f2074
   18b48:	666f2074 	.word	0x666f2074
   18b4c:	756f6220 	.word	0x756f6220
   18b50:	1b73646e 	.word	0x1b73646e
   18b54:	1b6d305b 	.word	0x1b6d305b
   18b58:	0a6d305b 	.word	0x0a6d305b
   18b5c:	00000000 	.word	0x00000000
   18b60:	31345b1b 	.word	0x31345b1b
   18b64:	4952436d 	.word	0x4952436d
   18b68:	41434954 	.word	0x41434954
   18b6c:	305b1b4c 	.word	0x305b1b4c
   18b70:	6d34393b 	.word	0x6d34393b
   18b74:	3a73253a 	.word	0x3a73253a
   18b78:	3b305b1b 	.word	0x3b305b1b
   18b7c:	256d3239 	.word	0x256d3239
   18b80:	5b1b3a73 	.word	0x5b1b3a73
   18b84:	33393b30 	.word	0x33393b30
   18b88:	3e64256d 	.word	0x3e64256d
   18b8c:	305b1b20 	.word	0x305b1b20
   18b90:	6d37333b 	.word	0x6d37333b
   18b94:	65737341 	.word	0x65737341
   18b98:	6f697472 	.word	0x6f697472
   18b9c:	6146206e 	.word	0x6146206e
   18ba0:	72756c69 	.word	0x72756c69
   18ba4:	43202c65 	.word	0x43202c65
   18ba8:	69646e6f 	.word	0x69646e6f
   18bac:	6e6f6974 	.word	0x6e6f6974
   18bb0:	73655420 	.word	0x73655420
   18bb4:	3a646574 	.word	0x3a646574
   18bb8:	61662820 	.word	0x61662820
   18bbc:	2965736c 	.word	0x2965736c
   18bc0:	2020200a 	.word	0x2020200a
   18bc4:	20202020 	.word	0x20202020
   18bc8:	50202020 	.word	0x50202020
   18bcc:	6c204c4c 	.word	0x6c204c4c
   18bd0:	206b636f 	.word	0x206b636f
   18bd4:	6c756f63 	.word	0x6c756f63
   18bd8:	6f6e2064 	.word	0x6f6e2064
   18bdc:	65622074 	.word	0x65622074
   18be0:	74736520 	.word	0x74736520
   18be4:	696c6261 	.word	0x696c6261
   18be8:	64656873 	.word	0x64656873
   18bec:	66656220 	.word	0x66656220
   18bf0:	2065726f 	.word	0x2065726f
   18bf4:	656d6974 	.word	0x656d6974
   18bf8:	1b74756f 	.word	0x1b74756f
   18bfc:	1b6d305b 	.word	0x1b6d305b
   18c00:	0a6d305b 	.word	0x0a6d305b
   18c04:	00000000 	.word	0x00000000
   18c08:	31345b1b 	.word	0x31345b1b
   18c0c:	4952436d 	.word	0x4952436d
   18c10:	41434954 	.word	0x41434954
   18c14:	305b1b4c 	.word	0x305b1b4c
   18c18:	6d34393b 	.word	0x6d34393b
   18c1c:	3a73253a 	.word	0x3a73253a
   18c20:	3b305b1b 	.word	0x3b305b1b
   18c24:	256d3239 	.word	0x256d3239
   18c28:	5b1b3a73 	.word	0x5b1b3a73
   18c2c:	33393b30 	.word	0x33393b30
   18c30:	3e64256d 	.word	0x3e64256d
   18c34:	305b1b20 	.word	0x305b1b20
   18c38:	6d37333b 	.word	0x6d37333b
   18c3c:	65737341 	.word	0x65737341
   18c40:	6f697472 	.word	0x6f697472
   18c44:	6146206e 	.word	0x6146206e
   18c48:	72756c69 	.word	0x72756c69
   18c4c:	43202c65 	.word	0x43202c65
   18c50:	69646e6f 	.word	0x69646e6f
   18c54:	6e6f6974 	.word	0x6e6f6974
   18c58:	73655420 	.word	0x73655420
   18c5c:	3a646574 	.word	0x3a646574
   18c60:	70632820 	.word	0x70632820
   18c64:	69645f75 	.word	0x69645f75
   18c68:	65646976 	.word	0x65646976
   18c6c:	203c2072 	.word	0x203c2072
   18c70:	0a293233 	.word	0x0a293233
   18c74:	20202020 	.word	0x20202020
   18c78:	20202020 	.word	0x20202020
   18c7c:	69442020 	.word	0x69442020
   18c80:	65646976 	.word	0x65646976
   18c84:	756d2072 	.word	0x756d2072
   18c88:	276e7473 	.word	0x276e7473
   18c8c:	78652074 	.word	0x78652074
   18c90:	64656563 	.word	0x64656563
   18c94:	1b323320 	.word	0x1b323320
   18c98:	1b6d305b 	.word	0x1b6d305b
   18c9c:	0a6d305b 	.word	0x0a6d305b
   18ca0:	00000000 	.word	0x00000000
   18ca4:	32345b1b 	.word	0x32345b1b
   18ca8:	2020206d 	.word	0x2020206d
   18cac:	464e4920 	.word	0x464e4920
   18cb0:	305b1b4f 	.word	0x305b1b4f
   18cb4:	6d34393b 	.word	0x6d34393b
   18cb8:	3a73253a 	.word	0x3a73253a
   18cbc:	3b305b1b 	.word	0x3b305b1b
   18cc0:	256d3239 	.word	0x256d3239
   18cc4:	5b1b3a73 	.word	0x5b1b3a73
   18cc8:	33393b30 	.word	0x33393b30
   18ccc:	3e64256d 	.word	0x3e64256d
   18cd0:	305b1b20 	.word	0x305b1b20
   18cd4:	6d37333b 	.word	0x6d37333b
   18cd8:	504f5453 	.word	0x504f5453
   18cdc:	6d305b1b 	.word	0x6d305b1b
   18ce0:	0000000a 	.word	0x0000000a
   18ce4:	75746552 	.word	0x75746552
   18ce8:	64656e72 	.word	0x64656e72
   18cec:	74616420 	.word	0x74616420
   18cf0:	25203a61 	.word	0x25203a61
   18cf4:	78252078 	.word	0x78252078
   18cf8:	20782520 	.word	0x20782520
   18cfc:	000a7825 	.word	0x000a7825
   18d00:	32345b1b 	.word	0x32345b1b
   18d04:	2020206d 	.word	0x2020206d
   18d08:	464e4920 	.word	0x464e4920
   18d0c:	305b1b4f 	.word	0x305b1b4f
   18d10:	6d34393b 	.word	0x6d34393b
   18d14:	3a73253a 	.word	0x3a73253a
   18d18:	3b305b1b 	.word	0x3b305b1b
   18d1c:	256d3239 	.word	0x256d3239
   18d20:	5b1b3a73 	.word	0x5b1b3a73
   18d24:	33393b30 	.word	0x33393b30
   18d28:	3e64256d 	.word	0x3e64256d
   18d2c:	305b1b20 	.word	0x305b1b20
   18d30:	6d37333b 	.word	0x6d37333b
   18d34:	72617453 	.word	0x72617453
   18d38:	5b1b0a74 	.word	0x5b1b0a74
   18d3c:	000a6d30 	.word	0x000a6d30

00018d40 <Gpio::ValidPortCheck()::file>:
   18d40:	6f697067 7070682e ffffff00              gpio.hpp....

00018d4c <Gpio::SetInterruptEdge(GpioInterface::Edge)::file>:
   18d4c:	6f697067 7070682e ffffff00              gpio.hpp....

00018d58 <Gpio::ClearInterruptEdge(GpioInterface::Edge)::file>:
   18d58:	6f697067 7070682e ffffff00              gpio.hpp....

00018d64 <Lpc40xxSystemController::SetPeripheralClockDivider(unsigned char)::file>:
   18d64:	74737973 635f6d65 72746e6f 656c6c6f     system_controlle
   18d74:	70682e72 ffff0070                       r.hpp...

00018d7c <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)::file>:
   18d7c:	74737973 635f6d65 72746e6f 656c6c6f     system_controlle
   18d8c:	70682e72 ffff0070                       r.hpp...

00018d94 <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)::file>:
   18d94:	74737973 635f6d65 72746e6f 656c6c6f     system_controlle
   18da4:	70682e72 ffff0070                       r.hpp...

00018dac <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)::file>:
   18dac:	74737973 635f6d65 72746e6f 656c6c6f     system_controlle
   18dbc:	70682e72 ffff0070                       r.hpp...

00018dc4 <Lpc40xxSystemController::SetCpuClockDivider(unsigned char)::file>:
   18dc4:	74737973 635f6d65 72746e6f 656c6c6f     system_controlle
   18dd4:	70682e72 ffff0070                       r.hpp...

00018ddc <Ssp::kPinSelect>:
   18ddc:	ff040202                                ....

00018de0 <Ssp::kSspPinMatrix>:
   18de0:	00018fec 00001200 00018fec 00001100     ................
   18df0:	00018fec 00000f00 00018fec 00000900     ................
   18e00:	00018fec 00000800 00018fec 00000700     ................
   18e10:	00018fec 00000101 00018fec 00000401     ................
   18e20:	00018fec 00000001                       ........

00018e28 <Ssp::kPowerBit>:
   18e28:	00000015 0000000a 00000014              ............

00018e34 <main::file>:
   18e34:	6e69616d 7070632e ffffff00              main.cpp....

00018e40 <vtable for Ssd1306>:
	...
   18e48:	0001329d 000132c9 000132f5 000134dd     .2...2...2...4..
   18e58:	0001315d 00013185 000135b5 000135ed     ]1...1...5...5..
   18e68:	00013681                                .6..

00018e6c <vtable for PixelDisplayInterface>:
	...
   18e74:	00017fb1 00017fb1 00017fb1 00017fb1     ................
   18e84:	0001315d 00013185 00017fb1 00017fb1     ]1...1..........
   18e94:	000131ad                                .1..

00018e98 <vtable for Ssp>:
	...
   18ea0:	000126d1 000127b5 0001282d 00012899     .&...'..-(...(..
   18eb0:	00012985 00012b91 00012cf1 00012edd     .)...+...,......
   18ec0:	fffffffc 00000000 00011f71 00012001     ........q.... ..
   18ed0:	00012059 00012071 00012085 000120c5     Y ..q ... ... ..
   18ee0:	000120f5                                . ..

00018ee4 <vtable for SspInterface>:
	...
   18eec:	00017fb1 00017fb1 00017fb1 00017fb1     ................
   18efc:	00017fb1 00017fb1 00017fb1 00017fb1     ................

00018f0c <vtable for Lpc40xxSystemController>:
	...
   18f14:	00011f71 00012001 00012059 00012071     q.... ..Y ..q ..
   18f24:	00012085 000120c5 000120f5              . ... ... ..

00018f30 <vtable for SystemControllerInterface>:
	...
   18f38:	00017fb1 00017fb1 00017fb1 00017fb1     ................
   18f48:	00017fb1 00017fb1 00017fb1              ............

00018f54 <vtable for Gpio>:
	...
   18f5c:	00011689 00011705 00011781 000117c5     ................
   18f6c:	00011829 0001188d 000118d1 0001193d     )...........=...
   18f7c:	000119b5 00011a25 00011cbd 00011d05     ....%...........
   18f8c:	00011acd 00011b29 00011bad 00011c35     ....).......5...

00018f9c <vtable for GpioInterface>:
	...
   18fa4:	00017fb1 00017fb1 00017fb1 00017fb1     ................
   18fb4:	00017fb1 00017fb1 00017fb1 00017fb1     ................
   18fc4:	00017fb1 00017fb1 00017fb1 00017fb1     ................
   18fd4:	00017fb1 00017fb1 00017fb1 00017fb1     ................

00018fe4 <vtable for Pin>:
	...
   18fec:	00010ff9 00011071 000110f1 00011165     ....q.......e...
   18ffc:	000111d9 00011255 000112d1 00011345     ....U.......E...
   1900c:	000113c1 00011435 000114a9 00011581     ....5...........
   1901c:	000115ad                                ....

00019020 <vtable for PinInterface>:
	...
   19028:	00017fb1 00017fb1 00017fb1 00017fb1     ................
   19038:	00017fb1 00017fb1 00017fb1 00017fb1     ................
   19048:	00017fb1 00017fb1 00017fb1 00017fb1     ................
   19058:	00017fb1                                ....

0001905c <main::__PRETTY_FUNCTION__>:
   1905c:	20746e69 6e69616d ff002928              int main()..

00019068 <Lpc40xxSystemController::SetPeripheralClockDivider(unsigned char)::__PRETTY_FUNCTION__>:
   19068:	74726976 206c6175 64696f76 63704c20     virtual void Lpc
   19078:	78783034 74737953 6f436d65 6f72746e     40xxSystemContro
   19088:	72656c6c 65533a3a 72655074 65687069     ller::SetPeriphe
   19098:	436c6172 6b636f6c 69766944 28726564     ralClockDivider(
   190a8:	746e6975 29745f38 ffffff00              uint8_t)....

000190b4 <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)::__PRETTY_FUNCTION__>:
   190b4:	746e6975 745f3233 63704c20 78783034     uint32_t Lpc40xx
   190c4:	74737953 6f436d65 6f72746e 72656c6c     SystemController
   190d4:	65533a3a 69614d74 6c6c506e 63704c28     ::SetMainPll(Lpc
   190e4:	78783034 74737953 6f436d65 6f72746e     40xxSystemContro
   190f4:	72656c6c 6c503a3a 706e496c 202c7475     ller::PllInput, 
   19104:	746e6975 745f3631 ffff0029              uint16_t)...

00019110 <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)::__PRETTY_FUNCTION__>:
   19110:	746e6975 745f3233 63704c20 78783034     uint32_t Lpc40xx
   19120:	74737953 6f436d65 6f72746e 72656c6c     SystemController
   19130:	61433a3a 6c75636c 50657461 4c286c6c     ::CalculatePll(L
   19140:	30346370 79537878 6d657473 746e6f43     pc40xxSystemCont
   19150:	6c6c6f72 3a3a7265 496c6c50 7475706e     roller::PllInput
   19160:	6975202c 3631746e 0029745f              , uint16_t).

0001916c <Lpc40xxSystemController::SetCpuClockDivider(unsigned char)::__PRETTY_FUNCTION__>:
   1916c:	64696f76 63704c20 78783034 74737953     void Lpc40xxSyst
   1917c:	6f436d65 6f72746e 72656c6c 65533a3a     emController::Se
   1918c:	75704374 636f6c43 7669446b 72656469     tCpuClockDivider
   1919c:	6e697528 745f3874 ffff0029              (uint8_t)...

000191a8 <Gpio::ClearInterruptEdge(GpioInterface::Edge)::__PRETTY_FUNCTION__>:
   191a8:	74726976 206c6175 64696f76 69704720     virtual void Gpi
   191b8:	433a3a6f 7261656c 65746e49 70757272     o::ClearInterrup
   191c8:	67644574 70472865 6e496f69 66726574     tEdge(GpioInterf
   191d8:	3a656361 6764453a ff002965              ace::Edge)..

000191e4 <Gpio::ValidPortCheck()::__PRETTY_FUNCTION__>:
   191e4:	6c6f6f62 69704720 563a3a6f 64696c61     bool Gpio::Valid
   191f4:	74726f50 63656843 0029286b              PortCheck().

00019200 <Gpio::SetInterruptEdge(GpioInterface::Edge)::__PRETTY_FUNCTION__>:
   19200:	74726976 206c6175 64696f76 69704720     virtual void Gpi
   19210:	533a3a6f 6e497465 72726574 45747075     o::SetInterruptE
   19220:	28656764 6f697047 65746e49 63616672     dge(GpioInterfac
   19230:	453a3a65 29656764 ffffff00 20746f4e     e::Edge)....Not 
   19240:	53532061 4c432050 6f70204b 00007472     a SSP CLK port..
   19250:	20746f4e 494d2061 70204f53 0074726f     Not a MISO port.
   19260:	20746f4e 4f4d2061 70204953 0074726f     Not a MOSI port.
   19270:	63617453 6544206b 20687470 7a25203d     Stack Depth = %z
   19280:	00000a64 25232020 203a757a 70257830     d...  #%zu: 0x%p
   19290:	0000000a 6e75520a 6874203a 6f662065     .....Run: the fo
   192a0:	776f6c6c 20676e69 6d6d6f63 20646e61     llowing command 
   192b0:	79206e69 2072756f 6a6f7270 20746365     in your project 
   192c0:	65726964 726f7463 00000079 1b20200a     directory....  .
   192d0:	333b315b 616d6d37 7320656b 6b636174     [1;37mmake stack
   192e0:	63617274 73252d65 41525420 3d534543     trace-%s TRACES=
   192f0:	00000022 70257830 00000000 25783020     "...0x%p.... 0x%
   19300:	00000070 5b1b0a22 00006d30 73696854     p..."..[0m..This
   19310:	6c697720 6572206c 74726f70 65687420      will report the
   19320:	6c696620 6e612065 696c2064 6e20656e      file and line n
   19330:	65626d75 68742072 6c207461 74206465     umber that led t
   19340:	6874206f 66207369 74636e75 206e6f69     o this function 
   19350:	6e696562 61632067 64656c6c 0000002e     being called....
   19360:	6c707061 74616369 006e6f69 31345b1b     application..[41
   19370:	4952436d 41434954 305b1b4c 6d34393b     mCRITICAL.[0;94m
   19380:	3a73253a 3b305b1b 256d3239 5b1b3a73     :%s:.[0;92m%s:.[
   19390:	33393b30 3e64256d 305b1b20 6d37333b     0;93m%d> .[0;37m
   193a0:	65737341 6f697472 6146206e 72756c69     Assertion Failur
   193b0:	43202c65 69646e6f 6e6f6974 73655420     e, Condition Tes
   193c0:	3a646574 65702820 68706972 6c617265     ted: (peripheral
   193d0:	7669645f 72656469 203d3c20 200a2934     _divider <= 4). 
   193e0:	20202020 20202020 76694420 72656469              Divider
   193f0:	73756d20 74276e74 63786520 20646565      mustn't exceed 
   19400:	5b1b3233 5b1b6d30 000a6d30 6972500a     32.[0m.[0m...Pri
   19410:	6e69746e 74532067 206b6361 63617254     nting Stack Trac
   19420:	000a3a65 31345b1b 4952436d 41434954     e:...[41mCRITICA
   19430:	305b1b4c 6d34393b 3a73253a 3b305b1b     L.[0;94m:%s:.[0;
   19440:	256d3239 5b1b3a73 33393b30 3e64256d     92m%s:.[0;93m%d>
   19450:	305b1b20 6d37333b 65737341 6f697472      .[0;37mAssertio
   19460:	6146206e 72756c69 43202c65 69646e6f     n Failure, Condi
   19470:	6e6f6974 73655420 3a646574 65642820     tion Tested: (de
   19480:	65726973 70735f64 5f646565 6d5f6e69     sired_speed_in_m
   19490:	3c207a68 34383320 20262620 69736564     hz < 384 && desi
   194a0:	5f646572 65657073 6e695f64 7a686d5f     red_speed_in_mhz
   194b0:	31203e20 200a2932 20202020 20202020      > 12).         
   194c0:	65724620 6e657571 6d207963 20747375      Frequency must 
   194d0:	6c206562 7265776f 61687420 3833206e     be lower than 38
   194e0:	484d2034 646e617a 65726720 72657461     4 MHzand greater
   194f0:	61687420 726f206e 75716520 74206c61      than or equal t
   19500:	3231206f 7a484d20 6d305b1b 6d305b1b     o 12 MHz.[0m.[0m
   19510:	0000000a 31345b1b 4952436d 41434954     .....[41mCRITICA
   19520:	305b1b4c 6d34393b 3a73253a 3b305b1b     L.[0;94m:%s:.[0;
   19530:	256d3239 5b1b3a73 33393b30 3e64256d     92m%s:.[0;93m%d>
   19540:	305b1b20 6d37333b 65737341 6f697472      .[0;37mAssertio
   19550:	6146206e 72756c69 43202c65 69646e6f     n Failure, Condi
   19560:	6e6f6974 73655420 3a646574 69642820     tion Tested: (di
   19570:	65646976 61765f72 2065756c 2938203c     vider_value < 8)
   19580:	2020200a 20202020 50202020 64204c4c     .          PLL d
   19590:	64697669 76207265 65756c61 6e657720     ivider value wen
   195a0:	756f2074 666f2074 756f6220 1b73646e     t out of bounds.
   195b0:	1b6d305b 0a6d305b 00000000 31345b1b     [0m.[0m......[41
   195c0:	4952436d 41434954 305b1b4c 6d34393b     mCRITICAL.[0;94m
   195d0:	3a73253a 3b305b1b 256d3239 5b1b3a73     :%s:.[0;92m%s:.[
   195e0:	33393b30 3e64256d 305b1b20 6d37333b     0;93m%d> .[0;37m
   195f0:	65737341 6f697472 6146206e 72756c69     Assertion Failur
   19600:	43202c65 69646e6f 6e6f6974 73655420     e, Condition Tes
   19610:	3a646574 61662820 2965736c 2020200a     ted: (false).   
   19620:	20202020 50202020 6c204c4c 206b636f            PLL lock 
   19630:	6c756f63 6f6e2064 65622074 74736520     could not be est
   19640:	696c6261 64656873 66656220 2065726f     ablished before 
   19650:	656d6974 1b74756f 1b6d305b 0a6d305b     timeout.[0m.[0m.
   19660:	00000000 31345b1b 4952436d 41434954     .....[41mCRITICA
   19670:	305b1b4c 6d34393b 3a73253a 3b305b1b     L.[0;94m:%s:.[0;
   19680:	256d3239 5b1b3a73 33393b30 3e64256d     92m%s:.[0;93m%d>
   19690:	305b1b20 6d37333b 65737341 6f697472      .[0;37mAssertio
   196a0:	6146206e 72756c69 43202c65 69646e6f     n Failure, Condi
   196b0:	6e6f6974 73655420 3a646574 70632820     tion Tested: (cp
   196c0:	69645f75 65646976 203c2072 0a293233     u_divider < 32).
   196d0:	20202020 20202020 69442020 65646976               Divide
   196e0:	756d2072 276e7473 78652074 64656563     r mustn't exceed
   196f0:	1b323320 1b6d305b 0a6d305b 00000000      32.[0m.[0m.....
   19700:	31345b1b 4952436d 41434954 305b1b4c     .[41mCRITICAL.[0
   19710:	6d34393b 3a73253a 3b305b1b 256d3239     ;94m:%s:.[0;92m%
   19720:	5b1b3a73 33393b30 3e64256d 305b1b20     s:.[0;93m%d> .[0
   19730:	6d37333b 65737341 6f697472 6146206e     ;37mAssertion Fa
   19740:	72756c69 43202c65 69646e6f 6e6f6974     ilure, Condition
   19750:	73655420 3a646574 72662820 65757165      Tested: (freque
   19760:	2079636e 30203d21 20200a29 20202020     ncy != 0).      
   19770:	20202020 6e6e6143 6820746f 20657661         Cannot have 
   19780:	6f72657a 63697420 7020736b 6d207265     zero ticks per m
   19790:	6f726369 6f636573 202c646e 61656c70     icrosecond, plea
   197a0:	63206573 736f6f68 20312065 6d20726f     se choose 1 or m
   197b0:	2e65726f 6d305b1b 6d305b1b 0000000a     ore..[0m.[0m....
   197c0:	33345b1b 4157206d 4e494e52 305b1b47     .[43m WARNING.[0
   197d0:	6d34393b 3a73253a 3b305b1b 256d3239     ;94m:%s:.[0;92m%
   197e0:	5b1b3a73 33393b30 3e64256d 305b1b20     s:.[0;93m%d> .[0
   197f0:	6d37333b 74737953 54206d65 72656d69     ;37mSystem Timer
   19800:	73616820 49414620 2044454c 73206f74      has FAILED to s
   19810:	74726174 305b1b21 305b1b6d ff000a6d     tart!.[0m.[0m...

00019820 <Timer::kPowerbit>:
   19820:	00000001 00000002 00000016 00000017     ................

00019830 <Timer::kTimerIrq>:
   19830:	04030201                                ....

00019834 <Timer::kTimerIsr>:
   19834:	00014c85 00014cc1 00014cfd 00014d39     .L...L...L..9M..

00019844 <Timer::Initialize(unsigned long, void (*)(), long)::file>:
   19844:	656d6974 70682e72 ffff0070              timer.hpp...

00019850 <Uart::kTxUartPortFunction>:
   19850:	05020201                                ....

00019854 <Uart::kRxUartPortFunction>:
   19854:	03020201                                ....

00019858 <Uart::kPowerbit>:
   19858:	00000003 00000018 00000019 00000008     ................

00019868 <LowLevelInit()::file>:
   19868:	72617473 2e707574 00707063              startup.cpp.

00019874 <vtable for Uart>:
	...
   1987c:	0001427d 00014349 00014479 000145ad     }B..IC..yD...E..
   1988c:	fffffffc 00000000 00011f71 00012001     ........q.... ..
   1989c:	00012059 00012071 00012085 000120c5     Y ..q ... ... ..
   198ac:	000120f5                                . ..

000198b0 <vtable for Timer>:
	...
   198b8:	00013fe5 00014149 00014241 fffffffc     .?..IA..AB......
   198c8:	00000000 00011f71 00012001 00012059     ....q.... ..Y ..
   198d8:	00012071 00012085 000120c5 000120f5     q ... ... ... ..

000198e8 <vtable for SystemTimer>:
	...
   198f0:	00013e31 00013e65 00013f01 fffffffc     1>..e>...?......
   19900:	00000000 00011f71 00012001 00012059     ....q.... ..Y ..
   19910:	00012071 00012085 000120c5 000120f5     q ... ... ... ..

00019920 <Timer::Initialize(unsigned long, void (*)(), long)::__PRETTY_FUNCTION__>:
   19920:	74726976 206c6175 64696f76 6d695420     virtual void Tim
   19930:	3a3a7265 74696e49 696c6169 7528657a     er::Initialize(u
   19940:	33746e69 2c745f32 72734920 6e696f50     int32_t, IsrPoin
   19950:	2c726574 746e6920 745f3233 ffff0029     ter, int32_t)...

00019960 <LowLevelInit()::__PRETTY_FUNCTION__>:
   19960:	64696f76 776f4c20 6576654c 696e496c     void LowLevelIni
   19970:	00292874 63617453 6544206b 20687470     t().Stack Depth 
   19980:	7a25203d 00000a64 25232020 203a757a     = %zd...  #%zu: 
   19990:	70257830 0000000a 6e75520a 6874203a     0x%p.....Run: th
   199a0:	6f662065 776f6c6c 20676e69 6d6d6f63     e following comm
   199b0:	20646e61 79206e69 2072756f 6a6f7270     and in your proj
   199c0:	20746365 65726964 726f7463 00000079     ect directory...
   199d0:	1b20200a 333b315b 616d6d37 7320656b     .  .[1;37mmake s
   199e0:	6b636174 63617274 73252d65 41525420     tacktrace-%s TRA
   199f0:	3d534543 00000022 70257830 00000000     CES="...0x%p....
   19a00:	25783020 00000070 5b1b0a22 00006d30      0x%p..."..[0m..
   19a10:	73696854 6c697720 6572206c 74726f70     This will report
   19a20:	65687420 6c696620 6e612065 696c2064      the file and li
   19a30:	6e20656e 65626d75 68742072 6c207461     ne number that l
   19a40:	74206465 6874206f 66207369 74636e75     ed to this funct
   19a50:	206e6f69 6e696562 61632067 64656c6c     ion being called
   19a60:	0000002e 6c707061 74616369 006e6f69     ....application.
   19a70:	31345b1b 4952436d 41434954 305b1b4c     .[41mCRITICAL.[0
   19a80:	6d34393b 3a73253a 3b305b1b 256d3239     ;94m:%s:.[0;92m%
   19a90:	5b1b3a73 33393b30 3e64256d 305b1b20     s:.[0;93m%d> .[0
   19aa0:	6d37333b 65737341 6f697472 6146206e     ;37mAssertion Fa
   19ab0:	72756c69 43202c65 69646e6f 6e6f6974     ilure, Condition
   19ac0:	73655420 3a646574 73692820 3d212072      Tested: (isr !=
   19ad0:	746e4920 75727265 6f4c7470 70756b6f      InterruptLookup
   19ae0:	646e6148 2972656c 2020200a 20202020     Handler).       
   19af0:	4e202020 5349206f 6f662052 20646e75        No ISR found 
   19b00:	20726f66 20656874 74636576 2520726f     for the vector %
   19b10:	305b1b75 305b1b6d 00000a6d 6972500a     u.[0m.[0m....Pri
   19b20:	6e69746e 74532067 206b6361 63617254     nting Stack Trac
   19b30:	000a3a65 31345b1b 7261486d 61462064     e:...[41mHard Fa
   19b40:	20746c75 65637845 6f697470 634f206e     ult Exception Oc
   19b50:	72727563 0a216465 6d305b1b 00000000     curred!..[0m....
   19b60:	203a3072 30257830 2c586c38 3a317220     r0: 0x%08lX, r1:
   19b70:	25783020 586c3830 3272202c 7830203a      0x%08lX, r2: 0x
   19b80:	6c383025 72202c58 30203a33 38302578     %08lX, r3: 0x%08
   19b90:	000a586c 3a323172 25783020 586c3830     lX..r12: 0x%08lX
   19ba0:	726c202c 7830203a 6c383025 70202c58     , lr: 0x%08lX, p
   19bb0:	30203a63 38302578 202c586c 3a727370     c: 0x%08lX, psr:
   19bc0:	25783020 586c3830 ffff000a               0x%08lX....

00019bcc <InterruptLookupHandler::file>:
   19bcc:	65746e69 70757272 70632e74 ffff0070     interrupt.cpp...

00019bdc <InterruptLookupHandler::__PRETTY_FUNCTION__>:
   19bdc:	64696f76 746e4920 75727265 6f4c7470     void InterruptLo
   19bec:	70756b6f 646e6148 2872656c ffff0029     okupHandler()...

00019bfc <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)::pow10>:
   19bfc:	3f800000 41200000 42c80000 447a0000     ...?.. A...B..zD
   19c0c:	461c4000 47c35000 49742400 4b189680     .@.F.P.G.$tI...K
   19c1c:	4cbebc20 4e6e6b28 63617453 6544206b      ..L(knNStack De
   19c2c:	20687470 7a25203d 00000a64 25232020     pth = %zd...  #%
   19c3c:	203a757a 70257830 0000000a 6e75520a     zu: 0x%p.....Run
   19c4c:	6874203a 6f662065 776f6c6c 20676e69     : the following 
   19c5c:	6d6d6f63 20646e61 79206e69 2072756f     command in your 
   19c6c:	6a6f7270 20746365 65726964 726f7463     project director
   19c7c:	00000079 1b20200a 333b315b 616d6d37     y....  .[1;37mma
   19c8c:	7320656b 6b636174 63617274 73252d65     ke stacktrace-%s
   19c9c:	41525420 3d534543 00000022 70257830      TRACES="...0x%p
   19cac:	00000000 25783020 00000070 5b1b0a22     .... 0x%p..."..[
   19cbc:	00006d30 73696854 6c697720 6572206c     0m..This will re
   19ccc:	74726f70 65687420 6c696620 6e612065     port the file an
   19cdc:	696c2064 6e20656e 65626d75 68742072     d line number th
   19cec:	6c207461 74206465 6874206f 66207369     at led to this f
   19cfc:	74636e75 206e6f69 6e696562 61632067     unction being ca
   19d0c:	64656c6c 0000002e 6c707061 74616369     lled....applicat
   19d1c:	006e6f69 33345b1b 4157206d 4e494e52     ion..[43m WARNIN
   19d2c:	305b1b47 6d34393b 3a73253a 3b305b1b     G.[0;94m:%s:.[0;
   19d3c:	256d3239 5b1b3a73 33393b30 3e64256d     92m%s:.[0;93m%d>
   19d4c:	305b1b20 6d37333b 74726f50 20642520      .[0;37mPort %d 
   19d5c:	6e6e6163 6220746f 73752065 66206465     cannot be used f
   19d6c:	4520726f 72657478 206c616e 65746e49     or External Inte
   19d7c:	70757272 202e7374 6465654e 206f7420     rrupts. Need to 
   19d8c:	20657375 4f495047 206e6f20 74726f50     use GPIO on Port
   19d9c:	6f203020 2e322072 6d305b1b 6d305b1b      0 or 2..[0m.[0m
   19dac:	0000000a 33345b1b 4157206d 4e494e52     .....[43m WARNIN
   19dbc:	305b1b47 6d34393b 3a73253a 3b305b1b     G.[0;94m:%s:.[0;
   19dcc:	256d3239 5b1b3a73 33393b30 3e64256d     92m%s:.[0;93m%d>
   19ddc:	305b1b20 6d37333b 65676445 20642520      .[0;37mEdge %d 
   19dec:	6e6e6163 6220746f 73752065 66206465     cannot be used f
   19dfc:	4520726f 72657478 206c616e 65746e49     or External Inte
   19e0c:	70757272 4e2e7374 20646565 75206f74     rrupts.Need to u
   19e1c:	61206573 73697220 2c676e69 6c616620     se a rising, fal
   19e2c:	676e696c 726f202c 746f6220 6f632068     ling, or both co
   19e3c:	6769666e 74617275 2e6e6f69 6d305b1b     nfiguration..[0m
   19e4c:	0000000a 31345b1b 4952436d 41434954     .....[41mCRITICA
   19e5c:	305b1b4c 6d34393b 3a73253a 3b305b1b     L.[0;94m:%s:.[0;
   19e6c:	256d3239 5b1b3a73 33393b30 3e64256d     92m%s:.[0;93m%d>
   19e7c:	305b1b20 6d37333b 65737341 6f697472      .[0;37mAssertio
   19e8c:	6146206e 72756c69 43202c65 69646e6f     n Failure, Condi
   19e9c:	6e6f6974 73655420 3a646574 65702820     tion Tested: (pe
   19eac:	68706972 6c617265 7669645f 72656469     ripheral_divider
   19ebc:	203d3c20 200a2934 20202020 20202020      <= 4).         
   19ecc:	76694420 72656469 73756d20 74276e74      Divider mustn't
   19edc:	63786520 20646565 5b1b3233 5b1b6d30      exceed 32.[0m.[
   19eec:	000a6d30 6972500a 6e69746e 74532067     0m...Printing St
   19efc:	206b6361 63617254 000a3a65 31345b1b     ack Trace:...[41
   19f0c:	4952436d 41434954 305b1b4c 6d34393b     mCRITICAL.[0;94m
   19f1c:	3a73253a 3b305b1b 256d3239 5b1b3a73     :%s:.[0;92m%s:.[
   19f2c:	33393b30 3e64256d 305b1b20 6d37333b     0;93m%d> .[0;37m
   19f3c:	65737341 6f697472 6146206e 72756c69     Assertion Failur
   19f4c:	43202c65 69646e6f 6e6f6974 73655420     e, Condition Tes
   19f5c:	3a646574 65642820 65726973 70735f64     ted: (desired_sp
   19f6c:	5f646565 6d5f6e69 3c207a68 34383320     eed_in_mhz < 384
   19f7c:	20262620 69736564 5f646572 65657073      && desired_spee
   19f8c:	6e695f64 7a686d5f 31203e20 200a2932     d_in_mhz > 12). 
   19f9c:	20202020 20202020 65724620 6e657571              Frequen
   19fac:	6d207963 20747375 6c206562 7265776f     cy must be lower
   19fbc:	61687420 3833206e 484d2034 646e617a      than 384 MHzand
   19fcc:	65726720 72657461 61687420 726f206e      greater than or
   19fdc:	75716520 74206c61 3231206f 7a484d20      equal to 12 MHz
   19fec:	6d305b1b 6d305b1b 0000000a 31345b1b     .[0m.[0m.....[41
   19ffc:	4952436d 41434954 305b1b4c 6d34393b     mCRITICAL.[0;94m
   1a00c:	3a73253a 3b305b1b 256d3239 5b1b3a73     :%s:.[0;92m%s:.[
   1a01c:	33393b30 3e64256d 305b1b20 6d37333b     0;93m%d> .[0;37m
   1a02c:	65737341 6f697472 6146206e 72756c69     Assertion Failur
   1a03c:	43202c65 69646e6f 6e6f6974 73655420     e, Condition Tes
   1a04c:	3a646574 69642820 65646976 61765f72     ted: (divider_va
   1a05c:	2065756c 2938203c 2020200a 20202020     lue < 8).       
   1a06c:	50202020 64204c4c 64697669 76207265        PLL divider v
   1a07c:	65756c61 6e657720 756f2074 666f2074     alue went out of
   1a08c:	756f6220 1b73646e 1b6d305b 0a6d305b      bounds.[0m.[0m.
   1a09c:	00000000 31345b1b 4952436d 41434954     .....[41mCRITICA
   1a0ac:	305b1b4c 6d34393b 3a73253a 3b305b1b     L.[0;94m:%s:.[0;
   1a0bc:	256d3239 5b1b3a73 33393b30 3e64256d     92m%s:.[0;93m%d>
   1a0cc:	305b1b20 6d37333b 65737341 6f697472      .[0;37mAssertio
   1a0dc:	6146206e 72756c69 43202c65 69646e6f     n Failure, Condi
   1a0ec:	6e6f6974 73655420 3a646574 61662820     tion Tested: (fa
   1a0fc:	2965736c 2020200a 20202020 50202020     lse).          P
   1a10c:	6c204c4c 206b636f 6c756f63 6f6e2064     LL lock could no
   1a11c:	65622074 74736520 696c6261 64656873     t be established
   1a12c:	66656220 2065726f 656d6974 1b74756f      before timeout.
   1a13c:	1b6d305b 0a6d305b 00000000 31345b1b     [0m.[0m......[41
   1a14c:	4952436d 41434954 305b1b4c 6d34393b     mCRITICAL.[0;94m
   1a15c:	3a73253a 3b305b1b 256d3239 5b1b3a73     :%s:.[0;92m%s:.[
   1a16c:	33393b30 3e64256d 305b1b20 6d37333b     0;93m%d> .[0;37m
   1a17c:	65737341 6f697472 6146206e 72756c69     Assertion Failur
   1a18c:	43202c65 69646e6f 6e6f6974 73655420     e, Condition Tes
   1a19c:	3a646574 70632820 69645f75 65646976     ted: (cpu_divide
   1a1ac:	203c2072 0a293233 20202020 20202020     r < 32).        
   1a1bc:	69442020 65646976 756d2072 276e7473       Divider mustn'
   1a1cc:	78652074 64656563 1b323320 1b6d305b     t exceed 32.[0m.
   1a1dc:	0a6d305b 00000000 35345b1b 2020206d     [0m......[45m   
   1a1ec:	4f525245 305b1b52 6d34393b 3a73253a     ERROR.[0;94m:%s:
   1a1fc:	3b305b1b 256d3239 5b1b3a73 33393b30     .[0;92m%s:.[0;93
   1a20c:	3e64256d 305b1b20 6d37333b 6c696146     m%d> .[0;37mFail
   1a21c:	74206465 6e69206f 61697469 53206574     ed to initiate S
   1a22c:	6d204950 2065646f 68746977 74206e69     PI mode within t
   1a23c:	6f656d69 202e7475 726f6241 676e6974     imeout. Aborting
   1a24c:	305b1b21 00000a6d 35345b1b 2020206d     !.[0m....[45m   
   1a25c:	4f525245 305b1b52 6d34393b 3a73253a     ERROR.[0;94m:%s:
   1a26c:	3b305b1b 256d3239 5b1b3a73 33393b30     .[0;92m%s:.[0;93
   1a27c:	3e64256d 305b1b20 6d37333b 70736552     m%d> .[0;37mResp
   1a28c:	65736e6f 746e6920 69726765 63207974     onse integrity c
   1a29c:	6b636568 69616620 2e64656c 6f624120     heck failed. Abo
   1a2ac:	6e697472 5b1b2167 000a6d30 35345b1b     rting!.[0m...[45
   1a2bc:	2020206d 4f525245 305b1b52 6d34393b     m   ERROR.[0;94m
   1a2cc:	3a73253a 3b305b1b 256d3239 5b1b3a73     :%s:.[0;92m%s:.[
   1a2dc:	33393b30 3e64256d 305b1b20 6d37333b     0;93m%d> .[0;37m
   1a2ec:	75736e55 726f7070 20646574 746c6f76     Unsupported volt
   1a2fc:	20656761 75206e69 202e6573 726f6241     age in use. Abor
   1a30c:	676e6974 305b1b21 00000a6d 35345b1b     ting!.[0m....[45
   1a31c:	2020206d 4f525245 305b1b52 6d34393b     m   ERROR.[0;94m
   1a32c:	3a73253a 3b305b1b 256d3239 5b1b3a73     :%s:.[0;92m%s:.[
   1a33c:	33393b30 3e64256d 305b1b20 6d37333b     0;93m%d> .[0;37m
   1a34c:	43204453 20647261 656d6974 756f2064     SD Card timed ou
   1a35c:	41202e74 74726f62 21676e69 6d305b1b     t. Aborting!.[0m
   1a36c:	0000000a 65757274 00000000 736c6166     ....true....fals
   1a37c:	00000065 35345b1b 2020206d 4f525245     e....[45m   ERRO
   1a38c:	305b1b52 6d34393b 3a73253a 3b305b1b     R.[0;94m:%s:.[0;
   1a39c:	256d3239 5b1b3a73 33393b30 3e64256d     92m%s:.[0;93m%d>
   1a3ac:	305b1b20 6d37333b 6c696857 65522065      .[0;37mWhile Re
   1a3bc:	6e696461 6c422067 206b636f 20642523     ading Block #%d 
   1a3cc:	31435243 5b1b3a36 000a6d30 35345b1b     CRC16:.[0m...[45
   1a3dc:	2020206d 4f525245 305b1b52 6d34393b     m   ERROR.[0;94m
   1a3ec:	3a73253a 3b305b1b 256d3239 5b1b3a73     :%s:.[0;92m%s:.[
   1a3fc:	33393b30 3e64256d 305b1b20 6d37333b     0;93m%d> .[0;37m
   1a40c:	65707845 64657463 78302720 58343025     Expected '0x%04X
   1a41c:	305b1b27 00000a6d 35345b1b 2020206d     '.[0m....[45m   
   1a42c:	4f525245 305b1b52 6d34393b 3a73253a     ERROR.[0;94m:%s:
   1a43c:	3b305b1b 256d3239 5b1b3a73 33393b30     .[0;92m%s:.[0;93
   1a44c:	3e64256d 305b1b20 6d37333b 20746f47     m%d> .[0;37mGot 
   1a45c:	25783027 27583430 6d305b1b 0000000a     '0x%04X'.[0m....
   1a46c:	35345b1b 2020206d 4f525245 305b1b52     .[45m   ERROR.[0
   1a47c:	6d34393b 3a73253a 3b305b1b 256d3239     ;94m:%s:.[0;92m%
   1a48c:	5b1b3a73 33393b30 3e64256d 305b1b20     s:.[0;93m%d> .[0
   1a49c:	6d37333b 64616552 646d4320 73617720     ;37mRead Cmd was
   1a4ac:	746f6e20 6b636120 6c776f6e 65676465      not acknowledge
   1a4bc:	72702064 7265706f 1b21796c 0a6d305b     d properly!.[0m.
   1a4cc:	00000000 35345b1b 2020206d 4f525245     .....[45m   ERRO
   1a4dc:	305b1b52 6d34393b 3a73253a 3b305b1b     R.[0;94m:%s:.[0;
   1a4ec:	256d3239 5b1b3a73 33393b30 3e64256d     92m%s:.[0;93m%d>
   1a4fc:	305b1b20 6d37333b 61726150 6574656d      .[0;37mParamete
   1a50c:	72452072 25203a72 305b1b73 00000a6d     r Err: %s.[0m...
   1a51c:	35345b1b 2020206d 4f525245 305b1b52     .[45m   ERROR.[0
   1a52c:	6d34393b 3a73253a 3b305b1b 256d3239     ;94m:%s:.[0;92m%
   1a53c:	5b1b3a73 33393b30 3e64256d 305b1b20     s:.[0;93m%d> .[0
   1a54c:	6d37333b 72646441 72724520 7325203a     ;37mAddr Err: %s
   1a55c:	6d305b1b 0000000a 35345b1b 2020206d     .[0m.....[45m   
   1a56c:	4f525245 305b1b52 6d34393b 3a73253a     ERROR.[0;94m:%s:
   1a57c:	3b305b1b 256d3239 5b1b3a73 33393b30     .[0;92m%s:.[0;93
   1a58c:	3e64256d 305b1b20 6d37333b 73617245     m%d> .[0;37mEras
   1a59c:	65532065 72452071 25203a72 305b1b73     e Seq Err: %s.[0
   1a5ac:	00000a6d 35345b1b 2020206d 4f525245     m....[45m   ERRO
   1a5bc:	305b1b52 6d34393b 3a73253a 3b305b1b     R.[0;94m:%s:.[0;
   1a5cc:	256d3239 5b1b3a73 33393b30 3e64256d     92m%s:.[0;93m%d>
   1a5dc:	305b1b20 6d37333b 206d6f43 20435243      .[0;37mCom CRC 
   1a5ec:	3a727245 1b732520 0a6d305b 00000000     Err: %s.[0m.....
   1a5fc:	35345b1b 2020206d 4f525245 305b1b52     .[45m   ERROR.[0
   1a60c:	6d34393b 3a73253a 3b305b1b 256d3239     ;94m:%s:.[0;92m%
   1a61c:	5b1b3a73 33393b30 3e64256d 305b1b20     s:.[0;93m%d> .[0
   1a62c:	6d37333b 656c6c49 206c6167 20646d43     ;37mIllegal Cmd 
   1a63c:	3a727245 1b732520 0a6d305b 00000000     Err: %s.[0m.....
   1a64c:	35345b1b 2020206d 4f525245 305b1b52     .[45m   ERROR.[0
   1a65c:	6d34393b 3a73253a 3b305b1b 256d3239     ;94m:%s:.[0;92m%
   1a66c:	5b1b3a73 33393b30 3e64256d 305b1b20     s:.[0;93m%d> .[0
   1a67c:	6d37333b 73617245 65522065 3a746573     ;37mErase Reset:
   1a68c:	1b732520 0a6d305b 00000000 35345b1b      %s.[0m......[45
   1a69c:	2020206d 4f525245 305b1b52 6d34393b     m   ERROR.[0;94m
   1a6ac:	3a73253a 3b305b1b 256d3239 5b1b3a73     :%s:.[0;92m%s:.[
   1a6bc:	33393b30 3e64256d 305b1b20 6d37333b     0;93m%d> .[0;37m
   1a6cc:	49206e49 3a656c64 1b732520 0a6d305b     In Idle: %s.[0m.
   1a6dc:	00000000 35345b1b 2020206d 4f525245     .....[45m   ERRO
   1a6ec:	305b1b52 6d34393b 3a73253a 3b305b1b     R.[0;94m:%s:.[0;
   1a6fc:	256d3239 5b1b3a73 33393b30 3e64256d     92m%s:.[0;93m%d>
   1a70c:	305b1b20 6d37333b 6c696146 74206465      .[0;37mFailed t
   1a71c:	6573206f 74532074 20747261 72646441     o set Start Addr
   1a72c:	21737365 6d305b1b 0000000a 35345b1b     ess!.[0m.....[45
   1a73c:	2020206d 4f525245 305b1b52 6d34393b     m   ERROR.[0;94m
   1a74c:	3a73253a 3b305b1b 256d3239 5b1b3a73     :%s:.[0;92m%s:.[
   1a75c:	33393b30 3e64256d 305b1b20 6d37333b     0;93m%d> .[0;37m
   1a76c:	6c696146 74206465 6573206f 6e452074     Failed to set En
   1a77c:	64412064 73657264 5b1b2173 000a6d30     d Address!.[0m..
   1a78c:	35345b1b 2020206d 4f525245 305b1b52     .[45m   ERROR.[0
   1a79c:	6d34393b 3a73253a 3b305b1b 256d3239     ;94m:%s:.[0;92m%
   1a7ac:	5b1b3a73 33393b30 3e64256d 305b1b20     s:.[0;93m%d> .[0
   1a7bc:	6d37333b 6e6b6e55 206e776f 70736572     ;37mUnknown resp
   1a7cc:	65736e6f 70797420 41202e65 74726f62     onse type. Abort
   1a7dc:	21676e69 6d305b1b 0000000a 35345b1b     ing!.[0m.....[45
   1a7ec:	2020206d 4f525245 305b1b52 6d34393b     m   ERROR.[0;94m
   1a7fc:	3a73253a 3b305b1b 256d3239 5b1b3a73     :%s:.[0;92m%s:.[
   1a80c:	33393b30 3e64256d 305b1b20 6d37333b     0;93m%d> .[0;37m
   1a81c:	70736552 65736e6f 736e7520 6f707075     Response unsuppo
   1a82c:	64657472 206e6920 20495053 65646f6d     rted in SPI mode
   1a83c:	6241202e 6974726f 1b21676e 0a6d305b     . Aborting!.[0m.
   1a84c:	ffffff00                                ....

0001a850 <Sd::kCrcTable8>:
   1a850:	1b120900 3f362d24 535a4148 777e656c     ....$-6?HAZSle~w
   1a860:	020b1019 262f343d 4a435851 6e677c75     ....=4/&QXCJu|gn
   1a870:	29203b32 0d041f16 6168737a 454c575e     2; )....zsha^WLE
   1a880:	3039222b 141d060f 78716a63 5c554e47     +"90....cjqxGNU\
   1a890:	7f766d64 5b524940 373e252c 131a0108     dmv.@IR[,%>7....
   1a8a0:	666f747d 424b5059 2e273c35 0a031811     }tofYPKB5<'.....
   1a8b0:	4d445f56 69607b72 050c171e 2128333a     V_DMr{`i....:3(!
   1a8c0:	545d464f 7079626b 1c150e07 38312a23     OF]Tkbyp....#*18
   1a8d0:	5a534841 7e776c65 121b0009 363f242d     AHSZelw~....-$?6
   1a8e0:	434a5158 676e757c 0b021910 2f263d34     XQJC|ung....4=&/
   1a8f0:	68617a73 4c455e57 2029323b 040d161f     szahW^EL;2) ....
   1a900:	7178636a 555c474e 39302b22 1d140f06     jcxqNG\U"+09....
   1a910:	3e372c25 1a130801 767f646d 525b4049     %,7>....md.vI@[R
   1a920:	272e353c 030a1118 6f667d74 4b425950     <5.'....t}foPYBK
   1a930:	0c051e17 28213a33 444d565f 6069727b     ....3:!(_VMD{ri`
   1a940:	151c070e 3138232a 5d544f46 00706b62     ....*#81FOT]bkp.

0001a950 <Sd::kCrcTable16>:
   1a950:	10210000 30632042 50a54084 70e760c6     ..!.B c0.@.P.`.p
   1a960:	91298108 b16ba14a d1adc18c f1efe1ce     ..).J.k.........
   1a970:	02101231 22523273 429452b5 62d672f7     1...s2R".R.B.r.b
   1a980:	83189339 a35ab37b c39cd3bd e3def3ff     9...{.Z.........
   1a990:	34432462 14010420 74c764e6 548544a4     b$C4 ....d.t.D.T
   1a9a0:	b54ba56a 95098528 f5cfe5ee d58dc5ac     j.K.(...........
   1a9b0:	26723653 06301611 66f676d7 46b45695     S6r&..0..v.f.V.F
   1a9c0:	a77ab75b 87389719 e7fef7df c7bcd79d     [.z...8.........
   1a9d0:	58e548c4 78a76886 18610840 38232802     .H.X.h.x@.a..(#8
   1a9e0:	d9edc9cc f9afe98e 99698948 b92ba90a     ........H.i...+.
   1a9f0:	4ad45af5 6a967ab7 0a501a71 2a123a33     .Z.J.z.jq.P.3:.*
   1aa00:	cbdcdbfd eb9efbbf 8b589b79 ab1abb3b     ........y.X.;...
   1aa10:	7c876ca6 5cc54ce4 3c032c22 1c410c60     .l.|.L.\",.<`.A.
   1aa20:	fd8fedae ddcdcdec bd0bad2a 9d498d68     ........*...h.I.
   1aa30:	6eb67e97 4ef45ed5 2e323e13 0e701e51     .~.n.^.N.>2.Q.p.
   1aa40:	efbeff9f cffcdfdd af3abf1b 8f789f59     ..........:.Y.x.
   1aa50:	81a99188 a1ebb1ca c12dd10c e16ff14e     ..........-.N.o.
   1aa60:	00a11080 20e330c2 40255004 60677046     .....0. .P%@Fpg`
   1aa70:	939883b9 b3daa3fb d31cc33d f35ee37f     ........=.....^.
   1aa80:	129002b1 32d222f3 52144235 72566277     .....".25B.RwbVr
   1aa90:	a5cbb5ea 858995a8 e54ff56e c50dd52c     ........n.O.,...
   1aaa0:	24c334e2 048114a0 64477466 44055424     .4.$....ftGd$T.D
   1aab0:	b7faa7db 97b88799 f77ee75f d73cc71d     ........_.~...<.
   1aac0:	36f226d3 16b00691 76766657 56344615     .&.6....Wfvv.F4V
   1aad0:	c96dd94c e92ff90e 89e999c8 a9abb98a     L.m.../.........
   1aae0:	48655844 68277806 08e118c0 28a33882     DXeH.x'h.....8.(
   1aaf0:	db5ccb7d fb1eeb3f 9bd88bf9 bb9aabbb     }.\.?...........
   1ab00:	5a544a75 7a166a37 1ad00af1 3a922ab3     uJTZ7j.z.....*.:
   1ab10:	ed0ffd2e cd4ddd6c ad8bbdaa 8dc99de8     ....l.M.........
   1ab20:	6c077c26 4c455c64 2c833ca2 0cc11ce0     &|.ld\EL.<.,....
   1ab30:	ff3eef1f df7ccf5d bfbaaf9b 9ff88fd9     ..>.].|.........
   1ab40:	7e366e17 5e744e55 3eb22e93 1ef00ed1     .n6~UNt^...>....

0001ab50 <Sd::Mount(SdInterface::CardInfo_t*)::file>:
   1ab50:	682e6473 ff007070                       sd.hpp..

0001ab58 <Sd::Mount(SdInterface::CardInfo_t*)::file>:
   1ab58:	682e6473 ff007070                       sd.hpp..

0001ab60 <Sd::Mount(SdInterface::CardInfo_t*)::file>:
   1ab60:	682e6473 ff007070                       sd.hpp..

0001ab68 <Sd::Mount(SdInterface::CardInfo_t*)::file>:
   1ab68:	682e6473 ff007070                       sd.hpp..

0001ab70 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file>:
   1ab70:	682e6473 ff007070                       sd.hpp..

0001ab78 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file>:
   1ab78:	682e6473 ff007070                       sd.hpp..

0001ab80 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file>:
   1ab80:	682e6473 ff007070                       sd.hpp..

0001ab88 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file>:
   1ab88:	682e6473 ff007070                       sd.hpp..

0001ab90 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file>:
   1ab90:	682e6473 ff007070                       sd.hpp..

0001ab98 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file>:
   1ab98:	682e6473 ff007070                       sd.hpp..

0001aba0 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file>:
   1aba0:	682e6473 ff007070                       sd.hpp..

0001aba8 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file>:
   1aba8:	682e6473 ff007070                       sd.hpp..

0001abb0 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file>:
   1abb0:	682e6473 ff007070                       sd.hpp..

0001abb8 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file>:
   1abb8:	682e6473 ff007070                       sd.hpp..

0001abc0 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file>:
   1abc0:	682e6473 ff007070                       sd.hpp..

0001abc8 <Sd::DeleteBlock(unsigned long, unsigned long)::file>:
   1abc8:	682e6473 ff007070                       sd.hpp..

0001abd0 <Sd::DeleteBlock(unsigned long, unsigned long)::file>:
   1abd0:	682e6473 ff007070                       sd.hpp..

0001abd8 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)::file>:
   1abd8:	682e6473 ff007070                       sd.hpp..

0001abe0 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)::file>:
   1abe0:	682e6473 ff007070                       sd.hpp..

0001abe8 <vtable for Sd>:
	...
   1abf0:	00017839 00016c91 00016d41 00017155     9x...l..Am..Uq..
   1ac00:	0001756d 00017719 00017cd9 00017d21     mu...w...|..!}..
   1ac10:	00017d91                                .}..

0001ac14 <vtable for SdInterface>:
	...
   1ac1c:	00017fb1 00017fb1 00017fb1 00017fb1     ................
   1ac2c:	00017fb1 00017fb1 00017fb1 00017fb1     ................
   1ac3c:	00017fb1                                ....

0001ac40 <Sd::Mount(SdInterface::CardInfo_t*)::__PRETTY_FUNCTION__>:
   1ac40:	74726976 206c6175 6c6f6f62 3a645320     virtual bool Sd:
   1ac50:	756f4d3a 5328746e 746e4964 61667265     :Mount(SdInterfa
   1ac60:	3a3a6563 64726143 6f666e49 292a745f     ce::CardInfo_t*)
   1ac70:	ffffff00                                ....

0001ac74 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::__PRETTY_FUNCTION__>:
   1ac74:	74726976 206c6175 746e6975 20745f38     virtual uint8_t 
   1ac84:	3a3a6453 64616552 636f6c42 6975286b     Sd::ReadBlock(ui
   1ac94:	3233746e 202c745f 746e6975 2a745f38     nt32_t, uint8_t*
   1aca4:	6975202c 3233746e 0029745f              , uint32_t).

0001acb0 <Sd::DeleteBlock(unsigned long, unsigned long)::__PRETTY_FUNCTION__>:
   1acb0:	74726976 206c6175 746e6975 20745f38     virtual uint8_t 
   1acc0:	3a3a6453 656c6544 6c426574 286b636f     Sd::DeleteBlock(
   1acd0:	746e6975 745f3233 6975202c 3233746e     uint32_t, uint32
   1ace0:	0029745f                                _t).

0001ace4 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)::__PRETTY_FUNCTION__>:
   1ace4:	74726976 206c6175 746e6975 745f3233     virtual uint32_t
   1acf4:	3a645320 6e65533a 646d4364 49645328      Sd::SendCmd(SdI
   1ad04:	7265746e 65636166 6f433a3a 6e616d6d     nterface::Comman
   1ad14:	75202c64 33746e69 2c745f32 6e697520     d, uint32_t, uin
   1ad24:	745f3874 75202c2a 33746e69 2c745f32     t8_t*, uint32_t,
   1ad34:	49645320 7265746e 65636166 654b3a3a      SdInterface::Ke
   1ad44:	6c417065 29657669 ffffff00              epAlive)....

0001ad50 <__sf_fake_stderr>:
	...

0001ad70 <__sf_fake_stdin>:
	...

0001ad90 <__sf_fake_stdout>:
	...
